
raspbian-preinstalled/vdir:     file format elf32-littlearm


Disassembly of section .init:

0001187c <.init>:
   1187c:	push	{r3, lr}
   11880:	bl	13b6c <__assert_fail@plt+0x1db4>
   11884:	pop	{r3, pc}

Disassembly of section .plt:

00011888 <calloc@plt-0x14>:
   11888:	push	{lr}		; (str lr, [sp, #-4]!)
   1188c:	ldr	lr, [pc, #4]	; 11898 <calloc@plt-0x4>
   11890:	add	lr, pc, lr
   11894:	ldr	pc, [lr, #8]!
   11898:	andeq	r8, r2, r8, ror #14

0001189c <calloc@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #40, 20	; 0x28000
   118a4:	ldr	pc, [ip, #1896]!	; 0x768

000118a8 <fputs_unlocked@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #40, 20	; 0x28000
   118b0:	ldr	pc, [ip, #1888]!	; 0x760

000118b4 <raise@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #40, 20	; 0x28000
   118bc:	ldr	pc, [ip, #1880]!	; 0x758

000118c0 <gmtime_r@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #40, 20	; 0x28000
   118c8:	ldr	pc, [ip, #1872]!	; 0x750

000118cc <getpwnam@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #40, 20	; 0x28000
   118d4:	ldr	pc, [ip, #1864]!	; 0x748

000118d8 <strcmp@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #40, 20	; 0x28000
   118e0:	ldr	pc, [ip, #1856]!	; 0x740

000118e4 <getpwuid@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #40, 20	; 0x28000
   118ec:	ldr	pc, [ip, #1848]!	; 0x738

000118f0 <mktime@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #40, 20	; 0x28000
   118f8:	ldr	pc, [ip, #1840]!	; 0x730

000118fc <fflush@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #40, 20	; 0x28000
   11904:	ldr	pc, [ip, #1832]!	; 0x728

00011908 <wcwidth@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #40, 20	; 0x28000
   11910:	ldr	pc, [ip, #1824]!	; 0x720

00011914 <sigprocmask@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #40, 20	; 0x28000
   1191c:	ldr	pc, [ip, #1816]!	; 0x718

00011920 <_setjmp@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #40, 20	; 0x28000
   11928:	ldr	pc, [ip, #1808]!	; 0x710

0001192c <memmove@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #40, 20	; 0x28000
   11934:	ldr	pc, [ip, #1800]!	; 0x708

00011938 <free@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #40, 20	; 0x28000
   11940:	ldr	pc, [ip, #1792]!	; 0x700

00011944 <clock_gettime@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #40, 20	; 0x28000
   1194c:	ldr	pc, [ip, #1784]!	; 0x6f8

00011950 <_exit@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #40, 20	; 0x28000
   11958:	ldr	pc, [ip, #1776]!	; 0x6f0

0001195c <memcpy@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #40, 20	; 0x28000
   11964:	ldr	pc, [ip, #1768]!	; 0x6e8

00011968 <__strtoull_internal@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #40, 20	; 0x28000
   11970:	ldr	pc, [ip, #1760]!	; 0x6e0

00011974 <mbsinit@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #40, 20	; 0x28000
   1197c:	ldr	pc, [ip, #1752]!	; 0x6d8

00011980 <signal@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #40, 20	; 0x28000
   11988:	ldr	pc, [ip, #1744]!	; 0x6d0

0001198c <fwrite_unlocked@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #40, 20	; 0x28000
   11994:	ldr	pc, [ip, #1736]!	; 0x6c8

00011998 <memcmp@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #40, 20	; 0x28000
   119a0:	ldr	pc, [ip, #1728]!	; 0x6c0

000119a4 <dcgettext@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #40, 20	; 0x28000
   119ac:	ldr	pc, [ip, #1720]!	; 0x6b8

000119b0 <__stack_chk_fail@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #40, 20	; 0x28000
   119b8:	ldr	pc, [ip, #1712]!	; 0x6b0

000119bc <realloc@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #40, 20	; 0x28000
   119c4:	ldr	pc, [ip, #1704]!	; 0x6a8

000119c8 <sigismember@plt>:
   119c8:	add	ip, pc, #0, 12
   119cc:	add	ip, ip, #40, 20	; 0x28000
   119d0:	ldr	pc, [ip, #1696]!	; 0x6a0

000119d4 <fgetfilecon@plt>:
   119d4:	add	ip, pc, #0, 12
   119d8:	add	ip, ip, #40, 20	; 0x28000
   119dc:	ldr	pc, [ip, #1688]!	; 0x698

000119e0 <localtime_r@plt>:
   119e0:	add	ip, pc, #0, 12
   119e4:	add	ip, ip, #40, 20	; 0x28000
   119e8:	ldr	pc, [ip, #1680]!	; 0x690

000119ec <textdomain@plt>:
   119ec:	add	ip, pc, #0, 12
   119f0:	add	ip, ip, #40, 20	; 0x28000
   119f4:	ldr	pc, [ip, #1672]!	; 0x688

000119f8 <iswcntrl@plt>:
   119f8:	add	ip, pc, #0, 12
   119fc:	add	ip, ip, #40, 20	; 0x28000
   11a00:	ldr	pc, [ip, #1664]!	; 0x680

00011a04 <__fxstatat64@plt>:
   11a04:	add	ip, pc, #0, 12
   11a08:	add	ip, ip, #40, 20	; 0x28000
   11a0c:	ldr	pc, [ip, #1656]!	; 0x678

00011a10 <fflush_unlocked@plt>:
   11a10:	add	ip, pc, #0, 12
   11a14:	add	ip, ip, #40, 20	; 0x28000
   11a18:	ldr	pc, [ip, #1648]!	; 0x670

00011a1c <iswprint@plt>:
   11a1c:	add	ip, pc, #0, 12
   11a20:	add	ip, ip, #40, 20	; 0x28000
   11a24:	ldr	pc, [ip, #1640]!	; 0x668

00011a28 <tzset@plt>:
   11a28:	add	ip, pc, #0, 12
   11a2c:	add	ip, ip, #40, 20	; 0x28000
   11a30:	ldr	pc, [ip, #1632]!	; 0x660

00011a34 <__fxstat64@plt>:
   11a34:	add	ip, pc, #0, 12
   11a38:	add	ip, ip, #40, 20	; 0x28000
   11a3c:	ldr	pc, [ip, #1624]!	; 0x658

00011a40 <readlink@plt>:
   11a40:	add	ip, pc, #0, 12
   11a44:	add	ip, ip, #40, 20	; 0x28000
   11a48:	ldr	pc, [ip, #1616]!	; 0x650

00011a4c <sigaction@plt>:
   11a4c:	add	ip, pc, #0, 12
   11a50:	add	ip, ip, #40, 20	; 0x28000
   11a54:	ldr	pc, [ip, #1608]!	; 0x648

00011a58 <__memcpy_chk@plt>:
   11a58:	add	ip, pc, #0, 12
   11a5c:	add	ip, ip, #40, 20	; 0x28000
   11a60:	ldr	pc, [ip, #1600]!	; 0x640

00011a64 <fwrite@plt>:
   11a64:	add	ip, pc, #0, 12
   11a68:	add	ip, ip, #40, 20	; 0x28000
   11a6c:	ldr	pc, [ip, #1592]!	; 0x638

00011a70 <ioctl@plt>:
   11a70:	add	ip, pc, #0, 12
   11a74:	add	ip, ip, #40, 20	; 0x28000
   11a78:	ldr	pc, [ip, #1584]!	; 0x630

00011a7c <getxattr@plt>:
   11a7c:	add	ip, pc, #0, 12
   11a80:	add	ip, ip, #40, 20	; 0x28000
   11a84:	ldr	pc, [ip, #1576]!	; 0x628

00011a88 <lseek64@plt>:
   11a88:	add	ip, pc, #0, 12
   11a8c:	add	ip, ip, #40, 20	; 0x28000
   11a90:	ldr	pc, [ip, #1568]!	; 0x620

00011a94 <__ctype_get_mb_cur_max@plt>:
   11a94:	add	ip, pc, #0, 12
   11a98:	add	ip, ip, #40, 20	; 0x28000
   11a9c:	ldr	pc, [ip, #1560]!	; 0x618

00011aa0 <strcpy@plt>:
   11aa0:	add	ip, pc, #0, 12
   11aa4:	add	ip, ip, #40, 20	; 0x28000
   11aa8:	ldr	pc, [ip, #1552]!	; 0x610

00011aac <gettimeofday@plt>:
   11aac:	add	ip, pc, #0, 12
   11ab0:	add	ip, ip, #40, 20	; 0x28000
   11ab4:	ldr	pc, [ip, #1544]!	; 0x608

00011ab8 <__fpending@plt>:
   11ab8:	add	ip, pc, #0, 12
   11abc:	add	ip, ip, #40, 20	; 0x28000
   11ac0:	ldr	pc, [ip, #1536]!	; 0x600

00011ac4 <mbrtowc@plt>:
   11ac4:	add	ip, pc, #0, 12
   11ac8:	add	ip, ip, #40, 20	; 0x28000
   11acc:	ldr	pc, [ip, #1528]!	; 0x5f8

00011ad0 <wcstombs@plt>:
   11ad0:	add	ip, pc, #0, 12
   11ad4:	add	ip, ip, #40, 20	; 0x28000
   11ad8:	ldr	pc, [ip, #1520]!	; 0x5f0

00011adc <error@plt>:
   11adc:	add	ip, pc, #0, 12
   11ae0:	add	ip, ip, #40, 20	; 0x28000
   11ae4:	ldr	pc, [ip, #1512]!	; 0x5e8

00011ae8 <gethostname@plt>:
   11ae8:	add	ip, pc, #0, 12
   11aec:	add	ip, ip, #40, 20	; 0x28000
   11af0:	ldr	pc, [ip, #1504]!	; 0x5e0

00011af4 <opendir@plt>:
   11af4:	add	ip, pc, #0, 12
   11af8:	add	ip, ip, #40, 20	; 0x28000
   11afc:	ldr	pc, [ip, #1496]!	; 0x5d8

00011b00 <fnmatch@plt>:
   11b00:	add	ip, pc, #0, 12
   11b04:	add	ip, ip, #40, 20	; 0x28000
   11b08:	ldr	pc, [ip, #1488]!	; 0x5d0

00011b0c <strcoll@plt>:
   11b0c:	add	ip, pc, #0, 12
   11b10:	add	ip, ip, #40, 20	; 0x28000
   11b14:	ldr	pc, [ip, #1480]!	; 0x5c8

00011b18 <getenv@plt>:
   11b18:	add	ip, pc, #0, 12
   11b1c:	add	ip, ip, #40, 20	; 0x28000
   11b20:	ldr	pc, [ip, #1472]!	; 0x5c0

00011b24 <lgetfilecon@plt>:
   11b24:	add	ip, pc, #0, 12
   11b28:	add	ip, ip, #40, 20	; 0x28000
   11b2c:	ldr	pc, [ip, #1464]!	; 0x5b8

00011b30 <malloc@plt>:
   11b30:	add	ip, pc, #0, 12
   11b34:	add	ip, ip, #40, 20	; 0x28000
   11b38:	ldr	pc, [ip, #1456]!	; 0x5b0

00011b3c <sigaddset@plt>:
   11b3c:	add	ip, pc, #0, 12
   11b40:	add	ip, ip, #40, 20	; 0x28000
   11b44:	ldr	pc, [ip, #1448]!	; 0x5a8

00011b48 <__libc_start_main@plt>:
   11b48:	add	ip, pc, #0, 12
   11b4c:	add	ip, ip, #40, 20	; 0x28000
   11b50:	ldr	pc, [ip, #1440]!	; 0x5a0

00011b54 <strftime@plt>:
   11b54:	add	ip, pc, #0, 12
   11b58:	add	ip, ip, #40, 20	; 0x28000
   11b5c:	ldr	pc, [ip, #1432]!	; 0x598

00011b60 <__freading@plt>:
   11b60:	add	ip, pc, #0, 12
   11b64:	add	ip, ip, #40, 20	; 0x28000
   11b68:	ldr	pc, [ip, #1424]!	; 0x590

00011b6c <__ctype_tolower_loc@plt>:
   11b6c:	add	ip, pc, #0, 12
   11b70:	add	ip, ip, #40, 20	; 0x28000
   11b74:	ldr	pc, [ip, #1416]!	; 0x588

00011b78 <__ctype_toupper_loc@plt>:
   11b78:	add	ip, pc, #0, 12
   11b7c:	add	ip, ip, #40, 20	; 0x28000
   11b80:	ldr	pc, [ip, #1408]!	; 0x580

00011b84 <__gmon_start__@plt>:
   11b84:	add	ip, pc, #0, 12
   11b88:	add	ip, ip, #40, 20	; 0x28000
   11b8c:	ldr	pc, [ip, #1400]!	; 0x578

00011b90 <mempcpy@plt>:
   11b90:	add	ip, pc, #0, 12
   11b94:	add	ip, ip, #40, 20	; 0x28000
   11b98:	ldr	pc, [ip, #1392]!	; 0x570

00011b9c <getopt_long@plt>:
   11b9c:	add	ip, pc, #0, 12
   11ba0:	add	ip, ip, #40, 20	; 0x28000
   11ba4:	ldr	pc, [ip, #1384]!	; 0x568

00011ba8 <__ctype_b_loc@plt>:
   11ba8:	add	ip, pc, #0, 12
   11bac:	add	ip, ip, #40, 20	; 0x28000
   11bb0:	ldr	pc, [ip, #1376]!	; 0x560

00011bb4 <getcwd@plt>:
   11bb4:	add	ip, pc, #0, 12
   11bb8:	add	ip, ip, #40, 20	; 0x28000
   11bbc:	ldr	pc, [ip, #1368]!	; 0x558

00011bc0 <exit@plt>:
   11bc0:	add	ip, pc, #0, 12
   11bc4:	add	ip, ip, #40, 20	; 0x28000
   11bc8:	ldr	pc, [ip, #1360]!	; 0x550

00011bcc <getfilecon@plt>:
   11bcc:	add	ip, pc, #0, 12
   11bd0:	add	ip, ip, #40, 20	; 0x28000
   11bd4:	ldr	pc, [ip, #1352]!	; 0x548

00011bd8 <strtoul@plt>:
   11bd8:	add	ip, pc, #0, 12
   11bdc:	add	ip, ip, #40, 20	; 0x28000
   11be0:	ldr	pc, [ip, #1344]!	; 0x540

00011be4 <tcgetpgrp@plt>:
   11be4:	add	ip, pc, #0, 12
   11be8:	add	ip, ip, #40, 20	; 0x28000
   11bec:	ldr	pc, [ip, #1336]!	; 0x538

00011bf0 <strlen@plt>:
   11bf0:	add	ip, pc, #0, 12
   11bf4:	add	ip, ip, #40, 20	; 0x28000
   11bf8:	ldr	pc, [ip, #1328]!	; 0x530

00011bfc <strchr@plt>:
   11bfc:	add	ip, pc, #0, 12
   11c00:	add	ip, ip, #40, 20	; 0x28000
   11c04:	ldr	pc, [ip, #1320]!	; 0x528

00011c08 <setenv@plt>:
   11c08:	add	ip, pc, #0, 12
   11c0c:	add	ip, ip, #40, 20	; 0x28000
   11c10:	ldr	pc, [ip, #1312]!	; 0x520

00011c14 <__errno_location@plt>:
   11c14:	add	ip, pc, #0, 12
   11c18:	add	ip, ip, #40, 20	; 0x28000
   11c1c:	ldr	pc, [ip, #1304]!	; 0x518

00011c20 <__sprintf_chk@plt>:
   11c20:	add	ip, pc, #0, 12
   11c24:	add	ip, ip, #40, 20	; 0x28000
   11c28:	ldr	pc, [ip, #1296]!	; 0x510

00011c2c <snprintf@plt>:
   11c2c:	add	ip, pc, #0, 12
   11c30:	add	ip, ip, #40, 20	; 0x28000
   11c34:	ldr	pc, [ip, #1288]!	; 0x508

00011c38 <__cxa_atexit@plt>:
   11c38:	add	ip, pc, #0, 12
   11c3c:	add	ip, ip, #40, 20	; 0x28000
   11c40:	ldr	pc, [ip, #1280]!	; 0x500

00011c44 <memset@plt>:
   11c44:	add	ip, pc, #0, 12
   11c48:	add	ip, ip, #40, 20	; 0x28000
   11c4c:	ldr	pc, [ip, #1272]!	; 0x4f8

00011c50 <__printf_chk@plt>:
   11c50:	add	ip, pc, #0, 12
   11c54:	add	ip, ip, #40, 20	; 0x28000
   11c58:	ldr	pc, [ip, #1264]!	; 0x4f0

00011c5c <stpncpy@plt>:
   11c5c:	add	ip, pc, #0, 12
   11c60:	add	ip, ip, #40, 20	; 0x28000
   11c64:	ldr	pc, [ip, #1256]!	; 0x4e8

00011c68 <fileno@plt>:
   11c68:	add	ip, pc, #0, 12
   11c6c:	add	ip, ip, #40, 20	; 0x28000
   11c70:	ldr	pc, [ip, #1248]!	; 0x4e0

00011c74 <__fprintf_chk@plt>:
   11c74:	add	ip, pc, #0, 12
   11c78:	add	ip, ip, #40, 20	; 0x28000
   11c7c:	ldr	pc, [ip, #1240]!	; 0x4d8

00011c80 <fclose@plt>:
   11c80:	add	ip, pc, #0, 12
   11c84:	add	ip, ip, #40, 20	; 0x28000
   11c88:	ldr	pc, [ip, #1232]!	; 0x4d0

00011c8c <fseeko64@plt>:
   11c8c:	add	ip, pc, #0, 12
   11c90:	add	ip, ip, #40, 20	; 0x28000
   11c94:	ldr	pc, [ip, #1224]!	; 0x4c8

00011c98 <__overflow@plt>:
   11c98:	add	ip, pc, #0, 12
   11c9c:	add	ip, ip, #40, 20	; 0x28000
   11ca0:	ldr	pc, [ip, #1216]!	; 0x4c0

00011ca4 <setlocale@plt>:
   11ca4:	add	ip, pc, #0, 12
   11ca8:	add	ip, ip, #40, 20	; 0x28000
   11cac:	ldr	pc, [ip, #1208]!	; 0x4b8

00011cb0 <sigemptyset@plt>:
   11cb0:	add	ip, pc, #0, 12
   11cb4:	add	ip, ip, #40, 20	; 0x28000
   11cb8:	ldr	pc, [ip, #1200]!	; 0x4b0

00011cbc <wcswidth@plt>:
   11cbc:	add	ip, pc, #0, 12
   11cc0:	add	ip, ip, #40, 20	; 0x28000
   11cc4:	ldr	pc, [ip, #1192]!	; 0x4a8

00011cc8 <strrchr@plt>:
   11cc8:	add	ip, pc, #0, 12
   11ccc:	add	ip, ip, #40, 20	; 0x28000
   11cd0:	ldr	pc, [ip, #1184]!	; 0x4a0

00011cd4 <nl_langinfo@plt>:
   11cd4:	add	ip, pc, #0, 12
   11cd8:	add	ip, ip, #40, 20	; 0x28000
   11cdc:	ldr	pc, [ip, #1176]!	; 0x498

00011ce0 <localeconv@plt>:
   11ce0:	add	ip, pc, #0, 12
   11ce4:	add	ip, ip, #40, 20	; 0x28000
   11ce8:	ldr	pc, [ip, #1168]!	; 0x490

00011cec <mbstowcs@plt>:
   11cec:	add	ip, pc, #0, 12
   11cf0:	add	ip, ip, #40, 20	; 0x28000
   11cf4:	ldr	pc, [ip, #1160]!	; 0x488

00011cf8 <readdir64@plt>:
   11cf8:	add	ip, pc, #0, 12
   11cfc:	add	ip, ip, #40, 20	; 0x28000
   11d00:	ldr	pc, [ip, #1152]!	; 0x480

00011d04 <timegm@plt>:
   11d04:	add	ip, pc, #0, 12
   11d08:	add	ip, ip, #40, 20	; 0x28000
   11d0c:	ldr	pc, [ip, #1144]!	; 0x478

00011d10 <dirfd@plt>:
   11d10:	add	ip, pc, #0, 12
   11d14:	add	ip, ip, #40, 20	; 0x28000
   11d18:	ldr	pc, [ip, #1136]!	; 0x470

00011d1c <freecon@plt>:
   11d1c:	add	ip, pc, #0, 12
   11d20:	add	ip, ip, #40, 20	; 0x28000
   11d24:	ldr	pc, [ip, #1128]!	; 0x468

00011d28 <bindtextdomain@plt>:
   11d28:	add	ip, pc, #0, 12
   11d2c:	add	ip, ip, #40, 20	; 0x28000
   11d30:	ldr	pc, [ip, #1120]!	; 0x460

00011d34 <__xstat64@plt>:
   11d34:	add	ip, pc, #0, 12
   11d38:	add	ip, ip, #40, 20	; 0x28000
   11d3c:	ldr	pc, [ip, #1112]!	; 0x458

00011d40 <isatty@plt>:
   11d40:	add	ip, pc, #0, 12
   11d44:	add	ip, ip, #40, 20	; 0x28000
   11d48:	ldr	pc, [ip, #1104]!	; 0x450

00011d4c <unsetenv@plt>:
   11d4c:	add	ip, pc, #0, 12
   11d50:	add	ip, ip, #40, 20	; 0x28000
   11d54:	ldr	pc, [ip, #1096]!	; 0x448

00011d58 <strncmp@plt>:
   11d58:	add	ip, pc, #0, 12
   11d5c:	add	ip, ip, #40, 20	; 0x28000
   11d60:	ldr	pc, [ip, #1088]!	; 0x440

00011d64 <abort@plt>:
   11d64:	add	ip, pc, #0, 12
   11d68:	add	ip, ip, #40, 20	; 0x28000
   11d6c:	ldr	pc, [ip, #1080]!	; 0x438

00011d70 <__lxstat64@plt>:
   11d70:	add	ip, pc, #0, 12
   11d74:	add	ip, ip, #40, 20	; 0x28000
   11d78:	ldr	pc, [ip, #1072]!	; 0x430

00011d7c <closedir@plt>:
   11d7c:	add	ip, pc, #0, 12
   11d80:	add	ip, ip, #40, 20	; 0x28000
   11d84:	ldr	pc, [ip, #1064]!	; 0x428

00011d88 <getgrgid@plt>:
   11d88:	add	ip, pc, #0, 12
   11d8c:	add	ip, ip, #40, 20	; 0x28000
   11d90:	ldr	pc, [ip, #1056]!	; 0x420

00011d94 <getgrnam@plt>:
   11d94:	add	ip, pc, #0, 12
   11d98:	add	ip, ip, #40, 20	; 0x28000
   11d9c:	ldr	pc, [ip, #1048]!	; 0x418

00011da0 <__snprintf_chk@plt>:
   11da0:	add	ip, pc, #0, 12
   11da4:	add	ip, ip, #40, 20	; 0x28000
   11da8:	ldr	pc, [ip, #1040]!	; 0x410

00011dac <strspn@plt>:
   11dac:	add	ip, pc, #0, 12
   11db0:	add	ip, ip, #40, 20	; 0x28000
   11db4:	ldr	pc, [ip, #1032]!	; 0x408

00011db8 <__assert_fail@plt>:
   11db8:	add	ip, pc, #0, 12
   11dbc:	add	ip, ip, #40, 20	; 0x28000
   11dc0:	ldr	pc, [ip, #1024]!	; 0x400

Disassembly of section .text:

00011dc8 <_obstack_begin@@Base-0x11c28>:
   11dc8:	ldr	r3, [pc, #4048]	; 12da0 <__assert_fail@plt+0xfe8>
   11dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd0:	sub	sp, sp, #84	; 0x54
   11dd4:	ldr	r3, [r3]
   11dd8:	mov	r6, r0
   11ddc:	ldr	r0, [r1]
   11de0:	str	r3, [sp, #76]	; 0x4c
   11de4:	mov	r7, r1
   11de8:	bl	1f860 <__assert_fail@plt+0xdaa8>
   11dec:	ldr	r1, [pc, #4016]	; 12da4 <__assert_fail@plt+0xfec>
   11df0:	mov	r0, #6
   11df4:	bl	11ca4 <setlocale@plt>
   11df8:	ldr	r1, [pc, #4008]	; 12da8 <__assert_fail@plt+0xff0>
   11dfc:	ldr	r0, [pc, #4008]	; 12dac <__assert_fail@plt+0xff4>
   11e00:	bl	11d28 <bindtextdomain@plt>
   11e04:	ldr	r0, [pc, #4000]	; 12dac <__assert_fail@plt+0xff4>
   11e08:	bl	119ec <textdomain@plt>
   11e0c:	ldr	r3, [pc, #3996]	; 12db0 <__assert_fail@plt+0xff8>
   11e10:	mov	r9, #2
   11e14:	ldr	r0, [pc, #3992]	; 12db4 <__assert_fail@plt+0xffc>
   11e18:	str	r9, [r3]
   11e1c:	bl	24eec <_obstack_memory_used@@Base+0x1304>
   11e20:	ldr	r3, [pc, #3984]	; 12db8 <__assert_fail@plt+0x1000>
   11e24:	ldr	r4, [pc, #3984]	; 12dbc <__assert_fail@plt+0x1004>
   11e28:	ldr	r5, [pc, #3984]	; 12dc0 <__assert_fail@plt+0x1008>
   11e2c:	ldr	sl, [r3]
   11e30:	mov	r3, #-2147483648	; 0x80000000
   11e34:	mov	r8, #0
   11e38:	mvn	r2, #0
   11e3c:	str	r3, [r4, #4020]	; 0xfb4
   11e40:	cmp	sl, r9
   11e44:	mov	r3, #1
   11e48:	str	r2, [r4, #4024]	; 0xfb8
   11e4c:	str	r8, [r4, #3836]	; 0xefc
   11e50:	str	r8, [r4, #3084]	; 0xc0c
   11e54:	strb	r8, [r4, #3977]	; 0xf89
   11e58:	strb	r3, [r5, #-4007]	; 0xfffff059
   11e5c:	beq	13134 <__assert_fail@plt+0x137c>
   11e60:	cmp	sl, #3
   11e64:	bne	12428 <__assert_fail@plt+0x670>
   11e68:	mov	r0, r8
   11e6c:	mov	r1, #7
   11e70:	str	r8, [r4, #4072]	; 0xfe8
   11e74:	bl	21484 <__assert_fail@plt+0xf6cc>
   11e78:	mov	r8, #0
   11e7c:	mov	r3, #1
   11e80:	ldr	r0, [pc, #3900]	; 12dc4 <__assert_fail@plt+0x100c>
   11e84:	str	r8, [r4, #3808]	; 0xee0
   11e88:	str	r8, [r4, #3404]	; 0xd4c
   11e8c:	strb	r8, [r4, #3812]	; 0xee4
   11e90:	strb	r8, [r4, #3828]	; 0xef4
   11e94:	strb	r8, [r4, #3993]	; 0xf99
   11e98:	str	r8, [r4, #3840]	; 0xf00
   11e9c:	strb	r8, [r4, #3992]	; 0xf98
   11ea0:	strb	r8, [r5, #-4008]	; 0xfffff058
   11ea4:	strb	r8, [r5, #-4056]	; 0xfffff028
   11ea8:	str	r8, [r5, #-3956]	; 0xfffff08c
   11eac:	str	r8, [r5, #-3952]	; 0xfffff090
   11eb0:	str	r8, [r5, #-3948]	; 0xfffff094
   11eb4:	strb	r8, [r4, #4009]	; 0xfa9
   11eb8:	str	r3, [r5, #-4088]	; 0xfffff008
   11ebc:	bl	11b18 <getenv@plt>
   11ec0:	subs	sl, r0, #0
   11ec4:	beq	11ef0 <__assert_fail@plt+0x138>
   11ec8:	ldr	r9, [pc, #3832]	; 12dc8 <__assert_fail@plt+0x1010>
   11ecc:	mov	r3, #4
   11ed0:	mov	r2, r9
   11ed4:	ldr	r1, [pc, #3824]	; 12dcc <__assert_fail@plt+0x1014>
   11ed8:	bl	1a150 <__assert_fail@plt+0x8398>
   11edc:	cmp	r0, #0
   11ee0:	blt	1307c <__assert_fail@plt+0x12c4>
   11ee4:	ldr	r1, [r9, r0, lsl #2]
   11ee8:	mov	r0, r8
   11eec:	bl	21484 <__assert_fail@plt+0xf6cc>
   11ef0:	mov	r3, #80	; 0x50
   11ef4:	ldr	r0, [pc, #3796]	; 12dd0 <__assert_fail@plt+0x1018>
   11ef8:	str	r3, [r4, #4]
   11efc:	bl	11b18 <getenv@plt>
   11f00:	subs	r8, r0, #0
   11f04:	beq	11f14 <__assert_fail@plt+0x15c>
   11f08:	ldrb	r3, [r8]
   11f0c:	cmp	r3, #0
   11f10:	bne	130c8 <__assert_fail@plt+0x1310>
   11f14:	add	sl, sp, #56	; 0x38
   11f18:	mov	r2, sl
   11f1c:	ldr	r1, [pc, #3760]	; 12dd4 <__assert_fail@plt+0x101c>
   11f20:	mov	r0, #1
   11f24:	bl	11a70 <ioctl@plt>
   11f28:	cmn	r0, #1
   11f2c:	beq	11f3c <__assert_fail@plt+0x184>
   11f30:	ldrh	r3, [sp, #58]	; 0x3a
   11f34:	cmp	r3, #0
   11f38:	strne	r3, [r4, #4]
   11f3c:	ldr	r0, [pc, #3732]	; 12dd8 <__assert_fail@plt+0x1020>
   11f40:	bl	11b18 <getenv@plt>
   11f44:	mov	r3, #8
   11f48:	str	r3, [r4, #3820]	; 0xeec
   11f4c:	subs	r9, r0, #0
   11f50:	beq	11f7c <__assert_fail@plt+0x1c4>
   11f54:	mov	r8, #0
   11f58:	str	r8, [sp]
   11f5c:	mov	r2, r8
   11f60:	mov	r1, r8
   11f64:	mov	r3, sl
   11f68:	bl	226a8 <__assert_fail@plt+0x108f0>
   11f6c:	cmp	r0, r8
   11f70:	bne	131b4 <__assert_fail@plt+0x13fc>
   11f74:	ldr	r3, [sp, #56]	; 0x38
   11f78:	str	r3, [r4, #3820]	; 0xeec
   11f7c:	ldr	r8, [pc, #4044]	; 12f50 <__assert_fail@plt+0x1198>
   11f80:	ldr	fp, [pc, #3668]	; 12ddc <__assert_fail@plt+0x1024>
   11f84:	ldr	r9, [pc, #3668]	; 12de0 <__assert_fail@plt+0x1028>
   11f88:	mov	r3, #0
   11f8c:	add	r2, r8, #928	; 0x3a0
   11f90:	str	r3, [sp, #36]	; 0x24
   11f94:	str	r2, [sp, #40]	; 0x28
   11f98:	str	r3, [sp, #28]
   11f9c:	str	r3, [sp, #32]
   11fa0:	mvn	ip, #0
   11fa4:	str	sl, [sp]
   11fa8:	mov	r3, r8
   11fac:	mov	r2, fp
   11fb0:	mov	r1, r7
   11fb4:	mov	r0, r6
   11fb8:	str	ip, [sp, #56]	; 0x38
   11fbc:	bl	11b9c <getopt_long@plt>
   11fc0:	cmn	r0, #1
   11fc4:	beq	12434 <__assert_fail@plt+0x67c>
   11fc8:	add	r0, r0, #3
   11fcc:	cmp	r0, r9
   11fd0:	ldrls	pc, [pc, r0, lsl #2]
   11fd4:	b	13a50 <__assert_fail@plt+0x1c98>
   11fd8:	andeq	r3, r1, r8, lsr #32
   11fdc:	andeq	r3, r1, ip, asr #19
   11fe0:	andeq	r3, r1, r0, asr sl
   11fe4:	andeq	r3, r1, r0, asr sl
   11fe8:	andeq	r3, r1, r0, asr sl
   11fec:	andeq	r3, r1, r0, asr sl
   11ff0:	andeq	r3, r1, r0, asr sl
   11ff4:	andeq	r3, r1, r0, asr sl
   11ff8:	andeq	r3, r1, r0, asr sl
   11ffc:	andeq	r3, r1, r0, asr sl
   12000:	andeq	r3, r1, r0, asr sl
   12004:	andeq	r3, r1, r0, asr sl
   12008:	andeq	r3, r1, r0, asr sl
   1200c:	andeq	r3, r1, r0, asr sl
   12010:	andeq	r3, r1, r0, asr sl
   12014:	andeq	r3, r1, r0, asr sl
   12018:	andeq	r3, r1, r0, asr sl
   1201c:	andeq	r3, r1, r0, asr sl
   12020:	andeq	r3, r1, r0, asr sl
   12024:	andeq	r3, r1, r0, asr sl
   12028:	andeq	r3, r1, r0, asr sl
   1202c:	andeq	r3, r1, r0, asr sl
   12030:	andeq	r3, r1, r0, asr sl
   12034:	andeq	r3, r1, r0, asr sl
   12038:	andeq	r3, r1, r0, asr sl
   1203c:	andeq	r3, r1, r0, asr sl
   12040:	andeq	r3, r1, r0, asr sl
   12044:	andeq	r3, r1, r0, asr sl
   12048:	andeq	r3, r1, r0, asr sl
   1204c:	andeq	r3, r1, r0, asr sl
   12050:	andeq	r3, r1, r0, asr sl
   12054:	andeq	r3, r1, r0, asr sl
   12058:	andeq	r3, r1, r0, asr sl
   1205c:	andeq	r3, r1, r0, asr sl
   12060:	andeq	r3, r1, r0, asr sl
   12064:	andeq	r3, r1, r0, asr sl
   12068:	andeq	r3, r1, r0, asr sl
   1206c:	andeq	r3, r1, r0, asr sl
   12070:	andeq	r3, r1, r0, asr sl
   12074:	andeq	r3, r1, r0, asr sl
   12078:	andeq	r3, r1, r0, asr sl
   1207c:	andeq	r3, r1, r0, asr sl
   12080:	andeq	r3, r1, r0, asr sl
   12084:	andeq	r3, r1, r0, asr sl
   12088:	andeq	r3, r1, r0, asr sl
   1208c:	andeq	r3, r1, r0, asr sl
   12090:	andeq	r3, r1, r0, asr sl
   12094:	andeq	r3, r1, r0, asr sl
   12098:	andeq	r3, r1, r0, asr sl
   1209c:	andeq	r3, r1, r0, asr sl
   120a0:	andeq	r3, r1, r0, asr sl
   120a4:	andeq	r3, r1, r0, asr sl
   120a8:	andeq	r3, r1, r4, lsl r0
   120ac:	andeq	r3, r1, r0, asr sl
   120b0:	andeq	r3, r1, r0, asr sl
   120b4:	andeq	r3, r1, r0, asr sl
   120b8:	andeq	r3, r1, r0, asr sl
   120bc:	andeq	r3, r1, r0, asr sl
   120c0:	andeq	r3, r1, r0, asr sl
   120c4:	andeq	r3, r1, r0, asr sl
   120c8:	andeq	r3, r1, r0, asr sl
   120cc:	andeq	r3, r1, r0, asr sl
   120d0:	andeq	r3, r1, r0, asr sl
   120d4:	andeq	r3, r1, r0, asr sl
   120d8:	andeq	r3, r1, r0, asr sl
   120dc:	andeq	r3, r1, r0, asr sl
   120e0:	andeq	r3, r1, r0, asr sl
   120e4:	andeq	r3, r1, r0, asr sl
   120e8:	andeq	r3, r1, r8
   120ec:	andeq	r2, r1, ip, asr #31
   120f0:	andeq	r2, r1, r0, asr #31
   120f4:			; <UNDEFINED> instruction: 0x00012fb4
   120f8:	andeq	r3, r1, r0, asr sl
   120fc:	andeq	r2, r1, r8, lsr #31
   12100:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12104:	andeq	r2, r1, ip, lsl #31
   12108:	andeq	r2, r1, r4, ror #30
   1210c:	andeq	r3, r1, r0, asr sl
   12110:	andeq	r3, r1, r0, asr sl
   12114:	muleq	r1, r4, sp
   12118:	andeq	r3, r1, r0, asr sl
   1211c:	andeq	r2, r1, r4, lsl #27
   12120:	andeq	r3, r1, r0, asr sl
   12124:	andeq	r3, r1, r0, asr sl
   12128:	andeq	r2, r1, r4, ror sp
   1212c:	andeq	r2, r1, r8, ror #26
   12130:	andeq	r2, r1, r4, asr sp
   12134:	strdeq	r2, [r1], -ip
   12138:	andeq	r2, r1, r8, ror #25
   1213c:	andeq	r3, r1, r0, asr sl
   12140:	andeq	r3, r1, r0, asr sl
   12144:	ldrdeq	r2, [r1], -r8
   12148:	andeq	r3, r1, r0, asr sl
   1214c:	andeq	r2, r1, ip, asr #25
   12150:	andeq	r3, r1, r0, asr sl
   12154:	andeq	r3, r1, r0, asr sl
   12158:	andeq	r3, r1, r0, asr sl
   1215c:	andeq	r3, r1, r0, asr sl
   12160:	andeq	r3, r1, r0, asr sl
   12164:	andeq	r3, r1, r0, asr sl
   12168:	andeq	r2, r1, r0, asr #25
   1216c:			; <UNDEFINED> instruction: 0x00012cb0
   12170:	andeq	r2, r1, r4, lsr #25
   12174:	muleq	r1, r8, ip
   12178:	andeq	r3, r1, r0, asr sl
   1217c:	andeq	r2, r1, r0, ror #24
   12180:	andeq	r2, r1, ip, asr #24
   12184:	andeq	r2, r1, r4, lsr #24
   12188:	andeq	r2, r1, r8, lsl ip
   1218c:	andeq	r3, r1, r0, asr sl
   12190:	andeq	r2, r1, ip, lsl #24
   12194:	andeq	r2, r1, r0, lsl #24
   12198:	strdeq	r2, [r1], -r4
   1219c:	andeq	r2, r1, r0, ror #23
   121a0:	andeq	r2, r1, ip, asr #23
   121a4:	andeq	r2, r1, r0, asr #23
   121a8:			; <UNDEFINED> instruction: 0x00012bb4
   121ac:	andeq	r2, r1, r8, lsr #23
   121b0:	muleq	r1, ip, fp
   121b4:	andeq	r2, r1, r8, lsl #23
   121b8:	andeq	r2, r1, ip, ror fp
   121bc:	andeq	r2, r1, r8, ror #22
   121c0:	andeq	r2, r1, ip, lsl fp
   121c4:	andeq	r2, r1, r0, lsl fp
   121c8:	andeq	r3, r1, r0, asr sl
   121cc:	andeq	r3, r1, r0, asr sl
   121d0:	andeq	r3, r1, r0, asr sl
   121d4:	andeq	r3, r1, r0, asr sl
   121d8:	andeq	r3, r1, r0, asr sl
   121dc:	andeq	r3, r1, r0, asr sl
   121e0:	andeq	r3, r1, r0, asr sl
   121e4:	andeq	r3, r1, r0, asr sl
   121e8:	andeq	r3, r1, r0, asr sl
   121ec:	andeq	r3, r1, r0, asr sl
   121f0:	andeq	r3, r1, r0, asr sl
   121f4:	andeq	r3, r1, r0, asr sl
   121f8:	andeq	r3, r1, r0, asr sl
   121fc:	andeq	r3, r1, r0, asr sl
   12200:	andeq	r3, r1, r0, asr sl
   12204:	andeq	r3, r1, r0, asr sl
   12208:	andeq	r3, r1, r0, asr sl
   1220c:	andeq	r3, r1, r0, asr sl
   12210:	andeq	r3, r1, r0, asr sl
   12214:	andeq	r3, r1, r0, asr sl
   12218:	andeq	r3, r1, r0, asr sl
   1221c:	andeq	r3, r1, r0, asr sl
   12220:	andeq	r3, r1, r0, asr sl
   12224:	andeq	r3, r1, r0, asr sl
   12228:	andeq	r3, r1, r0, asr sl
   1222c:	andeq	r3, r1, r0, asr sl
   12230:	andeq	r3, r1, r0, asr sl
   12234:	andeq	r3, r1, r0, asr sl
   12238:	andeq	r3, r1, r0, asr sl
   1223c:	andeq	r3, r1, r0, asr sl
   12240:	andeq	r3, r1, r0, asr sl
   12244:	andeq	r3, r1, r0, asr sl
   12248:	andeq	r3, r1, r0, asr sl
   1224c:	andeq	r3, r1, r0, asr sl
   12250:	andeq	r3, r1, r0, asr sl
   12254:	andeq	r3, r1, r0, asr sl
   12258:	andeq	r3, r1, r0, asr sl
   1225c:	andeq	r3, r1, r0, asr sl
   12260:	andeq	r3, r1, r0, asr sl
   12264:	andeq	r3, r1, r0, asr sl
   12268:	andeq	r3, r1, r0, asr sl
   1226c:	andeq	r3, r1, r0, asr sl
   12270:	andeq	r3, r1, r0, asr sl
   12274:	andeq	r3, r1, r0, asr sl
   12278:	andeq	r3, r1, r0, asr sl
   1227c:	andeq	r3, r1, r0, asr sl
   12280:	andeq	r3, r1, r0, asr sl
   12284:	andeq	r3, r1, r0, asr sl
   12288:	andeq	r3, r1, r0, asr sl
   1228c:	andeq	r3, r1, r0, asr sl
   12290:	andeq	r3, r1, r0, asr sl
   12294:	andeq	r3, r1, r0, asr sl
   12298:	andeq	r3, r1, r0, asr sl
   1229c:	andeq	r3, r1, r0, asr sl
   122a0:	andeq	r3, r1, r0, asr sl
   122a4:	andeq	r3, r1, r0, asr sl
   122a8:	andeq	r3, r1, r0, asr sl
   122ac:	andeq	r3, r1, r0, asr sl
   122b0:	andeq	r3, r1, r0, asr sl
   122b4:	andeq	r3, r1, r0, asr sl
   122b8:	andeq	r3, r1, r0, asr sl
   122bc:	andeq	r3, r1, r0, asr sl
   122c0:	andeq	r3, r1, r0, asr sl
   122c4:	andeq	r3, r1, r0, asr sl
   122c8:	andeq	r3, r1, r0, asr sl
   122cc:	andeq	r3, r1, r0, asr sl
   122d0:	andeq	r3, r1, r0, asr sl
   122d4:	andeq	r3, r1, r0, asr sl
   122d8:	andeq	r3, r1, r0, asr sl
   122dc:	andeq	r3, r1, r0, asr sl
   122e0:	andeq	r3, r1, r0, asr sl
   122e4:	andeq	r3, r1, r0, asr sl
   122e8:	andeq	r3, r1, r0, asr sl
   122ec:	andeq	r3, r1, r0, asr sl
   122f0:	andeq	r3, r1, r0, asr sl
   122f4:	andeq	r3, r1, r0, asr sl
   122f8:	andeq	r3, r1, r0, asr sl
   122fc:	andeq	r3, r1, r0, asr sl
   12300:	andeq	r3, r1, r0, asr sl
   12304:	andeq	r3, r1, r0, asr sl
   12308:	andeq	r3, r1, r0, asr sl
   1230c:	andeq	r3, r1, r0, asr sl
   12310:	andeq	r3, r1, r0, asr sl
   12314:	andeq	r3, r1, r0, asr sl
   12318:	andeq	r3, r1, r0, asr sl
   1231c:	andeq	r3, r1, r0, asr sl
   12320:	andeq	r3, r1, r0, asr sl
   12324:	andeq	r3, r1, r0, asr sl
   12328:	andeq	r3, r1, r0, asr sl
   1232c:	andeq	r3, r1, r0, asr sl
   12330:	andeq	r3, r1, r0, asr sl
   12334:	andeq	r3, r1, r0, asr sl
   12338:	andeq	r3, r1, r0, asr sl
   1233c:	andeq	r3, r1, r0, asr sl
   12340:	andeq	r3, r1, r0, asr sl
   12344:	andeq	r3, r1, r0, asr sl
   12348:	andeq	r3, r1, r0, asr sl
   1234c:	andeq	r3, r1, r0, asr sl
   12350:	andeq	r3, r1, r0, asr sl
   12354:	andeq	r3, r1, r0, asr sl
   12358:	andeq	r3, r1, r0, asr sl
   1235c:	andeq	r3, r1, r0, asr sl
   12360:	andeq	r3, r1, r0, asr sl
   12364:	andeq	r3, r1, r0, asr sl
   12368:	andeq	r3, r1, r0, asr sl
   1236c:	andeq	r3, r1, r0, asr sl
   12370:	andeq	r3, r1, r0, asr sl
   12374:	andeq	r3, r1, r0, asr sl
   12378:	andeq	r3, r1, r0, asr sl
   1237c:	andeq	r3, r1, r0, asr sl
   12380:	andeq	r3, r1, r0, asr sl
   12384:	andeq	r3, r1, r0, asr sl
   12388:	andeq	r3, r1, r0, asr sl
   1238c:	andeq	r3, r1, r0, asr sl
   12390:	andeq	r3, r1, r0, asr sl
   12394:	andeq	r3, r1, r0, asr sl
   12398:	andeq	r3, r1, r0, asr sl
   1239c:	andeq	r3, r1, r0, asr sl
   123a0:	andeq	r3, r1, r0, asr sl
   123a4:	andeq	r3, r1, r0, asr sl
   123a8:	andeq	r3, r1, r0, asr sl
   123ac:	andeq	r3, r1, r0, asr sl
   123b0:	andeq	r3, r1, r0, asr sl
   123b4:	andeq	r3, r1, r0, asr sl
   123b8:	andeq	r3, r1, r0, asr sl
   123bc:	andeq	r3, r1, r0, asr sl
   123c0:	andeq	r3, r1, r0, asr sl
   123c4:	andeq	r3, r1, r0, asr sl
   123c8:	andeq	r3, r1, r0, asr sl
   123cc:	andeq	r3, r1, r0, asr sl
   123d0:	andeq	r3, r1, r0, asr sl
   123d4:	andeq	r3, r1, r0, asr sl
   123d8:	andeq	r3, r1, r0, asr sl
   123dc:	andeq	r3, r1, r0, asr sl
   123e0:	andeq	r3, r1, r0, asr sl
   123e4:	andeq	r2, r1, r4, lsl #22
   123e8:	andeq	r2, r1, r8, asr #21
   123ec:	andeq	r2, r1, r8, ror #20
   123f0:	andeq	r2, r1, ip, asr sl
   123f4:	andeq	r2, r1, r0, asr sl
   123f8:	andeq	r2, r1, ip, lsl #20
   123fc:	strdeq	r2, [r1], -r8
   12400:	andeq	r2, r1, ip, ror #19
   12404:	andeq	r2, r1, r8, asr #19
   12408:	andeq	r2, r1, ip, asr r9
   1240c:	andeq	r2, r1, ip, lsl r9
   12410:	ldrdeq	r2, [r1], -ip
   12414:	ldrdeq	r2, [r1], -r0
   12418:	andeq	r2, r1, r8, lsr #17
   1241c:	andeq	r2, r1, ip, asr r8
   12420:	andeq	r2, r1, r8, lsl r8
   12424:	andeq	r2, r1, r8, lsl #16
   12428:	cmp	sl, r3
   1242c:	beq	13148 <__assert_fail@plt+0x1390>
   12430:	bl	11d64 <abort@plt>
   12434:	ldr	r8, [pc, #2472]	; 12de4 <__assert_fail@plt+0x102c>
   12438:	ldrd	r2, [r8]
   1243c:	orrs	r3, r2, r3
   12440:	beq	131e8 <__assert_fail@plt+0x1430>
   12444:	ldr	r8, [r4, #4]
   12448:	mov	r1, #3
   1244c:	mov	r0, r8
   12450:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   12454:	ldr	r2, [pc, #2444]	; 12de8 <__assert_fail@plt+0x1030>
   12458:	mov	r0, #0
   1245c:	umull	r2, r3, r8, r2
   12460:	lsr	r3, r3, #1
   12464:	cmp	r1, r0
   12468:	moveq	r1, r3
   1246c:	addne	r1, r3, #1
   12470:	str	r1, [r4, #4076]	; 0xfec
   12474:	bl	2146c <__assert_fail@plt+0xf6b4>
   12478:	ldr	r3, [r4, #4072]	; 0xfe8
   1247c:	cmp	r3, #4
   12480:	cmpne	r3, #1
   12484:	moveq	r2, #0
   12488:	movne	r2, #1
   1248c:	mov	r8, r0
   12490:	moveq	r3, r2
   12494:	beq	124c8 <__assert_fail@plt+0x710>
   12498:	ldr	r2, [r4, #4]
   1249c:	clz	r3, r3
   124a0:	cmp	r2, #0
   124a4:	lsr	r3, r3, #5
   124a8:	movne	r3, #1
   124ac:	cmp	r3, #0
   124b0:	beq	124c8 <__assert_fail@plt+0x710>
   124b4:	bic	r3, r0, #2
   124b8:	cmp	r0, #6
   124bc:	cmpne	r3, #1
   124c0:	moveq	r3, #1
   124c4:	movne	r3, #0
   124c8:	mov	r0, #0
   124cc:	strb	r3, [r4, #3978]	; 0xf8a
   124d0:	bl	21438 <__assert_fail@plt+0xf680>
   124d4:	cmp	r8, #7
   124d8:	str	r0, [r4, #3140]	; 0xc44
   124dc:	beq	13328 <__assert_fail@plt+0x1570>
   124e0:	ldr	r3, [r4, #3840]	; 0xf00
   124e4:	cmp	r3, #1
   124e8:	bls	1251c <__assert_fail@plt+0x764>
   124ec:	ldr	r2, [pc, #2296]	; 12dec <__assert_fail@plt+0x1034>
   124f0:	sub	r3, r3, #2
   124f4:	add	r8, r3, r2
   124f8:	ldrb	r1, [r2, r3]
   124fc:	cmp	r1, #0
   12500:	beq	1251c <__assert_fail@plt+0x764>
   12504:	mov	r2, #1
   12508:	ldr	r0, [r4, #3140]	; 0xc44
   1250c:	bl	2149c <__assert_fail@plt+0xf6e4>
   12510:	ldrb	r1, [r8, #1]!
   12514:	cmp	r1, #0
   12518:	bne	12504 <__assert_fail@plt+0x74c>
   1251c:	mov	r0, #0
   12520:	bl	21438 <__assert_fail@plt+0xf680>
   12524:	mov	r2, #1
   12528:	mov	r1, #58	; 0x3a
   1252c:	str	r0, [r5, #-4004]	; 0xfffff05c
   12530:	bl	2149c <__assert_fail@plt+0xf6e4>
   12534:	ldrb	r3, [r4, #3984]	; 0xf90
   12538:	cmp	r3, #0
   1253c:	bne	130b0 <__assert_fail@plt+0x12f8>
   12540:	ldr	r3, [r4, #3808]	; 0xee0
   12544:	ldr	r1, [sp, #28]
   12548:	sub	r3, r3, #1
   1254c:	cmp	r3, #1
   12550:	orrhi	r1, r1, #1
   12554:	cmp	r1, #0
   12558:	ldr	r2, [r4, #4072]	; 0xfe8
   1255c:	mov	r3, r1
   12560:	beq	13850 <__assert_fail@plt+0x1a98>
   12564:	cmp	r2, #0
   12568:	bne	125b0 <__assert_fail@plt+0x7f8>
   1256c:	ldr	r3, [sp, #32]
   12570:	cmp	r3, #0
   12574:	beq	13a58 <__assert_fail@plt+0x1ca0>
   12578:	ldr	r8, [pc, #2160]	; 12df0 <__assert_fail@plt+0x1038>
   1257c:	ldr	r9, [sp, #32]
   12580:	b	12588 <__assert_fail@plt+0x7d0>
   12584:	add	r9, r9, #6
   12588:	mov	r2, #6
   1258c:	mov	r1, r8
   12590:	mov	r0, r9
   12594:	bl	11d58 <strncmp@plt>
   12598:	cmp	r0, #0
   1259c:	bne	13708 <__assert_fail@plt+0x1950>
   125a0:	mov	r0, #2
   125a4:	bl	1b634 <__assert_fail@plt+0x987c>
   125a8:	cmp	r0, #0
   125ac:	bne	12584 <__assert_fail@plt+0x7cc>
   125b0:	ldr	r3, [pc, #2108]	; 12df4 <__assert_fail@plt+0x103c>
   125b4:	ldr	r8, [r3]
   125b8:	ldrb	r3, [r4, #3976]	; 0xf88
   125bc:	cmp	r3, #0
   125c0:	bne	1348c <__assert_fail@plt+0x16d4>
   125c4:	ldr	r3, [r5, #-4088]	; 0xfffff008
   125c8:	cmp	r3, #1
   125cc:	beq	13338 <__assert_fail@plt+0x1580>
   125d0:	ldrb	r3, [r5, #-4008]	; 0xfffff058
   125d4:	cmp	r3, #0
   125d8:	beq	12620 <__assert_fail@plt+0x868>
   125dc:	ldr	r2, [pc, #2068]	; 12df8 <__assert_fail@plt+0x1040>
   125e0:	ldr	r3, [pc, #2068]	; 12dfc <__assert_fail@plt+0x1044>
   125e4:	str	r2, [sp]
   125e8:	mov	r1, #0
   125ec:	ldr	r2, [pc, #2060]	; 12e00 <__assert_fail@plt+0x1048>
   125f0:	mov	r0, #30
   125f4:	bl	1bfb0 <__assert_fail@plt+0xa1f8>
   125f8:	cmp	r0, #0
   125fc:	str	r0, [r4, #3816]	; 0xee8
   12600:	beq	13af8 <__assert_fail@plt+0x1d40>
   12604:	ldr	r3, [pc, #2200]	; 12ea4 <__assert_fail@plt+0x10ec>
   12608:	mov	r2, #0
   1260c:	str	r3, [sp]
   12610:	mov	r1, r2
   12614:	ldr	r3, [pc, #2188]	; 12ea8 <__assert_fail@plt+0x10f0>
   12618:	ldr	r0, [pc, #2020]	; 12e04 <__assert_fail@plt+0x104c>
   1261c:	bl	239f0 <_obstack_begin@@Base>
   12620:	ldr	r0, [pc, #2016]	; 12e08 <__assert_fail@plt+0x1050>
   12624:	bl	11b18 <getenv@plt>
   12628:	bl	23cb0 <_obstack_memory_used@@Base+0xc8>
   1262c:	ldr	r3, [r4, #3404]	; 0xd4c
   12630:	sub	r3, r3, #2
   12634:	bics	r3, r3, #2
   12638:	str	r0, [r4, #4016]	; 0xfb0
   1263c:	beq	1264c <__assert_fail@plt+0x894>
   12640:	ldr	r3, [r4, #4072]	; 0xfe8
   12644:	cmp	r3, #0
   12648:	bne	132c4 <__assert_fail@plt+0x150c>
   1264c:	mov	r3, #1
   12650:	strb	r3, [r4, #4093]	; 0xffd
   12654:	mov	r3, #0
   12658:	ldrb	r2, [r4, #3984]	; 0xf90
   1265c:	and	r3, r3, #1
   12660:	strb	r3, [r4, #4094]	; 0xffe
   12664:	cmp	r2, #0
   12668:	bne	13454 <__assert_fail@plt+0x169c>
   1266c:	ldrb	r3, [r4, #4092]	; 0xffc
   12670:	cmp	r3, #0
   12674:	bne	133cc <__assert_fail@plt+0x1614>
   12678:	mov	r3, #100	; 0x64
   1267c:	ldr	r0, [pc, #1928]	; 12e0c <__assert_fail@plt+0x1054>
   12680:	str	r3, [r4, #4088]	; 0xff8
   12684:	bl	221c0 <__assert_fail@plt+0x10408>
   12688:	sub	fp, r6, r8
   1268c:	mov	r3, #0
   12690:	str	r3, [r4, #3088]	; 0xc10
   12694:	str	r0, [r4, #3408]	; 0xd50
   12698:	bl	14550 <__assert_fail@plt+0x2798>
   1269c:	cmp	fp, #0
   126a0:	ble	13174 <__assert_fail@plt+0x13bc>
   126a4:	sub	r3, r8, #-1073741823	; 0xc0000001
   126a8:	ldr	r9, [pc, #1780]	; 12da4 <__assert_fail@plt+0xfec>
   126ac:	add	r7, r7, r3, lsl #2
   126b0:	add	r8, r8, #1
   126b4:	mov	r3, r9
   126b8:	mov	r2, #1
   126bc:	mov	r1, #0
   126c0:	ldr	r0, [r7, #4]!
   126c4:	bl	17458 <__assert_fail@plt+0x56a0>
   126c8:	cmp	r6, r8
   126cc:	bgt	126b0 <__assert_fail@plt+0x8f8>
   126d0:	ldr	r3, [r4, #3088]	; 0xc10
   126d4:	cmp	r3, #0
   126d8:	bne	13368 <__assert_fail@plt+0x15b0>
   126dc:	cmp	fp, #1
   126e0:	ble	13198 <__assert_fail@plt+0x13e0>
   126e4:	mov	r7, #1
   126e8:	b	12714 <__assert_fail@plt+0x95c>
   126ec:	ldrb	r2, [r6, #8]
   126f0:	ldr	r1, [r6, #4]
   126f4:	bl	18804 <__assert_fail@plt+0x6a4c>
   126f8:	ldr	r0, [r6]
   126fc:	bl	11938 <free@plt>
   12700:	ldr	r0, [r6, #4]
   12704:	bl	11938 <free@plt>
   12708:	mov	r0, r6
   1270c:	bl	11938 <free@plt>
   12710:	strb	r7, [r5, #-4007]	; 0xfffff059
   12714:	ldr	r6, [r4, #3084]	; 0xc0c
   12718:	cmp	r6, #0
   1271c:	beq	127a0 <__assert_fail@plt+0x9e8>
   12720:	ldr	ip, [r4, #3816]	; 0xee8
   12724:	ldr	r3, [r6, #12]
   12728:	cmp	ip, #0
   1272c:	str	r3, [r4, #3084]	; 0xc0c
   12730:	ldr	r0, [r6]
   12734:	beq	126ec <__assert_fail@plt+0x934>
   12738:	cmp	r0, #0
   1273c:	bne	126ec <__assert_fail@plt+0x934>
   12740:	ldr	r3, [r5, #-4040]	; 0xfffff038
   12744:	ldr	r2, [r5, #-4044]	; 0xfffff034
   12748:	sub	r2, r3, r2
   1274c:	cmp	r2, #15
   12750:	bls	13ae4 <__assert_fail@plt+0x1d2c>
   12754:	sub	r3, r3, #16
   12758:	str	r3, [r5, #-4040]	; 0xfffff038
   1275c:	ldm	r3, {r0, r1, r2, r3}
   12760:	stm	sl, {r0, r1, r2, r3}
   12764:	mov	r0, ip
   12768:	mov	r1, sl
   1276c:	bl	1c634 <__assert_fail@plt+0xa87c>
   12770:	cmp	r0, #0
   12774:	beq	13b1c <__assert_fail@plt+0x1d64>
   12778:	bl	11938 <free@plt>
   1277c:	ldr	r0, [r6]
   12780:	bl	11938 <free@plt>
   12784:	ldr	r0, [r6, #4]
   12788:	bl	11938 <free@plt>
   1278c:	mov	r0, r6
   12790:	bl	11938 <free@plt>
   12794:	ldr	r6, [r4, #3084]	; 0xc0c
   12798:	cmp	r6, #0
   1279c:	bne	12720 <__assert_fail@plt+0x968>
   127a0:	ldrb	r3, [r4, #3976]	; 0xf88
   127a4:	cmp	r3, #0
   127a8:	beq	127b8 <__assert_fail@plt+0xa00>
   127ac:	ldrb	r3, [r4, #3844]	; 0xf04
   127b0:	cmp	r3, #0
   127b4:	bne	13250 <__assert_fail@plt+0x1498>
   127b8:	ldrb	r3, [r4, #3984]	; 0xf90
   127bc:	cmp	r3, #0
   127c0:	bne	1367c <__assert_fail@plt+0x18c4>
   127c4:	ldr	r5, [r4, #3816]	; 0xee8
   127c8:	cmp	r5, #0
   127cc:	beq	127e8 <__assert_fail@plt+0xa30>
   127d0:	mov	r0, r5
   127d4:	bl	1baac <__assert_fail@plt+0x9cf4>
   127d8:	cmp	r0, #0
   127dc:	bne	13aa0 <__assert_fail@plt+0x1ce8>
   127e0:	mov	r0, r5
   127e4:	bl	1c1b0 <__assert_fail@plt+0xa3f8>
   127e8:	ldr	r3, [pc, #1456]	; 12da0 <__assert_fail@plt+0xfe8>
   127ec:	ldr	r2, [sp, #76]	; 0x4c
   127f0:	ldr	r0, [r4, #3836]	; 0xefc
   127f4:	ldr	r3, [r3]
   127f8:	cmp	r2, r3
   127fc:	bne	13afc <__assert_fail@plt+0x1d44>
   12800:	add	sp, sp, #84	; 0x54
   12804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12808:	ldr	r3, [pc, #1852]	; 12f4c <__assert_fail@plt+0x1194>
   1280c:	ldr	r3, [r3]
   12810:	str	r3, [sp, #32]
   12814:	b	11fa0 <__assert_fail@plt+0x1e8>
   12818:	ldr	r1, [pc, #1520]	; 12e10 <__assert_fail@plt+0x1058>
   1281c:	ldr	r3, [pc, #1832]	; 12f4c <__assert_fail@plt+0x1194>
   12820:	ldr	r2, [pc, #1516]	; 12e14 <__assert_fail@plt+0x105c>
   12824:	ldr	r1, [r1]
   12828:	mov	r0, #4
   1282c:	str	r1, [sp, #4]
   12830:	ldr	r1, [r3]
   12834:	sub	r3, r2, #16
   12838:	str	r0, [sp]
   1283c:	add	r2, r2, r0
   12840:	ldr	r0, [pc, #1488]	; 12e18 <__assert_fail@plt+0x1060>
   12844:	bl	1a3b8 <__assert_fail@plt+0x8600>
   12848:	ldr	r3, [pc, #1484]	; 12e1c <__assert_fail@plt+0x1064>
   1284c:	add	r0, r3, r0, lsl #2
   12850:	ldr	r3, [r0, #1216]	; 0x4c0
   12854:	str	r3, [r4, #3808]	; 0xee0
   12858:	b	11fa0 <__assert_fail@plt+0x1e8>
   1285c:	ldr	r1, [pc, #1452]	; 12e10 <__assert_fail@plt+0x1058>
   12860:	ldr	r3, [pc, #1764]	; 12f4c <__assert_fail@plt+0x1194>
   12864:	ldr	r2, [pc, #1460]	; 12e20 <__assert_fail@plt+0x1068>
   12868:	ldr	r1, [r1]
   1286c:	mov	r0, #4
   12870:	str	r1, [sp, #4]
   12874:	ldr	r1, [r3]
   12878:	add	r3, r2, r0
   1287c:	str	r0, [sp]
   12880:	add	r2, r2, #24
   12884:	ldr	r0, [pc, #1432]	; 12e24 <__assert_fail@plt+0x106c>
   12888:	bl	1a3b8 <__assert_fail@plt+0x8600>
   1288c:	mov	r3, #1
   12890:	str	r3, [sp, #28]
   12894:	ldr	r3, [pc, #1408]	; 12e1c <__assert_fail@plt+0x1064>
   12898:	add	r0, r3, r0, lsl #2
   1289c:	ldr	r3, [r0, #1172]	; 0x494
   128a0:	str	r3, [r4, #3404]	; 0xd4c
   128a4:	b	11fa0 <__assert_fail@plt+0x1e8>
   128a8:	ldr	ip, [pc, #1332]	; 12de4 <__assert_fail@plt+0x102c>
   128ac:	ldr	r1, [pc, #1620]	; 12f08 <__assert_fail@plt+0x1150>
   128b0:	mov	r2, #1
   128b4:	mov	r3, #0
   128b8:	mov	r0, #144	; 0x90
   128bc:	strd	r2, [ip]
   128c0:	strd	r2, [r1, #208]	; 0xd0
   128c4:	str	r0, [r4, #3996]	; 0xf9c
   128c8:	str	r0, [r4, #4012]	; 0xfac
   128cc:	b	11fa0 <__assert_fail@plt+0x1e8>
   128d0:	mov	r3, #0
   128d4:	strb	r3, [r4, #3977]	; 0xf89
   128d8:	b	11fa0 <__assert_fail@plt+0x1e8>
   128dc:	ldr	r2, [pc, #1324]	; 12e10 <__assert_fail@plt+0x1058>
   128e0:	ldr	r3, [pc, #1636]	; 12f4c <__assert_fail@plt+0x1194>
   128e4:	ldr	r0, [pc, #1340]	; 12e28 <__assert_fail@plt+0x1070>
   128e8:	ldr	r1, [r2]
   128ec:	mov	r2, #4
   128f0:	str	r1, [sp, #4]
   128f4:	ldr	r1, [r3]
   128f8:	str	r2, [sp]
   128fc:	ldr	r3, [pc, #1220]	; 12dc8 <__assert_fail@plt+0x1010>
   12900:	ldr	r2, [pc, #1220]	; 12dcc <__assert_fail@plt+0x1014>
   12904:	bl	1a3b8 <__assert_fail@plt+0x8600>
   12908:	ldr	r3, [pc, #1208]	; 12dc8 <__assert_fail@plt+0x1010>
   1290c:	ldr	r1, [r3, r0, lsl #2]
   12910:	mov	r0, #0
   12914:	bl	21484 <__assert_fail@plt+0xf6cc>
   12918:	b	11fa0 <__assert_fail@plt+0x1e8>
   1291c:	ldr	r2, [pc, #1260]	; 12e10 <__assert_fail@plt+0x1058>
   12920:	ldr	r1, [pc, #1572]	; 12f4c <__assert_fail@plt+0x1194>
   12924:	mov	r3, #4
   12928:	ldr	r2, [r2]
   1292c:	ldr	r1, [r1]
   12930:	ldr	r0, [pc, #1268]	; 12e2c <__assert_fail@plt+0x1074>
   12934:	str	r2, [sp, #4]
   12938:	str	r3, [sp]
   1293c:	ldr	r2, [pc, #1260]	; 12e30 <__assert_fail@plt+0x1078>
   12940:	ldr	r3, [sp, #40]	; 0x28
   12944:	bl	1a3b8 <__assert_fail@plt+0x8600>
   12948:	ldr	r3, [pc, #1228]	; 12e1c <__assert_fail@plt+0x1064>
   1294c:	add	r0, r3, r0, lsl #2
   12950:	ldr	r3, [r0, #1396]	; 0x574
   12954:	str	r3, [r4, #3840]	; 0xf00
   12958:	b	11fa0 <__assert_fail@plt+0x1e8>
   1295c:	ldr	r3, [pc, #1512]	; 12f4c <__assert_fail@plt+0x1194>
   12960:	ldr	r1, [r3]
   12964:	cmp	r1, #0
   12968:	beq	13128 <__assert_fail@plt+0x1370>
   1296c:	ldr	r3, [pc, #1180]	; 12e10 <__assert_fail@plt+0x1058>
   12970:	ldr	r2, [pc, #1212]	; 12e34 <__assert_fail@plt+0x107c>
   12974:	mov	r0, #4
   12978:	ldr	r3, [r3]
   1297c:	str	r0, [sp]
   12980:	str	r3, [sp, #4]
   12984:	ldr	r0, [pc, #1196]	; 12e38 <__assert_fail@plt+0x1080>
   12988:	add	r3, r2, #8
   1298c:	add	r2, r2, #44	; 0x2c
   12990:	bl	1a3b8 <__assert_fail@plt+0x8600>
   12994:	ldr	r3, [pc, #1152]	; 12e1c <__assert_fail@plt+0x1064>
   12998:	add	r0, r3, r0, lsl #2
   1299c:	ldr	r3, [r0, #1320]	; 0x528
   129a0:	cmp	r3, #1
   129a4:	beq	13128 <__assert_fail@plt+0x1370>
   129a8:	cmp	r3, #2
   129ac:	movne	r0, #0
   129b0:	bne	1312c <__assert_fail@plt+0x1374>
   129b4:	mov	r0, #1
   129b8:	bl	11d40 <isatty@plt>
   129bc:	adds	r0, r0, #0
   129c0:	movne	r0, #1
   129c4:	b	1312c <__assert_fail@plt+0x1374>
   129c8:	mov	r0, #8
   129cc:	bl	221c0 <__assert_fail@plt+0x10408>
   129d0:	ldr	r3, [pc, #1396]	; 12f4c <__assert_fail@plt+0x1194>
   129d4:	ldr	r2, [r5, #-3948]	; 0xfffff094
   129d8:	ldr	r3, [r3]
   129dc:	str	r0, [r5, #-3948]	; 0xfffff094
   129e0:	str	r2, [r0, #4]
   129e4:	str	r3, [r0]
   129e8:	b	11fa0 <__assert_fail@plt+0x1e8>
   129ec:	mov	r3, #1
   129f0:	strb	r3, [r4, #3813]	; 0xee5
   129f4:	b	11fa0 <__assert_fail@plt+0x1e8>
   129f8:	mov	r3, #0
   129fc:	str	r3, [r4, #4072]	; 0xfe8
   12a00:	ldr	r3, [pc, #1304]	; 12f20 <__assert_fail@plt+0x1168>
   12a04:	str	r3, [sp, #32]
   12a08:	b	11fa0 <__assert_fail@plt+0x1e8>
   12a0c:	ldr	r1, [pc, #1020]	; 12e10 <__assert_fail@plt+0x1058>
   12a10:	ldr	r3, [pc, #1332]	; 12f4c <__assert_fail@plt+0x1194>
   12a14:	ldr	r2, [pc, #1056]	; 12e3c <__assert_fail@plt+0x1084>
   12a18:	ldr	r1, [r1]
   12a1c:	mov	r0, #4
   12a20:	str	r1, [sp, #4]
   12a24:	ldr	r1, [r3]
   12a28:	add	r3, r2, #12
   12a2c:	str	r0, [sp]
   12a30:	add	r2, r2, #40	; 0x28
   12a34:	ldr	r0, [pc, #1028]	; 12e40 <__assert_fail@plt+0x1088>
   12a38:	bl	1a3b8 <__assert_fail@plt+0x8600>
   12a3c:	ldr	r3, [pc, #984]	; 12e1c <__assert_fail@plt+0x1064>
   12a40:	add	r0, r3, r0, lsl #2
   12a44:	ldr	r3, [r0, #1260]	; 0x4ec
   12a48:	str	r3, [r4, #4072]	; 0xfe8
   12a4c:	b	11fa0 <__assert_fail@plt+0x1e8>
   12a50:	mov	r3, #2
   12a54:	str	r3, [r4, #3840]	; 0xf00
   12a58:	b	11fa0 <__assert_fail@plt+0x1e8>
   12a5c:	mov	r3, #4
   12a60:	str	r3, [r5, #-4088]	; 0xfffff008
   12a64:	b	11fa0 <__assert_fail@plt+0x1e8>
   12a68:	ldr	r3, [pc, #1244]	; 12f4c <__assert_fail@plt+0x1194>
   12a6c:	ldr	r1, [r3]
   12a70:	cmp	r1, #0
   12a74:	beq	13114 <__assert_fail@plt+0x135c>
   12a78:	ldr	r3, [pc, #912]	; 12e10 <__assert_fail@plt+0x1058>
   12a7c:	ldr	r2, [pc, #944]	; 12e34 <__assert_fail@plt+0x107c>
   12a80:	mov	r0, #4
   12a84:	ldr	r3, [r3]
   12a88:	str	r0, [sp]
   12a8c:	str	r3, [sp, #4]
   12a90:	ldr	r0, [pc, #940]	; 12e44 <__assert_fail@plt+0x108c>
   12a94:	add	r3, r2, #8
   12a98:	add	r2, r2, #44	; 0x2c
   12a9c:	bl	1a3b8 <__assert_fail@plt+0x8600>
   12aa0:	ldr	r3, [pc, #884]	; 12e1c <__assert_fail@plt+0x1064>
   12aa4:	add	r0, r3, r0, lsl #2
   12aa8:	ldr	r3, [r0, #1320]	; 0x528
   12aac:	cmp	r3, #1
   12ab0:	beq	13114 <__assert_fail@plt+0x135c>
   12ab4:	cmp	r3, #2
   12ab8:	beq	13104 <__assert_fail@plt+0x134c>
   12abc:	mov	r3, #0
   12ac0:	strb	r3, [r4, #3976]	; 0xf88
   12ac4:	b	11fa0 <__assert_fail@plt+0x1e8>
   12ac8:	ldr	r2, [pc, #1148]	; 12f4c <__assert_fail@plt+0x1194>
   12acc:	ldr	r3, [pc, #784]	; 12de4 <__assert_fail@plt+0x102c>
   12ad0:	ldr	r0, [r2]
   12ad4:	sub	r1, r3, #4
   12ad8:	mov	r2, r3
   12adc:	bl	1d248 <__assert_fail@plt+0xb490>
   12ae0:	ldr	r3, [pc, #764]	; 12de4 <__assert_fail@plt+0x102c>
   12ae4:	cmp	r0, #0
   12ae8:	bne	13b00 <__assert_fail@plt+0x1d48>
   12aec:	ldr	r1, [pc, #1044]	; 12f08 <__assert_fail@plt+0x1150>
   12af0:	ldrd	r2, [r3]
   12af4:	ldr	r0, [r4, #3996]	; 0xf9c
   12af8:	strd	r2, [r1, #208]	; 0xd0
   12afc:	str	r0, [r4, #4012]	; 0xfac
   12b00:	b	11fa0 <__assert_fail@plt+0x1e8>
   12b04:	mov	r3, #1
   12b08:	strb	r3, [r4, #4008]	; 0xfa8
   12b0c:	b	11fa0 <__assert_fail@plt+0x1e8>
   12b10:	mov	r3, #3
   12b14:	str	r3, [r4, #4072]	; 0xfe8
   12b18:	b	11fa0 <__assert_fail@plt+0x1e8>
   12b1c:	ldr	r3, [pc, #1064]	; 12f4c <__assert_fail@plt+0x1194>
   12b20:	ldr	r0, [r3]
   12b24:	bl	141c8 <__assert_fail@plt+0x2410>
   12b28:	subs	r3, r0, #0
   12b2c:	bne	11fa0 <__assert_fail@plt+0x1e8>
   12b30:	ldr	r1, [pc, #784]	; 12e48 <__assert_fail@plt+0x1090>
   12b34:	mov	r2, #5
   12b38:	mov	r5, r3
   12b3c:	bl	119a4 <dcgettext@plt>
   12b40:	ldr	r2, [pc, #1028]	; 12f4c <__assert_fail@plt+0x1194>
   12b44:	mov	r4, r0
   12b48:	ldr	r0, [r2]
   12b4c:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   12b50:	mov	r3, r4
   12b54:	mov	r1, r5
   12b58:	ldr	r2, [pc, #748]	; 12e4c <__assert_fail@plt+0x1094>
   12b5c:	str	r0, [sp]
   12b60:	mov	r0, #2
   12b64:	bl	11adc <error@plt>
   12b68:	mov	r3, #3
   12b6c:	str	r3, [r4, #3404]	; 0xd4c
   12b70:	mov	r3, #1
   12b74:	str	r3, [sp, #28]
   12b78:	b	11fa0 <__assert_fail@plt+0x1e8>
   12b7c:	mov	r3, #2
   12b80:	str	r3, [r4, #3808]	; 0xee0
   12b84:	b	11fa0 <__assert_fail@plt+0x1e8>
   12b88:	mov	r3, #4
   12b8c:	str	r3, [r4, #3404]	; 0xd4c
   12b90:	mov	r3, #1
   12b94:	str	r3, [sp, #28]
   12b98:	b	11fa0 <__assert_fail@plt+0x1e8>
   12b9c:	mov	r3, #1
   12ba0:	strb	r3, [r4, #3993]	; 0xf99
   12ba4:	b	11fa0 <__assert_fail@plt+0x1e8>
   12ba8:	mov	r3, #1
   12bac:	strb	r3, [r4, #3812]	; 0xee4
   12bb0:	b	11fa0 <__assert_fail@plt+0x1e8>
   12bb4:	mov	r3, #1
   12bb8:	strb	r3, [r4, #3977]	; 0xf89
   12bbc:	b	11fa0 <__assert_fail@plt+0x1e8>
   12bc0:	mov	r3, #1
   12bc4:	str	r3, [r4, #3840]	; 0xf00
   12bc8:	b	11fa0 <__assert_fail@plt+0x1e8>
   12bcc:	ldr	r1, [pc, #820]	; 12f08 <__assert_fail@plt+0x1150>
   12bd0:	mov	r3, #0
   12bd4:	str	r3, [r4, #4072]	; 0xfe8
   12bd8:	strb	r3, [r1, #203]	; 0xcb
   12bdc:	b	11fa0 <__assert_fail@plt+0x1e8>
   12be0:	mov	r2, #1
   12be4:	mov	r3, #0
   12be8:	strb	r2, [r4, #3828]	; 0xef4
   12bec:	str	r3, [r4, #4072]	; 0xfe8
   12bf0:	b	11fa0 <__assert_fail@plt+0x1e8>
   12bf4:	mov	r3, #4
   12bf8:	str	r3, [r4, #4072]	; 0xfe8
   12bfc:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c00:	mov	r3, #0
   12c04:	str	r3, [r4, #4072]	; 0xfe8
   12c08:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c0c:	mov	r3, #1
   12c10:	str	r3, [sp, #36]	; 0x24
   12c14:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c18:	mov	r3, #1
   12c1c:	strb	r3, [r4, #3992]	; 0xf98
   12c20:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c24:	ldr	ip, [pc, #440]	; 12de4 <__assert_fail@plt+0x102c>
   12c28:	ldr	r1, [pc, #728]	; 12f08 <__assert_fail@plt+0x1150>
   12c2c:	mov	r2, #1
   12c30:	mov	r3, #0
   12c34:	mov	r0, #176	; 0xb0
   12c38:	strd	r2, [ip]
   12c3c:	strd	r2, [r1, #208]	; 0xd0
   12c40:	str	r0, [r4, #3996]	; 0xf9c
   12c44:	str	r0, [r4, #4012]	; 0xfac
   12c48:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c4c:	ldr	r1, [pc, #692]	; 12f08 <__assert_fail@plt+0x1150>
   12c50:	mov	r3, #0
   12c54:	str	r3, [r4, #4072]	; 0xfe8
   12c58:	strb	r3, [r1, #202]	; 0xca
   12c5c:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c60:	ldr	r3, [r4, #4072]	; 0xfe8
   12c64:	mov	r2, #2
   12c68:	cmp	r3, #0
   12c6c:	mvn	r3, #0
   12c70:	str	r2, [r5, #-3956]	; 0xfffff08c
   12c74:	str	r3, [r4, #3404]	; 0xd4c
   12c78:	beq	136bc <__assert_fail@plt+0x1904>
   12c7c:	mov	r3, #0
   12c80:	strb	r3, [r4, #3993]	; 0xf99
   12c84:	strb	r3, [r4, #3976]	; 0xf88
   12c88:	strb	r3, [r4, #4092]	; 0xffc
   12c8c:	mov	r3, #1
   12c90:	str	r3, [sp, #28]
   12c94:	b	11fa0 <__assert_fail@plt+0x1e8>
   12c98:	mov	r3, #1
   12c9c:	strb	r3, [r5, #-4056]	; 0xfffff028
   12ca0:	b	11fa0 <__assert_fail@plt+0x1e8>
   12ca4:	mov	r3, #1
   12ca8:	str	r3, [r4, #3808]	; 0xee0
   12cac:	b	11fa0 <__assert_fail@plt+0x1e8>
   12cb0:	mov	r1, #7
   12cb4:	mov	r0, #0
   12cb8:	bl	21484 <__assert_fail@plt+0xf6cc>
   12cbc:	b	11fa0 <__assert_fail@plt+0x1e8>
   12cc0:	mov	r3, #2
   12cc4:	str	r3, [r5, #-3956]	; 0xfffff08c
   12cc8:	b	11fa0 <__assert_fail@plt+0x1e8>
   12ccc:	mov	r3, #1
   12cd0:	strb	r3, [r4, #4009]	; 0xfa9
   12cd4:	b	11fa0 <__assert_fail@plt+0x1e8>
   12cd8:	mov	r3, #1
   12cdc:	str	r3, [r4, #3404]	; 0xd4c
   12ce0:	str	r3, [sp, #28]
   12ce4:	b	11fa0 <__assert_fail@plt+0x1e8>
   12ce8:	mvn	r3, #0
   12cec:	str	r3, [r4, #3404]	; 0xd4c
   12cf0:	mov	r3, #1
   12cf4:	str	r3, [sp, #28]
   12cf8:	b	11fa0 <__assert_fail@plt+0x1e8>
   12cfc:	ldr	r3, [pc, #584]	; 12f4c <__assert_fail@plt+0x1194>
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #324]	; 12e50 <__assert_fail@plt+0x1098>
   12d08:	ldr	r3, [r3]
   12d0c:	mov	r0, #0
   12d10:	str	r3, [sp, #44]	; 0x2c
   12d14:	bl	119a4 <dcgettext@plt>
   12d18:	ldr	r3, [pc, #132]	; 12da4 <__assert_fail@plt+0xfec>
   12d1c:	mvn	r2, #0
   12d20:	str	r3, [sp, #8]
   12d24:	mov	r3, #0
   12d28:	mov	r1, #2
   12d2c:	strd	r2, [sp]
   12d30:	str	r1, [sp, #16]
   12d34:	mov	r2, #0
   12d38:	mov	r3, #0
   12d3c:	mov	r1, #0
   12d40:	str	r0, [sp, #12]
   12d44:	ldr	r0, [sp, #44]	; 0x2c
   12d48:	bl	22448 <__assert_fail@plt+0x10690>
   12d4c:	str	r0, [r4, #3820]	; 0xeec
   12d50:	b	11fa0 <__assert_fail@plt+0x1e8>
   12d54:	mov	r3, #2
   12d58:	str	r3, [r4, #3404]	; 0xd4c
   12d5c:	mov	r3, #1
   12d60:	str	r3, [sp, #28]
   12d64:	b	11fa0 <__assert_fail@plt+0x1e8>
   12d68:	mov	r3, #1
   12d6c:	strb	r3, [r5, #-4008]	; 0xfffff058
   12d70:	b	11fa0 <__assert_fail@plt+0x1e8>
   12d74:	mov	r1, #5
   12d78:	mov	r0, #0
   12d7c:	bl	21484 <__assert_fail@plt+0xf6cc>
   12d80:	b	11fa0 <__assert_fail@plt+0x1e8>
   12d84:	mov	r1, #0
   12d88:	mov	r0, r1
   12d8c:	bl	21484 <__assert_fail@plt+0xf6cc>
   12d90:	b	11fa0 <__assert_fail@plt+0x1e8>
   12d94:	mov	r3, #5
   12d98:	str	r3, [r5, #-4088]	; 0xfffff008
   12d9c:	b	11fa0 <__assert_fail@plt+0x1e8>
   12da0:	andeq	r9, r3, r0, lsl #30
   12da4:	ldrdeq	r7, [r2], -r0
   12da8:	andeq	r8, r2, ip, ror r5
   12dac:			; <UNDEFINED> instruction: 0x000284b8
   12db0:			; <UNDEFINED> instruction: 0x0003a2bc
   12db4:	andeq	sl, r1, r0, lsr fp
   12db8:			; <UNDEFINED> instruction: 0x0003a2b0
   12dbc:	andeq	sl, r3, r8, lsr #6
   12dc0:	andeq	ip, r3, r0, lsr #6
   12dc4:	muleq	r2, r0, r5
   12dc8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   12dcc:			; <UNDEFINED> instruction: 0x00028fb8
   12dd0:	andeq	r8, r2, r4, ror #11
   12dd4:	andeq	r5, r0, r3, lsl r4
   12dd8:	andeq	r8, r2, r8, lsr #12
   12ddc:	andeq	r8, r2, r0, ror r6
   12de0:	andeq	r0, r0, r3, lsl r1
   12de4:	andeq	fp, r3, r8, asr #5
   12de8:	bge	feabd89c <optarg@@GLIBC_2.4+0xfea8357c>
   12dec:	andeq	r8, r2, r8, ror #14
   12df0:	andeq	r5, r2, r8, lsr #9
   12df4:	andeq	sl, r3, r0, lsl r3
   12df8:	muleq	r1, r0, ip
   12dfc:	andeq	r3, r1, ip, lsr ip
   12e00:	andeq	r3, r1, r0, lsr #24
   12e04:	andeq	fp, r3, ip, asr #6
   12e08:	muleq	r2, r0, r8
   12e0c:	andeq	r3, r0, r0, ror #22
   12e10:			; <UNDEFINED> instruction: 0x0003a2b8
   12e14:	andeq	r5, r2, r0, ror #7
   12e18:	ldrdeq	r8, [r2], -ip
   12e1c:	andeq	r4, r2, r0, lsl pc
   12e20:	andeq	r5, r2, r0, lsr #7
   12e24:	ldrdeq	r8, [r2], -r4
   12e28:	andeq	r8, r2, r8, lsl r7
   12e2c:	andeq	r8, r2, r4, lsl #14
   12e30:	muleq	r2, r4, r4
   12e34:	andeq	r5, r2, r0, lsr r4
   12e38:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12e3c:	strdeq	r5, [r2], -r0
   12e40:	andeq	r8, r2, r4, ror #13
   12e44:	strdeq	r8, [r2], -r0
   12e48:	muleq	r2, ip, r6
   12e4c:			; <UNDEFINED> instruction: 0x000286b0
   12e50:	andeq	r8, r2, r0, asr #13
   12e54:			; <UNDEFINED> instruction: 0x000286b8
   12e58:			; <UNDEFINED> instruction: 0x000286bc
   12e5c:			; <UNDEFINED> instruction: 0x0003a2b0
   12e60:	andeq	r6, r2, r0, lsr #14
   12e64:	ldrdeq	r8, [r2], -r4
   12e68:	andeq	r8, r2, r8, lsr #14
   12e6c:	andeq	r8, r2, r8, lsr r7
   12e70:			; <UNDEFINED> instruction: 0x0003a2b4
   12e74:			; <UNDEFINED> instruction: 0x000284b4
   12e78:	andeq	r8, r2, r0, lsr #11
   12e7c:	andeq	r8, r2, ip, ror #11
   12e80:	andeq	r8, r2, r0, lsr r6
   12e84:	andeq	r8, r2, ip, asr #14
   12e88:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12e8c:	strdeq	r4, [r2], -r8
   12e90:	andeq	fp, r3, r0, lsr r2
   12e94:	muleq	r2, r4, r8
   12e98:	andeq	sl, r3, ip, lsl r3
   12e9c:	andeq	sl, r3, pc, ror #30
   12ea0:	ldrdeq	r7, [r2], -r0
   12ea4:	andeq	r1, r1, r8, lsr r9
   12ea8:	andeq	r1, r1, r0, lsr fp
   12eac:	andeq	r8, r2, r8, asr #16
   12eb0:	andeq	r8, r2, r0, lsl #19
   12eb4:	andeq	r5, r2, r4, asr #9
   12eb8:	andeq	r8, r2, r8, ror r5
   12ebc:	andeq	r8, r2, r0, ror r8
   12ec0:	andeq	r8, r2, ip, asr #18
   12ec4:	andeq	fp, r3, r4, ror #5
   12ec8:	ldrdeq	r8, [r2], -ip
   12ecc:	andeq	fp, r3, r0, lsl #7
   12ed0:	andeq	r8, r2, r8, ror #17
   12ed4:			; <UNDEFINED> instruction: 0x00028fb8
   12ed8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12edc:	andeq	r6, r2, ip, lsl r7
   12ee0:			; <UNDEFINED> instruction: 0x000254b0
   12ee4:	andeq	r8, r2, r4, asr r8
   12ee8:	andeq	r8, r2, r0, ror #16
   12eec:	andeq	r5, r2, r8, lsr r5
   12ef0:	andeq	r1, r0, r3, asr #32
   12ef4:	andeq	r8, r2, r8, ror #16
   12ef8:	andeq	r8, r2, r8, lsl #17
   12efc:	andeq	r8, r2, r8, lsl #16
   12f00:	andeq	r8, r2, r0, lsr r8
   12f04:	andeq	r8, r2, ip, lsr r8
   12f08:	ldrdeq	sl, [r3], -r0
   12f0c:	andeq	r8, r2, r0, lsr #16
   12f10:	andeq	sl, r3, r8, lsl r3
   12f14:	muleq	r2, ip, r7
   12f18:	andeq	r8, r2, r8, lsr #15
   12f1c:	ldrdeq	r5, [r2], -r0
   12f20:	andeq	r8, r2, r4, ror #10
   12f24:	andeq	r8, r2, r0, asr #15
   12f28:	ldrdeq	r8, [r2], -r0
   12f2c:	andeq	r8, r2, r0, ror r7
   12f30:	andeq	r8, r2, r0, ror r5
   12f34:	andeq	r8, r2, ip, asr r7
   12f38:	andeq	r8, r2, r0, lsr #18
   12f3c:	andeq	r8, r2, ip, ror r7
   12f40:	andeq	r5, r2, r4, lsr #10
   12f44:	andeq	r0, r0, r3, lsl #8
   12f48:	muleq	r2, r8, r8
   12f4c:	andeq	sl, r3, r0, lsr #6
   12f50:	andeq	r5, r2, r4, ror #1
   12f54:	andeq	r5, r2, r0, lsr r5
   12f58:	andeq	r0, r0, ip, lsr r6
   12f5c:	ldrdeq	r8, [r2], -r0
   12f60:	muleq	r2, r4, r5
   12f64:	ldr	r3, [pc, #-32]	; 12f4c <__assert_fail@plt+0x1194>
   12f68:	mov	r0, #8
   12f6c:	ldr	r2, [r3]
   12f70:	str	r2, [sp, #44]	; 0x2c
   12f74:	bl	221c0 <__assert_fail@plt+0x10408>
   12f78:	ldr	r3, [r5, #-3952]	; 0xfffff090
   12f7c:	ldr	r2, [sp, #44]	; 0x2c
   12f80:	strd	r2, [r0]
   12f84:	str	r0, [r5, #-3952]	; 0xfffff090
   12f88:	b	11fa0 <__assert_fail@plt+0x1e8>
   12f8c:	mov	r3, #3
   12f90:	str	r3, [r5, #-4088]	; 0xfffff008
   12f94:	b	11fa0 <__assert_fail@plt+0x1e8>
   12f98:	ldr	r1, [pc, #-152]	; 12f08 <__assert_fail@plt+0x1150>
   12f9c:	mov	r3, #0
   12fa0:	strb	r3, [r1, #203]	; 0xcb
   12fa4:	b	11fa0 <__assert_fail@plt+0x1e8>
   12fa8:	mov	r3, #3
   12fac:	str	r3, [r4, #3840]	; 0xf00
   12fb0:	b	11fa0 <__assert_fail@plt+0x1e8>
   12fb4:	mov	r3, #1
   12fb8:	strb	r3, [r4, #3984]	; 0xf90
   12fbc:	b	11fa0 <__assert_fail@plt+0x1e8>
   12fc0:	mov	r3, #2
   12fc4:	str	r3, [r4, #4072]	; 0xfe8
   12fc8:	b	11fa0 <__assert_fail@plt+0x1e8>
   12fcc:	mov	r0, #8
   12fd0:	bl	221c0 <__assert_fail@plt+0x10408>
   12fd4:	ldr	r2, [r5, #-3952]	; 0xfffff090
   12fd8:	ldr	r1, [pc, #-396]	; 12e54 <__assert_fail@plt+0x109c>
   12fdc:	mov	r3, r0
   12fe0:	str	r1, [r0]
   12fe4:	str	r2, [r3, #4]
   12fe8:	mov	r0, #8
   12fec:	str	r3, [r5, #-3952]	; 0xfffff090
   12ff0:	bl	221c0 <__assert_fail@plt+0x10408>
   12ff4:	ldr	r3, [r5, #-3952]	; 0xfffff090
   12ff8:	ldr	r2, [pc, #-424]	; 12e58 <__assert_fail@plt+0x10a0>
   12ffc:	strd	r2, [r0]
   13000:	str	r0, [r5, #-3952]	; 0xfffff090
   13004:	b	11fa0 <__assert_fail@plt+0x1e8>
   13008:	mov	r3, #1
   1300c:	str	r3, [r5, #-3956]	; 0xfffff08c
   13010:	b	11fa0 <__assert_fail@plt+0x1e8>
   13014:	ldr	r3, [r4, #4072]	; 0xfe8
   13018:	cmp	r3, #0
   1301c:	movne	r3, #1
   13020:	strne	r3, [r4, #4072]	; 0xfe8
   13024:	b	11fa0 <__assert_fail@plt+0x1e8>
   13028:	ldr	r3, [pc, #-468]	; 12e5c <__assert_fail@plt+0x10a4>
   1302c:	ldr	r2, [pc, #-412]	; 12e98 <__assert_fail@plt+0x10e0>
   13030:	ldr	r3, [r3]
   13034:	ldr	r0, [r2]
   13038:	cmp	r3, #1
   1303c:	beq	136b4 <__assert_fail@plt+0x18fc>
   13040:	ldr	r2, [pc, #-488]	; 12e60 <__assert_fail@plt+0x10a8>
   13044:	cmp	r3, #2
   13048:	ldr	r1, [pc, #-492]	; 12e64 <__assert_fail@plt+0x10ac>
   1304c:	movne	r1, r2
   13050:	ldr	ip, [pc, #-496]	; 12e68 <__assert_fail@plt+0x10b0>
   13054:	ldr	r2, [pc, #-496]	; 12e6c <__assert_fail@plt+0x10b4>
   13058:	ldr	r3, [pc, #-496]	; 12e70 <__assert_fail@plt+0x10b8>
   1305c:	mov	r4, #0
   13060:	ldr	r3, [r3]
   13064:	stm	sp, {r2, ip}
   13068:	str	r4, [sp, #8]
   1306c:	ldr	r2, [pc, #-512]	; 12e74 <__assert_fail@plt+0x10bc>
   13070:	bl	220bc <__assert_fail@plt+0x10304>
   13074:	mov	r0, r4
   13078:	bl	11bc0 <exit@plt>
   1307c:	mov	r2, #5
   13080:	ldr	r1, [pc, #-528]	; 12e78 <__assert_fail@plt+0x10c0>
   13084:	mov	r0, r8
   13088:	bl	119a4 <dcgettext@plt>
   1308c:	mov	r9, r0
   13090:	mov	r0, sl
   13094:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   13098:	mov	r2, r9
   1309c:	mov	r1, r8
   130a0:	mov	r3, r0
   130a4:	mov	r0, r8
   130a8:	bl	11adc <error@plt>
   130ac:	b	11ef0 <__assert_fail@plt+0x138>
   130b0:	ldr	r3, [r4, #4072]	; 0xfe8
   130b4:	cmp	r3, #0
   130b8:	beq	13240 <__assert_fail@plt+0x1488>
   130bc:	mov	r3, #0
   130c0:	strb	r3, [r4, #3984]	; 0xf90
   130c4:	b	12540 <__assert_fail@plt+0x788>
   130c8:	bl	141c8 <__assert_fail@plt+0x2410>
   130cc:	subs	r9, r0, #0
   130d0:	bne	11f14 <__assert_fail@plt+0x15c>
   130d4:	mov	r2, #5
   130d8:	ldr	r1, [pc, #-612]	; 12e7c <__assert_fail@plt+0x10c4>
   130dc:	bl	119a4 <dcgettext@plt>
   130e0:	mov	sl, r0
   130e4:	mov	r0, r8
   130e8:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   130ec:	mov	r2, sl
   130f0:	mov	r1, r9
   130f4:	mov	r3, r0
   130f8:	mov	r0, r9
   130fc:	bl	11adc <error@plt>
   13100:	b	11f14 <__assert_fail@plt+0x15c>
   13104:	mov	r0, #1
   13108:	bl	11d40 <isatty@plt>
   1310c:	cmp	r0, #0
   13110:	beq	12abc <__assert_fail@plt+0xd04>
   13114:	mov	r2, #1
   13118:	mov	r3, #0
   1311c:	strb	r2, [r4, #3976]	; 0xf88
   13120:	str	r3, [r4, #3820]	; 0xeec
   13124:	b	11fa0 <__assert_fail@plt+0x1e8>
   13128:	mov	r0, #1
   1312c:	strb	r0, [r4, #4092]	; 0xffc
   13130:	b	11fa0 <__assert_fail@plt+0x1e8>
   13134:	mov	r0, r8
   13138:	mov	r1, #7
   1313c:	str	sl, [r4, #4072]	; 0xfe8
   13140:	bl	21484 <__assert_fail@plt+0xf6cc>
   13144:	b	11e78 <__assert_fail@plt+0xc0>
   13148:	mov	r0, sl
   1314c:	bl	11d40 <isatty@plt>
   13150:	cmp	r0, #0
   13154:	streq	sl, [r4, #4072]	; 0xfe8
   13158:	beq	11e78 <__assert_fail@plt+0xc0>
   1315c:	mov	r0, r8
   13160:	mov	r1, #3
   13164:	str	r9, [r4, #4072]	; 0xfe8
   13168:	bl	21484 <__assert_fail@plt+0xf6cc>
   1316c:	strb	sl, [r4, #3977]	; 0xf89
   13170:	b	11e78 <__assert_fail@plt+0xc0>
   13174:	ldrb	r1, [r5, #-4056]	; 0xfffff028
   13178:	cmp	r1, #0
   1317c:	bne	13310 <__assert_fail@plt+0x1558>
   13180:	mov	r2, #1
   13184:	ldr	r0, [pc, #-760]	; 12e94 <__assert_fail@plt+0x10dc>
   13188:	bl	14490 <__assert_fail@plt+0x26d8>
   1318c:	ldr	r3, [r4, #3088]	; 0xc10
   13190:	cmp	r3, #0
   13194:	bne	13368 <__assert_fail@plt+0x15b0>
   13198:	ldr	r3, [r4, #3084]	; 0xc0c
   1319c:	cmp	r3, #0
   131a0:	beq	127a0 <__assert_fail@plt+0x9e8>
   131a4:	ldr	r3, [r3, #12]
   131a8:	cmp	r3, #0
   131ac:	strbeq	r3, [r5, #-4007]	; 0xfffff059
   131b0:	b	126e4 <__assert_fail@plt+0x92c>
   131b4:	mov	r2, #5
   131b8:	ldr	r1, [pc, #-832]	; 12e80 <__assert_fail@plt+0x10c8>
   131bc:	mov	r0, r8
   131c0:	bl	119a4 <dcgettext@plt>
   131c4:	mov	fp, r0
   131c8:	mov	r0, r9
   131cc:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   131d0:	mov	r2, fp
   131d4:	mov	r1, r8
   131d8:	mov	r3, r0
   131dc:	mov	r0, r8
   131e0:	bl	11adc <error@plt>
   131e4:	b	11f7c <__assert_fail@plt+0x1c4>
   131e8:	ldr	r0, [pc, #-876]	; 12e84 <__assert_fail@plt+0x10cc>
   131ec:	bl	11b18 <getenv@plt>
   131f0:	mov	r2, r8
   131f4:	sub	r1, r8, #4
   131f8:	mov	r9, r0
   131fc:	bl	1d248 <__assert_fail@plt+0xb490>
   13200:	cmp	r9, #0
   13204:	beq	13a78 <__assert_fail@plt+0x1cc0>
   13208:	ldr	r3, [pc, #-776]	; 12f08 <__assert_fail@plt+0x1150>
   1320c:	ldr	r1, [r4, #3996]	; 0xf9c
   13210:	mov	r0, r3
   13214:	ldrd	r2, [r8]
   13218:	str	r1, [r4, #4012]	; 0xfac
   1321c:	strd	r2, [r0, #208]	; 0xd0
   13220:	ldr	r3, [sp, #36]	; 0x24
   13224:	cmp	r3, #0
   13228:	movne	r2, #1024	; 0x400
   1322c:	movne	r3, #0
   13230:	movne	r1, #0
   13234:	strdne	r2, [r8]
   13238:	strne	r1, [r4, #3996]	; 0xf9c
   1323c:	b	12444 <__assert_fail@plt+0x68c>
   13240:	ldrb	r3, [r4, #4092]	; 0xffc
   13244:	cmp	r3, #0
   13248:	beq	1256c <__assert_fail@plt+0x7b4>
   1324c:	b	130bc <__assert_fail@plt+0x1304>
   13250:	ldr	r5, [pc, #-848]	; 12f08 <__assert_fail@plt+0x1150>
   13254:	ldr	r2, [r5]
   13258:	cmp	r2, #2
   1325c:	bne	13274 <__assert_fail@plt+0x14bc>
   13260:	ldr	r1, [pc, #-992]	; 12e88 <__assert_fail@plt+0x10d0>
   13264:	ldr	r0, [r5, #4]
   13268:	bl	11998 <memcmp@plt>
   1326c:	cmp	r0, #0
   13270:	beq	13870 <__assert_fail@plt+0x1ab8>
   13274:	bl	15400 <__assert_fail@plt+0x3648>
   13278:	ldr	r3, [pc, #-1000]	; 12e98 <__assert_fail@plt+0x10e0>
   1327c:	ldr	r5, [pc, #-1016]	; 12e8c <__assert_fail@plt+0x10d4>
   13280:	ldr	r8, [pc, #-1016]	; 12e90 <__assert_fail@plt+0x10d8>
   13284:	ldr	r0, [r3]
   13288:	bl	11a10 <fflush_unlocked@plt>
   1328c:	add	r7, r5, #48	; 0x30
   13290:	b	1329c <__assert_fail@plt+0x14e4>
   13294:	cmp	r5, r7
   13298:	beq	136d8 <__assert_fail@plt+0x1920>
   1329c:	ldr	r6, [r5, #4]!
   132a0:	mov	r0, r8
   132a4:	mov	r1, r6
   132a8:	bl	119c8 <sigismember@plt>
   132ac:	cmp	r0, #0
   132b0:	beq	13294 <__assert_fail@plt+0x14dc>
   132b4:	mov	r0, r6
   132b8:	mov	r1, #0
   132bc:	bl	11980 <signal@plt>
   132c0:	b	13294 <__assert_fail@plt+0x14dc>
   132c4:	ldrb	r3, [r4, #4009]	; 0xfa9
   132c8:	cmp	r3, #0
   132cc:	bne	1264c <__assert_fail@plt+0x894>
   132d0:	ldrb	r2, [r4, #3993]	; 0xf99
   132d4:	cmp	r2, #0
   132d8:	bne	1264c <__assert_fail@plt+0x894>
   132dc:	ldrb	r3, [r5, #-4008]	; 0xfffff058
   132e0:	strb	r2, [r4, #4093]	; 0xffd
   132e4:	cmp	r3, #0
   132e8:	bne	13308 <__assert_fail@plt+0x1550>
   132ec:	ldrb	r3, [r4, #3976]	; 0xf88
   132f0:	cmp	r3, #0
   132f4:	bne	13308 <__assert_fail@plt+0x1550>
   132f8:	ldr	r3, [r4, #3840]	; 0xf00
   132fc:	cmp	r3, #0
   13300:	ldrbeq	r3, [r4, #3813]	; 0xee5
   13304:	beq	12658 <__assert_fail@plt+0x8a0>
   13308:	mov	r3, #1
   1330c:	b	12658 <__assert_fail@plt+0x8a0>
   13310:	ldr	r3, [pc, #-1144]	; 12ea0 <__assert_fail@plt+0x10e8>
   13314:	mov	r2, #1
   13318:	mov	r1, #3
   1331c:	ldr	r0, [pc, #-1168]	; 12e94 <__assert_fail@plt+0x10dc>
   13320:	bl	17458 <__assert_fail@plt+0x56a0>
   13324:	b	1318c <__assert_fail@plt+0x13d4>
   13328:	mov	r2, #1
   1332c:	mov	r1, #32
   13330:	bl	2149c <__assert_fail@plt+0xf6e4>
   13334:	b	124e0 <__assert_fail@plt+0x728>
   13338:	ldrb	r3, [r5, #-4056]	; 0xfffff028
   1333c:	cmp	r3, #0
   13340:	bne	13798 <__assert_fail@plt+0x19e0>
   13344:	ldr	r3, [r4, #3840]	; 0xf00
   13348:	cmp	r3, #3
   1334c:	beq	13798 <__assert_fail@plt+0x19e0>
   13350:	ldr	r3, [r4, #4072]	; 0xfe8
   13354:	cmp	r3, #0
   13358:	moveq	r3, #2
   1335c:	movne	r3, #4
   13360:	str	r3, [r5, #-4088]	; 0xfffff008
   13364:	b	125d0 <__assert_fail@plt+0x818>
   13368:	bl	1471c <__assert_fail@plt+0x2964>
   1336c:	ldrb	r0, [r5, #-4056]	; 0xfffff028
   13370:	cmp	r0, #0
   13374:	beq	13864 <__assert_fail@plt+0x1aac>
   13378:	ldr	r3, [r4, #3088]	; 0xc10
   1337c:	cmp	r3, #0
   13380:	beq	126dc <__assert_fail@plt+0x924>
   13384:	bl	18478 <__assert_fail@plt+0x66c0>
   13388:	ldr	r3, [r4, #3084]	; 0xc0c
   1338c:	cmp	r3, #0
   13390:	beq	127a0 <__assert_fail@plt+0x9e8>
   13394:	ldr	r3, [pc, #-1284]	; 12e98 <__assert_fail@plt+0x10e0>
   13398:	ldr	r0, [r3]
   1339c:	ldr	r3, [r0, #20]
   133a0:	ldr	r2, [r0, #24]
   133a4:	cmp	r2, r3
   133a8:	addhi	r1, r3, #1
   133ac:	movhi	r2, #10
   133b0:	strhi	r1, [r0, #20]
   133b4:	strbhi	r2, [r3]
   133b8:	bls	13a94 <__assert_fail@plt+0x1cdc>
   133bc:	ldr	r3, [r4, #3824]	; 0xef0
   133c0:	add	r3, r3, #1
   133c4:	str	r3, [r4, #3824]	; 0xef0
   133c8:	b	126e4 <__assert_fail@plt+0x92c>
   133cc:	ldr	r1, [pc, #-1336]	; 12e9c <__assert_fail@plt+0x10e4>
   133d0:	mov	r3, #0
   133d4:	b	13420 <__assert_fail@plt+0x1668>
   133d8:	cmp	r3, #65	; 0x41
   133dc:	bge	13434 <__assert_fail@plt+0x167c>
   133e0:	sub	r2, r3, #48	; 0x30
   133e4:	cmp	r2, #9
   133e8:	bls	13434 <__assert_fail@plt+0x167c>
   133ec:	sub	r2, r3, #45	; 0x2d
   133f0:	cmp	r3, #126	; 0x7e
   133f4:	cmpne	r2, #1
   133f8:	bls	13434 <__assert_fail@plt+0x167c>
   133fc:	sub	r2, r3, #95	; 0x5f
   13400:	clz	r2, r2
   13404:	lsr	r2, r2, #5
   13408:	ldrb	r0, [r1, #1]!
   1340c:	add	r3, r3, #1
   13410:	cmp	r3, #256	; 0x100
   13414:	orr	r2, r2, r0
   13418:	strb	r2, [r1]
   1341c:	beq	1343c <__assert_fail@plt+0x1684>
   13420:	cmp	r3, #90	; 0x5a
   13424:	ble	133d8 <__assert_fail@plt+0x1620>
   13428:	sub	r2, r3, #97	; 0x61
   1342c:	cmp	r2, #25
   13430:	bhi	133ec <__assert_fail@plt+0x1634>
   13434:	mov	r2, #1
   13438:	b	13408 <__assert_fail@plt+0x1650>
   1343c:	bl	225d4 <__assert_fail@plt+0x1081c>
   13440:	cmp	r0, #0
   13444:	strne	r0, [r4, #3980]	; 0xf8c
   13448:	ldreq	r3, [pc, #-1456]	; 12ea0 <__assert_fail@plt+0x10e8>
   1344c:	streq	r3, [r4, #3980]	; 0xf8c
   13450:	b	12678 <__assert_fail@plt+0x8c0>
   13454:	ldr	r9, [pc, #-1464]	; 12ea4 <__assert_fail@plt+0x10ec>
   13458:	mov	r2, #0
   1345c:	mov	r1, r2
   13460:	str	r9, [sp]
   13464:	ldr	r3, [pc, #-1476]	; 12ea8 <__assert_fail@plt+0x10f0>
   13468:	ldr	r0, [pc, #-1452]	; 12ec4 <__assert_fail@plt+0x110c>
   1346c:	bl	239f0 <_obstack_begin@@Base>
   13470:	mov	r2, #0
   13474:	str	r9, [sp]
   13478:	mov	r1, r2
   1347c:	ldr	r3, [pc, #-1500]	; 12ea8 <__assert_fail@plt+0x10f0>
   13480:	ldr	r0, [pc, #-1468]	; 12ecc <__assert_fail@plt+0x1114>
   13484:	bl	239f0 <_obstack_begin@@Base>
   13488:	b	1266c <__assert_fail@plt+0x8b4>
   1348c:	ldr	r0, [pc, #-1512]	; 12eac <__assert_fail@plt+0x10f4>
   13490:	bl	11b18 <getenv@plt>
   13494:	cmp	r0, #0
   13498:	str	r0, [sp, #52]	; 0x34
   1349c:	beq	137a0 <__assert_fail@plt+0x19e8>
   134a0:	ldrb	r3, [r0]
   134a4:	cmp	r3, #0
   134a8:	beq	137a0 <__assert_fail@plt+0x19e8>
   134ac:	ldr	r3, [pc, #-1540]	; 12eb0 <__assert_fail@plt+0x10f8>
   134b0:	ldr	r2, [pc, #-1456]	; 12f08 <__assert_fail@plt+0x1150>
   134b4:	ldr	r3, [r3]
   134b8:	str	r2, [sp, #28]
   134bc:	strh	r3, [sp, #72]	; 0x48
   134c0:	lsr	r3, r3, #16
   134c4:	strb	r3, [sp, #74]	; 0x4a
   134c8:	bl	223ec <__assert_fail@plt+0x10634>
   134cc:	str	r0, [r5, #-3944]	; 0xfffff098
   134d0:	str	r0, [sp, #56]	; 0x38
   134d4:	ldr	r3, [sp, #52]	; 0x34
   134d8:	ldrb	r2, [r3]
   134dc:	cmp	r2, #42	; 0x2a
   134e0:	beq	13944 <__assert_fail@plt+0x1b8c>
   134e4:	cmp	r2, #58	; 0x3a
   134e8:	beq	13938 <__assert_fail@plt+0x1b80>
   134ec:	cmp	r2, #0
   134f0:	beq	13608 <__assert_fail@plt+0x1850>
   134f4:	add	r2, r3, #1
   134f8:	str	r2, [sp, #52]	; 0x34
   134fc:	ldrb	r2, [r3]
   13500:	strb	r2, [sp, #72]	; 0x48
   13504:	ldrb	r2, [r3, #1]
   13508:	cmp	r2, #0
   1350c:	beq	135c0 <__assert_fail@plt+0x1808>
   13510:	add	r2, r3, #2
   13514:	str	r2, [sp, #52]	; 0x34
   13518:	ldrb	r2, [r3, #1]
   1351c:	add	r1, r3, #3
   13520:	str	r1, [sp, #52]	; 0x34
   13524:	strb	r2, [sp, #73]	; 0x49
   13528:	ldrb	r3, [r3, #2]
   1352c:	cmp	r3, #61	; 0x3d
   13530:	bne	135c0 <__assert_fail@plt+0x1808>
   13534:	ldr	fp, [pc, #-1672]	; 12eb4 <__assert_fail@plt+0x10fc>
   13538:	mov	r9, #0
   1353c:	ldr	r1, [pc, #-1676]	; 12eb8 <__assert_fail@plt+0x1100>
   13540:	b	13554 <__assert_fail@plt+0x179c>
   13544:	ldr	r1, [fp], #4
   13548:	add	r9, r9, #1
   1354c:	cmp	r1, #0
   13550:	beq	13590 <__assert_fail@plt+0x17d8>
   13554:	add	r0, sp, #72	; 0x48
   13558:	bl	118d8 <strcmp@plt>
   1355c:	cmp	r0, #0
   13560:	bne	13544 <__assert_fail@plt+0x178c>
   13564:	ldr	r3, [sp, #28]
   13568:	ldr	ip, [sp, #56]	; 0x38
   1356c:	add	r9, r3, r9, lsl #3
   13570:	mov	r2, r0
   13574:	mov	r3, r9
   13578:	add	r1, sp, #52	; 0x34
   1357c:	str	ip, [r9, #4]
   13580:	mov	r0, sl
   13584:	bl	13c94 <__assert_fail@plt+0x1edc>
   13588:	cmp	r0, #0
   1358c:	bne	134d4 <__assert_fail@plt+0x171c>
   13590:	mov	r2, #5
   13594:	ldr	r1, [pc, #-1760]	; 12ebc <__assert_fail@plt+0x1104>
   13598:	mov	r0, #0
   1359c:	bl	119a4 <dcgettext@plt>
   135a0:	mov	r9, r0
   135a4:	add	r0, sp, #72	; 0x48
   135a8:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   135ac:	mov	r1, #0
   135b0:	mov	r2, r9
   135b4:	mov	r3, r0
   135b8:	mov	r0, r1
   135bc:	bl	11adc <error@plt>
   135c0:	mov	r2, #5
   135c4:	ldr	r1, [pc, #-1804]	; 12ec0 <__assert_fail@plt+0x1108>
   135c8:	mov	r0, #0
   135cc:	bl	119a4 <dcgettext@plt>
   135d0:	mov	r1, #0
   135d4:	mov	r2, r0
   135d8:	mov	r0, r1
   135dc:	bl	11adc <error@plt>
   135e0:	ldr	r0, [r5, #-3944]	; 0xfffff098
   135e4:	bl	11938 <free@plt>
   135e8:	ldr	r0, [r4, #3988]	; 0xf94
   135ec:	b	135fc <__assert_fail@plt+0x1844>
   135f0:	ldr	r9, [r0, #16]
   135f4:	bl	11938 <free@plt>
   135f8:	mov	r0, r9
   135fc:	cmp	r0, #0
   13600:	bne	135f0 <__assert_fail@plt+0x1838>
   13604:	strb	r0, [r4, #3976]	; 0xf88
   13608:	ldr	r3, [sp, #28]
   1360c:	ldr	r2, [r3, #56]	; 0x38
   13610:	cmp	r2, #6
   13614:	beq	13890 <__assert_fail@plt+0x1ad8>
   13618:	ldrb	r3, [r4, #3976]	; 0xf88
   1361c:	cmp	r3, #0
   13620:	beq	125c4 <__assert_fail@plt+0x80c>
   13624:	mov	r0, #13
   13628:	bl	14160 <__assert_fail@plt+0x23a8>
   1362c:	cmp	r0, #0
   13630:	bne	13650 <__assert_fail@plt+0x1898>
   13634:	mov	r0, #14
   13638:	bl	14160 <__assert_fail@plt+0x23a8>
   1363c:	cmp	r0, #0
   13640:	beq	1365c <__assert_fail@plt+0x18a4>
   13644:	ldrb	r3, [r4, #3985]	; 0xf91
   13648:	cmp	r3, #0
   1364c:	beq	1365c <__assert_fail@plt+0x18a4>
   13650:	mov	r3, #1
   13654:	strb	r3, [r5, #-4084]	; 0xfffff00c
   13658:	b	125c4 <__assert_fail@plt+0x80c>
   1365c:	mov	r0, #12
   13660:	bl	14160 <__assert_fail@plt+0x23a8>
   13664:	cmp	r0, #0
   13668:	beq	125c4 <__assert_fail@plt+0x80c>
   1366c:	ldr	r3, [r4, #4072]	; 0xfe8
   13670:	cmp	r3, #0
   13674:	bne	125c4 <__assert_fail@plt+0x80c>
   13678:	b	13650 <__assert_fail@plt+0x1898>
   1367c:	ldr	r1, [pc, #-1984]	; 12ec4 <__assert_fail@plt+0x110c>
   13680:	ldr	r0, [pc, #-1984]	; 12ec8 <__assert_fail@plt+0x1110>
   13684:	bl	14b14 <__assert_fail@plt+0x2d5c>
   13688:	ldr	r1, [pc, #-1988]	; 12ecc <__assert_fail@plt+0x1114>
   1368c:	ldr	r0, [pc, #-1988]	; 12ed0 <__assert_fail@plt+0x1118>
   13690:	bl	14b14 <__assert_fail@plt+0x2d5c>
   13694:	ldr	r0, [r4, #3140]	; 0xc44
   13698:	bl	2146c <__assert_fail@plt+0xf6b4>
   1369c:	ldr	r3, [pc, #-2000]	; 12ed4 <__assert_fail@plt+0x111c>
   136a0:	ldr	r1, [pc, #-2000]	; 12ed8 <__assert_fail@plt+0x1120>
   136a4:	ldr	r2, [r3, r0, lsl #2]
   136a8:	mov	r0, #1
   136ac:	bl	11c50 <__printf_chk@plt>
   136b0:	b	127c4 <__assert_fail@plt+0xa0c>
   136b4:	ldr	r1, [pc, #-2016]	; 12edc <__assert_fail@plt+0x1124>
   136b8:	b	13050 <__assert_fail@plt+0x1298>
   136bc:	mov	r0, #1
   136c0:	bl	11d40 <isatty@plt>
   136c4:	cmp	r0, #0
   136c8:	movne	r3, #2
   136cc:	moveq	r3, #1
   136d0:	str	r3, [r4, #4072]	; 0xfe8
   136d4:	b	12c7c <__assert_fail@plt+0xec4>
   136d8:	ldr	r5, [r4, #3832]	; 0xef8
   136dc:	cmp	r5, #0
   136e0:	beq	136f4 <__assert_fail@plt+0x193c>
   136e4:	mov	r0, #19
   136e8:	bl	118b4 <raise@plt>
   136ec:	subs	r5, r5, #1
   136f0:	bne	136e4 <__assert_fail@plt+0x192c>
   136f4:	ldr	r0, [r4]
   136f8:	cmp	r0, #0
   136fc:	beq	127b8 <__assert_fail@plt+0xa00>
   13700:	bl	118b4 <raise@plt>
   13704:	b	127b8 <__assert_fail@plt+0xa00>
   13708:	ldrb	r3, [r9]
   1370c:	str	r9, [sp, #32]
   13710:	cmp	r3, #43	; 0x2b
   13714:	beq	13750 <__assert_fail@plt+0x1998>
   13718:	ldr	r2, [pc, #-2112]	; 12ee0 <__assert_fail@plt+0x1128>
   1371c:	mov	r3, #4
   13720:	sub	r1, r2, #992	; 0x3e0
   13724:	ldr	r0, [sp, #32]
   13728:	bl	1a150 <__assert_fail@plt+0x8398>
   1372c:	subs	r2, r0, #0
   13730:	blt	139e8 <__assert_fail@plt+0x1c30>
   13734:	cmp	r2, #3
   13738:	ldrls	pc, [pc, r2, lsl #2]
   1373c:	b	13790 <__assert_fail@plt+0x19d8>
   13740:	andeq	r3, r1, ip, lsr #17
   13744:	andeq	r3, r1, r0, lsr #18
   13748:	andeq	r3, r1, r8, lsl #18
   1374c:	andeq	r3, r1, r4, asr #17
   13750:	add	r8, r9, #1
   13754:	mov	r0, r8
   13758:	mov	r1, #10
   1375c:	bl	11bfc <strchr@plt>
   13760:	subs	r9, r0, #0
   13764:	beq	13a8c <__assert_fail@plt+0x1cd4>
   13768:	add	fp, r9, #1
   1376c:	mov	r0, fp
   13770:	mov	r1, #10
   13774:	bl	11bfc <strchr@plt>
   13778:	cmp	r0, #0
   1377c:	strbeq	r0, [r9]
   13780:	bne	13ab4 <__assert_fail@plt+0x1cfc>
   13784:	ldr	r3, [pc, #-2180]	; 12f08 <__assert_fail@plt+0x1150>
   13788:	str	r8, [r3, #192]	; 0xc0
   1378c:	str	fp, [r3, #196]	; 0xc4
   13790:	bl	14260 <__assert_fail@plt+0x24a8>
   13794:	b	125b0 <__assert_fail@plt+0x7f8>
   13798:	mov	r3, #2
   1379c:	b	13360 <__assert_fail@plt+0x15a8>
   137a0:	ldr	r0, [pc, #-2244]	; 12ee4 <__assert_fail@plt+0x112c>
   137a4:	bl	11b18 <getenv@plt>
   137a8:	cmp	r0, #0
   137ac:	beq	137bc <__assert_fail@plt+0x1a04>
   137b0:	ldrb	r3, [r0]
   137b4:	cmp	r3, #0
   137b8:	bne	13618 <__assert_fail@plt+0x1860>
   137bc:	ldr	r0, [pc, #-2268]	; 12ee8 <__assert_fail@plt+0x1130>
   137c0:	bl	11b18 <getenv@plt>
   137c4:	subs	r3, r0, #0
   137c8:	beq	139dc <__assert_fail@plt+0x1c24>
   137cc:	mov	r2, r3
   137d0:	ldrb	r3, [r3]
   137d4:	cmp	r3, #0
   137d8:	beq	139dc <__assert_fail@plt+0x1c24>
   137dc:	ldr	r9, [pc, #-2296]	; 12eec <__assert_fail@plt+0x1134>
   137e0:	mov	r3, r7
   137e4:	str	r6, [sp, #28]
   137e8:	mov	r7, r9
   137ec:	mov	r6, r2
   137f0:	mov	fp, r3
   137f4:	b	13818 <__assert_fail@plt+0x1a60>
   137f8:	mov	r0, r7
   137fc:	bl	11bf0 <strlen@plt>
   13800:	ldr	r3, [pc, #-2328]	; 12ef0 <__assert_fail@plt+0x1138>
   13804:	add	r0, r0, #1
   13808:	add	r7, r7, r0
   1380c:	sub	r2, r7, r9
   13810:	cmp	r2, r3
   13814:	bhi	139d4 <__assert_fail@plt+0x1c1c>
   13818:	mov	r2, #5
   1381c:	ldr	r1, [pc, #-2352]	; 12ef4 <__assert_fail@plt+0x113c>
   13820:	mov	r0, r7
   13824:	bl	11d58 <strncmp@plt>
   13828:	subs	r2, r0, #0
   1382c:	bne	137f8 <__assert_fail@plt+0x1a40>
   13830:	mov	r1, r6
   13834:	add	r0, r7, #5
   13838:	bl	11b00 <fnmatch@plt>
   1383c:	cmp	r0, #0
   13840:	bne	137f8 <__assert_fail@plt+0x1a40>
   13844:	ldr	r6, [sp, #28]
   13848:	mov	r7, fp
   1384c:	b	13618 <__assert_fail@plt+0x1860>
   13850:	cmp	r2, #0
   13854:	movne	r3, #4
   13858:	strne	r3, [r4, #3404]	; 0xd4c
   1385c:	bne	125b0 <__assert_fail@plt+0x7f8>
   13860:	b	1256c <__assert_fail@plt+0x7b4>
   13864:	mov	r1, #1
   13868:	bl	148dc <__assert_fail@plt+0x2b24>
   1386c:	b	13378 <__assert_fail@plt+0x15c0>
   13870:	ldr	r3, [r5, #8]
   13874:	cmp	r3, #1
   13878:	bne	13274 <__assert_fail@plt+0x14bc>
   1387c:	ldr	r3, [r5, #12]
   13880:	ldrb	r3, [r3]
   13884:	cmp	r3, #109	; 0x6d
   13888:	bne	13274 <__assert_fail@plt+0x14bc>
   1388c:	b	13278 <__assert_fail@plt+0x14c0>
   13890:	ldr	r0, [r3, #60]	; 0x3c
   13894:	ldr	r1, [pc, #-2468]	; 12ef8 <__assert_fail@plt+0x1140>
   13898:	bl	11d58 <strncmp@plt>
   1389c:	cmp	r0, #0
   138a0:	moveq	r3, #1
   138a4:	strbeq	r3, [r4, #3985]	; 0xf91
   138a8:	b	13618 <__assert_fail@plt+0x1860>
   138ac:	ldr	r3, [pc, #-2476]	; 12f08 <__assert_fail@plt+0x1150>
   138b0:	mov	r2, r3
   138b4:	ldr	r3, [pc, #-2496]	; 12efc <__assert_fail@plt+0x1144>
   138b8:	str	r3, [r2, #196]	; 0xc4
   138bc:	str	r3, [r2, #192]	; 0xc0
   138c0:	b	13790 <__assert_fail@plt+0x19d8>
   138c4:	mov	r0, #2
   138c8:	bl	1b634 <__assert_fail@plt+0x987c>
   138cc:	cmp	r0, #0
   138d0:	beq	13790 <__assert_fail@plt+0x19d8>
   138d4:	ldr	r3, [pc, #-2516]	; 12f08 <__assert_fail@plt+0x1150>
   138d8:	mov	r2, #2
   138dc:	mov	r0, #0
   138e0:	ldr	r1, [r3, #192]	; 0xc0
   138e4:	mov	r8, r3
   138e8:	bl	119a4 <dcgettext@plt>
   138ec:	ldr	r1, [r8, #196]	; 0xc4
   138f0:	mov	r2, #2
   138f4:	str	r0, [r8, #192]	; 0xc0
   138f8:	mov	r0, #0
   138fc:	bl	119a4 <dcgettext@plt>
   13900:	str	r0, [r8, #196]	; 0xc4
   13904:	b	13790 <__assert_fail@plt+0x19d8>
   13908:	ldr	r3, [pc, #-2568]	; 12f08 <__assert_fail@plt+0x1150>
   1390c:	ldr	r2, [pc, #-2580]	; 12f00 <__assert_fail@plt+0x1148>
   13910:	mov	r1, r3
   13914:	ldr	r3, [pc, #-2584]	; 12f04 <__assert_fail@plt+0x114c>
   13918:	strd	r2, [r1, #192]	; 0xc0
   1391c:	b	13790 <__assert_fail@plt+0x19d8>
   13920:	ldr	r3, [pc, #-2592]	; 12f08 <__assert_fail@plt+0x1150>
   13924:	mov	r2, r3
   13928:	ldr	r3, [pc, #-2596]	; 12f0c <__assert_fail@plt+0x1154>
   1392c:	str	r3, [r2, #196]	; 0xc4
   13930:	str	r3, [r2, #192]	; 0xc0
   13934:	b	13790 <__assert_fail@plt+0x19d8>
   13938:	add	r3, r3, #1
   1393c:	str	r3, [sp, #52]	; 0x34
   13940:	b	134d4 <__assert_fail@plt+0x171c>
   13944:	mov	r0, #20
   13948:	bl	221c0 <__assert_fail@plt+0x10408>
   1394c:	ldr	r2, [r4, #3988]	; 0xf94
   13950:	ldr	ip, [sp, #52]	; 0x34
   13954:	add	r1, sp, #52	; 0x34
   13958:	add	ip, ip, #1
   1395c:	str	ip, [sp, #52]	; 0x34
   13960:	mov	r9, r0
   13964:	ldr	r0, [sp, #56]	; 0x38
   13968:	str	r2, [r9, #16]
   1396c:	str	r0, [r9, #4]
   13970:	mov	r3, r9
   13974:	mov	r2, #1
   13978:	mov	r0, sl
   1397c:	str	r9, [r4, #3988]	; 0xf94
   13980:	bl	13c94 <__assert_fail@plt+0x1edc>
   13984:	cmp	r0, #0
   13988:	beq	135c0 <__assert_fail@plt+0x1808>
   1398c:	ldr	r3, [sp, #52]	; 0x34
   13990:	add	r2, r3, #1
   13994:	str	r2, [sp, #52]	; 0x34
   13998:	ldrb	r3, [r3]
   1399c:	cmp	r3, #61	; 0x3d
   139a0:	bne	135c0 <__assert_fail@plt+0x1808>
   139a4:	ldr	r0, [sp, #56]	; 0x38
   139a8:	add	r1, sp, #52	; 0x34
   139ac:	str	r0, [r9, #12]
   139b0:	add	r3, r9, #8
   139b4:	mov	r2, #0
   139b8:	mov	r0, sl
   139bc:	bl	13c94 <__assert_fail@plt+0x1edc>
   139c0:	cmp	r0, #0
   139c4:	bne	134d4 <__assert_fail@plt+0x171c>
   139c8:	b	135c0 <__assert_fail@plt+0x1808>
   139cc:	mov	r0, #0
   139d0:	bl	19aa4 <__assert_fail@plt+0x7cec>
   139d4:	ldr	r6, [sp, #28]
   139d8:	mov	r7, fp
   139dc:	mov	r3, #0
   139e0:	strb	r3, [r4, #3976]	; 0xf88
   139e4:	b	13618 <__assert_fail@plt+0x1860>
   139e8:	ldr	r4, [pc, #-2784]	; 12f10 <__assert_fail@plt+0x1158>
   139ec:	ldr	r1, [sp, #32]
   139f0:	ldr	r0, [pc, #-2788]	; 12f14 <__assert_fail@plt+0x115c>
   139f4:	bl	1a244 <__assert_fail@plt+0x848c>
   139f8:	mov	r2, #5
   139fc:	ldr	r1, [pc, #-2796]	; 12f18 <__assert_fail@plt+0x1160>
   13a00:	mov	r0, #0
   13a04:	bl	119a4 <dcgettext@plt>
   13a08:	ldr	r1, [r4]
   13a0c:	bl	118a8 <fputs_unlocked@plt>
   13a10:	ldr	r5, [pc, #-2812]	; 12f1c <__assert_fail@plt+0x1164>
   13a14:	ldr	r3, [pc, #-2812]	; 12f20 <__assert_fail@plt+0x1168>
   13a18:	ldr	r6, [pc, #-2812]	; 12f24 <__assert_fail@plt+0x116c>
   13a1c:	mov	r2, r6
   13a20:	mov	r1, #1
   13a24:	ldr	r0, [r4]
   13a28:	bl	11c74 <__fprintf_chk@plt>
   13a2c:	ldr	r3, [r5, #4]!
   13a30:	cmp	r3, #0
   13a34:	bne	13a1c <__assert_fail@plt+0x1c64>
   13a38:	ldr	r1, [pc, #-2840]	; 12f28 <__assert_fail@plt+0x1170>
   13a3c:	mov	r0, r3
   13a40:	mov	r2, #5
   13a44:	bl	119a4 <dcgettext@plt>
   13a48:	ldr	r1, [r4]
   13a4c:	bl	118a8 <fputs_unlocked@plt>
   13a50:	mov	r0, #2
   13a54:	bl	19aa4 <__assert_fail@plt+0x7cec>
   13a58:	ldr	r0, [pc, #-2868]	; 12f2c <__assert_fail@plt+0x1174>
   13a5c:	bl	11b18 <getenv@plt>
   13a60:	subs	r3, r0, #0
   13a64:	str	r3, [sp, #32]
   13a68:	bne	12578 <__assert_fail@plt+0x7c0>
   13a6c:	ldr	r3, [pc, #-2884]	; 12f30 <__assert_fail@plt+0x1178>
   13a70:	str	r3, [sp, #32]
   13a74:	b	13718 <__assert_fail@plt+0x1960>
   13a78:	ldr	r0, [pc, #-2892]	; 12f34 <__assert_fail@plt+0x117c>
   13a7c:	bl	11b18 <getenv@plt>
   13a80:	cmp	r0, #0
   13a84:	bne	13208 <__assert_fail@plt+0x1450>
   13a88:	b	13220 <__assert_fail@plt+0x1468>
   13a8c:	mov	fp, r8
   13a90:	b	13784 <__assert_fail@plt+0x19cc>
   13a94:	mov	r1, #10
   13a98:	bl	11c98 <__overflow@plt>
   13a9c:	b	133bc <__assert_fail@plt+0x1604>
   13aa0:	ldr	r3, [pc, #-2900]	; 12f54 <__assert_fail@plt+0x119c>
   13aa4:	mov	r2, #1648	; 0x670
   13aa8:	ldr	r1, [pc, #-2896]	; 12f60 <__assert_fail@plt+0x11a8>
   13aac:	ldr	r0, [pc, #-2940]	; 12f38 <__assert_fail@plt+0x1180>
   13ab0:	bl	11db8 <__assert_fail@plt>
   13ab4:	mov	r2, #5
   13ab8:	ldr	r1, [pc, #-2948]	; 12f3c <__assert_fail@plt+0x1184>
   13abc:	mov	r0, #0
   13ac0:	bl	119a4 <dcgettext@plt>
   13ac4:	mov	r4, r0
   13ac8:	mov	r0, r8
   13acc:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   13ad0:	mov	r2, r4
   13ad4:	mov	r1, #0
   13ad8:	mov	r3, r0
   13adc:	mov	r0, #2
   13ae0:	bl	11adc <error@plt>
   13ae4:	ldr	r3, [pc, #-2988]	; 12f40 <__assert_fail@plt+0x1188>
   13ae8:	ldr	r2, [pc, #-2988]	; 12f44 <__assert_fail@plt+0x118c>
   13aec:	ldr	r1, [pc, #-2964]	; 12f60 <__assert_fail@plt+0x11a8>
   13af0:	ldr	r0, [pc, #-2992]	; 12f48 <__assert_fail@plt+0x1190>
   13af4:	bl	11db8 <__assert_fail@plt>
   13af8:	bl	22408 <__assert_fail@plt+0x10650>
   13afc:	bl	119b0 <__stack_chk_fail@plt>
   13b00:	ldr	r3, [pc, #-3004]	; 12f4c <__assert_fail@plt+0x1194>
   13b04:	ldr	r1, [sp, #56]	; 0x38
   13b08:	ldr	r2, [r3]
   13b0c:	ldr	r3, [pc, #-3012]	; 12f50 <__assert_fail@plt+0x1198>
   13b10:	str	r2, [sp]
   13b14:	mov	r2, #0
   13b18:	bl	22cf4 <__assert_fail@plt+0x10f3c>
   13b1c:	ldr	r3, [pc, #-3024]	; 12f54 <__assert_fail@plt+0x119c>
   13b20:	ldr	r2, [pc, #-3024]	; 12f58 <__assert_fail@plt+0x11a0>
   13b24:	ldr	r1, [pc, #-3020]	; 12f60 <__assert_fail@plt+0x11a8>
   13b28:	ldr	r0, [pc, #-3028]	; 12f5c <__assert_fail@plt+0x11a4>
   13b2c:	bl	11db8 <__assert_fail@plt>
   13b30:	mov	fp, #0
   13b34:	mov	lr, #0
   13b38:	pop	{r1}		; (ldr r1, [sp], #4)
   13b3c:	mov	r2, sp
   13b40:	push	{r2}		; (str r2, [sp, #-4]!)
   13b44:	push	{r0}		; (str r0, [sp, #-4]!)
   13b48:	ldr	ip, [pc, #16]	; 13b60 <__assert_fail@plt+0x1da8>
   13b4c:	push	{ip}		; (str ip, [sp, #-4]!)
   13b50:	ldr	r0, [pc, #12]	; 13b64 <__assert_fail@plt+0x1dac>
   13b54:	ldr	r3, [pc, #12]	; 13b68 <__assert_fail@plt+0x1db0>
   13b58:	bl	11b48 <__libc_start_main@plt>
   13b5c:	bl	11d64 <abort@plt>
   13b60:	andeq	r4, r2, r8, ror #29
   13b64:	andeq	r1, r1, r8, asr #27
   13b68:	andeq	r4, r2, r8, lsl #29
   13b6c:	ldr	r3, [pc, #20]	; 13b88 <__assert_fail@plt+0x1dd0>
   13b70:	ldr	r2, [pc, #20]	; 13b8c <__assert_fail@plt+0x1dd4>
   13b74:	add	r3, pc, r3
   13b78:	ldr	r2, [r3, r2]
   13b7c:	cmp	r2, #0
   13b80:	bxeq	lr
   13b84:	b	11b84 <__gmon_start__@plt>
   13b88:	andeq	r6, r2, r4, lsl #9
   13b8c:	andeq	r0, r0, r4, asr #3
   13b90:	ldr	r0, [pc, #24]	; 13bb0 <__assert_fail@plt+0x1df8>
   13b94:	ldr	r3, [pc, #24]	; 13bb4 <__assert_fail@plt+0x1dfc>
   13b98:	cmp	r3, r0
   13b9c:	bxeq	lr
   13ba0:	ldr	r3, [pc, #16]	; 13bb8 <__assert_fail@plt+0x1e00>
   13ba4:	cmp	r3, #0
   13ba8:	bxeq	lr
   13bac:	bx	r3
   13bb0:	andeq	sl, r3, r4, lsl #6
   13bb4:	andeq	sl, r3, r4, lsl #6
   13bb8:	andeq	r0, r0, r0
   13bbc:	ldr	r0, [pc, #36]	; 13be8 <__assert_fail@plt+0x1e30>
   13bc0:	ldr	r1, [pc, #36]	; 13bec <__assert_fail@plt+0x1e34>
   13bc4:	sub	r1, r1, r0
   13bc8:	asr	r1, r1, #2
   13bcc:	add	r1, r1, r1, lsr #31
   13bd0:	asrs	r1, r1, #1
   13bd4:	bxeq	lr
   13bd8:	ldr	r3, [pc, #16]	; 13bf0 <__assert_fail@plt+0x1e38>
   13bdc:	cmp	r3, #0
   13be0:	bxeq	lr
   13be4:	bx	r3
   13be8:	andeq	sl, r3, r4, lsl #6
   13bec:	andeq	sl, r3, r4, lsl #6
   13bf0:	andeq	r0, r0, r0
   13bf4:	push	{r4, lr}
   13bf8:	ldr	r4, [pc, #24]	; 13c18 <__assert_fail@plt+0x1e60>
   13bfc:	ldrb	r3, [r4]
   13c00:	cmp	r3, #0
   13c04:	popne	{r4, pc}
   13c08:	bl	13b90 <__assert_fail@plt+0x1dd8>
   13c0c:	mov	r3, #1
   13c10:	strb	r3, [r4]
   13c14:	pop	{r4, pc}
   13c18:	andeq	sl, r3, r4, lsr #6
   13c1c:	b	13bbc <__assert_fail@plt+0x1e04>
   13c20:	push	{r4, lr}
   13c24:	mov	r2, r1
   13c28:	mov	r3, #0
   13c2c:	ldrd	r0, [r0]
   13c30:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   13c34:	mov	r0, r2
   13c38:	pop	{r4, pc}
   13c3c:	ldrd	r2, [r1]
   13c40:	push	{r4, r5}
   13c44:	ldrd	r4, [r0]
   13c48:	cmp	r5, r3
   13c4c:	cmpeq	r4, r2
   13c50:	movne	r0, #0
   13c54:	bne	13c70 <__assert_fail@plt+0x1eb8>
   13c58:	ldrd	r4, [r0, #8]
   13c5c:	ldrd	r2, [r1, #8]
   13c60:	cmp	r5, r3
   13c64:	cmpeq	r4, r2
   13c68:	moveq	r0, #1
   13c6c:	movne	r0, #0
   13c70:	pop	{r4, r5}
   13c74:	bx	lr
   13c78:	ldr	r3, [pc, #12]	; 13c8c <__assert_fail@plt+0x1ed4>
   13c7c:	ldr	r2, [r3]
   13c80:	cmp	r2, #0
   13c84:	streq	r0, [r3]
   13c88:	bx	lr
   13c8c:	andeq	sl, r3, r8, lsr #6
   13c90:	b	11938 <free@plt>
   13c94:	ldr	ip, [r1]
   13c98:	push	{r4, r5, r6, r7, r8, lr}
   13c9c:	mov	r7, r0
   13ca0:	ldr	lr, [r0]
   13ca4:	mov	r6, #0
   13ca8:	mov	r0, #127	; 0x7f
   13cac:	ldrb	r4, [ip]
   13cb0:	cmp	r4, #61	; 0x3d
   13cb4:	beq	13cfc <__assert_fail@plt+0x1f44>
   13cb8:	bls	13f6c <__assert_fail@plt+0x21b4>
   13cbc:	cmp	r4, #92	; 0x5c
   13cc0:	beq	13d18 <__assert_fail@plt+0x1f60>
   13cc4:	cmp	r4, #94	; 0x5e
   13cc8:	bne	13d08 <__assert_fail@plt+0x1f50>
   13ccc:	ldrb	r4, [ip, #1]
   13cd0:	add	r8, ip, #1
   13cd4:	sub	r5, r4, #64	; 0x40
   13cd8:	cmp	r5, #62	; 0x3e
   13cdc:	bhi	13f10 <__assert_fail@plt+0x2158>
   13ce0:	add	ip, ip, #2
   13ce4:	and	r4, r4, #31
   13ce8:	strb	r4, [lr], #1
   13cec:	ldrb	r4, [ip]
   13cf0:	add	r6, r6, #1
   13cf4:	cmp	r4, #61	; 0x3d
   13cf8:	bne	13cb8 <__assert_fail@plt+0x1f00>
   13cfc:	cmp	r2, #0
   13d00:	movne	r0, r2
   13d04:	bne	13f20 <__assert_fail@plt+0x2168>
   13d08:	add	ip, ip, #1
   13d0c:	strb	r4, [lr], #1
   13d10:	add	r6, r6, #1
   13d14:	b	13cac <__assert_fail@plt+0x1ef4>
   13d18:	ldrb	r4, [ip, #1]
   13d1c:	add	ip, ip, #2
   13d20:	cmp	r4, #120	; 0x78
   13d24:	ldrls	pc, [pc, r4, lsl #2]
   13d28:	b	13f60 <__assert_fail@plt+0x21a8>
   13d2c:	andeq	r3, r1, ip, lsl pc
   13d30:	andeq	r3, r1, r0, ror #30
   13d34:	andeq	r3, r1, r0, ror #30
   13d38:	andeq	r3, r1, r0, ror #30
   13d3c:	andeq	r3, r1, r0, ror #30
   13d40:	andeq	r3, r1, r0, ror #30
   13d44:	andeq	r3, r1, r0, ror #30
   13d48:	andeq	r3, r1, r0, ror #30
   13d4c:	andeq	r3, r1, r0, ror #30
   13d50:	andeq	r3, r1, r0, ror #30
   13d54:	andeq	r3, r1, r0, ror #30
   13d58:	andeq	r3, r1, r0, ror #30
   13d5c:	andeq	r3, r1, r0, ror #30
   13d60:	andeq	r3, r1, r0, ror #30
   13d64:	andeq	r3, r1, r0, ror #30
   13d68:	andeq	r3, r1, r0, ror #30
   13d6c:	andeq	r3, r1, r0, ror #30
   13d70:	andeq	r3, r1, r0, ror #30
   13d74:	andeq	r3, r1, r0, ror #30
   13d78:	andeq	r3, r1, r0, ror #30
   13d7c:	andeq	r3, r1, r0, ror #30
   13d80:	andeq	r3, r1, r0, ror #30
   13d84:	andeq	r3, r1, r0, ror #30
   13d88:	andeq	r3, r1, r0, ror #30
   13d8c:	andeq	r3, r1, r0, ror #30
   13d90:	andeq	r3, r1, r0, ror #30
   13d94:	andeq	r3, r1, r0, ror #30
   13d98:	andeq	r3, r1, r0, ror #30
   13d9c:	andeq	r3, r1, r0, ror #30
   13da0:	andeq	r3, r1, r0, ror #30
   13da4:	andeq	r3, r1, r0, ror #30
   13da8:	andeq	r3, r1, r0, ror #30
   13dac:	andeq	r3, r1, r0, ror #30
   13db0:	andeq	r3, r1, r0, ror #30
   13db4:	andeq	r3, r1, r0, ror #30
   13db8:	andeq	r3, r1, r0, ror #30
   13dbc:	andeq	r3, r1, r0, ror #30
   13dc0:	andeq	r3, r1, r0, ror #30
   13dc4:	andeq	r3, r1, r0, ror #30
   13dc8:	andeq	r3, r1, r0, ror #30
   13dcc:	andeq	r3, r1, r0, ror #30
   13dd0:	andeq	r3, r1, r0, ror #30
   13dd4:	andeq	r3, r1, r0, ror #30
   13dd8:	andeq	r3, r1, r0, ror #30
   13ddc:	andeq	r3, r1, r0, ror #30
   13de0:	andeq	r3, r1, r0, ror #30
   13de4:	andeq	r3, r1, r0, ror #30
   13de8:	andeq	r3, r1, r0, ror #30
   13dec:	andeq	r3, r1, r0, lsr pc
   13df0:	andeq	r3, r1, r0, lsr pc
   13df4:	andeq	r3, r1, r0, lsr pc
   13df8:	andeq	r3, r1, r0, lsr pc
   13dfc:	andeq	r3, r1, r0, lsr pc
   13e00:	andeq	r3, r1, r0, lsr pc
   13e04:	andeq	r3, r1, r0, lsr pc
   13e08:	andeq	r3, r1, r0, lsr pc
   13e0c:	andeq	r3, r1, r0, ror #30
   13e10:	andeq	r3, r1, r0, ror #30
   13e14:	andeq	r3, r1, r0, ror #30
   13e18:	andeq	r3, r1, r0, ror #30
   13e1c:	andeq	r3, r1, r0, ror #30
   13e20:	andeq	r3, r1, r0, ror #30
   13e24:	andeq	r3, r1, r0, ror #30
   13e28:	andeq	r4, r1, r0, ror #1
   13e2c:	andeq	r3, r1, r0, ror #30
   13e30:	andeq	r3, r1, r0, ror #30
   13e34:	andeq	r3, r1, r0, ror #30
   13e38:	andeq	r3, r1, r0, ror #30
   13e3c:	andeq	r3, r1, r0, ror #30
   13e40:	andeq	r3, r1, r0, ror #30
   13e44:	andeq	r3, r1, r0, ror #30
   13e48:	andeq	r3, r1, r0, ror #30
   13e4c:	andeq	r3, r1, r0, ror #30
   13e50:	andeq	r3, r1, r0, ror #30
   13e54:	andeq	r3, r1, r0, ror #30
   13e58:	andeq	r3, r1, r0, ror #30
   13e5c:	andeq	r3, r1, r0, ror #30
   13e60:	andeq	r3, r1, r0, ror #30
   13e64:	andeq	r3, r1, r0, ror #30
   13e68:	andeq	r3, r1, r0, ror #30
   13e6c:	andeq	r3, r1, r0, ror #30
   13e70:	andeq	r3, r1, r0, ror #30
   13e74:	andeq	r3, r1, r0, ror #30
   13e78:	andeq	r3, r1, r0, ror #30
   13e7c:	andeq	r3, r1, r0, ror #30
   13e80:	andeq	r3, r1, r0, ror #30
   13e84:	andeq	r3, r1, r0, ror #30
   13e88:	andeq	r3, r1, r0, ror #30
   13e8c:	andeq	r3, r1, r4, lsr #31
   13e90:	andeq	r3, r1, r0, ror #30
   13e94:	andeq	r3, r1, r0, ror #30
   13e98:	andeq	r3, r1, r0, ror #30
   13e9c:	andeq	r3, r1, r0, ror #30
   13ea0:	andeq	r3, r1, r0, ror #30
   13ea4:	andeq	r3, r1, r0, ror #30
   13ea8:	andeq	r3, r1, ip, asr pc
   13eac:	andeq	r3, r1, r0, ror #30
   13eb0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13eb4:	andeq	r4, r1, r0, asr r1
   13eb8:	andeq	r3, r1, r0, ror #30
   13ebc:	andeq	r3, r1, r0, ror #30
   13ec0:	andeq	r4, r1, r0, asr #2
   13ec4:	andeq	r4, r1, r0, lsr r1
   13ec8:	andeq	r3, r1, r0, ror #30
   13ecc:	andeq	r3, r1, r0, ror #30
   13ed0:	andeq	r3, r1, r0, ror #30
   13ed4:	andeq	r3, r1, r0, ror #30
   13ed8:	andeq	r3, r1, r0, ror #30
   13edc:	andeq	r3, r1, r0, ror #30
   13ee0:	andeq	r3, r1, r0, ror #30
   13ee4:	andeq	r4, r1, r0, lsr #2
   13ee8:	andeq	r3, r1, r0, ror #30
   13eec:	andeq	r3, r1, r0, ror #30
   13ef0:	andeq	r3, r1, r0, ror #30
   13ef4:	andeq	r4, r1, r0, lsl #2
   13ef8:	andeq	r3, r1, r0, ror #30
   13efc:	strdeq	r4, [r1], -r0
   13f00:	andeq	r3, r1, r0, ror #30
   13f04:	andeq	r4, r1, r0, lsl r1
   13f08:	andeq	r3, r1, r0, ror #30
   13f0c:	andeq	r3, r1, r4, lsr #31
   13f10:	cmp	r4, #63	; 0x3f
   13f14:	beq	13f84 <__assert_fail@plt+0x21cc>
   13f18:	mov	ip, r8
   13f1c:	mov	r0, #0
   13f20:	str	lr, [r7]
   13f24:	str	ip, [r1]
   13f28:	str	r6, [r3]
   13f2c:	pop	{r4, r5, r6, r7, r8, pc}
   13f30:	sub	r4, r4, #48	; 0x30
   13f34:	uxtb	r4, r4
   13f38:	ldrb	r5, [ip]
   13f3c:	sub	r8, r5, #48	; 0x30
   13f40:	cmp	r8, #7
   13f44:	add	r5, r5, r4, lsl #3
   13f48:	sub	r5, r5, #48	; 0x30
   13f4c:	bhi	13f60 <__assert_fail@plt+0x21a8>
   13f50:	add	ip, ip, #1
   13f54:	and	r4, r5, #255	; 0xff
   13f58:	b	13f38 <__assert_fail@plt+0x2180>
   13f5c:	mov	r4, #32
   13f60:	add	r6, r6, #1
   13f64:	strb	r4, [lr], #1
   13f68:	b	13cac <__assert_fail@plt+0x1ef4>
   13f6c:	cmp	r4, #0
   13f70:	beq	13f7c <__assert_fail@plt+0x21c4>
   13f74:	cmp	r4, #58	; 0x3a
   13f78:	bne	13d08 <__assert_fail@plt+0x1f50>
   13f7c:	mov	r0, #1
   13f80:	b	13f20 <__assert_fail@plt+0x2168>
   13f84:	add	r6, r6, #1
   13f88:	strb	r0, [lr], #1
   13f8c:	mov	ip, r8
   13f90:	b	13cac <__assert_fail@plt+0x1ef4>
   13f94:	mov	r4, #7
   13f98:	add	r6, r6, #1
   13f9c:	strb	r4, [lr], #1
   13fa0:	b	13cac <__assert_fail@plt+0x1ef4>
   13fa4:	mov	r8, #0
   13fa8:	ldrb	r4, [ip]
   13fac:	sub	r5, r4, #48	; 0x30
   13fb0:	cmp	r5, #54	; 0x36
   13fb4:	ldrls	pc, [pc, r5, lsl #2]
   13fb8:	b	140d4 <__assert_fail@plt+0x231c>
   13fbc:	andeq	r4, r1, r0, asr #1
   13fc0:	andeq	r4, r1, r0, asr #1
   13fc4:	andeq	r4, r1, r0, asr #1
   13fc8:	andeq	r4, r1, r0, asr #1
   13fcc:	andeq	r4, r1, r0, asr #1
   13fd0:	andeq	r4, r1, r0, asr #1
   13fd4:	andeq	r4, r1, r0, asr #1
   13fd8:	andeq	r4, r1, r0, asr #1
   13fdc:	andeq	r4, r1, r0, asr #1
   13fe0:	andeq	r4, r1, r0, asr #1
   13fe4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fe8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ff0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ff4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ff8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ffc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14000:	andeq	r4, r1, ip, lsr #1
   14004:	andeq	r4, r1, ip, lsr #1
   14008:	andeq	r4, r1, ip, lsr #1
   1400c:	andeq	r4, r1, ip, lsr #1
   14010:	andeq	r4, r1, ip, lsr #1
   14014:	andeq	r4, r1, ip, lsr #1
   14018:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1401c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14020:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14024:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14028:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1402c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14030:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14034:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14038:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1403c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14040:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14044:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14048:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1404c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14050:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14054:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14058:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1405c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14060:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14064:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14068:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1406c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14070:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14074:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14078:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1407c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14080:	muleq	r1, r8, r0
   14084:	muleq	r1, r8, r0
   14088:	muleq	r1, r8, r0
   1408c:	muleq	r1, r8, r0
   14090:	muleq	r1, r8, r0
   14094:	muleq	r1, r8, r0
   14098:	add	r4, r4, r8, lsl #4
   1409c:	sub	r4, r4, #87	; 0x57
   140a0:	and	r8, r4, #255	; 0xff
   140a4:	add	ip, ip, #1
   140a8:	b	13fa8 <__assert_fail@plt+0x21f0>
   140ac:	add	r4, r4, r8, lsl #4
   140b0:	sub	r4, r4, #55	; 0x37
   140b4:	and	r8, r4, #255	; 0xff
   140b8:	add	ip, ip, #1
   140bc:	b	13fa8 <__assert_fail@plt+0x21f0>
   140c0:	add	r4, r4, r8, lsl #4
   140c4:	sub	r4, r4, #48	; 0x30
   140c8:	and	r8, r4, #255	; 0xff
   140cc:	add	ip, ip, #1
   140d0:	b	13fa8 <__assert_fail@plt+0x21f0>
   140d4:	add	r6, r6, #1
   140d8:	strb	r8, [lr], #1
   140dc:	b	13cac <__assert_fail@plt+0x1ef4>
   140e0:	mov	r4, #127	; 0x7f
   140e4:	add	r6, r6, #1
   140e8:	strb	r4, [lr], #1
   140ec:	b	13cac <__assert_fail@plt+0x1ef4>
   140f0:	mov	r4, #9
   140f4:	add	r6, r6, #1
   140f8:	strb	r4, [lr], #1
   140fc:	b	13cac <__assert_fail@plt+0x1ef4>
   14100:	mov	r4, #13
   14104:	add	r6, r6, #1
   14108:	strb	r4, [lr], #1
   1410c:	b	13cac <__assert_fail@plt+0x1ef4>
   14110:	mov	r4, #11
   14114:	add	r6, r6, #1
   14118:	strb	r4, [lr], #1
   1411c:	b	13cac <__assert_fail@plt+0x1ef4>
   14120:	mov	r4, #10
   14124:	add	r6, r6, #1
   14128:	strb	r4, [lr], #1
   1412c:	b	13cac <__assert_fail@plt+0x1ef4>
   14130:	mov	r4, #12
   14134:	add	r6, r6, #1
   14138:	strb	r4, [lr], #1
   1413c:	b	13cac <__assert_fail@plt+0x1ef4>
   14140:	mov	r4, #27
   14144:	add	r6, r6, #1
   14148:	strb	r4, [lr], #1
   1414c:	b	13cac <__assert_fail@plt+0x1ef4>
   14150:	mov	r4, #8
   14154:	add	r6, r6, #1
   14158:	strb	r4, [lr], #1
   1415c:	b	13cac <__assert_fail@plt+0x1ef4>
   14160:	ldr	r3, [pc, #88]	; 141c0 <__assert_fail@plt+0x2408>
   14164:	ldr	r2, [r3, r0, lsl #3]
   14168:	cmp	r2, #0
   1416c:	beq	14190 <__assert_fail@plt+0x23d8>
   14170:	add	r3, r3, r0, lsl #3
   14174:	cmp	r2, #1
   14178:	ldr	r0, [r3, #4]
   1417c:	beq	14198 <__assert_fail@plt+0x23e0>
   14180:	cmp	r2, #2
   14184:	beq	141a8 <__assert_fail@plt+0x23f0>
   14188:	mov	r0, #1
   1418c:	bx	lr
   14190:	mov	r0, r2
   14194:	bx	lr
   14198:	ldrb	r2, [r0]
   1419c:	subs	r0, r2, #48	; 0x30
   141a0:	movne	r0, #1
   141a4:	bx	lr
   141a8:	push	{r4, lr}
   141ac:	ldr	r1, [pc, #16]	; 141c4 <__assert_fail@plt+0x240c>
   141b0:	bl	11d58 <strncmp@plt>
   141b4:	adds	r0, r0, #0
   141b8:	movne	r0, #1
   141bc:	pop	{r4, pc}
   141c0:	ldrdeq	sl, [r3], -r0
   141c4:	andeq	r6, r2, ip, ror r5
   141c8:	push	{r4, lr}
   141cc:	sub	sp, sp, #24
   141d0:	ldr	r4, [pc, #124]	; 14254 <__assert_fail@plt+0x249c>
   141d4:	ldr	r3, [pc, #124]	; 14258 <__assert_fail@plt+0x24a0>
   141d8:	mov	r2, #0
   141dc:	ldr	ip, [r4]
   141e0:	str	r3, [sp]
   141e4:	mov	r1, r2
   141e8:	add	r3, sp, #8
   141ec:	str	ip, [sp, #20]
   141f0:	bl	22d8c <__assert_fail@plt+0x10fd4>
   141f4:	cmp	r0, #0
   141f8:	beq	14228 <__assert_fail@plt+0x2470>
   141fc:	cmp	r0, #1
   14200:	movne	r0, #0
   14204:	ldreq	r3, [pc, #80]	; 1425c <__assert_fail@plt+0x24a4>
   14208:	mvneq	r2, #0
   1420c:	streq	r2, [r3, #4]
   14210:	ldr	r2, [sp, #20]
   14214:	ldr	r3, [r4]
   14218:	cmp	r2, r3
   1421c:	bne	14250 <__assert_fail@plt+0x2498>
   14220:	add	sp, sp, #24
   14224:	pop	{r4, pc}
   14228:	ldrd	r2, [sp, #8]
   1422c:	mov	r1, #0
   14230:	mvn	r0, #0
   14234:	cmp	r3, r1
   14238:	ldr	ip, [pc, #28]	; 1425c <__assert_fail@plt+0x24a4>
   1423c:	cmpeq	r2, r0
   14240:	movhi	r2, r0
   14244:	str	r2, [ip, #4]
   14248:	mov	r0, #1
   1424c:	b	14210 <__assert_fail@plt+0x2458>
   14250:	bl	119b0 <__stack_chk_fail@plt>
   14254:	andeq	r9, r3, r0, lsl #30
   14258:	ldrdeq	r7, [r2], -r0
   1425c:	andeq	sl, r3, r8, lsr #6
   14260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14264:	sub	sp, sp, #1584	; 0x630
   14268:	ldr	r3, [pc, #512]	; 14470 <__assert_fail@plt+0x26b8>
   1426c:	sub	sp, sp, #4
   14270:	ldr	r1, [pc, #508]	; 14474 <__assert_fail@plt+0x26bc>
   14274:	add	fp, sp, #36	; 0x24
   14278:	ldr	r3, [r3]
   1427c:	add	ip, r1, #8
   14280:	mov	r0, fp
   14284:	str	r1, [sp, #28]
   14288:	str	r3, [sp, #1580]	; 0x62c
   1428c:	ldr	r2, [r1], #4
   14290:	ldrb	r3, [r2]
   14294:	cmp	r3, #0
   14298:	bne	142ac <__assert_fail@plt+0x24f4>
   1429c:	b	14378 <__assert_fail@plt+0x25c0>
   142a0:	cmp	r3, #0
   142a4:	add	r2, r2, #1
   142a8:	beq	14378 <__assert_fail@plt+0x25c0>
   142ac:	cmp	r3, #37	; 0x25
   142b0:	ldrb	r3, [r2, #1]
   142b4:	bne	142a0 <__assert_fail@plt+0x24e8>
   142b8:	cmp	r3, #37	; 0x25
   142bc:	beq	14364 <__assert_fail@plt+0x25ac>
   142c0:	cmp	r3, #98	; 0x62
   142c4:	bne	142a0 <__assert_fail@plt+0x24e8>
   142c8:	cmp	r1, ip
   142cc:	str	r2, [r0], #4
   142d0:	bne	1428c <__assert_fail@plt+0x24d4>
   142d4:	ldr	r3, [sp, #36]	; 0x24
   142d8:	cmp	r3, #0
   142dc:	beq	143a8 <__assert_fail@plt+0x25f0>
   142e0:	ldr	sl, [pc, #400]	; 14478 <__assert_fail@plt+0x26c0>
   142e4:	mov	r9, #12
   142e8:	ldr	r4, [pc, #396]	; 1447c <__assert_fail@plt+0x26c4>
   142ec:	add	r6, sp, #44	; 0x2c
   142f0:	mov	r5, #0
   142f4:	mov	r0, r4
   142f8:	str	r9, [sp, #32]
   142fc:	bl	11cd4 <nl_langinfo@plt>
   14300:	mov	r1, #37	; 0x25
   14304:	mov	r8, r0
   14308:	bl	11bfc <strchr@plt>
   1430c:	subs	r7, r0, #0
   14310:	bne	14388 <__assert_fail@plt+0x25d0>
   14314:	str	r7, [sp, #4]
   14318:	str	r7, [sp]
   1431c:	mov	r0, r8
   14320:	add	r3, sp, #32
   14324:	mov	r2, #128	; 0x80
   14328:	mov	r1, r6
   1432c:	bl	1d88c <__assert_fail@plt+0xbad4>
   14330:	cmp	r0, #127	; 0x7f
   14334:	bhi	14388 <__assert_fail@plt+0x25d0>
   14338:	ldr	r3, [sp, #32]
   1433c:	add	r4, r4, #1
   14340:	cmp	r5, r3
   14344:	movcc	r5, r3
   14348:	cmp	r4, sl
   1434c:	add	r6, r6, #128	; 0x80
   14350:	bne	142f4 <__assert_fail@plt+0x253c>
   14354:	cmp	r9, r5
   14358:	bls	143b8 <__assert_fail@plt+0x2600>
   1435c:	mov	r9, r5
   14360:	b	142e8 <__assert_fail@plt+0x2530>
   14364:	ldrb	r3, [r2, #2]
   14368:	add	r2, r2, #1
   1436c:	add	r2, r2, #1
   14370:	cmp	r3, #0
   14374:	bne	142ac <__assert_fail@plt+0x24f4>
   14378:	mov	r2, r3
   1437c:	b	142c8 <__assert_fail@plt+0x2510>
   14380:	ldr	r3, [pc, #248]	; 14480 <__assert_fail@plt+0x26c8>
   14384:	strb	sl, [r3, #3080]	; 0xc08
   14388:	ldr	r3, [pc, #224]	; 14470 <__assert_fail@plt+0x26b8>
   1438c:	ldr	r2, [sp, #1580]	; 0x62c
   14390:	ldr	r3, [r3]
   14394:	cmp	r2, r3
   14398:	bne	1446c <__assert_fail@plt+0x26b4>
   1439c:	add	sp, sp, #1584	; 0x630
   143a0:	add	sp, sp, #4
   143a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143a8:	ldr	r3, [sp, #40]	; 0x28
   143ac:	cmp	r3, #0
   143b0:	bne	142e0 <__assert_fail@plt+0x2528>
   143b4:	b	14388 <__assert_fail@plt+0x25d0>
   143b8:	add	r3, sp, #44	; 0x2c
   143bc:	ldr	r9, [pc, #192]	; 14484 <__assert_fail@plt+0x26cc>
   143c0:	ldr	r8, [pc, #192]	; 14488 <__assert_fail@plt+0x26d0>
   143c4:	mov	sl, r7
   143c8:	add	r7, r3, #1536	; 0x600
   143cc:	ldr	r3, [sp, #28]
   143d0:	add	r4, sp, #44	; 0x2c
   143d4:	mov	r5, r9
   143d8:	ldr	r6, [r3], #4
   143dc:	str	r3, [sp, #28]
   143e0:	b	14430 <__assert_fail@plt+0x2678>
   143e4:	sub	r2, r3, r6
   143e8:	cmp	r2, #128	; 0x80
   143ec:	bgt	14388 <__assert_fail@plt+0x25d0>
   143f0:	add	r3, r3, #2
   143f4:	str	r3, [sp, #16]
   143f8:	stmib	sp, {r2, r6}
   143fc:	str	r4, [sp, #12]
   14400:	str	r8, [sp]
   14404:	mvn	r3, #0
   14408:	mov	r2, #1
   1440c:	mov	r1, #128	; 0x80
   14410:	mov	r0, r5
   14414:	bl	11da0 <__snprintf_chk@plt>
   14418:	cmp	r0, #127	; 0x7f
   1441c:	bhi	14388 <__assert_fail@plt+0x25d0>
   14420:	add	r4, r4, #128	; 0x80
   14424:	cmp	r4, r7
   14428:	add	r5, r5, #128	; 0x80
   1442c:	beq	14454 <__assert_fail@plt+0x269c>
   14430:	ldr	r3, [fp]
   14434:	cmp	r3, #0
   14438:	bne	143e4 <__assert_fail@plt+0x262c>
   1443c:	mov	r3, r6
   14440:	ldr	r2, [pc, #68]	; 1448c <__assert_fail@plt+0x26d4>
   14444:	mov	r1, #128	; 0x80
   14448:	mov	r0, r5
   1444c:	bl	11c2c <snprintf@plt>
   14450:	b	14418 <__assert_fail@plt+0x2660>
   14454:	cmp	sl, #1
   14458:	add	r9, r9, #1536	; 0x600
   1445c:	add	fp, fp, #4
   14460:	beq	14380 <__assert_fail@plt+0x25c8>
   14464:	mov	sl, #1
   14468:	b	143cc <__assert_fail@plt+0x2614>
   1446c:	bl	119b0 <__stack_chk_fail@plt>
   14470:	andeq	r9, r3, r0, lsl #30
   14474:	muleq	r3, r0, r2
   14478:	andeq	r0, r2, sl, lsl r0
   1447c:	andeq	r0, r2, lr
   14480:	andeq	sl, r3, r8, lsr #6
   14484:	andeq	sl, r3, r0, lsr r3
   14488:	andeq	r6, r2, r0, lsl #11
   1448c:	andeq	r8, r2, r4, lsr #12
   14490:	push	{r4, r5, r6, r7, r8, lr}
   14494:	mov	r5, r0
   14498:	mov	r0, #16
   1449c:	mov	r6, r1
   144a0:	mov	r7, r2
   144a4:	bl	221c0 <__assert_fail@plt+0x10408>
   144a8:	cmp	r6, #0
   144ac:	mov	r4, r0
   144b0:	beq	144c0 <__assert_fail@plt+0x2708>
   144b4:	mov	r0, r6
   144b8:	bl	223ec <__assert_fail@plt+0x10634>
   144bc:	mov	r6, r0
   144c0:	cmp	r5, #0
   144c4:	str	r6, [r4, #4]
   144c8:	beq	144d8 <__assert_fail@plt+0x2720>
   144cc:	mov	r0, r5
   144d0:	bl	223ec <__assert_fail@plt+0x10634>
   144d4:	mov	r5, r0
   144d8:	ldr	r3, [pc, #20]	; 144f4 <__assert_fail@plt+0x273c>
   144dc:	str	r5, [r4]
   144e0:	strb	r7, [r4, #8]
   144e4:	ldr	r2, [r3, #3084]	; 0xc0c
   144e8:	str	r4, [r3, #3084]	; 0xc0c
   144ec:	str	r2, [r4, #12]
   144f0:	pop	{r4, r5, r6, r7, r8, pc}
   144f4:	andeq	sl, r3, r8, lsr #6
   144f8:	ldr	r1, [r1]
   144fc:	ldr	r0, [r0]
   14500:	b	118d8 <strcmp@plt>
   14504:	ldr	r3, [r1]
   14508:	ldr	r1, [r0]
   1450c:	mov	r0, r3
   14510:	b	118d8 <strcmp@plt>
   14514:	push	{r4, lr}
   14518:	mov	r4, r0
   1451c:	ldr	r0, [r0]
   14520:	bl	11938 <free@plt>
   14524:	ldr	r0, [r4, #4]
   14528:	bl	11938 <free@plt>
   1452c:	ldr	r0, [r4, #8]
   14530:	bl	11938 <free@plt>
   14534:	ldr	r0, [r4, #128]	; 0x80
   14538:	ldr	r3, [pc, #12]	; 1454c <__assert_fail@plt+0x2794>
   1453c:	cmp	r0, r3
   14540:	popeq	{r4, pc}
   14544:	pop	{r4, lr}
   14548:	b	11d1c <freecon@plt>
   1454c:	muleq	r3, r8, r2
   14550:	push	{r4, r5, r6, lr}
   14554:	ldr	r5, [pc, #100]	; 145c0 <__assert_fail@plt+0x2808>
   14558:	ldr	r3, [r5, #3088]	; 0xc10
   1455c:	cmp	r3, #0
   14560:	beq	14584 <__assert_fail@plt+0x27cc>
   14564:	mov	r4, #0
   14568:	ldr	r3, [r5, #3092]	; 0xc14
   1456c:	ldr	r0, [r3, r4, lsl #2]
   14570:	bl	14514 <__assert_fail@plt+0x275c>
   14574:	ldr	r3, [r5, #3088]	; 0xc10
   14578:	add	r4, r4, #1
   1457c:	cmp	r3, r4
   14580:	bhi	14568 <__assert_fail@plt+0x27b0>
   14584:	mov	r3, #0
   14588:	str	r3, [r5, #3088]	; 0xc10
   1458c:	strb	r3, [r5, #3096]	; 0xc18
   14590:	strb	r3, [r5, #3097]	; 0xc19
   14594:	str	r3, [r5, #3100]	; 0xc1c
   14598:	str	r3, [r5, #3104]	; 0xc20
   1459c:	str	r3, [r5, #3108]	; 0xc24
   145a0:	str	r3, [r5, #3112]	; 0xc28
   145a4:	str	r3, [r5, #3116]	; 0xc2c
   145a8:	str	r3, [r5, #3120]	; 0xc30
   145ac:	str	r3, [r5, #3124]	; 0xc34
   145b0:	str	r3, [r5, #3128]	; 0xc38
   145b4:	str	r3, [r5, #3132]	; 0xc3c
   145b8:	str	r3, [r5, #3136]	; 0xc40
   145bc:	pop	{r4, r5, r6, pc}
   145c0:	andeq	sl, r3, r8, lsr #6
   145c4:	ldr	r3, [pc, #116]	; 14640 <__assert_fail@plt+0x2888>
   145c8:	push	{r4, r5, r6, lr}
   145cc:	sub	sp, sp, #16
   145d0:	ldr	r6, [pc, #108]	; 14644 <__assert_fail@plt+0x288c>
   145d4:	ldr	r3, [r3, #3140]	; 0xc44
   145d8:	mov	r5, r0
   145dc:	ldr	ip, [r6]
   145e0:	mov	r2, r0
   145e4:	str	r3, [sp]
   145e8:	mov	r1, #2
   145ec:	mvn	r3, #0
   145f0:	add	r0, sp, #8
   145f4:	str	ip, [sp, #12]
   145f8:	bl	21530 <__assert_fail@plt+0xf778>
   145fc:	ldrb	r2, [r5]
   14600:	ldrb	r3, [sp, #8]
   14604:	cmp	r2, r3
   14608:	movne	r0, #1
   1460c:	bne	14624 <__assert_fail@plt+0x286c>
   14610:	mov	r4, r0
   14614:	mov	r0, r5
   14618:	bl	11bf0 <strlen@plt>
   1461c:	subs	r0, r0, r4
   14620:	movne	r0, #1
   14624:	ldr	r2, [sp, #12]
   14628:	ldr	r3, [r6]
   1462c:	cmp	r2, r3
   14630:	bne	1463c <__assert_fail@plt+0x2884>
   14634:	add	sp, sp, #16
   14638:	pop	{r4, r5, r6, pc}
   1463c:	bl	119b0 <__stack_chk_fail@plt>
   14640:	andeq	sl, r3, r8, lsr #6
   14644:	andeq	r9, r3, r0, lsl #30
   14648:	push	{r4, r5, r6, r7, r8, r9, lr}
   1464c:	sub	sp, sp, #12
   14650:	mov	r6, r1
   14654:	mov	r5, r0
   14658:	bl	11bf0 <strlen@plt>
   1465c:	mov	r2, #3
   14660:	add	r0, r0, #1
   14664:	umull	r8, r9, r0, r2
   14668:	adds	r3, r9, #0
   1466c:	movne	r3, #1
   14670:	cmp	r8, #0
   14674:	blt	14710 <__assert_fail@plt+0x2958>
   14678:	cmp	r3, #0
   1467c:	bne	14710 <__assert_fail@plt+0x2958>
   14680:	add	r0, r0, r0, lsl #1
   14684:	bl	221c0 <__assert_fail@plt+0x10408>
   14688:	ldr	r7, [pc, #132]	; 14714 <__assert_fail@plt+0x295c>
   1468c:	ldr	r8, [pc, #132]	; 14718 <__assert_fail@plt+0x2960>
   14690:	sub	r5, r5, #1
   14694:	mov	r9, r0
   14698:	mov	r4, r0
   1469c:	ldrb	r3, [r5, #1]!
   146a0:	cmp	r3, #0
   146a4:	beq	14700 <__assert_fail@plt+0x2948>
   146a8:	cmp	r3, #47	; 0x2f
   146ac:	movne	r2, #0
   146b0:	andeq	r2, r6, #1
   146b4:	cmp	r2, #0
   146b8:	movne	r3, #47	; 0x2f
   146bc:	strbne	r3, [r4], #1
   146c0:	bne	1469c <__assert_fail@plt+0x28e4>
   146c4:	add	r2, r7, r3
   146c8:	ldrb	r2, [r2, #3144]	; 0xc48
   146cc:	cmp	r2, #0
   146d0:	strbne	r3, [r4], #1
   146d4:	bne	1469c <__assert_fail@plt+0x28e4>
   146d8:	str	r3, [sp]
   146dc:	mov	r0, r4
   146e0:	mov	r3, r8
   146e4:	mvn	r2, #0
   146e8:	mov	r1, #1
   146ec:	bl	11c20 <__sprintf_chk@plt>
   146f0:	ldrb	r3, [r5, #1]!
   146f4:	add	r4, r4, #3
   146f8:	cmp	r3, #0
   146fc:	bne	146a8 <__assert_fail@plt+0x28f0>
   14700:	mov	r0, r9
   14704:	strb	r3, [r4]
   14708:	add	sp, sp, #12
   1470c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14710:	bl	22408 <__assert_fail@plt+0x10650>
   14714:	andeq	sl, r3, r8, lsr #6
   14718:	andeq	r6, r2, ip, lsl #11
   1471c:	push	{r4, r5, r6, lr}
   14720:	ldr	r5, [pc, #316]	; 14864 <__assert_fail@plt+0x2aac>
   14724:	ldr	r4, [r5, #3088]	; 0xc10
   14728:	ldr	r3, [r5, #3400]	; 0xd48
   1472c:	add	r2, r4, r4, lsr #1
   14730:	cmp	r2, r3
   14734:	bhi	14810 <__assert_fail@plt+0x2a58>
   14738:	cmp	r4, #0
   1473c:	beq	14760 <__assert_fail@plt+0x29a8>
   14740:	ldr	r2, [pc, #284]	; 14864 <__assert_fail@plt+0x2aac>
   14744:	ldr	r3, [r2, #3092]	; 0xc14
   14748:	ldr	r2, [r2, #3408]	; 0xd50
   1474c:	add	r0, r3, r4, lsl #2
   14750:	str	r2, [r3], #4
   14754:	cmp	r0, r3
   14758:	add	r2, r2, #152	; 0x98
   1475c:	bne	14750 <__assert_fail@plt+0x2998>
   14760:	ldr	r0, [pc, #252]	; 14864 <__assert_fail@plt+0x2aac>
   14764:	ldr	r3, [r0, #3404]	; 0xd4c
   14768:	cmn	r3, #1
   1476c:	popeq	{r4, r5, r6, pc}
   14770:	add	r0, r0, #3408	; 0xd50
   14774:	add	r0, r0, #8
   14778:	bl	11920 <_setjmp@plt>
   1477c:	ldr	r2, [pc, #224]	; 14864 <__assert_fail@plt+0x2aac>
   14780:	ldr	ip, [r2, #3404]	; 0xd4c
   14784:	subs	r3, r0, #0
   14788:	beq	14804 <__assert_fail@plt+0x2a4c>
   1478c:	cmp	ip, #3
   14790:	beq	14850 <__assert_fail@plt+0x2a98>
   14794:	ldr	r1, [r2, #3088]	; 0xc10
   14798:	ldr	r0, [r2, #3092]	; 0xc14
   1479c:	cmp	r1, #0
   147a0:	beq	147c0 <__assert_fail@plt+0x2a08>
   147a4:	ldr	r2, [r2, #3408]	; 0xd50
   147a8:	mov	r3, r0
   147ac:	add	lr, r0, r1, lsl #2
   147b0:	str	r2, [r3], #4
   147b4:	cmp	r3, lr
   147b8:	add	r2, r2, #152	; 0x98
   147bc:	bne	147b0 <__assert_fail@plt+0x29f8>
   147c0:	mov	r3, #1
   147c4:	cmp	ip, #4
   147c8:	ldr	lr, [pc, #148]	; 14864 <__assert_fail@plt+0x2aac>
   147cc:	ldreq	r2, [pc, #144]	; 14864 <__assert_fail@plt+0x2aac>
   147d0:	movne	r2, #0
   147d4:	ldrb	r4, [lr, #3812]	; 0xee4
   147d8:	ldreq	r2, [r2, #3808]	; 0xee0
   147dc:	ldrb	lr, [lr, #3813]	; 0xee5
   147e0:	add	ip, ip, r2
   147e4:	ldr	r2, [pc, #124]	; 14868 <__assert_fail@plt+0x2ab0>
   147e8:	add	ip, r3, ip, lsl #1
   147ec:	add	ip, r4, ip, lsl #1
   147f0:	add	ip, lr, ip, lsl #1
   147f4:	add	r2, r2, ip, lsl #2
   147f8:	ldr	r2, [r2, #12]
   147fc:	bl	1e050 <__assert_fail@plt+0xc298>
   14800:	pop	{r4, r5, r6, pc}
   14804:	ldr	r1, [r2, #3088]	; 0xc10
   14808:	ldr	r0, [r2, #3092]	; 0xc14
   1480c:	b	147c4 <__assert_fail@plt+0x2a0c>
   14810:	ldr	r0, [r5, #3092]	; 0xc14
   14814:	bl	11938 <free@plt>
   14818:	mov	r2, #12
   1481c:	umull	r2, r3, r4, r2
   14820:	cmp	r2, #0
   14824:	cmpge	r3, #0
   14828:	bne	1484c <__assert_fail@plt+0x2a94>
   1482c:	add	r4, r4, r4, lsl #1
   14830:	lsl	r0, r4, #2
   14834:	bl	221c0 <__assert_fail@plt+0x10408>
   14838:	ldr	r4, [r5, #3088]	; 0xc10
   1483c:	add	r3, r4, r4, lsl #1
   14840:	str	r3, [r5, #3400]	; 0xd48
   14844:	str	r0, [r5, #3092]	; 0xc14
   14848:	b	14738 <__assert_fail@plt+0x2980>
   1484c:	bl	22408 <__assert_fail@plt+0x10650>
   14850:	ldr	r3, [pc, #16]	; 14868 <__assert_fail@plt+0x2ab0>
   14854:	ldr	r2, [pc, #16]	; 1486c <__assert_fail@plt+0x2ab4>
   14858:	ldr	r1, [pc, #16]	; 14870 <__assert_fail@plt+0x2ab8>
   1485c:	ldr	r0, [pc, #16]	; 14874 <__assert_fail@plt+0x2abc>
   14860:	bl	11db8 <__assert_fail@plt>
   14864:	andeq	sl, r3, r8, lsr #6
   14868:	andeq	r4, r2, r0, lsl pc
   1486c:	andeq	r0, r0, r8, ror #29
   14870:	muleq	r2, r4, r5
   14874:	andeq	r6, r2, r0, lsr #11
   14878:	push	{r4, r5, r6, lr}
   1487c:	mov	r4, r0
   14880:	mov	r5, r1
   14884:	bl	11c14 <__errno_location@plt>
   14888:	mov	r2, #0
   1488c:	mov	r1, r5
   14890:	mov	r3, r0
   14894:	mov	r0, r4
   14898:	str	r2, [r3]
   1489c:	pop	{r4, r5, r6, lr}
   148a0:	b	11b0c <strcoll@plt>
   148a4:	ldr	r1, [r1]
   148a8:	ldr	r0, [r0]
   148ac:	b	14878 <__assert_fail@plt+0x2ac0>
   148b0:	ldr	r3, [r1]
   148b4:	ldr	r1, [r0]
   148b8:	mov	r0, r3
   148bc:	b	14878 <__assert_fail@plt+0x2ac0>
   148c0:	ldr	r3, [r1]
   148c4:	ldr	r1, [r0]
   148c8:	mov	r0, r3
   148cc:	b	1b204 <__assert_fail@plt+0x944c>
   148d0:	ldr	r1, [r1]
   148d4:	ldr	r0, [r0]
   148d8:	b	1b204 <__assert_fail@plt+0x944c>
   148dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148e0:	subs	r8, r0, #0
   148e4:	ldr	r6, [pc, #304]	; 14a1c <__assert_fail@plt+0x2c64>
   148e8:	mov	r9, r1
   148ec:	beq	1490c <__assert_fail@plt+0x2b54>
   148f0:	ldr	r3, [r6, #3816]	; 0xee8
   148f4:	cmp	r3, #0
   148f8:	beq	1490c <__assert_fail@plt+0x2b54>
   148fc:	mov	r2, #0
   14900:	mov	r0, r2
   14904:	mov	r1, r8
   14908:	bl	14490 <__assert_fail@plt+0x26d8>
   1490c:	ldr	r4, [r6, #3088]	; 0xc10
   14910:	subs	r4, r4, #1
   14914:	bcc	149a0 <__assert_fail@plt+0x2be8>
   14918:	ldr	r3, [r6, #3092]	; 0xc14
   1491c:	ldr	r5, [r3, r4, lsl #2]
   14920:	ldr	r3, [r5, #120]	; 0x78
   14924:	cmp	r3, #9
   14928:	cmpne	r3, #3
   1492c:	bne	14910 <__assert_fail@plt+0x2b58>
   14930:	cmp	r8, #0
   14934:	ldr	r7, [r5]
   14938:	beq	149e4 <__assert_fail@plt+0x2c2c>
   1493c:	mov	r0, r7
   14940:	bl	1acc8 <__assert_fail@plt+0x8f10>
   14944:	ldrb	r3, [r0]
   14948:	cmp	r3, #46	; 0x2e
   1494c:	beq	149f8 <__assert_fail@plt+0x2c40>
   14950:	ldrb	r3, [r7]
   14954:	mov	r1, r7
   14958:	mov	r2, #0
   1495c:	cmp	r3, #47	; 0x2f
   14960:	mov	r0, r8
   14964:	beq	149e4 <__assert_fail@plt+0x2c2c>
   14968:	bl	1b04c <__assert_fail@plt+0x9294>
   1496c:	mov	r2, r9
   14970:	ldr	r1, [r5, #4]
   14974:	mov	r7, r0
   14978:	bl	14490 <__assert_fail@plt+0x26d8>
   1497c:	mov	r0, r7
   14980:	bl	11938 <free@plt>
   14984:	ldr	r3, [r5, #120]	; 0x78
   14988:	cmp	r3, #9
   1498c:	bne	14910 <__assert_fail@plt+0x2b58>
   14990:	mov	r0, r5
   14994:	bl	14514 <__assert_fail@plt+0x275c>
   14998:	subs	r4, r4, #1
   1499c:	bcs	14918 <__assert_fail@plt+0x2b60>
   149a0:	ldr	r3, [r6, #3088]	; 0xc10
   149a4:	cmp	r3, #0
   149a8:	beq	149dc <__assert_fail@plt+0x2c24>
   149ac:	ldr	r0, [r6, #3092]	; 0xc14
   149b0:	add	r3, r0, r3, lsl #2
   149b4:	sub	ip, r3, #4
   149b8:	sub	r2, r0, #4
   149bc:	mov	r3, #0
   149c0:	ldr	r1, [r2, #4]!
   149c4:	str	r1, [r0, r3, lsl #2]
   149c8:	ldr	r1, [r1, #120]	; 0x78
   149cc:	cmp	r1, #9
   149d0:	addne	r3, r3, #1
   149d4:	cmp	ip, r2
   149d8:	bne	149c0 <__assert_fail@plt+0x2c08>
   149dc:	str	r3, [r6, #3088]	; 0xc10
   149e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149e4:	mov	r0, r7
   149e8:	mov	r2, r9
   149ec:	ldr	r1, [r5, #4]
   149f0:	bl	14490 <__assert_fail@plt+0x26d8>
   149f4:	b	14984 <__assert_fail@plt+0x2bcc>
   149f8:	ldrb	r3, [r0, #1]
   149fc:	cmp	r3, #46	; 0x2e
   14a00:	moveq	r3, #2
   14a04:	movne	r3, #1
   14a08:	ldrb	r3, [r0, r3]
   14a0c:	cmp	r3, #47	; 0x2f
   14a10:	cmpne	r3, #0
   14a14:	beq	14910 <__assert_fail@plt+0x2b58>
   14a18:	b	14950 <__assert_fail@plt+0x2b98>
   14a1c:	andeq	sl, r3, r8, lsr #6
   14a20:	cmp	r0, r1
   14a24:	bxcs	lr
   14a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a2c:	mov	r4, r0
   14a30:	sub	sp, sp, #12
   14a34:	mov	fp, r1
   14a38:	ldr	sl, [pc, #204]	; 14b0c <__assert_fail@plt+0x2d54>
   14a3c:	b	14a9c <__assert_fail@plt+0x2ce4>
   14a40:	mov	r1, r7
   14a44:	mov	r0, fp
   14a48:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   14a4c:	mov	r1, r7
   14a50:	str	r0, [sp, #4]
   14a54:	mov	r0, r8
   14a58:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   14a5c:	ldr	r3, [sp, #4]
   14a60:	cmp	r3, r0
   14a64:	bls	14abc <__assert_fail@plt+0x2d04>
   14a68:	cmp	r6, r9
   14a6c:	addcc	r3, r6, #1
   14a70:	strcc	r3, [r5, #20]
   14a74:	movcc	r3, #9
   14a78:	strbcc	r3, [r6]
   14a7c:	bcs	14af8 <__assert_fail@plt+0x2d40>
   14a80:	mov	r0, r4
   14a84:	mov	r1, r7
   14a88:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   14a8c:	add	r4, r4, r7
   14a90:	sub	r4, r4, r1
   14a94:	cmp	r4, fp
   14a98:	bcs	14ae0 <__assert_fail@plt+0x2d28>
   14a9c:	ldr	r3, [pc, #108]	; 14b10 <__assert_fail@plt+0x2d58>
   14aa0:	ldr	r7, [sl, #3820]	; 0xeec
   14aa4:	add	r8, r4, #1
   14aa8:	ldr	r5, [r3]
   14aac:	cmp	r7, #0
   14ab0:	ldr	r6, [r5, #20]
   14ab4:	ldr	r9, [r5, #24]
   14ab8:	bne	14a40 <__assert_fail@plt+0x2c88>
   14abc:	cmp	r6, r9
   14ac0:	addcc	r3, r6, #1
   14ac4:	strcc	r3, [r5, #20]
   14ac8:	movcc	r3, #32
   14acc:	strbcc	r3, [r6]
   14ad0:	bcs	14ae8 <__assert_fail@plt+0x2d30>
   14ad4:	mov	r4, r8
   14ad8:	cmp	r4, fp
   14adc:	bcc	14a9c <__assert_fail@plt+0x2ce4>
   14ae0:	add	sp, sp, #12
   14ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae8:	mov	r0, r5
   14aec:	mov	r1, #32
   14af0:	bl	11c98 <__overflow@plt>
   14af4:	b	14ad4 <__assert_fail@plt+0x2d1c>
   14af8:	mov	r0, r5
   14afc:	mov	r1, #9
   14b00:	bl	11c98 <__overflow@plt>
   14b04:	ldr	r7, [sl, #3820]	; 0xeec
   14b08:	b	14a80 <__assert_fail@plt+0x2cc8>
   14b0c:	andeq	sl, r3, r8, lsr #6
   14b10:	andeq	sl, r3, ip, lsl r3
   14b14:	push	{r4, r5, r6, r7, r8, lr}
   14b18:	ldr	r3, [r1, #12]
   14b1c:	ldr	r4, [r1, #8]
   14b20:	sub	r5, r3, r4
   14b24:	cmp	r5, #3
   14b28:	popls	{r4, r5, r6, r7, r8, pc}
   14b2c:	cmp	r3, r4
   14b30:	ldr	lr, [r1, #24]
   14b34:	ldrbeq	r2, [r1, #40]	; 0x28
   14b38:	ldr	ip, [r1, #16]
   14b3c:	add	r3, r3, lr
   14b40:	orreq	r2, r2, #2
   14b44:	strbeq	r2, [r1, #40]	; 0x28
   14b48:	ldr	r2, [r1, #4]
   14b4c:	bic	r3, r3, lr
   14b50:	sub	lr, r3, r2
   14b54:	ldr	r6, [pc, #116]	; 14bd0 <__assert_fail@plt+0x2e18>
   14b58:	sub	r2, ip, r2
   14b5c:	cmp	lr, r2
   14b60:	movhi	r3, ip
   14b64:	str	r3, [r1, #12]
   14b68:	str	r3, [r1, #8]
   14b6c:	ldr	r1, [r6]
   14b70:	bl	118a8 <fputs_unlocked@plt>
   14b74:	sub	r4, r4, #4
   14b78:	bic	r5, r5, #3
   14b7c:	ldr	r7, [pc, #80]	; 14bd4 <__assert_fail@plt+0x2e1c>
   14b80:	add	r5, r5, r4
   14b84:	ldr	r2, [r4, #4]!
   14b88:	mov	r1, r7
   14b8c:	mov	r0, #1
   14b90:	bl	11c50 <__printf_chk@plt>
   14b94:	cmp	r5, r4
   14b98:	bne	14b84 <__assert_fail@plt+0x2dcc>
   14b9c:	ldr	r0, [r6]
   14ba0:	ldr	r3, [r0, #20]
   14ba4:	ldr	r2, [r0, #24]
   14ba8:	cmp	r3, r2
   14bac:	bcs	14bc4 <__assert_fail@plt+0x2e0c>
   14bb0:	add	r1, r3, #1
   14bb4:	mov	r2, #10
   14bb8:	str	r1, [r0, #20]
   14bbc:	strb	r2, [r3]
   14bc0:	pop	{r4, r5, r6, r7, r8, pc}
   14bc4:	mov	r1, #10
   14bc8:	pop	{r4, r5, r6, r7, r8, lr}
   14bcc:	b	11c98 <__overflow@plt>
   14bd0:	andeq	sl, r3, ip, lsl r3
   14bd4:			; <UNDEFINED> instruction: 0x000265bc
   14bd8:	push	{r4, r5, r6, r7, r8, lr}
   14bdc:	subs	r7, r0, #0
   14be0:	mov	r4, r2
   14be4:	beq	14c64 <__assert_fail@plt+0x2eac>
   14be8:	mov	r1, #0
   14bec:	bl	1de50 <__assert_fail@plt+0xc098>
   14bf0:	ldr	r5, [pc, #132]	; 14c7c <__assert_fail@plt+0x2ec4>
   14bf4:	mov	r6, #32
   14bf8:	ldr	r1, [r5]
   14bfc:	sub	r4, r4, r0
   14c00:	mov	r0, r7
   14c04:	bl	118a8 <fputs_unlocked@plt>
   14c08:	mov	r0, r7
   14c0c:	bl	11bf0 <strlen@plt>
   14c10:	bic	r4, r4, r4, asr #31
   14c14:	add	r7, r4, r0
   14c18:	ldr	r0, [r5]
   14c1c:	ldr	r3, [r0, #20]
   14c20:	ldr	r2, [r0, #24]
   14c24:	add	r1, r3, #1
   14c28:	cmp	r3, r2
   14c2c:	strcc	r1, [r0, #20]
   14c30:	strbcc	r6, [r3]
   14c34:	bcs	14c58 <__assert_fail@plt+0x2ea0>
   14c38:	subs	r4, r4, #1
   14c3c:	bcs	14c18 <__assert_fail@plt+0x2e60>
   14c40:	ldr	r2, [pc, #56]	; 14c80 <__assert_fail@plt+0x2ec8>
   14c44:	ldr	r3, [r2, #3824]	; 0xef0
   14c48:	add	r3, r3, #1
   14c4c:	add	r4, r3, r7
   14c50:	str	r4, [r2, #3824]	; 0xef0
   14c54:	pop	{r4, r5, r6, r7, r8, pc}
   14c58:	mov	r1, #32
   14c5c:	bl	11c98 <__overflow@plt>
   14c60:	b	14c38 <__assert_fail@plt+0x2e80>
   14c64:	mov	r3, r1
   14c68:	mov	r0, #1
   14c6c:	ldr	r1, [pc, #16]	; 14c84 <__assert_fail@plt+0x2ecc>
   14c70:	bl	11c50 <__printf_chk@plt>
   14c74:	mov	r7, r4
   14c78:	b	14c40 <__assert_fail@plt+0x2e88>
   14c7c:	andeq	sl, r3, ip, lsl r3
   14c80:	andeq	sl, r3, r8, lsr #6
   14c84:	andeq	r6, r2, r4, asr #11
   14c88:	cmp	r2, #0
   14c8c:	mov	r2, r1
   14c90:	mov	r1, r0
   14c94:	beq	14cb0 <__assert_fail@plt+0x2ef8>
   14c98:	ldr	r3, [pc, #56]	; 14cd8 <__assert_fail@plt+0x2f20>
   14c9c:	ldrb	r3, [r3, #3828]	; 0xef4
   14ca0:	cmp	r3, #0
   14ca4:	movne	r0, #0
   14ca8:	beq	14cb8 <__assert_fail@plt+0x2f00>
   14cac:	b	14bd8 <__assert_fail@plt+0x2e20>
   14cb0:	ldr	r0, [pc, #36]	; 14cdc <__assert_fail@plt+0x2f24>
   14cb4:	b	14bd8 <__assert_fail@plt+0x2e20>
   14cb8:	push	{lr}		; (str lr, [sp, #-4]!)
   14cbc:	sub	sp, sp, #12
   14cc0:	stm	sp, {r1, r2}
   14cc4:	bl	1d418 <__assert_fail@plt+0xb660>
   14cc8:	ldm	sp, {r1, r2}
   14ccc:	add	sp, sp, #12
   14cd0:	pop	{lr}		; (ldr lr, [sp], #4)
   14cd4:	b	14bd8 <__assert_fail@plt+0x2e20>
   14cd8:	andeq	sl, r3, r8, lsr #6
   14cdc:	andeq	r6, r2, ip, asr #11
   14ce0:	ldr	r3, [pc, #20]	; 14cfc <__assert_fail@plt+0x2f44>
   14ce4:	ldr	r2, [r3]
   14ce8:	cmp	r2, #0
   14cec:	ldreq	r2, [r3, #3832]	; 0xef8
   14cf0:	addeq	r2, r2, #1
   14cf4:	streq	r2, [r3, #3832]	; 0xef8
   14cf8:	bx	lr
   14cfc:	andeq	sl, r3, r8, lsr #6
   14d00:	push	{r4, r5, r6, lr}
   14d04:	mov	r5, r2
   14d08:	mov	r6, r1
   14d0c:	mov	r4, r0
   14d10:	bl	11c14 <__errno_location@plt>
   14d14:	mov	r1, r5
   14d18:	ldr	r5, [r0]
   14d1c:	mov	r0, #4
   14d20:	bl	2181c <__assert_fail@plt+0xfa64>
   14d24:	mov	r2, r6
   14d28:	mov	r1, r5
   14d2c:	mov	r3, r0
   14d30:	mov	r0, #0
   14d34:	bl	11adc <error@plt>
   14d38:	cmp	r4, #0
   14d3c:	ldr	r3, [pc, #32]	; 14d64 <__assert_fail@plt+0x2fac>
   14d40:	beq	14d50 <__assert_fail@plt+0x2f98>
   14d44:	mov	r2, #2
   14d48:	str	r2, [r3, #3836]	; 0xefc
   14d4c:	pop	{r4, r5, r6, pc}
   14d50:	ldr	r2, [r3, #3836]	; 0xefc
   14d54:	cmp	r2, #0
   14d58:	moveq	r2, #1
   14d5c:	streq	r2, [r3, #3836]	; 0xefc
   14d60:	pop	{r4, r5, r6, pc}
   14d64:	andeq	sl, r3, r8, lsr #6
   14d68:	ldr	r2, [r1, #120]	; 0x78
   14d6c:	ldr	r3, [r0, #120]	; 0x78
   14d70:	cmp	r2, #9
   14d74:	cmpne	r2, #3
   14d78:	moveq	r2, #1
   14d7c:	movne	r2, #0
   14d80:	cmp	r3, #9
   14d84:	cmpne	r3, #3
   14d88:	eor	ip, r2, #1
   14d8c:	moveq	r3, #1
   14d90:	movne	r3, #0
   14d94:	tst	r3, ip
   14d98:	bne	14dbc <__assert_fail@plt+0x3004>
   14d9c:	eor	r3, r3, #1
   14da0:	tst	r2, r3
   14da4:	beq	14db0 <__assert_fail@plt+0x2ff8>
   14da8:	mov	r0, #1
   14dac:	bx	lr
   14db0:	ldr	r1, [r1]
   14db4:	ldr	r0, [r0]
   14db8:	b	14878 <__assert_fail@plt+0x2ac0>
   14dbc:	mvn	r0, #0
   14dc0:	bx	lr
   14dc4:	ldr	r2, [r1, #120]	; 0x78
   14dc8:	ldr	r3, [r0, #120]	; 0x78
   14dcc:	cmp	r2, #9
   14dd0:	cmpne	r2, #3
   14dd4:	moveq	r2, #1
   14dd8:	movne	r2, #0
   14ddc:	cmp	r3, #9
   14de0:	cmpne	r3, #3
   14de4:	eor	ip, r2, #1
   14de8:	moveq	r3, #1
   14dec:	movne	r3, #0
   14df0:	tst	r3, ip
   14df4:	bne	14e18 <__assert_fail@plt+0x3060>
   14df8:	eor	r3, r3, #1
   14dfc:	tst	r2, r3
   14e00:	bne	14e10 <__assert_fail@plt+0x3058>
   14e04:	ldr	r1, [r1]
   14e08:	ldr	r0, [r0]
   14e0c:	b	118d8 <strcmp@plt>
   14e10:	mov	r0, #1
   14e14:	bx	lr
   14e18:	mvn	r0, #0
   14e1c:	bx	lr
   14e20:	ldr	r2, [r1, #120]	; 0x78
   14e24:	ldr	r3, [r0, #120]	; 0x78
   14e28:	cmp	r2, #9
   14e2c:	cmpne	r2, #3
   14e30:	moveq	r2, #1
   14e34:	movne	r2, #0
   14e38:	cmp	r3, #9
   14e3c:	cmpne	r3, #3
   14e40:	mov	ip, r1
   14e44:	moveq	r3, #1
   14e48:	eor	r1, r2, #1
   14e4c:	movne	r3, #0
   14e50:	tst	r3, r1
   14e54:	bne	14e78 <__assert_fail@plt+0x30c0>
   14e58:	eor	r3, r3, #1
   14e5c:	tst	r2, r3
   14e60:	beq	14e6c <__assert_fail@plt+0x30b4>
   14e64:	mov	r0, #1
   14e68:	bx	lr
   14e6c:	ldr	r1, [r0]
   14e70:	ldr	r0, [ip]
   14e74:	b	14878 <__assert_fail@plt+0x2ac0>
   14e78:	mvn	r0, #0
   14e7c:	bx	lr
   14e80:	ldr	r2, [r1, #120]	; 0x78
   14e84:	ldr	r3, [r0, #120]	; 0x78
   14e88:	cmp	r2, #9
   14e8c:	cmpne	r2, #3
   14e90:	moveq	r2, #1
   14e94:	movne	r2, #0
   14e98:	cmp	r3, #9
   14e9c:	cmpne	r3, #3
   14ea0:	mov	ip, r1
   14ea4:	moveq	r3, #1
   14ea8:	eor	r1, r2, #1
   14eac:	movne	r3, #0
   14eb0:	tst	r3, r1
   14eb4:	bne	14ed8 <__assert_fail@plt+0x3120>
   14eb8:	eor	r3, r3, #1
   14ebc:	tst	r2, r3
   14ec0:	bne	14ed0 <__assert_fail@plt+0x3118>
   14ec4:	ldr	r1, [r0]
   14ec8:	ldr	r0, [ip]
   14ecc:	b	118d8 <strcmp@plt>
   14ed0:	mov	r0, #1
   14ed4:	bx	lr
   14ed8:	mvn	r0, #0
   14edc:	bx	lr
   14ee0:	cmp	r0, #0
   14ee4:	beq	14f68 <__assert_fail@plt+0x31b0>
   14ee8:	and	r3, r1, #61440	; 0xf000
   14eec:	cmp	r3, #32768	; 0x8000
   14ef0:	beq	14f50 <__assert_fail@plt+0x3198>
   14ef4:	sub	r3, r3, #16384	; 0x4000
   14ef8:	clz	r3, r3
   14efc:	lsr	r3, r3, #5
   14f00:	cmp	r3, #0
   14f04:	bne	14f88 <__assert_fail@plt+0x31d0>
   14f08:	ldr	ip, [pc, #192]	; 14fd0 <__assert_fail@plt+0x3218>
   14f0c:	ldr	ip, [ip, #3840]	; 0xf00
   14f10:	cmp	ip, #1
   14f14:	beq	14f60 <__assert_fail@plt+0x31a8>
   14f18:	cmp	r0, #0
   14f1c:	beq	14f90 <__assert_fail@plt+0x31d8>
   14f20:	and	r1, r1, #61440	; 0xf000
   14f24:	cmp	r1, #40960	; 0xa000
   14f28:	beq	14fc0 <__assert_fail@plt+0x3208>
   14f2c:	cmp	r1, #4096	; 0x1000
   14f30:	beq	14fc8 <__assert_fail@plt+0x3210>
   14f34:	sub	r2, r1, #49152	; 0xc000
   14f38:	clz	r2, r2
   14f3c:	lsr	r2, r2, #5
   14f40:	cmp	r2, #0
   14f44:	moveq	r0, #0
   14f48:	movne	r0, #61	; 0x3d
   14f4c:	bx	lr
   14f50:	ldr	r3, [pc, #120]	; 14fd0 <__assert_fail@plt+0x3218>
   14f54:	ldr	r3, [r3, #3840]	; 0xf00
   14f58:	cmp	r3, #3
   14f5c:	beq	14fb0 <__assert_fail@plt+0x31f8>
   14f60:	mov	r0, #0
   14f64:	bx	lr
   14f68:	cmp	r2, #5
   14f6c:	bxeq	lr
   14f70:	cmp	r2, #9
   14f74:	cmpne	r2, #3
   14f78:	moveq	r3, #1
   14f7c:	movne	r3, #0
   14f80:	cmp	r3, #0
   14f84:	beq	14f08 <__assert_fail@plt+0x3150>
   14f88:	mov	r0, #47	; 0x2f
   14f8c:	bx	lr
   14f90:	cmp	r2, #6
   14f94:	beq	14fc0 <__assert_fail@plt+0x3208>
   14f98:	cmp	r2, #1
   14f9c:	beq	14fc8 <__assert_fail@plt+0x3210>
   14fa0:	sub	r2, r2, #7
   14fa4:	clz	r2, r2
   14fa8:	lsr	r2, r2, #5
   14fac:	b	14f40 <__assert_fail@plt+0x3188>
   14fb0:	tst	r1, #73	; 0x49
   14fb4:	moveq	r0, #0
   14fb8:	movne	r0, #42	; 0x2a
   14fbc:	bx	lr
   14fc0:	mov	r0, #64	; 0x40
   14fc4:	bx	lr
   14fc8:	mov	r0, #124	; 0x7c
   14fcc:	bx	lr
   14fd0:	andeq	sl, r3, r8, lsr #6
   14fd4:	push	{r4, lr}
   14fd8:	bl	14ee0 <__assert_fail@plt+0x3128>
   14fdc:	subs	r4, r0, #0
   14fe0:	beq	15018 <__assert_fail@plt+0x3260>
   14fe4:	ldr	r3, [pc, #68]	; 15030 <__assert_fail@plt+0x3278>
   14fe8:	ldr	r0, [r3]
   14fec:	ldr	r3, [r0, #20]
   14ff0:	ldr	r2, [r0, #24]
   14ff4:	cmp	r3, r2
   14ff8:	addcc	r2, r3, #1
   14ffc:	strcc	r2, [r0, #20]
   15000:	strbcc	r4, [r3]
   15004:	bcs	15024 <__assert_fail@plt+0x326c>
   15008:	ldr	r2, [pc, #36]	; 15034 <__assert_fail@plt+0x327c>
   1500c:	ldr	r3, [r2, #3824]	; 0xef0
   15010:	add	r3, r3, #1
   15014:	str	r3, [r2, #3824]	; 0xef0
   15018:	adds	r0, r4, #0
   1501c:	movne	r0, #1
   15020:	pop	{r4, pc}
   15024:	mov	r1, r4
   15028:	bl	11c98 <__overflow@plt>
   1502c:	b	15008 <__assert_fail@plt+0x3250>
   15030:	andeq	sl, r3, ip, lsl r3
   15034:	andeq	sl, r3, r8, lsr #6
   15038:	ldr	r2, [r1, #120]	; 0x78
   1503c:	ldr	r3, [r0, #120]	; 0x78
   15040:	cmp	r2, #9
   15044:	cmpne	r2, #3
   15048:	moveq	r2, #1
   1504c:	movne	r2, #0
   15050:	cmp	r3, #9
   15054:	cmpne	r3, #3
   15058:	mov	ip, r1
   1505c:	moveq	r3, #1
   15060:	eor	r1, r2, #1
   15064:	movne	r3, #0
   15068:	tst	r3, r1
   1506c:	bne	150b8 <__assert_fail@plt+0x3300>
   15070:	eor	r3, r3, #1
   15074:	tst	r2, r3
   15078:	beq	15088 <__assert_fail@plt+0x32d0>
   1507c:	mov	r3, #1
   15080:	mov	r0, r3
   15084:	bx	lr
   15088:	ldr	r2, [r0, #88]	; 0x58
   1508c:	ldr	r3, [ip, #88]	; 0x58
   15090:	cmp	r2, r3
   15094:	blt	150b8 <__assert_fail@plt+0x3300>
   15098:	bgt	1507c <__assert_fail@plt+0x32c4>
   1509c:	ldr	r3, [r0, #92]	; 0x5c
   150a0:	ldr	r2, [ip, #92]	; 0x5c
   150a4:	subs	r3, r3, r2
   150a8:	bne	15080 <__assert_fail@plt+0x32c8>
   150ac:	ldr	r1, [r0]
   150b0:	ldr	r0, [ip]
   150b4:	b	118d8 <strcmp@plt>
   150b8:	mvn	r3, #0
   150bc:	b	15080 <__assert_fail@plt+0x32c8>
   150c0:	ldr	r2, [r1, #120]	; 0x78
   150c4:	ldr	r3, [r0, #120]	; 0x78
   150c8:	cmp	r2, #3
   150cc:	cmpne	r2, #9
   150d0:	moveq	r2, #1
   150d4:	movne	r2, #0
   150d8:	cmp	r3, #9
   150dc:	cmpne	r3, #3
   150e0:	mov	ip, r1
   150e4:	moveq	r3, #1
   150e8:	eor	r1, r2, #1
   150ec:	movne	r3, #0
   150f0:	tst	r3, r1
   150f4:	bne	15118 <__assert_fail@plt+0x3360>
   150f8:	eor	r3, r3, #1
   150fc:	tst	r2, r3
   15100:	bne	15110 <__assert_fail@plt+0x3358>
   15104:	ldr	r1, [r0]
   15108:	ldr	r0, [ip]
   1510c:	b	1b204 <__assert_fail@plt+0x944c>
   15110:	mov	r0, #1
   15114:	bx	lr
   15118:	mvn	r0, #0
   1511c:	bx	lr
   15120:	ldr	r2, [r1, #120]	; 0x78
   15124:	ldr	r3, [r0, #120]	; 0x78
   15128:	cmp	r2, #3
   1512c:	cmpne	r2, #9
   15130:	moveq	r2, #1
   15134:	movne	r2, #0
   15138:	cmp	r3, #9
   1513c:	cmpne	r3, #3
   15140:	eor	ip, r2, #1
   15144:	moveq	r3, #1
   15148:	movne	r3, #0
   1514c:	tst	r3, ip
   15150:	bne	15174 <__assert_fail@plt+0x33bc>
   15154:	eor	r3, r3, #1
   15158:	tst	r2, r3
   1515c:	bne	1516c <__assert_fail@plt+0x33b4>
   15160:	ldr	r1, [r1]
   15164:	ldr	r0, [r0]
   15168:	b	1b204 <__assert_fail@plt+0x944c>
   1516c:	mov	r0, #1
   15170:	bx	lr
   15174:	mvn	r0, #0
   15178:	bx	lr
   1517c:	ldr	r2, [r1, #120]	; 0x78
   15180:	ldr	r3, [r0, #120]	; 0x78
   15184:	cmp	r2, #9
   15188:	cmpne	r2, #3
   1518c:	moveq	r2, #1
   15190:	movne	r2, #0
   15194:	cmp	r3, #9
   15198:	cmpne	r3, #3
   1519c:	eor	ip, r2, #1
   151a0:	moveq	r3, #1
   151a4:	movne	r3, #0
   151a8:	tst	r3, ip
   151ac:	bne	15238 <__assert_fail@plt+0x3480>
   151b0:	eor	r3, r3, #1
   151b4:	tst	r2, r3
   151b8:	beq	151c4 <__assert_fail@plt+0x340c>
   151bc:	mov	r0, #1
   151c0:	bx	lr
   151c4:	push	{r4, r5, r6, lr}
   151c8:	mov	r4, r0
   151cc:	ldr	r6, [r1]
   151d0:	mov	r1, #46	; 0x2e
   151d4:	mov	r0, r6
   151d8:	bl	11cc8 <strrchr@plt>
   151dc:	ldr	r4, [r4]
   151e0:	mov	r1, #46	; 0x2e
   151e4:	mov	r5, r0
   151e8:	mov	r0, r4
   151ec:	bl	11cc8 <strrchr@plt>
   151f0:	cmp	r5, #0
   151f4:	beq	15228 <__assert_fail@plt+0x3470>
   151f8:	ldr	r3, [pc, #64]	; 15240 <__assert_fail@plt+0x3488>
   151fc:	cmp	r0, #0
   15200:	moveq	r0, r3
   15204:	mov	r1, r0
   15208:	mov	r0, r5
   1520c:	bl	118d8 <strcmp@plt>
   15210:	cmp	r0, #0
   15214:	popne	{r4, r5, r6, pc}
   15218:	mov	r1, r4
   1521c:	mov	r0, r6
   15220:	pop	{r4, r5, r6, lr}
   15224:	b	118d8 <strcmp@plt>
   15228:	cmp	r0, #0
   1522c:	ldrne	r5, [pc, #12]	; 15240 <__assert_fail@plt+0x3488>
   15230:	bne	15204 <__assert_fail@plt+0x344c>
   15234:	b	15218 <__assert_fail@plt+0x3460>
   15238:	mvn	r0, #0
   1523c:	bx	lr
   15240:	ldrdeq	r7, [r2], -r0
   15244:	push	{r4, lr}
   15248:	ldr	r4, [pc, #64]	; 15290 <__assert_fail@plt+0x34d8>
   1524c:	ldr	r3, [r4, #20]
   15250:	cmp	r3, #0
   15254:	beq	15268 <__assert_fail@plt+0x34b0>
   15258:	add	r1, r4, #20
   1525c:	add	r0, r4, #16
   15260:	pop	{r4, lr}
   15264:	b	15294 <__assert_fail@plt+0x34dc>
   15268:	add	r1, r4, #4
   1526c:	mov	r0, r4
   15270:	bl	15294 <__assert_fail@plt+0x34dc>
   15274:	add	r1, r4, #28
   15278:	add	r0, r4, #24
   1527c:	bl	15294 <__assert_fail@plt+0x34dc>
   15280:	add	r1, r4, #12
   15284:	add	r0, r4, #8
   15288:	pop	{r4, lr}
   1528c:	b	15294 <__assert_fail@plt+0x34dc>
   15290:	ldrdeq	sl, [r3], -r0
   15294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15298:	sub	sp, sp, #156	; 0x9c
   1529c:	ldr	r9, [pc, #324]	; 153e8 <__assert_fail@plt+0x3630>
   152a0:	ldr	r6, [pc, #324]	; 153ec <__assert_fail@plt+0x3634>
   152a4:	mov	r8, r0
   152a8:	ldrb	r2, [r9, #3844]	; 0xf04
   152ac:	ldr	r3, [r6]
   152b0:	mov	r7, r1
   152b4:	cmp	r2, #0
   152b8:	str	r3, [sp, #148]	; 0x94
   152bc:	beq	152f0 <__assert_fail@plt+0x3538>
   152c0:	ldr	r3, [pc, #296]	; 153f0 <__assert_fail@plt+0x3638>
   152c4:	mov	r2, #1
   152c8:	ldr	r1, [r8]
   152cc:	ldr	r3, [r3]
   152d0:	ldr	r0, [r7]
   152d4:	bl	1198c <fwrite_unlocked@plt>
   152d8:	ldr	r2, [sp, #148]	; 0x94
   152dc:	ldr	r3, [r6]
   152e0:	cmp	r2, r3
   152e4:	bne	153e4 <__assert_fail@plt+0x362c>
   152e8:	add	sp, sp, #156	; 0x9c
   152ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f0:	mov	r3, #1
   152f4:	mov	r0, r3
   152f8:	strb	r3, [r9, #3844]	; 0xf04
   152fc:	bl	11be4 <tcgetpgrp@plt>
   15300:	cmp	r0, #0
   15304:	bge	15310 <__assert_fail@plt+0x3558>
   15308:	bl	15244 <__assert_fail@plt+0x348c>
   1530c:	b	152c0 <__assert_fail@plt+0x3508>
   15310:	add	r0, r9, #3840	; 0xf00
   15314:	ldr	r5, [pc, #216]	; 153f4 <__assert_fail@plt+0x363c>
   15318:	add	r0, r0, #8
   1531c:	bl	11cb0 <sigemptyset@plt>
   15320:	add	r3, r9, #3840	; 0xf00
   15324:	str	r3, [sp, #4]
   15328:	add	fp, r3, #8
   1532c:	add	sl, r5, #44	; 0x2c
   15330:	mov	r4, r5
   15334:	mov	r9, #20
   15338:	b	15340 <__assert_fail@plt+0x3588>
   1533c:	ldr	r9, [r4, #4]!
   15340:	add	r2, sp, #8
   15344:	mov	r1, #0
   15348:	mov	r0, r9
   1534c:	bl	11a4c <sigaction@plt>
   15350:	ldr	r2, [sp, #8]
   15354:	cmp	r2, #1
   15358:	beq	15368 <__assert_fail@plt+0x35b0>
   1535c:	mov	r1, r9
   15360:	mov	r0, fp
   15364:	bl	11b3c <sigaddset@plt>
   15368:	cmp	sl, r4
   1536c:	bne	1533c <__assert_fail@plt+0x3584>
   15370:	ldr	r3, [sp, #4]
   15374:	mov	r2, #128	; 0x80
   15378:	add	r1, r3, #8
   1537c:	add	r0, sp, #12
   15380:	mov	r9, r1
   15384:	bl	1195c <memcpy@plt>
   15388:	mov	r2, #268435456	; 0x10000000
   1538c:	ldr	fp, [pc, #100]	; 153f8 <__assert_fail@plt+0x3640>
   15390:	mov	sl, #20
   15394:	str	r2, [sp, #140]	; 0x8c
   15398:	b	153a0 <__assert_fail@plt+0x35e8>
   1539c:	ldr	sl, [r5, #4]!
   153a0:	mov	r1, sl
   153a4:	mov	r0, r9
   153a8:	bl	119c8 <sigismember@plt>
   153ac:	cmp	r0, #0
   153b0:	beq	153d4 <__assert_fail@plt+0x361c>
   153b4:	ldr	ip, [pc, #64]	; 153fc <__assert_fail@plt+0x3644>
   153b8:	cmp	sl, #20
   153bc:	moveq	ip, fp
   153c0:	mov	r0, sl
   153c4:	mov	r2, #0
   153c8:	add	r1, sp, #8
   153cc:	str	ip, [sp, #8]
   153d0:	bl	11a4c <sigaction@plt>
   153d4:	cmp	r4, r5
   153d8:	bne	1539c <__assert_fail@plt+0x35e4>
   153dc:	bl	15244 <__assert_fail@plt+0x348c>
   153e0:	b	152c0 <__assert_fail@plt+0x3508>
   153e4:	bl	119b0 <__stack_chk_fail@plt>
   153e8:	andeq	sl, r3, r8, lsr #6
   153ec:	andeq	r9, r3, r0, lsl #30
   153f0:	andeq	sl, r3, ip, lsl r3
   153f4:	strdeq	r4, [r2], -ip
   153f8:	andeq	r4, r1, r0, ror #25
   153fc:	andeq	r3, r1, r8, ror ip
   15400:	push	{r4, lr}
   15404:	ldr	r4, [pc, #24]	; 15424 <__assert_fail@plt+0x366c>
   15408:	add	r1, r4, #4
   1540c:	mov	r0, r4
   15410:	bl	15294 <__assert_fail@plt+0x34dc>
   15414:	add	r1, r4, #12
   15418:	add	r0, r4, #8
   1541c:	pop	{r4, lr}
   15420:	b	15294 <__assert_fail@plt+0x34dc>
   15424:	ldrdeq	sl, [r3], -r0
   15428:	push	{r4, r5, r6, r7, r8, lr}
   1542c:	sub	sp, sp, #136	; 0x88
   15430:	ldr	r8, [pc, #184]	; 154f0 <__assert_fail@plt+0x3738>
   15434:	ldr	r4, [pc, #184]	; 154f4 <__assert_fail@plt+0x373c>
   15438:	ldr	r7, [pc, #184]	; 154f8 <__assert_fail@plt+0x3740>
   1543c:	ldr	r3, [r8]
   15440:	add	r6, r4, #3840	; 0xf00
   15444:	str	r3, [sp, #132]	; 0x84
   15448:	add	r6, r6, #8
   1544c:	b	1549c <__assert_fail@plt+0x36e4>
   15450:	ldr	r0, [r7]
   15454:	bl	11a10 <fflush_unlocked@plt>
   15458:	mov	r1, r6
   1545c:	add	r2, sp, #4
   15460:	mov	r0, #0
   15464:	bl	11914 <sigprocmask@plt>
   15468:	ldr	r5, [r4]
   1546c:	ldr	r1, [r4, #3832]	; 0xef8
   15470:	cmp	r1, #0
   15474:	beq	154c8 <__assert_fail@plt+0x3710>
   15478:	mov	r5, #19
   1547c:	sub	r1, r1, #1
   15480:	str	r1, [r4, #3832]	; 0xef8
   15484:	mov	r0, r5
   15488:	bl	118b4 <raise@plt>
   1548c:	add	r1, sp, #4
   15490:	mov	r2, #0
   15494:	mov	r0, #2
   15498:	bl	11914 <sigprocmask@plt>
   1549c:	ldr	r3, [r4]
   154a0:	cmp	r3, #0
   154a4:	bne	154b4 <__assert_fail@plt+0x36fc>
   154a8:	ldr	r3, [r4, #3832]	; 0xef8
   154ac:	cmp	r3, #0
   154b0:	beq	154d4 <__assert_fail@plt+0x371c>
   154b4:	ldrb	r3, [r4, #3844]	; 0xf04
   154b8:	cmp	r3, #0
   154bc:	beq	15450 <__assert_fail@plt+0x3698>
   154c0:	bl	15400 <__assert_fail@plt+0x3648>
   154c4:	b	15450 <__assert_fail@plt+0x3698>
   154c8:	mov	r0, r5
   154cc:	bl	11980 <signal@plt>
   154d0:	b	15484 <__assert_fail@plt+0x36cc>
   154d4:	ldr	r2, [sp, #132]	; 0x84
   154d8:	ldr	r3, [r8]
   154dc:	cmp	r2, r3
   154e0:	bne	154ec <__assert_fail@plt+0x3734>
   154e4:	add	sp, sp, #136	; 0x88
   154e8:	pop	{r4, r5, r6, r7, r8, pc}
   154ec:	bl	119b0 <__stack_chk_fail@plt>
   154f0:	andeq	r9, r3, r0, lsl #30
   154f4:	andeq	sl, r3, r8, lsr #6
   154f8:	andeq	sl, r3, ip, lsl r3
   154fc:	ldr	r3, [pc, #68]	; 15548 <__assert_fail@plt+0x3790>
   15500:	ldrb	r3, [r3, #3976]	; 0xf88
   15504:	cmp	r3, #0
   15508:	bxeq	lr
   1550c:	push	{r4, lr}
   15510:	mov	r0, #4
   15514:	bl	14160 <__assert_fail@plt+0x23a8>
   15518:	cmp	r0, #0
   1551c:	popeq	{r4, pc}
   15520:	ldr	r1, [pc, #36]	; 1554c <__assert_fail@plt+0x3794>
   15524:	sub	r0, r1, #4
   15528:	bl	15294 <__assert_fail@plt+0x34dc>
   1552c:	ldr	r1, [pc, #28]	; 15550 <__assert_fail@plt+0x3798>
   15530:	sub	r0, r1, #4
   15534:	bl	15294 <__assert_fail@plt+0x34dc>
   15538:	ldr	r1, [pc, #20]	; 15554 <__assert_fail@plt+0x379c>
   1553c:	pop	{r4, lr}
   15540:	sub	r0, r1, #4
   15544:	b	15294 <__assert_fail@plt+0x34dc>
   15548:	andeq	sl, r3, r8, lsr #6
   1554c:	ldrdeq	sl, [r3], -r4
   15550:	strdeq	sl, [r3], -r4
   15554:	ldrdeq	sl, [r3], -ip
   15558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1555c:	sub	sp, sp, #44	; 0x2c
   15560:	mov	r7, r2
   15564:	ldr	r2, [pc, #1032]	; 15974 <__assert_fail@plt+0x3bbc>
   15568:	mov	r5, r3
   1556c:	ldr	r3, [sp, #80]	; 0x50
   15570:	mov	ip, r0
   15574:	ldr	r2, [r2]
   15578:	str	r3, [sp, #12]
   1557c:	ldr	r3, [sp, #84]	; 0x54
   15580:	str	r0, [sp, #16]
   15584:	mov	r0, r7
   15588:	str	r3, [sp, #20]
   1558c:	mov	r4, r1
   15590:	str	r2, [sp, #36]	; 0x24
   15594:	ldr	r9, [ip]
   15598:	bl	2146c <__assert_fail@plt+0xf6b4>
   1559c:	ldr	r3, [pc, #980]	; 15978 <__assert_fail@plt+0x3bc0>
   155a0:	ldrb	r8, [r3, #3977]	; 0xf89
   155a4:	cmp	r0, #2
   155a8:	movhi	r8, #0
   155ac:	andls	r8, r8, #1
   155b0:	cmp	r8, #0
   155b4:	bne	156bc <__assert_fail@plt+0x3904>
   155b8:	cmp	r5, #0
   155bc:	movne	fp, r8
   155c0:	beq	1561c <__assert_fail@plt+0x3864>
   155c4:	str	r7, [sp]
   155c8:	mvn	r3, #0
   155cc:	mov	r2, r4
   155d0:	mov	r1, #8192	; 0x2000
   155d4:	mov	r0, r9
   155d8:	bl	21530 <__assert_fail@plt+0xf778>
   155dc:	cmp	r0, #8192	; 0x2000
   155e0:	mov	r5, r0
   155e4:	bcs	1592c <__assert_fail@plt+0x3b74>
   155e8:	ldrb	r2, [r4]
   155ec:	ldrb	r3, [r9]
   155f0:	cmp	r2, r3
   155f4:	movne	r8, #1
   155f8:	bne	1560c <__assert_fail@plt+0x3854>
   155fc:	mov	r0, r4
   15600:	bl	11bf0 <strlen@plt>
   15604:	subs	r8, r5, r0
   15608:	movne	r8, #1
   1560c:	cmp	fp, #0
   15610:	beq	1562c <__assert_fail@plt+0x3874>
   15614:	mov	r6, r5
   15618:	b	156f0 <__assert_fail@plt+0x3938>
   1561c:	mov	r0, r4
   15620:	bl	11bf0 <strlen@plt>
   15624:	mov	r9, r4
   15628:	mov	r5, r0
   1562c:	ldr	r3, [sp, #12]
   15630:	cmp	r3, #0
   15634:	beq	1569c <__assert_fail@plt+0x38e4>
   15638:	bl	11a94 <__ctype_get_mb_cur_max@plt>
   1563c:	cmp	r0, #1
   15640:	bhi	158d8 <__assert_fail@plt+0x3b20>
   15644:	add	r4, r9, r5
   15648:	cmp	r4, r9
   1564c:	bls	15954 <__assert_fail@plt+0x3b9c>
   15650:	bl	11ba8 <__ctype_b_loc@plt>
   15654:	mov	r6, #0
   15658:	sub	r1, r4, #1
   1565c:	sub	r2, r9, #1
   15660:	ldr	r0, [r0]
   15664:	ldrb	r3, [r2, #1]!
   15668:	lsl	r3, r3, #1
   1566c:	ldrh	r3, [r0, r3]
   15670:	tst	r3, #16384	; 0x4000
   15674:	addne	r6, r6, #1
   15678:	cmp	r1, r2
   1567c:	bne	15664 <__assert_fail@plt+0x38ac>
   15680:	ldr	r3, [pc, #752]	; 15978 <__assert_fail@plt+0x3bc0>
   15684:	ldrb	r3, [r3, #3978]	; 0xf8a
   15688:	cmp	r3, #0
   1568c:	bne	1574c <__assert_fail@plt+0x3994>
   15690:	ldr	r2, [sp, #20]
   15694:	strb	r3, [r2]
   15698:	b	15774 <__assert_fail@plt+0x39bc>
   1569c:	ldr	r3, [pc, #724]	; 15978 <__assert_fail@plt+0x3bc0>
   156a0:	ldrb	r3, [r3, #3978]	; 0xf8a
   156a4:	cmp	r3, #0
   156a8:	bne	1574c <__assert_fail@plt+0x3994>
   156ac:	ldr	r3, [sp, #20]
   156b0:	ldr	r2, [sp, #12]
   156b4:	strb	r2, [r3]
   156b8:	b	1577c <__assert_fail@plt+0x39c4>
   156bc:	cmp	r5, #0
   156c0:	bne	15968 <__assert_fail@plt+0x3bb0>
   156c4:	mov	r0, r4
   156c8:	bl	11bf0 <strlen@plt>
   156cc:	cmp	r0, #8192	; 0x2000
   156d0:	mov	r6, r0
   156d4:	add	r5, r0, #1
   156d8:	bcs	1591c <__assert_fail@plt+0x3b64>
   156dc:	mov	r2, r5
   156e0:	mov	r1, r4
   156e4:	mov	r0, r9
   156e8:	bl	1195c <memcpy@plt>
   156ec:	mov	r8, #0
   156f0:	bl	11a94 <__ctype_get_mb_cur_max@plt>
   156f4:	add	r7, r9, r6
   156f8:	cmp	r0, #1
   156fc:	bhi	157a4 <__assert_fail@plt+0x39ec>
   15700:	cmp	r7, r9
   15704:	bls	15738 <__assert_fail@plt+0x3980>
   15708:	bl	11ba8 <__ctype_b_loc@plt>
   1570c:	sub	r7, r7, #1
   15710:	sub	r2, r9, #1
   15714:	mov	ip, #63	; 0x3f
   15718:	ldrb	r3, [r2, #1]!
   1571c:	ldr	r1, [r0]
   15720:	lsl	r3, r3, #1
   15724:	ldrh	r3, [r1, r3]
   15728:	tst	r3, #16384	; 0x4000
   1572c:	strbeq	ip, [r2]
   15730:	cmp	r7, r2
   15734:	bne	15718 <__assert_fail@plt+0x3960>
   15738:	mov	r5, r6
   1573c:	ldr	r3, [pc, #564]	; 15978 <__assert_fail@plt+0x3bc0>
   15740:	ldrb	r3, [r3, #3978]	; 0xf8a
   15744:	cmp	r3, #0
   15748:	beq	15760 <__assert_fail@plt+0x39a8>
   1574c:	ldr	r3, [pc, #548]	; 15978 <__assert_fail@plt+0x3bc0>
   15750:	ldrb	r3, [r3, #3096]	; 0xc18
   15754:	eor	r3, r3, #1
   15758:	orr	r8, r8, r3
   1575c:	eor	r3, r8, #1
   15760:	ldr	r2, [sp, #12]
   15764:	cmp	r2, #0
   15768:	ldr	r2, [sp, #20]
   1576c:	strb	r3, [r2]
   15770:	beq	1577c <__assert_fail@plt+0x39c4>
   15774:	ldr	r3, [sp, #12]
   15778:	str	r6, [r3]
   1577c:	ldr	r3, [sp, #16]
   15780:	ldr	r2, [sp, #36]	; 0x24
   15784:	mov	r0, r5
   15788:	str	r9, [r3]
   1578c:	ldr	r3, [pc, #480]	; 15974 <__assert_fail@plt+0x3bbc>
   15790:	ldr	r3, [r3]
   15794:	cmp	r2, r3
   15798:	bne	15970 <__assert_fail@plt+0x3bb8>
   1579c:	add	sp, sp, #44	; 0x2c
   157a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a4:	cmp	r7, r9
   157a8:	bls	1595c <__assert_fail@plt+0x3ba4>
   157ac:	mov	r5, r9
   157b0:	mov	r4, r9
   157b4:	mov	r6, #0
   157b8:	b	157e4 <__assert_fail@plt+0x3a2c>
   157bc:	cmp	r3, #37	; 0x25
   157c0:	bcs	157d0 <__assert_fail@plt+0x3a18>
   157c4:	sub	r2, r3, #32
   157c8:	cmp	r2, #3
   157cc:	bhi	1580c <__assert_fail@plt+0x3a54>
   157d0:	add	r4, r4, #1
   157d4:	add	r6, r6, #1
   157d8:	strb	r3, [r5], #1
   157dc:	cmp	r7, r4
   157e0:	bls	158d0 <__assert_fail@plt+0x3b18>
   157e4:	ldrb	r3, [r4]
   157e8:	cmp	r3, #63	; 0x3f
   157ec:	bls	157bc <__assert_fail@plt+0x3a04>
   157f0:	cmp	r3, #65	; 0x41
   157f4:	bcc	1580c <__assert_fail@plt+0x3a54>
   157f8:	cmp	r3, #95	; 0x5f
   157fc:	bls	157d0 <__assert_fail@plt+0x3a18>
   15800:	sub	r2, r3, #97	; 0x61
   15804:	cmp	r2, #29
   15808:	bls	157d0 <__assert_fail@plt+0x3a18>
   1580c:	mov	r3, #0
   15810:	str	r3, [sp, #28]
   15814:	str	r3, [sp, #32]
   15818:	b	15850 <__assert_fail@plt+0x3a98>
   1581c:	bl	11908 <wcwidth@plt>
   15820:	cmp	r0, #0
   15824:	addlt	sl, r4, sl
   15828:	bge	158b0 <__assert_fail@plt+0x3af8>
   1582c:	mov	r3, #63	; 0x3f
   15830:	strb	r3, [r5]
   15834:	add	r6, r6, #1
   15838:	mov	r5, fp
   1583c:	mov	r4, sl
   15840:	add	r0, sp, #28
   15844:	bl	11974 <mbsinit@plt>
   15848:	cmp	r0, #0
   1584c:	bne	157dc <__assert_fail@plt+0x3a24>
   15850:	add	r3, sp, #28
   15854:	sub	r2, r7, r4
   15858:	mov	r1, r4
   1585c:	add	r0, sp, #24
   15860:	bl	2384c <__assert_fail@plt+0x11a94>
   15864:	add	fp, r5, #1
   15868:	cmn	r0, #1
   1586c:	mov	sl, r0
   15870:	beq	158f0 <__assert_fail@plt+0x3b38>
   15874:	cmn	r0, #2
   15878:	beq	15908 <__assert_fail@plt+0x3b50>
   1587c:	cmp	r0, #0
   15880:	ldr	r0, [sp, #24]
   15884:	bne	1581c <__assert_fail@plt+0x3a64>
   15888:	bl	11908 <wcwidth@plt>
   1588c:	add	sl, r4, #1
   15890:	cmp	r0, #0
   15894:	blt	1582c <__assert_fail@plt+0x3a74>
   15898:	ldrb	r3, [r4]
   1589c:	mov	r4, sl
   158a0:	strb	r3, [r5]
   158a4:	mov	r5, fp
   158a8:	add	r6, r6, r0
   158ac:	b	15840 <__assert_fail@plt+0x3a88>
   158b0:	sub	r3, r5, #1
   158b4:	add	r1, r4, sl
   158b8:	ldrb	r2, [r4], #1
   158bc:	cmp	r4, r1
   158c0:	strb	r2, [r3, #1]!
   158c4:	bne	158b8 <__assert_fail@plt+0x3b00>
   158c8:	add	r5, r5, sl
   158cc:	b	158a8 <__assert_fail@plt+0x3af0>
   158d0:	sub	r5, r5, r9
   158d4:	b	1573c <__assert_fail@plt+0x3984>
   158d8:	mov	r2, #0
   158dc:	mov	r1, r5
   158e0:	mov	r0, r9
   158e4:	bl	1dc80 <__assert_fail@plt+0xbec8>
   158e8:	mov	r6, r0
   158ec:	b	15680 <__assert_fail@plt+0x38c8>
   158f0:	add	r4, r4, #1
   158f4:	add	r6, r6, #1
   158f8:	mov	r3, #63	; 0x3f
   158fc:	strb	r3, [r5]
   15900:	mov	r5, fp
   15904:	b	157dc <__assert_fail@plt+0x3a24>
   15908:	mov	r3, #63	; 0x3f
   1590c:	strb	r3, [r5]
   15910:	add	r6, r6, #1
   15914:	mov	r4, r7
   15918:	b	15900 <__assert_fail@plt+0x3b48>
   1591c:	mov	r0, r5
   15920:	bl	221c0 <__assert_fail@plt+0x10408>
   15924:	mov	r9, r0
   15928:	b	156dc <__assert_fail@plt+0x3924>
   1592c:	add	r8, r0, #1
   15930:	mov	r0, r8
   15934:	bl	221c0 <__assert_fail@plt+0x10408>
   15938:	mov	r1, r8
   1593c:	str	r7, [sp]
   15940:	mvn	r3, #0
   15944:	mov	r2, r4
   15948:	mov	r9, r0
   1594c:	bl	21530 <__assert_fail@plt+0xf778>
   15950:	b	155e8 <__assert_fail@plt+0x3830>
   15954:	mov	r6, #0
   15958:	b	15680 <__assert_fail@plt+0x38c8>
   1595c:	mov	r6, #0
   15960:	mov	r5, r6
   15964:	b	1573c <__assert_fail@plt+0x3984>
   15968:	mov	fp, #1
   1596c:	b	155c4 <__assert_fail@plt+0x380c>
   15970:	bl	119b0 <__stack_chk_fail@plt>
   15974:	andeq	r9, r3, r0, lsl #30
   15978:	andeq	sl, r3, r8, lsr #6
   1597c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15980:	sub	sp, sp, #8192	; 0x2000
   15984:	sub	sp, sp, #44	; 0x2c
   15988:	add	ip, sp, #40	; 0x28
   1598c:	ldr	fp, [pc, #900]	; 15d18 <__assert_fail@plt+0x3f60>
   15990:	mov	r8, r3
   15994:	add	r3, sp, #36	; 0x24
   15998:	sub	r5, ip, #9
   1599c:	mov	r9, r0
   159a0:	str	r3, [ip, #-8]!
   159a4:	mov	r0, ip
   159a8:	add	ip, sp, #8192	; 0x2000
   159ac:	ldr	lr, [fp]
   159b0:	add	ip, ip, #36	; 0x24
   159b4:	mov	r4, #0
   159b8:	str	r5, [sp, #4]
   159bc:	str	r4, [sp]
   159c0:	str	lr, [ip]
   159c4:	add	ip, sp, #8256	; 0x2040
   159c8:	add	ip, ip, #16
   159cc:	ldrb	r4, [ip]
   159d0:	add	ip, sp, #8256	; 0x2040
   159d4:	add	ip, ip, #20
   159d8:	ldr	r5, [ip]
   159dc:	add	ip, sp, #8256	; 0x2040
   159e0:	add	ip, ip, #24
   159e4:	mov	r3, r2
   159e8:	mov	r2, r1
   159ec:	mov	r1, r9
   159f0:	ldr	r6, [ip]
   159f4:	bl	15558 <__assert_fail@plt+0x37a0>
   159f8:	ldrb	r3, [sp, #31]
   159fc:	ldr	sl, [pc, #792]	; 15d1c <__assert_fail@plt+0x3f64>
   15a00:	tst	r4, r3
   15a04:	mov	r7, r0
   15a08:	bne	15c78 <__assert_fail@plt+0x3ec0>
   15a0c:	ldr	r4, [pc, #780]	; 15d20 <__assert_fail@plt+0x3f68>
   15a10:	cmp	r8, #0
   15a14:	beq	15a4c <__assert_fail@plt+0x3c94>
   15a18:	mov	r0, #4
   15a1c:	bl	14160 <__assert_fail@plt+0x23a8>
   15a20:	cmp	r0, #0
   15a24:	bne	15cb0 <__assert_fail@plt+0x3ef8>
   15a28:	ldr	r1, [pc, #756]	; 15d24 <__assert_fail@plt+0x3f6c>
   15a2c:	sub	r0, r1, #4
   15a30:	bl	15294 <__assert_fail@plt+0x34dc>
   15a34:	add	r1, r8, #4
   15a38:	mov	r0, r8
   15a3c:	bl	15294 <__assert_fail@plt+0x34dc>
   15a40:	ldr	r1, [pc, #736]	; 15d28 <__assert_fail@plt+0x3f70>
   15a44:	sub	r0, r1, #4
   15a48:	bl	15294 <__assert_fail@plt+0x34dc>
   15a4c:	cmp	r6, #0
   15a50:	beq	15c3c <__assert_fail@plt+0x3e84>
   15a54:	ldrb	r8, [r4, #3978]	; 0xf8a
   15a58:	cmp	r8, #0
   15a5c:	bne	15bb4 <__assert_fail@plt+0x3dfc>
   15a60:	str	r7, [sp, #12]
   15a64:	str	r8, [sp, #16]
   15a68:	mov	r1, #0
   15a6c:	ldr	r0, [r4, #3980]	; 0xf8c
   15a70:	bl	14648 <__assert_fail@plt+0x2890>
   15a74:	mov	r1, #1
   15a78:	str	r0, [sp, #8]
   15a7c:	mov	r0, r6
   15a80:	bl	14648 <__assert_fail@plt+0x2890>
   15a84:	ldr	r2, [pc, #672]	; 15d2c <__assert_fail@plt+0x3f74>
   15a88:	ldr	r3, [pc, #672]	; 15d30 <__assert_fail@plt+0x3f78>
   15a8c:	ldrb	r1, [r0]
   15a90:	str	r0, [sp, #20]
   15a94:	str	r0, [sp]
   15a98:	cmp	r1, #47	; 0x2f
   15a9c:	movne	r3, r2
   15aa0:	ldr	r1, [pc, #652]	; 15d34 <__assert_fail@plt+0x3f7c>
   15aa4:	ldr	r2, [sp, #8]
   15aa8:	mov	r0, #1
   15aac:	bl	11c50 <__printf_chk@plt>
   15ab0:	ldr	r0, [sp, #8]
   15ab4:	bl	11938 <free@plt>
   15ab8:	ldr	r0, [sp, #20]
   15abc:	bl	11938 <free@plt>
   15ac0:	cmp	r5, #0
   15ac4:	beq	15c50 <__assert_fail@plt+0x3e98>
   15ac8:	ldrb	r3, [r4, #3984]	; 0xf90
   15acc:	cmp	r3, #0
   15ad0:	beq	15af8 <__assert_fail@plt+0x3d40>
   15ad4:	ldrd	r2, [r5, #12]
   15ad8:	sub	r3, r3, r2
   15adc:	cmp	r3, #3
   15ae0:	bls	15cb8 <__assert_fail@plt+0x3f00>
   15ae4:	ldr	r3, [r4, #3824]	; 0xef0
   15ae8:	str	r3, [r2]
   15aec:	ldr	r3, [r5, #12]
   15af0:	add	r3, r3, #4
   15af4:	str	r3, [r5, #12]
   15af8:	ldrd	r2, [sp, #12]
   15afc:	ldr	r0, [sp, #32]
   15b00:	mov	r1, #1
   15b04:	add	r0, r0, r3
   15b08:	ldr	r3, [sl]
   15b0c:	bl	1198c <fwrite_unlocked@plt>
   15b10:	ldrb	r2, [r4, #3984]	; 0xf90
   15b14:	ldr	r3, [r4, #3824]	; 0xef0
   15b18:	cmp	r2, #0
   15b1c:	add	r3, r7, r3
   15b20:	str	r3, [r4, #3824]	; 0xef0
   15b24:	beq	15b4c <__assert_fail@plt+0x3d94>
   15b28:	ldr	r1, [r5, #12]
   15b2c:	ldr	r2, [r5, #16]
   15b30:	sub	r2, r2, r1
   15b34:	cmp	r2, #3
   15b38:	bls	15ccc <__assert_fail@plt+0x3f14>
   15b3c:	str	r3, [r1]
   15b40:	ldr	r3, [r5, #12]
   15b44:	add	r3, r3, #4
   15b48:	str	r3, [r5, #12]
   15b4c:	cmp	r6, #0
   15b50:	beq	15b70 <__assert_fail@plt+0x3db8>
   15b54:	ldr	r3, [sl]
   15b58:	mov	r2, #6
   15b5c:	mov	r1, #1
   15b60:	ldr	r0, [pc, #464]	; 15d38 <__assert_fail@plt+0x3f80>
   15b64:	bl	1198c <fwrite_unlocked@plt>
   15b68:	cmp	r8, #0
   15b6c:	bne	15c08 <__assert_fail@plt+0x3e50>
   15b70:	ldr	r0, [sp, #32]
   15b74:	add	r3, sp, #36	; 0x24
   15b78:	cmp	r0, r3
   15b7c:	cmpne	r0, r9
   15b80:	beq	15b88 <__assert_fail@plt+0x3dd0>
   15b84:	bl	11938 <free@plt>
   15b88:	add	r3, sp, #8192	; 0x2000
   15b8c:	add	r3, r3, #36	; 0x24
   15b90:	ldrb	r0, [sp, #31]
   15b94:	ldr	r2, [r3]
   15b98:	ldr	r3, [fp]
   15b9c:	add	r0, r0, r7
   15ba0:	cmp	r2, r3
   15ba4:	bne	15d14 <__assert_fail@plt+0x3f5c>
   15ba8:	add	sp, sp, #8192	; 0x2000
   15bac:	add	sp, sp, #44	; 0x2c
   15bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bb4:	ldrb	r8, [r4, #3096]	; 0xc18
   15bb8:	cmp	r8, #0
   15bbc:	beq	15a60 <__assert_fail@plt+0x3ca8>
   15bc0:	ldrb	r3, [sp, #31]
   15bc4:	cmp	r3, #0
   15bc8:	bne	15ce4 <__assert_fail@plt+0x3f2c>
   15bcc:	ldr	r0, [sl]
   15bd0:	sub	r3, r7, #2
   15bd4:	ldr	r1, [sp, #32]
   15bd8:	str	r3, [sp, #12]
   15bdc:	ldr	r2, [r0, #24]
   15be0:	ldr	r3, [r0, #20]
   15be4:	ldrb	r1, [r1]
   15be8:	cmp	r3, r2
   15bec:	bcs	15d04 <__assert_fail@plt+0x3f4c>
   15bf0:	add	r2, r3, #1
   15bf4:	str	r2, [r0, #20]
   15bf8:	mov	r2, #1
   15bfc:	str	r2, [sp, #16]
   15c00:	strb	r1, [r3]
   15c04:	b	15a68 <__assert_fail@plt+0x3cb0>
   15c08:	ldr	r0, [sl]
   15c0c:	ldr	r3, [sp, #32]
   15c10:	ldr	r2, [r0, #20]
   15c14:	ldr	r1, [r0, #24]
   15c18:	add	r3, r3, r7
   15c1c:	cmp	r2, r1
   15c20:	ldrb	r1, [r3, #-1]
   15c24:	addcc	r3, r2, #1
   15c28:	strcc	r3, [r0, #20]
   15c2c:	strbcc	r1, [r2]
   15c30:	bcc	15b70 <__assert_fail@plt+0x3db8>
   15c34:	bl	11c98 <__overflow@plt>
   15c38:	b	15b70 <__assert_fail@plt+0x3db8>
   15c3c:	cmp	r5, #0
   15c40:	str	r7, [sp, #12]
   15c44:	str	r6, [sp, #16]
   15c48:	mov	r8, r6
   15c4c:	bne	15ac8 <__assert_fail@plt+0x3d10>
   15c50:	ldrd	r2, [sp, #12]
   15c54:	ldr	r0, [sp, #32]
   15c58:	mov	r1, #1
   15c5c:	add	r0, r0, r3
   15c60:	ldr	r3, [sl]
   15c64:	bl	1198c <fwrite_unlocked@plt>
   15c68:	ldr	r3, [r4, #3824]	; 0xef0
   15c6c:	add	r3, r3, r7
   15c70:	str	r3, [r4, #3824]	; 0xef0
   15c74:	b	15b4c <__assert_fail@plt+0x3d94>
   15c78:	ldr	r0, [sl]
   15c7c:	ldr	r3, [r0, #20]
   15c80:	ldr	r2, [r0, #24]
   15c84:	cmp	r3, r2
   15c88:	addcc	r1, r3, #1
   15c8c:	movcc	r2, #32
   15c90:	strcc	r1, [r0, #20]
   15c94:	strbcc	r2, [r3]
   15c98:	bcs	15cf8 <__assert_fail@plt+0x3f40>
   15c9c:	ldr	r4, [pc, #124]	; 15d20 <__assert_fail@plt+0x3f68>
   15ca0:	ldr	r3, [r4, #3824]	; 0xef0
   15ca4:	add	r3, r3, #1
   15ca8:	str	r3, [r4, #3824]	; 0xef0
   15cac:	b	15a10 <__assert_fail@plt+0x3c58>
   15cb0:	bl	15400 <__assert_fail@plt+0x3648>
   15cb4:	b	15a28 <__assert_fail@plt+0x3c70>
   15cb8:	mov	r1, #4
   15cbc:	mov	r0, r5
   15cc0:	bl	23a40 <_obstack_newchunk@@Base>
   15cc4:	ldr	r2, [r5, #12]
   15cc8:	b	15ae4 <__assert_fail@plt+0x3d2c>
   15ccc:	mov	r1, #4
   15cd0:	mov	r0, r5
   15cd4:	bl	23a40 <_obstack_newchunk@@Base>
   15cd8:	ldr	r3, [r4, #3824]	; 0xef0
   15cdc:	ldr	r1, [r5, #12]
   15ce0:	b	15b3c <__assert_fail@plt+0x3d84>
   15ce4:	mov	r3, #0
   15ce8:	str	r3, [sp, #16]
   15cec:	mov	r8, r3
   15cf0:	str	r7, [sp, #12]
   15cf4:	b	15a68 <__assert_fail@plt+0x3cb0>
   15cf8:	mov	r1, #32
   15cfc:	bl	11c98 <__overflow@plt>
   15d00:	b	15c9c <__assert_fail@plt+0x3ee4>
   15d04:	bl	11c98 <__overflow@plt>
   15d08:	mov	r3, #1
   15d0c:	str	r3, [sp, #16]
   15d10:	b	15a68 <__assert_fail@plt+0x3cb0>
   15d14:	bl	119b0 <__stack_chk_fail@plt>
   15d18:	andeq	r9, r3, r0, lsl #30
   15d1c:	andeq	sl, r3, ip, lsl r3
   15d20:	andeq	sl, r3, r8, lsr #6
   15d24:	ldrdeq	sl, [r3], -r4
   15d28:	ldrdeq	sl, [r3], -ip
   15d2c:	andeq	r8, r2, r4, ror #17
   15d30:	ldrdeq	r7, [r2], -r0
   15d34:	ldrdeq	r6, [r2], -r0
   15d38:	andeq	r6, r2, r4, ror #11
   15d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d40:	subs	r7, r1, #0
   15d44:	ldr	r6, [pc, #900]	; 160d0 <__assert_fail@plt+0x4318>
   15d48:	mov	sl, r3
   15d4c:	sub	sp, sp, #20
   15d50:	mov	r5, r0
   15d54:	mov	r9, r2
   15d58:	ldrb	r3, [r6, #3976]	; 0xf88
   15d5c:	beq	15dd0 <__assert_fail@plt+0x4018>
   15d60:	cmp	r3, #0
   15d64:	ldr	r8, [r0, #4]
   15d68:	bne	15da4 <__assert_fail@plt+0x3fec>
   15d6c:	ldr	r3, [r5, #8]
   15d70:	eor	r7, r7, #1
   15d74:	mov	r0, r8
   15d78:	stm	sp, {r7, r9}
   15d7c:	ldr	r1, [r6, #3140]	; 0xc44
   15d80:	str	r3, [sp, #8]
   15d84:	mov	r3, #0
   15d88:	ldr	r2, [r5, #144]	; 0x90
   15d8c:	bl	1597c <__assert_fail@plt+0x3bc4>
   15d90:	mov	r4, r0
   15d94:	bl	15428 <__assert_fail@plt+0x3670>
   15d98:	mov	r0, r4
   15d9c:	add	sp, sp, #20
   15da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da4:	ldrb	r3, [r0, #133]	; 0x85
   15da8:	ldr	r4, [r0, #124]	; 0x7c
   15dac:	cmp	r3, #0
   15db0:	bne	15ef8 <__assert_fail@plt+0x4140>
   15db4:	mov	r0, #12
   15db8:	bl	14160 <__assert_fail@plt+0x23a8>
   15dbc:	cmp	r0, #0
   15dc0:	mvneq	r2, #0
   15dc4:	beq	15df4 <__assert_fail@plt+0x403c>
   15dc8:	mov	r4, #96	; 0x60
   15dcc:	b	15e60 <__assert_fail@plt+0x40a8>
   15dd0:	cmp	r3, #0
   15dd4:	ldr	r8, [r0]
   15dd8:	beq	15d6c <__assert_fail@plt+0x3fb4>
   15ddc:	ldrb	r2, [r6, #3985]	; 0xf91
   15de0:	ldrb	r3, [r0, #133]	; 0x85
   15de4:	cmp	r2, #0
   15de8:	bne	15f58 <__assert_fail@plt+0x41a0>
   15dec:	ldr	r4, [r5, #32]
   15df0:	mov	r2, r3
   15df4:	ldrb	r3, [r5, #132]	; 0x84
   15df8:	cmp	r3, #0
   15dfc:	bne	15f08 <__assert_fail@plt+0x4150>
   15e00:	ldr	r1, [r5, #120]	; 0x78
   15e04:	ldr	r3, [pc, #712]	; 160d4 <__assert_fail@plt+0x431c>
   15e08:	add	r3, r3, r1, lsl #2
   15e0c:	ldr	r4, [r3, #284]	; 0x11c
   15e10:	cmp	r4, #5
   15e14:	beq	15f68 <__assert_fail@plt+0x41b0>
   15e18:	sub	r3, r4, #7
   15e1c:	clz	r3, r3
   15e20:	lsr	r3, r3, #5
   15e24:	cmp	r2, #0
   15e28:	movne	r3, #0
   15e2c:	andeq	r3, r3, #1
   15e30:	cmp	r3, #0
   15e34:	lsleq	r4, r4, #3
   15e38:	beq	15e60 <__assert_fail@plt+0x40a8>
   15e3c:	ldrb	r3, [r6, #3985]	; 0xf91
   15e40:	cmp	r3, #0
   15e44:	movne	r4, #104	; 0x68
   15e48:	bne	15e60 <__assert_fail@plt+0x40a8>
   15e4c:	mov	r0, #13
   15e50:	bl	14160 <__assert_fail@plt+0x23a8>
   15e54:	cmp	r0, #0
   15e58:	movne	r4, #104	; 0x68
   15e5c:	moveq	r4, #56	; 0x38
   15e60:	ldr	r3, [pc, #624]	; 160d8 <__assert_fail@plt+0x4320>
   15e64:	add	r3, r3, r4
   15e68:	ldr	r4, [r3, #4]
   15e6c:	cmp	r4, #0
   15e70:	bne	15e88 <__assert_fail@plt+0x40d0>
   15e74:	mov	r0, #4
   15e78:	bl	14160 <__assert_fail@plt+0x23a8>
   15e7c:	cmp	r0, #0
   15e80:	beq	15d6c <__assert_fail@plt+0x3fb4>
   15e84:	mov	r3, r4
   15e88:	ldr	r2, [r5, #8]
   15e8c:	eor	r7, r7, #1
   15e90:	str	r2, [sp, #8]
   15e94:	stm	sp, {r7, r9}
   15e98:	mov	r0, r8
   15e9c:	ldr	r2, [r5, #144]	; 0x90
   15ea0:	ldr	r1, [r6, #3140]	; 0xc44
   15ea4:	bl	1597c <__assert_fail@plt+0x3bc4>
   15ea8:	mov	r4, r0
   15eac:	bl	15428 <__assert_fail@plt+0x3670>
   15eb0:	bl	15244 <__assert_fail@plt+0x348c>
   15eb4:	ldr	r5, [r6, #4]
   15eb8:	cmp	r5, #0
   15ebc:	beq	15d98 <__assert_fail@plt+0x3fe0>
   15ec0:	mov	r1, r5
   15ec4:	mov	r0, sl
   15ec8:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   15ecc:	mov	r1, r5
   15ed0:	mov	r6, r0
   15ed4:	sub	r0, sl, #1
   15ed8:	add	r0, r0, r4
   15edc:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   15ee0:	cmp	r6, r0
   15ee4:	beq	15d98 <__assert_fail@plt+0x3fe0>
   15ee8:	ldr	r1, [pc, #492]	; 160dc <__assert_fail@plt+0x4324>
   15eec:	sub	r0, r1, #4
   15ef0:	bl	15294 <__assert_fail@plt+0x34dc>
   15ef4:	b	15d98 <__assert_fail@plt+0x3fe0>
   15ef8:	ldrb	r3, [r5, #132]	; 0x84
   15efc:	mov	r2, #0
   15f00:	cmp	r3, #0
   15f04:	beq	15e00 <__assert_fail@plt+0x4048>
   15f08:	and	r1, r4, #61440	; 0xf000
   15f0c:	cmp	r1, #32768	; 0x8000
   15f10:	beq	15fc4 <__assert_fail@plt+0x420c>
   15f14:	cmp	r1, #16384	; 0x4000
   15f18:	beq	16024 <__assert_fail@plt+0x426c>
   15f1c:	cmp	r1, #40960	; 0xa000
   15f20:	beq	16070 <__assert_fail@plt+0x42b8>
   15f24:	cmp	r1, #4096	; 0x1000
   15f28:	moveq	r4, #64	; 0x40
   15f2c:	beq	15e60 <__assert_fail@plt+0x40a8>
   15f30:	cmp	r1, #49152	; 0xc000
   15f34:	moveq	r4, #72	; 0x48
   15f38:	beq	15e60 <__assert_fail@plt+0x40a8>
   15f3c:	cmp	r1, #24576	; 0x6000
   15f40:	moveq	r4, #80	; 0x50
   15f44:	beq	15e60 <__assert_fail@plt+0x40a8>
   15f48:	cmp	r1, #8192	; 0x2000
   15f4c:	moveq	r4, #88	; 0x58
   15f50:	movne	r4, #104	; 0x68
   15f54:	b	15e60 <__assert_fail@plt+0x40a8>
   15f58:	cmp	r3, #0
   15f5c:	beq	15dec <__assert_fail@plt+0x4034>
   15f60:	ldr	r4, [r0, #124]	; 0x7c
   15f64:	b	15df0 <__assert_fail@plt+0x4038>
   15f68:	mov	r0, r8
   15f6c:	bl	11bf0 <strlen@plt>
   15f70:	ldr	r4, [r6, #3988]	; 0xf94
   15f74:	cmp	r4, #0
   15f78:	mov	fp, r0
   15f7c:	beq	15fb4 <__assert_fail@plt+0x41fc>
   15f80:	ldr	r3, [r4]
   15f84:	sub	r0, fp, r3
   15f88:	cmp	fp, r3
   15f8c:	mov	r2, r3
   15f90:	add	r0, r8, r0
   15f94:	bcc	15fa8 <__assert_fail@plt+0x41f0>
   15f98:	ldr	r1, [r4, #4]
   15f9c:	bl	1a46c <__assert_fail@plt+0x86b4>
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fbc <__assert_fail@plt+0x4204>
   15fa8:	ldr	r4, [r4, #16]
   15fac:	cmp	r4, #0
   15fb0:	bne	15f80 <__assert_fail@plt+0x41c8>
   15fb4:	mov	r4, #40	; 0x28
   15fb8:	b	15e60 <__assert_fail@plt+0x40a8>
   15fbc:	add	r3, r4, #8
   15fc0:	b	15e68 <__assert_fail@plt+0x40b0>
   15fc4:	tst	r4, #2048	; 0x800
   15fc8:	beq	15fe0 <__assert_fail@plt+0x4228>
   15fcc:	mov	r0, #16
   15fd0:	bl	14160 <__assert_fail@plt+0x23a8>
   15fd4:	cmp	r0, #0
   15fd8:	movne	r4, #128	; 0x80
   15fdc:	bne	15e60 <__assert_fail@plt+0x40a8>
   15fe0:	tst	r4, #1024	; 0x400
   15fe4:	bne	1600c <__assert_fail@plt+0x4254>
   15fe8:	mov	r0, #21
   15fec:	bl	14160 <__assert_fail@plt+0x23a8>
   15ff0:	cmp	r0, #0
   15ff4:	beq	16078 <__assert_fail@plt+0x42c0>
   15ff8:	ldrb	r3, [r5, #140]	; 0x8c
   15ffc:	cmp	r3, #0
   16000:	beq	16078 <__assert_fail@plt+0x42c0>
   16004:	mov	r4, #168	; 0xa8
   16008:	b	15e60 <__assert_fail@plt+0x40a8>
   1600c:	mov	r0, #17
   16010:	bl	14160 <__assert_fail@plt+0x23a8>
   16014:	cmp	r0, #0
   16018:	beq	15fe8 <__assert_fail@plt+0x4230>
   1601c:	mov	r4, #136	; 0x88
   16020:	b	15e60 <__assert_fail@plt+0x40a8>
   16024:	ldr	r3, [pc, #180]	; 160e0 <__assert_fail@plt+0x4328>
   16028:	bics	r3, r3, r4
   1602c:	beq	160b8 <__assert_fail@plt+0x4300>
   16030:	tst	r4, #2
   16034:	beq	1604c <__assert_fail@plt+0x4294>
   16038:	mov	r0, #19
   1603c:	bl	14160 <__assert_fail@plt+0x23a8>
   16040:	cmp	r0, #0
   16044:	movne	r4, #152	; 0x98
   16048:	bne	15e60 <__assert_fail@plt+0x40a8>
   1604c:	tst	r4, #512	; 0x200
   16050:	moveq	r4, #48	; 0x30
   16054:	beq	15e60 <__assert_fail@plt+0x40a8>
   16058:	mov	r0, #18
   1605c:	bl	14160 <__assert_fail@plt+0x23a8>
   16060:	cmp	r0, #0
   16064:	movne	r4, #144	; 0x90
   16068:	moveq	r4, #48	; 0x30
   1606c:	b	15e60 <__assert_fail@plt+0x40a8>
   16070:	mov	r4, #7
   16074:	b	15e24 <__assert_fail@plt+0x406c>
   16078:	tst	r4, #73	; 0x49
   1607c:	beq	16094 <__assert_fail@plt+0x42dc>
   16080:	mov	r0, #14
   16084:	bl	14160 <__assert_fail@plt+0x23a8>
   16088:	cmp	r0, #0
   1608c:	movne	r4, #112	; 0x70
   16090:	bne	15e60 <__assert_fail@plt+0x40a8>
   16094:	ldr	r3, [r5, #36]	; 0x24
   16098:	cmp	r3, #1
   1609c:	bls	15f68 <__assert_fail@plt+0x41b0>
   160a0:	mov	r0, #22
   160a4:	bl	14160 <__assert_fail@plt+0x23a8>
   160a8:	cmp	r0, #0
   160ac:	beq	15f68 <__assert_fail@plt+0x41b0>
   160b0:	mov	r4, #176	; 0xb0
   160b4:	b	15e60 <__assert_fail@plt+0x40a8>
   160b8:	mov	r0, #20
   160bc:	bl	14160 <__assert_fail@plt+0x23a8>
   160c0:	cmp	r0, #0
   160c4:	movne	r4, #160	; 0xa0
   160c8:	bne	15e60 <__assert_fail@plt+0x40a8>
   160cc:	b	16030 <__assert_fail@plt+0x4278>
   160d0:	andeq	sl, r3, r8, lsr #6
   160d4:	andeq	r4, r2, r0, lsl pc
   160d8:	ldrdeq	sl, [r3], -r0
   160dc:	andeq	sl, r3, ip, lsl #5
   160e0:	andeq	r0, r0, r2, lsl #4
   160e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	sub	sp, sp, #4800	; 0x12c0
   160ec:	ldr	r2, [pc, #2220]	; 169a0 <__assert_fail@plt+0x4be8>
   160f0:	sub	sp, sp, #28
   160f4:	ldrb	r3, [r0, #132]	; 0x84
   160f8:	add	r1, sp, #4800	; 0x12c0
   160fc:	ldr	r2, [r2]
   16100:	add	r1, r1, #20
   16104:	cmp	r3, #0
   16108:	mov	r7, r0
   1610c:	str	r2, [r1]
   16110:	beq	1646c <__assert_fail@plt+0x46b4>
   16114:	add	sl, sp, #152	; 0x98
   16118:	sub	r1, sl, #16
   1611c:	add	r0, r0, #16
   16120:	bl	1b044 <__assert_fail@plt+0x928c>
   16124:	ldr	r5, [pc, #2168]	; 169a4 <__assert_fail@plt+0x4bec>
   16128:	ldrb	r3, [r5, #3097]	; 0xc19
   1612c:	cmp	r3, #0
   16130:	beq	16444 <__assert_fail@plt+0x468c>
   16134:	ldr	r3, [r7, #136]	; 0x88
   16138:	cmp	r3, #1
   1613c:	moveq	r3, #46	; 0x2e
   16140:	strbeq	r3, [sp, #146]	; 0x92
   16144:	beq	16150 <__assert_fail@plt+0x4398>
   16148:	cmp	r3, #2
   1614c:	beq	16440 <__assert_fail@plt+0x4688>
   16150:	ldr	r3, [r5, #3808]	; 0xee0
   16154:	cmp	r3, #1
   16158:	beq	16454 <__assert_fail@plt+0x469c>
   1615c:	cmp	r3, #0
   16160:	bne	16420 <__assert_fail@plt+0x4668>
   16164:	add	fp, sp, #728	; 0x2d8
   16168:	ldr	r2, [r7, #100]	; 0x64
   1616c:	ldr	r3, [r7, #96]	; 0x60
   16170:	str	r2, [fp, #-684]	; 0xfffffd54
   16174:	str	r3, [fp, #-688]	; 0xfffffd50
   16178:	ldrb	r2, [r5, #3992]	; 0xf98
   1617c:	ldrb	r3, [r7, #132]	; 0x84
   16180:	cmp	r2, #0
   16184:	addeq	r8, sp, #1168	; 0x490
   16188:	addeq	r8, r8, #8
   1618c:	moveq	r4, r8
   16190:	bne	164f4 <__assert_fail@plt+0x473c>
   16194:	ldrb	r2, [r5, #3993]	; 0xf99
   16198:	cmp	r2, #0
   1619c:	beq	16200 <__assert_fail@plt+0x4448>
   161a0:	cmp	r3, #0
   161a4:	ldreq	r6, [pc, #2044]	; 169a8 <__assert_fail@plt+0x4bf0>
   161a8:	bne	168d4 <__assert_fail@plt+0x4b1c>
   161ac:	mov	r1, #0
   161b0:	mov	r0, r6
   161b4:	ldr	r9, [r5, #3104]	; 0xc20
   161b8:	bl	1de50 <__assert_fail@plt+0xc098>
   161bc:	sub	r0, r9, r0
   161c0:	cmp	r0, #0
   161c4:	ble	1693c <__assert_fail@plt+0x4b84>
   161c8:	add	r0, r4, r0
   161cc:	mov	r3, #32
   161d0:	strb	r3, [r4], #1
   161d4:	cmp	r4, r0
   161d8:	bne	161d0 <__assert_fail@plt+0x4418>
   161dc:	sub	r6, r6, #1
   161e0:	mov	r4, r0
   161e4:	ldrb	r3, [r6, #1]!
   161e8:	cmp	r3, #0
   161ec:	strb	r3, [r4], #1
   161f0:	bne	161e4 <__assert_fail@plt+0x442c>
   161f4:	mov	r3, #32
   161f8:	strb	r3, [r4, #-1]
   161fc:	ldrb	r3, [r7, #132]	; 0x84
   16200:	cmp	r3, #0
   16204:	ldr	r6, [r5, #3108]	; 0xc24
   16208:	ldreq	r0, [pc, #1944]	; 169a8 <__assert_fail@plt+0x4bf0>
   1620c:	bne	16730 <__assert_fail@plt+0x4978>
   16210:	sub	r3, sl, #16
   16214:	str	r0, [sp, #8]
   16218:	stm	sp, {r3, r6}
   1621c:	mvn	r2, #0
   16220:	ldr	r3, [pc, #1924]	; 169ac <__assert_fail@plt+0x4bf4>
   16224:	mov	r1, #1
   16228:	mov	r0, r4
   1622c:	bl	11c20 <__sprintf_chk@plt>
   16230:	mov	r0, r4
   16234:	bl	11bf0 <strlen@plt>
   16238:	ldrb	r3, [r5, #3984]	; 0xf90
   1623c:	cmp	r3, #0
   16240:	ldr	r3, [pc, #1896]	; 169b0 <__assert_fail@plt+0x4bf8>
   16244:	str	r3, [sp, #20]
   16248:	add	r4, r4, r0
   1624c:	bne	1670c <__assert_fail@plt+0x4954>
   16250:	ldr	r9, [pc, #1884]	; 169b4 <__assert_fail@plt+0x4bfc>
   16254:	ldrb	r3, [r9, #202]	; 0xca
   16258:	cmp	r3, #0
   1625c:	bne	1626c <__assert_fail@plt+0x44b4>
   16260:	ldrb	r3, [r9, #203]	; 0xcb
   16264:	cmp	r3, #0
   16268:	beq	164d8 <__assert_fail@plt+0x4720>
   1626c:	ldr	r3, [sp, #20]
   16270:	mov	r0, r8
   16274:	sub	r4, r4, r8
   16278:	ldr	r1, [r3]
   1627c:	bl	118a8 <fputs_unlocked@plt>
   16280:	ldrb	r3, [r9, #202]	; 0xca
   16284:	ldr	r2, [r5, #3824]	; 0xef0
   16288:	cmp	r3, #0
   1628c:	add	r4, r4, r2
   16290:	str	r4, [r5, #3824]	; 0xef0
   16294:	bne	1679c <__assert_fail@plt+0x49e4>
   16298:	ldrb	r3, [r9, #203]	; 0xcb
   1629c:	cmp	r3, #0
   162a0:	bne	16770 <__assert_fail@plt+0x49b8>
   162a4:	ldrb	r3, [r5, #4008]	; 0xfa8
   162a8:	cmp	r3, #0
   162ac:	bne	1675c <__assert_fail@plt+0x49a4>
   162b0:	ldrb	r3, [r5, #4009]	; 0xfa9
   162b4:	cmp	r3, #0
   162b8:	moveq	r4, r8
   162bc:	bne	16744 <__assert_fail@plt+0x498c>
   162c0:	ldrb	r3, [r7, #132]	; 0x84
   162c4:	cmp	r3, #0
   162c8:	bne	1649c <__assert_fail@plt+0x46e4>
   162cc:	ldr	r2, [pc, #1748]	; 169a8 <__assert_fail@plt+0x4bf0>
   162d0:	mov	r0, r2
   162d4:	mov	r1, #0
   162d8:	str	r2, [sp, #24]
   162dc:	ldr	r6, [r5, #3136]	; 0xc40
   162e0:	bl	1de50 <__assert_fail@plt+0xc098>
   162e4:	ldr	r2, [sp, #24]
   162e8:	sub	r6, r6, r0
   162ec:	cmp	r6, #0
   162f0:	ble	16904 <__assert_fail@plt+0x4b4c>
   162f4:	add	r6, r4, r6
   162f8:	mov	r3, #32
   162fc:	strb	r3, [r4], #1
   16300:	cmp	r4, r6
   16304:	bne	162fc <__assert_fail@plt+0x4544>
   16308:	sub	r0, r2, #1
   1630c:	ldrb	r3, [r0, #1]!
   16310:	cmp	r3, #0
   16314:	strb	r3, [r6], #1
   16318:	bne	1630c <__assert_fail@plt+0x4554>
   1631c:	mov	r3, #32
   16320:	strb	r3, [r6, #-1]
   16324:	mov	r3, #1
   16328:	strb	r3, [r6]
   1632c:	ldrb	r2, [r7, #132]	; 0x84
   16330:	cmp	r2, #0
   16334:	bne	16554 <__assert_fail@plt+0x479c>
   16338:	ldr	r3, [r9, #216]	; 0xd8
   1633c:	cmp	r3, #0
   16340:	bge	16810 <__assert_fail@plt+0x4a58>
   16344:	ldr	r4, [pc, #1644]	; 169b8 <__assert_fail@plt+0x4c00>
   16348:	add	r3, sp, #88	; 0x58
   1634c:	str	r3, [sp, #24]
   16350:	sub	r3, sl, #60	; 0x3c
   16354:	str	r3, [sp, #28]
   16358:	ldr	r3, [sp, #24]
   1635c:	ldr	r2, [sp, #28]
   16360:	sub	r1, r3, #52	; 0x34
   16364:	ldr	r0, [r5, #4016]	; 0xfb0
   16368:	mov	r3, #0
   1636c:	str	r3, [fp, #-692]	; 0xfffffd4c
   16370:	bl	23f3c <_obstack_memory_used@@Base+0x354>
   16374:	cmp	r0, #0
   16378:	beq	163bc <__assert_fail@plt+0x4604>
   1637c:	ldrb	r2, [r5, #3080]	; 0xc08
   16380:	ldr	r3, [r5, #4016]	; 0xfb0
   16384:	mov	sl, #0
   16388:	cmp	r2, #0
   1638c:	add	r0, sp, #172	; 0xac
   16390:	ldrne	r1, [fp, #-620]	; 0xfffffd94
   16394:	ldrne	r2, [pc, #1568]	; 169bc <__assert_fail@plt+0x4c04>
   16398:	ldreq	r2, [r9, #192]	; 0xc0
   1639c:	addne	r2, r2, r1, lsl #7
   163a0:	str	r3, [sp]
   163a4:	ldr	r1, [pc, #1556]	; 169c0 <__assert_fail@plt+0x4c08>
   163a8:	ldr	r3, [sp, #28]
   163ac:	str	sl, [sp, #4]
   163b0:	bl	1f804 <__assert_fail@plt+0xda4c>
   163b4:	subs	r1, r0, #0
   163b8:	bne	16944 <__assert_fail@plt+0x4b8c>
   163bc:	ldr	r3, [r9, #216]	; 0xd8
   163c0:	cmp	r3, #0
   163c4:	movlt	r2, #0
   163c8:	movlt	r3, r2
   163cc:	strlt	r2, [r9, #216]	; 0xd8
   163d0:	ldrb	r2, [r7, #132]	; 0x84
   163d4:	cmp	r2, #0
   163d8:	beq	16994 <__assert_fail@plt+0x4bdc>
   163dc:	ldr	r0, [fp, #-688]	; 0xfffffd50
   163e0:	add	r2, sp, #172	; 0xac
   163e4:	str	r3, [sp, #24]
   163e8:	asr	r1, r0, #31
   163ec:	bl	1d760 <__assert_fail@plt+0xb9a8>
   163f0:	ldr	r3, [sp, #24]
   163f4:	str	r0, [sp, #4]
   163f8:	str	r3, [sp]
   163fc:	mvn	r2, #0
   16400:	ldr	r3, [pc, #1468]	; 169c4 <__assert_fail@plt+0x4c0c>
   16404:	mov	r1, #1
   16408:	mov	r0, r6
   1640c:	bl	11c20 <__sprintf_chk@plt>
   16410:	mov	r0, r6
   16414:	bl	11bf0 <strlen@plt>
   16418:	add	r9, r6, r0
   1641c:	b	1662c <__assert_fail@plt+0x4874>
   16420:	cmp	r3, #2
   16424:	bne	1699c <__assert_fail@plt+0x4be4>
   16428:	add	fp, sp, #728	; 0x2d8
   1642c:	ldr	r2, [r7, #92]	; 0x5c
   16430:	ldr	r3, [r7, #88]	; 0x58
   16434:	str	r2, [fp, #-684]	; 0xfffffd54
   16438:	str	r3, [fp, #-688]	; 0xfffffd50
   1643c:	b	16178 <__assert_fail@plt+0x43c0>
   16440:	mov	r3, #43	; 0x2b
   16444:	strb	r3, [sp, #146]	; 0x92
   16448:	ldr	r3, [r5, #3808]	; 0xee0
   1644c:	cmp	r3, #1
   16450:	bne	1615c <__assert_fail@plt+0x43a4>
   16454:	add	fp, sp, #728	; 0x2d8
   16458:	ldr	r2, [r7, #108]	; 0x6c
   1645c:	ldr	r3, [r7, #104]	; 0x68
   16460:	str	r2, [fp, #-684]	; 0xfffffd54
   16464:	str	r3, [fp, #-688]	; 0xfffffd50
   16468:	b	16178 <__assert_fail@plt+0x43c0>
   1646c:	ldr	r1, [r0, #120]	; 0x78
   16470:	ldr	r2, [pc, #1360]	; 169c8 <__assert_fail@plt+0x4c10>
   16474:	add	sl, sp, #152	; 0x98
   16478:	add	r2, r2, r1
   1647c:	ldrb	r0, [r2, #324]	; 0x144
   16480:	ldr	r2, [pc, #1348]	; 169cc <__assert_fail@plt+0x4c14>
   16484:	strb	r0, [sp, #136]	; 0x88
   16488:	str	r2, [sl, #-11]
   1648c:	strh	r2, [sl, #-7]
   16490:	str	r2, [sl, #-15]
   16494:	strb	r3, [sp, #147]	; 0x93
   16498:	b	16124 <__assert_fail@plt+0x436c>
   1649c:	ldr	r3, [r7, #32]
   164a0:	and	r3, r3, #45056	; 0xb000
   164a4:	cmp	r3, #8192	; 0x2000
   164a8:	beq	1681c <__assert_fail@plt+0x4a64>
   164ac:	ldrd	r0, [r9, #208]	; 0xd0
   164b0:	add	r2, sp, #172	; 0xac
   164b4:	ldr	r3, [r5, #4012]	; 0xfac
   164b8:	strd	r0, [sp, #8]
   164bc:	mov	r0, #1
   164c0:	mov	r1, #0
   164c4:	strd	r0, [sp]
   164c8:	ldrd	r0, [r7, #64]	; 0x40
   164cc:	bl	1c860 <__assert_fail@plt+0xaaa8>
   164d0:	mov	r2, r0
   164d4:	b	162d0 <__assert_fail@plt+0x4518>
   164d8:	ldrb	r3, [r5, #4008]	; 0xfa8
   164dc:	cmp	r3, #0
   164e0:	bne	1626c <__assert_fail@plt+0x44b4>
   164e4:	ldrb	r3, [r5, #4009]	; 0xfa9
   164e8:	cmp	r3, #0
   164ec:	beq	162c0 <__assert_fail@plt+0x4508>
   164f0:	b	1626c <__assert_fail@plt+0x44b4>
   164f4:	cmp	r3, #0
   164f8:	ldr	r4, [r5, #3100]	; 0xc1c
   164fc:	beq	16518 <__assert_fail@plt+0x4760>
   16500:	ldrd	r0, [r7, #112]	; 0x70
   16504:	orrs	r3, r0, r1
   16508:	beq	16518 <__assert_fail@plt+0x4760>
   1650c:	add	r2, sp, #172	; 0xac
   16510:	bl	1d828 <__assert_fail@plt+0xba70>
   16514:	b	1651c <__assert_fail@plt+0x4764>
   16518:	ldr	r0, [pc, #1160]	; 169a8 <__assert_fail@plt+0x4bf0>
   1651c:	add	r8, sp, #1168	; 0x490
   16520:	add	r8, r8, #8
   16524:	ldr	r3, [pc, #1176]	; 169c4 <__assert_fail@plt+0x4c0c>
   16528:	str	r0, [sp, #4]
   1652c:	str	r4, [sp]
   16530:	ldr	r2, [pc, #1176]	; 169d0 <__assert_fail@plt+0x4c18>
   16534:	mov	r1, #1
   16538:	mov	r0, r8
   1653c:	bl	11c20 <__sprintf_chk@plt>
   16540:	mov	r0, r8
   16544:	bl	11bf0 <strlen@plt>
   16548:	ldrb	r3, [r7, #132]	; 0x84
   1654c:	add	r4, r8, r0
   16550:	b	16194 <__assert_fail@plt+0x43dc>
   16554:	add	r3, sp, #88	; 0x58
   16558:	add	r2, sp, #48	; 0x30
   1655c:	add	r1, sp, #40	; 0x28
   16560:	ldr	r0, [r5, #4016]	; 0xfb0
   16564:	str	r3, [sp, #24]
   16568:	bl	23f3c <_obstack_memory_used@@Base+0x354>
   1656c:	mov	r3, #1
   16570:	cmp	r0, #0
   16574:	ldreq	r4, [pc, #1084]	; 169b8 <__assert_fail@plt+0x4c00>
   16578:	beq	1660c <__assert_fail@plt+0x4854>
   1657c:	ldr	ip, [r5, #4020]	; 0xfb4
   16580:	ldr	r0, [fp, #-688]	; 0xfffffd50
   16584:	ldr	r2, [r5, #4024]	; 0xfb8
   16588:	cmp	r0, ip
   1658c:	ldr	r1, [fp, #-684]	; 0xfffffd54
   16590:	bgt	1690c <__assert_fail@plt+0x4b54>
   16594:	blt	167c8 <__assert_fail@plt+0x4a10>
   16598:	sub	r3, r2, r1
   1659c:	cmp	r3, #0
   165a0:	blt	1690c <__assert_fail@plt+0x4b54>
   165a4:	ldr	r3, [pc, #1064]	; 169d4 <__assert_fail@plt+0x4c1c>
   165a8:	add	r3, ip, r3
   165ac:	cmp	r0, r3
   165b0:	ldrgt	r4, [pc, #1024]	; 169b8 <__assert_fail@plt+0x4c00>
   165b4:	bgt	167fc <__assert_fail@plt+0x4a44>
   165b8:	ldr	r4, [pc, #1016]	; 169b8 <__assert_fail@plt+0x4c00>
   165bc:	mov	r3, #0
   165c0:	ldrb	r2, [r5, #3080]	; 0xc08
   165c4:	ldr	r0, [r5, #4016]	; 0xfb0
   165c8:	cmp	r2, #0
   165cc:	lslne	ip, r3, #1
   165d0:	addne	ip, ip, r3
   165d4:	ldrne	r3, [fp, #-664]	; 0xfffffd68
   165d8:	addeq	r3, r9, r3, lsl #2
   165dc:	addne	r3, r3, ip, lsl #2
   165e0:	ldrne	r2, [pc, #980]	; 169bc <__assert_fail@plt+0x4c04>
   165e4:	ldreq	r2, [r3, #192]	; 0xc0
   165e8:	addne	r2, r2, r3, lsl #7
   165ec:	strd	r0, [sp]
   165f0:	add	r3, sp, #48	; 0x30
   165f4:	mov	r0, r6
   165f8:	ldr	r1, [pc, #960]	; 169c0 <__assert_fail@plt+0x4c08>
   165fc:	bl	1f804 <__assert_fail@plt+0xda4c>
   16600:	cmp	r0, #0
   16604:	addne	r6, r6, r0
   16608:	bne	16618 <__assert_fail@plt+0x4860>
   1660c:	ldrb	r3, [r6]
   16610:	cmp	r3, #0
   16614:	bne	16984 <__assert_fail@plt+0x4bcc>
   16618:	mov	r9, r6
   1661c:	mov	r2, #32
   16620:	mov	r3, #0
   16624:	strb	r2, [r9], #1
   16628:	strb	r3, [r6, #1]
   1662c:	ldr	r3, [sp, #20]
   16630:	mov	r0, r8
   16634:	sub	r8, r9, r8
   16638:	ldr	r1, [r3]
   1663c:	bl	118a8 <fputs_unlocked@plt>
   16640:	ldr	ip, [r5, #3824]	; 0xef0
   16644:	add	r2, r4, #12
   16648:	add	ip, ip, r8
   1664c:	mov	r3, r8
   16650:	mov	r1, #0
   16654:	mov	r0, r7
   16658:	str	ip, [r5, #3824]	; 0xef0
   1665c:	bl	15d3c <__assert_fail@plt+0x3f84>
   16660:	ldr	r2, [r7, #120]	; 0x78
   16664:	cmp	r2, #6
   16668:	mov	r4, r0
   1666c:	beq	166a4 <__assert_fail@plt+0x48ec>
   16670:	ldr	r3, [r5, #3840]	; 0xf00
   16674:	cmp	r3, #0
   16678:	bne	167b0 <__assert_fail@plt+0x49f8>
   1667c:	add	r3, sp, #4800	; 0x12c0
   16680:	add	r3, r3, #20
   16684:	ldr	r2, [r3]
   16688:	ldr	r3, [pc, #784]	; 169a0 <__assert_fail@plt+0x4be8>
   1668c:	ldr	r3, [r3]
   16690:	cmp	r2, r3
   16694:	bne	16978 <__assert_fail@plt+0x4bc0>
   16698:	add	sp, sp, #4800	; 0x12c0
   1669c:	add	sp, sp, #28
   166a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a4:	ldr	r3, [r7, #4]
   166a8:	cmp	r3, #0
   166ac:	beq	1667c <__assert_fail@plt+0x48c4>
   166b0:	ldr	r3, [sp, #20]
   166b4:	mov	r2, #4
   166b8:	mov	r1, #1
   166bc:	ldr	r3, [r3]
   166c0:	ldr	r0, [pc, #784]	; 169d8 <__assert_fail@plt+0x4c20>
   166c4:	bl	1198c <fwrite_unlocked@plt>
   166c8:	ldr	ip, [r5, #3824]	; 0xef0
   166cc:	add	r3, r4, #4
   166d0:	add	r3, r3, r8
   166d4:	add	ip, ip, #4
   166d8:	mov	r2, #0
   166dc:	mov	r1, #1
   166e0:	mov	r0, r7
   166e4:	str	ip, [r5, #3824]	; 0xef0
   166e8:	bl	15d3c <__assert_fail@plt+0x3f84>
   166ec:	ldr	r3, [r5, #3840]	; 0xf00
   166f0:	cmp	r3, #0
   166f4:	beq	1667c <__assert_fail@plt+0x48c4>
   166f8:	ldr	r1, [r7, #124]	; 0x7c
   166fc:	mov	r2, #0
   16700:	mov	r0, #1
   16704:	bl	14fd4 <__assert_fail@plt+0x321c>
   16708:	b	1667c <__assert_fail@plt+0x48c4>
   1670c:	ldr	r3, [r3]
   16710:	mov	r2, #2
   16714:	mov	r1, #1
   16718:	ldr	r0, [pc, #700]	; 169dc <__assert_fail@plt+0x4c24>
   1671c:	bl	1198c <fwrite_unlocked@plt>
   16720:	ldr	r3, [r5, #3824]	; 0xef0
   16724:	add	r3, r3, #2
   16728:	str	r3, [r5, #3824]	; 0xef0
   1672c:	b	16250 <__assert_fail@plt+0x4498>
   16730:	add	r2, sp, #172	; 0xac
   16734:	ldr	r0, [r7, #36]	; 0x24
   16738:	mov	r1, #0
   1673c:	bl	1d828 <__assert_fail@plt+0xba70>
   16740:	b	16210 <__assert_fail@plt+0x4458>
   16744:	ldr	r2, [r5, #3124]	; 0xc34
   16748:	mov	r1, #0
   1674c:	ldr	r0, [r7, #128]	; 0x80
   16750:	bl	14bd8 <__assert_fail@plt+0x2e20>
   16754:	mov	r4, r8
   16758:	b	162c0 <__assert_fail@plt+0x4508>
   1675c:	ldrb	r2, [r7, #132]	; 0x84
   16760:	ldr	r1, [r5, #3120]	; 0xc30
   16764:	ldr	r0, [r7, #40]	; 0x28
   16768:	bl	14c88 <__assert_fail@plt+0x2ed0>
   1676c:	b	162b0 <__assert_fail@plt+0x44f8>
   16770:	ldrb	r3, [r7, #132]	; 0x84
   16774:	ldr	r1, [r7, #44]	; 0x2c
   16778:	ldr	r2, [r5, #3116]	; 0xc2c
   1677c:	cmp	r3, #0
   16780:	beq	167c0 <__assert_fail@plt+0x4a08>
   16784:	ldrb	r3, [r5, #3828]	; 0xef4
   16788:	cmp	r3, #0
   1678c:	movne	r0, #0
   16790:	beq	1695c <__assert_fail@plt+0x4ba4>
   16794:	bl	14bd8 <__assert_fail@plt+0x2e20>
   16798:	b	162a4 <__assert_fail@plt+0x44ec>
   1679c:	ldrb	r2, [r7, #132]	; 0x84
   167a0:	ldr	r1, [r5, #3112]	; 0xc28
   167a4:	ldr	r0, [r7, #40]	; 0x28
   167a8:	bl	14c88 <__assert_fail@plt+0x2ed0>
   167ac:	b	16298 <__assert_fail@plt+0x44e0>
   167b0:	ldr	r1, [r7, #32]
   167b4:	ldrb	r0, [r7, #132]	; 0x84
   167b8:	bl	14fd4 <__assert_fail@plt+0x321c>
   167bc:	b	1667c <__assert_fail@plt+0x48c4>
   167c0:	ldr	r0, [pc, #480]	; 169a8 <__assert_fail@plt+0x4bf0>
   167c4:	b	16794 <__assert_fail@plt+0x49dc>
   167c8:	ldr	lr, [pc, #516]	; 169d4 <__assert_fail@plt+0x4c1c>
   167cc:	ldr	r4, [pc, #484]	; 169b8 <__assert_fail@plt+0x4c00>
   167d0:	add	lr, ip, lr
   167d4:	cmp	r0, lr
   167d8:	bgt	165c0 <__assert_fail@plt+0x4808>
   167dc:	cmp	r0, lr
   167e0:	blt	16808 <__assert_fail@plt+0x4a50>
   167e4:	sub	r3, r2, r1
   167e8:	cmp	r3, #0
   167ec:	bge	16808 <__assert_fail@plt+0x4a50>
   167f0:	cmp	ip, r0
   167f4:	bgt	1697c <__assert_fail@plt+0x4bc4>
   167f8:	blt	16808 <__assert_fail@plt+0x4a50>
   167fc:	sub	r3, r1, r2
   16800:	lsr	r3, r3, #31
   16804:	b	165c0 <__assert_fail@plt+0x4808>
   16808:	mov	r3, #0
   1680c:	b	165c0 <__assert_fail@plt+0x4808>
   16810:	ldr	r0, [pc, #400]	; 169a8 <__assert_fail@plt+0x4bf0>
   16814:	ldr	r4, [pc, #412]	; 169b8 <__assert_fail@plt+0x4c00>
   16818:	b	163f4 <__assert_fail@plt+0x463c>
   1681c:	ldr	lr, [r5, #3128]	; 0xc38
   16820:	ldr	r0, [r7, #48]	; 0x30
   16824:	ldr	r1, [r5, #3132]	; 0xc3c
   16828:	ldr	r3, [r7, #52]	; 0x34
   1682c:	add	r2, lr, #2
   16830:	ldr	ip, [r5, #3136]	; 0xc40
   16834:	add	r2, r2, r1
   16838:	bic	r3, r3, #4080	; 0xff0
   1683c:	lsl	r0, r0, #12
   16840:	sub	ip, ip, r2
   16844:	bic	r3, r3, #15
   16848:	mov	r1, #0
   1684c:	cmp	ip, r1
   16850:	addge	lr, lr, ip
   16854:	addlt	lr, lr, r1
   16858:	orr	r0, r3, r0, lsr #20
   1685c:	sub	r2, sl, #4
   16860:	str	lr, [sp, #24]
   16864:	bl	1d828 <__assert_fail@plt+0xba70>
   16868:	add	r2, sp, #172	; 0xac
   1686c:	mov	r6, r0
   16870:	ldrd	r0, [r7, #48]	; 0x30
   16874:	lsr	r3, r0, #12
   16878:	orr	r3, r3, r1, lsl #20
   1687c:	bic	r3, r3, #255	; 0xff
   16880:	uxtb	r0, r0
   16884:	orr	r0, r3, r0
   16888:	ldr	r3, [r5, #3132]	; 0xc3c
   1688c:	mov	r1, #0
   16890:	str	r3, [sp, #28]
   16894:	bl	1d828 <__assert_fail@plt+0xba70>
   16898:	ldr	r3, [sp, #28]
   1689c:	ldr	lr, [sp, #24]
   168a0:	str	r3, [sp, #8]
   168a4:	str	r6, [sp, #4]
   168a8:	str	lr, [sp]
   168ac:	ldr	r3, [pc, #300]	; 169e0 <__assert_fail@plt+0x4c28>
   168b0:	mvn	r2, #0
   168b4:	mov	r1, #1
   168b8:	str	r0, [sp, #12]
   168bc:	mov	r0, r4
   168c0:	bl	11c20 <__sprintf_chk@plt>
   168c4:	ldr	r6, [r5, #3136]	; 0xc40
   168c8:	add	r6, r6, #1
   168cc:	add	r6, r4, r6
   168d0:	b	16324 <__assert_fail@plt+0x456c>
   168d4:	ldr	r2, [pc, #264]	; 169e4 <__assert_fail@plt+0x4c2c>
   168d8:	ldr	r3, [r5, #3996]	; 0xf9c
   168dc:	ldrd	r0, [r2]
   168e0:	add	r2, sp, #172	; 0xac
   168e4:	strd	r0, [sp, #8]
   168e8:	mov	r0, #512	; 0x200
   168ec:	mov	r1, #0
   168f0:	strd	r0, [sp]
   168f4:	ldrd	r0, [r7, #80]	; 0x50
   168f8:	bl	1c860 <__assert_fail@plt+0xaaa8>
   168fc:	mov	r6, r0
   16900:	b	161ac <__assert_fail@plt+0x43f4>
   16904:	mov	r6, r4
   16908:	b	16308 <__assert_fail@plt+0x4550>
   1690c:	ldr	r4, [pc, #164]	; 169b8 <__assert_fail@plt+0x4c00>
   16910:	add	r0, r4, #4
   16914:	bl	1b5c4 <__assert_fail@plt+0x980c>
   16918:	ldr	ip, [r5, #4020]	; 0xfb4
   1691c:	ldr	lr, [pc, #176]	; 169d4 <__assert_fail@plt+0x4c1c>
   16920:	ldr	r0, [fp, #-688]	; 0xfffffd50
   16924:	add	lr, ip, lr
   16928:	cmp	lr, r0
   1692c:	ldr	r2, [r5, #4024]	; 0xfb8
   16930:	ldr	r1, [fp, #-684]	; 0xfffffd54
   16934:	bge	167dc <__assert_fail@plt+0x4a24>
   16938:	b	167f0 <__assert_fail@plt+0x4a38>
   1693c:	mov	r0, r4
   16940:	b	161dc <__assert_fail@plt+0x4424>
   16944:	mov	r2, sl
   16948:	add	r0, sp, #172	; 0xac
   1694c:	bl	1dc80 <__assert_fail@plt+0xbec8>
   16950:	mov	r3, r0
   16954:	str	r0, [r9, #216]	; 0xd8
   16958:	b	163c0 <__assert_fail@plt+0x4608>
   1695c:	mov	r0, r1
   16960:	str	r2, [sp, #28]
   16964:	str	r1, [sp, #24]
   16968:	bl	1d5bc <__assert_fail@plt+0xb804>
   1696c:	ldr	r1, [sp, #24]
   16970:	ldr	r2, [sp, #28]
   16974:	b	16794 <__assert_fail@plt+0x49dc>
   16978:	bl	119b0 <__stack_chk_fail@plt>
   1697c:	mov	r3, #1
   16980:	b	165c0 <__assert_fail@plt+0x4808>
   16984:	ldr	r3, [r9, #216]	; 0xd8
   16988:	cmp	r3, #0
   1698c:	bge	163d0 <__assert_fail@plt+0x4618>
   16990:	b	16350 <__assert_fail@plt+0x4598>
   16994:	ldr	r0, [pc, #12]	; 169a8 <__assert_fail@plt+0x4bf0>
   16998:	b	163f4 <__assert_fail@plt+0x463c>
   1699c:	bl	11d64 <abort@plt>
   169a0:	andeq	r9, r3, r0, lsl #30
   169a4:	andeq	sl, r3, r8, lsr #6
   169a8:	andeq	r6, r2, ip, asr #11
   169ac:	strdeq	r6, [r2], -r4
   169b0:	andeq	sl, r3, ip, lsl r3
   169b4:	ldrdeq	sl, [r3], -r0
   169b8:	ldrdeq	fp, [r3], -r8
   169bc:	andeq	sl, r3, r0, lsr r3
   169c0:	andeq	r0, r0, r9, ror #7
   169c4:	andeq	r6, r2, ip, ror #11
   169c8:	andeq	r4, r2, r0, lsl pc
   169cc:	svccc	0x003f3f3f
   169d0:	andeq	r0, r0, fp, lsr lr
   169d4:			; <UNDEFINED> instruction: 0xff0f3d54
   169d8:	andeq	r6, r2, ip, lsl #12
   169dc:	strdeq	r6, [r2], -ip
   169e0:	andeq	r6, r2, r0, lsl #12
   169e4:	andeq	fp, r3, r8, asr #5
   169e8:	push	{r4, r5, r6, r7, lr}
   169ec:	sub	sp, sp, #8192	; 0x2000
   169f0:	sub	sp, sp, #28
   169f4:	add	ip, sp, #24
   169f8:	ldr	r4, [pc, #132]	; 16a84 <__assert_fail@plt+0x4ccc>
   169fc:	sub	lr, ip, #8
   16a00:	sub	r6, ip, #4
   16a04:	sub	r7, ip, #13
   16a08:	str	r6, [ip, #-12]!
   16a0c:	str	lr, [sp]
   16a10:	add	lr, sp, #8192	; 0x2000
   16a14:	mov	r5, r0
   16a18:	add	lr, lr, #20
   16a1c:	mov	r0, ip
   16a20:	ldr	ip, [r4]
   16a24:	mov	r3, r2
   16a28:	str	r7, [sp, #4]
   16a2c:	mov	r2, r1
   16a30:	str	ip, [lr]
   16a34:	mov	r1, r5
   16a38:	bl	15558 <__assert_fail@plt+0x37a0>
   16a3c:	ldr	r0, [sp, #12]
   16a40:	cmp	r0, r6
   16a44:	cmpne	r0, r5
   16a48:	beq	16a50 <__assert_fail@plt+0x4c98>
   16a4c:	bl	11938 <free@plt>
   16a50:	add	r3, sp, #8192	; 0x2000
   16a54:	add	r3, r3, #20
   16a58:	ldrb	r0, [sp, #11]
   16a5c:	ldr	r1, [r3]
   16a60:	ldr	r2, [r4]
   16a64:	ldr	r3, [sp, #16]
   16a68:	cmp	r1, r2
   16a6c:	add	r0, r0, r3
   16a70:	bne	16a80 <__assert_fail@plt+0x4cc8>
   16a74:	add	sp, sp, #8192	; 0x2000
   16a78:	add	sp, sp, #28
   16a7c:	pop	{r4, r5, r6, r7, pc}
   16a80:	bl	119b0 <__stack_chk_fail@plt>
   16a84:	andeq	r9, r3, r0, lsl #30
   16a88:	push	{r4, r5, r6, r7, r8, r9, lr}
   16a8c:	sub	sp, sp, #676	; 0x2a4
   16a90:	ldr	r7, [pc, #336]	; 16be8 <__assert_fail@plt+0x4e30>
   16a94:	ldr	r6, [pc, #336]	; 16bec <__assert_fail@plt+0x4e34>
   16a98:	mov	r5, r0
   16a9c:	ldrb	r4, [r7, #3992]	; 0xf98
   16aa0:	ldr	r3, [r6]
   16aa4:	cmp	r4, #0
   16aa8:	str	r3, [sp, #668]	; 0x29c
   16aac:	beq	16b68 <__assert_fail@plt+0x4db0>
   16ab0:	ldr	r3, [r7, #4072]	; 0xfe8
   16ab4:	cmp	r3, #4
   16ab8:	beq	16b54 <__assert_fail@plt+0x4d9c>
   16abc:	ldrb	r3, [r7, #3993]	; 0xf99
   16ac0:	ldr	r4, [r7, #3100]	; 0xc1c
   16ac4:	cmp	r3, #0
   16ac8:	add	r4, r4, #1
   16acc:	beq	16bc4 <__assert_fail@plt+0x4e0c>
   16ad0:	ldr	r0, [r7, #3104]	; 0xc20
   16ad4:	add	r0, r0, #1
   16ad8:	add	r4, r4, r0
   16adc:	ldrb	r3, [r7, #4009]	; 0xfa9
   16ae0:	cmp	r3, #0
   16ae4:	beq	16b00 <__assert_fail@plt+0x4d48>
   16ae8:	ldr	r3, [r7, #4072]	; 0xfe8
   16aec:	cmp	r3, #4
   16af0:	beq	16bd4 <__assert_fail@plt+0x4e1c>
   16af4:	ldr	r0, [r7, #3124]	; 0xc34
   16af8:	add	r0, r0, #1
   16afc:	add	r4, r4, r0
   16b00:	ldr	r2, [r5, #144]	; 0x90
   16b04:	ldr	r1, [r7, #3140]	; 0xc44
   16b08:	ldr	r0, [r5]
   16b0c:	bl	169e8 <__assert_fail@plt+0x4c30>
   16b10:	ldr	r3, [r7, #3840]	; 0xf00
   16b14:	cmp	r3, #0
   16b18:	add	r4, r4, r0
   16b1c:	beq	16b38 <__assert_fail@plt+0x4d80>
   16b20:	ldr	r2, [r5, #120]	; 0x78
   16b24:	ldr	r1, [r5, #32]
   16b28:	ldrb	r0, [r5, #132]	; 0x84
   16b2c:	bl	14ee0 <__assert_fail@plt+0x3128>
   16b30:	cmp	r0, #0
   16b34:	addne	r4, r4, #1
   16b38:	ldr	r2, [sp, #668]	; 0x29c
   16b3c:	ldr	r3, [r6]
   16b40:	mov	r0, r4
   16b44:	cmp	r2, r3
   16b48:	bne	16be4 <__assert_fail@plt+0x4e2c>
   16b4c:	add	sp, sp, #676	; 0x2a4
   16b50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b54:	add	r2, sp, #16
   16b58:	ldrd	r0, [r0, #112]	; 0x70
   16b5c:	bl	1d828 <__assert_fail@plt+0xba70>
   16b60:	bl	11bf0 <strlen@plt>
   16b64:	add	r4, r0, #1
   16b68:	ldrb	r3, [r7, #3993]	; 0xf99
   16b6c:	cmp	r3, #0
   16b70:	beq	16adc <__assert_fail@plt+0x4d24>
   16b74:	ldr	r3, [r7, #4072]	; 0xfe8
   16b78:	cmp	r3, #4
   16b7c:	bne	16ad0 <__assert_fail@plt+0x4d18>
   16b80:	ldrb	r3, [r5, #132]	; 0x84
   16b84:	cmp	r3, #0
   16b88:	moveq	r0, #2
   16b8c:	beq	16ad8 <__assert_fail@plt+0x4d20>
   16b90:	ldr	r2, [pc, #88]	; 16bf0 <__assert_fail@plt+0x4e38>
   16b94:	mov	r8, #512	; 0x200
   16b98:	mov	r9, #0
   16b9c:	ldrd	r0, [r2]
   16ba0:	ldr	r3, [r7, #3996]	; 0xf9c
   16ba4:	strd	r8, [sp]
   16ba8:	add	r2, sp, #16
   16bac:	strd	r0, [sp, #8]
   16bb0:	ldrd	r0, [r5, #80]	; 0x50
   16bb4:	bl	1c860 <__assert_fail@plt+0xaaa8>
   16bb8:	bl	11bf0 <strlen@plt>
   16bbc:	add	r0, r0, #1
   16bc0:	b	16ad8 <__assert_fail@plt+0x4d20>
   16bc4:	ldrb	r3, [r7, #4009]	; 0xfa9
   16bc8:	cmp	r3, #0
   16bcc:	bne	16af4 <__assert_fail@plt+0x4d3c>
   16bd0:	b	16b00 <__assert_fail@plt+0x4d48>
   16bd4:	ldr	r0, [r5, #128]	; 0x80
   16bd8:	bl	11bf0 <strlen@plt>
   16bdc:	add	r0, r0, #1
   16be0:	b	16afc <__assert_fail@plt+0x4d44>
   16be4:	bl	119b0 <__stack_chk_fail@plt>
   16be8:	andeq	sl, r3, r8, lsr #6
   16bec:	andeq	r9, r3, r0, lsl #30
   16bf0:	andeq	fp, r3, r8, asr #5
   16bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf8:	sub	sp, sp, #20
   16bfc:	ldr	r9, [pc, #712]	; 16ecc <__assert_fail@plt+0x5114>
   16c00:	str	r0, [sp, #4]
   16c04:	ldr	sl, [r9, #3088]	; 0xc10
   16c08:	ldr	r1, [r9, #4076]	; 0xfec
   16c0c:	ldr	r3, [r9, #4080]	; 0xff0
   16c10:	cmp	sl, r1
   16c14:	movcc	fp, sl
   16c18:	movcs	fp, r1
   16c1c:	cmp	fp, r3
   16c20:	bls	16cec <__assert_fail@plt+0x4f34>
   16c24:	cmp	fp, r1, lsr #1
   16c28:	ldr	r0, [r9, #4084]	; 0xff4
   16c2c:	bcc	16e90 <__assert_fail@plt+0x50d8>
   16c30:	mov	r4, #12
   16c34:	umull	r4, r5, r1, r4
   16c38:	adds	r3, r5, #0
   16c3c:	movne	r3, #1
   16c40:	cmp	r4, #0
   16c44:	blt	16ec8 <__assert_fail@plt+0x5110>
   16c48:	cmp	r3, #0
   16c4c:	bne	16ec8 <__assert_fail@plt+0x5110>
   16c50:	add	r1, r1, r1, lsl #1
   16c54:	lsl	r1, r1, #2
   16c58:	bl	2221c <__assert_fail@plt+0x10464>
   16c5c:	ldr	r4, [r9, #4076]	; 0xfec
   16c60:	str	r0, [r9, #4084]	; 0xff4
   16c64:	ldr	r1, [r9, #4080]	; 0xff0
   16c68:	add	r3, r1, #1
   16c6c:	adds	r5, r3, r4
   16c70:	sub	r1, r4, r1
   16c74:	mul	r6, r5, r1
   16c78:	bcs	16ec8 <__assert_fail@plt+0x5110>
   16c7c:	mov	r0, r6
   16c80:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   16c84:	cmp	r5, r0
   16c88:	bne	16ec8 <__assert_fail@plt+0x5110>
   16c8c:	lsr	r3, r6, #1
   16c90:	lsr	r6, r6, #31
   16c94:	lsls	r0, r3, #2
   16c98:	bmi	16ec8 <__assert_fail@plt+0x5110>
   16c9c:	cmp	r6, #0
   16ca0:	bne	16ec8 <__assert_fail@plt+0x5110>
   16ca4:	bl	221c0 <__assert_fail@plt+0x10408>
   16ca8:	ldr	r3, [r9, #4080]	; 0xff0
   16cac:	cmp	r4, r3
   16cb0:	bls	16ce4 <__assert_fail@plt+0x4f2c>
   16cb4:	add	r3, r3, #1
   16cb8:	ldr	lr, [r9, #4084]	; 0xff4
   16cbc:	add	ip, r4, #1
   16cc0:	lsl	r3, r3, #2
   16cc4:	sub	lr, lr, #4
   16cc8:	lsl	ip, ip, #2
   16ccc:	add	r2, r3, r3, lsl #1
   16cd0:	str	r0, [lr, r2]
   16cd4:	add	r0, r0, r3
   16cd8:	add	r3, r3, #4
   16cdc:	cmp	ip, r3
   16ce0:	bne	16ccc <__assert_fail@plt+0x4f14>
   16ce4:	ldr	sl, [r9, #3088]	; 0xc10
   16ce8:	str	r4, [r9, #4080]	; 0xff0
   16cec:	cmp	fp, #0
   16cf0:	beq	16d48 <__assert_fail@plt+0x4f90>
   16cf4:	ldr	r4, [r9, #4084]	; 0xff4
   16cf8:	mov	ip, #3
   16cfc:	sub	r8, r4, #12
   16d00:	sub	r7, r4, #8
   16d04:	mov	r0, ip
   16d08:	sub	r4, r4, #4
   16d0c:	lsl	r6, fp, #2
   16d10:	mov	lr, #0
   16d14:	mov	r5, #1
   16d18:	ldr	r2, [r4, ip, lsl #2]
   16d1c:	strb	r5, [r8, ip, lsl #2]
   16d20:	sub	r3, r2, #4
   16d24:	add	r2, r2, lr
   16d28:	str	ip, [r7, ip, lsl #2]
   16d2c:	str	r0, [r3, #4]!
   16d30:	cmp	r2, r3
   16d34:	bne	16d2c <__assert_fail@plt+0x4f74>
   16d38:	add	lr, lr, #4
   16d3c:	cmp	lr, r6
   16d40:	add	ip, ip, #3
   16d44:	bne	16d18 <__assert_fail@plt+0x4f60>
   16d48:	cmp	sl, #0
   16d4c:	movne	r6, #0
   16d50:	beq	16e44 <__assert_fail@plt+0x508c>
   16d54:	ldr	r3, [r9, #3092]	; 0xc14
   16d58:	ldr	r0, [r3, r6, lsl #2]
   16d5c:	bl	16a88 <__assert_fail@plt+0x4cd0>
   16d60:	ldr	r3, [r9, #3088]	; 0xc10
   16d64:	cmp	fp, #0
   16d68:	str	r3, [sp, #8]
   16d6c:	mov	r5, r0
   16d70:	beq	16e34 <__assert_fail@plt+0x507c>
   16d74:	ldr	r3, [r9, #4]
   16d78:	ldr	r4, [r9, #4084]	; 0xff4
   16d7c:	str	r3, [sp, #12]
   16d80:	mov	r8, #0
   16d84:	add	r7, r0, #2
   16d88:	b	16e08 <__assert_fail@plt+0x5050>
   16d8c:	ldr	r3, [sp, #8]
   16d90:	mov	r1, sl
   16d94:	add	r0, r3, sl
   16d98:	sub	r0, r0, #1
   16d9c:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   16da0:	mov	r1, r0
   16da4:	mov	r0, r6
   16da8:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   16dac:	mov	r1, r0
   16db0:	ldr	lr, [r4, #8]
   16db4:	cmp	r1, r8
   16db8:	moveq	r0, r5
   16dbc:	ldr	r8, [lr, r1, lsl #2]
   16dc0:	movne	r0, r7
   16dc4:	cmp	r8, r0
   16dc8:	bcs	16df8 <__assert_fail@plt+0x5040>
   16dcc:	ldr	ip, [r4, #4]
   16dd0:	ldr	r3, [sp, #12]
   16dd4:	sub	ip, ip, r8
   16dd8:	add	ip, ip, r0
   16ddc:	str	ip, [r4, #4]
   16de0:	str	r0, [lr, r1, lsl #2]
   16de4:	ldr	r1, [r4, #4]
   16de8:	cmp	r1, r3
   16dec:	movcs	r1, #0
   16df0:	movcc	r1, #1
   16df4:	strb	r1, [r4]
   16df8:	cmp	fp, sl
   16dfc:	mov	r8, sl
   16e00:	add	r4, r4, #12
   16e04:	beq	16e34 <__assert_fail@plt+0x507c>
   16e08:	ldrb	r1, [r4]
   16e0c:	add	sl, r8, #1
   16e10:	cmp	r1, #0
   16e14:	beq	16df8 <__assert_fail@plt+0x5040>
   16e18:	ldr	r3, [sp, #4]
   16e1c:	cmp	r3, #0
   16e20:	bne	16d8c <__assert_fail@plt+0x4fd4>
   16e24:	mov	r1, sl
   16e28:	mov	r0, r6
   16e2c:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   16e30:	b	16db0 <__assert_fail@plt+0x4ff8>
   16e34:	ldr	r3, [sp, #8]
   16e38:	add	r6, r6, #1
   16e3c:	cmp	r6, r3
   16e40:	bcc	16d54 <__assert_fail@plt+0x4f9c>
   16e44:	cmp	fp, #1
   16e48:	bls	16e84 <__assert_fail@plt+0x50cc>
   16e4c:	add	r1, fp, fp, lsl #1
   16e50:	ldr	r3, [r9, #4084]	; 0xff4
   16e54:	add	r3, r3, r1, lsl #2
   16e58:	ldrb	r1, [r3, #-12]
   16e5c:	cmp	r1, #0
   16e60:	beq	16e78 <__assert_fail@plt+0x50c0>
   16e64:	b	16e84 <__assert_fail@plt+0x50cc>
   16e68:	sub	r3, r3, #12
   16e6c:	ldrb	r2, [r3, #-12]
   16e70:	cmp	r2, #0
   16e74:	bne	16e84 <__assert_fail@plt+0x50cc>
   16e78:	sub	fp, fp, #1
   16e7c:	cmp	fp, #1
   16e80:	bne	16e68 <__assert_fail@plt+0x50b0>
   16e84:	mov	r0, fp
   16e88:	add	sp, sp, #20
   16e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e90:	mov	r4, #24
   16e94:	umull	r4, r5, fp, r4
   16e98:	adds	r3, r5, #0
   16e9c:	movne	r3, #1
   16ea0:	cmp	r4, #0
   16ea4:	blt	16ec8 <__assert_fail@plt+0x5110>
   16ea8:	cmp	r3, #0
   16eac:	bne	16ec8 <__assert_fail@plt+0x5110>
   16eb0:	lsl	r4, fp, #1
   16eb4:	add	r1, r4, fp
   16eb8:	lsl	r1, r1, #3
   16ebc:	bl	2221c <__assert_fail@plt+0x10464>
   16ec0:	str	r0, [r9, #4084]	; 0xff4
   16ec4:	b	16c64 <__assert_fail@plt+0x4eac>
   16ec8:	bl	22408 <__assert_fail@plt+0x10650>
   16ecc:	andeq	sl, r3, r8, lsr #6
   16ed0:	ldr	r2, [r1, #120]	; 0x78
   16ed4:	ldr	r3, [r0, #120]	; 0x78
   16ed8:	cmp	r2, #9
   16edc:	cmpne	r2, #3
   16ee0:	moveq	r2, #1
   16ee4:	movne	r2, #0
   16ee8:	cmp	r3, #9
   16eec:	cmpne	r3, #3
   16ef0:	mov	ip, r1
   16ef4:	moveq	r3, #1
   16ef8:	eor	r1, r2, #1
   16efc:	movne	r3, #0
   16f00:	tst	r3, r1
   16f04:	bne	16f70 <__assert_fail@plt+0x51b8>
   16f08:	eor	r3, r3, #1
   16f0c:	tst	r2, r3
   16f10:	bne	16f60 <__assert_fail@plt+0x51a8>
   16f14:	ldrd	r2, [r0, #64]	; 0x40
   16f18:	push	{r4, r5}
   16f1c:	ldrd	r4, [ip, #64]	; 0x40
   16f20:	cmp	r2, r4
   16f24:	sbcs	r1, r3, r5
   16f28:	blt	16f68 <__assert_fail@plt+0x51b0>
   16f2c:	cmp	r3, r5
   16f30:	cmpeq	r2, r4
   16f34:	beq	16f50 <__assert_fail@plt+0x5198>
   16f38:	cmp	r4, r2
   16f3c:	sbcs	r3, r5, r3
   16f40:	movlt	r0, #1
   16f44:	movge	r0, #0
   16f48:	pop	{r4, r5}
   16f4c:	bx	lr
   16f50:	ldr	r1, [r0]
   16f54:	pop	{r4, r5}
   16f58:	ldr	r0, [ip]
   16f5c:	b	118d8 <strcmp@plt>
   16f60:	mov	r0, #1
   16f64:	bx	lr
   16f68:	mvn	r0, #0
   16f6c:	b	16f48 <__assert_fail@plt+0x5190>
   16f70:	mvn	r0, #0
   16f74:	bx	lr
   16f78:	ldr	r2, [r1, #120]	; 0x78
   16f7c:	ldr	r3, [r0, #120]	; 0x78
   16f80:	cmp	r2, #9
   16f84:	cmpne	r2, #3
   16f88:	moveq	r2, #1
   16f8c:	movne	r2, #0
   16f90:	cmp	r3, #9
   16f94:	cmpne	r3, #3
   16f98:	eor	ip, r2, #1
   16f9c:	moveq	r3, #1
   16fa0:	movne	r3, #0
   16fa4:	tst	r3, ip
   16fa8:	bne	17014 <__assert_fail@plt+0x525c>
   16fac:	eor	r3, r3, #1
   16fb0:	tst	r2, r3
   16fb4:	bne	17004 <__assert_fail@plt+0x524c>
   16fb8:	ldrd	r2, [r1, #64]	; 0x40
   16fbc:	push	{r4, r5}
   16fc0:	ldrd	r4, [r0, #64]	; 0x40
   16fc4:	cmp	r2, r4
   16fc8:	sbcs	ip, r3, r5
   16fcc:	blt	1700c <__assert_fail@plt+0x5254>
   16fd0:	cmp	r3, r5
   16fd4:	cmpeq	r2, r4
   16fd8:	beq	16ff4 <__assert_fail@plt+0x523c>
   16fdc:	cmp	r4, r2
   16fe0:	sbcs	r3, r5, r3
   16fe4:	movlt	r0, #1
   16fe8:	movge	r0, #0
   16fec:	pop	{r4, r5}
   16ff0:	bx	lr
   16ff4:	ldr	r1, [r1]
   16ff8:	ldr	r0, [r0]
   16ffc:	pop	{r4, r5}
   17000:	b	14878 <__assert_fail@plt+0x2ac0>
   17004:	mov	r0, #1
   17008:	bx	lr
   1700c:	mvn	r0, #0
   17010:	b	16fec <__assert_fail@plt+0x5234>
   17014:	mvn	r0, #0
   17018:	bx	lr
   1701c:	ldr	r2, [r1, #120]	; 0x78
   17020:	ldr	r3, [r0, #120]	; 0x78
   17024:	cmp	r2, #9
   17028:	cmpne	r2, #3
   1702c:	moveq	r2, #1
   17030:	movne	r2, #0
   17034:	cmp	r3, #9
   17038:	cmpne	r3, #3
   1703c:	eor	ip, r2, #1
   17040:	moveq	r3, #1
   17044:	movne	r3, #0
   17048:	tst	r3, ip
   1704c:	bne	170b8 <__assert_fail@plt+0x5300>
   17050:	eor	r3, r3, #1
   17054:	tst	r2, r3
   17058:	bne	170a8 <__assert_fail@plt+0x52f0>
   1705c:	ldrd	r2, [r1, #64]	; 0x40
   17060:	push	{r4, r5}
   17064:	ldrd	r4, [r0, #64]	; 0x40
   17068:	cmp	r2, r4
   1706c:	sbcs	ip, r3, r5
   17070:	blt	170b0 <__assert_fail@plt+0x52f8>
   17074:	cmp	r3, r5
   17078:	cmpeq	r2, r4
   1707c:	beq	17098 <__assert_fail@plt+0x52e0>
   17080:	cmp	r4, r2
   17084:	sbcs	r3, r5, r3
   17088:	movlt	r0, #1
   1708c:	movge	r0, #0
   17090:	pop	{r4, r5}
   17094:	bx	lr
   17098:	ldr	r1, [r1]
   1709c:	ldr	r0, [r0]
   170a0:	pop	{r4, r5}
   170a4:	b	118d8 <strcmp@plt>
   170a8:	mov	r0, #1
   170ac:	bx	lr
   170b0:	mvn	r0, #0
   170b4:	b	17090 <__assert_fail@plt+0x52d8>
   170b8:	mvn	r0, #0
   170bc:	bx	lr
   170c0:	ldr	r2, [r1, #120]	; 0x78
   170c4:	ldr	r3, [r0, #120]	; 0x78
   170c8:	cmp	r2, #9
   170cc:	cmpne	r2, #3
   170d0:	moveq	r2, #1
   170d4:	movne	r2, #0
   170d8:	cmp	r3, #9
   170dc:	cmpne	r3, #3
   170e0:	mov	ip, r1
   170e4:	moveq	r3, #1
   170e8:	eor	r1, r2, #1
   170ec:	movne	r3, #0
   170f0:	tst	r3, r1
   170f4:	bne	17160 <__assert_fail@plt+0x53a8>
   170f8:	eor	r3, r3, #1
   170fc:	tst	r2, r3
   17100:	bne	17150 <__assert_fail@plt+0x5398>
   17104:	ldrd	r2, [r0, #64]	; 0x40
   17108:	push	{r4, r5}
   1710c:	ldrd	r4, [ip, #64]	; 0x40
   17110:	cmp	r2, r4
   17114:	sbcs	r1, r3, r5
   17118:	blt	17158 <__assert_fail@plt+0x53a0>
   1711c:	cmp	r3, r5
   17120:	cmpeq	r2, r4
   17124:	beq	17140 <__assert_fail@plt+0x5388>
   17128:	cmp	r4, r2
   1712c:	sbcs	r3, r5, r3
   17130:	movlt	r0, #1
   17134:	movge	r0, #0
   17138:	pop	{r4, r5}
   1713c:	bx	lr
   17140:	ldr	r1, [r0]
   17144:	pop	{r4, r5}
   17148:	ldr	r0, [ip]
   1714c:	b	14878 <__assert_fail@plt+0x2ac0>
   17150:	mov	r0, #1
   17154:	bx	lr
   17158:	mvn	r0, #0
   1715c:	b	17138 <__assert_fail@plt+0x5380>
   17160:	mvn	r0, #0
   17164:	bx	lr
   17168:	ldr	r2, [r1, #120]	; 0x78
   1716c:	ldr	r3, [r0, #120]	; 0x78
   17170:	cmp	r2, #9
   17174:	cmpne	r2, #3
   17178:	moveq	r2, #1
   1717c:	movne	r2, #0
   17180:	cmp	r3, #9
   17184:	cmpne	r3, #3
   17188:	mov	ip, r1
   1718c:	moveq	r3, #1
   17190:	eor	r1, r2, #1
   17194:	movne	r3, #0
   17198:	tst	r3, r1
   1719c:	bne	171e8 <__assert_fail@plt+0x5430>
   171a0:	eor	r3, r3, #1
   171a4:	tst	r2, r3
   171a8:	beq	171b8 <__assert_fail@plt+0x5400>
   171ac:	mov	r3, #1
   171b0:	mov	r0, r3
   171b4:	bx	lr
   171b8:	ldr	r2, [r0, #104]	; 0x68
   171bc:	ldr	r3, [ip, #104]	; 0x68
   171c0:	cmp	r2, r3
   171c4:	blt	171e8 <__assert_fail@plt+0x5430>
   171c8:	bgt	171ac <__assert_fail@plt+0x53f4>
   171cc:	ldr	r3, [r0, #108]	; 0x6c
   171d0:	ldr	r2, [ip, #108]	; 0x6c
   171d4:	subs	r3, r3, r2
   171d8:	bne	171b0 <__assert_fail@plt+0x53f8>
   171dc:	ldr	r1, [r0]
   171e0:	ldr	r0, [ip]
   171e4:	b	118d8 <strcmp@plt>
   171e8:	mvn	r3, #0
   171ec:	b	171b0 <__assert_fail@plt+0x53f8>
   171f0:	ldr	r2, [r1, #120]	; 0x78
   171f4:	ldr	r3, [r0, #120]	; 0x78
   171f8:	cmp	r2, #9
   171fc:	cmpne	r2, #3
   17200:	moveq	r2, #1
   17204:	movne	r2, #0
   17208:	cmp	r3, #9
   1720c:	cmpne	r3, #3
   17210:	eor	ip, r2, #1
   17214:	moveq	r3, #1
   17218:	movne	r3, #0
   1721c:	tst	r3, ip
   17220:	bne	1726c <__assert_fail@plt+0x54b4>
   17224:	eor	r3, r3, #1
   17228:	tst	r2, r3
   1722c:	beq	1723c <__assert_fail@plt+0x5484>
   17230:	mov	r3, #1
   17234:	mov	r0, r3
   17238:	bx	lr
   1723c:	ldr	r2, [r1, #96]	; 0x60
   17240:	ldr	r3, [r0, #96]	; 0x60
   17244:	cmp	r2, r3
   17248:	blt	1726c <__assert_fail@plt+0x54b4>
   1724c:	bgt	17230 <__assert_fail@plt+0x5478>
   17250:	ldr	r3, [r1, #100]	; 0x64
   17254:	ldr	r2, [r0, #100]	; 0x64
   17258:	subs	r3, r3, r2
   1725c:	bne	17234 <__assert_fail@plt+0x547c>
   17260:	ldr	r1, [r1]
   17264:	ldr	r0, [r0]
   17268:	b	118d8 <strcmp@plt>
   1726c:	mvn	r3, #0
   17270:	b	17234 <__assert_fail@plt+0x547c>
   17274:	ldrd	r2, [r1, #64]	; 0x40
   17278:	push	{r4, r5}
   1727c:	ldrd	r4, [r0, #64]	; 0x40
   17280:	cmp	r2, r4
   17284:	sbcs	ip, r3, r5
   17288:	blt	172c0 <__assert_fail@plt+0x5508>
   1728c:	cmp	r3, r5
   17290:	cmpeq	r2, r4
   17294:	beq	172b0 <__assert_fail@plt+0x54f8>
   17298:	cmp	r4, r2
   1729c:	sbcs	r3, r5, r3
   172a0:	movlt	r0, #1
   172a4:	movge	r0, #0
   172a8:	pop	{r4, r5}
   172ac:	bx	lr
   172b0:	ldr	r1, [r1]
   172b4:	ldr	r0, [r0]
   172b8:	pop	{r4, r5}
   172bc:	b	14878 <__assert_fail@plt+0x2ac0>
   172c0:	mvn	r0, #0
   172c4:	b	172a8 <__assert_fail@plt+0x54f0>
   172c8:	ldrd	r2, [r0, #64]	; 0x40
   172cc:	push	{r4, r5}
   172d0:	mov	ip, r1
   172d4:	ldrd	r4, [r1, #64]	; 0x40
   172d8:	cmp	r2, r4
   172dc:	sbcs	r1, r3, r5
   172e0:	blt	17318 <__assert_fail@plt+0x5560>
   172e4:	cmp	r3, r5
   172e8:	cmpeq	r2, r4
   172ec:	beq	17308 <__assert_fail@plt+0x5550>
   172f0:	cmp	r4, r2
   172f4:	sbcs	r3, r5, r3
   172f8:	movlt	r0, #1
   172fc:	movge	r0, #0
   17300:	pop	{r4, r5}
   17304:	bx	lr
   17308:	ldr	r1, [r0]
   1730c:	pop	{r4, r5}
   17310:	ldr	r0, [ip]
   17314:	b	14878 <__assert_fail@plt+0x2ac0>
   17318:	mvn	r0, #0
   1731c:	b	17300 <__assert_fail@plt+0x5548>
   17320:	ldrd	r2, [r0, #64]	; 0x40
   17324:	push	{r4, r5}
   17328:	mov	ip, r1
   1732c:	ldrd	r4, [r1, #64]	; 0x40
   17330:	cmp	r2, r4
   17334:	sbcs	r1, r3, r5
   17338:	blt	17370 <__assert_fail@plt+0x55b8>
   1733c:	cmp	r3, r5
   17340:	cmpeq	r2, r4
   17344:	beq	17360 <__assert_fail@plt+0x55a8>
   17348:	cmp	r4, r2
   1734c:	sbcs	r3, r5, r3
   17350:	movlt	r0, #1
   17354:	movge	r0, #0
   17358:	pop	{r4, r5}
   1735c:	bx	lr
   17360:	ldr	r1, [r0]
   17364:	pop	{r4, r5}
   17368:	ldr	r0, [ip]
   1736c:	b	118d8 <strcmp@plt>
   17370:	mvn	r0, #0
   17374:	b	17358 <__assert_fail@plt+0x55a0>
   17378:	ldrd	r2, [r1, #64]	; 0x40
   1737c:	push	{r4, r5}
   17380:	ldrd	r4, [r0, #64]	; 0x40
   17384:	cmp	r2, r4
   17388:	sbcs	ip, r3, r5
   1738c:	blt	173c4 <__assert_fail@plt+0x560c>
   17390:	cmp	r3, r5
   17394:	cmpeq	r2, r4
   17398:	beq	173b4 <__assert_fail@plt+0x55fc>
   1739c:	cmp	r4, r2
   173a0:	sbcs	r3, r5, r3
   173a4:	movlt	r0, #1
   173a8:	movge	r0, #0
   173ac:	pop	{r4, r5}
   173b0:	bx	lr
   173b4:	ldr	r1, [r1]
   173b8:	ldr	r0, [r0]
   173bc:	pop	{r4, r5}
   173c0:	b	118d8 <strcmp@plt>
   173c4:	mvn	r0, #0
   173c8:	b	173ac <__assert_fail@plt+0x55f4>
   173cc:	ldr	r3, [pc, #120]	; 1744c <__assert_fail@plt+0x5694>
   173d0:	push	{r4, r5, r6, lr}
   173d4:	sub	sp, sp, #24
   173d8:	ldr	r4, [pc, #112]	; 17450 <__assert_fail@plt+0x5698>
   173dc:	ldrb	r5, [r3, #3828]	; 0xef4
   173e0:	mov	r6, r0
   173e4:	ldr	r3, [r4]
   173e8:	cmp	r5, #0
   173ec:	str	r3, [sp, #20]
   173f0:	beq	1742c <__assert_fail@plt+0x5674>
   173f4:	str	r6, [sp]
   173f8:	add	r0, sp, #8
   173fc:	ldr	r3, [pc, #80]	; 17454 <__assert_fail@plt+0x569c>
   17400:	mov	r2, #11
   17404:	mov	r1, #1
   17408:	bl	11c20 <__sprintf_chk@plt>
   1740c:	add	r0, sp, #8
   17410:	bl	11bf0 <strlen@plt>
   17414:	ldr	r2, [sp, #20]
   17418:	ldr	r3, [r4]
   1741c:	cmp	r2, r3
   17420:	bne	17448 <__assert_fail@plt+0x5690>
   17424:	add	sp, sp, #24
   17428:	pop	{r4, r5, r6, pc}
   1742c:	bl	1d418 <__assert_fail@plt+0xb660>
   17430:	cmp	r0, #0
   17434:	beq	173f4 <__assert_fail@plt+0x563c>
   17438:	mov	r1, r5
   1743c:	bl	1de50 <__assert_fail@plt+0xc098>
   17440:	bic	r0, r0, r0, asr #31
   17444:	b	17414 <__assert_fail@plt+0x565c>
   17448:	bl	119b0 <__stack_chk_fail@plt>
   1744c:	andeq	sl, r3, r8, lsr #6
   17450:	andeq	r9, r3, r0, lsl #30
   17454:	andeq	r6, r2, r4, lsl r6
   17458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1745c:	mov	r9, r0
   17460:	ldr	r4, [pc, #3268]	; 1812c <__assert_fail@plt+0x6374>
   17464:	ldr	r0, [pc, #3268]	; 18130 <__assert_fail@plt+0x6378>
   17468:	add	fp, sp, #32
   1746c:	sub	sp, sp, #836	; 0x344
   17470:	ldr	ip, [r4, #3088]	; 0xc10
   17474:	ldr	lr, [r4, #4088]	; 0xff8
   17478:	ldr	r0, [r0]
   1747c:	cmp	ip, lr
   17480:	str	r0, [fp, #-40]	; 0xffffffd8
   17484:	mov	r6, r1
   17488:	str	r2, [fp, #-828]	; 0xfffffcc4
   1748c:	mov	r7, r3
   17490:	ldr	r0, [r4, #3408]	; 0xd50
   17494:	bne	174e8 <__assert_fail@plt+0x5730>
   17498:	mov	r2, #304	; 0x130
   1749c:	sub	r1, fp, #836	; 0x344
   174a0:	umull	r2, r3, ip, r2
   174a4:	strd	r2, [r1]
   174a8:	ldr	r2, [fp, #-836]	; 0xfffffcbc
   174ac:	adds	r3, r3, #0
   174b0:	movne	r3, #1
   174b4:	cmp	r2, #0
   174b8:	blt	18128 <__assert_fail@plt+0x6370>
   174bc:	cmp	r3, #0
   174c0:	bne	18128 <__assert_fail@plt+0x6370>
   174c4:	add	r1, ip, ip, lsl #3
   174c8:	add	r1, ip, r1, lsl #1
   174cc:	lsl	r1, r1, #4
   174d0:	bl	2221c <__assert_fail@plt+0x10464>
   174d4:	ldr	r3, [r4, #4088]	; 0xff8
   174d8:	ldr	ip, [r4, #3088]	; 0xc10
   174dc:	lsl	r3, r3, #1
   174e0:	str	r3, [r4, #4088]	; 0xff8
   174e4:	str	r0, [r4, #3408]	; 0xd50
   174e8:	add	r5, ip, ip, lsl #3
   174ec:	mov	r2, #152	; 0x98
   174f0:	add	ip, ip, r5, lsl #1
   174f4:	mov	r1, #0
   174f8:	add	r5, r0, ip, lsl #3
   174fc:	mov	r0, r5
   17500:	bl	11c44 <memset@plt>
   17504:	ldrb	r2, [r4, #3096]	; 0xc18
   17508:	mvn	r3, #0
   1750c:	str	r6, [r5, #120]	; 0x78
   17510:	cmp	r2, #0
   17514:	str	r3, [r5, #144]	; 0x90
   17518:	bne	17528 <__assert_fail@plt+0x5770>
   1751c:	ldrb	r3, [r4, #3978]	; 0xf8a
   17520:	cmp	r3, #0
   17524:	bne	17c78 <__assert_fail@plt+0x5ec0>
   17528:	ldr	r3, [fp, #-828]	; 0xfffffcc4
   1752c:	cmp	r3, #0
   17530:	ldrb	r3, [r4, #4092]	; 0xffc
   17534:	str	r3, [fp, #-844]	; 0xfffffcb4
   17538:	beq	17698 <__assert_fail@plt+0x58e0>
   1753c:	ldrb	r8, [r9]
   17540:	cmp	r8, #47	; 0x2f
   17544:	beq	17ee8 <__assert_fail@plt+0x6130>
   17548:	ldrb	r2, [r7]
   1754c:	ldr	r3, [pc, #3040]	; 18134 <__assert_fail@plt+0x637c>
   17550:	cmp	r2, #0
   17554:	str	r3, [fp, #-836]	; 0xfffffcbc
   17558:	moveq	sl, r9
   1755c:	bne	17bd0 <__assert_fail@plt+0x5e18>
   17560:	ldr	r3, [fp, #-844]	; 0xfffffcb4
   17564:	cmp	r3, #0
   17568:	bne	17ac0 <__assert_fail@plt+0x5d08>
   1756c:	ldr	r3, [fp, #-836]	; 0xfffffcbc
   17570:	add	r7, r5, #16
   17574:	ldr	r8, [r3, #-4088]	; 0xfffff008
   17578:	cmp	r8, #3
   1757c:	bcc	176f8 <__assert_fail@plt+0x5940>
   17580:	cmp	r8, #4
   17584:	bls	17af8 <__assert_fail@plt+0x5d40>
   17588:	cmp	r8, #5
   1758c:	bne	176f8 <__assert_fail@plt+0x5940>
   17590:	mov	r2, r7
   17594:	mov	r1, sl
   17598:	mov	r0, #3
   1759c:	bl	11d34 <__xstat64@plt>
   175a0:	mov	r8, #1
   175a4:	cmp	r0, #0
   175a8:	bne	17714 <__assert_fail@plt+0x595c>
   175ac:	mov	r3, #1
   175b0:	cmp	r6, #5
   175b4:	strb	r3, [r5, #132]	; 0x84
   175b8:	beq	17a40 <__assert_fail@plt+0x5c88>
   175bc:	ldr	r3, [r5, #32]
   175c0:	and	r3, r3, #61440	; 0xf000
   175c4:	cmp	r3, #32768	; 0x8000
   175c8:	beq	17a40 <__assert_fail@plt+0x5c88>
   175cc:	ldr	r3, [r4, #4072]	; 0xfe8
   175d0:	cmp	r3, #0
   175d4:	beq	178b0 <__assert_fail@plt+0x5af8>
   175d8:	ldrb	r3, [r4, #4009]	; 0xfa9
   175dc:	cmp	r3, #0
   175e0:	bne	178b0 <__assert_fail@plt+0x5af8>
   175e4:	ldr	r3, [r5, #32]
   175e8:	and	r3, r3, #61440	; 0xf000
   175ec:	cmp	r3, #40960	; 0xa000
   175f0:	beq	17e1c <__assert_fail@plt+0x6064>
   175f4:	cmp	r3, #16384	; 0x4000
   175f8:	movne	r3, #5
   175fc:	strne	r3, [r5, #120]	; 0x78
   17600:	beq	17ef8 <__assert_fail@plt+0x6140>
   17604:	ldr	r3, [r4, #4072]	; 0xfe8
   17608:	ldrd	r0, [r5, #80]	; 0x50
   1760c:	sub	r2, fp, #828	; 0x33c
   17610:	cmp	r3, #0
   17614:	strd	r0, [r2]
   17618:	beq	17754 <__assert_fail@plt+0x599c>
   1761c:	ldrb	r3, [r4, #3993]	; 0xf99
   17620:	cmp	r3, #0
   17624:	bne	17754 <__assert_fail@plt+0x599c>
   17628:	ldrb	r3, [r4, #4009]	; 0xfa9
   1762c:	cmp	r3, #0
   17630:	bne	177d8 <__assert_fail@plt+0x5a20>
   17634:	ldrb	r3, [r4, #3992]	; 0xf98
   17638:	cmp	r3, #0
   1763c:	beq	1765c <__assert_fail@plt+0x58a4>
   17640:	sub	r2, fp, #692	; 0x2b4
   17644:	ldrd	r0, [r5, #112]	; 0x70
   17648:	bl	1d828 <__assert_fail@plt+0xba70>
   1764c:	bl	11bf0 <strlen@plt>
   17650:	ldr	r3, [r4, #3100]	; 0xc1c
   17654:	cmp	r0, r3
   17658:	strgt	r0, [r4, #3100]	; 0xc1c
   1765c:	mov	r0, r9
   17660:	bl	223ec <__assert_fail@plt+0x10634>
   17664:	ldr	r3, [r4, #3088]	; 0xc10
   17668:	add	r3, r3, #1
   1766c:	str	r3, [r4, #3088]	; 0xc10
   17670:	str	r0, [r5]
   17674:	ldr	r3, [pc, #2740]	; 18130 <__assert_fail@plt+0x6378>
   17678:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1767c:	sub	r1, fp, #828	; 0x33c
   17680:	ldr	r3, [r3]
   17684:	ldrd	r0, [r1]
   17688:	cmp	r2, r3
   1768c:	bne	18124 <__assert_fail@plt+0x636c>
   17690:	sub	sp, fp, #32
   17694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17698:	cmp	r3, #0
   1769c:	bne	17aa8 <__assert_fail@plt+0x5cf0>
   176a0:	ldrb	r3, [r4, #4093]	; 0xffd
   176a4:	cmp	r3, #0
   176a8:	beq	17c94 <__assert_fail@plt+0x5edc>
   176ac:	ldr	r3, [pc, #2688]	; 18134 <__assert_fail@plt+0x637c>
   176b0:	str	r3, [fp, #-836]	; 0xfffffcbc
   176b4:	ldrb	r8, [r9]
   176b8:	cmp	r8, #47	; 0x2f
   176bc:	beq	176cc <__assert_fail@plt+0x5914>
   176c0:	ldrb	r2, [r7]
   176c4:	cmp	r2, #0
   176c8:	bne	17bd0 <__assert_fail@plt+0x5e18>
   176cc:	ldr	r3, [fp, #-836]	; 0xfffffcbc
   176d0:	add	r7, r5, #16
   176d4:	ldr	r3, [r3, #-4088]	; 0xfffff008
   176d8:	cmp	r3, #3
   176dc:	bcc	176f4 <__assert_fail@plt+0x593c>
   176e0:	cmp	r3, #4
   176e4:	bls	176f4 <__assert_fail@plt+0x593c>
   176e8:	cmp	r3, #5
   176ec:	moveq	sl, r9
   176f0:	beq	17590 <__assert_fail@plt+0x57d8>
   176f4:	mov	sl, r9
   176f8:	mov	r2, r7
   176fc:	mov	r1, sl
   17700:	mov	r0, #3
   17704:	bl	11d70 <__lxstat64@plt>
   17708:	mov	r8, #0
   1770c:	cmp	r0, #0
   17710:	beq	175ac <__assert_fail@plt+0x57f4>
   17714:	mov	r2, #5
   17718:	ldr	r1, [pc, #2584]	; 18138 <__assert_fail@plt+0x6380>
   1771c:	mov	r0, #0
   17720:	bl	119a4 <dcgettext@plt>
   17724:	ldr	r6, [fp, #-828]	; 0xfffffcc4
   17728:	mov	r2, sl
   1772c:	mov	r1, r0
   17730:	mov	r0, r6
   17734:	bl	14d00 <__assert_fail@plt+0x2f48>
   17738:	cmp	r6, #0
   1773c:	beq	17ddc <__assert_fail@plt+0x6024>
   17740:	mov	r2, #0
   17744:	mov	r3, #0
   17748:	sub	r1, fp, #828	; 0x33c
   1774c:	strd	r2, [r1]
   17750:	b	17674 <__assert_fail@plt+0x58bc>
   17754:	ldr	r1, [pc, #2528]	; 1813c <__assert_fail@plt+0x6384>
   17758:	mov	r2, #512	; 0x200
   1775c:	mov	r3, #0
   17760:	ldrd	r0, [r1]
   17764:	sub	r8, fp, #692	; 0x2b4
   17768:	strd	r2, [sp]
   1776c:	strd	r0, [sp, #8]
   17770:	sub	r1, fp, #828	; 0x33c
   17774:	ldr	r3, [r4, #3996]	; 0xf9c
   17778:	mov	r2, r8
   1777c:	ldrd	r0, [r1]
   17780:	bl	1c860 <__assert_fail@plt+0xaaa8>
   17784:	mov	r1, #0
   17788:	bl	1de50 <__assert_fail@plt+0xc098>
   1778c:	ldr	r3, [r4, #3104]	; 0xc20
   17790:	cmp	r0, r3
   17794:	ldr	r3, [r4, #4072]	; 0xfe8
   17798:	strgt	r0, [r4, #3104]	; 0xc20
   1779c:	cmp	r3, #0
   177a0:	bne	17628 <__assert_fail@plt+0x5870>
   177a4:	ldr	sl, [pc, #2452]	; 18140 <__assert_fail@plt+0x6388>
   177a8:	ldrb	r3, [sl, #202]	; 0xca
   177ac:	cmp	r3, #0
   177b0:	bne	17f28 <__assert_fail@plt+0x6170>
   177b4:	ldrb	r3, [sl, #203]	; 0xcb
   177b8:	cmp	r3, #0
   177bc:	bne	17f48 <__assert_fail@plt+0x6190>
   177c0:	ldrb	r3, [r4, #4008]	; 0xfa8
   177c4:	cmp	r3, #0
   177c8:	bne	17f90 <__assert_fail@plt+0x61d8>
   177cc:	ldrb	r3, [r4, #4009]	; 0xfa9
   177d0:	cmp	r3, #0
   177d4:	beq	177ec <__assert_fail@plt+0x5a34>
   177d8:	ldr	r0, [r5, #128]	; 0x80
   177dc:	bl	11bf0 <strlen@plt>
   177e0:	ldr	r3, [r4, #3124]	; 0xc34
   177e4:	cmp	r0, r3
   177e8:	strgt	r0, [r4, #3124]	; 0xc34
   177ec:	ldr	r1, [r4, #4072]	; 0xfe8
   177f0:	cmp	r1, #0
   177f4:	bne	17634 <__assert_fail@plt+0x587c>
   177f8:	sub	r2, fp, #716	; 0x2cc
   177fc:	ldr	r0, [r5, #36]	; 0x24
   17800:	bl	1d828 <__assert_fail@plt+0xba70>
   17804:	bl	11bf0 <strlen@plt>
   17808:	ldr	r3, [r4, #3108]	; 0xc24
   1780c:	cmp	r0, r3
   17810:	ldr	r3, [r5, #32]
   17814:	strgt	r0, [r4, #3108]	; 0xc24
   17818:	and	r3, r3, #45056	; 0xb000
   1781c:	cmp	r3, #8192	; 0x2000
   17820:	bne	17d84 <__assert_fail@plt+0x5fcc>
   17824:	ldr	r0, [r5, #48]	; 0x30
   17828:	ldr	r3, [r5, #52]	; 0x34
   1782c:	sub	r8, fp, #692	; 0x2b4
   17830:	bic	r3, r3, #4080	; 0xff0
   17834:	lsl	r0, r0, #12
   17838:	bic	r3, r3, #15
   1783c:	orr	r0, r3, r0, lsr #20
   17840:	mov	r2, r8
   17844:	mov	r1, #0
   17848:	bl	1d828 <__assert_fail@plt+0xba70>
   1784c:	bl	11bf0 <strlen@plt>
   17850:	ldr	r3, [r4, #3128]	; 0xc38
   17854:	mov	r2, r8
   17858:	cmp	r0, r3
   1785c:	strgt	r0, [r4, #3128]	; 0xc38
   17860:	ldrd	r0, [r5, #48]	; 0x30
   17864:	lsr	r3, r0, #12
   17868:	orr	r3, r3, r1, lsl #20
   1786c:	bic	r3, r3, #255	; 0xff
   17870:	uxtb	r0, r0
   17874:	orr	r0, r3, r0
   17878:	mov	r1, #0
   1787c:	bl	1d828 <__assert_fail@plt+0xba70>
   17880:	bl	11bf0 <strlen@plt>
   17884:	ldr	r2, [r4, #3132]	; 0xc3c
   17888:	ldr	r3, [r4, #3128]	; 0xc38
   1788c:	ldr	r1, [r4, #3136]	; 0xc40
   17890:	add	r3, r3, #2
   17894:	cmp	r0, r2
   17898:	movgt	r2, r0
   1789c:	add	r3, r3, r2
   178a0:	strgt	r0, [r4, #3132]	; 0xc3c
   178a4:	cmp	r3, r1
   178a8:	strgt	r3, [r4, #3136]	; 0xc40
   178ac:	b	17634 <__assert_fail@plt+0x587c>
   178b0:	ldr	r6, [pc, #2188]	; 18144 <__assert_fail@plt+0x638c>
   178b4:	ldrd	r0, [r5, #16]
   178b8:	ldrd	r2, [r6, #-8]
   178bc:	cmp	r1, r3
   178c0:	cmpeq	r0, r2
   178c4:	beq	18108 <__assert_fail@plt+0x6350>
   178c8:	cmp	r8, #0
   178cc:	mov	r0, sl
   178d0:	add	r1, r5, #128	; 0x80
   178d4:	beq	17b44 <__assert_fail@plt+0x5d8c>
   178d8:	bl	23804 <__assert_fail@plt+0x11a4c>
   178dc:	cmp	r0, #0
   178e0:	blt	17b50 <__assert_fail@plt+0x5d98>
   178e4:	ldr	r1, [r5, #128]	; 0x80
   178e8:	ldr	r0, [pc, #2136]	; 18148 <__assert_fail@plt+0x6390>
   178ec:	bl	118d8 <strcmp@plt>
   178f0:	ldr	r3, [r4, #4072]	; 0xfe8
   178f4:	adds	ip, r0, #0
   178f8:	movne	ip, #1
   178fc:	cmp	r3, #0
   17900:	beq	17e38 <__assert_fail@plt+0x6080>
   17904:	cmp	r0, #0
   17908:	beq	17e08 <__assert_fail@plt+0x6050>
   1790c:	mov	r3, #1
   17910:	str	r3, [r5, #136]	; 0x88
   17914:	strb	r3, [r4, #3097]	; 0xc19
   17918:	ldr	r3, [r5, #32]
   1791c:	and	r3, r3, #61440	; 0xf000
   17920:	cmp	r3, #40960	; 0xa000
   17924:	bne	175f4 <__assert_fail@plt+0x583c>
   17928:	ldr	r3, [r4, #4072]	; 0xfe8
   1792c:	cmp	r3, #0
   17930:	bne	17e1c <__assert_fail@plt+0x6064>
   17934:	ldr	r1, [r5, #64]	; 0x40
   17938:	mov	r0, sl
   1793c:	bl	1a094 <__assert_fail@plt+0x82dc>
   17940:	cmp	r0, #0
   17944:	mov	r6, r0
   17948:	str	r0, [r5, #4]
   1794c:	beq	18034 <__assert_fail@plt+0x627c>
   17950:	ldrb	r3, [r6]
   17954:	cmp	r3, #47	; 0x2f
   17958:	beq	180f8 <__assert_fail@plt+0x6340>
   1795c:	mov	r0, sl
   17960:	bl	1ac08 <__assert_fail@plt+0x8e50>
   17964:	subs	r8, r0, #0
   17968:	mov	r0, r6
   1796c:	beq	180a4 <__assert_fail@plt+0x62ec>
   17970:	bl	11bf0 <strlen@plt>
   17974:	add	r3, r8, #2
   17978:	add	r0, r3, r0
   1797c:	bl	221c0 <__assert_fail@plt+0x10408>
   17980:	add	r3, sl, r8
   17984:	mov	r1, sl
   17988:	ldrb	r3, [r3, #-1]
   1798c:	cmp	r3, #47	; 0x2f
   17990:	addne	r8, r8, #1
   17994:	mov	r2, r8
   17998:	mov	r7, r0
   1799c:	bl	11c5c <stpncpy@plt>
   179a0:	mov	r1, r6
   179a4:	bl	11aa0 <strcpy@plt>
   179a8:	cmp	r7, #0
   179ac:	beq	1805c <__assert_fail@plt+0x62a4>
   179b0:	ldr	r3, [r5, #144]	; 0x90
   179b4:	cmp	r3, #0
   179b8:	beq	180d8 <__assert_fail@plt+0x6320>
   179bc:	ldr	r3, [r4, #3840]	; 0xf00
   179c0:	cmp	r3, #1
   179c4:	bhi	179d8 <__assert_fail@plt+0x5c20>
   179c8:	ldr	r3, [fp, #-836]	; 0xfffffcbc
   179cc:	ldrb	r3, [r3, #-4084]	; 0xfffff00c
   179d0:	cmp	r3, #0
   179d4:	beq	17a24 <__assert_fail@plt+0x5c6c>
   179d8:	sub	r2, fp, #820	; 0x334
   179dc:	mov	r1, r7
   179e0:	mov	r0, #3
   179e4:	bl	11d34 <__xstat64@plt>
   179e8:	cmp	r0, #0
   179ec:	bne	17a24 <__assert_fail@plt+0x5c6c>
   179f0:	ldr	r3, [fp, #-828]	; 0xfffffcc4
   179f4:	cmp	r3, #0
   179f8:	mov	r3, #1
   179fc:	strb	r3, [r5, #133]	; 0x85
   17a00:	ldr	r3, [fp, #-804]	; 0xfffffcdc
   17a04:	beq	17a20 <__assert_fail@plt+0x5c68>
   17a08:	ldr	r2, [r4, #4072]	; 0xfe8
   17a0c:	cmp	r2, #0
   17a10:	beq	17a20 <__assert_fail@plt+0x5c68>
   17a14:	and	r2, r3, #61440	; 0xf000
   17a18:	cmp	r2, #16384	; 0x4000
   17a1c:	beq	17a24 <__assert_fail@plt+0x5c6c>
   17a20:	str	r3, [r5, #124]	; 0x7c
   17a24:	mov	r0, r7
   17a28:	bl	11938 <free@plt>
   17a2c:	ldr	r3, [r5, #32]
   17a30:	and	r3, r3, #61440	; 0xf000
   17a34:	cmp	r3, #40960	; 0xa000
   17a38:	beq	17e2c <__assert_fail@plt+0x6074>
   17a3c:	b	175f4 <__assert_fail@plt+0x583c>
   17a40:	ldrb	r3, [r4, #3976]	; 0xf88
   17a44:	cmp	r3, #0
   17a48:	beq	175cc <__assert_fail@plt+0x5814>
   17a4c:	mov	r0, #21
   17a50:	bl	14160 <__assert_fail@plt+0x23a8>
   17a54:	cmp	r0, #0
   17a58:	beq	175cc <__assert_fail@plt+0x5814>
   17a5c:	ldrd	r2, [r5, #16]
   17a60:	sub	r1, fp, #844	; 0x34c
   17a64:	ldr	r6, [pc, #1760]	; 1814c <__assert_fail@plt+0x6394>
   17a68:	strd	r2, [r1]
   17a6c:	bl	11c14 <__errno_location@plt>
   17a70:	sub	r3, fp, #844	; 0x34c
   17a74:	ldrd	r2, [r3]
   17a78:	mov	ip, r0
   17a7c:	ldrd	r0, [r6]
   17a80:	cmp	r3, r1
   17a84:	cmpeq	r2, r0
   17a88:	moveq	r3, #95	; 0x5f
   17a8c:	streq	r3, [ip]
   17a90:	movne	r1, #95	; 0x5f
   17a94:	strdne	r2, [r6]
   17a98:	mov	r3, #0
   17a9c:	strne	r1, [ip]
   17aa0:	strb	r3, [r5, #140]	; 0x8c
   17aa4:	b	175cc <__assert_fail@plt+0x5814>
   17aa8:	ldrb	r8, [r9]
   17aac:	cmp	r8, #47	; 0x2f
   17ab0:	bne	17bb8 <__assert_fail@plt+0x5e00>
   17ab4:	ldr	r3, [pc, #1656]	; 18134 <__assert_fail@plt+0x637c>
   17ab8:	mov	sl, r9
   17abc:	str	r3, [fp, #-836]	; 0xfffffcbc
   17ac0:	mov	r1, #2
   17ac4:	mov	r0, sl
   17ac8:	bl	1a4fc <__assert_fail@plt+0x8744>
   17acc:	cmp	r0, #0
   17ad0:	str	r0, [r5, #8]
   17ad4:	bne	1756c <__assert_fail@plt+0x57b4>
   17ad8:	mov	r2, #5
   17adc:	ldr	r1, [pc, #1644]	; 18150 <__assert_fail@plt+0x6398>
   17ae0:	bl	119a4 <dcgettext@plt>
   17ae4:	mov	r2, sl
   17ae8:	mov	r1, r0
   17aec:	ldr	r0, [fp, #-828]	; 0xfffffcc4
   17af0:	bl	14d00 <__assert_fail@plt+0x2f48>
   17af4:	b	1756c <__assert_fail@plt+0x57b4>
   17af8:	ldr	r3, [fp, #-828]	; 0xfffffcc4
   17afc:	cmp	r3, #0
   17b00:	beq	176f8 <__assert_fail@plt+0x5940>
   17b04:	mov	r2, r7
   17b08:	mov	r1, sl
   17b0c:	mov	r0, #3
   17b10:	bl	11d34 <__xstat64@plt>
   17b14:	cmp	r8, #3
   17b18:	beq	17b34 <__assert_fail@plt+0x5d7c>
   17b1c:	cmp	r0, #0
   17b20:	blt	18000 <__assert_fail@plt+0x6248>
   17b24:	ldr	r3, [r5, #32]
   17b28:	and	r3, r3, #61440	; 0xf000
   17b2c:	cmp	r3, #16384	; 0x4000
   17b30:	bne	176f8 <__assert_fail@plt+0x5940>
   17b34:	cmp	r0, #0
   17b38:	bne	18010 <__assert_fail@plt+0x6258>
   17b3c:	ldr	r8, [fp, #-828]	; 0xfffffcc4
   17b40:	b	175ac <__assert_fail@plt+0x57f4>
   17b44:	bl	2381c <__assert_fail@plt+0x11a64>
   17b48:	cmp	r0, #0
   17b4c:	bge	178e4 <__assert_fail@plt+0x5b2c>
   17b50:	bl	11c14 <__errno_location@plt>
   17b54:	ldr	r1, [r0]
   17b58:	mov	r8, r0
   17b5c:	sub	r3, r1, #22
   17b60:	bics	r3, r3, #16
   17b64:	sub	r0, r1, #95	; 0x5f
   17b68:	clz	r0, r0
   17b6c:	lsr	r0, r0, #5
   17b70:	movne	r3, r0
   17b74:	moveq	r3, #1
   17b78:	cmp	r3, #0
   17b7c:	ldrdne	r2, [r5, #16]
   17b80:	strdne	r2, [r6, #-8]
   17b84:	cmp	r1, #61	; 0x3d
   17b88:	movne	r1, r0
   17b8c:	orreq	r1, r0, #1
   17b90:	ldr	r3, [pc, #1468]	; 18154 <__assert_fail@plt+0x639c>
   17b94:	cmp	r1, #0
   17b98:	str	r3, [r5, #128]	; 0x80
   17b9c:	beq	17fe0 <__assert_fail@plt+0x6228>
   17ba0:	ldr	r3, [r4, #4072]	; 0xfe8
   17ba4:	cmp	r3, #0
   17ba8:	beq	180f0 <__assert_fail@plt+0x6338>
   17bac:	mov	r3, #0
   17bb0:	str	r3, [r5, #136]	; 0x88
   17bb4:	b	175e4 <__assert_fail@plt+0x582c>
   17bb8:	ldrb	r2, [r7]
   17bbc:	ldr	r3, [pc, #1392]	; 18134 <__assert_fail@plt+0x637c>
   17bc0:	cmp	r2, #0
   17bc4:	str	r3, [fp, #-836]	; 0xfffffcbc
   17bc8:	moveq	sl, r9
   17bcc:	beq	17ac0 <__assert_fail@plt+0x5d08>
   17bd0:	mov	r0, r9
   17bd4:	str	r2, [fp, #-848]	; 0xfffffcb0
   17bd8:	bl	11bf0 <strlen@plt>
   17bdc:	mov	sl, r0
   17be0:	mov	r0, r7
   17be4:	bl	11bf0 <strlen@plt>
   17be8:	ldr	r2, [fp, #-848]	; 0xfffffcb0
   17bec:	ldrb	r1, [r7, #1]
   17bf0:	cmp	r2, #46	; 0x2e
   17bf4:	add	r0, sl, r0
   17bf8:	add	r0, r0, #9
   17bfc:	bic	r0, r0, #7
   17c00:	sub	sp, sp, r0
   17c04:	add	sl, sp, #16
   17c08:	beq	17ed8 <__assert_fail@plt+0x6120>
   17c0c:	add	r0, r7, #1
   17c10:	mov	ip, sl
   17c14:	b	17c24 <__assert_fail@plt+0x5e6c>
   17c18:	mov	r2, r1
   17c1c:	ldrb	r1, [r0, #1]!
   17c20:	mov	ip, r3
   17c24:	mov	r3, ip
   17c28:	cmp	r1, #0
   17c2c:	strb	r2, [r3], #1
   17c30:	bne	17c18 <__assert_fail@plt+0x5e60>
   17c34:	cmp	r7, r0
   17c38:	bcs	17c50 <__assert_fail@plt+0x5e98>
   17c3c:	ldrb	r2, [r0, #-1]
   17c40:	cmp	r2, #47	; 0x2f
   17c44:	movne	r2, #47	; 0x2f
   17c48:	strbne	r2, [r3]
   17c4c:	addne	r3, ip, #2
   17c50:	cmp	r8, #0
   17c54:	beq	17c6c <__assert_fail@plt+0x5eb4>
   17c58:	mov	r2, r9
   17c5c:	strb	r8, [r3], #1
   17c60:	ldrb	r8, [r2, #1]!
   17c64:	cmp	r8, #0
   17c68:	bne	17c5c <__assert_fail@plt+0x5ea4>
   17c6c:	mov	r2, #0
   17c70:	strb	r2, [r3]
   17c74:	b	17560 <__assert_fail@plt+0x57a8>
   17c78:	mov	r0, r9
   17c7c:	bl	145c4 <__assert_fail@plt+0x280c>
   17c80:	cmp	r0, #0
   17c84:	movne	r3, #1
   17c88:	str	r0, [r5, #144]	; 0x90
   17c8c:	strbne	r3, [r4, #3096]	; 0xc18
   17c90:	b	17528 <__assert_fail@plt+0x5770>
   17c94:	cmp	r6, #3
   17c98:	beq	18064 <__assert_fail@plt+0x62ac>
   17c9c:	ldrb	r2, [r4, #3992]	; 0xf98
   17ca0:	cmp	r2, #0
   17ca4:	bne	17fe8 <__assert_fail@plt+0x6230>
   17ca8:	ldrb	r3, [r4, #4094]	; 0xffe
   17cac:	cmp	r3, #0
   17cb0:	beq	17d70 <__assert_fail@plt+0x5fb8>
   17cb4:	cmp	r6, #0
   17cb8:	cmpne	r6, #6
   17cbc:	clz	r3, r6
   17cc0:	lsr	r3, r3, #5
   17cc4:	bne	17d10 <__assert_fail@plt+0x5f58>
   17cc8:	ldr	r0, [pc, #1124]	; 18134 <__assert_fail@plt+0x637c>
   17ccc:	str	r0, [fp, #-836]	; 0xfffffcbc
   17cd0:	ldr	r1, [r0, #-4088]	; 0xfffff008
   17cd4:	cmp	r1, #5
   17cd8:	beq	176b4 <__assert_fail@plt+0x58fc>
   17cdc:	ldrb	r1, [r4, #3985]	; 0xf91
   17ce0:	cmp	r1, #0
   17ce4:	bne	176b4 <__assert_fail@plt+0x58fc>
   17ce8:	ldrb	r1, [r0, #-4084]	; 0xfffff00c
   17cec:	cmp	r1, #0
   17cf0:	bne	176b4 <__assert_fail@plt+0x58fc>
   17cf4:	cmp	r2, #0
   17cf8:	bne	176b4 <__assert_fail@plt+0x58fc>
   17cfc:	ldrb	r2, [r4, #4094]	; 0xffe
   17d00:	cmp	r2, #0
   17d04:	beq	17d70 <__assert_fail@plt+0x5fb8>
   17d08:	cmp	r3, #0
   17d0c:	bne	176b4 <__assert_fail@plt+0x58fc>
   17d10:	cmp	r6, #5
   17d14:	bne	17d70 <__assert_fail@plt+0x5fb8>
   17d18:	ldr	r3, [r4, #3840]	; 0xf00
   17d1c:	cmp	r3, #3
   17d20:	beq	176ac <__assert_fail@plt+0x58f4>
   17d24:	ldrb	r3, [r4, #3976]	; 0xf88
   17d28:	cmp	r3, #0
   17d2c:	beq	17d70 <__assert_fail@plt+0x5fb8>
   17d30:	mov	r0, #14
   17d34:	bl	14160 <__assert_fail@plt+0x23a8>
   17d38:	cmp	r0, #0
   17d3c:	bne	176ac <__assert_fail@plt+0x58f4>
   17d40:	mov	r0, #16
   17d44:	bl	14160 <__assert_fail@plt+0x23a8>
   17d48:	cmp	r0, #0
   17d4c:	bne	176ac <__assert_fail@plt+0x58f4>
   17d50:	mov	r0, #17
   17d54:	bl	14160 <__assert_fail@plt+0x23a8>
   17d58:	cmp	r0, #0
   17d5c:	bne	176ac <__assert_fail@plt+0x58f4>
   17d60:	mov	r0, #21
   17d64:	bl	14160 <__assert_fail@plt+0x23a8>
   17d68:	cmp	r0, #0
   17d6c:	bne	176ac <__assert_fail@plt+0x58f4>
   17d70:	mov	r2, #0
   17d74:	mov	r3, #0
   17d78:	sub	r1, fp, #828	; 0x33c
   17d7c:	strd	r2, [r1]
   17d80:	b	1765c <__assert_fail@plt+0x58a4>
   17d84:	ldrd	r0, [r5, #64]	; 0x40
   17d88:	ldr	r2, [pc, #944]	; 18140 <__assert_fail@plt+0x6388>
   17d8c:	sub	r3, fp, #836	; 0x344
   17d90:	strd	r0, [r3]
   17d94:	ldrd	r0, [r2, #208]	; 0xd0
   17d98:	sub	r2, fp, #836	; 0x344
   17d9c:	ldr	r3, [r4, #4012]	; 0xfac
   17da0:	mov	r6, r0
   17da4:	mov	r7, r1
   17da8:	ldrd	r0, [r2]
   17dac:	strd	r6, [sp, #8]
   17db0:	mov	r6, #1
   17db4:	mov	r7, #0
   17db8:	sub	r2, fp, #692	; 0x2b4
   17dbc:	strd	r6, [sp]
   17dc0:	bl	1c860 <__assert_fail@plt+0xaaa8>
   17dc4:	mov	r1, #0
   17dc8:	bl	1de50 <__assert_fail@plt+0xc098>
   17dcc:	ldr	r3, [r4, #3136]	; 0xc40
   17dd0:	cmp	r0, r3
   17dd4:	strgt	r0, [r4, #3136]	; 0xc40
   17dd8:	b	17634 <__assert_fail@plt+0x587c>
   17ddc:	mov	r0, r9
   17de0:	bl	223ec <__assert_fail@plt+0x10634>
   17de4:	ldr	r3, [r4, #3088]	; 0xc10
   17de8:	mov	r6, #0
   17dec:	mov	r7, #0
   17df0:	sub	r2, fp, #828	; 0x33c
   17df4:	add	r3, r3, #1
   17df8:	strd	r6, [r2]
   17dfc:	str	r3, [r4, #3088]	; 0xc10
   17e00:	str	r0, [r5]
   17e04:	b	17674 <__assert_fail@plt+0x58bc>
   17e08:	ldr	r3, [r5, #32]
   17e0c:	str	r0, [r5, #136]	; 0x88
   17e10:	and	r3, r3, #61440	; 0xf000
   17e14:	cmp	r3, #40960	; 0xa000
   17e18:	bne	175f4 <__assert_fail@plt+0x583c>
   17e1c:	ldr	r3, [fp, #-836]	; 0xfffffcbc
   17e20:	ldrb	r3, [r3, #-4084]	; 0xfffff00c
   17e24:	cmp	r3, #0
   17e28:	bne	17934 <__assert_fail@plt+0x5b7c>
   17e2c:	mov	r3, #6
   17e30:	str	r3, [r5, #120]	; 0x78
   17e34:	b	17604 <__assert_fail@plt+0x584c>
   17e38:	str	ip, [fp, #-844]	; 0xfffffcb4
   17e3c:	bl	11c14 <__errno_location@plt>
   17e40:	ldr	ip, [fp, #-844]	; 0xfffffcb4
   17e44:	mov	r8, r0
   17e48:	ldrd	r0, [r5, #16]
   17e4c:	ldrd	r2, [r6]
   17e50:	cmp	r1, r3
   17e54:	cmpeq	r0, r2
   17e58:	moveq	r3, #95	; 0x5f
   17e5c:	streq	r3, [r8]
   17e60:	moveq	r0, #0
   17e64:	beq	17fcc <__assert_fail@plt+0x6214>
   17e68:	mov	r3, #0
   17e6c:	str	r3, [r8]
   17e70:	mov	r1, r7
   17e74:	mov	r0, sl
   17e78:	str	ip, [fp, #-844]	; 0xfffffcb4
   17e7c:	bl	1ad68 <__assert_fail@plt+0x8fb0>
   17e80:	mov	r3, #0
   17e84:	cmp	r0, #0
   17e88:	ble	17fa8 <__assert_fail@plt+0x61f0>
   17e8c:	mov	r0, r3
   17e90:	mov	ip, #1
   17e94:	mov	r3, #2
   17e98:	cmp	r0, #0
   17e9c:	str	r3, [r5, #136]	; 0x88
   17ea0:	strb	ip, [r4, #3097]	; 0xc19
   17ea4:	beq	17918 <__assert_fail@plt+0x5b60>
   17ea8:	bl	11c14 <__errno_location@plt>
   17eac:	mov	r2, sl
   17eb0:	mov	r1, #3
   17eb4:	ldr	r6, [r0]
   17eb8:	mov	r0, #0
   17ebc:	bl	218f8 <__assert_fail@plt+0xfb40>
   17ec0:	mov	r1, r6
   17ec4:	ldr	r2, [pc, #652]	; 18158 <__assert_fail@plt+0x63a0>
   17ec8:	mov	r3, r0
   17ecc:	mov	r0, #0
   17ed0:	bl	11adc <error@plt>
   17ed4:	b	17918 <__assert_fail@plt+0x5b60>
   17ed8:	cmp	r1, #0
   17edc:	moveq	r3, sl
   17ee0:	beq	17c50 <__assert_fail@plt+0x5e98>
   17ee4:	b	17c0c <__assert_fail@plt+0x5e54>
   17ee8:	ldr	r3, [pc, #580]	; 18134 <__assert_fail@plt+0x637c>
   17eec:	mov	sl, r9
   17ef0:	str	r3, [fp, #-836]	; 0xfffffcbc
   17ef4:	b	17560 <__assert_fail@plt+0x57a8>
   17ef8:	ldr	r3, [fp, #-828]	; 0xfffffcc4
   17efc:	cmp	r3, #0
   17f00:	beq	17f1c <__assert_fail@plt+0x6164>
   17f04:	ldr	r3, [fp, #-836]	; 0xfffffcbc
   17f08:	ldrb	r3, [r3, #-4056]	; 0xfffff028
   17f0c:	cmp	r3, #0
   17f10:	moveq	r3, #9
   17f14:	streq	r3, [r5, #120]	; 0x78
   17f18:	beq	17604 <__assert_fail@plt+0x584c>
   17f1c:	mov	r3, #3
   17f20:	str	r3, [r5, #120]	; 0x78
   17f24:	b	17604 <__assert_fail@plt+0x584c>
   17f28:	ldr	r0, [r5, #40]	; 0x28
   17f2c:	bl	173cc <__assert_fail@plt+0x5614>
   17f30:	ldr	r3, [r4, #3112]	; 0xc28
   17f34:	cmp	r0, r3
   17f38:	ldrb	r3, [sl, #203]	; 0xcb
   17f3c:	strgt	r0, [r4, #3112]	; 0xc28
   17f40:	cmp	r3, #0
   17f44:	beq	177c0 <__assert_fail@plt+0x5a08>
   17f48:	ldrb	sl, [r4, #3828]	; 0xef4
   17f4c:	ldr	r3, [r5, #44]	; 0x2c
   17f50:	cmp	sl, #0
   17f54:	beq	180b0 <__assert_fail@plt+0x62f8>
   17f58:	str	r3, [sp]
   17f5c:	mov	r2, #11
   17f60:	ldr	r3, [pc, #500]	; 1815c <__assert_fail@plt+0x63a4>
   17f64:	mov	r1, #1
   17f68:	mov	r0, r8
   17f6c:	bl	11c20 <__sprintf_chk@plt>
   17f70:	mov	r0, r8
   17f74:	bl	11bf0 <strlen@plt>
   17f78:	ldr	r3, [r4, #3116]	; 0xc2c
   17f7c:	cmp	r3, r0
   17f80:	ldrb	r3, [r4, #4008]	; 0xfa8
   17f84:	strlt	r0, [r4, #3116]	; 0xc2c
   17f88:	cmp	r3, #0
   17f8c:	beq	177cc <__assert_fail@plt+0x5a14>
   17f90:	ldr	r0, [r5, #40]	; 0x28
   17f94:	bl	173cc <__assert_fail@plt+0x5614>
   17f98:	ldr	r3, [r4, #3120]	; 0xc30
   17f9c:	cmp	r0, r3
   17fa0:	strgt	r0, [r4, #3120]	; 0xc30
   17fa4:	b	177cc <__assert_fail@plt+0x5a14>
   17fa8:	ldr	r1, [r8]
   17fac:	lsr	r0, r0, #31
   17fb0:	sub	r3, r1, #22
   17fb4:	bic	r3, r3, #16
   17fb8:	cmp	r3, #0
   17fbc:	cmpne	r1, #95	; 0x5f
   17fc0:	ldr	ip, [fp, #-844]	; 0xfffffcb4
   17fc4:	ldrdeq	r2, [r5, #16]
   17fc8:	strdeq	r2, [r6]
   17fcc:	cmp	ip, #0
   17fd0:	movne	r3, #1
   17fd4:	ldrbeq	ip, [r4, #3097]	; 0xc19
   17fd8:	moveq	r3, #0
   17fdc:	b	17e98 <__assert_fail@plt+0x60e0>
   17fe0:	str	r1, [r5, #136]	; 0x88
   17fe4:	b	17ea8 <__assert_fail@plt+0x60f0>
   17fe8:	cmp	r6, #0
   17fec:	cmpne	r6, #6
   17ff0:	clz	r3, r6
   17ff4:	lsr	r3, r3, #5
   17ff8:	bne	176ac <__assert_fail@plt+0x58f4>
   17ffc:	b	17cc8 <__assert_fail@plt+0x5f10>
   18000:	bl	11c14 <__errno_location@plt>
   18004:	ldr	r3, [r0]
   18008:	cmp	r3, #2
   1800c:	beq	176f8 <__assert_fail@plt+0x5940>
   18010:	mov	r2, #5
   18014:	ldr	r1, [pc, #284]	; 18138 <__assert_fail@plt+0x6380>
   18018:	mov	r0, #0
   1801c:	bl	119a4 <dcgettext@plt>
   18020:	mov	r2, sl
   18024:	mov	r1, r0
   18028:	mov	r0, #1
   1802c:	bl	14d00 <__assert_fail@plt+0x2f48>
   18030:	b	17740 <__assert_fail@plt+0x5988>
   18034:	mov	r2, #5
   18038:	ldr	r1, [pc, #288]	; 18160 <__assert_fail@plt+0x63a8>
   1803c:	bl	119a4 <dcgettext@plt>
   18040:	mov	r2, sl
   18044:	mov	r1, r0
   18048:	ldr	r0, [fp, #-828]	; 0xfffffcc4
   1804c:	bl	14d00 <__assert_fail@plt+0x2f48>
   18050:	ldr	r6, [r5, #4]
   18054:	cmp	r6, #0
   18058:	bne	17950 <__assert_fail@plt+0x5b98>
   1805c:	mov	r7, #0
   18060:	b	17a24 <__assert_fail@plt+0x5c6c>
   18064:	ldrb	r3, [r4, #3976]	; 0xf88
   18068:	cmp	r3, #0
   1806c:	beq	17c9c <__assert_fail@plt+0x5ee4>
   18070:	mov	r0, #19
   18074:	bl	14160 <__assert_fail@plt+0x23a8>
   18078:	cmp	r0, #0
   1807c:	bne	176ac <__assert_fail@plt+0x58f4>
   18080:	mov	r0, #18
   18084:	bl	14160 <__assert_fail@plt+0x23a8>
   18088:	cmp	r0, #0
   1808c:	bne	176ac <__assert_fail@plt+0x58f4>
   18090:	mov	r0, #20
   18094:	bl	14160 <__assert_fail@plt+0x23a8>
   18098:	cmp	r0, #0
   1809c:	beq	17c9c <__assert_fail@plt+0x5ee4>
   180a0:	b	176ac <__assert_fail@plt+0x58f4>
   180a4:	bl	223ec <__assert_fail@plt+0x10634>
   180a8:	mov	r7, r0
   180ac:	b	179a8 <__assert_fail@plt+0x5bf0>
   180b0:	mov	r0, r3
   180b4:	str	r3, [fp, #-836]	; 0xfffffcbc
   180b8:	bl	1d5bc <__assert_fail@plt+0xb804>
   180bc:	ldr	r3, [fp, #-836]	; 0xfffffcbc
   180c0:	cmp	r0, #0
   180c4:	beq	17f58 <__assert_fail@plt+0x61a0>
   180c8:	mov	r1, sl
   180cc:	bl	1de50 <__assert_fail@plt+0xc098>
   180d0:	bic	r0, r0, r0, asr #31
   180d4:	b	17f78 <__assert_fail@plt+0x61c0>
   180d8:	ldr	r0, [r5, #4]
   180dc:	bl	145c4 <__assert_fail@plt+0x280c>
   180e0:	cmp	r0, #0
   180e4:	mvnne	r3, #0
   180e8:	strne	r3, [r5, #144]	; 0x90
   180ec:	b	179bc <__assert_fail@plt+0x5c04>
   180f0:	mov	ip, r3
   180f4:	b	17e48 <__assert_fail@plt+0x6090>
   180f8:	mov	r0, r6
   180fc:	bl	223ec <__assert_fail@plt+0x10634>
   18100:	mov	r7, r0
   18104:	b	179a8 <__assert_fail@plt+0x5bf0>
   18108:	bl	11c14 <__errno_location@plt>
   1810c:	ldr	r3, [pc, #64]	; 18154 <__assert_fail@plt+0x639c>
   18110:	mov	r2, #95	; 0x5f
   18114:	str	r2, [r0]
   18118:	mov	r8, r0
   1811c:	str	r3, [r5, #128]	; 0x80
   18120:	b	17ba0 <__assert_fail@plt+0x5de8>
   18124:	bl	119b0 <__stack_chk_fail@plt>
   18128:	bl	22408 <__assert_fail@plt+0x10650>
   1812c:	andeq	sl, r3, r8, lsr #6
   18130:	andeq	r9, r3, r0, lsl #30
   18134:	andeq	ip, r3, r0, lsr #6
   18138:	andeq	r6, r2, r0, lsr r6
   1813c:	andeq	fp, r3, r8, asr #5
   18140:	ldrdeq	sl, [r3], -r0
   18144:	andeq	fp, r3, r0, asr #6
   18148:	andeq	r6, r2, r4, ror #12
   1814c:	andeq	fp, r3, r0, lsr r3
   18150:	andeq	r6, r2, r8, lsl r6
   18154:	muleq	r3, r8, r2
   18158:	andeq	r8, r2, r4, lsr #12
   1815c:	andeq	r6, r2, r4, lsl r6
   18160:	andeq	r6, r2, r4, asr #12
   18164:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18168:	sub	sp, sp, #672	; 0x2a0
   1816c:	ldr	r6, [pc, #372]	; 182e8 <__assert_fail@plt+0x6530>
   18170:	ldr	r4, [pc, #372]	; 182ec <__assert_fail@plt+0x6534>
   18174:	mov	r5, r0
   18178:	ldr	r3, [r6]
   1817c:	mov	r7, r1
   18180:	str	r3, [sp, #668]	; 0x29c
   18184:	bl	154fc <__assert_fail@plt+0x3744>
   18188:	ldrb	r3, [r4, #3992]	; 0xf98
   1818c:	cmp	r3, #0
   18190:	beq	181c4 <__assert_fail@plt+0x640c>
   18194:	ldr	r3, [r4, #4072]	; 0xfe8
   18198:	cmp	r3, #4
   1819c:	ldrb	r3, [r5, #132]	; 0x84
   181a0:	ldrne	r8, [r4, #3100]	; 0xc1c
   181a4:	moveq	r8, #0
   181a8:	cmp	r3, #0
   181ac:	bne	18270 <__assert_fail@plt+0x64b8>
   181b0:	ldr	r3, [pc, #312]	; 182f0 <__assert_fail@plt+0x6538>
   181b4:	mov	r2, r8
   181b8:	ldr	r1, [pc, #308]	; 182f4 <__assert_fail@plt+0x653c>
   181bc:	mov	r0, #1
   181c0:	bl	11c50 <__printf_chk@plt>
   181c4:	ldrb	r3, [r4, #3993]	; 0xf99
   181c8:	cmp	r3, #0
   181cc:	beq	18200 <__assert_fail@plt+0x6448>
   181d0:	ldr	r3, [r4, #4072]	; 0xfe8
   181d4:	cmp	r3, #4
   181d8:	ldrb	r3, [r5, #132]	; 0x84
   181dc:	ldrne	r8, [r4, #3104]	; 0xc20
   181e0:	moveq	r8, #0
   181e4:	cmp	r3, #0
   181e8:	ldreq	r3, [pc, #256]	; 182f0 <__assert_fail@plt+0x6538>
   181ec:	bne	182a4 <__assert_fail@plt+0x64ec>
   181f0:	mov	r2, r8
   181f4:	ldr	r1, [pc, #248]	; 182f4 <__assert_fail@plt+0x653c>
   181f8:	mov	r0, #1
   181fc:	bl	11c50 <__printf_chk@plt>
   18200:	ldrb	r3, [r4, #4009]	; 0xfa9
   18204:	cmp	r3, #0
   18208:	bne	1824c <__assert_fail@plt+0x6494>
   1820c:	mov	r2, #0
   18210:	mov	r3, r7
   18214:	mov	r1, r2
   18218:	mov	r0, r5
   1821c:	bl	15d3c <__assert_fail@plt+0x3f84>
   18220:	ldr	r3, [r4, #3840]	; 0xf00
   18224:	cmp	r3, #0
   18228:	mov	r7, r0
   1822c:	bne	1828c <__assert_fail@plt+0x64d4>
   18230:	ldr	r2, [sp, #668]	; 0x29c
   18234:	ldr	r3, [r6]
   18238:	mov	r0, r7
   1823c:	cmp	r2, r3
   18240:	bne	182e4 <__assert_fail@plt+0x652c>
   18244:	add	sp, sp, #672	; 0x2a0
   18248:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1824c:	ldr	r3, [r4, #4072]	; 0xfe8
   18250:	ldr	r1, [pc, #156]	; 182f4 <__assert_fail@plt+0x653c>
   18254:	cmp	r3, #4
   18258:	moveq	r2, #0
   1825c:	ldrne	r2, [r4, #3124]	; 0xc34
   18260:	ldr	r3, [r5, #128]	; 0x80
   18264:	mov	r0, #1
   18268:	bl	11c50 <__printf_chk@plt>
   1826c:	b	1820c <__assert_fail@plt+0x6454>
   18270:	ldrd	r0, [r5, #112]	; 0x70
   18274:	orrs	r3, r0, r1
   18278:	beq	181b0 <__assert_fail@plt+0x63f8>
   1827c:	add	r2, sp, #16
   18280:	bl	1d828 <__assert_fail@plt+0xba70>
   18284:	mov	r3, r0
   18288:	b	181b4 <__assert_fail@plt+0x63fc>
   1828c:	ldr	r2, [r5, #120]	; 0x78
   18290:	ldr	r1, [r5, #32]
   18294:	ldrb	r0, [r5, #132]	; 0x84
   18298:	bl	14fd4 <__assert_fail@plt+0x321c>
   1829c:	add	r7, r7, r0
   182a0:	b	18230 <__assert_fail@plt+0x6478>
   182a4:	ldr	r2, [pc, #76]	; 182f8 <__assert_fail@plt+0x6540>
   182a8:	mov	r0, #512	; 0x200
   182ac:	mov	r1, #0
   182b0:	ldrd	sl, [r2]
   182b4:	ldr	r3, [r4, #3996]	; 0xf9c
   182b8:	strd	r0, [sp]
   182bc:	add	r2, sp, #16
   182c0:	strd	sl, [sp, #8]
   182c4:	ldrd	r0, [r5, #80]	; 0x50
   182c8:	bl	1c860 <__assert_fail@plt+0xaaa8>
   182cc:	mov	r2, r8
   182d0:	ldr	r1, [pc, #28]	; 182f4 <__assert_fail@plt+0x653c>
   182d4:	mov	r3, r0
   182d8:	mov	r0, #1
   182dc:	bl	11c50 <__printf_chk@plt>
   182e0:	b	18200 <__assert_fail@plt+0x6448>
   182e4:	bl	119b0 <__stack_chk_fail@plt>
   182e8:	andeq	r9, r3, r0, lsl #30
   182ec:	andeq	sl, r3, r8, lsr #6
   182f0:	andeq	r6, r2, ip, asr #11
   182f4:	andeq	r6, r2, ip, ror #11
   182f8:	andeq	fp, r3, r8, asr #5
   182fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18300:	sub	sp, sp, #12
   18304:	ldr	r5, [pc, #356]	; 18470 <__assert_fail@plt+0x66b8>
   18308:	ldr	r3, [r5, #3088]	; 0xc10
   1830c:	cmp	r3, #0
   18310:	beq	1841c <__assert_fail@plt+0x6664>
   18314:	mov	r8, #0
   18318:	mov	sl, r0
   1831c:	ldr	r9, [pc, #336]	; 18474 <__assert_fail@plt+0x66bc>
   18320:	mov	r4, r8
   18324:	b	18358 <__assert_fail@plt+0x65a0>
   18328:	cmp	r4, #0
   1832c:	addne	r8, r8, #2
   18330:	movne	r6, r8
   18334:	bne	183b4 <__assert_fail@plt+0x65fc>
   18338:	mov	r6, r8
   1833c:	mov	r1, r6
   18340:	mov	r0, r7
   18344:	bl	18164 <__assert_fail@plt+0x63ac>
   18348:	ldr	r3, [r5, #3088]	; 0xc10
   1834c:	add	r4, r4, #1
   18350:	cmp	r3, r4
   18354:	bls	18420 <__assert_fail@plt+0x6668>
   18358:	ldr	r3, [r5, #3092]	; 0xc14
   1835c:	ldr	r2, [r5, #4]
   18360:	cmp	r2, #0
   18364:	ldr	r7, [r3, r4, lsl #2]
   18368:	beq	18328 <__assert_fail@plt+0x6570>
   1836c:	mov	r0, r7
   18370:	bl	16a88 <__assert_fail@plt+0x4cd0>
   18374:	cmp	r4, #0
   18378:	moveq	r6, r8
   1837c:	addeq	r8, r0, r8
   18380:	beq	1833c <__assert_fail@plt+0x6584>
   18384:	ldr	r3, [r5, #4]
   18388:	add	r6, r8, #2
   1838c:	cmp	r3, #0
   18390:	add	r2, r0, r6
   18394:	beq	183b0 <__assert_fail@plt+0x65f8>
   18398:	cmp	r3, r2
   1839c:	bls	18408 <__assert_fail@plt+0x6650>
   183a0:	mvn	r3, #2
   183a4:	sub	r3, r3, r0
   183a8:	cmp	r3, r8
   183ac:	bcc	18408 <__assert_fail@plt+0x6650>
   183b0:	mov	r8, r2
   183b4:	mov	fp, #32
   183b8:	mov	r3, fp
   183bc:	ldr	r0, [r9]
   183c0:	ldr	r2, [r0, #20]
   183c4:	ldr	r1, [r0, #24]
   183c8:	cmp	r2, r1
   183cc:	addcc	r1, r2, #1
   183d0:	strcc	r1, [r0, #20]
   183d4:	strbcc	sl, [r2]
   183d8:	bcs	1844c <__assert_fail@plt+0x6694>
   183dc:	ldr	r0, [r9]
   183e0:	ldr	r2, [r0, #20]
   183e4:	ldr	r1, [r0, #24]
   183e8:	cmp	r2, r1
   183ec:	addcc	r1, r2, #1
   183f0:	strcc	r1, [r0, #20]
   183f4:	strbcc	r3, [r2]
   183f8:	bcc	1833c <__assert_fail@plt+0x6584>
   183fc:	mov	r1, fp
   18400:	bl	11c98 <__overflow@plt>
   18404:	b	1833c <__assert_fail@plt+0x6584>
   18408:	mov	fp, #10
   1840c:	mov	r8, r0
   18410:	mov	r3, fp
   18414:	mov	r6, #0
   18418:	b	183bc <__assert_fail@plt+0x6604>
   1841c:	ldr	r9, [pc, #80]	; 18474 <__assert_fail@plt+0x66bc>
   18420:	ldr	r0, [r9]
   18424:	ldr	r3, [r0, #20]
   18428:	ldr	r2, [r0, #24]
   1842c:	cmp	r3, r2
   18430:	bcs	18460 <__assert_fail@plt+0x66a8>
   18434:	add	r1, r3, #1
   18438:	mov	r2, #10
   1843c:	str	r1, [r0, #20]
   18440:	strb	r2, [r3]
   18444:	add	sp, sp, #12
   18448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1844c:	mov	r1, sl
   18450:	str	r3, [sp, #4]
   18454:	bl	11c98 <__overflow@plt>
   18458:	ldr	r3, [sp, #4]
   1845c:	b	183dc <__assert_fail@plt+0x6624>
   18460:	mov	r1, #10
   18464:	add	sp, sp, #12
   18468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1846c:	b	11c98 <__overflow@plt>
   18470:	andeq	sl, r3, r8, lsr #6
   18474:	andeq	sl, r3, ip, lsl r3
   18478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1847c:	sub	sp, sp, #12
   18480:	ldr	r9, [pc, #884]	; 187fc <__assert_fail@plt+0x6a44>
   18484:	ldr	r5, [r9, #4072]	; 0xfe8
   18488:	cmp	r5, #4
   1848c:	ldrls	pc, [pc, r5, lsl #2]
   18490:	b	184d0 <__assert_fail@plt+0x6718>
   18494:	andeq	r8, r1, r8, ror #9
   18498:	andeq	r8, r1, ip, asr #10
   1849c:	andeq	r8, r1, r8, lsr #11
   184a0:	muleq	r1, ip, r6
   184a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184a8:	ldr	r4, [sp]
   184ac:	ldr	r0, [r4]
   184b0:	ldr	r3, [r0, #20]
   184b4:	ldr	r2, [r0, #24]
   184b8:	cmp	r3, r2
   184bc:	addcc	r1, r3, #1
   184c0:	movcc	r2, #10
   184c4:	strcc	r1, [r0, #20]
   184c8:	strbcc	r2, [r3]
   184cc:	bcs	187e0 <__assert_fail@plt+0x6a28>
   184d0:	add	sp, sp, #12
   184d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d8:	mov	r0, #44	; 0x2c
   184dc:	add	sp, sp, #12
   184e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184e4:	b	182fc <__assert_fail@plt+0x6544>
   184e8:	ldr	r2, [r9, #3088]	; 0xc10
   184ec:	cmp	r2, #0
   184f0:	beq	184d0 <__assert_fail@plt+0x6718>
   184f4:	ldr	r4, [pc, #772]	; 18800 <__assert_fail@plt+0x6a48>
   184f8:	mov	r6, #10
   184fc:	bl	154fc <__assert_fail@plt+0x3744>
   18500:	ldr	r3, [r9, #3092]	; 0xc14
   18504:	ldr	r0, [r3, r5, lsl #2]
   18508:	bl	160e4 <__assert_fail@plt+0x432c>
   1850c:	ldr	r0, [r4]
   18510:	ldr	r3, [r0, #20]
   18514:	ldr	r2, [r0, #24]
   18518:	add	r1, r3, #1
   1851c:	cmp	r3, r2
   18520:	strcc	r1, [r0, #20]
   18524:	strbcc	r6, [r3]
   18528:	bcs	187bc <__assert_fail@plt+0x6a04>
   1852c:	ldr	r3, [r9, #3824]	; 0xef0
   18530:	ldr	r2, [r9, #3088]	; 0xc10
   18534:	add	r5, r5, #1
   18538:	add	r3, r3, #1
   1853c:	cmp	r2, r5
   18540:	str	r3, [r9, #3824]	; 0xef0
   18544:	bhi	184fc <__assert_fail@plt+0x6744>
   18548:	b	184d0 <__assert_fail@plt+0x6718>
   1854c:	ldr	r2, [r9, #3088]	; 0xc10
   18550:	cmp	r2, #0
   18554:	beq	184d0 <__assert_fail@plt+0x6718>
   18558:	ldr	r4, [pc, #672]	; 18800 <__assert_fail@plt+0x6a48>
   1855c:	mov	r5, #0
   18560:	mov	r6, #10
   18564:	ldr	r3, [r9, #3092]	; 0xc14
   18568:	mov	r1, #0
   1856c:	ldr	r0, [r3, r5, lsl #2]
   18570:	bl	18164 <__assert_fail@plt+0x63ac>
   18574:	ldr	r0, [r4]
   18578:	ldr	r3, [r0, #20]
   1857c:	ldr	r2, [r0, #24]
   18580:	add	r1, r3, #1
   18584:	cmp	r3, r2
   18588:	strcc	r1, [r0, #20]
   1858c:	strbcc	r6, [r3]
   18590:	bcs	187c8 <__assert_fail@plt+0x6a10>
   18594:	ldr	r3, [r9, #3088]	; 0xc10
   18598:	add	r5, r5, #1
   1859c:	cmp	r3, r5
   185a0:	bhi	18564 <__assert_fail@plt+0x67ac>
   185a4:	b	184d0 <__assert_fail@plt+0x6718>
   185a8:	ldr	r2, [r9, #4]
   185ac:	cmp	r2, #0
   185b0:	beq	187ac <__assert_fail@plt+0x69f4>
   185b4:	mov	r0, #1
   185b8:	bl	16bf4 <__assert_fail@plt+0x4e3c>
   185bc:	ldr	sl, [r9, #4084]	; 0xff4
   185c0:	add	r2, r0, r0, lsl #1
   185c4:	mov	r1, r0
   185c8:	lsl	r2, r2, #2
   185cc:	sub	r2, r2, #12
   185d0:	ldr	r0, [r9, #3088]	; 0xc10
   185d4:	add	sl, sl, r2
   185d8:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   185dc:	cmp	r1, #0
   185e0:	addne	r0, r0, #1
   185e4:	cmp	r0, #0
   185e8:	str	r0, [sp]
   185ec:	beq	184d0 <__assert_fail@plt+0x6718>
   185f0:	mov	r3, #0
   185f4:	ldr	r4, [pc, #516]	; 18800 <__assert_fail@plt+0x6a48>
   185f8:	mov	r8, r3
   185fc:	str	r4, [sp, #4]
   18600:	mov	r7, #0
   18604:	mov	r5, r7
   18608:	mov	r6, r8
   1860c:	b	18614 <__assert_fail@plt+0x685c>
   18610:	bl	14a20 <__assert_fail@plt+0x2c68>
   18614:	ldr	r3, [r9, #3092]	; 0xc14
   18618:	ldr	fp, [r3, r6, lsl #2]
   1861c:	ldr	r3, [sp]
   18620:	mov	r0, fp
   18624:	add	r6, r6, r3
   18628:	bl	16a88 <__assert_fail@plt+0x4cd0>
   1862c:	ldr	r2, [sl, #8]
   18630:	mov	r1, r5
   18634:	mov	r4, r0
   18638:	mov	r0, fp
   1863c:	ldr	fp, [r2, r7]
   18640:	bl	18164 <__assert_fail@plt+0x63ac>
   18644:	ldr	r2, [r9, #3088]	; 0xc10
   18648:	add	r0, r4, r5
   1864c:	cmp	r6, r2
   18650:	add	r5, r5, fp
   18654:	mov	r1, r5
   18658:	add	r7, r7, #4
   1865c:	bcc	18610 <__assert_fail@plt+0x6858>
   18660:	ldr	r3, [sp, #4]
   18664:	ldr	r0, [r3]
   18668:	ldr	r2, [r0, #24]
   1866c:	ldr	r3, [r0, #20]
   18670:	cmp	r3, r2
   18674:	addcc	r2, r3, #1
   18678:	strcc	r2, [r0, #20]
   1867c:	movcc	r2, #10
   18680:	strbcc	r2, [r3]
   18684:	bcs	187d4 <__assert_fail@plt+0x6a1c>
   18688:	ldr	r3, [sp]
   1868c:	add	r8, r8, #1
   18690:	cmp	r3, r8
   18694:	bne	18600 <__assert_fail@plt+0x6848>
   18698:	b	184d0 <__assert_fail@plt+0x6718>
   1869c:	ldr	r2, [r9, #4]
   186a0:	cmp	r2, #0
   186a4:	beq	187ac <__assert_fail@plt+0x69f4>
   186a8:	mov	r0, #0
   186ac:	bl	16bf4 <__assert_fail@plt+0x4e3c>
   186b0:	ldr	r1, [r9, #3092]	; 0xc14
   186b4:	ldr	r8, [r9, #4084]	; 0xff4
   186b8:	ldr	r4, [r1]
   186bc:	add	r2, r0, r0, lsl #1
   186c0:	mov	sl, r0
   186c4:	lsl	r2, r2, #2
   186c8:	sub	r2, r2, #12
   186cc:	mov	r0, r4
   186d0:	add	r8, r8, r2
   186d4:	bl	16a88 <__assert_fail@plt+0x4cd0>
   186d8:	ldr	r2, [r8, #8]
   186dc:	mov	r1, #0
   186e0:	ldr	r3, [r2]
   186e4:	mov	r6, r3
   186e8:	mov	r7, r0
   186ec:	mov	r0, r4
   186f0:	bl	18164 <__assert_fail@plt+0x63ac>
   186f4:	ldr	r2, [r9, #3088]	; 0xc10
   186f8:	ldr	r4, [pc, #256]	; 18800 <__assert_fail@plt+0x6a48>
   186fc:	cmp	r2, #1
   18700:	bls	184ac <__assert_fail@plt+0x66f4>
   18704:	mov	fp, #1
   18708:	str	r4, [sp]
   1870c:	mov	r5, #0
   18710:	mov	r4, fp
   18714:	mov	fp, r8
   18718:	mov	r8, r6
   1871c:	b	18784 <__assert_fail@plt+0x69cc>
   18720:	ldr	r3, [sp]
   18724:	mov	r5, r6
   18728:	ldr	r0, [r3]
   1872c:	ldr	r2, [r0, #20]
   18730:	ldr	r1, [r0, #24]
   18734:	add	ip, r2, #1
   18738:	cmp	r2, r1
   1873c:	movcc	r3, #10
   18740:	strcc	ip, [r0, #20]
   18744:	strbcc	r3, [r2]
   18748:	bcs	187f0 <__assert_fail@plt+0x6a38>
   1874c:	ldr	r2, [r9, #3092]	; 0xc14
   18750:	mov	r1, r5
   18754:	ldr	r7, [r2, r4, lsl #2]
   18758:	add	r4, r4, #1
   1875c:	mov	r0, r7
   18760:	bl	18164 <__assert_fail@plt+0x63ac>
   18764:	mov	r0, r7
   18768:	bl	16a88 <__assert_fail@plt+0x4cd0>
   1876c:	ldr	r1, [r9, #3088]	; 0xc10
   18770:	ldr	r2, [fp, #8]
   18774:	cmp	r4, r1
   18778:	ldr	r8, [r2, r6, lsl #2]
   1877c:	mov	r7, r0
   18780:	bcs	184a8 <__assert_fail@plt+0x66f0>
   18784:	mov	r1, sl
   18788:	mov	r0, r4
   1878c:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   18790:	subs	r6, r1, #0
   18794:	beq	18720 <__assert_fail@plt+0x6968>
   18798:	add	r0, r5, r7
   1879c:	add	r5, r5, r8
   187a0:	mov	r1, r5
   187a4:	bl	14a20 <__assert_fail@plt+0x2c68>
   187a8:	b	1874c <__assert_fail@plt+0x6994>
   187ac:	mov	r0, #32
   187b0:	add	sp, sp, #12
   187b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b8:	b	182fc <__assert_fail@plt+0x6544>
   187bc:	mov	r1, #10
   187c0:	bl	11c98 <__overflow@plt>
   187c4:	b	1852c <__assert_fail@plt+0x6774>
   187c8:	mov	r1, #10
   187cc:	bl	11c98 <__overflow@plt>
   187d0:	b	18594 <__assert_fail@plt+0x67dc>
   187d4:	mov	r1, #10
   187d8:	bl	11c98 <__overflow@plt>
   187dc:	b	18688 <__assert_fail@plt+0x68d0>
   187e0:	mov	r1, #10
   187e4:	add	sp, sp, #12
   187e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187ec:	b	11c98 <__overflow@plt>
   187f0:	mov	r1, #10
   187f4:	bl	11c98 <__overflow@plt>
   187f8:	b	1874c <__assert_fail@plt+0x6994>
   187fc:	andeq	sl, r3, r8, lsr #6
   18800:	andeq	sl, r3, ip, lsl r3
   18804:	ldr	r3, [pc, #1648]	; 18e7c <__assert_fail@plt+0x70c4>
   18808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1880c:	sub	sp, sp, #804	; 0x324
   18810:	ldr	r3, [r3]
   18814:	mov	r5, r0
   18818:	mov	sl, r1
   1881c:	str	r2, [sp, #36]	; 0x24
   18820:	str	r3, [sp, #796]	; 0x31c
   18824:	str	r0, [sp, #20]
   18828:	bl	11c14 <__errno_location@plt>
   1882c:	mov	r3, #0
   18830:	str	r3, [r0]
   18834:	mov	r4, r0
   18838:	mov	r0, r5
   1883c:	bl	11af4 <opendir@plt>
   18840:	subs	r7, r0, #0
   18844:	beq	18e28 <__assert_fail@plt+0x7070>
   18848:	ldr	r6, [pc, #1584]	; 18e80 <__assert_fail@plt+0x70c8>
   1884c:	ldr	r3, [r6, #3816]	; 0xee8
   18850:	cmp	r3, #0
   18854:	ldreq	r5, [pc, #1576]	; 18e84 <__assert_fail@plt+0x70cc>
   18858:	beq	18978 <__assert_fail@plt+0x6bc0>
   1885c:	bl	11d10 <dirfd@plt>
   18860:	add	r2, sp, #40	; 0x28
   18864:	subs	r1, r0, #0
   18868:	blt	18ad8 <__assert_fail@plt+0x6d20>
   1886c:	mov	r0, #3
   18870:	bl	11a34 <__fxstat64@plt>
   18874:	lsr	r5, r0, #31
   18878:	cmp	r5, #0
   1887c:	bne	18af0 <__assert_fail@plt+0x6d38>
   18880:	ldrd	r2, [sp, #136]	; 0x88
   18884:	mov	r0, #16
   18888:	ldrd	r8, [sp, #40]	; 0x28
   1888c:	strd	r2, [sp, #24]
   18890:	bl	221c0 <__assert_fail@plt+0x10408>
   18894:	ldrd	r2, [sp, #24]
   18898:	mov	fp, r0
   1889c:	strd	r8, [r0, #8]
   188a0:	mov	r1, r0
   188a4:	strd	r2, [fp]
   188a8:	ldr	r0, [r6, #3816]	; 0xee8
   188ac:	bl	1c5dc <__assert_fail@plt+0xa824>
   188b0:	cmp	r0, #0
   188b4:	beq	18e74 <__assert_fail@plt+0x70bc>
   188b8:	cmp	fp, r0
   188bc:	beq	1892c <__assert_fail@plt+0x6b74>
   188c0:	mov	r0, fp
   188c4:	bl	11938 <free@plt>
   188c8:	mov	r2, #5
   188cc:	ldr	r1, [pc, #1460]	; 18e88 <__assert_fail@plt+0x70d0>
   188d0:	mov	r0, r5
   188d4:	bl	119a4 <dcgettext@plt>
   188d8:	ldr	r2, [sp, #20]
   188dc:	mov	r1, #3
   188e0:	mov	r4, r0
   188e4:	mov	r0, r5
   188e8:	bl	218f8 <__assert_fail@plt+0xfb40>
   188ec:	mov	r2, r4
   188f0:	mov	r1, r5
   188f4:	mov	r3, r0
   188f8:	mov	r0, r5
   188fc:	bl	11adc <error@plt>
   18900:	mov	r0, r7
   18904:	bl	11d7c <closedir@plt>
   18908:	mov	r3, #2
   1890c:	str	r3, [r6, #3836]	; 0xefc
   18910:	ldr	r3, [pc, #1380]	; 18e7c <__assert_fail@plt+0x70c4>
   18914:	ldr	r2, [sp, #796]	; 0x31c
   18918:	ldr	r3, [r3]
   1891c:	cmp	r2, r3
   18920:	bne	18e78 <__assert_fail@plt+0x70c0>
   18924:	add	sp, sp, #804	; 0x324
   18928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1892c:	ldr	r5, [pc, #1360]	; 18e84 <__assert_fail@plt+0x70cc>
   18930:	ldrd	r2, [sp, #40]	; 0x28
   18934:	ldrd	r8, [sp, #136]	; 0x88
   18938:	ldr	r1, [r5, #-4040]	; 0xfffff038
   1893c:	ldr	r0, [r5, #-4036]	; 0xfffff03c
   18940:	sub	r0, r0, r1
   18944:	cmp	r0, #15
   18948:	bhi	18968 <__assert_fail@plt+0x6bb0>
   1894c:	sub	r0, r5, #4048	; 0xfd0
   18950:	mov	r1, #16
   18954:	sub	r0, r0, #4
   18958:	strd	r2, [sp, #24]
   1895c:	bl	23a40 <_obstack_newchunk@@Base>
   18960:	ldr	r1, [r5, #-4040]	; 0xfffff038
   18964:	ldrd	r2, [sp, #24]
   18968:	add	r0, r1, #16
   1896c:	str	r0, [r5, #-4040]	; 0xfffff038
   18970:	strd	r2, [r1, #8]
   18974:	strd	r8, [r1]
   18978:	bl	14550 <__assert_fail@plt+0x2798>
   1897c:	ldrb	r3, [r5, #-4008]	; 0xfffff058
   18980:	cmp	r3, #0
   18984:	beq	18ac8 <__assert_fail@plt+0x6d10>
   18988:	ldr	r9, [pc, #1276]	; 18e8c <__assert_fail@plt+0x70d4>
   1898c:	ldr	r8, [pc, #1276]	; 18e90 <__assert_fail@plt+0x70d8>
   18990:	ldrb	r3, [r9, #220]	; 0xdc
   18994:	cmp	r3, #0
   18998:	bne	189cc <__assert_fail@plt+0x6c14>
   1899c:	ldr	r0, [r8]
   189a0:	ldr	r3, [r0, #20]
   189a4:	ldr	r2, [r0, #24]
   189a8:	cmp	r3, r2
   189ac:	addcc	r1, r3, #1
   189b0:	movcc	r2, #10
   189b4:	strcc	r1, [r0, #20]
   189b8:	strbcc	r2, [r3]
   189bc:	bcs	18e48 <__assert_fail@plt+0x7090>
   189c0:	ldr	r3, [r6, #3824]	; 0xef0
   189c4:	add	r3, r3, #1
   189c8:	str	r3, [r6, #3824]	; 0xef0
   189cc:	ldrb	r3, [r6, #3984]	; 0xf90
   189d0:	mov	r2, #0
   189d4:	strb	r2, [r9, #220]	; 0xdc
   189d8:	cmp	r3, r2
   189dc:	bne	18e04 <__assert_fail@plt+0x704c>
   189e0:	ldrb	r9, [r6, #4092]	; 0xffc
   189e4:	cmp	r9, #0
   189e8:	bne	18dac <__assert_fail@plt+0x6ff4>
   189ec:	ldr	r3, [pc, #1184]	; 18e94 <__assert_fail@plt+0x70dc>
   189f0:	cmp	sl, #0
   189f4:	mov	fp, #1
   189f8:	str	r3, [sp, #4]
   189fc:	mvn	r2, #0
   18a00:	mov	r3, #0
   18a04:	str	r9, [sp, #8]
   18a08:	ldr	r0, [sp, #20]
   18a0c:	str	fp, [sp]
   18a10:	movne	r0, sl
   18a14:	ldr	r1, [r5, #-4004]	; 0xfffff05c
   18a18:	bl	1597c <__assert_fail@plt+0x3bc4>
   18a1c:	mov	r0, r9
   18a20:	bl	11938 <free@plt>
   18a24:	ldr	r3, [r8]
   18a28:	mov	r1, fp
   18a2c:	mov	r2, #2
   18a30:	ldr	r0, [pc, #1120]	; 18e98 <__assert_fail@plt+0x70e0>
   18a34:	bl	1198c <fwrite_unlocked@plt>
   18a38:	ldr	r3, [r6, #3824]	; 0xef0
   18a3c:	add	r3, r3, #2
   18a40:	str	r3, [r6, #3824]	; 0xef0
   18a44:	mov	r3, #0
   18a48:	mov	sl, r3
   18a4c:	str	r3, [sp, #24]
   18a50:	str	r3, [sp, #32]
   18a54:	str	sl, [r4]
   18a58:	mov	r0, r7
   18a5c:	bl	11cf8 <readdir64@plt>
   18a60:	subs	r9, r0, #0
   18a64:	beq	18b1c <__assert_fail@plt+0x6d64>
   18a68:	ldr	r3, [r5, #-3956]	; 0xfffff08c
   18a6c:	add	r8, r9, #19
   18a70:	cmp	r3, #2
   18a74:	beq	18cac <__assert_fail@plt+0x6ef4>
   18a78:	ldrb	r2, [r9, #19]
   18a7c:	cmp	r2, #46	; 0x2e
   18a80:	beq	18c88 <__assert_fail@plt+0x6ed0>
   18a84:	cmp	r3, #0
   18a88:	bne	18cac <__assert_fail@plt+0x6ef4>
   18a8c:	ldr	fp, [r5, #-3948]	; 0xfffff094
   18a90:	cmp	fp, #0
   18a94:	bne	18aa8 <__assert_fail@plt+0x6cf0>
   18a98:	b	18cac <__assert_fail@plt+0x6ef4>
   18a9c:	ldr	fp, [fp, #4]
   18aa0:	cmp	fp, #0
   18aa4:	beq	18cac <__assert_fail@plt+0x6ef4>
   18aa8:	mov	r2, #4
   18aac:	mov	r1, r8
   18ab0:	ldr	r0, [fp]
   18ab4:	bl	11b00 <fnmatch@plt>
   18ab8:	cmp	r0, #0
   18abc:	bne	18a9c <__assert_fail@plt+0x6ce4>
   18ac0:	bl	15428 <__assert_fail@plt+0x3670>
   18ac4:	b	18a54 <__assert_fail@plt+0x6c9c>
   18ac8:	ldrb	r3, [r5, #-4007]	; 0xfffff059
   18acc:	cmp	r3, #0
   18ad0:	beq	18a44 <__assert_fail@plt+0x6c8c>
   18ad4:	b	18988 <__assert_fail@plt+0x6bd0>
   18ad8:	ldr	r1, [sp, #20]
   18adc:	mov	r0, #3
   18ae0:	bl	11d34 <__xstat64@plt>
   18ae4:	lsr	r5, r0, #31
   18ae8:	cmp	r5, #0
   18aec:	beq	18880 <__assert_fail@plt+0x6ac8>
   18af0:	mov	r2, #5
   18af4:	ldr	r1, [pc, #928]	; 18e9c <__assert_fail@plt+0x70e4>
   18af8:	mov	r0, #0
   18afc:	bl	119a4 <dcgettext@plt>
   18b00:	ldr	r2, [sp, #20]
   18b04:	mov	r1, r0
   18b08:	ldr	r0, [sp, #36]	; 0x24
   18b0c:	bl	14d00 <__assert_fail@plt+0x2f48>
   18b10:	mov	r0, r7
   18b14:	bl	11d7c <closedir@plt>
   18b18:	b	18910 <__assert_fail@plt+0x6b58>
   18b1c:	ldr	r3, [r4]
   18b20:	cmp	r3, #0
   18b24:	beq	18b50 <__assert_fail@plt+0x6d98>
   18b28:	mov	r2, #5
   18b2c:	ldr	r1, [pc, #876]	; 18ea0 <__assert_fail@plt+0x70e8>
   18b30:	bl	119a4 <dcgettext@plt>
   18b34:	ldr	r2, [sp, #20]
   18b38:	mov	r1, r0
   18b3c:	ldr	r0, [sp, #36]	; 0x24
   18b40:	bl	14d00 <__assert_fail@plt+0x2f48>
   18b44:	ldr	r3, [r4]
   18b48:	cmp	r3, #75	; 0x4b
   18b4c:	beq	18ac0 <__assert_fail@plt+0x6d08>
   18b50:	mov	r0, r7
   18b54:	bl	11d7c <closedir@plt>
   18b58:	cmp	r0, #0
   18b5c:	bne	18d6c <__assert_fail@plt+0x6fb4>
   18b60:	bl	1471c <__assert_fail@plt+0x2964>
   18b64:	ldrb	r3, [r5, #-4008]	; 0xfffff058
   18b68:	cmp	r3, #0
   18b6c:	bne	18d9c <__assert_fail@plt+0x6fe4>
   18b70:	ldr	r3, [r6, #4072]	; 0xfe8
   18b74:	cmp	r3, #0
   18b78:	beq	18b88 <__assert_fail@plt+0x6dd0>
   18b7c:	ldrb	r3, [r6, #3993]	; 0xf99
   18b80:	cmp	r3, #0
   18b84:	beq	18c74 <__assert_fail@plt+0x6ebc>
   18b88:	ldrb	r3, [r6, #3984]	; 0xf90
   18b8c:	ldr	r8, [pc, #764]	; 18e90 <__assert_fail@plt+0x70d8>
   18b90:	cmp	r3, #0
   18b94:	bne	18de0 <__assert_fail@plt+0x7028>
   18b98:	mov	r2, #5
   18b9c:	ldr	r1, [pc, #768]	; 18ea4 <__assert_fail@plt+0x70ec>
   18ba0:	mov	r0, #0
   18ba4:	bl	119a4 <dcgettext@plt>
   18ba8:	ldr	r1, [r8]
   18bac:	mov	r4, r0
   18bb0:	bl	118a8 <fputs_unlocked@plt>
   18bb4:	mov	r0, r4
   18bb8:	bl	11bf0 <strlen@plt>
   18bbc:	ldr	r2, [r8]
   18bc0:	ldr	r3, [r6, #3824]	; 0xef0
   18bc4:	ldr	r1, [r2, #20]
   18bc8:	ldr	ip, [r2, #24]
   18bcc:	cmp	r1, ip
   18bd0:	add	r0, r3, r0
   18bd4:	str	r0, [r6, #3824]	; 0xef0
   18bd8:	movcc	r3, #32
   18bdc:	addcc	r0, r1, #1
   18be0:	strcc	r0, [r2, #20]
   18be4:	strbcc	r3, [r1]
   18be8:	bcs	18e54 <__assert_fail@plt+0x709c>
   18bec:	ldr	r3, [pc, #692]	; 18ea8 <__assert_fail@plt+0x70f0>
   18bf0:	ldr	ip, [r6, #3824]	; 0xef0
   18bf4:	ldr	r1, [sp, #32]
   18bf8:	ldrd	r2, [r3]
   18bfc:	add	ip, ip, #1
   18c00:	ldr	r0, [sp, #24]
   18c04:	strd	r2, [sp, #8]
   18c08:	mov	r2, #512	; 0x200
   18c0c:	mov	r3, #0
   18c10:	str	ip, [r6, #3824]	; 0xef0
   18c14:	strd	r2, [sp]
   18c18:	ldr	r3, [r6, #3996]	; 0xf9c
   18c1c:	add	r2, sp, #144	; 0x90
   18c20:	bl	1c860 <__assert_fail@plt+0xaaa8>
   18c24:	ldr	r1, [r8]
   18c28:	mov	r4, r0
   18c2c:	bl	118a8 <fputs_unlocked@plt>
   18c30:	mov	r0, r4
   18c34:	bl	11bf0 <strlen@plt>
   18c38:	ldr	r2, [r8]
   18c3c:	ldr	r3, [r6, #3824]	; 0xef0
   18c40:	ldr	r1, [r2, #20]
   18c44:	ldr	ip, [r2, #24]
   18c48:	cmp	r1, ip
   18c4c:	add	r0, r3, r0
   18c50:	str	r0, [r6, #3824]	; 0xef0
   18c54:	movcc	r3, #10
   18c58:	addcc	r0, r1, #1
   18c5c:	strcc	r0, [r2, #20]
   18c60:	strbcc	r3, [r1]
   18c64:	bcs	18e64 <__assert_fail@plt+0x70ac>
   18c68:	ldr	r3, [r6, #3824]	; 0xef0
   18c6c:	add	r3, r3, #1
   18c70:	str	r3, [r6, #3824]	; 0xef0
   18c74:	ldr	r3, [r6, #3088]	; 0xc10
   18c78:	cmp	r3, #0
   18c7c:	beq	18910 <__assert_fail@plt+0x6b58>
   18c80:	bl	18478 <__assert_fail@plt+0x66c0>
   18c84:	b	18910 <__assert_fail@plt+0x6b58>
   18c88:	cmp	r3, #0
   18c8c:	beq	18ac0 <__assert_fail@plt+0x6d08>
   18c90:	ldrb	r3, [r9, #20]
   18c94:	cmp	r3, #46	; 0x2e
   18c98:	moveq	r3, #2
   18c9c:	movne	r3, #1
   18ca0:	ldrb	r3, [r8, r3]
   18ca4:	cmp	r3, #0
   18ca8:	beq	18ac0 <__assert_fail@plt+0x6d08>
   18cac:	ldr	fp, [r5, #-3952]	; 0xfffff090
   18cb0:	cmp	fp, #0
   18cb4:	bne	18cc8 <__assert_fail@plt+0x6f10>
   18cb8:	b	18ce4 <__assert_fail@plt+0x6f2c>
   18cbc:	ldr	fp, [fp, #4]
   18cc0:	cmp	fp, #0
   18cc4:	beq	18ce4 <__assert_fail@plt+0x6f2c>
   18cc8:	mov	r2, #4
   18ccc:	mov	r1, r8
   18cd0:	ldr	r0, [fp]
   18cd4:	bl	11b00 <fnmatch@plt>
   18cd8:	cmp	r0, #0
   18cdc:	bne	18cbc <__assert_fail@plt+0x6f04>
   18ce0:	b	18ac0 <__assert_fail@plt+0x6d08>
   18ce4:	ldrb	r3, [r9, #18]
   18ce8:	sub	r3, r3, #1
   18cec:	uxtb	r3, r3
   18cf0:	cmp	r3, #13
   18cf4:	movhi	r1, #0
   18cf8:	ldrls	r2, [pc, #428]	; 18eac <__assert_fail@plt+0x70f4>
   18cfc:	addls	r3, r2, r3, lsl #2
   18d00:	ldrls	r1, [r3, #336]	; 0x150
   18d04:	ldr	r3, [sp, #20]
   18d08:	mov	r2, #0
   18d0c:	mov	r0, r8
   18d10:	bl	17458 <__assert_fail@plt+0x56a0>
   18d14:	ldr	r2, [sp, #24]
   18d18:	ldr	r3, [r6, #4072]	; 0xfe8
   18d1c:	adds	r2, r2, r0
   18d20:	str	r2, [sp, #24]
   18d24:	ldr	r2, [sp, #32]
   18d28:	adc	r2, r2, r1
   18d2c:	cmp	r3, #1
   18d30:	str	r2, [sp, #32]
   18d34:	bne	18ac0 <__assert_fail@plt+0x6d08>
   18d38:	ldr	r3, [r6, #3404]	; 0xd4c
   18d3c:	cmn	r3, #1
   18d40:	bne	18ac0 <__assert_fail@plt+0x6d08>
   18d44:	ldrb	r3, [r6, #3993]	; 0xf99
   18d48:	cmp	r3, #0
   18d4c:	bne	18ac0 <__assert_fail@plt+0x6d08>
   18d50:	ldrb	r3, [r5, #-4008]	; 0xfffff058
   18d54:	cmp	r3, #0
   18d58:	bne	18ac0 <__assert_fail@plt+0x6d08>
   18d5c:	bl	1471c <__assert_fail@plt+0x2964>
   18d60:	bl	18478 <__assert_fail@plt+0x66c0>
   18d64:	bl	14550 <__assert_fail@plt+0x2798>
   18d68:	b	18ac0 <__assert_fail@plt+0x6d08>
   18d6c:	mov	r2, #5
   18d70:	ldr	r1, [pc, #312]	; 18eb0 <__assert_fail@plt+0x70f8>
   18d74:	mov	r0, #0
   18d78:	bl	119a4 <dcgettext@plt>
   18d7c:	ldr	r2, [sp, #20]
   18d80:	mov	r1, r0
   18d84:	ldr	r0, [sp, #36]	; 0x24
   18d88:	bl	14d00 <__assert_fail@plt+0x2f48>
   18d8c:	bl	1471c <__assert_fail@plt+0x2964>
   18d90:	ldrb	r3, [r5, #-4008]	; 0xfffff058
   18d94:	cmp	r3, #0
   18d98:	beq	18b70 <__assert_fail@plt+0x6db8>
   18d9c:	ldr	r0, [sp, #20]
   18da0:	mov	r1, #0
   18da4:	bl	148dc <__assert_fail@plt+0x2b24>
   18da8:	b	18b70 <__assert_fail@plt+0x6db8>
   18dac:	mov	r1, #2
   18db0:	ldr	r0, [sp, #20]
   18db4:	bl	1a4fc <__assert_fail@plt+0x8744>
   18db8:	subs	r9, r0, #0
   18dbc:	bne	189ec <__assert_fail@plt+0x6c34>
   18dc0:	mov	r2, #5
   18dc4:	ldr	r1, [pc, #232]	; 18eb4 <__assert_fail@plt+0x70fc>
   18dc8:	bl	119a4 <dcgettext@plt>
   18dcc:	ldr	r2, [sp, #20]
   18dd0:	mov	r1, r0
   18dd4:	ldr	r0, [sp, #36]	; 0x24
   18dd8:	bl	14d00 <__assert_fail@plt+0x2f48>
   18ddc:	b	189ec <__assert_fail@plt+0x6c34>
   18de0:	ldr	r3, [r8]
   18de4:	mov	r2, #2
   18de8:	mov	r1, #1
   18dec:	ldr	r0, [pc, #196]	; 18eb8 <__assert_fail@plt+0x7100>
   18df0:	bl	1198c <fwrite_unlocked@plt>
   18df4:	ldr	r3, [r6, #3824]	; 0xef0
   18df8:	add	r3, r3, #2
   18dfc:	str	r3, [r6, #3824]	; 0xef0
   18e00:	b	18b98 <__assert_fail@plt+0x6de0>
   18e04:	ldr	r3, [r8]
   18e08:	mov	r2, #2
   18e0c:	mov	r1, #1
   18e10:	ldr	r0, [pc, #160]	; 18eb8 <__assert_fail@plt+0x7100>
   18e14:	bl	1198c <fwrite_unlocked@plt>
   18e18:	ldr	r3, [r6, #3824]	; 0xef0
   18e1c:	add	r3, r3, #2
   18e20:	str	r3, [r6, #3824]	; 0xef0
   18e24:	b	189e0 <__assert_fail@plt+0x6c28>
   18e28:	mov	r2, #5
   18e2c:	ldr	r1, [pc, #136]	; 18ebc <__assert_fail@plt+0x7104>
   18e30:	bl	119a4 <dcgettext@plt>
   18e34:	ldr	r2, [sp, #20]
   18e38:	mov	r1, r0
   18e3c:	ldr	r0, [sp, #36]	; 0x24
   18e40:	bl	14d00 <__assert_fail@plt+0x2f48>
   18e44:	b	18910 <__assert_fail@plt+0x6b58>
   18e48:	mov	r1, #10
   18e4c:	bl	11c98 <__overflow@plt>
   18e50:	b	189c0 <__assert_fail@plt+0x6c08>
   18e54:	mov	r0, r2
   18e58:	mov	r1, #32
   18e5c:	bl	11c98 <__overflow@plt>
   18e60:	b	18bec <__assert_fail@plt+0x6e34>
   18e64:	mov	r0, r2
   18e68:	mov	r1, #10
   18e6c:	bl	11c98 <__overflow@plt>
   18e70:	b	18c68 <__assert_fail@plt+0x6eb0>
   18e74:	bl	22408 <__assert_fail@plt+0x10650>
   18e78:	bl	119b0 <__stack_chk_fail@plt>
   18e7c:	andeq	r9, r3, r0, lsl #30
   18e80:	andeq	sl, r3, r8, lsr #6
   18e84:	andeq	ip, r3, r0, lsr #6
   18e88:			; <UNDEFINED> instruction: 0x000266b4
   18e8c:	ldrdeq	sl, [r3], -r0
   18e90:	andeq	sl, r3, ip, lsl r3
   18e94:	andeq	fp, r3, r0, lsl #7
   18e98:	andeq	r6, r2, r0, ror #13
   18e9c:	andeq	r6, r2, ip, lsl #13
   18ea0:	andeq	r6, r2, r4, ror #13
   18ea4:	andeq	r6, r2, r4, lsl r7
   18ea8:	andeq	fp, r3, r8, asr #5
   18eac:	andeq	r4, r2, r0, lsl pc
   18eb0:	strdeq	r6, [r2], -ip
   18eb4:	andeq	r6, r2, r8, lsl r6
   18eb8:	strdeq	r6, [r2], -ip
   18ebc:	andeq	r6, r2, r0, ror r6
   18ec0:	ldr	r3, [r0, #104]	; 0x68
   18ec4:	ldr	r2, [r1, #104]	; 0x68
   18ec8:	cmp	r2, r3
   18ecc:	blt	18efc <__assert_fail@plt+0x7144>
   18ed0:	bgt	18ef0 <__assert_fail@plt+0x7138>
   18ed4:	ldr	r3, [r1, #108]	; 0x6c
   18ed8:	ldr	r2, [r0, #108]	; 0x6c
   18edc:	subs	r3, r3, r2
   18ee0:	bne	18ef4 <__assert_fail@plt+0x713c>
   18ee4:	ldr	r1, [r1]
   18ee8:	ldr	r0, [r0]
   18eec:	b	14878 <__assert_fail@plt+0x2ac0>
   18ef0:	mov	r3, #1
   18ef4:	mov	r0, r3
   18ef8:	bx	lr
   18efc:	mvn	r3, #0
   18f00:	b	18ef4 <__assert_fail@plt+0x713c>
   18f04:	ldr	r3, [r0, #88]	; 0x58
   18f08:	ldr	r2, [r1, #88]	; 0x58
   18f0c:	cmp	r2, r3
   18f10:	blt	18f40 <__assert_fail@plt+0x7188>
   18f14:	bgt	18f34 <__assert_fail@plt+0x717c>
   18f18:	ldr	r3, [r1, #92]	; 0x5c
   18f1c:	ldr	r2, [r0, #92]	; 0x5c
   18f20:	subs	r3, r3, r2
   18f24:	bne	18f38 <__assert_fail@plt+0x7180>
   18f28:	ldr	r1, [r1]
   18f2c:	ldr	r0, [r0]
   18f30:	b	14878 <__assert_fail@plt+0x2ac0>
   18f34:	mov	r3, #1
   18f38:	mov	r0, r3
   18f3c:	bx	lr
   18f40:	mvn	r3, #0
   18f44:	b	18f38 <__assert_fail@plt+0x7180>
   18f48:	ldr	r3, [r0, #96]	; 0x60
   18f4c:	ldr	r2, [r1, #96]	; 0x60
   18f50:	cmp	r2, r3
   18f54:	blt	18f84 <__assert_fail@plt+0x71cc>
   18f58:	bgt	18f78 <__assert_fail@plt+0x71c0>
   18f5c:	ldr	r3, [r1, #100]	; 0x64
   18f60:	ldr	r2, [r0, #100]	; 0x64
   18f64:	subs	r3, r3, r2
   18f68:	bne	18f7c <__assert_fail@plt+0x71c4>
   18f6c:	ldr	r1, [r1]
   18f70:	ldr	r0, [r0]
   18f74:	b	14878 <__assert_fail@plt+0x2ac0>
   18f78:	mov	r3, #1
   18f7c:	mov	r0, r3
   18f80:	bx	lr
   18f84:	mvn	r3, #0
   18f88:	b	18f7c <__assert_fail@plt+0x71c4>
   18f8c:	mov	r2, r1
   18f90:	ldr	r1, [r0, #96]	; 0x60
   18f94:	ldr	r3, [r2, #96]	; 0x60
   18f98:	cmp	r1, r3
   18f9c:	blt	18fcc <__assert_fail@plt+0x7214>
   18fa0:	bgt	18fc0 <__assert_fail@plt+0x7208>
   18fa4:	ldr	r3, [r0, #100]	; 0x64
   18fa8:	ldr	r1, [r2, #100]	; 0x64
   18fac:	subs	r3, r3, r1
   18fb0:	bne	18fc4 <__assert_fail@plt+0x720c>
   18fb4:	ldr	r1, [r0]
   18fb8:	ldr	r0, [r2]
   18fbc:	b	14878 <__assert_fail@plt+0x2ac0>
   18fc0:	mov	r3, #1
   18fc4:	mov	r0, r3
   18fc8:	bx	lr
   18fcc:	mvn	r3, #0
   18fd0:	b	18fc4 <__assert_fail@plt+0x720c>
   18fd4:	mov	r2, r1
   18fd8:	ldr	r1, [r0, #88]	; 0x58
   18fdc:	ldr	r3, [r2, #88]	; 0x58
   18fe0:	cmp	r1, r3
   18fe4:	blt	19014 <__assert_fail@plt+0x725c>
   18fe8:	bgt	19008 <__assert_fail@plt+0x7250>
   18fec:	ldr	r3, [r0, #92]	; 0x5c
   18ff0:	ldr	r1, [r2, #92]	; 0x5c
   18ff4:	subs	r3, r3, r1
   18ff8:	bne	1900c <__assert_fail@plt+0x7254>
   18ffc:	ldr	r1, [r0]
   19000:	ldr	r0, [r2]
   19004:	b	14878 <__assert_fail@plt+0x2ac0>
   19008:	mov	r3, #1
   1900c:	mov	r0, r3
   19010:	bx	lr
   19014:	mvn	r3, #0
   19018:	b	1900c <__assert_fail@plt+0x7254>
   1901c:	mov	r2, r1
   19020:	ldr	r1, [r0, #104]	; 0x68
   19024:	ldr	r3, [r2, #104]	; 0x68
   19028:	cmp	r1, r3
   1902c:	blt	1905c <__assert_fail@plt+0x72a4>
   19030:	bgt	19050 <__assert_fail@plt+0x7298>
   19034:	ldr	r3, [r0, #108]	; 0x6c
   19038:	ldr	r1, [r2, #108]	; 0x6c
   1903c:	subs	r3, r3, r1
   19040:	bne	19054 <__assert_fail@plt+0x729c>
   19044:	ldr	r1, [r0]
   19048:	ldr	r0, [r2]
   1904c:	b	14878 <__assert_fail@plt+0x2ac0>
   19050:	mov	r3, #1
   19054:	mov	r0, r3
   19058:	bx	lr
   1905c:	mvn	r3, #0
   19060:	b	19054 <__assert_fail@plt+0x729c>
   19064:	push	{r4, r5, r6, lr}
   19068:	mov	r6, r1
   1906c:	mov	r5, r0
   19070:	mov	r1, #46	; 0x2e
   19074:	ldr	r0, [r0]
   19078:	bl	11cc8 <strrchr@plt>
   1907c:	mov	r1, #46	; 0x2e
   19080:	mov	r4, r0
   19084:	ldr	r0, [r6]
   19088:	bl	11cc8 <strrchr@plt>
   1908c:	ldr	r3, [pc, #48]	; 190c4 <__assert_fail@plt+0x730c>
   19090:	cmp	r0, #0
   19094:	movne	r1, r0
   19098:	moveq	r1, r3
   1909c:	cmp	r4, #0
   190a0:	movne	r0, r4
   190a4:	moveq	r0, r3
   190a8:	bl	14878 <__assert_fail@plt+0x2ac0>
   190ac:	cmp	r0, #0
   190b0:	popne	{r4, r5, r6, pc}
   190b4:	ldr	r1, [r6]
   190b8:	ldr	r0, [r5]
   190bc:	pop	{r4, r5, r6, lr}
   190c0:	b	14878 <__assert_fail@plt+0x2ac0>
   190c4:	ldrdeq	r7, [r2], -r0
   190c8:	push	{r4, r5, r6, lr}
   190cc:	mov	r5, r1
   190d0:	mov	r6, r0
   190d4:	mov	r1, #46	; 0x2e
   190d8:	ldr	r0, [r5]
   190dc:	bl	11cc8 <strrchr@plt>
   190e0:	mov	r1, #46	; 0x2e
   190e4:	mov	r4, r0
   190e8:	ldr	r0, [r6]
   190ec:	bl	11cc8 <strrchr@plt>
   190f0:	ldr	r3, [pc, #48]	; 19128 <__assert_fail@plt+0x7370>
   190f4:	cmp	r0, #0
   190f8:	movne	r1, r0
   190fc:	moveq	r1, r3
   19100:	cmp	r4, #0
   19104:	movne	r0, r4
   19108:	moveq	r0, r3
   1910c:	bl	14878 <__assert_fail@plt+0x2ac0>
   19110:	cmp	r0, #0
   19114:	popne	{r4, r5, r6, pc}
   19118:	ldr	r1, [r6]
   1911c:	ldr	r0, [r5]
   19120:	pop	{r4, r5, r6, lr}
   19124:	b	14878 <__assert_fail@plt+0x2ac0>
   19128:	ldrdeq	r7, [r2], -r0
   1912c:	ldr	r2, [r1, #120]	; 0x78
   19130:	ldr	r3, [r0, #120]	; 0x78
   19134:	cmp	r2, #9
   19138:	cmpne	r2, #3
   1913c:	moveq	r2, #1
   19140:	movne	r2, #0
   19144:	cmp	r3, #9
   19148:	cmpne	r3, #3
   1914c:	eor	ip, r2, #1
   19150:	moveq	r3, #1
   19154:	movne	r3, #0
   19158:	tst	r3, ip
   1915c:	bne	191a8 <__assert_fail@plt+0x73f0>
   19160:	eor	r3, r3, #1
   19164:	tst	r2, r3
   19168:	beq	19178 <__assert_fail@plt+0x73c0>
   1916c:	mov	r3, #1
   19170:	mov	r0, r3
   19174:	bx	lr
   19178:	ldr	r2, [r1, #104]	; 0x68
   1917c:	ldr	r3, [r0, #104]	; 0x68
   19180:	cmp	r2, r3
   19184:	blt	191a8 <__assert_fail@plt+0x73f0>
   19188:	bgt	1916c <__assert_fail@plt+0x73b4>
   1918c:	ldr	r3, [r1, #108]	; 0x6c
   19190:	ldr	r2, [r0, #108]	; 0x6c
   19194:	subs	r3, r3, r2
   19198:	bne	19170 <__assert_fail@plt+0x73b8>
   1919c:	ldr	r1, [r1]
   191a0:	ldr	r0, [r0]
   191a4:	b	14878 <__assert_fail@plt+0x2ac0>
   191a8:	mvn	r3, #0
   191ac:	b	19170 <__assert_fail@plt+0x73b8>
   191b0:	ldr	r2, [r1, #120]	; 0x78
   191b4:	ldr	r3, [r0, #120]	; 0x78
   191b8:	cmp	r2, #9
   191bc:	cmpne	r2, #3
   191c0:	moveq	r2, #1
   191c4:	movne	r2, #0
   191c8:	cmp	r3, #9
   191cc:	cmpne	r3, #3
   191d0:	mov	ip, r1
   191d4:	moveq	r3, #1
   191d8:	eor	r1, r2, #1
   191dc:	movne	r3, #0
   191e0:	tst	r3, r1
   191e4:	bne	19230 <__assert_fail@plt+0x7478>
   191e8:	eor	r3, r3, #1
   191ec:	tst	r2, r3
   191f0:	beq	19200 <__assert_fail@plt+0x7448>
   191f4:	mov	r3, #1
   191f8:	mov	r0, r3
   191fc:	bx	lr
   19200:	ldr	r2, [r0, #88]	; 0x58
   19204:	ldr	r3, [ip, #88]	; 0x58
   19208:	cmp	r2, r3
   1920c:	blt	19230 <__assert_fail@plt+0x7478>
   19210:	bgt	191f4 <__assert_fail@plt+0x743c>
   19214:	ldr	r3, [r0, #92]	; 0x5c
   19218:	ldr	r2, [ip, #92]	; 0x5c
   1921c:	subs	r3, r3, r2
   19220:	bne	191f8 <__assert_fail@plt+0x7440>
   19224:	ldr	r1, [r0]
   19228:	ldr	r0, [ip]
   1922c:	b	14878 <__assert_fail@plt+0x2ac0>
   19230:	mvn	r3, #0
   19234:	b	191f8 <__assert_fail@plt+0x7440>
   19238:	ldr	r2, [r1, #120]	; 0x78
   1923c:	ldr	r3, [r0, #120]	; 0x78
   19240:	cmp	r2, #9
   19244:	cmpne	r2, #3
   19248:	moveq	r2, #1
   1924c:	movne	r2, #0
   19250:	cmp	r3, #9
   19254:	cmpne	r3, #3
   19258:	eor	ip, r2, #1
   1925c:	moveq	r3, #1
   19260:	movne	r3, #0
   19264:	tst	r3, ip
   19268:	bne	192b4 <__assert_fail@plt+0x74fc>
   1926c:	eor	r3, r3, #1
   19270:	tst	r2, r3
   19274:	beq	19284 <__assert_fail@plt+0x74cc>
   19278:	mov	r3, #1
   1927c:	mov	r0, r3
   19280:	bx	lr
   19284:	ldr	r2, [r1, #88]	; 0x58
   19288:	ldr	r3, [r0, #88]	; 0x58
   1928c:	cmp	r2, r3
   19290:	blt	192b4 <__assert_fail@plt+0x74fc>
   19294:	bgt	19278 <__assert_fail@plt+0x74c0>
   19298:	ldr	r3, [r1, #92]	; 0x5c
   1929c:	ldr	r2, [r0, #92]	; 0x5c
   192a0:	subs	r3, r3, r2
   192a4:	bne	1927c <__assert_fail@plt+0x74c4>
   192a8:	ldr	r1, [r1]
   192ac:	ldr	r0, [r0]
   192b0:	b	14878 <__assert_fail@plt+0x2ac0>
   192b4:	mvn	r3, #0
   192b8:	b	1927c <__assert_fail@plt+0x74c4>
   192bc:	ldr	r2, [r1, #120]	; 0x78
   192c0:	ldr	r3, [r0, #120]	; 0x78
   192c4:	cmp	r2, #9
   192c8:	cmpne	r2, #3
   192cc:	moveq	r2, #1
   192d0:	movne	r2, #0
   192d4:	cmp	r3, #9
   192d8:	cmpne	r3, #3
   192dc:	mov	ip, r1
   192e0:	moveq	r3, #1
   192e4:	eor	r1, r2, #1
   192e8:	movne	r3, #0
   192ec:	tst	r3, r1
   192f0:	bne	1933c <__assert_fail@plt+0x7584>
   192f4:	eor	r3, r3, #1
   192f8:	tst	r2, r3
   192fc:	beq	1930c <__assert_fail@plt+0x7554>
   19300:	mov	r3, #1
   19304:	mov	r0, r3
   19308:	bx	lr
   1930c:	ldr	r2, [r0, #104]	; 0x68
   19310:	ldr	r3, [ip, #104]	; 0x68
   19314:	cmp	r2, r3
   19318:	blt	1933c <__assert_fail@plt+0x7584>
   1931c:	bgt	19300 <__assert_fail@plt+0x7548>
   19320:	ldr	r3, [r0, #108]	; 0x6c
   19324:	ldr	r2, [ip, #108]	; 0x6c
   19328:	subs	r3, r3, r2
   1932c:	bne	19304 <__assert_fail@plt+0x754c>
   19330:	ldr	r1, [r0]
   19334:	ldr	r0, [ip]
   19338:	b	14878 <__assert_fail@plt+0x2ac0>
   1933c:	mvn	r3, #0
   19340:	b	19304 <__assert_fail@plt+0x754c>
   19344:	ldr	r2, [r1, #120]	; 0x78
   19348:	ldr	r3, [r0, #120]	; 0x78
   1934c:	cmp	r2, #9
   19350:	cmpne	r2, #3
   19354:	moveq	r2, #1
   19358:	movne	r2, #0
   1935c:	cmp	r3, #9
   19360:	cmpne	r3, #3
   19364:	mov	ip, r1
   19368:	moveq	r3, #1
   1936c:	eor	r1, r2, #1
   19370:	movne	r3, #0
   19374:	tst	r3, r1
   19378:	bne	193c4 <__assert_fail@plt+0x760c>
   1937c:	eor	r3, r3, #1
   19380:	tst	r2, r3
   19384:	beq	19394 <__assert_fail@plt+0x75dc>
   19388:	mov	r3, #1
   1938c:	mov	r0, r3
   19390:	bx	lr
   19394:	ldr	r2, [r0, #96]	; 0x60
   19398:	ldr	r3, [ip, #96]	; 0x60
   1939c:	cmp	r2, r3
   193a0:	blt	193c4 <__assert_fail@plt+0x760c>
   193a4:	bgt	19388 <__assert_fail@plt+0x75d0>
   193a8:	ldr	r3, [r0, #100]	; 0x64
   193ac:	ldr	r2, [ip, #100]	; 0x64
   193b0:	subs	r3, r3, r2
   193b4:	bne	1938c <__assert_fail@plt+0x75d4>
   193b8:	ldr	r1, [r0]
   193bc:	ldr	r0, [ip]
   193c0:	b	14878 <__assert_fail@plt+0x2ac0>
   193c4:	mvn	r3, #0
   193c8:	b	1938c <__assert_fail@plt+0x75d4>
   193cc:	ldr	r2, [r1, #120]	; 0x78
   193d0:	ldr	r3, [r0, #120]	; 0x78
   193d4:	cmp	r2, #9
   193d8:	cmpne	r2, #3
   193dc:	moveq	r2, #1
   193e0:	movne	r2, #0
   193e4:	cmp	r3, #9
   193e8:	cmpne	r3, #3
   193ec:	eor	ip, r2, #1
   193f0:	moveq	r3, #1
   193f4:	movne	r3, #0
   193f8:	tst	r3, ip
   193fc:	bne	19448 <__assert_fail@plt+0x7690>
   19400:	eor	r3, r3, #1
   19404:	tst	r2, r3
   19408:	beq	19418 <__assert_fail@plt+0x7660>
   1940c:	mov	r3, #1
   19410:	mov	r0, r3
   19414:	bx	lr
   19418:	ldr	r2, [r1, #96]	; 0x60
   1941c:	ldr	r3, [r0, #96]	; 0x60
   19420:	cmp	r2, r3
   19424:	blt	19448 <__assert_fail@plt+0x7690>
   19428:	bgt	1940c <__assert_fail@plt+0x7654>
   1942c:	ldr	r3, [r1, #100]	; 0x64
   19430:	ldr	r2, [r0, #100]	; 0x64
   19434:	subs	r3, r3, r2
   19438:	bne	19410 <__assert_fail@plt+0x7658>
   1943c:	ldr	r1, [r1]
   19440:	ldr	r0, [r0]
   19444:	b	14878 <__assert_fail@plt+0x2ac0>
   19448:	mvn	r3, #0
   1944c:	b	19410 <__assert_fail@plt+0x7658>
   19450:	ldr	r3, [r0, #96]	; 0x60
   19454:	ldr	r2, [r1, #96]	; 0x60
   19458:	cmp	r2, r3
   1945c:	blt	1948c <__assert_fail@plt+0x76d4>
   19460:	bgt	19480 <__assert_fail@plt+0x76c8>
   19464:	ldr	r3, [r1, #100]	; 0x64
   19468:	ldr	r2, [r0, #100]	; 0x64
   1946c:	subs	r3, r3, r2
   19470:	bne	19484 <__assert_fail@plt+0x76cc>
   19474:	ldr	r1, [r1]
   19478:	ldr	r0, [r0]
   1947c:	b	118d8 <strcmp@plt>
   19480:	mov	r3, #1
   19484:	mov	r0, r3
   19488:	bx	lr
   1948c:	mvn	r3, #0
   19490:	b	19484 <__assert_fail@plt+0x76cc>
   19494:	mov	r2, r1
   19498:	ldr	r1, [r0, #96]	; 0x60
   1949c:	ldr	r3, [r2, #96]	; 0x60
   194a0:	cmp	r1, r3
   194a4:	blt	194d4 <__assert_fail@plt+0x771c>
   194a8:	bgt	194c8 <__assert_fail@plt+0x7710>
   194ac:	ldr	r3, [r0, #100]	; 0x64
   194b0:	ldr	r1, [r2, #100]	; 0x64
   194b4:	subs	r3, r3, r1
   194b8:	bne	194cc <__assert_fail@plt+0x7714>
   194bc:	ldr	r1, [r0]
   194c0:	ldr	r0, [r2]
   194c4:	b	118d8 <strcmp@plt>
   194c8:	mov	r3, #1
   194cc:	mov	r0, r3
   194d0:	bx	lr
   194d4:	mvn	r3, #0
   194d8:	b	194cc <__assert_fail@plt+0x7714>
   194dc:	ldr	r3, [r0, #88]	; 0x58
   194e0:	ldr	r2, [r1, #88]	; 0x58
   194e4:	cmp	r2, r3
   194e8:	blt	19518 <__assert_fail@plt+0x7760>
   194ec:	bgt	1950c <__assert_fail@plt+0x7754>
   194f0:	ldr	r3, [r1, #92]	; 0x5c
   194f4:	ldr	r2, [r0, #92]	; 0x5c
   194f8:	subs	r3, r3, r2
   194fc:	bne	19510 <__assert_fail@plt+0x7758>
   19500:	ldr	r1, [r1]
   19504:	ldr	r0, [r0]
   19508:	b	118d8 <strcmp@plt>
   1950c:	mov	r3, #1
   19510:	mov	r0, r3
   19514:	bx	lr
   19518:	mvn	r3, #0
   1951c:	b	19510 <__assert_fail@plt+0x7758>
   19520:	ldr	r3, [r0, #104]	; 0x68
   19524:	ldr	r2, [r1, #104]	; 0x68
   19528:	cmp	r2, r3
   1952c:	blt	1955c <__assert_fail@plt+0x77a4>
   19530:	bgt	19550 <__assert_fail@plt+0x7798>
   19534:	ldr	r3, [r1, #108]	; 0x6c
   19538:	ldr	r2, [r0, #108]	; 0x6c
   1953c:	subs	r3, r3, r2
   19540:	bne	19554 <__assert_fail@plt+0x779c>
   19544:	ldr	r1, [r1]
   19548:	ldr	r0, [r0]
   1954c:	b	118d8 <strcmp@plt>
   19550:	mov	r3, #1
   19554:	mov	r0, r3
   19558:	bx	lr
   1955c:	mvn	r3, #0
   19560:	b	19554 <__assert_fail@plt+0x779c>
   19564:	mov	r2, r1
   19568:	ldr	r1, [r0, #104]	; 0x68
   1956c:	ldr	r3, [r2, #104]	; 0x68
   19570:	cmp	r1, r3
   19574:	blt	195a4 <__assert_fail@plt+0x77ec>
   19578:	bgt	19598 <__assert_fail@plt+0x77e0>
   1957c:	ldr	r3, [r0, #108]	; 0x6c
   19580:	ldr	r1, [r2, #108]	; 0x6c
   19584:	subs	r3, r3, r1
   19588:	bne	1959c <__assert_fail@plt+0x77e4>
   1958c:	ldr	r1, [r0]
   19590:	ldr	r0, [r2]
   19594:	b	118d8 <strcmp@plt>
   19598:	mov	r3, #1
   1959c:	mov	r0, r3
   195a0:	bx	lr
   195a4:	mvn	r3, #0
   195a8:	b	1959c <__assert_fail@plt+0x77e4>
   195ac:	mov	r2, r1
   195b0:	ldr	r1, [r0, #88]	; 0x58
   195b4:	ldr	r3, [r2, #88]	; 0x58
   195b8:	cmp	r1, r3
   195bc:	blt	195ec <__assert_fail@plt+0x7834>
   195c0:	bgt	195e0 <__assert_fail@plt+0x7828>
   195c4:	ldr	r3, [r0, #92]	; 0x5c
   195c8:	ldr	r1, [r2, #92]	; 0x5c
   195cc:	subs	r3, r3, r1
   195d0:	bne	195e4 <__assert_fail@plt+0x782c>
   195d4:	ldr	r1, [r0]
   195d8:	ldr	r0, [r2]
   195dc:	b	118d8 <strcmp@plt>
   195e0:	mov	r3, #1
   195e4:	mov	r0, r3
   195e8:	bx	lr
   195ec:	mvn	r3, #0
   195f0:	b	195e4 <__assert_fail@plt+0x782c>
   195f4:	ldr	r2, [r1, #120]	; 0x78
   195f8:	ldr	r3, [r0, #120]	; 0x78
   195fc:	cmp	r2, #9
   19600:	cmpne	r2, #3
   19604:	moveq	r2, #1
   19608:	movne	r2, #0
   1960c:	cmp	r3, #9
   19610:	cmpne	r3, #3
   19614:	eor	ip, r2, #1
   19618:	moveq	r3, #1
   1961c:	movne	r3, #0
   19620:	tst	r3, ip
   19624:	bne	1969c <__assert_fail@plt+0x78e4>
   19628:	eor	r3, r3, #1
   1962c:	tst	r2, r3
   19630:	beq	1963c <__assert_fail@plt+0x7884>
   19634:	mov	r0, #1
   19638:	bx	lr
   1963c:	push	{r4, r5, r6, lr}
   19640:	mov	r4, r1
   19644:	mov	r5, r0
   19648:	mov	r1, #46	; 0x2e
   1964c:	ldr	r0, [r4]
   19650:	bl	11cc8 <strrchr@plt>
   19654:	mov	r1, #46	; 0x2e
   19658:	mov	r6, r0
   1965c:	ldr	r0, [r5]
   19660:	bl	11cc8 <strrchr@plt>
   19664:	ldr	r3, [pc, #56]	; 196a4 <__assert_fail@plt+0x78ec>
   19668:	cmp	r0, #0
   1966c:	movne	r1, r0
   19670:	moveq	r1, r3
   19674:	cmp	r6, #0
   19678:	movne	r0, r6
   1967c:	moveq	r0, r3
   19680:	bl	14878 <__assert_fail@plt+0x2ac0>
   19684:	cmp	r0, #0
   19688:	popne	{r4, r5, r6, pc}
   1968c:	ldr	r1, [r5]
   19690:	ldr	r0, [r4]
   19694:	pop	{r4, r5, r6, lr}
   19698:	b	14878 <__assert_fail@plt+0x2ac0>
   1969c:	mvn	r0, #0
   196a0:	bx	lr
   196a4:	ldrdeq	r7, [r2], -r0
   196a8:	ldr	r2, [r1, #120]	; 0x78
   196ac:	ldr	r3, [r0, #120]	; 0x78
   196b0:	cmp	r2, #9
   196b4:	cmpne	r2, #3
   196b8:	moveq	r2, #1
   196bc:	movne	r2, #0
   196c0:	cmp	r3, #9
   196c4:	cmpne	r3, #3
   196c8:	eor	ip, r2, #1
   196cc:	moveq	r3, #1
   196d0:	movne	r3, #0
   196d4:	tst	r3, ip
   196d8:	bne	19750 <__assert_fail@plt+0x7998>
   196dc:	eor	r3, r3, #1
   196e0:	tst	r2, r3
   196e4:	beq	196f0 <__assert_fail@plt+0x7938>
   196e8:	mov	r0, #1
   196ec:	bx	lr
   196f0:	push	{r4, r5, r6, lr}
   196f4:	mov	r5, r1
   196f8:	mov	r4, r0
   196fc:	mov	r1, #46	; 0x2e
   19700:	ldr	r0, [r0]
   19704:	bl	11cc8 <strrchr@plt>
   19708:	mov	r1, #46	; 0x2e
   1970c:	mov	r6, r0
   19710:	ldr	r0, [r5]
   19714:	bl	11cc8 <strrchr@plt>
   19718:	ldr	r3, [pc, #56]	; 19758 <__assert_fail@plt+0x79a0>
   1971c:	cmp	r0, #0
   19720:	movne	r1, r0
   19724:	moveq	r1, r3
   19728:	cmp	r6, #0
   1972c:	movne	r0, r6
   19730:	moveq	r0, r3
   19734:	bl	14878 <__assert_fail@plt+0x2ac0>
   19738:	cmp	r0, #0
   1973c:	popne	{r4, r5, r6, pc}
   19740:	ldr	r1, [r5]
   19744:	ldr	r0, [r4]
   19748:	pop	{r4, r5, r6, lr}
   1974c:	b	14878 <__assert_fail@plt+0x2ac0>
   19750:	mvn	r0, #0
   19754:	bx	lr
   19758:	ldrdeq	r7, [r2], -r0
   1975c:	push	{r4, r5, r6, lr}
   19760:	mov	r6, r1
   19764:	ldr	r5, [r0]
   19768:	mov	r1, #46	; 0x2e
   1976c:	mov	r0, r5
   19770:	bl	11cc8 <strrchr@plt>
   19774:	ldr	r6, [r6]
   19778:	mov	r1, #46	; 0x2e
   1977c:	mov	r4, r0
   19780:	mov	r0, r6
   19784:	bl	11cc8 <strrchr@plt>
   19788:	cmp	r4, #0
   1978c:	beq	197c0 <__assert_fail@plt+0x7a08>
   19790:	ldr	r3, [pc, #56]	; 197d0 <__assert_fail@plt+0x7a18>
   19794:	cmp	r0, #0
   19798:	moveq	r0, r3
   1979c:	mov	r1, r0
   197a0:	mov	r0, r4
   197a4:	bl	118d8 <strcmp@plt>
   197a8:	cmp	r0, #0
   197ac:	popne	{r4, r5, r6, pc}
   197b0:	mov	r1, r6
   197b4:	mov	r0, r5
   197b8:	pop	{r4, r5, r6, lr}
   197bc:	b	118d8 <strcmp@plt>
   197c0:	cmp	r0, #0
   197c4:	ldrne	r4, [pc, #4]	; 197d0 <__assert_fail@plt+0x7a18>
   197c8:	bne	1979c <__assert_fail@plt+0x79e4>
   197cc:	b	197b0 <__assert_fail@plt+0x79f8>
   197d0:	ldrdeq	r7, [r2], -r0
   197d4:	push	{r4, r5, r6, lr}
   197d8:	mov	r6, r0
   197dc:	ldr	r5, [r1]
   197e0:	mov	r1, #46	; 0x2e
   197e4:	mov	r0, r5
   197e8:	bl	11cc8 <strrchr@plt>
   197ec:	ldr	r6, [r6]
   197f0:	mov	r1, #46	; 0x2e
   197f4:	mov	r4, r0
   197f8:	mov	r0, r6
   197fc:	bl	11cc8 <strrchr@plt>
   19800:	cmp	r4, #0
   19804:	beq	19838 <__assert_fail@plt+0x7a80>
   19808:	ldr	r3, [pc, #56]	; 19848 <__assert_fail@plt+0x7a90>
   1980c:	cmp	r0, #0
   19810:	moveq	r0, r3
   19814:	mov	r1, r0
   19818:	mov	r0, r4
   1981c:	bl	118d8 <strcmp@plt>
   19820:	cmp	r0, #0
   19824:	popne	{r4, r5, r6, pc}
   19828:	mov	r1, r6
   1982c:	mov	r0, r5
   19830:	pop	{r4, r5, r6, lr}
   19834:	b	118d8 <strcmp@plt>
   19838:	cmp	r0, #0
   1983c:	ldrne	r4, [pc, #4]	; 19848 <__assert_fail@plt+0x7a90>
   19840:	bne	19814 <__assert_fail@plt+0x7a5c>
   19844:	b	19828 <__assert_fail@plt+0x7a70>
   19848:	ldrdeq	r7, [r2], -r0
   1984c:	ldr	r2, [r1, #120]	; 0x78
   19850:	ldr	r3, [r0, #120]	; 0x78
   19854:	cmp	r2, #9
   19858:	cmpne	r2, #3
   1985c:	moveq	r2, #1
   19860:	movne	r2, #0
   19864:	cmp	r3, #9
   19868:	cmpne	r3, #3
   1986c:	mov	ip, r1
   19870:	moveq	r3, #1
   19874:	eor	r1, r2, #1
   19878:	movne	r3, #0
   1987c:	tst	r3, r1
   19880:	bne	198cc <__assert_fail@plt+0x7b14>
   19884:	eor	r3, r3, #1
   19888:	tst	r2, r3
   1988c:	beq	1989c <__assert_fail@plt+0x7ae4>
   19890:	mov	r3, #1
   19894:	mov	r0, r3
   19898:	bx	lr
   1989c:	ldr	r2, [r0, #96]	; 0x60
   198a0:	ldr	r3, [ip, #96]	; 0x60
   198a4:	cmp	r2, r3
   198a8:	blt	198cc <__assert_fail@plt+0x7b14>
   198ac:	bgt	19890 <__assert_fail@plt+0x7ad8>
   198b0:	ldr	r3, [r0, #100]	; 0x64
   198b4:	ldr	r2, [ip, #100]	; 0x64
   198b8:	subs	r3, r3, r2
   198bc:	bne	19894 <__assert_fail@plt+0x7adc>
   198c0:	ldr	r1, [r0]
   198c4:	ldr	r0, [ip]
   198c8:	b	118d8 <strcmp@plt>
   198cc:	mvn	r3, #0
   198d0:	b	19894 <__assert_fail@plt+0x7adc>
   198d4:	ldr	r2, [r1, #120]	; 0x78
   198d8:	ldr	r3, [r0, #120]	; 0x78
   198dc:	cmp	r2, #9
   198e0:	cmpne	r2, #3
   198e4:	moveq	r2, #1
   198e8:	movne	r2, #0
   198ec:	cmp	r3, #9
   198f0:	cmpne	r3, #3
   198f4:	eor	ip, r2, #1
   198f8:	moveq	r3, #1
   198fc:	movne	r3, #0
   19900:	tst	r3, ip
   19904:	bne	19950 <__assert_fail@plt+0x7b98>
   19908:	eor	r3, r3, #1
   1990c:	tst	r2, r3
   19910:	beq	19920 <__assert_fail@plt+0x7b68>
   19914:	mov	r3, #1
   19918:	mov	r0, r3
   1991c:	bx	lr
   19920:	ldr	r2, [r1, #104]	; 0x68
   19924:	ldr	r3, [r0, #104]	; 0x68
   19928:	cmp	r2, r3
   1992c:	blt	19950 <__assert_fail@plt+0x7b98>
   19930:	bgt	19914 <__assert_fail@plt+0x7b5c>
   19934:	ldr	r3, [r1, #108]	; 0x6c
   19938:	ldr	r2, [r0, #108]	; 0x6c
   1993c:	subs	r3, r3, r2
   19940:	bne	19918 <__assert_fail@plt+0x7b60>
   19944:	ldr	r1, [r1]
   19948:	ldr	r0, [r0]
   1994c:	b	118d8 <strcmp@plt>
   19950:	mvn	r3, #0
   19954:	b	19918 <__assert_fail@plt+0x7b60>
   19958:	ldr	r2, [r1, #120]	; 0x78
   1995c:	ldr	r3, [r0, #120]	; 0x78
   19960:	cmp	r2, #9
   19964:	cmpne	r2, #3
   19968:	moveq	r2, #1
   1996c:	movne	r2, #0
   19970:	cmp	r3, #9
   19974:	cmpne	r3, #3
   19978:	eor	ip, r2, #1
   1997c:	moveq	r3, #1
   19980:	movne	r3, #0
   19984:	tst	r3, ip
   19988:	bne	199d4 <__assert_fail@plt+0x7c1c>
   1998c:	eor	r3, r3, #1
   19990:	tst	r2, r3
   19994:	beq	199a4 <__assert_fail@plt+0x7bec>
   19998:	mov	r3, #1
   1999c:	mov	r0, r3
   199a0:	bx	lr
   199a4:	ldr	r2, [r1, #88]	; 0x58
   199a8:	ldr	r3, [r0, #88]	; 0x58
   199ac:	cmp	r2, r3
   199b0:	blt	199d4 <__assert_fail@plt+0x7c1c>
   199b4:	bgt	19998 <__assert_fail@plt+0x7be0>
   199b8:	ldr	r3, [r1, #92]	; 0x5c
   199bc:	ldr	r2, [r0, #92]	; 0x5c
   199c0:	subs	r3, r3, r2
   199c4:	bne	1999c <__assert_fail@plt+0x7be4>
   199c8:	ldr	r1, [r1]
   199cc:	ldr	r0, [r0]
   199d0:	b	118d8 <strcmp@plt>
   199d4:	mvn	r3, #0
   199d8:	b	1999c <__assert_fail@plt+0x7be4>
   199dc:	ldr	r2, [r1, #120]	; 0x78
   199e0:	ldr	r3, [r0, #120]	; 0x78
   199e4:	cmp	r2, #9
   199e8:	cmpne	r2, #3
   199ec:	moveq	r2, #1
   199f0:	movne	r2, #0
   199f4:	cmp	r3, #9
   199f8:	cmpne	r3, #3
   199fc:	eor	ip, r2, #1
   19a00:	moveq	r3, #1
   19a04:	movne	r3, #0
   19a08:	tst	r3, ip
   19a0c:	bne	19a98 <__assert_fail@plt+0x7ce0>
   19a10:	eor	r3, r3, #1
   19a14:	tst	r2, r3
   19a18:	beq	19a24 <__assert_fail@plt+0x7c6c>
   19a1c:	mov	r0, #1
   19a20:	bx	lr
   19a24:	push	{r4, r5, r6, lr}
   19a28:	mov	r4, r1
   19a2c:	ldr	r6, [r0]
   19a30:	mov	r1, #46	; 0x2e
   19a34:	mov	r0, r6
   19a38:	bl	11cc8 <strrchr@plt>
   19a3c:	ldr	r4, [r4]
   19a40:	mov	r1, #46	; 0x2e
   19a44:	mov	r5, r0
   19a48:	mov	r0, r4
   19a4c:	bl	11cc8 <strrchr@plt>
   19a50:	cmp	r5, #0
   19a54:	beq	19a88 <__assert_fail@plt+0x7cd0>
   19a58:	ldr	r3, [pc, #64]	; 19aa0 <__assert_fail@plt+0x7ce8>
   19a5c:	cmp	r0, #0
   19a60:	moveq	r0, r3
   19a64:	mov	r1, r0
   19a68:	mov	r0, r5
   19a6c:	bl	118d8 <strcmp@plt>
   19a70:	cmp	r0, #0
   19a74:	popne	{r4, r5, r6, pc}
   19a78:	mov	r1, r4
   19a7c:	mov	r0, r6
   19a80:	pop	{r4, r5, r6, lr}
   19a84:	b	118d8 <strcmp@plt>
   19a88:	cmp	r0, #0
   19a8c:	ldrne	r5, [pc, #12]	; 19aa0 <__assert_fail@plt+0x7ce8>
   19a90:	bne	19a64 <__assert_fail@plt+0x7cac>
   19a94:	b	19a78 <__assert_fail@plt+0x7cc0>
   19a98:	mvn	r0, #0
   19a9c:	bx	lr
   19aa0:	ldrdeq	r7, [r2], -r0
   19aa4:	ldr	r3, [pc, #1312]	; 19fcc <__assert_fail@plt+0x8214>
   19aa8:	push	{r7, lr}
   19aac:	sub	sp, sp, #64	; 0x40
   19ab0:	ldr	r3, [r3]
   19ab4:	subs	r4, r0, #0
   19ab8:	str	r3, [sp, #60]	; 0x3c
   19abc:	beq	19af8 <__assert_fail@plt+0x7d40>
   19ac0:	ldr	r3, [pc, #1288]	; 19fd0 <__assert_fail@plt+0x8218>
   19ac4:	mov	r2, #5
   19ac8:	ldr	r1, [pc, #1284]	; 19fd4 <__assert_fail@plt+0x821c>
   19acc:	mov	r0, #0
   19ad0:	ldr	r5, [r3]
   19ad4:	bl	119a4 <dcgettext@plt>
   19ad8:	ldr	r3, [pc, #1272]	; 19fd8 <__assert_fail@plt+0x8220>
   19adc:	mov	r1, #1
   19ae0:	ldr	r3, [r3]
   19ae4:	mov	r2, r0
   19ae8:	mov	r0, r5
   19aec:	bl	11c74 <__fprintf_chk@plt>
   19af0:	mov	r0, r4
   19af4:	bl	11bc0 <exit@plt>
   19af8:	mov	r2, #5
   19afc:	ldr	r1, [pc, #1240]	; 19fdc <__assert_fail@plt+0x8224>
   19b00:	bl	119a4 <dcgettext@plt>
   19b04:	ldr	r3, [pc, #1228]	; 19fd8 <__assert_fail@plt+0x8220>
   19b08:	ldr	r5, [pc, #1232]	; 19fe0 <__assert_fail@plt+0x8228>
   19b0c:	ldr	r2, [r3]
   19b10:	mov	r1, r0
   19b14:	mov	r0, #1
   19b18:	bl	11c50 <__printf_chk@plt>
   19b1c:	mov	r2, #5
   19b20:	ldr	r1, [pc, #1212]	; 19fe4 <__assert_fail@plt+0x822c>
   19b24:	mov	r0, r4
   19b28:	bl	119a4 <dcgettext@plt>
   19b2c:	ldr	r1, [r5]
   19b30:	bl	118a8 <fputs_unlocked@plt>
   19b34:	mov	r2, #5
   19b38:	ldr	r1, [pc, #1192]	; 19fe8 <__assert_fail@plt+0x8230>
   19b3c:	mov	r0, r4
   19b40:	bl	119a4 <dcgettext@plt>
   19b44:	ldr	r1, [r5]
   19b48:	bl	118a8 <fputs_unlocked@plt>
   19b4c:	mov	r2, #5
   19b50:	ldr	r1, [pc, #1172]	; 19fec <__assert_fail@plt+0x8234>
   19b54:	mov	r0, r4
   19b58:	bl	119a4 <dcgettext@plt>
   19b5c:	ldr	r1, [r5]
   19b60:	bl	118a8 <fputs_unlocked@plt>
   19b64:	mov	r2, #5
   19b68:	ldr	r1, [pc, #1152]	; 19ff0 <__assert_fail@plt+0x8238>
   19b6c:	mov	r0, r4
   19b70:	bl	119a4 <dcgettext@plt>
   19b74:	ldr	r1, [r5]
   19b78:	bl	118a8 <fputs_unlocked@plt>
   19b7c:	mov	r2, #5
   19b80:	ldr	r1, [pc, #1132]	; 19ff4 <__assert_fail@plt+0x823c>
   19b84:	mov	r0, r4
   19b88:	bl	119a4 <dcgettext@plt>
   19b8c:	ldr	r1, [r5]
   19b90:	bl	118a8 <fputs_unlocked@plt>
   19b94:	mov	r2, #5
   19b98:	ldr	r1, [pc, #1112]	; 19ff8 <__assert_fail@plt+0x8240>
   19b9c:	mov	r0, r4
   19ba0:	bl	119a4 <dcgettext@plt>
   19ba4:	ldr	r1, [r5]
   19ba8:	bl	118a8 <fputs_unlocked@plt>
   19bac:	mov	r2, #5
   19bb0:	ldr	r1, [pc, #1092]	; 19ffc <__assert_fail@plt+0x8244>
   19bb4:	mov	r0, r4
   19bb8:	bl	119a4 <dcgettext@plt>
   19bbc:	ldr	r1, [r5]
   19bc0:	bl	118a8 <fputs_unlocked@plt>
   19bc4:	mov	r2, #5
   19bc8:	ldr	r1, [pc, #1072]	; 1a000 <__assert_fail@plt+0x8248>
   19bcc:	mov	r0, r4
   19bd0:	bl	119a4 <dcgettext@plt>
   19bd4:	ldr	r1, [r5]
   19bd8:	bl	118a8 <fputs_unlocked@plt>
   19bdc:	mov	r2, #5
   19be0:	ldr	r1, [pc, #1052]	; 1a004 <__assert_fail@plt+0x824c>
   19be4:	mov	r0, r4
   19be8:	bl	119a4 <dcgettext@plt>
   19bec:	ldr	r1, [r5]
   19bf0:	bl	118a8 <fputs_unlocked@plt>
   19bf4:	mov	r2, #5
   19bf8:	ldr	r1, [pc, #1032]	; 1a008 <__assert_fail@plt+0x8250>
   19bfc:	mov	r0, r4
   19c00:	bl	119a4 <dcgettext@plt>
   19c04:	ldr	r1, [r5]
   19c08:	bl	118a8 <fputs_unlocked@plt>
   19c0c:	mov	r2, #5
   19c10:	ldr	r1, [pc, #1012]	; 1a00c <__assert_fail@plt+0x8254>
   19c14:	mov	r0, r4
   19c18:	bl	119a4 <dcgettext@plt>
   19c1c:	ldr	r1, [r5]
   19c20:	bl	118a8 <fputs_unlocked@plt>
   19c24:	mov	r2, #5
   19c28:	ldr	r1, [pc, #992]	; 1a010 <__assert_fail@plt+0x8258>
   19c2c:	mov	r0, r4
   19c30:	bl	119a4 <dcgettext@plt>
   19c34:	ldr	r1, [r5]
   19c38:	bl	118a8 <fputs_unlocked@plt>
   19c3c:	mov	r2, #5
   19c40:	ldr	r1, [pc, #972]	; 1a014 <__assert_fail@plt+0x825c>
   19c44:	mov	r0, r4
   19c48:	bl	119a4 <dcgettext@plt>
   19c4c:	ldr	r1, [r5]
   19c50:	bl	118a8 <fputs_unlocked@plt>
   19c54:	mov	r2, #5
   19c58:	ldr	r1, [pc, #952]	; 1a018 <__assert_fail@plt+0x8260>
   19c5c:	mov	r0, r4
   19c60:	bl	119a4 <dcgettext@plt>
   19c64:	ldr	r1, [r5]
   19c68:	bl	118a8 <fputs_unlocked@plt>
   19c6c:	mov	r2, #5
   19c70:	ldr	r1, [pc, #932]	; 1a01c <__assert_fail@plt+0x8264>
   19c74:	mov	r0, r4
   19c78:	bl	119a4 <dcgettext@plt>
   19c7c:	ldr	r1, [r5]
   19c80:	bl	118a8 <fputs_unlocked@plt>
   19c84:	mov	r2, #5
   19c88:	ldr	r1, [pc, #912]	; 1a020 <__assert_fail@plt+0x8268>
   19c8c:	mov	r0, r4
   19c90:	bl	119a4 <dcgettext@plt>
   19c94:	ldr	r1, [r5]
   19c98:	bl	118a8 <fputs_unlocked@plt>
   19c9c:	mov	r2, #5
   19ca0:	ldr	r1, [pc, #892]	; 1a024 <__assert_fail@plt+0x826c>
   19ca4:	mov	r0, r4
   19ca8:	bl	119a4 <dcgettext@plt>
   19cac:	ldr	r1, [r5]
   19cb0:	bl	118a8 <fputs_unlocked@plt>
   19cb4:	mov	r2, #5
   19cb8:	ldr	r1, [pc, #872]	; 1a028 <__assert_fail@plt+0x8270>
   19cbc:	mov	r0, r4
   19cc0:	bl	119a4 <dcgettext@plt>
   19cc4:	ldr	r1, [r5]
   19cc8:	bl	118a8 <fputs_unlocked@plt>
   19ccc:	mov	r2, #5
   19cd0:	ldr	r1, [pc, #852]	; 1a02c <__assert_fail@plt+0x8274>
   19cd4:	mov	r0, r4
   19cd8:	bl	119a4 <dcgettext@plt>
   19cdc:	ldr	r1, [r5]
   19ce0:	bl	118a8 <fputs_unlocked@plt>
   19ce4:	mov	r2, #5
   19ce8:	ldr	r1, [pc, #832]	; 1a030 <__assert_fail@plt+0x8278>
   19cec:	mov	r0, r4
   19cf0:	bl	119a4 <dcgettext@plt>
   19cf4:	ldr	r1, [r5]
   19cf8:	bl	118a8 <fputs_unlocked@plt>
   19cfc:	mov	r2, #5
   19d00:	ldr	r1, [pc, #812]	; 1a034 <__assert_fail@plt+0x827c>
   19d04:	mov	r0, r4
   19d08:	bl	119a4 <dcgettext@plt>
   19d0c:	ldr	r1, [r5]
   19d10:	bl	118a8 <fputs_unlocked@plt>
   19d14:	mov	r2, #5
   19d18:	ldr	r1, [pc, #792]	; 1a038 <__assert_fail@plt+0x8280>
   19d1c:	mov	r0, r4
   19d20:	bl	119a4 <dcgettext@plt>
   19d24:	ldr	r1, [r5]
   19d28:	bl	118a8 <fputs_unlocked@plt>
   19d2c:	mov	r2, #5
   19d30:	ldr	r1, [pc, #772]	; 1a03c <__assert_fail@plt+0x8284>
   19d34:	mov	r0, r4
   19d38:	bl	119a4 <dcgettext@plt>
   19d3c:	ldr	r1, [r5]
   19d40:	bl	118a8 <fputs_unlocked@plt>
   19d44:	mov	r2, #5
   19d48:	ldr	r1, [pc, #752]	; 1a040 <__assert_fail@plt+0x8288>
   19d4c:	mov	r0, r4
   19d50:	bl	119a4 <dcgettext@plt>
   19d54:	ldr	r1, [r5]
   19d58:	bl	118a8 <fputs_unlocked@plt>
   19d5c:	mov	r2, #5
   19d60:	ldr	r1, [pc, #732]	; 1a044 <__assert_fail@plt+0x828c>
   19d64:	mov	r0, r4
   19d68:	bl	119a4 <dcgettext@plt>
   19d6c:	ldr	r1, [r5]
   19d70:	bl	118a8 <fputs_unlocked@plt>
   19d74:	mov	r2, #5
   19d78:	ldr	r1, [pc, #712]	; 1a048 <__assert_fail@plt+0x8290>
   19d7c:	mov	r0, r4
   19d80:	bl	119a4 <dcgettext@plt>
   19d84:	ldr	r1, [r5]
   19d88:	bl	118a8 <fputs_unlocked@plt>
   19d8c:	mov	r2, #5
   19d90:	ldr	r1, [pc, #692]	; 1a04c <__assert_fail@plt+0x8294>
   19d94:	mov	r0, r4
   19d98:	bl	119a4 <dcgettext@plt>
   19d9c:	ldr	r1, [r5]
   19da0:	bl	118a8 <fputs_unlocked@plt>
   19da4:	mov	r2, #5
   19da8:	ldr	r1, [pc, #672]	; 1a050 <__assert_fail@plt+0x8298>
   19dac:	mov	r0, r4
   19db0:	bl	119a4 <dcgettext@plt>
   19db4:	ldr	r1, [r5]
   19db8:	bl	118a8 <fputs_unlocked@plt>
   19dbc:	mov	r2, #5
   19dc0:	ldr	r1, [pc, #652]	; 1a054 <__assert_fail@plt+0x829c>
   19dc4:	mov	r0, r4
   19dc8:	bl	119a4 <dcgettext@plt>
   19dcc:	ldr	r1, [r5]
   19dd0:	bl	118a8 <fputs_unlocked@plt>
   19dd4:	mov	r2, #5
   19dd8:	ldr	r1, [pc, #632]	; 1a058 <__assert_fail@plt+0x82a0>
   19ddc:	mov	r0, r4
   19de0:	bl	119a4 <dcgettext@plt>
   19de4:	ldr	r1, [r5]
   19de8:	bl	118a8 <fputs_unlocked@plt>
   19dec:	ldr	r3, [pc, #616]	; 1a05c <__assert_fail@plt+0x82a4>
   19df0:	ldr	r2, [r3]
   19df4:	cmp	r2, #1
   19df8:	beq	19f18 <__assert_fail@plt+0x8160>
   19dfc:	ldr	r3, [pc, #604]	; 1a060 <__assert_fail@plt+0x82a8>
   19e00:	cmp	r2, #2
   19e04:	ldr	r7, [pc, #600]	; 1a064 <__assert_fail@plt+0x82ac>
   19e08:	movne	r7, r3
   19e0c:	ldr	lr, [pc, #596]	; 1a068 <__assert_fail@plt+0x82b0>
   19e10:	add	ip, sp, #4
   19e14:	add	r5, sp, #4
   19e18:	ldm	lr!, {r0, r1, r2, r3}
   19e1c:	stmia	ip!, {r0, r1, r2, r3}
   19e20:	ldm	lr!, {r0, r1, r2, r3}
   19e24:	ldr	r6, [sp, #4]
   19e28:	stmia	ip!, {r0, r1, r2, r3}
   19e2c:	cmp	r6, #0
   19e30:	ldm	lr!, {r0, r1, r2, r3}
   19e34:	stmia	ip!, {r0, r1, r2, r3}
   19e38:	ldm	lr, {r0, r1}
   19e3c:	stm	ip, {r0, r1}
   19e40:	bne	19e54 <__assert_fail@plt+0x809c>
   19e44:	b	19e68 <__assert_fail@plt+0x80b0>
   19e48:	ldr	r6, [r5, #8]!
   19e4c:	cmp	r6, #0
   19e50:	beq	19e68 <__assert_fail@plt+0x80b0>
   19e54:	mov	r1, r6
   19e58:	mov	r0, r7
   19e5c:	bl	118d8 <strcmp@plt>
   19e60:	cmp	r0, #0
   19e64:	bne	19e48 <__assert_fail@plt+0x8090>
   19e68:	ldr	r5, [r5, #4]
   19e6c:	mov	r2, #5
   19e70:	cmp	r5, #0
   19e74:	ldr	r1, [pc, #496]	; 1a06c <__assert_fail@plt+0x82b4>
   19e78:	beq	19f48 <__assert_fail@plt+0x8190>
   19e7c:	mov	r0, #0
   19e80:	bl	119a4 <dcgettext@plt>
   19e84:	ldr	r3, [pc, #484]	; 1a070 <__assert_fail@plt+0x82b8>
   19e88:	ldr	r2, [pc, #484]	; 1a074 <__assert_fail@plt+0x82bc>
   19e8c:	mov	r1, r0
   19e90:	mov	r0, #1
   19e94:	bl	11c50 <__printf_chk@plt>
   19e98:	mov	r1, #0
   19e9c:	mov	r0, #5
   19ea0:	bl	11ca4 <setlocale@plt>
   19ea4:	cmp	r0, #0
   19ea8:	beq	19ec0 <__assert_fail@plt+0x8108>
   19eac:	mov	r2, #3
   19eb0:	ldr	r1, [pc, #448]	; 1a078 <__assert_fail@plt+0x82c0>
   19eb4:	bl	11d58 <strncmp@plt>
   19eb8:	cmp	r0, #0
   19ebc:	bne	19f24 <__assert_fail@plt+0x816c>
   19ec0:	mov	r2, #5
   19ec4:	ldr	r1, [pc, #432]	; 1a07c <__assert_fail@plt+0x82c4>
   19ec8:	mov	r0, #0
   19ecc:	bl	119a4 <dcgettext@plt>
   19ed0:	mov	r3, r7
   19ed4:	ldr	r2, [pc, #404]	; 1a070 <__assert_fail@plt+0x82b8>
   19ed8:	mov	r1, r0
   19edc:	mov	r0, #1
   19ee0:	bl	11c50 <__printf_chk@plt>
   19ee4:	mov	r2, #5
   19ee8:	ldr	r1, [pc, #400]	; 1a080 <__assert_fail@plt+0x82c8>
   19eec:	mov	r0, #0
   19ef0:	bl	119a4 <dcgettext@plt>
   19ef4:	ldr	r2, [pc, #392]	; 1a084 <__assert_fail@plt+0x82cc>
   19ef8:	cmp	r7, r5
   19efc:	ldr	r3, [pc, #388]	; 1a088 <__assert_fail@plt+0x82d0>
   19f00:	movne	r3, r2
   19f04:	mov	r1, r0
   19f08:	mov	r2, r5
   19f0c:	mov	r0, #1
   19f10:	bl	11c50 <__printf_chk@plt>
   19f14:	b	19af0 <__assert_fail@plt+0x7d38>
   19f18:	ldr	r7, [pc, #364]	; 1a08c <__assert_fail@plt+0x82d4>
   19f1c:	b	19e0c <__assert_fail@plt+0x8054>
   19f20:	mov	r5, r7
   19f24:	mov	r2, #5
   19f28:	ldr	r1, [pc, #352]	; 1a090 <__assert_fail@plt+0x82d8>
   19f2c:	mov	r0, #0
   19f30:	bl	119a4 <dcgettext@plt>
   19f34:	mov	r2, r7
   19f38:	mov	r1, r0
   19f3c:	mov	r0, #1
   19f40:	bl	11c50 <__printf_chk@plt>
   19f44:	b	19ec0 <__assert_fail@plt+0x8108>
   19f48:	mov	r0, r5
   19f4c:	bl	119a4 <dcgettext@plt>
   19f50:	ldr	r3, [pc, #280]	; 1a070 <__assert_fail@plt+0x82b8>
   19f54:	ldr	r2, [pc, #280]	; 1a074 <__assert_fail@plt+0x82bc>
   19f58:	mov	r1, r0
   19f5c:	mov	r0, #1
   19f60:	bl	11c50 <__printf_chk@plt>
   19f64:	mov	r1, r5
   19f68:	mov	r0, #5
   19f6c:	bl	11ca4 <setlocale@plt>
   19f70:	cmp	r0, #0
   19f74:	beq	19f8c <__assert_fail@plt+0x81d4>
   19f78:	mov	r2, #3
   19f7c:	ldr	r1, [pc, #244]	; 1a078 <__assert_fail@plt+0x82c0>
   19f80:	bl	11d58 <strncmp@plt>
   19f84:	cmp	r0, #0
   19f88:	bne	19f20 <__assert_fail@plt+0x8168>
   19f8c:	mov	r2, #5
   19f90:	ldr	r1, [pc, #228]	; 1a07c <__assert_fail@plt+0x82c4>
   19f94:	bl	119a4 <dcgettext@plt>
   19f98:	mov	r3, r7
   19f9c:	ldr	r2, [pc, #204]	; 1a070 <__assert_fail@plt+0x82b8>
   19fa0:	mov	r1, r0
   19fa4:	mov	r0, #1
   19fa8:	bl	11c50 <__printf_chk@plt>
   19fac:	mov	r0, r5
   19fb0:	ldr	r1, [pc, #200]	; 1a080 <__assert_fail@plt+0x82c8>
   19fb4:	mov	r2, #5
   19fb8:	bl	119a4 <dcgettext@plt>
   19fbc:	mov	r5, r7
   19fc0:	ldr	r3, [pc, #192]	; 1a088 <__assert_fail@plt+0x82d0>
   19fc4:	mov	r1, r0
   19fc8:	b	19f08 <__assert_fail@plt+0x8150>
   19fcc:	andeq	r9, r3, r0, lsl #30
   19fd0:	andeq	sl, r3, r8, lsl r3
   19fd4:	andeq	r6, r2, r8, lsr #14
   19fd8:	ldrdeq	fp, [r3], -r4
   19fdc:	andeq	r6, r2, r0, asr r7
   19fe0:	andeq	sl, r3, ip, lsl r3
   19fe4:	andeq	r6, r2, r4, ror r7
   19fe8:	andeq	r6, r2, r4, lsl #16
   19fec:	andeq	r6, r2, r0, asr r8
   19ff0:	andeq	r6, r2, r0, ror #18
   19ff4:	strdeq	r6, [r2], -ip
   19ff8:	andeq	r6, r2, r8, ror #22
   19ffc:	ldrdeq	r6, [r2], -r8
   1a000:	andeq	r6, r2, ip, ror lr
   1a004:			; <UNDEFINED> instruction: 0x00026ebc
   1a008:			; <UNDEFINED> instruction: 0x00026fb4
   1a00c:	andeq	r7, r2, r0
   1a010:	muleq	r2, r8, r0
   1a014:	andeq	r7, r2, r0, asr #4
   1a018:	ldrdeq	r7, [r2], -r4
   1a01c:	andeq	r7, r2, r8, lsr r4
   1a020:	andeq	r7, r2, ip, asr #9
   1a024:	andeq	r7, r2, r4, lsr r6
   1a028:	andeq	r7, r2, r4, ror #14
   1a02c:			; <UNDEFINED> instruction: 0x000279b0
   1a030:	andeq	r7, r2, r8, ror sl
   1a034:	andeq	r7, r2, r0, lsl #25
   1a038:	ldrdeq	r7, [r2], -r0
   1a03c:	andeq	r7, r2, r0, ror #26
   1a040:	ldrdeq	r7, [r2], -r4
   1a044:	andeq	r8, r2, r0, asr #32
   1a048:	andeq	r8, r2, r0, ror r0
   1a04c:	andeq	r8, r2, r8, lsr #1
   1a050:	andeq	r8, r2, r4, asr #2
   1a054:			; <UNDEFINED> instruction: 0x000282bc
   1a058:	ldrdeq	r8, [r2], -ip
   1a05c:			; <UNDEFINED> instruction: 0x0003a2b0
   1a060:	andeq	r6, r2, r0, lsr #14
   1a064:	ldrdeq	r8, [r2], -r4
   1a068:	muleq	r2, r8, r0
   1a06c:	andeq	r8, r2, r4, ror r4
   1a070:	andeq	r8, r2, ip, lsl #9
   1a074:			; <UNDEFINED> instruction: 0x000284b4
   1a078:	andeq	r8, r2, r4, asr #9
   1a07c:	andeq	r8, r2, r0, lsl r5
   1a080:	andeq	r8, r2, r0, lsr r5
   1a084:	ldrdeq	r7, [r2], -r0
   1a088:	andeq	r8, r2, ip, lsl #19
   1a08c:	andeq	r6, r2, ip, lsl r7
   1a090:	andeq	r8, r2, r8, asr #9
   1a094:	cmp	r1, #1024	; 0x400
   1a098:	push	{r4, r5, r6, r7, r8, lr}
   1a09c:	mov	r7, r0
   1a0a0:	ldrhi	r4, [pc, #156]	; 1a144 <__assert_fail@plt+0x838c>
   1a0a4:	addls	r4, r1, #1
   1a0a8:	mov	r0, r4
   1a0ac:	bl	11b30 <malloc@plt>
   1a0b0:	mov	r2, r4
   1a0b4:	subs	r5, r0, #0
   1a0b8:	mov	r1, r5
   1a0bc:	mov	r0, r7
   1a0c0:	beq	1a108 <__assert_fail@plt+0x8350>
   1a0c4:	bl	11a40 <readlink@plt>
   1a0c8:	subs	r6, r0, #0
   1a0cc:	blt	1a110 <__assert_fail@plt+0x8358>
   1a0d0:	cmp	r4, r6
   1a0d4:	mov	r0, r5
   1a0d8:	bhi	1a134 <__assert_fail@plt+0x837c>
   1a0dc:	bl	11938 <free@plt>
   1a0e0:	cmn	r4, #-1073741823	; 0xc0000001
   1a0e4:	lslls	r4, r4, #1
   1a0e8:	bls	1a0a8 <__assert_fail@plt+0x82f0>
   1a0ec:	cmn	r4, #-2147483646	; 0x80000002
   1a0f0:	mvn	r4, #-2147483648	; 0x80000000
   1a0f4:	bls	1a0a8 <__assert_fail@plt+0x82f0>
   1a0f8:	bl	11c14 <__errno_location@plt>
   1a0fc:	mov	r5, #0
   1a100:	mov	r3, #12
   1a104:	str	r3, [r0]
   1a108:	mov	r0, r5
   1a10c:	pop	{r4, r5, r6, r7, r8, pc}
   1a110:	bl	11c14 <__errno_location@plt>
   1a114:	ldr	r3, [r0]
   1a118:	cmp	r3, #34	; 0x22
   1a11c:	beq	1a0d0 <__assert_fail@plt+0x8318>
   1a120:	mov	r0, r5
   1a124:	mov	r5, #0
   1a128:	bl	11938 <free@plt>
   1a12c:	mov	r0, r5
   1a130:	pop	{r4, r5, r6, r7, r8, pc}
   1a134:	mov	r3, #0
   1a138:	strb	r3, [r5, r6]
   1a13c:	mov	r0, r5
   1a140:	pop	{r4, r5, r6, r7, r8, pc}
   1a144:	andeq	r0, r0, r1, lsl #8
   1a148:	mov	r0, #1
   1a14c:	b	19aa4 <__assert_fail@plt+0x7cec>
   1a150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a154:	mov	r5, r1
   1a158:	sub	sp, sp, #12
   1a15c:	mov	r4, r2
   1a160:	str	r2, [sp]
   1a164:	mov	r7, r3
   1a168:	mov	sl, r0
   1a16c:	bl	11bf0 <strlen@plt>
   1a170:	ldr	fp, [r5]
   1a174:	cmp	fp, #0
   1a178:	beq	1a23c <__assert_fail@plt+0x8484>
   1a17c:	mov	r6, #0
   1a180:	mov	r8, r0
   1a184:	str	r6, [sp, #4]
   1a188:	mvn	r9, #0
   1a18c:	b	1a1b8 <__assert_fail@plt+0x8400>
   1a190:	bl	11998 <memcmp@plt>
   1a194:	ldr	r3, [sp, #4]
   1a198:	cmp	r0, #0
   1a19c:	movne	r3, #1
   1a1a0:	str	r3, [sp, #4]
   1a1a4:	ldr	fp, [r5, #4]!
   1a1a8:	add	r6, r6, #1
   1a1ac:	cmp	fp, #0
   1a1b0:	add	r4, r4, r7
   1a1b4:	beq	1a214 <__assert_fail@plt+0x845c>
   1a1b8:	mov	r2, r8
   1a1bc:	mov	r1, sl
   1a1c0:	mov	r0, fp
   1a1c4:	bl	11d58 <strncmp@plt>
   1a1c8:	cmp	r0, #0
   1a1cc:	mov	r0, fp
   1a1d0:	bne	1a1a4 <__assert_fail@plt+0x83ec>
   1a1d4:	bl	11bf0 <strlen@plt>
   1a1d8:	ldr	r3, [sp]
   1a1dc:	mov	r2, r7
   1a1e0:	mov	r1, r4
   1a1e4:	cmp	r0, r8
   1a1e8:	mla	r0, r7, r9, r3
   1a1ec:	beq	1a22c <__assert_fail@plt+0x8474>
   1a1f0:	cmn	r9, #1
   1a1f4:	moveq	r9, r6
   1a1f8:	beq	1a1a4 <__assert_fail@plt+0x83ec>
   1a1fc:	ldr	r3, [sp]
   1a200:	cmp	r3, #0
   1a204:	bne	1a190 <__assert_fail@plt+0x83d8>
   1a208:	mov	r3, #1
   1a20c:	str	r3, [sp, #4]
   1a210:	b	1a1a4 <__assert_fail@plt+0x83ec>
   1a214:	ldr	r3, [sp, #4]
   1a218:	cmp	r3, #0
   1a21c:	mvnne	r9, #1
   1a220:	mov	r0, r9
   1a224:	add	sp, sp, #12
   1a228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a22c:	mov	r9, r6
   1a230:	mov	r0, r9
   1a234:	add	sp, sp, #12
   1a238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a23c:	mvn	r9, #0
   1a240:	b	1a220 <__assert_fail@plt+0x8468>
   1a244:	cmn	r2, #1
   1a248:	push	{r4, r5, r6, lr}
   1a24c:	mov	r2, #5
   1a250:	sub	sp, sp, #8
   1a254:	mov	r5, r1
   1a258:	mov	r6, r0
   1a25c:	ldreq	r1, [pc, #76]	; 1a2b0 <__assert_fail@plt+0x84f8>
   1a260:	ldrne	r1, [pc, #76]	; 1a2b4 <__assert_fail@plt+0x84fc>
   1a264:	mov	r0, #0
   1a268:	bl	119a4 <dcgettext@plt>
   1a26c:	mov	r2, r5
   1a270:	mov	r1, #8
   1a274:	mov	r4, r0
   1a278:	mov	r0, #0
   1a27c:	bl	21768 <__assert_fail@plt+0xf9b0>
   1a280:	mov	r1, r6
   1a284:	mov	r5, r0
   1a288:	mov	r0, #1
   1a28c:	bl	21ab4 <__assert_fail@plt+0xfcfc>
   1a290:	mov	r1, #0
   1a294:	mov	r3, r5
   1a298:	mov	r2, r4
   1a29c:	str	r0, [sp]
   1a2a0:	mov	r0, r1
   1a2a4:	bl	11adc <error@plt>
   1a2a8:	add	sp, sp, #8
   1a2ac:	pop	{r4, r5, r6, pc}
   1a2b0:	andeq	r8, r2, ip, lsl #27
   1a2b4:	andeq	r8, r2, r8, lsr #27
   1a2b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2bc:	mov	r6, r0
   1a2c0:	ldr	sl, [pc, #224]	; 1a3a8 <__assert_fail@plt+0x85f0>
   1a2c4:	mov	r4, r1
   1a2c8:	mov	r7, r2
   1a2cc:	ldr	r1, [pc, #216]	; 1a3ac <__assert_fail@plt+0x85f4>
   1a2d0:	mov	r2, #5
   1a2d4:	mov	r0, #0
   1a2d8:	bl	119a4 <dcgettext@plt>
   1a2dc:	ldr	r1, [sl]
   1a2e0:	bl	118a8 <fputs_unlocked@plt>
   1a2e4:	ldr	fp, [r6]
   1a2e8:	cmp	fp, #0
   1a2ec:	movne	r9, #0
   1a2f0:	movne	r5, r9
   1a2f4:	bne	1a330 <__assert_fail@plt+0x8578>
   1a2f8:	b	1a374 <__assert_fail@plt+0x85bc>
   1a2fc:	mov	r0, fp
   1a300:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   1a304:	ldr	r2, [pc, #164]	; 1a3b0 <__assert_fail@plt+0x85f8>
   1a308:	mov	r1, #1
   1a30c:	mov	r9, r4
   1a310:	mov	r3, r0
   1a314:	mov	r0, r8
   1a318:	bl	11c74 <__fprintf_chk@plt>
   1a31c:	ldr	fp, [r6, #4]!
   1a320:	add	r5, r5, #1
   1a324:	cmp	fp, #0
   1a328:	add	r4, r4, r7
   1a32c:	beq	1a374 <__assert_fail@plt+0x85bc>
   1a330:	cmp	r5, #0
   1a334:	mov	r1, r4
   1a338:	mov	r2, r7
   1a33c:	mov	r0, r9
   1a340:	ldr	r8, [sl]
   1a344:	beq	1a2fc <__assert_fail@plt+0x8544>
   1a348:	bl	11998 <memcmp@plt>
   1a34c:	cmp	r0, #0
   1a350:	bne	1a2fc <__assert_fail@plt+0x8544>
   1a354:	mov	r0, fp
   1a358:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   1a35c:	ldr	r2, [pc, #80]	; 1a3b4 <__assert_fail@plt+0x85fc>
   1a360:	mov	r1, #1
   1a364:	mov	r3, r0
   1a368:	mov	r0, r8
   1a36c:	bl	11c74 <__fprintf_chk@plt>
   1a370:	b	1a31c <__assert_fail@plt+0x8564>
   1a374:	ldr	r0, [sl]
   1a378:	ldr	r3, [r0, #20]
   1a37c:	ldr	r2, [r0, #24]
   1a380:	cmp	r3, r2
   1a384:	bcs	1a39c <__assert_fail@plt+0x85e4>
   1a388:	add	r1, r3, #1
   1a38c:	mov	r2, #10
   1a390:	str	r1, [r0, #20]
   1a394:	strb	r2, [r3]
   1a398:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a39c:	mov	r1, #10
   1a3a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3a4:	b	11c98 <__overflow@plt>
   1a3a8:	andeq	sl, r3, r8, lsl r3
   1a3ac:	andeq	r8, r2, r8, asr #27
   1a3b0:	andeq	r8, r2, r0, ror #27
   1a3b4:	andeq	r8, r2, r8, ror #27
   1a3b8:	push	{r4, r5, r6, r7, r8, lr}
   1a3bc:	mov	r6, r1
   1a3c0:	mov	r4, r2
   1a3c4:	mov	r5, r3
   1a3c8:	mov	r7, r0
   1a3cc:	ldr	r3, [sp, #24]
   1a3d0:	mov	r2, r5
   1a3d4:	mov	r1, r4
   1a3d8:	mov	r0, r6
   1a3dc:	bl	1a150 <__assert_fail@plt+0x8398>
   1a3e0:	cmp	r0, #0
   1a3e4:	popge	{r4, r5, r6, r7, r8, pc}
   1a3e8:	mov	r2, r0
   1a3ec:	mov	r1, r6
   1a3f0:	mov	r0, r7
   1a3f4:	bl	1a244 <__assert_fail@plt+0x848c>
   1a3f8:	mov	r0, r4
   1a3fc:	ldr	r2, [sp, #24]
   1a400:	mov	r1, r5
   1a404:	bl	1a2b8 <__assert_fail@plt+0x8500>
   1a408:	ldr	r3, [sp, #28]
   1a40c:	blx	r3
   1a410:	mvn	r0, #0
   1a414:	pop	{r4, r5, r6, r7, r8, pc}
   1a418:	push	{r4, r5, r6, r7, r8, lr}
   1a41c:	ldr	r7, [r1]
   1a420:	cmp	r7, #0
   1a424:	beq	1a464 <__assert_fail@plt+0x86ac>
   1a428:	mov	r6, r3
   1a42c:	mov	r8, r0
   1a430:	mov	r4, r2
   1a434:	mov	r5, r1
   1a438:	b	1a448 <__assert_fail@plt+0x8690>
   1a43c:	ldr	r7, [r5, #4]!
   1a440:	cmp	r7, #0
   1a444:	beq	1a464 <__assert_fail@plt+0x86ac>
   1a448:	mov	r1, r4
   1a44c:	mov	r2, r6
   1a450:	mov	r0, r8
   1a454:	bl	11998 <memcmp@plt>
   1a458:	add	r4, r4, r6
   1a45c:	cmp	r0, #0
   1a460:	bne	1a43c <__assert_fail@plt+0x8684>
   1a464:	mov	r0, r7
   1a468:	pop	{r4, r5, r6, r7, r8, pc}
   1a46c:	cmp	r2, #0
   1a470:	cmpne	r0, r1
   1a474:	beq	1a4f4 <__assert_fail@plt+0x873c>
   1a478:	push	{r4, r5, r6, lr}
   1a47c:	sub	r1, r1, #1
   1a480:	sub	r4, r0, #1
   1a484:	b	1a490 <__assert_fail@plt+0x86d8>
   1a488:	cmp	r3, ip
   1a48c:	bne	1a4e4 <__assert_fail@plt+0x872c>
   1a490:	ldrb	r3, [r4, #1]!
   1a494:	sub	ip, r3, #65	; 0x41
   1a498:	cmp	ip, #25
   1a49c:	ldrb	ip, [r1, #1]!
   1a4a0:	mov	r5, r3
   1a4a4:	addls	r5, r3, #32
   1a4a8:	sub	r6, ip, #65	; 0x41
   1a4ac:	uxtbls	r3, r5
   1a4b0:	cmp	r6, #25
   1a4b4:	mvn	lr, r4
   1a4b8:	mov	r6, ip
   1a4bc:	addls	r6, ip, #32
   1a4c0:	add	lr, lr, r2
   1a4c4:	uxtbls	ip, r6
   1a4c8:	cmn	r0, lr
   1a4cc:	moveq	lr, #1
   1a4d0:	movne	lr, #0
   1a4d4:	cmp	r3, #0
   1a4d8:	moveq	lr, #1
   1a4dc:	cmp	lr, #0
   1a4e0:	beq	1a488 <__assert_fail@plt+0x86d0>
   1a4e4:	uxtb	r5, r5
   1a4e8:	uxtb	r0, r6
   1a4ec:	sub	r0, r5, r0
   1a4f0:	pop	{r4, r5, r6, pc}
   1a4f4:	mov	r0, #0
   1a4f8:	bx	lr
   1a4fc:	ldr	r2, [pc, #1524]	; 1aaf8 <__assert_fail@plt+0x8d40>
   1a500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a504:	and	r9, r1, #3
   1a508:	sub	sp, sp, #148	; 0x94
   1a50c:	sub	r3, r9, #1
   1a510:	ldr	r2, [r2]
   1a514:	ands	r3, r3, r9
   1a518:	str	r3, [sp, #28]
   1a51c:	str	r2, [sp, #140]	; 0x8c
   1a520:	bne	1a9dc <__assert_fail@plt+0x8c24>
   1a524:	cmp	r0, #0
   1a528:	beq	1aa28 <__assert_fail@plt+0x8c70>
   1a52c:	ldrb	r5, [r0]
   1a530:	cmp	r5, #0
   1a534:	beq	1a9f0 <__assert_fail@plt+0x8c38>
   1a538:	cmp	r5, #47	; 0x2f
   1a53c:	mov	r4, r1
   1a540:	str	r0, [sp, #8]
   1a544:	beq	1a6f4 <__assert_fail@plt+0x893c>
   1a548:	bl	225a0 <__assert_fail@plt+0x107e8>
   1a54c:	subs	r8, r0, #0
   1a550:	beq	1a79c <__assert_fail@plt+0x89e4>
   1a554:	bl	11bf0 <strlen@plt>
   1a558:	ldr	r3, [sp, #8]
   1a55c:	cmp	r0, #4096	; 0x1000
   1a560:	mov	r6, r0
   1a564:	bcc	1aa04 <__assert_fail@plt+0x8c4c>
   1a568:	add	r6, r8, r0
   1a56c:	mov	r7, r6
   1a570:	mov	r2, #0
   1a574:	str	r2, [sp, #16]
   1a578:	str	r2, [sp, #24]
   1a57c:	mov	sl, r2
   1a580:	ldrb	r2, [r3]
   1a584:	and	r1, r4, #4
   1a588:	str	r1, [sp, #8]
   1a58c:	str	r3, [sp, #20]
   1a590:	cmp	r2, #0
   1a594:	beq	1a740 <__assert_fail@plt+0x8988>
   1a598:	cmp	r2, #47	; 0x2f
   1a59c:	movne	r1, r2
   1a5a0:	bne	1a5b8 <__assert_fail@plt+0x8800>
   1a5a4:	ldrb	r1, [r3, #1]!
   1a5a8:	cmp	r1, #47	; 0x2f
   1a5ac:	beq	1a5a4 <__assert_fail@plt+0x87ec>
   1a5b0:	cmp	r1, #0
   1a5b4:	beq	1a740 <__assert_fail@plt+0x8988>
   1a5b8:	mov	r4, r3
   1a5bc:	b	1a5c4 <__assert_fail@plt+0x880c>
   1a5c0:	mov	r4, r5
   1a5c4:	ldrb	r2, [r4, #1]
   1a5c8:	add	r5, r4, #1
   1a5cc:	cmp	r2, #0
   1a5d0:	cmpne	r2, #47	; 0x2f
   1a5d4:	bne	1a5c0 <__assert_fail@plt+0x8808>
   1a5d8:	cmp	r5, r3
   1a5dc:	beq	1a740 <__assert_fail@plt+0x8988>
   1a5e0:	sub	fp, r5, r3
   1a5e4:	cmp	fp, #1
   1a5e8:	beq	1a730 <__assert_fail@plt+0x8978>
   1a5ec:	cmp	r1, #46	; 0x2e
   1a5f0:	cmpeq	fp, #2
   1a5f4:	beq	1a8ac <__assert_fail@plt+0x8af4>
   1a5f8:	ldrb	r2, [r6, #-1]
   1a5fc:	cmp	r2, #47	; 0x2f
   1a600:	movne	r2, #47	; 0x2f
   1a604:	strbne	r2, [r6], #1
   1a608:	add	r2, r6, fp
   1a60c:	cmp	r7, r2
   1a610:	bhi	1a650 <__assert_fail@plt+0x8898>
   1a614:	ldr	r2, [pc, #1248]	; 1aafc <__assert_fail@plt+0x8d44>
   1a618:	sub	r7, r7, r8
   1a61c:	cmp	fp, r2
   1a620:	addgt	r7, r7, #1
   1a624:	addgt	r7, fp, r7
   1a628:	addle	r7, r7, #4096	; 0x1000
   1a62c:	mov	r0, r8
   1a630:	mov	r1, r7
   1a634:	str	r3, [sp, #12]
   1a638:	bl	2221c <__assert_fail@plt+0x10464>
   1a63c:	sub	r6, r6, r8
   1a640:	ldr	r3, [sp, #12]
   1a644:	mov	r8, r0
   1a648:	add	r7, r0, r7
   1a64c:	add	r6, r0, r6
   1a650:	mov	r1, r3
   1a654:	mov	r0, r6
   1a658:	mov	r2, fp
   1a65c:	bl	1195c <memcpy@plt>
   1a660:	ldr	r2, [sp, #8]
   1a664:	sub	r3, r9, #2
   1a668:	cmp	r2, #0
   1a66c:	clz	r3, r3
   1a670:	lsr	r3, r3, #5
   1a674:	moveq	r3, #0
   1a678:	cmp	r3, #0
   1a67c:	strb	sl, [r0, fp]
   1a680:	add	r6, r0, fp
   1a684:	bne	1a6d4 <__assert_fail@plt+0x891c>
   1a688:	ldr	r3, [sp, #8]
   1a68c:	add	fp, sp, #32
   1a690:	cmp	r3, #0
   1a694:	mov	r2, fp
   1a698:	mov	r1, r8
   1a69c:	mov	r0, #3
   1a6a0:	beq	1a7bc <__assert_fail@plt+0x8a04>
   1a6a4:	bl	11d34 <__xstat64@plt>
   1a6a8:	adds	r0, r0, #0
   1a6ac:	movne	r0, #1
   1a6b0:	cmp	r0, #0
   1a6b4:	beq	1a714 <__assert_fail@plt+0x895c>
   1a6b8:	bl	11c14 <__errno_location@plt>
   1a6bc:	cmp	r9, #0
   1a6c0:	mov	fp, r0
   1a6c4:	ldr	r3, [r0]
   1a6c8:	beq	1a924 <__assert_fail@plt+0x8b6c>
   1a6cc:	cmp	r9, #1
   1a6d0:	beq	1a900 <__assert_fail@plt+0x8b48>
   1a6d4:	str	sl, [sp, #48]	; 0x30
   1a6d8:	ldrb	r3, [r5]
   1a6dc:	cmp	r3, #0
   1a6e0:	cmpne	r9, #2
   1a6e4:	bne	1aadc <__assert_fail@plt+0x8d24>
   1a6e8:	ldrb	r2, [r5]
   1a6ec:	mov	r3, r5
   1a6f0:	b	1a590 <__assert_fail@plt+0x87d8>
   1a6f4:	mov	r0, #4096	; 0x1000
   1a6f8:	bl	221c0 <__assert_fail@plt+0x10408>
   1a6fc:	ldr	r3, [sp, #8]
   1a700:	mov	r6, r0
   1a704:	mov	r8, r0
   1a708:	add	r7, r0, #4096	; 0x1000
   1a70c:	strb	r5, [r6], #1
   1a710:	b	1a570 <__assert_fail@plt+0x87b8>
   1a714:	ldr	r3, [sp, #48]	; 0x30
   1a718:	and	r3, r3, #61440	; 0xf000
   1a71c:	cmp	r3, #40960	; 0xa000
   1a720:	beq	1a7cc <__assert_fail@plt+0x8a14>
   1a724:	cmp	r3, #16384	; 0x4000
   1a728:	beq	1a6e8 <__assert_fail@plt+0x8930>
   1a72c:	b	1a6d8 <__assert_fail@plt+0x8920>
   1a730:	cmp	r1, #46	; 0x2e
   1a734:	bne	1a5f8 <__assert_fail@plt+0x8840>
   1a738:	mov	r3, r5
   1a73c:	b	1a590 <__assert_fail@plt+0x87d8>
   1a740:	add	r3, r8, #1
   1a744:	cmp	r6, r3
   1a748:	bls	1a758 <__assert_fail@plt+0x89a0>
   1a74c:	ldrb	r3, [r6, #-1]
   1a750:	cmp	r3, #47	; 0x2f
   1a754:	beq	1aa8c <__assert_fail@plt+0x8cd4>
   1a758:	add	r3, r6, #1
   1a75c:	cmp	r7, r3
   1a760:	mov	r3, #0
   1a764:	strb	r3, [r6]
   1a768:	beq	1a780 <__assert_fail@plt+0x89c8>
   1a76c:	sub	r1, r6, r8
   1a770:	mov	r0, r8
   1a774:	add	r1, r1, #1
   1a778:	bl	2221c <__assert_fail@plt+0x10464>
   1a77c:	mov	r8, r0
   1a780:	ldr	r0, [sp, #24]
   1a784:	bl	11938 <free@plt>
   1a788:	ldr	r3, [sp, #16]
   1a78c:	cmp	r3, #0
   1a790:	beq	1a79c <__assert_fail@plt+0x89e4>
   1a794:	mov	r0, r3
   1a798:	bl	1c1b0 <__assert_fail@plt+0xa3f8>
   1a79c:	ldr	r3, [pc, #852]	; 1aaf8 <__assert_fail@plt+0x8d40>
   1a7a0:	ldr	r2, [sp, #140]	; 0x8c
   1a7a4:	mov	r0, r8
   1a7a8:	ldr	r3, [r3]
   1a7ac:	cmp	r2, r3
   1a7b0:	bne	1aaf4 <__assert_fail@plt+0x8d3c>
   1a7b4:	add	sp, sp, #148	; 0x94
   1a7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7bc:	bl	11d70 <__lxstat64@plt>
   1a7c0:	adds	r0, r0, #0
   1a7c4:	movne	r0, #1
   1a7c8:	b	1a6b0 <__assert_fail@plt+0x88f8>
   1a7cc:	ldr	r3, [sp, #16]
   1a7d0:	cmp	r3, #0
   1a7d4:	beq	1a98c <__assert_fail@plt+0x8bd4>
   1a7d8:	mov	r2, fp
   1a7dc:	ldrd	r0, [sp, #16]
   1a7e0:	bl	1ae8c <__assert_fail@plt+0x90d4>
   1a7e4:	cmp	r0, #0
   1a7e8:	bne	1a898 <__assert_fail@plt+0x8ae0>
   1a7ec:	mov	r2, fp
   1a7f0:	ldrd	r0, [sp, #16]
   1a7f4:	bl	1ae24 <__assert_fail@plt+0x906c>
   1a7f8:	ldr	r1, [sp, #80]	; 0x50
   1a7fc:	mov	r0, r8
   1a800:	bl	1a094 <__assert_fail@plt+0x82dc>
   1a804:	subs	fp, r0, #0
   1a808:	beq	1aa44 <__assert_fail@plt+0x8c8c>
   1a80c:	bl	11bf0 <strlen@plt>
   1a810:	mov	r4, r0
   1a814:	mov	r0, r5
   1a818:	bl	11bf0 <strlen@plt>
   1a81c:	ldr	r3, [sp, #28]
   1a820:	cmp	r3, #0
   1a824:	add	r3, r4, r0
   1a828:	mov	r2, r0
   1a82c:	add	r3, r3, #1
   1a830:	beq	1a9b8 <__assert_fail@plt+0x8c00>
   1a834:	ldr	r1, [sp, #28]
   1a838:	cmp	r3, r1
   1a83c:	bhi	1aa64 <__assert_fail@plt+0x8cac>
   1a840:	mov	r1, r5
   1a844:	ldr	r5, [sp, #24]
   1a848:	add	r2, r2, #1
   1a84c:	add	r0, r5, r4
   1a850:	bl	1192c <memmove@plt>
   1a854:	mov	r2, r4
   1a858:	mov	r1, fp
   1a85c:	mov	r0, r5
   1a860:	bl	1195c <memcpy@plt>
   1a864:	ldrb	r3, [fp]
   1a868:	add	r2, r8, #1
   1a86c:	cmp	r3, #47	; 0x2f
   1a870:	strbeq	r3, [r8]
   1a874:	moveq	r6, r2
   1a878:	str	r0, [sp, #20]
   1a87c:	beq	1a888 <__assert_fail@plt+0x8ad0>
   1a880:	cmp	r6, r2
   1a884:	bhi	1aa98 <__assert_fail@plt+0x8ce0>
   1a888:	mov	r0, fp
   1a88c:	bl	11938 <free@plt>
   1a890:	ldr	r5, [sp, #20]
   1a894:	b	1a6e8 <__assert_fail@plt+0x8930>
   1a898:	cmp	r9, #2
   1a89c:	bne	1a94c <__assert_fail@plt+0x8b94>
   1a8a0:	ldrb	r2, [r4, #1]
   1a8a4:	mov	r3, r5
   1a8a8:	b	1a590 <__assert_fail@plt+0x87d8>
   1a8ac:	ldrb	r1, [r3, #1]
   1a8b0:	cmp	r1, #46	; 0x2e
   1a8b4:	bne	1a5f8 <__assert_fail@plt+0x8840>
   1a8b8:	add	r3, r8, #1
   1a8bc:	cmp	r6, r3
   1a8c0:	bls	1a738 <__assert_fail@plt+0x8980>
   1a8c4:	sub	r1, r6, #1
   1a8c8:	cmp	r8, r1
   1a8cc:	bcs	1aad0 <__assert_fail@plt+0x8d18>
   1a8d0:	ldrb	r3, [r6, #-2]
   1a8d4:	cmp	r3, #47	; 0x2f
   1a8d8:	beq	1aad0 <__assert_fail@plt+0x8d18>
   1a8dc:	sub	r3, r6, #2
   1a8e0:	cmp	r3, r8
   1a8e4:	mov	r6, r3
   1a8e8:	beq	1a738 <__assert_fail@plt+0x8980>
   1a8ec:	ldrb	r1, [r3, #-1]
   1a8f0:	sub	r3, r3, #1
   1a8f4:	cmp	r1, #47	; 0x2f
   1a8f8:	beq	1a738 <__assert_fail@plt+0x8980>
   1a8fc:	b	1a8e0 <__assert_fail@plt+0x8b28>
   1a900:	ldr	r1, [pc, #504]	; 1ab00 <__assert_fail@plt+0x8d48>
   1a904:	mov	r0, r5
   1a908:	str	r3, [sp, #12]
   1a90c:	bl	11dac <strspn@plt>
   1a910:	ldr	r3, [sp, #12]
   1a914:	ldrb	r2, [r5, r0]
   1a918:	cmp	r3, #2
   1a91c:	cmpeq	r2, #0
   1a920:	beq	1a8a0 <__assert_fail@plt+0x8ae8>
   1a924:	ldr	r0, [sp, #24]
   1a928:	str	r3, [sp, #8]
   1a92c:	bl	11938 <free@plt>
   1a930:	mov	r0, r8
   1a934:	bl	11938 <free@plt>
   1a938:	ldr	r3, [sp, #16]
   1a93c:	cmp	r3, #0
   1a940:	ldr	r3, [sp, #8]
   1a944:	beq	1a980 <__assert_fail@plt+0x8bc8>
   1a948:	b	1a970 <__assert_fail@plt+0x8bb8>
   1a94c:	bl	11c14 <__errno_location@plt>
   1a950:	mov	r3, #40	; 0x28
   1a954:	mov	fp, r0
   1a958:	ldr	r0, [sp, #24]
   1a95c:	str	r3, [sp, #8]
   1a960:	bl	11938 <free@plt>
   1a964:	mov	r0, r8
   1a968:	bl	11938 <free@plt>
   1a96c:	ldr	r3, [sp, #8]
   1a970:	ldr	r0, [sp, #16]
   1a974:	str	r3, [sp, #8]
   1a978:	bl	1c1b0 <__assert_fail@plt+0xa3f8>
   1a97c:	ldr	r3, [sp, #8]
   1a980:	str	r3, [fp]
   1a984:	mov	r8, #0
   1a988:	b	1a79c <__assert_fail@plt+0x89e4>
   1a98c:	ldr	r3, [pc, #368]	; 1ab04 <__assert_fail@plt+0x8d4c>
   1a990:	ldr	r1, [sp, #16]
   1a994:	str	r3, [sp]
   1a998:	ldr	r2, [pc, #360]	; 1ab08 <__assert_fail@plt+0x8d50>
   1a99c:	ldr	r3, [pc, #360]	; 1ab0c <__assert_fail@plt+0x8d54>
   1a9a0:	mov	r0, #7
   1a9a4:	bl	1bfb0 <__assert_fail@plt+0xa1f8>
   1a9a8:	subs	r3, r0, #0
   1a9ac:	str	r3, [sp, #16]
   1a9b0:	bne	1a7d8 <__assert_fail@plt+0x8a20>
   1a9b4:	bl	22408 <__assert_fail@plt+0x10650>
   1a9b8:	cmp	r3, #4096	; 0x1000
   1a9bc:	movcc	r3, #4096	; 0x1000
   1a9c0:	str	r0, [sp, #12]
   1a9c4:	mov	r0, r3
   1a9c8:	str	r3, [sp, #28]
   1a9cc:	bl	221c0 <__assert_fail@plt+0x10408>
   1a9d0:	ldr	r2, [sp, #12]
   1a9d4:	str	r0, [sp, #24]
   1a9d8:	b	1a840 <__assert_fail@plt+0x8a88>
   1a9dc:	bl	11c14 <__errno_location@plt>
   1a9e0:	mov	r3, #22
   1a9e4:	mov	r8, #0
   1a9e8:	str	r3, [r0]
   1a9ec:	b	1a79c <__assert_fail@plt+0x89e4>
   1a9f0:	bl	11c14 <__errno_location@plt>
   1a9f4:	mov	r3, #2
   1a9f8:	mov	r8, r5
   1a9fc:	str	r3, [r0]
   1aa00:	b	1a79c <__assert_fail@plt+0x89e4>
   1aa04:	mov	r0, r8
   1aa08:	mov	r1, #4096	; 0x1000
   1aa0c:	str	r3, [sp, #8]
   1aa10:	bl	2221c <__assert_fail@plt+0x10464>
   1aa14:	ldr	r3, [sp, #8]
   1aa18:	mov	r8, r0
   1aa1c:	add	r6, r0, r6
   1aa20:	add	r7, r0, #4096	; 0x1000
   1aa24:	b	1a570 <__assert_fail@plt+0x87b8>
   1aa28:	str	r0, [sp, #8]
   1aa2c:	bl	11c14 <__errno_location@plt>
   1aa30:	ldr	r3, [sp, #8]
   1aa34:	mov	r2, #22
   1aa38:	mov	r8, r3
   1aa3c:	str	r2, [r0]
   1aa40:	b	1a79c <__assert_fail@plt+0x89e4>
   1aa44:	bl	11c14 <__errno_location@plt>
   1aa48:	cmp	r9, #2
   1aa4c:	mov	fp, r0
   1aa50:	ldr	r3, [r0]
   1aa54:	bne	1a958 <__assert_fail@plt+0x8ba0>
   1aa58:	cmp	r3, #12
   1aa5c:	bne	1a8a0 <__assert_fail@plt+0x8ae8>
   1aa60:	b	1a958 <__assert_fail@plt+0x8ba0>
   1aa64:	str	r0, [sp, #20]
   1aa68:	mov	r1, r3
   1aa6c:	ldr	r0, [sp, #24]
   1aa70:	str	r3, [sp, #12]
   1aa74:	bl	2221c <__assert_fail@plt+0x10464>
   1aa78:	ldr	r3, [sp, #12]
   1aa7c:	ldr	r2, [sp, #20]
   1aa80:	str	r3, [sp, #28]
   1aa84:	str	r0, [sp, #24]
   1aa88:	b	1a840 <__assert_fail@plt+0x8a88>
   1aa8c:	mov	r3, r6
   1aa90:	sub	r6, r6, #1
   1aa94:	b	1a75c <__assert_fail@plt+0x89a4>
   1aa98:	sub	r3, r6, #1
   1aa9c:	cmp	r8, r3
   1aaa0:	bcs	1aaec <__assert_fail@plt+0x8d34>
   1aaa4:	ldrb	r2, [r6, #-2]
   1aaa8:	cmp	r2, #47	; 0x2f
   1aaac:	beq	1aaec <__assert_fail@plt+0x8d34>
   1aab0:	sub	r3, r6, #2
   1aab4:	cmp	r3, r8
   1aab8:	mov	r6, r3
   1aabc:	beq	1a888 <__assert_fail@plt+0x8ad0>
   1aac0:	ldrb	r2, [r3, #-1]!
   1aac4:	cmp	r2, #47	; 0x2f
   1aac8:	beq	1a888 <__assert_fail@plt+0x8ad0>
   1aacc:	b	1aab4 <__assert_fail@plt+0x8cfc>
   1aad0:	mov	r3, r5
   1aad4:	mov	r6, r1
   1aad8:	b	1a590 <__assert_fail@plt+0x87d8>
   1aadc:	bl	11c14 <__errno_location@plt>
   1aae0:	mov	r3, #20
   1aae4:	mov	fp, r0
   1aae8:	b	1a924 <__assert_fail@plt+0x8b6c>
   1aaec:	mov	r6, r3
   1aaf0:	b	1a888 <__assert_fail@plt+0x8ad0>
   1aaf4:	bl	119b0 <__stack_chk_fail@plt>
   1aaf8:	andeq	r9, r3, r0, lsl #30
   1aafc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ab00:	andeq	r8, r2, r4, ror #17
   1ab04:	andeq	ip, r1, r0, asr #16
   1ab08:	andeq	ip, r1, ip, asr r7
   1ab0c:	strdeq	ip, [r1], -r4
   1ab10:	ldr	r3, [pc, #4]	; 1ab1c <__assert_fail@plt+0x8d64>
   1ab14:	str	r0, [r3]
   1ab18:	bx	lr
   1ab1c:			; <UNDEFINED> instruction: 0x0003b3bc
   1ab20:	ldr	r3, [pc, #4]	; 1ab2c <__assert_fail@plt+0x8d74>
   1ab24:	strb	r0, [r3, #4]
   1ab28:	bx	lr
   1ab2c:			; <UNDEFINED> instruction: 0x0003b3bc
   1ab30:	ldr	r3, [pc, #180]	; 1abec <__assert_fail@plt+0x8e34>
   1ab34:	push	{r4, r5, r6, lr}
   1ab38:	sub	sp, sp, #8
   1ab3c:	ldr	r0, [r3]
   1ab40:	bl	24158 <_obstack_memory_used@@Base+0x570>
   1ab44:	cmp	r0, #0
   1ab48:	beq	1ab70 <__assert_fail@plt+0x8db8>
   1ab4c:	bl	11c14 <__errno_location@plt>
   1ab50:	ldr	r5, [pc, #152]	; 1abf0 <__assert_fail@plt+0x8e38>
   1ab54:	ldrb	r3, [r5, #4]
   1ab58:	cmp	r3, #0
   1ab5c:	mov	r4, r0
   1ab60:	beq	1ab8c <__assert_fail@plt+0x8dd4>
   1ab64:	ldr	r3, [r0]
   1ab68:	cmp	r3, #32
   1ab6c:	bne	1ab8c <__assert_fail@plt+0x8dd4>
   1ab70:	ldr	r3, [pc, #124]	; 1abf4 <__assert_fail@plt+0x8e3c>
   1ab74:	ldr	r0, [r3]
   1ab78:	bl	24158 <_obstack_memory_used@@Base+0x570>
   1ab7c:	cmp	r0, #0
   1ab80:	bne	1abcc <__assert_fail@plt+0x8e14>
   1ab84:	add	sp, sp, #8
   1ab88:	pop	{r4, r5, r6, pc}
   1ab8c:	mov	r2, #5
   1ab90:	ldr	r1, [pc, #96]	; 1abf8 <__assert_fail@plt+0x8e40>
   1ab94:	mov	r0, #0
   1ab98:	bl	119a4 <dcgettext@plt>
   1ab9c:	mov	r6, r0
   1aba0:	ldr	r0, [r5]
   1aba4:	cmp	r0, #0
   1aba8:	beq	1abd8 <__assert_fail@plt+0x8e20>
   1abac:	ldr	r4, [r4]
   1abb0:	bl	218e4 <__assert_fail@plt+0xfb2c>
   1abb4:	mov	r1, r4
   1abb8:	str	r6, [sp]
   1abbc:	ldr	r2, [pc, #56]	; 1abfc <__assert_fail@plt+0x8e44>
   1abc0:	mov	r3, r0
   1abc4:	mov	r0, #0
   1abc8:	bl	11adc <error@plt>
   1abcc:	ldr	r3, [pc, #44]	; 1ac00 <__assert_fail@plt+0x8e48>
   1abd0:	ldr	r0, [r3]
   1abd4:	bl	11950 <_exit@plt>
   1abd8:	mov	r3, r6
   1abdc:	ldr	r1, [r4]
   1abe0:	ldr	r2, [pc, #28]	; 1ac04 <__assert_fail@plt+0x8e4c>
   1abe4:	bl	11adc <error@plt>
   1abe8:	b	1abcc <__assert_fail@plt+0x8e14>
   1abec:	andeq	sl, r3, ip, lsl r3
   1abf0:			; <UNDEFINED> instruction: 0x0003b3bc
   1abf4:	andeq	sl, r3, r8, lsl r3
   1abf8:	strdeq	r8, [r2], -r0
   1abfc:			; <UNDEFINED> instruction: 0x000286b0
   1ac00:			; <UNDEFINED> instruction: 0x0003a2bc
   1ac04:	andeq	r8, r2, r4, lsr #12
   1ac08:	push	{r4, r5, r6, lr}
   1ac0c:	mov	r4, r0
   1ac10:	ldrb	ip, [r0]
   1ac14:	sub	r5, ip, #47	; 0x2f
   1ac18:	bl	1acc8 <__assert_fail@plt+0x8f10>
   1ac1c:	clz	r5, r5
   1ac20:	lsr	r5, r5, #5
   1ac24:	sub	r0, r0, r4
   1ac28:	cmp	r0, r5
   1ac2c:	popls	{r4, r5, r6, pc}
   1ac30:	add	r3, r4, r0
   1ac34:	ldrb	r3, [r3, #-1]
   1ac38:	cmp	r3, #47	; 0x2f
   1ac3c:	popne	{r4, r5, r6, pc}
   1ac40:	sub	r0, r0, #2
   1ac44:	sub	ip, r4, #1
   1ac48:	add	r3, r4, r0
   1ac4c:	add	ip, ip, r5
   1ac50:	rsb	r2, r4, #1
   1ac54:	cmp	r3, ip
   1ac58:	add	r0, r2, r3
   1ac5c:	popeq	{r4, r5, r6, pc}
   1ac60:	ldrb	r1, [r3], #-1
   1ac64:	cmp	r1, #47	; 0x2f
   1ac68:	beq	1ac54 <__assert_fail@plt+0x8e9c>
   1ac6c:	pop	{r4, r5, r6, pc}
   1ac70:	push	{r4, r5, r6, lr}
   1ac74:	mov	r6, r0
   1ac78:	bl	1ac08 <__assert_fail@plt+0x8e50>
   1ac7c:	add	r3, r0, #1
   1ac80:	mov	r4, r0
   1ac84:	cmp	r0, #0
   1ac88:	movne	r0, r3
   1ac8c:	addeq	r0, r3, #1
   1ac90:	bl	11b30 <malloc@plt>
   1ac94:	subs	r5, r0, #0
   1ac98:	beq	1acc0 <__assert_fail@plt+0x8f08>
   1ac9c:	mov	r2, r4
   1aca0:	mov	r1, r6
   1aca4:	bl	1195c <memcpy@plt>
   1aca8:	cmp	r4, #0
   1acac:	moveq	r3, #46	; 0x2e
   1acb0:	moveq	r4, #1
   1acb4:	strbeq	r3, [r5]
   1acb8:	mov	r3, #0
   1acbc:	strb	r3, [r5, r4]
   1acc0:	mov	r0, r5
   1acc4:	pop	{r4, r5, r6, pc}
   1acc8:	ldrb	r3, [r0]
   1accc:	cmp	r3, #47	; 0x2f
   1acd0:	bne	1ace0 <__assert_fail@plt+0x8f28>
   1acd4:	ldrb	r3, [r0, #1]!
   1acd8:	cmp	r3, #47	; 0x2f
   1acdc:	beq	1acd4 <__assert_fail@plt+0x8f1c>
   1ace0:	cmp	r3, #0
   1ace4:	bxeq	lr
   1ace8:	mov	r2, r0
   1acec:	mov	r1, #0
   1acf0:	cmp	r3, #47	; 0x2f
   1acf4:	moveq	r1, #1
   1acf8:	beq	1ad08 <__assert_fail@plt+0x8f50>
   1acfc:	cmp	r1, #0
   1ad00:	movne	r0, r2
   1ad04:	movne	r1, #0
   1ad08:	ldrb	r3, [r2, #1]!
   1ad0c:	cmp	r3, #0
   1ad10:	bne	1acf0 <__assert_fail@plt+0x8f38>
   1ad14:	bx	lr
   1ad18:	push	{r4, lr}
   1ad1c:	mov	r4, r0
   1ad20:	bl	11bf0 <strlen@plt>
   1ad24:	cmp	r0, #1
   1ad28:	popls	{r4, pc}
   1ad2c:	add	r2, r4, r0
   1ad30:	mov	r3, r0
   1ad34:	ldrb	r2, [r2, #-1]
   1ad38:	cmp	r2, #47	; 0x2f
   1ad3c:	subeq	r3, r0, #2
   1ad40:	addeq	r3, r4, r3
   1ad44:	rsbeq	r1, r4, #1
   1ad48:	popne	{r4, pc}
   1ad4c:	cmp	r3, r4
   1ad50:	add	r0, r1, r3
   1ad54:	popeq	{r4, pc}
   1ad58:	ldrb	r2, [r3], #-1
   1ad5c:	cmp	r2, #47	; 0x2f
   1ad60:	popne	{r4, pc}
   1ad64:	b	1ad4c <__assert_fail@plt+0x8f94>
   1ad68:	ldr	r3, [r1, #16]
   1ad6c:	and	r3, r3, #61440	; 0xf000
   1ad70:	cmp	r3, #40960	; 0xa000
   1ad74:	bne	1ad80 <__assert_fail@plt+0x8fc8>
   1ad78:	mov	r0, #0
   1ad7c:	bx	lr
   1ad80:	mov	r3, #0
   1ad84:	push	{r4, r5, r6, lr}
   1ad88:	mov	r2, r3
   1ad8c:	mov	r4, r1
   1ad90:	ldr	r1, [pc, #132]	; 1ae1c <__assert_fail@plt+0x9064>
   1ad94:	mov	r5, r0
   1ad98:	bl	11a7c <getxattr@plt>
   1ad9c:	cmp	r0, #0
   1ada0:	blt	1adb0 <__assert_fail@plt+0x8ff8>
   1ada4:	beq	1adcc <__assert_fail@plt+0x9014>
   1ada8:	mov	r0, #1
   1adac:	pop	{r4, r5, r6, pc}
   1adb0:	bl	11c14 <__errno_location@plt>
   1adb4:	ldr	r0, [r0]
   1adb8:	cmp	r0, #61	; 0x3d
   1adbc:	beq	1adcc <__assert_fail@plt+0x9014>
   1adc0:	bl	24124 <_obstack_memory_used@@Base+0x53c>
   1adc4:	rsb	r0, r0, #0
   1adc8:	pop	{r4, r5, r6, pc}
   1adcc:	ldr	r3, [r4, #16]
   1add0:	and	r3, r3, #61440	; 0xf000
   1add4:	cmp	r3, #16384	; 0x4000
   1add8:	beq	1ade4 <__assert_fail@plt+0x902c>
   1addc:	mov	r0, #0
   1ade0:	pop	{r4, r5, r6, pc}
   1ade4:	mov	r3, #0
   1ade8:	mov	r0, r5
   1adec:	mov	r2, r3
   1adf0:	ldr	r1, [pc, #40]	; 1ae20 <__assert_fail@plt+0x9068>
   1adf4:	bl	11a7c <getxattr@plt>
   1adf8:	cmp	r0, #0
   1adfc:	blt	1ae08 <__assert_fail@plt+0x9050>
   1ae00:	bne	1ada8 <__assert_fail@plt+0x8ff0>
   1ae04:	b	1addc <__assert_fail@plt+0x9024>
   1ae08:	bl	11c14 <__errno_location@plt>
   1ae0c:	ldr	r0, [r0]
   1ae10:	cmp	r0, #61	; 0x3d
   1ae14:	bne	1adc0 <__assert_fail@plt+0x9008>
   1ae18:	b	1addc <__assert_fail@plt+0x9024>
   1ae1c:	strdeq	r8, [r2], -ip
   1ae20:	andeq	r8, r2, r4, lsl lr
   1ae24:	push	{r4, r5, r6, r7, r8, lr}
   1ae28:	subs	r8, r0, #0
   1ae2c:	popeq	{r4, r5, r6, r7, r8, pc}
   1ae30:	mov	r0, #24
   1ae34:	mov	r4, r1
   1ae38:	mov	r7, r2
   1ae3c:	bl	221c0 <__assert_fail@plt+0x10408>
   1ae40:	mov	r6, r0
   1ae44:	mov	r0, r4
   1ae48:	bl	223ec <__assert_fail@plt+0x10634>
   1ae4c:	ldrd	r4, [r7, #96]	; 0x60
   1ae50:	ldrd	r2, [r7]
   1ae54:	mov	r1, r6
   1ae58:	strd	r4, [r6, #8]
   1ae5c:	strd	r2, [r6, #16]
   1ae60:	str	r0, [r6]
   1ae64:	mov	r0, r8
   1ae68:	bl	1c5dc <__assert_fail@plt+0xa824>
   1ae6c:	cmp	r0, #0
   1ae70:	beq	1ae88 <__assert_fail@plt+0x90d0>
   1ae74:	cmp	r6, r0
   1ae78:	popeq	{r4, r5, r6, r7, r8, pc}
   1ae7c:	mov	r0, r6
   1ae80:	pop	{r4, r5, r6, r7, r8, lr}
   1ae84:	b	1c840 <__assert_fail@plt+0xaa88>
   1ae88:	bl	22408 <__assert_fail@plt+0x10650>
   1ae8c:	push	{r4, r5, r6, lr}
   1ae90:	sub	sp, sp, #32
   1ae94:	ldr	r6, [pc, #80]	; 1aeec <__assert_fail@plt+0x9134>
   1ae98:	subs	r3, r0, #0
   1ae9c:	moveq	r0, r3
   1aea0:	ldr	ip, [r6]
   1aea4:	str	ip, [sp, #28]
   1aea8:	beq	1aed0 <__assert_fail@plt+0x9118>
   1aeac:	ldrd	r4, [r2, #96]	; 0x60
   1aeb0:	ldrd	r2, [r2]
   1aeb4:	str	r1, [sp]
   1aeb8:	mov	r1, sp
   1aebc:	strd	r4, [sp, #8]
   1aec0:	strd	r2, [sp, #16]
   1aec4:	bl	1bcf8 <__assert_fail@plt+0x9f40>
   1aec8:	adds	r0, r0, #0
   1aecc:	movne	r0, #1
   1aed0:	ldr	r2, [sp, #28]
   1aed4:	ldr	r3, [r6]
   1aed8:	cmp	r2, r3
   1aedc:	bne	1aee8 <__assert_fail@plt+0x9130>
   1aee0:	add	sp, sp, #32
   1aee4:	pop	{r4, r5, r6, pc}
   1aee8:	bl	119b0 <__stack_chk_fail@plt>
   1aeec:	andeq	r9, r3, r0, lsl #30
   1aef0:	and	r3, r0, #61440	; 0xf000
   1aef4:	cmp	r3, #32768	; 0x8000
   1aef8:	moveq	ip, #45	; 0x2d
   1aefc:	beq	1af48 <__assert_fail@plt+0x9190>
   1af00:	cmp	r3, #16384	; 0x4000
   1af04:	moveq	ip, #100	; 0x64
   1af08:	beq	1af48 <__assert_fail@plt+0x9190>
   1af0c:	cmp	r3, #24576	; 0x6000
   1af10:	moveq	ip, #98	; 0x62
   1af14:	beq	1af48 <__assert_fail@plt+0x9190>
   1af18:	cmp	r3, #8192	; 0x2000
   1af1c:	moveq	ip, #99	; 0x63
   1af20:	beq	1af48 <__assert_fail@plt+0x9190>
   1af24:	cmp	r3, #40960	; 0xa000
   1af28:	moveq	ip, #108	; 0x6c
   1af2c:	beq	1af48 <__assert_fail@plt+0x9190>
   1af30:	cmp	r3, #4096	; 0x1000
   1af34:	moveq	ip, #112	; 0x70
   1af38:	beq	1af48 <__assert_fail@plt+0x9190>
   1af3c:	cmp	r3, #49152	; 0xc000
   1af40:	moveq	ip, #115	; 0x73
   1af44:	movne	ip, #63	; 0x3f
   1af48:	tst	r0, #256	; 0x100
   1af4c:	movne	r2, #114	; 0x72
   1af50:	moveq	r2, #45	; 0x2d
   1af54:	tst	r0, #128	; 0x80
   1af58:	movne	r3, #119	; 0x77
   1af5c:	moveq	r3, #45	; 0x2d
   1af60:	tst	r0, #2048	; 0x800
   1af64:	strb	r3, [r1, #2]
   1af68:	strb	ip, [r1]
   1af6c:	strb	r2, [r1, #1]
   1af70:	and	r3, r0, #64	; 0x40
   1af74:	beq	1b014 <__assert_fail@plt+0x925c>
   1af78:	cmp	r3, #0
   1af7c:	movne	ip, #115	; 0x73
   1af80:	moveq	ip, #83	; 0x53
   1af84:	tst	r0, #32
   1af88:	movne	r2, #114	; 0x72
   1af8c:	moveq	r2, #45	; 0x2d
   1af90:	tst	r0, #16
   1af94:	movne	r3, #119	; 0x77
   1af98:	moveq	r3, #45	; 0x2d
   1af9c:	tst	r0, #1024	; 0x400
   1afa0:	strb	r3, [r1, #5]
   1afa4:	strb	ip, [r1, #3]
   1afa8:	strb	r2, [r1, #4]
   1afac:	and	r3, r0, #8
   1afb0:	beq	1b024 <__assert_fail@plt+0x926c>
   1afb4:	cmp	r3, #0
   1afb8:	movne	ip, #115	; 0x73
   1afbc:	moveq	ip, #83	; 0x53
   1afc0:	tst	r0, #4
   1afc4:	movne	r2, #114	; 0x72
   1afc8:	moveq	r2, #45	; 0x2d
   1afcc:	tst	r0, #2
   1afd0:	movne	r3, #119	; 0x77
   1afd4:	moveq	r3, #45	; 0x2d
   1afd8:	tst	r0, #512	; 0x200
   1afdc:	strb	ip, [r1, #6]
   1afe0:	strb	r2, [r1, #7]
   1afe4:	strb	r3, [r1, #8]
   1afe8:	and	r0, r0, #1
   1afec:	beq	1b034 <__assert_fail@plt+0x927c>
   1aff0:	cmp	r0, #0
   1aff4:	movne	r0, #116	; 0x74
   1aff8:	moveq	r0, #84	; 0x54
   1affc:	mov	r2, #32
   1b000:	mov	r3, #0
   1b004:	strb	r0, [r1, #9]
   1b008:	strb	r2, [r1, #10]
   1b00c:	strb	r3, [r1, #11]
   1b010:	bx	lr
   1b014:	cmp	r3, #0
   1b018:	movne	ip, #120	; 0x78
   1b01c:	moveq	ip, #45	; 0x2d
   1b020:	b	1af84 <__assert_fail@plt+0x91cc>
   1b024:	cmp	r3, #0
   1b028:	movne	ip, #120	; 0x78
   1b02c:	moveq	ip, #45	; 0x2d
   1b030:	b	1afc0 <__assert_fail@plt+0x9208>
   1b034:	cmp	r0, #0
   1b038:	movne	r0, #120	; 0x78
   1b03c:	moveq	r0, #45	; 0x2d
   1b040:	b	1affc <__assert_fail@plt+0x9244>
   1b044:	ldr	r0, [r0, #16]
   1b048:	b	1aef0 <__assert_fail@plt+0x9138>
   1b04c:	push	{r4, lr}
   1b050:	bl	1b060 <__assert_fail@plt+0x92a8>
   1b054:	cmp	r0, #0
   1b058:	popne	{r4, pc}
   1b05c:	bl	22408 <__assert_fail@plt+0x10650>
   1b060:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b064:	mov	r6, r1
   1b068:	mov	r9, r2
   1b06c:	mov	r7, r0
   1b070:	bl	1acc8 <__assert_fail@plt+0x8f10>
   1b074:	mov	r4, r0
   1b078:	bl	1ad18 <__assert_fail@plt+0x8f60>
   1b07c:	sub	r4, r4, r7
   1b080:	mov	r5, r0
   1b084:	mov	r0, r6
   1b088:	bl	11bf0 <strlen@plt>
   1b08c:	cmp	r5, #0
   1b090:	add	r4, r4, r5
   1b094:	mov	r8, r0
   1b098:	beq	1b118 <__assert_fail@plt+0x9360>
   1b09c:	add	r3, r7, r4
   1b0a0:	ldrb	r3, [r3, #-1]
   1b0a4:	cmp	r3, #47	; 0x2f
   1b0a8:	beq	1b10c <__assert_fail@plt+0x9354>
   1b0ac:	ldrb	r3, [r6]
   1b0b0:	cmp	r3, #47	; 0x2f
   1b0b4:	beq	1b10c <__assert_fail@plt+0x9354>
   1b0b8:	mov	r5, #1
   1b0bc:	mov	sl, #47	; 0x2f
   1b0c0:	add	r0, r8, #1
   1b0c4:	add	r0, r0, r4
   1b0c8:	add	r0, r0, r5
   1b0cc:	bl	11b30 <malloc@plt>
   1b0d0:	subs	fp, r0, #0
   1b0d4:	beq	1b104 <__assert_fail@plt+0x934c>
   1b0d8:	mov	r2, r4
   1b0dc:	mov	r1, r7
   1b0e0:	bl	11b90 <mempcpy@plt>
   1b0e4:	cmp	r9, #0
   1b0e8:	mov	r2, r8
   1b0ec:	mov	r1, r6
   1b0f0:	strb	sl, [r0], r5
   1b0f4:	strne	r0, [r9]
   1b0f8:	bl	11b90 <mempcpy@plt>
   1b0fc:	mov	r3, #0
   1b100:	strb	r3, [r0]
   1b104:	mov	r0, fp
   1b108:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b10c:	mov	r5, #0
   1b110:	mov	sl, r5
   1b114:	b	1b0c0 <__assert_fail@plt+0x9308>
   1b118:	ldrb	r3, [r6]
   1b11c:	cmp	r3, #47	; 0x2f
   1b120:	moveq	r5, #1
   1b124:	movne	sl, #0
   1b128:	moveq	sl, #46	; 0x2e
   1b12c:	b	1b0c0 <__assert_fail@plt+0x9308>
   1b130:	ldr	r2, [r0]
   1b134:	ldrb	r3, [r2]
   1b138:	cmp	r3, #0
   1b13c:	beq	1b1fc <__assert_fail@plt+0x9444>
   1b140:	mov	r1, #0
   1b144:	push	{lr}		; (str lr, [sp, #-4]!)
   1b148:	mov	ip, r1
   1b14c:	b	1b190 <__assert_fail@plt+0x93d8>
   1b150:	cmp	r3, #65	; 0x41
   1b154:	bcc	1b16c <__assert_fail@plt+0x93b4>
   1b158:	cmp	r3, #90	; 0x5a
   1b15c:	bls	1b1c8 <__assert_fail@plt+0x9410>
   1b160:	sub	r1, r3, #97	; 0x61
   1b164:	cmp	r1, #25
   1b168:	bls	1b1c8 <__assert_fail@plt+0x9410>
   1b16c:	cmp	r3, #126	; 0x7e
   1b170:	movne	ip, #0
   1b174:	movne	r1, ip
   1b178:	beq	1b1c8 <__assert_fail@plt+0x9410>
   1b17c:	add	r2, r2, #1
   1b180:	str	r2, [r0]
   1b184:	ldrb	r3, [r2]
   1b188:	cmp	r3, #0
   1b18c:	beq	1b1f4 <__assert_fail@plt+0x943c>
   1b190:	cmp	r1, #0
   1b194:	bne	1b150 <__assert_fail@plt+0x9398>
   1b198:	cmp	r3, #46	; 0x2e
   1b19c:	beq	1b1e0 <__assert_fail@plt+0x9428>
   1b1a0:	cmp	r3, #90	; 0x5a
   1b1a4:	bhi	1b1d0 <__assert_fail@plt+0x9418>
   1b1a8:	cmp	r3, #65	; 0x41
   1b1ac:	bcs	1b17c <__assert_fail@plt+0x93c4>
   1b1b0:	sub	lr, r3, #48	; 0x30
   1b1b4:	cmp	lr, #9
   1b1b8:	bls	1b17c <__assert_fail@plt+0x93c4>
   1b1bc:	cmp	r3, #126	; 0x7e
   1b1c0:	movne	ip, #0
   1b1c4:	b	1b17c <__assert_fail@plt+0x93c4>
   1b1c8:	mov	r1, #0
   1b1cc:	b	1b17c <__assert_fail@plt+0x93c4>
   1b1d0:	sub	lr, r3, #97	; 0x61
   1b1d4:	cmp	lr, #25
   1b1d8:	bhi	1b1bc <__assert_fail@plt+0x9404>
   1b1dc:	b	1b17c <__assert_fail@plt+0x93c4>
   1b1e0:	cmp	ip, #0
   1b1e4:	moveq	ip, r2
   1b1e8:	moveq	r1, #1
   1b1ec:	movne	r1, #1
   1b1f0:	b	1b17c <__assert_fail@plt+0x93c4>
   1b1f4:	mov	r0, ip
   1b1f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1fc:	mov	r0, r3
   1b200:	bx	lr
   1b204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b208:	sub	sp, sp, #36	; 0x24
   1b20c:	ldr	r6, [pc, #932]	; 1b5b8 <__assert_fail@plt+0x9800>
   1b210:	mov	r4, r0
   1b214:	mov	r5, r1
   1b218:	ldr	r3, [r6]
   1b21c:	str	r3, [sp, #28]
   1b220:	bl	118d8 <strcmp@plt>
   1b224:	subs	r7, r0, #0
   1b228:	beq	1b4d4 <__assert_fail@plt+0x971c>
   1b22c:	ldrb	r9, [r4]
   1b230:	cmp	r9, #0
   1b234:	beq	1b544 <__assert_fail@plt+0x978c>
   1b238:	ldrb	r8, [r5]
   1b23c:	cmp	r8, #0
   1b240:	beq	1b4d0 <__assert_fail@plt+0x9718>
   1b244:	mov	r1, r4
   1b248:	ldr	r0, [pc, #876]	; 1b5bc <__assert_fail@plt+0x9804>
   1b24c:	bl	118d8 <strcmp@plt>
   1b250:	cmp	r0, #0
   1b254:	beq	1b544 <__assert_fail@plt+0x978c>
   1b258:	mov	r1, r5
   1b25c:	ldr	r0, [pc, #856]	; 1b5bc <__assert_fail@plt+0x9804>
   1b260:	bl	118d8 <strcmp@plt>
   1b264:	cmp	r0, #0
   1b268:	beq	1b4d0 <__assert_fail@plt+0x9718>
   1b26c:	mov	r1, r4
   1b270:	ldr	r0, [pc, #840]	; 1b5c0 <__assert_fail@plt+0x9808>
   1b274:	bl	118d8 <strcmp@plt>
   1b278:	cmp	r0, #0
   1b27c:	beq	1b544 <__assert_fail@plt+0x978c>
   1b280:	mov	r1, r5
   1b284:	ldr	r0, [pc, #820]	; 1b5c0 <__assert_fail@plt+0x9808>
   1b288:	bl	118d8 <strcmp@plt>
   1b28c:	cmp	r0, #0
   1b290:	beq	1b4d0 <__assert_fail@plt+0x9718>
   1b294:	sub	r3, r9, #46	; 0x2e
   1b298:	clz	r3, r3
   1b29c:	lsr	r3, r3, #5
   1b2a0:	cmp	r8, #46	; 0x2e
   1b2a4:	moveq	r2, #0
   1b2a8:	andne	r2, r3, #1
   1b2ac:	cmp	r2, #0
   1b2b0:	bne	1b544 <__assert_fail@plt+0x978c>
   1b2b4:	sub	r8, r8, #46	; 0x2e
   1b2b8:	clz	r8, r8
   1b2bc:	lsr	r8, r8, #5
   1b2c0:	cmp	r9, #46	; 0x2e
   1b2c4:	moveq	r9, #0
   1b2c8:	andne	r9, r8, #1
   1b2cc:	cmp	r9, #0
   1b2d0:	bne	1b4d0 <__assert_fail@plt+0x9718>
   1b2d4:	tst	r8, r3
   1b2d8:	addne	r4, r4, #1
   1b2dc:	addne	r5, r5, #1
   1b2e0:	add	r0, sp, #20
   1b2e4:	strd	r4, [sp, #20]
   1b2e8:	bl	1b130 <__assert_fail@plt+0x9378>
   1b2ec:	mov	r8, r0
   1b2f0:	add	r0, sp, #24
   1b2f4:	bl	1b130 <__assert_fail@plt+0x9378>
   1b2f8:	cmp	r8, #0
   1b2fc:	beq	1b55c <__assert_fail@plt+0x97a4>
   1b300:	cmp	r0, #0
   1b304:	sub	r8, r8, r4
   1b308:	beq	1b5a4 <__assert_fail@plt+0x97ec>
   1b30c:	sub	sl, r0, r5
   1b310:	cmp	r8, sl
   1b314:	bne	1b33c <__assert_fail@plt+0x9584>
   1b318:	mov	r2, r8
   1b31c:	mov	r1, r5
   1b320:	mov	r0, r4
   1b324:	bl	11d58 <strncmp@plt>
   1b328:	cmp	r0, #0
   1b32c:	ldreq	r8, [sp, #20]
   1b330:	ldreq	r3, [sp, #24]
   1b334:	subeq	r8, r8, r4
   1b338:	subeq	sl, r3, r5
   1b33c:	mov	r3, #0
   1b340:	mov	r2, r3
   1b344:	rsb	r9, r4, #1
   1b348:	rsb	fp, r5, #1
   1b34c:	str	r7, [sp, #8]
   1b350:	cmp	sl, r3
   1b354:	cmpls	r8, r2
   1b358:	bls	1b580 <__assert_fail@plt+0x97c8>
   1b35c:	cmp	r8, r2
   1b360:	sub	lr, r3, r2
   1b364:	bls	1b3dc <__assert_fail@plt+0x9624>
   1b368:	ldrb	ip, [r4, r2]
   1b36c:	sub	r1, ip, #48	; 0x30
   1b370:	cmp	r1, #9
   1b374:	bls	1b3dc <__assert_fail@plt+0x9624>
   1b378:	cmp	ip, #65	; 0x41
   1b37c:	mov	r0, ip
   1b380:	bcc	1b398 <__assert_fail@plt+0x95e0>
   1b384:	cmp	ip, #90	; 0x5a
   1b388:	bls	1b54c <__assert_fail@plt+0x9794>
   1b38c:	sub	r1, ip, #97	; 0x61
   1b390:	cmp	r1, #25
   1b394:	bls	1b54c <__assert_fail@plt+0x9794>
   1b398:	cmp	ip, #126	; 0x7e
   1b39c:	beq	1b588 <__assert_fail@plt+0x97d0>
   1b3a0:	add	r0, ip, #256	; 0x100
   1b3a4:	add	r1, lr, r2
   1b3a8:	cmp	sl, r1
   1b3ac:	beq	1b578 <__assert_fail@plt+0x97c0>
   1b3b0:	ldrb	r1, [r5, r3]
   1b3b4:	sub	ip, r1, #48	; 0x30
   1b3b8:	cmp	ip, #9
   1b3bc:	bhi	1b50c <__assert_fail@plt+0x9754>
   1b3c0:	mov	ip, #0
   1b3c4:	cmp	ip, r0
   1b3c8:	bne	1b59c <__assert_fail@plt+0x97e4>
   1b3cc:	add	r2, r2, #1
   1b3d0:	cmp	r8, r2
   1b3d4:	add	r3, r3, #1
   1b3d8:	bhi	1b368 <__assert_fail@plt+0x95b0>
   1b3dc:	cmp	sl, r3
   1b3e0:	ldrb	r1, [r5, r3]
   1b3e4:	bls	1b3f4 <__assert_fail@plt+0x963c>
   1b3e8:	sub	r0, r1, #48	; 0x30
   1b3ec:	cmp	r0, #9
   1b3f0:	bhi	1b4f0 <__assert_fail@plt+0x9738>
   1b3f4:	ldrb	r0, [r4, r2]
   1b3f8:	add	ip, r4, r2
   1b3fc:	cmp	r0, #48	; 0x30
   1b400:	bne	1b414 <__assert_fail@plt+0x965c>
   1b404:	add	r2, r9, ip
   1b408:	ldrb	r0, [ip, #1]!
   1b40c:	cmp	r0, #48	; 0x30
   1b410:	beq	1b404 <__assert_fail@plt+0x964c>
   1b414:	cmp	r1, #48	; 0x30
   1b418:	bne	1b430 <__assert_fail@plt+0x9678>
   1b41c:	add	ip, r5, r3
   1b420:	add	r3, fp, ip
   1b424:	ldrb	r1, [ip, #1]!
   1b428:	cmp	r1, #48	; 0x30
   1b42c:	beq	1b420 <__assert_fail@plt+0x9668>
   1b430:	sub	ip, r0, #48	; 0x30
   1b434:	cmp	ip, #9
   1b438:	sub	ip, r1, #48	; 0x30
   1b43c:	bhi	1b53c <__assert_fail@plt+0x9784>
   1b440:	cmp	ip, #9
   1b444:	bhi	1b4d0 <__assert_fail@plt+0x9718>
   1b448:	add	ip, r4, r2
   1b44c:	str	ip, [sp, #4]
   1b450:	mov	r7, r2
   1b454:	add	ip, r5, r3
   1b458:	str	ip, [sp]
   1b45c:	mov	ip, #0
   1b460:	str	ip, [sp, #12]
   1b464:	ldr	ip, [sp, #12]
   1b468:	add	r7, r7, #1
   1b46c:	cmp	ip, #0
   1b470:	subeq	r1, r0, r1
   1b474:	streq	r1, [sp, #12]
   1b478:	ldr	r1, [sp, #4]
   1b47c:	ldr	ip, [sp]
   1b480:	ldrb	r0, [r1, #1]!
   1b484:	str	r1, [sp, #4]
   1b488:	ldrb	r1, [ip, #1]!
   1b48c:	sub	lr, r0, #48	; 0x30
   1b490:	cmp	lr, #9
   1b494:	str	ip, [sp]
   1b498:	sub	ip, r7, r2
   1b49c:	add	ip, ip, r3
   1b4a0:	sub	lr, r1, #48	; 0x30
   1b4a4:	bls	1b4c8 <__assert_fail@plt+0x9710>
   1b4a8:	cmp	lr, #9
   1b4ac:	bls	1b544 <__assert_fail@plt+0x978c>
   1b4b0:	ldr	r3, [sp, #12]
   1b4b4:	cmp	r3, #0
   1b4b8:	bne	1b5b0 <__assert_fail@plt+0x97f8>
   1b4bc:	mov	r3, ip
   1b4c0:	mov	r2, r7
   1b4c4:	b	1b350 <__assert_fail@plt+0x9598>
   1b4c8:	cmp	lr, #9
   1b4cc:	bls	1b464 <__assert_fail@plt+0x96ac>
   1b4d0:	mov	r7, #1
   1b4d4:	ldr	r2, [sp, #28]
   1b4d8:	ldr	r3, [r6]
   1b4dc:	mov	r0, r7
   1b4e0:	cmp	r2, r3
   1b4e4:	bne	1b598 <__assert_fail@plt+0x97e0>
   1b4e8:	add	sp, sp, #36	; 0x24
   1b4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f0:	cmp	r8, r2
   1b4f4:	beq	1b508 <__assert_fail@plt+0x9750>
   1b4f8:	ldrb	ip, [r4, r2]
   1b4fc:	sub	r0, ip, #48	; 0x30
   1b500:	cmp	r0, #9
   1b504:	bhi	1b378 <__assert_fail@plt+0x95c0>
   1b508:	mov	r0, #0
   1b50c:	cmp	r1, #65	; 0x41
   1b510:	mov	ip, r1
   1b514:	bcc	1b52c <__assert_fail@plt+0x9774>
   1b518:	cmp	r1, #90	; 0x5a
   1b51c:	bls	1b3c4 <__assert_fail@plt+0x960c>
   1b520:	sub	r7, r1, #97	; 0x61
   1b524:	cmp	r7, #25
   1b528:	bls	1b3c4 <__assert_fail@plt+0x960c>
   1b52c:	cmp	r1, #126	; 0x7e
   1b530:	beq	1b590 <__assert_fail@plt+0x97d8>
   1b534:	add	ip, r1, #256	; 0x100
   1b538:	b	1b3c4 <__assert_fail@plt+0x960c>
   1b53c:	cmp	ip, #9
   1b540:	bhi	1b350 <__assert_fail@plt+0x9598>
   1b544:	mvn	r7, #0
   1b548:	b	1b4d4 <__assert_fail@plt+0x971c>
   1b54c:	add	r1, r2, lr
   1b550:	cmp	sl, r1
   1b554:	bne	1b3b0 <__assert_fail@plt+0x95f8>
   1b558:	b	1b3c0 <__assert_fail@plt+0x9608>
   1b55c:	cmp	r0, #0
   1b560:	ldr	r8, [sp, #20]
   1b564:	ldreq	r0, [sp, #24]
   1b568:	sub	r8, r8, r4
   1b56c:	subeq	sl, r0, r5
   1b570:	beq	1b33c <__assert_fail@plt+0x9584>
   1b574:	b	1b30c <__assert_fail@plt+0x9554>
   1b578:	mov	r7, r0
   1b57c:	b	1b4d4 <__assert_fail@plt+0x971c>
   1b580:	ldr	r7, [sp, #8]
   1b584:	b	1b4d4 <__assert_fail@plt+0x971c>
   1b588:	mvn	r0, #0
   1b58c:	b	1b3a4 <__assert_fail@plt+0x95ec>
   1b590:	mvn	ip, #0
   1b594:	b	1b3c4 <__assert_fail@plt+0x960c>
   1b598:	bl	119b0 <__stack_chk_fail@plt>
   1b59c:	sub	r7, r0, ip
   1b5a0:	b	1b4d4 <__assert_fail@plt+0x971c>
   1b5a4:	ldr	r3, [sp, #24]
   1b5a8:	sub	sl, r3, r5
   1b5ac:	b	1b310 <__assert_fail@plt+0x9558>
   1b5b0:	ldr	r7, [sp, #12]
   1b5b4:	b	1b4d4 <__assert_fail@plt+0x971c>
   1b5b8:	andeq	r9, r3, r0, lsl #30
   1b5bc:	muleq	r2, r4, r8
   1b5c0:	andeq	r8, r2, r0, lsr lr
   1b5c4:	push	{r4, r5, lr}
   1b5c8:	sub	sp, sp, #20
   1b5cc:	ldr	r4, [pc, #92]	; 1b630 <__assert_fail@plt+0x9878>
   1b5d0:	mov	r1, r0
   1b5d4:	mov	r5, r0
   1b5d8:	ldr	r3, [r4]
   1b5dc:	mov	r0, #0
   1b5e0:	str	r3, [sp, #12]
   1b5e4:	bl	11944 <clock_gettime@plt>
   1b5e8:	cmp	r0, #0
   1b5ec:	beq	1b614 <__assert_fail@plt+0x985c>
   1b5f0:	mov	r1, #0
   1b5f4:	add	r0, sp, #4
   1b5f8:	bl	11aac <gettimeofday@plt>
   1b5fc:	ldmib	sp, {r1, r3}
   1b600:	rsb	r2, r3, r3, lsl #5
   1b604:	str	r1, [r5]
   1b608:	add	r3, r3, r2, lsl #2
   1b60c:	lsl	r3, r3, #3
   1b610:	str	r3, [r5, #4]
   1b614:	ldr	r2, [sp, #12]
   1b618:	ldr	r3, [r4]
   1b61c:	cmp	r2, r3
   1b620:	bne	1b62c <__assert_fail@plt+0x9874>
   1b624:	add	sp, sp, #20
   1b628:	pop	{r4, r5, pc}
   1b62c:	bl	119b0 <__stack_chk_fail@plt>
   1b630:	andeq	r9, r3, r0, lsl #30
   1b634:	push	{r4, lr}
   1b638:	mov	r1, #0
   1b63c:	bl	11ca4 <setlocale@plt>
   1b640:	subs	r4, r0, #0
   1b644:	beq	1b670 <__assert_fail@plt+0x98b8>
   1b648:	ldr	r1, [pc, #40]	; 1b678 <__assert_fail@plt+0x98c0>
   1b64c:	bl	118d8 <strcmp@plt>
   1b650:	cmp	r0, #0
   1b654:	popeq	{r4, pc}
   1b658:	mov	r0, r4
   1b65c:	ldr	r1, [pc, #24]	; 1b67c <__assert_fail@plt+0x98c4>
   1b660:	bl	118d8 <strcmp@plt>
   1b664:	adds	r0, r0, #0
   1b668:	movne	r0, #1
   1b66c:	pop	{r4, pc}
   1b670:	mov	r0, #1
   1b674:	pop	{r4, pc}
   1b678:	andeq	r8, r2, r4, lsr lr
   1b67c:	andeq	r8, r2, r8, lsr lr
   1b680:	cmp	r0, #10
   1b684:	movcc	r0, #10
   1b688:	push	{r4, r5, r6, r7, r8, lr}
   1b68c:	orr	r7, r0, #1
   1b690:	cmn	r7, #1
   1b694:	beq	1b70c <__assert_fail@plt+0x9954>
   1b698:	ldr	r8, [pc, #116]	; 1b714 <__assert_fail@plt+0x995c>
   1b69c:	umull	r2, r3, r8, r7
   1b6a0:	cmp	r7, #9
   1b6a4:	lsr	r3, r3, #1
   1b6a8:	add	r3, r3, r3, lsl #1
   1b6ac:	sub	r3, r7, r3
   1b6b0:	bls	1b6f8 <__assert_fail@plt+0x9940>
   1b6b4:	cmp	r3, #0
   1b6b8:	beq	1b700 <__assert_fail@plt+0x9948>
   1b6bc:	mov	r6, #16
   1b6c0:	mov	r5, #9
   1b6c4:	mov	r4, #3
   1b6c8:	b	1b6d8 <__assert_fail@plt+0x9920>
   1b6cc:	cmp	r1, #0
   1b6d0:	add	r6, r6, #8
   1b6d4:	beq	1b700 <__assert_fail@plt+0x9948>
   1b6d8:	add	r4, r4, #2
   1b6dc:	mov	r1, r4
   1b6e0:	mov	r0, r7
   1b6e4:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   1b6e8:	add	r5, r5, r6
   1b6ec:	cmp	r5, r7
   1b6f0:	mov	r3, r1
   1b6f4:	bcc	1b6cc <__assert_fail@plt+0x9914>
   1b6f8:	cmp	r3, #0
   1b6fc:	bne	1b70c <__assert_fail@plt+0x9954>
   1b700:	add	r7, r7, #2
   1b704:	cmn	r7, #1
   1b708:	bne	1b69c <__assert_fail@plt+0x98e4>
   1b70c:	mov	r0, r7
   1b710:	pop	{r4, r5, r6, r7, r8, pc}
   1b714:	bge	feac61c8 <optarg@@GLIBC_2.4+0xfea8bea8>
   1b718:	push	{r4, lr}
   1b71c:	ror	r0, r0, #3
   1b720:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   1b724:	mov	r0, r1
   1b728:	pop	{r4, pc}
   1b72c:	sub	r0, r1, r0
   1b730:	clz	r0, r0
   1b734:	lsr	r0, r0, #5
   1b738:	bx	lr
   1b73c:	push	{r4, lr}
   1b740:	mov	r4, r0
   1b744:	mov	r0, r1
   1b748:	ldr	r3, [r4, #24]
   1b74c:	ldr	r1, [r4, #8]
   1b750:	blx	r3
   1b754:	ldr	r3, [r4, #8]
   1b758:	cmp	r3, r0
   1b75c:	bls	1b76c <__assert_fail@plt+0x99b4>
   1b760:	ldr	r3, [r4]
   1b764:	add	r0, r3, r0, lsl #3
   1b768:	pop	{r4, pc}
   1b76c:	bl	11d64 <abort@plt>
   1b770:	push	{r4, r5, r6, r7, r8, lr}
   1b774:	mov	r8, r2
   1b778:	mov	r5, r1
   1b77c:	mov	r7, r3
   1b780:	mov	r6, r0
   1b784:	bl	1b73c <__assert_fail@plt+0x9984>
   1b788:	str	r0, [r8]
   1b78c:	ldr	r1, [r0]
   1b790:	cmp	r1, #0
   1b794:	beq	1b87c <__assert_fail@plt+0x9ac4>
   1b798:	cmp	r1, r5
   1b79c:	mov	r4, r0
   1b7a0:	beq	1b840 <__assert_fail@plt+0x9a88>
   1b7a4:	ldr	r3, [r6, #28]
   1b7a8:	mov	r0, r5
   1b7ac:	blx	r3
   1b7b0:	cmp	r0, #0
   1b7b4:	ldrne	r3, [r4]
   1b7b8:	bne	1b844 <__assert_fail@plt+0x9a8c>
   1b7bc:	ldr	r2, [r4, #4]
   1b7c0:	cmp	r2, #0
   1b7c4:	beq	1b87c <__assert_fail@plt+0x9ac4>
   1b7c8:	ldr	r3, [r2]
   1b7cc:	cmp	r5, r3
   1b7d0:	bne	1b7f4 <__assert_fail@plt+0x9a3c>
   1b7d4:	b	1b814 <__assert_fail@plt+0x9a5c>
   1b7d8:	ldr	r4, [r4, #4]
   1b7dc:	ldr	r2, [r4, #4]
   1b7e0:	cmp	r2, #0
   1b7e4:	beq	1b87c <__assert_fail@plt+0x9ac4>
   1b7e8:	ldr	r3, [r2]
   1b7ec:	cmp	r3, r5
   1b7f0:	beq	1b814 <__assert_fail@plt+0x9a5c>
   1b7f4:	mov	r1, r3
   1b7f8:	mov	r0, r5
   1b7fc:	ldr	r3, [r6, #28]
   1b800:	blx	r3
   1b804:	cmp	r0, #0
   1b808:	beq	1b7d8 <__assert_fail@plt+0x9a20>
   1b80c:	ldr	r2, [r4, #4]
   1b810:	ldr	r3, [r2]
   1b814:	cmp	r7, #0
   1b818:	beq	1b874 <__assert_fail@plt+0x9abc>
   1b81c:	ldr	r0, [r2, #4]
   1b820:	mov	r1, #0
   1b824:	str	r0, [r4, #4]
   1b828:	str	r1, [r2]
   1b82c:	ldr	r1, [r6, #36]	; 0x24
   1b830:	mov	r0, r3
   1b834:	str	r1, [r2, #4]
   1b838:	str	r2, [r6, #36]	; 0x24
   1b83c:	pop	{r4, r5, r6, r7, r8, pc}
   1b840:	mov	r3, r1
   1b844:	cmp	r7, #0
   1b848:	beq	1b874 <__assert_fail@plt+0x9abc>
   1b84c:	ldr	r2, [r4, #4]
   1b850:	cmp	r2, #0
   1b854:	movne	ip, #0
   1b858:	ldmne	r2, {r0, r1}
   1b85c:	streq	r2, [r4]
   1b860:	stmne	r4, {r0, r1}
   1b864:	strne	ip, [r2]
   1b868:	ldrne	r1, [r6, #36]	; 0x24
   1b86c:	strne	r1, [r2, #4]
   1b870:	strne	r2, [r6, #36]	; 0x24
   1b874:	mov	r0, r3
   1b878:	pop	{r4, r5, r6, r7, r8, pc}
   1b87c:	mov	r3, #0
   1b880:	mov	r0, r3
   1b884:	pop	{r4, r5, r6, r7, r8, pc}
   1b888:	ldr	r2, [pc, #164]	; 1b934 <__assert_fail@plt+0x9b7c>
   1b88c:	ldr	r3, [r0]
   1b890:	cmp	r3, r2
   1b894:	beq	1b91c <__assert_fail@plt+0x9b64>
   1b898:	vldr	s15, [r3, #8]
   1b89c:	vldr	s14, [pc, #128]	; 1b924 <__assert_fail@plt+0x9b6c>
   1b8a0:	vcmpe.f32	s15, s14
   1b8a4:	vmrs	APSR_nzcv, fpscr
   1b8a8:	ble	1b910 <__assert_fail@plt+0x9b58>
   1b8ac:	vldr	s13, [pc, #116]	; 1b928 <__assert_fail@plt+0x9b70>
   1b8b0:	vcmpe.f32	s15, s13
   1b8b4:	vmrs	APSR_nzcv, fpscr
   1b8b8:	bpl	1b910 <__assert_fail@plt+0x9b58>
   1b8bc:	vldr	s13, [pc, #104]	; 1b92c <__assert_fail@plt+0x9b74>
   1b8c0:	vldr	s12, [r3, #12]
   1b8c4:	vcmpe.f32	s12, s13
   1b8c8:	vmrs	APSR_nzcv, fpscr
   1b8cc:	ble	1b910 <__assert_fail@plt+0x9b58>
   1b8d0:	vldr	s13, [r3]
   1b8d4:	vcmpe.f32	s13, #0.0
   1b8d8:	vmrs	APSR_nzcv, fpscr
   1b8dc:	blt	1b910 <__assert_fail@plt+0x9b58>
   1b8e0:	vadd.f32	s14, s13, s14
   1b8e4:	vldr	s13, [r3, #4]
   1b8e8:	vcmpe.f32	s14, s13
   1b8ec:	vmrs	APSR_nzcv, fpscr
   1b8f0:	bpl	1b910 <__assert_fail@plt+0x9b58>
   1b8f4:	vldr	s12, [pc, #52]	; 1b930 <__assert_fail@plt+0x9b78>
   1b8f8:	vcmpe.f32	s13, s12
   1b8fc:	vmrs	APSR_nzcv, fpscr
   1b900:	bhi	1b910 <__assert_fail@plt+0x9b58>
   1b904:	vcmpe.f32	s15, s14
   1b908:	vmrs	APSR_nzcv, fpscr
   1b90c:	bgt	1b91c <__assert_fail@plt+0x9b64>
   1b910:	str	r2, [r0]
   1b914:	mov	r0, #0
   1b918:	bx	lr
   1b91c:	mov	r0, #1
   1b920:	bx	lr
   1b924:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b928:	svccc	0x00666666
   1b92c:	svccc	0x008ccccd
   1b930:	svccc	0x00800000
   1b934:	andeq	r8, r2, r0, asr #28
   1b938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b93c:	ldr	r3, [r1, #4]
   1b940:	ldr	r6, [r1]
   1b944:	cmp	r6, r3
   1b948:	bcs	1ba10 <__assert_fail@plt+0x9c58>
   1b94c:	mov	r8, r2
   1b950:	mov	r5, r0
   1b954:	mov	r7, r1
   1b958:	add	r6, r6, #8
   1b95c:	mov	r9, #0
   1b960:	b	1b970 <__assert_fail@plt+0x9bb8>
   1b964:	cmp	r3, r6
   1b968:	add	r6, r6, #8
   1b96c:	bls	1ba10 <__assert_fail@plt+0x9c58>
   1b970:	ldr	sl, [r6, #-8]
   1b974:	cmp	sl, #0
   1b978:	beq	1b964 <__assert_fail@plt+0x9bac>
   1b97c:	ldr	r4, [r6, #-4]
   1b980:	cmp	r4, #0
   1b984:	bne	1b9a4 <__assert_fail@plt+0x9bec>
   1b988:	b	1b9f4 <__assert_fail@plt+0x9c3c>
   1b98c:	ldr	r2, [r0, #4]
   1b990:	cmp	r3, #0
   1b994:	str	r2, [r4, #4]
   1b998:	str	r4, [r0, #4]
   1b99c:	mov	r4, r3
   1b9a0:	beq	1b9f0 <__assert_fail@plt+0x9c38>
   1b9a4:	ldr	sl, [r4]
   1b9a8:	mov	r0, r5
   1b9ac:	mov	r1, sl
   1b9b0:	bl	1b73c <__assert_fail@plt+0x9984>
   1b9b4:	ldr	r3, [r4, #4]
   1b9b8:	ldr	r2, [r0]
   1b9bc:	cmp	r2, #0
   1b9c0:	bne	1b98c <__assert_fail@plt+0x9bd4>
   1b9c4:	ldr	r1, [r5, #12]
   1b9c8:	str	sl, [r0]
   1b9cc:	add	r1, r1, #1
   1b9d0:	str	r1, [r5, #12]
   1b9d4:	str	r2, [r4]
   1b9d8:	ldr	r2, [r5, #36]	; 0x24
   1b9dc:	cmp	r3, #0
   1b9e0:	str	r2, [r4, #4]
   1b9e4:	str	r4, [r5, #36]	; 0x24
   1b9e8:	mov	r4, r3
   1b9ec:	bne	1b9a4 <__assert_fail@plt+0x9bec>
   1b9f0:	ldr	sl, [r6, #-8]
   1b9f4:	cmp	r8, #0
   1b9f8:	str	r9, [r6, #-4]
   1b9fc:	beq	1ba18 <__assert_fail@plt+0x9c60>
   1ba00:	ldr	r3, [r7, #4]
   1ba04:	cmp	r3, r6
   1ba08:	add	r6, r6, #8
   1ba0c:	bhi	1b970 <__assert_fail@plt+0x9bb8>
   1ba10:	mov	r0, #1
   1ba14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba18:	mov	r1, sl
   1ba1c:	mov	r0, r5
   1ba20:	bl	1b73c <__assert_fail@plt+0x9984>
   1ba24:	ldr	r3, [r0]
   1ba28:	mov	r4, r0
   1ba2c:	cmp	r3, #0
   1ba30:	beq	1ba70 <__assert_fail@plt+0x9cb8>
   1ba34:	ldr	r0, [r5, #36]	; 0x24
   1ba38:	cmp	r0, #0
   1ba3c:	beq	1ba84 <__assert_fail@plt+0x9ccc>
   1ba40:	ldr	r3, [r0, #4]
   1ba44:	str	r3, [r5, #36]	; 0x24
   1ba48:	ldr	r3, [r4, #4]
   1ba4c:	str	sl, [r0]
   1ba50:	str	r3, [r0, #4]
   1ba54:	str	r0, [r4, #4]
   1ba58:	ldr	r2, [r7, #12]
   1ba5c:	str	r9, [r6, #-8]
   1ba60:	sub	r2, r2, #1
   1ba64:	ldr	r3, [r7, #4]
   1ba68:	str	r2, [r7, #12]
   1ba6c:	b	1b964 <__assert_fail@plt+0x9bac>
   1ba70:	ldr	r3, [r5, #12]
   1ba74:	str	sl, [r0]
   1ba78:	add	r3, r3, #1
   1ba7c:	str	r3, [r5, #12]
   1ba80:	b	1ba58 <__assert_fail@plt+0x9ca0>
   1ba84:	mov	r0, #8
   1ba88:	bl	11b30 <malloc@plt>
   1ba8c:	cmp	r0, #0
   1ba90:	bne	1ba48 <__assert_fail@plt+0x9c90>
   1ba94:	mov	r0, r8
   1ba98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba9c:	ldr	r0, [r0, #8]
   1baa0:	bx	lr
   1baa4:	ldr	r0, [r0, #12]
   1baa8:	bx	lr
   1baac:	ldr	r0, [r0, #16]
   1bab0:	bx	lr
   1bab4:	ldm	r0, {r1, r3}
   1bab8:	cmp	r1, r3
   1babc:	bcs	1bb24 <__assert_fail@plt+0x9d6c>
   1bac0:	sub	ip, r3, #1
   1bac4:	sub	ip, ip, r1
   1bac8:	add	r3, r1, #16
   1bacc:	bic	ip, ip, #7
   1bad0:	add	ip, ip, r3
   1bad4:	add	r1, r1, #8
   1bad8:	mov	r0, #0
   1badc:	b	1baec <__assert_fail@plt+0x9d34>
   1bae0:	add	r1, r1, #8
   1bae4:	cmp	r1, ip
   1bae8:	bxeq	lr
   1baec:	ldr	r3, [r1, #-8]
   1baf0:	cmp	r3, #0
   1baf4:	beq	1bae0 <__assert_fail@plt+0x9d28>
   1baf8:	ldr	r3, [r1, #-4]
   1bafc:	mov	r2, #1
   1bb00:	cmp	r3, #0
   1bb04:	beq	1bb18 <__assert_fail@plt+0x9d60>
   1bb08:	ldr	r3, [r3, #4]
   1bb0c:	add	r2, r2, #1
   1bb10:	cmp	r3, #0
   1bb14:	bne	1bb08 <__assert_fail@plt+0x9d50>
   1bb18:	cmp	r0, r2
   1bb1c:	movcc	r0, r2
   1bb20:	b	1bae0 <__assert_fail@plt+0x9d28>
   1bb24:	mov	r0, #0
   1bb28:	bx	lr
   1bb2c:	ldm	r0, {r1, r3}
   1bb30:	push	{lr}		; (str lr, [sp, #-4]!)
   1bb34:	cmp	r1, r3
   1bb38:	bcs	1bbc8 <__assert_fail@plt+0x9e10>
   1bb3c:	sub	ip, r3, #1
   1bb40:	sub	ip, ip, r1
   1bb44:	add	r3, r1, #16
   1bb48:	bic	ip, ip, #7
   1bb4c:	mov	r2, #0
   1bb50:	add	ip, ip, r3
   1bb54:	add	r1, r1, #8
   1bb58:	mov	lr, r2
   1bb5c:	b	1bb6c <__assert_fail@plt+0x9db4>
   1bb60:	add	r1, r1, #8
   1bb64:	cmp	r1, ip
   1bb68:	beq	1bba8 <__assert_fail@plt+0x9df0>
   1bb6c:	ldr	r3, [r1, #-8]
   1bb70:	cmp	r3, #0
   1bb74:	beq	1bb60 <__assert_fail@plt+0x9da8>
   1bb78:	ldr	r3, [r1, #-4]
   1bb7c:	add	lr, lr, #1
   1bb80:	cmp	r3, #0
   1bb84:	add	r2, r2, #1
   1bb88:	beq	1bb60 <__assert_fail@plt+0x9da8>
   1bb8c:	ldr	r3, [r3, #4]
   1bb90:	add	r2, r2, #1
   1bb94:	cmp	r3, #0
   1bb98:	bne	1bb8c <__assert_fail@plt+0x9dd4>
   1bb9c:	add	r1, r1, #8
   1bba0:	cmp	r1, ip
   1bba4:	bne	1bb6c <__assert_fail@plt+0x9db4>
   1bba8:	ldr	r3, [r0, #12]
   1bbac:	cmp	r3, lr
   1bbb0:	ldreq	r0, [r0, #16]
   1bbb4:	subeq	r0, r0, r2
   1bbb8:	clzeq	r0, r0
   1bbbc:	lsreq	r0, r0, #5
   1bbc0:	movne	r0, #0
   1bbc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbc8:	mov	r2, #0
   1bbcc:	mov	lr, r2
   1bbd0:	b	1bba8 <__assert_fail@plt+0x9df0>
   1bbd4:	push	{r4, r5, r6, r7, lr}
   1bbd8:	mov	r4, r1
   1bbdc:	ldr	r2, [r0]
   1bbe0:	ldr	r1, [r0, #4]
   1bbe4:	sub	sp, sp, #12
   1bbe8:	cmp	r2, r1
   1bbec:	ldr	r3, [r0, #16]
   1bbf0:	ldrd	r6, [r0, #8]
   1bbf4:	bcs	1bcd8 <__assert_fail@plt+0x9f20>
   1bbf8:	sub	ip, r1, #1
   1bbfc:	sub	ip, ip, r2
   1bc00:	bic	ip, ip, #7
   1bc04:	add	r1, r2, #16
   1bc08:	add	ip, ip, r1
   1bc0c:	add	r0, r2, #8
   1bc10:	mov	r5, #0
   1bc14:	b	1bc24 <__assert_fail@plt+0x9e6c>
   1bc18:	add	r0, r0, #8
   1bc1c:	cmp	r0, ip
   1bc20:	beq	1bc64 <__assert_fail@plt+0x9eac>
   1bc24:	ldr	r2, [r0, #-8]
   1bc28:	cmp	r2, #0
   1bc2c:	beq	1bc18 <__assert_fail@plt+0x9e60>
   1bc30:	ldr	r2, [r0, #-4]
   1bc34:	mov	r1, #1
   1bc38:	cmp	r2, #0
   1bc3c:	beq	1bc50 <__assert_fail@plt+0x9e98>
   1bc40:	ldr	r2, [r2, #4]
   1bc44:	add	r1, r1, #1
   1bc48:	cmp	r2, #0
   1bc4c:	bne	1bc40 <__assert_fail@plt+0x9e88>
   1bc50:	cmp	r5, r1
   1bc54:	add	r0, r0, #8
   1bc58:	movcc	r5, r1
   1bc5c:	cmp	r0, ip
   1bc60:	bne	1bc24 <__assert_fail@plt+0x9e6c>
   1bc64:	ldr	r2, [pc, #124]	; 1bce8 <__assert_fail@plt+0x9f30>
   1bc68:	mov	r1, #1
   1bc6c:	mov	r0, r4
   1bc70:	bl	11c74 <__fprintf_chk@plt>
   1bc74:	mov	r3, r6
   1bc78:	ldr	r2, [pc, #108]	; 1bcec <__assert_fail@plt+0x9f34>
   1bc7c:	mov	r1, #1
   1bc80:	mov	r0, r4
   1bc84:	bl	11c74 <__fprintf_chk@plt>
   1bc88:	vmov	s15, r7
   1bc8c:	vldr	d5, [pc, #76]	; 1bce0 <__assert_fail@plt+0x9f28>
   1bc90:	mov	r3, r7
   1bc94:	ldr	r2, [pc, #84]	; 1bcf0 <__assert_fail@plt+0x9f38>
   1bc98:	vcvt.f64.u32	d6, s15
   1bc9c:	vmov	s15, r6
   1bca0:	mov	r1, #1
   1bca4:	mov	r0, r4
   1bca8:	vcvt.f64.u32	d7, s15
   1bcac:	vmul.f64	d6, d6, d5
   1bcb0:	vdiv.f64	d5, d6, d7
   1bcb4:	vstr	d5, [sp]
   1bcb8:	bl	11c74 <__fprintf_chk@plt>
   1bcbc:	mov	r3, r5
   1bcc0:	mov	r0, r4
   1bcc4:	ldr	r2, [pc, #40]	; 1bcf4 <__assert_fail@plt+0x9f3c>
   1bcc8:	mov	r1, #1
   1bccc:	add	sp, sp, #12
   1bcd0:	pop	{r4, r5, r6, r7, lr}
   1bcd4:	b	11c74 <__fprintf_chk@plt>
   1bcd8:	mov	r5, #0
   1bcdc:	b	1bc64 <__assert_fail@plt+0x9eac>
   1bce0:	andeq	r0, r0, r0
   1bce4:	subsmi	r0, r9, r0
   1bce8:	andeq	r8, r2, r4, asr lr
   1bcec:	andeq	r8, r2, ip, ror #28
   1bcf0:	andeq	r8, r2, r4, lsl #29
   1bcf4:	andeq	r8, r2, r8, lsr #29
   1bcf8:	push	{r4, r5, r6, lr}
   1bcfc:	mov	r6, r0
   1bd00:	mov	r5, r1
   1bd04:	bl	1b73c <__assert_fail@plt+0x9984>
   1bd08:	ldr	r3, [r0]
   1bd0c:	cmp	r3, #0
   1bd10:	beq	1bd4c <__assert_fail@plt+0x9f94>
   1bd14:	mov	r4, r0
   1bd18:	b	1bd20 <__assert_fail@plt+0x9f68>
   1bd1c:	ldr	r3, [r4]
   1bd20:	cmp	r3, r5
   1bd24:	mov	r1, r3
   1bd28:	mov	r0, r5
   1bd2c:	beq	1bd58 <__assert_fail@plt+0x9fa0>
   1bd30:	ldr	r3, [r6, #28]
   1bd34:	blx	r3
   1bd38:	cmp	r0, #0
   1bd3c:	bne	1bd54 <__assert_fail@plt+0x9f9c>
   1bd40:	ldr	r4, [r4, #4]
   1bd44:	cmp	r4, #0
   1bd48:	bne	1bd1c <__assert_fail@plt+0x9f64>
   1bd4c:	mov	r0, #0
   1bd50:	pop	{r4, r5, r6, pc}
   1bd54:	ldr	r5, [r4]
   1bd58:	mov	r0, r5
   1bd5c:	pop	{r4, r5, r6, pc}
   1bd60:	ldr	r3, [r0, #16]
   1bd64:	cmp	r3, #0
   1bd68:	beq	1bdb8 <__assert_fail@plt+0xa000>
   1bd6c:	ldr	r3, [r0]
   1bd70:	ldr	r2, [r0, #4]
   1bd74:	cmp	r3, r2
   1bd78:	bcs	1bdb0 <__assert_fail@plt+0x9ff8>
   1bd7c:	ldr	r0, [r3]
   1bd80:	cmp	r0, #0
   1bd84:	bxne	lr
   1bd88:	sub	r2, r2, #1
   1bd8c:	sub	r2, r2, r3
   1bd90:	bic	r2, r2, #7
   1bd94:	add	r2, r3, r2
   1bd98:	b	1bda8 <__assert_fail@plt+0x9ff0>
   1bd9c:	ldr	r0, [r3, #8]!
   1bda0:	cmp	r0, #0
   1bda4:	bxne	lr
   1bda8:	cmp	r3, r2
   1bdac:	bne	1bd9c <__assert_fail@plt+0x9fe4>
   1bdb0:	push	{r4, lr}
   1bdb4:	bl	11d64 <abort@plt>
   1bdb8:	mov	r0, r3
   1bdbc:	bx	lr
   1bdc0:	push	{r4, r5, r6, lr}
   1bdc4:	mov	r5, r0
   1bdc8:	mov	r4, r1
   1bdcc:	bl	1b73c <__assert_fail@plt+0x9984>
   1bdd0:	mov	r2, r0
   1bdd4:	mov	r3, r0
   1bdd8:	b	1bde4 <__assert_fail@plt+0xa02c>
   1bddc:	cmp	r3, #0
   1bde0:	beq	1bdf8 <__assert_fail@plt+0xa040>
   1bde4:	ldm	r3, {r1, r3}
   1bde8:	cmp	r1, r4
   1bdec:	bne	1bddc <__assert_fail@plt+0xa024>
   1bdf0:	cmp	r3, #0
   1bdf4:	bne	1be20 <__assert_fail@plt+0xa068>
   1bdf8:	ldr	r3, [r5, #4]
   1bdfc:	b	1be0c <__assert_fail@plt+0xa054>
   1be00:	ldr	r0, [r2]
   1be04:	cmp	r0, #0
   1be08:	popne	{r4, r5, r6, pc}
   1be0c:	add	r2, r2, #8
   1be10:	cmp	r3, r2
   1be14:	bhi	1be00 <__assert_fail@plt+0xa048>
   1be18:	mov	r0, #0
   1be1c:	pop	{r4, r5, r6, pc}
   1be20:	ldr	r0, [r3]
   1be24:	pop	{r4, r5, r6, pc}
   1be28:	push	{r4, r5, lr}
   1be2c:	ldm	r0, {r5, lr}
   1be30:	cmp	lr, r5
   1be34:	bls	1beb8 <__assert_fail@plt+0xa100>
   1be38:	mov	ip, #0
   1be3c:	ldr	r3, [r5]
   1be40:	cmp	r3, #0
   1be44:	bne	1be60 <__assert_fail@plt+0xa0a8>
   1be48:	add	r5, r5, #8
   1be4c:	cmp	lr, r5
   1be50:	bhi	1be3c <__assert_fail@plt+0xa084>
   1be54:	mov	r2, ip
   1be58:	mov	r0, r2
   1be5c:	pop	{r4, r5, pc}
   1be60:	cmp	r2, ip
   1be64:	bls	1be54 <__assert_fail@plt+0xa09c>
   1be68:	str	r3, [r1, ip, lsl #2]
   1be6c:	ldr	r3, [r5, #4]
   1be70:	add	r4, ip, #1
   1be74:	cmp	r3, #0
   1be78:	add	lr, r1, ip, lsl #2
   1be7c:	beq	1beac <__assert_fail@plt+0xa0f4>
   1be80:	mov	ip, r4
   1be84:	cmp	r2, ip
   1be88:	beq	1be58 <__assert_fail@plt+0xa0a0>
   1be8c:	ldr	r4, [r3]
   1be90:	add	ip, ip, #1
   1be94:	str	r4, [lr, #4]!
   1be98:	ldr	r3, [r3, #4]
   1be9c:	cmp	r3, #0
   1bea0:	bne	1be84 <__assert_fail@plt+0xa0cc>
   1bea4:	ldr	lr, [r0, #4]
   1bea8:	b	1be48 <__assert_fail@plt+0xa090>
   1beac:	ldr	lr, [r0, #4]
   1beb0:	mov	ip, r4
   1beb4:	b	1be48 <__assert_fail@plt+0xa090>
   1beb8:	mov	r2, #0
   1bebc:	b	1be58 <__assert_fail@plt+0xa0a0>
   1bec0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bec4:	ldr	r3, [r0, #4]
   1bec8:	ldr	r8, [r0]
   1becc:	cmp	r3, r8
   1bed0:	bls	1bf38 <__assert_fail@plt+0xa180>
   1bed4:	mov	r7, r2
   1bed8:	mov	r6, r1
   1bedc:	mov	r9, r0
   1bee0:	mov	r5, #0
   1bee4:	ldr	r0, [r8]
   1bee8:	cmp	r0, #0
   1beec:	bne	1bf04 <__assert_fail@plt+0xa14c>
   1bef0:	add	r8, r8, #8
   1bef4:	cmp	r3, r8
   1bef8:	bhi	1bee4 <__assert_fail@plt+0xa12c>
   1befc:	mov	r0, r5
   1bf00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bf04:	mov	r4, r8
   1bf08:	b	1bf10 <__assert_fail@plt+0xa158>
   1bf0c:	ldr	r0, [r4]
   1bf10:	mov	r1, r7
   1bf14:	blx	r6
   1bf18:	cmp	r0, #0
   1bf1c:	beq	1befc <__assert_fail@plt+0xa144>
   1bf20:	ldr	r4, [r4, #4]
   1bf24:	add	r5, r5, #1
   1bf28:	cmp	r4, #0
   1bf2c:	bne	1bf0c <__assert_fail@plt+0xa154>
   1bf30:	ldr	r3, [r9, #4]
   1bf34:	b	1bef0 <__assert_fail@plt+0xa138>
   1bf38:	mov	r5, #0
   1bf3c:	b	1befc <__assert_fail@plt+0xa144>
   1bf40:	push	{r4, r5, r6, lr}
   1bf44:	mov	r4, r0
   1bf48:	ldrb	r0, [r0]
   1bf4c:	cmp	r0, #0
   1bf50:	beq	1bf80 <__assert_fail@plt+0xa1c8>
   1bf54:	mov	r5, r1
   1bf58:	mov	r1, #0
   1bf5c:	rsb	r1, r1, r1, lsl #5
   1bf60:	add	r0, r1, r0
   1bf64:	mov	r1, r5
   1bf68:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   1bf6c:	ldrb	r0, [r4, #1]!
   1bf70:	cmp	r0, #0
   1bf74:	bne	1bf5c <__assert_fail@plt+0xa1a4>
   1bf78:	mov	r0, r1
   1bf7c:	pop	{r4, r5, r6, pc}
   1bf80:	mov	r1, r0
   1bf84:	mov	r0, r1
   1bf88:	pop	{r4, r5, r6, pc}
   1bf8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bf90:	mov	ip, r0
   1bf94:	ldr	lr, [pc, #16]	; 1bfac <__assert_fail@plt+0xa1f4>
   1bf98:	ldm	lr!, {r0, r1, r2, r3}
   1bf9c:	ldr	lr, [lr]
   1bfa0:	stmia	ip!, {r0, r1, r2, r3}
   1bfa4:	str	lr, [ip]
   1bfa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfac:	andeq	r8, r2, r0, asr #28
   1bfb0:	push	{r4, r5, r6, r7, r8, lr}
   1bfb4:	sub	sp, sp, #8
   1bfb8:	cmp	r2, #0
   1bfbc:	ldr	ip, [pc, #300]	; 1c0f0 <__assert_fail@plt+0xa338>
   1bfc0:	str	r0, [sp, #4]
   1bfc4:	ldr	r5, [pc, #296]	; 1c0f4 <__assert_fail@plt+0xa33c>
   1bfc8:	mov	r0, #40	; 0x28
   1bfcc:	movne	r5, r2
   1bfd0:	cmp	r3, #0
   1bfd4:	movne	r8, r3
   1bfd8:	moveq	r8, ip
   1bfdc:	mov	r6, r1
   1bfe0:	bl	11b30 <malloc@plt>
   1bfe4:	subs	r4, r0, #0
   1bfe8:	beq	1c0b4 <__assert_fail@plt+0xa2fc>
   1bfec:	cmp	r6, #0
   1bff0:	add	r0, r4, #20
   1bff4:	beq	1c090 <__assert_fail@plt+0xa2d8>
   1bff8:	str	r6, [r4, #20]
   1bffc:	bl	1b888 <__assert_fail@plt+0x9ad0>
   1c000:	cmp	r0, #0
   1c004:	beq	1c0a8 <__assert_fail@plt+0xa2f0>
   1c008:	ldrb	r3, [r6, #16]
   1c00c:	cmp	r3, #0
   1c010:	vldreq	s13, [r6, #8]
   1c014:	beq	1c0c0 <__assert_fail@plt+0xa308>
   1c018:	ldr	r0, [sp, #4]
   1c01c:	bl	1b680 <__assert_fail@plt+0x98c8>
   1c020:	lsrs	r3, r0, #30
   1c024:	movne	r7, #1
   1c028:	moveq	r7, #0
   1c02c:	tst	r0, #536870912	; 0x20000000
   1c030:	mov	r6, r0
   1c034:	bne	1c0a8 <__assert_fail@plt+0xa2f0>
   1c038:	cmp	r7, #0
   1c03c:	bne	1c0a8 <__assert_fail@plt+0xa2f0>
   1c040:	cmp	r0, #0
   1c044:	str	r0, [r4, #8]
   1c048:	beq	1c0a8 <__assert_fail@plt+0xa2f0>
   1c04c:	mov	r1, #8
   1c050:	bl	1189c <calloc@plt>
   1c054:	cmp	r0, #0
   1c058:	str	r0, [r4]
   1c05c:	beq	1c0a8 <__assert_fail@plt+0xa2f0>
   1c060:	ldr	r3, [sp, #32]
   1c064:	add	r0, r0, r6, lsl #3
   1c068:	str	r0, [r4, #4]
   1c06c:	str	r7, [r4, #12]
   1c070:	mov	r0, r4
   1c074:	str	r7, [r4, #16]
   1c078:	str	r5, [r4, #24]
   1c07c:	str	r8, [r4, #28]
   1c080:	str	r3, [r4, #32]
   1c084:	str	r7, [r4, #36]	; 0x24
   1c088:	add	sp, sp, #8
   1c08c:	pop	{r4, r5, r6, r7, r8, pc}
   1c090:	ldr	r3, [pc, #96]	; 1c0f8 <__assert_fail@plt+0xa340>
   1c094:	str	r3, [r4, #20]
   1c098:	bl	1b888 <__assert_fail@plt+0x9ad0>
   1c09c:	cmp	r0, #0
   1c0a0:	vldrne	s13, [pc, #64]	; 1c0e8 <__assert_fail@plt+0xa330>
   1c0a4:	bne	1c0c0 <__assert_fail@plt+0xa308>
   1c0a8:	mov	r0, r4
   1c0ac:	bl	11938 <free@plt>
   1c0b0:	mov	r4, #0
   1c0b4:	mov	r0, r4
   1c0b8:	add	sp, sp, #8
   1c0bc:	pop	{r4, r5, r6, r7, r8, pc}
   1c0c0:	vldr	s15, [sp, #4]
   1c0c4:	vldr	s14, [pc, #32]	; 1c0ec <__assert_fail@plt+0xa334>
   1c0c8:	vcvt.f32.u32	s12, s15
   1c0cc:	vdiv.f32	s15, s12, s13
   1c0d0:	vcmpe.f32	s15, s14
   1c0d4:	vmrs	APSR_nzcv, fpscr
   1c0d8:	bge	1c0a8 <__assert_fail@plt+0xa2f0>
   1c0dc:	vcvt.u32.f32	s15, s15
   1c0e0:	vstr	s15, [sp, #4]
   1c0e4:	b	1c018 <__assert_fail@plt+0xa260>
   1c0e8:	svccc	0x004ccccd
   1c0ec:	svcmi	0x00800000
   1c0f0:	andeq	fp, r1, ip, lsr #14
   1c0f4:	andeq	fp, r1, r8, lsl r7
   1c0f8:	andeq	r8, r2, r0, asr #28
   1c0fc:	push	{r4, r5, r6, r7, r8, lr}
   1c100:	mov	r5, r0
   1c104:	ldr	r6, [r0]
   1c108:	ldr	r2, [r0, #4]
   1c10c:	cmp	r6, r2
   1c110:	addcc	r6, r6, #8
   1c114:	movcc	r7, #0
   1c118:	bcc	1c12c <__assert_fail@plt+0xa374>
   1c11c:	b	1c1a0 <__assert_fail@plt+0xa3e8>
   1c120:	cmp	r2, r6
   1c124:	add	r6, r6, #8
   1c128:	bls	1c1a0 <__assert_fail@plt+0xa3e8>
   1c12c:	ldr	r3, [r6, #-8]
   1c130:	cmp	r3, #0
   1c134:	beq	1c120 <__assert_fail@plt+0xa368>
   1c138:	ldr	r4, [r6, #-4]
   1c13c:	ldr	r2, [r5, #32]
   1c140:	cmp	r4, #0
   1c144:	beq	1c178 <__assert_fail@plt+0xa3c0>
   1c148:	cmp	r2, #0
   1c14c:	beq	1c15c <__assert_fail@plt+0xa3a4>
   1c150:	ldr	r0, [r4]
   1c154:	blx	r2
   1c158:	ldr	r2, [r5, #32]
   1c15c:	ldr	r3, [r4, #4]
   1c160:	ldr	r1, [r5, #36]	; 0x24
   1c164:	str	r7, [r4]
   1c168:	str	r1, [r4, #4]
   1c16c:	str	r4, [r5, #36]	; 0x24
   1c170:	subs	r4, r3, #0
   1c174:	bne	1c148 <__assert_fail@plt+0xa390>
   1c178:	cmp	r2, #0
   1c17c:	beq	1c188 <__assert_fail@plt+0xa3d0>
   1c180:	ldr	r0, [r6, #-8]
   1c184:	blx	r2
   1c188:	str	r7, [r6, #-8]
   1c18c:	str	r7, [r6, #-4]
   1c190:	ldr	r2, [r5, #4]
   1c194:	cmp	r2, r6
   1c198:	add	r6, r6, #8
   1c19c:	bhi	1c12c <__assert_fail@plt+0xa374>
   1c1a0:	mov	r3, #0
   1c1a4:	str	r3, [r5, #12]
   1c1a8:	str	r3, [r5, #16]
   1c1ac:	pop	{r4, r5, r6, r7, r8, pc}
   1c1b0:	ldr	r3, [r0, #32]
   1c1b4:	push	{r4, r5, r6, lr}
   1c1b8:	cmp	r3, #0
   1c1bc:	mov	r6, r0
   1c1c0:	ldr	r5, [r0]
   1c1c4:	ldr	r3, [r0, #4]
   1c1c8:	beq	1c230 <__assert_fail@plt+0xa478>
   1c1cc:	ldr	r2, [r0, #16]
   1c1d0:	cmp	r2, #0
   1c1d4:	beq	1c230 <__assert_fail@plt+0xa478>
   1c1d8:	cmp	r5, r3
   1c1dc:	bcc	1c1f0 <__assert_fail@plt+0xa438>
   1c1e0:	b	1c264 <__assert_fail@plt+0xa4ac>
   1c1e4:	add	r5, r5, #8
   1c1e8:	cmp	r3, r5
   1c1ec:	bls	1c22c <__assert_fail@plt+0xa474>
   1c1f0:	ldr	r0, [r5]
   1c1f4:	cmp	r0, #0
   1c1f8:	beq	1c1e4 <__assert_fail@plt+0xa42c>
   1c1fc:	mov	r4, r5
   1c200:	b	1c208 <__assert_fail@plt+0xa450>
   1c204:	ldr	r0, [r4]
   1c208:	ldr	r3, [r6, #32]
   1c20c:	blx	r3
   1c210:	ldr	r4, [r4, #4]
   1c214:	cmp	r4, #0
   1c218:	bne	1c204 <__assert_fail@plt+0xa44c>
   1c21c:	ldr	r3, [r6, #4]
   1c220:	add	r5, r5, #8
   1c224:	cmp	r3, r5
   1c228:	bhi	1c1f0 <__assert_fail@plt+0xa438>
   1c22c:	ldr	r5, [r6]
   1c230:	cmp	r5, r3
   1c234:	bcs	1c264 <__assert_fail@plt+0xa4ac>
   1c238:	ldr	r0, [r5, #4]
   1c23c:	cmp	r0, #0
   1c240:	beq	1c258 <__assert_fail@plt+0xa4a0>
   1c244:	ldr	r4, [r0, #4]
   1c248:	bl	11938 <free@plt>
   1c24c:	subs	r0, r4, #0
   1c250:	bne	1c244 <__assert_fail@plt+0xa48c>
   1c254:	ldr	r3, [r6, #4]
   1c258:	add	r5, r5, #8
   1c25c:	cmp	r3, r5
   1c260:	bhi	1c238 <__assert_fail@plt+0xa480>
   1c264:	ldr	r0, [r6, #36]	; 0x24
   1c268:	cmp	r0, #0
   1c26c:	beq	1c280 <__assert_fail@plt+0xa4c8>
   1c270:	ldr	r4, [r0, #4]
   1c274:	bl	11938 <free@plt>
   1c278:	subs	r0, r4, #0
   1c27c:	bne	1c270 <__assert_fail@plt+0xa4b8>
   1c280:	ldr	r0, [r6]
   1c284:	bl	11938 <free@plt>
   1c288:	mov	r0, r6
   1c28c:	pop	{r4, r5, r6, lr}
   1c290:	b	11938 <free@plt>
   1c294:	push	{r4, r5, r6, r7, r8, lr}
   1c298:	sub	sp, sp, #56	; 0x38
   1c29c:	ldr	r8, [r0, #20]
   1c2a0:	ldr	r7, [pc, #392]	; 1c430 <__assert_fail@plt+0xa678>
   1c2a4:	mov	r6, r0
   1c2a8:	ldrb	r3, [r8, #16]
   1c2ac:	ldr	r2, [r7]
   1c2b0:	str	r1, [sp, #4]
   1c2b4:	cmp	r3, #0
   1c2b8:	str	r2, [sp, #52]	; 0x34
   1c2bc:	bne	1c2e8 <__assert_fail@plt+0xa530>
   1c2c0:	vmov	s15, r1
   1c2c4:	vldr	s13, [r8, #8]
   1c2c8:	vldr	s14, [pc, #348]	; 1c42c <__assert_fail@plt+0xa674>
   1c2cc:	vcvt.f32.u32	s12, s15
   1c2d0:	vdiv.f32	s15, s12, s13
   1c2d4:	vcmpe.f32	s15, s14
   1c2d8:	vmrs	APSR_nzcv, fpscr
   1c2dc:	vcvtlt.u32.f32	s15, s15
   1c2e0:	vstrlt	s15, [sp, #4]
   1c2e4:	bge	1c318 <__assert_fail@plt+0xa560>
   1c2e8:	ldr	r0, [sp, #4]
   1c2ec:	bl	1b680 <__assert_fail@plt+0x98c8>
   1c2f0:	lsrs	r3, r0, #30
   1c2f4:	movne	r4, #1
   1c2f8:	moveq	r4, #0
   1c2fc:	tst	r0, #536870912	; 0x20000000
   1c300:	movne	r4, #1
   1c304:	cmp	r0, #0
   1c308:	moveq	r4, #1
   1c30c:	cmp	r4, #0
   1c310:	mov	r5, r0
   1c314:	beq	1c338 <__assert_fail@plt+0xa580>
   1c318:	mov	r4, #0
   1c31c:	ldr	r2, [sp, #52]	; 0x34
   1c320:	ldr	r3, [r7]
   1c324:	mov	r0, r4
   1c328:	cmp	r2, r3
   1c32c:	bne	1c424 <__assert_fail@plt+0xa66c>
   1c330:	add	sp, sp, #56	; 0x38
   1c334:	pop	{r4, r5, r6, r7, r8, pc}
   1c338:	ldr	r3, [r6, #8]
   1c33c:	cmp	r3, r0
   1c340:	beq	1c3ec <__assert_fail@plt+0xa634>
   1c344:	mov	r1, #8
   1c348:	bl	1189c <calloc@plt>
   1c34c:	cmp	r0, #0
   1c350:	str	r0, [sp, #12]
   1c354:	beq	1c318 <__assert_fail@plt+0xa560>
   1c358:	add	r0, r0, r5, lsl #3
   1c35c:	ldr	r1, [r6, #32]
   1c360:	str	r0, [sp, #16]
   1c364:	ldr	r0, [r6, #28]
   1c368:	ldr	ip, [r6, #24]
   1c36c:	ldr	r3, [r6, #36]	; 0x24
   1c370:	mov	r2, r4
   1c374:	str	r0, [sp, #40]	; 0x28
   1c378:	str	r1, [sp, #44]	; 0x2c
   1c37c:	add	r0, sp, #12
   1c380:	mov	r1, r6
   1c384:	str	r4, [sp, #24]
   1c388:	str	r4, [sp, #28]
   1c38c:	str	r5, [sp, #20]
   1c390:	str	r8, [sp, #32]
   1c394:	str	ip, [sp, #36]	; 0x24
   1c398:	str	r3, [sp, #48]	; 0x30
   1c39c:	bl	1b938 <__assert_fail@plt+0x9b80>
   1c3a0:	subs	r4, r0, #0
   1c3a4:	bne	1c3f4 <__assert_fail@plt+0xa63c>
   1c3a8:	ldr	r3, [sp, #48]	; 0x30
   1c3ac:	mov	r2, #1
   1c3b0:	str	r3, [r6, #36]	; 0x24
   1c3b4:	add	r1, sp, #12
   1c3b8:	mov	r0, r6
   1c3bc:	bl	1b938 <__assert_fail@plt+0x9b80>
   1c3c0:	cmp	r0, #0
   1c3c4:	beq	1c428 <__assert_fail@plt+0xa670>
   1c3c8:	add	r1, sp, #12
   1c3cc:	mov	r0, r6
   1c3d0:	mov	r2, r4
   1c3d4:	bl	1b938 <__assert_fail@plt+0x9b80>
   1c3d8:	cmp	r0, #0
   1c3dc:	beq	1c428 <__assert_fail@plt+0xa670>
   1c3e0:	ldr	r0, [sp, #12]
   1c3e4:	bl	11938 <free@plt>
   1c3e8:	b	1c31c <__assert_fail@plt+0xa564>
   1c3ec:	mov	r4, #1
   1c3f0:	b	1c31c <__assert_fail@plt+0xa564>
   1c3f4:	ldr	r0, [r6]
   1c3f8:	bl	11938 <free@plt>
   1c3fc:	ldrd	r2, [sp, #12]
   1c400:	ldr	r1, [sp, #20]
   1c404:	str	r2, [r6]
   1c408:	str	r3, [r6, #4]
   1c40c:	ldr	r2, [sp, #24]
   1c410:	ldr	r3, [sp, #48]	; 0x30
   1c414:	str	r1, [r6, #8]
   1c418:	str	r2, [r6, #12]
   1c41c:	str	r3, [r6, #36]	; 0x24
   1c420:	b	1c31c <__assert_fail@plt+0xa564>
   1c424:	bl	119b0 <__stack_chk_fail@plt>
   1c428:	bl	11d64 <abort@plt>
   1c42c:	svcmi	0x00800000
   1c430:	andeq	r9, r3, r0, lsl #30
   1c434:	push	{r4, r5, r6, r7, lr}
   1c438:	sub	sp, sp, #12
   1c43c:	ldr	r6, [pc, #404]	; 1c5d8 <__assert_fail@plt+0xa820>
   1c440:	subs	r7, r1, #0
   1c444:	ldr	r3, [r6]
   1c448:	str	r3, [sp, #4]
   1c44c:	beq	1c5cc <__assert_fail@plt+0xa814>
   1c450:	mov	r5, r2
   1c454:	mov	r3, #0
   1c458:	mov	r2, sp
   1c45c:	mov	r4, r0
   1c460:	bl	1b770 <__assert_fail@plt+0x99b8>
   1c464:	cmp	r0, #0
   1c468:	beq	1c494 <__assert_fail@plt+0xa6dc>
   1c46c:	cmp	r5, #0
   1c470:	moveq	r0, r5
   1c474:	strne	r0, [r5]
   1c478:	movne	r0, #0
   1c47c:	ldr	r2, [sp, #4]
   1c480:	ldr	r3, [r6]
   1c484:	cmp	r2, r3
   1c488:	bne	1c5d0 <__assert_fail@plt+0xa818>
   1c48c:	add	sp, sp, #12
   1c490:	pop	{r4, r5, r6, r7, pc}
   1c494:	vldr	s15, [r4, #8]
   1c498:	ldr	r3, [r4, #20]
   1c49c:	vldr	s14, [r4, #12]
   1c4a0:	vcvt.f32.u32	s15, s15
   1c4a4:	vldr	s13, [r3, #8]
   1c4a8:	vcvt.f32.u32	s14, s14
   1c4ac:	vmul.f32	s15, s15, s13
   1c4b0:	vcmpe.f32	s14, s15
   1c4b4:	vmrs	APSR_nzcv, fpscr
   1c4b8:	bgt	1c504 <__assert_fail@plt+0xa74c>
   1c4bc:	ldr	r5, [sp]
   1c4c0:	ldr	r3, [r5]
   1c4c4:	cmp	r3, #0
   1c4c8:	beq	1c560 <__assert_fail@plt+0xa7a8>
   1c4cc:	ldr	r0, [r4, #36]	; 0x24
   1c4d0:	cmp	r0, #0
   1c4d4:	beq	1c584 <__assert_fail@plt+0xa7cc>
   1c4d8:	ldr	r3, [r0, #4]
   1c4dc:	str	r3, [r4, #36]	; 0x24
   1c4e0:	ldr	r3, [r4, #16]
   1c4e4:	ldr	r2, [r5, #4]
   1c4e8:	add	r3, r3, #1
   1c4ec:	str	r7, [r0]
   1c4f0:	str	r2, [r0, #4]
   1c4f4:	str	r0, [r5, #4]
   1c4f8:	mov	r0, #1
   1c4fc:	str	r3, [r4, #16]
   1c500:	b	1c47c <__assert_fail@plt+0xa6c4>
   1c504:	add	r0, r4, #20
   1c508:	bl	1b888 <__assert_fail@plt+0x9ad0>
   1c50c:	vldr	s15, [r4, #8]
   1c510:	ldr	r3, [r4, #20]
   1c514:	vldr	s14, [r4, #12]
   1c518:	vcvt.f32.u32	s15, s15
   1c51c:	vldr	s13, [r3, #8]
   1c520:	vcvt.f32.u32	s14, s14
   1c524:	vmul.f32	s12, s13, s15
   1c528:	vcmpe.f32	s14, s12
   1c52c:	vmrs	APSR_nzcv, fpscr
   1c530:	ble	1c4bc <__assert_fail@plt+0xa704>
   1c534:	vldr	s14, [r3, #12]
   1c538:	ldrb	r3, [r3, #16]
   1c53c:	vmul.f32	s15, s15, s14
   1c540:	cmp	r3, #0
   1c544:	vldr	s14, [pc, #136]	; 1c5d4 <__assert_fail@plt+0xa81c>
   1c548:	vmuleq.f32	s15, s15, s13
   1c54c:	vcmpe.f32	s15, s14
   1c550:	vmrs	APSR_nzcv, fpscr
   1c554:	blt	1c598 <__assert_fail@plt+0xa7e0>
   1c558:	mvn	r0, #0
   1c55c:	b	1c47c <__assert_fail@plt+0xa6c4>
   1c560:	ldr	r2, [r4, #16]
   1c564:	ldr	r3, [r4, #12]
   1c568:	add	r2, r2, #1
   1c56c:	add	r3, r3, #1
   1c570:	str	r7, [r5]
   1c574:	mov	r0, #1
   1c578:	str	r2, [r4, #16]
   1c57c:	str	r3, [r4, #12]
   1c580:	b	1c47c <__assert_fail@plt+0xa6c4>
   1c584:	mov	r0, #8
   1c588:	bl	11b30 <malloc@plt>
   1c58c:	cmp	r0, #0
   1c590:	beq	1c558 <__assert_fail@plt+0xa7a0>
   1c594:	b	1c4e0 <__assert_fail@plt+0xa728>
   1c598:	vcvt.u32.f32	s15, s15
   1c59c:	mov	r0, r4
   1c5a0:	vmov	r1, s15
   1c5a4:	bl	1c294 <__assert_fail@plt+0xa4dc>
   1c5a8:	cmp	r0, #0
   1c5ac:	beq	1c558 <__assert_fail@plt+0xa7a0>
   1c5b0:	mov	r2, sp
   1c5b4:	mov	r3, #0
   1c5b8:	mov	r1, r7
   1c5bc:	mov	r0, r4
   1c5c0:	bl	1b770 <__assert_fail@plt+0x99b8>
   1c5c4:	cmp	r0, #0
   1c5c8:	beq	1c4bc <__assert_fail@plt+0xa704>
   1c5cc:	bl	11d64 <abort@plt>
   1c5d0:	bl	119b0 <__stack_chk_fail@plt>
   1c5d4:	svcmi	0x00800000
   1c5d8:	andeq	r9, r3, r0, lsl #30
   1c5dc:	push	{r4, r5, lr}
   1c5e0:	sub	sp, sp, #12
   1c5e4:	ldr	r5, [pc, #68]	; 1c630 <__assert_fail@plt+0xa878>
   1c5e8:	mov	r2, sp
   1c5ec:	mov	r4, r1
   1c5f0:	ldr	r3, [r5]
   1c5f4:	str	r3, [sp, #4]
   1c5f8:	bl	1c434 <__assert_fail@plt+0xa67c>
   1c5fc:	cmn	r0, #1
   1c600:	moveq	r0, #0
   1c604:	beq	1c614 <__assert_fail@plt+0xa85c>
   1c608:	cmp	r0, #0
   1c60c:	movne	r0, r4
   1c610:	ldreq	r0, [sp]
   1c614:	ldr	r2, [sp, #4]
   1c618:	ldr	r3, [r5]
   1c61c:	cmp	r2, r3
   1c620:	bne	1c62c <__assert_fail@plt+0xa874>
   1c624:	add	sp, sp, #12
   1c628:	pop	{r4, r5, pc}
   1c62c:	bl	119b0 <__stack_chk_fail@plt>
   1c630:	andeq	r9, r3, r0, lsl #30
   1c634:	push	{r4, r5, r6, r7, lr}
   1c638:	sub	sp, sp, #12
   1c63c:	ldr	r5, [pc, #276]	; 1c758 <__assert_fail@plt+0xa9a0>
   1c640:	mov	r3, #1
   1c644:	mov	r2, sp
   1c648:	ldr	ip, [r5]
   1c64c:	mov	r4, r0
   1c650:	str	ip, [sp, #4]
   1c654:	bl	1b770 <__assert_fail@plt+0x99b8>
   1c658:	subs	r6, r0, #0
   1c65c:	beq	1c67c <__assert_fail@plt+0xa8c4>
   1c660:	ldr	r2, [sp]
   1c664:	ldr	r3, [r4, #16]
   1c668:	ldr	r2, [r2]
   1c66c:	sub	r3, r3, #1
   1c670:	cmp	r2, #0
   1c674:	str	r3, [r4, #16]
   1c678:	beq	1c698 <__assert_fail@plt+0xa8e0>
   1c67c:	ldr	r2, [sp, #4]
   1c680:	ldr	r3, [r5]
   1c684:	mov	r0, r6
   1c688:	cmp	r2, r3
   1c68c:	bne	1c754 <__assert_fail@plt+0xa99c>
   1c690:	add	sp, sp, #12
   1c694:	pop	{r4, r5, r6, r7, pc}
   1c698:	vldr	s15, [r4, #8]
   1c69c:	ldr	r3, [r4, #12]
   1c6a0:	ldr	r2, [r4, #20]
   1c6a4:	sub	r3, r3, #1
   1c6a8:	vcvt.f32.u32	s14, s15
   1c6ac:	vldr	s13, [r2]
   1c6b0:	vmov	s15, r3
   1c6b4:	str	r3, [r4, #12]
   1c6b8:	vcvt.f32.u32	s15, s15
   1c6bc:	vmul.f32	s14, s14, s13
   1c6c0:	vcmpe.f32	s15, s14
   1c6c4:	vmrs	APSR_nzcv, fpscr
   1c6c8:	bpl	1c67c <__assert_fail@plt+0xa8c4>
   1c6cc:	add	r0, r4, #20
   1c6d0:	bl	1b888 <__assert_fail@plt+0x9ad0>
   1c6d4:	vldr	s15, [r4, #8]
   1c6d8:	ldr	r3, [r4, #20]
   1c6dc:	vldr	s13, [r4, #12]
   1c6e0:	vcvt.f32.u32	s15, s15
   1c6e4:	vldr	s14, [r3]
   1c6e8:	vcvt.f32.u32	s13, s13
   1c6ec:	vmul.f32	s14, s15, s14
   1c6f0:	vcmpe.f32	s13, s14
   1c6f4:	vmrs	APSR_nzcv, fpscr
   1c6f8:	bpl	1c67c <__assert_fail@plt+0xa8c4>
   1c6fc:	vldr	s14, [r3, #4]
   1c700:	ldrb	r2, [r3, #16]
   1c704:	mov	r0, r4
   1c708:	vmul.f32	s15, s15, s14
   1c70c:	cmp	r2, #0
   1c710:	vldreq	s14, [r3, #8]
   1c714:	vmuleq.f32	s15, s15, s14
   1c718:	vcvt.u32.f32	s15, s15
   1c71c:	vmov	r1, s15
   1c720:	bl	1c294 <__assert_fail@plt+0xa4dc>
   1c724:	cmp	r0, #0
   1c728:	bne	1c67c <__assert_fail@plt+0xa8c4>
   1c72c:	ldr	r0, [r4, #36]	; 0x24
   1c730:	cmp	r0, #0
   1c734:	beq	1c748 <__assert_fail@plt+0xa990>
   1c738:	ldr	r7, [r0, #4]
   1c73c:	bl	11938 <free@plt>
   1c740:	subs	r0, r7, #0
   1c744:	bne	1c738 <__assert_fail@plt+0xa980>
   1c748:	mov	r3, #0
   1c74c:	str	r3, [r4, #36]	; 0x24
   1c750:	b	1c67c <__assert_fail@plt+0xa8c4>
   1c754:	bl	119b0 <__stack_chk_fail@plt>
   1c758:	andeq	r9, r3, r0, lsl #30
   1c75c:	push	{r4, r5, r6, lr}
   1c760:	mov	r4, r0
   1c764:	ldr	r0, [r0]
   1c768:	mov	r5, r1
   1c76c:	bl	241e0 <_obstack_memory_used@@Base+0x5f8>
   1c770:	ldr	ip, [r4, #8]
   1c774:	mov	r2, r5
   1c778:	ldr	r1, [r4, #12]
   1c77c:	mov	r3, #0
   1c780:	eor	r0, r0, ip
   1c784:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1c788:	mov	r0, r2
   1c78c:	pop	{r4, r5, r6, pc}
   1c790:	push	{r4, lr}
   1c794:	mov	r2, r1
   1c798:	mov	r3, #0
   1c79c:	ldrd	r0, [r0, #8]
   1c7a0:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1c7a4:	mov	r0, r2
   1c7a8:	pop	{r4, pc}
   1c7ac:	ldrd	r2, [r1, #8]
   1c7b0:	push	{r4, r5}
   1c7b4:	ldrd	r4, [r0, #8]
   1c7b8:	cmp	r5, r3
   1c7bc:	cmpeq	r4, r2
   1c7c0:	beq	1c7d0 <__assert_fail@plt+0xaa18>
   1c7c4:	mov	r0, #0
   1c7c8:	pop	{r4, r5}
   1c7cc:	bx	lr
   1c7d0:	ldrd	r4, [r0, #16]
   1c7d4:	ldrd	r2, [r1, #16]
   1c7d8:	cmp	r5, r3
   1c7dc:	cmpeq	r4, r2
   1c7e0:	bne	1c7c4 <__assert_fail@plt+0xaa0c>
   1c7e4:	ldr	r1, [r1]
   1c7e8:	ldr	r0, [r0]
   1c7ec:	pop	{r4, r5}
   1c7f0:	b	21c54 <__assert_fail@plt+0xfe9c>
   1c7f4:	ldrd	r2, [r1, #8]
   1c7f8:	push	{r4, r5, r6, lr}
   1c7fc:	ldrd	r4, [r0, #8]
   1c800:	cmp	r5, r3
   1c804:	cmpeq	r4, r2
   1c808:	beq	1c814 <__assert_fail@plt+0xaa5c>
   1c80c:	mov	r0, #0
   1c810:	pop	{r4, r5, r6, pc}
   1c814:	ldrd	r4, [r0, #16]
   1c818:	ldrd	r2, [r1, #16]
   1c81c:	cmp	r5, r3
   1c820:	cmpeq	r4, r2
   1c824:	bne	1c80c <__assert_fail@plt+0xaa54>
   1c828:	ldr	r1, [r1]
   1c82c:	ldr	r0, [r0]
   1c830:	bl	118d8 <strcmp@plt>
   1c834:	clz	r0, r0
   1c838:	lsr	r0, r0, #5
   1c83c:	pop	{r4, r5, r6, pc}
   1c840:	push	{r4, lr}
   1c844:	mov	r4, r0
   1c848:	ldr	r0, [r0]
   1c84c:	bl	11938 <free@plt>
   1c850:	mov	r0, r4
   1c854:	pop	{r4, lr}
   1c858:	b	11938 <free@plt>
   1c85c:	andeq	r0, r0, r0
   1c860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c864:	vpush	{d8-d9}
   1c868:	mov	r8, r3
   1c86c:	ands	r3, r3, #32
   1c870:	mov	r5, r2
   1c874:	sub	sp, sp, #124	; 0x7c
   1c878:	mov	r7, r1
   1c87c:	str	r3, [sp, #32]
   1c880:	ldr	r3, [pc, #1360]	; 1cdd8 <__assert_fail@plt+0xb020>
   1c884:	str	r2, [sp, #24]
   1c888:	movne	r2, #1024	; 0x400
   1c88c:	ldr	r3, [r3]
   1c890:	moveq	r2, #1000	; 0x3e8
   1c894:	str	r2, [sp, #28]
   1c898:	str	r3, [sp, #116]	; 0x74
   1c89c:	mov	r6, r0
   1c8a0:	bl	11ce0 <localeconv@plt>
   1c8a4:	add	r3, r5, #644	; 0x284
   1c8a8:	str	r3, [sp, #48]	; 0x30
   1c8ac:	add	r3, r3, #3
   1c8b0:	str	r3, [sp, #12]
   1c8b4:	ldr	r2, [r0]
   1c8b8:	mov	r4, r0
   1c8bc:	mov	r0, r2
   1c8c0:	mov	r5, r2
   1c8c4:	bl	11bf0 <strlen@plt>
   1c8c8:	ldr	r9, [r4, #4]
   1c8cc:	ldr	r3, [pc, #1288]	; 1cddc <__assert_fail@plt+0xb024>
   1c8d0:	sub	r2, r0, #1
   1c8d4:	cmp	r2, #16
   1c8d8:	movcc	r3, r5
   1c8dc:	mov	fp, r0
   1c8e0:	mov	r0, r9
   1c8e4:	movcs	fp, #1
   1c8e8:	str	r3, [sp, #36]	; 0x24
   1c8ec:	bl	11bf0 <strlen@plt>
   1c8f0:	ldr	r3, [pc, #1256]	; 1cde0 <__assert_fail@plt+0xb028>
   1c8f4:	and	r2, r8, #3
   1c8f8:	str	r2, [sp, #16]
   1c8fc:	ldr	sl, [r4, #8]
   1c900:	cmp	r0, #16
   1c904:	movhi	r9, r3
   1c908:	ldrd	r0, [sp, #176]	; 0xb0
   1c90c:	ldrd	r2, [sp, #184]	; 0xb8
   1c910:	cmp	r3, r1
   1c914:	cmpeq	r2, r0
   1c918:	bhi	1cbb0 <__assert_fail@plt+0xadf8>
   1c91c:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1c920:	orrs	r3, r2, r3
   1c924:	bne	1c958 <__assert_fail@plt+0xaba0>
   1c928:	mul	r2, r0, r7
   1c92c:	umull	r4, r5, r0, r6
   1c930:	mla	r2, r6, r1, r2
   1c934:	mov	r3, r1
   1c938:	add	r5, r2, r5
   1c93c:	mov	r1, r5
   1c940:	mov	r2, r0
   1c944:	mov	r0, r4
   1c948:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1c94c:	cmp	r1, r7
   1c950:	cmpeq	r0, r6
   1c954:	beq	1cf14 <__assert_fail@plt+0xb15c>
   1c958:	ldrd	r0, [sp, #176]	; 0xb0
   1c95c:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1c960:	vmov	d9, r0, r1
   1c964:	ldrd	r0, [sp, #184]	; 0xb8
   1c968:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1c96c:	vmov	d7, r0, r1
   1c970:	mov	r0, r6
   1c974:	mov	r1, r7
   1c978:	vdiv.f64	d8, d9, d7
   1c97c:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1c980:	tst	r8, #16
   1c984:	vmov	d7, r0, r1
   1c988:	vmul.f64	d8, d8, d7
   1c98c:	beq	1caf8 <__assert_fail@plt+0xad40>
   1c990:	vldr	s15, [sp, #28]
   1c994:	mov	r6, #0
   1c998:	vcvt.f64.s32	d6, s15
   1c99c:	vmov.f64	d7, d6
   1c9a0:	vmov.f64	d5, d7
   1c9a4:	vmul.f64	d7, d7, d6
   1c9a8:	add	r6, r6, #1
   1c9ac:	vcmpe.f64	d7, d8
   1c9b0:	vmrs	APSR_nzcv, fpscr
   1c9b4:	bhi	1c9c0 <__assert_fail@plt+0xac08>
   1c9b8:	cmp	r6, #8
   1c9bc:	bne	1c9a0 <__assert_fail@plt+0xabe8>
   1c9c0:	ldr	r3, [sp, #32]
   1c9c4:	clz	r4, r3
   1c9c8:	ldr	r3, [sp, #16]
   1c9cc:	lsr	r4, r4, #5
   1c9d0:	add	fp, fp, #1
   1c9d4:	add	r4, r4, #1
   1c9d8:	cmp	r3, #1
   1c9dc:	vdiv.f64	d9, d8, d5
   1c9e0:	add	r4, r4, fp
   1c9e4:	beq	1cfd0 <__assert_fail@plt+0xb218>
   1c9e8:	vldr	d7, [pc, #984]	; 1cdc8 <__assert_fail@plt+0xb010>
   1c9ec:	vcmpe.f64	d9, d7
   1c9f0:	vmrs	APSR_nzcv, fpscr
   1c9f4:	vmovpl.f64	d7, d9
   1c9f8:	bpl	1ca3c <__assert_fail@plt+0xac84>
   1c9fc:	vmov	r0, r1, d9
   1ca00:	bl	24d20 <_obstack_memory_used@@Base+0x1138>
   1ca04:	mov	r5, r0
   1ca08:	mov	r7, r1
   1ca0c:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1ca10:	ldr	r3, [sp, #16]
   1ca14:	cmp	r3, #0
   1ca18:	vmov	d7, r0, r1
   1ca1c:	bne	1ca3c <__assert_fail@plt+0xac84>
   1ca20:	vcmp.f64	d9, d7
   1ca24:	vmrs	APSR_nzcv, fpscr
   1ca28:	beq	1ca3c <__assert_fail@plt+0xac84>
   1ca2c:	adds	r0, r5, #1
   1ca30:	adc	r1, r7, #0
   1ca34:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1ca38:	vmov	d7, r0, r1
   1ca3c:	ldr	r5, [sp, #24]
   1ca40:	vstr	d7, [sp]
   1ca44:	ldr	r3, [pc, #928]	; 1cdec <__assert_fail@plt+0xb034>
   1ca48:	mvn	r2, #0
   1ca4c:	mov	r1, #1
   1ca50:	mov	r0, r5
   1ca54:	bl	11c20 <__sprintf_chk@plt>
   1ca58:	mov	r0, r5
   1ca5c:	bl	11bf0 <strlen@plt>
   1ca60:	cmp	r0, r4
   1ca64:	bls	1ceac <__assert_fail@plt+0xb0f4>
   1ca68:	vldr	d7, [pc, #864]	; 1cdd0 <__assert_fail@plt+0xb018>
   1ca6c:	vmul.f64	d9, d9, d7
   1ca70:	vldr	d7, [pc, #848]	; 1cdc8 <__assert_fail@plt+0xb010>
   1ca74:	vcmpe.f64	d9, d7
   1ca78:	vmrs	APSR_nzcv, fpscr
   1ca7c:	bpl	1cac4 <__assert_fail@plt+0xad0c>
   1ca80:	vmov	r0, r1, d9
   1ca84:	bl	24d20 <_obstack_memory_used@@Base+0x1138>
   1ca88:	mov	r4, r0
   1ca8c:	mov	r5, r1
   1ca90:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1ca94:	ldr	r3, [sp, #16]
   1ca98:	cmp	r3, #0
   1ca9c:	vmov	d7, r0, r1
   1caa0:	bne	1cac0 <__assert_fail@plt+0xad08>
   1caa4:	vcmp.f64	d9, d7
   1caa8:	vmrs	APSR_nzcv, fpscr
   1caac:	beq	1cac0 <__assert_fail@plt+0xad08>
   1cab0:	adds	r0, r4, #1
   1cab4:	adc	r1, r5, #0
   1cab8:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1cabc:	vmov	d7, r0, r1
   1cac0:	vmov.f64	d9, d7
   1cac4:	vldr	d6, [pc, #772]	; 1cdd0 <__assert_fail@plt+0xb018>
   1cac8:	ldr	r4, [sp, #24]
   1cacc:	ldr	r3, [pc, #784]	; 1cde4 <__assert_fail@plt+0xb02c>
   1cad0:	mvn	r2, #0
   1cad4:	vdiv.f64	d7, d9, d6
   1cad8:	mov	r1, #1
   1cadc:	mov	r0, r4
   1cae0:	vstr	d7, [sp]
   1cae4:	bl	11c20 <__sprintf_chk@plt>
   1cae8:	mov	r0, r4
   1caec:	bl	11bf0 <strlen@plt>
   1caf0:	mov	r7, r0
   1caf4:	b	1cb40 <__assert_fail@plt+0xad88>
   1caf8:	and	r6, r8, #3
   1cafc:	cmp	r6, #1
   1cb00:	beq	1cb14 <__assert_fail@plt+0xad5c>
   1cb04:	vldr	d7, [pc, #700]	; 1cdc8 <__assert_fail@plt+0xb010>
   1cb08:	vcmpe.f64	d8, d7
   1cb0c:	vmrs	APSR_nzcv, fpscr
   1cb10:	bmi	1ced0 <__assert_fail@plt+0xb118>
   1cb14:	ldr	r4, [sp, #24]
   1cb18:	ldr	r3, [pc, #708]	; 1cde4 <__assert_fail@plt+0xb02c>
   1cb1c:	mvn	r2, #0
   1cb20:	mov	r1, #1
   1cb24:	vstr	d8, [sp]
   1cb28:	mov	r0, r4
   1cb2c:	bl	11c20 <__sprintf_chk@plt>
   1cb30:	mov	r0, r4
   1cb34:	bl	11bf0 <strlen@plt>
   1cb38:	mvn	r6, #0
   1cb3c:	mov	r7, r0
   1cb40:	ldr	r3, [sp, #12]
   1cb44:	mov	r2, r0
   1cb48:	sub	fp, r3, r0
   1cb4c:	mov	r0, fp
   1cb50:	ldr	r1, [sp, #24]
   1cb54:	add	r7, fp, r7
   1cb58:	bl	1192c <memmove@plt>
   1cb5c:	tst	r8, #4
   1cb60:	bne	1cd20 <__assert_fail@plt+0xaf68>
   1cb64:	tst	r8, #128	; 0x80
   1cb68:	beq	1cb80 <__assert_fail@plt+0xadc8>
   1cb6c:	cmn	r6, #1
   1cb70:	beq	1cdf0 <__assert_fail@plt+0xb038>
   1cb74:	and	r3, r8, #256	; 0x100
   1cb78:	orrs	r2, r3, r6
   1cb7c:	bne	1d058 <__assert_fail@plt+0xb2a0>
   1cb80:	ldr	r2, [sp, #12]
   1cb84:	mov	r3, #0
   1cb88:	mov	r0, fp
   1cb8c:	strb	r3, [r2]
   1cb90:	ldr	r3, [pc, #576]	; 1cdd8 <__assert_fail@plt+0xb020>
   1cb94:	ldr	r2, [sp, #116]	; 0x74
   1cb98:	ldr	r3, [r3]
   1cb9c:	cmp	r2, r3
   1cba0:	bne	1d224 <__assert_fail@plt+0xb46c>
   1cba4:	add	sp, sp, #124	; 0x7c
   1cba8:	vpop	{d8-d9}
   1cbac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbb0:	ldrd	r2, [sp, #176]	; 0xb0
   1cbb4:	orrs	r3, r2, r3
   1cbb8:	beq	1c958 <__assert_fail@plt+0xaba0>
   1cbbc:	ldrd	r2, [sp, #176]	; 0xb0
   1cbc0:	ldrd	r0, [sp, #184]	; 0xb8
   1cbc4:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1cbc8:	orrs	r3, r2, r3
   1cbcc:	mov	r4, r0
   1cbd0:	mov	r5, r1
   1cbd4:	bne	1c958 <__assert_fail@plt+0xaba0>
   1cbd8:	mov	r0, r6
   1cbdc:	mov	r1, r7
   1cbe0:	mov	r2, r4
   1cbe4:	mov	r3, r5
   1cbe8:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1cbec:	strd	r0, [sp, #52]	; 0x34
   1cbf0:	lsl	r0, r2, #2
   1cbf4:	lsl	r1, r3, #2
   1cbf8:	adds	r0, r0, r2
   1cbfc:	orr	r1, r1, r2, lsr #30
   1cc00:	adc	r1, r1, r3
   1cc04:	adds	r0, r0, r0
   1cc08:	adc	r1, r1, r1
   1cc0c:	mov	r2, r4
   1cc10:	mov	r3, r5
   1cc14:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1cc18:	adds	r1, r2, r2
   1cc1c:	adc	r3, r3, r3
   1cc20:	str	r3, [sp, #44]	; 0x2c
   1cc24:	str	r1, [sp, #40]	; 0x28
   1cc28:	ldrd	r6, [sp, #40]	; 0x28
   1cc2c:	mov	r3, r5
   1cc30:	mov	lr, r0
   1cc34:	cmp	r5, r7
   1cc38:	cmpeq	r4, r6
   1cc3c:	ldrd	r4, [sp, #52]	; 0x34
   1cc40:	bls	1d044 <__assert_fail@plt+0xb28c>
   1cc44:	mov	r3, r6
   1cc48:	orrs	r3, r3, r7
   1cc4c:	movne	r3, #1
   1cc50:	moveq	r3, #0
   1cc54:	mov	ip, r3
   1cc58:	ands	r3, r8, #16
   1cc5c:	str	r3, [sp, #52]	; 0x34
   1cc60:	beq	1cf2c <__assert_fail@plt+0xb174>
   1cc64:	ldr	r1, [sp, #28]
   1cc68:	mov	r3, #0
   1cc6c:	mov	r2, r1
   1cc70:	cmp	r3, r5
   1cc74:	cmpeq	r1, r4
   1cc78:	strd	r2, [sp, #40]	; 0x28
   1cc7c:	mov	r6, #0
   1cc80:	bhi	1cf30 <__assert_fail@plt+0xb178>
   1cc84:	str	r9, [sp, #56]	; 0x38
   1cc88:	str	r8, [sp, #68]	; 0x44
   1cc8c:	mov	r7, ip
   1cc90:	str	fp, [sp, #60]	; 0x3c
   1cc94:	mov	r9, r1
   1cc98:	str	sl, [sp, #64]	; 0x40
   1cc9c:	mov	r8, lr
   1cca0:	b	1ccc8 <__assert_fail@plt+0xaf10>
   1cca4:	adds	r7, r7, #0
   1cca8:	movne	r7, #1
   1ccac:	ldrd	r2, [sp, #40]	; 0x28
   1ccb0:	add	r6, r6, #1
   1ccb4:	cmp	r3, fp
   1ccb8:	cmpeq	r2, sl
   1ccbc:	bhi	1d0c8 <__assert_fail@plt+0xb310>
   1ccc0:	cmp	r6, #8
   1ccc4:	beq	1d090 <__assert_fail@plt+0xb2d8>
   1ccc8:	mov	r0, r4
   1cccc:	mov	r1, r5
   1ccd0:	ldrd	r2, [sp, #40]	; 0x28
   1ccd4:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1ccd8:	add	r2, r2, r2, lsl #2
   1ccdc:	mov	sl, r0
   1cce0:	mov	fp, r1
   1cce4:	add	r0, r8, r2, lsl #1
   1cce8:	mov	r1, r9
   1ccec:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   1ccf0:	asr	r3, r7, #1
   1ccf4:	mov	r4, sl
   1ccf8:	mov	r5, fp
   1ccfc:	add	r1, r3, r1, lsl #1
   1cd00:	cmp	r9, r1
   1cd04:	mov	r8, r0
   1cd08:	add	r7, r7, r1
   1cd0c:	bhi	1cca4 <__assert_fail@plt+0xaeec>
   1cd10:	cmp	r9, r7
   1cd14:	movcc	r7, #3
   1cd18:	movcs	r7, #2
   1cd1c:	b	1ccac <__assert_fail@plt+0xaef4>
   1cd20:	mov	r0, r9
   1cd24:	bl	11bf0 <strlen@plt>
   1cd28:	sub	r4, r7, fp
   1cd2c:	add	r3, sp, #72	; 0x48
   1cd30:	mov	r1, fp
   1cd34:	mov	r2, r4
   1cd38:	mvn	r5, #0
   1cd3c:	str	r0, [sp, #16]
   1cd40:	mov	r0, r3
   1cd44:	mov	r3, #41	; 0x29
   1cd48:	bl	11a58 <__memcpy_chk@plt>
   1cd4c:	ldr	fp, [sp, #16]
   1cd50:	ldrb	r3, [sl]
   1cd54:	cmp	r3, #0
   1cd58:	beq	1cd6c <__assert_fail@plt+0xafb4>
   1cd5c:	cmp	r3, #255	; 0xff
   1cd60:	movne	r5, r3
   1cd64:	moveq	r5, r4
   1cd68:	add	sl, sl, #1
   1cd6c:	cmp	r5, r4
   1cd70:	bls	1cd8c <__assert_fail@plt+0xafd4>
   1cd74:	sub	fp, r7, r4
   1cd78:	mov	r2, r4
   1cd7c:	add	r1, sp, #72	; 0x48
   1cd80:	mov	r0, fp
   1cd84:	bl	1195c <memcpy@plt>
   1cd88:	b	1cb64 <__assert_fail@plt+0xadac>
   1cd8c:	sub	r4, r4, r5
   1cd90:	add	r3, sp, #72	; 0x48
   1cd94:	sub	r7, r7, r5
   1cd98:	add	r1, r3, r4
   1cd9c:	mov	r0, r7
   1cda0:	mov	r2, r5
   1cda4:	bl	1195c <memcpy@plt>
   1cda8:	cmp	r4, #0
   1cdac:	beq	1d228 <__assert_fail@plt+0xb470>
   1cdb0:	sub	r7, r7, fp
   1cdb4:	mov	r0, r7
   1cdb8:	mov	r2, fp
   1cdbc:	mov	r1, r9
   1cdc0:	bl	1195c <memcpy@plt>
   1cdc4:	b	1cd50 <__assert_fail@plt+0xaf98>
   1cdc8:	andeq	r0, r0, r0
   1cdcc:	mvnsmi	r0, #0
   1cdd0:	andeq	r0, r0, r0
   1cdd4:	eormi	r0, r4, r0
   1cdd8:	andeq	r9, r3, r0, lsl #30
   1cddc:	muleq	r2, r4, r8
   1cde0:	ldrdeq	r7, [r2], -r0
   1cde4:	andeq	r8, r2, r0, ror #29
   1cde8:	andeq	r8, r2, r0, asr #29
   1cdec:	andeq	r8, r2, r8, ror #29
   1cdf0:	ldrd	r2, [sp, #184]	; 0xb8
   1cdf4:	cmp	r3, #0
   1cdf8:	cmpeq	r2, #1
   1cdfc:	bls	1d088 <__assert_fail@plt+0xb2d0>
   1ce00:	ldr	r1, [sp, #28]
   1ce04:	ldrd	r4, [sp, #184]	; 0xb8
   1ce08:	mov	r6, #1
   1ce0c:	mov	r2, #1
   1ce10:	mov	r3, #0
   1ce14:	mul	r0, r1, r3
   1ce18:	umull	r2, r3, r2, r1
   1ce1c:	add	r3, r0, r3
   1ce20:	cmp	r5, r3
   1ce24:	cmpeq	r4, r2
   1ce28:	bls	1ce38 <__assert_fail@plt+0xb080>
   1ce2c:	add	r6, r6, #1
   1ce30:	cmp	r6, #8
   1ce34:	bne	1ce14 <__assert_fail@plt+0xb05c>
   1ce38:	tst	r8, #64	; 0x40
   1ce3c:	and	r3, r8, #256	; 0x100
   1ce40:	beq	1ce60 <__assert_fail@plt+0xb0a8>
   1ce44:	ldr	r1, [sp, #24]
   1ce48:	add	r2, r1, #648	; 0x288
   1ce4c:	str	r2, [sp, #12]
   1ce50:	mov	r2, #32
   1ce54:	strb	r2, [r1, #647]	; 0x287
   1ce58:	cmp	r6, #0
   1ce5c:	beq	1d230 <__assert_fail@plt+0xb478>
   1ce60:	ldr	r0, [sp, #32]
   1ce64:	cmp	r6, #1
   1ce68:	cmpeq	r0, #0
   1ce6c:	beq	1d0ac <__assert_fail@plt+0xb2f4>
   1ce70:	ldr	r1, [pc, #-144]	; 1cde8 <__assert_fail@plt+0xb030>
   1ce74:	cmp	r3, #0
   1ce78:	ldr	r2, [sp, #12]
   1ce7c:	ldrb	r3, [r1, r6]
   1ce80:	strb	r3, [r2], #1
   1ce84:	beq	1d0c0 <__assert_fail@plt+0xb308>
   1ce88:	cmp	r0, #0
   1ce8c:	movne	r3, #105	; 0x69
   1ce90:	ldrne	r2, [sp, #12]
   1ce94:	strbne	r3, [r2, #1]
   1ce98:	addne	r2, r2, #2
   1ce9c:	mov	r3, #66	; 0x42
   1cea0:	strb	r3, [r2], #1
   1cea4:	str	r2, [sp, #12]
   1cea8:	b	1cb80 <__assert_fail@plt+0xadc8>
   1ceac:	tst	r8, #8
   1ceb0:	beq	1cec8 <__assert_fail@plt+0xb110>
   1ceb4:	ldr	r3, [sp, #24]
   1ceb8:	add	r3, r3, r0
   1cebc:	ldrb	r3, [r3, #-1]
   1cec0:	cmp	r3, #48	; 0x30
   1cec4:	beq	1d180 <__assert_fail@plt+0xb3c8>
   1cec8:	sub	r7, r0, fp
   1cecc:	b	1cb40 <__assert_fail@plt+0xad88>
   1ced0:	vmov	r0, r1, d8
   1ced4:	bl	24d20 <_obstack_memory_used@@Base+0x1138>
   1ced8:	mov	r4, r0
   1cedc:	mov	r5, r1
   1cee0:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1cee4:	cmp	r6, #0
   1cee8:	vmov	d7, r0, r1
   1ceec:	bne	1cf0c <__assert_fail@plt+0xb154>
   1cef0:	vcmp.f64	d8, d7
   1cef4:	vmrs	APSR_nzcv, fpscr
   1cef8:	beq	1cf0c <__assert_fail@plt+0xb154>
   1cefc:	adds	r0, r4, #1
   1cf00:	adc	r1, r5, #0
   1cf04:	bl	24b88 <_obstack_memory_used@@Base+0xfa0>
   1cf08:	vmov	d7, r0, r1
   1cf0c:	vmov.f64	d8, d7
   1cf10:	b	1cb14 <__assert_fail@plt+0xad5c>
   1cf14:	mov	r3, #0
   1cf18:	mov	ip, r3
   1cf1c:	mov	lr, r3
   1cf20:	ands	r3, r8, #16
   1cf24:	str	r3, [sp, #52]	; 0x34
   1cf28:	bne	1cc64 <__assert_fail@plt+0xaeac>
   1cf2c:	mvn	r6, #0
   1cf30:	ldr	r3, [sp, #16]
   1cf34:	cmp	r3, #1
   1cf38:	ldrne	r7, [sp, #12]
   1cf3c:	beq	1d008 <__assert_fail@plt+0xb250>
   1cf40:	ldr	r3, [sp, #16]
   1cf44:	cmp	r3, #0
   1cf48:	bne	1cf80 <__assert_fail@plt+0xb1c8>
   1cf4c:	add	r3, lr, ip
   1cf50:	cmp	r3, #0
   1cf54:	ble	1cf80 <__assert_fail@plt+0xb1c8>
   1cf58:	ldr	r3, [sp, #52]	; 0x34
   1cf5c:	adds	r4, r4, #1
   1cf60:	adc	r5, r5, #0
   1cf64:	cmp	r3, #0
   1cf68:	beq	1cf80 <__assert_fail@plt+0xb1c8>
   1cf6c:	ldr	r2, [sp, #28]
   1cf70:	mov	r3, #0
   1cf74:	cmp	r3, r5
   1cf78:	cmpeq	r2, r4
   1cf7c:	beq	1d064 <__assert_fail@plt+0xb2ac>
   1cf80:	mov	fp, r7
   1cf84:	b	1cf90 <__assert_fail@plt+0xb1d8>
   1cf88:	mov	r4, r0
   1cf8c:	mov	r5, r1
   1cf90:	mov	r2, #10
   1cf94:	mov	r3, #0
   1cf98:	mov	r0, r4
   1cf9c:	mov	r1, r5
   1cfa0:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1cfa4:	mov	r0, r4
   1cfa8:	mov	r1, r5
   1cfac:	mov	r3, #0
   1cfb0:	add	r2, r2, #48	; 0x30
   1cfb4:	strb	r2, [fp, #-1]!
   1cfb8:	mov	r2, #10
   1cfbc:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1cfc0:	cmp	r5, #0
   1cfc4:	cmpeq	r4, #9
   1cfc8:	bhi	1cf88 <__assert_fail@plt+0xb1d0>
   1cfcc:	b	1cb5c <__assert_fail@plt+0xada4>
   1cfd0:	ldr	r5, [sp, #24]
   1cfd4:	ldr	r3, [pc, #-496]	; 1cdec <__assert_fail@plt+0xb034>
   1cfd8:	mvn	r2, #0
   1cfdc:	ldr	r1, [sp, #16]
   1cfe0:	vstr	d9, [sp]
   1cfe4:	mov	r0, r5
   1cfe8:	bl	11c20 <__sprintf_chk@plt>
   1cfec:	mov	r0, r5
   1cff0:	bl	11bf0 <strlen@plt>
   1cff4:	cmp	r0, r4
   1cff8:	bls	1ceac <__assert_fail@plt+0xb0f4>
   1cffc:	vldr	d7, [pc, #572]	; 1d240 <__assert_fail@plt+0xb488>
   1d000:	vmul.f64	d9, d9, d7
   1d004:	b	1cac4 <__assert_fail@plt+0xad0c>
   1d008:	and	r3, r4, #1
   1d00c:	str	r3, [sp, #16]
   1d010:	mov	r3, #0
   1d014:	str	r3, [sp, #20]
   1d018:	ldrd	r2, [sp, #16]
   1d01c:	ldr	r7, [sp, #12]
   1d020:	adds	r2, r2, ip
   1d024:	adc	r3, r3, ip, asr #31
   1d028:	orr	r2, r2, r3
   1d02c:	mov	r3, lr
   1d030:	cmp	r2, #0
   1d034:	addne	r3, r3, #1
   1d038:	cmp	r3, #5
   1d03c:	bgt	1cf58 <__assert_fail@plt+0xb1a0>
   1d040:	b	1cf80 <__assert_fail@plt+0xb1c8>
   1d044:	movcs	r3, #2
   1d048:	movcs	ip, r3
   1d04c:	movcc	r3, #3
   1d050:	movcc	ip, r3
   1d054:	b	1cc58 <__assert_fail@plt+0xaea0>
   1d058:	tst	r8, #64	; 0x40
   1d05c:	beq	1ce58 <__assert_fail@plt+0xb0a0>
   1d060:	b	1ce44 <__assert_fail@plt+0xb08c>
   1d064:	cmp	r6, #8
   1d068:	beq	1cf80 <__assert_fail@plt+0xb1c8>
   1d06c:	tst	r8, #8
   1d070:	add	r6, r6, #1
   1d074:	beq	1d1f0 <__assert_fail@plt+0xb438>
   1d078:	mov	r3, #49	; 0x31
   1d07c:	strb	r3, [r7, #-1]
   1d080:	sub	fp, r7, #1
   1d084:	b	1cb5c <__assert_fail@plt+0xada4>
   1d088:	mov	r6, #0
   1d08c:	b	1cb74 <__assert_fail@plt+0xadbc>
   1d090:	mov	lr, r8
   1d094:	ldr	r9, [sp, #56]	; 0x38
   1d098:	mov	ip, r7
   1d09c:	ldr	fp, [sp, #60]	; 0x3c
   1d0a0:	ldr	sl, [sp, #64]	; 0x40
   1d0a4:	ldr	r8, [sp, #68]	; 0x44
   1d0a8:	b	1cf30 <__assert_fail@plt+0xb178>
   1d0ac:	ldr	r2, [sp, #12]
   1d0b0:	cmp	r3, #0
   1d0b4:	mov	r3, #107	; 0x6b
   1d0b8:	strb	r3, [r2], #1
   1d0bc:	bne	1ce9c <__assert_fail@plt+0xb0e4>
   1d0c0:	str	r2, [sp, #12]
   1d0c4:	b	1cb80 <__assert_fail@plt+0xadc8>
   1d0c8:	mov	r3, fp
   1d0cc:	mov	r2, sl
   1d0d0:	cmp	r3, #0
   1d0d4:	cmpeq	r2, #9
   1d0d8:	mov	lr, r8
   1d0dc:	ldr	r9, [sp, #56]	; 0x38
   1d0e0:	mov	ip, r7
   1d0e4:	strd	r2, [sp, #40]	; 0x28
   1d0e8:	ldr	fp, [sp, #60]	; 0x3c
   1d0ec:	ldr	sl, [sp, #64]	; 0x40
   1d0f0:	ldr	r8, [sp, #68]	; 0x44
   1d0f4:	bhi	1cf30 <__assert_fail@plt+0xb178>
   1d0f8:	ldr	r3, [sp, #16]
   1d0fc:	cmp	r3, #1
   1d100:	beq	1d1ac <__assert_fail@plt+0xb3f4>
   1d104:	ldr	r2, [sp, #16]
   1d108:	adds	r3, r7, #0
   1d10c:	movne	r3, #1
   1d110:	cmp	r2, #0
   1d114:	movne	r3, #0
   1d118:	cmp	r3, #0
   1d11c:	bne	1d198 <__assert_fail@plt+0xb3e0>
   1d120:	cmp	r0, #0
   1d124:	addne	r3, r0, #48	; 0x30
   1d128:	uxtbne	r3, r3
   1d12c:	bne	1d13c <__assert_fail@plt+0xb384>
   1d130:	tst	r8, #8
   1d134:	bne	1d1c4 <__assert_fail@plt+0xb40c>
   1d138:	mov	r3, #48	; 0x30
   1d13c:	ldr	r2, [sp, #48]	; 0x30
   1d140:	ldr	r1, [sp, #36]	; 0x24
   1d144:	add	r7, r2, #2
   1d148:	ldr	r2, [sp, #24]
   1d14c:	sub	r7, r7, fp
   1d150:	mov	r0, r7
   1d154:	strb	r3, [r2, #646]	; 0x286
   1d158:	mov	r2, fp
   1d15c:	bl	1195c <memcpy@plt>
   1d160:	mov	r3, #0
   1d164:	mov	ip, r3
   1d168:	ldr	r3, [sp, #16]
   1d16c:	cmp	r3, #1
   1d170:	beq	1cf80 <__assert_fail@plt+0xb1c8>
   1d174:	mov	r3, #0
   1d178:	mov	lr, r3
   1d17c:	b	1cf40 <__assert_fail@plt+0xb188>
   1d180:	vldr	d7, [pc, #184]	; 1d240 <__assert_fail@plt+0xb488>
   1d184:	ldr	r3, [sp, #16]
   1d188:	cmp	r3, #1
   1d18c:	vmul.f64	d9, d9, d7
   1d190:	bne	1ca70 <__assert_fail@plt+0xacb8>
   1d194:	b	1cac4 <__assert_fail@plt+0xad0c>
   1d198:	cmp	r0, #9
   1d19c:	beq	1d1cc <__assert_fail@plt+0xb414>
   1d1a0:	add	r3, r0, #49	; 0x31
   1d1a4:	uxtb	r3, r3
   1d1a8:	b	1d13c <__assert_fail@plt+0xb384>
   1d1ac:	and	r3, r0, #1
   1d1b0:	add	r3, r3, r7
   1d1b4:	cmp	r3, #2
   1d1b8:	movle	r3, #0
   1d1bc:	movgt	r3, #1
   1d1c0:	b	1d118 <__assert_fail@plt+0xb360>
   1d1c4:	ldr	r7, [sp, #12]
   1d1c8:	b	1d168 <__assert_fail@plt+0xb3b0>
   1d1cc:	ldrd	r2, [sp, #40]	; 0x28
   1d1d0:	adds	r4, r2, #1
   1d1d4:	adc	r5, r3, #0
   1d1d8:	cmp	r5, #0
   1d1dc:	cmpeq	r4, #10
   1d1e0:	beq	1d214 <__assert_fail@plt+0xb45c>
   1d1e4:	mov	r3, #0
   1d1e8:	mov	ip, r3
   1d1ec:	b	1d130 <__assert_fail@plt+0xb378>
   1d1f0:	mov	r2, #48	; 0x30
   1d1f4:	mvn	r3, fp
   1d1f8:	strb	r2, [r7, #-1]
   1d1fc:	add	r7, r7, r3
   1d200:	ldr	r1, [sp, #36]	; 0x24
   1d204:	mov	r2, fp
   1d208:	mov	r0, r7
   1d20c:	bl	1195c <memcpy@plt>
   1d210:	b	1d078 <__assert_fail@plt+0xb2c0>
   1d214:	mov	r3, #0
   1d218:	ldr	r7, [sp, #12]
   1d21c:	mov	ip, r3
   1d220:	b	1d168 <__assert_fail@plt+0xb3b0>
   1d224:	bl	119b0 <__stack_chk_fail@plt>
   1d228:	mov	fp, r7
   1d22c:	b	1cb64 <__assert_fail@plt+0xadac>
   1d230:	cmp	r3, #0
   1d234:	ldrne	r2, [sp, #12]
   1d238:	bne	1ce9c <__assert_fail@plt+0xb0e4>
   1d23c:	b	1cb80 <__assert_fail@plt+0xadc8>
   1d240:	andeq	r0, r0, r0
   1d244:	eormi	r0, r4, r0
   1d248:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d24c:	sub	sp, sp, #20
   1d250:	ldr	r6, [pc, #424]	; 1d400 <__assert_fail@plt+0xb648>
   1d254:	subs	r4, r0, #0
   1d258:	mov	r9, r1
   1d25c:	ldr	r3, [r6]
   1d260:	mov	r7, r2
   1d264:	str	r3, [sp, #12]
   1d268:	beq	1d378 <__assert_fail@plt+0xb5c0>
   1d26c:	ldrb	r3, [r4]
   1d270:	ldr	r5, [pc, #396]	; 1d404 <__assert_fail@plt+0xb64c>
   1d274:	cmp	r3, #39	; 0x27
   1d278:	addeq	r4, r4, #1
   1d27c:	mov	r3, #4
   1d280:	add	r2, r5, #12
   1d284:	add	r1, r5, #20
   1d288:	mov	r0, r4
   1d28c:	moveq	r8, #4
   1d290:	movne	r8, #0
   1d294:	bl	1a150 <__assert_fail@plt+0x8398>
   1d298:	cmp	r0, #0
   1d29c:	blt	1d2d8 <__assert_fail@plt+0xb520>
   1d2a0:	add	r5, r5, r0, lsl #2
   1d2a4:	mov	r2, #1
   1d2a8:	ldr	r1, [r5, #12]
   1d2ac:	mov	r3, #0
   1d2b0:	mov	r0, #0
   1d2b4:	orr	r8, r8, r1
   1d2b8:	strd	r2, [r7]
   1d2bc:	str	r8, [r9]
   1d2c0:	ldr	r2, [sp, #12]
   1d2c4:	ldr	r3, [r6]
   1d2c8:	cmp	r2, r3
   1d2cc:	bne	1d3fc <__assert_fail@plt+0xb644>
   1d2d0:	add	sp, sp, #20
   1d2d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d2d8:	ldr	r2, [pc, #296]	; 1d408 <__assert_fail@plt+0xb650>
   1d2dc:	mov	r3, r7
   1d2e0:	str	r2, [sp]
   1d2e4:	add	r1, sp, #8
   1d2e8:	mov	r2, #0
   1d2ec:	mov	r0, r4
   1d2f0:	bl	22d8c <__assert_fail@plt+0x10fd4>
   1d2f4:	cmp	r0, #0
   1d2f8:	bne	1d340 <__assert_fail@plt+0xb588>
   1d2fc:	ldrb	r3, [r4]
   1d300:	sub	r3, r3, #48	; 0x30
   1d304:	cmp	r3, #9
   1d308:	bls	1d334 <__assert_fail@plt+0xb57c>
   1d30c:	ldr	r2, [sp, #8]
   1d310:	cmp	r4, r2
   1d314:	bne	1d324 <__assert_fail@plt+0xb56c>
   1d318:	b	1d3d0 <__assert_fail@plt+0xb618>
   1d31c:	cmp	r2, r4
   1d320:	beq	1d3d0 <__assert_fail@plt+0xb618>
   1d324:	ldrb	r3, [r4, #1]!
   1d328:	sub	r3, r3, #48	; 0x30
   1d32c:	cmp	r3, #9
   1d330:	bhi	1d31c <__assert_fail@plt+0xb564>
   1d334:	ldrd	r2, [r7]
   1d338:	str	r8, [r9]
   1d33c:	b	1d34c <__assert_fail@plt+0xb594>
   1d340:	mov	r3, #0
   1d344:	str	r3, [r9]
   1d348:	ldrd	r2, [r7]
   1d34c:	orrs	r3, r2, r3
   1d350:	bne	1d2c0 <__assert_fail@plt+0xb508>
   1d354:	ldr	r0, [pc, #176]	; 1d40c <__assert_fail@plt+0xb654>
   1d358:	bl	11b18 <getenv@plt>
   1d35c:	mov	r3, #0
   1d360:	cmp	r0, #0
   1d364:	moveq	r2, #1024	; 0x400
   1d368:	movne	r2, #512	; 0x200
   1d36c:	mov	r0, #4
   1d370:	strd	r2, [r7]
   1d374:	b	1d2c0 <__assert_fail@plt+0xb508>
   1d378:	ldr	r0, [pc, #144]	; 1d410 <__assert_fail@plt+0xb658>
   1d37c:	bl	11b18 <getenv@plt>
   1d380:	subs	r4, r0, #0
   1d384:	bne	1d26c <__assert_fail@plt+0xb4b4>
   1d388:	ldr	r0, [pc, #132]	; 1d414 <__assert_fail@plt+0xb65c>
   1d38c:	bl	11b18 <getenv@plt>
   1d390:	subs	r4, r0, #0
   1d394:	bne	1d26c <__assert_fail@plt+0xb4b4>
   1d398:	ldr	r0, [pc, #108]	; 1d40c <__assert_fail@plt+0xb654>
   1d39c:	bl	11b18 <getenv@plt>
   1d3a0:	subs	r3, r0, #0
   1d3a4:	moveq	r4, #1024	; 0x400
   1d3a8:	moveq	r5, #0
   1d3ac:	movne	r2, #512	; 0x200
   1d3b0:	movne	r3, #0
   1d3b4:	strdeq	r4, [r7]
   1d3b8:	strdne	r2, [r7]
   1d3bc:	moveq	r0, r3
   1d3c0:	streq	r3, [r9]
   1d3c4:	movne	r0, r4
   1d3c8:	strne	r4, [r9]
   1d3cc:	b	1d2c0 <__assert_fail@plt+0xb508>
   1d3d0:	ldrb	r3, [r2, #-1]
   1d3d4:	cmp	r3, #66	; 0x42
   1d3d8:	orrne	r8, r8, #128	; 0x80
   1d3dc:	beq	1d3e8 <__assert_fail@plt+0xb630>
   1d3e0:	orr	r8, r8, #32
   1d3e4:	b	1d334 <__assert_fail@plt+0xb57c>
   1d3e8:	ldrb	r3, [r2, #-2]
   1d3ec:	orr	r8, r8, #384	; 0x180
   1d3f0:	cmp	r3, #105	; 0x69
   1d3f4:	bne	1d334 <__assert_fail@plt+0xb57c>
   1d3f8:	b	1d3e0 <__assert_fail@plt+0xb628>
   1d3fc:	bl	119b0 <__stack_chk_fail@plt>
   1d400:	andeq	r9, r3, r0, lsl #30
   1d404:	andeq	r8, r2, r0, asr #29
   1d408:	andeq	r8, r2, ip, lsl #30
   1d40c:	strdeq	r8, [r2], -ip
   1d410:	andeq	r8, r2, ip, asr r7
   1d414:	strdeq	r8, [r2], -r0
   1d418:	push	{r4, r5, r6, r7, r8, lr}
   1d41c:	ldr	r6, [pc, #144]	; 1d4b4 <__assert_fail@plt+0xb6fc>
   1d420:	ldr	r4, [r6]
   1d424:	cmp	r4, #0
   1d428:	beq	1d454 <__assert_fail@plt+0xb69c>
   1d42c:	ldr	r3, [r4]
   1d430:	cmp	r0, r3
   1d434:	bne	1d448 <__assert_fail@plt+0xb690>
   1d438:	b	1d498 <__assert_fail@plt+0xb6e0>
   1d43c:	ldr	r3, [r4]
   1d440:	cmp	r3, r0
   1d444:	beq	1d498 <__assert_fail@plt+0xb6e0>
   1d448:	ldr	r4, [r4, #4]
   1d44c:	cmp	r4, #0
   1d450:	bne	1d43c <__assert_fail@plt+0xb684>
   1d454:	mov	r5, r0
   1d458:	bl	118e4 <getpwuid@plt>
   1d45c:	cmp	r0, #0
   1d460:	beq	1d4a8 <__assert_fail@plt+0xb6f0>
   1d464:	ldr	r7, [r0]
   1d468:	mov	r0, r7
   1d46c:	bl	11bf0 <strlen@plt>
   1d470:	add	r0, r0, #12
   1d474:	bic	r0, r0, #3
   1d478:	bl	221c0 <__assert_fail@plt+0x10408>
   1d47c:	mov	r1, r7
   1d480:	mov	r4, r0
   1d484:	str	r5, [r0], #8
   1d488:	bl	11aa0 <strcpy@plt>
   1d48c:	ldr	r3, [r6]
   1d490:	str	r4, [r6]
   1d494:	str	r3, [r4, #4]
   1d498:	ldrb	r0, [r4, #8]
   1d49c:	cmp	r0, #0
   1d4a0:	addne	r0, r4, #8
   1d4a4:	pop	{r4, r5, r6, r7, r8, pc}
   1d4a8:	mov	r0, #12
   1d4ac:	ldr	r7, [pc, #4]	; 1d4b8 <__assert_fail@plt+0xb700>
   1d4b0:	b	1d478 <__assert_fail@plt+0xb6c0>
   1d4b4:	andeq	fp, r3, r4, asr #7
   1d4b8:	ldrdeq	r7, [r2], -r0
   1d4bc:	push	{r4, r5, r6, r7, r8, lr}
   1d4c0:	mov	r5, r0
   1d4c4:	ldr	r6, [pc, #236]	; 1d5b8 <__assert_fail@plt+0xb800>
   1d4c8:	ldr	r4, [r6]
   1d4cc:	cmp	r4, #0
   1d4d0:	beq	1d510 <__assert_fail@plt+0xb758>
   1d4d4:	ldrb	r7, [r0]
   1d4d8:	b	1d4e8 <__assert_fail@plt+0xb730>
   1d4dc:	ldr	r4, [r4, #4]
   1d4e0:	cmp	r4, #0
   1d4e4:	beq	1d510 <__assert_fail@plt+0xb758>
   1d4e8:	ldrb	r3, [r4, #8]
   1d4ec:	cmp	r3, r7
   1d4f0:	bne	1d4dc <__assert_fail@plt+0xb724>
   1d4f4:	mov	r1, r5
   1d4f8:	add	r0, r4, #8
   1d4fc:	bl	118d8 <strcmp@plt>
   1d500:	cmp	r0, #0
   1d504:	bne	1d4dc <__assert_fail@plt+0xb724>
   1d508:	mov	r0, r4
   1d50c:	pop	{r4, r5, r6, r7, r8, pc}
   1d510:	ldr	r4, [r6, #4]
   1d514:	cmp	r4, #0
   1d518:	beq	1d55c <__assert_fail@plt+0xb7a4>
   1d51c:	ldrb	r7, [r5]
   1d520:	b	1d530 <__assert_fail@plt+0xb778>
   1d524:	ldr	r4, [r4, #4]
   1d528:	cmp	r4, #0
   1d52c:	beq	1d55c <__assert_fail@plt+0xb7a4>
   1d530:	ldrb	r3, [r4, #8]
   1d534:	cmp	r3, r7
   1d538:	bne	1d524 <__assert_fail@plt+0xb76c>
   1d53c:	mov	r1, r5
   1d540:	add	r0, r4, #8
   1d544:	bl	118d8 <strcmp@plt>
   1d548:	cmp	r0, #0
   1d54c:	bne	1d524 <__assert_fail@plt+0xb76c>
   1d550:	mov	r4, r0
   1d554:	mov	r0, r4
   1d558:	pop	{r4, r5, r6, r7, r8, pc}
   1d55c:	mov	r0, r5
   1d560:	bl	118cc <getpwnam@plt>
   1d564:	mov	r4, r0
   1d568:	mov	r0, r5
   1d56c:	bl	11bf0 <strlen@plt>
   1d570:	add	r0, r0, #12
   1d574:	bic	r0, r0, #3
   1d578:	bl	221c0 <__assert_fail@plt+0x10408>
   1d57c:	mov	r1, r5
   1d580:	mov	r7, r0
   1d584:	add	r0, r0, #8
   1d588:	bl	11aa0 <strcpy@plt>
   1d58c:	cmp	r4, #0
   1d590:	ldrne	r2, [r4, #8]
   1d594:	ldrne	r3, [r6]
   1d598:	ldreq	r3, [r6, #4]
   1d59c:	movne	r4, r7
   1d5a0:	strne	r7, [r6]
   1d5a4:	streq	r7, [r6, #4]
   1d5a8:	mov	r0, r4
   1d5ac:	strdne	r2, [r7]
   1d5b0:	streq	r3, [r7, #4]
   1d5b4:	pop	{r4, r5, r6, r7, r8, pc}
   1d5b8:	andeq	fp, r3, r4, asr #7
   1d5bc:	push	{r4, r5, r6, r7, r8, lr}
   1d5c0:	ldr	r6, [pc, #144]	; 1d658 <__assert_fail@plt+0xb8a0>
   1d5c4:	ldr	r4, [r6, #8]
   1d5c8:	cmp	r4, #0
   1d5cc:	beq	1d5f8 <__assert_fail@plt+0xb840>
   1d5d0:	ldr	r3, [r4]
   1d5d4:	cmp	r0, r3
   1d5d8:	bne	1d5ec <__assert_fail@plt+0xb834>
   1d5dc:	b	1d63c <__assert_fail@plt+0xb884>
   1d5e0:	ldr	r3, [r4]
   1d5e4:	cmp	r3, r0
   1d5e8:	beq	1d63c <__assert_fail@plt+0xb884>
   1d5ec:	ldr	r4, [r4, #4]
   1d5f0:	cmp	r4, #0
   1d5f4:	bne	1d5e0 <__assert_fail@plt+0xb828>
   1d5f8:	mov	r5, r0
   1d5fc:	bl	11d88 <getgrgid@plt>
   1d600:	cmp	r0, #0
   1d604:	beq	1d64c <__assert_fail@plt+0xb894>
   1d608:	ldr	r7, [r0]
   1d60c:	mov	r0, r7
   1d610:	bl	11bf0 <strlen@plt>
   1d614:	add	r0, r0, #12
   1d618:	bic	r0, r0, #3
   1d61c:	bl	221c0 <__assert_fail@plt+0x10408>
   1d620:	mov	r1, r7
   1d624:	mov	r4, r0
   1d628:	str	r5, [r0], #8
   1d62c:	bl	11aa0 <strcpy@plt>
   1d630:	ldr	r3, [r6, #8]
   1d634:	str	r4, [r6, #8]
   1d638:	str	r3, [r4, #4]
   1d63c:	ldrb	r0, [r4, #8]
   1d640:	cmp	r0, #0
   1d644:	addne	r0, r4, #8
   1d648:	pop	{r4, r5, r6, r7, r8, pc}
   1d64c:	mov	r0, #12
   1d650:	ldr	r7, [pc, #4]	; 1d65c <__assert_fail@plt+0xb8a4>
   1d654:	b	1d61c <__assert_fail@plt+0xb864>
   1d658:	andeq	fp, r3, r4, asr #7
   1d65c:	ldrdeq	r7, [r2], -r0
   1d660:	push	{r4, r5, r6, r7, r8, lr}
   1d664:	mov	r5, r0
   1d668:	ldr	r6, [pc, #236]	; 1d75c <__assert_fail@plt+0xb9a4>
   1d66c:	ldr	r4, [r6, #8]
   1d670:	cmp	r4, #0
   1d674:	beq	1d6b4 <__assert_fail@plt+0xb8fc>
   1d678:	ldrb	r7, [r0]
   1d67c:	b	1d68c <__assert_fail@plt+0xb8d4>
   1d680:	ldr	r4, [r4, #4]
   1d684:	cmp	r4, #0
   1d688:	beq	1d6b4 <__assert_fail@plt+0xb8fc>
   1d68c:	ldrb	r3, [r4, #8]
   1d690:	cmp	r3, r7
   1d694:	bne	1d680 <__assert_fail@plt+0xb8c8>
   1d698:	mov	r1, r5
   1d69c:	add	r0, r4, #8
   1d6a0:	bl	118d8 <strcmp@plt>
   1d6a4:	cmp	r0, #0
   1d6a8:	bne	1d680 <__assert_fail@plt+0xb8c8>
   1d6ac:	mov	r0, r4
   1d6b0:	pop	{r4, r5, r6, r7, r8, pc}
   1d6b4:	ldr	r4, [r6, #12]
   1d6b8:	cmp	r4, #0
   1d6bc:	beq	1d700 <__assert_fail@plt+0xb948>
   1d6c0:	ldrb	r7, [r5]
   1d6c4:	b	1d6d4 <__assert_fail@plt+0xb91c>
   1d6c8:	ldr	r4, [r4, #4]
   1d6cc:	cmp	r4, #0
   1d6d0:	beq	1d700 <__assert_fail@plt+0xb948>
   1d6d4:	ldrb	r3, [r4, #8]
   1d6d8:	cmp	r3, r7
   1d6dc:	bne	1d6c8 <__assert_fail@plt+0xb910>
   1d6e0:	mov	r1, r5
   1d6e4:	add	r0, r4, #8
   1d6e8:	bl	118d8 <strcmp@plt>
   1d6ec:	cmp	r0, #0
   1d6f0:	bne	1d6c8 <__assert_fail@plt+0xb910>
   1d6f4:	mov	r4, r0
   1d6f8:	mov	r0, r4
   1d6fc:	pop	{r4, r5, r6, r7, r8, pc}
   1d700:	mov	r0, r5
   1d704:	bl	11d94 <getgrnam@plt>
   1d708:	mov	r4, r0
   1d70c:	mov	r0, r5
   1d710:	bl	11bf0 <strlen@plt>
   1d714:	add	r0, r0, #12
   1d718:	bic	r0, r0, #3
   1d71c:	bl	221c0 <__assert_fail@plt+0x10408>
   1d720:	mov	r1, r5
   1d724:	mov	r7, r0
   1d728:	add	r0, r0, #8
   1d72c:	bl	11aa0 <strcpy@plt>
   1d730:	cmp	r4, #0
   1d734:	ldrne	r2, [r4, #8]
   1d738:	ldrne	r3, [r6, #8]
   1d73c:	ldreq	r3, [r6, #12]
   1d740:	movne	r4, r7
   1d744:	strne	r7, [r6, #8]
   1d748:	streq	r7, [r6, #12]
   1d74c:	mov	r0, r4
   1d750:	strdne	r2, [r7]
   1d754:	streq	r3, [r7, #4]
   1d758:	pop	{r4, r5, r6, r7, r8, pc}
   1d75c:	andeq	fp, r3, r4, asr #7
   1d760:	cmp	r0, #0
   1d764:	sbcs	r3, r1, #0
   1d768:	mov	r3, #0
   1d76c:	push	{r4, r5, r6, r7, r8, lr}
   1d770:	mov	r4, r0
   1d774:	mov	r5, r1
   1d778:	strb	r3, [r2, #20]
   1d77c:	add	r6, r2, #20
   1d780:	blt	1d7d0 <__assert_fail@plt+0xba18>
   1d784:	mov	r0, r4
   1d788:	mov	r1, r5
   1d78c:	mov	r2, #10
   1d790:	mov	r3, #0
   1d794:	bl	24bfc <_obstack_memory_used@@Base+0x1014>
   1d798:	mov	r0, r4
   1d79c:	mov	r1, r5
   1d7a0:	mov	r3, #0
   1d7a4:	add	r2, r2, #48	; 0x30
   1d7a8:	strb	r2, [r6, #-1]!
   1d7ac:	mov	r2, #10
   1d7b0:	bl	24bfc <_obstack_memory_used@@Base+0x1014>
   1d7b4:	mov	r4, r0
   1d7b8:	mov	r5, r1
   1d7bc:	orrs	r3, r4, r5
   1d7c0:	bne	1d784 <__assert_fail@plt+0xb9cc>
   1d7c4:	mov	r0, r6
   1d7c8:	pop	{r4, r5, r6, r7, r8, pc}
   1d7cc:	mov	r6, r7
   1d7d0:	mov	r0, r4
   1d7d4:	mov	r1, r5
   1d7d8:	mov	r2, #10
   1d7dc:	mov	r3, #0
   1d7e0:	bl	24bfc <_obstack_memory_used@@Base+0x1014>
   1d7e4:	mov	r0, r4
   1d7e8:	mov	r1, r5
   1d7ec:	mov	r3, #0
   1d7f0:	sub	r7, r6, #1
   1d7f4:	rsb	r2, r2, #48	; 0x30
   1d7f8:	strb	r2, [r6, #-1]
   1d7fc:	mov	r2, #10
   1d800:	bl	24bfc <_obstack_memory_used@@Base+0x1014>
   1d804:	mov	r4, r0
   1d808:	mov	r5, r1
   1d80c:	orrs	r3, r4, r5
   1d810:	bne	1d7cc <__assert_fail@plt+0xba14>
   1d814:	mov	r3, #45	; 0x2d
   1d818:	sub	r6, r6, #2
   1d81c:	strb	r3, [r7, #-1]
   1d820:	mov	r0, r6
   1d824:	pop	{r4, r5, r6, r7, r8, pc}
   1d828:	push	{r4, r5, r6, lr}
   1d82c:	mov	r4, r0
   1d830:	mov	r5, r1
   1d834:	add	r6, r2, #20
   1d838:	mov	r3, #0
   1d83c:	strb	r3, [r2, #20]
   1d840:	mov	r0, r4
   1d844:	mov	r1, r5
   1d848:	mov	r2, #10
   1d84c:	mov	r3, #0
   1d850:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1d854:	mov	r0, r4
   1d858:	mov	r1, r5
   1d85c:	mov	r3, #0
   1d860:	add	r2, r2, #48	; 0x30
   1d864:	strb	r2, [r6, #-1]!
   1d868:	mov	r2, #10
   1d86c:	bl	24cd0 <_obstack_memory_used@@Base+0x10e8>
   1d870:	cmp	r5, #0
   1d874:	cmpeq	r4, #9
   1d878:	mov	r5, r1
   1d87c:	mov	r4, r0
   1d880:	bhi	1d840 <__assert_fail@plt+0xba88>
   1d884:	mov	r0, r6
   1d888:	pop	{r4, r5, r6, pc}
   1d88c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d890:	sub	sp, sp, #12
   1d894:	mov	r6, r1
   1d898:	mov	r4, r2
   1d89c:	mov	r9, r3
   1d8a0:	str	r0, [sp]
   1d8a4:	bl	11bf0 <strlen@plt>
   1d8a8:	ldr	r7, [sp, #52]	; 0x34
   1d8ac:	ands	sl, r7, #2
   1d8b0:	mov	fp, r0
   1d8b4:	beq	1d9f0 <__assert_fail@plt+0xbc38>
   1d8b8:	mov	r8, #0
   1d8bc:	mov	sl, r8
   1d8c0:	mov	r5, fp
   1d8c4:	ldr	r2, [r9]
   1d8c8:	cmp	r2, r5
   1d8cc:	movcc	fp, r2
   1d8d0:	movcc	r1, #0
   1d8d4:	bcs	1d9c0 <__assert_fail@plt+0xbc08>
   1d8d8:	ldr	r3, [sp, #48]	; 0x30
   1d8dc:	str	r2, [r9]
   1d8e0:	cmp	r3, #0
   1d8e4:	beq	1d9e4 <__assert_fail@plt+0xbc2c>
   1d8e8:	cmp	r3, #1
   1d8ec:	moveq	r5, #0
   1d8f0:	lsrne	r5, r1, #1
   1d8f4:	andne	r1, r1, #1
   1d8f8:	addne	r1, r1, r5
   1d8fc:	tst	r7, #4
   1d900:	addeq	r9, r1, fp
   1d904:	movne	r9, fp
   1d908:	movne	r1, #0
   1d90c:	tst	r7, #8
   1d910:	movne	r5, #0
   1d914:	cmp	r4, #0
   1d918:	beq	1d99c <__assert_fail@plt+0xbbe4>
   1d91c:	sub	r4, r4, #1
   1d920:	add	r4, r6, r4
   1d924:	cmp	r1, #0
   1d928:	cmpne	r6, r4
   1d92c:	mov	r0, r6
   1d930:	bcs	1d950 <__assert_fail@plt+0xbb98>
   1d934:	mov	lr, #32
   1d938:	strb	lr, [r0], #1
   1d93c:	rsb	r3, r1, #0
   1d940:	sub	r2, r6, r0
   1d944:	cmp	r3, r2
   1d948:	cmpne	r4, r0
   1d94c:	bhi	1d938 <__assert_fail@plt+0xbb80>
   1d950:	sub	r2, r4, r0
   1d954:	cmp	r2, fp
   1d958:	mov	ip, #0
   1d95c:	movcs	r2, fp
   1d960:	ldr	r1, [sp]
   1d964:	strb	ip, [r0]
   1d968:	bl	11b90 <mempcpy@plt>
   1d96c:	cmp	r5, #0
   1d970:	cmpne	r4, r0
   1d974:	mov	r3, r0
   1d978:	bls	1d994 <__assert_fail@plt+0xbbdc>
   1d97c:	mov	r1, #32
   1d980:	strb	r1, [r3], #1
   1d984:	sub	r2, r3, r5
   1d988:	cmp	r0, r2
   1d98c:	cmpne	r4, r3
   1d990:	bhi	1d980 <__assert_fail@plt+0xbbc8>
   1d994:	mov	r2, #0
   1d998:	strb	r2, [r3]
   1d99c:	add	r5, r5, r9
   1d9a0:	mov	r0, r8
   1d9a4:	bl	11938 <free@plt>
   1d9a8:	mov	r0, sl
   1d9ac:	bl	11938 <free@plt>
   1d9b0:	mov	r0, r5
   1d9b4:	add	sp, sp, #12
   1d9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9bc:	mov	sl, #0
   1d9c0:	ldr	r3, [sp, #48]	; 0x30
   1d9c4:	cmp	r5, r2
   1d9c8:	subcc	r1, r2, r5
   1d9cc:	movcs	r2, r5
   1d9d0:	movcc	r2, r5
   1d9d4:	movcs	r1, #0
   1d9d8:	cmp	r3, #0
   1d9dc:	str	r2, [r9]
   1d9e0:	bne	1d8e8 <__assert_fail@plt+0xbb30>
   1d9e4:	mov	r5, r1
   1d9e8:	ldr	r1, [sp, #48]	; 0x30
   1d9ec:	b	1d8fc <__assert_fail@plt+0xbb44>
   1d9f0:	bl	11a94 <__ctype_get_mb_cur_max@plt>
   1d9f4:	cmp	r0, #1
   1d9f8:	bls	1d8b8 <__assert_fail@plt+0xbb00>
   1d9fc:	mov	r2, sl
   1da00:	ldr	r1, [sp]
   1da04:	mov	r0, sl
   1da08:	bl	11cec <mbstowcs@plt>
   1da0c:	cmn	r0, #1
   1da10:	bne	1da2c <__assert_fail@plt+0xbc74>
   1da14:	tst	r7, #1
   1da18:	bne	1d8b8 <__assert_fail@plt+0xbb00>
   1da1c:	mov	r8, #0
   1da20:	mov	sl, r8
   1da24:	mvn	r5, #0
   1da28:	b	1d9a0 <__assert_fail@plt+0xbbe8>
   1da2c:	add	r5, r0, #1
   1da30:	lsl	r3, r5, #2
   1da34:	mov	r0, r3
   1da38:	str	r3, [sp, #4]
   1da3c:	bl	11b30 <malloc@plt>
   1da40:	subs	r8, r0, #0
   1da44:	beq	1db64 <__assert_fail@plt+0xbdac>
   1da48:	mov	r2, r5
   1da4c:	ldr	r1, [sp]
   1da50:	bl	11cec <mbstowcs@plt>
   1da54:	cmp	r0, #0
   1da58:	beq	1dbbc <__assert_fail@plt+0xbe04>
   1da5c:	ldr	r3, [sp, #4]
   1da60:	add	r3, r8, r3
   1da64:	str	sl, [r3, #-4]
   1da68:	ldr	r2, [r8]
   1da6c:	cmp	r2, #0
   1da70:	beq	1db78 <__assert_fail@plt+0xbdc0>
   1da74:	str	r4, [sp, #4]
   1da78:	mov	r0, r2
   1da7c:	mov	r4, r8
   1da80:	bl	11a1c <iswprint@plt>
   1da84:	cmp	r0, #0
   1da88:	moveq	sl, #1
   1da8c:	ldreq	r3, [pc, #320]	; 1dbd4 <__assert_fail@plt+0xbe1c>
   1da90:	streq	r3, [r4]
   1da94:	ldr	r0, [r4, #4]!
   1da98:	cmp	r0, #0
   1da9c:	bne	1da80 <__assert_fail@plt+0xbcc8>
   1daa0:	ldr	r4, [sp, #4]
   1daa4:	mov	r1, r5
   1daa8:	str	r0, [sp, #4]
   1daac:	mov	r0, r8
   1dab0:	bl	11cbc <wcswidth@plt>
   1dab4:	cmp	sl, #0
   1dab8:	ldr	r2, [sp, #4]
   1dabc:	mov	r5, r0
   1dac0:	beq	1db88 <__assert_fail@plt+0xbdd0>
   1dac4:	mov	r0, r2
   1dac8:	mov	r1, r8
   1dacc:	bl	11ad0 <wcstombs@plt>
   1dad0:	add	r3, r0, #1
   1dad4:	str	r3, [sp, #4]
   1dad8:	ldr	r0, [sp, #4]
   1dadc:	bl	11b30 <malloc@plt>
   1dae0:	subs	sl, r0, #0
   1dae4:	beq	1dbac <__assert_fail@plt+0xbdf4>
   1dae8:	ldr	r0, [r8]
   1daec:	ldr	r3, [r9]
   1daf0:	cmp	r0, #0
   1daf4:	beq	1dbc8 <__assert_fail@plt+0xbe10>
   1daf8:	str	r4, [sp]
   1dafc:	mov	fp, r8
   1db00:	mov	r5, #0
   1db04:	mov	r4, r3
   1db08:	b	1db1c <__assert_fail@plt+0xbd64>
   1db0c:	ldr	r0, [fp, #4]!
   1db10:	mov	r5, r3
   1db14:	cmp	r0, #0
   1db18:	beq	1db3c <__assert_fail@plt+0xbd84>
   1db1c:	bl	11908 <wcwidth@plt>
   1db20:	cmn	r0, #1
   1db24:	moveq	r0, #1
   1db28:	ldreq	r3, [pc, #164]	; 1dbd4 <__assert_fail@plt+0xbe1c>
   1db2c:	streq	r3, [fp]
   1db30:	add	r3, r0, r5
   1db34:	cmp	r4, r3
   1db38:	bcs	1db0c <__assert_fail@plt+0xbd54>
   1db3c:	ldr	r4, [sp]
   1db40:	mov	r1, #0
   1db44:	str	r1, [fp]
   1db48:	ldr	r2, [sp, #4]
   1db4c:	mov	r1, r8
   1db50:	mov	r0, sl
   1db54:	bl	11ad0 <wcstombs@plt>
   1db58:	str	sl, [sp]
   1db5c:	mov	fp, r0
   1db60:	b	1d8c4 <__assert_fail@plt+0xbb0c>
   1db64:	tst	r7, #1
   1db68:	movne	r5, fp
   1db6c:	movne	sl, r8
   1db70:	bne	1d8c4 <__assert_fail@plt+0xbb0c>
   1db74:	b	1da1c <__assert_fail@plt+0xbc64>
   1db78:	mov	r1, r5
   1db7c:	mov	r0, r8
   1db80:	bl	11cbc <wcswidth@plt>
   1db84:	mov	r5, r0
   1db88:	ldr	r2, [r9]
   1db8c:	cmp	r2, r5
   1db90:	bcs	1d9bc <__assert_fail@plt+0xbc04>
   1db94:	add	r3, fp, #1
   1db98:	str	r3, [sp, #4]
   1db9c:	ldr	r0, [sp, #4]
   1dba0:	bl	11b30 <malloc@plt>
   1dba4:	subs	sl, r0, #0
   1dba8:	bne	1dae8 <__assert_fail@plt+0xbd30>
   1dbac:	tst	r7, #1
   1dbb0:	mvneq	r5, #0
   1dbb4:	bne	1d8c4 <__assert_fail@plt+0xbb0c>
   1dbb8:	b	1d9a0 <__assert_fail@plt+0xbbe8>
   1dbbc:	mov	sl, r0
   1dbc0:	mov	r5, fp
   1dbc4:	b	1d8c4 <__assert_fail@plt+0xbb0c>
   1dbc8:	mov	r5, r0
   1dbcc:	mov	fp, r8
   1dbd0:	b	1db40 <__assert_fail@plt+0xbd88>
   1dbd4:	strdeq	pc, [r0], -sp
   1dbd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbdc:	mov	r9, r0
   1dbe0:	ldr	r8, [r1]
   1dbe4:	sub	sp, sp, #12
   1dbe8:	mov	r6, r1
   1dbec:	mov	fp, r2
   1dbf0:	mov	sl, r3
   1dbf4:	mov	r0, r8
   1dbf8:	mov	r7, #0
   1dbfc:	add	r4, r0, #1
   1dc00:	mov	r1, r4
   1dc04:	mov	r0, r7
   1dc08:	bl	119bc <realloc@plt>
   1dc0c:	mov	r3, r6
   1dc10:	mov	r2, r4
   1dc14:	subs	r5, r0, #0
   1dc18:	mov	r1, r5
   1dc1c:	mov	r0, r9
   1dc20:	beq	1dc54 <__assert_fail@plt+0xbe9c>
   1dc24:	str	r8, [r6]
   1dc28:	str	sl, [sp, #4]
   1dc2c:	str	fp, [sp]
   1dc30:	bl	1d88c <__assert_fail@plt+0xbad4>
   1dc34:	cmn	r0, #1
   1dc38:	beq	1dc68 <__assert_fail@plt+0xbeb0>
   1dc3c:	cmp	r4, r0
   1dc40:	mov	r7, r5
   1dc44:	bls	1dbfc <__assert_fail@plt+0xbe44>
   1dc48:	mov	r0, r5
   1dc4c:	add	sp, sp, #12
   1dc50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc54:	mov	r0, r7
   1dc58:	bl	11938 <free@plt>
   1dc5c:	mov	r0, r5
   1dc60:	add	sp, sp, #12
   1dc64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc68:	mov	r0, r5
   1dc6c:	bl	11938 <free@plt>
   1dc70:	mov	r5, #0
   1dc74:	mov	r0, r5
   1dc78:	add	sp, sp, #12
   1dc7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc84:	sub	sp, sp, #20
   1dc88:	ldr	sl, [pc, #444]	; 1de4c <__assert_fail@plt+0xc094>
   1dc8c:	mov	r4, r0
   1dc90:	add	r7, r0, r1
   1dc94:	ldr	r3, [sl]
   1dc98:	mov	r9, r2
   1dc9c:	str	r3, [sp, #12]
   1dca0:	bl	11a94 <__ctype_get_mb_cur_max@plt>
   1dca4:	cmp	r0, #1
   1dca8:	bls	1ddd4 <__assert_fail@plt+0xc01c>
   1dcac:	cmp	r4, r7
   1dcb0:	mov	r6, #0
   1dcb4:	bcs	1ddb8 <__assert_fail@plt+0xc000>
   1dcb8:	and	r8, r9, #2
   1dcbc:	b	1dce4 <__assert_fail@plt+0xbf2c>
   1dcc0:	cmp	r3, #37	; 0x25
   1dcc4:	bcs	1dcd4 <__assert_fail@plt+0xbf1c>
   1dcc8:	sub	r3, r3, #32
   1dccc:	cmp	r3, #3
   1dcd0:	bhi	1dd0c <__assert_fail@plt+0xbf54>
   1dcd4:	add	r4, r4, #1
   1dcd8:	add	r6, r6, #1
   1dcdc:	cmp	r4, r7
   1dce0:	bcs	1ddb8 <__assert_fail@plt+0xc000>
   1dce4:	ldrb	r3, [r4]
   1dce8:	cmp	r3, #63	; 0x3f
   1dcec:	bls	1dcc0 <__assert_fail@plt+0xbf08>
   1dcf0:	cmp	r3, #65	; 0x41
   1dcf4:	bcc	1dd0c <__assert_fail@plt+0xbf54>
   1dcf8:	cmp	r3, #95	; 0x5f
   1dcfc:	bls	1dcd4 <__assert_fail@plt+0xbf1c>
   1dd00:	sub	r3, r3, #97	; 0x61
   1dd04:	cmp	r3, #29
   1dd08:	bls	1dcd4 <__assert_fail@plt+0xbf1c>
   1dd0c:	mov	r3, #0
   1dd10:	mvn	fp, #-2147483648	; 0x80000000
   1dd14:	str	r3, [sp, #4]
   1dd18:	str	r3, [sp, #8]
   1dd1c:	b	1dd44 <__assert_fail@plt+0xbf8c>
   1dd20:	sub	r3, fp, r6
   1dd24:	cmp	r3, r0
   1dd28:	blt	1de40 <__assert_fail@plt+0xc088>
   1dd2c:	add	r6, r6, r0
   1dd30:	add	r0, sp, #4
   1dd34:	bl	11974 <mbsinit@plt>
   1dd38:	add	r4, r4, r5
   1dd3c:	cmp	r0, #0
   1dd40:	bne	1dcdc <__assert_fail@plt+0xbf24>
   1dd44:	add	r3, sp, #4
   1dd48:	sub	r2, r7, r4
   1dd4c:	mov	r1, r4
   1dd50:	mov	r0, sp
   1dd54:	bl	2384c <__assert_fail@plt+0x11a94>
   1dd58:	cmn	r0, #1
   1dd5c:	mov	r5, r0
   1dd60:	beq	1ddac <__assert_fail@plt+0xbff4>
   1dd64:	cmn	r0, #2
   1dd68:	beq	1de2c <__assert_fail@plt+0xc074>
   1dd6c:	cmp	r0, #0
   1dd70:	ldr	r0, [sp]
   1dd74:	moveq	r5, #1
   1dd78:	bl	11908 <wcwidth@plt>
   1dd7c:	cmp	r0, #0
   1dd80:	bge	1dd20 <__assert_fail@plt+0xbf68>
   1dd84:	cmp	r8, #0
   1dd88:	bne	1ddb4 <__assert_fail@plt+0xbffc>
   1dd8c:	ldr	r0, [sp]
   1dd90:	bl	119f8 <iswcntrl@plt>
   1dd94:	cmp	r0, #0
   1dd98:	bne	1dd30 <__assert_fail@plt+0xbf78>
   1dd9c:	cmn	r6, #-2147483647	; 0x80000001
   1dda0:	beq	1de40 <__assert_fail@plt+0xc088>
   1dda4:	add	r6, r6, #1
   1dda8:	b	1dd30 <__assert_fail@plt+0xbf78>
   1ddac:	tst	r9, #1
   1ddb0:	beq	1dcd4 <__assert_fail@plt+0xbf1c>
   1ddb4:	mvn	r6, #0
   1ddb8:	ldr	r2, [sp, #12]
   1ddbc:	ldr	r3, [sl]
   1ddc0:	mov	r0, r6
   1ddc4:	cmp	r2, r3
   1ddc8:	bne	1de48 <__assert_fail@plt+0xc090>
   1ddcc:	add	sp, sp, #20
   1ddd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddd4:	cmp	r4, r7
   1ddd8:	movcs	r6, #0
   1dddc:	bcs	1ddb8 <__assert_fail@plt+0xc000>
   1dde0:	bl	11ba8 <__ctype_b_loc@plt>
   1dde4:	mov	r6, #0
   1dde8:	and	r9, r9, #2
   1ddec:	ldr	r2, [r0]
   1ddf0:	ldrb	r3, [r4], #1
   1ddf4:	lsl	r3, r3, #1
   1ddf8:	ldrh	r3, [r2, r3]
   1ddfc:	tst	r3, #16384	; 0x4000
   1de00:	bne	1de14 <__assert_fail@plt+0xc05c>
   1de04:	cmp	r9, #0
   1de08:	bne	1ddb4 <__assert_fail@plt+0xbffc>
   1de0c:	tst	r3, #2
   1de10:	bne	1de20 <__assert_fail@plt+0xc068>
   1de14:	cmn	r6, #-2147483647	; 0x80000001
   1de18:	beq	1ddb8 <__assert_fail@plt+0xc000>
   1de1c:	add	r6, r6, #1
   1de20:	cmp	r7, r4
   1de24:	bne	1ddf0 <__assert_fail@plt+0xc038>
   1de28:	b	1ddb8 <__assert_fail@plt+0xc000>
   1de2c:	tst	r9, #1
   1de30:	bne	1ddb4 <__assert_fail@plt+0xbffc>
   1de34:	add	r6, r6, #1
   1de38:	mov	r4, r7
   1de3c:	b	1dcdc <__assert_fail@plt+0xbf24>
   1de40:	mvn	r6, #-2147483648	; 0x80000000
   1de44:	b	1ddb8 <__assert_fail@plt+0xc000>
   1de48:	bl	119b0 <__stack_chk_fail@plt>
   1de4c:	andeq	r9, r3, r0, lsl #30
   1de50:	push	{r4, r5, r6, lr}
   1de54:	mov	r5, r1
   1de58:	mov	r4, r0
   1de5c:	bl	11bf0 <strlen@plt>
   1de60:	mov	r2, r5
   1de64:	mov	r1, r0
   1de68:	mov	r0, r4
   1de6c:	pop	{r4, r5, r6, lr}
   1de70:	b	1dc80 <__assert_fail@plt+0xbec8>
   1de74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de78:	sub	sp, sp, #20
   1de7c:	cmp	r1, #2
   1de80:	mov	r4, r0
   1de84:	str	r2, [sp, #8]
   1de88:	mov	r5, r3
   1de8c:	bhi	1dec0 <__assert_fail@plt+0xc108>
   1de90:	beq	1de9c <__assert_fail@plt+0xc0e4>
   1de94:	add	sp, sp, #20
   1de98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de9c:	ldrd	r6, [r0]
   1dea0:	mov	r0, r6
   1dea4:	mov	r1, r7
   1dea8:	blx	r3
   1deac:	cmp	r0, #0
   1deb0:	strgt	r7, [r4]
   1deb4:	strgt	r6, [r4, #4]
   1deb8:	add	sp, sp, #20
   1debc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dec0:	mov	r6, r1
   1dec4:	lsr	r1, r1, #1
   1dec8:	mov	r0, r1
   1decc:	str	r1, [sp, #4]
   1ded0:	add	r0, r4, r0, lsl #2
   1ded4:	sub	r1, r6, r1
   1ded8:	bl	1de74 <__assert_fail@plt+0xc0bc>
   1dedc:	cmp	r6, #3
   1dee0:	bne	1df84 <__assert_fail@plt+0xc1cc>
   1dee4:	ldr	r3, [sp, #8]
   1dee8:	ldr	sl, [r4]
   1deec:	str	sl, [r3]
   1def0:	ldr	r9, [sp, #4]
   1def4:	mov	r7, #0
   1def8:	mov	r3, r9
   1defc:	ldr	r8, [r4, r9, lsl #2]
   1df00:	mov	fp, r7
   1df04:	mov	r9, r8
   1df08:	mov	r8, r3
   1df0c:	b	1df28 <__assert_fail@plt+0xc170>
   1df10:	add	r8, r8, #1
   1df14:	cmp	r6, r8
   1df18:	str	r9, [r4, r7, lsl #2]
   1df1c:	beq	1df60 <__assert_fail@plt+0xc1a8>
   1df20:	ldr	r9, [r4, r8, lsl #2]
   1df24:	mov	r7, ip
   1df28:	mov	r1, r9
   1df2c:	mov	r0, sl
   1df30:	blx	r5
   1df34:	add	ip, r7, #1
   1df38:	cmp	r0, #0
   1df3c:	bgt	1df10 <__assert_fail@plt+0xc158>
   1df40:	ldr	r3, [sp, #4]
   1df44:	add	fp, fp, #1
   1df48:	cmp	r3, fp
   1df4c:	str	sl, [r4, r7, lsl #2]
   1df50:	beq	1de94 <__assert_fail@plt+0xc0dc>
   1df54:	ldr	r3, [sp, #8]
   1df58:	ldr	sl, [r3, fp, lsl #2]
   1df5c:	b	1df24 <__assert_fail@plt+0xc16c>
   1df60:	ldr	r3, [sp, #4]
   1df64:	add	r0, r4, ip, lsl #2
   1df68:	sub	r2, r3, fp
   1df6c:	ldr	r3, [sp, #8]
   1df70:	lsl	r2, r2, #2
   1df74:	add	r1, r3, fp, lsl #2
   1df78:	add	sp, sp, #20
   1df7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df80:	b	1195c <memcpy@plt>
   1df84:	ldr	fp, [sp, #8]
   1df88:	ldr	r3, [sp, #4]
   1df8c:	lsr	r8, r6, #2
   1df90:	bic	r7, r6, #3
   1df94:	sub	r1, r3, r8
   1df98:	add	r0, r4, r7
   1df9c:	mov	r2, fp
   1dfa0:	mov	r3, r5
   1dfa4:	str	r8, [sp, #12]
   1dfa8:	bl	1de74 <__assert_fail@plt+0xc0bc>
   1dfac:	mov	r2, fp
   1dfb0:	mov	r1, r8
   1dfb4:	mov	r3, r5
   1dfb8:	mov	r0, r4
   1dfbc:	bl	1de74 <__assert_fail@plt+0xc0bc>
   1dfc0:	ldr	sl, [r4]
   1dfc4:	mov	r9, r8
   1dfc8:	ldr	r8, [r4, r7]
   1dfcc:	mov	r7, fp
   1dfd0:	mov	fp, #0
   1dfd4:	mov	r1, r8
   1dfd8:	mov	r0, sl
   1dfdc:	blx	r5
   1dfe0:	add	r7, r7, #4
   1dfe4:	cmp	r0, #0
   1dfe8:	ble	1e008 <__assert_fail@plt+0xc250>
   1dfec:	ldr	r3, [sp, #4]
   1dff0:	add	r9, r9, #1
   1dff4:	cmp	r3, r9
   1dff8:	str	r8, [r7, #-4]
   1dffc:	beq	1e02c <__assert_fail@plt+0xc274>
   1e000:	ldr	r8, [r4, r9, lsl #2]
   1e004:	b	1dfd4 <__assert_fail@plt+0xc21c>
   1e008:	ldr	r3, [sp, #12]
   1e00c:	add	fp, fp, #1
   1e010:	cmp	r3, fp
   1e014:	str	sl, [r7, #-4]
   1e018:	ldrne	sl, [r4, fp, lsl #2]
   1e01c:	bne	1dfd4 <__assert_fail@plt+0xc21c>
   1e020:	ldr	r3, [sp, #4]
   1e024:	mov	fp, r9
   1e028:	str	r3, [sp, #12]
   1e02c:	ldr	r3, [sp, #12]
   1e030:	add	r1, r4, fp, lsl #2
   1e034:	sub	r2, r3, fp
   1e038:	mov	r0, r7
   1e03c:	lsl	r2, r2, #2
   1e040:	bl	1195c <memcpy@plt>
   1e044:	ldr	r3, [sp, #8]
   1e048:	ldr	sl, [r3]
   1e04c:	b	1def0 <__assert_fail@plt+0xc138>
   1e050:	mov	r3, r2
   1e054:	add	r2, r0, r1, lsl #2
   1e058:	b	1de74 <__assert_fail@plt+0xc0bc>
   1e05c:	push	{r4, r5, r6, lr}
   1e060:	subs	r4, r2, #0
   1e064:	mov	r6, r0
   1e068:	beq	1e094 <__assert_fail@plt+0xc2dc>
   1e06c:	mov	r5, r1
   1e070:	bl	11b6c <__ctype_tolower_loc@plt>
   1e074:	add	r3, r5, r4
   1e078:	add	r2, r6, r4
   1e07c:	ldrb	lr, [r3, #-1]!
   1e080:	ldr	ip, [r0]
   1e084:	cmp	r5, r3
   1e088:	ldr	ip, [ip, lr, lsl #2]
   1e08c:	strb	ip, [r2, #-1]!
   1e090:	bne	1e07c <__assert_fail@plt+0xc2c4>
   1e094:	mov	r0, r6
   1e098:	pop	{r4, r5, r6, pc}
   1e09c:	push	{r4, r5, r6, lr}
   1e0a0:	subs	r4, r2, #0
   1e0a4:	mov	r6, r0
   1e0a8:	beq	1e0d4 <__assert_fail@plt+0xc31c>
   1e0ac:	mov	r5, r1
   1e0b0:	bl	11b78 <__ctype_toupper_loc@plt>
   1e0b4:	add	r3, r5, r4
   1e0b8:	add	r2, r6, r4
   1e0bc:	ldrb	lr, [r3, #-1]!
   1e0c0:	ldr	ip, [r0]
   1e0c4:	cmp	r5, r3
   1e0c8:	ldr	ip, [ip, lr, lsl #2]
   1e0cc:	strb	ip, [r2, #-1]!
   1e0d0:	bne	1e0bc <__assert_fail@plt+0xc304>
   1e0d4:	mov	r0, r6
   1e0d8:	pop	{r4, r5, r6, pc}
   1e0dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0e0:	sub	sp, sp, #1136	; 0x470
   1e0e4:	sub	sp, sp, #12
   1e0e8:	ldr	r7, [r3, #40]	; 0x28
   1e0ec:	ldr	r8, [r3, #8]
   1e0f0:	str	r3, [sp, #28]
   1e0f4:	ldr	r3, [pc, #4012]	; 1f0a8 <__assert_fail@plt+0xd2f0>
   1e0f8:	ldr	ip, [pc, #4012]	; 1f0ac <__assert_fail@plt+0xd2f4>
   1e0fc:	cmp	r7, #0
   1e100:	ldr	r3, [r3]
   1e104:	moveq	r7, ip
   1e108:	str	r3, [sp, #1140]	; 0x474
   1e10c:	ldrb	r3, [sp, #1184]	; 0x4a0
   1e110:	cmp	r8, #12
   1e114:	mov	r9, r0
   1e118:	str	r3, [sp, #24]
   1e11c:	ldr	r3, [sp, #1188]	; 0x4a4
   1e120:	str	r1, [sp, #16]
   1e124:	str	r3, [sp, #36]	; 0x24
   1e128:	ldr	r3, [sp, #1192]	; 0x4a8
   1e12c:	mov	r5, r2
   1e130:	str	r3, [sp, #32]
   1e134:	subgt	r8, r8, #12
   1e138:	bgt	1e144 <__assert_fail@plt+0xc38c>
   1e13c:	cmp	r8, #0
   1e140:	moveq	r8, #12
   1e144:	ldrb	r3, [r5]
   1e148:	cmp	r3, #0
   1e14c:	beq	1f448 <__assert_fail@plt+0xd690>
   1e150:	mov	fp, #0
   1e154:	str	r8, [sp, #44]	; 0x2c
   1e158:	str	r7, [sp, #40]	; 0x28
   1e15c:	cmp	r3, #37	; 0x25
   1e160:	beq	1e1e0 <__assert_fail@plt+0xc428>
   1e164:	ldr	r2, [sp, #16]
   1e168:	sub	r2, r2, fp
   1e16c:	cmp	r2, #1
   1e170:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1e174:	add	fp, fp, #1
   1e178:	cmp	r9, #0
   1e17c:	strbne	r3, [r9], #1
   1e180:	ldrb	r3, [r5, #1]
   1e184:	add	r5, r5, #1
   1e188:	cmp	r3, #0
   1e18c:	bne	1e15c <__assert_fail@plt+0xc3a4>
   1e190:	ldr	r3, [sp, #16]
   1e194:	cmp	r9, #0
   1e198:	cmpne	r3, #0
   1e19c:	movne	r3, #0
   1e1a0:	strbne	r3, [r9]
   1e1a4:	b	1e1bc <__assert_fail@plt+0xc404>
   1e1a8:	cmp	sl, #95	; 0x5f
   1e1ac:	beq	1f4d4 <__assert_fail@plt+0xd71c>
   1e1b0:	cmp	r3, r2
   1e1b4:	bcc	1ecfc <__assert_fail@plt+0xcf44>
   1e1b8:	mov	fp, #0
   1e1bc:	ldr	r3, [pc, #3812]	; 1f0a8 <__assert_fail@plt+0xd2f0>
   1e1c0:	ldr	r2, [sp, #1140]	; 0x474
   1e1c4:	mov	r0, fp
   1e1c8:	ldr	r3, [r3]
   1e1cc:	cmp	r2, r3
   1e1d0:	bne	1f7e0 <__assert_fail@plt+0xda28>
   1e1d4:	add	sp, sp, #1136	; 0x470
   1e1d8:	add	sp, sp, #12
   1e1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1e0:	mov	r8, #0
   1e1e4:	ldr	r3, [sp, #24]
   1e1e8:	mov	sl, r8
   1e1ec:	str	r3, [sp, #20]
   1e1f0:	ldrb	r4, [r5, #1]!
   1e1f4:	cmp	r4, #48	; 0x30
   1e1f8:	mov	r7, r4
   1e1fc:	beq	1e44c <__assert_fail@plt+0xc694>
   1e200:	bhi	1e434 <__assert_fail@plt+0xc67c>
   1e204:	cmp	r4, #35	; 0x23
   1e208:	moveq	r8, #1
   1e20c:	beq	1e1f0 <__assert_fail@plt+0xc438>
   1e210:	cmp	r4, #45	; 0x2d
   1e214:	beq	1e44c <__assert_fail@plt+0xc694>
   1e218:	sub	r3, r4, #48	; 0x30
   1e21c:	cmp	r3, #9
   1e220:	mvnhi	r6, #0
   1e224:	bls	1e460 <__assert_fail@plt+0xc6a8>
   1e228:	cmp	r4, #69	; 0x45
   1e22c:	beq	1e454 <__assert_fail@plt+0xc69c>
   1e230:	cmp	r4, #79	; 0x4f
   1e234:	movne	r7, #0
   1e238:	beq	1e454 <__assert_fail@plt+0xc69c>
   1e23c:	cmp	r4, #122	; 0x7a
   1e240:	ldrls	pc, [pc, r4, lsl #2]
   1e244:	b	1e81c <__assert_fail@plt+0xca64>
   1e248:	andeq	pc, r1, ip, lsl r0	; <UNPREDICTABLE>
   1e24c:	andeq	lr, r1, ip, lsl r8
   1e250:	andeq	lr, r1, ip, lsl r8
   1e254:	andeq	lr, r1, ip, lsl r8
   1e258:	andeq	lr, r1, ip, lsl r8
   1e25c:	andeq	lr, r1, ip, lsl r8
   1e260:	andeq	lr, r1, ip, lsl r8
   1e264:	andeq	lr, r1, ip, lsl r8
   1e268:	andeq	lr, r1, ip, lsl r8
   1e26c:	andeq	lr, r1, ip, lsl r8
   1e270:	andeq	lr, r1, ip, lsl r8
   1e274:	andeq	lr, r1, ip, lsl r8
   1e278:	andeq	lr, r1, ip, lsl r8
   1e27c:	andeq	lr, r1, ip, lsl r8
   1e280:	andeq	lr, r1, ip, lsl r8
   1e284:	andeq	lr, r1, ip, lsl r8
   1e288:	andeq	lr, r1, ip, lsl r8
   1e28c:	andeq	lr, r1, ip, lsl r8
   1e290:	andeq	lr, r1, ip, lsl r8
   1e294:	andeq	lr, r1, ip, lsl r8
   1e298:	andeq	lr, r1, ip, lsl r8
   1e29c:	andeq	lr, r1, ip, lsl r8
   1e2a0:	andeq	lr, r1, ip, lsl r8
   1e2a4:	andeq	lr, r1, ip, lsl r8
   1e2a8:	andeq	lr, r1, ip, lsl r8
   1e2ac:	andeq	lr, r1, ip, lsl r8
   1e2b0:	andeq	lr, r1, ip, lsl r8
   1e2b4:	andeq	lr, r1, ip, lsl r8
   1e2b8:	andeq	lr, r1, ip, lsl r8
   1e2bc:	andeq	lr, r1, ip, lsl r8
   1e2c0:	andeq	lr, r1, ip, lsl r8
   1e2c4:	andeq	lr, r1, ip, lsl r8
   1e2c8:	andeq	lr, r1, ip, lsl r8
   1e2cc:	andeq	lr, r1, ip, lsl r8
   1e2d0:	andeq	lr, r1, ip, lsl r8
   1e2d4:	andeq	lr, r1, ip, lsl r8
   1e2d8:	andeq	lr, r1, ip, lsl r8
   1e2dc:	andeq	pc, r1, r0, asr r2	; <UNPREDICTABLE>
   1e2e0:	andeq	lr, r1, ip, lsl r8
   1e2e4:	andeq	lr, r1, ip, lsl r8
   1e2e8:	andeq	lr, r1, ip, lsl r8
   1e2ec:	andeq	lr, r1, ip, lsl r8
   1e2f0:	andeq	lr, r1, ip, lsl r8
   1e2f4:	andeq	lr, r1, ip, lsl r8
   1e2f8:	andeq	lr, r1, ip, lsl r8
   1e2fc:	andeq	lr, r1, ip, lsl r8
   1e300:	andeq	lr, r1, ip, lsl r8
   1e304:	andeq	lr, r1, ip, lsl r8
   1e308:	andeq	lr, r1, ip, lsl r8
   1e30c:	andeq	lr, r1, ip, lsl r8
   1e310:	andeq	lr, r1, ip, lsl r8
   1e314:	andeq	lr, r1, ip, lsl r8
   1e318:	andeq	lr, r1, ip, lsl r8
   1e31c:	andeq	lr, r1, ip, lsl r8
   1e320:	andeq	lr, r1, ip, lsl r8
   1e324:	andeq	lr, r1, ip, lsl r8
   1e328:	andeq	lr, r1, ip, lsl r8
   1e32c:	andeq	lr, r1, ip, lsl r8
   1e330:			; <UNDEFINED> instruction: 0x0001f2b4
   1e334:	andeq	lr, r1, ip, lsl r8
   1e338:	andeq	lr, r1, ip, lsl r8
   1e33c:	andeq	lr, r1, ip, lsl r8
   1e340:	andeq	lr, r1, ip, lsl r8
   1e344:	andeq	lr, r1, ip, lsl r8
   1e348:	andeq	lr, r1, ip, lsl r8
   1e34c:	ldrdeq	lr, [r1], -r4
   1e350:	andeq	pc, r1, r4, ror r1	; <UNPREDICTABLE>
   1e354:	muleq	r1, r8, r1
   1e358:	andeq	lr, r1, r4, lsr lr
   1e35c:	andeq	lr, r1, ip, lsl r8
   1e360:	andeq	lr, r1, r8, asr #28
   1e364:	andeq	lr, r1, ip, asr lr
   1e368:	andeq	lr, r1, r4, asr #31
   1e36c:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
   1e370:	andeq	lr, r1, ip, lsl r8
   1e374:	andeq	lr, r1, ip, lsl r8
   1e378:	andeq	lr, r1, ip, lsl r8
   1e37c:	andeq	lr, r1, r0, ror #31
   1e380:	strdeq	lr, [r1], -ip
   1e384:	andeq	lr, r1, ip, lsl r8
   1e388:	ldrdeq	pc, [r1], -ip
   1e38c:	andeq	lr, r1, ip, lsl r8
   1e390:	andeq	lr, r1, r0, asr sl
   1e394:	andeq	lr, r1, r0, lsr #22
   1e398:	andeq	pc, r1, r8, ror #5
   1e39c:	andeq	lr, r1, ip, lsr fp
   1e3a0:	andeq	lr, r1, ip, asr lr
   1e3a4:	andeq	lr, r1, r0, ror #27
   1e3a8:	ldrdeq	lr, [r1], -r0
   1e3ac:	andeq	lr, r1, r4, ror fp
   1e3b0:	andeq	lr, r1, r0, asr #26
   1e3b4:	andeq	lr, r1, ip, lsl r8
   1e3b8:	andeq	lr, r1, ip, lsl r8
   1e3bc:	andeq	lr, r1, ip, lsl r8
   1e3c0:	andeq	lr, r1, ip, lsl r8
   1e3c4:	andeq	lr, r1, ip, lsl r8
   1e3c8:	andeq	lr, r1, ip, lsl r8
   1e3cc:	ldrdeq	lr, [r1], -r4
   1e3d0:	andeq	lr, r1, r4, lsl #16
   1e3d4:	ldrdeq	lr, [r1], -r0
   1e3d8:			; <UNDEFINED> instruction: 0x0001e9b4
   1e3dc:	ldrdeq	lr, [r1], -r0
   1e3e0:	andeq	lr, r1, ip, lsl r8
   1e3e4:	andeq	lr, r1, ip, asr lr
   1e3e8:	andeq	lr, r1, r4, lsl #16
   1e3ec:	andeq	lr, r1, ip, lsl r8
   1e3f0:	strdeq	lr, [r1], -r8
   1e3f4:	andeq	lr, r1, ip, lsr #20
   1e3f8:	andeq	lr, r1, r0, asr #20
   1e3fc:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   1e400:	andeq	lr, r1, r4, asr r9
   1e404:	andeq	lr, r1, ip, lsl r8
   1e408:	andeq	pc, r1, r8, asr #2
   1e40c:	andeq	pc, r1, r8, rrx
   1e410:	ldrdeq	lr, [r1], -r8
   1e414:	andeq	lr, r1, r4, lsl #13
   1e418:	andeq	pc, r1, ip, ror #1
   1e41c:	andeq	lr, r1, r8, lsl #12
   1e420:	andeq	lr, r1, ip, lsl r8
   1e424:	andeq	pc, r1, r0, lsl #4
   1e428:	ldrdeq	lr, [r1], -r0
   1e42c:	andeq	lr, r1, r8, asr #15
   1e430:			; <UNDEFINED> instruction: 0x0001e8b0
   1e434:	cmp	r4, #94	; 0x5e
   1e438:	moveq	r3, #1
   1e43c:	streq	r3, [sp, #20]
   1e440:	beq	1e1f0 <__assert_fail@plt+0xc438>
   1e444:	cmp	r4, #95	; 0x5f
   1e448:	bne	1e218 <__assert_fail@plt+0xc460>
   1e44c:	mov	sl, r4
   1e450:	b	1e1f0 <__assert_fail@plt+0xc438>
   1e454:	ldrb	r4, [r5, #1]
   1e458:	add	r5, r5, #1
   1e45c:	b	1e23c <__assert_fail@plt+0xc484>
   1e460:	ldr	r0, [pc, #3144]	; 1f0b0 <__assert_fail@plt+0xd2f8>
   1e464:	mov	r6, #0
   1e468:	mov	r3, r5
   1e46c:	cmp	r6, r0
   1e470:	ldrb	r4, [r3, #1]!
   1e474:	sub	r2, r4, #48	; 0x30
   1e478:	bgt	1e4ac <__assert_fail@plt+0xc6f4>
   1e47c:	ldrb	r1, [r5]
   1e480:	beq	1e4a4 <__assert_fail@plt+0xc6ec>
   1e484:	add	r6, r6, r6, lsl #2
   1e488:	sub	r1, r1, #48	; 0x30
   1e48c:	add	r6, r1, r6, lsl #1
   1e490:	mov	r5, r3
   1e494:	cmp	r2, #9
   1e498:	bls	1e468 <__assert_fail@plt+0xc6b0>
   1e49c:	mov	r7, r4
   1e4a0:	b	1e228 <__assert_fail@plt+0xc470>
   1e4a4:	cmp	r1, #55	; 0x37
   1e4a8:	bls	1e484 <__assert_fail@plt+0xc6cc>
   1e4ac:	cmp	r2, #9
   1e4b0:	ldrbls	r4, [r5, #2]!
   1e4b4:	mvnls	r6, #-2147483648	; 0x80000000
   1e4b8:	subls	r2, r4, #48	; 0x30
   1e4bc:	bls	1e494 <__assert_fail@plt+0xc6dc>
   1e4c0:	mov	r5, r3
   1e4c4:	mov	r7, r4
   1e4c8:	mvn	r6, #-2147483648	; 0x80000000
   1e4cc:	b	1e228 <__assert_fail@plt+0xc470>
   1e4d0:	cmp	r7, #79	; 0x4f
   1e4d4:	beq	1e81c <__assert_fail@plt+0xca64>
   1e4d8:	mov	r3, #0
   1e4dc:	str	r3, [sp, #52]	; 0x34
   1e4e0:	add	r8, sp, #120	; 0x78
   1e4e4:	ldr	r3, [pc, #3016]	; 1f0b4 <__assert_fail@plt+0xd2fc>
   1e4e8:	cmp	r7, #0
   1e4ec:	strh	r3, [r8, #-12]
   1e4f0:	subeq	r0, r8, #10
   1e4f4:	bne	1f7e4 <__assert_fail@plt+0xda2c>
   1e4f8:	mov	ip, #0
   1e4fc:	strb	r4, [r0]
   1e500:	strb	ip, [r0, #1]
   1e504:	ldr	r3, [sp, #28]
   1e508:	sub	r2, r8, #12
   1e50c:	mov	r1, #1024	; 0x400
   1e510:	sub	r0, r8, #4
   1e514:	bl	11b54 <strftime@plt>
   1e518:	cmp	r0, #0
   1e51c:	beq	1e180 <__assert_fail@plt+0xc3c8>
   1e520:	bic	r2, r6, r6, asr #31
   1e524:	sub	r4, r0, #1
   1e528:	ldr	r1, [sp, #16]
   1e52c:	cmp	r4, r2
   1e530:	movcs	r3, r4
   1e534:	movcc	r3, r2
   1e538:	sub	r1, r1, fp
   1e53c:	cmp	r1, r3
   1e540:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1e544:	cmp	r9, #0
   1e548:	beq	1e5cc <__assert_fail@plt+0xc814>
   1e54c:	cmp	r4, r2
   1e550:	movcs	r2, #0
   1e554:	movcc	r2, #1
   1e558:	cmp	r7, #0
   1e55c:	moveq	r7, r2
   1e560:	movne	r7, #0
   1e564:	cmp	r7, #0
   1e568:	beq	1e598 <__assert_fail@plt+0xc7e0>
   1e56c:	cmp	sl, #48	; 0x30
   1e570:	sub	r2, r6, r4
   1e574:	moveq	r0, r9
   1e578:	movne	r0, r9
   1e57c:	moveq	r1, sl
   1e580:	movne	r1, #32
   1e584:	str	r3, [sp, #48]	; 0x30
   1e588:	add	r7, r9, r2
   1e58c:	bl	11c44 <memset@plt>
   1e590:	ldr	r3, [sp, #48]	; 0x30
   1e594:	mov	r9, r7
   1e598:	ldr	r2, [sp, #52]	; 0x34
   1e59c:	cmp	r2, #0
   1e5a0:	bne	1f42c <__assert_fail@plt+0xd674>
   1e5a4:	ldr	r2, [sp, #20]
   1e5a8:	sub	r1, r8, #3
   1e5ac:	cmp	r2, #0
   1e5b0:	str	r3, [sp, #20]
   1e5b4:	mov	r2, r4
   1e5b8:	mov	r0, r9
   1e5bc:	beq	1f420 <__assert_fail@plt+0xd668>
   1e5c0:	bl	1e09c <__assert_fail@plt+0xc2e4>
   1e5c4:	ldr	r3, [sp, #20]
   1e5c8:	add	r9, r9, r4
   1e5cc:	add	fp, fp, r3
   1e5d0:	b	1e180 <__assert_fail@plt+0xc3c8>
   1e5d4:	cmp	r7, #0
   1e5d8:	bne	1e81c <__assert_fail@plt+0xca64>
   1e5dc:	cmp	r8, #0
   1e5e0:	ldr	r3, [sp, #20]
   1e5e4:	movne	r3, r8
   1e5e8:	str	r3, [sp, #20]
   1e5ec:	add	r8, sp, #120	; 0x78
   1e5f0:	ldr	r3, [pc, #2748]	; 1f0b4 <__assert_fail@plt+0xd2fc>
   1e5f4:	mov	r7, #0
   1e5f8:	str	r7, [sp, #52]	; 0x34
   1e5fc:	strh	r3, [r8, #-12]
   1e600:	sub	r0, r8, #10
   1e604:	b	1e4f8 <__assert_fail@plt+0xc740>
   1e608:	ldr	r3, [sp, #28]
   1e60c:	mov	r2, #1
   1e610:	str	r2, [sp, #48]	; 0x30
   1e614:	ldr	r3, [r3, #24]
   1e618:	ldr	r2, [pc, #2756]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1e61c:	add	r3, r3, #6
   1e620:	smull	r1, r2, r2, r3
   1e624:	add	r1, r2, r3
   1e628:	asr	r2, r3, #31
   1e62c:	rsb	r2, r2, r1, asr #2
   1e630:	rsb	r2, r2, r2, lsl #3
   1e634:	sub	r3, r3, r2
   1e638:	add	r3, r3, #1
   1e63c:	lsr	lr, r3, #31
   1e640:	mov	r0, #0
   1e644:	str	r0, [sp, #52]	; 0x34
   1e648:	eor	r2, lr, #1
   1e64c:	cmp	r7, #79	; 0x4f
   1e650:	movne	r2, #0
   1e654:	andeq	r2, r2, #1
   1e658:	cmp	r2, #0
   1e65c:	beq	1ebb4 <__assert_fail@plt+0xcdfc>
   1e660:	add	r8, sp, #120	; 0x78
   1e664:	ldr	r3, [pc, #2632]	; 1f0b4 <__assert_fail@plt+0xd2fc>
   1e668:	mov	r2, #0
   1e66c:	str	r2, [sp, #52]	; 0x34
   1e670:	strh	r3, [r8, #-12]
   1e674:	strb	r7, [sp, #110]	; 0x6e
   1e678:	sub	r0, r8, #9
   1e67c:	ldr	r7, [sp, #48]	; 0x30
   1e680:	b	1e4f8 <__assert_fail@plt+0xc740>
   1e684:	ldr	lr, [sp, #28]
   1e688:	add	ip, sp, #64	; 0x40
   1e68c:	add	r8, sp, #120	; 0x78
   1e690:	ldm	lr!, {r0, r1, r2, r3}
   1e694:	add	r4, r8, #10
   1e698:	stmia	ip!, {r0, r1, r2, r3}
   1e69c:	ldm	lr!, {r0, r1, r2, r3}
   1e6a0:	stmia	ip!, {r0, r1, r2, r3}
   1e6a4:	ldm	lr, {r0, r1, r2}
   1e6a8:	stm	ip, {r0, r1, r2}
   1e6ac:	add	r1, sp, #64	; 0x40
   1e6b0:	ldr	r0, [sp, #32]
   1e6b4:	bl	23fd8 <_obstack_memory_used@@Base+0x3f0>
   1e6b8:	mov	r1, r0
   1e6bc:	ldr	r3, [pc, #2588]	; 1f0e0 <__assert_fail@plt+0xd328>
   1e6c0:	cmp	r0, #0
   1e6c4:	smull	r2, r3, r3, r1
   1e6c8:	asr	r2, r1, #31
   1e6cc:	rsb	r2, r2, r3, asr #2
   1e6d0:	add	r3, r2, r2, lsl #2
   1e6d4:	sub	r3, r1, r3, lsl #1
   1e6d8:	mov	r1, r2
   1e6dc:	uxtb	r3, r3
   1e6e0:	rsblt	r3, r3, #48	; 0x30
   1e6e4:	addge	r3, r3, #48	; 0x30
   1e6e8:	cmp	r2, #0
   1e6ec:	uxtb	r3, r3
   1e6f0:	strb	r3, [r4, #-1]!
   1e6f4:	bne	1e6bc <__assert_fail@plt+0xc904>
   1e6f8:	cmp	r6, #1
   1e6fc:	movge	r3, r6
   1e700:	movlt	r3, #1
   1e704:	cmp	r0, #0
   1e708:	blt	1f398 <__assert_fail@plt+0xd5e0>
   1e70c:	ldr	r2, [sp, #16]
   1e710:	add	r7, r8, #10
   1e714:	cmp	sl, #45	; 0x2d
   1e718:	sub	r7, r7, r4
   1e71c:	sub	r2, r2, fp
   1e720:	beq	1e734 <__assert_fail@plt+0xc97c>
   1e724:	sub	r1, r3, r7
   1e728:	cmp	r1, #0
   1e72c:	str	r1, [sp, #48]	; 0x30
   1e730:	bgt	1e1a8 <__assert_fail@plt+0xc3f0>
   1e734:	bic	r1, r6, r6, asr #31
   1e738:	str	r1, [sp, #48]	; 0x30
   1e73c:	ldr	r1, [sp, #48]	; 0x30
   1e740:	cmp	r7, r1
   1e744:	movcs	r8, r7
   1e748:	movcc	r8, r1
   1e74c:	cmp	r8, r2
   1e750:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1e754:	cmp	r9, #0
   1e758:	beq	1e7c0 <__assert_fail@plt+0xca08>
   1e75c:	cmp	r7, r1
   1e760:	movcs	r2, #0
   1e764:	movcc	r2, #1
   1e768:	cmp	r3, #0
   1e76c:	moveq	r3, r2
   1e770:	movne	r3, #0
   1e774:	cmp	r3, #0
   1e778:	beq	1e7a0 <__assert_fail@plt+0xc9e8>
   1e77c:	cmp	sl, #48	; 0x30
   1e780:	sub	r2, r6, r7
   1e784:	moveq	r0, r9
   1e788:	movne	r0, r9
   1e78c:	moveq	r1, sl
   1e790:	movne	r1, #32
   1e794:	add	r6, r9, r2
   1e798:	bl	11c44 <memset@plt>
   1e79c:	mov	r9, r6
   1e7a0:	ldr	r3, [sp, #20]
   1e7a4:	mov	r1, r4
   1e7a8:	cmp	r3, #0
   1e7ac:	mov	r2, r7
   1e7b0:	mov	r0, r9
   1e7b4:	beq	1f410 <__assert_fail@plt+0xd658>
   1e7b8:	bl	1e09c <__assert_fail@plt+0xc2e4>
   1e7bc:	add	r9, r9, r7
   1e7c0:	add	fp, fp, r8
   1e7c4:	b	1e180 <__assert_fail@plt+0xc3c8>
   1e7c8:	cmp	r7, #69	; 0x45
   1e7cc:	beq	1f548 <__assert_fail@plt+0xd790>
   1e7d0:	ldr	r3, [sp, #28]
   1e7d4:	ldr	r2, [r3, #20]
   1e7d8:	ldr	r3, [pc, #2292]	; 1f0d4 <__assert_fail@plt+0xd31c>
   1e7dc:	smull	r3, r1, r3, r2
   1e7e0:	asr	r3, r2, #31
   1e7e4:	rsb	r3, r3, r1, asr #5
   1e7e8:	add	r3, r3, r3, lsl #2
   1e7ec:	add	r3, r3, r3, lsl #2
   1e7f0:	subs	r3, r2, r3, lsl #2
   1e7f4:	bmi	1f708 <__assert_fail@plt+0xd950>
   1e7f8:	mov	r2, #2
   1e7fc:	str	r2, [sp, #48]	; 0x30
   1e800:	b	1e63c <__assert_fail@plt+0xc884>
   1e804:	cmp	r8, #0
   1e808:	ldr	r3, [sp, #20]
   1e80c:	movne	r3, r8
   1e810:	cmp	r7, #69	; 0x45
   1e814:	str	r3, [sp, #20]
   1e818:	bne	1e4d8 <__assert_fail@plt+0xc720>
   1e81c:	sub	r3, r5, #1
   1e820:	add	r1, r5, #1
   1e824:	mov	r7, r3
   1e828:	sub	r4, r1, r3
   1e82c:	ldrb	r2, [r3], #-1
   1e830:	cmp	r2, #37	; 0x25
   1e834:	bne	1e824 <__assert_fail@plt+0xca6c>
   1e838:	bic	r3, r6, r6, asr #31
   1e83c:	ldr	r2, [sp, #16]
   1e840:	cmp	r4, r3
   1e844:	movcs	r8, r4
   1e848:	movcc	r8, r3
   1e84c:	sub	r2, r2, fp
   1e850:	cmp	r2, r8
   1e854:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1e858:	cmp	r9, #0
   1e85c:	beq	1e7c0 <__assert_fail@plt+0xca08>
   1e860:	cmp	r4, r3
   1e864:	bcs	1e88c <__assert_fail@plt+0xcad4>
   1e868:	cmp	sl, #48	; 0x30
   1e86c:	sub	r2, r6, r4
   1e870:	moveq	r0, r9
   1e874:	movne	r0, r9
   1e878:	moveq	r1, sl
   1e87c:	movne	r1, #32
   1e880:	add	r6, r9, r2
   1e884:	bl	11c44 <memset@plt>
   1e888:	mov	r9, r6
   1e88c:	ldr	r3, [sp, #20]
   1e890:	mov	r1, r7
   1e894:	cmp	r3, #0
   1e898:	mov	r2, r4
   1e89c:	mov	r0, r9
   1e8a0:	beq	1f418 <__assert_fail@plt+0xd660>
   1e8a4:	bl	1e09c <__assert_fail@plt+0xc2e4>
   1e8a8:	add	r9, r9, r4
   1e8ac:	b	1e7c0 <__assert_fail@plt+0xca08>
   1e8b0:	mov	r3, #0
   1e8b4:	str	r3, [sp, #48]	; 0x30
   1e8b8:	ldr	r2, [sp, #28]
   1e8bc:	ldr	r3, [r2, #32]
   1e8c0:	cmp	r3, #0
   1e8c4:	blt	1e180 <__assert_fail@plt+0xc3c8>
   1e8c8:	ldr	r1, [r2, #36]	; 0x24
   1e8cc:	cmp	r1, #0
   1e8d0:	movlt	lr, #1
   1e8d4:	blt	1e8f0 <__assert_fail@plt+0xcb38>
   1e8d8:	ldreq	r3, [sp, #40]	; 0x28
   1e8dc:	movne	lr, #0
   1e8e0:	ldrbeq	lr, [r3]
   1e8e4:	subeq	lr, lr, #45	; 0x2d
   1e8e8:	clzeq	lr, lr
   1e8ec:	lsreq	lr, lr, #5
   1e8f0:	ldr	r0, [pc, #1984]	; 1f0b8 <__assert_fail@plt+0xd300>
   1e8f4:	smull	r3, r2, r0, r1
   1e8f8:	ldr	r3, [pc, #1980]	; 1f0bc <__assert_fail@plt+0xd304>
   1e8fc:	add	r2, r2, r1
   1e900:	smull	r3, ip, r3, r1
   1e904:	asr	r3, r1, #31
   1e908:	rsb	r2, r3, r2, asr #5
   1e90c:	add	ip, ip, r1
   1e910:	smull	r8, r0, r0, r2
   1e914:	add	r0, r0, r2
   1e918:	asr	r8, r2, #31
   1e91c:	rsb	r0, r8, r0, asr #5
   1e920:	rsb	r8, r2, r2, lsl #4
   1e924:	rsb	r0, r0, r0, lsl #4
   1e928:	rsb	r3, r3, ip, asr #11
   1e92c:	sub	r0, r2, r0, lsl #2
   1e930:	ldr	r2, [sp, #48]	; 0x30
   1e934:	sub	r1, r1, r8, lsl #2
   1e938:	cmp	r2, #3
   1e93c:	ldrls	pc, [pc, r2, lsl #2]
   1e940:	b	1f7f8 <__assert_fail@plt+0xda40>
   1e944:	andeq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
   1e948:	andeq	pc, r1, ip, lsr #6
   1e94c:	strdeq	pc, [r1], -r4
   1e950:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1e954:	bic	r7, r6, r6, asr #31
   1e958:	ldr	r3, [sp, #16]
   1e95c:	cmp	r7, #1
   1e960:	movcc	r7, #1
   1e964:	sub	r3, r3, fp
   1e968:	cmp	r3, r7
   1e96c:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1e970:	cmp	r9, #0
   1e974:	beq	1e9ac <__assert_fail@plt+0xcbf4>
   1e978:	cmp	r6, #1
   1e97c:	ble	1e9a4 <__assert_fail@plt+0xcbec>
   1e980:	cmp	sl, #48	; 0x30
   1e984:	sub	r2, r6, #1
   1e988:	moveq	r0, r9
   1e98c:	movne	r0, r9
   1e990:	moveq	r1, sl
   1e994:	movne	r1, #32
   1e998:	add	r4, r9, r2
   1e99c:	bl	11c44 <memset@plt>
   1e9a0:	mov	r9, r4
   1e9a4:	mov	r3, #10
   1e9a8:	strb	r3, [r9], #1
   1e9ac:	add	fp, fp, r7
   1e9b0:	b	1e180 <__assert_fail@plt+0xc3c8>
   1e9b4:	cmp	r7, #69	; 0x45
   1e9b8:	beq	1e81c <__assert_fail@plt+0xca64>
   1e9bc:	ldr	r3, [sp, #28]
   1e9c0:	mov	r2, #2
   1e9c4:	str	r2, [sp, #48]	; 0x30
   1e9c8:	ldr	r3, [r3, #12]
   1e9cc:	b	1e63c <__assert_fail@plt+0xc884>
   1e9d0:	cmp	r7, #69	; 0x45
   1e9d4:	beq	1e81c <__assert_fail@plt+0xca64>
   1e9d8:	ldr	r3, [sp, #28]
   1e9dc:	ldr	r3, [r3, #12]
   1e9e0:	cmp	sl, #48	; 0x30
   1e9e4:	cmpne	sl, #45	; 0x2d
   1e9e8:	mov	r2, #2
   1e9ec:	movne	sl, #95	; 0x5f
   1e9f0:	str	r2, [sp, #48]	; 0x30
   1e9f4:	b	1e63c <__assert_fail@plt+0xc884>
   1e9f8:	cmp	r7, #69	; 0x45
   1e9fc:	beq	1e81c <__assert_fail@plt+0xca64>
   1ea00:	ldr	r3, [sp, #28]
   1ea04:	mov	r0, #0
   1ea08:	mov	r2, #3
   1ea0c:	ldr	r3, [r3, #28]
   1ea10:	str	r0, [sp, #52]	; 0x34
   1ea14:	cmn	r3, #1
   1ea18:	movge	lr, #0
   1ea1c:	movlt	lr, #1
   1ea20:	add	r3, r3, #1
   1ea24:	str	r2, [sp, #48]	; 0x30
   1ea28:	b	1e648 <__assert_fail@plt+0xc890>
   1ea2c:	cmp	r7, #69	; 0x45
   1ea30:	beq	1e81c <__assert_fail@plt+0xca64>
   1ea34:	ldr	r3, [sp, #28]
   1ea38:	ldr	r3, [r3, #8]
   1ea3c:	b	1e9e0 <__assert_fail@plt+0xcc28>
   1ea40:	cmp	r7, #69	; 0x45
   1ea44:	beq	1e81c <__assert_fail@plt+0xca64>
   1ea48:	ldr	r3, [sp, #44]	; 0x2c
   1ea4c:	b	1e9e0 <__assert_fail@plt+0xcc28>
   1ea50:	ldr	r3, [pc, #1640]	; 1f0c0 <__assert_fail@plt+0xd308>
   1ea54:	str	r3, [sp, #48]	; 0x30
   1ea58:	ldr	r3, [sp, #1196]	; 0x4ac
   1ea5c:	ldr	r2, [sp, #48]	; 0x30
   1ea60:	str	r3, [sp, #12]
   1ea64:	ldr	r3, [sp, #32]
   1ea68:	mvn	r1, #0
   1ea6c:	str	r3, [sp, #8]
   1ea70:	ldr	r3, [sp, #36]	; 0x24
   1ea74:	mov	r0, #0
   1ea78:	str	r3, [sp, #4]
   1ea7c:	ldr	r3, [sp, #20]
   1ea80:	str	r3, [sp]
   1ea84:	ldr	r3, [sp, #28]
   1ea88:	bl	1e0dc <__assert_fail@plt+0xc324>
   1ea8c:	bic	r3, r6, r6, asr #31
   1ea90:	ldr	r2, [sp, #16]
   1ea94:	sub	r8, r2, fp
   1ea98:	cmp	r0, r3
   1ea9c:	movcs	r7, r0
   1eaa0:	movcc	r7, r3
   1eaa4:	cmp	r8, r7
   1eaa8:	mov	r4, r0
   1eaac:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1eab0:	cmp	r9, #0
   1eab4:	beq	1e9ac <__assert_fail@plt+0xcbf4>
   1eab8:	cmp	r0, r3
   1eabc:	bcs	1eae4 <__assert_fail@plt+0xcd2c>
   1eac0:	cmp	sl, #48	; 0x30
   1eac4:	sub	r2, r6, r0
   1eac8:	moveq	r1, sl
   1eacc:	moveq	r0, r9
   1ead0:	movne	r0, r9
   1ead4:	movne	r1, #32
   1ead8:	add	r6, r9, r2
   1eadc:	bl	11c44 <memset@plt>
   1eae0:	mov	r9, r6
   1eae4:	ldr	r3, [sp, #1196]	; 0x4ac
   1eae8:	mov	r0, r9
   1eaec:	str	r3, [sp, #12]
   1eaf0:	ldr	r3, [sp, #32]
   1eaf4:	ldr	r2, [sp, #48]	; 0x30
   1eaf8:	str	r3, [sp, #8]
   1eafc:	ldr	r3, [sp, #36]	; 0x24
   1eb00:	mov	r1, r8
   1eb04:	str	r3, [sp, #4]
   1eb08:	ldr	r3, [sp, #20]
   1eb0c:	add	r9, r9, r4
   1eb10:	str	r3, [sp]
   1eb14:	ldr	r3, [sp, #28]
   1eb18:	bl	1e0dc <__assert_fail@plt+0xc324>
   1eb1c:	b	1e9ac <__assert_fail@plt+0xcbf4>
   1eb20:	cmp	r7, #69	; 0x45
   1eb24:	beq	1e81c <__assert_fail@plt+0xca64>
   1eb28:	ldr	r3, [sp, #28]
   1eb2c:	mov	r2, #2
   1eb30:	str	r2, [sp, #48]	; 0x30
   1eb34:	ldr	r3, [r3]
   1eb38:	b	1e63c <__assert_fail@plt+0xc884>
   1eb3c:	cmp	r7, #69	; 0x45
   1eb40:	beq	1e81c <__assert_fail@plt+0xca64>
   1eb44:	ldr	r2, [sp, #28]
   1eb48:	mov	r1, #2
   1eb4c:	str	r1, [sp, #48]	; 0x30
   1eb50:	ldrd	r2, [r2, #24]
   1eb54:	sub	r3, r3, r2
   1eb58:	ldr	r2, [pc, #1412]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1eb5c:	add	r3, r3, #7
   1eb60:	smull	r1, r2, r2, r3
   1eb64:	add	r2, r2, r3
   1eb68:	asr	r3, r3, #31
   1eb6c:	rsb	r3, r3, r2, asr #2
   1eb70:	b	1e63c <__assert_fail@plt+0xc884>
   1eb74:	cmp	r7, #69	; 0x45
   1eb78:	beq	1f548 <__assert_fail@plt+0xd790>
   1eb7c:	cmp	r7, #79	; 0x4f
   1eb80:	beq	1e81c <__assert_fail@plt+0xca64>
   1eb84:	ldr	r3, [sp, #28]
   1eb88:	ldr	r2, [pc, #1368]	; 1f0e8 <__assert_fail@plt+0xd330>
   1eb8c:	mov	r0, #0
   1eb90:	ldr	lr, [r3, #20]
   1eb94:	str	r0, [sp, #52]	; 0x34
   1eb98:	add	r3, lr, #1888	; 0x760
   1eb9c:	cmp	lr, r2
   1eba0:	add	r3, r3, #12
   1eba4:	movge	lr, #0
   1eba8:	movlt	lr, #1
   1ebac:	mov	r2, #4
   1ebb0:	str	r2, [sp, #48]	; 0x30
   1ebb4:	cmp	lr, #0
   1ebb8:	rsbne	r3, r3, #0
   1ebbc:	add	r8, sp, #120	; 0x78
   1ebc0:	add	ip, r8, #10
   1ebc4:	mov	r7, r3
   1ebc8:	b	1ebd0 <__assert_fail@plt+0xce18>
   1ebcc:	mov	r7, r2
   1ebd0:	tst	r0, #1
   1ebd4:	subne	r3, ip, #2
   1ebd8:	sub	r4, ip, #1
   1ebdc:	movne	r2, #58	; 0x3a
   1ebe0:	strbne	r2, [ip, #-1]
   1ebe4:	movne	ip, r4
   1ebe8:	movne	r4, r3
   1ebec:	ldr	r3, [pc, #1232]	; 1f0c4 <__assert_fail@plt+0xd30c>
   1ebf0:	asrs	r0, r0, #1
   1ebf4:	movne	r1, #1
   1ebf8:	umull	r3, r2, r3, r7
   1ebfc:	moveq	r1, #0
   1ec00:	lsr	r2, r2, #3
   1ec04:	cmp	r7, #9
   1ec08:	orrhi	r1, r1, #1
   1ec0c:	add	r3, r2, r2, lsl #2
   1ec10:	cmp	r1, #0
   1ec14:	sub	r3, r7, r3, lsl #1
   1ec18:	add	r3, r3, #48	; 0x30
   1ec1c:	strb	r3, [ip, #-1]
   1ec20:	mov	ip, r4
   1ec24:	bne	1ebcc <__assert_fail@plt+0xce14>
   1ec28:	ldr	r3, [sp, #48]	; 0x30
   1ec2c:	cmp	r3, r6
   1ec30:	movlt	r3, r6
   1ec34:	cmp	lr, #0
   1ec38:	bne	1f398 <__assert_fail@plt+0xd5e0>
   1ec3c:	ldr	r2, [sp, #52]	; 0x34
   1ec40:	cmp	r2, #0
   1ec44:	beq	1e70c <__assert_fail@plt+0xc954>
   1ec48:	cmp	sl, #45	; 0x2d
   1ec4c:	beq	1f554 <__assert_fail@plt+0xd79c>
   1ec50:	mov	r2, #43	; 0x2b
   1ec54:	str	r2, [sp, #52]	; 0x34
   1ec58:	add	r7, r8, #10
   1ec5c:	sub	r7, r7, r4
   1ec60:	sub	r2, r3, r7
   1ec64:	sub	r2, r2, #1
   1ec68:	str	r2, [sp, #48]	; 0x30
   1ec6c:	cmp	r2, #0
   1ec70:	ldr	r2, [sp, #16]
   1ec74:	sub	r2, r2, fp
   1ec78:	ble	1f450 <__assert_fail@plt+0xd698>
   1ec7c:	cmp	sl, #95	; 0x5f
   1ec80:	beq	1f4dc <__assert_fail@plt+0xd724>
   1ec84:	cmp	r3, r2
   1ec88:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1ec8c:	bic	r0, r6, r6, asr #31
   1ec90:	cmp	r0, #1
   1ec94:	movcs	r1, r0
   1ec98:	movcc	r1, #1
   1ec9c:	cmp	r1, r2
   1eca0:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1eca4:	cmp	r9, #0
   1eca8:	add	fp, fp, r1
   1ecac:	beq	1ed24 <__assert_fail@plt+0xcf6c>
   1ecb0:	cmp	r0, #1
   1ecb4:	movls	r2, #0
   1ecb8:	movhi	r2, #1
   1ecbc:	cmp	r3, #0
   1ecc0:	movne	r2, #0
   1ecc4:	cmp	r2, #0
   1ecc8:	beq	1ecf4 <__assert_fail@plt+0xcf3c>
   1eccc:	sub	r2, r6, #1
   1ecd0:	cmp	sl, #48	; 0x30
   1ecd4:	str	r3, [sp, #56]	; 0x38
   1ecd8:	mov	r0, r9
   1ecdc:	add	r8, r9, r2
   1ece0:	beq	1f7c0 <__assert_fail@plt+0xda08>
   1ece4:	mov	r1, #32
   1ece8:	bl	11c44 <memset@plt>
   1ecec:	ldr	r3, [sp, #56]	; 0x38
   1ecf0:	mov	r9, r8
   1ecf4:	ldr	r2, [sp, #52]	; 0x34
   1ecf8:	strb	r2, [r9], #1
   1ecfc:	cmp	r9, #0
   1ed00:	beq	1ed24 <__assert_fail@plt+0xcf6c>
   1ed04:	ldr	r6, [sp, #48]	; 0x30
   1ed08:	mov	r0, r9
   1ed0c:	mov	r2, r6
   1ed10:	mov	r1, #48	; 0x30
   1ed14:	str	r3, [sp, #52]	; 0x34
   1ed18:	bl	11c44 <memset@plt>
   1ed1c:	ldr	r3, [sp, #52]	; 0x34
   1ed20:	add	r9, r9, r6
   1ed24:	ldr	r2, [sp, #48]	; 0x30
   1ed28:	mov	r6, #0
   1ed2c:	add	fp, fp, r2
   1ed30:	ldr	r2, [sp, #16]
   1ed34:	str	r6, [sp, #48]	; 0x30
   1ed38:	sub	r2, r2, fp
   1ed3c:	b	1e73c <__assert_fail@plt+0xc984>
   1ed40:	ldr	r3, [sp, #20]
   1ed44:	cmp	r8, #0
   1ed48:	movne	r3, #0
   1ed4c:	ldr	r0, [sp, #40]	; 0x28
   1ed50:	str	r3, [sp, #20]
   1ed54:	bl	11bf0 <strlen@plt>
   1ed58:	bic	r3, r6, r6, asr #31
   1ed5c:	ldr	r2, [sp, #16]
   1ed60:	sub	r2, r2, fp
   1ed64:	cmp	r0, r3
   1ed68:	movcs	r4, r0
   1ed6c:	movcc	r4, r3
   1ed70:	cmp	r2, r4
   1ed74:	mov	r7, r0
   1ed78:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1ed7c:	cmp	r9, #0
   1ed80:	beq	1edd8 <__assert_fail@plt+0xd020>
   1ed84:	cmp	r0, r3
   1ed88:	bcs	1edb0 <__assert_fail@plt+0xcff8>
   1ed8c:	cmp	sl, #48	; 0x30
   1ed90:	sub	r2, r6, r0
   1ed94:	moveq	r1, sl
   1ed98:	moveq	r0, r9
   1ed9c:	movne	r0, r9
   1eda0:	movne	r1, #32
   1eda4:	add	r6, r9, r2
   1eda8:	bl	11c44 <memset@plt>
   1edac:	mov	r9, r6
   1edb0:	cmp	r8, #0
   1edb4:	bne	1f72c <__assert_fail@plt+0xd974>
   1edb8:	ldr	r3, [sp, #20]
   1edbc:	mov	r2, r7
   1edc0:	cmp	r3, #0
   1edc4:	ldr	r1, [sp, #40]	; 0x28
   1edc8:	mov	r0, r9
   1edcc:	beq	1f724 <__assert_fail@plt+0xd96c>
   1edd0:	bl	1e09c <__assert_fail@plt+0xc2e4>
   1edd4:	add	r9, r9, r7
   1edd8:	add	fp, fp, r4
   1eddc:	b	1e180 <__assert_fail@plt+0xc3c8>
   1ede0:	cmp	r7, #69	; 0x45
   1ede4:	beq	1e81c <__assert_fail@plt+0xca64>
   1ede8:	ldr	r3, [sp, #28]
   1edec:	ldr	ip, [pc, #752]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1edf0:	ldrd	r2, [r3, #24]
   1edf4:	add	r2, r2, #6
   1edf8:	smull	r0, r1, ip, r2
   1edfc:	add	r0, r1, r2
   1ee00:	asr	r1, r2, #31
   1ee04:	rsb	r1, r1, r0, asr #2
   1ee08:	mov	r0, #2
   1ee0c:	rsb	r1, r1, r1, lsl #3
   1ee10:	sub	r2, r2, r1
   1ee14:	sub	r3, r3, r2
   1ee18:	add	r3, r3, #7
   1ee1c:	str	r0, [sp, #48]	; 0x30
   1ee20:	smull	r1, r2, ip, r3
   1ee24:	add	r2, r2, r3
   1ee28:	asr	r3, r3, #31
   1ee2c:	rsb	r3, r3, r2, asr r0
   1ee30:	b	1e63c <__assert_fail@plt+0xc884>
   1ee34:	cmp	r7, #0
   1ee38:	bne	1e81c <__assert_fail@plt+0xca64>
   1ee3c:	ldr	r3, [pc, #644]	; 1f0c8 <__assert_fail@plt+0xd310>
   1ee40:	str	r3, [sp, #48]	; 0x30
   1ee44:	b	1ea58 <__assert_fail@plt+0xcca0>
   1ee48:	cmp	r7, #0
   1ee4c:	bne	1e81c <__assert_fail@plt+0xca64>
   1ee50:	ldr	r3, [pc, #628]	; 1f0cc <__assert_fail@plt+0xd314>
   1ee54:	str	r3, [sp, #48]	; 0x30
   1ee58:	b	1ea58 <__assert_fail@plt+0xcca0>
   1ee5c:	cmp	r7, #69	; 0x45
   1ee60:	beq	1e81c <__assert_fail@plt+0xca64>
   1ee64:	ldr	r3, [sp, #28]
   1ee68:	ldr	r0, [r3, #28]
   1ee6c:	ldr	r2, [r3, #24]
   1ee70:	ldr	r8, [r3, #20]
   1ee74:	sub	r3, r0, r2
   1ee78:	str	r2, [sp, #52]	; 0x34
   1ee7c:	add	r3, r3, #380	; 0x17c
   1ee80:	ldr	r2, [pc, #604]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1ee84:	add	r3, r3, #2
   1ee88:	cmp	r8, #0
   1ee8c:	smull	r1, r2, r2, r3
   1ee90:	str	r0, [sp, #48]	; 0x30
   1ee94:	add	r1, r2, r3
   1ee98:	asr	r2, r3, #31
   1ee9c:	rsb	r2, r2, r1, asr #2
   1eea0:	movlt	r1, #300	; 0x12c
   1eea4:	rsb	r2, r2, r2, lsl #3
   1eea8:	sub	r3, r3, r2
   1eeac:	sub	r3, r0, r3
   1eeb0:	mvnge	r1, #99	; 0x63
   1eeb4:	adds	r3, r3, #3
   1eeb8:	add	r1, r8, r1
   1eebc:	bmi	1f5bc <__assert_fail@plt+0xd804>
   1eec0:	tst	r1, #3
   1eec4:	ldrne	r2, [pc, #524]	; 1f0d8 <__assert_fail@plt+0xd320>
   1eec8:	bne	1ef0c <__assert_fail@plt+0xd154>
   1eecc:	ldr	r2, [pc, #512]	; 1f0d4 <__assert_fail@plt+0xd31c>
   1eed0:	smull	r2, ip, r2, r1
   1eed4:	asr	r2, r1, #31
   1eed8:	rsb	r0, r2, ip, asr #5
   1eedc:	add	r0, r0, r0, lsl #2
   1eee0:	add	r0, r0, r0, lsl #2
   1eee4:	cmp	r1, r0, lsl #2
   1eee8:	ldrne	r2, [pc, #492]	; 1f0dc <__assert_fail@plt+0xd324>
   1eeec:	bne	1ef0c <__assert_fail@plt+0xd154>
   1eef0:	rsb	r0, r2, ip, asr #7
   1eef4:	ldr	ip, [pc, #480]	; 1f0dc <__assert_fail@plt+0xd324>
   1eef8:	add	r0, r0, r0, lsl #2
   1eefc:	ldr	r2, [pc, #468]	; 1f0d8 <__assert_fail@plt+0xd320>
   1ef00:	add	r0, r0, r0, lsl #2
   1ef04:	cmp	r1, r0, lsl #4
   1ef08:	moveq	r2, ip
   1ef0c:	ldr	r1, [sp, #48]	; 0x30
   1ef10:	sub	ip, r1, r2
   1ef14:	ldr	r2, [sp, #52]	; 0x34
   1ef18:	ldr	r1, [pc, #452]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1ef1c:	sub	r2, ip, r2
   1ef20:	add	r2, r2, #380	; 0x17c
   1ef24:	add	r2, r2, #2
   1ef28:	smull	r0, r1, r1, r2
   1ef2c:	add	r0, r1, r2
   1ef30:	asr	r1, r2, #31
   1ef34:	rsb	r1, r1, r0, asr #2
   1ef38:	rsb	r1, r1, r1, lsl #3
   1ef3c:	sub	r2, r2, r1
   1ef40:	sub	r2, ip, r2
   1ef44:	add	r2, r2, #3
   1ef48:	cmp	r2, #0
   1ef4c:	movge	r3, r2
   1ef50:	movlt	r2, #0
   1ef54:	movge	r2, #1
   1ef58:	cmp	r4, #71	; 0x47
   1ef5c:	beq	1f6d4 <__assert_fail@plt+0xd91c>
   1ef60:	cmp	r4, #103	; 0x67
   1ef64:	bne	1f6b0 <__assert_fail@plt+0xd8f8>
   1ef68:	ldr	r0, [pc, #356]	; 1f0d4 <__assert_fail@plt+0xd31c>
   1ef6c:	smull	r3, r1, r0, r8
   1ef70:	asr	r3, r8, #31
   1ef74:	rsb	r3, r3, r1, asr #5
   1ef78:	add	r3, r3, r3, lsl #2
   1ef7c:	add	r3, r3, r3, lsl #2
   1ef80:	sub	r1, r8, r3, lsl #2
   1ef84:	add	r1, r1, r2
   1ef88:	smull	r3, r0, r0, r1
   1ef8c:	asr	r3, r1, #31
   1ef90:	rsb	r3, r3, r0, asr #5
   1ef94:	add	r3, r3, r3, lsl #2
   1ef98:	add	r3, r3, r3, lsl #2
   1ef9c:	subs	r3, r1, r3, lsl #2
   1efa0:	bpl	1e7f8 <__assert_fail@plt+0xca40>
   1efa4:	ldr	r1, [pc, #316]	; 1f0e8 <__assert_fail@plt+0xd330>
   1efa8:	sub	r1, r1, r2
   1efac:	cmp	r1, r8
   1efb0:	ble	1f714 <__assert_fail@plt+0xd95c>
   1efb4:	mov	r2, #2
   1efb8:	rsb	r3, r3, #0
   1efbc:	str	r2, [sp, #48]	; 0x30
   1efc0:	b	1e63c <__assert_fail@plt+0xc884>
   1efc4:	cmp	r7, #69	; 0x45
   1efc8:	beq	1e81c <__assert_fail@plt+0xca64>
   1efcc:	ldr	r3, [sp, #28]
   1efd0:	mov	r2, #2
   1efd4:	str	r2, [sp, #48]	; 0x30
   1efd8:	ldr	r3, [r3, #8]
   1efdc:	b	1e63c <__assert_fail@plt+0xc884>
   1efe0:	cmp	r7, #69	; 0x45
   1efe4:	beq	1e81c <__assert_fail@plt+0xca64>
   1efe8:	ldr	r3, [sp, #28]
   1efec:	mov	r2, #2
   1eff0:	str	r2, [sp, #48]	; 0x30
   1eff4:	ldr	r3, [r3, #4]
   1eff8:	b	1e63c <__assert_fail@plt+0xc884>
   1effc:	cmp	r7, #69	; 0x45
   1f000:	beq	1e81c <__assert_fail@plt+0xca64>
   1f004:	cmn	r6, #1
   1f008:	bne	1f650 <__assert_fail@plt+0xd898>
   1f00c:	mov	r6, #9
   1f010:	str	r6, [sp, #48]	; 0x30
   1f014:	ldr	r3, [sp, #1196]	; 0x4ac
   1f018:	b	1e63c <__assert_fail@plt+0xc884>
   1f01c:	ldrb	r3, [r5, #-1]
   1f020:	sub	r7, r5, #1
   1f024:	cmp	r3, #37	; 0x25
   1f028:	ldr	r3, [sp, #16]
   1f02c:	sub	r2, r3, fp
   1f030:	bic	r3, r6, r6, asr #31
   1f034:	bne	1f7f0 <__assert_fail@plt+0xda38>
   1f038:	cmp	r3, #1
   1f03c:	movcs	r8, r3
   1f040:	movcc	r8, #1
   1f044:	mov	r5, r7
   1f048:	mov	r4, #1
   1f04c:	b	1e850 <__assert_fail@plt+0xca98>
   1f050:	cmp	r7, #69	; 0x45
   1f054:	beq	1e81c <__assert_fail@plt+0xca64>
   1f058:	mov	r2, #2
   1f05c:	ldr	r3, [sp, #44]	; 0x2c
   1f060:	str	r2, [sp, #48]	; 0x30
   1f064:	b	1e63c <__assert_fail@plt+0xc884>
   1f068:	ldr	r3, [sp, #28]
   1f06c:	cmp	r7, #79	; 0x4f
   1f070:	ldr	r3, [r3, #16]
   1f074:	moveq	r3, #1
   1f078:	streq	r3, [sp, #48]	; 0x30
   1f07c:	beq	1e660 <__assert_fail@plt+0xc8a8>
   1f080:	add	r2, r3, r3, lsl #2
   1f084:	mov	r0, #0
   1f088:	add	r3, r3, r2, lsl #1
   1f08c:	mov	r2, #1
   1f090:	asr	r3, r3, #5
   1f094:	str	r0, [sp, #52]	; 0x34
   1f098:	mov	lr, r0
   1f09c:	add	r3, r3, #1
   1f0a0:	str	r2, [sp, #48]	; 0x30
   1f0a4:	b	1ebbc <__assert_fail@plt+0xce04>
   1f0a8:	andeq	r9, r3, r0, lsl #30
   1f0ac:	ldrdeq	r7, [r2], -r0
   1f0b0:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1f0b4:	andeq	r2, r0, r0, lsr #10
   1f0b8:	stmhi	r8, {r0, r3, r7, fp, pc}
   1f0bc:			; <UNDEFINED> instruction: 0x91a2b3c5
   1f0c0:	andeq	r8, r2, r8, lsr pc
   1f0c4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1f0c8:	andeq	r8, r2, ip, lsr #30
   1f0cc:	andeq	r8, r2, r0, asr #30
   1f0d0:	andeq	r8, r2, r0, lsr #30
   1f0d4:	mvnpl	r8, pc, lsl r5
   1f0d8:	andeq	r0, r0, sp, ror #2
   1f0dc:	andeq	r0, r0, lr, ror #2
   1f0e0:	strbtvs	r6, [r6], -r7, ror #12
   1f0e4:	subls	r2, r9, #-1828716544	; 0x93000000
   1f0e8:			; <UNDEFINED> instruction: 0xfffff894
   1f0ec:	bic	r7, r6, r6, asr #31
   1f0f0:	ldr	r3, [sp, #16]
   1f0f4:	cmp	r7, #1
   1f0f8:	movcc	r7, #1
   1f0fc:	sub	r3, r3, fp
   1f100:	cmp	r3, r7
   1f104:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1f108:	cmp	r9, #0
   1f10c:	beq	1e9ac <__assert_fail@plt+0xcbf4>
   1f110:	cmp	r6, #1
   1f114:	ble	1f13c <__assert_fail@plt+0xd384>
   1f118:	cmp	sl, #48	; 0x30
   1f11c:	sub	r2, r6, #1
   1f120:	moveq	r0, r9
   1f124:	movne	r0, r9
   1f128:	moveq	r1, sl
   1f12c:	movne	r1, #32
   1f130:	add	r4, r9, r2
   1f134:	bl	11c44 <memset@plt>
   1f138:	mov	r9, r4
   1f13c:	mov	r3, #9
   1f140:	strb	r3, [r9], #1
   1f144:	b	1e9ac <__assert_fail@plt+0xcbf4>
   1f148:	mov	r3, #0
   1f14c:	str	r3, [sp, #52]	; 0x34
   1f150:	ldr	r3, [sp, #52]	; 0x34
   1f154:	cmp	r8, #0
   1f158:	movne	r3, r8
   1f15c:	str	r3, [sp, #52]	; 0x34
   1f160:	ldr	r3, [sp, #20]
   1f164:	movne	r3, #0
   1f168:	str	r3, [sp, #20]
   1f16c:	mov	r4, #112	; 0x70
   1f170:	b	1e4e0 <__assert_fail@plt+0xc728>
   1f174:	cmp	r7, #69	; 0x45
   1f178:	beq	1e81c <__assert_fail@plt+0xca64>
   1f17c:	ldr	r3, [sp, #20]
   1f180:	cmp	r8, #0
   1f184:	movne	r3, r8
   1f188:	str	r3, [sp, #20]
   1f18c:	mov	r3, #0
   1f190:	str	r3, [sp, #52]	; 0x34
   1f194:	b	1e4e0 <__assert_fail@plt+0xc728>
   1f198:	cmp	r7, #69	; 0x45
   1f19c:	beq	1f548 <__assert_fail@plt+0xd790>
   1f1a0:	ldr	r3, [sp, #28]
   1f1a4:	mov	r0, #0
   1f1a8:	ldr	lr, [pc, #-200]	; 1f0e8 <__assert_fail@plt+0xd330>
   1f1ac:	ldr	ip, [r3, #20]
   1f1b0:	ldr	r3, [pc, #-228]	; 1f0d4 <__assert_fail@plt+0xd31c>
   1f1b4:	str	r0, [sp, #52]	; 0x34
   1f1b8:	smull	r2, r3, r3, ip
   1f1bc:	asr	r2, ip, #31
   1f1c0:	rsb	r2, r2, r3, asr #5
   1f1c4:	add	r3, r2, #19
   1f1c8:	add	r2, r2, r2, lsl #2
   1f1cc:	cmp	r3, r0
   1f1d0:	add	r2, r2, r2, lsl #2
   1f1d4:	movle	r1, #0
   1f1d8:	sub	r2, ip, r2, lsl #2
   1f1dc:	movgt	r1, #1
   1f1e0:	and	r2, r1, r2, lsr #31
   1f1e4:	cmp	ip, lr
   1f1e8:	sub	r3, r3, r2
   1f1ec:	mov	r2, #2
   1f1f0:	movge	lr, #0
   1f1f4:	movlt	lr, #1
   1f1f8:	str	r2, [sp, #48]	; 0x30
   1f1fc:	b	1e648 <__assert_fail@plt+0xc890>
   1f200:	cmp	r7, #69	; 0x45
   1f204:	beq	1e81c <__assert_fail@plt+0xca64>
   1f208:	ldr	r3, [sp, #28]
   1f20c:	mov	r2, #1
   1f210:	str	r2, [sp, #48]	; 0x30
   1f214:	ldr	r3, [r3, #24]
   1f218:	b	1e63c <__assert_fail@plt+0xc884>
   1f21c:	cmp	r7, #69	; 0x45
   1f220:	beq	1e81c <__assert_fail@plt+0xca64>
   1f224:	ldr	r3, [sp, #28]
   1f228:	mov	r0, #0
   1f22c:	mov	r2, #2
   1f230:	ldr	r3, [r3, #16]
   1f234:	str	r0, [sp, #52]	; 0x34
   1f238:	cmn	r3, #1
   1f23c:	movge	lr, #0
   1f240:	movlt	lr, #1
   1f244:	add	r3, r3, #1
   1f248:	str	r2, [sp, #48]	; 0x30
   1f24c:	b	1e648 <__assert_fail@plt+0xc890>
   1f250:	bic	r3, r6, r6, asr #31
   1f254:	ldr	r2, [sp, #16]
   1f258:	cmp	r3, #1
   1f25c:	movcs	r8, r3
   1f260:	movcc	r8, #1
   1f264:	cmp	r7, #0
   1f268:	sub	r2, r2, fp
   1f26c:	bne	1f764 <__assert_fail@plt+0xd9ac>
   1f270:	cmp	r8, r2
   1f274:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1f278:	cmp	r9, #0
   1f27c:	beq	1e7c0 <__assert_fail@plt+0xca08>
   1f280:	cmp	r6, #1
   1f284:	ble	1f2ac <__assert_fail@plt+0xd4f4>
   1f288:	sub	r2, r6, #1
   1f28c:	cmp	sl, #48	; 0x30
   1f290:	add	r7, r9, r2
   1f294:	beq	1f784 <__assert_fail@plt+0xd9cc>
   1f298:	mov	r0, r9
   1f29c:	mov	r1, #32
   1f2a0:	bl	11c44 <memset@plt>
   1f2a4:	ldrb	r4, [r5]
   1f2a8:	mov	r9, r7
   1f2ac:	strb	r4, [r9], #1
   1f2b0:	b	1e7c0 <__assert_fail@plt+0xca08>
   1f2b4:	ldrb	r3, [r5, #1]
   1f2b8:	add	r2, r5, #1
   1f2bc:	cmp	r3, #58	; 0x3a
   1f2c0:	beq	1f740 <__assert_fail@plt+0xd988>
   1f2c4:	mov	r1, #1
   1f2c8:	str	r1, [sp, #48]	; 0x30
   1f2cc:	cmp	r3, #122	; 0x7a
   1f2d0:	moveq	r5, r2
   1f2d4:	beq	1e8b8 <__assert_fail@plt+0xcb00>
   1f2d8:	b	1e81c <__assert_fail@plt+0xca64>
   1f2dc:	mov	r3, #1
   1f2e0:	str	r3, [sp, #52]	; 0x34
   1f2e4:	b	1f150 <__assert_fail@plt+0xd398>
   1f2e8:	ldr	r3, [pc, #-544]	; 1f0d0 <__assert_fail@plt+0xd318>
   1f2ec:	str	r3, [sp, #48]	; 0x30
   1f2f0:	b	1ea58 <__assert_fail@plt+0xcca0>
   1f2f4:	rsb	r2, r3, r3, lsl #5
   1f2f8:	add	r0, r0, r0, lsl #2
   1f2fc:	add	r3, r3, r2, lsl #2
   1f300:	add	r0, r0, r0, lsl #2
   1f304:	add	ip, r3, r3, lsl #2
   1f308:	mov	r2, #1
   1f30c:	lsl	r3, r0, #2
   1f310:	add	r3, r3, ip, lsl #4
   1f314:	str	r2, [sp, #52]	; 0x34
   1f318:	mov	r2, #9
   1f31c:	add	r3, r3, r1
   1f320:	mov	r0, #20
   1f324:	str	r2, [sp, #48]	; 0x30
   1f328:	b	1e648 <__assert_fail@plt+0xc890>
   1f32c:	add	r3, r3, r3, lsl #2
   1f330:	mov	r2, #1
   1f334:	add	r3, r3, r3, lsl #2
   1f338:	str	r2, [sp, #52]	; 0x34
   1f33c:	mov	r2, #6
   1f340:	add	r3, r0, r3, lsl #2
   1f344:	str	r2, [sp, #48]	; 0x30
   1f348:	mov	r0, #4
   1f34c:	b	1e648 <__assert_fail@plt+0xc890>
   1f350:	add	r3, r3, r3, lsl #2
   1f354:	mov	r2, #1
   1f358:	add	r3, r3, r3, lsl #2
   1f35c:	str	r2, [sp, #52]	; 0x34
   1f360:	mov	r2, #5
   1f364:	add	r3, r0, r3, lsl #2
   1f368:	str	r2, [sp, #48]	; 0x30
   1f36c:	mov	r0, #0
   1f370:	b	1e648 <__assert_fail@plt+0xc890>
   1f374:	cmp	r1, #0
   1f378:	bne	1f2f4 <__assert_fail@plt+0xd53c>
   1f37c:	cmp	r0, #0
   1f380:	bne	1f32c <__assert_fail@plt+0xd574>
   1f384:	mov	r2, #1
   1f388:	str	r2, [sp, #52]	; 0x34
   1f38c:	mov	r2, #3
   1f390:	str	r2, [sp, #48]	; 0x30
   1f394:	b	1e648 <__assert_fail@plt+0xc890>
   1f398:	cmp	sl, #45	; 0x2d
   1f39c:	movne	r2, #45	; 0x2d
   1f3a0:	strne	r2, [sp, #52]	; 0x34
   1f3a4:	bne	1ec58 <__assert_fail@plt+0xcea0>
   1f3a8:	bic	r1, r6, r6, asr #31
   1f3ac:	ldr	r2, [sp, #16]
   1f3b0:	cmp	r1, #1
   1f3b4:	movcs	r7, r1
   1f3b8:	movcc	r7, #1
   1f3bc:	sub	r2, r2, fp
   1f3c0:	cmp	r2, r7
   1f3c4:	str	r1, [sp, #48]	; 0x30
   1f3c8:	bls	1e1b8 <__assert_fail@plt+0xc400>
   1f3cc:	cmp	r9, #0
   1f3d0:	beq	1f3f4 <__assert_fail@plt+0xd63c>
   1f3d4:	cmp	r1, #1
   1f3d8:	movls	r2, #0
   1f3dc:	movhi	r2, #1
   1f3e0:	cmp	r3, #0
   1f3e4:	movne	r2, #0
   1f3e8:	cmp	r2, #0
   1f3ec:	bne	1f684 <__assert_fail@plt+0xd8cc>
   1f3f0:	strb	sl, [r9], #1
   1f3f4:	ldr	r2, [sp, #16]
   1f3f8:	add	fp, fp, r7
   1f3fc:	add	r7, r8, #10
   1f400:	sub	r7, r7, r4
   1f404:	sub	r2, r2, fp
   1f408:	mov	sl, #45	; 0x2d
   1f40c:	b	1e73c <__assert_fail@plt+0xc984>
   1f410:	bl	1195c <memcpy@plt>
   1f414:	b	1e7bc <__assert_fail@plt+0xca04>
   1f418:	bl	1195c <memcpy@plt>
   1f41c:	b	1e8a8 <__assert_fail@plt+0xcaf0>
   1f420:	bl	1195c <memcpy@plt>
   1f424:	ldr	r3, [sp, #20]
   1f428:	b	1e5c8 <__assert_fail@plt+0xc810>
   1f42c:	sub	r1, r8, #3
   1f430:	mov	r2, r4
   1f434:	mov	r0, r9
   1f438:	str	r3, [sp, #20]
   1f43c:	bl	1e05c <__assert_fail@plt+0xc2a4>
   1f440:	ldr	r3, [sp, #20]
   1f444:	b	1e5c8 <__assert_fail@plt+0xc810>
   1f448:	mov	fp, r3
   1f44c:	b	1e190 <__assert_fail@plt+0xc3d8>
   1f450:	bic	r1, r6, r6, asr #31
   1f454:	cmp	r1, #1
   1f458:	movcs	r8, r1
   1f45c:	movcc	r8, #1
   1f460:	cmp	r8, r2
   1f464:	str	r1, [sp, #48]	; 0x30
   1f468:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1f46c:	cmp	r9, #0
   1f470:	beq	1f4c4 <__assert_fail@plt+0xd70c>
   1f474:	cmp	r1, #1
   1f478:	movls	r2, #0
   1f47c:	movhi	r2, #1
   1f480:	cmp	r3, #0
   1f484:	movne	r2, #0
   1f488:	cmp	r2, #0
   1f48c:	beq	1f4bc <__assert_fail@plt+0xd704>
   1f490:	sub	r2, r6, #1
   1f494:	add	r1, r9, r2
   1f498:	cmp	sl, #48	; 0x30
   1f49c:	str	r1, [sp, #56]	; 0x38
   1f4a0:	str	r3, [sp, #60]	; 0x3c
   1f4a4:	mov	r0, r9
   1f4a8:	beq	1f770 <__assert_fail@plt+0xd9b8>
   1f4ac:	mov	r1, #32
   1f4b0:	bl	11c44 <memset@plt>
   1f4b4:	ldr	r9, [sp, #56]	; 0x38
   1f4b8:	ldr	r3, [sp, #60]	; 0x3c
   1f4bc:	ldr	r2, [sp, #52]	; 0x34
   1f4c0:	strb	r2, [r9], #1
   1f4c4:	ldr	r2, [sp, #16]
   1f4c8:	add	fp, fp, r8
   1f4cc:	sub	r2, r2, fp
   1f4d0:	b	1e73c <__assert_fail@plt+0xc984>
   1f4d4:	mov	r1, #0
   1f4d8:	str	r1, [sp, #52]	; 0x34
   1f4dc:	ldr	r7, [sp, #48]	; 0x30
   1f4e0:	cmp	r7, r2
   1f4e4:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1f4e8:	cmp	r9, #0
   1f4ec:	beq	1f50c <__assert_fail@plt+0xd754>
   1f4f0:	mov	r0, r9
   1f4f4:	mov	r2, r7
   1f4f8:	mov	r1, #32
   1f4fc:	str	r3, [sp, #56]	; 0x38
   1f500:	bl	11c44 <memset@plt>
   1f504:	ldr	r3, [sp, #56]	; 0x38
   1f508:	add	r9, r9, r7
   1f50c:	ldr	r2, [sp, #48]	; 0x30
   1f510:	cmp	r2, r6
   1f514:	add	fp, fp, r2
   1f518:	sublt	r6, r6, r2
   1f51c:	ldr	r2, [sp, #52]	; 0x34
   1f520:	movge	r6, #0
   1f524:	cmp	r2, #0
   1f528:	ldr	r2, [sp, #16]
   1f52c:	sub	r2, r2, fp
   1f530:	bne	1f55c <__assert_fail@plt+0xd7a4>
   1f534:	add	r7, r8, #10
   1f538:	sub	r7, r7, r4
   1f53c:	str	r6, [sp, #48]	; 0x30
   1f540:	mov	sl, #95	; 0x5f
   1f544:	b	1e73c <__assert_fail@plt+0xc984>
   1f548:	mov	r3, #0
   1f54c:	str	r3, [sp, #48]	; 0x30
   1f550:	b	1e660 <__assert_fail@plt+0xc8a8>
   1f554:	mov	sl, #43	; 0x2b
   1f558:	b	1f3a8 <__assert_fail@plt+0xd5f0>
   1f55c:	cmp	r6, #1
   1f560:	movcs	sl, r6
   1f564:	movcc	sl, #1
   1f568:	cmp	sl, r2
   1f56c:	bcs	1e1b8 <__assert_fail@plt+0xc400>
   1f570:	cmp	r9, #0
   1f574:	beq	1f59c <__assert_fail@plt+0xd7e4>
   1f578:	cmp	r6, #1
   1f57c:	movls	r2, #0
   1f580:	movhi	r2, #1
   1f584:	cmp	r3, #0
   1f588:	movne	r2, #0
   1f58c:	cmp	r2, #0
   1f590:	bne	1f79c <__assert_fail@plt+0xd9e4>
   1f594:	ldr	r2, [sp, #52]	; 0x34
   1f598:	strb	r2, [r9], #1
   1f59c:	ldr	r2, [sp, #16]
   1f5a0:	add	fp, fp, sl
   1f5a4:	add	r7, r8, #10
   1f5a8:	sub	r7, r7, r4
   1f5ac:	sub	r2, r2, fp
   1f5b0:	str	r6, [sp, #48]	; 0x30
   1f5b4:	mov	sl, #95	; 0x5f
   1f5b8:	b	1e73c <__assert_fail@plt+0xc984>
   1f5bc:	sub	r0, r1, #1
   1f5c0:	tst	r0, #3
   1f5c4:	ldrne	r1, [pc, #-1268]	; 1f0d8 <__assert_fail@plt+0xd320>
   1f5c8:	bne	1f60c <__assert_fail@plt+0xd854>
   1f5cc:	ldr	r3, [pc, #-1280]	; 1f0d4 <__assert_fail@plt+0xd31c>
   1f5d0:	smull	r3, r2, r3, r0
   1f5d4:	asr	r3, r0, #31
   1f5d8:	rsb	r3, r3, r2, asr #5
   1f5dc:	add	r3, r3, r3, lsl #2
   1f5e0:	add	r3, r3, r3, lsl #2
   1f5e4:	cmp	r0, r3, lsl #2
   1f5e8:	ldrne	r1, [pc, #-1300]	; 1f0dc <__assert_fail@plt+0xd324>
   1f5ec:	bne	1f60c <__assert_fail@plt+0xd854>
   1f5f0:	mov	r1, #400	; 0x190
   1f5f4:	bl	2481c <_obstack_memory_used@@Base+0xc34>
   1f5f8:	ldr	r3, [pc, #-1320]	; 1f0d8 <__assert_fail@plt+0xd320>
   1f5fc:	ldr	r2, [pc, #-1320]	; 1f0dc <__assert_fail@plt+0xd324>
   1f600:	cmp	r1, #0
   1f604:	movne	r1, r3
   1f608:	moveq	r1, r2
   1f60c:	ldr	r3, [sp, #48]	; 0x30
   1f610:	mvn	r2, #0
   1f614:	add	ip, r3, r1
   1f618:	ldr	r3, [sp, #52]	; 0x34
   1f61c:	ldr	r1, [pc, #-1344]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1f620:	sub	r3, ip, r3
   1f624:	add	r3, r3, #380	; 0x17c
   1f628:	add	r3, r3, #2
   1f62c:	smull	r0, r1, r1, r3
   1f630:	add	r0, r1, r3
   1f634:	asr	r1, r3, #31
   1f638:	rsb	r1, r1, r0, asr #2
   1f63c:	rsb	r1, r1, r1, lsl #3
   1f640:	sub	r3, r3, r1
   1f644:	sub	r3, ip, r3
   1f648:	add	r3, r3, #3
   1f64c:	b	1ef58 <__assert_fail@plt+0xd1a0>
   1f650:	cmp	r6, #8
   1f654:	bgt	1f7d4 <__assert_fail@plt+0xda1c>
   1f658:	ldr	r3, [sp, #1196]	; 0x4ac
   1f65c:	mov	r2, r6
   1f660:	ldr	r1, [pc, #-1416]	; 1f0e0 <__assert_fail@plt+0xd328>
   1f664:	add	r2, r2, #1
   1f668:	cmp	r2, #9
   1f66c:	smull	r0, r1, r1, r3
   1f670:	asr	r3, r3, #31
   1f674:	rsb	r3, r3, r1, asr #2
   1f678:	bne	1f660 <__assert_fail@plt+0xd8a8>
   1f67c:	str	r6, [sp, #48]	; 0x30
   1f680:	b	1e63c <__assert_fail@plt+0xc884>
   1f684:	str	r3, [sp, #56]	; 0x38
   1f688:	sub	r3, r6, #1
   1f68c:	mov	r2, r3
   1f690:	mov	r0, r9
   1f694:	mov	r1, #32
   1f698:	str	r3, [sp, #52]	; 0x34
   1f69c:	bl	11c44 <memset@plt>
   1f6a0:	ldr	r3, [sp, #52]	; 0x34
   1f6a4:	add	r9, r9, r3
   1f6a8:	ldr	r3, [sp, #56]	; 0x38
   1f6ac:	b	1f3f0 <__assert_fail@plt+0xd638>
   1f6b0:	ldr	r2, [pc, #-1492]	; 1f0e4 <__assert_fail@plt+0xd32c>
   1f6b4:	smull	r1, r2, r2, r3
   1f6b8:	add	r2, r2, r3
   1f6bc:	asr	r3, r3, #31
   1f6c0:	rsb	r3, r3, r2, asr #2
   1f6c4:	mov	r2, #2
   1f6c8:	add	r3, r3, #1
   1f6cc:	str	r2, [sp, #48]	; 0x30
   1f6d0:	b	1e63c <__assert_fail@plt+0xc884>
   1f6d4:	ldr	lr, [pc, #-1524]	; 1f0e8 <__assert_fail@plt+0xd330>
   1f6d8:	add	r3, r8, #1888	; 0x760
   1f6dc:	sub	lr, lr, r2
   1f6e0:	add	r3, r3, #12
   1f6e4:	cmp	r8, lr
   1f6e8:	mov	r0, #0
   1f6ec:	add	r3, r3, r2
   1f6f0:	mov	r2, #4
   1f6f4:	movge	lr, #0
   1f6f8:	movlt	lr, #1
   1f6fc:	str	r0, [sp, #52]	; 0x34
   1f700:	str	r2, [sp, #48]	; 0x30
   1f704:	b	1e648 <__assert_fail@plt+0xc890>
   1f708:	ldr	r1, [pc, #-1576]	; 1f0e8 <__assert_fail@plt+0xd330>
   1f70c:	cmp	r2, r1
   1f710:	blt	1efb4 <__assert_fail@plt+0xd1fc>
   1f714:	mov	r2, #2
   1f718:	add	r3, r3, #100	; 0x64
   1f71c:	str	r2, [sp, #48]	; 0x30
   1f720:	b	1e63c <__assert_fail@plt+0xc884>
   1f724:	bl	1195c <memcpy@plt>
   1f728:	b	1edd4 <__assert_fail@plt+0xd01c>
   1f72c:	mov	r2, r7
   1f730:	ldr	r1, [sp, #40]	; 0x28
   1f734:	mov	r0, r9
   1f738:	bl	1e05c <__assert_fail@plt+0xc2a4>
   1f73c:	b	1edd4 <__assert_fail@plt+0xd01c>
   1f740:	add	r1, r5, #2
   1f744:	mov	r0, #1
   1f748:	mov	r2, r1
   1f74c:	ldrb	r3, [r1], #1
   1f750:	add	r0, r0, #1
   1f754:	cmp	r3, #58	; 0x3a
   1f758:	beq	1f748 <__assert_fail@plt+0xd990>
   1f75c:	str	r0, [sp, #48]	; 0x30
   1f760:	b	1f2cc <__assert_fail@plt+0xd514>
   1f764:	mov	r7, r5
   1f768:	mov	r4, #1
   1f76c:	b	1e850 <__assert_fail@plt+0xca98>
   1f770:	mov	r1, sl
   1f774:	ldr	r9, [sp, #56]	; 0x38
   1f778:	bl	11c44 <memset@plt>
   1f77c:	ldr	r3, [sp, #60]	; 0x3c
   1f780:	b	1f4bc <__assert_fail@plt+0xd704>
   1f784:	mov	r0, r9
   1f788:	mov	r1, sl
   1f78c:	bl	11c44 <memset@plt>
   1f790:	mov	r9, r7
   1f794:	ldrb	r4, [r5]
   1f798:	b	1f2ac <__assert_fail@plt+0xd4f4>
   1f79c:	sub	r7, r6, #1
   1f7a0:	mov	r0, r9
   1f7a4:	mov	r2, r7
   1f7a8:	mov	r1, #32
   1f7ac:	str	r3, [sp, #48]	; 0x30
   1f7b0:	add	r9, r9, r7
   1f7b4:	bl	11c44 <memset@plt>
   1f7b8:	ldr	r3, [sp, #48]	; 0x30
   1f7bc:	b	1f594 <__assert_fail@plt+0xd7dc>
   1f7c0:	mov	r1, sl
   1f7c4:	bl	11c44 <memset@plt>
   1f7c8:	mov	r9, r8
   1f7cc:	ldr	r3, [sp, #56]	; 0x38
   1f7d0:	b	1ecf4 <__assert_fail@plt+0xcf3c>
   1f7d4:	ldr	r3, [sp, #1196]	; 0x4ac
   1f7d8:	str	r6, [sp, #48]	; 0x30
   1f7dc:	b	1e63c <__assert_fail@plt+0xc884>
   1f7e0:	bl	119b0 <__stack_chk_fail@plt>
   1f7e4:	mov	r3, #0
   1f7e8:	str	r3, [sp, #48]	; 0x30
   1f7ec:	b	1e674 <__assert_fail@plt+0xc8bc>
   1f7f0:	mov	r5, r7
   1f7f4:	b	1e81c <__assert_fail@plt+0xca64>
   1f7f8:	ldrb	r3, [r5]
   1f7fc:	mov	r7, r5
   1f800:	b	1f024 <__assert_fail@plt+0xd26c>
   1f804:	push	{r4, r5, lr}
   1f808:	sub	sp, sp, #28
   1f80c:	ldr	r4, [pc, #72]	; 1f85c <__assert_fail@plt+0xdaa4>
   1f810:	ldr	ip, [sp, #44]	; 0x2c
   1f814:	ldr	r5, [sp, #40]	; 0x28
   1f818:	ldr	lr, [r4]
   1f81c:	str	ip, [sp, #12]
   1f820:	str	lr, [sp, #20]
   1f824:	mov	ip, #0
   1f828:	add	lr, sp, #19
   1f82c:	str	r5, [sp, #8]
   1f830:	str	ip, [sp]
   1f834:	str	lr, [sp, #4]
   1f838:	strb	ip, [sp, #19]
   1f83c:	bl	1e0dc <__assert_fail@plt+0xc324>
   1f840:	ldr	r2, [sp, #20]
   1f844:	ldr	r3, [r4]
   1f848:	cmp	r2, r3
   1f84c:	bne	1f858 <__assert_fail@plt+0xdaa0>
   1f850:	add	sp, sp, #28
   1f854:	pop	{r4, r5, pc}
   1f858:	bl	119b0 <__stack_chk_fail@plt>
   1f85c:	andeq	r9, r3, r0, lsl #30
   1f860:	push	{r4, r5, r6, lr}
   1f864:	subs	r4, r0, #0
   1f868:	beq	1f8dc <__assert_fail@plt+0xdb24>
   1f86c:	mov	r1, #47	; 0x2f
   1f870:	bl	11cc8 <strrchr@plt>
   1f874:	subs	r5, r0, #0
   1f878:	beq	1f8c8 <__assert_fail@plt+0xdb10>
   1f87c:	add	r6, r5, #1
   1f880:	sub	r3, r6, r4
   1f884:	cmp	r3, #6
   1f888:	ble	1f8c8 <__assert_fail@plt+0xdb10>
   1f88c:	mov	r2, #7
   1f890:	ldr	r1, [pc, #96]	; 1f8f8 <__assert_fail@plt+0xdb40>
   1f894:	sub	r0, r5, #6
   1f898:	bl	11d58 <strncmp@plt>
   1f89c:	cmp	r0, #0
   1f8a0:	bne	1f8c8 <__assert_fail@plt+0xdb10>
   1f8a4:	mov	r2, #3
   1f8a8:	ldr	r1, [pc, #76]	; 1f8fc <__assert_fail@plt+0xdb44>
   1f8ac:	mov	r0, r6
   1f8b0:	bl	11d58 <strncmp@plt>
   1f8b4:	cmp	r0, #0
   1f8b8:	movne	r4, r6
   1f8bc:	ldreq	r3, [pc, #60]	; 1f900 <__assert_fail@plt+0xdb48>
   1f8c0:	addeq	r4, r5, #4
   1f8c4:	streq	r4, [r3]
   1f8c8:	ldr	r2, [pc, #52]	; 1f904 <__assert_fail@plt+0xdb4c>
   1f8cc:	ldr	r3, [pc, #52]	; 1f908 <__assert_fail@plt+0xdb50>
   1f8d0:	str	r4, [r2]
   1f8d4:	str	r4, [r3]
   1f8d8:	pop	{r4, r5, r6, pc}
   1f8dc:	ldr	r3, [pc, #40]	; 1f90c <__assert_fail@plt+0xdb54>
   1f8e0:	mov	r2, #55	; 0x37
   1f8e4:	mov	r1, #1
   1f8e8:	ldr	r3, [r3]
   1f8ec:	ldr	r0, [pc, #28]	; 1f910 <__assert_fail@plt+0xdb58>
   1f8f0:	bl	11a64 <fwrite@plt>
   1f8f4:	bl	11d64 <abort@plt>
   1f8f8:	andeq	r8, r2, r4, lsl #31
   1f8fc:	andeq	r8, r2, ip, lsl #31
   1f900:	andeq	sl, r3, r8, lsl #6
   1f904:	ldrdeq	fp, [r3], -r4
   1f908:	andeq	sl, r3, ip, lsl #6
   1f90c:	andeq	sl, r3, r8, lsl r3
   1f910:	andeq	r8, r2, ip, asr #30
   1f914:	push	{r4, lr}
   1f918:	mov	r2, #48	; 0x30
   1f91c:	mov	r4, r1
   1f920:	mov	r1, #0
   1f924:	bl	11c44 <memset@plt>
   1f928:	cmp	r4, #10
   1f92c:	beq	1f938 <__assert_fail@plt+0xdb80>
   1f930:	str	r4, [r0]
   1f934:	pop	{r4, pc}
   1f938:	bl	11d64 <abort@plt>
   1f93c:	push	{r4, r5, r6, lr}
   1f940:	mov	r2, #5
   1f944:	mov	r5, r0
   1f948:	mov	r6, r1
   1f94c:	mov	r1, r0
   1f950:	mov	r0, #0
   1f954:	bl	119a4 <dcgettext@plt>
   1f958:	cmp	r5, r0
   1f95c:	mov	r4, r0
   1f960:	beq	1f96c <__assert_fail@plt+0xdbb4>
   1f964:	mov	r0, r4
   1f968:	pop	{r4, r5, r6, pc}
   1f96c:	bl	2421c <_obstack_memory_used@@Base+0x634>
   1f970:	ldrb	r3, [r0]
   1f974:	bic	r3, r3, #32
   1f978:	cmp	r3, #85	; 0x55
   1f97c:	bne	1f9dc <__assert_fail@plt+0xdc24>
   1f980:	ldrb	r3, [r0, #1]
   1f984:	bic	r3, r3, #32
   1f988:	cmp	r3, #84	; 0x54
   1f98c:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f990:	ldrb	r3, [r0, #2]
   1f994:	bic	r3, r3, #32
   1f998:	cmp	r3, #70	; 0x46
   1f99c:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f9a0:	ldrb	r3, [r0, #3]
   1f9a4:	cmp	r3, #45	; 0x2d
   1f9a8:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f9ac:	ldrb	r3, [r0, #4]
   1f9b0:	cmp	r3, #56	; 0x38
   1f9b4:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f9b8:	ldrb	r3, [r0, #5]
   1f9bc:	cmp	r3, #0
   1f9c0:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f9c4:	ldrb	r2, [r4]
   1f9c8:	ldr	r3, [pc, #156]	; 1fa6c <__assert_fail@plt+0xdcb4>
   1f9cc:	ldr	r4, [pc, #156]	; 1fa70 <__assert_fail@plt+0xdcb8>
   1f9d0:	cmp	r2, #96	; 0x60
   1f9d4:	movne	r4, r3
   1f9d8:	b	1f964 <__assert_fail@plt+0xdbac>
   1f9dc:	cmp	r3, #71	; 0x47
   1f9e0:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f9e4:	ldrb	r3, [r0, #1]
   1f9e8:	bic	r3, r3, #32
   1f9ec:	cmp	r3, #66	; 0x42
   1f9f0:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1f9f4:	ldrb	r3, [r0, #2]
   1f9f8:	cmp	r3, #49	; 0x31
   1f9fc:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1fa00:	ldrb	r3, [r0, #3]
   1fa04:	cmp	r3, #56	; 0x38
   1fa08:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1fa0c:	ldrb	r3, [r0, #4]
   1fa10:	cmp	r3, #48	; 0x30
   1fa14:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1fa18:	ldrb	r3, [r0, #5]
   1fa1c:	cmp	r3, #51	; 0x33
   1fa20:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1fa24:	ldrb	r3, [r0, #6]
   1fa28:	cmp	r3, #48	; 0x30
   1fa2c:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1fa30:	ldrb	r3, [r0, #7]
   1fa34:	cmp	r3, #0
   1fa38:	bne	1fa54 <__assert_fail@plt+0xdc9c>
   1fa3c:	ldrb	r2, [r4]
   1fa40:	ldr	r3, [pc, #44]	; 1fa74 <__assert_fail@plt+0xdcbc>
   1fa44:	ldr	r4, [pc, #44]	; 1fa78 <__assert_fail@plt+0xdcc0>
   1fa48:	cmp	r2, #96	; 0x60
   1fa4c:	movne	r4, r3
   1fa50:	b	1f964 <__assert_fail@plt+0xdbac>
   1fa54:	ldr	r3, [pc, #32]	; 1fa7c <__assert_fail@plt+0xdcc4>
   1fa58:	ldr	r4, [pc, #32]	; 1fa80 <__assert_fail@plt+0xdcc8>
   1fa5c:	cmp	r6, #9
   1fa60:	movne	r4, r3
   1fa64:	mov	r0, r4
   1fa68:	pop	{r4, r5, r6, pc}
   1fa6c:	andeq	r8, r2, r8, ror #31
   1fa70:	strdeq	r8, [r2], -r4
   1fa74:	andeq	r8, r2, ip, ror #31
   1fa78:	strdeq	r8, [r2], -r0
   1fa7c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1fa80:	andeq	r8, r2, r4, ror #31
   1fa84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa88:	sub	sp, sp, #124	; 0x7c
   1fa8c:	ldr	ip, [pc, #3576]	; 2088c <__assert_fail@plt+0xead4>
   1fa90:	str	r3, [sp, #24]
   1fa94:	ldr	r3, [sp, #168]	; 0xa8
   1fa98:	ldr	ip, [ip]
   1fa9c:	str	r3, [sp, #56]	; 0x38
   1faa0:	ldr	r3, [sp, #172]	; 0xac
   1faa4:	ldr	r8, [sp, #160]	; 0xa0
   1faa8:	str	r3, [sp, #80]	; 0x50
   1faac:	ldr	r3, [sp, #176]	; 0xb0
   1fab0:	mov	fp, r0
   1fab4:	str	r3, [sp, #76]	; 0x4c
   1fab8:	mov	sl, r1
   1fabc:	str	r2, [sp, #36]	; 0x24
   1fac0:	str	ip, [sp, #116]	; 0x74
   1fac4:	bl	11a94 <__ctype_get_mb_cur_max@plt>
   1fac8:	ldr	r3, [sp, #164]	; 0xa4
   1facc:	ands	r4, r3, #2
   1fad0:	movne	r3, #1
   1fad4:	moveq	r3, #0
   1fad8:	str	r3, [sp, #32]
   1fadc:	str	r0, [sp, #64]	; 0x40
   1fae0:	cmp	r8, #10
   1fae4:	ldrls	pc, [pc, r8, lsl #2]
   1fae8:	b	21298 <__assert_fail@plt+0xf4e0>
   1faec:	andeq	pc, r1, r0, ror #29
   1faf0:	andeq	pc, r1, r8, ror pc	; <UNPREDICTABLE>
   1faf4:	andeq	r0, r2, r8, ror r5
   1faf8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1fafc:	andeq	pc, r1, ip, asr #28
   1fb00:	muleq	r1, r4, lr
   1fb04:	andeq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
   1fb08:	andeq	pc, r1, r8, asr #30
   1fb0c:	andeq	pc, r1, r8, lsl fp	; <UNPREDICTABLE>
   1fb10:	andeq	pc, r1, r8, lsl fp	; <UNPREDICTABLE>
   1fb14:	andeq	pc, r1, r8, lsl fp	; <UNPREDICTABLE>
   1fb18:	cmp	r8, #10
   1fb1c:	beq	1fb40 <__assert_fail@plt+0xdd88>
   1fb20:	mov	r1, r8
   1fb24:	ldr	r0, [pc, #3428]	; 20890 <__assert_fail@plt+0xead8>
   1fb28:	bl	1f93c <__assert_fail@plt+0xdb84>
   1fb2c:	mov	r1, r8
   1fb30:	str	r0, [sp, #80]	; 0x50
   1fb34:	ldr	r0, [pc, #3420]	; 20898 <__assert_fail@plt+0xeae0>
   1fb38:	bl	1f93c <__assert_fail@plt+0xdb84>
   1fb3c:	str	r0, [sp, #76]	; 0x4c
   1fb40:	cmp	r4, #0
   1fb44:	movne	r4, #0
   1fb48:	beq	20f58 <__assert_fail@plt+0xf1a0>
   1fb4c:	ldr	r7, [sp, #76]	; 0x4c
   1fb50:	mov	r5, #0
   1fb54:	mov	r6, #1
   1fb58:	mov	r0, r7
   1fb5c:	str	r6, [sp, #40]	; 0x28
   1fb60:	str	r5, [sp, #68]	; 0x44
   1fb64:	bl	11bf0 <strlen@plt>
   1fb68:	str	r6, [sp, #28]
   1fb6c:	str	r5, [sp, #44]	; 0x2c
   1fb70:	str	r5, [sp, #72]	; 0x48
   1fb74:	str	r7, [sp, #60]	; 0x3c
   1fb78:	str	r0, [sp, #52]	; 0x34
   1fb7c:	str	r8, [sp, #160]	; 0xa0
   1fb80:	mov	r8, fp
   1fb84:	ldr	fp, [sp, #160]	; 0xa0
   1fb88:	mov	r9, #0
   1fb8c:	ldr	r3, [sp, #24]
   1fb90:	cmn	r3, #1
   1fb94:	beq	200fc <__assert_fail@plt+0xe344>
   1fb98:	ldr	r3, [sp, #24]
   1fb9c:	subs	r6, r3, r9
   1fba0:	movne	r6, #1
   1fba4:	cmp	r6, #0
   1fba8:	beq	20114 <__assert_fail@plt+0xe35c>
   1fbac:	ldr	r7, [sp, #28]
   1fbb0:	ldr	r0, [sp, #36]	; 0x24
   1fbb4:	cmp	fp, #2
   1fbb8:	moveq	r7, #0
   1fbbc:	andne	r7, r7, #1
   1fbc0:	add	r3, r0, r9
   1fbc4:	cmp	r7, #0
   1fbc8:	str	r3, [sp, #48]	; 0x30
   1fbcc:	beq	205b8 <__assert_fail@plt+0xe800>
   1fbd0:	ldr	r2, [sp, #52]	; 0x34
   1fbd4:	cmp	r2, #0
   1fbd8:	beq	2089c <__assert_fail@plt+0xeae4>
   1fbdc:	ldr	r1, [sp, #24]
   1fbe0:	cmp	r2, #1
   1fbe4:	mov	r3, r2
   1fbe8:	movls	r3, #0
   1fbec:	movhi	r3, #1
   1fbf0:	cmn	r1, #1
   1fbf4:	movne	r3, #0
   1fbf8:	cmp	r3, #0
   1fbfc:	add	r5, r9, r2
   1fc00:	beq	1fc0c <__assert_fail@plt+0xde54>
   1fc04:	bl	11bf0 <strlen@plt>
   1fc08:	str	r0, [sp, #24]
   1fc0c:	ldr	r3, [sp, #24]
   1fc10:	cmp	r5, r3
   1fc14:	bhi	2089c <__assert_fail@plt+0xeae4>
   1fc18:	ldr	r2, [sp, #52]	; 0x34
   1fc1c:	ldr	r1, [sp, #60]	; 0x3c
   1fc20:	ldr	r0, [sp, #48]	; 0x30
   1fc24:	bl	11998 <memcmp@plt>
   1fc28:	cmp	r0, #0
   1fc2c:	bne	2089c <__assert_fail@plt+0xeae4>
   1fc30:	ldr	r3, [sp, #32]
   1fc34:	cmp	r3, #0
   1fc38:	bne	21158 <__assert_fail@plt+0xf3a0>
   1fc3c:	ldr	r3, [sp, #48]	; 0x30
   1fc40:	ldrb	r5, [r3]
   1fc44:	cmp	r5, #126	; 0x7e
   1fc48:	ldrls	pc, [pc, r5, lsl #2]
   1fc4c:	b	2051c <__assert_fail@plt+0xe764>
   1fc50:	andeq	r0, r2, r8, lsl #8
   1fc54:	andeq	r0, r2, ip, lsl r5
   1fc58:	andeq	r0, r2, ip, lsl r5
   1fc5c:	andeq	r0, r2, ip, lsl r5
   1fc60:	andeq	r0, r2, ip, lsl r5
   1fc64:	andeq	r0, r2, ip, lsl r5
   1fc68:	andeq	r0, r2, ip, lsl r5
   1fc6c:	ldrdeq	r0, [r2], -r4
   1fc70:	andeq	r0, r2, r4, asr #9
   1fc74:	andeq	r0, r2, r4, asr #7
   1fc78:	andeq	r0, r2, ip, lsl #7
   1fc7c:	andeq	r0, r2, r4, ror #7
   1fc80:	andeq	r0, r2, ip, asr #7
   1fc84:	strdeq	r0, [r2], -ip
   1fc88:	andeq	r0, r2, ip, lsl r5
   1fc8c:	andeq	r0, r2, ip, lsl r5
   1fc90:	andeq	r0, r2, ip, lsl r5
   1fc94:	andeq	r0, r2, ip, lsl r5
   1fc98:	andeq	r0, r2, ip, lsl r5
   1fc9c:	andeq	r0, r2, ip, lsl r5
   1fca0:	andeq	r0, r2, ip, lsl r5
   1fca4:	andeq	r0, r2, ip, lsl r5
   1fca8:	andeq	r0, r2, ip, lsl r5
   1fcac:	andeq	r0, r2, ip, lsl r5
   1fcb0:	andeq	r0, r2, ip, lsl r5
   1fcb4:	andeq	r0, r2, ip, lsl r5
   1fcb8:	andeq	r0, r2, ip, lsl r5
   1fcbc:	andeq	r0, r2, ip, lsl r5
   1fcc0:	andeq	r0, r2, ip, lsl r5
   1fcc4:	andeq	r0, r2, ip, lsl r5
   1fcc8:	andeq	r0, r2, ip, lsl r5
   1fccc:	andeq	r0, r2, ip, lsl r5
   1fcd0:	ldrdeq	r0, [r2], -ip
   1fcd4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fcd8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fcdc:	strdeq	r0, [r2], -r4
   1fce0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fce4:	andeq	r0, r2, r0, lsl r5
   1fce8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fcec:	andeq	r0, r2, r0, lsr r2
   1fcf0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fcf4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fcf8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fcfc:	andeq	r0, r2, r0, lsl r5
   1fd00:	andeq	r0, r2, r0, lsl r5
   1fd04:	andeq	r0, r2, r0, lsl r5
   1fd08:	andeq	r0, r2, r0, lsl r5
   1fd0c:	andeq	r0, r2, r0, lsl r5
   1fd10:	andeq	r0, r2, r0, lsl r5
   1fd14:	andeq	r0, r2, r0, lsl r5
   1fd18:	andeq	r0, r2, r0, lsl r5
   1fd1c:	andeq	r0, r2, r0, lsl r5
   1fd20:	andeq	r0, r2, r0, lsl r5
   1fd24:	andeq	r0, r2, r0, lsl r5
   1fd28:	andeq	r0, r2, r0, lsl r5
   1fd2c:	andeq	r0, r2, r0, lsl r5
   1fd30:	andeq	r0, r2, r0, lsl r5
   1fd34:	andeq	r0, r2, r0, lsl r5
   1fd38:	andeq	r0, r2, r0, lsl r5
   1fd3c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fd40:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fd44:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fd48:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fd4c:	andeq	r0, r2, r4, lsl #4
   1fd50:	andeq	r0, r2, ip, lsl r5
   1fd54:	andeq	r0, r2, r0, lsl r5
   1fd58:	andeq	r0, r2, r0, lsl r5
   1fd5c:	andeq	r0, r2, r0, lsl r5
   1fd60:	andeq	r0, r2, r0, lsl r5
   1fd64:	andeq	r0, r2, r0, lsl r5
   1fd68:	andeq	r0, r2, r0, lsl r5
   1fd6c:	andeq	r0, r2, r0, lsl r5
   1fd70:	andeq	r0, r2, r0, lsl r5
   1fd74:	andeq	r0, r2, r0, lsl r5
   1fd78:	andeq	r0, r2, r0, lsl r5
   1fd7c:	andeq	r0, r2, r0, lsl r5
   1fd80:	andeq	r0, r2, r0, lsl r5
   1fd84:	andeq	r0, r2, r0, lsl r5
   1fd88:	andeq	r0, r2, r0, lsl r5
   1fd8c:	andeq	r0, r2, r0, lsl r5
   1fd90:	andeq	r0, r2, r0, lsl r5
   1fd94:	andeq	r0, r2, r0, lsl r5
   1fd98:	andeq	r0, r2, r0, lsl r5
   1fd9c:	andeq	r0, r2, r0, lsl r5
   1fda0:	andeq	r0, r2, r0, lsl r5
   1fda4:	andeq	r0, r2, r0, lsl r5
   1fda8:	andeq	r0, r2, r0, lsl r5
   1fdac:	andeq	r0, r2, r0, lsl r5
   1fdb0:	andeq	r0, r2, r0, lsl r5
   1fdb4:	andeq	r0, r2, r0, lsl r5
   1fdb8:	andeq	r0, r2, r0, lsl r5
   1fdbc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fdc0:			; <UNDEFINED> instruction: 0x000201bc
   1fdc4:	andeq	r0, r2, r0, lsl r5
   1fdc8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fdcc:	andeq	r0, r2, r0, lsl r5
   1fdd0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fdd4:	andeq	r0, r2, r0, lsl r5
   1fdd8:	andeq	r0, r2, r0, lsl r5
   1fddc:	andeq	r0, r2, r0, lsl r5
   1fde0:	andeq	r0, r2, r0, lsl r5
   1fde4:	andeq	r0, r2, r0, lsl r5
   1fde8:	andeq	r0, r2, r0, lsl r5
   1fdec:	andeq	r0, r2, r0, lsl r5
   1fdf0:	andeq	r0, r2, r0, lsl r5
   1fdf4:	andeq	r0, r2, r0, lsl r5
   1fdf8:	andeq	r0, r2, r0, lsl r5
   1fdfc:	andeq	r0, r2, r0, lsl r5
   1fe00:	andeq	r0, r2, r0, lsl r5
   1fe04:	andeq	r0, r2, r0, lsl r5
   1fe08:	andeq	r0, r2, r0, lsl r5
   1fe0c:	andeq	r0, r2, r0, lsl r5
   1fe10:	andeq	r0, r2, r0, lsl r5
   1fe14:	andeq	r0, r2, r0, lsl r5
   1fe18:	andeq	r0, r2, r0, lsl r5
   1fe1c:	andeq	r0, r2, r0, lsl r5
   1fe20:	andeq	r0, r2, r0, lsl r5
   1fe24:	andeq	r0, r2, r0, lsl r5
   1fe28:	andeq	r0, r2, r0, lsl r5
   1fe2c:	andeq	r0, r2, r0, lsl r5
   1fe30:	andeq	r0, r2, r0, lsl r5
   1fe34:	andeq	r0, r2, r0, lsl r5
   1fe38:	andeq	r0, r2, r0, lsl r5
   1fe3c:	ldrdeq	pc, [r1], -r4
   1fe40:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fe44:	ldrdeq	pc, [r1], -r4
   1fe48:	strdeq	r0, [r2], -r4
   1fe4c:	cmp	r4, #0
   1fe50:	moveq	r3, #1
   1fe54:	streq	r3, [sp, #28]
   1fe58:	beq	20584 <__assert_fail@plt+0xe7cc>
   1fe5c:	mov	r3, #0
   1fe60:	mov	r4, r3
   1fe64:	mov	r2, #1
   1fe68:	str	r2, [sp, #40]	; 0x28
   1fe6c:	str	r3, [sp, #68]	; 0x44
   1fe70:	str	r2, [sp, #32]
   1fe74:	str	r2, [sp, #52]	; 0x34
   1fe78:	ldr	r3, [pc, #2584]	; 20898 <__assert_fail@plt+0xeae0>
   1fe7c:	str	r4, [sp, #44]	; 0x2c
   1fe80:	str	r4, [sp, #72]	; 0x48
   1fe84:	str	r4, [sp, #28]
   1fe88:	str	r3, [sp, #60]	; 0x3c
   1fe8c:	mov	r8, #2
   1fe90:	b	1fb7c <__assert_fail@plt+0xddc4>
   1fe94:	cmp	r4, #0
   1fe98:	bne	21124 <__assert_fail@plt+0xf36c>
   1fe9c:	cmp	sl, #0
   1fea0:	beq	20ee4 <__assert_fail@plt+0xf12c>
   1fea4:	mov	r3, #34	; 0x22
   1fea8:	strb	r3, [fp]
   1feac:	ldr	r3, [pc, #2528]	; 20894 <__assert_fail@plt+0xeadc>
   1feb0:	mov	r1, r4
   1feb4:	mov	r2, #1
   1feb8:	str	r4, [sp, #68]	; 0x44
   1febc:	str	r2, [sp, #40]	; 0x28
   1fec0:	mov	r4, r2
   1fec4:	str	r1, [sp, #44]	; 0x2c
   1fec8:	str	r1, [sp, #72]	; 0x48
   1fecc:	str	r1, [sp, #32]
   1fed0:	str	r2, [sp, #28]
   1fed4:	str	r2, [sp, #52]	; 0x34
   1fed8:	str	r3, [sp, #60]	; 0x3c
   1fedc:	b	1fb7c <__assert_fail@plt+0xddc4>
   1fee0:	mov	r3, #0
   1fee4:	str	r3, [sp, #68]	; 0x44
   1fee8:	str	r3, [sp, #44]	; 0x2c
   1feec:	str	r3, [sp, #32]
   1fef0:	str	r3, [sp, #28]
   1fef4:	str	r3, [sp, #60]	; 0x3c
   1fef8:	mov	r3, #1
   1fefc:	str	r8, [sp, #72]	; 0x48
   1ff00:	str	r8, [sp, #52]	; 0x34
   1ff04:	mov	r4, r8
   1ff08:	str	r3, [sp, #40]	; 0x28
   1ff0c:	b	1fb7c <__assert_fail@plt+0xddc4>
   1ff10:	mov	r3, #1
   1ff14:	str	r3, [sp, #40]	; 0x28
   1ff18:	str	r3, [sp, #32]
   1ff1c:	str	r3, [sp, #28]
   1ff20:	str	r3, [sp, #52]	; 0x34
   1ff24:	ldr	r3, [pc, #2408]	; 20894 <__assert_fail@plt+0xeadc>
   1ff28:	mov	r2, #0
   1ff2c:	mov	r4, r2
   1ff30:	str	r2, [sp, #68]	; 0x44
   1ff34:	str	r2, [sp, #44]	; 0x2c
   1ff38:	str	r2, [sp, #72]	; 0x48
   1ff3c:	str	r3, [sp, #60]	; 0x3c
   1ff40:	mov	r8, #5
   1ff44:	b	1fb7c <__assert_fail@plt+0xddc4>
   1ff48:	mov	r3, #0
   1ff4c:	mov	r2, #1
   1ff50:	str	r2, [sp, #40]	; 0x28
   1ff54:	mov	r4, r3
   1ff58:	str	r3, [sp, #68]	; 0x44
   1ff5c:	str	r2, [sp, #28]
   1ff60:	str	r3, [sp, #44]	; 0x2c
   1ff64:	str	r3, [sp, #72]	; 0x48
   1ff68:	str	r3, [sp, #32]
   1ff6c:	str	r3, [sp, #52]	; 0x34
   1ff70:	str	r3, [sp, #60]	; 0x3c
   1ff74:	b	1fb7c <__assert_fail@plt+0xddc4>
   1ff78:	mov	r2, #1
   1ff7c:	mov	r3, #0
   1ff80:	str	r2, [sp, #40]	; 0x28
   1ff84:	mov	r4, r3
   1ff88:	str	r3, [sp, #68]	; 0x44
   1ff8c:	str	r8, [sp, #52]	; 0x34
   1ff90:	str	r2, [sp, #32]
   1ff94:	b	1fe78 <__assert_fail@plt+0xe0c0>
   1ff98:	mov	r3, #1
   1ff9c:	str	r3, [sp, #40]	; 0x28
   1ffa0:	str	r3, [sp, #32]
   1ffa4:	str	r3, [sp, #28]
   1ffa8:	str	r3, [sp, #52]	; 0x34
   1ffac:	ldr	r3, [pc, #2276]	; 20898 <__assert_fail@plt+0xeae0>
   1ffb0:	mov	r2, #0
   1ffb4:	mov	r4, r2
   1ffb8:	str	r2, [sp, #68]	; 0x44
   1ffbc:	str	r2, [sp, #44]	; 0x2c
   1ffc0:	str	r2, [sp, #72]	; 0x48
   1ffc4:	str	r3, [sp, #60]	; 0x3c
   1ffc8:	mov	r8, #2
   1ffcc:	b	1fb7c <__assert_fail@plt+0xddc4>
   1ffd0:	mov	r7, #0
   1ffd4:	ldr	r3, [sp, #24]
   1ffd8:	cmn	r3, #1
   1ffdc:	beq	20b18 <__assert_fail@plt+0xed60>
   1ffe0:	ldr	r3, [sp, #24]
   1ffe4:	subs	r3, r3, #1
   1ffe8:	movne	r3, #1
   1ffec:	cmp	r3, #0
   1fff0:	sub	r2, fp, #2
   1fff4:	clz	r2, r2
   1fff8:	lsr	r2, r2, #5
   1fffc:	bne	201f8 <__assert_fail@plt+0xe440>
   20000:	cmp	r9, #0
   20004:	bne	201f8 <__assert_fail@plt+0xe440>
   20008:	ldr	r3, [sp, #32]
   2000c:	tst	r3, r2
   20010:	bne	20318 <__assert_fail@plt+0xe560>
   20014:	ldr	r3, [sp, #28]
   20018:	eor	r3, r3, #1
   2001c:	orr	r3, r2, r3
   20020:	ldr	r2, [sp, #32]
   20024:	eor	r3, r3, #1
   20028:	orrs	r3, r2, r3
   2002c:	beq	2005c <__assert_fail@plt+0xe2a4>
   20030:	mov	r3, #0
   20034:	ldr	r1, [sp, #56]	; 0x38
   20038:	cmp	r1, #0
   2003c:	beq	2005c <__assert_fail@plt+0xe2a4>
   20040:	lsr	r2, r5, #5
   20044:	and	r0, r5, #31
   20048:	uxtb	r2, r2
   2004c:	ldr	r1, [r1, r2, lsl #2]
   20050:	lsr	r2, r1, r0
   20054:	tst	r2, #1
   20058:	bne	20064 <__assert_fail@plt+0xe2ac>
   2005c:	cmp	r7, #0
   20060:	beq	202b4 <__assert_fail@plt+0xe4fc>
   20064:	sub	r2, fp, #2
   20068:	clz	r2, r2
   2006c:	lsr	r2, r2, #5
   20070:	ldr	r3, [sp, #32]
   20074:	cmp	r3, #0
   20078:	bne	203a4 <__assert_fail@plt+0xe5ec>
   2007c:	ldr	r3, [sp, #44]	; 0x2c
   20080:	eor	r3, r3, #1
   20084:	ands	r3, r2, r3
   20088:	beq	200c0 <__assert_fail@plt+0xe308>
   2008c:	cmp	sl, r4
   20090:	movhi	r2, #39	; 0x27
   20094:	strbhi	r2, [r8, r4]
   20098:	add	r2, r4, #1
   2009c:	cmp	r2, sl
   200a0:	movcc	r1, #36	; 0x24
   200a4:	strbcc	r1, [r8, r2]
   200a8:	add	r2, r4, #2
   200ac:	cmp	r2, sl
   200b0:	add	r4, r4, #3
   200b4:	movcc	r1, #39	; 0x27
   200b8:	strbcc	r1, [r8, r2]
   200bc:	str	r3, [sp, #44]	; 0x2c
   200c0:	cmp	r4, sl
   200c4:	movcc	r3, #92	; 0x5c
   200c8:	strbcc	r3, [r8, r4]
   200cc:	add	r9, r9, #1
   200d0:	add	r4, r4, #1
   200d4:	cmp	r4, sl
   200d8:	ldr	r3, [sp, #40]	; 0x28
   200dc:	strbcc	r5, [r8, r4]
   200e0:	cmp	r6, #0
   200e4:	moveq	r3, #0
   200e8:	str	r3, [sp, #40]	; 0x28
   200ec:	ldr	r3, [sp, #24]
   200f0:	add	r4, r4, #1
   200f4:	cmn	r3, #1
   200f8:	bne	1fb98 <__assert_fail@plt+0xdde0>
   200fc:	ldr	r3, [sp, #36]	; 0x24
   20100:	ldrb	r6, [r3, r9]
   20104:	adds	r6, r6, #0
   20108:	movne	r6, #1
   2010c:	cmp	r6, #0
   20110:	bne	1fbac <__assert_fail@plt+0xddf4>
   20114:	str	fp, [sp, #160]	; 0xa0
   20118:	mov	fp, r8
   2011c:	ldr	r8, [sp, #160]	; 0xa0
   20120:	ldr	r1, [sp, #32]
   20124:	cmp	r4, #0
   20128:	sub	r2, r8, #2
   2012c:	clz	r2, r2
   20130:	lsr	r2, r2, #5
   20134:	andeq	r3, r2, r1
   20138:	movne	r3, #0
   2013c:	cmp	r3, #0
   20140:	bne	2122c <__assert_fail@plt+0xf474>
   20144:	eor	r3, r1, #1
   20148:	ands	r2, r2, r3
   2014c:	beq	21168 <__assert_fail@plt+0xf3b0>
   20150:	ldr	r3, [sp, #68]	; 0x44
   20154:	cmp	r3, #0
   20158:	beq	2116c <__assert_fail@plt+0xf3b4>
   2015c:	ldr	r3, [sp, #40]	; 0x28
   20160:	cmp	r3, #0
   20164:	bne	211e8 <__assert_fail@plt+0xf430>
   20168:	ldr	r3, [sp, #72]	; 0x48
   2016c:	adds	r3, r3, #0
   20170:	movne	r3, #1
   20174:	cmp	sl, #0
   20178:	movne	r3, #0
   2017c:	cmp	r3, #0
   20180:	ldreq	r2, [sp, #68]	; 0x44
   20184:	beq	2116c <__assert_fail@plt+0xf3b4>
   20188:	ldr	sl, [sp, #72]	; 0x48
   2018c:	str	r3, [sp, #68]	; 0x44
   20190:	ldr	r3, [pc, #1792]	; 20898 <__assert_fail@plt+0xeae0>
   20194:	mov	r2, #39	; 0x27
   20198:	mov	r4, #1
   2019c:	str	r3, [sp, #60]	; 0x3c
   201a0:	mov	r3, #0
   201a4:	strb	r2, [fp]
   201a8:	str	r4, [sp, #52]	; 0x34
   201ac:	mov	r8, #2
   201b0:	str	r3, [sp, #32]
   201b4:	b	1fb7c <__assert_fail@plt+0xddc4>
   201b8:	mov	r7, #0
   201bc:	cmp	fp, #2
   201c0:	beq	20af8 <__assert_fail@plt+0xed40>
   201c4:	ldr	r3, [sp, #52]	; 0x34
   201c8:	ldr	r2, [sp, #28]
   201cc:	ldr	r1, [sp, #32]
   201d0:	cmp	r3, #0
   201d4:	andne	r2, r2, r1
   201d8:	moveq	r2, #0
   201dc:	cmp	r2, #0
   201e0:	moveq	r5, #92	; 0x5c
   201e4:	moveq	r3, r5
   201e8:	bne	20b04 <__assert_fail@plt+0xed4c>
   201ec:	ldr	r1, [sp, #28]
   201f0:	cmp	r1, #0
   201f4:	bne	21274 <__assert_fail@plt+0xf4bc>
   201f8:	mov	r6, #0
   201fc:	b	20014 <__assert_fail@plt+0xe25c>
   20200:	mov	r7, #0
   20204:	cmp	fp, #2
   20208:	beq	20b68 <__assert_fail@plt+0xedb0>
   2020c:	cmp	fp, #5
   20210:	beq	20b2c <__assert_fail@plt+0xed74>
   20214:	sub	r2, fp, #2
   20218:	mov	r6, #0
   2021c:	clz	r2, r2
   20220:	mov	r5, #63	; 0x3f
   20224:	lsr	r2, r2, #5
   20228:	b	20014 <__assert_fail@plt+0xe25c>
   2022c:	mov	r7, #0
   20230:	cmp	fp, #2
   20234:	strne	r6, [sp, #68]	; 0x44
   20238:	movne	r2, #0
   2023c:	movne	r5, #39	; 0x27
   20240:	bne	20014 <__assert_fail@plt+0xe25c>
   20244:	ldr	r3, [sp, #32]
   20248:	cmp	r3, #0
   2024c:	bne	20f48 <__assert_fail@plt+0xf190>
   20250:	cmp	sl, #0
   20254:	ldr	r3, [sp, #72]	; 0x48
   20258:	clz	r3, r3
   2025c:	lsr	r3, r3, #5
   20260:	moveq	r3, #0
   20264:	cmp	r3, #0
   20268:	bne	20e7c <__assert_fail@plt+0xf0c4>
   2026c:	cmp	sl, r4
   20270:	movhi	r3, #39	; 0x27
   20274:	strbhi	r3, [r8, r4]
   20278:	add	r3, r4, #1
   2027c:	cmp	sl, r3
   20280:	movhi	r2, #92	; 0x5c
   20284:	strbhi	r2, [r8, r3]
   20288:	add	r3, r4, #2
   2028c:	cmp	sl, r3
   20290:	movhi	r2, #39	; 0x27
   20294:	strbhi	r2, [r8, r3]
   20298:	mov	r3, #0
   2029c:	cmp	r7, #0
   202a0:	add	r4, r4, #3
   202a4:	str	r3, [sp, #44]	; 0x2c
   202a8:	str	r6, [sp, #68]	; 0x44
   202ac:	mov	r5, #39	; 0x27
   202b0:	bne	20064 <__assert_fail@plt+0xe2ac>
   202b4:	ldr	r2, [sp, #44]	; 0x2c
   202b8:	eor	r3, r3, #1
   202bc:	and	r3, r3, r2
   202c0:	add	r9, r9, #1
   202c4:	uxtb	r3, r3
   202c8:	cmp	r3, #0
   202cc:	beq	200d4 <__assert_fail@plt+0xe31c>
   202d0:	cmp	sl, r4
   202d4:	movhi	r3, #39	; 0x27
   202d8:	strbhi	r3, [r8, r4]
   202dc:	add	r3, r4, #1
   202e0:	cmp	sl, r3
   202e4:	movhi	r2, #39	; 0x27
   202e8:	strbhi	r2, [r8, r3]
   202ec:	mov	r3, #0
   202f0:	add	r4, r4, #2
   202f4:	str	r3, [sp, #44]	; 0x2c
   202f8:	b	200d4 <__assert_fail@plt+0xe31c>
   202fc:	mov	r3, #114	; 0x72
   20300:	ldr	r1, [sp, #32]
   20304:	sub	r2, fp, #2
   20308:	clz	r2, r2
   2030c:	lsr	r2, r2, #5
   20310:	tst	r2, r1
   20314:	beq	201ec <__assert_fail@plt+0xe434>
   20318:	mov	fp, r8
   2031c:	mov	r8, #2
   20320:	ldr	r3, [sp, #28]
   20324:	cmp	r3, #0
   20328:	movne	r8, #4
   2032c:	ldr	r3, [sp, #164]	; 0xa4
   20330:	mov	ip, #0
   20334:	bic	r3, r3, #2
   20338:	str	r3, [sp, #4]
   2033c:	ldr	r3, [sp, #76]	; 0x4c
   20340:	str	r8, [sp]
   20344:	str	r3, [sp, #16]
   20348:	ldr	r3, [sp, #80]	; 0x50
   2034c:	ldr	r2, [sp, #36]	; 0x24
   20350:	str	r3, [sp, #12]
   20354:	mov	r1, sl
   20358:	ldr	r3, [sp, #24]
   2035c:	mov	r0, fp
   20360:	str	ip, [sp, #8]
   20364:	bl	1fa84 <__assert_fail@plt+0xdccc>
   20368:	mov	r4, r0
   2036c:	ldr	r3, [pc, #1304]	; 2088c <__assert_fail@plt+0xead4>
   20370:	ldr	r2, [sp, #116]	; 0x74
   20374:	mov	r0, r4
   20378:	ldr	r3, [r3]
   2037c:	cmp	r2, r3
   20380:	bne	21270 <__assert_fail@plt+0xf4b8>
   20384:	add	sp, sp, #124	; 0x7c
   20388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2038c:	mov	r5, #110	; 0x6e
   20390:	ldr	r3, [sp, #32]
   20394:	mov	r2, #0
   20398:	cmp	r3, #0
   2039c:	mov	r6, r2
   203a0:	beq	2007c <__assert_fail@plt+0xe2c4>
   203a4:	str	fp, [sp, #160]	; 0xa0
   203a8:	mov	fp, r8
   203ac:	ldr	r8, [sp, #160]	; 0xa0
   203b0:	mov	r3, r2
   203b4:	ldr	r2, [sp, #28]
   203b8:	and	r2, r2, r3
   203bc:	str	r2, [sp, #28]
   203c0:	b	20320 <__assert_fail@plt+0xe568>
   203c4:	mov	r5, #116	; 0x74
   203c8:	b	20390 <__assert_fail@plt+0xe5d8>
   203cc:	mov	r5, #102	; 0x66
   203d0:	ldr	r3, [sp, #32]
   203d4:	cmp	r3, #0
   203d8:	bne	20f84 <__assert_fail@plt+0xf1cc>
   203dc:	mov	r6, #0
   203e0:	b	200c0 <__assert_fail@plt+0xe308>
   203e4:	mov	r5, #118	; 0x76
   203e8:	b	203d0 <__assert_fail@plt+0xe618>
   203ec:	mov	r7, #0
   203f0:	mov	r6, #0
   203f4:	b	20030 <__assert_fail@plt+0xe278>
   203f8:	ldr	r3, [sp, #32]
   203fc:	cmp	r3, #0
   20400:	bne	211c8 <__assert_fail@plt+0xf410>
   20404:	mov	r7, r3
   20408:	ldr	r3, [sp, #44]	; 0x2c
   2040c:	sub	r2, fp, #2
   20410:	eor	r3, r3, #1
   20414:	clz	r2, r2
   20418:	lsr	r2, r2, #5
   2041c:	ands	r3, r2, r3
   20420:	beq	20e68 <__assert_fail@plt+0xf0b0>
   20424:	cmp	sl, r4
   20428:	movhi	r1, #39	; 0x27
   2042c:	strbhi	r1, [r8, r4]
   20430:	add	r1, r4, #1
   20434:	cmp	sl, r1
   20438:	movhi	r0, #36	; 0x24
   2043c:	strbhi	r0, [r8, r1]
   20440:	add	r1, r4, #2
   20444:	cmp	sl, r1
   20448:	movhi	r0, #39	; 0x27
   2044c:	strbhi	r0, [r8, r1]
   20450:	add	r1, r4, #3
   20454:	cmp	sl, r1
   20458:	bls	20ec8 <__assert_fail@plt+0xf110>
   2045c:	mov	r4, r1
   20460:	mov	r1, #92	; 0x5c
   20464:	strb	r1, [r8, r4]
   20468:	mov	r1, r4
   2046c:	str	r3, [sp, #44]	; 0x2c
   20470:	cmp	fp, #2
   20474:	add	r4, r4, #1
   20478:	beq	20f10 <__assert_fail@plt+0xf158>
   2047c:	ldr	r0, [sp, #24]
   20480:	add	r3, r9, #1
   20484:	cmp	r3, r0
   20488:	bcs	204a0 <__assert_fail@plt+0xe6e8>
   2048c:	ldr	r0, [sp, #36]	; 0x24
   20490:	ldrb	r3, [r0, r3]
   20494:	sub	r3, r3, #48	; 0x30
   20498:	cmp	r3, #9
   2049c:	bls	20f20 <__assert_fail@plt+0xf168>
   204a0:	mov	r5, #48	; 0x30
   204a4:	ldr	r3, [sp, #28]
   204a8:	eor	r3, r3, #1
   204ac:	orrs	r2, r2, r3
   204b0:	mov	r3, r6
   204b4:	moveq	r6, r2
   204b8:	beq	20034 <__assert_fail@plt+0xe27c>
   204bc:	mov	r6, #0
   204c0:	b	2005c <__assert_fail@plt+0xe2a4>
   204c4:	mov	r2, #0
   204c8:	mov	r6, r2
   204cc:	mov	r5, #98	; 0x62
   204d0:	b	2007c <__assert_fail@plt+0xe2c4>
   204d4:	mov	r5, #97	; 0x61
   204d8:	b	203dc <__assert_fail@plt+0xe624>
   204dc:	mov	r3, r7
   204e0:	mov	r6, r7
   204e4:	mov	r2, #0
   204e8:	mov	r7, r3
   204ec:	mov	r5, #32
   204f0:	b	20014 <__assert_fail@plt+0xe25c>
   204f4:	cmp	r9, #0
   204f8:	mov	r3, r7
   204fc:	bne	20ac4 <__assert_fail@plt+0xed0c>
   20500:	mov	r6, r7
   20504:	mov	r2, r9
   20508:	mov	r7, r3
   2050c:	b	20014 <__assert_fail@plt+0xe25c>
   20510:	mov	r6, r7
   20514:	b	20030 <__assert_fail@plt+0xe278>
   20518:	mov	r7, #0
   2051c:	ldr	r3, [sp, #64]	; 0x40
   20520:	cmp	r3, #1
   20524:	bne	20b80 <__assert_fail@plt+0xedc8>
   20528:	bl	11ba8 <__ctype_b_loc@plt>
   2052c:	ldr	r2, [sp, #64]	; 0x40
   20530:	sxth	r3, r5
   20534:	mov	ip, r2
   20538:	lsl	r3, r3, #1
   2053c:	ldr	r2, [r0]
   20540:	ldrh	r3, [r2, r3]
   20544:	and	r3, r3, #16384	; 0x4000
   20548:	cmp	r3, #0
   2054c:	ldr	r3, [sp, #28]
   20550:	movne	r6, #1
   20554:	moveq	r6, #0
   20558:	movne	r2, #0
   2055c:	andeq	r2, r3, #1
   20560:	cmp	r2, #0
   20564:	bne	20e90 <__assert_fail@plt+0xf0d8>
   20568:	sub	r2, fp, #2
   2056c:	clz	r2, r2
   20570:	lsr	r2, r2, #5
   20574:	b	20014 <__assert_fail@plt+0xe25c>
   20578:	cmp	r4, #0
   2057c:	bne	2123c <__assert_fail@plt+0xf484>
   20580:	str	r4, [sp, #28]
   20584:	cmp	sl, #0
   20588:	bne	21280 <__assert_fail@plt+0xf4c8>
   2058c:	ldr	r3, [pc, #772]	; 20898 <__assert_fail@plt+0xeae0>
   20590:	mov	r4, #1
   20594:	str	r4, [sp, #40]	; 0x28
   20598:	str	r3, [sp, #60]	; 0x3c
   2059c:	str	r4, [sp, #52]	; 0x34
   205a0:	str	sl, [sp, #72]	; 0x48
   205a4:	str	sl, [sp, #68]	; 0x44
   205a8:	str	sl, [sp, #44]	; 0x2c
   205ac:	str	sl, [sp, #32]
   205b0:	mov	r8, #2
   205b4:	b	1fb7c <__assert_fail@plt+0xddc4>
   205b8:	ldr	r3, [sp, #36]	; 0x24
   205bc:	ldrb	r5, [r3, r9]
   205c0:	cmp	r5, #126	; 0x7e
   205c4:	ldrls	pc, [pc, r5, lsl #2]
   205c8:	b	2051c <__assert_fail@plt+0xe764>
   205cc:	andeq	r0, r2, r0, lsl #16
   205d0:	andeq	r0, r2, ip, lsl r5
   205d4:	andeq	r0, r2, ip, lsl r5
   205d8:	andeq	r0, r2, ip, lsl r5
   205dc:	andeq	r0, r2, ip, lsl r5
   205e0:	andeq	r0, r2, ip, lsl r5
   205e4:	andeq	r0, r2, ip, lsl r5
   205e8:	andeq	r0, r2, ip, ror #15
   205ec:	ldrdeq	r0, [r2], -r8
   205f0:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   205f4:	andeq	r0, r2, r8, asr #15
   205f8:	andeq	r0, r2, r8, ror r8
   205fc:	andeq	r0, r2, r4, ror #16
   20600:	strdeq	r0, [r2], -ip
   20604:	andeq	r0, r2, ip, lsl r5
   20608:	andeq	r0, r2, ip, lsl r5
   2060c:	andeq	r0, r2, ip, lsl r5
   20610:	andeq	r0, r2, ip, lsl r5
   20614:	andeq	r0, r2, ip, lsl r5
   20618:	andeq	r0, r2, ip, lsl r5
   2061c:	andeq	r0, r2, ip, lsl r5
   20620:	andeq	r0, r2, ip, lsl r5
   20624:	andeq	r0, r2, ip, lsl r5
   20628:	andeq	r0, r2, ip, lsl r5
   2062c:	andeq	r0, r2, ip, lsl r5
   20630:	andeq	r0, r2, ip, lsl r5
   20634:	andeq	r0, r2, ip, lsl r5
   20638:	andeq	r0, r2, ip, lsl r5
   2063c:	andeq	r0, r2, ip, lsl r5
   20640:	andeq	r0, r2, ip, lsl r5
   20644:	andeq	r0, r2, ip, lsl r5
   20648:	andeq	r0, r2, ip, lsl r5
   2064c:	andeq	r0, r2, r4, asr r8
   20650:	andeq	r0, r2, r0, asr #16
   20654:	andeq	r0, r2, r0, asr #16
   20658:	andeq	r0, r2, r0, lsr r8
   2065c:	andeq	r0, r2, r0, asr #16
   20660:	andeq	r0, r2, r8, ror #10
   20664:	andeq	r0, r2, r0, asr #16
   20668:	andeq	r0, r2, r0, lsr r2
   2066c:	andeq	r0, r2, r0, asr #16
   20670:	andeq	r0, r2, r0, asr #16
   20674:	andeq	r0, r2, r0, asr #16
   20678:	andeq	r0, r2, r8, ror #10
   2067c:	andeq	r0, r2, r8, ror #10
   20680:	andeq	r0, r2, r8, ror #10
   20684:	andeq	r0, r2, r8, ror #10
   20688:	andeq	r0, r2, r8, ror #10
   2068c:	andeq	r0, r2, r8, ror #10
   20690:	andeq	r0, r2, r8, ror #10
   20694:	andeq	r0, r2, r8, ror #10
   20698:	andeq	r0, r2, r8, ror #10
   2069c:	andeq	r0, r2, r8, ror #10
   206a0:	andeq	r0, r2, r8, ror #10
   206a4:	andeq	r0, r2, r8, ror #10
   206a8:	andeq	r0, r2, r8, ror #10
   206ac:	andeq	r0, r2, r8, ror #10
   206b0:	andeq	r0, r2, r8, ror #10
   206b4:	andeq	r0, r2, r8, ror #10
   206b8:	andeq	r0, r2, r0, asr #16
   206bc:	andeq	r0, r2, r0, asr #16
   206c0:	andeq	r0, r2, r0, asr #16
   206c4:	andeq	r0, r2, r0, asr #16
   206c8:	andeq	r0, r2, r4, lsl #4
   206cc:	andeq	r0, r2, ip, lsl r5
   206d0:	andeq	r0, r2, r8, ror #10
   206d4:	andeq	r0, r2, r8, ror #10
   206d8:	andeq	r0, r2, r8, ror #10
   206dc:	andeq	r0, r2, r8, ror #10
   206e0:	andeq	r0, r2, r8, ror #10
   206e4:	andeq	r0, r2, r8, ror #10
   206e8:	andeq	r0, r2, r8, ror #10
   206ec:	andeq	r0, r2, r8, ror #10
   206f0:	andeq	r0, r2, r8, ror #10
   206f4:	andeq	r0, r2, r8, ror #10
   206f8:	andeq	r0, r2, r8, ror #10
   206fc:	andeq	r0, r2, r8, ror #10
   20700:	andeq	r0, r2, r8, ror #10
   20704:	andeq	r0, r2, r8, ror #10
   20708:	andeq	r0, r2, r8, ror #10
   2070c:	andeq	r0, r2, r8, ror #10
   20710:	andeq	r0, r2, r8, ror #10
   20714:	andeq	r0, r2, r8, ror #10
   20718:	andeq	r0, r2, r8, ror #10
   2071c:	andeq	r0, r2, r8, ror #10
   20720:	andeq	r0, r2, r8, ror #10
   20724:	andeq	r0, r2, r8, ror #10
   20728:	andeq	r0, r2, r8, ror #10
   2072c:	andeq	r0, r2, r8, ror #10
   20730:	andeq	r0, r2, r8, ror #10
   20734:	andeq	r0, r2, r8, ror #10
   20738:	andeq	r0, r2, r0, asr #16
   2073c:			; <UNDEFINED> instruction: 0x000201bc
   20740:	andeq	r0, r2, r8, ror #10
   20744:	andeq	r0, r2, r0, asr #16
   20748:	andeq	r0, r2, r8, ror #10
   2074c:	andeq	r0, r2, r0, asr #16
   20750:	andeq	r0, r2, r8, ror #10
   20754:	andeq	r0, r2, r8, ror #10
   20758:	andeq	r0, r2, r8, ror #10
   2075c:	andeq	r0, r2, r8, ror #10
   20760:	andeq	r0, r2, r8, ror #10
   20764:	andeq	r0, r2, r8, ror #10
   20768:	andeq	r0, r2, r8, ror #10
   2076c:	andeq	r0, r2, r8, ror #10
   20770:	andeq	r0, r2, r8, ror #10
   20774:	andeq	r0, r2, r8, ror #10
   20778:	andeq	r0, r2, r8, ror #10
   2077c:	andeq	r0, r2, r8, ror #10
   20780:	andeq	r0, r2, r8, ror #10
   20784:	andeq	r0, r2, r8, ror #10
   20788:	andeq	r0, r2, r8, ror #10
   2078c:	andeq	r0, r2, r8, ror #10
   20790:	andeq	r0, r2, r8, ror #10
   20794:	andeq	r0, r2, r8, ror #10
   20798:	andeq	r0, r2, r8, ror #10
   2079c:	andeq	r0, r2, r8, ror #10
   207a0:	andeq	r0, r2, r8, ror #10
   207a4:	andeq	r0, r2, r8, ror #10
   207a8:	andeq	r0, r2, r8, ror #10
   207ac:	andeq	r0, r2, r8, ror #10
   207b0:	andeq	r0, r2, r8, ror #10
   207b4:	andeq	r0, r2, r8, ror #10
   207b8:	ldrdeq	pc, [r1], -r4
   207bc:	andeq	r0, r2, r0, asr #16
   207c0:	ldrdeq	pc, [r1], -r4
   207c4:	andeq	r0, r2, r0, lsr r8
   207c8:	mov	r3, #110	; 0x6e
   207cc:	b	20300 <__assert_fail@plt+0xe548>
   207d0:	mov	r3, #116	; 0x74
   207d4:	b	20300 <__assert_fail@plt+0xe548>
   207d8:	sub	r2, fp, #2
   207dc:	mov	r3, #98	; 0x62
   207e0:	clz	r2, r2
   207e4:	lsr	r2, r2, #5
   207e8:	b	201ec <__assert_fail@plt+0xe434>
   207ec:	sub	r2, fp, #2
   207f0:	mov	r3, #97	; 0x61
   207f4:	clz	r2, r2
   207f8:	lsr	r2, r2, #5
   207fc:	b	201ec <__assert_fail@plt+0xe434>
   20800:	ldr	r3, [sp, #28]
   20804:	cmp	r3, #0
   20808:	bne	203f8 <__assert_fail@plt+0xe640>
   2080c:	ldr	r3, [sp, #164]	; 0xa4
   20810:	tst	r3, #1
   20814:	bne	20e88 <__assert_fail@plt+0xf0d0>
   20818:	ldr	r6, [sp, #28]
   2081c:	sub	r2, fp, #2
   20820:	mov	r7, r6
   20824:	clz	r2, r2
   20828:	lsr	r2, r2, #5
   2082c:	b	20014 <__assert_fail@plt+0xe25c>
   20830:	sub	r2, fp, #2
   20834:	clz	r2, r2
   20838:	lsr	r2, r2, #5
   2083c:	b	20000 <__assert_fail@plt+0xe248>
   20840:	sub	r2, fp, #2
   20844:	mov	r6, #0
   20848:	clz	r2, r2
   2084c:	lsr	r2, r2, #5
   20850:	b	20008 <__assert_fail@plt+0xe250>
   20854:	sub	r2, fp, #2
   20858:	clz	r2, r2
   2085c:	lsr	r2, r2, #5
   20860:	b	20008 <__assert_fail@plt+0xe250>
   20864:	sub	r2, fp, #2
   20868:	mov	r3, #102	; 0x66
   2086c:	clz	r2, r2
   20870:	lsr	r2, r2, #5
   20874:	b	201ec <__assert_fail@plt+0xe434>
   20878:	sub	r2, fp, #2
   2087c:	mov	r3, #118	; 0x76
   20880:	clz	r2, r2
   20884:	lsr	r2, r2, #5
   20888:	b	201ec <__assert_fail@plt+0xe434>
   2088c:	andeq	r9, r3, r0, lsl #30
   20890:	strdeq	r8, [r2], -ip
   20894:	andeq	r8, r2, r4, ror #31
   20898:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2089c:	ldr	r3, [sp, #48]	; 0x30
   208a0:	ldrb	r5, [r3]
   208a4:	cmp	r5, #126	; 0x7e
   208a8:	ldrls	pc, [pc, r5, lsl #2]
   208ac:	b	20518 <__assert_fail@plt+0xe760>
   208b0:	strdeq	r0, [r2], -r8
   208b4:	andeq	r0, r2, r8, lsl r5
   208b8:	andeq	r0, r2, r8, lsl r5
   208bc:	andeq	r0, r2, r8, lsl r5
   208c0:	andeq	r0, r2, r8, lsl r5
   208c4:	andeq	r0, r2, r8, lsl r5
   208c8:	andeq	r0, r2, r8, lsl r5
   208cc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   208d0:	andeq	r0, r2, r8, ror #21
   208d4:	andeq	r0, r2, r4, asr #7
   208d8:	andeq	r0, r2, ip, lsl #7
   208dc:	andeq	r0, r2, r4, ror #7
   208e0:	andeq	r0, r2, ip, asr #7
   208e4:	ldrdeq	r0, [r2], -ip
   208e8:	andeq	r0, r2, r8, lsl r5
   208ec:	andeq	r0, r2, r8, lsl r5
   208f0:	andeq	r0, r2, r8, lsl r5
   208f4:	andeq	r0, r2, r8, lsl r5
   208f8:	andeq	r0, r2, r8, lsl r5
   208fc:	andeq	r0, r2, r8, lsl r5
   20900:	andeq	r0, r2, r8, lsl r5
   20904:	andeq	r0, r2, r8, lsl r5
   20908:	andeq	r0, r2, r8, lsl r5
   2090c:	andeq	r0, r2, r8, lsl r5
   20910:	andeq	r0, r2, r8, lsl r5
   20914:	andeq	r0, r2, r8, lsl r5
   20918:	andeq	r0, r2, r8, lsl r5
   2091c:	andeq	r0, r2, r8, lsl r5
   20920:	andeq	r0, r2, r8, lsl r5
   20924:	andeq	r0, r2, r8, lsl r5
   20928:	andeq	r0, r2, r8, lsl r5
   2092c:	andeq	r0, r2, r8, lsl r5
   20930:	ldrdeq	r0, [r2], -r4
   20934:	andeq	r0, r2, ip, ror #7
   20938:	andeq	r0, r2, ip, ror #7
   2093c:			; <UNDEFINED> instruction: 0x00020ab8
   20940:	andeq	r0, r2, ip, ror #7
   20944:	andeq	r0, r2, ip, lsr #21
   20948:	andeq	r0, r2, ip, ror #7
   2094c:	andeq	r0, r2, ip, lsr #4
   20950:	andeq	r0, r2, ip, ror #7
   20954:	andeq	r0, r2, ip, ror #7
   20958:	andeq	r0, r2, ip, ror #7
   2095c:	andeq	r0, r2, ip, lsr #21
   20960:	andeq	r0, r2, ip, lsr #21
   20964:	andeq	r0, r2, ip, lsr #21
   20968:	andeq	r0, r2, ip, lsr #21
   2096c:	andeq	r0, r2, ip, lsr #21
   20970:	andeq	r0, r2, ip, lsr #21
   20974:	andeq	r0, r2, ip, lsr #21
   20978:	andeq	r0, r2, ip, lsr #21
   2097c:	andeq	r0, r2, ip, lsr #21
   20980:	andeq	r0, r2, ip, lsr #21
   20984:	andeq	r0, r2, ip, lsr #21
   20988:	andeq	r0, r2, ip, lsr #21
   2098c:	andeq	r0, r2, ip, lsr #21
   20990:	andeq	r0, r2, ip, lsr #21
   20994:	andeq	r0, r2, ip, lsr #21
   20998:	andeq	r0, r2, ip, lsr #21
   2099c:	andeq	r0, r2, ip, ror #7
   209a0:	andeq	r0, r2, ip, ror #7
   209a4:	andeq	r0, r2, ip, ror #7
   209a8:	andeq	r0, r2, ip, ror #7
   209ac:	andeq	r0, r2, r0, lsl #4
   209b0:	andeq	r0, r2, r8, lsl r5
   209b4:	andeq	r0, r2, ip, lsr #21
   209b8:	andeq	r0, r2, ip, lsr #21
   209bc:	andeq	r0, r2, ip, lsr #21
   209c0:	andeq	r0, r2, ip, lsr #21
   209c4:	andeq	r0, r2, ip, lsr #21
   209c8:	andeq	r0, r2, ip, lsr #21
   209cc:	andeq	r0, r2, ip, lsr #21
   209d0:	andeq	r0, r2, ip, lsr #21
   209d4:	andeq	r0, r2, ip, lsr #21
   209d8:	andeq	r0, r2, ip, lsr #21
   209dc:	andeq	r0, r2, ip, lsr #21
   209e0:	andeq	r0, r2, ip, lsr #21
   209e4:	andeq	r0, r2, ip, lsr #21
   209e8:	andeq	r0, r2, ip, lsr #21
   209ec:	andeq	r0, r2, ip, lsr #21
   209f0:	andeq	r0, r2, ip, lsr #21
   209f4:	andeq	r0, r2, ip, lsr #21
   209f8:	andeq	r0, r2, ip, lsr #21
   209fc:	andeq	r0, r2, ip, lsr #21
   20a00:	andeq	r0, r2, ip, lsr #21
   20a04:	andeq	r0, r2, ip, lsr #21
   20a08:	andeq	r0, r2, ip, lsr #21
   20a0c:	andeq	r0, r2, ip, lsr #21
   20a10:	andeq	r0, r2, ip, lsr #21
   20a14:	andeq	r0, r2, ip, lsr #21
   20a18:	andeq	r0, r2, ip, lsr #21
   20a1c:	andeq	r0, r2, ip, ror #7
   20a20:			; <UNDEFINED> instruction: 0x000201b8
   20a24:	andeq	r0, r2, ip, lsr #21
   20a28:	andeq	r0, r2, ip, ror #7
   20a2c:	andeq	r0, r2, ip, lsr #21
   20a30:	andeq	r0, r2, ip, ror #7
   20a34:	andeq	r0, r2, ip, lsr #21
   20a38:	andeq	r0, r2, ip, lsr #21
   20a3c:	andeq	r0, r2, ip, lsr #21
   20a40:	andeq	r0, r2, ip, lsr #21
   20a44:	andeq	r0, r2, ip, lsr #21
   20a48:	andeq	r0, r2, ip, lsr #21
   20a4c:	andeq	r0, r2, ip, lsr #21
   20a50:	andeq	r0, r2, ip, lsr #21
   20a54:	andeq	r0, r2, ip, lsr #21
   20a58:	andeq	r0, r2, ip, lsr #21
   20a5c:	andeq	r0, r2, ip, lsr #21
   20a60:	andeq	r0, r2, ip, lsr #21
   20a64:	andeq	r0, r2, ip, lsr #21
   20a68:	andeq	r0, r2, ip, lsr #21
   20a6c:	andeq	r0, r2, ip, lsr #21
   20a70:	andeq	r0, r2, ip, lsr #21
   20a74:	andeq	r0, r2, ip, lsr #21
   20a78:	andeq	r0, r2, ip, lsr #21
   20a7c:	andeq	r0, r2, ip, lsr #21
   20a80:	andeq	r0, r2, ip, lsr #21
   20a84:	andeq	r0, r2, ip, lsr #21
   20a88:	andeq	r0, r2, ip, lsr #21
   20a8c:	andeq	r0, r2, ip, lsr #21
   20a90:	andeq	r0, r2, ip, lsr #21
   20a94:	andeq	r0, r2, ip, lsr #21
   20a98:	andeq	r0, r2, ip, lsr #21
   20a9c:	ldrdeq	pc, [r1], -r0
   20aa0:	andeq	r0, r2, ip, ror #7
   20aa4:	ldrdeq	pc, [r1], -r0
   20aa8:			; <UNDEFINED> instruction: 0x00020ab8
   20aac:	mov	r6, r7
   20ab0:	mov	r7, #0
   20ab4:	b	20030 <__assert_fail@plt+0xe278>
   20ab8:	cmp	r9, #0
   20abc:	mov	r3, #0
   20ac0:	beq	20500 <__assert_fail@plt+0xe748>
   20ac4:	mov	r6, #0
   20ac8:	mov	r7, r3
   20acc:	mov	r3, r6
   20ad0:	b	20034 <__assert_fail@plt+0xe27c>
   20ad4:	mov	r3, #0
   20ad8:	b	204e0 <__assert_fail@plt+0xe728>
   20adc:	mov	r7, #0
   20ae0:	mov	r3, #114	; 0x72
   20ae4:	b	20300 <__assert_fail@plt+0xe548>
   20ae8:	mov	r5, #98	; 0x62
   20aec:	b	20390 <__assert_fail@plt+0xe5d8>
   20af0:	mov	r5, #97	; 0x61
   20af4:	b	203d0 <__assert_fail@plt+0xe618>
   20af8:	ldr	r3, [sp, #32]
   20afc:	cmp	r3, #0
   20b00:	bne	20f48 <__assert_fail@plt+0xf190>
   20b04:	add	r9, r9, #1
   20b08:	ldr	r3, [sp, #44]	; 0x2c
   20b0c:	mov	r6, #0
   20b10:	mov	r5, #92	; 0x5c
   20b14:	b	202c8 <__assert_fail@plt+0xe510>
   20b18:	ldr	r3, [sp, #36]	; 0x24
   20b1c:	ldrb	r3, [r3, #1]
   20b20:	adds	r3, r3, #0
   20b24:	movne	r3, #1
   20b28:	b	1ffec <__assert_fail@plt+0xe234>
   20b2c:	ldr	r3, [sp, #164]	; 0xa4
   20b30:	ands	r3, r3, #4
   20b34:	beq	20b58 <__assert_fail@plt+0xeda0>
   20b38:	ldr	r2, [sp, #24]
   20b3c:	add	r3, r9, #2
   20b40:	cmp	r3, r2
   20b44:	bcs	20b58 <__assert_fail@plt+0xeda0>
   20b48:	ldr	r2, [sp, #48]	; 0x30
   20b4c:	ldrb	r5, [r2, #1]
   20b50:	cmp	r5, #63	; 0x3f
   20b54:	beq	20fbc <__assert_fail@plt+0xf204>
   20b58:	mov	r2, #0
   20b5c:	mov	r6, r2
   20b60:	mov	r5, #63	; 0x3f
   20b64:	b	20014 <__assert_fail@plt+0xe25c>
   20b68:	ldr	r3, [sp, #32]
   20b6c:	cmp	r3, #0
   20b70:	bne	20f48 <__assert_fail@plt+0xf190>
   20b74:	mov	r6, r3
   20b78:	mov	r5, #63	; 0x3f
   20b7c:	b	2005c <__assert_fail@plt+0xe2a4>
   20b80:	ldr	r3, [sp, #24]
   20b84:	cmn	r3, #1
   20b88:	mov	r3, #0
   20b8c:	str	r3, [sp, #108]	; 0x6c
   20b90:	str	r3, [sp, #112]	; 0x70
   20b94:	bne	20ba4 <__assert_fail@plt+0xedec>
   20b98:	ldr	r0, [sp, #36]	; 0x24
   20b9c:	bl	11bf0 <strlen@plt>
   20ba0:	str	r0, [sp, #24]
   20ba4:	mov	r3, #0
   20ba8:	str	sl, [sp, #88]	; 0x58
   20bac:	ldr	sl, [sp, #36]	; 0x24
   20bb0:	str	r5, [sp, #92]	; 0x5c
   20bb4:	mov	r5, r3
   20bb8:	str	r7, [sp, #96]	; 0x60
   20bbc:	str	r4, [sp, #100]	; 0x64
   20bc0:	str	r8, [sp, #84]	; 0x54
   20bc4:	ldr	r3, [sp, #24]
   20bc8:	add	r4, r9, r5
   20bcc:	add	r7, sl, r4
   20bd0:	sub	r2, r3, r4
   20bd4:	mov	r1, r7
   20bd8:	add	r3, sp, #108	; 0x6c
   20bdc:	add	r0, sp, #104	; 0x68
   20be0:	bl	2384c <__assert_fail@plt+0x11a94>
   20be4:	subs	r8, r0, #0
   20be8:	beq	20c38 <__assert_fail@plt+0xee80>
   20bec:	cmn	r8, #1
   20bf0:	beq	20f98 <__assert_fail@plt+0xf1e0>
   20bf4:	cmn	r8, #2
   20bf8:	beq	210b8 <__assert_fail@plt+0xf300>
   20bfc:	ldr	r3, [sp, #32]
   20c00:	cmp	fp, #2
   20c04:	movne	r3, #0
   20c08:	andeq	r3, r3, #1
   20c0c:	cmp	r3, #0
   20c10:	bne	20d98 <__assert_fail@plt+0xefe0>
   20c14:	ldr	r0, [sp, #104]	; 0x68
   20c18:	bl	11a1c <iswprint@plt>
   20c1c:	add	r5, r5, r8
   20c20:	cmp	r0, #0
   20c24:	add	r0, sp, #108	; 0x6c
   20c28:	moveq	r6, #0
   20c2c:	bl	11974 <mbsinit@plt>
   20c30:	cmp	r0, #0
   20c34:	beq	20bc4 <__assert_fail@plt+0xee0c>
   20c38:	ldr	r3, [sp, #28]
   20c3c:	mov	ip, r5
   20c40:	eor	r2, r6, #1
   20c44:	ldr	r5, [sp, #92]	; 0x5c
   20c48:	ldr	r7, [sp, #96]	; 0x60
   20c4c:	ldr	r4, [sp, #100]	; 0x64
   20c50:	ldr	r8, [sp, #84]	; 0x54
   20c54:	ldr	sl, [sp, #88]	; 0x58
   20c58:	and	r2, r2, r3
   20c5c:	cmp	ip, #1
   20c60:	bls	20560 <__assert_fail@plt+0xe7a8>
   20c64:	add	r1, ip, r9
   20c68:	ldr	lr, [sp, #48]	; 0x30
   20c6c:	mov	r0, #0
   20c70:	str	r6, [sp, #48]	; 0x30
   20c74:	mov	ip, #39	; 0x27
   20c78:	ldr	r6, [sp, #44]	; 0x2c
   20c7c:	b	20d34 <__assert_fail@plt+0xef7c>
   20c80:	ldr	r0, [sp, #32]
   20c84:	sub	r3, fp, #2
   20c88:	cmp	r0, #0
   20c8c:	clz	r3, r3
   20c90:	lsr	r3, r3, #5
   20c94:	bne	20e9c <__assert_fail@plt+0xf0e4>
   20c98:	eor	r0, r6, #1
   20c9c:	ands	r3, r3, r0
   20ca0:	beq	20cd0 <__assert_fail@plt+0xef18>
   20ca4:	add	r0, r4, #1
   20ca8:	cmp	sl, r4
   20cac:	strbhi	ip, [r8, r4]
   20cb0:	cmp	sl, r0
   20cb4:	movhi	r6, #36	; 0x24
   20cb8:	strbhi	r6, [r8, r0]
   20cbc:	add	r0, r4, #2
   20cc0:	mov	r6, r3
   20cc4:	add	r4, r4, #3
   20cc8:	cmp	sl, r0
   20ccc:	strbhi	ip, [r8, r0]
   20cd0:	cmp	sl, r4
   20cd4:	movhi	r3, #92	; 0x5c
   20cd8:	strbhi	r3, [r8, r4]
   20cdc:	add	r3, r4, #1
   20ce0:	cmp	sl, r3
   20ce4:	lsrhi	r0, r5, #6
   20ce8:	addhi	r0, r0, #48	; 0x30
   20cec:	strbhi	r0, [r8, r3]
   20cf0:	add	r0, r4, #2
   20cf4:	cmp	sl, r0
   20cf8:	lsrhi	r3, r5, #3
   20cfc:	andhi	r3, r3, #7
   20d00:	addhi	r3, r3, #48	; 0x30
   20d04:	add	r9, r9, #1
   20d08:	strbhi	r3, [r8, r0]
   20d0c:	and	r5, r5, #7
   20d10:	cmp	r9, r1
   20d14:	add	r5, r5, #48	; 0x30
   20d18:	add	r4, r4, #3
   20d1c:	bcs	20ebc <__assert_fail@plt+0xf104>
   20d20:	mov	r0, r2
   20d24:	cmp	sl, r4
   20d28:	strbhi	r5, [r8, r4]
   20d2c:	ldrb	r5, [lr, #1]!
   20d30:	add	r4, r4, #1
   20d34:	cmp	r2, #0
   20d38:	bne	20c80 <__assert_fail@plt+0xeec8>
   20d3c:	eor	r3, r0, #1
   20d40:	and	r3, r3, r6
   20d44:	cmp	r7, #0
   20d48:	uxtb	r3, r3
   20d4c:	beq	20d60 <__assert_fail@plt+0xefa8>
   20d50:	cmp	sl, r4
   20d54:	movhi	r7, #92	; 0x5c
   20d58:	strbhi	r7, [r8, r4]
   20d5c:	add	r4, r4, #1
   20d60:	add	r9, r9, #1
   20d64:	cmp	r9, r1
   20d68:	bcs	20eb0 <__assert_fail@plt+0xf0f8>
   20d6c:	cmp	r3, #0
   20d70:	beq	20edc <__assert_fail@plt+0xf124>
   20d74:	cmp	sl, r4
   20d78:	add	r3, r4, #1
   20d7c:	strbhi	ip, [r8, r4]
   20d80:	mov	r7, #0
   20d84:	cmp	sl, r3
   20d88:	strbhi	ip, [r8, r3]
   20d8c:	add	r4, r4, #2
   20d90:	mov	r6, r7
   20d94:	b	20d24 <__assert_fail@plt+0xef6c>
   20d98:	cmp	r8, #1
   20d9c:	beq	20c14 <__assert_fail@plt+0xee5c>
   20da0:	add	r1, r4, #1
   20da4:	add	r3, sl, r8
   20da8:	add	r1, sl, r1
   20dac:	add	r4, r3, r4
   20db0:	ldrb	r3, [r1], #1
   20db4:	sub	r3, r3, #91	; 0x5b
   20db8:	cmp	r3, #33	; 0x21
   20dbc:	ldrls	pc, [pc, r3, lsl #2]
   20dc0:	b	20e4c <__assert_fail@plt+0xf094>
   20dc4:	andeq	r0, r2, r8, asr lr
   20dc8:	andeq	r0, r2, r8, asr lr
   20dcc:	andeq	r0, r2, ip, asr #28
   20dd0:	andeq	r0, r2, r8, asr lr
   20dd4:	andeq	r0, r2, ip, asr #28
   20dd8:	andeq	r0, r2, r8, asr lr
   20ddc:	andeq	r0, r2, ip, asr #28
   20de0:	andeq	r0, r2, ip, asr #28
   20de4:	andeq	r0, r2, ip, asr #28
   20de8:	andeq	r0, r2, ip, asr #28
   20dec:	andeq	r0, r2, ip, asr #28
   20df0:	andeq	r0, r2, ip, asr #28
   20df4:	andeq	r0, r2, ip, asr #28
   20df8:	andeq	r0, r2, ip, asr #28
   20dfc:	andeq	r0, r2, ip, asr #28
   20e00:	andeq	r0, r2, ip, asr #28
   20e04:	andeq	r0, r2, ip, asr #28
   20e08:	andeq	r0, r2, ip, asr #28
   20e0c:	andeq	r0, r2, ip, asr #28
   20e10:	andeq	r0, r2, ip, asr #28
   20e14:	andeq	r0, r2, ip, asr #28
   20e18:	andeq	r0, r2, ip, asr #28
   20e1c:	andeq	r0, r2, ip, asr #28
   20e20:	andeq	r0, r2, ip, asr #28
   20e24:	andeq	r0, r2, ip, asr #28
   20e28:	andeq	r0, r2, ip, asr #28
   20e2c:	andeq	r0, r2, ip, asr #28
   20e30:	andeq	r0, r2, ip, asr #28
   20e34:	andeq	r0, r2, ip, asr #28
   20e38:	andeq	r0, r2, ip, asr #28
   20e3c:	andeq	r0, r2, ip, asr #28
   20e40:	andeq	r0, r2, ip, asr #28
   20e44:	andeq	r0, r2, ip, asr #28
   20e48:	andeq	r0, r2, r8, asr lr
   20e4c:	cmp	r4, r1
   20e50:	bne	20db0 <__assert_fail@plt+0xeff8>
   20e54:	b	20c14 <__assert_fail@plt+0xee5c>
   20e58:	ldr	fp, [sp, #84]	; 0x54
   20e5c:	ldr	sl, [sp, #88]	; 0x58
   20e60:	mov	r8, #2
   20e64:	b	20320 <__assert_fail@plt+0xe568>
   20e68:	cmp	sl, r4
   20e6c:	movls	r1, r4
   20e70:	bls	20470 <__assert_fail@plt+0xe6b8>
   20e74:	ldr	r3, [sp, #44]	; 0x2c
   20e78:	b	20460 <__assert_fail@plt+0xe6a8>
   20e7c:	str	sl, [sp, #72]	; 0x48
   20e80:	ldr	sl, [sp, #32]
   20e84:	b	20298 <__assert_fail@plt+0xe4e0>
   20e88:	add	r9, r9, #1
   20e8c:	b	1fb8c <__assert_fail@plt+0xddd4>
   20e90:	ldr	r2, [sp, #28]
   20e94:	mov	r6, #0
   20e98:	b	20c64 <__assert_fail@plt+0xeeac>
   20e9c:	str	fp, [sp, #160]	; 0xa0
   20ea0:	str	r3, [sp, #28]
   20ea4:	mov	fp, r8
   20ea8:	ldr	r8, [sp, #160]	; 0xa0
   20eac:	b	20320 <__assert_fail@plt+0xe568>
   20eb0:	str	r6, [sp, #44]	; 0x2c
   20eb4:	ldr	r6, [sp, #48]	; 0x30
   20eb8:	b	202c8 <__assert_fail@plt+0xe510>
   20ebc:	str	r6, [sp, #44]	; 0x2c
   20ec0:	ldr	r6, [sp, #48]	; 0x30
   20ec4:	b	200d4 <__assert_fail@plt+0xe31c>
   20ec8:	add	r4, r4, #4
   20ecc:	str	r3, [sp, #44]	; 0x2c
   20ed0:	mov	r6, #0
   20ed4:	mov	r5, #48	; 0x30
   20ed8:	b	2005c <__assert_fail@plt+0xe2a4>
   20edc:	mov	r7, r3
   20ee0:	b	20d24 <__assert_fail@plt+0xef6c>
   20ee4:	ldr	r3, [pc, #-1624]	; 20894 <__assert_fail@plt+0xeadc>
   20ee8:	mov	r4, #1
   20eec:	str	r4, [sp, #40]	; 0x28
   20ef0:	str	r4, [sp, #28]
   20ef4:	str	r4, [sp, #52]	; 0x34
   20ef8:	str	sl, [sp, #72]	; 0x48
   20efc:	str	sl, [sp, #68]	; 0x44
   20f00:	str	sl, [sp, #44]	; 0x2c
   20f04:	str	sl, [sp, #32]
   20f08:	str	r3, [sp, #60]	; 0x3c
   20f0c:	b	1fb7c <__assert_fail@plt+0xddc4>
   20f10:	mov	r3, r6
   20f14:	mov	r5, #48	; 0x30
   20f18:	mov	r6, #0
   20f1c:	b	2005c <__assert_fail@plt+0xe2a4>
   20f20:	cmp	sl, r4
   20f24:	movhi	r3, #48	; 0x30
   20f28:	strbhi	r3, [r8, r4]
   20f2c:	add	r3, r1, #2
   20f30:	cmp	sl, r3
   20f34:	movhi	r0, #48	; 0x30
   20f38:	strbhi	r0, [r8, r3]
   20f3c:	add	r4, r1, #3
   20f40:	mov	r5, #48	; 0x30
   20f44:	b	204a4 <__assert_fail@plt+0xe6ec>
   20f48:	str	fp, [sp, #160]	; 0xa0
   20f4c:	mov	fp, r8
   20f50:	ldr	r8, [sp, #160]	; 0xa0
   20f54:	b	20320 <__assert_fail@plt+0xe568>
   20f58:	ldr	r2, [sp, #80]	; 0x50
   20f5c:	ldrb	r3, [r2]
   20f60:	cmp	r3, #0
   20f64:	beq	1fb4c <__assert_fail@plt+0xdd94>
   20f68:	cmp	sl, r4
   20f6c:	strbhi	r3, [fp, r4]
   20f70:	ldrb	r3, [r2, #1]!
   20f74:	add	r4, r4, #1
   20f78:	cmp	r3, #0
   20f7c:	bne	20f68 <__assert_fail@plt+0xf1b0>
   20f80:	b	1fb4c <__assert_fail@plt+0xdd94>
   20f84:	str	fp, [sp, #160]	; 0xa0
   20f88:	mov	r3, #0
   20f8c:	mov	fp, r8
   20f90:	ldr	r8, [sp, #160]	; 0xa0
   20f94:	b	203b4 <__assert_fail@plt+0xe5fc>
   20f98:	mov	ip, r5
   20f9c:	ldr	r7, [sp, #96]	; 0x60
   20fa0:	ldr	r5, [sp, #92]	; 0x5c
   20fa4:	ldr	r4, [sp, #100]	; 0x64
   20fa8:	ldr	r8, [sp, #84]	; 0x54
   20fac:	ldr	sl, [sp, #88]	; 0x58
   20fb0:	ldr	r2, [sp, #28]
   20fb4:	mov	r6, #0
   20fb8:	b	20c5c <__assert_fail@plt+0xeea4>
   20fbc:	ldr	r2, [sp, #36]	; 0x24
   20fc0:	ldrb	r1, [r2, r3]
   20fc4:	sub	r2, r1, #33	; 0x21
   20fc8:	cmp	r2, #29
   20fcc:	ldrls	pc, [pc, r2, lsl #2]
   20fd0:	b	210ac <__assert_fail@plt+0xf2f4>
   20fd4:	andeq	r1, r2, ip, asr #32
   20fd8:	andeq	r1, r2, ip, lsr #1
   20fdc:	andeq	r1, r2, ip, lsr #1
   20fe0:	andeq	r1, r2, ip, lsr #1
   20fe4:	andeq	r1, r2, ip, lsr #1
   20fe8:	andeq	r1, r2, ip, lsr #1
   20fec:	andeq	r1, r2, ip, asr #32
   20ff0:	andeq	r1, r2, ip, asr #32
   20ff4:	andeq	r1, r2, ip, asr #32
   20ff8:	andeq	r1, r2, ip, lsr #1
   20ffc:	andeq	r1, r2, ip, lsr #1
   21000:	andeq	r1, r2, ip, lsr #1
   21004:	andeq	r1, r2, ip, asr #32
   21008:	andeq	r1, r2, ip, lsr #1
   2100c:	andeq	r1, r2, ip, asr #32
   21010:	andeq	r1, r2, ip, lsr #1
   21014:	andeq	r1, r2, ip, lsr #1
   21018:	andeq	r1, r2, ip, lsr #1
   2101c:	andeq	r1, r2, ip, lsr #1
   21020:	andeq	r1, r2, ip, lsr #1
   21024:	andeq	r1, r2, ip, lsr #1
   21028:	andeq	r1, r2, ip, lsr #1
   2102c:	andeq	r1, r2, ip, lsr #1
   21030:	andeq	r1, r2, ip, lsr #1
   21034:	andeq	r1, r2, ip, lsr #1
   21038:	andeq	r1, r2, ip, lsr #1
   2103c:	andeq	r1, r2, ip, lsr #1
   21040:	andeq	r1, r2, ip, asr #32
   21044:	andeq	r1, r2, ip, asr #32
   21048:	andeq	r1, r2, ip, asr #32
   2104c:	ldr	r2, [sp, #32]
   21050:	cmp	r2, #0
   21054:	bne	21158 <__assert_fail@plt+0xf3a0>
   21058:	cmp	sl, r4
   2105c:	movhi	r2, #63	; 0x3f
   21060:	strbhi	r2, [r8, r4]
   21064:	add	r2, r4, #1
   21068:	cmp	sl, r2
   2106c:	movhi	r0, #34	; 0x22
   21070:	strbhi	r0, [r8, r2]
   21074:	add	r2, r4, #2
   21078:	cmp	sl, r2
   2107c:	movhi	r0, #34	; 0x22
   21080:	strbhi	r0, [r8, r2]
   21084:	add	r2, r4, #3
   21088:	cmp	sl, r2
   2108c:	movhi	r0, #63	; 0x3f
   21090:	strbhi	r0, [r8, r2]
   21094:	mov	r2, #0
   21098:	add	r4, r4, #4
   2109c:	mov	r5, r1
   210a0:	mov	r9, r3
   210a4:	mov	r6, r2
   210a8:	b	204a4 <__assert_fail@plt+0xe6ec>
   210ac:	mov	r2, #0
   210b0:	mov	r6, r2
   210b4:	b	20014 <__assert_fail@plt+0xe25c>
   210b8:	ldr	r0, [sp, #24]
   210bc:	mov	r1, r4
   210c0:	cmp	r1, r0
   210c4:	mov	r2, r7
   210c8:	mov	r3, r5
   210cc:	mov	ip, r5
   210d0:	ldr	r7, [sp, #96]	; 0x60
   210d4:	ldr	r5, [sp, #92]	; 0x5c
   210d8:	ldr	r4, [sp, #100]	; 0x64
   210dc:	ldr	r8, [sp, #84]	; 0x54
   210e0:	ldr	sl, [sp, #88]	; 0x58
   210e4:	bcs	21118 <__assert_fail@plt+0xf360>
   210e8:	ldrb	r6, [r2]
   210ec:	cmp	r6, #0
   210f0:	bne	21104 <__assert_fail@plt+0xf34c>
   210f4:	b	21234 <__assert_fail@plt+0xf47c>
   210f8:	ldrb	r6, [r2, #1]!
   210fc:	cmp	r6, #0
   21100:	beq	211bc <__assert_fail@plt+0xf404>
   21104:	add	r3, r3, #1
   21108:	add	r1, r9, r3
   2110c:	cmp	r1, r0
   21110:	bcc	210f8 <__assert_fail@plt+0xf340>
   21114:	mov	ip, r3
   21118:	ldr	r2, [sp, #28]
   2111c:	mov	r6, #0
   21120:	b	20c5c <__assert_fail@plt+0xeea4>
   21124:	mov	r3, #1
   21128:	str	r3, [sp, #40]	; 0x28
   2112c:	str	r3, [sp, #32]
   21130:	str	r3, [sp, #28]
   21134:	str	r3, [sp, #52]	; 0x34
   21138:	ldr	r3, [pc, #-2220]	; 20894 <__assert_fail@plt+0xeadc>
   2113c:	mov	r2, #0
   21140:	str	r2, [sp, #68]	; 0x44
   21144:	str	r2, [sp, #44]	; 0x2c
   21148:	str	r2, [sp, #72]	; 0x48
   2114c:	mov	r4, r2
   21150:	str	r3, [sp, #60]	; 0x3c
   21154:	b	1fb7c <__assert_fail@plt+0xddc4>
   21158:	str	fp, [sp, #160]	; 0xa0
   2115c:	mov	fp, r8
   21160:	ldr	r8, [sp, #160]	; 0xa0
   21164:	b	2032c <__assert_fail@plt+0xe574>
   21168:	mov	r2, r3
   2116c:	ldr	r3, [sp, #60]	; 0x3c
   21170:	cmp	r3, #0
   21174:	moveq	r2, #0
   21178:	andne	r2, r2, #1
   2117c:	cmp	r2, #0
   21180:	beq	211ac <__assert_fail@plt+0xf3f4>
   21184:	mov	r2, r3
   21188:	ldrb	r3, [r3]
   2118c:	cmp	r3, #0
   21190:	beq	211ac <__assert_fail@plt+0xf3f4>
   21194:	cmp	sl, r4
   21198:	strbhi	r3, [fp, r4]
   2119c:	ldrb	r3, [r2, #1]!
   211a0:	add	r4, r4, #1
   211a4:	cmp	r3, #0
   211a8:	bne	21194 <__assert_fail@plt+0xf3dc>
   211ac:	cmp	sl, r4
   211b0:	movhi	r3, #0
   211b4:	strbhi	r3, [fp, r4]
   211b8:	b	2036c <__assert_fail@plt+0xe5b4>
   211bc:	mov	ip, r3
   211c0:	ldr	r2, [sp, #28]
   211c4:	b	20c5c <__assert_fail@plt+0xeea4>
   211c8:	str	fp, [sp, #160]	; 0xa0
   211cc:	mov	fp, r8
   211d0:	ldr	r8, [sp, #160]	; 0xa0
   211d4:	sub	r3, r8, #2
   211d8:	clz	r3, r3
   211dc:	lsr	r3, r3, #5
   211e0:	str	r3, [sp, #28]
   211e4:	b	20320 <__assert_fail@plt+0xe568>
   211e8:	ldr	r3, [sp, #76]	; 0x4c
   211ec:	mov	ip, #5
   211f0:	str	r3, [sp, #16]
   211f4:	ldr	r3, [sp, #80]	; 0x50
   211f8:	ldr	r2, [sp, #36]	; 0x24
   211fc:	str	r3, [sp, #12]
   21200:	ldr	r3, [sp, #56]	; 0x38
   21204:	ldr	r1, [sp, #72]	; 0x48
   21208:	str	r3, [sp, #8]
   2120c:	ldr	r3, [sp, #164]	; 0xa4
   21210:	mov	r0, fp
   21214:	str	r3, [sp, #4]
   21218:	str	ip, [sp]
   2121c:	ldr	r3, [sp, #24]
   21220:	bl	1fa84 <__assert_fail@plt+0xdccc>
   21224:	mov	r4, r0
   21228:	b	2036c <__assert_fail@plt+0xe5b4>
   2122c:	mov	r8, #2
   21230:	b	20320 <__assert_fail@plt+0xe568>
   21234:	ldr	r2, [sp, #28]
   21238:	b	20c5c <__assert_fail@plt+0xeea4>
   2123c:	mov	r3, #0
   21240:	str	r3, [sp, #68]	; 0x44
   21244:	str	r3, [sp, #44]	; 0x2c
   21248:	str	r3, [sp, #72]	; 0x48
   2124c:	str	r3, [sp, #28]
   21250:	mov	r4, r3
   21254:	ldr	r3, [pc, #-2500]	; 20898 <__assert_fail@plt+0xeae0>
   21258:	mov	r2, #1
   2125c:	str	r2, [sp, #40]	; 0x28
   21260:	str	r2, [sp, #32]
   21264:	str	r2, [sp, #52]	; 0x34
   21268:	str	r3, [sp, #60]	; 0x3c
   2126c:	b	1fb7c <__assert_fail@plt+0xddc4>
   21270:	bl	119b0 <__stack_chk_fail@plt>
   21274:	mov	r5, r3
   21278:	mov	r6, #0
   2127c:	b	20070 <__assert_fail@plt+0xe2b8>
   21280:	mov	r3, #0
   21284:	mov	r2, #1
   21288:	str	r3, [sp, #44]	; 0x2c
   2128c:	str	r3, [sp, #72]	; 0x48
   21290:	str	r2, [sp, #40]	; 0x28
   21294:	b	2018c <__assert_fail@plt+0xe3d4>
   21298:	bl	11d64 <abort@plt>
   2129c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212a0:	sub	sp, sp, #44	; 0x2c
   212a4:	mov	r6, r0
   212a8:	mov	r4, r3
   212ac:	mov	sl, r1
   212b0:	mov	fp, r2
   212b4:	bl	11c14 <__errno_location@plt>
   212b8:	ldr	r7, [pc, #364]	; 2142c <__assert_fail@plt+0xf674>
   212bc:	cmp	r6, #0
   212c0:	ldr	r5, [r7]
   212c4:	ldr	r3, [r0]
   212c8:	str	r3, [sp, #24]
   212cc:	blt	21428 <__assert_fail@plt+0xf670>
   212d0:	ldr	r3, [r7, #4]
   212d4:	mov	r8, r0
   212d8:	cmp	r3, r6
   212dc:	bgt	21328 <__assert_fail@plt+0xf570>
   212e0:	cmn	r6, #-268435454	; 0xf0000002
   212e4:	bgt	21424 <__assert_fail@plt+0xf66c>
   212e8:	add	r9, r6, #1
   212ec:	add	r3, r7, #8
   212f0:	cmp	r5, r3
   212f4:	lsl	r1, r9, #3
   212f8:	beq	21404 <__assert_fail@plt+0xf64c>
   212fc:	mov	r0, r5
   21300:	bl	2221c <__assert_fail@plt+0x10464>
   21304:	mov	r5, r0
   21308:	str	r0, [r7]
   2130c:	ldr	r0, [r7, #4]
   21310:	mov	r1, #0
   21314:	sub	r2, r9, r0
   21318:	add	r0, r5, r0, lsl #3
   2131c:	lsl	r2, r2, #3
   21320:	bl	11c44 <memset@plt>
   21324:	str	r9, [r7, #4]
   21328:	add	r3, r5, r6, lsl #3
   2132c:	ldr	r1, [r4, #4]
   21330:	ldr	r7, [r3, #4]
   21334:	ldr	r9, [r5, r6, lsl #3]
   21338:	ldr	r2, [r4, #40]	; 0x28
   2133c:	ldr	ip, [r4, #44]	; 0x2c
   21340:	str	r3, [sp, #28]
   21344:	ldr	r3, [r4]
   21348:	orr	r1, r1, #1
   2134c:	add	lr, r4, #8
   21350:	str	r1, [sp, #36]	; 0x24
   21354:	str	r1, [sp, #4]
   21358:	str	r2, [sp, #12]
   2135c:	str	r3, [sp]
   21360:	mov	r0, r7
   21364:	mov	r1, r9
   21368:	str	ip, [sp, #16]
   2136c:	str	lr, [sp, #8]
   21370:	mov	r3, fp
   21374:	mov	r2, sl
   21378:	str	lr, [sp, #32]
   2137c:	bl	1fa84 <__assert_fail@plt+0xdccc>
   21380:	cmp	r9, r0
   21384:	bhi	213f0 <__assert_fail@plt+0xf638>
   21388:	ldr	r3, [pc, #160]	; 21430 <__assert_fail@plt+0xf678>
   2138c:	add	r9, r0, #1
   21390:	cmp	r7, r3
   21394:	str	r9, [r5, r6, lsl #3]
   21398:	beq	213a4 <__assert_fail@plt+0xf5ec>
   2139c:	mov	r0, r7
   213a0:	bl	11938 <free@plt>
   213a4:	mov	r0, r9
   213a8:	bl	221c0 <__assert_fail@plt+0x10408>
   213ac:	ldr	lr, [sp, #28]
   213b0:	ldr	ip, [r4, #44]	; 0x2c
   213b4:	ldr	r5, [r4, #40]	; 0x28
   213b8:	mov	r3, fp
   213bc:	mov	r2, sl
   213c0:	mov	r1, r9
   213c4:	str	r0, [lr, #4]
   213c8:	ldr	lr, [r4]
   213cc:	ldr	r4, [sp, #32]
   213d0:	str	ip, [sp, #16]
   213d4:	str	r4, [sp, #8]
   213d8:	ldr	r4, [sp, #36]	; 0x24
   213dc:	str	r5, [sp, #12]
   213e0:	str	r4, [sp, #4]
   213e4:	str	lr, [sp]
   213e8:	mov	r7, r0
   213ec:	bl	1fa84 <__assert_fail@plt+0xdccc>
   213f0:	ldr	r3, [sp, #24]
   213f4:	mov	r0, r7
   213f8:	str	r3, [r8]
   213fc:	add	sp, sp, #44	; 0x2c
   21400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21404:	mov	r0, #0
   21408:	bl	2221c <__assert_fail@plt+0x10464>
   2140c:	ldr	r3, [pc, #32]	; 21434 <__assert_fail@plt+0xf67c>
   21410:	mov	r5, r0
   21414:	ldm	r3, {r0, r1}
   21418:	str	r5, [r7]
   2141c:	stm	r5, {r0, r1}
   21420:	b	2130c <__assert_fail@plt+0xf554>
   21424:	bl	22408 <__assert_fail@plt+0x10650>
   21428:	bl	11d64 <abort@plt>
   2142c:	andeq	sl, r3, r0, asr #5
   21430:	ldrdeq	fp, [r3], -r8
   21434:	andeq	sl, r3, r8, asr #5
   21438:	push	{r4, r5, r6, lr}
   2143c:	mov	r5, r0
   21440:	bl	11c14 <__errno_location@plt>
   21444:	cmp	r5, #0
   21448:	mov	r1, #48	; 0x30
   2144c:	mov	r4, r0
   21450:	ldr	r0, [pc, #16]	; 21468 <__assert_fail@plt+0xf6b0>
   21454:	ldr	r6, [r4]
   21458:	movne	r0, r5
   2145c:	bl	223c8 <__assert_fail@plt+0x10610>
   21460:	str	r6, [r4]
   21464:	pop	{r4, r5, r6, pc}
   21468:	ldrdeq	fp, [r3], -r8
   2146c:	ldr	r3, [pc, #12]	; 21480 <__assert_fail@plt+0xf6c8>
   21470:	cmp	r0, #0
   21474:	moveq	r0, r3
   21478:	ldr	r0, [r0]
   2147c:	bx	lr
   21480:	ldrdeq	fp, [r3], -r8
   21484:	ldr	r3, [pc, #12]	; 21498 <__assert_fail@plt+0xf6e0>
   21488:	cmp	r0, #0
   2148c:	moveq	r0, r3
   21490:	str	r1, [r0]
   21494:	bx	lr
   21498:	ldrdeq	fp, [r3], -r8
   2149c:	ldr	r3, [pc, #52]	; 214d8 <__assert_fail@plt+0xf720>
   214a0:	cmp	r0, #0
   214a4:	moveq	r0, r3
   214a8:	add	r3, r0, #8
   214ac:	push	{lr}		; (str lr, [sp, #-4]!)
   214b0:	lsr	lr, r1, #5
   214b4:	and	r1, r1, #31
   214b8:	ldr	ip, [r3, lr, lsl #2]
   214bc:	lsr	r0, ip, r1
   214c0:	eor	r2, r2, r0
   214c4:	and	r2, r2, #1
   214c8:	and	r0, r0, #1
   214cc:	eor	r1, ip, r2, lsl r1
   214d0:	str	r1, [r3, lr, lsl #2]
   214d4:	pop	{pc}		; (ldr pc, [sp], #4)
   214d8:	ldrdeq	fp, [r3], -r8
   214dc:	ldr	r3, [pc, #16]	; 214f4 <__assert_fail@plt+0xf73c>
   214e0:	cmp	r0, #0
   214e4:	movne	r3, r0
   214e8:	ldr	r0, [r3, #4]
   214ec:	str	r1, [r3, #4]
   214f0:	bx	lr
   214f4:	ldrdeq	fp, [r3], -r8
   214f8:	ldr	r3, [pc, #44]	; 2152c <__assert_fail@plt+0xf774>
   214fc:	cmp	r0, #0
   21500:	moveq	r0, r3
   21504:	mov	ip, #10
   21508:	cmp	r2, #0
   2150c:	cmpne	r1, #0
   21510:	str	ip, [r0]
   21514:	beq	21524 <__assert_fail@plt+0xf76c>
   21518:	str	r1, [r0, #40]	; 0x28
   2151c:	str	r2, [r0, #44]	; 0x2c
   21520:	bx	lr
   21524:	push	{r4, lr}
   21528:	bl	11d64 <abort@plt>
   2152c:	ldrdeq	fp, [r3], -r8
   21530:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21534:	sub	sp, sp, #24
   21538:	ldr	ip, [pc, #108]	; 215ac <__assert_fail@plt+0xf7f4>
   2153c:	ldr	r4, [sp, #56]	; 0x38
   21540:	mov	r9, r2
   21544:	cmp	r4, #0
   21548:	moveq	r4, ip
   2154c:	mov	sl, r3
   21550:	mov	r7, r0
   21554:	mov	r8, r1
   21558:	bl	11c14 <__errno_location@plt>
   2155c:	ldr	r3, [r4, #44]	; 0x2c
   21560:	mov	r1, r8
   21564:	ldr	r6, [r0]
   21568:	str	r3, [sp, #16]
   2156c:	ldr	r2, [r4, #40]	; 0x28
   21570:	add	r3, r4, #8
   21574:	str	r3, [sp, #8]
   21578:	str	r2, [sp, #12]
   2157c:	ldr	r2, [r4, #4]
   21580:	mov	r5, r0
   21584:	str	r2, [sp, #4]
   21588:	ldr	ip, [r4]
   2158c:	mov	r3, sl
   21590:	mov	r2, r9
   21594:	mov	r0, r7
   21598:	str	ip, [sp]
   2159c:	bl	1fa84 <__assert_fail@plt+0xdccc>
   215a0:	str	r6, [r5]
   215a4:	add	sp, sp, #24
   215a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   215ac:	ldrdeq	fp, [r3], -r8
   215b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215b4:	cmp	r3, #0
   215b8:	sub	sp, sp, #44	; 0x2c
   215bc:	ldr	r4, [pc, #192]	; 21684 <__assert_fail@plt+0xf8cc>
   215c0:	mov	r6, r2
   215c4:	movne	r4, r3
   215c8:	mov	r9, r1
   215cc:	mov	r8, r0
   215d0:	bl	11c14 <__errno_location@plt>
   215d4:	ldr	r3, [r4, #44]	; 0x2c
   215d8:	ldr	r5, [r4, #4]
   215dc:	add	sl, r4, #8
   215e0:	cmp	r6, #0
   215e4:	orreq	r5, r5, #1
   215e8:	mov	r1, #0
   215ec:	ldr	r2, [r0]
   215f0:	str	r3, [sp, #16]
   215f4:	ldr	r3, [r4, #40]	; 0x28
   215f8:	stmib	sp, {r5, sl}
   215fc:	str	r3, [sp, #12]
   21600:	ldr	r3, [r4]
   21604:	mov	r7, r0
   21608:	str	r2, [sp, #28]
   2160c:	str	r3, [sp]
   21610:	mov	r2, r8
   21614:	mov	r3, r9
   21618:	mov	r0, r1
   2161c:	bl	1fa84 <__assert_fail@plt+0xdccc>
   21620:	add	r1, r0, #1
   21624:	mov	fp, r0
   21628:	mov	r0, r1
   2162c:	str	r1, [sp, #36]	; 0x24
   21630:	bl	221c0 <__assert_fail@plt+0x10408>
   21634:	ldr	r3, [r4, #44]	; 0x2c
   21638:	mov	r2, r8
   2163c:	str	r3, [sp, #16]
   21640:	ldr	r3, [r4, #40]	; 0x28
   21644:	str	r5, [sp, #4]
   21648:	str	r3, [sp, #12]
   2164c:	str	sl, [sp, #8]
   21650:	ldr	ip, [r4]
   21654:	ldr	r1, [sp, #36]	; 0x24
   21658:	mov	r3, r9
   2165c:	str	ip, [sp]
   21660:	str	r0, [sp, #32]
   21664:	bl	1fa84 <__assert_fail@plt+0xdccc>
   21668:	ldr	r2, [sp, #28]
   2166c:	cmp	r6, #0
   21670:	str	r2, [r7]
   21674:	ldr	r0, [sp, #32]
   21678:	strne	fp, [r6]
   2167c:	add	sp, sp, #44	; 0x2c
   21680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21684:	ldrdeq	fp, [r3], -r8
   21688:	mov	r3, r2
   2168c:	mov	r2, #0
   21690:	b	215b0 <__assert_fail@plt+0xf7f8>
   21694:	push	{r4, r5, r6, r7, r8, lr}
   21698:	ldr	r6, [pc, #112]	; 21710 <__assert_fail@plt+0xf958>
   2169c:	ldr	r3, [r6, #4]
   216a0:	ldr	r7, [r6]
   216a4:	cmp	r3, #1
   216a8:	ble	216cc <__assert_fail@plt+0xf914>
   216ac:	sub	r5, r7, #8
   216b0:	add	r5, r5, r3, lsl #3
   216b4:	mov	r4, r7
   216b8:	ldr	r0, [r4, #12]
   216bc:	add	r4, r4, #8
   216c0:	bl	11938 <free@plt>
   216c4:	cmp	r4, r5
   216c8:	bne	216b8 <__assert_fail@plt+0xf900>
   216cc:	ldr	r0, [r7, #4]
   216d0:	ldr	r4, [pc, #60]	; 21714 <__assert_fail@plt+0xf95c>
   216d4:	cmp	r0, r4
   216d8:	beq	216ec <__assert_fail@plt+0xf934>
   216dc:	bl	11938 <free@plt>
   216e0:	mov	r3, #256	; 0x100
   216e4:	str	r4, [r6, #12]
   216e8:	str	r3, [r6, #8]
   216ec:	ldr	r4, [pc, #36]	; 21718 <__assert_fail@plt+0xf960>
   216f0:	cmp	r7, r4
   216f4:	beq	21704 <__assert_fail@plt+0xf94c>
   216f8:	mov	r0, r7
   216fc:	bl	11938 <free@plt>
   21700:	str	r4, [r6]
   21704:	mov	r3, #1
   21708:	str	r3, [r6, #4]
   2170c:	pop	{r4, r5, r6, r7, r8, pc}
   21710:	andeq	sl, r3, r0, asr #5
   21714:	ldrdeq	fp, [r3], -r8
   21718:	andeq	sl, r3, r8, asr #5
   2171c:	ldr	r3, [pc, #4]	; 21728 <__assert_fail@plt+0xf970>
   21720:	mvn	r2, #0
   21724:	b	2129c <__assert_fail@plt+0xf4e4>
   21728:	ldrdeq	fp, [r3], -r8
   2172c:	ldr	r3, [pc]	; 21734 <__assert_fail@plt+0xf97c>
   21730:	b	2129c <__assert_fail@plt+0xf4e4>
   21734:	ldrdeq	fp, [r3], -r8
   21738:	mov	r1, r0
   2173c:	ldr	r3, [pc, #8]	; 2174c <__assert_fail@plt+0xf994>
   21740:	mvn	r2, #0
   21744:	mov	r0, #0
   21748:	b	2129c <__assert_fail@plt+0xf4e4>
   2174c:	ldrdeq	fp, [r3], -r8
   21750:	mov	r2, r1
   21754:	ldr	r3, [pc, #8]	; 21764 <__assert_fail@plt+0xf9ac>
   21758:	mov	r1, r0
   2175c:	mov	r0, #0
   21760:	b	2129c <__assert_fail@plt+0xf4e4>
   21764:	ldrdeq	fp, [r3], -r8
   21768:	push	{r4, r5, r6, lr}
   2176c:	sub	sp, sp, #56	; 0x38
   21770:	ldr	r4, [pc, #68]	; 217bc <__assert_fail@plt+0xfa04>
   21774:	mov	r6, r2
   21778:	mov	r5, r0
   2177c:	ldr	r3, [r4]
   21780:	add	r0, sp, #4
   21784:	str	r3, [sp, #52]	; 0x34
   21788:	bl	1f914 <__assert_fail@plt+0xdb5c>
   2178c:	add	r3, sp, #4
   21790:	mvn	r2, #0
   21794:	mov	r1, r6
   21798:	mov	r0, r5
   2179c:	bl	2129c <__assert_fail@plt+0xf4e4>
   217a0:	ldr	r2, [sp, #52]	; 0x34
   217a4:	ldr	r3, [r4]
   217a8:	cmp	r2, r3
   217ac:	bne	217b8 <__assert_fail@plt+0xfa00>
   217b0:	add	sp, sp, #56	; 0x38
   217b4:	pop	{r4, r5, r6, pc}
   217b8:	bl	119b0 <__stack_chk_fail@plt>
   217bc:	andeq	r9, r3, r0, lsl #30
   217c0:	push	{r4, r5, r6, r7, lr}
   217c4:	sub	sp, sp, #60	; 0x3c
   217c8:	ldr	r4, [pc, #72]	; 21818 <__assert_fail@plt+0xfa60>
   217cc:	mov	r6, r2
   217d0:	mov	r7, r3
   217d4:	ldr	ip, [r4]
   217d8:	mov	r5, r0
   217dc:	add	r0, sp, #4
   217e0:	str	ip, [sp, #52]	; 0x34
   217e4:	bl	1f914 <__assert_fail@plt+0xdb5c>
   217e8:	add	r3, sp, #4
   217ec:	mov	r2, r7
   217f0:	mov	r1, r6
   217f4:	mov	r0, r5
   217f8:	bl	2129c <__assert_fail@plt+0xf4e4>
   217fc:	ldr	r2, [sp, #52]	; 0x34
   21800:	ldr	r3, [r4]
   21804:	cmp	r2, r3
   21808:	bne	21814 <__assert_fail@plt+0xfa5c>
   2180c:	add	sp, sp, #60	; 0x3c
   21810:	pop	{r4, r5, r6, r7, pc}
   21814:	bl	119b0 <__stack_chk_fail@plt>
   21818:	andeq	r9, r3, r0, lsl #30
   2181c:	mov	r2, r1
   21820:	mov	r1, r0
   21824:	mov	r0, #0
   21828:	b	21768 <__assert_fail@plt+0xf9b0>
   2182c:	mov	r3, r2
   21830:	mov	r2, r1
   21834:	mov	r1, r0
   21838:	mov	r0, #0
   2183c:	b	217c0 <__assert_fail@plt+0xfa08>
   21840:	push	{r4, r5, r6, r7, r8, r9, lr}
   21844:	mov	r4, r2
   21848:	ldr	lr, [pc, #128]	; 218d0 <__assert_fail@plt+0xfb18>
   2184c:	mov	r8, r0
   21850:	mov	r9, r1
   21854:	ldm	lr!, {r0, r1, r2, r3}
   21858:	sub	sp, sp, #60	; 0x3c
   2185c:	add	ip, sp, #4
   21860:	lsr	r6, r4, #5
   21864:	stmia	ip!, {r0, r1, r2, r3}
   21868:	add	r7, sp, #12
   2186c:	ldm	lr!, {r0, r1, r2, r3}
   21870:	and	r4, r4, #31
   21874:	ldr	r5, [pc, #88]	; 218d4 <__assert_fail@plt+0xfb1c>
   21878:	stmia	ip!, {r0, r1, r2, r3}
   2187c:	ldm	lr, {r0, r1, r2, r3}
   21880:	stm	ip, {r0, r1, r2, r3}
   21884:	mov	r2, r9
   21888:	ldr	r3, [r7, r6, lsl #2]
   2188c:	ldr	ip, [r5]
   21890:	mov	r1, r8
   21894:	mvn	r0, r3, lsr r4
   21898:	and	r0, r0, #1
   2189c:	str	ip, [sp, #52]	; 0x34
   218a0:	eor	r4, r3, r0, lsl r4
   218a4:	add	r3, sp, #4
   218a8:	mov	r0, #0
   218ac:	str	r4, [r7, r6, lsl #2]
   218b0:	bl	2129c <__assert_fail@plt+0xf4e4>
   218b4:	ldr	r2, [sp, #52]	; 0x34
   218b8:	ldr	r3, [r5]
   218bc:	cmp	r2, r3
   218c0:	bne	218cc <__assert_fail@plt+0xfb14>
   218c4:	add	sp, sp, #60	; 0x3c
   218c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   218cc:	bl	119b0 <__stack_chk_fail@plt>
   218d0:	ldrdeq	fp, [r3], -r8
   218d4:	andeq	r9, r3, r0, lsl #30
   218d8:	mov	r2, r1
   218dc:	mvn	r1, #0
   218e0:	b	21840 <__assert_fail@plt+0xfa88>
   218e4:	mov	r2, #58	; 0x3a
   218e8:	mvn	r1, #0
   218ec:	b	21840 <__assert_fail@plt+0xfa88>
   218f0:	mov	r2, #58	; 0x3a
   218f4:	b	21840 <__assert_fail@plt+0xfa88>
   218f8:	push	{r4, r5, r6, r7, r8, lr}
   218fc:	sub	sp, sp, #104	; 0x68
   21900:	ldr	r5, [pc, #120]	; 21980 <__assert_fail@plt+0xfbc8>
   21904:	mov	r6, r0
   21908:	mov	r0, sp
   2190c:	ldr	r3, [r5]
   21910:	mov	r7, r2
   21914:	str	r3, [sp, #100]	; 0x64
   21918:	bl	1f914 <__assert_fail@plt+0xdb5c>
   2191c:	mov	ip, sp
   21920:	add	lr, sp, #52	; 0x34
   21924:	ldm	ip!, {r0, r1, r2, r3}
   21928:	stmia	lr!, {r0, r1, r2, r3}
   2192c:	ldm	ip!, {r0, r1, r2, r3}
   21930:	ldr	r8, [sp, #64]	; 0x40
   21934:	stmia	lr!, {r0, r1, r2, r3}
   21938:	mvn	r4, r8
   2193c:	ldm	ip, {r0, r1, r2, r3}
   21940:	and	ip, r4, #67108864	; 0x4000000
   21944:	eor	ip, ip, r8
   21948:	str	ip, [sp, #64]	; 0x40
   2194c:	stm	lr, {r0, r1, r2, r3}
   21950:	add	r3, sp, #52	; 0x34
   21954:	mvn	r2, #0
   21958:	mov	r1, r7
   2195c:	mov	r0, r6
   21960:	bl	2129c <__assert_fail@plt+0xf4e4>
   21964:	ldr	r2, [sp, #100]	; 0x64
   21968:	ldr	r3, [r5]
   2196c:	cmp	r2, r3
   21970:	bne	2197c <__assert_fail@plt+0xfbc4>
   21974:	add	sp, sp, #104	; 0x68
   21978:	pop	{r4, r5, r6, r7, r8, pc}
   2197c:	bl	119b0 <__stack_chk_fail@plt>
   21980:	andeq	r9, r3, r0, lsl #30
   21984:	push	{r4, r5, r6, r7, r8, r9, lr}
   21988:	mov	r6, r1
   2198c:	ldr	lr, [pc, #132]	; 21a18 <__assert_fail@plt+0xfc60>
   21990:	mov	r5, r2
   21994:	mov	r8, r0
   21998:	mov	r9, r3
   2199c:	ldm	lr!, {r0, r1, r2, r3}
   219a0:	sub	sp, sp, #60	; 0x3c
   219a4:	add	ip, sp, #4
   219a8:	ldr	r4, [pc, #108]	; 21a1c <__assert_fail@plt+0xfc64>
   219ac:	stmia	ip!, {r0, r1, r2, r3}
   219b0:	mov	r7, #10
   219b4:	ldm	lr!, {r0, r1, r2, r3}
   219b8:	cmp	r5, #0
   219bc:	cmpne	r6, #0
   219c0:	str	r7, [sp, #4]
   219c4:	stmia	ip!, {r0, r1, r2, r3}
   219c8:	ldm	lr, {r0, r1, r2, r3}
   219cc:	ldr	lr, [r4]
   219d0:	stm	ip, {r0, r1, r2, r3}
   219d4:	str	lr, [sp, #52]	; 0x34
   219d8:	beq	21a14 <__assert_fail@plt+0xfc5c>
   219dc:	add	r3, sp, #4
   219e0:	ldr	r2, [sp, #88]	; 0x58
   219e4:	mov	r1, r9
   219e8:	mov	r0, r8
   219ec:	str	r6, [sp, #44]	; 0x2c
   219f0:	str	r5, [sp, #48]	; 0x30
   219f4:	bl	2129c <__assert_fail@plt+0xf4e4>
   219f8:	ldr	r2, [sp, #52]	; 0x34
   219fc:	ldr	r3, [r4]
   21a00:	cmp	r2, r3
   21a04:	bne	21a10 <__assert_fail@plt+0xfc58>
   21a08:	add	sp, sp, #60	; 0x3c
   21a0c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21a10:	bl	119b0 <__stack_chk_fail@plt>
   21a14:	bl	11d64 <abort@plt>
   21a18:	ldrdeq	fp, [r3], -r8
   21a1c:	andeq	r9, r3, r0, lsl #30
   21a20:	push	{lr}		; (str lr, [sp, #-4]!)
   21a24:	sub	sp, sp, #12
   21a28:	mvn	ip, #0
   21a2c:	str	ip, [sp]
   21a30:	bl	21984 <__assert_fail@plt+0xfbcc>
   21a34:	add	sp, sp, #12
   21a38:	pop	{pc}		; (ldr pc, [sp], #4)
   21a3c:	push	{lr}		; (str lr, [sp, #-4]!)
   21a40:	sub	sp, sp, #12
   21a44:	mvn	ip, #0
   21a48:	mov	r3, r2
   21a4c:	str	ip, [sp]
   21a50:	mov	r2, r1
   21a54:	mov	r1, r0
   21a58:	mov	r0, #0
   21a5c:	bl	21984 <__assert_fail@plt+0xfbcc>
   21a60:	add	sp, sp, #12
   21a64:	pop	{pc}		; (ldr pc, [sp], #4)
   21a68:	push	{lr}		; (str lr, [sp, #-4]!)
   21a6c:	sub	sp, sp, #12
   21a70:	str	r3, [sp]
   21a74:	mov	r3, r2
   21a78:	mov	r2, r1
   21a7c:	mov	r1, r0
   21a80:	mov	r0, #0
   21a84:	bl	21984 <__assert_fail@plt+0xfbcc>
   21a88:	add	sp, sp, #12
   21a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   21a90:	ldr	r3, [pc]	; 21a98 <__assert_fail@plt+0xfce0>
   21a94:	b	2129c <__assert_fail@plt+0xf4e4>
   21a98:	ldrdeq	sl, [r3], -r0
   21a9c:	mov	r2, r1
   21aa0:	ldr	r3, [pc, #8]	; 21ab0 <__assert_fail@plt+0xfcf8>
   21aa4:	mov	r1, r0
   21aa8:	mov	r0, #0
   21aac:	b	2129c <__assert_fail@plt+0xf4e4>
   21ab0:	ldrdeq	sl, [r3], -r0
   21ab4:	ldr	r3, [pc, #4]	; 21ac0 <__assert_fail@plt+0xfd08>
   21ab8:	mvn	r2, #0
   21abc:	b	2129c <__assert_fail@plt+0xf4e4>
   21ac0:	ldrdeq	sl, [r3], -r0
   21ac4:	mov	r1, r0
   21ac8:	ldr	r3, [pc, #8]	; 21ad8 <__assert_fail@plt+0xfd20>
   21acc:	mvn	r2, #0
   21ad0:	mov	r0, #0
   21ad4:	b	2129c <__assert_fail@plt+0xf4e4>
   21ad8:	ldrdeq	sl, [r3], -r0
   21adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ae0:	mov	r9, r1
   21ae4:	ldr	r4, [pc, #352]	; 21c4c <__assert_fail@plt+0xfe94>
   21ae8:	sub	sp, sp, #228	; 0xe4
   21aec:	mov	fp, r0
   21af0:	ldr	r1, [r4]
   21af4:	mov	r0, r9
   21af8:	mov	r8, r3
   21afc:	mov	sl, r2
   21b00:	str	r1, [sp, #220]	; 0xdc
   21b04:	bl	1acc8 <__assert_fail@plt+0x8f10>
   21b08:	mov	r5, r0
   21b0c:	mov	r0, r8
   21b10:	bl	1acc8 <__assert_fail@plt+0x8f10>
   21b14:	mov	r6, r0
   21b18:	mov	r0, r5
   21b1c:	bl	1ad18 <__assert_fail@plt+0x8f60>
   21b20:	mov	r7, r0
   21b24:	mov	r0, r6
   21b28:	bl	1ad18 <__assert_fail@plt+0x8f60>
   21b2c:	cmp	r7, r0
   21b30:	beq	21b54 <__assert_fail@plt+0xfd9c>
   21b34:	mov	r6, #0
   21b38:	ldr	r2, [sp, #220]	; 0xdc
   21b3c:	ldr	r3, [r4]
   21b40:	mov	r0, r6
   21b44:	cmp	r2, r3
   21b48:	bne	21c48 <__assert_fail@plt+0xfe90>
   21b4c:	add	sp, sp, #228	; 0xe4
   21b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b54:	mov	r2, r7
   21b58:	mov	r1, r6
   21b5c:	mov	r0, r5
   21b60:	bl	11998 <memcmp@plt>
   21b64:	cmp	r0, #0
   21b68:	bne	21b34 <__assert_fail@plt+0xfd7c>
   21b6c:	mov	r0, r9
   21b70:	bl	241cc <_obstack_memory_used@@Base+0x5e4>
   21b74:	mov	r3, #256	; 0x100
   21b78:	str	r3, [sp]
   21b7c:	mov	r1, fp
   21b80:	add	r3, sp, #8
   21b84:	mov	r2, r0
   21b88:	mov	r5, r0
   21b8c:	mov	r0, #3
   21b90:	bl	11a04 <__fxstatat64@plt>
   21b94:	cmp	r0, #0
   21b98:	bne	21c2c <__assert_fail@plt+0xfe74>
   21b9c:	mov	r0, r5
   21ba0:	bl	11938 <free@plt>
   21ba4:	mov	r0, r8
   21ba8:	bl	241cc <_obstack_memory_used@@Base+0x5e4>
   21bac:	mov	r3, #256	; 0x100
   21bb0:	str	r3, [sp]
   21bb4:	mov	r1, sl
   21bb8:	add	r3, sp, #112	; 0x70
   21bbc:	mov	r2, r0
   21bc0:	mov	r5, r0
   21bc4:	mov	r0, #3
   21bc8:	bl	11a04 <__fxstatat64@plt>
   21bcc:	cmp	r0, #0
   21bd0:	bne	21c10 <__assert_fail@plt+0xfe58>
   21bd4:	ldrd	r0, [sp, #104]	; 0x68
   21bd8:	ldrd	r2, [sp, #208]	; 0xd0
   21bdc:	cmp	r1, r3
   21be0:	cmpeq	r0, r2
   21be4:	movne	r6, #0
   21be8:	bne	21c04 <__assert_fail@plt+0xfe4c>
   21bec:	ldrd	r0, [sp, #8]
   21bf0:	ldrd	r2, [sp, #112]	; 0x70
   21bf4:	cmp	r1, r3
   21bf8:	cmpeq	r0, r2
   21bfc:	moveq	r6, #1
   21c00:	movne	r6, #0
   21c04:	mov	r0, r5
   21c08:	bl	11938 <free@plt>
   21c0c:	b	21b38 <__assert_fail@plt+0xfd80>
   21c10:	bl	11c14 <__errno_location@plt>
   21c14:	mov	r3, r5
   21c18:	ldr	r2, [pc, #48]	; 21c50 <__assert_fail@plt+0xfe98>
   21c1c:	ldr	r1, [r0]
   21c20:	mov	r0, #1
   21c24:	bl	11adc <error@plt>
   21c28:	b	21bd4 <__assert_fail@plt+0xfe1c>
   21c2c:	bl	11c14 <__errno_location@plt>
   21c30:	mov	r3, r5
   21c34:	ldr	r2, [pc, #20]	; 21c50 <__assert_fail@plt+0xfe98>
   21c38:	ldr	r1, [r0]
   21c3c:	mov	r0, #1
   21c40:	bl	11adc <error@plt>
   21c44:	b	21b9c <__assert_fail@plt+0xfde4>
   21c48:	bl	119b0 <__stack_chk_fail@plt>
   21c4c:	andeq	r9, r3, r0, lsl #30
   21c50:	andeq	r8, r2, r4, lsr #12
   21c54:	mvn	r2, #99	; 0x63
   21c58:	mov	r3, r1
   21c5c:	mov	r1, r0
   21c60:	mov	r0, r2
   21c64:	b	21adc <__assert_fail@plt+0xfd24>
   21c68:	push	{r4, r5, r6, lr}
   21c6c:	sub	sp, sp, #32
   21c70:	cmp	r1, #0
   21c74:	mov	r5, r0
   21c78:	ldr	r4, [sp, #48]	; 0x30
   21c7c:	ldr	r6, [sp, #52]	; 0x34
   21c80:	beq	21d10 <__assert_fail@plt+0xff58>
   21c84:	strd	r2, [sp]
   21c88:	mov	r3, r1
   21c8c:	ldr	r2, [pc, #828]	; 21fd0 <__assert_fail@plt+0x10218>
   21c90:	mov	r1, #1
   21c94:	bl	11c74 <__fprintf_chk@plt>
   21c98:	mov	r2, #5
   21c9c:	ldr	r1, [pc, #816]	; 21fd4 <__assert_fail@plt+0x1021c>
   21ca0:	mov	r0, #0
   21ca4:	bl	119a4 <dcgettext@plt>
   21ca8:	ldr	r3, [pc, #808]	; 21fd8 <__assert_fail@plt+0x10220>
   21cac:	ldr	r2, [pc, #808]	; 21fdc <__assert_fail@plt+0x10224>
   21cb0:	str	r3, [sp]
   21cb4:	mov	r1, #1
   21cb8:	mov	r3, r0
   21cbc:	mov	r0, r5
   21cc0:	bl	11c74 <__fprintf_chk@plt>
   21cc4:	ldr	r1, [pc, #788]	; 21fe0 <__assert_fail@plt+0x10228>
   21cc8:	mov	r2, #5
   21ccc:	mov	r0, #0
   21cd0:	bl	119a4 <dcgettext@plt>
   21cd4:	mov	r1, r5
   21cd8:	bl	118a8 <fputs_unlocked@plt>
   21cdc:	cmp	r6, #9
   21ce0:	ldrls	pc, [pc, r6, lsl #2]
   21ce4:	b	21fc0 <__assert_fail@plt+0x10208>
   21ce8:	andeq	r1, r2, ip, asr #31
   21cec:	muleq	r2, r4, sp
   21cf0:	andeq	r1, r2, r0, asr #27
   21cf4:	strdeq	r1, [r2], -r4
   21cf8:	andeq	r1, r2, r0, lsr lr
   21cfc:	andeq	r1, r2, r0, ror lr
   21d00:			; <UNDEFINED> instruction: 0x00021eb8
   21d04:	andeq	r1, r2, r8, lsl #30
   21d08:	andeq	r1, r2, r0, ror #30
   21d0c:	andeq	r1, r2, r8, lsr #26
   21d10:	str	r3, [sp]
   21d14:	mov	r1, #1
   21d18:	mov	r3, r2
   21d1c:	ldr	r2, [pc, #704]	; 21fe4 <__assert_fail@plt+0x1022c>
   21d20:	bl	11c74 <__fprintf_chk@plt>
   21d24:	b	21c98 <__assert_fail@plt+0xfee0>
   21d28:	ldr	r1, [pc, #696]	; 21fe8 <__assert_fail@plt+0x10230>
   21d2c:	mov	r2, #5
   21d30:	mov	r0, #0
   21d34:	bl	119a4 <dcgettext@plt>
   21d38:	ldr	r2, [r4, #32]
   21d3c:	ldr	r3, [r4, #28]
   21d40:	ldr	r1, [r4, #24]
   21d44:	str	r2, [sp, #28]
   21d48:	ldr	r2, [r4, #20]
   21d4c:	str	r3, [sp, #24]
   21d50:	ldr	r3, [r4, #16]
   21d54:	str	r1, [sp, #20]
   21d58:	ldr	r1, [r4, #12]
   21d5c:	str	r2, [sp, #16]
   21d60:	ldr	r2, [r4, #8]
   21d64:	str	r3, [sp, #12]
   21d68:	ldr	r3, [r4, #4]
   21d6c:	str	r1, [sp, #8]
   21d70:	str	r2, [sp, #4]
   21d74:	str	r3, [sp]
   21d78:	mov	r1, #1
   21d7c:	ldr	r3, [r4]
   21d80:	mov	r2, r0
   21d84:	mov	r0, r5
   21d88:	bl	11c74 <__fprintf_chk@plt>
   21d8c:	add	sp, sp, #32
   21d90:	pop	{r4, r5, r6, pc}
   21d94:	mov	r2, #5
   21d98:	ldr	r1, [pc, #588]	; 21fec <__assert_fail@plt+0x10234>
   21d9c:	mov	r0, #0
   21da0:	bl	119a4 <dcgettext@plt>
   21da4:	ldr	r3, [r4]
   21da8:	mov	r1, #1
   21dac:	mov	r2, r0
   21db0:	mov	r0, r5
   21db4:	add	sp, sp, #32
   21db8:	pop	{r4, r5, r6, lr}
   21dbc:	b	11c74 <__fprintf_chk@plt>
   21dc0:	mov	r2, #5
   21dc4:	ldr	r1, [pc, #548]	; 21ff0 <__assert_fail@plt+0x10238>
   21dc8:	mov	r0, #0
   21dcc:	bl	119a4 <dcgettext@plt>
   21dd0:	ldr	r2, [r4, #4]
   21dd4:	ldr	r3, [r4]
   21dd8:	mov	r1, #1
   21ddc:	str	r2, [sp, #48]	; 0x30
   21de0:	mov	r2, r0
   21de4:	mov	r0, r5
   21de8:	add	sp, sp, #32
   21dec:	pop	{r4, r5, r6, lr}
   21df0:	b	11c74 <__fprintf_chk@plt>
   21df4:	mov	r2, #5
   21df8:	ldr	r1, [pc, #500]	; 21ff4 <__assert_fail@plt+0x1023c>
   21dfc:	mov	r0, #0
   21e00:	bl	119a4 <dcgettext@plt>
   21e04:	ldr	r2, [r4, #8]
   21e08:	ldr	r3, [r4, #4]
   21e0c:	mov	r1, #1
   21e10:	str	r2, [sp, #52]	; 0x34
   21e14:	str	r3, [sp, #48]	; 0x30
   21e18:	ldr	r3, [r4]
   21e1c:	mov	r2, r0
   21e20:	mov	r0, r5
   21e24:	add	sp, sp, #32
   21e28:	pop	{r4, r5, r6, lr}
   21e2c:	b	11c74 <__fprintf_chk@plt>
   21e30:	mov	r2, #5
   21e34:	ldr	r1, [pc, #444]	; 21ff8 <__assert_fail@plt+0x10240>
   21e38:	mov	r0, #0
   21e3c:	bl	119a4 <dcgettext@plt>
   21e40:	ldr	r1, [r4, #12]
   21e44:	ldr	r2, [r4, #8]
   21e48:	ldr	r3, [r4, #4]
   21e4c:	str	r1, [sp, #8]
   21e50:	str	r2, [sp, #4]
   21e54:	str	r3, [sp]
   21e58:	mov	r1, #1
   21e5c:	ldr	r3, [r4]
   21e60:	mov	r2, r0
   21e64:	mov	r0, r5
   21e68:	bl	11c74 <__fprintf_chk@plt>
   21e6c:	b	21d8c <__assert_fail@plt+0xffd4>
   21e70:	mov	r2, #5
   21e74:	ldr	r1, [pc, #384]	; 21ffc <__assert_fail@plt+0x10244>
   21e78:	mov	r0, #0
   21e7c:	bl	119a4 <dcgettext@plt>
   21e80:	ldr	r3, [r4, #16]
   21e84:	ldr	r1, [r4, #12]
   21e88:	ldr	r2, [r4, #8]
   21e8c:	str	r3, [sp, #12]
   21e90:	ldr	r3, [r4, #4]
   21e94:	str	r1, [sp, #8]
   21e98:	str	r2, [sp, #4]
   21e9c:	str	r3, [sp]
   21ea0:	mov	r1, #1
   21ea4:	ldr	r3, [r4]
   21ea8:	mov	r2, r0
   21eac:	mov	r0, r5
   21eb0:	bl	11c74 <__fprintf_chk@plt>
   21eb4:	b	21d8c <__assert_fail@plt+0xffd4>
   21eb8:	mov	r2, #5
   21ebc:	ldr	r1, [pc, #316]	; 22000 <__assert_fail@plt+0x10248>
   21ec0:	mov	r0, #0
   21ec4:	bl	119a4 <dcgettext@plt>
   21ec8:	ldr	r2, [r4, #20]
   21ecc:	ldr	r3, [r4, #16]
   21ed0:	ldr	r1, [r4, #12]
   21ed4:	str	r2, [sp, #16]
   21ed8:	ldr	r2, [r4, #8]
   21edc:	str	r3, [sp, #12]
   21ee0:	ldr	r3, [r4, #4]
   21ee4:	str	r1, [sp, #8]
   21ee8:	str	r2, [sp, #4]
   21eec:	str	r3, [sp]
   21ef0:	mov	r1, #1
   21ef4:	ldr	r3, [r4]
   21ef8:	mov	r2, r0
   21efc:	mov	r0, r5
   21f00:	bl	11c74 <__fprintf_chk@plt>
   21f04:	b	21d8c <__assert_fail@plt+0xffd4>
   21f08:	mov	r2, #5
   21f0c:	ldr	r1, [pc, #240]	; 22004 <__assert_fail@plt+0x1024c>
   21f10:	mov	r0, #0
   21f14:	bl	119a4 <dcgettext@plt>
   21f18:	ldr	r1, [r4, #24]
   21f1c:	ldr	r2, [r4, #20]
   21f20:	ldr	r3, [r4, #16]
   21f24:	str	r1, [sp, #20]
   21f28:	ldr	r1, [r4, #12]
   21f2c:	str	r2, [sp, #16]
   21f30:	ldr	r2, [r4, #8]
   21f34:	str	r3, [sp, #12]
   21f38:	ldr	r3, [r4, #4]
   21f3c:	str	r1, [sp, #8]
   21f40:	str	r2, [sp, #4]
   21f44:	str	r3, [sp]
   21f48:	mov	r1, #1
   21f4c:	ldr	r3, [r4]
   21f50:	mov	r2, r0
   21f54:	mov	r0, r5
   21f58:	bl	11c74 <__fprintf_chk@plt>
   21f5c:	b	21d8c <__assert_fail@plt+0xffd4>
   21f60:	mov	r2, #5
   21f64:	ldr	r1, [pc, #156]	; 22008 <__assert_fail@plt+0x10250>
   21f68:	mov	r0, #0
   21f6c:	bl	119a4 <dcgettext@plt>
   21f70:	ldr	r3, [r4, #28]
   21f74:	ldr	r1, [r4, #24]
   21f78:	ldr	r2, [r4, #20]
   21f7c:	str	r3, [sp, #24]
   21f80:	ldr	r3, [r4, #16]
   21f84:	str	r1, [sp, #20]
   21f88:	ldr	r1, [r4, #12]
   21f8c:	str	r2, [sp, #16]
   21f90:	ldr	r2, [r4, #8]
   21f94:	str	r3, [sp, #12]
   21f98:	ldr	r3, [r4, #4]
   21f9c:	str	r1, [sp, #8]
   21fa0:	str	r2, [sp, #4]
   21fa4:	str	r3, [sp]
   21fa8:	mov	r1, #1
   21fac:	ldr	r3, [r4]
   21fb0:	mov	r2, r0
   21fb4:	mov	r0, r5
   21fb8:	bl	11c74 <__fprintf_chk@plt>
   21fbc:	b	21d8c <__assert_fail@plt+0xffd4>
   21fc0:	mov	r2, #5
   21fc4:	ldr	r1, [pc, #64]	; 2200c <__assert_fail@plt+0x10254>
   21fc8:	b	21d30 <__assert_fail@plt+0xff78>
   21fcc:	bl	11d64 <abort@plt>
   21fd0:	andeq	r9, r2, ip, asr #32
   21fd4:	andeq	r9, r2, r0, rrx
   21fd8:	andeq	r0, r0, r2, ror #15
   21fdc:	andeq	r9, r2, r4, lsr r3
   21fe0:	andeq	r9, r2, r4, rrx
   21fe4:	andeq	r9, r2, r8, asr r0
   21fe8:	andeq	r9, r2, ip, lsr r2
   21fec:	andeq	r9, r2, r0, lsr r1
   21ff0:	andeq	r9, r2, r0, asr #2
   21ff4:	andeq	r9, r2, r8, asr r1
   21ff8:	andeq	r9, r2, r4, ror r1
   21ffc:	muleq	r2, r4, r1
   22000:			; <UNDEFINED> instruction: 0x000291b8
   22004:	andeq	r9, r2, r0, ror #3
   22008:	andeq	r9, r2, ip, lsl #4
   2200c:	andeq	r9, r2, r0, ror r2
   22010:	push	{r4, r5, lr}
   22014:	sub	sp, sp, #12
   22018:	ldr	r5, [sp, #24]
   2201c:	ldr	ip, [r5]
   22020:	cmp	ip, #0
   22024:	beq	22040 <__assert_fail@plt+0x10288>
   22028:	mov	lr, r5
   2202c:	mov	ip, #0
   22030:	ldr	r4, [lr, #4]!
   22034:	add	ip, ip, #1
   22038:	cmp	r4, #0
   2203c:	bne	22030 <__assert_fail@plt+0x10278>
   22040:	stm	sp, {r5, ip}
   22044:	bl	21c68 <__assert_fail@plt+0xfeb0>
   22048:	add	sp, sp, #12
   2204c:	pop	{r4, r5, pc}
   22050:	push	{r4, r5, r6, lr}
   22054:	sub	sp, sp, #56	; 0x38
   22058:	ldr	r6, [pc, #88]	; 220b8 <__assert_fail@plt+0x10300>
   2205c:	ldr	r5, [sp, #72]	; 0x48
   22060:	add	r4, sp, #8
   22064:	ldr	ip, [r6]
   22068:	str	ip, [sp, #52]	; 0x34
   2206c:	mov	ip, #0
   22070:	ldr	lr, [r5], #4
   22074:	cmp	lr, #0
   22078:	str	lr, [r4, #4]!
   2207c:	beq	2208c <__assert_fail@plt+0x102d4>
   22080:	add	ip, ip, #1
   22084:	cmp	ip, #10
   22088:	bne	22070 <__assert_fail@plt+0x102b8>
   2208c:	add	lr, sp, #12
   22090:	str	ip, [sp, #4]
   22094:	str	lr, [sp]
   22098:	bl	21c68 <__assert_fail@plt+0xfeb0>
   2209c:	ldr	r2, [sp, #52]	; 0x34
   220a0:	ldr	r3, [r6]
   220a4:	cmp	r2, r3
   220a8:	bne	220b4 <__assert_fail@plt+0x102fc>
   220ac:	add	sp, sp, #56	; 0x38
   220b0:	pop	{r4, r5, r6, pc}
   220b4:	bl	119b0 <__stack_chk_fail@plt>
   220b8:	andeq	r9, r3, r0, lsl #30
   220bc:	push	{r3}		; (str r3, [sp, #-4]!)
   220c0:	mov	ip, #0
   220c4:	push	{r4, r5, r6, lr}
   220c8:	sub	sp, sp, #60	; 0x3c
   220cc:	ldr	r6, [pc, #100]	; 22138 <__assert_fail@plt+0x10380>
   220d0:	add	r5, sp, #8
   220d4:	add	r4, sp, #80	; 0x50
   220d8:	ldr	r3, [r6]
   220dc:	str	r4, [sp, #8]
   220e0:	str	r3, [sp, #52]	; 0x34
   220e4:	ldr	r3, [sp, #76]	; 0x4c
   220e8:	ldr	lr, [r4], #4
   220ec:	cmp	lr, #0
   220f0:	str	lr, [r5, #4]!
   220f4:	beq	22104 <__assert_fail@plt+0x1034c>
   220f8:	add	ip, ip, #1
   220fc:	cmp	ip, #10
   22100:	bne	220e8 <__assert_fail@plt+0x10330>
   22104:	add	lr, sp, #12
   22108:	str	ip, [sp, #4]
   2210c:	str	lr, [sp]
   22110:	bl	21c68 <__assert_fail@plt+0xfeb0>
   22114:	ldr	r2, [sp, #52]	; 0x34
   22118:	ldr	r3, [r6]
   2211c:	cmp	r2, r3
   22120:	bne	22134 <__assert_fail@plt+0x1037c>
   22124:	add	sp, sp, #60	; 0x3c
   22128:	pop	{r4, r5, r6, lr}
   2212c:	add	sp, sp, #4
   22130:	bx	lr
   22134:	bl	119b0 <__stack_chk_fail@plt>
   22138:	andeq	r9, r3, r0, lsl #30
   2213c:	push	{r4, lr}
   22140:	mov	r2, #5
   22144:	ldr	r1, [pc, #88]	; 221a4 <__assert_fail@plt+0x103ec>
   22148:	mov	r0, #0
   2214c:	bl	119a4 <dcgettext@plt>
   22150:	ldr	r2, [pc, #80]	; 221a8 <__assert_fail@plt+0x103f0>
   22154:	mov	r1, r0
   22158:	mov	r0, #1
   2215c:	bl	11c50 <__printf_chk@plt>
   22160:	mov	r2, #5
   22164:	ldr	r1, [pc, #64]	; 221ac <__assert_fail@plt+0x103f4>
   22168:	mov	r0, #0
   2216c:	bl	119a4 <dcgettext@plt>
   22170:	ldr	r3, [pc, #56]	; 221b0 <__assert_fail@plt+0x103f8>
   22174:	ldr	r2, [pc, #56]	; 221b4 <__assert_fail@plt+0x103fc>
   22178:	mov	r1, r0
   2217c:	mov	r0, #1
   22180:	bl	11c50 <__printf_chk@plt>
   22184:	ldr	r1, [pc, #44]	; 221b8 <__assert_fail@plt+0x10400>
   22188:	mov	r2, #5
   2218c:	mov	r0, #0
   22190:	bl	119a4 <dcgettext@plt>
   22194:	ldr	r3, [pc, #32]	; 221bc <__assert_fail@plt+0x10404>
   22198:	pop	{r4, lr}
   2219c:	ldr	r1, [r3]
   221a0:	b	118a8 <fputs_unlocked@plt>
   221a4:	andeq	r9, r2, ip, lsr #5
   221a8:	andeq	r9, r2, r4, asr #5
   221ac:	ldrdeq	r9, [r2], -ip
   221b0:	andeq	r8, r2, ip, lsl #9
   221b4:			; <UNDEFINED> instruction: 0x000284b4
   221b8:	strdeq	r9, [r2], -r0
   221bc:	andeq	sl, r3, ip, lsl r3
   221c0:	push	{r4, lr}
   221c4:	mov	r4, r0
   221c8:	bl	11b30 <malloc@plt>
   221cc:	adds	r4, r4, #0
   221d0:	movne	r4, #1
   221d4:	cmp	r0, #0
   221d8:	movne	r4, #0
   221dc:	cmp	r4, #0
   221e0:	popeq	{r4, pc}
   221e4:	bl	22408 <__assert_fail@plt+0x10650>
   221e8:	push	{r4, r5, r6, lr}
   221ec:	umull	r4, r5, r0, r1
   221f0:	adds	r3, r5, #0
   221f4:	movne	r3, #1
   221f8:	cmp	r4, #0
   221fc:	blt	22214 <__assert_fail@plt+0x1045c>
   22200:	cmp	r3, #0
   22204:	bne	22214 <__assert_fail@plt+0x1045c>
   22208:	mul	r0, r1, r0
   2220c:	pop	{r4, r5, r6, lr}
   22210:	b	221c0 <__assert_fail@plt+0x10408>
   22214:	bl	22408 <__assert_fail@plt+0x10650>
   22218:	b	221c0 <__assert_fail@plt+0x10408>
   2221c:	adds	r3, r0, #0
   22220:	movne	r3, #1
   22224:	cmp	r1, #0
   22228:	movne	r3, #0
   2222c:	cmp	r3, #0
   22230:	push	{r4, lr}
   22234:	bne	2225c <__assert_fail@plt+0x104a4>
   22238:	mov	r4, r1
   2223c:	bl	119bc <realloc@plt>
   22240:	adds	r4, r4, #0
   22244:	movne	r4, #1
   22248:	cmp	r0, #0
   2224c:	movne	r4, #0
   22250:	cmp	r4, #0
   22254:	popeq	{r4, pc}
   22258:	bl	22408 <__assert_fail@plt+0x10650>
   2225c:	bl	11938 <free@plt>
   22260:	mov	r0, #0
   22264:	pop	{r4, pc}
   22268:	push	{r4, r5, r6, lr}
   2226c:	umull	r4, r5, r1, r2
   22270:	adds	r3, r5, #0
   22274:	movne	r3, #1
   22278:	cmp	r4, #0
   2227c:	blt	22294 <__assert_fail@plt+0x104dc>
   22280:	cmp	r3, #0
   22284:	bne	22294 <__assert_fail@plt+0x104dc>
   22288:	mul	r1, r2, r1
   2228c:	pop	{r4, r5, r6, lr}
   22290:	b	2221c <__assert_fail@plt+0x10464>
   22294:	bl	22408 <__assert_fail@plt+0x10650>
   22298:	push	{r4, r5, r6, r7, r8, lr}
   2229c:	subs	r7, r0, #0
   222a0:	mov	r6, r1
   222a4:	mov	r5, r2
   222a8:	ldr	r4, [r1]
   222ac:	beq	222e0 <__assert_fail@plt+0x10528>
   222b0:	mov	r1, r2
   222b4:	ldr	r0, [pc, #104]	; 22324 <__assert_fail@plt+0x1056c>
   222b8:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   222bc:	cmp	r0, r4
   222c0:	bls	22304 <__assert_fail@plt+0x1054c>
   222c4:	add	r3, r4, #1
   222c8:	add	r4, r3, r4, lsr #1
   222cc:	str	r4, [r6]
   222d0:	mul	r1, r5, r4
   222d4:	mov	r0, r7
   222d8:	pop	{r4, r5, r6, r7, r8, lr}
   222dc:	b	2221c <__assert_fail@plt+0x10464>
   222e0:	cmp	r4, #0
   222e4:	beq	22308 <__assert_fail@plt+0x10550>
   222e8:	umull	r0, r1, r4, r5
   222ec:	adds	r3, r1, #0
   222f0:	movne	r3, #1
   222f4:	cmp	r0, #0
   222f8:	blt	22304 <__assert_fail@plt+0x1054c>
   222fc:	cmp	r3, #0
   22300:	beq	222cc <__assert_fail@plt+0x10514>
   22304:	bl	22408 <__assert_fail@plt+0x10650>
   22308:	mov	r1, r2
   2230c:	mov	r0, #64	; 0x40
   22310:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   22314:	cmp	r5, #64	; 0x40
   22318:	movls	r4, r0
   2231c:	addhi	r4, r0, #1
   22320:	b	222e8 <__assert_fail@plt+0x10530>
   22324:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   22328:	cmp	r0, #0
   2232c:	ldr	r3, [r1]
   22330:	beq	22354 <__assert_fail@plt+0x1059c>
   22334:	ldr	r2, [pc, #60]	; 22378 <__assert_fail@plt+0x105c0>
   22338:	cmp	r3, r2
   2233c:	bhi	22370 <__assert_fail@plt+0x105b8>
   22340:	add	r2, r3, #1
   22344:	add	r3, r2, r3, lsr #1
   22348:	str	r3, [r1]
   2234c:	mov	r1, r3
   22350:	b	2221c <__assert_fail@plt+0x10464>
   22354:	cmp	r3, #0
   22358:	bne	2236c <__assert_fail@plt+0x105b4>
   2235c:	mov	r3, #64	; 0x40
   22360:	str	r3, [r1]
   22364:	mov	r1, r3
   22368:	b	2221c <__assert_fail@plt+0x10464>
   2236c:	bge	22348 <__assert_fail@plt+0x10590>
   22370:	push	{r4, lr}
   22374:	bl	22408 <__assert_fail@plt+0x10650>
   22378:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   2237c:	push	{r4, lr}
   22380:	mov	r4, r0
   22384:	bl	221c0 <__assert_fail@plt+0x10408>
   22388:	mov	r2, r4
   2238c:	mov	r1, #0
   22390:	pop	{r4, lr}
   22394:	b	11c44 <memset@plt>
   22398:	push	{r4, r5, r6, lr}
   2239c:	umull	r4, r5, r0, r1
   223a0:	adds	r3, r5, #0
   223a4:	movne	r3, #1
   223a8:	cmp	r4, #0
   223ac:	blt	223c4 <__assert_fail@plt+0x1060c>
   223b0:	cmp	r3, #0
   223b4:	bne	223c4 <__assert_fail@plt+0x1060c>
   223b8:	bl	1189c <calloc@plt>
   223bc:	cmp	r0, #0
   223c0:	popne	{r4, r5, r6, pc}
   223c4:	bl	22408 <__assert_fail@plt+0x10650>
   223c8:	push	{r4, r5, r6, lr}
   223cc:	mov	r4, r1
   223d0:	mov	r5, r0
   223d4:	mov	r0, r1
   223d8:	bl	221c0 <__assert_fail@plt+0x10408>
   223dc:	mov	r2, r4
   223e0:	mov	r1, r5
   223e4:	pop	{r4, r5, r6, lr}
   223e8:	b	1195c <memcpy@plt>
   223ec:	push	{r4, lr}
   223f0:	mov	r4, r0
   223f4:	bl	11bf0 <strlen@plt>
   223f8:	add	r1, r0, #1
   223fc:	mov	r0, r4
   22400:	pop	{r4, lr}
   22404:	b	223c8 <__assert_fail@plt+0x10610>
   22408:	ldr	r3, [pc, #44]	; 2243c <__assert_fail@plt+0x10684>
   2240c:	push	{r4, lr}
   22410:	mov	r2, #5
   22414:	ldr	r1, [pc, #36]	; 22440 <__assert_fail@plt+0x10688>
   22418:	mov	r0, #0
   2241c:	ldr	r4, [r3]
   22420:	bl	119a4 <dcgettext@plt>
   22424:	ldr	r2, [pc, #24]	; 22444 <__assert_fail@plt+0x1068c>
   22428:	mov	r1, #0
   2242c:	mov	r3, r0
   22430:	mov	r0, r4
   22434:	bl	11adc <error@plt>
   22438:	bl	11d64 <abort@plt>
   2243c:			; <UNDEFINED> instruction: 0x0003a2bc
   22440:	andeq	r9, r2, r4, ror #6
   22444:	andeq	r8, r2, r4, lsr #12
   22448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2244c:	sub	sp, sp, #36	; 0x24
   22450:	ldr	r6, [pc, #312]	; 22590 <__assert_fail@plt+0x107d8>
   22454:	ldr	lr, [sp, #80]	; 0x50
   22458:	mov	r8, r2
   2245c:	ldr	ip, [r6]
   22460:	mov	r2, r1
   22464:	mov	r9, r3
   22468:	str	lr, [sp]
   2246c:	add	r3, sp, #16
   22470:	mov	r1, #0
   22474:	str	ip, [sp, #28]
   22478:	mov	r7, r0
   2247c:	ldr	sl, [sp, #84]	; 0x54
   22480:	ldr	r5, [sp, #88]	; 0x58
   22484:	bl	22d8c <__assert_fail@plt+0x10fd4>
   22488:	subs	fp, r0, #0
   2248c:	bne	2254c <__assert_fail@plt+0x10794>
   22490:	ldrd	r2, [sp, #16]
   22494:	cmp	r3, r9
   22498:	cmpeq	r2, r8
   2249c:	ldrd	r8, [sp, #72]	; 0x48
   224a0:	movcc	r1, #1
   224a4:	movcs	r1, #0
   224a8:	cmp	r3, r9
   224ac:	cmpeq	r2, r8
   224b0:	orrhi	r1, r1, #1
   224b4:	cmp	r1, #0
   224b8:	beq	22510 <__assert_fail@plt+0x10758>
   224bc:	strd	r2, [sp, #8]
   224c0:	bl	11c14 <__errno_location@plt>
   224c4:	ldrd	r2, [sp, #8]
   224c8:	mov	r9, #0
   224cc:	mvn	r8, #-1073741824	; 0xc0000000
   224d0:	cmp	r3, r9
   224d4:	cmpeq	r2, r8
   224d8:	bls	22578 <__assert_fail@plt+0x107c0>
   224dc:	mov	r4, #75	; 0x4b
   224e0:	cmp	r5, #0
   224e4:	str	r4, [r0]
   224e8:	beq	22544 <__assert_fail@plt+0x1078c>
   224ec:	mov	r0, r7
   224f0:	bl	21ac4 <__assert_fail@plt+0xfd0c>
   224f4:	mov	r3, sl
   224f8:	ldr	r2, [pc, #148]	; 22594 <__assert_fail@plt+0x107dc>
   224fc:	mov	r1, r4
   22500:	str	r0, [sp]
   22504:	mov	r0, r5
   22508:	bl	11adc <error@plt>
   2250c:	ldrd	r2, [sp, #16]
   22510:	ldr	lr, [sp, #28]
   22514:	ldr	ip, [r6]
   22518:	mov	r0, r2
   2251c:	cmp	lr, ip
   22520:	mov	r1, r3
   22524:	bne	2258c <__assert_fail@plt+0x107d4>
   22528:	add	sp, sp, #36	; 0x24
   2252c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22530:	mov	r4, #0
   22534:	cmp	r5, #0
   22538:	str	r4, [r0]
   2253c:	bne	224ec <__assert_fail@plt+0x10734>
   22540:	mov	r4, r5
   22544:	mov	r5, #1
   22548:	b	224ec <__assert_fail@plt+0x10734>
   2254c:	bl	11c14 <__errno_location@plt>
   22550:	cmp	fp, #1
   22554:	beq	224dc <__assert_fail@plt+0x10724>
   22558:	cmp	fp, #3
   2255c:	beq	22530 <__assert_fail@plt+0x10778>
   22560:	ldr	r4, [r0]
   22564:	cmp	r5, #0
   22568:	moveq	r5, #1
   2256c:	cmp	r4, #22
   22570:	moveq	r4, #0
   22574:	b	224ec <__assert_fail@plt+0x10734>
   22578:	mov	r4, #34	; 0x22
   2257c:	cmp	r5, #0
   22580:	str	r4, [r0]
   22584:	bne	224ec <__assert_fail@plt+0x10734>
   22588:	b	22544 <__assert_fail@plt+0x1078c>
   2258c:	bl	119b0 <__stack_chk_fail@plt>
   22590:	andeq	r9, r3, r0, lsl #30
   22594:			; <UNDEFINED> instruction: 0x000286b0
   22598:	mov	r1, #10
   2259c:	b	22448 <__assert_fail@plt+0x10690>
   225a0:	mov	r1, #0
   225a4:	push	{r4, lr}
   225a8:	mov	r0, r1
   225ac:	bl	11bb4 <getcwd@plt>
   225b0:	subs	r4, r0, #0
   225b4:	beq	225c0 <__assert_fail@plt+0x10808>
   225b8:	mov	r0, r4
   225bc:	pop	{r4, pc}
   225c0:	bl	11c14 <__errno_location@plt>
   225c4:	ldr	r3, [r0]
   225c8:	cmp	r3, #12
   225cc:	bne	225b8 <__assert_fail@plt+0x10800>
   225d0:	bl	22408 <__assert_fail@plt+0x10650>
   225d4:	push	{r4, r5, r6, r7, r8, lr}
   225d8:	sub	sp, sp, #8
   225dc:	ldr	r7, [pc, #192]	; 226a4 <__assert_fail@plt+0x108ec>
   225e0:	mov	r2, #34	; 0x22
   225e4:	str	r2, [sp]
   225e8:	ldr	r3, [r7]
   225ec:	mov	r4, #0
   225f0:	str	r3, [sp, #4]
   225f4:	bl	11c14 <__errno_location@plt>
   225f8:	mov	r5, r4
   225fc:	mov	r6, r0
   22600:	mov	r0, r4
   22604:	mov	r1, sp
   22608:	bl	22328 <__assert_fail@plt+0x10570>
   2260c:	ldr	r1, [sp]
   22610:	sub	r8, r1, #2
   22614:	sub	r1, r1, #1
   22618:	strb	r5, [r0, r8]
   2261c:	str	r5, [r6]
   22620:	mov	r4, r0
   22624:	bl	11ae8 <gethostname@plt>
   22628:	cmp	r0, #0
   2262c:	bne	22658 <__assert_fail@plt+0x108a0>
   22630:	ldrb	r3, [r4, r8]
   22634:	cmp	r3, #0
   22638:	bne	22600 <__assert_fail@plt+0x10848>
   2263c:	ldr	r2, [sp, #4]
   22640:	ldr	r3, [r7]
   22644:	mov	r0, r4
   22648:	cmp	r2, r3
   2264c:	bne	226a0 <__assert_fail@plt+0x108e8>
   22650:	add	sp, sp, #8
   22654:	pop	{r4, r5, r6, r7, r8, pc}
   22658:	ldr	r8, [r6]
   2265c:	subs	r3, r8, #36	; 0x24
   22660:	movne	r3, #1
   22664:	cmp	r8, #0
   22668:	moveq	r3, #0
   2266c:	cmp	r8, #22
   22670:	moveq	r3, #0
   22674:	andne	r3, r3, #1
   22678:	cmp	r8, #12
   2267c:	moveq	r3, #0
   22680:	andne	r3, r3, #1
   22684:	cmp	r3, #0
   22688:	beq	22600 <__assert_fail@plt+0x10848>
   2268c:	mov	r0, r4
   22690:	bl	11938 <free@plt>
   22694:	mov	r4, #0
   22698:	str	r8, [r6]
   2269c:	b	2263c <__assert_fail@plt+0x10884>
   226a0:	bl	119b0 <__stack_chk_fail@plt>
   226a4:	andeq	r9, r3, r0, lsl #30
   226a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226ac:	cmp	r2, #36	; 0x24
   226b0:	ldr	r7, [pc, #1580]	; 22ce4 <__assert_fail@plt+0x10f2c>
   226b4:	sub	sp, sp, #20
   226b8:	mov	fp, r2
   226bc:	ldr	r2, [r7]
   226c0:	ldr	r9, [sp, #56]	; 0x38
   226c4:	str	r2, [sp, #12]
   226c8:	bhi	22ccc <__assert_fail@plt+0x10f14>
   226cc:	cmp	r1, #0
   226d0:	mov	r6, r1
   226d4:	mov	r5, r0
   226d8:	mov	sl, r3
   226dc:	addeq	r6, sp, #8
   226e0:	bl	11c14 <__errno_location@plt>
   226e4:	mov	r3, #0
   226e8:	str	r3, [r0]
   226ec:	mov	r8, r0
   226f0:	bl	11ba8 <__ctype_b_loc@plt>
   226f4:	ldrb	r3, [r5]
   226f8:	mov	r1, r5
   226fc:	ldr	ip, [r0]
   22700:	b	22708 <__assert_fail@plt+0x10950>
   22704:	ldrb	r3, [r1, #1]!
   22708:	lsl	r2, r3, #1
   2270c:	ldrh	r0, [ip, r2]
   22710:	ands	r4, r0, #8192	; 0x2000
   22714:	bne	22704 <__assert_fail@plt+0x1094c>
   22718:	cmp	r3, #45	; 0x2d
   2271c:	beq	227a8 <__assert_fail@plt+0x109f0>
   22720:	mov	r2, fp
   22724:	mov	r1, r6
   22728:	mov	r0, r5
   2272c:	bl	11bd8 <strtoul@plt>
   22730:	ldr	r3, [r6]
   22734:	cmp	r3, r5
   22738:	mov	fp, r0
   2273c:	beq	22790 <__assert_fail@plt+0x109d8>
   22740:	ldr	r4, [r8]
   22744:	cmp	r4, #0
   22748:	bne	22780 <__assert_fail@plt+0x109c8>
   2274c:	cmp	r9, #0
   22750:	beq	22760 <__assert_fail@plt+0x109a8>
   22754:	ldrb	r5, [r3]
   22758:	cmp	r5, #0
   2275c:	bne	22b18 <__assert_fail@plt+0x10d60>
   22760:	str	fp, [sl]
   22764:	ldr	r2, [sp, #12]
   22768:	ldr	r3, [r7]
   2276c:	mov	r0, r4
   22770:	cmp	r2, r3
   22774:	bne	22ce0 <__assert_fail@plt+0x10f28>
   22778:	add	sp, sp, #20
   2277c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22780:	cmp	r4, #34	; 0x22
   22784:	bne	227a8 <__assert_fail@plt+0x109f0>
   22788:	mov	r4, #1
   2278c:	b	2274c <__assert_fail@plt+0x10994>
   22790:	cmp	r9, #0
   22794:	str	r3, [sp, #4]
   22798:	beq	227a8 <__assert_fail@plt+0x109f0>
   2279c:	ldrb	r5, [r5]
   227a0:	cmp	r5, #0
   227a4:	bne	227b0 <__assert_fail@plt+0x109f8>
   227a8:	mov	r4, #4
   227ac:	b	22764 <__assert_fail@plt+0x109ac>
   227b0:	mov	r1, r5
   227b4:	mov	r0, r9
   227b8:	bl	11bfc <strchr@plt>
   227bc:	ldr	r3, [sp, #4]
   227c0:	cmp	r0, #0
   227c4:	movne	fp, #1
   227c8:	beq	227a8 <__assert_fail@plt+0x109f0>
   227cc:	sub	r8, r5, #69	; 0x45
   227d0:	cmp	r8, #47	; 0x2f
   227d4:	ldrls	pc, [pc, r8, lsl #2]
   227d8:	b	229a0 <__assert_fail@plt+0x10be8>
   227dc:	muleq	r2, ip, r8
   227e0:	andeq	r2, r2, r0, lsr #19
   227e4:	muleq	r2, ip, r8
   227e8:	andeq	r2, r2, r0, lsr #19
   227ec:	andeq	r2, r2, r0, lsr #19
   227f0:	andeq	r2, r2, r0, lsr #19
   227f4:	muleq	r2, ip, r8
   227f8:	andeq	r2, r2, r0, lsr #19
   227fc:	muleq	r2, ip, r8
   22800:	andeq	r2, r2, r0, lsr #19
   22804:	andeq	r2, r2, r0, lsr #19
   22808:	muleq	r2, ip, r8
   2280c:	andeq	r2, r2, r0, lsr #19
   22810:	andeq	r2, r2, r0, lsr #19
   22814:	andeq	r2, r2, r0, lsr #19
   22818:	muleq	r2, ip, r8
   2281c:	andeq	r2, r2, r0, lsr #19
   22820:	andeq	r2, r2, r0, lsr #19
   22824:	andeq	r2, r2, r0, lsr #19
   22828:	andeq	r2, r2, r0, lsr #19
   2282c:	muleq	r2, ip, r8
   22830:	muleq	r2, ip, r8
   22834:	andeq	r2, r2, r0, lsr #19
   22838:	andeq	r2, r2, r0, lsr #19
   2283c:	andeq	r2, r2, r0, lsr #19
   22840:	andeq	r2, r2, r0, lsr #19
   22844:	andeq	r2, r2, r0, lsr #19
   22848:	andeq	r2, r2, r0, lsr #19
   2284c:	andeq	r2, r2, r0, lsr #19
   22850:	andeq	r2, r2, r0, lsr #19
   22854:	andeq	r2, r2, r0, lsr #19
   22858:	andeq	r2, r2, r0, lsr #19
   2285c:	andeq	r2, r2, r0, lsr #19
   22860:	andeq	r2, r2, r0, lsr #19
   22864:	muleq	r2, ip, r8
   22868:	andeq	r2, r2, r0, lsr #19
   2286c:	andeq	r2, r2, r0, lsr #19
   22870:	andeq	r2, r2, r0, lsr #19
   22874:	muleq	r2, ip, r8
   22878:	andeq	r2, r2, r0, lsr #19
   2287c:	muleq	r2, ip, r8
   22880:	andeq	r2, r2, r0, lsr #19
   22884:	andeq	r2, r2, r0, lsr #19
   22888:	andeq	r2, r2, r0, lsr #19
   2288c:	andeq	r2, r2, r0, lsr #19
   22890:	andeq	r2, r2, r0, lsr #19
   22894:	andeq	r2, r2, r0, lsr #19
   22898:	muleq	r2, ip, r8
   2289c:	mov	r0, r9
   228a0:	mov	r1, #48	; 0x30
   228a4:	str	r3, [sp, #4]
   228a8:	bl	11bfc <strchr@plt>
   228ac:	ldr	r3, [sp, #4]
   228b0:	cmp	r0, #0
   228b4:	beq	229a0 <__assert_fail@plt+0x10be8>
   228b8:	ldrb	r2, [r3, #1]
   228bc:	cmp	r2, #68	; 0x44
   228c0:	beq	22cb8 <__assert_fail@plt+0x10f00>
   228c4:	cmp	r2, #105	; 0x69
   228c8:	beq	22b40 <__assert_fail@plt+0x10d88>
   228cc:	cmp	r2, #66	; 0x42
   228d0:	beq	22cb8 <__assert_fail@plt+0x10f00>
   228d4:	cmp	r8, #47	; 0x2f
   228d8:	ldrls	pc, [pc, r8, lsl #2]
   228dc:	b	22b34 <__assert_fail@plt+0x10d7c>
   228e0:	andeq	r2, r2, r0, ror ip
   228e4:	andeq	r2, r2, r4, lsr fp
   228e8:	muleq	r2, r0, sl
   228ec:	andeq	r2, r2, r4, lsr fp
   228f0:	andeq	r2, r2, r4, lsr fp
   228f4:	andeq	r2, r2, r4, lsr fp
   228f8:	strdeq	r2, [r2], -ip
   228fc:	andeq	r2, r2, r4, lsr fp
   22900:	andeq	r2, r2, r0, asr #24
   22904:	andeq	r2, r2, r4, lsr fp
   22908:	andeq	r2, r2, r4, lsr fp
   2290c:	andeq	r2, r2, r0, lsl ip
   22910:	andeq	r2, r2, r4, lsr fp
   22914:	andeq	r2, r2, r4, lsr fp
   22918:	andeq	r2, r2, r4, lsr fp
   2291c:	andeq	r2, r2, r0, ror #23
   22920:	andeq	r2, r2, r4, lsr fp
   22924:	andeq	r2, r2, r4, lsr fp
   22928:	andeq	r2, r2, r4, lsr fp
   2292c:	andeq	r2, r2, r4, lsr fp
   22930:			; <UNDEFINED> instruction: 0x00022bb0
   22934:	andeq	r2, r2, ip, ror fp
   22938:	andeq	r2, r2, r4, lsr fp
   2293c:	andeq	r2, r2, r4, lsr fp
   22940:	andeq	r2, r2, r4, lsr fp
   22944:	andeq	r2, r2, r4, lsr fp
   22948:	andeq	r2, r2, r4, lsr fp
   2294c:	andeq	r2, r2, r4, lsr fp
   22950:	andeq	r2, r2, r4, lsr fp
   22954:	andeq	r2, r2, r8, ror #22
   22958:			; <UNDEFINED> instruction: 0x00022cb0
   2295c:	andeq	r2, r2, r4, lsr fp
   22960:	andeq	r2, r2, r4, lsr fp
   22964:	andeq	r2, r2, r4, lsr fp
   22968:	muleq	r2, r0, sl
   2296c:	andeq	r2, r2, r4, lsr fp
   22970:	andeq	r2, r2, r4, lsr fp
   22974:	andeq	r2, r2, r4, lsr fp
   22978:	strdeq	r2, [r2], -ip
   2297c:	andeq	r2, r2, r4, lsr fp
   22980:	andeq	r2, r2, r0, asr #24
   22984:	andeq	r2, r2, r4, lsr fp
   22988:	andeq	r2, r2, r4, lsr fp
   2298c:	andeq	r2, r2, r4, lsr fp
   22990:	andeq	r2, r2, r4, lsr fp
   22994:	andeq	r2, r2, r4, lsr fp
   22998:	andeq	r2, r2, r4, lsr fp
   2299c:	andeq	r2, r2, r0, ror #23
   229a0:	mov	r1, #1
   229a4:	mov	r2, #1024	; 0x400
   229a8:	sub	r5, r5, #66	; 0x42
   229ac:	cmp	r5, #53	; 0x35
   229b0:	ldrls	pc, [pc, r5, lsl #2]
   229b4:	b	22b34 <__assert_fail@plt+0x10d7c>
   229b8:	andeq	r2, r2, r0, lsr #25
   229bc:	andeq	r2, r2, r4, lsr fp
   229c0:	andeq	r2, r2, r4, lsr fp
   229c4:	andeq	r2, r2, r8, ror ip
   229c8:	andeq	r2, r2, r4, lsr fp
   229cc:	muleq	r2, r8, sl
   229d0:	andeq	r2, r2, r4, lsr fp
   229d4:	andeq	r2, r2, r4, lsr fp
   229d8:	andeq	r2, r2, r4, lsr fp
   229dc:	andeq	r2, r2, r4, lsl #22
   229e0:	andeq	r2, r2, r4, lsr fp
   229e4:	andeq	r2, r2, r8, asr #24
   229e8:	andeq	r2, r2, r4, lsr fp
   229ec:	andeq	r2, r2, r4, lsr fp
   229f0:	andeq	r2, r2, r8, lsl ip
   229f4:	andeq	r2, r2, r4, lsr fp
   229f8:	andeq	r2, r2, r4, lsr fp
   229fc:	andeq	r2, r2, r4, lsr fp
   22a00:	andeq	r2, r2, r8, ror #23
   22a04:	andeq	r2, r2, r4, lsr fp
   22a08:	andeq	r2, r2, r4, lsr fp
   22a0c:	andeq	r2, r2, r4, lsr fp
   22a10:	andeq	r2, r2, r4, lsr fp
   22a14:			; <UNDEFINED> instruction: 0x00022bb8
   22a18:	andeq	r2, r2, r4, lsl #23
   22a1c:	andeq	r2, r2, r4, lsr fp
   22a20:	andeq	r2, r2, r4, lsr fp
   22a24:	andeq	r2, r2, r4, lsr fp
   22a28:	andeq	r2, r2, r4, lsr fp
   22a2c:	andeq	r2, r2, r4, lsr fp
   22a30:	andeq	r2, r2, r4, lsr fp
   22a34:	andeq	r2, r2, r4, lsr fp
   22a38:	andeq	r2, r2, ip, ror #22
   22a3c:	andeq	r2, r2, r4, ror #21
   22a40:	andeq	r2, r2, r4, lsr fp
   22a44:	andeq	r2, r2, r4, lsr fp
   22a48:	andeq	r2, r2, r4, lsr fp
   22a4c:	muleq	r2, r8, sl
   22a50:	andeq	r2, r2, r4, lsr fp
   22a54:	andeq	r2, r2, r4, lsr fp
   22a58:	andeq	r2, r2, r4, lsr fp
   22a5c:	andeq	r2, r2, r4, lsl #22
   22a60:	andeq	r2, r2, r4, lsr fp
   22a64:	andeq	r2, r2, r8, asr #24
   22a68:	andeq	r2, r2, r4, lsr fp
   22a6c:	andeq	r2, r2, r4, lsr fp
   22a70:	andeq	r2, r2, r4, lsr fp
   22a74:	andeq	r2, r2, r4, lsr fp
   22a78:	andeq	r2, r2, r4, lsr fp
   22a7c:	andeq	r2, r2, r4, lsr fp
   22a80:	andeq	r2, r2, r8, ror #23
   22a84:	andeq	r2, r2, r4, lsr fp
   22a88:	andeq	r2, r2, r4, lsr fp
   22a8c:	andeq	r2, r2, r8, asr fp
   22a90:	mov	r1, #1
   22a94:	mov	r2, #1024	; 0x400
   22a98:	umull	ip, r0, r2, fp
   22a9c:	adds	r0, r0, #0
   22aa0:	movne	r0, #1
   22aa4:	cmp	r0, #0
   22aa8:	bne	22cc4 <__assert_fail@plt+0x10f0c>
   22aac:	mul	fp, r2, fp
   22ab0:	umull	ip, r0, r2, fp
   22ab4:	adds	r0, r0, #0
   22ab8:	movne	r0, #1
   22abc:	cmp	r0, #0
   22ac0:	bne	22cc4 <__assert_fail@plt+0x10f0c>
   22ac4:	mul	fp, r2, fp
   22ac8:	umull	ip, r0, r2, fp
   22acc:	adds	r0, r0, #0
   22ad0:	movne	r0, #1
   22ad4:	cmp	r0, #0
   22ad8:	muleq	fp, r2, fp
   22adc:	bne	22cc4 <__assert_fail@plt+0x10f0c>
   22ae0:	orr	r4, r4, r0
   22ae4:	add	r2, r3, r1
   22ae8:	str	r2, [r6]
   22aec:	ldrb	r3, [r3, r1]
   22af0:	cmp	r3, #0
   22af4:	orrne	r4, r4, #2
   22af8:	b	22760 <__assert_fail@plt+0x109a8>
   22afc:	mov	r1, #1
   22b00:	mov	r2, #1024	; 0x400
   22b04:	umull	ip, r0, r2, fp
   22b08:	cmp	r0, #0
   22b0c:	bne	22c64 <__assert_fail@plt+0x10eac>
   22b10:	mul	fp, r2, fp
   22b14:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22b18:	mov	r1, r5
   22b1c:	mov	r0, r9
   22b20:	str	r3, [sp, #4]
   22b24:	bl	11bfc <strchr@plt>
   22b28:	ldr	r3, [sp, #4]
   22b2c:	cmp	r0, #0
   22b30:	bne	227cc <__assert_fail@plt+0x10a14>
   22b34:	str	fp, [sl]
   22b38:	orr	r4, r4, #2
   22b3c:	b	22764 <__assert_fail@plt+0x109ac>
   22b40:	ldrb	r1, [r3, #2]
   22b44:	mov	r2, #1024	; 0x400
   22b48:	cmp	r1, #66	; 0x42
   22b4c:	movne	r1, #1
   22b50:	moveq	r1, #3
   22b54:	b	229a8 <__assert_fail@plt+0x10bf0>
   22b58:	cmp	fp, #0
   22b5c:	blt	22c64 <__assert_fail@plt+0x10eac>
   22b60:	lsl	fp, fp, #1
   22b64:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22b68:	mov	r1, #1
   22b6c:	lsrs	r2, fp, #23
   22b70:	bne	22c64 <__assert_fail@plt+0x10eac>
   22b74:	lsl	fp, fp, #9
   22b78:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22b7c:	mov	r1, #1
   22b80:	mov	r2, #1024	; 0x400
   22b84:	mov	r0, #7
   22b88:	mov	lr, #0
   22b8c:	umull	r5, ip, r2, fp
   22b90:	cmp	ip, #0
   22b94:	movne	lr, #1
   22b98:	muleq	fp, r2, fp
   22b9c:	mvnne	fp, #0
   22ba0:	subs	r0, r0, #1
   22ba4:	bne	22b8c <__assert_fail@plt+0x10dd4>
   22ba8:	orr	r4, r4, lr
   22bac:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22bb0:	mov	r1, #1
   22bb4:	mov	r2, #1024	; 0x400
   22bb8:	mov	r0, #8
   22bbc:	mov	lr, #0
   22bc0:	umull	r5, ip, r2, fp
   22bc4:	cmp	ip, #0
   22bc8:	movne	lr, #1
   22bcc:	muleq	fp, r2, fp
   22bd0:	mvnne	fp, #0
   22bd4:	subs	r0, r0, #1
   22bd8:	bne	22bc0 <__assert_fail@plt+0x10e08>
   22bdc:	b	22ba8 <__assert_fail@plt+0x10df0>
   22be0:	mov	r1, #1
   22be4:	mov	r2, #1024	; 0x400
   22be8:	mov	r0, #4
   22bec:	mov	lr, #0
   22bf0:	umull	r5, ip, r2, fp
   22bf4:	cmp	ip, #0
   22bf8:	movne	lr, #1
   22bfc:	muleq	fp, r2, fp
   22c00:	mvnne	fp, #0
   22c04:	subs	r0, r0, #1
   22c08:	bne	22bf0 <__assert_fail@plt+0x10e38>
   22c0c:	b	22ba8 <__assert_fail@plt+0x10df0>
   22c10:	mov	r1, #1
   22c14:	mov	r2, #1024	; 0x400
   22c18:	mov	r0, #5
   22c1c:	mov	lr, #0
   22c20:	umull	r5, ip, r2, fp
   22c24:	cmp	ip, #0
   22c28:	movne	lr, #1
   22c2c:	muleq	fp, r2, fp
   22c30:	mvnne	fp, #0
   22c34:	subs	r0, r0, #1
   22c38:	bne	22c20 <__assert_fail@plt+0x10e68>
   22c3c:	b	22ba8 <__assert_fail@plt+0x10df0>
   22c40:	mov	r1, #1
   22c44:	mov	r2, #1024	; 0x400
   22c48:	umull	ip, r0, r2, fp
   22c4c:	cmp	r0, #0
   22c50:	bne	22c64 <__assert_fail@plt+0x10eac>
   22c54:	mul	fp, r2, fp
   22c58:	umull	ip, r0, r2, fp
   22c5c:	cmp	r0, #0
   22c60:	beq	22b10 <__assert_fail@plt+0x10d58>
   22c64:	mov	r4, #1
   22c68:	mvn	fp, #0
   22c6c:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22c70:	mov	r1, #1
   22c74:	mov	r2, #1024	; 0x400
   22c78:	mov	r0, #6
   22c7c:	mov	lr, #0
   22c80:	umull	r5, ip, r2, fp
   22c84:	cmp	ip, #0
   22c88:	movne	lr, #1
   22c8c:	muleq	fp, r2, fp
   22c90:	mvnne	fp, #0
   22c94:	subs	r0, r0, #1
   22c98:	bne	22c80 <__assert_fail@plt+0x10ec8>
   22c9c:	b	22ba8 <__assert_fail@plt+0x10df0>
   22ca0:	lsrs	r2, fp, #22
   22ca4:	bne	22c64 <__assert_fail@plt+0x10eac>
   22ca8:	lsl	fp, fp, #10
   22cac:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22cb0:	mov	r1, #1
   22cb4:	b	22ae4 <__assert_fail@plt+0x10d2c>
   22cb8:	mov	r1, #2
   22cbc:	mov	r2, #1000	; 0x3e8
   22cc0:	b	229a8 <__assert_fail@plt+0x10bf0>
   22cc4:	mvn	fp, #0
   22cc8:	b	22ae0 <__assert_fail@plt+0x10d28>
   22ccc:	ldr	r3, [pc, #20]	; 22ce8 <__assert_fail@plt+0x10f30>
   22cd0:	mov	r2, #96	; 0x60
   22cd4:	ldr	r1, [pc, #16]	; 22cec <__assert_fail@plt+0x10f34>
   22cd8:	ldr	r0, [pc, #16]	; 22cf0 <__assert_fail@plt+0x10f38>
   22cdc:	bl	11db8 <__assert_fail@plt>
   22ce0:	bl	119b0 <__stack_chk_fail@plt>
   22ce4:	andeq	r9, r3, r0, lsl #30
   22ce8:	andeq	r9, r2, r8, ror r3
   22cec:	andeq	r9, r2, r4, lsl #7
   22cf0:	muleq	r2, r4, r3
   22cf4:	ldr	ip, [pc, #128]	; 22d7c <__assert_fail@plt+0x10fc4>
   22cf8:	push	{r7, lr}
   22cfc:	sub	r0, r0, #1
   22d00:	ldr	lr, [pc, #120]	; 22d80 <__assert_fail@plt+0x10fc8>
   22d04:	sub	sp, sp, #16
   22d08:	ldr	r4, [ip]
   22d0c:	cmp	r0, #3
   22d10:	str	r4, [sp, #12]
   22d14:	ldr	r6, [sp, #24]
   22d18:	ldr	r5, [lr]
   22d1c:	bhi	22d78 <__assert_fail@plt+0x10fc0>
   22d20:	mov	ip, r1
   22d24:	cmp	ip, #0
   22d28:	ldr	r1, [pc, #84]	; 22d84 <__assert_fail@plt+0x10fcc>
   22d2c:	ldrlt	r4, [pc, #84]	; 22d88 <__assert_fail@plt+0x10fd0>
   22d30:	movlt	r3, #0
   22d34:	ldr	r1, [r1, r0, lsl #2]
   22d38:	strblt	r2, [sp, #8]
   22d3c:	mov	r0, #0
   22d40:	mov	r2, #5
   22d44:	ldrge	r7, [r3, ip, lsl #4]
   22d48:	sublt	r4, r4, ip
   22d4c:	strblt	r3, [sp, #9]
   22d50:	addlt	r7, sp, #8
   22d54:	ldrge	r4, [pc, #44]	; 22d88 <__assert_fail@plt+0x10fd0>
   22d58:	bl	119a4 <dcgettext@plt>
   22d5c:	str	r6, [sp, #4]
   22d60:	str	r7, [sp]
   22d64:	mov	r3, r4
   22d68:	mov	r1, #0
   22d6c:	mov	r2, r0
   22d70:	mov	r0, r5
   22d74:	bl	11adc <error@plt>
   22d78:	bl	11d64 <abort@plt>
   22d7c:	andeq	r9, r3, r0, lsl #30
   22d80:			; <UNDEFINED> instruction: 0x0003a2bc
   22d84:			; <UNDEFINED> instruction: 0x000293bc
   22d88:	andeq	r9, r2, ip, asr #7
   22d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d90:	sub	sp, sp, #36	; 0x24
   22d94:	ldr	r5, [pc, #2536]	; 23784 <__assert_fail@plt+0x119cc>
   22d98:	mov	r9, r2
   22d9c:	cmp	r2, #36	; 0x24
   22da0:	str	r3, [sp, #12]
   22da4:	ldr	r2, [r5]
   22da8:	ldr	r3, [sp, #72]	; 0x48
   22dac:	str	r2, [sp, #28]
   22db0:	str	r3, [sp]
   22db4:	bhi	23770 <__assert_fail@plt+0x119b8>
   22db8:	cmp	r1, #0
   22dbc:	mov	r4, r1
   22dc0:	mov	r6, r0
   22dc4:	addeq	r4, sp, #24
   22dc8:	bl	11c14 <__errno_location@plt>
   22dcc:	mov	r3, #0
   22dd0:	str	r3, [r0]
   22dd4:	mov	r7, r0
   22dd8:	bl	11ba8 <__ctype_b_loc@plt>
   22ddc:	ldrb	r3, [r6]
   22de0:	mov	r1, r6
   22de4:	ldr	r0, [r0]
   22de8:	b	22df0 <__assert_fail@plt+0x11038>
   22dec:	ldrb	r3, [r1, #1]!
   22df0:	lsl	r2, r3, #1
   22df4:	ldrh	r8, [r0, r2]
   22df8:	ands	r8, r8, #8192	; 0x2000
   22dfc:	bne	22dec <__assert_fail@plt+0x11034>
   22e00:	cmp	r3, #45	; 0x2d
   22e04:	beq	22ea0 <__assert_fail@plt+0x110e8>
   22e08:	mov	r2, r9
   22e0c:	mov	r3, r8
   22e10:	mov	r1, r4
   22e14:	mov	r0, r6
   22e18:	bl	11968 <__strtoull_internal@plt>
   22e1c:	ldr	r9, [r4]
   22e20:	cmp	r9, r6
   22e24:	mov	sl, r0
   22e28:	mov	fp, r1
   22e2c:	beq	22e88 <__assert_fail@plt+0x110d0>
   22e30:	ldr	r8, [r7]
   22e34:	cmp	r8, #0
   22e38:	bne	22e78 <__assert_fail@plt+0x110c0>
   22e3c:	ldr	r3, [sp]
   22e40:	cmp	r3, #0
   22e44:	beq	22e54 <__assert_fail@plt+0x1109c>
   22e48:	ldrb	r6, [r9]
   22e4c:	cmp	r6, #0
   22e50:	bne	23228 <__assert_fail@plt+0x11470>
   22e54:	ldr	r3, [sp, #12]
   22e58:	strd	sl, [r3]
   22e5c:	ldr	r2, [sp, #28]
   22e60:	ldr	r3, [r5]
   22e64:	mov	r0, r8
   22e68:	cmp	r2, r3
   22e6c:	bne	2376c <__assert_fail@plt+0x119b4>
   22e70:	add	sp, sp, #36	; 0x24
   22e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e78:	cmp	r8, #34	; 0x22
   22e7c:	bne	22ea0 <__assert_fail@plt+0x110e8>
   22e80:	mov	r8, #1
   22e84:	b	22e3c <__assert_fail@plt+0x11084>
   22e88:	ldr	r0, [sp]
   22e8c:	cmp	r0, #0
   22e90:	beq	22ea0 <__assert_fail@plt+0x110e8>
   22e94:	ldrb	r6, [r6]
   22e98:	cmp	r6, #0
   22e9c:	bne	22ea8 <__assert_fail@plt+0x110f0>
   22ea0:	mov	r8, #4
   22ea4:	b	22e5c <__assert_fail@plt+0x110a4>
   22ea8:	mov	r1, r6
   22eac:	bl	11bfc <strchr@plt>
   22eb0:	cmp	r0, #0
   22eb4:	movne	sl, #1
   22eb8:	movne	fp, #0
   22ebc:	beq	22ea0 <__assert_fail@plt+0x110e8>
   22ec0:	sub	r7, r6, #69	; 0x45
   22ec4:	cmp	r7, #47	; 0x2f
   22ec8:	ldrls	pc, [pc, r7, lsl #2]
   22ecc:	b	2308c <__assert_fail@plt+0x112d4>
   22ed0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22ed4:	andeq	r3, r2, ip, lsl #1
   22ed8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22edc:	andeq	r3, r2, ip, lsl #1
   22ee0:	andeq	r3, r2, ip, lsl #1
   22ee4:	andeq	r3, r2, ip, lsl #1
   22ee8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22eec:	andeq	r3, r2, ip, lsl #1
   22ef0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22ef4:	andeq	r3, r2, ip, lsl #1
   22ef8:	andeq	r3, r2, ip, lsl #1
   22efc:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f00:	andeq	r3, r2, ip, lsl #1
   22f04:	andeq	r3, r2, ip, lsl #1
   22f08:	andeq	r3, r2, ip, lsl #1
   22f0c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f10:	andeq	r3, r2, ip, lsl #1
   22f14:	andeq	r3, r2, ip, lsl #1
   22f18:	andeq	r3, r2, ip, lsl #1
   22f1c:	andeq	r3, r2, ip, lsl #1
   22f20:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f24:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f28:	andeq	r3, r2, ip, lsl #1
   22f2c:	andeq	r3, r2, ip, lsl #1
   22f30:	andeq	r3, r2, ip, lsl #1
   22f34:	andeq	r3, r2, ip, lsl #1
   22f38:	andeq	r3, r2, ip, lsl #1
   22f3c:	andeq	r3, r2, ip, lsl #1
   22f40:	andeq	r3, r2, ip, lsl #1
   22f44:	andeq	r3, r2, ip, lsl #1
   22f48:	andeq	r3, r2, ip, lsl #1
   22f4c:	andeq	r3, r2, ip, lsl #1
   22f50:	andeq	r3, r2, ip, lsl #1
   22f54:	andeq	r3, r2, ip, lsl #1
   22f58:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f5c:	andeq	r3, r2, ip, lsl #1
   22f60:	andeq	r3, r2, ip, lsl #1
   22f64:	andeq	r3, r2, ip, lsl #1
   22f68:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f6c:	andeq	r3, r2, ip, lsl #1
   22f70:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f74:	andeq	r3, r2, ip, lsl #1
   22f78:	andeq	r3, r2, ip, lsl #1
   22f7c:	andeq	r3, r2, ip, lsl #1
   22f80:	andeq	r3, r2, ip, lsl #1
   22f84:	andeq	r3, r2, ip, lsl #1
   22f88:	andeq	r3, r2, ip, lsl #1
   22f8c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f90:	ldr	r0, [sp]
   22f94:	mov	r1, #48	; 0x30
   22f98:	bl	11bfc <strchr@plt>
   22f9c:	cmp	r0, #0
   22fa0:	beq	2308c <__assert_fail@plt+0x112d4>
   22fa4:	ldrb	r3, [r9, #1]
   22fa8:	cmp	r3, #68	; 0x44
   22fac:	beq	2366c <__assert_fail@plt+0x118b4>
   22fb0:	cmp	r3, #105	; 0x69
   22fb4:	beq	2324c <__assert_fail@plt+0x11494>
   22fb8:	cmp	r3, #66	; 0x42
   22fbc:	beq	2366c <__assert_fail@plt+0x118b4>
   22fc0:	cmp	r7, #47	; 0x2f
   22fc4:	ldrls	pc, [pc, r7, lsl #2]
   22fc8:	b	2323c <__assert_fail@plt+0x11484>
   22fcc:	andeq	r3, r2, r0, asr r6
   22fd0:	andeq	r3, r2, ip, lsr r2
   22fd4:	andeq	r3, r2, r0, asr #12
   22fd8:	andeq	r3, r2, ip, lsr r2
   22fdc:	andeq	r3, r2, ip, lsr r2
   22fe0:	andeq	r3, r2, ip, lsr r2
   22fe4:	andeq	r3, r2, r0, lsr r6
   22fe8:	andeq	r3, r2, ip, lsr r2
   22fec:	andeq	r3, r2, r0, lsr #12
   22ff0:	andeq	r3, r2, ip, lsr r2
   22ff4:	andeq	r3, r2, ip, lsr r2
   22ff8:	andeq	r3, r2, r0, lsl r6
   22ffc:	andeq	r3, r2, ip, lsr r2
   23000:	andeq	r3, r2, ip, lsr r2
   23004:	andeq	r3, r2, ip, lsr r2
   23008:	andeq	r3, r2, r0, lsl #12
   2300c:	andeq	r3, r2, ip, lsr r2
   23010:	andeq	r3, r2, ip, lsr r2
   23014:	andeq	r3, r2, ip, lsr r2
   23018:	andeq	r3, r2, ip, lsr r2
   2301c:	strdeq	r3, [r2], -r0
   23020:	andeq	r3, r2, r0, ror #11
   23024:	andeq	r3, r2, ip, lsr r2
   23028:	andeq	r3, r2, ip, lsr r2
   2302c:	andeq	r3, r2, ip, lsr r2
   23030:	andeq	r3, r2, ip, lsr r2
   23034:	andeq	r3, r2, ip, lsr r2
   23038:	andeq	r3, r2, ip, lsr r2
   2303c:	andeq	r3, r2, ip, lsr r2
   23040:	andeq	r3, r2, r8, lsl #5
   23044:	ldrdeq	r3, [r2], -r8
   23048:	andeq	r3, r2, ip, lsr r2
   2304c:	andeq	r3, r2, ip, lsr r2
   23050:	andeq	r3, r2, ip, lsr r2
   23054:	andeq	r3, r2, r0, asr #12
   23058:	andeq	r3, r2, ip, lsr r2
   2305c:	andeq	r3, r2, ip, lsr r2
   23060:	andeq	r3, r2, ip, lsr r2
   23064:	andeq	r3, r2, r0, lsr r6
   23068:	andeq	r3, r2, ip, lsr r2
   2306c:	andeq	r3, r2, r0, lsr #12
   23070:	andeq	r3, r2, ip, lsr r2
   23074:	andeq	r3, r2, ip, lsr r2
   23078:	andeq	r3, r2, ip, lsr r2
   2307c:	andeq	r3, r2, ip, lsr r2
   23080:	andeq	r3, r2, ip, lsr r2
   23084:	andeq	r3, r2, ip, lsr r2
   23088:	andeq	r3, r2, r0, lsl #12
   2308c:	mov	lr, #1
   23090:	mov	r0, #1024	; 0x400
   23094:	sub	r6, r6, #66	; 0x42
   23098:	cmp	r6, #53	; 0x35
   2309c:	ldrls	pc, [pc, r6, lsl #2]
   230a0:	b	2323c <__assert_fail@plt+0x11484>
   230a4:			; <UNDEFINED> instruction: 0x000232b0
   230a8:	andeq	r3, r2, ip, lsr r2
   230ac:	andeq	r3, r2, ip, lsr r2
   230b0:	ldrdeq	r3, [r2], -r4
   230b4:	andeq	r3, r2, ip, lsr r2
   230b8:	andeq	r3, r2, ip, ror r1
   230bc:	andeq	r3, r2, ip, lsr r2
   230c0:	andeq	r3, r2, ip, lsr r2
   230c4:	andeq	r3, r2, ip, lsr r2
   230c8:	andeq	r3, r2, ip, asr #7
   230cc:	andeq	r3, r2, ip, lsr r2
   230d0:	andeq	r3, r2, r0, ror r5
   230d4:	andeq	r3, r2, ip, lsr r2
   230d8:	andeq	r3, r2, ip, lsr r2
   230dc:	strdeq	r3, [r2], -r4
   230e0:	andeq	r3, r2, ip, lsr r2
   230e4:	andeq	r3, r2, ip, lsr r2
   230e8:	andeq	r3, r2, ip, lsr r2
   230ec:	andeq	r3, r2, r8, ror r4
   230f0:	andeq	r3, r2, ip, lsr r2
   230f4:	andeq	r3, r2, ip, lsr r2
   230f8:	andeq	r3, r2, ip, lsr r2
   230fc:	andeq	r3, r2, ip, lsr r2
   23100:	strdeq	r3, [r2], -ip
   23104:	andeq	r3, r2, r0, asr r3
   23108:	andeq	r3, r2, ip, lsr r2
   2310c:	andeq	r3, r2, ip, lsr r2
   23110:	andeq	r3, r2, ip, lsr r2
   23114:	andeq	r3, r2, ip, lsr r2
   23118:	andeq	r3, r2, ip, lsr r2
   2311c:	andeq	r3, r2, ip, lsr r2
   23120:	andeq	r3, r2, ip, lsr r2
   23124:	andeq	r3, r2, ip, lsl #5
   23128:	andeq	r3, r2, r0, lsl r2
   2312c:	andeq	r3, r2, ip, lsr r2
   23130:	andeq	r3, r2, ip, lsr r2
   23134:	andeq	r3, r2, ip, lsr r2
   23138:	andeq	r3, r2, ip, ror r1
   2313c:	andeq	r3, r2, ip, lsr r2
   23140:	andeq	r3, r2, ip, lsr r2
   23144:	andeq	r3, r2, ip, lsr r2
   23148:	andeq	r3, r2, ip, asr #7
   2314c:	andeq	r3, r2, ip, lsr r2
   23150:	andeq	r3, r2, r0, ror r5
   23154:	andeq	r3, r2, ip, lsr r2
   23158:	andeq	r3, r2, ip, lsr r2
   2315c:	andeq	r3, r2, ip, lsr r2
   23160:	andeq	r3, r2, ip, lsr r2
   23164:	andeq	r3, r2, ip, lsr r2
   23168:	andeq	r3, r2, ip, lsr r2
   2316c:	andeq	r3, r2, r8, ror r4
   23170:	andeq	r3, r2, ip, lsr r2
   23174:	andeq	r3, r2, ip, lsr r2
   23178:	andeq	r3, r2, r4, ror #4
   2317c:	asr	r1, r0, #31
   23180:	mov	r2, #0
   23184:	mov	r3, #0
   23188:	cmp	fp, #0
   2318c:	strd	r2, [sp]
   23190:	bne	236b0 <__assert_fail@plt+0x118f8>
   23194:	ldrd	r2, [sp]
   23198:	orrs	r3, r2, r3
   2319c:	bne	236a0 <__assert_fail@plt+0x118e8>
   231a0:	mul	r3, sl, r1
   231a4:	umull	r6, r7, sl, r0
   231a8:	mla	r3, r0, fp, r3
   231ac:	ldrd	sl, [sp]
   231b0:	add	ip, r3, r7
   231b4:	cmp	ip, #0
   231b8:	mov	r7, ip
   231bc:	bne	23744 <__assert_fail@plt+0x1198c>
   231c0:	orrs	r3, sl, fp
   231c4:	bne	236a0 <__assert_fail@plt+0x118e8>
   231c8:	umull	r2, r3, r6, r0
   231cc:	mul	ip, r6, r1
   231d0:	strd	r2, [sp]
   231d4:	mla	r3, r0, r7, ip
   231d8:	ldr	r2, [sp, #4]
   231dc:	add	ip, r3, r2
   231e0:	cmp	ip, #0
   231e4:	str	ip, [sp, #4]
   231e8:	bne	23720 <__assert_fail@plt+0x11968>
   231ec:	orrs	r3, sl, fp
   231f0:	bne	236a0 <__assert_fail@plt+0x118e8>
   231f4:	ldrd	r6, [sp]
   231f8:	mov	r3, #0
   231fc:	mul	r2, r6, r1
   23200:	umull	sl, fp, r6, r0
   23204:	mla	r2, r0, r7, r2
   23208:	add	fp, r2, fp
   2320c:	orr	r8, r8, r3
   23210:	add	r3, r9, lr
   23214:	str	r3, [r4]
   23218:	ldrb	r3, [r9, lr]
   2321c:	cmp	r3, #0
   23220:	orrne	r8, r8, #2
   23224:	b	22e54 <__assert_fail@plt+0x1109c>
   23228:	mov	r1, r6
   2322c:	ldr	r0, [sp]
   23230:	bl	11bfc <strchr@plt>
   23234:	cmp	r0, #0
   23238:	bne	22ec0 <__assert_fail@plt+0x11108>
   2323c:	ldr	r3, [sp, #12]
   23240:	orr	r8, r8, #2
   23244:	strd	sl, [r3]
   23248:	b	22e5c <__assert_fail@plt+0x110a4>
   2324c:	ldrb	r3, [r9, #2]
   23250:	mov	r0, #1024	; 0x400
   23254:	cmp	r3, #66	; 0x42
   23258:	movne	lr, #1
   2325c:	moveq	lr, #3
   23260:	b	23094 <__assert_fail@plt+0x112dc>
   23264:	lsr	r3, fp, #31
   23268:	adds	sl, sl, sl
   2326c:	adc	fp, fp, fp
   23270:	cmp	r3, #0
   23274:	beq	23210 <__assert_fail@plt+0x11458>
   23278:	mov	r8, #1
   2327c:	mvn	sl, #0
   23280:	mvn	fp, #0
   23284:	b	23210 <__assert_fail@plt+0x11458>
   23288:	mov	lr, #1
   2328c:	lsr	r3, fp, #23
   23290:	cmp	r3, #0
   23294:	bne	23278 <__assert_fail@plt+0x114c0>
   23298:	lsl	r3, fp, #9
   2329c:	orr	r3, r3, sl, lsr #23
   232a0:	lsl	r2, sl, #9
   232a4:	mov	sl, r2
   232a8:	mov	fp, r3
   232ac:	b	23210 <__assert_fail@plt+0x11458>
   232b0:	lsr	r3, fp, #22
   232b4:	cmp	r3, #0
   232b8:	bne	23278 <__assert_fail@plt+0x114c0>
   232bc:	lsl	r3, fp, #10
   232c0:	orr	r3, r3, sl, lsr #22
   232c4:	lsl	r2, sl, #10
   232c8:	mov	sl, r2
   232cc:	mov	fp, r3
   232d0:	b	23210 <__assert_fail@plt+0x11458>
   232d4:	mov	r6, r0
   232d8:	asr	r7, r0, #31
   232dc:	mov	r3, #0
   232e0:	mov	ip, #6
   232e4:	str	r3, [sp]
   232e8:	strd	r4, [sp, #16]
   232ec:	b	2331c <__assert_fail@plt+0x11564>
   232f0:	orrs	r3, r2, r3
   232f4:	movne	r3, #1
   232f8:	muleq	r3, sl, r7
   232fc:	strne	r3, [sp]
   23300:	mlaeq	r3, r6, fp, r3
   23304:	umulleq	sl, fp, sl, r6
   23308:	mvnne	sl, #0
   2330c:	addeq	fp, r3, fp
   23310:	mvnne	fp, #0
   23314:	subs	ip, ip, #1
   23318:	beq	23660 <__assert_fail@plt+0x118a8>
   2331c:	cmp	fp, #0
   23320:	mov	r2, #0
   23324:	mov	r3, #0
   23328:	beq	232f0 <__assert_fail@plt+0x11538>
   2332c:	umull	r0, r1, sl, r6
   23330:	mov	r5, #0
   23334:	mov	r0, r1
   23338:	mov	r1, r5
   2333c:	umlal	r0, r1, fp, r6
   23340:	cmp	r1, r5
   23344:	movne	r2, #1
   23348:	movne	r3, #0
   2334c:	b	232f0 <__assert_fail@plt+0x11538>
   23350:	mov	r6, r0
   23354:	asr	r7, r0, #31
   23358:	mov	r3, #0
   2335c:	mov	ip, #7
   23360:	str	r3, [sp]
   23364:	strd	r4, [sp, #16]
   23368:	b	23398 <__assert_fail@plt+0x115e0>
   2336c:	orrs	r3, r2, r3
   23370:	movne	r3, #1
   23374:	muleq	r3, sl, r7
   23378:	strne	r3, [sp]
   2337c:	mlaeq	r3, r6, fp, r3
   23380:	umulleq	sl, fp, sl, r6
   23384:	mvnne	sl, #0
   23388:	addeq	fp, r3, fp
   2338c:	mvnne	fp, #0
   23390:	subs	ip, ip, #1
   23394:	beq	23660 <__assert_fail@plt+0x118a8>
   23398:	cmp	fp, #0
   2339c:	mov	r2, #0
   233a0:	mov	r3, #0
   233a4:	beq	2336c <__assert_fail@plt+0x115b4>
   233a8:	umull	r0, r1, sl, r6
   233ac:	mov	r5, #0
   233b0:	mov	r0, r1
   233b4:	mov	r1, r5
   233b8:	umlal	r0, r1, fp, r6
   233bc:	cmp	r1, r5
   233c0:	movne	r2, #1
   233c4:	movne	r3, #0
   233c8:	b	2336c <__assert_fail@plt+0x115b4>
   233cc:	asr	r1, r0, #31
   233d0:	cmp	fp, #0
   233d4:	mov	r6, #0
   233d8:	mov	r7, #0
   233dc:	bne	23678 <__assert_fail@plt+0x118c0>
   233e0:	orrs	r3, r6, r7
   233e4:	bne	23278 <__assert_fail@plt+0x114c0>
   233e8:	mul	r3, sl, r1
   233ec:	mla	r3, r0, fp, r3
   233f0:	umull	sl, fp, sl, r0
   233f4:	add	fp, r3, fp
   233f8:	b	23210 <__assert_fail@plt+0x11458>
   233fc:	mov	r6, r0
   23400:	asr	r7, r0, #31
   23404:	mov	r3, #0
   23408:	mov	ip, #8
   2340c:	str	r3, [sp]
   23410:	strd	r4, [sp, #16]
   23414:	b	23444 <__assert_fail@plt+0x1168c>
   23418:	orrs	r3, r2, r3
   2341c:	movne	r3, #1
   23420:	muleq	r3, sl, r7
   23424:	strne	r3, [sp]
   23428:	mlaeq	r3, r6, fp, r3
   2342c:	umulleq	sl, fp, sl, r6
   23430:	mvnne	sl, #0
   23434:	addeq	fp, r3, fp
   23438:	mvnne	fp, #0
   2343c:	subs	ip, ip, #1
   23440:	beq	23660 <__assert_fail@plt+0x118a8>
   23444:	cmp	fp, #0
   23448:	mov	r2, #0
   2344c:	mov	r3, #0
   23450:	beq	23418 <__assert_fail@plt+0x11660>
   23454:	umull	r0, r1, sl, r6
   23458:	mov	r5, #0
   2345c:	mov	r0, r1
   23460:	mov	r1, r5
   23464:	umlal	r0, r1, fp, r6
   23468:	cmp	r1, r5
   2346c:	movne	r2, #1
   23470:	movne	r3, #0
   23474:	b	23418 <__assert_fail@plt+0x11660>
   23478:	mov	r6, r0
   2347c:	asr	r7, r0, #31
   23480:	mov	r3, #0
   23484:	mov	ip, #4
   23488:	str	r3, [sp]
   2348c:	strd	r4, [sp, #16]
   23490:	b	234c0 <__assert_fail@plt+0x11708>
   23494:	orrs	r3, r2, r3
   23498:	movne	r3, #1
   2349c:	muleq	r3, sl, r7
   234a0:	strne	r3, [sp]
   234a4:	mlaeq	r3, r6, fp, r3
   234a8:	umulleq	sl, fp, sl, r6
   234ac:	mvnne	sl, #0
   234b0:	addeq	fp, r3, fp
   234b4:	mvnne	fp, #0
   234b8:	subs	ip, ip, #1
   234bc:	beq	23660 <__assert_fail@plt+0x118a8>
   234c0:	cmp	fp, #0
   234c4:	mov	r2, #0
   234c8:	mov	r3, #0
   234cc:	beq	23494 <__assert_fail@plt+0x116dc>
   234d0:	umull	r0, r1, sl, r6
   234d4:	mov	r5, #0
   234d8:	mov	r0, r1
   234dc:	mov	r1, r5
   234e0:	umlal	r0, r1, fp, r6
   234e4:	cmp	r1, r5
   234e8:	movne	r2, #1
   234ec:	movne	r3, #0
   234f0:	b	23494 <__assert_fail@plt+0x116dc>
   234f4:	mov	r6, r0
   234f8:	asr	r7, r0, #31
   234fc:	mov	r3, #0
   23500:	mov	ip, #5
   23504:	str	r3, [sp]
   23508:	strd	r4, [sp, #16]
   2350c:	b	2353c <__assert_fail@plt+0x11784>
   23510:	orrs	r3, r2, r3
   23514:	movne	r3, #1
   23518:	muleq	r3, sl, r7
   2351c:	strne	r3, [sp]
   23520:	mlaeq	r3, r6, fp, r3
   23524:	umulleq	sl, fp, sl, r6
   23528:	mvnne	sl, #0
   2352c:	addeq	fp, r3, fp
   23530:	mvnne	fp, #0
   23534:	subs	ip, ip, #1
   23538:	beq	23660 <__assert_fail@plt+0x118a8>
   2353c:	cmp	fp, #0
   23540:	mov	r2, #0
   23544:	mov	r3, #0
   23548:	beq	23510 <__assert_fail@plt+0x11758>
   2354c:	umull	r0, r1, sl, r6
   23550:	mov	r5, #0
   23554:	mov	r0, r1
   23558:	mov	r1, r5
   2355c:	umlal	r0, r1, fp, r6
   23560:	cmp	r1, r5
   23564:	movne	r2, #1
   23568:	movne	r3, #0
   2356c:	b	23510 <__assert_fail@plt+0x11758>
   23570:	asr	r1, r0, #31
   23574:	cmp	fp, #0
   23578:	mov	r6, #0
   2357c:	mov	r7, #0
   23580:	bne	236d4 <__assert_fail@plt+0x1191c>
   23584:	orrs	r3, r6, r7
   23588:	bne	23278 <__assert_fail@plt+0x114c0>
   2358c:	umull	r2, r3, sl, r0
   23590:	mul	ip, sl, r1
   23594:	strd	r2, [sp]
   23598:	mla	r3, r0, fp, ip
   2359c:	ldr	r2, [sp, #4]
   235a0:	mov	sl, r6
   235a4:	add	ip, r3, r2
   235a8:	cmp	ip, #0
   235ac:	mov	fp, r7
   235b0:	str	ip, [sp, #4]
   235b4:	bne	236fc <__assert_fail@plt+0x11944>
   235b8:	orrs	r3, sl, fp
   235bc:	bne	23278 <__assert_fail@plt+0x114c0>
   235c0:	ldrd	r6, [sp]
   235c4:	mul	r3, r6, r1
   235c8:	umull	sl, fp, r6, r0
   235cc:	mla	r0, r0, r7, r3
   235d0:	add	fp, r0, fp
   235d4:	b	23210 <__assert_fail@plt+0x11458>
   235d8:	mov	lr, #1
   235dc:	b	23210 <__assert_fail@plt+0x11458>
   235e0:	mov	lr, #1
   235e4:	mov	r6, #1024	; 0x400
   235e8:	mov	r7, #0
   235ec:	b	23358 <__assert_fail@plt+0x115a0>
   235f0:	mov	lr, #1
   235f4:	mov	r6, #1024	; 0x400
   235f8:	mov	r7, #0
   235fc:	b	23404 <__assert_fail@plt+0x1164c>
   23600:	mov	lr, #1
   23604:	mov	r6, #1024	; 0x400
   23608:	mov	r7, #0
   2360c:	b	23480 <__assert_fail@plt+0x116c8>
   23610:	mov	lr, #1
   23614:	mov	r6, #1024	; 0x400
   23618:	mov	r7, #0
   2361c:	b	234fc <__assert_fail@plt+0x11744>
   23620:	mov	lr, #1
   23624:	mov	r0, #1024	; 0x400
   23628:	mov	r1, #0
   2362c:	b	23574 <__assert_fail@plt+0x117bc>
   23630:	mov	lr, #1
   23634:	mov	r0, #1024	; 0x400
   23638:	mov	r1, #0
   2363c:	b	233d0 <__assert_fail@plt+0x11618>
   23640:	mov	lr, #1
   23644:	mov	r0, #1024	; 0x400
   23648:	mov	r1, #0
   2364c:	b	23180 <__assert_fail@plt+0x113c8>
   23650:	mov	lr, #1
   23654:	mov	r6, #1024	; 0x400
   23658:	mov	r7, #0
   2365c:	b	232dc <__assert_fail@plt+0x11524>
   23660:	ldrd	r4, [sp, #16]
   23664:	ldr	r3, [sp]
   23668:	b	2320c <__assert_fail@plt+0x11454>
   2366c:	mov	lr, #2
   23670:	mov	r0, #1000	; 0x3e8
   23674:	b	23094 <__assert_fail@plt+0x112dc>
   23678:	umull	r2, r3, sl, r0
   2367c:	str	r3, [sp]
   23680:	mov	r3, #0
   23684:	str	r3, [sp, #4]
   23688:	ldrd	r2, [sp]
   2368c:	umlal	r2, r3, fp, r0
   23690:	cmp	r3, #0
   23694:	movne	r6, #1
   23698:	movne	r7, #0
   2369c:	b	233e0 <__assert_fail@plt+0x11628>
   236a0:	mov	r3, #1
   236a4:	mvn	sl, #0
   236a8:	mvn	fp, #0
   236ac:	b	2320c <__assert_fail@plt+0x11454>
   236b0:	umull	r2, r3, sl, r0
   236b4:	mov	r7, #0
   236b8:	mov	r6, r3
   236bc:	umlal	r6, r7, fp, r0
   236c0:	cmp	r7, #0
   236c4:	movne	r2, #1
   236c8:	movne	r3, #0
   236cc:	strdne	r2, [sp]
   236d0:	b	23194 <__assert_fail@plt+0x113dc>
   236d4:	umull	r2, r3, sl, r0
   236d8:	str	r3, [sp]
   236dc:	mov	r3, #0
   236e0:	str	r3, [sp, #4]
   236e4:	ldrd	r2, [sp]
   236e8:	umlal	r2, r3, fp, r0
   236ec:	cmp	r3, #0
   236f0:	movne	r6, #1
   236f4:	movne	r7, #0
   236f8:	b	23584 <__assert_fail@plt+0x117cc>
   236fc:	ldr	r3, [sp]
   23700:	mov	r7, #0
   23704:	umull	r2, r3, r3, r0
   23708:	mov	r6, r3
   2370c:	umlal	r6, r7, ip, r0
   23710:	cmp	r7, #0
   23714:	movne	sl, #1
   23718:	movne	fp, #0
   2371c:	b	235b8 <__assert_fail@plt+0x11800>
   23720:	ldr	r3, [sp]
   23724:	mov	r7, #0
   23728:	umull	r2, r3, r3, r0
   2372c:	mov	r6, r3
   23730:	umlal	r6, r7, ip, r0
   23734:	cmp	r7, #0
   23738:	movne	sl, #1
   2373c:	movne	fp, #0
   23740:	b	231ec <__assert_fail@plt+0x11434>
   23744:	umull	r2, r3, r6, r0
   23748:	str	r3, [sp]
   2374c:	mov	r3, #0
   23750:	str	r3, [sp, #4]
   23754:	ldrd	r2, [sp]
   23758:	umlal	r2, r3, ip, r0
   2375c:	cmp	r3, #0
   23760:	movne	sl, #1
   23764:	movne	fp, #0
   23768:	b	231c0 <__assert_fail@plt+0x11408>
   2376c:	bl	119b0 <__stack_chk_fail@plt>
   23770:	ldr	r3, [pc, #16]	; 23788 <__assert_fail@plt+0x119d0>
   23774:	mov	r2, #96	; 0x60
   23778:	ldr	r1, [pc, #12]	; 2378c <__assert_fail@plt+0x119d4>
   2377c:	ldr	r0, [pc, #12]	; 23790 <__assert_fail@plt+0x119d8>
   23780:	bl	11db8 <__assert_fail@plt>
   23784:	andeq	r9, r3, r0, lsl #30
   23788:	andeq	r9, r2, r4, lsr r4
   2378c:	andeq	r9, r2, r4, lsl #7
   23790:	muleq	r2, r4, r3
   23794:	push	{r4, r5, r6, r7, r8, lr}
   23798:	subs	r4, r0, #0
   2379c:	beq	237ec <__assert_fail@plt+0x11a34>
   237a0:	cmp	r4, #10
   237a4:	beq	237b0 <__assert_fail@plt+0x119f8>
   237a8:	mov	r0, r4
   237ac:	pop	{r4, r5, r6, r7, r8, pc}
   237b0:	ldr	r6, [r1]
   237b4:	mov	r5, r1
   237b8:	mov	r0, r6
   237bc:	ldr	r1, [pc, #60]	; 23800 <__assert_fail@plt+0x11a48>
   237c0:	bl	118d8 <strcmp@plt>
   237c4:	subs	r7, r0, #0
   237c8:	bne	237a8 <__assert_fail@plt+0x119f0>
   237cc:	mov	r0, r6
   237d0:	bl	11d1c <freecon@plt>
   237d4:	str	r7, [r5]
   237d8:	bl	11c14 <__errno_location@plt>
   237dc:	mov	r3, #61	; 0x3d
   237e0:	mvn	r4, #0
   237e4:	str	r3, [r0]
   237e8:	b	237a8 <__assert_fail@plt+0x119f0>
   237ec:	bl	11c14 <__errno_location@plt>
   237f0:	mov	r3, #95	; 0x5f
   237f4:	mvn	r4, #0
   237f8:	str	r3, [r0]
   237fc:	b	237a8 <__assert_fail@plt+0x119f0>
   23800:	andeq	r6, r2, r4, ror #12
   23804:	push	{r4, lr}
   23808:	mov	r4, r1
   2380c:	bl	11bcc <getfilecon@plt>
   23810:	mov	r1, r4
   23814:	pop	{r4, lr}
   23818:	b	23794 <__assert_fail@plt+0x119dc>
   2381c:	push	{r4, lr}
   23820:	mov	r4, r1
   23824:	bl	11b24 <lgetfilecon@plt>
   23828:	mov	r1, r4
   2382c:	pop	{r4, lr}
   23830:	b	23794 <__assert_fail@plt+0x119dc>
   23834:	push	{r4, lr}
   23838:	mov	r4, r1
   2383c:	bl	119d4 <fgetfilecon@plt>
   23840:	mov	r1, r4
   23844:	pop	{r4, lr}
   23848:	b	23794 <__assert_fail@plt+0x119dc>
   2384c:	push	{r4, r5, r6, r7, r8, lr}
   23850:	subs	r7, r0, #0
   23854:	ldr	r5, [pc, #108]	; 238c8 <__assert_fail@plt+0x11b10>
   23858:	sub	sp, sp, #8
   2385c:	mov	r8, r1
   23860:	ldr	r1, [r5]
   23864:	moveq	r7, sp
   23868:	str	r1, [sp, #4]
   2386c:	mov	r0, r7
   23870:	mov	r1, r8
   23874:	mov	r6, r2
   23878:	bl	11ac4 <mbrtowc@plt>
   2387c:	cmp	r6, #0
   23880:	cmnne	r0, #3
   23884:	mov	r4, r0
   23888:	bhi	238a8 <__assert_fail@plt+0x11af0>
   2388c:	ldr	r2, [sp, #4]
   23890:	ldr	r3, [r5]
   23894:	mov	r0, r4
   23898:	cmp	r2, r3
   2389c:	bne	238c4 <__assert_fail@plt+0x11b0c>
   238a0:	add	sp, sp, #8
   238a4:	pop	{r4, r5, r6, r7, r8, pc}
   238a8:	mov	r0, #0
   238ac:	bl	1b634 <__assert_fail@plt+0x987c>
   238b0:	cmp	r0, #0
   238b4:	moveq	r4, #1
   238b8:	ldrbeq	r3, [r8]
   238bc:	streq	r3, [r7]
   238c0:	b	2388c <__assert_fail@plt+0x11ad4>
   238c4:	bl	119b0 <__stack_chk_fail@plt>
   238c8:	andeq	r9, r3, r0, lsl #30
   238cc:	ldr	r3, [pc, #52]	; 23908 <__assert_fail@plt+0x11b50>
   238d0:	push	{r4, lr}
   238d4:	mov	r2, #5
   238d8:	ldr	r1, [pc, #44]	; 2390c <__assert_fail@plt+0x11b54>
   238dc:	mov	r0, #0
   238e0:	ldr	r4, [r3]
   238e4:	bl	119a4 <dcgettext@plt>
   238e8:	ldr	r2, [pc, #32]	; 23910 <__assert_fail@plt+0x11b58>
   238ec:	mov	r1, #1
   238f0:	mov	r3, r0
   238f4:	mov	r0, r4
   238f8:	bl	11c74 <__fprintf_chk@plt>
   238fc:	ldr	r3, [pc, #16]	; 23914 <__assert_fail@plt+0x11b5c>
   23900:	ldr	r0, [r3]
   23904:	bl	11bc0 <exit@plt>
   23908:	andeq	sl, r3, r8, lsl r3
   2390c:	andeq	r9, r2, r4, ror #6
   23910:	andeq	r9, r2, r4, asr r0
   23914:			; <UNDEFINED> instruction: 0x0003a2bc
   23918:	ldrb	r2, [r0, #40]	; 0x28
   2391c:	ldr	r3, [r0, #28]
   23920:	tst	r2, #1
   23924:	beq	23930 <__assert_fail@plt+0x11b78>
   23928:	ldr	r0, [r0, #36]	; 0x24
   2392c:	bx	r3
   23930:	mov	r0, r1
   23934:	bx	r3
   23938:	ldrb	r2, [r0, #40]	; 0x28
   2393c:	ldr	r3, [r0, #32]
   23940:	tst	r2, #1
   23944:	beq	23950 <__assert_fail@plt+0x11b98>
   23948:	ldr	r0, [r0, #36]	; 0x24
   2394c:	bx	r3
   23950:	mov	r0, r1
   23954:	bx	r3
   23958:	push	{r4, r5, r6, lr}
   2395c:	subs	r5, r2, #0
   23960:	ldr	r3, [pc, #128]	; 239e8 <__assert_fail@plt+0x11c30>
   23964:	subne	r6, r5, #1
   23968:	moveq	r6, #7
   2396c:	moveq	r5, #8
   23970:	cmp	r1, #0
   23974:	moveq	r1, r3
   23978:	str	r6, [r0, #24]
   2397c:	str	r1, [r0]
   23980:	mov	r4, r0
   23984:	bl	23918 <__assert_fail@plt+0x11b60>
   23988:	cmp	r0, #0
   2398c:	mov	r3, r0
   23990:	str	r0, [r4, #4]
   23994:	beq	239dc <__assert_fail@plt+0x11c24>
   23998:	ldrb	ip, [r4, #40]	; 0x28
   2399c:	add	r1, r0, #8
   239a0:	ldr	r0, [r4]
   239a4:	add	r1, r1, r6
   239a8:	rsb	r2, r5, #0
   239ac:	and	r2, r2, r1
   239b0:	bic	ip, ip, #6
   239b4:	add	r1, r3, r0
   239b8:	mov	lr, #0
   239bc:	str	r2, [r4, #8]
   239c0:	str	r2, [r4, #12]
   239c4:	mov	r0, #1
   239c8:	str	r1, [r3]
   239cc:	str	r1, [r4, #16]
   239d0:	str	lr, [r3, #4]
   239d4:	strb	ip, [r4, #40]	; 0x28
   239d8:	pop	{r4, r5, r6, pc}
   239dc:	ldr	r3, [pc, #8]	; 239ec <__assert_fail@plt+0x11c34>
   239e0:	ldr	r3, [r3]
   239e4:	blx	r3
   239e8:	andeq	r0, r0, r8, ror #31
   239ec:	andeq	sl, r3, r0, lsl #6

000239f0 <_obstack_begin@@Base>:
   239f0:	push	{r4, lr}
   239f4:	ldrb	lr, [r0, #40]	; 0x28
   239f8:	ldr	r4, [sp, #8]
   239fc:	str	r3, [r0, #28]
   23a00:	bic	lr, lr, #1
   23a04:	str	r4, [r0, #32]
   23a08:	strb	lr, [r0, #40]	; 0x28
   23a0c:	pop	{r4, lr}
   23a10:	b	23958 <__assert_fail@plt+0x11ba0>

00023a14 <_obstack_begin_1@@Base>:
   23a14:	push	{r4, lr}
   23a18:	ldrb	lr, [r0, #40]	; 0x28
   23a1c:	ldr	r4, [sp, #8]
   23a20:	str	r3, [r0, #28]
   23a24:	ldr	r3, [sp, #12]
   23a28:	orr	lr, lr, #1
   23a2c:	str	r4, [r0, #32]
   23a30:	strb	lr, [r0, #40]	; 0x28
   23a34:	str	r3, [r0, #36]	; 0x24
   23a38:	pop	{r4, lr}
   23a3c:	b	23958 <__assert_fail@plt+0x11ba0>

00023a40 <_obstack_newchunk@@Base>:
   23a40:	push	{r4, r5, r6, r7, r8, lr}
   23a44:	ldr	r2, [r0, #8]
   23a48:	ldr	r6, [r0, #12]
   23a4c:	ldr	r3, [r0, #24]
   23a50:	sub	r6, r6, r2
   23a54:	adds	r1, r6, r1
   23a58:	ldr	lr, [r0]
   23a5c:	movcs	ip, #1
   23a60:	movcc	ip, #0
   23a64:	adds	r3, r3, r1
   23a68:	movcs	r2, #1
   23a6c:	movcc	r2, #0
   23a70:	add	r4, r3, r6, lsr #3
   23a74:	cmp	r3, lr
   23a78:	add	r4, r4, #100	; 0x64
   23a7c:	movcc	r3, lr
   23a80:	cmp	r3, r4
   23a84:	eor	ip, ip, #1
   23a88:	eor	r2, r2, #1
   23a8c:	movcs	r4, r3
   23a90:	tst	ip, r2
   23a94:	ldr	r7, [r0, #4]
   23a98:	beq	23b40 <_obstack_newchunk@@Base+0x100>
   23a9c:	mov	r1, r4
   23aa0:	mov	r5, r0
   23aa4:	bl	23918 <__assert_fail@plt+0x11b60>
   23aa8:	subs	r8, r0, #0
   23aac:	beq	23b40 <_obstack_newchunk@@Base+0x100>
   23ab0:	ldr	r1, [r5, #24]
   23ab4:	mov	r2, r8
   23ab8:	add	r3, r8, r4
   23abc:	str	r8, [r5, #4]
   23ac0:	str	r7, [r8, #4]
   23ac4:	str	r3, [r5, #16]
   23ac8:	str	r3, [r2], #8
   23acc:	add	r2, r2, r1
   23ad0:	bic	r4, r2, r1
   23ad4:	mov	r0, r4
   23ad8:	mov	r2, r6
   23adc:	ldr	r1, [r5, #8]
   23ae0:	bl	1195c <memcpy@plt>
   23ae4:	ldrb	r3, [r5, #40]	; 0x28
   23ae8:	tst	r3, #2
   23aec:	bne	23b0c <_obstack_newchunk@@Base+0xcc>
   23af0:	ldr	r2, [r5, #24]
   23af4:	add	r3, r7, #8
   23af8:	add	r3, r3, r2
   23afc:	ldr	r1, [r5, #8]
   23b00:	bic	r3, r3, r2
   23b04:	cmp	r1, r3
   23b08:	beq	23b28 <_obstack_newchunk@@Base+0xe8>
   23b0c:	ldrb	r3, [r5, #40]	; 0x28
   23b10:	add	r6, r4, r6
   23b14:	str	r6, [r5, #12]
   23b18:	bic	r3, r3, #2
   23b1c:	str	r4, [r5, #8]
   23b20:	strb	r3, [r5, #40]	; 0x28
   23b24:	pop	{r4, r5, r6, r7, r8, pc}
   23b28:	ldr	r3, [r7, #4]
   23b2c:	mov	r1, r7
   23b30:	str	r3, [r8, #4]
   23b34:	mov	r0, r5
   23b38:	bl	23938 <__assert_fail@plt+0x11b80>
   23b3c:	b	23b0c <_obstack_newchunk@@Base+0xcc>
   23b40:	ldr	r3, [pc, #4]	; 23b4c <_obstack_newchunk@@Base+0x10c>
   23b44:	ldr	r3, [r3]
   23b48:	blx	r3
   23b4c:	andeq	sl, r3, r0, lsl #6

00023b50 <_obstack_allocated_p@@Base>:
   23b50:	ldr	r0, [r0, #4]
   23b54:	cmp	r0, #0
   23b58:	bxeq	lr
   23b5c:	cmp	r1, r0
   23b60:	bls	23b50 <_obstack_allocated_p@@Base>
   23b64:	ldr	r3, [r0]
   23b68:	cmp	r3, r1
   23b6c:	bcc	23b50 <_obstack_allocated_p@@Base>
   23b70:	mov	r0, #1
   23b74:	bx	lr

00023b78 <_obstack_free@@Base>:
   23b78:	push	{r4, r5, r6, lr}
   23b7c:	mov	r6, r1
   23b80:	ldr	r4, [r0, #4]
   23b84:	cmp	r4, #0
   23b88:	movne	r5, r0
   23b8c:	beq	23bc8 <_obstack_free@@Base+0x50>
   23b90:	cmp	r4, r6
   23b94:	bcs	23ba4 <_obstack_free@@Base+0x2c>
   23b98:	ldr	r2, [r4]
   23b9c:	cmp	r2, r6
   23ba0:	bcs	23bd4 <_obstack_free@@Base+0x5c>
   23ba4:	mov	r1, r4
   23ba8:	mov	r0, r5
   23bac:	ldr	r4, [r4, #4]
   23bb0:	bl	23938 <__assert_fail@plt+0x11b80>
   23bb4:	ldrb	r2, [r5, #40]	; 0x28
   23bb8:	cmp	r4, #0
   23bbc:	orr	r2, r2, #2
   23bc0:	strb	r2, [r5, #40]	; 0x28
   23bc4:	bne	23b90 <_obstack_free@@Base+0x18>
   23bc8:	cmp	r6, #0
   23bcc:	popeq	{r4, r5, r6, pc}
   23bd0:	bl	11d64 <abort@plt>
   23bd4:	str	r6, [r5, #12]
   23bd8:	str	r6, [r5, #8]
   23bdc:	str	r2, [r5, #16]
   23be0:	str	r4, [r5, #4]
   23be4:	pop	{r4, r5, r6, pc}

00023be8 <_obstack_memory_used@@Base>:
   23be8:	ldr	r3, [r0, #4]
   23bec:	cmp	r3, #0
   23bf0:	beq	23c14 <_obstack_memory_used@@Base+0x2c>
   23bf4:	mov	r0, #0
   23bf8:	ldr	r2, [r3]
   23bfc:	sub	r2, r2, r3
   23c00:	ldr	r3, [r3, #4]
   23c04:	add	r0, r0, r2
   23c08:	cmp	r3, #0
   23c0c:	bne	23bf8 <_obstack_memory_used@@Base+0x10>
   23c10:	bx	lr
   23c14:	mov	r0, r3
   23c18:	bx	lr
   23c1c:	subs	r1, r0, #0
   23c20:	beq	23c30 <_obstack_memory_used@@Base+0x48>
   23c24:	mov	r2, #1
   23c28:	ldr	r0, [pc, #8]	; 23c38 <_obstack_memory_used@@Base+0x50>
   23c2c:	b	11c08 <setenv@plt>
   23c30:	ldr	r0, [pc]	; 23c38 <_obstack_memory_used@@Base+0x50>
   23c34:	b	11d4c <unsetenv@plt>
   23c38:	muleq	r2, r0, r8
   23c3c:	cmp	r0, #0
   23c40:	bxeq	lr
   23c44:	push	{r4, lr}
   23c48:	ldr	r4, [r0]
   23c4c:	bl	11938 <free@plt>
   23c50:	subs	r0, r4, #0
   23c54:	bne	23c48 <_obstack_memory_used@@Base+0x60>
   23c58:	pop	{r4, pc}
   23c5c:	push	{r4, r5, r6, r7, r8, lr}
   23c60:	mov	r5, r0
   23c64:	bl	11c14 <__errno_location@plt>
   23c68:	mov	r4, r0
   23c6c:	ldrb	r0, [r5, #4]
   23c70:	ldr	r6, [r4]
   23c74:	cmp	r0, #0
   23c78:	addne	r0, r5, #5
   23c7c:	bl	23c1c <_obstack_memory_used@@Base+0x34>
   23c80:	cmp	r0, #0
   23c84:	beq	23ca4 <_obstack_memory_used@@Base+0xbc>
   23c88:	ldr	r6, [r4]
   23c8c:	mov	r7, #0
   23c90:	mov	r0, r5
   23c94:	bl	23c3c <_obstack_memory_used@@Base+0x54>
   23c98:	str	r6, [r4]
   23c9c:	mov	r0, r7
   23ca0:	pop	{r4, r5, r6, r7, r8, pc}
   23ca4:	bl	11a28 <tzset@plt>
   23ca8:	mov	r7, #1
   23cac:	b	23c90 <_obstack_memory_used@@Base+0xa8>
   23cb0:	push	{r4, r5, r6, r7, r8, lr}
   23cb4:	subs	r6, r0, #0
   23cb8:	beq	23d14 <_obstack_memory_used@@Base+0x12c>
   23cbc:	bl	11bf0 <strlen@plt>
   23cc0:	add	r5, r0, #1
   23cc4:	cmp	r5, #58	; 0x3a
   23cc8:	movcs	r0, r5
   23ccc:	movcc	r0, #58	; 0x3a
   23cd0:	add	r0, r0, #9
   23cd4:	bic	r0, r0, #3
   23cd8:	bl	11b30 <malloc@plt>
   23cdc:	subs	r4, r0, #0
   23ce0:	beq	23d0c <_obstack_memory_used@@Base+0x124>
   23ce4:	mov	r7, #0
   23ce8:	mov	r2, #1
   23cec:	add	r3, r4, #5
   23cf0:	strh	r2, [r4, #4]
   23cf4:	mov	r1, r6
   23cf8:	str	r7, [r4]
   23cfc:	mov	r0, r3
   23d00:	mov	r2, r5
   23d04:	bl	1195c <memcpy@plt>
   23d08:	strb	r7, [r0, r5]
   23d0c:	mov	r0, r4
   23d10:	pop	{r4, r5, r6, r7, r8, pc}
   23d14:	mov	r0, #64	; 0x40
   23d18:	bl	11b30 <malloc@plt>
   23d1c:	subs	r4, r0, #0
   23d20:	mov	r0, r4
   23d24:	strne	r6, [r4]
   23d28:	strhne	r6, [r4, #4]
   23d2c:	pop	{r4, r5, r6, r7, r8, pc}
   23d30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23d34:	ldr	r7, [r1, #40]	; 0x28
   23d38:	cmp	r7, #0
   23d3c:	beq	23e18 <_obstack_memory_used@@Base+0x230>
   23d40:	cmp	r1, r7
   23d44:	mov	r8, r1
   23d48:	mov	r6, r0
   23d4c:	bhi	23d5c <_obstack_memory_used@@Base+0x174>
   23d50:	add	r3, r1, #44	; 0x2c
   23d54:	cmp	r7, r3
   23d58:	bcc	23e18 <_obstack_memory_used@@Base+0x230>
   23d5c:	ldrb	r3, [r7]
   23d60:	cmp	r3, #0
   23d64:	addne	r4, r6, #5
   23d68:	beq	23e10 <_obstack_memory_used@@Base+0x228>
   23d6c:	mov	r1, r7
   23d70:	mov	r0, r4
   23d74:	bl	118d8 <strcmp@plt>
   23d78:	add	r5, r6, #5
   23d7c:	cmp	r0, #0
   23d80:	mov	r0, r4
   23d84:	beq	23e00 <_obstack_memory_used@@Base+0x218>
   23d88:	ldrb	r9, [r4]
   23d8c:	cmp	r9, #0
   23d90:	bne	23da8 <_obstack_memory_used@@Base+0x1c0>
   23d94:	cmp	r5, r4
   23d98:	bne	23e24 <_obstack_memory_used@@Base+0x23c>
   23d9c:	ldrb	r5, [r6, #4]
   23da0:	cmp	r5, #0
   23da4:	beq	23dd0 <_obstack_memory_used@@Base+0x1e8>
   23da8:	bl	11bf0 <strlen@plt>
   23dac:	add	r0, r0, #1
   23db0:	ldrb	r3, [r4, r0]!
   23db4:	cmp	r3, #0
   23db8:	bne	23d6c <_obstack_memory_used@@Base+0x184>
   23dbc:	ldr	r3, [r6]
   23dc0:	cmp	r3, #0
   23dc4:	addne	r4, r3, #5
   23dc8:	movne	r6, r3
   23dcc:	b	23d6c <_obstack_memory_used@@Base+0x184>
   23dd0:	mov	r0, r7
   23dd4:	bl	11bf0 <strlen@plt>
   23dd8:	add	sl, r0, #1
   23ddc:	add	r5, sl, r5
   23de0:	cmp	r5, #58	; 0x3a
   23de4:	bhi	23e50 <_obstack_memory_used@@Base+0x268>
   23de8:	mov	r1, r7
   23dec:	mov	r2, sl
   23df0:	mov	r0, r4
   23df4:	bl	1195c <memcpy@plt>
   23df8:	mov	r3, #0
   23dfc:	strb	r3, [r4, sl]
   23e00:	mov	r9, #1
   23e04:	str	r4, [r8, #40]	; 0x28
   23e08:	mov	r0, r9
   23e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23e10:	ldr	r4, [pc, #96]	; 23e78 <_obstack_memory_used@@Base+0x290>
   23e14:	b	23e00 <_obstack_memory_used@@Base+0x218>
   23e18:	mov	r9, #1
   23e1c:	mov	r0, r9
   23e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23e24:	mov	r0, r7
   23e28:	bl	11bf0 <strlen@plt>
   23e2c:	sub	r5, r4, r5
   23e30:	mvn	r3, r5
   23e34:	add	sl, r0, #1
   23e38:	cmp	r3, sl
   23e3c:	bcs	23ddc <_obstack_memory_used@@Base+0x1f4>
   23e40:	bl	11c14 <__errno_location@plt>
   23e44:	mov	r3, #12
   23e48:	str	r3, [r0]
   23e4c:	b	23e08 <_obstack_memory_used@@Base+0x220>
   23e50:	mov	r0, r7
   23e54:	bl	23cb0 <_obstack_memory_used@@Base+0xc8>
   23e58:	cmp	r0, #0
   23e5c:	str	r0, [r6]
   23e60:	moveq	r9, r0
   23e64:	beq	23e08 <_obstack_memory_used@@Base+0x220>
   23e68:	mov	r3, #0
   23e6c:	strb	r3, [r0, #4]
   23e70:	add	r4, r0, #5
   23e74:	b	23e00 <_obstack_memory_used@@Base+0x218>
   23e78:	ldrdeq	r7, [r2], -r0
   23e7c:	push	{r4, r5, r6, lr}
   23e80:	mov	r4, r0
   23e84:	ldr	r0, [pc, #160]	; 23f2c <_obstack_memory_used@@Base+0x344>
   23e88:	bl	11b18 <getenv@plt>
   23e8c:	ldrb	r3, [r4, #4]
   23e90:	subs	r5, r0, #0
   23e94:	beq	23f14 <_obstack_memory_used@@Base+0x32c>
   23e98:	cmp	r3, #0
   23e9c:	bne	23ef4 <_obstack_memory_used@@Base+0x30c>
   23ea0:	mov	r0, r5
   23ea4:	bl	23cb0 <_obstack_memory_used@@Base+0xc8>
   23ea8:	subs	r5, r0, #0
   23eac:	beq	23f0c <_obstack_memory_used@@Base+0x324>
   23eb0:	ldrb	r0, [r4, #4]
   23eb4:	cmp	r0, #0
   23eb8:	addne	r0, r4, #5
   23ebc:	bl	23c1c <_obstack_memory_used@@Base+0x34>
   23ec0:	cmp	r0, #0
   23ec4:	beq	23f20 <_obstack_memory_used@@Base+0x338>
   23ec8:	bl	11c14 <__errno_location@plt>
   23ecc:	cmp	r5, #1
   23ed0:	mov	r4, r0
   23ed4:	ldr	r6, [r0]
   23ed8:	beq	23ee4 <_obstack_memory_used@@Base+0x2fc>
   23edc:	mov	r0, r5
   23ee0:	bl	23c3c <_obstack_memory_used@@Base+0x54>
   23ee4:	mov	r5, #0
   23ee8:	str	r6, [r4]
   23eec:	mov	r0, r5
   23ef0:	pop	{r4, r5, r6, pc}
   23ef4:	mov	r1, r5
   23ef8:	add	r0, r4, #5
   23efc:	bl	118d8 <strcmp@plt>
   23f00:	cmp	r0, #0
   23f04:	bne	23ea0 <_obstack_memory_used@@Base+0x2b8>
   23f08:	mov	r5, #1
   23f0c:	mov	r0, r5
   23f10:	pop	{r4, r5, r6, pc}
   23f14:	cmp	r3, #0
   23f18:	beq	23f08 <_obstack_memory_used@@Base+0x320>
   23f1c:	b	23ea0 <_obstack_memory_used@@Base+0x2b8>
   23f20:	bl	11a28 <tzset@plt>
   23f24:	mov	r0, r5
   23f28:	pop	{r4, r5, r6, pc}
   23f2c:	muleq	r2, r0, r8
   23f30:	cmp	r0, #1
   23f34:	bxeq	lr
   23f38:	b	23c3c <_obstack_memory_used@@Base+0x54>
   23f3c:	subs	ip, r0, #0
   23f40:	push	{r4, r5, r6, r7, r8, lr}
   23f44:	mov	r5, r1
   23f48:	beq	23fc8 <_obstack_memory_used@@Base+0x3e0>
   23f4c:	mov	r4, r2
   23f50:	mov	r6, ip
   23f54:	bl	23e7c <_obstack_memory_used@@Base+0x294>
   23f58:	subs	r7, r0, #0
   23f5c:	beq	23fa8 <_obstack_memory_used@@Base+0x3c0>
   23f60:	mov	r0, r5
   23f64:	mov	r1, r4
   23f68:	bl	119e0 <localtime_r@plt>
   23f6c:	cmp	r0, #0
   23f70:	beq	23f98 <_obstack_memory_used@@Base+0x3b0>
   23f74:	mov	r0, r6
   23f78:	mov	r1, r4
   23f7c:	bl	23d30 <_obstack_memory_used@@Base+0x148>
   23f80:	cmp	r0, #0
   23f84:	beq	23f98 <_obstack_memory_used@@Base+0x3b0>
   23f88:	cmp	r7, #1
   23f8c:	bne	23fb0 <_obstack_memory_used@@Base+0x3c8>
   23f90:	mov	r0, r4
   23f94:	pop	{r4, r5, r6, r7, r8, pc}
   23f98:	cmp	r7, #1
   23f9c:	beq	23fa8 <_obstack_memory_used@@Base+0x3c0>
   23fa0:	mov	r0, r7
   23fa4:	bl	23c5c <_obstack_memory_used@@Base+0x74>
   23fa8:	mov	r0, #0
   23fac:	pop	{r4, r5, r6, r7, r8, pc}
   23fb0:	mov	r0, r7
   23fb4:	bl	23c5c <_obstack_memory_used@@Base+0x74>
   23fb8:	cmp	r0, #0
   23fbc:	beq	23fa8 <_obstack_memory_used@@Base+0x3c0>
   23fc0:	mov	r0, r4
   23fc4:	pop	{r4, r5, r6, r7, r8, pc}
   23fc8:	mov	r0, r5
   23fcc:	mov	r1, r2
   23fd0:	pop	{r4, r5, r6, r7, r8, lr}
   23fd4:	b	118c0 <gmtime_r@plt>
   23fd8:	push	{r4, r5, r6, r7, lr}
   23fdc:	sub	sp, sp, #60	; 0x3c
   23fe0:	ldr	r5, [pc, #312]	; 24120 <_obstack_memory_used@@Base+0x538>
   23fe4:	subs	r7, r0, #0
   23fe8:	mov	r4, r1
   23fec:	ldr	r3, [r5]
   23ff0:	str	r3, [sp, #52]	; 0x34
   23ff4:	beq	24108 <_obstack_memory_used@@Base+0x520>
   23ff8:	bl	23e7c <_obstack_memory_used@@Base+0x294>
   23ffc:	subs	r6, r0, #0
   24000:	beq	24114 <_obstack_memory_used@@Base+0x52c>
   24004:	mov	r0, r4
   24008:	bl	118f0 <mktime@plt>
   2400c:	cmn	r0, #1
   24010:	str	r0, [sp, #4]
   24014:	beq	24064 <_obstack_memory_used@@Base+0x47c>
   24018:	mov	r1, r4
   2401c:	mov	r0, r7
   24020:	bl	23d30 <_obstack_memory_used@@Base+0x148>
   24024:	cmp	r0, #0
   24028:	mvneq	r3, #0
   2402c:	streq	r3, [sp, #4]
   24030:	cmp	r6, #1
   24034:	beq	24048 <_obstack_memory_used@@Base+0x460>
   24038:	mov	r0, r6
   2403c:	bl	23c5c <_obstack_memory_used@@Base+0x74>
   24040:	cmp	r0, #0
   24044:	beq	24114 <_obstack_memory_used@@Base+0x52c>
   24048:	ldr	r0, [sp, #4]
   2404c:	ldr	r2, [sp, #52]	; 0x34
   24050:	ldr	r3, [r5]
   24054:	cmp	r2, r3
   24058:	bne	2411c <_obstack_memory_used@@Base+0x534>
   2405c:	add	sp, sp, #60	; 0x3c
   24060:	pop	{r4, r5, r6, r7, pc}
   24064:	add	r1, sp, #8
   24068:	add	r0, sp, #4
   2406c:	bl	119e0 <localtime_r@plt>
   24070:	cmp	r0, #0
   24074:	beq	24030 <_obstack_memory_used@@Base+0x448>
   24078:	ldr	r0, [r4, #32]
   2407c:	ldr	r1, [sp, #40]	; 0x28
   24080:	clz	r2, r0
   24084:	clz	r3, r1
   24088:	lsr	r2, r2, #5
   2408c:	lsr	r3, r3, #5
   24090:	cmp	r2, r3
   24094:	beq	240a4 <_obstack_memory_used@@Base+0x4bc>
   24098:	cmp	r0, #0
   2409c:	cmpge	r1, #0
   240a0:	bge	24030 <_obstack_memory_used@@Base+0x448>
   240a4:	ldr	r1, [sp, #24]
   240a8:	ldr	r0, [sp, #28]
   240ac:	ldr	r3, [r4, #16]
   240b0:	ldr	r2, [r4, #20]
   240b4:	eor	r3, r3, r1
   240b8:	eor	r2, r2, r0
   240bc:	ldr	r1, [r4, #12]
   240c0:	ldr	r0, [sp, #20]
   240c4:	orr	r3, r3, r2
   240c8:	eor	r1, r1, r0
   240cc:	ldr	r2, [r4, #8]
   240d0:	ldr	r0, [sp, #16]
   240d4:	orr	r3, r3, r1
   240d8:	eor	r2, r2, r0
   240dc:	ldr	r1, [r4, #4]
   240e0:	ldr	r0, [sp, #12]
   240e4:	orr	r3, r3, r2
   240e8:	eor	r1, r1, r0
   240ec:	ldr	r2, [r4]
   240f0:	ldr	r0, [sp, #8]
   240f4:	orr	r3, r3, r1
   240f8:	eor	r2, r2, r0
   240fc:	orrs	r3, r3, r2
   24100:	beq	24018 <_obstack_memory_used@@Base+0x430>
   24104:	b	24030 <_obstack_memory_used@@Base+0x448>
   24108:	mov	r0, r1
   2410c:	bl	11d04 <timegm@plt>
   24110:	b	2404c <_obstack_memory_used@@Base+0x464>
   24114:	mvn	r0, #0
   24118:	b	2404c <_obstack_memory_used@@Base+0x464>
   2411c:	bl	119b0 <__stack_chk_fail@plt>
   24120:	andeq	r9, r3, r0, lsl #30
   24124:	cmp	r0, #22
   24128:	beq	24150 <_obstack_memory_used@@Base+0x568>
   2412c:	ble	24144 <_obstack_memory_used@@Base+0x55c>
   24130:	cmp	r0, #38	; 0x26
   24134:	beq	24150 <_obstack_memory_used@@Base+0x568>
   24138:	subs	r0, r0, #95	; 0x5f
   2413c:	movne	r0, #1
   24140:	bx	lr
   24144:	subs	r0, r0, #16
   24148:	movne	r0, #1
   2414c:	bx	lr
   24150:	mov	r0, #0
   24154:	bx	lr
   24158:	push	{r4, r5, r6, lr}
   2415c:	mov	r4, r0
   24160:	bl	11ab8 <__fpending@plt>
   24164:	ldr	r5, [r4]
   24168:	and	r5, r5, #32
   2416c:	mov	r6, r0
   24170:	mov	r0, r4
   24174:	bl	24250 <_obstack_memory_used@@Base+0x668>
   24178:	cmp	r5, #0
   2417c:	mov	r4, r0
   24180:	bne	241ac <_obstack_memory_used@@Base+0x5c4>
   24184:	cmp	r0, #0
   24188:	beq	241a4 <_obstack_memory_used@@Base+0x5bc>
   2418c:	cmp	r6, #0
   24190:	bne	241c4 <_obstack_memory_used@@Base+0x5dc>
   24194:	bl	11c14 <__errno_location@plt>
   24198:	ldr	r4, [r0]
   2419c:	subs	r4, r4, #9
   241a0:	mvnne	r4, #0
   241a4:	mov	r0, r4
   241a8:	pop	{r4, r5, r6, pc}
   241ac:	cmp	r0, #0
   241b0:	bne	241c4 <_obstack_memory_used@@Base+0x5dc>
   241b4:	bl	11c14 <__errno_location@plt>
   241b8:	str	r4, [r0]
   241bc:	mvn	r4, #0
   241c0:	b	241a4 <_obstack_memory_used@@Base+0x5bc>
   241c4:	mvn	r4, #0
   241c8:	b	241a4 <_obstack_memory_used@@Base+0x5bc>
   241cc:	push	{r4, lr}
   241d0:	bl	1ac70 <__assert_fail@plt+0x8eb8>
   241d4:	cmp	r0, #0
   241d8:	popne	{r4, pc}
   241dc:	bl	22408 <__assert_fail@plt+0x10650>
   241e0:	ldrb	r3, [r0]
   241e4:	cmp	r3, #0
   241e8:	beq	24214 <_obstack_memory_used@@Base+0x62c>
   241ec:	mov	r2, #0
   241f0:	push	{r4, lr}
   241f4:	add	r2, r3, r2, ror #23
   241f8:	ldrb	r3, [r0, #1]!
   241fc:	cmp	r3, #0
   24200:	bne	241f4 <_obstack_memory_used@@Base+0x60c>
   24204:	mov	r0, r2
   24208:	bl	245dc <_obstack_memory_used@@Base+0x9f4>
   2420c:	mov	r0, r1
   24210:	pop	{r4, pc}
   24214:	mov	r0, r3
   24218:	bx	lr
   2421c:	push	{r4, lr}
   24220:	mov	r0, #14
   24224:	bl	11cd4 <nl_langinfo@plt>
   24228:	cmp	r0, #0
   2422c:	beq	24244 <_obstack_memory_used@@Base+0x65c>
   24230:	ldrb	r2, [r0]
   24234:	ldr	r3, [pc, #16]	; 2424c <_obstack_memory_used@@Base+0x664>
   24238:	cmp	r2, #0
   2423c:	moveq	r0, r3
   24240:	pop	{r4, pc}
   24244:	ldr	r0, [pc]	; 2424c <_obstack_memory_used@@Base+0x664>
   24248:	pop	{r4, pc}
   2424c:	andeq	r9, r2, r0, asr #8
   24250:	push	{r4, r5, lr}
   24254:	sub	sp, sp, #12
   24258:	mov	r4, r0
   2425c:	bl	11c68 <fileno@plt>
   24260:	cmp	r0, #0
   24264:	mov	r0, r4
   24268:	blt	242e4 <_obstack_memory_used@@Base+0x6fc>
   2426c:	bl	11b60 <__freading@plt>
   24270:	cmp	r0, #0
   24274:	bne	242b0 <_obstack_memory_used@@Base+0x6c8>
   24278:	mov	r0, r4
   2427c:	bl	242f0 <_obstack_memory_used@@Base+0x708>
   24280:	cmp	r0, #0
   24284:	beq	242e0 <_obstack_memory_used@@Base+0x6f8>
   24288:	bl	11c14 <__errno_location@plt>
   2428c:	mov	r5, r0
   24290:	mov	r0, r4
   24294:	ldr	r4, [r5]
   24298:	bl	11c80 <fclose@plt>
   2429c:	cmp	r4, #0
   242a0:	mvnne	r0, #0
   242a4:	strne	r4, [r5]
   242a8:	add	sp, sp, #12
   242ac:	pop	{r4, r5, pc}
   242b0:	mov	r0, r4
   242b4:	bl	11c68 <fileno@plt>
   242b8:	mov	r3, #1
   242bc:	str	r3, [sp]
   242c0:	mov	r2, #0
   242c4:	mov	r3, #0
   242c8:	bl	11a88 <lseek64@plt>
   242cc:	mvn	r3, #0
   242d0:	mvn	r2, #0
   242d4:	cmp	r1, r3
   242d8:	cmpeq	r0, r2
   242dc:	bne	24278 <_obstack_memory_used@@Base+0x690>
   242e0:	mov	r0, r4
   242e4:	add	sp, sp, #12
   242e8:	pop	{r4, r5, lr}
   242ec:	b	11c80 <fclose@plt>
   242f0:	push	{r4, lr}
   242f4:	subs	r4, r0, #0
   242f8:	sub	sp, sp, #8
   242fc:	beq	24318 <_obstack_memory_used@@Base+0x730>
   24300:	bl	11b60 <__freading@plt>
   24304:	cmp	r0, #0
   24308:	beq	24318 <_obstack_memory_used@@Base+0x730>
   2430c:	ldr	r3, [r4]
   24310:	tst	r3, #256	; 0x100
   24314:	bne	24328 <_obstack_memory_used@@Base+0x740>
   24318:	mov	r0, r4
   2431c:	add	sp, sp, #8
   24320:	pop	{r4, lr}
   24324:	b	118fc <fflush@plt>
   24328:	mov	r3, #1
   2432c:	str	r3, [sp]
   24330:	mov	r2, #0
   24334:	mov	r3, #0
   24338:	mov	r0, r4
   2433c:	bl	24350 <_obstack_memory_used@@Base+0x768>
   24340:	mov	r0, r4
   24344:	add	sp, sp, #8
   24348:	pop	{r4, lr}
   2434c:	b	118fc <fflush@plt>
   24350:	push	{r4, r5, r6, r7, r8, lr}
   24354:	sub	sp, sp, #8
   24358:	ldmib	r0, {ip, lr}
   2435c:	mov	r4, r0
   24360:	ldr	r5, [sp, #32]
   24364:	cmp	lr, ip
   24368:	beq	24380 <_obstack_memory_used@@Base+0x798>
   2436c:	str	r5, [sp, #32]
   24370:	mov	r0, r4
   24374:	add	sp, sp, #8
   24378:	pop	{r4, r5, r6, r7, r8, lr}
   2437c:	b	11c8c <fseeko64@plt>
   24380:	ldr	lr, [r0, #20]
   24384:	ldr	ip, [r0, #16]
   24388:	cmp	lr, ip
   2438c:	bne	2436c <_obstack_memory_used@@Base+0x784>
   24390:	ldr	r8, [r0, #36]	; 0x24
   24394:	cmp	r8, #0
   24398:	bne	2436c <_obstack_memory_used@@Base+0x784>
   2439c:	mov	r6, r2
   243a0:	mov	r7, r3
   243a4:	bl	11c68 <fileno@plt>
   243a8:	mov	r2, r6
   243ac:	mov	r3, r7
   243b0:	str	r5, [sp]
   243b4:	bl	11a88 <lseek64@plt>
   243b8:	mvn	r3, #0
   243bc:	mvn	r2, #0
   243c0:	cmp	r1, r3
   243c4:	cmpeq	r0, r2
   243c8:	beq	243e8 <_obstack_memory_used@@Base+0x800>
   243cc:	ldr	r3, [r4]
   243d0:	strd	r0, [r4, #80]	; 0x50
   243d4:	mov	r0, r8
   243d8:	bic	r3, r3, #16
   243dc:	str	r3, [r4]
   243e0:	add	sp, sp, #8
   243e4:	pop	{r4, r5, r6, r7, r8, pc}
   243e8:	mvn	r0, #0
   243ec:	b	243e0 <_obstack_memory_used@@Base+0x7f8>
   243f0:	subs	r2, r1, #1
   243f4:	bxeq	lr
   243f8:	bcc	245d0 <_obstack_memory_used@@Base+0x9e8>
   243fc:	cmp	r0, r1
   24400:	bls	245b4 <_obstack_memory_used@@Base+0x9cc>
   24404:	tst	r1, r2
   24408:	beq	245c0 <_obstack_memory_used@@Base+0x9d8>
   2440c:	clz	r3, r0
   24410:	clz	r2, r1
   24414:	sub	r3, r2, r3
   24418:	rsbs	r3, r3, #31
   2441c:	addne	r3, r3, r3, lsl #1
   24420:	mov	r2, #0
   24424:	addne	pc, pc, r3, lsl #2
   24428:	nop			; (mov r0, r0)
   2442c:	cmp	r0, r1, lsl #31
   24430:	adc	r2, r2, r2
   24434:	subcs	r0, r0, r1, lsl #31
   24438:	cmp	r0, r1, lsl #30
   2443c:	adc	r2, r2, r2
   24440:	subcs	r0, r0, r1, lsl #30
   24444:	cmp	r0, r1, lsl #29
   24448:	adc	r2, r2, r2
   2444c:	subcs	r0, r0, r1, lsl #29
   24450:	cmp	r0, r1, lsl #28
   24454:	adc	r2, r2, r2
   24458:	subcs	r0, r0, r1, lsl #28
   2445c:	cmp	r0, r1, lsl #27
   24460:	adc	r2, r2, r2
   24464:	subcs	r0, r0, r1, lsl #27
   24468:	cmp	r0, r1, lsl #26
   2446c:	adc	r2, r2, r2
   24470:	subcs	r0, r0, r1, lsl #26
   24474:	cmp	r0, r1, lsl #25
   24478:	adc	r2, r2, r2
   2447c:	subcs	r0, r0, r1, lsl #25
   24480:	cmp	r0, r1, lsl #24
   24484:	adc	r2, r2, r2
   24488:	subcs	r0, r0, r1, lsl #24
   2448c:	cmp	r0, r1, lsl #23
   24490:	adc	r2, r2, r2
   24494:	subcs	r0, r0, r1, lsl #23
   24498:	cmp	r0, r1, lsl #22
   2449c:	adc	r2, r2, r2
   244a0:	subcs	r0, r0, r1, lsl #22
   244a4:	cmp	r0, r1, lsl #21
   244a8:	adc	r2, r2, r2
   244ac:	subcs	r0, r0, r1, lsl #21
   244b0:	cmp	r0, r1, lsl #20
   244b4:	adc	r2, r2, r2
   244b8:	subcs	r0, r0, r1, lsl #20
   244bc:	cmp	r0, r1, lsl #19
   244c0:	adc	r2, r2, r2
   244c4:	subcs	r0, r0, r1, lsl #19
   244c8:	cmp	r0, r1, lsl #18
   244cc:	adc	r2, r2, r2
   244d0:	subcs	r0, r0, r1, lsl #18
   244d4:	cmp	r0, r1, lsl #17
   244d8:	adc	r2, r2, r2
   244dc:	subcs	r0, r0, r1, lsl #17
   244e0:	cmp	r0, r1, lsl #16
   244e4:	adc	r2, r2, r2
   244e8:	subcs	r0, r0, r1, lsl #16
   244ec:	cmp	r0, r1, lsl #15
   244f0:	adc	r2, r2, r2
   244f4:	subcs	r0, r0, r1, lsl #15
   244f8:	cmp	r0, r1, lsl #14
   244fc:	adc	r2, r2, r2
   24500:	subcs	r0, r0, r1, lsl #14
   24504:	cmp	r0, r1, lsl #13
   24508:	adc	r2, r2, r2
   2450c:	subcs	r0, r0, r1, lsl #13
   24510:	cmp	r0, r1, lsl #12
   24514:	adc	r2, r2, r2
   24518:	subcs	r0, r0, r1, lsl #12
   2451c:	cmp	r0, r1, lsl #11
   24520:	adc	r2, r2, r2
   24524:	subcs	r0, r0, r1, lsl #11
   24528:	cmp	r0, r1, lsl #10
   2452c:	adc	r2, r2, r2
   24530:	subcs	r0, r0, r1, lsl #10
   24534:	cmp	r0, r1, lsl #9
   24538:	adc	r2, r2, r2
   2453c:	subcs	r0, r0, r1, lsl #9
   24540:	cmp	r0, r1, lsl #8
   24544:	adc	r2, r2, r2
   24548:	subcs	r0, r0, r1, lsl #8
   2454c:	cmp	r0, r1, lsl #7
   24550:	adc	r2, r2, r2
   24554:	subcs	r0, r0, r1, lsl #7
   24558:	cmp	r0, r1, lsl #6
   2455c:	adc	r2, r2, r2
   24560:	subcs	r0, r0, r1, lsl #6
   24564:	cmp	r0, r1, lsl #5
   24568:	adc	r2, r2, r2
   2456c:	subcs	r0, r0, r1, lsl #5
   24570:	cmp	r0, r1, lsl #4
   24574:	adc	r2, r2, r2
   24578:	subcs	r0, r0, r1, lsl #4
   2457c:	cmp	r0, r1, lsl #3
   24580:	adc	r2, r2, r2
   24584:	subcs	r0, r0, r1, lsl #3
   24588:	cmp	r0, r1, lsl #2
   2458c:	adc	r2, r2, r2
   24590:	subcs	r0, r0, r1, lsl #2
   24594:	cmp	r0, r1, lsl #1
   24598:	adc	r2, r2, r2
   2459c:	subcs	r0, r0, r1, lsl #1
   245a0:	cmp	r0, r1
   245a4:	adc	r2, r2, r2
   245a8:	subcs	r0, r0, r1
   245ac:	mov	r0, r2
   245b0:	bx	lr
   245b4:	moveq	r0, #1
   245b8:	movne	r0, #0
   245bc:	bx	lr
   245c0:	clz	r2, r1
   245c4:	rsb	r2, r2, #31
   245c8:	lsr	r0, r0, r2
   245cc:	bx	lr
   245d0:	cmp	r0, #0
   245d4:	mvnne	r0, #0
   245d8:	b	24d0c <_obstack_memory_used@@Base+0x1124>
   245dc:	cmp	r1, #0
   245e0:	beq	245d0 <_obstack_memory_used@@Base+0x9e8>
   245e4:	push	{r0, r1, lr}
   245e8:	bl	243f0 <_obstack_memory_used@@Base+0x808>
   245ec:	pop	{r1, r2, lr}
   245f0:	mul	r3, r2, r0
   245f4:	sub	r1, r1, r3
   245f8:	bx	lr
   245fc:	cmp	r1, #0
   24600:	beq	2480c <_obstack_memory_used@@Base+0xc24>
   24604:	eor	ip, r0, r1
   24608:	rsbmi	r1, r1, #0
   2460c:	subs	r2, r1, #1
   24610:	beq	247d8 <_obstack_memory_used@@Base+0xbf0>
   24614:	movs	r3, r0
   24618:	rsbmi	r3, r0, #0
   2461c:	cmp	r3, r1
   24620:	bls	247e4 <_obstack_memory_used@@Base+0xbfc>
   24624:	tst	r1, r2
   24628:	beq	247f4 <_obstack_memory_used@@Base+0xc0c>
   2462c:	clz	r2, r3
   24630:	clz	r0, r1
   24634:	sub	r2, r0, r2
   24638:	rsbs	r2, r2, #31
   2463c:	addne	r2, r2, r2, lsl #1
   24640:	mov	r0, #0
   24644:	addne	pc, pc, r2, lsl #2
   24648:	nop			; (mov r0, r0)
   2464c:	cmp	r3, r1, lsl #31
   24650:	adc	r0, r0, r0
   24654:	subcs	r3, r3, r1, lsl #31
   24658:	cmp	r3, r1, lsl #30
   2465c:	adc	r0, r0, r0
   24660:	subcs	r3, r3, r1, lsl #30
   24664:	cmp	r3, r1, lsl #29
   24668:	adc	r0, r0, r0
   2466c:	subcs	r3, r3, r1, lsl #29
   24670:	cmp	r3, r1, lsl #28
   24674:	adc	r0, r0, r0
   24678:	subcs	r3, r3, r1, lsl #28
   2467c:	cmp	r3, r1, lsl #27
   24680:	adc	r0, r0, r0
   24684:	subcs	r3, r3, r1, lsl #27
   24688:	cmp	r3, r1, lsl #26
   2468c:	adc	r0, r0, r0
   24690:	subcs	r3, r3, r1, lsl #26
   24694:	cmp	r3, r1, lsl #25
   24698:	adc	r0, r0, r0
   2469c:	subcs	r3, r3, r1, lsl #25
   246a0:	cmp	r3, r1, lsl #24
   246a4:	adc	r0, r0, r0
   246a8:	subcs	r3, r3, r1, lsl #24
   246ac:	cmp	r3, r1, lsl #23
   246b0:	adc	r0, r0, r0
   246b4:	subcs	r3, r3, r1, lsl #23
   246b8:	cmp	r3, r1, lsl #22
   246bc:	adc	r0, r0, r0
   246c0:	subcs	r3, r3, r1, lsl #22
   246c4:	cmp	r3, r1, lsl #21
   246c8:	adc	r0, r0, r0
   246cc:	subcs	r3, r3, r1, lsl #21
   246d0:	cmp	r3, r1, lsl #20
   246d4:	adc	r0, r0, r0
   246d8:	subcs	r3, r3, r1, lsl #20
   246dc:	cmp	r3, r1, lsl #19
   246e0:	adc	r0, r0, r0
   246e4:	subcs	r3, r3, r1, lsl #19
   246e8:	cmp	r3, r1, lsl #18
   246ec:	adc	r0, r0, r0
   246f0:	subcs	r3, r3, r1, lsl #18
   246f4:	cmp	r3, r1, lsl #17
   246f8:	adc	r0, r0, r0
   246fc:	subcs	r3, r3, r1, lsl #17
   24700:	cmp	r3, r1, lsl #16
   24704:	adc	r0, r0, r0
   24708:	subcs	r3, r3, r1, lsl #16
   2470c:	cmp	r3, r1, lsl #15
   24710:	adc	r0, r0, r0
   24714:	subcs	r3, r3, r1, lsl #15
   24718:	cmp	r3, r1, lsl #14
   2471c:	adc	r0, r0, r0
   24720:	subcs	r3, r3, r1, lsl #14
   24724:	cmp	r3, r1, lsl #13
   24728:	adc	r0, r0, r0
   2472c:	subcs	r3, r3, r1, lsl #13
   24730:	cmp	r3, r1, lsl #12
   24734:	adc	r0, r0, r0
   24738:	subcs	r3, r3, r1, lsl #12
   2473c:	cmp	r3, r1, lsl #11
   24740:	adc	r0, r0, r0
   24744:	subcs	r3, r3, r1, lsl #11
   24748:	cmp	r3, r1, lsl #10
   2474c:	adc	r0, r0, r0
   24750:	subcs	r3, r3, r1, lsl #10
   24754:	cmp	r3, r1, lsl #9
   24758:	adc	r0, r0, r0
   2475c:	subcs	r3, r3, r1, lsl #9
   24760:	cmp	r3, r1, lsl #8
   24764:	adc	r0, r0, r0
   24768:	subcs	r3, r3, r1, lsl #8
   2476c:	cmp	r3, r1, lsl #7
   24770:	adc	r0, r0, r0
   24774:	subcs	r3, r3, r1, lsl #7
   24778:	cmp	r3, r1, lsl #6
   2477c:	adc	r0, r0, r0
   24780:	subcs	r3, r3, r1, lsl #6
   24784:	cmp	r3, r1, lsl #5
   24788:	adc	r0, r0, r0
   2478c:	subcs	r3, r3, r1, lsl #5
   24790:	cmp	r3, r1, lsl #4
   24794:	adc	r0, r0, r0
   24798:	subcs	r3, r3, r1, lsl #4
   2479c:	cmp	r3, r1, lsl #3
   247a0:	adc	r0, r0, r0
   247a4:	subcs	r3, r3, r1, lsl #3
   247a8:	cmp	r3, r1, lsl #2
   247ac:	adc	r0, r0, r0
   247b0:	subcs	r3, r3, r1, lsl #2
   247b4:	cmp	r3, r1, lsl #1
   247b8:	adc	r0, r0, r0
   247bc:	subcs	r3, r3, r1, lsl #1
   247c0:	cmp	r3, r1
   247c4:	adc	r0, r0, r0
   247c8:	subcs	r3, r3, r1
   247cc:	cmp	ip, #0
   247d0:	rsbmi	r0, r0, #0
   247d4:	bx	lr
   247d8:	teq	ip, r0
   247dc:	rsbmi	r0, r0, #0
   247e0:	bx	lr
   247e4:	movcc	r0, #0
   247e8:	asreq	r0, ip, #31
   247ec:	orreq	r0, r0, #1
   247f0:	bx	lr
   247f4:	clz	r2, r1
   247f8:	rsb	r2, r2, #31
   247fc:	cmp	ip, #0
   24800:	lsr	r0, r3, r2
   24804:	rsbmi	r0, r0, #0
   24808:	bx	lr
   2480c:	cmp	r0, #0
   24810:	mvngt	r0, #-2147483648	; 0x80000000
   24814:	movlt	r0, #-2147483648	; 0x80000000
   24818:	b	24d0c <_obstack_memory_used@@Base+0x1124>
   2481c:	cmp	r1, #0
   24820:	beq	2480c <_obstack_memory_used@@Base+0xc24>
   24824:	push	{r0, r1, lr}
   24828:	bl	24604 <_obstack_memory_used@@Base+0xa1c>
   2482c:	pop	{r1, r2, lr}
   24830:	mul	r3, r2, r0
   24834:	sub	r1, r1, r3
   24838:	bx	lr
   2483c:	eor	r1, r1, #-2147483648	; 0x80000000
   24840:	b	24848 <_obstack_memory_used@@Base+0xc60>
   24844:	eor	r3, r3, #-2147483648	; 0x80000000
   24848:	push	{r4, r5, lr}
   2484c:	lsl	r4, r1, #1
   24850:	lsl	r5, r3, #1
   24854:	teq	r4, r5
   24858:	teqeq	r0, r2
   2485c:	orrsne	ip, r4, r0
   24860:	orrsne	ip, r5, r2
   24864:	mvnsne	ip, r4, asr #21
   24868:	mvnsne	ip, r5, asr #21
   2486c:	beq	24a58 <_obstack_memory_used@@Base+0xe70>
   24870:	lsr	r4, r4, #21
   24874:	rsbs	r5, r4, r5, lsr #21
   24878:	rsblt	r5, r5, #0
   2487c:	ble	2489c <_obstack_memory_used@@Base+0xcb4>
   24880:	add	r4, r4, r5
   24884:	eor	r2, r0, r2
   24888:	eor	r3, r1, r3
   2488c:	eor	r0, r2, r0
   24890:	eor	r1, r3, r1
   24894:	eor	r2, r0, r2
   24898:	eor	r3, r1, r3
   2489c:	cmp	r5, #54	; 0x36
   248a0:	pophi	{r4, r5, pc}
   248a4:	tst	r1, #-2147483648	; 0x80000000
   248a8:	lsl	r1, r1, #12
   248ac:	mov	ip, #1048576	; 0x100000
   248b0:	orr	r1, ip, r1, lsr #12
   248b4:	beq	248c0 <_obstack_memory_used@@Base+0xcd8>
   248b8:	rsbs	r0, r0, #0
   248bc:	rsc	r1, r1, #0
   248c0:	tst	r3, #-2147483648	; 0x80000000
   248c4:	lsl	r3, r3, #12
   248c8:	orr	r3, ip, r3, lsr #12
   248cc:	beq	248d8 <_obstack_memory_used@@Base+0xcf0>
   248d0:	rsbs	r2, r2, #0
   248d4:	rsc	r3, r3, #0
   248d8:	teq	r4, r5
   248dc:	beq	24a40 <_obstack_memory_used@@Base+0xe58>
   248e0:	sub	r4, r4, #1
   248e4:	rsbs	lr, r5, #32
   248e8:	blt	24904 <_obstack_memory_used@@Base+0xd1c>
   248ec:	lsl	ip, r2, lr
   248f0:	adds	r0, r0, r2, lsr r5
   248f4:	adc	r1, r1, #0
   248f8:	adds	r0, r0, r3, lsl lr
   248fc:	adcs	r1, r1, r3, asr r5
   24900:	b	24920 <_obstack_memory_used@@Base+0xd38>
   24904:	sub	r5, r5, #32
   24908:	add	lr, lr, #32
   2490c:	cmp	r2, #1
   24910:	lsl	ip, r3, lr
   24914:	orrcs	ip, ip, #2
   24918:	adds	r0, r0, r3, asr r5
   2491c:	adcs	r1, r1, r3, asr #31
   24920:	and	r5, r1, #-2147483648	; 0x80000000
   24924:	bpl	24934 <_obstack_memory_used@@Base+0xd4c>
   24928:	rsbs	ip, ip, #0
   2492c:	rscs	r0, r0, #0
   24930:	rsc	r1, r1, #0
   24934:	cmp	r1, #1048576	; 0x100000
   24938:	bcc	24978 <_obstack_memory_used@@Base+0xd90>
   2493c:	cmp	r1, #2097152	; 0x200000
   24940:	bcc	24960 <_obstack_memory_used@@Base+0xd78>
   24944:	lsrs	r1, r1, #1
   24948:	rrxs	r0, r0
   2494c:	rrx	ip, ip
   24950:	add	r4, r4, #1
   24954:	lsl	r2, r4, #21
   24958:	cmn	r2, #4194304	; 0x400000
   2495c:	bcs	24ab8 <_obstack_memory_used@@Base+0xed0>
   24960:	cmp	ip, #-2147483648	; 0x80000000
   24964:	lsrseq	ip, r0, #1
   24968:	adcs	r0, r0, #0
   2496c:	adc	r1, r1, r4, lsl #20
   24970:	orr	r1, r1, r5
   24974:	pop	{r4, r5, pc}
   24978:	lsls	ip, ip, #1
   2497c:	adcs	r0, r0, r0
   24980:	adc	r1, r1, r1
   24984:	tst	r1, #1048576	; 0x100000
   24988:	sub	r4, r4, #1
   2498c:	bne	24960 <_obstack_memory_used@@Base+0xd78>
   24990:	teq	r1, #0
   24994:	moveq	r1, r0
   24998:	moveq	r0, #0
   2499c:	clz	r3, r1
   249a0:	addeq	r3, r3, #32
   249a4:	sub	r3, r3, #11
   249a8:	subs	r2, r3, #32
   249ac:	bge	249d0 <_obstack_memory_used@@Base+0xde8>
   249b0:	adds	r2, r2, #12
   249b4:	ble	249cc <_obstack_memory_used@@Base+0xde4>
   249b8:	add	ip, r2, #20
   249bc:	rsb	r2, r2, #12
   249c0:	lsl	r0, r1, ip
   249c4:	lsr	r1, r1, r2
   249c8:	b	249e0 <_obstack_memory_used@@Base+0xdf8>
   249cc:	add	r2, r2, #20
   249d0:	rsble	ip, r2, #32
   249d4:	lsl	r1, r1, r2
   249d8:	orrle	r1, r1, r0, lsr ip
   249dc:	lslle	r0, r0, r2
   249e0:	subs	r4, r4, r3
   249e4:	addge	r1, r1, r4, lsl #20
   249e8:	orrge	r1, r1, r5
   249ec:	popge	{r4, r5, pc}
   249f0:	mvn	r4, r4
   249f4:	subs	r4, r4, #31
   249f8:	bge	24a34 <_obstack_memory_used@@Base+0xe4c>
   249fc:	adds	r4, r4, #12
   24a00:	bgt	24a1c <_obstack_memory_used@@Base+0xe34>
   24a04:	add	r4, r4, #20
   24a08:	rsb	r2, r4, #32
   24a0c:	lsr	r0, r0, r4
   24a10:	orr	r0, r0, r1, lsl r2
   24a14:	orr	r1, r5, r1, lsr r4
   24a18:	pop	{r4, r5, pc}
   24a1c:	rsb	r4, r4, #12
   24a20:	rsb	r2, r4, #32
   24a24:	lsr	r0, r0, r2
   24a28:	orr	r0, r0, r1, lsl r4
   24a2c:	mov	r1, r5
   24a30:	pop	{r4, r5, pc}
   24a34:	lsr	r0, r1, r4
   24a38:	mov	r1, r5
   24a3c:	pop	{r4, r5, pc}
   24a40:	teq	r4, #0
   24a44:	eor	r3, r3, #1048576	; 0x100000
   24a48:	eoreq	r1, r1, #1048576	; 0x100000
   24a4c:	addeq	r4, r4, #1
   24a50:	subne	r5, r5, #1
   24a54:	b	248e0 <_obstack_memory_used@@Base+0xcf8>
   24a58:	mvns	ip, r4, asr #21
   24a5c:	mvnsne	ip, r5, asr #21
   24a60:	beq	24ac8 <_obstack_memory_used@@Base+0xee0>
   24a64:	teq	r4, r5
   24a68:	teqeq	r0, r2
   24a6c:	beq	24a80 <_obstack_memory_used@@Base+0xe98>
   24a70:	orrs	ip, r4, r0
   24a74:	moveq	r1, r3
   24a78:	moveq	r0, r2
   24a7c:	pop	{r4, r5, pc}
   24a80:	teq	r1, r3
   24a84:	movne	r1, #0
   24a88:	movne	r0, #0
   24a8c:	popne	{r4, r5, pc}
   24a90:	lsrs	ip, r4, #21
   24a94:	bne	24aa8 <_obstack_memory_used@@Base+0xec0>
   24a98:	lsls	r0, r0, #1
   24a9c:	adcs	r1, r1, r1
   24aa0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   24aa4:	pop	{r4, r5, pc}
   24aa8:	adds	r4, r4, #4194304	; 0x400000
   24aac:	addcc	r1, r1, #1048576	; 0x100000
   24ab0:	popcc	{r4, r5, pc}
   24ab4:	and	r5, r1, #-2147483648	; 0x80000000
   24ab8:	orr	r1, r5, #2130706432	; 0x7f000000
   24abc:	orr	r1, r1, #15728640	; 0xf00000
   24ac0:	mov	r0, #0
   24ac4:	pop	{r4, r5, pc}
   24ac8:	mvns	ip, r4, asr #21
   24acc:	movne	r1, r3
   24ad0:	movne	r0, r2
   24ad4:	mvnseq	ip, r5, asr #21
   24ad8:	movne	r3, r1
   24adc:	movne	r2, r0
   24ae0:	orrs	r4, r0, r1, lsl #12
   24ae4:	orrseq	r5, r2, r3, lsl #12
   24ae8:	teqeq	r1, r3
   24aec:	orrne	r1, r1, #524288	; 0x80000
   24af0:	pop	{r4, r5, pc}
   24af4:	teq	r0, #0
   24af8:	moveq	r1, #0
   24afc:	bxeq	lr
   24b00:	push	{r4, r5, lr}
   24b04:	mov	r4, #1024	; 0x400
   24b08:	add	r4, r4, #50	; 0x32
   24b0c:	mov	r5, #0
   24b10:	mov	r1, #0
   24b14:	b	24990 <_obstack_memory_used@@Base+0xda8>
   24b18:	teq	r0, #0
   24b1c:	moveq	r1, #0
   24b20:	bxeq	lr
   24b24:	push	{r4, r5, lr}
   24b28:	mov	r4, #1024	; 0x400
   24b2c:	add	r4, r4, #50	; 0x32
   24b30:	ands	r5, r0, #-2147483648	; 0x80000000
   24b34:	rsbmi	r0, r0, #0
   24b38:	mov	r1, #0
   24b3c:	b	24990 <_obstack_memory_used@@Base+0xda8>
   24b40:	lsls	r2, r0, #1
   24b44:	asr	r1, r2, #3
   24b48:	rrx	r1, r1
   24b4c:	lsl	r0, r2, #28
   24b50:	andsne	r3, r2, #-16777216	; 0xff000000
   24b54:	teqne	r3, #-16777216	; 0xff000000
   24b58:	eorne	r1, r1, #939524096	; 0x38000000
   24b5c:	bxne	lr
   24b60:	bics	r2, r2, #-16777216	; 0xff000000
   24b64:	bxeq	lr
   24b68:	teq	r3, #-16777216	; 0xff000000
   24b6c:	orreq	r1, r1, #524288	; 0x80000
   24b70:	bxeq	lr
   24b74:	push	{r4, r5, lr}
   24b78:	mov	r4, #896	; 0x380
   24b7c:	and	r5, r1, #-2147483648	; 0x80000000
   24b80:	bic	r1, r1, #-2147483648	; 0x80000000
   24b84:	b	24990 <_obstack_memory_used@@Base+0xda8>
   24b88:	orrs	r2, r0, r1
   24b8c:	bxeq	lr
   24b90:	push	{r4, r5, lr}
   24b94:	mov	r5, #0
   24b98:	b	24bb8 <_obstack_memory_used@@Base+0xfd0>
   24b9c:	orrs	r2, r0, r1
   24ba0:	bxeq	lr
   24ba4:	push	{r4, r5, lr}
   24ba8:	ands	r5, r1, #-2147483648	; 0x80000000
   24bac:	bpl	24bb8 <_obstack_memory_used@@Base+0xfd0>
   24bb0:	rsbs	r0, r0, #0
   24bb4:	rsc	r1, r1, #0
   24bb8:	mov	r4, #1024	; 0x400
   24bbc:	add	r4, r4, #50	; 0x32
   24bc0:	lsrs	ip, r1, #22
   24bc4:	beq	24934 <_obstack_memory_used@@Base+0xd4c>
   24bc8:	mov	r2, #3
   24bcc:	lsrs	ip, ip, #3
   24bd0:	addne	r2, r2, #3
   24bd4:	lsrs	ip, ip, #3
   24bd8:	addne	r2, r2, #3
   24bdc:	add	r2, r2, ip, lsr #3
   24be0:	rsb	r3, r2, #32
   24be4:	lsl	ip, r0, r3
   24be8:	lsr	r0, r0, r2
   24bec:	orr	r0, r0, r1, lsl r3
   24bf0:	lsr	r1, r1, r2
   24bf4:	add	r4, r4, r2
   24bf8:	b	24934 <_obstack_memory_used@@Base+0xd4c>
   24bfc:	cmp	r3, #0
   24c00:	cmpeq	r2, #0
   24c04:	bne	24c28 <_obstack_memory_used@@Base+0x1040>
   24c08:	cmp	r1, #0
   24c0c:	movlt	r1, #-2147483648	; 0x80000000
   24c10:	movlt	r0, #0
   24c14:	blt	24c24 <_obstack_memory_used@@Base+0x103c>
   24c18:	cmpeq	r0, #0
   24c1c:	mvnne	r1, #-2147483648	; 0x80000000
   24c20:	mvnne	r0, #0
   24c24:	b	24d0c <_obstack_memory_used@@Base+0x1124>
   24c28:	sub	sp, sp, #8
   24c2c:	push	{sp, lr}
   24c30:	cmp	r1, #0
   24c34:	blt	24c54 <_obstack_memory_used@@Base+0x106c>
   24c38:	cmp	r3, #0
   24c3c:	blt	24c88 <_obstack_memory_used@@Base+0x10a0>
   24c40:	bl	24d60 <_obstack_memory_used@@Base+0x1178>
   24c44:	ldr	lr, [sp, #4]
   24c48:	add	sp, sp, #8
   24c4c:	pop	{r2, r3}
   24c50:	bx	lr
   24c54:	rsbs	r0, r0, #0
   24c58:	sbc	r1, r1, r1, lsl #1
   24c5c:	cmp	r3, #0
   24c60:	blt	24cac <_obstack_memory_used@@Base+0x10c4>
   24c64:	bl	24d60 <_obstack_memory_used@@Base+0x1178>
   24c68:	ldr	lr, [sp, #4]
   24c6c:	add	sp, sp, #8
   24c70:	pop	{r2, r3}
   24c74:	rsbs	r0, r0, #0
   24c78:	sbc	r1, r1, r1, lsl #1
   24c7c:	rsbs	r2, r2, #0
   24c80:	sbc	r3, r3, r3, lsl #1
   24c84:	bx	lr
   24c88:	rsbs	r2, r2, #0
   24c8c:	sbc	r3, r3, r3, lsl #1
   24c90:	bl	24d60 <_obstack_memory_used@@Base+0x1178>
   24c94:	ldr	lr, [sp, #4]
   24c98:	add	sp, sp, #8
   24c9c:	pop	{r2, r3}
   24ca0:	rsbs	r0, r0, #0
   24ca4:	sbc	r1, r1, r1, lsl #1
   24ca8:	bx	lr
   24cac:	rsbs	r2, r2, #0
   24cb0:	sbc	r3, r3, r3, lsl #1
   24cb4:	bl	24d60 <_obstack_memory_used@@Base+0x1178>
   24cb8:	ldr	lr, [sp, #4]
   24cbc:	add	sp, sp, #8
   24cc0:	pop	{r2, r3}
   24cc4:	rsbs	r2, r2, #0
   24cc8:	sbc	r3, r3, r3, lsl #1
   24ccc:	bx	lr
   24cd0:	cmp	r3, #0
   24cd4:	cmpeq	r2, #0
   24cd8:	bne	24cf0 <_obstack_memory_used@@Base+0x1108>
   24cdc:	cmp	r1, #0
   24ce0:	cmpeq	r0, #0
   24ce4:	mvnne	r1, #0
   24ce8:	mvnne	r0, #0
   24cec:	b	24d0c <_obstack_memory_used@@Base+0x1124>
   24cf0:	sub	sp, sp, #8
   24cf4:	push	{sp, lr}
   24cf8:	bl	24d60 <_obstack_memory_used@@Base+0x1178>
   24cfc:	ldr	lr, [sp, #4]
   24d00:	add	sp, sp, #8
   24d04:	pop	{r2, r3}
   24d08:	bx	lr
   24d0c:	push	{r1, lr}
   24d10:	mov	r0, #8
   24d14:	bl	118b4 <raise@plt>
   24d18:	pop	{r1, pc}
   24d1c:	andeq	r0, r0, r0
   24d20:	vmov	d6, r0, r1
   24d24:	vldr	d7, [pc, #36]	; 24d50 <_obstack_memory_used@@Base+0x1168>
   24d28:	vldr	d5, [pc, #40]	; 24d58 <_obstack_memory_used@@Base+0x1170>
   24d2c:	vmul.f64	d7, d6, d7
   24d30:	vcvt.u32.f64	s14, d7
   24d34:	vcvt.f64.u32	d4, s14
   24d38:	vmov	r1, s14
   24d3c:	vmls.f64	d6, d4, d5
   24d40:	vcvt.u32.f64	s15, d6
   24d44:	vmov	r0, s15
   24d48:	bx	lr
   24d4c:	nop			; (mov r0, r0)
   24d50:	andeq	r0, r0, r0
   24d54:	ldclcc	0, cr0, [r0]
   24d58:	andeq	r0, r0, r0
   24d5c:	mvnsmi	r0, r0
   24d60:	cmp	r1, r3
   24d64:	cmpeq	r0, r2
   24d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d6c:	mov	r4, r0
   24d70:	movcc	r0, #0
   24d74:	mov	r5, r1
   24d78:	ldr	lr, [sp, #36]	; 0x24
   24d7c:	movcc	r1, r0
   24d80:	bcc	24e7c <_obstack_memory_used@@Base+0x1294>
   24d84:	cmp	r3, #0
   24d88:	clzeq	ip, r2
   24d8c:	clzne	ip, r3
   24d90:	addeq	ip, ip, #32
   24d94:	cmp	r5, #0
   24d98:	clzeq	r1, r4
   24d9c:	addeq	r1, r1, #32
   24da0:	clzne	r1, r5
   24da4:	sub	ip, ip, r1
   24da8:	sub	sl, ip, #32
   24dac:	lsl	r9, r3, ip
   24db0:	rsb	fp, ip, #32
   24db4:	orr	r9, r9, r2, lsl sl
   24db8:	orr	r9, r9, r2, lsr fp
   24dbc:	lsl	r8, r2, ip
   24dc0:	cmp	r5, r9
   24dc4:	cmpeq	r4, r8
   24dc8:	movcc	r0, #0
   24dcc:	movcc	r1, r0
   24dd0:	bcc	24dec <_obstack_memory_used@@Base+0x1204>
   24dd4:	mov	r0, #1
   24dd8:	subs	r4, r4, r8
   24ddc:	lsl	r1, r0, sl
   24de0:	orr	r1, r1, r0, lsr fp
   24de4:	lsl	r0, r0, ip
   24de8:	sbc	r5, r5, r9
   24dec:	cmp	ip, #0
   24df0:	beq	24e7c <_obstack_memory_used@@Base+0x1294>
   24df4:	lsr	r6, r8, #1
   24df8:	orr	r6, r6, r9, lsl #31
   24dfc:	lsr	r7, r9, #1
   24e00:	mov	r2, ip
   24e04:	b	24e28 <_obstack_memory_used@@Base+0x1240>
   24e08:	subs	r3, r4, r6
   24e0c:	sbc	r8, r5, r7
   24e10:	adds	r3, r3, r3
   24e14:	adc	r8, r8, r8
   24e18:	adds	r4, r3, #1
   24e1c:	adc	r5, r8, #0
   24e20:	subs	r2, r2, #1
   24e24:	beq	24e44 <_obstack_memory_used@@Base+0x125c>
   24e28:	cmp	r5, r7
   24e2c:	cmpeq	r4, r6
   24e30:	bcs	24e08 <_obstack_memory_used@@Base+0x1220>
   24e34:	adds	r4, r4, r4
   24e38:	adc	r5, r5, r5
   24e3c:	subs	r2, r2, #1
   24e40:	bne	24e28 <_obstack_memory_used@@Base+0x1240>
   24e44:	lsr	r3, r4, ip
   24e48:	orr	r3, r3, r5, lsl fp
   24e4c:	lsr	r2, r5, ip
   24e50:	orr	r3, r3, r5, lsr sl
   24e54:	adds	r0, r0, r4
   24e58:	mov	r4, r3
   24e5c:	lsl	r3, r2, ip
   24e60:	orr	r3, r3, r4, lsl sl
   24e64:	lsl	ip, r4, ip
   24e68:	orr	r3, r3, r4, lsr fp
   24e6c:	adc	r1, r1, r5
   24e70:	subs	r0, r0, ip
   24e74:	mov	r5, r2
   24e78:	sbc	r1, r1, r3
   24e7c:	cmp	lr, #0
   24e80:	strdne	r4, [lr]
   24e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24e8c:	mov	r7, r0
   24e90:	ldr	r6, [pc, #72]	; 24ee0 <_obstack_memory_used@@Base+0x12f8>
   24e94:	ldr	r5, [pc, #72]	; 24ee4 <_obstack_memory_used@@Base+0x12fc>
   24e98:	add	r6, pc, r6
   24e9c:	add	r5, pc, r5
   24ea0:	sub	r6, r6, r5
   24ea4:	mov	r8, r1
   24ea8:	mov	r9, r2
   24eac:	bl	1187c <calloc@plt-0x20>
   24eb0:	asrs	r6, r6, #2
   24eb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24eb8:	mov	r4, #0
   24ebc:	add	r4, r4, #1
   24ec0:	ldr	r3, [r5], #4
   24ec4:	mov	r2, r9
   24ec8:	mov	r1, r8
   24ecc:	mov	r0, r7
   24ed0:	blx	r3
   24ed4:	cmp	r6, r4
   24ed8:	bne	24ebc <_obstack_memory_used@@Base+0x12d4>
   24edc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24ee0:	andeq	r5, r1, ip, asr r0
   24ee4:	andeq	r5, r1, r4, asr r0
   24ee8:	bx	lr
   24eec:	ldr	r3, [pc, #12]	; 24f00 <_obstack_memory_used@@Base+0x1318>
   24ef0:	mov	r1, #0
   24ef4:	add	r3, pc, r3
   24ef8:	ldr	r2, [r3]
   24efc:	b	11c38 <__cxa_atexit@plt>
   24f00:	ldrdeq	r5, [r1], -r0

Disassembly of section .fini:

00024f04 <.fini>:
   24f04:	push	{r3, lr}
   24f08:	pop	{r3, pc}
