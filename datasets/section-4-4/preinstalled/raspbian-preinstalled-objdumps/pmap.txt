
raspbian-preinstalled/pmap:     file format elf32-littlearm


Disassembly of section .init:

00010fa0 <_init@@Base>:
   10fa0:	push	{r3, lr}
   10fa4:	bl	134f8 <__assert_fail@plt+0x228c>
   10fa8:	pop	{r3, pc}

Disassembly of section .plt:

00010fac <calloc@plt-0x14>:
   10fac:	push	{lr}		; (str lr, [sp, #-4]!)
   10fb0:	ldr	lr, [pc, #4]	; 10fbc <_init@@Base+0x1c>
   10fb4:	add	lr, pc, lr
   10fb8:	ldr	pc, [lr, #8]!
   10fbc:	andeq	r4, r1, r8, asr #30

00010fc0 <calloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #3912]!	; 0xf48

00010fcc <strstr@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #3904]!	; 0xf40

00010fd8 <strcmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #3896]!	; 0xf38

00010fe4 <free@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #3888]!	; 0xf30

00010ff0 <fgets@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #3880]!	; 0xf28

00010ffc <ferror@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #3872]!	; 0xf20

00011008 <_exit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #3864]!	; 0xf18

00011014 <shmget@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #3856]!	; 0xf10

00011020 <dcgettext@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #3848]!	; 0xf08

0001102c <strdup@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #3840]!	; 0xf00

00011038 <__stack_chk_fail@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #3832]!	; 0xef8

00011044 <textdomain@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #20, 20	; 0x14000
   1104c:	ldr	pc, [ip, #3824]!	; 0xef0

00011050 <shmat@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #20, 20	; 0x14000
   11058:	ldr	pc, [ip, #3816]!	; 0xee8

0001105c <perror@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #20, 20	; 0x14000
   11064:	ldr	pc, [ip, #3808]!	; 0xee0

00011068 <_IO_putc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #3800]!	; 0xed8

00011074 <fwrite@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #3792]!	; 0xed0

00011080 <__strcpy_chk@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #3784]!	; 0xec8

0001108c <__fpending@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #3776]!	; 0xec0

00011098 <shmctl@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #3768]!	; 0xeb8

000110a4 <error@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #3760]!	; 0xeb0

000110b0 <getenv@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #3752]!	; 0xea8

000110bc <puts@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #3744]!	; 0xea0

000110c8 <malloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #20, 20	; 0x14000
   110d0:	ldr	pc, [ip, #3736]!	; 0xe98

000110d4 <__libc_start_main@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #20, 20	; 0x14000
   110dc:	ldr	pc, [ip, #3728]!	; 0xe90

000110e0 <__gmon_start__@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #20, 20	; 0x14000
   110e8:	ldr	pc, [ip, #3720]!	; 0xe88

000110ec <freopen64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #20, 20	; 0x14000
   110f4:	ldr	pc, [ip, #3712]!	; 0xe80

000110f8 <getopt_long@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #20, 20	; 0x14000
   11100:	ldr	pc, [ip, #3704]!	; 0xe78

00011104 <__ctype_b_loc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #20, 20	; 0x14000
   1110c:	ldr	pc, [ip, #3696]!	; 0xe70

00011110 <exit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #20, 20	; 0x14000
   11118:	ldr	pc, [ip, #3688]!	; 0xe68

0001111c <strtoul@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #20, 20	; 0x14000
   11124:	ldr	pc, [ip, #3680]!	; 0xe60

00011128 <strlen@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #20, 20	; 0x14000
   11130:	ldr	pc, [ip, #3672]!	; 0xe58

00011134 <strchr@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #20, 20	; 0x14000
   1113c:	ldr	pc, [ip, #3664]!	; 0xe50

00011140 <__errno_location@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #20, 20	; 0x14000
   11148:	ldr	pc, [ip, #3656]!	; 0xe48

0001114c <snprintf@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #20, 20	; 0x14000
   11154:	ldr	pc, [ip, #3648]!	; 0xe40

00011158 <__cxa_atexit@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #20, 20	; 0x14000
   11160:	ldr	pc, [ip, #3640]!	; 0xe38

00011164 <memset@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #20, 20	; 0x14000
   1116c:	ldr	pc, [ip, #3632]!	; 0xe30

00011170 <putchar@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #20, 20	; 0x14000
   11178:	ldr	pc, [ip, #3624]!	; 0xe28

0001117c <__printf_chk@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #20, 20	; 0x14000
   11184:	ldr	pc, [ip, #3616]!	; 0xe20

00011188 <closeproc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #20, 20	; 0x14000
   11190:	ldr	pc, [ip, #3608]!	; 0xe18

00011194 <__fprintf_chk@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #20, 20	; 0x14000
   1119c:	ldr	pc, [ip, #3600]!	; 0xe10

000111a0 <shmdt@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #20, 20	; 0x14000
   111a8:	ldr	pc, [ip, #3592]!	; 0xe08

000111ac <fclose@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #20, 20	; 0x14000
   111b4:	ldr	pc, [ip, #3584]!	; 0xe00

000111b8 <strtok@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #20, 20	; 0x14000
   111c0:	ldr	pc, [ip, #3576]!	; 0xdf8

000111c4 <escape_command@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #20, 20	; 0x14000
   111cc:	ldr	pc, [ip, #3568]!	; 0xdf0

000111d0 <setlocale@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #20, 20	; 0x14000
   111d8:	ldr	pc, [ip, #3560]!	; 0xde8

000111dc <strrchr@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #20, 20	; 0x14000
   111e4:	ldr	pc, [ip, #3552]!	; 0xde0

000111e8 <readproc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #20, 20	; 0x14000
   111f0:	ldr	pc, [ip, #3544]!	; 0xdd8

000111f4 <openproc@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #20, 20	; 0x14000
   111fc:	ldr	pc, [ip, #3536]!	; 0xdd0

00011200 <fputc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #20, 20	; 0x14000
   11208:	ldr	pc, [ip, #3528]!	; 0xdc8

0001120c <sscanf@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #20, 20	; 0x14000
   11214:	ldr	pc, [ip, #3520]!	; 0xdc0

00011218 <fopen64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #20, 20	; 0x14000
   11220:	ldr	pc, [ip, #3512]!	; 0xdb8

00011224 <bindtextdomain@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #20, 20	; 0x14000
   1122c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011230 <fseek@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #20, 20	; 0x14000
   11238:	ldr	pc, [ip, #3496]!	; 0xda8

0001123c <fputs@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #20, 20	; 0x14000
   11244:	ldr	pc, [ip, #3488]!	; 0xda0

00011248 <strncmp@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #20, 20	; 0x14000
   11250:	ldr	pc, [ip, #3480]!	; 0xd98

00011254 <abort@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #20, 20	; 0x14000
   1125c:	ldr	pc, [ip, #3472]!	; 0xd90

00011260 <__snprintf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #20, 20	; 0x14000
   11268:	ldr	pc, [ip, #3464]!	; 0xd88

0001126c <__assert_fail@plt>:
   1126c:	stmia	r6!, {}
   1126e:	b.n	11790 <__assert_fail@plt+0x524>
   11270:	ldmia	r2, {r2, r4}
   11272:	b.n	1178e <__assert_fail@plt+0x522>
   11274:	stc2	5, cr14, [r0, #752]	; 0x2f0

Disassembly of section .text:

00011278 <.text>:
   11278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1127c:	sub	sp, sp, #3376	; 0xd30
   11280:	ldr	r2, [pc, #3992]	; 12220 <__assert_fail@plt+0xfb4>
   11284:	ldr	sl, [pc, #3992]	; 12224 <__assert_fail@plt+0xfb8>
   11288:	ldr	r3, [pc, #3992]	; 12228 <__assert_fail@plt+0xfbc>
   1128c:	ldr	ip, [r2]
   11290:	sub	sp, sp, #4
   11294:	ldr	r2, [sl]
   11298:	mov	r6, r0
   1129c:	mov	r5, r1
   112a0:	mov	r0, #6
   112a4:	ldr	r1, [pc, #3968]	; 1222c <__assert_fail@plt+0xfc0>
   112a8:	str	ip, [sp, #3372]	; 0xd2c
   112ac:	str	r2, [r3]
   112b0:	bl	111d0 <setlocale@plt>
   112b4:	ldr	r1, [pc, #3956]	; 12230 <__assert_fail@plt+0xfc4>
   112b8:	ldr	r0, [pc, #3956]	; 12234 <__assert_fail@plt+0xfc8>
   112bc:	bl	11224 <bindtextdomain@plt>
   112c0:	ldr	r0, [pc, #3948]	; 12234 <__assert_fail@plt+0xfc8>
   112c4:	bl	11044 <textdomain@plt>
   112c8:	mov	r2, #5
   112cc:	ldr	r1, [pc, #3940]	; 12238 <__assert_fail@plt+0xfcc>
   112d0:	mov	r0, #0
   112d4:	bl	11020 <dcgettext@plt>
   112d8:	ldr	r3, [pc, #3932]	; 1223c <__assert_fail@plt+0xfd0>
   112dc:	mov	r2, #5
   112e0:	ldr	r1, [pc, #3928]	; 12240 <__assert_fail@plt+0xfd4>
   112e4:	str	r0, [r3]
   112e8:	mov	r0, #0
   112ec:	bl	11020 <dcgettext@plt>
   112f0:	ldr	r3, [pc, #3916]	; 12244 <__assert_fail@plt+0xfd8>
   112f4:	mov	r2, #5
   112f8:	ldr	r1, [pc, #3912]	; 12248 <__assert_fail@plt+0xfdc>
   112fc:	str	r0, [r3]
   11300:	mov	r0, #0
   11304:	bl	11020 <dcgettext@plt>
   11308:	ldr	r3, [pc, #3900]	; 1224c <__assert_fail@plt+0xfe0>
   1130c:	mov	r2, #5
   11310:	ldr	r1, [pc, #3896]	; 12250 <__assert_fail@plt+0xfe4>
   11314:	str	r0, [r3]
   11318:	mov	r0, #0
   1131c:	bl	11020 <dcgettext@plt>
   11320:	ldr	r3, [pc, #3884]	; 12254 <__assert_fail@plt+0xfe8>
   11324:	mov	r2, #5
   11328:	ldr	r1, [pc, #3880]	; 12258 <__assert_fail@plt+0xfec>
   1132c:	str	r0, [r3]
   11330:	mov	r0, #0
   11334:	bl	11020 <dcgettext@plt>
   11338:	ldr	r3, [pc, #3868]	; 1225c <__assert_fail@plt+0xff0>
   1133c:	mov	r2, #5
   11340:	ldr	r1, [pc, #3864]	; 12260 <__assert_fail@plt+0xff4>
   11344:	str	r0, [r3]
   11348:	mov	r0, #0
   1134c:	bl	11020 <dcgettext@plt>
   11350:	ldr	r3, [pc, #3852]	; 12264 <__assert_fail@plt+0xff8>
   11354:	mov	r2, #5
   11358:	ldr	r1, [pc, #3848]	; 12268 <__assert_fail@plt+0xffc>
   1135c:	str	r0, [r3]
   11360:	mov	r0, #0
   11364:	bl	11020 <dcgettext@plt>
   11368:	ldr	r3, [pc, #3836]	; 1226c <__assert_fail@plt+0x1000>
   1136c:	mov	r2, #5
   11370:	ldr	r1, [pc, #3832]	; 12270 <__assert_fail@plt+0x1004>
   11374:	str	r0, [r3]
   11378:	mov	r0, #0
   1137c:	bl	11020 <dcgettext@plt>
   11380:	ldr	r3, [pc, #3820]	; 12274 <__assert_fail@plt+0x1008>
   11384:	mov	r2, #5
   11388:	ldr	r1, [pc, #3816]	; 12278 <__assert_fail@plt+0x100c>
   1138c:	str	r0, [r3]
   11390:	mov	r0, #0
   11394:	bl	11020 <dcgettext@plt>
   11398:	ldr	r3, [pc, #3804]	; 1227c <__assert_fail@plt+0x1010>
   1139c:	mov	r2, #5
   113a0:	ldr	r1, [pc, #3800]	; 12280 <__assert_fail@plt+0x1014>
   113a4:	str	r0, [r3]
   113a8:	mov	r0, #0
   113ac:	bl	11020 <dcgettext@plt>
   113b0:	ldr	r3, [pc, #3788]	; 12284 <__assert_fail@plt+0x1018>
   113b4:	str	r0, [r3]
   113b8:	ldr	r0, [pc, #3784]	; 12288 <__assert_fail@plt+0x101c>
   113bc:	bl	140bc <__assert_fail@plt+0x2e50>
   113c0:	cmp	r6, #1
   113c4:	ble	11914 <__assert_fail@plt+0x6a8>
   113c8:	ldr	r8, [pc, #3772]	; 1228c <__assert_fail@plt+0x1020>
   113cc:	ldr	r7, [pc, #3772]	; 12290 <__assert_fail@plt+0x1024>
   113d0:	ldr	r9, [pc, #3772]	; 12294 <__assert_fail@plt+0x1028>
   113d4:	ldr	fp, [pc, #3772]	; 12298 <__assert_fail@plt+0x102c>
   113d8:	mov	r3, #0
   113dc:	str	r3, [sp, #60]	; 0x3c
   113e0:	mov	r4, #0
   113e4:	str	r4, [sp]
   113e8:	mov	r3, r8
   113ec:	mov	r2, r7
   113f0:	mov	r1, r5
   113f4:	mov	r0, r6
   113f8:	bl	110f8 <getopt_long@plt>
   113fc:	cmn	r0, #1
   11400:	beq	116dc <__assert_fail@plt+0x470>
   11404:	sub	r0, r0, #65	; 0x41
   11408:	cmp	r0, #55	; 0x37
   1140c:	ldrls	pc, [pc, r0, lsl #2]
   11410:	b	11914 <__assert_fail@plt+0x6a8>
   11414:	andeq	r1, r1, r8, ror #11
   11418:	andeq	r1, r1, r4, lsl r9
   1141c:	ldrdeq	r1, [r1], -r4
   11420:	andeq	r1, r1, r4, lsl r9
   11424:	andeq	r1, r1, r4, lsl r9
   11428:	andeq	r1, r1, r4, lsl r9
   1142c:	andeq	r1, r1, r4, lsl r9
   11430:	andeq	r1, r1, r4, lsl r9
   11434:	andeq	r1, r1, r4, lsl r9
   11438:	andeq	r1, r1, r4, lsl r9
   1143c:	andeq	r1, r1, r4, lsl r9
   11440:	andeq	r1, r1, r4, lsl r9
   11444:	andeq	r1, r1, r4, lsl r9
   11448:	andeq	r1, r1, r0, asr #11
   1144c:	andeq	r1, r1, r4, lsl r9
   11450:	andeq	r1, r1, r4, lsl r9
   11454:	andeq	r1, r1, r4, lsl r9
   11458:	andeq	r1, r1, r4, lsl r9
   1145c:	andeq	r1, r1, r4, lsl r9
   11460:	andeq	r1, r1, r4, lsl r9
   11464:	andeq	r1, r1, r4, lsl r9
   11468:	andeq	r1, r1, r0, ror r5
   1146c:	andeq	r1, r1, r4, lsl r9
   11470:	andeq	r1, r1, r0, ror #10
   11474:	andeq	r1, r1, r4, lsl r9
   11478:	andeq	r1, r1, r4, lsl r9
   1147c:	andeq	r1, r1, r4, lsl r9
   11480:	andeq	r1, r1, r4, lsl r9
   11484:	andeq	r1, r1, r4, lsl r9
   11488:	andeq	r1, r1, r4, lsl r9
   1148c:	andeq	r1, r1, r4, lsl r9
   11490:	andeq	r1, r1, r4, lsl r9
   11494:	andeq	r1, r1, r4, lsl r9
   11498:	andeq	r1, r1, r4, lsl r9
   1149c:	andeq	r1, r1, r4, asr r5
   114a0:	andeq	r1, r1, r8, asr #10
   114a4:	andeq	r1, r1, r4, lsl r9
   114a8:	andeq	r1, r1, r4, lsl r9
   114ac:	andeq	r1, r1, r4, lsl r9
   114b0:	andeq	r2, r1, r0, ror sl
   114b4:	andeq	r1, r1, r4, lsl r9
   114b8:	andeq	r1, r1, r4, lsl r9
   114bc:	andeq	r1, r1, r4, lsl r9
   114c0:	andeq	r1, r1, r4, lsl r9
   114c4:	andeq	r1, r1, r4, lsl r9
   114c8:	andeq	r1, r1, ip, lsr r5
   114cc:	andeq	r1, r1, r4, lsl r9
   114d0:	andeq	r1, r1, r0, lsr r5
   114d4:	andeq	r1, r1, r4, lsr #10
   114d8:	andeq	r1, r1, r0, lsl #10
   114dc:	andeq	r1, r1, r4, lsl r9
   114e0:	andeq	r1, r1, r4, lsl r9
   114e4:	andeq	r1, r1, r4, lsl r9
   114e8:	andeq	r1, r1, r4, lsl r9
   114ec:	andeq	r1, r1, r4, lsl r9
   114f0:	strdeq	r1, [r1], -r4
   114f4:	mov	r3, #1
   114f8:	str	r3, [r9, #1104]	; 0x450
   114fc:	b	113e0 <__assert_fail@plt+0x174>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #3472]	; 1229c <__assert_fail@plt+0x1030>
   11508:	mov	r0, #0
   1150c:	bl	11020 <dcgettext@plt>
   11510:	mov	r1, #0
   11514:	mov	r2, r0
   11518:	mov	r0, r1
   1151c:	bl	110a4 <error@plt>
   11520:	b	113e0 <__assert_fail@plt+0x174>
   11524:	mov	r3, #1
   11528:	str	r3, [r9, #1112]	; 0x458
   1152c:	b	113e0 <__assert_fail@plt+0x174>
   11530:	mov	r3, #1
   11534:	str	r3, [r9, #1132]	; 0x46c
   11538:	b	113e0 <__assert_fail@plt+0x174>
   1153c:	mov	r3, #1
   11540:	str	r3, [r9, #1124]	; 0x464
   11544:	b	113e0 <__assert_fail@plt+0x174>
   11548:	mov	r3, #1
   1154c:	str	r3, [r9, #1108]	; 0x454
   11550:	b	113e0 <__assert_fail@plt+0x174>
   11554:	mov	r3, #1
   11558:	str	r3, [r9, #4]
   1155c:	b	113e0 <__assert_fail@plt+0x174>
   11560:	ldr	r3, [r9]
   11564:	add	r3, r3, #1
   11568:	str	r3, [r9]
   1156c:	b	113e0 <__assert_fail@plt+0x174>
   11570:	mov	r2, #5
   11574:	ldr	r1, [pc, #3364]	; 122a0 <__assert_fail@plt+0x1034>
   11578:	mov	r0, #0
   1157c:	bl	11020 <dcgettext@plt>
   11580:	mov	r1, #0
   11584:	str	r1, [sp, #88]	; 0x58
   11588:	ldr	r2, [sl]
   1158c:	ldr	r3, [pc, #3344]	; 122a4 <__assert_fail@plt+0x1038>
   11590:	mov	r1, r0
   11594:	mov	r0, #1
   11598:	bl	1117c <__printf_chk@plt>
   1159c:	ldr	r3, [pc, #3196]	; 12220 <__assert_fail@plt+0xfb4>
   115a0:	ldr	r2, [sp, #3372]	; 0xd2c
   115a4:	ldr	r0, [sp, #88]	; 0x58
   115a8:	ldr	r3, [r3]
   115ac:	cmp	r2, r3
   115b0:	bne	13420 <__assert_fail@plt+0x21b4>
   115b4:	add	sp, sp, #3376	; 0xd30
   115b8:	add	sp, sp, #4
   115bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115c0:	mov	r3, #1
   115c4:	str	r3, [r9, #1128]	; 0x468
   115c8:	ldr	r3, [fp]
   115cc:	str	r3, [sp, #60]	; 0x3c
   115d0:	b	113e0 <__assert_fail@plt+0x174>
   115d4:	mov	r3, #1
   115d8:	str	r3, [r9, #1120]	; 0x460
   115dc:	ldr	r3, [fp]
   115e0:	str	r3, [sp, #60]	; 0x3c
   115e4:	b	113e0 <__assert_fail@plt+0x174>
   115e8:	ldr	r3, [fp]
   115ec:	cmp	r3, #0
   115f0:	str	r3, [sp, #64]	; 0x40
   115f4:	beq	11698 <__assert_fail@plt+0x42c>
   115f8:	mov	r0, r3
   115fc:	bl	1102c <strdup@plt>
   11600:	subs	r4, r0, #0
   11604:	beq	13424 <__assert_fail@plt+0x21b8>
   11608:	mov	r1, #44	; 0x2c
   1160c:	str	r4, [sp, #192]	; 0xc0
   11610:	bl	11134 <strchr@plt>
   11614:	cmp	r0, #0
   11618:	movne	r2, #0
   1161c:	strbne	r2, [r0]
   11620:	ldrb	r2, [r4]
   11624:	addne	r1, r0, #1
   11628:	strne	r1, [sp, #200]	; 0xc8
   1162c:	streq	r4, [sp, #200]	; 0xc8
   11630:	cmp	r2, #0
   11634:	bne	116c4 <__assert_fail@plt+0x458>
   11638:	ldr	r0, [sp, #200]	; 0xc8
   1163c:	ldrb	r2, [r0]
   11640:	cmp	r2, #0
   11644:	bne	11664 <__assert_fail@plt+0x3f8>
   11648:	ldr	r2, [sp, #192]	; 0xc0
   1164c:	ldrb	r2, [r2]
   11650:	cmp	r2, #0
   11654:	bne	11698 <__assert_fail@plt+0x42c>
   11658:	mov	r0, r4
   1165c:	bl	10fe4 <free@plt>
   11660:	b	113e0 <__assert_fail@plt+0x174>
   11664:	mov	r2, #16
   11668:	add	r1, sp, #200	; 0xc8
   1166c:	bl	1111c <strtoul@plt>
   11670:	ldr	r2, [sp, #192]	; 0xc0
   11674:	ldr	r3, [pc, #3268]	; 12340 <__assert_fail@plt+0x10d4>
   11678:	ldrb	r2, [r2]
   1167c:	cmp	r2, #0
   11680:	str	r0, [r3, #4]
   11684:	bne	11698 <__assert_fail@plt+0x42c>
   11688:	ldr	r2, [sp, #200]	; 0xc8
   1168c:	ldrb	r2, [r2]
   11690:	cmp	r2, #0
   11694:	beq	11658 <__assert_fail@plt+0x3ec>
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #3076]	; 122a8 <__assert_fail@plt+0x103c>
   116a0:	mov	r0, #0
   116a4:	bl	11020 <dcgettext@plt>
   116a8:	ldr	r3, [sp, #64]	; 0x40
   116ac:	ldr	r2, [pc, #3064]	; 122ac <__assert_fail@plt+0x1040>
   116b0:	str	r3, [sp]
   116b4:	mov	r1, #0
   116b8:	mov	r3, r0
   116bc:	mov	r0, #1
   116c0:	bl	110a4 <error@plt>
   116c4:	mov	r2, #16
   116c8:	add	r1, sp, #192	; 0xc0
   116cc:	mov	r0, r4
   116d0:	bl	1111c <strtoul@plt>
   116d4:	str	r0, [r9, #1116]	; 0x45c
   116d8:	b	11638 <__assert_fail@plt+0x3cc>
   116dc:	ldr	fp, [pc, #2992]	; 12294 <__assert_fail@plt+0x1028>
   116e0:	ldr	lr, [pc, #3016]	; 122b0 <__assert_fail@plt+0x1044>
   116e4:	ldr	ip, [fp, #1120]	; 0x460
   116e8:	ldr	r2, [fp, #4]
   116ec:	ldr	r3, [fp, #1108]	; 0x454
   116f0:	add	r2, ip, r2
   116f4:	ldr	r1, [fp, #1124]	; 0x464
   116f8:	add	r3, r2, r3
   116fc:	ldr	r0, [fp, #1128]	; 0x468
   11700:	add	r3, r3, r1
   11704:	ldr	r7, [fp, #1104]	; 0x450
   11708:	add	r3, r3, r0
   1170c:	add	r3, r3, r7
   11710:	ldr	r7, [fp]
   11714:	ldr	r9, [lr]
   11718:	cmp	r7, r4
   1171c:	addne	r3, r3, #1
   11720:	cmp	r3, #1
   11724:	sub	r3, r6, r9
   11728:	str	r3, [sp, #64]	; 0x40
   1172c:	movgt	r2, #5
   11730:	ldrgt	r1, [pc, #2940]	; 122b4 <__assert_fail@plt+0x1048>
   11734:	bgt	12cd4 <__assert_fail@plt+0x1a68>
   11738:	orrs	r3, r1, r0
   1173c:	beq	11830 <__assert_fail@plt+0x5c4>
   11740:	ldr	r3, [fp, #1112]	; 0x458
   11744:	cmp	r3, #0
   11748:	bne	12ccc <__assert_fail@plt+0x1a60>
   1174c:	ldr	r3, [fp, #1132]	; 0x46c
   11750:	cmp	r3, #0
   11754:	str	r3, [sp, #88]	; 0x58
   11758:	bne	12ccc <__assert_fail@plt+0x1a60>
   1175c:	cmp	r1, #0
   11760:	beq	117c8 <__assert_fail@plt+0x55c>
   11764:	ldr	r3, [sp, #64]	; 0x40
   11768:	cmp	r3, #0
   1176c:	bgt	13414 <__assert_fail@plt+0x21a8>
   11770:	cmp	r0, #0
   11774:	bne	117dc <__assert_fail@plt+0x570>
   11778:	bl	135ac <__assert_fail@plt+0x2340>
   1177c:	subs	r5, r0, #0
   11780:	beq	11824 <__assert_fail@plt+0x5b8>
   11784:	bl	13970 <__assert_fail@plt+0x2704>
   11788:	mov	r4, r0
   1178c:	mov	r0, r5
   11790:	bl	10fe4 <free@plt>
   11794:	cmp	r4, #0
   11798:	mov	r2, #5
   1179c:	beq	13434 <__assert_fail@plt+0x21c8>
   117a0:	ldr	r1, [pc, #2832]	; 122b8 <__assert_fail@plt+0x104c>
   117a4:	mov	r0, #0
   117a8:	bl	11020 <dcgettext@plt>
   117ac:	mov	r1, #0
   117b0:	ldr	r3, [sl]
   117b4:	str	r1, [sp, #88]	; 0x58
   117b8:	mov	r2, r0
   117bc:	mov	r0, r1
   117c0:	bl	110a4 <error@plt>
   117c4:	b	1159c <__assert_fail@plt+0x330>
   117c8:	cmp	r0, #0
   117cc:	beq	11830 <__assert_fail@plt+0x5c4>
   117d0:	ldr	r3, [sp, #64]	; 0x40
   117d4:	cmp	r3, #0
   117d8:	bgt	13414 <__assert_fail@plt+0x21a8>
   117dc:	ldr	r0, [sp, #60]	; 0x3c
   117e0:	bl	13970 <__assert_fail@plt+0x2704>
   117e4:	mov	r2, #5
   117e8:	subs	r4, r0, #0
   117ec:	beq	13460 <__assert_fail@plt+0x21f4>
   117f0:	ldr	r1, [pc, #2756]	; 122bc <__assert_fail@plt+0x1050>
   117f4:	mov	r0, #0
   117f8:	bl	11020 <dcgettext@plt>
   117fc:	mov	r1, #0
   11800:	mov	r2, r0
   11804:	mov	r0, r1
   11808:	bl	110a4 <error@plt>
   1180c:	b	1159c <__assert_fail@plt+0x330>
   11810:	bl	135ac <__assert_fail@plt+0x2340>
   11814:	str	r0, [sp, #60]	; 0x3c
   11818:	ldr	r3, [sp, #60]	; 0x3c
   1181c:	cmp	r3, #0
   11820:	bne	12948 <__assert_fail@plt+0x16dc>
   11824:	mov	r3, #1
   11828:	str	r3, [sp, #88]	; 0x58
   1182c:	b	1159c <__assert_fail@plt+0x330>
   11830:	ldr	r3, [sp, #64]	; 0x40
   11834:	cmp	r3, #0
   11838:	ble	13454 <__assert_fail@plt+0x21e8>
   1183c:	cmp	ip, #0
   11840:	movne	r3, #1
   11844:	strne	r3, [fp, #4]
   11848:	bne	11818 <__assert_fail@plt+0x5ac>
   1184c:	cmp	r2, #0
   11850:	bne	11810 <__assert_fail@plt+0x5a4>
   11854:	ldr	r3, [sp, #64]	; 0x40
   11858:	cmn	r3, #-536870910	; 0xe0000002
   1185c:	bgt	13414 <__assert_fail@plt+0x21a8>
   11860:	ldr	r3, [sp, #64]	; 0x40
   11864:	add	r4, r3, #1
   11868:	lsl	r4, r4, #2
   1186c:	mov	r0, r4
   11870:	bl	110c8 <malloc@plt>
   11874:	subs	r3, r0, #0
   11878:	str	r3, [sp, #92]	; 0x5c
   1187c:	beq	13468 <__assert_fail@plt+0x21fc>
   11880:	add	r4, r5, r9, lsl #2
   11884:	mov	r3, #0
   11888:	sub	r4, r4, #4
   1188c:	ldr	r5, [pc, #2604]	; 122c0 <__assert_fail@plt+0x1054>
   11890:	mov	r7, r3
   11894:	b	118e0 <__assert_fail@plt+0x674>
   11898:	ldrb	r3, [r6, #6]
   1189c:	sub	r3, r3, #48	; 0x30
   118a0:	cmp	r3, #9
   118a4:	addls	r6, r6, #6
   118a8:	bhi	118e0 <__assert_fail@plt+0x674>
   118ac:	mov	r0, r6
   118b0:	mov	r2, #0
   118b4:	add	r1, sp, #200	; 0xc8
   118b8:	bl	1111c <strtoul@plt>
   118bc:	cmp	r0, #0
   118c0:	ble	11914 <__assert_fail@plt+0x6a8>
   118c4:	ldr	r3, [sp, #200]	; 0xc8
   118c8:	ldrb	r3, [r3]
   118cc:	cmp	r3, #0
   118d0:	bne	11914 <__assert_fail@plt+0x6a8>
   118d4:	ldr	r3, [sp, #92]	; 0x5c
   118d8:	str	r0, [r3, r7, lsl #2]
   118dc:	add	r7, r7, #1
   118e0:	ldr	r6, [r4, #4]!
   118e4:	cmp	r6, #0
   118e8:	beq	11920 <__assert_fail@plt+0x6b4>
   118ec:	mov	r2, #6
   118f0:	mov	r1, r6
   118f4:	mov	r0, r5
   118f8:	bl	11248 <strncmp@plt>
   118fc:	cmp	r0, #0
   11900:	beq	11898 <__assert_fail@plt+0x62c>
   11904:	ldrb	r3, [r6]
   11908:	sub	r3, r3, #48	; 0x30
   1190c:	cmp	r3, #9
   11910:	bls	118ac <__assert_fail@plt+0x640>
   11914:	ldr	r3, [pc, #2472]	; 122c4 <__assert_fail@plt+0x1058>
   11918:	ldr	r0, [r3]
   1191c:	bl	1368c <__assert_fail@plt+0x2420>
   11920:	ldr	r5, [pc, #2464]	; 122c8 <__assert_fail@plt+0x105c>
   11924:	ldr	r1, [pc, #2568]	; 12334 <__assert_fail@plt+0x10c8>
   11928:	ldr	r0, [pc, #2460]	; 122cc <__assert_fail@plt+0x1060>
   1192c:	ldr	r2, [r5]
   11930:	str	r7, [sp, #104]	; 0x68
   11934:	bl	110ec <freopen64@plt>
   11938:	cmp	r0, #0
   1193c:	beq	11af4 <__assert_fail@plt+0x888>
   11940:	ldr	r2, [pc, #2440]	; 122d0 <__assert_fail@plt+0x1064>
   11944:	mov	r1, #42	; 0x2a
   11948:	mov	r0, r6
   1194c:	bl	11014 <shmget@plt>
   11950:	cmn	r0, #1
   11954:	mov	r9, r0
   11958:	beq	11af4 <__assert_fail@plt+0x888>
   1195c:	mov	r1, r6
   11960:	mov	r2, #4096	; 0x1000
   11964:	bl	11050 <shmat@plt>
   11968:	cmn	r0, #1
   1196c:	mov	r8, r0
   11970:	beq	132e8 <__assert_fail@plt+0x207c>
   11974:	add	r4, sp, #192	; 0xc0
   11978:	ldr	r7, [pc, #2492]	; 1233c <__assert_fail@plt+0x10d0>
   1197c:	sub	r6, r4, #12
   11980:	add	r3, sp, #208	; 0xd0
   11984:	str	r3, [sp, #60]	; 0x3c
   11988:	add	r0, sp, #2336	; 0x920
   1198c:	ldr	r2, [r5]
   11990:	mov	r1, #256	; 0x100
   11994:	add	r0, r0, #8
   11998:	bl	10ff0 <fgets@plt>
   1199c:	cmp	r0, #0
   119a0:	beq	11a90 <__assert_fail@plt+0x824>
   119a4:	ldr	r3, [sp, #60]	; 0x3c
   119a8:	sub	r1, r4, #4
   119ac:	sub	r0, r3, #8
   119b0:	add	r3, sp, #1312	; 0x520
   119b4:	sub	r2, r4, #8
   119b8:	add	r3, r3, #4
   119bc:	str	r0, [sp, #16]
   119c0:	add	r0, sp, #2336	; 0x920
   119c4:	str	r1, [sp, #12]
   119c8:	str	r2, [sp, #8]
   119cc:	str	r3, [sp]
   119d0:	str	r4, [sp, #4]
   119d4:	mov	r3, r6
   119d8:	add	r2, sp, #176	; 0xb0
   119dc:	mov	r1, r7
   119e0:	add	r0, r0, #8
   119e4:	bl	1120c <sscanf@plt>
   119e8:	cmp	r0, #5
   119ec:	ble	11988 <__assert_fail@plt+0x71c>
   119f0:	add	r0, sp, #2336	; 0x920
   119f4:	mov	r1, #10
   119f8:	add	r0, r0, #8
   119fc:	bl	11134 <strchr@plt>
   11a00:	cmp	r0, #0
   11a04:	movne	r3, #0
   11a08:	strbne	r3, [r0]
   11a0c:	ldrb	sl, [sp, #2344]	; 0x928
   11a10:	cmp	sl, #0
   11a14:	beq	11a48 <__assert_fail@plt+0x7dc>
   11a18:	bl	11104 <__ctype_b_loc@plt>
   11a1c:	add	r3, sp, #2336	; 0x920
   11a20:	add	r3, r3, #8
   11a24:	mov	ip, #63	; 0x3f
   11a28:	ldr	r1, [r0]
   11a2c:	lsl	sl, sl, #1
   11a30:	ldrh	r2, [r1, sl]
   11a34:	tst	r2, #16384	; 0x4000
   11a38:	strbeq	ip, [r3]
   11a3c:	ldrb	sl, [r3, #1]!
   11a40:	cmp	sl, #0
   11a44:	bne	11a2c <__assert_fail@plt+0x7c0>
   11a48:	ldr	r3, [sp, #176]	; 0xb0
   11a4c:	cmp	r8, r3
   11a50:	bcc	11988 <__assert_fail@plt+0x71c>
   11a54:	ldr	r3, [sp, #184]	; 0xb8
   11a58:	cmp	r3, #0
   11a5c:	bne	11988 <__assert_fail@plt+0x71c>
   11a60:	ldrb	r3, [sp, #1319]	; 0x527
   11a64:	cmp	r3, #115	; 0x73
   11a68:	bne	11988 <__assert_fail@plt+0x71c>
   11a6c:	add	r0, sp, #2336	; 0x920
   11a70:	ldr	r1, [pc, #2140]	; 122d4 <__assert_fail@plt+0x1068>
   11a74:	add	r0, r0, #8
   11a78:	bl	10fcc <strstr@plt>
   11a7c:	cmp	r0, #0
   11a80:	beq	11988 <__assert_fail@plt+0x71c>
   11a84:	ldr	r3, [pc, #2228]	; 12340 <__assert_fail@plt+0x10d4>
   11a88:	ldr	r2, [sp, #188]	; 0xbc
   11a8c:	str	r2, [r3]
   11a90:	mov	r0, r8
   11a94:	bl	111a0 <shmdt@plt>
   11a98:	cmp	r0, #0
   11a9c:	beq	11ab4 <__assert_fail@plt+0x848>
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #2092]	; 122d8 <__assert_fail@plt+0x106c>
   11aa8:	mov	r0, #0
   11aac:	bl	11020 <dcgettext@plt>
   11ab0:	bl	1105c <perror@plt>
   11ab4:	mov	r2, #0
   11ab8:	mov	r0, r9
   11abc:	mov	r1, r2
   11ac0:	bl	11098 <shmctl@plt>
   11ac4:	cmp	r0, #0
   11ac8:	beq	11afc <__assert_fail@plt+0x890>
   11acc:	bl	11140 <__errno_location@plt>
   11ad0:	ldr	r3, [r0]
   11ad4:	cmp	r3, #22
   11ad8:	beq	11afc <__assert_fail@plt+0x890>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #2036]	; 122dc <__assert_fail@plt+0x1070>
   11ae4:	mov	r0, #0
   11ae8:	bl	11020 <dcgettext@plt>
   11aec:	bl	1105c <perror@plt>
   11af0:	b	11afc <__assert_fail@plt+0x890>
   11af4:	add	r3, sp, #208	; 0xd0
   11af8:	str	r3, [sp, #60]	; 0x3c
   11afc:	mov	r1, #0
   11b00:	mov	r2, #792	; 0x318
   11b04:	ldr	r0, [sp, #60]	; 0x3c
   11b08:	mov	r4, r1
   11b0c:	bl	11164 <memset@plt>
   11b10:	ldr	r3, [sp, #92]	; 0x5c
   11b14:	ldr	r2, [sp, #104]	; 0x68
   11b18:	mov	r1, r3
   11b1c:	mov	r0, #4416	; 0x1140
   11b20:	str	r4, [r3, r2, lsl #2]
   11b24:	str	r4, [sp, #88]	; 0x58
   11b28:	bl	111f4 <openproc@plt>
   11b2c:	str	r0, [sp, #108]	; 0x6c
   11b30:	ldr	r1, [sp, #60]	; 0x3c
   11b34:	ldr	r0, [sp, #108]	; 0x6c
   11b38:	bl	111e8 <readproc@plt>
   11b3c:	cmp	r0, #0
   11b40:	beq	12c2c <__assert_fail@plt+0x19c0>
   11b44:	mov	r0, #0
   11b48:	ldr	ip, [pc, #1936]	; 122e0 <__assert_fail@plt+0x1074>
   11b4c:	mov	r3, #3
   11b50:	add	sl, sp, #192	; 0xc0
   11b54:	str	r3, [sp]
   11b58:	mov	r2, #512	; 0x200
   11b5c:	sub	r3, sl, #12
   11b60:	str	r0, [sp, #1164]	; 0x48c
   11b64:	str	r0, [sp, #1168]	; 0x490
   11b68:	str	r0, [sp, #1172]	; 0x494
   11b6c:	str	r0, [sp, #1176]	; 0x498
   11b70:	str	r0, [sp, #1180]	; 0x49c
   11b74:	str	r0, [sp, #1184]	; 0x4a0
   11b78:	ldr	r1, [sp, #60]	; 0x3c
   11b7c:	str	r0, [sp, #172]	; 0xac
   11b80:	str	r0, [sp, #176]	; 0xb0
   11b84:	str	r0, [sp, #1156]	; 0x484
   11b88:	str	r0, [sp, #1160]	; 0x488
   11b8c:	ldr	r0, [pc, #1872]	; 122e4 <__assert_fail@plt+0x1078>
   11b90:	str	ip, [sp, #180]	; 0xb4
   11b94:	bl	111c4 <escape_command@plt>
   11b98:	ldr	r3, [pc, #1860]	; 122e4 <__assert_fail@plt+0x1078>
   11b9c:	ldr	r2, [sp, #884]	; 0x374
   11ba0:	ldr	r1, [pc, #1856]	; 122e8 <__assert_fail@plt+0x107c>
   11ba4:	mov	r0, #1
   11ba8:	bl	1117c <__printf_chk@plt>
   11bac:	ldr	r3, [fp, #1104]	; 0x450
   11bb0:	cmp	r3, #0
   11bb4:	bne	11bd0 <__assert_fail@plt+0x964>
   11bb8:	ldr	r3, [fp]
   11bbc:	cmp	r3, #0
   11bc0:	bne	11bd0 <__assert_fail@plt+0x964>
   11bc4:	ldr	r3, [fp, #4]
   11bc8:	cmp	r3, #0
   11bcc:	beq	12fd4 <__assert_fail@plt+0x1d68>
   11bd0:	ldr	r1, [sp, #884]	; 0x374
   11bd4:	ldr	r2, [pc, #1808]	; 122ec <__assert_fail@plt+0x1080>
   11bd8:	mov	r3, #32
   11bdc:	add	r0, sp, #1120	; 0x460
   11be0:	str	r1, [sp, #4]
   11be4:	str	r2, [sp]
   11be8:	mov	r1, r3
   11bec:	mov	r2, #1
   11bf0:	add	r0, r0, #4
   11bf4:	bl	11260 <__snprintf_chk@plt>
   11bf8:	add	r0, sp, #1120	; 0x460
   11bfc:	add	r0, r0, #4
   11c00:	ldr	r1, [pc, #1836]	; 12334 <__assert_fail@plt+0x10c8>
   11c04:	bl	11218 <fopen64@plt>
   11c08:	subs	r6, r0, #0
   11c0c:	moveq	r4, #1
   11c10:	beq	11ea0 <__assert_fail@plt+0xc34>
   11c14:	ldr	r3, [fp]
   11c18:	cmp	r3, #0
   11c1c:	bne	11ebc <__assert_fail@plt+0xc50>
   11c20:	ldr	r3, [fp, #4]
   11c24:	cmp	r3, #0
   11c28:	bne	11ebc <__assert_fail@plt+0xc50>
   11c2c:	ldr	r8, [fp, #1104]	; 0x450
   11c30:	cmp	r8, #0
   11c34:	bne	12a44 <__assert_fail@plt+0x17d8>
   11c38:	str	r8, [sp, #80]	; 0x50
   11c3c:	str	r8, [sp, #72]	; 0x48
   11c40:	str	r8, [sp, #68]	; 0x44
   11c44:	str	r8, [sp, #64]	; 0x40
   11c48:	ldr	r3, [fp, #1108]	; 0x454
   11c4c:	cmp	r3, #0
   11c50:	beq	11c80 <__assert_fail@plt+0xa14>
   11c54:	ldr	r4, [fp, #1112]	; 0x458
   11c58:	cmp	r4, #0
   11c5c:	beq	13158 <__assert_fail@plt+0x1eec>
   11c60:	mov	r3, #9
   11c64:	mov	r4, #5
   11c68:	mov	r5, #16
   11c6c:	mov	r8, #8
   11c70:	str	r3, [sp, #80]	; 0x50
   11c74:	mov	r3, #7
   11c78:	strd	r4, [sp, #68]	; 0x44
   11c7c:	str	r3, [sp, #64]	; 0x40
   11c80:	mov	r1, #0
   11c84:	ldr	r4, [pc, #1844]	; 123c0 <__assert_fail@plt+0x1154>
   11c88:	mov	r2, #0
   11c8c:	mov	r3, #0
   11c90:	mov	r5, r1
   11c94:	strd	r2, [sp, #120]	; 0x78
   11c98:	str	r1, [sp, #100]	; 0x64
   11c9c:	strd	r2, [sp, #128]	; 0x80
   11ca0:	strd	r2, [sp, #112]	; 0x70
   11ca4:	strd	r2, [sp, #144]	; 0x90
   11ca8:	strd	r2, [sp, #136]	; 0x88
   11cac:	strd	r2, [sp, #152]	; 0x98
   11cb0:	str	r1, [sp, #76]	; 0x4c
   11cb4:	str	r1, [sp, #96]	; 0x60
   11cb8:	str	r1, [sp, #84]	; 0x54
   11cbc:	mov	r2, r6
   11cc0:	mov	r1, #1024	; 0x400
   11cc4:	mov	r0, r4
   11cc8:	bl	10ff0 <fgets@plt>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11e14 <__assert_fail@plt+0xba8>
   11cd4:	ldrb	r3, [fp, #80]	; 0x50
   11cd8:	sub	r3, r3, #65	; 0x41
   11cdc:	cmp	r3, #25
   11ce0:	bhi	12a7c <__assert_fail@plt+0x1810>
   11ce4:	ldr	r3, [sp, #60]	; 0x3c
   11ce8:	add	r2, sp, #2336	; 0x920
   11cec:	add	r2, r2, #8
   11cf0:	sub	r3, r3, #8
   11cf4:	ldr	r1, [pc, #1524]	; 122f0 <__assert_fail@plt+0x1084>
   11cf8:	mov	r0, r4
   11cfc:	bl	1120c <sscanf@plt>
   11d00:	cmp	r0, #2
   11d04:	bne	11cbc <__assert_fail@plt+0xa50>
   11d08:	add	r1, sp, #2336	; 0x920
   11d0c:	add	r1, r1, #8
   11d10:	ldr	r0, [pc, #1500]	; 122f4 <__assert_fail@plt+0x1088>
   11d14:	bl	10fd8 <strcmp@plt>
   11d18:	cmp	r0, #0
   11d1c:	beq	12c0c <__assert_fail@plt+0x19a0>
   11d20:	add	r1, sp, #2336	; 0x920
   11d24:	add	r1, r1, #8
   11d28:	ldr	r0, [pc, #1480]	; 122f8 <__assert_fail@plt+0x108c>
   11d2c:	bl	10fd8 <strcmp@plt>
   11d30:	cmp	r0, #0
   11d34:	beq	12cac <__assert_fail@plt+0x1a40>
   11d38:	add	r1, sp, #2336	; 0x920
   11d3c:	add	r1, r1, #8
   11d40:	ldr	r0, [pc, #1460]	; 122fc <__assert_fail@plt+0x1090>
   11d44:	bl	10fd8 <strcmp@plt>
   11d48:	cmp	r0, #0
   11d4c:	beq	13094 <__assert_fail@plt+0x1e28>
   11d50:	add	r1, sp, #2336	; 0x920
   11d54:	add	r1, r1, #8
   11d58:	ldr	r0, [pc, #1440]	; 12300 <__assert_fail@plt+0x1094>
   11d5c:	bl	10fd8 <strcmp@plt>
   11d60:	cmp	r0, #0
   11d64:	bne	11cbc <__assert_fail@plt+0xa50>
   11d68:	ldr	ip, [sp, #100]	; 0x64
   11d6c:	cmp	ip, #0
   11d70:	beq	11ddc <__assert_fail@plt+0xb70>
   11d74:	ldrd	r0, [sp, #144]	; 0x90
   11d78:	ldrd	r2, [sp, #136]	; 0x88
   11d7c:	lsr	r5, r5, #10
   11d80:	str	r5, [sp, #4]
   11d84:	adds	r2, r2, r0
   11d88:	adc	r3, r3, r1
   11d8c:	add	r1, sp, #1168	; 0x490
   11d90:	strd	r2, [sp, #32]
   11d94:	ldr	r3, [sp, #80]	; 0x50
   11d98:	sub	r1, r1, #12
   11d9c:	str	r3, [sp, #40]	; 0x28
   11da0:	ldr	r3, [sp, #72]	; 0x48
   11da4:	str	r1, [sp, #44]	; 0x2c
   11da8:	str	r3, [sp, #24]
   11dac:	ldrd	r2, [sp, #152]	; 0x98
   11db0:	str	ip, [sp, #48]	; 0x30
   11db4:	ldr	r1, [pc, #1352]	; 12304 <__assert_fail@plt+0x1098>
   11db8:	strd	r2, [sp, #16]
   11dbc:	ldr	r3, [sp, #68]	; 0x44
   11dc0:	mov	r2, r8
   11dc4:	str	r3, [sp, #8]
   11dc8:	ldr	r3, [sp, #64]	; 0x40
   11dcc:	mov	r0, #1
   11dd0:	str	r3, [sp]
   11dd4:	ldr	r3, [sp, #172]	; 0xac
   11dd8:	bl	1117c <__printf_chk@plt>
   11ddc:	mov	r3, #0
   11de0:	mov	r0, #0
   11de4:	mov	r1, #0
   11de8:	mov	r2, r0
   11dec:	mov	r5, r3
   11df0:	str	r3, [sp, #100]	; 0x64
   11df4:	str	r3, [sp, #176]	; 0xb0
   11df8:	str	r3, [sp, #172]	; 0xac
   11dfc:	strb	r3, [sp, #1156]	; 0x484
   11e00:	mov	r3, r1
   11e04:	strd	r0, [sp, #144]	; 0x90
   11e08:	strd	r2, [sp, #136]	; 0x88
   11e0c:	strd	r2, [sp, #152]	; 0x98
   11e10:	b	11cbc <__assert_fail@plt+0xa50>
   11e14:	mov	r0, r6
   11e18:	bl	111ac <fclose@plt>
   11e1c:	ldr	r4, [fp, #1112]	; 0x458
   11e20:	cmp	r4, #0
   11e24:	bne	11e9c <__assert_fail@plt+0xc30>
   11e28:	ldr	r3, [fp, #1104]	; 0x450
   11e2c:	cmp	r3, #0
   11e30:	bne	131e0 <__assert_fail@plt+0x1f74>
   11e34:	ldr	r3, [fp, #1108]	; 0x454
   11e38:	ldr	r2, [sp, #96]	; 0x60
   11e3c:	cmp	r3, #0
   11e40:	ldr	r3, [sp, #76]	; 0x4c
   11e44:	add	r5, r3, r2
   11e48:	beq	132bc <__assert_fail@plt+0x2050>
   11e4c:	mov	r2, #5
   11e50:	ldr	r1, [pc, #1200]	; 12308 <__assert_fail@plt+0x109c>
   11e54:	mov	r0, #0
   11e58:	bl	11020 <dcgettext@plt>
   11e5c:	ldr	r3, [sp, #84]	; 0x54
   11e60:	add	r2, r5, r3
   11e64:	lsr	r1, r3, #10
   11e68:	ldr	r3, [sp, #76]	; 0x4c
   11e6c:	str	r1, [sp]
   11e70:	lsr	r2, r2, #10
   11e74:	lsr	r3, r3, #10
   11e78:	mov	r1, r0
   11e7c:	mov	r0, #1
   11e80:	bl	1117c <__printf_chk@plt>
   11e84:	ldr	r3, [fp, #1104]	; 0x450
   11e88:	cmp	r3, #0
   11e8c:	bne	11e9c <__assert_fail@plt+0xc30>
   11e90:	ldr	r3, [fp, #1108]	; 0x454
   11e94:	cmp	r3, #0
   11e98:	beq	132bc <__assert_fail@plt+0x2050>
   11e9c:	mov	r4, #0
   11ea0:	ldr	r3, [sp, #88]	; 0x58
   11ea4:	orr	r3, r3, r4
   11ea8:	str	r3, [sp, #88]	; 0x58
   11eac:	ldr	r3, [sp, #104]	; 0x68
   11eb0:	sub	r3, r3, #1
   11eb4:	str	r3, [sp, #104]	; 0x68
   11eb8:	b	11b30 <__assert_fail@plt+0x8c4>
   11ebc:	mov	r2, r6
   11ec0:	mov	r1, #1024	; 0x400
   11ec4:	ldr	r0, [pc, #1268]	; 123c0 <__assert_fail@plt+0x1154>
   11ec8:	bl	10ff0 <fgets@plt>
   11ecc:	cmp	r0, #0
   11ed0:	beq	133d0 <__assert_fail@plt+0x2164>
   11ed4:	mov	r3, #0
   11ed8:	ldr	r8, [pc, #1068]	; 1230c <__assert_fail@plt+0x10a0>
   11edc:	ldr	r5, [pc, #1244]	; 123c0 <__assert_fail@plt+0x1154>
   11ee0:	str	r3, [sp, #96]	; 0x60
   11ee4:	str	r3, [sp, #100]	; 0x64
   11ee8:	str	r3, [sp, #80]	; 0x50
   11eec:	str	r3, [sp, #76]	; 0x4c
   11ef0:	str	r3, [sp, #72]	; 0x48
   11ef4:	str	r3, [sp, #68]	; 0x44
   11ef8:	str	r3, [sp, #64]	; 0x40
   11efc:	mov	r7, #2
   11f00:	add	r3, sp, #1312	; 0x520
   11f04:	add	r3, r3, #4
   11f08:	str	r3, [sp, #84]	; 0x54
   11f0c:	ldr	r3, [sp, #84]	; 0x54
   11f10:	add	r2, sp, #1024	; 0x400
   11f14:	str	r3, [sp, #16]
   11f18:	add	r3, sp, #1088	; 0x440
   11f1c:	add	r3, r3, #12
   11f20:	str	r3, [sp, #12]
   11f24:	add	r3, sp, #1248	; 0x4e0
   11f28:	add	r3, r3, #4
   11f2c:	str	r3, [sp, #8]
   11f30:	add	r3, sp, #1072	; 0x430
   11f34:	add	r3, r3, #4
   11f38:	str	r3, [sp, #4]
   11f3c:	add	r3, sp, #1184	; 0x4a0
   11f40:	add	r3, r3, #4
   11f44:	str	r3, [sp]
   11f48:	add	r3, sp, #1040	; 0x410
   11f4c:	mov	r4, #0
   11f50:	add	r3, r3, #12
   11f54:	add	r2, r2, #4
   11f58:	ldr	r1, [pc, #944]	; 12310 <__assert_fail@plt+0x10a4>
   11f5c:	mov	r0, r5
   11f60:	strb	r4, [sp, #1316]	; 0x524
   11f64:	bl	1120c <sscanf@plt>
   11f68:	cmp	r0, #5
   11f6c:	bgt	11f98 <__assert_fail@plt+0xd2c>
   11f70:	b	12cec <__assert_fail@plt+0x1a80>
   11f74:	mov	r2, r6
   11f78:	mov	r1, #1024	; 0x400
   11f7c:	mov	r0, r5
   11f80:	bl	10ff0 <fgets@plt>
   11f84:	cmp	r0, #0
   11f88:	beq	12cec <__assert_fail@plt+0x1a80>
   11f8c:	ldrb	r3, [fp, #80]	; 0x50
   11f90:	cmp	r3, #0
   11f94:	beq	12cec <__assert_fail@plt+0x1a80>
   11f98:	mov	r0, r5
   11f9c:	bl	11128 <strlen@plt>
   11fa0:	add	r0, fp, r0
   11fa4:	ldrb	r3, [r0, #79]	; 0x4f
   11fa8:	cmp	r3, #10
   11fac:	strb	r3, [sp, #200]	; 0xc8
   11fb0:	bne	11f74 <__assert_fail@plt+0xd08>
   11fb4:	add	r0, sp, #1024	; 0x400
   11fb8:	add	r0, r0, #4
   11fbc:	bl	11128 <strlen@plt>
   11fc0:	ldr	r3, [sp, #64]	; 0x40
   11fc4:	cmp	r3, r0
   11fc8:	movcc	r3, r0
   11fcc:	add	r0, sp, #1184	; 0x4a0
   11fd0:	add	r0, r0, #4
   11fd4:	str	r3, [sp, #64]	; 0x40
   11fd8:	bl	11128 <strlen@plt>
   11fdc:	ldr	r3, [sp, #68]	; 0x44
   11fe0:	cmp	r3, r0
   11fe4:	movcc	r3, r0
   11fe8:	add	r0, sp, #1072	; 0x430
   11fec:	add	r0, r0, #4
   11ff0:	str	r3, [sp, #68]	; 0x44
   11ff4:	bl	11128 <strlen@plt>
   11ff8:	ldr	r3, [sp, #72]	; 0x48
   11ffc:	cmp	r3, r0
   12000:	movcc	r3, r0
   12004:	add	r0, sp, #1248	; 0x4e0
   12008:	add	r0, r0, #4
   1200c:	str	r3, [sp, #72]	; 0x48
   12010:	bl	11128 <strlen@plt>
   12014:	ldr	r3, [sp, #76]	; 0x4c
   12018:	cmp	r3, r0
   1201c:	movcc	r3, r0
   12020:	add	r0, sp, #1088	; 0x440
   12024:	add	r0, r0, #12
   12028:	str	r3, [sp, #76]	; 0x4c
   1202c:	bl	11128 <strlen@plt>
   12030:	ldr	r3, [sp, #80]	; 0x50
   12034:	mov	r2, r6
   12038:	mov	r1, #1024	; 0x400
   1203c:	cmp	r3, r0
   12040:	movcc	r3, r0
   12044:	mov	r0, r5
   12048:	str	r3, [sp, #80]	; 0x50
   1204c:	bl	10ff0 <fgets@plt>
   12050:	subs	r4, r0, #0
   12054:	moveq	r0, r4
   12058:	beq	12080 <__assert_fail@plt+0xe14>
   1205c:	ldr	r3, [sp, #60]	; 0x3c
   12060:	add	r2, sp, #1216	; 0x4c0
   12064:	sub	r3, r3, #8
   12068:	str	r3, [sp]
   1206c:	add	r2, r2, #4
   12070:	add	r3, sp, #1004	; 0x3ec
   12074:	ldr	r1, [pc, #664]	; 12314 <__assert_fail@plt+0x10a8>
   12078:	mov	r0, r5
   1207c:	bl	1120c <sscanf@plt>
   12080:	ldr	r3, [fp, #1652]	; 0x674
   12084:	str	r3, [fp, #1648]	; 0x670
   12088:	cmp	r4, #0
   1208c:	sub	sl, r0, #2
   12090:	clz	sl, sl
   12094:	lsr	sl, sl, #5
   12098:	moveq	sl, #0
   1209c:	cmp	sl, #0
   120a0:	beq	123d4 <__assert_fail@plt+0x1168>
   120a4:	add	r0, sp, #1216	; 0x4c0
   120a8:	add	r0, r0, #4
   120ac:	bl	13cfc <__assert_fail@plt+0x2a90>
   120b0:	cmp	r0, #0
   120b4:	beq	12110 <__assert_fail@plt+0xea4>
   120b8:	ldr	r4, [fp, #1648]	; 0x670
   120bc:	cmp	r4, #0
   120c0:	beq	12154 <__assert_fail@plt+0xee8>
   120c4:	add	r1, sp, #1216	; 0x4c0
   120c8:	add	r1, r1, #4
   120cc:	mov	r0, r4
   120d0:	bl	10fd8 <strcmp@plt>
   120d4:	cmp	r0, #0
   120d8:	bne	132f4 <__assert_fail@plt+0x2088>
   120dc:	add	r9, r4, #32
   120e0:	add	r1, sp, #1004	; 0x3ec
   120e4:	mov	r2, #21
   120e8:	mov	r0, r9
   120ec:	bl	11080 <__strcpy_chk@plt>
   120f0:	add	r0, sp, #1004	; 0x3ec
   120f4:	add	r2, r4, #56	; 0x38
   120f8:	mov	r1, r8
   120fc:	bl	1120c <sscanf@plt>
   12100:	cmp	r7, #2
   12104:	beq	12408 <__assert_fail@plt+0x119c>
   12108:	ldr	r3, [r4, #68]	; 0x44
   1210c:	str	r3, [fp, #1648]	; 0x670
   12110:	mov	r2, r6
   12114:	mov	r1, #1024	; 0x400
   12118:	mov	r0, r5
   1211c:	bl	10ff0 <fgets@plt>
   12120:	subs	r4, r0, #0
   12124:	moveq	r0, r4
   12128:	beq	12088 <__assert_fail@plt+0xe1c>
   1212c:	ldr	r3, [sp, #60]	; 0x3c
   12130:	add	r2, sp, #1216	; 0x4c0
   12134:	sub	r3, r3, #8
   12138:	str	r3, [sp]
   1213c:	add	r2, r2, #4
   12140:	add	r3, sp, #1004	; 0x3ec
   12144:	ldr	r1, [pc, #456]	; 12314 <__assert_fail@plt+0x10a8>
   12148:	mov	r0, r5
   1214c:	bl	1120c <sscanf@plt>
   12150:	b	12088 <__assert_fail@plt+0xe1c>
   12154:	cmp	r7, #2
   12158:	bne	133a8 <__assert_fail@plt+0x213c>
   1215c:	mov	r1, #72	; 0x48
   12160:	mov	r0, #1
   12164:	bl	10fc0 <calloc@plt>
   12168:	ldr	r3, [fp, #1652]	; 0x674
   1216c:	cmp	r3, #0
   12170:	ldr	r3, [fp, #1656]	; 0x678
   12174:	mov	r4, r0
   12178:	str	r0, [fp, #1648]	; 0x670
   1217c:	strne	r0, [r3, #68]	; 0x44
   12180:	beq	12210 <__assert_fail@plt+0xfa4>
   12184:	add	r1, sp, #1216	; 0x4c0
   12188:	mov	r2, #32
   1218c:	add	r1, r1, #4
   12190:	mov	r0, r4
   12194:	str	r4, [fp, #1656]	; 0x678
   12198:	bl	11080 <__strcpy_chk@plt>
   1219c:	ldr	sl, [fp, #1112]	; 0x458
   121a0:	cmp	sl, #0
   121a4:	movne	r3, #0
   121a8:	strne	r3, [r4, #64]	; 0x40
   121ac:	bne	121c0 <__assert_fail@plt+0xf54>
   121b0:	add	r0, sp, #1216	; 0x4c0
   121b4:	add	r0, r0, #4
   121b8:	bl	11128 <strlen@plt>
   121bc:	str	r0, [r4, #64]	; 0x40
   121c0:	add	r9, r4, #32
   121c4:	add	r1, sp, #1004	; 0x3ec
   121c8:	mov	r2, #21
   121cc:	mov	r0, r9
   121d0:	bl	11080 <__strcpy_chk@plt>
   121d4:	add	r0, sp, #1004	; 0x3ec
   121d8:	add	r2, r4, #56	; 0x38
   121dc:	mov	r1, r8
   121e0:	bl	1120c <sscanf@plt>
   121e4:	ldrd	r2, [r4, #56]	; 0x38
   121e8:	cmp	sl, #0
   121ec:	add	r3, r3, r2
   121f0:	str	r3, [r4, #60]	; 0x3c
   121f4:	beq	12108 <__assert_fail@plt+0xe9c>
   121f8:	mov	r0, r9
   121fc:	bl	11128 <strlen@plt>
   12200:	ldr	r3, [r4, #64]	; 0x40
   12204:	cmp	r0, r3
   12208:	strgt	r0, [r4, #64]	; 0x40
   1220c:	b	12108 <__assert_fail@plt+0xe9c>
   12210:	cmp	r3, #0
   12214:	bne	133bc <__assert_fail@plt+0x2150>
   12218:	str	r0, [fp, #1652]	; 0x674
   1221c:	b	12184 <__assert_fail@plt+0xf18>
   12220:	strdeq	r5, [r2], -r0
   12224:	andeq	r6, r2, r0, lsl r0
   12228:	andeq	r6, r2, r4, lsl r0
   1222c:	andeq	r4, r1, r4, ror sp
   12230:	andeq	r4, r1, ip, ror #16
   12234:	andeq	r4, r1, r0, lsl #17
   12238:	andeq	r4, r1, ip, lsl #17
   1223c:	ldrdeq	r6, [r2], -r4
   12240:	muleq	r1, r4, r8
   12244:			; <UNDEFINED> instruction: 0x000266b8
   12248:	muleq	r1, ip, r8
   1224c:	andeq	r6, r2, ip, asr #13
   12250:	andeq	r4, r1, r4, lsr #17
   12254:			; <UNDEFINED> instruction: 0x000266bc
   12258:	andeq	r4, r1, ip, lsr #17
   1225c:	ldrdeq	r6, [r2], -r0
   12260:			; <UNDEFINED> instruction: 0x000148b4
   12264:	andeq	r6, r2, r0, asr #13
   12268:			; <UNDEFINED> instruction: 0x000148bc
   1226c:	ldrdeq	r6, [r2], -r8
   12270:	andeq	r4, r1, r4, asr #17
   12274:	andeq	r6, r2, r8, asr #13
   12278:	andeq	r4, r1, ip, asr #17
   1227c:			; <UNDEFINED> instruction: 0x000266b4
   12280:	andeq	r4, r1, r8, lsl #16
   12284:	andeq	r6, r2, r4, asr #13
   12288:	ldrdeq	r3, [r1], -r4
   1228c:	andeq	r4, r1, r0, ror #1
   12290:	andeq	r4, r1, ip, asr r9
   12294:	andeq	r6, r2, r8, lsr r0
   12298:	andeq	r6, r2, r0, lsr r0
   1229c:	ldrdeq	r4, [r1], -r0
   122a0:	andeq	r4, r1, ip, lsr r9
   122a4:	andeq	r4, r1, r8, asr #18
   122a8:	andeq	r4, r1, r4, lsl r9
   122ac:	andeq	r4, r1, r0, lsr r9
   122b0:	andeq	r6, r2, r8, lsl r0
   122b4:	andeq	r4, r1, r0, ror r9
   122b8:	andeq	r4, r1, ip, asr #20
   122bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   122c0:	andeq	r4, r1, r0, asr #23
   122c4:	andeq	r6, r2, r0, lsr #32
   122c8:	andeq	r6, r2, r8, lsr #32
   122cc:	andeq	r4, r1, r8, asr #23
   122d0:			; <UNDEFINED> instruction: 0x000003b6
   122d4:	andeq	r4, r1, r8, lsr r8
   122d8:	strdeq	r4, [r1], -r8
   122dc:	andeq	r4, r1, r0, lsl ip
   122e0:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   122e4:	andeq	r6, r2, r8, lsr #9
   122e8:	andeq	r4, r1, r8, lsr #24
   122ec:	andeq	r4, r1, r4, lsr ip
   122f0:	andeq	r4, r1, r8, ror sp
   122f4:	andeq	r4, r1, r8, lsl #27
   122f8:	strdeq	r4, [r1], -r0
   122fc:	andeq	r4, r1, r0, lsl #16
   12300:	andeq	r4, r1, ip, lsl #27
   12304:	muleq	r1, r4, sp
   12308:	andeq	r4, r1, r0, lsr lr
   1230c:	andeq	r4, r1, r0, asr #26
   12310:	andeq	r4, r1, r4, asr ip
   12314:			; <UNDEFINED> instruction: 0x00014cb8
   12318:	andeq	r4, r1, r4, asr #26
   1231c:	andeq	r4, r1, r8, asr sp
   12320:	andeq	r4, r1, r8, ror #26
   12324:	andeq	r4, r1, r0, ror sp
   12328:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1232c:	andeq	r4, r1, ip, asr sp
   12330:	andeq	r4, r1, r4, ror #26
   12334:			; <UNDEFINED> instruction: 0x000145b8
   12338:	andeq	r6, r2, ip, lsr #32
   1233c:	ldrdeq	r4, [r1], -r8
   12340:	andeq	r6, r2, r8
   12344:	andeq	r6, r2, r7, lsl #1
   12348:	andeq	r4, r1, r0, ror #27
   1234c:	andeq	r4, r1, ip, lsr #19
   12350:	muleq	r1, r8, ip
   12354:	andeq	r4, r1, r0, lsr r8
   12358:	andeq	r6, r2, r0, asr #13
   1235c:	ldrdeq	r6, [r2], -r0
   12360:	andeq	r4, r1, r0, ror fp
   12364:	andeq	r4, r1, ip, lsl #23
   12368:	andeq	r4, r1, r4, ror #22
   1236c:	andeq	r4, r1, ip, asr fp
   12370:	andeq	r4, r1, r0, ror #22
   12374:	ldrdeq	r4, [r1], -ip
   12378:	strdeq	r4, [r1], -r0
   1237c:	andeq	r4, r1, r0, lsr fp
   12380:	andeq	r4, r1, r4, asr #24
   12384:	andeq	r4, r1, r8, lsl lr
   12388:			; <UNDEFINED> instruction: 0x00014db4
   1238c:			; <UNDEFINED> instruction: 0x00014abc
   12390:	andeq	r0, r0, r1, lsl #8
   12394:	andeq	r6, r2, r8, asr #13
   12398:			; <UNDEFINED> instruction: 0x000266b8
   1239c:	andeq	r6, r2, ip, asr #13
   123a0:			; <UNDEFINED> instruction: 0x000266bc
   123a4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   123a8:	andeq	r4, r1, r0, lsl #28
   123ac:	andeq	r4, r1, r8, lsl #28
   123b0:	andeq	r4, r1, r4, lsl lr
   123b4:	andeq	r4, r1, ip, lsl lr
   123b8:	andeq	r4, r1, ip, ror #28
   123bc:	andeq	r4, r1, r0, lsl #26
   123c0:	andeq	r6, r2, r8, lsl #1
   123c4:	andeq	r4, r1, r0, lsr sp
   123c8:	ldrdeq	r6, [r2], -r4
   123cc:	ldrdeq	r6, [r2], -r8
   123d0:			; <UNDEFINED> instruction: 0x000266b4
   123d4:	cmp	r4, #0
   123d8:	beq	126bc <__assert_fail@plt+0x1450>
   123dc:	add	r2, sp, #2336	; 0x920
   123e0:	add	r2, r2, #8
   123e4:	ldr	r1, [pc, #-212]	; 12318 <__assert_fail@plt+0x10ac>
   123e8:	mov	r0, r5
   123ec:	bl	1120c <sscanf@plt>
   123f0:	cmp	r0, #1
   123f4:	beq	1274c <__assert_fail@plt+0x14e0>
   123f8:	cmp	r7, #2
   123fc:	bne	12410 <__assert_fail@plt+0x11a4>
   12400:	mov	r7, #2
   12404:	b	11f0c <__assert_fail@plt+0xca0>
   12408:	ldr	sl, [fp, #1112]	; 0x458
   1240c:	b	121e4 <__assert_fail@plt+0xf78>
   12410:	cmp	r7, #0
   12414:	beq	12424 <__assert_fail@plt+0x11b8>
   12418:	ldr	r3, [fp, #1112]	; 0x458
   1241c:	cmp	r3, #0
   12420:	beq	1286c <__assert_fail@plt+0x1600>
   12424:	add	r3, sp, #1024	; 0x400
   12428:	add	r3, r3, #4
   1242c:	ldr	r2, [sp, #64]	; 0x40
   12430:	ldr	r1, [pc, #-284]	; 1231c <__assert_fail@plt+0x10b0>
   12434:	mov	r0, #1
   12438:	bl	1117c <__printf_chk@plt>
   1243c:	ldr	r3, [pc, #-232]	; 1235c <__assert_fail@plt+0x10f0>
   12440:	ldr	r0, [r3]
   12444:	bl	13cfc <__assert_fail@plt+0x2a90>
   12448:	cmp	r0, #0
   1244c:	bne	1283c <__assert_fail@plt+0x15d0>
   12450:	ldr	r3, [pc, #-192]	; 12398 <__assert_fail@plt+0x112c>
   12454:	ldr	r0, [r3]
   12458:	bl	13cfc <__assert_fail@plt+0x2a90>
   1245c:	cmp	r0, #0
   12460:	bne	12820 <__assert_fail@plt+0x15b4>
   12464:	ldr	r3, [pc, #-208]	; 1239c <__assert_fail@plt+0x1130>
   12468:	ldr	r0, [r3]
   1246c:	bl	13cfc <__assert_fail@plt+0x2a90>
   12470:	cmp	r0, #0
   12474:	bne	12804 <__assert_fail@plt+0x1598>
   12478:	ldr	r3, [pc, #-296]	; 12358 <__assert_fail@plt+0x10ec>
   1247c:	ldr	r0, [r3]
   12480:	bl	13cfc <__assert_fail@plt+0x2a90>
   12484:	cmp	r0, #0
   12488:	bne	127e8 <__assert_fail@plt+0x157c>
   1248c:	ldr	r2, [fp, #1652]	; 0x674
   12490:	cmp	r2, #0
   12494:	str	r2, [fp, #1648]	; 0x670
   12498:	beq	124c8 <__assert_fail@plt+0x125c>
   1249c:	ldr	r7, [pc, #-376]	; 1232c <__assert_fail@plt+0x10c0>
   124a0:	add	r3, r2, #32
   124a4:	mov	r1, r7
   124a8:	ldr	r2, [r2, #64]	; 0x40
   124ac:	mov	r0, #1
   124b0:	bl	1117c <__printf_chk@plt>
   124b4:	ldr	r3, [fp, #1648]	; 0x670
   124b8:	ldr	r2, [r3, #68]	; 0x44
   124bc:	cmp	r2, #0
   124c0:	str	r2, [fp, #1648]	; 0x670
   124c4:	bne	124a0 <__assert_fail@plt+0x1234>
   124c8:	ldr	r3, [sp, #96]	; 0x60
   124cc:	cmp	r3, #0
   124d0:	bne	127bc <__assert_fail@plt+0x1550>
   124d4:	ldr	r3, [pc, #-316]	; 123a0 <__assert_fail@plt+0x1134>
   124d8:	ldr	r0, [r3]
   124dc:	bl	13cfc <__assert_fail@plt+0x2a90>
   124e0:	cmp	r0, #0
   124e4:	beq	12518 <__assert_fail@plt+0x12ac>
   124e8:	ldr	r3, [fp, #1132]	; 0x46c
   124ec:	cmp	r3, #0
   124f0:	bne	12858 <__assert_fail@plt+0x15ec>
   124f4:	mov	r1, #47	; 0x2f
   124f8:	ldr	r0, [sp, #84]	; 0x54
   124fc:	bl	111dc <strrchr@plt>
   12500:	subs	r2, r0, #0
   12504:	beq	12858 <__assert_fail@plt+0x15ec>
   12508:	add	r2, r2, #1
   1250c:	ldr	r1, [pc, #-484]	; 12330 <__assert_fail@plt+0x10c4>
   12510:	mov	r0, #1
   12514:	bl	1117c <__printf_chk@plt>
   12518:	mov	r0, #10
   1251c:	bl	11170 <putchar@plt>
   12520:	mov	r7, #0
   12524:	cmp	r4, #0
   12528:	bne	11f0c <__assert_fail@plt+0xca0>
   1252c:	ldr	r5, [fp, #1112]	; 0x458
   12530:	cmp	r5, #0
   12534:	bne	126ac <__assert_fail@plt+0x1440>
   12538:	ldr	r3, [fp, #1652]	; 0x674
   1253c:	cmp	r3, #0
   12540:	beq	126ac <__assert_fail@plt+0x1440>
   12544:	ldr	r3, [pc, #-496]	; 1235c <__assert_fail@plt+0x10f0>
   12548:	mov	r8, #0
   1254c:	ldr	r7, [pc, #-540]	; 12338 <__assert_fail@plt+0x10cc>
   12550:	ldr	r0, [r3]
   12554:	bl	13cfc <__assert_fail@plt+0x2a90>
   12558:	ldr	r3, [sp, #64]	; 0x40
   1255c:	add	r4, r3, #1
   12560:	cmp	r0, #0
   12564:	ldrne	r3, [sp, #68]	; 0x44
   12568:	addne	r3, r3, #1
   1256c:	addne	r4, r4, r3
   12570:	ldr	r3, [pc, #-480]	; 12398 <__assert_fail@plt+0x112c>
   12574:	ldr	r0, [r3]
   12578:	bl	13cfc <__assert_fail@plt+0x2a90>
   1257c:	cmp	r0, #0
   12580:	ldrne	r3, [sp, #72]	; 0x48
   12584:	addne	r3, r3, #1
   12588:	addne	r4, r4, r3
   1258c:	ldr	r3, [pc, #-504]	; 1239c <__assert_fail@plt+0x1130>
   12590:	ldr	r0, [r3]
   12594:	bl	13cfc <__assert_fail@plt+0x2a90>
   12598:	cmp	r0, #0
   1259c:	ldrne	r3, [sp, #76]	; 0x4c
   125a0:	addne	r3, r3, #1
   125a4:	addne	r4, r4, r3
   125a8:	ldr	r3, [pc, #-600]	; 12358 <__assert_fail@plt+0x10ec>
   125ac:	ldr	r0, [r3]
   125b0:	bl	13cfc <__assert_fail@plt+0x2a90>
   125b4:	cmp	r0, #0
   125b8:	ldrne	r3, [sp, #80]	; 0x50
   125bc:	addne	r3, r3, #1
   125c0:	addne	r4, r4, r3
   125c4:	b	125d4 <__assert_fail@plt+0x1368>
   125c8:	mov	r0, #32
   125cc:	bl	11068 <_IO_putc@plt>
   125d0:	add	r8, r8, #1
   125d4:	cmp	r8, r4
   125d8:	ldr	r1, [r7]
   125dc:	blt	125c8 <__assert_fail@plt+0x135c>
   125e0:	ldr	r3, [fp, #1652]	; 0x674
   125e4:	str	r3, [fp, #1648]	; 0x670
   125e8:	ldr	r3, [fp, #1648]	; 0x670
   125ec:	cmp	r3, #0
   125f0:	beq	12634 <__assert_fail@plt+0x13c8>
   125f4:	mov	r8, #0
   125f8:	b	12608 <__assert_fail@plt+0x139c>
   125fc:	mov	r0, #61	; 0x3d
   12600:	add	r8, r8, #1
   12604:	bl	11068 <_IO_putc@plt>
   12608:	ldr	r3, [fp, #1648]	; 0x670
   1260c:	ldr	r1, [r7]
   12610:	ldr	r3, [r3, #64]	; 0x40
   12614:	cmp	r8, r3
   12618:	blt	125fc <__assert_fail@plt+0x1390>
   1261c:	mov	r0, #32
   12620:	bl	11068 <_IO_putc@plt>
   12624:	ldr	r3, [fp, #1648]	; 0x670
   12628:	ldr	r3, [r3, #68]	; 0x44
   1262c:	str	r3, [fp, #1648]	; 0x670
   12630:	b	125e8 <__assert_fail@plt+0x137c>
   12634:	ldr	r1, [r7]
   12638:	mov	r0, #10
   1263c:	bl	11068 <_IO_putc@plt>
   12640:	b	12654 <__assert_fail@plt+0x13e8>
   12644:	ldr	r1, [r7]
   12648:	mov	r0, #32
   1264c:	bl	11068 <_IO_putc@plt>
   12650:	add	r5, r5, #1
   12654:	cmp	r4, r5
   12658:	bgt	12644 <__assert_fail@plt+0x13d8>
   1265c:	ldr	r3, [fp, #1652]	; 0x674
   12660:	ldr	r4, [pc, #-840]	; 12320 <__assert_fail@plt+0x10b4>
   12664:	str	r3, [fp, #1648]	; 0x670
   12668:	b	1268c <__assert_fail@plt+0x1420>
   1266c:	ldr	r3, [r2, #60]	; 0x3c
   12670:	mov	r1, r4
   12674:	ldr	r2, [r2, #64]	; 0x40
   12678:	mov	r0, #1
   1267c:	bl	1117c <__printf_chk@plt>
   12680:	ldr	r3, [fp, #1648]	; 0x670
   12684:	ldr	r3, [r3, #68]	; 0x44
   12688:	str	r3, [fp, #1648]	; 0x670
   1268c:	ldr	r2, [fp, #1648]	; 0x670
   12690:	cmp	r2, #0
   12694:	bne	1266c <__assert_fail@plt+0x1400>
   12698:	ldr	r3, [r7]
   1269c:	mov	r2, #4
   126a0:	mov	r1, #1
   126a4:	ldr	r0, [pc, #-904]	; 12324 <__assert_fail@plt+0x10b8>
   126a8:	bl	11074 <fwrite@plt>
   126ac:	mov	r0, r6
   126b0:	bl	111ac <fclose@plt>
   126b4:	mov	r4, #0
   126b8:	b	11ea0 <__assert_fail@plt+0xc34>
   126bc:	cmp	r7, #2
   126c0:	bne	12410 <__assert_fail@plt+0x11a4>
   126c4:	mov	r2, #0
   126c8:	mov	r1, r2
   126cc:	mov	r0, r6
   126d0:	bl	11230 <fseek@plt>
   126d4:	mov	r2, r6
   126d8:	mov	r1, #1024	; 0x400
   126dc:	mov	r0, r5
   126e0:	bl	10ff0 <fgets@plt>
   126e4:	ldr	r3, [fp, #1112]	; 0x458
   126e8:	cmp	r3, #0
   126ec:	mov	r4, r0
   126f0:	ldreq	r0, [fp, #1652]	; 0x674
   126f4:	streq	r0, [fp, #1648]	; 0x670
   126f8:	beq	12718 <__assert_fail@plt+0x14ac>
   126fc:	mov	r7, #1
   12700:	b	12524 <__assert_fail@plt+0x12b8>
   12704:	ldr	r3, [r0, #64]	; 0x40
   12708:	mov	sl, #1
   1270c:	cmp	r3, r1
   12710:	strlt	r1, [r0, #64]	; 0x40
   12714:	ldr	r0, [r0, #68]	; 0x44
   12718:	cmp	r0, #0
   1271c:	beq	12930 <__assert_fail@plt+0x16c4>
   12720:	ldr	r2, [r0, #60]	; 0x3c
   12724:	cmp	r2, #0
   12728:	moveq	r1, #1
   1272c:	movne	r1, #0
   12730:	beq	12704 <__assert_fail@plt+0x1498>
   12734:	ldr	r3, [pc, #-1044]	; 12328 <__assert_fail@plt+0x10bc>
   12738:	add	r1, r1, #1
   1273c:	umull	r2, r3, r2, r3
   12740:	lsrs	r2, r3, #3
   12744:	bne	12734 <__assert_fail@plt+0x14c8>
   12748:	b	12704 <__assert_fail@plt+0x1498>
   1274c:	add	r0, sp, #2336	; 0x920
   12750:	add	r0, r0, #8
   12754:	bl	11128 <strlen@plt>
   12758:	subs	r3, r0, #0
   1275c:	beq	1277c <__assert_fail@plt+0x1510>
   12760:	sub	r1, r3, #1
   12764:	add	r2, sp, #3376	; 0xd30
   12768:	add	r2, r2, r1
   1276c:	ldrb	r0, [r2, #-1032]	; 0xfffffbf8
   12770:	cmp	r0, #32
   12774:	moveq	r3, r1
   12778:	strbeq	sl, [r2, #-1032]	; 0xfffffbf8
   1277c:	ldr	ip, [sp, #100]	; 0x64
   12780:	mov	r2, r6
   12784:	cmp	ip, r3
   12788:	movge	r3, ip
   1278c:	mov	r1, #1024	; 0x400
   12790:	mov	r0, r5
   12794:	str	r3, [sp, #100]	; 0x64
   12798:	bl	10ff0 <fgets@plt>
   1279c:	mov	r3, #1
   127a0:	cmp	r7, #2
   127a4:	str	r3, [sp, #96]	; 0x60
   127a8:	mov	r4, r0
   127ac:	bne	12410 <__assert_fail@plt+0x11a4>
   127b0:	cmp	r0, #0
   127b4:	bne	12400 <__assert_fail@plt+0x1194>
   127b8:	b	126c4 <__assert_fail@plt+0x1458>
   127bc:	ldr	r0, [pc, #-1136]	; 12354 <__assert_fail@plt+0x10e8>
   127c0:	bl	13cfc <__assert_fail@plt+0x2a90>
   127c4:	cmp	r0, #0
   127c8:	beq	124d4 <__assert_fail@plt+0x1268>
   127cc:	add	r3, sp, #2336	; 0x920
   127d0:	add	r3, r3, #8
   127d4:	ldr	r2, [sp, #100]	; 0x64
   127d8:	ldr	r1, [pc, #-1204]	; 1232c <__assert_fail@plt+0x10c0>
   127dc:	mov	r0, #1
   127e0:	bl	1117c <__printf_chk@plt>
   127e4:	b	124d4 <__assert_fail@plt+0x1268>
   127e8:	add	r3, sp, #1088	; 0x440
   127ec:	add	r3, r3, #12
   127f0:	ldr	r2, [sp, #80]	; 0x50
   127f4:	ldr	r1, [pc, #-1232]	; 1232c <__assert_fail@plt+0x10c0>
   127f8:	mov	r0, #1
   127fc:	bl	1117c <__printf_chk@plt>
   12800:	b	1248c <__assert_fail@plt+0x1220>
   12804:	add	r3, sp, #1248	; 0x4e0
   12808:	add	r3, r3, #4
   1280c:	ldr	r2, [sp, #76]	; 0x4c
   12810:	ldr	r1, [pc, #-1260]	; 1232c <__assert_fail@plt+0x10c0>
   12814:	mov	r0, #1
   12818:	bl	1117c <__printf_chk@plt>
   1281c:	b	12478 <__assert_fail@plt+0x120c>
   12820:	add	r3, sp, #1072	; 0x430
   12824:	add	r3, r3, #4
   12828:	ldr	r2, [sp, #72]	; 0x48
   1282c:	ldr	r1, [pc, #-1288]	; 1232c <__assert_fail@plt+0x10c0>
   12830:	mov	r0, #1
   12834:	bl	1117c <__printf_chk@plt>
   12838:	b	12464 <__assert_fail@plt+0x11f8>
   1283c:	add	r3, sp, #1184	; 0x4a0
   12840:	add	r3, r3, #4
   12844:	ldr	r2, [sp, #68]	; 0x44
   12848:	ldr	r1, [pc, #-1316]	; 1232c <__assert_fail@plt+0x10c0>
   1284c:	mov	r0, #1
   12850:	bl	1117c <__printf_chk@plt>
   12854:	b	12450 <__assert_fail@plt+0x11e4>
   12858:	ldr	r2, [sp, #84]	; 0x54
   1285c:	ldr	r1, [pc, #-1332]	; 12330 <__assert_fail@plt+0x10c4>
   12860:	mov	r0, #1
   12864:	bl	1117c <__printf_chk@plt>
   12868:	b	12518 <__assert_fail@plt+0x12ac>
   1286c:	ldr	r3, [pc, #-1196]	; 123c8 <__assert_fail@plt+0x115c>
   12870:	ldr	r1, [sp, #64]	; 0x40
   12874:	mov	r2, #1
   12878:	ldr	r0, [r3]
   1287c:	bl	13904 <__assert_fail@plt+0x2698>
   12880:	ldr	r3, [pc, #-1324]	; 1235c <__assert_fail@plt+0x10f0>
   12884:	str	r0, [sp, #64]	; 0x40
   12888:	ldr	r0, [r3]
   1288c:	bl	13cfc <__assert_fail@plt+0x2a90>
   12890:	cmp	r0, #0
   12894:	bne	12d74 <__assert_fail@plt+0x1b08>
   12898:	ldr	r3, [pc, #-1288]	; 12398 <__assert_fail@plt+0x112c>
   1289c:	ldr	r0, [r3]
   128a0:	bl	13cfc <__assert_fail@plt+0x2a90>
   128a4:	cmp	r0, #0
   128a8:	bne	12d58 <__assert_fail@plt+0x1aec>
   128ac:	ldr	r3, [pc, #-1304]	; 1239c <__assert_fail@plt+0x1130>
   128b0:	ldr	r0, [r3]
   128b4:	bl	13cfc <__assert_fail@plt+0x2a90>
   128b8:	cmp	r0, #0
   128bc:	bne	12d3c <__assert_fail@plt+0x1ad0>
   128c0:	ldr	r3, [pc, #-1392]	; 12358 <__assert_fail@plt+0x10ec>
   128c4:	ldr	r0, [r3]
   128c8:	bl	13cfc <__assert_fail@plt+0x2a90>
   128cc:	cmp	r0, #0
   128d0:	bne	12d20 <__assert_fail@plt+0x1ab4>
   128d4:	ldr	r0, [fp, #1652]	; 0x674
   128d8:	cmp	r0, #0
   128dc:	str	r0, [fp, #1648]	; 0x670
   128e0:	beq	12904 <__assert_fail@plt+0x1698>
   128e4:	mov	r2, #1
   128e8:	ldr	r1, [r0, #64]	; 0x40
   128ec:	bl	13904 <__assert_fail@plt+0x2698>
   128f0:	ldr	r3, [fp, #1648]	; 0x670
   128f4:	ldr	r0, [r3, #68]	; 0x44
   128f8:	cmp	r0, #0
   128fc:	str	r0, [fp, #1648]	; 0x670
   12900:	bne	128e4 <__assert_fail@plt+0x1678>
   12904:	ldr	r3, [sp, #96]	; 0x60
   12908:	cmp	r3, #0
   1290c:	bne	12cf8 <__assert_fail@plt+0x1a8c>
   12910:	ldr	r7, [pc, #-1400]	; 123a0 <__assert_fail@plt+0x1134>
   12914:	ldr	r0, [r7]
   12918:	bl	13cfc <__assert_fail@plt+0x2a90>
   1291c:	cmp	r0, #0
   12920:	beq	1293c <__assert_fail@plt+0x16d0>
   12924:	ldr	r0, [r7]
   12928:	bl	110bc <puts@plt>
   1292c:	b	12424 <__assert_fail@plt+0x11b8>
   12930:	cmp	sl, #0
   12934:	strne	r0, [fp, #1648]	; 0x670
   12938:	b	126fc <__assert_fail@plt+0x1490>
   1293c:	mov	r0, #10
   12940:	bl	11170 <putchar@plt>
   12944:	b	12424 <__assert_fail@plt+0x11b8>
   12948:	mov	r0, r3
   1294c:	ldr	r1, [pc, #-1568]	; 12334 <__assert_fail@plt+0x10c8>
   12950:	bl	11218 <fopen64@plt>
   12954:	subs	r3, r0, #0
   12958:	str	r3, [sp, #68]	; 0x44
   1295c:	beq	12da0 <__assert_fail@plt+0x1b34>
   12960:	mov	r7, #0
   12964:	add	sl, sp, #1312	; 0x520
   12968:	mov	r8, r7
   1296c:	add	sl, sl, #4
   12970:	str	r9, [sp, #60]	; 0x3c
   12974:	ldr	r2, [sp, #68]	; 0x44
   12978:	ldr	r1, [pc, #-1520]	; 12390 <__assert_fail@plt+0x1124>
   1297c:	mov	r0, sl
   12980:	bl	10ff0 <fgets@plt>
   12984:	cmp	r0, #0
   12988:	beq	12d90 <__assert_fail@plt+0x1b24>
   1298c:	mov	r0, sl
   12990:	bl	11128 <strlen@plt>
   12994:	add	r8, r8, #1
   12998:	cmp	r0, #0
   1299c:	beq	129c8 <__assert_fail@plt+0x175c>
   129a0:	add	r2, sp, #3376	; 0xd30
   129a4:	sub	r3, r0, #1
   129a8:	add	r3, r2, r3
   129ac:	ldrb	r2, [r3, #-2060]	; 0xfffff7f4
   129b0:	cmp	r2, #10
   129b4:	moveq	r2, #0
   129b8:	strbeq	r2, [r3, #-2060]	; 0xfffff7f4
   129bc:	beq	129c8 <__assert_fail@plt+0x175c>
   129c0:	cmp	r0, #1024	; 0x400
   129c4:	beq	130e8 <__assert_fail@plt+0x1e7c>
   129c8:	ldrb	r3, [sp, #1316]	; 0x524
   129cc:	mov	r4, sl
   129d0:	cmp	r3, #32
   129d4:	cmpne	r3, #9
   129d8:	bne	129ec <__assert_fail@plt+0x1780>
   129dc:	ldrb	r3, [r4, #1]!
   129e0:	cmp	r3, #9
   129e4:	cmpne	r3, #32
   129e8:	beq	129dc <__assert_fail@plt+0x1770>
   129ec:	cmp	r3, #0
   129f0:	cmpne	r3, #35	; 0x23
   129f4:	beq	12974 <__assert_fail@plt+0x1708>
   129f8:	cmp	r3, #91	; 0x5b
   129fc:	beq	12ee8 <__assert_fail@plt+0x1c7c>
   12a00:	cmp	r7, #2
   12a04:	beq	12e60 <__assert_fail@plt+0x1bf4>
   12a08:	cmp	r7, #3
   12a0c:	beq	12de4 <__assert_fail@plt+0x1b78>
   12a10:	cmp	r7, #1
   12a14:	beq	12974 <__assert_fail@plt+0x1708>
   12a18:	mov	r2, #5
   12a1c:	ldr	r1, [pc, #-1704]	; 1237c <__assert_fail@plt+0x1110>
   12a20:	mov	r0, #0
   12a24:	bl	11020 <dcgettext@plt>
   12a28:	mov	r1, #0
   12a2c:	mov	r3, r8
   12a30:	mov	r7, #0
   12a34:	mov	r2, r0
   12a38:	mov	r0, r1
   12a3c:	bl	110a4 <error@plt>
   12a40:	b	12974 <__assert_fail@plt+0x1708>
   12a44:	ldr	r4, [fp, #1112]	; 0x458
   12a48:	cmp	r4, #0
   12a4c:	beq	13320 <__assert_fail@plt+0x20b4>
   12a50:	mov	r3, #7
   12a54:	str	r3, [sp, #72]	; 0x48
   12a58:	str	r3, [sp, #68]	; 0x44
   12a5c:	str	r3, [sp, #64]	; 0x40
   12a60:	mov	r3, #5
   12a64:	str	r3, [sp, #80]	; 0x50
   12a68:	mov	r8, #8
   12a6c:	b	11c48 <__assert_fail@plt+0x9dc>
   12a70:	ldr	r3, [pc, #-1856]	; 12338 <__assert_fail@plt+0x10cc>
   12a74:	ldr	r0, [r3]
   12a78:	bl	1368c <__assert_fail@plt+0x2420>
   12a7c:	ldr	r3, [sp, #60]	; 0x3c
   12a80:	sub	r0, sl, #4
   12a84:	sub	ip, r3, #8
   12a88:	add	r3, sp, #1168	; 0x490
   12a8c:	sub	r1, sl, #8
   12a90:	sub	r7, r3, #12
   12a94:	add	r3, sp, #176	; 0xb0
   12a98:	str	r0, [sp, #12]
   12a9c:	str	r1, [sp, #8]
   12aa0:	str	sl, [sp, #4]
   12aa4:	sub	r2, r3, #4
   12aa8:	str	ip, [sp, #16]
   12aac:	str	r7, [sp]
   12ab0:	ldr	r1, [pc, #-1916]	; 1233c <__assert_fail@plt+0x10d0>
   12ab4:	mov	r0, r4
   12ab8:	bl	1120c <sscanf@plt>
   12abc:	cmp	r0, #7
   12ac0:	bne	11cbc <__assert_fail@plt+0xa50>
   12ac4:	ldr	r2, [sp, #176]	; 0xb0
   12ac8:	ldr	r3, [fp, #1116]	; 0x45c
   12acc:	str	r2, [sp, #160]	; 0xa0
   12ad0:	sub	r2, r2, #1
   12ad4:	cmp	r2, r3
   12ad8:	bcc	11cbc <__assert_fail@plt+0xa50>
   12adc:	ldr	r3, [pc, #-1956]	; 12340 <__assert_fail@plt+0x10d4>
   12ae0:	ldr	r2, [sp, #172]	; 0xac
   12ae4:	ldr	r3, [r3, #4]
   12ae8:	str	r2, [sp, #164]	; 0xa4
   12aec:	cmp	r3, r2
   12af0:	bcc	11e14 <__assert_fail@plt+0xba8>
   12af4:	mov	r1, #10
   12af8:	mov	r0, r4
   12afc:	bl	11134 <strchr@plt>
   12b00:	cmp	r0, #0
   12b04:	movne	r3, #0
   12b08:	strbne	r3, [r0]
   12b0c:	ldr	r5, [pc, #-2000]	; 12344 <__assert_fail@plt+0x10d8>
   12b10:	b	12b30 <__assert_fail@plt+0x18c4>
   12b14:	bl	11104 <__ctype_b_loc@plt>
   12b18:	lsl	r9, r9, #1
   12b1c:	ldr	r3, [r0]
   12b20:	ldrh	r3, [r3, r9]
   12b24:	tst	r3, #16384	; 0x4000
   12b28:	moveq	r3, #63	; 0x3f
   12b2c:	strbeq	r3, [r5]
   12b30:	ldrb	r9, [r5, #1]!
   12b34:	cmp	r9, #0
   12b38:	bne	12b14 <__assert_fail@plt+0x18a8>
   12b3c:	ldrb	r3, [sp, #1159]	; 0x487
   12b40:	ldr	r2, [sp, #160]	; 0xa0
   12b44:	ldr	r1, [sp, #164]	; 0xa4
   12b48:	cmp	r3, #115	; 0x73
   12b4c:	sub	r5, r2, r1
   12b50:	ldreq	r3, [sp, #84]	; 0x54
   12b54:	addeq	r3, r3, r5
   12b58:	streq	r3, [sp, #84]	; 0x54
   12b5c:	beq	12b90 <__assert_fail@plt+0x1924>
   12b60:	cmp	r3, #112	; 0x70
   12b64:	bne	12b90 <__assert_fail@plt+0x1924>
   12b68:	ldrb	r3, [sp, #1157]	; 0x485
   12b6c:	mov	r2, #45	; 0x2d
   12b70:	strb	r2, [sp, #1159]	; 0x487
   12b74:	cmp	r3, #119	; 0x77
   12b78:	ldreq	r3, [sp, #76]	; 0x4c
   12b7c:	ldrne	r3, [sp, #96]	; 0x60
   12b80:	addeq	r3, r3, r5
   12b84:	addne	r3, r3, r5
   12b88:	streq	r3, [sp, #76]	; 0x4c
   12b8c:	strne	r3, [sp, #96]	; 0x60
   12b90:	ldr	r3, [fp, #1104]	; 0x450
   12b94:	add	r2, sp, #1168	; 0x490
   12b98:	sub	r9, r2, #12
   12b9c:	cmp	r3, #0
   12ba0:	mov	r3, #45	; 0x2d
   12ba4:	strh	r3, [r9, #4]
   12ba8:	bne	130b4 <__assert_fail@plt+0x1e48>
   12bac:	ldr	r3, [fp, #1108]	; 0x454
   12bb0:	cmp	r3, #0
   12bb4:	lsreq	r9, r5, #10
   12bb8:	bne	12fe0 <__assert_fail@plt+0x1d74>
   12bbc:	ldr	ip, [sp, #60]	; 0x3c
   12bc0:	ldr	r0, [sp, #188]	; 0xbc
   12bc4:	ldr	r1, [sp, #184]	; 0xb8
   12bc8:	ldrd	r2, [ip, #-8]
   12bcc:	str	r0, [sp, #4]
   12bd0:	str	r1, [sp]
   12bd4:	strd	r2, [sp, #8]
   12bd8:	ldr	r3, [fp, #1132]	; 0x46c
   12bdc:	mov	r2, r5
   12be0:	ldr	r1, [sp, #172]	; 0xac
   12be4:	add	r0, ip, #164	; 0xa4
   12be8:	bl	13e2c <__assert_fail@plt+0x2bc0>
   12bec:	str	r7, [sp]
   12bf0:	mov	r3, r9
   12bf4:	ldr	r2, [sp, #172]	; 0xac
   12bf8:	ldr	r1, [pc, #-2232]	; 12348 <__assert_fail@plt+0x10dc>
   12bfc:	str	r0, [sp, #4]
   12c00:	mov	r0, #1
   12c04:	bl	1117c <__printf_chk@plt>
   12c08:	b	11cbc <__assert_fail@plt+0xa50>
   12c0c:	ldr	r3, [sp, #60]	; 0x3c
   12c10:	ldrd	r0, [sp, #112]	; 0x70
   12c14:	ldrd	r2, [r3, #-8]
   12c18:	strd	r2, [sp, #152]	; 0x98
   12c1c:	adds	r2, r2, r0
   12c20:	adc	r3, r3, r1
   12c24:	strd	r2, [sp, #112]	; 0x70
   12c28:	b	11cbc <__assert_fail@plt+0xa50>
   12c2c:	ldr	r0, [sp, #108]	; 0x6c
   12c30:	bl	11188 <closeproc@plt>
   12c34:	ldr	r0, [sp, #92]	; 0x5c
   12c38:	bl	10fe4 <free@plt>
   12c3c:	ldr	r3, [fp, #1652]	; 0x674
   12c40:	str	r3, [fp, #1648]	; 0x670
   12c44:	b	12c5c <__assert_fail@plt+0x19f0>
   12c48:	ldr	r4, [r3, #68]	; 0x44
   12c4c:	ldr	r0, [fp, #1652]	; 0x674
   12c50:	str	r4, [fp, #1648]	; 0x670
   12c54:	bl	10fe4 <free@plt>
   12c58:	str	r4, [fp, #1652]	; 0x674
   12c5c:	ldr	r3, [fp, #1648]	; 0x670
   12c60:	cmp	r3, #0
   12c64:	bne	12c48 <__assert_fail@plt+0x19dc>
   12c68:	ldr	r3, [fp, #8]
   12c6c:	str	r3, [fp, #12]
   12c70:	b	12c88 <__assert_fail@plt+0x1a1c>
   12c74:	ldr	r4, [r3, #32]
   12c78:	ldr	r0, [fp, #8]
   12c7c:	str	r4, [fp, #12]
   12c80:	bl	10fe4 <free@plt>
   12c84:	str	r4, [fp, #8]
   12c88:	ldr	r3, [fp, #12]
   12c8c:	cmp	r3, #0
   12c90:	bne	12c74 <__assert_fail@plt+0x1a08>
   12c94:	ldr	r3, [sp, #104]	; 0x68
   12c98:	cmp	r3, #0
   12c9c:	ldrne	r3, [sp, #88]	; 0x58
   12ca0:	orrne	r3, r3, #42	; 0x2a
   12ca4:	strne	r3, [sp, #88]	; 0x58
   12ca8:	b	1159c <__assert_fail@plt+0x330>
   12cac:	ldr	r3, [sp, #60]	; 0x3c
   12cb0:	ldrd	r0, [sp, #120]	; 0x78
   12cb4:	ldrd	r2, [r3, #-8]
   12cb8:	strd	r2, [sp, #144]	; 0x90
   12cbc:	adds	r2, r2, r0
   12cc0:	adc	r3, r3, r1
   12cc4:	strd	r2, [sp, #120]	; 0x78
   12cc8:	b	11cbc <__assert_fail@plt+0xa50>
   12ccc:	ldr	r1, [pc, #-2440]	; 1234c <__assert_fail@plt+0x10e0>
   12cd0:	mov	r2, #5
   12cd4:	mov	r0, #0
   12cd8:	bl	11020 <dcgettext@plt>
   12cdc:	mov	r1, #0
   12ce0:	mov	r2, r0
   12ce4:	mov	r0, #1
   12ce8:	bl	110a4 <error@plt>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #-2472]	; 12350 <__assert_fail@plt+0x10e4>
   12cf4:	b	12cd4 <__assert_fail@plt+0x1a68>
   12cf8:	ldr	r0, [pc, #-2476]	; 12354 <__assert_fail@plt+0x10e8>
   12cfc:	bl	13cfc <__assert_fail@plt+0x2a90>
   12d00:	cmp	r0, #0
   12d04:	beq	12910 <__assert_fail@plt+0x16a4>
   12d08:	ldr	r1, [sp, #100]	; 0x64
   12d0c:	mov	r2, #1
   12d10:	ldr	r0, [pc, #-2500]	; 12354 <__assert_fail@plt+0x10e8>
   12d14:	bl	13904 <__assert_fail@plt+0x2698>
   12d18:	str	r0, [sp, #100]	; 0x64
   12d1c:	b	12910 <__assert_fail@plt+0x16a4>
   12d20:	ldr	r3, [pc, #-2512]	; 12358 <__assert_fail@plt+0x10ec>
   12d24:	ldr	r1, [sp, #80]	; 0x50
   12d28:	mov	r2, #1
   12d2c:	ldr	r0, [r3]
   12d30:	bl	13904 <__assert_fail@plt+0x2698>
   12d34:	str	r0, [sp, #80]	; 0x50
   12d38:	b	128d4 <__assert_fail@plt+0x1668>
   12d3c:	ldr	r3, [pc, #-2472]	; 1239c <__assert_fail@plt+0x1130>
   12d40:	ldr	r1, [sp, #76]	; 0x4c
   12d44:	mov	r2, #1
   12d48:	ldr	r0, [r3]
   12d4c:	bl	13904 <__assert_fail@plt+0x2698>
   12d50:	str	r0, [sp, #76]	; 0x4c
   12d54:	b	128c0 <__assert_fail@plt+0x1654>
   12d58:	ldr	r3, [pc, #-2504]	; 12398 <__assert_fail@plt+0x112c>
   12d5c:	ldr	r1, [sp, #72]	; 0x48
   12d60:	mov	r2, #1
   12d64:	ldr	r0, [r3]
   12d68:	bl	13904 <__assert_fail@plt+0x2698>
   12d6c:	str	r0, [sp, #72]	; 0x48
   12d70:	b	128ac <__assert_fail@plt+0x1640>
   12d74:	ldr	r3, [pc, #-2592]	; 1235c <__assert_fail@plt+0x10f0>
   12d78:	ldr	r1, [sp, #68]	; 0x44
   12d7c:	mov	r2, #1
   12d80:	ldr	r0, [r3]
   12d84:	bl	13904 <__assert_fail@plt+0x2698>
   12d88:	str	r0, [sp, #68]	; 0x44
   12d8c:	b	12898 <__assert_fail@plt+0x162c>
   12d90:	ldr	r0, [sp, #68]	; 0x44
   12d94:	ldr	r9, [sp, #60]	; 0x3c
   12d98:	bl	111ac <fclose@plt>
   12d9c:	b	11854 <__assert_fail@plt+0x5e8>
   12da0:	ldr	r4, [fp, #1120]	; 0x460
   12da4:	mov	r2, #5
   12da8:	cmp	r4, #0
   12dac:	ldrne	r1, [pc, #-2644]	; 12360 <__assert_fail@plt+0x10f4>
   12db0:	bne	12cd8 <__assert_fail@plt+0x1a6c>
   12db4:	ldr	r1, [pc, #-2648]	; 12364 <__assert_fail@plt+0x10f8>
   12db8:	bl	11020 <dcgettext@plt>
   12dbc:	mov	r2, #1
   12dc0:	str	r2, [sp, #88]	; 0x58
   12dc4:	ldr	r3, [sl]
   12dc8:	mov	r1, r4
   12dcc:	mov	r2, r0
   12dd0:	mov	r0, r4
   12dd4:	bl	110a4 <error@plt>
   12dd8:	ldr	r0, [sp, #60]	; 0x3c
   12ddc:	bl	10fe4 <free@plt>
   12de0:	b	1159c <__assert_fail@plt+0x330>
   12de4:	mov	r0, r4
   12de8:	ldr	r1, [pc, #-2692]	; 1236c <__assert_fail@plt+0x1100>
   12dec:	bl	111b8 <strtok@plt>
   12df0:	subs	r4, r0, #0
   12df4:	beq	12974 <__assert_fail@plt+0x1708>
   12df8:	ldr	r1, [pc, #-2708]	; 1236c <__assert_fail@plt+0x1100>
   12dfc:	mov	r0, #0
   12e00:	bl	111b8 <strtok@plt>
   12e04:	cmp	r0, #0
   12e08:	beq	12e3c <__assert_fail@plt+0x1bd0>
   12e0c:	ldrb	r3, [r0]
   12e10:	cmp	r3, #35	; 0x23
   12e14:	beq	12e3c <__assert_fail@plt+0x1bd0>
   12e18:	mov	r2, #5
   12e1c:	ldr	r1, [pc, #-2728]	; 1237c <__assert_fail@plt+0x1110>
   12e20:	mov	r0, #0
   12e24:	bl	11020 <dcgettext@plt>
   12e28:	mov	r1, #0
   12e2c:	mov	r3, r8
   12e30:	mov	r2, r0
   12e34:	mov	r0, r1
   12e38:	bl	110a4 <error@plt>
   12e3c:	mov	r0, r4
   12e40:	ldr	r1, [pc, #-2784]	; 12368 <__assert_fail@plt+0x10fc>
   12e44:	bl	10fd8 <strcmp@plt>
   12e48:	cmp	r0, #0
   12e4c:	ldreq	r3, [fp, #1132]	; 0x46c
   12e50:	clzeq	r3, r3
   12e54:	lsreq	r3, r3, #5
   12e58:	streq	r3, [fp, #1132]	; 0x46c
   12e5c:	b	12974 <__assert_fail@plt+0x1708>
   12e60:	mov	r0, r4
   12e64:	ldr	r1, [pc, #-2816]	; 1236c <__assert_fail@plt+0x1100>
   12e68:	bl	111b8 <strtok@plt>
   12e6c:	subs	r4, r0, #0
   12e70:	beq	12974 <__assert_fail@plt+0x1708>
   12e74:	ldr	r1, [pc, #-2832]	; 1236c <__assert_fail@plt+0x1100>
   12e78:	mov	r0, #0
   12e7c:	bl	111b8 <strtok@plt>
   12e80:	cmp	r0, #0
   12e84:	beq	12eb8 <__assert_fail@plt+0x1c4c>
   12e88:	ldrb	r3, [r0]
   12e8c:	cmp	r3, #35	; 0x23
   12e90:	beq	12eb8 <__assert_fail@plt+0x1c4c>
   12e94:	mov	r2, #5
   12e98:	ldr	r1, [pc, #-2852]	; 1237c <__assert_fail@plt+0x1110>
   12e9c:	mov	r0, #0
   12ea0:	bl	11020 <dcgettext@plt>
   12ea4:	mov	r1, #0
   12ea8:	mov	r3, r8
   12eac:	mov	r2, r0
   12eb0:	mov	r0, r1
   12eb4:	bl	110a4 <error@plt>
   12eb8:	mov	r1, #36	; 0x24
   12ebc:	mov	r0, #1
   12ec0:	bl	10fc0 <calloc@plt>
   12ec4:	mov	r3, r4
   12ec8:	ldr	r2, [pc, #-2912]	; 12370 <__assert_fail@plt+0x1104>
   12ecc:	mov	r1, #32
   12ed0:	str	r0, [fp, #12]
   12ed4:	bl	1114c <snprintf@plt>
   12ed8:	ldrd	r2, [fp, #8]
   12edc:	str	r3, [fp, #8]
   12ee0:	str	r2, [r3, #32]
   12ee4:	b	12974 <__assert_fail@plt+0x1708>
   12ee8:	mov	r0, r4
   12eec:	mov	r2, #16
   12ef0:	ldr	r1, [pc, #-2948]	; 12374 <__assert_fail@plt+0x1108>
   12ef4:	bl	11248 <strncmp@plt>
   12ef8:	cmp	r0, #0
   12efc:	addeq	r4, r4, #16
   12f00:	moveq	r7, #2
   12f04:	beq	12f2c <__assert_fail@plt+0x1cc0>
   12f08:	mov	r2, #9
   12f0c:	ldr	r1, [pc, #-2972]	; 12378 <__assert_fail@plt+0x110c>
   12f10:	mov	r0, r4
   12f14:	bl	11248 <strncmp@plt>
   12f18:	cmp	r0, #0
   12f1c:	movne	r9, r4
   12f20:	bne	12f84 <__assert_fail@plt+0x1d18>
   12f24:	add	r4, r4, #9
   12f28:	mov	r7, #3
   12f2c:	mov	r3, r4
   12f30:	ldrb	r6, [r3]
   12f34:	mov	r4, r3
   12f38:	add	r3, r3, #1
   12f3c:	cmp	r6, #9
   12f40:	cmpne	r6, #32
   12f44:	beq	12f30 <__assert_fail@plt+0x1cc4>
   12f48:	cmp	r6, #0
   12f4c:	cmpne	r6, #35	; 0x23
   12f50:	moveq	r6, #1
   12f54:	movne	r6, #0
   12f58:	beq	12974 <__assert_fail@plt+0x1708>
   12f5c:	mov	r2, #5
   12f60:	ldr	r1, [pc, #-3052]	; 1237c <__assert_fail@plt+0x1110>
   12f64:	mov	r0, r6
   12f68:	bl	11020 <dcgettext@plt>
   12f6c:	mov	r3, r8
   12f70:	mov	r1, r6
   12f74:	mov	r2, r0
   12f78:	mov	r0, r6
   12f7c:	bl	110a4 <error@plt>
   12f80:	b	12a00 <__assert_fail@plt+0x1794>
   12f84:	ldrb	r3, [r9]
   12f88:	mov	r4, r9
   12f8c:	add	r9, r9, #1
   12f90:	cmp	r3, #93	; 0x5d
   12f94:	cmpne	r3, #0
   12f98:	movne	r6, #1
   12f9c:	moveq	r6, #0
   12fa0:	bne	12f84 <__assert_fail@plt+0x1d18>
   12fa4:	cmp	r3, #93	; 0x5d
   12fa8:	mov	r2, #5
   12fac:	beq	133e8 <__assert_fail@plt+0x217c>
   12fb0:	ldr	r1, [pc, #-3132]	; 1237c <__assert_fail@plt+0x1110>
   12fb4:	mov	r0, r6
   12fb8:	bl	11020 <dcgettext@plt>
   12fbc:	mov	r3, r8
   12fc0:	mov	r1, r6
   12fc4:	mov	r2, r0
   12fc8:	mov	r0, r6
   12fcc:	bl	110a4 <error@plt>
   12fd0:	b	12f2c <__assert_fail@plt+0x1cc0>
   12fd4:	ldr	r1, [sp, #884]	; 0x374
   12fd8:	ldr	r2, [pc, #-3168]	; 12380 <__assert_fail@plt+0x1114>
   12fdc:	b	11bd8 <__assert_fail@plt+0x96c>
   12fe0:	ldr	lr, [sp, #60]	; 0x3c
   12fe4:	ldr	ip, [sp, #188]	; 0xbc
   12fe8:	ldr	r0, [sp, #184]	; 0xb8
   12fec:	ldrd	r2, [lr, #-8]
   12ff0:	ldr	r1, [sp, #164]	; 0xa4
   12ff4:	stm	sp, {r0, ip}
   12ff8:	strd	r2, [sp, #8]
   12ffc:	ldr	r3, [fp, #1132]	; 0x46c
   13000:	mov	r2, r5
   13004:	add	r0, lr, #164	; 0xa4
   13008:	bl	13e2c <__assert_fail@plt+0x2bc0>
   1300c:	ldrd	r2, [sl]
   13010:	str	r9, [sp, #12]
   13014:	ldr	r9, [sp, #68]	; 0x44
   13018:	ldr	r1, [sp, #72]	; 0x48
   1301c:	strd	r2, [sp, #24]
   13020:	str	r9, [sp, #8]
   13024:	ldr	r3, [sp, #80]	; 0x50
   13028:	ldr	r9, [sp, #64]	; 0x40
   1302c:	ldr	lr, [sp, #188]	; 0xbc
   13030:	ldr	ip, [sp, #184]	; 0xb8
   13034:	str	r1, [sp, #16]
   13038:	ldr	r1, [pc, #-3260]	; 12384 <__assert_fail@plt+0x1118>
   1303c:	sub	r3, r3, #9
   13040:	str	r9, [sp]
   13044:	lsr	r9, r5, #10
   13048:	str	r1, [sp, #40]	; 0x28
   1304c:	str	r3, [sp, #36]	; 0x24
   13050:	str	r3, [sp, #32]
   13054:	str	lr, [sp, #48]	; 0x30
   13058:	ldr	r3, [sp, #172]	; 0xac
   1305c:	str	ip, [sp, #44]	; 0x2c
   13060:	str	r9, [sp, #4]
   13064:	mov	r2, r8
   13068:	ldr	r1, [pc, #-3304]	; 12388 <__assert_fail@plt+0x111c>
   1306c:	str	r0, [sp, #52]	; 0x34
   13070:	mov	r0, #1
   13074:	bl	1117c <__printf_chk@plt>
   13078:	ldr	r3, [fp, #1104]	; 0x450
   1307c:	cmp	r3, #0
   13080:	bne	11cbc <__assert_fail@plt+0xa50>
   13084:	ldr	r3, [fp, #1108]	; 0x454
   13088:	cmp	r3, #0
   1308c:	bne	11cbc <__assert_fail@plt+0xa50>
   13090:	b	12bbc <__assert_fail@plt+0x1950>
   13094:	ldr	r3, [sp, #60]	; 0x3c
   13098:	ldrd	r0, [sp, #128]	; 0x80
   1309c:	ldrd	r2, [r3, #-8]
   130a0:	strd	r2, [sp, #136]	; 0x88
   130a4:	adds	r2, r2, r0
   130a8:	adc	r3, r3, r1
   130ac:	strd	r2, [sp, #128]	; 0x80
   130b0:	b	11cbc <__assert_fail@plt+0xa50>
   130b4:	ldr	lr, [sp, #60]	; 0x3c
   130b8:	ldr	r0, [sp, #184]	; 0xb8
   130bc:	ldr	ip, [sp, #188]	; 0xbc
   130c0:	ldrd	r2, [lr, #-8]
   130c4:	ldr	r1, [sp, #164]	; 0xa4
   130c8:	stm	sp, {r0, ip}
   130cc:	strd	r2, [sp, #8]
   130d0:	ldr	r3, [fp, #1132]	; 0x46c
   130d4:	mov	r2, r5
   130d8:	add	r0, lr, #164	; 0xa4
   130dc:	bl	13e2c <__assert_fail@plt+0x2bc0>
   130e0:	str	r0, [sp, #100]	; 0x64
   130e4:	b	11cbc <__assert_fail@plt+0xa50>
   130e8:	mov	r2, #5
   130ec:	ldr	r1, [pc, #-3432]	; 1238c <__assert_fail@plt+0x1120>
   130f0:	mov	r0, #0
   130f4:	bl	11020 <dcgettext@plt>
   130f8:	mov	r1, #0
   130fc:	mov	r3, r8
   13100:	mov	r2, r0
   13104:	mov	r0, r1
   13108:	bl	110a4 <error@plt>
   1310c:	b	13138 <__assert_fail@plt+0x1ecc>
   13110:	add	r0, sp, #2336	; 0x920
   13114:	add	r0, r0, #8
   13118:	bl	11128 <strlen@plt>
   1311c:	subs	r3, r0, #0
   13120:	beq	129c8 <__assert_fail@plt+0x175c>
   13124:	add	r2, sp, #3376	; 0xd30
   13128:	add	r3, r2, r3
   1312c:	ldrb	r3, [r3, #-1033]	; 0xfffffbf7
   13130:	cmp	r3, #10
   13134:	beq	129c8 <__assert_fail@plt+0x175c>
   13138:	add	r0, sp, #2336	; 0x920
   1313c:	ldr	r2, [sp, #68]	; 0x44
   13140:	ldr	r1, [pc, #-3512]	; 12390 <__assert_fail@plt+0x1124>
   13144:	add	r0, r0, #8
   13148:	bl	10ff0 <fgets@plt>
   1314c:	cmp	r0, #0
   13150:	bne	13110 <__assert_fail@plt+0x1ea4>
   13154:	b	129c8 <__assert_fail@plt+0x175c>
   13158:	ldr	r3, [pc, #-3480]	; 123c8 <__assert_fail@plt+0x115c>
   1315c:	mov	r2, r4
   13160:	mov	r1, #8
   13164:	ldr	r0, [r3]
   13168:	bl	13904 <__assert_fail@plt+0x2698>
   1316c:	ldr	r3, [pc, #-3496]	; 123cc <__assert_fail@plt+0x1160>
   13170:	mov	r2, #1
   13174:	mov	r1, #7
   13178:	mov	r8, r0
   1317c:	ldr	r0, [r3]
   13180:	bl	13904 <__assert_fail@plt+0x2698>
   13184:	ldr	r3, [pc, #-3576]	; 12394 <__assert_fail@plt+0x1128>
   13188:	mov	r2, r4
   1318c:	mov	r1, #5
   13190:	str	r0, [sp, #64]	; 0x40
   13194:	ldr	r0, [r3]
   13198:	bl	13904 <__assert_fail@plt+0x2698>
   1319c:	ldr	r3, [pc, #-3596]	; 12398 <__assert_fail@plt+0x112c>
   131a0:	mov	r2, r4
   131a4:	mov	r1, #16
   131a8:	str	r0, [sp, #68]	; 0x44
   131ac:	ldr	r0, [r3]
   131b0:	bl	13904 <__assert_fail@plt+0x2698>
   131b4:	ldr	r3, [pc, #-3616]	; 1239c <__assert_fail@plt+0x1130>
   131b8:	mov	r2, r4
   131bc:	mov	r1, #9
   131c0:	str	r0, [sp, #72]	; 0x48
   131c4:	ldr	r0, [r3]
   131c8:	bl	13904 <__assert_fail@plt+0x2698>
   131cc:	ldr	r3, [pc, #-3636]	; 123a0 <__assert_fail@plt+0x1134>
   131d0:	str	r0, [sp, #80]	; 0x50
   131d4:	ldr	r0, [r3]
   131d8:	bl	110bc <puts@plt>
   131dc:	b	11c80 <__assert_fail@plt+0xa14>
   131e0:	mov	r2, r4
   131e4:	mov	r1, r8
   131e8:	ldr	r0, [pc, #-3660]	; 123a4 <__assert_fail@plt+0x1138>
   131ec:	bl	13904 <__assert_fail@plt+0x2698>
   131f0:	ldr	r9, [sp, #64]	; 0x40
   131f4:	mov	r2, #1
   131f8:	mov	r1, r9
   131fc:	ldr	r0, [pc, #-3676]	; 123a8 <__assert_fail@plt+0x113c>
   13200:	bl	13904 <__assert_fail@plt+0x2698>
   13204:	ldr	r7, [sp, #68]	; 0x44
   13208:	mov	r2, #1
   1320c:	mov	r1, r7
   13210:	ldr	r0, [pc, #-3696]	; 123a8 <__assert_fail@plt+0x113c>
   13214:	bl	13904 <__assert_fail@plt+0x2698>
   13218:	ldr	r6, [sp, #72]	; 0x48
   1321c:	mov	r2, #1
   13220:	mov	r1, r6
   13224:	ldr	r0, [pc, #-3716]	; 123a8 <__assert_fail@plt+0x113c>
   13228:	bl	13904 <__assert_fail@plt+0x2698>
   1322c:	mov	r0, #10
   13230:	bl	11170 <putchar@plt>
   13234:	ldr	ip, [sp, #96]	; 0x60
   13238:	ldr	r3, [sp, #76]	; 0x4c
   1323c:	mov	r2, #5
   13240:	ldr	r1, [pc, #-3740]	; 123ac <__assert_fail@plt+0x1140>
   13244:	mov	r0, r4
   13248:	add	r5, r3, ip
   1324c:	bl	11020 <dcgettext@plt>
   13250:	mov	r2, r8
   13254:	ldr	r1, [pc, #-3756]	; 123b0 <__assert_fail@plt+0x1144>
   13258:	mov	r3, r0
   1325c:	mov	r0, #1
   13260:	bl	1117c <__printf_chk@plt>
   13264:	ldrd	r0, [sp, #128]	; 0x80
   13268:	ldrd	r2, [sp, #120]	; 0x78
   1326c:	str	r6, [sp, #16]
   13270:	str	r7, [sp]
   13274:	adds	r2, r2, r0
   13278:	adc	r3, r3, r1
   1327c:	ldr	r1, [sp, #84]	; 0x54
   13280:	strd	r2, [sp, #24]
   13284:	ldrd	r2, [sp, #112]	; 0x70
   13288:	add	r1, r5, r1
   1328c:	mov	r0, #1
   13290:	strd	r2, [sp, #8]
   13294:	lsr	r3, r1, #10
   13298:	mov	r2, r9
   1329c:	ldr	r1, [pc, #-3824]	; 123b4 <__assert_fail@plt+0x1148>
   132a0:	bl	1117c <__printf_chk@plt>
   132a4:	ldr	r3, [fp, #1108]	; 0x454
   132a8:	cmp	r3, #0
   132ac:	bne	11e4c <__assert_fail@plt+0xbe0>
   132b0:	ldr	r3, [fp, #1104]	; 0x450
   132b4:	cmp	r3, #0
   132b8:	bne	11e9c <__assert_fail@plt+0xc30>
   132bc:	mov	r2, #5
   132c0:	ldr	r1, [pc, #-3856]	; 123b8 <__assert_fail@plt+0x114c>
   132c4:	mov	r0, #0
   132c8:	bl	11020 <dcgettext@plt>
   132cc:	ldr	r3, [sp, #84]	; 0x54
   132d0:	add	r2, r5, r3
   132d4:	lsr	r2, r2, #10
   132d8:	mov	r1, r0
   132dc:	mov	r0, #1
   132e0:	bl	1117c <__printf_chk@plt>
   132e4:	b	11ea0 <__assert_fail@plt+0xc34>
   132e8:	add	r3, sp, #208	; 0xd0
   132ec:	str	r3, [sp, #60]	; 0x3c
   132f0:	b	11ab4 <__assert_fail@plt+0x848>
   132f4:	mov	r2, #5
   132f8:	ldr	r1, [pc, #-3908]	; 123bc <__assert_fail@plt+0x1150>
   132fc:	mov	r0, #0
   13300:	bl	11020 <dcgettext@plt>
   13304:	ldr	r3, [pc, #-3916]	; 123c0 <__assert_fail@plt+0x1154>
   13308:	ldr	r2, [pc, #-3916]	; 123c4 <__assert_fail@plt+0x1158>
   1330c:	str	r3, [sp]
   13310:	mov	r1, #0
   13314:	mov	r3, r0
   13318:	mov	r0, #1
   1331c:	bl	110a4 <error@plt>
   13320:	ldr	r3, [pc, #-3936]	; 123c8 <__assert_fail@plt+0x115c>
   13324:	mov	r2, r4
   13328:	mov	r1, #8
   1332c:	ldr	r0, [r3]
   13330:	bl	13904 <__assert_fail@plt+0x2698>
   13334:	ldr	r3, [pc, #-3952]	; 123cc <__assert_fail@plt+0x1160>
   13338:	mov	r2, #1
   1333c:	mov	r1, #7
   13340:	mov	r8, r0
   13344:	ldr	r0, [r3]
   13348:	bl	13904 <__assert_fail@plt+0x2698>
   1334c:	ldr	r3, [pc, #-3972]	; 123d0 <__assert_fail@plt+0x1164>
   13350:	mov	r2, #1
   13354:	mov	r1, #7
   13358:	str	r0, [sp, #64]	; 0x40
   1335c:	ldr	r0, [r3]
   13360:	bl	13904 <__assert_fail@plt+0x2698>
   13364:	ldr	r3, [pc, #272]	; 1347c <__assert_fail@plt+0x2210>
   13368:	mov	r2, #1
   1336c:	mov	r1, #7
   13370:	str	r0, [sp, #68]	; 0x44
   13374:	ldr	r0, [r3]
   13378:	bl	13904 <__assert_fail@plt+0x2698>
   1337c:	ldr	r3, [pc, #252]	; 13480 <__assert_fail@plt+0x2214>
   13380:	mov	r2, r4
   13384:	mov	r1, #5
   13388:	str	r0, [sp, #72]	; 0x48
   1338c:	ldr	r0, [r3]
   13390:	bl	13904 <__assert_fail@plt+0x2698>
   13394:	ldr	r3, [pc, #232]	; 13484 <__assert_fail@plt+0x2218>
   13398:	str	r0, [sp, #80]	; 0x50
   1339c:	ldr	r0, [r3]
   133a0:	bl	110bc <puts@plt>
   133a4:	b	11c48 <__assert_fail@plt+0x9dc>
   133a8:	ldr	r3, [pc, #216]	; 13488 <__assert_fail@plt+0x221c>
   133ac:	ldr	r2, [pc, #216]	; 1348c <__assert_fail@plt+0x2220>
   133b0:	ldr	r1, [pc, #216]	; 13490 <__assert_fail@plt+0x2224>
   133b4:	ldr	r0, [pc, #216]	; 13494 <__assert_fail@plt+0x2228>
   133b8:	bl	1126c <__assert_fail@plt>
   133bc:	ldr	r3, [pc, #196]	; 13488 <__assert_fail@plt+0x221c>
   133c0:	ldr	r2, [pc, #208]	; 13498 <__assert_fail@plt+0x222c>
   133c4:	ldr	r1, [pc, #196]	; 13490 <__assert_fail@plt+0x2224>
   133c8:	ldr	r0, [pc, #204]	; 1349c <__assert_fail@plt+0x2230>
   133cc:	bl	1126c <__assert_fail@plt>
   133d0:	str	r0, [sp, #80]	; 0x50
   133d4:	str	r0, [sp, #76]	; 0x4c
   133d8:	str	r0, [sp, #72]	; 0x48
   133dc:	str	r0, [sp, #68]	; 0x44
   133e0:	str	r0, [sp, #64]	; 0x40
   133e4:	b	1252c <__assert_fail@plt+0x12c0>
   133e8:	ldr	r1, [pc, #176]	; 134a0 <__assert_fail@plt+0x2234>
   133ec:	mov	r0, r6
   133f0:	bl	11020 <dcgettext@plt>
   133f4:	mov	r3, r8
   133f8:	mov	r1, r6
   133fc:	mov	r4, r9
   13400:	mov	r7, #1
   13404:	mov	r2, r0
   13408:	mov	r0, r6
   1340c:	bl	110a4 <error@plt>
   13410:	b	12f2c <__assert_fail@plt+0x1cc0>
   13414:	mov	r2, #5
   13418:	ldr	r1, [pc, #132]	; 134a4 <__assert_fail@plt+0x2238>
   1341c:	b	12cd4 <__assert_fail@plt+0x1a68>
   13420:	bl	11038 <__stack_chk_fail@plt>
   13424:	mov	r1, r4
   13428:	ldr	r2, [pc, #120]	; 134a8 <__assert_fail@plt+0x223c>
   1342c:	mov	r0, #1
   13430:	bl	110a4 <error@plt>
   13434:	ldr	r1, [pc, #112]	; 134ac <__assert_fail@plt+0x2240>
   13438:	mov	r0, #0
   1343c:	bl	11020 <dcgettext@plt>
   13440:	ldr	r3, [sl]
   13444:	mov	r1, #0
   13448:	mov	r2, r0
   1344c:	mov	r0, #1
   13450:	bl	110a4 <error@plt>
   13454:	mov	r2, #5
   13458:	ldr	r1, [pc, #80]	; 134b0 <__assert_fail@plt+0x2244>
   1345c:	b	12cd4 <__assert_fail@plt+0x1a68>
   13460:	ldr	r1, [pc, #76]	; 134b4 <__assert_fail@plt+0x2248>
   13464:	b	12cd8 <__assert_fail@plt+0x1a6c>
   13468:	mov	r3, r4
   1346c:	ldr	r1, [sp, #92]	; 0x5c
   13470:	ldr	r2, [pc, #64]	; 134b8 <__assert_fail@plt+0x224c>
   13474:	mov	r0, #1
   13478:	bl	110a4 <error@plt>
   1347c:	andeq	r6, r2, r4, asr #13
   13480:	andeq	r6, r2, r8, asr #13
   13484:			; <UNDEFINED> instruction: 0x000266bc
   13488:	andeq	r4, r1, r0, lsr #3
   1348c:	andeq	r0, r0, fp, asr r1
   13490:	ldrdeq	r4, [r1], -r0
   13494:	ldrdeq	r4, [r1], -r8
   13498:	andeq	r0, r0, lr, asr r1
   1349c:	andeq	r4, r1, ip, ror #25
   134a0:	strdeq	r4, [r1], -ip
   134a4:	andeq	r4, r1, r0, ror #19
   134a8:	strdeq	r4, [r1], -ip
   134ac:	muleq	r1, r0, sl
   134b0:	andeq	r4, r1, r8, lsr #21
   134b4:	andeq	r4, r1, r0, lsr sl
   134b8:	andeq	r4, r1, r4, lsr #23
   134bc:	mov	fp, #0
   134c0:	mov	lr, #0
   134c4:	pop	{r1}		; (ldr r1, [sp], #4)
   134c8:	mov	r2, sp
   134cc:	push	{r2}		; (str r2, [sp, #-4]!)
   134d0:	push	{r0}		; (str r0, [sp, #-4]!)
   134d4:	ldr	ip, [pc, #16]	; 134ec <__assert_fail@plt+0x2280>
   134d8:	push	{ip}		; (str ip, [sp, #-4]!)
   134dc:	ldr	r0, [pc, #12]	; 134f0 <__assert_fail@plt+0x2284>
   134e0:	ldr	r3, [pc, #12]	; 134f4 <__assert_fail@plt+0x2288>
   134e4:	bl	110d4 <__libc_start_main@plt>
   134e8:	bl	11254 <abort@plt>
   134ec:	strheq	r4, [r1], -r8
   134f0:	andeq	r1, r1, r8, ror r2
   134f4:	andeq	r4, r1, r8, asr r0
   134f8:	ldr	r3, [pc, #20]	; 13514 <__assert_fail@plt+0x22a8>
   134fc:	ldr	r2, [pc, #20]	; 13518 <__assert_fail@plt+0x22ac>
   13500:	add	r3, pc, r3
   13504:	ldr	r2, [r3, r2]
   13508:	cmp	r2, #0
   1350c:	bxeq	lr
   13510:	b	110e0 <__gmon_start__@plt>
   13514:	strdeq	r2, [r1], -ip
   13518:	strdeq	r0, [r0], -r4
   1351c:	ldr	r0, [pc, #24]	; 1353c <__assert_fail@plt+0x22d0>
   13520:	ldr	r3, [pc, #24]	; 13540 <__assert_fail@plt+0x22d4>
   13524:	cmp	r3, r0
   13528:	bxeq	lr
   1352c:	ldr	r3, [pc, #16]	; 13544 <__assert_fail@plt+0x22d8>
   13530:	cmp	r3, #0
   13534:	bxeq	lr
   13538:	bx	r3
   1353c:	andeq	r6, r2, r0, lsl r0
   13540:	andeq	r6, r2, r0, lsl r0
   13544:	andeq	r0, r0, r0
   13548:	ldr	r0, [pc, #36]	; 13574 <__assert_fail@plt+0x2308>
   1354c:	ldr	r1, [pc, #36]	; 13578 <__assert_fail@plt+0x230c>
   13550:	sub	r1, r1, r0
   13554:	asr	r1, r1, #2
   13558:	add	r1, r1, r1, lsr #31
   1355c:	asrs	r1, r1, #1
   13560:	bxeq	lr
   13564:	ldr	r3, [pc, #16]	; 1357c <__assert_fail@plt+0x2310>
   13568:	cmp	r3, #0
   1356c:	bxeq	lr
   13570:	bx	r3
   13574:	andeq	r6, r2, r0, lsl r0
   13578:	andeq	r6, r2, r0, lsl r0
   1357c:	andeq	r0, r0, r0
   13580:	push	{r4, lr}
   13584:	ldr	r4, [pc, #24]	; 135a4 <__assert_fail@plt+0x2338>
   13588:	ldrb	r3, [r4]
   1358c:	cmp	r3, #0
   13590:	popne	{r4, pc}
   13594:	bl	1351c <__assert_fail@plt+0x22b0>
   13598:	mov	r3, #1
   1359c:	strb	r3, [r4]
   135a0:	pop	{r4, pc}
   135a4:	andeq	r6, r2, r4, lsr r0
   135a8:	b	13548 <__assert_fail@plt+0x22dc>
   135ac:	push	{r4, r5, r6, r7, r8, lr}
   135b0:	sub	sp, sp, #16
   135b4:	ldr	r0, [pc, #188]	; 13678 <__assert_fail@plt+0x240c>
   135b8:	bl	110b0 <getenv@plt>
   135bc:	subs	r4, r0, #0
   135c0:	beq	13634 <__assert_fail@plt+0x23c8>
   135c4:	ldr	r7, [pc, #176]	; 1367c <__assert_fail@plt+0x2410>
   135c8:	ldr	r6, [pc, #176]	; 13680 <__assert_fail@plt+0x2414>
   135cc:	mov	r1, #0
   135d0:	ldr	r3, [r7]
   135d4:	mov	r0, r1
   135d8:	str	r3, [sp, #8]
   135dc:	mov	r2, #1
   135e0:	mvn	r3, #0
   135e4:	str	r4, [sp, #4]
   135e8:	str	r6, [sp]
   135ec:	bl	11260 <__snprintf_chk@plt>
   135f0:	add	r5, r0, #1
   135f4:	mov	r1, r5
   135f8:	mov	r0, #1
   135fc:	bl	10fc0 <calloc@plt>
   13600:	subs	r8, r0, #0
   13604:	beq	13658 <__assert_fail@plt+0x23ec>
   13608:	ldr	r3, [r7]
   1360c:	str	r4, [sp, #4]
   13610:	str	r3, [sp, #8]
   13614:	str	r6, [sp]
   13618:	mov	r1, r5
   1361c:	mvn	r3, #0
   13620:	mov	r2, #1
   13624:	bl	11260 <__snprintf_chk@plt>
   13628:	mov	r0, r8
   1362c:	add	sp, sp, #16
   13630:	pop	{r4, r5, r6, r7, r8, pc}
   13634:	mov	r2, #5
   13638:	ldr	r1, [pc, #68]	; 13684 <__assert_fail@plt+0x2418>
   1363c:	bl	11020 <dcgettext@plt>
   13640:	mov	r1, r4
   13644:	mov	r8, r4
   13648:	mov	r2, r0
   1364c:	mov	r0, r4
   13650:	bl	110a4 <error@plt>
   13654:	b	13628 <__assert_fail@plt+0x23bc>
   13658:	mov	r2, #5
   1365c:	ldr	r1, [pc, #36]	; 13688 <__assert_fail@plt+0x241c>
   13660:	bl	11020 <dcgettext@plt>
   13664:	mov	r1, r8
   13668:	mov	r2, r0
   1366c:	mov	r0, r8
   13670:	bl	110a4 <error@plt>
   13674:	b	13628 <__assert_fail@plt+0x23bc>
   13678:			; <UNDEFINED> instruction: 0x000141b4
   1367c:	andeq	r6, r2, r0, lsl r0
   13680:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13684:			; <UNDEFINED> instruction: 0x000141bc
   13688:	andeq	r4, r1, r0, ror #3
   1368c:	push	{r4, lr}
   13690:	mov	r2, #5
   13694:	mov	r4, r0
   13698:	ldr	r1, [pc, #520]	; 138a8 <__assert_fail@plt+0x263c>
   1369c:	mov	r0, #0
   136a0:	bl	11020 <dcgettext@plt>
   136a4:	mov	r1, r4
   136a8:	bl	1123c <fputs@plt>
   136ac:	mov	r2, #5
   136b0:	ldr	r1, [pc, #500]	; 138ac <__assert_fail@plt+0x2640>
   136b4:	mov	r0, #0
   136b8:	bl	11020 <dcgettext@plt>
   136bc:	ldr	r3, [pc, #492]	; 138b0 <__assert_fail@plt+0x2644>
   136c0:	mov	r1, #1
   136c4:	ldr	r3, [r3]
   136c8:	mov	r2, r0
   136cc:	mov	r0, r4
   136d0:	bl	11194 <__fprintf_chk@plt>
   136d4:	mov	r2, #5
   136d8:	ldr	r1, [pc, #468]	; 138b4 <__assert_fail@plt+0x2648>
   136dc:	mov	r0, #0
   136e0:	bl	11020 <dcgettext@plt>
   136e4:	mov	r1, r4
   136e8:	bl	1123c <fputs@plt>
   136ec:	mov	r2, #5
   136f0:	ldr	r1, [pc, #448]	; 138b8 <__assert_fail@plt+0x264c>
   136f4:	mov	r0, #0
   136f8:	bl	11020 <dcgettext@plt>
   136fc:	mov	r1, r4
   13700:	bl	1123c <fputs@plt>
   13704:	mov	r2, #5
   13708:	ldr	r1, [pc, #428]	; 138bc <__assert_fail@plt+0x2650>
   1370c:	mov	r0, #0
   13710:	bl	11020 <dcgettext@plt>
   13714:	mov	r1, r4
   13718:	bl	1123c <fputs@plt>
   1371c:	mov	r2, #5
   13720:	ldr	r1, [pc, #408]	; 138c0 <__assert_fail@plt+0x2654>
   13724:	mov	r0, #0
   13728:	bl	11020 <dcgettext@plt>
   1372c:	mov	r1, r4
   13730:	bl	1123c <fputs@plt>
   13734:	mov	r2, #5
   13738:	ldr	r1, [pc, #388]	; 138c4 <__assert_fail@plt+0x2658>
   1373c:	mov	r0, #0
   13740:	bl	11020 <dcgettext@plt>
   13744:	mov	r1, r4
   13748:	bl	1123c <fputs@plt>
   1374c:	mov	r2, #5
   13750:	ldr	r1, [pc, #368]	; 138c8 <__assert_fail@plt+0x265c>
   13754:	mov	r0, #0
   13758:	bl	11020 <dcgettext@plt>
   1375c:	mov	r1, r4
   13760:	bl	1123c <fputs@plt>
   13764:	mov	r2, #5
   13768:	ldr	r1, [pc, #348]	; 138cc <__assert_fail@plt+0x2660>
   1376c:	mov	r0, #0
   13770:	bl	11020 <dcgettext@plt>
   13774:	mov	r1, r4
   13778:	bl	1123c <fputs@plt>
   1377c:	mov	r2, #5
   13780:	ldr	r1, [pc, #328]	; 138d0 <__assert_fail@plt+0x2664>
   13784:	mov	r0, #0
   13788:	bl	11020 <dcgettext@plt>
   1378c:	mov	r1, r4
   13790:	bl	1123c <fputs@plt>
   13794:	mov	r2, #5
   13798:	ldr	r1, [pc, #308]	; 138d4 <__assert_fail@plt+0x2668>
   1379c:	mov	r0, #0
   137a0:	bl	11020 <dcgettext@plt>
   137a4:	mov	r1, r4
   137a8:	bl	1123c <fputs@plt>
   137ac:	mov	r2, #5
   137b0:	ldr	r1, [pc, #288]	; 138d8 <__assert_fail@plt+0x266c>
   137b4:	mov	r0, #0
   137b8:	bl	11020 <dcgettext@plt>
   137bc:	mov	r1, r4
   137c0:	bl	1123c <fputs@plt>
   137c4:	mov	r2, #5
   137c8:	ldr	r1, [pc, #268]	; 138dc <__assert_fail@plt+0x2670>
   137cc:	mov	r0, #0
   137d0:	bl	11020 <dcgettext@plt>
   137d4:	mov	r1, r4
   137d8:	bl	1123c <fputs@plt>
   137dc:	mov	r2, #5
   137e0:	ldr	r1, [pc, #248]	; 138e0 <__assert_fail@plt+0x2674>
   137e4:	mov	r0, #0
   137e8:	bl	11020 <dcgettext@plt>
   137ec:	mov	r1, r4
   137f0:	bl	1123c <fputs@plt>
   137f4:	mov	r2, #5
   137f8:	ldr	r1, [pc, #228]	; 138e4 <__assert_fail@plt+0x2678>
   137fc:	mov	r0, #0
   13800:	bl	11020 <dcgettext@plt>
   13804:	mov	r1, r4
   13808:	bl	1123c <fputs@plt>
   1380c:	mov	r2, #5
   13810:	ldr	r1, [pc, #208]	; 138e8 <__assert_fail@plt+0x267c>
   13814:	mov	r0, #0
   13818:	bl	11020 <dcgettext@plt>
   1381c:	mov	r1, r4
   13820:	bl	1123c <fputs@plt>
   13824:	mov	r2, #5
   13828:	ldr	r1, [pc, #188]	; 138ec <__assert_fail@plt+0x2680>
   1382c:	mov	r0, #0
   13830:	bl	11020 <dcgettext@plt>
   13834:	mov	r1, r4
   13838:	bl	1123c <fputs@plt>
   1383c:	mov	r2, #5
   13840:	ldr	r1, [pc, #168]	; 138f0 <__assert_fail@plt+0x2684>
   13844:	mov	r0, #0
   13848:	bl	11020 <dcgettext@plt>
   1384c:	mov	r1, r4
   13850:	bl	1123c <fputs@plt>
   13854:	mov	r2, #5
   13858:	ldr	r1, [pc, #148]	; 138f4 <__assert_fail@plt+0x2688>
   1385c:	mov	r0, #0
   13860:	bl	11020 <dcgettext@plt>
   13864:	mov	r1, r4
   13868:	bl	1123c <fputs@plt>
   1386c:	mov	r2, #5
   13870:	ldr	r1, [pc, #128]	; 138f8 <__assert_fail@plt+0x268c>
   13874:	mov	r0, #0
   13878:	bl	11020 <dcgettext@plt>
   1387c:	ldr	r3, [pc, #120]	; 138fc <__assert_fail@plt+0x2690>
   13880:	mov	r1, #1
   13884:	mov	r2, r0
   13888:	mov	r0, r4
   1388c:	bl	11194 <__fprintf_chk@plt>
   13890:	ldr	r3, [pc, #104]	; 13900 <__assert_fail@plt+0x2694>
   13894:	ldr	r0, [r3]
   13898:	sub	r0, r0, r4
   1389c:	clz	r0, r0
   138a0:	lsr	r0, r0, #5
   138a4:	bl	11110 <exit@plt>
   138a8:	strdeq	r4, [r1], -ip
   138ac:	andeq	r4, r1, r8, lsl #4
   138b0:	andeq	r6, r2, r0, lsl r0
   138b4:	andeq	r4, r1, r8, lsr #4
   138b8:	andeq	r4, r1, r4, lsr r2
   138bc:	andeq	r4, r1, r0, ror #4
   138c0:	muleq	r1, r8, r2
   138c4:	ldrdeq	r4, [r1], -ip
   138c8:	andeq	r4, r1, r0, lsr #6
   138cc:	andeq	r4, r1, r4, asr r3
   138d0:	andeq	r4, r1, r8, lsl #7
   138d4:			; <UNDEFINED> instruction: 0x000143bc
   138d8:	strdeq	r4, [r1], -r0
   138dc:	andeq	r4, r1, r0, lsr r4
   138e0:	andeq	r4, r1, r8, ror #8
   138e4:	andeq	r4, r1, r8, lsr #9
   138e8:	andeq	r4, r1, r0, ror #9
   138ec:	andeq	r4, r1, r8, ror lr
   138f0:	andeq	r4, r1, r0, lsr #10
   138f4:	andeq	r4, r1, ip, asr #10
   138f8:	andeq	r4, r1, r4, lsl #11
   138fc:	andeq	r4, r1, r0, lsr #11
   13900:	andeq	r6, r2, r0, lsr #32
   13904:	push	{r4, r5, r6, lr}
   13908:	subs	r4, r1, #0
   1390c:	sub	sp, sp, #8
   13910:	ble	13958 <__assert_fail@plt+0x26ec>
   13914:	mov	r5, r2
   13918:	mov	r6, r0
   1391c:	bl	11128 <strlen@plt>
   13920:	ldr	ip, [pc, #64]	; 13968 <__assert_fail@plt+0x26fc>
   13924:	ldr	r1, [pc, #64]	; 1396c <__assert_fail@plt+0x2700>
   13928:	str	r6, [sp]
   1392c:	cmp	r0, r4
   13930:	movge	r4, r0
   13934:	cmp	r5, #0
   13938:	mov	r3, r4
   1393c:	mov	r2, r4
   13940:	movne	r1, ip
   13944:	mov	r0, #1
   13948:	bl	1117c <__printf_chk@plt>
   1394c:	mov	r0, r4
   13950:	add	sp, sp, #8
   13954:	pop	{r4, r5, r6, pc}
   13958:	bl	110bc <puts@plt>
   1395c:	mov	r0, r4
   13960:	add	sp, sp, #8
   13964:	pop	{r4, r5, r6, pc}
   13968:	andeq	r4, r1, r8, lsr #11
   1396c:			; <UNDEFINED> instruction: 0x000145b0
   13970:	push	{r4, lr}
   13974:	mov	r4, r0
   13978:	ldr	r1, [pc, #764]	; 13c7c <__assert_fail@plt+0x2a10>
   1397c:	bl	11218 <fopen64@plt>
   13980:	cmp	r0, #0
   13984:	beq	139b4 <__assert_fail@plt+0x2748>
   13988:	bl	111ac <fclose@plt>
   1398c:	mov	r2, #5
   13990:	ldr	r1, [pc, #744]	; 13c80 <__assert_fail@plt+0x2a14>
   13994:	mov	r0, #0
   13998:	bl	11020 <dcgettext@plt>
   1399c:	mov	r1, #0
   139a0:	mov	r2, r0
   139a4:	mov	r0, r1
   139a8:	bl	110a4 <error@plt>
   139ac:	mov	r0, #0
   139b0:	pop	{r4, pc}
   139b4:	mov	r0, r4
   139b8:	ldr	r1, [pc, #708]	; 13c84 <__assert_fail@plt+0x2a18>
   139bc:	bl	11218 <fopen64@plt>
   139c0:	subs	r4, r0, #0
   139c4:	beq	139ac <__assert_fail@plt+0x2740>
   139c8:	mov	r3, r4
   139cc:	mov	r2, #21
   139d0:	mov	r1, #1
   139d4:	ldr	r0, [pc, #684]	; 13c88 <__assert_fail@plt+0x2a1c>
   139d8:	bl	11074 <fwrite@plt>
   139dc:	mov	r1, r4
   139e0:	mov	r0, #10
   139e4:	bl	11200 <fputc@plt>
   139e8:	mov	r3, r4
   139ec:	mov	r2, #38	; 0x26
   139f0:	mov	r1, #1
   139f4:	ldr	r0, [pc, #656]	; 13c8c <__assert_fail@plt+0x2a20>
   139f8:	bl	11074 <fwrite@plt>
   139fc:	mov	r3, r4
   13a00:	mov	r2, #35	; 0x23
   13a04:	mov	r1, #1
   13a08:	ldr	r0, [pc, #640]	; 13c90 <__assert_fail@plt+0x2a24>
   13a0c:	bl	11074 <fwrite@plt>
   13a10:	mov	r1, r4
   13a14:	mov	r0, #10
   13a18:	bl	11200 <fputc@plt>
   13a1c:	mov	r3, r4
   13a20:	mov	r2, #17
   13a24:	mov	r1, #1
   13a28:	ldr	r0, [pc, #612]	; 13c94 <__assert_fail@plt+0x2a28>
   13a2c:	bl	11074 <fwrite@plt>
   13a30:	mov	r1, r4
   13a34:	mov	r0, #10
   13a38:	bl	11200 <fputc@plt>
   13a3c:	mov	r3, r4
   13a40:	mov	r2, #40	; 0x28
   13a44:	mov	r1, #1
   13a48:	ldr	r0, [pc, #584]	; 13c98 <__assert_fail@plt+0x2a2c>
   13a4c:	bl	11074 <fwrite@plt>
   13a50:	mov	r1, r4
   13a54:	mov	r0, #10
   13a58:	bl	11200 <fputc@plt>
   13a5c:	ldr	r3, [pc, #568]	; 13c9c <__assert_fail@plt+0x2a30>
   13a60:	ldr	r2, [pc, #568]	; 13ca0 <__assert_fail@plt+0x2a34>
   13a64:	mov	r1, #1
   13a68:	ldr	r3, [r3]
   13a6c:	mov	r0, r4
   13a70:	bl	11194 <__fprintf_chk@plt>
   13a74:	ldr	r3, [pc, #552]	; 13ca4 <__assert_fail@plt+0x2a38>
   13a78:	ldr	r2, [pc, #544]	; 13ca0 <__assert_fail@plt+0x2a34>
   13a7c:	mov	r1, #1
   13a80:	ldr	r3, [r3]
   13a84:	mov	r0, r4
   13a88:	bl	11194 <__fprintf_chk@plt>
   13a8c:	ldr	r3, [pc, #532]	; 13ca8 <__assert_fail@plt+0x2a3c>
   13a90:	ldr	r2, [pc, #520]	; 13ca0 <__assert_fail@plt+0x2a34>
   13a94:	mov	r1, #1
   13a98:	ldr	r3, [r3]
   13a9c:	mov	r0, r4
   13aa0:	bl	11194 <__fprintf_chk@plt>
   13aa4:	ldr	r3, [pc, #512]	; 13cac <__assert_fail@plt+0x2a40>
   13aa8:	ldr	r2, [pc, #496]	; 13ca0 <__assert_fail@plt+0x2a34>
   13aac:	mov	r1, #1
   13ab0:	ldr	r3, [r3]
   13ab4:	mov	r0, r4
   13ab8:	bl	11194 <__fprintf_chk@plt>
   13abc:	mov	r3, r4
   13ac0:	mov	r2, #6
   13ac4:	mov	r1, #1
   13ac8:	ldr	r0, [pc, #480]	; 13cb0 <__assert_fail@plt+0x2a44>
   13acc:	bl	11074 <fwrite@plt>
   13ad0:	mov	r3, r4
   13ad4:	mov	r2, #5
   13ad8:	mov	r1, #1
   13adc:	ldr	r0, [pc, #464]	; 13cb4 <__assert_fail@plt+0x2a48>
   13ae0:	bl	11074 <fwrite@plt>
   13ae4:	mov	r3, r4
   13ae8:	mov	r2, #5
   13aec:	mov	r1, #1
   13af0:	ldr	r0, [pc, #448]	; 13cb8 <__assert_fail@plt+0x2a4c>
   13af4:	bl	11074 <fwrite@plt>
   13af8:	mov	r3, r4
   13afc:	mov	r2, #14
   13b00:	mov	r1, #1
   13b04:	ldr	r0, [pc, #432]	; 13cbc <__assert_fail@plt+0x2a50>
   13b08:	bl	11074 <fwrite@plt>
   13b0c:	mov	r3, r4
   13b10:	mov	r2, #14
   13b14:	mov	r1, #1
   13b18:	ldr	r0, [pc, #416]	; 13cc0 <__assert_fail@plt+0x2a54>
   13b1c:	bl	11074 <fwrite@plt>
   13b20:	mov	r3, r4
   13b24:	mov	r2, #15
   13b28:	mov	r1, #1
   13b2c:	ldr	r0, [pc, #400]	; 13cc4 <__assert_fail@plt+0x2a58>
   13b30:	bl	11074 <fwrite@plt>
   13b34:	mov	r3, r4
   13b38:	mov	r2, #15
   13b3c:	mov	r1, #1
   13b40:	ldr	r0, [pc, #384]	; 13cc8 <__assert_fail@plt+0x2a5c>
   13b44:	bl	11074 <fwrite@plt>
   13b48:	mov	r3, r4
   13b4c:	mov	r2, #12
   13b50:	mov	r1, #1
   13b54:	ldr	r0, [pc, #368]	; 13ccc <__assert_fail@plt+0x2a60>
   13b58:	bl	11074 <fwrite@plt>
   13b5c:	mov	r3, r4
   13b60:	mov	r2, #11
   13b64:	mov	r1, #1
   13b68:	ldr	r0, [pc, #352]	; 13cd0 <__assert_fail@plt+0x2a64>
   13b6c:	bl	11074 <fwrite@plt>
   13b70:	mov	r3, r4
   13b74:	mov	r2, #15
   13b78:	mov	r1, #1
   13b7c:	ldr	r0, [pc, #336]	; 13cd4 <__assert_fail@plt+0x2a68>
   13b80:	bl	11074 <fwrite@plt>
   13b84:	mov	r3, r4
   13b88:	mov	r2, #6
   13b8c:	mov	r1, #1
   13b90:	ldr	r0, [pc, #320]	; 13cd8 <__assert_fail@plt+0x2a6c>
   13b94:	bl	11074 <fwrite@plt>
   13b98:	mov	r3, r4
   13b9c:	mov	r2, #16
   13ba0:	mov	r1, #1
   13ba4:	ldr	r0, [pc, #304]	; 13cdc <__assert_fail@plt+0x2a70>
   13ba8:	bl	11074 <fwrite@plt>
   13bac:	mov	r3, r4
   13bb0:	mov	r2, #13
   13bb4:	mov	r1, #1
   13bb8:	ldr	r0, [pc, #288]	; 13ce0 <__assert_fail@plt+0x2a74>
   13bbc:	bl	11074 <fwrite@plt>
   13bc0:	mov	r3, r4
   13bc4:	mov	r2, #8
   13bc8:	mov	r1, #1
   13bcc:	ldr	r0, [pc, #272]	; 13ce4 <__assert_fail@plt+0x2a78>
   13bd0:	bl	11074 <fwrite@plt>
   13bd4:	mov	r3, r4
   13bd8:	mov	r2, #9
   13bdc:	mov	r1, #1
   13be0:	ldr	r0, [pc, #256]	; 13ce8 <__assert_fail@plt+0x2a7c>
   13be4:	bl	11074 <fwrite@plt>
   13be8:	ldr	r3, [pc, #252]	; 13cec <__assert_fail@plt+0x2a80>
   13bec:	ldr	r2, [pc, #172]	; 13ca0 <__assert_fail@plt+0x2a34>
   13bf0:	mov	r1, #1
   13bf4:	ldr	r3, [r3]
   13bf8:	mov	r0, r4
   13bfc:	bl	11194 <__fprintf_chk@plt>
   13c00:	mov	r1, r4
   13c04:	mov	r0, #10
   13c08:	bl	11200 <fputc@plt>
   13c0c:	mov	r1, r4
   13c10:	mov	r0, #10
   13c14:	bl	11200 <fputc@plt>
   13c18:	mov	r3, r4
   13c1c:	mov	r2, #10
   13c20:	mov	r1, #1
   13c24:	ldr	r0, [pc, #196]	; 13cf0 <__assert_fail@plt+0x2a84>
   13c28:	bl	11074 <fwrite@plt>
   13c2c:	mov	r1, r4
   13c30:	mov	r0, #10
   13c34:	bl	11200 <fputc@plt>
   13c38:	mov	r3, r4
   13c3c:	mov	r2, #67	; 0x43
   13c40:	mov	r1, #1
   13c44:	ldr	r0, [pc, #168]	; 13cf4 <__assert_fail@plt+0x2a88>
   13c48:	bl	11074 <fwrite@plt>
   13c4c:	mov	r3, r4
   13c50:	mov	r2, #10
   13c54:	mov	r1, #1
   13c58:	ldr	r0, [pc, #152]	; 13cf8 <__assert_fail@plt+0x2a8c>
   13c5c:	bl	11074 <fwrite@plt>
   13c60:	mov	r1, r4
   13c64:	mov	r0, #10
   13c68:	bl	11200 <fputc@plt>
   13c6c:	mov	r0, r4
   13c70:	bl	111ac <fclose@plt>
   13c74:	mov	r0, #1
   13c78:	pop	{r4, pc}
   13c7c:			; <UNDEFINED> instruction: 0x000145b8
   13c80:			; <UNDEFINED> instruction: 0x000145bc
   13c84:	strdeq	r4, [r1], -r0
   13c88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c8c:	andeq	r4, r1, ip, lsl #12
   13c90:	andeq	r4, r1, r4, lsr r6
   13c94:	andeq	r4, r1, r8, asr r6
   13c98:	andeq	r4, r1, ip, ror #12
   13c9c:	ldrdeq	r6, [r2], -r0
   13ca0:	muleq	r1, r8, r6
   13ca4:			; <UNDEFINED> instruction: 0x000266b8
   13ca8:	andeq	r6, r2, ip, asr #13
   13cac:	andeq	r6, r2, r0, asr #13
   13cb0:	andeq	r4, r1, r0, lsr #13
   13cb4:	andeq	r4, r1, r8, lsr #13
   13cb8:			; <UNDEFINED> instruction: 0x000146b0
   13cbc:			; <UNDEFINED> instruction: 0x000146b8
   13cc0:	andeq	r4, r1, r8, asr #13
   13cc4:	ldrdeq	r4, [r1], -r8
   13cc8:	andeq	r4, r1, r8, ror #13
   13ccc:	strdeq	r4, [r1], -r8
   13cd0:	andeq	r4, r1, r8, lsl #14
   13cd4:	andeq	r4, r1, r4, lsl r7
   13cd8:	andeq	r4, r1, r4, lsr #14
   13cdc:	andeq	r4, r1, ip, lsr #14
   13ce0:	andeq	r4, r1, r0, asr #14
   13ce4:	andeq	r4, r1, r0, asr r7
   13ce8:	andeq	r4, r1, ip, asr r7
   13cec:			; <UNDEFINED> instruction: 0x000266bc
   13cf0:	andeq	r4, r1, r8, ror #14
   13cf4:	andeq	r4, r1, r4, ror r7
   13cf8:			; <UNDEFINED> instruction: 0x000147b8
   13cfc:	push	{r4, r5, r6, lr}
   13d00:	mov	r6, r0
   13d04:	ldr	r5, [pc, #252]	; 13e08 <__assert_fail@plt+0x2b9c>
   13d08:	ldr	r3, [r5]
   13d0c:	cmp	r3, #1
   13d10:	beq	13d60 <__assert_fail@plt+0x2af4>
   13d14:	ldr	r3, [r5, #4]
   13d18:	cmp	r3, #0
   13d1c:	beq	13d58 <__assert_fail@plt+0x2aec>
   13d20:	ldr	r4, [r5, #8]
   13d24:	cmp	r4, #0
   13d28:	str	r4, [r5, #12]
   13d2c:	bne	13d44 <__assert_fail@plt+0x2ad8>
   13d30:	b	13e00 <__assert_fail@plt+0x2b94>
   13d34:	ldr	r4, [r4, #32]
   13d38:	cmp	r4, #0
   13d3c:	str	r4, [r5, #12]
   13d40:	beq	13e00 <__assert_fail@plt+0x2b94>
   13d44:	mov	r1, r4
   13d48:	mov	r0, r6
   13d4c:	bl	10fd8 <strcmp@plt>
   13d50:	cmp	r0, #0
   13d54:	bne	13d34 <__assert_fail@plt+0x2ac8>
   13d58:	mov	r0, #1
   13d5c:	pop	{r4, r5, r6, pc}
   13d60:	ldr	r1, [pc, #164]	; 13e0c <__assert_fail@plt+0x2ba0>
   13d64:	bl	10fd8 <strcmp@plt>
   13d68:	cmp	r0, #0
   13d6c:	popeq	{r4, r5, r6, pc}
   13d70:	ldr	r1, [pc, #152]	; 13e10 <__assert_fail@plt+0x2ba4>
   13d74:	mov	r0, r6
   13d78:	bl	10fd8 <strcmp@plt>
   13d7c:	cmp	r0, #0
   13d80:	popeq	{r4, r5, r6, pc}
   13d84:	ldr	r1, [pc, #136]	; 13e14 <__assert_fail@plt+0x2ba8>
   13d88:	mov	r0, r6
   13d8c:	bl	10fd8 <strcmp@plt>
   13d90:	cmp	r0, #0
   13d94:	popeq	{r4, r5, r6, pc}
   13d98:	ldr	r1, [pc, #120]	; 13e18 <__assert_fail@plt+0x2bac>
   13d9c:	mov	r0, r6
   13da0:	bl	10fd8 <strcmp@plt>
   13da4:	cmp	r0, #0
   13da8:	popeq	{r4, r5, r6, pc}
   13dac:	ldr	r1, [pc, #104]	; 13e1c <__assert_fail@plt+0x2bb0>
   13db0:	mov	r0, r6
   13db4:	bl	10fd8 <strcmp@plt>
   13db8:	cmp	r0, #0
   13dbc:	popeq	{r4, r5, r6, pc}
   13dc0:	ldr	r1, [pc, #88]	; 13e20 <__assert_fail@plt+0x2bb4>
   13dc4:	mov	r0, r6
   13dc8:	bl	10fd8 <strcmp@plt>
   13dcc:	cmp	r0, #0
   13dd0:	popeq	{r4, r5, r6, pc}
   13dd4:	ldr	r1, [pc, #72]	; 13e24 <__assert_fail@plt+0x2bb8>
   13dd8:	mov	r0, r6
   13ddc:	bl	10fd8 <strcmp@plt>
   13de0:	cmp	r0, #0
   13de4:	popeq	{r4, r5, r6, pc}
   13de8:	mov	r0, r6
   13dec:	ldr	r1, [pc, #52]	; 13e28 <__assert_fail@plt+0x2bbc>
   13df0:	bl	10fd8 <strcmp@plt>
   13df4:	adds	r0, r0, #0
   13df8:	movne	r0, #1
   13dfc:	pop	{r4, r5, r6, pc}
   13e00:	mov	r0, #0
   13e04:	pop	{r4, r5, r6, pc}
   13e08:	andeq	r6, r2, r8, lsr r0
   13e0c:	andeq	r4, r1, r4, asr #15
   13e10:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e14:	andeq	r4, r1, r4, ror #15
   13e18:	strdeq	r4, [r1], -r0
   13e1c:	andeq	r4, r1, r0, lsl #16
   13e20:	andeq	r4, r1, r0, lsl r8
   13e24:	andeq	r4, r1, r0, lsr #16
   13e28:	andeq	r4, r1, r0, lsr r8
   13e2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13e30:	sub	sp, sp, #20
   13e34:	mov	r4, r3
   13e38:	ldr	ip, [sp, #48]	; 0x30
   13e3c:	mov	r8, r0
   13e40:	cmp	ip, #0
   13e44:	mov	r5, r1
   13e48:	mov	r9, r2
   13e4c:	ldr	r3, [sp, #52]	; 0x34
   13e50:	ldrd	r6, [sp, #56]	; 0x38
   13e54:	bne	13e68 <__assert_fail@plt+0x2bfc>
   13e58:	ldr	r2, [pc, #204]	; 13f2c <__assert_fail@plt+0x2cc0>
   13e5c:	ldr	r2, [r2]
   13e60:	cmp	r2, r3
   13e64:	beq	13eb0 <__assert_fail@plt+0x2c44>
   13e68:	mov	r1, #47	; 0x2f
   13e6c:	ldr	r0, [pc, #188]	; 13f30 <__assert_fail@plt+0x2cc4>
   13e70:	bl	111dc <strrchr@plt>
   13e74:	subs	r3, r0, #0
   13e78:	beq	13eec <__assert_fail@plt+0x2c80>
   13e7c:	cmp	r4, #0
   13e80:	bne	13e9c <__assert_fail@plt+0x2c30>
   13e84:	ldrb	r2, [r3, #1]
   13e88:	cmp	r2, #0
   13e8c:	addne	r3, r3, #1
   13e90:	mov	r0, r3
   13e94:	add	sp, sp, #20
   13e98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13e9c:	mov	r1, #47	; 0x2f
   13ea0:	ldr	r0, [pc, #136]	; 13f30 <__assert_fail@plt+0x2cc4>
   13ea4:	add	sp, sp, #20
   13ea8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13eac:	b	11134 <strchr@plt>
   13eb0:	ldr	r1, [pc, #124]	; 13f34 <__assert_fail@plt+0x2cc8>
   13eb4:	ldr	r0, [pc, #116]	; 13f30 <__assert_fail@plt+0x2cc4>
   13eb8:	bl	10fcc <strstr@plt>
   13ebc:	cmp	r0, #0
   13ec0:	beq	13e68 <__assert_fail@plt+0x2bfc>
   13ec4:	ldr	r2, [pc, #108]	; 13f38 <__assert_fail@plt+0x2ccc>
   13ec8:	mov	r3, #64	; 0x40
   13ecc:	str	r2, [sp]
   13ed0:	mov	r1, r3
   13ed4:	strd	r6, [sp, #8]
   13ed8:	mov	r2, #1
   13edc:	ldr	r0, [pc, #88]	; 13f3c <__assert_fail@plt+0x2cd0>
   13ee0:	bl	11260 <__snprintf_chk@plt>
   13ee4:	ldr	r3, [pc, #80]	; 13f3c <__assert_fail@plt+0x2cd0>
   13ee8:	b	13e90 <__assert_fail@plt+0x2c24>
   13eec:	mov	r2, #5
   13ef0:	ldr	r1, [pc, #72]	; 13f40 <__assert_fail@plt+0x2cd4>
   13ef4:	bl	11020 <dcgettext@plt>
   13ef8:	ldr	r2, [r8]
   13efc:	cmp	r2, r5
   13f00:	mov	r3, r0
   13f04:	bcc	13e90 <__assert_fail@plt+0x2c24>
   13f08:	add	r5, r5, r9
   13f0c:	cmp	r2, r5
   13f10:	bhi	13e90 <__assert_fail@plt+0x2c24>
   13f14:	mov	r2, #5
   13f18:	ldr	r1, [pc, #36]	; 13f44 <__assert_fail@plt+0x2cd8>
   13f1c:	mov	r0, #0
   13f20:	add	sp, sp, #20
   13f24:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13f28:	b	11020 <dcgettext@plt>
   13f2c:	andeq	r6, r2, r8
   13f30:	andeq	r6, r2, r8, lsl #1
   13f34:	andeq	r4, r1, r8, lsr r8
   13f38:	andeq	r4, r1, r0, asr #16
   13f3c:	andeq	r6, r2, r8, asr #32
   13f40:	andeq	r4, r1, r4, asr r8
   13f44:	andeq	r4, r1, r0, ror #16
   13f48:	push	{r4, r5, r6, lr}
   13f4c:	mov	r4, r0
   13f50:	bl	1108c <__fpending@plt>
   13f54:	mov	r6, r0
   13f58:	mov	r0, r4
   13f5c:	bl	10ffc <ferror@plt>
   13f60:	mov	r5, r0
   13f64:	mov	r0, r4
   13f68:	bl	111ac <fclose@plt>
   13f6c:	cmp	r5, #0
   13f70:	mov	r4, r0
   13f74:	bne	13f94 <__assert_fail@plt+0x2d28>
   13f78:	cmp	r0, #0
   13f7c:	beq	13f8c <__assert_fail@plt+0x2d20>
   13f80:	cmp	r6, #0
   13f84:	beq	13fbc <__assert_fail@plt+0x2d50>
   13f88:	mvn	r4, #0
   13f8c:	mov	r0, r4
   13f90:	pop	{r4, r5, r6, pc}
   13f94:	cmp	r0, #0
   13f98:	bne	13f88 <__assert_fail@plt+0x2d1c>
   13f9c:	bl	11140 <__errno_location@plt>
   13fa0:	ldr	r3, [r0]
   13fa4:	cmp	r3, #32
   13fa8:	beq	13f88 <__assert_fail@plt+0x2d1c>
   13fac:	str	r4, [r0]
   13fb0:	mvn	r4, #0
   13fb4:	mov	r0, r4
   13fb8:	pop	{r4, r5, r6, pc}
   13fbc:	bl	11140 <__errno_location@plt>
   13fc0:	ldr	r4, [r0]
   13fc4:	subs	r4, r4, #9
   13fc8:	mvnne	r4, #0
   13fcc:	mov	r0, r4
   13fd0:	pop	{r4, r5, r6, pc}
   13fd4:	ldr	r3, [pc, #108]	; 14048 <__assert_fail@plt+0x2ddc>
   13fd8:	push	{r4, lr}
   13fdc:	ldr	r0, [r3]
   13fe0:	bl	13f48 <__assert_fail@plt+0x2cdc>
   13fe4:	cmp	r0, #0
   13fe8:	beq	14000 <__assert_fail@plt+0x2d94>
   13fec:	bl	11140 <__errno_location@plt>
   13ff0:	ldr	r3, [r0]
   13ff4:	mov	r4, r0
   13ff8:	cmp	r3, #32
   13ffc:	bne	1401c <__assert_fail@plt+0x2db0>
   14000:	ldr	r3, [pc, #68]	; 1404c <__assert_fail@plt+0x2de0>
   14004:	ldr	r0, [r3]
   14008:	bl	13f48 <__assert_fail@plt+0x2cdc>
   1400c:	cmp	r0, #0
   14010:	popeq	{r4, pc}
   14014:	mov	r0, #1
   14018:	bl	11008 <_exit@plt>
   1401c:	mov	r2, #5
   14020:	ldr	r1, [pc, #40]	; 14050 <__assert_fail@plt+0x2de4>
   14024:	mov	r0, #0
   14028:	bl	11020 <dcgettext@plt>
   1402c:	ldr	r1, [r4]
   14030:	ldr	r2, [pc, #28]	; 14054 <__assert_fail@plt+0x2de8>
   14034:	mov	r3, r0
   14038:	mov	r0, #0
   1403c:	bl	110a4 <error@plt>
   14040:	mov	r0, #1
   14044:	bl	11008 <_exit@plt>
   14048:	andeq	r6, r2, ip, lsr #32
   1404c:	andeq	r6, r2, r0, lsr #32
   14050:	strdeq	r4, [r1], -r0
   14054:	andeq	r4, r1, r0, ror #22
   14058:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1405c:	mov	r7, r0
   14060:	ldr	r6, [pc, #72]	; 140b0 <__assert_fail@plt+0x2e44>
   14064:	ldr	r5, [pc, #72]	; 140b4 <__assert_fail@plt+0x2e48>
   14068:	add	r6, pc, r6
   1406c:	add	r5, pc, r5
   14070:	sub	r6, r6, r5
   14074:	mov	r8, r1
   14078:	mov	r9, r2
   1407c:	bl	10fa0 <_init@@Base>
   14080:	asrs	r6, r6, #2
   14084:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14088:	mov	r4, #0
   1408c:	add	r4, r4, #1
   14090:	ldr	r3, [r5], #4
   14094:	mov	r2, r9
   14098:	mov	r1, r8
   1409c:	mov	r0, r7
   140a0:	blx	r3
   140a4:	cmp	r6, r4
   140a8:	bne	1408c <__assert_fail@plt+0x2e20>
   140ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140b0:	andeq	r1, r1, ip, ror sp
   140b4:	andeq	r1, r1, r4, ror sp
   140b8:	bx	lr
   140bc:	ldr	r3, [pc, #12]	; 140d0 <__assert_fail@plt+0x2e64>
   140c0:	mov	r1, #0
   140c4:	add	r3, pc, r3
   140c8:	ldr	r2, [r3]
   140cc:	b	11158 <__cxa_atexit@plt>
   140d0:	andeq	r1, r1, r8, lsr pc

Disassembly of section .fini:

000140d4 <_fini@@Base>:
   140d4:	push	{r3, lr}
   140d8:	pop	{r3, pc}
