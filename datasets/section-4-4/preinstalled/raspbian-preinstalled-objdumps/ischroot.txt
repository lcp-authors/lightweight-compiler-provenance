
raspbian-preinstalled/ischroot:     file format elf32-littlearm


Disassembly of section .init:

00010588 <.init>:
   10588:	push	{r3, lr}
   1058c:	bl	10874 <__lxstat64@plt+0x20c>
   10590:	pop	{r3, pc}

Disassembly of section .plt:

00010594 <strstr@plt-0x14>:
   10594:	push	{lr}		; (str lr, [sp, #-4]!)
   10598:	ldr	lr, [pc, #4]	; 105a4 <strstr@plt-0x4>
   1059c:	add	lr, pc, lr
   105a0:	ldr	pc, [lr, #8]!
   105a4:	andeq	r0, r1, ip, asr sl

000105a8 <strstr@plt>:
   105a8:	add	ip, pc, #0, 12
   105ac:	add	ip, ip, #16, 20	; 0x10000
   105b0:	ldr	pc, [ip, #2652]!	; 0xa5c

000105b4 <strcmp@plt>:
   105b4:	add	ip, pc, #0, 12
   105b8:	add	ip, ip, #16, 20	; 0x10000
   105bc:	ldr	pc, [ip, #2644]!	; 0xa54

000105c0 <read@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #16, 20	; 0x10000
   105c8:	ldr	pc, [ip, #2636]!	; 0xa4c

000105cc <memcmp@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #16, 20	; 0x10000
   105d4:	ldr	pc, [ip, #2628]!	; 0xa44

000105d8 <__stack_chk_fail@plt>:
   105d8:	add	ip, pc, #0, 12
   105dc:	add	ip, ip, #16, 20	; 0x10000
   105e0:	ldr	pc, [ip, #2620]!	; 0xa3c

000105e4 <geteuid@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2612]!	; 0xa34

000105f0 <fwrite@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2604]!	; 0xa2c

000105fc <open64@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2596]!	; 0xa24

00010608 <getenv@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2588]!	; 0xa1c

00010614 <__libc_start_main@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2580]!	; 0xa14

00010620 <__gmon_start__@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2572]!	; 0xa0c

0001062c <getopt_long@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2564]!	; 0xa04

00010638 <exit@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2556]!	; 0x9fc

00010644 <__xstat64@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2548]!	; 0x9f4

00010650 <abort@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2540]!	; 0x9ec

0001065c <close@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2532]!	; 0x9e4

00010668 <__lxstat64@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00010674 <.text>:
   10674:	ldr	r3, [pc, #420]	; 10820 <__lxstat64@plt+0x1b8>
   10678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1067c:	mov	sl, #0
   10680:	sub	sp, sp, #20
   10684:	ldr	r9, [pc, #408]	; 10824 <__lxstat64@plt+0x1bc>
   10688:	ldr	r8, [pc, #408]	; 10828 <__lxstat64@plt+0x1c0>
   1068c:	ldr	r3, [r3]
   10690:	mov	r7, r0
   10694:	mov	r6, r1
   10698:	mov	fp, sl
   1069c:	mov	r5, sl
   106a0:	add	r4, sp, #8
   106a4:	str	r3, [sp, #12]
   106a8:	str	r4, [sp]
   106ac:	mov	r3, r9
   106b0:	mov	r2, r8
   106b4:	mov	r1, r6
   106b8:	mov	r0, r7
   106bc:	str	r5, [sp, #8]
   106c0:	bl	1062c <getopt_long@plt>
   106c4:	cmn	r0, #1
   106c8:	beq	10768 <__lxstat64@plt+0x100>
   106cc:	sub	r0, r0, #86	; 0x56
   106d0:	cmp	r0, #30
   106d4:	ldrls	pc, [pc, r0, lsl #2]
   106d8:	b	107c8 <__lxstat64@plt+0x160>
   106dc:	andeq	r0, r1, r0, asr #15
   106e0:	andeq	r0, r1, r8, asr #15
   106e4:	andeq	r0, r1, r8, asr #15
   106e8:	andeq	r0, r1, r8, asr #15
   106ec:	andeq	r0, r1, r8, asr #15
   106f0:	andeq	r0, r1, r8, asr #15
   106f4:	andeq	r0, r1, r8, asr #15
   106f8:	andeq	r0, r1, r8, asr #15
   106fc:	andeq	r0, r1, r8, asr #15
   10700:	andeq	r0, r1, r8, asr #15
   10704:	andeq	r0, r1, r8, asr #15
   10708:	andeq	r0, r1, r8, asr #15
   1070c:	andeq	r0, r1, r8, asr #15
   10710:	andeq	r0, r1, r8, asr #15
   10714:	andeq	r0, r1, r8, asr #15
   10718:	andeq	r0, r1, r8, asr #15
   1071c:	andeq	r0, r1, r8, asr r7
   10720:	andeq	r0, r1, r8, asr #15
   10724:	andeq	r0, r1, r4, asr #15
   10728:	andeq	r0, r1, r8, asr #15
   1072c:	andeq	r0, r1, r8, asr #15
   10730:	andeq	r0, r1, r8, asr #15
   10734:	andeq	r0, r1, r8, asr #15
   10738:	andeq	r0, r1, r8, asr #15
   1073c:	andeq	r0, r1, r8, asr #15
   10740:	andeq	r0, r1, r8, asr #15
   10744:	andeq	r0, r1, r8, asr #15
   10748:	andeq	r0, r1, r8, asr #15
   1074c:	andeq	r0, r1, r8, asr #15
   10750:	andeq	r0, r1, r8, asr #15
   10754:	andeq	r0, r1, r0, ror #14
   10758:	mov	fp, #1
   1075c:	b	106a8 <__lxstat64@plt+0x40>
   10760:	mov	sl, #1
   10764:	b	106a8 <__lxstat64@plt+0x40>
   10768:	ands	r4, fp, sl
   1076c:	bne	107ec <__lxstat64@plt+0x184>
   10770:	bl	10b3c <__lxstat64@plt+0x4d4>
   10774:	cmp	r0, #0
   10778:	beq	1079c <__lxstat64@plt+0x134>
   1077c:	ldr	r3, [pc, #156]	; 10820 <__lxstat64@plt+0x1b8>
   10780:	ldr	r2, [sp, #12]
   10784:	mov	r0, r4
   10788:	ldr	r3, [r3]
   1078c:	cmp	r2, r3
   10790:	bne	107e8 <__lxstat64@plt+0x180>
   10794:	add	sp, sp, #20
   10798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1079c:	bl	10928 <__lxstat64@plt+0x2c0>
   107a0:	cmp	r0, #2
   107a4:	mov	r4, r0
   107a8:	bne	1077c <__lxstat64@plt+0x114>
   107ac:	cmp	sl, #0
   107b0:	movne	r4, #0
   107b4:	cmp	fp, #0
   107b8:	movne	r4, fp
   107bc:	b	1077c <__lxstat64@plt+0x114>
   107c0:	bl	10ae4 <__lxstat64@plt+0x47c>
   107c4:	bl	10b10 <__lxstat64@plt+0x4a8>
   107c8:	ldr	r3, [pc, #92]	; 1082c <__lxstat64@plt+0x1c4>
   107cc:	mov	r2, #44	; 0x2c
   107d0:	mov	r1, #1
   107d4:	ldr	r3, [r3]
   107d8:	ldr	r0, [pc, #80]	; 10830 <__lxstat64@plt+0x1c8>
   107dc:	bl	105f0 <fwrite@plt>
   107e0:	mov	r0, #1
   107e4:	bl	10638 <exit@plt>
   107e8:	bl	105d8 <__stack_chk_fail@plt>
   107ec:	ldr	r4, [pc, #56]	; 1082c <__lxstat64@plt+0x1c4>
   107f0:	mov	r2, #38	; 0x26
   107f4:	mov	r1, #1
   107f8:	ldr	r3, [r4]
   107fc:	ldr	r0, [pc, #48]	; 10834 <__lxstat64@plt+0x1cc>
   10800:	bl	105f0 <fwrite@plt>
   10804:	ldr	r3, [r4]
   10808:	mov	r2, #44	; 0x2c
   1080c:	mov	r1, #1
   10810:	ldr	r0, [pc, #24]	; 10830 <__lxstat64@plt+0x1c8>
   10814:	bl	105f0 <fwrite@plt>
   10818:	mov	r0, #1
   1081c:	bl	10638 <exit@plt>
   10820:	andeq	r0, r2, r8, lsl #30
   10824:	andeq	r1, r2, ip, asr r0
   10828:	andeq	r0, r1, r0, asr lr
   1082c:	strheq	r1, [r2], -r0
   10830:	andeq	r0, r1, r8, asr lr
   10834:	andeq	r0, r1, r8, lsl #29
   10838:	mov	fp, #0
   1083c:	mov	lr, #0
   10840:	pop	{r1}		; (ldr r1, [sp], #4)
   10844:	mov	r2, sp
   10848:	push	{r2}		; (str r2, [sp, #-4]!)
   1084c:	push	{r0}		; (str r0, [sp, #-4]!)
   10850:	ldr	ip, [pc, #16]	; 10868 <__lxstat64@plt+0x200>
   10854:	push	{ip}		; (str ip, [sp, #-4]!)
   10858:	ldr	r0, [pc, #12]	; 1086c <__lxstat64@plt+0x204>
   1085c:	ldr	r3, [pc, #12]	; 10870 <__lxstat64@plt+0x208>
   10860:	bl	10614 <__libc_start_main@plt>
   10864:	bl	10650 <abort@plt>
   10868:	andeq	r0, r1, r0, lsl ip
   1086c:	andeq	r0, r1, r4, ror r6
   10870:			; <UNDEFINED> instruction: 0x00010bb0
   10874:	ldr	r3, [pc, #20]	; 10890 <__lxstat64@plt+0x228>
   10878:	ldr	r2, [pc, #20]	; 10894 <__lxstat64@plt+0x22c>
   1087c:	add	r3, pc, r3
   10880:	ldr	r2, [r3, r2]
   10884:	cmp	r2, #0
   10888:	bxeq	lr
   1088c:	b	10620 <__gmon_start__@plt>
   10890:	andeq	r0, r1, ip, ror r7
   10894:	andeq	r0, r0, r0, asr r0
   10898:	ldr	r0, [pc, #24]	; 108b8 <__lxstat64@plt+0x250>
   1089c:	ldr	r3, [pc, #24]	; 108bc <__lxstat64@plt+0x254>
   108a0:	cmp	r3, r0
   108a4:	bxeq	lr
   108a8:	ldr	r3, [pc, #16]	; 108c0 <__lxstat64@plt+0x258>
   108ac:	cmp	r3, #0
   108b0:	bxeq	lr
   108b4:	bx	r3
   108b8:	andeq	r1, r2, ip, lsr #1
   108bc:	andeq	r1, r2, ip, lsr #1
   108c0:	andeq	r0, r0, r0
   108c4:	ldr	r0, [pc, #36]	; 108f0 <__lxstat64@plt+0x288>
   108c8:	ldr	r1, [pc, #36]	; 108f4 <__lxstat64@plt+0x28c>
   108cc:	sub	r1, r1, r0
   108d0:	asr	r1, r1, #2
   108d4:	add	r1, r1, r1, lsr #31
   108d8:	asrs	r1, r1, #1
   108dc:	bxeq	lr
   108e0:	ldr	r3, [pc, #16]	; 108f8 <__lxstat64@plt+0x290>
   108e4:	cmp	r3, #0
   108e8:	bxeq	lr
   108ec:	bx	r3
   108f0:	andeq	r1, r2, ip, lsr #1
   108f4:	andeq	r1, r2, ip, lsr #1
   108f8:	andeq	r0, r0, r0
   108fc:	push	{r4, lr}
   10900:	ldr	r4, [pc, #24]	; 10920 <__lxstat64@plt+0x2b8>
   10904:	ldrb	r3, [r4]
   10908:	cmp	r3, #0
   1090c:	popne	{r4, pc}
   10910:	bl	10898 <__lxstat64@plt+0x230>
   10914:	mov	r3, #1
   10918:	strb	r3, [r4]
   1091c:	pop	{r4, pc}
   10920:	strheq	r1, [r2], -r4
   10924:	b	108c4 <__lxstat64@plt+0x25c>
   10928:	push	{r4, r5, r6, r7, r8, lr}
   1092c:	sub	sp, sp, #2256	; 0x8d0
   10930:	ldr	r7, [pc, #408]	; 10ad0 <__lxstat64@plt+0x468>
   10934:	sub	sp, sp, #8
   10938:	mov	r1, #0
   1093c:	ldr	r3, [r7]
   10940:	ldr	r0, [pc, #396]	; 10ad4 <__lxstat64@plt+0x46c>
   10944:	str	r3, [sp, #2260]	; 0x8d4
   10948:	bl	105fc <open64@plt>
   1094c:	mov	r1, #0
   10950:	mov	r8, r0
   10954:	ldr	r0, [pc, #380]	; 10ad8 <__lxstat64@plt+0x470>
   10958:	bl	105fc <open64@plt>
   1095c:	orrs	r3, r8, r0
   10960:	mov	r6, r0
   10964:	bpl	10998 <__lxstat64@plt+0x330>
   10968:	b	109d0 <__lxstat64@plt+0x368>
   1096c:	cmp	r5, r0
   10970:	bne	10aac <__lxstat64@plt+0x444>
   10974:	add	r1, sp, #1232	; 0x4d0
   10978:	mov	r2, r5
   1097c:	add	r1, r1, #4
   10980:	add	r0, sp, #212	; 0xd4
   10984:	bl	105cc <memcmp@plt>
   10988:	cmp	r0, #0
   1098c:	bne	10aac <__lxstat64@plt+0x444>
   10990:	cmp	r5, #0
   10994:	ble	10ab8 <__lxstat64@plt+0x450>
   10998:	mov	r2, #1024	; 0x400
   1099c:	add	r1, sp, #212	; 0xd4
   109a0:	mov	r0, r8
   109a4:	bl	105c0 <read@plt>
   109a8:	add	r1, sp, #1232	; 0x4d0
   109ac:	mov	r2, #1024	; 0x400
   109b0:	add	r1, r1, #4
   109b4:	mov	r5, r0
   109b8:	mov	r0, r6
   109bc:	bl	105c0 <read@plt>
   109c0:	lsr	r4, r0, #31
   109c4:	orrs	r4, r4, r5, lsr #31
   109c8:	beq	1096c <__lxstat64@plt+0x304>
   109cc:	b	10abc <__lxstat64@plt+0x454>
   109d0:	cmp	r8, #0
   109d4:	bge	10a70 <__lxstat64@plt+0x408>
   109d8:	cmp	r6, #0
   109dc:	bge	10a3c <__lxstat64@plt+0x3d4>
   109e0:	mov	r2, sp
   109e4:	ldr	r1, [pc, #240]	; 10adc <__lxstat64@plt+0x474>
   109e8:	mov	r0, #3
   109ec:	bl	10644 <__xstat64@plt>
   109f0:	subs	r4, r0, #0
   109f4:	bne	10aa0 <__lxstat64@plt+0x438>
   109f8:	add	r2, sp, #104	; 0x68
   109fc:	ldr	r1, [pc, #220]	; 10ae0 <__lxstat64@plt+0x478>
   10a00:	mov	r0, #3
   10a04:	bl	10644 <__xstat64@plt>
   10a08:	cmp	r0, #0
   10a0c:	bne	10a7c <__lxstat64@plt+0x414>
   10a10:	ldrd	r0, [sp]
   10a14:	ldrd	r2, [sp, #104]	; 0x68
   10a18:	cmp	r1, r3
   10a1c:	cmpeq	r0, r2
   10a20:	bne	10a50 <__lxstat64@plt+0x3e8>
   10a24:	ldrd	r0, [sp, #96]	; 0x60
   10a28:	ldrd	r2, [sp, #200]	; 0xc8
   10a2c:	cmp	r1, r3
   10a30:	cmpeq	r0, r2
   10a34:	moveq	r4, #1
   10a38:	b	10a50 <__lxstat64@plt+0x3e8>
   10a3c:	mvn	r4, #0
   10a40:	mov	r0, r6
   10a44:	bl	1065c <close@plt>
   10a48:	cmn	r4, #1
   10a4c:	beq	109e0 <__lxstat64@plt+0x378>
   10a50:	ldr	r2, [sp, #2260]	; 0x8d4
   10a54:	ldr	r3, [r7]
   10a58:	mov	r0, r4
   10a5c:	cmp	r2, r3
   10a60:	bne	10acc <__lxstat64@plt+0x464>
   10a64:	add	sp, sp, #2256	; 0x8d0
   10a68:	add	sp, sp, #8
   10a6c:	pop	{r4, r5, r6, r7, r8, pc}
   10a70:	mov	r0, r8
   10a74:	bl	1065c <close@plt>
   10a78:	b	109d8 <__lxstat64@plt+0x370>
   10a7c:	add	r2, sp, #104	; 0x68
   10a80:	ldr	r1, [pc, #88]	; 10ae0 <__lxstat64@plt+0x478>
   10a84:	mov	r0, #3
   10a88:	bl	10668 <__lxstat64@plt>
   10a8c:	cmp	r0, #0
   10a90:	bne	10aa0 <__lxstat64@plt+0x438>
   10a94:	bl	105e4 <geteuid@plt>
   10a98:	cmp	r0, #0
   10a9c:	beq	10a50 <__lxstat64@plt+0x3e8>
   10aa0:	mov	r4, #2
   10aa4:	b	10a50 <__lxstat64@plt+0x3e8>
   10aa8:	mov	r4, #1
   10aac:	mov	r0, r8
   10ab0:	bl	1065c <close@plt>
   10ab4:	b	10a40 <__lxstat64@plt+0x3d8>
   10ab8:	beq	10aa8 <__lxstat64@plt+0x440>
   10abc:	mov	r0, r8
   10ac0:	bl	1065c <close@plt>
   10ac4:	mvn	r4, #0
   10ac8:	b	10a40 <__lxstat64@plt+0x3d8>
   10acc:	bl	105d8 <__stack_chk_fail@plt>
   10ad0:	andeq	r0, r2, r8, lsl #30
   10ad4:	andeq	r0, r1, r0, lsr #24
   10ad8:	andeq	r0, r1, r4, lsr ip
   10adc:	andeq	r0, r1, ip, asr #24
   10ae0:	andeq	r0, r1, r0, asr ip
   10ae4:	ldr	r3, [pc, #28]	; 10b08 <__lxstat64@plt+0x4a0>
   10ae8:	push	{r4, lr}
   10aec:	mov	r2, #188	; 0xbc
   10af0:	mov	r1, #1
   10af4:	ldr	r3, [r3]
   10af8:	ldr	r0, [pc, #12]	; 10b0c <__lxstat64@plt+0x4a4>
   10afc:	bl	105f0 <fwrite@plt>
   10b00:	mov	r0, #0
   10b04:	bl	10638 <exit@plt>
   10b08:	strheq	r1, [r2], -r0
   10b0c:	andeq	r0, r1, r0, ror #24
   10b10:	ldr	r3, [pc, #28]	; 10b34 <__lxstat64@plt+0x4cc>
   10b14:	push	{r4, lr}
   10b18:	mov	r2, #241	; 0xf1
   10b1c:	mov	r1, #1
   10b20:	ldr	r3, [r3]
   10b24:	ldr	r0, [pc, #12]	; 10b38 <__lxstat64@plt+0x4d0>
   10b28:	bl	105f0 <fwrite@plt>
   10b2c:	mov	r0, #0
   10b30:	bl	10638 <exit@plt>
   10b34:	strheq	r1, [r2], -r0
   10b38:	andeq	r0, r1, r0, lsr #26
   10b3c:	push	{r4, lr}
   10b40:	ldr	r0, [pc, #84]	; 10b9c <__lxstat64@plt+0x534>
   10b44:	bl	10608 <getenv@plt>
   10b48:	subs	r1, r0, #0
   10b4c:	beq	10b60 <__lxstat64@plt+0x4f8>
   10b50:	ldr	r0, [pc, #72]	; 10ba0 <__lxstat64@plt+0x538>
   10b54:	bl	105b4 <strcmp@plt>
   10b58:	cmp	r0, #0
   10b5c:	beq	10b68 <__lxstat64@plt+0x500>
   10b60:	mov	r0, #0
   10b64:	pop	{r4, pc}
   10b68:	ldr	r0, [pc, #52]	; 10ba4 <__lxstat64@plt+0x53c>
   10b6c:	bl	10608 <getenv@plt>
   10b70:	cmp	r0, #0
   10b74:	beq	10b60 <__lxstat64@plt+0x4f8>
   10b78:	ldr	r0, [pc, #40]	; 10ba8 <__lxstat64@plt+0x540>
   10b7c:	bl	10608 <getenv@plt>
   10b80:	cmp	r0, #0
   10b84:	beq	10b60 <__lxstat64@plt+0x4f8>
   10b88:	ldr	r1, [pc, #28]	; 10bac <__lxstat64@plt+0x544>
   10b8c:	bl	105a8 <strstr@plt>
   10b90:	adds	r0, r0, #0
   10b94:	movne	r0, #1
   10b98:	pop	{r4, pc}
   10b9c:	andeq	r0, r1, r4, lsl lr
   10ba0:	andeq	r0, r1, r8, asr #29
   10ba4:	andeq	r0, r1, r0, lsr #28
   10ba8:	andeq	r0, r1, r0, lsr lr
   10bac:	andeq	r0, r1, ip, lsr lr
   10bb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10bb4:	mov	r7, r0
   10bb8:	ldr	r6, [pc, #72]	; 10c08 <__lxstat64@plt+0x5a0>
   10bbc:	ldr	r5, [pc, #72]	; 10c0c <__lxstat64@plt+0x5a4>
   10bc0:	add	r6, pc, r6
   10bc4:	add	r5, pc, r5
   10bc8:	sub	r6, r6, r5
   10bcc:	mov	r8, r1
   10bd0:	mov	r9, r2
   10bd4:	bl	10588 <strstr@plt-0x20>
   10bd8:	asrs	r6, r6, #2
   10bdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10be0:	mov	r4, #0
   10be4:	add	r4, r4, #1
   10be8:	ldr	r3, [r5], #4
   10bec:	mov	r2, r9
   10bf0:	mov	r1, r8
   10bf4:	mov	r0, r7
   10bf8:	blx	r3
   10bfc:	cmp	r6, r4
   10c00:	bne	10be4 <__lxstat64@plt+0x57c>
   10c04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c08:	andeq	r0, r1, ip, lsr r3
   10c0c:	andeq	r0, r1, r4, lsr r3
   10c10:	bx	lr

Disassembly of section .fini:

00010c14 <.fini>:
   10c14:	push	{r3, lr}
   10c18:	pop	{r3, pc}
