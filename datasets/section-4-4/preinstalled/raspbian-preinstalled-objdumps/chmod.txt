
raspbian-preinstalled/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010f4c <.init>:
   10f4c:	push	{r3, lr}
   10f50:	bl	11f58 <__assert_fail@plt+0xd10>
   10f54:	pop	{r3, pc}

Disassembly of section .plt:

00010f58 <fstatfs64@plt-0x14>:
   10f58:	push	{lr}		; (str lr, [sp, #-4]!)
   10f5c:	ldr	lr, [pc, #4]	; 10f68 <fstatfs64@plt-0x4>
   10f60:	add	lr, pc, lr
   10f64:	ldr	pc, [lr, #8]!
   10f68:	muleq	r1, r8, r0

00010f6c <fstatfs64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #152]!	; 0x98

00010f78 <calloc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #144]!	; 0x90

00010f84 <fputs_unlocked@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #136]!	; 0x88

00010f90 <raise@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #128]!	; 0x80

00010f9c <strcmp@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #120]!	; 0x78

00010fa8 <fflush@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #112]!	; 0x70

00010fb4 <memmove@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #104]!	; 0x68

00010fc0 <free@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #96]!	; 0x60

00010fcc <_exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #88]!	; 0x58

00010fd8 <memcpy@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #80]!	; 0x50

00010fe4 <mbsinit@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #72]!	; 0x48

00010ff0 <memcmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #64]!	; 0x40

00010ffc <dcgettext@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #56]!	; 0x38

00011008 <__stack_chk_fail@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #48]!	; 0x30

00011014 <realloc@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #40]!	; 0x28

00011020 <textdomain@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #32]!

0001102c <__fxstatat64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #24]!

00011038 <iswprint@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #16]!

00011044 <__fxstat64@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #8]!

00011050 <fwrite@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #0]!

0001105c <lseek64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #102400	; 0x19000
   11064:	ldr	pc, [ip, #4088]!	; 0xff8

00011068 <__ctype_get_mb_cur_max@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #102400	; 0x19000
   11070:	ldr	pc, [ip, #4080]!	; 0xff0

00011074 <__fpending@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #102400	; 0x19000
   1107c:	ldr	pc, [ip, #4072]!	; 0xfe8

00011080 <mbrtowc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #102400	; 0x19000
   11088:	ldr	pc, [ip, #4064]!	; 0xfe0

0001108c <error@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #102400	; 0x19000
   11094:	ldr	pc, [ip, #4056]!	; 0xfd8

00011098 <open64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #102400	; 0x19000
   110a0:	ldr	pc, [ip, #4048]!	; 0xfd0

000110a4 <malloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #102400	; 0x19000
   110ac:	ldr	pc, [ip, #4040]!	; 0xfc8

000110b0 <__libc_start_main@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4032]!	; 0xfc0

000110bc <__freading@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #4024]!	; 0xfb8

000110c8 <__gmon_start__@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #4016]!	; 0xfb0

000110d4 <getopt_long@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #4008]!	; 0xfa8

000110e0 <__ctype_b_loc@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #4000]!	; 0xfa0

000110ec <exit@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #3992]!	; 0xf98

000110f8 <strlen@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #3984]!	; 0xf90

00011104 <openat64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #3976]!	; 0xf88

00011110 <fchmodat@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #3968]!	; 0xf80

0001111c <__errno_location@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3960]!	; 0xf78

00011128 <__cxa_atexit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3952]!	; 0xf70

00011134 <memset@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3944]!	; 0xf68

00011140 <__printf_chk@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3936]!	; 0xf60

0001114c <fileno@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3928]!	; 0xf58

00011158 <__fprintf_chk@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3920]!	; 0xf50

00011164 <fclose@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3912]!	; 0xf48

00011170 <fseeko64@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3904]!	; 0xf40

0001117c <fcntl64@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3896]!	; 0xf38

00011188 <setlocale@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3888]!	; 0xf30

00011194 <strrchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3880]!	; 0xf28

000111a0 <nl_langinfo@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3872]!	; 0xf20

000111ac <readdir64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3864]!	; 0xf18

000111b8 <fdopendir@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3856]!	; 0xf10

000111c4 <dirfd@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3848]!	; 0xf08

000111d0 <fchdir@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3840]!	; 0xf00

000111dc <qsort@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3832]!	; 0xef8

000111e8 <bindtextdomain@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3824]!	; 0xef0

000111f4 <umask@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3816]!	; 0xee8

00011200 <__xstat64@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3808]!	; 0xee0

0001120c <strncmp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3800]!	; 0xed8

00011218 <abort@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3792]!	; 0xed0

00011224 <close@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3784]!	; 0xec8

00011230 <__lxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3776]!	; 0xec0

0001123c <closedir@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3768]!	; 0xeb8

00011248 <__assert_fail@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3760]!	; 0xeb0

Disassembly of section .text:

00011258 <fts_open@@Base-0x594c>:
   11258:	ldr	r3, [pc, #3080]	; 11e68 <__assert_fail@plt+0xc20>
   1125c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11260:	sub	sp, sp, #196	; 0xc4
   11264:	ldr	r3, [r3]
   11268:	mov	r6, #0
   1126c:	mov	r5, r0
   11270:	ldr	r0, [r1]
   11274:	str	r3, [sp, #188]	; 0xbc
   11278:	mov	r4, r1
   1127c:	str	r6, [sp, #52]	; 0x34
   11280:	bl	12b64 <__assert_fail@plt+0x191c>
   11284:	ldr	r1, [pc, #3040]	; 11e6c <__assert_fail@plt+0xc24>
   11288:	mov	r0, #6
   1128c:	bl	11188 <setlocale@plt>
   11290:	ldr	fp, [pc, #3032]	; 11e70 <__assert_fail@plt+0xc28>
   11294:	ldr	r1, [pc, #3032]	; 11e74 <__assert_fail@plt+0xc2c>
   11298:	ldr	r0, [pc, #3032]	; 11e78 <__assert_fail@plt+0xc30>
   1129c:	bl	111e8 <bindtextdomain@plt>
   112a0:	ldr	r0, [pc, #3024]	; 11e78 <__assert_fail@plt+0xc30>
   112a4:	bl	11020 <textdomain@plt>
   112a8:	ldr	r0, [pc, #3020]	; 11e7c <__assert_fail@plt+0xc34>
   112ac:	str	r6, [sp, #24]
   112b0:	str	r6, [sp, #16]
   112b4:	str	r6, [sp, #20]
   112b8:	mov	r9, r6
   112bc:	bl	1956c <fts_children@@Base+0x1d30>
   112c0:	ldr	r7, [pc, #3000]	; 11e80 <__assert_fail@plt+0xc38>
   112c4:	strb	r6, [fp]
   112c8:	strb	r6, [fp, #1]
   112cc:	strb	r6, [fp, #2]
   112d0:	ldr	r8, [pc, #2988]	; 11e84 <__assert_fail@plt+0xc3c>
   112d4:	ldr	r6, [pc, #2988]	; 11e88 <__assert_fail@plt+0xc40>
   112d8:	mov	sl, #0
   112dc:	str	sl, [sp]
   112e0:	mov	r3, r7
   112e4:	mov	r2, r6
   112e8:	mov	r1, r4
   112ec:	mov	r0, r5
   112f0:	bl	110d4 <getopt_long@plt>
   112f4:	cmn	r0, #1
   112f8:	beq	114f4 <__assert_fail@plt+0x2ac>
   112fc:	cmp	r0, #99	; 0x63
   11300:	beq	114b0 <__assert_fail@plt+0x268>
   11304:	ble	11330 <__assert_fail@plt+0xe8>
   11308:	cmp	r0, #118	; 0x76
   1130c:	beq	114c0 <__assert_fail@plt+0x278>
   11310:	ble	11468 <__assert_fail@plt+0x220>
   11314:	cmp	r0, #256	; 0x100
   11318:	beq	114a8 <__assert_fail@plt+0x260>
   1131c:	ble	1145c <__assert_fail@plt+0x214>
   11320:	cmp	r0, r8
   11324:	bne	1138c <__assert_fail@plt+0x144>
   11328:	mov	r9, #1
   1132c:	b	112d8 <__assert_fail@plt+0x90>
   11330:	cmp	r0, #55	; 0x37
   11334:	bgt	11430 <__assert_fail@plt+0x1e8>
   11338:	cmp	r0, #48	; 0x30
   1133c:	bge	113b4 <__assert_fail@plt+0x16c>
   11340:	cmn	r0, #2
   11344:	beq	11da0 <__assert_fail@plt+0xb58>
   11348:	bgt	113a8 <__assert_fail@plt+0x160>
   1134c:	cmn	r0, #3
   11350:	bne	11454 <__assert_fail@plt+0x20c>
   11354:	ldr	r3, [pc, #2864]	; 11e8c <__assert_fail@plt+0xc44>
   11358:	ldr	r0, [pc, #2864]	; 11e90 <__assert_fail@plt+0xc48>
   1135c:	ldr	r1, [pc, #2864]	; 11e94 <__assert_fail@plt+0xc4c>
   11360:	ldr	r2, [pc, #2864]	; 11e98 <__assert_fail@plt+0xc50>
   11364:	str	sl, [sp, #8]
   11368:	ldr	r0, [r0]
   1136c:	ldr	r3, [r3]
   11370:	str	r1, [sp, #4]
   11374:	str	r2, [sp]
   11378:	ldr	r1, [pc, #2844]	; 11e9c <__assert_fail@plt+0xc54>
   1137c:	ldr	r2, [pc, #2844]	; 11ea0 <__assert_fail@plt+0xc58>
   11380:	bl	1529c <__assert_fail@plt+0x4054>
   11384:	mov	r0, sl
   11388:	bl	110ec <exit@plt>
   1138c:	ldr	r3, [pc, #2832]	; 11ea4 <__assert_fail@plt+0xc5c>
   11390:	cmp	r0, r3
   11394:	bne	11454 <__assert_fail@plt+0x20c>
   11398:	ldr	r3, [pc, #2824]	; 11ea8 <__assert_fail@plt+0xc60>
   1139c:	ldr	r3, [r3]
   113a0:	str	r3, [sp, #24]
   113a4:	b	112d8 <__assert_fail@plt+0x90>
   113a8:	sub	r0, r0, #43	; 0x2b
   113ac:	cmp	r0, #1
   113b0:	bhi	11454 <__assert_fail@plt+0x20c>
   113b4:	ldr	r3, [pc, #2800]	; 11eac <__assert_fail@plt+0xc64>
   113b8:	ldr	r2, [sp, #16]
   113bc:	ldr	r3, [r3]
   113c0:	mov	sl, r2
   113c4:	sub	r3, r3, #-1073741823	; 0xc0000001
   113c8:	cmp	r2, #0
   113cc:	addne	sl, sl, #1
   113d0:	ldr	r3, [r4, r3, lsl #2]
   113d4:	str	sl, [sp, #36]	; 0x24
   113d8:	mov	r0, r3
   113dc:	str	r3, [sp, #40]	; 0x28
   113e0:	bl	110f8 <strlen@plt>
   113e4:	ldr	r1, [sp, #52]	; 0x34
   113e8:	ldr	r3, [sp, #40]	; 0x28
   113ec:	add	sl, r0, sl
   113f0:	cmp	r1, sl
   113f4:	mov	r2, r0
   113f8:	bls	114cc <__assert_fail@plt+0x284>
   113fc:	mov	r1, r3
   11400:	ldr	lr, [sp, #16]
   11404:	ldr	r3, [sp, #20]
   11408:	ldr	r0, [sp, #36]	; 0x24
   1140c:	mov	ip, #44	; 0x2c
   11410:	add	r0, r3, r0
   11414:	strb	ip, [r3, lr]
   11418:	add	r2, r2, #1
   1141c:	bl	10fd8 <memcpy@plt>
   11420:	mov	r3, #1
   11424:	str	sl, [sp, #16]
   11428:	strb	r3, [fp]
   1142c:	b	112d8 <__assert_fail@plt+0x90>
   11430:	cmp	r0, #82	; 0x52
   11434:	moveq	r3, #1
   11438:	strbeq	r3, [fp, #2]
   1143c:	beq	112d8 <__assert_fail@plt+0x90>
   11440:	ble	1149c <__assert_fail@plt+0x254>
   11444:	cmp	r0, #88	; 0x58
   11448:	beq	113b4 <__assert_fail@plt+0x16c>
   1144c:	cmp	r0, #97	; 0x61
   11450:	beq	113b4 <__assert_fail@plt+0x16c>
   11454:	mov	r0, #1
   11458:	bl	1200c <__assert_fail@plt+0xdc4>
   1145c:	cmp	r0, #120	; 0x78
   11460:	ble	113b4 <__assert_fail@plt+0x16c>
   11464:	b	11454 <__assert_fail@plt+0x20c>
   11468:	cmp	r0, #111	; 0x6f
   1146c:	beq	113b4 <__assert_fail@plt+0x16c>
   11470:	bgt	11490 <__assert_fail@plt+0x248>
   11474:	cmp	r0, #102	; 0x66
   11478:	moveq	r3, #1
   1147c:	strbeq	r3, [fp, #1]
   11480:	beq	112d8 <__assert_fail@plt+0x90>
   11484:	cmp	r0, #103	; 0x67
   11488:	beq	113b4 <__assert_fail@plt+0x16c>
   1148c:	b	11454 <__assert_fail@plt+0x20c>
   11490:	cmp	r0, #114	; 0x72
   11494:	bge	113b4 <__assert_fail@plt+0x16c>
   11498:	b	11454 <__assert_fail@plt+0x20c>
   1149c:	cmp	r0, #61	; 0x3d
   114a0:	beq	113b4 <__assert_fail@plt+0x16c>
   114a4:	b	11454 <__assert_fail@plt+0x20c>
   114a8:	mov	r9, sl
   114ac:	b	112d8 <__assert_fail@plt+0x90>
   114b0:	ldr	r2, [pc, #2552]	; 11eb0 <__assert_fail@plt+0xc68>
   114b4:	mov	r3, #1
   114b8:	str	r3, [r2]
   114bc:	b	112d8 <__assert_fail@plt+0x90>
   114c0:	ldr	r3, [pc, #2536]	; 11eb0 <__assert_fail@plt+0xc68>
   114c4:	str	sl, [r3]
   114c8:	b	112d8 <__assert_fail@plt+0x90>
   114cc:	str	r0, [sp, #44]	; 0x2c
   114d0:	add	ip, sl, #1
   114d4:	ldr	r0, [sp, #20]
   114d8:	add	r1, sp, #52	; 0x34
   114dc:	str	ip, [sp, #52]	; 0x34
   114e0:	bl	15508 <__assert_fail@plt+0x42c0>
   114e4:	ldr	r2, [sp, #44]	; 0x2c
   114e8:	ldr	r3, [sp, #40]	; 0x28
   114ec:	str	r0, [sp, #20]
   114f0:	b	113fc <__assert_fail@plt+0x1b4>
   114f4:	ldr	r3, [sp, #24]
   114f8:	cmp	r3, sl
   114fc:	beq	11878 <__assert_fail@plt+0x630>
   11500:	ldr	r3, [sp, #20]
   11504:	cmp	r3, sl
   11508:	bne	11de8 <__assert_fail@plt+0xba0>
   1150c:	ldr	r6, [pc, #2456]	; 11eac <__assert_fail@plt+0xc64>
   11510:	ldr	r3, [r6]
   11514:	cmp	r5, r3
   11518:	ble	11c20 <__assert_fail@plt+0x9d8>
   1151c:	ldr	r0, [sp, #24]
   11520:	bl	12980 <__assert_fail@plt+0x1738>
   11524:	cmp	r0, #0
   11528:	str	r0, [fp, #4]
   1152c:	beq	11e0c <__assert_fail@plt+0xbc4>
   11530:	ldrb	r3, [fp, #2]
   11534:	and	r9, r9, r3
   11538:	bl	1111c <__errno_location@plt>
   1153c:	cmp	r9, #0
   11540:	streq	r9, [fp, #32]
   11544:	str	r0, [sp, #20]
   11548:	bne	11ca4 <__assert_fail@plt+0xa5c>
   1154c:	ldr	r0, [r6]
   11550:	mov	r2, #0
   11554:	ldr	r1, [pc, #2392]	; 11eb4 <__assert_fail@plt+0xc6c>
   11558:	add	r0, r4, r0, lsl #2
   1155c:	bl	15628 <__assert_fail@plt+0x43e0>
   11560:	ldr	sl, [pc, #2376]	; 11eb0 <__assert_fail@plt+0xc68>
   11564:	mov	r5, #1
   11568:	mov	r7, r0
   1156c:	mov	r0, r7
   11570:	bl	170c0 <fts_read@@Base>
   11574:	subs	r4, r0, #0
   11578:	beq	115dc <__assert_fail@plt+0x394>
   1157c:	ldrh	r3, [r4, #60]	; 0x3c
   11580:	ldr	r9, [r4, #28]
   11584:	sub	r3, r3, #2
   11588:	cmp	r3, #11
   1158c:	ldrls	pc, [pc, r3, lsl #2]
   11590:	b	116fc <__assert_fail@plt+0x4b4>
   11594:	andeq	r1, r1, r8, ror #13
   11598:	strdeq	r1, [r1], -ip
   1159c:	andeq	r1, r1, ip, lsr #12
   115a0:	strdeq	r1, [r1], -ip
   115a4:	andeq	r1, r1, r4, asr #11
   115a8:	andeq	r1, r1, r0, asr #16
   115ac:	strdeq	r1, [r1], -ip
   115b0:	strdeq	r1, [r1], -ip
   115b4:	andeq	r1, r1, r0, ror #15
   115b8:	strdeq	r1, [r1], -ip
   115bc:	strdeq	r1, [r1], -ip
   115c0:	muleq	r1, ip, r7
   115c4:	mov	r6, #1
   115c8:	mov	r0, r7
   115cc:	bl	170c0 <fts_read@@Base>
   115d0:	and	r5, r5, r6
   115d4:	subs	r4, r0, #0
   115d8:	bne	1157c <__assert_fail@plt+0x334>
   115dc:	ldr	r3, [sp, #20]
   115e0:	ldr	r6, [r3]
   115e4:	cmp	r6, #0
   115e8:	beq	115fc <__assert_fail@plt+0x3b4>
   115ec:	ldrb	r5, [fp, #1]
   115f0:	cmp	r5, #0
   115f4:	movne	r5, r4
   115f8:	beq	11c84 <__assert_fail@plt+0xa3c>
   115fc:	mov	r0, r7
   11600:	bl	16f40 <fts_close@@Base>
   11604:	cmp	r0, #0
   11608:	bne	11bbc <__assert_fail@plt+0x974>
   1160c:	ldr	r3, [pc, #2132]	; 11e68 <__assert_fail@plt+0xc20>
   11610:	ldr	r2, [sp, #188]	; 0xbc
   11614:	eor	r0, r5, #1
   11618:	ldr	r3, [r3]
   1161c:	cmp	r2, r3
   11620:	bne	11de4 <__assert_fail@plt+0xb9c>
   11624:	add	sp, sp, #196	; 0xc4
   11628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1162c:	ldrb	r6, [fp, #1]
   11630:	cmp	r6, #0
   11634:	beq	11bb0 <__assert_fail@plt+0x968>
   11638:	ldr	r3, [sl]
   1163c:	cmp	r3, #2
   11640:	beq	118bc <__assert_fail@plt+0x674>
   11644:	ldr	r6, [sl]
   11648:	cmp	r6, #0
   1164c:	bne	118bc <__assert_fail@plt+0x674>
   11650:	add	r1, sp, #164	; 0xa4
   11654:	ldr	r0, [sp, #28]
   11658:	bl	12478 <__assert_fail@plt+0x1230>
   1165c:	add	r1, sp, #176	; 0xb0
   11660:	ldr	r0, [sp, #32]
   11664:	strb	r6, [sp, #174]	; 0xae
   11668:	bl	12478 <__assert_fail@plt+0x1230>
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #2112]	; 11eb8 <__assert_fail@plt+0xc70>
   11674:	mov	r0, r6
   11678:	strb	r6, [sp, #186]	; 0xba
   1167c:	bl	10ffc <dcgettext@plt>
   11680:	mov	r1, r9
   11684:	mov	r8, r0
   11688:	mov	r0, #4
   1168c:	bl	14b20 <__assert_fail@plt+0x38d8>
   11690:	ldr	r3, [sp, #28]
   11694:	add	ip, sp, #165	; 0xa5
   11698:	mov	r1, r8
   1169c:	lsl	r2, r3, #20
   116a0:	add	r3, sp, #177	; 0xb1
   116a4:	str	r3, [sp]
   116a8:	ldr	r3, [sp, #32]
   116ac:	lsr	r2, r2, #20
   116b0:	lsl	r3, r3, #20
   116b4:	stmib	sp, {r2, ip}
   116b8:	lsr	r3, r3, #20
   116bc:	mov	r2, r0
   116c0:	mov	r0, #1
   116c4:	bl	11140 <__printf_chk@plt>
   116c8:	ldrb	r3, [fp, #2]
   116cc:	cmp	r3, #0
   116d0:	bne	115c8 <__assert_fail@plt+0x380>
   116d4:	mov	r1, r4
   116d8:	mov	r2, #4
   116dc:	mov	r0, r7
   116e0:	bl	17808 <fts_set@@Base>
   116e4:	b	115c8 <__assert_fail@plt+0x380>
   116e8:	mov	r1, r4
   116ec:	mov	r0, r7
   116f0:	bl	15670 <__assert_fail@plt+0x4428>
   116f4:	cmp	r0, #0
   116f8:	bne	11c44 <__assert_fail@plt+0x9fc>
   116fc:	ldr	ip, [fp, #32]
   11700:	cmp	ip, #0
   11704:	beq	1171c <__assert_fail@plt+0x4d4>
   11708:	ldrd	r0, [r4, #168]	; 0xa8
   1170c:	ldrd	r2, [ip]
   11710:	cmp	r1, r3
   11714:	cmpeq	r0, r2
   11718:	beq	11a74 <__assert_fail@plt+0x82c>
   1171c:	ldr	r0, [r4, #88]	; 0x58
   11720:	ldr	r3, [r4, #24]
   11724:	and	r8, r0, #61440	; 0xf000
   11728:	mov	r6, #0
   1172c:	str	r3, [sp, #16]
   11730:	sub	r1, r8, #16384	; 0x4000
   11734:	ldr	r3, [fp, #4]
   11738:	clz	r1, r1
   1173c:	str	r6, [sp]
   11740:	lsr	r1, r1, #5
   11744:	ldr	r2, [fp, #8]
   11748:	str	r0, [sp, #32]
   1174c:	bl	12a00 <__assert_fail@plt+0x17b8>
   11750:	cmp	r8, #40960	; 0xa000
   11754:	str	r0, [sp, #28]
   11758:	beq	118c4 <__assert_fail@plt+0x67c>
   1175c:	mov	r2, r0
   11760:	mov	r3, r6
   11764:	ldr	r1, [sp, #16]
   11768:	ldr	r0, [r7, #32]
   1176c:	bl	11110 <fchmodat@plt>
   11770:	cmp	r0, #0
   11774:	beq	11914 <__assert_fail@plt+0x6cc>
   11778:	ldrb	r6, [fp, #1]
   1177c:	cmp	r6, #0
   11780:	bne	11638 <__assert_fail@plt+0x3f0>
   11784:	ldr	r3, [sp, #20]
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #1832]	; 11ebc <__assert_fail@plt+0xc74>
   11790:	mov	r0, r6
   11794:	ldr	r8, [r3]
   11798:	b	11814 <__assert_fail@plt+0x5cc>
   1179c:	ldrb	r6, [fp, #1]
   117a0:	cmp	r6, #0
   117a4:	bne	11638 <__assert_fail@plt+0x3f0>
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #1804]	; 11ec0 <__assert_fail@plt+0xc78>
   117b0:	mov	r0, r6
   117b4:	bl	10ffc <dcgettext@plt>
   117b8:	mov	r1, r9
   117bc:	mov	r8, r0
   117c0:	mov	r0, #4
   117c4:	bl	14b20 <__assert_fail@plt+0x38d8>
   117c8:	mov	r2, r8
   117cc:	mov	r1, r6
   117d0:	mov	r3, r0
   117d4:	mov	r0, r6
   117d8:	bl	1108c <error@plt>
   117dc:	b	11638 <__assert_fail@plt+0x3f0>
   117e0:	ldr	r3, [r4, #48]	; 0x30
   117e4:	cmp	r3, #0
   117e8:	bne	117f8 <__assert_fail@plt+0x5b0>
   117ec:	ldr	r3, [r4, #16]
   117f0:	cmp	r3, #0
   117f4:	beq	11cf0 <__assert_fail@plt+0xaa8>
   117f8:	ldrb	r6, [fp, #1]
   117fc:	cmp	r6, #0
   11800:	moveq	r2, #5
   11804:	ldreq	r1, [pc, #1720]	; 11ec4 <__assert_fail@plt+0xc7c>
   11808:	bne	11638 <__assert_fail@plt+0x3f0>
   1180c:	ldr	r8, [r4, #32]
   11810:	mov	r0, r6
   11814:	bl	10ffc <dcgettext@plt>
   11818:	mov	r1, r9
   1181c:	str	r0, [sp, #16]
   11820:	mov	r0, #4
   11824:	bl	14b20 <__assert_fail@plt+0x38d8>
   11828:	ldr	r2, [sp, #16]
   1182c:	mov	r1, r8
   11830:	mov	r3, r0
   11834:	mov	r0, r6
   11838:	bl	1108c <error@plt>
   1183c:	b	11638 <__assert_fail@plt+0x3f0>
   11840:	ldrb	r6, [fp, #1]
   11844:	cmp	r6, #0
   11848:	bne	11638 <__assert_fail@plt+0x3f0>
   1184c:	mov	r2, r9
   11850:	mov	r1, #3
   11854:	mov	r0, r6
   11858:	ldr	r8, [r4, #32]
   1185c:	bl	14bfc <__assert_fail@plt+0x39b4>
   11860:	mov	r1, r8
   11864:	ldr	r2, [pc, #1628]	; 11ec8 <__assert_fail@plt+0xc80>
   11868:	mov	r3, r0
   1186c:	mov	r0, r6
   11870:	bl	1108c <error@plt>
   11874:	b	11638 <__assert_fail@plt+0x3f0>
   11878:	ldr	r3, [sp, #20]
   1187c:	ldr	r6, [pc, #1576]	; 11eac <__assert_fail@plt+0xc64>
   11880:	cmp	r3, #0
   11884:	ldr	r3, [r6]
   11888:	beq	11bec <__assert_fail@plt+0x9a4>
   1188c:	cmp	r5, r3
   11890:	ble	11ddc <__assert_fail@plt+0xb94>
   11894:	ldr	r0, [sp, #20]
   11898:	bl	125d4 <__assert_fail@plt+0x138c>
   1189c:	cmp	r0, #0
   118a0:	mov	r5, r0
   118a4:	str	r0, [fp, #4]
   118a8:	beq	11da8 <__assert_fail@plt+0xb60>
   118ac:	mov	r0, #0
   118b0:	bl	111f4 <umask@plt>
   118b4:	str	r0, [fp, #8]
   118b8:	b	11530 <__assert_fail@plt+0x2e8>
   118bc:	mov	r6, #0
   118c0:	b	116c8 <__assert_fail@plt+0x480>
   118c4:	ldr	r0, [sl]
   118c8:	cmp	r0, #2
   118cc:	beq	1190c <__assert_fail@plt+0x6c4>
   118d0:	cmp	r0, #0
   118d4:	bne	1190c <__assert_fail@plt+0x6c4>
   118d8:	mov	r2, #5
   118dc:	ldr	r1, [pc, #1512]	; 11ecc <__assert_fail@plt+0xc84>
   118e0:	bl	10ffc <dcgettext@plt>
   118e4:	mov	r1, r9
   118e8:	mov	r6, r0
   118ec:	mov	r0, #4
   118f0:	bl	14b20 <__assert_fail@plt+0x38d8>
   118f4:	mov	r1, r6
   118f8:	mov	r6, #1
   118fc:	mov	r2, r0
   11900:	mov	r0, #1
   11904:	bl	11140 <__printf_chk@plt>
   11908:	b	116c8 <__assert_fail@plt+0x480>
   1190c:	mov	r6, #1
   11910:	b	116c8 <__assert_fail@plt+0x480>
   11914:	ldr	r3, [sl]
   11918:	cmp	r3, #2
   1191c:	beq	119c0 <__assert_fail@plt+0x778>
   11920:	ldr	r3, [sp, #28]
   11924:	tst	r3, #3584	; 0xe00
   11928:	ldreq	r3, [sp, #28]
   1192c:	bne	11b0c <__assert_fail@plt+0x8c4>
   11930:	ldr	r2, [sp, #32]
   11934:	eor	r3, r3, r2
   11938:	ldr	r2, [pc, #1424]	; 11ed0 <__assert_fail@plt+0xc88>
   1193c:	tst	r3, r2
   11940:	beq	11b3c <__assert_fail@plt+0x8f4>
   11944:	add	r1, sp, #164	; 0xa4
   11948:	ldr	r0, [sp, #28]
   1194c:	bl	12478 <__assert_fail@plt+0x1230>
   11950:	mov	r6, #0
   11954:	add	r1, sp, #176	; 0xb0
   11958:	ldr	r0, [sp, #32]
   1195c:	strb	r6, [sp, #174]	; 0xae
   11960:	bl	12478 <__assert_fail@plt+0x1230>
   11964:	mov	r2, #5
   11968:	mov	r0, r6
   1196c:	ldr	r1, [pc, #1376]	; 11ed4 <__assert_fail@plt+0xc8c>
   11970:	strb	r6, [sp, #186]	; 0xba
   11974:	bl	10ffc <dcgettext@plt>
   11978:	mov	r1, r9
   1197c:	mov	r6, r0
   11980:	mov	r0, #4
   11984:	bl	14b20 <__assert_fail@plt+0x38d8>
   11988:	ldr	r3, [sp, #28]
   1198c:	add	ip, sp, #165	; 0xa5
   11990:	mov	r1, r6
   11994:	lsl	r2, r3, #20
   11998:	add	r3, sp, #177	; 0xb1
   1199c:	str	r3, [sp]
   119a0:	ldr	r3, [sp, #32]
   119a4:	lsr	r2, r2, #20
   119a8:	lsl	r3, r3, #20
   119ac:	stmib	sp, {r2, ip}
   119b0:	lsr	r3, r3, #20
   119b4:	mov	r2, r0
   119b8:	mov	r0, #1
   119bc:	bl	11140 <__printf_chk@plt>
   119c0:	ldrb	r6, [fp]
   119c4:	cmp	r6, #0
   119c8:	beq	1190c <__assert_fail@plt+0x6c4>
   119cc:	mov	r3, #0
   119d0:	sub	r1, r8, #16384	; 0x4000
   119d4:	str	r3, [sp]
   119d8:	mov	r2, r3
   119dc:	clz	r1, r1
   119e0:	ldr	r3, [fp, #4]
   119e4:	lsr	r1, r1, #5
   119e8:	ldr	r0, [sp, #32]
   119ec:	bl	12a00 <__assert_fail@plt+0x17b8>
   119f0:	ldr	r3, [sp, #28]
   119f4:	bics	r3, r3, r0
   119f8:	mov	r8, r0
   119fc:	beq	116c8 <__assert_fail@plt+0x480>
   11a00:	add	r1, sp, #164	; 0xa4
   11a04:	ldr	r0, [sp, #28]
   11a08:	bl	12478 <__assert_fail@plt+0x1230>
   11a0c:	mov	r0, r8
   11a10:	add	r1, sp, #176	; 0xb0
   11a14:	bl	12478 <__assert_fail@plt+0x1230>
   11a18:	mov	r3, #0
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #1200]	; 11ed8 <__assert_fail@plt+0xc90>
   11a24:	mov	r0, #0
   11a28:	strb	r3, [sp, #186]	; 0xba
   11a2c:	strb	r3, [sp, #174]	; 0xae
   11a30:	bl	10ffc <dcgettext@plt>
   11a34:	mov	r2, r9
   11a38:	mov	r1, #3
   11a3c:	mov	r6, r0
   11a40:	mov	r0, #0
   11a44:	bl	14bfc <__assert_fail@plt+0x39b4>
   11a48:	add	r1, sp, #177	; 0xb1
   11a4c:	add	r3, sp, #165	; 0xa5
   11a50:	str	r1, [sp, #4]
   11a54:	mov	r1, #0
   11a58:	mov	r2, r6
   11a5c:	str	r3, [sp]
   11a60:	mov	r6, r1
   11a64:	mov	r3, r0
   11a68:	mov	r0, r1
   11a6c:	bl	1108c <error@plt>
   11a70:	b	116c8 <__assert_fail@plt+0x480>
   11a74:	ldrd	r2, [r4, #72]	; 0x48
   11a78:	ldrd	r0, [ip, #8]
   11a7c:	cmp	r3, r1
   11a80:	cmpeq	r2, r0
   11a84:	bne	1171c <__assert_fail@plt+0x4d4>
   11a88:	ldr	r1, [pc, #1100]	; 11edc <__assert_fail@plt+0xc94>
   11a8c:	mov	r0, r9
   11a90:	bl	10f9c <strcmp@plt>
   11a94:	mov	r2, #5
   11a98:	subs	r6, r0, #0
   11a9c:	bne	11d0c <__assert_fail@plt+0xac4>
   11aa0:	ldr	r1, [pc, #1080]	; 11ee0 <__assert_fail@plt+0xc98>
   11aa4:	bl	10ffc <dcgettext@plt>
   11aa8:	mov	r1, r9
   11aac:	mov	r8, r0
   11ab0:	mov	r0, #4
   11ab4:	bl	14b20 <__assert_fail@plt+0x38d8>
   11ab8:	mov	r2, r8
   11abc:	mov	r1, r6
   11ac0:	mov	r3, r0
   11ac4:	mov	r0, r6
   11ac8:	bl	1108c <error@plt>
   11acc:	mov	r2, #5
   11ad0:	ldr	r1, [pc, #1036]	; 11ee4 <__assert_fail@plt+0xc9c>
   11ad4:	mov	r0, #0
   11ad8:	bl	10ffc <dcgettext@plt>
   11adc:	mov	r1, #0
   11ae0:	mov	r6, #0
   11ae4:	mov	r2, r0
   11ae8:	mov	r0, r1
   11aec:	bl	1108c <error@plt>
   11af0:	mov	r1, r4
   11af4:	mov	r2, #4
   11af8:	mov	r0, r7
   11afc:	bl	17808 <fts_set@@Base>
   11b00:	mov	r0, r7
   11b04:	bl	170c0 <fts_read@@Base>
   11b08:	b	115c8 <__assert_fail@plt+0x380>
   11b0c:	str	r0, [sp]
   11b10:	add	r3, sp, #56	; 0x38
   11b14:	ldr	r2, [sp, #16]
   11b18:	ldr	r1, [r7, #32]
   11b1c:	mov	r0, #3
   11b20:	bl	1102c <__fxstatat64@plt>
   11b24:	cmp	r0, #0
   11b28:	ldreq	r3, [sp, #72]	; 0x48
   11b2c:	beq	11930 <__assert_fail@plt+0x6e8>
   11b30:	ldrb	r6, [fp, #1]
   11b34:	cmp	r6, #0
   11b38:	beq	11d5c <__assert_fail@plt+0xb14>
   11b3c:	ldr	r6, [sl]
   11b40:	cmp	r6, #0
   11b44:	bne	119c0 <__assert_fail@plt+0x778>
   11b48:	add	r1, sp, #164	; 0xa4
   11b4c:	ldr	r0, [sp, #28]
   11b50:	bl	12478 <__assert_fail@plt+0x1230>
   11b54:	add	r1, sp, #176	; 0xb0
   11b58:	ldr	r0, [sp, #32]
   11b5c:	strb	r6, [sp, #174]	; 0xae
   11b60:	bl	12478 <__assert_fail@plt+0x1230>
   11b64:	mov	r2, #5
   11b68:	mov	r0, r6
   11b6c:	ldr	r1, [pc, #884]	; 11ee8 <__assert_fail@plt+0xca0>
   11b70:	strb	r6, [sp, #186]	; 0xba
   11b74:	bl	10ffc <dcgettext@plt>
   11b78:	mov	r1, r9
   11b7c:	mov	r6, r0
   11b80:	mov	r0, #4
   11b84:	bl	14b20 <__assert_fail@plt+0x38d8>
   11b88:	add	r3, sp, #165	; 0xa5
   11b8c:	str	r3, [sp]
   11b90:	ldr	r3, [sp, #28]
   11b94:	mov	r1, r6
   11b98:	lsl	r3, r3, #20
   11b9c:	lsr	r3, r3, #20
   11ba0:	mov	r2, r0
   11ba4:	mov	r0, #1
   11ba8:	bl	11140 <__printf_chk@plt>
   11bac:	b	119c0 <__assert_fail@plt+0x778>
   11bb0:	mov	r2, #5
   11bb4:	ldr	r1, [pc, #816]	; 11eec <__assert_fail@plt+0xca4>
   11bb8:	b	1180c <__assert_fail@plt+0x5c4>
   11bbc:	ldr	r3, [sp, #20]
   11bc0:	mov	r2, #5
   11bc4:	ldr	r1, [pc, #804]	; 11ef0 <__assert_fail@plt+0xca8>
   11bc8:	mov	r0, #0
   11bcc:	ldr	r4, [r3]
   11bd0:	bl	10ffc <dcgettext@plt>
   11bd4:	mov	r1, r4
   11bd8:	mov	r5, #0
   11bdc:	mov	r2, r0
   11be0:	mov	r0, #0
   11be4:	bl	1108c <error@plt>
   11be8:	b	1160c <__assert_fail@plt+0x3c4>
   11bec:	add	r2, r3, #1
   11bf0:	ldr	r3, [r4, r3, lsl #2]
   11bf4:	cmp	r2, r5
   11bf8:	str	r2, [r6]
   11bfc:	str	r3, [sp, #20]
   11c00:	blt	11894 <__assert_fail@plt+0x64c>
   11c04:	cmp	r3, #0
   11c08:	beq	11c20 <__assert_fail@plt+0x9d8>
   11c0c:	sub	r2, r2, #-1073741823	; 0xc0000001
   11c10:	ldr	r3, [r4, r2, lsl #2]
   11c14:	ldr	r2, [sp, #20]
   11c18:	cmp	r3, r2
   11c1c:	beq	11e30 <__assert_fail@plt+0xbe8>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #712]	; 11ef4 <__assert_fail@plt+0xcac>
   11c28:	mov	r0, #0
   11c2c:	bl	10ffc <dcgettext@plt>
   11c30:	mov	r1, #0
   11c34:	mov	r2, r0
   11c38:	mov	r0, r1
   11c3c:	bl	1108c <error@plt>
   11c40:	b	11454 <__assert_fail@plt+0x20c>
   11c44:	mov	r2, #5
   11c48:	ldr	r1, [pc, #680]	; 11ef8 <__assert_fail@plt+0xcb0>
   11c4c:	mov	r0, #0
   11c50:	bl	10ffc <dcgettext@plt>
   11c54:	mov	r2, r9
   11c58:	mov	r1, #3
   11c5c:	mov	r6, #0
   11c60:	mov	r4, r0
   11c64:	mov	r0, #0
   11c68:	bl	14bfc <__assert_fail@plt+0x39b4>
   11c6c:	mov	r1, #0
   11c70:	mov	r2, r4
   11c74:	mov	r3, r0
   11c78:	mov	r0, r1
   11c7c:	bl	1108c <error@plt>
   11c80:	b	115c8 <__assert_fail@plt+0x380>
   11c84:	mov	r2, #5
   11c88:	ldr	r1, [pc, #620]	; 11efc <__assert_fail@plt+0xcb4>
   11c8c:	bl	10ffc <dcgettext@plt>
   11c90:	mov	r1, r6
   11c94:	mov	r2, r0
   11c98:	mov	r0, r5
   11c9c:	bl	1108c <error@plt>
   11ca0:	b	115fc <__assert_fail@plt+0x3b4>
   11ca4:	ldr	r0, [pc, #596]	; 11f00 <__assert_fail@plt+0xcb8>
   11ca8:	bl	14de0 <__assert_fail@plt+0x3b98>
   11cac:	cmp	r0, #0
   11cb0:	str	r0, [fp, #32]
   11cb4:	bne	1154c <__assert_fail@plt+0x304>
   11cb8:	ldr	r3, [sp, #20]
   11cbc:	ldr	r1, [pc, #576]	; 11f04 <__assert_fail@plt+0xcbc>
   11cc0:	mov	r2, #5
   11cc4:	ldr	r4, [r3]
   11cc8:	bl	10ffc <dcgettext@plt>
   11ccc:	ldr	r1, [pc, #520]	; 11edc <__assert_fail@plt+0xc94>
   11cd0:	mov	r5, r0
   11cd4:	mov	r0, #4
   11cd8:	bl	14b20 <__assert_fail@plt+0x38d8>
   11cdc:	mov	r2, r5
   11ce0:	mov	r1, r4
   11ce4:	mov	r3, r0
   11ce8:	mov	r0, #1
   11cec:	bl	1108c <error@plt>
   11cf0:	mov	r2, #1
   11cf4:	str	r2, [r4, #16]
   11cf8:	mov	r1, r4
   11cfc:	mov	r0, r7
   11d00:	mov	r6, r2
   11d04:	bl	17808 <fts_set@@Base>
   11d08:	b	115c8 <__assert_fail@plt+0x380>
   11d0c:	ldr	r1, [pc, #500]	; 11f08 <__assert_fail@plt+0xcc0>
   11d10:	mov	r0, #0
   11d14:	bl	10ffc <dcgettext@plt>
   11d18:	mov	r2, r9
   11d1c:	mov	r1, #4
   11d20:	mov	r6, r0
   11d24:	mov	r0, #0
   11d28:	bl	14a6c <__assert_fail@plt+0x3824>
   11d2c:	ldr	r2, [pc, #424]	; 11edc <__assert_fail@plt+0xc94>
   11d30:	mov	r1, #4
   11d34:	mov	r8, r0
   11d38:	mov	r0, #1
   11d3c:	bl	14a6c <__assert_fail@plt+0x3824>
   11d40:	mov	r1, #0
   11d44:	mov	r3, r8
   11d48:	mov	r2, r6
   11d4c:	str	r0, [sp]
   11d50:	mov	r0, r1
   11d54:	bl	1108c <error@plt>
   11d58:	b	11acc <__assert_fail@plt+0x884>
   11d5c:	ldr	r3, [sp, #20]
   11d60:	mov	r2, #5
   11d64:	ldr	r1, [pc, #416]	; 11f0c <__assert_fail@plt+0xcc4>
   11d68:	ldr	r3, [r3]
   11d6c:	mov	r0, r6
   11d70:	str	r3, [sp, #16]
   11d74:	bl	10ffc <dcgettext@plt>
   11d78:	mov	r1, r9
   11d7c:	str	r0, [sp, #24]
   11d80:	mov	r0, #4
   11d84:	bl	14b20 <__assert_fail@plt+0x38d8>
   11d88:	ldr	r2, [sp, #24]
   11d8c:	ldr	r1, [sp, #16]
   11d90:	mov	r3, r0
   11d94:	mov	r0, r6
   11d98:	bl	1108c <error@plt>
   11d9c:	b	11b3c <__assert_fail@plt+0x8f4>
   11da0:	mov	r0, sl
   11da4:	bl	1200c <__assert_fail@plt+0xdc4>
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #348]	; 11f10 <__assert_fail@plt+0xcc8>
   11db0:	bl	10ffc <dcgettext@plt>
   11db4:	mov	r4, r0
   11db8:	ldr	r0, [sp, #20]
   11dbc:	bl	14dc8 <__assert_fail@plt+0x3b80>
   11dc0:	mov	r2, r4
   11dc4:	mov	r1, r5
   11dc8:	mov	r3, r0
   11dcc:	mov	r0, r5
   11dd0:	bl	1108c <error@plt>
   11dd4:	mov	r0, #1
   11dd8:	bl	1200c <__assert_fail@plt+0xdc4>
   11ddc:	mov	r2, r3
   11de0:	b	11c0c <__assert_fail@plt+0x9c4>
   11de4:	bl	11008 <__stack_chk_fail@plt>
   11de8:	mov	r2, #5
   11dec:	ldr	r1, [pc, #288]	; 11f14 <__assert_fail@plt+0xccc>
   11df0:	mov	r0, sl
   11df4:	bl	10ffc <dcgettext@plt>
   11df8:	mov	r1, sl
   11dfc:	mov	r2, r0
   11e00:	mov	r0, sl
   11e04:	bl	1108c <error@plt>
   11e08:	b	11454 <__assert_fail@plt+0x20c>
   11e0c:	bl	1111c <__errno_location@plt>
   11e10:	ldr	r1, [pc, #236]	; 11f04 <__assert_fail@plt+0xcbc>
   11e14:	mov	r2, #5
   11e18:	ldr	r4, [r0]
   11e1c:	ldr	r0, [sp, #20]
   11e20:	bl	10ffc <dcgettext@plt>
   11e24:	ldr	r1, [sp, #24]
   11e28:	mov	r5, r0
   11e2c:	b	11cd4 <__assert_fail@plt+0xa8c>
   11e30:	mov	r2, #5
   11e34:	ldr	r1, [pc, #220]	; 11f18 <__assert_fail@plt+0xcd0>
   11e38:	mov	r0, #0
   11e3c:	bl	10ffc <dcgettext@plt>
   11e40:	sub	r5, r5, #-1073741823	; 0xc0000001
   11e44:	mov	r6, r0
   11e48:	ldr	r0, [r4, r5, lsl #2]
   11e4c:	bl	14dc8 <__assert_fail@plt+0x3b80>
   11e50:	mov	r1, #0
   11e54:	mov	r2, r6
   11e58:	mov	r3, r0
   11e5c:	mov	r0, r1
   11e60:	bl	1108c <error@plt>
   11e64:	b	11454 <__assert_fail@plt+0x20c>
   11e68:	andeq	sl, r2, r8, lsl #30
   11e6c:	muleq	r1, r8, r7
   11e70:	andeq	fp, r2, r0, lsl #3
   11e74:	andeq	r9, r1, r4, lsl fp
   11e78:	andeq	r9, r1, r8, ror #20
   11e7c:	andeq	r2, r1, r0, lsr #7
   11e80:	andeq	r9, r1, r8, asr #11
   11e84:	andeq	r0, r0, r1, lsl #2
   11e88:	andeq	r9, r1, r8, asr #22
   11e8c:	andeq	fp, r2, r4, lsl r1
   11e90:	andeq	fp, r2, r4, ror r1
   11e94:	andeq	r9, r1, r8, lsr #22
   11e98:	andeq	r9, r1, r8, lsr fp
   11e9c:	andeq	r9, r1, r8, ror r6
   11ea0:	andeq	r9, r1, r4, ror #20
   11ea4:	andeq	r0, r0, r2, lsl #2
   11ea8:	andeq	fp, r2, r8, ror r1
   11eac:	andeq	fp, r2, r8, ror #2
   11eb0:	andeq	fp, r2, r0, lsl r1
   11eb4:	andeq	r0, r0, r1, lsl r4
   11eb8:	andeq	r9, r1, r0, asr #29
   11ebc:	andeq	r9, r1, r0, ror #27
   11ec0:	andeq	r9, r1, ip, asr ip
   11ec4:	andeq	r9, r1, ip, lsr #24
   11ec8:	andeq	sl, r1, r0, lsl r0
   11ecc:	andeq	r9, r1, ip, lsl lr
   11ed0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11ed4:	andeq	r9, r1, ip, lsl #29
   11ed8:	andeq	r9, r1, r4, asr lr
   11edc:	andeq	r9, r1, r8, lsl ip
   11ee0:	andeq	r9, r1, r0, asr #26
   11ee4:	andeq	r9, r1, ip, lsr #27
   11ee8:	strdeq	r9, [r1], -ip
   11eec:	andeq	r9, r1, r0, asr #24
   11ef0:	andeq	r9, r1, r8, ror lr
   11ef4:			; <UNDEFINED> instruction: 0x00019bb8
   11ef8:	andeq	r9, r1, r4, lsl #25
   11efc:	andeq	r9, r1, ip, lsl ip
   11f00:	muleq	r2, r0, r1
   11f04:	andeq	r9, r1, r4, ror #23
   11f08:	andeq	r9, r1, r0, ror sp
   11f0c:	strdeq	r9, [r1], -ip
   11f10:	andeq	r9, r1, r4, lsl #24
   11f14:	andeq	r9, r1, ip, lsl #23
   11f18:	andeq	r9, r1, r8, asr #23
   11f1c:	mov	fp, #0
   11f20:	mov	lr, #0
   11f24:	pop	{r1}		; (ldr r1, [sp], #4)
   11f28:	mov	r2, sp
   11f2c:	push	{r2}		; (str r2, [sp, #-4]!)
   11f30:	push	{r0}		; (str r0, [sp, #-4]!)
   11f34:	ldr	ip, [pc, #16]	; 11f4c <__assert_fail@plt+0xd04>
   11f38:	push	{ip}		; (str ip, [sp, #-4]!)
   11f3c:	ldr	r0, [pc, #12]	; 11f50 <__assert_fail@plt+0xd08>
   11f40:	ldr	r3, [pc, #12]	; 11f54 <__assert_fail@plt+0xd0c>
   11f44:	bl	110b0 <__libc_start_main@plt>
   11f48:	bl	11218 <abort@plt>
   11f4c:	andeq	r9, r1, r8, ror #10
   11f50:	andeq	r1, r1, r8, asr r2
   11f54:	andeq	r9, r1, r8, lsl #10
   11f58:	ldr	r3, [pc, #20]	; 11f74 <__assert_fail@plt+0xd2c>
   11f5c:	ldr	r2, [pc, #20]	; 11f78 <__assert_fail@plt+0xd30>
   11f60:	add	r3, pc, r3
   11f64:	ldr	r2, [r3, r2]
   11f68:	cmp	r2, #0
   11f6c:	bxeq	lr
   11f70:	b	110c8 <__gmon_start__@plt>
   11f74:	muleq	r1, r8, r0
   11f78:	andeq	r0, r0, r4, lsl #2
   11f7c:	ldr	r0, [pc, #24]	; 11f9c <__assert_fail@plt+0xd54>
   11f80:	ldr	r3, [pc, #24]	; 11fa0 <__assert_fail@plt+0xd58>
   11f84:	cmp	r3, r0
   11f88:	bxeq	lr
   11f8c:	ldr	r3, [pc, #16]	; 11fa4 <__assert_fail@plt+0xd5c>
   11f90:	cmp	r3, #0
   11f94:	bxeq	lr
   11f98:	bx	r3
   11f9c:	andeq	fp, r2, ip, asr r1
   11fa0:	andeq	fp, r2, ip, asr r1
   11fa4:	andeq	r0, r0, r0
   11fa8:	ldr	r0, [pc, #36]	; 11fd4 <__assert_fail@plt+0xd8c>
   11fac:	ldr	r1, [pc, #36]	; 11fd8 <__assert_fail@plt+0xd90>
   11fb0:	sub	r1, r1, r0
   11fb4:	asr	r1, r1, #2
   11fb8:	add	r1, r1, r1, lsr #31
   11fbc:	asrs	r1, r1, #1
   11fc0:	bxeq	lr
   11fc4:	ldr	r3, [pc, #16]	; 11fdc <__assert_fail@plt+0xd94>
   11fc8:	cmp	r3, #0
   11fcc:	bxeq	lr
   11fd0:	bx	r3
   11fd4:	andeq	fp, r2, ip, asr r1
   11fd8:	andeq	fp, r2, ip, asr r1
   11fdc:	andeq	r0, r0, r0
   11fe0:	push	{r4, lr}
   11fe4:	ldr	r4, [pc, #24]	; 12004 <__assert_fail@plt+0xdbc>
   11fe8:	ldrb	r3, [r4]
   11fec:	cmp	r3, #0
   11ff0:	popne	{r4, pc}
   11ff4:	bl	11f7c <__assert_fail@plt+0xd34>
   11ff8:	mov	r3, #1
   11ffc:	strb	r3, [r4]
   12000:	pop	{r4, pc}
   12004:	andeq	fp, r2, ip, ror r1
   12008:	b	11fa8 <__assert_fail@plt+0xd60>
   1200c:	ldr	r3, [pc, #776]	; 1231c <__assert_fail@plt+0x10d4>
   12010:	push	{r7, lr}
   12014:	sub	sp, sp, #72	; 0x48
   12018:	ldr	r3, [r3]
   1201c:	subs	r4, r0, #0
   12020:	str	r3, [sp, #68]	; 0x44
   12024:	beq	12060 <__assert_fail@plt+0xe18>
   12028:	ldr	r3, [pc, #752]	; 12320 <__assert_fail@plt+0x10d8>
   1202c:	mov	r2, #5
   12030:	ldr	r1, [pc, #748]	; 12324 <__assert_fail@plt+0x10dc>
   12034:	mov	r0, #0
   12038:	ldr	r5, [r3]
   1203c:	bl	10ffc <dcgettext@plt>
   12040:	ldr	r3, [pc, #736]	; 12328 <__assert_fail@plt+0x10e0>
   12044:	mov	r1, #1
   12048:	ldr	r3, [r3]
   1204c:	mov	r2, r0
   12050:	mov	r0, r5
   12054:	bl	11158 <__fprintf_chk@plt>
   12058:	mov	r0, r4
   1205c:	bl	110ec <exit@plt>
   12060:	mov	r2, #5
   12064:	ldr	r1, [pc, #704]	; 1232c <__assert_fail@plt+0x10e4>
   12068:	bl	10ffc <dcgettext@plt>
   1206c:	ldr	r3, [pc, #692]	; 12328 <__assert_fail@plt+0x10e0>
   12070:	ldr	r5, [pc, #696]	; 12330 <__assert_fail@plt+0x10e8>
   12074:	ldr	r3, [r3]
   12078:	mov	r2, r3
   1207c:	str	r3, [sp]
   12080:	mov	r1, r0
   12084:	mov	r0, #1
   12088:	bl	11140 <__printf_chk@plt>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #668]	; 12334 <__assert_fail@plt+0x10ec>
   12094:	mov	r0, r4
   12098:	bl	10ffc <dcgettext@plt>
   1209c:	ldr	r1, [r5]
   120a0:	bl	10f84 <fputs_unlocked@plt>
   120a4:	mov	r2, #5
   120a8:	ldr	r1, [pc, #648]	; 12338 <__assert_fail@plt+0x10f0>
   120ac:	mov	r0, r4
   120b0:	bl	10ffc <dcgettext@plt>
   120b4:	ldr	r1, [r5]
   120b8:	bl	10f84 <fputs_unlocked@plt>
   120bc:	mov	r2, #5
   120c0:	ldr	r1, [pc, #628]	; 1233c <__assert_fail@plt+0x10f4>
   120c4:	mov	r0, r4
   120c8:	bl	10ffc <dcgettext@plt>
   120cc:	ldr	r1, [r5]
   120d0:	bl	10f84 <fputs_unlocked@plt>
   120d4:	mov	r2, #5
   120d8:	ldr	r1, [pc, #608]	; 12340 <__assert_fail@plt+0x10f8>
   120dc:	mov	r0, r4
   120e0:	bl	10ffc <dcgettext@plt>
   120e4:	ldr	r1, [r5]
   120e8:	bl	10f84 <fputs_unlocked@plt>
   120ec:	mov	r2, #5
   120f0:	ldr	r1, [pc, #588]	; 12344 <__assert_fail@plt+0x10fc>
   120f4:	mov	r0, r4
   120f8:	bl	10ffc <dcgettext@plt>
   120fc:	ldr	r1, [r5]
   12100:	bl	10f84 <fputs_unlocked@plt>
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #568]	; 12348 <__assert_fail@plt+0x1100>
   1210c:	mov	r0, r4
   12110:	bl	10ffc <dcgettext@plt>
   12114:	ldr	r1, [r5]
   12118:	bl	10f84 <fputs_unlocked@plt>
   1211c:	mov	r2, #5
   12120:	ldr	r1, [pc, #548]	; 1234c <__assert_fail@plt+0x1104>
   12124:	mov	r0, r4
   12128:	bl	10ffc <dcgettext@plt>
   1212c:	ldr	r1, [r5]
   12130:	bl	10f84 <fputs_unlocked@plt>
   12134:	mov	r2, #5
   12138:	ldr	r1, [pc, #528]	; 12350 <__assert_fail@plt+0x1108>
   1213c:	mov	r0, r4
   12140:	bl	10ffc <dcgettext@plt>
   12144:	ldr	r1, [r5]
   12148:	bl	10f84 <fputs_unlocked@plt>
   1214c:	ldr	lr, [pc, #512]	; 12354 <__assert_fail@plt+0x110c>
   12150:	add	ip, sp, #12
   12154:	ldm	lr!, {r0, r1, r2, r3}
   12158:	stmia	ip!, {r0, r1, r2, r3}
   1215c:	ldm	lr!, {r0, r1, r2, r3}
   12160:	ldr	r6, [sp, #12]
   12164:	stmia	ip!, {r0, r1, r2, r3}
   12168:	cmp	r6, #0
   1216c:	ldm	lr!, {r0, r1, r2, r3}
   12170:	addeq	r5, sp, #12
   12174:	stmia	ip!, {r0, r1, r2, r3}
   12178:	ldm	lr, {r0, r1}
   1217c:	stm	ip, {r0, r1}
   12180:	beq	121b0 <__assert_fail@plt+0xf68>
   12184:	ldr	r7, [pc, #460]	; 12358 <__assert_fail@plt+0x1110>
   12188:	add	r5, sp, #12
   1218c:	b	1219c <__assert_fail@plt+0xf54>
   12190:	ldr	r6, [r5, #8]!
   12194:	cmp	r6, #0
   12198:	beq	121b0 <__assert_fail@plt+0xf68>
   1219c:	mov	r1, r6
   121a0:	mov	r0, r7
   121a4:	bl	10f9c <strcmp@plt>
   121a8:	cmp	r0, #0
   121ac:	bne	12190 <__assert_fail@plt+0xf48>
   121b0:	ldr	r5, [r5, #4]
   121b4:	mov	r2, #5
   121b8:	cmp	r5, #0
   121bc:	ldr	r1, [pc, #408]	; 1235c <__assert_fail@plt+0x1114>
   121c0:	beq	12268 <__assert_fail@plt+0x1020>
   121c4:	mov	r0, #0
   121c8:	bl	10ffc <dcgettext@plt>
   121cc:	ldr	r3, [pc, #396]	; 12360 <__assert_fail@plt+0x1118>
   121d0:	ldr	r2, [pc, #396]	; 12364 <__assert_fail@plt+0x111c>
   121d4:	mov	r1, r0
   121d8:	mov	r0, #1
   121dc:	bl	11140 <__printf_chk@plt>
   121e0:	mov	r1, #0
   121e4:	mov	r0, #5
   121e8:	bl	11188 <setlocale@plt>
   121ec:	cmp	r0, #0
   121f0:	ldreq	r6, [pc, #352]	; 12358 <__assert_fail@plt+0x1110>
   121f4:	beq	12210 <__assert_fail@plt+0xfc8>
   121f8:	mov	r2, #3
   121fc:	ldr	r1, [pc, #356]	; 12368 <__assert_fail@plt+0x1120>
   12200:	bl	1120c <strncmp@plt>
   12204:	ldr	r6, [pc, #332]	; 12358 <__assert_fail@plt+0x1110>
   12208:	cmp	r0, #0
   1220c:	bne	122f8 <__assert_fail@plt+0x10b0>
   12210:	mov	r2, #5
   12214:	ldr	r1, [pc, #336]	; 1236c <__assert_fail@plt+0x1124>
   12218:	mov	r0, #0
   1221c:	bl	10ffc <dcgettext@plt>
   12220:	ldr	r3, [pc, #304]	; 12358 <__assert_fail@plt+0x1110>
   12224:	ldr	r2, [pc, #308]	; 12360 <__assert_fail@plt+0x1118>
   12228:	mov	r1, r0
   1222c:	mov	r0, #1
   12230:	bl	11140 <__printf_chk@plt>
   12234:	mov	r2, #5
   12238:	ldr	r1, [pc, #304]	; 12370 <__assert_fail@plt+0x1128>
   1223c:	mov	r0, #0
   12240:	bl	10ffc <dcgettext@plt>
   12244:	ldr	r2, [pc, #296]	; 12374 <__assert_fail@plt+0x112c>
   12248:	cmp	r5, r6
   1224c:	ldr	r3, [pc, #292]	; 12378 <__assert_fail@plt+0x1130>
   12250:	movne	r3, r2
   12254:	mov	r1, r0
   12258:	mov	r2, r5
   1225c:	mov	r0, #1
   12260:	bl	11140 <__printf_chk@plt>
   12264:	b	12058 <__assert_fail@plt+0xe10>
   12268:	mov	r0, r5
   1226c:	bl	10ffc <dcgettext@plt>
   12270:	ldr	r3, [pc, #232]	; 12360 <__assert_fail@plt+0x1118>
   12274:	ldr	r2, [pc, #232]	; 12364 <__assert_fail@plt+0x111c>
   12278:	mov	r1, r0
   1227c:	mov	r0, #1
   12280:	bl	11140 <__printf_chk@plt>
   12284:	mov	r1, r5
   12288:	mov	r0, #5
   1228c:	bl	11188 <setlocale@plt>
   12290:	cmp	r0, #0
   12294:	beq	122ac <__assert_fail@plt+0x1064>
   12298:	mov	r2, #3
   1229c:	ldr	r1, [pc, #196]	; 12368 <__assert_fail@plt+0x1120>
   122a0:	bl	1120c <strncmp@plt>
   122a4:	cmp	r0, #0
   122a8:	bne	122f0 <__assert_fail@plt+0x10a8>
   122ac:	mov	r2, #5
   122b0:	ldr	r1, [pc, #180]	; 1236c <__assert_fail@plt+0x1124>
   122b4:	mov	r0, #0
   122b8:	bl	10ffc <dcgettext@plt>
   122bc:	ldr	r3, [pc, #148]	; 12358 <__assert_fail@plt+0x1110>
   122c0:	ldr	r2, [pc, #152]	; 12360 <__assert_fail@plt+0x1118>
   122c4:	mov	r5, r3
   122c8:	mov	r1, r0
   122cc:	mov	r0, #1
   122d0:	bl	11140 <__printf_chk@plt>
   122d4:	ldr	r1, [pc, #148]	; 12370 <__assert_fail@plt+0x1128>
   122d8:	mov	r2, #5
   122dc:	mov	r0, #0
   122e0:	bl	10ffc <dcgettext@plt>
   122e4:	ldr	r3, [pc, #140]	; 12378 <__assert_fail@plt+0x1130>
   122e8:	mov	r1, r0
   122ec:	b	12258 <__assert_fail@plt+0x1010>
   122f0:	ldr	r6, [pc, #96]	; 12358 <__assert_fail@plt+0x1110>
   122f4:	mov	r5, r6
   122f8:	mov	r2, #5
   122fc:	ldr	r1, [pc, #120]	; 1237c <__assert_fail@plt+0x1134>
   12300:	mov	r0, #0
   12304:	bl	10ffc <dcgettext@plt>
   12308:	ldr	r2, [pc, #72]	; 12358 <__assert_fail@plt+0x1110>
   1230c:	mov	r1, r0
   12310:	mov	r0, #1
   12314:	bl	11140 <__printf_chk@plt>
   12318:	b	12210 <__assert_fail@plt+0xfc8>
   1231c:	andeq	sl, r2, r8, lsl #30
   12320:	andeq	fp, r2, r0, ror r1
   12324:	andeq	r9, r1, r0, lsl #13
   12328:	andeq	fp, r2, ip, lsr #3
   1232c:	andeq	r9, r1, r8, lsr #13
   12330:	andeq	fp, r2, r4, ror r1
   12334:	andeq	r9, r1, r0, lsr r7
   12338:	muleq	r1, ip, r7
   1233c:	andeq	r9, r1, r8, ror #16
   12340:	andeq	r9, r1, r8, ror #17
   12344:	andeq	r9, r1, ip, lsr #18
   12348:	andeq	r9, r1, r0, ror r9
   1234c:	andeq	r9, r1, r0, lsr #19
   12350:	ldrdeq	r9, [r1], -r8
   12354:	muleq	r1, r0, r5
   12358:	andeq	r9, r1, r8, ror r6
   1235c:	andeq	r9, r1, r4, lsr #20
   12360:	andeq	r9, r1, ip, lsr sl
   12364:	andeq	r9, r1, r4, ror #20
   12368:	andeq	r9, r1, r4, ror sl
   1236c:	andeq	r9, r1, r0, asr #21
   12370:	andeq	r9, r1, r0, ror #21
   12374:	muleq	r1, r8, r7
   12378:	andeq	r9, r1, r8, lsr #30
   1237c:	andeq	r9, r1, r8, ror sl
   12380:	ldr	r3, [pc, #4]	; 1238c <__assert_fail@plt+0x1144>
   12384:	str	r0, [r3]
   12388:	bx	lr
   1238c:	andeq	fp, r2, r4, lsr #3
   12390:	ldr	r3, [pc, #4]	; 1239c <__assert_fail@plt+0x1154>
   12394:	strb	r0, [r3, #4]
   12398:	bx	lr
   1239c:	andeq	fp, r2, r4, lsr #3
   123a0:	ldr	r3, [pc, #180]	; 1245c <__assert_fail@plt+0x1214>
   123a4:	push	{r4, r5, r6, lr}
   123a8:	sub	sp, sp, #8
   123ac:	ldr	r0, [r3]
   123b0:	bl	17a08 <fts_children@@Base+0x1cc>
   123b4:	cmp	r0, #0
   123b8:	beq	123e0 <__assert_fail@plt+0x1198>
   123bc:	bl	1111c <__errno_location@plt>
   123c0:	ldr	r5, [pc, #152]	; 12460 <__assert_fail@plt+0x1218>
   123c4:	ldrb	r3, [r5, #4]
   123c8:	cmp	r3, #0
   123cc:	mov	r4, r0
   123d0:	beq	123fc <__assert_fail@plt+0x11b4>
   123d4:	ldr	r3, [r0]
   123d8:	cmp	r3, #32
   123dc:	bne	123fc <__assert_fail@plt+0x11b4>
   123e0:	ldr	r3, [pc, #124]	; 12464 <__assert_fail@plt+0x121c>
   123e4:	ldr	r0, [r3]
   123e8:	bl	17a08 <fts_children@@Base+0x1cc>
   123ec:	cmp	r0, #0
   123f0:	bne	1243c <__assert_fail@plt+0x11f4>
   123f4:	add	sp, sp, #8
   123f8:	pop	{r4, r5, r6, pc}
   123fc:	mov	r2, #5
   12400:	ldr	r1, [pc, #96]	; 12468 <__assert_fail@plt+0x1220>
   12404:	mov	r0, #0
   12408:	bl	10ffc <dcgettext@plt>
   1240c:	mov	r6, r0
   12410:	ldr	r0, [r5]
   12414:	cmp	r0, #0
   12418:	beq	12448 <__assert_fail@plt+0x1200>
   1241c:	ldr	r4, [r4]
   12420:	bl	14be8 <__assert_fail@plt+0x39a0>
   12424:	mov	r1, r4
   12428:	str	r6, [sp]
   1242c:	ldr	r2, [pc, #56]	; 1246c <__assert_fail@plt+0x1224>
   12430:	mov	r3, r0
   12434:	mov	r0, #0
   12438:	bl	1108c <error@plt>
   1243c:	ldr	r3, [pc, #44]	; 12470 <__assert_fail@plt+0x1228>
   12440:	ldr	r0, [r3]
   12444:	bl	10fcc <_exit@plt>
   12448:	mov	r3, r6
   1244c:	ldr	r1, [r4]
   12450:	ldr	r2, [pc, #28]	; 12474 <__assert_fail@plt+0x122c>
   12454:	bl	1108c <error@plt>
   12458:	b	1243c <__assert_fail@plt+0x11f4>
   1245c:	andeq	fp, r2, r4, ror r1
   12460:	andeq	fp, r2, r4, lsr #3
   12464:	andeq	fp, r2, r0, ror r1
   12468:	andeq	sl, r1, r0
   1246c:	andeq	sl, r1, ip
   12470:	andeq	fp, r2, r8, lsl r1
   12474:	andeq	sl, r1, r0, lsl r0
   12478:	and	r3, r0, #61440	; 0xf000
   1247c:	cmp	r3, #32768	; 0x8000
   12480:	moveq	ip, #45	; 0x2d
   12484:	beq	124d0 <__assert_fail@plt+0x1288>
   12488:	cmp	r3, #16384	; 0x4000
   1248c:	moveq	ip, #100	; 0x64
   12490:	beq	124d0 <__assert_fail@plt+0x1288>
   12494:	cmp	r3, #24576	; 0x6000
   12498:	moveq	ip, #98	; 0x62
   1249c:	beq	124d0 <__assert_fail@plt+0x1288>
   124a0:	cmp	r3, #8192	; 0x2000
   124a4:	moveq	ip, #99	; 0x63
   124a8:	beq	124d0 <__assert_fail@plt+0x1288>
   124ac:	cmp	r3, #40960	; 0xa000
   124b0:	moveq	ip, #108	; 0x6c
   124b4:	beq	124d0 <__assert_fail@plt+0x1288>
   124b8:	cmp	r3, #4096	; 0x1000
   124bc:	moveq	ip, #112	; 0x70
   124c0:	beq	124d0 <__assert_fail@plt+0x1288>
   124c4:	cmp	r3, #49152	; 0xc000
   124c8:	moveq	ip, #115	; 0x73
   124cc:	movne	ip, #63	; 0x3f
   124d0:	tst	r0, #256	; 0x100
   124d4:	movne	r2, #114	; 0x72
   124d8:	moveq	r2, #45	; 0x2d
   124dc:	tst	r0, #128	; 0x80
   124e0:	movne	r3, #119	; 0x77
   124e4:	moveq	r3, #45	; 0x2d
   124e8:	tst	r0, #2048	; 0x800
   124ec:	strb	r3, [r1, #2]
   124f0:	strb	ip, [r1]
   124f4:	strb	r2, [r1, #1]
   124f8:	and	r3, r0, #64	; 0x40
   124fc:	beq	1259c <__assert_fail@plt+0x1354>
   12500:	cmp	r3, #0
   12504:	movne	ip, #115	; 0x73
   12508:	moveq	ip, #83	; 0x53
   1250c:	tst	r0, #32
   12510:	movne	r2, #114	; 0x72
   12514:	moveq	r2, #45	; 0x2d
   12518:	tst	r0, #16
   1251c:	movne	r3, #119	; 0x77
   12520:	moveq	r3, #45	; 0x2d
   12524:	tst	r0, #1024	; 0x400
   12528:	strb	r3, [r1, #5]
   1252c:	strb	ip, [r1, #3]
   12530:	strb	r2, [r1, #4]
   12534:	and	r3, r0, #8
   12538:	beq	125ac <__assert_fail@plt+0x1364>
   1253c:	cmp	r3, #0
   12540:	movne	ip, #115	; 0x73
   12544:	moveq	ip, #83	; 0x53
   12548:	tst	r0, #4
   1254c:	movne	r2, #114	; 0x72
   12550:	moveq	r2, #45	; 0x2d
   12554:	tst	r0, #2
   12558:	movne	r3, #119	; 0x77
   1255c:	moveq	r3, #45	; 0x2d
   12560:	tst	r0, #512	; 0x200
   12564:	strb	ip, [r1, #6]
   12568:	strb	r2, [r1, #7]
   1256c:	strb	r3, [r1, #8]
   12570:	and	r0, r0, #1
   12574:	beq	125bc <__assert_fail@plt+0x1374>
   12578:	cmp	r0, #0
   1257c:	movne	r0, #116	; 0x74
   12580:	moveq	r0, #84	; 0x54
   12584:	mov	r2, #32
   12588:	mov	r3, #0
   1258c:	strb	r0, [r1, #9]
   12590:	strb	r2, [r1, #10]
   12594:	strb	r3, [r1, #11]
   12598:	bx	lr
   1259c:	cmp	r3, #0
   125a0:	movne	ip, #120	; 0x78
   125a4:	moveq	ip, #45	; 0x2d
   125a8:	b	1250c <__assert_fail@plt+0x12c4>
   125ac:	cmp	r3, #0
   125b0:	movne	ip, #120	; 0x78
   125b4:	moveq	ip, #45	; 0x2d
   125b8:	b	12548 <__assert_fail@plt+0x1300>
   125bc:	cmp	r0, #0
   125c0:	movne	r0, #120	; 0x78
   125c4:	moveq	r0, #45	; 0x2d
   125c8:	b	12584 <__assert_fail@plt+0x133c>
   125cc:	ldr	r0, [r0, #16]
   125d0:	b	12478 <__assert_fail@plt+0x1230>
   125d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d8:	mov	r4, r0
   125dc:	ldrb	r3, [r0]
   125e0:	sub	r2, r3, #48	; 0x30
   125e4:	cmp	r2, #7
   125e8:	bls	12694 <__assert_fail@plt+0x144c>
   125ec:	cmp	r3, #0
   125f0:	moveq	r0, #16
   125f4:	beq	12640 <__assert_fail@plt+0x13f8>
   125f8:	mov	r2, r4
   125fc:	mov	r0, #1
   12600:	and	r1, r3, #239	; 0xef
   12604:	cmp	r3, #43	; 0x2b
   12608:	cmpne	r1, #45	; 0x2d
   1260c:	ldrb	r3, [r2, #1]!
   12610:	moveq	r1, #1
   12614:	movne	r1, #0
   12618:	cmp	r3, #0
   1261c:	add	r0, r0, r1
   12620:	bne	12600 <__assert_fail@plt+0x13b8>
   12624:	lsrs	r3, r0, #28
   12628:	movne	r3, #1
   1262c:	moveq	r3, #0
   12630:	lsls	r0, r0, #4
   12634:	bmi	1296c <__assert_fail@plt+0x1724>
   12638:	cmp	r3, #0
   1263c:	bne	1296c <__assert_fail@plt+0x1724>
   12640:	ldr	r9, [pc, #808]	; 12970 <__assert_fail@plt+0x1728>
   12644:	ldr	sl, [pc, #808]	; 12974 <__assert_fail@plt+0x172c>
   12648:	ldr	r6, [pc, #808]	; 12978 <__assert_fail@plt+0x1730>
   1264c:	bl	153a0 <__assert_fail@plt+0x4158>
   12650:	mov	lr, #0
   12654:	mov	r5, #0
   12658:	ldrb	ip, [r4]
   1265c:	mov	r2, r4
   12660:	add	r4, r4, #1
   12664:	cmp	ip, #97	; 0x61
   12668:	beq	128dc <__assert_fail@plt+0x1694>
   1266c:	bls	126d0 <__assert_fail@plt+0x1488>
   12670:	cmp	ip, #111	; 0x6f
   12674:	beq	128f4 <__assert_fail@plt+0x16ac>
   12678:	cmp	ip, #117	; 0x75
   1267c:	beq	128ec <__assert_fail@plt+0x16a4>
   12680:	cmp	ip, #103	; 0x67
   12684:	beq	128e4 <__assert_fail@plt+0x169c>
   12688:	bl	10fc0 <free@plt>
   1268c:	mov	r0, #0
   12690:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12694:	ldr	ip, [pc, #732]	; 12978 <__assert_fail@plt+0x1730>
   12698:	add	r1, r0, #1
   1269c:	mov	r5, #0
   126a0:	b	126b4 <__assert_fail@plt+0x146c>
   126a4:	ldrb	r3, [r1], #1
   126a8:	sub	r0, r3, #48	; 0x30
   126ac:	cmp	r0, #7
   126b0:	bhi	128fc <__assert_fail@plt+0x16b4>
   126b4:	add	r5, r3, r5, lsl #3
   126b8:	sub	r5, r5, #48	; 0x30
   126bc:	cmp	r5, ip
   126c0:	mov	r2, r1
   126c4:	bls	126a4 <__assert_fail@plt+0x145c>
   126c8:	mov	r0, #0
   126cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d0:	cmp	ip, #45	; 0x2d
   126d4:	beq	126e8 <__assert_fail@plt+0x14a0>
   126d8:	cmp	ip, #61	; 0x3d
   126dc:	beq	126e8 <__assert_fail@plt+0x14a0>
   126e0:	cmp	ip, #43	; 0x2b
   126e4:	bne	12688 <__assert_fail@plt+0x1440>
   126e8:	add	r7, lr, #1
   126ec:	mov	r8, #3
   126f0:	add	lr, r0, lr, lsl #4
   126f4:	b	12748 <__assert_fail@plt+0x1500>
   126f8:	cmp	r3, #117	; 0x75
   126fc:	addeq	r3, r2, #2
   12700:	moveq	r1, #448	; 0x1c0
   12704:	bne	127e4 <__assert_fail@plt+0x159c>
   12708:	strb	ip, [lr]
   1270c:	ldrb	ip, [r2, #2]
   12710:	mov	r2, r3
   12714:	strb	r8, [lr, #1]
   12718:	str	r5, [lr, #4]
   1271c:	str	r1, [lr, #8]
   12720:	cmp	r5, #0
   12724:	andne	r1, r1, r5
   12728:	and	r3, ip, #239	; 0xef
   1272c:	cmp	ip, #43	; 0x2b
   12730:	cmpne	r3, #45	; 0x2d
   12734:	str	r1, [lr, #12]
   12738:	add	r3, r7, #1
   1273c:	add	lr, lr, #16
   12740:	bne	12948 <__assert_fail@plt+0x1700>
   12744:	mov	r7, r3
   12748:	ldrb	r3, [r2, #1]
   1274c:	add	r4, r2, #1
   12750:	cmp	r3, #103	; 0x67
   12754:	beq	128d0 <__assert_fail@plt+0x1688>
   12758:	bls	12770 <__assert_fail@plt+0x1528>
   1275c:	cmp	r3, #111	; 0x6f
   12760:	bne	126f8 <__assert_fail@plt+0x14b0>
   12764:	add	r3, r2, #2
   12768:	mov	r1, #7
   1276c:	b	12708 <__assert_fail@plt+0x14c0>
   12770:	sub	r1, r3, #48	; 0x30
   12774:	cmp	r1, #7
   12778:	addls	r4, r2, #2
   1277c:	movls	r1, #0
   12780:	bhi	127e4 <__assert_fail@plt+0x159c>
   12784:	add	r1, r3, r1, lsl #3
   12788:	sub	r1, r1, #48	; 0x30
   1278c:	cmp	r1, r6
   12790:	mov	r2, r4
   12794:	bhi	12688 <__assert_fail@plt+0x1440>
   12798:	ldrb	r3, [r4]
   1279c:	add	r4, r4, #1
   127a0:	sub	fp, r3, #48	; 0x30
   127a4:	cmp	fp, #7
   127a8:	bls	12784 <__assert_fail@plt+0x153c>
   127ac:	cmp	r5, #0
   127b0:	bne	12688 <__assert_fail@plt+0x1440>
   127b4:	cmp	r3, #0
   127b8:	cmpne	r3, #44	; 0x2c
   127bc:	bne	12688 <__assert_fail@plt+0x1440>
   127c0:	ldr	r5, [pc, #432]	; 12978 <__assert_fail@plt+0x1730>
   127c4:	strb	ip, [lr]
   127c8:	mov	ip, #1
   127cc:	strb	ip, [lr, #1]
   127d0:	str	r1, [lr, #8]
   127d4:	str	r6, [lr, #4]
   127d8:	mov	ip, r3
   127dc:	mov	r1, r5
   127e0:	b	12728 <__assert_fail@plt+0x14e0>
   127e4:	mov	fp, #1
   127e8:	mov	r1, #0
   127ec:	sub	r2, r3, #88	; 0x58
   127f0:	cmp	r2, #32
   127f4:	ldrls	pc, [pc, r2, lsl #2]
   127f8:	b	128b4 <__assert_fail@plt+0x166c>
   127fc:	andeq	r2, r1, r0, lsl #17
   12800:			; <UNDEFINED> instruction: 0x000128b4
   12804:			; <UNDEFINED> instruction: 0x000128b4
   12808:			; <UNDEFINED> instruction: 0x000128b4
   1280c:			; <UNDEFINED> instruction: 0x000128b4
   12810:			; <UNDEFINED> instruction: 0x000128b4
   12814:			; <UNDEFINED> instruction: 0x000128b4
   12818:			; <UNDEFINED> instruction: 0x000128b4
   1281c:			; <UNDEFINED> instruction: 0x000128b4
   12820:			; <UNDEFINED> instruction: 0x000128b4
   12824:			; <UNDEFINED> instruction: 0x000128b4
   12828:			; <UNDEFINED> instruction: 0x000128b4
   1282c:			; <UNDEFINED> instruction: 0x000128b4
   12830:			; <UNDEFINED> instruction: 0x000128b4
   12834:			; <UNDEFINED> instruction: 0x000128b4
   12838:			; <UNDEFINED> instruction: 0x000128b4
   1283c:			; <UNDEFINED> instruction: 0x000128b4
   12840:			; <UNDEFINED> instruction: 0x000128b4
   12844:			; <UNDEFINED> instruction: 0x000128b4
   12848:			; <UNDEFINED> instruction: 0x000128b4
   1284c:			; <UNDEFINED> instruction: 0x000128b4
   12850:			; <UNDEFINED> instruction: 0x000128b4
   12854:			; <UNDEFINED> instruction: 0x000128b4
   12858:			; <UNDEFINED> instruction: 0x000128b4
   1285c:			; <UNDEFINED> instruction: 0x000128b4
   12860:			; <UNDEFINED> instruction: 0x000128b4
   12864:	andeq	r2, r1, ip, lsr #17
   12868:	andeq	r2, r1, r4, lsr #17
   1286c:	muleq	r1, ip, r8
   12870:			; <UNDEFINED> instruction: 0x000128b4
   12874:			; <UNDEFINED> instruction: 0x000128b4
   12878:	muleq	r1, r4, r8
   1287c:	andeq	r2, r1, ip, lsl #17
   12880:	mov	fp, #2
   12884:	ldrb	r3, [r4, #1]!
   12888:	b	127ec <__assert_fail@plt+0x15a4>
   1288c:	orr	r1, r1, #73	; 0x49
   12890:	b	12884 <__assert_fail@plt+0x163c>
   12894:	orr	r1, r1, #146	; 0x92
   12898:	b	12884 <__assert_fail@plt+0x163c>
   1289c:	orr	r1, r1, #512	; 0x200
   128a0:	b	12884 <__assert_fail@plt+0x163c>
   128a4:	orr	r1, r1, #3072	; 0xc00
   128a8:	b	12884 <__assert_fail@plt+0x163c>
   128ac:	orr	r1, r1, #292	; 0x124
   128b0:	b	12884 <__assert_fail@plt+0x163c>
   128b4:	strb	ip, [lr]
   128b8:	mov	r2, r4
   128bc:	mov	ip, r3
   128c0:	strb	fp, [lr, #1]
   128c4:	str	r5, [lr, #4]
   128c8:	str	r1, [lr, #8]
   128cc:	b	12720 <__assert_fail@plt+0x14d8>
   128d0:	add	r3, r2, #2
   128d4:	mov	r1, #56	; 0x38
   128d8:	b	12708 <__assert_fail@plt+0x14c0>
   128dc:	ldr	r5, [pc, #148]	; 12978 <__assert_fail@plt+0x1730>
   128e0:	b	12658 <__assert_fail@plt+0x1410>
   128e4:	orr	r5, r5, sl
   128e8:	b	12658 <__assert_fail@plt+0x1410>
   128ec:	orr	r5, r5, #2496	; 0x9c0
   128f0:	b	12658 <__assert_fail@plt+0x1410>
   128f4:	orr	r5, r5, r9
   128f8:	b	12658 <__assert_fail@plt+0x1410>
   128fc:	cmp	r3, #0
   12900:	bne	126c8 <__assert_fail@plt+0x1480>
   12904:	sub	r2, r2, r4
   12908:	cmp	r2, #4
   1290c:	andle	r4, r5, #3072	; 0xc00
   12910:	mov	r0, #32
   12914:	mvnle	r4, r4, lsr #10
   12918:	ldrgt	r4, [pc, #88]	; 12978 <__assert_fail@plt+0x1730>
   1291c:	mvnle	r4, r4, lsl #10
   12920:	bl	153a0 <__assert_fail@plt+0x4158>
   12924:	ldr	r1, [pc, #80]	; 1297c <__assert_fail@plt+0x1734>
   12928:	ldr	r2, [pc, #72]	; 12978 <__assert_fail@plt+0x1730>
   1292c:	mov	r3, #0
   12930:	str	r5, [r0, #8]
   12934:	str	r4, [r0, #12]
   12938:	strh	r1, [r0]
   1293c:	str	r2, [r0, #4]
   12940:	strb	r3, [r0, #17]
   12944:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12948:	cmp	ip, #44	; 0x2c
   1294c:	addeq	r4, r2, #1
   12950:	moveq	lr, r7
   12954:	beq	12654 <__assert_fail@plt+0x140c>
   12958:	cmp	ip, #0
   1295c:	bne	12688 <__assert_fail@plt+0x1440>
   12960:	add	r7, r0, r7, lsl #4
   12964:	strb	ip, [r7, #1]
   12968:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1296c:	bl	155e8 <__assert_fail@plt+0x43a0>
   12970:	andeq	r0, r0, r7, lsl #4
   12974:	andeq	r0, r0, r8, lsr r4
   12978:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1297c:	andeq	r0, r0, sp, lsr r1
   12980:	push	{r4, r5, r6, lr}
   12984:	sub	sp, sp, #112	; 0x70
   12988:	ldr	r4, [pc, #100]	; 129f4 <__assert_fail@plt+0x17ac>
   1298c:	mov	r1, r0
   12990:	mov	r2, sp
   12994:	ldr	r3, [r4]
   12998:	mov	r0, #3
   1299c:	str	r3, [sp, #108]	; 0x6c
   129a0:	bl	11200 <__xstat64@plt>
   129a4:	subs	r5, r0, #0
   129a8:	movne	r0, #0
   129ac:	bne	129d8 <__assert_fail@plt+0x1790>
   129b0:	mov	r0, #32
   129b4:	ldr	r6, [sp, #16]
   129b8:	bl	153a0 <__assert_fail@plt+0x4158>
   129bc:	ldr	r3, [pc, #52]	; 129f8 <__assert_fail@plt+0x17b0>
   129c0:	ldr	r2, [pc, #52]	; 129fc <__assert_fail@plt+0x17b4>
   129c4:	str	r6, [r0, #8]
   129c8:	strb	r5, [r0, #17]
   129cc:	strh	r2, [r0]
   129d0:	str	r3, [r0, #4]
   129d4:	str	r3, [r0, #12]
   129d8:	ldr	r2, [sp, #108]	; 0x6c
   129dc:	ldr	r3, [r4]
   129e0:	cmp	r2, r3
   129e4:	bne	129f0 <__assert_fail@plt+0x17a8>
   129e8:	add	sp, sp, #112	; 0x70
   129ec:	pop	{r4, r5, r6, pc}
   129f0:	bl	11008 <__stack_chk_fail@plt>
   129f4:	andeq	sl, r2, r8, lsl #30
   129f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   129fc:	andeq	r0, r0, sp, lsr r1
   12a00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a04:	ldrb	r4, [r3, #1]
   12a08:	ldr	r8, [pc, #336]	; 12b60 <__assert_fail@plt+0x1918>
   12a0c:	ldr	sl, [sp, #32]
   12a10:	cmp	r4, #0
   12a14:	and	r0, r0, r8
   12a18:	beq	12b58 <__assert_fail@plt+0x1910>
   12a1c:	add	r3, r3, #16
   12a20:	mvn	r2, r2
   12a24:	mov	r7, #0
   12a28:	mvn	r9, #3072	; 0xc00
   12a2c:	b	12aa8 <__assert_fail@plt+0x1860>
   12a30:	cmp	r4, #2
   12a34:	mvn	lr, #0
   12a38:	beq	12b48 <__assert_fail@plt+0x1900>
   12a3c:	mov	r6, r1
   12a40:	cmp	r4, #3
   12a44:	bne	12a6c <__assert_fail@plt+0x1824>
   12a48:	and	ip, ip, r0
   12a4c:	tst	ip, #292	; 0x124
   12a50:	movne	r4, #292	; 0x124
   12a54:	moveq	r4, #0
   12a58:	tst	ip, #146	; 0x92
   12a5c:	orrne	r4, r4, #146	; 0x92
   12a60:	tst	ip, #73	; 0x49
   12a64:	orrne	r4, r4, #73	; 0x49
   12a68:	orr	ip, r4, ip
   12a6c:	cmp	r5, #0
   12a70:	and	ip, ip, lr
   12a74:	ldrb	r4, [r3, #-16]
   12a78:	bne	12ae4 <__assert_fail@plt+0x189c>
   12a7c:	cmp	r4, #45	; 0x2d
   12a80:	and	ip, ip, r2
   12a84:	beq	12b30 <__assert_fail@plt+0x18e8>
   12a88:	cmp	r4, #61	; 0x3d
   12a8c:	beq	12b04 <__assert_fail@plt+0x18bc>
   12a90:	cmp	r4, #43	; 0x2b
   12a94:	beq	12b3c <__assert_fail@plt+0x18f4>
   12a98:	add	r3, r3, #16
   12a9c:	ldrb	r4, [r3, #-15]
   12aa0:	cmp	r4, #0
   12aa4:	beq	12b24 <__assert_fail@plt+0x18dc>
   12aa8:	cmp	r1, #0
   12aac:	ldr	r5, [r3, #-12]
   12ab0:	ldr	ip, [r3, #-8]
   12ab4:	beq	12a30 <__assert_fail@plt+0x17e8>
   12ab8:	ldr	lr, [r3, #-4]
   12abc:	cmp	r4, #2
   12ac0:	mvn	r6, lr
   12ac4:	and	r6, r6, #3072	; 0xc00
   12ac8:	orr	lr, lr, r9
   12acc:	bne	12a40 <__assert_fail@plt+0x17f8>
   12ad0:	orr	ip, ip, #73	; 0x49
   12ad4:	cmp	r5, #0
   12ad8:	and	ip, ip, lr
   12adc:	ldrb	r4, [r3, #-16]
   12ae0:	beq	12a7c <__assert_fail@plt+0x1834>
   12ae4:	cmp	r4, #45	; 0x2d
   12ae8:	and	ip, ip, r5
   12aec:	beq	12b30 <__assert_fail@plt+0x18e8>
   12af0:	cmp	r4, #61	; 0x3d
   12af4:	bne	12a90 <__assert_fail@plt+0x1848>
   12af8:	mvn	r5, r5
   12afc:	orr	r6, r6, r5
   12b00:	mvn	lr, r6
   12b04:	add	r3, r3, #16
   12b08:	ldrb	r4, [r3, #-15]
   12b0c:	and	lr, lr, r8
   12b10:	and	r0, r0, r6
   12b14:	cmp	r4, #0
   12b18:	orr	r7, r7, lr
   12b1c:	orr	r0, r0, ip
   12b20:	bne	12aa8 <__assert_fail@plt+0x1860>
   12b24:	cmp	sl, #0
   12b28:	strne	r7, [sl]
   12b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b30:	orr	r7, r7, ip
   12b34:	bic	r0, r0, ip
   12b38:	b	12a98 <__assert_fail@plt+0x1850>
   12b3c:	orr	r7, r7, ip
   12b40:	orr	r0, r0, ip
   12b44:	b	12a98 <__assert_fail@plt+0x1850>
   12b48:	ands	r6, r0, #73	; 0x49
   12b4c:	beq	12a6c <__assert_fail@plt+0x1824>
   12b50:	mov	r6, r1
   12b54:	b	12ad0 <__assert_fail@plt+0x1888>
   12b58:	mov	r7, r4
   12b5c:	b	12b24 <__assert_fail@plt+0x18dc>
   12b60:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12b64:	push	{r4, r5, r6, lr}
   12b68:	subs	r4, r0, #0
   12b6c:	beq	12be0 <__assert_fail@plt+0x1998>
   12b70:	mov	r1, #47	; 0x2f
   12b74:	bl	11194 <strrchr@plt>
   12b78:	subs	r5, r0, #0
   12b7c:	beq	12bcc <__assert_fail@plt+0x1984>
   12b80:	add	r6, r5, #1
   12b84:	sub	r3, r6, r4
   12b88:	cmp	r3, #6
   12b8c:	ble	12bcc <__assert_fail@plt+0x1984>
   12b90:	mov	r2, #7
   12b94:	ldr	r1, [pc, #96]	; 12bfc <__assert_fail@plt+0x19b4>
   12b98:	sub	r0, r5, #6
   12b9c:	bl	1120c <strncmp@plt>
   12ba0:	cmp	r0, #0
   12ba4:	bne	12bcc <__assert_fail@plt+0x1984>
   12ba8:	mov	r2, #3
   12bac:	ldr	r1, [pc, #76]	; 12c00 <__assert_fail@plt+0x19b8>
   12bb0:	mov	r0, r6
   12bb4:	bl	1120c <strncmp@plt>
   12bb8:	cmp	r0, #0
   12bbc:	movne	r4, r6
   12bc0:	ldreq	r3, [pc, #60]	; 12c04 <__assert_fail@plt+0x19bc>
   12bc4:	addeq	r4, r5, #4
   12bc8:	streq	r4, [r3]
   12bcc:	ldr	r2, [pc, #52]	; 12c08 <__assert_fail@plt+0x19c0>
   12bd0:	ldr	r3, [pc, #52]	; 12c0c <__assert_fail@plt+0x19c4>
   12bd4:	str	r4, [r2]
   12bd8:	str	r4, [r3]
   12bdc:	pop	{r4, r5, r6, pc}
   12be0:	ldr	r3, [pc, #40]	; 12c10 <__assert_fail@plt+0x19c8>
   12be4:	mov	r2, #55	; 0x37
   12be8:	mov	r1, #1
   12bec:	ldr	r3, [r3]
   12bf0:	ldr	r0, [pc, #28]	; 12c14 <__assert_fail@plt+0x19cc>
   12bf4:	bl	11050 <fwrite@plt>
   12bf8:	bl	11218 <abort@plt>
   12bfc:	andeq	sl, r1, ip, asr #32
   12c00:	andeq	sl, r1, r4, asr r0
   12c04:	andeq	fp, r2, r0, ror #2
   12c08:	andeq	fp, r2, ip, lsr #3
   12c0c:	andeq	fp, r2, r4, ror #2
   12c10:	andeq	fp, r2, r0, ror r1
   12c14:	andeq	sl, r1, r4, lsl r0
   12c18:	push	{r4, lr}
   12c1c:	mov	r2, #48	; 0x30
   12c20:	mov	r4, r1
   12c24:	mov	r1, #0
   12c28:	bl	11134 <memset@plt>
   12c2c:	cmp	r4, #10
   12c30:	beq	12c3c <__assert_fail@plt+0x19f4>
   12c34:	str	r4, [r0]
   12c38:	pop	{r4, pc}
   12c3c:	bl	11218 <abort@plt>
   12c40:	push	{r4, r5, r6, lr}
   12c44:	mov	r2, #5
   12c48:	mov	r5, r0
   12c4c:	mov	r6, r1
   12c50:	mov	r1, r0
   12c54:	mov	r0, #0
   12c58:	bl	10ffc <dcgettext@plt>
   12c5c:	cmp	r5, r0
   12c60:	mov	r4, r0
   12c64:	beq	12c70 <__assert_fail@plt+0x1a28>
   12c68:	mov	r0, r4
   12c6c:	pop	{r4, r5, r6, pc}
   12c70:	bl	18dbc <fts_children@@Base+0x1580>
   12c74:	ldrb	r3, [r0]
   12c78:	bic	r3, r3, #32
   12c7c:	cmp	r3, #85	; 0x55
   12c80:	bne	12ce0 <__assert_fail@plt+0x1a98>
   12c84:	ldrb	r3, [r0, #1]
   12c88:	bic	r3, r3, #32
   12c8c:	cmp	r3, #84	; 0x54
   12c90:	bne	12d58 <__assert_fail@plt+0x1b10>
   12c94:	ldrb	r3, [r0, #2]
   12c98:	bic	r3, r3, #32
   12c9c:	cmp	r3, #70	; 0x46
   12ca0:	bne	12d58 <__assert_fail@plt+0x1b10>
   12ca4:	ldrb	r3, [r0, #3]
   12ca8:	cmp	r3, #45	; 0x2d
   12cac:	bne	12d58 <__assert_fail@plt+0x1b10>
   12cb0:	ldrb	r3, [r0, #4]
   12cb4:	cmp	r3, #56	; 0x38
   12cb8:	bne	12d58 <__assert_fail@plt+0x1b10>
   12cbc:	ldrb	r3, [r0, #5]
   12cc0:	cmp	r3, #0
   12cc4:	bne	12d58 <__assert_fail@plt+0x1b10>
   12cc8:	ldrb	r2, [r4]
   12ccc:	ldr	r3, [pc, #156]	; 12d70 <__assert_fail@plt+0x1b28>
   12cd0:	ldr	r4, [pc, #156]	; 12d74 <__assert_fail@plt+0x1b2c>
   12cd4:	cmp	r2, #96	; 0x60
   12cd8:	movne	r4, r3
   12cdc:	b	12c68 <__assert_fail@plt+0x1a20>
   12ce0:	cmp	r3, #71	; 0x47
   12ce4:	bne	12d58 <__assert_fail@plt+0x1b10>
   12ce8:	ldrb	r3, [r0, #1]
   12cec:	bic	r3, r3, #32
   12cf0:	cmp	r3, #66	; 0x42
   12cf4:	bne	12d58 <__assert_fail@plt+0x1b10>
   12cf8:	ldrb	r3, [r0, #2]
   12cfc:	cmp	r3, #49	; 0x31
   12d00:	bne	12d58 <__assert_fail@plt+0x1b10>
   12d04:	ldrb	r3, [r0, #3]
   12d08:	cmp	r3, #56	; 0x38
   12d0c:	bne	12d58 <__assert_fail@plt+0x1b10>
   12d10:	ldrb	r3, [r0, #4]
   12d14:	cmp	r3, #48	; 0x30
   12d18:	bne	12d58 <__assert_fail@plt+0x1b10>
   12d1c:	ldrb	r3, [r0, #5]
   12d20:	cmp	r3, #51	; 0x33
   12d24:	bne	12d58 <__assert_fail@plt+0x1b10>
   12d28:	ldrb	r3, [r0, #6]
   12d2c:	cmp	r3, #48	; 0x30
   12d30:	bne	12d58 <__assert_fail@plt+0x1b10>
   12d34:	ldrb	r3, [r0, #7]
   12d38:	cmp	r3, #0
   12d3c:	bne	12d58 <__assert_fail@plt+0x1b10>
   12d40:	ldrb	r2, [r4]
   12d44:	ldr	r3, [pc, #44]	; 12d78 <__assert_fail@plt+0x1b30>
   12d48:	ldr	r4, [pc, #44]	; 12d7c <__assert_fail@plt+0x1b34>
   12d4c:	cmp	r2, #96	; 0x60
   12d50:	movne	r4, r3
   12d54:	b	12c68 <__assert_fail@plt+0x1a20>
   12d58:	ldr	r3, [pc, #32]	; 12d80 <__assert_fail@plt+0x1b38>
   12d5c:	ldr	r4, [pc, #32]	; 12d84 <__assert_fail@plt+0x1b3c>
   12d60:	cmp	r6, #9
   12d64:	movne	r4, r3
   12d68:	mov	r0, r4
   12d6c:	pop	{r4, r5, r6, pc}
   12d70:	strheq	sl, [r1], -r0
   12d74:	strheq	sl, [r1], -ip
   12d78:	strheq	sl, [r1], -r4
   12d7c:	strheq	sl, [r1], -r8
   12d80:	andeq	sl, r1, r0, asr #1
   12d84:	andeq	sl, r1, ip, lsr #1
   12d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d8c:	sub	sp, sp, #124	; 0x7c
   12d90:	ldr	ip, [pc, #3576]	; 13b90 <__assert_fail@plt+0x2948>
   12d94:	str	r3, [sp, #24]
   12d98:	ldr	r3, [sp, #168]	; 0xa8
   12d9c:	ldr	ip, [ip]
   12da0:	str	r3, [sp, #56]	; 0x38
   12da4:	ldr	r3, [sp, #172]	; 0xac
   12da8:	ldr	r8, [sp, #160]	; 0xa0
   12dac:	str	r3, [sp, #80]	; 0x50
   12db0:	ldr	r3, [sp, #176]	; 0xb0
   12db4:	mov	fp, r0
   12db8:	str	r3, [sp, #76]	; 0x4c
   12dbc:	mov	sl, r1
   12dc0:	str	r2, [sp, #36]	; 0x24
   12dc4:	str	ip, [sp, #116]	; 0x74
   12dc8:	bl	11068 <__ctype_get_mb_cur_max@plt>
   12dcc:	ldr	r3, [sp, #164]	; 0xa4
   12dd0:	ands	r4, r3, #2
   12dd4:	movne	r3, #1
   12dd8:	moveq	r3, #0
   12ddc:	str	r3, [sp, #32]
   12de0:	str	r0, [sp, #64]	; 0x40
   12de4:	cmp	r8, #10
   12de8:	ldrls	pc, [pc, r8, lsl #2]
   12dec:	b	1459c <__assert_fail@plt+0x3354>
   12df0:	andeq	r3, r1, r4, ror #3
   12df4:	andeq	r3, r1, ip, ror r2
   12df8:	andeq	r3, r1, ip, ror r8
   12dfc:	muleq	r1, ip, r2
   12e00:	andeq	r3, r1, r0, asr r1
   12e04:	muleq	r1, r8, r1
   12e08:	andeq	r3, r1, r4, lsl r2
   12e0c:	andeq	r3, r1, ip, asr #4
   12e10:	andeq	r2, r1, ip, lsl lr
   12e14:	andeq	r2, r1, ip, lsl lr
   12e18:	andeq	r2, r1, ip, lsl lr
   12e1c:	cmp	r8, #10
   12e20:	beq	12e44 <__assert_fail@plt+0x1bfc>
   12e24:	mov	r1, r8
   12e28:	ldr	r0, [pc, #3428]	; 13b94 <__assert_fail@plt+0x294c>
   12e2c:	bl	12c40 <__assert_fail@plt+0x19f8>
   12e30:	mov	r1, r8
   12e34:	str	r0, [sp, #80]	; 0x50
   12e38:	ldr	r0, [pc, #3420]	; 13b9c <__assert_fail@plt+0x2954>
   12e3c:	bl	12c40 <__assert_fail@plt+0x19f8>
   12e40:	str	r0, [sp, #76]	; 0x4c
   12e44:	cmp	r4, #0
   12e48:	movne	r4, #0
   12e4c:	beq	1425c <__assert_fail@plt+0x3014>
   12e50:	ldr	r7, [sp, #76]	; 0x4c
   12e54:	mov	r5, #0
   12e58:	mov	r6, #1
   12e5c:	mov	r0, r7
   12e60:	str	r6, [sp, #40]	; 0x28
   12e64:	str	r5, [sp, #68]	; 0x44
   12e68:	bl	110f8 <strlen@plt>
   12e6c:	str	r6, [sp, #28]
   12e70:	str	r5, [sp, #44]	; 0x2c
   12e74:	str	r5, [sp, #72]	; 0x48
   12e78:	str	r7, [sp, #60]	; 0x3c
   12e7c:	str	r0, [sp, #52]	; 0x34
   12e80:	str	r8, [sp, #160]	; 0xa0
   12e84:	mov	r8, fp
   12e88:	ldr	fp, [sp, #160]	; 0xa0
   12e8c:	mov	r9, #0
   12e90:	ldr	r3, [sp, #24]
   12e94:	cmn	r3, #1
   12e98:	beq	13400 <__assert_fail@plt+0x21b8>
   12e9c:	ldr	r3, [sp, #24]
   12ea0:	subs	r6, r3, r9
   12ea4:	movne	r6, #1
   12ea8:	cmp	r6, #0
   12eac:	beq	13418 <__assert_fail@plt+0x21d0>
   12eb0:	ldr	r7, [sp, #28]
   12eb4:	ldr	r0, [sp, #36]	; 0x24
   12eb8:	cmp	fp, #2
   12ebc:	moveq	r7, #0
   12ec0:	andne	r7, r7, #1
   12ec4:	add	r3, r0, r9
   12ec8:	cmp	r7, #0
   12ecc:	str	r3, [sp, #48]	; 0x30
   12ed0:	beq	138bc <__assert_fail@plt+0x2674>
   12ed4:	ldr	r2, [sp, #52]	; 0x34
   12ed8:	cmp	r2, #0
   12edc:	beq	13ba0 <__assert_fail@plt+0x2958>
   12ee0:	ldr	r1, [sp, #24]
   12ee4:	cmp	r2, #1
   12ee8:	mov	r3, r2
   12eec:	movls	r3, #0
   12ef0:	movhi	r3, #1
   12ef4:	cmn	r1, #1
   12ef8:	movne	r3, #0
   12efc:	cmp	r3, #0
   12f00:	add	r5, r9, r2
   12f04:	beq	12f10 <__assert_fail@plt+0x1cc8>
   12f08:	bl	110f8 <strlen@plt>
   12f0c:	str	r0, [sp, #24]
   12f10:	ldr	r3, [sp, #24]
   12f14:	cmp	r5, r3
   12f18:	bhi	13ba0 <__assert_fail@plt+0x2958>
   12f1c:	ldr	r2, [sp, #52]	; 0x34
   12f20:	ldr	r1, [sp, #60]	; 0x3c
   12f24:	ldr	r0, [sp, #48]	; 0x30
   12f28:	bl	10ff0 <memcmp@plt>
   12f2c:	cmp	r0, #0
   12f30:	bne	13ba0 <__assert_fail@plt+0x2958>
   12f34:	ldr	r3, [sp, #32]
   12f38:	cmp	r3, #0
   12f3c:	bne	1445c <__assert_fail@plt+0x3214>
   12f40:	ldr	r3, [sp, #48]	; 0x30
   12f44:	ldrb	r5, [r3]
   12f48:	cmp	r5, #126	; 0x7e
   12f4c:	ldrls	pc, [pc, r5, lsl #2]
   12f50:	b	13820 <__assert_fail@plt+0x25d8>
   12f54:	andeq	r3, r1, ip, lsl #14
   12f58:	andeq	r3, r1, r0, lsr #16
   12f5c:	andeq	r3, r1, r0, lsr #16
   12f60:	andeq	r3, r1, r0, lsr #16
   12f64:	andeq	r3, r1, r0, lsr #16
   12f68:	andeq	r3, r1, r0, lsr #16
   12f6c:	andeq	r3, r1, r0, lsr #16
   12f70:	ldrdeq	r3, [r1], -r8
   12f74:	andeq	r3, r1, r8, asr #15
   12f78:	andeq	r3, r1, r8, asr #13
   12f7c:	muleq	r1, r0, r6
   12f80:	andeq	r3, r1, r8, ror #13
   12f84:	ldrdeq	r3, [r1], -r0
   12f88:	andeq	r3, r1, r0, lsl #12
   12f8c:	andeq	r3, r1, r0, lsr #16
   12f90:	andeq	r3, r1, r0, lsr #16
   12f94:	andeq	r3, r1, r0, lsr #16
   12f98:	andeq	r3, r1, r0, lsr #16
   12f9c:	andeq	r3, r1, r0, lsr #16
   12fa0:	andeq	r3, r1, r0, lsr #16
   12fa4:	andeq	r3, r1, r0, lsr #16
   12fa8:	andeq	r3, r1, r0, lsr #16
   12fac:	andeq	r3, r1, r0, lsr #16
   12fb0:	andeq	r3, r1, r0, lsr #16
   12fb4:	andeq	r3, r1, r0, lsr #16
   12fb8:	andeq	r3, r1, r0, lsr #16
   12fbc:	andeq	r3, r1, r0, lsr #16
   12fc0:	andeq	r3, r1, r0, lsr #16
   12fc4:	andeq	r3, r1, r0, lsr #16
   12fc8:	andeq	r3, r1, r0, lsr #16
   12fcc:	andeq	r3, r1, r0, lsr #16
   12fd0:	andeq	r3, r1, r0, lsr #16
   12fd4:	andeq	r3, r1, r0, ror #15
   12fd8:	strdeq	r3, [r1], -r4
   12fdc:	strdeq	r3, [r1], -r4
   12fe0:	strdeq	r3, [r1], -r8
   12fe4:	strdeq	r3, [r1], -r4
   12fe8:	andeq	r3, r1, r4, lsl r8
   12fec:	strdeq	r3, [r1], -r4
   12ff0:	andeq	r3, r1, r4, lsr r5
   12ff4:	strdeq	r3, [r1], -r4
   12ff8:	strdeq	r3, [r1], -r4
   12ffc:	strdeq	r3, [r1], -r4
   13000:	andeq	r3, r1, r4, lsl r8
   13004:	andeq	r3, r1, r4, lsl r8
   13008:	andeq	r3, r1, r4, lsl r8
   1300c:	andeq	r3, r1, r4, lsl r8
   13010:	andeq	r3, r1, r4, lsl r8
   13014:	andeq	r3, r1, r4, lsl r8
   13018:	andeq	r3, r1, r4, lsl r8
   1301c:	andeq	r3, r1, r4, lsl r8
   13020:	andeq	r3, r1, r4, lsl r8
   13024:	andeq	r3, r1, r4, lsl r8
   13028:	andeq	r3, r1, r4, lsl r8
   1302c:	andeq	r3, r1, r4, lsl r8
   13030:	andeq	r3, r1, r4, lsl r8
   13034:	andeq	r3, r1, r4, lsl r8
   13038:	andeq	r3, r1, r4, lsl r8
   1303c:	andeq	r3, r1, r4, lsl r8
   13040:	strdeq	r3, [r1], -r4
   13044:	strdeq	r3, [r1], -r4
   13048:	strdeq	r3, [r1], -r4
   1304c:	strdeq	r3, [r1], -r4
   13050:	andeq	r3, r1, r8, lsl #10
   13054:	andeq	r3, r1, r0, lsr #16
   13058:	andeq	r3, r1, r4, lsl r8
   1305c:	andeq	r3, r1, r4, lsl r8
   13060:	andeq	r3, r1, r4, lsl r8
   13064:	andeq	r3, r1, r4, lsl r8
   13068:	andeq	r3, r1, r4, lsl r8
   1306c:	andeq	r3, r1, r4, lsl r8
   13070:	andeq	r3, r1, r4, lsl r8
   13074:	andeq	r3, r1, r4, lsl r8
   13078:	andeq	r3, r1, r4, lsl r8
   1307c:	andeq	r3, r1, r4, lsl r8
   13080:	andeq	r3, r1, r4, lsl r8
   13084:	andeq	r3, r1, r4, lsl r8
   13088:	andeq	r3, r1, r4, lsl r8
   1308c:	andeq	r3, r1, r4, lsl r8
   13090:	andeq	r3, r1, r4, lsl r8
   13094:	andeq	r3, r1, r4, lsl r8
   13098:	andeq	r3, r1, r4, lsl r8
   1309c:	andeq	r3, r1, r4, lsl r8
   130a0:	andeq	r3, r1, r4, lsl r8
   130a4:	andeq	r3, r1, r4, lsl r8
   130a8:	andeq	r3, r1, r4, lsl r8
   130ac:	andeq	r3, r1, r4, lsl r8
   130b0:	andeq	r3, r1, r4, lsl r8
   130b4:	andeq	r3, r1, r4, lsl r8
   130b8:	andeq	r3, r1, r4, lsl r8
   130bc:	andeq	r3, r1, r4, lsl r8
   130c0:	strdeq	r3, [r1], -r4
   130c4:	andeq	r3, r1, r0, asr #9
   130c8:	andeq	r3, r1, r4, lsl r8
   130cc:	strdeq	r3, [r1], -r4
   130d0:	andeq	r3, r1, r4, lsl r8
   130d4:	strdeq	r3, [r1], -r4
   130d8:	andeq	r3, r1, r4, lsl r8
   130dc:	andeq	r3, r1, r4, lsl r8
   130e0:	andeq	r3, r1, r4, lsl r8
   130e4:	andeq	r3, r1, r4, lsl r8
   130e8:	andeq	r3, r1, r4, lsl r8
   130ec:	andeq	r3, r1, r4, lsl r8
   130f0:	andeq	r3, r1, r4, lsl r8
   130f4:	andeq	r3, r1, r4, lsl r8
   130f8:	andeq	r3, r1, r4, lsl r8
   130fc:	andeq	r3, r1, r4, lsl r8
   13100:	andeq	r3, r1, r4, lsl r8
   13104:	andeq	r3, r1, r4, lsl r8
   13108:	andeq	r3, r1, r4, lsl r8
   1310c:	andeq	r3, r1, r4, lsl r8
   13110:	andeq	r3, r1, r4, lsl r8
   13114:	andeq	r3, r1, r4, lsl r8
   13118:	andeq	r3, r1, r4, lsl r8
   1311c:	andeq	r3, r1, r4, lsl r8
   13120:	andeq	r3, r1, r4, lsl r8
   13124:	andeq	r3, r1, r4, lsl r8
   13128:	andeq	r3, r1, r4, lsl r8
   1312c:	andeq	r3, r1, r4, lsl r8
   13130:	andeq	r3, r1, r4, lsl r8
   13134:	andeq	r3, r1, r4, lsl r8
   13138:	andeq	r3, r1, r4, lsl r8
   1313c:	andeq	r3, r1, r4, lsl r8
   13140:	ldrdeq	r3, [r1], -r8
   13144:	strdeq	r3, [r1], -r4
   13148:	ldrdeq	r3, [r1], -r8
   1314c:	strdeq	r3, [r1], -r8
   13150:	cmp	r4, #0
   13154:	moveq	r3, #1
   13158:	streq	r3, [sp, #28]
   1315c:	beq	13888 <__assert_fail@plt+0x2640>
   13160:	mov	r3, #0
   13164:	mov	r4, r3
   13168:	mov	r2, #1
   1316c:	str	r2, [sp, #40]	; 0x28
   13170:	str	r3, [sp, #68]	; 0x44
   13174:	str	r2, [sp, #32]
   13178:	str	r2, [sp, #52]	; 0x34
   1317c:	ldr	r3, [pc, #2584]	; 13b9c <__assert_fail@plt+0x2954>
   13180:	str	r4, [sp, #44]	; 0x2c
   13184:	str	r4, [sp, #72]	; 0x48
   13188:	str	r4, [sp, #28]
   1318c:	str	r3, [sp, #60]	; 0x3c
   13190:	mov	r8, #2
   13194:	b	12e80 <__assert_fail@plt+0x1c38>
   13198:	cmp	r4, #0
   1319c:	bne	14428 <__assert_fail@plt+0x31e0>
   131a0:	cmp	sl, #0
   131a4:	beq	141e8 <__assert_fail@plt+0x2fa0>
   131a8:	mov	r3, #34	; 0x22
   131ac:	strb	r3, [fp]
   131b0:	ldr	r3, [pc, #2528]	; 13b98 <__assert_fail@plt+0x2950>
   131b4:	mov	r1, r4
   131b8:	mov	r2, #1
   131bc:	str	r4, [sp, #68]	; 0x44
   131c0:	str	r2, [sp, #40]	; 0x28
   131c4:	mov	r4, r2
   131c8:	str	r1, [sp, #44]	; 0x2c
   131cc:	str	r1, [sp, #72]	; 0x48
   131d0:	str	r1, [sp, #32]
   131d4:	str	r2, [sp, #28]
   131d8:	str	r2, [sp, #52]	; 0x34
   131dc:	str	r3, [sp, #60]	; 0x3c
   131e0:	b	12e80 <__assert_fail@plt+0x1c38>
   131e4:	mov	r3, #0
   131e8:	str	r3, [sp, #68]	; 0x44
   131ec:	str	r3, [sp, #44]	; 0x2c
   131f0:	str	r3, [sp, #32]
   131f4:	str	r3, [sp, #28]
   131f8:	str	r3, [sp, #60]	; 0x3c
   131fc:	mov	r3, #1
   13200:	str	r8, [sp, #72]	; 0x48
   13204:	str	r8, [sp, #52]	; 0x34
   13208:	mov	r4, r8
   1320c:	str	r3, [sp, #40]	; 0x28
   13210:	b	12e80 <__assert_fail@plt+0x1c38>
   13214:	mov	r3, #1
   13218:	str	r3, [sp, #40]	; 0x28
   1321c:	str	r3, [sp, #32]
   13220:	str	r3, [sp, #28]
   13224:	str	r3, [sp, #52]	; 0x34
   13228:	ldr	r3, [pc, #2408]	; 13b98 <__assert_fail@plt+0x2950>
   1322c:	mov	r2, #0
   13230:	mov	r4, r2
   13234:	str	r2, [sp, #68]	; 0x44
   13238:	str	r2, [sp, #44]	; 0x2c
   1323c:	str	r2, [sp, #72]	; 0x48
   13240:	str	r3, [sp, #60]	; 0x3c
   13244:	mov	r8, #5
   13248:	b	12e80 <__assert_fail@plt+0x1c38>
   1324c:	mov	r3, #0
   13250:	mov	r2, #1
   13254:	str	r2, [sp, #40]	; 0x28
   13258:	mov	r4, r3
   1325c:	str	r3, [sp, #68]	; 0x44
   13260:	str	r2, [sp, #28]
   13264:	str	r3, [sp, #44]	; 0x2c
   13268:	str	r3, [sp, #72]	; 0x48
   1326c:	str	r3, [sp, #32]
   13270:	str	r3, [sp, #52]	; 0x34
   13274:	str	r3, [sp, #60]	; 0x3c
   13278:	b	12e80 <__assert_fail@plt+0x1c38>
   1327c:	mov	r2, #1
   13280:	mov	r3, #0
   13284:	str	r2, [sp, #40]	; 0x28
   13288:	mov	r4, r3
   1328c:	str	r3, [sp, #68]	; 0x44
   13290:	str	r8, [sp, #52]	; 0x34
   13294:	str	r2, [sp, #32]
   13298:	b	1317c <__assert_fail@plt+0x1f34>
   1329c:	mov	r3, #1
   132a0:	str	r3, [sp, #40]	; 0x28
   132a4:	str	r3, [sp, #32]
   132a8:	str	r3, [sp, #28]
   132ac:	str	r3, [sp, #52]	; 0x34
   132b0:	ldr	r3, [pc, #2276]	; 13b9c <__assert_fail@plt+0x2954>
   132b4:	mov	r2, #0
   132b8:	mov	r4, r2
   132bc:	str	r2, [sp, #68]	; 0x44
   132c0:	str	r2, [sp, #44]	; 0x2c
   132c4:	str	r2, [sp, #72]	; 0x48
   132c8:	str	r3, [sp, #60]	; 0x3c
   132cc:	mov	r8, #2
   132d0:	b	12e80 <__assert_fail@plt+0x1c38>
   132d4:	mov	r7, #0
   132d8:	ldr	r3, [sp, #24]
   132dc:	cmn	r3, #1
   132e0:	beq	13e1c <__assert_fail@plt+0x2bd4>
   132e4:	ldr	r3, [sp, #24]
   132e8:	subs	r3, r3, #1
   132ec:	movne	r3, #1
   132f0:	cmp	r3, #0
   132f4:	sub	r2, fp, #2
   132f8:	clz	r2, r2
   132fc:	lsr	r2, r2, #5
   13300:	bne	134fc <__assert_fail@plt+0x22b4>
   13304:	cmp	r9, #0
   13308:	bne	134fc <__assert_fail@plt+0x22b4>
   1330c:	ldr	r3, [sp, #32]
   13310:	tst	r3, r2
   13314:	bne	1361c <__assert_fail@plt+0x23d4>
   13318:	ldr	r3, [sp, #28]
   1331c:	eor	r3, r3, #1
   13320:	orr	r3, r2, r3
   13324:	ldr	r2, [sp, #32]
   13328:	eor	r3, r3, #1
   1332c:	orrs	r3, r2, r3
   13330:	beq	13360 <__assert_fail@plt+0x2118>
   13334:	mov	r3, #0
   13338:	ldr	r1, [sp, #56]	; 0x38
   1333c:	cmp	r1, #0
   13340:	beq	13360 <__assert_fail@plt+0x2118>
   13344:	lsr	r2, r5, #5
   13348:	and	r0, r5, #31
   1334c:	uxtb	r2, r2
   13350:	ldr	r1, [r1, r2, lsl #2]
   13354:	lsr	r2, r1, r0
   13358:	tst	r2, #1
   1335c:	bne	13368 <__assert_fail@plt+0x2120>
   13360:	cmp	r7, #0
   13364:	beq	135b8 <__assert_fail@plt+0x2370>
   13368:	sub	r2, fp, #2
   1336c:	clz	r2, r2
   13370:	lsr	r2, r2, #5
   13374:	ldr	r3, [sp, #32]
   13378:	cmp	r3, #0
   1337c:	bne	136a8 <__assert_fail@plt+0x2460>
   13380:	ldr	r3, [sp, #44]	; 0x2c
   13384:	eor	r3, r3, #1
   13388:	ands	r3, r2, r3
   1338c:	beq	133c4 <__assert_fail@plt+0x217c>
   13390:	cmp	sl, r4
   13394:	movhi	r2, #39	; 0x27
   13398:	strbhi	r2, [r8, r4]
   1339c:	add	r2, r4, #1
   133a0:	cmp	r2, sl
   133a4:	movcc	r1, #36	; 0x24
   133a8:	strbcc	r1, [r8, r2]
   133ac:	add	r2, r4, #2
   133b0:	cmp	r2, sl
   133b4:	add	r4, r4, #3
   133b8:	movcc	r1, #39	; 0x27
   133bc:	strbcc	r1, [r8, r2]
   133c0:	str	r3, [sp, #44]	; 0x2c
   133c4:	cmp	r4, sl
   133c8:	movcc	r3, #92	; 0x5c
   133cc:	strbcc	r3, [r8, r4]
   133d0:	add	r9, r9, #1
   133d4:	add	r4, r4, #1
   133d8:	cmp	r4, sl
   133dc:	ldr	r3, [sp, #40]	; 0x28
   133e0:	strbcc	r5, [r8, r4]
   133e4:	cmp	r6, #0
   133e8:	moveq	r3, #0
   133ec:	str	r3, [sp, #40]	; 0x28
   133f0:	ldr	r3, [sp, #24]
   133f4:	add	r4, r4, #1
   133f8:	cmn	r3, #1
   133fc:	bne	12e9c <__assert_fail@plt+0x1c54>
   13400:	ldr	r3, [sp, #36]	; 0x24
   13404:	ldrb	r6, [r3, r9]
   13408:	adds	r6, r6, #0
   1340c:	movne	r6, #1
   13410:	cmp	r6, #0
   13414:	bne	12eb0 <__assert_fail@plt+0x1c68>
   13418:	str	fp, [sp, #160]	; 0xa0
   1341c:	mov	fp, r8
   13420:	ldr	r8, [sp, #160]	; 0xa0
   13424:	ldr	r1, [sp, #32]
   13428:	cmp	r4, #0
   1342c:	sub	r2, r8, #2
   13430:	clz	r2, r2
   13434:	lsr	r2, r2, #5
   13438:	andeq	r3, r2, r1
   1343c:	movne	r3, #0
   13440:	cmp	r3, #0
   13444:	bne	14530 <__assert_fail@plt+0x32e8>
   13448:	eor	r3, r1, #1
   1344c:	ands	r2, r2, r3
   13450:	beq	1446c <__assert_fail@plt+0x3224>
   13454:	ldr	r3, [sp, #68]	; 0x44
   13458:	cmp	r3, #0
   1345c:	beq	14470 <__assert_fail@plt+0x3228>
   13460:	ldr	r3, [sp, #40]	; 0x28
   13464:	cmp	r3, #0
   13468:	bne	144ec <__assert_fail@plt+0x32a4>
   1346c:	ldr	r3, [sp, #72]	; 0x48
   13470:	adds	r3, r3, #0
   13474:	movne	r3, #1
   13478:	cmp	sl, #0
   1347c:	movne	r3, #0
   13480:	cmp	r3, #0
   13484:	ldreq	r2, [sp, #68]	; 0x44
   13488:	beq	14470 <__assert_fail@plt+0x3228>
   1348c:	ldr	sl, [sp, #72]	; 0x48
   13490:	str	r3, [sp, #68]	; 0x44
   13494:	ldr	r3, [pc, #1792]	; 13b9c <__assert_fail@plt+0x2954>
   13498:	mov	r2, #39	; 0x27
   1349c:	mov	r4, #1
   134a0:	str	r3, [sp, #60]	; 0x3c
   134a4:	mov	r3, #0
   134a8:	strb	r2, [fp]
   134ac:	str	r4, [sp, #52]	; 0x34
   134b0:	mov	r8, #2
   134b4:	str	r3, [sp, #32]
   134b8:	b	12e80 <__assert_fail@plt+0x1c38>
   134bc:	mov	r7, #0
   134c0:	cmp	fp, #2
   134c4:	beq	13dfc <__assert_fail@plt+0x2bb4>
   134c8:	ldr	r3, [sp, #52]	; 0x34
   134cc:	ldr	r2, [sp, #28]
   134d0:	ldr	r1, [sp, #32]
   134d4:	cmp	r3, #0
   134d8:	andne	r2, r2, r1
   134dc:	moveq	r2, #0
   134e0:	cmp	r2, #0
   134e4:	moveq	r5, #92	; 0x5c
   134e8:	moveq	r3, r5
   134ec:	bne	13e08 <__assert_fail@plt+0x2bc0>
   134f0:	ldr	r1, [sp, #28]
   134f4:	cmp	r1, #0
   134f8:	bne	14578 <__assert_fail@plt+0x3330>
   134fc:	mov	r6, #0
   13500:	b	13318 <__assert_fail@plt+0x20d0>
   13504:	mov	r7, #0
   13508:	cmp	fp, #2
   1350c:	beq	13e6c <__assert_fail@plt+0x2c24>
   13510:	cmp	fp, #5
   13514:	beq	13e30 <__assert_fail@plt+0x2be8>
   13518:	sub	r2, fp, #2
   1351c:	mov	r6, #0
   13520:	clz	r2, r2
   13524:	mov	r5, #63	; 0x3f
   13528:	lsr	r2, r2, #5
   1352c:	b	13318 <__assert_fail@plt+0x20d0>
   13530:	mov	r7, #0
   13534:	cmp	fp, #2
   13538:	strne	r6, [sp, #68]	; 0x44
   1353c:	movne	r2, #0
   13540:	movne	r5, #39	; 0x27
   13544:	bne	13318 <__assert_fail@plt+0x20d0>
   13548:	ldr	r3, [sp, #32]
   1354c:	cmp	r3, #0
   13550:	bne	1424c <__assert_fail@plt+0x3004>
   13554:	cmp	sl, #0
   13558:	ldr	r3, [sp, #72]	; 0x48
   1355c:	clz	r3, r3
   13560:	lsr	r3, r3, #5
   13564:	moveq	r3, #0
   13568:	cmp	r3, #0
   1356c:	bne	14180 <__assert_fail@plt+0x2f38>
   13570:	cmp	sl, r4
   13574:	movhi	r3, #39	; 0x27
   13578:	strbhi	r3, [r8, r4]
   1357c:	add	r3, r4, #1
   13580:	cmp	sl, r3
   13584:	movhi	r2, #92	; 0x5c
   13588:	strbhi	r2, [r8, r3]
   1358c:	add	r3, r4, #2
   13590:	cmp	sl, r3
   13594:	movhi	r2, #39	; 0x27
   13598:	strbhi	r2, [r8, r3]
   1359c:	mov	r3, #0
   135a0:	cmp	r7, #0
   135a4:	add	r4, r4, #3
   135a8:	str	r3, [sp, #44]	; 0x2c
   135ac:	str	r6, [sp, #68]	; 0x44
   135b0:	mov	r5, #39	; 0x27
   135b4:	bne	13368 <__assert_fail@plt+0x2120>
   135b8:	ldr	r2, [sp, #44]	; 0x2c
   135bc:	eor	r3, r3, #1
   135c0:	and	r3, r3, r2
   135c4:	add	r9, r9, #1
   135c8:	uxtb	r3, r3
   135cc:	cmp	r3, #0
   135d0:	beq	133d8 <__assert_fail@plt+0x2190>
   135d4:	cmp	sl, r4
   135d8:	movhi	r3, #39	; 0x27
   135dc:	strbhi	r3, [r8, r4]
   135e0:	add	r3, r4, #1
   135e4:	cmp	sl, r3
   135e8:	movhi	r2, #39	; 0x27
   135ec:	strbhi	r2, [r8, r3]
   135f0:	mov	r3, #0
   135f4:	add	r4, r4, #2
   135f8:	str	r3, [sp, #44]	; 0x2c
   135fc:	b	133d8 <__assert_fail@plt+0x2190>
   13600:	mov	r3, #114	; 0x72
   13604:	ldr	r1, [sp, #32]
   13608:	sub	r2, fp, #2
   1360c:	clz	r2, r2
   13610:	lsr	r2, r2, #5
   13614:	tst	r2, r1
   13618:	beq	134f0 <__assert_fail@plt+0x22a8>
   1361c:	mov	fp, r8
   13620:	mov	r8, #2
   13624:	ldr	r3, [sp, #28]
   13628:	cmp	r3, #0
   1362c:	movne	r8, #4
   13630:	ldr	r3, [sp, #164]	; 0xa4
   13634:	mov	ip, #0
   13638:	bic	r3, r3, #2
   1363c:	str	r3, [sp, #4]
   13640:	ldr	r3, [sp, #76]	; 0x4c
   13644:	str	r8, [sp]
   13648:	str	r3, [sp, #16]
   1364c:	ldr	r3, [sp, #80]	; 0x50
   13650:	ldr	r2, [sp, #36]	; 0x24
   13654:	str	r3, [sp, #12]
   13658:	mov	r1, sl
   1365c:	ldr	r3, [sp, #24]
   13660:	mov	r0, fp
   13664:	str	ip, [sp, #8]
   13668:	bl	12d88 <__assert_fail@plt+0x1b40>
   1366c:	mov	r4, r0
   13670:	ldr	r3, [pc, #1304]	; 13b90 <__assert_fail@plt+0x2948>
   13674:	ldr	r2, [sp, #116]	; 0x74
   13678:	mov	r0, r4
   1367c:	ldr	r3, [r3]
   13680:	cmp	r2, r3
   13684:	bne	14574 <__assert_fail@plt+0x332c>
   13688:	add	sp, sp, #124	; 0x7c
   1368c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13690:	mov	r5, #110	; 0x6e
   13694:	ldr	r3, [sp, #32]
   13698:	mov	r2, #0
   1369c:	cmp	r3, #0
   136a0:	mov	r6, r2
   136a4:	beq	13380 <__assert_fail@plt+0x2138>
   136a8:	str	fp, [sp, #160]	; 0xa0
   136ac:	mov	fp, r8
   136b0:	ldr	r8, [sp, #160]	; 0xa0
   136b4:	mov	r3, r2
   136b8:	ldr	r2, [sp, #28]
   136bc:	and	r2, r2, r3
   136c0:	str	r2, [sp, #28]
   136c4:	b	13624 <__assert_fail@plt+0x23dc>
   136c8:	mov	r5, #116	; 0x74
   136cc:	b	13694 <__assert_fail@plt+0x244c>
   136d0:	mov	r5, #102	; 0x66
   136d4:	ldr	r3, [sp, #32]
   136d8:	cmp	r3, #0
   136dc:	bne	14288 <__assert_fail@plt+0x3040>
   136e0:	mov	r6, #0
   136e4:	b	133c4 <__assert_fail@plt+0x217c>
   136e8:	mov	r5, #118	; 0x76
   136ec:	b	136d4 <__assert_fail@plt+0x248c>
   136f0:	mov	r7, #0
   136f4:	mov	r6, #0
   136f8:	b	13334 <__assert_fail@plt+0x20ec>
   136fc:	ldr	r3, [sp, #32]
   13700:	cmp	r3, #0
   13704:	bne	144cc <__assert_fail@plt+0x3284>
   13708:	mov	r7, r3
   1370c:	ldr	r3, [sp, #44]	; 0x2c
   13710:	sub	r2, fp, #2
   13714:	eor	r3, r3, #1
   13718:	clz	r2, r2
   1371c:	lsr	r2, r2, #5
   13720:	ands	r3, r2, r3
   13724:	beq	1416c <__assert_fail@plt+0x2f24>
   13728:	cmp	sl, r4
   1372c:	movhi	r1, #39	; 0x27
   13730:	strbhi	r1, [r8, r4]
   13734:	add	r1, r4, #1
   13738:	cmp	sl, r1
   1373c:	movhi	r0, #36	; 0x24
   13740:	strbhi	r0, [r8, r1]
   13744:	add	r1, r4, #2
   13748:	cmp	sl, r1
   1374c:	movhi	r0, #39	; 0x27
   13750:	strbhi	r0, [r8, r1]
   13754:	add	r1, r4, #3
   13758:	cmp	sl, r1
   1375c:	bls	141cc <__assert_fail@plt+0x2f84>
   13760:	mov	r4, r1
   13764:	mov	r1, #92	; 0x5c
   13768:	strb	r1, [r8, r4]
   1376c:	mov	r1, r4
   13770:	str	r3, [sp, #44]	; 0x2c
   13774:	cmp	fp, #2
   13778:	add	r4, r4, #1
   1377c:	beq	14214 <__assert_fail@plt+0x2fcc>
   13780:	ldr	r0, [sp, #24]
   13784:	add	r3, r9, #1
   13788:	cmp	r3, r0
   1378c:	bcs	137a4 <__assert_fail@plt+0x255c>
   13790:	ldr	r0, [sp, #36]	; 0x24
   13794:	ldrb	r3, [r0, r3]
   13798:	sub	r3, r3, #48	; 0x30
   1379c:	cmp	r3, #9
   137a0:	bls	14224 <__assert_fail@plt+0x2fdc>
   137a4:	mov	r5, #48	; 0x30
   137a8:	ldr	r3, [sp, #28]
   137ac:	eor	r3, r3, #1
   137b0:	orrs	r2, r2, r3
   137b4:	mov	r3, r6
   137b8:	moveq	r6, r2
   137bc:	beq	13338 <__assert_fail@plt+0x20f0>
   137c0:	mov	r6, #0
   137c4:	b	13360 <__assert_fail@plt+0x2118>
   137c8:	mov	r2, #0
   137cc:	mov	r6, r2
   137d0:	mov	r5, #98	; 0x62
   137d4:	b	13380 <__assert_fail@plt+0x2138>
   137d8:	mov	r5, #97	; 0x61
   137dc:	b	136e0 <__assert_fail@plt+0x2498>
   137e0:	mov	r3, r7
   137e4:	mov	r6, r7
   137e8:	mov	r2, #0
   137ec:	mov	r7, r3
   137f0:	mov	r5, #32
   137f4:	b	13318 <__assert_fail@plt+0x20d0>
   137f8:	cmp	r9, #0
   137fc:	mov	r3, r7
   13800:	bne	13dc8 <__assert_fail@plt+0x2b80>
   13804:	mov	r6, r7
   13808:	mov	r2, r9
   1380c:	mov	r7, r3
   13810:	b	13318 <__assert_fail@plt+0x20d0>
   13814:	mov	r6, r7
   13818:	b	13334 <__assert_fail@plt+0x20ec>
   1381c:	mov	r7, #0
   13820:	ldr	r3, [sp, #64]	; 0x40
   13824:	cmp	r3, #1
   13828:	bne	13e84 <__assert_fail@plt+0x2c3c>
   1382c:	bl	110e0 <__ctype_b_loc@plt>
   13830:	ldr	r2, [sp, #64]	; 0x40
   13834:	sxth	r3, r5
   13838:	mov	ip, r2
   1383c:	lsl	r3, r3, #1
   13840:	ldr	r2, [r0]
   13844:	ldrh	r3, [r2, r3]
   13848:	and	r3, r3, #16384	; 0x4000
   1384c:	cmp	r3, #0
   13850:	ldr	r3, [sp, #28]
   13854:	movne	r6, #1
   13858:	moveq	r6, #0
   1385c:	movne	r2, #0
   13860:	andeq	r2, r3, #1
   13864:	cmp	r2, #0
   13868:	bne	14194 <__assert_fail@plt+0x2f4c>
   1386c:	sub	r2, fp, #2
   13870:	clz	r2, r2
   13874:	lsr	r2, r2, #5
   13878:	b	13318 <__assert_fail@plt+0x20d0>
   1387c:	cmp	r4, #0
   13880:	bne	14540 <__assert_fail@plt+0x32f8>
   13884:	str	r4, [sp, #28]
   13888:	cmp	sl, #0
   1388c:	bne	14584 <__assert_fail@plt+0x333c>
   13890:	ldr	r3, [pc, #772]	; 13b9c <__assert_fail@plt+0x2954>
   13894:	mov	r4, #1
   13898:	str	r4, [sp, #40]	; 0x28
   1389c:	str	r3, [sp, #60]	; 0x3c
   138a0:	str	r4, [sp, #52]	; 0x34
   138a4:	str	sl, [sp, #72]	; 0x48
   138a8:	str	sl, [sp, #68]	; 0x44
   138ac:	str	sl, [sp, #44]	; 0x2c
   138b0:	str	sl, [sp, #32]
   138b4:	mov	r8, #2
   138b8:	b	12e80 <__assert_fail@plt+0x1c38>
   138bc:	ldr	r3, [sp, #36]	; 0x24
   138c0:	ldrb	r5, [r3, r9]
   138c4:	cmp	r5, #126	; 0x7e
   138c8:	ldrls	pc, [pc, r5, lsl #2]
   138cc:	b	13820 <__assert_fail@plt+0x25d8>
   138d0:	andeq	r3, r1, r4, lsl #22
   138d4:	andeq	r3, r1, r0, lsr #16
   138d8:	andeq	r3, r1, r0, lsr #16
   138dc:	andeq	r3, r1, r0, lsr #16
   138e0:	andeq	r3, r1, r0, lsr #16
   138e4:	andeq	r3, r1, r0, lsr #16
   138e8:	andeq	r3, r1, r0, lsr #16
   138ec:	strdeq	r3, [r1], -r0
   138f0:	ldrdeq	r3, [r1], -ip
   138f4:	ldrdeq	r3, [r1], -r4
   138f8:	andeq	r3, r1, ip, asr #21
   138fc:	andeq	r3, r1, ip, ror fp
   13900:	andeq	r3, r1, r8, ror #22
   13904:	andeq	r3, r1, r0, lsl #12
   13908:	andeq	r3, r1, r0, lsr #16
   1390c:	andeq	r3, r1, r0, lsr #16
   13910:	andeq	r3, r1, r0, lsr #16
   13914:	andeq	r3, r1, r0, lsr #16
   13918:	andeq	r3, r1, r0, lsr #16
   1391c:	andeq	r3, r1, r0, lsr #16
   13920:	andeq	r3, r1, r0, lsr #16
   13924:	andeq	r3, r1, r0, lsr #16
   13928:	andeq	r3, r1, r0, lsr #16
   1392c:	andeq	r3, r1, r0, lsr #16
   13930:	andeq	r3, r1, r0, lsr #16
   13934:	andeq	r3, r1, r0, lsr #16
   13938:	andeq	r3, r1, r0, lsr #16
   1393c:	andeq	r3, r1, r0, lsr #16
   13940:	andeq	r3, r1, r0, lsr #16
   13944:	andeq	r3, r1, r0, lsr #16
   13948:	andeq	r3, r1, r0, lsr #16
   1394c:	andeq	r3, r1, r0, lsr #16
   13950:	andeq	r3, r1, r8, asr fp
   13954:	andeq	r3, r1, r4, asr #22
   13958:	andeq	r3, r1, r4, asr #22
   1395c:	andeq	r3, r1, r4, lsr fp
   13960:	andeq	r3, r1, r4, asr #22
   13964:	andeq	r3, r1, ip, ror #16
   13968:	andeq	r3, r1, r4, asr #22
   1396c:	andeq	r3, r1, r4, lsr r5
   13970:	andeq	r3, r1, r4, asr #22
   13974:	andeq	r3, r1, r4, asr #22
   13978:	andeq	r3, r1, r4, asr #22
   1397c:	andeq	r3, r1, ip, ror #16
   13980:	andeq	r3, r1, ip, ror #16
   13984:	andeq	r3, r1, ip, ror #16
   13988:	andeq	r3, r1, ip, ror #16
   1398c:	andeq	r3, r1, ip, ror #16
   13990:	andeq	r3, r1, ip, ror #16
   13994:	andeq	r3, r1, ip, ror #16
   13998:	andeq	r3, r1, ip, ror #16
   1399c:	andeq	r3, r1, ip, ror #16
   139a0:	andeq	r3, r1, ip, ror #16
   139a4:	andeq	r3, r1, ip, ror #16
   139a8:	andeq	r3, r1, ip, ror #16
   139ac:	andeq	r3, r1, ip, ror #16
   139b0:	andeq	r3, r1, ip, ror #16
   139b4:	andeq	r3, r1, ip, ror #16
   139b8:	andeq	r3, r1, ip, ror #16
   139bc:	andeq	r3, r1, r4, asr #22
   139c0:	andeq	r3, r1, r4, asr #22
   139c4:	andeq	r3, r1, r4, asr #22
   139c8:	andeq	r3, r1, r4, asr #22
   139cc:	andeq	r3, r1, r8, lsl #10
   139d0:	andeq	r3, r1, r0, lsr #16
   139d4:	andeq	r3, r1, ip, ror #16
   139d8:	andeq	r3, r1, ip, ror #16
   139dc:	andeq	r3, r1, ip, ror #16
   139e0:	andeq	r3, r1, ip, ror #16
   139e4:	andeq	r3, r1, ip, ror #16
   139e8:	andeq	r3, r1, ip, ror #16
   139ec:	andeq	r3, r1, ip, ror #16
   139f0:	andeq	r3, r1, ip, ror #16
   139f4:	andeq	r3, r1, ip, ror #16
   139f8:	andeq	r3, r1, ip, ror #16
   139fc:	andeq	r3, r1, ip, ror #16
   13a00:	andeq	r3, r1, ip, ror #16
   13a04:	andeq	r3, r1, ip, ror #16
   13a08:	andeq	r3, r1, ip, ror #16
   13a0c:	andeq	r3, r1, ip, ror #16
   13a10:	andeq	r3, r1, ip, ror #16
   13a14:	andeq	r3, r1, ip, ror #16
   13a18:	andeq	r3, r1, ip, ror #16
   13a1c:	andeq	r3, r1, ip, ror #16
   13a20:	andeq	r3, r1, ip, ror #16
   13a24:	andeq	r3, r1, ip, ror #16
   13a28:	andeq	r3, r1, ip, ror #16
   13a2c:	andeq	r3, r1, ip, ror #16
   13a30:	andeq	r3, r1, ip, ror #16
   13a34:	andeq	r3, r1, ip, ror #16
   13a38:	andeq	r3, r1, ip, ror #16
   13a3c:	andeq	r3, r1, r4, asr #22
   13a40:	andeq	r3, r1, r0, asr #9
   13a44:	andeq	r3, r1, ip, ror #16
   13a48:	andeq	r3, r1, r4, asr #22
   13a4c:	andeq	r3, r1, ip, ror #16
   13a50:	andeq	r3, r1, r4, asr #22
   13a54:	andeq	r3, r1, ip, ror #16
   13a58:	andeq	r3, r1, ip, ror #16
   13a5c:	andeq	r3, r1, ip, ror #16
   13a60:	andeq	r3, r1, ip, ror #16
   13a64:	andeq	r3, r1, ip, ror #16
   13a68:	andeq	r3, r1, ip, ror #16
   13a6c:	andeq	r3, r1, ip, ror #16
   13a70:	andeq	r3, r1, ip, ror #16
   13a74:	andeq	r3, r1, ip, ror #16
   13a78:	andeq	r3, r1, ip, ror #16
   13a7c:	andeq	r3, r1, ip, ror #16
   13a80:	andeq	r3, r1, ip, ror #16
   13a84:	andeq	r3, r1, ip, ror #16
   13a88:	andeq	r3, r1, ip, ror #16
   13a8c:	andeq	r3, r1, ip, ror #16
   13a90:	andeq	r3, r1, ip, ror #16
   13a94:	andeq	r3, r1, ip, ror #16
   13a98:	andeq	r3, r1, ip, ror #16
   13a9c:	andeq	r3, r1, ip, ror #16
   13aa0:	andeq	r3, r1, ip, ror #16
   13aa4:	andeq	r3, r1, ip, ror #16
   13aa8:	andeq	r3, r1, ip, ror #16
   13aac:	andeq	r3, r1, ip, ror #16
   13ab0:	andeq	r3, r1, ip, ror #16
   13ab4:	andeq	r3, r1, ip, ror #16
   13ab8:	andeq	r3, r1, ip, ror #16
   13abc:	ldrdeq	r3, [r1], -r8
   13ac0:	andeq	r3, r1, r4, asr #22
   13ac4:	ldrdeq	r3, [r1], -r8
   13ac8:	andeq	r3, r1, r4, lsr fp
   13acc:	mov	r3, #110	; 0x6e
   13ad0:	b	13604 <__assert_fail@plt+0x23bc>
   13ad4:	mov	r3, #116	; 0x74
   13ad8:	b	13604 <__assert_fail@plt+0x23bc>
   13adc:	sub	r2, fp, #2
   13ae0:	mov	r3, #98	; 0x62
   13ae4:	clz	r2, r2
   13ae8:	lsr	r2, r2, #5
   13aec:	b	134f0 <__assert_fail@plt+0x22a8>
   13af0:	sub	r2, fp, #2
   13af4:	mov	r3, #97	; 0x61
   13af8:	clz	r2, r2
   13afc:	lsr	r2, r2, #5
   13b00:	b	134f0 <__assert_fail@plt+0x22a8>
   13b04:	ldr	r3, [sp, #28]
   13b08:	cmp	r3, #0
   13b0c:	bne	136fc <__assert_fail@plt+0x24b4>
   13b10:	ldr	r3, [sp, #164]	; 0xa4
   13b14:	tst	r3, #1
   13b18:	bne	1418c <__assert_fail@plt+0x2f44>
   13b1c:	ldr	r6, [sp, #28]
   13b20:	sub	r2, fp, #2
   13b24:	mov	r7, r6
   13b28:	clz	r2, r2
   13b2c:	lsr	r2, r2, #5
   13b30:	b	13318 <__assert_fail@plt+0x20d0>
   13b34:	sub	r2, fp, #2
   13b38:	clz	r2, r2
   13b3c:	lsr	r2, r2, #5
   13b40:	b	13304 <__assert_fail@plt+0x20bc>
   13b44:	sub	r2, fp, #2
   13b48:	mov	r6, #0
   13b4c:	clz	r2, r2
   13b50:	lsr	r2, r2, #5
   13b54:	b	1330c <__assert_fail@plt+0x20c4>
   13b58:	sub	r2, fp, #2
   13b5c:	clz	r2, r2
   13b60:	lsr	r2, r2, #5
   13b64:	b	1330c <__assert_fail@plt+0x20c4>
   13b68:	sub	r2, fp, #2
   13b6c:	mov	r3, #102	; 0x66
   13b70:	clz	r2, r2
   13b74:	lsr	r2, r2, #5
   13b78:	b	134f0 <__assert_fail@plt+0x22a8>
   13b7c:	sub	r2, fp, #2
   13b80:	mov	r3, #118	; 0x76
   13b84:	clz	r2, r2
   13b88:	lsr	r2, r2, #5
   13b8c:	b	134f0 <__assert_fail@plt+0x22a8>
   13b90:	andeq	sl, r2, r8, lsl #30
   13b94:	andeq	sl, r1, r4, asr #1
   13b98:	andeq	sl, r1, ip, lsr #1
   13b9c:	andeq	sl, r1, r0, asr #1
   13ba0:	ldr	r3, [sp, #48]	; 0x30
   13ba4:	ldrb	r5, [r3]
   13ba8:	cmp	r5, #126	; 0x7e
   13bac:	ldrls	pc, [pc, r5, lsl #2]
   13bb0:	b	1381c <__assert_fail@plt+0x25d4>
   13bb4:	strdeq	r3, [r1], -ip
   13bb8:	andeq	r3, r1, ip, lsl r8
   13bbc:	andeq	r3, r1, ip, lsl r8
   13bc0:	andeq	r3, r1, ip, lsl r8
   13bc4:	andeq	r3, r1, ip, lsl r8
   13bc8:	andeq	r3, r1, ip, lsl r8
   13bcc:	andeq	r3, r1, ip, lsl r8
   13bd0:	strdeq	r3, [r1], -r4
   13bd4:	andeq	r3, r1, ip, ror #27
   13bd8:	andeq	r3, r1, r8, asr #13
   13bdc:	muleq	r1, r0, r6
   13be0:	andeq	r3, r1, r8, ror #13
   13be4:	ldrdeq	r3, [r1], -r0
   13be8:	andeq	r3, r1, r0, ror #27
   13bec:	andeq	r3, r1, ip, lsl r8
   13bf0:	andeq	r3, r1, ip, lsl r8
   13bf4:	andeq	r3, r1, ip, lsl r8
   13bf8:	andeq	r3, r1, ip, lsl r8
   13bfc:	andeq	r3, r1, ip, lsl r8
   13c00:	andeq	r3, r1, ip, lsl r8
   13c04:	andeq	r3, r1, ip, lsl r8
   13c08:	andeq	r3, r1, ip, lsl r8
   13c0c:	andeq	r3, r1, ip, lsl r8
   13c10:	andeq	r3, r1, ip, lsl r8
   13c14:	andeq	r3, r1, ip, lsl r8
   13c18:	andeq	r3, r1, ip, lsl r8
   13c1c:	andeq	r3, r1, ip, lsl r8
   13c20:	andeq	r3, r1, ip, lsl r8
   13c24:	andeq	r3, r1, ip, lsl r8
   13c28:	andeq	r3, r1, ip, lsl r8
   13c2c:	andeq	r3, r1, ip, lsl r8
   13c30:	andeq	r3, r1, ip, lsl r8
   13c34:	ldrdeq	r3, [r1], -r8
   13c38:	strdeq	r3, [r1], -r0
   13c3c:	strdeq	r3, [r1], -r0
   13c40:			; <UNDEFINED> instruction: 0x00013dbc
   13c44:	strdeq	r3, [r1], -r0
   13c48:			; <UNDEFINED> instruction: 0x00013db0
   13c4c:	strdeq	r3, [r1], -r0
   13c50:	andeq	r3, r1, r0, lsr r5
   13c54:	strdeq	r3, [r1], -r0
   13c58:	strdeq	r3, [r1], -r0
   13c5c:	strdeq	r3, [r1], -r0
   13c60:			; <UNDEFINED> instruction: 0x00013db0
   13c64:			; <UNDEFINED> instruction: 0x00013db0
   13c68:			; <UNDEFINED> instruction: 0x00013db0
   13c6c:			; <UNDEFINED> instruction: 0x00013db0
   13c70:			; <UNDEFINED> instruction: 0x00013db0
   13c74:			; <UNDEFINED> instruction: 0x00013db0
   13c78:			; <UNDEFINED> instruction: 0x00013db0
   13c7c:			; <UNDEFINED> instruction: 0x00013db0
   13c80:			; <UNDEFINED> instruction: 0x00013db0
   13c84:			; <UNDEFINED> instruction: 0x00013db0
   13c88:			; <UNDEFINED> instruction: 0x00013db0
   13c8c:			; <UNDEFINED> instruction: 0x00013db0
   13c90:			; <UNDEFINED> instruction: 0x00013db0
   13c94:			; <UNDEFINED> instruction: 0x00013db0
   13c98:			; <UNDEFINED> instruction: 0x00013db0
   13c9c:			; <UNDEFINED> instruction: 0x00013db0
   13ca0:	strdeq	r3, [r1], -r0
   13ca4:	strdeq	r3, [r1], -r0
   13ca8:	strdeq	r3, [r1], -r0
   13cac:	strdeq	r3, [r1], -r0
   13cb0:	andeq	r3, r1, r4, lsl #10
   13cb4:	andeq	r3, r1, ip, lsl r8
   13cb8:			; <UNDEFINED> instruction: 0x00013db0
   13cbc:			; <UNDEFINED> instruction: 0x00013db0
   13cc0:			; <UNDEFINED> instruction: 0x00013db0
   13cc4:			; <UNDEFINED> instruction: 0x00013db0
   13cc8:			; <UNDEFINED> instruction: 0x00013db0
   13ccc:			; <UNDEFINED> instruction: 0x00013db0
   13cd0:			; <UNDEFINED> instruction: 0x00013db0
   13cd4:			; <UNDEFINED> instruction: 0x00013db0
   13cd8:			; <UNDEFINED> instruction: 0x00013db0
   13cdc:			; <UNDEFINED> instruction: 0x00013db0
   13ce0:			; <UNDEFINED> instruction: 0x00013db0
   13ce4:			; <UNDEFINED> instruction: 0x00013db0
   13ce8:			; <UNDEFINED> instruction: 0x00013db0
   13cec:			; <UNDEFINED> instruction: 0x00013db0
   13cf0:			; <UNDEFINED> instruction: 0x00013db0
   13cf4:			; <UNDEFINED> instruction: 0x00013db0
   13cf8:			; <UNDEFINED> instruction: 0x00013db0
   13cfc:			; <UNDEFINED> instruction: 0x00013db0
   13d00:			; <UNDEFINED> instruction: 0x00013db0
   13d04:			; <UNDEFINED> instruction: 0x00013db0
   13d08:			; <UNDEFINED> instruction: 0x00013db0
   13d0c:			; <UNDEFINED> instruction: 0x00013db0
   13d10:			; <UNDEFINED> instruction: 0x00013db0
   13d14:			; <UNDEFINED> instruction: 0x00013db0
   13d18:			; <UNDEFINED> instruction: 0x00013db0
   13d1c:			; <UNDEFINED> instruction: 0x00013db0
   13d20:	strdeq	r3, [r1], -r0
   13d24:			; <UNDEFINED> instruction: 0x000134bc
   13d28:			; <UNDEFINED> instruction: 0x00013db0
   13d2c:	strdeq	r3, [r1], -r0
   13d30:			; <UNDEFINED> instruction: 0x00013db0
   13d34:	strdeq	r3, [r1], -r0
   13d38:			; <UNDEFINED> instruction: 0x00013db0
   13d3c:			; <UNDEFINED> instruction: 0x00013db0
   13d40:			; <UNDEFINED> instruction: 0x00013db0
   13d44:			; <UNDEFINED> instruction: 0x00013db0
   13d48:			; <UNDEFINED> instruction: 0x00013db0
   13d4c:			; <UNDEFINED> instruction: 0x00013db0
   13d50:			; <UNDEFINED> instruction: 0x00013db0
   13d54:			; <UNDEFINED> instruction: 0x00013db0
   13d58:			; <UNDEFINED> instruction: 0x00013db0
   13d5c:			; <UNDEFINED> instruction: 0x00013db0
   13d60:			; <UNDEFINED> instruction: 0x00013db0
   13d64:			; <UNDEFINED> instruction: 0x00013db0
   13d68:			; <UNDEFINED> instruction: 0x00013db0
   13d6c:			; <UNDEFINED> instruction: 0x00013db0
   13d70:			; <UNDEFINED> instruction: 0x00013db0
   13d74:			; <UNDEFINED> instruction: 0x00013db0
   13d78:			; <UNDEFINED> instruction: 0x00013db0
   13d7c:			; <UNDEFINED> instruction: 0x00013db0
   13d80:			; <UNDEFINED> instruction: 0x00013db0
   13d84:			; <UNDEFINED> instruction: 0x00013db0
   13d88:			; <UNDEFINED> instruction: 0x00013db0
   13d8c:			; <UNDEFINED> instruction: 0x00013db0
   13d90:			; <UNDEFINED> instruction: 0x00013db0
   13d94:			; <UNDEFINED> instruction: 0x00013db0
   13d98:			; <UNDEFINED> instruction: 0x00013db0
   13d9c:			; <UNDEFINED> instruction: 0x00013db0
   13da0:	ldrdeq	r3, [r1], -r4
   13da4:	strdeq	r3, [r1], -r0
   13da8:	ldrdeq	r3, [r1], -r4
   13dac:			; <UNDEFINED> instruction: 0x00013dbc
   13db0:	mov	r6, r7
   13db4:	mov	r7, #0
   13db8:	b	13334 <__assert_fail@plt+0x20ec>
   13dbc:	cmp	r9, #0
   13dc0:	mov	r3, #0
   13dc4:	beq	13804 <__assert_fail@plt+0x25bc>
   13dc8:	mov	r6, #0
   13dcc:	mov	r7, r3
   13dd0:	mov	r3, r6
   13dd4:	b	13338 <__assert_fail@plt+0x20f0>
   13dd8:	mov	r3, #0
   13ddc:	b	137e4 <__assert_fail@plt+0x259c>
   13de0:	mov	r7, #0
   13de4:	mov	r3, #114	; 0x72
   13de8:	b	13604 <__assert_fail@plt+0x23bc>
   13dec:	mov	r5, #98	; 0x62
   13df0:	b	13694 <__assert_fail@plt+0x244c>
   13df4:	mov	r5, #97	; 0x61
   13df8:	b	136d4 <__assert_fail@plt+0x248c>
   13dfc:	ldr	r3, [sp, #32]
   13e00:	cmp	r3, #0
   13e04:	bne	1424c <__assert_fail@plt+0x3004>
   13e08:	add	r9, r9, #1
   13e0c:	ldr	r3, [sp, #44]	; 0x2c
   13e10:	mov	r6, #0
   13e14:	mov	r5, #92	; 0x5c
   13e18:	b	135cc <__assert_fail@plt+0x2384>
   13e1c:	ldr	r3, [sp, #36]	; 0x24
   13e20:	ldrb	r3, [r3, #1]
   13e24:	adds	r3, r3, #0
   13e28:	movne	r3, #1
   13e2c:	b	132f0 <__assert_fail@plt+0x20a8>
   13e30:	ldr	r3, [sp, #164]	; 0xa4
   13e34:	ands	r3, r3, #4
   13e38:	beq	13e5c <__assert_fail@plt+0x2c14>
   13e3c:	ldr	r2, [sp, #24]
   13e40:	add	r3, r9, #2
   13e44:	cmp	r3, r2
   13e48:	bcs	13e5c <__assert_fail@plt+0x2c14>
   13e4c:	ldr	r2, [sp, #48]	; 0x30
   13e50:	ldrb	r5, [r2, #1]
   13e54:	cmp	r5, #63	; 0x3f
   13e58:	beq	142c0 <__assert_fail@plt+0x3078>
   13e5c:	mov	r2, #0
   13e60:	mov	r6, r2
   13e64:	mov	r5, #63	; 0x3f
   13e68:	b	13318 <__assert_fail@plt+0x20d0>
   13e6c:	ldr	r3, [sp, #32]
   13e70:	cmp	r3, #0
   13e74:	bne	1424c <__assert_fail@plt+0x3004>
   13e78:	mov	r6, r3
   13e7c:	mov	r5, #63	; 0x3f
   13e80:	b	13360 <__assert_fail@plt+0x2118>
   13e84:	ldr	r3, [sp, #24]
   13e88:	cmn	r3, #1
   13e8c:	mov	r3, #0
   13e90:	str	r3, [sp, #108]	; 0x6c
   13e94:	str	r3, [sp, #112]	; 0x70
   13e98:	bne	13ea8 <__assert_fail@plt+0x2c60>
   13e9c:	ldr	r0, [sp, #36]	; 0x24
   13ea0:	bl	110f8 <strlen@plt>
   13ea4:	str	r0, [sp, #24]
   13ea8:	mov	r3, #0
   13eac:	str	sl, [sp, #88]	; 0x58
   13eb0:	ldr	sl, [sp, #36]	; 0x24
   13eb4:	str	r5, [sp, #92]	; 0x5c
   13eb8:	mov	r5, r3
   13ebc:	str	r7, [sp, #96]	; 0x60
   13ec0:	str	r4, [sp, #100]	; 0x64
   13ec4:	str	r8, [sp, #84]	; 0x54
   13ec8:	ldr	r3, [sp, #24]
   13ecc:	add	r4, r9, r5
   13ed0:	add	r7, sl, r4
   13ed4:	sub	r2, r3, r4
   13ed8:	mov	r1, r7
   13edc:	add	r3, sp, #108	; 0x6c
   13ee0:	add	r0, sp, #104	; 0x68
   13ee4:	bl	17988 <fts_children@@Base+0x14c>
   13ee8:	subs	r8, r0, #0
   13eec:	beq	13f3c <__assert_fail@plt+0x2cf4>
   13ef0:	cmn	r8, #1
   13ef4:	beq	1429c <__assert_fail@plt+0x3054>
   13ef8:	cmn	r8, #2
   13efc:	beq	143bc <__assert_fail@plt+0x3174>
   13f00:	ldr	r3, [sp, #32]
   13f04:	cmp	fp, #2
   13f08:	movne	r3, #0
   13f0c:	andeq	r3, r3, #1
   13f10:	cmp	r3, #0
   13f14:	bne	1409c <__assert_fail@plt+0x2e54>
   13f18:	ldr	r0, [sp, #104]	; 0x68
   13f1c:	bl	11038 <iswprint@plt>
   13f20:	add	r5, r5, r8
   13f24:	cmp	r0, #0
   13f28:	add	r0, sp, #108	; 0x6c
   13f2c:	moveq	r6, #0
   13f30:	bl	10fe4 <mbsinit@plt>
   13f34:	cmp	r0, #0
   13f38:	beq	13ec8 <__assert_fail@plt+0x2c80>
   13f3c:	ldr	r3, [sp, #28]
   13f40:	mov	ip, r5
   13f44:	eor	r2, r6, #1
   13f48:	ldr	r5, [sp, #92]	; 0x5c
   13f4c:	ldr	r7, [sp, #96]	; 0x60
   13f50:	ldr	r4, [sp, #100]	; 0x64
   13f54:	ldr	r8, [sp, #84]	; 0x54
   13f58:	ldr	sl, [sp, #88]	; 0x58
   13f5c:	and	r2, r2, r3
   13f60:	cmp	ip, #1
   13f64:	bls	13864 <__assert_fail@plt+0x261c>
   13f68:	add	r1, ip, r9
   13f6c:	ldr	lr, [sp, #48]	; 0x30
   13f70:	mov	r0, #0
   13f74:	str	r6, [sp, #48]	; 0x30
   13f78:	mov	ip, #39	; 0x27
   13f7c:	ldr	r6, [sp, #44]	; 0x2c
   13f80:	b	14038 <__assert_fail@plt+0x2df0>
   13f84:	ldr	r0, [sp, #32]
   13f88:	sub	r3, fp, #2
   13f8c:	cmp	r0, #0
   13f90:	clz	r3, r3
   13f94:	lsr	r3, r3, #5
   13f98:	bne	141a0 <__assert_fail@plt+0x2f58>
   13f9c:	eor	r0, r6, #1
   13fa0:	ands	r3, r3, r0
   13fa4:	beq	13fd4 <__assert_fail@plt+0x2d8c>
   13fa8:	add	r0, r4, #1
   13fac:	cmp	sl, r4
   13fb0:	strbhi	ip, [r8, r4]
   13fb4:	cmp	sl, r0
   13fb8:	movhi	r6, #36	; 0x24
   13fbc:	strbhi	r6, [r8, r0]
   13fc0:	add	r0, r4, #2
   13fc4:	mov	r6, r3
   13fc8:	add	r4, r4, #3
   13fcc:	cmp	sl, r0
   13fd0:	strbhi	ip, [r8, r0]
   13fd4:	cmp	sl, r4
   13fd8:	movhi	r3, #92	; 0x5c
   13fdc:	strbhi	r3, [r8, r4]
   13fe0:	add	r3, r4, #1
   13fe4:	cmp	sl, r3
   13fe8:	lsrhi	r0, r5, #6
   13fec:	addhi	r0, r0, #48	; 0x30
   13ff0:	strbhi	r0, [r8, r3]
   13ff4:	add	r0, r4, #2
   13ff8:	cmp	sl, r0
   13ffc:	lsrhi	r3, r5, #3
   14000:	andhi	r3, r3, #7
   14004:	addhi	r3, r3, #48	; 0x30
   14008:	add	r9, r9, #1
   1400c:	strbhi	r3, [r8, r0]
   14010:	and	r5, r5, #7
   14014:	cmp	r9, r1
   14018:	add	r5, r5, #48	; 0x30
   1401c:	add	r4, r4, #3
   14020:	bcs	141c0 <__assert_fail@plt+0x2f78>
   14024:	mov	r0, r2
   14028:	cmp	sl, r4
   1402c:	strbhi	r5, [r8, r4]
   14030:	ldrb	r5, [lr, #1]!
   14034:	add	r4, r4, #1
   14038:	cmp	r2, #0
   1403c:	bne	13f84 <__assert_fail@plt+0x2d3c>
   14040:	eor	r3, r0, #1
   14044:	and	r3, r3, r6
   14048:	cmp	r7, #0
   1404c:	uxtb	r3, r3
   14050:	beq	14064 <__assert_fail@plt+0x2e1c>
   14054:	cmp	sl, r4
   14058:	movhi	r7, #92	; 0x5c
   1405c:	strbhi	r7, [r8, r4]
   14060:	add	r4, r4, #1
   14064:	add	r9, r9, #1
   14068:	cmp	r9, r1
   1406c:	bcs	141b4 <__assert_fail@plt+0x2f6c>
   14070:	cmp	r3, #0
   14074:	beq	141e0 <__assert_fail@plt+0x2f98>
   14078:	cmp	sl, r4
   1407c:	add	r3, r4, #1
   14080:	strbhi	ip, [r8, r4]
   14084:	mov	r7, #0
   14088:	cmp	sl, r3
   1408c:	strbhi	ip, [r8, r3]
   14090:	add	r4, r4, #2
   14094:	mov	r6, r7
   14098:	b	14028 <__assert_fail@plt+0x2de0>
   1409c:	cmp	r8, #1
   140a0:	beq	13f18 <__assert_fail@plt+0x2cd0>
   140a4:	add	r1, r4, #1
   140a8:	add	r3, sl, r8
   140ac:	add	r1, sl, r1
   140b0:	add	r4, r3, r4
   140b4:	ldrb	r3, [r1], #1
   140b8:	sub	r3, r3, #91	; 0x5b
   140bc:	cmp	r3, #33	; 0x21
   140c0:	ldrls	pc, [pc, r3, lsl #2]
   140c4:	b	14150 <__assert_fail@plt+0x2f08>
   140c8:	andeq	r4, r1, ip, asr r1
   140cc:	andeq	r4, r1, ip, asr r1
   140d0:	andeq	r4, r1, r0, asr r1
   140d4:	andeq	r4, r1, ip, asr r1
   140d8:	andeq	r4, r1, r0, asr r1
   140dc:	andeq	r4, r1, ip, asr r1
   140e0:	andeq	r4, r1, r0, asr r1
   140e4:	andeq	r4, r1, r0, asr r1
   140e8:	andeq	r4, r1, r0, asr r1
   140ec:	andeq	r4, r1, r0, asr r1
   140f0:	andeq	r4, r1, r0, asr r1
   140f4:	andeq	r4, r1, r0, asr r1
   140f8:	andeq	r4, r1, r0, asr r1
   140fc:	andeq	r4, r1, r0, asr r1
   14100:	andeq	r4, r1, r0, asr r1
   14104:	andeq	r4, r1, r0, asr r1
   14108:	andeq	r4, r1, r0, asr r1
   1410c:	andeq	r4, r1, r0, asr r1
   14110:	andeq	r4, r1, r0, asr r1
   14114:	andeq	r4, r1, r0, asr r1
   14118:	andeq	r4, r1, r0, asr r1
   1411c:	andeq	r4, r1, r0, asr r1
   14120:	andeq	r4, r1, r0, asr r1
   14124:	andeq	r4, r1, r0, asr r1
   14128:	andeq	r4, r1, r0, asr r1
   1412c:	andeq	r4, r1, r0, asr r1
   14130:	andeq	r4, r1, r0, asr r1
   14134:	andeq	r4, r1, r0, asr r1
   14138:	andeq	r4, r1, r0, asr r1
   1413c:	andeq	r4, r1, r0, asr r1
   14140:	andeq	r4, r1, r0, asr r1
   14144:	andeq	r4, r1, r0, asr r1
   14148:	andeq	r4, r1, r0, asr r1
   1414c:	andeq	r4, r1, ip, asr r1
   14150:	cmp	r4, r1
   14154:	bne	140b4 <__assert_fail@plt+0x2e6c>
   14158:	b	13f18 <__assert_fail@plt+0x2cd0>
   1415c:	ldr	fp, [sp, #84]	; 0x54
   14160:	ldr	sl, [sp, #88]	; 0x58
   14164:	mov	r8, #2
   14168:	b	13624 <__assert_fail@plt+0x23dc>
   1416c:	cmp	sl, r4
   14170:	movls	r1, r4
   14174:	bls	13774 <__assert_fail@plt+0x252c>
   14178:	ldr	r3, [sp, #44]	; 0x2c
   1417c:	b	13764 <__assert_fail@plt+0x251c>
   14180:	str	sl, [sp, #72]	; 0x48
   14184:	ldr	sl, [sp, #32]
   14188:	b	1359c <__assert_fail@plt+0x2354>
   1418c:	add	r9, r9, #1
   14190:	b	12e90 <__assert_fail@plt+0x1c48>
   14194:	ldr	r2, [sp, #28]
   14198:	mov	r6, #0
   1419c:	b	13f68 <__assert_fail@plt+0x2d20>
   141a0:	str	fp, [sp, #160]	; 0xa0
   141a4:	str	r3, [sp, #28]
   141a8:	mov	fp, r8
   141ac:	ldr	r8, [sp, #160]	; 0xa0
   141b0:	b	13624 <__assert_fail@plt+0x23dc>
   141b4:	str	r6, [sp, #44]	; 0x2c
   141b8:	ldr	r6, [sp, #48]	; 0x30
   141bc:	b	135cc <__assert_fail@plt+0x2384>
   141c0:	str	r6, [sp, #44]	; 0x2c
   141c4:	ldr	r6, [sp, #48]	; 0x30
   141c8:	b	133d8 <__assert_fail@plt+0x2190>
   141cc:	add	r4, r4, #4
   141d0:	str	r3, [sp, #44]	; 0x2c
   141d4:	mov	r6, #0
   141d8:	mov	r5, #48	; 0x30
   141dc:	b	13360 <__assert_fail@plt+0x2118>
   141e0:	mov	r7, r3
   141e4:	b	14028 <__assert_fail@plt+0x2de0>
   141e8:	ldr	r3, [pc, #-1624]	; 13b98 <__assert_fail@plt+0x2950>
   141ec:	mov	r4, #1
   141f0:	str	r4, [sp, #40]	; 0x28
   141f4:	str	r4, [sp, #28]
   141f8:	str	r4, [sp, #52]	; 0x34
   141fc:	str	sl, [sp, #72]	; 0x48
   14200:	str	sl, [sp, #68]	; 0x44
   14204:	str	sl, [sp, #44]	; 0x2c
   14208:	str	sl, [sp, #32]
   1420c:	str	r3, [sp, #60]	; 0x3c
   14210:	b	12e80 <__assert_fail@plt+0x1c38>
   14214:	mov	r3, r6
   14218:	mov	r5, #48	; 0x30
   1421c:	mov	r6, #0
   14220:	b	13360 <__assert_fail@plt+0x2118>
   14224:	cmp	sl, r4
   14228:	movhi	r3, #48	; 0x30
   1422c:	strbhi	r3, [r8, r4]
   14230:	add	r3, r1, #2
   14234:	cmp	sl, r3
   14238:	movhi	r0, #48	; 0x30
   1423c:	strbhi	r0, [r8, r3]
   14240:	add	r4, r1, #3
   14244:	mov	r5, #48	; 0x30
   14248:	b	137a8 <__assert_fail@plt+0x2560>
   1424c:	str	fp, [sp, #160]	; 0xa0
   14250:	mov	fp, r8
   14254:	ldr	r8, [sp, #160]	; 0xa0
   14258:	b	13624 <__assert_fail@plt+0x23dc>
   1425c:	ldr	r2, [sp, #80]	; 0x50
   14260:	ldrb	r3, [r2]
   14264:	cmp	r3, #0
   14268:	beq	12e50 <__assert_fail@plt+0x1c08>
   1426c:	cmp	sl, r4
   14270:	strbhi	r3, [fp, r4]
   14274:	ldrb	r3, [r2, #1]!
   14278:	add	r4, r4, #1
   1427c:	cmp	r3, #0
   14280:	bne	1426c <__assert_fail@plt+0x3024>
   14284:	b	12e50 <__assert_fail@plt+0x1c08>
   14288:	str	fp, [sp, #160]	; 0xa0
   1428c:	mov	r3, #0
   14290:	mov	fp, r8
   14294:	ldr	r8, [sp, #160]	; 0xa0
   14298:	b	136b8 <__assert_fail@plt+0x2470>
   1429c:	mov	ip, r5
   142a0:	ldr	r7, [sp, #96]	; 0x60
   142a4:	ldr	r5, [sp, #92]	; 0x5c
   142a8:	ldr	r4, [sp, #100]	; 0x64
   142ac:	ldr	r8, [sp, #84]	; 0x54
   142b0:	ldr	sl, [sp, #88]	; 0x58
   142b4:	ldr	r2, [sp, #28]
   142b8:	mov	r6, #0
   142bc:	b	13f60 <__assert_fail@plt+0x2d18>
   142c0:	ldr	r2, [sp, #36]	; 0x24
   142c4:	ldrb	r1, [r2, r3]
   142c8:	sub	r2, r1, #33	; 0x21
   142cc:	cmp	r2, #29
   142d0:	ldrls	pc, [pc, r2, lsl #2]
   142d4:	b	143b0 <__assert_fail@plt+0x3168>
   142d8:	andeq	r4, r1, r0, asr r3
   142dc:			; <UNDEFINED> instruction: 0x000143b0
   142e0:			; <UNDEFINED> instruction: 0x000143b0
   142e4:			; <UNDEFINED> instruction: 0x000143b0
   142e8:			; <UNDEFINED> instruction: 0x000143b0
   142ec:			; <UNDEFINED> instruction: 0x000143b0
   142f0:	andeq	r4, r1, r0, asr r3
   142f4:	andeq	r4, r1, r0, asr r3
   142f8:	andeq	r4, r1, r0, asr r3
   142fc:			; <UNDEFINED> instruction: 0x000143b0
   14300:			; <UNDEFINED> instruction: 0x000143b0
   14304:			; <UNDEFINED> instruction: 0x000143b0
   14308:	andeq	r4, r1, r0, asr r3
   1430c:			; <UNDEFINED> instruction: 0x000143b0
   14310:	andeq	r4, r1, r0, asr r3
   14314:			; <UNDEFINED> instruction: 0x000143b0
   14318:			; <UNDEFINED> instruction: 0x000143b0
   1431c:			; <UNDEFINED> instruction: 0x000143b0
   14320:			; <UNDEFINED> instruction: 0x000143b0
   14324:			; <UNDEFINED> instruction: 0x000143b0
   14328:			; <UNDEFINED> instruction: 0x000143b0
   1432c:			; <UNDEFINED> instruction: 0x000143b0
   14330:			; <UNDEFINED> instruction: 0x000143b0
   14334:			; <UNDEFINED> instruction: 0x000143b0
   14338:			; <UNDEFINED> instruction: 0x000143b0
   1433c:			; <UNDEFINED> instruction: 0x000143b0
   14340:			; <UNDEFINED> instruction: 0x000143b0
   14344:	andeq	r4, r1, r0, asr r3
   14348:	andeq	r4, r1, r0, asr r3
   1434c:	andeq	r4, r1, r0, asr r3
   14350:	ldr	r2, [sp, #32]
   14354:	cmp	r2, #0
   14358:	bne	1445c <__assert_fail@plt+0x3214>
   1435c:	cmp	sl, r4
   14360:	movhi	r2, #63	; 0x3f
   14364:	strbhi	r2, [r8, r4]
   14368:	add	r2, r4, #1
   1436c:	cmp	sl, r2
   14370:	movhi	r0, #34	; 0x22
   14374:	strbhi	r0, [r8, r2]
   14378:	add	r2, r4, #2
   1437c:	cmp	sl, r2
   14380:	movhi	r0, #34	; 0x22
   14384:	strbhi	r0, [r8, r2]
   14388:	add	r2, r4, #3
   1438c:	cmp	sl, r2
   14390:	movhi	r0, #63	; 0x3f
   14394:	strbhi	r0, [r8, r2]
   14398:	mov	r2, #0
   1439c:	add	r4, r4, #4
   143a0:	mov	r5, r1
   143a4:	mov	r9, r3
   143a8:	mov	r6, r2
   143ac:	b	137a8 <__assert_fail@plt+0x2560>
   143b0:	mov	r2, #0
   143b4:	mov	r6, r2
   143b8:	b	13318 <__assert_fail@plt+0x20d0>
   143bc:	ldr	r0, [sp, #24]
   143c0:	mov	r1, r4
   143c4:	cmp	r1, r0
   143c8:	mov	r2, r7
   143cc:	mov	r3, r5
   143d0:	mov	ip, r5
   143d4:	ldr	r7, [sp, #96]	; 0x60
   143d8:	ldr	r5, [sp, #92]	; 0x5c
   143dc:	ldr	r4, [sp, #100]	; 0x64
   143e0:	ldr	r8, [sp, #84]	; 0x54
   143e4:	ldr	sl, [sp, #88]	; 0x58
   143e8:	bcs	1441c <__assert_fail@plt+0x31d4>
   143ec:	ldrb	r6, [r2]
   143f0:	cmp	r6, #0
   143f4:	bne	14408 <__assert_fail@plt+0x31c0>
   143f8:	b	14538 <__assert_fail@plt+0x32f0>
   143fc:	ldrb	r6, [r2, #1]!
   14400:	cmp	r6, #0
   14404:	beq	144c0 <__assert_fail@plt+0x3278>
   14408:	add	r3, r3, #1
   1440c:	add	r1, r9, r3
   14410:	cmp	r1, r0
   14414:	bcc	143fc <__assert_fail@plt+0x31b4>
   14418:	mov	ip, r3
   1441c:	ldr	r2, [sp, #28]
   14420:	mov	r6, #0
   14424:	b	13f60 <__assert_fail@plt+0x2d18>
   14428:	mov	r3, #1
   1442c:	str	r3, [sp, #40]	; 0x28
   14430:	str	r3, [sp, #32]
   14434:	str	r3, [sp, #28]
   14438:	str	r3, [sp, #52]	; 0x34
   1443c:	ldr	r3, [pc, #-2220]	; 13b98 <__assert_fail@plt+0x2950>
   14440:	mov	r2, #0
   14444:	str	r2, [sp, #68]	; 0x44
   14448:	str	r2, [sp, #44]	; 0x2c
   1444c:	str	r2, [sp, #72]	; 0x48
   14450:	mov	r4, r2
   14454:	str	r3, [sp, #60]	; 0x3c
   14458:	b	12e80 <__assert_fail@plt+0x1c38>
   1445c:	str	fp, [sp, #160]	; 0xa0
   14460:	mov	fp, r8
   14464:	ldr	r8, [sp, #160]	; 0xa0
   14468:	b	13630 <__assert_fail@plt+0x23e8>
   1446c:	mov	r2, r3
   14470:	ldr	r3, [sp, #60]	; 0x3c
   14474:	cmp	r3, #0
   14478:	moveq	r2, #0
   1447c:	andne	r2, r2, #1
   14480:	cmp	r2, #0
   14484:	beq	144b0 <__assert_fail@plt+0x3268>
   14488:	mov	r2, r3
   1448c:	ldrb	r3, [r3]
   14490:	cmp	r3, #0
   14494:	beq	144b0 <__assert_fail@plt+0x3268>
   14498:	cmp	sl, r4
   1449c:	strbhi	r3, [fp, r4]
   144a0:	ldrb	r3, [r2, #1]!
   144a4:	add	r4, r4, #1
   144a8:	cmp	r3, #0
   144ac:	bne	14498 <__assert_fail@plt+0x3250>
   144b0:	cmp	sl, r4
   144b4:	movhi	r3, #0
   144b8:	strbhi	r3, [fp, r4]
   144bc:	b	13670 <__assert_fail@plt+0x2428>
   144c0:	mov	ip, r3
   144c4:	ldr	r2, [sp, #28]
   144c8:	b	13f60 <__assert_fail@plt+0x2d18>
   144cc:	str	fp, [sp, #160]	; 0xa0
   144d0:	mov	fp, r8
   144d4:	ldr	r8, [sp, #160]	; 0xa0
   144d8:	sub	r3, r8, #2
   144dc:	clz	r3, r3
   144e0:	lsr	r3, r3, #5
   144e4:	str	r3, [sp, #28]
   144e8:	b	13624 <__assert_fail@plt+0x23dc>
   144ec:	ldr	r3, [sp, #76]	; 0x4c
   144f0:	mov	ip, #5
   144f4:	str	r3, [sp, #16]
   144f8:	ldr	r3, [sp, #80]	; 0x50
   144fc:	ldr	r2, [sp, #36]	; 0x24
   14500:	str	r3, [sp, #12]
   14504:	ldr	r3, [sp, #56]	; 0x38
   14508:	ldr	r1, [sp, #72]	; 0x48
   1450c:	str	r3, [sp, #8]
   14510:	ldr	r3, [sp, #164]	; 0xa4
   14514:	mov	r0, fp
   14518:	str	r3, [sp, #4]
   1451c:	str	ip, [sp]
   14520:	ldr	r3, [sp, #24]
   14524:	bl	12d88 <__assert_fail@plt+0x1b40>
   14528:	mov	r4, r0
   1452c:	b	13670 <__assert_fail@plt+0x2428>
   14530:	mov	r8, #2
   14534:	b	13624 <__assert_fail@plt+0x23dc>
   14538:	ldr	r2, [sp, #28]
   1453c:	b	13f60 <__assert_fail@plt+0x2d18>
   14540:	mov	r3, #0
   14544:	str	r3, [sp, #68]	; 0x44
   14548:	str	r3, [sp, #44]	; 0x2c
   1454c:	str	r3, [sp, #72]	; 0x48
   14550:	str	r3, [sp, #28]
   14554:	mov	r4, r3
   14558:	ldr	r3, [pc, #-2500]	; 13b9c <__assert_fail@plt+0x2954>
   1455c:	mov	r2, #1
   14560:	str	r2, [sp, #40]	; 0x28
   14564:	str	r2, [sp, #32]
   14568:	str	r2, [sp, #52]	; 0x34
   1456c:	str	r3, [sp, #60]	; 0x3c
   14570:	b	12e80 <__assert_fail@plt+0x1c38>
   14574:	bl	11008 <__stack_chk_fail@plt>
   14578:	mov	r5, r3
   1457c:	mov	r6, #0
   14580:	b	13374 <__assert_fail@plt+0x212c>
   14584:	mov	r3, #0
   14588:	mov	r2, #1
   1458c:	str	r3, [sp, #44]	; 0x2c
   14590:	str	r3, [sp, #72]	; 0x48
   14594:	str	r2, [sp, #40]	; 0x28
   14598:	b	13490 <__assert_fail@plt+0x2248>
   1459c:	bl	11218 <abort@plt>
   145a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a4:	sub	sp, sp, #44	; 0x2c
   145a8:	mov	r6, r0
   145ac:	mov	r4, r3
   145b0:	mov	sl, r1
   145b4:	mov	fp, r2
   145b8:	bl	1111c <__errno_location@plt>
   145bc:	ldr	r7, [pc, #364]	; 14730 <__assert_fail@plt+0x34e8>
   145c0:	cmp	r6, #0
   145c4:	ldr	r5, [r7]
   145c8:	ldr	r3, [r0]
   145cc:	str	r3, [sp, #24]
   145d0:	blt	1472c <__assert_fail@plt+0x34e4>
   145d4:	ldr	r3, [r7, #4]
   145d8:	mov	r8, r0
   145dc:	cmp	r3, r6
   145e0:	bgt	1462c <__assert_fail@plt+0x33e4>
   145e4:	cmn	r6, #-268435454	; 0xf0000002
   145e8:	bgt	14728 <__assert_fail@plt+0x34e0>
   145ec:	add	r9, r6, #1
   145f0:	add	r3, r7, #8
   145f4:	cmp	r5, r3
   145f8:	lsl	r1, r9, #3
   145fc:	beq	14708 <__assert_fail@plt+0x34c0>
   14600:	mov	r0, r5
   14604:	bl	153fc <__assert_fail@plt+0x41b4>
   14608:	mov	r5, r0
   1460c:	str	r0, [r7]
   14610:	ldr	r0, [r7, #4]
   14614:	mov	r1, #0
   14618:	sub	r2, r9, r0
   1461c:	add	r0, r5, r0, lsl #3
   14620:	lsl	r2, r2, #3
   14624:	bl	11134 <memset@plt>
   14628:	str	r9, [r7, #4]
   1462c:	add	r3, r5, r6, lsl #3
   14630:	ldr	r1, [r4, #4]
   14634:	ldr	r7, [r3, #4]
   14638:	ldr	r9, [r5, r6, lsl #3]
   1463c:	ldr	r2, [r4, #40]	; 0x28
   14640:	ldr	ip, [r4, #44]	; 0x2c
   14644:	str	r3, [sp, #28]
   14648:	ldr	r3, [r4]
   1464c:	orr	r1, r1, #1
   14650:	add	lr, r4, #8
   14654:	str	r1, [sp, #36]	; 0x24
   14658:	str	r1, [sp, #4]
   1465c:	str	r2, [sp, #12]
   14660:	str	r3, [sp]
   14664:	mov	r0, r7
   14668:	mov	r1, r9
   1466c:	str	ip, [sp, #16]
   14670:	str	lr, [sp, #8]
   14674:	mov	r3, fp
   14678:	mov	r2, sl
   1467c:	str	lr, [sp, #32]
   14680:	bl	12d88 <__assert_fail@plt+0x1b40>
   14684:	cmp	r9, r0
   14688:	bhi	146f4 <__assert_fail@plt+0x34ac>
   1468c:	ldr	r3, [pc, #160]	; 14734 <__assert_fail@plt+0x34ec>
   14690:	add	r9, r0, #1
   14694:	cmp	r7, r3
   14698:	str	r9, [r5, r6, lsl #3]
   1469c:	beq	146a8 <__assert_fail@plt+0x3460>
   146a0:	mov	r0, r7
   146a4:	bl	10fc0 <free@plt>
   146a8:	mov	r0, r9
   146ac:	bl	153a0 <__assert_fail@plt+0x4158>
   146b0:	ldr	lr, [sp, #28]
   146b4:	ldr	ip, [r4, #44]	; 0x2c
   146b8:	ldr	r5, [r4, #40]	; 0x28
   146bc:	mov	r3, fp
   146c0:	mov	r2, sl
   146c4:	mov	r1, r9
   146c8:	str	r0, [lr, #4]
   146cc:	ldr	lr, [r4]
   146d0:	ldr	r4, [sp, #32]
   146d4:	str	ip, [sp, #16]
   146d8:	str	r4, [sp, #8]
   146dc:	ldr	r4, [sp, #36]	; 0x24
   146e0:	str	r5, [sp, #12]
   146e4:	str	r4, [sp, #4]
   146e8:	str	lr, [sp]
   146ec:	mov	r7, r0
   146f0:	bl	12d88 <__assert_fail@plt+0x1b40>
   146f4:	ldr	r3, [sp, #24]
   146f8:	mov	r0, r7
   146fc:	str	r3, [r8]
   14700:	add	sp, sp, #44	; 0x2c
   14704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14708:	mov	r0, #0
   1470c:	bl	153fc <__assert_fail@plt+0x41b4>
   14710:	ldr	r3, [pc, #32]	; 14738 <__assert_fail@plt+0x34f0>
   14714:	mov	r5, r0
   14718:	ldm	r3, {r0, r1}
   1471c:	str	r5, [r7]
   14720:	stm	r5, {r0, r1}
   14724:	b	14610 <__assert_fail@plt+0x33c8>
   14728:	bl	155e8 <__assert_fail@plt+0x43a0>
   1472c:	bl	11218 <abort@plt>
   14730:	andeq	fp, r2, ip, lsl r1
   14734:			; <UNDEFINED> instruction: 0x0002b1b0
   14738:	andeq	fp, r2, r4, lsr #2
   1473c:	push	{r4, r5, r6, lr}
   14740:	mov	r5, r0
   14744:	bl	1111c <__errno_location@plt>
   14748:	cmp	r5, #0
   1474c:	mov	r1, #48	; 0x30
   14750:	mov	r4, r0
   14754:	ldr	r0, [pc, #16]	; 1476c <__assert_fail@plt+0x3524>
   14758:	ldr	r6, [r4]
   1475c:	movne	r0, r5
   14760:	bl	155a8 <__assert_fail@plt+0x4360>
   14764:	str	r6, [r4]
   14768:	pop	{r4, r5, r6, pc}
   1476c:			; <UNDEFINED> instruction: 0x0002b2b0
   14770:	ldr	r3, [pc, #12]	; 14784 <__assert_fail@plt+0x353c>
   14774:	cmp	r0, #0
   14778:	moveq	r0, r3
   1477c:	ldr	r0, [r0]
   14780:	bx	lr
   14784:			; <UNDEFINED> instruction: 0x0002b2b0
   14788:	ldr	r3, [pc, #12]	; 1479c <__assert_fail@plt+0x3554>
   1478c:	cmp	r0, #0
   14790:	moveq	r0, r3
   14794:	str	r1, [r0]
   14798:	bx	lr
   1479c:			; <UNDEFINED> instruction: 0x0002b2b0
   147a0:	ldr	r3, [pc, #52]	; 147dc <__assert_fail@plt+0x3594>
   147a4:	cmp	r0, #0
   147a8:	moveq	r0, r3
   147ac:	add	r3, r0, #8
   147b0:	push	{lr}		; (str lr, [sp, #-4]!)
   147b4:	lsr	lr, r1, #5
   147b8:	and	r1, r1, #31
   147bc:	ldr	ip, [r3, lr, lsl #2]
   147c0:	lsr	r0, ip, r1
   147c4:	eor	r2, r2, r0
   147c8:	and	r2, r2, #1
   147cc:	and	r0, r0, #1
   147d0:	eor	r1, ip, r2, lsl r1
   147d4:	str	r1, [r3, lr, lsl #2]
   147d8:	pop	{pc}		; (ldr pc, [sp], #4)
   147dc:			; <UNDEFINED> instruction: 0x0002b2b0
   147e0:	ldr	r3, [pc, #16]	; 147f8 <__assert_fail@plt+0x35b0>
   147e4:	cmp	r0, #0
   147e8:	movne	r3, r0
   147ec:	ldr	r0, [r3, #4]
   147f0:	str	r1, [r3, #4]
   147f4:	bx	lr
   147f8:			; <UNDEFINED> instruction: 0x0002b2b0
   147fc:	ldr	r3, [pc, #44]	; 14830 <__assert_fail@plt+0x35e8>
   14800:	cmp	r0, #0
   14804:	moveq	r0, r3
   14808:	mov	ip, #10
   1480c:	cmp	r2, #0
   14810:	cmpne	r1, #0
   14814:	str	ip, [r0]
   14818:	beq	14828 <__assert_fail@plt+0x35e0>
   1481c:	str	r1, [r0, #40]	; 0x28
   14820:	str	r2, [r0, #44]	; 0x2c
   14824:	bx	lr
   14828:	push	{r4, lr}
   1482c:	bl	11218 <abort@plt>
   14830:			; <UNDEFINED> instruction: 0x0002b2b0
   14834:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14838:	sub	sp, sp, #24
   1483c:	ldr	ip, [pc, #108]	; 148b0 <__assert_fail@plt+0x3668>
   14840:	ldr	r4, [sp, #56]	; 0x38
   14844:	mov	r9, r2
   14848:	cmp	r4, #0
   1484c:	moveq	r4, ip
   14850:	mov	sl, r3
   14854:	mov	r7, r0
   14858:	mov	r8, r1
   1485c:	bl	1111c <__errno_location@plt>
   14860:	ldr	r3, [r4, #44]	; 0x2c
   14864:	mov	r1, r8
   14868:	ldr	r6, [r0]
   1486c:	str	r3, [sp, #16]
   14870:	ldr	r2, [r4, #40]	; 0x28
   14874:	add	r3, r4, #8
   14878:	str	r3, [sp, #8]
   1487c:	str	r2, [sp, #12]
   14880:	ldr	r2, [r4, #4]
   14884:	mov	r5, r0
   14888:	str	r2, [sp, #4]
   1488c:	ldr	ip, [r4]
   14890:	mov	r3, sl
   14894:	mov	r2, r9
   14898:	mov	r0, r7
   1489c:	str	ip, [sp]
   148a0:	bl	12d88 <__assert_fail@plt+0x1b40>
   148a4:	str	r6, [r5]
   148a8:	add	sp, sp, #24
   148ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148b0:			; <UNDEFINED> instruction: 0x0002b2b0
   148b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b8:	cmp	r3, #0
   148bc:	sub	sp, sp, #44	; 0x2c
   148c0:	ldr	r4, [pc, #192]	; 14988 <__assert_fail@plt+0x3740>
   148c4:	mov	r6, r2
   148c8:	movne	r4, r3
   148cc:	mov	r9, r1
   148d0:	mov	r8, r0
   148d4:	bl	1111c <__errno_location@plt>
   148d8:	ldr	r3, [r4, #44]	; 0x2c
   148dc:	ldr	r5, [r4, #4]
   148e0:	add	sl, r4, #8
   148e4:	cmp	r6, #0
   148e8:	orreq	r5, r5, #1
   148ec:	mov	r1, #0
   148f0:	ldr	r2, [r0]
   148f4:	str	r3, [sp, #16]
   148f8:	ldr	r3, [r4, #40]	; 0x28
   148fc:	stmib	sp, {r5, sl}
   14900:	str	r3, [sp, #12]
   14904:	ldr	r3, [r4]
   14908:	mov	r7, r0
   1490c:	str	r2, [sp, #28]
   14910:	str	r3, [sp]
   14914:	mov	r2, r8
   14918:	mov	r3, r9
   1491c:	mov	r0, r1
   14920:	bl	12d88 <__assert_fail@plt+0x1b40>
   14924:	add	r1, r0, #1
   14928:	mov	fp, r0
   1492c:	mov	r0, r1
   14930:	str	r1, [sp, #36]	; 0x24
   14934:	bl	153a0 <__assert_fail@plt+0x4158>
   14938:	ldr	r3, [r4, #44]	; 0x2c
   1493c:	mov	r2, r8
   14940:	str	r3, [sp, #16]
   14944:	ldr	r3, [r4, #40]	; 0x28
   14948:	str	r5, [sp, #4]
   1494c:	str	r3, [sp, #12]
   14950:	str	sl, [sp, #8]
   14954:	ldr	ip, [r4]
   14958:	ldr	r1, [sp, #36]	; 0x24
   1495c:	mov	r3, r9
   14960:	str	ip, [sp]
   14964:	str	r0, [sp, #32]
   14968:	bl	12d88 <__assert_fail@plt+0x1b40>
   1496c:	ldr	r2, [sp, #28]
   14970:	cmp	r6, #0
   14974:	str	r2, [r7]
   14978:	ldr	r0, [sp, #32]
   1497c:	strne	fp, [r6]
   14980:	add	sp, sp, #44	; 0x2c
   14984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14988:			; <UNDEFINED> instruction: 0x0002b2b0
   1498c:	mov	r3, r2
   14990:	mov	r2, #0
   14994:	b	148b4 <__assert_fail@plt+0x366c>
   14998:	push	{r4, r5, r6, r7, r8, lr}
   1499c:	ldr	r6, [pc, #112]	; 14a14 <__assert_fail@plt+0x37cc>
   149a0:	ldr	r3, [r6, #4]
   149a4:	ldr	r7, [r6]
   149a8:	cmp	r3, #1
   149ac:	ble	149d0 <__assert_fail@plt+0x3788>
   149b0:	sub	r5, r7, #8
   149b4:	add	r5, r5, r3, lsl #3
   149b8:	mov	r4, r7
   149bc:	ldr	r0, [r4, #12]
   149c0:	add	r4, r4, #8
   149c4:	bl	10fc0 <free@plt>
   149c8:	cmp	r4, r5
   149cc:	bne	149bc <__assert_fail@plt+0x3774>
   149d0:	ldr	r0, [r7, #4]
   149d4:	ldr	r4, [pc, #60]	; 14a18 <__assert_fail@plt+0x37d0>
   149d8:	cmp	r0, r4
   149dc:	beq	149f0 <__assert_fail@plt+0x37a8>
   149e0:	bl	10fc0 <free@plt>
   149e4:	mov	r3, #256	; 0x100
   149e8:	str	r4, [r6, #12]
   149ec:	str	r3, [r6, #8]
   149f0:	ldr	r4, [pc, #36]	; 14a1c <__assert_fail@plt+0x37d4>
   149f4:	cmp	r7, r4
   149f8:	beq	14a08 <__assert_fail@plt+0x37c0>
   149fc:	mov	r0, r7
   14a00:	bl	10fc0 <free@plt>
   14a04:	str	r4, [r6]
   14a08:	mov	r3, #1
   14a0c:	str	r3, [r6, #4]
   14a10:	pop	{r4, r5, r6, r7, r8, pc}
   14a14:	andeq	fp, r2, ip, lsl r1
   14a18:			; <UNDEFINED> instruction: 0x0002b1b0
   14a1c:	andeq	fp, r2, r4, lsr #2
   14a20:	ldr	r3, [pc, #4]	; 14a2c <__assert_fail@plt+0x37e4>
   14a24:	mvn	r2, #0
   14a28:	b	145a0 <__assert_fail@plt+0x3358>
   14a2c:			; <UNDEFINED> instruction: 0x0002b2b0
   14a30:	ldr	r3, [pc]	; 14a38 <__assert_fail@plt+0x37f0>
   14a34:	b	145a0 <__assert_fail@plt+0x3358>
   14a38:			; <UNDEFINED> instruction: 0x0002b2b0
   14a3c:	mov	r1, r0
   14a40:	ldr	r3, [pc, #8]	; 14a50 <__assert_fail@plt+0x3808>
   14a44:	mvn	r2, #0
   14a48:	mov	r0, #0
   14a4c:	b	145a0 <__assert_fail@plt+0x3358>
   14a50:			; <UNDEFINED> instruction: 0x0002b2b0
   14a54:	mov	r2, r1
   14a58:	ldr	r3, [pc, #8]	; 14a68 <__assert_fail@plt+0x3820>
   14a5c:	mov	r1, r0
   14a60:	mov	r0, #0
   14a64:	b	145a0 <__assert_fail@plt+0x3358>
   14a68:			; <UNDEFINED> instruction: 0x0002b2b0
   14a6c:	push	{r4, r5, r6, lr}
   14a70:	sub	sp, sp, #56	; 0x38
   14a74:	ldr	r4, [pc, #68]	; 14ac0 <__assert_fail@plt+0x3878>
   14a78:	mov	r6, r2
   14a7c:	mov	r5, r0
   14a80:	ldr	r3, [r4]
   14a84:	add	r0, sp, #4
   14a88:	str	r3, [sp, #52]	; 0x34
   14a8c:	bl	12c18 <__assert_fail@plt+0x19d0>
   14a90:	add	r3, sp, #4
   14a94:	mvn	r2, #0
   14a98:	mov	r1, r6
   14a9c:	mov	r0, r5
   14aa0:	bl	145a0 <__assert_fail@plt+0x3358>
   14aa4:	ldr	r2, [sp, #52]	; 0x34
   14aa8:	ldr	r3, [r4]
   14aac:	cmp	r2, r3
   14ab0:	bne	14abc <__assert_fail@plt+0x3874>
   14ab4:	add	sp, sp, #56	; 0x38
   14ab8:	pop	{r4, r5, r6, pc}
   14abc:	bl	11008 <__stack_chk_fail@plt>
   14ac0:	andeq	sl, r2, r8, lsl #30
   14ac4:	push	{r4, r5, r6, r7, lr}
   14ac8:	sub	sp, sp, #60	; 0x3c
   14acc:	ldr	r4, [pc, #72]	; 14b1c <__assert_fail@plt+0x38d4>
   14ad0:	mov	r6, r2
   14ad4:	mov	r7, r3
   14ad8:	ldr	ip, [r4]
   14adc:	mov	r5, r0
   14ae0:	add	r0, sp, #4
   14ae4:	str	ip, [sp, #52]	; 0x34
   14ae8:	bl	12c18 <__assert_fail@plt+0x19d0>
   14aec:	add	r3, sp, #4
   14af0:	mov	r2, r7
   14af4:	mov	r1, r6
   14af8:	mov	r0, r5
   14afc:	bl	145a0 <__assert_fail@plt+0x3358>
   14b00:	ldr	r2, [sp, #52]	; 0x34
   14b04:	ldr	r3, [r4]
   14b08:	cmp	r2, r3
   14b0c:	bne	14b18 <__assert_fail@plt+0x38d0>
   14b10:	add	sp, sp, #60	; 0x3c
   14b14:	pop	{r4, r5, r6, r7, pc}
   14b18:	bl	11008 <__stack_chk_fail@plt>
   14b1c:	andeq	sl, r2, r8, lsl #30
   14b20:	mov	r2, r1
   14b24:	mov	r1, r0
   14b28:	mov	r0, #0
   14b2c:	b	14a6c <__assert_fail@plt+0x3824>
   14b30:	mov	r3, r2
   14b34:	mov	r2, r1
   14b38:	mov	r1, r0
   14b3c:	mov	r0, #0
   14b40:	b	14ac4 <__assert_fail@plt+0x387c>
   14b44:	push	{r4, r5, r6, r7, r8, r9, lr}
   14b48:	mov	r4, r2
   14b4c:	ldr	lr, [pc, #128]	; 14bd4 <__assert_fail@plt+0x398c>
   14b50:	mov	r8, r0
   14b54:	mov	r9, r1
   14b58:	ldm	lr!, {r0, r1, r2, r3}
   14b5c:	sub	sp, sp, #60	; 0x3c
   14b60:	add	ip, sp, #4
   14b64:	lsr	r6, r4, #5
   14b68:	stmia	ip!, {r0, r1, r2, r3}
   14b6c:	add	r7, sp, #12
   14b70:	ldm	lr!, {r0, r1, r2, r3}
   14b74:	and	r4, r4, #31
   14b78:	ldr	r5, [pc, #88]	; 14bd8 <__assert_fail@plt+0x3990>
   14b7c:	stmia	ip!, {r0, r1, r2, r3}
   14b80:	ldm	lr, {r0, r1, r2, r3}
   14b84:	stm	ip, {r0, r1, r2, r3}
   14b88:	mov	r2, r9
   14b8c:	ldr	r3, [r7, r6, lsl #2]
   14b90:	ldr	ip, [r5]
   14b94:	mov	r1, r8
   14b98:	mvn	r0, r3, lsr r4
   14b9c:	and	r0, r0, #1
   14ba0:	str	ip, [sp, #52]	; 0x34
   14ba4:	eor	r4, r3, r0, lsl r4
   14ba8:	add	r3, sp, #4
   14bac:	mov	r0, #0
   14bb0:	str	r4, [r7, r6, lsl #2]
   14bb4:	bl	145a0 <__assert_fail@plt+0x3358>
   14bb8:	ldr	r2, [sp, #52]	; 0x34
   14bbc:	ldr	r3, [r5]
   14bc0:	cmp	r2, r3
   14bc4:	bne	14bd0 <__assert_fail@plt+0x3988>
   14bc8:	add	sp, sp, #60	; 0x3c
   14bcc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14bd0:	bl	11008 <__stack_chk_fail@plt>
   14bd4:			; <UNDEFINED> instruction: 0x0002b2b0
   14bd8:	andeq	sl, r2, r8, lsl #30
   14bdc:	mov	r2, r1
   14be0:	mvn	r1, #0
   14be4:	b	14b44 <__assert_fail@plt+0x38fc>
   14be8:	mov	r2, #58	; 0x3a
   14bec:	mvn	r1, #0
   14bf0:	b	14b44 <__assert_fail@plt+0x38fc>
   14bf4:	mov	r2, #58	; 0x3a
   14bf8:	b	14b44 <__assert_fail@plt+0x38fc>
   14bfc:	push	{r4, r5, r6, r7, r8, lr}
   14c00:	sub	sp, sp, #104	; 0x68
   14c04:	ldr	r5, [pc, #120]	; 14c84 <__assert_fail@plt+0x3a3c>
   14c08:	mov	r6, r0
   14c0c:	mov	r0, sp
   14c10:	ldr	r3, [r5]
   14c14:	mov	r7, r2
   14c18:	str	r3, [sp, #100]	; 0x64
   14c1c:	bl	12c18 <__assert_fail@plt+0x19d0>
   14c20:	mov	ip, sp
   14c24:	add	lr, sp, #52	; 0x34
   14c28:	ldm	ip!, {r0, r1, r2, r3}
   14c2c:	stmia	lr!, {r0, r1, r2, r3}
   14c30:	ldm	ip!, {r0, r1, r2, r3}
   14c34:	ldr	r8, [sp, #64]	; 0x40
   14c38:	stmia	lr!, {r0, r1, r2, r3}
   14c3c:	mvn	r4, r8
   14c40:	ldm	ip, {r0, r1, r2, r3}
   14c44:	and	ip, r4, #67108864	; 0x4000000
   14c48:	eor	ip, ip, r8
   14c4c:	str	ip, [sp, #64]	; 0x40
   14c50:	stm	lr, {r0, r1, r2, r3}
   14c54:	add	r3, sp, #52	; 0x34
   14c58:	mvn	r2, #0
   14c5c:	mov	r1, r7
   14c60:	mov	r0, r6
   14c64:	bl	145a0 <__assert_fail@plt+0x3358>
   14c68:	ldr	r2, [sp, #100]	; 0x64
   14c6c:	ldr	r3, [r5]
   14c70:	cmp	r2, r3
   14c74:	bne	14c80 <__assert_fail@plt+0x3a38>
   14c78:	add	sp, sp, #104	; 0x68
   14c7c:	pop	{r4, r5, r6, r7, r8, pc}
   14c80:	bl	11008 <__stack_chk_fail@plt>
   14c84:	andeq	sl, r2, r8, lsl #30
   14c88:	push	{r4, r5, r6, r7, r8, r9, lr}
   14c8c:	mov	r6, r1
   14c90:	ldr	lr, [pc, #132]	; 14d1c <__assert_fail@plt+0x3ad4>
   14c94:	mov	r5, r2
   14c98:	mov	r8, r0
   14c9c:	mov	r9, r3
   14ca0:	ldm	lr!, {r0, r1, r2, r3}
   14ca4:	sub	sp, sp, #60	; 0x3c
   14ca8:	add	ip, sp, #4
   14cac:	ldr	r4, [pc, #108]	; 14d20 <__assert_fail@plt+0x3ad8>
   14cb0:	stmia	ip!, {r0, r1, r2, r3}
   14cb4:	mov	r7, #10
   14cb8:	ldm	lr!, {r0, r1, r2, r3}
   14cbc:	cmp	r5, #0
   14cc0:	cmpne	r6, #0
   14cc4:	str	r7, [sp, #4]
   14cc8:	stmia	ip!, {r0, r1, r2, r3}
   14ccc:	ldm	lr, {r0, r1, r2, r3}
   14cd0:	ldr	lr, [r4]
   14cd4:	stm	ip, {r0, r1, r2, r3}
   14cd8:	str	lr, [sp, #52]	; 0x34
   14cdc:	beq	14d18 <__assert_fail@plt+0x3ad0>
   14ce0:	add	r3, sp, #4
   14ce4:	ldr	r2, [sp, #88]	; 0x58
   14ce8:	mov	r1, r9
   14cec:	mov	r0, r8
   14cf0:	str	r6, [sp, #44]	; 0x2c
   14cf4:	str	r5, [sp, #48]	; 0x30
   14cf8:	bl	145a0 <__assert_fail@plt+0x3358>
   14cfc:	ldr	r2, [sp, #52]	; 0x34
   14d00:	ldr	r3, [r4]
   14d04:	cmp	r2, r3
   14d08:	bne	14d14 <__assert_fail@plt+0x3acc>
   14d0c:	add	sp, sp, #60	; 0x3c
   14d10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d14:	bl	11008 <__stack_chk_fail@plt>
   14d18:	bl	11218 <abort@plt>
   14d1c:			; <UNDEFINED> instruction: 0x0002b2b0
   14d20:	andeq	sl, r2, r8, lsl #30
   14d24:	push	{lr}		; (str lr, [sp, #-4]!)
   14d28:	sub	sp, sp, #12
   14d2c:	mvn	ip, #0
   14d30:	str	ip, [sp]
   14d34:	bl	14c88 <__assert_fail@plt+0x3a40>
   14d38:	add	sp, sp, #12
   14d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d40:	push	{lr}		; (str lr, [sp, #-4]!)
   14d44:	sub	sp, sp, #12
   14d48:	mvn	ip, #0
   14d4c:	mov	r3, r2
   14d50:	str	ip, [sp]
   14d54:	mov	r2, r1
   14d58:	mov	r1, r0
   14d5c:	mov	r0, #0
   14d60:	bl	14c88 <__assert_fail@plt+0x3a40>
   14d64:	add	sp, sp, #12
   14d68:	pop	{pc}		; (ldr pc, [sp], #4)
   14d6c:	push	{lr}		; (str lr, [sp, #-4]!)
   14d70:	sub	sp, sp, #12
   14d74:	str	r3, [sp]
   14d78:	mov	r3, r2
   14d7c:	mov	r2, r1
   14d80:	mov	r1, r0
   14d84:	mov	r0, #0
   14d88:	bl	14c88 <__assert_fail@plt+0x3a40>
   14d8c:	add	sp, sp, #12
   14d90:	pop	{pc}		; (ldr pc, [sp], #4)
   14d94:	ldr	r3, [pc]	; 14d9c <__assert_fail@plt+0x3b54>
   14d98:	b	145a0 <__assert_fail@plt+0x3358>
   14d9c:	andeq	fp, r2, ip, lsr #2
   14da0:	mov	r2, r1
   14da4:	ldr	r3, [pc, #8]	; 14db4 <__assert_fail@plt+0x3b6c>
   14da8:	mov	r1, r0
   14dac:	mov	r0, #0
   14db0:	b	145a0 <__assert_fail@plt+0x3358>
   14db4:	andeq	fp, r2, ip, lsr #2
   14db8:	ldr	r3, [pc, #4]	; 14dc4 <__assert_fail@plt+0x3b7c>
   14dbc:	mvn	r2, #0
   14dc0:	b	145a0 <__assert_fail@plt+0x3358>
   14dc4:	andeq	fp, r2, ip, lsr #2
   14dc8:	mov	r1, r0
   14dcc:	ldr	r3, [pc, #8]	; 14ddc <__assert_fail@plt+0x3b94>
   14dd0:	mvn	r2, #0
   14dd4:	mov	r0, #0
   14dd8:	b	145a0 <__assert_fail@plt+0x3358>
   14ddc:	andeq	fp, r2, ip, lsr #2
   14de0:	push	{r4, r5, lr}
   14de4:	sub	sp, sp, #116	; 0x74
   14de8:	ldr	r5, [pc, #80]	; 14e40 <__assert_fail@plt+0x3bf8>
   14dec:	mov	r4, r0
   14df0:	mov	r2, sp
   14df4:	ldr	r3, [r5]
   14df8:	ldr	r1, [pc, #68]	; 14e44 <__assert_fail@plt+0x3bfc>
   14dfc:	mov	r0, #3
   14e00:	str	r3, [sp, #108]	; 0x6c
   14e04:	bl	11230 <__lxstat64@plt>
   14e08:	cmp	r0, #0
   14e0c:	movne	r0, #0
   14e10:	ldrdeq	r2, [sp]
   14e14:	ldrdeq	r0, [sp, #96]	; 0x60
   14e18:	strdeq	r2, [r4, #8]
   14e1c:	ldr	r2, [sp, #108]	; 0x6c
   14e20:	ldr	r3, [r5]
   14e24:	strdeq	r0, [r4]
   14e28:	moveq	r0, r4
   14e2c:	cmp	r2, r3
   14e30:	bne	14e3c <__assert_fail@plt+0x3bf4>
   14e34:	add	sp, sp, #116	; 0x74
   14e38:	pop	{r4, r5, pc}
   14e3c:	bl	11008 <__stack_chk_fail@plt>
   14e40:	andeq	sl, r2, r8, lsl #30
   14e44:	andeq	r9, r1, r8, lsl ip
   14e48:	push	{r4, r5, r6, lr}
   14e4c:	sub	sp, sp, #32
   14e50:	cmp	r1, #0
   14e54:	mov	r5, r0
   14e58:	ldr	r4, [sp, #48]	; 0x30
   14e5c:	ldr	r6, [sp, #52]	; 0x34
   14e60:	beq	14ef0 <__assert_fail@plt+0x3ca8>
   14e64:	strd	r2, [sp]
   14e68:	mov	r3, r1
   14e6c:	ldr	r2, [pc, #828]	; 151b0 <__assert_fail@plt+0x3f68>
   14e70:	mov	r1, #1
   14e74:	bl	11158 <__fprintf_chk@plt>
   14e78:	mov	r2, #5
   14e7c:	ldr	r1, [pc, #816]	; 151b4 <__assert_fail@plt+0x3f6c>
   14e80:	mov	r0, #0
   14e84:	bl	10ffc <dcgettext@plt>
   14e88:	ldr	r3, [pc, #808]	; 151b8 <__assert_fail@plt+0x3f70>
   14e8c:	ldr	r2, [pc, #808]	; 151bc <__assert_fail@plt+0x3f74>
   14e90:	str	r3, [sp]
   14e94:	mov	r1, #1
   14e98:	mov	r3, r0
   14e9c:	mov	r0, r5
   14ea0:	bl	11158 <__fprintf_chk@plt>
   14ea4:	ldr	r1, [pc, #788]	; 151c0 <__assert_fail@plt+0x3f78>
   14ea8:	mov	r2, #5
   14eac:	mov	r0, #0
   14eb0:	bl	10ffc <dcgettext@plt>
   14eb4:	mov	r1, r5
   14eb8:	bl	10f84 <fputs_unlocked@plt>
   14ebc:	cmp	r6, #9
   14ec0:	ldrls	pc, [pc, r6, lsl #2]
   14ec4:	b	151a0 <__assert_fail@plt+0x3f58>
   14ec8:	andeq	r5, r1, ip, lsr #3
   14ecc:	andeq	r4, r1, r4, ror pc
   14ed0:	andeq	r4, r1, r0, lsr #31
   14ed4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ed8:	andeq	r5, r1, r0, lsl r0
   14edc:	andeq	r5, r1, r0, asr r0
   14ee0:	muleq	r1, r8, r0
   14ee4:	andeq	r5, r1, r8, ror #1
   14ee8:	andeq	r5, r1, r0, asr #2
   14eec:	andeq	r4, r1, r8, lsl #30
   14ef0:	str	r3, [sp]
   14ef4:	mov	r1, #1
   14ef8:	mov	r3, r2
   14efc:	ldr	r2, [pc, #704]	; 151c4 <__assert_fail@plt+0x3f7c>
   14f00:	bl	11158 <__fprintf_chk@plt>
   14f04:	b	14e78 <__assert_fail@plt+0x3c30>
   14f08:	ldr	r1, [pc, #696]	; 151c8 <__assert_fail@plt+0x3f80>
   14f0c:	mov	r2, #5
   14f10:	mov	r0, #0
   14f14:	bl	10ffc <dcgettext@plt>
   14f18:	ldr	r2, [r4, #32]
   14f1c:	ldr	r3, [r4, #28]
   14f20:	ldr	r1, [r4, #24]
   14f24:	str	r2, [sp, #28]
   14f28:	ldr	r2, [r4, #20]
   14f2c:	str	r3, [sp, #24]
   14f30:	ldr	r3, [r4, #16]
   14f34:	str	r1, [sp, #20]
   14f38:	ldr	r1, [r4, #12]
   14f3c:	str	r2, [sp, #16]
   14f40:	ldr	r2, [r4, #8]
   14f44:	str	r3, [sp, #12]
   14f48:	ldr	r3, [r4, #4]
   14f4c:	str	r1, [sp, #8]
   14f50:	str	r2, [sp, #4]
   14f54:	str	r3, [sp]
   14f58:	mov	r1, #1
   14f5c:	ldr	r3, [r4]
   14f60:	mov	r2, r0
   14f64:	mov	r0, r5
   14f68:	bl	11158 <__fprintf_chk@plt>
   14f6c:	add	sp, sp, #32
   14f70:	pop	{r4, r5, r6, pc}
   14f74:	mov	r2, #5
   14f78:	ldr	r1, [pc, #588]	; 151cc <__assert_fail@plt+0x3f84>
   14f7c:	mov	r0, #0
   14f80:	bl	10ffc <dcgettext@plt>
   14f84:	ldr	r3, [r4]
   14f88:	mov	r1, #1
   14f8c:	mov	r2, r0
   14f90:	mov	r0, r5
   14f94:	add	sp, sp, #32
   14f98:	pop	{r4, r5, r6, lr}
   14f9c:	b	11158 <__fprintf_chk@plt>
   14fa0:	mov	r2, #5
   14fa4:	ldr	r1, [pc, #548]	; 151d0 <__assert_fail@plt+0x3f88>
   14fa8:	mov	r0, #0
   14fac:	bl	10ffc <dcgettext@plt>
   14fb0:	ldr	r2, [r4, #4]
   14fb4:	ldr	r3, [r4]
   14fb8:	mov	r1, #1
   14fbc:	str	r2, [sp, #48]	; 0x30
   14fc0:	mov	r2, r0
   14fc4:	mov	r0, r5
   14fc8:	add	sp, sp, #32
   14fcc:	pop	{r4, r5, r6, lr}
   14fd0:	b	11158 <__fprintf_chk@plt>
   14fd4:	mov	r2, #5
   14fd8:	ldr	r1, [pc, #500]	; 151d4 <__assert_fail@plt+0x3f8c>
   14fdc:	mov	r0, #0
   14fe0:	bl	10ffc <dcgettext@plt>
   14fe4:	ldr	r2, [r4, #8]
   14fe8:	ldr	r3, [r4, #4]
   14fec:	mov	r1, #1
   14ff0:	str	r2, [sp, #52]	; 0x34
   14ff4:	str	r3, [sp, #48]	; 0x30
   14ff8:	ldr	r3, [r4]
   14ffc:	mov	r2, r0
   15000:	mov	r0, r5
   15004:	add	sp, sp, #32
   15008:	pop	{r4, r5, r6, lr}
   1500c:	b	11158 <__fprintf_chk@plt>
   15010:	mov	r2, #5
   15014:	ldr	r1, [pc, #444]	; 151d8 <__assert_fail@plt+0x3f90>
   15018:	mov	r0, #0
   1501c:	bl	10ffc <dcgettext@plt>
   15020:	ldr	r1, [r4, #12]
   15024:	ldr	r2, [r4, #8]
   15028:	ldr	r3, [r4, #4]
   1502c:	str	r1, [sp, #8]
   15030:	str	r2, [sp, #4]
   15034:	str	r3, [sp]
   15038:	mov	r1, #1
   1503c:	ldr	r3, [r4]
   15040:	mov	r2, r0
   15044:	mov	r0, r5
   15048:	bl	11158 <__fprintf_chk@plt>
   1504c:	b	14f6c <__assert_fail@plt+0x3d24>
   15050:	mov	r2, #5
   15054:	ldr	r1, [pc, #384]	; 151dc <__assert_fail@plt+0x3f94>
   15058:	mov	r0, #0
   1505c:	bl	10ffc <dcgettext@plt>
   15060:	ldr	r3, [r4, #16]
   15064:	ldr	r1, [r4, #12]
   15068:	ldr	r2, [r4, #8]
   1506c:	str	r3, [sp, #12]
   15070:	ldr	r3, [r4, #4]
   15074:	str	r1, [sp, #8]
   15078:	str	r2, [sp, #4]
   1507c:	str	r3, [sp]
   15080:	mov	r1, #1
   15084:	ldr	r3, [r4]
   15088:	mov	r2, r0
   1508c:	mov	r0, r5
   15090:	bl	11158 <__fprintf_chk@plt>
   15094:	b	14f6c <__assert_fail@plt+0x3d24>
   15098:	mov	r2, #5
   1509c:	ldr	r1, [pc, #316]	; 151e0 <__assert_fail@plt+0x3f98>
   150a0:	mov	r0, #0
   150a4:	bl	10ffc <dcgettext@plt>
   150a8:	ldr	r2, [r4, #20]
   150ac:	ldr	r3, [r4, #16]
   150b0:	ldr	r1, [r4, #12]
   150b4:	str	r2, [sp, #16]
   150b8:	ldr	r2, [r4, #8]
   150bc:	str	r3, [sp, #12]
   150c0:	ldr	r3, [r4, #4]
   150c4:	str	r1, [sp, #8]
   150c8:	str	r2, [sp, #4]
   150cc:	str	r3, [sp]
   150d0:	mov	r1, #1
   150d4:	ldr	r3, [r4]
   150d8:	mov	r2, r0
   150dc:	mov	r0, r5
   150e0:	bl	11158 <__fprintf_chk@plt>
   150e4:	b	14f6c <__assert_fail@plt+0x3d24>
   150e8:	mov	r2, #5
   150ec:	ldr	r1, [pc, #240]	; 151e4 <__assert_fail@plt+0x3f9c>
   150f0:	mov	r0, #0
   150f4:	bl	10ffc <dcgettext@plt>
   150f8:	ldr	r1, [r4, #24]
   150fc:	ldr	r2, [r4, #20]
   15100:	ldr	r3, [r4, #16]
   15104:	str	r1, [sp, #20]
   15108:	ldr	r1, [r4, #12]
   1510c:	str	r2, [sp, #16]
   15110:	ldr	r2, [r4, #8]
   15114:	str	r3, [sp, #12]
   15118:	ldr	r3, [r4, #4]
   1511c:	str	r1, [sp, #8]
   15120:	str	r2, [sp, #4]
   15124:	str	r3, [sp]
   15128:	mov	r1, #1
   1512c:	ldr	r3, [r4]
   15130:	mov	r2, r0
   15134:	mov	r0, r5
   15138:	bl	11158 <__fprintf_chk@plt>
   1513c:	b	14f6c <__assert_fail@plt+0x3d24>
   15140:	mov	r2, #5
   15144:	ldr	r1, [pc, #156]	; 151e8 <__assert_fail@plt+0x3fa0>
   15148:	mov	r0, #0
   1514c:	bl	10ffc <dcgettext@plt>
   15150:	ldr	r3, [r4, #28]
   15154:	ldr	r1, [r4, #24]
   15158:	ldr	r2, [r4, #20]
   1515c:	str	r3, [sp, #24]
   15160:	ldr	r3, [r4, #16]
   15164:	str	r1, [sp, #20]
   15168:	ldr	r1, [r4, #12]
   1516c:	str	r2, [sp, #16]
   15170:	ldr	r2, [r4, #8]
   15174:	str	r3, [sp, #12]
   15178:	ldr	r3, [r4, #4]
   1517c:	str	r1, [sp, #8]
   15180:	str	r2, [sp, #4]
   15184:	str	r3, [sp]
   15188:	mov	r1, #1
   1518c:	ldr	r3, [r4]
   15190:	mov	r2, r0
   15194:	mov	r0, r5
   15198:	bl	11158 <__fprintf_chk@plt>
   1519c:	b	14f6c <__assert_fail@plt+0x3d24>
   151a0:	mov	r2, #5
   151a4:	ldr	r1, [pc, #64]	; 151ec <__assert_fail@plt+0x3fa4>
   151a8:	b	14f10 <__assert_fail@plt+0x3cc8>
   151ac:	bl	11218 <abort@plt>
   151b0:	andeq	sl, r1, ip, lsr #2
   151b4:	andeq	sl, r1, r0, asr #2
   151b8:	andeq	r0, r0, r2, ror #15
   151bc:	andeq	sl, r1, r4, lsl r4
   151c0:	andeq	sl, r1, r4, asr #2
   151c4:	andeq	sl, r1, r8, lsr r1
   151c8:	andeq	sl, r1, ip, lsl r3
   151cc:	andeq	sl, r1, r0, lsl r2
   151d0:	andeq	sl, r1, r0, lsr #4
   151d4:	andeq	sl, r1, r8, lsr r2
   151d8:	andeq	sl, r1, r4, asr r2
   151dc:	andeq	sl, r1, r4, ror r2
   151e0:	muleq	r1, r8, r2
   151e4:	andeq	sl, r1, r0, asr #5
   151e8:	andeq	sl, r1, ip, ror #5
   151ec:	andeq	sl, r1, r0, asr r3
   151f0:	push	{r4, r5, lr}
   151f4:	sub	sp, sp, #12
   151f8:	ldr	r5, [sp, #24]
   151fc:	ldr	ip, [r5]
   15200:	cmp	ip, #0
   15204:	beq	15220 <__assert_fail@plt+0x3fd8>
   15208:	mov	lr, r5
   1520c:	mov	ip, #0
   15210:	ldr	r4, [lr, #4]!
   15214:	add	ip, ip, #1
   15218:	cmp	r4, #0
   1521c:	bne	15210 <__assert_fail@plt+0x3fc8>
   15220:	stm	sp, {r5, ip}
   15224:	bl	14e48 <__assert_fail@plt+0x3c00>
   15228:	add	sp, sp, #12
   1522c:	pop	{r4, r5, pc}
   15230:	push	{r4, r5, r6, lr}
   15234:	sub	sp, sp, #56	; 0x38
   15238:	ldr	r6, [pc, #88]	; 15298 <__assert_fail@plt+0x4050>
   1523c:	ldr	r5, [sp, #72]	; 0x48
   15240:	add	r4, sp, #8
   15244:	ldr	ip, [r6]
   15248:	str	ip, [sp, #52]	; 0x34
   1524c:	mov	ip, #0
   15250:	ldr	lr, [r5], #4
   15254:	cmp	lr, #0
   15258:	str	lr, [r4, #4]!
   1525c:	beq	1526c <__assert_fail@plt+0x4024>
   15260:	add	ip, ip, #1
   15264:	cmp	ip, #10
   15268:	bne	15250 <__assert_fail@plt+0x4008>
   1526c:	add	lr, sp, #12
   15270:	str	ip, [sp, #4]
   15274:	str	lr, [sp]
   15278:	bl	14e48 <__assert_fail@plt+0x3c00>
   1527c:	ldr	r2, [sp, #52]	; 0x34
   15280:	ldr	r3, [r6]
   15284:	cmp	r2, r3
   15288:	bne	15294 <__assert_fail@plt+0x404c>
   1528c:	add	sp, sp, #56	; 0x38
   15290:	pop	{r4, r5, r6, pc}
   15294:	bl	11008 <__stack_chk_fail@plt>
   15298:	andeq	sl, r2, r8, lsl #30
   1529c:	push	{r3}		; (str r3, [sp, #-4]!)
   152a0:	mov	ip, #0
   152a4:	push	{r4, r5, r6, lr}
   152a8:	sub	sp, sp, #60	; 0x3c
   152ac:	ldr	r6, [pc, #100]	; 15318 <__assert_fail@plt+0x40d0>
   152b0:	add	r5, sp, #8
   152b4:	add	r4, sp, #80	; 0x50
   152b8:	ldr	r3, [r6]
   152bc:	str	r4, [sp, #8]
   152c0:	str	r3, [sp, #52]	; 0x34
   152c4:	ldr	r3, [sp, #76]	; 0x4c
   152c8:	ldr	lr, [r4], #4
   152cc:	cmp	lr, #0
   152d0:	str	lr, [r5, #4]!
   152d4:	beq	152e4 <__assert_fail@plt+0x409c>
   152d8:	add	ip, ip, #1
   152dc:	cmp	ip, #10
   152e0:	bne	152c8 <__assert_fail@plt+0x4080>
   152e4:	add	lr, sp, #12
   152e8:	str	ip, [sp, #4]
   152ec:	str	lr, [sp]
   152f0:	bl	14e48 <__assert_fail@plt+0x3c00>
   152f4:	ldr	r2, [sp, #52]	; 0x34
   152f8:	ldr	r3, [r6]
   152fc:	cmp	r2, r3
   15300:	bne	15314 <__assert_fail@plt+0x40cc>
   15304:	add	sp, sp, #60	; 0x3c
   15308:	pop	{r4, r5, r6, lr}
   1530c:	add	sp, sp, #4
   15310:	bx	lr
   15314:	bl	11008 <__stack_chk_fail@plt>
   15318:	andeq	sl, r2, r8, lsl #30
   1531c:	push	{r4, lr}
   15320:	mov	r2, #5
   15324:	ldr	r1, [pc, #88]	; 15384 <__assert_fail@plt+0x413c>
   15328:	mov	r0, #0
   1532c:	bl	10ffc <dcgettext@plt>
   15330:	ldr	r2, [pc, #80]	; 15388 <__assert_fail@plt+0x4140>
   15334:	mov	r1, r0
   15338:	mov	r0, #1
   1533c:	bl	11140 <__printf_chk@plt>
   15340:	mov	r2, #5
   15344:	ldr	r1, [pc, #64]	; 1538c <__assert_fail@plt+0x4144>
   15348:	mov	r0, #0
   1534c:	bl	10ffc <dcgettext@plt>
   15350:	ldr	r3, [pc, #56]	; 15390 <__assert_fail@plt+0x4148>
   15354:	ldr	r2, [pc, #56]	; 15394 <__assert_fail@plt+0x414c>
   15358:	mov	r1, r0
   1535c:	mov	r0, #1
   15360:	bl	11140 <__printf_chk@plt>
   15364:	ldr	r1, [pc, #44]	; 15398 <__assert_fail@plt+0x4150>
   15368:	mov	r2, #5
   1536c:	mov	r0, #0
   15370:	bl	10ffc <dcgettext@plt>
   15374:	ldr	r3, [pc, #32]	; 1539c <__assert_fail@plt+0x4154>
   15378:	pop	{r4, lr}
   1537c:	ldr	r1, [r3]
   15380:	b	10f84 <fputs_unlocked@plt>
   15384:	andeq	sl, r1, ip, lsl #7
   15388:	andeq	sl, r1, r4, lsr #7
   1538c:			; <UNDEFINED> instruction: 0x0001a3bc
   15390:	andeq	r9, r1, ip, lsr sl
   15394:	andeq	r9, r1, r4, ror #20
   15398:	ldrdeq	sl, [r1], -r0
   1539c:	andeq	fp, r2, r4, ror r1
   153a0:	push	{r4, lr}
   153a4:	mov	r4, r0
   153a8:	bl	110a4 <malloc@plt>
   153ac:	adds	r4, r4, #0
   153b0:	movne	r4, #1
   153b4:	cmp	r0, #0
   153b8:	movne	r4, #0
   153bc:	cmp	r4, #0
   153c0:	popeq	{r4, pc}
   153c4:	bl	155e8 <__assert_fail@plt+0x43a0>
   153c8:	push	{r4, r5, r6, lr}
   153cc:	umull	r4, r5, r0, r1
   153d0:	adds	r3, r5, #0
   153d4:	movne	r3, #1
   153d8:	cmp	r4, #0
   153dc:	blt	153f4 <__assert_fail@plt+0x41ac>
   153e0:	cmp	r3, #0
   153e4:	bne	153f4 <__assert_fail@plt+0x41ac>
   153e8:	mul	r0, r1, r0
   153ec:	pop	{r4, r5, r6, lr}
   153f0:	b	153a0 <__assert_fail@plt+0x4158>
   153f4:	bl	155e8 <__assert_fail@plt+0x43a0>
   153f8:	b	153a0 <__assert_fail@plt+0x4158>
   153fc:	adds	r3, r0, #0
   15400:	movne	r3, #1
   15404:	cmp	r1, #0
   15408:	movne	r3, #0
   1540c:	cmp	r3, #0
   15410:	push	{r4, lr}
   15414:	bne	1543c <__assert_fail@plt+0x41f4>
   15418:	mov	r4, r1
   1541c:	bl	11014 <realloc@plt>
   15420:	adds	r4, r4, #0
   15424:	movne	r4, #1
   15428:	cmp	r0, #0
   1542c:	movne	r4, #0
   15430:	cmp	r4, #0
   15434:	popeq	{r4, pc}
   15438:	bl	155e8 <__assert_fail@plt+0x43a0>
   1543c:	bl	10fc0 <free@plt>
   15440:	mov	r0, #0
   15444:	pop	{r4, pc}
   15448:	push	{r4, r5, r6, lr}
   1544c:	umull	r4, r5, r1, r2
   15450:	adds	r3, r5, #0
   15454:	movne	r3, #1
   15458:	cmp	r4, #0
   1545c:	blt	15474 <__assert_fail@plt+0x422c>
   15460:	cmp	r3, #0
   15464:	bne	15474 <__assert_fail@plt+0x422c>
   15468:	mul	r1, r2, r1
   1546c:	pop	{r4, r5, r6, lr}
   15470:	b	153fc <__assert_fail@plt+0x41b4>
   15474:	bl	155e8 <__assert_fail@plt+0x43a0>
   15478:	push	{r4, r5, r6, r7, r8, lr}
   1547c:	subs	r7, r0, #0
   15480:	mov	r6, r1
   15484:	mov	r5, r2
   15488:	ldr	r4, [r1]
   1548c:	beq	154c0 <__assert_fail@plt+0x4278>
   15490:	mov	r1, r2
   15494:	ldr	r0, [pc, #104]	; 15504 <__assert_fail@plt+0x42bc>
   15498:	bl	19188 <fts_children@@Base+0x194c>
   1549c:	cmp	r0, r4
   154a0:	bls	154e4 <__assert_fail@plt+0x429c>
   154a4:	add	r3, r4, #1
   154a8:	add	r4, r3, r4, lsr #1
   154ac:	str	r4, [r6]
   154b0:	mul	r1, r5, r4
   154b4:	mov	r0, r7
   154b8:	pop	{r4, r5, r6, r7, r8, lr}
   154bc:	b	153fc <__assert_fail@plt+0x41b4>
   154c0:	cmp	r4, #0
   154c4:	beq	154e8 <__assert_fail@plt+0x42a0>
   154c8:	umull	r0, r1, r4, r5
   154cc:	adds	r3, r1, #0
   154d0:	movne	r3, #1
   154d4:	cmp	r0, #0
   154d8:	blt	154e4 <__assert_fail@plt+0x429c>
   154dc:	cmp	r3, #0
   154e0:	beq	154ac <__assert_fail@plt+0x4264>
   154e4:	bl	155e8 <__assert_fail@plt+0x43a0>
   154e8:	mov	r1, r2
   154ec:	mov	r0, #64	; 0x40
   154f0:	bl	19188 <fts_children@@Base+0x194c>
   154f4:	cmp	r5, #64	; 0x40
   154f8:	movls	r4, r0
   154fc:	addhi	r4, r0, #1
   15500:	b	154c8 <__assert_fail@plt+0x4280>
   15504:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15508:	cmp	r0, #0
   1550c:	ldr	r3, [r1]
   15510:	beq	15534 <__assert_fail@plt+0x42ec>
   15514:	ldr	r2, [pc, #60]	; 15558 <__assert_fail@plt+0x4310>
   15518:	cmp	r3, r2
   1551c:	bhi	15550 <__assert_fail@plt+0x4308>
   15520:	add	r2, r3, #1
   15524:	add	r3, r2, r3, lsr #1
   15528:	str	r3, [r1]
   1552c:	mov	r1, r3
   15530:	b	153fc <__assert_fail@plt+0x41b4>
   15534:	cmp	r3, #0
   15538:	bne	1554c <__assert_fail@plt+0x4304>
   1553c:	mov	r3, #64	; 0x40
   15540:	str	r3, [r1]
   15544:	mov	r1, r3
   15548:	b	153fc <__assert_fail@plt+0x41b4>
   1554c:	bge	15528 <__assert_fail@plt+0x42e0>
   15550:	push	{r4, lr}
   15554:	bl	155e8 <__assert_fail@plt+0x43a0>
   15558:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1555c:	push	{r4, lr}
   15560:	mov	r4, r0
   15564:	bl	153a0 <__assert_fail@plt+0x4158>
   15568:	mov	r2, r4
   1556c:	mov	r1, #0
   15570:	pop	{r4, lr}
   15574:	b	11134 <memset@plt>
   15578:	push	{r4, r5, r6, lr}
   1557c:	umull	r4, r5, r0, r1
   15580:	adds	r3, r5, #0
   15584:	movne	r3, #1
   15588:	cmp	r4, #0
   1558c:	blt	155a4 <__assert_fail@plt+0x435c>
   15590:	cmp	r3, #0
   15594:	bne	155a4 <__assert_fail@plt+0x435c>
   15598:	bl	10f78 <calloc@plt>
   1559c:	cmp	r0, #0
   155a0:	popne	{r4, r5, r6, pc}
   155a4:	bl	155e8 <__assert_fail@plt+0x43a0>
   155a8:	push	{r4, r5, r6, lr}
   155ac:	mov	r4, r1
   155b0:	mov	r5, r0
   155b4:	mov	r0, r1
   155b8:	bl	153a0 <__assert_fail@plt+0x4158>
   155bc:	mov	r2, r4
   155c0:	mov	r1, r5
   155c4:	pop	{r4, r5, r6, lr}
   155c8:	b	10fd8 <memcpy@plt>
   155cc:	push	{r4, lr}
   155d0:	mov	r4, r0
   155d4:	bl	110f8 <strlen@plt>
   155d8:	add	r1, r0, #1
   155dc:	mov	r0, r4
   155e0:	pop	{r4, lr}
   155e4:	b	155a8 <__assert_fail@plt+0x4360>
   155e8:	ldr	r3, [pc, #44]	; 1561c <__assert_fail@plt+0x43d4>
   155ec:	push	{r4, lr}
   155f0:	mov	r2, #5
   155f4:	ldr	r1, [pc, #36]	; 15620 <__assert_fail@plt+0x43d8>
   155f8:	mov	r0, #0
   155fc:	ldr	r4, [r3]
   15600:	bl	10ffc <dcgettext@plt>
   15604:	ldr	r2, [pc, #24]	; 15624 <__assert_fail@plt+0x43dc>
   15608:	mov	r1, #0
   1560c:	mov	r3, r0
   15610:	mov	r0, r4
   15614:	bl	1108c <error@plt>
   15618:	bl	11218 <abort@plt>
   1561c:	andeq	fp, r2, r8, lsl r1
   15620:	andeq	sl, r1, r4, asr #8
   15624:	andeq	sl, r1, r0, lsl r0
   15628:	push	{r4, lr}
   1562c:	orr	r1, r1, #512	; 0x200
   15630:	bl	16ba4 <fts_open@@Base>
   15634:	cmp	r0, #0
   15638:	popne	{r4, pc}
   1563c:	bl	1111c <__errno_location@plt>
   15640:	ldr	r3, [r0]
   15644:	cmp	r3, #22
   15648:	beq	15650 <__assert_fail@plt+0x4408>
   1564c:	bl	155e8 <__assert_fail@plt+0x43a0>
   15650:	ldr	r3, [pc, #12]	; 15664 <__assert_fail@plt+0x441c>
   15654:	mov	r2, #41	; 0x29
   15658:	ldr	r1, [pc, #8]	; 15668 <__assert_fail@plt+0x4420>
   1565c:	ldr	r0, [pc, #8]	; 1566c <__assert_fail@plt+0x4424>
   15660:	bl	11248 <__assert_fail@plt>
   15664:	andeq	sl, r1, r8, asr r4
   15668:	andeq	sl, r1, r4, ror #8
   1566c:	andeq	sl, r1, r0, ror r4
   15670:	ldr	r3, [r0, #48]	; 0x30
   15674:	and	r3, r3, #17
   15678:	cmp	r3, #16
   1567c:	beq	156a0 <__assert_fail@plt+0x4458>
   15680:	cmp	r3, #17
   15684:	beq	15690 <__assert_fail@plt+0x4448>
   15688:	mov	r0, #0
   1568c:	bx	lr
   15690:	ldr	r0, [r1, #48]	; 0x30
   15694:	adds	r0, r0, #0
   15698:	movne	r0, #1
   1569c:	bx	lr
   156a0:	mov	r0, #1
   156a4:	bx	lr
   156a8:	ldrd	r2, [r1, #8]
   156ac:	push	{r4, r5}
   156b0:	ldrd	r4, [r0, #8]
   156b4:	cmp	r5, r3
   156b8:	cmpeq	r4, r2
   156bc:	movne	r0, #0
   156c0:	bne	156dc <__assert_fail@plt+0x4494>
   156c4:	ldrd	r4, [r0]
   156c8:	ldrd	r2, [r1]
   156cc:	cmp	r5, r3
   156d0:	cmpeq	r4, r2
   156d4:	moveq	r0, #1
   156d8:	movne	r0, #0
   156dc:	pop	{r4, r5}
   156e0:	bx	lr
   156e4:	push	{r4, lr}
   156e8:	mov	r2, r1
   156ec:	mov	r3, #0
   156f0:	ldrd	r0, [r0, #8]
   156f4:	bl	19394 <fts_children@@Base+0x1b58>
   156f8:	mov	r0, r2
   156fc:	pop	{r4, pc}
   15700:	push	{r4, lr}
   15704:	mov	r2, r1
   15708:	mov	r3, #0
   1570c:	ldrd	r0, [r0]
   15710:	bl	19394 <fts_children@@Base+0x1b58>
   15714:	mov	r0, r2
   15718:	pop	{r4, pc}
   1571c:	push	{r4, r5}
   15720:	ldrd	r2, [r1]
   15724:	ldrd	r4, [r0]
   15728:	cmp	r5, r3
   1572c:	cmpeq	r4, r2
   15730:	moveq	r0, #1
   15734:	movne	r0, #0
   15738:	pop	{r4, r5}
   1573c:	bx	lr
   15740:	ldr	r2, [r0]
   15744:	ldr	r3, [r1]
   15748:	ldrd	r0, [r2, #168]	; 0xa8
   1574c:	ldrd	r2, [r3, #168]	; 0xa8
   15750:	cmp	r1, r3
   15754:	cmpeq	r0, r2
   15758:	bcc	15768 <__assert_fail@plt+0x4520>
   1575c:	movhi	r0, #1
   15760:	movls	r0, #0
   15764:	bx	lr
   15768:	mvn	r0, #0
   1576c:	bx	lr
   15770:	ldr	r3, [r0, #40]	; 0x28
   15774:	push	{r4, r5, r6, r7, r8, lr}
   15778:	cmp	r3, r2
   1577c:	mov	r6, r0
   15780:	ldr	r7, [r0, #44]	; 0x2c
   15784:	mov	r5, r2
   15788:	mov	r4, r1
   1578c:	ldr	r0, [r0, #8]
   15790:	bcs	157b8 <__assert_fail@plt+0x4570>
   15794:	add	r1, r2, #40	; 0x28
   15798:	cmn	r1, #-1073741823	; 0xc0000001
   1579c:	str	r1, [r6, #40]	; 0x28
   157a0:	bhi	15830 <__assert_fail@plt+0x45e8>
   157a4:	lsl	r1, r1, #2
   157a8:	bl	11014 <realloc@plt>
   157ac:	cmp	r0, #0
   157b0:	strne	r0, [r6, #8]
   157b4:	beq	1582c <__assert_fail@plt+0x45e4>
   157b8:	cmp	r4, #0
   157bc:	movne	r2, r0
   157c0:	beq	157d4 <__assert_fail@plt+0x458c>
   157c4:	str	r4, [r2], #4
   157c8:	ldr	r4, [r4, #8]
   157cc:	cmp	r4, #0
   157d0:	bne	157c4 <__assert_fail@plt+0x457c>
   157d4:	mov	r3, r7
   157d8:	mov	r2, #4
   157dc:	mov	r1, r5
   157e0:	bl	111dc <qsort@plt>
   157e4:	ldr	lr, [r6, #8]
   157e8:	subs	r3, r5, #1
   157ec:	ldr	r0, [lr]
   157f0:	moveq	r2, r0
   157f4:	beq	15820 <__assert_fail@plt+0x45d8>
   157f8:	mov	ip, r0
   157fc:	mov	r2, lr
   15800:	b	15808 <__assert_fail@plt+0x45c0>
   15804:	ldr	ip, [r2]
   15808:	ldr	r1, [r2, #4]!
   1580c:	subs	r3, r3, #1
   15810:	str	r1, [ip, #8]
   15814:	bne	15804 <__assert_fail@plt+0x45bc>
   15818:	add	r5, lr, r5, lsl #2
   1581c:	ldr	r2, [r5, #-4]
   15820:	mov	r3, #0
   15824:	str	r3, [r2, #8]
   15828:	pop	{r4, r5, r6, r7, r8, pc}
   1582c:	ldr	r0, [r6, #8]
   15830:	bl	10fc0 <free@plt>
   15834:	mov	r3, #0
   15838:	mov	r0, r4
   1583c:	str	r3, [r6, #8]
   15840:	str	r3, [r6, #40]	; 0x28
   15844:	pop	{r4, r5, r6, r7, r8, pc}
   15848:	add	r3, r2, #184	; 0xb8
   1584c:	push	{r4, r5, r6, r7, r8, lr}
   15850:	mov	r6, r0
   15854:	bic	r0, r3, #7
   15858:	mov	r5, r2
   1585c:	mov	r7, r1
   15860:	bl	110a4 <malloc@plt>
   15864:	subs	r4, r0, #0
   15868:	beq	158b4 <__assert_fail@plt+0x466c>
   1586c:	mov	r1, r7
   15870:	mov	r2, r5
   15874:	add	r0, r4, #176	; 0xb0
   15878:	bl	10fd8 <memcpy@plt>
   1587c:	add	r0, r4, r5
   15880:	ldr	r1, [r6, #24]
   15884:	mov	r3, #0
   15888:	mov	r2, #3
   1588c:	strb	r3, [r0, #176]	; 0xb0
   15890:	str	r3, [r4, #32]
   15894:	str	r3, [r4, #12]
   15898:	strh	r3, [r4, #62]	; 0x3e
   1589c:	str	r3, [r4, #16]
   158a0:	str	r3, [r4, #20]
   158a4:	str	r5, [r4, #52]	; 0x34
   158a8:	str	r6, [r4, #44]	; 0x2c
   158ac:	str	r1, [r4, #28]
   158b0:	strh	r2, [r4, #64]	; 0x40
   158b4:	mov	r0, r4
   158b8:	pop	{r4, r5, r6, r7, r8, pc}
   158bc:	push	{r4, r5, r6, lr}
   158c0:	subs	r4, r0, #0
   158c4:	popeq	{r4, r5, r6, pc}
   158c8:	ldr	r3, [r4, #12]
   158cc:	ldr	r5, [r4, #8]
   158d0:	subs	r0, r3, #0
   158d4:	beq	158dc <__assert_fail@plt+0x4694>
   158d8:	bl	1123c <closedir@plt>
   158dc:	mov	r0, r4
   158e0:	bl	10fc0 <free@plt>
   158e4:	subs	r4, r5, #0
   158e8:	bne	158c8 <__assert_fail@plt+0x4680>
   158ec:	pop	{r4, r5, r6, pc}
   158f0:	push	{r4, lr}
   158f4:	mov	r4, r0
   158f8:	mov	r0, r4
   158fc:	bl	18d28 <fts_children@@Base+0x14ec>
   15900:	cmp	r0, #0
   15904:	mov	r0, r4
   15908:	popne	{r4, pc}
   1590c:	bl	18d74 <fts_children@@Base+0x1538>
   15910:	cmp	r0, #0
   15914:	blt	158f8 <__assert_fail@plt+0x46b0>
   15918:	bl	11224 <close@plt>
   1591c:	b	158f8 <__assert_fail@plt+0x46b0>
   15920:	push	{r4, r5, r6, r7, r8, lr}
   15924:	sub	sp, sp, #120	; 0x78
   15928:	ldr	r6, [r0, #44]	; 0x2c
   1592c:	ldr	r5, [pc, #272]	; 15a44 <__assert_fail@plt+0x47fc>
   15930:	ldr	r3, [r6, #48]	; 0x30
   15934:	ldr	r2, [r5]
   15938:	tst	r3, #512	; 0x200
   1593c:	str	r2, [sp, #116]	; 0x74
   15940:	beq	159c4 <__assert_fail@plt+0x477c>
   15944:	ldr	r4, [r6, #52]	; 0x34
   15948:	mov	r7, r0
   1594c:	cmp	r4, #0
   15950:	mov	r8, r1
   15954:	beq	1597c <__assert_fail@plt+0x4734>
   15958:	ldrd	r2, [r7, #72]	; 0x48
   1595c:	add	r1, sp, #8
   15960:	mov	r0, r4
   15964:	strd	r2, [sp, #8]
   15968:	bl	18298 <fts_children@@Base+0xa5c>
   1596c:	cmp	r0, #0
   15970:	beq	159a8 <__assert_fail@plt+0x4760>
   15974:	ldr	r6, [r0, #8]
   15978:	b	159c8 <__assert_fail@plt+0x4780>
   1597c:	ldr	r3, [pc, #196]	; 15a48 <__assert_fail@plt+0x4800>
   15980:	mov	r1, r4
   15984:	str	r3, [sp]
   15988:	ldr	r2, [pc, #188]	; 15a4c <__assert_fail@plt+0x4804>
   1598c:	ldr	r3, [pc, #188]	; 15a50 <__assert_fail@plt+0x4808>
   15990:	mov	r0, #13
   15994:	bl	18550 <fts_children@@Base+0xd14>
   15998:	cmp	r0, #0
   1599c:	mov	r4, r0
   159a0:	str	r0, [r6, #52]	; 0x34
   159a4:	bne	15958 <__assert_fail@plt+0x4710>
   159a8:	cmp	r8, #0
   159ac:	blt	159c4 <__assert_fail@plt+0x477c>
   159b0:	mov	r0, r8
   159b4:	add	r1, sp, #24
   159b8:	bl	10f6c <fstatfs64@plt>
   159bc:	cmp	r0, #0
   159c0:	beq	159e4 <__assert_fail@plt+0x479c>
   159c4:	mov	r6, #0
   159c8:	ldr	r2, [sp, #116]	; 0x74
   159cc:	ldr	r3, [r5]
   159d0:	mov	r0, r6
   159d4:	cmp	r2, r3
   159d8:	bne	15a3c <__assert_fail@plt+0x47f4>
   159dc:	add	sp, sp, #120	; 0x78
   159e0:	pop	{r4, r5, r6, r7, r8, pc}
   159e4:	cmp	r4, #0
   159e8:	ldr	r6, [sp, #24]
   159ec:	beq	159c8 <__assert_fail@plt+0x4780>
   159f0:	mov	r0, #16
   159f4:	bl	110a4 <malloc@plt>
   159f8:	subs	r8, r0, #0
   159fc:	beq	159c8 <__assert_fail@plt+0x4780>
   15a00:	ldrd	r2, [r7, #72]	; 0x48
   15a04:	str	r6, [r8, #8]
   15a08:	mov	r0, r4
   15a0c:	strd	r2, [r8]
   15a10:	mov	r1, r8
   15a14:	bl	18b7c <fts_children@@Base+0x1340>
   15a18:	cmp	r0, #0
   15a1c:	beq	15a30 <__assert_fail@plt+0x47e8>
   15a20:	cmp	r8, r0
   15a24:	bne	15a40 <__assert_fail@plt+0x47f8>
   15a28:	ldr	r6, [sp, #24]
   15a2c:	b	159c8 <__assert_fail@plt+0x4780>
   15a30:	mov	r0, r8
   15a34:	bl	10fc0 <free@plt>
   15a38:	b	15a28 <__assert_fail@plt+0x47e0>
   15a3c:	bl	11008 <__stack_chk_fail@plt>
   15a40:	bl	11218 <abort@plt>
   15a44:	andeq	sl, r2, r8, lsl #30
   15a48:	andeq	r0, r1, r0, asr #31
   15a4c:	andeq	r5, r1, r0, lsl #14
   15a50:	andeq	r5, r1, ip, lsl r7
   15a54:	push	{r4, lr}
   15a58:	bl	15920 <__assert_fail@plt+0x46d8>
   15a5c:	ldr	r3, [pc, #112]	; 15ad4 <__assert_fail@plt+0x488c>
   15a60:	cmp	r0, r3
   15a64:	beq	15ac4 <__assert_fail@plt+0x487c>
   15a68:	ble	15aa0 <__assert_fail@plt+0x4858>
   15a6c:	ldr	r3, [pc, #100]	; 15ad8 <__assert_fail@plt+0x4890>
   15a70:	cmp	r0, r3
   15a74:	beq	15ac4 <__assert_fail@plt+0x487c>
   15a78:	add	r3, r3, #83886080	; 0x5000000
   15a7c:	add	r3, r3, #4544	; 0x11c0
   15a80:	add	r3, r3, #51	; 0x33
   15a84:	cmp	r0, r3
   15a88:	beq	15acc <__assert_fail@plt+0x4884>
   15a8c:	ldr	r3, [pc, #72]	; 15adc <__assert_fail@plt+0x4894>
   15a90:	cmp	r0, r3
   15a94:	moveq	r0, #2
   15a98:	movne	r0, #1
   15a9c:	pop	{r4, pc}
   15aa0:	cmp	r0, #0
   15aa4:	popeq	{r4, pc}
   15aa8:	ldr	r3, [pc, #48]	; 15ae0 <__assert_fail@plt+0x4898>
   15aac:	cmp	r0, r3
   15ab0:	beq	15ac4 <__assert_fail@plt+0x487c>
   15ab4:	ldr	r3, [pc, #40]	; 15ae4 <__assert_fail@plt+0x489c>
   15ab8:	subs	r0, r0, r3
   15abc:	movne	r0, #1
   15ac0:	pop	{r4, pc}
   15ac4:	mov	r0, #0
   15ac8:	pop	{r4, pc}
   15acc:	mov	r0, #2
   15ad0:	pop	{r4, pc}
   15ad4:	andeq	r9, r0, r0, lsr #31
   15ad8:	movtpl	r4, #24911	; 0x614f
   15adc:	rsbpl	r4, r5, #1884160	; 0x1cc000
   15ae0:	andeq	r6, r0, r9, ror #18
   15ae4:			; <UNDEFINED> instruction: 0xff534d42
   15ae8:	push	{r4, r5, r6, lr}
   15aec:	mov	r5, r1
   15af0:	ldr	r1, [r0, #32]
   15af4:	cmn	r1, #100	; 0x64
   15af8:	sub	r3, r1, r5
   15afc:	clz	r3, r3
   15b00:	lsr	r3, r3, #5
   15b04:	moveq	r3, #0
   15b08:	cmp	r3, #0
   15b0c:	bne	15b6c <__assert_fail@plt+0x4924>
   15b10:	cmp	r2, #0
   15b14:	mov	r4, r0
   15b18:	bne	15b44 <__assert_fail@plt+0x48fc>
   15b1c:	ldr	r3, [r0, #48]	; 0x30
   15b20:	lsr	r3, r3, #2
   15b24:	eor	r3, r3, #1
   15b28:	cmp	r1, #0
   15b2c:	movlt	r3, #0
   15b30:	andge	r3, r3, #1
   15b34:	cmp	r3, #0
   15b38:	bne	15b60 <__assert_fail@plt+0x4918>
   15b3c:	str	r5, [r4, #32]
   15b40:	pop	{r4, r5, r6, pc}
   15b44:	add	r0, r0, #60	; 0x3c
   15b48:	bl	18d30 <fts_children@@Base+0x14f4>
   15b4c:	cmp	r0, #0
   15b50:	blt	15b3c <__assert_fail@plt+0x48f4>
   15b54:	bl	11224 <close@plt>
   15b58:	str	r5, [r4, #32]
   15b5c:	pop	{r4, r5, r6, pc}
   15b60:	mov	r0, r1
   15b64:	bl	11224 <close@plt>
   15b68:	b	15b58 <__assert_fail@plt+0x4910>
   15b6c:	bl	11218 <abort@plt>
   15b70:	ldr	r3, [r0, #48]	; 0x30
   15b74:	push	{r4, r5, r6, lr}
   15b78:	ands	r5, r3, #4
   15b7c:	mov	r4, r0
   15b80:	movne	r5, #0
   15b84:	bne	15b9c <__assert_fail@plt+0x4954>
   15b88:	tst	r3, #512	; 0x200
   15b8c:	beq	15bac <__assert_fail@plt+0x4964>
   15b90:	mov	r2, #1
   15b94:	mvn	r1, #99	; 0x63
   15b98:	bl	15ae8 <__assert_fail@plt+0x48a0>
   15b9c:	add	r0, r4, #60	; 0x3c
   15ba0:	bl	158f0 <__assert_fail@plt+0x46a8>
   15ba4:	mov	r0, r5
   15ba8:	pop	{r4, r5, r6, pc}
   15bac:	ldr	r0, [r0, #28]
   15bb0:	bl	111d0 <fchdir@plt>
   15bb4:	adds	r5, r0, #0
   15bb8:	movne	r5, #1
   15bbc:	b	15b9c <__assert_fail@plt+0x4954>
   15bc0:	push	{r4, r5, r6, lr}
   15bc4:	mov	r4, r2
   15bc8:	ldr	r2, [r2, #48]	; 0x30
   15bcc:	mov	r6, r1
   15bd0:	cmp	r2, #0
   15bd4:	ldr	ip, [r1]
   15bd8:	sub	sp, sp, #8
   15bdc:	add	r5, r4, #72	; 0x48
   15be0:	ldr	r1, [r4, #24]
   15be4:	bne	15c44 <__assert_fail@plt+0x49fc>
   15be8:	tst	ip, #1
   15bec:	beq	15c44 <__assert_fail@plt+0x49fc>
   15bf0:	mov	r2, r5
   15bf4:	mov	r0, #3
   15bf8:	bl	11200 <__xstat64@plt>
   15bfc:	cmp	r0, #0
   15c00:	beq	15c74 <__assert_fail@plt+0x4a2c>
   15c04:	bl	1111c <__errno_location@plt>
   15c08:	ldr	r3, [r0]
   15c0c:	mov	r6, r0
   15c10:	cmp	r3, #2
   15c14:	bne	15ca8 <__assert_fail@plt+0x4a60>
   15c18:	mov	r2, r5
   15c1c:	ldr	r1, [r4, #24]
   15c20:	mov	r0, #3
   15c24:	bl	11230 <__lxstat64@plt>
   15c28:	cmp	r0, #0
   15c2c:	ldrne	r3, [r6]
   15c30:	bne	15ca8 <__assert_fail@plt+0x4a60>
   15c34:	str	r0, [r6]
   15c38:	mov	r0, #13
   15c3c:	add	sp, sp, #8
   15c40:	pop	{r4, r5, r6, pc}
   15c44:	lsl	ip, ip, #30
   15c48:	orrs	r3, r3, ip, lsr #31
   15c4c:	bne	15bf0 <__assert_fail@plt+0x49a8>
   15c50:	mov	r3, #256	; 0x100
   15c54:	mov	r2, r1
   15c58:	str	r3, [sp]
   15c5c:	mov	r1, r0
   15c60:	mov	r3, r5
   15c64:	mov	r0, #3
   15c68:	bl	1102c <__fxstatat64@plt>
   15c6c:	cmp	r0, #0
   15c70:	bne	15ca0 <__assert_fail@plt+0x4a58>
   15c74:	ldr	r3, [r4, #88]	; 0x58
   15c78:	and	r3, r3, #61440	; 0xf000
   15c7c:	cmp	r3, #16384	; 0x4000
   15c80:	beq	15cc8 <__assert_fail@plt+0x4a80>
   15c84:	cmp	r3, #40960	; 0xa000
   15c88:	beq	15d44 <__assert_fail@plt+0x4afc>
   15c8c:	cmp	r3, #32768	; 0x8000
   15c90:	movne	r0, #3
   15c94:	moveq	r0, #8
   15c98:	add	sp, sp, #8
   15c9c:	pop	{r4, r5, r6, pc}
   15ca0:	bl	1111c <__errno_location@plt>
   15ca4:	ldr	r3, [r0]
   15ca8:	str	r3, [r4, #32]
   15cac:	mov	r0, r5
   15cb0:	mov	r2, #104	; 0x68
   15cb4:	mov	r1, #0
   15cb8:	bl	11134 <memset@plt>
   15cbc:	mov	r0, #10
   15cc0:	add	sp, sp, #8
   15cc4:	pop	{r4, r5, r6, pc}
   15cc8:	ldr	r3, [r4, #92]	; 0x5c
   15ccc:	cmp	r3, #1
   15cd0:	bls	15d3c <__assert_fail@plt+0x4af4>
   15cd4:	ldr	r2, [r4, #48]	; 0x30
   15cd8:	cmp	r2, #0
   15cdc:	ble	15d3c <__assert_fail@plt+0x4af4>
   15ce0:	ldr	r2, [r6]
   15ce4:	tst	r2, #32
   15ce8:	subeq	r3, r3, #2
   15cec:	ldrb	r2, [r4, #176]	; 0xb0
   15cf0:	str	r3, [r4, #56]	; 0x38
   15cf4:	cmp	r2, #46	; 0x2e
   15cf8:	bne	15d1c <__assert_fail@plt+0x4ad4>
   15cfc:	ldrb	r3, [r4, #177]	; 0xb1
   15d00:	cmp	r3, #0
   15d04:	beq	15d28 <__assert_fail@plt+0x4ae0>
   15d08:	ldr	r3, [r4, #176]	; 0xb0
   15d0c:	bic	r3, r3, #-16777216	; 0xff000000
   15d10:	bic	r3, r3, #255	; 0xff
   15d14:	cmp	r3, #11776	; 0x2e00
   15d18:	beq	15d28 <__assert_fail@plt+0x4ae0>
   15d1c:	mov	r0, #1
   15d20:	add	sp, sp, #8
   15d24:	pop	{r4, r5, r6, pc}
   15d28:	ldr	r3, [r4, #48]	; 0x30
   15d2c:	cmp	r3, #0
   15d30:	moveq	r0, #1
   15d34:	movne	r0, #5
   15d38:	b	15c98 <__assert_fail@plt+0x4a50>
   15d3c:	mvn	r3, #0
   15d40:	b	15cec <__assert_fail@plt+0x4aa4>
   15d44:	mov	r0, #12
   15d48:	b	15c98 <__assert_fail@plt+0x4a50>
   15d4c:	ldr	ip, [r1]
   15d50:	push	{r4, r5, r6, lr}
   15d54:	add	r3, ip, #256	; 0x100
   15d58:	add	r2, r3, r2
   15d5c:	cmp	ip, r2
   15d60:	mov	r4, r0
   15d64:	ldr	r0, [r0]
   15d68:	bhi	15d90 <__assert_fail@plt+0x4b48>
   15d6c:	str	r2, [r1]
   15d70:	mov	r1, r2
   15d74:	bl	11014 <realloc@plt>
   15d78:	subs	r5, r0, #0
   15d7c:	movne	r3, #1
   15d80:	strne	r5, [r4]
   15d84:	beq	15db4 <__assert_fail@plt+0x4b6c>
   15d88:	mov	r0, r3
   15d8c:	pop	{r4, r5, r6, pc}
   15d90:	mov	r5, #0
   15d94:	bl	10fc0 <free@plt>
   15d98:	str	r5, [r4]
   15d9c:	bl	1111c <__errno_location@plt>
   15da0:	mov	r2, #36	; 0x24
   15da4:	mov	r3, r5
   15da8:	str	r2, [r0]
   15dac:	mov	r0, r3
   15db0:	pop	{r4, r5, r6, pc}
   15db4:	ldr	r0, [r4]
   15db8:	bl	10fc0 <free@plt>
   15dbc:	str	r5, [r4]
   15dc0:	mov	r3, r5
   15dc4:	b	15d88 <__assert_fail@plt+0x4b40>
   15dc8:	ldr	r3, [pc, #104]	; 15e38 <__assert_fail@plt+0x4bf0>
   15dcc:	push	{r4, lr}
   15dd0:	and	r3, r3, r0
   15dd4:	cmp	r3, #0
   15dd8:	sub	sp, sp, #8
   15ddc:	mov	r4, r1
   15de0:	beq	15e14 <__assert_fail@plt+0x4bcc>
   15de4:	ldr	r2, [pc, #80]	; 15e3c <__assert_fail@plt+0x4bf4>
   15de8:	ldr	r3, [pc, #80]	; 15e40 <__assert_fail@plt+0x4bf8>
   15dec:	str	r2, [sp]
   15df0:	mov	r1, #0
   15df4:	ldr	r2, [pc, #72]	; 15e44 <__assert_fail@plt+0x4bfc>
   15df8:	mov	r0, #31
   15dfc:	bl	18550 <fts_children@@Base+0xd14>
   15e00:	str	r0, [r4]
   15e04:	adds	r0, r0, #0
   15e08:	movne	r0, #1
   15e0c:	add	sp, sp, #8
   15e10:	pop	{r4, pc}
   15e14:	mov	r0, #32
   15e18:	bl	110a4 <malloc@plt>
   15e1c:	cmp	r0, #0
   15e20:	str	r0, [r4]
   15e24:	beq	15e0c <__assert_fail@plt+0x4bc4>
   15e28:	bl	17a7c <fts_children@@Base+0x240>
   15e2c:	mov	r0, #1
   15e30:	add	sp, sp, #8
   15e34:	pop	{r4, pc}
   15e38:	andeq	r0, r0, r2, lsl #2
   15e3c:	andeq	r0, r1, r0, asr #31
   15e40:	andeq	r5, r1, r8, lsr #13
   15e44:	andeq	r5, r1, r4, ror #13
   15e48:	lsl	r3, r1, #11
   15e4c:	lsl	ip, r1, #7
   15e50:	tst	r1, #512	; 0x200
   15e54:	and	r1, r3, #32768	; 0x8000
   15e58:	and	r3, ip, #262144	; 0x40000
   15e5c:	orr	r1, r1, r3
   15e60:	orr	r1, r1, #540672	; 0x84000
   15e64:	mov	r3, r2
   15e68:	orr	r1, r1, #2304	; 0x900
   15e6c:	beq	15e7c <__assert_fail@plt+0x4c34>
   15e70:	mov	r2, r1
   15e74:	mov	r1, r3
   15e78:	b	18df0 <fts_children@@Base+0x15b4>
   15e7c:	mov	r0, r2
   15e80:	b	17b74 <fts_children@@Base+0x338>
   15e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e88:	subs	fp, r3, #0
   15e8c:	ldr	r5, [pc, #500]	; 16088 <__assert_fail@plt+0x4e40>
   15e90:	sub	sp, sp, #116	; 0x74
   15e94:	ldr	sl, [r0, #48]	; 0x30
   15e98:	ldr	r3, [r5]
   15e9c:	mov	r6, r0
   15ea0:	mov	r7, r1
   15ea4:	mov	r4, r2
   15ea8:	and	r9, sl, #4
   15eac:	str	r3, [sp, #108]	; 0x6c
   15eb0:	beq	15f84 <__assert_fail@plt+0x4d3c>
   15eb4:	ldr	r1, [pc, #464]	; 1608c <__assert_fail@plt+0x4e44>
   15eb8:	mov	r0, fp
   15ebc:	bl	10f9c <strcmp@plt>
   15ec0:	cmp	r0, #0
   15ec4:	bne	15f84 <__assert_fail@plt+0x4d3c>
   15ec8:	cmp	r9, #0
   15ecc:	bne	15fc0 <__assert_fail@plt+0x4d78>
   15ed0:	cmp	r4, #0
   15ed4:	bge	16074 <__assert_fail@plt+0x4e2c>
   15ed8:	tst	sl, #512	; 0x200
   15edc:	bne	16000 <__assert_fail@plt+0x4db8>
   15ee0:	mov	r9, #1
   15ee4:	mov	r1, sl
   15ee8:	mov	r2, fp
   15eec:	ldr	r0, [r6, #32]
   15ef0:	bl	15e48 <__assert_fail@plt+0x4c00>
   15ef4:	subs	r8, r0, #0
   15ef8:	blt	16068 <__assert_fail@plt+0x4e20>
   15efc:	ldr	sl, [r6, #48]	; 0x30
   15f00:	tst	sl, #2
   15f04:	beq	15fa0 <__assert_fail@plt+0x4d58>
   15f08:	mov	r2, sp
   15f0c:	mov	r1, r8
   15f10:	mov	r0, #3
   15f14:	bl	11044 <__fxstat64@plt>
   15f18:	cmp	r0, #0
   15f1c:	bne	15ff8 <__assert_fail@plt+0x4db0>
   15f20:	ldrd	r0, [r7, #72]	; 0x48
   15f24:	ldrd	r2, [sp]
   15f28:	cmp	r1, r3
   15f2c:	cmpeq	r0, r2
   15f30:	bne	15fec <__assert_fail@plt+0x4da4>
   15f34:	ldrd	r0, [r7, #168]	; 0xa8
   15f38:	ldrd	r2, [sp, #96]	; 0x60
   15f3c:	cmp	r1, r3
   15f40:	cmpeq	r0, r2
   15f44:	bne	15fec <__assert_fail@plt+0x4da4>
   15f48:	ldr	sl, [r6, #48]	; 0x30
   15f4c:	tst	sl, #512	; 0x200
   15f50:	bne	1603c <__assert_fail@plt+0x4df4>
   15f54:	mov	r0, r8
   15f58:	bl	111d0 <fchdir@plt>
   15f5c:	mov	sl, r0
   15f60:	cmp	r4, #0
   15f64:	bge	15fd0 <__assert_fail@plt+0x4d88>
   15f68:	bl	1111c <__errno_location@plt>
   15f6c:	mov	r4, r0
   15f70:	mov	r0, r8
   15f74:	ldr	r6, [r4]
   15f78:	bl	11224 <close@plt>
   15f7c:	str	r6, [r4]
   15f80:	b	15fd0 <__assert_fail@plt+0x4d88>
   15f84:	cmp	r9, #0
   15f88:	bne	15fc0 <__assert_fail@plt+0x4d78>
   15f8c:	cmp	r4, #0
   15f90:	movge	r8, r4
   15f94:	blt	15ee4 <__assert_fail@plt+0x4c9c>
   15f98:	tst	sl, #2
   15f9c:	bne	15f08 <__assert_fail@plt+0x4cc0>
   15fa0:	cmp	fp, #0
   15fa4:	beq	15f4c <__assert_fail@plt+0x4d04>
   15fa8:	mov	r0, fp
   15fac:	ldr	r1, [pc, #216]	; 1608c <__assert_fail@plt+0x4e44>
   15fb0:	bl	10f9c <strcmp@plt>
   15fb4:	cmp	r0, #0
   15fb8:	bne	15f4c <__assert_fail@plt+0x4d04>
   15fbc:	b	15f08 <__assert_fail@plt+0x4cc0>
   15fc0:	mvn	r3, r4
   15fc4:	lsr	r3, r3, #31
   15fc8:	ands	sl, r3, sl, lsr #9
   15fcc:	bne	16058 <__assert_fail@plt+0x4e10>
   15fd0:	ldr	r2, [sp, #108]	; 0x6c
   15fd4:	ldr	r3, [r5]
   15fd8:	mov	r0, sl
   15fdc:	cmp	r2, r3
   15fe0:	bne	16070 <__assert_fail@plt+0x4e28>
   15fe4:	add	sp, sp, #116	; 0x74
   15fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fec:	bl	1111c <__errno_location@plt>
   15ff0:	mov	r3, #2
   15ff4:	str	r3, [r0]
   15ff8:	mvn	sl, #0
   15ffc:	b	15f60 <__assert_fail@plt+0x4d18>
   16000:	add	r8, r6, #60	; 0x3c
   16004:	mov	r0, r8
   16008:	bl	18d28 <fts_children@@Base+0x14ec>
   1600c:	subs	r9, r0, #0
   16010:	bne	15ee4 <__assert_fail@plt+0x4c9c>
   16014:	mov	r0, r8
   16018:	bl	18d74 <fts_children@@Base+0x1538>
   1601c:	ldr	sl, [r6, #48]	; 0x30
   16020:	subs	r8, r0, #0
   16024:	blt	15ee0 <__assert_fail@plt+0x4c98>
   16028:	tst	sl, #2
   1602c:	mov	r4, r8
   16030:	mov	r9, #1
   16034:	beq	15f4c <__assert_fail@plt+0x4d04>
   16038:	b	15f08 <__assert_fail@plt+0x4cc0>
   1603c:	eor	r2, r9, #1
   16040:	mov	r1, r8
   16044:	uxtb	r2, r2
   16048:	mov	r0, r6
   1604c:	bl	15ae8 <__assert_fail@plt+0x48a0>
   16050:	mov	sl, #0
   16054:	b	15fd0 <__assert_fail@plt+0x4d88>
   16058:	mov	r0, r4
   1605c:	bl	11224 <close@plt>
   16060:	mov	sl, #0
   16064:	b	15fd0 <__assert_fail@plt+0x4d88>
   16068:	mvn	sl, #0
   1606c:	b	15fd0 <__assert_fail@plt+0x4d88>
   16070:	bl	11008 <__stack_chk_fail@plt>
   16074:	tst	sl, #2
   16078:	mov	r8, r4
   1607c:	mov	r9, #1
   16080:	beq	15fa8 <__assert_fail@plt+0x4d60>
   16084:	b	15f08 <__assert_fail@plt+0x4cc0>
   16088:	andeq	sl, r2, r8, lsl #30
   1608c:			; <UNDEFINED> instruction: 0x0001a4b0
   16090:	ldr	r3, [pc, #164]	; 1613c <__assert_fail@plt+0x4ef4>
   16094:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16098:	and	r3, r3, r0
   1609c:	cmp	r3, #0
   160a0:	mov	sl, r1
   160a4:	mov	r8, r2
   160a8:	beq	16110 <__assert_fail@plt+0x4ec8>
   160ac:	mov	r0, #24
   160b0:	bl	110a4 <malloc@plt>
   160b4:	subs	r9, r0, #0
   160b8:	beq	16134 <__assert_fail@plt+0x4eec>
   160bc:	ldrd	r4, [r8, #168]	; 0xa8
   160c0:	ldrd	r6, [r8, #72]	; 0x48
   160c4:	str	r8, [r9, #16]
   160c8:	strd	r4, [r9, #8]
   160cc:	ldr	r0, [sl]
   160d0:	strd	r6, [r9]
   160d4:	mov	r1, r9
   160d8:	bl	18b7c <fts_children@@Base+0x1340>
   160dc:	cmp	r9, r0
   160e0:	mov	r4, r0
   160e4:	beq	16108 <__assert_fail@plt+0x4ec0>
   160e8:	mov	r0, r9
   160ec:	bl	10fc0 <free@plt>
   160f0:	cmp	r4, #0
   160f4:	beq	16134 <__assert_fail@plt+0x4eec>
   160f8:	ldr	r2, [r4, #16]
   160fc:	mov	r3, #2
   16100:	str	r2, [r8]
   16104:	strh	r3, [r8, #60]	; 0x3c
   16108:	mov	r0, #1
   1610c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16110:	ldr	r0, [r1]
   16114:	add	r1, r2, #72	; 0x48
   16118:	bl	17aa0 <fts_children@@Base+0x264>
   1611c:	cmp	r0, #0
   16120:	beq	16108 <__assert_fail@plt+0x4ec0>
   16124:	mov	r3, #2
   16128:	str	r8, [r8]
   1612c:	strh	r3, [r8, #60]	; 0x3c
   16130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16134:	mov	r0, #0
   16138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1613c:	andeq	r0, r0, r2, lsl #2
   16140:	push	{r4, r5, r6, lr}
   16144:	sub	sp, sp, #32
   16148:	ldr	r6, [pc, #192]	; 16210 <__assert_fail@plt+0x4fc8>
   1614c:	ldr	r3, [pc, #192]	; 16214 <__assert_fail@plt+0x4fcc>
   16150:	ldr	ip, [r6]
   16154:	and	r3, r3, r0
   16158:	cmp	r3, #0
   1615c:	str	ip, [sp, #28]
   16160:	bne	161b8 <__assert_fail@plt+0x4f70>
   16164:	ldr	r3, [r2, #4]
   16168:	cmp	r3, #0
   1616c:	beq	161a0 <__assert_fail@plt+0x4f58>
   16170:	ldr	r0, [r3, #48]	; 0x30
   16174:	cmp	r0, #0
   16178:	blt	161a0 <__assert_fail@plt+0x4f58>
   1617c:	ldr	ip, [r1]
   16180:	ldrd	r0, [ip, #16]
   16184:	orrs	r1, r0, r1
   16188:	beq	1620c <__assert_fail@plt+0x4fc4>
   1618c:	ldrd	r4, [ip]
   16190:	ldrd	r0, [r2, #168]	; 0xa8
   16194:	cmp	r5, r1
   16198:	cmpeq	r4, r0
   1619c:	beq	161e4 <__assert_fail@plt+0x4f9c>
   161a0:	ldr	r2, [sp, #28]
   161a4:	ldr	r3, [r6]
   161a8:	cmp	r2, r3
   161ac:	bne	16208 <__assert_fail@plt+0x4fc0>
   161b0:	add	sp, sp, #32
   161b4:	pop	{r4, r5, r6, pc}
   161b8:	ldrd	r4, [r2, #72]	; 0x48
   161bc:	ldrd	r2, [r2, #168]	; 0xa8
   161c0:	ldr	r0, [r1]
   161c4:	mov	r1, sp
   161c8:	strd	r4, [sp]
   161cc:	strd	r2, [sp, #8]
   161d0:	bl	18bd4 <fts_children@@Base+0x1398>
   161d4:	cmp	r0, #0
   161d8:	beq	1620c <__assert_fail@plt+0x4fc4>
   161dc:	bl	10fc0 <free@plt>
   161e0:	b	161a0 <__assert_fail@plt+0x4f58>
   161e4:	ldrd	r4, [r2, #72]	; 0x48
   161e8:	ldrd	r0, [ip, #8]
   161ec:	cmp	r1, r5
   161f0:	cmpeq	r0, r4
   161f4:	ldrdeq	r0, [r3, #72]	; 0x48
   161f8:	ldrdeq	r2, [r3, #168]	; 0xa8
   161fc:	strdeq	r0, [ip, #8]
   16200:	strdeq	r2, [ip]
   16204:	b	161a0 <__assert_fail@plt+0x4f58>
   16208:	bl	11008 <__stack_chk_fail@plt>
   1620c:	bl	11218 <abort@plt>
   16210:	andeq	sl, r2, r8, lsl #30
   16214:	andeq	r0, r0, r2, lsl #2
   16218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1621c:	mov	r5, r0
   16220:	ldr	r9, [r0]
   16224:	sub	sp, sp, #60	; 0x3c
   16228:	ldr	r0, [r9, #12]
   1622c:	str	r1, [sp, #36]	; 0x24
   16230:	cmp	r0, #0
   16234:	str	r0, [sp, #48]	; 0x30
   16238:	beq	16534 <__assert_fail@plt+0x52ec>
   1623c:	bl	111c4 <dirfd@plt>
   16240:	subs	r3, r0, #0
   16244:	str	r3, [sp, #44]	; 0x2c
   16248:	blt	16ac4 <__assert_fail@plt+0x587c>
   1624c:	ldr	r3, [r5, #44]	; 0x2c
   16250:	cmp	r3, #0
   16254:	beq	1680c <__assert_fail@plt+0x55c4>
   16258:	ldr	r0, [r5, #48]	; 0x30
   1625c:	mvn	r3, #0
   16260:	str	r3, [sp, #20]
   16264:	mov	r3, #1
   16268:	str	r3, [sp, #52]	; 0x34
   1626c:	ldr	r2, [r9, #40]	; 0x28
   16270:	ldr	r3, [r9, #28]
   16274:	sub	r1, r2, #1
   16278:	str	r2, [sp, #4]
   1627c:	ldrb	r3, [r3, r1]
   16280:	str	r1, [sp, #32]
   16284:	mov	sl, #0
   16288:	cmp	r3, #47	; 0x2f
   1628c:	addne	r3, r2, #1
   16290:	strne	r3, [sp, #4]
   16294:	strne	r2, [sp, #32]
   16298:	ands	r0, r0, #4
   1629c:	movne	r1, #47	; 0x2f
   162a0:	ldrne	r3, [r5, #24]
   162a4:	ldrne	r0, [sp, #32]
   162a8:	streq	r0, [sp, #24]
   162ac:	addne	r2, r3, r0
   162b0:	strbne	r1, [r3, r0]
   162b4:	addne	r3, r2, #1
   162b8:	strne	r3, [sp, #24]
   162bc:	ldr	r3, [r9, #48]	; 0x30
   162c0:	ldr	fp, [r5, #36]	; 0x24
   162c4:	ldr	r2, [sp, #4]
   162c8:	add	r3, r3, #1
   162cc:	str	sl, [sp, #40]	; 0x28
   162d0:	sub	fp, fp, r2
   162d4:	str	r3, [sp, #16]
   162d8:	str	sl, [sp, #28]
   162dc:	mov	r7, sl
   162e0:	str	sl, [sp, #8]
   162e4:	str	r9, [sp, #12]
   162e8:	b	16338 <__assert_fail@plt+0x50f0>
   162ec:	mov	r3, #0
   162f0:	str	r3, [r4, #88]	; 0x58
   162f4:	mov	r2, #2
   162f8:	mov	r3, #0
   162fc:	strd	r2, [r4, #120]	; 0x78
   16300:	ldr	r3, [sp, #8]
   16304:	cmp	r3, #0
   16308:	mov	r3, #0
   1630c:	str	r3, [r4, #8]
   16310:	ldr	r3, [pc, #2148]	; 16b7c <__assert_fail@plt+0x5934>
   16314:	strne	r4, [sl, #8]
   16318:	streq	r4, [sp, #8]
   1631c:	cmp	r7, r3
   16320:	beq	1643c <__assert_fail@plt+0x51f4>
   16324:	ldr	r3, [sp, #20]
   16328:	add	r7, r7, #1
   1632c:	cmp	r7, r3
   16330:	bcs	166c8 <__assert_fail@plt+0x5480>
   16334:	mov	sl, r4
   16338:	ldr	r3, [sp, #12]
   1633c:	ldr	r4, [r3, #12]
   16340:	cmp	r4, #0
   16344:	beq	16824 <__assert_fail@plt+0x55dc>
   16348:	bl	1111c <__errno_location@plt>
   1634c:	mov	r3, #0
   16350:	mov	r8, r0
   16354:	mov	r0, r4
   16358:	str	r3, [r8]
   1635c:	bl	111ac <readdir64@plt>
   16360:	subs	r9, r0, #0
   16364:	beq	168ec <__assert_fail@plt+0x56a4>
   16368:	ldr	r3, [r5, #48]	; 0x30
   1636c:	tst	r3, #32
   16370:	bne	16380 <__assert_fail@plt+0x5138>
   16374:	ldrb	r3, [r9, #19]
   16378:	cmp	r3, #46	; 0x2e
   1637c:	beq	164c8 <__assert_fail@plt+0x5280>
   16380:	add	r4, r9, #19
   16384:	mov	r0, r4
   16388:	bl	110f8 <strlen@plt>
   1638c:	mov	r1, r4
   16390:	mov	r2, r0
   16394:	mov	r6, r0
   16398:	mov	r0, r5
   1639c:	bl	15848 <__assert_fail@plt+0x4600>
   163a0:	subs	r4, r0, #0
   163a4:	beq	16774 <__assert_fail@plt+0x552c>
   163a8:	cmp	fp, r6
   163ac:	bls	16450 <__assert_fail@plt+0x5208>
   163b0:	ldr	r3, [sp, #4]
   163b4:	adds	r6, r3, r6
   163b8:	bcs	16b34 <__assert_fail@plt+0x58ec>
   163bc:	ldr	r0, [r5, #48]	; 0x30
   163c0:	ldr	r1, [r5]
   163c4:	ldrd	r2, [r9]
   163c8:	ldr	ip, [sp, #16]
   163cc:	tst	r0, #4
   163d0:	str	r1, [r4, #4]
   163d4:	add	r1, r4, #176	; 0xb0
   163d8:	str	ip, [r4, #48]	; 0x30
   163dc:	strd	r2, [r4, #168]	; 0xa8
   163e0:	str	r6, [r4, #40]	; 0x28
   163e4:	streq	r1, [r4, #24]
   163e8:	bne	164a8 <__assert_fail@plt+0x5260>
   163ec:	ldr	r3, [r5, #44]	; 0x2c
   163f0:	cmp	r3, #0
   163f4:	beq	16400 <__assert_fail@plt+0x51b8>
   163f8:	ands	r3, r0, #1024	; 0x400
   163fc:	beq	16514 <__assert_fail@plt+0x52cc>
   16400:	ldrb	r2, [r9, #18]
   16404:	and	r0, r0, #24
   16408:	cmp	r0, #24
   1640c:	sub	r3, r2, #1
   16410:	beq	164e8 <__assert_fail@plt+0x52a0>
   16414:	mov	r2, #11
   16418:	cmp	r3, #11
   1641c:	strh	r2, [r4, #60]	; 0x3c
   16420:	bhi	162ec <__assert_fail@plt+0x50a4>
   16424:	ldr	r2, [pc, #1876]	; 16b80 <__assert_fail@plt+0x5938>
   16428:	ldr	r1, [r2, r3, lsl #2]
   1642c:	mov	r2, #2
   16430:	mov	r3, #0
   16434:	str	r1, [r4, #88]	; 0x58
   16438:	b	162fc <__assert_fail@plt+0x50b4>
   1643c:	ldr	r6, [r5, #44]	; 0x2c
   16440:	cmp	r6, #0
   16444:	beq	1667c <__assert_fail@plt+0x5434>
   16448:	ldr	r7, [pc, #1844]	; 16b84 <__assert_fail@plt+0x593c>
   1644c:	b	16334 <__assert_fail@plt+0x50ec>
   16450:	ldr	r3, [sp, #32]
   16454:	add	r1, r5, #36	; 0x24
   16458:	add	r2, r3, #2
   1645c:	add	r2, r2, r6
   16460:	add	r0, r5, #24
   16464:	ldr	fp, [r5, #24]
   16468:	bl	15d4c <__assert_fail@plt+0x4b04>
   1646c:	cmp	r0, #0
   16470:	beq	16774 <__assert_fail@plt+0x552c>
   16474:	ldr	r3, [r5, #24]
   16478:	cmp	r3, fp
   1647c:	beq	1652c <__assert_fail@plt+0x52e4>
   16480:	ldr	r2, [r5, #48]	; 0x30
   16484:	tst	r2, #4
   16488:	ldrne	r2, [sp, #4]
   1648c:	addne	r3, r3, r2
   16490:	strne	r3, [sp, #24]
   16494:	ldr	fp, [r5, #36]	; 0x24
   16498:	ldr	r3, [sp, #4]
   1649c:	str	r0, [sp, #28]
   164a0:	sub	fp, fp, r3
   164a4:	b	163b0 <__assert_fail@plt+0x5168>
   164a8:	ldr	r3, [r4, #28]
   164ac:	ldr	r2, [r4, #52]	; 0x34
   164b0:	str	r3, [r4, #24]
   164b4:	add	r2, r2, #1
   164b8:	ldr	r0, [sp, #24]
   164bc:	bl	10fb4 <memmove@plt>
   164c0:	ldr	r0, [r5, #48]	; 0x30
   164c4:	b	163ec <__assert_fail@plt+0x51a4>
   164c8:	ldrb	r3, [r9, #20]
   164cc:	cmp	r3, #0
   164d0:	beq	164e0 <__assert_fail@plt+0x5298>
   164d4:	ldrh	r3, [r9, #20]
   164d8:	cmp	r3, #46	; 0x2e
   164dc:	bne	16380 <__assert_fail@plt+0x5138>
   164e0:	mov	r4, sl
   164e4:	b	16334 <__assert_fail@plt+0x50ec>
   164e8:	tst	r2, #251	; 0xfb
   164ec:	beq	16414 <__assert_fail@plt+0x51cc>
   164f0:	mov	r2, #11
   164f4:	cmp	r3, #11
   164f8:	strh	r2, [r4, #60]	; 0x3c
   164fc:	bls	1675c <__assert_fail@plt+0x5514>
   16500:	mov	r3, #0
   16504:	str	r3, [r4, #88]	; 0x58
   16508:	mov	r2, #1
   1650c:	mov	r3, #0
   16510:	b	162fc <__assert_fail@plt+0x50b4>
   16514:	mov	r2, r4
   16518:	add	r1, r5, #48	; 0x30
   1651c:	ldr	r0, [r5, #32]
   16520:	bl	15bc0 <__assert_fail@plt+0x4978>
   16524:	strh	r0, [r4, #60]	; 0x3c
   16528:	b	16300 <__assert_fail@plt+0x50b8>
   1652c:	ldr	r0, [sp, #28]
   16530:	b	16494 <__assert_fail@plt+0x524c>
   16534:	ldr	r3, [r5, #48]	; 0x30
   16538:	ldr	r1, [r9, #24]
   1653c:	and	r2, r3, #516	; 0x204
   16540:	cmp	r2, #512	; 0x200
   16544:	mvnne	r0, #99	; 0x63
   16548:	ldreq	r0, [r5, #32]
   1654c:	ands	ip, r3, #16
   16550:	beq	16560 <__assert_fail@plt+0x5318>
   16554:	tst	r3, #1
   16558:	moveq	ip, #32768	; 0x8000
   1655c:	bne	167c4 <__assert_fail@plt+0x557c>
   16560:	lsl	r2, r3, #7
   16564:	and	r2, r2, #262144	; 0x40000
   16568:	orr	r2, r2, ip
   1656c:	orr	r2, r2, #540672	; 0x84000
   16570:	orr	r2, r2, #2304	; 0x900
   16574:	bl	18df0 <fts_children@@Base+0x15b4>
   16578:	subs	r3, r0, #0
   1657c:	str	r3, [sp, #44]	; 0x2c
   16580:	movlt	r3, #0
   16584:	strlt	r3, [r9, #12]
   16588:	blt	16a98 <__assert_fail@plt+0x5850>
   1658c:	bl	111b8 <fdopendir@plt>
   16590:	subs	r4, r0, #0
   16594:	beq	16a7c <__assert_fail@plt+0x5834>
   16598:	ldrh	r3, [r9, #60]	; 0x3c
   1659c:	str	r4, [r9, #12]
   165a0:	cmp	r3, #11
   165a4:	beq	169fc <__assert_fail@plt+0x57b4>
   165a8:	ldr	r0, [r5, #48]	; 0x30
   165ac:	tst	r0, #256	; 0x100
   165b0:	bne	16970 <__assert_fail@plt+0x5728>
   165b4:	ldr	r2, [r5, #44]	; 0x2c
   165b8:	ldr	r3, [pc, #1480]	; 16b88 <__assert_fail@plt+0x5940>
   165bc:	cmp	r2, #0
   165c0:	mvnne	r3, #0
   165c4:	str	r3, [sp, #20]
   165c8:	ldr	r3, [sp, #36]	; 0x24
   165cc:	cmp	r3, #2
   165d0:	beq	16960 <__assert_fail@plt+0x5718>
   165d4:	ldr	r3, [r5, #48]	; 0x30
   165d8:	and	r3, r3, #56	; 0x38
   165dc:	cmp	r3, #24
   165e0:	beq	167d4 <__assert_fail@plt+0x558c>
   165e4:	ldr	r3, [sp, #36]	; 0x24
   165e8:	mov	r6, #1
   165ec:	sub	r7, r3, #3
   165f0:	clz	r7, r7
   165f4:	lsr	r7, r7, #5
   165f8:	ldr	r3, [r5, #48]	; 0x30
   165fc:	tst	r3, #512	; 0x200
   16600:	bne	16a18 <__assert_fail@plt+0x57d0>
   16604:	mov	r3, #0
   16608:	ldr	r2, [sp, #44]	; 0x2c
   1660c:	mov	r1, r9
   16610:	mov	r0, r5
   16614:	bl	15e84 <__assert_fail@plt+0x4c3c>
   16618:	cmp	r0, #0
   1661c:	beq	16814 <__assert_fail@plt+0x55cc>
   16620:	ldrh	r4, [r9, #62]	; 0x3e
   16624:	tst	r7, r6
   16628:	ldr	r6, [r9, #12]
   1662c:	orr	r4, r4, #1
   16630:	beq	16640 <__assert_fail@plt+0x53f8>
   16634:	bl	1111c <__errno_location@plt>
   16638:	ldr	r3, [r0]
   1663c:	str	r3, [r9, #32]
   16640:	strh	r4, [r9, #62]	; 0x3e
   16644:	mov	r0, r6
   16648:	bl	1123c <closedir@plt>
   1664c:	ldr	r3, [sp, #44]	; 0x2c
   16650:	ldr	r0, [r5, #48]	; 0x30
   16654:	mvn	r2, r3
   16658:	mov	r3, #0
   1665c:	lsr	r2, r2, #31
   16660:	ands	r2, r2, r0, lsr #9
   16664:	str	r3, [r9, #12]
   16668:	bne	16afc <__assert_fail@plt+0x58b4>
   1666c:	mov	r3, #0
   16670:	str	r3, [r9, #12]
   16674:	str	r3, [sp, #52]	; 0x34
   16678:	b	1626c <__assert_fail@plt+0x5024>
   1667c:	ldr	r1, [sp, #44]	; 0x2c
   16680:	ldr	r0, [sp, #12]
   16684:	bl	15920 <__assert_fail@plt+0x46d8>
   16688:	ldr	r3, [pc, #1276]	; 16b8c <__assert_fail@plt+0x5944>
   1668c:	cmp	r0, r3
   16690:	beq	166b4 <__assert_fail@plt+0x546c>
   16694:	ldr	r3, [pc, #1268]	; 16b90 <__assert_fail@plt+0x5948>
   16698:	cmp	r0, r3
   1669c:	beq	166b4 <__assert_fail@plt+0x546c>
   166a0:	ldr	r3, [pc, #1260]	; 16b94 <__assert_fail@plt+0x594c>
   166a4:	cmp	r0, r3
   166a8:	movne	r3, #1
   166ac:	strne	r3, [sp, #40]	; 0x28
   166b0:	bne	16448 <__assert_fail@plt+0x5200>
   166b4:	ldr	r3, [sp, #20]
   166b8:	add	r7, r7, #1
   166bc:	cmp	r7, r3
   166c0:	str	r6, [sp, #40]	; 0x28
   166c4:	bcc	16334 <__assert_fail@plt+0x50ec>
   166c8:	ldr	r3, [sp, #28]
   166cc:	ldr	r9, [sp, #12]
   166d0:	cmp	r3, #0
   166d4:	beq	16834 <__assert_fail@plt+0x55ec>
   166d8:	ldr	r3, [r5, #4]
   166dc:	ldr	r1, [r5, #24]
   166e0:	cmp	r3, #0
   166e4:	beq	16714 <__assert_fail@plt+0x54cc>
   166e8:	ldr	r2, [r3, #24]
   166ec:	add	r0, r3, #176	; 0xb0
   166f0:	cmp	r2, r0
   166f4:	ldrne	r0, [r3, #28]
   166f8:	str	r1, [r3, #28]
   166fc:	subne	r2, r2, r0
   16700:	addne	r2, r1, r2
   16704:	strne	r2, [r3, #24]
   16708:	ldr	r3, [r3, #8]
   1670c:	cmp	r3, #0
   16710:	bne	166e8 <__assert_fail@plt+0x54a0>
   16714:	ldr	r3, [sp, #8]
   16718:	b	16748 <__assert_fail@plt+0x5500>
   1671c:	ldr	r2, [r3, #24]
   16720:	cmp	r2, r0
   16724:	ldrne	r0, [r3, #28]
   16728:	str	r1, [r3, #28]
   1672c:	subne	r2, r2, r0
   16730:	addne	r2, r1, r2
   16734:	strne	r2, [r3, #24]
   16738:	ldr	r2, [r3, #8]
   1673c:	cmp	r2, #0
   16740:	ldreq	r2, [r3, #4]
   16744:	mov	r3, r2
   16748:	ldr	r2, [r3, #48]	; 0x30
   1674c:	add	r0, r3, #176	; 0xb0
   16750:	cmp	r2, #0
   16754:	bge	1671c <__assert_fail@plt+0x54d4>
   16758:	b	16834 <__assert_fail@plt+0x55ec>
   1675c:	ldr	r2, [pc, #1052]	; 16b80 <__assert_fail@plt+0x5938>
   16760:	ldr	r1, [r2, r3, lsl #2]
   16764:	mov	r2, #1
   16768:	mov	r3, #0
   1676c:	str	r1, [r4, #88]	; 0x58
   16770:	b	162fc <__assert_fail@plt+0x50b4>
   16774:	ldr	r9, [sp, #12]
   16778:	mov	r0, r4
   1677c:	ldr	r4, [r8]
   16780:	bl	10fc0 <free@plt>
   16784:	ldr	r0, [sp, #8]
   16788:	bl	158bc <__assert_fail@plt+0x4674>
   1678c:	ldr	r0, [r9, #12]
   16790:	bl	1123c <closedir@plt>
   16794:	ldr	r3, [r5, #48]	; 0x30
   16798:	mov	r2, #0
   1679c:	orr	r3, r3, #16384	; 0x4000
   167a0:	mov	r1, #7
   167a4:	str	r2, [r9, #12]
   167a8:	strh	r1, [r9, #60]	; 0x3c
   167ac:	str	r2, [sp, #8]
   167b0:	str	r3, [r5, #48]	; 0x30
   167b4:	str	r4, [r8]
   167b8:	ldr	r0, [sp, #8]
   167bc:	add	sp, sp, #60	; 0x3c
   167c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167c4:	ldr	ip, [r9, #48]	; 0x30
   167c8:	cmp	ip, #0
   167cc:	movne	ip, #32768	; 0x8000
   167d0:	b	16560 <__assert_fail@plt+0x5318>
   167d4:	ldr	r3, [r9, #92]	; 0x5c
   167d8:	cmp	r3, #2
   167dc:	bne	165e4 <__assert_fail@plt+0x539c>
   167e0:	ldr	r1, [sp, #44]	; 0x2c
   167e4:	mov	r0, r9
   167e8:	bl	15a54 <__assert_fail@plt+0x480c>
   167ec:	cmp	r0, #0
   167f0:	beq	165e4 <__assert_fail@plt+0x539c>
   167f4:	ldr	r3, [sp, #36]	; 0x24
   167f8:	cmp	r3, #3
   167fc:	bne	16960 <__assert_fail@plt+0x5718>
   16800:	mov	r6, #0
   16804:	mov	r7, #1
   16808:	b	165f8 <__assert_fail@plt+0x53b0>
   1680c:	ldr	r3, [pc, #884]	; 16b88 <__assert_fail@plt+0x5940>
   16810:	str	r3, [sp, #20]
   16814:	mov	r3, #1
   16818:	str	r3, [sp, #52]	; 0x34
   1681c:	ldr	r0, [r5, #48]	; 0x30
   16820:	b	1626c <__assert_fail@plt+0x5024>
   16824:	mov	r9, r3
   16828:	ldr	r3, [sp, #28]
   1682c:	cmp	r3, #0
   16830:	bne	166d8 <__assert_fail@plt+0x5490>
   16834:	ldr	r3, [r5, #48]	; 0x30
   16838:	tst	r3, #4
   1683c:	beq	16868 <__assert_fail@plt+0x5620>
   16840:	ldr	r3, [r5, #36]	; 0x24
   16844:	ldr	r2, [sp, #4]
   16848:	cmp	r7, #0
   1684c:	cmpne	r3, r2
   16850:	ldreq	r3, [sp, #24]
   16854:	subeq	r3, r3, #1
   16858:	streq	r3, [sp, #24]
   1685c:	ldr	r2, [sp, #24]
   16860:	mov	r3, #0
   16864:	strb	r3, [r2]
   16868:	ldrd	r2, [sp, #48]	; 0x30
   1686c:	cmp	r2, #0
   16870:	movne	r3, #0
   16874:	cmp	r3, #0
   16878:	beq	168b0 <__assert_fail@plt+0x5668>
   1687c:	ldr	r3, [sp, #36]	; 0x24
   16880:	cmp	r7, #0
   16884:	cmpne	r3, #1
   16888:	bne	168b8 <__assert_fail@plt+0x5670>
   1688c:	ldr	r3, [r9, #48]	; 0x30
   16890:	cmp	r3, #0
   16894:	bne	16a5c <__assert_fail@plt+0x5814>
   16898:	mov	r0, r5
   1689c:	bl	15b70 <__assert_fail@plt+0x4928>
   168a0:	adds	r0, r0, #0
   168a4:	movne	r0, #1
   168a8:	cmp	r0, #0
   168ac:	bne	16b0c <__assert_fail@plt+0x58c4>
   168b0:	cmp	r7, #0
   168b4:	beq	169c0 <__assert_fail@plt+0x5778>
   168b8:	ldr	r3, [sp, #40]	; 0x28
   168bc:	cmp	r3, #0
   168c0:	bne	16930 <__assert_fail@plt+0x56e8>
   168c4:	ldr	r3, [r5, #44]	; 0x2c
   168c8:	cmp	r3, #0
   168cc:	cmpne	r7, #1
   168d0:	beq	167b8 <__assert_fail@plt+0x5570>
   168d4:	mov	r2, r7
   168d8:	ldr	r1, [sp, #8]
   168dc:	mov	r0, r5
   168e0:	add	sp, sp, #60	; 0x3c
   168e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168e8:	b	15770 <__assert_fail@plt+0x4528>
   168ec:	ldr	r3, [r8]
   168f0:	ldr	r9, [sp, #12]
   168f4:	cmp	r3, #0
   168f8:	beq	16914 <__assert_fail@plt+0x56cc>
   168fc:	ldr	r2, [sp, #48]	; 0x30
   16900:	str	r3, [r9, #32]
   16904:	orrs	r2, r2, r7
   16908:	moveq	r2, #4
   1690c:	movne	r2, #7
   16910:	strh	r2, [r9, #60]	; 0x3c
   16914:	ldr	r0, [r9, #12]
   16918:	cmp	r0, #0
   1691c:	beq	16828 <__assert_fail@plt+0x55e0>
   16920:	bl	1123c <closedir@plt>
   16924:	mov	r3, #0
   16928:	str	r3, [r9, #12]
   1692c:	b	16828 <__assert_fail@plt+0x55e0>
   16930:	ldr	r3, [pc, #608]	; 16b98 <__assert_fail@plt+0x5950>
   16934:	mov	r2, r7
   16938:	str	r3, [r5, #44]	; 0x2c
   1693c:	ldr	r1, [sp, #8]
   16940:	mov	r0, r5
   16944:	bl	15770 <__assert_fail@plt+0x4528>
   16948:	mov	r3, #0
   1694c:	str	r3, [r5, #44]	; 0x2c
   16950:	str	r0, [sp, #8]
   16954:	ldr	r0, [sp, #8]
   16958:	add	sp, sp, #60	; 0x3c
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	mov	r3, #0
   16964:	str	r3, [sp, #52]	; 0x34
   16968:	ldr	r0, [r5, #48]	; 0x30
   1696c:	b	1626c <__assert_fail@plt+0x5024>
   16970:	add	r4, r5, #56	; 0x38
   16974:	mov	r1, r4
   16978:	mov	r2, r9
   1697c:	bl	16140 <__assert_fail@plt+0x4ef8>
   16980:	mov	r3, #0
   16984:	mov	r2, r9
   16988:	add	r1, r5, #48	; 0x30
   1698c:	ldr	r0, [r5, #32]
   16990:	bl	15bc0 <__assert_fail@plt+0x4978>
   16994:	mov	r1, r4
   16998:	mov	r2, r9
   1699c:	ldr	r0, [r5, #48]	; 0x30
   169a0:	bl	16090 <__assert_fail@plt+0x4e48>
   169a4:	subs	r4, r0, #0
   169a8:	bne	165b4 <__assert_fail@plt+0x536c>
   169ac:	bl	1111c <__errno_location@plt>
   169b0:	mov	r3, #12
   169b4:	str	r4, [sp, #8]
   169b8:	str	r3, [r0]
   169bc:	b	167b8 <__assert_fail@plt+0x5570>
   169c0:	ldr	r3, [sp, #36]	; 0x24
   169c4:	cmp	r3, #3
   169c8:	bne	169e0 <__assert_fail@plt+0x5798>
   169cc:	ldrh	r3, [r9, #60]	; 0x3c
   169d0:	cmp	r3, #4
   169d4:	cmpne	r3, #7
   169d8:	movne	r3, #6
   169dc:	strhne	r3, [r9, #60]	; 0x3c
   169e0:	ldr	r0, [sp, #8]
   169e4:	bl	158bc <__assert_fail@plt+0x4674>
   169e8:	mov	r3, #0
   169ec:	str	r3, [sp, #8]
   169f0:	ldr	r0, [sp, #8]
   169f4:	add	sp, sp, #60	; 0x3c
   169f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169fc:	mov	r3, #0
   16a00:	mov	r2, r9
   16a04:	add	r1, r5, #48	; 0x30
   16a08:	ldr	r0, [r5, #32]
   16a0c:	bl	15bc0 <__assert_fail@plt+0x4978>
   16a10:	strh	r0, [r9, #60]	; 0x3c
   16a14:	b	165b4 <__assert_fail@plt+0x536c>
   16a18:	ldr	r0, [sp, #44]	; 0x2c
   16a1c:	mov	r2, #3
   16a20:	ldr	r1, [pc, #372]	; 16b9c <__assert_fail@plt+0x5954>
   16a24:	bl	18f30 <fts_children@@Base+0x16f4>
   16a28:	subs	r3, r0, #0
   16a2c:	str	r3, [sp, #44]	; 0x2c
   16a30:	bge	16604 <__assert_fail@plt+0x53bc>
   16a34:	ldrh	r4, [r9, #62]	; 0x3e
   16a38:	tst	r7, r6
   16a3c:	ldr	r6, [r9, #12]
   16a40:	orr	r4, r4, #1
   16a44:	bne	16634 <__assert_fail@plt+0x53ec>
   16a48:	strh	r4, [r9, #62]	; 0x3e
   16a4c:	mov	r0, r6
   16a50:	bl	1123c <closedir@plt>
   16a54:	ldr	r0, [r5, #48]	; 0x30
   16a58:	b	1666c <__assert_fail@plt+0x5424>
   16a5c:	ldr	r3, [pc, #316]	; 16ba0 <__assert_fail@plt+0x5958>
   16a60:	mvn	r2, #0
   16a64:	ldr	r1, [r9, #4]
   16a68:	mov	r0, r5
   16a6c:	bl	15e84 <__assert_fail@plt+0x4c3c>
   16a70:	adds	r0, r0, #0
   16a74:	movne	r0, #1
   16a78:	b	168a8 <__assert_fail@plt+0x5660>
   16a7c:	bl	1111c <__errno_location@plt>
   16a80:	mov	r5, r0
   16a84:	ldr	r0, [sp, #44]	; 0x2c
   16a88:	ldr	r6, [r5]
   16a8c:	bl	11224 <close@plt>
   16a90:	str	r6, [r5]
   16a94:	str	r4, [r9, #12]
   16a98:	ldr	r3, [sp, #36]	; 0x24
   16a9c:	cmp	r3, #3
   16aa0:	bne	169e8 <__assert_fail@plt+0x57a0>
   16aa4:	mov	r3, #4
   16aa8:	strh	r3, [r9, #60]	; 0x3c
   16aac:	bl	1111c <__errno_location@plt>
   16ab0:	mov	r3, #0
   16ab4:	str	r3, [sp, #8]
   16ab8:	ldr	r3, [r0]
   16abc:	str	r3, [r9, #32]
   16ac0:	b	167b8 <__assert_fail@plt+0x5570>
   16ac4:	ldr	r0, [r9, #12]
   16ac8:	bl	1123c <closedir@plt>
   16acc:	ldr	r3, [sp, #36]	; 0x24
   16ad0:	mov	r4, #0
   16ad4:	cmp	r3, #3
   16ad8:	str	r4, [r9, #12]
   16adc:	bne	169e8 <__assert_fail@plt+0x57a0>
   16ae0:	mov	r3, #4
   16ae4:	strh	r3, [r9, #60]	; 0x3c
   16ae8:	bl	1111c <__errno_location@plt>
   16aec:	str	r4, [sp, #8]
   16af0:	ldr	r3, [r0]
   16af4:	str	r3, [r9, #32]
   16af8:	b	167b8 <__assert_fail@plt+0x5570>
   16afc:	ldr	r0, [sp, #44]	; 0x2c
   16b00:	bl	11224 <close@plt>
   16b04:	ldr	r0, [r5, #48]	; 0x30
   16b08:	b	1666c <__assert_fail@plt+0x5424>
   16b0c:	ldr	r3, [r5, #48]	; 0x30
   16b10:	mov	r2, #7
   16b14:	orr	r3, r3, #16384	; 0x4000
   16b18:	strh	r2, [r9, #60]	; 0x3c
   16b1c:	ldr	r0, [sp, #8]
   16b20:	str	r3, [r5, #48]	; 0x30
   16b24:	bl	158bc <__assert_fail@plt+0x4674>
   16b28:	mov	r3, #0
   16b2c:	str	r3, [sp, #8]
   16b30:	b	167b8 <__assert_fail@plt+0x5570>
   16b34:	ldr	r9, [sp, #12]
   16b38:	mov	r0, r4
   16b3c:	bl	10fc0 <free@plt>
   16b40:	ldr	r0, [sp, #8]
   16b44:	bl	158bc <__assert_fail@plt+0x4674>
   16b48:	ldr	r0, [r9, #12]
   16b4c:	bl	1123c <closedir@plt>
   16b50:	ldr	r3, [r5, #48]	; 0x30
   16b54:	mov	r2, #0
   16b58:	orr	r3, r3, #16384	; 0x4000
   16b5c:	mov	r0, #7
   16b60:	mov	r1, #36	; 0x24
   16b64:	str	r2, [r9, #12]
   16b68:	strh	r0, [r9, #60]	; 0x3c
   16b6c:	str	r2, [sp, #8]
   16b70:	str	r3, [r5, #48]	; 0x30
   16b74:	str	r1, [r8]
   16b78:	b	167b8 <__assert_fail@plt+0x5570>
   16b7c:	andeq	r2, r0, r0, lsl r7
   16b80:	andeq	sl, r1, r0, lsl #9
   16b84:	andeq	r2, r0, r1, lsl r7
   16b88:	andeq	r8, r1, r0, lsr #13
   16b8c:	andeq	r6, r0, r9, ror #18
   16b90:			; <UNDEFINED> instruction: 0x01021994
   16b94:			; <UNDEFINED> instruction: 0xff534d42
   16b98:	andeq	r5, r1, r0, asr #14
   16b9c:	andeq	r0, r0, r6, lsl #8
   16ba0:			; <UNDEFINED> instruction: 0x0001a4b0

00016ba4 <fts_open@@Base>:
   16ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba8:	bic	r5, r1, #8128	; 0x1fc0
   16bac:	bic	r5, r5, #63	; 0x3f
   16bb0:	cmp	r5, #0
   16bb4:	sub	sp, sp, #20
   16bb8:	bne	16ee0 <fts_open@@Base+0x33c>
   16bbc:	and	r3, r1, #516	; 0x204
   16bc0:	cmp	r3, #516	; 0x204
   16bc4:	mov	r7, r1
   16bc8:	beq	16e74 <fts_open@@Base+0x2d0>
   16bcc:	ands	r5, r1, #18
   16bd0:	beq	16e74 <fts_open@@Base+0x2d0>
   16bd4:	mov	r6, r0
   16bd8:	mov	r1, #1
   16bdc:	mov	r0, #96	; 0x60
   16be0:	mov	r9, r2
   16be4:	bl	10f78 <calloc@plt>
   16be8:	subs	r5, r0, #0
   16bec:	beq	16e38 <fts_open@@Base+0x294>
   16bf0:	tst	r7, #2
   16bf4:	bicne	r3, r7, #512	; 0x200
   16bf8:	orrne	r3, r3, #4
   16bfc:	strne	r3, [r5, #48]	; 0x30
   16c00:	ldr	r3, [r6]
   16c04:	streq	r7, [r5, #48]	; 0x30
   16c08:	mvn	r2, #99	; 0x63
   16c0c:	cmp	r3, #0
   16c10:	str	r9, [r5, #44]	; 0x2c
   16c14:	str	r2, [r5, #32]
   16c18:	beq	16efc <fts_open@@Base+0x358>
   16c1c:	mov	r8, r6
   16c20:	mov	r4, #0
   16c24:	mov	r0, r3
   16c28:	bl	110f8 <strlen@plt>
   16c2c:	ldr	r3, [r8, #4]!
   16c30:	cmp	r4, r0
   16c34:	movcc	r4, r0
   16c38:	cmp	r3, #0
   16c3c:	bne	16c24 <fts_open@@Base+0x80>
   16c40:	add	r2, r4, #1
   16c44:	cmp	r2, #4096	; 0x1000
   16c48:	movcc	r2, #4096	; 0x1000
   16c4c:	add	r1, r5, #36	; 0x24
   16c50:	add	r0, r5, #24
   16c54:	bl	15d4c <__assert_fail@plt+0x4b04>
   16c58:	subs	fp, r0, #0
   16c5c:	beq	16e5c <fts_open@@Base+0x2b8>
   16c60:	ldr	sl, [r6]
   16c64:	cmp	sl, #0
   16c68:	beq	16e8c <fts_open@@Base+0x2e8>
   16c6c:	mov	r2, #0
   16c70:	ldr	r1, [pc, #704]	; 16f38 <fts_open@@Base+0x394>
   16c74:	mov	r0, r5
   16c78:	bl	15848 <__assert_fail@plt+0x4600>
   16c7c:	subs	sl, r0, #0
   16c80:	beq	16e54 <fts_open@@Base+0x2b0>
   16c84:	mvn	r3, #0
   16c88:	cmp	r9, #0
   16c8c:	str	r3, [sl, #48]	; 0x30
   16c90:	str	r3, [sl, #56]	; 0x38
   16c94:	ldr	r4, [r6]
   16c98:	beq	16ca8 <fts_open@@Base+0x104>
   16c9c:	ldr	fp, [r5, #48]	; 0x30
   16ca0:	lsr	fp, fp, #10
   16ca4:	and	fp, fp, #1
   16ca8:	cmp	r4, #0
   16cac:	beq	16f30 <fts_open@@Base+0x38c>
   16cb0:	lsr	r7, r7, #12
   16cb4:	mov	r3, #0
   16cb8:	eor	r7, r7, #1
   16cbc:	and	r2, r7, #1
   16cc0:	str	r3, [sp, #8]
   16cc4:	mov	r8, r3
   16cc8:	mov	r7, r3
   16ccc:	add	r3, r5, #48	; 0x30
   16cd0:	str	r2, [sp, #4]
   16cd4:	str	r3, [sp, #12]
   16cd8:	b	16d10 <fts_open@@Base+0x16c>
   16cdc:	cmp	r9, r1
   16ce0:	mov	r0, #2
   16ce4:	mov	r1, #0
   16ce8:	mov	r3, #11
   16cec:	strd	r0, [r4, #120]	; 0x78
   16cf0:	strh	r3, [r4, #60]	; 0x3c
   16cf4:	beq	16ecc <fts_open@@Base+0x328>
   16cf8:	str	r7, [r4, #8]
   16cfc:	mov	r7, r4
   16d00:	ldr	r4, [r6, #4]!
   16d04:	add	r8, r8, #1
   16d08:	cmp	r4, #0
   16d0c:	beq	16dbc <fts_open@@Base+0x218>
   16d10:	mov	r0, r4
   16d14:	bl	110f8 <strlen@plt>
   16d18:	ldr	r3, [sp, #4]
   16d1c:	cmp	r0, #2
   16d20:	movls	r3, #0
   16d24:	andhi	r3, r3, #1
   16d28:	cmp	r3, #0
   16d2c:	mov	r2, r0
   16d30:	bne	16e9c <fts_open@@Base+0x2f8>
   16d34:	mov	r1, r4
   16d38:	mov	r0, r5
   16d3c:	bl	15848 <__assert_fail@plt+0x4600>
   16d40:	subs	r4, r0, #0
   16d44:	beq	16e44 <fts_open@@Base+0x2a0>
   16d48:	cmp	r7, #0
   16d4c:	moveq	r3, #0
   16d50:	andne	r3, fp, #1
   16d54:	add	r2, r4, #176	; 0xb0
   16d58:	mov	r1, #0
   16d5c:	cmp	r3, #0
   16d60:	str	r1, [r4, #48]	; 0x30
   16d64:	str	sl, [r4, #4]
   16d68:	str	r2, [r4, #24]
   16d6c:	bne	16cdc <fts_open@@Base+0x138>
   16d70:	mov	r2, r4
   16d74:	ldr	r1, [sp, #12]
   16d78:	ldr	r0, [r5, #32]
   16d7c:	bl	15bc0 <__assert_fail@plt+0x4978>
   16d80:	cmp	r9, #0
   16d84:	strh	r0, [r4, #60]	; 0x3c
   16d88:	bne	16cf8 <fts_open@@Base+0x154>
   16d8c:	cmp	r7, #0
   16d90:	str	r9, [r4, #8]
   16d94:	streq	r4, [sp, #8]
   16d98:	moveq	r7, r4
   16d9c:	beq	16d00 <fts_open@@Base+0x15c>
   16da0:	ldr	r3, [sp, #8]
   16da4:	str	r4, [sp, #8]
   16da8:	str	r4, [r3, #8]
   16dac:	ldr	r4, [r6, #4]!
   16db0:	add	r8, r8, #1
   16db4:	cmp	r4, #0
   16db8:	bne	16d10 <fts_open@@Base+0x16c>
   16dbc:	cmp	r9, #0
   16dc0:	cmpne	r8, #1
   16dc4:	bls	16ddc <fts_open@@Base+0x238>
   16dc8:	mov	r1, r7
   16dcc:	mov	r2, r8
   16dd0:	mov	r0, r5
   16dd4:	bl	15770 <__assert_fail@plt+0x4528>
   16dd8:	mov	r7, r0
   16ddc:	mov	r2, #0
   16de0:	ldr	r1, [pc, #336]	; 16f38 <fts_open@@Base+0x394>
   16de4:	mov	r0, r5
   16de8:	bl	15848 <__assert_fail@plt+0x4600>
   16dec:	cmp	r0, #0
   16df0:	str	r0, [r5]
   16df4:	beq	16e44 <fts_open@@Base+0x2a0>
   16df8:	mov	r2, #1
   16dfc:	mov	r3, #9
   16e00:	str	r7, [r0, #8]
   16e04:	str	r2, [r0, #48]	; 0x30
   16e08:	strh	r3, [r0, #60]	; 0x3c
   16e0c:	add	r1, r5, #56	; 0x38
   16e10:	ldr	r0, [r5, #48]	; 0x30
   16e14:	bl	15dc8 <__assert_fail@plt+0x4b80>
   16e18:	cmp	r0, #0
   16e1c:	beq	16e44 <fts_open@@Base+0x2a0>
   16e20:	ldr	r1, [r5, #48]	; 0x30
   16e24:	tst	r1, #516	; 0x204
   16e28:	beq	16f04 <fts_open@@Base+0x360>
   16e2c:	mvn	r1, #0
   16e30:	add	r0, r5, #60	; 0x3c
   16e34:	bl	18cfc <fts_children@@Base+0x14c0>
   16e38:	mov	r0, r5
   16e3c:	add	sp, sp, #20
   16e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e44:	mov	r0, r7
   16e48:	bl	158bc <__assert_fail@plt+0x4674>
   16e4c:	mov	r0, sl
   16e50:	bl	10fc0 <free@plt>
   16e54:	ldr	r0, [r5, #24]
   16e58:	bl	10fc0 <free@plt>
   16e5c:	mov	r0, r5
   16e60:	bl	10fc0 <free@plt>
   16e64:	mov	r5, #0
   16e68:	mov	r0, r5
   16e6c:	add	sp, sp, #20
   16e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e74:	bl	1111c <__errno_location@plt>
   16e78:	mov	r3, #22
   16e7c:	str	r3, [r0]
   16e80:	mov	r0, r5
   16e84:	add	sp, sp, #20
   16e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e8c:	cmp	r9, #0
   16e90:	beq	16f28 <fts_open@@Base+0x384>
   16e94:	mov	r4, sl
   16e98:	b	16c9c <fts_open@@Base+0xf8>
   16e9c:	sub	r1, r0, #1
   16ea0:	add	r3, r4, r1
   16ea4:	ldrb	r1, [r4, r1]
   16ea8:	cmp	r1, #47	; 0x2f
   16eac:	bne	16d34 <fts_open@@Base+0x190>
   16eb0:	ldrb	r1, [r3, #-1]!
   16eb4:	cmp	r1, #47	; 0x2f
   16eb8:	bne	16d34 <fts_open@@Base+0x190>
   16ebc:	sub	r2, r2, #1
   16ec0:	cmp	r2, #1
   16ec4:	bne	16eb0 <fts_open@@Base+0x30c>
   16ec8:	b	16d34 <fts_open@@Base+0x190>
   16ecc:	ldr	r3, [sp, #8]
   16ed0:	str	r9, [r4, #8]
   16ed4:	str	r4, [sp, #8]
   16ed8:	str	r4, [r3, #8]
   16edc:	b	16dac <fts_open@@Base+0x208>
   16ee0:	bl	1111c <__errno_location@plt>
   16ee4:	mov	r5, #0
   16ee8:	mov	r3, #22
   16eec:	str	r3, [r0]
   16ef0:	mov	r0, r5
   16ef4:	add	sp, sp, #20
   16ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16efc:	mov	r2, #4096	; 0x1000
   16f00:	b	16c4c <fts_open@@Base+0xa8>
   16f04:	ldr	r2, [pc, #48]	; 16f3c <fts_open@@Base+0x398>
   16f08:	ldr	r0, [r5, #32]
   16f0c:	bl	15e48 <__assert_fail@plt+0x4c00>
   16f10:	cmp	r0, #0
   16f14:	str	r0, [r5, #28]
   16f18:	ldrlt	r3, [r5, #48]	; 0x30
   16f1c:	orrlt	r3, r3, #4
   16f20:	strlt	r3, [r5, #48]	; 0x30
   16f24:	b	16e2c <fts_open@@Base+0x288>
   16f28:	mov	r7, sl
   16f2c:	b	16ddc <fts_open@@Base+0x238>
   16f30:	mov	r7, r4
   16f34:	b	16ddc <fts_open@@Base+0x238>
   16f38:	muleq	r1, r8, r7
   16f3c:			; <UNDEFINED> instruction: 0x0001a4b4

00016f40 <fts_close@@Base>:
   16f40:	ldr	r3, [r0]
   16f44:	push	{r4, r5, r6, lr}
   16f48:	cmp	r3, #0
   16f4c:	mov	r5, r0
   16f50:	beq	16f8c <fts_close@@Base+0x4c>
   16f54:	ldr	r2, [r3, #48]	; 0x30
   16f58:	cmp	r2, #0
   16f5c:	blt	170a4 <fts_close@@Base+0x164>
   16f60:	ldr	r4, [r3, #8]
   16f64:	mov	r0, r3
   16f68:	cmp	r4, #0
   16f6c:	ldreq	r4, [r3, #4]
   16f70:	bl	10fc0 <free@plt>
   16f74:	mov	r3, r4
   16f78:	ldr	r2, [r4, #48]	; 0x30
   16f7c:	cmp	r2, #0
   16f80:	bge	16f60 <fts_close@@Base+0x20>
   16f84:	mov	r0, r4
   16f88:	bl	10fc0 <free@plt>
   16f8c:	ldr	r0, [r5, #4]
   16f90:	cmp	r0, #0
   16f94:	beq	16f9c <fts_close@@Base+0x5c>
   16f98:	bl	158bc <__assert_fail@plt+0x4674>
   16f9c:	ldr	r0, [r5, #8]
   16fa0:	bl	10fc0 <free@plt>
   16fa4:	ldr	r0, [r5, #24]
   16fa8:	bl	10fc0 <free@plt>
   16fac:	ldr	r3, [r5, #48]	; 0x30
   16fb0:	tst	r3, #512	; 0x200
   16fb4:	bne	17018 <fts_close@@Base+0xd8>
   16fb8:	tst	r3, #4
   16fbc:	beq	17044 <fts_close@@Base+0x104>
   16fc0:	mov	r4, #0
   16fc4:	add	r0, r5, #60	; 0x3c
   16fc8:	bl	158f0 <__assert_fail@plt+0x46a8>
   16fcc:	ldr	r0, [r5, #52]	; 0x34
   16fd0:	cmp	r0, #0
   16fd4:	beq	16fdc <fts_close@@Base+0x9c>
   16fd8:	bl	18750 <fts_children@@Base+0xf14>
   16fdc:	ldr	r2, [r5, #48]	; 0x30
   16fe0:	ldr	r3, [pc, #212]	; 170bc <fts_close@@Base+0x17c>
   16fe4:	ldr	r0, [r5, #56]	; 0x38
   16fe8:	and	r3, r3, r2
   16fec:	cmp	r3, #0
   16ff0:	beq	1703c <fts_close@@Base+0xfc>
   16ff4:	cmp	r0, #0
   16ff8:	beq	17000 <fts_close@@Base+0xc0>
   16ffc:	bl	18750 <fts_children@@Base+0xf14>
   17000:	mov	r0, r5
   17004:	bl	10fc0 <free@plt>
   17008:	cmp	r4, #0
   1700c:	bne	170ac <fts_close@@Base+0x16c>
   17010:	mov	r0, r4
   17014:	pop	{r4, r5, r6, pc}
   17018:	ldr	r0, [r5, #32]
   1701c:	cmp	r0, #0
   17020:	blt	16fc0 <fts_close@@Base+0x80>
   17024:	bl	11224 <close@plt>
   17028:	cmp	r0, #0
   1702c:	beq	16fc0 <fts_close@@Base+0x80>
   17030:	bl	1111c <__errno_location@plt>
   17034:	ldr	r4, [r0]
   17038:	b	16fc4 <fts_close@@Base+0x84>
   1703c:	bl	10fc0 <free@plt>
   17040:	b	17000 <fts_close@@Base+0xc0>
   17044:	ldr	r0, [r5, #28]
   17048:	bl	111d0 <fchdir@plt>
   1704c:	cmp	r0, #0
   17050:	bne	17074 <fts_close@@Base+0x134>
   17054:	ldr	r0, [r5, #28]
   17058:	bl	11224 <close@plt>
   1705c:	cmp	r0, #0
   17060:	beq	16fc0 <fts_close@@Base+0x80>
   17064:	bl	1111c <__errno_location@plt>
   17068:	mov	r6, r0
   1706c:	ldr	r4, [r6]
   17070:	b	16fc4 <fts_close@@Base+0x84>
   17074:	bl	1111c <__errno_location@plt>
   17078:	mov	r6, r0
   1707c:	ldr	r0, [r5, #28]
   17080:	ldr	r4, [r6]
   17084:	bl	11224 <close@plt>
   17088:	clz	r3, r4
   1708c:	lsr	r3, r3, #5
   17090:	cmp	r0, #0
   17094:	moveq	r3, #0
   17098:	cmp	r3, #0
   1709c:	beq	16fc4 <fts_close@@Base+0x84>
   170a0:	b	1706c <fts_close@@Base+0x12c>
   170a4:	mov	r4, r3
   170a8:	b	16f84 <fts_close@@Base+0x44>
   170ac:	bl	1111c <__errno_location@plt>
   170b0:	str	r4, [r0]
   170b4:	mvn	r4, #0
   170b8:	b	17010 <fts_close@@Base+0xd0>
   170bc:	andeq	r0, r0, r2, lsl #2

000170c0 <fts_read@@Base>:
   170c0:	push	{r4, r5, r6, r7, r8, lr}
   170c4:	ldr	r4, [r0]
   170c8:	cmp	r4, #0
   170cc:	beq	171ec <fts_read@@Base+0x12c>
   170d0:	ldr	r1, [r0, #48]	; 0x30
   170d4:	ands	r3, r1, #16384	; 0x4000
   170d8:	bne	171ec <fts_read@@Base+0x12c>
   170dc:	ldrh	r2, [r4, #64]	; 0x40
   170e0:	mov	r8, r0
   170e4:	mov	r0, #3
   170e8:	cmp	r2, #1
   170ec:	strh	r0, [r4, #64]	; 0x40
   170f0:	beq	174a8 <fts_read@@Base+0x3e8>
   170f4:	cmp	r2, #2
   170f8:	ldrh	r3, [r4, #60]	; 0x3c
   170fc:	beq	171f8 <fts_read@@Base+0x138>
   17100:	cmp	r3, #1
   17104:	bne	17134 <fts_read@@Base+0x74>
   17108:	b	172a4 <fts_read@@Base+0x1e4>
   1710c:	mov	r0, r4
   17110:	str	r5, [r8]
   17114:	bl	10fc0 <free@plt>
   17118:	ldr	r4, [r5, #48]	; 0x30
   1711c:	cmp	r4, #0
   17120:	beq	172ec <fts_read@@Base+0x22c>
   17124:	ldrh	r3, [r5, #64]	; 0x40
   17128:	mov	r4, r5
   1712c:	cmp	r3, #4
   17130:	bne	1739c <fts_read@@Base+0x2dc>
   17134:	ldr	r5, [r4, #8]
   17138:	cmp	r5, #0
   1713c:	bne	1710c <fts_read@@Base+0x4c>
   17140:	ldr	r6, [r4, #4]
   17144:	ldr	r3, [r6, #12]
   17148:	cmp	r3, #0
   1714c:	bne	17640 <fts_read@@Base+0x580>
   17150:	str	r6, [r8]
   17154:	mov	r0, r4
   17158:	bl	10fc0 <free@plt>
   1715c:	ldr	r3, [r6, #48]	; 0x30
   17160:	cmn	r3, #1
   17164:	beq	17574 <fts_read@@Base+0x4b4>
   17168:	ldrh	r3, [r6, #60]	; 0x3c
   1716c:	cmp	r3, #11
   17170:	beq	177f8 <fts_read@@Base+0x738>
   17174:	ldr	r3, [r6, #40]	; 0x28
   17178:	ldr	r2, [r8, #24]
   1717c:	mov	r1, #0
   17180:	strb	r1, [r2, r3]
   17184:	ldr	r3, [r6, #48]	; 0x30
   17188:	cmp	r3, r1
   1718c:	beq	17594 <fts_read@@Base+0x4d4>
   17190:	ldrh	r3, [r6, #62]	; 0x3e
   17194:	tst	r3, #2
   17198:	bne	17528 <fts_read@@Base+0x468>
   1719c:	tst	r3, #1
   171a0:	beq	176c8 <fts_read@@Base+0x608>
   171a4:	ldrh	r3, [r6, #60]	; 0x3c
   171a8:	ldr	r0, [r8, #48]	; 0x30
   171ac:	cmp	r3, #2
   171b0:	beq	171e0 <fts_read@@Base+0x120>
   171b4:	ldr	r3, [r6, #32]
   171b8:	cmp	r3, #0
   171bc:	movne	r3, #7
   171c0:	strhne	r3, [r6, #60]	; 0x3c
   171c4:	bne	171e0 <fts_read@@Base+0x120>
   171c8:	mov	r3, #6
   171cc:	strh	r3, [r6, #60]	; 0x3c
   171d0:	mov	r2, r6
   171d4:	add	r1, r8, #56	; 0x38
   171d8:	bl	16140 <__assert_fail@plt+0x4ef8>
   171dc:	ldr	r0, [r8, #48]	; 0x30
   171e0:	tst	r0, #16384	; 0x4000
   171e4:	moveq	r4, r6
   171e8:	beq	171f0 <fts_read@@Base+0x130>
   171ec:	mov	r4, #0
   171f0:	mov	r0, r4
   171f4:	pop	{r4, r5, r6, r7, r8, pc}
   171f8:	sub	r2, r3, #12
   171fc:	cmp	r2, #1
   17200:	bls	17438 <fts_read@@Base+0x378>
   17204:	cmp	r3, #1
   17208:	bne	17134 <fts_read@@Base+0x74>
   1720c:	tst	r1, #64	; 0x40
   17210:	beq	17228 <fts_read@@Base+0x168>
   17214:	ldrd	r6, [r4, #72]	; 0x48
   17218:	ldrd	r2, [r8, #16]
   1721c:	cmp	r7, r3
   17220:	cmpeq	r6, r2
   17224:	bne	172ac <fts_read@@Base+0x1ec>
   17228:	ldr	r0, [r8, #4]
   1722c:	cmp	r0, #0
   17230:	beq	174d4 <fts_read@@Base+0x414>
   17234:	tst	r1, #8192	; 0x2000
   17238:	bne	174c0 <fts_read@@Base+0x400>
   1723c:	ldr	r3, [r4, #24]
   17240:	mvn	r2, #0
   17244:	mov	r1, r4
   17248:	mov	r0, r8
   1724c:	bl	15e84 <__assert_fail@plt+0x4c3c>
   17250:	cmp	r0, #0
   17254:	beq	1755c <fts_read@@Base+0x49c>
   17258:	bl	1111c <__errno_location@plt>
   1725c:	ldrh	r3, [r4, #62]	; 0x3e
   17260:	ldr	r5, [r8, #4]
   17264:	orr	r3, r3, #1
   17268:	cmp	r5, #0
   1726c:	ldr	r2, [r0]
   17270:	strh	r3, [r4, #62]	; 0x3e
   17274:	str	r2, [r4, #32]
   17278:	beq	17298 <fts_read@@Base+0x1d8>
   1727c:	mov	r3, r5
   17280:	ldr	r2, [r3, #4]
   17284:	ldr	r2, [r2, #24]
   17288:	str	r2, [r3, #24]
   1728c:	ldr	r3, [r3, #8]
   17290:	cmp	r3, #0
   17294:	bne	17280 <fts_read@@Base+0x1c0>
   17298:	mov	r3, #0
   1729c:	str	r3, [r8, #4]
   172a0:	b	173a4 <fts_read@@Base+0x2e4>
   172a4:	cmp	r2, #4
   172a8:	bne	1720c <fts_read@@Base+0x14c>
   172ac:	ldrh	r3, [r4, #62]	; 0x3e
   172b0:	tst	r3, #2
   172b4:	bne	17690 <fts_read@@Base+0x5d0>
   172b8:	ldr	r0, [r8, #4]
   172bc:	cmp	r0, #0
   172c0:	beq	172d0 <fts_read@@Base+0x210>
   172c4:	bl	158bc <__assert_fail@plt+0x4674>
   172c8:	mov	r3, #0
   172cc:	str	r3, [r8, #4]
   172d0:	mov	r3, #6
   172d4:	strh	r3, [r4, #60]	; 0x3c
   172d8:	mov	r2, r4
   172dc:	add	r1, r8, #56	; 0x38
   172e0:	ldr	r0, [r8, #48]	; 0x30
   172e4:	bl	16140 <__assert_fail@plt+0x4ef8>
   172e8:	b	171f0 <fts_read@@Base+0x130>
   172ec:	mov	r0, r8
   172f0:	bl	15b70 <__assert_fail@plt+0x4928>
   172f4:	cmp	r0, #0
   172f8:	bne	17678 <fts_read@@Base+0x5b8>
   172fc:	ldr	r2, [r8, #48]	; 0x30
   17300:	ldr	r3, [pc, #1268]	; 177fc <fts_read@@Base+0x73c>
   17304:	ldr	r0, [r8, #56]	; 0x38
   17308:	and	r3, r3, r2
   1730c:	cmp	r3, #0
   17310:	beq	17688 <fts_read@@Base+0x5c8>
   17314:	cmp	r0, #0
   17318:	beq	17320 <fts_read@@Base+0x260>
   1731c:	bl	18750 <fts_children@@Base+0xf14>
   17320:	ldr	r2, [r5, #52]	; 0x34
   17324:	add	r4, r5, #176	; 0xb0
   17328:	str	r2, [r5, #40]	; 0x28
   1732c:	mov	r1, r4
   17330:	add	r2, r2, #1
   17334:	ldr	r0, [r8, #24]
   17338:	bl	10fb4 <memmove@plt>
   1733c:	mov	r0, r4
   17340:	mov	r1, #47	; 0x2f
   17344:	bl	11194 <strrchr@plt>
   17348:	cmp	r0, #0
   1734c:	beq	1737c <fts_read@@Base+0x2bc>
   17350:	cmp	r4, r0
   17354:	beq	17564 <fts_read@@Base+0x4a4>
   17358:	add	r6, r0, #1
   1735c:	mov	r0, r6
   17360:	bl	110f8 <strlen@plt>
   17364:	mov	r1, r6
   17368:	mov	r7, r0
   1736c:	add	r2, r7, #1
   17370:	mov	r0, r4
   17374:	bl	10fb4 <memmove@plt>
   17378:	str	r7, [r5, #52]	; 0x34
   1737c:	ldr	r3, [r8, #24]
   17380:	add	r1, r8, #56	; 0x38
   17384:	str	r3, [r5, #28]
   17388:	str	r3, [r5, #24]
   1738c:	ldr	r0, [r8, #48]	; 0x30
   17390:	bl	15dc8 <__assert_fail@plt+0x4b80>
   17394:	ldrh	r0, [r5, #60]	; 0x3c
   17398:	b	173e8 <fts_read@@Base+0x328>
   1739c:	cmp	r3, #2
   173a0:	beq	1769c <fts_read@@Base+0x5dc>
   173a4:	ldr	r3, [r5, #4]
   173a8:	mov	ip, #47	; 0x2f
   173ac:	ldr	r2, [r8, #24]
   173b0:	ldr	r1, [r3, #40]	; 0x28
   173b4:	ldr	r0, [r3, #28]
   173b8:	sub	r3, r1, #1
   173bc:	ldrb	r0, [r0, r3]
   173c0:	cmp	r0, ip
   173c4:	movne	r3, r1
   173c8:	add	r0, r2, r3
   173cc:	strb	ip, [r2, r3]
   173d0:	ldr	r2, [r5, #52]	; 0x34
   173d4:	add	r0, r0, #1
   173d8:	add	r2, r2, #1
   173dc:	add	r1, r5, #176	; 0xb0
   173e0:	bl	10fb4 <memmove@plt>
   173e4:	ldrh	r0, [r5, #60]	; 0x3c
   173e8:	cmp	r0, #11
   173ec:	str	r5, [r8]
   173f0:	beq	17468 <fts_read@@Base+0x3a8>
   173f4:	cmp	r0, #1
   173f8:	bne	17484 <fts_read@@Base+0x3c4>
   173fc:	ldr	r3, [r5, #48]	; 0x30
   17400:	cmp	r3, #0
   17404:	beq	17498 <fts_read@@Base+0x3d8>
   17408:	mov	r4, r5
   1740c:	mov	r2, r5
   17410:	add	r1, r8, #56	; 0x38
   17414:	ldr	r0, [r8, #48]	; 0x30
   17418:	bl	16090 <__assert_fail@plt+0x4e48>
   1741c:	subs	r5, r0, #0
   17420:	bne	171f0 <fts_read@@Base+0x130>
   17424:	bl	1111c <__errno_location@plt>
   17428:	mov	r3, #12
   1742c:	mov	r4, r5
   17430:	str	r3, [r0]
   17434:	b	171f0 <fts_read@@Base+0x130>
   17438:	mov	r3, #1
   1743c:	mov	r2, r4
   17440:	add	r1, r8, #48	; 0x30
   17444:	ldr	r0, [r8, #32]
   17448:	bl	15bc0 <__assert_fail@plt+0x4978>
   1744c:	cmp	r0, #1
   17450:	strh	r0, [r4, #60]	; 0x3c
   17454:	beq	1770c <fts_read@@Base+0x64c>
   17458:	cmp	r0, #11
   1745c:	str	r4, [r8]
   17460:	bne	171f0 <fts_read@@Base+0x130>
   17464:	mov	r5, r4
   17468:	ldrd	r2, [r5, #120]	; 0x78
   1746c:	cmp	r3, #0
   17470:	cmpeq	r2, #2
   17474:	beq	175d0 <fts_read@@Base+0x510>
   17478:	cmp	r3, #0
   1747c:	cmpeq	r2, #1
   17480:	bne	177f8 <fts_read@@Base+0x738>
   17484:	mov	r4, r5
   17488:	mov	r0, r4
   1748c:	pop	{r4, r5, r6, r7, r8, pc}
   17490:	cmp	r0, #1
   17494:	bne	17484 <fts_read@@Base+0x3c4>
   17498:	ldrd	r2, [r5, #72]	; 0x48
   1749c:	mov	r4, r5
   174a0:	strd	r2, [r8, #16]
   174a4:	b	1740c <fts_read@@Base+0x34c>
   174a8:	mov	r2, r4
   174ac:	add	r1, r8, #48	; 0x30
   174b0:	ldr	r0, [r8, #32]
   174b4:	bl	15bc0 <__assert_fail@plt+0x4978>
   174b8:	strh	r0, [r4, #60]	; 0x3c
   174bc:	b	171f0 <fts_read@@Base+0x130>
   174c0:	bic	r1, r1, #8192	; 0x2000
   174c4:	str	r1, [r8, #48]	; 0x30
   174c8:	bl	158bc <__assert_fail@plt+0x4674>
   174cc:	mov	r3, #0
   174d0:	str	r3, [r8, #4]
   174d4:	mov	r1, #3
   174d8:	mov	r0, r8
   174dc:	bl	16218 <__assert_fail@plt+0x4fd0>
   174e0:	cmp	r0, #0
   174e4:	mov	r5, r0
   174e8:	str	r0, [r8, #4]
   174ec:	bne	17298 <fts_read@@Base+0x1d8>
   174f0:	ldr	r0, [r8, #48]	; 0x30
   174f4:	tst	r0, #16384	; 0x4000
   174f8:	bne	171ec <fts_read@@Base+0x12c>
   174fc:	ldr	r3, [r4, #32]
   17500:	cmp	r3, #0
   17504:	beq	17518 <fts_read@@Base+0x458>
   17508:	ldrh	r3, [r4, #60]	; 0x3c
   1750c:	cmp	r3, #4
   17510:	movne	r3, #7
   17514:	strhne	r3, [r4, #60]	; 0x3c
   17518:	add	r1, r8, #56	; 0x38
   1751c:	mov	r2, r4
   17520:	bl	16140 <__assert_fail@plt+0x4ef8>
   17524:	b	171f0 <fts_read@@Base+0x130>
   17528:	ldr	r3, [r8, #48]	; 0x30
   1752c:	ldr	r1, [r6, #36]	; 0x24
   17530:	tst	r3, #4
   17534:	bne	17550 <fts_read@@Base+0x490>
   17538:	tst	r3, #512	; 0x200
   1753c:	beq	176f4 <fts_read@@Base+0x634>
   17540:	mov	r2, #1
   17544:	mov	r0, r8
   17548:	bl	15ae8 <__assert_fail@plt+0x48a0>
   1754c:	ldr	r1, [r6, #36]	; 0x24
   17550:	mov	r0, r1
   17554:	bl	11224 <close@plt>
   17558:	b	171a4 <fts_read@@Base+0xe4>
   1755c:	ldr	r5, [r8, #4]
   17560:	b	17298 <fts_read@@Base+0x1d8>
   17564:	ldrb	r3, [r4, #1]
   17568:	cmp	r3, #0
   1756c:	beq	1737c <fts_read@@Base+0x2bc>
   17570:	b	17358 <fts_read@@Base+0x298>
   17574:	mov	r0, r6
   17578:	bl	10fc0 <free@plt>
   1757c:	bl	1111c <__errno_location@plt>
   17580:	mov	r3, #0
   17584:	mov	r4, r3
   17588:	str	r3, [r0]
   1758c:	str	r3, [r8]
   17590:	b	171f0 <fts_read@@Base+0x130>
   17594:	mov	r0, r8
   17598:	bl	15b70 <__assert_fail@plt+0x4928>
   1759c:	cmp	r0, #0
   175a0:	beq	171a4 <fts_read@@Base+0xe4>
   175a4:	bl	1111c <__errno_location@plt>
   175a8:	ldr	r3, [r8, #48]	; 0x30
   175ac:	orr	r3, r3, #16384	; 0x4000
   175b0:	ldr	r2, [r0]
   175b4:	str	r2, [r6, #32]
   175b8:	str	r3, [r8, #48]	; 0x30
   175bc:	ldrh	r3, [r6, #60]	; 0x3c
   175c0:	cmp	r3, #2
   175c4:	beq	171ec <fts_read@@Base+0x12c>
   175c8:	ldr	r0, [r8, #48]	; 0x30
   175cc:	b	171b4 <fts_read@@Base+0xf4>
   175d0:	ldr	r4, [r5, #4]
   175d4:	ldr	r0, [r8, #32]
   175d8:	ldr	r3, [r4, #56]	; 0x38
   175dc:	cmp	r3, #0
   175e0:	bne	175f4 <fts_read@@Base+0x534>
   175e4:	ldr	r3, [r8, #48]	; 0x30
   175e8:	and	r3, r3, #24
   175ec:	cmp	r3, #24
   175f0:	beq	17784 <fts_read@@Base+0x6c4>
   175f4:	mov	r3, #0
   175f8:	mov	r2, r5
   175fc:	add	r1, r8, #48	; 0x30
   17600:	bl	15bc0 <__assert_fail@plt+0x4978>
   17604:	ldr	r3, [r5, #88]	; 0x58
   17608:	and	r3, r3, #61440	; 0xf000
   1760c:	cmp	r3, #16384	; 0x4000
   17610:	strh	r0, [r5, #60]	; 0x3c
   17614:	bne	173f4 <fts_read@@Base+0x334>
   17618:	ldr	r3, [r5, #48]	; 0x30
   1761c:	cmp	r3, #0
   17620:	beq	17490 <fts_read@@Base+0x3d0>
   17624:	ldr	r3, [r4, #56]	; 0x38
   17628:	sub	r3, r3, #1
   1762c:	cmn	r3, #3
   17630:	strls	r3, [r4, #56]	; 0x38
   17634:	cmp	r0, #1
   17638:	beq	17408 <fts_read@@Base+0x348>
   1763c:	b	17484 <fts_read@@Base+0x3c4>
   17640:	ldr	r3, [r6, #40]	; 0x28
   17644:	ldr	r2, [r8, #24]
   17648:	str	r6, [r8]
   1764c:	mov	r1, #3
   17650:	strb	r5, [r2, r3]
   17654:	mov	r0, r8
   17658:	bl	16218 <__assert_fail@plt+0x4fd0>
   1765c:	subs	r5, r0, #0
   17660:	bne	176e8 <fts_read@@Base+0x628>
   17664:	ldr	r3, [r8, #48]	; 0x30
   17668:	tst	r3, #16384	; 0x4000
   1766c:	bne	171ec <fts_read@@Base+0x12c>
   17670:	ldr	r6, [r4, #4]
   17674:	b	17150 <fts_read@@Base+0x90>
   17678:	ldr	r3, [r8, #48]	; 0x30
   1767c:	orr	r3, r3, #16384	; 0x4000
   17680:	str	r3, [r8, #48]	; 0x30
   17684:	b	171f0 <fts_read@@Base+0x130>
   17688:	bl	10fc0 <free@plt>
   1768c:	b	17320 <fts_read@@Base+0x260>
   17690:	ldr	r0, [r4, #36]	; 0x24
   17694:	bl	11224 <close@plt>
   17698:	b	172b8 <fts_read@@Base+0x1f8>
   1769c:	mov	r3, #1
   176a0:	mov	r2, r5
   176a4:	add	r1, r8, #48	; 0x30
   176a8:	ldr	r0, [r8, #32]
   176ac:	bl	15bc0 <__assert_fail@plt+0x4978>
   176b0:	cmp	r0, #1
   176b4:	strh	r0, [r5, #60]	; 0x3c
   176b8:	beq	17750 <fts_read@@Base+0x690>
   176bc:	mov	r3, #3
   176c0:	strh	r3, [r5, #64]	; 0x40
   176c4:	b	173a4 <fts_read@@Base+0x2e4>
   176c8:	ldr	r3, [pc, #304]	; 17800 <fts_read@@Base+0x740>
   176cc:	mvn	r2, #0
   176d0:	ldr	r1, [r6, #4]
   176d4:	mov	r0, r8
   176d8:	bl	15e84 <__assert_fail@plt+0x4c3c>
   176dc:	cmp	r0, #0
   176e0:	beq	171a4 <fts_read@@Base+0xe4>
   176e4:	b	175a4 <fts_read@@Base+0x4e4>
   176e8:	mov	r0, r4
   176ec:	bl	10fc0 <free@plt>
   176f0:	b	173a4 <fts_read@@Base+0x2e4>
   176f4:	mov	r0, r1
   176f8:	bl	111d0 <fchdir@plt>
   176fc:	cmp	r0, #0
   17700:	bne	177a4 <fts_read@@Base+0x6e4>
   17704:	ldr	r1, [r6, #36]	; 0x24
   17708:	b	17550 <fts_read@@Base+0x490>
   1770c:	ldr	r1, [r8, #48]	; 0x30
   17710:	tst	r1, #4
   17714:	strne	r4, [r8]
   17718:	movne	r5, r4
   1771c:	bne	173fc <fts_read@@Base+0x33c>
   17720:	ldr	r2, [pc, #220]	; 17804 <fts_read@@Base+0x744>
   17724:	ldr	r0, [r8, #32]
   17728:	bl	15e48 <__assert_fail@plt+0x4c00>
   1772c:	cmp	r0, #0
   17730:	str	r0, [r4, #36]	; 0x24
   17734:	blt	177c4 <fts_read@@Base+0x704>
   17738:	ldrh	r3, [r4, #62]	; 0x3e
   1773c:	ldrh	r0, [r4, #60]	; 0x3c
   17740:	mov	r5, r4
   17744:	orr	r3, r3, #2
   17748:	strh	r3, [r4, #62]	; 0x3e
   1774c:	b	173e8 <fts_read@@Base+0x328>
   17750:	ldr	r1, [r8, #48]	; 0x30
   17754:	tst	r1, #4
   17758:	bne	176bc <fts_read@@Base+0x5fc>
   1775c:	ldr	r2, [pc, #160]	; 17804 <fts_read@@Base+0x744>
   17760:	ldr	r0, [r8, #32]
   17764:	bl	15e48 <__assert_fail@plt+0x4c00>
   17768:	cmp	r0, #0
   1776c:	str	r0, [r5, #36]	; 0x24
   17770:	blt	177e0 <fts_read@@Base+0x720>
   17774:	ldrh	r3, [r5, #62]	; 0x3e
   17778:	orr	r3, r3, #2
   1777c:	strh	r3, [r5, #62]	; 0x3e
   17780:	b	176bc <fts_read@@Base+0x5fc>
   17784:	mov	r1, r0
   17788:	mov	r0, r4
   1778c:	bl	15a54 <__assert_fail@plt+0x480c>
   17790:	cmp	r0, #2
   17794:	ldrheq	r0, [r5, #60]	; 0x3c
   17798:	beq	173f4 <fts_read@@Base+0x334>
   1779c:	ldr	r0, [r8, #32]
   177a0:	b	175f4 <fts_read@@Base+0x534>
   177a4:	bl	1111c <__errno_location@plt>
   177a8:	ldr	r3, [r8, #48]	; 0x30
   177ac:	ldr	r1, [r6, #36]	; 0x24
   177b0:	orr	r3, r3, #16384	; 0x4000
   177b4:	ldr	r2, [r0]
   177b8:	str	r2, [r6, #32]
   177bc:	str	r3, [r8, #48]	; 0x30
   177c0:	b	17550 <fts_read@@Base+0x490>
   177c4:	bl	1111c <__errno_location@plt>
   177c8:	mov	r2, #7
   177cc:	ldr	r3, [r0]
   177d0:	strh	r2, [r4, #60]	; 0x3c
   177d4:	str	r3, [r4, #32]
   177d8:	str	r4, [r8]
   177dc:	b	171f0 <fts_read@@Base+0x130>
   177e0:	bl	1111c <__errno_location@plt>
   177e4:	mov	r2, #7
   177e8:	ldr	r3, [r0]
   177ec:	strh	r2, [r5, #60]	; 0x3c
   177f0:	str	r3, [r5, #32]
   177f4:	b	176bc <fts_read@@Base+0x5fc>
   177f8:	bl	11218 <abort@plt>
   177fc:	andeq	r0, r0, r2, lsl #2
   17800:			; <UNDEFINED> instruction: 0x0001a4b0
   17804:			; <UNDEFINED> instruction: 0x0001a4b4

00017808 <fts_set@@Base>:
   17808:	cmp	r2, #4
   1780c:	bhi	17820 <fts_set@@Base+0x18>
   17810:	mov	r3, #0
   17814:	strh	r2, [r1, #64]	; 0x40
   17818:	mov	r0, r3
   1781c:	bx	lr
   17820:	push	{r4, lr}
   17824:	bl	1111c <__errno_location@plt>
   17828:	mov	r2, #22
   1782c:	mov	r3, #1
   17830:	str	r2, [r0]
   17834:	mov	r0, r3
   17838:	pop	{r4, pc}

0001783c <fts_children@@Base>:
   1783c:	push	{r4, r5, r6, r7, r8, lr}
   17840:	mov	r4, r1
   17844:	mov	r5, r0
   17848:	bl	1111c <__errno_location@plt>
   1784c:	bics	r2, r4, #8192	; 0x2000
   17850:	mov	r7, r0
   17854:	bne	178e4 <fts_children@@Base+0xa8>
   17858:	ldr	r6, [r5]
   1785c:	str	r2, [r0]
   17860:	ldr	r3, [r5, #48]	; 0x30
   17864:	ands	r0, r3, #16384	; 0x4000
   17868:	bne	178ec <fts_children@@Base+0xb0>
   1786c:	ldrh	r3, [r6, #60]	; 0x3c
   17870:	cmp	r3, #9
   17874:	beq	17944 <fts_children@@Base+0x108>
   17878:	cmp	r3, #1
   1787c:	popne	{r4, r5, r6, r7, r8, pc}
   17880:	ldr	r0, [r5, #4]
   17884:	cmp	r0, #0
   17888:	beq	17890 <fts_children@@Base+0x54>
   1788c:	bl	158bc <__assert_fail@plt+0x4674>
   17890:	cmp	r4, #8192	; 0x2000
   17894:	moveq	r8, #2
   17898:	ldreq	r3, [r5, #48]	; 0x30
   1789c:	movne	r8, #1
   178a0:	orreq	r3, r3, #8192	; 0x2000
   178a4:	streq	r3, [r5, #48]	; 0x30
   178a8:	ldr	r3, [r6, #48]	; 0x30
   178ac:	cmp	r3, #0
   178b0:	bne	178d0 <fts_children@@Base+0x94>
   178b4:	ldr	r3, [r6, #24]
   178b8:	ldrb	r3, [r3]
   178bc:	cmp	r3, #47	; 0x2f
   178c0:	beq	178d0 <fts_children@@Base+0x94>
   178c4:	ldr	r1, [r5, #48]	; 0x30
   178c8:	ands	r4, r1, #4
   178cc:	beq	178f4 <fts_children@@Base+0xb8>
   178d0:	mov	r1, r8
   178d4:	mov	r0, r5
   178d8:	bl	16218 <__assert_fail@plt+0x4fd0>
   178dc:	str	r0, [r5, #4]
   178e0:	pop	{r4, r5, r6, r7, r8, pc}
   178e4:	mov	r3, #22
   178e8:	str	r3, [r0]
   178ec:	mov	r0, #0
   178f0:	pop	{r4, r5, r6, r7, r8, pc}
   178f4:	ldr	r2, [pc, #136]	; 17984 <fts_children@@Base+0x148>
   178f8:	ldr	r0, [r5, #32]
   178fc:	bl	15e48 <__assert_fail@plt+0x4c00>
   17900:	subs	r6, r0, #0
   17904:	blt	17960 <fts_children@@Base+0x124>
   17908:	mov	r1, r8
   1790c:	mov	r0, r5
   17910:	bl	16218 <__assert_fail@plt+0x4fd0>
   17914:	ldr	r3, [r5, #48]	; 0x30
   17918:	ands	r4, r3, #512	; 0x200
   1791c:	str	r0, [r5, #4]
   17920:	bne	1794c <fts_children@@Base+0x110>
   17924:	mov	r0, r6
   17928:	bl	111d0 <fchdir@plt>
   1792c:	cmp	r0, #0
   17930:	bne	1796c <fts_children@@Base+0x130>
   17934:	mov	r0, r6
   17938:	bl	11224 <close@plt>
   1793c:	ldr	r0, [r5, #4]
   17940:	pop	{r4, r5, r6, r7, r8, pc}
   17944:	ldr	r0, [r6, #8]
   17948:	pop	{r4, r5, r6, r7, r8, pc}
   1794c:	mov	r1, r6
   17950:	mov	r2, #1
   17954:	mov	r0, r5
   17958:	bl	15ae8 <__assert_fail@plt+0x48a0>
   1795c:	b	1793c <fts_children@@Base+0x100>
   17960:	str	r4, [r5, #4]
   17964:	mov	r0, r4
   17968:	pop	{r4, r5, r6, r7, r8, pc}
   1796c:	ldr	r5, [r7]
   17970:	mov	r0, r6
   17974:	bl	11224 <close@plt>
   17978:	str	r5, [r7]
   1797c:	mov	r0, r4
   17980:	pop	{r4, r5, r6, r7, r8, pc}
   17984:			; <UNDEFINED> instruction: 0x0001a4b4
   17988:	push	{r4, r5, r6, r7, r8, lr}
   1798c:	subs	r7, r0, #0
   17990:	ldr	r5, [pc, #108]	; 17a04 <fts_children@@Base+0x1c8>
   17994:	sub	sp, sp, #8
   17998:	mov	r8, r1
   1799c:	ldr	r1, [r5]
   179a0:	moveq	r7, sp
   179a4:	str	r1, [sp, #4]
   179a8:	mov	r0, r7
   179ac:	mov	r1, r8
   179b0:	mov	r6, r2
   179b4:	bl	11080 <mbrtowc@plt>
   179b8:	cmp	r6, #0
   179bc:	cmnne	r0, #3
   179c0:	mov	r4, r0
   179c4:	bhi	179e4 <fts_children@@Base+0x1a8>
   179c8:	ldr	r2, [sp, #4]
   179cc:	ldr	r3, [r5]
   179d0:	mov	r0, r4
   179d4:	cmp	r2, r3
   179d8:	bne	17a00 <fts_children@@Base+0x1c4>
   179dc:	add	sp, sp, #8
   179e0:	pop	{r4, r5, r6, r7, r8, pc}
   179e4:	mov	r0, #0
   179e8:	bl	17bd0 <fts_children@@Base+0x394>
   179ec:	cmp	r0, #0
   179f0:	moveq	r4, #1
   179f4:	ldrbeq	r3, [r8]
   179f8:	streq	r3, [r7]
   179fc:	b	179c8 <fts_children@@Base+0x18c>
   17a00:	bl	11008 <__stack_chk_fail@plt>
   17a04:	andeq	sl, r2, r8, lsl #30
   17a08:	push	{r4, r5, r6, lr}
   17a0c:	mov	r4, r0
   17a10:	bl	11074 <__fpending@plt>
   17a14:	ldr	r5, [r4]
   17a18:	and	r5, r5, #32
   17a1c:	mov	r6, r0
   17a20:	mov	r0, r4
   17a24:	bl	18e90 <fts_children@@Base+0x1654>
   17a28:	cmp	r5, #0
   17a2c:	mov	r4, r0
   17a30:	bne	17a5c <fts_children@@Base+0x220>
   17a34:	cmp	r0, #0
   17a38:	beq	17a54 <fts_children@@Base+0x218>
   17a3c:	cmp	r6, #0
   17a40:	bne	17a74 <fts_children@@Base+0x238>
   17a44:	bl	1111c <__errno_location@plt>
   17a48:	ldr	r4, [r0]
   17a4c:	subs	r4, r4, #9
   17a50:	mvnne	r4, #0
   17a54:	mov	r0, r4
   17a58:	pop	{r4, r5, r6, pc}
   17a5c:	cmp	r0, #0
   17a60:	bne	17a74 <fts_children@@Base+0x238>
   17a64:	bl	1111c <__errno_location@plt>
   17a68:	str	r4, [r0]
   17a6c:	mvn	r4, #0
   17a70:	b	17a54 <fts_children@@Base+0x218>
   17a74:	mvn	r4, #0
   17a78:	b	17a54 <fts_children@@Base+0x218>
   17a7c:	push	{r4, r5}
   17a80:	mov	r4, #0
   17a84:	mov	r5, #0
   17a88:	ldr	r3, [pc, #12]	; 17a9c <fts_children@@Base+0x260>
   17a8c:	strd	r4, [r0, #16]
   17a90:	str	r3, [r0, #24]
   17a94:	pop	{r4, r5}
   17a98:	bx	lr
   17a9c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17aa0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aa4:	ldr	r2, [r0, #24]
   17aa8:	ldr	r3, [pc, #180]	; 17b64 <fts_children@@Base+0x328>
   17aac:	cmp	r2, r3
   17ab0:	bne	17b50 <fts_children@@Base+0x314>
   17ab4:	ldrd	r6, [r0, #16]
   17ab8:	ldrd	sl, [r1, #96]	; 0x60
   17abc:	orrs	r3, r6, r7
   17ac0:	beq	17afc <fts_children@@Base+0x2c0>
   17ac4:	ldrd	r2, [r0]
   17ac8:	cmp	r3, fp
   17acc:	cmpeq	r2, sl
   17ad0:	beq	17b20 <fts_children@@Base+0x2e4>
   17ad4:	adds	r8, r6, #1
   17ad8:	adc	r9, r7, #0
   17adc:	and	r2, r6, r8
   17ae0:	and	r3, r7, r9
   17ae4:	orrs	r3, r2, r3
   17ae8:	strd	r8, [r0, #16]
   17aec:	movne	r1, #0
   17af0:	beq	17b40 <fts_children@@Base+0x304>
   17af4:	mov	r0, r1
   17af8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17afc:	mov	r2, #1
   17b00:	mov	r3, #0
   17b04:	strd	r2, [r0, #16]
   17b08:	ldrd	r2, [r1]
   17b0c:	mov	r1, #0
   17b10:	strd	sl, [r0]
   17b14:	strd	r2, [r0, #8]
   17b18:	mov	r0, r1
   17b1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b20:	ldrd	r4, [r1]
   17b24:	ldrd	r2, [r0, #8]
   17b28:	cmp	r5, r3
   17b2c:	cmpeq	r4, r2
   17b30:	bne	17ad4 <fts_children@@Base+0x298>
   17b34:	mov	r1, #1
   17b38:	mov	r0, r1
   17b3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b40:	orrs	r3, r8, r9
   17b44:	bne	17b08 <fts_children@@Base+0x2cc>
   17b48:	mov	r1, #1
   17b4c:	b	17b38 <fts_children@@Base+0x2fc>
   17b50:	ldr	r3, [pc, #16]	; 17b68 <fts_children@@Base+0x32c>
   17b54:	mov	r2, #60	; 0x3c
   17b58:	ldr	r1, [pc, #12]	; 17b6c <fts_children@@Base+0x330>
   17b5c:	ldr	r0, [pc, #12]	; 17b70 <fts_children@@Base+0x334>
   17b60:	bl	11248 <__assert_fail@plt>
   17b64:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17b68:			; <UNDEFINED> instruction: 0x0001a4b8
   17b6c:	andeq	sl, r1, r4, asr #9
   17b70:	ldrdeq	sl, [r1], -r8
   17b74:	push	{r1, r2, r3}
   17b78:	push	{r4, lr}
   17b7c:	sub	sp, sp, #12
   17b80:	ldr	r4, [pc, #68]	; 17bcc <fts_children@@Base+0x390>
   17b84:	ldr	r1, [sp, #20]
   17b88:	ldr	r3, [r4]
   17b8c:	ands	r2, r1, #64	; 0x40
   17b90:	str	r3, [sp, #4]
   17b94:	ldrne	r2, [sp, #24]
   17b98:	addne	r3, sp, #24
   17b9c:	strne	r3, [sp]
   17ba0:	bl	11098 <open64@plt>
   17ba4:	bl	18e4c <fts_children@@Base+0x1610>
   17ba8:	ldr	r2, [sp, #4]
   17bac:	ldr	r3, [r4]
   17bb0:	cmp	r2, r3
   17bb4:	bne	17bc8 <fts_children@@Base+0x38c>
   17bb8:	add	sp, sp, #12
   17bbc:	pop	{r4, lr}
   17bc0:	add	sp, sp, #12
   17bc4:	bx	lr
   17bc8:	bl	11008 <__stack_chk_fail@plt>
   17bcc:	andeq	sl, r2, r8, lsl #30
   17bd0:	push	{r4, lr}
   17bd4:	mov	r1, #0
   17bd8:	bl	11188 <setlocale@plt>
   17bdc:	subs	r4, r0, #0
   17be0:	beq	17c0c <fts_children@@Base+0x3d0>
   17be4:	ldr	r1, [pc, #40]	; 17c14 <fts_children@@Base+0x3d8>
   17be8:	bl	10f9c <strcmp@plt>
   17bec:	cmp	r0, #0
   17bf0:	popeq	{r4, pc}
   17bf4:	mov	r0, r4
   17bf8:	ldr	r1, [pc, #24]	; 17c18 <fts_children@@Base+0x3dc>
   17bfc:	bl	10f9c <strcmp@plt>
   17c00:	adds	r0, r0, #0
   17c04:	movne	r0, #1
   17c08:	pop	{r4, pc}
   17c0c:	mov	r0, #1
   17c10:	pop	{r4, pc}
   17c14:	strdeq	sl, [r1], -r0
   17c18:	strdeq	sl, [r1], -r4
   17c1c:	andeq	r0, r0, r0
   17c20:	cmp	r0, #10
   17c24:	movcc	r0, #10
   17c28:	push	{r4, r5, r6, r7, r8, lr}
   17c2c:	orr	r7, r0, #1
   17c30:	cmn	r7, #1
   17c34:	beq	17cac <fts_children@@Base+0x470>
   17c38:	ldr	r8, [pc, #116]	; 17cb4 <fts_children@@Base+0x478>
   17c3c:	umull	r2, r3, r8, r7
   17c40:	cmp	r7, #9
   17c44:	lsr	r3, r3, #1
   17c48:	add	r3, r3, r3, lsl #1
   17c4c:	sub	r3, r7, r3
   17c50:	bls	17c98 <fts_children@@Base+0x45c>
   17c54:	cmp	r3, #0
   17c58:	beq	17ca0 <fts_children@@Base+0x464>
   17c5c:	mov	r6, #16
   17c60:	mov	r5, #9
   17c64:	mov	r4, #3
   17c68:	b	17c78 <fts_children@@Base+0x43c>
   17c6c:	cmp	r1, #0
   17c70:	add	r6, r6, #8
   17c74:	beq	17ca0 <fts_children@@Base+0x464>
   17c78:	add	r4, r4, #2
   17c7c:	mov	r1, r4
   17c80:	mov	r0, r7
   17c84:	bl	19374 <fts_children@@Base+0x1b38>
   17c88:	add	r5, r5, r6
   17c8c:	cmp	r5, r7
   17c90:	mov	r3, r1
   17c94:	bcc	17c6c <fts_children@@Base+0x430>
   17c98:	cmp	r3, #0
   17c9c:	bne	17cac <fts_children@@Base+0x470>
   17ca0:	add	r7, r7, #2
   17ca4:	cmn	r7, #1
   17ca8:	bne	17c3c <fts_children@@Base+0x400>
   17cac:	mov	r0, r7
   17cb0:	pop	{r4, r5, r6, r7, r8, pc}
   17cb4:	bge	feac2768 <optarg@@GLIBC_2.4+0xfea975f0>
   17cb8:	push	{r4, lr}
   17cbc:	ror	r0, r0, #3
   17cc0:	bl	19374 <fts_children@@Base+0x1b38>
   17cc4:	mov	r0, r1
   17cc8:	pop	{r4, pc}
   17ccc:	sub	r0, r1, r0
   17cd0:	clz	r0, r0
   17cd4:	lsr	r0, r0, #5
   17cd8:	bx	lr
   17cdc:	push	{r4, lr}
   17ce0:	mov	r4, r0
   17ce4:	mov	r0, r1
   17ce8:	ldr	r3, [r4, #24]
   17cec:	ldr	r1, [r4, #8]
   17cf0:	blx	r3
   17cf4:	ldr	r3, [r4, #8]
   17cf8:	cmp	r3, r0
   17cfc:	bls	17d0c <fts_children@@Base+0x4d0>
   17d00:	ldr	r3, [r4]
   17d04:	add	r0, r3, r0, lsl #3
   17d08:	pop	{r4, pc}
   17d0c:	bl	11218 <abort@plt>
   17d10:	push	{r4, r5, r6, r7, r8, lr}
   17d14:	mov	r8, r2
   17d18:	mov	r5, r1
   17d1c:	mov	r7, r3
   17d20:	mov	r6, r0
   17d24:	bl	17cdc <fts_children@@Base+0x4a0>
   17d28:	str	r0, [r8]
   17d2c:	ldr	r1, [r0]
   17d30:	cmp	r1, #0
   17d34:	beq	17e1c <fts_children@@Base+0x5e0>
   17d38:	cmp	r1, r5
   17d3c:	mov	r4, r0
   17d40:	beq	17de0 <fts_children@@Base+0x5a4>
   17d44:	ldr	r3, [r6, #28]
   17d48:	mov	r0, r5
   17d4c:	blx	r3
   17d50:	cmp	r0, #0
   17d54:	ldrne	r3, [r4]
   17d58:	bne	17de4 <fts_children@@Base+0x5a8>
   17d5c:	ldr	r2, [r4, #4]
   17d60:	cmp	r2, #0
   17d64:	beq	17e1c <fts_children@@Base+0x5e0>
   17d68:	ldr	r3, [r2]
   17d6c:	cmp	r5, r3
   17d70:	bne	17d94 <fts_children@@Base+0x558>
   17d74:	b	17db4 <fts_children@@Base+0x578>
   17d78:	ldr	r4, [r4, #4]
   17d7c:	ldr	r2, [r4, #4]
   17d80:	cmp	r2, #0
   17d84:	beq	17e1c <fts_children@@Base+0x5e0>
   17d88:	ldr	r3, [r2]
   17d8c:	cmp	r3, r5
   17d90:	beq	17db4 <fts_children@@Base+0x578>
   17d94:	mov	r1, r3
   17d98:	mov	r0, r5
   17d9c:	ldr	r3, [r6, #28]
   17da0:	blx	r3
   17da4:	cmp	r0, #0
   17da8:	beq	17d78 <fts_children@@Base+0x53c>
   17dac:	ldr	r2, [r4, #4]
   17db0:	ldr	r3, [r2]
   17db4:	cmp	r7, #0
   17db8:	beq	17e14 <fts_children@@Base+0x5d8>
   17dbc:	ldr	r0, [r2, #4]
   17dc0:	mov	r1, #0
   17dc4:	str	r0, [r4, #4]
   17dc8:	str	r1, [r2]
   17dcc:	ldr	r1, [r6, #36]	; 0x24
   17dd0:	mov	r0, r3
   17dd4:	str	r1, [r2, #4]
   17dd8:	str	r2, [r6, #36]	; 0x24
   17ddc:	pop	{r4, r5, r6, r7, r8, pc}
   17de0:	mov	r3, r1
   17de4:	cmp	r7, #0
   17de8:	beq	17e14 <fts_children@@Base+0x5d8>
   17dec:	ldr	r2, [r4, #4]
   17df0:	cmp	r2, #0
   17df4:	movne	ip, #0
   17df8:	ldmne	r2, {r0, r1}
   17dfc:	streq	r2, [r4]
   17e00:	stmne	r4, {r0, r1}
   17e04:	strne	ip, [r2]
   17e08:	ldrne	r1, [r6, #36]	; 0x24
   17e0c:	strne	r1, [r2, #4]
   17e10:	strne	r2, [r6, #36]	; 0x24
   17e14:	mov	r0, r3
   17e18:	pop	{r4, r5, r6, r7, r8, pc}
   17e1c:	mov	r3, #0
   17e20:	mov	r0, r3
   17e24:	pop	{r4, r5, r6, r7, r8, pc}
   17e28:	ldr	r2, [pc, #164]	; 17ed4 <fts_children@@Base+0x698>
   17e2c:	ldr	r3, [r0]
   17e30:	cmp	r3, r2
   17e34:	beq	17ebc <fts_children@@Base+0x680>
   17e38:	vldr	s15, [r3, #8]
   17e3c:	vldr	s14, [pc, #128]	; 17ec4 <fts_children@@Base+0x688>
   17e40:	vcmpe.f32	s15, s14
   17e44:	vmrs	APSR_nzcv, fpscr
   17e48:	ble	17eb0 <fts_children@@Base+0x674>
   17e4c:	vldr	s13, [pc, #116]	; 17ec8 <fts_children@@Base+0x68c>
   17e50:	vcmpe.f32	s15, s13
   17e54:	vmrs	APSR_nzcv, fpscr
   17e58:	bpl	17eb0 <fts_children@@Base+0x674>
   17e5c:	vldr	s13, [pc, #104]	; 17ecc <fts_children@@Base+0x690>
   17e60:	vldr	s12, [r3, #12]
   17e64:	vcmpe.f32	s12, s13
   17e68:	vmrs	APSR_nzcv, fpscr
   17e6c:	ble	17eb0 <fts_children@@Base+0x674>
   17e70:	vldr	s13, [r3]
   17e74:	vcmpe.f32	s13, #0.0
   17e78:	vmrs	APSR_nzcv, fpscr
   17e7c:	blt	17eb0 <fts_children@@Base+0x674>
   17e80:	vadd.f32	s14, s13, s14
   17e84:	vldr	s13, [r3, #4]
   17e88:	vcmpe.f32	s14, s13
   17e8c:	vmrs	APSR_nzcv, fpscr
   17e90:	bpl	17eb0 <fts_children@@Base+0x674>
   17e94:	vldr	s12, [pc, #52]	; 17ed0 <fts_children@@Base+0x694>
   17e98:	vcmpe.f32	s13, s12
   17e9c:	vmrs	APSR_nzcv, fpscr
   17ea0:	bhi	17eb0 <fts_children@@Base+0x674>
   17ea4:	vcmpe.f32	s15, s14
   17ea8:	vmrs	APSR_nzcv, fpscr
   17eac:	bgt	17ebc <fts_children@@Base+0x680>
   17eb0:	str	r2, [r0]
   17eb4:	mov	r0, #0
   17eb8:	bx	lr
   17ebc:	mov	r0, #1
   17ec0:	bx	lr
   17ec4:	stclcc	12, cr12, [ip, #820]	; 0x334
   17ec8:	svccc	0x00666666
   17ecc:	svccc	0x008ccccd
   17ed0:	svccc	0x00800000
   17ed4:	strdeq	sl, [r1], -ip
   17ed8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17edc:	ldr	r3, [r1, #4]
   17ee0:	ldr	r6, [r1]
   17ee4:	cmp	r6, r3
   17ee8:	bcs	17fb0 <fts_children@@Base+0x774>
   17eec:	mov	r8, r2
   17ef0:	mov	r5, r0
   17ef4:	mov	r7, r1
   17ef8:	add	r6, r6, #8
   17efc:	mov	r9, #0
   17f00:	b	17f10 <fts_children@@Base+0x6d4>
   17f04:	cmp	r3, r6
   17f08:	add	r6, r6, #8
   17f0c:	bls	17fb0 <fts_children@@Base+0x774>
   17f10:	ldr	sl, [r6, #-8]
   17f14:	cmp	sl, #0
   17f18:	beq	17f04 <fts_children@@Base+0x6c8>
   17f1c:	ldr	r4, [r6, #-4]
   17f20:	cmp	r4, #0
   17f24:	bne	17f44 <fts_children@@Base+0x708>
   17f28:	b	17f94 <fts_children@@Base+0x758>
   17f2c:	ldr	r2, [r0, #4]
   17f30:	cmp	r3, #0
   17f34:	str	r2, [r4, #4]
   17f38:	str	r4, [r0, #4]
   17f3c:	mov	r4, r3
   17f40:	beq	17f90 <fts_children@@Base+0x754>
   17f44:	ldr	sl, [r4]
   17f48:	mov	r0, r5
   17f4c:	mov	r1, sl
   17f50:	bl	17cdc <fts_children@@Base+0x4a0>
   17f54:	ldr	r3, [r4, #4]
   17f58:	ldr	r2, [r0]
   17f5c:	cmp	r2, #0
   17f60:	bne	17f2c <fts_children@@Base+0x6f0>
   17f64:	ldr	r1, [r5, #12]
   17f68:	str	sl, [r0]
   17f6c:	add	r1, r1, #1
   17f70:	str	r1, [r5, #12]
   17f74:	str	r2, [r4]
   17f78:	ldr	r2, [r5, #36]	; 0x24
   17f7c:	cmp	r3, #0
   17f80:	str	r2, [r4, #4]
   17f84:	str	r4, [r5, #36]	; 0x24
   17f88:	mov	r4, r3
   17f8c:	bne	17f44 <fts_children@@Base+0x708>
   17f90:	ldr	sl, [r6, #-8]
   17f94:	cmp	r8, #0
   17f98:	str	r9, [r6, #-4]
   17f9c:	beq	17fb8 <fts_children@@Base+0x77c>
   17fa0:	ldr	r3, [r7, #4]
   17fa4:	cmp	r3, r6
   17fa8:	add	r6, r6, #8
   17fac:	bhi	17f10 <fts_children@@Base+0x6d4>
   17fb0:	mov	r0, #1
   17fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fb8:	mov	r1, sl
   17fbc:	mov	r0, r5
   17fc0:	bl	17cdc <fts_children@@Base+0x4a0>
   17fc4:	ldr	r3, [r0]
   17fc8:	mov	r4, r0
   17fcc:	cmp	r3, #0
   17fd0:	beq	18010 <fts_children@@Base+0x7d4>
   17fd4:	ldr	r0, [r5, #36]	; 0x24
   17fd8:	cmp	r0, #0
   17fdc:	beq	18024 <fts_children@@Base+0x7e8>
   17fe0:	ldr	r3, [r0, #4]
   17fe4:	str	r3, [r5, #36]	; 0x24
   17fe8:	ldr	r3, [r4, #4]
   17fec:	str	sl, [r0]
   17ff0:	str	r3, [r0, #4]
   17ff4:	str	r0, [r4, #4]
   17ff8:	ldr	r2, [r7, #12]
   17ffc:	str	r9, [r6, #-8]
   18000:	sub	r2, r2, #1
   18004:	ldr	r3, [r7, #4]
   18008:	str	r2, [r7, #12]
   1800c:	b	17f04 <fts_children@@Base+0x6c8>
   18010:	ldr	r3, [r5, #12]
   18014:	str	sl, [r0]
   18018:	add	r3, r3, #1
   1801c:	str	r3, [r5, #12]
   18020:	b	17ff8 <fts_children@@Base+0x7bc>
   18024:	mov	r0, #8
   18028:	bl	110a4 <malloc@plt>
   1802c:	cmp	r0, #0
   18030:	bne	17fe8 <fts_children@@Base+0x7ac>
   18034:	mov	r0, r8
   18038:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1803c:	ldr	r0, [r0, #8]
   18040:	bx	lr
   18044:	ldr	r0, [r0, #12]
   18048:	bx	lr
   1804c:	ldr	r0, [r0, #16]
   18050:	bx	lr
   18054:	ldm	r0, {r1, r3}
   18058:	cmp	r1, r3
   1805c:	bcs	180c4 <fts_children@@Base+0x888>
   18060:	sub	ip, r3, #1
   18064:	sub	ip, ip, r1
   18068:	add	r3, r1, #16
   1806c:	bic	ip, ip, #7
   18070:	add	ip, ip, r3
   18074:	add	r1, r1, #8
   18078:	mov	r0, #0
   1807c:	b	1808c <fts_children@@Base+0x850>
   18080:	add	r1, r1, #8
   18084:	cmp	r1, ip
   18088:	bxeq	lr
   1808c:	ldr	r3, [r1, #-8]
   18090:	cmp	r3, #0
   18094:	beq	18080 <fts_children@@Base+0x844>
   18098:	ldr	r3, [r1, #-4]
   1809c:	mov	r2, #1
   180a0:	cmp	r3, #0
   180a4:	beq	180b8 <fts_children@@Base+0x87c>
   180a8:	ldr	r3, [r3, #4]
   180ac:	add	r2, r2, #1
   180b0:	cmp	r3, #0
   180b4:	bne	180a8 <fts_children@@Base+0x86c>
   180b8:	cmp	r0, r2
   180bc:	movcc	r0, r2
   180c0:	b	18080 <fts_children@@Base+0x844>
   180c4:	mov	r0, #0
   180c8:	bx	lr
   180cc:	ldm	r0, {r1, r3}
   180d0:	push	{lr}		; (str lr, [sp, #-4]!)
   180d4:	cmp	r1, r3
   180d8:	bcs	18168 <fts_children@@Base+0x92c>
   180dc:	sub	ip, r3, #1
   180e0:	sub	ip, ip, r1
   180e4:	add	r3, r1, #16
   180e8:	bic	ip, ip, #7
   180ec:	mov	r2, #0
   180f0:	add	ip, ip, r3
   180f4:	add	r1, r1, #8
   180f8:	mov	lr, r2
   180fc:	b	1810c <fts_children@@Base+0x8d0>
   18100:	add	r1, r1, #8
   18104:	cmp	r1, ip
   18108:	beq	18148 <fts_children@@Base+0x90c>
   1810c:	ldr	r3, [r1, #-8]
   18110:	cmp	r3, #0
   18114:	beq	18100 <fts_children@@Base+0x8c4>
   18118:	ldr	r3, [r1, #-4]
   1811c:	add	lr, lr, #1
   18120:	cmp	r3, #0
   18124:	add	r2, r2, #1
   18128:	beq	18100 <fts_children@@Base+0x8c4>
   1812c:	ldr	r3, [r3, #4]
   18130:	add	r2, r2, #1
   18134:	cmp	r3, #0
   18138:	bne	1812c <fts_children@@Base+0x8f0>
   1813c:	add	r1, r1, #8
   18140:	cmp	r1, ip
   18144:	bne	1810c <fts_children@@Base+0x8d0>
   18148:	ldr	r3, [r0, #12]
   1814c:	cmp	r3, lr
   18150:	ldreq	r0, [r0, #16]
   18154:	subeq	r0, r0, r2
   18158:	clzeq	r0, r0
   1815c:	lsreq	r0, r0, #5
   18160:	movne	r0, #0
   18164:	pop	{pc}		; (ldr pc, [sp], #4)
   18168:	mov	r2, #0
   1816c:	mov	lr, r2
   18170:	b	18148 <fts_children@@Base+0x90c>
   18174:	push	{r4, r5, r6, r7, lr}
   18178:	mov	r4, r1
   1817c:	ldr	r2, [r0]
   18180:	ldr	r1, [r0, #4]
   18184:	sub	sp, sp, #12
   18188:	cmp	r2, r1
   1818c:	ldr	r3, [r0, #16]
   18190:	ldrd	r6, [r0, #8]
   18194:	bcs	18278 <fts_children@@Base+0xa3c>
   18198:	sub	ip, r1, #1
   1819c:	sub	ip, ip, r2
   181a0:	bic	ip, ip, #7
   181a4:	add	r1, r2, #16
   181a8:	add	ip, ip, r1
   181ac:	add	r0, r2, #8
   181b0:	mov	r5, #0
   181b4:	b	181c4 <fts_children@@Base+0x988>
   181b8:	add	r0, r0, #8
   181bc:	cmp	r0, ip
   181c0:	beq	18204 <fts_children@@Base+0x9c8>
   181c4:	ldr	r2, [r0, #-8]
   181c8:	cmp	r2, #0
   181cc:	beq	181b8 <fts_children@@Base+0x97c>
   181d0:	ldr	r2, [r0, #-4]
   181d4:	mov	r1, #1
   181d8:	cmp	r2, #0
   181dc:	beq	181f0 <fts_children@@Base+0x9b4>
   181e0:	ldr	r2, [r2, #4]
   181e4:	add	r1, r1, #1
   181e8:	cmp	r2, #0
   181ec:	bne	181e0 <fts_children@@Base+0x9a4>
   181f0:	cmp	r5, r1
   181f4:	add	r0, r0, #8
   181f8:	movcc	r5, r1
   181fc:	cmp	r0, ip
   18200:	bne	181c4 <fts_children@@Base+0x988>
   18204:	ldr	r2, [pc, #124]	; 18288 <fts_children@@Base+0xa4c>
   18208:	mov	r1, #1
   1820c:	mov	r0, r4
   18210:	bl	11158 <__fprintf_chk@plt>
   18214:	mov	r3, r6
   18218:	ldr	r2, [pc, #108]	; 1828c <fts_children@@Base+0xa50>
   1821c:	mov	r1, #1
   18220:	mov	r0, r4
   18224:	bl	11158 <__fprintf_chk@plt>
   18228:	vmov	s15, r7
   1822c:	vldr	d5, [pc, #76]	; 18280 <fts_children@@Base+0xa44>
   18230:	mov	r3, r7
   18234:	ldr	r2, [pc, #84]	; 18290 <fts_children@@Base+0xa54>
   18238:	vcvt.f64.u32	d6, s15
   1823c:	vmov	s15, r6
   18240:	mov	r1, #1
   18244:	mov	r0, r4
   18248:	vcvt.f64.u32	d7, s15
   1824c:	vmul.f64	d6, d6, d5
   18250:	vdiv.f64	d5, d6, d7
   18254:	vstr	d5, [sp]
   18258:	bl	11158 <__fprintf_chk@plt>
   1825c:	mov	r3, r5
   18260:	mov	r0, r4
   18264:	ldr	r2, [pc, #40]	; 18294 <fts_children@@Base+0xa58>
   18268:	mov	r1, #1
   1826c:	add	sp, sp, #12
   18270:	pop	{r4, r5, r6, r7, lr}
   18274:	b	11158 <__fprintf_chk@plt>
   18278:	mov	r5, #0
   1827c:	b	18204 <fts_children@@Base+0x9c8>
   18280:	andeq	r0, r0, r0
   18284:	subsmi	r0, r9, r0
   18288:	andeq	sl, r1, r0, lsl r5
   1828c:	andeq	sl, r1, r8, lsr #10
   18290:	andeq	sl, r1, r0, asr #10
   18294:	andeq	sl, r1, r4, ror #10
   18298:	push	{r4, r5, r6, lr}
   1829c:	mov	r6, r0
   182a0:	mov	r5, r1
   182a4:	bl	17cdc <fts_children@@Base+0x4a0>
   182a8:	ldr	r3, [r0]
   182ac:	cmp	r3, #0
   182b0:	beq	182ec <fts_children@@Base+0xab0>
   182b4:	mov	r4, r0
   182b8:	b	182c0 <fts_children@@Base+0xa84>
   182bc:	ldr	r3, [r4]
   182c0:	cmp	r3, r5
   182c4:	mov	r1, r3
   182c8:	mov	r0, r5
   182cc:	beq	182f8 <fts_children@@Base+0xabc>
   182d0:	ldr	r3, [r6, #28]
   182d4:	blx	r3
   182d8:	cmp	r0, #0
   182dc:	bne	182f4 <fts_children@@Base+0xab8>
   182e0:	ldr	r4, [r4, #4]
   182e4:	cmp	r4, #0
   182e8:	bne	182bc <fts_children@@Base+0xa80>
   182ec:	mov	r0, #0
   182f0:	pop	{r4, r5, r6, pc}
   182f4:	ldr	r5, [r4]
   182f8:	mov	r0, r5
   182fc:	pop	{r4, r5, r6, pc}
   18300:	ldr	r3, [r0, #16]
   18304:	cmp	r3, #0
   18308:	beq	18358 <fts_children@@Base+0xb1c>
   1830c:	ldr	r3, [r0]
   18310:	ldr	r2, [r0, #4]
   18314:	cmp	r3, r2
   18318:	bcs	18350 <fts_children@@Base+0xb14>
   1831c:	ldr	r0, [r3]
   18320:	cmp	r0, #0
   18324:	bxne	lr
   18328:	sub	r2, r2, #1
   1832c:	sub	r2, r2, r3
   18330:	bic	r2, r2, #7
   18334:	add	r2, r3, r2
   18338:	b	18348 <fts_children@@Base+0xb0c>
   1833c:	ldr	r0, [r3, #8]!
   18340:	cmp	r0, #0
   18344:	bxne	lr
   18348:	cmp	r3, r2
   1834c:	bne	1833c <fts_children@@Base+0xb00>
   18350:	push	{r4, lr}
   18354:	bl	11218 <abort@plt>
   18358:	mov	r0, r3
   1835c:	bx	lr
   18360:	push	{r4, r5, r6, lr}
   18364:	mov	r5, r0
   18368:	mov	r4, r1
   1836c:	bl	17cdc <fts_children@@Base+0x4a0>
   18370:	mov	r2, r0
   18374:	mov	r3, r0
   18378:	b	18384 <fts_children@@Base+0xb48>
   1837c:	cmp	r3, #0
   18380:	beq	18398 <fts_children@@Base+0xb5c>
   18384:	ldm	r3, {r1, r3}
   18388:	cmp	r1, r4
   1838c:	bne	1837c <fts_children@@Base+0xb40>
   18390:	cmp	r3, #0
   18394:	bne	183c0 <fts_children@@Base+0xb84>
   18398:	ldr	r3, [r5, #4]
   1839c:	b	183ac <fts_children@@Base+0xb70>
   183a0:	ldr	r0, [r2]
   183a4:	cmp	r0, #0
   183a8:	popne	{r4, r5, r6, pc}
   183ac:	add	r2, r2, #8
   183b0:	cmp	r3, r2
   183b4:	bhi	183a0 <fts_children@@Base+0xb64>
   183b8:	mov	r0, #0
   183bc:	pop	{r4, r5, r6, pc}
   183c0:	ldr	r0, [r3]
   183c4:	pop	{r4, r5, r6, pc}
   183c8:	push	{r4, r5, lr}
   183cc:	ldm	r0, {r5, lr}
   183d0:	cmp	lr, r5
   183d4:	bls	18458 <fts_children@@Base+0xc1c>
   183d8:	mov	ip, #0
   183dc:	ldr	r3, [r5]
   183e0:	cmp	r3, #0
   183e4:	bne	18400 <fts_children@@Base+0xbc4>
   183e8:	add	r5, r5, #8
   183ec:	cmp	lr, r5
   183f0:	bhi	183dc <fts_children@@Base+0xba0>
   183f4:	mov	r2, ip
   183f8:	mov	r0, r2
   183fc:	pop	{r4, r5, pc}
   18400:	cmp	r2, ip
   18404:	bls	183f4 <fts_children@@Base+0xbb8>
   18408:	str	r3, [r1, ip, lsl #2]
   1840c:	ldr	r3, [r5, #4]
   18410:	add	r4, ip, #1
   18414:	cmp	r3, #0
   18418:	add	lr, r1, ip, lsl #2
   1841c:	beq	1844c <fts_children@@Base+0xc10>
   18420:	mov	ip, r4
   18424:	cmp	r2, ip
   18428:	beq	183f8 <fts_children@@Base+0xbbc>
   1842c:	ldr	r4, [r3]
   18430:	add	ip, ip, #1
   18434:	str	r4, [lr, #4]!
   18438:	ldr	r3, [r3, #4]
   1843c:	cmp	r3, #0
   18440:	bne	18424 <fts_children@@Base+0xbe8>
   18444:	ldr	lr, [r0, #4]
   18448:	b	183e8 <fts_children@@Base+0xbac>
   1844c:	ldr	lr, [r0, #4]
   18450:	mov	ip, r4
   18454:	b	183e8 <fts_children@@Base+0xbac>
   18458:	mov	r2, #0
   1845c:	b	183f8 <fts_children@@Base+0xbbc>
   18460:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18464:	ldr	r3, [r0, #4]
   18468:	ldr	r8, [r0]
   1846c:	cmp	r3, r8
   18470:	bls	184d8 <fts_children@@Base+0xc9c>
   18474:	mov	r7, r2
   18478:	mov	r6, r1
   1847c:	mov	r9, r0
   18480:	mov	r5, #0
   18484:	ldr	r0, [r8]
   18488:	cmp	r0, #0
   1848c:	bne	184a4 <fts_children@@Base+0xc68>
   18490:	add	r8, r8, #8
   18494:	cmp	r3, r8
   18498:	bhi	18484 <fts_children@@Base+0xc48>
   1849c:	mov	r0, r5
   184a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   184a4:	mov	r4, r8
   184a8:	b	184b0 <fts_children@@Base+0xc74>
   184ac:	ldr	r0, [r4]
   184b0:	mov	r1, r7
   184b4:	blx	r6
   184b8:	cmp	r0, #0
   184bc:	beq	1849c <fts_children@@Base+0xc60>
   184c0:	ldr	r4, [r4, #4]
   184c4:	add	r5, r5, #1
   184c8:	cmp	r4, #0
   184cc:	bne	184ac <fts_children@@Base+0xc70>
   184d0:	ldr	r3, [r9, #4]
   184d4:	b	18490 <fts_children@@Base+0xc54>
   184d8:	mov	r5, #0
   184dc:	b	1849c <fts_children@@Base+0xc60>
   184e0:	push	{r4, r5, r6, lr}
   184e4:	mov	r4, r0
   184e8:	ldrb	r0, [r0]
   184ec:	cmp	r0, #0
   184f0:	beq	18520 <fts_children@@Base+0xce4>
   184f4:	mov	r5, r1
   184f8:	mov	r1, #0
   184fc:	rsb	r1, r1, r1, lsl #5
   18500:	add	r0, r1, r0
   18504:	mov	r1, r5
   18508:	bl	19374 <fts_children@@Base+0x1b38>
   1850c:	ldrb	r0, [r4, #1]!
   18510:	cmp	r0, #0
   18514:	bne	184fc <fts_children@@Base+0xcc0>
   18518:	mov	r0, r1
   1851c:	pop	{r4, r5, r6, pc}
   18520:	mov	r1, r0
   18524:	mov	r0, r1
   18528:	pop	{r4, r5, r6, pc}
   1852c:	push	{lr}		; (str lr, [sp, #-4]!)
   18530:	mov	ip, r0
   18534:	ldr	lr, [pc, #16]	; 1854c <fts_children@@Base+0xd10>
   18538:	ldm	lr!, {r0, r1, r2, r3}
   1853c:	ldr	lr, [lr]
   18540:	stmia	ip!, {r0, r1, r2, r3}
   18544:	str	lr, [ip]
   18548:	pop	{pc}		; (ldr pc, [sp], #4)
   1854c:	strdeq	sl, [r1], -ip
   18550:	push	{r4, r5, r6, r7, r8, lr}
   18554:	sub	sp, sp, #8
   18558:	cmp	r2, #0
   1855c:	ldr	ip, [pc, #300]	; 18690 <fts_children@@Base+0xe54>
   18560:	str	r0, [sp, #4]
   18564:	ldr	r5, [pc, #296]	; 18694 <fts_children@@Base+0xe58>
   18568:	mov	r0, #40	; 0x28
   1856c:	movne	r5, r2
   18570:	cmp	r3, #0
   18574:	movne	r8, r3
   18578:	moveq	r8, ip
   1857c:	mov	r6, r1
   18580:	bl	110a4 <malloc@plt>
   18584:	subs	r4, r0, #0
   18588:	beq	18654 <fts_children@@Base+0xe18>
   1858c:	cmp	r6, #0
   18590:	add	r0, r4, #20
   18594:	beq	18630 <fts_children@@Base+0xdf4>
   18598:	str	r6, [r4, #20]
   1859c:	bl	17e28 <fts_children@@Base+0x5ec>
   185a0:	cmp	r0, #0
   185a4:	beq	18648 <fts_children@@Base+0xe0c>
   185a8:	ldrb	r3, [r6, #16]
   185ac:	cmp	r3, #0
   185b0:	vldreq	s13, [r6, #8]
   185b4:	beq	18660 <fts_children@@Base+0xe24>
   185b8:	ldr	r0, [sp, #4]
   185bc:	bl	17c20 <fts_children@@Base+0x3e4>
   185c0:	lsrs	r3, r0, #30
   185c4:	movne	r7, #1
   185c8:	moveq	r7, #0
   185cc:	tst	r0, #536870912	; 0x20000000
   185d0:	mov	r6, r0
   185d4:	bne	18648 <fts_children@@Base+0xe0c>
   185d8:	cmp	r7, #0
   185dc:	bne	18648 <fts_children@@Base+0xe0c>
   185e0:	cmp	r0, #0
   185e4:	str	r0, [r4, #8]
   185e8:	beq	18648 <fts_children@@Base+0xe0c>
   185ec:	mov	r1, #8
   185f0:	bl	10f78 <calloc@plt>
   185f4:	cmp	r0, #0
   185f8:	str	r0, [r4]
   185fc:	beq	18648 <fts_children@@Base+0xe0c>
   18600:	ldr	r3, [sp, #32]
   18604:	add	r0, r0, r6, lsl #3
   18608:	str	r0, [r4, #4]
   1860c:	str	r7, [r4, #12]
   18610:	mov	r0, r4
   18614:	str	r7, [r4, #16]
   18618:	str	r5, [r4, #24]
   1861c:	str	r8, [r4, #28]
   18620:	str	r3, [r4, #32]
   18624:	str	r7, [r4, #36]	; 0x24
   18628:	add	sp, sp, #8
   1862c:	pop	{r4, r5, r6, r7, r8, pc}
   18630:	ldr	r3, [pc, #96]	; 18698 <fts_children@@Base+0xe5c>
   18634:	str	r3, [r4, #20]
   18638:	bl	17e28 <fts_children@@Base+0x5ec>
   1863c:	cmp	r0, #0
   18640:	vldrne	s13, [pc, #64]	; 18688 <fts_children@@Base+0xe4c>
   18644:	bne	18660 <fts_children@@Base+0xe24>
   18648:	mov	r0, r4
   1864c:	bl	10fc0 <free@plt>
   18650:	mov	r4, #0
   18654:	mov	r0, r4
   18658:	add	sp, sp, #8
   1865c:	pop	{r4, r5, r6, r7, r8, pc}
   18660:	vldr	s15, [sp, #4]
   18664:	vldr	s14, [pc, #32]	; 1868c <fts_children@@Base+0xe50>
   18668:	vcvt.f32.u32	s12, s15
   1866c:	vdiv.f32	s15, s12, s13
   18670:	vcmpe.f32	s15, s14
   18674:	vmrs	APSR_nzcv, fpscr
   18678:	bge	18648 <fts_children@@Base+0xe0c>
   1867c:	vcvt.u32.f32	s15, s15
   18680:	vstr	s15, [sp, #4]
   18684:	b	185b8 <fts_children@@Base+0xd7c>
   18688:	svccc	0x004ccccd
   1868c:	svcmi	0x00800000
   18690:	andeq	r7, r1, ip, asr #25
   18694:			; <UNDEFINED> instruction: 0x00017cb8
   18698:	strdeq	sl, [r1], -ip
   1869c:	push	{r4, r5, r6, r7, r8, lr}
   186a0:	mov	r5, r0
   186a4:	ldr	r6, [r0]
   186a8:	ldr	r2, [r0, #4]
   186ac:	cmp	r6, r2
   186b0:	addcc	r6, r6, #8
   186b4:	movcc	r7, #0
   186b8:	bcc	186cc <fts_children@@Base+0xe90>
   186bc:	b	18740 <fts_children@@Base+0xf04>
   186c0:	cmp	r2, r6
   186c4:	add	r6, r6, #8
   186c8:	bls	18740 <fts_children@@Base+0xf04>
   186cc:	ldr	r3, [r6, #-8]
   186d0:	cmp	r3, #0
   186d4:	beq	186c0 <fts_children@@Base+0xe84>
   186d8:	ldr	r4, [r6, #-4]
   186dc:	ldr	r2, [r5, #32]
   186e0:	cmp	r4, #0
   186e4:	beq	18718 <fts_children@@Base+0xedc>
   186e8:	cmp	r2, #0
   186ec:	beq	186fc <fts_children@@Base+0xec0>
   186f0:	ldr	r0, [r4]
   186f4:	blx	r2
   186f8:	ldr	r2, [r5, #32]
   186fc:	ldr	r3, [r4, #4]
   18700:	ldr	r1, [r5, #36]	; 0x24
   18704:	str	r7, [r4]
   18708:	str	r1, [r4, #4]
   1870c:	str	r4, [r5, #36]	; 0x24
   18710:	subs	r4, r3, #0
   18714:	bne	186e8 <fts_children@@Base+0xeac>
   18718:	cmp	r2, #0
   1871c:	beq	18728 <fts_children@@Base+0xeec>
   18720:	ldr	r0, [r6, #-8]
   18724:	blx	r2
   18728:	str	r7, [r6, #-8]
   1872c:	str	r7, [r6, #-4]
   18730:	ldr	r2, [r5, #4]
   18734:	cmp	r2, r6
   18738:	add	r6, r6, #8
   1873c:	bhi	186cc <fts_children@@Base+0xe90>
   18740:	mov	r3, #0
   18744:	str	r3, [r5, #12]
   18748:	str	r3, [r5, #16]
   1874c:	pop	{r4, r5, r6, r7, r8, pc}
   18750:	ldr	r3, [r0, #32]
   18754:	push	{r4, r5, r6, lr}
   18758:	cmp	r3, #0
   1875c:	mov	r6, r0
   18760:	ldr	r5, [r0]
   18764:	ldr	r3, [r0, #4]
   18768:	beq	187d0 <fts_children@@Base+0xf94>
   1876c:	ldr	r2, [r0, #16]
   18770:	cmp	r2, #0
   18774:	beq	187d0 <fts_children@@Base+0xf94>
   18778:	cmp	r5, r3
   1877c:	bcc	18790 <fts_children@@Base+0xf54>
   18780:	b	18804 <fts_children@@Base+0xfc8>
   18784:	add	r5, r5, #8
   18788:	cmp	r3, r5
   1878c:	bls	187cc <fts_children@@Base+0xf90>
   18790:	ldr	r0, [r5]
   18794:	cmp	r0, #0
   18798:	beq	18784 <fts_children@@Base+0xf48>
   1879c:	mov	r4, r5
   187a0:	b	187a8 <fts_children@@Base+0xf6c>
   187a4:	ldr	r0, [r4]
   187a8:	ldr	r3, [r6, #32]
   187ac:	blx	r3
   187b0:	ldr	r4, [r4, #4]
   187b4:	cmp	r4, #0
   187b8:	bne	187a4 <fts_children@@Base+0xf68>
   187bc:	ldr	r3, [r6, #4]
   187c0:	add	r5, r5, #8
   187c4:	cmp	r3, r5
   187c8:	bhi	18790 <fts_children@@Base+0xf54>
   187cc:	ldr	r5, [r6]
   187d0:	cmp	r5, r3
   187d4:	bcs	18804 <fts_children@@Base+0xfc8>
   187d8:	ldr	r0, [r5, #4]
   187dc:	cmp	r0, #0
   187e0:	beq	187f8 <fts_children@@Base+0xfbc>
   187e4:	ldr	r4, [r0, #4]
   187e8:	bl	10fc0 <free@plt>
   187ec:	subs	r0, r4, #0
   187f0:	bne	187e4 <fts_children@@Base+0xfa8>
   187f4:	ldr	r3, [r6, #4]
   187f8:	add	r5, r5, #8
   187fc:	cmp	r3, r5
   18800:	bhi	187d8 <fts_children@@Base+0xf9c>
   18804:	ldr	r0, [r6, #36]	; 0x24
   18808:	cmp	r0, #0
   1880c:	beq	18820 <fts_children@@Base+0xfe4>
   18810:	ldr	r4, [r0, #4]
   18814:	bl	10fc0 <free@plt>
   18818:	subs	r0, r4, #0
   1881c:	bne	18810 <fts_children@@Base+0xfd4>
   18820:	ldr	r0, [r6]
   18824:	bl	10fc0 <free@plt>
   18828:	mov	r0, r6
   1882c:	pop	{r4, r5, r6, lr}
   18830:	b	10fc0 <free@plt>
   18834:	push	{r4, r5, r6, r7, r8, lr}
   18838:	sub	sp, sp, #56	; 0x38
   1883c:	ldr	r8, [r0, #20]
   18840:	ldr	r7, [pc, #392]	; 189d0 <fts_children@@Base+0x1194>
   18844:	mov	r6, r0
   18848:	ldrb	r3, [r8, #16]
   1884c:	ldr	r2, [r7]
   18850:	str	r1, [sp, #4]
   18854:	cmp	r3, #0
   18858:	str	r2, [sp, #52]	; 0x34
   1885c:	bne	18888 <fts_children@@Base+0x104c>
   18860:	vmov	s15, r1
   18864:	vldr	s13, [r8, #8]
   18868:	vldr	s14, [pc, #348]	; 189cc <fts_children@@Base+0x1190>
   1886c:	vcvt.f32.u32	s12, s15
   18870:	vdiv.f32	s15, s12, s13
   18874:	vcmpe.f32	s15, s14
   18878:	vmrs	APSR_nzcv, fpscr
   1887c:	vcvtlt.u32.f32	s15, s15
   18880:	vstrlt	s15, [sp, #4]
   18884:	bge	188b8 <fts_children@@Base+0x107c>
   18888:	ldr	r0, [sp, #4]
   1888c:	bl	17c20 <fts_children@@Base+0x3e4>
   18890:	lsrs	r3, r0, #30
   18894:	movne	r4, #1
   18898:	moveq	r4, #0
   1889c:	tst	r0, #536870912	; 0x20000000
   188a0:	movne	r4, #1
   188a4:	cmp	r0, #0
   188a8:	moveq	r4, #1
   188ac:	cmp	r4, #0
   188b0:	mov	r5, r0
   188b4:	beq	188d8 <fts_children@@Base+0x109c>
   188b8:	mov	r4, #0
   188bc:	ldr	r2, [sp, #52]	; 0x34
   188c0:	ldr	r3, [r7]
   188c4:	mov	r0, r4
   188c8:	cmp	r2, r3
   188cc:	bne	189c4 <fts_children@@Base+0x1188>
   188d0:	add	sp, sp, #56	; 0x38
   188d4:	pop	{r4, r5, r6, r7, r8, pc}
   188d8:	ldr	r3, [r6, #8]
   188dc:	cmp	r3, r0
   188e0:	beq	1898c <fts_children@@Base+0x1150>
   188e4:	mov	r1, #8
   188e8:	bl	10f78 <calloc@plt>
   188ec:	cmp	r0, #0
   188f0:	str	r0, [sp, #12]
   188f4:	beq	188b8 <fts_children@@Base+0x107c>
   188f8:	add	r0, r0, r5, lsl #3
   188fc:	ldr	r1, [r6, #32]
   18900:	str	r0, [sp, #16]
   18904:	ldr	r0, [r6, #28]
   18908:	ldr	ip, [r6, #24]
   1890c:	ldr	r3, [r6, #36]	; 0x24
   18910:	mov	r2, r4
   18914:	str	r0, [sp, #40]	; 0x28
   18918:	str	r1, [sp, #44]	; 0x2c
   1891c:	add	r0, sp, #12
   18920:	mov	r1, r6
   18924:	str	r4, [sp, #24]
   18928:	str	r4, [sp, #28]
   1892c:	str	r5, [sp, #20]
   18930:	str	r8, [sp, #32]
   18934:	str	ip, [sp, #36]	; 0x24
   18938:	str	r3, [sp, #48]	; 0x30
   1893c:	bl	17ed8 <fts_children@@Base+0x69c>
   18940:	subs	r4, r0, #0
   18944:	bne	18994 <fts_children@@Base+0x1158>
   18948:	ldr	r3, [sp, #48]	; 0x30
   1894c:	mov	r2, #1
   18950:	str	r3, [r6, #36]	; 0x24
   18954:	add	r1, sp, #12
   18958:	mov	r0, r6
   1895c:	bl	17ed8 <fts_children@@Base+0x69c>
   18960:	cmp	r0, #0
   18964:	beq	189c8 <fts_children@@Base+0x118c>
   18968:	add	r1, sp, #12
   1896c:	mov	r0, r6
   18970:	mov	r2, r4
   18974:	bl	17ed8 <fts_children@@Base+0x69c>
   18978:	cmp	r0, #0
   1897c:	beq	189c8 <fts_children@@Base+0x118c>
   18980:	ldr	r0, [sp, #12]
   18984:	bl	10fc0 <free@plt>
   18988:	b	188bc <fts_children@@Base+0x1080>
   1898c:	mov	r4, #1
   18990:	b	188bc <fts_children@@Base+0x1080>
   18994:	ldr	r0, [r6]
   18998:	bl	10fc0 <free@plt>
   1899c:	ldrd	r2, [sp, #12]
   189a0:	ldr	r1, [sp, #20]
   189a4:	str	r2, [r6]
   189a8:	str	r3, [r6, #4]
   189ac:	ldr	r2, [sp, #24]
   189b0:	ldr	r3, [sp, #48]	; 0x30
   189b4:	str	r1, [r6, #8]
   189b8:	str	r2, [r6, #12]
   189bc:	str	r3, [r6, #36]	; 0x24
   189c0:	b	188bc <fts_children@@Base+0x1080>
   189c4:	bl	11008 <__stack_chk_fail@plt>
   189c8:	bl	11218 <abort@plt>
   189cc:	svcmi	0x00800000
   189d0:	andeq	sl, r2, r8, lsl #30
   189d4:	push	{r4, r5, r6, r7, lr}
   189d8:	sub	sp, sp, #12
   189dc:	ldr	r6, [pc, #404]	; 18b78 <fts_children@@Base+0x133c>
   189e0:	subs	r7, r1, #0
   189e4:	ldr	r3, [r6]
   189e8:	str	r3, [sp, #4]
   189ec:	beq	18b6c <fts_children@@Base+0x1330>
   189f0:	mov	r5, r2
   189f4:	mov	r3, #0
   189f8:	mov	r2, sp
   189fc:	mov	r4, r0
   18a00:	bl	17d10 <fts_children@@Base+0x4d4>
   18a04:	cmp	r0, #0
   18a08:	beq	18a34 <fts_children@@Base+0x11f8>
   18a0c:	cmp	r5, #0
   18a10:	moveq	r0, r5
   18a14:	strne	r0, [r5]
   18a18:	movne	r0, #0
   18a1c:	ldr	r2, [sp, #4]
   18a20:	ldr	r3, [r6]
   18a24:	cmp	r2, r3
   18a28:	bne	18b70 <fts_children@@Base+0x1334>
   18a2c:	add	sp, sp, #12
   18a30:	pop	{r4, r5, r6, r7, pc}
   18a34:	vldr	s15, [r4, #8]
   18a38:	ldr	r3, [r4, #20]
   18a3c:	vldr	s14, [r4, #12]
   18a40:	vcvt.f32.u32	s15, s15
   18a44:	vldr	s13, [r3, #8]
   18a48:	vcvt.f32.u32	s14, s14
   18a4c:	vmul.f32	s15, s15, s13
   18a50:	vcmpe.f32	s14, s15
   18a54:	vmrs	APSR_nzcv, fpscr
   18a58:	bgt	18aa4 <fts_children@@Base+0x1268>
   18a5c:	ldr	r5, [sp]
   18a60:	ldr	r3, [r5]
   18a64:	cmp	r3, #0
   18a68:	beq	18b00 <fts_children@@Base+0x12c4>
   18a6c:	ldr	r0, [r4, #36]	; 0x24
   18a70:	cmp	r0, #0
   18a74:	beq	18b24 <fts_children@@Base+0x12e8>
   18a78:	ldr	r3, [r0, #4]
   18a7c:	str	r3, [r4, #36]	; 0x24
   18a80:	ldr	r3, [r4, #16]
   18a84:	ldr	r2, [r5, #4]
   18a88:	add	r3, r3, #1
   18a8c:	str	r7, [r0]
   18a90:	str	r2, [r0, #4]
   18a94:	str	r0, [r5, #4]
   18a98:	mov	r0, #1
   18a9c:	str	r3, [r4, #16]
   18aa0:	b	18a1c <fts_children@@Base+0x11e0>
   18aa4:	add	r0, r4, #20
   18aa8:	bl	17e28 <fts_children@@Base+0x5ec>
   18aac:	vldr	s15, [r4, #8]
   18ab0:	ldr	r3, [r4, #20]
   18ab4:	vldr	s14, [r4, #12]
   18ab8:	vcvt.f32.u32	s15, s15
   18abc:	vldr	s13, [r3, #8]
   18ac0:	vcvt.f32.u32	s14, s14
   18ac4:	vmul.f32	s12, s13, s15
   18ac8:	vcmpe.f32	s14, s12
   18acc:	vmrs	APSR_nzcv, fpscr
   18ad0:	ble	18a5c <fts_children@@Base+0x1220>
   18ad4:	vldr	s14, [r3, #12]
   18ad8:	ldrb	r3, [r3, #16]
   18adc:	vmul.f32	s15, s15, s14
   18ae0:	cmp	r3, #0
   18ae4:	vldr	s14, [pc, #136]	; 18b74 <fts_children@@Base+0x1338>
   18ae8:	vmuleq.f32	s15, s15, s13
   18aec:	vcmpe.f32	s15, s14
   18af0:	vmrs	APSR_nzcv, fpscr
   18af4:	blt	18b38 <fts_children@@Base+0x12fc>
   18af8:	mvn	r0, #0
   18afc:	b	18a1c <fts_children@@Base+0x11e0>
   18b00:	ldr	r2, [r4, #16]
   18b04:	ldr	r3, [r4, #12]
   18b08:	add	r2, r2, #1
   18b0c:	add	r3, r3, #1
   18b10:	str	r7, [r5]
   18b14:	mov	r0, #1
   18b18:	str	r2, [r4, #16]
   18b1c:	str	r3, [r4, #12]
   18b20:	b	18a1c <fts_children@@Base+0x11e0>
   18b24:	mov	r0, #8
   18b28:	bl	110a4 <malloc@plt>
   18b2c:	cmp	r0, #0
   18b30:	beq	18af8 <fts_children@@Base+0x12bc>
   18b34:	b	18a80 <fts_children@@Base+0x1244>
   18b38:	vcvt.u32.f32	s15, s15
   18b3c:	mov	r0, r4
   18b40:	vmov	r1, s15
   18b44:	bl	18834 <fts_children@@Base+0xff8>
   18b48:	cmp	r0, #0
   18b4c:	beq	18af8 <fts_children@@Base+0x12bc>
   18b50:	mov	r2, sp
   18b54:	mov	r3, #0
   18b58:	mov	r1, r7
   18b5c:	mov	r0, r4
   18b60:	bl	17d10 <fts_children@@Base+0x4d4>
   18b64:	cmp	r0, #0
   18b68:	beq	18a5c <fts_children@@Base+0x1220>
   18b6c:	bl	11218 <abort@plt>
   18b70:	bl	11008 <__stack_chk_fail@plt>
   18b74:	svcmi	0x00800000
   18b78:	andeq	sl, r2, r8, lsl #30
   18b7c:	push	{r4, r5, lr}
   18b80:	sub	sp, sp, #12
   18b84:	ldr	r5, [pc, #68]	; 18bd0 <fts_children@@Base+0x1394>
   18b88:	mov	r2, sp
   18b8c:	mov	r4, r1
   18b90:	ldr	r3, [r5]
   18b94:	str	r3, [sp, #4]
   18b98:	bl	189d4 <fts_children@@Base+0x1198>
   18b9c:	cmn	r0, #1
   18ba0:	moveq	r0, #0
   18ba4:	beq	18bb4 <fts_children@@Base+0x1378>
   18ba8:	cmp	r0, #0
   18bac:	movne	r0, r4
   18bb0:	ldreq	r0, [sp]
   18bb4:	ldr	r2, [sp, #4]
   18bb8:	ldr	r3, [r5]
   18bbc:	cmp	r2, r3
   18bc0:	bne	18bcc <fts_children@@Base+0x1390>
   18bc4:	add	sp, sp, #12
   18bc8:	pop	{r4, r5, pc}
   18bcc:	bl	11008 <__stack_chk_fail@plt>
   18bd0:	andeq	sl, r2, r8, lsl #30
   18bd4:	push	{r4, r5, r6, r7, lr}
   18bd8:	sub	sp, sp, #12
   18bdc:	ldr	r5, [pc, #276]	; 18cf8 <fts_children@@Base+0x14bc>
   18be0:	mov	r3, #1
   18be4:	mov	r2, sp
   18be8:	ldr	ip, [r5]
   18bec:	mov	r4, r0
   18bf0:	str	ip, [sp, #4]
   18bf4:	bl	17d10 <fts_children@@Base+0x4d4>
   18bf8:	subs	r6, r0, #0
   18bfc:	beq	18c1c <fts_children@@Base+0x13e0>
   18c00:	ldr	r2, [sp]
   18c04:	ldr	r3, [r4, #16]
   18c08:	ldr	r2, [r2]
   18c0c:	sub	r3, r3, #1
   18c10:	cmp	r2, #0
   18c14:	str	r3, [r4, #16]
   18c18:	beq	18c38 <fts_children@@Base+0x13fc>
   18c1c:	ldr	r2, [sp, #4]
   18c20:	ldr	r3, [r5]
   18c24:	mov	r0, r6
   18c28:	cmp	r2, r3
   18c2c:	bne	18cf4 <fts_children@@Base+0x14b8>
   18c30:	add	sp, sp, #12
   18c34:	pop	{r4, r5, r6, r7, pc}
   18c38:	vldr	s15, [r4, #8]
   18c3c:	ldr	r3, [r4, #12]
   18c40:	ldr	r2, [r4, #20]
   18c44:	sub	r3, r3, #1
   18c48:	vcvt.f32.u32	s14, s15
   18c4c:	vldr	s13, [r2]
   18c50:	vmov	s15, r3
   18c54:	str	r3, [r4, #12]
   18c58:	vcvt.f32.u32	s15, s15
   18c5c:	vmul.f32	s14, s14, s13
   18c60:	vcmpe.f32	s15, s14
   18c64:	vmrs	APSR_nzcv, fpscr
   18c68:	bpl	18c1c <fts_children@@Base+0x13e0>
   18c6c:	add	r0, r4, #20
   18c70:	bl	17e28 <fts_children@@Base+0x5ec>
   18c74:	vldr	s15, [r4, #8]
   18c78:	ldr	r3, [r4, #20]
   18c7c:	vldr	s13, [r4, #12]
   18c80:	vcvt.f32.u32	s15, s15
   18c84:	vldr	s14, [r3]
   18c88:	vcvt.f32.u32	s13, s13
   18c8c:	vmul.f32	s14, s15, s14
   18c90:	vcmpe.f32	s13, s14
   18c94:	vmrs	APSR_nzcv, fpscr
   18c98:	bpl	18c1c <fts_children@@Base+0x13e0>
   18c9c:	vldr	s14, [r3, #4]
   18ca0:	ldrb	r2, [r3, #16]
   18ca4:	mov	r0, r4
   18ca8:	vmul.f32	s15, s15, s14
   18cac:	cmp	r2, #0
   18cb0:	vldreq	s14, [r3, #8]
   18cb4:	vmuleq.f32	s15, s15, s14
   18cb8:	vcvt.u32.f32	s15, s15
   18cbc:	vmov	r1, s15
   18cc0:	bl	18834 <fts_children@@Base+0xff8>
   18cc4:	cmp	r0, #0
   18cc8:	bne	18c1c <fts_children@@Base+0x13e0>
   18ccc:	ldr	r0, [r4, #36]	; 0x24
   18cd0:	cmp	r0, #0
   18cd4:	beq	18ce8 <fts_children@@Base+0x14ac>
   18cd8:	ldr	r7, [r0, #4]
   18cdc:	bl	10fc0 <free@plt>
   18ce0:	subs	r0, r7, #0
   18ce4:	bne	18cd8 <fts_children@@Base+0x149c>
   18ce8:	mov	r3, #0
   18cec:	str	r3, [r4, #36]	; 0x24
   18cf0:	b	18c1c <fts_children@@Base+0x13e0>
   18cf4:	bl	11008 <__stack_chk_fail@plt>
   18cf8:	andeq	sl, r2, r8, lsl #30
   18cfc:	mov	r3, #0
   18d00:	mov	r2, #1
   18d04:	str	r1, [r0]
   18d08:	str	r1, [r0, #4]
   18d0c:	str	r1, [r0, #8]
   18d10:	str	r1, [r0, #12]
   18d14:	str	r1, [r0, #16]
   18d18:	strb	r2, [r0, #28]
   18d1c:	str	r3, [r0, #20]
   18d20:	str	r3, [r0, #24]
   18d24:	bx	lr
   18d28:	ldrb	r0, [r0, #28]
   18d2c:	bx	lr
   18d30:	ldrb	ip, [r0, #28]
   18d34:	ldr	r3, [r0, #20]
   18d38:	mov	r2, r0
   18d3c:	eor	ip, ip, #1
   18d40:	add	r3, ip, r3
   18d44:	and	r3, r3, #3
   18d48:	ldr	r0, [r0, r3, lsl #2]
   18d4c:	str	r1, [r2, r3, lsl #2]
   18d50:	ldr	r1, [r2, #24]
   18d54:	str	r3, [r2, #20]
   18d58:	cmp	r1, r3
   18d5c:	addeq	ip, ip, r1
   18d60:	andeq	ip, ip, #3
   18d64:	mov	r3, #0
   18d68:	streq	ip, [r2, #24]
   18d6c:	strb	r3, [r2, #28]
   18d70:	bx	lr
   18d74:	ldrb	r3, [r0, #28]
   18d78:	cmp	r3, #0
   18d7c:	bne	18db4 <fts_children@@Base+0x1578>
   18d80:	ldr	r3, [r0, #20]
   18d84:	ldr	r1, [r0, #16]
   18d88:	ldr	r2, [r0, r3, lsl #2]
   18d8c:	str	r1, [r0, r3, lsl #2]
   18d90:	ldr	r1, [r0, #24]
   18d94:	cmp	r3, r1
   18d98:	addne	r3, r3, #3
   18d9c:	moveq	r3, #1
   18da0:	andne	r3, r3, #3
   18da4:	strbeq	r3, [r0, #28]
   18da8:	strne	r3, [r0, #20]
   18dac:	mov	r0, r2
   18db0:	bx	lr
   18db4:	push	{r4, lr}
   18db8:	bl	11218 <abort@plt>
   18dbc:	push	{r4, lr}
   18dc0:	mov	r0, #14
   18dc4:	bl	111a0 <nl_langinfo@plt>
   18dc8:	cmp	r0, #0
   18dcc:	beq	18de4 <fts_children@@Base+0x15a8>
   18dd0:	ldrb	r2, [r0]
   18dd4:	ldr	r3, [pc, #16]	; 18dec <fts_children@@Base+0x15b0>
   18dd8:	cmp	r2, #0
   18ddc:	moveq	r0, r3
   18de0:	pop	{r4, pc}
   18de4:	ldr	r0, [pc]	; 18dec <fts_children@@Base+0x15b0>
   18de8:	pop	{r4, pc}
   18dec:	andeq	sl, r1, ip, ror r5
   18df0:	push	{r2, r3}
   18df4:	push	{r4, lr}
   18df8:	sub	sp, sp, #8
   18dfc:	ldr	r4, [pc, #68]	; 18e48 <fts_children@@Base+0x160c>
   18e00:	ldr	r2, [sp, #16]
   18e04:	ands	r3, r2, #64	; 0x40
   18e08:	addne	r3, sp, #20
   18e0c:	ldr	ip, [r4]
   18e10:	strne	r3, [sp]
   18e14:	ldrne	r3, [sp, #20]
   18e18:	str	ip, [sp, #4]
   18e1c:	bl	11104 <openat64@plt>
   18e20:	bl	18e4c <fts_children@@Base+0x1610>
   18e24:	ldr	r2, [sp, #4]
   18e28:	ldr	r3, [r4]
   18e2c:	cmp	r2, r3
   18e30:	bne	18e44 <fts_children@@Base+0x1608>
   18e34:	add	sp, sp, #8
   18e38:	pop	{r4, lr}
   18e3c:	add	sp, sp, #8
   18e40:	bx	lr
   18e44:	bl	11008 <__stack_chk_fail@plt>
   18e48:	andeq	sl, r2, r8, lsl #30
   18e4c:	cmp	r0, #2
   18e50:	push	{r4, r5, r6, r7, r8, lr}
   18e54:	mov	r4, r0
   18e58:	bls	18e64 <fts_children@@Base+0x1628>
   18e5c:	mov	r0, r4
   18e60:	pop	{r4, r5, r6, r7, r8, pc}
   18e64:	bl	1917c <fts_children@@Base+0x1940>
   18e68:	mov	r7, r0
   18e6c:	bl	1111c <__errno_location@plt>
   18e70:	mov	r5, r0
   18e74:	mov	r0, r4
   18e78:	ldr	r6, [r5]
   18e7c:	mov	r4, r7
   18e80:	bl	11224 <close@plt>
   18e84:	str	r6, [r5]
   18e88:	mov	r0, r4
   18e8c:	pop	{r4, r5, r6, r7, r8, pc}
   18e90:	push	{r4, r5, lr}
   18e94:	sub	sp, sp, #12
   18e98:	mov	r4, r0
   18e9c:	bl	1114c <fileno@plt>
   18ea0:	cmp	r0, #0
   18ea4:	mov	r0, r4
   18ea8:	blt	18f24 <fts_children@@Base+0x16e8>
   18eac:	bl	110bc <__freading@plt>
   18eb0:	cmp	r0, #0
   18eb4:	bne	18ef0 <fts_children@@Base+0x16b4>
   18eb8:	mov	r0, r4
   18ebc:	bl	1907c <fts_children@@Base+0x1840>
   18ec0:	cmp	r0, #0
   18ec4:	beq	18f20 <fts_children@@Base+0x16e4>
   18ec8:	bl	1111c <__errno_location@plt>
   18ecc:	mov	r5, r0
   18ed0:	mov	r0, r4
   18ed4:	ldr	r4, [r5]
   18ed8:	bl	11164 <fclose@plt>
   18edc:	cmp	r4, #0
   18ee0:	mvnne	r0, #0
   18ee4:	strne	r4, [r5]
   18ee8:	add	sp, sp, #12
   18eec:	pop	{r4, r5, pc}
   18ef0:	mov	r0, r4
   18ef4:	bl	1114c <fileno@plt>
   18ef8:	mov	r3, #1
   18efc:	str	r3, [sp]
   18f00:	mov	r2, #0
   18f04:	mov	r3, #0
   18f08:	bl	1105c <lseek64@plt>
   18f0c:	mvn	r3, #0
   18f10:	mvn	r2, #0
   18f14:	cmp	r1, r3
   18f18:	cmpeq	r0, r2
   18f1c:	bne	18eb8 <fts_children@@Base+0x167c>
   18f20:	mov	r0, r4
   18f24:	add	sp, sp, #12
   18f28:	pop	{r4, r5, lr}
   18f2c:	b	11164 <fclose@plt>
   18f30:	push	{r1, r2, r3}
   18f34:	push	{r4, r5, r6, r7, r8, lr}
   18f38:	sub	sp, sp, #12
   18f3c:	ldr	r4, [pc, #300]	; 19070 <fts_children@@Base+0x1834>
   18f40:	ldr	r3, [pc, #300]	; 19074 <fts_children@@Base+0x1838>
   18f44:	ldr	r1, [sp, #36]	; 0x24
   18f48:	ldr	r2, [r4]
   18f4c:	cmp	r1, r3
   18f50:	add	r3, sp, #40	; 0x28
   18f54:	str	r2, [sp, #4]
   18f58:	str	r3, [sp]
   18f5c:	bne	19028 <fts_children@@Base+0x17ec>
   18f60:	ldr	r6, [pc, #272]	; 19078 <fts_children@@Base+0x183c>
   18f64:	add	r3, sp, #44	; 0x2c
   18f68:	str	r3, [sp]
   18f6c:	ldr	r3, [r6]
   18f70:	ldr	r7, [sp, #40]	; 0x28
   18f74:	cmp	r3, #0
   18f78:	blt	18fbc <fts_children@@Base+0x1780>
   18f7c:	mov	r2, r7
   18f80:	mov	r8, r0
   18f84:	bl	1117c <fcntl64@plt>
   18f88:	subs	r5, r0, #0
   18f8c:	blt	19038 <fts_children@@Base+0x17fc>
   18f90:	mov	r3, #1
   18f94:	str	r3, [r6]
   18f98:	ldr	r2, [sp, #4]
   18f9c:	ldr	r3, [r4]
   18fa0:	mov	r0, r5
   18fa4:	cmp	r2, r3
   18fa8:	bne	1906c <fts_children@@Base+0x1830>
   18fac:	add	sp, sp, #12
   18fb0:	pop	{r4, r5, r6, r7, r8, lr}
   18fb4:	add	sp, sp, #12
   18fb8:	bx	lr
   18fbc:	mov	r2, r7
   18fc0:	mov	r1, #0
   18fc4:	bl	18f30 <fts_children@@Base+0x16f4>
   18fc8:	subs	r5, r0, #0
   18fcc:	blt	18f98 <fts_children@@Base+0x175c>
   18fd0:	ldr	r3, [r6]
   18fd4:	cmn	r3, #1
   18fd8:	bne	18f98 <fts_children@@Base+0x175c>
   18fdc:	mov	r1, #1
   18fe0:	mov	r0, r5
   18fe4:	bl	1117c <fcntl64@plt>
   18fe8:	subs	r2, r0, #0
   18fec:	blt	19008 <fts_children@@Base+0x17cc>
   18ff0:	orr	r2, r2, #1
   18ff4:	mov	r1, #2
   18ff8:	mov	r0, r5
   18ffc:	bl	1117c <fcntl64@plt>
   19000:	cmn	r0, #1
   19004:	bne	18f98 <fts_children@@Base+0x175c>
   19008:	bl	1111c <__errno_location@plt>
   1900c:	mov	r6, r0
   19010:	mov	r0, r5
   19014:	ldr	r7, [r6]
   19018:	mvn	r5, #0
   1901c:	bl	11224 <close@plt>
   19020:	str	r7, [r6]
   19024:	b	18f98 <fts_children@@Base+0x175c>
   19028:	ldr	r2, [sp, #40]	; 0x28
   1902c:	bl	1117c <fcntl64@plt>
   19030:	mov	r5, r0
   19034:	b	18f98 <fts_children@@Base+0x175c>
   19038:	bl	1111c <__errno_location@plt>
   1903c:	ldr	r3, [r0]
   19040:	cmp	r3, #22
   19044:	bne	18f90 <fts_children@@Base+0x1754>
   19048:	mov	r2, r7
   1904c:	mov	r0, r8
   19050:	mov	r1, #0
   19054:	bl	18f30 <fts_children@@Base+0x16f4>
   19058:	subs	r5, r0, #0
   1905c:	mvnge	r3, #0
   19060:	strge	r3, [r6]
   19064:	bge	18fdc <fts_children@@Base+0x17a0>
   19068:	b	18f98 <fts_children@@Base+0x175c>
   1906c:	bl	11008 <__stack_chk_fail@plt>
   19070:	andeq	sl, r2, r8, lsl #30
   19074:	andeq	r0, r0, r6, lsl #8
   19078:	andeq	fp, r2, r0, ror #5
   1907c:	push	{r4, lr}
   19080:	subs	r4, r0, #0
   19084:	sub	sp, sp, #8
   19088:	beq	190a4 <fts_children@@Base+0x1868>
   1908c:	bl	110bc <__freading@plt>
   19090:	cmp	r0, #0
   19094:	beq	190a4 <fts_children@@Base+0x1868>
   19098:	ldr	r3, [r4]
   1909c:	tst	r3, #256	; 0x100
   190a0:	bne	190b4 <fts_children@@Base+0x1878>
   190a4:	mov	r0, r4
   190a8:	add	sp, sp, #8
   190ac:	pop	{r4, lr}
   190b0:	b	10fa8 <fflush@plt>
   190b4:	mov	r3, #1
   190b8:	str	r3, [sp]
   190bc:	mov	r2, #0
   190c0:	mov	r3, #0
   190c4:	mov	r0, r4
   190c8:	bl	190dc <fts_children@@Base+0x18a0>
   190cc:	mov	r0, r4
   190d0:	add	sp, sp, #8
   190d4:	pop	{r4, lr}
   190d8:	b	10fa8 <fflush@plt>
   190dc:	push	{r4, r5, r6, r7, r8, lr}
   190e0:	sub	sp, sp, #8
   190e4:	ldmib	r0, {ip, lr}
   190e8:	mov	r4, r0
   190ec:	ldr	r5, [sp, #32]
   190f0:	cmp	lr, ip
   190f4:	beq	1910c <fts_children@@Base+0x18d0>
   190f8:	str	r5, [sp, #32]
   190fc:	mov	r0, r4
   19100:	add	sp, sp, #8
   19104:	pop	{r4, r5, r6, r7, r8, lr}
   19108:	b	11170 <fseeko64@plt>
   1910c:	ldr	lr, [r0, #20]
   19110:	ldr	ip, [r0, #16]
   19114:	cmp	lr, ip
   19118:	bne	190f8 <fts_children@@Base+0x18bc>
   1911c:	ldr	r8, [r0, #36]	; 0x24
   19120:	cmp	r8, #0
   19124:	bne	190f8 <fts_children@@Base+0x18bc>
   19128:	mov	r6, r2
   1912c:	mov	r7, r3
   19130:	bl	1114c <fileno@plt>
   19134:	mov	r2, r6
   19138:	mov	r3, r7
   1913c:	str	r5, [sp]
   19140:	bl	1105c <lseek64@plt>
   19144:	mvn	r3, #0
   19148:	mvn	r2, #0
   1914c:	cmp	r1, r3
   19150:	cmpeq	r0, r2
   19154:	beq	19174 <fts_children@@Base+0x1938>
   19158:	ldr	r3, [r4]
   1915c:	strd	r0, [r4, #80]	; 0x50
   19160:	mov	r0, r8
   19164:	bic	r3, r3, #16
   19168:	str	r3, [r4]
   1916c:	add	sp, sp, #8
   19170:	pop	{r4, r5, r6, r7, r8, pc}
   19174:	mvn	r0, #0
   19178:	b	1916c <fts_children@@Base+0x1930>
   1917c:	mov	r2, #3
   19180:	mov	r1, #0
   19184:	b	18f30 <fts_children@@Base+0x16f4>
   19188:	subs	r2, r1, #1
   1918c:	bxeq	lr
   19190:	bcc	19368 <fts_children@@Base+0x1b2c>
   19194:	cmp	r0, r1
   19198:	bls	1934c <fts_children@@Base+0x1b10>
   1919c:	tst	r1, r2
   191a0:	beq	19358 <fts_children@@Base+0x1b1c>
   191a4:	clz	r3, r0
   191a8:	clz	r2, r1
   191ac:	sub	r3, r2, r3
   191b0:	rsbs	r3, r3, #31
   191b4:	addne	r3, r3, r3, lsl #1
   191b8:	mov	r2, #0
   191bc:	addne	pc, pc, r3, lsl #2
   191c0:	nop			; (mov r0, r0)
   191c4:	cmp	r0, r1, lsl #31
   191c8:	adc	r2, r2, r2
   191cc:	subcs	r0, r0, r1, lsl #31
   191d0:	cmp	r0, r1, lsl #30
   191d4:	adc	r2, r2, r2
   191d8:	subcs	r0, r0, r1, lsl #30
   191dc:	cmp	r0, r1, lsl #29
   191e0:	adc	r2, r2, r2
   191e4:	subcs	r0, r0, r1, lsl #29
   191e8:	cmp	r0, r1, lsl #28
   191ec:	adc	r2, r2, r2
   191f0:	subcs	r0, r0, r1, lsl #28
   191f4:	cmp	r0, r1, lsl #27
   191f8:	adc	r2, r2, r2
   191fc:	subcs	r0, r0, r1, lsl #27
   19200:	cmp	r0, r1, lsl #26
   19204:	adc	r2, r2, r2
   19208:	subcs	r0, r0, r1, lsl #26
   1920c:	cmp	r0, r1, lsl #25
   19210:	adc	r2, r2, r2
   19214:	subcs	r0, r0, r1, lsl #25
   19218:	cmp	r0, r1, lsl #24
   1921c:	adc	r2, r2, r2
   19220:	subcs	r0, r0, r1, lsl #24
   19224:	cmp	r0, r1, lsl #23
   19228:	adc	r2, r2, r2
   1922c:	subcs	r0, r0, r1, lsl #23
   19230:	cmp	r0, r1, lsl #22
   19234:	adc	r2, r2, r2
   19238:	subcs	r0, r0, r1, lsl #22
   1923c:	cmp	r0, r1, lsl #21
   19240:	adc	r2, r2, r2
   19244:	subcs	r0, r0, r1, lsl #21
   19248:	cmp	r0, r1, lsl #20
   1924c:	adc	r2, r2, r2
   19250:	subcs	r0, r0, r1, lsl #20
   19254:	cmp	r0, r1, lsl #19
   19258:	adc	r2, r2, r2
   1925c:	subcs	r0, r0, r1, lsl #19
   19260:	cmp	r0, r1, lsl #18
   19264:	adc	r2, r2, r2
   19268:	subcs	r0, r0, r1, lsl #18
   1926c:	cmp	r0, r1, lsl #17
   19270:	adc	r2, r2, r2
   19274:	subcs	r0, r0, r1, lsl #17
   19278:	cmp	r0, r1, lsl #16
   1927c:	adc	r2, r2, r2
   19280:	subcs	r0, r0, r1, lsl #16
   19284:	cmp	r0, r1, lsl #15
   19288:	adc	r2, r2, r2
   1928c:	subcs	r0, r0, r1, lsl #15
   19290:	cmp	r0, r1, lsl #14
   19294:	adc	r2, r2, r2
   19298:	subcs	r0, r0, r1, lsl #14
   1929c:	cmp	r0, r1, lsl #13
   192a0:	adc	r2, r2, r2
   192a4:	subcs	r0, r0, r1, lsl #13
   192a8:	cmp	r0, r1, lsl #12
   192ac:	adc	r2, r2, r2
   192b0:	subcs	r0, r0, r1, lsl #12
   192b4:	cmp	r0, r1, lsl #11
   192b8:	adc	r2, r2, r2
   192bc:	subcs	r0, r0, r1, lsl #11
   192c0:	cmp	r0, r1, lsl #10
   192c4:	adc	r2, r2, r2
   192c8:	subcs	r0, r0, r1, lsl #10
   192cc:	cmp	r0, r1, lsl #9
   192d0:	adc	r2, r2, r2
   192d4:	subcs	r0, r0, r1, lsl #9
   192d8:	cmp	r0, r1, lsl #8
   192dc:	adc	r2, r2, r2
   192e0:	subcs	r0, r0, r1, lsl #8
   192e4:	cmp	r0, r1, lsl #7
   192e8:	adc	r2, r2, r2
   192ec:	subcs	r0, r0, r1, lsl #7
   192f0:	cmp	r0, r1, lsl #6
   192f4:	adc	r2, r2, r2
   192f8:	subcs	r0, r0, r1, lsl #6
   192fc:	cmp	r0, r1, lsl #5
   19300:	adc	r2, r2, r2
   19304:	subcs	r0, r0, r1, lsl #5
   19308:	cmp	r0, r1, lsl #4
   1930c:	adc	r2, r2, r2
   19310:	subcs	r0, r0, r1, lsl #4
   19314:	cmp	r0, r1, lsl #3
   19318:	adc	r2, r2, r2
   1931c:	subcs	r0, r0, r1, lsl #3
   19320:	cmp	r0, r1, lsl #2
   19324:	adc	r2, r2, r2
   19328:	subcs	r0, r0, r1, lsl #2
   1932c:	cmp	r0, r1, lsl #1
   19330:	adc	r2, r2, r2
   19334:	subcs	r0, r0, r1, lsl #1
   19338:	cmp	r0, r1
   1933c:	adc	r2, r2, r2
   19340:	subcs	r0, r0, r1
   19344:	mov	r0, r2
   19348:	bx	lr
   1934c:	moveq	r0, #1
   19350:	movne	r0, #0
   19354:	bx	lr
   19358:	clz	r2, r1
   1935c:	rsb	r2, r2, #31
   19360:	lsr	r0, r0, r2
   19364:	bx	lr
   19368:	cmp	r0, #0
   1936c:	mvnne	r0, #0
   19370:	b	193d0 <fts_children@@Base+0x1b94>
   19374:	cmp	r1, #0
   19378:	beq	19368 <fts_children@@Base+0x1b2c>
   1937c:	push	{r0, r1, lr}
   19380:	bl	19188 <fts_children@@Base+0x194c>
   19384:	pop	{r1, r2, lr}
   19388:	mul	r3, r2, r0
   1938c:	sub	r1, r1, r3
   19390:	bx	lr
   19394:	cmp	r3, #0
   19398:	cmpeq	r2, #0
   1939c:	bne	193b4 <fts_children@@Base+0x1b78>
   193a0:	cmp	r1, #0
   193a4:	cmpeq	r0, #0
   193a8:	mvnne	r1, #0
   193ac:	mvnne	r0, #0
   193b0:	b	193d0 <fts_children@@Base+0x1b94>
   193b4:	sub	sp, sp, #8
   193b8:	push	{sp, lr}
   193bc:	bl	193e0 <fts_children@@Base+0x1ba4>
   193c0:	ldr	lr, [sp, #4]
   193c4:	add	sp, sp, #8
   193c8:	pop	{r2, r3}
   193cc:	bx	lr
   193d0:	push	{r1, lr}
   193d4:	mov	r0, #8
   193d8:	bl	10f90 <raise@plt>
   193dc:	pop	{r1, pc}
   193e0:	cmp	r1, r3
   193e4:	cmpeq	r0, r2
   193e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193ec:	mov	r4, r0
   193f0:	movcc	r0, #0
   193f4:	mov	r5, r1
   193f8:	ldr	lr, [sp, #36]	; 0x24
   193fc:	movcc	r1, r0
   19400:	bcc	194fc <fts_children@@Base+0x1cc0>
   19404:	cmp	r3, #0
   19408:	clzeq	ip, r2
   1940c:	clzne	ip, r3
   19410:	addeq	ip, ip, #32
   19414:	cmp	r5, #0
   19418:	clzeq	r1, r4
   1941c:	addeq	r1, r1, #32
   19420:	clzne	r1, r5
   19424:	sub	ip, ip, r1
   19428:	sub	sl, ip, #32
   1942c:	lsl	r9, r3, ip
   19430:	rsb	fp, ip, #32
   19434:	orr	r9, r9, r2, lsl sl
   19438:	orr	r9, r9, r2, lsr fp
   1943c:	lsl	r8, r2, ip
   19440:	cmp	r5, r9
   19444:	cmpeq	r4, r8
   19448:	movcc	r0, #0
   1944c:	movcc	r1, r0
   19450:	bcc	1946c <fts_children@@Base+0x1c30>
   19454:	mov	r0, #1
   19458:	subs	r4, r4, r8
   1945c:	lsl	r1, r0, sl
   19460:	orr	r1, r1, r0, lsr fp
   19464:	lsl	r0, r0, ip
   19468:	sbc	r5, r5, r9
   1946c:	cmp	ip, #0
   19470:	beq	194fc <fts_children@@Base+0x1cc0>
   19474:	lsr	r6, r8, #1
   19478:	orr	r6, r6, r9, lsl #31
   1947c:	lsr	r7, r9, #1
   19480:	mov	r2, ip
   19484:	b	194a8 <fts_children@@Base+0x1c6c>
   19488:	subs	r3, r4, r6
   1948c:	sbc	r8, r5, r7
   19490:	adds	r3, r3, r3
   19494:	adc	r8, r8, r8
   19498:	adds	r4, r3, #1
   1949c:	adc	r5, r8, #0
   194a0:	subs	r2, r2, #1
   194a4:	beq	194c4 <fts_children@@Base+0x1c88>
   194a8:	cmp	r5, r7
   194ac:	cmpeq	r4, r6
   194b0:	bcs	19488 <fts_children@@Base+0x1c4c>
   194b4:	adds	r4, r4, r4
   194b8:	adc	r5, r5, r5
   194bc:	subs	r2, r2, #1
   194c0:	bne	194a8 <fts_children@@Base+0x1c6c>
   194c4:	lsr	r3, r4, ip
   194c8:	orr	r3, r3, r5, lsl fp
   194cc:	lsr	r2, r5, ip
   194d0:	orr	r3, r3, r5, lsr sl
   194d4:	adds	r0, r0, r4
   194d8:	mov	r4, r3
   194dc:	lsl	r3, r2, ip
   194e0:	orr	r3, r3, r4, lsl sl
   194e4:	lsl	ip, r4, ip
   194e8:	orr	r3, r3, r4, lsr fp
   194ec:	adc	r1, r1, r5
   194f0:	subs	r0, r0, ip
   194f4:	mov	r5, r2
   194f8:	sbc	r1, r1, r3
   194fc:	cmp	lr, #0
   19500:	strdne	r4, [lr]
   19504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1950c:	mov	r7, r0
   19510:	ldr	r6, [pc, #72]	; 19560 <fts_children@@Base+0x1d24>
   19514:	ldr	r5, [pc, #72]	; 19564 <fts_children@@Base+0x1d28>
   19518:	add	r6, pc, r6
   1951c:	add	r5, pc, r5
   19520:	sub	r6, r6, r5
   19524:	mov	r8, r1
   19528:	mov	r9, r2
   1952c:	bl	10f4c <fstatfs64@plt-0x20>
   19530:	asrs	r6, r6, #2
   19534:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19538:	mov	r4, #0
   1953c:	add	r4, r4, #1
   19540:	ldr	r3, [r5], #4
   19544:	mov	r2, r9
   19548:	mov	r1, r8
   1954c:	mov	r0, r7
   19550:	blx	r3
   19554:	cmp	r6, r4
   19558:	bne	1953c <fts_children@@Base+0x1d00>
   1955c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19560:	andeq	r1, r1, r4, ror #19
   19564:	ldrdeq	r1, [r1], -ip
   19568:	bx	lr
   1956c:	ldr	r3, [pc, #12]	; 19580 <fts_children@@Base+0x1d44>
   19570:	mov	r1, #0
   19574:	add	r3, pc, r3
   19578:	ldr	r2, [r3]
   1957c:	b	11128 <__cxa_atexit@plt>
   19580:	muleq	r1, r0, fp

Disassembly of section .fini:

00019584 <.fini>:
   19584:	push	{r3, lr}
   19588:	pop	{r3, pc}
