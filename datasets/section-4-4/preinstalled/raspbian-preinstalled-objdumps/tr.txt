
raspbian-preinstalled/tr:     file format elf32-littlearm


Disassembly of section .init:

00010d10 <.init>:
   10d10:	push	{r3, lr}
   10d14:	bl	11d14 <__assert_fail@plt+0xd68>
   10d18:	pop	{r3, pc}

Disassembly of section .plt:

00010d1c <calloc@plt-0x14>:
   10d1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d20:	ldr	lr, [pc, #4]	; 10d2c <calloc@plt-0x4>
   10d24:	add	lr, pc, lr
   10d28:	ldr	pc, [lr, #8]!
   10d2c:	ldrdeq	r8, [r1], -r4

00010d30 <calloc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #724]!	; 0x2d4

00010d3c <fputs_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #716]!	; 0x2cc

00010d48 <raise@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #708]!	; 0x2c4

00010d54 <strcmp@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d60 <posix_fadvise64@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #692]!	; 0x2b4

00010d6c <read@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #684]!	; 0x2ac

00010d78 <fflush@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #676]!	; 0x2a4

00010d84 <free@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #668]!	; 0x29c

00010d90 <_exit@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #660]!	; 0x294

00010d9c <memcpy@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #652]!	; 0x28c

00010da8 <__strtoull_internal@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #644]!	; 0x284

00010db4 <mbsinit@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #636]!	; 0x27c

00010dc0 <fwrite_unlocked@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #628]!	; 0x274

00010dcc <memcmp@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #620]!	; 0x26c

00010dd8 <stpcpy@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #612]!	; 0x264

00010de4 <dcgettext@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #604]!	; 0x25c

00010df0 <__stack_chk_fail@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #596]!	; 0x254

00010dfc <realloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #588]!	; 0x24c

00010e08 <textdomain@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #580]!	; 0x244

00010e14 <iswprint@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #572]!	; 0x23c

00010e20 <fwrite@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #564]!	; 0x234

00010e2c <lseek64@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #556]!	; 0x22c

00010e38 <__ctype_get_mb_cur_max@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #548]!	; 0x224

00010e44 <__fpending@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #540]!	; 0x21c

00010e50 <mbrtowc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #532]!	; 0x214

00010e5c <error@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #524]!	; 0x20c

00010e68 <malloc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #516]!	; 0x204

00010e74 <__libc_start_main@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e80 <__freading@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #500]!	; 0x1f4

00010e8c <__ctype_tolower_loc@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #492]!	; 0x1ec

00010e98 <__ctype_toupper_loc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea4 <__gmon_start__@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb0 <getopt_long@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #468]!	; 0x1d4

00010ebc <__ctype_b_loc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec8 <exit@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ed4 <strlen@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee0 <strchr@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #436]!	; 0x1b4

00010eec <__errno_location@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef8 <__sprintf_chk@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #420]!	; 0x1a4

00010f04 <__cxa_atexit@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #412]!	; 0x19c

00010f10 <memset@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #404]!	; 0x194

00010f1c <__printf_chk@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #396]!	; 0x18c

00010f28 <fileno@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #388]!	; 0x184

00010f34 <__fprintf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #380]!	; 0x17c

00010f40 <fclose@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #372]!	; 0x174

00010f4c <fseeko64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #364]!	; 0x16c

00010f58 <setlocale@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #356]!	; 0x164

00010f64 <strrchr@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #348]!	; 0x15c

00010f70 <nl_langinfo@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #340]!	; 0x154

00010f7c <bindtextdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #332]!	; 0x14c

00010f88 <strncmp@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #324]!	; 0x144

00010f94 <abort@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #316]!	; 0x13c

00010fa0 <close@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #308]!	; 0x134

00010fac <__assert_fail@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #300]!	; 0x12c

Disassembly of section .text:

00010fb8 <.text>:
   10fb8:	ldr	r3, [pc, #3148]	; 11c0c <__assert_fail@plt+0xc60>
   10fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc0:	sub	sp, sp, #428	; 0x1ac
   10fc4:	ldr	r3, [r3]
   10fc8:	mov	r6, r0
   10fcc:	ldr	r0, [r1]
   10fd0:	str	r3, [sp, #420]	; 0x1a4
   10fd4:	mov	r4, r1
   10fd8:	bl	1374c <__assert_fail@plt+0x27a0>
   10fdc:	ldr	r1, [pc, #3116]	; 11c10 <__assert_fail@plt+0xc64>
   10fe0:	mov	r0, #6
   10fe4:	bl	10f58 <setlocale@plt>
   10fe8:	ldr	r1, [pc, #3108]	; 11c14 <__assert_fail@plt+0xc68>
   10fec:	ldr	r0, [pc, #3108]	; 11c18 <__assert_fail@plt+0xc6c>
   10ff0:	bl	10f7c <bindtextdomain@plt>
   10ff4:	ldr	r0, [pc, #3100]	; 11c18 <__assert_fail@plt+0xc6c>
   10ff8:	bl	10e08 <textdomain@plt>
   10ffc:	ldr	r0, [pc, #3096]	; 11c1c <__assert_fail@plt+0xc70>
   11000:	bl	171ac <__assert_fail@plt+0x6200>
   11004:	ldr	r8, [pc, #3092]	; 11c20 <__assert_fail@plt+0xc74>
   11008:	ldr	r7, [pc, #3092]	; 11c24 <__assert_fail@plt+0xc78>
   1100c:	ldr	sl, [pc, #3092]	; 11c28 <__assert_fail@plt+0xc7c>
   11010:	ldr	fp, [pc, #3092]	; 11c2c <__assert_fail@plt+0xc80>
   11014:	mov	r5, #0
   11018:	mov	r9, #1
   1101c:	str	r5, [sp]
   11020:	mov	r3, r8
   11024:	mov	r2, r7
   11028:	mov	r1, r4
   1102c:	mov	r0, r6
   11030:	bl	10eb0 <getopt_long@plt>
   11034:	cmn	r0, #1
   11038:	beq	110f8 <__assert_fail@plt+0x14c>
   1103c:	cmp	r0, #67	; 0x43
   11040:	beq	110a8 <__assert_fail@plt+0xfc>
   11044:	ble	11064 <__assert_fail@plt+0xb8>
   11048:	cmp	r0, #100	; 0x64
   1104c:	beq	110c0 <__assert_fail@plt+0x114>
   11050:	ble	110a0 <__assert_fail@plt+0xf4>
   11054:	cmp	r0, #115	; 0x73
   11058:	bne	11090 <__assert_fail@plt+0xe4>
   1105c:	strb	r9, [sl, #770]	; 0x302
   11060:	b	1101c <__assert_fail@plt+0x70>
   11064:	cmn	r0, #2
   11068:	beq	11a94 <__assert_fail@plt+0xae8>
   1106c:	cmp	r0, #65	; 0x41
   11070:	bne	110b0 <__assert_fail@plt+0x104>
   11074:	mov	r1, fp
   11078:	mov	r0, #3
   1107c:	bl	10f58 <setlocale@plt>
   11080:	mov	r1, fp
   11084:	mov	r0, #0
   11088:	bl	10f58 <setlocale@plt>
   1108c:	b	1101c <__assert_fail@plt+0x70>
   11090:	cmp	r0, #116	; 0x74
   11094:	bne	110b8 <__assert_fail@plt+0x10c>
   11098:	strb	r9, [sl, #771]	; 0x303
   1109c:	b	1101c <__assert_fail@plt+0x70>
   110a0:	cmp	r0, #99	; 0x63
   110a4:	bne	110b8 <__assert_fail@plt+0x10c>
   110a8:	strb	r9, [sl, #768]	; 0x300
   110ac:	b	1101c <__assert_fail@plt+0x70>
   110b0:	cmn	r0, #3
   110b4:	beq	110c8 <__assert_fail@plt+0x11c>
   110b8:	mov	r0, #1
   110bc:	bl	132cc <__assert_fail@plt+0x2320>
   110c0:	strb	r9, [sl, #769]	; 0x301
   110c4:	b	1101c <__assert_fail@plt+0x70>
   110c8:	ldr	r1, [pc, #2912]	; 11c30 <__assert_fail@plt+0xc84>
   110cc:	ldr	r3, [pc, #2912]	; 11c34 <__assert_fail@plt+0xc88>
   110d0:	ldr	r2, [pc, #2912]	; 11c38 <__assert_fail@plt+0xc8c>
   110d4:	str	r5, [sp, #4]
   110d8:	ldr	r0, [r1]
   110dc:	ldr	r3, [r3]
   110e0:	ldr	r1, [pc, #2900]	; 11c3c <__assert_fail@plt+0xc90>
   110e4:	str	r2, [sp]
   110e8:	ldr	r2, [pc, #2896]	; 11c40 <__assert_fail@plt+0xc94>
   110ec:	bl	15e84 <__assert_fail@plt+0x4ed8>
   110f0:	mov	r0, #0
   110f4:	bl	10ec8 <exit@plt>
   110f8:	ldr	r7, [pc, #2884]	; 11c44 <__assert_fail@plt+0xc98>
   110fc:	ldr	fp, [pc, #2852]	; 11c28 <__assert_fail@plt+0xc7c>
   11100:	ldr	sl, [r7]
   11104:	ldrb	r3, [fp, #769]	; 0x301
   11108:	sub	sl, r6, sl
   1110c:	cmp	sl, #2
   11110:	ldrb	r9, [fp, #770]	; 0x302
   11114:	beq	114d0 <__assert_fail@plt+0x524>
   11118:	cmp	r3, r9
   1111c:	strb	r5, [fp, #772]	; 0x304
   11120:	beq	115a4 <__assert_fail@plt+0x5f8>
   11124:	cmp	r3, r9
   11128:	mov	r3, #1
   1112c:	bls	11a80 <__assert_fail@plt+0xad4>
   11130:	mov	r5, r3
   11134:	cmp	sl, r3
   11138:	blt	11ad4 <__assert_fail@plt+0xb28>
   1113c:	cmp	sl, r5
   11140:	bgt	11ba4 <__assert_fail@plt+0xbf8>
   11144:	mov	r0, #24
   11148:	bl	15f88 <__assert_fail@plt+0x4fdc>
   1114c:	ldr	r2, [r7]
   11150:	mov	r5, #0
   11154:	add	r8, sp, #80	; 0x50
   11158:	mov	r1, r8
   1115c:	mov	r3, r0
   11160:	ldr	r0, [r4, r2, lsl #2]
   11164:	str	r5, [r3, #4]
   11168:	str	r3, [sp, #84]	; 0x54
   1116c:	str	r3, [sp, #80]	; 0x50
   11170:	bl	12850 <__assert_fail@plt+0x18a4>
   11174:	cmp	r0, r5
   11178:	beq	1155c <__assert_fail@plt+0x5b0>
   1117c:	cmp	sl, #2
   11180:	movne	r4, r5
   11184:	beq	11520 <__assert_fail@plt+0x574>
   11188:	mov	r0, r8
   1118c:	bl	121e4 <__assert_fail@plt+0x1238>
   11190:	ldrb	r3, [fp, #768]	; 0x300
   11194:	cmp	r3, #0
   11198:	bne	115ac <__assert_fail@plt+0x600>
   1119c:	ldr	r9, [sp, #104]	; 0x68
   111a0:	cmp	r9, #0
   111a4:	movne	r2, #5
   111a8:	ldrne	r1, [pc, #2712]	; 11c48 <__assert_fail@plt+0xc9c>
   111ac:	bne	1120c <__assert_fail@plt+0x260>
   111b0:	cmp	r4, #0
   111b4:	beq	112ec <__assert_fail@plt+0x340>
   111b8:	add	r5, sp, #88	; 0x58
   111bc:	mov	r0, r4
   111c0:	ldrd	r6, [r5, #8]
   111c4:	bl	121e4 <__assert_fail@plt+0x1238>
   111c8:	ldrd	r2, [r4, #16]
   111cc:	ldr	r1, [r4, #24]
   111d0:	cmp	r7, r3
   111d4:	cmpeq	r6, r2
   111d8:	strd	r2, [sp, #8]
   111dc:	bcc	111e8 <__assert_fail@plt+0x23c>
   111e0:	cmp	r1, #1
   111e4:	beq	11654 <__assert_fail@plt+0x6a8>
   111e8:	cmp	r1, #1
   111ec:	bhi	11b00 <__assert_fail@plt+0xb54>
   111f0:	ldrb	r3, [fp, #772]	; 0x304
   111f4:	cmp	r3, #0
   111f8:	bne	11680 <__assert_fail@plt+0x6d4>
   111fc:	cmp	r1, #0
   11200:	beq	112ec <__assert_fail@plt+0x340>
   11204:	ldr	r1, [pc, #2624]	; 11c4c <__assert_fail@plt+0xca0>
   11208:	mov	r2, #5
   1120c:	mov	r0, #0
   11210:	bl	10de4 <dcgettext@plt>
   11214:	mov	r1, #0
   11218:	mov	r2, r0
   1121c:	mov	r0, #1
   11220:	bl	10e5c <error@plt>
   11224:	ldrb	r9, [r1, #8]
   11228:	ldrd	r2, [sp, #8]
   1122c:	ldr	r1, [sp, #16]
   11230:	mov	r0, #24
   11234:	subs	r6, r1, r2
   11238:	ldr	r1, [sp, #20]
   1123c:	sbc	r7, r1, r3
   11240:	bl	15f88 <__assert_fail@plt+0x4fdc>
   11244:	ldr	r1, [r4, #4]
   11248:	mov	r2, #0
   1124c:	cmp	r1, r2
   11250:	mov	r3, #4
   11254:	str	r2, [r0, #4]
   11258:	str	r3, [r0]
   1125c:	ldrdne	r2, [r5, #8]
   11260:	str	r7, [r0, #20]
   11264:	strb	r9, [r0, #8]
   11268:	str	r6, [r0, #16]
   1126c:	strne	r0, [r1, #4]
   11270:	strne	r0, [r4, #4]
   11274:	strdne	r2, [r4, #16]
   11278:	beq	11c04 <__assert_fail@plt+0xc58>
   1127c:	ldrb	r3, [fp, #768]	; 0x300
   11280:	cmp	r3, #0
   11284:	beq	112ec <__assert_fail@plt+0x340>
   11288:	ldrb	r3, [sp, #113]	; 0x71
   1128c:	cmp	r3, #0
   11290:	beq	112ec <__assert_fail@plt+0x340>
   11294:	ldrd	r2, [r4, #16]
   11298:	ldrd	r0, [r5, #8]
   1129c:	cmp	r3, r1
   112a0:	cmpeq	r2, r0
   112a4:	bne	11a88 <__assert_fail@plt+0xadc>
   112a8:	mvn	r2, #1
   112ac:	mvn	r3, #0
   112b0:	mov	r1, #0
   112b4:	strd	r2, [r4, #8]
   112b8:	mov	r0, r4
   112bc:	bl	123a0 <__assert_fail@plt+0x13f4>
   112c0:	cmn	r0, #1
   112c4:	mov	r5, r0
   112c8:	bne	112d8 <__assert_fail@plt+0x32c>
   112cc:	b	11a88 <__assert_fail@plt+0xadc>
   112d0:	cmp	r5, r0
   112d4:	bne	11a88 <__assert_fail@plt+0xadc>
   112d8:	mov	r1, #0
   112dc:	mov	r0, r4
   112e0:	bl	123a0 <__assert_fail@plt+0x13f4>
   112e4:	cmn	r0, #1
   112e8:	bne	112d0 <__assert_fail@plt+0x324>
   112ec:	ldr	r3, [pc, #2396]	; 11c50 <__assert_fail@plt+0xca4>
   112f0:	mov	r1, #2
   112f4:	ldr	r0, [r3]
   112f8:	bl	13718 <__assert_fail@plt+0x276c>
   112fc:	ldrb	r3, [fp, #770]	; 0x302
   11300:	mov	r5, r3
   11304:	cmp	sl, #1
   11308:	movne	r5, #0
   1130c:	andeq	r5, r5, #1
   11310:	cmp	r5, #0
   11314:	str	r3, [sp, #24]
   11318:	bne	11a14 <__assert_fail@plt+0xa68>
   1131c:	ldrb	r3, [fp, #769]	; 0x301
   11320:	cmp	r3, #0
   11324:	beq	1139c <__assert_fail@plt+0x3f0>
   11328:	cmp	sl, #1
   1132c:	beq	11a30 <__assert_fail@plt+0xa84>
   11330:	ldr	r3, [sp, #24]
   11334:	cmp	sl, #2
   11338:	movne	r3, #0
   1133c:	andeq	r3, r3, #1
   11340:	cmp	r3, #0
   11344:	beq	1139c <__assert_fail@plt+0x3f0>
   11348:	ldrb	r1, [fp, #768]	; 0x300
   1134c:	mov	r0, r8
   11350:	ldr	r2, [pc, #2256]	; 11c28 <__assert_fail@plt+0xc7c>
   11354:	bl	1307c <__assert_fail@plt+0x20d0>
   11358:	mov	r0, r4
   1135c:	mov	r1, r5
   11360:	ldr	r2, [pc, #2284]	; 11c54 <__assert_fail@plt+0xca8>
   11364:	bl	1307c <__assert_fail@plt+0x20d0>
   11368:	ldr	r0, [pc, #2280]	; 11c58 <__assert_fail@plt+0xcac>
   1136c:	bl	130e0 <__assert_fail@plt+0x2134>
   11370:	mov	r0, #0
   11374:	bl	10fa0 <close@plt>
   11378:	cmp	r0, #0
   1137c:	bne	11b94 <__assert_fail@plt+0xbe8>
   11380:	ldr	r3, [pc, #2180]	; 11c0c <__assert_fail@plt+0xc60>
   11384:	ldr	r2, [sp, #420]	; 0x1a4
   11388:	ldr	r3, [r3]
   1138c:	cmp	r2, r3
   11390:	bne	11a9c <__assert_fail@plt+0xaf0>
   11394:	add	sp, sp, #428	; 0x1ac
   11398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1139c:	ldrb	r3, [fp, #772]	; 0x304
   113a0:	cmp	r3, #0
   113a4:	beq	11370 <__assert_fail@plt+0x3c4>
   113a8:	ldrb	r3, [fp, #768]	; 0x300
   113ac:	cmp	r3, #0
   113b0:	ldreq	r2, [pc, #2212]	; 11c5c <__assert_fail@plt+0xcb0>
   113b4:	bne	11968 <__assert_fail@plt+0x9bc>
   113b8:	strb	r3, [r2, #1]!
   113bc:	add	r3, r3, #1
   113c0:	cmp	r3, #256	; 0x100
   113c4:	bne	113b8 <__assert_fail@plt+0x40c>
   113c8:	ldr	r3, [pc, #2192]	; 11c60 <__assert_fail@plt+0xcb4>
   113cc:	mvn	r7, #3
   113d0:	mvn	r2, #1
   113d4:	add	r1, sp, #72	; 0x48
   113d8:	add	r6, r3, #256	; 0x100
   113dc:	mul	r7, r7, r3
   113e0:	add	r5, sp, #88	; 0x58
   113e4:	mvn	r3, #0
   113e8:	str	r1, [sp, #8]
   113ec:	add	r1, sp, #76	; 0x4c
   113f0:	str	r1, [sp, #16]
   113f4:	strd	r2, [r5]
   113f8:	strd	r2, [r4, #8]
   113fc:	b	1142c <__assert_fail@plt+0x480>
   11400:	ldr	r3, [sp, #76]	; 0x4c
   11404:	cmp	r3, #1
   11408:	beq	11564 <__assert_fail@plt+0x5b8>
   1140c:	cmn	sl, #1
   11410:	cmnne	r0, #1
   11414:	beq	118b0 <__assert_fail@plt+0x904>
   11418:	ldr	r3, [sp, #76]	; 0x4c
   1141c:	add	sl, fp, sl
   11420:	cmp	r3, #2
   11424:	strb	r0, [sl, #256]	; 0x100
   11428:	bne	114a4 <__assert_fail@plt+0x4f8>
   1142c:	ldr	r1, [sp, #8]
   11430:	mov	r0, r8
   11434:	bl	123a0 <__assert_fail@plt+0x13f4>
   11438:	ldr	r1, [sp, #16]
   1143c:	mov	sl, r0
   11440:	mov	r0, r4
   11444:	bl	123a0 <__assert_fail@plt+0x13f4>
   11448:	ldr	r3, [sp, #72]	; 0x48
   1144c:	cmp	r3, #0
   11450:	beq	11400 <__assert_fail@plt+0x454>
   11454:	cmp	r3, #1
   11458:	bne	1140c <__assert_fail@plt+0x460>
   1145c:	ldr	r3, [sp, #76]	; 0x4c
   11460:	cmp	r3, #0
   11464:	bne	1140c <__assert_fail@plt+0x460>
   11468:	bl	10ebc <__ctype_b_loc@plt>
   1146c:	ldr	r9, [pc, #2028]	; 11c60 <__assert_fail@plt+0xcb4>
   11470:	ldr	sl, [r0]
   11474:	sub	sl, sl, #2
   11478:	ldrh	r3, [sl, #2]!
   1147c:	tst	r3, #256	; 0x100
   11480:	beq	11498 <__assert_fail@plt+0x4ec>
   11484:	bl	10e8c <__ctype_tolower_loc@plt>
   11488:	ldr	r3, [r0]
   1148c:	add	r3, r3, r9, lsl #2
   11490:	ldr	r3, [r3, r7]
   11494:	strb	r3, [r9]
   11498:	add	r9, r9, #1
   1149c:	cmp	r6, r9
   114a0:	bne	11478 <__assert_fail@plt+0x4cc>
   114a4:	ldr	r2, [sp, #84]	; 0x54
   114a8:	ldr	r3, [r4, #4]
   114ac:	mvn	r0, #0
   114b0:	ldr	r2, [r2, #4]
   114b4:	mvn	r1, #0
   114b8:	str	r2, [sp, #84]	; 0x54
   114bc:	ldr	r3, [r3, #4]
   114c0:	strd	r0, [r5]
   114c4:	strd	r0, [r4, #8]
   114c8:	str	r3, [r4, #4]
   114cc:	b	1142c <__assert_fail@plt+0x480>
   114d0:	cmp	r3, #0
   114d4:	bne	11610 <__assert_fail@plt+0x664>
   114d8:	cmp	r9, #0
   114dc:	mov	r3, #1
   114e0:	strb	r3, [fp, #772]	; 0x304
   114e4:	movne	r5, sl
   114e8:	bne	1113c <__assert_fail@plt+0x190>
   114ec:	mov	r0, #24
   114f0:	bl	15f88 <__assert_fail@plt+0x4fdc>
   114f4:	ldr	r2, [r7]
   114f8:	add	r8, sp, #80	; 0x50
   114fc:	mov	r1, r8
   11500:	mov	r3, r0
   11504:	str	r0, [sp, #84]	; 0x54
   11508:	str	r9, [r3, #4]
   1150c:	ldr	r0, [r4, r2, lsl #2]
   11510:	str	r3, [sp, #80]	; 0x50
   11514:	bl	12850 <__assert_fail@plt+0x18a4>
   11518:	cmp	r0, #0
   1151c:	beq	1155c <__assert_fail@plt+0x5b0>
   11520:	mov	r0, #24
   11524:	bl	15f88 <__assert_fail@plt+0x4fdc>
   11528:	ldr	r2, [r7]
   1152c:	add	r1, sp, #120	; 0x78
   11530:	add	r2, r2, #1
   11534:	mov	r3, r0
   11538:	str	r0, [sp, #124]	; 0x7c
   1153c:	ldr	r0, [r4, r2, lsl #2]
   11540:	mov	r2, #0
   11544:	str	r2, [r3, #4]
   11548:	str	r3, [sp, #120]	; 0x78
   1154c:	bl	12850 <__assert_fail@plt+0x18a4>
   11550:	cmp	r0, #0
   11554:	addne	r4, sp, #120	; 0x78
   11558:	bne	11188 <__assert_fail@plt+0x1dc>
   1155c:	mov	r0, #1
   11560:	b	11380 <__assert_fail@plt+0x3d4>
   11564:	bl	10ebc <__ctype_b_loc@plt>
   11568:	ldr	r9, [pc, #1776]	; 11c60 <__assert_fail@plt+0xcb4>
   1156c:	ldr	sl, [r0]
   11570:	sub	sl, sl, #2
   11574:	ldrh	r3, [sl, #2]!
   11578:	tst	r3, #512	; 0x200
   1157c:	beq	11594 <__assert_fail@plt+0x5e8>
   11580:	bl	10e98 <__ctype_toupper_loc@plt>
   11584:	ldr	r3, [r0]
   11588:	add	r3, r3, r9, lsl #2
   1158c:	ldr	r3, [r3, r7]
   11590:	strb	r3, [r9]
   11594:	add	r9, r9, #1
   11598:	cmp	r6, r9
   1159c:	bne	11574 <__assert_fail@plt+0x5c8>
   115a0:	b	114a4 <__assert_fail@plt+0x4f8>
   115a4:	mov	r3, #2
   115a8:	b	11130 <__assert_fail@plt+0x184>
   115ac:	mov	r2, #256	; 0x100
   115b0:	mov	r1, #0
   115b4:	add	r0, sp, #164	; 0xa4
   115b8:	bl	10f10 <memset@plt>
   115bc:	add	r5, sp, #88	; 0x58
   115c0:	mvn	r2, #1
   115c4:	mvn	r3, #0
   115c8:	mov	r6, #256	; 0x100
   115cc:	strd	r2, [r5]
   115d0:	mov	r7, #1
   115d4:	b	115f0 <__assert_fail@plt+0x644>
   115d8:	add	r3, sp, #424	; 0x1a8
   115dc:	add	r0, r3, r0
   115e0:	ldrb	r3, [r0, #-260]	; 0xfffffefc
   115e4:	strb	r7, [r0, #-260]	; 0xfffffefc
   115e8:	eor	r3, r3, #1
   115ec:	sub	r6, r6, r3
   115f0:	mov	r1, #0
   115f4:	mov	r0, r8
   115f8:	bl	123a0 <__assert_fail@plt+0x13f4>
   115fc:	cmn	r0, #1
   11600:	bne	115d8 <__assert_fail@plt+0x62c>
   11604:	asr	r7, r6, #31
   11608:	strd	r6, [r5, #8]
   1160c:	b	1119c <__assert_fail@plt+0x1f0>
   11610:	cmp	r9, #0
   11614:	strb	r5, [fp, #772]	; 0x304
   11618:	beq	11124 <__assert_fail@plt+0x178>
   1161c:	mov	r0, #24
   11620:	bl	15f88 <__assert_fail@plt+0x4fdc>
   11624:	ldr	r2, [r7]
   11628:	add	r8, sp, #80	; 0x50
   1162c:	mov	r1, r8
   11630:	mov	r3, r0
   11634:	str	r0, [sp, #84]	; 0x54
   11638:	str	r5, [r3, #4]
   1163c:	ldr	r0, [r4, r2, lsl #2]
   11640:	str	r3, [sp, #80]	; 0x50
   11644:	bl	12850 <__assert_fail@plt+0x18a4>
   11648:	cmp	r0, #0
   1164c:	bne	11520 <__assert_fail@plt+0x574>
   11650:	b	1155c <__assert_fail@plt+0x5b0>
   11654:	ldr	r3, [sp, #8]
   11658:	ldrb	r1, [fp, #772]	; 0x304
   1165c:	subs	r2, r6, r3
   11660:	ldr	r3, [sp, #12]
   11664:	sbc	r0, r7, r3
   11668:	ldr	r3, [r4, #28]
   1166c:	cmp	r1, #0
   11670:	str	r0, [r3, #20]
   11674:	str	r2, [r3, #16]
   11678:	strd	r6, [r4, #16]
   1167c:	beq	11204 <__assert_fail@plt+0x258>
   11680:	ldrb	r7, [r4, #32]
   11684:	cmp	r7, #0
   11688:	movne	r2, #5
   1168c:	ldrne	r1, [pc, #1488]	; 11c64 <__assert_fail@plt+0xcb8>
   11690:	bne	1120c <__assert_fail@plt+0x260>
   11694:	ldrb	r6, [r4, #34]	; 0x22
   11698:	cmp	r6, #0
   1169c:	movne	r2, #5
   116a0:	ldrne	r1, [pc, #1472]	; 11c68 <__assert_fail@plt+0xcbc>
   116a4:	bne	1120c <__assert_fail@plt+0x260>
   116a8:	ldrb	r7, [r4, #33]	; 0x21
   116ac:	cmp	r7, #0
   116b0:	ldrdeq	r2, [r4, #16]
   116b4:	strdeq	r2, [sp, #8]
   116b8:	beq	1184c <__assert_fail@plt+0x8a0>
   116bc:	bl	10ebc <__ctype_b_loc@plt>
   116c0:	mov	r2, r6
   116c4:	ldr	r3, [r0]
   116c8:	add	r0, r3, #508	; 0x1fc
   116cc:	add	r0, r0, #2
   116d0:	sub	r3, r3, #2
   116d4:	ldrh	r1, [r3, #2]!
   116d8:	tst	r1, #256	; 0x100
   116dc:	addne	r9, r9, #1
   116e0:	tst	r1, #512	; 0x200
   116e4:	addne	r2, r2, #1
   116e8:	cmp	r3, r0
   116ec:	bne	116d4 <__assert_fail@plt+0x728>
   116f0:	ldrd	r0, [r5, #8]
   116f4:	ldr	r3, [sp, #84]	; 0x54
   116f8:	add	ip, sp, #72	; 0x48
   116fc:	strd	r0, [sp, #40]	; 0x28
   11700:	ldrd	r0, [r4, #16]
   11704:	str	r3, [sp, #60]	; 0x3c
   11708:	ldr	r3, [r4, #4]
   1170c:	strd	r0, [sp, #48]	; 0x30
   11710:	str	r3, [sp, #64]	; 0x40
   11714:	sub	r1, r2, #1
   11718:	mvn	r3, #0
   1171c:	mvn	r2, #1
   11720:	sub	r0, r9, #1
   11724:	str	ip, [sp, #8]
   11728:	add	ip, sp, #76	; 0x4c
   1172c:	str	sl, [sp, #68]	; 0x44
   11730:	mov	r6, r7
   11734:	str	ip, [sp, #16]
   11738:	strd	r2, [r5]
   1173c:	strd	r2, [r4, #8]
   11740:	str	r8, [sp, #56]	; 0x38
   11744:	mov	r9, r1
   11748:	mov	sl, r0
   1174c:	b	11814 <__assert_fail@plt+0x868>
   11750:	cmp	r1, #2
   11754:	beq	117dc <__assert_fail@plt+0x830>
   11758:	cmp	r6, #0
   1175c:	beq	11ac8 <__assert_fail@plt+0xb1c>
   11760:	ldr	ip, [sp, #72]	; 0x48
   11764:	cmp	ip, #2
   11768:	beq	11ac8 <__assert_fail@plt+0xb1c>
   1176c:	ldrd	r2, [r5, #8]
   11770:	cmp	ip, #1
   11774:	ldr	lr, [sp, #84]	; 0x54
   11778:	movne	ip, r9
   1177c:	moveq	ip, sl
   11780:	subs	r6, r2, ip
   11784:	sbc	r7, r3, #0
   11788:	ldrd	r2, [r4, #16]
   1178c:	cmp	r1, #1
   11790:	ldr	r1, [lr, #4]
   11794:	strd	r6, [sp, #32]
   11798:	str	r1, [sp, #84]	; 0x54
   1179c:	movne	r1, r9
   117a0:	moveq	r1, sl
   117a4:	subs	r6, r2, r1
   117a8:	sbc	r7, r3, #0
   117ac:	ldr	ip, [r4, #4]
   117b0:	mvn	r2, #0
   117b4:	mvn	r3, #0
   117b8:	strd	r6, [sp, #24]
   117bc:	ldr	ip, [ip, #4]
   117c0:	ldrd	r6, [sp, #32]
   117c4:	strd	r2, [r5]
   117c8:	strd	r2, [r4, #8]
   117cc:	ldrd	r2, [sp, #24]
   117d0:	strd	r6, [r5, #8]
   117d4:	str	ip, [r4, #4]
   117d8:	strd	r2, [r4, #16]
   117dc:	ldm	r5, {r1, r6}
   117e0:	ldr	r7, [r4, #8]
   117e4:	ldr	ip, [r4, #12]
   117e8:	and	r6, r6, r1
   117ec:	and	r7, r7, ip
   117f0:	cmn	r6, #1
   117f4:	movne	r6, #0
   117f8:	moveq	r6, #1
   117fc:	cmn	r7, #1
   11800:	movne	r7, #0
   11804:	moveq	r7, #1
   11808:	cmn	r0, #1
   1180c:	cmnne	r8, #1
   11810:	beq	11910 <__assert_fail@plt+0x964>
   11814:	ldr	r1, [sp, #8]
   11818:	ldr	r0, [sp, #56]	; 0x38
   1181c:	bl	123a0 <__assert_fail@plt+0x13f4>
   11820:	ldr	r1, [sp, #16]
   11824:	mov	r8, r0
   11828:	mov	r0, r4
   1182c:	bl	123a0 <__assert_fail@plt+0x13f4>
   11830:	cmp	r7, #0
   11834:	ldr	r1, [sp, #76]	; 0x4c
   11838:	bne	11750 <__assert_fail@plt+0x7a4>
   1183c:	cmp	r1, #2
   11840:	beq	117dc <__assert_fail@plt+0x830>
   11844:	ldr	ip, [sp, #72]	; 0x48
   11848:	b	1176c <__assert_fail@plt+0x7c0>
   1184c:	ldrd	r2, [r5, #8]
   11850:	ldrd	r0, [sp, #8]
   11854:	strd	r2, [sp, #16]
   11858:	cmp	r3, r1
   1185c:	cmpeq	r2, r0
   11860:	bls	1127c <__assert_fail@plt+0x2d0>
   11864:	ldrb	r9, [fp, #771]	; 0x303
   11868:	cmp	r9, #0
   1186c:	bne	1127c <__assert_fail@plt+0x2d0>
   11870:	orrs	r3, r0, r1
   11874:	moveq	r2, #5
   11878:	ldreq	r1, [pc, #1004]	; 11c6c <__assert_fail@plt+0xcc0>
   1187c:	beq	1120c <__assert_fail@plt+0x260>
   11880:	ldr	r1, [r4, #4]
   11884:	ldr	r0, [r1]
   11888:	cmp	r0, #4
   1188c:	ldrls	pc, [pc, r0, lsl #2]
   11890:	b	11c08 <__assert_fail@plt+0xc5c>
   11894:	andeq	r1, r1, r4, lsr #4
   11898:	andeq	r1, r1, r8, lsr #17
   1189c:	strdeq	r1, [r1], -r8
   118a0:	andeq	r1, r1, r8, lsl #24
   118a4:	andeq	r1, r1, r4, lsr #4
   118a8:	ldrb	r9, [r1, #9]
   118ac:	b	11228 <__assert_fail@plt+0x27c>
   118b0:	cmn	sl, #1
   118b4:	beq	118c4 <__assert_fail@plt+0x918>
   118b8:	ldrb	r3, [fp, #771]	; 0x303
   118bc:	cmp	r3, #0
   118c0:	beq	11b0c <__assert_fail@plt+0xb60>
   118c4:	ldr	r3, [sp, #24]
   118c8:	cmp	r3, #0
   118cc:	bne	119f8 <__assert_fail@plt+0xa4c>
   118d0:	ldr	r5, [pc, #920]	; 11c70 <__assert_fail@plt+0xcc4>
   118d4:	ldr	r6, [pc, #852]	; 11c30 <__assert_fail@plt+0xc84>
   118d8:	b	118f8 <__assert_fail@plt+0x94c>
   118dc:	ldr	r3, [r6]
   118e0:	mov	r2, r4
   118e4:	mov	r1, #1
   118e8:	mov	r0, r5
   118ec:	bl	10dc0 <fwrite_unlocked@plt>
   118f0:	cmp	r4, r0
   118f4:	bne	11aa0 <__assert_fail@plt+0xaf4>
   118f8:	mov	r1, #8192	; 0x2000
   118fc:	mov	r0, r5
   11900:	bl	12770 <__assert_fail@plt+0x17c4>
   11904:	subs	r4, r0, #0
   11908:	bne	118dc <__assert_fail@plt+0x930>
   1190c:	b	11370 <__assert_fail@plt+0x3c4>
   11910:	ldrd	r2, [r5, #8]
   11914:	ldrd	r0, [sp, #40]	; 0x28
   11918:	ldr	sl, [sp, #68]	; 0x44
   1191c:	ldr	r8, [sp, #56]	; 0x38
   11920:	cmp	r1, r3
   11924:	cmpeq	r0, r2
   11928:	bcc	11954 <__assert_fail@plt+0x9a8>
   1192c:	ldrd	r2, [sp, #48]	; 0x30
   11930:	ldrd	r0, [r4, #16]
   11934:	cmp	r3, r1
   11938:	cmpeq	r2, r0
   1193c:	strd	r0, [sp, #8]
   11940:	ldrcs	r3, [sp, #60]	; 0x3c
   11944:	strcs	r3, [sp, #84]	; 0x54
   11948:	ldrcs	r3, [sp, #64]	; 0x40
   1194c:	strcs	r3, [r4, #4]
   11950:	bcs	1184c <__assert_fail@plt+0x8a0>
   11954:	ldr	r3, [pc, #792]	; 11c74 <__assert_fail@plt+0xcc8>
   11958:	ldr	r2, [pc, #792]	; 11c78 <__assert_fail@plt+0xccc>
   1195c:	ldr	r1, [pc, #792]	; 11c7c <__assert_fail@plt+0xcd0>
   11960:	ldr	r0, [pc, #792]	; 11c80 <__assert_fail@plt+0xcd4>
   11964:	bl	10fac <__assert_fail@plt>
   11968:	mov	r0, r8
   1196c:	ldr	r2, [pc, #692]	; 11c28 <__assert_fail@plt+0xc7c>
   11970:	mov	r1, #0
   11974:	bl	1307c <__assert_fail@plt+0x20d0>
   11978:	ldr	r2, [pc, #732]	; 11c5c <__assert_fail@plt+0xcb0>
   1197c:	mvn	r0, #1
   11980:	mvn	r1, #0
   11984:	mov	r3, #0
   11988:	strd	r0, [r4, #8]
   1198c:	strb	r3, [r2, #1]!
   11990:	add	r3, r3, #1
   11994:	cmp	r3, #256	; 0x100
   11998:	bne	1198c <__assert_fail@plt+0x9e0>
   1199c:	ldr	r6, [pc, #644]	; 11c28 <__assert_fail@plt+0xc7c>
   119a0:	mov	r5, #0
   119a4:	add	r7, r6, #256	; 0x100
   119a8:	b	119b8 <__assert_fail@plt+0xa0c>
   119ac:	add	r5, r5, #1
   119b0:	cmp	r5, #256	; 0x100
   119b4:	beq	118c4 <__assert_fail@plt+0x918>
   119b8:	ldrb	r1, [r6], #1
   119bc:	cmp	r1, #0
   119c0:	bne	119ac <__assert_fail@plt+0xa00>
   119c4:	mov	r0, r4
   119c8:	bl	123a0 <__assert_fail@plt+0x13f4>
   119cc:	cmn	r0, #1
   119d0:	strbne	r0, [r5, r7]
   119d4:	bne	119ac <__assert_fail@plt+0xa00>
   119d8:	ldrb	r3, [fp, #771]	; 0x303
   119dc:	cmp	r3, #0
   119e0:	bne	118c4 <__assert_fail@plt+0x918>
   119e4:	ldr	r3, [pc, #664]	; 11c84 <__assert_fail@plt+0xcd8>
   119e8:	ldr	r2, [pc, #664]	; 11c88 <__assert_fail@plt+0xcdc>
   119ec:	ldr	r1, [pc, #648]	; 11c7c <__assert_fail@plt+0xcd0>
   119f0:	ldr	r0, [pc, #660]	; 11c8c <__assert_fail@plt+0xce0>
   119f4:	bl	10fac <__assert_fail@plt>
   119f8:	mov	r0, r4
   119fc:	ldr	r2, [pc, #592]	; 11c54 <__assert_fail@plt+0xca8>
   11a00:	mov	r1, #0
   11a04:	bl	1307c <__assert_fail@plt+0x20d0>
   11a08:	ldr	r0, [pc, #640]	; 11c90 <__assert_fail@plt+0xce4>
   11a0c:	bl	130e0 <__assert_fail@plt+0x2134>
   11a10:	b	11370 <__assert_fail@plt+0x3c4>
   11a14:	mov	r0, r8
   11a18:	ldrb	r1, [fp, #768]	; 0x300
   11a1c:	ldr	r2, [pc, #560]	; 11c54 <__assert_fail@plt+0xca8>
   11a20:	bl	1307c <__assert_fail@plt+0x20d0>
   11a24:	ldr	r0, [pc, #616]	; 11c94 <__assert_fail@plt+0xce8>
   11a28:	bl	130e0 <__assert_fail@plt+0x2134>
   11a2c:	b	11370 <__assert_fail@plt+0x3c4>
   11a30:	ldrb	r1, [fp, #768]	; 0x300
   11a34:	mov	r0, r8
   11a38:	ldr	r2, [pc, #488]	; 11c28 <__assert_fail@plt+0xc7c>
   11a3c:	bl	1307c <__assert_fail@plt+0x20d0>
   11a40:	ldr	r5, [pc, #552]	; 11c70 <__assert_fail@plt+0xcc4>
   11a44:	ldr	r6, [pc, #484]	; 11c30 <__assert_fail@plt+0xc84>
   11a48:	b	11a68 <__assert_fail@plt+0xabc>
   11a4c:	ldr	r3, [r6]
   11a50:	mov	r2, r4
   11a54:	mov	r1, #1
   11a58:	mov	r0, r5
   11a5c:	bl	10dc0 <fwrite_unlocked@plt>
   11a60:	cmp	r4, r0
   11a64:	bne	11aa0 <__assert_fail@plt+0xaf4>
   11a68:	mov	r1, #8192	; 0x2000
   11a6c:	mov	r0, r5
   11a70:	bl	12688 <__assert_fail@plt+0x16dc>
   11a74:	subs	r4, r0, #0
   11a78:	bne	11a4c <__assert_fail@plt+0xaa0>
   11a7c:	b	11370 <__assert_fail@plt+0x3c4>
   11a80:	mov	r5, #2
   11a84:	b	11134 <__assert_fail@plt+0x188>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #516]	; 11c98 <__assert_fail@plt+0xcec>
   11a90:	b	1120c <__assert_fail@plt+0x260>
   11a94:	mov	r0, #0
   11a98:	bl	132cc <__assert_fail@plt+0x2320>
   11a9c:	bl	10df0 <__stack_chk_fail@plt>
   11aa0:	bl	10eec <__errno_location@plt>
   11aa4:	ldr	r1, [pc, #496]	; 11c9c <__assert_fail@plt+0xcf0>
   11aa8:	mov	r2, #5
   11aac:	ldr	r4, [r0]
   11ab0:	mov	r0, #0
   11ab4:	bl	10de4 <dcgettext@plt>
   11ab8:	mov	r1, r4
   11abc:	mov	r2, r0
   11ac0:	mov	r0, #1
   11ac4:	bl	10e5c <error@plt>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #460]	; 11ca0 <__assert_fail@plt+0xcf4>
   11ad0:	b	1120c <__assert_fail@plt+0x260>
   11ad4:	cmp	sl, #0
   11ad8:	mov	r2, #5
   11adc:	bne	11b20 <__assert_fail@plt+0xb74>
   11ae0:	ldr	r1, [pc, #444]	; 11ca4 <__assert_fail@plt+0xcf8>
   11ae4:	mov	r0, sl
   11ae8:	bl	10de4 <dcgettext@plt>
   11aec:	mov	r1, sl
   11af0:	mov	r2, r0
   11af4:	mov	r0, sl
   11af8:	bl	10e5c <error@plt>
   11afc:	b	110b8 <__assert_fail@plt+0x10c>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #412]	; 11ca8 <__assert_fail@plt+0xcfc>
   11b08:	b	1120c <__assert_fail@plt+0x260>
   11b0c:	ldr	r3, [pc, #368]	; 11c84 <__assert_fail@plt+0xcd8>
   11b10:	ldr	r2, [pc, #404]	; 11cac <__assert_fail@plt+0xd00>
   11b14:	ldr	r1, [pc, #352]	; 11c7c <__assert_fail@plt+0xcd0>
   11b18:	ldr	r0, [pc, #400]	; 11cb0 <__assert_fail@plt+0xd04>
   11b1c:	bl	10fac <__assert_fail@plt>
   11b20:	ldr	r1, [pc, #396]	; 11cb4 <__assert_fail@plt+0xd08>
   11b24:	mov	r0, #0
   11b28:	bl	10de4 <dcgettext@plt>
   11b2c:	sub	r6, r6, #-1073741823	; 0xc0000001
   11b30:	mov	r5, r0
   11b34:	ldr	r0, [r4, r6, lsl #2]
   11b38:	bl	159b0 <__assert_fail@plt+0x4a04>
   11b3c:	mov	r1, #0
   11b40:	mov	r2, r5
   11b44:	mov	r3, r0
   11b48:	mov	r0, r1
   11b4c:	bl	10e5c <error@plt>
   11b50:	ldrb	r1, [fp, #770]	; 0x302
   11b54:	ldr	r0, [pc, #348]	; 11cb8 <__assert_fail@plt+0xd0c>
   11b58:	ldr	r2, [pc, #348]	; 11cbc <__assert_fail@plt+0xd10>
   11b5c:	ldr	r3, [pc, #348]	; 11cc0 <__assert_fail@plt+0xd14>
   11b60:	cmp	r1, #0
   11b64:	ldr	r4, [r0]
   11b68:	movne	r1, r2
   11b6c:	moveq	r1, r3
   11b70:	mov	r2, #5
   11b74:	mov	r0, #0
   11b78:	bl	10de4 <dcgettext@plt>
   11b7c:	ldr	r2, [pc, #320]	; 11cc4 <__assert_fail@plt+0xd18>
   11b80:	mov	r1, #1
   11b84:	mov	r3, r0
   11b88:	mov	r0, r4
   11b8c:	bl	10f34 <__fprintf_chk@plt>
   11b90:	b	110b8 <__assert_fail@plt+0x10c>
   11b94:	bl	10eec <__errno_location@plt>
   11b98:	mov	r2, #5
   11b9c:	ldr	r1, [pc, #292]	; 11cc8 <__assert_fail@plt+0xd1c>
   11ba0:	b	11aac <__assert_fail@plt+0xb00>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #284]	; 11ccc <__assert_fail@plt+0xd20>
   11bac:	mov	r0, #0
   11bb0:	bl	10de4 <dcgettext@plt>
   11bb4:	ldr	r3, [r7]
   11bb8:	add	r5, r5, r3
   11bbc:	mov	r6, r0
   11bc0:	ldr	r0, [r4, r5, lsl #2]
   11bc4:	bl	159b0 <__assert_fail@plt+0x4a04>
   11bc8:	mov	r1, #0
   11bcc:	mov	r2, r6
   11bd0:	mov	r3, r0
   11bd4:	mov	r0, r1
   11bd8:	bl	10e5c <error@plt>
   11bdc:	cmp	sl, #2
   11be0:	bne	110b8 <__assert_fail@plt+0x10c>
   11be4:	ldr	r3, [pc, #204]	; 11cb8 <__assert_fail@plt+0xd0c>
   11be8:	mov	r2, #5
   11bec:	ldr	r1, [pc, #220]	; 11cd0 <__assert_fail@plt+0xd24>
   11bf0:	ldr	r4, [r3]
   11bf4:	b	11b74 <__assert_fail@plt+0xbc8>
   11bf8:	mov	r2, #5
   11bfc:	ldr	r1, [pc, #208]	; 11cd4 <__assert_fail@plt+0xd28>
   11c00:	b	1120c <__assert_fail@plt+0x260>
   11c04:	bl	127c8 <__assert_fail@plt+0x181c>
   11c08:	bl	10f94 <abort@plt>
   11c0c:	andeq	r8, r2, r8, lsl #30
   11c10:	andeq	r8, r1, r8, ror #18
   11c14:	andeq	r8, r1, ip, lsl #1
   11c18:	andeq	r7, r1, r0, ror pc
   11c1c:	andeq	r3, r1, ip, lsr r6
   11c20:			; <UNDEFINED> instruction: 0x000172b8
   11c24:	strheq	r8, [r1], -r4
   11c28:	andeq	r9, r2, ip, asr r1
   11c2c:	andeq	r8, r1, r0, lsr #1
   11c30:	andeq	r9, r2, r4, asr r1
   11c34:	strdeq	r9, [r2], -r0
   11c38:	andeq	r8, r1, r4, lsr #1
   11c3c:	andeq	r7, r1, ip, ror #11
   11c40:	andeq	r7, r1, ip, ror #30
   11c44:	andeq	r9, r2, r0, asr #2
   11c48:	andeq	r8, r1, r4, asr #2
   11c4c:	andeq	r8, r1, r4, asr #7
   11c50:	andeq	r9, r2, r0, asr r1
   11c54:	andeq	r9, r2, ip, asr r3
   11c58:	andeq	r2, r1, r8, lsl #13
   11c5c:	andeq	r9, r2, fp, asr r2
   11c60:	andeq	r9, r2, ip, asr r2
   11c64:			; <UNDEFINED> instruction: 0x000181b0
   11c68:	strdeq	r8, [r1], -r0
   11c6c:			; <UNDEFINED> instruction: 0x000182b8
   11c70:	andeq	r9, r2, r4, ror #8
   11c74:	andeq	r7, r1, r8, lsr #6
   11c78:	andeq	r0, r0, r5, asr #9
   11c7c:	andeq	r7, r1, r0, ror r3
   11c80:	andeq	r8, r1, r0, lsl #5
   11c84:	andeq	r7, r1, r0, asr #6
   11c88:	andeq	r0, r0, sp, lsr #14
   11c8c:	andeq	r8, r1, r4, lsl #8
   11c90:	andeq	r2, r1, r0, ror r7
   11c94:	andeq	r2, r1, r8, ror #12
   11c98:	andeq	r8, r1, r8, asr r3
   11c9c:	andeq	r7, r1, r0, ror #11
   11ca0:	andeq	r8, r1, r0, asr r2
   11ca4:	strheq	r8, [r1], -ip
   11ca8:	andeq	r8, r1, r8, ror r1
   11cac:	andeq	r0, r0, r2, ror #14
   11cb0:	andeq	r8, r1, r0, lsr #8
   11cb4:	andeq	r8, r1, ip, asr #1
   11cb8:	andeq	r9, r2, r8, asr #2
   11cbc:	andeq	r8, r1, ip, lsl r0
   11cc0:	andeq	r8, r1, r0, rrx
   11cc4:	andeq	r8, r1, ip, lsl #13
   11cc8:	andeq	r8, r1, ip, lsr r4
   11ccc:	andeq	r8, r1, r8, ror #1
   11cd0:	strdeq	r8, [r1], -ip
   11cd4:	andeq	r8, r1, ip, ror #5
   11cd8:	mov	fp, #0
   11cdc:	mov	lr, #0
   11ce0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ce4:	mov	r2, sp
   11ce8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cec:	push	{r0}		; (str r0, [sp, #-4]!)
   11cf0:	ldr	ip, [pc, #16]	; 11d08 <__assert_fail@plt+0xd5c>
   11cf4:	push	{ip}		; (str ip, [sp, #-4]!)
   11cf8:	ldr	r0, [pc, #12]	; 11d0c <__assert_fail@plt+0xd60>
   11cfc:	ldr	r3, [pc, #12]	; 11d10 <__assert_fail@plt+0xd64>
   11d00:	bl	10e74 <__libc_start_main@plt>
   11d04:	bl	10f94 <abort@plt>
   11d08:	andeq	r7, r1, r8, lsr #3
   11d0c:			; <UNDEFINED> instruction: 0x00010fb8
   11d10:	andeq	r7, r1, r8, asr #2
   11d14:	ldr	r3, [pc, #20]	; 11d30 <__assert_fail@plt+0xd84>
   11d18:	ldr	r2, [pc, #20]	; 11d34 <__assert_fail@plt+0xd88>
   11d1c:	add	r3, pc, r3
   11d20:	ldr	r2, [r3, r2]
   11d24:	cmp	r2, #0
   11d28:	bxeq	lr
   11d2c:	b	10ea4 <__gmon_start__@plt>
   11d30:	ldrdeq	r7, [r1], -ip
   11d34:	andeq	r0, r0, r4, ror #1
   11d38:	ldr	r0, [pc, #24]	; 11d58 <__assert_fail@plt+0xdac>
   11d3c:	ldr	r3, [pc, #24]	; 11d5c <__assert_fail@plt+0xdb0>
   11d40:	cmp	r3, r0
   11d44:	bxeq	lr
   11d48:	ldr	r3, [pc, #16]	; 11d60 <__assert_fail@plt+0xdb4>
   11d4c:	cmp	r3, #0
   11d50:	bxeq	lr
   11d54:	bx	r3
   11d58:	andeq	r9, r2, r8, lsr r1
   11d5c:	andeq	r9, r2, r8, lsr r1
   11d60:	andeq	r0, r0, r0
   11d64:	ldr	r0, [pc, #36]	; 11d90 <__assert_fail@plt+0xde4>
   11d68:	ldr	r1, [pc, #36]	; 11d94 <__assert_fail@plt+0xde8>
   11d6c:	sub	r1, r1, r0
   11d70:	asr	r1, r1, #2
   11d74:	add	r1, r1, r1, lsr #31
   11d78:	asrs	r1, r1, #1
   11d7c:	bxeq	lr
   11d80:	ldr	r3, [pc, #16]	; 11d98 <__assert_fail@plt+0xdec>
   11d84:	cmp	r3, #0
   11d88:	bxeq	lr
   11d8c:	bx	r3
   11d90:	andeq	r9, r2, r8, lsr r1
   11d94:	andeq	r9, r2, r8, lsr r1
   11d98:	andeq	r0, r0, r0
   11d9c:	push	{r4, lr}
   11da0:	ldr	r4, [pc, #24]	; 11dc0 <__assert_fail@plt+0xe14>
   11da4:	ldrb	r3, [r4]
   11da8:	cmp	r3, #0
   11dac:	popne	{r4, pc}
   11db0:	bl	11d38 <__assert_fail@plt+0xd8c>
   11db4:	mov	r3, #1
   11db8:	strb	r3, [r4]
   11dbc:	pop	{r4, pc}
   11dc0:	andeq	r9, r2, r8, asr r1
   11dc4:	b	11d64 <__assert_fail@plt+0xdb8>
   11dc8:	push	{r4, r5, r6, lr}
   11dcc:	ldr	r5, [r0]
   11dd0:	ldrb	r2, [r5, r1]
   11dd4:	cmp	r2, #42	; 0x2a
   11dd8:	beq	11de4 <__assert_fail@plt+0xe38>
   11ddc:	mov	r0, #0
   11de0:	pop	{r4, r5, r6, pc}
   11de4:	ldr	r6, [r0, #4]
   11de8:	mov	r3, r0
   11dec:	ldrb	r0, [r6, r1]
   11df0:	cmp	r0, #0
   11df4:	bne	11ddc <__assert_fail@plt+0xe30>
   11df8:	ldr	r4, [r3, #8]
   11dfc:	add	r1, r1, #1
   11e00:	cmp	r1, r4
   11e04:	popcs	{r4, r5, r6, pc}
   11e08:	ldrb	r2, [r5, r1]
   11e0c:	add	r3, r5, r1
   11e10:	sub	ip, r2, #48	; 0x30
   11e14:	cmp	ip, #9
   11e18:	bhi	11e64 <__assert_fail@plt+0xeb8>
   11e1c:	ldrb	r2, [r6, r1]
   11e20:	add	ip, r6, r1
   11e24:	cmp	r2, #0
   11e28:	popne	{r4, r5, r6, pc}
   11e2c:	sub	r4, r4, #1
   11e30:	add	r4, r5, r4
   11e34:	rsb	r5, r5, #1
   11e38:	b	11e48 <__assert_fail@plt+0xe9c>
   11e3c:	ldrb	lr, [ip, #1]!
   11e40:	cmp	lr, #0
   11e44:	bne	11e64 <__assert_fail@plt+0xeb8>
   11e48:	cmp	r3, r4
   11e4c:	add	r1, r5, r3
   11e50:	beq	11ddc <__assert_fail@plt+0xe30>
   11e54:	ldrb	r2, [r3, #1]!
   11e58:	sub	lr, r2, #48	; 0x30
   11e5c:	cmp	lr, #9
   11e60:	bls	11e3c <__assert_fail@plt+0xe90>
   11e64:	cmp	r2, #93	; 0x5d
   11e68:	ldrbeq	r0, [r6, r1]
   11e6c:	eoreq	r0, r0, #1
   11e70:	pop	{r4, r5, r6, pc}
   11e74:	push	{r4, r5, lr}
   11e78:	mov	r5, r0
   11e7c:	sub	sp, sp, #12
   11e80:	mov	r0, #5
   11e84:	bl	15f88 <__assert_fail@plt+0x4fdc>
   11e88:	mov	r4, r0
   11e8c:	bl	10ebc <__ctype_b_loc@plt>
   11e90:	lsl	r3, r5, #1
   11e94:	ldr	r2, [r0]
   11e98:	ldrh	r3, [r2, r3]
   11e9c:	tst	r3, #16384	; 0x4000
   11ea0:	beq	11ebc <__assert_fail@plt+0xf10>
   11ea4:	mov	r3, #0
   11ea8:	mov	r0, r4
   11eac:	strb	r5, [r4]
   11eb0:	strb	r3, [r4, #1]
   11eb4:	add	sp, sp, #12
   11eb8:	pop	{r4, r5, pc}
   11ebc:	str	r5, [sp]
   11ec0:	ldr	r3, [pc, #24]	; 11ee0 <__assert_fail@plt+0xf34>
   11ec4:	mov	r2, #5
   11ec8:	mov	r1, #1
   11ecc:	mov	r0, r4
   11ed0:	bl	10ef8 <__sprintf_chk@plt>
   11ed4:	mov	r0, r4
   11ed8:	add	sp, sp, #12
   11edc:	pop	{r4, r5, pc}
   11ee0:	andeq	r7, r1, r8, asr #6
   11ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee8:	add	r3, r1, #1
   11eec:	ldr	sl, [pc, #344]	; 1204c <__assert_fail@plt+0x10a0>
   11ef0:	lsrs	r2, r3, #30
   11ef4:	sub	sp, sp, #36	; 0x24
   11ef8:	mov	r6, r1
   11efc:	ldr	r1, [sl]
   11f00:	movne	r2, #1
   11f04:	moveq	r2, #0
   11f08:	lsls	r3, r3, #2
   11f0c:	str	r1, [sp, #28]
   11f10:	bmi	12044 <__assert_fail@plt+0x1098>
   11f14:	cmp	r2, #0
   11f18:	bne	12044 <__assert_fail@plt+0x1098>
   11f1c:	mov	r4, r0
   11f20:	mov	r0, r3
   11f24:	bl	15f88 <__assert_fail@plt+0x4fdc>
   11f28:	cmp	r6, #0
   11f2c:	mov	fp, r0
   11f30:	beq	12000 <__assert_fail@plt+0x1054>
   11f34:	sub	r4, r4, #1
   11f38:	ldr	r9, [pc, #272]	; 12050 <__assert_fail@plt+0x10a4>
   11f3c:	ldr	r8, [pc, #272]	; 12054 <__assert_fail@plt+0x10a8>
   11f40:	ldr	r7, [pc, #272]	; 12058 <__assert_fail@plt+0x10ac>
   11f44:	add	r6, r4, r6
   11f48:	mov	r5, r0
   11f4c:	str	r0, [sp, #12]
   11f50:	b	11f90 <__assert_fail@plt+0xfe4>
   11f54:	cmp	fp, #12
   11f58:	beq	11ff4 <__assert_fail@plt+0x1048>
   11f5c:	movcc	r1, r9
   11f60:	bcc	11f7c <__assert_fail@plt+0xfd0>
   11f64:	cmp	fp, #13
   11f68:	moveq	r1, r8
   11f6c:	beq	11f7c <__assert_fail@plt+0xfd0>
   11f70:	cmp	fp, #92	; 0x5c
   11f74:	moveq	r1, r7
   11f78:	bne	11fb8 <__assert_fail@plt+0x100c>
   11f7c:	mov	r0, r5
   11f80:	bl	10dd8 <stpcpy@plt>
   11f84:	cmp	r4, r6
   11f88:	mov	r5, r0
   11f8c:	beq	11ffc <__assert_fail@plt+0x1050>
   11f90:	ldrb	fp, [r4, #1]!
   11f94:	cmp	fp, #10
   11f98:	beq	1201c <__assert_fail@plt+0x1070>
   11f9c:	bhi	11f54 <__assert_fail@plt+0xfa8>
   11fa0:	cmp	fp, #8
   11fa4:	beq	11fec <__assert_fail@plt+0x1040>
   11fa8:	bhi	11fe4 <__assert_fail@plt+0x1038>
   11fac:	cmp	fp, #7
   11fb0:	ldreq	r1, [pc, #164]	; 1205c <__assert_fail@plt+0x10b0>
   11fb4:	beq	11f7c <__assert_fail@plt+0xfd0>
   11fb8:	bl	10ebc <__ctype_b_loc@plt>
   11fbc:	lsl	r2, fp, #1
   11fc0:	ldr	r1, [r0]
   11fc4:	ldrh	r2, [r1, r2]
   11fc8:	tst	r2, #16384	; 0x4000
   11fcc:	beq	12024 <__assert_fail@plt+0x1078>
   11fd0:	mov	r2, #0
   11fd4:	strb	fp, [sp, #20]
   11fd8:	strb	r2, [sp, #21]
   11fdc:	add	r1, sp, #20
   11fe0:	b	11f7c <__assert_fail@plt+0xfd0>
   11fe4:	ldr	r1, [pc, #116]	; 12060 <__assert_fail@plt+0x10b4>
   11fe8:	b	11f7c <__assert_fail@plt+0xfd0>
   11fec:	ldr	r1, [pc, #112]	; 12064 <__assert_fail@plt+0x10b8>
   11ff0:	b	11f7c <__assert_fail@plt+0xfd0>
   11ff4:	ldr	r1, [pc, #108]	; 12068 <__assert_fail@plt+0x10bc>
   11ff8:	b	11f7c <__assert_fail@plt+0xfd0>
   11ffc:	ldr	fp, [sp, #12]
   12000:	ldr	r2, [sp, #28]
   12004:	ldr	r3, [sl]
   12008:	mov	r0, fp
   1200c:	cmp	r2, r3
   12010:	bne	12048 <__assert_fail@plt+0x109c>
   12014:	add	sp, sp, #36	; 0x24
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	ldr	r1, [pc, #72]	; 1206c <__assert_fail@plt+0x10c0>
   12020:	b	11f7c <__assert_fail@plt+0xfd0>
   12024:	mov	r1, #1
   12028:	str	fp, [sp]
   1202c:	add	r0, sp, #20
   12030:	ldr	r3, [pc, #56]	; 12070 <__assert_fail@plt+0x10c4>
   12034:	mov	r2, #5
   12038:	bl	10ef8 <__sprintf_chk@plt>
   1203c:	add	r1, sp, #20
   12040:	b	11f7c <__assert_fail@plt+0xfd0>
   12044:	bl	161d0 <__assert_fail@plt+0x5224>
   12048:	bl	10df0 <__stack_chk_fail@plt>
   1204c:	andeq	r8, r2, r8, lsl #30
   12050:	andeq	r7, r1, r8, ror #6
   12054:	andeq	r7, r1, r0, ror #6
   12058:	andeq	r7, r1, r0, asr r3
   1205c:	andeq	r7, r1, ip, ror #6
   12060:	andeq	r7, r1, r4, ror #6
   12064:	andeq	r7, r1, r4, asr r3
   12068:	andeq	r7, r1, r8, asr r3
   1206c:	andeq	r7, r1, ip, asr r3
   12070:	andeq	r7, r1, r8, asr #6
   12074:	push	{r4, lr}
   12078:	mov	r4, r1
   1207c:	cmp	r0, #11
   12080:	ldrls	pc, [pc, r0, lsl #2]
   12084:	b	121e0 <__assert_fail@plt+0x1234>
   12088:	ldrdeq	r2, [r1], -r8
   1208c:	strdeq	r2, [r1], -r0
   12090:	andeq	r2, r1, r8, lsl #2
   12094:	andeq	r2, r1, r0, lsr #2
   12098:	andeq	r2, r1, r8, lsr r1
   1209c:	andeq	r2, r1, r0, asr r1
   120a0:	andeq	r2, r1, r8, ror #2
   120a4:	andeq	r2, r1, r0, lsl #3
   120a8:	muleq	r1, r8, r1
   120ac:			; <UNDEFINED> instruction: 0x000121b0
   120b0:	andeq	r2, r1, r8, asr #3
   120b4:	strheq	r2, [r1], -r8
   120b8:	bl	10ebc <__ctype_b_loc@plt>
   120bc:	lsl	r4, r4, #1
   120c0:	ldr	r3, [r0]
   120c4:	ldrh	r0, [r3, r4]
   120c8:	and	r0, r0, #4096	; 0x1000
   120cc:	adds	r0, r0, #0
   120d0:	movne	r0, #1
   120d4:	pop	{r4, pc}
   120d8:	bl	10ebc <__ctype_b_loc@plt>
   120dc:	lsl	r4, r4, #1
   120e0:	ldr	r3, [r0]
   120e4:	ldrh	r0, [r3, r4]
   120e8:	and	r0, r0, #8
   120ec:	b	120cc <__assert_fail@plt+0x1120>
   120f0:	bl	10ebc <__ctype_b_loc@plt>
   120f4:	lsl	r4, r4, #1
   120f8:	ldr	r3, [r0]
   120fc:	ldrh	r0, [r3, r4]
   12100:	and	r0, r0, #1024	; 0x400
   12104:	b	120cc <__assert_fail@plt+0x1120>
   12108:	bl	10ebc <__ctype_b_loc@plt>
   1210c:	lsl	r4, r4, #1
   12110:	ldr	r3, [r0]
   12114:	ldrh	r0, [r3, r4]
   12118:	and	r0, r0, #1
   1211c:	b	120cc <__assert_fail@plt+0x1120>
   12120:	bl	10ebc <__ctype_b_loc@plt>
   12124:	lsl	r4, r4, #1
   12128:	ldr	r3, [r0]
   1212c:	ldrh	r0, [r3, r4]
   12130:	and	r0, r0, #2
   12134:	b	120cc <__assert_fail@plt+0x1120>
   12138:	bl	10ebc <__ctype_b_loc@plt>
   1213c:	lsl	r4, r4, #1
   12140:	ldr	r3, [r0]
   12144:	ldrh	r0, [r3, r4]
   12148:	and	r0, r0, #2048	; 0x800
   1214c:	b	120cc <__assert_fail@plt+0x1120>
   12150:	bl	10ebc <__ctype_b_loc@plt>
   12154:	lsl	r4, r4, #1
   12158:	ldr	r3, [r0]
   1215c:	ldrh	r0, [r3, r4]
   12160:	and	r0, r0, #32768	; 0x8000
   12164:	b	120cc <__assert_fail@plt+0x1120>
   12168:	bl	10ebc <__ctype_b_loc@plt>
   1216c:	lsl	r4, r4, #1
   12170:	ldr	r3, [r0]
   12174:	ldrh	r0, [r3, r4]
   12178:	and	r0, r0, #512	; 0x200
   1217c:	b	120cc <__assert_fail@plt+0x1120>
   12180:	bl	10ebc <__ctype_b_loc@plt>
   12184:	lsl	r4, r4, #1
   12188:	ldr	r3, [r0]
   1218c:	ldrh	r0, [r3, r4]
   12190:	and	r0, r0, #16384	; 0x4000
   12194:	b	120cc <__assert_fail@plt+0x1120>
   12198:	bl	10ebc <__ctype_b_loc@plt>
   1219c:	lsl	r4, r4, #1
   121a0:	ldr	r3, [r0]
   121a4:	ldrh	r0, [r3, r4]
   121a8:	and	r0, r0, #4
   121ac:	b	120cc <__assert_fail@plt+0x1120>
   121b0:	bl	10ebc <__ctype_b_loc@plt>
   121b4:	lsl	r4, r4, #1
   121b8:	ldr	r3, [r0]
   121bc:	ldrh	r0, [r3, r4]
   121c0:	and	r0, r0, #8192	; 0x2000
   121c4:	b	120cc <__assert_fail@plt+0x1120>
   121c8:	bl	10ebc <__ctype_b_loc@plt>
   121cc:	lsl	r4, r4, #1
   121d0:	ldr	r3, [r0]
   121d4:	ldrh	r0, [r3, r4]
   121d8:	and	r0, r0, #256	; 0x100
   121dc:	b	120cc <__assert_fail@plt+0x1120>
   121e0:	bl	10f94 <abort@plt>
   121e4:	ldr	r2, [r0]
   121e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121ec:	mov	r3, #0
   121f0:	ldr	r8, [r2, #4]
   121f4:	mov	r9, r0
   121f8:	cmp	r8, r3
   121fc:	str	r3, [r0, #24]
   12200:	strh	r3, [r0, #32]
   12204:	strb	r3, [r0, #34]	; 0x22
   12208:	mov	r6, #0
   1220c:	mov	r7, #0
   12210:	beq	12260 <__assert_fail@plt+0x12b4>
   12214:	ldr	r3, [r8]
   12218:	cmp	r3, #4
   1221c:	ldrls	pc, [pc, r3, lsl #2]
   12220:	b	12388 <__assert_fail@plt+0x13dc>
   12224:	andeq	r2, r1, r8, ror #6
   12228:	andeq	r2, r1, r8, asr #6
   1222c:	strdeq	r2, [r1], -r0
   12230:	andeq	r2, r1, r8, ror #4
   12234:	andeq	r2, r1, r8, lsr r2
   12238:	ldrd	r4, [r8, #16]
   1223c:	orrs	r3, r4, r5
   12240:	bne	122a0 <__assert_fail@plt+0x12f4>
   12244:	ldr	r3, [r9, #24]
   12248:	str	r8, [r9, #28]
   1224c:	add	r3, r3, #1
   12250:	str	r3, [r9, #24]
   12254:	ldr	r8, [r8, #4]
   12258:	cmp	r8, #0
   1225c:	bne	12214 <__assert_fail@plt+0x1268>
   12260:	strd	r6, [r9, #16]
   12264:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12268:	ldrb	r1, [r8, #8]
   1226c:	mov	r3, #0
   12270:	mov	r4, #0
   12274:	mov	r5, #0
   12278:	uxtb	r2, r3
   1227c:	cmp	r1, r2
   12280:	bne	1228c <__assert_fail@plt+0x12e0>
   12284:	adds	r4, r4, #1
   12288:	adc	r5, r5, #0
   1228c:	add	r3, r3, #1
   12290:	cmp	r3, #256	; 0x100
   12294:	bne	12278 <__assert_fail@plt+0x12cc>
   12298:	mov	r3, #1
   1229c:	strb	r3, [r9, #32]
   122a0:	adds	r2, r6, r4
   122a4:	adcs	r3, r7, r5
   122a8:	mov	r7, r3
   122ac:	and	r3, r2, r3
   122b0:	mov	r6, r2
   122b4:	movcs	r2, #1
   122b8:	movcc	r2, #0
   122bc:	cmn	r3, #1
   122c0:	movne	r3, #0
   122c4:	moveq	r3, #1
   122c8:	orrs	r3, r2, r3
   122cc:	beq	12254 <__assert_fail@plt+0x12a8>
   122d0:	mov	r2, #5
   122d4:	ldr	r1, [pc, #176]	; 1238c <__assert_fail@plt+0x13e0>
   122d8:	mov	r0, #0
   122dc:	bl	10de4 <dcgettext@plt>
   122e0:	mov	r1, #0
   122e4:	mov	r2, r0
   122e8:	mov	r0, #1
   122ec:	bl	10e5c <error@plt>
   122f0:	mov	sl, #0
   122f4:	mov	r4, #0
   122f8:	mov	r5, #0
   122fc:	mov	r3, #1
   12300:	ldr	fp, [r8, #8]
   12304:	strb	r3, [r9, #33]	; 0x21
   12308:	uxtb	r1, sl
   1230c:	mov	r0, fp
   12310:	bl	12074 <__assert_fail@plt+0x10c8>
   12314:	cmp	r0, #0
   12318:	beq	12324 <__assert_fail@plt+0x1378>
   1231c:	adds	r4, r4, #1
   12320:	adc	r5, r5, #0
   12324:	add	sl, sl, #1
   12328:	cmp	sl, #256	; 0x100
   1232c:	bne	12308 <__assert_fail@plt+0x135c>
   12330:	cmp	fp, #6
   12334:	beq	122a0 <__assert_fail@plt+0x12f4>
   12338:	cmp	fp, #10
   1233c:	movne	r3, #1
   12340:	strbne	r3, [r9, #34]	; 0x22
   12344:	b	122a0 <__assert_fail@plt+0x12f4>
   12348:	ldrb	r3, [r8, #9]
   1234c:	ldrb	r4, [r8, #8]
   12350:	cmp	r3, r4
   12354:	bcc	12374 <__assert_fail@plt+0x13c8>
   12358:	sub	r4, r3, r4
   1235c:	add	r4, r4, #1
   12360:	asr	r5, r4, #31
   12364:	b	122a0 <__assert_fail@plt+0x12f4>
   12368:	mov	r4, #1
   1236c:	mov	r5, #0
   12370:	b	122a0 <__assert_fail@plt+0x12f4>
   12374:	ldr	r3, [pc, #20]	; 12390 <__assert_fail@plt+0x13e4>
   12378:	ldr	r2, [pc, #20]	; 12394 <__assert_fail@plt+0x13e8>
   1237c:	ldr	r1, [pc, #20]	; 12398 <__assert_fail@plt+0x13ec>
   12380:	ldr	r0, [pc, #20]	; 1239c <__assert_fail@plt+0x13f0>
   12384:	bl	10fac <__assert_fail@plt>
   12388:	bl	10f94 <abort@plt>
   1238c:	andeq	r7, r1, ip, lsr #7
   12390:	ldrdeq	r7, [r1], -r0
   12394:	andeq	r0, r0, lr, ror #9
   12398:	andeq	r7, r1, r0, ror r3
   1239c:	andeq	r7, r1, ip, ror r3
   123a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123a4:	mov	ip, r1
   123a8:	mov	r4, r0
   123ac:	ldrd	r8, [r0, #8]
   123b0:	sub	sp, sp, #12
   123b4:	mov	lr, #2
   123b8:	mvn	r0, #1
   123bc:	mvn	r1, #0
   123c0:	mvn	r6, #0
   123c4:	mvn	r7, #0
   123c8:	cmp	ip, #0
   123cc:	strne	lr, [ip]
   123d0:	cmp	r9, r1
   123d4:	cmpeq	r8, r0
   123d8:	ldreq	r5, [r4]
   123dc:	ldrne	r5, [r4, #4]
   123e0:	ldreq	r5, [r5, #4]
   123e4:	strdeq	r6, [r4, #8]
   123e8:	streq	r5, [r4, #4]
   123ec:	cmp	r5, #0
   123f0:	beq	12598 <__assert_fail@plt+0x15ec>
   123f4:	ldr	r8, [r5]
   123f8:	cmp	r8, #4
   123fc:	ldrls	pc, [pc, r8, lsl #2]
   12400:	b	1261c <__assert_fail@plt+0x1670>
   12404:	andeq	r2, r1, r8, lsl r4
   12408:	andeq	r2, r1, ip, asr #9
   1240c:	andeq	r2, r1, ip, lsr r4
   12410:	andeq	r2, r1, r8, lsl r4
   12414:	andeq	r2, r1, r8, lsr #10
   12418:	ldr	r3, [r5, #4]
   1241c:	mvn	r0, #0
   12420:	mvn	r1, #0
   12424:	ldrb	r8, [r5, #8]
   12428:	strd	r0, [r4, #8]
   1242c:	str	r3, [r4, #4]
   12430:	mov	r0, r8
   12434:	add	sp, sp, #12
   12438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1243c:	cmp	ip, #0
   12440:	ldr	r7, [r5, #8]
   12444:	beq	1245c <__assert_fail@plt+0x14b0>
   12448:	cmp	r7, #6
   1244c:	beq	1258c <__assert_fail@plt+0x15e0>
   12450:	cmp	r7, #10
   12454:	moveq	r3, #1
   12458:	streq	r3, [ip]
   1245c:	ldrd	r8, [r4, #8]
   12460:	mvn	r3, #0
   12464:	mvn	r2, #0
   12468:	cmp	r9, r3
   1246c:	cmpeq	r8, r2
   12470:	beq	1254c <__assert_fail@plt+0x15a0>
   12474:	uxtb	r1, r8
   12478:	mov	r0, r7
   1247c:	bl	12074 <__assert_fail@plt+0x10c8>
   12480:	cmp	r0, #0
   12484:	beq	125f4 <__assert_fail@plt+0x1648>
   12488:	add	r6, r8, #1
   1248c:	cmp	r6, #255	; 0xff
   12490:	ble	124a4 <__assert_fail@plt+0x14f8>
   12494:	b	12508 <__assert_fail@plt+0x155c>
   12498:	add	r6, r6, #1
   1249c:	cmp	r6, #256	; 0x100
   124a0:	beq	12508 <__assert_fail@plt+0x155c>
   124a4:	uxtb	r1, r6
   124a8:	mov	r0, r7
   124ac:	bl	12074 <__assert_fail@plt+0x10c8>
   124b0:	cmp	r0, #0
   124b4:	beq	12498 <__assert_fail@plt+0x14ec>
   124b8:	asr	r7, r6, #31
   124bc:	mov	r0, r8
   124c0:	strd	r6, [r4, #8]
   124c4:	add	sp, sp, #12
   124c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124cc:	ldrd	r0, [r4, #8]
   124d0:	mvn	r7, #0
   124d4:	mvn	r6, #0
   124d8:	cmp	r1, r7
   124dc:	cmpeq	r0, r6
   124e0:	beq	12580 <__assert_fail@plt+0x15d4>
   124e4:	adds	r2, r0, #1
   124e8:	adc	r3, r1, #0
   124ec:	ldrb	r0, [r5, #9]
   124f0:	mov	r1, #0
   124f4:	cmp	r1, r3
   124f8:	cmpeq	r0, r2
   124fc:	strd	r2, [r4, #8]
   12500:	mov	r8, r2
   12504:	bne	12430 <__assert_fail@plt+0x1484>
   12508:	ldr	r1, [r5, #4]
   1250c:	mvn	r2, #0
   12510:	mvn	r3, #0
   12514:	mov	r0, r8
   12518:	str	r1, [r4, #4]
   1251c:	strd	r2, [r4, #8]
   12520:	add	sp, sp, #12
   12524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12528:	ldrd	r8, [r5, #16]
   1252c:	orrs	sl, r8, r9
   12530:	bne	125a0 <__assert_fail@plt+0x15f4>
   12534:	ldr	r5, [r5, #4]
   12538:	mvn	r8, #0
   1253c:	strd	r6, [r4, #8]
   12540:	str	r5, [r4, #4]
   12544:	mvn	r9, #0
   12548:	b	123c8 <__assert_fail@plt+0x141c>
   1254c:	mov	r8, #0
   12550:	b	12560 <__assert_fail@plt+0x15b4>
   12554:	add	r8, r8, #1
   12558:	cmp	r8, #256	; 0x100
   1255c:	beq	12608 <__assert_fail@plt+0x165c>
   12560:	uxtb	r1, r8
   12564:	mov	r0, r7
   12568:	bl	12074 <__assert_fail@plt+0x10c8>
   1256c:	cmp	r0, #0
   12570:	beq	12554 <__assert_fail@plt+0x15a8>
   12574:	asr	r9, r8, #31
   12578:	strd	r8, [r4, #8]
   1257c:	b	12474 <__assert_fail@plt+0x14c8>
   12580:	ldrb	r2, [r5, #8]
   12584:	mov	r3, #0
   12588:	b	124ec <__assert_fail@plt+0x1540>
   1258c:	mov	r3, #0
   12590:	str	r3, [ip]
   12594:	b	1245c <__assert_fail@plt+0x14b0>
   12598:	mvn	r8, #0
   1259c:	b	12430 <__assert_fail@plt+0x1484>
   125a0:	ldrd	r2, [r4, #8]
   125a4:	mvn	r1, #0
   125a8:	mvn	r0, #0
   125ac:	cmp	r3, r1
   125b0:	cmpeq	r2, r0
   125b4:	beq	125e4 <__assert_fail@plt+0x1638>
   125b8:	adds	r1, r2, #1
   125bc:	adc	r3, r3, #0
   125c0:	str	r1, [sp]
   125c4:	str	r3, [sp, #4]
   125c8:	ldrd	r2, [sp]
   125cc:	cmp	r9, r3
   125d0:	cmpeq	r8, r2
   125d4:	strd	r2, [r4, #8]
   125d8:	ldrb	r8, [r5, #8]
   125dc:	bne	12430 <__assert_fail@plt+0x1484>
   125e0:	b	12508 <__assert_fail@plt+0x155c>
   125e4:	mov	r2, #1
   125e8:	mov	r3, #0
   125ec:	strd	r2, [sp]
   125f0:	b	125c8 <__assert_fail@plt+0x161c>
   125f4:	ldr	r3, [pc, #36]	; 12620 <__assert_fail@plt+0x1674>
   125f8:	ldr	r2, [pc, #36]	; 12624 <__assert_fail@plt+0x1678>
   125fc:	ldr	r1, [pc, #36]	; 12628 <__assert_fail@plt+0x167c>
   12600:	ldr	r0, [pc, #36]	; 1262c <__assert_fail@plt+0x1680>
   12604:	bl	10fac <__assert_fail@plt>
   12608:	ldr	r3, [pc, #16]	; 12620 <__assert_fail@plt+0x1674>
   1260c:	ldr	r2, [pc, #28]	; 12630 <__assert_fail@plt+0x1684>
   12610:	ldr	r1, [pc, #16]	; 12628 <__assert_fail@plt+0x167c>
   12614:	ldr	r0, [pc, #24]	; 12634 <__assert_fail@plt+0x1688>
   12618:	bl	10fac <__assert_fail@plt>
   1261c:	bl	10f94 <abort@plt>
   12620:	andeq	r7, r1, r0, ror #3
   12624:	andeq	r0, r0, r7, lsr r4
   12628:	andeq	r7, r1, r0, ror r3
   1262c:	andeq	r7, r1, r8, asr #7
   12630:	andeq	r0, r0, r4, lsr r4
   12634:	strdeq	r7, [r1], -ip
   12638:	push	{r4, lr}
   1263c:	bl	10eec <__errno_location@plt>
   12640:	mov	r2, #5
   12644:	ldr	r1, [pc, #24]	; 12664 <__assert_fail@plt+0x16b8>
   12648:	ldr	r4, [r0]
   1264c:	mov	r0, #0
   12650:	bl	10de4 <dcgettext@plt>
   12654:	mov	r1, r4
   12658:	mov	r2, r0
   1265c:	mov	r0, #1
   12660:	bl	10e5c <error@plt>
   12664:	andeq	r7, r1, r8, lsl #8
   12668:	push	{r4, lr}
   1266c:	mov	r2, r1
   12670:	mov	r1, r0
   12674:	mov	r0, #0
   12678:	bl	159c8 <__assert_fail@plt+0x4a1c>
   1267c:	cmn	r0, #1
   12680:	popne	{r4, pc}
   12684:	bl	12638 <__assert_fail@plt+0x168c>
   12688:	push	{r4, r5, r6, lr}
   1268c:	mov	r4, r0
   12690:	ldr	r6, [pc, #212]	; 1276c <__assert_fail@plt+0x17c0>
   12694:	mov	r5, r1
   12698:	mov	r2, r5
   1269c:	mov	r1, r4
   126a0:	mov	r0, #0
   126a4:	bl	159c8 <__assert_fail@plt+0x4a1c>
   126a8:	cmn	r0, #1
   126ac:	beq	12768 <__assert_fail@plt+0x17bc>
   126b0:	cmp	r0, #0
   126b4:	popeq	{r4, r5, r6, pc}
   126b8:	ldrb	r3, [r4]
   126bc:	ldrb	r3, [r6, r3]
   126c0:	cmp	r3, #0
   126c4:	beq	1271c <__assert_fail@plt+0x1770>
   126c8:	cmp	r0, #1
   126cc:	movne	lr, #0
   126d0:	movne	r3, #1
   126d4:	beq	12698 <__assert_fail@plt+0x16ec>
   126d8:	sub	r3, r3, #1
   126dc:	add	r3, r4, r3
   126e0:	ldrb	r2, [r3, #1]
   126e4:	add	r1, r3, #1
   126e8:	add	r3, r3, #2
   126ec:	sub	r3, r3, r4
   126f0:	ldrb	ip, [r6, r2]
   126f4:	cmp	ip, #0
   126f8:	strbeq	r2, [r4, lr]
   126fc:	addeq	lr, lr, #1
   12700:	cmp	r0, r3
   12704:	mov	r3, r1
   12708:	bhi	126e0 <__assert_fail@plt+0x1734>
   1270c:	cmp	lr, #0
   12710:	beq	12698 <__assert_fail@plt+0x16ec>
   12714:	mov	r0, lr
   12718:	pop	{r4, r5, r6, pc}
   1271c:	add	lr, r3, #1
   12720:	cmp	lr, r0
   12724:	mov	r2, r4
   12728:	beq	12760 <__assert_fail@plt+0x17b4>
   1272c:	ldrb	r1, [r2, #1]!
   12730:	ldrb	r1, [r6, r1]
   12734:	cmp	r1, #0
   12738:	beq	12750 <__assert_fail@plt+0x17a4>
   1273c:	add	r3, r3, #2
   12740:	cmp	r0, r3
   12744:	bhi	126d8 <__assert_fail@plt+0x172c>
   12748:	mov	r0, lr
   1274c:	pop	{r4, r5, r6, pc}
   12750:	mov	r3, lr
   12754:	add	lr, r3, #1
   12758:	cmp	lr, r0
   1275c:	bne	1272c <__assert_fail@plt+0x1780>
   12760:	mov	lr, r0
   12764:	b	1273c <__assert_fail@plt+0x1790>
   12768:	bl	12638 <__assert_fail@plt+0x168c>
   1276c:	andeq	r9, r2, ip, asr r1
   12770:	push	{r4, lr}
   12774:	mov	r4, r0
   12778:	mov	r2, r1
   1277c:	mov	r0, #0
   12780:	mov	r1, r4
   12784:	bl	159c8 <__assert_fail@plt+0x4a1c>
   12788:	cmn	r0, #1
   1278c:	beq	127c0 <__assert_fail@plt+0x1814>
   12790:	cmp	r0, #0
   12794:	popeq	{r4, pc}
   12798:	sub	r1, r4, #1
   1279c:	ldr	ip, [pc, #32]	; 127c4 <__assert_fail@plt+0x1818>
   127a0:	add	r2, r1, r0
   127a4:	ldrb	r3, [r1, #1]!
   127a8:	add	r3, ip, r3
   127ac:	cmp	r1, r2
   127b0:	ldrb	r3, [r3, #256]	; 0x100
   127b4:	strb	r3, [r1]
   127b8:	bne	127a4 <__assert_fail@plt+0x17f8>
   127bc:	pop	{r4, pc}
   127c0:	bl	12638 <__assert_fail@plt+0x168c>
   127c4:	andeq	r9, r2, ip, asr r1
   127c8:	push	{r4, lr}
   127cc:	ldr	r3, [pc, #12]	; 127e0 <__assert_fail@plt+0x1834>
   127d0:	ldr	r2, [pc, #12]	; 127e4 <__assert_fail@plt+0x1838>
   127d4:	ldr	r1, [pc, #12]	; 127e8 <__assert_fail@plt+0x183c>
   127d8:	ldr	r0, [pc, #12]	; 127ec <__assert_fail@plt+0x1840>
   127dc:	bl	10fac <__assert_fail@plt>
   127e0:	andeq	r7, r1, ip, ror #3
   127e4:	andeq	r0, r0, pc, asr #5
   127e8:	andeq	r7, r1, r0, ror r3
   127ec:	andeq	r7, r1, r4, lsl r4
   127f0:	push	{r4, r5, r6, lr}
   127f4:	mov	r4, r0
   127f8:	mov	r0, #24
   127fc:	mov	r5, r1
   12800:	bl	15f88 <__assert_fail@plt+0x4fdc>
   12804:	ldr	r2, [r4]
   12808:	mov	r3, #0
   1280c:	cmp	r2, r3
   12810:	strb	r5, [r0, #8]
   12814:	str	r3, [r0, #4]
   12818:	str	r3, [r0]
   1281c:	beq	1282c <__assert_fail@plt+0x1880>
   12820:	str	r0, [r2, #4]
   12824:	str	r0, [r4]
   12828:	pop	{r4, r5, r6, pc}
   1282c:	ldr	r3, [pc, #12]	; 12840 <__assert_fail@plt+0x1894>
   12830:	ldr	r2, [pc, #12]	; 12844 <__assert_fail@plt+0x1898>
   12834:	ldr	r1, [pc, #12]	; 12848 <__assert_fail@plt+0x189c>
   12838:	ldr	r0, [pc, #12]	; 1284c <__assert_fail@plt+0x18a0>
   1283c:	bl	10fac <__assert_fail@plt>
   12840:	andeq	r7, r1, r4, lsl #4
   12844:	andeq	r0, r0, r7, lsl #5
   12848:	andeq	r7, r1, r0, ror r3
   1284c:	andeq	r7, r1, r4, lsl r4
   12850:	ldr	r3, [pc, #2016]	; 13038 <__assert_fail@plt+0x208c>
   12854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12858:	sub	sp, sp, #108	; 0x6c
   1285c:	ldr	r3, [r3]
   12860:	str	r1, [sp, #40]	; 0x28
   12864:	str	r3, [sp, #100]	; 0x64
   12868:	mov	r7, r0
   1286c:	bl	10ed4 <strlen@plt>
   12870:	mov	r4, r0
   12874:	bl	15f88 <__assert_fail@plt+0x4fdc>
   12878:	mov	r1, #1
   1287c:	mov	r8, r0
   12880:	mov	r0, r4
   12884:	str	r8, [sp, #88]	; 0x58
   12888:	bl	16160 <__assert_fail@plt+0x51b4>
   1288c:	ldrb	sl, [r7]
   12890:	cmp	sl, #0
   12894:	mov	fp, r0
   12898:	str	r0, [sp, #92]	; 0x5c
   1289c:	beq	12f5c <__assert_fail@plt+0x1fb0>
   128a0:	mov	r6, #0
   128a4:	mov	r5, r6
   128a8:	b	128b8 <__assert_fail@plt+0x190c>
   128ac:	cmp	sl, #0
   128b0:	ldr	r6, [sp, #24]
   128b4:	beq	12930 <__assert_fail@plt+0x1984>
   128b8:	add	r9, r5, #1
   128bc:	cmp	sl, #92	; 0x5c
   128c0:	ldrb	r4, [r7, r9]
   128c4:	add	r3, r6, #1
   128c8:	strbne	sl, [r8, r6]
   128cc:	str	r3, [sp, #24]
   128d0:	movne	r5, r9
   128d4:	movne	sl, r4
   128d8:	bne	128ac <__assert_fail@plt+0x1900>
   128dc:	mov	r3, #1
   128e0:	cmp	r4, #98	; 0x62
   128e4:	strb	r3, [fp, r6]
   128e8:	beq	12f10 <__assert_fail@plt+0x1f64>
   128ec:	bls	12b0c <__assert_fail@plt+0x1b60>
   128f0:	cmp	r4, #114	; 0x72
   128f4:	add	r2, r5, #2
   128f8:	moveq	r4, #13
   128fc:	beq	12918 <__assert_fail@plt+0x196c>
   12900:	bhi	12b54 <__assert_fail@plt+0x1ba8>
   12904:	cmp	r4, #102	; 0x66
   12908:	moveq	r4, #12
   1290c:	beq	12918 <__assert_fail@plt+0x196c>
   12910:	cmp	r4, #110	; 0x6e
   12914:	moveq	r4, #10
   12918:	strb	r4, [r8, r6]
   1291c:	ldrb	sl, [r7, r2]
   12920:	mov	r5, r2
   12924:	ldr	r6, [sp, #24]
   12928:	cmp	sl, #0
   1292c:	bne	128b8 <__assert_fail@plt+0x190c>
   12930:	ldr	r3, [sp, #24]
   12934:	str	r8, [sp, #36]	; 0x24
   12938:	str	r3, [sp, #96]	; 0x60
   1293c:	ldr	r3, [sp, #40]	; 0x28
   12940:	mov	sl, #0
   12944:	add	r3, r3, #4
   12948:	str	r3, [sp, #56]	; 0x38
   1294c:	str	r8, [sp, #44]	; 0x2c
   12950:	b	12978 <__assert_fail@plt+0x19cc>
   12954:	ldr	r3, [sp, #48]	; 0x30
   12958:	cmp	r3, #45	; 0x2d
   1295c:	ldr	r3, [sp, #44]	; 0x2c
   12960:	ldrb	r6, [r3, sl]
   12964:	beq	12c8c <__assert_fail@plt+0x1ce0>
   12968:	mov	r1, r6
   1296c:	ldr	r0, [sp, #56]	; 0x38
   12970:	bl	127f0 <__assert_fail@plt+0x1844>
   12974:	mov	sl, r9
   12978:	ldr	r3, [sp, #24]
   1297c:	add	r4, sl, #2
   12980:	cmp	r4, r3
   12984:	bcs	12f1c <__assert_fail@plt+0x1f70>
   12988:	ldr	r2, [sp, #36]	; 0x24
   1298c:	add	r9, sl, #1
   12990:	ldrb	r3, [r2, sl]
   12994:	cmp	r3, #91	; 0x5b
   12998:	ldrb	r3, [r2, r9]
   1299c:	str	r3, [sp, #48]	; 0x30
   129a0:	bne	12954 <__assert_fail@plt+0x19a8>
   129a4:	ldrb	r8, [fp, sl]
   129a8:	cmp	r8, #0
   129ac:	bne	12954 <__assert_fail@plt+0x19a8>
   129b0:	ldr	r3, [sp, #48]	; 0x30
   129b4:	cmp	r3, #58	; 0x3a
   129b8:	beq	12b8c <__assert_fail@plt+0x1be0>
   129bc:	ldr	r3, [sp, #48]	; 0x30
   129c0:	cmp	r3, #61	; 0x3d
   129c4:	beq	12b8c <__assert_fail@plt+0x1be0>
   129c8:	ldr	r3, [sp, #36]	; 0x24
   129cc:	ldrb	r3, [r3, r4]
   129d0:	cmp	r3, #42	; 0x2a
   129d4:	bne	12954 <__assert_fail@plt+0x19a8>
   129d8:	ldrb	r3, [fp, r4]
   129dc:	cmp	r3, #0
   129e0:	bne	12954 <__assert_fail@plt+0x19a8>
   129e4:	ldr	r2, [sp, #24]
   129e8:	add	r3, sl, #3
   129ec:	cmp	r3, r2
   129f0:	bcs	12954 <__assert_fail@plt+0x19a8>
   129f4:	ldrb	r1, [fp, r3]
   129f8:	add	r2, fp, r3
   129fc:	cmp	r1, #0
   12a00:	bne	12954 <__assert_fail@plt+0x19a8>
   12a04:	ldr	r1, [sp, #36]	; 0x24
   12a08:	add	r7, r1, r3
   12a0c:	ldrb	r0, [r1, r3]
   12a10:	cmp	r0, #93	; 0x5d
   12a14:	movne	r1, r7
   12a18:	bne	12a24 <__assert_fail@plt+0x1a78>
   12a1c:	b	12e14 <__assert_fail@plt+0x1e68>
   12a20:	mov	r3, r5
   12a24:	ldr	ip, [sp, #24]
   12a28:	add	r5, r3, #1
   12a2c:	cmp	r5, ip
   12a30:	bcs	12954 <__assert_fail@plt+0x19a8>
   12a34:	ldrb	ip, [r2, #1]!
   12a38:	cmp	ip, #0
   12a3c:	bne	12954 <__assert_fail@plt+0x19a8>
   12a40:	ldrb	lr, [r1, #1]!
   12a44:	cmp	lr, #93	; 0x5d
   12a48:	bne	12a20 <__assert_fail@plt+0x1a74>
   12a4c:	mvn	sl, r9
   12a50:	adds	sl, sl, r3
   12a54:	beq	12e10 <__assert_fail@plt+0x1e64>
   12a58:	cmp	r0, #48	; 0x30
   12a5c:	moveq	r2, #8
   12a60:	movne	r2, #10
   12a64:	str	ip, [sp]
   12a68:	add	r3, sp, #80	; 0x50
   12a6c:	add	r1, sp, #76	; 0x4c
   12a70:	mov	r0, r7
   12a74:	bl	16210 <__assert_fail@plt+0x5264>
   12a78:	cmp	r0, #0
   12a7c:	bne	12fb8 <__assert_fail@plt+0x200c>
   12a80:	ldrd	r2, [sp, #80]	; 0x50
   12a84:	mvn	r1, #0
   12a88:	mvn	r0, #0
   12a8c:	cmp	r3, r1
   12a90:	cmpeq	r2, r0
   12a94:	strd	r2, [sp, #24]
   12a98:	beq	12fb8 <__assert_fail@plt+0x200c>
   12a9c:	ldr	r2, [sp, #76]	; 0x4c
   12aa0:	add	r3, r7, sl
   12aa4:	cmp	r2, r3
   12aa8:	bne	12fb8 <__assert_fail@plt+0x200c>
   12aac:	mov	r0, #24
   12ab0:	bl	15f88 <__assert_fail@plt+0x4fdc>
   12ab4:	ldr	r3, [sp, #40]	; 0x28
   12ab8:	ldr	r2, [sp, #48]	; 0x30
   12abc:	ldrd	r6, [sp, #24]
   12ac0:	ldr	r3, [r3, #4]
   12ac4:	mov	r1, #0
   12ac8:	cmp	r3, #0
   12acc:	strb	r2, [r0, #8]
   12ad0:	mov	r2, #4
   12ad4:	strd	r6, [r0, #16]
   12ad8:	str	r1, [r0, #4]
   12adc:	str	r2, [r0]
   12ae0:	beq	13020 <__assert_fail@plt+0x2074>
   12ae4:	str	r0, [r3, #4]
   12ae8:	ldr	r3, [sp, #40]	; 0x28
   12aec:	add	r9, r5, #1
   12af0:	str	r0, [r3, #4]
   12af4:	ldr	r3, [sp, #88]	; 0x58
   12af8:	ldr	fp, [sp, #92]	; 0x5c
   12afc:	str	r3, [sp, #36]	; 0x24
   12b00:	ldr	r3, [sp, #96]	; 0x60
   12b04:	str	r3, [sp, #24]
   12b08:	b	12974 <__assert_fail@plt+0x19c8>
   12b0c:	cmp	r4, #55	; 0x37
   12b10:	bhi	12b74 <__assert_fail@plt+0x1bc8>
   12b14:	cmp	r4, #48	; 0x30
   12b18:	bcs	12eb8 <__assert_fail@plt+0x1f0c>
   12b1c:	cmp	r4, #0
   12b20:	bne	12b6c <__assert_fail@plt+0x1bc0>
   12b24:	mov	r2, #5
   12b28:	ldr	r1, [pc, #1292]	; 1303c <__assert_fail@plt+0x2090>
   12b2c:	mov	r0, r4
   12b30:	bl	10de4 <dcgettext@plt>
   12b34:	mov	r1, r4
   12b38:	mov	r2, r0
   12b3c:	mov	r0, r4
   12b40:	bl	10e5c <error@plt>
   12b44:	strb	r4, [fp, r6]
   12b48:	add	r2, r5, #1
   12b4c:	mov	r4, sl
   12b50:	b	12918 <__assert_fail@plt+0x196c>
   12b54:	cmp	r4, #116	; 0x74
   12b58:	moveq	r4, #9
   12b5c:	beq	12918 <__assert_fail@plt+0x196c>
   12b60:	cmp	r4, #118	; 0x76
   12b64:	moveq	r4, #11
   12b68:	b	12918 <__assert_fail@plt+0x196c>
   12b6c:	add	r2, r5, #2
   12b70:	b	12918 <__assert_fail@plt+0x196c>
   12b74:	cmp	r4, #92	; 0x5c
   12b78:	beq	12b6c <__assert_fail@plt+0x1bc0>
   12b7c:	cmp	r4, #97	; 0x61
   12b80:	add	r2, r5, #2
   12b84:	moveq	r4, #7
   12b88:	b	12918 <__assert_fail@plt+0x196c>
   12b8c:	ldrb	r3, [fp, r9]
   12b90:	cmp	r3, #0
   12b94:	bne	129c8 <__assert_fail@plt+0x1a1c>
   12b98:	ldr	r3, [sp, #24]
   12b9c:	sub	r0, r3, #1
   12ba0:	ldr	r3, [sp, #44]	; 0x2c
   12ba4:	cmp	r4, r0
   12ba8:	ldrb	r1, [r3, r9]
   12bac:	bcs	129c8 <__assert_fail@plt+0x1a1c>
   12bb0:	ldr	r3, [sp, #36]	; 0x24
   12bb4:	mov	r7, r4
   12bb8:	add	r2, r3, r4
   12bbc:	add	r3, fp, r4
   12bc0:	b	12bd4 <__assert_fail@plt+0x1c28>
   12bc4:	cmp	ip, r0
   12bc8:	mov	r7, ip
   12bcc:	add	r3, r3, #1
   12bd0:	bcs	129c8 <__assert_fail@plt+0x1a1c>
   12bd4:	ldrb	lr, [r2], #1
   12bd8:	add	ip, r7, #1
   12bdc:	cmp	r1, lr
   12be0:	bne	12bc4 <__assert_fail@plt+0x1c18>
   12be4:	ldrb	lr, [r2]
   12be8:	cmp	lr, #93	; 0x5d
   12bec:	bne	12bc4 <__assert_fail@plt+0x1c18>
   12bf0:	ldrb	lr, [r3]
   12bf4:	cmp	lr, #0
   12bf8:	bne	12bc4 <__assert_fail@plt+0x1c18>
   12bfc:	ldrb	r5, [r3, #1]
   12c00:	cmp	r5, #0
   12c04:	bne	12bc4 <__assert_fail@plt+0x1c18>
   12c08:	ldr	r3, [sp, #44]	; 0x2c
   12c0c:	sub	r6, r7, sl
   12c10:	add	r3, r3, r4
   12c14:	subs	r6, r6, #2
   12c18:	str	r3, [sp, #52]	; 0x34
   12c1c:	beq	12fd8 <__assert_fail@plt+0x202c>
   12c20:	cmp	r1, #58	; 0x3a
   12c24:	beq	12d6c <__assert_fail@plt+0x1dc0>
   12c28:	cmp	r6, #1
   12c2c:	beq	12e74 <__assert_fail@plt+0x1ec8>
   12c30:	mov	r1, r4
   12c34:	add	r0, sp, #88	; 0x58
   12c38:	bl	11dc8 <__assert_fail@plt+0xe1c>
   12c3c:	cmp	r0, #0
   12c40:	bne	129c8 <__assert_fail@plt+0x1a1c>
   12c44:	mov	r7, r0
   12c48:	mov	r1, r6
   12c4c:	ldr	r0, [sp, #52]	; 0x34
   12c50:	bl	11ee4 <__assert_fail@plt+0xf38>
   12c54:	mov	r2, #5
   12c58:	ldr	r1, [pc, #992]	; 13040 <__assert_fail@plt+0x2094>
   12c5c:	mov	r9, r8
   12c60:	mov	r4, r0
   12c64:	mov	r0, r7
   12c68:	bl	10de4 <dcgettext@plt>
   12c6c:	mov	r3, r4
   12c70:	mov	r2, r0
   12c74:	mov	r1, #0
   12c78:	mov	r0, r1
   12c7c:	bl	10e5c <error@plt>
   12c80:	mov	r0, r4
   12c84:	bl	10d84 <free@plt>
   12c88:	b	12d3c <__assert_fail@plt+0x1d90>
   12c8c:	ldrb	r8, [fp, r9]
   12c90:	cmp	r8, #0
   12c94:	bne	12968 <__assert_fail@plt+0x19bc>
   12c98:	ldr	r3, [sp, #44]	; 0x2c
   12c9c:	ldrb	r4, [r3, r4]
   12ca0:	cmp	r4, r6
   12ca4:	bcc	12ce8 <__assert_fail@plt+0x1d3c>
   12ca8:	mov	r0, #24
   12cac:	bl	15f88 <__assert_fail@plt+0x4fdc>
   12cb0:	ldr	r3, [sp, #40]	; 0x28
   12cb4:	mov	r2, #1
   12cb8:	ldr	r3, [r3, #4]
   12cbc:	cmp	r3, #0
   12cc0:	str	r8, [r0, #4]
   12cc4:	strb	r6, [r0, #8]
   12cc8:	strb	r4, [r0, #9]
   12ccc:	str	r2, [r0]
   12cd0:	beq	13008 <__assert_fail@plt+0x205c>
   12cd4:	str	r0, [r3, #4]
   12cd8:	ldr	r3, [sp, #40]	; 0x28
   12cdc:	add	r9, sl, #3
   12ce0:	str	r0, [r3, #4]
   12ce4:	b	12974 <__assert_fail@plt+0x19c8>
   12ce8:	mov	r0, r6
   12cec:	bl	11e74 <__assert_fail@plt+0xec8>
   12cf0:	mov	r9, r8
   12cf4:	mov	r5, r0
   12cf8:	mov	r0, r4
   12cfc:	bl	11e74 <__assert_fail@plt+0xec8>
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #824]	; 13044 <__assert_fail@plt+0x2098>
   12d08:	mov	r4, r0
   12d0c:	mov	r0, r8
   12d10:	bl	10de4 <dcgettext@plt>
   12d14:	mov	r3, r5
   12d18:	mov	r1, r8
   12d1c:	str	r4, [sp]
   12d20:	mov	r2, r0
   12d24:	mov	r0, r8
   12d28:	bl	10e5c <error@plt>
   12d2c:	mov	r0, r5
   12d30:	bl	10d84 <free@plt>
   12d34:	mov	r0, r4
   12d38:	bl	10d84 <free@plt>
   12d3c:	ldr	r0, [sp, #36]	; 0x24
   12d40:	bl	10d84 <free@plt>
   12d44:	mov	r0, fp
   12d48:	bl	10d84 <free@plt>
   12d4c:	ldr	r3, [pc, #740]	; 13038 <__assert_fail@plt+0x208c>
   12d50:	ldr	r2, [sp, #100]	; 0x64
   12d54:	mov	r0, r9
   12d58:	ldr	r3, [r3]
   12d5c:	cmp	r2, r3
   12d60:	bne	1301c <__assert_fail@plt+0x2070>
   12d64:	add	sp, sp, #108	; 0x6c
   12d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d6c:	ldr	r3, [pc, #724]	; 13048 <__assert_fail@plt+0x209c>
   12d70:	str	r7, [sp, #68]	; 0x44
   12d74:	mov	r7, r3
   12d78:	str	sl, [sp, #60]	; 0x3c
   12d7c:	str	r4, [sp, #64]	; 0x40
   12d80:	ldr	r4, [r7, #4]!
   12d84:	mov	r2, r6
   12d88:	mov	r1, r4
   12d8c:	ldr	r0, [sp, #52]	; 0x34
   12d90:	bl	10f88 <strncmp@plt>
   12d94:	subs	sl, r0, #0
   12d98:	bne	12dac <__assert_fail@plt+0x1e00>
   12d9c:	mov	r0, r4
   12da0:	bl	10ed4 <strlen@plt>
   12da4:	cmp	r6, r0
   12da8:	beq	12e34 <__assert_fail@plt+0x1e88>
   12dac:	add	r5, r5, #1
   12db0:	cmp	r5, #12
   12db4:	bne	12d80 <__assert_fail@plt+0x1dd4>
   12db8:	ldr	r4, [sp, #64]	; 0x40
   12dbc:	add	r0, sp, #88	; 0x58
   12dc0:	mov	r1, r4
   12dc4:	bl	11dc8 <__assert_fail@plt+0xe1c>
   12dc8:	ldr	sl, [sp, #60]	; 0x3c
   12dcc:	cmp	r0, #0
   12dd0:	bne	129c8 <__assert_fail@plt+0x1a1c>
   12dd4:	mov	r1, r6
   12dd8:	ldr	r0, [sp, #52]	; 0x34
   12ddc:	bl	11ee4 <__assert_fail@plt+0xf38>
   12de0:	ldr	r1, [pc, #612]	; 1304c <__assert_fail@plt+0x20a0>
   12de4:	mov	r9, r8
   12de8:	mov	r2, #5
   12dec:	mov	r4, r0
   12df0:	mov	r0, #0
   12df4:	bl	10de4 <dcgettext@plt>
   12df8:	mov	r5, r0
   12dfc:	mov	r0, r4
   12e00:	bl	159b0 <__assert_fail@plt+0x4a04>
   12e04:	mov	r2, r5
   12e08:	mov	r3, r0
   12e0c:	b	12c74 <__assert_fail@plt+0x1cc8>
   12e10:	mov	r3, r5
   12e14:	mov	r0, #0
   12e18:	mov	r1, #0
   12e1c:	mov	r5, r3
   12e20:	mov	r2, r0
   12e24:	mov	r3, r1
   12e28:	strd	r0, [sp, #80]	; 0x50
   12e2c:	strd	r2, [sp, #24]
   12e30:	b	12aac <__assert_fail@plt+0x1b00>
   12e34:	mov	r0, #24
   12e38:	ldr	r7, [sp, #68]	; 0x44
   12e3c:	bl	15f88 <__assert_fail@plt+0x4fdc>
   12e40:	ldr	r3, [sp, #40]	; 0x28
   12e44:	mov	r2, #2
   12e48:	ldr	r3, [r3, #4]
   12e4c:	cmp	r3, #0
   12e50:	str	sl, [r0, #4]
   12e54:	str	r5, [r0, #8]
   12e58:	str	r2, [r0]
   12e5c:	beq	13024 <__assert_fail@plt+0x2078>
   12e60:	str	r0, [r3, #4]
   12e64:	ldr	r3, [sp, #40]	; 0x28
   12e68:	add	r9, r7, #2
   12e6c:	str	r0, [r3, #4]
   12e70:	b	12af4 <__assert_fail@plt+0x1b48>
   12e74:	mov	r0, #24
   12e78:	bl	15f88 <__assert_fail@plt+0x4fdc>
   12e7c:	ldr	r3, [sp, #44]	; 0x2c
   12e80:	mov	r2, #3
   12e84:	ldrb	r1, [r3, r4]
   12e88:	ldr	r3, [sp, #40]	; 0x28
   12e8c:	ldr	r3, [r3, #4]
   12e90:	cmp	r3, #0
   12e94:	str	r5, [r0, #4]
   12e98:	strb	r1, [r0, #8]
   12e9c:	str	r2, [r0]
   12ea0:	bne	12e60 <__assert_fail@plt+0x1eb4>
   12ea4:	ldr	r3, [pc, #420]	; 13050 <__assert_fail@plt+0x20a4>
   12ea8:	ldr	r2, [pc, #420]	; 13054 <__assert_fail@plt+0x20a8>
   12eac:	ldr	r1, [pc, #420]	; 13058 <__assert_fail@plt+0x20ac>
   12eb0:	ldr	r0, [pc, #420]	; 1305c <__assert_fail@plt+0x20b0>
   12eb4:	bl	10fac <__assert_fail@plt>
   12eb8:	add	r2, r5, #2
   12ebc:	sub	r4, r4, #48	; 0x30
   12ec0:	ldrb	r1, [r7, r2]
   12ec4:	uxtb	r4, r4
   12ec8:	add	r3, r7, r2
   12ecc:	sub	r1, r1, #48	; 0x30
   12ed0:	cmp	r1, #7
   12ed4:	bhi	12918 <__assert_fail@plt+0x196c>
   12ed8:	add	sl, r5, #3
   12edc:	add	r4, r1, r4, lsl #3
   12ee0:	ldrb	r1, [r7, sl]
   12ee4:	and	r4, r4, #255	; 0xff
   12ee8:	sub	r1, r1, #48	; 0x30
   12eec:	cmp	r1, #7
   12ef0:	addhi	r2, r5, #3
   12ef4:	bhi	12918 <__assert_fail@plt+0x196c>
   12ef8:	add	r0, r1, r4, lsl #3
   12efc:	cmp	r0, #255	; 0xff
   12f00:	bgt	12f64 <__assert_fail@plt+0x1fb8>
   12f04:	and	r4, r0, #255	; 0xff
   12f08:	add	r2, r2, #2
   12f0c:	b	12918 <__assert_fail@plt+0x196c>
   12f10:	add	r2, r5, #2
   12f14:	mov	r4, #8
   12f18:	b	12918 <__assert_fail@plt+0x196c>
   12f1c:	cmp	sl, r3
   12f20:	ldr	r8, [sp, #44]	; 0x2c
   12f24:	bcs	12f54 <__assert_fail@plt+0x1fa8>
   12f28:	sub	r6, r8, #1
   12f2c:	add	r6, r6, r3
   12f30:	ldr	r3, [sp, #40]	; 0x28
   12f34:	sub	r4, sl, #1
   12f38:	add	r4, r8, r4
   12f3c:	add	r5, r3, #4
   12f40:	ldrb	r1, [r4, #1]!
   12f44:	mov	r0, r5
   12f48:	bl	127f0 <__assert_fail@plt+0x1844>
   12f4c:	cmp	r6, r4
   12f50:	bne	12f40 <__assert_fail@plt+0x1f94>
   12f54:	mov	r9, #1
   12f58:	b	12d3c <__assert_fail@plt+0x1d90>
   12f5c:	str	sl, [sp, #24]
   12f60:	b	12930 <__assert_fail@plt+0x1984>
   12f64:	mov	r2, #5
   12f68:	ldr	r1, [pc, #240]	; 13060 <__assert_fail@plt+0x20b4>
   12f6c:	mov	r0, #0
   12f70:	str	r3, [sp, #36]	; 0x24
   12f74:	bl	10de4 <dcgettext@plt>
   12f78:	ldr	r3, [sp, #36]	; 0x24
   12f7c:	ldrb	lr, [r7, r9]
   12f80:	ldrb	r2, [r7, sl]
   12f84:	ldrb	ip, [r3]
   12f88:	mov	r1, #0
   12f8c:	str	r2, [sp, #16]
   12f90:	str	r2, [sp, #4]
   12f94:	str	lr, [sp, #8]
   12f98:	mov	r3, lr
   12f9c:	str	ip, [sp, #12]
   12fa0:	str	ip, [sp]
   12fa4:	mov	r2, r0
   12fa8:	mov	r0, r1
   12fac:	bl	10e5c <error@plt>
   12fb0:	add	r2, r5, #3
   12fb4:	b	12918 <__assert_fail@plt+0x196c>
   12fb8:	mov	r1, sl
   12fbc:	mov	r0, r7
   12fc0:	bl	11ee4 <__assert_fail@plt+0xf38>
   12fc4:	mov	r9, r8
   12fc8:	mov	r2, #5
   12fcc:	ldr	r1, [pc, #144]	; 13064 <__assert_fail@plt+0x20b8>
   12fd0:	mov	r4, r0
   12fd4:	b	12df0 <__assert_fail@plt+0x1e44>
   12fd8:	cmp	r1, #58	; 0x3a
   12fdc:	mov	r2, #5
   12fe0:	ldreq	r1, [pc, #128]	; 13068 <__assert_fail@plt+0x20bc>
   12fe4:	ldrne	r1, [pc, #128]	; 1306c <__assert_fail@plt+0x20c0>
   12fe8:	mov	r0, r6
   12fec:	bl	10de4 <dcgettext@plt>
   12ff0:	mov	r1, r6
   12ff4:	mov	r9, r8
   12ff8:	mov	r2, r0
   12ffc:	mov	r0, r6
   13000:	bl	10e5c <error@plt>
   13004:	b	12d3c <__assert_fail@plt+0x1d90>
   13008:	ldr	r3, [pc, #96]	; 13070 <__assert_fail@plt+0x20c4>
   1300c:	add	r2, r2, #676	; 0x2a4
   13010:	ldr	r1, [pc, #64]	; 13058 <__assert_fail@plt+0x20ac>
   13014:	ldr	r0, [pc, #64]	; 1305c <__assert_fail@plt+0x20b0>
   13018:	bl	10fac <__assert_fail@plt>
   1301c:	bl	10df0 <__stack_chk_fail@plt>
   13020:	bl	127c8 <__assert_fail@plt+0x181c>
   13024:	ldr	r3, [pc, #72]	; 13074 <__assert_fail@plt+0x20c8>
   13028:	ldr	r2, [pc, #72]	; 13078 <__assert_fail@plt+0x20cc>
   1302c:	ldr	r1, [pc, #36]	; 13058 <__assert_fail@plt+0x20ac>
   13030:	ldr	r0, [pc, #36]	; 1305c <__assert_fail@plt+0x20b0>
   13034:	bl	10fac <__assert_fail@plt>
   13038:	andeq	r8, r2, r8, lsl #30
   1303c:	andeq	r7, r1, r4, lsl #9
   13040:	andeq	r7, r1, r4, lsr r5
   13044:	muleq	r1, ip, r5
   13048:	andeq	r7, r1, r4, lsl r2
   1304c:	andeq	r7, r1, r8, lsl r5
   13050:	andeq	r7, r1, ip, asr r2
   13054:	andeq	r0, r0, r5, ror #5
   13058:	andeq	r7, r1, r0, ror r3
   1305c:	andeq	r7, r1, r4, lsl r4
   13060:	andeq	r7, r1, r0, lsr #8
   13064:	andeq	r7, r1, r0, ror r5
   13068:	andeq	r7, r1, r8, asr #9
   1306c:	andeq	r7, r1, ip, ror #9
   13070:	andeq	r7, r1, r0, ror r2
   13074:	andeq	r7, r1, r8, asr #4
   13078:			; <UNDEFINED> instruction: 0x000002bb
   1307c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13080:	mvn	r8, #1
   13084:	mvn	r9, #0
   13088:	mov	r5, r0
   1308c:	mov	r7, r1
   13090:	mov	r4, r2
   13094:	strd	r8, [r0, #8]
   13098:	mov	r6, #1
   1309c:	b	130a4 <__assert_fail@plt+0x20f8>
   130a0:	strb	r6, [r4, r0]
   130a4:	mov	r1, #0
   130a8:	mov	r0, r5
   130ac:	bl	123a0 <__assert_fail@plt+0x13f4>
   130b0:	cmn	r0, #1
   130b4:	bne	130a0 <__assert_fail@plt+0x20f4>
   130b8:	cmp	r7, #0
   130bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   130c0:	sub	r3, r4, #1
   130c4:	add	r1, r4, #255	; 0xff
   130c8:	ldrb	r2, [r3, #1]!
   130cc:	eor	r2, r2, #1
   130d0:	cmp	r3, r1
   130d4:	strb	r2, [r3]
   130d8:	bne	130c8 <__assert_fail@plt+0x211c>
   130dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e4:	mov	r5, #0
   130e8:	ldr	r7, [pc, #456]	; 132b8 <__assert_fail@plt+0x230c>
   130ec:	ldr	fp, [pc, #456]	; 132bc <__assert_fail@plt+0x2310>
   130f0:	mov	sl, r0
   130f4:	mov	r9, r7
   130f8:	mov	r4, r5
   130fc:	mvn	r6, #-2147483648	; 0x80000000
   13100:	cmp	r4, r5
   13104:	bcs	13210 <__assert_fail@plt+0x2264>
   13108:	cmn	r6, #-2147483647	; 0x80000001
   1310c:	beq	13120 <__assert_fail@plt+0x2174>
   13110:	ldrb	r3, [r7, r4]
   13114:	add	r2, r7, r4
   13118:	cmp	r6, r3
   1311c:	beq	13248 <__assert_fail@plt+0x229c>
   13120:	ldr	r8, [pc, #408]	; 132c0 <__assert_fail@plt+0x2314>
   13124:	add	r3, r7, r4
   13128:	mov	r0, r4
   1312c:	ldrb	r3, [r3]
   13130:	add	r2, r8, r3
   13134:	mov	r6, r3
   13138:	ldrb	r2, [r2, #512]	; 0x200
   1313c:	cmp	r2, #0
   13140:	moveq	r3, r0
   13144:	beq	1326c <__assert_fail@plt+0x22c0>
   13148:	mov	r4, r0
   1314c:	mov	r8, #1
   13150:	mov	r2, #0
   13154:	cmp	r4, #0
   13158:	beq	1316c <__assert_fail@plt+0x21c0>
   1315c:	ldr	r1, [pc, #352]	; 132c4 <__assert_fail@plt+0x2318>
   13160:	ldrb	r1, [r4, r1]
   13164:	cmp	r1, r3
   13168:	moveq	r8, r2
   1316c:	cmp	r8, #0
   13170:	add	r4, r4, #1
   13174:	beq	13230 <__assert_fail@plt+0x2284>
   13178:	add	r0, r7, r0
   1317c:	ldr	r3, [fp]
   13180:	mov	r2, r8
   13184:	mov	r1, #1
   13188:	bl	10dc0 <fwrite_unlocked@plt>
   1318c:	cmp	r8, r0
   13190:	beq	13230 <__assert_fail@plt+0x2284>
   13194:	bl	10eec <__errno_location@plt>
   13198:	mov	r2, #5
   1319c:	ldr	r1, [pc, #292]	; 132c8 <__assert_fail@plt+0x231c>
   131a0:	ldr	r4, [r0]
   131a4:	mov	r0, #0
   131a8:	bl	10de4 <dcgettext@plt>
   131ac:	mov	r1, r4
   131b0:	mov	r2, r0
   131b4:	mov	r0, #1
   131b8:	bl	10e5c <error@plt>
   131bc:	bne	131e0 <__assert_fail@plt+0x2234>
   131c0:	add	r4, r3, #1
   131c4:	ldrb	r3, [r7, r4]
   131c8:	add	r2, r8, r3
   131cc:	mov	r6, r3
   131d0:	ldrb	r2, [r2, #512]	; 0x200
   131d4:	cmp	r2, #0
   131d8:	bne	132ac <__assert_fail@plt+0x2300>
   131dc:	mov	r4, r5
   131e0:	subs	r6, r5, r0
   131e4:	beq	13204 <__assert_fail@plt+0x2258>
   131e8:	add	r0, r7, r0
   131ec:	ldr	r3, [fp]
   131f0:	mov	r2, r6
   131f4:	mov	r1, #1
   131f8:	bl	10dc0 <fwrite_unlocked@plt>
   131fc:	cmp	r6, r0
   13200:	bne	13194 <__assert_fail@plt+0x21e8>
   13204:	cmp	r5, r4
   13208:	mvn	r6, #-2147483648	; 0x80000000
   1320c:	bhi	13124 <__assert_fail@plt+0x2178>
   13210:	mov	r1, #8192	; 0x2000
   13214:	mov	r0, r9
   13218:	blx	sl
   1321c:	subs	r5, r0, #0
   13220:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13224:	cmn	r6, #-2147483647	; 0x80000001
   13228:	movne	r4, #0
   1322c:	beq	1329c <__assert_fail@plt+0x22f0>
   13230:	cmp	r5, r4
   13234:	bls	13100 <__assert_fail@plt+0x2154>
   13238:	ldrb	r3, [r7, r4]
   1323c:	add	r2, r7, r4
   13240:	cmp	r6, r3
   13244:	bne	13120 <__assert_fail@plt+0x2174>
   13248:	add	r4, r4, #1
   1324c:	cmp	r4, r5
   13250:	beq	13100 <__assert_fail@plt+0x2154>
   13254:	ldrb	r3, [r2, #1]!
   13258:	cmp	r3, r6
   1325c:	beq	13248 <__assert_fail@plt+0x229c>
   13260:	mvn	r6, #-2147483648	; 0x80000000
   13264:	b	13100 <__assert_fail@plt+0x2154>
   13268:	mov	r3, r4
   1326c:	add	r4, r3, #2
   13270:	cmp	r4, r5
   13274:	bcs	131bc <__assert_fail@plt+0x2210>
   13278:	ldrb	r3, [r7, r4]
   1327c:	add	r2, r8, r3
   13280:	mov	r6, r3
   13284:	ldrb	r2, [r2, #512]	; 0x200
   13288:	cmp	r2, #0
   1328c:	beq	13268 <__assert_fail@plt+0x22bc>
   13290:	sub	r2, r4, r0
   13294:	add	r8, r2, #1
   13298:	b	13154 <__assert_fail@plt+0x21a8>
   1329c:	ldr	r8, [pc, #28]	; 132c0 <__assert_fail@plt+0x2314>
   132a0:	mov	r3, r9
   132a4:	mov	r0, #0
   132a8:	b	1312c <__assert_fail@plt+0x2180>
   132ac:	cmp	r4, r5
   132b0:	bcs	131e0 <__assert_fail@plt+0x2234>
   132b4:	b	13290 <__assert_fail@plt+0x22e4>
   132b8:	andeq	r9, r2, r4, ror #8
   132bc:	andeq	r9, r2, r4, asr r1
   132c0:	andeq	r9, r2, ip, asr r1
   132c4:	andeq	r9, r2, r3, ror #8
   132c8:	andeq	r7, r1, r0, ror #11
   132cc:	ldr	r3, [pc, #744]	; 135bc <__assert_fail@plt+0x2610>
   132d0:	push	{r7, lr}
   132d4:	sub	sp, sp, #64	; 0x40
   132d8:	ldr	r3, [r3]
   132dc:	subs	r4, r0, #0
   132e0:	str	r3, [sp, #60]	; 0x3c
   132e4:	beq	13320 <__assert_fail@plt+0x2374>
   132e8:	ldr	r3, [pc, #720]	; 135c0 <__assert_fail@plt+0x2614>
   132ec:	mov	r2, #5
   132f0:	ldr	r1, [pc, #716]	; 135c4 <__assert_fail@plt+0x2618>
   132f4:	mov	r0, #0
   132f8:	ldr	r5, [r3]
   132fc:	bl	10de4 <dcgettext@plt>
   13300:	ldr	r3, [pc, #704]	; 135c8 <__assert_fail@plt+0x261c>
   13304:	mov	r1, #1
   13308:	ldr	r3, [r3]
   1330c:	mov	r2, r0
   13310:	mov	r0, r5
   13314:	bl	10f34 <__fprintf_chk@plt>
   13318:	mov	r0, r4
   1331c:	bl	10ec8 <exit@plt>
   13320:	mov	r2, #5
   13324:	ldr	r1, [pc, #672]	; 135cc <__assert_fail@plt+0x2620>
   13328:	bl	10de4 <dcgettext@plt>
   1332c:	ldr	r3, [pc, #660]	; 135c8 <__assert_fail@plt+0x261c>
   13330:	ldr	r5, [pc, #664]	; 135d0 <__assert_fail@plt+0x2624>
   13334:	ldr	r2, [r3]
   13338:	mov	r1, r0
   1333c:	mov	r0, #1
   13340:	bl	10f1c <__printf_chk@plt>
   13344:	mov	r2, #5
   13348:	ldr	r1, [pc, #644]	; 135d4 <__assert_fail@plt+0x2628>
   1334c:	mov	r0, r4
   13350:	bl	10de4 <dcgettext@plt>
   13354:	ldr	r1, [r5]
   13358:	bl	10d3c <fputs_unlocked@plt>
   1335c:	mov	r2, #5
   13360:	ldr	r1, [pc, #624]	; 135d8 <__assert_fail@plt+0x262c>
   13364:	mov	r0, r4
   13368:	bl	10de4 <dcgettext@plt>
   1336c:	ldr	r1, [r5]
   13370:	bl	10d3c <fputs_unlocked@plt>
   13374:	mov	r2, #5
   13378:	ldr	r1, [pc, #604]	; 135dc <__assert_fail@plt+0x2630>
   1337c:	mov	r0, r4
   13380:	bl	10de4 <dcgettext@plt>
   13384:	ldr	r1, [r5]
   13388:	bl	10d3c <fputs_unlocked@plt>
   1338c:	mov	r2, #5
   13390:	ldr	r1, [pc, #584]	; 135e0 <__assert_fail@plt+0x2634>
   13394:	mov	r0, r4
   13398:	bl	10de4 <dcgettext@plt>
   1339c:	ldr	r1, [r5]
   133a0:	bl	10d3c <fputs_unlocked@plt>
   133a4:	mov	r2, #5
   133a8:	ldr	r1, [pc, #564]	; 135e4 <__assert_fail@plt+0x2638>
   133ac:	mov	r0, r4
   133b0:	bl	10de4 <dcgettext@plt>
   133b4:	ldr	r1, [r5]
   133b8:	bl	10d3c <fputs_unlocked@plt>
   133bc:	mov	r2, #5
   133c0:	ldr	r1, [pc, #544]	; 135e8 <__assert_fail@plt+0x263c>
   133c4:	mov	r0, r4
   133c8:	bl	10de4 <dcgettext@plt>
   133cc:	ldr	r1, [r5]
   133d0:	bl	10d3c <fputs_unlocked@plt>
   133d4:	mov	r2, #5
   133d8:	ldr	r1, [pc, #524]	; 135ec <__assert_fail@plt+0x2640>
   133dc:	mov	r0, r4
   133e0:	bl	10de4 <dcgettext@plt>
   133e4:	ldr	r1, [r5]
   133e8:	bl	10d3c <fputs_unlocked@plt>
   133ec:	ldr	lr, [pc, #508]	; 135f0 <__assert_fail@plt+0x2644>
   133f0:	add	ip, sp, #4
   133f4:	ldm	lr!, {r0, r1, r2, r3}
   133f8:	stmia	ip!, {r0, r1, r2, r3}
   133fc:	ldm	lr!, {r0, r1, r2, r3}
   13400:	ldr	r6, [sp, #4]
   13404:	stmia	ip!, {r0, r1, r2, r3}
   13408:	cmp	r6, #0
   1340c:	ldm	lr!, {r0, r1, r2, r3}
   13410:	addeq	r5, sp, #4
   13414:	stmia	ip!, {r0, r1, r2, r3}
   13418:	ldm	lr, {r0, r1}
   1341c:	stm	ip, {r0, r1}
   13420:	beq	13450 <__assert_fail@plt+0x24a4>
   13424:	ldr	r7, [pc, #456]	; 135f4 <__assert_fail@plt+0x2648>
   13428:	add	r5, sp, #4
   1342c:	b	1343c <__assert_fail@plt+0x2490>
   13430:	ldr	r6, [r5, #8]!
   13434:	cmp	r6, #0
   13438:	beq	13450 <__assert_fail@plt+0x24a4>
   1343c:	mov	r1, r6
   13440:	mov	r0, r7
   13444:	bl	10d54 <strcmp@plt>
   13448:	cmp	r0, #0
   1344c:	bne	13430 <__assert_fail@plt+0x2484>
   13450:	ldr	r5, [r5, #4]
   13454:	mov	r2, #5
   13458:	cmp	r5, #0
   1345c:	ldr	r1, [pc, #404]	; 135f8 <__assert_fail@plt+0x264c>
   13460:	beq	13508 <__assert_fail@plt+0x255c>
   13464:	mov	r0, #0
   13468:	bl	10de4 <dcgettext@plt>
   1346c:	ldr	r3, [pc, #392]	; 135fc <__assert_fail@plt+0x2650>
   13470:	ldr	r2, [pc, #392]	; 13600 <__assert_fail@plt+0x2654>
   13474:	mov	r1, r0
   13478:	mov	r0, #1
   1347c:	bl	10f1c <__printf_chk@plt>
   13480:	mov	r1, #0
   13484:	mov	r0, #5
   13488:	bl	10f58 <setlocale@plt>
   1348c:	cmp	r0, #0
   13490:	ldreq	r6, [pc, #348]	; 135f4 <__assert_fail@plt+0x2648>
   13494:	beq	134b0 <__assert_fail@plt+0x2504>
   13498:	mov	r2, #3
   1349c:	ldr	r1, [pc, #352]	; 13604 <__assert_fail@plt+0x2658>
   134a0:	bl	10f88 <strncmp@plt>
   134a4:	ldr	r6, [pc, #328]	; 135f4 <__assert_fail@plt+0x2648>
   134a8:	cmp	r0, #0
   134ac:	bne	13598 <__assert_fail@plt+0x25ec>
   134b0:	mov	r2, #5
   134b4:	ldr	r1, [pc, #332]	; 13608 <__assert_fail@plt+0x265c>
   134b8:	mov	r0, #0
   134bc:	bl	10de4 <dcgettext@plt>
   134c0:	ldr	r3, [pc, #300]	; 135f4 <__assert_fail@plt+0x2648>
   134c4:	ldr	r2, [pc, #304]	; 135fc <__assert_fail@plt+0x2650>
   134c8:	mov	r1, r0
   134cc:	mov	r0, #1
   134d0:	bl	10f1c <__printf_chk@plt>
   134d4:	mov	r2, #5
   134d8:	ldr	r1, [pc, #300]	; 1360c <__assert_fail@plt+0x2660>
   134dc:	mov	r0, #0
   134e0:	bl	10de4 <dcgettext@plt>
   134e4:	ldr	r2, [pc, #292]	; 13610 <__assert_fail@plt+0x2664>
   134e8:	cmp	r5, r6
   134ec:	ldr	r3, [pc, #288]	; 13614 <__assert_fail@plt+0x2668>
   134f0:	movne	r3, r2
   134f4:	mov	r1, r0
   134f8:	mov	r2, r5
   134fc:	mov	r0, #1
   13500:	bl	10f1c <__printf_chk@plt>
   13504:	b	13318 <__assert_fail@plt+0x236c>
   13508:	mov	r0, r5
   1350c:	bl	10de4 <dcgettext@plt>
   13510:	ldr	r3, [pc, #228]	; 135fc <__assert_fail@plt+0x2650>
   13514:	ldr	r2, [pc, #228]	; 13600 <__assert_fail@plt+0x2654>
   13518:	mov	r1, r0
   1351c:	mov	r0, #1
   13520:	bl	10f1c <__printf_chk@plt>
   13524:	mov	r1, r5
   13528:	mov	r0, #5
   1352c:	bl	10f58 <setlocale@plt>
   13530:	cmp	r0, #0
   13534:	beq	1354c <__assert_fail@plt+0x25a0>
   13538:	mov	r2, #3
   1353c:	ldr	r1, [pc, #192]	; 13604 <__assert_fail@plt+0x2658>
   13540:	bl	10f88 <strncmp@plt>
   13544:	cmp	r0, #0
   13548:	bne	13590 <__assert_fail@plt+0x25e4>
   1354c:	mov	r2, #5
   13550:	ldr	r1, [pc, #176]	; 13608 <__assert_fail@plt+0x265c>
   13554:	mov	r0, #0
   13558:	bl	10de4 <dcgettext@plt>
   1355c:	ldr	r3, [pc, #144]	; 135f4 <__assert_fail@plt+0x2648>
   13560:	ldr	r2, [pc, #148]	; 135fc <__assert_fail@plt+0x2650>
   13564:	mov	r5, r3
   13568:	mov	r1, r0
   1356c:	mov	r0, #1
   13570:	bl	10f1c <__printf_chk@plt>
   13574:	ldr	r1, [pc, #144]	; 1360c <__assert_fail@plt+0x2660>
   13578:	mov	r2, #5
   1357c:	mov	r0, #0
   13580:	bl	10de4 <dcgettext@plt>
   13584:	ldr	r3, [pc, #136]	; 13614 <__assert_fail@plt+0x2668>
   13588:	mov	r1, r0
   1358c:	b	134f8 <__assert_fail@plt+0x254c>
   13590:	ldr	r6, [pc, #92]	; 135f4 <__assert_fail@plt+0x2648>
   13594:	mov	r5, r6
   13598:	mov	r2, #5
   1359c:	ldr	r1, [pc, #116]	; 13618 <__assert_fail@plt+0x266c>
   135a0:	mov	r0, #0
   135a4:	bl	10de4 <dcgettext@plt>
   135a8:	ldr	r2, [pc, #68]	; 135f4 <__assert_fail@plt+0x2648>
   135ac:	mov	r1, r0
   135b0:	mov	r0, #1
   135b4:	bl	10f1c <__printf_chk@plt>
   135b8:	b	134b0 <__assert_fail@plt+0x2504>
   135bc:	andeq	r8, r2, r8, lsl #30
   135c0:	andeq	r9, r2, r8, asr #2
   135c4:	strdeq	r7, [r1], -r0
   135c8:	andeq	fp, r2, ip, ror #8
   135cc:	andeq	r7, r1, r8, lsl r6
   135d0:	andeq	r9, r2, r4, asr r1
   135d4:	andeq	r7, r1, ip, lsr r6
   135d8:	andeq	r7, r1, ip, lsr #16
   135dc:	andeq	r7, r1, ip, asr r8
   135e0:	muleq	r1, r4, r8
   135e4:	andeq	r7, r1, ip, lsl #20
   135e8:			; <UNDEFINED> instruction: 0x00017bb8
   135ec:	andeq	r7, r1, r4, asr sp
   135f0:	andeq	r7, r1, r0, lsl #5
   135f4:	andeq	r7, r1, ip, ror #11
   135f8:	andeq	r7, r1, ip, lsr #30
   135fc:	andeq	r7, r1, r4, asr #30
   13600:	andeq	r7, r1, ip, ror #30
   13604:	andeq	r7, r1, ip, ror pc
   13608:	andeq	r7, r1, r8, asr #31
   1360c:	andeq	r7, r1, r8, ror #31
   13610:	andeq	r8, r1, r8, ror #18
   13614:	andeq	r8, r1, r4, asr r4
   13618:	andeq	r7, r1, r0, lsl #31
   1361c:	ldr	r3, [pc, #4]	; 13628 <__assert_fail@plt+0x267c>
   13620:	str	r0, [r3]
   13624:	bx	lr
   13628:	andeq	fp, r2, r4, ror #8
   1362c:	ldr	r3, [pc, #4]	; 13638 <__assert_fail@plt+0x268c>
   13630:	strb	r0, [r3, #4]
   13634:	bx	lr
   13638:	andeq	fp, r2, r4, ror #8
   1363c:	ldr	r3, [pc, #180]	; 136f8 <__assert_fail@plt+0x274c>
   13640:	push	{r4, r5, r6, lr}
   13644:	sub	sp, sp, #8
   13648:	ldr	r0, [r3]
   1364c:	bl	16c98 <__assert_fail@plt+0x5cec>
   13650:	cmp	r0, #0
   13654:	beq	1367c <__assert_fail@plt+0x26d0>
   13658:	bl	10eec <__errno_location@plt>
   1365c:	ldr	r5, [pc, #152]	; 136fc <__assert_fail@plt+0x2750>
   13660:	ldrb	r3, [r5, #4]
   13664:	cmp	r3, #0
   13668:	mov	r4, r0
   1366c:	beq	13698 <__assert_fail@plt+0x26ec>
   13670:	ldr	r3, [r0]
   13674:	cmp	r3, #32
   13678:	bne	13698 <__assert_fail@plt+0x26ec>
   1367c:	ldr	r3, [pc, #124]	; 13700 <__assert_fail@plt+0x2754>
   13680:	ldr	r0, [r3]
   13684:	bl	16c98 <__assert_fail@plt+0x5cec>
   13688:	cmp	r0, #0
   1368c:	bne	136d8 <__assert_fail@plt+0x272c>
   13690:	add	sp, sp, #8
   13694:	pop	{r4, r5, r6, pc}
   13698:	mov	r2, #5
   1369c:	ldr	r1, [pc, #96]	; 13704 <__assert_fail@plt+0x2758>
   136a0:	mov	r0, #0
   136a4:	bl	10de4 <dcgettext@plt>
   136a8:	mov	r6, r0
   136ac:	ldr	r0, [r5]
   136b0:	cmp	r0, #0
   136b4:	beq	136e4 <__assert_fail@plt+0x2738>
   136b8:	ldr	r4, [r4]
   136bc:	bl	157d0 <__assert_fail@plt+0x4824>
   136c0:	mov	r1, r4
   136c4:	str	r6, [sp]
   136c8:	ldr	r2, [pc, #56]	; 13708 <__assert_fail@plt+0x275c>
   136cc:	mov	r3, r0
   136d0:	mov	r0, #0
   136d4:	bl	10e5c <error@plt>
   136d8:	ldr	r3, [pc, #44]	; 1370c <__assert_fail@plt+0x2760>
   136dc:	ldr	r0, [r3]
   136e0:	bl	10d90 <_exit@plt>
   136e4:	mov	r3, r6
   136e8:	ldr	r1, [r4]
   136ec:	ldr	r2, [pc, #28]	; 13710 <__assert_fail@plt+0x2764>
   136f0:	bl	10e5c <error@plt>
   136f4:	b	136d8 <__assert_fail@plt+0x272c>
   136f8:	andeq	r9, r2, r4, asr r1
   136fc:	andeq	fp, r2, r4, ror #8
   13700:	andeq	r9, r2, r8, asr #2
   13704:	andeq	r7, r1, r0, ror #11
   13708:	andeq	r8, r1, r4, ror #10
   1370c:	strdeq	r9, [r2], -r4
   13710:	andeq	r8, r1, r8, ror #10
   13714:	b	10d60 <posix_fadvise64@plt>
   13718:	cmp	r0, #0
   1371c:	bxeq	lr
   13720:	push	{r4, lr}
   13724:	sub	sp, sp, #16
   13728:	mov	r4, r1
   1372c:	bl	10f28 <fileno@plt>
   13730:	mov	r2, #0
   13734:	mov	r3, #0
   13738:	str	r4, [sp, #8]
   1373c:	strd	r2, [sp]
   13740:	bl	10d60 <posix_fadvise64@plt>
   13744:	add	sp, sp, #16
   13748:	pop	{r4, pc}
   1374c:	push	{r4, r5, r6, lr}
   13750:	subs	r4, r0, #0
   13754:	beq	137c8 <__assert_fail@plt+0x281c>
   13758:	mov	r1, #47	; 0x2f
   1375c:	bl	10f64 <strrchr@plt>
   13760:	subs	r5, r0, #0
   13764:	beq	137b4 <__assert_fail@plt+0x2808>
   13768:	add	r6, r5, #1
   1376c:	sub	r3, r6, r4
   13770:	cmp	r3, #6
   13774:	ble	137b4 <__assert_fail@plt+0x2808>
   13778:	mov	r2, #7
   1377c:	ldr	r1, [pc, #96]	; 137e4 <__assert_fail@plt+0x2838>
   13780:	sub	r0, r5, #6
   13784:	bl	10f88 <strncmp@plt>
   13788:	cmp	r0, #0
   1378c:	bne	137b4 <__assert_fail@plt+0x2808>
   13790:	mov	r2, #3
   13794:	ldr	r1, [pc, #76]	; 137e8 <__assert_fail@plt+0x283c>
   13798:	mov	r0, r6
   1379c:	bl	10f88 <strncmp@plt>
   137a0:	cmp	r0, #0
   137a4:	movne	r4, r6
   137a8:	ldreq	r3, [pc, #60]	; 137ec <__assert_fail@plt+0x2840>
   137ac:	addeq	r4, r5, #4
   137b0:	streq	r4, [r3]
   137b4:	ldr	r2, [pc, #52]	; 137f0 <__assert_fail@plt+0x2844>
   137b8:	ldr	r3, [pc, #52]	; 137f4 <__assert_fail@plt+0x2848>
   137bc:	str	r4, [r2]
   137c0:	str	r4, [r3]
   137c4:	pop	{r4, r5, r6, pc}
   137c8:	ldr	r3, [pc, #40]	; 137f8 <__assert_fail@plt+0x284c>
   137cc:	mov	r2, #55	; 0x37
   137d0:	mov	r1, #1
   137d4:	ldr	r3, [r3]
   137d8:	ldr	r0, [pc, #28]	; 137fc <__assert_fail@plt+0x2850>
   137dc:	bl	10e20 <fwrite@plt>
   137e0:	bl	10f94 <abort@plt>
   137e4:	andeq	r8, r1, r4, lsr #11
   137e8:	andeq	r8, r1, ip, lsr #11
   137ec:	andeq	r9, r2, r8, lsr r1
   137f0:	andeq	fp, r2, ip, ror #8
   137f4:	andeq	r9, r2, ip, lsr r1
   137f8:	andeq	r9, r2, r8, asr #2
   137fc:	andeq	r8, r1, ip, ror #10
   13800:	push	{r4, lr}
   13804:	mov	r2, #48	; 0x30
   13808:	mov	r4, r1
   1380c:	mov	r1, #0
   13810:	bl	10f10 <memset@plt>
   13814:	cmp	r4, #10
   13818:	beq	13824 <__assert_fail@plt+0x2878>
   1381c:	str	r4, [r0]
   13820:	pop	{r4, pc}
   13824:	bl	10f94 <abort@plt>
   13828:	push	{r4, r5, r6, lr}
   1382c:	mov	r2, #5
   13830:	mov	r5, r0
   13834:	mov	r6, r1
   13838:	mov	r1, r0
   1383c:	mov	r0, #0
   13840:	bl	10de4 <dcgettext@plt>
   13844:	cmp	r5, r0
   13848:	mov	r4, r0
   1384c:	beq	13858 <__assert_fail@plt+0x28ac>
   13850:	mov	r0, r4
   13854:	pop	{r4, r5, r6, pc}
   13858:	bl	16d58 <__assert_fail@plt+0x5dac>
   1385c:	ldrb	r3, [r0]
   13860:	bic	r3, r3, #32
   13864:	cmp	r3, #85	; 0x55
   13868:	bne	138c8 <__assert_fail@plt+0x291c>
   1386c:	ldrb	r3, [r0, #1]
   13870:	bic	r3, r3, #32
   13874:	cmp	r3, #84	; 0x54
   13878:	bne	13940 <__assert_fail@plt+0x2994>
   1387c:	ldrb	r3, [r0, #2]
   13880:	bic	r3, r3, #32
   13884:	cmp	r3, #70	; 0x46
   13888:	bne	13940 <__assert_fail@plt+0x2994>
   1388c:	ldrb	r3, [r0, #3]
   13890:	cmp	r3, #45	; 0x2d
   13894:	bne	13940 <__assert_fail@plt+0x2994>
   13898:	ldrb	r3, [r0, #4]
   1389c:	cmp	r3, #56	; 0x38
   138a0:	bne	13940 <__assert_fail@plt+0x2994>
   138a4:	ldrb	r3, [r0, #5]
   138a8:	cmp	r3, #0
   138ac:	bne	13940 <__assert_fail@plt+0x2994>
   138b0:	ldrb	r2, [r4]
   138b4:	ldr	r3, [pc, #156]	; 13958 <__assert_fail@plt+0x29ac>
   138b8:	ldr	r4, [pc, #156]	; 1395c <__assert_fail@plt+0x29b0>
   138bc:	cmp	r2, #96	; 0x60
   138c0:	movne	r4, r3
   138c4:	b	13850 <__assert_fail@plt+0x28a4>
   138c8:	cmp	r3, #71	; 0x47
   138cc:	bne	13940 <__assert_fail@plt+0x2994>
   138d0:	ldrb	r3, [r0, #1]
   138d4:	bic	r3, r3, #32
   138d8:	cmp	r3, #66	; 0x42
   138dc:	bne	13940 <__assert_fail@plt+0x2994>
   138e0:	ldrb	r3, [r0, #2]
   138e4:	cmp	r3, #49	; 0x31
   138e8:	bne	13940 <__assert_fail@plt+0x2994>
   138ec:	ldrb	r3, [r0, #3]
   138f0:	cmp	r3, #56	; 0x38
   138f4:	bne	13940 <__assert_fail@plt+0x2994>
   138f8:	ldrb	r3, [r0, #4]
   138fc:	cmp	r3, #48	; 0x30
   13900:	bne	13940 <__assert_fail@plt+0x2994>
   13904:	ldrb	r3, [r0, #5]
   13908:	cmp	r3, #51	; 0x33
   1390c:	bne	13940 <__assert_fail@plt+0x2994>
   13910:	ldrb	r3, [r0, #6]
   13914:	cmp	r3, #48	; 0x30
   13918:	bne	13940 <__assert_fail@plt+0x2994>
   1391c:	ldrb	r3, [r0, #7]
   13920:	cmp	r3, #0
   13924:	bne	13940 <__assert_fail@plt+0x2994>
   13928:	ldrb	r2, [r4]
   1392c:	ldr	r3, [pc, #44]	; 13960 <__assert_fail@plt+0x29b4>
   13930:	ldr	r4, [pc, #44]	; 13964 <__assert_fail@plt+0x29b8>
   13934:	cmp	r2, #96	; 0x60
   13938:	movne	r4, r3
   1393c:	b	13850 <__assert_fail@plt+0x28a4>
   13940:	ldr	r3, [pc, #32]	; 13968 <__assert_fail@plt+0x29bc>
   13944:	ldr	r4, [pc, #32]	; 1396c <__assert_fail@plt+0x29c0>
   13948:	cmp	r6, #9
   1394c:	movne	r4, r3
   13950:	mov	r0, r4
   13954:	pop	{r4, r5, r6, pc}
   13958:	andeq	r8, r1, r8, lsl #12
   1395c:	andeq	r8, r1, r4, lsl r6
   13960:	andeq	r8, r1, ip, lsl #12
   13964:	andeq	r8, r1, r0, lsl r6
   13968:	andeq	r8, r1, r8, lsl r6
   1396c:	andeq	r8, r1, r4, lsl #12
   13970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13974:	sub	sp, sp, #124	; 0x7c
   13978:	ldr	ip, [pc, #3576]	; 14778 <__assert_fail@plt+0x37cc>
   1397c:	str	r3, [sp, #24]
   13980:	ldr	r3, [sp, #168]	; 0xa8
   13984:	ldr	ip, [ip]
   13988:	str	r3, [sp, #56]	; 0x38
   1398c:	ldr	r3, [sp, #172]	; 0xac
   13990:	ldr	r8, [sp, #160]	; 0xa0
   13994:	str	r3, [sp, #80]	; 0x50
   13998:	ldr	r3, [sp, #176]	; 0xb0
   1399c:	mov	fp, r0
   139a0:	str	r3, [sp, #76]	; 0x4c
   139a4:	mov	sl, r1
   139a8:	str	r2, [sp, #36]	; 0x24
   139ac:	str	ip, [sp, #116]	; 0x74
   139b0:	bl	10e38 <__ctype_get_mb_cur_max@plt>
   139b4:	ldr	r3, [sp, #164]	; 0xa4
   139b8:	ands	r4, r3, #2
   139bc:	movne	r3, #1
   139c0:	moveq	r3, #0
   139c4:	str	r3, [sp, #32]
   139c8:	str	r0, [sp, #64]	; 0x40
   139cc:	cmp	r8, #10
   139d0:	ldrls	pc, [pc, r8, lsl #2]
   139d4:	b	15184 <__assert_fail@plt+0x41d8>
   139d8:	andeq	r3, r1, ip, asr #27
   139dc:	andeq	r3, r1, r4, ror #28
   139e0:	andeq	r4, r1, r4, ror #8
   139e4:	andeq	r3, r1, r4, lsl #29
   139e8:	andeq	r3, r1, r8, lsr sp
   139ec:	andeq	r3, r1, r0, lsl #27
   139f0:	strdeq	r3, [r1], -ip
   139f4:	andeq	r3, r1, r4, lsr lr
   139f8:	andeq	r3, r1, r4, lsl #20
   139fc:	andeq	r3, r1, r4, lsl #20
   13a00:	andeq	r3, r1, r4, lsl #20
   13a04:	cmp	r8, #10
   13a08:	beq	13a2c <__assert_fail@plt+0x2a80>
   13a0c:	mov	r1, r8
   13a10:	ldr	r0, [pc, #3428]	; 1477c <__assert_fail@plt+0x37d0>
   13a14:	bl	13828 <__assert_fail@plt+0x287c>
   13a18:	mov	r1, r8
   13a1c:	str	r0, [sp, #80]	; 0x50
   13a20:	ldr	r0, [pc, #3420]	; 14784 <__assert_fail@plt+0x37d8>
   13a24:	bl	13828 <__assert_fail@plt+0x287c>
   13a28:	str	r0, [sp, #76]	; 0x4c
   13a2c:	cmp	r4, #0
   13a30:	movne	r4, #0
   13a34:	beq	14e44 <__assert_fail@plt+0x3e98>
   13a38:	ldr	r7, [sp, #76]	; 0x4c
   13a3c:	mov	r5, #0
   13a40:	mov	r6, #1
   13a44:	mov	r0, r7
   13a48:	str	r6, [sp, #40]	; 0x28
   13a4c:	str	r5, [sp, #68]	; 0x44
   13a50:	bl	10ed4 <strlen@plt>
   13a54:	str	r6, [sp, #28]
   13a58:	str	r5, [sp, #44]	; 0x2c
   13a5c:	str	r5, [sp, #72]	; 0x48
   13a60:	str	r7, [sp, #60]	; 0x3c
   13a64:	str	r0, [sp, #52]	; 0x34
   13a68:	str	r8, [sp, #160]	; 0xa0
   13a6c:	mov	r8, fp
   13a70:	ldr	fp, [sp, #160]	; 0xa0
   13a74:	mov	r9, #0
   13a78:	ldr	r3, [sp, #24]
   13a7c:	cmn	r3, #1
   13a80:	beq	13fe8 <__assert_fail@plt+0x303c>
   13a84:	ldr	r3, [sp, #24]
   13a88:	subs	r6, r3, r9
   13a8c:	movne	r6, #1
   13a90:	cmp	r6, #0
   13a94:	beq	14000 <__assert_fail@plt+0x3054>
   13a98:	ldr	r7, [sp, #28]
   13a9c:	ldr	r0, [sp, #36]	; 0x24
   13aa0:	cmp	fp, #2
   13aa4:	moveq	r7, #0
   13aa8:	andne	r7, r7, #1
   13aac:	add	r3, r0, r9
   13ab0:	cmp	r7, #0
   13ab4:	str	r3, [sp, #48]	; 0x30
   13ab8:	beq	144a4 <__assert_fail@plt+0x34f8>
   13abc:	ldr	r2, [sp, #52]	; 0x34
   13ac0:	cmp	r2, #0
   13ac4:	beq	14788 <__assert_fail@plt+0x37dc>
   13ac8:	ldr	r1, [sp, #24]
   13acc:	cmp	r2, #1
   13ad0:	mov	r3, r2
   13ad4:	movls	r3, #0
   13ad8:	movhi	r3, #1
   13adc:	cmn	r1, #1
   13ae0:	movne	r3, #0
   13ae4:	cmp	r3, #0
   13ae8:	add	r5, r9, r2
   13aec:	beq	13af8 <__assert_fail@plt+0x2b4c>
   13af0:	bl	10ed4 <strlen@plt>
   13af4:	str	r0, [sp, #24]
   13af8:	ldr	r3, [sp, #24]
   13afc:	cmp	r5, r3
   13b00:	bhi	14788 <__assert_fail@plt+0x37dc>
   13b04:	ldr	r2, [sp, #52]	; 0x34
   13b08:	ldr	r1, [sp, #60]	; 0x3c
   13b0c:	ldr	r0, [sp, #48]	; 0x30
   13b10:	bl	10dcc <memcmp@plt>
   13b14:	cmp	r0, #0
   13b18:	bne	14788 <__assert_fail@plt+0x37dc>
   13b1c:	ldr	r3, [sp, #32]
   13b20:	cmp	r3, #0
   13b24:	bne	15044 <__assert_fail@plt+0x4098>
   13b28:	ldr	r3, [sp, #48]	; 0x30
   13b2c:	ldrb	r5, [r3]
   13b30:	cmp	r5, #126	; 0x7e
   13b34:	ldrls	pc, [pc, r5, lsl #2]
   13b38:	b	14408 <__assert_fail@plt+0x345c>
   13b3c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b40:	andeq	r4, r1, r8, lsl #8
   13b44:	andeq	r4, r1, r8, lsl #8
   13b48:	andeq	r4, r1, r8, lsl #8
   13b4c:	andeq	r4, r1, r8, lsl #8
   13b50:	andeq	r4, r1, r8, lsl #8
   13b54:	andeq	r4, r1, r8, lsl #8
   13b58:	andeq	r4, r1, r0, asr #7
   13b5c:			; <UNDEFINED> instruction: 0x000143b0
   13b60:			; <UNDEFINED> instruction: 0x000142b0
   13b64:	andeq	r4, r1, r8, ror r2
   13b68:	ldrdeq	r4, [r1], -r0
   13b6c:			; <UNDEFINED> instruction: 0x000142b8
   13b70:	andeq	r4, r1, r8, ror #3
   13b74:	andeq	r4, r1, r8, lsl #8
   13b78:	andeq	r4, r1, r8, lsl #8
   13b7c:	andeq	r4, r1, r8, lsl #8
   13b80:	andeq	r4, r1, r8, lsl #8
   13b84:	andeq	r4, r1, r8, lsl #8
   13b88:	andeq	r4, r1, r8, lsl #8
   13b8c:	andeq	r4, r1, r8, lsl #8
   13b90:	andeq	r4, r1, r8, lsl #8
   13b94:	andeq	r4, r1, r8, lsl #8
   13b98:	andeq	r4, r1, r8, lsl #8
   13b9c:	andeq	r4, r1, r8, lsl #8
   13ba0:	andeq	r4, r1, r8, lsl #8
   13ba4:	andeq	r4, r1, r8, lsl #8
   13ba8:	andeq	r4, r1, r8, lsl #8
   13bac:	andeq	r4, r1, r8, lsl #8
   13bb0:	andeq	r4, r1, r8, lsl #8
   13bb4:	andeq	r4, r1, r8, lsl #8
   13bb8:	andeq	r4, r1, r8, lsl #8
   13bbc:	andeq	r4, r1, r8, asr #7
   13bc0:	ldrdeq	r4, [r1], -ip
   13bc4:	ldrdeq	r4, [r1], -ip
   13bc8:	andeq	r4, r1, r0, ror #7
   13bcc:	ldrdeq	r4, [r1], -ip
   13bd0:	strdeq	r4, [r1], -ip
   13bd4:	ldrdeq	r4, [r1], -ip
   13bd8:	andeq	r4, r1, ip, lsl r1
   13bdc:	ldrdeq	r4, [r1], -ip
   13be0:	ldrdeq	r4, [r1], -ip
   13be4:	ldrdeq	r4, [r1], -ip
   13be8:	strdeq	r4, [r1], -ip
   13bec:	strdeq	r4, [r1], -ip
   13bf0:	strdeq	r4, [r1], -ip
   13bf4:	strdeq	r4, [r1], -ip
   13bf8:	strdeq	r4, [r1], -ip
   13bfc:	strdeq	r4, [r1], -ip
   13c00:	strdeq	r4, [r1], -ip
   13c04:	strdeq	r4, [r1], -ip
   13c08:	strdeq	r4, [r1], -ip
   13c0c:	strdeq	r4, [r1], -ip
   13c10:	strdeq	r4, [r1], -ip
   13c14:	strdeq	r4, [r1], -ip
   13c18:	strdeq	r4, [r1], -ip
   13c1c:	strdeq	r4, [r1], -ip
   13c20:	strdeq	r4, [r1], -ip
   13c24:	strdeq	r4, [r1], -ip
   13c28:	ldrdeq	r4, [r1], -ip
   13c2c:	ldrdeq	r4, [r1], -ip
   13c30:	ldrdeq	r4, [r1], -ip
   13c34:	ldrdeq	r4, [r1], -ip
   13c38:	strdeq	r4, [r1], -r0
   13c3c:	andeq	r4, r1, r8, lsl #8
   13c40:	strdeq	r4, [r1], -ip
   13c44:	strdeq	r4, [r1], -ip
   13c48:	strdeq	r4, [r1], -ip
   13c4c:	strdeq	r4, [r1], -ip
   13c50:	strdeq	r4, [r1], -ip
   13c54:	strdeq	r4, [r1], -ip
   13c58:	strdeq	r4, [r1], -ip
   13c5c:	strdeq	r4, [r1], -ip
   13c60:	strdeq	r4, [r1], -ip
   13c64:	strdeq	r4, [r1], -ip
   13c68:	strdeq	r4, [r1], -ip
   13c6c:	strdeq	r4, [r1], -ip
   13c70:	strdeq	r4, [r1], -ip
   13c74:	strdeq	r4, [r1], -ip
   13c78:	strdeq	r4, [r1], -ip
   13c7c:	strdeq	r4, [r1], -ip
   13c80:	strdeq	r4, [r1], -ip
   13c84:	strdeq	r4, [r1], -ip
   13c88:	strdeq	r4, [r1], -ip
   13c8c:	strdeq	r4, [r1], -ip
   13c90:	strdeq	r4, [r1], -ip
   13c94:	strdeq	r4, [r1], -ip
   13c98:	strdeq	r4, [r1], -ip
   13c9c:	strdeq	r4, [r1], -ip
   13ca0:	strdeq	r4, [r1], -ip
   13ca4:	strdeq	r4, [r1], -ip
   13ca8:	ldrdeq	r4, [r1], -ip
   13cac:	andeq	r4, r1, r8, lsr #1
   13cb0:	strdeq	r4, [r1], -ip
   13cb4:	ldrdeq	r4, [r1], -ip
   13cb8:	strdeq	r4, [r1], -ip
   13cbc:	ldrdeq	r4, [r1], -ip
   13cc0:	strdeq	r4, [r1], -ip
   13cc4:	strdeq	r4, [r1], -ip
   13cc8:	strdeq	r4, [r1], -ip
   13ccc:	strdeq	r4, [r1], -ip
   13cd0:	strdeq	r4, [r1], -ip
   13cd4:	strdeq	r4, [r1], -ip
   13cd8:	strdeq	r4, [r1], -ip
   13cdc:	strdeq	r4, [r1], -ip
   13ce0:	strdeq	r4, [r1], -ip
   13ce4:	strdeq	r4, [r1], -ip
   13ce8:	strdeq	r4, [r1], -ip
   13cec:	strdeq	r4, [r1], -ip
   13cf0:	strdeq	r4, [r1], -ip
   13cf4:	strdeq	r4, [r1], -ip
   13cf8:	strdeq	r4, [r1], -ip
   13cfc:	strdeq	r4, [r1], -ip
   13d00:	strdeq	r4, [r1], -ip
   13d04:	strdeq	r4, [r1], -ip
   13d08:	strdeq	r4, [r1], -ip
   13d0c:	strdeq	r4, [r1], -ip
   13d10:	strdeq	r4, [r1], -ip
   13d14:	strdeq	r4, [r1], -ip
   13d18:	strdeq	r4, [r1], -ip
   13d1c:	strdeq	r4, [r1], -ip
   13d20:	strdeq	r4, [r1], -ip
   13d24:	strdeq	r4, [r1], -ip
   13d28:	andeq	r3, r1, r0, asr #29
   13d2c:	ldrdeq	r4, [r1], -ip
   13d30:	andeq	r3, r1, r0, asr #29
   13d34:	andeq	r4, r1, r0, ror #7
   13d38:	cmp	r4, #0
   13d3c:	moveq	r3, #1
   13d40:	streq	r3, [sp, #28]
   13d44:	beq	14470 <__assert_fail@plt+0x34c4>
   13d48:	mov	r3, #0
   13d4c:	mov	r4, r3
   13d50:	mov	r2, #1
   13d54:	str	r2, [sp, #40]	; 0x28
   13d58:	str	r3, [sp, #68]	; 0x44
   13d5c:	str	r2, [sp, #32]
   13d60:	str	r2, [sp, #52]	; 0x34
   13d64:	ldr	r3, [pc, #2584]	; 14784 <__assert_fail@plt+0x37d8>
   13d68:	str	r4, [sp, #44]	; 0x2c
   13d6c:	str	r4, [sp, #72]	; 0x48
   13d70:	str	r4, [sp, #28]
   13d74:	str	r3, [sp, #60]	; 0x3c
   13d78:	mov	r8, #2
   13d7c:	b	13a68 <__assert_fail@plt+0x2abc>
   13d80:	cmp	r4, #0
   13d84:	bne	15010 <__assert_fail@plt+0x4064>
   13d88:	cmp	sl, #0
   13d8c:	beq	14dd0 <__assert_fail@plt+0x3e24>
   13d90:	mov	r3, #34	; 0x22
   13d94:	strb	r3, [fp]
   13d98:	ldr	r3, [pc, #2528]	; 14780 <__assert_fail@plt+0x37d4>
   13d9c:	mov	r1, r4
   13da0:	mov	r2, #1
   13da4:	str	r4, [sp, #68]	; 0x44
   13da8:	str	r2, [sp, #40]	; 0x28
   13dac:	mov	r4, r2
   13db0:	str	r1, [sp, #44]	; 0x2c
   13db4:	str	r1, [sp, #72]	; 0x48
   13db8:	str	r1, [sp, #32]
   13dbc:	str	r2, [sp, #28]
   13dc0:	str	r2, [sp, #52]	; 0x34
   13dc4:	str	r3, [sp, #60]	; 0x3c
   13dc8:	b	13a68 <__assert_fail@plt+0x2abc>
   13dcc:	mov	r3, #0
   13dd0:	str	r3, [sp, #68]	; 0x44
   13dd4:	str	r3, [sp, #44]	; 0x2c
   13dd8:	str	r3, [sp, #32]
   13ddc:	str	r3, [sp, #28]
   13de0:	str	r3, [sp, #60]	; 0x3c
   13de4:	mov	r3, #1
   13de8:	str	r8, [sp, #72]	; 0x48
   13dec:	str	r8, [sp, #52]	; 0x34
   13df0:	mov	r4, r8
   13df4:	str	r3, [sp, #40]	; 0x28
   13df8:	b	13a68 <__assert_fail@plt+0x2abc>
   13dfc:	mov	r3, #1
   13e00:	str	r3, [sp, #40]	; 0x28
   13e04:	str	r3, [sp, #32]
   13e08:	str	r3, [sp, #28]
   13e0c:	str	r3, [sp, #52]	; 0x34
   13e10:	ldr	r3, [pc, #2408]	; 14780 <__assert_fail@plt+0x37d4>
   13e14:	mov	r2, #0
   13e18:	mov	r4, r2
   13e1c:	str	r2, [sp, #68]	; 0x44
   13e20:	str	r2, [sp, #44]	; 0x2c
   13e24:	str	r2, [sp, #72]	; 0x48
   13e28:	str	r3, [sp, #60]	; 0x3c
   13e2c:	mov	r8, #5
   13e30:	b	13a68 <__assert_fail@plt+0x2abc>
   13e34:	mov	r3, #0
   13e38:	mov	r2, #1
   13e3c:	str	r2, [sp, #40]	; 0x28
   13e40:	mov	r4, r3
   13e44:	str	r3, [sp, #68]	; 0x44
   13e48:	str	r2, [sp, #28]
   13e4c:	str	r3, [sp, #44]	; 0x2c
   13e50:	str	r3, [sp, #72]	; 0x48
   13e54:	str	r3, [sp, #32]
   13e58:	str	r3, [sp, #52]	; 0x34
   13e5c:	str	r3, [sp, #60]	; 0x3c
   13e60:	b	13a68 <__assert_fail@plt+0x2abc>
   13e64:	mov	r2, #1
   13e68:	mov	r3, #0
   13e6c:	str	r2, [sp, #40]	; 0x28
   13e70:	mov	r4, r3
   13e74:	str	r3, [sp, #68]	; 0x44
   13e78:	str	r8, [sp, #52]	; 0x34
   13e7c:	str	r2, [sp, #32]
   13e80:	b	13d64 <__assert_fail@plt+0x2db8>
   13e84:	mov	r3, #1
   13e88:	str	r3, [sp, #40]	; 0x28
   13e8c:	str	r3, [sp, #32]
   13e90:	str	r3, [sp, #28]
   13e94:	str	r3, [sp, #52]	; 0x34
   13e98:	ldr	r3, [pc, #2276]	; 14784 <__assert_fail@plt+0x37d8>
   13e9c:	mov	r2, #0
   13ea0:	mov	r4, r2
   13ea4:	str	r2, [sp, #68]	; 0x44
   13ea8:	str	r2, [sp, #44]	; 0x2c
   13eac:	str	r2, [sp, #72]	; 0x48
   13eb0:	str	r3, [sp, #60]	; 0x3c
   13eb4:	mov	r8, #2
   13eb8:	b	13a68 <__assert_fail@plt+0x2abc>
   13ebc:	mov	r7, #0
   13ec0:	ldr	r3, [sp, #24]
   13ec4:	cmn	r3, #1
   13ec8:	beq	14a04 <__assert_fail@plt+0x3a58>
   13ecc:	ldr	r3, [sp, #24]
   13ed0:	subs	r3, r3, #1
   13ed4:	movne	r3, #1
   13ed8:	cmp	r3, #0
   13edc:	sub	r2, fp, #2
   13ee0:	clz	r2, r2
   13ee4:	lsr	r2, r2, #5
   13ee8:	bne	140e4 <__assert_fail@plt+0x3138>
   13eec:	cmp	r9, #0
   13ef0:	bne	140e4 <__assert_fail@plt+0x3138>
   13ef4:	ldr	r3, [sp, #32]
   13ef8:	tst	r3, r2
   13efc:	bne	14204 <__assert_fail@plt+0x3258>
   13f00:	ldr	r3, [sp, #28]
   13f04:	eor	r3, r3, #1
   13f08:	orr	r3, r2, r3
   13f0c:	ldr	r2, [sp, #32]
   13f10:	eor	r3, r3, #1
   13f14:	orrs	r3, r2, r3
   13f18:	beq	13f48 <__assert_fail@plt+0x2f9c>
   13f1c:	mov	r3, #0
   13f20:	ldr	r1, [sp, #56]	; 0x38
   13f24:	cmp	r1, #0
   13f28:	beq	13f48 <__assert_fail@plt+0x2f9c>
   13f2c:	lsr	r2, r5, #5
   13f30:	and	r0, r5, #31
   13f34:	uxtb	r2, r2
   13f38:	ldr	r1, [r1, r2, lsl #2]
   13f3c:	lsr	r2, r1, r0
   13f40:	tst	r2, #1
   13f44:	bne	13f50 <__assert_fail@plt+0x2fa4>
   13f48:	cmp	r7, #0
   13f4c:	beq	141a0 <__assert_fail@plt+0x31f4>
   13f50:	sub	r2, fp, #2
   13f54:	clz	r2, r2
   13f58:	lsr	r2, r2, #5
   13f5c:	ldr	r3, [sp, #32]
   13f60:	cmp	r3, #0
   13f64:	bne	14290 <__assert_fail@plt+0x32e4>
   13f68:	ldr	r3, [sp, #44]	; 0x2c
   13f6c:	eor	r3, r3, #1
   13f70:	ands	r3, r2, r3
   13f74:	beq	13fac <__assert_fail@plt+0x3000>
   13f78:	cmp	sl, r4
   13f7c:	movhi	r2, #39	; 0x27
   13f80:	strbhi	r2, [r8, r4]
   13f84:	add	r2, r4, #1
   13f88:	cmp	r2, sl
   13f8c:	movcc	r1, #36	; 0x24
   13f90:	strbcc	r1, [r8, r2]
   13f94:	add	r2, r4, #2
   13f98:	cmp	r2, sl
   13f9c:	add	r4, r4, #3
   13fa0:	movcc	r1, #39	; 0x27
   13fa4:	strbcc	r1, [r8, r2]
   13fa8:	str	r3, [sp, #44]	; 0x2c
   13fac:	cmp	r4, sl
   13fb0:	movcc	r3, #92	; 0x5c
   13fb4:	strbcc	r3, [r8, r4]
   13fb8:	add	r9, r9, #1
   13fbc:	add	r4, r4, #1
   13fc0:	cmp	r4, sl
   13fc4:	ldr	r3, [sp, #40]	; 0x28
   13fc8:	strbcc	r5, [r8, r4]
   13fcc:	cmp	r6, #0
   13fd0:	moveq	r3, #0
   13fd4:	str	r3, [sp, #40]	; 0x28
   13fd8:	ldr	r3, [sp, #24]
   13fdc:	add	r4, r4, #1
   13fe0:	cmn	r3, #1
   13fe4:	bne	13a84 <__assert_fail@plt+0x2ad8>
   13fe8:	ldr	r3, [sp, #36]	; 0x24
   13fec:	ldrb	r6, [r3, r9]
   13ff0:	adds	r6, r6, #0
   13ff4:	movne	r6, #1
   13ff8:	cmp	r6, #0
   13ffc:	bne	13a98 <__assert_fail@plt+0x2aec>
   14000:	str	fp, [sp, #160]	; 0xa0
   14004:	mov	fp, r8
   14008:	ldr	r8, [sp, #160]	; 0xa0
   1400c:	ldr	r1, [sp, #32]
   14010:	cmp	r4, #0
   14014:	sub	r2, r8, #2
   14018:	clz	r2, r2
   1401c:	lsr	r2, r2, #5
   14020:	andeq	r3, r2, r1
   14024:	movne	r3, #0
   14028:	cmp	r3, #0
   1402c:	bne	15118 <__assert_fail@plt+0x416c>
   14030:	eor	r3, r1, #1
   14034:	ands	r2, r2, r3
   14038:	beq	15054 <__assert_fail@plt+0x40a8>
   1403c:	ldr	r3, [sp, #68]	; 0x44
   14040:	cmp	r3, #0
   14044:	beq	15058 <__assert_fail@plt+0x40ac>
   14048:	ldr	r3, [sp, #40]	; 0x28
   1404c:	cmp	r3, #0
   14050:	bne	150d4 <__assert_fail@plt+0x4128>
   14054:	ldr	r3, [sp, #72]	; 0x48
   14058:	adds	r3, r3, #0
   1405c:	movne	r3, #1
   14060:	cmp	sl, #0
   14064:	movne	r3, #0
   14068:	cmp	r3, #0
   1406c:	ldreq	r2, [sp, #68]	; 0x44
   14070:	beq	15058 <__assert_fail@plt+0x40ac>
   14074:	ldr	sl, [sp, #72]	; 0x48
   14078:	str	r3, [sp, #68]	; 0x44
   1407c:	ldr	r3, [pc, #1792]	; 14784 <__assert_fail@plt+0x37d8>
   14080:	mov	r2, #39	; 0x27
   14084:	mov	r4, #1
   14088:	str	r3, [sp, #60]	; 0x3c
   1408c:	mov	r3, #0
   14090:	strb	r2, [fp]
   14094:	str	r4, [sp, #52]	; 0x34
   14098:	mov	r8, #2
   1409c:	str	r3, [sp, #32]
   140a0:	b	13a68 <__assert_fail@plt+0x2abc>
   140a4:	mov	r7, #0
   140a8:	cmp	fp, #2
   140ac:	beq	149e4 <__assert_fail@plt+0x3a38>
   140b0:	ldr	r3, [sp, #52]	; 0x34
   140b4:	ldr	r2, [sp, #28]
   140b8:	ldr	r1, [sp, #32]
   140bc:	cmp	r3, #0
   140c0:	andne	r2, r2, r1
   140c4:	moveq	r2, #0
   140c8:	cmp	r2, #0
   140cc:	moveq	r5, #92	; 0x5c
   140d0:	moveq	r3, r5
   140d4:	bne	149f0 <__assert_fail@plt+0x3a44>
   140d8:	ldr	r1, [sp, #28]
   140dc:	cmp	r1, #0
   140e0:	bne	15160 <__assert_fail@plt+0x41b4>
   140e4:	mov	r6, #0
   140e8:	b	13f00 <__assert_fail@plt+0x2f54>
   140ec:	mov	r7, #0
   140f0:	cmp	fp, #2
   140f4:	beq	14a54 <__assert_fail@plt+0x3aa8>
   140f8:	cmp	fp, #5
   140fc:	beq	14a18 <__assert_fail@plt+0x3a6c>
   14100:	sub	r2, fp, #2
   14104:	mov	r6, #0
   14108:	clz	r2, r2
   1410c:	mov	r5, #63	; 0x3f
   14110:	lsr	r2, r2, #5
   14114:	b	13f00 <__assert_fail@plt+0x2f54>
   14118:	mov	r7, #0
   1411c:	cmp	fp, #2
   14120:	strne	r6, [sp, #68]	; 0x44
   14124:	movne	r2, #0
   14128:	movne	r5, #39	; 0x27
   1412c:	bne	13f00 <__assert_fail@plt+0x2f54>
   14130:	ldr	r3, [sp, #32]
   14134:	cmp	r3, #0
   14138:	bne	14e34 <__assert_fail@plt+0x3e88>
   1413c:	cmp	sl, #0
   14140:	ldr	r3, [sp, #72]	; 0x48
   14144:	clz	r3, r3
   14148:	lsr	r3, r3, #5
   1414c:	moveq	r3, #0
   14150:	cmp	r3, #0
   14154:	bne	14d68 <__assert_fail@plt+0x3dbc>
   14158:	cmp	sl, r4
   1415c:	movhi	r3, #39	; 0x27
   14160:	strbhi	r3, [r8, r4]
   14164:	add	r3, r4, #1
   14168:	cmp	sl, r3
   1416c:	movhi	r2, #92	; 0x5c
   14170:	strbhi	r2, [r8, r3]
   14174:	add	r3, r4, #2
   14178:	cmp	sl, r3
   1417c:	movhi	r2, #39	; 0x27
   14180:	strbhi	r2, [r8, r3]
   14184:	mov	r3, #0
   14188:	cmp	r7, #0
   1418c:	add	r4, r4, #3
   14190:	str	r3, [sp, #44]	; 0x2c
   14194:	str	r6, [sp, #68]	; 0x44
   14198:	mov	r5, #39	; 0x27
   1419c:	bne	13f50 <__assert_fail@plt+0x2fa4>
   141a0:	ldr	r2, [sp, #44]	; 0x2c
   141a4:	eor	r3, r3, #1
   141a8:	and	r3, r3, r2
   141ac:	add	r9, r9, #1
   141b0:	uxtb	r3, r3
   141b4:	cmp	r3, #0
   141b8:	beq	13fc0 <__assert_fail@plt+0x3014>
   141bc:	cmp	sl, r4
   141c0:	movhi	r3, #39	; 0x27
   141c4:	strbhi	r3, [r8, r4]
   141c8:	add	r3, r4, #1
   141cc:	cmp	sl, r3
   141d0:	movhi	r2, #39	; 0x27
   141d4:	strbhi	r2, [r8, r3]
   141d8:	mov	r3, #0
   141dc:	add	r4, r4, #2
   141e0:	str	r3, [sp, #44]	; 0x2c
   141e4:	b	13fc0 <__assert_fail@plt+0x3014>
   141e8:	mov	r3, #114	; 0x72
   141ec:	ldr	r1, [sp, #32]
   141f0:	sub	r2, fp, #2
   141f4:	clz	r2, r2
   141f8:	lsr	r2, r2, #5
   141fc:	tst	r2, r1
   14200:	beq	140d8 <__assert_fail@plt+0x312c>
   14204:	mov	fp, r8
   14208:	mov	r8, #2
   1420c:	ldr	r3, [sp, #28]
   14210:	cmp	r3, #0
   14214:	movne	r8, #4
   14218:	ldr	r3, [sp, #164]	; 0xa4
   1421c:	mov	ip, #0
   14220:	bic	r3, r3, #2
   14224:	str	r3, [sp, #4]
   14228:	ldr	r3, [sp, #76]	; 0x4c
   1422c:	str	r8, [sp]
   14230:	str	r3, [sp, #16]
   14234:	ldr	r3, [sp, #80]	; 0x50
   14238:	ldr	r2, [sp, #36]	; 0x24
   1423c:	str	r3, [sp, #12]
   14240:	mov	r1, sl
   14244:	ldr	r3, [sp, #24]
   14248:	mov	r0, fp
   1424c:	str	ip, [sp, #8]
   14250:	bl	13970 <__assert_fail@plt+0x29c4>
   14254:	mov	r4, r0
   14258:	ldr	r3, [pc, #1304]	; 14778 <__assert_fail@plt+0x37cc>
   1425c:	ldr	r2, [sp, #116]	; 0x74
   14260:	mov	r0, r4
   14264:	ldr	r3, [r3]
   14268:	cmp	r2, r3
   1426c:	bne	1515c <__assert_fail@plt+0x41b0>
   14270:	add	sp, sp, #124	; 0x7c
   14274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14278:	mov	r5, #110	; 0x6e
   1427c:	ldr	r3, [sp, #32]
   14280:	mov	r2, #0
   14284:	cmp	r3, #0
   14288:	mov	r6, r2
   1428c:	beq	13f68 <__assert_fail@plt+0x2fbc>
   14290:	str	fp, [sp, #160]	; 0xa0
   14294:	mov	fp, r8
   14298:	ldr	r8, [sp, #160]	; 0xa0
   1429c:	mov	r3, r2
   142a0:	ldr	r2, [sp, #28]
   142a4:	and	r2, r2, r3
   142a8:	str	r2, [sp, #28]
   142ac:	b	1420c <__assert_fail@plt+0x3260>
   142b0:	mov	r5, #116	; 0x74
   142b4:	b	1427c <__assert_fail@plt+0x32d0>
   142b8:	mov	r5, #102	; 0x66
   142bc:	ldr	r3, [sp, #32]
   142c0:	cmp	r3, #0
   142c4:	bne	14e70 <__assert_fail@plt+0x3ec4>
   142c8:	mov	r6, #0
   142cc:	b	13fac <__assert_fail@plt+0x3000>
   142d0:	mov	r5, #118	; 0x76
   142d4:	b	142bc <__assert_fail@plt+0x3310>
   142d8:	mov	r7, #0
   142dc:	mov	r6, #0
   142e0:	b	13f1c <__assert_fail@plt+0x2f70>
   142e4:	ldr	r3, [sp, #32]
   142e8:	cmp	r3, #0
   142ec:	bne	150b4 <__assert_fail@plt+0x4108>
   142f0:	mov	r7, r3
   142f4:	ldr	r3, [sp, #44]	; 0x2c
   142f8:	sub	r2, fp, #2
   142fc:	eor	r3, r3, #1
   14300:	clz	r2, r2
   14304:	lsr	r2, r2, #5
   14308:	ands	r3, r2, r3
   1430c:	beq	14d54 <__assert_fail@plt+0x3da8>
   14310:	cmp	sl, r4
   14314:	movhi	r1, #39	; 0x27
   14318:	strbhi	r1, [r8, r4]
   1431c:	add	r1, r4, #1
   14320:	cmp	sl, r1
   14324:	movhi	r0, #36	; 0x24
   14328:	strbhi	r0, [r8, r1]
   1432c:	add	r1, r4, #2
   14330:	cmp	sl, r1
   14334:	movhi	r0, #39	; 0x27
   14338:	strbhi	r0, [r8, r1]
   1433c:	add	r1, r4, #3
   14340:	cmp	sl, r1
   14344:	bls	14db4 <__assert_fail@plt+0x3e08>
   14348:	mov	r4, r1
   1434c:	mov	r1, #92	; 0x5c
   14350:	strb	r1, [r8, r4]
   14354:	mov	r1, r4
   14358:	str	r3, [sp, #44]	; 0x2c
   1435c:	cmp	fp, #2
   14360:	add	r4, r4, #1
   14364:	beq	14dfc <__assert_fail@plt+0x3e50>
   14368:	ldr	r0, [sp, #24]
   1436c:	add	r3, r9, #1
   14370:	cmp	r3, r0
   14374:	bcs	1438c <__assert_fail@plt+0x33e0>
   14378:	ldr	r0, [sp, #36]	; 0x24
   1437c:	ldrb	r3, [r0, r3]
   14380:	sub	r3, r3, #48	; 0x30
   14384:	cmp	r3, #9
   14388:	bls	14e0c <__assert_fail@plt+0x3e60>
   1438c:	mov	r5, #48	; 0x30
   14390:	ldr	r3, [sp, #28]
   14394:	eor	r3, r3, #1
   14398:	orrs	r2, r2, r3
   1439c:	mov	r3, r6
   143a0:	moveq	r6, r2
   143a4:	beq	13f20 <__assert_fail@plt+0x2f74>
   143a8:	mov	r6, #0
   143ac:	b	13f48 <__assert_fail@plt+0x2f9c>
   143b0:	mov	r2, #0
   143b4:	mov	r6, r2
   143b8:	mov	r5, #98	; 0x62
   143bc:	b	13f68 <__assert_fail@plt+0x2fbc>
   143c0:	mov	r5, #97	; 0x61
   143c4:	b	142c8 <__assert_fail@plt+0x331c>
   143c8:	mov	r3, r7
   143cc:	mov	r6, r7
   143d0:	mov	r2, #0
   143d4:	mov	r7, r3
   143d8:	mov	r5, #32
   143dc:	b	13f00 <__assert_fail@plt+0x2f54>
   143e0:	cmp	r9, #0
   143e4:	mov	r3, r7
   143e8:	bne	149b0 <__assert_fail@plt+0x3a04>
   143ec:	mov	r6, r7
   143f0:	mov	r2, r9
   143f4:	mov	r7, r3
   143f8:	b	13f00 <__assert_fail@plt+0x2f54>
   143fc:	mov	r6, r7
   14400:	b	13f1c <__assert_fail@plt+0x2f70>
   14404:	mov	r7, #0
   14408:	ldr	r3, [sp, #64]	; 0x40
   1440c:	cmp	r3, #1
   14410:	bne	14a6c <__assert_fail@plt+0x3ac0>
   14414:	bl	10ebc <__ctype_b_loc@plt>
   14418:	ldr	r2, [sp, #64]	; 0x40
   1441c:	sxth	r3, r5
   14420:	mov	ip, r2
   14424:	lsl	r3, r3, #1
   14428:	ldr	r2, [r0]
   1442c:	ldrh	r3, [r2, r3]
   14430:	and	r3, r3, #16384	; 0x4000
   14434:	cmp	r3, #0
   14438:	ldr	r3, [sp, #28]
   1443c:	movne	r6, #1
   14440:	moveq	r6, #0
   14444:	movne	r2, #0
   14448:	andeq	r2, r3, #1
   1444c:	cmp	r2, #0
   14450:	bne	14d7c <__assert_fail@plt+0x3dd0>
   14454:	sub	r2, fp, #2
   14458:	clz	r2, r2
   1445c:	lsr	r2, r2, #5
   14460:	b	13f00 <__assert_fail@plt+0x2f54>
   14464:	cmp	r4, #0
   14468:	bne	15128 <__assert_fail@plt+0x417c>
   1446c:	str	r4, [sp, #28]
   14470:	cmp	sl, #0
   14474:	bne	1516c <__assert_fail@plt+0x41c0>
   14478:	ldr	r3, [pc, #772]	; 14784 <__assert_fail@plt+0x37d8>
   1447c:	mov	r4, #1
   14480:	str	r4, [sp, #40]	; 0x28
   14484:	str	r3, [sp, #60]	; 0x3c
   14488:	str	r4, [sp, #52]	; 0x34
   1448c:	str	sl, [sp, #72]	; 0x48
   14490:	str	sl, [sp, #68]	; 0x44
   14494:	str	sl, [sp, #44]	; 0x2c
   14498:	str	sl, [sp, #32]
   1449c:	mov	r8, #2
   144a0:	b	13a68 <__assert_fail@plt+0x2abc>
   144a4:	ldr	r3, [sp, #36]	; 0x24
   144a8:	ldrb	r5, [r3, r9]
   144ac:	cmp	r5, #126	; 0x7e
   144b0:	ldrls	pc, [pc, r5, lsl #2]
   144b4:	b	14408 <__assert_fail@plt+0x345c>
   144b8:	andeq	r4, r1, ip, ror #13
   144bc:	andeq	r4, r1, r8, lsl #8
   144c0:	andeq	r4, r1, r8, lsl #8
   144c4:	andeq	r4, r1, r8, lsl #8
   144c8:	andeq	r4, r1, r8, lsl #8
   144cc:	andeq	r4, r1, r8, lsl #8
   144d0:	andeq	r4, r1, r8, lsl #8
   144d4:	ldrdeq	r4, [r1], -r8
   144d8:	andeq	r4, r1, r4, asr #13
   144dc:			; <UNDEFINED> instruction: 0x000146bc
   144e0:			; <UNDEFINED> instruction: 0x000146b4
   144e4:	andeq	r4, r1, r4, ror #14
   144e8:	andeq	r4, r1, r0, asr r7
   144ec:	andeq	r4, r1, r8, ror #3
   144f0:	andeq	r4, r1, r8, lsl #8
   144f4:	andeq	r4, r1, r8, lsl #8
   144f8:	andeq	r4, r1, r8, lsl #8
   144fc:	andeq	r4, r1, r8, lsl #8
   14500:	andeq	r4, r1, r8, lsl #8
   14504:	andeq	r4, r1, r8, lsl #8
   14508:	andeq	r4, r1, r8, lsl #8
   1450c:	andeq	r4, r1, r8, lsl #8
   14510:	andeq	r4, r1, r8, lsl #8
   14514:	andeq	r4, r1, r8, lsl #8
   14518:	andeq	r4, r1, r8, lsl #8
   1451c:	andeq	r4, r1, r8, lsl #8
   14520:	andeq	r4, r1, r8, lsl #8
   14524:	andeq	r4, r1, r8, lsl #8
   14528:	andeq	r4, r1, r8, lsl #8
   1452c:	andeq	r4, r1, r8, lsl #8
   14530:	andeq	r4, r1, r8, lsl #8
   14534:	andeq	r4, r1, r8, lsl #8
   14538:	andeq	r4, r1, r0, asr #14
   1453c:	andeq	r4, r1, ip, lsr #14
   14540:	andeq	r4, r1, ip, lsr #14
   14544:	andeq	r4, r1, ip, lsl r7
   14548:	andeq	r4, r1, ip, lsr #14
   1454c:	andeq	r4, r1, r4, asr r4
   14550:	andeq	r4, r1, ip, lsr #14
   14554:	andeq	r4, r1, ip, lsl r1
   14558:	andeq	r4, r1, ip, lsr #14
   1455c:	andeq	r4, r1, ip, lsr #14
   14560:	andeq	r4, r1, ip, lsr #14
   14564:	andeq	r4, r1, r4, asr r4
   14568:	andeq	r4, r1, r4, asr r4
   1456c:	andeq	r4, r1, r4, asr r4
   14570:	andeq	r4, r1, r4, asr r4
   14574:	andeq	r4, r1, r4, asr r4
   14578:	andeq	r4, r1, r4, asr r4
   1457c:	andeq	r4, r1, r4, asr r4
   14580:	andeq	r4, r1, r4, asr r4
   14584:	andeq	r4, r1, r4, asr r4
   14588:	andeq	r4, r1, r4, asr r4
   1458c:	andeq	r4, r1, r4, asr r4
   14590:	andeq	r4, r1, r4, asr r4
   14594:	andeq	r4, r1, r4, asr r4
   14598:	andeq	r4, r1, r4, asr r4
   1459c:	andeq	r4, r1, r4, asr r4
   145a0:	andeq	r4, r1, r4, asr r4
   145a4:	andeq	r4, r1, ip, lsr #14
   145a8:	andeq	r4, r1, ip, lsr #14
   145ac:	andeq	r4, r1, ip, lsr #14
   145b0:	andeq	r4, r1, ip, lsr #14
   145b4:	strdeq	r4, [r1], -r0
   145b8:	andeq	r4, r1, r8, lsl #8
   145bc:	andeq	r4, r1, r4, asr r4
   145c0:	andeq	r4, r1, r4, asr r4
   145c4:	andeq	r4, r1, r4, asr r4
   145c8:	andeq	r4, r1, r4, asr r4
   145cc:	andeq	r4, r1, r4, asr r4
   145d0:	andeq	r4, r1, r4, asr r4
   145d4:	andeq	r4, r1, r4, asr r4
   145d8:	andeq	r4, r1, r4, asr r4
   145dc:	andeq	r4, r1, r4, asr r4
   145e0:	andeq	r4, r1, r4, asr r4
   145e4:	andeq	r4, r1, r4, asr r4
   145e8:	andeq	r4, r1, r4, asr r4
   145ec:	andeq	r4, r1, r4, asr r4
   145f0:	andeq	r4, r1, r4, asr r4
   145f4:	andeq	r4, r1, r4, asr r4
   145f8:	andeq	r4, r1, r4, asr r4
   145fc:	andeq	r4, r1, r4, asr r4
   14600:	andeq	r4, r1, r4, asr r4
   14604:	andeq	r4, r1, r4, asr r4
   14608:	andeq	r4, r1, r4, asr r4
   1460c:	andeq	r4, r1, r4, asr r4
   14610:	andeq	r4, r1, r4, asr r4
   14614:	andeq	r4, r1, r4, asr r4
   14618:	andeq	r4, r1, r4, asr r4
   1461c:	andeq	r4, r1, r4, asr r4
   14620:	andeq	r4, r1, r4, asr r4
   14624:	andeq	r4, r1, ip, lsr #14
   14628:	andeq	r4, r1, r8, lsr #1
   1462c:	andeq	r4, r1, r4, asr r4
   14630:	andeq	r4, r1, ip, lsr #14
   14634:	andeq	r4, r1, r4, asr r4
   14638:	andeq	r4, r1, ip, lsr #14
   1463c:	andeq	r4, r1, r4, asr r4
   14640:	andeq	r4, r1, r4, asr r4
   14644:	andeq	r4, r1, r4, asr r4
   14648:	andeq	r4, r1, r4, asr r4
   1464c:	andeq	r4, r1, r4, asr r4
   14650:	andeq	r4, r1, r4, asr r4
   14654:	andeq	r4, r1, r4, asr r4
   14658:	andeq	r4, r1, r4, asr r4
   1465c:	andeq	r4, r1, r4, asr r4
   14660:	andeq	r4, r1, r4, asr r4
   14664:	andeq	r4, r1, r4, asr r4
   14668:	andeq	r4, r1, r4, asr r4
   1466c:	andeq	r4, r1, r4, asr r4
   14670:	andeq	r4, r1, r4, asr r4
   14674:	andeq	r4, r1, r4, asr r4
   14678:	andeq	r4, r1, r4, asr r4
   1467c:	andeq	r4, r1, r4, asr r4
   14680:	andeq	r4, r1, r4, asr r4
   14684:	andeq	r4, r1, r4, asr r4
   14688:	andeq	r4, r1, r4, asr r4
   1468c:	andeq	r4, r1, r4, asr r4
   14690:	andeq	r4, r1, r4, asr r4
   14694:	andeq	r4, r1, r4, asr r4
   14698:	andeq	r4, r1, r4, asr r4
   1469c:	andeq	r4, r1, r4, asr r4
   146a0:	andeq	r4, r1, r4, asr r4
   146a4:	andeq	r3, r1, r0, asr #29
   146a8:	andeq	r4, r1, ip, lsr #14
   146ac:	andeq	r3, r1, r0, asr #29
   146b0:	andeq	r4, r1, ip, lsl r7
   146b4:	mov	r3, #110	; 0x6e
   146b8:	b	141ec <__assert_fail@plt+0x3240>
   146bc:	mov	r3, #116	; 0x74
   146c0:	b	141ec <__assert_fail@plt+0x3240>
   146c4:	sub	r2, fp, #2
   146c8:	mov	r3, #98	; 0x62
   146cc:	clz	r2, r2
   146d0:	lsr	r2, r2, #5
   146d4:	b	140d8 <__assert_fail@plt+0x312c>
   146d8:	sub	r2, fp, #2
   146dc:	mov	r3, #97	; 0x61
   146e0:	clz	r2, r2
   146e4:	lsr	r2, r2, #5
   146e8:	b	140d8 <__assert_fail@plt+0x312c>
   146ec:	ldr	r3, [sp, #28]
   146f0:	cmp	r3, #0
   146f4:	bne	142e4 <__assert_fail@plt+0x3338>
   146f8:	ldr	r3, [sp, #164]	; 0xa4
   146fc:	tst	r3, #1
   14700:	bne	14d74 <__assert_fail@plt+0x3dc8>
   14704:	ldr	r6, [sp, #28]
   14708:	sub	r2, fp, #2
   1470c:	mov	r7, r6
   14710:	clz	r2, r2
   14714:	lsr	r2, r2, #5
   14718:	b	13f00 <__assert_fail@plt+0x2f54>
   1471c:	sub	r2, fp, #2
   14720:	clz	r2, r2
   14724:	lsr	r2, r2, #5
   14728:	b	13eec <__assert_fail@plt+0x2f40>
   1472c:	sub	r2, fp, #2
   14730:	mov	r6, #0
   14734:	clz	r2, r2
   14738:	lsr	r2, r2, #5
   1473c:	b	13ef4 <__assert_fail@plt+0x2f48>
   14740:	sub	r2, fp, #2
   14744:	clz	r2, r2
   14748:	lsr	r2, r2, #5
   1474c:	b	13ef4 <__assert_fail@plt+0x2f48>
   14750:	sub	r2, fp, #2
   14754:	mov	r3, #102	; 0x66
   14758:	clz	r2, r2
   1475c:	lsr	r2, r2, #5
   14760:	b	140d8 <__assert_fail@plt+0x312c>
   14764:	sub	r2, fp, #2
   14768:	mov	r3, #118	; 0x76
   1476c:	clz	r2, r2
   14770:	lsr	r2, r2, #5
   14774:	b	140d8 <__assert_fail@plt+0x312c>
   14778:	andeq	r8, r2, r8, lsl #30
   1477c:	andeq	r8, r1, ip, lsl r6
   14780:	andeq	r8, r1, r4, lsl #12
   14784:	andeq	r8, r1, r8, lsl r6
   14788:	ldr	r3, [sp, #48]	; 0x30
   1478c:	ldrb	r5, [r3]
   14790:	cmp	r5, #126	; 0x7e
   14794:	ldrls	pc, [pc, r5, lsl #2]
   14798:	b	14404 <__assert_fail@plt+0x3458>
   1479c:	andeq	r4, r1, r4, ror #5
   147a0:	andeq	r4, r1, r4, lsl #8
   147a4:	andeq	r4, r1, r4, lsl #8
   147a8:	andeq	r4, r1, r4, lsl #8
   147ac:	andeq	r4, r1, r4, lsl #8
   147b0:	andeq	r4, r1, r4, lsl #8
   147b4:	andeq	r4, r1, r4, lsl #8
   147b8:	ldrdeq	r4, [r1], -ip
   147bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147c0:			; <UNDEFINED> instruction: 0x000142b0
   147c4:	andeq	r4, r1, r8, ror r2
   147c8:	ldrdeq	r4, [r1], -r0
   147cc:			; <UNDEFINED> instruction: 0x000142b8
   147d0:	andeq	r4, r1, r8, asr #19
   147d4:	andeq	r4, r1, r4, lsl #8
   147d8:	andeq	r4, r1, r4, lsl #8
   147dc:	andeq	r4, r1, r4, lsl #8
   147e0:	andeq	r4, r1, r4, lsl #8
   147e4:	andeq	r4, r1, r4, lsl #8
   147e8:	andeq	r4, r1, r4, lsl #8
   147ec:	andeq	r4, r1, r4, lsl #8
   147f0:	andeq	r4, r1, r4, lsl #8
   147f4:	andeq	r4, r1, r4, lsl #8
   147f8:	andeq	r4, r1, r4, lsl #8
   147fc:	andeq	r4, r1, r4, lsl #8
   14800:	andeq	r4, r1, r4, lsl #8
   14804:	andeq	r4, r1, r4, lsl #8
   14808:	andeq	r4, r1, r4, lsl #8
   1480c:	andeq	r4, r1, r4, lsl #8
   14810:	andeq	r4, r1, r4, lsl #8
   14814:	andeq	r4, r1, r4, lsl #8
   14818:	andeq	r4, r1, r4, lsl #8
   1481c:	andeq	r4, r1, r0, asr #19
   14820:	ldrdeq	r4, [r1], -r8
   14824:	ldrdeq	r4, [r1], -r8
   14828:	andeq	r4, r1, r4, lsr #19
   1482c:	ldrdeq	r4, [r1], -r8
   14830:	muleq	r1, r8, r9
   14834:	ldrdeq	r4, [r1], -r8
   14838:	andeq	r4, r1, r8, lsl r1
   1483c:	ldrdeq	r4, [r1], -r8
   14840:	ldrdeq	r4, [r1], -r8
   14844:	ldrdeq	r4, [r1], -r8
   14848:	muleq	r1, r8, r9
   1484c:	muleq	r1, r8, r9
   14850:	muleq	r1, r8, r9
   14854:	muleq	r1, r8, r9
   14858:	muleq	r1, r8, r9
   1485c:	muleq	r1, r8, r9
   14860:	muleq	r1, r8, r9
   14864:	muleq	r1, r8, r9
   14868:	muleq	r1, r8, r9
   1486c:	muleq	r1, r8, r9
   14870:	muleq	r1, r8, r9
   14874:	muleq	r1, r8, r9
   14878:	muleq	r1, r8, r9
   1487c:	muleq	r1, r8, r9
   14880:	muleq	r1, r8, r9
   14884:	muleq	r1, r8, r9
   14888:	ldrdeq	r4, [r1], -r8
   1488c:	ldrdeq	r4, [r1], -r8
   14890:	ldrdeq	r4, [r1], -r8
   14894:	ldrdeq	r4, [r1], -r8
   14898:	andeq	r4, r1, ip, ror #1
   1489c:	andeq	r4, r1, r4, lsl #8
   148a0:	muleq	r1, r8, r9
   148a4:	muleq	r1, r8, r9
   148a8:	muleq	r1, r8, r9
   148ac:	muleq	r1, r8, r9
   148b0:	muleq	r1, r8, r9
   148b4:	muleq	r1, r8, r9
   148b8:	muleq	r1, r8, r9
   148bc:	muleq	r1, r8, r9
   148c0:	muleq	r1, r8, r9
   148c4:	muleq	r1, r8, r9
   148c8:	muleq	r1, r8, r9
   148cc:	muleq	r1, r8, r9
   148d0:	muleq	r1, r8, r9
   148d4:	muleq	r1, r8, r9
   148d8:	muleq	r1, r8, r9
   148dc:	muleq	r1, r8, r9
   148e0:	muleq	r1, r8, r9
   148e4:	muleq	r1, r8, r9
   148e8:	muleq	r1, r8, r9
   148ec:	muleq	r1, r8, r9
   148f0:	muleq	r1, r8, r9
   148f4:	muleq	r1, r8, r9
   148f8:	muleq	r1, r8, r9
   148fc:	muleq	r1, r8, r9
   14900:	muleq	r1, r8, r9
   14904:	muleq	r1, r8, r9
   14908:	ldrdeq	r4, [r1], -r8
   1490c:	andeq	r4, r1, r4, lsr #1
   14910:	muleq	r1, r8, r9
   14914:	ldrdeq	r4, [r1], -r8
   14918:	muleq	r1, r8, r9
   1491c:	ldrdeq	r4, [r1], -r8
   14920:	muleq	r1, r8, r9
   14924:	muleq	r1, r8, r9
   14928:	muleq	r1, r8, r9
   1492c:	muleq	r1, r8, r9
   14930:	muleq	r1, r8, r9
   14934:	muleq	r1, r8, r9
   14938:	muleq	r1, r8, r9
   1493c:	muleq	r1, r8, r9
   14940:	muleq	r1, r8, r9
   14944:	muleq	r1, r8, r9
   14948:	muleq	r1, r8, r9
   1494c:	muleq	r1, r8, r9
   14950:	muleq	r1, r8, r9
   14954:	muleq	r1, r8, r9
   14958:	muleq	r1, r8, r9
   1495c:	muleq	r1, r8, r9
   14960:	muleq	r1, r8, r9
   14964:	muleq	r1, r8, r9
   14968:	muleq	r1, r8, r9
   1496c:	muleq	r1, r8, r9
   14970:	muleq	r1, r8, r9
   14974:	muleq	r1, r8, r9
   14978:	muleq	r1, r8, r9
   1497c:	muleq	r1, r8, r9
   14980:	muleq	r1, r8, r9
   14984:	muleq	r1, r8, r9
   14988:			; <UNDEFINED> instruction: 0x00013ebc
   1498c:	ldrdeq	r4, [r1], -r8
   14990:			; <UNDEFINED> instruction: 0x00013ebc
   14994:	andeq	r4, r1, r4, lsr #19
   14998:	mov	r6, r7
   1499c:	mov	r7, #0
   149a0:	b	13f1c <__assert_fail@plt+0x2f70>
   149a4:	cmp	r9, #0
   149a8:	mov	r3, #0
   149ac:	beq	143ec <__assert_fail@plt+0x3440>
   149b0:	mov	r6, #0
   149b4:	mov	r7, r3
   149b8:	mov	r3, r6
   149bc:	b	13f20 <__assert_fail@plt+0x2f74>
   149c0:	mov	r3, #0
   149c4:	b	143cc <__assert_fail@plt+0x3420>
   149c8:	mov	r7, #0
   149cc:	mov	r3, #114	; 0x72
   149d0:	b	141ec <__assert_fail@plt+0x3240>
   149d4:	mov	r5, #98	; 0x62
   149d8:	b	1427c <__assert_fail@plt+0x32d0>
   149dc:	mov	r5, #97	; 0x61
   149e0:	b	142bc <__assert_fail@plt+0x3310>
   149e4:	ldr	r3, [sp, #32]
   149e8:	cmp	r3, #0
   149ec:	bne	14e34 <__assert_fail@plt+0x3e88>
   149f0:	add	r9, r9, #1
   149f4:	ldr	r3, [sp, #44]	; 0x2c
   149f8:	mov	r6, #0
   149fc:	mov	r5, #92	; 0x5c
   14a00:	b	141b4 <__assert_fail@plt+0x3208>
   14a04:	ldr	r3, [sp, #36]	; 0x24
   14a08:	ldrb	r3, [r3, #1]
   14a0c:	adds	r3, r3, #0
   14a10:	movne	r3, #1
   14a14:	b	13ed8 <__assert_fail@plt+0x2f2c>
   14a18:	ldr	r3, [sp, #164]	; 0xa4
   14a1c:	ands	r3, r3, #4
   14a20:	beq	14a44 <__assert_fail@plt+0x3a98>
   14a24:	ldr	r2, [sp, #24]
   14a28:	add	r3, r9, #2
   14a2c:	cmp	r3, r2
   14a30:	bcs	14a44 <__assert_fail@plt+0x3a98>
   14a34:	ldr	r2, [sp, #48]	; 0x30
   14a38:	ldrb	r5, [r2, #1]
   14a3c:	cmp	r5, #63	; 0x3f
   14a40:	beq	14ea8 <__assert_fail@plt+0x3efc>
   14a44:	mov	r2, #0
   14a48:	mov	r6, r2
   14a4c:	mov	r5, #63	; 0x3f
   14a50:	b	13f00 <__assert_fail@plt+0x2f54>
   14a54:	ldr	r3, [sp, #32]
   14a58:	cmp	r3, #0
   14a5c:	bne	14e34 <__assert_fail@plt+0x3e88>
   14a60:	mov	r6, r3
   14a64:	mov	r5, #63	; 0x3f
   14a68:	b	13f48 <__assert_fail@plt+0x2f9c>
   14a6c:	ldr	r3, [sp, #24]
   14a70:	cmn	r3, #1
   14a74:	mov	r3, #0
   14a78:	str	r3, [sp, #108]	; 0x6c
   14a7c:	str	r3, [sp, #112]	; 0x70
   14a80:	bne	14a90 <__assert_fail@plt+0x3ae4>
   14a84:	ldr	r0, [sp, #36]	; 0x24
   14a88:	bl	10ed4 <strlen@plt>
   14a8c:	str	r0, [sp, #24]
   14a90:	mov	r3, #0
   14a94:	str	sl, [sp, #88]	; 0x58
   14a98:	ldr	sl, [sp, #36]	; 0x24
   14a9c:	str	r5, [sp, #92]	; 0x5c
   14aa0:	mov	r5, r3
   14aa4:	str	r7, [sp, #96]	; 0x60
   14aa8:	str	r4, [sp, #100]	; 0x64
   14aac:	str	r8, [sp, #84]	; 0x54
   14ab0:	ldr	r3, [sp, #24]
   14ab4:	add	r4, r9, r5
   14ab8:	add	r7, sl, r4
   14abc:	sub	r2, r3, r4
   14ac0:	mov	r1, r7
   14ac4:	add	r3, sp, #108	; 0x6c
   14ac8:	add	r0, sp, #104	; 0x68
   14acc:	bl	16c18 <__assert_fail@plt+0x5c6c>
   14ad0:	subs	r8, r0, #0
   14ad4:	beq	14b24 <__assert_fail@plt+0x3b78>
   14ad8:	cmn	r8, #1
   14adc:	beq	14e84 <__assert_fail@plt+0x3ed8>
   14ae0:	cmn	r8, #2
   14ae4:	beq	14fa4 <__assert_fail@plt+0x3ff8>
   14ae8:	ldr	r3, [sp, #32]
   14aec:	cmp	fp, #2
   14af0:	movne	r3, #0
   14af4:	andeq	r3, r3, #1
   14af8:	cmp	r3, #0
   14afc:	bne	14c84 <__assert_fail@plt+0x3cd8>
   14b00:	ldr	r0, [sp, #104]	; 0x68
   14b04:	bl	10e14 <iswprint@plt>
   14b08:	add	r5, r5, r8
   14b0c:	cmp	r0, #0
   14b10:	add	r0, sp, #108	; 0x6c
   14b14:	moveq	r6, #0
   14b18:	bl	10db4 <mbsinit@plt>
   14b1c:	cmp	r0, #0
   14b20:	beq	14ab0 <__assert_fail@plt+0x3b04>
   14b24:	ldr	r3, [sp, #28]
   14b28:	mov	ip, r5
   14b2c:	eor	r2, r6, #1
   14b30:	ldr	r5, [sp, #92]	; 0x5c
   14b34:	ldr	r7, [sp, #96]	; 0x60
   14b38:	ldr	r4, [sp, #100]	; 0x64
   14b3c:	ldr	r8, [sp, #84]	; 0x54
   14b40:	ldr	sl, [sp, #88]	; 0x58
   14b44:	and	r2, r2, r3
   14b48:	cmp	ip, #1
   14b4c:	bls	1444c <__assert_fail@plt+0x34a0>
   14b50:	add	r1, ip, r9
   14b54:	ldr	lr, [sp, #48]	; 0x30
   14b58:	mov	r0, #0
   14b5c:	str	r6, [sp, #48]	; 0x30
   14b60:	mov	ip, #39	; 0x27
   14b64:	ldr	r6, [sp, #44]	; 0x2c
   14b68:	b	14c20 <__assert_fail@plt+0x3c74>
   14b6c:	ldr	r0, [sp, #32]
   14b70:	sub	r3, fp, #2
   14b74:	cmp	r0, #0
   14b78:	clz	r3, r3
   14b7c:	lsr	r3, r3, #5
   14b80:	bne	14d88 <__assert_fail@plt+0x3ddc>
   14b84:	eor	r0, r6, #1
   14b88:	ands	r3, r3, r0
   14b8c:	beq	14bbc <__assert_fail@plt+0x3c10>
   14b90:	add	r0, r4, #1
   14b94:	cmp	sl, r4
   14b98:	strbhi	ip, [r8, r4]
   14b9c:	cmp	sl, r0
   14ba0:	movhi	r6, #36	; 0x24
   14ba4:	strbhi	r6, [r8, r0]
   14ba8:	add	r0, r4, #2
   14bac:	mov	r6, r3
   14bb0:	add	r4, r4, #3
   14bb4:	cmp	sl, r0
   14bb8:	strbhi	ip, [r8, r0]
   14bbc:	cmp	sl, r4
   14bc0:	movhi	r3, #92	; 0x5c
   14bc4:	strbhi	r3, [r8, r4]
   14bc8:	add	r3, r4, #1
   14bcc:	cmp	sl, r3
   14bd0:	lsrhi	r0, r5, #6
   14bd4:	addhi	r0, r0, #48	; 0x30
   14bd8:	strbhi	r0, [r8, r3]
   14bdc:	add	r0, r4, #2
   14be0:	cmp	sl, r0
   14be4:	lsrhi	r3, r5, #3
   14be8:	andhi	r3, r3, #7
   14bec:	addhi	r3, r3, #48	; 0x30
   14bf0:	add	r9, r9, #1
   14bf4:	strbhi	r3, [r8, r0]
   14bf8:	and	r5, r5, #7
   14bfc:	cmp	r9, r1
   14c00:	add	r5, r5, #48	; 0x30
   14c04:	add	r4, r4, #3
   14c08:	bcs	14da8 <__assert_fail@plt+0x3dfc>
   14c0c:	mov	r0, r2
   14c10:	cmp	sl, r4
   14c14:	strbhi	r5, [r8, r4]
   14c18:	ldrb	r5, [lr, #1]!
   14c1c:	add	r4, r4, #1
   14c20:	cmp	r2, #0
   14c24:	bne	14b6c <__assert_fail@plt+0x3bc0>
   14c28:	eor	r3, r0, #1
   14c2c:	and	r3, r3, r6
   14c30:	cmp	r7, #0
   14c34:	uxtb	r3, r3
   14c38:	beq	14c4c <__assert_fail@plt+0x3ca0>
   14c3c:	cmp	sl, r4
   14c40:	movhi	r7, #92	; 0x5c
   14c44:	strbhi	r7, [r8, r4]
   14c48:	add	r4, r4, #1
   14c4c:	add	r9, r9, #1
   14c50:	cmp	r9, r1
   14c54:	bcs	14d9c <__assert_fail@plt+0x3df0>
   14c58:	cmp	r3, #0
   14c5c:	beq	14dc8 <__assert_fail@plt+0x3e1c>
   14c60:	cmp	sl, r4
   14c64:	add	r3, r4, #1
   14c68:	strbhi	ip, [r8, r4]
   14c6c:	mov	r7, #0
   14c70:	cmp	sl, r3
   14c74:	strbhi	ip, [r8, r3]
   14c78:	add	r4, r4, #2
   14c7c:	mov	r6, r7
   14c80:	b	14c10 <__assert_fail@plt+0x3c64>
   14c84:	cmp	r8, #1
   14c88:	beq	14b00 <__assert_fail@plt+0x3b54>
   14c8c:	add	r1, r4, #1
   14c90:	add	r3, sl, r8
   14c94:	add	r1, sl, r1
   14c98:	add	r4, r3, r4
   14c9c:	ldrb	r3, [r1], #1
   14ca0:	sub	r3, r3, #91	; 0x5b
   14ca4:	cmp	r3, #33	; 0x21
   14ca8:	ldrls	pc, [pc, r3, lsl #2]
   14cac:	b	14d38 <__assert_fail@plt+0x3d8c>
   14cb0:	andeq	r4, r1, r4, asr #26
   14cb4:	andeq	r4, r1, r4, asr #26
   14cb8:	andeq	r4, r1, r8, lsr sp
   14cbc:	andeq	r4, r1, r4, asr #26
   14cc0:	andeq	r4, r1, r8, lsr sp
   14cc4:	andeq	r4, r1, r4, asr #26
   14cc8:	andeq	r4, r1, r8, lsr sp
   14ccc:	andeq	r4, r1, r8, lsr sp
   14cd0:	andeq	r4, r1, r8, lsr sp
   14cd4:	andeq	r4, r1, r8, lsr sp
   14cd8:	andeq	r4, r1, r8, lsr sp
   14cdc:	andeq	r4, r1, r8, lsr sp
   14ce0:	andeq	r4, r1, r8, lsr sp
   14ce4:	andeq	r4, r1, r8, lsr sp
   14ce8:	andeq	r4, r1, r8, lsr sp
   14cec:	andeq	r4, r1, r8, lsr sp
   14cf0:	andeq	r4, r1, r8, lsr sp
   14cf4:	andeq	r4, r1, r8, lsr sp
   14cf8:	andeq	r4, r1, r8, lsr sp
   14cfc:	andeq	r4, r1, r8, lsr sp
   14d00:	andeq	r4, r1, r8, lsr sp
   14d04:	andeq	r4, r1, r8, lsr sp
   14d08:	andeq	r4, r1, r8, lsr sp
   14d0c:	andeq	r4, r1, r8, lsr sp
   14d10:	andeq	r4, r1, r8, lsr sp
   14d14:	andeq	r4, r1, r8, lsr sp
   14d18:	andeq	r4, r1, r8, lsr sp
   14d1c:	andeq	r4, r1, r8, lsr sp
   14d20:	andeq	r4, r1, r8, lsr sp
   14d24:	andeq	r4, r1, r8, lsr sp
   14d28:	andeq	r4, r1, r8, lsr sp
   14d2c:	andeq	r4, r1, r8, lsr sp
   14d30:	andeq	r4, r1, r8, lsr sp
   14d34:	andeq	r4, r1, r4, asr #26
   14d38:	cmp	r4, r1
   14d3c:	bne	14c9c <__assert_fail@plt+0x3cf0>
   14d40:	b	14b00 <__assert_fail@plt+0x3b54>
   14d44:	ldr	fp, [sp, #84]	; 0x54
   14d48:	ldr	sl, [sp, #88]	; 0x58
   14d4c:	mov	r8, #2
   14d50:	b	1420c <__assert_fail@plt+0x3260>
   14d54:	cmp	sl, r4
   14d58:	movls	r1, r4
   14d5c:	bls	1435c <__assert_fail@plt+0x33b0>
   14d60:	ldr	r3, [sp, #44]	; 0x2c
   14d64:	b	1434c <__assert_fail@plt+0x33a0>
   14d68:	str	sl, [sp, #72]	; 0x48
   14d6c:	ldr	sl, [sp, #32]
   14d70:	b	14184 <__assert_fail@plt+0x31d8>
   14d74:	add	r9, r9, #1
   14d78:	b	13a78 <__assert_fail@plt+0x2acc>
   14d7c:	ldr	r2, [sp, #28]
   14d80:	mov	r6, #0
   14d84:	b	14b50 <__assert_fail@plt+0x3ba4>
   14d88:	str	fp, [sp, #160]	; 0xa0
   14d8c:	str	r3, [sp, #28]
   14d90:	mov	fp, r8
   14d94:	ldr	r8, [sp, #160]	; 0xa0
   14d98:	b	1420c <__assert_fail@plt+0x3260>
   14d9c:	str	r6, [sp, #44]	; 0x2c
   14da0:	ldr	r6, [sp, #48]	; 0x30
   14da4:	b	141b4 <__assert_fail@plt+0x3208>
   14da8:	str	r6, [sp, #44]	; 0x2c
   14dac:	ldr	r6, [sp, #48]	; 0x30
   14db0:	b	13fc0 <__assert_fail@plt+0x3014>
   14db4:	add	r4, r4, #4
   14db8:	str	r3, [sp, #44]	; 0x2c
   14dbc:	mov	r6, #0
   14dc0:	mov	r5, #48	; 0x30
   14dc4:	b	13f48 <__assert_fail@plt+0x2f9c>
   14dc8:	mov	r7, r3
   14dcc:	b	14c10 <__assert_fail@plt+0x3c64>
   14dd0:	ldr	r3, [pc, #-1624]	; 14780 <__assert_fail@plt+0x37d4>
   14dd4:	mov	r4, #1
   14dd8:	str	r4, [sp, #40]	; 0x28
   14ddc:	str	r4, [sp, #28]
   14de0:	str	r4, [sp, #52]	; 0x34
   14de4:	str	sl, [sp, #72]	; 0x48
   14de8:	str	sl, [sp, #68]	; 0x44
   14dec:	str	sl, [sp, #44]	; 0x2c
   14df0:	str	sl, [sp, #32]
   14df4:	str	r3, [sp, #60]	; 0x3c
   14df8:	b	13a68 <__assert_fail@plt+0x2abc>
   14dfc:	mov	r3, r6
   14e00:	mov	r5, #48	; 0x30
   14e04:	mov	r6, #0
   14e08:	b	13f48 <__assert_fail@plt+0x2f9c>
   14e0c:	cmp	sl, r4
   14e10:	movhi	r3, #48	; 0x30
   14e14:	strbhi	r3, [r8, r4]
   14e18:	add	r3, r1, #2
   14e1c:	cmp	sl, r3
   14e20:	movhi	r0, #48	; 0x30
   14e24:	strbhi	r0, [r8, r3]
   14e28:	add	r4, r1, #3
   14e2c:	mov	r5, #48	; 0x30
   14e30:	b	14390 <__assert_fail@plt+0x33e4>
   14e34:	str	fp, [sp, #160]	; 0xa0
   14e38:	mov	fp, r8
   14e3c:	ldr	r8, [sp, #160]	; 0xa0
   14e40:	b	1420c <__assert_fail@plt+0x3260>
   14e44:	ldr	r2, [sp, #80]	; 0x50
   14e48:	ldrb	r3, [r2]
   14e4c:	cmp	r3, #0
   14e50:	beq	13a38 <__assert_fail@plt+0x2a8c>
   14e54:	cmp	sl, r4
   14e58:	strbhi	r3, [fp, r4]
   14e5c:	ldrb	r3, [r2, #1]!
   14e60:	add	r4, r4, #1
   14e64:	cmp	r3, #0
   14e68:	bne	14e54 <__assert_fail@plt+0x3ea8>
   14e6c:	b	13a38 <__assert_fail@plt+0x2a8c>
   14e70:	str	fp, [sp, #160]	; 0xa0
   14e74:	mov	r3, #0
   14e78:	mov	fp, r8
   14e7c:	ldr	r8, [sp, #160]	; 0xa0
   14e80:	b	142a0 <__assert_fail@plt+0x32f4>
   14e84:	mov	ip, r5
   14e88:	ldr	r7, [sp, #96]	; 0x60
   14e8c:	ldr	r5, [sp, #92]	; 0x5c
   14e90:	ldr	r4, [sp, #100]	; 0x64
   14e94:	ldr	r8, [sp, #84]	; 0x54
   14e98:	ldr	sl, [sp, #88]	; 0x58
   14e9c:	ldr	r2, [sp, #28]
   14ea0:	mov	r6, #0
   14ea4:	b	14b48 <__assert_fail@plt+0x3b9c>
   14ea8:	ldr	r2, [sp, #36]	; 0x24
   14eac:	ldrb	r1, [r2, r3]
   14eb0:	sub	r2, r1, #33	; 0x21
   14eb4:	cmp	r2, #29
   14eb8:	ldrls	pc, [pc, r2, lsl #2]
   14ebc:	b	14f98 <__assert_fail@plt+0x3fec>
   14ec0:	andeq	r4, r1, r8, lsr pc
   14ec4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ec8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ecc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ed0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ed4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ed8:	andeq	r4, r1, r8, lsr pc
   14edc:	andeq	r4, r1, r8, lsr pc
   14ee0:	andeq	r4, r1, r8, lsr pc
   14ee4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ee8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14eec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ef0:	andeq	r4, r1, r8, lsr pc
   14ef4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ef8:	andeq	r4, r1, r8, lsr pc
   14efc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f08:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f0c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f14:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f1c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14f2c:	andeq	r4, r1, r8, lsr pc
   14f30:	andeq	r4, r1, r8, lsr pc
   14f34:	andeq	r4, r1, r8, lsr pc
   14f38:	ldr	r2, [sp, #32]
   14f3c:	cmp	r2, #0
   14f40:	bne	15044 <__assert_fail@plt+0x4098>
   14f44:	cmp	sl, r4
   14f48:	movhi	r2, #63	; 0x3f
   14f4c:	strbhi	r2, [r8, r4]
   14f50:	add	r2, r4, #1
   14f54:	cmp	sl, r2
   14f58:	movhi	r0, #34	; 0x22
   14f5c:	strbhi	r0, [r8, r2]
   14f60:	add	r2, r4, #2
   14f64:	cmp	sl, r2
   14f68:	movhi	r0, #34	; 0x22
   14f6c:	strbhi	r0, [r8, r2]
   14f70:	add	r2, r4, #3
   14f74:	cmp	sl, r2
   14f78:	movhi	r0, #63	; 0x3f
   14f7c:	strbhi	r0, [r8, r2]
   14f80:	mov	r2, #0
   14f84:	add	r4, r4, #4
   14f88:	mov	r5, r1
   14f8c:	mov	r9, r3
   14f90:	mov	r6, r2
   14f94:	b	14390 <__assert_fail@plt+0x33e4>
   14f98:	mov	r2, #0
   14f9c:	mov	r6, r2
   14fa0:	b	13f00 <__assert_fail@plt+0x2f54>
   14fa4:	ldr	r0, [sp, #24]
   14fa8:	mov	r1, r4
   14fac:	cmp	r1, r0
   14fb0:	mov	r2, r7
   14fb4:	mov	r3, r5
   14fb8:	mov	ip, r5
   14fbc:	ldr	r7, [sp, #96]	; 0x60
   14fc0:	ldr	r5, [sp, #92]	; 0x5c
   14fc4:	ldr	r4, [sp, #100]	; 0x64
   14fc8:	ldr	r8, [sp, #84]	; 0x54
   14fcc:	ldr	sl, [sp, #88]	; 0x58
   14fd0:	bcs	15004 <__assert_fail@plt+0x4058>
   14fd4:	ldrb	r6, [r2]
   14fd8:	cmp	r6, #0
   14fdc:	bne	14ff0 <__assert_fail@plt+0x4044>
   14fe0:	b	15120 <__assert_fail@plt+0x4174>
   14fe4:	ldrb	r6, [r2, #1]!
   14fe8:	cmp	r6, #0
   14fec:	beq	150a8 <__assert_fail@plt+0x40fc>
   14ff0:	add	r3, r3, #1
   14ff4:	add	r1, r9, r3
   14ff8:	cmp	r1, r0
   14ffc:	bcc	14fe4 <__assert_fail@plt+0x4038>
   15000:	mov	ip, r3
   15004:	ldr	r2, [sp, #28]
   15008:	mov	r6, #0
   1500c:	b	14b48 <__assert_fail@plt+0x3b9c>
   15010:	mov	r3, #1
   15014:	str	r3, [sp, #40]	; 0x28
   15018:	str	r3, [sp, #32]
   1501c:	str	r3, [sp, #28]
   15020:	str	r3, [sp, #52]	; 0x34
   15024:	ldr	r3, [pc, #-2220]	; 14780 <__assert_fail@plt+0x37d4>
   15028:	mov	r2, #0
   1502c:	str	r2, [sp, #68]	; 0x44
   15030:	str	r2, [sp, #44]	; 0x2c
   15034:	str	r2, [sp, #72]	; 0x48
   15038:	mov	r4, r2
   1503c:	str	r3, [sp, #60]	; 0x3c
   15040:	b	13a68 <__assert_fail@plt+0x2abc>
   15044:	str	fp, [sp, #160]	; 0xa0
   15048:	mov	fp, r8
   1504c:	ldr	r8, [sp, #160]	; 0xa0
   15050:	b	14218 <__assert_fail@plt+0x326c>
   15054:	mov	r2, r3
   15058:	ldr	r3, [sp, #60]	; 0x3c
   1505c:	cmp	r3, #0
   15060:	moveq	r2, #0
   15064:	andne	r2, r2, #1
   15068:	cmp	r2, #0
   1506c:	beq	15098 <__assert_fail@plt+0x40ec>
   15070:	mov	r2, r3
   15074:	ldrb	r3, [r3]
   15078:	cmp	r3, #0
   1507c:	beq	15098 <__assert_fail@plt+0x40ec>
   15080:	cmp	sl, r4
   15084:	strbhi	r3, [fp, r4]
   15088:	ldrb	r3, [r2, #1]!
   1508c:	add	r4, r4, #1
   15090:	cmp	r3, #0
   15094:	bne	15080 <__assert_fail@plt+0x40d4>
   15098:	cmp	sl, r4
   1509c:	movhi	r3, #0
   150a0:	strbhi	r3, [fp, r4]
   150a4:	b	14258 <__assert_fail@plt+0x32ac>
   150a8:	mov	ip, r3
   150ac:	ldr	r2, [sp, #28]
   150b0:	b	14b48 <__assert_fail@plt+0x3b9c>
   150b4:	str	fp, [sp, #160]	; 0xa0
   150b8:	mov	fp, r8
   150bc:	ldr	r8, [sp, #160]	; 0xa0
   150c0:	sub	r3, r8, #2
   150c4:	clz	r3, r3
   150c8:	lsr	r3, r3, #5
   150cc:	str	r3, [sp, #28]
   150d0:	b	1420c <__assert_fail@plt+0x3260>
   150d4:	ldr	r3, [sp, #76]	; 0x4c
   150d8:	mov	ip, #5
   150dc:	str	r3, [sp, #16]
   150e0:	ldr	r3, [sp, #80]	; 0x50
   150e4:	ldr	r2, [sp, #36]	; 0x24
   150e8:	str	r3, [sp, #12]
   150ec:	ldr	r3, [sp, #56]	; 0x38
   150f0:	ldr	r1, [sp, #72]	; 0x48
   150f4:	str	r3, [sp, #8]
   150f8:	ldr	r3, [sp, #164]	; 0xa4
   150fc:	mov	r0, fp
   15100:	str	r3, [sp, #4]
   15104:	str	ip, [sp]
   15108:	ldr	r3, [sp, #24]
   1510c:	bl	13970 <__assert_fail@plt+0x29c4>
   15110:	mov	r4, r0
   15114:	b	14258 <__assert_fail@plt+0x32ac>
   15118:	mov	r8, #2
   1511c:	b	1420c <__assert_fail@plt+0x3260>
   15120:	ldr	r2, [sp, #28]
   15124:	b	14b48 <__assert_fail@plt+0x3b9c>
   15128:	mov	r3, #0
   1512c:	str	r3, [sp, #68]	; 0x44
   15130:	str	r3, [sp, #44]	; 0x2c
   15134:	str	r3, [sp, #72]	; 0x48
   15138:	str	r3, [sp, #28]
   1513c:	mov	r4, r3
   15140:	ldr	r3, [pc, #-2500]	; 14784 <__assert_fail@plt+0x37d8>
   15144:	mov	r2, #1
   15148:	str	r2, [sp, #40]	; 0x28
   1514c:	str	r2, [sp, #32]
   15150:	str	r2, [sp, #52]	; 0x34
   15154:	str	r3, [sp, #60]	; 0x3c
   15158:	b	13a68 <__assert_fail@plt+0x2abc>
   1515c:	bl	10df0 <__stack_chk_fail@plt>
   15160:	mov	r5, r3
   15164:	mov	r6, #0
   15168:	b	13f5c <__assert_fail@plt+0x2fb0>
   1516c:	mov	r3, #0
   15170:	mov	r2, #1
   15174:	str	r3, [sp, #44]	; 0x2c
   15178:	str	r3, [sp, #72]	; 0x48
   1517c:	str	r2, [sp, #40]	; 0x28
   15180:	b	14078 <__assert_fail@plt+0x30cc>
   15184:	bl	10f94 <abort@plt>
   15188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1518c:	sub	sp, sp, #44	; 0x2c
   15190:	mov	r6, r0
   15194:	mov	r4, r3
   15198:	mov	sl, r1
   1519c:	mov	fp, r2
   151a0:	bl	10eec <__errno_location@plt>
   151a4:	ldr	r7, [pc, #364]	; 15318 <__assert_fail@plt+0x436c>
   151a8:	cmp	r6, #0
   151ac:	ldr	r5, [r7]
   151b0:	ldr	r3, [r0]
   151b4:	str	r3, [sp, #24]
   151b8:	blt	15314 <__assert_fail@plt+0x4368>
   151bc:	ldr	r3, [r7, #4]
   151c0:	mov	r8, r0
   151c4:	cmp	r3, r6
   151c8:	bgt	15214 <__assert_fail@plt+0x4268>
   151cc:	cmn	r6, #-268435454	; 0xf0000002
   151d0:	bgt	15310 <__assert_fail@plt+0x4364>
   151d4:	add	r9, r6, #1
   151d8:	add	r3, r7, #8
   151dc:	cmp	r5, r3
   151e0:	lsl	r1, r9, #3
   151e4:	beq	152f0 <__assert_fail@plt+0x4344>
   151e8:	mov	r0, r5
   151ec:	bl	15fe4 <__assert_fail@plt+0x5038>
   151f0:	mov	r5, r0
   151f4:	str	r0, [r7]
   151f8:	ldr	r0, [r7, #4]
   151fc:	mov	r1, #0
   15200:	sub	r2, r9, r0
   15204:	add	r0, r5, r0, lsl #3
   15208:	lsl	r2, r2, #3
   1520c:	bl	10f10 <memset@plt>
   15210:	str	r9, [r7, #4]
   15214:	add	r3, r5, r6, lsl #3
   15218:	ldr	r1, [r4, #4]
   1521c:	ldr	r7, [r3, #4]
   15220:	ldr	r9, [r5, r6, lsl #3]
   15224:	ldr	r2, [r4, #40]	; 0x28
   15228:	ldr	ip, [r4, #44]	; 0x2c
   1522c:	str	r3, [sp, #28]
   15230:	ldr	r3, [r4]
   15234:	orr	r1, r1, #1
   15238:	add	lr, r4, #8
   1523c:	str	r1, [sp, #36]	; 0x24
   15240:	str	r1, [sp, #4]
   15244:	str	r2, [sp, #12]
   15248:	str	r3, [sp]
   1524c:	mov	r0, r7
   15250:	mov	r1, r9
   15254:	str	ip, [sp, #16]
   15258:	str	lr, [sp, #8]
   1525c:	mov	r3, fp
   15260:	mov	r2, sl
   15264:	str	lr, [sp, #32]
   15268:	bl	13970 <__assert_fail@plt+0x29c4>
   1526c:	cmp	r9, r0
   15270:	bhi	152dc <__assert_fail@plt+0x4330>
   15274:	ldr	r3, [pc, #160]	; 1531c <__assert_fail@plt+0x4370>
   15278:	add	r9, r0, #1
   1527c:	cmp	r7, r3
   15280:	str	r9, [r5, r6, lsl #3]
   15284:	beq	15290 <__assert_fail@plt+0x42e4>
   15288:	mov	r0, r7
   1528c:	bl	10d84 <free@plt>
   15290:	mov	r0, r9
   15294:	bl	15f88 <__assert_fail@plt+0x4fdc>
   15298:	ldr	lr, [sp, #28]
   1529c:	ldr	ip, [r4, #44]	; 0x2c
   152a0:	ldr	r5, [r4, #40]	; 0x28
   152a4:	mov	r3, fp
   152a8:	mov	r2, sl
   152ac:	mov	r1, r9
   152b0:	str	r0, [lr, #4]
   152b4:	ldr	lr, [r4]
   152b8:	ldr	r4, [sp, #32]
   152bc:	str	ip, [sp, #16]
   152c0:	str	r4, [sp, #8]
   152c4:	ldr	r4, [sp, #36]	; 0x24
   152c8:	str	r5, [sp, #12]
   152cc:	str	r4, [sp, #4]
   152d0:	str	lr, [sp]
   152d4:	mov	r7, r0
   152d8:	bl	13970 <__assert_fail@plt+0x29c4>
   152dc:	ldr	r3, [sp, #24]
   152e0:	mov	r0, r7
   152e4:	str	r3, [r8]
   152e8:	add	sp, sp, #44	; 0x2c
   152ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f0:	mov	r0, #0
   152f4:	bl	15fe4 <__assert_fail@plt+0x5038>
   152f8:	ldr	r3, [pc, #32]	; 15320 <__assert_fail@plt+0x4374>
   152fc:	mov	r5, r0
   15300:	ldm	r3, {r0, r1}
   15304:	str	r5, [r7]
   15308:	stm	r5, {r0, r1}
   1530c:	b	151f8 <__assert_fail@plt+0x424c>
   15310:	bl	161d0 <__assert_fail@plt+0x5224>
   15314:	bl	10f94 <abort@plt>
   15318:	strdeq	r9, [r2], -r8
   1531c:	andeq	fp, r2, r0, ror r4
   15320:	andeq	r9, r2, r0, lsl #2
   15324:	push	{r4, r5, r6, lr}
   15328:	mov	r5, r0
   1532c:	bl	10eec <__errno_location@plt>
   15330:	cmp	r5, #0
   15334:	mov	r1, #48	; 0x30
   15338:	mov	r4, r0
   1533c:	ldr	r0, [pc, #16]	; 15354 <__assert_fail@plt+0x43a8>
   15340:	ldr	r6, [r4]
   15344:	movne	r0, r5
   15348:	bl	16190 <__assert_fail@plt+0x51e4>
   1534c:	str	r6, [r4]
   15350:	pop	{r4, r5, r6, pc}
   15354:	andeq	fp, r2, r0, ror r5
   15358:	ldr	r3, [pc, #12]	; 1536c <__assert_fail@plt+0x43c0>
   1535c:	cmp	r0, #0
   15360:	moveq	r0, r3
   15364:	ldr	r0, [r0]
   15368:	bx	lr
   1536c:	andeq	fp, r2, r0, ror r5
   15370:	ldr	r3, [pc, #12]	; 15384 <__assert_fail@plt+0x43d8>
   15374:	cmp	r0, #0
   15378:	moveq	r0, r3
   1537c:	str	r1, [r0]
   15380:	bx	lr
   15384:	andeq	fp, r2, r0, ror r5
   15388:	ldr	r3, [pc, #52]	; 153c4 <__assert_fail@plt+0x4418>
   1538c:	cmp	r0, #0
   15390:	moveq	r0, r3
   15394:	add	r3, r0, #8
   15398:	push	{lr}		; (str lr, [sp, #-4]!)
   1539c:	lsr	lr, r1, #5
   153a0:	and	r1, r1, #31
   153a4:	ldr	ip, [r3, lr, lsl #2]
   153a8:	lsr	r0, ip, r1
   153ac:	eor	r2, r2, r0
   153b0:	and	r2, r2, #1
   153b4:	and	r0, r0, #1
   153b8:	eor	r1, ip, r2, lsl r1
   153bc:	str	r1, [r3, lr, lsl #2]
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	andeq	fp, r2, r0, ror r5
   153c8:	ldr	r3, [pc, #16]	; 153e0 <__assert_fail@plt+0x4434>
   153cc:	cmp	r0, #0
   153d0:	movne	r3, r0
   153d4:	ldr	r0, [r3, #4]
   153d8:	str	r1, [r3, #4]
   153dc:	bx	lr
   153e0:	andeq	fp, r2, r0, ror r5
   153e4:	ldr	r3, [pc, #44]	; 15418 <__assert_fail@plt+0x446c>
   153e8:	cmp	r0, #0
   153ec:	moveq	r0, r3
   153f0:	mov	ip, #10
   153f4:	cmp	r2, #0
   153f8:	cmpne	r1, #0
   153fc:	str	ip, [r0]
   15400:	beq	15410 <__assert_fail@plt+0x4464>
   15404:	str	r1, [r0, #40]	; 0x28
   15408:	str	r2, [r0, #44]	; 0x2c
   1540c:	bx	lr
   15410:	push	{r4, lr}
   15414:	bl	10f94 <abort@plt>
   15418:	andeq	fp, r2, r0, ror r5
   1541c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15420:	sub	sp, sp, #24
   15424:	ldr	ip, [pc, #108]	; 15498 <__assert_fail@plt+0x44ec>
   15428:	ldr	r4, [sp, #56]	; 0x38
   1542c:	mov	r9, r2
   15430:	cmp	r4, #0
   15434:	moveq	r4, ip
   15438:	mov	sl, r3
   1543c:	mov	r7, r0
   15440:	mov	r8, r1
   15444:	bl	10eec <__errno_location@plt>
   15448:	ldr	r3, [r4, #44]	; 0x2c
   1544c:	mov	r1, r8
   15450:	ldr	r6, [r0]
   15454:	str	r3, [sp, #16]
   15458:	ldr	r2, [r4, #40]	; 0x28
   1545c:	add	r3, r4, #8
   15460:	str	r3, [sp, #8]
   15464:	str	r2, [sp, #12]
   15468:	ldr	r2, [r4, #4]
   1546c:	mov	r5, r0
   15470:	str	r2, [sp, #4]
   15474:	ldr	ip, [r4]
   15478:	mov	r3, sl
   1547c:	mov	r2, r9
   15480:	mov	r0, r7
   15484:	str	ip, [sp]
   15488:	bl	13970 <__assert_fail@plt+0x29c4>
   1548c:	str	r6, [r5]
   15490:	add	sp, sp, #24
   15494:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15498:	andeq	fp, r2, r0, ror r5
   1549c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a0:	cmp	r3, #0
   154a4:	sub	sp, sp, #44	; 0x2c
   154a8:	ldr	r4, [pc, #192]	; 15570 <__assert_fail@plt+0x45c4>
   154ac:	mov	r6, r2
   154b0:	movne	r4, r3
   154b4:	mov	r9, r1
   154b8:	mov	r8, r0
   154bc:	bl	10eec <__errno_location@plt>
   154c0:	ldr	r3, [r4, #44]	; 0x2c
   154c4:	ldr	r5, [r4, #4]
   154c8:	add	sl, r4, #8
   154cc:	cmp	r6, #0
   154d0:	orreq	r5, r5, #1
   154d4:	mov	r1, #0
   154d8:	ldr	r2, [r0]
   154dc:	str	r3, [sp, #16]
   154e0:	ldr	r3, [r4, #40]	; 0x28
   154e4:	stmib	sp, {r5, sl}
   154e8:	str	r3, [sp, #12]
   154ec:	ldr	r3, [r4]
   154f0:	mov	r7, r0
   154f4:	str	r2, [sp, #28]
   154f8:	str	r3, [sp]
   154fc:	mov	r2, r8
   15500:	mov	r3, r9
   15504:	mov	r0, r1
   15508:	bl	13970 <__assert_fail@plt+0x29c4>
   1550c:	add	r1, r0, #1
   15510:	mov	fp, r0
   15514:	mov	r0, r1
   15518:	str	r1, [sp, #36]	; 0x24
   1551c:	bl	15f88 <__assert_fail@plt+0x4fdc>
   15520:	ldr	r3, [r4, #44]	; 0x2c
   15524:	mov	r2, r8
   15528:	str	r3, [sp, #16]
   1552c:	ldr	r3, [r4, #40]	; 0x28
   15530:	str	r5, [sp, #4]
   15534:	str	r3, [sp, #12]
   15538:	str	sl, [sp, #8]
   1553c:	ldr	ip, [r4]
   15540:	ldr	r1, [sp, #36]	; 0x24
   15544:	mov	r3, r9
   15548:	str	ip, [sp]
   1554c:	str	r0, [sp, #32]
   15550:	bl	13970 <__assert_fail@plt+0x29c4>
   15554:	ldr	r2, [sp, #28]
   15558:	cmp	r6, #0
   1555c:	str	r2, [r7]
   15560:	ldr	r0, [sp, #32]
   15564:	strne	fp, [r6]
   15568:	add	sp, sp, #44	; 0x2c
   1556c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15570:	andeq	fp, r2, r0, ror r5
   15574:	mov	r3, r2
   15578:	mov	r2, #0
   1557c:	b	1549c <__assert_fail@plt+0x44f0>
   15580:	push	{r4, r5, r6, r7, r8, lr}
   15584:	ldr	r6, [pc, #112]	; 155fc <__assert_fail@plt+0x4650>
   15588:	ldr	r3, [r6, #4]
   1558c:	ldr	r7, [r6]
   15590:	cmp	r3, #1
   15594:	ble	155b8 <__assert_fail@plt+0x460c>
   15598:	sub	r5, r7, #8
   1559c:	add	r5, r5, r3, lsl #3
   155a0:	mov	r4, r7
   155a4:	ldr	r0, [r4, #12]
   155a8:	add	r4, r4, #8
   155ac:	bl	10d84 <free@plt>
   155b0:	cmp	r4, r5
   155b4:	bne	155a4 <__assert_fail@plt+0x45f8>
   155b8:	ldr	r0, [r7, #4]
   155bc:	ldr	r4, [pc, #60]	; 15600 <__assert_fail@plt+0x4654>
   155c0:	cmp	r0, r4
   155c4:	beq	155d8 <__assert_fail@plt+0x462c>
   155c8:	bl	10d84 <free@plt>
   155cc:	mov	r3, #256	; 0x100
   155d0:	str	r4, [r6, #12]
   155d4:	str	r3, [r6, #8]
   155d8:	ldr	r4, [pc, #36]	; 15604 <__assert_fail@plt+0x4658>
   155dc:	cmp	r7, r4
   155e0:	beq	155f0 <__assert_fail@plt+0x4644>
   155e4:	mov	r0, r7
   155e8:	bl	10d84 <free@plt>
   155ec:	str	r4, [r6]
   155f0:	mov	r3, #1
   155f4:	str	r3, [r6, #4]
   155f8:	pop	{r4, r5, r6, r7, r8, pc}
   155fc:	strdeq	r9, [r2], -r8
   15600:	andeq	fp, r2, r0, ror r4
   15604:	andeq	r9, r2, r0, lsl #2
   15608:	ldr	r3, [pc, #4]	; 15614 <__assert_fail@plt+0x4668>
   1560c:	mvn	r2, #0
   15610:	b	15188 <__assert_fail@plt+0x41dc>
   15614:	andeq	fp, r2, r0, ror r5
   15618:	ldr	r3, [pc]	; 15620 <__assert_fail@plt+0x4674>
   1561c:	b	15188 <__assert_fail@plt+0x41dc>
   15620:	andeq	fp, r2, r0, ror r5
   15624:	mov	r1, r0
   15628:	ldr	r3, [pc, #8]	; 15638 <__assert_fail@plt+0x468c>
   1562c:	mvn	r2, #0
   15630:	mov	r0, #0
   15634:	b	15188 <__assert_fail@plt+0x41dc>
   15638:	andeq	fp, r2, r0, ror r5
   1563c:	mov	r2, r1
   15640:	ldr	r3, [pc, #8]	; 15650 <__assert_fail@plt+0x46a4>
   15644:	mov	r1, r0
   15648:	mov	r0, #0
   1564c:	b	15188 <__assert_fail@plt+0x41dc>
   15650:	andeq	fp, r2, r0, ror r5
   15654:	push	{r4, r5, r6, lr}
   15658:	sub	sp, sp, #56	; 0x38
   1565c:	ldr	r4, [pc, #68]	; 156a8 <__assert_fail@plt+0x46fc>
   15660:	mov	r6, r2
   15664:	mov	r5, r0
   15668:	ldr	r3, [r4]
   1566c:	add	r0, sp, #4
   15670:	str	r3, [sp, #52]	; 0x34
   15674:	bl	13800 <__assert_fail@plt+0x2854>
   15678:	add	r3, sp, #4
   1567c:	mvn	r2, #0
   15680:	mov	r1, r6
   15684:	mov	r0, r5
   15688:	bl	15188 <__assert_fail@plt+0x41dc>
   1568c:	ldr	r2, [sp, #52]	; 0x34
   15690:	ldr	r3, [r4]
   15694:	cmp	r2, r3
   15698:	bne	156a4 <__assert_fail@plt+0x46f8>
   1569c:	add	sp, sp, #56	; 0x38
   156a0:	pop	{r4, r5, r6, pc}
   156a4:	bl	10df0 <__stack_chk_fail@plt>
   156a8:	andeq	r8, r2, r8, lsl #30
   156ac:	push	{r4, r5, r6, r7, lr}
   156b0:	sub	sp, sp, #60	; 0x3c
   156b4:	ldr	r4, [pc, #72]	; 15704 <__assert_fail@plt+0x4758>
   156b8:	mov	r6, r2
   156bc:	mov	r7, r3
   156c0:	ldr	ip, [r4]
   156c4:	mov	r5, r0
   156c8:	add	r0, sp, #4
   156cc:	str	ip, [sp, #52]	; 0x34
   156d0:	bl	13800 <__assert_fail@plt+0x2854>
   156d4:	add	r3, sp, #4
   156d8:	mov	r2, r7
   156dc:	mov	r1, r6
   156e0:	mov	r0, r5
   156e4:	bl	15188 <__assert_fail@plt+0x41dc>
   156e8:	ldr	r2, [sp, #52]	; 0x34
   156ec:	ldr	r3, [r4]
   156f0:	cmp	r2, r3
   156f4:	bne	15700 <__assert_fail@plt+0x4754>
   156f8:	add	sp, sp, #60	; 0x3c
   156fc:	pop	{r4, r5, r6, r7, pc}
   15700:	bl	10df0 <__stack_chk_fail@plt>
   15704:	andeq	r8, r2, r8, lsl #30
   15708:	mov	r2, r1
   1570c:	mov	r1, r0
   15710:	mov	r0, #0
   15714:	b	15654 <__assert_fail@plt+0x46a8>
   15718:	mov	r3, r2
   1571c:	mov	r2, r1
   15720:	mov	r1, r0
   15724:	mov	r0, #0
   15728:	b	156ac <__assert_fail@plt+0x4700>
   1572c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15730:	mov	r4, r2
   15734:	ldr	lr, [pc, #128]	; 157bc <__assert_fail@plt+0x4810>
   15738:	mov	r8, r0
   1573c:	mov	r9, r1
   15740:	ldm	lr!, {r0, r1, r2, r3}
   15744:	sub	sp, sp, #60	; 0x3c
   15748:	add	ip, sp, #4
   1574c:	lsr	r6, r4, #5
   15750:	stmia	ip!, {r0, r1, r2, r3}
   15754:	add	r7, sp, #12
   15758:	ldm	lr!, {r0, r1, r2, r3}
   1575c:	and	r4, r4, #31
   15760:	ldr	r5, [pc, #88]	; 157c0 <__assert_fail@plt+0x4814>
   15764:	stmia	ip!, {r0, r1, r2, r3}
   15768:	ldm	lr, {r0, r1, r2, r3}
   1576c:	stm	ip, {r0, r1, r2, r3}
   15770:	mov	r2, r9
   15774:	ldr	r3, [r7, r6, lsl #2]
   15778:	ldr	ip, [r5]
   1577c:	mov	r1, r8
   15780:	mvn	r0, r3, lsr r4
   15784:	and	r0, r0, #1
   15788:	str	ip, [sp, #52]	; 0x34
   1578c:	eor	r4, r3, r0, lsl r4
   15790:	add	r3, sp, #4
   15794:	mov	r0, #0
   15798:	str	r4, [r7, r6, lsl #2]
   1579c:	bl	15188 <__assert_fail@plt+0x41dc>
   157a0:	ldr	r2, [sp, #52]	; 0x34
   157a4:	ldr	r3, [r5]
   157a8:	cmp	r2, r3
   157ac:	bne	157b8 <__assert_fail@plt+0x480c>
   157b0:	add	sp, sp, #60	; 0x3c
   157b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   157b8:	bl	10df0 <__stack_chk_fail@plt>
   157bc:	andeq	fp, r2, r0, ror r5
   157c0:	andeq	r8, r2, r8, lsl #30
   157c4:	mov	r2, r1
   157c8:	mvn	r1, #0
   157cc:	b	1572c <__assert_fail@plt+0x4780>
   157d0:	mov	r2, #58	; 0x3a
   157d4:	mvn	r1, #0
   157d8:	b	1572c <__assert_fail@plt+0x4780>
   157dc:	mov	r2, #58	; 0x3a
   157e0:	b	1572c <__assert_fail@plt+0x4780>
   157e4:	push	{r4, r5, r6, r7, r8, lr}
   157e8:	sub	sp, sp, #104	; 0x68
   157ec:	ldr	r5, [pc, #120]	; 1586c <__assert_fail@plt+0x48c0>
   157f0:	mov	r6, r0
   157f4:	mov	r0, sp
   157f8:	ldr	r3, [r5]
   157fc:	mov	r7, r2
   15800:	str	r3, [sp, #100]	; 0x64
   15804:	bl	13800 <__assert_fail@plt+0x2854>
   15808:	mov	ip, sp
   1580c:	add	lr, sp, #52	; 0x34
   15810:	ldm	ip!, {r0, r1, r2, r3}
   15814:	stmia	lr!, {r0, r1, r2, r3}
   15818:	ldm	ip!, {r0, r1, r2, r3}
   1581c:	ldr	r8, [sp, #64]	; 0x40
   15820:	stmia	lr!, {r0, r1, r2, r3}
   15824:	mvn	r4, r8
   15828:	ldm	ip, {r0, r1, r2, r3}
   1582c:	and	ip, r4, #67108864	; 0x4000000
   15830:	eor	ip, ip, r8
   15834:	str	ip, [sp, #64]	; 0x40
   15838:	stm	lr, {r0, r1, r2, r3}
   1583c:	add	r3, sp, #52	; 0x34
   15840:	mvn	r2, #0
   15844:	mov	r1, r7
   15848:	mov	r0, r6
   1584c:	bl	15188 <__assert_fail@plt+0x41dc>
   15850:	ldr	r2, [sp, #100]	; 0x64
   15854:	ldr	r3, [r5]
   15858:	cmp	r2, r3
   1585c:	bne	15868 <__assert_fail@plt+0x48bc>
   15860:	add	sp, sp, #104	; 0x68
   15864:	pop	{r4, r5, r6, r7, r8, pc}
   15868:	bl	10df0 <__stack_chk_fail@plt>
   1586c:	andeq	r8, r2, r8, lsl #30
   15870:	push	{r4, r5, r6, r7, r8, r9, lr}
   15874:	mov	r6, r1
   15878:	ldr	lr, [pc, #132]	; 15904 <__assert_fail@plt+0x4958>
   1587c:	mov	r5, r2
   15880:	mov	r8, r0
   15884:	mov	r9, r3
   15888:	ldm	lr!, {r0, r1, r2, r3}
   1588c:	sub	sp, sp, #60	; 0x3c
   15890:	add	ip, sp, #4
   15894:	ldr	r4, [pc, #108]	; 15908 <__assert_fail@plt+0x495c>
   15898:	stmia	ip!, {r0, r1, r2, r3}
   1589c:	mov	r7, #10
   158a0:	ldm	lr!, {r0, r1, r2, r3}
   158a4:	cmp	r5, #0
   158a8:	cmpne	r6, #0
   158ac:	str	r7, [sp, #4]
   158b0:	stmia	ip!, {r0, r1, r2, r3}
   158b4:	ldm	lr, {r0, r1, r2, r3}
   158b8:	ldr	lr, [r4]
   158bc:	stm	ip, {r0, r1, r2, r3}
   158c0:	str	lr, [sp, #52]	; 0x34
   158c4:	beq	15900 <__assert_fail@plt+0x4954>
   158c8:	add	r3, sp, #4
   158cc:	ldr	r2, [sp, #88]	; 0x58
   158d0:	mov	r1, r9
   158d4:	mov	r0, r8
   158d8:	str	r6, [sp, #44]	; 0x2c
   158dc:	str	r5, [sp, #48]	; 0x30
   158e0:	bl	15188 <__assert_fail@plt+0x41dc>
   158e4:	ldr	r2, [sp, #52]	; 0x34
   158e8:	ldr	r3, [r4]
   158ec:	cmp	r2, r3
   158f0:	bne	158fc <__assert_fail@plt+0x4950>
   158f4:	add	sp, sp, #60	; 0x3c
   158f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   158fc:	bl	10df0 <__stack_chk_fail@plt>
   15900:	bl	10f94 <abort@plt>
   15904:	andeq	fp, r2, r0, ror r5
   15908:	andeq	r8, r2, r8, lsl #30
   1590c:	push	{lr}		; (str lr, [sp, #-4]!)
   15910:	sub	sp, sp, #12
   15914:	mvn	ip, #0
   15918:	str	ip, [sp]
   1591c:	bl	15870 <__assert_fail@plt+0x48c4>
   15920:	add	sp, sp, #12
   15924:	pop	{pc}		; (ldr pc, [sp], #4)
   15928:	push	{lr}		; (str lr, [sp, #-4]!)
   1592c:	sub	sp, sp, #12
   15930:	mvn	ip, #0
   15934:	mov	r3, r2
   15938:	str	ip, [sp]
   1593c:	mov	r2, r1
   15940:	mov	r1, r0
   15944:	mov	r0, #0
   15948:	bl	15870 <__assert_fail@plt+0x48c4>
   1594c:	add	sp, sp, #12
   15950:	pop	{pc}		; (ldr pc, [sp], #4)
   15954:	push	{lr}		; (str lr, [sp, #-4]!)
   15958:	sub	sp, sp, #12
   1595c:	str	r3, [sp]
   15960:	mov	r3, r2
   15964:	mov	r2, r1
   15968:	mov	r1, r0
   1596c:	mov	r0, #0
   15970:	bl	15870 <__assert_fail@plt+0x48c4>
   15974:	add	sp, sp, #12
   15978:	pop	{pc}		; (ldr pc, [sp], #4)
   1597c:	ldr	r3, [pc]	; 15984 <__assert_fail@plt+0x49d8>
   15980:	b	15188 <__assert_fail@plt+0x41dc>
   15984:	andeq	r9, r2, r8, lsl #2
   15988:	mov	r2, r1
   1598c:	ldr	r3, [pc, #8]	; 1599c <__assert_fail@plt+0x49f0>
   15990:	mov	r1, r0
   15994:	mov	r0, #0
   15998:	b	15188 <__assert_fail@plt+0x41dc>
   1599c:	andeq	r9, r2, r8, lsl #2
   159a0:	ldr	r3, [pc, #4]	; 159ac <__assert_fail@plt+0x4a00>
   159a4:	mvn	r2, #0
   159a8:	b	15188 <__assert_fail@plt+0x41dc>
   159ac:	andeq	r9, r2, r8, lsl #2
   159b0:	mov	r1, r0
   159b4:	ldr	r3, [pc, #8]	; 159c4 <__assert_fail@plt+0x4a18>
   159b8:	mvn	r2, #0
   159bc:	mov	r0, #0
   159c0:	b	15188 <__assert_fail@plt+0x41dc>
   159c4:	andeq	r9, r2, r8, lsl #2
   159c8:	push	{r4, r5, r6, r7, r8, lr}
   159cc:	mov	r8, r0
   159d0:	ldr	r5, [pc, #84]	; 15a2c <__assert_fail@plt+0x4a80>
   159d4:	mov	r7, r1
   159d8:	mov	r4, r2
   159dc:	mov	r2, r4
   159e0:	mov	r1, r7
   159e4:	mov	r0, r8
   159e8:	bl	10d6c <read@plt>
   159ec:	subs	r6, r0, #0
   159f0:	bge	15a24 <__assert_fail@plt+0x4a78>
   159f4:	bl	10eec <__errno_location@plt>
   159f8:	ldr	r3, [r0]
   159fc:	cmp	r3, #4
   15a00:	beq	159dc <__assert_fail@plt+0x4a30>
   15a04:	cmp	r4, r5
   15a08:	movls	r2, #0
   15a0c:	movhi	r2, #1
   15a10:	cmp	r3, #22
   15a14:	movne	r2, #0
   15a18:	cmp	r2, #0
   15a1c:	mov	r4, r5
   15a20:	bne	159dc <__assert_fail@plt+0x4a30>
   15a24:	mov	r0, r6
   15a28:	pop	{r4, r5, r6, r7, r8, pc}
   15a2c:	svcvc	0x00f00000	; IMB
   15a30:	push	{r4, r5, r6, lr}
   15a34:	sub	sp, sp, #32
   15a38:	cmp	r1, #0
   15a3c:	mov	r5, r0
   15a40:	ldr	r4, [sp, #48]	; 0x30
   15a44:	ldr	r6, [sp, #52]	; 0x34
   15a48:	beq	15ad8 <__assert_fail@plt+0x4b2c>
   15a4c:	strd	r2, [sp]
   15a50:	mov	r3, r1
   15a54:	ldr	r2, [pc, #828]	; 15d98 <__assert_fail@plt+0x4dec>
   15a58:	mov	r1, #1
   15a5c:	bl	10f34 <__fprintf_chk@plt>
   15a60:	mov	r2, #5
   15a64:	ldr	r1, [pc, #816]	; 15d9c <__assert_fail@plt+0x4df0>
   15a68:	mov	r0, #0
   15a6c:	bl	10de4 <dcgettext@plt>
   15a70:	ldr	r3, [pc, #808]	; 15da0 <__assert_fail@plt+0x4df4>
   15a74:	ldr	r2, [pc, #808]	; 15da4 <__assert_fail@plt+0x4df8>
   15a78:	str	r3, [sp]
   15a7c:	mov	r1, #1
   15a80:	mov	r3, r0
   15a84:	mov	r0, r5
   15a88:	bl	10f34 <__fprintf_chk@plt>
   15a8c:	ldr	r1, [pc, #788]	; 15da8 <__assert_fail@plt+0x4dfc>
   15a90:	mov	r2, #5
   15a94:	mov	r0, #0
   15a98:	bl	10de4 <dcgettext@plt>
   15a9c:	mov	r1, r5
   15aa0:	bl	10d3c <fputs_unlocked@plt>
   15aa4:	cmp	r6, #9
   15aa8:	ldrls	pc, [pc, r6, lsl #2]
   15aac:	b	15d88 <__assert_fail@plt+0x4ddc>
   15ab0:	muleq	r1, r4, sp
   15ab4:	andeq	r5, r1, ip, asr fp
   15ab8:	andeq	r5, r1, r8, lsl #23
   15abc:			; <UNDEFINED> instruction: 0x00015bbc
   15ac0:	strdeq	r5, [r1], -r8
   15ac4:	andeq	r5, r1, r8, lsr ip
   15ac8:	andeq	r5, r1, r0, lsl #25
   15acc:	ldrdeq	r5, [r1], -r0
   15ad0:	andeq	r5, r1, r8, lsr #26
   15ad4:	strdeq	r5, [r1], -r0
   15ad8:	str	r3, [sp]
   15adc:	mov	r1, #1
   15ae0:	mov	r3, r2
   15ae4:	ldr	r2, [pc, #704]	; 15dac <__assert_fail@plt+0x4e00>
   15ae8:	bl	10f34 <__fprintf_chk@plt>
   15aec:	b	15a60 <__assert_fail@plt+0x4ab4>
   15af0:	ldr	r1, [pc, #696]	; 15db0 <__assert_fail@plt+0x4e04>
   15af4:	mov	r2, #5
   15af8:	mov	r0, #0
   15afc:	bl	10de4 <dcgettext@plt>
   15b00:	ldr	r2, [r4, #32]
   15b04:	ldr	r3, [r4, #28]
   15b08:	ldr	r1, [r4, #24]
   15b0c:	str	r2, [sp, #28]
   15b10:	ldr	r2, [r4, #20]
   15b14:	str	r3, [sp, #24]
   15b18:	ldr	r3, [r4, #16]
   15b1c:	str	r1, [sp, #20]
   15b20:	ldr	r1, [r4, #12]
   15b24:	str	r2, [sp, #16]
   15b28:	ldr	r2, [r4, #8]
   15b2c:	str	r3, [sp, #12]
   15b30:	ldr	r3, [r4, #4]
   15b34:	str	r1, [sp, #8]
   15b38:	str	r2, [sp, #4]
   15b3c:	str	r3, [sp]
   15b40:	mov	r1, #1
   15b44:	ldr	r3, [r4]
   15b48:	mov	r2, r0
   15b4c:	mov	r0, r5
   15b50:	bl	10f34 <__fprintf_chk@plt>
   15b54:	add	sp, sp, #32
   15b58:	pop	{r4, r5, r6, pc}
   15b5c:	mov	r2, #5
   15b60:	ldr	r1, [pc, #588]	; 15db4 <__assert_fail@plt+0x4e08>
   15b64:	mov	r0, #0
   15b68:	bl	10de4 <dcgettext@plt>
   15b6c:	ldr	r3, [r4]
   15b70:	mov	r1, #1
   15b74:	mov	r2, r0
   15b78:	mov	r0, r5
   15b7c:	add	sp, sp, #32
   15b80:	pop	{r4, r5, r6, lr}
   15b84:	b	10f34 <__fprintf_chk@plt>
   15b88:	mov	r2, #5
   15b8c:	ldr	r1, [pc, #548]	; 15db8 <__assert_fail@plt+0x4e0c>
   15b90:	mov	r0, #0
   15b94:	bl	10de4 <dcgettext@plt>
   15b98:	ldr	r2, [r4, #4]
   15b9c:	ldr	r3, [r4]
   15ba0:	mov	r1, #1
   15ba4:	str	r2, [sp, #48]	; 0x30
   15ba8:	mov	r2, r0
   15bac:	mov	r0, r5
   15bb0:	add	sp, sp, #32
   15bb4:	pop	{r4, r5, r6, lr}
   15bb8:	b	10f34 <__fprintf_chk@plt>
   15bbc:	mov	r2, #5
   15bc0:	ldr	r1, [pc, #500]	; 15dbc <__assert_fail@plt+0x4e10>
   15bc4:	mov	r0, #0
   15bc8:	bl	10de4 <dcgettext@plt>
   15bcc:	ldr	r2, [r4, #8]
   15bd0:	ldr	r3, [r4, #4]
   15bd4:	mov	r1, #1
   15bd8:	str	r2, [sp, #52]	; 0x34
   15bdc:	str	r3, [sp, #48]	; 0x30
   15be0:	ldr	r3, [r4]
   15be4:	mov	r2, r0
   15be8:	mov	r0, r5
   15bec:	add	sp, sp, #32
   15bf0:	pop	{r4, r5, r6, lr}
   15bf4:	b	10f34 <__fprintf_chk@plt>
   15bf8:	mov	r2, #5
   15bfc:	ldr	r1, [pc, #444]	; 15dc0 <__assert_fail@plt+0x4e14>
   15c00:	mov	r0, #0
   15c04:	bl	10de4 <dcgettext@plt>
   15c08:	ldr	r1, [r4, #12]
   15c0c:	ldr	r2, [r4, #8]
   15c10:	ldr	r3, [r4, #4]
   15c14:	str	r1, [sp, #8]
   15c18:	str	r2, [sp, #4]
   15c1c:	str	r3, [sp]
   15c20:	mov	r1, #1
   15c24:	ldr	r3, [r4]
   15c28:	mov	r2, r0
   15c2c:	mov	r0, r5
   15c30:	bl	10f34 <__fprintf_chk@plt>
   15c34:	b	15b54 <__assert_fail@plt+0x4ba8>
   15c38:	mov	r2, #5
   15c3c:	ldr	r1, [pc, #384]	; 15dc4 <__assert_fail@plt+0x4e18>
   15c40:	mov	r0, #0
   15c44:	bl	10de4 <dcgettext@plt>
   15c48:	ldr	r3, [r4, #16]
   15c4c:	ldr	r1, [r4, #12]
   15c50:	ldr	r2, [r4, #8]
   15c54:	str	r3, [sp, #12]
   15c58:	ldr	r3, [r4, #4]
   15c5c:	str	r1, [sp, #8]
   15c60:	str	r2, [sp, #4]
   15c64:	str	r3, [sp]
   15c68:	mov	r1, #1
   15c6c:	ldr	r3, [r4]
   15c70:	mov	r2, r0
   15c74:	mov	r0, r5
   15c78:	bl	10f34 <__fprintf_chk@plt>
   15c7c:	b	15b54 <__assert_fail@plt+0x4ba8>
   15c80:	mov	r2, #5
   15c84:	ldr	r1, [pc, #316]	; 15dc8 <__assert_fail@plt+0x4e1c>
   15c88:	mov	r0, #0
   15c8c:	bl	10de4 <dcgettext@plt>
   15c90:	ldr	r2, [r4, #20]
   15c94:	ldr	r3, [r4, #16]
   15c98:	ldr	r1, [r4, #12]
   15c9c:	str	r2, [sp, #16]
   15ca0:	ldr	r2, [r4, #8]
   15ca4:	str	r3, [sp, #12]
   15ca8:	ldr	r3, [r4, #4]
   15cac:	str	r1, [sp, #8]
   15cb0:	str	r2, [sp, #4]
   15cb4:	str	r3, [sp]
   15cb8:	mov	r1, #1
   15cbc:	ldr	r3, [r4]
   15cc0:	mov	r2, r0
   15cc4:	mov	r0, r5
   15cc8:	bl	10f34 <__fprintf_chk@plt>
   15ccc:	b	15b54 <__assert_fail@plt+0x4ba8>
   15cd0:	mov	r2, #5
   15cd4:	ldr	r1, [pc, #240]	; 15dcc <__assert_fail@plt+0x4e20>
   15cd8:	mov	r0, #0
   15cdc:	bl	10de4 <dcgettext@plt>
   15ce0:	ldr	r1, [r4, #24]
   15ce4:	ldr	r2, [r4, #20]
   15ce8:	ldr	r3, [r4, #16]
   15cec:	str	r1, [sp, #20]
   15cf0:	ldr	r1, [r4, #12]
   15cf4:	str	r2, [sp, #16]
   15cf8:	ldr	r2, [r4, #8]
   15cfc:	str	r3, [sp, #12]
   15d00:	ldr	r3, [r4, #4]
   15d04:	str	r1, [sp, #8]
   15d08:	str	r2, [sp, #4]
   15d0c:	str	r3, [sp]
   15d10:	mov	r1, #1
   15d14:	ldr	r3, [r4]
   15d18:	mov	r2, r0
   15d1c:	mov	r0, r5
   15d20:	bl	10f34 <__fprintf_chk@plt>
   15d24:	b	15b54 <__assert_fail@plt+0x4ba8>
   15d28:	mov	r2, #5
   15d2c:	ldr	r1, [pc, #156]	; 15dd0 <__assert_fail@plt+0x4e24>
   15d30:	mov	r0, #0
   15d34:	bl	10de4 <dcgettext@plt>
   15d38:	ldr	r3, [r4, #28]
   15d3c:	ldr	r1, [r4, #24]
   15d40:	ldr	r2, [r4, #20]
   15d44:	str	r3, [sp, #24]
   15d48:	ldr	r3, [r4, #16]
   15d4c:	str	r1, [sp, #20]
   15d50:	ldr	r1, [r4, #12]
   15d54:	str	r2, [sp, #16]
   15d58:	ldr	r2, [r4, #8]
   15d5c:	str	r3, [sp, #12]
   15d60:	ldr	r3, [r4, #4]
   15d64:	str	r1, [sp, #8]
   15d68:	str	r2, [sp, #4]
   15d6c:	str	r3, [sp]
   15d70:	mov	r1, #1
   15d74:	ldr	r3, [r4]
   15d78:	mov	r2, r0
   15d7c:	mov	r0, r5
   15d80:	bl	10f34 <__fprintf_chk@plt>
   15d84:	b	15b54 <__assert_fail@plt+0x4ba8>
   15d88:	mov	r2, #5
   15d8c:	ldr	r1, [pc, #64]	; 15dd4 <__assert_fail@plt+0x4e28>
   15d90:	b	15af8 <__assert_fail@plt+0x4b4c>
   15d94:	bl	10f94 <abort@plt>
   15d98:	andeq	r8, r1, r4, lsl #13
   15d9c:	muleq	r1, r8, r6
   15da0:	andeq	r0, r0, r2, ror #15
   15da4:	andeq	r8, r1, ip, ror #18
   15da8:	muleq	r1, ip, r6
   15dac:	muleq	r1, r0, r6
   15db0:	andeq	r8, r1, r4, ror r8
   15db4:	andeq	r8, r1, r8, ror #14
   15db8:	andeq	r8, r1, r8, ror r7
   15dbc:	muleq	r1, r0, r7
   15dc0:	andeq	r8, r1, ip, lsr #15
   15dc4:	andeq	r8, r1, ip, asr #15
   15dc8:	strdeq	r8, [r1], -r0
   15dcc:	andeq	r8, r1, r8, lsl r8
   15dd0:	andeq	r8, r1, r4, asr #16
   15dd4:	andeq	r8, r1, r8, lsr #17
   15dd8:	push	{r4, r5, lr}
   15ddc:	sub	sp, sp, #12
   15de0:	ldr	r5, [sp, #24]
   15de4:	ldr	ip, [r5]
   15de8:	cmp	ip, #0
   15dec:	beq	15e08 <__assert_fail@plt+0x4e5c>
   15df0:	mov	lr, r5
   15df4:	mov	ip, #0
   15df8:	ldr	r4, [lr, #4]!
   15dfc:	add	ip, ip, #1
   15e00:	cmp	r4, #0
   15e04:	bne	15df8 <__assert_fail@plt+0x4e4c>
   15e08:	stm	sp, {r5, ip}
   15e0c:	bl	15a30 <__assert_fail@plt+0x4a84>
   15e10:	add	sp, sp, #12
   15e14:	pop	{r4, r5, pc}
   15e18:	push	{r4, r5, r6, lr}
   15e1c:	sub	sp, sp, #56	; 0x38
   15e20:	ldr	r6, [pc, #88]	; 15e80 <__assert_fail@plt+0x4ed4>
   15e24:	ldr	r5, [sp, #72]	; 0x48
   15e28:	add	r4, sp, #8
   15e2c:	ldr	ip, [r6]
   15e30:	str	ip, [sp, #52]	; 0x34
   15e34:	mov	ip, #0
   15e38:	ldr	lr, [r5], #4
   15e3c:	cmp	lr, #0
   15e40:	str	lr, [r4, #4]!
   15e44:	beq	15e54 <__assert_fail@plt+0x4ea8>
   15e48:	add	ip, ip, #1
   15e4c:	cmp	ip, #10
   15e50:	bne	15e38 <__assert_fail@plt+0x4e8c>
   15e54:	add	lr, sp, #12
   15e58:	str	ip, [sp, #4]
   15e5c:	str	lr, [sp]
   15e60:	bl	15a30 <__assert_fail@plt+0x4a84>
   15e64:	ldr	r2, [sp, #52]	; 0x34
   15e68:	ldr	r3, [r6]
   15e6c:	cmp	r2, r3
   15e70:	bne	15e7c <__assert_fail@plt+0x4ed0>
   15e74:	add	sp, sp, #56	; 0x38
   15e78:	pop	{r4, r5, r6, pc}
   15e7c:	bl	10df0 <__stack_chk_fail@plt>
   15e80:	andeq	r8, r2, r8, lsl #30
   15e84:	push	{r3}		; (str r3, [sp, #-4]!)
   15e88:	mov	ip, #0
   15e8c:	push	{r4, r5, r6, lr}
   15e90:	sub	sp, sp, #60	; 0x3c
   15e94:	ldr	r6, [pc, #100]	; 15f00 <__assert_fail@plt+0x4f54>
   15e98:	add	r5, sp, #8
   15e9c:	add	r4, sp, #80	; 0x50
   15ea0:	ldr	r3, [r6]
   15ea4:	str	r4, [sp, #8]
   15ea8:	str	r3, [sp, #52]	; 0x34
   15eac:	ldr	r3, [sp, #76]	; 0x4c
   15eb0:	ldr	lr, [r4], #4
   15eb4:	cmp	lr, #0
   15eb8:	str	lr, [r5, #4]!
   15ebc:	beq	15ecc <__assert_fail@plt+0x4f20>
   15ec0:	add	ip, ip, #1
   15ec4:	cmp	ip, #10
   15ec8:	bne	15eb0 <__assert_fail@plt+0x4f04>
   15ecc:	add	lr, sp, #12
   15ed0:	str	ip, [sp, #4]
   15ed4:	str	lr, [sp]
   15ed8:	bl	15a30 <__assert_fail@plt+0x4a84>
   15edc:	ldr	r2, [sp, #52]	; 0x34
   15ee0:	ldr	r3, [r6]
   15ee4:	cmp	r2, r3
   15ee8:	bne	15efc <__assert_fail@plt+0x4f50>
   15eec:	add	sp, sp, #60	; 0x3c
   15ef0:	pop	{r4, r5, r6, lr}
   15ef4:	add	sp, sp, #4
   15ef8:	bx	lr
   15efc:	bl	10df0 <__stack_chk_fail@plt>
   15f00:	andeq	r8, r2, r8, lsl #30
   15f04:	push	{r4, lr}
   15f08:	mov	r2, #5
   15f0c:	ldr	r1, [pc, #88]	; 15f6c <__assert_fail@plt+0x4fc0>
   15f10:	mov	r0, #0
   15f14:	bl	10de4 <dcgettext@plt>
   15f18:	ldr	r2, [pc, #80]	; 15f70 <__assert_fail@plt+0x4fc4>
   15f1c:	mov	r1, r0
   15f20:	mov	r0, #1
   15f24:	bl	10f1c <__printf_chk@plt>
   15f28:	mov	r2, #5
   15f2c:	ldr	r1, [pc, #64]	; 15f74 <__assert_fail@plt+0x4fc8>
   15f30:	mov	r0, #0
   15f34:	bl	10de4 <dcgettext@plt>
   15f38:	ldr	r3, [pc, #56]	; 15f78 <__assert_fail@plt+0x4fcc>
   15f3c:	ldr	r2, [pc, #56]	; 15f7c <__assert_fail@plt+0x4fd0>
   15f40:	mov	r1, r0
   15f44:	mov	r0, #1
   15f48:	bl	10f1c <__printf_chk@plt>
   15f4c:	ldr	r1, [pc, #44]	; 15f80 <__assert_fail@plt+0x4fd4>
   15f50:	mov	r2, #5
   15f54:	mov	r0, #0
   15f58:	bl	10de4 <dcgettext@plt>
   15f5c:	ldr	r3, [pc, #32]	; 15f84 <__assert_fail@plt+0x4fd8>
   15f60:	pop	{r4, lr}
   15f64:	ldr	r1, [r3]
   15f68:	b	10d3c <fputs_unlocked@plt>
   15f6c:	andeq	r8, r1, r4, ror #17
   15f70:	strdeq	r8, [r1], -ip
   15f74:	andeq	r8, r1, r4, lsl r9
   15f78:	andeq	r7, r1, r4, asr #30
   15f7c:	andeq	r7, r1, ip, ror #30
   15f80:	andeq	r8, r1, r8, lsr #18
   15f84:	andeq	r9, r2, r4, asr r1
   15f88:	push	{r4, lr}
   15f8c:	mov	r4, r0
   15f90:	bl	10e68 <malloc@plt>
   15f94:	adds	r4, r4, #0
   15f98:	movne	r4, #1
   15f9c:	cmp	r0, #0
   15fa0:	movne	r4, #0
   15fa4:	cmp	r4, #0
   15fa8:	popeq	{r4, pc}
   15fac:	bl	161d0 <__assert_fail@plt+0x5224>
   15fb0:	push	{r4, r5, r6, lr}
   15fb4:	umull	r4, r5, r0, r1
   15fb8:	adds	r3, r5, #0
   15fbc:	movne	r3, #1
   15fc0:	cmp	r4, #0
   15fc4:	blt	15fdc <__assert_fail@plt+0x5030>
   15fc8:	cmp	r3, #0
   15fcc:	bne	15fdc <__assert_fail@plt+0x5030>
   15fd0:	mul	r0, r1, r0
   15fd4:	pop	{r4, r5, r6, lr}
   15fd8:	b	15f88 <__assert_fail@plt+0x4fdc>
   15fdc:	bl	161d0 <__assert_fail@plt+0x5224>
   15fe0:	b	15f88 <__assert_fail@plt+0x4fdc>
   15fe4:	adds	r3, r0, #0
   15fe8:	movne	r3, #1
   15fec:	cmp	r1, #0
   15ff0:	movne	r3, #0
   15ff4:	cmp	r3, #0
   15ff8:	push	{r4, lr}
   15ffc:	bne	16024 <__assert_fail@plt+0x5078>
   16000:	mov	r4, r1
   16004:	bl	10dfc <realloc@plt>
   16008:	adds	r4, r4, #0
   1600c:	movne	r4, #1
   16010:	cmp	r0, #0
   16014:	movne	r4, #0
   16018:	cmp	r4, #0
   1601c:	popeq	{r4, pc}
   16020:	bl	161d0 <__assert_fail@plt+0x5224>
   16024:	bl	10d84 <free@plt>
   16028:	mov	r0, #0
   1602c:	pop	{r4, pc}
   16030:	push	{r4, r5, r6, lr}
   16034:	umull	r4, r5, r1, r2
   16038:	adds	r3, r5, #0
   1603c:	movne	r3, #1
   16040:	cmp	r4, #0
   16044:	blt	1605c <__assert_fail@plt+0x50b0>
   16048:	cmp	r3, #0
   1604c:	bne	1605c <__assert_fail@plt+0x50b0>
   16050:	mul	r1, r2, r1
   16054:	pop	{r4, r5, r6, lr}
   16058:	b	15fe4 <__assert_fail@plt+0x5038>
   1605c:	bl	161d0 <__assert_fail@plt+0x5224>
   16060:	push	{r4, r5, r6, r7, r8, lr}
   16064:	subs	r7, r0, #0
   16068:	mov	r6, r1
   1606c:	mov	r5, r2
   16070:	ldr	r4, [r1]
   16074:	beq	160a8 <__assert_fail@plt+0x50fc>
   16078:	mov	r1, r2
   1607c:	ldr	r0, [pc, #104]	; 160ec <__assert_fail@plt+0x5140>
   16080:	bl	16f2c <__assert_fail@plt+0x5f80>
   16084:	cmp	r0, r4
   16088:	bls	160cc <__assert_fail@plt+0x5120>
   1608c:	add	r3, r4, #1
   16090:	add	r4, r3, r4, lsr #1
   16094:	str	r4, [r6]
   16098:	mul	r1, r5, r4
   1609c:	mov	r0, r7
   160a0:	pop	{r4, r5, r6, r7, r8, lr}
   160a4:	b	15fe4 <__assert_fail@plt+0x5038>
   160a8:	cmp	r4, #0
   160ac:	beq	160d0 <__assert_fail@plt+0x5124>
   160b0:	umull	r0, r1, r4, r5
   160b4:	adds	r3, r1, #0
   160b8:	movne	r3, #1
   160bc:	cmp	r0, #0
   160c0:	blt	160cc <__assert_fail@plt+0x5120>
   160c4:	cmp	r3, #0
   160c8:	beq	16094 <__assert_fail@plt+0x50e8>
   160cc:	bl	161d0 <__assert_fail@plt+0x5224>
   160d0:	mov	r1, r2
   160d4:	mov	r0, #64	; 0x40
   160d8:	bl	16f2c <__assert_fail@plt+0x5f80>
   160dc:	cmp	r5, #64	; 0x40
   160e0:	movls	r4, r0
   160e4:	addhi	r4, r0, #1
   160e8:	b	160b0 <__assert_fail@plt+0x5104>
   160ec:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   160f0:	cmp	r0, #0
   160f4:	ldr	r3, [r1]
   160f8:	beq	1611c <__assert_fail@plt+0x5170>
   160fc:	ldr	r2, [pc, #60]	; 16140 <__assert_fail@plt+0x5194>
   16100:	cmp	r3, r2
   16104:	bhi	16138 <__assert_fail@plt+0x518c>
   16108:	add	r2, r3, #1
   1610c:	add	r3, r2, r3, lsr #1
   16110:	str	r3, [r1]
   16114:	mov	r1, r3
   16118:	b	15fe4 <__assert_fail@plt+0x5038>
   1611c:	cmp	r3, #0
   16120:	bne	16134 <__assert_fail@plt+0x5188>
   16124:	mov	r3, #64	; 0x40
   16128:	str	r3, [r1]
   1612c:	mov	r1, r3
   16130:	b	15fe4 <__assert_fail@plt+0x5038>
   16134:	bge	16110 <__assert_fail@plt+0x5164>
   16138:	push	{r4, lr}
   1613c:	bl	161d0 <__assert_fail@plt+0x5224>
   16140:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   16144:	push	{r4, lr}
   16148:	mov	r4, r0
   1614c:	bl	15f88 <__assert_fail@plt+0x4fdc>
   16150:	mov	r2, r4
   16154:	mov	r1, #0
   16158:	pop	{r4, lr}
   1615c:	b	10f10 <memset@plt>
   16160:	push	{r4, r5, r6, lr}
   16164:	umull	r4, r5, r0, r1
   16168:	adds	r3, r5, #0
   1616c:	movne	r3, #1
   16170:	cmp	r4, #0
   16174:	blt	1618c <__assert_fail@plt+0x51e0>
   16178:	cmp	r3, #0
   1617c:	bne	1618c <__assert_fail@plt+0x51e0>
   16180:	bl	10d30 <calloc@plt>
   16184:	cmp	r0, #0
   16188:	popne	{r4, r5, r6, pc}
   1618c:	bl	161d0 <__assert_fail@plt+0x5224>
   16190:	push	{r4, r5, r6, lr}
   16194:	mov	r4, r1
   16198:	mov	r5, r0
   1619c:	mov	r0, r1
   161a0:	bl	15f88 <__assert_fail@plt+0x4fdc>
   161a4:	mov	r2, r4
   161a8:	mov	r1, r5
   161ac:	pop	{r4, r5, r6, lr}
   161b0:	b	10d9c <memcpy@plt>
   161b4:	push	{r4, lr}
   161b8:	mov	r4, r0
   161bc:	bl	10ed4 <strlen@plt>
   161c0:	add	r1, r0, #1
   161c4:	mov	r0, r4
   161c8:	pop	{r4, lr}
   161cc:	b	16190 <__assert_fail@plt+0x51e4>
   161d0:	ldr	r3, [pc, #44]	; 16204 <__assert_fail@plt+0x5258>
   161d4:	push	{r4, lr}
   161d8:	mov	r2, #5
   161dc:	ldr	r1, [pc, #36]	; 16208 <__assert_fail@plt+0x525c>
   161e0:	mov	r0, #0
   161e4:	ldr	r4, [r3]
   161e8:	bl	10de4 <dcgettext@plt>
   161ec:	ldr	r2, [pc, #24]	; 1620c <__assert_fail@plt+0x5260>
   161f0:	mov	r1, #0
   161f4:	mov	r3, r0
   161f8:	mov	r0, r4
   161fc:	bl	10e5c <error@plt>
   16200:	bl	10f94 <abort@plt>
   16204:	strdeq	r9, [r2], -r4
   16208:	muleq	r1, ip, r9
   1620c:	andeq	r8, r1, r8, ror #10
   16210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16214:	sub	sp, sp, #36	; 0x24
   16218:	ldr	r5, [pc, #2536]	; 16c08 <__assert_fail@plt+0x5c5c>
   1621c:	mov	r9, r2
   16220:	cmp	r2, #36	; 0x24
   16224:	str	r3, [sp, #12]
   16228:	ldr	r2, [r5]
   1622c:	ldr	r3, [sp, #72]	; 0x48
   16230:	str	r2, [sp, #28]
   16234:	str	r3, [sp]
   16238:	bhi	16bf4 <__assert_fail@plt+0x5c48>
   1623c:	cmp	r1, #0
   16240:	mov	r4, r1
   16244:	mov	r6, r0
   16248:	addeq	r4, sp, #24
   1624c:	bl	10eec <__errno_location@plt>
   16250:	mov	r3, #0
   16254:	str	r3, [r0]
   16258:	mov	r7, r0
   1625c:	bl	10ebc <__ctype_b_loc@plt>
   16260:	ldrb	r3, [r6]
   16264:	mov	r1, r6
   16268:	ldr	r0, [r0]
   1626c:	b	16274 <__assert_fail@plt+0x52c8>
   16270:	ldrb	r3, [r1, #1]!
   16274:	lsl	r2, r3, #1
   16278:	ldrh	r8, [r0, r2]
   1627c:	ands	r8, r8, #8192	; 0x2000
   16280:	bne	16270 <__assert_fail@plt+0x52c4>
   16284:	cmp	r3, #45	; 0x2d
   16288:	beq	16324 <__assert_fail@plt+0x5378>
   1628c:	mov	r2, r9
   16290:	mov	r3, r8
   16294:	mov	r1, r4
   16298:	mov	r0, r6
   1629c:	bl	10da8 <__strtoull_internal@plt>
   162a0:	ldr	r9, [r4]
   162a4:	cmp	r9, r6
   162a8:	mov	sl, r0
   162ac:	mov	fp, r1
   162b0:	beq	1630c <__assert_fail@plt+0x5360>
   162b4:	ldr	r8, [r7]
   162b8:	cmp	r8, #0
   162bc:	bne	162fc <__assert_fail@plt+0x5350>
   162c0:	ldr	r3, [sp]
   162c4:	cmp	r3, #0
   162c8:	beq	162d8 <__assert_fail@plt+0x532c>
   162cc:	ldrb	r6, [r9]
   162d0:	cmp	r6, #0
   162d4:	bne	166ac <__assert_fail@plt+0x5700>
   162d8:	ldr	r3, [sp, #12]
   162dc:	strd	sl, [r3]
   162e0:	ldr	r2, [sp, #28]
   162e4:	ldr	r3, [r5]
   162e8:	mov	r0, r8
   162ec:	cmp	r2, r3
   162f0:	bne	16bf0 <__assert_fail@plt+0x5c44>
   162f4:	add	sp, sp, #36	; 0x24
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162fc:	cmp	r8, #34	; 0x22
   16300:	bne	16324 <__assert_fail@plt+0x5378>
   16304:	mov	r8, #1
   16308:	b	162c0 <__assert_fail@plt+0x5314>
   1630c:	ldr	r0, [sp]
   16310:	cmp	r0, #0
   16314:	beq	16324 <__assert_fail@plt+0x5378>
   16318:	ldrb	r6, [r6]
   1631c:	cmp	r6, #0
   16320:	bne	1632c <__assert_fail@plt+0x5380>
   16324:	mov	r8, #4
   16328:	b	162e0 <__assert_fail@plt+0x5334>
   1632c:	mov	r1, r6
   16330:	bl	10ee0 <strchr@plt>
   16334:	cmp	r0, #0
   16338:	movne	sl, #1
   1633c:	movne	fp, #0
   16340:	beq	16324 <__assert_fail@plt+0x5378>
   16344:	sub	r7, r6, #69	; 0x45
   16348:	cmp	r7, #47	; 0x2f
   1634c:	ldrls	pc, [pc, r7, lsl #2]
   16350:	b	16510 <__assert_fail@plt+0x5564>
   16354:	andeq	r6, r1, r4, lsl r4
   16358:	andeq	r6, r1, r0, lsl r5
   1635c:	andeq	r6, r1, r4, lsl r4
   16360:	andeq	r6, r1, r0, lsl r5
   16364:	andeq	r6, r1, r0, lsl r5
   16368:	andeq	r6, r1, r0, lsl r5
   1636c:	andeq	r6, r1, r4, lsl r4
   16370:	andeq	r6, r1, r0, lsl r5
   16374:	andeq	r6, r1, r4, lsl r4
   16378:	andeq	r6, r1, r0, lsl r5
   1637c:	andeq	r6, r1, r0, lsl r5
   16380:	andeq	r6, r1, r4, lsl r4
   16384:	andeq	r6, r1, r0, lsl r5
   16388:	andeq	r6, r1, r0, lsl r5
   1638c:	andeq	r6, r1, r0, lsl r5
   16390:	andeq	r6, r1, r4, lsl r4
   16394:	andeq	r6, r1, r0, lsl r5
   16398:	andeq	r6, r1, r0, lsl r5
   1639c:	andeq	r6, r1, r0, lsl r5
   163a0:	andeq	r6, r1, r0, lsl r5
   163a4:	andeq	r6, r1, r4, lsl r4
   163a8:	andeq	r6, r1, r4, lsl r4
   163ac:	andeq	r6, r1, r0, lsl r5
   163b0:	andeq	r6, r1, r0, lsl r5
   163b4:	andeq	r6, r1, r0, lsl r5
   163b8:	andeq	r6, r1, r0, lsl r5
   163bc:	andeq	r6, r1, r0, lsl r5
   163c0:	andeq	r6, r1, r0, lsl r5
   163c4:	andeq	r6, r1, r0, lsl r5
   163c8:	andeq	r6, r1, r0, lsl r5
   163cc:	andeq	r6, r1, r0, lsl r5
   163d0:	andeq	r6, r1, r0, lsl r5
   163d4:	andeq	r6, r1, r0, lsl r5
   163d8:	andeq	r6, r1, r0, lsl r5
   163dc:	andeq	r6, r1, r4, lsl r4
   163e0:	andeq	r6, r1, r0, lsl r5
   163e4:	andeq	r6, r1, r0, lsl r5
   163e8:	andeq	r6, r1, r0, lsl r5
   163ec:	andeq	r6, r1, r4, lsl r4
   163f0:	andeq	r6, r1, r0, lsl r5
   163f4:	andeq	r6, r1, r4, lsl r4
   163f8:	andeq	r6, r1, r0, lsl r5
   163fc:	andeq	r6, r1, r0, lsl r5
   16400:	andeq	r6, r1, r0, lsl r5
   16404:	andeq	r6, r1, r0, lsl r5
   16408:	andeq	r6, r1, r0, lsl r5
   1640c:	andeq	r6, r1, r0, lsl r5
   16410:	andeq	r6, r1, r4, lsl r4
   16414:	ldr	r0, [sp]
   16418:	mov	r1, #48	; 0x30
   1641c:	bl	10ee0 <strchr@plt>
   16420:	cmp	r0, #0
   16424:	beq	16510 <__assert_fail@plt+0x5564>
   16428:	ldrb	r3, [r9, #1]
   1642c:	cmp	r3, #68	; 0x44
   16430:	beq	16af0 <__assert_fail@plt+0x5b44>
   16434:	cmp	r3, #105	; 0x69
   16438:	beq	166d0 <__assert_fail@plt+0x5724>
   1643c:	cmp	r3, #66	; 0x42
   16440:	beq	16af0 <__assert_fail@plt+0x5b44>
   16444:	cmp	r7, #47	; 0x2f
   16448:	ldrls	pc, [pc, r7, lsl #2]
   1644c:	b	166c0 <__assert_fail@plt+0x5714>
   16450:	ldrdeq	r6, [r1], -r4
   16454:	andeq	r6, r1, r0, asr #13
   16458:	andeq	r6, r1, r4, asr #21
   1645c:	andeq	r6, r1, r0, asr #13
   16460:	andeq	r6, r1, r0, asr #13
   16464:	andeq	r6, r1, r0, asr #13
   16468:			; <UNDEFINED> instruction: 0x00016ab4
   1646c:	andeq	r6, r1, r0, asr #13
   16470:	andeq	r6, r1, r4, lsr #21
   16474:	andeq	r6, r1, r0, asr #13
   16478:	andeq	r6, r1, r0, asr #13
   1647c:	muleq	r1, r4, sl
   16480:	andeq	r6, r1, r0, asr #13
   16484:	andeq	r6, r1, r0, asr #13
   16488:	andeq	r6, r1, r0, asr #13
   1648c:	andeq	r6, r1, r4, lsl #21
   16490:	andeq	r6, r1, r0, asr #13
   16494:	andeq	r6, r1, r0, asr #13
   16498:	andeq	r6, r1, r0, asr #13
   1649c:	andeq	r6, r1, r0, asr #13
   164a0:	andeq	r6, r1, r4, ror sl
   164a4:	andeq	r6, r1, r4, ror #20
   164a8:	andeq	r6, r1, r0, asr #13
   164ac:	andeq	r6, r1, r0, asr #13
   164b0:	andeq	r6, r1, r0, asr #13
   164b4:	andeq	r6, r1, r0, asr #13
   164b8:	andeq	r6, r1, r0, asr #13
   164bc:	andeq	r6, r1, r0, asr #13
   164c0:	andeq	r6, r1, r0, asr #13
   164c4:	andeq	r6, r1, ip, lsl #14
   164c8:	andeq	r6, r1, ip, asr sl
   164cc:	andeq	r6, r1, r0, asr #13
   164d0:	andeq	r6, r1, r0, asr #13
   164d4:	andeq	r6, r1, r0, asr #13
   164d8:	andeq	r6, r1, r4, asr #21
   164dc:	andeq	r6, r1, r0, asr #13
   164e0:	andeq	r6, r1, r0, asr #13
   164e4:	andeq	r6, r1, r0, asr #13
   164e8:			; <UNDEFINED> instruction: 0x00016ab4
   164ec:	andeq	r6, r1, r0, asr #13
   164f0:	andeq	r6, r1, r4, lsr #21
   164f4:	andeq	r6, r1, r0, asr #13
   164f8:	andeq	r6, r1, r0, asr #13
   164fc:	andeq	r6, r1, r0, asr #13
   16500:	andeq	r6, r1, r0, asr #13
   16504:	andeq	r6, r1, r0, asr #13
   16508:	andeq	r6, r1, r0, asr #13
   1650c:	andeq	r6, r1, r4, lsl #21
   16510:	mov	lr, #1
   16514:	mov	r0, #1024	; 0x400
   16518:	sub	r6, r6, #66	; 0x42
   1651c:	cmp	r6, #53	; 0x35
   16520:	ldrls	pc, [pc, r6, lsl #2]
   16524:	b	166c0 <__assert_fail@plt+0x5714>
   16528:	andeq	r6, r1, r4, lsr r7
   1652c:	andeq	r6, r1, r0, asr #13
   16530:	andeq	r6, r1, r0, asr #13
   16534:	andeq	r6, r1, r8, asr r7
   16538:	andeq	r6, r1, r0, asr #13
   1653c:	andeq	r6, r1, r0, lsl #12
   16540:	andeq	r6, r1, r0, asr #13
   16544:	andeq	r6, r1, r0, asr #13
   16548:	andeq	r6, r1, r0, asr #13
   1654c:	andeq	r6, r1, r0, asr r8
   16550:	andeq	r6, r1, r0, asr #13
   16554:	strdeq	r6, [r1], -r4
   16558:	andeq	r6, r1, r0, asr #13
   1655c:	andeq	r6, r1, r0, asr #13
   16560:	andeq	r6, r1, r8, ror r9
   16564:	andeq	r6, r1, r0, asr #13
   16568:	andeq	r6, r1, r0, asr #13
   1656c:	andeq	r6, r1, r0, asr #13
   16570:	strdeq	r6, [r1], -ip
   16574:	andeq	r6, r1, r0, asr #13
   16578:	andeq	r6, r1, r0, asr #13
   1657c:	andeq	r6, r1, r0, asr #13
   16580:	andeq	r6, r1, r0, asr #13
   16584:	andeq	r6, r1, r0, lsl #17
   16588:	ldrdeq	r6, [r1], -r4
   1658c:	andeq	r6, r1, r0, asr #13
   16590:	andeq	r6, r1, r0, asr #13
   16594:	andeq	r6, r1, r0, asr #13
   16598:	andeq	r6, r1, r0, asr #13
   1659c:	andeq	r6, r1, r0, asr #13
   165a0:	andeq	r6, r1, r0, asr #13
   165a4:	andeq	r6, r1, r0, asr #13
   165a8:	andeq	r6, r1, r0, lsl r7
   165ac:	muleq	r1, r4, r6
   165b0:	andeq	r6, r1, r0, asr #13
   165b4:	andeq	r6, r1, r0, asr #13
   165b8:	andeq	r6, r1, r0, asr #13
   165bc:	andeq	r6, r1, r0, lsl #12
   165c0:	andeq	r6, r1, r0, asr #13
   165c4:	andeq	r6, r1, r0, asr #13
   165c8:	andeq	r6, r1, r0, asr #13
   165cc:	andeq	r6, r1, r0, asr r8
   165d0:	andeq	r6, r1, r0, asr #13
   165d4:	strdeq	r6, [r1], -r4
   165d8:	andeq	r6, r1, r0, asr #13
   165dc:	andeq	r6, r1, r0, asr #13
   165e0:	andeq	r6, r1, r0, asr #13
   165e4:	andeq	r6, r1, r0, asr #13
   165e8:	andeq	r6, r1, r0, asr #13
   165ec:	andeq	r6, r1, r0, asr #13
   165f0:	strdeq	r6, [r1], -ip
   165f4:	andeq	r6, r1, r0, asr #13
   165f8:	andeq	r6, r1, r0, asr #13
   165fc:	andeq	r6, r1, r8, ror #13
   16600:	asr	r1, r0, #31
   16604:	mov	r2, #0
   16608:	mov	r3, #0
   1660c:	cmp	fp, #0
   16610:	strd	r2, [sp]
   16614:	bne	16b34 <__assert_fail@plt+0x5b88>
   16618:	ldrd	r2, [sp]
   1661c:	orrs	r3, r2, r3
   16620:	bne	16b24 <__assert_fail@plt+0x5b78>
   16624:	mul	r3, sl, r1
   16628:	umull	r6, r7, sl, r0
   1662c:	mla	r3, r0, fp, r3
   16630:	ldrd	sl, [sp]
   16634:	add	ip, r3, r7
   16638:	cmp	ip, #0
   1663c:	mov	r7, ip
   16640:	bne	16bc8 <__assert_fail@plt+0x5c1c>
   16644:	orrs	r3, sl, fp
   16648:	bne	16b24 <__assert_fail@plt+0x5b78>
   1664c:	umull	r2, r3, r6, r0
   16650:	mul	ip, r6, r1
   16654:	strd	r2, [sp]
   16658:	mla	r3, r0, r7, ip
   1665c:	ldr	r2, [sp, #4]
   16660:	add	ip, r3, r2
   16664:	cmp	ip, #0
   16668:	str	ip, [sp, #4]
   1666c:	bne	16ba4 <__assert_fail@plt+0x5bf8>
   16670:	orrs	r3, sl, fp
   16674:	bne	16b24 <__assert_fail@plt+0x5b78>
   16678:	ldrd	r6, [sp]
   1667c:	mov	r3, #0
   16680:	mul	r2, r6, r1
   16684:	umull	sl, fp, r6, r0
   16688:	mla	r2, r0, r7, r2
   1668c:	add	fp, r2, fp
   16690:	orr	r8, r8, r3
   16694:	add	r3, r9, lr
   16698:	str	r3, [r4]
   1669c:	ldrb	r3, [r9, lr]
   166a0:	cmp	r3, #0
   166a4:	orrne	r8, r8, #2
   166a8:	b	162d8 <__assert_fail@plt+0x532c>
   166ac:	mov	r1, r6
   166b0:	ldr	r0, [sp]
   166b4:	bl	10ee0 <strchr@plt>
   166b8:	cmp	r0, #0
   166bc:	bne	16344 <__assert_fail@plt+0x5398>
   166c0:	ldr	r3, [sp, #12]
   166c4:	orr	r8, r8, #2
   166c8:	strd	sl, [r3]
   166cc:	b	162e0 <__assert_fail@plt+0x5334>
   166d0:	ldrb	r3, [r9, #2]
   166d4:	mov	r0, #1024	; 0x400
   166d8:	cmp	r3, #66	; 0x42
   166dc:	movne	lr, #1
   166e0:	moveq	lr, #3
   166e4:	b	16518 <__assert_fail@plt+0x556c>
   166e8:	lsr	r3, fp, #31
   166ec:	adds	sl, sl, sl
   166f0:	adc	fp, fp, fp
   166f4:	cmp	r3, #0
   166f8:	beq	16694 <__assert_fail@plt+0x56e8>
   166fc:	mov	r8, #1
   16700:	mvn	sl, #0
   16704:	mvn	fp, #0
   16708:	b	16694 <__assert_fail@plt+0x56e8>
   1670c:	mov	lr, #1
   16710:	lsr	r3, fp, #23
   16714:	cmp	r3, #0
   16718:	bne	166fc <__assert_fail@plt+0x5750>
   1671c:	lsl	r3, fp, #9
   16720:	orr	r3, r3, sl, lsr #23
   16724:	lsl	r2, sl, #9
   16728:	mov	sl, r2
   1672c:	mov	fp, r3
   16730:	b	16694 <__assert_fail@plt+0x56e8>
   16734:	lsr	r3, fp, #22
   16738:	cmp	r3, #0
   1673c:	bne	166fc <__assert_fail@plt+0x5750>
   16740:	lsl	r3, fp, #10
   16744:	orr	r3, r3, sl, lsr #22
   16748:	lsl	r2, sl, #10
   1674c:	mov	sl, r2
   16750:	mov	fp, r3
   16754:	b	16694 <__assert_fail@plt+0x56e8>
   16758:	mov	r6, r0
   1675c:	asr	r7, r0, #31
   16760:	mov	r3, #0
   16764:	mov	ip, #6
   16768:	str	r3, [sp]
   1676c:	strd	r4, [sp, #16]
   16770:	b	167a0 <__assert_fail@plt+0x57f4>
   16774:	orrs	r3, r2, r3
   16778:	movne	r3, #1
   1677c:	muleq	r3, sl, r7
   16780:	strne	r3, [sp]
   16784:	mlaeq	r3, r6, fp, r3
   16788:	umulleq	sl, fp, sl, r6
   1678c:	mvnne	sl, #0
   16790:	addeq	fp, r3, fp
   16794:	mvnne	fp, #0
   16798:	subs	ip, ip, #1
   1679c:	beq	16ae4 <__assert_fail@plt+0x5b38>
   167a0:	cmp	fp, #0
   167a4:	mov	r2, #0
   167a8:	mov	r3, #0
   167ac:	beq	16774 <__assert_fail@plt+0x57c8>
   167b0:	umull	r0, r1, sl, r6
   167b4:	mov	r5, #0
   167b8:	mov	r0, r1
   167bc:	mov	r1, r5
   167c0:	umlal	r0, r1, fp, r6
   167c4:	cmp	r1, r5
   167c8:	movne	r2, #1
   167cc:	movne	r3, #0
   167d0:	b	16774 <__assert_fail@plt+0x57c8>
   167d4:	mov	r6, r0
   167d8:	asr	r7, r0, #31
   167dc:	mov	r3, #0
   167e0:	mov	ip, #7
   167e4:	str	r3, [sp]
   167e8:	strd	r4, [sp, #16]
   167ec:	b	1681c <__assert_fail@plt+0x5870>
   167f0:	orrs	r3, r2, r3
   167f4:	movne	r3, #1
   167f8:	muleq	r3, sl, r7
   167fc:	strne	r3, [sp]
   16800:	mlaeq	r3, r6, fp, r3
   16804:	umulleq	sl, fp, sl, r6
   16808:	mvnne	sl, #0
   1680c:	addeq	fp, r3, fp
   16810:	mvnne	fp, #0
   16814:	subs	ip, ip, #1
   16818:	beq	16ae4 <__assert_fail@plt+0x5b38>
   1681c:	cmp	fp, #0
   16820:	mov	r2, #0
   16824:	mov	r3, #0
   16828:	beq	167f0 <__assert_fail@plt+0x5844>
   1682c:	umull	r0, r1, sl, r6
   16830:	mov	r5, #0
   16834:	mov	r0, r1
   16838:	mov	r1, r5
   1683c:	umlal	r0, r1, fp, r6
   16840:	cmp	r1, r5
   16844:	movne	r2, #1
   16848:	movne	r3, #0
   1684c:	b	167f0 <__assert_fail@plt+0x5844>
   16850:	asr	r1, r0, #31
   16854:	cmp	fp, #0
   16858:	mov	r6, #0
   1685c:	mov	r7, #0
   16860:	bne	16afc <__assert_fail@plt+0x5b50>
   16864:	orrs	r3, r6, r7
   16868:	bne	166fc <__assert_fail@plt+0x5750>
   1686c:	mul	r3, sl, r1
   16870:	mla	r3, r0, fp, r3
   16874:	umull	sl, fp, sl, r0
   16878:	add	fp, r3, fp
   1687c:	b	16694 <__assert_fail@plt+0x56e8>
   16880:	mov	r6, r0
   16884:	asr	r7, r0, #31
   16888:	mov	r3, #0
   1688c:	mov	ip, #8
   16890:	str	r3, [sp]
   16894:	strd	r4, [sp, #16]
   16898:	b	168c8 <__assert_fail@plt+0x591c>
   1689c:	orrs	r3, r2, r3
   168a0:	movne	r3, #1
   168a4:	muleq	r3, sl, r7
   168a8:	strne	r3, [sp]
   168ac:	mlaeq	r3, r6, fp, r3
   168b0:	umulleq	sl, fp, sl, r6
   168b4:	mvnne	sl, #0
   168b8:	addeq	fp, r3, fp
   168bc:	mvnne	fp, #0
   168c0:	subs	ip, ip, #1
   168c4:	beq	16ae4 <__assert_fail@plt+0x5b38>
   168c8:	cmp	fp, #0
   168cc:	mov	r2, #0
   168d0:	mov	r3, #0
   168d4:	beq	1689c <__assert_fail@plt+0x58f0>
   168d8:	umull	r0, r1, sl, r6
   168dc:	mov	r5, #0
   168e0:	mov	r0, r1
   168e4:	mov	r1, r5
   168e8:	umlal	r0, r1, fp, r6
   168ec:	cmp	r1, r5
   168f0:	movne	r2, #1
   168f4:	movne	r3, #0
   168f8:	b	1689c <__assert_fail@plt+0x58f0>
   168fc:	mov	r6, r0
   16900:	asr	r7, r0, #31
   16904:	mov	r3, #0
   16908:	mov	ip, #4
   1690c:	str	r3, [sp]
   16910:	strd	r4, [sp, #16]
   16914:	b	16944 <__assert_fail@plt+0x5998>
   16918:	orrs	r3, r2, r3
   1691c:	movne	r3, #1
   16920:	muleq	r3, sl, r7
   16924:	strne	r3, [sp]
   16928:	mlaeq	r3, r6, fp, r3
   1692c:	umulleq	sl, fp, sl, r6
   16930:	mvnne	sl, #0
   16934:	addeq	fp, r3, fp
   16938:	mvnne	fp, #0
   1693c:	subs	ip, ip, #1
   16940:	beq	16ae4 <__assert_fail@plt+0x5b38>
   16944:	cmp	fp, #0
   16948:	mov	r2, #0
   1694c:	mov	r3, #0
   16950:	beq	16918 <__assert_fail@plt+0x596c>
   16954:	umull	r0, r1, sl, r6
   16958:	mov	r5, #0
   1695c:	mov	r0, r1
   16960:	mov	r1, r5
   16964:	umlal	r0, r1, fp, r6
   16968:	cmp	r1, r5
   1696c:	movne	r2, #1
   16970:	movne	r3, #0
   16974:	b	16918 <__assert_fail@plt+0x596c>
   16978:	mov	r6, r0
   1697c:	asr	r7, r0, #31
   16980:	mov	r3, #0
   16984:	mov	ip, #5
   16988:	str	r3, [sp]
   1698c:	strd	r4, [sp, #16]
   16990:	b	169c0 <__assert_fail@plt+0x5a14>
   16994:	orrs	r3, r2, r3
   16998:	movne	r3, #1
   1699c:	muleq	r3, sl, r7
   169a0:	strne	r3, [sp]
   169a4:	mlaeq	r3, r6, fp, r3
   169a8:	umulleq	sl, fp, sl, r6
   169ac:	mvnne	sl, #0
   169b0:	addeq	fp, r3, fp
   169b4:	mvnne	fp, #0
   169b8:	subs	ip, ip, #1
   169bc:	beq	16ae4 <__assert_fail@plt+0x5b38>
   169c0:	cmp	fp, #0
   169c4:	mov	r2, #0
   169c8:	mov	r3, #0
   169cc:	beq	16994 <__assert_fail@plt+0x59e8>
   169d0:	umull	r0, r1, sl, r6
   169d4:	mov	r5, #0
   169d8:	mov	r0, r1
   169dc:	mov	r1, r5
   169e0:	umlal	r0, r1, fp, r6
   169e4:	cmp	r1, r5
   169e8:	movne	r2, #1
   169ec:	movne	r3, #0
   169f0:	b	16994 <__assert_fail@plt+0x59e8>
   169f4:	asr	r1, r0, #31
   169f8:	cmp	fp, #0
   169fc:	mov	r6, #0
   16a00:	mov	r7, #0
   16a04:	bne	16b58 <__assert_fail@plt+0x5bac>
   16a08:	orrs	r3, r6, r7
   16a0c:	bne	166fc <__assert_fail@plt+0x5750>
   16a10:	umull	r2, r3, sl, r0
   16a14:	mul	ip, sl, r1
   16a18:	strd	r2, [sp]
   16a1c:	mla	r3, r0, fp, ip
   16a20:	ldr	r2, [sp, #4]
   16a24:	mov	sl, r6
   16a28:	add	ip, r3, r2
   16a2c:	cmp	ip, #0
   16a30:	mov	fp, r7
   16a34:	str	ip, [sp, #4]
   16a38:	bne	16b80 <__assert_fail@plt+0x5bd4>
   16a3c:	orrs	r3, sl, fp
   16a40:	bne	166fc <__assert_fail@plt+0x5750>
   16a44:	ldrd	r6, [sp]
   16a48:	mul	r3, r6, r1
   16a4c:	umull	sl, fp, r6, r0
   16a50:	mla	r0, r0, r7, r3
   16a54:	add	fp, r0, fp
   16a58:	b	16694 <__assert_fail@plt+0x56e8>
   16a5c:	mov	lr, #1
   16a60:	b	16694 <__assert_fail@plt+0x56e8>
   16a64:	mov	lr, #1
   16a68:	mov	r6, #1024	; 0x400
   16a6c:	mov	r7, #0
   16a70:	b	167dc <__assert_fail@plt+0x5830>
   16a74:	mov	lr, #1
   16a78:	mov	r6, #1024	; 0x400
   16a7c:	mov	r7, #0
   16a80:	b	16888 <__assert_fail@plt+0x58dc>
   16a84:	mov	lr, #1
   16a88:	mov	r6, #1024	; 0x400
   16a8c:	mov	r7, #0
   16a90:	b	16904 <__assert_fail@plt+0x5958>
   16a94:	mov	lr, #1
   16a98:	mov	r6, #1024	; 0x400
   16a9c:	mov	r7, #0
   16aa0:	b	16980 <__assert_fail@plt+0x59d4>
   16aa4:	mov	lr, #1
   16aa8:	mov	r0, #1024	; 0x400
   16aac:	mov	r1, #0
   16ab0:	b	169f8 <__assert_fail@plt+0x5a4c>
   16ab4:	mov	lr, #1
   16ab8:	mov	r0, #1024	; 0x400
   16abc:	mov	r1, #0
   16ac0:	b	16854 <__assert_fail@plt+0x58a8>
   16ac4:	mov	lr, #1
   16ac8:	mov	r0, #1024	; 0x400
   16acc:	mov	r1, #0
   16ad0:	b	16604 <__assert_fail@plt+0x5658>
   16ad4:	mov	lr, #1
   16ad8:	mov	r6, #1024	; 0x400
   16adc:	mov	r7, #0
   16ae0:	b	16760 <__assert_fail@plt+0x57b4>
   16ae4:	ldrd	r4, [sp, #16]
   16ae8:	ldr	r3, [sp]
   16aec:	b	16690 <__assert_fail@plt+0x56e4>
   16af0:	mov	lr, #2
   16af4:	mov	r0, #1000	; 0x3e8
   16af8:	b	16518 <__assert_fail@plt+0x556c>
   16afc:	umull	r2, r3, sl, r0
   16b00:	str	r3, [sp]
   16b04:	mov	r3, #0
   16b08:	str	r3, [sp, #4]
   16b0c:	ldrd	r2, [sp]
   16b10:	umlal	r2, r3, fp, r0
   16b14:	cmp	r3, #0
   16b18:	movne	r6, #1
   16b1c:	movne	r7, #0
   16b20:	b	16864 <__assert_fail@plt+0x58b8>
   16b24:	mov	r3, #1
   16b28:	mvn	sl, #0
   16b2c:	mvn	fp, #0
   16b30:	b	16690 <__assert_fail@plt+0x56e4>
   16b34:	umull	r2, r3, sl, r0
   16b38:	mov	r7, #0
   16b3c:	mov	r6, r3
   16b40:	umlal	r6, r7, fp, r0
   16b44:	cmp	r7, #0
   16b48:	movne	r2, #1
   16b4c:	movne	r3, #0
   16b50:	strdne	r2, [sp]
   16b54:	b	16618 <__assert_fail@plt+0x566c>
   16b58:	umull	r2, r3, sl, r0
   16b5c:	str	r3, [sp]
   16b60:	mov	r3, #0
   16b64:	str	r3, [sp, #4]
   16b68:	ldrd	r2, [sp]
   16b6c:	umlal	r2, r3, fp, r0
   16b70:	cmp	r3, #0
   16b74:	movne	r6, #1
   16b78:	movne	r7, #0
   16b7c:	b	16a08 <__assert_fail@plt+0x5a5c>
   16b80:	ldr	r3, [sp]
   16b84:	mov	r7, #0
   16b88:	umull	r2, r3, r3, r0
   16b8c:	mov	r6, r3
   16b90:	umlal	r6, r7, ip, r0
   16b94:	cmp	r7, #0
   16b98:	movne	sl, #1
   16b9c:	movne	fp, #0
   16ba0:	b	16a3c <__assert_fail@plt+0x5a90>
   16ba4:	ldr	r3, [sp]
   16ba8:	mov	r7, #0
   16bac:	umull	r2, r3, r3, r0
   16bb0:	mov	r6, r3
   16bb4:	umlal	r6, r7, ip, r0
   16bb8:	cmp	r7, #0
   16bbc:	movne	sl, #1
   16bc0:	movne	fp, #0
   16bc4:	b	16670 <__assert_fail@plt+0x56c4>
   16bc8:	umull	r2, r3, r6, r0
   16bcc:	str	r3, [sp]
   16bd0:	mov	r3, #0
   16bd4:	str	r3, [sp, #4]
   16bd8:	ldrd	r2, [sp]
   16bdc:	umlal	r2, r3, ip, r0
   16be0:	cmp	r3, #0
   16be4:	movne	sl, #1
   16be8:	movne	fp, #0
   16bec:	b	16644 <__assert_fail@plt+0x5698>
   16bf0:	bl	10df0 <__stack_chk_fail@plt>
   16bf4:	ldr	r3, [pc, #16]	; 16c0c <__assert_fail@plt+0x5c60>
   16bf8:	mov	r2, #96	; 0x60
   16bfc:	ldr	r1, [pc, #12]	; 16c10 <__assert_fail@plt+0x5c64>
   16c00:	ldr	r0, [pc, #12]	; 16c14 <__assert_fail@plt+0x5c68>
   16c04:	bl	10fac <__assert_fail@plt>
   16c08:	andeq	r8, r2, r8, lsl #30
   16c0c:			; <UNDEFINED> instruction: 0x000189b0
   16c10:			; <UNDEFINED> instruction: 0x000189bc
   16c14:	andeq	r8, r1, ip, asr #19
   16c18:	push	{r4, r5, r6, r7, r8, lr}
   16c1c:	subs	r7, r0, #0
   16c20:	ldr	r5, [pc, #108]	; 16c94 <__assert_fail@plt+0x5ce8>
   16c24:	sub	sp, sp, #8
   16c28:	mov	r8, r1
   16c2c:	ldr	r1, [r5]
   16c30:	moveq	r7, sp
   16c34:	str	r1, [sp, #4]
   16c38:	mov	r0, r7
   16c3c:	mov	r1, r8
   16c40:	mov	r6, r2
   16c44:	bl	10e50 <mbrtowc@plt>
   16c48:	cmp	r6, #0
   16c4c:	cmnne	r0, #3
   16c50:	mov	r4, r0
   16c54:	bhi	16c74 <__assert_fail@plt+0x5cc8>
   16c58:	ldr	r2, [sp, #4]
   16c5c:	ldr	r3, [r5]
   16c60:	mov	r0, r4
   16c64:	cmp	r2, r3
   16c68:	bne	16c90 <__assert_fail@plt+0x5ce4>
   16c6c:	add	sp, sp, #8
   16c70:	pop	{r4, r5, r6, r7, r8, pc}
   16c74:	mov	r0, #0
   16c78:	bl	16d0c <__assert_fail@plt+0x5d60>
   16c7c:	cmp	r0, #0
   16c80:	moveq	r4, #1
   16c84:	ldrbeq	r3, [r8]
   16c88:	streq	r3, [r7]
   16c8c:	b	16c58 <__assert_fail@plt+0x5cac>
   16c90:	bl	10df0 <__stack_chk_fail@plt>
   16c94:	andeq	r8, r2, r8, lsl #30
   16c98:	push	{r4, r5, r6, lr}
   16c9c:	mov	r4, r0
   16ca0:	bl	10e44 <__fpending@plt>
   16ca4:	ldr	r5, [r4]
   16ca8:	and	r5, r5, #32
   16cac:	mov	r6, r0
   16cb0:	mov	r0, r4
   16cb4:	bl	16d8c <__assert_fail@plt+0x5de0>
   16cb8:	cmp	r5, #0
   16cbc:	mov	r4, r0
   16cc0:	bne	16cec <__assert_fail@plt+0x5d40>
   16cc4:	cmp	r0, #0
   16cc8:	beq	16ce4 <__assert_fail@plt+0x5d38>
   16ccc:	cmp	r6, #0
   16cd0:	bne	16d04 <__assert_fail@plt+0x5d58>
   16cd4:	bl	10eec <__errno_location@plt>
   16cd8:	ldr	r4, [r0]
   16cdc:	subs	r4, r4, #9
   16ce0:	mvnne	r4, #0
   16ce4:	mov	r0, r4
   16ce8:	pop	{r4, r5, r6, pc}
   16cec:	cmp	r0, #0
   16cf0:	bne	16d04 <__assert_fail@plt+0x5d58>
   16cf4:	bl	10eec <__errno_location@plt>
   16cf8:	str	r4, [r0]
   16cfc:	mvn	r4, #0
   16d00:	b	16ce4 <__assert_fail@plt+0x5d38>
   16d04:	mvn	r4, #0
   16d08:	b	16ce4 <__assert_fail@plt+0x5d38>
   16d0c:	push	{r4, lr}
   16d10:	mov	r1, #0
   16d14:	bl	10f58 <setlocale@plt>
   16d18:	subs	r4, r0, #0
   16d1c:	beq	16d48 <__assert_fail@plt+0x5d9c>
   16d20:	ldr	r1, [pc, #40]	; 16d50 <__assert_fail@plt+0x5da4>
   16d24:	bl	10d54 <strcmp@plt>
   16d28:	cmp	r0, #0
   16d2c:	popeq	{r4, pc}
   16d30:	mov	r0, r4
   16d34:	ldr	r1, [pc, #24]	; 16d54 <__assert_fail@plt+0x5da8>
   16d38:	bl	10d54 <strcmp@plt>
   16d3c:	adds	r0, r0, #0
   16d40:	movne	r0, #1
   16d44:	pop	{r4, pc}
   16d48:	mov	r0, #1
   16d4c:	pop	{r4, pc}
   16d50:	andeq	r8, r1, r0, lsr #1
   16d54:	strdeq	r8, [r1], -r4
   16d58:	push	{r4, lr}
   16d5c:	mov	r0, #14
   16d60:	bl	10f70 <nl_langinfo@plt>
   16d64:	cmp	r0, #0
   16d68:	beq	16d80 <__assert_fail@plt+0x5dd4>
   16d6c:	ldrb	r2, [r0]
   16d70:	ldr	r3, [pc, #16]	; 16d88 <__assert_fail@plt+0x5ddc>
   16d74:	cmp	r2, #0
   16d78:	moveq	r0, r3
   16d7c:	pop	{r4, pc}
   16d80:	ldr	r0, [pc]	; 16d88 <__assert_fail@plt+0x5ddc>
   16d84:	pop	{r4, pc}
   16d88:	strdeq	r8, [r1], -ip
   16d8c:	push	{r4, r5, lr}
   16d90:	sub	sp, sp, #12
   16d94:	mov	r4, r0
   16d98:	bl	10f28 <fileno@plt>
   16d9c:	cmp	r0, #0
   16da0:	mov	r0, r4
   16da4:	blt	16e20 <__assert_fail@plt+0x5e74>
   16da8:	bl	10e80 <__freading@plt>
   16dac:	cmp	r0, #0
   16db0:	bne	16dec <__assert_fail@plt+0x5e40>
   16db4:	mov	r0, r4
   16db8:	bl	16e2c <__assert_fail@plt+0x5e80>
   16dbc:	cmp	r0, #0
   16dc0:	beq	16e1c <__assert_fail@plt+0x5e70>
   16dc4:	bl	10eec <__errno_location@plt>
   16dc8:	mov	r5, r0
   16dcc:	mov	r0, r4
   16dd0:	ldr	r4, [r5]
   16dd4:	bl	10f40 <fclose@plt>
   16dd8:	cmp	r4, #0
   16ddc:	mvnne	r0, #0
   16de0:	strne	r4, [r5]
   16de4:	add	sp, sp, #12
   16de8:	pop	{r4, r5, pc}
   16dec:	mov	r0, r4
   16df0:	bl	10f28 <fileno@plt>
   16df4:	mov	r3, #1
   16df8:	str	r3, [sp]
   16dfc:	mov	r2, #0
   16e00:	mov	r3, #0
   16e04:	bl	10e2c <lseek64@plt>
   16e08:	mvn	r3, #0
   16e0c:	mvn	r2, #0
   16e10:	cmp	r1, r3
   16e14:	cmpeq	r0, r2
   16e18:	bne	16db4 <__assert_fail@plt+0x5e08>
   16e1c:	mov	r0, r4
   16e20:	add	sp, sp, #12
   16e24:	pop	{r4, r5, lr}
   16e28:	b	10f40 <fclose@plt>
   16e2c:	push	{r4, lr}
   16e30:	subs	r4, r0, #0
   16e34:	sub	sp, sp, #8
   16e38:	beq	16e54 <__assert_fail@plt+0x5ea8>
   16e3c:	bl	10e80 <__freading@plt>
   16e40:	cmp	r0, #0
   16e44:	beq	16e54 <__assert_fail@plt+0x5ea8>
   16e48:	ldr	r3, [r4]
   16e4c:	tst	r3, #256	; 0x100
   16e50:	bne	16e64 <__assert_fail@plt+0x5eb8>
   16e54:	mov	r0, r4
   16e58:	add	sp, sp, #8
   16e5c:	pop	{r4, lr}
   16e60:	b	10d78 <fflush@plt>
   16e64:	mov	r3, #1
   16e68:	str	r3, [sp]
   16e6c:	mov	r2, #0
   16e70:	mov	r3, #0
   16e74:	mov	r0, r4
   16e78:	bl	16e8c <__assert_fail@plt+0x5ee0>
   16e7c:	mov	r0, r4
   16e80:	add	sp, sp, #8
   16e84:	pop	{r4, lr}
   16e88:	b	10d78 <fflush@plt>
   16e8c:	push	{r4, r5, r6, r7, r8, lr}
   16e90:	sub	sp, sp, #8
   16e94:	ldmib	r0, {ip, lr}
   16e98:	mov	r4, r0
   16e9c:	ldr	r5, [sp, #32]
   16ea0:	cmp	lr, ip
   16ea4:	beq	16ebc <__assert_fail@plt+0x5f10>
   16ea8:	str	r5, [sp, #32]
   16eac:	mov	r0, r4
   16eb0:	add	sp, sp, #8
   16eb4:	pop	{r4, r5, r6, r7, r8, lr}
   16eb8:	b	10f4c <fseeko64@plt>
   16ebc:	ldr	lr, [r0, #20]
   16ec0:	ldr	ip, [r0, #16]
   16ec4:	cmp	lr, ip
   16ec8:	bne	16ea8 <__assert_fail@plt+0x5efc>
   16ecc:	ldr	r8, [r0, #36]	; 0x24
   16ed0:	cmp	r8, #0
   16ed4:	bne	16ea8 <__assert_fail@plt+0x5efc>
   16ed8:	mov	r6, r2
   16edc:	mov	r7, r3
   16ee0:	bl	10f28 <fileno@plt>
   16ee4:	mov	r2, r6
   16ee8:	mov	r3, r7
   16eec:	str	r5, [sp]
   16ef0:	bl	10e2c <lseek64@plt>
   16ef4:	mvn	r3, #0
   16ef8:	mvn	r2, #0
   16efc:	cmp	r1, r3
   16f00:	cmpeq	r0, r2
   16f04:	beq	16f24 <__assert_fail@plt+0x5f78>
   16f08:	ldr	r3, [r4]
   16f0c:	strd	r0, [r4, #80]	; 0x50
   16f10:	mov	r0, r8
   16f14:	bic	r3, r3, #16
   16f18:	str	r3, [r4]
   16f1c:	add	sp, sp, #8
   16f20:	pop	{r4, r5, r6, r7, r8, pc}
   16f24:	mvn	r0, #0
   16f28:	b	16f1c <__assert_fail@plt+0x5f70>
   16f2c:	subs	r2, r1, #1
   16f30:	bxeq	lr
   16f34:	bcc	1710c <__assert_fail@plt+0x6160>
   16f38:	cmp	r0, r1
   16f3c:	bls	170f0 <__assert_fail@plt+0x6144>
   16f40:	tst	r1, r2
   16f44:	beq	170fc <__assert_fail@plt+0x6150>
   16f48:	clz	r3, r0
   16f4c:	clz	r2, r1
   16f50:	sub	r3, r2, r3
   16f54:	rsbs	r3, r3, #31
   16f58:	addne	r3, r3, r3, lsl #1
   16f5c:	mov	r2, #0
   16f60:	addne	pc, pc, r3, lsl #2
   16f64:	nop			; (mov r0, r0)
   16f68:	cmp	r0, r1, lsl #31
   16f6c:	adc	r2, r2, r2
   16f70:	subcs	r0, r0, r1, lsl #31
   16f74:	cmp	r0, r1, lsl #30
   16f78:	adc	r2, r2, r2
   16f7c:	subcs	r0, r0, r1, lsl #30
   16f80:	cmp	r0, r1, lsl #29
   16f84:	adc	r2, r2, r2
   16f88:	subcs	r0, r0, r1, lsl #29
   16f8c:	cmp	r0, r1, lsl #28
   16f90:	adc	r2, r2, r2
   16f94:	subcs	r0, r0, r1, lsl #28
   16f98:	cmp	r0, r1, lsl #27
   16f9c:	adc	r2, r2, r2
   16fa0:	subcs	r0, r0, r1, lsl #27
   16fa4:	cmp	r0, r1, lsl #26
   16fa8:	adc	r2, r2, r2
   16fac:	subcs	r0, r0, r1, lsl #26
   16fb0:	cmp	r0, r1, lsl #25
   16fb4:	adc	r2, r2, r2
   16fb8:	subcs	r0, r0, r1, lsl #25
   16fbc:	cmp	r0, r1, lsl #24
   16fc0:	adc	r2, r2, r2
   16fc4:	subcs	r0, r0, r1, lsl #24
   16fc8:	cmp	r0, r1, lsl #23
   16fcc:	adc	r2, r2, r2
   16fd0:	subcs	r0, r0, r1, lsl #23
   16fd4:	cmp	r0, r1, lsl #22
   16fd8:	adc	r2, r2, r2
   16fdc:	subcs	r0, r0, r1, lsl #22
   16fe0:	cmp	r0, r1, lsl #21
   16fe4:	adc	r2, r2, r2
   16fe8:	subcs	r0, r0, r1, lsl #21
   16fec:	cmp	r0, r1, lsl #20
   16ff0:	adc	r2, r2, r2
   16ff4:	subcs	r0, r0, r1, lsl #20
   16ff8:	cmp	r0, r1, lsl #19
   16ffc:	adc	r2, r2, r2
   17000:	subcs	r0, r0, r1, lsl #19
   17004:	cmp	r0, r1, lsl #18
   17008:	adc	r2, r2, r2
   1700c:	subcs	r0, r0, r1, lsl #18
   17010:	cmp	r0, r1, lsl #17
   17014:	adc	r2, r2, r2
   17018:	subcs	r0, r0, r1, lsl #17
   1701c:	cmp	r0, r1, lsl #16
   17020:	adc	r2, r2, r2
   17024:	subcs	r0, r0, r1, lsl #16
   17028:	cmp	r0, r1, lsl #15
   1702c:	adc	r2, r2, r2
   17030:	subcs	r0, r0, r1, lsl #15
   17034:	cmp	r0, r1, lsl #14
   17038:	adc	r2, r2, r2
   1703c:	subcs	r0, r0, r1, lsl #14
   17040:	cmp	r0, r1, lsl #13
   17044:	adc	r2, r2, r2
   17048:	subcs	r0, r0, r1, lsl #13
   1704c:	cmp	r0, r1, lsl #12
   17050:	adc	r2, r2, r2
   17054:	subcs	r0, r0, r1, lsl #12
   17058:	cmp	r0, r1, lsl #11
   1705c:	adc	r2, r2, r2
   17060:	subcs	r0, r0, r1, lsl #11
   17064:	cmp	r0, r1, lsl #10
   17068:	adc	r2, r2, r2
   1706c:	subcs	r0, r0, r1, lsl #10
   17070:	cmp	r0, r1, lsl #9
   17074:	adc	r2, r2, r2
   17078:	subcs	r0, r0, r1, lsl #9
   1707c:	cmp	r0, r1, lsl #8
   17080:	adc	r2, r2, r2
   17084:	subcs	r0, r0, r1, lsl #8
   17088:	cmp	r0, r1, lsl #7
   1708c:	adc	r2, r2, r2
   17090:	subcs	r0, r0, r1, lsl #7
   17094:	cmp	r0, r1, lsl #6
   17098:	adc	r2, r2, r2
   1709c:	subcs	r0, r0, r1, lsl #6
   170a0:	cmp	r0, r1, lsl #5
   170a4:	adc	r2, r2, r2
   170a8:	subcs	r0, r0, r1, lsl #5
   170ac:	cmp	r0, r1, lsl #4
   170b0:	adc	r2, r2, r2
   170b4:	subcs	r0, r0, r1, lsl #4
   170b8:	cmp	r0, r1, lsl #3
   170bc:	adc	r2, r2, r2
   170c0:	subcs	r0, r0, r1, lsl #3
   170c4:	cmp	r0, r1, lsl #2
   170c8:	adc	r2, r2, r2
   170cc:	subcs	r0, r0, r1, lsl #2
   170d0:	cmp	r0, r1, lsl #1
   170d4:	adc	r2, r2, r2
   170d8:	subcs	r0, r0, r1, lsl #1
   170dc:	cmp	r0, r1
   170e0:	adc	r2, r2, r2
   170e4:	subcs	r0, r0, r1
   170e8:	mov	r0, r2
   170ec:	bx	lr
   170f0:	moveq	r0, #1
   170f4:	movne	r0, #0
   170f8:	bx	lr
   170fc:	clz	r2, r1
   17100:	rsb	r2, r2, #31
   17104:	lsr	r0, r0, r2
   17108:	bx	lr
   1710c:	cmp	r0, #0
   17110:	mvnne	r0, #0
   17114:	b	17138 <__assert_fail@plt+0x618c>
   17118:	cmp	r1, #0
   1711c:	beq	1710c <__assert_fail@plt+0x6160>
   17120:	push	{r0, r1, lr}
   17124:	bl	16f2c <__assert_fail@plt+0x5f80>
   17128:	pop	{r1, r2, lr}
   1712c:	mul	r3, r2, r0
   17130:	sub	r1, r1, r3
   17134:	bx	lr
   17138:	push	{r1, lr}
   1713c:	mov	r0, #8
   17140:	bl	10d48 <raise@plt>
   17144:	pop	{r1, pc}
   17148:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1714c:	mov	r7, r0
   17150:	ldr	r6, [pc, #72]	; 171a0 <__assert_fail@plt+0x61f4>
   17154:	ldr	r5, [pc, #72]	; 171a4 <__assert_fail@plt+0x61f8>
   17158:	add	r6, pc, r6
   1715c:	add	r5, pc, r5
   17160:	sub	r6, r6, r5
   17164:	mov	r8, r1
   17168:	mov	r9, r2
   1716c:	bl	10d10 <calloc@plt-0x20>
   17170:	asrs	r6, r6, #2
   17174:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17178:	mov	r4, #0
   1717c:	add	r4, r4, #1
   17180:	ldr	r3, [r5], #4
   17184:	mov	r2, r9
   17188:	mov	r1, r8
   1718c:	mov	r0, r7
   17190:	blx	r3
   17194:	cmp	r6, r4
   17198:	bne	1717c <__assert_fail@plt+0x61d0>
   1719c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171a0:	andeq	r1, r1, r4, lsr #27
   171a4:	muleq	r1, ip, sp
   171a8:	bx	lr
   171ac:	ldr	r3, [pc, #12]	; 171c0 <__assert_fail@plt+0x6214>
   171b0:	mov	r1, #0
   171b4:	add	r3, pc, r3
   171b8:	ldr	r2, [r3]
   171bc:	b	10f04 <__cxa_atexit@plt>
   171c0:	andeq	r1, r1, r0, lsr pc

Disassembly of section .fini:

000171c4 <.fini>:
   171c4:	push	{r3, lr}
   171c8:	pop	{r3, pc}
