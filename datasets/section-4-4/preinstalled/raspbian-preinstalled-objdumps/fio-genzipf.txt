
raspbian-preinstalled/fio-genzipf:     file format elf32-littlearm


Disassembly of section .init:

00010f7c <.init>:
   10f7c:	push	{r3, lr}
   10f80:	bl	11bd0 <_start@@Base+0x3c>
   10f84:	pop	{r3, pc}

Disassembly of section .plt:

00010f88 <calloc@plt-0x14>:
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	ldr	lr, [pc, #4]	; 10f98 <calloc@plt-0x4>
   10f90:	add	lr, pc, lr
   10f94:	ldr	pc, [lr, #8]!
   10f98:	andeq	r4, r1, r4, asr #31

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #4036]!	; 0xfc4

00010fa8 <raise@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #4028]!	; 0xfbc

00010fb4 <strcasestr@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #4020]!	; 0xfb4

00010fc0 <strtol@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #4012]!	; 0xfac

00010fcc <read@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #4004]!	; 0xfa4

00010fd8 <free@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #3996]!	; 0xf9c

00010fe4 <strndup@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #3988]!	; 0xf94

00010ff0 <__vsnprintf_chk@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #3980]!	; 0xf8c

00010ffc <memcpy@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #3972]!	; 0xf84

00011008 <memcmp@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #3964]!	; 0xf7c

00011014 <__stack_chk_fail@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #3956]!	; 0xf74

00011020 <__memcpy_chk@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #3948]!	; 0xf6c

0001102c <fwrite@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #3940]!	; 0xf64

00011038 <open64@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #3932]!	; 0xf5c

00011044 <puts@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #20, 20	; 0x14000
   1104c:	ldr	pc, [ip, #3924]!	; 0xf54

00011050 <malloc@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #20, 20	; 0x14000
   11058:	ldr	pc, [ip, #3916]!	; 0xf4c

0001105c <__libc_start_main@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #20, 20	; 0x14000
   11064:	ldr	pc, [ip, #3908]!	; 0xf44

00011068 <__gmon_start__@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #3900]!	; 0xf3c

00011074 <strtoul@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #3892]!	; 0xf34

00011080 <strlen@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #3884]!	; 0xf2c

0001108c <strchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #3876]!	; 0xf24

00011098 <getopt@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #3868]!	; 0xf1c

000110a4 <strncasecmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #3860]!	; 0xf14

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #3852]!	; 0xf0c

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #3844]!	; 0xf04

000110c8 <strtod@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #20, 20	; 0x14000
   110d0:	ldr	pc, [ip, #3836]!	; 0xefc

000110d4 <ceil@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #20, 20	; 0x14000
   110dc:	ldr	pc, [ip, #3828]!	; 0xef4

000110e0 <__pow_finite@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #20, 20	; 0x14000
   110e8:	ldr	pc, [ip, #3820]!	; 0xeec

000110ec <sscanf@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #20, 20	; 0x14000
   110f4:	ldr	pc, [ip, #3812]!	; 0xee4

000110f8 <qsort@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #20, 20	; 0x14000
   11100:	ldr	pc, [ip, #3804]!	; 0xedc

00011104 <__exp2_finite@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #20, 20	; 0x14000
   1110c:	ldr	pc, [ip, #3796]!	; 0xed4

00011110 <strncmp@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #20, 20	; 0x14000
   11118:	ldr	pc, [ip, #3788]!	; 0xecc

0001111c <abort@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #20, 20	; 0x14000
   11124:	ldr	pc, [ip, #3780]!	; 0xec4

00011128 <close@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #20, 20	; 0x14000
   11130:	ldr	pc, [ip, #3772]!	; 0xebc

00011134 <__log_finite@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #20, 20	; 0x14000
   1113c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011140 <__assert_fail@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #20, 20	; 0x14000
   11148:	ldr	pc, [ip, #3756]!	; 0xeac

Disassembly of section .text:

00011150 <main@@Base>:
   11150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11154:	vpush	{d8-d12}
   11158:	ldr	r3, [pc, #2192]	; 119f0 <main@@Base+0x8a0>
   1115c:	ldr	r4, [pc, #2192]	; 119f4 <main@@Base+0x8a4>
   11160:	ldr	r9, [pc, #2192]	; 119f8 <main@@Base+0x8a8>
   11164:	ldr	r8, [pc, #2192]	; 119fc <main@@Base+0x8ac>
   11168:	sub	sp, sp, #260	; 0x104
   1116c:	ldr	r3, [r3]
   11170:	mov	r6, r0
   11174:	mov	r5, r1
   11178:	mov	r7, #0
   1117c:	str	r3, [sp, #252]	; 0xfc
   11180:	mov	r2, r4
   11184:	mov	r1, r5
   11188:	mov	r0, r6
   1118c:	bl	11098 <getopt@plt>
   11190:	cmn	r0, #1
   11194:	beq	11388 <main@@Base+0x238>
   11198:	sub	r3, r0, #98	; 0x62
   1119c:	cmp	r3, #18
   111a0:	ldrls	pc, [pc, r3, lsl #2]
   111a4:	b	11320 <main@@Base+0x1d0>
   111a8:	andeq	r1, r1, r4, lsl #6
   111ac:	strdeq	r1, [r1], -r8
   111b0:	andeq	r1, r1, r0, lsr #6
   111b4:	andeq	r1, r1, r0, lsr #6
   111b8:	andeq	r1, r1, r0, lsr #6
   111bc:	ldrdeq	r1, [r1], -ip
   111c0:	andeq	r1, r1, r8, ror #4
   111c4:	andeq	r1, r1, r0, asr r2
   111c8:	andeq	r1, r1, r0, lsr #6
   111cc:	andeq	r1, r1, r0, lsr #6
   111d0:	andeq	r1, r1, r0, lsr #6
   111d4:	andeq	r1, r1, r0, lsr #6
   111d8:	andeq	r1, r1, r0, lsr #6
   111dc:	andeq	r1, r1, r4, lsr r2
   111e0:	andeq	r1, r1, r0, lsr #4
   111e4:	andeq	r1, r1, r0, lsr #6
   111e8:	andeq	r1, r1, r0, lsr #6
   111ec:	andeq	r1, r1, r0, lsr #6
   111f0:	strdeq	r1, [r1], -r4
   111f4:	ldr	sl, [r8]
   111f8:	mov	r2, #4
   111fc:	mov	r0, sl
   11200:	ldr	r1, [pc, #2040]	; 11a00 <main@@Base+0x8b0>
   11204:	bl	11110 <strncmp@plt>
   11208:	cmp	r0, #0
   1120c:	bne	11338 <main@@Base+0x1e8>
   11210:	ldr	r3, [pc, #2028]	; 11a04 <main@@Base+0x8b4>
   11214:	mov	r2, #1
   11218:	str	r2, [r3, #4]
   1121c:	b	11180 <main@@Base+0x30>
   11220:	mov	r1, #0
   11224:	ldr	r0, [r8]
   11228:	bl	110c8 <strtod@plt>
   1122c:	vstr	d0, [r9]
   11230:	b	11180 <main@@Base+0x30>
   11234:	mov	r2, #10
   11238:	mov	r1, #0
   1123c:	ldr	r0, [r8]
   11240:	bl	11074 <strtoul@plt>
   11244:	ldr	r3, [pc, #1976]	; 11a04 <main@@Base+0x8b4>
   11248:	str	r0, [r3, #12]
   1124c:	b	11180 <main@@Base+0x30>
   11250:	mov	r1, #0
   11254:	ldr	r0, [r8]
   11258:	bl	110c8 <strtod@plt>
   1125c:	mov	r7, #1
   11260:	vstr	d0, [r9, #8]
   11264:	b	11180 <main@@Base+0x30>
   11268:	ldr	r0, [pc, #1944]	; 11a08 <main@@Base+0x8b8>
   1126c:	bl	11044 <puts@plt>
   11270:	ldr	r0, [pc, #1940]	; 11a0c <main@@Base+0x8bc>
   11274:	bl	11044 <puts@plt>
   11278:	ldr	r0, [pc, #1936]	; 11a10 <main@@Base+0x8c0>
   1127c:	bl	11044 <puts@plt>
   11280:	ldr	r0, [pc, #1932]	; 11a14 <main@@Base+0x8c4>
   11284:	bl	11044 <puts@plt>
   11288:	ldr	r1, [pc, #1928]	; 11a18 <main@@Base+0x8c8>
   1128c:	mov	r0, #1
   11290:	bl	110bc <__printf_chk@plt>
   11294:	ldr	r0, [pc, #1920]	; 11a1c <main@@Base+0x8cc>
   11298:	bl	11044 <puts@plt>
   1129c:	ldr	r0, [pc, #1916]	; 11a20 <main@@Base+0x8d0>
   112a0:	bl	11044 <puts@plt>
   112a4:	ldr	r0, [pc, #1912]	; 11a24 <main@@Base+0x8d4>
   112a8:	bl	11044 <puts@plt>
   112ac:	ldr	r0, [pc, #1908]	; 11a28 <main@@Base+0x8d8>
   112b0:	bl	11044 <puts@plt>
   112b4:	mov	r5, #1
   112b8:	ldr	r3, [pc, #1840]	; 119f0 <main@@Base+0x8a0>
   112bc:	ldr	r2, [sp, #252]	; 0xfc
   112c0:	mov	r0, r5
   112c4:	ldr	r3, [r3]
   112c8:	cmp	r2, r3
   112cc:	bne	11b58 <main@@Base+0xa08>
   112d0:	add	sp, sp, #260	; 0x104
   112d4:	vpop	{d8-d12}
   112d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112dc:	mov	r2, #10
   112e0:	mov	r1, #0
   112e4:	ldr	r0, [r8]
   112e8:	bl	11074 <strtoul@plt>
   112ec:	ldr	r3, [pc, #1808]	; 11a04 <main@@Base+0x8b4>
   112f0:	str	r0, [r3, #8]
   112f4:	b	11180 <main@@Base+0x30>
   112f8:	mov	r3, #1
   112fc:	str	r3, [r9, #16]
   11300:	b	11180 <main@@Base+0x30>
   11304:	mov	r2, #10
   11308:	mov	r1, #0
   1130c:	ldr	r0, [r8]
   11310:	bl	11074 <strtoul@plt>
   11314:	ldr	r3, [pc, #1768]	; 11a04 <main@@Base+0x8b4>
   11318:	str	r0, [r3]
   1131c:	b	11180 <main@@Base+0x30>
   11320:	mov	r2, r0
   11324:	ldr	r1, [pc, #1792]	; 11a2c <main@@Base+0x8dc>
   11328:	mov	r0, #1
   1132c:	bl	110bc <__printf_chk@plt>
   11330:	mov	r5, #1
   11334:	b	112b8 <main@@Base+0x168>
   11338:	mov	r2, #6
   1133c:	ldr	r1, [pc, #1772]	; 11a30 <main@@Base+0x8e0>
   11340:	mov	r0, sl
   11344:	bl	11110 <strncmp@plt>
   11348:	cmp	r0, #0
   1134c:	beq	11378 <main@@Base+0x228>
   11350:	mov	r2, #6
   11354:	ldr	r1, [pc, #1752]	; 11a34 <main@@Base+0x8e4>
   11358:	mov	r0, sl
   1135c:	bl	11110 <strncmp@plt>
   11360:	cmp	r0, #0
   11364:	bne	11b40 <main@@Base+0x9f0>
   11368:	ldr	r3, [pc, #1684]	; 11a04 <main@@Base+0x8b4>
   1136c:	mov	r2, #3
   11370:	str	r2, [r3, #4]
   11374:	b	11180 <main@@Base+0x30>
   11378:	ldr	r3, [pc, #1668]	; 11a04 <main@@Base+0x8b4>
   1137c:	mov	r2, #2
   11380:	str	r2, [r3, #4]
   11384:	b	11180 <main@@Base+0x30>
   11388:	ldr	r4, [pc, #1652]	; 11a04 <main@@Base+0x8b4>
   1138c:	ldr	sl, [pc, #1636]	; 119f8 <main@@Base+0x8a8>
   11390:	ldr	r5, [r4, #4]
   11394:	vldr	d7, [sl, #8]
   11398:	cmp	r5, #2
   1139c:	beq	11ae8 <main@@Base+0x998>
   113a0:	cmp	r5, #1
   113a4:	beq	11ab8 <main@@Base+0x968>
   113a8:	ldr	r3, [sl, #16]
   113ac:	cmp	r3, #1
   113b0:	beq	113e0 <main@@Base+0x290>
   113b4:	ldrd	r6, [sl, #8]
   113b8:	ldr	r2, [pc, #1656]	; 11a38 <main@@Base+0x8e8>
   113bc:	ldr	r1, [r4]
   113c0:	strd	r6, [sp]
   113c4:	ldr	r3, [r4, #8]
   113c8:	ldr	r2, [r2, r5, lsl #2]
   113cc:	str	r1, [sp, #12]
   113d0:	str	r3, [sp, #8]
   113d4:	ldr	r1, [pc, #1632]	; 11a3c <main@@Base+0x8ec>
   113d8:	mov	r0, #1
   113dc:	bl	110bc <__printf_chk@plt>
   113e0:	ldr	r3, [r4, #8]
   113e4:	ldr	r6, [r4]
   113e8:	mov	r7, #0
   113ec:	lsl	r2, r3, #20
   113f0:	lsl	r8, r3, #30
   113f4:	lsr	r9, r2, #22
   113f8:	mov	r3, r7
   113fc:	mov	r0, r8
   11400:	mov	r1, r9
   11404:	mov	r2, r6
   11408:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   1140c:	ldr	r3, [r4, #4]
   11410:	vldr	d0, [sl, #8]
   11414:	cmp	r3, #1
   11418:	strd	r0, [sp, #48]	; 0x30
   1141c:	beq	119a4 <main@@Base+0x854>
   11420:	cmp	r3, #2
   11424:	beq	1198c <main@@Base+0x83c>
   11428:	mov	r2, #1
   1142c:	ldr	r1, [sp, #48]	; 0x30
   11430:	add	r0, sp, #80	; 0x50
   11434:	bl	144c4 <gauss_init@@Base>
   11438:	ldr	r3, [sp, #48]	; 0x30
   1143c:	mov	r2, #0
   11440:	str	r2, [r4, #16]
   11444:	lsrs	r3, r3, #1
   11448:	beq	11a9c <main@@Base+0x94c>
   1144c:	mov	r2, #1
   11450:	b	11458 <main@@Base+0x308>
   11454:	mov	r2, r1
   11458:	lsrs	r3, r3, #1
   1145c:	add	r1, r2, #1
   11460:	bne	11454 <main@@Base+0x304>
   11464:	mov	r5, #1
   11468:	mov	r1, #8
   1146c:	lsl	r5, r5, r2
   11470:	mov	r0, r5
   11474:	str	r2, [r4, #16]
   11478:	str	r5, [r4, #20]
   1147c:	bl	10f9c <calloc@plt>
   11480:	cmp	r5, #0
   11484:	str	r0, [sl, #20]
   11488:	beq	114ac <main@@Base+0x35c>
   1148c:	mov	r3, r0
   11490:	mov	r2, #0
   11494:	str	r3, [r0, r2, lsl #3]
   11498:	add	r2, r2, #1
   1149c:	cmp	r5, r2
   114a0:	str	r3, [r3, #4]
   114a4:	add	r3, r3, #8
   114a8:	bhi	11494 <main@@Base+0x344>
   114ac:	ldr	r3, [sp, #48]	; 0x30
   114b0:	mov	r5, #24
   114b4:	mul	r0, r5, r3
   114b8:	bl	11050 <malloc@plt>
   114bc:	cmp	r7, r9
   114c0:	cmpeq	r6, r8
   114c4:	str	r0, [sp, #64]	; 0x40
   114c8:	bhi	11a74 <main@@Base+0x924>
   114cc:	ldr	r6, [pc, #1388]	; 11a40 <main@@Base+0x8f0>
   114d0:	ldr	r5, [pc, #1388]	; 11a44 <main@@Base+0x8f4>
   114d4:	ldr	fp, [pc, #1388]	; 11a48 <main@@Base+0x8f8>
   114d8:	mov	r8, #0
   114dc:	mov	r9, #0
   114e0:	mov	r7, #0
   114e4:	ldr	r3, [r4, #4]
   114e8:	cmp	r3, #1
   114ec:	beq	117a0 <main@@Base+0x650>
   114f0:	cmp	r3, #2
   114f4:	beq	11794 <main@@Base+0x644>
   114f8:	add	r0, sp, #80	; 0x50
   114fc:	bl	13fb8 <gauss_next@@Base>
   11500:	uxtab	r3, r6, r0
   11504:	and	r2, r0, #-16777216	; 0xff000000
   11508:	add	r3, r3, r2
   1150c:	and	r2, r0, #16711680	; 0xff0000
   11510:	add	r3, r3, r2
   11514:	and	r2, r0, #65280	; 0xff00
   11518:	add	r3, r3, r2
   1151c:	eor	r3, r3, r5
   11520:	sub	r3, r3, fp
   11524:	eor	r2, r6, r3
   11528:	sub	r2, r2, r3, ror #7
   1152c:	eor	r1, r5, r2
   11530:	sub	r1, r1, r2, ror #16
   11534:	eor	r3, r3, r1
   11538:	sub	r3, r3, r1, ror #28
   1153c:	eor	r2, r2, r3
   11540:	sub	r2, r2, r3, ror #18
   11544:	ldr	ip, [r4, #20]
   11548:	eor	r1, r1, r2
   1154c:	sub	r1, r1, r2, ror #8
   11550:	sub	lr, ip, #1
   11554:	ldr	r2, [sl, #20]
   11558:	and	r3, lr, r1
   1155c:	mov	r1, #0
   11560:	ldr	ip, [r2, r3, lsl #3]
   11564:	add	lr, r2, r3, lsl #3
   11568:	cmp	lr, ip
   1156c:	bne	11580 <main@@Base+0x430>
   11570:	b	117ac <main@@Base+0x65c>
   11574:	ldr	ip, [ip]
   11578:	cmp	lr, ip
   1157c:	beq	117ac <main@@Base+0x65c>
   11580:	ldrd	r2, [ip, #8]
   11584:	cmp	r1, r3
   11588:	cmpeq	r0, r2
   1158c:	bne	11574 <main@@Base+0x424>
   11590:	ldr	r3, [ip, #16]
   11594:	add	r3, r3, #1
   11598:	str	r3, [ip, #16]
   1159c:	ldrd	r2, [sp, #48]	; 0x30
   115a0:	adds	r8, r8, #1
   115a4:	adc	r9, r9, #0
   115a8:	cmp	r3, r9
   115ac:	cmpeq	r2, r8
   115b0:	bhi	114e4 <main@@Base+0x394>
   115b4:	ldr	r3, [pc, #1204]	; 11a70 <main@@Base+0x920>
   115b8:	mov	r2, #24
   115bc:	mov	r1, r7
   115c0:	ldr	r0, [sp, #64]	; 0x40
   115c4:	bl	110f8 <qsort@plt>
   115c8:	ldr	r3, [sl, #16]
   115cc:	str	r7, [sp, #60]	; 0x3c
   115d0:	cmp	r3, #1
   115d4:	beq	11948 <main@@Base+0x7f8>
   115d8:	ldr	r3, [sp, #60]	; 0x3c
   115dc:	vldr	d10, [sl]
   115e0:	vldr	d6, [pc, #984]	; 119c0 <main@@Base+0x870>
   115e4:	vmov	s15, r3
   115e8:	ldr	r6, [r4, #12]
   115ec:	sub	r0, r3, #1
   115f0:	vmul.f64	d6, d10, d6
   115f4:	mov	r1, r6
   115f8:	vcvt.f64.s32	d7, s15
   115fc:	str	r0, [sp, #72]	; 0x48
   11600:	lsl	r5, r6, #4
   11604:	vmul.f64	d7, d7, d6
   11608:	vcvt.u32.f64	s15, d7
   1160c:	vstr	s15, [sp, #68]	; 0x44
   11610:	bl	1456c <gauss_disable_hash@@Base+0x1c>
   11614:	add	r3, r0, #1
   11618:	mov	r0, r5
   1161c:	str	r3, [sp, #76]	; 0x4c
   11620:	bl	11050 <malloc@plt>
   11624:	cmp	r6, #0
   11628:	str	r0, [sp, #56]	; 0x38
   1162c:	beq	11658 <main@@Base+0x508>
   11630:	ldr	r3, [sp, #56]	; 0x38
   11634:	mov	r0, #0
   11638:	mov	r1, #0
   1163c:	add	r5, r5, r3
   11640:	mov	r2, #0
   11644:	strd	r0, [r3]
   11648:	str	r2, [r3, #8]
   1164c:	add	r3, r3, #16
   11650:	cmp	r5, r3
   11654:	bne	11644 <main@@Base+0x4f4>
   11658:	ldr	r3, [sp, #60]	; 0x3c
   1165c:	cmp	r3, #0
   11660:	beq	117e4 <main@@Base+0x694>
   11664:	vldr	s15, [sp, #48]	; 0x30
   11668:	vldr	d6, [pc, #856]	; 119c8 <main@@Base+0x878>
   1166c:	mov	r7, #0
   11670:	vldr	d9, [pc, #856]	; 119d0 <main@@Base+0x880>
   11674:	vcvt.f64.u32	d7, s15
   11678:	vldr	d8, [pc, #856]	; 119d8 <main@@Base+0x888>
   1167c:	vldr	d11, [pc, #860]	; 119e0 <main@@Base+0x890>
   11680:	mov	r6, r7
   11684:	mov	r5, r7
   11688:	mov	fp, r7
   1168c:	ldr	r8, [sp, #64]	; 0x40
   11690:	ldr	r9, [sp, #76]	; 0x4c
   11694:	vdiv.f64	d12, d6, d7
   11698:	b	116b0 <main@@Base+0x560>
   1169c:	ldr	r3, [sp, #60]	; 0x3c
   116a0:	add	r5, r5, #1
   116a4:	cmp	r3, r5
   116a8:	add	r8, r8, #24
   116ac:	beq	117e4 <main@@Base+0x694>
   116b0:	ldr	r3, [sp, #56]	; 0x38
   116b4:	ldr	ip, [sp, #72]	; 0x48
   116b8:	add	r0, r3, fp, lsl #4
   116bc:	ldr	r3, [r8, #16]
   116c0:	ldr	r2, [r0, #8]
   116c4:	sub	r1, r9, #1
   116c8:	add	r2, r2, r3
   116cc:	cmp	r5, ip
   116d0:	cmpne	r1, r5
   116d4:	str	r2, [r0, #8]
   116d8:	add	r6, r6, r3
   116dc:	add	r7, r7, r3
   116e0:	bne	11704 <main@@Base+0x5b4>
   116e4:	vmov	s15, r6
   116e8:	ldr	r3, [sp, #76]	; 0x4c
   116ec:	add	fp, fp, #1
   116f0:	add	r9, r9, r3
   116f4:	vcvt.f64.u32	d7, s15
   116f8:	mov	r6, #0
   116fc:	vmul.f64	d7, d12, d7
   11700:	vstr	d7, [r0]
   11704:	vcmp.f64	d10, #0.0
   11708:	ldr	r2, [sp, #68]	; 0x44
   1170c:	vmrs	APSR_nzcv, fpscr
   11710:	movne	r3, #1
   11714:	moveq	r3, #0
   11718:	cmp	r2, r7
   1171c:	movhi	r3, #0
   11720:	andls	r3, r3, #1
   11724:	cmp	r3, #0
   11728:	beq	1169c <main@@Base+0x54c>
   1172c:	vldr	s15, [r4]
   11730:	vmov	s13, r5
   11734:	vcvt.f64.u32	d7, s15
   11738:	vcvt.f64.s32	d6, s13
   1173c:	vmul.f64	d7, d7, d9
   11740:	vmul.f64	d7, d7, d6
   11744:	vcmpe.f64	d7, d8
   11748:	vmrs	APSR_nzcv, fpscr
   1174c:	movle	r3, #77	; 0x4d
   11750:	ble	11770 <main@@Base+0x620>
   11754:	vldr	d6, [pc, #652]	; 119e8 <main@@Base+0x898>
   11758:	vmul.f64	d7, d7, d6
   1175c:	vcmpe.f64	d7, d8
   11760:	vmrs	APSR_nzcv, fpscr
   11764:	vmulgt.f64	d7, d7, d6
   11768:	movgt	r3, #84	; 0x54
   1176c:	movle	r3, #71	; 0x47
   11770:	str	r3, [sp, #8]
   11774:	vstr	d7, [sp]
   11778:	vmov	r2, r3, d10
   1177c:	ldr	r1, [pc, #712]	; 11a4c <main@@Base+0x8fc>
   11780:	mov	r0, #1
   11784:	bl	110bc <__printf_chk@plt>
   11788:	vmov.f64	d10, d11
   1178c:	vstr	d11, [sl]
   11790:	b	1169c <main@@Base+0x54c>
   11794:	add	r0, sp, #144	; 0x90
   11798:	bl	13c50 <pareto_next@@Base>
   1179c:	b	11500 <main@@Base+0x3b0>
   117a0:	add	r0, sp, #144	; 0x90
   117a4:	bl	13778 <zipf_next@@Base>
   117a8:	b	11500 <main@@Base+0x3b0>
   117ac:	add	ip, r7, r7, lsl #1
   117b0:	ldr	r3, [sp, #64]	; 0x40
   117b4:	ldr	r2, [lr, #4]
   117b8:	add	r3, r3, ip, lsl #3
   117bc:	add	r7, r7, #1
   117c0:	strd	r0, [r3, #8]
   117c4:	mov	r1, #1
   117c8:	str	r1, [r3, #16]
   117cc:	ldr	r1, [sp, #64]	; 0x40
   117d0:	str	r3, [lr, #4]
   117d4:	str	lr, [r1, ip, lsl #3]
   117d8:	str	r2, [r3, #4]
   117dc:	str	r3, [r2]
   117e0:	b	1159c <main@@Base+0x44c>
   117e4:	vldr	s15, [r4, #12]
   117e8:	vldr	d6, [pc, #472]	; 119c8 <main@@Base+0x878>
   117ec:	ldr	r1, [pc, #604]	; 11a50 <main@@Base+0x900>
   117f0:	mov	r0, #1
   117f4:	vcvt.f64.u32	d7, s15
   117f8:	vdiv.f64	d9, d6, d7
   117fc:	bl	110bc <__printf_chk@plt>
   11800:	ldr	r0, [pc, #588]	; 11a54 <main@@Base+0x904>
   11804:	bl	11044 <puts@plt>
   11808:	ldr	r3, [r4, #12]
   1180c:	cmp	r3, #0
   11810:	moveq	r8, #0
   11814:	moveq	r9, #0
   11818:	beq	1190c <main@@Base+0x7bc>
   1181c:	vldr	d10, [pc, #444]	; 119e0 <main@@Base+0x890>
   11820:	ldr	r3, [sp, #56]	; 0x38
   11824:	vldr	d12, [pc, #444]	; 119e8 <main@@Base+0x898>
   11828:	vldr	d8, [pc, #424]	; 119d8 <main@@Base+0x888>
   1182c:	vmov.f64	d11, d10
   11830:	add	r7, r3, #8
   11834:	ldr	fp, [pc, #540]	; 11a58 <main@@Base+0x908>
   11838:	mov	r6, r7
   1183c:	mov	r8, #0
   11840:	mov	r9, #0
   11844:	mov	r5, #0
   11848:	vldr	s15, [r4]
   1184c:	ldr	r3, [r7, r5, lsl #4]
   11850:	vcvt.f64.u32	d7, s15
   11854:	vmov	s13, r3
   11858:	vcvt.f64.u32	d6, s13
   1185c:	vmul.f64	d7, d7, d12
   11860:	vmul.f64	d7, d7, d6
   11864:	vcmpe.f64	d7, d8
   11868:	vmrs	APSR_nzcv, fpscr
   1186c:	movle	r2, #75	; 0x4b
   11870:	ble	1188c <main@@Base+0x73c>
   11874:	vmul.f64	d7, d7, d12
   11878:	vcmpe.f64	d7, d8
   1187c:	vmrs	APSR_nzcv, fpscr
   11880:	vmulgt.f64	d7, d7, d12
   11884:	movgt	r2, #71	; 0x47
   11888:	movle	r2, #77	; 0x4d
   1188c:	vldr	d6, [r6, #-8]
   11890:	vadd.f64	d11, d11, d9
   11894:	adds	r8, r8, r3
   11898:	adc	r9, r9, #0
   1189c:	vadd.f64	d10, d10, d6
   118a0:	cmp	r5, #0
   118a4:	str	r2, [sp, #40]	; 0x28
   118a8:	vstr	d7, [sp, #32]
   118ac:	str	r3, [sp, #24]
   118b0:	vstr	d6, [sp, #8]
   118b4:	vstr	d11, [sp]
   118b8:	vstr	d10, [sp, #16]
   118bc:	bne	118e8 <main@@Base+0x798>
   118c0:	ldr	r2, [pc, #404]	; 11a5c <main@@Base+0x90c>
   118c4:	mov	r1, fp
   118c8:	mov	r0, #1
   118cc:	bl	110bc <__printf_chk@plt>
   118d0:	ldr	r3, [r4, #12]
   118d4:	add	r6, r6, #16
   118d8:	cmp	r3, #1
   118dc:	bls	1190c <main@@Base+0x7bc>
   118e0:	mov	r5, #1
   118e4:	b	11848 <main@@Base+0x6f8>
   118e8:	ldr	r2, [pc, #368]	; 11a60 <main@@Base+0x910>
   118ec:	mov	r1, fp
   118f0:	mov	r0, #1
   118f4:	bl	110bc <__printf_chk@plt>
   118f8:	ldr	r3, [r4, #12]
   118fc:	add	r5, r5, #1
   11900:	cmp	r5, r3
   11904:	add	r6, r6, #16
   11908:	bcc	11848 <main@@Base+0x6f8>
   1190c:	ldr	r0, [pc, #320]	; 11a54 <main@@Base+0x904>
   11910:	bl	11044 <puts@plt>
   11914:	mov	r2, r8
   11918:	mov	r3, r9
   1191c:	ldr	r1, [pc, #320]	; 11a64 <main@@Base+0x914>
   11920:	mov	r0, #1
   11924:	bl	110bc <__printf_chk@plt>
   11928:	ldr	r0, [sp, #56]	; 0x38
   1192c:	bl	10fd8 <free@plt>
   11930:	ldr	r0, [sl, #20]
   11934:	bl	10fd8 <free@plt>
   11938:	ldr	r0, [sp, #64]	; 0x40
   1193c:	bl	10fd8 <free@plt>
   11940:	mov	r5, #0
   11944:	b	112b8 <main@@Base+0x168>
   11948:	ldr	r0, [pc, #280]	; 11a68 <main@@Base+0x918>
   1194c:	bl	11044 <puts@plt>
   11950:	cmp	r7, #0
   11954:	beq	11930 <main@@Base+0x7e0>
   11958:	ldr	r6, [pc, #268]	; 11a6c <main@@Base+0x91c>
   1195c:	ldr	r5, [sp, #64]	; 0x40
   11960:	mov	r4, #0
   11964:	ldr	r3, [r5, #16]
   11968:	mov	r2, r4
   1196c:	mov	r1, r6
   11970:	add	r4, r4, #1
   11974:	mov	r0, #1
   11978:	bl	110bc <__printf_chk@plt>
   1197c:	cmp	r7, r4
   11980:	add	r5, r5, #24
   11984:	bne	11964 <main@@Base+0x814>
   11988:	b	11930 <main@@Base+0x7e0>
   1198c:	mov	r3, #1
   11990:	str	r3, [sp]
   11994:	add	r0, sp, #144	; 0x90
   11998:	ldrd	r2, [sp, #48]	; 0x30
   1199c:	bl	13a48 <pareto_init@@Base>
   119a0:	b	11438 <main@@Base+0x2e8>
   119a4:	str	r3, [sp]
   119a8:	mov	r2, r0
   119ac:	mov	r3, r1
   119b0:	add	r0, sp, #144	; 0x90
   119b4:	bl	13508 <zipf_init@@Base>
   119b8:	b	11438 <main@@Base+0x2e8>
   119bc:	nop			; (mov r0, r0)
   119c0:			; <UNDEFINED> instruction: 0x47ae147b
   119c4:	svccc	0x00847ae1
   119c8:	andeq	r0, r0, r0
   119cc:	subsmi	r0, r9, r0
   119d0:	andeq	r0, r0, r0
   119d4:	cdpcc	0, 11, cr0, cr0, cr0, {0}
   119d8:	andeq	r0, r0, r0
   119dc:	addsmi	r0, r0, r0
	...
   119ec:	svccc	0x00500000
   119f0:	andeq	r5, r2, r8, asr #28
   119f4:	andeq	r5, r1, r8, lsr r3
   119f8:	andeq	r6, r2, r0, lsr r0
   119fc:	andeq	r6, r2, r8, lsr #32
   11a00:	strdeq	r5, [r1], -r8
   11a04:	andeq	r6, r2, r8
   11a08:	andeq	r5, r1, ip, asr r1
   11a0c:	andeq	r5, r1, ip, lsl #3
   11a10:	andeq	r5, r1, r4, lsr #3
   11a14:	andeq	r5, r1, r4, ror #3
   11a18:	andeq	r5, r1, r4, lsl r2
   11a1c:	andeq	r5, r1, ip, ror #4
   11a20:	muleq	r1, r8, r2
   11a24:			; <UNDEFINED> instruction: 0x000152bc
   11a28:	ldrdeq	r5, [r1], -r8
   11a2c:	andeq	r5, r1, r8, lsr #6
   11a30:	andeq	r5, r1, r0, lsl #6
   11a34:	andeq	r5, r1, r8, lsl #6
   11a38:	andeq	r5, r1, ip, asr #2
   11a3c:	muleq	r1, r8, r3
   11a40:	bicvs	r8, r8, pc, asr #12
   11a44:	cdple	7, 6, cr2, cr12, cr14, {4}
   11a48:	teqvs	ip, r3	; <illegal shifter operand>
   11a4c:	muleq	r1, r4, r4
   11a50:	andeq	r5, r1, r0, lsl #8
   11a54:	andeq	r5, r1, ip, asr #8
   11a58:	andeq	r5, r1, r8, asr #9
   11a5c:	andeq	r5, r1, r4, asr #9
   11a60:	strdeq	r5, [r1], -r4
   11a64:	strdeq	r5, [r1], -r8
   11a68:	andeq	r5, r1, r8, ror #7
   11a6c:	strdeq	r5, [r1], -r4
   11a70:	andeq	r4, r1, ip, asr r5
   11a74:	ldr	r3, [pc, #-12]	; 11a70 <main@@Base+0x920>
   11a78:	mov	r2, r5
   11a7c:	mov	r1, #0
   11a80:	bl	110f8 <qsort@plt>
   11a84:	ldr	r3, [sl, #16]
   11a88:	cmp	r3, #1
   11a8c:	beq	11adc <main@@Base+0x98c>
   11a90:	mov	r3, #0
   11a94:	str	r3, [sp, #60]	; 0x3c
   11a98:	b	115d8 <main@@Base+0x488>
   11a9c:	mov	r5, #1
   11aa0:	mov	r0, r5
   11aa4:	mov	r1, #8
   11aa8:	str	r5, [r4, #20]
   11aac:	bl	10f9c <calloc@plt>
   11ab0:	str	r0, [sl, #20]
   11ab4:	b	1148c <main@@Base+0x33c>
   11ab8:	vldr	d6, [pc, #160]	; 11b60 <main@@Base+0xa10>
   11abc:	vcmp.f64	d7, d6
   11ac0:	vmrs	APSR_nzcv, fpscr
   11ac4:	beq	11b34 <main@@Base+0x9e4>
   11ac8:	cmp	r7, #0
   11acc:	ldreq	r2, [pc, #148]	; 11b68 <main@@Base+0xa18>
   11ad0:	ldreq	r3, [pc, #148]	; 11b6c <main@@Base+0xa1c>
   11ad4:	strdeq	r2, [sl, #8]
   11ad8:	b	113a8 <main@@Base+0x258>
   11adc:	ldr	r0, [pc, #140]	; 11b70 <main@@Base+0xa20>
   11ae0:	bl	11044 <puts@plt>
   11ae4:	b	11930 <main@@Base+0x7e0>
   11ae8:	vcmpe.f64	d7, #0.0
   11aec:	vldr	d6, [pc, #108]	; 11b60 <main@@Base+0xa10>
   11af0:	vmrs	APSR_nzcv, fpscr
   11af4:	vcmpe.f64	d7, d6
   11af8:	movmi	r3, #1
   11afc:	movpl	r3, #0
   11b00:	vmrs	APSR_nzcv, fpscr
   11b04:	orrge	r3, r3, #1
   11b08:	cmp	r3, #0
   11b0c:	bne	11b24 <main@@Base+0x9d4>
   11b10:	cmp	r7, #0
   11b14:	ldreq	r2, [pc, #76]	; 11b68 <main@@Base+0xa18>
   11b18:	ldreq	r3, [pc, #84]	; 11b74 <main@@Base+0xa24>
   11b1c:	strdeq	r2, [sl, #8]
   11b20:	b	113a8 <main@@Base+0x258>
   11b24:	ldr	r0, [pc, #76]	; 11b78 <main@@Base+0xa28>
   11b28:	bl	11044 <puts@plt>
   11b2c:	mov	r5, #1
   11b30:	b	112b8 <main@@Base+0x168>
   11b34:	ldr	r0, [pc, #64]	; 11b7c <main@@Base+0xa2c>
   11b38:	bl	11044 <puts@plt>
   11b3c:	b	112b8 <main@@Base+0x168>
   11b40:	mov	r2, sl
   11b44:	ldr	r1, [pc, #52]	; 11b80 <main@@Base+0xa30>
   11b48:	mov	r0, #1
   11b4c:	bl	110bc <__printf_chk@plt>
   11b50:	mov	r5, #1
   11b54:	b	112b8 <main@@Base+0x168>
   11b58:	bl	11014 <__stack_chk_fail@plt>
   11b5c:	nop			; (mov r0, r0)
   11b60:	andeq	r0, r0, r0
   11b64:	svccc	0x00f00000	; IMB
   11b68:	teqcc	r3, #-872415232	; 0xcc000000
   11b6c:	svccc	0x00f33333
   11b70:	andeq	r5, r1, r8, ror #7
   11b74:	svccc	0x00d33333
   11b78:	andeq	r5, r1, r8, asr #6
   11b7c:	andeq	r5, r1, r0, ror r3
   11b80:	andeq	r5, r1, r0, lsl r3
   11b84:	vmrs	r3, fpscr
   11b88:	orr	r3, r3, #16777216	; 0x1000000
   11b8c:	vmsr	fpscr, r3
   11b90:	bx	lr

00011b94 <_start@@Base>:
   11b94:	mov	fp, #0
   11b98:	mov	lr, #0
   11b9c:	pop	{r1}		; (ldr r1, [sp], #4)
   11ba0:	mov	r2, sp
   11ba4:	push	{r2}		; (str r2, [sp, #-4]!)
   11ba8:	push	{r0}		; (str r0, [sp, #-4]!)
   11bac:	ldr	ip, [pc, #16]	; 11bc4 <_start@@Base+0x30>
   11bb0:	push	{ip}		; (str ip, [sp, #-4]!)
   11bb4:	ldr	r0, [pc, #12]	; 11bc8 <_start@@Base+0x34>
   11bb8:	ldr	r3, [pc, #12]	; 11bcc <_start@@Base+0x38>
   11bbc:	bl	1105c <__libc_start_main@plt>
   11bc0:	bl	1111c <abort@plt>
   11bc4:	andeq	r5, r1, r0, lsr #1
   11bc8:	andeq	r1, r1, r0, asr r1
   11bcc:	andeq	r5, r1, r0, asr #32
   11bd0:	ldr	r3, [pc, #20]	; 11bec <_start@@Base+0x58>
   11bd4:	ldr	r2, [pc, #20]	; 11bf0 <_start@@Base+0x5c>
   11bd8:	add	r3, pc, r3
   11bdc:	ldr	r2, [r3, r2]
   11be0:	cmp	r2, #0
   11be4:	bxeq	lr
   11be8:	b	11068 <__gmon_start__@plt>
   11bec:	andeq	r4, r1, ip, ror r3
   11bf0:	muleq	r0, ip, r0
   11bf4:	ldr	r0, [pc, #24]	; 11c14 <_start@@Base+0x80>
   11bf8:	ldr	r3, [pc, #24]	; 11c18 <_start@@Base+0x84>
   11bfc:	cmp	r3, r0
   11c00:	bxeq	lr
   11c04:	ldr	r3, [pc, #16]	; 11c1c <_start@@Base+0x88>
   11c08:	cmp	r3, #0
   11c0c:	bxeq	lr
   11c10:	bx	r3
   11c14:	andeq	r6, r2, r0, lsr #32
   11c18:	andeq	r6, r2, r0, lsr #32
   11c1c:	andeq	r0, r0, r0
   11c20:	ldr	r0, [pc, #36]	; 11c4c <_start@@Base+0xb8>
   11c24:	ldr	r1, [pc, #36]	; 11c50 <_start@@Base+0xbc>
   11c28:	sub	r1, r1, r0
   11c2c:	asr	r1, r1, #2
   11c30:	add	r1, r1, r1, lsr #31
   11c34:	asrs	r1, r1, #1
   11c38:	bxeq	lr
   11c3c:	ldr	r3, [pc, #16]	; 11c54 <_start@@Base+0xc0>
   11c40:	cmp	r3, #0
   11c44:	bxeq	lr
   11c48:	bx	r3
   11c4c:	andeq	r6, r2, r0, lsr #32
   11c50:	andeq	r6, r2, r0, lsr #32
   11c54:	andeq	r0, r0, r0
   11c58:	push	{r4, lr}
   11c5c:	ldr	r4, [pc, #24]	; 11c7c <_start@@Base+0xe8>
   11c60:	ldrb	r3, [r4]
   11c64:	cmp	r3, #0
   11c68:	popne	{r4, pc}
   11c6c:	bl	11bf4 <_start@@Base+0x60>
   11c70:	mov	r3, #1
   11c74:	strb	r3, [r4]
   11c78:	pop	{r4, pc}
   11c7c:	andeq	r6, r2, ip, lsr #32
   11c80:	b	11c20 <_start@@Base+0x8c>

00011c84 <log_err@@Base>:
   11c84:	push	{r0, r1, r2, r3}
   11c88:	mov	r3, #1024	; 0x400
   11c8c:	push	{r4, lr}
   11c90:	sub	sp, sp, #1040	; 0x410
   11c94:	ldr	r4, [pc, #108]	; 11d08 <log_err@@Base+0x84>
   11c98:	ldr	r1, [sp, #1048]	; 0x418
   11c9c:	add	ip, sp, #1040	; 0x410
   11ca0:	add	ip, ip, #12
   11ca4:	ldr	r2, [r4]
   11ca8:	stm	sp, {r1, ip}
   11cac:	str	r2, [sp, #1036]	; 0x40c
   11cb0:	mov	r1, r3
   11cb4:	mov	r2, #1
   11cb8:	add	r0, sp, #12
   11cbc:	str	ip, [sp, #8]
   11cc0:	bl	10ff0 <__vsnprintf_chk@plt>
   11cc4:	ldr	r1, [pc, #64]	; 11d0c <log_err@@Base+0x88>
   11cc8:	ldr	r3, [pc, #64]	; 11d10 <log_err@@Base+0x8c>
   11ccc:	mov	r2, #1
   11cd0:	ldr	r3, [r3]
   11cd4:	cmp	r0, r1
   11cd8:	movcc	r1, r0
   11cdc:	add	r0, sp, #12
   11ce0:	bl	1102c <fwrite@plt>
   11ce4:	ldr	r2, [sp, #1036]	; 0x40c
   11ce8:	ldr	r3, [r4]
   11cec:	cmp	r2, r3
   11cf0:	bne	11d04 <log_err@@Base+0x80>
   11cf4:	add	sp, sp, #1040	; 0x410
   11cf8:	pop	{r4, lr}
   11cfc:	add	sp, sp, #16
   11d00:	bx	lr
   11d04:	bl	11014 <__stack_chk_fail@plt>
   11d08:	andeq	r5, r2, r8, asr #28
   11d0c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11d10:	andeq	r6, r2, r0, lsr #32

00011d14 <log_info@@Base>:
   11d14:	push	{r0, r1, r2, r3}
   11d18:	mov	r3, #1024	; 0x400
   11d1c:	push	{r4, lr}
   11d20:	sub	sp, sp, #1040	; 0x410
   11d24:	ldr	r4, [pc, #108]	; 11d98 <log_info@@Base+0x84>
   11d28:	ldr	r1, [sp, #1048]	; 0x418
   11d2c:	add	ip, sp, #1040	; 0x410
   11d30:	add	ip, ip, #12
   11d34:	ldr	r2, [r4]
   11d38:	stm	sp, {r1, ip}
   11d3c:	str	r2, [sp, #1036]	; 0x40c
   11d40:	mov	r1, r3
   11d44:	mov	r2, #1
   11d48:	add	r0, sp, #12
   11d4c:	str	ip, [sp, #8]
   11d50:	bl	10ff0 <__vsnprintf_chk@plt>
   11d54:	ldr	r1, [pc, #64]	; 11d9c <log_info@@Base+0x88>
   11d58:	ldr	r3, [pc, #64]	; 11da0 <log_info@@Base+0x8c>
   11d5c:	mov	r2, #1
   11d60:	ldr	r3, [r3]
   11d64:	cmp	r0, r1
   11d68:	movcc	r1, r0
   11d6c:	add	r0, sp, #12
   11d70:	bl	1102c <fwrite@plt>
   11d74:	ldr	r2, [sp, #1036]	; 0x40c
   11d78:	ldr	r3, [r4]
   11d7c:	cmp	r2, r3
   11d80:	bne	11d94 <log_info@@Base+0x80>
   11d84:	add	sp, sp, #1040	; 0x410
   11d88:	pop	{r4, lr}
   11d8c:	add	sp, sp, #16
   11d90:	bx	lr
   11d94:	bl	11014 <__stack_chk_fail@plt>
   11d98:	andeq	r5, r2, r8, asr #28
   11d9c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11da0:	andeq	r6, r2, r4, lsr #32
   11da4:	andeq	r0, r0, r0

00011da8 <pack754@@Base>:
   11da8:	vcmp.f64	d0, #0.0
   11dac:	vmrs	APSR_nzcv, fpscr
   11db0:	beq	11ec4 <pack754@@Base+0x11c>
   11db4:	vcmpe.f64	d0, #0.0
   11db8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dbc:	vldr	d7, [pc, #276]	; 11ed8 <pack754@@Base+0x130>
   11dc0:	vpush	{d8}
   11dc4:	vmrs	APSR_nzcv, fpscr
   11dc8:	vmov.f64	d8, d0
   11dcc:	mov	fp, r1
   11dd0:	vnegmi.f64	d8, d0
   11dd4:	movmi	r3, #1
   11dd8:	submi	r8, r0, #33	; 0x21
   11ddc:	submi	r7, r0, #1
   11de0:	vcmpe.f64	d8, d7
   11de4:	rsbmi	r2, r7, #32
   11de8:	lslmi	r8, r3, r8
   11dec:	movpl	r7, #0
   11df0:	lslmi	r7, r3, r7
   11df4:	orrmi	r8, r8, r3, lsr r2
   11df8:	movpl	r8, r7
   11dfc:	vmrs	APSR_nzcv, fpscr
   11e00:	blt	11ed0 <pack754@@Base+0x128>
   11e04:	vldr	d6, [pc, #212]	; 11ee0 <pack754@@Base+0x138>
   11e08:	mov	r4, #0
   11e0c:	vmul.f64	d8, d8, d6
   11e10:	add	r4, r4, #1
   11e14:	vcmpe.f64	d8, d7
   11e18:	vmrs	APSR_nzcv, fpscr
   11e1c:	bge	11e0c <pack754@@Base+0x64>
   11e20:	vldr	d7, [pc, #192]	; 11ee8 <pack754@@Base+0x140>
   11e24:	vcmpe.f64	d8, d7
   11e28:	vmrs	APSR_nzcv, fpscr
   11e2c:	bpl	11e44 <pack754@@Base+0x9c>
   11e30:	vadd.f64	d8, d8, d8
   11e34:	sub	r4, r4, #1
   11e38:	vcmpe.f64	d8, d7
   11e3c:	vmrs	APSR_nzcv, fpscr
   11e40:	bmi	11e30 <pack754@@Base+0x88>
   11e44:	sub	r0, r0, fp
   11e48:	mov	r5, #1
   11e4c:	sub	sl, r0, #33	; 0x21
   11e50:	sub	r6, r0, #1
   11e54:	rsb	r9, r6, #32
   11e58:	lsl	r1, r5, sl
   11e5c:	lsl	r0, r5, r6
   11e60:	orr	r1, r1, r5, lsr r9
   11e64:	bl	14d0c <gauss_disable_hash@@Base+0x7bc>
   11e68:	vldr	s14, [pc, #128]	; 11ef0 <pack754@@Base+0x148>
   11e6c:	vldr	d0, [pc, #116]	; 11ee8 <pack754@@Base+0x140>
   11e70:	sub	fp, fp, #1
   11e74:	lsl	r5, r5, fp
   11e78:	vsub.f64	d8, d8, d0
   11e7c:	sub	r5, r5, #1
   11e80:	add	r4, r5, r4
   11e84:	vmov	s15, r0
   11e88:	vadd.f32	s14, s15, s14
   11e8c:	vcvt.f64.f32	d7, s14
   11e90:	vmul.f64	d7, d7, d8
   11e94:	vmov	r0, r1, d7
   11e98:	bl	14ea8 <gauss_disable_hash@@Base+0x958>
   11e9c:	asr	r3, r4, #31
   11ea0:	vpop	{d8}
   11ea4:	lsl	r3, r3, r6
   11ea8:	orr	r3, r3, r4, lsl sl
   11eac:	orr	r3, r3, r4, lsr r9
   11eb0:	orr	r0, r0, r4, lsl r6
   11eb4:	orr	r1, r1, r3
   11eb8:	orr	r0, r0, r7
   11ebc:	orr	r1, r1, r8
   11ec0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ec4:	mov	r0, #0
   11ec8:	mov	r1, r0
   11ecc:	bx	lr
   11ed0:	mov	r4, #0
   11ed4:	b	11e20 <pack754@@Base+0x78>
   11ed8:	andeq	r0, r0, r0
   11edc:	andmi	r0, r0, r0
   11ee0:	andeq	r0, r0, r0
   11ee4:	svccc	0x00e00000
   11ee8:	andeq	r0, r0, r0
   11eec:	svccc	0x00f00000	; IMB
   11ef0:	svccc	0x00000000

00011ef4 <unpack754@@Base>:
   11ef4:	orrs	ip, r0, r1
   11ef8:	beq	12038 <unpack754@@Base+0x144>
   11efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f00:	sub	r9, r2, r3
   11f04:	mov	r4, #1
   11f08:	sub	fp, r9, #33	; 0x21
   11f0c:	sub	r9, r9, #1
   11f10:	mov	r5, r3
   11f14:	vpush	{d8}
   11f18:	rsb	r3, r9, #32
   11f1c:	lsl	sl, r4, fp
   11f20:	mov	r8, r2
   11f24:	lsl	r2, r4, r9
   11f28:	orr	sl, sl, r4, lsr r3
   11f2c:	mov	r6, r0
   11f30:	subs	r0, r2, #1
   11f34:	sub	sp, sp, #12
   11f38:	mov	r7, r1
   11f3c:	sbc	r1, sl, #0
   11f40:	and	r0, r0, r6
   11f44:	and	r1, r1, r7
   11f48:	str	r3, [sp, #4]
   11f4c:	str	r2, [sp]
   11f50:	bl	14ac4 <gauss_disable_hash@@Base+0x574>
   11f54:	ldr	r2, [sp]
   11f58:	vmov	d8, r0, r1
   11f5c:	mov	r0, r2
   11f60:	mov	r1, sl
   11f64:	bl	14ad8 <gauss_disable_hash@@Base+0x588>
   11f68:	ldr	r3, [sp, #4]
   11f6c:	sub	r2, r5, #32
   11f70:	lsr	ip, r6, r9
   11f74:	vldr	d7, [pc, #196]	; 12040 <unpack754@@Base+0x14c>
   11f78:	orr	ip, ip, r7, lsl r3
   11f7c:	lsl	r2, r4, r2
   11f80:	rsb	r3, r5, #32
   11f84:	lsl	lr, r4, r5
   11f88:	orr	r2, r2, r4, lsr r3
   11f8c:	sub	r3, r5, #1
   11f90:	subs	lr, lr, #1
   11f94:	orr	ip, ip, r7, lsr fp
   11f98:	lsl	r3, r4, r3
   11f9c:	sbc	r2, r2, #0
   11fa0:	sub	r3, r3, #1
   11fa4:	and	r4, lr, ip
   11fa8:	and	r5, r2, r7, lsr r9
   11fac:	subs	sl, r4, r3
   11fb0:	sbc	fp, r5, #0
   11fb4:	cmp	sl, #1
   11fb8:	sbcs	r3, fp, #0
   11fbc:	vmov	d6, r0, r1
   11fc0:	vdiv.f64	d0, d8, d6
   11fc4:	vadd.f64	d0, d0, d7
   11fc8:	blt	12014 <unpack754@@Base+0x120>
   11fcc:	subs	sl, sl, #1
   11fd0:	sbc	fp, fp, #0
   11fd4:	orrs	r3, sl, fp
   11fd8:	vadd.f64	d0, d0, d0
   11fdc:	bne	11fcc <unpack754@@Base+0xd8>
   11fe0:	sub	r3, r8, #1
   11fe4:	rsb	r2, r3, #32
   11fe8:	lsr	r3, r6, r3
   11fec:	sub	r8, r8, #33	; 0x21
   11ff0:	orr	r3, r3, r7, lsl r2
   11ff4:	orr	r3, r3, r7, lsr r8
   11ff8:	mov	r1, #0
   11ffc:	and	r0, r3, #1
   12000:	orrs	r3, r0, r1
   12004:	vnegne.f64	d0, d0
   12008:	add	sp, sp, #12
   1200c:	vpop	{d8}
   12010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12014:	orrs	r3, sl, fp
   12018:	beq	11fe0 <unpack754@@Base+0xec>
   1201c:	vldr	d7, [pc, #36]	; 12048 <unpack754@@Base+0x154>
   12020:	adds	sl, sl, #1
   12024:	adc	fp, fp, #0
   12028:	orrs	r3, sl, fp
   1202c:	vmul.f64	d0, d0, d7
   12030:	bne	12020 <unpack754@@Base+0x12c>
   12034:	b	11fe0 <unpack754@@Base+0xec>
   12038:	vldr	d0, [pc, #16]	; 12050 <unpack754@@Base+0x15c>
   1203c:	bx	lr
   12040:	andeq	r0, r0, r0
   12044:	svccc	0x00f00000	; IMB
   12048:	andeq	r0, r0, r0
   1204c:	svccc	0x00e00000
	...

00012058 <init_rand@@Base>:
   12058:	cmp	r1, #0
   1205c:	str	r1, [r0]
   12060:	bne	1207c <init_rand@@Base+0x24>
   12064:	ldr	r2, [pc, #132]	; 120f0 <init_rand@@Base+0x98>
   12068:	ldr	r3, [pc, #132]	; 120f4 <init_rand@@Base+0x9c>
   1206c:	ldr	r1, [pc, #132]	; 120f8 <init_rand@@Base+0xa0>
   12070:	strd	r2, [r0, #12]
   12074:	str	r1, [r0, #8]
   12078:	bx	lr
   1207c:	push	{r4, r5, r6, r7}
   12080:	add	r3, pc, #64	; 0x40
   12084:	ldrd	r2, [r3]
   12088:	add	r5, pc, #64	; 0x40
   1208c:	ldrd	r4, [r5]
   12090:	add	r7, pc, #64	; 0x40
   12094:	ldrd	r6, [r7]
   12098:	strd	r2, [r0, #16]
   1209c:	strd	r4, [r0, #8]
   120a0:	add	r3, pc, #56	; 0x38
   120a4:	ldrd	r2, [r3]
   120a8:	add	r5, pc, #56	; 0x38
   120ac:	ldrd	r4, [r5]
   120b0:	strd	r6, [r0, #24]
   120b4:	strd	r2, [r0, #40]	; 0x28
   120b8:	strd	r4, [r0, #32]
   120bc:	pop	{r4, r5, r6, r7}
   120c0:	bx	lr
   120c4:	nop			; (mov r0, r0)
   120c8:	blhi	ffd4966c <__bss_end__@@Base+0xffd23620>
   120cc:	strbeq	pc, [r7, #-438]	; 0xfffffe4a	; <UNPREDICTABLE>
   120d0:	ldmib	r6!, {r1, r2, r8, r9, sl, fp, sp}
   120d4:	andeq	r0, r0, pc, lsl r0
   120d8:	cdpgt	3, 3, cr9, cr3, cr8, {0}
   120dc:	blvs	1f96448 <__bss_end__@@Base+0x1f703fc>
   120e0:			; <UNDEFINED> instruction: 0xf7eb83fc
   120e4:	ldmibne	fp, {r2, r3, r5, r6, r7, r9, sl, fp, pc}^
   120e8:	svchi	0x0013a660
   120ec:	strteq	lr, [ip], r1, lsr #15
   120f0:	ldrlt	r9, [fp, #-1619]!	; 0xfffff9ad
   120f4:	rsbsmi	lr, lr, r4, asr #25
   120f8:	ldrblt	r7, [r1], #-811	; 0xfffffcd5

000120fc <init_rand_seed@@Base>:
   120fc:	cmp	r2, #0
   12100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12104:	mov	ip, r1
   12108:	sub	sp, sp, #12
   1210c:	mov	sl, r0
   12110:	str	r2, [r0]
   12114:	bne	12278 <init_rand_seed@@Base+0x17c>
   12118:	ldr	r3, [pc, #1628]	; 1277c <init_rand_seed@@Base+0x680>
   1211c:	cmp	r1, r3
   12120:	beq	12770 <init_rand_seed@@Base+0x674>
   12124:	eor	r3, r3, r1
   12128:	add	r2, r3, r3, lsl #2
   1212c:	rsb	r2, r2, r2, lsl #4
   12130:	rsb	r2, r3, r2, lsl #2
   12134:	rsb	r2, r2, r2, lsl #3
   12138:	add	r2, r2, r2, lsl #5
   1213c:	eor	r2, r2, r1
   12140:	cmp	r2, #6
   12144:	addls	r2, r2, #7
   12148:	lsl	lr, r2, #2
   1214c:	add	r1, lr, r2
   12150:	eor	r0, lr, r2
   12154:	rsb	r1, r1, r1, lsl #4
   12158:	lsl	lr, r2, #4
   1215c:	rsb	r1, r2, r1, lsl #2
   12160:	bic	lr, lr, #127	; 0x7f
   12164:	rsb	r1, r1, r1, lsl #3
   12168:	orr	lr, lr, r0, lsr #25
   1216c:	add	r1, r1, r1, lsl #5
   12170:	eor	ip, ip, r1
   12174:	cmp	ip, #14
   12178:	ldr	r1, [pc, #1536]	; 12780 <init_rand_seed@@Base+0x684>
   1217c:	addls	ip, ip, #15
   12180:	eor	r0, r3, r3, lsl #13
   12184:	ldr	r2, [pc, #1528]	; 12784 <init_rand_seed@@Base+0x688>
   12188:	and	r3, r1, r3, lsl #12
   1218c:	orr	r3, r3, r0, lsr #19
   12190:	eor	r0, ip, ip, lsl #3
   12194:	and	ip, r2, ip, lsl #17
   12198:	orr	ip, ip, r0, lsr #11
   1219c:	lsl	r4, lr, #4
   121a0:	eor	r0, r3, r3, lsl #13
   121a4:	eor	lr, lr, lr, lsl #2
   121a8:	and	r3, r1, r3, lsl #12
   121ac:	bic	r4, r4, #127	; 0x7f
   121b0:	orr	r0, r3, r0, lsr #19
   121b4:	orr	lr, r4, lr, lsr #25
   121b8:	eor	r3, ip, ip, lsl #3
   121bc:	and	ip, r2, ip, lsl #17
   121c0:	orr	ip, ip, r3, lsr #11
   121c4:	lsl	r4, lr, #4
   121c8:	eor	r3, r0, r0, lsl #13
   121cc:	eor	lr, lr, lr, lsl #2
   121d0:	and	r0, r1, r0, lsl #12
   121d4:	bic	r4, r4, #127	; 0x7f
   121d8:	orr	r4, r4, lr, lsr #25
   121dc:	orr	r0, r0, r3, lsr #19
   121e0:	eor	lr, ip, ip, lsl #3
   121e4:	and	r3, r2, ip, lsl #17
   121e8:	orr	r3, r3, lr, lsr #11
   121ec:	eor	ip, r0, r0, lsl #13
   121f0:	lsl	lr, r4, #4
   121f4:	eor	r4, r4, r4, lsl #2
   121f8:	and	r0, r1, r0, lsl #12
   121fc:	bic	lr, lr, #127	; 0x7f
   12200:	orr	lr, lr, r4, lsr #25
   12204:	orr	r0, r0, ip, lsr #19
   12208:	eor	ip, r3, r3, lsl #3
   1220c:	and	r3, r2, r3, lsl #17
   12210:	orr	r3, r3, ip, lsr #11
   12214:	lsl	ip, lr, #4
   12218:	eor	lr, lr, lr, lsl #2
   1221c:	bic	ip, ip, #127	; 0x7f
   12220:	orr	ip, ip, lr, lsr #25
   12224:	eor	lr, r0, r0, lsl #13
   12228:	and	r0, r1, r0, lsl #12
   1222c:	orr	r0, r0, lr, lsr #19
   12230:	eor	lr, r3, r3, lsl #3
   12234:	and	r3, r2, r3, lsl #17
   12238:	orr	r3, r3, lr, lsr #11
   1223c:	and	r1, r1, r0, lsl #12
   12240:	and	r2, r2, r3, lsl #17
   12244:	lsl	lr, ip, #4
   12248:	eor	r0, r0, r0, lsl #13
   1224c:	eor	ip, ip, ip, lsl #2
   12250:	eor	r3, r3, r3, lsl #3
   12254:	bic	lr, lr, #127	; 0x7f
   12258:	orr	ip, lr, ip, lsr #25
   1225c:	orr	r0, r1, r0, lsr #19
   12260:	orr	r3, r2, r3, lsr #11
   12264:	str	ip, [sl, #12]
   12268:	str	r0, [sl, #8]
   1226c:	str	r3, [sl, #16]
   12270:	add	sp, sp, #12
   12274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12278:	ldr	lr, [pc, #1288]	; 12788 <init_rand_seed@@Base+0x68c>
   1227c:	ldr	r0, [pc, #1288]	; 1278c <init_rand_seed@@Base+0x690>
   12280:	eor	lr, lr, r1
   12284:	ldr	r3, [pc, #1284]	; 12790 <init_rand_seed@@Base+0x694>
   12288:	umull	r0, r1, lr, r0
   1228c:	add	r3, lr, r3
   12290:	add	r3, r3, r1
   12294:	eor	r4, ip, r0
   12298:	cmp	r3, #0
   1229c:	cmpeq	r4, #6
   122a0:	mov	r5, r3
   122a4:	bhi	122b0 <init_rand_seed@@Base+0x1b4>
   122a8:	adds	r4, r4, #7
   122ac:	adc	r5, r3, #0
   122b0:	ldr	r6, [pc, #1236]	; 1278c <init_rand_seed@@Base+0x690>
   122b4:	umull	r2, r3, r4, r6
   122b8:	mla	r6, r6, r5, r4
   122bc:	eor	r0, ip, r2
   122c0:	add	r6, r6, r3
   122c4:	cmp	r6, #0
   122c8:	cmpeq	r0, #14
   122cc:	mov	r1, r6
   122d0:	bhi	122dc <init_rand_seed@@Base+0x1e0>
   122d4:	adds	r0, r0, #15
   122d8:	adc	r1, r6, #0
   122dc:	ldr	r8, [pc, #1192]	; 1278c <init_rand_seed@@Base+0x690>
   122e0:	umull	r6, r7, r0, r8
   122e4:	mla	r8, r8, r1, r0
   122e8:	eor	r2, ip, r6
   122ec:	add	r8, r8, r7
   122f0:	cmp	r8, #0
   122f4:	cmpeq	r2, #32
   122f8:	mov	r3, r8
   122fc:	bhi	12308 <init_rand_seed@@Base+0x20c>
   12300:	adds	r2, r2, #33	; 0x21
   12304:	adc	r3, r8, #0
   12308:	ldr	fp, [pc, #1148]	; 1278c <init_rand_seed@@Base+0x690>
   1230c:	umull	r6, r7, r2, fp
   12310:	mla	fp, fp, r3, r2
   12314:	eor	r8, ip, r6
   12318:	add	fp, fp, r7
   1231c:	cmp	fp, #0
   12320:	cmpeq	r8, #48	; 0x30
   12324:	mov	r9, fp
   12328:	bls	12764 <init_rand_seed@@Base+0x668>
   1232c:	lsl	ip, r1, #3
   12330:	lsl	r6, r1, #29
   12334:	orr	ip, ip, r0, lsr #29
   12338:	orr	r6, r6, r0, lsr #3
   1233c:	eor	ip, ip, r1
   12340:	lsl	fp, r3, #5
   12344:	eor	r7, r0, r0, lsl #3
   12348:	bic	r6, r6, #508	; 0x1fc
   1234c:	orr	fp, fp, r2, lsr #27
   12350:	lsl	r1, r3, #23
   12354:	bic	r6, r6, #3
   12358:	eor	fp, fp, r3
   1235c:	orr	r6, r6, ip, lsr #23
   12360:	orr	r1, r1, r2, lsr #9
   12364:	eor	r3, r2, r2, lsl #5
   12368:	lsr	r7, r7, #23
   1236c:	orr	r7, r7, ip, lsl #9
   12370:	bic	r1, r1, #255	; 0xff
   12374:	orr	r1, r1, fp, lsr #24
   12378:	lsl	ip, r6, #3
   1237c:	lsl	r2, r9, #3
   12380:	lsr	r3, r3, #24
   12384:	orr	r3, r3, fp, lsl #8
   12388:	orr	r2, r2, r8, lsr #29
   1238c:	orr	ip, ip, r7, lsr #29
   12390:	eor	fp, r2, r9
   12394:	eor	r2, ip, r6
   12398:	lsl	ip, r1, #5
   1239c:	orr	ip, ip, r3, lsr #27
   123a0:	lsl	r6, r6, #29
   123a4:	eor	ip, ip, r1
   123a8:	orr	r6, r6, r7, lsr #3
   123ac:	lsl	r1, r1, #23
   123b0:	eor	r7, r7, r7, lsl #3
   123b4:	orr	r1, r1, r3, lsr #9
   123b8:	bic	r6, r6, #508	; 0x1fc
   123bc:	eor	r3, r3, r3, lsl #5
   123c0:	lsl	r0, r5, #24
   123c4:	bic	r6, r6, #3
   123c8:	lsr	r7, r7, #23
   123cc:	orr	r6, r6, r2, lsr #23
   123d0:	orr	r7, r7, r2, lsl #9
   123d4:	orr	r0, r0, r4, lsr #8
   123d8:	ldr	r2, [pc, #948]	; 12794 <init_rand_seed@@Base+0x698>
   123dc:	bic	r1, r1, #255	; 0xff
   123e0:	lsr	r3, r3, #24
   123e4:	orr	r1, r1, ip, lsr #24
   123e8:	orr	r3, r3, ip, lsl #8
   123ec:	eor	r0, r0, r5
   123f0:	lsl	ip, r5, #5
   123f4:	orr	ip, ip, r4, lsr #27
   123f8:	and	r4, r2, r4, lsl #5
   123fc:	orr	r4, r4, r0, lsr #18
   12400:	lsl	r2, r8, #8
   12404:	lsl	r0, r9, #8
   12408:	orr	r0, r0, r8, lsr #24
   1240c:	and	r2, r2, #-2147483648	; 0x80000000
   12410:	lsl	r8, ip, #24
   12414:	orr	r2, r2, fp, lsr #1
   12418:	orr	r8, r8, r4, lsr #8
   1241c:	lsl	r5, r6, #3
   12420:	ldr	fp, [pc, #876]	; 12794 <init_rand_seed@@Base+0x698>
   12424:	eor	r8, r8, ip
   12428:	orr	r5, r5, r7, lsr #29
   1242c:	lsl	ip, ip, #5
   12430:	orr	ip, ip, r4, lsr #27
   12434:	lsl	r9, r0, #3
   12438:	and	r4, fp, r4, lsl #5
   1243c:	eor	fp, r5, r6
   12440:	lsl	r6, r6, #29
   12444:	orr	r4, r4, r8, lsr #18
   12448:	orr	r9, r9, r2, lsr #29
   1244c:	orr	r6, r6, r7, lsr #3
   12450:	lsl	r8, r1, #5
   12454:	eor	r9, r9, r0
   12458:	orr	r8, r8, r3, lsr #27
   1245c:	lsl	r5, r1, #23
   12460:	lsl	r0, r0, #8
   12464:	bic	r6, r6, #508	; 0x1fc
   12468:	orr	r0, r0, r2, lsr #24
   1246c:	eor	r8, r8, r1
   12470:	orr	r5, r5, r3, lsr #9
   12474:	bic	r6, r6, #3
   12478:	lsl	r2, r2, #8
   1247c:	eor	r3, r3, r3, lsl #5
   12480:	orr	r1, r6, fp, lsr #23
   12484:	and	r2, r2, #-2147483648	; 0x80000000
   12488:	lsl	r6, ip, #24
   1248c:	bic	r5, r5, #255	; 0xff
   12490:	orr	r2, r2, r9, lsr #1
   12494:	orr	r5, r5, r8, lsr #24
   12498:	orr	r6, r6, r4, lsr #8
   1249c:	ldr	r9, [pc, #752]	; 12794 <init_rand_seed@@Base+0x698>
   124a0:	lsr	r3, r3, #24
   124a4:	orr	r3, r3, r8, lsl #8
   124a8:	eor	r6, r6, ip
   124ac:	lsl	r8, r0, #3
   124b0:	lsl	ip, ip, #5
   124b4:	orr	ip, ip, r4, lsr #27
   124b8:	orr	r8, r8, r2, lsr #29
   124bc:	and	r4, r9, r4, lsl #5
   124c0:	lsl	r9, r5, #5
   124c4:	orr	r4, r4, r6, lsr #18
   124c8:	eor	r8, r8, r0
   124cc:	lsl	r6, lr, #30
   124d0:	orr	r9, r9, r3, lsr #27
   124d4:	lsl	r0, r0, #8
   124d8:	orr	r0, r0, r2, lsr #24
   124dc:	eor	r9, r9, r5
   124e0:	lsl	r2, r2, #8
   124e4:	and	r6, r6, #-2147483648	; 0x80000000
   124e8:	lsl	r5, r5, #23
   124ec:	eor	r6, r6, #127	; 0x7f
   124f0:	and	r2, r2, #-2147483648	; 0x80000000
   124f4:	orr	r5, r5, r3, lsr #9
   124f8:	eor	r3, r3, r3, lsl #5
   124fc:	orr	r8, r2, r8, lsr #1
   12500:	adds	r2, r6, r6
   12504:	mov	r2, #1073741824	; 0x40000000
   12508:	orr	lr, r2, lr, lsr #2
   1250c:	bic	r5, r5, #255	; 0xff
   12510:	lsl	r2, ip, #24
   12514:	lsr	r3, r3, #24
   12518:	orr	r5, r5, r9, lsr #24
   1251c:	orr	r3, r3, r9, lsl #8
   12520:	orr	r2, r2, r4, lsr #8
   12524:	ldr	r9, [pc, #616]	; 12794 <init_rand_seed@@Base+0x698>
   12528:	eor	r2, r2, ip
   1252c:	lsl	ip, ip, #5
   12530:	orr	ip, ip, r4, lsr #27
   12534:	and	r4, r9, r4, lsl #5
   12538:	orr	r2, r4, r2, lsr #18
   1253c:	lsl	r4, r0, #3
   12540:	orr	r4, r4, r8, lsr #29
   12544:	eor	r4, r4, r0
   12548:	eor	r7, r7, r7, lsl #3
   1254c:	lsl	r0, r0, #8
   12550:	str	r2, [sp]
   12554:	orr	r0, r0, r8, lsr #24
   12558:	adc	r2, lr, lr
   1255c:	lsl	r8, r8, #8
   12560:	eor	r2, r2, lr
   12564:	lsr	r7, r7, #23
   12568:	lsl	lr, lr, #10
   1256c:	and	r8, r8, #-2147483648	; 0x80000000
   12570:	orr	r7, r7, fp, lsl #9
   12574:	orr	r8, r8, r4, lsr #1
   12578:	orr	r4, lr, r6, lsr #22
   1257c:	ldr	lr, [pc, #532]	; 12798 <init_rand_seed@@Base+0x69c>
   12580:	lsl	fp, r1, #3
   12584:	orr	fp, fp, r7, lsr #29
   12588:	and	r6, lr, r6, lsl #10
   1258c:	lsl	lr, r5, #5
   12590:	eor	fp, fp, r1
   12594:	orr	lr, lr, r3, lsr #27
   12598:	lsl	r1, r1, #29
   1259c:	eor	lr, lr, r5
   125a0:	orr	r1, r1, r7, lsr #3
   125a4:	lsl	r5, r5, #23
   125a8:	orr	r5, r5, r3, lsr #9
   125ac:	eor	r7, r7, r7, lsl #3
   125b0:	eor	r3, r3, r3, lsl #5
   125b4:	bic	r1, r1, #508	; 0x1fc
   125b8:	orr	r6, r6, r2, lsr #21
   125bc:	bic	r1, r1, #3
   125c0:	orr	r1, r1, fp, lsr #23
   125c4:	adds	r2, r6, r6
   125c8:	lsr	r7, r7, #23
   125cc:	lsr	r2, r3, #24
   125d0:	bic	r5, r5, #255	; 0xff
   125d4:	orr	r5, r5, lr, lsr #24
   125d8:	orr	r7, r7, fp, lsl #9
   125dc:	orr	r2, r2, lr, lsl #8
   125e0:	ldr	lr, [sp]
   125e4:	lsl	fp, r1, #3
   125e8:	orr	fp, fp, r7, lsr #29
   125ec:	lsl	r3, ip, #24
   125f0:	eor	fp, fp, r1
   125f4:	lsl	r9, r1, #29
   125f8:	orr	r3, r3, lr, lsr #8
   125fc:	ldr	r1, [pc, #400]	; 12794 <init_rand_seed@@Base+0x698>
   12600:	eor	r3, r3, ip
   12604:	and	r1, r1, lr, lsl #5
   12608:	orr	r1, r1, r3, lsr #18
   1260c:	lsl	r3, r0, #3
   12610:	orr	r3, r3, r8, lsr #29
   12614:	eor	r3, r3, r0
   12618:	lsl	r0, r0, #8
   1261c:	orr	r0, r0, r8, lsr #24
   12620:	lsl	r8, r8, #8
   12624:	and	r8, r8, #-2147483648	; 0x80000000
   12628:	lsl	ip, ip, #5
   1262c:	orr	ip, ip, lr, lsr #27
   12630:	orr	r3, r8, r3, lsr #1
   12634:	adc	lr, r4, r4
   12638:	orr	r9, r9, r7, lsr #3
   1263c:	str	r3, [sp, #4]
   12640:	eor	r7, r7, r7, lsl #3
   12644:	eor	r3, lr, r4
   12648:	bic	r9, r9, #508	; 0x1fc
   1264c:	ldr	lr, [pc, #324]	; 12798 <init_rand_seed@@Base+0x69c>
   12650:	bic	r9, r9, #3
   12654:	lsl	r4, r4, #10
   12658:	orr	r4, r4, r6, lsr #22
   1265c:	orr	r9, r9, fp, lsr #23
   12660:	and	r6, lr, r6, lsl #10
   12664:	lsr	r7, r7, #23
   12668:	orr	r7, r7, fp, lsl #9
   1266c:	orr	r3, r6, r3, lsr #21
   12670:	str	r3, [sp]
   12674:	lsl	fp, r9, #29
   12678:	adds	r3, r3, r3
   1267c:	lsl	r3, r9, #3
   12680:	orr	r3, r3, r7, lsr #29
   12684:	orr	fp, fp, r7, lsr #3
   12688:	eor	r7, r7, r7, lsl #3
   1268c:	ldr	r6, [pc, #260]	; 12798 <init_rand_seed@@Base+0x69c>
   12690:	lsr	r7, r7, #23
   12694:	mov	lr, r7
   12698:	ldr	r7, [sp]
   1269c:	lsl	r8, r5, #5
   126a0:	orr	r8, r8, r2, lsr #27
   126a4:	and	r6, r6, r7, lsl #10
   126a8:	lsl	r7, ip, #24
   126ac:	eor	r9, r9, r3
   126b0:	eor	r8, r8, r5
   126b4:	lsl	r3, r5, #23
   126b8:	orr	r7, r7, r1, lsr #8
   126bc:	bic	fp, fp, #508	; 0x1fc
   126c0:	ldr	r5, [pc, #204]	; 12794 <init_rand_seed@@Base+0x698>
   126c4:	eor	r7, r7, ip
   126c8:	orr	r3, r3, r2, lsr #9
   126cc:	bic	fp, fp, #3
   126d0:	eor	r2, r2, r2, lsl #5
   126d4:	orr	fp, fp, r9, lsr #23
   126d8:	orr	lr, lr, r9, lsl #9
   126dc:	and	r5, r5, r1, lsl #5
   126e0:	ldr	r9, [sp, #4]
   126e4:	orr	r5, r5, r7, lsr #18
   126e8:	bic	r3, r3, #255	; 0xff
   126ec:	adc	r7, r4, r4
   126f0:	lsr	r2, r2, #24
   126f4:	orr	r3, r3, r8, lsr #24
   126f8:	orr	r2, r2, r8, lsl #8
   126fc:	eor	r7, r7, r4
   12700:	lsl	r8, r0, #3
   12704:	orr	r8, r8, r9, lsr #29
   12708:	orr	r6, r6, r7, lsr #21
   1270c:	eor	r8, r8, r0
   12710:	ldr	r7, [sp]
   12714:	lsl	r0, r0, #8
   12718:	orr	r0, r0, r9, lsr #24
   1271c:	lsl	r9, r9, #8
   12720:	and	r9, r9, #-2147483648	; 0x80000000
   12724:	lsl	ip, ip, #5
   12728:	lsl	r4, r4, #10
   1272c:	orr	ip, ip, r1, lsr #27
   12730:	orr	r8, r9, r8, lsr #1
   12734:	orr	r4, r4, r7, lsr #22
   12738:	str	fp, [sl, #28]
   1273c:	str	lr, [sl, #24]
   12740:	strd	r2, [sl, #32]
   12744:	str	r5, [sl, #16]
   12748:	str	ip, [sl, #20]
   1274c:	str	r8, [sl, #40]	; 0x28
   12750:	str	r0, [sl, #44]	; 0x2c
   12754:	str	r6, [sl, #8]
   12758:	str	r4, [sl, #12]
   1275c:	add	sp, sp, #12
   12760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12764:	adds	r8, r8, #49	; 0x31
   12768:	adc	r9, fp, #0
   1276c:	b	1232c <init_rand_seed@@Base+0x230>
   12770:	ldr	r2, [pc, #36]	; 1279c <init_rand_seed@@Base+0x6a0>
   12774:	mov	r3, #1
   12778:	b	12148 <init_rand_seed@@Base+0x4c>
   1277c:	eorseq	sp, r7, r1, ror fp
   12780:			; <UNDEFINED> instruction: 0xffffe000
   12784:			; <UNDEFINED> instruction: 0xffe00000
   12788:	blcc	1bdc7d4 <__bss_end__@@Base+0x1bb6788>
   1278c:	blls	fec11748 <__bss_end__@@Base+0xfebeb6fc>
   12790:	strhlt	sl, [lr, #-81]!	; 0xffffffaf
   12794:			; <UNDEFINED> instruction: 0xffffc000
   12798:			; <UNDEFINED> instruction: 0xfffff800
   1279c:	ldrhteq	sp, [r6], -ip

000127a0 <__fill_random_buf@@Base>:
   127a0:	cmp	r1, #0
   127a4:	bxeq	lr
   127a8:	push	{lr}		; (str lr, [sp, #-4]!)
   127ac:	mov	lr, #0
   127b0:	ldr	ip, [pc, #76]	; 12804 <__fill_random_buf@@Base+0x64>
   127b4:	b	127d4 <__fill_random_buf@@Base+0x34>
   127b8:	mov	r3, #8
   127bc:	stm	r0, {r2, lr}
   127c0:	mul	r2, ip, r2
   127c4:	subs	r1, r1, r3
   127c8:	add	r0, r0, r3
   127cc:	lsr	r2, r2, #3
   127d0:	popeq	{pc}		; (ldreq pc, [sp], #4)
   127d4:	cmp	r1, #7
   127d8:	bhi	127b8 <__fill_random_buf@@Base+0x18>
   127dc:	cmp	r1, #3
   127e0:	strhi	r2, [r0]
   127e4:	movhi	r3, #4
   127e8:	bhi	127c0 <__fill_random_buf@@Base+0x20>
   127ec:	cmp	r1, #1
   127f0:	strhne	r2, [r0]
   127f4:	movne	r3, #2
   127f8:	bne	127c0 <__fill_random_buf@@Base+0x20>
   127fc:	strb	r2, [r0]
   12800:	pop	{pc}		; (ldr pc, [sp], #4)
   12804:	cdpls	0, 3, cr0, cr7, cr1, {0}

00012808 <fill_random_buf@@Base>:
   12808:	mov	r3, r0
   1280c:	ldr	r0, [r0]
   12810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12814:	cmp	r0, #0
   12818:	beq	12994 <fill_random_buf@@Base+0x18c>
   1281c:	ldr	lr, [r3, #20]
   12820:	ldr	fp, [r3, #16]
   12824:	ldr	ip, [r3, #8]
   12828:	lsl	sl, lr, #24
   1282c:	orr	sl, sl, fp, lsr #8
   12830:	eor	r8, sl, lr
   12834:	ldr	sl, [pc, #432]	; 129ec <fill_random_buf@@Base+0x1e4>
   12838:	ldr	r9, [r3, #12]
   1283c:	adds	r4, ip, ip
   12840:	lsl	lr, lr, #5
   12844:	and	sl, sl, fp, lsl #5
   12848:	orr	sl, sl, r8, lsr #18
   1284c:	orr	lr, lr, fp, lsr #27
   12850:	adc	r8, r9, r9
   12854:	ldr	r0, [r3, #28]
   12858:	str	lr, [r3, #20]
   1285c:	eor	lr, r8, r9
   12860:	ldr	r8, [pc, #392]	; 129f0 <fill_random_buf@@Base+0x1e8>
   12864:	ldr	r6, [r3, #24]
   12868:	lsl	r9, r9, #10
   1286c:	orr	r9, r9, ip, lsr #22
   12870:	and	ip, r8, ip, lsl #10
   12874:	orr	r8, ip, lr, lsr #21
   12878:	lsl	ip, r0, #3
   1287c:	ldr	r4, [r3, #36]	; 0x24
   12880:	orr	ip, ip, r6, lsr #29
   12884:	ldr	r5, [r3, #32]
   12888:	eor	ip, ip, r0
   1288c:	lsl	r0, r0, #29
   12890:	ldr	r7, [r3, #44]	; 0x2c
   12894:	orr	r0, r0, r6, lsr #3
   12898:	eor	r6, r6, r6, lsl #3
   1289c:	ldr	lr, [r3, #40]	; 0x28
   128a0:	str	r9, [r3, #12]
   128a4:	bic	r0, r0, #508	; 0x1fc
   128a8:	lsl	r9, r4, #5
   128ac:	bic	r0, r0, #3
   128b0:	orr	r9, r9, r5, lsr #27
   128b4:	lsr	r6, r6, #23
   128b8:	orr	r6, r6, ip, lsl #9
   128bc:	eor	r9, r9, r4
   128c0:	orr	ip, r0, ip, lsr #23
   128c4:	str	r8, [r3, #8]
   128c8:	eor	r0, r8, sl
   128cc:	lsl	r4, r4, #23
   128d0:	lsl	r8, r7, #3
   128d4:	orr	r4, r4, r5, lsr #9
   128d8:	orr	r8, r8, lr, lsr #29
   128dc:	eor	r5, r5, r5, lsl #5
   128e0:	eor	r8, r8, r7
   128e4:	lsl	r7, r7, #8
   128e8:	orr	r7, r7, lr, lsr #24
   128ec:	lsr	r5, r5, #24
   128f0:	lsl	lr, lr, #8
   128f4:	orr	r5, r5, r9, lsl #8
   128f8:	eor	r0, r0, r6
   128fc:	bic	r4, r4, #255	; 0xff
   12900:	and	lr, lr, #-2147483648	; 0x80000000
   12904:	cmp	r2, #0
   12908:	orr	lr, lr, r8, lsr #1
   1290c:	eor	r0, r0, r5
   12910:	orr	r4, r4, r9, lsr #24
   12914:	str	sl, [r3, #16]
   12918:	str	ip, [r3, #28]
   1291c:	str	r6, [r3, #24]
   12920:	str	r5, [r3, #32]
   12924:	str	r4, [r3, #36]	; 0x24
   12928:	str	lr, [r3, #40]	; 0x28
   1292c:	str	r7, [r3, #44]	; 0x2c
   12930:	eor	r0, r0, lr
   12934:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12938:	ldr	lr, [pc, #180]	; 129f4 <fill_random_buf@@Base+0x1ec>
   1293c:	mov	r3, r0
   12940:	mov	r4, #0
   12944:	b	12964 <fill_random_buf@@Base+0x15c>
   12948:	mov	ip, #8
   1294c:	stm	r1, {r3, r4}
   12950:	mul	r3, lr, r3
   12954:	subs	r2, r2, ip
   12958:	add	r1, r1, ip
   1295c:	lsr	r3, r3, #3
   12960:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12964:	cmp	r2, #7
   12968:	bhi	12948 <fill_random_buf@@Base+0x140>
   1296c:	cmp	r2, #3
   12970:	strhi	r3, [r1]
   12974:	movhi	ip, #4
   12978:	bhi	12950 <fill_random_buf@@Base+0x148>
   1297c:	cmp	r2, #1
   12980:	strhne	r3, [r1]
   12984:	movne	ip, #2
   12988:	bne	12950 <fill_random_buf@@Base+0x148>
   1298c:	strb	r3, [r1]
   12990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12994:	add	r0, r3, #8
   12998:	ldr	lr, [pc, #88]	; 129f8 <fill_random_buf@@Base+0x1f0>
   1299c:	ldm	r0, {r0, r5, r6}
   129a0:	cmp	r2, #0
   129a4:	ldr	ip, [pc, #80]	; 129fc <fill_random_buf@@Base+0x1f4>
   129a8:	and	lr, lr, r0, lsl #12
   129ac:	eor	r0, r0, r0, lsl #13
   129b0:	lsl	r4, r5, #4
   129b4:	eor	r5, r5, r5, lsl #2
   129b8:	orr	lr, lr, r0, lsr #19
   129bc:	bic	r4, r4, #127	; 0x7f
   129c0:	eor	r0, r6, r6, lsl #3
   129c4:	orr	r4, r4, r5, lsr #25
   129c8:	and	ip, ip, r6, lsl #17
   129cc:	orr	ip, ip, r0, lsr #11
   129d0:	eor	r0, lr, r4
   129d4:	str	r4, [r3, #12]
   129d8:	str	lr, [r3, #8]
   129dc:	str	ip, [r3, #16]
   129e0:	eor	r0, r0, ip
   129e4:	bne	12938 <fill_random_buf@@Base+0x130>
   129e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ec:			; <UNDEFINED> instruction: 0xffffc000
   129f0:			; <UNDEFINED> instruction: 0xfffff800
   129f4:	cdpls	0, 3, cr0, cr7, cr1, {0}
   129f8:			; <UNDEFINED> instruction: 0xffffe000
   129fc:			; <UNDEFINED> instruction: 0xffe00000

00012a00 <__fill_random_buf_percentage@@Base>:
   12a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a04:	sub	sp, sp, #12
   12a08:	mov	r6, r1
   12a0c:	ldr	r1, [sp, #52]	; 0x34
   12a10:	cmp	r2, #100	; 0x64
   12a14:	ldr	r5, [sp, #48]	; 0x30
   12a18:	str	r1, [sp, #4]
   12a1c:	ldr	sl, [sp, #56]	; 0x38
   12a20:	beq	12b44 <__fill_random_buf_percentage@@Base+0x144>
   12a24:	cmp	r5, r3
   12a28:	mov	fp, r0
   12a2c:	movcc	r0, r5
   12a30:	movcs	r0, r3
   12a34:	cmp	r5, #0
   12a38:	beq	12b0c <__fill_random_buf_percentage@@Base+0x10c>
   12a3c:	rsb	r1, r2, #100	; 0x64
   12a40:	mov	r3, #0
   12a44:	mov	r2, #100	; 0x64
   12a48:	umull	r0, r1, r1, r0
   12a4c:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   12a50:	ldr	r4, [pc, #296]	; 12b80 <__fill_random_buf_percentage@@Base+0x180>
   12a54:	mov	r8, #0
   12a58:	mov	r9, r0
   12a5c:	cmp	r9, r5
   12a60:	movcc	ip, r9
   12a64:	movcs	ip, r5
   12a68:	cmp	ip, #0
   12a6c:	sub	r7, r5, ip
   12a70:	beq	12b28 <__fill_random_buf_percentage@@Base+0x128>
   12a74:	mov	r0, r6
   12a78:	mov	r3, fp
   12a7c:	mov	r2, ip
   12a80:	b	12aa0 <__fill_random_buf_percentage@@Base+0xa0>
   12a84:	mov	r1, #8
   12a88:	stm	r0, {r3, r8}
   12a8c:	mul	r3, r4, r3
   12a90:	subs	r2, r2, r1
   12a94:	add	r0, r0, r1
   12a98:	lsr	r3, r3, #3
   12a9c:	beq	12acc <__fill_random_buf_percentage@@Base+0xcc>
   12aa0:	cmp	r2, #7
   12aa4:	bhi	12a84 <__fill_random_buf_percentage@@Base+0x84>
   12aa8:	cmp	r2, #3
   12aac:	strhi	r3, [r0]
   12ab0:	movhi	r1, #4
   12ab4:	bhi	12a8c <__fill_random_buf_percentage@@Base+0x8c>
   12ab8:	cmp	r2, #1
   12abc:	strhne	r3, [r0]
   12ac0:	movne	r1, #2
   12ac4:	bne	12a8c <__fill_random_buf_percentage@@Base+0x8c>
   12ac8:	strb	r3, [r0]
   12acc:	cmp	r7, #0
   12ad0:	beq	12b0c <__fill_random_buf_percentage@@Base+0x10c>
   12ad4:	cmp	ip, r7
   12ad8:	add	r6, r6, ip
   12adc:	bls	12b30 <__fill_random_buf_percentage@@Base+0x130>
   12ae0:	mov	r5, #0
   12ae4:	cmp	sl, #0
   12ae8:	beq	12b14 <__fill_random_buf_percentage@@Base+0x114>
   12aec:	mov	r3, r7
   12af0:	mov	r2, r6
   12af4:	mov	r1, sl
   12af8:	ldr	r0, [sp, #4]
   12afc:	bl	13218 <cpy_pattern@@Base>
   12b00:	cmp	r5, #0
   12b04:	add	r6, r6, r7
   12b08:	bne	12a5c <__fill_random_buf_percentage@@Base+0x5c>
   12b0c:	add	sp, sp, #12
   12b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b14:	mov	r2, r7
   12b18:	mov	r1, sl
   12b1c:	mov	r0, r6
   12b20:	bl	110b0 <memset@plt>
   12b24:	b	12b00 <__fill_random_buf_percentage@@Base+0x100>
   12b28:	cmp	r7, #0
   12b2c:	beq	12b0c <__fill_random_buf_percentage@@Base+0x10c>
   12b30:	sub	r5, r7, ip
   12b34:	cmp	r5, #4
   12b38:	movhi	r7, ip
   12b3c:	bhi	12ae4 <__fill_random_buf_percentage@@Base+0xe4>
   12b40:	b	12ae0 <__fill_random_buf_percentage@@Base+0xe0>
   12b44:	cmp	sl, #0
   12b48:	beq	12b68 <__fill_random_buf_percentage@@Base+0x168>
   12b4c:	mov	r0, r1
   12b50:	mov	r3, r5
   12b54:	mov	r2, r6
   12b58:	mov	r1, sl
   12b5c:	add	sp, sp, #12
   12b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b64:	b	13218 <cpy_pattern@@Base>
   12b68:	mov	r2, r5
   12b6c:	mov	r1, sl
   12b70:	mov	r0, r6
   12b74:	add	sp, sp, #12
   12b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b7c:	b	110b0 <memset@plt>
   12b80:	cdpls	0, 3, cr0, cr7, cr1, {0}

00012b84 <fill_random_buf_percentage@@Base>:
   12b84:	ldr	ip, [r0]
   12b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b8c:	cmp	ip, #0
   12b90:	sub	sp, sp, #20
   12b94:	beq	12cd8 <fill_random_buf_percentage@@Base+0x154>
   12b98:	ldr	sl, [r0, #20]
   12b9c:	ldr	ip, [r0, #16]
   12ba0:	ldr	r9, [r0, #8]
   12ba4:	lsl	fp, sl, #24
   12ba8:	orr	fp, fp, ip, lsr #8
   12bac:	eor	fp, fp, sl
   12bb0:	lsl	sl, sl, #5
   12bb4:	orr	sl, sl, ip, lsr #27
   12bb8:	ldr	r7, [r0, #12]
   12bbc:	str	sl, [r0, #20]
   12bc0:	ldr	sl, [pc, #356]	; 12d2c <fill_random_buf_percentage@@Base+0x1a8>
   12bc4:	adds	r4, r9, r9
   12bc8:	and	ip, sl, ip, lsl #5
   12bcc:	ldr	r4, [r0, #36]	; 0x24
   12bd0:	adc	sl, r7, r7
   12bd4:	ldr	r5, [r0, #32]
   12bd8:	eor	sl, sl, r7
   12bdc:	lsl	r7, r7, #10
   12be0:	orr	r7, r7, r9, lsr #22
   12be4:	ldr	lr, [r0, #28]
   12be8:	orr	ip, ip, fp, lsr #18
   12bec:	str	r7, [r0, #12]
   12bf0:	ldr	fp, [pc, #312]	; 12d30 <fill_random_buf_percentage@@Base+0x1ac>
   12bf4:	lsl	r7, r4, #5
   12bf8:	ldr	r6, [r0, #24]
   12bfc:	orr	r7, r7, r5, lsr #27
   12c00:	eor	r7, r7, r4
   12c04:	and	r9, fp, r9, lsl #10
   12c08:	lsl	r4, r4, #23
   12c0c:	ldr	r8, [r0, #44]	; 0x2c
   12c10:	orr	sl, r9, sl, lsr #21
   12c14:	orr	r4, r4, r5, lsr #9
   12c18:	lsl	r9, lr, #3
   12c1c:	eor	r5, r5, r5, lsl #5
   12c20:	ldr	fp, [r0, #40]	; 0x28
   12c24:	orr	r9, r9, r6, lsr #29
   12c28:	eor	r9, r9, lr
   12c2c:	bic	r4, r4, #255	; 0xff
   12c30:	lsl	lr, lr, #29
   12c34:	lsr	r5, r5, #24
   12c38:	orr	r5, r5, r7, lsl #8
   12c3c:	orr	r4, r4, r7, lsr #24
   12c40:	orr	lr, lr, r6, lsr #3
   12c44:	lsl	r7, r8, #3
   12c48:	eor	r6, r6, r6, lsl #3
   12c4c:	orr	r7, r7, fp, lsr #29
   12c50:	eor	r7, r7, r8
   12c54:	lsr	r6, r6, #23
   12c58:	lsl	r8, r8, #8
   12c5c:	orr	r6, r6, r9, lsl #9
   12c60:	orr	r8, r8, fp, lsr #24
   12c64:	str	ip, [r0, #16]
   12c68:	lsl	fp, fp, #8
   12c6c:	eor	ip, ip, sl
   12c70:	eor	ip, ip, r6
   12c74:	and	fp, fp, #-2147483648	; 0x80000000
   12c78:	orr	r7, fp, r7, lsr #1
   12c7c:	bic	lr, lr, #508	; 0x1fc
   12c80:	eor	ip, ip, r5
   12c84:	bic	lr, lr, #3
   12c88:	str	r4, [r0, #36]	; 0x24
   12c8c:	eor	r4, ip, r7
   12c90:	orr	lr, lr, r9, lsr #23
   12c94:	str	sl, [r0, #8]
   12c98:	str	lr, [r0, #28]
   12c9c:	str	r6, [r0, #24]
   12ca0:	str	r5, [r0, #32]
   12ca4:	str	r7, [r0, #40]	; 0x28
   12ca8:	str	r8, [r0, #44]	; 0x2c
   12cac:	ldr	r0, [sp, #64]	; 0x40
   12cb0:	str	r0, [sp, #8]
   12cb4:	ldr	r0, [sp, #60]	; 0x3c
   12cb8:	str	r0, [sp, #4]
   12cbc:	ldr	r0, [sp, #56]	; 0x38
   12cc0:	str	r0, [sp]
   12cc4:	mov	r0, r4
   12cc8:	bl	12a00 <__fill_random_buf_percentage@@Base>
   12ccc:	mov	r0, r4
   12cd0:	add	sp, sp, #20
   12cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd8:	ldr	lr, [r0, #12]
   12cdc:	ldr	ip, [r0, #8]
   12ce0:	ldr	r5, [pc, #76]	; 12d34 <fill_random_buf_percentage@@Base+0x1b0>
   12ce4:	ldr	r4, [r0, #16]
   12ce8:	lsl	r6, lr, #4
   12cec:	eor	lr, lr, lr, lsl #2
   12cf0:	and	r5, r5, ip, lsl #12
   12cf4:	bic	r6, r6, #127	; 0x7f
   12cf8:	eor	ip, ip, ip, lsl #13
   12cfc:	orr	r6, r6, lr, lsr #25
   12d00:	ldr	lr, [pc, #48]	; 12d38 <fill_random_buf_percentage@@Base+0x1b4>
   12d04:	orr	r5, r5, ip, lsr #19
   12d08:	eor	ip, r4, r4, lsl #3
   12d0c:	and	lr, lr, r4, lsl #17
   12d10:	orr	lr, lr, ip, lsr #11
   12d14:	eor	ip, r5, r6
   12d18:	eor	r4, ip, lr
   12d1c:	str	r6, [r0, #12]
   12d20:	str	r5, [r0, #8]
   12d24:	str	lr, [r0, #16]
   12d28:	b	12cac <fill_random_buf_percentage@@Base+0x128>
   12d2c:			; <UNDEFINED> instruction: 0xffffc000
   12d30:			; <UNDEFINED> instruction: 0xfffff800
   12d34:			; <UNDEFINED> instruction: 0xffffe000
   12d38:			; <UNDEFINED> instruction: 0xffe00000

00012d3c <parse_and_fill_pattern@@Base>:
   12d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d40:	sub	sp, sp, #52	; 0x34
   12d44:	mov	r8, r3
   12d48:	ldr	r3, [sp, #88]	; 0x58
   12d4c:	str	r2, [sp, #24]
   12d50:	ldr	r2, [pc, #1156]	; 131dc <parse_and_fill_pattern@@Base+0x4a0>
   12d54:	str	r3, [sp, #16]
   12d58:	ldr	r3, [sp, #96]	; 0x60
   12d5c:	ldr	r2, [r2]
   12d60:	str	r3, [sp, #8]
   12d64:	ldr	r3, [sp, #100]	; 0x64
   12d68:	cmp	r1, #0
   12d6c:	cmpne	r0, #0
   12d70:	str	r2, [sp, #44]	; 0x2c
   12d74:	str	r3, [sp, #28]
   12d78:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12d7c:	ldr	r3, [sp, #24]
   12d80:	cmp	r8, #0
   12d84:	cmpne	r3, #0
   12d88:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12d8c:	ldr	r3, [sp, #28]
   12d90:	ldr	r9, [sp, #24]
   12d94:	cmp	r3, #0
   12d98:	mov	r5, r0
   12d9c:	ldrne	r3, [r3]
   12da0:	mov	sl, r1
   12da4:	str	r3, [sp, #12]
   12da8:	mov	r3, #0
   12dac:	str	r3, [sp, #4]
   12db0:	ldrb	r1, [r5]
   12db4:	cmp	r1, #37	; 0x25
   12db8:	beq	12fc8 <parse_and_fill_pattern@@Base+0x28c>
   12dbc:	cmp	r1, #39	; 0x27
   12dc0:	beq	130ec <parse_and_fill_pattern@@Base+0x3b0>
   12dc4:	cmp	r1, #34	; 0x22
   12dc8:	beq	130a8 <parse_and_fill_pattern@@Base+0x36c>
   12dcc:	cmp	r8, #0
   12dd0:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12dd4:	mov	r3, #0
   12dd8:	add	r2, sp, #36	; 0x24
   12ddc:	ldr	r1, [pc, #1020]	; 131e0 <parse_and_fill_pattern@@Base+0x4a4>
   12de0:	mov	r0, r5
   12de4:	str	r3, [sp, #36]	; 0x24
   12de8:	bl	110ec <sscanf@plt>
   12dec:	ldr	r4, [sp, #36]	; 0x24
   12df0:	cmp	r4, #0
   12df4:	bne	12ef4 <parse_and_fill_pattern@@Base+0x1b8>
   12df8:	ldr	r1, [pc, #996]	; 131e4 <parse_and_fill_pattern@@Base+0x4a8>
   12dfc:	mov	r0, r5
   12e00:	bl	10fb4 <strcasestr@plt>
   12e04:	cmp	r0, #0
   12e08:	str	r0, [sp, #40]	; 0x28
   12e0c:	beq	13160 <parse_and_fill_pattern@@Base+0x424>
   12e10:	sub	r1, r0, r5
   12e14:	cmp	r1, #0
   12e18:	str	r1, [sp, #36]	; 0x24
   12e1c:	beq	13160 <parse_and_fill_pattern@@Base+0x424>
   12e20:	mov	r3, #10
   12e24:	add	r2, sp, #40	; 0x28
   12e28:	mov	r0, r5
   12e2c:	bl	13e9c <strntol@@Base>
   12e30:	ldr	r7, [sp, #40]	; 0x28
   12e34:	cmp	r5, r7
   12e38:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12e3c:	cmp	r0, #0
   12e40:	strbeq	r0, [r9]
   12e44:	moveq	r4, #1
   12e48:	beq	12e8c <parse_and_fill_pattern@@Base+0x150>
   12e4c:	sub	r3, r9, #1
   12e50:	strb	r0, [r3, #1]
   12e54:	add	r4, r3, #2
   12e58:	add	r3, r3, #1
   12e5c:	mvn	r2, r3
   12e60:	add	r2, r2, r8
   12e64:	cmn	r9, r2
   12e68:	movne	r2, #1
   12e6c:	moveq	r2, #0
   12e70:	lsrs	r0, r0, #8
   12e74:	moveq	r2, #0
   12e78:	cmp	r2, #0
   12e7c:	sub	r4, r4, r9
   12e80:	bne	12e50 <parse_and_fill_pattern@@Base+0x114>
   12e84:	cmp	r0, #0
   12e88:	bne	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12e8c:	cmp	r7, #0
   12e90:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12e94:	sub	r5, r7, r5
   12e98:	cmp	r5, sl
   12e9c:	bhi	131b0 <parse_and_fill_pattern@@Base+0x474>
   12ea0:	cmp	r4, #0
   12ea4:	sub	sl, sl, r5
   12ea8:	beq	1319c <parse_and_fill_pattern@@Base+0x460>
   12eac:	cmp	r8, r4
   12eb0:	bcc	13188 <parse_and_fill_pattern@@Base+0x44c>
   12eb4:	ldr	r3, [sp, #4]
   12eb8:	cmp	sl, #0
   12ebc:	add	r3, r3, r4
   12ec0:	sub	r8, r8, r4
   12ec4:	add	r9, r9, r4
   12ec8:	str	r3, [sp, #4]
   12ecc:	mov	r5, r7
   12ed0:	bne	12db0 <parse_and_fill_pattern@@Base+0x74>
   12ed4:	ldr	r2, [sp, #28]
   12ed8:	ldr	r0, [sp, #4]
   12edc:	cmp	r2, #0
   12ee0:	ldrne	r3, [r2]
   12ee4:	ldrne	r1, [sp, #12]
   12ee8:	subne	r3, r3, r1
   12eec:	strne	r3, [r2]
   12ef0:	b	12fac <parse_and_fill_pattern@@Base+0x270>
   12ef4:	cmp	r4, #2
   12ef8:	ble	131c8 <parse_and_fill_pattern@@Base+0x48c>
   12efc:	sub	r6, r4, #2
   12f00:	add	fp, r5, #2
   12f04:	str	r6, [sp, #36]	; 0x24
   12f08:	ldrb	r3, [fp, r6]
   12f0c:	add	r7, fp, r6
   12f10:	cmp	r3, #0
   12f14:	beq	12f54 <parse_and_fill_pattern@@Base+0x218>
   12f18:	sub	r4, r4, #3
   12f1c:	add	r3, fp, r4
   12f20:	mov	r0, r3
   12f24:	mov	r2, #2
   12f28:	ldr	r1, [pc, #692]	; 131e4 <parse_and_fill_pattern@@Base+0x4a8>
   12f2c:	str	r3, [sp, #20]
   12f30:	bl	110a4 <strncasecmp@plt>
   12f34:	cmp	r0, #0
   12f38:	bne	12f54 <parse_and_fill_pattern@@Base+0x218>
   12f3c:	ldr	r3, [sp, #20]
   12f40:	cmp	r4, #0
   12f44:	str	r4, [sp, #36]	; 0x24
   12f48:	mov	r7, r3
   12f4c:	mov	r6, r4
   12f50:	beq	12e8c <parse_and_fill_pattern@@Base+0x150>
   12f54:	mov	r4, #0
   12f58:	ldr	r3, [pc, #648]	; 131e8 <parse_and_fill_pattern@@Base+0x4ac>
   12f5c:	ldr	r2, [pc, #648]	; 131ec <parse_and_fill_pattern@@Base+0x4b0>
   12f60:	tst	r6, #1
   12f64:	moveq	r1, r2
   12f68:	mov	r0, fp
   12f6c:	movne	r1, r3
   12f70:	add	r2, r9, r4
   12f74:	bl	110ec <sscanf@plt>
   12f78:	ldr	r6, [sp, #36]	; 0x24
   12f7c:	add	r4, r4, #1
   12f80:	tst	r6, #1
   12f84:	addne	r6, r6, #1
   12f88:	sub	r6, r6, #2
   12f8c:	subne	fp, fp, #1
   12f90:	cmp	r6, #0
   12f94:	str	r6, [sp, #36]	; 0x24
   12f98:	add	fp, fp, #2
   12f9c:	beq	12e8c <parse_and_fill_pattern@@Base+0x150>
   12fa0:	cmp	r4, r8
   12fa4:	bne	12f58 <parse_and_fill_pattern@@Base+0x21c>
   12fa8:	mvn	r0, #21
   12fac:	ldr	r3, [pc, #552]	; 131dc <parse_and_fill_pattern@@Base+0x4a0>
   12fb0:	ldr	r2, [sp, #44]	; 0x2c
   12fb4:	ldr	r3, [r3]
   12fb8:	cmp	r2, r3
   12fbc:	bne	131c4 <parse_and_fill_pattern@@Base+0x488>
   12fc0:	add	sp, sp, #52	; 0x34
   12fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc8:	ldr	r6, [sp, #16]
   12fcc:	cmp	r6, #0
   12fd0:	cmpne	r8, #0
   12fd4:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   12fd8:	ldr	r3, [sp, #8]
   12fdc:	clz	r4, r3
   12fe0:	ldr	r3, [sp, #92]	; 0x5c
   12fe4:	lsr	r4, r4, #5
   12fe8:	cmp	r3, #0
   12fec:	ldr	r3, [sp, #12]
   12ff0:	moveq	r4, #1
   12ff4:	cmp	r3, #0
   12ff8:	moveq	r4, #1
   12ffc:	cmp	r4, #0
   13000:	bne	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   13004:	str	r8, [sp, #20]
   13008:	ldr	r7, [sp, #92]	; 0x5c
   1300c:	b	13020 <parse_and_fill_pattern@@Base+0x2e4>
   13010:	add	r4, r4, #1
   13014:	cmp	r7, r4
   13018:	add	r6, r6, #12
   1301c:	bls	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   13020:	ldr	fp, [r6]
   13024:	mov	r0, fp
   13028:	bl	11080 <strlen@plt>
   1302c:	mov	r1, fp
   13030:	mov	r2, r0
   13034:	mov	r8, r0
   13038:	mov	r0, r5
   1303c:	bl	11110 <strncmp@plt>
   13040:	cmp	r0, #0
   13044:	bne	13010 <parse_and_fill_pattern@@Base+0x2d4>
   13048:	ldr	r3, [sp, #24]
   1304c:	ldr	r2, [r6, #4]
   13050:	mov	r7, r8
   13054:	mov	r1, r0
   13058:	ldr	r8, [sp, #20]
   1305c:	ldr	r0, [sp, #8]
   13060:	sub	r3, r9, r3
   13064:	cmp	r8, r2
   13068:	stm	r0, {r3, r6}
   1306c:	bcc	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   13070:	mov	r0, r9
   13074:	bl	110b0 <memset@plt>
   13078:	ldr	r3, [sp, #8]
   1307c:	adds	r7, r5, r7
   13080:	ldr	r3, [r3, #4]
   13084:	ldr	r4, [r3, #4]
   13088:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   1308c:	ldr	r3, [sp, #12]
   13090:	sub	r3, r3, #1
   13094:	str	r3, [sp, #12]
   13098:	ldr	r3, [sp, #8]
   1309c:	add	r3, r3, #8
   130a0:	str	r3, [sp, #8]
   130a4:	b	12e94 <parse_and_fill_pattern@@Base+0x158>
   130a8:	cmp	r8, #0
   130ac:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   130b0:	add	r6, r5, #1
   130b4:	mov	r0, r6
   130b8:	bl	1108c <strchr@plt>
   130bc:	subs	r7, r0, #0
   130c0:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   130c4:	sub	r4, r7, r6
   130c8:	cmp	r8, r4
   130cc:	bcc	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   130d0:	mov	r1, r6
   130d4:	mov	r2, r4
   130d8:	mov	r0, r9
   130dc:	bl	10ffc <memcpy@plt>
   130e0:	adds	r7, r7, #1
   130e4:	bne	12e94 <parse_and_fill_pattern@@Base+0x158>
   130e8:	b	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   130ec:	cmp	r8, #0
   130f0:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   130f4:	add	r4, r5, #1
   130f8:	mov	r0, r4
   130fc:	bl	1108c <strchr@plt>
   13100:	subs	r7, r0, #0
   13104:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   13108:	sub	r1, r7, r4
   1310c:	mov	r0, r4
   13110:	bl	10fe4 <strndup@plt>
   13114:	subs	r6, r0, #0
   13118:	beq	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   1311c:	mov	r1, #0
   13120:	bl	11038 <open64@plt>
   13124:	subs	fp, r0, #0
   13128:	blt	13178 <parse_and_fill_pattern@@Base+0x43c>
   1312c:	mov	r2, r8
   13130:	mov	r1, r9
   13134:	bl	10fcc <read@plt>
   13138:	mov	r4, r0
   1313c:	cmn	r4, #1
   13140:	mov	r0, fp
   13144:	beq	13174 <parse_and_fill_pattern@@Base+0x438>
   13148:	bl	11128 <close@plt>
   1314c:	mov	r0, r6
   13150:	bl	10fd8 <free@plt>
   13154:	adds	r7, r7, #1
   13158:	bne	12e94 <parse_and_fill_pattern@@Base+0x158>
   1315c:	b	12fa8 <parse_and_fill_pattern@@Base+0x26c>
   13160:	mov	r2, #10
   13164:	add	r1, sp, #40	; 0x28
   13168:	mov	r0, r5
   1316c:	bl	10fc0 <strtol@plt>
   13170:	b	12e30 <parse_and_fill_pattern@@Base+0xf4>
   13174:	bl	11128 <close@plt>
   13178:	mov	r0, r6
   1317c:	bl	10fd8 <free@plt>
   13180:	mvn	r0, #21
   13184:	b	12fac <parse_and_fill_pattern@@Base+0x270>
   13188:	ldr	r3, [pc, #96]	; 131f0 <parse_and_fill_pattern@@Base+0x4b4>
   1318c:	ldr	r2, [pc, #96]	; 131f4 <parse_and_fill_pattern@@Base+0x4b8>
   13190:	ldr	r1, [pc, #96]	; 131f8 <parse_and_fill_pattern@@Base+0x4bc>
   13194:	ldr	r0, [pc, #96]	; 131fc <parse_and_fill_pattern@@Base+0x4c0>
   13198:	bl	11140 <__assert_fail@plt>
   1319c:	ldr	r3, [pc, #76]	; 131f0 <parse_and_fill_pattern@@Base+0x4b4>
   131a0:	ldr	r2, [pc, #88]	; 13200 <parse_and_fill_pattern@@Base+0x4c4>
   131a4:	ldr	r1, [pc, #76]	; 131f8 <parse_and_fill_pattern@@Base+0x4bc>
   131a8:	ldr	r0, [pc, #84]	; 13204 <parse_and_fill_pattern@@Base+0x4c8>
   131ac:	bl	11140 <__assert_fail@plt>
   131b0:	ldr	r3, [pc, #56]	; 131f0 <parse_and_fill_pattern@@Base+0x4b4>
   131b4:	ldr	r2, [pc, #76]	; 13208 <parse_and_fill_pattern@@Base+0x4cc>
   131b8:	ldr	r1, [pc, #56]	; 131f8 <parse_and_fill_pattern@@Base+0x4bc>
   131bc:	ldr	r0, [pc, #72]	; 1320c <parse_and_fill_pattern@@Base+0x4d0>
   131c0:	bl	11140 <__assert_fail@plt>
   131c4:	bl	11014 <__stack_chk_fail@plt>
   131c8:	ldr	r3, [pc, #64]	; 13210 <parse_and_fill_pattern@@Base+0x4d4>
   131cc:	mov	r2, #169	; 0xa9
   131d0:	ldr	r1, [pc, #32]	; 131f8 <parse_and_fill_pattern@@Base+0x4bc>
   131d4:	ldr	r0, [pc, #56]	; 13214 <parse_and_fill_pattern@@Base+0x4d8>
   131d8:	bl	11140 <__assert_fail@plt>
   131dc:	andeq	r5, r2, r8, asr #28
   131e0:	andeq	r5, r1, r8, ror #1
   131e4:	andeq	r5, r1, r0, lsl #2
   131e8:	ldrdeq	r5, [r1], -r8
   131ec:	andeq	r5, r1, r0, ror #1
   131f0:	andeq	r5, r1, r0, asr #1
   131f4:	andeq	r0, r0, lr, ror #2
   131f8:	andeq	r5, r1, r4, lsl #2
   131fc:	andeq	r5, r1, r8, lsr r1
   13200:	andeq	r0, r0, sp, ror #2
   13204:	andeq	r5, r1, r0, lsr r1
   13208:	andeq	r0, r0, r9, ror #2
   1320c:	andeq	r5, r1, ip, lsl r1
   13210:	strheq	r5, [r1], -r0
   13214:	andeq	r5, r1, r4, lsl r1

00013218 <cpy_pattern@@Base>:
   13218:	cmp	r1, #0
   1321c:	cmpne	r0, #0
   13220:	beq	132a8 <cpy_pattern@@Base+0x90>
   13224:	cmp	r3, #0
   13228:	cmpne	r2, #0
   1322c:	push	{r4, r5, r6, lr}
   13230:	mov	r6, r2
   13234:	mov	r4, r3
   13238:	beq	132a0 <cpy_pattern@@Base+0x88>
   1323c:	cmp	r1, r3
   13240:	mov	r5, r1
   13244:	movcc	r2, r5
   13248:	mov	r1, r0
   1324c:	movcs	r2, r3
   13250:	mov	r0, r6
   13254:	bl	10ffc <memcpy@plt>
   13258:	cmp	r5, r4
   1325c:	bcs	13298 <cpy_pattern@@Base+0x80>
   13260:	sub	r4, r4, r5
   13264:	cmp	r5, r4
   13268:	movcc	r2, r5
   1326c:	movcs	r2, r4
   13270:	sub	r4, r4, r2
   13274:	add	r0, r6, r5
   13278:	mov	r1, r6
   1327c:	lsl	r5, r5, #1
   13280:	bl	10ffc <memcpy@plt>
   13284:	cmp	r4, r5
   13288:	movcc	r2, r4
   1328c:	movcs	r2, r5
   13290:	cmp	r4, #0
   13294:	bne	13270 <cpy_pattern@@Base+0x58>
   13298:	mov	r0, #0
   1329c:	pop	{r4, r5, r6, pc}
   132a0:	mvn	r0, #21
   132a4:	pop	{r4, r5, r6, pc}
   132a8:	mvn	r0, #21
   132ac:	bx	lr

000132b0 <cmp_pattern@@Base>:
   132b0:	push	{r4, r5, r6, r7, r8, lr}
   132b4:	mov	r4, r1
   132b8:	ldr	r5, [sp, #24]
   132bc:	mov	r8, r0
   132c0:	cmp	r5, r1
   132c4:	mov	r7, r2
   132c8:	mov	r6, r3
   132cc:	bls	132e8 <cmp_pattern@@Base+0x38>
   132d0:	sub	r2, r5, r1
   132d4:	mov	r0, r3
   132d8:	add	r1, r3, r1
   132dc:	bl	11008 <memcmp@plt>
   132e0:	cmp	r0, #0
   132e4:	bne	13358 <cmp_pattern@@Base+0xa8>
   132e8:	cmp	r7, #0
   132ec:	beq	13348 <cmp_pattern@@Base+0x98>
   132f0:	sub	r4, r4, r7
   132f4:	cmp	r4, r5
   132f8:	movcs	r4, r5
   132fc:	mov	r2, r4
   13300:	add	r1, r8, r7
   13304:	mov	r0, r6
   13308:	bl	11008 <memcmp@plt>
   1330c:	cmp	r0, #0
   13310:	bne	13358 <cmp_pattern@@Base+0xa8>
   13314:	subs	r5, r5, r4
   13318:	popeq	{r4, r5, r6, r7, r8, pc}
   1331c:	add	r6, r6, r4
   13320:	mov	r4, r7
   13324:	cmp	r4, r5
   13328:	movcc	r2, r4
   1332c:	movcs	r2, r5
   13330:	mov	r1, r8
   13334:	mov	r0, r6
   13338:	bl	11008 <memcmp@plt>
   1333c:	cmp	r0, #0
   13340:	mvnne	r0, #83	; 0x53
   13344:	pop	{r4, r5, r6, r7, r8, pc}
   13348:	cmp	r5, #0
   1334c:	bne	13324 <cmp_pattern@@Base+0x74>
   13350:	mov	r0, r5
   13354:	pop	{r4, r5, r6, r7, r8, pc}
   13358:	mvn	r0, #83	; 0x53
   1335c:	pop	{r4, r5, r6, r7, r8, pc}

00013360 <paste_format_inplace@@Base>:
   13360:	cmp	r1, #0
   13364:	push	{r4, r5, r6, r7, r8, lr}
   13368:	clz	r4, r2
   1336c:	lsr	r4, r4, #5
   13370:	moveq	r4, #1
   13374:	cmp	r0, #0
   13378:	moveq	r4, #1
   1337c:	cmp	r4, #0
   13380:	bne	133f4 <paste_format_inplace@@Base+0x94>
   13384:	cmp	r3, #0
   13388:	beq	133ec <paste_format_inplace@@Base+0x8c>
   1338c:	ldr	ip, [r2]
   13390:	cmp	r1, ip
   13394:	bls	133ec <paste_format_inplace@@Base+0x8c>
   13398:	mov	r7, r0
   1339c:	mov	r8, r1
   133a0:	mov	r6, r3
   133a4:	mov	r5, r2
   133a8:	b	133b8 <paste_format_inplace@@Base+0x58>
   133ac:	ldr	ip, [r5, #8]!
   133b0:	cmp	r8, ip
   133b4:	bls	133ec <paste_format_inplace@@Base+0x8c>
   133b8:	ldr	lr, [r5, #4]
   133bc:	sub	r1, r8, ip
   133c0:	add	r0, r7, ip
   133c4:	ldrd	r2, [lr, #4]
   133c8:	add	r4, r4, #1
   133cc:	cmp	r1, r2
   133d0:	movcs	r1, r2
   133d4:	ldr	r2, [sp, #24]
   133d8:	blx	r3
   133dc:	cmp	r0, #0
   133e0:	popne	{r4, r5, r6, r7, r8, pc}
   133e4:	cmp	r6, r4
   133e8:	bne	133ac <paste_format_inplace@@Base+0x4c>
   133ec:	mov	r0, #0
   133f0:	pop	{r4, r5, r6, r7, r8, pc}
   133f4:	mvn	r0, #21
   133f8:	pop	{r4, r5, r6, r7, r8, pc}

000133fc <paste_format@@Base>:
   133fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13400:	cmp	r1, #0
   13404:	cmpne	r0, #0
   13408:	ldr	r7, [sp, #40]	; 0x28
   1340c:	ldr	r4, [sp, #44]	; 0x2c
   13410:	beq	13500 <paste_format@@Base+0x104>
   13414:	cmp	r7, #0
   13418:	mov	r8, r3
   1341c:	clz	r3, r4
   13420:	lsr	r3, r3, #5
   13424:	movne	r5, r3
   13428:	moveq	r5, #1
   1342c:	cmp	r5, #0
   13430:	bne	13500 <paste_format@@Base+0x104>
   13434:	cmp	r1, r4
   13438:	movcc	sl, r1
   1343c:	movcs	sl, r4
   13440:	mov	r9, r2
   13444:	mov	r6, r1
   13448:	mov	r2, sl
   1344c:	mov	r1, r0
   13450:	mov	r0, r7
   13454:	bl	10ffc <memcpy@plt>
   13458:	cmp	r9, #0
   1345c:	beq	13500 <paste_format@@Base+0x104>
   13460:	cmp	r8, #0
   13464:	beq	134b8 <paste_format@@Base+0xbc>
   13468:	ldr	r0, [r9]
   1346c:	cmp	sl, r0
   13470:	bhi	13484 <paste_format@@Base+0x88>
   13474:	b	134b8 <paste_format@@Base+0xbc>
   13478:	ldr	r0, [r9, #8]!
   1347c:	cmp	sl, r0
   13480:	bls	134b8 <paste_format@@Base+0xbc>
   13484:	ldr	r2, [r9, #4]
   13488:	sub	r1, sl, r0
   1348c:	add	r0, r7, r0
   13490:	ldmib	r2, {r3, fp}
   13494:	ldr	r2, [sp, #48]	; 0x30
   13498:	add	r5, r5, #1
   1349c:	cmp	r1, r3
   134a0:	movcs	r1, r3
   134a4:	blx	fp
   134a8:	cmp	r0, #0
   134ac:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134b0:	cmp	r5, r8
   134b4:	bne	13478 <paste_format@@Base+0x7c>
   134b8:	cmp	r6, r4
   134bc:	bcs	134f8 <paste_format@@Base+0xfc>
   134c0:	sub	r4, r4, r6
   134c4:	cmp	r6, r4
   134c8:	movcc	r2, r6
   134cc:	movcs	r2, r4
   134d0:	sub	r4, r4, r2
   134d4:	add	r0, r7, r6
   134d8:	mov	r1, r7
   134dc:	lsl	r6, r6, #1
   134e0:	bl	10ffc <memcpy@plt>
   134e4:	cmp	r4, r6
   134e8:	movcc	r2, r4
   134ec:	movcs	r2, r6
   134f0:	cmp	r4, #0
   134f4:	bne	134d0 <paste_format@@Base+0xd4>
   134f8:	mov	r0, #0
   134fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13500:	mvn	r0, #21
   13504:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013508 <zipf_init@@Base>:
   13508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1350c:	mov	r1, #0
   13510:	vpush	{d8-d10}
   13514:	mov	r4, r0
   13518:	mov	r6, r2
   1351c:	add	r0, r0, #8
   13520:	mov	r2, #96	; 0x60
   13524:	mov	r7, r3
   13528:	vmov.f64	d8, d0
   1352c:	bl	110b0 <memset@plt>
   13530:	mov	r0, r4
   13534:	ldr	r1, [sp, #56]	; 0x38
   13538:	strd	r6, [r0], #40	; 0x28
   1353c:	mov	r2, #0
   13540:	bl	120fc <init_rand_seed@@Base>
   13544:	ldr	r3, [r4, #40]	; 0x28
   13548:	cmp	r3, #0
   1354c:	beq	13700 <zipf_init@@Base+0x1f8>
   13550:	ldr	r1, [r4, #60]	; 0x3c
   13554:	ldr	r6, [r4, #56]	; 0x38
   13558:	ldr	r0, [r4, #48]	; 0x30
   1355c:	lsl	ip, r1, #24
   13560:	ldr	r8, [r4, #52]	; 0x34
   13564:	adds	r2, r0, r0
   13568:	orr	ip, ip, r6, lsr #8
   1356c:	ldr	r2, [pc, #500]	; 13768 <zipf_init@@Base+0x260>
   13570:	eor	r5, ip, r1
   13574:	lsl	r1, r1, #5
   13578:	orr	r1, r1, r6, lsr #27
   1357c:	and	r2, r2, r6, lsl #5
   13580:	adc	r6, r8, r8
   13584:	ldr	r3, [r4, #68]	; 0x44
   13588:	eor	r9, r6, r8
   1358c:	ldr	r6, [pc, #472]	; 1376c <zipf_init@@Base+0x264>
   13590:	ldr	lr, [r4, #64]	; 0x40
   13594:	ldr	ip, [r4, #76]	; 0x4c
   13598:	lsl	r8, r8, #10
   1359c:	ldr	r7, [r4, #72]	; 0x48
   135a0:	orr	r8, r8, r0, lsr #22
   135a4:	and	r0, r6, r0, lsl #10
   135a8:	orr	r6, r0, r9, lsr #21
   135ac:	orr	r2, r2, r5, lsr #18
   135b0:	eor	r9, r8, r1
   135b4:	ldr	r5, [r4, #84]	; 0x54
   135b8:	str	r1, [r4, #60]	; 0x3c
   135bc:	lsl	r1, r3, #3
   135c0:	ldr	r0, [r4, #80]	; 0x50
   135c4:	orr	r1, r1, lr, lsr #29
   135c8:	str	r8, [r4, #52]	; 0x34
   135cc:	lsl	r8, ip, #5
   135d0:	eor	r1, r1, r3
   135d4:	orr	r8, r8, r7, lsr #27
   135d8:	lsl	r3, r3, #29
   135dc:	eor	r8, r8, ip
   135e0:	orr	r3, r3, lr, lsr #3
   135e4:	str	r2, [r4, #56]	; 0x38
   135e8:	eor	lr, lr, lr, lsl #3
   135ec:	eor	r2, r2, r6
   135f0:	lsl	ip, ip, #23
   135f4:	str	r6, [r4, #48]	; 0x30
   135f8:	lsl	r6, r5, #3
   135fc:	orr	ip, ip, r7, lsr #9
   13600:	orr	r6, r6, r0, lsr #29
   13604:	bic	r3, r3, #508	; 0x1fc
   13608:	eor	r7, r7, r7, lsl #5
   1360c:	bic	r3, r3, #3
   13610:	eor	r6, r6, r5
   13614:	lsr	lr, lr, #23
   13618:	lsl	r5, r5, #8
   1361c:	orr	lr, lr, r1, lsl #9
   13620:	orr	r5, r5, r0, lsr #24
   13624:	orr	r1, r3, r1, lsr #23
   13628:	bic	ip, ip, #255	; 0xff
   1362c:	lsr	r7, r7, #24
   13630:	lsl	r0, r0, #8
   13634:	orr	r7, r7, r8, lsl #8
   13638:	orr	ip, ip, r8, lsr #24
   1363c:	eor	r3, r9, r1
   13640:	eor	r2, r2, lr
   13644:	and	r0, r0, #-2147483648	; 0x80000000
   13648:	orr	r0, r0, r6, lsr #1
   1364c:	eor	r2, r2, r7
   13650:	eor	r3, r3, ip
   13654:	eor	r2, r2, r0
   13658:	eor	r3, r3, r5
   1365c:	str	r1, [r4, #68]	; 0x44
   13660:	str	lr, [r4, #64]	; 0x40
   13664:	str	r7, [r4, #72]	; 0x48
   13668:	str	ip, [r4, #76]	; 0x4c
   1366c:	str	r0, [r4, #80]	; 0x50
   13670:	str	r5, [r4, #84]	; 0x54
   13674:	strd	r2, [r4, #88]	; 0x58
   13678:	vstr	d8, [r4, #8]
   1367c:	vneg.f64	d0, d8
   13680:	bl	11104 <__exp2_finite@plt>
   13684:	vldr	d7, [pc, #204]	; 13758 <zipf_init@@Base+0x250>
   13688:	ldrd	r2, [r4]
   1368c:	add	r1, pc, #204	; 0xcc
   13690:	ldrd	r0, [r1]
   13694:	mov	r7, r3
   13698:	cmp	r3, r1
   1369c:	cmpeq	r2, r0
   136a0:	mov	r6, r2
   136a4:	movhi	r7, r1
   136a8:	movhi	r6, r0
   136ac:	orrs	r3, r2, r3
   136b0:	vadd.f64	d0, d0, d7
   136b4:	vstr	d0, [r4, #16]
   136b8:	beq	136f8 <zipf_init@@Base+0x1f0>
   136bc:	vldr	d9, [r4, #24]
   136c0:	vldr	d10, [pc, #144]	; 13758 <zipf_init@@Base+0x250>
   136c4:	mov	r5, #0
   136c8:	add	r5, r5, #1
   136cc:	vmov.f64	d1, d8
   136d0:	vmov	s15, r5
   136d4:	vcvt.f64.u32	d0, s15
   136d8:	vdiv.f64	d0, d10, d0
   136dc:	bl	110e0 <__pow_finite@plt>
   136e0:	mov	r3, #0
   136e4:	cmp	r7, r3
   136e8:	cmpeq	r6, r5
   136ec:	vadd.f64	d9, d9, d0
   136f0:	bhi	136c8 <zipf_init@@Base+0x1c0>
   136f4:	vstr	d9, [r4, #24]
   136f8:	vpop	{d8-d10}
   136fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13700:	ldr	r2, [r4, #48]	; 0x30
   13704:	ldr	lr, [r4, #52]	; 0x34
   13708:	ldr	r0, [pc, #96]	; 13770 <zipf_init@@Base+0x268>
   1370c:	ldr	r5, [r4, #56]	; 0x38
   13710:	and	r0, r0, r2, lsl #12
   13714:	eor	r2, r2, r2, lsl #13
   13718:	lsl	ip, lr, #4
   1371c:	ldr	r1, [pc, #80]	; 13774 <zipf_init@@Base+0x26c>
   13720:	eor	lr, lr, lr, lsl #2
   13724:	orr	r0, r0, r2, lsr #19
   13728:	bic	ip, ip, #127	; 0x7f
   1372c:	eor	r2, r5, r5, lsl #3
   13730:	orr	ip, ip, lr, lsr #25
   13734:	and	r1, r1, r5, lsl #17
   13738:	orr	r1, r1, r2, lsr #11
   1373c:	eor	r2, r0, ip
   13740:	eor	r2, r2, r1
   13744:	str	ip, [r4, #52]	; 0x34
   13748:	str	r0, [r4, #48]	; 0x30
   1374c:	str	r1, [r4, #56]	; 0x38
   13750:	b	13674 <zipf_init@@Base+0x16c>
   13754:	nop			; (mov r0, r0)
   13758:	andeq	r0, r0, r0
   1375c:	svccc	0x00f00000	; IMB
   13760:	addseq	r9, r8, r0, lsl #13
   13764:	andeq	r0, r0, r0
   13768:			; <UNDEFINED> instruction: 0xffffc000
   1376c:			; <UNDEFINED> instruction: 0xfffff800
   13770:			; <UNDEFINED> instruction: 0xffffe000
   13774:			; <UNDEFINED> instruction: 0xffe00000

00013778 <zipf_next@@Base>:
   13778:	ldr	r1, [r0, #40]	; 0x28
   1377c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13780:	cmp	r1, #0
   13784:	vpush	{d8-d13}
   13788:	mov	r4, r0
   1378c:	ldrd	r6, [r0]
   13790:	vldr	d9, [r0, #8]
   13794:	vldr	d12, [r0, #16]
   13798:	vldr	d11, [r0, #24]
   1379c:	beq	139c4 <zipf_next@@Base+0x24c>
   137a0:	ldr	r9, [r0, #48]	; 0x30
   137a4:	ldr	sl, [r0, #52]	; 0x34
   137a8:	adds	r2, r9, r9
   137ac:	ldr	r1, [r0, #60]	; 0x3c
   137b0:	ldr	ip, [r0, #68]	; 0x44
   137b4:	adc	r8, sl, sl
   137b8:	ldr	r5, [r0, #56]	; 0x38
   137bc:	ldr	lr, [r4, #64]	; 0x40
   137c0:	eor	fp, r8, sl
   137c4:	ldr	r8, [pc, #612]	; 13a30 <zipf_next@@Base+0x2b8>
   137c8:	lsl	sl, sl, #10
   137cc:	orr	sl, sl, r9, lsr #22
   137d0:	lsl	r3, r1, #24
   137d4:	and	r8, r8, r9, lsl #10
   137d8:	lsl	r9, ip, #3
   137dc:	orr	r3, r3, r5, lsr #8
   137e0:	orr	r9, r9, lr, lsr #29
   137e4:	ldr	r0, [pc, #584]	; 13a34 <zipf_next@@Base+0x2bc>
   137e8:	eor	r2, r3, r1
   137ec:	eor	r9, r9, ip
   137f0:	lsl	ip, ip, #29
   137f4:	ldr	r3, [r4, #76]	; 0x4c
   137f8:	and	r0, r0, r5, lsl #5
   137fc:	orr	ip, ip, lr, lsr #3
   13800:	eor	lr, lr, lr, lsl #3
   13804:	orr	r0, r0, r2, lsr #18
   13808:	lsl	r1, r1, #5
   1380c:	ldr	r2, [r4, #72]	; 0x48
   13810:	bic	ip, ip, #508	; 0x1fc
   13814:	orr	r1, r1, r5, lsr #27
   13818:	lsr	lr, lr, #23
   1381c:	ldr	r5, [r4, #84]	; 0x54
   13820:	bic	ip, ip, #3
   13824:	orr	lr, lr, r9, lsl #9
   13828:	orr	ip, ip, r9, lsr #23
   1382c:	str	r1, [r4, #60]	; 0x3c
   13830:	ldr	r9, [r4, #80]	; 0x50
   13834:	eor	r1, r1, sl
   13838:	str	sl, [r4, #52]	; 0x34
   1383c:	lsl	sl, r3, #5
   13840:	orr	r8, r8, fp, lsr #21
   13844:	orr	sl, sl, r2, lsr #27
   13848:	eor	sl, sl, r3
   1384c:	str	r0, [r4, #56]	; 0x38
   13850:	lsl	r3, r3, #23
   13854:	eor	r0, r0, r8
   13858:	str	r8, [r4, #48]	; 0x30
   1385c:	lsl	r8, r5, #3
   13860:	orr	r3, r3, r2, lsr #9
   13864:	orr	r8, r8, r9, lsr #29
   13868:	eor	r2, r2, r2, lsl #5
   1386c:	eor	r8, r8, r5
   13870:	lsl	r5, r5, #8
   13874:	orr	r5, r5, r9, lsr #24
   13878:	bic	r3, r3, #255	; 0xff
   1387c:	lsr	r2, r2, #24
   13880:	lsl	r9, r9, #8
   13884:	orr	r2, r2, sl, lsl #8
   13888:	orr	r3, r3, sl, lsr #24
   1388c:	eor	r1, r1, ip
   13890:	eor	r0, r0, lr
   13894:	and	r9, r9, #-2147483648	; 0x80000000
   13898:	orr	r9, r9, r8, lsr #1
   1389c:	eor	r0, r0, r2
   138a0:	eor	r1, r1, r3
   138a4:	eor	r0, r0, r9
   138a8:	eor	r1, r1, r5
   138ac:	str	ip, [r4, #68]	; 0x44
   138b0:	str	lr, [r4, #64]	; 0x40
   138b4:	strd	r2, [r4, #72]	; 0x48
   138b8:	str	r9, [r4, #80]	; 0x50
   138bc:	str	r5, [r4, #84]	; 0x54
   138c0:	bl	14ac4 <gauss_disable_hash@@Base+0x574>
   138c4:	vldr	d8, [pc, #332]	; 13a18 <zipf_next@@Base+0x2a0>
   138c8:	vldr	d13, [pc, #336]	; 13a20 <zipf_next@@Base+0x2a8>
   138cc:	vmov	d7, r0, r1
   138d0:	vmul.f64	d8, d7, d8
   138d4:	vmul.f64	d10, d11, d8
   138d8:	vcmpe.f64	d10, d13
   138dc:	vmrs	APSR_nzcv, fpscr
   138e0:	movmi	r8, #0
   138e4:	movmi	r9, #0
   138e8:	bmi	1390c <zipf_next@@Base+0x194>
   138ec:	vneg.f64	d0, d9
   138f0:	bl	11104 <__exp2_finite@plt>
   138f4:	vadd.f64	d0, d0, d13
   138f8:	vcmpe.f64	d0, d10
   138fc:	vmrs	APSR_nzcv, fpscr
   13900:	movgt	r8, #1
   13904:	movgt	r9, #0
   13908:	ble	13958 <zipf_next@@Base+0x1e0>
   1390c:	ldrb	r3, [r4, #96]	; 0x60
   13910:	cmp	r3, #0
   13914:	bne	13930 <zipf_next@@Base+0x1b8>
   13918:	ldr	r3, [pc, #280]	; 13a38 <zipf_next@@Base+0x2c0>
   1391c:	ldr	r2, [pc, #280]	; 13a3c <zipf_next@@Base+0x2c4>
   13920:	mul	r3, r3, r8
   13924:	mla	r3, r2, r9, r3
   13928:	umull	r8, r9, r8, r2
   1392c:	add	r9, r3, r9
   13930:	ldrd	r0, [r4, #88]	; 0x58
   13934:	mov	r2, r6
   13938:	mov	r3, r7
   1393c:	adds	r0, r8, r0
   13940:	adc	r1, r9, r1
   13944:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   13948:	vpop	{d8-d13}
   1394c:	mov	r0, r2
   13950:	mov	r1, r3
   13954:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13958:	mov	r0, r6
   1395c:	mov	r1, r7
   13960:	bl	14ac4 <gauss_disable_hash@@Base+0x574>
   13964:	vsub.f64	d9, d13, d9
   13968:	vldr	d0, [pc, #184]	; 13a28 <zipf_next@@Base+0x2b0>
   1396c:	vsub.f64	d8, d8, d13
   13970:	vmov.f64	d1, d9
   13974:	vmov	d10, r0, r1
   13978:	vdiv.f64	d0, d0, d10
   1397c:	bl	110e0 <__pow_finite@plt>
   13980:	vdiv.f64	d7, d12, d11
   13984:	vsub.f64	d0, d13, d0
   13988:	vdiv.f64	d1, d13, d9
   1398c:	vsub.f64	d7, d13, d7
   13990:	vdiv.f64	d6, d0, d7
   13994:	vmov.f64	d0, d13
   13998:	vmla.f64	d0, d6, d8
   1399c:	bl	110e0 <__pow_finite@plt>
   139a0:	vmul.f64	d7, d10, d0
   139a4:	vmov	r0, r1, d7
   139a8:	bl	14ed8 <gauss_disable_hash@@Base+0x988>
   139ac:	ldrb	r3, [r4, #96]	; 0x60
   139b0:	cmp	r3, #0
   139b4:	mov	r8, r0
   139b8:	mov	r9, r1
   139bc:	bne	13930 <zipf_next@@Base+0x1b8>
   139c0:	b	13918 <zipf_next@@Base+0x1a0>
   139c4:	add	r0, r0, #48	; 0x30
   139c8:	ldr	r2, [pc, #112]	; 13a40 <zipf_next@@Base+0x2c8>
   139cc:	ldm	r0, {r0, ip, lr}
   139d0:	lsl	r3, ip, #4
   139d4:	eor	ip, ip, ip, lsl #2
   139d8:	bic	r3, r3, #127	; 0x7f
   139dc:	and	r2, r2, r0, lsl #12
   139e0:	eor	r0, r0, r0, lsl #13
   139e4:	orr	ip, r3, ip, lsr #25
   139e8:	ldr	r3, [pc, #84]	; 13a44 <zipf_next@@Base+0x2cc>
   139ec:	orr	r2, r2, r0, lsr #19
   139f0:	eor	r0, lr, lr, lsl #3
   139f4:	and	r3, r3, lr, lsl #17
   139f8:	orr	r3, r3, r0, lsr #11
   139fc:	eor	r0, r2, ip
   13a00:	eor	r0, r0, r3
   13a04:	str	ip, [r4, #52]	; 0x34
   13a08:	str	r2, [r4, #48]	; 0x30
   13a0c:	str	r3, [r4, #56]	; 0x38
   13a10:	b	138c0 <zipf_next@@Base+0x148>
   13a14:	nop			; (mov r0, r0)
   13a18:	andseq	r0, r0, r0
   13a1c:	ldclcc	0, cr0, [r0]
   13a20:	andeq	r0, r0, r0
   13a24:	svccc	0x00f00000	; IMB
   13a28:	andeq	r0, r0, r0
   13a2c:	andmi	r0, r0, r0
   13a30:			; <UNDEFINED> instruction: 0xfffff800
   13a34:			; <UNDEFINED> instruction: 0xffffc000
   13a38:	bicvs	r8, r8, r6, asr #12
   13a3c:	adcshi	r8, r5, fp, ror #7
   13a40:			; <UNDEFINED> instruction: 0xffffe000
   13a44:			; <UNDEFINED> instruction: 0xffe00000

00013a48 <pareto_init@@Base>:
   13a48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a4c:	mov	r1, #0
   13a50:	vpush	{d8-d9}
   13a54:	mov	r4, r0
   13a58:	mov	r6, r2
   13a5c:	add	r0, r0, #8
   13a60:	mov	r2, #96	; 0x60
   13a64:	mov	r7, r3
   13a68:	vmov.f64	d8, d0
   13a6c:	bl	110b0 <memset@plt>
   13a70:	mov	r0, r4
   13a74:	ldr	r1, [sp, #48]	; 0x30
   13a78:	strd	r6, [r0], #40	; 0x28
   13a7c:	mov	r2, #0
   13a80:	bl	120fc <init_rand_seed@@Base>
   13a84:	ldr	r3, [r4, #40]	; 0x28
   13a88:	cmp	r3, #0
   13a8c:	beq	13be0 <pareto_init@@Base+0x198>
   13a90:	ldr	r1, [r4, #60]	; 0x3c
   13a94:	ldr	r6, [r4, #56]	; 0x38
   13a98:	ldr	r0, [r4, #48]	; 0x30
   13a9c:	lsl	ip, r1, #24
   13aa0:	ldr	r8, [r4, #52]	; 0x34
   13aa4:	adds	r2, r0, r0
   13aa8:	orr	ip, ip, r6, lsr #8
   13aac:	ldr	r2, [pc, #396]	; 13c40 <pareto_init@@Base+0x1f8>
   13ab0:	eor	r5, ip, r1
   13ab4:	lsl	r1, r1, #5
   13ab8:	orr	r1, r1, r6, lsr #27
   13abc:	and	r2, r2, r6, lsl #5
   13ac0:	adc	r6, r8, r8
   13ac4:	ldr	r3, [r4, #68]	; 0x44
   13ac8:	eor	r9, r6, r8
   13acc:	ldr	r6, [pc, #368]	; 13c44 <pareto_init@@Base+0x1fc>
   13ad0:	ldr	lr, [r4, #64]	; 0x40
   13ad4:	ldr	ip, [r4, #76]	; 0x4c
   13ad8:	lsl	r8, r8, #10
   13adc:	ldr	r7, [r4, #72]	; 0x48
   13ae0:	orr	r8, r8, r0, lsr #22
   13ae4:	and	r0, r6, r0, lsl #10
   13ae8:	orr	r6, r0, r9, lsr #21
   13aec:	orr	r2, r2, r5, lsr #18
   13af0:	eor	r9, r8, r1
   13af4:	ldr	r5, [r4, #84]	; 0x54
   13af8:	str	r1, [r4, #60]	; 0x3c
   13afc:	lsl	r1, r3, #3
   13b00:	ldr	r0, [r4, #80]	; 0x50
   13b04:	orr	r1, r1, lr, lsr #29
   13b08:	str	r8, [r4, #52]	; 0x34
   13b0c:	lsl	r8, ip, #5
   13b10:	eor	r1, r1, r3
   13b14:	orr	r8, r8, r7, lsr #27
   13b18:	lsl	r3, r3, #29
   13b1c:	eor	r8, r8, ip
   13b20:	orr	r3, r3, lr, lsr #3
   13b24:	str	r2, [r4, #56]	; 0x38
   13b28:	eor	lr, lr, lr, lsl #3
   13b2c:	eor	r2, r2, r6
   13b30:	lsl	ip, ip, #23
   13b34:	str	r6, [r4, #48]	; 0x30
   13b38:	lsl	r6, r5, #3
   13b3c:	orr	ip, ip, r7, lsr #9
   13b40:	orr	r6, r6, r0, lsr #29
   13b44:	bic	r3, r3, #508	; 0x1fc
   13b48:	eor	r7, r7, r7, lsl #5
   13b4c:	bic	r3, r3, #3
   13b50:	eor	r6, r6, r5
   13b54:	lsr	lr, lr, #23
   13b58:	lsl	r5, r5, #8
   13b5c:	orr	lr, lr, r1, lsl #9
   13b60:	orr	r5, r5, r0, lsr #24
   13b64:	orr	r1, r3, r1, lsr #23
   13b68:	bic	ip, ip, #255	; 0xff
   13b6c:	lsr	r7, r7, #24
   13b70:	lsl	r0, r0, #8
   13b74:	orr	r7, r7, r8, lsl #8
   13b78:	orr	ip, ip, r8, lsr #24
   13b7c:	eor	r3, r9, r1
   13b80:	eor	r2, r2, lr
   13b84:	and	r0, r0, #-2147483648	; 0x80000000
   13b88:	orr	r0, r0, r6, lsr #1
   13b8c:	eor	r2, r2, r7
   13b90:	eor	r3, r3, ip
   13b94:	eor	r2, r2, r0
   13b98:	eor	r3, r3, r5
   13b9c:	str	r1, [r4, #68]	; 0x44
   13ba0:	str	lr, [r4, #64]	; 0x40
   13ba4:	str	r7, [r4, #72]	; 0x48
   13ba8:	str	ip, [r4, #76]	; 0x4c
   13bac:	str	r0, [r4, #80]	; 0x50
   13bb0:	str	r5, [r4, #84]	; 0x54
   13bb4:	strd	r2, [r4, #88]	; 0x58
   13bb8:	vmov.f64	d0, d8
   13bbc:	bl	11134 <__log_finite@plt>
   13bc0:	vmov.f64	d9, d0
   13bc4:	vldr	d0, [pc, #108]	; 13c38 <pareto_init@@Base+0x1f0>
   13bc8:	vsub.f64	d0, d0, d8
   13bcc:	bl	11134 <__log_finite@plt>
   13bd0:	vdiv.f64	d0, d9, d0
   13bd4:	vpop	{d8-d9}
   13bd8:	vstr	d0, [r4, #32]
   13bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13be0:	ldr	r2, [r4, #48]	; 0x30
   13be4:	ldr	lr, [r4, #52]	; 0x34
   13be8:	ldr	r0, [pc, #88]	; 13c48 <pareto_init@@Base+0x200>
   13bec:	ldr	r5, [r4, #56]	; 0x38
   13bf0:	and	r0, r0, r2, lsl #12
   13bf4:	eor	r2, r2, r2, lsl #13
   13bf8:	lsl	ip, lr, #4
   13bfc:	ldr	r1, [pc, #72]	; 13c4c <pareto_init@@Base+0x204>
   13c00:	eor	lr, lr, lr, lsl #2
   13c04:	orr	r0, r0, r2, lsr #19
   13c08:	bic	ip, ip, #127	; 0x7f
   13c0c:	eor	r2, r5, r5, lsl #3
   13c10:	orr	ip, ip, lr, lsr #25
   13c14:	and	r1, r1, r5, lsl #17
   13c18:	orr	r1, r1, r2, lsr #11
   13c1c:	eor	r2, r0, ip
   13c20:	eor	r2, r2, r1
   13c24:	str	ip, [r4, #52]	; 0x34
   13c28:	str	r0, [r4, #48]	; 0x30
   13c2c:	str	r1, [r4, #56]	; 0x38
   13c30:	b	13bb4 <pareto_init@@Base+0x16c>
   13c34:	nop			; (mov r0, r0)
   13c38:	andeq	r0, r0, r0
   13c3c:	svccc	0x00f00000	; IMB
   13c40:			; <UNDEFINED> instruction: 0xffffc000
   13c44:			; <UNDEFINED> instruction: 0xfffff800
   13c48:			; <UNDEFINED> instruction: 0xffffe000
   13c4c:			; <UNDEFINED> instruction: 0xffe00000

00013c50 <pareto_next@@Base>:
   13c50:	ldr	r1, [r0, #40]	; 0x28
   13c54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c58:	cmp	r1, #0
   13c5c:	vpush	{d8}
   13c60:	mov	r4, r0
   13c64:	beq	13e1c <pareto_next@@Base+0x1cc>
   13c68:	ldr	r1, [r0, #60]	; 0x3c
   13c6c:	ldr	r6, [r0, #56]	; 0x38
   13c70:	ldr	r2, [r0, #48]	; 0x30
   13c74:	lsl	ip, r1, #24
   13c78:	ldr	r3, [r0, #68]	; 0x44
   13c7c:	ldr	r8, [r4, #52]	; 0x34
   13c80:	adds	r0, r2, r2
   13c84:	orr	ip, ip, r6, lsr #8
   13c88:	ldr	r0, [pc, #488]	; 13e78 <pareto_next@@Base+0x228>
   13c8c:	eor	r5, ip, r1
   13c90:	lsl	r1, r1, #5
   13c94:	orr	r1, r1, r6, lsr #27
   13c98:	and	r0, r0, r6, lsl #5
   13c9c:	adc	r6, r8, r8
   13ca0:	eor	r9, r6, r8
   13ca4:	ldr	r6, [pc, #464]	; 13e7c <pareto_next@@Base+0x22c>
   13ca8:	ldr	lr, [r4, #64]	; 0x40
   13cac:	lsl	r8, r8, #10
   13cb0:	orr	r8, r8, r2, lsr #22
   13cb4:	and	r2, r6, r2, lsl #10
   13cb8:	orr	r6, r2, r9, lsr #21
   13cbc:	lsl	r2, r3, #3
   13cc0:	orr	r2, r2, lr, lsr #29
   13cc4:	eor	r2, r2, r3
   13cc8:	lsl	r3, r3, #29
   13ccc:	ldr	ip, [r4, #76]	; 0x4c
   13cd0:	orr	r3, r3, lr, lsr #3
   13cd4:	eor	lr, lr, lr, lsl #3
   13cd8:	ldr	r7, [r4, #72]	; 0x48
   13cdc:	bic	r3, r3, #508	; 0x1fc
   13ce0:	orr	r0, r0, r5, lsr #18
   13ce4:	lsr	lr, lr, #23
   13ce8:	ldr	r5, [r4, #84]	; 0x54
   13cec:	bic	r3, r3, #3
   13cf0:	orr	lr, lr, r2, lsl #9
   13cf4:	orr	r3, r3, r2, lsr #23
   13cf8:	str	r1, [r4, #60]	; 0x3c
   13cfc:	ldr	r2, [r4, #80]	; 0x50
   13d00:	eor	r1, r1, r8
   13d04:	str	r8, [r4, #52]	; 0x34
   13d08:	lsl	r8, ip, #5
   13d0c:	orr	r8, r8, r7, lsr #27
   13d10:	eor	r8, r8, ip
   13d14:	str	r0, [r4, #56]	; 0x38
   13d18:	lsl	ip, ip, #23
   13d1c:	eor	r0, r0, r6
   13d20:	str	r6, [r4, #48]	; 0x30
   13d24:	lsl	r6, r5, #3
   13d28:	orr	ip, ip, r7, lsr #9
   13d2c:	orr	r6, r6, r2, lsr #29
   13d30:	eor	r7, r7, r7, lsl #5
   13d34:	eor	r6, r6, r5
   13d38:	lsl	r5, r5, #8
   13d3c:	orr	r5, r5, r2, lsr #24
   13d40:	bic	ip, ip, #255	; 0xff
   13d44:	lsr	r7, r7, #24
   13d48:	lsl	r2, r2, #8
   13d4c:	orr	r7, r7, r8, lsl #8
   13d50:	orr	ip, ip, r8, lsr #24
   13d54:	eor	r1, r1, r3
   13d58:	eor	r0, r0, lr
   13d5c:	and	r2, r2, #-2147483648	; 0x80000000
   13d60:	orr	r2, r2, r6, lsr #1
   13d64:	eor	r0, r0, r7
   13d68:	eor	r1, r1, ip
   13d6c:	eor	r0, r0, r2
   13d70:	eor	r1, r1, r5
   13d74:	str	r3, [r4, #68]	; 0x44
   13d78:	str	lr, [r4, #64]	; 0x40
   13d7c:	str	r7, [r4, #72]	; 0x48
   13d80:	str	ip, [r4, #76]	; 0x4c
   13d84:	str	r2, [r4, #80]	; 0x50
   13d88:	str	r5, [r4, #84]	; 0x54
   13d8c:	bl	14ac4 <gauss_disable_hash@@Base+0x574>
   13d90:	vldr	d0, [pc, #216]	; 13e70 <pareto_next@@Base+0x220>
   13d94:	vldr	d1, [r4, #32]
   13d98:	ldm	r4, {r5, r8}
   13d9c:	vmov	d7, r0, r1
   13da0:	vmul.f64	d0, d7, d0
   13da4:	bl	110e0 <__pow_finite@plt>
   13da8:	subs	r0, r5, #1
   13dac:	sbc	r1, r8, #0
   13db0:	vmov.f64	d8, d0
   13db4:	bl	14ac4 <gauss_disable_hash@@Base+0x574>
   13db8:	vmov	d7, r0, r1
   13dbc:	vmul.f64	d7, d7, d8
   13dc0:	vmov	r0, r1, d7
   13dc4:	bl	14ed8 <gauss_disable_hash@@Base+0x988>
   13dc8:	ldrb	r3, [r4, #96]	; 0x60
   13dcc:	cmp	r3, #0
   13dd0:	mov	r6, r0
   13dd4:	mov	r7, r1
   13dd8:	bne	13df4 <pareto_next@@Base+0x1a4>
   13ddc:	ldr	r3, [pc, #156]	; 13e80 <pareto_next@@Base+0x230>
   13de0:	ldr	r2, [pc, #156]	; 13e84 <pareto_next@@Base+0x234>
   13de4:	mul	r3, r3, r0
   13de8:	umull	r6, r7, r0, r2
   13dec:	mla	r3, r2, r1, r3
   13df0:	add	r7, r3, r7
   13df4:	ldrd	r0, [r4, #88]	; 0x58
   13df8:	mov	r2, r5
   13dfc:	mov	r3, r8
   13e00:	adds	r0, r6, r0
   13e04:	adc	r1, r7, r1
   13e08:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   13e0c:	vpop	{d8}
   13e10:	mov	r0, r2
   13e14:	mov	r1, r3
   13e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e1c:	ldr	lr, [r0, #52]	; 0x34
   13e20:	ldr	r0, [r0, #48]	; 0x30
   13e24:	ldr	r2, [pc, #92]	; 13e88 <pareto_next@@Base+0x238>
   13e28:	ldr	r5, [r4, #56]	; 0x38
   13e2c:	and	r2, r2, r0, lsl #12
   13e30:	eor	r0, r0, r0, lsl #13
   13e34:	lsl	ip, lr, #4
   13e38:	ldr	r3, [pc, #76]	; 13e8c <pareto_next@@Base+0x23c>
   13e3c:	eor	lr, lr, lr, lsl #2
   13e40:	orr	r2, r2, r0, lsr #19
   13e44:	bic	ip, ip, #127	; 0x7f
   13e48:	eor	r0, r5, r5, lsl #3
   13e4c:	orr	ip, ip, lr, lsr #25
   13e50:	and	r3, r3, r5, lsl #17
   13e54:	orr	r3, r3, r0, lsr #11
   13e58:	eor	r0, r2, ip
   13e5c:	eor	r0, r0, r3
   13e60:	str	ip, [r4, #52]	; 0x34
   13e64:	str	r2, [r4, #48]	; 0x30
   13e68:	str	r3, [r4, #56]	; 0x38
   13e6c:	b	13d8c <pareto_next@@Base+0x13c>
   13e70:	andseq	r0, r0, r0
   13e74:	ldclcc	0, cr0, [r0]
   13e78:			; <UNDEFINED> instruction: 0xffffc000
   13e7c:			; <UNDEFINED> instruction: 0xfffff800
   13e80:	bicvs	r8, r8, r6, asr #12
   13e84:	adcshi	r8, r5, fp, ror #7
   13e88:			; <UNDEFINED> instruction: 0xffffe000
   13e8c:			; <UNDEFINED> instruction: 0xffe00000

00013e90 <zipf_disable_hash@@Base>:
   13e90:	mov	r3, #1
   13e94:	strb	r3, [r0, #96]	; 0x60
   13e98:	bx	lr

00013e9c <strntol@@Base>:
   13e9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ea0:	mov	r5, r2
   13ea4:	ldr	r6, [pc, #264]	; 13fb4 <strntol@@Base+0x118>
   13ea8:	sub	sp, sp, #36	; 0x24
   13eac:	cmp	r1, #0
   13eb0:	cmpne	r0, #0
   13eb4:	ldr	r2, [r6]
   13eb8:	mov	r7, r3
   13ebc:	mov	r4, r1
   13ec0:	str	r2, [sp, #28]
   13ec4:	beq	13fa8 <strntol@@Base+0x10c>
   13ec8:	ldrb	r3, [r0]
   13ecc:	cmp	r3, #32
   13ed0:	bne	13fa8 <strntol@@Base+0x10c>
   13ed4:	add	r2, r0, #1
   13ed8:	b	13eec <strntol@@Base+0x50>
   13edc:	ldrb	r3, [r2]
   13ee0:	add	r2, r2, #1
   13ee4:	cmp	r3, #32
   13ee8:	bne	13f0c <strntol@@Base+0x70>
   13eec:	subs	r4, r4, #1
   13ef0:	movne	r3, #1
   13ef4:	moveq	r3, #0
   13ef8:	cmp	r2, #0
   13efc:	moveq	r3, #0
   13f00:	cmp	r3, #0
   13f04:	mov	r8, r2
   13f08:	bne	13edc <strntol@@Base+0x40>
   13f0c:	sub	r3, r4, #1
   13f10:	cmp	r3, #22
   13f14:	bls	13f40 <strntol@@Base+0xa4>
   13f18:	cmp	r5, #0
   13f1c:	moveq	r0, r5
   13f20:	strne	r0, [r5]
   13f24:	movne	r0, #0
   13f28:	ldr	r2, [sp, #28]
   13f2c:	ldr	r3, [r6]
   13f30:	cmp	r2, r3
   13f34:	bne	13fb0 <strntol@@Base+0x114>
   13f38:	add	sp, sp, #36	; 0x24
   13f3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f40:	add	r9, sp, #4
   13f44:	mov	r2, r4
   13f48:	mov	r1, r8
   13f4c:	mov	r0, r9
   13f50:	mov	r3, #24
   13f54:	bl	11020 <__memcpy_chk@plt>
   13f58:	add	r3, sp, #32
   13f5c:	add	r4, r3, r4
   13f60:	mov	r0, r9
   13f64:	mov	r3, #0
   13f68:	mov	r2, r7
   13f6c:	mov	r1, r5
   13f70:	strb	r3, [r4, #-28]	; 0xffffffe4
   13f74:	bl	10fc0 <strtol@plt>
   13f78:	sub	r3, r0, #-2147483647	; 0x80000001
   13f7c:	cmn	r3, #3
   13f80:	movhi	r3, #0
   13f84:	movls	r3, #1
   13f88:	cmp	r5, #0
   13f8c:	moveq	r3, #0
   13f90:	cmp	r3, #0
   13f94:	ldrne	r3, [r5]
   13f98:	subne	r9, r3, r9
   13f9c:	addne	r8, r8, r9
   13fa0:	strne	r8, [r5]
   13fa4:	b	13f28 <strntol@@Base+0x8c>
   13fa8:	mov	r8, r0
   13fac:	b	13f0c <strntol@@Base+0x70>
   13fb0:	bl	11014 <__stack_chk_fail@plt>
   13fb4:	andeq	r5, r2, r8, asr #28

00013fb8 <gauss_next@@Base>:
   13fb8:	ldrd	r2, [r0, #48]	; 0x30
   13fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc0:	sub	sp, sp, #44	; 0x2c
   13fc4:	ldr	r1, [r0]
   13fc8:	strd	r2, [sp, #32]
   13fcc:	str	r1, [sp, #28]
   13fd0:	adds	r1, r2, #1
   13fd4:	adc	r3, r3, #0
   13fd8:	str	r3, [sp, #16]
   13fdc:	mov	fp, r0
   13fe0:	mov	r3, #12
   13fe4:	str	r3, [sp, #20]
   13fe8:	mov	r3, #0
   13fec:	str	r1, [sp, #12]
   13ff0:	str	r3, [sp, #4]
   13ff4:	str	r3, [sp, #8]
   13ff8:	ldr	r1, [sp, #28]
   13ffc:	ldrd	r2, [sp, #12]
   14000:	cmp	r1, #0
   14004:	beq	14374 <gauss_next@@Base+0x3bc>
   14008:	ldr	ip, [fp, #20]
   1400c:	ldr	r1, [fp, #8]
   14010:	ldr	r5, [fp, #16]
   14014:	ldr	lr, [fp, #12]
   14018:	adds	r0, r1, r1
   1401c:	lsl	sl, ip, #24
   14020:	adc	r7, lr, lr
   14024:	orr	sl, sl, r5, lsr #8
   14028:	eor	r7, r7, lr
   1402c:	eor	sl, sl, ip
   14030:	lsl	lr, lr, #10
   14034:	lsl	ip, ip, #5
   14038:	str	lr, [sp]
   1403c:	ldr	r6, [fp, #28]
   14040:	orr	ip, ip, r5, lsr #27
   14044:	ldr	r9, [fp, #24]
   14048:	str	ip, [sp, #24]
   1404c:	ldr	lr, [pc, #1116]	; 144b0 <gauss_next@@Base+0x4f8>
   14050:	ldr	ip, [sp]
   14054:	ldr	r8, [fp, #36]	; 0x24
   14058:	ldr	r4, [fp, #32]
   1405c:	and	r5, lr, r5, lsl #5
   14060:	orr	ip, ip, r1, lsr #22
   14064:	lsl	r0, r6, #3
   14068:	add	lr, lr, #14336	; 0x3800
   1406c:	str	ip, [sp]
   14070:	orr	r0, r0, r9, lsr #29
   14074:	and	ip, lr, r1, lsl #10
   14078:	ldr	lr, [fp, #44]	; 0x2c
   1407c:	eor	r0, r0, r6
   14080:	orr	sl, r5, sl, lsr #18
   14084:	lsl	r6, r6, #29
   14088:	lsl	r5, r8, #5
   1408c:	orr	r5, r5, r4, lsr #27
   14090:	orr	r6, r6, r9, lsr #3
   14094:	eor	r9, r9, r9, lsl #3
   14098:	eor	r1, r5, r8
   1409c:	orr	ip, ip, r7, lsr #21
   140a0:	bic	r6, r6, #508	; 0x1fc
   140a4:	lsl	r7, lr, #3
   140a8:	lsl	r8, r8, #23
   140ac:	ldr	lr, [fp, #40]	; 0x28
   140b0:	orr	r8, r8, r4, lsr #9
   140b4:	lsr	r9, r9, #23
   140b8:	bic	r6, r6, #3
   140bc:	eor	r4, r4, r4, lsl #5
   140c0:	orr	r9, r9, r0, lsl #9
   140c4:	orr	r6, r6, r0, lsr #23
   140c8:	ldr	r0, [fp, #44]	; 0x2c
   140cc:	orr	r7, r7, lr, lsr #29
   140d0:	lsr	r4, r4, #24
   140d4:	bic	r8, r8, #255	; 0xff
   140d8:	eor	lr, r7, r0
   140dc:	orr	r4, r4, r1, lsl #8
   140e0:	orr	r8, r8, r1, lsr #24
   140e4:	ldr	r7, [sp]
   140e8:	ldr	r1, [sp, #24]
   140ec:	ldr	r5, [fp, #44]	; 0x2c
   140f0:	eor	r1, r1, r7
   140f4:	ldr	r7, [fp, #40]	; 0x28
   140f8:	lsl	r5, r5, #8
   140fc:	eor	r0, ip, sl
   14100:	orr	r5, r5, r7, lsr #24
   14104:	lsl	r7, r7, #8
   14108:	and	r7, r7, #-2147483648	; 0x80000000
   1410c:	orr	r7, r7, lr, lsr #1
   14110:	str	ip, [fp, #8]
   14114:	ldr	lr, [sp, #24]
   14118:	ldr	ip, [sp]
   1411c:	eor	r0, r0, r9
   14120:	eor	r1, r1, r6
   14124:	eor	r0, r0, r4
   14128:	eor	r1, r1, r8
   1412c:	str	sl, [fp, #16]
   14130:	str	lr, [fp, #20]
   14134:	str	ip, [fp, #12]
   14138:	str	r9, [fp, #24]
   1413c:	str	r6, [fp, #28]
   14140:	str	r4, [fp, #32]
   14144:	str	r8, [fp, #36]	; 0x24
   14148:	eor	r0, r0, r7
   1414c:	eor	r1, r1, r5
   14150:	str	r7, [fp, #40]	; 0x28
   14154:	str	r5, [fp, #44]	; 0x2c
   14158:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   1415c:	ldr	r1, [sp, #4]
   14160:	adds	r2, r1, r2
   14164:	str	r2, [sp, #4]
   14168:	ldr	r2, [sp, #8]
   1416c:	adc	r3, r2, r3
   14170:	str	r3, [sp, #8]
   14174:	ldr	r3, [sp, #20]
   14178:	subs	r3, r3, #1
   1417c:	str	r3, [sp, #20]
   14180:	bne	13ff8 <gauss_next@@Base+0x40>
   14184:	ldr	r3, [sp, #4]
   14188:	mov	r2, #12
   1418c:	adds	r0, r3, #11
   14190:	ldr	r3, [sp, #8]
   14194:	str	sl, [sp]
   14198:	adc	r1, r3, #0
   1419c:	mov	r3, #0
   141a0:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   141a4:	ldr	lr, [fp, #56]	; 0x38
   141a8:	cmp	lr, #0
   141ac:	mov	ip, r0
   141b0:	mov	sl, r1
   141b4:	beq	14414 <gauss_next@@Base+0x45c>
   141b8:	ldr	r2, [sp, #24]
   141bc:	ldr	r3, [fp, #8]
   141c0:	ldr	r1, [sp]
   141c4:	adds	r3, r3, r3
   141c8:	lsl	r3, r2, #24
   141cc:	orr	r3, r3, r1, lsr #8
   141d0:	eor	r3, r3, r2
   141d4:	str	r3, [sp, #4]
   141d8:	ldr	r2, [pc, #720]	; 144b0 <gauss_next@@Base+0x4f8>
   141dc:	ldr	r3, [fp, #8]
   141e0:	and	r1, r2, r1, lsl #5
   141e4:	add	r2, r2, #14336	; 0x3800
   141e8:	and	r2, r2, r3, lsl #10
   141ec:	ldr	r3, [sp, #4]
   141f0:	ldr	r0, [fp, #12]
   141f4:	orr	r3, r1, r3, lsr #18
   141f8:	str	r3, [fp, #16]
   141fc:	adc	r3, r0, r0
   14200:	eor	r3, r3, r0
   14204:	ldr	r1, [sp, #24]
   14208:	orr	r3, r2, r3, lsr #21
   1420c:	str	r3, [sp, #12]
   14210:	lsl	r1, r1, #5
   14214:	lsl	r3, r6, #3
   14218:	str	r1, [sp, #8]
   1421c:	orr	r3, r3, r9, lsr #29
   14220:	lsl	r1, r8, #5
   14224:	eor	r2, r3, r6
   14228:	orr	r1, r1, r4, lsr #27
   1422c:	lsl	r6, r6, #29
   14230:	eor	r1, r1, r8
   14234:	orr	r6, r6, r9, lsr #3
   14238:	lsl	r8, r8, #23
   1423c:	orr	r8, r8, r4, lsr #9
   14240:	eor	r9, r9, r9, lsl #3
   14244:	eor	r4, r4, r4, lsl #5
   14248:	bic	r6, r6, #508	; 0x1fc
   1424c:	lsl	r3, r0, #10
   14250:	bic	r6, r6, #3
   14254:	ldr	r0, [sp]
   14258:	str	r6, [sp, #20]
   1425c:	lsr	r9, r9, #23
   14260:	bic	r6, r8, #255	; 0xff
   14264:	lsr	r8, r4, #24
   14268:	ldr	r4, [sp, #8]
   1426c:	str	r3, [sp, #4]
   14270:	str	r2, [sp, #16]
   14274:	orr	r9, r9, r2, lsl #9
   14278:	mov	r2, ip
   1427c:	ldr	ip, [fp, #8]
   14280:	orr	r0, r4, r0, lsr #27
   14284:	ldr	r4, [sp, #4]
   14288:	orr	r8, r8, r1, lsl #8
   1428c:	orr	ip, r4, ip, lsr #22
   14290:	str	ip, [sp, #4]
   14294:	ldr	ip, [sp, #16]
   14298:	ldr	r4, [sp, #20]
   1429c:	str	r0, [sp, #8]
   142a0:	orr	ip, r4, ip, lsr #23
   142a4:	lsl	r0, r5, #3
   142a8:	ldr	r4, [fp, #16]
   142ac:	orr	r6, r6, r1, lsr #24
   142b0:	ldr	r1, [sp, #12]
   142b4:	orr	r0, r0, r7, lsr #29
   142b8:	eor	r0, r0, r5
   142bc:	eor	r1, r1, r4
   142c0:	lsl	r4, r7, #8
   142c4:	and	r4, r4, #-2147483648	; 0x80000000
   142c8:	eor	r1, r1, r9
   142cc:	orr	r0, r4, r0, lsr #1
   142d0:	eor	r1, r1, r8
   142d4:	eor	r1, r1, r0
   142d8:	ldr	r4, [sp, #12]
   142dc:	vmov	s12, r1
   142e0:	lsl	r5, r5, #8
   142e4:	orr	r5, r5, r7, lsr #24
   142e8:	str	r4, [fp, #8]
   142ec:	ldr	r7, [sp, #8]
   142f0:	ldr	r4, [sp, #4]
   142f4:	mov	r3, sl
   142f8:	str	r7, [fp, #20]
   142fc:	str	r4, [fp, #12]
   14300:	str	r9, [fp, #24]
   14304:	str	ip, [fp, #28]
   14308:	str	r8, [fp, #32]
   1430c:	str	r6, [fp, #36]	; 0x24
   14310:	str	r0, [fp, #40]	; 0x28
   14314:	str	r5, [fp, #44]	; 0x2c
   14318:	vmov	s15, lr
   1431c:	vldr	d5, [pc, #388]	; 144a8 <gauss_next@@Base+0x4f0>
   14320:	vcvt.f64.u32	d6, s12
   14324:	ldrd	r4, [sp, #32]
   14328:	vcvt.f64.u32	d7, s15
   1432c:	vmul.f64	d7, d7, d5
   14330:	vmul.f64	d7, d7, d6
   14334:	vcvt.s32.f64	s14, d7
   14338:	vmov	r1, s14
   1433c:	sub	lr, r1, lr, lsr #1
   14340:	adds	r0, r2, lr
   14344:	adc	r1, r3, lr, asr #31
   14348:	cmp	r1, r5
   1434c:	cmpeq	r0, r4
   14350:	bcc	14414 <gauss_next@@Base+0x45c>
   14354:	add	lr, lr, lr, lsr #31
   14358:	asr	lr, lr, #1
   1435c:	adds	r0, r2, lr
   14360:	adc	r1, r3, lr, asr #31
   14364:	cmp	r1, r5
   14368:	cmpeq	r0, r4
   1436c:	bcs	14354 <gauss_next@@Base+0x39c>
   14370:	b	14414 <gauss_next@@Base+0x45c>
   14374:	ldr	r8, [sp, #20]
   14378:	ldmib	sp, {r7, r9}
   1437c:	ldr	r6, [fp, #12]
   14380:	ldr	r4, [fp, #8]
   14384:	ldr	r3, [fp, #16]
   14388:	lsl	r2, r6, #4
   1438c:	eor	r6, r6, r6, lsl #2
   14390:	bic	r2, r2, #127	; 0x7f
   14394:	ldr	r0, [pc, #280]	; 144b4 <gauss_next@@Base+0x4fc>
   14398:	eor	r1, r4, r4, lsl #13
   1439c:	orr	r6, r2, r6, lsr #25
   143a0:	ldr	r2, [pc, #272]	; 144b8 <gauss_next@@Base+0x500>
   143a4:	and	r4, r0, r4, lsl #12
   143a8:	eor	r5, r3, r3, lsl #3
   143ac:	orr	r4, r4, r1, lsr #19
   143b0:	and	r3, r2, r3, lsl #17
   143b4:	orr	r5, r3, r5, lsr #11
   143b8:	eor	r0, r4, r6
   143bc:	str	r6, [fp, #12]
   143c0:	str	r4, [fp, #8]
   143c4:	eor	r0, r0, r5
   143c8:	str	r5, [fp, #16]
   143cc:	ldrd	r2, [sp, #12]
   143d0:	mov	r1, #0
   143d4:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   143d8:	adds	r7, r7, r2
   143dc:	adc	r9, r9, r3
   143e0:	subs	r8, r8, #1
   143e4:	bne	1437c <gauss_next@@Base+0x3c4>
   143e8:	adds	r0, r7, #11
   143ec:	adc	r1, r9, #0
   143f0:	mov	r2, #12
   143f4:	mov	r3, #0
   143f8:	stmib	sp, {r7, r9}
   143fc:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   14400:	ldr	lr, [fp, #56]	; 0x38
   14404:	cmp	lr, #0
   14408:	mov	ip, r0
   1440c:	mov	r7, r1
   14410:	bne	14450 <gauss_next@@Base+0x498>
   14414:	ldrb	r3, [fp, #60]	; 0x3c
   14418:	cmp	r3, #0
   1441c:	bne	14438 <gauss_next@@Base+0x480>
   14420:	ldr	r3, [pc, #148]	; 144bc <gauss_next@@Base+0x504>
   14424:	ldr	r2, [pc, #148]	; 144c0 <gauss_next@@Base+0x508>
   14428:	mul	r3, r3, r0
   1442c:	mla	r3, r2, r1, r3
   14430:	umull	r0, r1, r0, r2
   14434:	add	r1, r3, r1
   14438:	ldrd	r2, [sp, #32]
   1443c:	bl	14e5c <gauss_disable_hash@@Base+0x90c>
   14440:	mov	r0, r2
   14444:	mov	r1, r3
   14448:	add	sp, sp, #44	; 0x2c
   1444c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14450:	ldr	r3, [pc, #92]	; 144b4 <gauss_next@@Base+0x4fc>
   14454:	eor	r2, r4, r4, lsl #13
   14458:	ldr	r1, [pc, #88]	; 144b8 <gauss_next@@Base+0x500>
   1445c:	and	r4, r3, r4, lsl #12
   14460:	lsl	r3, r6, #4
   14464:	eor	r6, r6, r6, lsl #2
   14468:	orr	r4, r4, r2, lsr #19
   1446c:	bic	r3, r3, #127	; 0x7f
   14470:	eor	r2, r5, r5, lsl #3
   14474:	and	r0, r1, r5, lsl #17
   14478:	orr	r5, r3, r6, lsr #25
   1447c:	orr	r0, r0, r2, lsr #11
   14480:	eor	r1, r4, r5
   14484:	eor	r1, r1, r0
   14488:	mov	r2, ip
   1448c:	str	r4, [fp, #8]
   14490:	str	r0, [fp, #16]
   14494:	mov	r3, r7
   14498:	str	r5, [fp, #12]
   1449c:	vmov	s12, r1
   144a0:	b	14318 <gauss_next@@Base+0x360>
   144a4:	nop			; (mov r0, r0)
   144a8:	andeq	r0, r0, r0
   144ac:	ldclcc	0, cr0, [r0]
   144b0:			; <UNDEFINED> instruction: 0xffffc000
   144b4:			; <UNDEFINED> instruction: 0xffffe000
   144b8:			; <UNDEFINED> instruction: 0xffe00000
   144bc:	bicvs	r8, r8, r6, asr #12
   144c0:	adcshi	r8, r5, fp, ror #7

000144c4 <gauss_init@@Base>:
   144c4:	push	{r4, r5, r6, lr}
   144c8:	vpush	{d8}
   144cc:	vmov.f64	d8, d0
   144d0:	mov	r4, r0
   144d4:	mov	r5, r1
   144d8:	mov	r6, r2
   144dc:	mov	r1, #0
   144e0:	mov	r2, #64	; 0x40
   144e4:	bl	110b0 <memset@plt>
   144e8:	mov	r1, r6
   144ec:	mov	r0, r4
   144f0:	mov	r2, #0
   144f4:	bl	120fc <init_rand_seed@@Base>
   144f8:	vcmp.f64	d8, #0.0
   144fc:	mov	r3, #0
   14500:	str	r5, [r4, #48]	; 0x30
   14504:	str	r3, [r4, #52]	; 0x34
   14508:	vmrs	APSR_nzcv, fpscr
   1450c:	beq	14540 <gauss_init@@Base+0x7c>
   14510:	vmov	s15, r5
   14514:	lsr	r5, r5, #1
   14518:	vcvt.f64.u32	d0, s15
   1451c:	vldr	d7, [pc, #36]	; 14548 <gauss_init@@Base+0x84>
   14520:	vmul.f64	d0, d0, d7
   14524:	vdiv.f64	d0, d0, d8
   14528:	bl	110d4 <ceil@plt>
   1452c:	vcvt.u32.f64	s15, d0
   14530:	vmov	r3, s15
   14534:	cmp	r3, r5
   14538:	movcc	r5, r3
   1453c:	str	r5, [r4, #56]	; 0x38
   14540:	vpop	{d8}
   14544:	pop	{r4, r5, r6, pc}
   14548:	andeq	r0, r0, r0
   1454c:	subsmi	r0, r9, r0

00014550 <gauss_disable_hash@@Base>:
   14550:	mov	r3, #1
   14554:	strb	r3, [r0, #60]	; 0x3c
   14558:	bx	lr
   1455c:	ldr	r3, [r1, #16]
   14560:	ldr	r0, [r0, #16]
   14564:	sub	r0, r3, r0
   14568:	bx	lr
   1456c:	subs	r2, r1, #1
   14570:	bxeq	lr
   14574:	bcc	1474c <gauss_disable_hash@@Base+0x1fc>
   14578:	cmp	r0, r1
   1457c:	bls	14730 <gauss_disable_hash@@Base+0x1e0>
   14580:	tst	r1, r2
   14584:	beq	1473c <gauss_disable_hash@@Base+0x1ec>
   14588:	clz	r3, r0
   1458c:	clz	r2, r1
   14590:	sub	r3, r2, r3
   14594:	rsbs	r3, r3, #31
   14598:	addne	r3, r3, r3, lsl #1
   1459c:	mov	r2, #0
   145a0:	addne	pc, pc, r3, lsl #2
   145a4:	nop			; (mov r0, r0)
   145a8:	cmp	r0, r1, lsl #31
   145ac:	adc	r2, r2, r2
   145b0:	subcs	r0, r0, r1, lsl #31
   145b4:	cmp	r0, r1, lsl #30
   145b8:	adc	r2, r2, r2
   145bc:	subcs	r0, r0, r1, lsl #30
   145c0:	cmp	r0, r1, lsl #29
   145c4:	adc	r2, r2, r2
   145c8:	subcs	r0, r0, r1, lsl #29
   145cc:	cmp	r0, r1, lsl #28
   145d0:	adc	r2, r2, r2
   145d4:	subcs	r0, r0, r1, lsl #28
   145d8:	cmp	r0, r1, lsl #27
   145dc:	adc	r2, r2, r2
   145e0:	subcs	r0, r0, r1, lsl #27
   145e4:	cmp	r0, r1, lsl #26
   145e8:	adc	r2, r2, r2
   145ec:	subcs	r0, r0, r1, lsl #26
   145f0:	cmp	r0, r1, lsl #25
   145f4:	adc	r2, r2, r2
   145f8:	subcs	r0, r0, r1, lsl #25
   145fc:	cmp	r0, r1, lsl #24
   14600:	adc	r2, r2, r2
   14604:	subcs	r0, r0, r1, lsl #24
   14608:	cmp	r0, r1, lsl #23
   1460c:	adc	r2, r2, r2
   14610:	subcs	r0, r0, r1, lsl #23
   14614:	cmp	r0, r1, lsl #22
   14618:	adc	r2, r2, r2
   1461c:	subcs	r0, r0, r1, lsl #22
   14620:	cmp	r0, r1, lsl #21
   14624:	adc	r2, r2, r2
   14628:	subcs	r0, r0, r1, lsl #21
   1462c:	cmp	r0, r1, lsl #20
   14630:	adc	r2, r2, r2
   14634:	subcs	r0, r0, r1, lsl #20
   14638:	cmp	r0, r1, lsl #19
   1463c:	adc	r2, r2, r2
   14640:	subcs	r0, r0, r1, lsl #19
   14644:	cmp	r0, r1, lsl #18
   14648:	adc	r2, r2, r2
   1464c:	subcs	r0, r0, r1, lsl #18
   14650:	cmp	r0, r1, lsl #17
   14654:	adc	r2, r2, r2
   14658:	subcs	r0, r0, r1, lsl #17
   1465c:	cmp	r0, r1, lsl #16
   14660:	adc	r2, r2, r2
   14664:	subcs	r0, r0, r1, lsl #16
   14668:	cmp	r0, r1, lsl #15
   1466c:	adc	r2, r2, r2
   14670:	subcs	r0, r0, r1, lsl #15
   14674:	cmp	r0, r1, lsl #14
   14678:	adc	r2, r2, r2
   1467c:	subcs	r0, r0, r1, lsl #14
   14680:	cmp	r0, r1, lsl #13
   14684:	adc	r2, r2, r2
   14688:	subcs	r0, r0, r1, lsl #13
   1468c:	cmp	r0, r1, lsl #12
   14690:	adc	r2, r2, r2
   14694:	subcs	r0, r0, r1, lsl #12
   14698:	cmp	r0, r1, lsl #11
   1469c:	adc	r2, r2, r2
   146a0:	subcs	r0, r0, r1, lsl #11
   146a4:	cmp	r0, r1, lsl #10
   146a8:	adc	r2, r2, r2
   146ac:	subcs	r0, r0, r1, lsl #10
   146b0:	cmp	r0, r1, lsl #9
   146b4:	adc	r2, r2, r2
   146b8:	subcs	r0, r0, r1, lsl #9
   146bc:	cmp	r0, r1, lsl #8
   146c0:	adc	r2, r2, r2
   146c4:	subcs	r0, r0, r1, lsl #8
   146c8:	cmp	r0, r1, lsl #7
   146cc:	adc	r2, r2, r2
   146d0:	subcs	r0, r0, r1, lsl #7
   146d4:	cmp	r0, r1, lsl #6
   146d8:	adc	r2, r2, r2
   146dc:	subcs	r0, r0, r1, lsl #6
   146e0:	cmp	r0, r1, lsl #5
   146e4:	adc	r2, r2, r2
   146e8:	subcs	r0, r0, r1, lsl #5
   146ec:	cmp	r0, r1, lsl #4
   146f0:	adc	r2, r2, r2
   146f4:	subcs	r0, r0, r1, lsl #4
   146f8:	cmp	r0, r1, lsl #3
   146fc:	adc	r2, r2, r2
   14700:	subcs	r0, r0, r1, lsl #3
   14704:	cmp	r0, r1, lsl #2
   14708:	adc	r2, r2, r2
   1470c:	subcs	r0, r0, r1, lsl #2
   14710:	cmp	r0, r1, lsl #1
   14714:	adc	r2, r2, r2
   14718:	subcs	r0, r0, r1, lsl #1
   1471c:	cmp	r0, r1
   14720:	adc	r2, r2, r2
   14724:	subcs	r0, r0, r1
   14728:	mov	r0, r2
   1472c:	bx	lr
   14730:	moveq	r0, #1
   14734:	movne	r0, #0
   14738:	bx	lr
   1473c:	clz	r2, r1
   14740:	rsb	r2, r2, #31
   14744:	lsr	r0, r0, r2
   14748:	bx	lr
   1474c:	cmp	r0, #0
   14750:	mvnne	r0, #0
   14754:	b	14e98 <gauss_disable_hash@@Base+0x948>
   14758:	cmp	r1, #0
   1475c:	beq	1474c <gauss_disable_hash@@Base+0x1fc>
   14760:	push	{r0, r1, lr}
   14764:	bl	1456c <gauss_disable_hash@@Base+0x1c>
   14768:	pop	{r1, r2, lr}
   1476c:	mul	r3, r2, r0
   14770:	sub	r1, r1, r3
   14774:	bx	lr
   14778:	eor	r1, r1, #-2147483648	; 0x80000000
   1477c:	b	14784 <gauss_disable_hash@@Base+0x234>
   14780:	eor	r3, r3, #-2147483648	; 0x80000000
   14784:	push	{r4, r5, lr}
   14788:	lsl	r4, r1, #1
   1478c:	lsl	r5, r3, #1
   14790:	teq	r4, r5
   14794:	teqeq	r0, r2
   14798:	orrsne	ip, r4, r0
   1479c:	orrsne	ip, r5, r2
   147a0:	mvnsne	ip, r4, asr #21
   147a4:	mvnsne	ip, r5, asr #21
   147a8:	beq	14994 <gauss_disable_hash@@Base+0x444>
   147ac:	lsr	r4, r4, #21
   147b0:	rsbs	r5, r4, r5, lsr #21
   147b4:	rsblt	r5, r5, #0
   147b8:	ble	147d8 <gauss_disable_hash@@Base+0x288>
   147bc:	add	r4, r4, r5
   147c0:	eor	r2, r0, r2
   147c4:	eor	r3, r1, r3
   147c8:	eor	r0, r2, r0
   147cc:	eor	r1, r3, r1
   147d0:	eor	r2, r0, r2
   147d4:	eor	r3, r1, r3
   147d8:	cmp	r5, #54	; 0x36
   147dc:	pophi	{r4, r5, pc}
   147e0:	tst	r1, #-2147483648	; 0x80000000
   147e4:	lsl	r1, r1, #12
   147e8:	mov	ip, #1048576	; 0x100000
   147ec:	orr	r1, ip, r1, lsr #12
   147f0:	beq	147fc <gauss_disable_hash@@Base+0x2ac>
   147f4:	rsbs	r0, r0, #0
   147f8:	rsc	r1, r1, #0
   147fc:	tst	r3, #-2147483648	; 0x80000000
   14800:	lsl	r3, r3, #12
   14804:	orr	r3, ip, r3, lsr #12
   14808:	beq	14814 <gauss_disable_hash@@Base+0x2c4>
   1480c:	rsbs	r2, r2, #0
   14810:	rsc	r3, r3, #0
   14814:	teq	r4, r5
   14818:	beq	1497c <gauss_disable_hash@@Base+0x42c>
   1481c:	sub	r4, r4, #1
   14820:	rsbs	lr, r5, #32
   14824:	blt	14840 <gauss_disable_hash@@Base+0x2f0>
   14828:	lsl	ip, r2, lr
   1482c:	adds	r0, r0, r2, lsr r5
   14830:	adc	r1, r1, #0
   14834:	adds	r0, r0, r3, lsl lr
   14838:	adcs	r1, r1, r3, asr r5
   1483c:	b	1485c <gauss_disable_hash@@Base+0x30c>
   14840:	sub	r5, r5, #32
   14844:	add	lr, lr, #32
   14848:	cmp	r2, #1
   1484c:	lsl	ip, r3, lr
   14850:	orrcs	ip, ip, #2
   14854:	adds	r0, r0, r3, asr r5
   14858:	adcs	r1, r1, r3, asr #31
   1485c:	and	r5, r1, #-2147483648	; 0x80000000
   14860:	bpl	14870 <gauss_disable_hash@@Base+0x320>
   14864:	rsbs	ip, ip, #0
   14868:	rscs	r0, r0, #0
   1486c:	rsc	r1, r1, #0
   14870:	cmp	r1, #1048576	; 0x100000
   14874:	bcc	148b4 <gauss_disable_hash@@Base+0x364>
   14878:	cmp	r1, #2097152	; 0x200000
   1487c:	bcc	1489c <gauss_disable_hash@@Base+0x34c>
   14880:	lsrs	r1, r1, #1
   14884:	rrxs	r0, r0
   14888:	rrx	ip, ip
   1488c:	add	r4, r4, #1
   14890:	lsl	r2, r4, #21
   14894:	cmn	r2, #4194304	; 0x400000
   14898:	bcs	149f4 <gauss_disable_hash@@Base+0x4a4>
   1489c:	cmp	ip, #-2147483648	; 0x80000000
   148a0:	lsrseq	ip, r0, #1
   148a4:	adcs	r0, r0, #0
   148a8:	adc	r1, r1, r4, lsl #20
   148ac:	orr	r1, r1, r5
   148b0:	pop	{r4, r5, pc}
   148b4:	lsls	ip, ip, #1
   148b8:	adcs	r0, r0, r0
   148bc:	adc	r1, r1, r1
   148c0:	tst	r1, #1048576	; 0x100000
   148c4:	sub	r4, r4, #1
   148c8:	bne	1489c <gauss_disable_hash@@Base+0x34c>
   148cc:	teq	r1, #0
   148d0:	moveq	r1, r0
   148d4:	moveq	r0, #0
   148d8:	clz	r3, r1
   148dc:	addeq	r3, r3, #32
   148e0:	sub	r3, r3, #11
   148e4:	subs	r2, r3, #32
   148e8:	bge	1490c <gauss_disable_hash@@Base+0x3bc>
   148ec:	adds	r2, r2, #12
   148f0:	ble	14908 <gauss_disable_hash@@Base+0x3b8>
   148f4:	add	ip, r2, #20
   148f8:	rsb	r2, r2, #12
   148fc:	lsl	r0, r1, ip
   14900:	lsr	r1, r1, r2
   14904:	b	1491c <gauss_disable_hash@@Base+0x3cc>
   14908:	add	r2, r2, #20
   1490c:	rsble	ip, r2, #32
   14910:	lsl	r1, r1, r2
   14914:	orrle	r1, r1, r0, lsr ip
   14918:	lslle	r0, r0, r2
   1491c:	subs	r4, r4, r3
   14920:	addge	r1, r1, r4, lsl #20
   14924:	orrge	r1, r1, r5
   14928:	popge	{r4, r5, pc}
   1492c:	mvn	r4, r4
   14930:	subs	r4, r4, #31
   14934:	bge	14970 <gauss_disable_hash@@Base+0x420>
   14938:	adds	r4, r4, #12
   1493c:	bgt	14958 <gauss_disable_hash@@Base+0x408>
   14940:	add	r4, r4, #20
   14944:	rsb	r2, r4, #32
   14948:	lsr	r0, r0, r4
   1494c:	orr	r0, r0, r1, lsl r2
   14950:	orr	r1, r5, r1, lsr r4
   14954:	pop	{r4, r5, pc}
   14958:	rsb	r4, r4, #12
   1495c:	rsb	r2, r4, #32
   14960:	lsr	r0, r0, r2
   14964:	orr	r0, r0, r1, lsl r4
   14968:	mov	r1, r5
   1496c:	pop	{r4, r5, pc}
   14970:	lsr	r0, r1, r4
   14974:	mov	r1, r5
   14978:	pop	{r4, r5, pc}
   1497c:	teq	r4, #0
   14980:	eor	r3, r3, #1048576	; 0x100000
   14984:	eoreq	r1, r1, #1048576	; 0x100000
   14988:	addeq	r4, r4, #1
   1498c:	subne	r5, r5, #1
   14990:	b	1481c <gauss_disable_hash@@Base+0x2cc>
   14994:	mvns	ip, r4, asr #21
   14998:	mvnsne	ip, r5, asr #21
   1499c:	beq	14a04 <gauss_disable_hash@@Base+0x4b4>
   149a0:	teq	r4, r5
   149a4:	teqeq	r0, r2
   149a8:	beq	149bc <gauss_disable_hash@@Base+0x46c>
   149ac:	orrs	ip, r4, r0
   149b0:	moveq	r1, r3
   149b4:	moveq	r0, r2
   149b8:	pop	{r4, r5, pc}
   149bc:	teq	r1, r3
   149c0:	movne	r1, #0
   149c4:	movne	r0, #0
   149c8:	popne	{r4, r5, pc}
   149cc:	lsrs	ip, r4, #21
   149d0:	bne	149e4 <gauss_disable_hash@@Base+0x494>
   149d4:	lsls	r0, r0, #1
   149d8:	adcs	r1, r1, r1
   149dc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   149e0:	pop	{r4, r5, pc}
   149e4:	adds	r4, r4, #4194304	; 0x400000
   149e8:	addcc	r1, r1, #1048576	; 0x100000
   149ec:	popcc	{r4, r5, pc}
   149f0:	and	r5, r1, #-2147483648	; 0x80000000
   149f4:	orr	r1, r5, #2130706432	; 0x7f000000
   149f8:	orr	r1, r1, #15728640	; 0xf00000
   149fc:	mov	r0, #0
   14a00:	pop	{r4, r5, pc}
   14a04:	mvns	ip, r4, asr #21
   14a08:	movne	r1, r3
   14a0c:	movne	r0, r2
   14a10:	mvnseq	ip, r5, asr #21
   14a14:	movne	r3, r1
   14a18:	movne	r2, r0
   14a1c:	orrs	r4, r0, r1, lsl #12
   14a20:	orrseq	r5, r2, r3, lsl #12
   14a24:	teqeq	r1, r3
   14a28:	orrne	r1, r1, #524288	; 0x80000
   14a2c:	pop	{r4, r5, pc}
   14a30:	teq	r0, #0
   14a34:	moveq	r1, #0
   14a38:	bxeq	lr
   14a3c:	push	{r4, r5, lr}
   14a40:	mov	r4, #1024	; 0x400
   14a44:	add	r4, r4, #50	; 0x32
   14a48:	mov	r5, #0
   14a4c:	mov	r1, #0
   14a50:	b	148cc <gauss_disable_hash@@Base+0x37c>
   14a54:	teq	r0, #0
   14a58:	moveq	r1, #0
   14a5c:	bxeq	lr
   14a60:	push	{r4, r5, lr}
   14a64:	mov	r4, #1024	; 0x400
   14a68:	add	r4, r4, #50	; 0x32
   14a6c:	ands	r5, r0, #-2147483648	; 0x80000000
   14a70:	rsbmi	r0, r0, #0
   14a74:	mov	r1, #0
   14a78:	b	148cc <gauss_disable_hash@@Base+0x37c>
   14a7c:	lsls	r2, r0, #1
   14a80:	asr	r1, r2, #3
   14a84:	rrx	r1, r1
   14a88:	lsl	r0, r2, #28
   14a8c:	andsne	r3, r2, #-16777216	; 0xff000000
   14a90:	teqne	r3, #-16777216	; 0xff000000
   14a94:	eorne	r1, r1, #939524096	; 0x38000000
   14a98:	bxne	lr
   14a9c:	bics	r2, r2, #-16777216	; 0xff000000
   14aa0:	bxeq	lr
   14aa4:	teq	r3, #-16777216	; 0xff000000
   14aa8:	orreq	r1, r1, #524288	; 0x80000
   14aac:	bxeq	lr
   14ab0:	push	{r4, r5, lr}
   14ab4:	mov	r4, #896	; 0x380
   14ab8:	and	r5, r1, #-2147483648	; 0x80000000
   14abc:	bic	r1, r1, #-2147483648	; 0x80000000
   14ac0:	b	148cc <gauss_disable_hash@@Base+0x37c>
   14ac4:	orrs	r2, r0, r1
   14ac8:	bxeq	lr
   14acc:	push	{r4, r5, lr}
   14ad0:	mov	r5, #0
   14ad4:	b	14af4 <gauss_disable_hash@@Base+0x5a4>
   14ad8:	orrs	r2, r0, r1
   14adc:	bxeq	lr
   14ae0:	push	{r4, r5, lr}
   14ae4:	ands	r5, r1, #-2147483648	; 0x80000000
   14ae8:	bpl	14af4 <gauss_disable_hash@@Base+0x5a4>
   14aec:	rsbs	r0, r0, #0
   14af0:	rsc	r1, r1, #0
   14af4:	mov	r4, #1024	; 0x400
   14af8:	add	r4, r4, #50	; 0x32
   14afc:	lsrs	ip, r1, #22
   14b00:	beq	14870 <gauss_disable_hash@@Base+0x320>
   14b04:	mov	r2, #3
   14b08:	lsrs	ip, ip, #3
   14b0c:	addne	r2, r2, #3
   14b10:	lsrs	ip, ip, #3
   14b14:	addne	r2, r2, #3
   14b18:	add	r2, r2, ip, lsr #3
   14b1c:	rsb	r3, r2, #32
   14b20:	lsl	ip, r0, r3
   14b24:	lsr	r0, r0, r2
   14b28:	orr	r0, r0, r1, lsl r3
   14b2c:	lsr	r1, r1, r2
   14b30:	add	r4, r4, r2
   14b34:	b	14870 <gauss_disable_hash@@Base+0x320>
   14b38:	eor	r0, r0, #-2147483648	; 0x80000000
   14b3c:	b	14b44 <gauss_disable_hash@@Base+0x5f4>
   14b40:	eor	r1, r1, #-2147483648	; 0x80000000
   14b44:	lsls	r2, r0, #1
   14b48:	lslsne	r3, r1, #1
   14b4c:	teqne	r2, r3
   14b50:	mvnsne	ip, r2, asr #24
   14b54:	mvnsne	ip, r3, asr #24
   14b58:	beq	14c50 <gauss_disable_hash@@Base+0x700>
   14b5c:	lsr	r2, r2, #24
   14b60:	rsbs	r3, r2, r3, lsr #24
   14b64:	addgt	r2, r2, r3
   14b68:	eorgt	r1, r0, r1
   14b6c:	eorgt	r0, r1, r0
   14b70:	eorgt	r1, r0, r1
   14b74:	rsblt	r3, r3, #0
   14b78:	cmp	r3, #25
   14b7c:	bxhi	lr
   14b80:	tst	r0, #-2147483648	; 0x80000000
   14b84:	orr	r0, r0, #8388608	; 0x800000
   14b88:	bic	r0, r0, #-16777216	; 0xff000000
   14b8c:	rsbne	r0, r0, #0
   14b90:	tst	r1, #-2147483648	; 0x80000000
   14b94:	orr	r1, r1, #8388608	; 0x800000
   14b98:	bic	r1, r1, #-16777216	; 0xff000000
   14b9c:	rsbne	r1, r1, #0
   14ba0:	teq	r2, r3
   14ba4:	beq	14c38 <gauss_disable_hash@@Base+0x6e8>
   14ba8:	sub	r2, r2, #1
   14bac:	adds	r0, r0, r1, asr r3
   14bb0:	rsb	r3, r3, #32
   14bb4:	lsl	r1, r1, r3
   14bb8:	and	r3, r0, #-2147483648	; 0x80000000
   14bbc:	bpl	14bc8 <gauss_disable_hash@@Base+0x678>
   14bc0:	rsbs	r1, r1, #0
   14bc4:	rsc	r0, r0, #0
   14bc8:	cmp	r0, #8388608	; 0x800000
   14bcc:	bcc	14c00 <gauss_disable_hash@@Base+0x6b0>
   14bd0:	cmp	r0, #16777216	; 0x1000000
   14bd4:	bcc	14bec <gauss_disable_hash@@Base+0x69c>
   14bd8:	lsrs	r0, r0, #1
   14bdc:	rrx	r1, r1
   14be0:	add	r2, r2, #1
   14be4:	cmp	r2, #254	; 0xfe
   14be8:	bcs	14ca4 <gauss_disable_hash@@Base+0x754>
   14bec:	cmp	r1, #-2147483648	; 0x80000000
   14bf0:	adc	r0, r0, r2, lsl #23
   14bf4:	biceq	r0, r0, #1
   14bf8:	orr	r0, r0, r3
   14bfc:	bx	lr
   14c00:	lsls	r1, r1, #1
   14c04:	adc	r0, r0, r0
   14c08:	tst	r0, #8388608	; 0x800000
   14c0c:	sub	r2, r2, #1
   14c10:	bne	14bec <gauss_disable_hash@@Base+0x69c>
   14c14:	clz	ip, r0
   14c18:	sub	ip, ip, #8
   14c1c:	subs	r2, r2, ip
   14c20:	lsl	r0, r0, ip
   14c24:	addge	r0, r0, r2, lsl #23
   14c28:	rsblt	r2, r2, #0
   14c2c:	orrge	r0, r0, r3
   14c30:	orrlt	r0, r3, r0, lsr r2
   14c34:	bx	lr
   14c38:	teq	r2, #0
   14c3c:	eor	r1, r1, #8388608	; 0x800000
   14c40:	eoreq	r0, r0, #8388608	; 0x800000
   14c44:	addeq	r2, r2, #1
   14c48:	subne	r3, r3, #1
   14c4c:	b	14ba8 <gauss_disable_hash@@Base+0x658>
   14c50:	lsl	r3, r1, #1
   14c54:	mvns	ip, r2, asr #24
   14c58:	mvnsne	ip, r3, asr #24
   14c5c:	beq	14cb0 <gauss_disable_hash@@Base+0x760>
   14c60:	teq	r2, r3
   14c64:	beq	14c74 <gauss_disable_hash@@Base+0x724>
   14c68:	teq	r2, #0
   14c6c:	moveq	r0, r1
   14c70:	bx	lr
   14c74:	teq	r0, r1
   14c78:	movne	r0, #0
   14c7c:	bxne	lr
   14c80:	tst	r2, #-16777216	; 0xff000000
   14c84:	bne	14c94 <gauss_disable_hash@@Base+0x744>
   14c88:	lsls	r0, r0, #1
   14c8c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   14c90:	bx	lr
   14c94:	adds	r2, r2, #33554432	; 0x2000000
   14c98:	addcc	r0, r0, #8388608	; 0x800000
   14c9c:	bxcc	lr
   14ca0:	and	r3, r0, #-2147483648	; 0x80000000
   14ca4:	orr	r0, r3, #2130706432	; 0x7f000000
   14ca8:	orr	r0, r0, #8388608	; 0x800000
   14cac:	bx	lr
   14cb0:	mvns	r2, r2, asr #24
   14cb4:	movne	r0, r1
   14cb8:	mvnseq	r3, r3, asr #24
   14cbc:	movne	r1, r0
   14cc0:	lsls	r2, r0, #9
   14cc4:	lslseq	r3, r1, #9
   14cc8:	teqeq	r0, r1
   14ccc:	orrne	r0, r0, #4194304	; 0x400000
   14cd0:	bx	lr
   14cd4:	mov	r3, #0
   14cd8:	b	14ce4 <gauss_disable_hash@@Base+0x794>
   14cdc:	ands	r3, r0, #-2147483648	; 0x80000000
   14ce0:	rsbmi	r0, r0, #0
   14ce4:	movs	ip, r0
   14ce8:	bxeq	lr
   14cec:	orr	r3, r3, #1258291200	; 0x4b000000
   14cf0:	mov	r1, r0
   14cf4:	mov	r0, #0
   14cf8:	b	14d3c <gauss_disable_hash@@Base+0x7ec>
   14cfc:	orrs	r2, r0, r1
   14d00:	bxeq	lr
   14d04:	mov	r3, #0
   14d08:	b	14d24 <gauss_disable_hash@@Base+0x7d4>
   14d0c:	orrs	r2, r0, r1
   14d10:	bxeq	lr
   14d14:	ands	r3, r1, #-2147483648	; 0x80000000
   14d18:	bpl	14d24 <gauss_disable_hash@@Base+0x7d4>
   14d1c:	rsbs	r0, r0, #0
   14d20:	rsc	r1, r1, #0
   14d24:	movs	ip, r1
   14d28:	moveq	ip, r0
   14d2c:	moveq	r1, r0
   14d30:	moveq	r0, #0
   14d34:	orr	r3, r3, #1526726656	; 0x5b000000
   14d38:	subeq	r3, r3, #268435456	; 0x10000000
   14d3c:	sub	r3, r3, #8388608	; 0x800000
   14d40:	clz	r2, ip
   14d44:	subs	r2, r2, #8
   14d48:	sub	r3, r3, r2, lsl #23
   14d4c:	blt	14d6c <gauss_disable_hash@@Base+0x81c>
   14d50:	add	r3, r3, r1, lsl r2
   14d54:	lsl	ip, r0, r2
   14d58:	rsb	r2, r2, #32
   14d5c:	cmp	ip, #-2147483648	; 0x80000000
   14d60:	adc	r0, r3, r0, lsr r2
   14d64:	biceq	r0, r0, #1
   14d68:	bx	lr
   14d6c:	add	r2, r2, #32
   14d70:	lsl	ip, r1, r2
   14d74:	rsb	r2, r2, #32
   14d78:	orrs	r0, r0, ip, lsl #1
   14d7c:	adc	r0, r3, r1, lsr r2
   14d80:	biceq	r0, r0, ip, lsr #31
   14d84:	bx	lr
   14d88:	cmp	r3, #0
   14d8c:	cmpeq	r2, #0
   14d90:	bne	14db4 <gauss_disable_hash@@Base+0x864>
   14d94:	cmp	r1, #0
   14d98:	movlt	r1, #-2147483648	; 0x80000000
   14d9c:	movlt	r0, #0
   14da0:	blt	14db0 <gauss_disable_hash@@Base+0x860>
   14da4:	cmpeq	r0, #0
   14da8:	mvnne	r1, #-2147483648	; 0x80000000
   14dac:	mvnne	r0, #0
   14db0:	b	14e98 <gauss_disable_hash@@Base+0x948>
   14db4:	sub	sp, sp, #8
   14db8:	push	{sp, lr}
   14dbc:	cmp	r1, #0
   14dc0:	blt	14de0 <gauss_disable_hash@@Base+0x890>
   14dc4:	cmp	r3, #0
   14dc8:	blt	14e14 <gauss_disable_hash@@Base+0x8c4>
   14dcc:	bl	14f18 <gauss_disable_hash@@Base+0x9c8>
   14dd0:	ldr	lr, [sp, #4]
   14dd4:	add	sp, sp, #8
   14dd8:	pop	{r2, r3}
   14ddc:	bx	lr
   14de0:	rsbs	r0, r0, #0
   14de4:	sbc	r1, r1, r1, lsl #1
   14de8:	cmp	r3, #0
   14dec:	blt	14e38 <gauss_disable_hash@@Base+0x8e8>
   14df0:	bl	14f18 <gauss_disable_hash@@Base+0x9c8>
   14df4:	ldr	lr, [sp, #4]
   14df8:	add	sp, sp, #8
   14dfc:	pop	{r2, r3}
   14e00:	rsbs	r0, r0, #0
   14e04:	sbc	r1, r1, r1, lsl #1
   14e08:	rsbs	r2, r2, #0
   14e0c:	sbc	r3, r3, r3, lsl #1
   14e10:	bx	lr
   14e14:	rsbs	r2, r2, #0
   14e18:	sbc	r3, r3, r3, lsl #1
   14e1c:	bl	14f18 <gauss_disable_hash@@Base+0x9c8>
   14e20:	ldr	lr, [sp, #4]
   14e24:	add	sp, sp, #8
   14e28:	pop	{r2, r3}
   14e2c:	rsbs	r0, r0, #0
   14e30:	sbc	r1, r1, r1, lsl #1
   14e34:	bx	lr
   14e38:	rsbs	r2, r2, #0
   14e3c:	sbc	r3, r3, r3, lsl #1
   14e40:	bl	14f18 <gauss_disable_hash@@Base+0x9c8>
   14e44:	ldr	lr, [sp, #4]
   14e48:	add	sp, sp, #8
   14e4c:	pop	{r2, r3}
   14e50:	rsbs	r2, r2, #0
   14e54:	sbc	r3, r3, r3, lsl #1
   14e58:	bx	lr
   14e5c:	cmp	r3, #0
   14e60:	cmpeq	r2, #0
   14e64:	bne	14e7c <gauss_disable_hash@@Base+0x92c>
   14e68:	cmp	r1, #0
   14e6c:	cmpeq	r0, #0
   14e70:	mvnne	r1, #0
   14e74:	mvnne	r0, #0
   14e78:	b	14e98 <gauss_disable_hash@@Base+0x948>
   14e7c:	sub	sp, sp, #8
   14e80:	push	{sp, lr}
   14e84:	bl	14f18 <gauss_disable_hash@@Base+0x9c8>
   14e88:	ldr	lr, [sp, #4]
   14e8c:	add	sp, sp, #8
   14e90:	pop	{r2, r3}
   14e94:	bx	lr
   14e98:	push	{r1, lr}
   14e9c:	mov	r0, #8
   14ea0:	bl	10fa8 <raise@plt>
   14ea4:	pop	{r1, pc}
   14ea8:	vmov	d7, r0, r1
   14eac:	vcmpe.f64	d7, #0.0
   14eb0:	vmrs	APSR_nzcv, fpscr
   14eb4:	bmi	14ebc <gauss_disable_hash@@Base+0x96c>
   14eb8:	b	14ed8 <gauss_disable_hash@@Base+0x988>
   14ebc:	push	{r4, lr}
   14ec0:	eor	r1, r1, #-2147483648	; 0x80000000
   14ec4:	bl	14ed8 <gauss_disable_hash@@Base+0x988>
   14ec8:	rsbs	r0, r0, #0
   14ecc:	rsc	r1, r1, #0
   14ed0:	pop	{r4, pc}
   14ed4:	andeq	r0, r0, r0
   14ed8:	vmov	d6, r0, r1
   14edc:	vldr	d7, [pc, #36]	; 14f08 <gauss_disable_hash@@Base+0x9b8>
   14ee0:	vldr	d5, [pc, #40]	; 14f10 <gauss_disable_hash@@Base+0x9c0>
   14ee4:	vmul.f64	d7, d6, d7
   14ee8:	vcvt.u32.f64	s14, d7
   14eec:	vcvt.f64.u32	d4, s14
   14ef0:	vmov	r1, s14
   14ef4:	vmls.f64	d6, d4, d5
   14ef8:	vcvt.u32.f64	s15, d6
   14efc:	vmov	r0, s15
   14f00:	bx	lr
   14f04:	nop			; (mov r0, r0)
   14f08:	andeq	r0, r0, r0
   14f0c:	ldclcc	0, cr0, [r0]
   14f10:	andeq	r0, r0, r0
   14f14:	mvnsmi	r0, r0
   14f18:	cmp	r1, r3
   14f1c:	cmpeq	r0, r2
   14f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f24:	mov	r4, r0
   14f28:	movcc	r0, #0
   14f2c:	mov	r5, r1
   14f30:	ldr	lr, [sp, #36]	; 0x24
   14f34:	movcc	r1, r0
   14f38:	bcc	15034 <gauss_disable_hash@@Base+0xae4>
   14f3c:	cmp	r3, #0
   14f40:	clzeq	ip, r2
   14f44:	clzne	ip, r3
   14f48:	addeq	ip, ip, #32
   14f4c:	cmp	r5, #0
   14f50:	clzeq	r1, r4
   14f54:	addeq	r1, r1, #32
   14f58:	clzne	r1, r5
   14f5c:	sub	ip, ip, r1
   14f60:	sub	sl, ip, #32
   14f64:	lsl	r9, r3, ip
   14f68:	rsb	fp, ip, #32
   14f6c:	orr	r9, r9, r2, lsl sl
   14f70:	orr	r9, r9, r2, lsr fp
   14f74:	lsl	r8, r2, ip
   14f78:	cmp	r5, r9
   14f7c:	cmpeq	r4, r8
   14f80:	movcc	r0, #0
   14f84:	movcc	r1, r0
   14f88:	bcc	14fa4 <gauss_disable_hash@@Base+0xa54>
   14f8c:	mov	r0, #1
   14f90:	subs	r4, r4, r8
   14f94:	lsl	r1, r0, sl
   14f98:	orr	r1, r1, r0, lsr fp
   14f9c:	lsl	r0, r0, ip
   14fa0:	sbc	r5, r5, r9
   14fa4:	cmp	ip, #0
   14fa8:	beq	15034 <gauss_disable_hash@@Base+0xae4>
   14fac:	lsr	r6, r8, #1
   14fb0:	orr	r6, r6, r9, lsl #31
   14fb4:	lsr	r7, r9, #1
   14fb8:	mov	r2, ip
   14fbc:	b	14fe0 <gauss_disable_hash@@Base+0xa90>
   14fc0:	subs	r3, r4, r6
   14fc4:	sbc	r8, r5, r7
   14fc8:	adds	r3, r3, r3
   14fcc:	adc	r8, r8, r8
   14fd0:	adds	r4, r3, #1
   14fd4:	adc	r5, r8, #0
   14fd8:	subs	r2, r2, #1
   14fdc:	beq	14ffc <gauss_disable_hash@@Base+0xaac>
   14fe0:	cmp	r5, r7
   14fe4:	cmpeq	r4, r6
   14fe8:	bcs	14fc0 <gauss_disable_hash@@Base+0xa70>
   14fec:	adds	r4, r4, r4
   14ff0:	adc	r5, r5, r5
   14ff4:	subs	r2, r2, #1
   14ff8:	bne	14fe0 <gauss_disable_hash@@Base+0xa90>
   14ffc:	lsr	r3, r4, ip
   15000:	orr	r3, r3, r5, lsl fp
   15004:	lsr	r2, r5, ip
   15008:	orr	r3, r3, r5, lsr sl
   1500c:	adds	r0, r0, r4
   15010:	mov	r4, r3
   15014:	lsl	r3, r2, ip
   15018:	orr	r3, r3, r4, lsl sl
   1501c:	lsl	ip, r4, ip
   15020:	orr	r3, r3, r4, lsr fp
   15024:	adc	r1, r1, r5
   15028:	subs	r0, r0, ip
   1502c:	mov	r5, r2
   15030:	sbc	r1, r1, r3
   15034:	cmp	lr, #0
   15038:	strdne	r4, [lr]
   1503c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015040 <__libc_csu_init@@Base>:
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15044:	mov	r7, r0
   15048:	ldr	r6, [pc, #72]	; 15098 <__libc_csu_init@@Base+0x58>
   1504c:	ldr	r5, [pc, #72]	; 1509c <__libc_csu_init@@Base+0x5c>
   15050:	add	r6, pc, r6
   15054:	add	r5, pc, r5
   15058:	sub	r6, r6, r5
   1505c:	mov	r8, r1
   15060:	mov	r9, r2
   15064:	bl	10f7c <calloc@plt-0x20>
   15068:	asrs	r6, r6, #2
   1506c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15070:	mov	r4, #0
   15074:	add	r4, r4, #1
   15078:	ldr	r3, [r5], #4
   1507c:	mov	r2, r9
   15080:	mov	r1, r8
   15084:	mov	r0, r7
   15088:	blx	r3
   1508c:	cmp	r6, r4
   15090:	bne	15074 <__libc_csu_init@@Base+0x34>
   15094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15098:	andeq	r0, r1, ip, ror #27
   1509c:	andeq	r0, r1, r0, ror #27

000150a0 <__libc_csu_fini@@Base>:
   150a0:	bx	lr

Disassembly of section .fini:

000150a4 <.fini>:
   150a4:	push	{r3, lr}
   150a8:	pop	{r3, pc}
