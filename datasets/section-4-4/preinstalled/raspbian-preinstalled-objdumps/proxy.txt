
raspbian-preinstalled/proxy:     file format elf32-littlearm


Disassembly of section .init:

00010840 <.init>:
   10840:	push	{r3, lr}
   10844:	bl	10a60 <_start@@Base+0x3c>
   10848:	pop	{r3, pc}

Disassembly of section .plt:

0001084c <px_proxy_factory_get_proxies@plt-0x14>:
   1084c:	push	{lr}		; (str lr, [sp, #-4]!)
   10850:	ldr	lr, [pc, #4]	; 1085c <px_proxy_factory_get_proxies@plt-0x4>
   10854:	add	lr, pc, lr
   10858:	ldr	pc, [lr, #8]!
   1085c:	andeq	r0, r1, r8, asr r7

00010860 <px_proxy_factory_get_proxies@plt>:
   10860:	add	ip, pc, #0, 12
   10864:	add	ip, ip, #16, 20	; 0x10000
   10868:	ldr	pc, [ip, #1880]!	; 0x758

0001086c <free@plt>:
   1086c:	add	ip, pc, #0, 12
   10870:	add	ip, ip, #16, 20	; 0x10000
   10874:	ldr	pc, [ip, #1872]!	; 0x750

00010878 <putchar@plt>:
   10878:	add	ip, pc, #0, 12
   1087c:	add	ip, ip, #16, 20	; 0x10000
   10880:	ldr	pc, [ip, #1864]!	; 0x748

00010884 <px_proxy_factory_new@plt>:
   10884:	add	ip, pc, #0, 12
   10888:	add	ip, ip, #16, 20	; 0x10000
   1088c:	ldr	pc, [ip, #1856]!	; 0x740

00010890 <abort@plt>:
   10890:	add	ip, pc, #0, 12
   10894:	add	ip, ip, #16, 20	; 0x10000
   10898:	ldr	pc, [ip, #1848]!	; 0x738

0001089c <__stack_chk_fail@plt>:
   1089c:	add	ip, pc, #0, 12
   108a0:	add	ip, ip, #16, 20	; 0x10000
   108a4:	ldr	pc, [ip, #1840]!	; 0x730

000108a8 <calloc@plt>:
   108a8:	add	ip, pc, #0, 12
   108ac:	add	ip, ip, #16, 20	; 0x10000
   108b0:	ldr	pc, [ip, #1832]!	; 0x728

000108b4 <fgets@plt>:
   108b4:	add	ip, pc, #0, 12
   108b8:	add	ip, ip, #16, 20	; 0x10000
   108bc:	ldr	pc, [ip, #1824]!	; 0x720

000108c0 <fwrite@plt>:
   108c0:	add	ip, pc, #0, 12
   108c4:	add	ip, ip, #16, 20	; 0x10000
   108c8:	ldr	pc, [ip, #1816]!	; 0x718

000108cc <strlen@plt>:
   108cc:	add	ip, pc, #0, 12
   108d0:	add	ip, ip, #16, 20	; 0x10000
   108d4:	ldr	pc, [ip, #1808]!	; 0x710

000108d8 <px_proxy_factory_free@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #16, 20	; 0x10000
   108e0:	ldr	pc, [ip, #1800]!	; 0x708

000108e4 <__libc_start_main@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #16, 20	; 0x10000
   108ec:	ldr	pc, [ip, #1792]!	; 0x700

000108f0 <__gmon_start__@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #16, 20	; 0x10000
   108f8:	ldr	pc, [ip, #1784]!	; 0x6f8

000108fc <__printf_chk@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #16, 20	; 0x10000
   10904:	ldr	pc, [ip, #1776]!	; 0x6f0

Disassembly of section .text:

00010908 <main@@Base>:
   10908:	push	{r4, r5, r6, r7, r8, lr}
   1090c:	sub	sp, sp, #102400	; 0x19000
   10910:	ldr	r7, [pc, #252]	; 10a14 <main@@Base+0x10c>
   10914:	sub	sp, sp, #8
   10918:	add	r2, sp, #102400	; 0x19000
   1091c:	ldr	r3, [r7]
   10920:	add	r2, r2, #4
   10924:	mov	r8, r0
   10928:	mov	r4, r1
   1092c:	str	r3, [r2]
   10930:	bl	10884 <px_proxy_factory_new@plt>
   10934:	subs	r5, r0, #0
   10938:	beq	109f0 <main@@Base+0xe8>
   1093c:	cmp	r8, #1
   10940:	ble	10994 <main@@Base+0x8c>
   10944:	sub	r6, r4, #4
   10948:	add	r6, r6, r8, lsl #2
   1094c:	ldr	r1, [r4, #4]!
   10950:	mov	r0, r5
   10954:	bl	10860 <px_proxy_factory_get_proxies@plt>
   10958:	bl	10b1c <print_proxies@@Base>
   1095c:	cmp	r4, r6
   10960:	bne	1094c <main@@Base+0x44>
   10964:	mov	r0, r5
   10968:	bl	108d8 <px_proxy_factory_free@plt>
   1096c:	mov	r0, #0
   10970:	add	r3, sp, #102400	; 0x19000
   10974:	add	r3, r3, #4
   10978:	ldr	r2, [r3]
   1097c:	ldr	r3, [r7]
   10980:	cmp	r2, r3
   10984:	bne	10a10 <main@@Base+0x108>
   10988:	add	sp, sp, #102400	; 0x19000
   1098c:	add	sp, sp, #8
   10990:	pop	{r4, r5, r6, r7, r8, pc}
   10994:	mov	r6, #0
   10998:	strb	r6, [sp, #4]
   1099c:	ldr	r4, [pc, #116]	; 10a18 <main@@Base+0x110>
   109a0:	b	109d4 <main@@Base+0xcc>
   109a4:	add	r0, sp, #4
   109a8:	bl	108cc <strlen@plt>
   109ac:	add	r3, sp, #8
   109b0:	add	r1, sp, #4
   109b4:	sub	r0, r0, #1
   109b8:	add	r0, r3, r0
   109bc:	ldrb	r3, [r0, #-4]
   109c0:	cmp	r3, #10
   109c4:	strbeq	r6, [r0, #-4]
   109c8:	mov	r0, r5
   109cc:	bl	10860 <px_proxy_factory_get_proxies@plt>
   109d0:	bl	10b1c <print_proxies@@Base>
   109d4:	ldr	r2, [r4]
   109d8:	mov	r1, #102400	; 0x19000
   109dc:	add	r0, sp, #4
   109e0:	bl	108b4 <fgets@plt>
   109e4:	cmp	r0, #0
   109e8:	bne	109a4 <main@@Base+0x9c>
   109ec:	b	10964 <main@@Base+0x5c>
   109f0:	ldr	r3, [pc, #36]	; 10a1c <main@@Base+0x114>
   109f4:	mov	r2, #27
   109f8:	mov	r1, #1
   109fc:	ldr	r3, [r3]
   10a00:	ldr	r0, [pc, #24]	; 10a20 <main@@Base+0x118>
   10a04:	bl	108c0 <fwrite@plt>
   10a08:	mov	r0, #1
   10a0c:	b	10970 <main@@Base+0x68>
   10a10:	bl	1089c <__stack_chk_fail@plt>
   10a14:	andeq	r0, r2, r8, lsr #29
   10a18:	andeq	r1, r2, r8
   10a1c:	andeq	r1, r2, r0, lsl r0
   10a20:	andeq	r0, r1, r8, lsl ip

00010a24 <_start@@Base>:
   10a24:	mov	fp, #0
   10a28:	mov	lr, #0
   10a2c:	pop	{r1}		; (ldr r1, [sp], #4)
   10a30:	mov	r2, sp
   10a34:	push	{r2}		; (str r2, [sp, #-4]!)
   10a38:	push	{r0}		; (str r0, [sp, #-4]!)
   10a3c:	ldr	ip, [pc, #16]	; 10a54 <_start@@Base+0x30>
   10a40:	push	{ip}		; (str ip, [sp, #-4]!)
   10a44:	ldr	r0, [pc, #12]	; 10a58 <_start@@Base+0x34>
   10a48:	ldr	r3, [pc, #12]	; 10a5c <_start@@Base+0x38>
   10a4c:	bl	108e4 <__libc_start_main@plt>
   10a50:	bl	10890 <abort@plt>
   10a54:	strdeq	r0, [r1], -r8
   10a58:	andeq	r0, r1, r8, lsl #18
   10a5c:	muleq	r1, r8, fp
   10a60:	ldr	r3, [pc, #20]	; 10a7c <_start@@Base+0x58>
   10a64:	ldr	r2, [pc, #20]	; 10a80 <_start@@Base+0x5c>
   10a68:	add	r3, pc, r3
   10a6c:	ldr	r2, [r3, r2]
   10a70:	cmp	r2, #0
   10a74:	bxeq	lr
   10a78:	b	108f0 <__gmon_start__@plt>
   10a7c:	andeq	r0, r1, r4, asr #10
   10a80:	andeq	r0, r0, r4, asr #32
   10a84:	ldr	r0, [pc, #24]	; 10aa4 <_start@@Base+0x80>
   10a88:	ldr	r3, [pc, #24]	; 10aa8 <_start@@Base+0x84>
   10a8c:	cmp	r3, r0
   10a90:	bxeq	lr
   10a94:	ldr	r3, [pc, #16]	; 10aac <_start@@Base+0x88>
   10a98:	cmp	r3, #0
   10a9c:	bxeq	lr
   10aa0:	bx	r3
   10aa4:	andeq	r1, r2, r8
   10aa8:	andeq	r1, r2, r8
   10aac:	andeq	r0, r0, r0
   10ab0:	ldr	r0, [pc, #36]	; 10adc <_start@@Base+0xb8>
   10ab4:	ldr	r1, [pc, #36]	; 10ae0 <_start@@Base+0xbc>
   10ab8:	sub	r1, r1, r0
   10abc:	asr	r1, r1, #2
   10ac0:	add	r1, r1, r1, lsr #31
   10ac4:	asrs	r1, r1, #1
   10ac8:	bxeq	lr
   10acc:	ldr	r3, [pc, #16]	; 10ae4 <_start@@Base+0xc0>
   10ad0:	cmp	r3, #0
   10ad4:	bxeq	lr
   10ad8:	bx	r3
   10adc:	andeq	r1, r2, r8
   10ae0:	andeq	r1, r2, r8
   10ae4:	andeq	r0, r0, r0
   10ae8:	push	{r4, lr}
   10aec:	ldr	r4, [pc, #24]	; 10b0c <_start@@Base+0xe8>
   10af0:	ldrb	r3, [r4]
   10af4:	cmp	r3, #0
   10af8:	popne	{r4, pc}
   10afc:	bl	10a84 <_start@@Base+0x60>
   10b00:	mov	r3, #1
   10b04:	strb	r3, [r4]
   10b08:	pop	{r4, pc}
   10b0c:	andeq	r1, r2, r4, lsl r0
   10b10:	b	10ab0 <_start@@Base+0x8c>

00010b14 <malloc0@@Base>:
   10b14:	mov	r1, #1
   10b18:	b	108a8 <calloc@plt>

00010b1c <print_proxies@@Base>:
   10b1c:	push	{r4, r5, r6, r7, r8, lr}
   10b20:	subs	r8, r0, #0
   10b24:	beq	10b80 <print_proxies@@Base+0x64>
   10b28:	ldr	r2, [r8]
   10b2c:	cmp	r2, #0
   10b30:	beq	10b74 <print_proxies@@Base+0x58>
   10b34:	ldr	r7, [pc, #80]	; 10b8c <print_proxies@@Base+0x70>
   10b38:	ldr	r6, [pc, #80]	; 10b90 <print_proxies@@Base+0x74>
   10b3c:	ldr	r5, [pc, #80]	; 10b94 <print_proxies@@Base+0x78>
   10b40:	mov	r4, r8
   10b44:	ldr	r3, [r4, #4]
   10b48:	mov	r1, r5
   10b4c:	cmp	r3, #0
   10b50:	movne	r3, r7
   10b54:	moveq	r3, r6
   10b58:	mov	r0, #1
   10b5c:	bl	108fc <__printf_chk@plt>
   10b60:	ldr	r0, [r4]
   10b64:	bl	1086c <free@plt>
   10b68:	ldr	r2, [r4, #4]!
   10b6c:	cmp	r2, #0
   10b70:	bne	10b44 <print_proxies@@Base+0x28>
   10b74:	mov	r0, r8
   10b78:	pop	{r4, r5, r6, r7, r8, lr}
   10b7c:	b	1086c <free@plt>
   10b80:	mov	r0, #10
   10b84:	pop	{r4, r5, r6, r7, r8, lr}
   10b88:	b	10878 <putchar@plt>
   10b8c:	andeq	r0, r1, r8, lsl #24
   10b90:	andeq	r0, r1, ip, lsl #24
   10b94:	andeq	r0, r1, r0, lsl ip

00010b98 <__libc_csu_init@@Base>:
   10b98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b9c:	mov	r7, r0
   10ba0:	ldr	r6, [pc, #72]	; 10bf0 <__libc_csu_init@@Base+0x58>
   10ba4:	ldr	r5, [pc, #72]	; 10bf4 <__libc_csu_init@@Base+0x5c>
   10ba8:	add	r6, pc, r6
   10bac:	add	r5, pc, r5
   10bb0:	sub	r6, r6, r5
   10bb4:	mov	r8, r1
   10bb8:	mov	r9, r2
   10bbc:	bl	10840 <px_proxy_factory_get_proxies@plt-0x20>
   10bc0:	asrs	r6, r6, #2
   10bc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bc8:	mov	r4, #0
   10bcc:	add	r4, r4, #1
   10bd0:	ldr	r3, [r5], #4
   10bd4:	mov	r2, r9
   10bd8:	mov	r1, r8
   10bdc:	mov	r0, r7
   10be0:	blx	r3
   10be4:	cmp	r6, r4
   10be8:	bne	10bcc <__libc_csu_init@@Base+0x34>
   10bec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bf0:	strdeq	r0, [r1], -r4
   10bf4:	andeq	r0, r1, ip, ror #5

00010bf8 <__libc_csu_fini@@Base>:
   10bf8:	bx	lr

Disassembly of section .fini:

00010bfc <.fini>:
   10bfc:	push	{r3, lr}
   10c00:	pop	{r3, pc}
