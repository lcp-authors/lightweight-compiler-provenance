
raspbian-preinstalled/csplit:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	122e8 <__assert_fail@plt+0xf8c>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fdopen@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fdopen@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0001102c <fdopen@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <fputs_unlocked@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <raise@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <strcmp@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <read@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <fflush@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <sigprocmask@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <free@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <_exit@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <memcpy@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__strtoull_internal@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <mbsinit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <signal@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <fwrite_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <dcgettext@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <__stack_chk_fail@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #24, 20	; 0x18000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <unlink@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #24, 20	; 0x18000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <dup2@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #24, 20	; 0x18000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <realloc@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #24, 20	; 0x18000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <sigismember@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #24, 20	; 0x18000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <textdomain@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #24, 20	; 0x18000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <iswprint@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #24, 20	; 0x18000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <sigaction@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #24, 20	; 0x18000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <fwrite@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #24, 20	; 0x18000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <lseek64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #24, 20	; 0x18000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <__ctype_get_mb_cur_max@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #24, 20	; 0x18000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <strcpy@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #24, 20	; 0x18000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <__fpending@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #24, 20	; 0x18000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <mbrtowc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #24, 20	; 0x18000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <error@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #24, 20	; 0x18000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <open64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #24, 20	; 0x18000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <malloc@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #24, 20	; 0x18000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <sigaddset@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #24, 20	; 0x18000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__libc_start_main@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #24, 20	; 0x18000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <__freading@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #24, 20	; 0x18000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__gmon_start__@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #24, 20	; 0x18000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <getopt_long@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #24, 20	; 0x18000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <__ctype_b_loc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #24, 20	; 0x18000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <exit@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #24, 20	; 0x18000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strlen@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #24, 20	; 0x18000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <strchr@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #24, 20	; 0x18000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <re_search@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #24, 20	; 0x18000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #24, 20	; 0x18000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__sprintf_chk@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #24, 20	; 0x18000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <__cxa_atexit@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #24, 20	; 0x18000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <memset@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #24, 20	; 0x18000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <__printf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #24, 20	; 0x18000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <fileno@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #24, 20	; 0x18000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <__fprintf_chk@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #24, 20	; 0x18000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <memchr@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #24, 20	; 0x18000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fclose@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #24, 20	; 0x18000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <fseeko64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #24, 20	; 0x18000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <fcntl64@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #24, 20	; 0x18000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <setlocale@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #24, 20	; 0x18000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <sigemptyset@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #24, 20	; 0x18000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <strrchr@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #24, 20	; 0x18000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <nl_langinfo@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #24, 20	; 0x18000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <fputc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #24, 20	; 0x18000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <__strtoll_internal@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #24, 20	; 0x18000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <fopen64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #24, 20	; 0x18000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <bindtextdomain@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #24, 20	; 0x18000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <re_compile_pattern@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #24, 20	; 0x18000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <strncmp@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #24, 20	; 0x18000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <abort@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #24, 20	; 0x18000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <close@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #24, 20	; 0x18000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <__snprintf_chk@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #24, 20	; 0x18000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__assert_fail@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #24, 20	; 0x18000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

Disassembly of section .text:

00011368 <.text>:
   11368:	ldr	r3, [pc, #3716]	; 121f4 <__assert_fail@plt+0xe98>
   1136c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11370:	sub	sp, sp, #260	; 0x104
   11374:	ldr	r3, [r3]
   11378:	mov	sl, r0
   1137c:	ldr	r0, [r1]
   11380:	str	r3, [sp, #252]	; 0xfc
   11384:	mov	r9, r1
   11388:	bl	13754 <__assert_fail@plt+0x23f8>
   1138c:	ldr	r1, [pc, #3684]	; 121f8 <__assert_fail@plt+0xe9c>
   11390:	mov	r0, #6
   11394:	bl	112c0 <setlocale@plt>
   11398:	ldr	r1, [pc, #3676]	; 121fc <__assert_fail@plt+0xea0>
   1139c:	ldr	r0, [pc, #3676]	; 12200 <__assert_fail@plt+0xea4>
   113a0:	bl	11314 <bindtextdomain@plt>
   113a4:	ldr	r0, [pc, #3668]	; 12200 <__assert_fail@plt+0xea4>
   113a8:	ldr	fp, [pc, #3668]	; 12204 <__assert_fail@plt+0xea8>
   113ac:	bl	11134 <textdomain@plt>
   113b0:	ldr	r6, [pc, #3664]	; 12208 <__assert_fail@plt+0xeac>
   113b4:	ldr	r0, [pc, #3664]	; 1220c <__assert_fail@plt+0xeb0>
   113b8:	ldr	r5, [pc, #3664]	; 12210 <__assert_fail@plt+0xeb4>
   113bc:	ldr	r7, [pc, #3664]	; 12214 <__assert_fail@plt+0xeb8>
   113c0:	ldr	r8, [pc, #3664]	; 12218 <__assert_fail@plt+0xebc>
   113c4:	bl	18174 <__assert_fail@plt+0x6e18>
   113c8:	ldr	r2, [pc, #3660]	; 1221c <__assert_fail@plt+0xec0>
   113cc:	mov	r3, #0
   113d0:	mov	r1, #1
   113d4:	strb	r1, [fp, #144]	; 0x90
   113d8:	str	r9, [fp, #224]	; 0xe0
   113dc:	str	r3, [fp, #180]	; 0xb4
   113e0:	str	r2, [fp, #4]
   113e4:	str	r3, [fp, #172]	; 0xac
   113e8:	strb	r3, [fp, #169]	; 0xa9
   113ec:	strb	r3, [fp, #228]	; 0xe4
   113f0:	mov	r4, #0
   113f4:	str	r4, [sp]
   113f8:	mov	r3, r6
   113fc:	mov	r2, r5
   11400:	mov	r1, r9
   11404:	mov	r0, sl
   11408:	bl	111f4 <getopt_long@plt>
   1140c:	cmn	r0, #1
   11410:	beq	11538 <__assert_fail@plt+0x1dc>
   11414:	cmp	r0, #107	; 0x6b
   11418:	beq	11530 <__assert_fail@plt+0x1d4>
   1141c:	ble	11440 <__assert_fail@plt+0xe4>
   11420:	cmp	r0, #115	; 0x73
   11424:	beq	11524 <__assert_fail@plt+0x1c8>
   11428:	ble	11474 <__assert_fail@plt+0x118>
   1142c:	cmp	r0, #122	; 0x7a
   11430:	bne	11460 <__assert_fail@plt+0x104>
   11434:	mov	r3, #1
   11438:	strb	r3, [fp, #168]	; 0xa8
   1143c:	b	113f0 <__assert_fail@plt+0x94>
   11440:	cmn	r0, #2
   11444:	beq	11f54 <__assert_fail@plt+0xbf8>
   11448:	ble	114dc <__assert_fail@plt+0x180>
   1144c:	cmp	r0, #98	; 0x62
   11450:	bne	114c8 <__assert_fail@plt+0x16c>
   11454:	ldr	r3, [r7]
   11458:	str	r3, [fp, #8]
   1145c:	b	113f0 <__assert_fail@plt+0x94>
   11460:	cmp	r0, #256	; 0x100
   11464:	bne	11f84 <__assert_fail@plt+0xc28>
   11468:	mov	r3, #1
   1146c:	strb	r3, [fp, #228]	; 0xe4
   11470:	b	113f0 <__assert_fail@plt+0x94>
   11474:	cmp	r0, #110	; 0x6e
   11478:	bne	1151c <__assert_fail@plt+0x1c0>
   1147c:	ldr	r3, [r7]
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #3476]	; 12220 <__assert_fail@plt+0xec4>
   11488:	mov	r0, r4
   1148c:	str	r3, [sp, #24]
   11490:	bl	110ec <dcgettext@plt>
   11494:	mvn	r2, #-2147483648	; 0x80000000
   11498:	mov	r3, #0
   1149c:	ldr	r1, [pc, #3412]	; 121f8 <__assert_fail@plt+0xe9c>
   114a0:	strd	r2, [sp]
   114a4:	str	r4, [sp, #16]
   114a8:	str	r1, [sp, #8]
   114ac:	mov	r2, #0
   114b0:	mov	r3, #0
   114b4:	str	r0, [sp, #12]
   114b8:	ldr	r0, [sp, #24]
   114bc:	bl	16358 <__assert_fail@plt+0x4ffc>
   114c0:	str	r0, [r8]
   114c4:	b	113f0 <__assert_fail@plt+0x94>
   114c8:	cmp	r0, #102	; 0x66
   114cc:	bne	11f84 <__assert_fail@plt+0xc28>
   114d0:	ldr	r3, [r7]
   114d4:	str	r3, [fp, #4]
   114d8:	b	113f0 <__assert_fail@plt+0x94>
   114dc:	cmn	r0, #3
   114e0:	bne	11f84 <__assert_fail@plt+0xc28>
   114e4:	ldr	r3, [pc, #3384]	; 12224 <__assert_fail@plt+0xec8>
   114e8:	ldr	r0, [pc, #3384]	; 12228 <__assert_fail@plt+0xecc>
   114ec:	ldr	r1, [pc, #3384]	; 1222c <__assert_fail@plt+0xed0>
   114f0:	ldr	r2, [pc, #3384]	; 12230 <__assert_fail@plt+0xed4>
   114f4:	str	r4, [sp, #8]
   114f8:	ldr	r0, [r0]
   114fc:	ldr	r3, [r3]
   11500:	str	r1, [sp, #4]
   11504:	str	r2, [sp]
   11508:	ldr	r1, [pc, #3364]	; 12234 <__assert_fail@plt+0xed8>
   1150c:	ldr	r2, [pc, #3364]	; 12238 <__assert_fail@plt+0xedc>
   11510:	bl	15e98 <__assert_fail@plt+0x4b3c>
   11514:	mov	r0, r4
   11518:	bl	1120c <exit@plt>
   1151c:	cmp	r0, #113	; 0x71
   11520:	bne	11f84 <__assert_fail@plt+0xc28>
   11524:	mov	r3, #1
   11528:	strb	r3, [fp, #169]	; 0xa9
   1152c:	b	113f0 <__assert_fail@plt+0x94>
   11530:	strb	r4, [fp, #144]	; 0x90
   11534:	b	113f0 <__assert_fail@plt+0x94>
   11538:	ldr	r5, [pc, #3324]	; 1223c <__assert_fail@plt+0xee0>
   1153c:	ldr	r3, [r5]
   11540:	sub	r2, sl, r3
   11544:	cmp	r2, #1
   11548:	ble	11f5c <__assert_fail@plt+0xc00>
   1154c:	ldr	r0, [fp, #4]
   11550:	bl	11218 <strlen@plt>
   11554:	ldr	r3, [fp, #8]
   11558:	cmp	r3, #0
   1155c:	mov	r6, r0
   11560:	beq	116dc <__assert_fail@plt+0x380>
   11564:	ldr	r0, [fp, #8]
   11568:	ldrb	r1, [r0]
   1156c:	cmp	r1, #0
   11570:	movne	ip, r0
   11574:	movne	lr, #117	; 0x75
   11578:	bne	1158c <__assert_fail@plt+0x230>
   1157c:	b	11f34 <__assert_fail@plt+0xbd8>
   11580:	cmp	r1, #0
   11584:	mov	ip, r3
   11588:	beq	1170c <__assert_fail@plt+0x3b0>
   1158c:	cmp	r1, #37	; 0x25
   11590:	add	r3, ip, #1
   11594:	ldrb	r1, [ip, #1]
   11598:	bne	11580 <__assert_fail@plt+0x224>
   1159c:	cmp	r1, #37	; 0x25
   115a0:	moveq	r3, ip
   115a4:	ldrbeq	r1, [r3, #2]!
   115a8:	beq	11580 <__assert_fail@plt+0x224>
   115ac:	cmp	r4, #0
   115b0:	bne	12178 <__assert_fail@plt+0xe1c>
   115b4:	mov	r2, r3
   115b8:	mov	r3, r2
   115bc:	ldrb	r1, [r2], #1
   115c0:	sub	ip, r1, #35	; 0x23
   115c4:	cmp	ip, #13
   115c8:	ldrls	pc, [pc, ip, lsl #2]
   115cc:	b	1160c <__assert_fail@plt+0x2b0>
   115d0:	andeq	r1, r1, ip, lsl #13
   115d4:	andeq	r1, r1, ip, lsl #12
   115d8:	andeq	r1, r1, ip, lsl #12
   115dc:	andeq	r1, r1, ip, lsl #12
   115e0:	andeq	r1, r1, r4, lsl #13
   115e4:	andeq	r1, r1, ip, lsl #12
   115e8:	andeq	r1, r1, ip, lsl #12
   115ec:	andeq	r1, r1, ip, lsl #12
   115f0:	andeq	r1, r1, ip, lsl #12
   115f4:	andeq	r1, r1, ip, lsl #12
   115f8:			; <UNDEFINED> instruction: 0x000115b8
   115fc:	andeq	r1, r1, ip, lsl #12
   11600:	andeq	r1, r1, ip, lsl #12
   11604:			; <UNDEFINED> instruction: 0x000115b8
   11608:	ldrb	r1, [r3, #1]!
   1160c:	sub	r2, r1, #48	; 0x30
   11610:	cmp	r2, #9
   11614:	bls	11608 <__assert_fail@plt+0x2ac>
   11618:	cmp	r1, #46	; 0x2e
   1161c:	beq	11e74 <__assert_fail@plt+0xb18>
   11620:	ldrb	r7, [r3]
   11624:	cmp	r7, #105	; 0x69
   11628:	beq	116a4 <__assert_fail@plt+0x348>
   1162c:	bls	11694 <__assert_fail@plt+0x338>
   11630:	cmp	r7, #117	; 0x75
   11634:	beq	11704 <__assert_fail@plt+0x3a8>
   11638:	cmp	r7, #120	; 0x78
   1163c:	beq	116d4 <__assert_fail@plt+0x378>
   11640:	cmp	r7, #111	; 0x6f
   11644:	beq	116d4 <__assert_fail@plt+0x378>
   11648:	bl	11200 <__ctype_b_loc@plt>
   1164c:	lsl	r3, r7, #1
   11650:	ldr	r2, [r0]
   11654:	mov	r0, #0
   11658:	ldrh	r3, [r2, r3]
   1165c:	mov	r2, #5
   11660:	ands	r4, r3, #16384	; 0x4000
   11664:	ldreq	r1, [pc, #3028]	; 12240 <__assert_fail@plt+0xee4>
   11668:	ldrne	r1, [pc, #3028]	; 12244 <__assert_fail@plt+0xee8>
   1166c:	bl	110ec <dcgettext@plt>
   11670:	mov	r3, r7
   11674:	mov	r1, #0
   11678:	mov	r2, r0
   1167c:	mov	r0, #1
   11680:	bl	111a0 <error@plt>
   11684:	orr	r4, r4, #1
   11688:	b	115b8 <__assert_fail@plt+0x25c>
   1168c:	orr	r4, r4, #2
   11690:	b	115b8 <__assert_fail@plt+0x25c>
   11694:	cmp	r7, #88	; 0x58
   11698:	beq	116d4 <__assert_fail@plt+0x378>
   1169c:	cmp	r7, #100	; 0x64
   116a0:	bne	116c0 <__assert_fail@plt+0x364>
   116a4:	mov	r2, #1
   116a8:	strb	lr, [r3]
   116ac:	bics	r4, r4, r2
   116b0:	bne	121c4 <__assert_fail@plt+0xe68>
   116b4:	mov	r4, #1
   116b8:	ldrb	r1, [r3, #1]!
   116bc:	b	11580 <__assert_fail@plt+0x224>
   116c0:	cmp	r7, #0
   116c4:	bne	11648 <__assert_fail@plt+0x2ec>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #2932]	; 12248 <__assert_fail@plt+0xeec>
   116d0:	b	11f3c <__assert_fail@plt+0xbe0>
   116d4:	mov	r2, #2
   116d8:	b	116ac <__assert_fail@plt+0x350>
   116dc:	ldr	r3, [pc, #2868]	; 12218 <__assert_fail@plt+0xebc>
   116e0:	ldr	r2, [r3]
   116e4:	cmp	r2, #9
   116e8:	bls	11e6c <__assert_fail@plt+0xb10>
   116ec:	ldr	r0, [r3]
   116f0:	mvn	r3, #1
   116f4:	sub	r3, r3, r6
   116f8:	cmp	r3, r0
   116fc:	bcs	11730 <__assert_fail@plt+0x3d4>
   11700:	bl	12a68 <__assert_fail@plt+0x170c>
   11704:	mov	r2, #1
   11708:	b	116ac <__assert_fail@plt+0x350>
   1170c:	cmp	r4, #0
   11710:	beq	11f34 <__assert_fail@plt+0xbd8>
   11714:	mvn	r3, #0
   11718:	mov	r2, #1
   1171c:	stm	sp, {r0, r3}
   11720:	mov	r0, r1
   11724:	bl	11350 <__snprintf_chk@plt>
   11728:	cmp	r0, #0
   1172c:	blt	11700 <__assert_fail@plt+0x3a4>
   11730:	add	r6, r6, #1
   11734:	add	r0, r6, r0
   11738:	bl	15f9c <__assert_fail@plt+0x4c40>
   1173c:	ldr	r3, [r5]
   11740:	ldr	r1, [pc, #2820]	; 1224c <__assert_fail@plt+0xef0>
   11744:	add	r2, r3, #1
   11748:	ldr	r4, [r9, r3, lsl #2]
   1174c:	str	r2, [r5]
   11750:	str	r0, [fp]
   11754:	mov	r0, r4
   11758:	bl	1105c <strcmp@plt>
   1175c:	cmp	r0, #0
   11760:	bne	11e88 <__assert_fail@plt+0xb2c>
   11764:	ldr	r5, [r5]
   11768:	cmp	r5, sl
   1176c:	strlt	sl, [sp, #24]
   11770:	ldrlt	r7, [r9, r5, lsl #2]
   11774:	movlt	sl, r9
   11778:	bge	118c4 <__assert_fail@plt+0x568>
   1177c:	ldrb	r4, [r7]
   11780:	sub	r9, r4, #37	; 0x25
   11784:	clz	r9, r9
   11788:	lsr	r9, r9, #5
   1178c:	cmp	r4, #47	; 0x2f
   11790:	movne	r6, r9
   11794:	orreq	r6, r9, #1
   11798:	cmp	r6, #0
   1179c:	beq	1196c <__assert_fail@plt+0x610>
   117a0:	add	r8, r7, #1
   117a4:	mov	r0, r8
   117a8:	mov	r1, r4
   117ac:	bl	112d8 <strrchr@plt>
   117b0:	subs	r6, r0, #0
   117b4:	beq	12064 <__assert_fail@plt+0xd08>
   117b8:	bl	12a9c <__assert_fail@plt+0x1740>
   117bc:	mov	r3, #1
   117c0:	strb	r9, [r0, #29]
   117c4:	mov	r9, #0
   117c8:	mov	r4, r0
   117cc:	strb	r3, [r0, #30]
   117d0:	str	r5, [r0, #24]
   117d4:	str	r9, [r0, #32]
   117d8:	str	r9, [r0, #36]	; 0x24
   117dc:	mov	r0, #256	; 0x100
   117e0:	bl	15f9c <__assert_fail@plt+0x4c40>
   117e4:	ldr	r2, [pc, #2660]	; 12250 <__assert_fail@plt+0xef4>
   117e8:	ldr	r3, [pc, #2660]	; 12254 <__assert_fail@plt+0xef8>
   117ec:	sub	r1, r6, r7
   117f0:	str	r3, [r2]
   117f4:	str	r9, [r4, #52]	; 0x34
   117f8:	sub	r1, r1, #1
   117fc:	add	r2, r4, #32
   11800:	str	r0, [r4, #48]	; 0x30
   11804:	mov	r0, r8
   11808:	bl	11320 <re_compile_pattern@plt>
   1180c:	subs	r8, r0, #0
   11810:	bne	1202c <__assert_fail@plt+0xcd0>
   11814:	ldrb	r3, [r6, #1]
   11818:	cmp	r3, #0
   1181c:	bne	119d0 <__assert_fail@plt+0x674>
   11820:	ldr	r2, [sp, #24]
   11824:	add	r3, r5, #1
   11828:	cmp	r2, r3
   1182c:	ble	118c4 <__assert_fail@plt+0x568>
   11830:	ldr	r7, [sl, r3, lsl #2]
   11834:	lsl	r6, r3, #2
   11838:	ldrb	r2, [r7]
   1183c:	cmp	r2, #123	; 0x7b
   11840:	movne	r5, r3
   11844:	bne	1177c <__assert_fail@plt+0x420>
   11848:	mov	r0, r7
   1184c:	bl	11218 <strlen@plt>
   11850:	sub	r3, r0, #1
   11854:	add	r8, r7, r3
   11858:	ldrb	r2, [r7, r3]
   1185c:	cmp	r2, #125	; 0x7d
   11860:	bne	12128 <__assert_fail@plt+0xdcc>
   11864:	sub	r2, r8, #1
   11868:	add	r0, r7, #1
   1186c:	cmp	r0, r2
   11870:	mov	r2, #0
   11874:	strb	r2, [r7, r3]
   11878:	beq	11a58 <__assert_fail@plt+0x6fc>
   1187c:	ldr	r3, [pc, #2420]	; 121f8 <__assert_fail@plt+0xe9c>
   11880:	mov	r2, #10
   11884:	str	r3, [sp]
   11888:	mov	r1, #0
   1188c:	add	r3, sp, #80	; 0x50
   11890:	bl	16e54 <__assert_fail@plt+0x5af8>
   11894:	cmp	r0, #0
   11898:	bne	120f4 <__assert_fail@plt+0xd98>
   1189c:	ldrd	r2, [sp, #80]	; 0x50
   118a0:	strd	r2, [r4, #16]
   118a4:	ldr	r3, [sp, #24]
   118a8:	add	r5, r5, #2
   118ac:	cmp	r3, r5
   118b0:	mov	r3, #125	; 0x7d
   118b4:	strb	r3, [r8]
   118b8:	addgt	r6, sl, r6
   118bc:	ldrgt	r7, [r6, #4]
   118c0:	bgt	1177c <__assert_fail@plt+0x420>
   118c4:	ldr	r0, [pc, #2444]	; 12258 <__assert_fail@plt+0xefc>
   118c8:	bl	112cc <sigemptyset@plt>
   118cc:	ldr	r4, [pc, #2440]	; 1225c <__assert_fail@plt+0xf00>
   118d0:	ldr	r7, [pc, #2432]	; 12258 <__assert_fail@plt+0xefc>
   118d4:	add	r6, r4, #44	; 0x2c
   118d8:	mov	r5, r4
   118dc:	ldr	r8, [r5, #4]!
   118e0:	add	r2, sp, #88	; 0x58
   118e4:	mov	r0, r8
   118e8:	mov	r1, #0
   118ec:	bl	1114c <sigaction@plt>
   118f0:	ldr	r3, [sp, #88]	; 0x58
   118f4:	cmp	r3, #1
   118f8:	beq	11908 <__assert_fail@plt+0x5ac>
   118fc:	mov	r1, r8
   11900:	mov	r0, r7
   11904:	bl	111c4 <sigaddset@plt>
   11908:	cmp	r6, r5
   1190c:	bne	118dc <__assert_fail@plt+0x580>
   11910:	ldr	r5, [pc, #2368]	; 12258 <__assert_fail@plt+0xefc>
   11914:	ldr	r3, [pc, #2372]	; 12260 <__assert_fail@plt+0xf04>
   11918:	mov	r2, #128	; 0x80
   1191c:	mov	r1, r5
   11920:	add	r0, sp, #92	; 0x5c
   11924:	str	r3, [sp, #88]	; 0x58
   11928:	bl	110a4 <memcpy@plt>
   1192c:	mov	r3, #0
   11930:	str	r3, [sp, #220]	; 0xdc
   11934:	b	11940 <__assert_fail@plt+0x5e4>
   11938:	cmp	r6, r4
   1193c:	beq	11a70 <__assert_fail@plt+0x714>
   11940:	ldr	r7, [r4, #4]!
   11944:	mov	r0, r5
   11948:	mov	r1, r7
   1194c:	bl	11128 <sigismember@plt>
   11950:	cmp	r0, #0
   11954:	beq	11938 <__assert_fail@plt+0x5dc>
   11958:	mov	r0, r7
   1195c:	mov	r2, #0
   11960:	add	r1, sp, #88	; 0x58
   11964:	bl	1114c <sigaction@plt>
   11968:	b	11938 <__assert_fail@plt+0x5dc>
   1196c:	bl	12a9c <__assert_fail@plt+0x1740>
   11970:	ldr	r1, [pc, #2176]	; 121f8 <__assert_fail@plt+0xe9c>
   11974:	add	r3, sp, #72	; 0x48
   11978:	mov	r2, #10
   1197c:	lsl	r9, r5, #2
   11980:	str	r5, [r0, #24]
   11984:	mov	r4, r0
   11988:	str	r1, [sp]
   1198c:	mov	r1, r6
   11990:	ldr	r0, [sl, r5, lsl #2]
   11994:	bl	16e54 <__assert_fail@plt+0x5af8>
   11998:	add	r1, sl, r9
   1199c:	subs	r8, r0, #0
   119a0:	bne	120ac <__assert_fail@plt+0xd50>
   119a4:	ldrd	r6, [sp, #72]	; 0x48
   119a8:	orrs	r3, r6, r7
   119ac:	beq	12088 <__assert_fail@plt+0xd2c>
   119b0:	ldrd	r2, [fp, #232]	; 0xe8
   119b4:	cmp	r7, r3
   119b8:	cmpeq	r6, r2
   119bc:	bcc	11fb0 <__assert_fail@plt+0xc54>
   119c0:	beq	11a24 <__assert_fail@plt+0x6c8>
   119c4:	strd	r6, [fp, #232]	; 0xe8
   119c8:	strd	r6, [r4, #8]
   119cc:	b	11820 <__assert_fail@plt+0x4c4>
   119d0:	ldr	r3, [pc, #2080]	; 121f8 <__assert_fail@plt+0xe9c>
   119d4:	add	r0, r6, #1
   119d8:	str	r3, [sp]
   119dc:	mov	r2, #10
   119e0:	mov	r3, r4
   119e4:	mov	r1, r8
   119e8:	bl	16360 <__assert_fail@plt+0x5004>
   119ec:	cmp	r0, #0
   119f0:	beq	11820 <__assert_fail@plt+0x4c4>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #2148]	; 12264 <__assert_fail@plt+0xf08>
   119fc:	mov	r0, r8
   11a00:	bl	110ec <dcgettext@plt>
   11a04:	mov	r4, r0
   11a08:	mov	r0, r7
   11a0c:	bl	159b8 <__assert_fail@plt+0x465c>
   11a10:	mov	r2, r4
   11a14:	mov	r1, r8
   11a18:	mov	r3, r0
   11a1c:	mov	r0, #1
   11a20:	bl	111a0 <error@plt>
   11a24:	mov	r2, #5
   11a28:	ldr	r1, [pc, #2104]	; 12268 <__assert_fail@plt+0xf0c>
   11a2c:	bl	110ec <dcgettext@plt>
   11a30:	mov	r6, r0
   11a34:	ldr	r0, [sl, r9]
   11a38:	bl	159b8 <__assert_fail@plt+0x465c>
   11a3c:	mov	r2, r6
   11a40:	mov	r1, r8
   11a44:	mov	r3, r0
   11a48:	mov	r0, r8
   11a4c:	bl	111a0 <error@plt>
   11a50:	ldrd	r6, [sp, #72]	; 0x48
   11a54:	b	119c4 <__assert_fail@plt+0x668>
   11a58:	ldrb	r3, [r7, #1]
   11a5c:	cmp	r3, #42	; 0x2a
   11a60:	moveq	r3, #1
   11a64:	strbeq	r3, [r4, #28]
   11a68:	bne	1187c <__assert_fail@plt+0x520>
   11a6c:	b	118a4 <__assert_fail@plt+0x548>
   11a70:	mov	r3, #0
   11a74:	mov	sl, r3
   11a78:	str	r3, [sp, #44]	; 0x2c
   11a7c:	ldr	r3, [fp, #172]	; 0xac
   11a80:	ldr	r2, [sp, #44]	; 0x2c
   11a84:	cmp	r2, r3
   11a88:	bcs	11efc <__assert_fail@plt+0xba0>
   11a8c:	ldr	r2, [sp, #44]	; 0x2c
   11a90:	ldr	r3, [fp, #180]	; 0xb4
   11a94:	lsl	r2, r2, #6
   11a98:	add	r3, r3, r2
   11a9c:	str	r2, [sp, #40]	; 0x28
   11aa0:	ldrb	r3, [r3, #30]
   11aa4:	mov	r2, #0
   11aa8:	cmp	r3, #0
   11aac:	mov	r3, #0
   11ab0:	ldrdeq	r8, [sp, #64]	; 0x40
   11ab4:	strd	r2, [sp, #24]
   11ab8:	beq	11bf0 <__assert_fail@plt+0x894>
   11abc:	ldr	r9, [sp, #40]	; 0x28
   11ac0:	ldr	r3, [fp, #180]	; 0xb4
   11ac4:	add	r7, r3, r9
   11ac8:	str	r3, [sp, #36]	; 0x24
   11acc:	ldrb	r3, [r7, #28]
   11ad0:	cmp	r3, #0
   11ad4:	bne	11aec <__assert_fail@plt+0x790>
   11ad8:	ldrd	r2, [r7, #16]
   11adc:	ldrd	r0, [sp, #24]
   11ae0:	cmp	r1, r3
   11ae4:	cmpeq	r0, r2
   11ae8:	bhi	11d5c <__assert_fail@plt+0xa00>
   11aec:	ldrb	r4, [r7, #29]
   11af0:	cmp	r4, #0
   11af4:	beq	11e58 <__assert_fail@plt+0xafc>
   11af8:	ldrb	r3, [fp, #228]	; 0xe4
   11afc:	cmp	r3, #0
   11b00:	beq	11b10 <__assert_fail@plt+0x7b4>
   11b04:	ldrd	r2, [fp, #216]	; 0xd8
   11b08:	orrs	r3, r2, r3
   11b0c:	bne	11eec <__assert_fail@plt+0xb90>
   11b10:	ldr	r3, [sp, #36]	; 0x24
   11b14:	add	r5, r7, #32
   11b18:	ldrd	r2, [r3, r9]
   11b1c:	cmp	r2, #0
   11b20:	sbcs	r3, r3, #0
   11b24:	bge	11b74 <__assert_fail@plt+0x818>
   11b28:	b	11d00 <__assert_fail@plt+0x9a4>
   11b2c:	ldrd	r2, [r0]
   11b30:	sub	r0, r2, #1
   11b34:	mov	r1, r3
   11b38:	ldrb	ip, [r3, r0]
   11b3c:	str	sl, [sp, #4]
   11b40:	mov	r3, #0
   11b44:	cmp	ip, #10
   11b48:	moveq	r2, r0
   11b4c:	str	r2, [sp]
   11b50:	mov	r0, r5
   11b54:	bl	11230 <re_search@plt>
   11b58:	cmn	r0, #2
   11b5c:	beq	11f8c <__assert_fail@plt+0xc30>
   11b60:	cmn	r0, #1
   11b64:	bne	11d6c <__assert_fail@plt+0xa10>
   11b68:	bl	12e18 <__assert_fail@plt+0x1abc>
   11b6c:	cmp	r4, #0
   11b70:	beq	11e60 <__assert_fail@plt+0xb04>
   11b74:	ldr	r0, [fp, #216]	; 0xd8
   11b78:	ldr	r2, [fp, #220]	; 0xdc
   11b7c:	adds	r3, r0, #1
   11b80:	adc	r2, r2, #0
   11b84:	mov	r0, r3
   11b88:	mov	r1, r2
   11b8c:	str	r3, [fp, #216]	; 0xd8
   11b90:	str	r2, [fp, #220]	; 0xdc
   11b94:	bl	13000 <__assert_fail@plt+0x1ca4>
   11b98:	cmp	r0, #0
   11b9c:	bne	11b2c <__assert_fail@plt+0x7d0>
   11ba0:	ldrb	r3, [r7, #28]
   11ba4:	cmp	r3, #0
   11ba8:	beq	121b4 <__assert_fail@plt+0xe58>
   11bac:	cmp	r4, #0
   11bb0:	beq	11ee0 <__assert_fail@plt+0xb84>
   11bb4:	mov	r0, #0
   11bb8:	bl	1120c <exit@plt>
   11bbc:	bl	12538 <__assert_fail@plt+0x11dc>
   11bc0:	ldrb	r3, [fp, #228]	; 0xe4
   11bc4:	cmp	r3, #0
   11bc8:	bne	11cbc <__assert_fail@plt+0x960>
   11bcc:	ldrd	r0, [fp, #216]	; 0xd8
   11bd0:	adds	r0, r0, #1
   11bd4:	adc	r1, r1, #0
   11bd8:	bl	13000 <__assert_fail@plt+0x1ca4>
   11bdc:	cmp	r0, #0
   11be0:	beq	11d48 <__assert_fail@plt+0x9ec>
   11be4:	ldr	r3, [sp, #36]	; 0x24
   11be8:	str	r7, [sp, #24]
   11bec:	str	r3, [sp, #28]
   11bf0:	ldr	r3, [sp, #40]	; 0x28
   11bf4:	ldr	r6, [fp, #180]	; 0xb4
   11bf8:	add	r6, r6, r3
   11bfc:	ldrb	r3, [r6, #28]
   11c00:	cmp	r3, #0
   11c04:	bne	11c1c <__assert_fail@plt+0x8c0>
   11c08:	ldrd	r2, [r6, #16]
   11c0c:	ldrd	r0, [sp, #24]
   11c10:	cmp	r1, r3
   11c14:	cmpeq	r0, r2
   11c18:	bhi	11d58 <__assert_fail@plt+0x9fc>
   11c1c:	ldrd	r0, [sp, #24]
   11c20:	ldr	r2, [r6, #12]
   11c24:	ldr	r3, [r6, #8]
   11c28:	adds	r7, r0, #1
   11c2c:	adc	r1, r1, #0
   11c30:	mul	r2, r7, r2
   11c34:	umull	r4, r5, r3, r7
   11c38:	mla	r3, r3, r1, r2
   11c3c:	str	r1, [sp, #36]	; 0x24
   11c40:	add	r5, r3, r5
   11c44:	bl	126ec <__assert_fail@plt+0x1390>
   11c48:	ldrd	r0, [fp, #216]	; 0xd8
   11c4c:	adds	r0, r0, #1
   11c50:	adc	r1, r1, #0
   11c54:	bl	13000 <__assert_fail@plt+0x1ca4>
   11c58:	cmp	r0, #0
   11c5c:	beq	11d30 <__assert_fail@plt+0x9d4>
   11c60:	bl	130fc <__assert_fail@plt+0x1da0>
   11c64:	adds	r8, r0, #1
   11c68:	adc	r9, r1, #0
   11c6c:	cmp	r5, r1
   11c70:	cmpeq	r4, r0
   11c74:	bhi	11c84 <__assert_fail@plt+0x928>
   11c78:	b	11bbc <__assert_fail@plt+0x860>
   11c7c:	mov	r8, r2
   11c80:	mov	r9, r3
   11c84:	bl	12e18 <__assert_fail@plt+0x1abc>
   11c88:	subs	r1, r0, #0
   11c8c:	beq	11d3c <__assert_fail@plt+0x9e0>
   11c90:	add	r1, r1, #4
   11c94:	bl	129d8 <__assert_fail@plt+0x167c>
   11c98:	adds	r2, r8, #1
   11c9c:	adc	r3, r9, #0
   11ca0:	cmp	r5, r9
   11ca4:	cmpeq	r4, r8
   11ca8:	bne	11c7c <__assert_fail@plt+0x920>
   11cac:	bl	12538 <__assert_fail@plt+0x11dc>
   11cb0:	ldrb	r3, [fp, #228]	; 0xe4
   11cb4:	cmp	r3, #0
   11cb8:	beq	11bcc <__assert_fail@plt+0x870>
   11cbc:	bl	12e18 <__assert_fail@plt+0x1abc>
   11cc0:	b	11bcc <__assert_fail@plt+0x870>
   11cc4:	ldrd	r2, [r0]
   11cc8:	sub	r0, r2, #1
   11ccc:	mov	r1, r3
   11cd0:	ldrb	ip, [r3, r0]
   11cd4:	str	sl, [sp, #4]
   11cd8:	mov	r3, #0
   11cdc:	cmp	ip, #10
   11ce0:	moveq	r2, r0
   11ce4:	str	r2, [sp]
   11ce8:	mov	r0, r5
   11cec:	bl	11230 <re_search@plt>
   11cf0:	cmn	r0, #2
   11cf4:	beq	11f8c <__assert_fail@plt+0xc30>
   11cf8:	cmn	r0, #1
   11cfc:	bne	11d6c <__assert_fail@plt+0xa10>
   11d00:	ldr	r0, [fp, #216]	; 0xd8
   11d04:	ldr	r2, [fp, #220]	; 0xdc
   11d08:	adds	r3, r0, #1
   11d0c:	adc	r2, r2, #0
   11d10:	mov	r0, r3
   11d14:	mov	r1, r2
   11d18:	str	r3, [fp, #216]	; 0xd8
   11d1c:	str	r2, [fp, #220]	; 0xdc
   11d20:	bl	13000 <__assert_fail@plt+0x1ca4>
   11d24:	cmp	r0, #0
   11d28:	bne	11cc4 <__assert_fail@plt+0x968>
   11d2c:	b	11ba0 <__assert_fail@plt+0x844>
   11d30:	ldrb	r3, [fp, #228]	; 0xe4
   11d34:	cmp	r3, #0
   11d38:	beq	11c60 <__assert_fail@plt+0x904>
   11d3c:	ldrd	r2, [sp, #24]
   11d40:	add	r0, r6, #8
   11d44:	bl	12818 <__assert_fail@plt+0x14bc>
   11d48:	ldrb	r3, [fp, #228]	; 0xe4
   11d4c:	cmp	r3, #0
   11d50:	bne	11be4 <__assert_fail@plt+0x888>
   11d54:	b	11d3c <__assert_fail@plt+0x9e0>
   11d58:	strd	r8, [sp, #64]	; 0x40
   11d5c:	ldr	r3, [sp, #44]	; 0x2c
   11d60:	add	r3, r3, #1
   11d64:	str	r3, [sp, #44]	; 0x2c
   11d68:	b	11a7c <__assert_fail@plt+0x720>
   11d6c:	ldr	r3, [sp, #36]	; 0x24
   11d70:	ldr	r1, [fp, #216]	; 0xd8
   11d74:	add	r2, r3, r9
   11d78:	ldr	r3, [r3, r9]
   11d7c:	ldr	r0, [r2, #4]
   11d80:	ldr	r2, [fp, #220]	; 0xdc
   11d84:	adds	r3, r3, r1
   11d88:	str	r3, [sp, #48]	; 0x30
   11d8c:	adc	r3, r0, r2
   11d90:	str	r3, [sp, #52]	; 0x34
   11d94:	ldr	r5, [r7, #24]
   11d98:	bl	130fc <__assert_fail@plt+0x1da0>
   11d9c:	ldrd	r2, [sp, #48]	; 0x30
   11da0:	cmp	r3, r1
   11da4:	cmpeq	r2, r0
   11da8:	bcc	120e0 <__assert_fail@plt+0xd84>
   11dac:	ldrd	r2, [sp, #48]	; 0x30
   11db0:	subs	ip, r2, r0
   11db4:	sbc	r3, r3, r1
   11db8:	str	ip, [sp, #56]	; 0x38
   11dbc:	str	r3, [sp, #60]	; 0x3c
   11dc0:	ldrd	r2, [sp, #56]	; 0x38
   11dc4:	orrs	r3, r2, r3
   11dc8:	beq	11e1c <__assert_fail@plt+0xac0>
   11dcc:	str	r5, [sp, #40]	; 0x28
   11dd0:	mov	r6, #0
   11dd4:	mov	r5, r9
   11dd8:	mov	r7, #0
   11ddc:	ldrd	r8, [sp, #56]	; 0x38
   11de0:	b	11df8 <__assert_fail@plt+0xa9c>
   11de4:	adds	r6, r6, #1
   11de8:	adc	r7, r7, #0
   11dec:	cmp	r9, r7
   11df0:	cmpeq	r8, r6
   11df4:	beq	11e18 <__assert_fail@plt+0xabc>
   11df8:	bl	12e18 <__assert_fail@plt+0x1abc>
   11dfc:	subs	r1, r0, #0
   11e00:	beq	11ff4 <__assert_fail@plt+0xc98>
   11e04:	cmp	r4, #0
   11e08:	bne	11de4 <__assert_fail@plt+0xa88>
   11e0c:	add	r1, r1, #4
   11e10:	bl	129d8 <__assert_fail@plt+0x167c>
   11e14:	b	11de4 <__assert_fail@plt+0xa88>
   11e18:	mov	r9, r5
   11e1c:	cmp	r4, #0
   11e20:	beq	11ef4 <__assert_fail@plt+0xb98>
   11e24:	ldr	r3, [sp, #36]	; 0x24
   11e28:	ldrd	r2, [r3, r9]
   11e2c:	cmp	r2, #1
   11e30:	sbcs	r3, r3, #0
   11e34:	ldrdge	r2, [sp, #48]	; 0x30
   11e38:	strdge	r2, [fp, #216]	; 0xd8
   11e3c:	ldr	r3, [sp, #24]
   11e40:	adds	r3, r3, #1
   11e44:	str	r3, [sp, #24]
   11e48:	ldr	r3, [sp, #28]
   11e4c:	adc	r3, r3, #0
   11e50:	str	r3, [sp, #28]
   11e54:	b	11ac0 <__assert_fail@plt+0x764>
   11e58:	bl	126ec <__assert_fail@plt+0x1390>
   11e5c:	b	11af8 <__assert_fail@plt+0x79c>
   11e60:	add	r1, r0, #4
   11e64:	bl	129d8 <__assert_fail@plt+0x167c>
   11e68:	b	11b74 <__assert_fail@plt+0x818>
   11e6c:	mov	r0, #10
   11e70:	b	11730 <__assert_fail@plt+0x3d4>
   11e74:	ldrb	r2, [r3, #1]!
   11e78:	sub	r2, r2, #48	; 0x30
   11e7c:	cmp	r2, #9
   11e80:	bhi	11620 <__assert_fail@plt+0x2c4>
   11e84:	b	11e74 <__assert_fail@plt+0xb18>
   11e88:	mov	r3, #0
   11e8c:	mov	r2, r3
   11e90:	mov	r0, r3
   11e94:	mov	r1, r4
   11e98:	bl	135ec <__assert_fail@plt+0x2290>
   11e9c:	cmp	r0, #0
   11ea0:	bge	11764 <__assert_fail@plt+0x408>
   11ea4:	bl	1123c <__errno_location@plt>
   11ea8:	mov	r2, #5
   11eac:	ldr	r1, [pc, #952]	; 1226c <__assert_fail@plt+0xf10>
   11eb0:	ldr	r5, [r0]
   11eb4:	mov	r0, #0
   11eb8:	bl	110ec <dcgettext@plt>
   11ebc:	mov	r1, r4
   11ec0:	mov	r6, r0
   11ec4:	mov	r0, #4
   11ec8:	bl	15710 <__assert_fail@plt+0x43b4>
   11ecc:	mov	r2, r6
   11ed0:	mov	r1, r5
   11ed4:	mov	r3, r0
   11ed8:	mov	r0, #1
   11edc:	bl	111a0 <error@plt>
   11ee0:	bl	12eec <__assert_fail@plt+0x1b90>
   11ee4:	bl	12538 <__assert_fail@plt+0x11dc>
   11ee8:	b	11bb4 <__assert_fail@plt+0x858>
   11eec:	bl	12e18 <__assert_fail@plt+0x1abc>
   11ef0:	b	11b10 <__assert_fail@plt+0x7b4>
   11ef4:	bl	12538 <__assert_fail@plt+0x11dc>
   11ef8:	b	11e24 <__assert_fail@plt+0xac8>
   11efc:	bl	126ec <__assert_fail@plt+0x1390>
   11f00:	bl	12eec <__assert_fail@plt+0x1b90>
   11f04:	bl	12538 <__assert_fail@plt+0x11dc>
   11f08:	mov	r0, #0
   11f0c:	bl	11344 <close@plt>
   11f10:	cmp	r0, #0
   11f14:	bne	12188 <__assert_fail@plt+0xe2c>
   11f18:	ldr	r3, [pc, #724]	; 121f4 <__assert_fail@plt+0xe98>
   11f1c:	ldr	r2, [sp, #252]	; 0xfc
   11f20:	ldr	r3, [r3]
   11f24:	cmp	r2, r3
   11f28:	bne	12184 <__assert_fail@plt+0xe28>
   11f2c:	add	sp, sp, #260	; 0x104
   11f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f34:	ldr	r1, [pc, #820]	; 12270 <__assert_fail@plt+0xf14>
   11f38:	mov	r2, #5
   11f3c:	mov	r0, #0
   11f40:	bl	110ec <dcgettext@plt>
   11f44:	mov	r1, #0
   11f48:	mov	r2, r0
   11f4c:	mov	r0, #1
   11f50:	bl	111a0 <error@plt>
   11f54:	mov	r0, r4
   11f58:	bl	1316c <__assert_fail@plt+0x1e10>
   11f5c:	cmp	r3, sl
   11f60:	mov	r2, #5
   11f64:	blt	12144 <__assert_fail@plt+0xde8>
   11f68:	ldr	r1, [pc, #772]	; 12274 <__assert_fail@plt+0xf18>
   11f6c:	mov	r0, r4
   11f70:	bl	110ec <dcgettext@plt>
   11f74:	mov	r1, r4
   11f78:	mov	r2, r0
   11f7c:	mov	r0, r4
   11f80:	bl	111a0 <error@plt>
   11f84:	mov	r0, #1
   11f88:	bl	1316c <__assert_fail@plt+0x1e10>
   11f8c:	mov	r2, #5
   11f90:	ldr	r1, [pc, #736]	; 12278 <__assert_fail@plt+0xf1c>
   11f94:	mov	r0, #0
   11f98:	bl	110ec <dcgettext@plt>
   11f9c:	mov	r1, #0
   11fa0:	mov	r2, r0
   11fa4:	mov	r0, r1
   11fa8:	bl	111a0 <error@plt>
   11fac:	bl	124d8 <__assert_fail@plt+0x117c>
   11fb0:	mov	r5, r1
   11fb4:	mov	r2, #5
   11fb8:	ldr	r1, [pc, #700]	; 1227c <__assert_fail@plt+0xf20>
   11fbc:	bl	110ec <dcgettext@plt>
   11fc0:	mov	r4, r0
   11fc4:	ldr	r0, [r5]
   11fc8:	bl	159b8 <__assert_fail@plt+0x465c>
   11fcc:	add	r2, sp, #228	; 0xe4
   11fd0:	mov	r5, r0
   11fd4:	ldrd	r0, [fp, #232]	; 0xe8
   11fd8:	bl	136f0 <__assert_fail@plt+0x2394>
   11fdc:	mov	r3, r5
   11fe0:	mov	r2, r4
   11fe4:	mov	r1, r8
   11fe8:	str	r0, [sp]
   11fec:	mov	r0, #1
   11ff0:	bl	111a0 <error@plt>
   11ff4:	ldr	r8, [sp, #40]	; 0x28
   11ff8:	ldr	r1, [pc, #640]	; 12280 <__assert_fail@plt+0xf24>
   11ffc:	mov	r2, #5
   12000:	bl	110ec <dcgettext@plt>
   12004:	ldr	r3, [fp, #224]	; 0xe0
   12008:	mov	r4, r0
   1200c:	ldr	r0, [r3, r8, lsl #2]
   12010:	bl	159b8 <__assert_fail@plt+0x465c>
   12014:	mov	r1, #0
   12018:	mov	r2, r4
   1201c:	mov	r3, r0
   12020:	mov	r0, r1
   12024:	bl	111a0 <error@plt>
   12028:	bl	124d8 <__assert_fail@plt+0x117c>
   1202c:	mov	r2, #5
   12030:	ldr	r1, [pc, #588]	; 12284 <__assert_fail@plt+0xf28>
   12034:	mov	r0, r9
   12038:	bl	110ec <dcgettext@plt>
   1203c:	mov	r4, r0
   12040:	mov	r0, r7
   12044:	bl	159b8 <__assert_fail@plt+0x465c>
   12048:	mov	r2, r4
   1204c:	mov	r1, r9
   12050:	str	r8, [sp]
   12054:	mov	r3, r0
   12058:	mov	r0, r9
   1205c:	bl	111a0 <error@plt>
   12060:	bl	124d8 <__assert_fail@plt+0x117c>
   12064:	mov	r2, #5
   12068:	ldr	r1, [pc, #536]	; 12288 <__assert_fail@plt+0xf2c>
   1206c:	bl	110ec <dcgettext@plt>
   12070:	str	r4, [sp]
   12074:	mov	r3, r7
   12078:	mov	r1, r6
   1207c:	mov	r2, r0
   12080:	mov	r0, #1
   12084:	bl	111a0 <error@plt>
   12088:	mov	r4, r1
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #500]	; 1228c <__assert_fail@plt+0xf30>
   12094:	bl	110ec <dcgettext@plt>
   12098:	ldr	r3, [r4]
   1209c:	mov	r1, r8
   120a0:	mov	r2, r0
   120a4:	mov	r0, #1
   120a8:	bl	111a0 <error@plt>
   120ac:	mov	r2, #5
   120b0:	mov	r5, r1
   120b4:	mov	r0, r6
   120b8:	ldr	r1, [pc, #464]	; 12290 <__assert_fail@plt+0xf34>
   120bc:	bl	110ec <dcgettext@plt>
   120c0:	mov	r4, r0
   120c4:	ldr	r0, [r5]
   120c8:	bl	159b8 <__assert_fail@plt+0x465c>
   120cc:	mov	r2, r4
   120d0:	mov	r1, r6
   120d4:	mov	r3, r0
   120d8:	mov	r0, #1
   120dc:	bl	111a0 <error@plt>
   120e0:	mov	r8, r5
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #400]	; 12280 <__assert_fail@plt+0xf24>
   120ec:	mov	r0, #0
   120f0:	b	12000 <__assert_fail@plt+0xca4>
   120f4:	mov	r2, #5
   120f8:	ldr	r1, [pc, #404]	; 12294 <__assert_fail@plt+0xf38>
   120fc:	mov	r0, #0
   12100:	bl	110ec <dcgettext@plt>
   12104:	ldr	r3, [fp, #224]	; 0xe0
   12108:	mov	r4, r0
   1210c:	ldr	r0, [r3, r6]
   12110:	bl	159b8 <__assert_fail@plt+0x465c>
   12114:	mov	r2, r4
   12118:	mov	r1, #0
   1211c:	mov	r3, r0
   12120:	mov	r0, #1
   12124:	bl	111a0 <error@plt>
   12128:	mov	r2, #5
   1212c:	ldr	r1, [pc, #356]	; 12298 <__assert_fail@plt+0xf3c>
   12130:	mov	r0, #0
   12134:	bl	110ec <dcgettext@plt>
   12138:	mov	r4, r0
   1213c:	mov	r0, r7
   12140:	b	12110 <__assert_fail@plt+0xdb4>
   12144:	ldr	r1, [pc, #336]	; 1229c <__assert_fail@plt+0xf40>
   12148:	mov	r0, r4
   1214c:	bl	110ec <dcgettext@plt>
   12150:	sub	r3, sl, #-1073741823	; 0xc0000001
   12154:	mov	r5, r0
   12158:	ldr	r0, [r9, r3, lsl #2]
   1215c:	bl	159b8 <__assert_fail@plt+0x465c>
   12160:	mov	r2, r5
   12164:	mov	r1, r4
   12168:	mov	r3, r0
   1216c:	mov	r0, r4
   12170:	bl	111a0 <error@plt>
   12174:	b	11f84 <__assert_fail@plt+0xc28>
   12178:	mov	r2, #5
   1217c:	ldr	r1, [pc, #284]	; 122a0 <__assert_fail@plt+0xf44>
   12180:	b	11f3c <__assert_fail@plt+0xbe0>
   12184:	bl	110f8 <__stack_chk_fail@plt>
   12188:	bl	1123c <__errno_location@plt>
   1218c:	mov	r2, #5
   12190:	ldr	r1, [pc, #268]	; 122a4 <__assert_fail@plt+0xf48>
   12194:	ldr	r4, [r0]
   12198:	mov	r0, #0
   1219c:	bl	110ec <dcgettext@plt>
   121a0:	mov	r1, r4
   121a4:	mov	r2, r0
   121a8:	mov	r0, #0
   121ac:	bl	111a0 <error@plt>
   121b0:	bl	124d8 <__assert_fail@plt+0x117c>
   121b4:	str	r4, [sp]
   121b8:	ldrd	r2, [sp, #24]
   121bc:	add	r0, r7, #24
   121c0:	bl	12f08 <__assert_fail@plt+0x1bac>
   121c4:	mov	r2, #5
   121c8:	ldr	r1, [pc, #216]	; 122a8 <__assert_fail@plt+0xf4c>
   121cc:	mov	r0, #0
   121d0:	bl	110ec <dcgettext@plt>
   121d4:	tst	r4, #2
   121d8:	str	r7, [sp]
   121dc:	movne	r3, #35	; 0x23
   121e0:	moveq	r3, #39	; 0x27
   121e4:	mov	r1, #0
   121e8:	mov	r2, r0
   121ec:	mov	r0, #1
   121f0:	bl	111a0 <error@plt>
   121f4:	andeq	r9, r2, r8, lsl #30
   121f8:	andeq	r9, r1, r8, ror #3
   121fc:	andeq	r8, r1, r0, lsr #19
   12200:	strdeq	r8, [r1], -r4
   12204:	andeq	sl, r2, r0, lsr #3
   12208:	ldrdeq	r8, [r1], -ip
   1220c:	andeq	r3, r1, r4, lsl r5
   12210:	andeq	r8, r1, r4, ror #19
   12214:	muleq	r2, r8, r1
   12218:	andeq	sl, r2, ip, lsr #2
   1221c:			; <UNDEFINED> instruction: 0x000189b4
   12220:			; <UNDEFINED> instruction: 0x000189b8
   12224:	andeq	sl, r2, r0, lsr r1
   12228:	muleq	r2, r0, r1
   1222c:	andeq	r8, r1, r8, asr #19
   12230:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12234:	andeq	r8, r1, r0, ror r3
   12238:	strdeq	r8, [r1], -r0
   1223c:	andeq	sl, r2, r0, lsl #3
   12240:	ldrdeq	r8, [r1], -r0
   12244:	andeq	r8, r1, r4, lsr #21
   12248:	andeq	r8, r1, ip, ror sl
   1224c:	andeq	r8, r1, r4, lsr fp
   12250:	andeq	sl, r2, ip, lsl #3
   12254:	andeq	r0, r0, r6, asr #5
   12258:			; <UNDEFINED> instruction: 0x0002a1b0
   1225c:	andeq	r8, r1, r8, lsl #5
   12260:	ldrdeq	r2, [r1], -ip
   12264:	muleq	r1, ip, fp
   12268:	andeq	r8, r1, r0, asr #24
   1226c:	andeq	r8, r1, r8, lsr fp
   12270:	andeq	r8, r1, ip, lsl sl
   12274:	strdeq	r8, [r1], -r0
   12278:	ldrdeq	r8, [r1], -r0
   1227c:	andeq	r8, r1, r4, lsl #24
   12280:	ldrdeq	r8, [r1], -ip
   12284:	andeq	r8, r1, r8, ror fp
   12288:	andeq	r8, r1, r4, asr fp
   1228c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12290:	andeq	r8, r1, r4, asr #23
   12294:	andeq	r8, r1, r4, lsr #25
   12298:	andeq	r8, r1, r0, lsl #25
   1229c:	andeq	r8, r1, r0, lsl #20
   122a0:	andeq	r8, r1, ip, asr #20
   122a4:	andeq	r8, r1, r4, lsr #6
   122a8:	andeq	r8, r1, r0, lsl #22
   122ac:	mov	fp, #0
   122b0:	mov	lr, #0
   122b4:	pop	{r1}		; (ldr r1, [sp], #4)
   122b8:	mov	r2, sp
   122bc:	push	{r2}		; (str r2, [sp, #-4]!)
   122c0:	push	{r0}		; (str r0, [sp, #-4]!)
   122c4:	ldr	ip, [pc, #16]	; 122dc <__assert_fail@plt+0xf80>
   122c8:	push	{ip}		; (str ip, [sp, #-4]!)
   122cc:	ldr	r0, [pc, #12]	; 122e0 <__assert_fail@plt+0xf84>
   122d0:	ldr	r3, [pc, #12]	; 122e4 <__assert_fail@plt+0xf88>
   122d4:	bl	111d0 <__libc_start_main@plt>
   122d8:	bl	11338 <abort@plt>
   122dc:	andeq	r8, r1, r0, ror r1
   122e0:	andeq	r1, r1, r8, ror #6
   122e4:	andeq	r8, r1, r0, lsl r1
   122e8:	ldr	r3, [pc, #20]	; 12304 <__assert_fail@plt+0xfa8>
   122ec:	ldr	r2, [pc, #20]	; 12308 <__assert_fail@plt+0xfac>
   122f0:	add	r3, pc, r3
   122f4:	ldr	r2, [r3, r2]
   122f8:	cmp	r2, #0
   122fc:	bxeq	lr
   12300:	b	111e8 <__gmon_start__@plt>
   12304:	andeq	r7, r1, r8, lsl #26
   12308:	andeq	r0, r0, r0, lsr #2
   1230c:	ldr	r0, [pc, #24]	; 1232c <__assert_fail@plt+0xfd0>
   12310:	ldr	r3, [pc, #24]	; 12330 <__assert_fail@plt+0xfd4>
   12314:	cmp	r3, r0
   12318:	bxeq	lr
   1231c:	ldr	r3, [pc, #16]	; 12334 <__assert_fail@plt+0xfd8>
   12320:	cmp	r3, #0
   12324:	bxeq	lr
   12328:	bx	r3
   1232c:	andeq	sl, r2, r8, ror r1
   12330:	andeq	sl, r2, r8, ror r1
   12334:	andeq	r0, r0, r0
   12338:	ldr	r0, [pc, #36]	; 12364 <__assert_fail@plt+0x1008>
   1233c:	ldr	r1, [pc, #36]	; 12368 <__assert_fail@plt+0x100c>
   12340:	sub	r1, r1, r0
   12344:	asr	r1, r1, #2
   12348:	add	r1, r1, r1, lsr #31
   1234c:	asrs	r1, r1, #1
   12350:	bxeq	lr
   12354:	ldr	r3, [pc, #16]	; 1236c <__assert_fail@plt+0x1010>
   12358:	cmp	r3, #0
   1235c:	bxeq	lr
   12360:	bx	r3
   12364:	andeq	sl, r2, r8, ror r1
   12368:	andeq	sl, r2, r8, ror r1
   1236c:	andeq	r0, r0, r0
   12370:	push	{r4, lr}
   12374:	ldr	r4, [pc, #24]	; 12394 <__assert_fail@plt+0x1038>
   12378:	ldrb	r3, [r4]
   1237c:	cmp	r3, #0
   12380:	popne	{r4, pc}
   12384:	bl	1230c <__assert_fail@plt+0xfb0>
   12388:	mov	r3, #1
   1238c:	strb	r3, [r4]
   12390:	pop	{r4, pc}
   12394:	muleq	r2, ip, r1
   12398:	b	12338 <__assert_fail@plt+0xfdc>
   1239c:	push	{r4, r5, r6, lr}
   123a0:	mov	r5, r0
   123a4:	ldr	r4, [pc, #124]	; 12428 <__assert_fail@plt+0x10cc>
   123a8:	sub	sp, sp, #8
   123ac:	ldr	r0, [r4]
   123b0:	ldr	r1, [r4, #4]
   123b4:	bl	1117c <strcpy@plt>
   123b8:	ldr	r3, [r4, #8]
   123bc:	ldr	r6, [r4]
   123c0:	cmp	r3, #0
   123c4:	ldr	r0, [r4, #4]
   123c8:	beq	123f4 <__assert_fail@plt+0x1098>
   123cc:	bl	11218 <strlen@plt>
   123d0:	ldr	r3, [r4, #8]
   123d4:	str	r5, [sp]
   123d8:	mvn	r2, #0
   123dc:	mov	r1, #1
   123e0:	add	r0, r6, r0
   123e4:	bl	11248 <__sprintf_chk@plt>
   123e8:	ldr	r0, [r4]
   123ec:	add	sp, sp, #8
   123f0:	pop	{r4, r5, r6, pc}
   123f4:	bl	11218 <strlen@plt>
   123f8:	ldr	r2, [pc, #44]	; 1242c <__assert_fail@plt+0x10d0>
   123fc:	str	r5, [sp, #4]
   12400:	ldr	r3, [pc, #40]	; 12430 <__assert_fail@plt+0x10d4>
   12404:	ldr	r1, [r2]
   12408:	mvn	r2, #0
   1240c:	str	r1, [sp]
   12410:	mov	r1, #1
   12414:	add	r0, r6, r0
   12418:	bl	11248 <__sprintf_chk@plt>
   1241c:	ldr	r0, [r4]
   12420:	add	sp, sp, #8
   12424:	pop	{r4, r5, r6, pc}
   12428:	andeq	sl, r2, r0, lsr #3
   1242c:	andeq	sl, r2, ip, lsr #2
   12430:			; <UNDEFINED> instruction: 0x000182b8
   12434:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12438:	ldr	r6, [pc, #144]	; 124d0 <__assert_fail@plt+0x1174>
   1243c:	ldr	r3, [r6, #12]
   12440:	cmp	r3, #0
   12444:	beq	124c4 <__assert_fail@plt+0x1168>
   12448:	mov	r7, r0
   1244c:	ldr	r9, [pc, #128]	; 124d4 <__assert_fail@plt+0x1178>
   12450:	mov	r4, #0
   12454:	b	12464 <__assert_fail@plt+0x1108>
   12458:	ldr	r3, [r6, #12]
   1245c:	cmp	r4, r3
   12460:	bcs	124c4 <__assert_fail@plt+0x1168>
   12464:	mov	r0, r4
   12468:	bl	1239c <__assert_fail@plt+0x1040>
   1246c:	add	r4, r4, #1
   12470:	mov	r8, r0
   12474:	bl	11104 <unlink@plt>
   12478:	cmp	r0, #0
   1247c:	movne	r5, r7
   12480:	orreq	r5, r7, #1
   12484:	cmp	r5, #0
   12488:	bne	12458 <__assert_fail@plt+0x10fc>
   1248c:	bl	1123c <__errno_location@plt>
   12490:	mov	r2, r8
   12494:	mov	r1, #3
   12498:	ldr	r8, [r0]
   1249c:	mov	r0, r5
   124a0:	bl	157ec <__assert_fail@plt+0x4490>
   124a4:	mov	r2, r9
   124a8:	mov	r1, r8
   124ac:	mov	r3, r0
   124b0:	mov	r0, r5
   124b4:	bl	111a0 <error@plt>
   124b8:	ldr	r3, [r6, #12]
   124bc:	cmp	r4, r3
   124c0:	bcc	12464 <__assert_fail@plt+0x1108>
   124c4:	mov	r3, #0
   124c8:	str	r3, [r6, #12]
   124cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124d0:	andeq	sl, r2, r0, lsr #3
   124d4:	muleq	r1, r8, fp
   124d8:	ldr	r3, [pc, #80]	; 12530 <__assert_fail@plt+0x11d4>
   124dc:	push	{lr}		; (str lr, [sp, #-4]!)
   124e0:	sub	sp, sp, #140	; 0x8c
   124e4:	ldr	r3, [r3]
   124e8:	ldr	r4, [pc, #68]	; 12534 <__assert_fail@plt+0x11d8>
   124ec:	str	r3, [sp, #132]	; 0x84
   124f0:	bl	12538 <__assert_fail@plt+0x11dc>
   124f4:	add	r1, r4, #16
   124f8:	add	r2, sp, #4
   124fc:	mov	r0, #0
   12500:	bl	11080 <sigprocmask@plt>
   12504:	ldrb	r3, [r4, #144]	; 0x90
   12508:	cmp	r3, #0
   1250c:	beq	12518 <__assert_fail@plt+0x11bc>
   12510:	mov	r0, #0
   12514:	bl	12434 <__assert_fail@plt+0x10d8>
   12518:	add	r1, sp, #4
   1251c:	mov	r2, #0
   12520:	mov	r0, #2
   12524:	bl	11080 <sigprocmask@plt>
   12528:	mov	r0, #1
   1252c:	bl	1120c <exit@plt>
   12530:	andeq	r9, r2, r8, lsl #30
   12534:	andeq	sl, r2, r0, lsr #3
   12538:	push	{r4, r5, r6, r7, r8, r9, lr}
   1253c:	sub	sp, sp, #164	; 0xa4
   12540:	ldr	r4, [pc, #396]	; 126d4 <__assert_fail@plt+0x1378>
   12544:	ldr	r5, [pc, #396]	; 126d8 <__assert_fail@plt+0x137c>
   12548:	ldr	r0, [r4, #148]	; 0x94
   1254c:	ldr	r3, [r5]
   12550:	cmp	r0, #0
   12554:	str	r3, [sp, #156]	; 0x9c
   12558:	beq	125a0 <__assert_fail@plt+0x1244>
   1255c:	ldr	r3, [r0]
   12560:	ands	r6, r3, #32
   12564:	bne	12694 <__assert_fail@plt+0x1338>
   12568:	bl	1785c <__assert_fail@plt+0x6500>
   1256c:	subs	r7, r0, #0
   12570:	bne	12660 <__assert_fail@plt+0x1304>
   12574:	ldrd	r2, [r4, #160]	; 0xa0
   12578:	orrs	r1, r2, r3
   1257c:	bne	1258c <__assert_fail@plt+0x1230>
   12580:	ldrb	r1, [r4, #168]	; 0xa8
   12584:	cmp	r1, #0
   12588:	bne	125e8 <__assert_fail@plt+0x128c>
   1258c:	ldrb	r1, [r4, #169]	; 0xa9
   12590:	cmp	r1, #0
   12594:	beq	125b8 <__assert_fail@plt+0x125c>
   12598:	mov	r3, #0
   1259c:	str	r3, [r4, #148]	; 0x94
   125a0:	ldr	r2, [sp, #156]	; 0x9c
   125a4:	ldr	r3, [r5]
   125a8:	cmp	r2, r3
   125ac:	bne	1265c <__assert_fail@plt+0x1300>
   125b0:	add	sp, sp, #164	; 0xa4
   125b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   125b8:	ldr	ip, [pc, #284]	; 126dc <__assert_fail@plt+0x1380>
   125bc:	mov	r1, r3
   125c0:	mov	r0, r2
   125c4:	add	r2, sp, #132	; 0x84
   125c8:	ldr	r6, [ip]
   125cc:	bl	136f0 <__assert_fail@plt+0x2394>
   125d0:	ldr	r2, [pc, #264]	; 126e0 <__assert_fail@plt+0x1384>
   125d4:	mov	r1, #1
   125d8:	mov	r3, r0
   125dc:	mov	r0, r6
   125e0:	bl	11284 <__fprintf_chk@plt>
   125e4:	b	12598 <__assert_fail@plt+0x123c>
   125e8:	add	r2, sp, #4
   125ec:	add	r1, r4, #16
   125f0:	bl	11080 <sigprocmask@plt>
   125f4:	ldr	r8, [r4, #152]	; 0x98
   125f8:	mov	r0, r8
   125fc:	bl	11104 <unlink@plt>
   12600:	mov	r6, r0
   12604:	bl	1123c <__errno_location@plt>
   12608:	ldr	r3, [r4, #12]
   1260c:	add	r1, sp, #4
   12610:	cmp	r6, #0
   12614:	subeq	r3, r3, #1
   12618:	mov	r2, r7
   1261c:	str	r3, [r4, #12]
   12620:	ldr	r9, [r0]
   12624:	mov	r0, #2
   12628:	bl	11080 <sigprocmask@plt>
   1262c:	cmp	r6, #0
   12630:	beq	12598 <__assert_fail@plt+0x123c>
   12634:	mov	r2, r8
   12638:	mov	r1, #3
   1263c:	mov	r0, r7
   12640:	bl	157ec <__assert_fail@plt+0x4490>
   12644:	mov	r1, r9
   12648:	ldr	r2, [pc, #148]	; 126e4 <__assert_fail@plt+0x1388>
   1264c:	mov	r3, r0
   12650:	mov	r0, r7
   12654:	bl	111a0 <error@plt>
   12658:	b	12598 <__assert_fail@plt+0x123c>
   1265c:	bl	110f8 <__stack_chk_fail@plt>
   12660:	bl	1123c <__errno_location@plt>
   12664:	ldr	r2, [r4, #152]	; 0x98
   12668:	mov	r1, #3
   1266c:	ldr	r5, [r0]
   12670:	mov	r0, r6
   12674:	bl	157ec <__assert_fail@plt+0x4490>
   12678:	mov	r1, r5
   1267c:	ldr	r2, [pc, #96]	; 126e4 <__assert_fail@plt+0x1388>
   12680:	mov	r3, r0
   12684:	mov	r0, r6
   12688:	bl	111a0 <error@plt>
   1268c:	str	r6, [r4, #148]	; 0x94
   12690:	bl	124d8 <__assert_fail@plt+0x117c>
   12694:	mov	r2, #5
   12698:	ldr	r1, [pc, #72]	; 126e8 <__assert_fail@plt+0x138c>
   1269c:	mov	r0, #0
   126a0:	bl	110ec <dcgettext@plt>
   126a4:	ldr	r1, [r4, #152]	; 0x98
   126a8:	mov	r5, r0
   126ac:	mov	r0, #4
   126b0:	bl	15710 <__assert_fail@plt+0x43b4>
   126b4:	mov	r1, #0
   126b8:	mov	r2, r5
   126bc:	mov	r3, r0
   126c0:	mov	r0, r1
   126c4:	bl	111a0 <error@plt>
   126c8:	mov	r3, #0
   126cc:	str	r3, [r4, #148]	; 0x94
   126d0:	bl	124d8 <__assert_fail@plt+0x117c>
   126d4:	andeq	sl, r2, r0, lsr #3
   126d8:	andeq	r9, r2, r8, lsl #30
   126dc:	muleq	r2, r0, r1
   126e0:	andeq	r8, r1, ip, lsl #30
   126e4:	muleq	r1, r8, fp
   126e8:	andeq	r8, r1, r0, asr #5
   126ec:	push	{r4, r5, r6, r7, lr}
   126f0:	sub	sp, sp, #140	; 0x8c
   126f4:	ldr	r5, [pc, #208]	; 127cc <__assert_fail@plt+0x1470>
   126f8:	ldr	r4, [pc, #208]	; 127d0 <__assert_fail@plt+0x1474>
   126fc:	ldr	r3, [r5]
   12700:	str	r3, [sp, #132]	; 0x84
   12704:	ldr	r0, [r4, #12]
   12708:	bl	1239c <__assert_fail@plt+0x1040>
   1270c:	ldr	r3, [r4, #12]
   12710:	cmn	r3, #1
   12714:	moveq	r7, #75	; 0x4b
   12718:	mov	r6, r0
   1271c:	str	r0, [r4, #152]	; 0x98
   12720:	bne	1274c <__assert_fail@plt+0x13f0>
   12724:	mov	r2, r6
   12728:	mov	r1, #3
   1272c:	mov	r0, #0
   12730:	bl	157ec <__assert_fail@plt+0x4490>
   12734:	mov	r1, r7
   12738:	ldr	r2, [pc, #148]	; 127d4 <__assert_fail@plt+0x1478>
   1273c:	mov	r3, r0
   12740:	mov	r0, #0
   12744:	bl	111a0 <error@plt>
   12748:	bl	124d8 <__assert_fail@plt+0x117c>
   1274c:	add	r2, sp, #4
   12750:	add	r1, r4, #16
   12754:	mov	r0, #0
   12758:	bl	11080 <sigprocmask@plt>
   1275c:	ldr	r1, [pc, #116]	; 127d8 <__assert_fail@plt+0x147c>
   12760:	mov	r0, r6
   12764:	bl	13658 <__assert_fail@plt+0x22fc>
   12768:	mov	r6, r0
   1276c:	str	r0, [r4, #148]	; 0x94
   12770:	bl	1123c <__errno_location@plt>
   12774:	ldr	r3, [r4, #12]
   12778:	add	r1, sp, #4
   1277c:	cmp	r6, #0
   12780:	addne	r3, r3, #1
   12784:	mov	r2, #0
   12788:	str	r3, [r4, #12]
   1278c:	ldr	r7, [r0]
   12790:	mov	r0, #2
   12794:	bl	11080 <sigprocmask@plt>
   12798:	cmp	r6, #0
   1279c:	ldreq	r6, [r4, #152]	; 0x98
   127a0:	beq	12724 <__assert_fail@plt+0x13c8>
   127a4:	ldr	r0, [sp, #132]	; 0x84
   127a8:	ldr	r1, [r5]
   127ac:	mov	r2, #0
   127b0:	mov	r3, #0
   127b4:	cmp	r0, r1
   127b8:	strd	r2, [r4, #160]	; 0xa0
   127bc:	bne	127c8 <__assert_fail@plt+0x146c>
   127c0:	add	sp, sp, #140	; 0x8c
   127c4:	pop	{r4, r5, r6, r7, pc}
   127c8:	bl	110f8 <__stack_chk_fail@plt>
   127cc:	andeq	r9, r2, r8, lsl #30
   127d0:	andeq	sl, r2, r0, lsr #3
   127d4:	muleq	r1, r8, fp
   127d8:	ldrdeq	r8, [r1], -r4
   127dc:	ldr	r3, [pc, #48]	; 12814 <__assert_fail@plt+0x14b8>
   127e0:	push	{r4, lr}
   127e4:	mov	r4, r0
   127e8:	ldrb	r3, [r3, #144]	; 0x90
   127ec:	cmp	r3, #0
   127f0:	beq	127fc <__assert_fail@plt+0x14a0>
   127f4:	mov	r0, #1
   127f8:	bl	12434 <__assert_fail@plt+0x10d8>
   127fc:	mov	r0, r4
   12800:	mov	r1, #0
   12804:	bl	110c8 <signal@plt>
   12808:	mov	r0, r4
   1280c:	pop	{r4, lr}
   12810:	b	11050 <raise@plt>
   12814:	andeq	sl, r2, r0, lsr #3
   12818:	ldr	r1, [pc, #188]	; 128dc <__assert_fail@plt+0x1580>
   1281c:	ldr	r4, [pc, #188]	; 128e0 <__assert_fail@plt+0x1584>
   12820:	push	{r7, lr}
   12824:	sub	sp, sp, #40	; 0x28
   12828:	ldr	ip, [r1]
   1282c:	mov	r9, r0
   12830:	mov	r6, r2
   12834:	ldr	r1, [pc, #168]	; 128e4 <__assert_fail@plt+0x1588>
   12838:	mov	r2, #5
   1283c:	mov	r0, #0
   12840:	str	ip, [sp, #36]	; 0x24
   12844:	mov	r7, r3
   12848:	ldr	r5, [r4]
   1284c:	bl	110ec <dcgettext@plt>
   12850:	ldr	r3, [pc, #144]	; 128e8 <__assert_fail@plt+0x158c>
   12854:	add	r2, sp, #12
   12858:	mov	r8, r0
   1285c:	ldrd	r0, [r9]
   12860:	ldr	r9, [r3]
   12864:	bl	136f0 <__assert_fail@plt+0x2394>
   12868:	bl	159b8 <__assert_fail@plt+0x465c>
   1286c:	mov	r3, r9
   12870:	mov	r2, r8
   12874:	mov	r1, #1
   12878:	str	r0, [sp]
   1287c:	mov	r0, r5
   12880:	bl	11284 <__fprintf_chk@plt>
   12884:	orrs	r3, r6, r7
   12888:	beq	128cc <__assert_fail@plt+0x1570>
   1288c:	mov	r2, #5
   12890:	ldr	r1, [pc, #84]	; 128ec <__assert_fail@plt+0x1590>
   12894:	mov	r0, #0
   12898:	ldr	r4, [r4]
   1289c:	bl	110ec <dcgettext@plt>
   128a0:	add	r2, sp, #12
   128a4:	mov	r1, r7
   128a8:	mov	r5, r0
   128ac:	mov	r0, r6
   128b0:	bl	136f0 <__assert_fail@plt+0x2394>
   128b4:	mov	r2, r5
   128b8:	mov	r1, #1
   128bc:	mov	r3, r0
   128c0:	mov	r0, r4
   128c4:	bl	11284 <__fprintf_chk@plt>
   128c8:	bl	124d8 <__assert_fail@plt+0x117c>
   128cc:	ldr	r1, [r4]
   128d0:	mov	r0, #10
   128d4:	bl	112f0 <fputc@plt>
   128d8:	b	128c8 <__assert_fail@plt+0x156c>
   128dc:	andeq	r9, r2, r8, lsl #30
   128e0:	andeq	sl, r2, r8, lsl #3
   128e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   128e8:	muleq	r2, r8, r2
   128ec:	strdeq	r8, [r1], -ip
   128f0:	push	{r4, r5, r6, r7, r8, lr}
   128f4:	mov	r5, r1
   128f8:	ldr	r4, [r0]
   128fc:	mov	r7, r2
   12900:	cmp	r4, #0
   12904:	mov	r8, r3
   12908:	beq	12970 <__assert_fail@plt+0x1614>
   1290c:	ldr	r4, [r5]
   12910:	ldr	r0, [r4]
   12914:	cmp	r0, #80	; 0x50
   12918:	beq	1293c <__assert_fail@plt+0x15e0>
   1291c:	ldr	r1, [r4, #4]
   12920:	add	r0, r0, #1
   12924:	add	ip, r1, #1
   12928:	add	r1, r4, r1, lsl #3
   1292c:	str	r7, [r1, #16]
   12930:	str	r8, [r1, #12]
   12934:	stm	r4, {r0, ip}
   12938:	pop	{r4, r5, r6, r7, r8, pc}
   1293c:	mov	r0, #656	; 0x290
   12940:	bl	15f9c <__assert_fail@plt+0x4c40>
   12944:	mov	r3, #0
   12948:	str	r3, [r0, #652]	; 0x28c
   1294c:	str	r3, [r0]
   12950:	str	r3, [r0, #4]
   12954:	str	r3, [r0, #8]
   12958:	str	r0, [r4, #652]	; 0x28c
   1295c:	ldr	r3, [r5]
   12960:	ldr	r4, [r3, #652]	; 0x28c
   12964:	str	r4, [r5]
   12968:	ldr	r0, [r4]
   1296c:	b	1291c <__assert_fail@plt+0x15c0>
   12970:	mov	r6, r0
   12974:	mov	r0, #656	; 0x290
   12978:	bl	15f9c <__assert_fail@plt+0x4c40>
   1297c:	str	r0, [r5]
   12980:	str	r4, [r0, #652]	; 0x28c
   12984:	str	r4, [r0]
   12988:	str	r4, [r0, #4]
   1298c:	str	r4, [r0, #8]
   12990:	str	r0, [r6]
   12994:	b	1290c <__assert_fail@plt+0x15b0>
   12998:	push	{r4, r5, r6, lr}
   1299c:	mov	r5, r0
   129a0:	ldr	r0, [r1]
   129a4:	mov	r6, r1
   129a8:	cmp	r0, #0
   129ac:	beq	129c0 <__assert_fail@plt+0x1664>
   129b0:	ldr	r4, [r0, #652]	; 0x28c
   129b4:	bl	1108c <free@plt>
   129b8:	subs	r0, r4, #0
   129bc:	bne	129b0 <__assert_fail@plt+0x1654>
   129c0:	mov	r4, #0
   129c4:	str	r4, [r6]
   129c8:	ldr	r0, [r5]
   129cc:	bl	1108c <free@plt>
   129d0:	str	r4, [r5]
   129d4:	pop	{r4, r5, r6, pc}
   129d8:	push	{r4, r5, r6, r7, r8, lr}
   129dc:	mov	r5, r0
   129e0:	ldr	r4, [pc, #120]	; 12a60 <__assert_fail@plt+0x1704>
   129e4:	ldr	r0, [r1]
   129e8:	ldr	r2, [r5]
   129ec:	ldr	r3, [r4, #148]	; 0x94
   129f0:	mov	r1, #1
   129f4:	bl	110d4 <fwrite_unlocked@plt>
   129f8:	ldr	r3, [r5]
   129fc:	cmp	r0, r3
   12a00:	bne	12a18 <__assert_fail@plt+0x16bc>
   12a04:	ldrd	r2, [r4, #160]	; 0xa0
   12a08:	adds	r6, r2, r0
   12a0c:	adc	r7, r3, #0
   12a10:	strd	r6, [r4, #160]	; 0xa0
   12a14:	pop	{r4, r5, r6, r7, r8, pc}
   12a18:	bl	1123c <__errno_location@plt>
   12a1c:	mov	r2, #5
   12a20:	ldr	r1, [pc, #60]	; 12a64 <__assert_fail@plt+0x1708>
   12a24:	ldr	r5, [r0]
   12a28:	mov	r0, #0
   12a2c:	bl	110ec <dcgettext@plt>
   12a30:	ldr	r1, [r4, #152]	; 0x98
   12a34:	mov	r6, r0
   12a38:	mov	r0, #4
   12a3c:	bl	15710 <__assert_fail@plt+0x43b4>
   12a40:	mov	r2, r6
   12a44:	mov	r1, r5
   12a48:	mov	r3, r0
   12a4c:	mov	r0, #0
   12a50:	bl	111a0 <error@plt>
   12a54:	mov	r3, #0
   12a58:	str	r3, [r4, #148]	; 0x94
   12a5c:	bl	124d8 <__assert_fail@plt+0x117c>
   12a60:	andeq	sl, r2, r0, lsr #3
   12a64:	andeq	r8, r1, r0, asr #5
   12a68:	push	{r4, lr}
   12a6c:	mov	r2, #5
   12a70:	ldr	r1, [pc, #28]	; 12a94 <__assert_fail@plt+0x1738>
   12a74:	mov	r0, #0
   12a78:	bl	110ec <dcgettext@plt>
   12a7c:	mov	r1, #0
   12a80:	ldr	r2, [pc, #16]	; 12a98 <__assert_fail@plt+0x173c>
   12a84:	mov	r3, r0
   12a88:	mov	r0, r1
   12a8c:	bl	111a0 <error@plt>
   12a90:	bl	124d8 <__assert_fail@plt+0x117c>
   12a94:	andeq	r8, r1, r0, lsl r3
   12a98:	muleq	r1, r8, fp
   12a9c:	push	{r4, r6, r7, lr}
   12aa0:	ldr	r4, [pc, #180]	; 12b5c <__assert_fail@plt+0x1800>
   12aa4:	ldr	r3, [r4, #172]	; 0xac
   12aa8:	ldr	ip, [r4, #176]	; 0xb0
   12aac:	ldr	r2, [r4, #180]	; 0xb4
   12ab0:	cmp	r3, ip
   12ab4:	beq	12aec <__assert_fail@plt+0x1790>
   12ab8:	lsl	r1, r3, #6
   12abc:	add	r0, r2, r1
   12ac0:	mov	r6, #0
   12ac4:	mov	r7, #0
   12ac8:	add	r3, r3, #1
   12acc:	str	r3, [r4, #172]	; 0xac
   12ad0:	mov	r3, #0
   12ad4:	strb	r3, [r0, #30]
   12ad8:	strb	r3, [r0, #28]
   12adc:	strd	r6, [r0, #16]
   12ae0:	strd	r6, [r0, #8]
   12ae4:	strd	r6, [r2, r1]
   12ae8:	pop	{r4, r6, r7, pc}
   12aec:	cmp	r2, #0
   12af0:	beq	12b28 <__assert_fail@plt+0x17cc>
   12af4:	ldr	r3, [pc, #100]	; 12b60 <__assert_fail@plt+0x1804>
   12af8:	cmp	ip, r3
   12afc:	bhi	12b4c <__assert_fail@plt+0x17f0>
   12b00:	add	r3, ip, #1
   12b04:	add	ip, r3, ip, lsr #1
   12b08:	lsl	r1, ip, #6
   12b0c:	mov	r0, r2
   12b10:	str	ip, [r4, #176]	; 0xb0
   12b14:	bl	15ff8 <__assert_fail@plt+0x4c9c>
   12b18:	ldr	r3, [r4, #172]	; 0xac
   12b1c:	mov	r2, r0
   12b20:	str	r0, [r4, #180]	; 0xb4
   12b24:	b	12ab8 <__assert_fail@plt+0x175c>
   12b28:	cmp	ip, #0
   12b2c:	beq	12b50 <__assert_fail@plt+0x17f4>
   12b30:	lsrs	r3, ip, #26
   12b34:	movne	r3, #1
   12b38:	moveq	r3, #0
   12b3c:	lsls	r1, ip, #6
   12b40:	bmi	12b4c <__assert_fail@plt+0x17f0>
   12b44:	cmp	r3, #0
   12b48:	beq	12b0c <__assert_fail@plt+0x17b0>
   12b4c:	bl	12a68 <__assert_fail@plt+0x170c>
   12b50:	mov	r1, #64	; 0x40
   12b54:	mov	ip, #1
   12b58:	b	12b0c <__assert_fail@plt+0x17b0>
   12b5c:	andeq	sl, r2, r0, lsr #3
   12b60:	cmpeq	r5, r4, asr r5
   12b64:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b68:	ldr	r6, [pc, #668]	; 12e0c <__assert_fail@plt+0x1ab0>
   12b6c:	ldr	r3, [pc, #668]	; 12e10 <__assert_fail@plt+0x1ab4>
   12b70:	ldr	r5, [r6, #184]	; 0xb8
   12b74:	mov	fp, r3
   12b78:	cmp	r5, r3
   12b7c:	movcc	r5, r3
   12b80:	b	12bf8 <__assert_fail@plt+0x189c>
   12b84:	mov	r2, r7
   12b88:	mov	r1, r8
   12b8c:	mov	r0, #0
   12b90:	bl	159d0 <__assert_fail@plt+0x4674>
   12b94:	cmp	r0, #0
   12b98:	moveq	r3, #1
   12b9c:	strbeq	r3, [r6, #204]	; 0xcc
   12ba0:	beq	12bac <__assert_fail@plt+0x1850>
   12ba4:	cmn	r0, #1
   12ba8:	beq	12dd8 <__assert_fail@plt+0x1a7c>
   12bac:	ldr	r5, [r4, #4]
   12bb0:	add	r5, r0, r5
   12bb4:	cmp	r5, #0
   12bb8:	str	r5, [r4, #4]
   12bbc:	bne	12db0 <__assert_fail@plt+0x1a54>
   12bc0:	ldrb	r3, [r6, #204]	; 0xcc
   12bc4:	cmp	r3, #0
   12bc8:	bne	12db8 <__assert_fail@plt+0x1a5c>
   12bcc:	ldr	r3, [r4]
   12bd0:	lsls	r5, r3, #1
   12bd4:	lsr	r3, r3, #31
   12bd8:	bmi	12dd4 <__assert_fail@plt+0x1a78>
   12bdc:	cmp	r3, #0
   12be0:	bne	12dd4 <__assert_fail@plt+0x1a78>
   12be4:	add	r0, r4, #28
   12be8:	add	r1, r4, #32
   12bec:	bl	12998 <__assert_fail@plt+0x163c>
   12bf0:	mov	r0, r4
   12bf4:	bl	1108c <free@plt>
   12bf8:	cmp	r5, fp
   12bfc:	subhi	r5, r5, #6144	; 0x1800
   12c00:	bichi	r5, r5, #2032	; 0x7f0
   12c04:	bichi	r5, r5, #15
   12c08:	addhi	r7, r5, #8128	; 0x1fc0
   12c0c:	mov	r0, #48	; 0x30
   12c10:	addhi	r5, r5, #8192	; 0x2000
   12c14:	movls	r5, #8192	; 0x2000
   12c18:	addhi	r7, r7, #63	; 0x3f
   12c1c:	ldrls	r7, [pc, #492]	; 12e10 <__assert_fail@plt+0x1ab4>
   12c20:	bl	15f9c <__assert_fail@plt+0x4c40>
   12c24:	mov	r9, #0
   12c28:	mov	r4, r0
   12c2c:	mov	r0, r5
   12c30:	bl	15f9c <__assert_fail@plt+0x4c40>
   12c34:	ldr	r3, [r6, #192]	; 0xc0
   12c38:	ldr	r2, [r6, #196]	; 0xc4
   12c3c:	ldr	r5, [r6, #184]	; 0xb8
   12c40:	adds	r3, r3, #1
   12c44:	adc	r2, r2, #0
   12c48:	cmp	r5, r9
   12c4c:	str	r7, [r4]
   12c50:	str	r3, [r4, #16]
   12c54:	str	r3, [r4, #8]
   12c58:	str	r2, [r4, #20]
   12c5c:	str	r2, [r4, #12]
   12c60:	str	r9, [r4, #36]	; 0x24
   12c64:	str	r9, [r4, #32]
   12c68:	str	r9, [r4, #24]
   12c6c:	str	r9, [r4, #4]
   12c70:	str	r9, [r4, #40]	; 0x28
   12c74:	mov	r8, r0
   12c78:	str	r0, [r4, #28]
   12c7c:	beq	12b84 <__assert_fail@plt+0x1828>
   12c80:	mov	r2, r5
   12c84:	ldr	r1, [r6, #200]	; 0xc8
   12c88:	bl	110a4 <memcpy@plt>
   12c8c:	subs	r7, r7, r5
   12c90:	str	r5, [r4, #4]
   12c94:	str	r9, [r6, #184]	; 0xb8
   12c98:	bne	12e04 <__assert_fail@plt+0x1aa8>
   12c9c:	mov	r7, #0
   12ca0:	add	sl, r4, #36	; 0x24
   12ca4:	add	r9, r4, #32
   12ca8:	b	12cd0 <__assert_fail@plt+0x1974>
   12cac:	sub	r3, ip, r8
   12cb0:	add	r3, r3, #1
   12cb4:	mov	r2, r8
   12cb8:	mov	r1, sl
   12cbc:	mov	r0, r9
   12cc0:	add	r7, r7, #1
   12cc4:	sub	r5, r5, r3
   12cc8:	add	r8, ip, #1
   12ccc:	bl	128f0 <__assert_fail@plt+0x1594>
   12cd0:	mov	r2, r5
   12cd4:	mov	r1, #10
   12cd8:	mov	r0, r8
   12cdc:	bl	11290 <memchr@plt>
   12ce0:	subs	ip, r0, #0
   12ce4:	bne	12cac <__assert_fail@plt+0x1950>
   12ce8:	cmp	r5, #0
   12cec:	beq	12d14 <__assert_fail@plt+0x19b8>
   12cf0:	ldrb	r3, [r6, #204]	; 0xcc
   12cf4:	cmp	r3, #0
   12cf8:	beq	12d8c <__assert_fail@plt+0x1a30>
   12cfc:	mov	r3, r5
   12d00:	mov	r2, r8
   12d04:	add	r1, r4, #36	; 0x24
   12d08:	add	r0, r4, #32
   12d0c:	add	r7, r7, #1
   12d10:	bl	128f0 <__assert_fail@plt+0x1594>
   12d14:	ldrd	r8, [r6, #192]	; 0xc0
   12d18:	str	r7, [r4, #24]
   12d1c:	adds	r0, r8, #1
   12d20:	adc	r1, r9, #0
   12d24:	adds	r2, r8, r7
   12d28:	adc	r3, r9, #0
   12d2c:	cmp	r7, #0
   12d30:	str	r0, [r4, #8]
   12d34:	str	r0, [r4, #16]
   12d38:	str	r1, [r4, #12]
   12d3c:	str	r1, [r4, #20]
   12d40:	strd	r2, [r6, #192]	; 0xc0
   12d44:	beq	12bc0 <__assert_fail@plt+0x1864>
   12d48:	ldr	r2, [r6, #208]	; 0xd0
   12d4c:	ldr	r1, [r4, #32]
   12d50:	mov	r3, #0
   12d54:	cmp	r2, #0
   12d58:	str	r1, [r4, #36]	; 0x24
   12d5c:	str	r3, [r4, #40]	; 0x28
   12d60:	bne	12d74 <__assert_fail@plt+0x1a18>
   12d64:	str	r4, [r6, #208]	; 0xd0
   12d68:	mov	r0, #1
   12d6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d70:	mov	r2, r3
   12d74:	ldr	r3, [r2, #40]	; 0x28
   12d78:	cmp	r3, #0
   12d7c:	bne	12d70 <__assert_fail@plt+0x1a14>
   12d80:	str	r4, [r2, #40]	; 0x28
   12d84:	mov	r0, #1
   12d88:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d8c:	mov	r0, r8
   12d90:	mov	r1, r5
   12d94:	bl	161a4 <__assert_fail@plt+0x4e48>
   12d98:	mov	r8, r0
   12d9c:	ldr	r0, [r6, #200]	; 0xc8
   12da0:	bl	1108c <free@plt>
   12da4:	str	r8, [r6, #200]	; 0xc8
   12da8:	str	r5, [r6, #184]	; 0xb8
   12dac:	b	12d14 <__assert_fail@plt+0x19b8>
   12db0:	ldr	r8, [r4, #28]
   12db4:	b	12c9c <__assert_fail@plt+0x1940>
   12db8:	add	r1, r4, #32
   12dbc:	add	r0, r4, #28
   12dc0:	bl	12998 <__assert_fail@plt+0x163c>
   12dc4:	mov	r0, r4
   12dc8:	bl	1108c <free@plt>
   12dcc:	mov	r0, #0
   12dd0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd4:	bl	12a68 <__assert_fail@plt+0x170c>
   12dd8:	bl	1123c <__errno_location@plt>
   12ddc:	mov	r2, #5
   12de0:	ldr	r1, [pc, #44]	; 12e14 <__assert_fail@plt+0x1ab8>
   12de4:	ldr	r4, [r0]
   12de8:	mov	r0, #0
   12dec:	bl	110ec <dcgettext@plt>
   12df0:	mov	r1, r4
   12df4:	mov	r2, r0
   12df8:	mov	r0, #0
   12dfc:	bl	111a0 <error@plt>
   12e00:	bl	124d8 <__assert_fail@plt+0x117c>
   12e04:	add	r8, r8, r5
   12e08:	b	12b84 <__assert_fail@plt+0x1828>
   12e0c:	andeq	sl, r2, r0, lsr #3
   12e10:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12e14:	andeq	r8, r1, r4, lsr #6
   12e18:	push	{r4, r5, r6, r7, r8, lr}
   12e1c:	ldr	r4, [pc, #196]	; 12ee8 <__assert_fail@plt+0x1b8c>
   12e20:	ldr	r5, [r4, #212]	; 0xd4
   12e24:	cmp	r5, #0
   12e28:	beq	12e48 <__assert_fail@plt+0x1aec>
   12e2c:	add	r1, r5, #32
   12e30:	add	r0, r5, #28
   12e34:	bl	12998 <__assert_fail@plt+0x163c>
   12e38:	mov	r0, r5
   12e3c:	bl	1108c <free@plt>
   12e40:	mov	r3, #0
   12e44:	str	r3, [r4, #212]	; 0xd4
   12e48:	ldr	r3, [r4, #208]	; 0xd0
   12e4c:	cmp	r3, #0
   12e50:	beq	12ec4 <__assert_fail@plt+0x1b68>
   12e54:	ldrd	r6, [r3, #16]
   12e58:	ldrd	r0, [r4, #216]	; 0xd8
   12e5c:	cmp	r7, r1
   12e60:	ldr	r1, [r3, #36]	; 0x24
   12e64:	cmpeq	r6, r0
   12e68:	ldr	r2, [r1, #8]
   12e6c:	ldr	r0, [r1]
   12e70:	add	r2, r2, #1
   12e74:	strdhi	r6, [r4, #216]	; 0xd8
   12e78:	adds	ip, r6, #1
   12e7c:	adc	lr, r7, #0
   12e80:	cmp	r0, r2
   12e84:	add	r0, r1, r2, lsl #3
   12e88:	str	lr, [r3, #20]
   12e8c:	str	ip, [r3, #16]
   12e90:	add	r0, r0, #4
   12e94:	str	r2, [r1, #8]
   12e98:	popne	{r4, r5, r6, r7, r8, pc}
   12e9c:	ldr	r2, [r1, #652]	; 0x28c
   12ea0:	cmp	r2, #0
   12ea4:	str	r2, [r3, #36]	; 0x24
   12ea8:	beq	12eb8 <__assert_fail@plt+0x1b5c>
   12eac:	ldr	r2, [r2]
   12eb0:	cmp	r2, #0
   12eb4:	popne	{r4, r5, r6, r7, r8, pc}
   12eb8:	ldr	r2, [r3, #40]	; 0x28
   12ebc:	strd	r2, [r4, #208]	; 0xd0
   12ec0:	pop	{r4, r5, r6, r7, r8, pc}
   12ec4:	ldrb	r3, [r4, #204]	; 0xcc
   12ec8:	cmp	r3, #0
   12ecc:	bne	12ee0 <__assert_fail@plt+0x1b84>
   12ed0:	bl	12b64 <__assert_fail@plt+0x1808>
   12ed4:	cmp	r0, #0
   12ed8:	ldrne	r3, [r4, #208]	; 0xd0
   12edc:	bne	12e54 <__assert_fail@plt+0x1af8>
   12ee0:	mov	r0, #0
   12ee4:	pop	{r4, r5, r6, r7, r8, pc}
   12ee8:	andeq	sl, r2, r0, lsr #3
   12eec:	push	{r4, lr}
   12ef0:	bl	12e18 <__assert_fail@plt+0x1abc>
   12ef4:	subs	r1, r0, #0
   12ef8:	add	r1, r1, #4
   12efc:	popeq	{r4, pc}
   12f00:	bl	129d8 <__assert_fail@plt+0x167c>
   12f04:	b	12ef0 <__assert_fail@plt+0x1b94>
   12f08:	ldr	r1, [pc, #216]	; 12fe8 <__assert_fail@plt+0x1c8c>
   12f0c:	ldr	r4, [pc, #216]	; 12fec <__assert_fail@plt+0x1c90>
   12f10:	push	{r7, lr}
   12f14:	sub	sp, sp, #40	; 0x28
   12f18:	ldr	ip, [r1]
   12f1c:	mov	sl, r0
   12f20:	mov	r6, r2
   12f24:	ldr	r1, [pc, #196]	; 12ff0 <__assert_fail@plt+0x1c94>
   12f28:	mov	r2, #5
   12f2c:	mov	r0, #0
   12f30:	mov	r7, r3
   12f34:	str	ip, [sp, #36]	; 0x24
   12f38:	ldr	r8, [r4]
   12f3c:	ldrb	r5, [sp, #48]	; 0x30
   12f40:	bl	110ec <dcgettext@plt>
   12f44:	ldr	r3, [pc, #168]	; 12ff4 <__assert_fail@plt+0x1c98>
   12f48:	ldr	r2, [sl]
   12f4c:	ldr	r1, [pc, #164]	; 12ff8 <__assert_fail@plt+0x1c9c>
   12f50:	ldr	r3, [r3, #224]	; 0xe0
   12f54:	ldr	sl, [r1]
   12f58:	mov	r9, r0
   12f5c:	ldr	r0, [r3, r2, lsl #2]
   12f60:	bl	159b8 <__assert_fail@plt+0x465c>
   12f64:	mov	r3, sl
   12f68:	mov	r2, r9
   12f6c:	mov	r1, #1
   12f70:	str	r0, [sp]
   12f74:	mov	r0, r8
   12f78:	bl	11284 <__fprintf_chk@plt>
   12f7c:	orrs	r3, r6, r7
   12f80:	beq	12fcc <__assert_fail@plt+0x1c70>
   12f84:	mov	r2, #5
   12f88:	ldr	r1, [pc, #108]	; 12ffc <__assert_fail@plt+0x1ca0>
   12f8c:	mov	r0, #0
   12f90:	ldr	r4, [r4]
   12f94:	bl	110ec <dcgettext@plt>
   12f98:	add	r2, sp, #12
   12f9c:	mov	r1, r7
   12fa0:	mov	r8, r0
   12fa4:	mov	r0, r6
   12fa8:	bl	136f0 <__assert_fail@plt+0x2394>
   12fac:	mov	r2, r8
   12fb0:	mov	r1, #1
   12fb4:	mov	r3, r0
   12fb8:	mov	r0, r4
   12fbc:	bl	11284 <__fprintf_chk@plt>
   12fc0:	cmp	r5, #0
   12fc4:	beq	12fdc <__assert_fail@plt+0x1c80>
   12fc8:	bl	124d8 <__assert_fail@plt+0x117c>
   12fcc:	ldr	r1, [r4]
   12fd0:	mov	r0, #10
   12fd4:	bl	112f0 <fputc@plt>
   12fd8:	b	12fc0 <__assert_fail@plt+0x1c64>
   12fdc:	bl	12eec <__assert_fail@plt+0x1b90>
   12fe0:	bl	12538 <__assert_fail@plt+0x11dc>
   12fe4:	b	12fc8 <__assert_fail@plt+0x1c6c>
   12fe8:	andeq	r9, r2, r8, lsl #30
   12fec:	andeq	sl, r2, r8, lsl #3
   12ff0:	andeq	r8, r1, r0, lsr r3
   12ff4:	andeq	sl, r2, r0, lsr #3
   12ff8:	muleq	r2, r8, r2
   12ffc:	strdeq	r8, [r1], -ip
   13000:	push	{r4, r5, r6, r7, r8, lr}
   13004:	mov	r6, r0
   13008:	ldr	r5, [pc, #216]	; 130e8 <__assert_fail@plt+0x1d8c>
   1300c:	mov	r7, r1
   13010:	ldr	r4, [r5, #208]	; 0xd0
   13014:	cmp	r4, #0
   13018:	beq	13094 <__assert_fail@plt+0x1d38>
   1301c:	ldrd	r0, [r4, #8]
   13020:	cmp	r1, r7
   13024:	cmpeq	r0, r6
   13028:	bls	13038 <__assert_fail@plt+0x1cdc>
   1302c:	b	130a0 <__assert_fail@plt+0x1d44>
   13030:	ldrd	r0, [r3, #8]
   13034:	mov	r4, r3
   13038:	ldr	ip, [r4, #24]
   1303c:	adds	r2, r0, ip
   13040:	adc	r3, r1, #0
   13044:	cmp	r3, r7
   13048:	cmpeq	r2, r6
   1304c:	bhi	130bc <__assert_fail@plt+0x1d60>
   13050:	ldr	r3, [r4, #40]	; 0x28
   13054:	cmp	r3, #0
   13058:	bne	13030 <__assert_fail@plt+0x1cd4>
   1305c:	ldrb	r3, [r5, #204]	; 0xcc
   13060:	cmp	r3, #0
   13064:	bne	130a0 <__assert_fail@plt+0x1d44>
   13068:	bl	12b64 <__assert_fail@plt+0x1808>
   1306c:	cmp	r0, #0
   13070:	beq	130a0 <__assert_fail@plt+0x1d44>
   13074:	ldr	r3, [r4, #40]	; 0x28
   13078:	cmp	r3, #0
   1307c:	bne	13030 <__assert_fail@plt+0x1cd4>
   13080:	ldr	r3, [pc, #100]	; 130ec <__assert_fail@plt+0x1d90>
   13084:	ldr	r2, [pc, #100]	; 130f0 <__assert_fail@plt+0x1d94>
   13088:	ldr	r1, [pc, #100]	; 130f4 <__assert_fail@plt+0x1d98>
   1308c:	ldr	r0, [pc, #100]	; 130f8 <__assert_fail@plt+0x1d9c>
   13090:	bl	1135c <__assert_fail@plt>
   13094:	ldrb	r3, [r5, #204]	; 0xcc
   13098:	cmp	r3, #0
   1309c:	beq	130a8 <__assert_fail@plt+0x1d4c>
   130a0:	mov	r0, #0
   130a4:	pop	{r4, r5, r6, r7, r8, pc}
   130a8:	bl	12b64 <__assert_fail@plt+0x1808>
   130ac:	cmp	r0, #0
   130b0:	beq	130a0 <__assert_fail@plt+0x1d44>
   130b4:	ldr	r4, [r5, #208]	; 0xd0
   130b8:	b	1301c <__assert_fail@plt+0x1cc0>
   130bc:	sub	r0, r6, r0
   130c0:	cmp	r0, #79	; 0x4f
   130c4:	ldr	r6, [r4, #32]
   130c8:	bls	130dc <__assert_fail@plt+0x1d80>
   130cc:	sub	r0, r0, #80	; 0x50
   130d0:	cmp	r0, #79	; 0x4f
   130d4:	ldr	r6, [r6, #652]	; 0x28c
   130d8:	bhi	130cc <__assert_fail@plt+0x1d70>
   130dc:	add	r0, r6, r0, lsl #3
   130e0:	add	r0, r0, #12
   130e4:	pop	{r4, r5, r6, r7, r8, pc}
   130e8:	andeq	sl, r2, r0, lsr #3
   130ec:	muleq	r1, r8, r1
   130f0:	andeq	r0, r0, sl, ror #4
   130f4:	andeq	r8, r1, r8, asr #6
   130f8:	andeq	r8, r1, r8, asr r3
   130fc:	push	{r4, lr}
   13100:	ldr	r4, [pc, #92]	; 13164 <__assert_fail@plt+0x1e08>
   13104:	ldr	r3, [r4, #208]	; 0xd0
   13108:	cmp	r3, #0
   1310c:	beq	13118 <__assert_fail@plt+0x1dbc>
   13110:	ldrd	r0, [r3, #16]
   13114:	pop	{r4, pc}
   13118:	ldrb	r3, [r4, #204]	; 0xcc
   1311c:	cmp	r3, #0
   13120:	bne	1313c <__assert_fail@plt+0x1de0>
   13124:	bl	12b64 <__assert_fail@plt+0x1808>
   13128:	cmp	r0, #0
   1312c:	beq	1313c <__assert_fail@plt+0x1de0>
   13130:	ldr	r3, [r4, #208]	; 0xd0
   13134:	ldrd	r0, [r3, #16]
   13138:	pop	{r4, pc}
   1313c:	bl	1123c <__errno_location@plt>
   13140:	mov	r2, #5
   13144:	ldr	r1, [pc, #28]	; 13168 <__assert_fail@plt+0x1e0c>
   13148:	ldr	r4, [r0]
   1314c:	mov	r0, #0
   13150:	bl	110ec <dcgettext@plt>
   13154:	mov	r1, r4
   13158:	mov	r2, r0
   1315c:	mov	r0, #1
   13160:	bl	111a0 <error@plt>
   13164:	andeq	sl, r2, r0, lsr #3
   13168:	andeq	r8, r1, ip, asr r3
   1316c:	ldr	r3, [pc, #792]	; 1348c <__assert_fail@plt+0x2130>
   13170:	push	{r7, lr}
   13174:	sub	sp, sp, #64	; 0x40
   13178:	ldr	r3, [r3]
   1317c:	subs	r4, r0, #0
   13180:	str	r3, [sp, #60]	; 0x3c
   13184:	beq	131c0 <__assert_fail@plt+0x1e64>
   13188:	ldr	r3, [pc, #768]	; 13490 <__assert_fail@plt+0x2134>
   1318c:	mov	r2, #5
   13190:	ldr	r1, [pc, #764]	; 13494 <__assert_fail@plt+0x2138>
   13194:	mov	r0, #0
   13198:	ldr	r5, [r3]
   1319c:	bl	110ec <dcgettext@plt>
   131a0:	ldr	r3, [pc, #752]	; 13498 <__assert_fail@plt+0x213c>
   131a4:	mov	r1, #1
   131a8:	ldr	r3, [r3]
   131ac:	mov	r2, r0
   131b0:	mov	r0, r5
   131b4:	bl	11284 <__fprintf_chk@plt>
   131b8:	mov	r0, r4
   131bc:	bl	1120c <exit@plt>
   131c0:	mov	r2, #5
   131c4:	ldr	r1, [pc, #720]	; 1349c <__assert_fail@plt+0x2140>
   131c8:	bl	110ec <dcgettext@plt>
   131cc:	ldr	r3, [pc, #708]	; 13498 <__assert_fail@plt+0x213c>
   131d0:	ldr	r5, [pc, #712]	; 134a0 <__assert_fail@plt+0x2144>
   131d4:	ldr	r2, [r3]
   131d8:	mov	r1, r0
   131dc:	mov	r0, #1
   131e0:	bl	1126c <__printf_chk@plt>
   131e4:	mov	r2, #5
   131e8:	ldr	r1, [pc, #692]	; 134a4 <__assert_fail@plt+0x2148>
   131ec:	mov	r0, r4
   131f0:	bl	110ec <dcgettext@plt>
   131f4:	ldr	r1, [r5]
   131f8:	bl	11044 <fputs_unlocked@plt>
   131fc:	mov	r2, #5
   13200:	ldr	r1, [pc, #672]	; 134a8 <__assert_fail@plt+0x214c>
   13204:	mov	r0, r4
   13208:	bl	110ec <dcgettext@plt>
   1320c:	ldr	r1, [r5]
   13210:	bl	11044 <fputs_unlocked@plt>
   13214:	mov	r2, #5
   13218:	ldr	r1, [pc, #652]	; 134ac <__assert_fail@plt+0x2150>
   1321c:	mov	r0, r4
   13220:	bl	110ec <dcgettext@plt>
   13224:	ldr	r1, [r5]
   13228:	bl	11044 <fputs_unlocked@plt>
   1322c:	mov	r2, #5
   13230:	ldr	r1, [pc, #632]	; 134b0 <__assert_fail@plt+0x2154>
   13234:	mov	r0, r4
   13238:	bl	110ec <dcgettext@plt>
   1323c:	ldr	r1, [r5]
   13240:	bl	11044 <fputs_unlocked@plt>
   13244:	mov	r2, #5
   13248:	ldr	r1, [pc, #612]	; 134b4 <__assert_fail@plt+0x2158>
   1324c:	mov	r0, r4
   13250:	bl	110ec <dcgettext@plt>
   13254:	ldr	r1, [r5]
   13258:	bl	11044 <fputs_unlocked@plt>
   1325c:	mov	r2, #5
   13260:	ldr	r1, [pc, #592]	; 134b8 <__assert_fail@plt+0x215c>
   13264:	mov	r0, r4
   13268:	bl	110ec <dcgettext@plt>
   1326c:	ldr	r1, [r5]
   13270:	bl	11044 <fputs_unlocked@plt>
   13274:	mov	r2, #5
   13278:	ldr	r1, [pc, #572]	; 134bc <__assert_fail@plt+0x2160>
   1327c:	mov	r0, r4
   13280:	bl	110ec <dcgettext@plt>
   13284:	ldr	r1, [r5]
   13288:	bl	11044 <fputs_unlocked@plt>
   1328c:	mov	r2, #5
   13290:	ldr	r1, [pc, #552]	; 134c0 <__assert_fail@plt+0x2164>
   13294:	mov	r0, r4
   13298:	bl	110ec <dcgettext@plt>
   1329c:	ldr	r1, [r5]
   132a0:	bl	11044 <fputs_unlocked@plt>
   132a4:	mov	r2, #5
   132a8:	ldr	r1, [pc, #532]	; 134c4 <__assert_fail@plt+0x2168>
   132ac:	mov	r0, r4
   132b0:	bl	110ec <dcgettext@plt>
   132b4:	ldr	r1, [r5]
   132b8:	bl	11044 <fputs_unlocked@plt>
   132bc:	ldr	lr, [pc, #516]	; 134c8 <__assert_fail@plt+0x216c>
   132c0:	add	ip, sp, #4
   132c4:	ldm	lr!, {r0, r1, r2, r3}
   132c8:	stmia	ip!, {r0, r1, r2, r3}
   132cc:	ldm	lr!, {r0, r1, r2, r3}
   132d0:	ldr	r6, [sp, #4]
   132d4:	stmia	ip!, {r0, r1, r2, r3}
   132d8:	cmp	r6, #0
   132dc:	ldm	lr!, {r0, r1, r2, r3}
   132e0:	addeq	r5, sp, #4
   132e4:	stmia	ip!, {r0, r1, r2, r3}
   132e8:	ldm	lr, {r0, r1}
   132ec:	stm	ip, {r0, r1}
   132f0:	beq	13320 <__assert_fail@plt+0x1fc4>
   132f4:	ldr	r7, [pc, #464]	; 134cc <__assert_fail@plt+0x2170>
   132f8:	add	r5, sp, #4
   132fc:	b	1330c <__assert_fail@plt+0x1fb0>
   13300:	ldr	r6, [r5, #8]!
   13304:	cmp	r6, #0
   13308:	beq	13320 <__assert_fail@plt+0x1fc4>
   1330c:	mov	r1, r6
   13310:	mov	r0, r7
   13314:	bl	1105c <strcmp@plt>
   13318:	cmp	r0, #0
   1331c:	bne	13300 <__assert_fail@plt+0x1fa4>
   13320:	ldr	r5, [r5, #4]
   13324:	mov	r2, #5
   13328:	cmp	r5, #0
   1332c:	ldr	r1, [pc, #412]	; 134d0 <__assert_fail@plt+0x2174>
   13330:	beq	133d8 <__assert_fail@plt+0x207c>
   13334:	mov	r0, #0
   13338:	bl	110ec <dcgettext@plt>
   1333c:	ldr	r3, [pc, #400]	; 134d4 <__assert_fail@plt+0x2178>
   13340:	ldr	r2, [pc, #400]	; 134d8 <__assert_fail@plt+0x217c>
   13344:	mov	r1, r0
   13348:	mov	r0, #1
   1334c:	bl	1126c <__printf_chk@plt>
   13350:	mov	r1, #0
   13354:	mov	r0, #5
   13358:	bl	112c0 <setlocale@plt>
   1335c:	cmp	r0, #0
   13360:	ldreq	r6, [pc, #356]	; 134cc <__assert_fail@plt+0x2170>
   13364:	beq	13380 <__assert_fail@plt+0x2024>
   13368:	mov	r2, #3
   1336c:	ldr	r1, [pc, #360]	; 134dc <__assert_fail@plt+0x2180>
   13370:	bl	1132c <strncmp@plt>
   13374:	ldr	r6, [pc, #336]	; 134cc <__assert_fail@plt+0x2170>
   13378:	cmp	r0, #0
   1337c:	bne	13468 <__assert_fail@plt+0x210c>
   13380:	mov	r2, #5
   13384:	ldr	r1, [pc, #340]	; 134e0 <__assert_fail@plt+0x2184>
   13388:	mov	r0, #0
   1338c:	bl	110ec <dcgettext@plt>
   13390:	ldr	r3, [pc, #308]	; 134cc <__assert_fail@plt+0x2170>
   13394:	ldr	r2, [pc, #312]	; 134d4 <__assert_fail@plt+0x2178>
   13398:	mov	r1, r0
   1339c:	mov	r0, #1
   133a0:	bl	1126c <__printf_chk@plt>
   133a4:	mov	r2, #5
   133a8:	ldr	r1, [pc, #308]	; 134e4 <__assert_fail@plt+0x2188>
   133ac:	mov	r0, #0
   133b0:	bl	110ec <dcgettext@plt>
   133b4:	ldr	r2, [pc, #300]	; 134e8 <__assert_fail@plt+0x218c>
   133b8:	cmp	r5, r6
   133bc:	ldr	r3, [pc, #296]	; 134ec <__assert_fail@plt+0x2190>
   133c0:	movne	r3, r2
   133c4:	mov	r1, r0
   133c8:	mov	r2, r5
   133cc:	mov	r0, #1
   133d0:	bl	1126c <__printf_chk@plt>
   133d4:	b	131b8 <__assert_fail@plt+0x1e5c>
   133d8:	mov	r0, r5
   133dc:	bl	110ec <dcgettext@plt>
   133e0:	ldr	r3, [pc, #236]	; 134d4 <__assert_fail@plt+0x2178>
   133e4:	ldr	r2, [pc, #236]	; 134d8 <__assert_fail@plt+0x217c>
   133e8:	mov	r1, r0
   133ec:	mov	r0, #1
   133f0:	bl	1126c <__printf_chk@plt>
   133f4:	mov	r1, r5
   133f8:	mov	r0, #5
   133fc:	bl	112c0 <setlocale@plt>
   13400:	cmp	r0, #0
   13404:	beq	1341c <__assert_fail@plt+0x20c0>
   13408:	mov	r2, #3
   1340c:	ldr	r1, [pc, #200]	; 134dc <__assert_fail@plt+0x2180>
   13410:	bl	1132c <strncmp@plt>
   13414:	cmp	r0, #0
   13418:	bne	13460 <__assert_fail@plt+0x2104>
   1341c:	mov	r2, #5
   13420:	ldr	r1, [pc, #184]	; 134e0 <__assert_fail@plt+0x2184>
   13424:	mov	r0, #0
   13428:	bl	110ec <dcgettext@plt>
   1342c:	ldr	r3, [pc, #152]	; 134cc <__assert_fail@plt+0x2170>
   13430:	ldr	r2, [pc, #156]	; 134d4 <__assert_fail@plt+0x2178>
   13434:	mov	r5, r3
   13438:	mov	r1, r0
   1343c:	mov	r0, #1
   13440:	bl	1126c <__printf_chk@plt>
   13444:	ldr	r1, [pc, #152]	; 134e4 <__assert_fail@plt+0x2188>
   13448:	mov	r2, #5
   1344c:	mov	r0, #0
   13450:	bl	110ec <dcgettext@plt>
   13454:	ldr	r3, [pc, #144]	; 134ec <__assert_fail@plt+0x2190>
   13458:	mov	r1, r0
   1345c:	b	133c8 <__assert_fail@plt+0x206c>
   13460:	ldr	r6, [pc, #100]	; 134cc <__assert_fail@plt+0x2170>
   13464:	mov	r5, r6
   13468:	mov	r2, #5
   1346c:	ldr	r1, [pc, #124]	; 134f0 <__assert_fail@plt+0x2194>
   13470:	mov	r0, #0
   13474:	bl	110ec <dcgettext@plt>
   13478:	ldr	r2, [pc, #76]	; 134cc <__assert_fail@plt+0x2170>
   1347c:	mov	r1, r0
   13480:	mov	r0, #1
   13484:	bl	1126c <__printf_chk@plt>
   13488:	b	13380 <__assert_fail@plt+0x2024>
   1348c:	andeq	r9, r2, r8, lsl #30
   13490:	andeq	sl, r2, r8, lsl #3
   13494:	andeq	r8, r1, r8, ror r3
   13498:	muleq	r2, r8, r2
   1349c:	andeq	r8, r1, r0, lsr #7
   134a0:	muleq	r2, r0, r1
   134a4:	andeq	r8, r1, r8, asr #7
   134a8:	andeq	r8, r1, r0, asr r4
   134ac:	andeq	r8, r1, r4, ror r4
   134b0:	andeq	r8, r1, r0, asr #9
   134b4:	andeq	r8, r1, ip, ror r5
   134b8:	andeq	r8, r1, r0, asr #11
   134bc:	andeq	r8, r1, r8, lsl #13
   134c0:			; <UNDEFINED> instruction: 0x000186b8
   134c4:	strdeq	r8, [r1], -r0
   134c8:	andeq	r8, r1, r4, lsr #3
   134cc:	andeq	r8, r1, r0, ror r3
   134d0:			; <UNDEFINED> instruction: 0x000188b0
   134d4:	andeq	r8, r1, r8, asr #17
   134d8:	strdeq	r8, [r1], -r0
   134dc:	andeq	r8, r1, r0, lsl #18
   134e0:	andeq	r8, r1, ip, asr #18
   134e4:	andeq	r8, r1, ip, ror #18
   134e8:	andeq	r9, r1, r8, ror #3
   134ec:	strdeq	r8, [r1], -ip
   134f0:	andeq	r8, r1, r4, lsl #18
   134f4:	ldr	r3, [pc, #4]	; 13500 <__assert_fail@plt+0x21a4>
   134f8:	str	r0, [r3]
   134fc:	bx	lr
   13500:	muleq	r2, r0, r2
   13504:	ldr	r3, [pc, #4]	; 13510 <__assert_fail@plt+0x21b4>
   13508:	strb	r0, [r3, #4]
   1350c:	bx	lr
   13510:	muleq	r2, r0, r2
   13514:	ldr	r3, [pc, #180]	; 135d0 <__assert_fail@plt+0x2274>
   13518:	push	{r4, r5, r6, lr}
   1351c:	sub	sp, sp, #8
   13520:	ldr	r0, [r3]
   13524:	bl	17bc8 <__assert_fail@plt+0x686c>
   13528:	cmp	r0, #0
   1352c:	beq	13554 <__assert_fail@plt+0x21f8>
   13530:	bl	1123c <__errno_location@plt>
   13534:	ldr	r5, [pc, #152]	; 135d4 <__assert_fail@plt+0x2278>
   13538:	ldrb	r3, [r5, #4]
   1353c:	cmp	r3, #0
   13540:	mov	r4, r0
   13544:	beq	13570 <__assert_fail@plt+0x2214>
   13548:	ldr	r3, [r0]
   1354c:	cmp	r3, #32
   13550:	bne	13570 <__assert_fail@plt+0x2214>
   13554:	ldr	r3, [pc, #124]	; 135d8 <__assert_fail@plt+0x227c>
   13558:	ldr	r0, [r3]
   1355c:	bl	17bc8 <__assert_fail@plt+0x686c>
   13560:	cmp	r0, #0
   13564:	bne	135b0 <__assert_fail@plt+0x2254>
   13568:	add	sp, sp, #8
   1356c:	pop	{r4, r5, r6, pc}
   13570:	mov	r2, #5
   13574:	ldr	r1, [pc, #96]	; 135dc <__assert_fail@plt+0x2280>
   13578:	mov	r0, #0
   1357c:	bl	110ec <dcgettext@plt>
   13580:	mov	r6, r0
   13584:	ldr	r0, [r5]
   13588:	cmp	r0, #0
   1358c:	beq	135bc <__assert_fail@plt+0x2260>
   13590:	ldr	r4, [r4]
   13594:	bl	157d8 <__assert_fail@plt+0x447c>
   13598:	mov	r1, r4
   1359c:	str	r6, [sp]
   135a0:	ldr	r2, [pc, #56]	; 135e0 <__assert_fail@plt+0x2284>
   135a4:	mov	r3, r0
   135a8:	mov	r0, #0
   135ac:	bl	111a0 <error@plt>
   135b0:	ldr	r3, [pc, #44]	; 135e4 <__assert_fail@plt+0x2288>
   135b4:	ldr	r0, [r3]
   135b8:	bl	11098 <_exit@plt>
   135bc:	mov	r3, r6
   135c0:	ldr	r1, [r4]
   135c4:	ldr	r2, [pc, #28]	; 135e8 <__assert_fail@plt+0x228c>
   135c8:	bl	111a0 <error@plt>
   135cc:	b	135b0 <__assert_fail@plt+0x2254>
   135d0:	muleq	r2, r0, r1
   135d4:	muleq	r2, r0, r2
   135d8:	andeq	sl, r2, r8, lsl #3
   135dc:	ldrdeq	r8, [r1], -ip
   135e0:	andeq	r8, r1, r8, ror #27
   135e4:	andeq	sl, r2, r4, lsr r1
   135e8:	muleq	r1, r8, fp
   135ec:	mov	ip, r1
   135f0:	push	{r4, r5, r6, r7, r8, lr}
   135f4:	mov	r1, r2
   135f8:	mov	r5, r0
   135fc:	mov	r2, r3
   13600:	mov	r0, ip
   13604:	bl	111ac <open64@plt>
   13608:	sub	r3, r5, r0
   1360c:	clz	r3, r3
   13610:	lsr	r3, r3, #5
   13614:	orrs	r3, r3, r0, lsr #31
   13618:	mov	r4, r0
   1361c:	beq	13628 <__assert_fail@plt+0x22cc>
   13620:	mov	r0, r4
   13624:	pop	{r4, r5, r6, r7, r8, pc}
   13628:	mov	r1, r5
   1362c:	bl	11110 <dup2@plt>
   13630:	mov	r7, r0
   13634:	bl	1123c <__errno_location@plt>
   13638:	mov	r5, r0
   1363c:	mov	r0, r4
   13640:	ldr	r6, [r5]
   13644:	mov	r4, r7
   13648:	bl	11344 <close@plt>
   1364c:	str	r6, [r5]
   13650:	mov	r0, r4
   13654:	pop	{r4, r5, r6, r7, r8, pc}
   13658:	push	{r4, r5, r6, lr}
   1365c:	mov	r5, r1
   13660:	bl	11308 <fopen64@plt>
   13664:	subs	r4, r0, #0
   13668:	beq	13678 <__assert_fail@plt+0x231c>
   1366c:	bl	11278 <fileno@plt>
   13670:	cmp	r0, #2
   13674:	bls	13680 <__assert_fail@plt+0x2324>
   13678:	mov	r0, r4
   1367c:	pop	{r4, r5, r6, pc}
   13680:	bl	15a38 <__assert_fail@plt+0x46dc>
   13684:	subs	r6, r0, #0
   13688:	blt	136d0 <__assert_fail@plt+0x2374>
   1368c:	mov	r0, r4
   13690:	bl	1785c <__assert_fail@plt+0x6500>
   13694:	cmp	r0, #0
   13698:	bne	136b0 <__assert_fail@plt+0x2354>
   1369c:	mov	r1, r5
   136a0:	mov	r0, r6
   136a4:	bl	1102c <fdopen@plt>
   136a8:	subs	r4, r0, #0
   136ac:	bne	13678 <__assert_fail@plt+0x231c>
   136b0:	bl	1123c <__errno_location@plt>
   136b4:	mov	r4, #0
   136b8:	mov	r5, r0
   136bc:	mov	r0, r6
   136c0:	ldr	r6, [r5]
   136c4:	bl	11344 <close@plt>
   136c8:	str	r6, [r5]
   136cc:	b	13678 <__assert_fail@plt+0x231c>
   136d0:	bl	1123c <__errno_location@plt>
   136d4:	mov	r5, r0
   136d8:	mov	r0, r4
   136dc:	ldr	r6, [r5]
   136e0:	mov	r4, #0
   136e4:	bl	1785c <__assert_fail@plt+0x6500>
   136e8:	str	r6, [r5]
   136ec:	b	13678 <__assert_fail@plt+0x231c>
   136f0:	push	{r4, r5, r6, lr}
   136f4:	mov	r4, r0
   136f8:	mov	r5, r1
   136fc:	add	r6, r2, #20
   13700:	mov	r3, #0
   13704:	strb	r3, [r2, #20]
   13708:	mov	r0, r4
   1370c:	mov	r1, r5
   13710:	mov	r2, #10
   13714:	mov	r3, #0
   13718:	bl	17f9c <__assert_fail@plt+0x6c40>
   1371c:	mov	r0, r4
   13720:	mov	r1, r5
   13724:	mov	r3, #0
   13728:	add	r2, r2, #48	; 0x30
   1372c:	strb	r2, [r6, #-1]!
   13730:	mov	r2, #10
   13734:	bl	17f9c <__assert_fail@plt+0x6c40>
   13738:	cmp	r5, #0
   1373c:	cmpeq	r4, #9
   13740:	mov	r5, r1
   13744:	mov	r4, r0
   13748:	bhi	13708 <__assert_fail@plt+0x23ac>
   1374c:	mov	r0, r6
   13750:	pop	{r4, r5, r6, pc}
   13754:	push	{r4, r5, r6, lr}
   13758:	subs	r4, r0, #0
   1375c:	beq	137d0 <__assert_fail@plt+0x2474>
   13760:	mov	r1, #47	; 0x2f
   13764:	bl	112d8 <strrchr@plt>
   13768:	subs	r5, r0, #0
   1376c:	beq	137bc <__assert_fail@plt+0x2460>
   13770:	add	r6, r5, #1
   13774:	sub	r3, r6, r4
   13778:	cmp	r3, #6
   1377c:	ble	137bc <__assert_fail@plt+0x2460>
   13780:	mov	r2, #7
   13784:	ldr	r1, [pc, #96]	; 137ec <__assert_fail@plt+0x2490>
   13788:	sub	r0, r5, #6
   1378c:	bl	1132c <strncmp@plt>
   13790:	cmp	r0, #0
   13794:	bne	137bc <__assert_fail@plt+0x2460>
   13798:	mov	r2, #3
   1379c:	ldr	r1, [pc, #76]	; 137f0 <__assert_fail@plt+0x2494>
   137a0:	mov	r0, r6
   137a4:	bl	1132c <strncmp@plt>
   137a8:	cmp	r0, #0
   137ac:	movne	r4, r6
   137b0:	ldreq	r3, [pc, #60]	; 137f4 <__assert_fail@plt+0x2498>
   137b4:	addeq	r4, r5, #4
   137b8:	streq	r4, [r3]
   137bc:	ldr	r2, [pc, #52]	; 137f8 <__assert_fail@plt+0x249c>
   137c0:	ldr	r3, [pc, #52]	; 137fc <__assert_fail@plt+0x24a0>
   137c4:	str	r4, [r2]
   137c8:	str	r4, [r3]
   137cc:	pop	{r4, r5, r6, pc}
   137d0:	ldr	r3, [pc, #40]	; 13800 <__assert_fail@plt+0x24a4>
   137d4:	mov	r2, #55	; 0x37
   137d8:	mov	r1, #1
   137dc:	ldr	r3, [r3]
   137e0:	ldr	r0, [pc, #28]	; 13804 <__assert_fail@plt+0x24a8>
   137e4:	bl	11158 <fwrite@plt>
   137e8:	bl	11338 <abort@plt>
   137ec:	andeq	r8, r1, r8, lsr #28
   137f0:	andeq	r8, r1, r0, lsr lr
   137f4:	andeq	sl, r2, r8, ror r1
   137f8:	muleq	r2, r8, r2
   137fc:	andeq	sl, r2, ip, ror r1
   13800:	andeq	sl, r2, r8, lsl #3
   13804:	strdeq	r8, [r1], -r0
   13808:	push	{r4, lr}
   1380c:	mov	r2, #48	; 0x30
   13810:	mov	r4, r1
   13814:	mov	r1, #0
   13818:	bl	11260 <memset@plt>
   1381c:	cmp	r4, #10
   13820:	beq	1382c <__assert_fail@plt+0x24d0>
   13824:	str	r4, [r0]
   13828:	pop	{r4, pc}
   1382c:	bl	11338 <abort@plt>
   13830:	push	{r4, r5, r6, lr}
   13834:	mov	r2, #5
   13838:	mov	r5, r0
   1383c:	mov	r6, r1
   13840:	mov	r1, r0
   13844:	mov	r0, #0
   13848:	bl	110ec <dcgettext@plt>
   1384c:	cmp	r5, r0
   13850:	mov	r4, r0
   13854:	beq	13860 <__assert_fail@plt+0x2504>
   13858:	mov	r0, r4
   1385c:	pop	{r4, r5, r6, pc}
   13860:	bl	17c88 <__assert_fail@plt+0x692c>
   13864:	ldrb	r3, [r0]
   13868:	bic	r3, r3, #32
   1386c:	cmp	r3, #85	; 0x55
   13870:	bne	138d0 <__assert_fail@plt+0x2574>
   13874:	ldrb	r3, [r0, #1]
   13878:	bic	r3, r3, #32
   1387c:	cmp	r3, #84	; 0x54
   13880:	bne	13948 <__assert_fail@plt+0x25ec>
   13884:	ldrb	r3, [r0, #2]
   13888:	bic	r3, r3, #32
   1388c:	cmp	r3, #70	; 0x46
   13890:	bne	13948 <__assert_fail@plt+0x25ec>
   13894:	ldrb	r3, [r0, #3]
   13898:	cmp	r3, #45	; 0x2d
   1389c:	bne	13948 <__assert_fail@plt+0x25ec>
   138a0:	ldrb	r3, [r0, #4]
   138a4:	cmp	r3, #56	; 0x38
   138a8:	bne	13948 <__assert_fail@plt+0x25ec>
   138ac:	ldrb	r3, [r0, #5]
   138b0:	cmp	r3, #0
   138b4:	bne	13948 <__assert_fail@plt+0x25ec>
   138b8:	ldrb	r2, [r4]
   138bc:	ldr	r3, [pc, #156]	; 13960 <__assert_fail@plt+0x2604>
   138c0:	ldr	r4, [pc, #156]	; 13964 <__assert_fail@plt+0x2608>
   138c4:	cmp	r2, #96	; 0x60
   138c8:	movne	r4, r3
   138cc:	b	13858 <__assert_fail@plt+0x24fc>
   138d0:	cmp	r3, #71	; 0x47
   138d4:	bne	13948 <__assert_fail@plt+0x25ec>
   138d8:	ldrb	r3, [r0, #1]
   138dc:	bic	r3, r3, #32
   138e0:	cmp	r3, #66	; 0x42
   138e4:	bne	13948 <__assert_fail@plt+0x25ec>
   138e8:	ldrb	r3, [r0, #2]
   138ec:	cmp	r3, #49	; 0x31
   138f0:	bne	13948 <__assert_fail@plt+0x25ec>
   138f4:	ldrb	r3, [r0, #3]
   138f8:	cmp	r3, #56	; 0x38
   138fc:	bne	13948 <__assert_fail@plt+0x25ec>
   13900:	ldrb	r3, [r0, #4]
   13904:	cmp	r3, #48	; 0x30
   13908:	bne	13948 <__assert_fail@plt+0x25ec>
   1390c:	ldrb	r3, [r0, #5]
   13910:	cmp	r3, #51	; 0x33
   13914:	bne	13948 <__assert_fail@plt+0x25ec>
   13918:	ldrb	r3, [r0, #6]
   1391c:	cmp	r3, #48	; 0x30
   13920:	bne	13948 <__assert_fail@plt+0x25ec>
   13924:	ldrb	r3, [r0, #7]
   13928:	cmp	r3, #0
   1392c:	bne	13948 <__assert_fail@plt+0x25ec>
   13930:	ldrb	r2, [r4]
   13934:	ldr	r3, [pc, #44]	; 13968 <__assert_fail@plt+0x260c>
   13938:	ldr	r4, [pc, #44]	; 1396c <__assert_fail@plt+0x2610>
   1393c:	cmp	r2, #96	; 0x60
   13940:	movne	r4, r3
   13944:	b	13858 <__assert_fail@plt+0x24fc>
   13948:	ldr	r3, [pc, #32]	; 13970 <__assert_fail@plt+0x2614>
   1394c:	ldr	r4, [pc, #32]	; 13974 <__assert_fail@plt+0x2618>
   13950:	cmp	r6, #9
   13954:	movne	r4, r3
   13958:	mov	r0, r4
   1395c:	pop	{r4, r5, r6, pc}
   13960:	andeq	r8, r1, ip, lsl #29
   13964:	muleq	r1, r8, lr
   13968:	muleq	r1, r0, lr
   1396c:	muleq	r1, r4, lr
   13970:	andeq	r8, r1, ip, asr #25
   13974:	andeq	r8, r1, r8, lsl #29
   13978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1397c:	sub	sp, sp, #124	; 0x7c
   13980:	ldr	ip, [pc, #3576]	; 14780 <__assert_fail@plt+0x3424>
   13984:	str	r3, [sp, #24]
   13988:	ldr	r3, [sp, #168]	; 0xa8
   1398c:	ldr	ip, [ip]
   13990:	str	r3, [sp, #56]	; 0x38
   13994:	ldr	r3, [sp, #172]	; 0xac
   13998:	ldr	r8, [sp, #160]	; 0xa0
   1399c:	str	r3, [sp, #80]	; 0x50
   139a0:	ldr	r3, [sp, #176]	; 0xb0
   139a4:	mov	fp, r0
   139a8:	str	r3, [sp, #76]	; 0x4c
   139ac:	mov	sl, r1
   139b0:	str	r2, [sp, #36]	; 0x24
   139b4:	str	ip, [sp, #116]	; 0x74
   139b8:	bl	11170 <__ctype_get_mb_cur_max@plt>
   139bc:	ldr	r3, [sp, #164]	; 0xa4
   139c0:	ands	r4, r3, #2
   139c4:	movne	r3, #1
   139c8:	moveq	r3, #0
   139cc:	str	r3, [sp, #32]
   139d0:	str	r0, [sp, #64]	; 0x40
   139d4:	cmp	r8, #10
   139d8:	ldrls	pc, [pc, r8, lsl #2]
   139dc:	b	1518c <__assert_fail@plt+0x3e30>
   139e0:	ldrdeq	r3, [r1], -r4
   139e4:	andeq	r3, r1, ip, ror #28
   139e8:	andeq	r4, r1, ip, ror #8
   139ec:	andeq	r3, r1, ip, lsl #29
   139f0:	andeq	r3, r1, r0, asr #26
   139f4:	andeq	r3, r1, r8, lsl #27
   139f8:	andeq	r3, r1, r4, lsl #28
   139fc:	andeq	r3, r1, ip, lsr lr
   13a00:	andeq	r3, r1, ip, lsl #20
   13a04:	andeq	r3, r1, ip, lsl #20
   13a08:	andeq	r3, r1, ip, lsl #20
   13a0c:	cmp	r8, #10
   13a10:	beq	13a34 <__assert_fail@plt+0x26d8>
   13a14:	mov	r1, r8
   13a18:	ldr	r0, [pc, #3428]	; 14784 <__assert_fail@plt+0x3428>
   13a1c:	bl	13830 <__assert_fail@plt+0x24d4>
   13a20:	mov	r1, r8
   13a24:	str	r0, [sp, #80]	; 0x50
   13a28:	ldr	r0, [pc, #3420]	; 1478c <__assert_fail@plt+0x3430>
   13a2c:	bl	13830 <__assert_fail@plt+0x24d4>
   13a30:	str	r0, [sp, #76]	; 0x4c
   13a34:	cmp	r4, #0
   13a38:	movne	r4, #0
   13a3c:	beq	14e4c <__assert_fail@plt+0x3af0>
   13a40:	ldr	r7, [sp, #76]	; 0x4c
   13a44:	mov	r5, #0
   13a48:	mov	r6, #1
   13a4c:	mov	r0, r7
   13a50:	str	r6, [sp, #40]	; 0x28
   13a54:	str	r5, [sp, #68]	; 0x44
   13a58:	bl	11218 <strlen@plt>
   13a5c:	str	r6, [sp, #28]
   13a60:	str	r5, [sp, #44]	; 0x2c
   13a64:	str	r5, [sp, #72]	; 0x48
   13a68:	str	r7, [sp, #60]	; 0x3c
   13a6c:	str	r0, [sp, #52]	; 0x34
   13a70:	str	r8, [sp, #160]	; 0xa0
   13a74:	mov	r8, fp
   13a78:	ldr	fp, [sp, #160]	; 0xa0
   13a7c:	mov	r9, #0
   13a80:	ldr	r3, [sp, #24]
   13a84:	cmn	r3, #1
   13a88:	beq	13ff0 <__assert_fail@plt+0x2c94>
   13a8c:	ldr	r3, [sp, #24]
   13a90:	subs	r6, r3, r9
   13a94:	movne	r6, #1
   13a98:	cmp	r6, #0
   13a9c:	beq	14008 <__assert_fail@plt+0x2cac>
   13aa0:	ldr	r7, [sp, #28]
   13aa4:	ldr	r0, [sp, #36]	; 0x24
   13aa8:	cmp	fp, #2
   13aac:	moveq	r7, #0
   13ab0:	andne	r7, r7, #1
   13ab4:	add	r3, r0, r9
   13ab8:	cmp	r7, #0
   13abc:	str	r3, [sp, #48]	; 0x30
   13ac0:	beq	144ac <__assert_fail@plt+0x3150>
   13ac4:	ldr	r2, [sp, #52]	; 0x34
   13ac8:	cmp	r2, #0
   13acc:	beq	14790 <__assert_fail@plt+0x3434>
   13ad0:	ldr	r1, [sp, #24]
   13ad4:	cmp	r2, #1
   13ad8:	mov	r3, r2
   13adc:	movls	r3, #0
   13ae0:	movhi	r3, #1
   13ae4:	cmn	r1, #1
   13ae8:	movne	r3, #0
   13aec:	cmp	r3, #0
   13af0:	add	r5, r9, r2
   13af4:	beq	13b00 <__assert_fail@plt+0x27a4>
   13af8:	bl	11218 <strlen@plt>
   13afc:	str	r0, [sp, #24]
   13b00:	ldr	r3, [sp, #24]
   13b04:	cmp	r5, r3
   13b08:	bhi	14790 <__assert_fail@plt+0x3434>
   13b0c:	ldr	r2, [sp, #52]	; 0x34
   13b10:	ldr	r1, [sp, #60]	; 0x3c
   13b14:	ldr	r0, [sp, #48]	; 0x30
   13b18:	bl	110e0 <memcmp@plt>
   13b1c:	cmp	r0, #0
   13b20:	bne	14790 <__assert_fail@plt+0x3434>
   13b24:	ldr	r3, [sp, #32]
   13b28:	cmp	r3, #0
   13b2c:	bne	1504c <__assert_fail@plt+0x3cf0>
   13b30:	ldr	r3, [sp, #48]	; 0x30
   13b34:	ldrb	r5, [r3]
   13b38:	cmp	r5, #126	; 0x7e
   13b3c:	ldrls	pc, [pc, r5, lsl #2]
   13b40:	b	14410 <__assert_fail@plt+0x30b4>
   13b44:	strdeq	r4, [r1], -ip
   13b48:	andeq	r4, r1, r0, lsl r4
   13b4c:	andeq	r4, r1, r0, lsl r4
   13b50:	andeq	r4, r1, r0, lsl r4
   13b54:	andeq	r4, r1, r0, lsl r4
   13b58:	andeq	r4, r1, r0, lsl r4
   13b5c:	andeq	r4, r1, r0, lsl r4
   13b60:	andeq	r4, r1, r8, asr #7
   13b64:			; <UNDEFINED> instruction: 0x000143b8
   13b68:			; <UNDEFINED> instruction: 0x000142b8
   13b6c:	andeq	r4, r1, r0, lsl #5
   13b70:	ldrdeq	r4, [r1], -r8
   13b74:	andeq	r4, r1, r0, asr #5
   13b78:	strdeq	r4, [r1], -r0
   13b7c:	andeq	r4, r1, r0, lsl r4
   13b80:	andeq	r4, r1, r0, lsl r4
   13b84:	andeq	r4, r1, r0, lsl r4
   13b88:	andeq	r4, r1, r0, lsl r4
   13b8c:	andeq	r4, r1, r0, lsl r4
   13b90:	andeq	r4, r1, r0, lsl r4
   13b94:	andeq	r4, r1, r0, lsl r4
   13b98:	andeq	r4, r1, r0, lsl r4
   13b9c:	andeq	r4, r1, r0, lsl r4
   13ba0:	andeq	r4, r1, r0, lsl r4
   13ba4:	andeq	r4, r1, r0, lsl r4
   13ba8:	andeq	r4, r1, r0, lsl r4
   13bac:	andeq	r4, r1, r0, lsl r4
   13bb0:	andeq	r4, r1, r0, lsl r4
   13bb4:	andeq	r4, r1, r0, lsl r4
   13bb8:	andeq	r4, r1, r0, lsl r4
   13bbc:	andeq	r4, r1, r0, lsl r4
   13bc0:	andeq	r4, r1, r0, lsl r4
   13bc4:	ldrdeq	r4, [r1], -r0
   13bc8:	andeq	r4, r1, r4, ror #5
   13bcc:	andeq	r4, r1, r4, ror #5
   13bd0:	andeq	r4, r1, r8, ror #7
   13bd4:	andeq	r4, r1, r4, ror #5
   13bd8:	andeq	r4, r1, r4, lsl #8
   13bdc:	andeq	r4, r1, r4, ror #5
   13be0:	andeq	r4, r1, r4, lsr #2
   13be4:	andeq	r4, r1, r4, ror #5
   13be8:	andeq	r4, r1, r4, ror #5
   13bec:	andeq	r4, r1, r4, ror #5
   13bf0:	andeq	r4, r1, r4, lsl #8
   13bf4:	andeq	r4, r1, r4, lsl #8
   13bf8:	andeq	r4, r1, r4, lsl #8
   13bfc:	andeq	r4, r1, r4, lsl #8
   13c00:	andeq	r4, r1, r4, lsl #8
   13c04:	andeq	r4, r1, r4, lsl #8
   13c08:	andeq	r4, r1, r4, lsl #8
   13c0c:	andeq	r4, r1, r4, lsl #8
   13c10:	andeq	r4, r1, r4, lsl #8
   13c14:	andeq	r4, r1, r4, lsl #8
   13c18:	andeq	r4, r1, r4, lsl #8
   13c1c:	andeq	r4, r1, r4, lsl #8
   13c20:	andeq	r4, r1, r4, lsl #8
   13c24:	andeq	r4, r1, r4, lsl #8
   13c28:	andeq	r4, r1, r4, lsl #8
   13c2c:	andeq	r4, r1, r4, lsl #8
   13c30:	andeq	r4, r1, r4, ror #5
   13c34:	andeq	r4, r1, r4, ror #5
   13c38:	andeq	r4, r1, r4, ror #5
   13c3c:	andeq	r4, r1, r4, ror #5
   13c40:	strdeq	r4, [r1], -r8
   13c44:	andeq	r4, r1, r0, lsl r4
   13c48:	andeq	r4, r1, r4, lsl #8
   13c4c:	andeq	r4, r1, r4, lsl #8
   13c50:	andeq	r4, r1, r4, lsl #8
   13c54:	andeq	r4, r1, r4, lsl #8
   13c58:	andeq	r4, r1, r4, lsl #8
   13c5c:	andeq	r4, r1, r4, lsl #8
   13c60:	andeq	r4, r1, r4, lsl #8
   13c64:	andeq	r4, r1, r4, lsl #8
   13c68:	andeq	r4, r1, r4, lsl #8
   13c6c:	andeq	r4, r1, r4, lsl #8
   13c70:	andeq	r4, r1, r4, lsl #8
   13c74:	andeq	r4, r1, r4, lsl #8
   13c78:	andeq	r4, r1, r4, lsl #8
   13c7c:	andeq	r4, r1, r4, lsl #8
   13c80:	andeq	r4, r1, r4, lsl #8
   13c84:	andeq	r4, r1, r4, lsl #8
   13c88:	andeq	r4, r1, r4, lsl #8
   13c8c:	andeq	r4, r1, r4, lsl #8
   13c90:	andeq	r4, r1, r4, lsl #8
   13c94:	andeq	r4, r1, r4, lsl #8
   13c98:	andeq	r4, r1, r4, lsl #8
   13c9c:	andeq	r4, r1, r4, lsl #8
   13ca0:	andeq	r4, r1, r4, lsl #8
   13ca4:	andeq	r4, r1, r4, lsl #8
   13ca8:	andeq	r4, r1, r4, lsl #8
   13cac:	andeq	r4, r1, r4, lsl #8
   13cb0:	andeq	r4, r1, r4, ror #5
   13cb4:	strheq	r4, [r1], -r0
   13cb8:	andeq	r4, r1, r4, lsl #8
   13cbc:	andeq	r4, r1, r4, ror #5
   13cc0:	andeq	r4, r1, r4, lsl #8
   13cc4:	andeq	r4, r1, r4, ror #5
   13cc8:	andeq	r4, r1, r4, lsl #8
   13ccc:	andeq	r4, r1, r4, lsl #8
   13cd0:	andeq	r4, r1, r4, lsl #8
   13cd4:	andeq	r4, r1, r4, lsl #8
   13cd8:	andeq	r4, r1, r4, lsl #8
   13cdc:	andeq	r4, r1, r4, lsl #8
   13ce0:	andeq	r4, r1, r4, lsl #8
   13ce4:	andeq	r4, r1, r4, lsl #8
   13ce8:	andeq	r4, r1, r4, lsl #8
   13cec:	andeq	r4, r1, r4, lsl #8
   13cf0:	andeq	r4, r1, r4, lsl #8
   13cf4:	andeq	r4, r1, r4, lsl #8
   13cf8:	andeq	r4, r1, r4, lsl #8
   13cfc:	andeq	r4, r1, r4, lsl #8
   13d00:	andeq	r4, r1, r4, lsl #8
   13d04:	andeq	r4, r1, r4, lsl #8
   13d08:	andeq	r4, r1, r4, lsl #8
   13d0c:	andeq	r4, r1, r4, lsl #8
   13d10:	andeq	r4, r1, r4, lsl #8
   13d14:	andeq	r4, r1, r4, lsl #8
   13d18:	andeq	r4, r1, r4, lsl #8
   13d1c:	andeq	r4, r1, r4, lsl #8
   13d20:	andeq	r4, r1, r4, lsl #8
   13d24:	andeq	r4, r1, r4, lsl #8
   13d28:	andeq	r4, r1, r4, lsl #8
   13d2c:	andeq	r4, r1, r4, lsl #8
   13d30:	andeq	r3, r1, r8, asr #29
   13d34:	andeq	r4, r1, r4, ror #5
   13d38:	andeq	r3, r1, r8, asr #29
   13d3c:	andeq	r4, r1, r8, ror #7
   13d40:	cmp	r4, #0
   13d44:	moveq	r3, #1
   13d48:	streq	r3, [sp, #28]
   13d4c:	beq	14478 <__assert_fail@plt+0x311c>
   13d50:	mov	r3, #0
   13d54:	mov	r4, r3
   13d58:	mov	r2, #1
   13d5c:	str	r2, [sp, #40]	; 0x28
   13d60:	str	r3, [sp, #68]	; 0x44
   13d64:	str	r2, [sp, #32]
   13d68:	str	r2, [sp, #52]	; 0x34
   13d6c:	ldr	r3, [pc, #2584]	; 1478c <__assert_fail@plt+0x3430>
   13d70:	str	r4, [sp, #44]	; 0x2c
   13d74:	str	r4, [sp, #72]	; 0x48
   13d78:	str	r4, [sp, #28]
   13d7c:	str	r3, [sp, #60]	; 0x3c
   13d80:	mov	r8, #2
   13d84:	b	13a70 <__assert_fail@plt+0x2714>
   13d88:	cmp	r4, #0
   13d8c:	bne	15018 <__assert_fail@plt+0x3cbc>
   13d90:	cmp	sl, #0
   13d94:	beq	14dd8 <__assert_fail@plt+0x3a7c>
   13d98:	mov	r3, #34	; 0x22
   13d9c:	strb	r3, [fp]
   13da0:	ldr	r3, [pc, #2528]	; 14788 <__assert_fail@plt+0x342c>
   13da4:	mov	r1, r4
   13da8:	mov	r2, #1
   13dac:	str	r4, [sp, #68]	; 0x44
   13db0:	str	r2, [sp, #40]	; 0x28
   13db4:	mov	r4, r2
   13db8:	str	r1, [sp, #44]	; 0x2c
   13dbc:	str	r1, [sp, #72]	; 0x48
   13dc0:	str	r1, [sp, #32]
   13dc4:	str	r2, [sp, #28]
   13dc8:	str	r2, [sp, #52]	; 0x34
   13dcc:	str	r3, [sp, #60]	; 0x3c
   13dd0:	b	13a70 <__assert_fail@plt+0x2714>
   13dd4:	mov	r3, #0
   13dd8:	str	r3, [sp, #68]	; 0x44
   13ddc:	str	r3, [sp, #44]	; 0x2c
   13de0:	str	r3, [sp, #32]
   13de4:	str	r3, [sp, #28]
   13de8:	str	r3, [sp, #60]	; 0x3c
   13dec:	mov	r3, #1
   13df0:	str	r8, [sp, #72]	; 0x48
   13df4:	str	r8, [sp, #52]	; 0x34
   13df8:	mov	r4, r8
   13dfc:	str	r3, [sp, #40]	; 0x28
   13e00:	b	13a70 <__assert_fail@plt+0x2714>
   13e04:	mov	r3, #1
   13e08:	str	r3, [sp, #40]	; 0x28
   13e0c:	str	r3, [sp, #32]
   13e10:	str	r3, [sp, #28]
   13e14:	str	r3, [sp, #52]	; 0x34
   13e18:	ldr	r3, [pc, #2408]	; 14788 <__assert_fail@plt+0x342c>
   13e1c:	mov	r2, #0
   13e20:	mov	r4, r2
   13e24:	str	r2, [sp, #68]	; 0x44
   13e28:	str	r2, [sp, #44]	; 0x2c
   13e2c:	str	r2, [sp, #72]	; 0x48
   13e30:	str	r3, [sp, #60]	; 0x3c
   13e34:	mov	r8, #5
   13e38:	b	13a70 <__assert_fail@plt+0x2714>
   13e3c:	mov	r3, #0
   13e40:	mov	r2, #1
   13e44:	str	r2, [sp, #40]	; 0x28
   13e48:	mov	r4, r3
   13e4c:	str	r3, [sp, #68]	; 0x44
   13e50:	str	r2, [sp, #28]
   13e54:	str	r3, [sp, #44]	; 0x2c
   13e58:	str	r3, [sp, #72]	; 0x48
   13e5c:	str	r3, [sp, #32]
   13e60:	str	r3, [sp, #52]	; 0x34
   13e64:	str	r3, [sp, #60]	; 0x3c
   13e68:	b	13a70 <__assert_fail@plt+0x2714>
   13e6c:	mov	r2, #1
   13e70:	mov	r3, #0
   13e74:	str	r2, [sp, #40]	; 0x28
   13e78:	mov	r4, r3
   13e7c:	str	r3, [sp, #68]	; 0x44
   13e80:	str	r8, [sp, #52]	; 0x34
   13e84:	str	r2, [sp, #32]
   13e88:	b	13d6c <__assert_fail@plt+0x2a10>
   13e8c:	mov	r3, #1
   13e90:	str	r3, [sp, #40]	; 0x28
   13e94:	str	r3, [sp, #32]
   13e98:	str	r3, [sp, #28]
   13e9c:	str	r3, [sp, #52]	; 0x34
   13ea0:	ldr	r3, [pc, #2276]	; 1478c <__assert_fail@plt+0x3430>
   13ea4:	mov	r2, #0
   13ea8:	mov	r4, r2
   13eac:	str	r2, [sp, #68]	; 0x44
   13eb0:	str	r2, [sp, #44]	; 0x2c
   13eb4:	str	r2, [sp, #72]	; 0x48
   13eb8:	str	r3, [sp, #60]	; 0x3c
   13ebc:	mov	r8, #2
   13ec0:	b	13a70 <__assert_fail@plt+0x2714>
   13ec4:	mov	r7, #0
   13ec8:	ldr	r3, [sp, #24]
   13ecc:	cmn	r3, #1
   13ed0:	beq	14a0c <__assert_fail@plt+0x36b0>
   13ed4:	ldr	r3, [sp, #24]
   13ed8:	subs	r3, r3, #1
   13edc:	movne	r3, #1
   13ee0:	cmp	r3, #0
   13ee4:	sub	r2, fp, #2
   13ee8:	clz	r2, r2
   13eec:	lsr	r2, r2, #5
   13ef0:	bne	140ec <__assert_fail@plt+0x2d90>
   13ef4:	cmp	r9, #0
   13ef8:	bne	140ec <__assert_fail@plt+0x2d90>
   13efc:	ldr	r3, [sp, #32]
   13f00:	tst	r3, r2
   13f04:	bne	1420c <__assert_fail@plt+0x2eb0>
   13f08:	ldr	r3, [sp, #28]
   13f0c:	eor	r3, r3, #1
   13f10:	orr	r3, r2, r3
   13f14:	ldr	r2, [sp, #32]
   13f18:	eor	r3, r3, #1
   13f1c:	orrs	r3, r2, r3
   13f20:	beq	13f50 <__assert_fail@plt+0x2bf4>
   13f24:	mov	r3, #0
   13f28:	ldr	r1, [sp, #56]	; 0x38
   13f2c:	cmp	r1, #0
   13f30:	beq	13f50 <__assert_fail@plt+0x2bf4>
   13f34:	lsr	r2, r5, #5
   13f38:	and	r0, r5, #31
   13f3c:	uxtb	r2, r2
   13f40:	ldr	r1, [r1, r2, lsl #2]
   13f44:	lsr	r2, r1, r0
   13f48:	tst	r2, #1
   13f4c:	bne	13f58 <__assert_fail@plt+0x2bfc>
   13f50:	cmp	r7, #0
   13f54:	beq	141a8 <__assert_fail@plt+0x2e4c>
   13f58:	sub	r2, fp, #2
   13f5c:	clz	r2, r2
   13f60:	lsr	r2, r2, #5
   13f64:	ldr	r3, [sp, #32]
   13f68:	cmp	r3, #0
   13f6c:	bne	14298 <__assert_fail@plt+0x2f3c>
   13f70:	ldr	r3, [sp, #44]	; 0x2c
   13f74:	eor	r3, r3, #1
   13f78:	ands	r3, r2, r3
   13f7c:	beq	13fb4 <__assert_fail@plt+0x2c58>
   13f80:	cmp	sl, r4
   13f84:	movhi	r2, #39	; 0x27
   13f88:	strbhi	r2, [r8, r4]
   13f8c:	add	r2, r4, #1
   13f90:	cmp	r2, sl
   13f94:	movcc	r1, #36	; 0x24
   13f98:	strbcc	r1, [r8, r2]
   13f9c:	add	r2, r4, #2
   13fa0:	cmp	r2, sl
   13fa4:	add	r4, r4, #3
   13fa8:	movcc	r1, #39	; 0x27
   13fac:	strbcc	r1, [r8, r2]
   13fb0:	str	r3, [sp, #44]	; 0x2c
   13fb4:	cmp	r4, sl
   13fb8:	movcc	r3, #92	; 0x5c
   13fbc:	strbcc	r3, [r8, r4]
   13fc0:	add	r9, r9, #1
   13fc4:	add	r4, r4, #1
   13fc8:	cmp	r4, sl
   13fcc:	ldr	r3, [sp, #40]	; 0x28
   13fd0:	strbcc	r5, [r8, r4]
   13fd4:	cmp	r6, #0
   13fd8:	moveq	r3, #0
   13fdc:	str	r3, [sp, #40]	; 0x28
   13fe0:	ldr	r3, [sp, #24]
   13fe4:	add	r4, r4, #1
   13fe8:	cmn	r3, #1
   13fec:	bne	13a8c <__assert_fail@plt+0x2730>
   13ff0:	ldr	r3, [sp, #36]	; 0x24
   13ff4:	ldrb	r6, [r3, r9]
   13ff8:	adds	r6, r6, #0
   13ffc:	movne	r6, #1
   14000:	cmp	r6, #0
   14004:	bne	13aa0 <__assert_fail@plt+0x2744>
   14008:	str	fp, [sp, #160]	; 0xa0
   1400c:	mov	fp, r8
   14010:	ldr	r8, [sp, #160]	; 0xa0
   14014:	ldr	r1, [sp, #32]
   14018:	cmp	r4, #0
   1401c:	sub	r2, r8, #2
   14020:	clz	r2, r2
   14024:	lsr	r2, r2, #5
   14028:	andeq	r3, r2, r1
   1402c:	movne	r3, #0
   14030:	cmp	r3, #0
   14034:	bne	15120 <__assert_fail@plt+0x3dc4>
   14038:	eor	r3, r1, #1
   1403c:	ands	r2, r2, r3
   14040:	beq	1505c <__assert_fail@plt+0x3d00>
   14044:	ldr	r3, [sp, #68]	; 0x44
   14048:	cmp	r3, #0
   1404c:	beq	15060 <__assert_fail@plt+0x3d04>
   14050:	ldr	r3, [sp, #40]	; 0x28
   14054:	cmp	r3, #0
   14058:	bne	150dc <__assert_fail@plt+0x3d80>
   1405c:	ldr	r3, [sp, #72]	; 0x48
   14060:	adds	r3, r3, #0
   14064:	movne	r3, #1
   14068:	cmp	sl, #0
   1406c:	movne	r3, #0
   14070:	cmp	r3, #0
   14074:	ldreq	r2, [sp, #68]	; 0x44
   14078:	beq	15060 <__assert_fail@plt+0x3d04>
   1407c:	ldr	sl, [sp, #72]	; 0x48
   14080:	str	r3, [sp, #68]	; 0x44
   14084:	ldr	r3, [pc, #1792]	; 1478c <__assert_fail@plt+0x3430>
   14088:	mov	r2, #39	; 0x27
   1408c:	mov	r4, #1
   14090:	str	r3, [sp, #60]	; 0x3c
   14094:	mov	r3, #0
   14098:	strb	r2, [fp]
   1409c:	str	r4, [sp, #52]	; 0x34
   140a0:	mov	r8, #2
   140a4:	str	r3, [sp, #32]
   140a8:	b	13a70 <__assert_fail@plt+0x2714>
   140ac:	mov	r7, #0
   140b0:	cmp	fp, #2
   140b4:	beq	149ec <__assert_fail@plt+0x3690>
   140b8:	ldr	r3, [sp, #52]	; 0x34
   140bc:	ldr	r2, [sp, #28]
   140c0:	ldr	r1, [sp, #32]
   140c4:	cmp	r3, #0
   140c8:	andne	r2, r2, r1
   140cc:	moveq	r2, #0
   140d0:	cmp	r2, #0
   140d4:	moveq	r5, #92	; 0x5c
   140d8:	moveq	r3, r5
   140dc:	bne	149f8 <__assert_fail@plt+0x369c>
   140e0:	ldr	r1, [sp, #28]
   140e4:	cmp	r1, #0
   140e8:	bne	15168 <__assert_fail@plt+0x3e0c>
   140ec:	mov	r6, #0
   140f0:	b	13f08 <__assert_fail@plt+0x2bac>
   140f4:	mov	r7, #0
   140f8:	cmp	fp, #2
   140fc:	beq	14a5c <__assert_fail@plt+0x3700>
   14100:	cmp	fp, #5
   14104:	beq	14a20 <__assert_fail@plt+0x36c4>
   14108:	sub	r2, fp, #2
   1410c:	mov	r6, #0
   14110:	clz	r2, r2
   14114:	mov	r5, #63	; 0x3f
   14118:	lsr	r2, r2, #5
   1411c:	b	13f08 <__assert_fail@plt+0x2bac>
   14120:	mov	r7, #0
   14124:	cmp	fp, #2
   14128:	strne	r6, [sp, #68]	; 0x44
   1412c:	movne	r2, #0
   14130:	movne	r5, #39	; 0x27
   14134:	bne	13f08 <__assert_fail@plt+0x2bac>
   14138:	ldr	r3, [sp, #32]
   1413c:	cmp	r3, #0
   14140:	bne	14e3c <__assert_fail@plt+0x3ae0>
   14144:	cmp	sl, #0
   14148:	ldr	r3, [sp, #72]	; 0x48
   1414c:	clz	r3, r3
   14150:	lsr	r3, r3, #5
   14154:	moveq	r3, #0
   14158:	cmp	r3, #0
   1415c:	bne	14d70 <__assert_fail@plt+0x3a14>
   14160:	cmp	sl, r4
   14164:	movhi	r3, #39	; 0x27
   14168:	strbhi	r3, [r8, r4]
   1416c:	add	r3, r4, #1
   14170:	cmp	sl, r3
   14174:	movhi	r2, #92	; 0x5c
   14178:	strbhi	r2, [r8, r3]
   1417c:	add	r3, r4, #2
   14180:	cmp	sl, r3
   14184:	movhi	r2, #39	; 0x27
   14188:	strbhi	r2, [r8, r3]
   1418c:	mov	r3, #0
   14190:	cmp	r7, #0
   14194:	add	r4, r4, #3
   14198:	str	r3, [sp, #44]	; 0x2c
   1419c:	str	r6, [sp, #68]	; 0x44
   141a0:	mov	r5, #39	; 0x27
   141a4:	bne	13f58 <__assert_fail@plt+0x2bfc>
   141a8:	ldr	r2, [sp, #44]	; 0x2c
   141ac:	eor	r3, r3, #1
   141b0:	and	r3, r3, r2
   141b4:	add	r9, r9, #1
   141b8:	uxtb	r3, r3
   141bc:	cmp	r3, #0
   141c0:	beq	13fc8 <__assert_fail@plt+0x2c6c>
   141c4:	cmp	sl, r4
   141c8:	movhi	r3, #39	; 0x27
   141cc:	strbhi	r3, [r8, r4]
   141d0:	add	r3, r4, #1
   141d4:	cmp	sl, r3
   141d8:	movhi	r2, #39	; 0x27
   141dc:	strbhi	r2, [r8, r3]
   141e0:	mov	r3, #0
   141e4:	add	r4, r4, #2
   141e8:	str	r3, [sp, #44]	; 0x2c
   141ec:	b	13fc8 <__assert_fail@plt+0x2c6c>
   141f0:	mov	r3, #114	; 0x72
   141f4:	ldr	r1, [sp, #32]
   141f8:	sub	r2, fp, #2
   141fc:	clz	r2, r2
   14200:	lsr	r2, r2, #5
   14204:	tst	r2, r1
   14208:	beq	140e0 <__assert_fail@plt+0x2d84>
   1420c:	mov	fp, r8
   14210:	mov	r8, #2
   14214:	ldr	r3, [sp, #28]
   14218:	cmp	r3, #0
   1421c:	movne	r8, #4
   14220:	ldr	r3, [sp, #164]	; 0xa4
   14224:	mov	ip, #0
   14228:	bic	r3, r3, #2
   1422c:	str	r3, [sp, #4]
   14230:	ldr	r3, [sp, #76]	; 0x4c
   14234:	str	r8, [sp]
   14238:	str	r3, [sp, #16]
   1423c:	ldr	r3, [sp, #80]	; 0x50
   14240:	ldr	r2, [sp, #36]	; 0x24
   14244:	str	r3, [sp, #12]
   14248:	mov	r1, sl
   1424c:	ldr	r3, [sp, #24]
   14250:	mov	r0, fp
   14254:	str	ip, [sp, #8]
   14258:	bl	13978 <__assert_fail@plt+0x261c>
   1425c:	mov	r4, r0
   14260:	ldr	r3, [pc, #1304]	; 14780 <__assert_fail@plt+0x3424>
   14264:	ldr	r2, [sp, #116]	; 0x74
   14268:	mov	r0, r4
   1426c:	ldr	r3, [r3]
   14270:	cmp	r2, r3
   14274:	bne	15164 <__assert_fail@plt+0x3e08>
   14278:	add	sp, sp, #124	; 0x7c
   1427c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14280:	mov	r5, #110	; 0x6e
   14284:	ldr	r3, [sp, #32]
   14288:	mov	r2, #0
   1428c:	cmp	r3, #0
   14290:	mov	r6, r2
   14294:	beq	13f70 <__assert_fail@plt+0x2c14>
   14298:	str	fp, [sp, #160]	; 0xa0
   1429c:	mov	fp, r8
   142a0:	ldr	r8, [sp, #160]	; 0xa0
   142a4:	mov	r3, r2
   142a8:	ldr	r2, [sp, #28]
   142ac:	and	r2, r2, r3
   142b0:	str	r2, [sp, #28]
   142b4:	b	14214 <__assert_fail@plt+0x2eb8>
   142b8:	mov	r5, #116	; 0x74
   142bc:	b	14284 <__assert_fail@plt+0x2f28>
   142c0:	mov	r5, #102	; 0x66
   142c4:	ldr	r3, [sp, #32]
   142c8:	cmp	r3, #0
   142cc:	bne	14e78 <__assert_fail@plt+0x3b1c>
   142d0:	mov	r6, #0
   142d4:	b	13fb4 <__assert_fail@plt+0x2c58>
   142d8:	mov	r5, #118	; 0x76
   142dc:	b	142c4 <__assert_fail@plt+0x2f68>
   142e0:	mov	r7, #0
   142e4:	mov	r6, #0
   142e8:	b	13f24 <__assert_fail@plt+0x2bc8>
   142ec:	ldr	r3, [sp, #32]
   142f0:	cmp	r3, #0
   142f4:	bne	150bc <__assert_fail@plt+0x3d60>
   142f8:	mov	r7, r3
   142fc:	ldr	r3, [sp, #44]	; 0x2c
   14300:	sub	r2, fp, #2
   14304:	eor	r3, r3, #1
   14308:	clz	r2, r2
   1430c:	lsr	r2, r2, #5
   14310:	ands	r3, r2, r3
   14314:	beq	14d5c <__assert_fail@plt+0x3a00>
   14318:	cmp	sl, r4
   1431c:	movhi	r1, #39	; 0x27
   14320:	strbhi	r1, [r8, r4]
   14324:	add	r1, r4, #1
   14328:	cmp	sl, r1
   1432c:	movhi	r0, #36	; 0x24
   14330:	strbhi	r0, [r8, r1]
   14334:	add	r1, r4, #2
   14338:	cmp	sl, r1
   1433c:	movhi	r0, #39	; 0x27
   14340:	strbhi	r0, [r8, r1]
   14344:	add	r1, r4, #3
   14348:	cmp	sl, r1
   1434c:	bls	14dbc <__assert_fail@plt+0x3a60>
   14350:	mov	r4, r1
   14354:	mov	r1, #92	; 0x5c
   14358:	strb	r1, [r8, r4]
   1435c:	mov	r1, r4
   14360:	str	r3, [sp, #44]	; 0x2c
   14364:	cmp	fp, #2
   14368:	add	r4, r4, #1
   1436c:	beq	14e04 <__assert_fail@plt+0x3aa8>
   14370:	ldr	r0, [sp, #24]
   14374:	add	r3, r9, #1
   14378:	cmp	r3, r0
   1437c:	bcs	14394 <__assert_fail@plt+0x3038>
   14380:	ldr	r0, [sp, #36]	; 0x24
   14384:	ldrb	r3, [r0, r3]
   14388:	sub	r3, r3, #48	; 0x30
   1438c:	cmp	r3, #9
   14390:	bls	14e14 <__assert_fail@plt+0x3ab8>
   14394:	mov	r5, #48	; 0x30
   14398:	ldr	r3, [sp, #28]
   1439c:	eor	r3, r3, #1
   143a0:	orrs	r2, r2, r3
   143a4:	mov	r3, r6
   143a8:	moveq	r6, r2
   143ac:	beq	13f28 <__assert_fail@plt+0x2bcc>
   143b0:	mov	r6, #0
   143b4:	b	13f50 <__assert_fail@plt+0x2bf4>
   143b8:	mov	r2, #0
   143bc:	mov	r6, r2
   143c0:	mov	r5, #98	; 0x62
   143c4:	b	13f70 <__assert_fail@plt+0x2c14>
   143c8:	mov	r5, #97	; 0x61
   143cc:	b	142d0 <__assert_fail@plt+0x2f74>
   143d0:	mov	r3, r7
   143d4:	mov	r6, r7
   143d8:	mov	r2, #0
   143dc:	mov	r7, r3
   143e0:	mov	r5, #32
   143e4:	b	13f08 <__assert_fail@plt+0x2bac>
   143e8:	cmp	r9, #0
   143ec:	mov	r3, r7
   143f0:	bne	149b8 <__assert_fail@plt+0x365c>
   143f4:	mov	r6, r7
   143f8:	mov	r2, r9
   143fc:	mov	r7, r3
   14400:	b	13f08 <__assert_fail@plt+0x2bac>
   14404:	mov	r6, r7
   14408:	b	13f24 <__assert_fail@plt+0x2bc8>
   1440c:	mov	r7, #0
   14410:	ldr	r3, [sp, #64]	; 0x40
   14414:	cmp	r3, #1
   14418:	bne	14a74 <__assert_fail@plt+0x3718>
   1441c:	bl	11200 <__ctype_b_loc@plt>
   14420:	ldr	r2, [sp, #64]	; 0x40
   14424:	sxth	r3, r5
   14428:	mov	ip, r2
   1442c:	lsl	r3, r3, #1
   14430:	ldr	r2, [r0]
   14434:	ldrh	r3, [r2, r3]
   14438:	and	r3, r3, #16384	; 0x4000
   1443c:	cmp	r3, #0
   14440:	ldr	r3, [sp, #28]
   14444:	movne	r6, #1
   14448:	moveq	r6, #0
   1444c:	movne	r2, #0
   14450:	andeq	r2, r3, #1
   14454:	cmp	r2, #0
   14458:	bne	14d84 <__assert_fail@plt+0x3a28>
   1445c:	sub	r2, fp, #2
   14460:	clz	r2, r2
   14464:	lsr	r2, r2, #5
   14468:	b	13f08 <__assert_fail@plt+0x2bac>
   1446c:	cmp	r4, #0
   14470:	bne	15130 <__assert_fail@plt+0x3dd4>
   14474:	str	r4, [sp, #28]
   14478:	cmp	sl, #0
   1447c:	bne	15174 <__assert_fail@plt+0x3e18>
   14480:	ldr	r3, [pc, #772]	; 1478c <__assert_fail@plt+0x3430>
   14484:	mov	r4, #1
   14488:	str	r4, [sp, #40]	; 0x28
   1448c:	str	r3, [sp, #60]	; 0x3c
   14490:	str	r4, [sp, #52]	; 0x34
   14494:	str	sl, [sp, #72]	; 0x48
   14498:	str	sl, [sp, #68]	; 0x44
   1449c:	str	sl, [sp, #44]	; 0x2c
   144a0:	str	sl, [sp, #32]
   144a4:	mov	r8, #2
   144a8:	b	13a70 <__assert_fail@plt+0x2714>
   144ac:	ldr	r3, [sp, #36]	; 0x24
   144b0:	ldrb	r5, [r3, r9]
   144b4:	cmp	r5, #126	; 0x7e
   144b8:	ldrls	pc, [pc, r5, lsl #2]
   144bc:	b	14410 <__assert_fail@plt+0x30b4>
   144c0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144c4:	andeq	r4, r1, r0, lsl r4
   144c8:	andeq	r4, r1, r0, lsl r4
   144cc:	andeq	r4, r1, r0, lsl r4
   144d0:	andeq	r4, r1, r0, lsl r4
   144d4:	andeq	r4, r1, r0, lsl r4
   144d8:	andeq	r4, r1, r0, lsl r4
   144dc:	andeq	r4, r1, r0, ror #13
   144e0:	andeq	r4, r1, ip, asr #13
   144e4:	andeq	r4, r1, r4, asr #13
   144e8:			; <UNDEFINED> instruction: 0x000146bc
   144ec:	andeq	r4, r1, ip, ror #14
   144f0:	andeq	r4, r1, r8, asr r7
   144f4:	strdeq	r4, [r1], -r0
   144f8:	andeq	r4, r1, r0, lsl r4
   144fc:	andeq	r4, r1, r0, lsl r4
   14500:	andeq	r4, r1, r0, lsl r4
   14504:	andeq	r4, r1, r0, lsl r4
   14508:	andeq	r4, r1, r0, lsl r4
   1450c:	andeq	r4, r1, r0, lsl r4
   14510:	andeq	r4, r1, r0, lsl r4
   14514:	andeq	r4, r1, r0, lsl r4
   14518:	andeq	r4, r1, r0, lsl r4
   1451c:	andeq	r4, r1, r0, lsl r4
   14520:	andeq	r4, r1, r0, lsl r4
   14524:	andeq	r4, r1, r0, lsl r4
   14528:	andeq	r4, r1, r0, lsl r4
   1452c:	andeq	r4, r1, r0, lsl r4
   14530:	andeq	r4, r1, r0, lsl r4
   14534:	andeq	r4, r1, r0, lsl r4
   14538:	andeq	r4, r1, r0, lsl r4
   1453c:	andeq	r4, r1, r0, lsl r4
   14540:	andeq	r4, r1, r8, asr #14
   14544:	andeq	r4, r1, r4, lsr r7
   14548:	andeq	r4, r1, r4, lsr r7
   1454c:	andeq	r4, r1, r4, lsr #14
   14550:	andeq	r4, r1, r4, lsr r7
   14554:	andeq	r4, r1, ip, asr r4
   14558:	andeq	r4, r1, r4, lsr r7
   1455c:	andeq	r4, r1, r4, lsr #2
   14560:	andeq	r4, r1, r4, lsr r7
   14564:	andeq	r4, r1, r4, lsr r7
   14568:	andeq	r4, r1, r4, lsr r7
   1456c:	andeq	r4, r1, ip, asr r4
   14570:	andeq	r4, r1, ip, asr r4
   14574:	andeq	r4, r1, ip, asr r4
   14578:	andeq	r4, r1, ip, asr r4
   1457c:	andeq	r4, r1, ip, asr r4
   14580:	andeq	r4, r1, ip, asr r4
   14584:	andeq	r4, r1, ip, asr r4
   14588:	andeq	r4, r1, ip, asr r4
   1458c:	andeq	r4, r1, ip, asr r4
   14590:	andeq	r4, r1, ip, asr r4
   14594:	andeq	r4, r1, ip, asr r4
   14598:	andeq	r4, r1, ip, asr r4
   1459c:	andeq	r4, r1, ip, asr r4
   145a0:	andeq	r4, r1, ip, asr r4
   145a4:	andeq	r4, r1, ip, asr r4
   145a8:	andeq	r4, r1, ip, asr r4
   145ac:	andeq	r4, r1, r4, lsr r7
   145b0:	andeq	r4, r1, r4, lsr r7
   145b4:	andeq	r4, r1, r4, lsr r7
   145b8:	andeq	r4, r1, r4, lsr r7
   145bc:	strdeq	r4, [r1], -r8
   145c0:	andeq	r4, r1, r0, lsl r4
   145c4:	andeq	r4, r1, ip, asr r4
   145c8:	andeq	r4, r1, ip, asr r4
   145cc:	andeq	r4, r1, ip, asr r4
   145d0:	andeq	r4, r1, ip, asr r4
   145d4:	andeq	r4, r1, ip, asr r4
   145d8:	andeq	r4, r1, ip, asr r4
   145dc:	andeq	r4, r1, ip, asr r4
   145e0:	andeq	r4, r1, ip, asr r4
   145e4:	andeq	r4, r1, ip, asr r4
   145e8:	andeq	r4, r1, ip, asr r4
   145ec:	andeq	r4, r1, ip, asr r4
   145f0:	andeq	r4, r1, ip, asr r4
   145f4:	andeq	r4, r1, ip, asr r4
   145f8:	andeq	r4, r1, ip, asr r4
   145fc:	andeq	r4, r1, ip, asr r4
   14600:	andeq	r4, r1, ip, asr r4
   14604:	andeq	r4, r1, ip, asr r4
   14608:	andeq	r4, r1, ip, asr r4
   1460c:	andeq	r4, r1, ip, asr r4
   14610:	andeq	r4, r1, ip, asr r4
   14614:	andeq	r4, r1, ip, asr r4
   14618:	andeq	r4, r1, ip, asr r4
   1461c:	andeq	r4, r1, ip, asr r4
   14620:	andeq	r4, r1, ip, asr r4
   14624:	andeq	r4, r1, ip, asr r4
   14628:	andeq	r4, r1, ip, asr r4
   1462c:	andeq	r4, r1, r4, lsr r7
   14630:	strheq	r4, [r1], -r0
   14634:	andeq	r4, r1, ip, asr r4
   14638:	andeq	r4, r1, r4, lsr r7
   1463c:	andeq	r4, r1, ip, asr r4
   14640:	andeq	r4, r1, r4, lsr r7
   14644:	andeq	r4, r1, ip, asr r4
   14648:	andeq	r4, r1, ip, asr r4
   1464c:	andeq	r4, r1, ip, asr r4
   14650:	andeq	r4, r1, ip, asr r4
   14654:	andeq	r4, r1, ip, asr r4
   14658:	andeq	r4, r1, ip, asr r4
   1465c:	andeq	r4, r1, ip, asr r4
   14660:	andeq	r4, r1, ip, asr r4
   14664:	andeq	r4, r1, ip, asr r4
   14668:	andeq	r4, r1, ip, asr r4
   1466c:	andeq	r4, r1, ip, asr r4
   14670:	andeq	r4, r1, ip, asr r4
   14674:	andeq	r4, r1, ip, asr r4
   14678:	andeq	r4, r1, ip, asr r4
   1467c:	andeq	r4, r1, ip, asr r4
   14680:	andeq	r4, r1, ip, asr r4
   14684:	andeq	r4, r1, ip, asr r4
   14688:	andeq	r4, r1, ip, asr r4
   1468c:	andeq	r4, r1, ip, asr r4
   14690:	andeq	r4, r1, ip, asr r4
   14694:	andeq	r4, r1, ip, asr r4
   14698:	andeq	r4, r1, ip, asr r4
   1469c:	andeq	r4, r1, ip, asr r4
   146a0:	andeq	r4, r1, ip, asr r4
   146a4:	andeq	r4, r1, ip, asr r4
   146a8:	andeq	r4, r1, ip, asr r4
   146ac:	andeq	r3, r1, r8, asr #29
   146b0:	andeq	r4, r1, r4, lsr r7
   146b4:	andeq	r3, r1, r8, asr #29
   146b8:	andeq	r4, r1, r4, lsr #14
   146bc:	mov	r3, #110	; 0x6e
   146c0:	b	141f4 <__assert_fail@plt+0x2e98>
   146c4:	mov	r3, #116	; 0x74
   146c8:	b	141f4 <__assert_fail@plt+0x2e98>
   146cc:	sub	r2, fp, #2
   146d0:	mov	r3, #98	; 0x62
   146d4:	clz	r2, r2
   146d8:	lsr	r2, r2, #5
   146dc:	b	140e0 <__assert_fail@plt+0x2d84>
   146e0:	sub	r2, fp, #2
   146e4:	mov	r3, #97	; 0x61
   146e8:	clz	r2, r2
   146ec:	lsr	r2, r2, #5
   146f0:	b	140e0 <__assert_fail@plt+0x2d84>
   146f4:	ldr	r3, [sp, #28]
   146f8:	cmp	r3, #0
   146fc:	bne	142ec <__assert_fail@plt+0x2f90>
   14700:	ldr	r3, [sp, #164]	; 0xa4
   14704:	tst	r3, #1
   14708:	bne	14d7c <__assert_fail@plt+0x3a20>
   1470c:	ldr	r6, [sp, #28]
   14710:	sub	r2, fp, #2
   14714:	mov	r7, r6
   14718:	clz	r2, r2
   1471c:	lsr	r2, r2, #5
   14720:	b	13f08 <__assert_fail@plt+0x2bac>
   14724:	sub	r2, fp, #2
   14728:	clz	r2, r2
   1472c:	lsr	r2, r2, #5
   14730:	b	13ef4 <__assert_fail@plt+0x2b98>
   14734:	sub	r2, fp, #2
   14738:	mov	r6, #0
   1473c:	clz	r2, r2
   14740:	lsr	r2, r2, #5
   14744:	b	13efc <__assert_fail@plt+0x2ba0>
   14748:	sub	r2, fp, #2
   1474c:	clz	r2, r2
   14750:	lsr	r2, r2, #5
   14754:	b	13efc <__assert_fail@plt+0x2ba0>
   14758:	sub	r2, fp, #2
   1475c:	mov	r3, #102	; 0x66
   14760:	clz	r2, r2
   14764:	lsr	r2, r2, #5
   14768:	b	140e0 <__assert_fail@plt+0x2d84>
   1476c:	sub	r2, fp, #2
   14770:	mov	r3, #118	; 0x76
   14774:	clz	r2, r2
   14778:	lsr	r2, r2, #5
   1477c:	b	140e0 <__assert_fail@plt+0x2d84>
   14780:	andeq	r9, r2, r8, lsl #30
   14784:	muleq	r1, ip, lr
   14788:	andeq	r8, r1, r8, lsl #29
   1478c:	andeq	r8, r1, ip, asr #25
   14790:	ldr	r3, [sp, #48]	; 0x30
   14794:	ldrb	r5, [r3]
   14798:	cmp	r5, #126	; 0x7e
   1479c:	ldrls	pc, [pc, r5, lsl #2]
   147a0:	b	1440c <__assert_fail@plt+0x30b0>
   147a4:	andeq	r4, r1, ip, ror #5
   147a8:	andeq	r4, r1, ip, lsl #8
   147ac:	andeq	r4, r1, ip, lsl #8
   147b0:	andeq	r4, r1, ip, lsl #8
   147b4:	andeq	r4, r1, ip, lsl #8
   147b8:	andeq	r4, r1, ip, lsl #8
   147bc:	andeq	r4, r1, ip, lsl #8
   147c0:	andeq	r4, r1, r4, ror #19
   147c4:	ldrdeq	r4, [r1], -ip
   147c8:			; <UNDEFINED> instruction: 0x000142b8
   147cc:	andeq	r4, r1, r0, lsl #5
   147d0:	ldrdeq	r4, [r1], -r8
   147d4:	andeq	r4, r1, r0, asr #5
   147d8:	ldrdeq	r4, [r1], -r0
   147dc:	andeq	r4, r1, ip, lsl #8
   147e0:	andeq	r4, r1, ip, lsl #8
   147e4:	andeq	r4, r1, ip, lsl #8
   147e8:	andeq	r4, r1, ip, lsl #8
   147ec:	andeq	r4, r1, ip, lsl #8
   147f0:	andeq	r4, r1, ip, lsl #8
   147f4:	andeq	r4, r1, ip, lsl #8
   147f8:	andeq	r4, r1, ip, lsl #8
   147fc:	andeq	r4, r1, ip, lsl #8
   14800:	andeq	r4, r1, ip, lsl #8
   14804:	andeq	r4, r1, ip, lsl #8
   14808:	andeq	r4, r1, ip, lsl #8
   1480c:	andeq	r4, r1, ip, lsl #8
   14810:	andeq	r4, r1, ip, lsl #8
   14814:	andeq	r4, r1, ip, lsl #8
   14818:	andeq	r4, r1, ip, lsl #8
   1481c:	andeq	r4, r1, ip, lsl #8
   14820:	andeq	r4, r1, ip, lsl #8
   14824:	andeq	r4, r1, r8, asr #19
   14828:	andeq	r4, r1, r0, ror #5
   1482c:	andeq	r4, r1, r0, ror #5
   14830:	andeq	r4, r1, ip, lsr #19
   14834:	andeq	r4, r1, r0, ror #5
   14838:	andeq	r4, r1, r0, lsr #19
   1483c:	andeq	r4, r1, r0, ror #5
   14840:	andeq	r4, r1, r0, lsr #2
   14844:	andeq	r4, r1, r0, ror #5
   14848:	andeq	r4, r1, r0, ror #5
   1484c:	andeq	r4, r1, r0, ror #5
   14850:	andeq	r4, r1, r0, lsr #19
   14854:	andeq	r4, r1, r0, lsr #19
   14858:	andeq	r4, r1, r0, lsr #19
   1485c:	andeq	r4, r1, r0, lsr #19
   14860:	andeq	r4, r1, r0, lsr #19
   14864:	andeq	r4, r1, r0, lsr #19
   14868:	andeq	r4, r1, r0, lsr #19
   1486c:	andeq	r4, r1, r0, lsr #19
   14870:	andeq	r4, r1, r0, lsr #19
   14874:	andeq	r4, r1, r0, lsr #19
   14878:	andeq	r4, r1, r0, lsr #19
   1487c:	andeq	r4, r1, r0, lsr #19
   14880:	andeq	r4, r1, r0, lsr #19
   14884:	andeq	r4, r1, r0, lsr #19
   14888:	andeq	r4, r1, r0, lsr #19
   1488c:	andeq	r4, r1, r0, lsr #19
   14890:	andeq	r4, r1, r0, ror #5
   14894:	andeq	r4, r1, r0, ror #5
   14898:	andeq	r4, r1, r0, ror #5
   1489c:	andeq	r4, r1, r0, ror #5
   148a0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a4:	andeq	r4, r1, ip, lsl #8
   148a8:	andeq	r4, r1, r0, lsr #19
   148ac:	andeq	r4, r1, r0, lsr #19
   148b0:	andeq	r4, r1, r0, lsr #19
   148b4:	andeq	r4, r1, r0, lsr #19
   148b8:	andeq	r4, r1, r0, lsr #19
   148bc:	andeq	r4, r1, r0, lsr #19
   148c0:	andeq	r4, r1, r0, lsr #19
   148c4:	andeq	r4, r1, r0, lsr #19
   148c8:	andeq	r4, r1, r0, lsr #19
   148cc:	andeq	r4, r1, r0, lsr #19
   148d0:	andeq	r4, r1, r0, lsr #19
   148d4:	andeq	r4, r1, r0, lsr #19
   148d8:	andeq	r4, r1, r0, lsr #19
   148dc:	andeq	r4, r1, r0, lsr #19
   148e0:	andeq	r4, r1, r0, lsr #19
   148e4:	andeq	r4, r1, r0, lsr #19
   148e8:	andeq	r4, r1, r0, lsr #19
   148ec:	andeq	r4, r1, r0, lsr #19
   148f0:	andeq	r4, r1, r0, lsr #19
   148f4:	andeq	r4, r1, r0, lsr #19
   148f8:	andeq	r4, r1, r0, lsr #19
   148fc:	andeq	r4, r1, r0, lsr #19
   14900:	andeq	r4, r1, r0, lsr #19
   14904:	andeq	r4, r1, r0, lsr #19
   14908:	andeq	r4, r1, r0, lsr #19
   1490c:	andeq	r4, r1, r0, lsr #19
   14910:	andeq	r4, r1, r0, ror #5
   14914:	andeq	r4, r1, ip, lsr #1
   14918:	andeq	r4, r1, r0, lsr #19
   1491c:	andeq	r4, r1, r0, ror #5
   14920:	andeq	r4, r1, r0, lsr #19
   14924:	andeq	r4, r1, r0, ror #5
   14928:	andeq	r4, r1, r0, lsr #19
   1492c:	andeq	r4, r1, r0, lsr #19
   14930:	andeq	r4, r1, r0, lsr #19
   14934:	andeq	r4, r1, r0, lsr #19
   14938:	andeq	r4, r1, r0, lsr #19
   1493c:	andeq	r4, r1, r0, lsr #19
   14940:	andeq	r4, r1, r0, lsr #19
   14944:	andeq	r4, r1, r0, lsr #19
   14948:	andeq	r4, r1, r0, lsr #19
   1494c:	andeq	r4, r1, r0, lsr #19
   14950:	andeq	r4, r1, r0, lsr #19
   14954:	andeq	r4, r1, r0, lsr #19
   14958:	andeq	r4, r1, r0, lsr #19
   1495c:	andeq	r4, r1, r0, lsr #19
   14960:	andeq	r4, r1, r0, lsr #19
   14964:	andeq	r4, r1, r0, lsr #19
   14968:	andeq	r4, r1, r0, lsr #19
   1496c:	andeq	r4, r1, r0, lsr #19
   14970:	andeq	r4, r1, r0, lsr #19
   14974:	andeq	r4, r1, r0, lsr #19
   14978:	andeq	r4, r1, r0, lsr #19
   1497c:	andeq	r4, r1, r0, lsr #19
   14980:	andeq	r4, r1, r0, lsr #19
   14984:	andeq	r4, r1, r0, lsr #19
   14988:	andeq	r4, r1, r0, lsr #19
   1498c:	andeq	r4, r1, r0, lsr #19
   14990:	andeq	r3, r1, r4, asr #29
   14994:	andeq	r4, r1, r0, ror #5
   14998:	andeq	r3, r1, r4, asr #29
   1499c:	andeq	r4, r1, ip, lsr #19
   149a0:	mov	r6, r7
   149a4:	mov	r7, #0
   149a8:	b	13f24 <__assert_fail@plt+0x2bc8>
   149ac:	cmp	r9, #0
   149b0:	mov	r3, #0
   149b4:	beq	143f4 <__assert_fail@plt+0x3098>
   149b8:	mov	r6, #0
   149bc:	mov	r7, r3
   149c0:	mov	r3, r6
   149c4:	b	13f28 <__assert_fail@plt+0x2bcc>
   149c8:	mov	r3, #0
   149cc:	b	143d4 <__assert_fail@plt+0x3078>
   149d0:	mov	r7, #0
   149d4:	mov	r3, #114	; 0x72
   149d8:	b	141f4 <__assert_fail@plt+0x2e98>
   149dc:	mov	r5, #98	; 0x62
   149e0:	b	14284 <__assert_fail@plt+0x2f28>
   149e4:	mov	r5, #97	; 0x61
   149e8:	b	142c4 <__assert_fail@plt+0x2f68>
   149ec:	ldr	r3, [sp, #32]
   149f0:	cmp	r3, #0
   149f4:	bne	14e3c <__assert_fail@plt+0x3ae0>
   149f8:	add	r9, r9, #1
   149fc:	ldr	r3, [sp, #44]	; 0x2c
   14a00:	mov	r6, #0
   14a04:	mov	r5, #92	; 0x5c
   14a08:	b	141bc <__assert_fail@plt+0x2e60>
   14a0c:	ldr	r3, [sp, #36]	; 0x24
   14a10:	ldrb	r3, [r3, #1]
   14a14:	adds	r3, r3, #0
   14a18:	movne	r3, #1
   14a1c:	b	13ee0 <__assert_fail@plt+0x2b84>
   14a20:	ldr	r3, [sp, #164]	; 0xa4
   14a24:	ands	r3, r3, #4
   14a28:	beq	14a4c <__assert_fail@plt+0x36f0>
   14a2c:	ldr	r2, [sp, #24]
   14a30:	add	r3, r9, #2
   14a34:	cmp	r3, r2
   14a38:	bcs	14a4c <__assert_fail@plt+0x36f0>
   14a3c:	ldr	r2, [sp, #48]	; 0x30
   14a40:	ldrb	r5, [r2, #1]
   14a44:	cmp	r5, #63	; 0x3f
   14a48:	beq	14eb0 <__assert_fail@plt+0x3b54>
   14a4c:	mov	r2, #0
   14a50:	mov	r6, r2
   14a54:	mov	r5, #63	; 0x3f
   14a58:	b	13f08 <__assert_fail@plt+0x2bac>
   14a5c:	ldr	r3, [sp, #32]
   14a60:	cmp	r3, #0
   14a64:	bne	14e3c <__assert_fail@plt+0x3ae0>
   14a68:	mov	r6, r3
   14a6c:	mov	r5, #63	; 0x3f
   14a70:	b	13f50 <__assert_fail@plt+0x2bf4>
   14a74:	ldr	r3, [sp, #24]
   14a78:	cmn	r3, #1
   14a7c:	mov	r3, #0
   14a80:	str	r3, [sp, #108]	; 0x6c
   14a84:	str	r3, [sp, #112]	; 0x70
   14a88:	bne	14a98 <__assert_fail@plt+0x373c>
   14a8c:	ldr	r0, [sp, #36]	; 0x24
   14a90:	bl	11218 <strlen@plt>
   14a94:	str	r0, [sp, #24]
   14a98:	mov	r3, #0
   14a9c:	str	sl, [sp, #88]	; 0x58
   14aa0:	ldr	sl, [sp, #36]	; 0x24
   14aa4:	str	r5, [sp, #92]	; 0x5c
   14aa8:	mov	r5, r3
   14aac:	str	r7, [sp, #96]	; 0x60
   14ab0:	str	r4, [sp, #100]	; 0x64
   14ab4:	str	r8, [sp, #84]	; 0x54
   14ab8:	ldr	r3, [sp, #24]
   14abc:	add	r4, r9, r5
   14ac0:	add	r7, sl, r4
   14ac4:	sub	r2, r3, r4
   14ac8:	mov	r1, r7
   14acc:	add	r3, sp, #108	; 0x6c
   14ad0:	add	r0, sp, #104	; 0x68
   14ad4:	bl	17b48 <__assert_fail@plt+0x67ec>
   14ad8:	subs	r8, r0, #0
   14adc:	beq	14b2c <__assert_fail@plt+0x37d0>
   14ae0:	cmn	r8, #1
   14ae4:	beq	14e8c <__assert_fail@plt+0x3b30>
   14ae8:	cmn	r8, #2
   14aec:	beq	14fac <__assert_fail@plt+0x3c50>
   14af0:	ldr	r3, [sp, #32]
   14af4:	cmp	fp, #2
   14af8:	movne	r3, #0
   14afc:	andeq	r3, r3, #1
   14b00:	cmp	r3, #0
   14b04:	bne	14c8c <__assert_fail@plt+0x3930>
   14b08:	ldr	r0, [sp, #104]	; 0x68
   14b0c:	bl	11140 <iswprint@plt>
   14b10:	add	r5, r5, r8
   14b14:	cmp	r0, #0
   14b18:	add	r0, sp, #108	; 0x6c
   14b1c:	moveq	r6, #0
   14b20:	bl	110bc <mbsinit@plt>
   14b24:	cmp	r0, #0
   14b28:	beq	14ab8 <__assert_fail@plt+0x375c>
   14b2c:	ldr	r3, [sp, #28]
   14b30:	mov	ip, r5
   14b34:	eor	r2, r6, #1
   14b38:	ldr	r5, [sp, #92]	; 0x5c
   14b3c:	ldr	r7, [sp, #96]	; 0x60
   14b40:	ldr	r4, [sp, #100]	; 0x64
   14b44:	ldr	r8, [sp, #84]	; 0x54
   14b48:	ldr	sl, [sp, #88]	; 0x58
   14b4c:	and	r2, r2, r3
   14b50:	cmp	ip, #1
   14b54:	bls	14454 <__assert_fail@plt+0x30f8>
   14b58:	add	r1, ip, r9
   14b5c:	ldr	lr, [sp, #48]	; 0x30
   14b60:	mov	r0, #0
   14b64:	str	r6, [sp, #48]	; 0x30
   14b68:	mov	ip, #39	; 0x27
   14b6c:	ldr	r6, [sp, #44]	; 0x2c
   14b70:	b	14c28 <__assert_fail@plt+0x38cc>
   14b74:	ldr	r0, [sp, #32]
   14b78:	sub	r3, fp, #2
   14b7c:	cmp	r0, #0
   14b80:	clz	r3, r3
   14b84:	lsr	r3, r3, #5
   14b88:	bne	14d90 <__assert_fail@plt+0x3a34>
   14b8c:	eor	r0, r6, #1
   14b90:	ands	r3, r3, r0
   14b94:	beq	14bc4 <__assert_fail@plt+0x3868>
   14b98:	add	r0, r4, #1
   14b9c:	cmp	sl, r4
   14ba0:	strbhi	ip, [r8, r4]
   14ba4:	cmp	sl, r0
   14ba8:	movhi	r6, #36	; 0x24
   14bac:	strbhi	r6, [r8, r0]
   14bb0:	add	r0, r4, #2
   14bb4:	mov	r6, r3
   14bb8:	add	r4, r4, #3
   14bbc:	cmp	sl, r0
   14bc0:	strbhi	ip, [r8, r0]
   14bc4:	cmp	sl, r4
   14bc8:	movhi	r3, #92	; 0x5c
   14bcc:	strbhi	r3, [r8, r4]
   14bd0:	add	r3, r4, #1
   14bd4:	cmp	sl, r3
   14bd8:	lsrhi	r0, r5, #6
   14bdc:	addhi	r0, r0, #48	; 0x30
   14be0:	strbhi	r0, [r8, r3]
   14be4:	add	r0, r4, #2
   14be8:	cmp	sl, r0
   14bec:	lsrhi	r3, r5, #3
   14bf0:	andhi	r3, r3, #7
   14bf4:	addhi	r3, r3, #48	; 0x30
   14bf8:	add	r9, r9, #1
   14bfc:	strbhi	r3, [r8, r0]
   14c00:	and	r5, r5, #7
   14c04:	cmp	r9, r1
   14c08:	add	r5, r5, #48	; 0x30
   14c0c:	add	r4, r4, #3
   14c10:	bcs	14db0 <__assert_fail@plt+0x3a54>
   14c14:	mov	r0, r2
   14c18:	cmp	sl, r4
   14c1c:	strbhi	r5, [r8, r4]
   14c20:	ldrb	r5, [lr, #1]!
   14c24:	add	r4, r4, #1
   14c28:	cmp	r2, #0
   14c2c:	bne	14b74 <__assert_fail@plt+0x3818>
   14c30:	eor	r3, r0, #1
   14c34:	and	r3, r3, r6
   14c38:	cmp	r7, #0
   14c3c:	uxtb	r3, r3
   14c40:	beq	14c54 <__assert_fail@plt+0x38f8>
   14c44:	cmp	sl, r4
   14c48:	movhi	r7, #92	; 0x5c
   14c4c:	strbhi	r7, [r8, r4]
   14c50:	add	r4, r4, #1
   14c54:	add	r9, r9, #1
   14c58:	cmp	r9, r1
   14c5c:	bcs	14da4 <__assert_fail@plt+0x3a48>
   14c60:	cmp	r3, #0
   14c64:	beq	14dd0 <__assert_fail@plt+0x3a74>
   14c68:	cmp	sl, r4
   14c6c:	add	r3, r4, #1
   14c70:	strbhi	ip, [r8, r4]
   14c74:	mov	r7, #0
   14c78:	cmp	sl, r3
   14c7c:	strbhi	ip, [r8, r3]
   14c80:	add	r4, r4, #2
   14c84:	mov	r6, r7
   14c88:	b	14c18 <__assert_fail@plt+0x38bc>
   14c8c:	cmp	r8, #1
   14c90:	beq	14b08 <__assert_fail@plt+0x37ac>
   14c94:	add	r1, r4, #1
   14c98:	add	r3, sl, r8
   14c9c:	add	r1, sl, r1
   14ca0:	add	r4, r3, r4
   14ca4:	ldrb	r3, [r1], #1
   14ca8:	sub	r3, r3, #91	; 0x5b
   14cac:	cmp	r3, #33	; 0x21
   14cb0:	ldrls	pc, [pc, r3, lsl #2]
   14cb4:	b	14d40 <__assert_fail@plt+0x39e4>
   14cb8:	andeq	r4, r1, ip, asr #26
   14cbc:	andeq	r4, r1, ip, asr #26
   14cc0:	andeq	r4, r1, r0, asr #26
   14cc4:	andeq	r4, r1, ip, asr #26
   14cc8:	andeq	r4, r1, r0, asr #26
   14ccc:	andeq	r4, r1, ip, asr #26
   14cd0:	andeq	r4, r1, r0, asr #26
   14cd4:	andeq	r4, r1, r0, asr #26
   14cd8:	andeq	r4, r1, r0, asr #26
   14cdc:	andeq	r4, r1, r0, asr #26
   14ce0:	andeq	r4, r1, r0, asr #26
   14ce4:	andeq	r4, r1, r0, asr #26
   14ce8:	andeq	r4, r1, r0, asr #26
   14cec:	andeq	r4, r1, r0, asr #26
   14cf0:	andeq	r4, r1, r0, asr #26
   14cf4:	andeq	r4, r1, r0, asr #26
   14cf8:	andeq	r4, r1, r0, asr #26
   14cfc:	andeq	r4, r1, r0, asr #26
   14d00:	andeq	r4, r1, r0, asr #26
   14d04:	andeq	r4, r1, r0, asr #26
   14d08:	andeq	r4, r1, r0, asr #26
   14d0c:	andeq	r4, r1, r0, asr #26
   14d10:	andeq	r4, r1, r0, asr #26
   14d14:	andeq	r4, r1, r0, asr #26
   14d18:	andeq	r4, r1, r0, asr #26
   14d1c:	andeq	r4, r1, r0, asr #26
   14d20:	andeq	r4, r1, r0, asr #26
   14d24:	andeq	r4, r1, r0, asr #26
   14d28:	andeq	r4, r1, r0, asr #26
   14d2c:	andeq	r4, r1, r0, asr #26
   14d30:	andeq	r4, r1, r0, asr #26
   14d34:	andeq	r4, r1, r0, asr #26
   14d38:	andeq	r4, r1, r0, asr #26
   14d3c:	andeq	r4, r1, ip, asr #26
   14d40:	cmp	r4, r1
   14d44:	bne	14ca4 <__assert_fail@plt+0x3948>
   14d48:	b	14b08 <__assert_fail@plt+0x37ac>
   14d4c:	ldr	fp, [sp, #84]	; 0x54
   14d50:	ldr	sl, [sp, #88]	; 0x58
   14d54:	mov	r8, #2
   14d58:	b	14214 <__assert_fail@plt+0x2eb8>
   14d5c:	cmp	sl, r4
   14d60:	movls	r1, r4
   14d64:	bls	14364 <__assert_fail@plt+0x3008>
   14d68:	ldr	r3, [sp, #44]	; 0x2c
   14d6c:	b	14354 <__assert_fail@plt+0x2ff8>
   14d70:	str	sl, [sp, #72]	; 0x48
   14d74:	ldr	sl, [sp, #32]
   14d78:	b	1418c <__assert_fail@plt+0x2e30>
   14d7c:	add	r9, r9, #1
   14d80:	b	13a80 <__assert_fail@plt+0x2724>
   14d84:	ldr	r2, [sp, #28]
   14d88:	mov	r6, #0
   14d8c:	b	14b58 <__assert_fail@plt+0x37fc>
   14d90:	str	fp, [sp, #160]	; 0xa0
   14d94:	str	r3, [sp, #28]
   14d98:	mov	fp, r8
   14d9c:	ldr	r8, [sp, #160]	; 0xa0
   14da0:	b	14214 <__assert_fail@plt+0x2eb8>
   14da4:	str	r6, [sp, #44]	; 0x2c
   14da8:	ldr	r6, [sp, #48]	; 0x30
   14dac:	b	141bc <__assert_fail@plt+0x2e60>
   14db0:	str	r6, [sp, #44]	; 0x2c
   14db4:	ldr	r6, [sp, #48]	; 0x30
   14db8:	b	13fc8 <__assert_fail@plt+0x2c6c>
   14dbc:	add	r4, r4, #4
   14dc0:	str	r3, [sp, #44]	; 0x2c
   14dc4:	mov	r6, #0
   14dc8:	mov	r5, #48	; 0x30
   14dcc:	b	13f50 <__assert_fail@plt+0x2bf4>
   14dd0:	mov	r7, r3
   14dd4:	b	14c18 <__assert_fail@plt+0x38bc>
   14dd8:	ldr	r3, [pc, #-1624]	; 14788 <__assert_fail@plt+0x342c>
   14ddc:	mov	r4, #1
   14de0:	str	r4, [sp, #40]	; 0x28
   14de4:	str	r4, [sp, #28]
   14de8:	str	r4, [sp, #52]	; 0x34
   14dec:	str	sl, [sp, #72]	; 0x48
   14df0:	str	sl, [sp, #68]	; 0x44
   14df4:	str	sl, [sp, #44]	; 0x2c
   14df8:	str	sl, [sp, #32]
   14dfc:	str	r3, [sp, #60]	; 0x3c
   14e00:	b	13a70 <__assert_fail@plt+0x2714>
   14e04:	mov	r3, r6
   14e08:	mov	r5, #48	; 0x30
   14e0c:	mov	r6, #0
   14e10:	b	13f50 <__assert_fail@plt+0x2bf4>
   14e14:	cmp	sl, r4
   14e18:	movhi	r3, #48	; 0x30
   14e1c:	strbhi	r3, [r8, r4]
   14e20:	add	r3, r1, #2
   14e24:	cmp	sl, r3
   14e28:	movhi	r0, #48	; 0x30
   14e2c:	strbhi	r0, [r8, r3]
   14e30:	add	r4, r1, #3
   14e34:	mov	r5, #48	; 0x30
   14e38:	b	14398 <__assert_fail@plt+0x303c>
   14e3c:	str	fp, [sp, #160]	; 0xa0
   14e40:	mov	fp, r8
   14e44:	ldr	r8, [sp, #160]	; 0xa0
   14e48:	b	14214 <__assert_fail@plt+0x2eb8>
   14e4c:	ldr	r2, [sp, #80]	; 0x50
   14e50:	ldrb	r3, [r2]
   14e54:	cmp	r3, #0
   14e58:	beq	13a40 <__assert_fail@plt+0x26e4>
   14e5c:	cmp	sl, r4
   14e60:	strbhi	r3, [fp, r4]
   14e64:	ldrb	r3, [r2, #1]!
   14e68:	add	r4, r4, #1
   14e6c:	cmp	r3, #0
   14e70:	bne	14e5c <__assert_fail@plt+0x3b00>
   14e74:	b	13a40 <__assert_fail@plt+0x26e4>
   14e78:	str	fp, [sp, #160]	; 0xa0
   14e7c:	mov	r3, #0
   14e80:	mov	fp, r8
   14e84:	ldr	r8, [sp, #160]	; 0xa0
   14e88:	b	142a8 <__assert_fail@plt+0x2f4c>
   14e8c:	mov	ip, r5
   14e90:	ldr	r7, [sp, #96]	; 0x60
   14e94:	ldr	r5, [sp, #92]	; 0x5c
   14e98:	ldr	r4, [sp, #100]	; 0x64
   14e9c:	ldr	r8, [sp, #84]	; 0x54
   14ea0:	ldr	sl, [sp, #88]	; 0x58
   14ea4:	ldr	r2, [sp, #28]
   14ea8:	mov	r6, #0
   14eac:	b	14b50 <__assert_fail@plt+0x37f4>
   14eb0:	ldr	r2, [sp, #36]	; 0x24
   14eb4:	ldrb	r1, [r2, r3]
   14eb8:	sub	r2, r1, #33	; 0x21
   14ebc:	cmp	r2, #29
   14ec0:	ldrls	pc, [pc, r2, lsl #2]
   14ec4:	b	14fa0 <__assert_fail@plt+0x3c44>
   14ec8:	andeq	r4, r1, r0, asr #30
   14ecc:	andeq	r4, r1, r0, lsr #31
   14ed0:	andeq	r4, r1, r0, lsr #31
   14ed4:	andeq	r4, r1, r0, lsr #31
   14ed8:	andeq	r4, r1, r0, lsr #31
   14edc:	andeq	r4, r1, r0, lsr #31
   14ee0:	andeq	r4, r1, r0, asr #30
   14ee4:	andeq	r4, r1, r0, asr #30
   14ee8:	andeq	r4, r1, r0, asr #30
   14eec:	andeq	r4, r1, r0, lsr #31
   14ef0:	andeq	r4, r1, r0, lsr #31
   14ef4:	andeq	r4, r1, r0, lsr #31
   14ef8:	andeq	r4, r1, r0, asr #30
   14efc:	andeq	r4, r1, r0, lsr #31
   14f00:	andeq	r4, r1, r0, asr #30
   14f04:	andeq	r4, r1, r0, lsr #31
   14f08:	andeq	r4, r1, r0, lsr #31
   14f0c:	andeq	r4, r1, r0, lsr #31
   14f10:	andeq	r4, r1, r0, lsr #31
   14f14:	andeq	r4, r1, r0, lsr #31
   14f18:	andeq	r4, r1, r0, lsr #31
   14f1c:	andeq	r4, r1, r0, lsr #31
   14f20:	andeq	r4, r1, r0, lsr #31
   14f24:	andeq	r4, r1, r0, lsr #31
   14f28:	andeq	r4, r1, r0, lsr #31
   14f2c:	andeq	r4, r1, r0, lsr #31
   14f30:	andeq	r4, r1, r0, lsr #31
   14f34:	andeq	r4, r1, r0, asr #30
   14f38:	andeq	r4, r1, r0, asr #30
   14f3c:	andeq	r4, r1, r0, asr #30
   14f40:	ldr	r2, [sp, #32]
   14f44:	cmp	r2, #0
   14f48:	bne	1504c <__assert_fail@plt+0x3cf0>
   14f4c:	cmp	sl, r4
   14f50:	movhi	r2, #63	; 0x3f
   14f54:	strbhi	r2, [r8, r4]
   14f58:	add	r2, r4, #1
   14f5c:	cmp	sl, r2
   14f60:	movhi	r0, #34	; 0x22
   14f64:	strbhi	r0, [r8, r2]
   14f68:	add	r2, r4, #2
   14f6c:	cmp	sl, r2
   14f70:	movhi	r0, #34	; 0x22
   14f74:	strbhi	r0, [r8, r2]
   14f78:	add	r2, r4, #3
   14f7c:	cmp	sl, r2
   14f80:	movhi	r0, #63	; 0x3f
   14f84:	strbhi	r0, [r8, r2]
   14f88:	mov	r2, #0
   14f8c:	add	r4, r4, #4
   14f90:	mov	r5, r1
   14f94:	mov	r9, r3
   14f98:	mov	r6, r2
   14f9c:	b	14398 <__assert_fail@plt+0x303c>
   14fa0:	mov	r2, #0
   14fa4:	mov	r6, r2
   14fa8:	b	13f08 <__assert_fail@plt+0x2bac>
   14fac:	ldr	r0, [sp, #24]
   14fb0:	mov	r1, r4
   14fb4:	cmp	r1, r0
   14fb8:	mov	r2, r7
   14fbc:	mov	r3, r5
   14fc0:	mov	ip, r5
   14fc4:	ldr	r7, [sp, #96]	; 0x60
   14fc8:	ldr	r5, [sp, #92]	; 0x5c
   14fcc:	ldr	r4, [sp, #100]	; 0x64
   14fd0:	ldr	r8, [sp, #84]	; 0x54
   14fd4:	ldr	sl, [sp, #88]	; 0x58
   14fd8:	bcs	1500c <__assert_fail@plt+0x3cb0>
   14fdc:	ldrb	r6, [r2]
   14fe0:	cmp	r6, #0
   14fe4:	bne	14ff8 <__assert_fail@plt+0x3c9c>
   14fe8:	b	15128 <__assert_fail@plt+0x3dcc>
   14fec:	ldrb	r6, [r2, #1]!
   14ff0:	cmp	r6, #0
   14ff4:	beq	150b0 <__assert_fail@plt+0x3d54>
   14ff8:	add	r3, r3, #1
   14ffc:	add	r1, r9, r3
   15000:	cmp	r1, r0
   15004:	bcc	14fec <__assert_fail@plt+0x3c90>
   15008:	mov	ip, r3
   1500c:	ldr	r2, [sp, #28]
   15010:	mov	r6, #0
   15014:	b	14b50 <__assert_fail@plt+0x37f4>
   15018:	mov	r3, #1
   1501c:	str	r3, [sp, #40]	; 0x28
   15020:	str	r3, [sp, #32]
   15024:	str	r3, [sp, #28]
   15028:	str	r3, [sp, #52]	; 0x34
   1502c:	ldr	r3, [pc, #-2220]	; 14788 <__assert_fail@plt+0x342c>
   15030:	mov	r2, #0
   15034:	str	r2, [sp, #68]	; 0x44
   15038:	str	r2, [sp, #44]	; 0x2c
   1503c:	str	r2, [sp, #72]	; 0x48
   15040:	mov	r4, r2
   15044:	str	r3, [sp, #60]	; 0x3c
   15048:	b	13a70 <__assert_fail@plt+0x2714>
   1504c:	str	fp, [sp, #160]	; 0xa0
   15050:	mov	fp, r8
   15054:	ldr	r8, [sp, #160]	; 0xa0
   15058:	b	14220 <__assert_fail@plt+0x2ec4>
   1505c:	mov	r2, r3
   15060:	ldr	r3, [sp, #60]	; 0x3c
   15064:	cmp	r3, #0
   15068:	moveq	r2, #0
   1506c:	andne	r2, r2, #1
   15070:	cmp	r2, #0
   15074:	beq	150a0 <__assert_fail@plt+0x3d44>
   15078:	mov	r2, r3
   1507c:	ldrb	r3, [r3]
   15080:	cmp	r3, #0
   15084:	beq	150a0 <__assert_fail@plt+0x3d44>
   15088:	cmp	sl, r4
   1508c:	strbhi	r3, [fp, r4]
   15090:	ldrb	r3, [r2, #1]!
   15094:	add	r4, r4, #1
   15098:	cmp	r3, #0
   1509c:	bne	15088 <__assert_fail@plt+0x3d2c>
   150a0:	cmp	sl, r4
   150a4:	movhi	r3, #0
   150a8:	strbhi	r3, [fp, r4]
   150ac:	b	14260 <__assert_fail@plt+0x2f04>
   150b0:	mov	ip, r3
   150b4:	ldr	r2, [sp, #28]
   150b8:	b	14b50 <__assert_fail@plt+0x37f4>
   150bc:	str	fp, [sp, #160]	; 0xa0
   150c0:	mov	fp, r8
   150c4:	ldr	r8, [sp, #160]	; 0xa0
   150c8:	sub	r3, r8, #2
   150cc:	clz	r3, r3
   150d0:	lsr	r3, r3, #5
   150d4:	str	r3, [sp, #28]
   150d8:	b	14214 <__assert_fail@plt+0x2eb8>
   150dc:	ldr	r3, [sp, #76]	; 0x4c
   150e0:	mov	ip, #5
   150e4:	str	r3, [sp, #16]
   150e8:	ldr	r3, [sp, #80]	; 0x50
   150ec:	ldr	r2, [sp, #36]	; 0x24
   150f0:	str	r3, [sp, #12]
   150f4:	ldr	r3, [sp, #56]	; 0x38
   150f8:	ldr	r1, [sp, #72]	; 0x48
   150fc:	str	r3, [sp, #8]
   15100:	ldr	r3, [sp, #164]	; 0xa4
   15104:	mov	r0, fp
   15108:	str	r3, [sp, #4]
   1510c:	str	ip, [sp]
   15110:	ldr	r3, [sp, #24]
   15114:	bl	13978 <__assert_fail@plt+0x261c>
   15118:	mov	r4, r0
   1511c:	b	14260 <__assert_fail@plt+0x2f04>
   15120:	mov	r8, #2
   15124:	b	14214 <__assert_fail@plt+0x2eb8>
   15128:	ldr	r2, [sp, #28]
   1512c:	b	14b50 <__assert_fail@plt+0x37f4>
   15130:	mov	r3, #0
   15134:	str	r3, [sp, #68]	; 0x44
   15138:	str	r3, [sp, #44]	; 0x2c
   1513c:	str	r3, [sp, #72]	; 0x48
   15140:	str	r3, [sp, #28]
   15144:	mov	r4, r3
   15148:	ldr	r3, [pc, #-2500]	; 1478c <__assert_fail@plt+0x3430>
   1514c:	mov	r2, #1
   15150:	str	r2, [sp, #40]	; 0x28
   15154:	str	r2, [sp, #32]
   15158:	str	r2, [sp, #52]	; 0x34
   1515c:	str	r3, [sp, #60]	; 0x3c
   15160:	b	13a70 <__assert_fail@plt+0x2714>
   15164:	bl	110f8 <__stack_chk_fail@plt>
   15168:	mov	r5, r3
   1516c:	mov	r6, #0
   15170:	b	13f64 <__assert_fail@plt+0x2c08>
   15174:	mov	r3, #0
   15178:	mov	r2, #1
   1517c:	str	r3, [sp, #44]	; 0x2c
   15180:	str	r3, [sp, #72]	; 0x48
   15184:	str	r2, [sp, #40]	; 0x28
   15188:	b	14080 <__assert_fail@plt+0x2d24>
   1518c:	bl	11338 <abort@plt>
   15190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15194:	sub	sp, sp, #44	; 0x2c
   15198:	mov	r6, r0
   1519c:	mov	r4, r3
   151a0:	mov	sl, r1
   151a4:	mov	fp, r2
   151a8:	bl	1123c <__errno_location@plt>
   151ac:	ldr	r7, [pc, #364]	; 15320 <__assert_fail@plt+0x3fc4>
   151b0:	cmp	r6, #0
   151b4:	ldr	r5, [r7]
   151b8:	ldr	r3, [r0]
   151bc:	str	r3, [sp, #24]
   151c0:	blt	1531c <__assert_fail@plt+0x3fc0>
   151c4:	ldr	r3, [r7, #4]
   151c8:	mov	r8, r0
   151cc:	cmp	r3, r6
   151d0:	bgt	1521c <__assert_fail@plt+0x3ec0>
   151d4:	cmn	r6, #-268435454	; 0xf0000002
   151d8:	bgt	15318 <__assert_fail@plt+0x3fbc>
   151dc:	add	r9, r6, #1
   151e0:	add	r3, r7, #8
   151e4:	cmp	r5, r3
   151e8:	lsl	r1, r9, #3
   151ec:	beq	152f8 <__assert_fail@plt+0x3f9c>
   151f0:	mov	r0, r5
   151f4:	bl	15ff8 <__assert_fail@plt+0x4c9c>
   151f8:	mov	r5, r0
   151fc:	str	r0, [r7]
   15200:	ldr	r0, [r7, #4]
   15204:	mov	r1, #0
   15208:	sub	r2, r9, r0
   1520c:	add	r0, r5, r0, lsl #3
   15210:	lsl	r2, r2, #3
   15214:	bl	11260 <memset@plt>
   15218:	str	r9, [r7, #4]
   1521c:	add	r3, r5, r6, lsl #3
   15220:	ldr	r1, [r4, #4]
   15224:	ldr	r7, [r3, #4]
   15228:	ldr	r9, [r5, r6, lsl #3]
   1522c:	ldr	r2, [r4, #40]	; 0x28
   15230:	ldr	ip, [r4, #44]	; 0x2c
   15234:	str	r3, [sp, #28]
   15238:	ldr	r3, [r4]
   1523c:	orr	r1, r1, #1
   15240:	add	lr, r4, #8
   15244:	str	r1, [sp, #36]	; 0x24
   15248:	str	r1, [sp, #4]
   1524c:	str	r2, [sp, #12]
   15250:	str	r3, [sp]
   15254:	mov	r0, r7
   15258:	mov	r1, r9
   1525c:	str	ip, [sp, #16]
   15260:	str	lr, [sp, #8]
   15264:	mov	r3, fp
   15268:	mov	r2, sl
   1526c:	str	lr, [sp, #32]
   15270:	bl	13978 <__assert_fail@plt+0x261c>
   15274:	cmp	r9, r0
   15278:	bhi	152e4 <__assert_fail@plt+0x3f88>
   1527c:	ldr	r3, [pc, #160]	; 15324 <__assert_fail@plt+0x3fc8>
   15280:	add	r9, r0, #1
   15284:	cmp	r7, r3
   15288:	str	r9, [r5, r6, lsl #3]
   1528c:	beq	15298 <__assert_fail@plt+0x3f3c>
   15290:	mov	r0, r7
   15294:	bl	1108c <free@plt>
   15298:	mov	r0, r9
   1529c:	bl	15f9c <__assert_fail@plt+0x4c40>
   152a0:	ldr	lr, [sp, #28]
   152a4:	ldr	ip, [r4, #44]	; 0x2c
   152a8:	ldr	r5, [r4, #40]	; 0x28
   152ac:	mov	r3, fp
   152b0:	mov	r2, sl
   152b4:	mov	r1, r9
   152b8:	str	r0, [lr, #4]
   152bc:	ldr	lr, [r4]
   152c0:	ldr	r4, [sp, #32]
   152c4:	str	ip, [sp, #16]
   152c8:	str	r4, [sp, #8]
   152cc:	ldr	r4, [sp, #36]	; 0x24
   152d0:	str	r5, [sp, #12]
   152d4:	str	r4, [sp, #4]
   152d8:	str	lr, [sp]
   152dc:	mov	r7, r0
   152e0:	bl	13978 <__assert_fail@plt+0x261c>
   152e4:	ldr	r3, [sp, #24]
   152e8:	mov	r0, r7
   152ec:	str	r3, [r8]
   152f0:	add	sp, sp, #44	; 0x2c
   152f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f8:	mov	r0, #0
   152fc:	bl	15ff8 <__assert_fail@plt+0x4c9c>
   15300:	ldr	r3, [pc, #32]	; 15328 <__assert_fail@plt+0x3fcc>
   15304:	mov	r5, r0
   15308:	ldm	r3, {r0, r1}
   1530c:	str	r5, [r7]
   15310:	stm	r5, {r0, r1}
   15314:	b	15200 <__assert_fail@plt+0x3ea4>
   15318:	bl	12a68 <__assert_fail@plt+0x170c>
   1531c:	bl	11338 <abort@plt>
   15320:	andeq	sl, r2, r8, lsr r1
   15324:	muleq	r2, ip, r2
   15328:	andeq	sl, r2, r0, asr #2
   1532c:	push	{r4, r5, r6, lr}
   15330:	mov	r5, r0
   15334:	bl	1123c <__errno_location@plt>
   15338:	cmp	r5, #0
   1533c:	mov	r1, #48	; 0x30
   15340:	mov	r4, r0
   15344:	ldr	r0, [pc, #16]	; 1535c <__assert_fail@plt+0x4000>
   15348:	ldr	r6, [r4]
   1534c:	movne	r0, r5
   15350:	bl	161a4 <__assert_fail@plt+0x4e48>
   15354:	str	r6, [r4]
   15358:	pop	{r4, r5, r6, pc}
   1535c:	muleq	r2, ip, r3
   15360:	ldr	r3, [pc, #12]	; 15374 <__assert_fail@plt+0x4018>
   15364:	cmp	r0, #0
   15368:	moveq	r0, r3
   1536c:	ldr	r0, [r0]
   15370:	bx	lr
   15374:	muleq	r2, ip, r3
   15378:	ldr	r3, [pc, #12]	; 1538c <__assert_fail@plt+0x4030>
   1537c:	cmp	r0, #0
   15380:	moveq	r0, r3
   15384:	str	r1, [r0]
   15388:	bx	lr
   1538c:	muleq	r2, ip, r3
   15390:	ldr	r3, [pc, #52]	; 153cc <__assert_fail@plt+0x4070>
   15394:	cmp	r0, #0
   15398:	moveq	r0, r3
   1539c:	add	r3, r0, #8
   153a0:	push	{lr}		; (str lr, [sp, #-4]!)
   153a4:	lsr	lr, r1, #5
   153a8:	and	r1, r1, #31
   153ac:	ldr	ip, [r3, lr, lsl #2]
   153b0:	lsr	r0, ip, r1
   153b4:	eor	r2, r2, r0
   153b8:	and	r2, r2, #1
   153bc:	and	r0, r0, #1
   153c0:	eor	r1, ip, r2, lsl r1
   153c4:	str	r1, [r3, lr, lsl #2]
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	muleq	r2, ip, r3
   153d0:	ldr	r3, [pc, #16]	; 153e8 <__assert_fail@plt+0x408c>
   153d4:	cmp	r0, #0
   153d8:	movne	r3, r0
   153dc:	ldr	r0, [r3, #4]
   153e0:	str	r1, [r3, #4]
   153e4:	bx	lr
   153e8:	muleq	r2, ip, r3
   153ec:	ldr	r3, [pc, #44]	; 15420 <__assert_fail@plt+0x40c4>
   153f0:	cmp	r0, #0
   153f4:	moveq	r0, r3
   153f8:	mov	ip, #10
   153fc:	cmp	r2, #0
   15400:	cmpne	r1, #0
   15404:	str	ip, [r0]
   15408:	beq	15418 <__assert_fail@plt+0x40bc>
   1540c:	str	r1, [r0, #40]	; 0x28
   15410:	str	r2, [r0, #44]	; 0x2c
   15414:	bx	lr
   15418:	push	{r4, lr}
   1541c:	bl	11338 <abort@plt>
   15420:	muleq	r2, ip, r3
   15424:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15428:	sub	sp, sp, #24
   1542c:	ldr	ip, [pc, #108]	; 154a0 <__assert_fail@plt+0x4144>
   15430:	ldr	r4, [sp, #56]	; 0x38
   15434:	mov	r9, r2
   15438:	cmp	r4, #0
   1543c:	moveq	r4, ip
   15440:	mov	sl, r3
   15444:	mov	r7, r0
   15448:	mov	r8, r1
   1544c:	bl	1123c <__errno_location@plt>
   15450:	ldr	r3, [r4, #44]	; 0x2c
   15454:	mov	r1, r8
   15458:	ldr	r6, [r0]
   1545c:	str	r3, [sp, #16]
   15460:	ldr	r2, [r4, #40]	; 0x28
   15464:	add	r3, r4, #8
   15468:	str	r3, [sp, #8]
   1546c:	str	r2, [sp, #12]
   15470:	ldr	r2, [r4, #4]
   15474:	mov	r5, r0
   15478:	str	r2, [sp, #4]
   1547c:	ldr	ip, [r4]
   15480:	mov	r3, sl
   15484:	mov	r2, r9
   15488:	mov	r0, r7
   1548c:	str	ip, [sp]
   15490:	bl	13978 <__assert_fail@plt+0x261c>
   15494:	str	r6, [r5]
   15498:	add	sp, sp, #24
   1549c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154a0:	muleq	r2, ip, r3
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a8:	cmp	r3, #0
   154ac:	sub	sp, sp, #44	; 0x2c
   154b0:	ldr	r4, [pc, #192]	; 15578 <__assert_fail@plt+0x421c>
   154b4:	mov	r6, r2
   154b8:	movne	r4, r3
   154bc:	mov	r9, r1
   154c0:	mov	r8, r0
   154c4:	bl	1123c <__errno_location@plt>
   154c8:	ldr	r3, [r4, #44]	; 0x2c
   154cc:	ldr	r5, [r4, #4]
   154d0:	add	sl, r4, #8
   154d4:	cmp	r6, #0
   154d8:	orreq	r5, r5, #1
   154dc:	mov	r1, #0
   154e0:	ldr	r2, [r0]
   154e4:	str	r3, [sp, #16]
   154e8:	ldr	r3, [r4, #40]	; 0x28
   154ec:	stmib	sp, {r5, sl}
   154f0:	str	r3, [sp, #12]
   154f4:	ldr	r3, [r4]
   154f8:	mov	r7, r0
   154fc:	str	r2, [sp, #28]
   15500:	str	r3, [sp]
   15504:	mov	r2, r8
   15508:	mov	r3, r9
   1550c:	mov	r0, r1
   15510:	bl	13978 <__assert_fail@plt+0x261c>
   15514:	add	r1, r0, #1
   15518:	mov	fp, r0
   1551c:	mov	r0, r1
   15520:	str	r1, [sp, #36]	; 0x24
   15524:	bl	15f9c <__assert_fail@plt+0x4c40>
   15528:	ldr	r3, [r4, #44]	; 0x2c
   1552c:	mov	r2, r8
   15530:	str	r3, [sp, #16]
   15534:	ldr	r3, [r4, #40]	; 0x28
   15538:	str	r5, [sp, #4]
   1553c:	str	r3, [sp, #12]
   15540:	str	sl, [sp, #8]
   15544:	ldr	ip, [r4]
   15548:	ldr	r1, [sp, #36]	; 0x24
   1554c:	mov	r3, r9
   15550:	str	ip, [sp]
   15554:	str	r0, [sp, #32]
   15558:	bl	13978 <__assert_fail@plt+0x261c>
   1555c:	ldr	r2, [sp, #28]
   15560:	cmp	r6, #0
   15564:	str	r2, [r7]
   15568:	ldr	r0, [sp, #32]
   1556c:	strne	fp, [r6]
   15570:	add	sp, sp, #44	; 0x2c
   15574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15578:	muleq	r2, ip, r3
   1557c:	mov	r3, r2
   15580:	mov	r2, #0
   15584:	b	154a4 <__assert_fail@plt+0x4148>
   15588:	push	{r4, r5, r6, r7, r8, lr}
   1558c:	ldr	r6, [pc, #112]	; 15604 <__assert_fail@plt+0x42a8>
   15590:	ldr	r3, [r6, #4]
   15594:	ldr	r7, [r6]
   15598:	cmp	r3, #1
   1559c:	ble	155c0 <__assert_fail@plt+0x4264>
   155a0:	sub	r5, r7, #8
   155a4:	add	r5, r5, r3, lsl #3
   155a8:	mov	r4, r7
   155ac:	ldr	r0, [r4, #12]
   155b0:	add	r4, r4, #8
   155b4:	bl	1108c <free@plt>
   155b8:	cmp	r4, r5
   155bc:	bne	155ac <__assert_fail@plt+0x4250>
   155c0:	ldr	r0, [r7, #4]
   155c4:	ldr	r4, [pc, #60]	; 15608 <__assert_fail@plt+0x42ac>
   155c8:	cmp	r0, r4
   155cc:	beq	155e0 <__assert_fail@plt+0x4284>
   155d0:	bl	1108c <free@plt>
   155d4:	mov	r3, #256	; 0x100
   155d8:	str	r4, [r6, #12]
   155dc:	str	r3, [r6, #8]
   155e0:	ldr	r4, [pc, #36]	; 1560c <__assert_fail@plt+0x42b0>
   155e4:	cmp	r7, r4
   155e8:	beq	155f8 <__assert_fail@plt+0x429c>
   155ec:	mov	r0, r7
   155f0:	bl	1108c <free@plt>
   155f4:	str	r4, [r6]
   155f8:	mov	r3, #1
   155fc:	str	r3, [r6, #4]
   15600:	pop	{r4, r5, r6, r7, r8, pc}
   15604:	andeq	sl, r2, r8, lsr r1
   15608:	muleq	r2, ip, r2
   1560c:	andeq	sl, r2, r0, asr #2
   15610:	ldr	r3, [pc, #4]	; 1561c <__assert_fail@plt+0x42c0>
   15614:	mvn	r2, #0
   15618:	b	15190 <__assert_fail@plt+0x3e34>
   1561c:	muleq	r2, ip, r3
   15620:	ldr	r3, [pc]	; 15628 <__assert_fail@plt+0x42cc>
   15624:	b	15190 <__assert_fail@plt+0x3e34>
   15628:	muleq	r2, ip, r3
   1562c:	mov	r1, r0
   15630:	ldr	r3, [pc, #8]	; 15640 <__assert_fail@plt+0x42e4>
   15634:	mvn	r2, #0
   15638:	mov	r0, #0
   1563c:	b	15190 <__assert_fail@plt+0x3e34>
   15640:	muleq	r2, ip, r3
   15644:	mov	r2, r1
   15648:	ldr	r3, [pc, #8]	; 15658 <__assert_fail@plt+0x42fc>
   1564c:	mov	r1, r0
   15650:	mov	r0, #0
   15654:	b	15190 <__assert_fail@plt+0x3e34>
   15658:	muleq	r2, ip, r3
   1565c:	push	{r4, r5, r6, lr}
   15660:	sub	sp, sp, #56	; 0x38
   15664:	ldr	r4, [pc, #68]	; 156b0 <__assert_fail@plt+0x4354>
   15668:	mov	r6, r2
   1566c:	mov	r5, r0
   15670:	ldr	r3, [r4]
   15674:	add	r0, sp, #4
   15678:	str	r3, [sp, #52]	; 0x34
   1567c:	bl	13808 <__assert_fail@plt+0x24ac>
   15680:	add	r3, sp, #4
   15684:	mvn	r2, #0
   15688:	mov	r1, r6
   1568c:	mov	r0, r5
   15690:	bl	15190 <__assert_fail@plt+0x3e34>
   15694:	ldr	r2, [sp, #52]	; 0x34
   15698:	ldr	r3, [r4]
   1569c:	cmp	r2, r3
   156a0:	bne	156ac <__assert_fail@plt+0x4350>
   156a4:	add	sp, sp, #56	; 0x38
   156a8:	pop	{r4, r5, r6, pc}
   156ac:	bl	110f8 <__stack_chk_fail@plt>
   156b0:	andeq	r9, r2, r8, lsl #30
   156b4:	push	{r4, r5, r6, r7, lr}
   156b8:	sub	sp, sp, #60	; 0x3c
   156bc:	ldr	r4, [pc, #72]	; 1570c <__assert_fail@plt+0x43b0>
   156c0:	mov	r6, r2
   156c4:	mov	r7, r3
   156c8:	ldr	ip, [r4]
   156cc:	mov	r5, r0
   156d0:	add	r0, sp, #4
   156d4:	str	ip, [sp, #52]	; 0x34
   156d8:	bl	13808 <__assert_fail@plt+0x24ac>
   156dc:	add	r3, sp, #4
   156e0:	mov	r2, r7
   156e4:	mov	r1, r6
   156e8:	mov	r0, r5
   156ec:	bl	15190 <__assert_fail@plt+0x3e34>
   156f0:	ldr	r2, [sp, #52]	; 0x34
   156f4:	ldr	r3, [r4]
   156f8:	cmp	r2, r3
   156fc:	bne	15708 <__assert_fail@plt+0x43ac>
   15700:	add	sp, sp, #60	; 0x3c
   15704:	pop	{r4, r5, r6, r7, pc}
   15708:	bl	110f8 <__stack_chk_fail@plt>
   1570c:	andeq	r9, r2, r8, lsl #30
   15710:	mov	r2, r1
   15714:	mov	r1, r0
   15718:	mov	r0, #0
   1571c:	b	1565c <__assert_fail@plt+0x4300>
   15720:	mov	r3, r2
   15724:	mov	r2, r1
   15728:	mov	r1, r0
   1572c:	mov	r0, #0
   15730:	b	156b4 <__assert_fail@plt+0x4358>
   15734:	push	{r4, r5, r6, r7, r8, r9, lr}
   15738:	mov	r4, r2
   1573c:	ldr	lr, [pc, #128]	; 157c4 <__assert_fail@plt+0x4468>
   15740:	mov	r8, r0
   15744:	mov	r9, r1
   15748:	ldm	lr!, {r0, r1, r2, r3}
   1574c:	sub	sp, sp, #60	; 0x3c
   15750:	add	ip, sp, #4
   15754:	lsr	r6, r4, #5
   15758:	stmia	ip!, {r0, r1, r2, r3}
   1575c:	add	r7, sp, #12
   15760:	ldm	lr!, {r0, r1, r2, r3}
   15764:	and	r4, r4, #31
   15768:	ldr	r5, [pc, #88]	; 157c8 <__assert_fail@plt+0x446c>
   1576c:	stmia	ip!, {r0, r1, r2, r3}
   15770:	ldm	lr, {r0, r1, r2, r3}
   15774:	stm	ip, {r0, r1, r2, r3}
   15778:	mov	r2, r9
   1577c:	ldr	r3, [r7, r6, lsl #2]
   15780:	ldr	ip, [r5]
   15784:	mov	r1, r8
   15788:	mvn	r0, r3, lsr r4
   1578c:	and	r0, r0, #1
   15790:	str	ip, [sp, #52]	; 0x34
   15794:	eor	r4, r3, r0, lsl r4
   15798:	add	r3, sp, #4
   1579c:	mov	r0, #0
   157a0:	str	r4, [r7, r6, lsl #2]
   157a4:	bl	15190 <__assert_fail@plt+0x3e34>
   157a8:	ldr	r2, [sp, #52]	; 0x34
   157ac:	ldr	r3, [r5]
   157b0:	cmp	r2, r3
   157b4:	bne	157c0 <__assert_fail@plt+0x4464>
   157b8:	add	sp, sp, #60	; 0x3c
   157bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   157c0:	bl	110f8 <__stack_chk_fail@plt>
   157c4:	muleq	r2, ip, r3
   157c8:	andeq	r9, r2, r8, lsl #30
   157cc:	mov	r2, r1
   157d0:	mvn	r1, #0
   157d4:	b	15734 <__assert_fail@plt+0x43d8>
   157d8:	mov	r2, #58	; 0x3a
   157dc:	mvn	r1, #0
   157e0:	b	15734 <__assert_fail@plt+0x43d8>
   157e4:	mov	r2, #58	; 0x3a
   157e8:	b	15734 <__assert_fail@plt+0x43d8>
   157ec:	push	{r4, r5, r6, r7, r8, lr}
   157f0:	sub	sp, sp, #104	; 0x68
   157f4:	ldr	r5, [pc, #120]	; 15874 <__assert_fail@plt+0x4518>
   157f8:	mov	r6, r0
   157fc:	mov	r0, sp
   15800:	ldr	r3, [r5]
   15804:	mov	r7, r2
   15808:	str	r3, [sp, #100]	; 0x64
   1580c:	bl	13808 <__assert_fail@plt+0x24ac>
   15810:	mov	ip, sp
   15814:	add	lr, sp, #52	; 0x34
   15818:	ldm	ip!, {r0, r1, r2, r3}
   1581c:	stmia	lr!, {r0, r1, r2, r3}
   15820:	ldm	ip!, {r0, r1, r2, r3}
   15824:	ldr	r8, [sp, #64]	; 0x40
   15828:	stmia	lr!, {r0, r1, r2, r3}
   1582c:	mvn	r4, r8
   15830:	ldm	ip, {r0, r1, r2, r3}
   15834:	and	ip, r4, #67108864	; 0x4000000
   15838:	eor	ip, ip, r8
   1583c:	str	ip, [sp, #64]	; 0x40
   15840:	stm	lr, {r0, r1, r2, r3}
   15844:	add	r3, sp, #52	; 0x34
   15848:	mvn	r2, #0
   1584c:	mov	r1, r7
   15850:	mov	r0, r6
   15854:	bl	15190 <__assert_fail@plt+0x3e34>
   15858:	ldr	r2, [sp, #100]	; 0x64
   1585c:	ldr	r3, [r5]
   15860:	cmp	r2, r3
   15864:	bne	15870 <__assert_fail@plt+0x4514>
   15868:	add	sp, sp, #104	; 0x68
   1586c:	pop	{r4, r5, r6, r7, r8, pc}
   15870:	bl	110f8 <__stack_chk_fail@plt>
   15874:	andeq	r9, r2, r8, lsl #30
   15878:	push	{r4, r5, r6, r7, r8, r9, lr}
   1587c:	mov	r6, r1
   15880:	ldr	lr, [pc, #132]	; 1590c <__assert_fail@plt+0x45b0>
   15884:	mov	r5, r2
   15888:	mov	r8, r0
   1588c:	mov	r9, r3
   15890:	ldm	lr!, {r0, r1, r2, r3}
   15894:	sub	sp, sp, #60	; 0x3c
   15898:	add	ip, sp, #4
   1589c:	ldr	r4, [pc, #108]	; 15910 <__assert_fail@plt+0x45b4>
   158a0:	stmia	ip!, {r0, r1, r2, r3}
   158a4:	mov	r7, #10
   158a8:	ldm	lr!, {r0, r1, r2, r3}
   158ac:	cmp	r5, #0
   158b0:	cmpne	r6, #0
   158b4:	str	r7, [sp, #4]
   158b8:	stmia	ip!, {r0, r1, r2, r3}
   158bc:	ldm	lr, {r0, r1, r2, r3}
   158c0:	ldr	lr, [r4]
   158c4:	stm	ip, {r0, r1, r2, r3}
   158c8:	str	lr, [sp, #52]	; 0x34
   158cc:	beq	15908 <__assert_fail@plt+0x45ac>
   158d0:	add	r3, sp, #4
   158d4:	ldr	r2, [sp, #88]	; 0x58
   158d8:	mov	r1, r9
   158dc:	mov	r0, r8
   158e0:	str	r6, [sp, #44]	; 0x2c
   158e4:	str	r5, [sp, #48]	; 0x30
   158e8:	bl	15190 <__assert_fail@plt+0x3e34>
   158ec:	ldr	r2, [sp, #52]	; 0x34
   158f0:	ldr	r3, [r4]
   158f4:	cmp	r2, r3
   158f8:	bne	15904 <__assert_fail@plt+0x45a8>
   158fc:	add	sp, sp, #60	; 0x3c
   15900:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15904:	bl	110f8 <__stack_chk_fail@plt>
   15908:	bl	11338 <abort@plt>
   1590c:	muleq	r2, ip, r3
   15910:	andeq	r9, r2, r8, lsl #30
   15914:	push	{lr}		; (str lr, [sp, #-4]!)
   15918:	sub	sp, sp, #12
   1591c:	mvn	ip, #0
   15920:	str	ip, [sp]
   15924:	bl	15878 <__assert_fail@plt+0x451c>
   15928:	add	sp, sp, #12
   1592c:	pop	{pc}		; (ldr pc, [sp], #4)
   15930:	push	{lr}		; (str lr, [sp, #-4]!)
   15934:	sub	sp, sp, #12
   15938:	mvn	ip, #0
   1593c:	mov	r3, r2
   15940:	str	ip, [sp]
   15944:	mov	r2, r1
   15948:	mov	r1, r0
   1594c:	mov	r0, #0
   15950:	bl	15878 <__assert_fail@plt+0x451c>
   15954:	add	sp, sp, #12
   15958:	pop	{pc}		; (ldr pc, [sp], #4)
   1595c:	push	{lr}		; (str lr, [sp, #-4]!)
   15960:	sub	sp, sp, #12
   15964:	str	r3, [sp]
   15968:	mov	r3, r2
   1596c:	mov	r2, r1
   15970:	mov	r1, r0
   15974:	mov	r0, #0
   15978:	bl	15878 <__assert_fail@plt+0x451c>
   1597c:	add	sp, sp, #12
   15980:	pop	{pc}		; (ldr pc, [sp], #4)
   15984:	ldr	r3, [pc]	; 1598c <__assert_fail@plt+0x4630>
   15988:	b	15190 <__assert_fail@plt+0x3e34>
   1598c:	andeq	sl, r2, r8, asr #2
   15990:	mov	r2, r1
   15994:	ldr	r3, [pc, #8]	; 159a4 <__assert_fail@plt+0x4648>
   15998:	mov	r1, r0
   1599c:	mov	r0, #0
   159a0:	b	15190 <__assert_fail@plt+0x3e34>
   159a4:	andeq	sl, r2, r8, asr #2
   159a8:	ldr	r3, [pc, #4]	; 159b4 <__assert_fail@plt+0x4658>
   159ac:	mvn	r2, #0
   159b0:	b	15190 <__assert_fail@plt+0x3e34>
   159b4:	andeq	sl, r2, r8, asr #2
   159b8:	mov	r1, r0
   159bc:	ldr	r3, [pc, #8]	; 159cc <__assert_fail@plt+0x4670>
   159c0:	mvn	r2, #0
   159c4:	mov	r0, #0
   159c8:	b	15190 <__assert_fail@plt+0x3e34>
   159cc:	andeq	sl, r2, r8, asr #2
   159d0:	push	{r4, r5, r6, r7, r8, lr}
   159d4:	mov	r8, r0
   159d8:	ldr	r5, [pc, #84]	; 15a34 <__assert_fail@plt+0x46d8>
   159dc:	mov	r7, r1
   159e0:	mov	r4, r2
   159e4:	mov	r2, r4
   159e8:	mov	r1, r7
   159ec:	mov	r0, r8
   159f0:	bl	11068 <read@plt>
   159f4:	subs	r6, r0, #0
   159f8:	bge	15a2c <__assert_fail@plt+0x46d0>
   159fc:	bl	1123c <__errno_location@plt>
   15a00:	ldr	r3, [r0]
   15a04:	cmp	r3, #4
   15a08:	beq	159e4 <__assert_fail@plt+0x4688>
   15a0c:	cmp	r4, r5
   15a10:	movls	r2, #0
   15a14:	movhi	r2, #1
   15a18:	cmp	r3, #22
   15a1c:	movne	r2, #0
   15a20:	cmp	r2, #0
   15a24:	mov	r4, r5
   15a28:	bne	159e4 <__assert_fail@plt+0x4688>
   15a2c:	mov	r0, r6
   15a30:	pop	{r4, r5, r6, r7, r8, pc}
   15a34:	svcvc	0x00f00000	; IMB
   15a38:	mov	r2, #3
   15a3c:	mov	r1, #0
   15a40:	b	178fc <__assert_fail@plt+0x65a0>
   15a44:	push	{r4, r5, r6, lr}
   15a48:	sub	sp, sp, #32
   15a4c:	cmp	r1, #0
   15a50:	mov	r5, r0
   15a54:	ldr	r4, [sp, #48]	; 0x30
   15a58:	ldr	r6, [sp, #52]	; 0x34
   15a5c:	beq	15aec <__assert_fail@plt+0x4790>
   15a60:	strd	r2, [sp]
   15a64:	mov	r3, r1
   15a68:	ldr	r2, [pc, #828]	; 15dac <__assert_fail@plt+0x4a50>
   15a6c:	mov	r1, #1
   15a70:	bl	11284 <__fprintf_chk@plt>
   15a74:	mov	r2, #5
   15a78:	ldr	r1, [pc, #816]	; 15db0 <__assert_fail@plt+0x4a54>
   15a7c:	mov	r0, #0
   15a80:	bl	110ec <dcgettext@plt>
   15a84:	ldr	r3, [pc, #808]	; 15db4 <__assert_fail@plt+0x4a58>
   15a88:	ldr	r2, [pc, #808]	; 15db8 <__assert_fail@plt+0x4a5c>
   15a8c:	str	r3, [sp]
   15a90:	mov	r1, #1
   15a94:	mov	r3, r0
   15a98:	mov	r0, r5
   15a9c:	bl	11284 <__fprintf_chk@plt>
   15aa0:	ldr	r1, [pc, #788]	; 15dbc <__assert_fail@plt+0x4a60>
   15aa4:	mov	r2, #5
   15aa8:	mov	r0, #0
   15aac:	bl	110ec <dcgettext@plt>
   15ab0:	mov	r1, r5
   15ab4:	bl	11044 <fputs_unlocked@plt>
   15ab8:	cmp	r6, #9
   15abc:	ldrls	pc, [pc, r6, lsl #2]
   15ac0:	b	15d9c <__assert_fail@plt+0x4a40>
   15ac4:	andeq	r5, r1, r8, lsr #27
   15ac8:	andeq	r5, r1, r0, ror fp
   15acc:	muleq	r1, ip, fp
   15ad0:	ldrdeq	r5, [r1], -r0
   15ad4:	andeq	r5, r1, ip, lsl #24
   15ad8:	andeq	r5, r1, ip, asr #24
   15adc:	muleq	r1, r4, ip
   15ae0:	andeq	r5, r1, r4, ror #25
   15ae4:	andeq	r5, r1, ip, lsr sp
   15ae8:	andeq	r5, r1, r4, lsl #22
   15aec:	str	r3, [sp]
   15af0:	mov	r1, #1
   15af4:	mov	r3, r2
   15af8:	ldr	r2, [pc, #704]	; 15dc0 <__assert_fail@plt+0x4a64>
   15afc:	bl	11284 <__fprintf_chk@plt>
   15b00:	b	15a74 <__assert_fail@plt+0x4718>
   15b04:	ldr	r1, [pc, #696]	; 15dc4 <__assert_fail@plt+0x4a68>
   15b08:	mov	r2, #5
   15b0c:	mov	r0, #0
   15b10:	bl	110ec <dcgettext@plt>
   15b14:	ldr	r2, [r4, #32]
   15b18:	ldr	r3, [r4, #28]
   15b1c:	ldr	r1, [r4, #24]
   15b20:	str	r2, [sp, #28]
   15b24:	ldr	r2, [r4, #20]
   15b28:	str	r3, [sp, #24]
   15b2c:	ldr	r3, [r4, #16]
   15b30:	str	r1, [sp, #20]
   15b34:	ldr	r1, [r4, #12]
   15b38:	str	r2, [sp, #16]
   15b3c:	ldr	r2, [r4, #8]
   15b40:	str	r3, [sp, #12]
   15b44:	ldr	r3, [r4, #4]
   15b48:	str	r1, [sp, #8]
   15b4c:	str	r2, [sp, #4]
   15b50:	str	r3, [sp]
   15b54:	mov	r1, #1
   15b58:	ldr	r3, [r4]
   15b5c:	mov	r2, r0
   15b60:	mov	r0, r5
   15b64:	bl	11284 <__fprintf_chk@plt>
   15b68:	add	sp, sp, #32
   15b6c:	pop	{r4, r5, r6, pc}
   15b70:	mov	r2, #5
   15b74:	ldr	r1, [pc, #588]	; 15dc8 <__assert_fail@plt+0x4a6c>
   15b78:	mov	r0, #0
   15b7c:	bl	110ec <dcgettext@plt>
   15b80:	ldr	r3, [r4]
   15b84:	mov	r1, #1
   15b88:	mov	r2, r0
   15b8c:	mov	r0, r5
   15b90:	add	sp, sp, #32
   15b94:	pop	{r4, r5, r6, lr}
   15b98:	b	11284 <__fprintf_chk@plt>
   15b9c:	mov	r2, #5
   15ba0:	ldr	r1, [pc, #548]	; 15dcc <__assert_fail@plt+0x4a70>
   15ba4:	mov	r0, #0
   15ba8:	bl	110ec <dcgettext@plt>
   15bac:	ldr	r2, [r4, #4]
   15bb0:	ldr	r3, [r4]
   15bb4:	mov	r1, #1
   15bb8:	str	r2, [sp, #48]	; 0x30
   15bbc:	mov	r2, r0
   15bc0:	mov	r0, r5
   15bc4:	add	sp, sp, #32
   15bc8:	pop	{r4, r5, r6, lr}
   15bcc:	b	11284 <__fprintf_chk@plt>
   15bd0:	mov	r2, #5
   15bd4:	ldr	r1, [pc, #500]	; 15dd0 <__assert_fail@plt+0x4a74>
   15bd8:	mov	r0, #0
   15bdc:	bl	110ec <dcgettext@plt>
   15be0:	ldr	r2, [r4, #8]
   15be4:	ldr	r3, [r4, #4]
   15be8:	mov	r1, #1
   15bec:	str	r2, [sp, #52]	; 0x34
   15bf0:	str	r3, [sp, #48]	; 0x30
   15bf4:	ldr	r3, [r4]
   15bf8:	mov	r2, r0
   15bfc:	mov	r0, r5
   15c00:	add	sp, sp, #32
   15c04:	pop	{r4, r5, r6, lr}
   15c08:	b	11284 <__fprintf_chk@plt>
   15c0c:	mov	r2, #5
   15c10:	ldr	r1, [pc, #444]	; 15dd4 <__assert_fail@plt+0x4a78>
   15c14:	mov	r0, #0
   15c18:	bl	110ec <dcgettext@plt>
   15c1c:	ldr	r1, [r4, #12]
   15c20:	ldr	r2, [r4, #8]
   15c24:	ldr	r3, [r4, #4]
   15c28:	str	r1, [sp, #8]
   15c2c:	str	r2, [sp, #4]
   15c30:	str	r3, [sp]
   15c34:	mov	r1, #1
   15c38:	ldr	r3, [r4]
   15c3c:	mov	r2, r0
   15c40:	mov	r0, r5
   15c44:	bl	11284 <__fprintf_chk@plt>
   15c48:	b	15b68 <__assert_fail@plt+0x480c>
   15c4c:	mov	r2, #5
   15c50:	ldr	r1, [pc, #384]	; 15dd8 <__assert_fail@plt+0x4a7c>
   15c54:	mov	r0, #0
   15c58:	bl	110ec <dcgettext@plt>
   15c5c:	ldr	r3, [r4, #16]
   15c60:	ldr	r1, [r4, #12]
   15c64:	ldr	r2, [r4, #8]
   15c68:	str	r3, [sp, #12]
   15c6c:	ldr	r3, [r4, #4]
   15c70:	str	r1, [sp, #8]
   15c74:	str	r2, [sp, #4]
   15c78:	str	r3, [sp]
   15c7c:	mov	r1, #1
   15c80:	ldr	r3, [r4]
   15c84:	mov	r2, r0
   15c88:	mov	r0, r5
   15c8c:	bl	11284 <__fprintf_chk@plt>
   15c90:	b	15b68 <__assert_fail@plt+0x480c>
   15c94:	mov	r2, #5
   15c98:	ldr	r1, [pc, #316]	; 15ddc <__assert_fail@plt+0x4a80>
   15c9c:	mov	r0, #0
   15ca0:	bl	110ec <dcgettext@plt>
   15ca4:	ldr	r2, [r4, #20]
   15ca8:	ldr	r3, [r4, #16]
   15cac:	ldr	r1, [r4, #12]
   15cb0:	str	r2, [sp, #16]
   15cb4:	ldr	r2, [r4, #8]
   15cb8:	str	r3, [sp, #12]
   15cbc:	ldr	r3, [r4, #4]
   15cc0:	str	r1, [sp, #8]
   15cc4:	str	r2, [sp, #4]
   15cc8:	str	r3, [sp]
   15ccc:	mov	r1, #1
   15cd0:	ldr	r3, [r4]
   15cd4:	mov	r2, r0
   15cd8:	mov	r0, r5
   15cdc:	bl	11284 <__fprintf_chk@plt>
   15ce0:	b	15b68 <__assert_fail@plt+0x480c>
   15ce4:	mov	r2, #5
   15ce8:	ldr	r1, [pc, #240]	; 15de0 <__assert_fail@plt+0x4a84>
   15cec:	mov	r0, #0
   15cf0:	bl	110ec <dcgettext@plt>
   15cf4:	ldr	r1, [r4, #24]
   15cf8:	ldr	r2, [r4, #20]
   15cfc:	ldr	r3, [r4, #16]
   15d00:	str	r1, [sp, #20]
   15d04:	ldr	r1, [r4, #12]
   15d08:	str	r2, [sp, #16]
   15d0c:	ldr	r2, [r4, #8]
   15d10:	str	r3, [sp, #12]
   15d14:	ldr	r3, [r4, #4]
   15d18:	str	r1, [sp, #8]
   15d1c:	str	r2, [sp, #4]
   15d20:	str	r3, [sp]
   15d24:	mov	r1, #1
   15d28:	ldr	r3, [r4]
   15d2c:	mov	r2, r0
   15d30:	mov	r0, r5
   15d34:	bl	11284 <__fprintf_chk@plt>
   15d38:	b	15b68 <__assert_fail@plt+0x480c>
   15d3c:	mov	r2, #5
   15d40:	ldr	r1, [pc, #156]	; 15de4 <__assert_fail@plt+0x4a88>
   15d44:	mov	r0, #0
   15d48:	bl	110ec <dcgettext@plt>
   15d4c:	ldr	r3, [r4, #28]
   15d50:	ldr	r1, [r4, #24]
   15d54:	ldr	r2, [r4, #20]
   15d58:	str	r3, [sp, #24]
   15d5c:	ldr	r3, [r4, #16]
   15d60:	str	r1, [sp, #20]
   15d64:	ldr	r1, [r4, #12]
   15d68:	str	r2, [sp, #16]
   15d6c:	ldr	r2, [r4, #8]
   15d70:	str	r3, [sp, #12]
   15d74:	ldr	r3, [r4, #4]
   15d78:	str	r1, [sp, #8]
   15d7c:	str	r2, [sp, #4]
   15d80:	str	r3, [sp]
   15d84:	mov	r1, #1
   15d88:	ldr	r3, [r4]
   15d8c:	mov	r2, r0
   15d90:	mov	r0, r5
   15d94:	bl	11284 <__fprintf_chk@plt>
   15d98:	b	15b68 <__assert_fail@plt+0x480c>
   15d9c:	mov	r2, #5
   15da0:	ldr	r1, [pc, #64]	; 15de8 <__assert_fail@plt+0x4a8c>
   15da4:	b	15b0c <__assert_fail@plt+0x47b0>
   15da8:	bl	11338 <abort@plt>
   15dac:	andeq	r8, r1, r4, lsl #30
   15db0:	andeq	r8, r1, r8, lsl pc
   15db4:	andeq	r0, r0, r2, ror #15
   15db8:	andeq	r9, r1, ip, ror #3
   15dbc:	andeq	r8, r1, ip, lsl pc
   15dc0:	andeq	r8, r1, r0, lsl pc
   15dc4:	strdeq	r9, [r1], -r4
   15dc8:	andeq	r8, r1, r8, ror #31
   15dcc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15dd0:	andeq	r9, r1, r0, lsl r0
   15dd4:	andeq	r9, r1, ip, lsr #32
   15dd8:	andeq	r9, r1, ip, asr #32
   15ddc:	andeq	r9, r1, r0, ror r0
   15de0:	muleq	r1, r8, r0
   15de4:	andeq	r9, r1, r4, asr #1
   15de8:	andeq	r9, r1, r8, lsr #2
   15dec:	push	{r4, r5, lr}
   15df0:	sub	sp, sp, #12
   15df4:	ldr	r5, [sp, #24]
   15df8:	ldr	ip, [r5]
   15dfc:	cmp	ip, #0
   15e00:	beq	15e1c <__assert_fail@plt+0x4ac0>
   15e04:	mov	lr, r5
   15e08:	mov	ip, #0
   15e0c:	ldr	r4, [lr, #4]!
   15e10:	add	ip, ip, #1
   15e14:	cmp	r4, #0
   15e18:	bne	15e0c <__assert_fail@plt+0x4ab0>
   15e1c:	stm	sp, {r5, ip}
   15e20:	bl	15a44 <__assert_fail@plt+0x46e8>
   15e24:	add	sp, sp, #12
   15e28:	pop	{r4, r5, pc}
   15e2c:	push	{r4, r5, r6, lr}
   15e30:	sub	sp, sp, #56	; 0x38
   15e34:	ldr	r6, [pc, #88]	; 15e94 <__assert_fail@plt+0x4b38>
   15e38:	ldr	r5, [sp, #72]	; 0x48
   15e3c:	add	r4, sp, #8
   15e40:	ldr	ip, [r6]
   15e44:	str	ip, [sp, #52]	; 0x34
   15e48:	mov	ip, #0
   15e4c:	ldr	lr, [r5], #4
   15e50:	cmp	lr, #0
   15e54:	str	lr, [r4, #4]!
   15e58:	beq	15e68 <__assert_fail@plt+0x4b0c>
   15e5c:	add	ip, ip, #1
   15e60:	cmp	ip, #10
   15e64:	bne	15e4c <__assert_fail@plt+0x4af0>
   15e68:	add	lr, sp, #12
   15e6c:	str	ip, [sp, #4]
   15e70:	str	lr, [sp]
   15e74:	bl	15a44 <__assert_fail@plt+0x46e8>
   15e78:	ldr	r2, [sp, #52]	; 0x34
   15e7c:	ldr	r3, [r6]
   15e80:	cmp	r2, r3
   15e84:	bne	15e90 <__assert_fail@plt+0x4b34>
   15e88:	add	sp, sp, #56	; 0x38
   15e8c:	pop	{r4, r5, r6, pc}
   15e90:	bl	110f8 <__stack_chk_fail@plt>
   15e94:	andeq	r9, r2, r8, lsl #30
   15e98:	push	{r3}		; (str r3, [sp, #-4]!)
   15e9c:	mov	ip, #0
   15ea0:	push	{r4, r5, r6, lr}
   15ea4:	sub	sp, sp, #60	; 0x3c
   15ea8:	ldr	r6, [pc, #100]	; 15f14 <__assert_fail@plt+0x4bb8>
   15eac:	add	r5, sp, #8
   15eb0:	add	r4, sp, #80	; 0x50
   15eb4:	ldr	r3, [r6]
   15eb8:	str	r4, [sp, #8]
   15ebc:	str	r3, [sp, #52]	; 0x34
   15ec0:	ldr	r3, [sp, #76]	; 0x4c
   15ec4:	ldr	lr, [r4], #4
   15ec8:	cmp	lr, #0
   15ecc:	str	lr, [r5, #4]!
   15ed0:	beq	15ee0 <__assert_fail@plt+0x4b84>
   15ed4:	add	ip, ip, #1
   15ed8:	cmp	ip, #10
   15edc:	bne	15ec4 <__assert_fail@plt+0x4b68>
   15ee0:	add	lr, sp, #12
   15ee4:	str	ip, [sp, #4]
   15ee8:	str	lr, [sp]
   15eec:	bl	15a44 <__assert_fail@plt+0x46e8>
   15ef0:	ldr	r2, [sp, #52]	; 0x34
   15ef4:	ldr	r3, [r6]
   15ef8:	cmp	r2, r3
   15efc:	bne	15f10 <__assert_fail@plt+0x4bb4>
   15f00:	add	sp, sp, #60	; 0x3c
   15f04:	pop	{r4, r5, r6, lr}
   15f08:	add	sp, sp, #4
   15f0c:	bx	lr
   15f10:	bl	110f8 <__stack_chk_fail@plt>
   15f14:	andeq	r9, r2, r8, lsl #30
   15f18:	push	{r4, lr}
   15f1c:	mov	r2, #5
   15f20:	ldr	r1, [pc, #88]	; 15f80 <__assert_fail@plt+0x4c24>
   15f24:	mov	r0, #0
   15f28:	bl	110ec <dcgettext@plt>
   15f2c:	ldr	r2, [pc, #80]	; 15f84 <__assert_fail@plt+0x4c28>
   15f30:	mov	r1, r0
   15f34:	mov	r0, #1
   15f38:	bl	1126c <__printf_chk@plt>
   15f3c:	mov	r2, #5
   15f40:	ldr	r1, [pc, #64]	; 15f88 <__assert_fail@plt+0x4c2c>
   15f44:	mov	r0, #0
   15f48:	bl	110ec <dcgettext@plt>
   15f4c:	ldr	r3, [pc, #56]	; 15f8c <__assert_fail@plt+0x4c30>
   15f50:	ldr	r2, [pc, #56]	; 15f90 <__assert_fail@plt+0x4c34>
   15f54:	mov	r1, r0
   15f58:	mov	r0, #1
   15f5c:	bl	1126c <__printf_chk@plt>
   15f60:	ldr	r1, [pc, #44]	; 15f94 <__assert_fail@plt+0x4c38>
   15f64:	mov	r2, #5
   15f68:	mov	r0, #0
   15f6c:	bl	110ec <dcgettext@plt>
   15f70:	ldr	r3, [pc, #32]	; 15f98 <__assert_fail@plt+0x4c3c>
   15f74:	pop	{r4, lr}
   15f78:	ldr	r1, [r3]
   15f7c:	b	11044 <fputs_unlocked@plt>
   15f80:	andeq	r9, r1, r4, ror #2
   15f84:	andeq	r9, r1, ip, ror r1
   15f88:	muleq	r1, r4, r1
   15f8c:	andeq	r8, r1, r8, asr #17
   15f90:	strdeq	r8, [r1], -r0
   15f94:	andeq	r9, r1, r8, lsr #3
   15f98:	muleq	r2, r0, r1
   15f9c:	push	{r4, lr}
   15fa0:	mov	r4, r0
   15fa4:	bl	111b8 <malloc@plt>
   15fa8:	adds	r4, r4, #0
   15fac:	movne	r4, #1
   15fb0:	cmp	r0, #0
   15fb4:	movne	r4, #0
   15fb8:	cmp	r4, #0
   15fbc:	popeq	{r4, pc}
   15fc0:	bl	12a68 <__assert_fail@plt+0x170c>
   15fc4:	push	{r4, r5, r6, lr}
   15fc8:	umull	r4, r5, r0, r1
   15fcc:	adds	r3, r5, #0
   15fd0:	movne	r3, #1
   15fd4:	cmp	r4, #0
   15fd8:	blt	15ff0 <__assert_fail@plt+0x4c94>
   15fdc:	cmp	r3, #0
   15fe0:	bne	15ff0 <__assert_fail@plt+0x4c94>
   15fe4:	mul	r0, r1, r0
   15fe8:	pop	{r4, r5, r6, lr}
   15fec:	b	15f9c <__assert_fail@plt+0x4c40>
   15ff0:	bl	12a68 <__assert_fail@plt+0x170c>
   15ff4:	b	15f9c <__assert_fail@plt+0x4c40>
   15ff8:	adds	r3, r0, #0
   15ffc:	movne	r3, #1
   16000:	cmp	r1, #0
   16004:	movne	r3, #0
   16008:	cmp	r3, #0
   1600c:	push	{r4, lr}
   16010:	bne	16038 <__assert_fail@plt+0x4cdc>
   16014:	mov	r4, r1
   16018:	bl	1111c <realloc@plt>
   1601c:	adds	r4, r4, #0
   16020:	movne	r4, #1
   16024:	cmp	r0, #0
   16028:	movne	r4, #0
   1602c:	cmp	r4, #0
   16030:	popeq	{r4, pc}
   16034:	bl	12a68 <__assert_fail@plt+0x170c>
   16038:	bl	1108c <free@plt>
   1603c:	mov	r0, #0
   16040:	pop	{r4, pc}
   16044:	push	{r4, r5, r6, lr}
   16048:	umull	r4, r5, r1, r2
   1604c:	adds	r3, r5, #0
   16050:	movne	r3, #1
   16054:	cmp	r4, #0
   16058:	blt	16070 <__assert_fail@plt+0x4d14>
   1605c:	cmp	r3, #0
   16060:	bne	16070 <__assert_fail@plt+0x4d14>
   16064:	mul	r1, r2, r1
   16068:	pop	{r4, r5, r6, lr}
   1606c:	b	15ff8 <__assert_fail@plt+0x4c9c>
   16070:	bl	12a68 <__assert_fail@plt+0x170c>
   16074:	push	{r4, r5, r6, r7, r8, lr}
   16078:	subs	r7, r0, #0
   1607c:	mov	r6, r1
   16080:	mov	r5, r2
   16084:	ldr	r4, [r1]
   16088:	beq	160bc <__assert_fail@plt+0x4d60>
   1608c:	mov	r1, r2
   16090:	ldr	r0, [pc, #104]	; 16100 <__assert_fail@plt+0x4da4>
   16094:	bl	17cbc <__assert_fail@plt+0x6960>
   16098:	cmp	r0, r4
   1609c:	bls	160e0 <__assert_fail@plt+0x4d84>
   160a0:	add	r3, r4, #1
   160a4:	add	r4, r3, r4, lsr #1
   160a8:	str	r4, [r6]
   160ac:	mul	r1, r5, r4
   160b0:	mov	r0, r7
   160b4:	pop	{r4, r5, r6, r7, r8, lr}
   160b8:	b	15ff8 <__assert_fail@plt+0x4c9c>
   160bc:	cmp	r4, #0
   160c0:	beq	160e4 <__assert_fail@plt+0x4d88>
   160c4:	umull	r0, r1, r4, r5
   160c8:	adds	r3, r1, #0
   160cc:	movne	r3, #1
   160d0:	cmp	r0, #0
   160d4:	blt	160e0 <__assert_fail@plt+0x4d84>
   160d8:	cmp	r3, #0
   160dc:	beq	160a8 <__assert_fail@plt+0x4d4c>
   160e0:	bl	12a68 <__assert_fail@plt+0x170c>
   160e4:	mov	r1, r2
   160e8:	mov	r0, #64	; 0x40
   160ec:	bl	17cbc <__assert_fail@plt+0x6960>
   160f0:	cmp	r5, #64	; 0x40
   160f4:	movls	r4, r0
   160f8:	addhi	r4, r0, #1
   160fc:	b	160c4 <__assert_fail@plt+0x4d68>
   16100:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   16104:	cmp	r0, #0
   16108:	ldr	r3, [r1]
   1610c:	beq	16130 <__assert_fail@plt+0x4dd4>
   16110:	ldr	r2, [pc, #60]	; 16154 <__assert_fail@plt+0x4df8>
   16114:	cmp	r3, r2
   16118:	bhi	1614c <__assert_fail@plt+0x4df0>
   1611c:	add	r2, r3, #1
   16120:	add	r3, r2, r3, lsr #1
   16124:	str	r3, [r1]
   16128:	mov	r1, r3
   1612c:	b	15ff8 <__assert_fail@plt+0x4c9c>
   16130:	cmp	r3, #0
   16134:	bne	16148 <__assert_fail@plt+0x4dec>
   16138:	mov	r3, #64	; 0x40
   1613c:	str	r3, [r1]
   16140:	mov	r1, r3
   16144:	b	15ff8 <__assert_fail@plt+0x4c9c>
   16148:	bge	16124 <__assert_fail@plt+0x4dc8>
   1614c:	push	{r4, lr}
   16150:	bl	12a68 <__assert_fail@plt+0x170c>
   16154:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   16158:	push	{r4, lr}
   1615c:	mov	r4, r0
   16160:	bl	15f9c <__assert_fail@plt+0x4c40>
   16164:	mov	r2, r4
   16168:	mov	r1, #0
   1616c:	pop	{r4, lr}
   16170:	b	11260 <memset@plt>
   16174:	push	{r4, r5, r6, lr}
   16178:	umull	r4, r5, r0, r1
   1617c:	adds	r3, r5, #0
   16180:	movne	r3, #1
   16184:	cmp	r4, #0
   16188:	blt	161a0 <__assert_fail@plt+0x4e44>
   1618c:	cmp	r3, #0
   16190:	bne	161a0 <__assert_fail@plt+0x4e44>
   16194:	bl	11038 <calloc@plt>
   16198:	cmp	r0, #0
   1619c:	popne	{r4, r5, r6, pc}
   161a0:	bl	12a68 <__assert_fail@plt+0x170c>
   161a4:	push	{r4, r5, r6, lr}
   161a8:	mov	r4, r1
   161ac:	mov	r5, r0
   161b0:	mov	r0, r1
   161b4:	bl	15f9c <__assert_fail@plt+0x4c40>
   161b8:	mov	r2, r4
   161bc:	mov	r1, r5
   161c0:	pop	{r4, r5, r6, lr}
   161c4:	b	110a4 <memcpy@plt>
   161c8:	push	{r4, lr}
   161cc:	mov	r4, r0
   161d0:	bl	11218 <strlen@plt>
   161d4:	add	r1, r0, #1
   161d8:	mov	r0, r4
   161dc:	pop	{r4, lr}
   161e0:	b	161a4 <__assert_fail@plt+0x4e48>
   161e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161e8:	sub	sp, sp, #36	; 0x24
   161ec:	ldr	r6, [pc, #348]	; 16350 <__assert_fail@plt+0x4ff4>
   161f0:	ldr	lr, [sp, #80]	; 0x50
   161f4:	mov	r8, r2
   161f8:	ldr	ip, [r6]
   161fc:	mov	r2, r1
   16200:	mov	r9, r3
   16204:	str	lr, [sp]
   16208:	add	r3, sp, #16
   1620c:	mov	r1, #0
   16210:	str	ip, [sp, #28]
   16214:	mov	r7, r0
   16218:	ldr	sl, [sp, #84]	; 0x54
   1621c:	ldr	r5, [sp, #88]	; 0x58
   16220:	bl	16360 <__assert_fail@plt+0x5004>
   16224:	subs	fp, r0, #0
   16228:	bne	162f0 <__assert_fail@plt+0x4f94>
   1622c:	ldrd	r2, [sp, #16]
   16230:	cmp	r2, r8
   16234:	sbcs	r1, r3, r9
   16238:	ldrd	r8, [sp, #72]	; 0x48
   1623c:	movlt	r1, #1
   16240:	movge	r1, #0
   16244:	cmp	r8, r2
   16248:	sbcs	r0, r9, r3
   1624c:	orrlt	r1, r1, #1
   16250:	cmp	r1, #0
   16254:	beq	162b8 <__assert_fail@plt+0x4f5c>
   16258:	strd	r2, [sp, #8]
   1625c:	bl	1123c <__errno_location@plt>
   16260:	ldrd	r2, [sp, #8]
   16264:	cmp	r2, #1073741824	; 0x40000000
   16268:	sbcs	r1, r3, #0
   1626c:	bge	162d8 <__assert_fail@plt+0x4f7c>
   16270:	mov	r8, #-1073741824	; 0xc0000000
   16274:	mvn	r9, #0
   16278:	cmp	r2, r8
   1627c:	sbcs	r3, r3, r9
   16280:	blt	162d8 <__assert_fail@plt+0x4f7c>
   16284:	mov	r4, #34	; 0x22
   16288:	cmp	r5, #0
   1628c:	str	r4, [r0]
   16290:	beq	16330 <__assert_fail@plt+0x4fd4>
   16294:	mov	r0, r7
   16298:	bl	159b8 <__assert_fail@plt+0x465c>
   1629c:	mov	r3, sl
   162a0:	ldr	r2, [pc, #172]	; 16354 <__assert_fail@plt+0x4ff8>
   162a4:	mov	r1, r4
   162a8:	str	r0, [sp]
   162ac:	mov	r0, r5
   162b0:	bl	111a0 <error@plt>
   162b4:	ldrd	r2, [sp, #16]
   162b8:	ldr	lr, [sp, #28]
   162bc:	ldr	ip, [r6]
   162c0:	mov	r0, r2
   162c4:	cmp	lr, ip
   162c8:	mov	r1, r3
   162cc:	bne	1634c <__assert_fail@plt+0x4ff0>
   162d0:	add	sp, sp, #36	; 0x24
   162d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d8:	mov	r4, #75	; 0x4b
   162dc:	cmp	r5, #0
   162e0:	str	r4, [r0]
   162e4:	moveq	r5, #1
   162e8:	moveq	r4, #75	; 0x4b
   162ec:	b	16294 <__assert_fail@plt+0x4f38>
   162f0:	bl	1123c <__errno_location@plt>
   162f4:	cmp	fp, #1
   162f8:	beq	16338 <__assert_fail@plt+0x4fdc>
   162fc:	cmp	fp, #3
   16300:	beq	1631c <__assert_fail@plt+0x4fc0>
   16304:	ldr	r4, [r0]
   16308:	cmp	r5, #0
   1630c:	moveq	r5, #1
   16310:	cmp	r4, #22
   16314:	moveq	r4, #0
   16318:	b	16294 <__assert_fail@plt+0x4f38>
   1631c:	mov	r4, #0
   16320:	cmp	r5, #0
   16324:	str	r4, [r0]
   16328:	bne	16294 <__assert_fail@plt+0x4f38>
   1632c:	mov	r4, r5
   16330:	mov	r5, #1
   16334:	b	16294 <__assert_fail@plt+0x4f38>
   16338:	mov	r4, #75	; 0x4b
   1633c:	cmp	r5, #0
   16340:	str	r4, [r0]
   16344:	bne	16294 <__assert_fail@plt+0x4f38>
   16348:	b	16330 <__assert_fail@plt+0x4fd4>
   1634c:	bl	110f8 <__stack_chk_fail@plt>
   16350:	andeq	r9, r2, r8, lsl #30
   16354:	andeq	r8, r1, r8, ror #27
   16358:	mov	r1, #10
   1635c:	b	161e4 <__assert_fail@plt+0x4e88>
   16360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16364:	cmp	r2, #36	; 0x24
   16368:	mov	r6, r2
   1636c:	ldr	r2, [pc, #2760]	; 16e3c <__assert_fail@plt+0x5ae0>
   16370:	sub	sp, sp, #36	; 0x24
   16374:	ldr	r2, [r2]
   16378:	ldr	r9, [sp, #72]	; 0x48
   1637c:	str	r2, [sp, #28]
   16380:	bhi	16e24 <__assert_fail@plt+0x5ac8>
   16384:	cmp	r1, #0
   16388:	mov	r5, r1
   1638c:	mov	r8, r0
   16390:	addeq	r5, sp, #24
   16394:	mov	sl, r3
   16398:	bl	1123c <__errno_location@plt>
   1639c:	mov	r4, #0
   163a0:	mov	r2, r6
   163a4:	mov	r3, r4
   163a8:	mov	r1, r5
   163ac:	str	r4, [r0]
   163b0:	mov	fp, r0
   163b4:	mov	r0, r8
   163b8:	bl	112fc <__strtoll_internal@plt>
   163bc:	ldr	r3, [r5]
   163c0:	cmp	r3, r8
   163c4:	str	r3, [sp, #8]
   163c8:	mov	r6, r0
   163cc:	mov	r7, r1
   163d0:	beq	16428 <__assert_fail@plt+0x50cc>
   163d4:	ldr	r4, [fp]
   163d8:	cmp	r4, #0
   163dc:	beq	163ec <__assert_fail@plt+0x5090>
   163e0:	cmp	r4, #34	; 0x22
   163e4:	bne	16528 <__assert_fail@plt+0x51cc>
   163e8:	mov	r4, #1
   163ec:	cmp	r9, #0
   163f0:	beq	16404 <__assert_fail@plt+0x50a8>
   163f4:	ldr	r3, [sp, #8]
   163f8:	ldrb	r8, [r3]
   163fc:	cmp	r8, #0
   16400:	bne	16630 <__assert_fail@plt+0x52d4>
   16404:	strd	r6, [sl]
   16408:	ldr	r3, [pc, #2604]	; 16e3c <__assert_fail@plt+0x5ae0>
   1640c:	ldr	r2, [sp, #28]
   16410:	mov	r0, r4
   16414:	ldr	r3, [r3]
   16418:	cmp	r2, r3
   1641c:	bne	16e38 <__assert_fail@plt+0x5adc>
   16420:	add	sp, sp, #36	; 0x24
   16424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16428:	cmp	r9, r4
   1642c:	beq	16528 <__assert_fail@plt+0x51cc>
   16430:	ldrb	r8, [r8]
   16434:	cmp	r8, r4
   16438:	beq	16528 <__assert_fail@plt+0x51cc>
   1643c:	mov	r1, r8
   16440:	mov	r0, r9
   16444:	bl	11224 <strchr@plt>
   16448:	cmp	r0, r4
   1644c:	movne	r6, #1
   16450:	movne	r7, #0
   16454:	beq	16528 <__assert_fail@plt+0x51cc>
   16458:	sub	fp, r8, #69	; 0x45
   1645c:	cmp	fp, #47	; 0x2f
   16460:	ldrls	pc, [pc, fp, lsl #2]
   16464:	b	16650 <__assert_fail@plt+0x52f4>
   16468:	andeq	r6, r1, r0, lsr r5
   1646c:	andeq	r6, r1, r0, asr r6
   16470:	andeq	r6, r1, r0, lsr r5
   16474:	andeq	r6, r1, r0, asr r6
   16478:	andeq	r6, r1, r0, asr r6
   1647c:	andeq	r6, r1, r0, asr r6
   16480:	andeq	r6, r1, r0, lsr r5
   16484:	andeq	r6, r1, r0, asr r6
   16488:	andeq	r6, r1, r0, lsr r5
   1648c:	andeq	r6, r1, r0, asr r6
   16490:	andeq	r6, r1, r0, asr r6
   16494:	andeq	r6, r1, r0, lsr r5
   16498:	andeq	r6, r1, r0, asr r6
   1649c:	andeq	r6, r1, r0, asr r6
   164a0:	andeq	r6, r1, r0, asr r6
   164a4:	andeq	r6, r1, r0, lsr r5
   164a8:	andeq	r6, r1, r0, asr r6
   164ac:	andeq	r6, r1, r0, asr r6
   164b0:	andeq	r6, r1, r0, asr r6
   164b4:	andeq	r6, r1, r0, asr r6
   164b8:	andeq	r6, r1, r0, lsr r5
   164bc:	andeq	r6, r1, r0, lsr r5
   164c0:	andeq	r6, r1, r0, asr r6
   164c4:	andeq	r6, r1, r0, asr r6
   164c8:	andeq	r6, r1, r0, asr r6
   164cc:	andeq	r6, r1, r0, asr r6
   164d0:	andeq	r6, r1, r0, asr r6
   164d4:	andeq	r6, r1, r0, asr r6
   164d8:	andeq	r6, r1, r0, asr r6
   164dc:	andeq	r6, r1, r0, asr r6
   164e0:	andeq	r6, r1, r0, asr r6
   164e4:	andeq	r6, r1, r0, asr r6
   164e8:	andeq	r6, r1, r0, asr r6
   164ec:	andeq	r6, r1, r0, asr r6
   164f0:	andeq	r6, r1, r0, lsr r5
   164f4:	andeq	r6, r1, r0, asr r6
   164f8:	andeq	r6, r1, r0, asr r6
   164fc:	andeq	r6, r1, r0, asr r6
   16500:	andeq	r6, r1, r0, lsr r5
   16504:	andeq	r6, r1, r0, asr r6
   16508:	andeq	r6, r1, r0, lsr r5
   1650c:	andeq	r6, r1, r0, asr r6
   16510:	andeq	r6, r1, r0, asr r6
   16514:	andeq	r6, r1, r0, asr r6
   16518:	andeq	r6, r1, r0, asr r6
   1651c:	andeq	r6, r1, r0, asr r6
   16520:	andeq	r6, r1, r0, asr r6
   16524:	andeq	r6, r1, r0, lsr r5
   16528:	mov	r4, #4
   1652c:	b	16408 <__assert_fail@plt+0x50ac>
   16530:	mov	r0, r9
   16534:	mov	r1, #48	; 0x30
   16538:	bl	11224 <strchr@plt>
   1653c:	cmp	r0, #0
   16540:	beq	16650 <__assert_fail@plt+0x52f4>
   16544:	ldr	r3, [sp, #8]
   16548:	ldrb	r3, [r3, #1]
   1654c:	cmp	r3, #68	; 0x44
   16550:	beq	16dfc <__assert_fail@plt+0x5aa0>
   16554:	cmp	r3, #105	; 0x69
   16558:	beq	16e08 <__assert_fail@plt+0x5aac>
   1655c:	cmp	r3, #66	; 0x42
   16560:	beq	16dfc <__assert_fail@plt+0x5aa0>
   16564:	cmp	fp, #47	; 0x2f
   16568:	ldrls	pc, [pc, fp, lsl #2]
   1656c:	b	16644 <__assert_fail@plt+0x52e8>
   16570:	andeq	r6, r1, ip, lsr sp
   16574:	andeq	r6, r1, r4, asr #12
   16578:	andeq	r6, r1, r8, lsl sp
   1657c:	andeq	r6, r1, r4, asr #12
   16580:	andeq	r6, r1, r4, asr #12
   16584:	andeq	r6, r1, r4, asr #12
   16588:	andeq	r6, r1, r0, lsl #26
   1658c:	andeq	r6, r1, r4, asr #12
   16590:	andeq	r6, r1, r4, ror #25
   16594:	andeq	r6, r1, r4, asr #12
   16598:	andeq	r6, r1, r4, asr #12
   1659c:	andeq	r6, r1, r0, asr #25
   165a0:	andeq	r6, r1, r4, asr #12
   165a4:	andeq	r6, r1, r4, asr #12
   165a8:	andeq	r6, r1, r4, asr #12
   165ac:	muleq	r1, ip, ip
   165b0:	andeq	r6, r1, r4, asr #12
   165b4:	andeq	r6, r1, r4, asr #12
   165b8:	andeq	r6, r1, r4, asr #12
   165bc:	andeq	r6, r1, r4, asr #12
   165c0:	andeq	r6, r1, r8, ror ip
   165c4:	andeq	r6, r1, r4, asr ip
   165c8:	andeq	r6, r1, r4, asr #12
   165cc:	andeq	r6, r1, r4, asr #12
   165d0:	andeq	r6, r1, r4, asr #12
   165d4:	andeq	r6, r1, r4, asr #12
   165d8:	andeq	r6, r1, r4, asr #12
   165dc:	andeq	r6, r1, r4, asr #12
   165e0:	andeq	r6, r1, r4, asr #12
   165e4:	andeq	r6, r1, ip, lsl #16
   165e8:	andeq	r6, r1, r0, ror #26
   165ec:	andeq	r6, r1, r4, asr #12
   165f0:	andeq	r6, r1, r4, asr #12
   165f4:	andeq	r6, r1, r4, asr #12
   165f8:	andeq	r6, r1, r8, lsl sp
   165fc:	andeq	r6, r1, r4, asr #12
   16600:	andeq	r6, r1, r4, asr #12
   16604:	andeq	r6, r1, r4, asr #12
   16608:	andeq	r6, r1, r0, lsl #26
   1660c:	andeq	r6, r1, r4, asr #12
   16610:	andeq	r6, r1, r4, ror #25
   16614:	andeq	r6, r1, r4, asr #12
   16618:	andeq	r6, r1, r4, asr #12
   1661c:	andeq	r6, r1, r4, asr #12
   16620:	andeq	r6, r1, r4, asr #12
   16624:	andeq	r6, r1, r4, asr #12
   16628:	andeq	r6, r1, r4, asr #12
   1662c:	muleq	r1, ip, ip
   16630:	mov	r1, r8
   16634:	mov	r0, r9
   16638:	bl	11224 <strchr@plt>
   1663c:	cmp	r0, #0
   16640:	bne	16458 <__assert_fail@plt+0x50fc>
   16644:	strd	r6, [sl]
   16648:	orr	r4, r4, #2
   1664c:	b	16408 <__assert_fail@plt+0x50ac>
   16650:	mov	fp, #1
   16654:	mov	r3, #1024	; 0x400
   16658:	sub	r8, r8, #66	; 0x42
   1665c:	cmp	r8, #53	; 0x35
   16660:	ldrls	pc, [pc, r8, lsl #2]
   16664:	b	16644 <__assert_fail@plt+0x52e8>
   16668:	andeq	r6, r1, r8, asr #16
   1666c:	andeq	r6, r1, r4, asr #12
   16670:	andeq	r6, r1, r4, asr #12
   16674:	andeq	r6, r1, r0, asr #23
   16678:	andeq	r6, r1, r4, asr #12
   1667c:	andeq	r6, r1, r4, lsl #20
   16680:	andeq	r6, r1, r4, asr #12
   16684:	andeq	r6, r1, r4, asr #12
   16688:	andeq	r6, r1, r4, asr #12
   1668c:	andeq	r6, r1, r8, lsr #19
   16690:	andeq	r6, r1, r4, asr #12
   16694:	andeq	r6, r1, r0, asr #14
   16698:	andeq	r6, r1, r4, asr #12
   1669c:	andeq	r6, r1, r4, asr #12
   166a0:	andeq	r6, r1, r0, lsl #17
   166a4:	andeq	r6, r1, r4, asr #12
   166a8:	andeq	r6, r1, r4, asr #12
   166ac:	andeq	r6, r1, r4, asr #12
   166b0:	muleq	r1, r8, sl
   166b4:	andeq	r6, r1, r4, asr #12
   166b8:	andeq	r6, r1, r4, asr #12
   166bc:	andeq	r6, r1, r4, asr #12
   166c0:	andeq	r6, r1, r4, asr #12
   166c4:	andeq	r6, r1, r4, lsl r9
   166c8:	andeq	r6, r1, ip, lsr #22
   166cc:	andeq	r6, r1, r4, asr #12
   166d0:	andeq	r6, r1, r4, asr #12
   166d4:	andeq	r6, r1, r4, asr #12
   166d8:	andeq	r6, r1, r4, asr #12
   166dc:	andeq	r6, r1, r4, asr #12
   166e0:	andeq	r6, r1, r4, asr #12
   166e4:	andeq	r6, r1, r4, asr #12
   166e8:	andeq	r6, r1, r0, lsl r8
   166ec:	andeq	r6, r1, ip, asr #15
   166f0:	andeq	r6, r1, r4, asr #12
   166f4:	andeq	r6, r1, r4, asr #12
   166f8:	andeq	r6, r1, r4, asr #12
   166fc:	andeq	r6, r1, r4, lsl #20
   16700:	andeq	r6, r1, r4, asr #12
   16704:	andeq	r6, r1, r4, asr #12
   16708:	andeq	r6, r1, r4, asr #12
   1670c:	andeq	r6, r1, r8, lsr #19
   16710:	andeq	r6, r1, r4, asr #12
   16714:	andeq	r6, r1, r0, asr #14
   16718:	andeq	r6, r1, r4, asr #12
   1671c:	andeq	r6, r1, r4, asr #12
   16720:	andeq	r6, r1, r4, asr #12
   16724:	andeq	r6, r1, r4, asr #12
   16728:	andeq	r6, r1, r4, asr #12
   1672c:	andeq	r6, r1, r4, asr #12
   16730:	muleq	r1, r8, sl
   16734:	andeq	r6, r1, r4, asr #12
   16738:	andeq	r6, r1, r4, asr #12
   1673c:	andeq	r6, r1, r8, ror #15
   16740:	asr	r9, r3, #31
   16744:	mov	r2, r3
   16748:	mov	r8, r3
   1674c:	mov	r0, #0
   16750:	mov	r3, r9
   16754:	mov	r1, #-2147483648	; 0x80000000
   16758:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   1675c:	strd	r0, [sp]
   16760:	ldrd	r2, [sp]
   16764:	cmp	r6, r2
   16768:	sbcs	r3, r7, r3
   1676c:	blt	16d7c <__assert_fail@plt+0x5a20>
   16770:	mov	r3, r9
   16774:	mov	r2, r8
   16778:	mvn	r0, #0
   1677c:	mvn	r1, #-2147483648	; 0x80000000
   16780:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16784:	cmp	r0, r6
   16788:	sbcs	r3, r1, r7
   1678c:	blt	16d8c <__assert_fail@plt+0x5a30>
   16790:	mul	ip, r6, r9
   16794:	umull	r2, r3, r6, r8
   16798:	mla	ip, r8, r7, ip
   1679c:	ldrd	r6, [sp]
   167a0:	add	r3, ip, r3
   167a4:	cmp	r2, r6
   167a8:	sbcs	ip, r3, r7
   167ac:	blt	16d7c <__assert_fail@plt+0x5a20>
   167b0:	cmp	r0, r2
   167b4:	sbcs	r1, r1, r3
   167b8:	blt	16d8c <__assert_fail@plt+0x5a30>
   167bc:	mul	r1, r2, r9
   167c0:	umull	r6, r7, r2, r8
   167c4:	mla	r8, r8, r3, r1
   167c8:	add	r7, r8, r7
   167cc:	ldr	r2, [sp, #8]
   167d0:	add	r3, r2, fp
   167d4:	str	r3, [r5]
   167d8:	ldrb	r3, [r2, fp]
   167dc:	cmp	r3, #0
   167e0:	orrne	r4, r4, #2
   167e4:	b	16404 <__assert_fail@plt+0x50a8>
   167e8:	cmp	r6, #0
   167ec:	sbcs	r3, r7, #-1073741824	; 0xc0000000
   167f0:	blt	16d7c <__assert_fail@plt+0x5a20>
   167f4:	cmp	r6, #0
   167f8:	sbcs	r3, r7, #1073741824	; 0x40000000
   167fc:	bge	16d8c <__assert_fail@plt+0x5a30>
   16800:	adds	r6, r6, r6
   16804:	adc	r7, r7, r7
   16808:	b	167cc <__assert_fail@plt+0x5470>
   1680c:	mov	fp, #1
   16810:	mov	r2, #0
   16814:	ldr	r3, [pc, #1572]	; 16e40 <__assert_fail@plt+0x5ae4>
   16818:	cmp	r6, r2
   1681c:	sbcs	r3, r7, r3
   16820:	blt	16d7c <__assert_fail@plt+0x5a20>
   16824:	cmp	r6, #0
   16828:	sbcs	r3, r7, #4194304	; 0x400000
   1682c:	bge	16d8c <__assert_fail@plt+0x5a30>
   16830:	lsl	r3, r7, #9
   16834:	orr	r3, r3, r6, lsr #23
   16838:	lsl	r2, r6, #9
   1683c:	mov	r6, r2
   16840:	mov	r7, r3
   16844:	b	167cc <__assert_fail@plt+0x5470>
   16848:	mov	r2, #0
   1684c:	ldr	r3, [pc, #1520]	; 16e44 <__assert_fail@plt+0x5ae8>
   16850:	cmp	r6, r2
   16854:	sbcs	r3, r7, r3
   16858:	blt	16d7c <__assert_fail@plt+0x5a20>
   1685c:	cmp	r6, #0
   16860:	sbcs	r3, r7, #2097152	; 0x200000
   16864:	bge	16d8c <__assert_fail@plt+0x5a30>
   16868:	lsl	r3, r7, #10
   1686c:	orr	r3, r3, r6, lsr #22
   16870:	lsl	r2, r6, #10
   16874:	mov	r6, r2
   16878:	mov	r7, r3
   1687c:	b	167cc <__assert_fail@plt+0x5470>
   16880:	asr	r1, r3, #31
   16884:	mov	r2, r3
   16888:	mov	r3, r1
   1688c:	mov	r0, #0
   16890:	mov	r1, #-2147483648	; 0x80000000
   16894:	strd	r2, [sp]
   16898:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   1689c:	str	fp, [sp, #12]
   168a0:	strd	r4, [sp, #16]
   168a4:	mov	r8, #5
   168a8:	ldrd	r4, [sp]
   168ac:	mov	r9, #0
   168b0:	str	sl, [sp]
   168b4:	mov	fp, r1
   168b8:	mov	sl, r0
   168bc:	b	168f8 <__assert_fail@plt+0x559c>
   168c0:	mov	r3, r5
   168c4:	mov	r2, r4
   168c8:	mvn	r0, #0
   168cc:	mvn	r1, #-2147483648	; 0x80000000
   168d0:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   168d4:	cmp	r0, r6
   168d8:	sbcs	r3, r1, r7
   168dc:	blt	16dcc <__assert_fail@plt+0x5a70>
   168e0:	mul	r3, r6, r5
   168e4:	mla	r3, r4, r7, r3
   168e8:	umull	r6, r7, r6, r4
   168ec:	add	r7, r3, r7
   168f0:	subs	r8, r8, #1
   168f4:	beq	16d68 <__assert_fail@plt+0x5a0c>
   168f8:	cmp	r6, sl
   168fc:	sbcs	r3, r7, fp
   16900:	bge	168c0 <__assert_fail@plt+0x5564>
   16904:	mov	r9, #1
   16908:	mov	r6, #0
   1690c:	mov	r7, #-2147483648	; 0x80000000
   16910:	b	168f0 <__assert_fail@plt+0x5594>
   16914:	asr	r1, r3, #31
   16918:	mov	r2, r3
   1691c:	mov	r3, r1
   16920:	mov	r0, #0
   16924:	mov	r1, #-2147483648	; 0x80000000
   16928:	strd	r2, [sp]
   1692c:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16930:	str	fp, [sp, #12]
   16934:	strd	r4, [sp, #16]
   16938:	mov	r8, #8
   1693c:	ldrd	r4, [sp]
   16940:	mov	r9, #0
   16944:	str	sl, [sp]
   16948:	mov	fp, r1
   1694c:	mov	sl, r0
   16950:	b	1698c <__assert_fail@plt+0x5630>
   16954:	mov	r3, r5
   16958:	mov	r2, r4
   1695c:	mvn	r0, #0
   16960:	mvn	r1, #-2147483648	; 0x80000000
   16964:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16968:	cmp	r0, r6
   1696c:	sbcs	r3, r1, r7
   16970:	blt	16dac <__assert_fail@plt+0x5a50>
   16974:	mul	r3, r6, r5
   16978:	mla	r3, r4, r7, r3
   1697c:	umull	r6, r7, r6, r4
   16980:	add	r7, r3, r7
   16984:	subs	r8, r8, #1
   16988:	beq	16d68 <__assert_fail@plt+0x5a0c>
   1698c:	cmp	r6, sl
   16990:	sbcs	r3, r7, fp
   16994:	bge	16954 <__assert_fail@plt+0x55f8>
   16998:	mov	r9, #1
   1699c:	mov	r6, #0
   169a0:	mov	r7, #-2147483648	; 0x80000000
   169a4:	b	16984 <__assert_fail@plt+0x5628>
   169a8:	asr	r9, r3, #31
   169ac:	mov	r8, r3
   169b0:	mov	r2, r3
   169b4:	mov	r0, #0
   169b8:	mov	r3, r9
   169bc:	mov	r1, #-2147483648	; 0x80000000
   169c0:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   169c4:	cmp	r6, r0
   169c8:	sbcs	r3, r7, r1
   169cc:	blt	16d7c <__assert_fail@plt+0x5a20>
   169d0:	mov	r3, r9
   169d4:	mov	r2, r8
   169d8:	mvn	r0, #0
   169dc:	mvn	r1, #-2147483648	; 0x80000000
   169e0:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   169e4:	cmp	r0, r6
   169e8:	sbcs	r3, r1, r7
   169ec:	blt	16d8c <__assert_fail@plt+0x5a30>
   169f0:	mul	r3, r6, r9
   169f4:	mla	r3, r8, r7, r3
   169f8:	umull	r6, r7, r6, r8
   169fc:	add	r7, r3, r7
   16a00:	b	167cc <__assert_fail@plt+0x5470>
   16a04:	asr	r1, r3, #31
   16a08:	mov	r2, r3
   16a0c:	mov	r3, r1
   16a10:	mov	r0, #0
   16a14:	mov	r1, #-2147483648	; 0x80000000
   16a18:	strd	r2, [sp]
   16a1c:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16a20:	str	fp, [sp, #12]
   16a24:	strd	r4, [sp, #16]
   16a28:	mov	r8, #3
   16a2c:	ldrd	r4, [sp]
   16a30:	mov	r9, #0
   16a34:	str	sl, [sp]
   16a38:	mov	fp, r1
   16a3c:	mov	sl, r0
   16a40:	b	16a7c <__assert_fail@plt+0x5720>
   16a44:	mov	r3, r5
   16a48:	mov	r2, r4
   16a4c:	mvn	r0, #0
   16a50:	mvn	r1, #-2147483648	; 0x80000000
   16a54:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16a58:	cmp	r0, r6
   16a5c:	sbcs	r3, r1, r7
   16a60:	blt	16d9c <__assert_fail@plt+0x5a40>
   16a64:	mul	r3, r6, r5
   16a68:	mla	r3, r4, r7, r3
   16a6c:	umull	r6, r7, r6, r4
   16a70:	add	r7, r3, r7
   16a74:	subs	r8, r8, #1
   16a78:	beq	16d68 <__assert_fail@plt+0x5a0c>
   16a7c:	cmp	r6, sl
   16a80:	sbcs	r3, r7, fp
   16a84:	bge	16a44 <__assert_fail@plt+0x56e8>
   16a88:	mov	r9, #1
   16a8c:	mov	r6, #0
   16a90:	mov	r7, #-2147483648	; 0x80000000
   16a94:	b	16a74 <__assert_fail@plt+0x5718>
   16a98:	asr	r1, r3, #31
   16a9c:	mov	r2, r3
   16aa0:	mov	r3, r1
   16aa4:	mov	r0, #0
   16aa8:	mov	r1, #-2147483648	; 0x80000000
   16aac:	strd	r2, [sp]
   16ab0:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16ab4:	str	fp, [sp, #12]
   16ab8:	strd	r4, [sp, #16]
   16abc:	mov	r8, #4
   16ac0:	ldrd	r4, [sp]
   16ac4:	mov	r9, #0
   16ac8:	str	sl, [sp]
   16acc:	mov	fp, r1
   16ad0:	mov	sl, r0
   16ad4:	b	16b10 <__assert_fail@plt+0x57b4>
   16ad8:	mov	r3, r5
   16adc:	mov	r2, r4
   16ae0:	mvn	r0, #0
   16ae4:	mvn	r1, #-2147483648	; 0x80000000
   16ae8:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16aec:	cmp	r0, r6
   16af0:	sbcs	r3, r1, r7
   16af4:	blt	16dec <__assert_fail@plt+0x5a90>
   16af8:	mul	r3, r6, r5
   16afc:	mla	r3, r4, r7, r3
   16b00:	umull	r6, r7, r6, r4
   16b04:	add	r7, r3, r7
   16b08:	subs	r8, r8, #1
   16b0c:	beq	16d68 <__assert_fail@plt+0x5a0c>
   16b10:	cmp	r6, sl
   16b14:	sbcs	r3, r7, fp
   16b18:	bge	16ad8 <__assert_fail@plt+0x577c>
   16b1c:	mov	r9, #1
   16b20:	mov	r6, #0
   16b24:	mov	r7, #-2147483648	; 0x80000000
   16b28:	b	16b08 <__assert_fail@plt+0x57ac>
   16b2c:	asr	r1, r3, #31
   16b30:	mov	r2, r3
   16b34:	mov	r3, r1
   16b38:	mov	r0, #0
   16b3c:	mov	r1, #-2147483648	; 0x80000000
   16b40:	strd	r2, [sp]
   16b44:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16b48:	str	fp, [sp, #12]
   16b4c:	strd	r4, [sp, #16]
   16b50:	mov	r8, #7
   16b54:	ldrd	r4, [sp]
   16b58:	mov	r9, #0
   16b5c:	str	sl, [sp]
   16b60:	mov	fp, r1
   16b64:	mov	sl, r0
   16b68:	b	16ba4 <__assert_fail@plt+0x5848>
   16b6c:	mov	r3, r5
   16b70:	mov	r2, r4
   16b74:	mvn	r0, #0
   16b78:	mvn	r1, #-2147483648	; 0x80000000
   16b7c:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16b80:	cmp	r0, r6
   16b84:	sbcs	r3, r1, r7
   16b88:	blt	16ddc <__assert_fail@plt+0x5a80>
   16b8c:	mul	r3, r6, r5
   16b90:	mla	r3, r4, r7, r3
   16b94:	umull	r6, r7, r6, r4
   16b98:	add	r7, r3, r7
   16b9c:	subs	r8, r8, #1
   16ba0:	beq	16d68 <__assert_fail@plt+0x5a0c>
   16ba4:	cmp	r6, sl
   16ba8:	sbcs	r3, r7, fp
   16bac:	bge	16b6c <__assert_fail@plt+0x5810>
   16bb0:	mov	r9, #1
   16bb4:	mov	r6, #0
   16bb8:	mov	r7, #-2147483648	; 0x80000000
   16bbc:	b	16b9c <__assert_fail@plt+0x5840>
   16bc0:	asr	r1, r3, #31
   16bc4:	mov	r2, r3
   16bc8:	mov	r3, r1
   16bcc:	mov	r0, #0
   16bd0:	mov	r1, #-2147483648	; 0x80000000
   16bd4:	strd	r2, [sp]
   16bd8:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16bdc:	str	fp, [sp, #12]
   16be0:	strd	r4, [sp, #16]
   16be4:	mov	r8, #6
   16be8:	ldrd	r4, [sp]
   16bec:	mov	r9, #0
   16bf0:	str	sl, [sp]
   16bf4:	mov	fp, r1
   16bf8:	mov	sl, r0
   16bfc:	b	16c38 <__assert_fail@plt+0x58dc>
   16c00:	mov	r3, r5
   16c04:	mov	r2, r4
   16c08:	mvn	r0, #0
   16c0c:	mvn	r1, #-2147483648	; 0x80000000
   16c10:	bl	17ec8 <__assert_fail@plt+0x6b6c>
   16c14:	cmp	r0, r6
   16c18:	sbcs	r3, r1, r7
   16c1c:	blt	16dbc <__assert_fail@plt+0x5a60>
   16c20:	mul	r3, r6, r5
   16c24:	mla	r3, r4, r7, r3
   16c28:	umull	r6, r7, r6, r4
   16c2c:	add	r7, r3, r7
   16c30:	subs	r8, r8, #1
   16c34:	beq	16d68 <__assert_fail@plt+0x5a0c>
   16c38:	cmp	r6, sl
   16c3c:	sbcs	r3, r7, fp
   16c40:	bge	16c00 <__assert_fail@plt+0x58a4>
   16c44:	mov	r9, #1
   16c48:	mov	r6, #0
   16c4c:	mov	r7, #-2147483648	; 0x80000000
   16c50:	b	16c30 <__assert_fail@plt+0x58d4>
   16c54:	ldr	r3, [pc, #488]	; 16e44 <__assert_fail@plt+0x5ae8>
   16c58:	mov	r2, #0
   16c5c:	mov	r0, r2
   16c60:	mov	r1, r3
   16c64:	mov	r2, #1024	; 0x400
   16c68:	mov	r3, #0
   16c6c:	mov	fp, #1
   16c70:	strd	r2, [sp]
   16c74:	b	16b48 <__assert_fail@plt+0x57ec>
   16c78:	ldr	r3, [pc, #452]	; 16e44 <__assert_fail@plt+0x5ae8>
   16c7c:	mov	r2, #0
   16c80:	mov	r0, r2
   16c84:	mov	r1, r3
   16c88:	mov	r2, #1024	; 0x400
   16c8c:	mov	r3, #0
   16c90:	mov	fp, #1
   16c94:	strd	r2, [sp]
   16c98:	b	16930 <__assert_fail@plt+0x55d4>
   16c9c:	ldr	r3, [pc, #416]	; 16e44 <__assert_fail@plt+0x5ae8>
   16ca0:	mov	r2, #0
   16ca4:	mov	r0, r2
   16ca8:	mov	r1, r3
   16cac:	mov	r2, #1024	; 0x400
   16cb0:	mov	r3, #0
   16cb4:	mov	fp, #1
   16cb8:	strd	r2, [sp]
   16cbc:	b	16ab4 <__assert_fail@plt+0x5758>
   16cc0:	ldr	r3, [pc, #380]	; 16e44 <__assert_fail@plt+0x5ae8>
   16cc4:	mov	r2, #0
   16cc8:	mov	r0, r2
   16ccc:	mov	r1, r3
   16cd0:	mov	r2, #1024	; 0x400
   16cd4:	mov	r3, #0
   16cd8:	mov	fp, #1
   16cdc:	strd	r2, [sp]
   16ce0:	b	1689c <__assert_fail@plt+0x5540>
   16ce4:	ldr	r3, [pc, #344]	; 16e44 <__assert_fail@plt+0x5ae8>
   16ce8:	mov	r2, #0
   16cec:	mov	fp, #1
   16cf0:	strd	r2, [sp]
   16cf4:	mov	r8, #1024	; 0x400
   16cf8:	mov	r9, #0
   16cfc:	b	16760 <__assert_fail@plt+0x5404>
   16d00:	mov	fp, #1
   16d04:	mov	r0, #0
   16d08:	ldr	r1, [pc, #308]	; 16e44 <__assert_fail@plt+0x5ae8>
   16d0c:	mov	r8, #1024	; 0x400
   16d10:	mov	r9, #0
   16d14:	b	169c4 <__assert_fail@plt+0x5668>
   16d18:	ldr	r3, [pc, #292]	; 16e44 <__assert_fail@plt+0x5ae8>
   16d1c:	mov	r2, #0
   16d20:	mov	r0, r2
   16d24:	mov	r1, r3
   16d28:	mov	r2, #1024	; 0x400
   16d2c:	mov	r3, #0
   16d30:	mov	fp, #1
   16d34:	strd	r2, [sp]
   16d38:	b	16a20 <__assert_fail@plt+0x56c4>
   16d3c:	ldr	r3, [pc, #256]	; 16e44 <__assert_fail@plt+0x5ae8>
   16d40:	mov	r2, #0
   16d44:	mov	r0, r2
   16d48:	mov	r1, r3
   16d4c:	mov	r2, #1024	; 0x400
   16d50:	mov	r3, #0
   16d54:	mov	fp, #1
   16d58:	strd	r2, [sp]
   16d5c:	b	16bdc <__assert_fail@plt+0x5880>
   16d60:	mov	fp, #1
   16d64:	b	167cc <__assert_fail@plt+0x5470>
   16d68:	ldrd	r4, [sp, #16]
   16d6c:	ldr	fp, [sp, #12]
   16d70:	ldr	sl, [sp]
   16d74:	orr	r4, r4, r9
   16d78:	b	167cc <__assert_fail@plt+0x5470>
   16d7c:	mov	r4, #1
   16d80:	mov	r6, #0
   16d84:	mov	r7, #-2147483648	; 0x80000000
   16d88:	b	167cc <__assert_fail@plt+0x5470>
   16d8c:	mov	r4, #1
   16d90:	mvn	r6, #0
   16d94:	mvn	r7, #-2147483648	; 0x80000000
   16d98:	b	167cc <__assert_fail@plt+0x5470>
   16d9c:	mov	r9, #1
   16da0:	mvn	r6, #0
   16da4:	mvn	r7, #-2147483648	; 0x80000000
   16da8:	b	16a74 <__assert_fail@plt+0x5718>
   16dac:	mov	r9, #1
   16db0:	mvn	r6, #0
   16db4:	mvn	r7, #-2147483648	; 0x80000000
   16db8:	b	16984 <__assert_fail@plt+0x5628>
   16dbc:	mov	r9, #1
   16dc0:	mvn	r6, #0
   16dc4:	mvn	r7, #-2147483648	; 0x80000000
   16dc8:	b	16c30 <__assert_fail@plt+0x58d4>
   16dcc:	mov	r9, #1
   16dd0:	mvn	r6, #0
   16dd4:	mvn	r7, #-2147483648	; 0x80000000
   16dd8:	b	168f0 <__assert_fail@plt+0x5594>
   16ddc:	mov	r9, #1
   16de0:	mvn	r6, #0
   16de4:	mvn	r7, #-2147483648	; 0x80000000
   16de8:	b	16b9c <__assert_fail@plt+0x5840>
   16dec:	mov	r9, #1
   16df0:	mvn	r6, #0
   16df4:	mvn	r7, #-2147483648	; 0x80000000
   16df8:	b	16b08 <__assert_fail@plt+0x57ac>
   16dfc:	mov	fp, #2
   16e00:	mov	r3, #1000	; 0x3e8
   16e04:	b	16658 <__assert_fail@plt+0x52fc>
   16e08:	ldr	r3, [sp, #8]
   16e0c:	ldrb	r2, [r3, #2]
   16e10:	mov	r3, #1024	; 0x400
   16e14:	cmp	r2, #66	; 0x42
   16e18:	movne	fp, #1
   16e1c:	moveq	fp, #3
   16e20:	b	16658 <__assert_fail@plt+0x52fc>
   16e24:	ldr	r3, [pc, #28]	; 16e48 <__assert_fail@plt+0x5aec>
   16e28:	mov	r2, #96	; 0x60
   16e2c:	ldr	r1, [pc, #24]	; 16e4c <__assert_fail@plt+0x5af0>
   16e30:	ldr	r0, [pc, #24]	; 16e50 <__assert_fail@plt+0x5af4>
   16e34:	bl	1135c <__assert_fail@plt>
   16e38:	bl	110f8 <__stack_chk_fail@plt>
   16e3c:	andeq	r9, r2, r8, lsl #30
   16e40:			; <UNDEFINED> instruction: 0xffc00000
   16e44:			; <UNDEFINED> instruction: 0xffe00000
   16e48:	andeq	r9, r1, ip, lsl r2
   16e4c:	andeq	r9, r1, r8, lsr #4
   16e50:	andeq	r9, r1, r8, lsr r2
   16e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e58:	sub	sp, sp, #36	; 0x24
   16e5c:	ldr	r5, [pc, #2536]	; 1784c <__assert_fail@plt+0x64f0>
   16e60:	mov	r9, r2
   16e64:	cmp	r2, #36	; 0x24
   16e68:	str	r3, [sp, #12]
   16e6c:	ldr	r2, [r5]
   16e70:	ldr	r3, [sp, #72]	; 0x48
   16e74:	str	r2, [sp, #28]
   16e78:	str	r3, [sp]
   16e7c:	bhi	17838 <__assert_fail@plt+0x64dc>
   16e80:	cmp	r1, #0
   16e84:	mov	r4, r1
   16e88:	mov	r6, r0
   16e8c:	addeq	r4, sp, #24
   16e90:	bl	1123c <__errno_location@plt>
   16e94:	mov	r3, #0
   16e98:	str	r3, [r0]
   16e9c:	mov	r7, r0
   16ea0:	bl	11200 <__ctype_b_loc@plt>
   16ea4:	ldrb	r3, [r6]
   16ea8:	mov	r1, r6
   16eac:	ldr	r0, [r0]
   16eb0:	b	16eb8 <__assert_fail@plt+0x5b5c>
   16eb4:	ldrb	r3, [r1, #1]!
   16eb8:	lsl	r2, r3, #1
   16ebc:	ldrh	r8, [r0, r2]
   16ec0:	ands	r8, r8, #8192	; 0x2000
   16ec4:	bne	16eb4 <__assert_fail@plt+0x5b58>
   16ec8:	cmp	r3, #45	; 0x2d
   16ecc:	beq	16f68 <__assert_fail@plt+0x5c0c>
   16ed0:	mov	r2, r9
   16ed4:	mov	r3, r8
   16ed8:	mov	r1, r4
   16edc:	mov	r0, r6
   16ee0:	bl	110b0 <__strtoull_internal@plt>
   16ee4:	ldr	r9, [r4]
   16ee8:	cmp	r9, r6
   16eec:	mov	sl, r0
   16ef0:	mov	fp, r1
   16ef4:	beq	16f50 <__assert_fail@plt+0x5bf4>
   16ef8:	ldr	r8, [r7]
   16efc:	cmp	r8, #0
   16f00:	bne	16f40 <__assert_fail@plt+0x5be4>
   16f04:	ldr	r3, [sp]
   16f08:	cmp	r3, #0
   16f0c:	beq	16f1c <__assert_fail@plt+0x5bc0>
   16f10:	ldrb	r6, [r9]
   16f14:	cmp	r6, #0
   16f18:	bne	172f0 <__assert_fail@plt+0x5f94>
   16f1c:	ldr	r3, [sp, #12]
   16f20:	strd	sl, [r3]
   16f24:	ldr	r2, [sp, #28]
   16f28:	ldr	r3, [r5]
   16f2c:	mov	r0, r8
   16f30:	cmp	r2, r3
   16f34:	bne	17834 <__assert_fail@plt+0x64d8>
   16f38:	add	sp, sp, #36	; 0x24
   16f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f40:	cmp	r8, #34	; 0x22
   16f44:	bne	16f68 <__assert_fail@plt+0x5c0c>
   16f48:	mov	r8, #1
   16f4c:	b	16f04 <__assert_fail@plt+0x5ba8>
   16f50:	ldr	r0, [sp]
   16f54:	cmp	r0, #0
   16f58:	beq	16f68 <__assert_fail@plt+0x5c0c>
   16f5c:	ldrb	r6, [r6]
   16f60:	cmp	r6, #0
   16f64:	bne	16f70 <__assert_fail@plt+0x5c14>
   16f68:	mov	r8, #4
   16f6c:	b	16f24 <__assert_fail@plt+0x5bc8>
   16f70:	mov	r1, r6
   16f74:	bl	11224 <strchr@plt>
   16f78:	cmp	r0, #0
   16f7c:	movne	sl, #1
   16f80:	movne	fp, #0
   16f84:	beq	16f68 <__assert_fail@plt+0x5c0c>
   16f88:	sub	r7, r6, #69	; 0x45
   16f8c:	cmp	r7, #47	; 0x2f
   16f90:	ldrls	pc, [pc, r7, lsl #2]
   16f94:	b	17154 <__assert_fail@plt+0x5df8>
   16f98:	andeq	r7, r1, r8, asr r0
   16f9c:	andeq	r7, r1, r4, asr r1
   16fa0:	andeq	r7, r1, r8, asr r0
   16fa4:	andeq	r7, r1, r4, asr r1
   16fa8:	andeq	r7, r1, r4, asr r1
   16fac:	andeq	r7, r1, r4, asr r1
   16fb0:	andeq	r7, r1, r8, asr r0
   16fb4:	andeq	r7, r1, r4, asr r1
   16fb8:	andeq	r7, r1, r8, asr r0
   16fbc:	andeq	r7, r1, r4, asr r1
   16fc0:	andeq	r7, r1, r4, asr r1
   16fc4:	andeq	r7, r1, r8, asr r0
   16fc8:	andeq	r7, r1, r4, asr r1
   16fcc:	andeq	r7, r1, r4, asr r1
   16fd0:	andeq	r7, r1, r4, asr r1
   16fd4:	andeq	r7, r1, r8, asr r0
   16fd8:	andeq	r7, r1, r4, asr r1
   16fdc:	andeq	r7, r1, r4, asr r1
   16fe0:	andeq	r7, r1, r4, asr r1
   16fe4:	andeq	r7, r1, r4, asr r1
   16fe8:	andeq	r7, r1, r8, asr r0
   16fec:	andeq	r7, r1, r8, asr r0
   16ff0:	andeq	r7, r1, r4, asr r1
   16ff4:	andeq	r7, r1, r4, asr r1
   16ff8:	andeq	r7, r1, r4, asr r1
   16ffc:	andeq	r7, r1, r4, asr r1
   17000:	andeq	r7, r1, r4, asr r1
   17004:	andeq	r7, r1, r4, asr r1
   17008:	andeq	r7, r1, r4, asr r1
   1700c:	andeq	r7, r1, r4, asr r1
   17010:	andeq	r7, r1, r4, asr r1
   17014:	andeq	r7, r1, r4, asr r1
   17018:	andeq	r7, r1, r4, asr r1
   1701c:	andeq	r7, r1, r4, asr r1
   17020:	andeq	r7, r1, r8, asr r0
   17024:	andeq	r7, r1, r4, asr r1
   17028:	andeq	r7, r1, r4, asr r1
   1702c:	andeq	r7, r1, r4, asr r1
   17030:	andeq	r7, r1, r8, asr r0
   17034:	andeq	r7, r1, r4, asr r1
   17038:	andeq	r7, r1, r8, asr r0
   1703c:	andeq	r7, r1, r4, asr r1
   17040:	andeq	r7, r1, r4, asr r1
   17044:	andeq	r7, r1, r4, asr r1
   17048:	andeq	r7, r1, r4, asr r1
   1704c:	andeq	r7, r1, r4, asr r1
   17050:	andeq	r7, r1, r4, asr r1
   17054:	andeq	r7, r1, r8, asr r0
   17058:	ldr	r0, [sp]
   1705c:	mov	r1, #48	; 0x30
   17060:	bl	11224 <strchr@plt>
   17064:	cmp	r0, #0
   17068:	beq	17154 <__assert_fail@plt+0x5df8>
   1706c:	ldrb	r3, [r9, #1]
   17070:	cmp	r3, #68	; 0x44
   17074:	beq	17734 <__assert_fail@plt+0x63d8>
   17078:	cmp	r3, #105	; 0x69
   1707c:	beq	17314 <__assert_fail@plt+0x5fb8>
   17080:	cmp	r3, #66	; 0x42
   17084:	beq	17734 <__assert_fail@plt+0x63d8>
   17088:	cmp	r7, #47	; 0x2f
   1708c:	ldrls	pc, [pc, r7, lsl #2]
   17090:	b	17304 <__assert_fail@plt+0x5fa8>
   17094:	andeq	r7, r1, r8, lsl r7
   17098:	andeq	r7, r1, r4, lsl #6
   1709c:	andeq	r7, r1, r8, lsl #14
   170a0:	andeq	r7, r1, r4, lsl #6
   170a4:	andeq	r7, r1, r4, lsl #6
   170a8:	andeq	r7, r1, r4, lsl #6
   170ac:	strdeq	r7, [r1], -r8
   170b0:	andeq	r7, r1, r4, lsl #6
   170b4:	andeq	r7, r1, r8, ror #13
   170b8:	andeq	r7, r1, r4, lsl #6
   170bc:	andeq	r7, r1, r4, lsl #6
   170c0:	ldrdeq	r7, [r1], -r8
   170c4:	andeq	r7, r1, r4, lsl #6
   170c8:	andeq	r7, r1, r4, lsl #6
   170cc:	andeq	r7, r1, r4, lsl #6
   170d0:	andeq	r7, r1, r8, asr #13
   170d4:	andeq	r7, r1, r4, lsl #6
   170d8:	andeq	r7, r1, r4, lsl #6
   170dc:	andeq	r7, r1, r4, lsl #6
   170e0:	andeq	r7, r1, r4, lsl #6
   170e4:			; <UNDEFINED> instruction: 0x000176b8
   170e8:	andeq	r7, r1, r8, lsr #13
   170ec:	andeq	r7, r1, r4, lsl #6
   170f0:	andeq	r7, r1, r4, lsl #6
   170f4:	andeq	r7, r1, r4, lsl #6
   170f8:	andeq	r7, r1, r4, lsl #6
   170fc:	andeq	r7, r1, r4, lsl #6
   17100:	andeq	r7, r1, r4, lsl #6
   17104:	andeq	r7, r1, r4, lsl #6
   17108:	andeq	r7, r1, r0, asr r3
   1710c:	andeq	r7, r1, r0, lsr #13
   17110:	andeq	r7, r1, r4, lsl #6
   17114:	andeq	r7, r1, r4, lsl #6
   17118:	andeq	r7, r1, r4, lsl #6
   1711c:	andeq	r7, r1, r8, lsl #14
   17120:	andeq	r7, r1, r4, lsl #6
   17124:	andeq	r7, r1, r4, lsl #6
   17128:	andeq	r7, r1, r4, lsl #6
   1712c:	strdeq	r7, [r1], -r8
   17130:	andeq	r7, r1, r4, lsl #6
   17134:	andeq	r7, r1, r8, ror #13
   17138:	andeq	r7, r1, r4, lsl #6
   1713c:	andeq	r7, r1, r4, lsl #6
   17140:	andeq	r7, r1, r4, lsl #6
   17144:	andeq	r7, r1, r4, lsl #6
   17148:	andeq	r7, r1, r4, lsl #6
   1714c:	andeq	r7, r1, r4, lsl #6
   17150:	andeq	r7, r1, r8, asr #13
   17154:	mov	lr, #1
   17158:	mov	r0, #1024	; 0x400
   1715c:	sub	r6, r6, #66	; 0x42
   17160:	cmp	r6, #53	; 0x35
   17164:	ldrls	pc, [pc, r6, lsl #2]
   17168:	b	17304 <__assert_fail@plt+0x5fa8>
   1716c:	andeq	r7, r1, r8, ror r3
   17170:	andeq	r7, r1, r4, lsl #6
   17174:	andeq	r7, r1, r4, lsl #6
   17178:	muleq	r1, ip, r3
   1717c:	andeq	r7, r1, r4, lsl #6
   17180:	andeq	r7, r1, r4, asr #4
   17184:	andeq	r7, r1, r4, lsl #6
   17188:	andeq	r7, r1, r4, lsl #6
   1718c:	andeq	r7, r1, r4, lsl #6
   17190:	muleq	r1, r4, r4
   17194:	andeq	r7, r1, r4, lsl #6
   17198:	andeq	r7, r1, r8, lsr r6
   1719c:	andeq	r7, r1, r4, lsl #6
   171a0:	andeq	r7, r1, r4, lsl #6
   171a4:			; <UNDEFINED> instruction: 0x000175bc
   171a8:	andeq	r7, r1, r4, lsl #6
   171ac:	andeq	r7, r1, r4, lsl #6
   171b0:	andeq	r7, r1, r4, lsl #6
   171b4:	andeq	r7, r1, r0, asr #10
   171b8:	andeq	r7, r1, r4, lsl #6
   171bc:	andeq	r7, r1, r4, lsl #6
   171c0:	andeq	r7, r1, r4, lsl #6
   171c4:	andeq	r7, r1, r4, lsl #6
   171c8:	andeq	r7, r1, r4, asr #9
   171cc:	andeq	r7, r1, r8, lsl r4
   171d0:	andeq	r7, r1, r4, lsl #6
   171d4:	andeq	r7, r1, r4, lsl #6
   171d8:	andeq	r7, r1, r4, lsl #6
   171dc:	andeq	r7, r1, r4, lsl #6
   171e0:	andeq	r7, r1, r4, lsl #6
   171e4:	andeq	r7, r1, r4, lsl #6
   171e8:	andeq	r7, r1, r4, lsl #6
   171ec:	andeq	r7, r1, r4, asr r3
   171f0:	ldrdeq	r7, [r1], -r8
   171f4:	andeq	r7, r1, r4, lsl #6
   171f8:	andeq	r7, r1, r4, lsl #6
   171fc:	andeq	r7, r1, r4, lsl #6
   17200:	andeq	r7, r1, r4, asr #4
   17204:	andeq	r7, r1, r4, lsl #6
   17208:	andeq	r7, r1, r4, lsl #6
   1720c:	andeq	r7, r1, r4, lsl #6
   17210:	muleq	r1, r4, r4
   17214:	andeq	r7, r1, r4, lsl #6
   17218:	andeq	r7, r1, r8, lsr r6
   1721c:	andeq	r7, r1, r4, lsl #6
   17220:	andeq	r7, r1, r4, lsl #6
   17224:	andeq	r7, r1, r4, lsl #6
   17228:	andeq	r7, r1, r4, lsl #6
   1722c:	andeq	r7, r1, r4, lsl #6
   17230:	andeq	r7, r1, r4, lsl #6
   17234:	andeq	r7, r1, r0, asr #10
   17238:	andeq	r7, r1, r4, lsl #6
   1723c:	andeq	r7, r1, r4, lsl #6
   17240:	andeq	r7, r1, ip, lsr #6
   17244:	asr	r1, r0, #31
   17248:	mov	r2, #0
   1724c:	mov	r3, #0
   17250:	cmp	fp, #0
   17254:	strd	r2, [sp]
   17258:	bne	17778 <__assert_fail@plt+0x641c>
   1725c:	ldrd	r2, [sp]
   17260:	orrs	r3, r2, r3
   17264:	bne	17768 <__assert_fail@plt+0x640c>
   17268:	mul	r3, sl, r1
   1726c:	umull	r6, r7, sl, r0
   17270:	mla	r3, r0, fp, r3
   17274:	ldrd	sl, [sp]
   17278:	add	ip, r3, r7
   1727c:	cmp	ip, #0
   17280:	mov	r7, ip
   17284:	bne	1780c <__assert_fail@plt+0x64b0>
   17288:	orrs	r3, sl, fp
   1728c:	bne	17768 <__assert_fail@plt+0x640c>
   17290:	umull	r2, r3, r6, r0
   17294:	mul	ip, r6, r1
   17298:	strd	r2, [sp]
   1729c:	mla	r3, r0, r7, ip
   172a0:	ldr	r2, [sp, #4]
   172a4:	add	ip, r3, r2
   172a8:	cmp	ip, #0
   172ac:	str	ip, [sp, #4]
   172b0:	bne	177e8 <__assert_fail@plt+0x648c>
   172b4:	orrs	r3, sl, fp
   172b8:	bne	17768 <__assert_fail@plt+0x640c>
   172bc:	ldrd	r6, [sp]
   172c0:	mov	r3, #0
   172c4:	mul	r2, r6, r1
   172c8:	umull	sl, fp, r6, r0
   172cc:	mla	r2, r0, r7, r2
   172d0:	add	fp, r2, fp
   172d4:	orr	r8, r8, r3
   172d8:	add	r3, r9, lr
   172dc:	str	r3, [r4]
   172e0:	ldrb	r3, [r9, lr]
   172e4:	cmp	r3, #0
   172e8:	orrne	r8, r8, #2
   172ec:	b	16f1c <__assert_fail@plt+0x5bc0>
   172f0:	mov	r1, r6
   172f4:	ldr	r0, [sp]
   172f8:	bl	11224 <strchr@plt>
   172fc:	cmp	r0, #0
   17300:	bne	16f88 <__assert_fail@plt+0x5c2c>
   17304:	ldr	r3, [sp, #12]
   17308:	orr	r8, r8, #2
   1730c:	strd	sl, [r3]
   17310:	b	16f24 <__assert_fail@plt+0x5bc8>
   17314:	ldrb	r3, [r9, #2]
   17318:	mov	r0, #1024	; 0x400
   1731c:	cmp	r3, #66	; 0x42
   17320:	movne	lr, #1
   17324:	moveq	lr, #3
   17328:	b	1715c <__assert_fail@plt+0x5e00>
   1732c:	lsr	r3, fp, #31
   17330:	adds	sl, sl, sl
   17334:	adc	fp, fp, fp
   17338:	cmp	r3, #0
   1733c:	beq	172d8 <__assert_fail@plt+0x5f7c>
   17340:	mov	r8, #1
   17344:	mvn	sl, #0
   17348:	mvn	fp, #0
   1734c:	b	172d8 <__assert_fail@plt+0x5f7c>
   17350:	mov	lr, #1
   17354:	lsr	r3, fp, #23
   17358:	cmp	r3, #0
   1735c:	bne	17340 <__assert_fail@plt+0x5fe4>
   17360:	lsl	r3, fp, #9
   17364:	orr	r3, r3, sl, lsr #23
   17368:	lsl	r2, sl, #9
   1736c:	mov	sl, r2
   17370:	mov	fp, r3
   17374:	b	172d8 <__assert_fail@plt+0x5f7c>
   17378:	lsr	r3, fp, #22
   1737c:	cmp	r3, #0
   17380:	bne	17340 <__assert_fail@plt+0x5fe4>
   17384:	lsl	r3, fp, #10
   17388:	orr	r3, r3, sl, lsr #22
   1738c:	lsl	r2, sl, #10
   17390:	mov	sl, r2
   17394:	mov	fp, r3
   17398:	b	172d8 <__assert_fail@plt+0x5f7c>
   1739c:	mov	r6, r0
   173a0:	asr	r7, r0, #31
   173a4:	mov	r3, #0
   173a8:	mov	ip, #6
   173ac:	str	r3, [sp]
   173b0:	strd	r4, [sp, #16]
   173b4:	b	173e4 <__assert_fail@plt+0x6088>
   173b8:	orrs	r3, r2, r3
   173bc:	movne	r3, #1
   173c0:	muleq	r3, sl, r7
   173c4:	strne	r3, [sp]
   173c8:	mlaeq	r3, r6, fp, r3
   173cc:	umulleq	sl, fp, sl, r6
   173d0:	mvnne	sl, #0
   173d4:	addeq	fp, r3, fp
   173d8:	mvnne	fp, #0
   173dc:	subs	ip, ip, #1
   173e0:	beq	17728 <__assert_fail@plt+0x63cc>
   173e4:	cmp	fp, #0
   173e8:	mov	r2, #0
   173ec:	mov	r3, #0
   173f0:	beq	173b8 <__assert_fail@plt+0x605c>
   173f4:	umull	r0, r1, sl, r6
   173f8:	mov	r5, #0
   173fc:	mov	r0, r1
   17400:	mov	r1, r5
   17404:	umlal	r0, r1, fp, r6
   17408:	cmp	r1, r5
   1740c:	movne	r2, #1
   17410:	movne	r3, #0
   17414:	b	173b8 <__assert_fail@plt+0x605c>
   17418:	mov	r6, r0
   1741c:	asr	r7, r0, #31
   17420:	mov	r3, #0
   17424:	mov	ip, #7
   17428:	str	r3, [sp]
   1742c:	strd	r4, [sp, #16]
   17430:	b	17460 <__assert_fail@plt+0x6104>
   17434:	orrs	r3, r2, r3
   17438:	movne	r3, #1
   1743c:	muleq	r3, sl, r7
   17440:	strne	r3, [sp]
   17444:	mlaeq	r3, r6, fp, r3
   17448:	umulleq	sl, fp, sl, r6
   1744c:	mvnne	sl, #0
   17450:	addeq	fp, r3, fp
   17454:	mvnne	fp, #0
   17458:	subs	ip, ip, #1
   1745c:	beq	17728 <__assert_fail@plt+0x63cc>
   17460:	cmp	fp, #0
   17464:	mov	r2, #0
   17468:	mov	r3, #0
   1746c:	beq	17434 <__assert_fail@plt+0x60d8>
   17470:	umull	r0, r1, sl, r6
   17474:	mov	r5, #0
   17478:	mov	r0, r1
   1747c:	mov	r1, r5
   17480:	umlal	r0, r1, fp, r6
   17484:	cmp	r1, r5
   17488:	movne	r2, #1
   1748c:	movne	r3, #0
   17490:	b	17434 <__assert_fail@plt+0x60d8>
   17494:	asr	r1, r0, #31
   17498:	cmp	fp, #0
   1749c:	mov	r6, #0
   174a0:	mov	r7, #0
   174a4:	bne	17740 <__assert_fail@plt+0x63e4>
   174a8:	orrs	r3, r6, r7
   174ac:	bne	17340 <__assert_fail@plt+0x5fe4>
   174b0:	mul	r3, sl, r1
   174b4:	mla	r3, r0, fp, r3
   174b8:	umull	sl, fp, sl, r0
   174bc:	add	fp, r3, fp
   174c0:	b	172d8 <__assert_fail@plt+0x5f7c>
   174c4:	mov	r6, r0
   174c8:	asr	r7, r0, #31
   174cc:	mov	r3, #0
   174d0:	mov	ip, #8
   174d4:	str	r3, [sp]
   174d8:	strd	r4, [sp, #16]
   174dc:	b	1750c <__assert_fail@plt+0x61b0>
   174e0:	orrs	r3, r2, r3
   174e4:	movne	r3, #1
   174e8:	muleq	r3, sl, r7
   174ec:	strne	r3, [sp]
   174f0:	mlaeq	r3, r6, fp, r3
   174f4:	umulleq	sl, fp, sl, r6
   174f8:	mvnne	sl, #0
   174fc:	addeq	fp, r3, fp
   17500:	mvnne	fp, #0
   17504:	subs	ip, ip, #1
   17508:	beq	17728 <__assert_fail@plt+0x63cc>
   1750c:	cmp	fp, #0
   17510:	mov	r2, #0
   17514:	mov	r3, #0
   17518:	beq	174e0 <__assert_fail@plt+0x6184>
   1751c:	umull	r0, r1, sl, r6
   17520:	mov	r5, #0
   17524:	mov	r0, r1
   17528:	mov	r1, r5
   1752c:	umlal	r0, r1, fp, r6
   17530:	cmp	r1, r5
   17534:	movne	r2, #1
   17538:	movne	r3, #0
   1753c:	b	174e0 <__assert_fail@plt+0x6184>
   17540:	mov	r6, r0
   17544:	asr	r7, r0, #31
   17548:	mov	r3, #0
   1754c:	mov	ip, #4
   17550:	str	r3, [sp]
   17554:	strd	r4, [sp, #16]
   17558:	b	17588 <__assert_fail@plt+0x622c>
   1755c:	orrs	r3, r2, r3
   17560:	movne	r3, #1
   17564:	muleq	r3, sl, r7
   17568:	strne	r3, [sp]
   1756c:	mlaeq	r3, r6, fp, r3
   17570:	umulleq	sl, fp, sl, r6
   17574:	mvnne	sl, #0
   17578:	addeq	fp, r3, fp
   1757c:	mvnne	fp, #0
   17580:	subs	ip, ip, #1
   17584:	beq	17728 <__assert_fail@plt+0x63cc>
   17588:	cmp	fp, #0
   1758c:	mov	r2, #0
   17590:	mov	r3, #0
   17594:	beq	1755c <__assert_fail@plt+0x6200>
   17598:	umull	r0, r1, sl, r6
   1759c:	mov	r5, #0
   175a0:	mov	r0, r1
   175a4:	mov	r1, r5
   175a8:	umlal	r0, r1, fp, r6
   175ac:	cmp	r1, r5
   175b0:	movne	r2, #1
   175b4:	movne	r3, #0
   175b8:	b	1755c <__assert_fail@plt+0x6200>
   175bc:	mov	r6, r0
   175c0:	asr	r7, r0, #31
   175c4:	mov	r3, #0
   175c8:	mov	ip, #5
   175cc:	str	r3, [sp]
   175d0:	strd	r4, [sp, #16]
   175d4:	b	17604 <__assert_fail@plt+0x62a8>
   175d8:	orrs	r3, r2, r3
   175dc:	movne	r3, #1
   175e0:	muleq	r3, sl, r7
   175e4:	strne	r3, [sp]
   175e8:	mlaeq	r3, r6, fp, r3
   175ec:	umulleq	sl, fp, sl, r6
   175f0:	mvnne	sl, #0
   175f4:	addeq	fp, r3, fp
   175f8:	mvnne	fp, #0
   175fc:	subs	ip, ip, #1
   17600:	beq	17728 <__assert_fail@plt+0x63cc>
   17604:	cmp	fp, #0
   17608:	mov	r2, #0
   1760c:	mov	r3, #0
   17610:	beq	175d8 <__assert_fail@plt+0x627c>
   17614:	umull	r0, r1, sl, r6
   17618:	mov	r5, #0
   1761c:	mov	r0, r1
   17620:	mov	r1, r5
   17624:	umlal	r0, r1, fp, r6
   17628:	cmp	r1, r5
   1762c:	movne	r2, #1
   17630:	movne	r3, #0
   17634:	b	175d8 <__assert_fail@plt+0x627c>
   17638:	asr	r1, r0, #31
   1763c:	cmp	fp, #0
   17640:	mov	r6, #0
   17644:	mov	r7, #0
   17648:	bne	1779c <__assert_fail@plt+0x6440>
   1764c:	orrs	r3, r6, r7
   17650:	bne	17340 <__assert_fail@plt+0x5fe4>
   17654:	umull	r2, r3, sl, r0
   17658:	mul	ip, sl, r1
   1765c:	strd	r2, [sp]
   17660:	mla	r3, r0, fp, ip
   17664:	ldr	r2, [sp, #4]
   17668:	mov	sl, r6
   1766c:	add	ip, r3, r2
   17670:	cmp	ip, #0
   17674:	mov	fp, r7
   17678:	str	ip, [sp, #4]
   1767c:	bne	177c4 <__assert_fail@plt+0x6468>
   17680:	orrs	r3, sl, fp
   17684:	bne	17340 <__assert_fail@plt+0x5fe4>
   17688:	ldrd	r6, [sp]
   1768c:	mul	r3, r6, r1
   17690:	umull	sl, fp, r6, r0
   17694:	mla	r0, r0, r7, r3
   17698:	add	fp, r0, fp
   1769c:	b	172d8 <__assert_fail@plt+0x5f7c>
   176a0:	mov	lr, #1
   176a4:	b	172d8 <__assert_fail@plt+0x5f7c>
   176a8:	mov	lr, #1
   176ac:	mov	r6, #1024	; 0x400
   176b0:	mov	r7, #0
   176b4:	b	17420 <__assert_fail@plt+0x60c4>
   176b8:	mov	lr, #1
   176bc:	mov	r6, #1024	; 0x400
   176c0:	mov	r7, #0
   176c4:	b	174cc <__assert_fail@plt+0x6170>
   176c8:	mov	lr, #1
   176cc:	mov	r6, #1024	; 0x400
   176d0:	mov	r7, #0
   176d4:	b	17548 <__assert_fail@plt+0x61ec>
   176d8:	mov	lr, #1
   176dc:	mov	r6, #1024	; 0x400
   176e0:	mov	r7, #0
   176e4:	b	175c4 <__assert_fail@plt+0x6268>
   176e8:	mov	lr, #1
   176ec:	mov	r0, #1024	; 0x400
   176f0:	mov	r1, #0
   176f4:	b	1763c <__assert_fail@plt+0x62e0>
   176f8:	mov	lr, #1
   176fc:	mov	r0, #1024	; 0x400
   17700:	mov	r1, #0
   17704:	b	17498 <__assert_fail@plt+0x613c>
   17708:	mov	lr, #1
   1770c:	mov	r0, #1024	; 0x400
   17710:	mov	r1, #0
   17714:	b	17248 <__assert_fail@plt+0x5eec>
   17718:	mov	lr, #1
   1771c:	mov	r6, #1024	; 0x400
   17720:	mov	r7, #0
   17724:	b	173a4 <__assert_fail@plt+0x6048>
   17728:	ldrd	r4, [sp, #16]
   1772c:	ldr	r3, [sp]
   17730:	b	172d4 <__assert_fail@plt+0x5f78>
   17734:	mov	lr, #2
   17738:	mov	r0, #1000	; 0x3e8
   1773c:	b	1715c <__assert_fail@plt+0x5e00>
   17740:	umull	r2, r3, sl, r0
   17744:	str	r3, [sp]
   17748:	mov	r3, #0
   1774c:	str	r3, [sp, #4]
   17750:	ldrd	r2, [sp]
   17754:	umlal	r2, r3, fp, r0
   17758:	cmp	r3, #0
   1775c:	movne	r6, #1
   17760:	movne	r7, #0
   17764:	b	174a8 <__assert_fail@plt+0x614c>
   17768:	mov	r3, #1
   1776c:	mvn	sl, #0
   17770:	mvn	fp, #0
   17774:	b	172d4 <__assert_fail@plt+0x5f78>
   17778:	umull	r2, r3, sl, r0
   1777c:	mov	r7, #0
   17780:	mov	r6, r3
   17784:	umlal	r6, r7, fp, r0
   17788:	cmp	r7, #0
   1778c:	movne	r2, #1
   17790:	movne	r3, #0
   17794:	strdne	r2, [sp]
   17798:	b	1725c <__assert_fail@plt+0x5f00>
   1779c:	umull	r2, r3, sl, r0
   177a0:	str	r3, [sp]
   177a4:	mov	r3, #0
   177a8:	str	r3, [sp, #4]
   177ac:	ldrd	r2, [sp]
   177b0:	umlal	r2, r3, fp, r0
   177b4:	cmp	r3, #0
   177b8:	movne	r6, #1
   177bc:	movne	r7, #0
   177c0:	b	1764c <__assert_fail@plt+0x62f0>
   177c4:	ldr	r3, [sp]
   177c8:	mov	r7, #0
   177cc:	umull	r2, r3, r3, r0
   177d0:	mov	r6, r3
   177d4:	umlal	r6, r7, ip, r0
   177d8:	cmp	r7, #0
   177dc:	movne	sl, #1
   177e0:	movne	fp, #0
   177e4:	b	17680 <__assert_fail@plt+0x6324>
   177e8:	ldr	r3, [sp]
   177ec:	mov	r7, #0
   177f0:	umull	r2, r3, r3, r0
   177f4:	mov	r6, r3
   177f8:	umlal	r6, r7, ip, r0
   177fc:	cmp	r7, #0
   17800:	movne	sl, #1
   17804:	movne	fp, #0
   17808:	b	172b4 <__assert_fail@plt+0x5f58>
   1780c:	umull	r2, r3, r6, r0
   17810:	str	r3, [sp]
   17814:	mov	r3, #0
   17818:	str	r3, [sp, #4]
   1781c:	ldrd	r2, [sp]
   17820:	umlal	r2, r3, ip, r0
   17824:	cmp	r3, #0
   17828:	movne	sl, #1
   1782c:	movne	fp, #0
   17830:	b	17288 <__assert_fail@plt+0x5f2c>
   17834:	bl	110f8 <__stack_chk_fail@plt>
   17838:	ldr	r3, [pc, #16]	; 17850 <__assert_fail@plt+0x64f4>
   1783c:	mov	r2, #96	; 0x60
   17840:	ldr	r1, [pc, #12]	; 17854 <__assert_fail@plt+0x64f8>
   17844:	ldr	r0, [pc, #12]	; 17858 <__assert_fail@plt+0x64fc>
   17848:	bl	1135c <__assert_fail@plt>
   1784c:	andeq	r9, r2, r8, lsl #30
   17850:	andeq	r9, r1, r0, ror #4
   17854:	andeq	r9, r1, r8, lsr #4
   17858:	andeq	r9, r1, r8, lsr r2
   1785c:	push	{r4, r5, lr}
   17860:	sub	sp, sp, #12
   17864:	mov	r4, r0
   17868:	bl	11278 <fileno@plt>
   1786c:	cmp	r0, #0
   17870:	mov	r0, r4
   17874:	blt	178f0 <__assert_fail@plt+0x6594>
   17878:	bl	111dc <__freading@plt>
   1787c:	cmp	r0, #0
   17880:	bne	178bc <__assert_fail@plt+0x6560>
   17884:	mov	r0, r4
   17888:	bl	17a48 <__assert_fail@plt+0x66ec>
   1788c:	cmp	r0, #0
   17890:	beq	178ec <__assert_fail@plt+0x6590>
   17894:	bl	1123c <__errno_location@plt>
   17898:	mov	r5, r0
   1789c:	mov	r0, r4
   178a0:	ldr	r4, [r5]
   178a4:	bl	1129c <fclose@plt>
   178a8:	cmp	r4, #0
   178ac:	mvnne	r0, #0
   178b0:	strne	r4, [r5]
   178b4:	add	sp, sp, #12
   178b8:	pop	{r4, r5, pc}
   178bc:	mov	r0, r4
   178c0:	bl	11278 <fileno@plt>
   178c4:	mov	r3, #1
   178c8:	str	r3, [sp]
   178cc:	mov	r2, #0
   178d0:	mov	r3, #0
   178d4:	bl	11164 <lseek64@plt>
   178d8:	mvn	r3, #0
   178dc:	mvn	r2, #0
   178e0:	cmp	r1, r3
   178e4:	cmpeq	r0, r2
   178e8:	bne	17884 <__assert_fail@plt+0x6528>
   178ec:	mov	r0, r4
   178f0:	add	sp, sp, #12
   178f4:	pop	{r4, r5, lr}
   178f8:	b	1129c <fclose@plt>
   178fc:	push	{r1, r2, r3}
   17900:	push	{r4, r5, r6, r7, r8, lr}
   17904:	sub	sp, sp, #12
   17908:	ldr	r4, [pc, #300]	; 17a3c <__assert_fail@plt+0x66e0>
   1790c:	ldr	r3, [pc, #300]	; 17a40 <__assert_fail@plt+0x66e4>
   17910:	ldr	r1, [sp, #36]	; 0x24
   17914:	ldr	r2, [r4]
   17918:	cmp	r1, r3
   1791c:	add	r3, sp, #40	; 0x28
   17920:	str	r2, [sp, #4]
   17924:	str	r3, [sp]
   17928:	bne	179f4 <__assert_fail@plt+0x6698>
   1792c:	ldr	r6, [pc, #272]	; 17a44 <__assert_fail@plt+0x66e8>
   17930:	add	r3, sp, #44	; 0x2c
   17934:	str	r3, [sp]
   17938:	ldr	r3, [r6]
   1793c:	ldr	r7, [sp, #40]	; 0x28
   17940:	cmp	r3, #0
   17944:	blt	17988 <__assert_fail@plt+0x662c>
   17948:	mov	r2, r7
   1794c:	mov	r8, r0
   17950:	bl	112b4 <fcntl64@plt>
   17954:	subs	r5, r0, #0
   17958:	blt	17a04 <__assert_fail@plt+0x66a8>
   1795c:	mov	r3, #1
   17960:	str	r3, [r6]
   17964:	ldr	r2, [sp, #4]
   17968:	ldr	r3, [r4]
   1796c:	mov	r0, r5
   17970:	cmp	r2, r3
   17974:	bne	17a38 <__assert_fail@plt+0x66dc>
   17978:	add	sp, sp, #12
   1797c:	pop	{r4, r5, r6, r7, r8, lr}
   17980:	add	sp, sp, #12
   17984:	bx	lr
   17988:	mov	r2, r7
   1798c:	mov	r1, #0
   17990:	bl	178fc <__assert_fail@plt+0x65a0>
   17994:	subs	r5, r0, #0
   17998:	blt	17964 <__assert_fail@plt+0x6608>
   1799c:	ldr	r3, [r6]
   179a0:	cmn	r3, #1
   179a4:	bne	17964 <__assert_fail@plt+0x6608>
   179a8:	mov	r1, #1
   179ac:	mov	r0, r5
   179b0:	bl	112b4 <fcntl64@plt>
   179b4:	subs	r2, r0, #0
   179b8:	blt	179d4 <__assert_fail@plt+0x6678>
   179bc:	orr	r2, r2, #1
   179c0:	mov	r1, #2
   179c4:	mov	r0, r5
   179c8:	bl	112b4 <fcntl64@plt>
   179cc:	cmn	r0, #1
   179d0:	bne	17964 <__assert_fail@plt+0x6608>
   179d4:	bl	1123c <__errno_location@plt>
   179d8:	mov	r6, r0
   179dc:	mov	r0, r5
   179e0:	ldr	r7, [r6]
   179e4:	mvn	r5, #0
   179e8:	bl	11344 <close@plt>
   179ec:	str	r7, [r6]
   179f0:	b	17964 <__assert_fail@plt+0x6608>
   179f4:	ldr	r2, [sp, #40]	; 0x28
   179f8:	bl	112b4 <fcntl64@plt>
   179fc:	mov	r5, r0
   17a00:	b	17964 <__assert_fail@plt+0x6608>
   17a04:	bl	1123c <__errno_location@plt>
   17a08:	ldr	r3, [r0]
   17a0c:	cmp	r3, #22
   17a10:	bne	1795c <__assert_fail@plt+0x6600>
   17a14:	mov	r2, r7
   17a18:	mov	r0, r8
   17a1c:	mov	r1, #0
   17a20:	bl	178fc <__assert_fail@plt+0x65a0>
   17a24:	subs	r5, r0, #0
   17a28:	mvnge	r3, #0
   17a2c:	strge	r3, [r6]
   17a30:	bge	179a8 <__assert_fail@plt+0x664c>
   17a34:	b	17964 <__assert_fail@plt+0x6608>
   17a38:	bl	110f8 <__stack_chk_fail@plt>
   17a3c:	andeq	r9, r2, r8, lsl #30
   17a40:	andeq	r0, r0, r6, lsl #8
   17a44:	andeq	sl, r2, ip, asr #7
   17a48:	push	{r4, lr}
   17a4c:	subs	r4, r0, #0
   17a50:	sub	sp, sp, #8
   17a54:	beq	17a70 <__assert_fail@plt+0x6714>
   17a58:	bl	111dc <__freading@plt>
   17a5c:	cmp	r0, #0
   17a60:	beq	17a70 <__assert_fail@plt+0x6714>
   17a64:	ldr	r3, [r4]
   17a68:	tst	r3, #256	; 0x100
   17a6c:	bne	17a80 <__assert_fail@plt+0x6724>
   17a70:	mov	r0, r4
   17a74:	add	sp, sp, #8
   17a78:	pop	{r4, lr}
   17a7c:	b	11074 <fflush@plt>
   17a80:	mov	r3, #1
   17a84:	str	r3, [sp]
   17a88:	mov	r2, #0
   17a8c:	mov	r3, #0
   17a90:	mov	r0, r4
   17a94:	bl	17aa8 <__assert_fail@plt+0x674c>
   17a98:	mov	r0, r4
   17a9c:	add	sp, sp, #8
   17aa0:	pop	{r4, lr}
   17aa4:	b	11074 <fflush@plt>
   17aa8:	push	{r4, r5, r6, r7, r8, lr}
   17aac:	sub	sp, sp, #8
   17ab0:	ldmib	r0, {ip, lr}
   17ab4:	mov	r4, r0
   17ab8:	ldr	r5, [sp, #32]
   17abc:	cmp	lr, ip
   17ac0:	beq	17ad8 <__assert_fail@plt+0x677c>
   17ac4:	str	r5, [sp, #32]
   17ac8:	mov	r0, r4
   17acc:	add	sp, sp, #8
   17ad0:	pop	{r4, r5, r6, r7, r8, lr}
   17ad4:	b	112a8 <fseeko64@plt>
   17ad8:	ldr	lr, [r0, #20]
   17adc:	ldr	ip, [r0, #16]
   17ae0:	cmp	lr, ip
   17ae4:	bne	17ac4 <__assert_fail@plt+0x6768>
   17ae8:	ldr	r8, [r0, #36]	; 0x24
   17aec:	cmp	r8, #0
   17af0:	bne	17ac4 <__assert_fail@plt+0x6768>
   17af4:	mov	r6, r2
   17af8:	mov	r7, r3
   17afc:	bl	11278 <fileno@plt>
   17b00:	mov	r2, r6
   17b04:	mov	r3, r7
   17b08:	str	r5, [sp]
   17b0c:	bl	11164 <lseek64@plt>
   17b10:	mvn	r3, #0
   17b14:	mvn	r2, #0
   17b18:	cmp	r1, r3
   17b1c:	cmpeq	r0, r2
   17b20:	beq	17b40 <__assert_fail@plt+0x67e4>
   17b24:	ldr	r3, [r4]
   17b28:	strd	r0, [r4, #80]	; 0x50
   17b2c:	mov	r0, r8
   17b30:	bic	r3, r3, #16
   17b34:	str	r3, [r4]
   17b38:	add	sp, sp, #8
   17b3c:	pop	{r4, r5, r6, r7, r8, pc}
   17b40:	mvn	r0, #0
   17b44:	b	17b38 <__assert_fail@plt+0x67dc>
   17b48:	push	{r4, r5, r6, r7, r8, lr}
   17b4c:	subs	r7, r0, #0
   17b50:	ldr	r5, [pc, #108]	; 17bc4 <__assert_fail@plt+0x6868>
   17b54:	sub	sp, sp, #8
   17b58:	mov	r8, r1
   17b5c:	ldr	r1, [r5]
   17b60:	moveq	r7, sp
   17b64:	str	r1, [sp, #4]
   17b68:	mov	r0, r7
   17b6c:	mov	r1, r8
   17b70:	mov	r6, r2
   17b74:	bl	11194 <mbrtowc@plt>
   17b78:	cmp	r6, #0
   17b7c:	cmnne	r0, #3
   17b80:	mov	r4, r0
   17b84:	bhi	17ba4 <__assert_fail@plt+0x6848>
   17b88:	ldr	r2, [sp, #4]
   17b8c:	ldr	r3, [r5]
   17b90:	mov	r0, r4
   17b94:	cmp	r2, r3
   17b98:	bne	17bc0 <__assert_fail@plt+0x6864>
   17b9c:	add	sp, sp, #8
   17ba0:	pop	{r4, r5, r6, r7, r8, pc}
   17ba4:	mov	r0, #0
   17ba8:	bl	17c3c <__assert_fail@plt+0x68e0>
   17bac:	cmp	r0, #0
   17bb0:	moveq	r4, #1
   17bb4:	ldrbeq	r3, [r8]
   17bb8:	streq	r3, [r7]
   17bbc:	b	17b88 <__assert_fail@plt+0x682c>
   17bc0:	bl	110f8 <__stack_chk_fail@plt>
   17bc4:	andeq	r9, r2, r8, lsl #30
   17bc8:	push	{r4, r5, r6, lr}
   17bcc:	mov	r4, r0
   17bd0:	bl	11188 <__fpending@plt>
   17bd4:	ldr	r5, [r4]
   17bd8:	and	r5, r5, #32
   17bdc:	mov	r6, r0
   17be0:	mov	r0, r4
   17be4:	bl	1785c <__assert_fail@plt+0x6500>
   17be8:	cmp	r5, #0
   17bec:	mov	r4, r0
   17bf0:	bne	17c1c <__assert_fail@plt+0x68c0>
   17bf4:	cmp	r0, #0
   17bf8:	beq	17c14 <__assert_fail@plt+0x68b8>
   17bfc:	cmp	r6, #0
   17c00:	bne	17c34 <__assert_fail@plt+0x68d8>
   17c04:	bl	1123c <__errno_location@plt>
   17c08:	ldr	r4, [r0]
   17c0c:	subs	r4, r4, #9
   17c10:	mvnne	r4, #0
   17c14:	mov	r0, r4
   17c18:	pop	{r4, r5, r6, pc}
   17c1c:	cmp	r0, #0
   17c20:	bne	17c34 <__assert_fail@plt+0x68d8>
   17c24:	bl	1123c <__errno_location@plt>
   17c28:	str	r4, [r0]
   17c2c:	mvn	r4, #0
   17c30:	b	17c14 <__assert_fail@plt+0x68b8>
   17c34:	mvn	r4, #0
   17c38:	b	17c14 <__assert_fail@plt+0x68b8>
   17c3c:	push	{r4, lr}
   17c40:	mov	r1, #0
   17c44:	bl	112c0 <setlocale@plt>
   17c48:	subs	r4, r0, #0
   17c4c:	beq	17c78 <__assert_fail@plt+0x691c>
   17c50:	ldr	r1, [pc, #40]	; 17c80 <__assert_fail@plt+0x6924>
   17c54:	bl	1105c <strcmp@plt>
   17c58:	cmp	r0, #0
   17c5c:	popeq	{r4, pc}
   17c60:	mov	r0, r4
   17c64:	ldr	r1, [pc, #24]	; 17c84 <__assert_fail@plt+0x6928>
   17c68:	bl	1105c <strcmp@plt>
   17c6c:	adds	r0, r0, #0
   17c70:	movne	r0, #1
   17c74:	pop	{r4, pc}
   17c78:	mov	r0, #1
   17c7c:	pop	{r4, pc}
   17c80:	andeq	r9, r1, ip, ror #4
   17c84:	andeq	r9, r1, r0, ror r2
   17c88:	push	{r4, lr}
   17c8c:	mov	r0, #14
   17c90:	bl	112e4 <nl_langinfo@plt>
   17c94:	cmp	r0, #0
   17c98:	beq	17cb0 <__assert_fail@plt+0x6954>
   17c9c:	ldrb	r2, [r0]
   17ca0:	ldr	r3, [pc, #16]	; 17cb8 <__assert_fail@plt+0x695c>
   17ca4:	cmp	r2, #0
   17ca8:	moveq	r0, r3
   17cac:	pop	{r4, pc}
   17cb0:	ldr	r0, [pc]	; 17cb8 <__assert_fail@plt+0x695c>
   17cb4:	pop	{r4, pc}
   17cb8:	andeq	r9, r1, r8, ror r2
   17cbc:	subs	r2, r1, #1
   17cc0:	bxeq	lr
   17cc4:	bcc	17e9c <__assert_fail@plt+0x6b40>
   17cc8:	cmp	r0, r1
   17ccc:	bls	17e80 <__assert_fail@plt+0x6b24>
   17cd0:	tst	r1, r2
   17cd4:	beq	17e8c <__assert_fail@plt+0x6b30>
   17cd8:	clz	r3, r0
   17cdc:	clz	r2, r1
   17ce0:	sub	r3, r2, r3
   17ce4:	rsbs	r3, r3, #31
   17ce8:	addne	r3, r3, r3, lsl #1
   17cec:	mov	r2, #0
   17cf0:	addne	pc, pc, r3, lsl #2
   17cf4:	nop			; (mov r0, r0)
   17cf8:	cmp	r0, r1, lsl #31
   17cfc:	adc	r2, r2, r2
   17d00:	subcs	r0, r0, r1, lsl #31
   17d04:	cmp	r0, r1, lsl #30
   17d08:	adc	r2, r2, r2
   17d0c:	subcs	r0, r0, r1, lsl #30
   17d10:	cmp	r0, r1, lsl #29
   17d14:	adc	r2, r2, r2
   17d18:	subcs	r0, r0, r1, lsl #29
   17d1c:	cmp	r0, r1, lsl #28
   17d20:	adc	r2, r2, r2
   17d24:	subcs	r0, r0, r1, lsl #28
   17d28:	cmp	r0, r1, lsl #27
   17d2c:	adc	r2, r2, r2
   17d30:	subcs	r0, r0, r1, lsl #27
   17d34:	cmp	r0, r1, lsl #26
   17d38:	adc	r2, r2, r2
   17d3c:	subcs	r0, r0, r1, lsl #26
   17d40:	cmp	r0, r1, lsl #25
   17d44:	adc	r2, r2, r2
   17d48:	subcs	r0, r0, r1, lsl #25
   17d4c:	cmp	r0, r1, lsl #24
   17d50:	adc	r2, r2, r2
   17d54:	subcs	r0, r0, r1, lsl #24
   17d58:	cmp	r0, r1, lsl #23
   17d5c:	adc	r2, r2, r2
   17d60:	subcs	r0, r0, r1, lsl #23
   17d64:	cmp	r0, r1, lsl #22
   17d68:	adc	r2, r2, r2
   17d6c:	subcs	r0, r0, r1, lsl #22
   17d70:	cmp	r0, r1, lsl #21
   17d74:	adc	r2, r2, r2
   17d78:	subcs	r0, r0, r1, lsl #21
   17d7c:	cmp	r0, r1, lsl #20
   17d80:	adc	r2, r2, r2
   17d84:	subcs	r0, r0, r1, lsl #20
   17d88:	cmp	r0, r1, lsl #19
   17d8c:	adc	r2, r2, r2
   17d90:	subcs	r0, r0, r1, lsl #19
   17d94:	cmp	r0, r1, lsl #18
   17d98:	adc	r2, r2, r2
   17d9c:	subcs	r0, r0, r1, lsl #18
   17da0:	cmp	r0, r1, lsl #17
   17da4:	adc	r2, r2, r2
   17da8:	subcs	r0, r0, r1, lsl #17
   17dac:	cmp	r0, r1, lsl #16
   17db0:	adc	r2, r2, r2
   17db4:	subcs	r0, r0, r1, lsl #16
   17db8:	cmp	r0, r1, lsl #15
   17dbc:	adc	r2, r2, r2
   17dc0:	subcs	r0, r0, r1, lsl #15
   17dc4:	cmp	r0, r1, lsl #14
   17dc8:	adc	r2, r2, r2
   17dcc:	subcs	r0, r0, r1, lsl #14
   17dd0:	cmp	r0, r1, lsl #13
   17dd4:	adc	r2, r2, r2
   17dd8:	subcs	r0, r0, r1, lsl #13
   17ddc:	cmp	r0, r1, lsl #12
   17de0:	adc	r2, r2, r2
   17de4:	subcs	r0, r0, r1, lsl #12
   17de8:	cmp	r0, r1, lsl #11
   17dec:	adc	r2, r2, r2
   17df0:	subcs	r0, r0, r1, lsl #11
   17df4:	cmp	r0, r1, lsl #10
   17df8:	adc	r2, r2, r2
   17dfc:	subcs	r0, r0, r1, lsl #10
   17e00:	cmp	r0, r1, lsl #9
   17e04:	adc	r2, r2, r2
   17e08:	subcs	r0, r0, r1, lsl #9
   17e0c:	cmp	r0, r1, lsl #8
   17e10:	adc	r2, r2, r2
   17e14:	subcs	r0, r0, r1, lsl #8
   17e18:	cmp	r0, r1, lsl #7
   17e1c:	adc	r2, r2, r2
   17e20:	subcs	r0, r0, r1, lsl #7
   17e24:	cmp	r0, r1, lsl #6
   17e28:	adc	r2, r2, r2
   17e2c:	subcs	r0, r0, r1, lsl #6
   17e30:	cmp	r0, r1, lsl #5
   17e34:	adc	r2, r2, r2
   17e38:	subcs	r0, r0, r1, lsl #5
   17e3c:	cmp	r0, r1, lsl #4
   17e40:	adc	r2, r2, r2
   17e44:	subcs	r0, r0, r1, lsl #4
   17e48:	cmp	r0, r1, lsl #3
   17e4c:	adc	r2, r2, r2
   17e50:	subcs	r0, r0, r1, lsl #3
   17e54:	cmp	r0, r1, lsl #2
   17e58:	adc	r2, r2, r2
   17e5c:	subcs	r0, r0, r1, lsl #2
   17e60:	cmp	r0, r1, lsl #1
   17e64:	adc	r2, r2, r2
   17e68:	subcs	r0, r0, r1, lsl #1
   17e6c:	cmp	r0, r1
   17e70:	adc	r2, r2, r2
   17e74:	subcs	r0, r0, r1
   17e78:	mov	r0, r2
   17e7c:	bx	lr
   17e80:	moveq	r0, #1
   17e84:	movne	r0, #0
   17e88:	bx	lr
   17e8c:	clz	r2, r1
   17e90:	rsb	r2, r2, #31
   17e94:	lsr	r0, r0, r2
   17e98:	bx	lr
   17e9c:	cmp	r0, #0
   17ea0:	mvnne	r0, #0
   17ea4:	b	17fd8 <__assert_fail@plt+0x6c7c>
   17ea8:	cmp	r1, #0
   17eac:	beq	17e9c <__assert_fail@plt+0x6b40>
   17eb0:	push	{r0, r1, lr}
   17eb4:	bl	17cbc <__assert_fail@plt+0x6960>
   17eb8:	pop	{r1, r2, lr}
   17ebc:	mul	r3, r2, r0
   17ec0:	sub	r1, r1, r3
   17ec4:	bx	lr
   17ec8:	cmp	r3, #0
   17ecc:	cmpeq	r2, #0
   17ed0:	bne	17ef4 <__assert_fail@plt+0x6b98>
   17ed4:	cmp	r1, #0
   17ed8:	movlt	r1, #-2147483648	; 0x80000000
   17edc:	movlt	r0, #0
   17ee0:	blt	17ef0 <__assert_fail@plt+0x6b94>
   17ee4:	cmpeq	r0, #0
   17ee8:	mvnne	r1, #-2147483648	; 0x80000000
   17eec:	mvnne	r0, #0
   17ef0:	b	17fd8 <__assert_fail@plt+0x6c7c>
   17ef4:	sub	sp, sp, #8
   17ef8:	push	{sp, lr}
   17efc:	cmp	r1, #0
   17f00:	blt	17f20 <__assert_fail@plt+0x6bc4>
   17f04:	cmp	r3, #0
   17f08:	blt	17f54 <__assert_fail@plt+0x6bf8>
   17f0c:	bl	17fe8 <__assert_fail@plt+0x6c8c>
   17f10:	ldr	lr, [sp, #4]
   17f14:	add	sp, sp, #8
   17f18:	pop	{r2, r3}
   17f1c:	bx	lr
   17f20:	rsbs	r0, r0, #0
   17f24:	sbc	r1, r1, r1, lsl #1
   17f28:	cmp	r3, #0
   17f2c:	blt	17f78 <__assert_fail@plt+0x6c1c>
   17f30:	bl	17fe8 <__assert_fail@plt+0x6c8c>
   17f34:	ldr	lr, [sp, #4]
   17f38:	add	sp, sp, #8
   17f3c:	pop	{r2, r3}
   17f40:	rsbs	r0, r0, #0
   17f44:	sbc	r1, r1, r1, lsl #1
   17f48:	rsbs	r2, r2, #0
   17f4c:	sbc	r3, r3, r3, lsl #1
   17f50:	bx	lr
   17f54:	rsbs	r2, r2, #0
   17f58:	sbc	r3, r3, r3, lsl #1
   17f5c:	bl	17fe8 <__assert_fail@plt+0x6c8c>
   17f60:	ldr	lr, [sp, #4]
   17f64:	add	sp, sp, #8
   17f68:	pop	{r2, r3}
   17f6c:	rsbs	r0, r0, #0
   17f70:	sbc	r1, r1, r1, lsl #1
   17f74:	bx	lr
   17f78:	rsbs	r2, r2, #0
   17f7c:	sbc	r3, r3, r3, lsl #1
   17f80:	bl	17fe8 <__assert_fail@plt+0x6c8c>
   17f84:	ldr	lr, [sp, #4]
   17f88:	add	sp, sp, #8
   17f8c:	pop	{r2, r3}
   17f90:	rsbs	r2, r2, #0
   17f94:	sbc	r3, r3, r3, lsl #1
   17f98:	bx	lr
   17f9c:	cmp	r3, #0
   17fa0:	cmpeq	r2, #0
   17fa4:	bne	17fbc <__assert_fail@plt+0x6c60>
   17fa8:	cmp	r1, #0
   17fac:	cmpeq	r0, #0
   17fb0:	mvnne	r1, #0
   17fb4:	mvnne	r0, #0
   17fb8:	b	17fd8 <__assert_fail@plt+0x6c7c>
   17fbc:	sub	sp, sp, #8
   17fc0:	push	{sp, lr}
   17fc4:	bl	17fe8 <__assert_fail@plt+0x6c8c>
   17fc8:	ldr	lr, [sp, #4]
   17fcc:	add	sp, sp, #8
   17fd0:	pop	{r2, r3}
   17fd4:	bx	lr
   17fd8:	push	{r1, lr}
   17fdc:	mov	r0, #8
   17fe0:	bl	11050 <raise@plt>
   17fe4:	pop	{r1, pc}
   17fe8:	cmp	r1, r3
   17fec:	cmpeq	r0, r2
   17ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ff4:	mov	r4, r0
   17ff8:	movcc	r0, #0
   17ffc:	mov	r5, r1
   18000:	ldr	lr, [sp, #36]	; 0x24
   18004:	movcc	r1, r0
   18008:	bcc	18104 <__assert_fail@plt+0x6da8>
   1800c:	cmp	r3, #0
   18010:	clzeq	ip, r2
   18014:	clzne	ip, r3
   18018:	addeq	ip, ip, #32
   1801c:	cmp	r5, #0
   18020:	clzeq	r1, r4
   18024:	addeq	r1, r1, #32
   18028:	clzne	r1, r5
   1802c:	sub	ip, ip, r1
   18030:	sub	sl, ip, #32
   18034:	lsl	r9, r3, ip
   18038:	rsb	fp, ip, #32
   1803c:	orr	r9, r9, r2, lsl sl
   18040:	orr	r9, r9, r2, lsr fp
   18044:	lsl	r8, r2, ip
   18048:	cmp	r5, r9
   1804c:	cmpeq	r4, r8
   18050:	movcc	r0, #0
   18054:	movcc	r1, r0
   18058:	bcc	18074 <__assert_fail@plt+0x6d18>
   1805c:	mov	r0, #1
   18060:	subs	r4, r4, r8
   18064:	lsl	r1, r0, sl
   18068:	orr	r1, r1, r0, lsr fp
   1806c:	lsl	r0, r0, ip
   18070:	sbc	r5, r5, r9
   18074:	cmp	ip, #0
   18078:	beq	18104 <__assert_fail@plt+0x6da8>
   1807c:	lsr	r6, r8, #1
   18080:	orr	r6, r6, r9, lsl #31
   18084:	lsr	r7, r9, #1
   18088:	mov	r2, ip
   1808c:	b	180b0 <__assert_fail@plt+0x6d54>
   18090:	subs	r3, r4, r6
   18094:	sbc	r8, r5, r7
   18098:	adds	r3, r3, r3
   1809c:	adc	r8, r8, r8
   180a0:	adds	r4, r3, #1
   180a4:	adc	r5, r8, #0
   180a8:	subs	r2, r2, #1
   180ac:	beq	180cc <__assert_fail@plt+0x6d70>
   180b0:	cmp	r5, r7
   180b4:	cmpeq	r4, r6
   180b8:	bcs	18090 <__assert_fail@plt+0x6d34>
   180bc:	adds	r4, r4, r4
   180c0:	adc	r5, r5, r5
   180c4:	subs	r2, r2, #1
   180c8:	bne	180b0 <__assert_fail@plt+0x6d54>
   180cc:	lsr	r3, r4, ip
   180d0:	orr	r3, r3, r5, lsl fp
   180d4:	lsr	r2, r5, ip
   180d8:	orr	r3, r3, r5, lsr sl
   180dc:	adds	r0, r0, r4
   180e0:	mov	r4, r3
   180e4:	lsl	r3, r2, ip
   180e8:	orr	r3, r3, r4, lsl sl
   180ec:	lsl	ip, r4, ip
   180f0:	orr	r3, r3, r4, lsr fp
   180f4:	adc	r1, r1, r5
   180f8:	subs	r0, r0, ip
   180fc:	mov	r5, r2
   18100:	sbc	r1, r1, r3
   18104:	cmp	lr, #0
   18108:	strdne	r4, [lr]
   1810c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18110:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18114:	mov	r7, r0
   18118:	ldr	r6, [pc, #72]	; 18168 <__assert_fail@plt+0x6e0c>
   1811c:	ldr	r5, [pc, #72]	; 1816c <__assert_fail@plt+0x6e10>
   18120:	add	r6, pc, r6
   18124:	add	r5, pc, r5
   18128:	sub	r6, r6, r5
   1812c:	mov	r8, r1
   18130:	mov	r9, r2
   18134:	bl	1100c <fdopen@plt-0x20>
   18138:	asrs	r6, r6, #2
   1813c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18140:	mov	r4, #0
   18144:	add	r4, r4, #1
   18148:	ldr	r3, [r5], #4
   1814c:	mov	r2, r9
   18150:	mov	r1, r8
   18154:	mov	r0, r7
   18158:	blx	r3
   1815c:	cmp	r6, r4
   18160:	bne	18144 <__assert_fail@plt+0x6de8>
   18164:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18168:	ldrdeq	r1, [r1], -ip
   1816c:	ldrdeq	r1, [r1], -r4
   18170:	bx	lr
   18174:	ldr	r3, [pc, #12]	; 18188 <__assert_fail@plt+0x6e2c>
   18178:	mov	r1, #0
   1817c:	add	r3, pc, r3
   18180:	ldr	r2, [r3]
   18184:	b	11254 <__cxa_atexit@plt>
   18188:	andeq	r1, r1, r4, lsr #31

Disassembly of section .fini:

0001818c <.fini>:
   1818c:	push	{r3, lr}
   18190:	pop	{r3, pc}
