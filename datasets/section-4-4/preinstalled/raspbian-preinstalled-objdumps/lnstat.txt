
raspbian-preinstalled/lnstat:     file format elf32-littlearm


Disassembly of section .init:

00010a34 <.init>:
   10a34:	push	{r3, lr}
   10a38:	bl	1151c <__assert_fail@plt+0x8f4>
   10a3c:	pop	{r3, pc}

Disassembly of section .plt:

00010a40 <calloc@plt-0x14>:
   10a40:	push	{lr}		; (str lr, [sp, #-4]!)
   10a44:	ldr	lr, [pc, #4]	; 10a50 <calloc@plt-0x4>
   10a48:	add	lr, pc, lr
   10a4c:	ldr	pc, [lr, #8]!
   10a50:			; <UNDEFINED> instruction: 0x000135b0

00010a54 <calloc@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #77824	; 0x13000
   10a5c:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a60 <raise@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #77824	; 0x13000
   10a68:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a6c <strcmp@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #77824	; 0x13000
   10a74:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a78 <fflush@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #77824	; 0x13000
   10a80:	ldr	pc, [ip, #1432]!	; 0x598

00010a84 <free@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #77824	; 0x13000
   10a8c:	ldr	pc, [ip, #1424]!	; 0x590

00010a90 <fgets@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #77824	; 0x13000
   10a98:	ldr	pc, [ip, #1416]!	; 0x588

00010a9c <strndup@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #77824	; 0x13000
   10aa4:	ldr	pc, [ip, #1408]!	; 0x580

00010aa8 <sleep@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #77824	; 0x13000
   10ab0:	ldr	pc, [ip, #1400]!	; 0x578

00010ab4 <strdup@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #77824	; 0x13000
   10abc:	ldr	pc, [ip, #1392]!	; 0x570

00010ac0 <__stack_chk_fail@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #77824	; 0x13000
   10ac8:	ldr	pc, [ip, #1384]!	; 0x568

00010acc <rewind@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #77824	; 0x13000
   10ad4:	ldr	pc, [ip, #1376]!	; 0x560

00010ad8 <perror@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #77824	; 0x13000
   10ae0:	ldr	pc, [ip, #1368]!	; 0x558

00010ae4 <fwrite@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #77824	; 0x13000
   10aec:	ldr	pc, [ip, #1360]!	; 0x550

00010af0 <gettimeofday@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #77824	; 0x13000
   10af8:	ldr	pc, [ip, #1352]!	; 0x548

00010afc <opendir@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #77824	; 0x13000
   10b04:	ldr	pc, [ip, #1344]!	; 0x540

00010b08 <malloc@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #77824	; 0x13000
   10b10:	ldr	pc, [ip, #1336]!	; 0x538

00010b14 <__libc_start_main@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #77824	; 0x13000
   10b1c:	ldr	pc, [ip, #1328]!	; 0x530

00010b20 <__vfprintf_chk@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #77824	; 0x13000
   10b28:	ldr	pc, [ip, #1320]!	; 0x528

00010b2c <__gmon_start__@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #77824	; 0x13000
   10b34:	ldr	pc, [ip, #1312]!	; 0x520

00010b38 <getopt_long@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #77824	; 0x13000
   10b40:	ldr	pc, [ip, #1304]!	; 0x518

00010b44 <exit@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #77824	; 0x13000
   10b4c:	ldr	pc, [ip, #1296]!	; 0x510

00010b50 <feof@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #77824	; 0x13000
   10b58:	ldr	pc, [ip, #1288]!	; 0x508

00010b5c <strtoul@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #77824	; 0x13000
   10b64:	ldr	pc, [ip, #1280]!	; 0x500

00010b68 <strlen@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #77824	; 0x13000
   10b70:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b74 <strchr@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #77824	; 0x13000
   10b7c:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b80 <snprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #77824	; 0x13000
   10b88:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b8c <strncpy@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #77824	; 0x13000
   10b94:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b98 <__fprintf_chk@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #77824	; 0x13000
   10ba0:	ldr	pc, [ip, #1240]!	; 0x4d8

00010ba4 <strtok@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #77824	; 0x13000
   10bac:	ldr	pc, [ip, #1232]!	; 0x4d0

00010bb0 <strrchr@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #77824	; 0x13000
   10bb8:	ldr	pc, [ip, #1224]!	; 0x4c8

00010bbc <fputc@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #77824	; 0x13000
   10bc4:	ldr	pc, [ip, #1216]!	; 0x4c0

00010bc8 <sscanf@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #77824	; 0x13000
   10bd0:	ldr	pc, [ip, #1208]!	; 0x4b8

00010bd4 <readdir64@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #77824	; 0x13000
   10bdc:	ldr	pc, [ip, #1200]!	; 0x4b0

00010be0 <putc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #77824	; 0x13000
   10be8:	ldr	pc, [ip, #1192]!	; 0x4a8

00010bec <fopen64@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #77824	; 0x13000
   10bf4:	ldr	pc, [ip, #1184]!	; 0x4a0

00010bf8 <fputs@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #77824	; 0x13000
   10c00:	ldr	pc, [ip, #1176]!	; 0x498

00010c04 <abort@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #77824	; 0x13000
   10c0c:	ldr	pc, [ip, #1168]!	; 0x490

00010c10 <closedir@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #77824	; 0x13000
   10c18:	ldr	pc, [ip, #1160]!	; 0x488

00010c1c <__snprintf_chk@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #77824	; 0x13000
   10c24:	ldr	pc, [ip, #1152]!	; 0x480

00010c28 <__assert_fail@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #77824	; 0x13000
   10c30:	ldr	pc, [ip, #1144]!	; 0x478

Disassembly of section .text:

00010c34 <.text>:
   10c34:	ldr	r3, [pc, #2120]	; 11484 <__assert_fail@plt+0x85c>
   10c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c3c:	sub	sp, sp, #188	; 0xbc
   10c40:	ldr	r4, [r1]
   10c44:	ldr	r2, [r3]
   10c48:	mov	r5, r1
   10c4c:	mov	r3, #2
   10c50:	mov	r1, #47	; 0x2f
   10c54:	mov	r8, r0
   10c58:	mov	r0, r4
   10c5c:	str	r2, [sp, #180]	; 0xb4
   10c60:	str	r3, [sp, #40]	; 0x28
   10c64:	str	r3, [sp, #44]	; 0x2c
   10c68:	bl	10bb0 <strrchr@plt>
   10c6c:	ldr	r1, [pc, #2068]	; 11488 <__assert_fail@plt+0x860>
   10c70:	cmp	r0, #0
   10c74:	addne	r4, r0, #1
   10c78:	mov	r0, r4
   10c7c:	bl	10a6c <strcmp@plt>
   10c80:	cmp	r0, #0
   10c84:	bne	11010 <__assert_fail@plt+0x3e8>
   10c88:	ldr	r3, [pc, #2044]	; 1148c <__assert_fail@plt+0x864>
   10c8c:	mov	r2, #1
   10c90:	str	r2, [sp, #20]
   10c94:	str	r3, [sp, #52]	; 0x34
   10c98:	ldr	r7, [pc, #2032]	; 11490 <__assert_fail@plt+0x868>
   10c9c:	ldr	r6, [pc, #2032]	; 11494 <__assert_fail@plt+0x86c>
   10ca0:	ldr	sl, [pc, #2032]	; 11498 <__assert_fail@plt+0x870>
   10ca4:	ldr	fp, [pc, #2032]	; 1149c <__assert_fail@plt+0x874>
   10ca8:	ldr	r9, [pc, #2032]	; 114a0 <__assert_fail@plt+0x878>
   10cac:	mov	r3, #0
   10cb0:	str	r3, [sp, #24]
   10cb4:	mov	r3, #2
   10cb8:	str	r3, [sp, #16]
   10cbc:	mov	r4, #0
   10cc0:	str	r4, [sp]
   10cc4:	mov	r3, r7
   10cc8:	mov	r2, r6
   10ccc:	mov	r1, r5
   10cd0:	mov	r0, r8
   10cd4:	bl	10b38 <getopt_long@plt>
   10cd8:	cmn	r0, #1
   10cdc:	beq	10f5c <__assert_fail@plt+0x334>
   10ce0:	sub	r0, r0, #63	; 0x3f
   10ce4:	cmp	r0, #56	; 0x38
   10ce8:	ldrls	pc, [pc, r0, lsl #2]
   10cec:	b	11474 <__assert_fail@plt+0x84c>
   10cf0:	andeq	r1, r1, r8, ror #8
   10cf4:	andeq	r1, r1, r4, ror r4
   10cf8:	andeq	r1, r1, r4, ror r4
   10cfc:	andeq	r1, r1, r4, ror r4
   10d00:	andeq	r1, r1, r4, ror r4
   10d04:	andeq	r1, r1, r4, ror r4
   10d08:	andeq	r1, r1, r4, ror r4
   10d0c:	andeq	r1, r1, r4, ror r4
   10d10:	andeq	r1, r1, r4, ror r4
   10d14:	andeq	r1, r1, r4, ror r4
   10d18:	andeq	r1, r1, r4, ror r4
   10d1c:	andeq	r1, r1, r4, ror r4
   10d20:	andeq	r1, r1, r4, ror r4
   10d24:	andeq	r1, r1, r4, ror r4
   10d28:	andeq	r1, r1, r4, ror r4
   10d2c:	andeq	r1, r1, r4, ror r4
   10d30:	andeq	r1, r1, r4, ror r4
   10d34:	andeq	r1, r1, r4, ror r4
   10d38:	andeq	r1, r1, r4, ror r4
   10d3c:	andeq	r1, r1, r4, ror r4
   10d40:	andeq	r1, r1, r4, ror r4
   10d44:	andeq	r1, r1, r4, ror r4
   10d48:	andeq	r1, r1, r4, ror r4
   10d4c:	andeq	r1, r1, r4, ror r4
   10d50:	andeq	r1, r1, r4, ror r4
   10d54:	andeq	r1, r1, r4, ror r4
   10d58:	andeq	r1, r1, r4, ror r4
   10d5c:	andeq	r1, r1, r4, ror r4
   10d60:	andeq	r1, r1, r4, ror r4
   10d64:	andeq	r1, r1, r4, ror r4
   10d68:	andeq	r1, r1, r4, ror r4
   10d6c:	andeq	r1, r1, r4, ror r4
   10d70:	andeq	r1, r1, r4, ror r4
   10d74:	andeq	r1, r1, r4, ror r4
   10d78:	andeq	r1, r1, r4, ror r4
   10d7c:	andeq	r1, r1, r4, ror r4
   10d80:	andeq	r0, r1, ip, lsl #30
   10d84:	andeq	r0, r1, r0, lsl #30
   10d88:	andeq	r1, r1, r4, ror r4
   10d8c:	andeq	r0, r1, r8, lsr pc
   10d90:	andeq	r1, r1, r4, ror r4
   10d94:	andeq	r1, r1, r8, ror #8
   10d98:	andeq	r0, r1, r4, lsr #30
   10d9c:	strdeq	r0, [r1], -r4
   10da0:	andeq	r0, r1, r0, lsl #29
   10da4:	andeq	r1, r1, r4, ror r4
   10da8:	andeq	r1, r1, r4, ror r4
   10dac:	andeq	r1, r1, r4, ror r4
   10db0:	andeq	r1, r1, r4, ror r4
   10db4:	andeq	r1, r1, r4, ror r4
   10db8:	andeq	r1, r1, r4, ror r4
   10dbc:	andeq	r1, r1, r4, ror r4
   10dc0:	andeq	r0, r1, ip, ror #28
   10dc4:	andeq	r1, r1, r4, ror r4
   10dc8:	andeq	r1, r1, r4, ror r4
   10dcc:	andeq	r1, r1, r4, ror r4
   10dd0:	ldrdeq	r0, [r1], -r4
   10dd4:	ldr	r0, [sl]
   10dd8:	bl	10ab4 <strdup@plt>
   10ddc:	cmp	r0, #0
   10de0:	beq	10cbc <__assert_fail@plt+0x94>
   10de4:	mov	r1, fp
   10de8:	bl	10ba4 <strtok@plt>
   10dec:	cmp	r0, #0
   10df0:	beq	10cbc <__assert_fail@plt+0x94>
   10df4:	ldr	r3, [pc, #1700]	; 114a0 <__assert_fail@plt+0x878>
   10df8:	str	r8, [sp, #32]
   10dfc:	mov	r4, #0
   10e00:	mov	r8, r3
   10e04:	str	r3, [sp, #28]
   10e08:	str	r5, [sp, #36]	; 0x24
   10e0c:	mov	r2, #0
   10e10:	mov	r1, r2
   10e14:	bl	10b5c <strtoul@plt>
   10e18:	mov	r1, fp
   10e1c:	add	r4, r4, #1
   10e20:	cmp	r0, #20
   10e24:	movlt	r5, r0
   10e28:	movge	r5, #20
   10e2c:	mov	r0, #0
   10e30:	str	r5, [r8, #12]!
   10e34:	bl	10ba4 <strtok@plt>
   10e38:	cmp	r0, #0
   10e3c:	bne	10e0c <__assert_fail@plt+0x1e4>
   10e40:	cmp	r4, #1
   10e44:	mov	r2, r5
   10e48:	ldr	r3, [sp, #28]
   10e4c:	ldr	r8, [sp, #32]
   10e50:	ldr	r5, [sp, #36]	; 0x24
   10e54:	bne	10cbc <__assert_fail@plt+0x94>
   10e58:	ldr	r1, [pc, #1604]	; 114a4 <__assert_fail@plt+0x87c>
   10e5c:	str	r2, [r3, #12]!
   10e60:	cmp	r3, r1
   10e64:	bne	10e5c <__assert_fail@plt+0x234>
   10e68:	b	10cbc <__assert_fail@plt+0x94>
   10e6c:	add	r2, sp, #44	; 0x2c
   10e70:	ldr	r1, [pc, #1584]	; 114a8 <__assert_fail@plt+0x880>
   10e74:	ldr	r0, [sl]
   10e78:	bl	10bc8 <sscanf@plt>
   10e7c:	b	10cbc <__assert_fail@plt+0x94>
   10e80:	ldr	r0, [sl]
   10e84:	bl	10ab4 <strdup@plt>
   10e88:	cmp	r0, #0
   10e8c:	beq	10cbc <__assert_fail@plt+0x94>
   10e90:	mov	r1, fp
   10e94:	bl	10ba4 <strtok@plt>
   10e98:	cmp	r0, #0
   10e9c:	bne	10ecc <__assert_fail@plt+0x2a4>
   10ea0:	b	10cbc <__assert_fail@plt+0x94>
   10ea4:	add	r2, r3, r3, lsl #1
   10ea8:	mov	r1, fp
   10eac:	add	r2, r9, r2, lsl #2
   10eb0:	add	r3, r3, #1
   10eb4:	str	r0, [r2, #4]
   10eb8:	mov	r0, #0
   10ebc:	str	r3, [r9]
   10ec0:	bl	10ba4 <strtok@plt>
   10ec4:	cmp	r0, #0
   10ec8:	beq	10cbc <__assert_fail@plt+0x94>
   10ecc:	ldr	r3, [r9]
   10ed0:	cmp	r3, #127	; 0x7f
   10ed4:	bls	10ea4 <__assert_fail@plt+0x27c>
   10ed8:	ldr	r1, [pc, #1484]	; 114ac <__assert_fail@plt+0x884>
   10edc:	mov	r3, #128	; 0x80
   10ee0:	ldr	r2, [pc, #1480]	; 114b0 <__assert_fail@plt+0x888>
   10ee4:	ldr	r0, [r1]
   10ee8:	mov	r1, #1
   10eec:	bl	10b98 <__fprintf_chk@plt>
   10ef0:	b	10cbc <__assert_fail@plt+0x94>
   10ef4:	mov	r3, #1
   10ef8:	str	r3, [sp, #16]
   10efc:	b	10cbc <__assert_fail@plt+0x94>
   10f00:	mov	r3, #0
   10f04:	str	r3, [sp, #16]
   10f08:	b	10cbc <__assert_fail@plt+0x94>
   10f0c:	mov	r2, #0
   10f10:	mov	r1, r2
   10f14:	ldr	r0, [sl]
   10f18:	bl	10b5c <strtoul@plt>
   10f1c:	str	r0, [sp, #24]
   10f20:	b	10cbc <__assert_fail@plt+0x94>
   10f24:	add	r2, sp, #40	; 0x28
   10f28:	ldr	r1, [pc, #1400]	; 114a8 <__assert_fail@plt+0x880>
   10f2c:	ldr	r0, [sl]
   10f30:	bl	10bc8 <sscanf@plt>
   10f34:	b	10cbc <__assert_fail@plt+0x94>
   10f38:	ldr	r0, [sl]
   10f3c:	bl	10ab4 <strdup@plt>
   10f40:	ldr	r2, [sp, #20]
   10f44:	add	r3, sp, #184	; 0xb8
   10f48:	add	r3, r3, r2, lsl #2
   10f4c:	add	r2, r2, #1
   10f50:	str	r2, [sp, #20]
   10f54:	str	r0, [r3, #-132]	; 0xffffff7c
   10f58:	b	10cbc <__assert_fail@plt+0x94>
   10f5c:	ldr	r1, [sp, #20]
   10f60:	add	r2, sp, #52	; 0x34
   10f64:	ldr	r0, [pc, #1352]	; 114b4 <__assert_fail@plt+0x88c>
   10f68:	bl	11c48 <__assert_fail@plt+0x1020>
   10f6c:	ldr	r3, [sp, #16]
   10f70:	sub	r3, r3, #1
   10f74:	cmp	r3, #1
   10f78:	str	r0, [sp, #32]
   10f7c:	bhi	1103c <__assert_fail@plt+0x414>
   10f80:	ldr	r9, [pc, #1304]	; 114a0 <__assert_fail@plt+0x878>
   10f84:	ldr	r5, [sp, #40]	; 0x28
   10f88:	ldr	r3, [r9]
   10f8c:	cmp	r3, #0
   10f90:	movne	r6, r9
   10f94:	movne	r7, #8
   10f98:	ldrne	r8, [sp, #32]
   10f9c:	bne	10fd0 <__assert_fail@plt+0x3a8>
   10fa0:	b	1106c <__assert_fail@plt+0x444>
   10fa4:	ldr	r3, [r0]
   10fa8:	ldr	r2, [r6, #12]
   10fac:	add	r3, r3, #4096	; 0x1000
   10fb0:	cmp	r2, #0
   10fb4:	str	r5, [r3, #272]	; 0x110
   10fb8:	streq	r7, [r6, #12]
   10fbc:	ldr	r3, [r9]
   10fc0:	add	r4, r4, #1
   10fc4:	cmp	r3, r4
   10fc8:	add	r6, r6, #12
   10fcc:	bls	110fc <__assert_fail@plt+0x4d4>
   10fd0:	ldr	r1, [r6, #4]
   10fd4:	mov	r0, r8
   10fd8:	bl	11e98 <__assert_fail@plt+0x1270>
   10fdc:	cmp	r0, #0
   10fe0:	str	r0, [r6, #8]
   10fe4:	bne	10fa4 <__assert_fail@plt+0x37c>
   10fe8:	mov	r2, #12
   10fec:	ldr	r3, [pc, #1208]	; 114ac <__assert_fail@plt+0x884>
   10ff0:	mla	r4, r2, r4, r9
   10ff4:	ldr	r0, [r3]
   10ff8:	ldr	r2, [pc, #1208]	; 114b8 <__assert_fail@plt+0x890>
   10ffc:	ldr	r3, [r4, #4]
   11000:	mov	r1, #1
   11004:	bl	10b98 <__fprintf_chk@plt>
   11008:	mov	r0, #1
   1100c:	bl	10b44 <exit@plt>
   11010:	mov	r0, r4
   11014:	ldr	r1, [pc, #1184]	; 114bc <__assert_fail@plt+0x894>
   11018:	bl	10a6c <strcmp@plt>
   1101c:	cmp	r0, #0
   11020:	movne	r3, #0
   11024:	strne	r3, [sp, #20]
   11028:	ldreq	r3, [pc, #1168]	; 114c0 <__assert_fail@plt+0x898>
   1102c:	moveq	r2, #1
   11030:	streq	r2, [sp, #20]
   11034:	streq	r3, [sp, #52]	; 0x34
   11038:	b	10c98 <__assert_fail@plt+0x70>
   1103c:	ldr	r3, [pc, #1152]	; 114c4 <__assert_fail@plt+0x89c>
   11040:	mov	r1, r0
   11044:	ldr	r0, [r3]
   11048:	bl	11e00 <__assert_fail@plt+0x11d8>
   1104c:	ldr	r3, [pc, #1072]	; 11484 <__assert_fail@plt+0x85c>
   11050:	ldr	r2, [sp, #180]	; 0xb4
   11054:	mov	r0, #1
   11058:	ldr	r3, [r3]
   1105c:	cmp	r2, r3
   11060:	bne	11480 <__assert_fail@plt+0x858>
   11064:	add	sp, sp, #188	; 0xbc
   11068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1106c:	ldr	lr, [sp, #32]
   11070:	mov	r4, r3
   11074:	mov	r6, #12
   11078:	mov	ip, #8
   1107c:	cmp	lr, #0
   11080:	beq	110f8 <__assert_fail@plt+0x4d0>
   11084:	add	r3, lr, #4096	; 0x1000
   11088:	ldr	r7, [r3, #288]	; 0x120
   1108c:	cmp	r7, #0
   11090:	addne	r2, lr, #4352	; 0x1100
   11094:	mlane	r3, r6, r4, r9
   11098:	addne	r7, r4, r7
   1109c:	addne	r2, r2, #36	; 0x24
   110a0:	bne	110b8 <__assert_fail@plt+0x490>
   110a4:	b	11460 <__assert_fail@plt+0x838>
   110a8:	cmp	r4, r7
   110ac:	add	r2, r2, #56	; 0x38
   110b0:	add	r3, r3, #12
   110b4:	beq	11460 <__assert_fail@plt+0x838>
   110b8:	ldr	r1, [r2]
   110bc:	ldr	r0, [r3, #12]
   110c0:	add	r1, r1, #4096	; 0x1000
   110c4:	cmp	r0, #0
   110c8:	add	r4, r4, #1
   110cc:	str	r2, [r3, #8]
   110d0:	str	r5, [r1, #272]	; 0x110
   110d4:	streq	ip, [r3, #12]
   110d8:	cmp	r4, #126	; 0x7e
   110dc:	ble	110a8 <__assert_fail@plt+0x480>
   110e0:	ldr	r1, [pc, #964]	; 114ac <__assert_fail@plt+0x884>
   110e4:	mov	r3, #128	; 0x80
   110e8:	ldr	r2, [pc, #984]	; 114c8 <__assert_fail@plt+0x8a0>
   110ec:	ldr	r0, [r1]
   110f0:	mov	r1, #1
   110f4:	bl	10b98 <__fprintf_chk@plt>
   110f8:	str	r4, [r9]
   110fc:	ldr	r5, [pc, #968]	; 114cc <__assert_fail@plt+0x8a4>
   11100:	add	r4, r5, #40	; 0x28
   11104:	mov	r1, #2560	; 0xa00
   11108:	mov	r0, #1
   1110c:	bl	10a54 <calloc@plt>
   11110:	str	r0, [r5], #4
   11114:	cmp	r5, r4
   11118:	bne	11104 <__assert_fail@plt+0x4dc>
   1111c:	ldr	r7, [r9]
   11120:	cmp	r7, #0
   11124:	beq	11250 <__assert_fail@plt+0x628>
   11128:	ldr	r3, [pc, #880]	; 114a0 <__assert_fail@plt+0x878>
   1112c:	mov	r7, #0
   11130:	str	r3, [sp, #20]
   11134:	str	r7, [sp, #28]
   11138:	ldr	r3, [sp, #20]
   1113c:	ldr	r0, [r9, #1544]	; 0x608
   11140:	mov	r2, #1
   11144:	ldr	r8, [r3, #8]
   11148:	ldr	r6, [r3, #12]
   1114c:	add	r0, r0, r7
   11150:	ldr	r3, [r8], #8
   11154:	add	fp, r6, #2
   11158:	add	r3, r3, #4096	; 0x1000
   1115c:	add	r3, r3, #5
   11160:	str	r3, [sp, #12]
   11164:	ldr	r3, [pc, #868]	; 114d0 <__assert_fail@plt+0x8a8>
   11168:	str	r6, [sp, #8]
   1116c:	str	r3, [sp]
   11170:	str	r6, [sp, #4]
   11174:	mvn	r3, #0
   11178:	mov	r1, fp
   1117c:	bl	10c1c <__snprintf_chk@plt>
   11180:	ldr	r3, [pc, #796]	; 114a4 <__assert_fail@plt+0x87c>
   11184:	mov	r5, r8
   11188:	add	sl, r3, #12
   1118c:	mov	r4, #1
   11190:	b	111cc <__assert_fail@plt+0x5a4>
   11194:	ldr	r2, [pc, #824]	; 114d4 <__assert_fail@plt+0x8ac>
   11198:	mov	r0, r3
   1119c:	str	r2, [sp, #12]
   111a0:	ldr	r2, [pc, #808]	; 114d0 <__assert_fail@plt+0x8a8>
   111a4:	str	r6, [sp, #8]
   111a8:	str	r2, [sp]
   111ac:	str	r6, [sp, #4]
   111b0:	mvn	r3, #0
   111b4:	mov	r2, #1
   111b8:	mov	r1, fp
   111bc:	bl	10c1c <__snprintf_chk@plt>
   111c0:	cmp	r4, #10
   111c4:	add	r5, r5, r6
   111c8:	beq	11224 <__assert_fail@plt+0x5fc>
   111cc:	mov	r0, r8
   111d0:	bl	10b68 <strlen@plt>
   111d4:	sub	r2, r5, r8
   111d8:	ldr	r3, [sl], #4
   111dc:	add	r4, r4, #1
   111e0:	add	r3, r3, r7
   111e4:	cmp	r2, r0
   111e8:	bcs	11194 <__assert_fail@plt+0x56c>
   111ec:	ldr	r2, [pc, #732]	; 114d0 <__assert_fail@plt+0x8a8>
   111f0:	str	r5, [sp, #12]
   111f4:	str	r2, [sp]
   111f8:	mov	r0, r3
   111fc:	str	r6, [sp, #8]
   11200:	str	r6, [sp, #4]
   11204:	mvn	r3, #0
   11208:	mov	r2, #1
   1120c:	mov	r1, fp
   11210:	str	r4, [r9, #1540]	; 0x604
   11214:	bl	10c1c <__snprintf_chk@plt>
   11218:	cmp	r4, #10
   1121c:	add	r5, r5, r6
   11220:	bne	111cc <__assert_fail@plt+0x5a4>
   11224:	ldr	r2, [sp, #28]
   11228:	ldr	r3, [r9]
   1122c:	add	r2, r2, #1
   11230:	cmp	r3, r2
   11234:	ldr	r3, [sp, #20]
   11238:	add	r7, r7, #1
   1123c:	add	r3, r3, #12
   11240:	str	r2, [sp, #28]
   11244:	add	r7, r7, r6
   11248:	str	r3, [sp, #20]
   1124c:	bhi	11138 <__assert_fail@plt+0x510>
   11250:	ldr	r3, [r9, #1540]	; 0x604
   11254:	cmp	r3, #0
   11258:	ble	112a8 <__assert_fail@plt+0x680>
   1125c:	ldr	r3, [pc, #576]	; 114a4 <__assert_fail@plt+0x87c>
   11260:	mov	lr, #1
   11264:	add	r0, r3, #12
   11268:	mov	ip, #32
   1126c:	cmp	r7, #0
   11270:	movgt	r3, #0
   11274:	ble	11294 <__assert_fail@plt+0x66c>
   11278:	ldr	r2, [r0]
   1127c:	ldrb	r1, [r2, r3]
   11280:	cmp	r1, #0
   11284:	strbeq	ip, [r2, r3]
   11288:	add	r3, r3, #1
   1128c:	cmp	r3, r7
   11290:	bne	11278 <__assert_fail@plt+0x650>
   11294:	ldr	r3, [r9, #1540]	; 0x604
   11298:	add	lr, lr, #1
   1129c:	cmp	lr, r3
   112a0:	add	r0, r0, #4
   112a4:	ble	1126c <__assert_fail@plt+0x644>
   112a8:	ldr	r3, [sp, #40]	; 0x28
   112ac:	ldr	sl, [pc, #528]	; 114c4 <__assert_fail@plt+0x89c>
   112b0:	cmp	r3, #0
   112b4:	movle	r3, #1
   112b8:	strle	r3, [sp, #40]	; 0x28
   112bc:	ldr	r7, [pc, #532]	; 114d8 <__assert_fail@plt+0x8b0>
   112c0:	ldr	r3, [sp, #24]
   112c4:	mov	r8, #0
   112c8:	clz	fp, r3
   112cc:	lsr	fp, fp, #5
   112d0:	sub	r3, r3, #1
   112d4:	str	r3, [sp, #20]
   112d8:	ldr	r0, [sp, #32]
   112dc:	bl	11b40 <__assert_fail@plt+0xf18>
   112e0:	ldr	r3, [sp, #16]
   112e4:	cmp	r3, #1
   112e8:	beq	11400 <__assert_fail@plt+0x7d8>
   112ec:	ldr	r3, [sp, #44]	; 0x2c
   112f0:	cmp	r3, #1
   112f4:	ble	113f0 <__assert_fail@plt+0x7c8>
   112f8:	ldr	r3, [pc, #476]	; 114dc <__assert_fail@plt+0x8b4>
   112fc:	umull	r2, r3, r3, r8
   11300:	lsr	r3, r3, #4
   11304:	add	r3, r3, r3, lsl #2
   11308:	cmp	r8, r3, lsl #2
   1130c:	bne	11350 <__assert_fail@plt+0x728>
   11310:	ldr	r3, [r9, #1540]	; 0x604
   11314:	ldr	r4, [sl]
   11318:	cmp	r3, #0
   1131c:	ble	11350 <__assert_fail@plt+0x728>
   11320:	ldr	r6, [pc, #420]	; 114cc <__assert_fail@plt+0x8a4>
   11324:	mov	r5, #0
   11328:	mov	r1, r4
   1132c:	ldr	r0, [r6], #4
   11330:	bl	10bf8 <fputs@plt>
   11334:	mov	r1, r4
   11338:	mov	r0, #10
   1133c:	bl	10bbc <fputc@plt>
   11340:	ldr	r3, [r9, #1540]	; 0x604
   11344:	add	r5, r5, #1
   11348:	cmp	r5, r3
   1134c:	blt	11328 <__assert_fail@plt+0x700>
   11350:	ldr	r3, [r9]
   11354:	ldr	r6, [sl]
   11358:	cmp	r3, #0
   1135c:	movne	r5, #0
   11360:	ldrne	r4, [pc, #312]	; 114a0 <__assert_fail@plt+0x878>
   11364:	beq	1139c <__assert_fail@plt+0x774>
   11368:	ldr	r1, [r4, #8]
   1136c:	ldr	r3, [r4, #12]
   11370:	mov	r2, r7
   11374:	ldr	r0, [r1, #52]	; 0x34
   11378:	mov	r1, #1
   1137c:	str	r0, [sp]
   11380:	mov	r0, r6
   11384:	bl	10b98 <__fprintf_chk@plt>
   11388:	ldr	r3, [r9]
   1138c:	add	r5, r5, #1
   11390:	cmp	r5, r3
   11394:	add	r4, r4, #12
   11398:	bcc	11368 <__assert_fail@plt+0x740>
   1139c:	mov	r1, r6
   113a0:	mov	r0, #10
   113a4:	bl	10bbc <fputc@plt>
   113a8:	ldr	r0, [sl]
   113ac:	bl	10a78 <fflush@plt>
   113b0:	ldr	r3, [sp, #20]
   113b4:	cmp	r8, r3
   113b8:	movcs	r3, fp
   113bc:	orrcc	r3, fp, #1
   113c0:	cmp	r3, #0
   113c4:	beq	113d0 <__assert_fail@plt+0x7a8>
   113c8:	ldr	r0, [sp, #40]	; 0x28
   113cc:	bl	10aa8 <sleep@plt>
   113d0:	ldr	r3, [sp, #24]
   113d4:	add	r8, r8, #1
   113d8:	cmp	r3, r8
   113dc:	movls	r3, fp
   113e0:	orrhi	r3, fp, #1
   113e4:	cmp	r3, #0
   113e8:	bne	112d8 <__assert_fail@plt+0x6b0>
   113ec:	b	1104c <__assert_fail@plt+0x424>
   113f0:	cmp	r8, #0
   113f4:	cmpeq	r3, #1
   113f8:	bne	11350 <__assert_fail@plt+0x728>
   113fc:	b	11310 <__assert_fail@plt+0x6e8>
   11400:	ldr	r0, [sl]
   11404:	bl	121ac <__assert_fail@plt+0x1584>
   11408:	str	r0, [sp, #48]	; 0x30
   1140c:	bl	12360 <__assert_fail@plt+0x1738>
   11410:	ldr	r3, [r9]
   11414:	cmp	r3, #0
   11418:	movne	r4, #0
   1141c:	ldrne	r5, [pc, #124]	; 114a0 <__assert_fail@plt+0x878>
   11420:	beq	1144c <__assert_fail@plt+0x824>
   11424:	ldr	r3, [r5, #8]
   11428:	ldr	r0, [sp, #48]	; 0x30
   1142c:	add	r1, r3, #8
   11430:	ldr	r2, [r3, #52]	; 0x34
   11434:	bl	125d0 <__assert_fail@plt+0x19a8>
   11438:	ldr	r3, [r9]
   1143c:	add	r4, r4, #1
   11440:	cmp	r3, r4
   11444:	add	r5, r5, #12
   11448:	bhi	11424 <__assert_fail@plt+0x7fc>
   1144c:	ldr	r0, [sp, #48]	; 0x30
   11450:	bl	12368 <__assert_fail@plt+0x1740>
   11454:	add	r0, sp, #48	; 0x30
   11458:	bl	121d4 <__assert_fail@plt+0x15ac>
   1145c:	b	113a8 <__assert_fail@plt+0x780>
   11460:	ldr	lr, [lr]
   11464:	b	1107c <__assert_fail@plt+0x454>
   11468:	ldr	r0, [r5]
   1146c:	mov	r1, #0
   11470:	bl	115d0 <__assert_fail@plt+0x9a8>
   11474:	ldr	r0, [r5]
   11478:	mov	r1, #1
   1147c:	bl	115d0 <__assert_fail@plt+0x9a8>
   11480:	bl	10ac0 <__stack_chk_fail@plt>
   11484:	andeq	r3, r2, r8, ror #29
   11488:	andeq	r2, r1, r4, ror #24
   1148c:	andeq	r2, r1, ip, ror #24
   11490:	strheq	r4, [r2], -ip
   11494:	andeq	r2, r1, r4, asr #25
   11498:	andeq	r4, r2, r8, ror r1
   1149c:	muleq	r1, r4, ip
   114a0:	andeq	r4, r2, r0, lsl #3
   114a4:	andeq	r4, r2, r0, lsl #15
   114a8:	muleq	r1, r0, ip
   114ac:	andeq	r4, r2, r0, ror r1
   114b0:	muleq	r1, r8, ip
   114b4:	ldrdeq	r2, [r1], -r8
   114b8:	andeq	r2, r1, r4, lsr #26
   114bc:	andeq	r2, r1, r8, ror ip
   114c0:	andeq	r2, r1, r0, lsl #25
   114c4:	andeq	r4, r2, r4, ror r1
   114c8:	andeq	r2, r1, r8, ror #25
   114cc:	andeq	r4, r2, r8, lsl #15
   114d0:	andeq	r2, r1, r8, lsr sp
   114d4:	andeq	r2, r1, r0, asr #25
   114d8:	andeq	r2, r1, r0, asr #26
   114dc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   114e0:	mov	fp, #0
   114e4:	mov	lr, #0
   114e8:	pop	{r1}		; (ldr r1, [sp], #4)
   114ec:	mov	r2, sp
   114f0:	push	{r2}		; (str r2, [sp, #-4]!)
   114f4:	push	{r0}		; (str r0, [sp, #-4]!)
   114f8:	ldr	ip, [pc, #16]	; 11510 <__assert_fail@plt+0x8e8>
   114fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11500:	ldr	r0, [pc, #12]	; 11514 <__assert_fail@plt+0x8ec>
   11504:	ldr	r3, [pc, #12]	; 11518 <__assert_fail@plt+0x8f0>
   11508:	bl	10b14 <__libc_start_main@plt>
   1150c:	bl	10c04 <abort@plt>
   11510:	andeq	r2, r1, r4, lsl #19
   11514:	andeq	r0, r1, r4, lsr ip
   11518:	andeq	r2, r1, r4, lsr #18
   1151c:	ldr	r3, [pc, #20]	; 11538 <__assert_fail@plt+0x910>
   11520:	ldr	r2, [pc, #20]	; 1153c <__assert_fail@plt+0x914>
   11524:	add	r3, pc, r3
   11528:	ldr	r2, [r3, r2]
   1152c:	cmp	r2, #0
   11530:	bxeq	lr
   11534:	b	10b2c <__gmon_start__@plt>
   11538:	ldrdeq	r2, [r1], -r4
   1153c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11540:	ldr	r0, [pc, #24]	; 11560 <__assert_fail@plt+0x938>
   11544:	ldr	r3, [pc, #24]	; 11564 <__assert_fail@plt+0x93c>
   11548:	cmp	r3, r0
   1154c:	bxeq	lr
   11550:	ldr	r3, [pc, #16]	; 11568 <__assert_fail@plt+0x940>
   11554:	cmp	r3, #0
   11558:	bxeq	lr
   1155c:	bx	r3
   11560:	andeq	r4, r2, ip, ror #2
   11564:	andeq	r4, r2, ip, ror #2
   11568:	andeq	r0, r0, r0
   1156c:	ldr	r0, [pc, #36]	; 11598 <__assert_fail@plt+0x970>
   11570:	ldr	r1, [pc, #36]	; 1159c <__assert_fail@plt+0x974>
   11574:	sub	r1, r1, r0
   11578:	asr	r1, r1, #2
   1157c:	add	r1, r1, r1, lsr #31
   11580:	asrs	r1, r1, #1
   11584:	bxeq	lr
   11588:	ldr	r3, [pc, #16]	; 115a0 <__assert_fail@plt+0x978>
   1158c:	cmp	r3, #0
   11590:	bxeq	lr
   11594:	bx	r3
   11598:	andeq	r4, r2, ip, ror #2
   1159c:	andeq	r4, r2, ip, ror #2
   115a0:	andeq	r0, r0, r0
   115a4:	push	{r4, lr}
   115a8:	ldr	r4, [pc, #24]	; 115c8 <__assert_fail@plt+0x9a0>
   115ac:	ldrb	r3, [r4]
   115b0:	cmp	r3, #0
   115b4:	popne	{r4, pc}
   115b8:	bl	11540 <__assert_fail@plt+0x918>
   115bc:	mov	r3, #1
   115c0:	strb	r3, [r4]
   115c4:	pop	{r4, pc}
   115c8:	andeq	r4, r2, ip, ror r1
   115cc:	b	1156c <__assert_fail@plt+0x944>
   115d0:	ldr	r4, [pc, #376]	; 11750 <__assert_fail@plt+0xb28>
   115d4:	push	{lr}		; (str lr, [sp, #-4]!)
   115d8:	sub	sp, sp, #12
   115dc:	ldr	r2, [pc, #368]	; 11754 <__assert_fail@plt+0xb2c>
   115e0:	mov	r3, r0
   115e4:	mov	r5, r1
   115e8:	str	r2, [sp]
   115ec:	mov	r1, #1
   115f0:	ldr	r2, [pc, #352]	; 11758 <__assert_fail@plt+0xb30>
   115f4:	ldr	r0, [r4]
   115f8:	bl	10b98 <__fprintf_chk@plt>
   115fc:	ldr	r3, [r4]
   11600:	mov	r2, #58	; 0x3a
   11604:	mov	r1, #1
   11608:	ldr	r0, [pc, #332]	; 1175c <__assert_fail@plt+0xb34>
   1160c:	bl	10ae4 <fwrite@plt>
   11610:	ldr	r3, [r4]
   11614:	mov	r2, #85	; 0x55
   11618:	mov	r1, #1
   1161c:	ldr	r0, [pc, #316]	; 11760 <__assert_fail@plt+0xb38>
   11620:	bl	10ae4 <fwrite@plt>
   11624:	ldr	r3, [r4]
   11628:	mov	r2, #12
   1162c:	mov	r1, #1
   11630:	ldr	r0, [pc, #300]	; 11764 <__assert_fail@plt+0xb3c>
   11634:	bl	10ae4 <fwrite@plt>
   11638:	ldr	r3, [r4]
   1163c:	mov	r2, #40	; 0x28
   11640:	mov	r1, #1
   11644:	ldr	r0, [pc, #284]	; 11768 <__assert_fail@plt+0xb40>
   11648:	bl	10ae4 <fwrite@plt>
   1164c:	ldr	r3, [r4]
   11650:	mov	r2, #54	; 0x36
   11654:	mov	r1, #1
   11658:	ldr	r0, [pc, #268]	; 1176c <__assert_fail@plt+0xb44>
   1165c:	bl	10ae4 <fwrite@plt>
   11660:	ldr	r3, [r4]
   11664:	mov	r2, #46	; 0x2e
   11668:	mov	r1, #1
   1166c:	ldr	r0, [pc, #252]	; 11770 <__assert_fail@plt+0xb48>
   11670:	bl	10ae4 <fwrite@plt>
   11674:	ldr	r3, [r4]
   11678:	mov	r2, #35	; 0x23
   1167c:	mov	r1, #1
   11680:	ldr	r0, [pc, #236]	; 11774 <__assert_fail@plt+0xb4c>
   11684:	bl	10ae4 <fwrite@plt>
   11688:	ldr	r3, [r4]
   1168c:	mov	r2, #41	; 0x29
   11690:	mov	r1, #1
   11694:	ldr	r0, [pc, #220]	; 11778 <__assert_fail@plt+0xb50>
   11698:	bl	10ae4 <fwrite@plt>
   1169c:	ldr	r3, [r4]
   116a0:	mov	r2, #30
   116a4:	mov	r1, #1
   116a8:	ldr	r0, [pc, #204]	; 1177c <__assert_fail@plt+0xb54>
   116ac:	bl	10ae4 <fwrite@plt>
   116b0:	ldr	r3, [r4]
   116b4:	mov	r2, #53	; 0x35
   116b8:	mov	r1, #1
   116bc:	ldr	r0, [pc, #188]	; 11780 <__assert_fail@plt+0xb58>
   116c0:	bl	10ae4 <fwrite@plt>
   116c4:	ldr	r3, [r4]
   116c8:	mov	r2, #49	; 0x31
   116cc:	mov	r1, #1
   116d0:	ldr	r0, [pc, #172]	; 11784 <__assert_fail@plt+0xb5c>
   116d4:	bl	10ae4 <fwrite@plt>
   116d8:	ldr	r3, [r4]
   116dc:	mov	r2, #45	; 0x2d
   116e0:	mov	r1, #1
   116e4:	ldr	r0, [pc, #156]	; 11788 <__assert_fail@plt+0xb60>
   116e8:	bl	10ae4 <fwrite@plt>
   116ec:	ldr	r3, [r4]
   116f0:	mov	r2, #14
   116f4:	mov	r1, #1
   116f8:	ldr	r0, [pc, #140]	; 1178c <__assert_fail@plt+0xb64>
   116fc:	bl	10ae4 <fwrite@plt>
   11700:	ldr	r3, [r4]
   11704:	mov	r2, #13
   11708:	mov	r1, #1
   1170c:	ldr	r0, [pc, #124]	; 11790 <__assert_fail@plt+0xb68>
   11710:	bl	10ae4 <fwrite@plt>
   11714:	ldr	r3, [r4]
   11718:	mov	r2, #34	; 0x22
   1171c:	mov	r1, #1
   11720:	ldr	r0, [pc, #108]	; 11794 <__assert_fail@plt+0xb6c>
   11724:	bl	10ae4 <fwrite@plt>
   11728:	ldr	r3, [r4]
   1172c:	mov	r2, #43	; 0x2b
   11730:	mov	r1, #1
   11734:	ldr	r0, [pc, #92]	; 11798 <__assert_fail@plt+0xb70>
   11738:	bl	10ae4 <fwrite@plt>
   1173c:	ldr	r1, [r4]
   11740:	mov	r0, #10
   11744:	bl	10bbc <fputc@plt>
   11748:	mov	r0, r5
   1174c:	bl	10b44 <exit@plt>
   11750:	andeq	r4, r2, r0, ror r1
   11754:	andeq	r2, r1, r4, lsr #19
   11758:	muleq	r1, r4, r9
   1175c:			; <UNDEFINED> instruction: 0x000129b0
   11760:	andeq	r2, r1, ip, ror #19
   11764:	andeq	r2, r1, r4, asr #20
   11768:	andeq	r2, r1, r4, asr sl
   1176c:	andeq	r2, r1, r0, lsl #21
   11770:			; <UNDEFINED> instruction: 0x00012ab8
   11774:	andeq	r2, r1, r8, ror #21
   11778:	andeq	r2, r1, ip, lsl #22
   1177c:	andeq	r2, r1, r8, lsr fp
   11780:	andeq	r2, r1, r8, asr fp
   11784:	muleq	r1, r0, fp
   11788:	andeq	r2, r1, r4, asr #23
   1178c:	strdeq	r2, [r1], -r4
   11790:	andeq	r2, r1, r4, lsl #24
   11794:	andeq	r2, r1, r4, lsl ip
   11798:	andeq	r2, r1, r8, lsr ip
   1179c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a0:	add	r6, r0, #4096	; 0x1000
   117a4:	ldr	fp, [pc, #336]	; 118fc <__assert_fail@plt+0xcd4>
   117a8:	sub	sp, sp, #1024	; 0x400
   117ac:	mov	r9, r0
   117b0:	ldr	r0, [r6, #288]	; 0x120
   117b4:	sub	sp, sp, #12
   117b8:	ldr	r3, [fp]
   117bc:	cmp	r0, #0
   117c0:	mov	r4, r1
   117c4:	str	r3, [sp, #1028]	; 0x404
   117c8:	beq	117f0 <__assert_fail@plt+0xbc8>
   117cc:	add	r2, r1, #1104	; 0x450
   117d0:	add	r2, r2, #4
   117d4:	mov	r3, #0
   117d8:	add	r2, r9, r2, lsl #2
   117dc:	mov	r1, r3
   117e0:	add	r3, r3, #1
   117e4:	cmp	r3, r0
   117e8:	str	r1, [r2], #56	; 0x38
   117ec:	bne	117e0 <__assert_fail@plt+0xbb8>
   117f0:	ldr	r0, [r6, #284]	; 0x11c
   117f4:	bl	10acc <rewind@plt>
   117f8:	ldr	r3, [r6, #280]	; 0x118
   117fc:	cmp	r3, #0
   11800:	beq	118d8 <__assert_fail@plt+0xcb0>
   11804:	add	r3, r4, #1104	; 0x450
   11808:	add	sl, r3, #4
   1180c:	add	r3, r3, #2
   11810:	add	sl, r9, sl, lsl #2
   11814:	add	r7, r9, r3, lsl #2
   11818:	mov	r8, #0
   1181c:	ldr	r0, [r6, #284]	; 0x11c
   11820:	bl	10b50 <feof@plt>
   11824:	subs	r4, r0, #0
   11828:	bne	118b8 <__assert_fail@plt+0xc90>
   1182c:	add	r0, sp, #4
   11830:	ldr	r2, [r6, #284]	; 0x11c
   11834:	ldr	r1, [pc, #196]	; 11900 <__assert_fail@plt+0xcd8>
   11838:	bl	10a90 <fgets@plt>
   1183c:	cmp	r0, #0
   11840:	beq	118b8 <__assert_fail@plt+0xc90>
   11844:	add	r0, r9, #4352	; 0x1100
   11848:	add	r3, sp, #4
   1184c:	add	r0, r0, #8
   11850:	mov	r1, r4
   11854:	str	r3, [sp]
   11858:	bl	10af0 <gettimeofday@plt>
   1185c:	ldr	r3, [r6, #288]	; 0x120
   11860:	add	r8, r8, #1
   11864:	cmp	r3, #0
   11868:	beq	1181c <__assert_fail@plt+0xbf4>
   1186c:	mov	r5, sl
   11870:	mov	r2, #16
   11874:	mov	r1, sp
   11878:	ldr	r0, [sp]
   1187c:	bl	10b5c <strtoul@plt>
   11880:	cmp	r4, #0
   11884:	add	r4, r4, #1
   11888:	ldrne	r3, [r5]
   1188c:	add	r5, r5, #56	; 0x38
   11890:	addne	r3, r3, r0
   11894:	strne	r3, [r5, #-56]	; 0xffffffc8
   11898:	ldr	r3, [r6, #288]	; 0x120
   1189c:	streq	r0, [r7, #8]
   118a0:	cmp	r3, r4
   118a4:	bhi	11870 <__assert_fail@plt+0xc48>
   118a8:	ldr	r0, [r6, #284]	; 0x11c
   118ac:	bl	10b50 <feof@plt>
   118b0:	subs	r4, r0, #0
   118b4:	beq	1182c <__assert_fail@plt+0xc04>
   118b8:	ldr	r2, [sp, #1028]	; 0x404
   118bc:	ldr	r3, [fp]
   118c0:	mov	r0, r8
   118c4:	cmp	r2, r3
   118c8:	bne	118f8 <__assert_fail@plt+0xcd0>
   118cc:	add	sp, sp, #1024	; 0x400
   118d0:	add	sp, sp, #12
   118d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118d8:	ldr	r2, [r6, #284]	; 0x11c
   118dc:	ldr	r1, [pc, #28]	; 11900 <__assert_fail@plt+0xcd8>
   118e0:	add	r0, sp, #4
   118e4:	bl	10a90 <fgets@plt>
   118e8:	cmp	r0, #0
   118ec:	bne	11804 <__assert_fail@plt+0xbdc>
   118f0:	mvn	r8, #0
   118f4:	b	118b8 <__assert_fail@plt+0xc90>
   118f8:	bl	10ac0 <__stack_chk_fail@plt>
   118fc:	andeq	r3, r2, r8, ror #29
   11900:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11904:	push	{r4, r5, r6, r7, r8, lr}
   11908:	mov	r6, r0
   1190c:	mov	r0, r1
   11910:	ldr	r1, [pc, #92]	; 11974 <__assert_fail@plt+0xd4c>
   11914:	add	r4, r6, #4352	; 0x1100
   11918:	mov	r7, r1
   1191c:	bl	10ba4 <strtok@plt>
   11920:	add	r4, r4, #44	; 0x2c
   11924:	mov	r5, #0
   11928:	mov	r1, r0
   1192c:	b	11938 <__assert_fail@plt+0xd10>
   11930:	cmp	r5, #32
   11934:	beq	1196c <__assert_fail@plt+0xd44>
   11938:	str	r6, [r4, #-8]
   1193c:	mov	r2, #32
   11940:	mov	r0, r4
   11944:	bl	10b8c <strncpy@plt>
   11948:	mov	r1, r7
   1194c:	mov	r0, #0
   11950:	bl	10ba4 <strtok@plt>
   11954:	add	r5, r5, #1
   11958:	add	r4, r4, #56	; 0x38
   1195c:	subs	r1, r0, #0
   11960:	bne	11930 <__assert_fail@plt+0xd08>
   11964:	add	r6, r6, #4096	; 0x1000
   11968:	str	r5, [r6, #288]	; 0x120
   1196c:	mov	r0, #0
   11970:	pop	{r4, r5, r6, r7, r8, pc}
   11974:	andeq	r2, r1, r4, lsr #27
   11978:	push	{r4, r5, r6, lr}
   1197c:	add	r5, r0, #4096	; 0x1000
   11980:	ldr	r4, [pc, #100]	; 119ec <__assert_fail@plt+0xdc4>
   11984:	sub	sp, sp, #1024	; 0x400
   11988:	sub	sp, sp, #8
   1198c:	ldr	r3, [r4]
   11990:	mov	r6, r0
   11994:	ldr	r0, [r5, #284]	; 0x11c
   11998:	str	r3, [sp, #1028]	; 0x404
   1199c:	bl	10acc <rewind@plt>
   119a0:	ldr	r2, [r5, #284]	; 0x11c
   119a4:	add	r0, sp, #4
   119a8:	ldr	r1, [pc, #64]	; 119f0 <__assert_fail@plt+0xdc8>
   119ac:	bl	10a90 <fgets@plt>
   119b0:	cmp	r0, #0
   119b4:	beq	119e0 <__assert_fail@plt+0xdb8>
   119b8:	add	r1, sp, #4
   119bc:	mov	r0, r6
   119c0:	bl	11904 <__assert_fail@plt+0xcdc>
   119c4:	ldr	r2, [sp, #1028]	; 0x404
   119c8:	ldr	r3, [r4]
   119cc:	cmp	r2, r3
   119d0:	bne	119e8 <__assert_fail@plt+0xdc0>
   119d4:	add	sp, sp, #1024	; 0x400
   119d8:	add	sp, sp, #8
   119dc:	pop	{r4, r5, r6, pc}
   119e0:	mvn	r0, #0
   119e4:	b	119c4 <__assert_fail@plt+0xd9c>
   119e8:	bl	10ac0 <__stack_chk_fail@plt>
   119ec:	andeq	r3, r2, r8, ror #29
   119f0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   119f4:	push	{r4, r5, lr}
   119f8:	sub	sp, sp, #1024	; 0x400
   119fc:	ldr	r4, [pc, #80]	; 11a54 <__assert_fail@plt+0xe2c>
   11a00:	sub	sp, sp, #12
   11a04:	ldr	r2, [pc, #76]	; 11a58 <__assert_fail@plt+0xe30>
   11a08:	ldr	r3, [r4]
   11a0c:	mov	r5, r0
   11a10:	ldr	r1, [pc, #68]	; 11a5c <__assert_fail@plt+0xe34>
   11a14:	add	r0, sp, #4
   11a18:	str	r3, [sp, #1028]	; 0x404
   11a1c:	bl	10b8c <strncpy@plt>
   11a20:	mov	r3, #0
   11a24:	add	r1, sp, #4
   11a28:	mov	r0, r5
   11a2c:	strb	r3, [sp, #1027]	; 0x403
   11a30:	bl	11904 <__assert_fail@plt+0xcdc>
   11a34:	ldr	r2, [sp, #1028]	; 0x404
   11a38:	ldr	r3, [r4]
   11a3c:	cmp	r2, r3
   11a40:	bne	11a50 <__assert_fail@plt+0xe28>
   11a44:	add	sp, sp, #1024	; 0x400
   11a48:	add	sp, sp, #12
   11a4c:	pop	{r4, r5, pc}
   11a50:	bl	10ac0 <__stack_chk_fail@plt>
   11a54:	andeq	r3, r2, r8, ror #29
   11a58:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11a5c:	andeq	r2, r1, r8, lsr #27
   11a60:	push	{r4, r5, r6, r7, r8, lr}
   11a64:	mov	r8, r0
   11a68:	sub	sp, sp, #16
   11a6c:	mov	r6, r1
   11a70:	mov	r0, #1
   11a74:	ldr	r1, [pc, #168]	; 11b24 <__assert_fail@plt+0xefc>
   11a78:	bl	10a54 <calloc@plt>
   11a7c:	subs	r4, r0, #0
   11a80:	beq	11af0 <__assert_fail@plt+0xec8>
   11a84:	add	r5, r4, #4096	; 0x1000
   11a88:	mov	r3, r6
   11a8c:	ldr	r2, [pc, #148]	; 11b28 <__assert_fail@plt+0xf00>
   11a90:	mov	r1, #256	; 0x100
   11a94:	add	r0, r5, #5
   11a98:	bl	10b80 <snprintf@plt>
   11a9c:	ldr	r2, [pc, #136]	; 11b2c <__assert_fail@plt+0xf04>
   11aa0:	ldr	r3, [pc, #136]	; 11b30 <__assert_fail@plt+0xf08>
   11aa4:	add	r7, r4, #4
   11aa8:	mov	r1, r3
   11aac:	str	r6, [sp, #8]
   11ab0:	stm	sp, {r2, r8}
   11ab4:	mov	r0, r7
   11ab8:	mov	r2, #1
   11abc:	bl	10c1c <__snprintf_chk@plt>
   11ac0:	mov	r3, #1
   11ac4:	str	r3, [r5, #272]	; 0x110
   11ac8:	mov	r0, r7
   11acc:	ldr	r1, [pc, #96]	; 11b34 <__assert_fail@plt+0xf0c>
   11ad0:	bl	10bec <fopen64@plt>
   11ad4:	cmp	r0, #0
   11ad8:	mov	r6, r0
   11adc:	str	r0, [r5, #284]	; 0x11c
   11ae0:	beq	11b0c <__assert_fail@plt+0xee4>
   11ae4:	mov	r0, r4
   11ae8:	add	sp, sp, #16
   11aec:	pop	{r4, r5, r6, r7, r8, pc}
   11af0:	ldr	r3, [pc, #64]	; 11b38 <__assert_fail@plt+0xf10>
   11af4:	mov	r2, #14
   11af8:	mov	r1, #1
   11afc:	ldr	r3, [r3]
   11b00:	ldr	r0, [pc, #52]	; 11b3c <__assert_fail@plt+0xf14>
   11b04:	bl	10ae4 <fwrite@plt>
   11b08:	b	11ae4 <__assert_fail@plt+0xebc>
   11b0c:	mov	r0, r7
   11b10:	bl	10ad8 <perror@plt>
   11b14:	mov	r0, r4
   11b18:	bl	10a84 <free@plt>
   11b1c:	mov	r4, r6
   11b20:	b	11ae4 <__assert_fail@plt+0xebc>
   11b24:	andeq	r1, r0, r4, lsr #16
   11b28:	andeq	r2, r1, ip, ror lr
   11b2c:	andeq	r2, r1, r0, lsl #29
   11b30:	andeq	r1, r0, r1
   11b34:	andeq	r2, r1, r8, lsl #29
   11b38:	andeq	r4, r2, r0, ror r1
   11b3c:	andeq	r2, r1, ip, ror #28
   11b40:	push	{r4, r5, r6, r7, r8, r9, lr}
   11b44:	sub	sp, sp, #20
   11b48:	ldr	r9, [pc, #244]	; 11c44 <__assert_fail@plt+0x101c>
   11b4c:	mov	r7, r0
   11b50:	mov	r1, #0
   11b54:	ldr	r3, [r9]
   11b58:	add	r0, sp, #4
   11b5c:	str	r3, [sp, #12]
   11b60:	bl	10af0 <gettimeofday@plt>
   11b64:	cmp	r7, #0
   11b68:	bne	11b80 <__assert_fail@plt+0xf58>
   11b6c:	b	11c08 <__assert_fail@plt+0xfe0>
   11b70:	beq	11c24 <__assert_fail@plt+0xffc>
   11b74:	ldr	r7, [r7]
   11b78:	cmp	r7, #0
   11b7c:	beq	11c08 <__assert_fail@plt+0xfe0>
   11b80:	add	r6, r7, #4096	; 0x1000
   11b84:	ldr	r2, [sp, #4]
   11b88:	ldr	r3, [r6, #264]	; 0x108
   11b8c:	ldr	r1, [r6, #272]	; 0x110
   11b90:	add	r3, r3, r1
   11b94:	cmp	r2, r3
   11b98:	ble	11b70 <__assert_fail@plt+0xf48>
   11b9c:	mov	r1, #1
   11ba0:	mov	r0, r7
   11ba4:	bl	1179c <__assert_fail@plt+0xb74>
   11ba8:	ldr	r8, [r6, #288]	; 0x120
   11bac:	add	r4, r7, #4352	; 0x1100
   11bb0:	cmp	r8, #0
   11bb4:	add	r4, r4, #36	; 0x24
   11bb8:	movne	r5, #0
   11bbc:	beq	11bf0 <__assert_fail@plt+0xfc8>
   11bc0:	cmp	r5, #0
   11bc4:	ldr	r0, [r4, #48]	; 0x30
   11bc8:	beq	11bdc <__assert_fail@plt+0xfb4>
   11bcc:	ldr	r3, [r4, #44]	; 0x2c
   11bd0:	ldr	r1, [r6, #272]	; 0x110
   11bd4:	sub	r0, r0, r3
   11bd8:	bl	12708 <__assert_fail@plt+0x1ae0>
   11bdc:	add	r5, r5, #1
   11be0:	cmp	r5, r8
   11be4:	str	r0, [r4, #52]	; 0x34
   11be8:	add	r4, r4, #56	; 0x38
   11bec:	bne	11bc0 <__assert_fail@plt+0xf98>
   11bf0:	mov	r0, r7
   11bf4:	mov	r1, #0
   11bf8:	bl	1179c <__assert_fail@plt+0xb74>
   11bfc:	ldr	r7, [r7]
   11c00:	cmp	r7, #0
   11c04:	bne	11b80 <__assert_fail@plt+0xf58>
   11c08:	ldr	r2, [sp, #12]
   11c0c:	ldr	r3, [r9]
   11c10:	mov	r0, #0
   11c14:	cmp	r2, r3
   11c18:	bne	11c40 <__assert_fail@plt+0x1018>
   11c1c:	add	sp, sp, #20
   11c20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c24:	ldr	r3, [r6, #268]	; 0x10c
   11c28:	ldr	r1, [r6, #276]	; 0x114
   11c2c:	ldr	r2, [sp, #8]
   11c30:	add	r3, r3, r1
   11c34:	cmp	r2, r3
   11c38:	ble	11b74 <__assert_fail@plt+0xf4c>
   11c3c:	b	11b9c <__assert_fail@plt+0xf74>
   11c40:	bl	10ac0 <__stack_chk_fail@plt>
   11c44:	andeq	r3, r2, r8, ror #29
   11c48:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c4c:	cmp	r0, #0
   11c50:	ldr	r9, [pc, #396]	; 11de4 <__assert_fail@plt+0x11bc>
   11c54:	movne	r9, r0
   11c58:	mov	r0, r9
   11c5c:	mov	r6, r1
   11c60:	mov	sl, r2
   11c64:	bl	10afc <opendir@plt>
   11c68:	subs	r7, r0, #0
   11c6c:	movne	r8, #0
   11c70:	beq	11d2c <__assert_fail@plt+0x1104>
   11c74:	mov	r0, r7
   11c78:	bl	10bd4 <readdir64@plt>
   11c7c:	cmp	r0, #0
   11c80:	beq	11cd4 <__assert_fail@plt+0x10ac>
   11c84:	ldrb	r3, [r0, #18]
   11c88:	cmp	r3, #8
   11c8c:	bne	11c74 <__assert_fail@plt+0x104c>
   11c90:	cmp	r6, #0
   11c94:	add	r5, r0, #19
   11c98:	bne	11ce4 <__assert_fail@plt+0x10bc>
   11c9c:	mov	r1, r5
   11ca0:	mov	r0, r9
   11ca4:	bl	11a60 <__assert_fail@plt+0xe38>
   11ca8:	subs	r4, r0, #0
   11cac:	beq	11d18 <__assert_fail@plt+0x10f0>
   11cb0:	bl	11978 <__assert_fail@plt+0xd50>
   11cb4:	cmp	r0, #0
   11cb8:	blt	11d18 <__assert_fail@plt+0x10f0>
   11cbc:	str	r8, [r4]
   11cc0:	mov	r0, r7
   11cc4:	bl	10bd4 <readdir64@plt>
   11cc8:	mov	r8, r4
   11ccc:	cmp	r0, #0
   11cd0:	bne	11c84 <__assert_fail@plt+0x105c>
   11cd4:	mov	r0, r7
   11cd8:	bl	10c10 <closedir@plt>
   11cdc:	mov	r0, r8
   11ce0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ce4:	ble	11c74 <__assert_fail@plt+0x104c>
   11ce8:	sub	fp, sl, #4
   11cec:	mov	r4, #0
   11cf0:	b	11cfc <__assert_fail@plt+0x10d4>
   11cf4:	cmp	r6, r4
   11cf8:	beq	11c74 <__assert_fail@plt+0x104c>
   11cfc:	mov	r1, r5
   11d00:	ldr	r0, [fp, #4]!
   11d04:	bl	10a6c <strcmp@plt>
   11d08:	add	r4, r4, #1
   11d0c:	cmp	r0, #0
   11d10:	bne	11cf4 <__assert_fail@plt+0x10cc>
   11d14:	b	11c9c <__assert_fail@plt+0x1074>
   11d18:	mov	r0, r7
   11d1c:	bl	10c10 <closedir@plt>
   11d20:	mov	r8, #0
   11d24:	mov	r0, r8
   11d28:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d2c:	ldr	r4, [pc, #180]	; 11de8 <__assert_fail@plt+0x11c0>
   11d30:	mov	r2, #41	; 0x29
   11d34:	mov	r1, #1
   11d38:	ldr	r3, [r4]
   11d3c:	ldr	r0, [pc, #168]	; 11dec <__assert_fail@plt+0x11c4>
   11d40:	bl	10ae4 <fwrite@plt>
   11d44:	cmp	r6, #1
   11d48:	bgt	11d70 <__assert_fail@plt+0x1148>
   11d4c:	cmp	r6, #0
   11d50:	beq	11d84 <__assert_fail@plt+0x115c>
   11d54:	cmp	r6, #1
   11d58:	bne	11d70 <__assert_fail@plt+0x1148>
   11d5c:	ldr	r0, [sl]
   11d60:	ldr	r1, [pc, #136]	; 11df0 <__assert_fail@plt+0x11c8>
   11d64:	bl	10a6c <strcmp@plt>
   11d68:	cmp	r0, #0
   11d6c:	beq	11d84 <__assert_fail@plt+0x115c>
   11d70:	ldr	r1, [r4]
   11d74:	mov	r0, #10
   11d78:	bl	10bbc <fputc@plt>
   11d7c:	mov	r8, #0
   11d80:	b	11cdc <__assert_fail@plt+0x10b4>
   11d84:	ldr	r3, [r4]
   11d88:	mov	r2, #38	; 0x26
   11d8c:	mov	r1, #1
   11d90:	ldr	r0, [pc, #92]	; 11df4 <__assert_fail@plt+0x11cc>
   11d94:	bl	10ae4 <fwrite@plt>
   11d98:	ldr	r1, [pc, #88]	; 11df8 <__assert_fail@plt+0x11d0>
   11d9c:	ldr	r0, [pc, #88]	; 11dfc <__assert_fail@plt+0x11d4>
   11da0:	bl	11a60 <__assert_fail@plt+0xe38>
   11da4:	subs	r8, r0, #0
   11da8:	beq	11d20 <__assert_fail@plt+0x10f8>
   11dac:	add	r0, r8, #4096	; 0x1000
   11db0:	mov	r3, #1
   11db4:	str	r3, [r0, #280]	; 0x118
   11db8:	mov	r2, #256	; 0x100
   11dbc:	ldr	r1, [pc, #44]	; 11df0 <__assert_fail@plt+0x11c8>
   11dc0:	add	r0, r0, #5
   11dc4:	bl	10b8c <strncpy@plt>
   11dc8:	mov	r0, r8
   11dcc:	bl	119f4 <__assert_fail@plt+0xdcc>
   11dd0:	cmp	r0, #0
   11dd4:	blt	11d20 <__assert_fail@plt+0x10f8>
   11dd8:	mov	r3, #0
   11ddc:	str	r3, [r8]
   11de0:	b	11cdc <__assert_fail@plt+0x10b4>
   11de4:	ldrdeq	r2, [r1], -r8
   11de8:	andeq	r4, r2, r0, ror r1
   11dec:	andeq	r2, r1, ip, lsl #29
   11df0:	andeq	r2, r1, ip, ror #24
   11df4:			; <UNDEFINED> instruction: 0x00012eb8
   11df8:	andeq	r2, r1, r0, ror #29
   11dfc:	strdeq	r2, [r1], -r0
   11e00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e04:	subs	r9, r1, #0
   11e08:	sub	sp, sp, #8
   11e0c:	beq	11e84 <__assert_fail@plt+0x125c>
   11e10:	ldr	sl, [pc, #120]	; 11e90 <__assert_fail@plt+0x1268>
   11e14:	ldr	r8, [pc, #120]	; 11e94 <__assert_fail@plt+0x126c>
   11e18:	mov	r7, r0
   11e1c:	add	r6, r9, #4096	; 0x1000
   11e20:	add	r3, r9, #4
   11e24:	mov	r2, sl
   11e28:	mov	r1, #1
   11e2c:	mov	r0, r7
   11e30:	bl	10b98 <__fprintf_chk@plt>
   11e34:	ldr	r3, [r6, #288]	; 0x120
   11e38:	cmp	r3, #0
   11e3c:	beq	11e78 <__assert_fail@plt+0x1250>
   11e40:	add	r5, r9, #4352	; 0x1100
   11e44:	add	r5, r5, #44	; 0x2c
   11e48:	mov	r4, #0
   11e4c:	add	r4, r4, #1
   11e50:	str	r5, [sp]
   11e54:	mov	r3, r4
   11e58:	mov	r2, r8
   11e5c:	mov	r1, #1
   11e60:	mov	r0, r7
   11e64:	bl	10b98 <__fprintf_chk@plt>
   11e68:	ldr	r3, [r6, #288]	; 0x120
   11e6c:	add	r5, r5, #56	; 0x38
   11e70:	cmp	r3, r4
   11e74:	bhi	11e4c <__assert_fail@plt+0x1224>
   11e78:	ldr	r9, [r9]
   11e7c:	cmp	r9, #0
   11e80:	bne	11e1c <__assert_fail@plt+0x11f4>
   11e84:	mov	r0, #0
   11e88:	add	sp, sp, #8
   11e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e90:	strdeq	r2, [r1], -ip
   11e94:	andeq	r2, r1, r4, lsl #30
   11e98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e9c:	mov	r7, r1
   11ea0:	mov	r9, r0
   11ea4:	mov	r1, #58	; 0x3a
   11ea8:	mov	r0, r7
   11eac:	bl	10b74 <strchr@plt>
   11eb0:	subs	sl, r0, #0
   11eb4:	beq	11ecc <__assert_fail@plt+0x12a4>
   11eb8:	sub	r1, sl, r7
   11ebc:	mov	r0, r7
   11ec0:	bl	10a9c <strndup@plt>
   11ec4:	add	r7, sl, #1
   11ec8:	mov	sl, r0
   11ecc:	cmp	r9, #0
   11ed0:	beq	11f00 <__assert_fail@plt+0x12d8>
   11ed4:	cmp	sl, #0
   11ed8:	add	r4, r9, #4096	; 0x1000
   11edc:	beq	11f10 <__assert_fail@plt+0x12e8>
   11ee0:	add	r1, r4, #5
   11ee4:	mov	r0, sl
   11ee8:	bl	10a6c <strcmp@plt>
   11eec:	cmp	r0, #0
   11ef0:	beq	11f10 <__assert_fail@plt+0x12e8>
   11ef4:	ldr	r9, [r9]
   11ef8:	cmp	r9, #0
   11efc:	bne	11ed4 <__assert_fail@plt+0x12ac>
   11f00:	mov	r0, sl
   11f04:	bl	10a84 <free@plt>
   11f08:	mov	r0, r9
   11f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f10:	ldr	r8, [r4, #288]	; 0x120
   11f14:	cmp	r8, #0
   11f18:	beq	11ef4 <__assert_fail@plt+0x12cc>
   11f1c:	mov	r4, #0
   11f20:	add	r6, r9, #4352	; 0x1100
   11f24:	mov	r5, r4
   11f28:	add	r6, r6, #44	; 0x2c
   11f2c:	b	11f3c <__assert_fail@plt+0x1314>
   11f30:	cmp	r5, r8
   11f34:	add	r4, r4, #56	; 0x38
   11f38:	beq	11ef4 <__assert_fail@plt+0x12cc>
   11f3c:	add	r1, r6, r4
   11f40:	mov	r0, r7
   11f44:	bl	10a6c <strcmp@plt>
   11f48:	add	r5, r5, #1
   11f4c:	cmp	r0, #0
   11f50:	bne	11f30 <__assert_fail@plt+0x1308>
   11f54:	add	r4, r4, #4352	; 0x1100
   11f58:	add	r4, r4, #36	; 0x24
   11f5c:	add	r9, r9, r4
   11f60:	b	11f00 <__assert_fail@plt+0x12d8>
   11f64:	push	{r4, r5, r6, lr}
   11f68:	mov	r4, r0
   11f6c:	ldrb	r0, [r0, #9]
   11f70:	mov	r5, r1
   11f74:	ldr	r1, [r4]
   11f78:	cmp	r0, #0
   11f7c:	bne	11fa8 <__assert_fail@plt+0x1380>
   11f80:	mov	r3, #44	; 0x2c
   11f84:	strb	r3, [r4, #9]
   11f88:	mov	r0, r5
   11f8c:	bl	10be0 <putc@plt>
   11f90:	ldr	r3, [r4, #4]
   11f94:	mov	r2, #0
   11f98:	add	r3, r3, #1
   11f9c:	str	r3, [r4, #4]
   11fa0:	strb	r2, [r4, #9]
   11fa4:	pop	{r4, r5, r6, pc}
   11fa8:	bl	10be0 <putc@plt>
   11fac:	ldr	r1, [r4]
   11fb0:	b	11f80 <__assert_fail@plt+0x1358>
   11fb4:	push	{r4, r5, r6, lr}
   11fb8:	mov	r5, r0
   11fbc:	mov	r0, #10
   11fc0:	ldr	r1, [r5]
   11fc4:	bl	10be0 <putc@plt>
   11fc8:	ldr	r3, [r5, #4]
   11fcc:	cmp	r3, #0
   11fd0:	popeq	{r4, r5, r6, pc}
   11fd4:	ldr	r6, [pc, #44]	; 12008 <__assert_fail@plt+0x13e0>
   11fd8:	mov	r4, #0
   11fdc:	add	r6, pc, r6
   11fe0:	ldr	r3, [r5]
   11fe4:	mov	r2, #4
   11fe8:	mov	r1, #1
   11fec:	mov	r0, r6
   11ff0:	bl	10ae4 <fwrite@plt>
   11ff4:	ldr	r3, [r5, #4]
   11ff8:	add	r4, r4, #1
   11ffc:	cmp	r4, r3
   12000:	bcc	11fe0 <__assert_fail@plt+0x13b8>
   12004:	pop	{r4, r5, r6, pc}
   12008:	andeq	r0, r0, r8, asr #30
   1200c:	ldr	r3, [pc, #28]	; 12030 <__assert_fail@plt+0x1408>
   12010:	ldr	r1, [pc, #28]	; 12034 <__assert_fail@plt+0x140c>
   12014:	ldr	r0, [pc, #28]	; 12038 <__assert_fail@plt+0x1410>
   12018:	push	{r4, lr}
   1201c:	add	r3, pc, r3
   12020:	mov	r2, #133	; 0x85
   12024:	add	r1, pc, r1
   12028:	add	r0, pc, r0
   1202c:	bl	10c28 <__assert_fail@plt>
   12030:	andeq	r0, r0, ip, ror #29
   12034:	andeq	r0, r0, r8, lsl #30
   12038:	andeq	r0, r0, r4, lsl pc
   1203c:	push	{r4, r5, r6, r7, r8, lr}
   12040:	mov	r5, r0
   12044:	mov	r4, r1
   12048:	mov	r0, #34	; 0x22
   1204c:	ldr	r1, [r5]
   12050:	bl	10be0 <putc@plt>
   12054:	ldrb	r0, [r4]
   12058:	cmp	r0, #0
   1205c:	beq	120e4 <__assert_fail@plt+0x14bc>
   12060:	ldr	r8, [pc, #296]	; 12190 <__assert_fail@plt+0x1568>
   12064:	ldr	r6, [pc, #296]	; 12194 <__assert_fail@plt+0x156c>
   12068:	ldr	r7, [pc, #296]	; 12198 <__assert_fail@plt+0x1570>
   1206c:	add	r8, pc, r8
   12070:	add	r6, pc, r6
   12074:	add	r7, pc, r7
   12078:	b	120a0 <__assert_fail@plt+0x1478>
   1207c:	cmp	r0, #92	; 0x5c
   12080:	bne	1212c <__assert_fail@plt+0x1504>
   12084:	mov	r2, #2
   12088:	mov	r1, #1
   1208c:	mov	r0, r6
   12090:	bl	10ae4 <fwrite@plt>
   12094:	ldrb	r0, [r4, #1]!
   12098:	cmp	r0, #0
   1209c:	beq	120e4 <__assert_fail@plt+0x14bc>
   120a0:	cmp	r0, #12
   120a4:	ldr	r3, [r5]
   120a8:	beq	1217c <__assert_fail@plt+0x1554>
   120ac:	bls	12114 <__assert_fail@plt+0x14ec>
   120b0:	cmp	r0, #34	; 0x22
   120b4:	beq	12168 <__assert_fail@plt+0x1540>
   120b8:	bls	120f4 <__assert_fail@plt+0x14cc>
   120bc:	cmp	r0, #39	; 0x27
   120c0:	bne	1207c <__assert_fail@plt+0x1454>
   120c4:	ldr	r0, [pc, #208]	; 1219c <__assert_fail@plt+0x1574>
   120c8:	mov	r2, #2
   120cc:	mov	r1, #1
   120d0:	add	r0, pc, r0
   120d4:	bl	10ae4 <fwrite@plt>
   120d8:	ldrb	r0, [r4, #1]!
   120dc:	cmp	r0, #0
   120e0:	bne	120a0 <__assert_fail@plt+0x1478>
   120e4:	ldr	r1, [r5]
   120e8:	mov	r0, #34	; 0x22
   120ec:	pop	{r4, r5, r6, r7, r8, lr}
   120f0:	b	10be0 <putc@plt>
   120f4:	cmp	r0, #13
   120f8:	bne	1212c <__assert_fail@plt+0x1504>
   120fc:	ldr	r0, [pc, #156]	; 121a0 <__assert_fail@plt+0x1578>
   12100:	mov	r2, #2
   12104:	mov	r1, #1
   12108:	add	r0, pc, r0
   1210c:	bl	10ae4 <fwrite@plt>
   12110:	b	12094 <__assert_fail@plt+0x146c>
   12114:	cmp	r0, #9
   12118:	beq	12150 <__assert_fail@plt+0x1528>
   1211c:	cmp	r0, #10
   12120:	beq	12084 <__assert_fail@plt+0x145c>
   12124:	cmp	r0, #8
   12128:	beq	12138 <__assert_fail@plt+0x1510>
   1212c:	mov	r1, r3
   12130:	bl	10be0 <putc@plt>
   12134:	b	12094 <__assert_fail@plt+0x146c>
   12138:	ldr	r0, [pc, #100]	; 121a4 <__assert_fail@plt+0x157c>
   1213c:	mov	r2, #2
   12140:	mov	r1, #1
   12144:	add	r0, pc, r0
   12148:	bl	10ae4 <fwrite@plt>
   1214c:	b	12094 <__assert_fail@plt+0x146c>
   12150:	ldr	r0, [pc, #80]	; 121a8 <__assert_fail@plt+0x1580>
   12154:	mov	r2, #2
   12158:	mov	r1, #1
   1215c:	add	r0, pc, r0
   12160:	bl	10ae4 <fwrite@plt>
   12164:	b	12094 <__assert_fail@plt+0x146c>
   12168:	mov	r2, #2
   1216c:	mov	r1, #1
   12170:	mov	r0, r7
   12174:	bl	10ae4 <fwrite@plt>
   12178:	b	12094 <__assert_fail@plt+0x146c>
   1217c:	mov	r2, #2
   12180:	mov	r1, #1
   12184:	mov	r0, r8
   12188:	bl	10ae4 <fwrite@plt>
   1218c:	b	12094 <__assert_fail@plt+0x146c>
   12190:	andeq	r0, r0, r8, ror #29
   12194:	andeq	r0, r0, ip, ror #29
   12198:	andeq	r0, r0, ip, ror #29
   1219c:	muleq	r0, r4, lr
   121a0:	andeq	r0, r0, r8, asr #28
   121a4:	andeq	r0, r0, r4, lsl lr
   121a8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   121ac:	push	{r4, lr}
   121b0:	mov	r4, r0
   121b4:	mov	r0, #12
   121b8:	bl	10b08 <malloc@plt>
   121bc:	cmp	r0, #0
   121c0:	movne	r3, #0
   121c4:	strne	r4, [r0]
   121c8:	strne	r3, [r0, #4]
   121cc:	strhne	r3, [r0, #8]
   121d0:	pop	{r4, pc}
   121d4:	push	{r4, r5, r6, lr}
   121d8:	ldr	r4, [r0]
   121dc:	ldr	r6, [r4, #4]
   121e0:	cmp	r6, #0
   121e4:	bne	12210 <__assert_fail@plt+0x15e8>
   121e8:	ldr	r1, [r4]
   121ec:	mov	r5, r0
   121f0:	mov	r0, #10
   121f4:	bl	10bbc <fputc@plt>
   121f8:	ldr	r0, [r4]
   121fc:	bl	10a78 <fflush@plt>
   12200:	mov	r0, r4
   12204:	bl	10a84 <free@plt>
   12208:	str	r6, [r5]
   1220c:	pop	{r4, r5, r6, pc}
   12210:	ldr	r3, [pc, #28]	; 12234 <__assert_fail@plt+0x160c>
   12214:	ldr	r1, [pc, #28]	; 12238 <__assert_fail@plt+0x1610>
   12218:	ldr	r0, [pc, #28]	; 1223c <__assert_fail@plt+0x1614>
   1221c:	add	r3, pc, r3
   12220:	mov	r2, #110	; 0x6e
   12224:	add	r3, r3, #12
   12228:	add	r1, pc, r1
   1222c:	add	r0, pc, r0
   12230:	bl	10c28 <__assert_fail@plt>
   12234:	andeq	r0, r0, ip, ror #25
   12238:	andeq	r0, r0, r4, lsl #26
   1223c:	andeq	r0, r0, ip, lsr sp
   12240:	strb	r1, [r0, #8]
   12244:	bx	lr
   12248:	push	{r4, r5, r6, lr}
   1224c:	mov	r4, r0
   12250:	ldrb	r0, [r0, #9]
   12254:	mov	r5, r1
   12258:	cmp	r0, #0
   1225c:	bne	122b8 <__assert_fail@plt+0x1690>
   12260:	ldrb	r3, [r4, #8]
   12264:	mov	r2, #44	; 0x2c
   12268:	strb	r2, [r4, #9]
   1226c:	cmp	r3, #0
   12270:	beq	1227c <__assert_fail@plt+0x1654>
   12274:	mov	r0, r4
   12278:	bl	11fb4 <__assert_fail@plt+0x138c>
   1227c:	mov	r3, #0
   12280:	strb	r3, [r4, #9]
   12284:	mov	r1, r5
   12288:	mov	r0, r4
   1228c:	bl	1203c <__assert_fail@plt+0x1414>
   12290:	ldr	r1, [r4]
   12294:	mov	r0, #58	; 0x3a
   12298:	bl	10be0 <putc@plt>
   1229c:	ldrb	r3, [r4, #8]
   122a0:	cmp	r3, #0
   122a4:	popeq	{r4, r5, r6, pc}
   122a8:	ldr	r1, [r4]
   122ac:	mov	r0, #32
   122b0:	pop	{r4, r5, r6, lr}
   122b4:	b	10be0 <putc@plt>
   122b8:	ldr	r1, [r4]
   122bc:	bl	10be0 <putc@plt>
   122c0:	b	12260 <__assert_fail@plt+0x1638>
   122c4:	push	{r1, r2, r3}
   122c8:	ldr	r3, [pc, #136]	; 12358 <__assert_fail@plt+0x1730>
   122cc:	ldr	r2, [pc, #136]	; 1235c <__assert_fail@plt+0x1734>
   122d0:	add	r3, pc, r3
   122d4:	push	{r4, r5, r6, lr}
   122d8:	sub	sp, sp, #12
   122dc:	ldr	r5, [r3, r2]
   122e0:	ldrb	ip, [r0, #9]
   122e4:	add	r1, sp, #32
   122e8:	ldr	r3, [r5]
   122ec:	cmp	ip, #0
   122f0:	mov	r4, r0
   122f4:	str	r1, [sp]
   122f8:	str	r3, [sp, #4]
   122fc:	ldr	r0, [r0]
   12300:	ldr	r6, [sp, #28]
   12304:	bne	12340 <__assert_fail@plt+0x1718>
   12308:	mov	r3, #44	; 0x2c
   1230c:	mov	r2, r6
   12310:	strb	r3, [r4, #9]
   12314:	mov	r1, #1
   12318:	ldr	r3, [sp]
   1231c:	bl	10b20 <__vfprintf_chk@plt>
   12320:	ldr	r2, [sp, #4]
   12324:	ldr	r3, [r5]
   12328:	cmp	r2, r3
   1232c:	bne	12354 <__assert_fail@plt+0x172c>
   12330:	add	sp, sp, #12
   12334:	pop	{r4, r5, r6, lr}
   12338:	add	sp, sp, #12
   1233c:	bx	lr
   12340:	mov	r1, r0
   12344:	mov	r0, ip
   12348:	bl	10be0 <putc@plt>
   1234c:	ldr	r0, [r4]
   12350:	b	12308 <__assert_fail@plt+0x16e0>
   12354:	bl	10ac0 <__stack_chk_fail@plt>
   12358:	andeq	r1, r1, r8, lsr #26
   1235c:	andeq	r0, r0, ip, lsr #1
   12360:	mov	r1, #123	; 0x7b
   12364:	b	11f64 <__assert_fail@plt+0x133c>
   12368:	ldr	r3, [r0, #4]
   1236c:	push	{r4, lr}
   12370:	cmp	r3, #0
   12374:	beq	123b8 <__assert_fail@plt+0x1790>
   12378:	ldrb	r2, [r0, #9]
   1237c:	sub	r3, r3, #1
   12380:	mov	r4, r0
   12384:	cmp	r2, #0
   12388:	str	r3, [r0, #4]
   1238c:	beq	123a0 <__assert_fail@plt+0x1778>
   12390:	ldrb	r3, [r0, #8]
   12394:	cmp	r3, #0
   12398:	beq	123a0 <__assert_fail@plt+0x1778>
   1239c:	bl	11fb4 <__assert_fail@plt+0x138c>
   123a0:	ldr	r1, [r4]
   123a4:	mov	r0, #125	; 0x7d
   123a8:	bl	10be0 <putc@plt>
   123ac:	mov	r3, #44	; 0x2c
   123b0:	strb	r3, [r4, #9]
   123b4:	pop	{r4, pc}
   123b8:	bl	1200c <__assert_fail@plt+0x13e4>
   123bc:	push	{r4, lr}
   123c0:	mov	r4, r0
   123c4:	mov	r1, #91	; 0x5b
   123c8:	bl	11f64 <__assert_fail@plt+0x133c>
   123cc:	ldrb	r3, [r4, #8]
   123d0:	cmp	r3, #0
   123d4:	popeq	{r4, pc}
   123d8:	ldr	r1, [r4]
   123dc:	mov	r0, #32
   123e0:	pop	{r4, lr}
   123e4:	b	10be0 <putc@plt>
   123e8:	ldrb	r3, [r0, #8]
   123ec:	push	{r4, lr}
   123f0:	mov	r4, r0
   123f4:	cmp	r3, #0
   123f8:	beq	12408 <__assert_fail@plt+0x17e0>
   123fc:	ldrb	r3, [r0, #9]
   12400:	cmp	r3, #0
   12404:	bne	1243c <__assert_fail@plt+0x1814>
   12408:	ldr	r3, [r4, #4]
   1240c:	mov	r2, #0
   12410:	cmp	r3, r2
   12414:	strb	r2, [r4, #9]
   12418:	beq	1244c <__assert_fail@plt+0x1824>
   1241c:	sub	r3, r3, #1
   12420:	str	r3, [r4, #4]
   12424:	ldr	r1, [r4]
   12428:	mov	r0, #93	; 0x5d
   1242c:	bl	10be0 <putc@plt>
   12430:	mov	r3, #44	; 0x2c
   12434:	strb	r3, [r4, #9]
   12438:	pop	{r4, pc}
   1243c:	ldr	r1, [r0]
   12440:	mov	r0, #32
   12444:	bl	10be0 <putc@plt>
   12448:	b	12408 <__assert_fail@plt+0x17e0>
   1244c:	bl	1200c <__assert_fail@plt+0x13e4>
   12450:	push	{r4, r5, r6, lr}
   12454:	mov	r4, r0
   12458:	ldrb	r0, [r0, #9]
   1245c:	mov	r5, r1
   12460:	cmp	r0, #0
   12464:	bne	12480 <__assert_fail@plt+0x1858>
   12468:	mov	r3, #44	; 0x2c
   1246c:	mov	r1, r5
   12470:	strb	r3, [r4, #9]
   12474:	mov	r0, r4
   12478:	pop	{r4, r5, r6, lr}
   1247c:	b	1203c <__assert_fail@plt+0x1414>
   12480:	ldr	r1, [r4]
   12484:	bl	10be0 <putc@plt>
   12488:	b	12468 <__assert_fail@plt+0x1840>
   1248c:	cmp	r1, #0
   12490:	bne	124a8 <__assert_fail@plt+0x1880>
   12494:	ldr	r2, [pc, #24]	; 124b4 <__assert_fail@plt+0x188c>
   12498:	add	r2, pc, r2
   1249c:	ldr	r1, [pc, #20]	; 124b8 <__assert_fail@plt+0x1890>
   124a0:	add	r1, pc, r1
   124a4:	b	122c4 <__assert_fail@plt+0x169c>
   124a8:	ldr	r2, [pc, #12]	; 124bc <__assert_fail@plt+0x1894>
   124ac:	add	r2, pc, r2
   124b0:	b	1249c <__assert_fail@plt+0x1874>
   124b4:	andeq	r0, r0, ip, ror #21
   124b8:	ldrdeq	r0, [r0], -r4
   124bc:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   124c0:	ldr	r1, [pc, #4]	; 124cc <__assert_fail@plt+0x18a4>
   124c4:	add	r1, pc, r1
   124c8:	b	122c4 <__assert_fail@plt+0x169c>
   124cc:	andeq	r0, r0, r8, asr #21
   124d0:	ldr	r1, [pc, #8]	; 124e0 <__assert_fail@plt+0x18b8>
   124d4:	vmov	r2, r3, d0
   124d8:	add	r1, pc, r1
   124dc:	b	122c4 <__assert_fail@plt+0x169c>
   124e0:			; <UNDEFINED> instruction: 0x00000abc
   124e4:	mov	r2, r1
   124e8:	ldr	r1, [pc, #4]	; 124f4 <__assert_fail@plt+0x18cc>
   124ec:	add	r1, pc, r1
   124f0:	b	122c4 <__assert_fail@plt+0x169c>
   124f4:	andeq	r0, r0, ip, lsr #21
   124f8:	mov	r2, r1
   124fc:	ldr	r1, [pc, #4]	; 12508 <__assert_fail@plt+0x18e0>
   12500:	add	r1, pc, r1
   12504:	b	122c4 <__assert_fail@plt+0x169c>
   12508:	andeq	r0, r0, r8, lsl #15
   1250c:	ldr	r1, [pc, #4]	; 12518 <__assert_fail@plt+0x18f0>
   12510:	add	r1, pc, r1
   12514:	b	122c4 <__assert_fail@plt+0x169c>
   12518:	andeq	r0, r0, ip, lsl #21
   1251c:	ldr	r1, [pc, #4]	; 12528 <__assert_fail@plt+0x1900>
   12520:	add	r1, pc, r1
   12524:	b	122c4 <__assert_fail@plt+0x169c>
   12528:	andeq	r0, r0, r4, lsl #21
   1252c:	mov	r2, r1
   12530:	ldr	r1, [pc, #4]	; 1253c <__assert_fail@plt+0x1914>
   12534:	add	r1, pc, r1
   12538:	b	122c4 <__assert_fail@plt+0x169c>
   1253c:	andeq	r0, r0, r8, ror sl
   12540:	b	1250c <__assert_fail@plt+0x18e4>
   12544:	mov	r2, r1
   12548:	ldr	r1, [pc, #4]	; 12554 <__assert_fail@plt+0x192c>
   1254c:	add	r1, pc, r1
   12550:	b	122c4 <__assert_fail@plt+0x169c>
   12554:	andeq	r0, r0, r4, ror #20
   12558:	ldr	r1, [pc, #4]	; 12564 <__assert_fail@plt+0x193c>
   1255c:	add	r1, pc, r1
   12560:	b	122c4 <__assert_fail@plt+0x169c>
   12564:	andeq	r0, r0, r8, asr sl
   12568:	push	{r4, r5, r6, lr}
   1256c:	mov	r5, r2
   12570:	mov	r4, r0
   12574:	bl	12248 <__assert_fail@plt+0x1620>
   12578:	mov	r1, r5
   1257c:	mov	r0, r4
   12580:	pop	{r4, r5, r6, lr}
   12584:	b	12450 <__assert_fail@plt+0x1828>
   12588:	push	{r4, r5, r6, lr}
   1258c:	mov	r5, r2
   12590:	mov	r4, r0
   12594:	bl	12248 <__assert_fail@plt+0x1620>
   12598:	mov	r1, r5
   1259c:	mov	r0, r4
   125a0:	pop	{r4, r5, r6, lr}
   125a4:	b	1248c <__assert_fail@plt+0x1864>
   125a8:	push	{r4, lr}
   125ac:	vpush	{d8}
   125b0:	vmov.f64	d8, d0
   125b4:	mov	r4, r0
   125b8:	bl	12248 <__assert_fail@plt+0x1620>
   125bc:	mov	r0, r4
   125c0:	vmov.f64	d0, d8
   125c4:	vpop	{d8}
   125c8:	pop	{r4, lr}
   125cc:	b	124d0 <__assert_fail@plt+0x18a8>
   125d0:	push	{r4, r5, r6, lr}
   125d4:	mov	r5, r2
   125d8:	mov	r4, r0
   125dc:	bl	12248 <__assert_fail@plt+0x1620>
   125e0:	mov	r1, r5
   125e4:	mov	r0, r4
   125e8:	pop	{r4, r5, r6, lr}
   125ec:	b	124f8 <__assert_fail@plt+0x18d0>
   125f0:	push	{r4, r6, r7, lr}
   125f4:	mov	r6, r2
   125f8:	mov	r7, r3
   125fc:	mov	r4, r0
   12600:	bl	12248 <__assert_fail@plt+0x1620>
   12604:	mov	r2, r6
   12608:	mov	r3, r7
   1260c:	mov	r0, r4
   12610:	pop	{r4, r6, r7, lr}
   12614:	b	1250c <__assert_fail@plt+0x18e4>
   12618:	push	{r4, r6, r7, lr}
   1261c:	mov	r6, r2
   12620:	mov	r7, r3
   12624:	mov	r4, r0
   12628:	bl	12248 <__assert_fail@plt+0x1620>
   1262c:	mov	r2, r6
   12630:	mov	r3, r7
   12634:	mov	r0, r4
   12638:	pop	{r4, r6, r7, lr}
   1263c:	b	1251c <__assert_fail@plt+0x18f4>
   12640:	push	{r4, r5, r6, lr}
   12644:	mov	r5, r2
   12648:	mov	r4, r0
   1264c:	bl	12248 <__assert_fail@plt+0x1620>
   12650:	mov	r1, r5
   12654:	mov	r0, r4
   12658:	pop	{r4, r5, r6, lr}
   1265c:	b	124e4 <__assert_fail@plt+0x18bc>
   12660:	push	{r4, r5, r6, lr}
   12664:	mov	r5, r2
   12668:	mov	r4, r0
   1266c:	bl	12248 <__assert_fail@plt+0x1620>
   12670:	mov	r1, r5
   12674:	mov	r0, r4
   12678:	pop	{r4, r5, r6, lr}
   1267c:	b	1252c <__assert_fail@plt+0x1904>
   12680:	push	{r4, r6, r7, lr}
   12684:	mov	r6, r2
   12688:	mov	r7, r3
   1268c:	mov	r4, r0
   12690:	bl	12248 <__assert_fail@plt+0x1620>
   12694:	mov	r2, r6
   12698:	mov	r3, r7
   1269c:	mov	r0, r4
   126a0:	pop	{r4, r6, r7, lr}
   126a4:	b	12540 <__assert_fail@plt+0x1918>
   126a8:	push	{r4, r5, r6, lr}
   126ac:	mov	r5, r2
   126b0:	mov	r4, r0
   126b4:	bl	12248 <__assert_fail@plt+0x1620>
   126b8:	mov	r1, r5
   126bc:	mov	r0, r4
   126c0:	pop	{r4, r5, r6, lr}
   126c4:	b	12544 <__assert_fail@plt+0x191c>
   126c8:	push	{r4, r6, r7, lr}
   126cc:	mov	r6, r2
   126d0:	mov	r7, r3
   126d4:	mov	r4, r0
   126d8:	bl	12248 <__assert_fail@plt+0x1620>
   126dc:	mov	r2, r6
   126e0:	mov	r3, r7
   126e4:	mov	r0, r4
   126e8:	pop	{r4, r6, r7, lr}
   126ec:	b	12558 <__assert_fail@plt+0x1930>
   126f0:	push	{r4, lr}
   126f4:	mov	r4, r0
   126f8:	bl	12248 <__assert_fail@plt+0x1620>
   126fc:	mov	r0, r4
   12700:	pop	{r4, lr}
   12704:	b	124c0 <__assert_fail@plt+0x1898>
   12708:	subs	r2, r1, #1
   1270c:	bxeq	lr
   12710:	bcc	128e8 <__assert_fail@plt+0x1cc0>
   12714:	cmp	r0, r1
   12718:	bls	128cc <__assert_fail@plt+0x1ca4>
   1271c:	tst	r1, r2
   12720:	beq	128d8 <__assert_fail@plt+0x1cb0>
   12724:	clz	r3, r0
   12728:	clz	r2, r1
   1272c:	sub	r3, r2, r3
   12730:	rsbs	r3, r3, #31
   12734:	addne	r3, r3, r3, lsl #1
   12738:	mov	r2, #0
   1273c:	addne	pc, pc, r3, lsl #2
   12740:	nop			; (mov r0, r0)
   12744:	cmp	r0, r1, lsl #31
   12748:	adc	r2, r2, r2
   1274c:	subcs	r0, r0, r1, lsl #31
   12750:	cmp	r0, r1, lsl #30
   12754:	adc	r2, r2, r2
   12758:	subcs	r0, r0, r1, lsl #30
   1275c:	cmp	r0, r1, lsl #29
   12760:	adc	r2, r2, r2
   12764:	subcs	r0, r0, r1, lsl #29
   12768:	cmp	r0, r1, lsl #28
   1276c:	adc	r2, r2, r2
   12770:	subcs	r0, r0, r1, lsl #28
   12774:	cmp	r0, r1, lsl #27
   12778:	adc	r2, r2, r2
   1277c:	subcs	r0, r0, r1, lsl #27
   12780:	cmp	r0, r1, lsl #26
   12784:	adc	r2, r2, r2
   12788:	subcs	r0, r0, r1, lsl #26
   1278c:	cmp	r0, r1, lsl #25
   12790:	adc	r2, r2, r2
   12794:	subcs	r0, r0, r1, lsl #25
   12798:	cmp	r0, r1, lsl #24
   1279c:	adc	r2, r2, r2
   127a0:	subcs	r0, r0, r1, lsl #24
   127a4:	cmp	r0, r1, lsl #23
   127a8:	adc	r2, r2, r2
   127ac:	subcs	r0, r0, r1, lsl #23
   127b0:	cmp	r0, r1, lsl #22
   127b4:	adc	r2, r2, r2
   127b8:	subcs	r0, r0, r1, lsl #22
   127bc:	cmp	r0, r1, lsl #21
   127c0:	adc	r2, r2, r2
   127c4:	subcs	r0, r0, r1, lsl #21
   127c8:	cmp	r0, r1, lsl #20
   127cc:	adc	r2, r2, r2
   127d0:	subcs	r0, r0, r1, lsl #20
   127d4:	cmp	r0, r1, lsl #19
   127d8:	adc	r2, r2, r2
   127dc:	subcs	r0, r0, r1, lsl #19
   127e0:	cmp	r0, r1, lsl #18
   127e4:	adc	r2, r2, r2
   127e8:	subcs	r0, r0, r1, lsl #18
   127ec:	cmp	r0, r1, lsl #17
   127f0:	adc	r2, r2, r2
   127f4:	subcs	r0, r0, r1, lsl #17
   127f8:	cmp	r0, r1, lsl #16
   127fc:	adc	r2, r2, r2
   12800:	subcs	r0, r0, r1, lsl #16
   12804:	cmp	r0, r1, lsl #15
   12808:	adc	r2, r2, r2
   1280c:	subcs	r0, r0, r1, lsl #15
   12810:	cmp	r0, r1, lsl #14
   12814:	adc	r2, r2, r2
   12818:	subcs	r0, r0, r1, lsl #14
   1281c:	cmp	r0, r1, lsl #13
   12820:	adc	r2, r2, r2
   12824:	subcs	r0, r0, r1, lsl #13
   12828:	cmp	r0, r1, lsl #12
   1282c:	adc	r2, r2, r2
   12830:	subcs	r0, r0, r1, lsl #12
   12834:	cmp	r0, r1, lsl #11
   12838:	adc	r2, r2, r2
   1283c:	subcs	r0, r0, r1, lsl #11
   12840:	cmp	r0, r1, lsl #10
   12844:	adc	r2, r2, r2
   12848:	subcs	r0, r0, r1, lsl #10
   1284c:	cmp	r0, r1, lsl #9
   12850:	adc	r2, r2, r2
   12854:	subcs	r0, r0, r1, lsl #9
   12858:	cmp	r0, r1, lsl #8
   1285c:	adc	r2, r2, r2
   12860:	subcs	r0, r0, r1, lsl #8
   12864:	cmp	r0, r1, lsl #7
   12868:	adc	r2, r2, r2
   1286c:	subcs	r0, r0, r1, lsl #7
   12870:	cmp	r0, r1, lsl #6
   12874:	adc	r2, r2, r2
   12878:	subcs	r0, r0, r1, lsl #6
   1287c:	cmp	r0, r1, lsl #5
   12880:	adc	r2, r2, r2
   12884:	subcs	r0, r0, r1, lsl #5
   12888:	cmp	r0, r1, lsl #4
   1288c:	adc	r2, r2, r2
   12890:	subcs	r0, r0, r1, lsl #4
   12894:	cmp	r0, r1, lsl #3
   12898:	adc	r2, r2, r2
   1289c:	subcs	r0, r0, r1, lsl #3
   128a0:	cmp	r0, r1, lsl #2
   128a4:	adc	r2, r2, r2
   128a8:	subcs	r0, r0, r1, lsl #2
   128ac:	cmp	r0, r1, lsl #1
   128b0:	adc	r2, r2, r2
   128b4:	subcs	r0, r0, r1, lsl #1
   128b8:	cmp	r0, r1
   128bc:	adc	r2, r2, r2
   128c0:	subcs	r0, r0, r1
   128c4:	mov	r0, r2
   128c8:	bx	lr
   128cc:	moveq	r0, #1
   128d0:	movne	r0, #0
   128d4:	bx	lr
   128d8:	clz	r2, r1
   128dc:	rsb	r2, r2, #31
   128e0:	lsr	r0, r0, r2
   128e4:	bx	lr
   128e8:	cmp	r0, #0
   128ec:	mvnne	r0, #0
   128f0:	b	12914 <__assert_fail@plt+0x1cec>
   128f4:	cmp	r1, #0
   128f8:	beq	128e8 <__assert_fail@plt+0x1cc0>
   128fc:	push	{r0, r1, lr}
   12900:	bl	12708 <__assert_fail@plt+0x1ae0>
   12904:	pop	{r1, r2, lr}
   12908:	mul	r3, r2, r0
   1290c:	sub	r1, r1, r3
   12910:	bx	lr
   12914:	push	{r1, lr}
   12918:	mov	r0, #8
   1291c:	bl	10a60 <raise@plt>
   12920:	pop	{r1, pc}
   12924:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12928:	mov	r7, r0
   1292c:	ldr	r6, [pc, #72]	; 1297c <__assert_fail@plt+0x1d54>
   12930:	ldr	r5, [pc, #72]	; 12980 <__assert_fail@plt+0x1d58>
   12934:	add	r6, pc, r6
   12938:	add	r5, pc, r5
   1293c:	sub	r6, r6, r5
   12940:	mov	r8, r1
   12944:	mov	r9, r2
   12948:	bl	10a34 <calloc@plt-0x20>
   1294c:	asrs	r6, r6, #2
   12950:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12954:	mov	r4, #0
   12958:	add	r4, r4, #1
   1295c:	ldr	r3, [r5], #4
   12960:	mov	r2, r9
   12964:	mov	r1, r8
   12968:	mov	r0, r7
   1296c:	blx	r3
   12970:	cmp	r6, r4
   12974:	bne	12958 <__assert_fail@plt+0x1d30>
   12978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1297c:	andeq	r1, r1, r8, lsr #11
   12980:	andeq	r1, r1, r0, lsr #11
   12984:	bx	lr

Disassembly of section .fini:

00012988 <.fini>:
   12988:	push	{r3, lr}
   1298c:	pop	{r3, pc}
