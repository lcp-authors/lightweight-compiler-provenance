
raspbian-preinstalled/gettext:     file format elf32-littlearm


Disassembly of section .init:

00010e28 <.init>:
   10e28:	push	{r3, lr}
   10e2c:	bl	1169c <__assert_fail@plt+0x590>
   10e30:	pop	{r3, pc}

Disassembly of section .plt:

00010e34 <fdopen@plt-0x14>:
   10e34:	push	{lr}		; (str lr, [sp, #-4]!)
   10e38:	ldr	lr, [pc, #4]	; 10e44 <fdopen@plt-0x4>
   10e3c:	add	lr, pc, lr
   10e40:	ldr	pc, [lr, #8]!
   10e44:			; <UNDEFINED> instruction: 0x000151bc

00010e48 <fdopen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #444]!	; 0x1bc

00010e54 <calloc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e60 <iconv_close@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #428]!	; 0x1ac

00010e6c <iconv@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #420]!	; 0x1a4

00010e78 <strcmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #412]!	; 0x19c

00010e84 <basename@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #404]!	; 0x194

00010e90 <fflush@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #396]!	; 0x18c

00010e9c <wcwidth@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #388]!	; 0x184

00010ea8 <memmove@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #380]!	; 0x17c

00010eb4 <free@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #372]!	; 0x174

00010ec0 <ferror@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #364]!	; 0x16c

00010ecc <memcpy@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #356]!	; 0x164

00010ed8 <mbsinit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #348]!	; 0x15c

00010ee4 <memcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #340]!	; 0x154

00010ef0 <dcgettext@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #332]!	; 0x14c

00010efc <strdup@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #324]!	; 0x144

00010f08 <__stack_chk_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #316]!	; 0x13c

00010f14 <realloc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #308]!	; 0x134

00010f20 <textdomain@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #300]!	; 0x12c

00010f2c <iswcntrl@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #292]!	; 0x124

00010f38 <fwrite@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #284]!	; 0x11c

00010f44 <__ctype_get_mb_cur_max@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #276]!	; 0x114

00010f50 <mbrtowc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #268]!	; 0x10c

00010f5c <error@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #260]!	; 0x104

00010f68 <open64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #252]!	; 0xfc

00010f74 <getenv@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #244]!	; 0xf4

00010f80 <malloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #236]!	; 0xec

00010f8c <iconv_open@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #228]!	; 0xe4

00010f98 <__libc_start_main@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #220]!	; 0xdc

00010fa4 <__gmon_start__@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #212]!	; 0xd4

00010fb0 <getopt_long@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #204]!	; 0xcc

00010fbc <__ctype_b_loc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #196]!	; 0xc4

00010fc8 <exit@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #188]!	; 0xbc

00010fd4 <iswspace@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #180]!	; 0xb4

00010fe0 <strlen@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #172]!	; 0xac

00010fec <strchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #164]!	; 0xa4

00010ff8 <ungetc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #156]!	; 0x9c

00011004 <__errno_location@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #86016	; 0x15000
   1100c:	ldr	pc, [ip, #148]!	; 0x94

00011010 <iswalnum@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #86016	; 0x15000
   11018:	ldr	pc, [ip, #140]!	; 0x8c

0001101c <__sprintf_chk@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #86016	; 0x15000
   11024:	ldr	pc, [ip, #132]!	; 0x84

00011028 <__cxa_atexit@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #86016	; 0x15000
   11030:	ldr	pc, [ip, #124]!	; 0x7c

00011034 <memset@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #86016	; 0x15000
   1103c:	ldr	pc, [ip, #116]!	; 0x74

00011040 <putchar@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #86016	; 0x15000
   11048:	ldr	pc, [ip, #108]!	; 0x6c

0001104c <fscanf@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #86016	; 0x15000
   11054:	ldr	pc, [ip, #100]!	; 0x64

00011058 <__printf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #86016	; 0x15000
   11060:	ldr	pc, [ip, #92]!	; 0x5c

00011064 <__fprintf_chk@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #86016	; 0x15000
   1106c:	ldr	pc, [ip, #84]!	; 0x54

00011070 <memchr@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #86016	; 0x15000
   11078:	ldr	pc, [ip, #76]!	; 0x4c

0001107c <fclose@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #86016	; 0x15000
   11084:	ldr	pc, [ip, #68]!	; 0x44

00011088 <strnlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #86016	; 0x15000
   11090:	ldr	pc, [ip, #60]!	; 0x3c

00011094 <__uflow@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #52]!	; 0x34

000110a0 <setlocale@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #44]!	; 0x2c

000110ac <strrchr@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #36]!	; 0x24

000110b8 <nl_langinfo@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #28]!

000110c4 <fputc@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #20]!

000110d0 <bindtextdomain@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #12]!

000110dc <fputs@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4]!

000110e8 <strncmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #4092]!	; 0xffc

000110f4 <abort@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #4084]!	; 0xff4

00011100 <close@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #4076]!	; 0xfec

0001110c <__assert_fail@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #4068]!	; 0xfe4

Disassembly of section .text:

00011118 <.text>:
   11118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1111c:	mov	r7, r0
   11120:	sub	sp, sp, #28
   11124:	ldr	r0, [pc, #1212]	; 115e8 <__assert_fail@plt+0x4dc>
   11128:	mov	r6, r1
   1112c:	bl	10f74 <getenv@plt>
   11130:	ldr	fp, [pc, #1204]	; 115ec <__assert_fail@plt+0x4e0>
   11134:	mov	r5, #0
   11138:	ldr	r9, [pc, #1200]	; 115f0 <__assert_fail@plt+0x4e4>
   1113c:	ldr	r8, [pc, #1200]	; 115f4 <__assert_fail@plt+0x4e8>
   11140:	mov	sl, r5
   11144:	str	r0, [sp, #16]
   11148:	ldr	r0, [pc, #1192]	; 115f8 <__assert_fail@plt+0x4ec>
   1114c:	bl	10f74 <getenv@plt>
   11150:	mov	r3, #1
   11154:	strb	r3, [fp]
   11158:	strb	r5, [fp, #1]
   1115c:	str	r0, [sp, #20]
   11160:	ldr	r0, [r6]
   11164:	bl	11c2c <__assert_fail@plt+0xb20>
   11168:	ldr	r1, [pc, #1164]	; 115fc <__assert_fail@plt+0x4f0>
   1116c:	mov	r0, #6
   11170:	bl	110a0 <setlocale@plt>
   11174:	ldr	r1, [pc, #1156]	; 11600 <__assert_fail@plt+0x4f4>
   11178:	ldr	r0, [pc, #1156]	; 11604 <__assert_fail@plt+0x4f8>
   1117c:	bl	110d0 <bindtextdomain@plt>
   11180:	ldr	r0, [pc, #1148]	; 11604 <__assert_fail@plt+0x4f8>
   11184:	bl	10f20 <textdomain@plt>
   11188:	ldr	r0, [pc, #1144]	; 11608 <__assert_fail@plt+0x4fc>
   1118c:	str	r5, [sp, #12]
   11190:	bl	153a4 <__assert_fail@plt+0x4298>
   11194:	mov	r4, #0
   11198:	str	r4, [sp]
   1119c:	mov	r3, r9
   111a0:	mov	r2, r8
   111a4:	mov	r1, r6
   111a8:	mov	r0, r7
   111ac:	bl	10fb0 <getopt_long@plt>
   111b0:	cmn	r0, #1
   111b4:	beq	11278 <__assert_fail@plt+0x16c>
   111b8:	cmp	r0, #100	; 0x64
   111bc:	beq	11268 <__assert_fail@plt+0x15c>
   111c0:	ble	111e8 <__assert_fail@plt+0xdc>
   111c4:	cmp	r0, #104	; 0x68
   111c8:	beq	11254 <__assert_fail@plt+0x148>
   111cc:	ble	11200 <__assert_fail@plt+0xf4>
   111d0:	cmp	r0, #110	; 0x6e
   111d4:	beq	11260 <__assert_fail@plt+0x154>
   111d8:	cmp	r0, #115	; 0x73
   111dc:	bne	1121c <__assert_fail@plt+0x110>
   111e0:	mov	sl, #1
   111e4:	b	11194 <__assert_fail@plt+0x88>
   111e8:	cmp	r0, #69	; 0x45
   111ec:	beq	11194 <__assert_fail@plt+0x88>
   111f0:	cmp	r0, #86	; 0x56
   111f4:	bne	11214 <__assert_fail@plt+0x108>
   111f8:	mov	r5, #1
   111fc:	b	11194 <__assert_fail@plt+0x88>
   11200:	cmp	r0, #101	; 0x65
   11204:	bne	1121c <__assert_fail@plt+0x110>
   11208:	mov	r3, #1
   1120c:	strb	r3, [fp, #1]
   11210:	b	11194 <__assert_fail@plt+0x88>
   11214:	cmp	r0, #0
   11218:	beq	11194 <__assert_fail@plt+0x88>
   1121c:	ldr	r3, [pc, #1000]	; 1160c <__assert_fail@plt+0x500>
   11220:	mov	r2, #5
   11224:	ldr	r1, [pc, #996]	; 11610 <__assert_fail@plt+0x504>
   11228:	mov	r0, #0
   1122c:	ldr	r4, [r3]
   11230:	bl	10ef0 <dcgettext@plt>
   11234:	ldr	r3, [pc, #984]	; 11614 <__assert_fail@plt+0x508>
   11238:	mov	r1, #1
   1123c:	ldr	r3, [r3]
   11240:	mov	r2, r0
   11244:	mov	r0, r4
   11248:	bl	11064 <__fprintf_chk@plt>
   1124c:	mov	r0, #1
   11250:	bl	10fc8 <exit@plt>
   11254:	mov	r3, #1
   11258:	str	r3, [sp, #12]
   1125c:	b	11194 <__assert_fail@plt+0x88>
   11260:	strb	r4, [fp]
   11264:	b	11194 <__assert_fail@plt+0x88>
   11268:	ldr	r3, [pc, #936]	; 11618 <__assert_fail@plt+0x50c>
   1126c:	ldr	r3, [r3]
   11270:	str	r3, [sp, #16]
   11274:	b	11194 <__assert_fail@plt+0x88>
   11278:	cmp	r5, r4
   1127c:	bne	11434 <__assert_fail@plt+0x328>
   11280:	ldr	r3, [sp, #12]
   11284:	cmp	r3, #0
   11288:	bne	11358 <__assert_fail@plt+0x24c>
   1128c:	ldr	r4, [pc, #904]	; 1161c <__assert_fail@plt+0x510>
   11290:	cmp	sl, #0
   11294:	ldr	r3, [r4]
   11298:	bne	114b0 <__assert_fail@plt+0x3a4>
   1129c:	sub	r3, r7, r3
   112a0:	cmp	r3, #1
   112a4:	beq	112ec <__assert_fail@plt+0x1e0>
   112a8:	cmp	r3, #2
   112ac:	beq	112d8 <__assert_fail@plt+0x1cc>
   112b0:	cmp	r3, #0
   112b4:	mov	r2, #5
   112b8:	beq	11594 <__assert_fail@plt+0x488>
   112bc:	ldr	r1, [pc, #860]	; 11620 <__assert_fail@plt+0x514>
   112c0:	mov	r0, sl
   112c4:	bl	10ef0 <dcgettext@plt>
   112c8:	mov	r1, sl
   112cc:	mov	r2, r0
   112d0:	mov	r0, #1
   112d4:	bl	10f5c <error@plt>
   112d8:	ldr	r3, [r4]
   112dc:	add	r2, r3, #1
   112e0:	ldr	r3, [r6, r3, lsl #2]
   112e4:	str	r2, [r4]
   112e8:	str	r3, [sp, #16]
   112ec:	ldrb	r2, [fp, #1]
   112f0:	ldr	r3, [r4]
   112f4:	cmp	r2, #0
   112f8:	add	r2, r3, #1
   112fc:	ldr	r5, [r6, r3, lsl #2]
   11300:	str	r2, [r4]
   11304:	bne	11584 <__assert_fail@plt+0x478>
   11308:	ldr	r3, [sp, #16]
   1130c:	cmp	r3, #0
   11310:	beq	11570 <__assert_fail@plt+0x464>
   11314:	ldrb	r3, [r3]
   11318:	cmp	r3, #0
   1131c:	beq	11570 <__assert_fail@plt+0x464>
   11320:	ldr	r3, [sp, #20]
   11324:	cmp	r3, #0
   11328:	beq	11338 <__assert_fail@plt+0x22c>
   1132c:	ldrb	r3, [r3]
   11330:	cmp	r3, #0
   11334:	bne	115d0 <__assert_fail@plt+0x4c4>
   11338:	mov	r1, r5
   1133c:	ldr	r0, [sp, #16]
   11340:	mov	r2, #5
   11344:	bl	10ef0 <dcgettext@plt>
   11348:	ldr	r3, [pc, #724]	; 11624 <__assert_fail@plt+0x518>
   1134c:	ldr	r1, [r3]
   11350:	bl	110dc <fputs@plt>
   11354:	b	11568 <__assert_fail@plt+0x45c>
   11358:	mov	r2, #5
   1135c:	ldr	r1, [pc, #708]	; 11628 <__assert_fail@plt+0x51c>
   11360:	mov	r0, r5
   11364:	bl	10ef0 <dcgettext@plt>
   11368:	ldr	r3, [pc, #676]	; 11614 <__assert_fail@plt+0x508>
   1136c:	ldr	r3, [r3]
   11370:	mov	r2, r3
   11374:	mov	r1, r0
   11378:	mov	r0, #1
   1137c:	bl	11058 <__printf_chk@plt>
   11380:	mov	r0, #10
   11384:	bl	11040 <putchar@plt>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #664]	; 1162c <__assert_fail@plt+0x520>
   11390:	mov	r0, r5
   11394:	bl	10ef0 <dcgettext@plt>
   11398:	mov	r1, r0
   1139c:	mov	r0, #1
   113a0:	bl	11058 <__printf_chk@plt>
   113a4:	mov	r0, #10
   113a8:	bl	11040 <putchar@plt>
   113ac:	mov	r2, #5
   113b0:	ldr	r1, [pc, #632]	; 11630 <__assert_fail@plt+0x524>
   113b4:	mov	r0, r5
   113b8:	bl	10ef0 <dcgettext@plt>
   113bc:	mov	r1, r0
   113c0:	mov	r0, #1
   113c4:	bl	11058 <__printf_chk@plt>
   113c8:	mov	r0, #10
   113cc:	bl	11040 <putchar@plt>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #600]	; 11634 <__assert_fail@plt+0x528>
   113d8:	mov	r0, r5
   113dc:	bl	10ef0 <dcgettext@plt>
   113e0:	mov	r4, r0
   113e4:	ldr	r0, [pc, #588]	; 11638 <__assert_fail@plt+0x52c>
   113e8:	bl	10f74 <getenv@plt>
   113ec:	ldr	r3, [pc, #584]	; 1163c <__assert_fail@plt+0x530>
   113f0:	ldr	r2, [pc, #520]	; 11600 <__assert_fail@plt+0x4f4>
   113f4:	mov	r1, r4
   113f8:	cmp	r0, #0
   113fc:	movne	r2, r3
   11400:	mov	r0, #1
   11404:	bl	11058 <__printf_chk@plt>
   11408:	mov	r0, #10
   1140c:	bl	11040 <putchar@plt>
   11410:	mov	r2, #5
   11414:	ldr	r1, [pc, #548]	; 11640 <__assert_fail@plt+0x534>
   11418:	mov	r0, r5
   1141c:	bl	10ef0 <dcgettext@plt>
   11420:	ldr	r3, [pc, #508]	; 11624 <__assert_fail@plt+0x518>
   11424:	ldr	r1, [r3]
   11428:	bl	110dc <fputs@plt>
   1142c:	mov	r0, r5
   11430:	bl	10fc8 <exit@plt>
   11434:	ldr	r3, [pc, #472]	; 11614 <__assert_fail@plt+0x508>
   11438:	ldr	r0, [r3]
   1143c:	bl	10e84 <basename@plt>
   11440:	ldr	r2, [pc, #508]	; 11644 <__assert_fail@plt+0x538>
   11444:	ldr	r3, [pc, #440]	; 11604 <__assert_fail@plt+0x4f8>
   11448:	str	r2, [sp]
   1144c:	ldr	r1, [pc, #500]	; 11648 <__assert_fail@plt+0x53c>
   11450:	mov	r2, r0
   11454:	mov	r0, #1
   11458:	bl	11058 <__printf_chk@plt>
   1145c:	mov	r2, #5
   11460:	ldr	r1, [pc, #484]	; 1164c <__assert_fail@plt+0x540>
   11464:	mov	r0, r4
   11468:	bl	10ef0 <dcgettext@plt>
   1146c:	ldr	r2, [pc, #476]	; 11650 <__assert_fail@plt+0x544>
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	bl	11058 <__printf_chk@plt>
   1147c:	mov	r2, #5
   11480:	ldr	r1, [pc, #460]	; 11654 <__assert_fail@plt+0x548>
   11484:	mov	r0, r4
   11488:	bl	10ef0 <dcgettext@plt>
   1148c:	mov	r5, r0
   11490:	ldr	r0, [pc, #448]	; 11658 <__assert_fail@plt+0x54c>
   11494:	bl	124e0 <__assert_fail@plt+0x13d4>
   11498:	mov	r1, r5
   1149c:	mov	r2, r0
   114a0:	mov	r0, #1
   114a4:	bl	11058 <__printf_chk@plt>
   114a8:	mov	r0, r4
   114ac:	bl	10fc8 <exit@plt>
   114b0:	cmp	r7, r3
   114b4:	ble	1155c <__assert_fail@plt+0x450>
   114b8:	ldr	r3, [sp, #16]
   114bc:	cmp	r3, #0
   114c0:	beq	114f0 <__assert_fail@plt+0x3e4>
   114c4:	ldrb	r3, [r3]
   114c8:	cmp	r3, #0
   114cc:	ldreq	r3, [sp, #12]
   114d0:	streq	r3, [sp, #16]
   114d4:	beq	114f0 <__assert_fail@plt+0x3e4>
   114d8:	ldr	r3, [sp, #20]
   114dc:	cmp	r3, #0
   114e0:	beq	114f0 <__assert_fail@plt+0x3e4>
   114e4:	ldrb	r3, [r3]
   114e8:	cmp	r3, #0
   114ec:	bne	115dc <__assert_fail@plt+0x4d0>
   114f0:	ldr	r5, [pc, #300]	; 11624 <__assert_fail@plt+0x518>
   114f4:	ldr	r8, [sp, #16]
   114f8:	b	11514 <__assert_fail@plt+0x408>
   114fc:	ldr	r1, [r5]
   11500:	mov	r0, #32
   11504:	bl	110c4 <fputc@plt>
   11508:	ldr	r3, [r4]
   1150c:	cmp	r3, r7
   11510:	bge	1155c <__assert_fail@plt+0x450>
   11514:	ldrb	r2, [fp, #1]
   11518:	ldr	r3, [r4]
   1151c:	cmp	r2, #0
   11520:	add	r2, r3, #1
   11524:	str	r2, [r4]
   11528:	ldr	r0, [r6, r3, lsl #2]
   1152c:	bne	115b4 <__assert_fail@plt+0x4a8>
   11530:	cmp	r8, #0
   11534:	beq	11548 <__assert_fail@plt+0x43c>
   11538:	mov	r1, r0
   1153c:	mov	r2, #5
   11540:	mov	r0, r8
   11544:	bl	10ef0 <dcgettext@plt>
   11548:	ldr	r1, [r5]
   1154c:	bl	110dc <fputs@plt>
   11550:	ldr	r3, [r4]
   11554:	cmp	r3, r7
   11558:	blt	114fc <__assert_fail@plt+0x3f0>
   1155c:	ldrb	r3, [fp]
   11560:	cmp	r3, #0
   11564:	bne	115bc <__assert_fail@plt+0x4b0>
   11568:	mov	r0, #0
   1156c:	bl	10fc8 <exit@plt>
   11570:	ldr	r3, [pc, #172]	; 11624 <__assert_fail@plt+0x518>
   11574:	mov	r0, r5
   11578:	ldr	r1, [r3]
   1157c:	bl	110dc <fputs@plt>
   11580:	b	11568 <__assert_fail@plt+0x45c>
   11584:	mov	r0, r5
   11588:	bl	11750 <__assert_fail@plt+0x644>
   1158c:	mov	r5, r0
   11590:	b	11308 <__assert_fail@plt+0x1fc>
   11594:	ldr	r1, [pc, #192]	; 1165c <__assert_fail@plt+0x550>
   11598:	mov	r0, sl
   1159c:	bl	10ef0 <dcgettext@plt>
   115a0:	mov	r1, sl
   115a4:	mov	r2, r0
   115a8:	mov	r0, #1
   115ac:	bl	10f5c <error@plt>
   115b0:	b	112ec <__assert_fail@plt+0x1e0>
   115b4:	bl	11750 <__assert_fail@plt+0x644>
   115b8:	b	11530 <__assert_fail@plt+0x424>
   115bc:	ldr	r3, [pc, #96]	; 11624 <__assert_fail@plt+0x518>
   115c0:	mov	r0, #10
   115c4:	ldr	r1, [r3]
   115c8:	bl	110c4 <fputc@plt>
   115cc:	b	11568 <__assert_fail@plt+0x45c>
   115d0:	ldrd	r0, [sp, #16]
   115d4:	bl	110d0 <bindtextdomain@plt>
   115d8:	b	11338 <__assert_fail@plt+0x22c>
   115dc:	ldrd	r0, [sp, #16]
   115e0:	bl	110d0 <bindtextdomain@plt>
   115e4:	b	114f0 <__assert_fail@plt+0x3e4>
   115e8:	andeq	r5, r1, ip, asr #8
   115ec:	andeq	r6, r2, sp, lsr #2
   115f0:	andeq	r5, r1, r8, asr #7
   115f4:	andeq	r5, r1, r0, lsr #9
   115f8:	andeq	r5, r1, r8, asr r4
   115fc:	andeq	r5, r1, r0, ror r8
   11600:	andeq	r5, r1, ip, lsr #8
   11604:	andeq	r5, r1, r8, ror #8
   11608:	andeq	r1, r1, r0, asr #20
   1160c:	andeq	r6, r2, r0, lsr #2
   11610:	andeq	r5, r1, r8, ror r4
   11614:	andeq	r6, r2, r0, lsr r1
   11618:	andeq	r6, r2, r8, lsr #2
   1161c:	andeq	r6, r2, r8, lsl r1
   11620:	andeq	r5, r1, ip, lsl #21
   11624:	andeq	r6, r2, r4, lsr #2
   11628:	strdeq	r5, [r1], -r8
   1162c:	andeq	r5, r1, r4, asr #12
   11630:	andeq	r5, r1, r0, lsl #13
   11634:	andeq	r5, r1, r4, ror r8
   11638:	andeq	r5, r1, r4, asr sl
   1163c:	andeq	r5, r1, r0, asr #8
   11640:	andeq	r5, r1, r0, ror #20
   11644:			; <UNDEFINED> instruction: 0x000154bc
   11648:	andeq	r5, r1, ip, lsr #9
   1164c:	andeq	r5, r1, r8, asr #9
   11650:	andeq	r5, r1, r0, asr #11
   11654:	ldrdeq	r5, [r1], -r8
   11658:	andeq	r5, r1, r8, ror #11
   1165c:	andeq	r5, r1, r0, lsr #21
   11660:	mov	fp, #0
   11664:	mov	lr, #0
   11668:	pop	{r1}		; (ldr r1, [sp], #4)
   1166c:	mov	r2, sp
   11670:	push	{r2}		; (str r2, [sp, #-4]!)
   11674:	push	{r0}		; (str r0, [sp, #-4]!)
   11678:	ldr	ip, [pc, #16]	; 11690 <__assert_fail@plt+0x584>
   1167c:	push	{ip}		; (str ip, [sp, #-4]!)
   11680:	ldr	r0, [pc, #12]	; 11694 <__assert_fail@plt+0x588>
   11684:	ldr	r3, [pc, #12]	; 11698 <__assert_fail@plt+0x58c>
   11688:	bl	10f98 <__libc_start_main@plt>
   1168c:	bl	110f4 <abort@plt>
   11690:	andeq	r5, r1, r0, lsr #7
   11694:	andeq	r1, r1, r8, lsl r1
   11698:	andeq	r5, r1, r0, asr #6
   1169c:	ldr	r3, [pc, #20]	; 116b8 <__assert_fail@plt+0x5ac>
   116a0:	ldr	r2, [pc, #20]	; 116bc <__assert_fail@plt+0x5b0>
   116a4:	add	r3, pc, r3
   116a8:	ldr	r2, [r3, r2]
   116ac:	cmp	r2, #0
   116b0:	bxeq	lr
   116b4:	b	10fa4 <__gmon_start__@plt>
   116b8:	andeq	r4, r1, r4, asr r9
   116bc:	strdeq	r0, [r0], -ip
   116c0:	ldr	r0, [pc, #24]	; 116e0 <__assert_fail@plt+0x5d4>
   116c4:	ldr	r3, [pc, #24]	; 116e4 <__assert_fail@plt+0x5d8>
   116c8:	cmp	r3, r0
   116cc:	bxeq	lr
   116d0:	ldr	r3, [pc, #16]	; 116e8 <__assert_fail@plt+0x5dc>
   116d4:	cmp	r3, #0
   116d8:	bxeq	lr
   116dc:	bx	r3
   116e0:	andeq	r6, r2, ip, lsl #2
   116e4:	andeq	r6, r2, ip, lsl #2
   116e8:	andeq	r0, r0, r0
   116ec:	ldr	r0, [pc, #36]	; 11718 <__assert_fail@plt+0x60c>
   116f0:	ldr	r1, [pc, #36]	; 1171c <__assert_fail@plt+0x610>
   116f4:	sub	r1, r1, r0
   116f8:	asr	r1, r1, #2
   116fc:	add	r1, r1, r1, lsr #31
   11700:	asrs	r1, r1, #1
   11704:	bxeq	lr
   11708:	ldr	r3, [pc, #16]	; 11720 <__assert_fail@plt+0x614>
   1170c:	cmp	r3, #0
   11710:	bxeq	lr
   11714:	bx	r3
   11718:	andeq	r6, r2, ip, lsl #2
   1171c:	andeq	r6, r2, ip, lsl #2
   11720:	andeq	r0, r0, r0
   11724:	push	{r4, lr}
   11728:	ldr	r4, [pc, #24]	; 11748 <__assert_fail@plt+0x63c>
   1172c:	ldrb	r3, [r4]
   11730:	cmp	r3, #0
   11734:	popne	{r4, pc}
   11738:	bl	116c0 <__assert_fail@plt+0x5b4>
   1173c:	mov	r3, #1
   11740:	strb	r3, [r4]
   11744:	pop	{r4, pc}
   11748:	andeq	r6, r2, ip, lsr #2
   1174c:	b	116ec <__assert_fail@plt+0x5e0>
   11750:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11754:	mov	r8, r0
   11758:	ldr	r6, [pc, #728]	; 11a38 <__assert_fail@plt+0x92c>
   1175c:	mov	r5, r0
   11760:	ldrb	r3, [r5]
   11764:	mov	r4, r5
   11768:	mov	r0, r6
   1176c:	subs	r7, r3, #92	; 0x5c
   11770:	movne	r7, #1
   11774:	cmp	r3, #0
   11778:	moveq	r7, #0
   1177c:	cmp	r7, #0
   11780:	add	r5, r5, #1
   11784:	bne	11760 <__assert_fail@plt+0x654>
   11788:	cmp	r3, #0
   1178c:	beq	1196c <__assert_fail@plt+0x860>
   11790:	ldrb	r3, [r5]
   11794:	subs	r1, r3, #0
   11798:	beq	1196c <__assert_fail@plt+0x860>
   1179c:	bl	10fec <strchr@plt>
   117a0:	cmp	r0, #0
   117a4:	beq	11760 <__assert_fail@plt+0x654>
   117a8:	mov	r0, r8
   117ac:	bl	10fe0 <strlen@plt>
   117b0:	bl	12dc4 <__assert_fail@plt+0x1cb8>
   117b4:	sub	r5, r4, r8
   117b8:	mov	r1, r8
   117bc:	mov	r2, r5
   117c0:	mov	sl, #11
   117c4:	mov	r9, #9
   117c8:	mov	r8, #13
   117cc:	mov	r6, r0
   117d0:	add	r5, r0, r5
   117d4:	bl	10ecc <memcpy@plt>
   117d8:	ldr	r0, [pc, #604]	; 11a3c <__assert_fail@plt+0x930>
   117dc:	mov	r3, r7
   117e0:	mov	ip, #92	; 0x5c
   117e4:	ldrb	lr, [r0]
   117e8:	mov	r7, #10
   117ec:	ldrb	r2, [r4, #1]
   117f0:	sub	r2, r2, #48	; 0x30
   117f4:	cmp	r2, #70	; 0x46
   117f8:	ldrls	pc, [pc, r2, lsl #2]
   117fc:	b	11a04 <__assert_fail@plt+0x8f8>
   11800:	andeq	r1, r1, r4, ror #19
   11804:	andeq	r1, r1, r4, ror #19
   11808:	andeq	r1, r1, r4, ror #19
   1180c:	andeq	r1, r1, r4, ror #19
   11810:	andeq	r1, r1, r4, ror #19
   11814:	andeq	r1, r1, r4, ror #19
   11818:	andeq	r1, r1, r4, ror #19
   1181c:	andeq	r1, r1, r4, ror #19
   11820:	andeq	r1, r1, r4, lsl #20
   11824:	andeq	r1, r1, r4, lsl #20
   11828:	andeq	r1, r1, r4, lsl #20
   1182c:	andeq	r1, r1, r4, lsl #20
   11830:	andeq	r1, r1, r4, lsl #20
   11834:	andeq	r1, r1, r4, lsl #20
   11838:	andeq	r1, r1, r4, lsl #20
   1183c:	andeq	r1, r1, r4, lsl #20
   11840:	andeq	r1, r1, r4, lsl #20
   11844:	andeq	r1, r1, r4, lsl #20
   11848:	andeq	r1, r1, r4, lsl #20
   1184c:	andeq	r1, r1, r4, lsl #20
   11850:	andeq	r1, r1, r4, lsl #20
   11854:	andeq	r1, r1, r4, lsl #20
   11858:	andeq	r1, r1, r4, lsl #20
   1185c:	andeq	r1, r1, r4, lsl #20
   11860:	andeq	r1, r1, r4, lsl #20
   11864:	andeq	r1, r1, r4, lsl #20
   11868:	andeq	r1, r1, r4, lsl #20
   1186c:	andeq	r1, r1, r4, lsl #20
   11870:	andeq	r1, r1, r4, lsl #20
   11874:	andeq	r1, r1, r4, lsl #20
   11878:	andeq	r1, r1, r4, lsl #20
   1187c:	andeq	r1, r1, r4, lsl #20
   11880:	andeq	r1, r1, r4, lsl #20
   11884:	andeq	r1, r1, r4, lsl #20
   11888:	andeq	r1, r1, r4, lsl #20
   1188c:	andeq	r1, r1, r4, lsl #20
   11890:	andeq	r1, r1, r4, lsl #20
   11894:	andeq	r1, r1, r4, lsl #20
   11898:	andeq	r1, r1, r4, lsl #20
   1189c:	andeq	r1, r1, r4, lsl #20
   118a0:	andeq	r1, r1, r4, lsl #20
   118a4:	andeq	r1, r1, r4, lsl #20
   118a8:	andeq	r1, r1, r4, lsl #20
   118ac:	andeq	r1, r1, r4, lsl #20
   118b0:	ldrdeq	r1, [r1], -r8
   118b4:	andeq	r1, r1, r4, lsl #20
   118b8:	andeq	r1, r1, r4, lsl #20
   118bc:	andeq	r1, r1, r4, lsl #20
   118c0:	andeq	r1, r1, r4, lsl #20
   118c4:	andeq	r1, r1, r8, asr #19
   118c8:			; <UNDEFINED> instruction: 0x000119b8
   118cc:	andeq	r1, r1, r8, lsr #19
   118d0:	andeq	r1, r1, r4, lsl #20
   118d4:	andeq	r1, r1, r4, lsl #20
   118d8:	muleq	r1, r8, r9
   118dc:	andeq	r1, r1, r4, lsl #20
   118e0:	andeq	r1, r1, r4, lsl #20
   118e4:	andeq	r1, r1, r4, lsl #20
   118e8:	andeq	r1, r1, r4, lsl #20
   118ec:	andeq	r1, r1, r4, lsl #20
   118f0:	andeq	r1, r1, r4, lsl #20
   118f4:	andeq	r1, r1, r4, lsl #20
   118f8:	andeq	r1, r1, ip, lsl #19
   118fc:	andeq	r1, r1, r4, lsl #20
   11900:	andeq	r1, r1, r4, lsl #20
   11904:	andeq	r1, r1, r4, lsl #20
   11908:	andeq	r1, r1, r0, lsl #19
   1190c:	andeq	r1, r1, r4, lsl #20
   11910:	andeq	r1, r1, r4, ror r9
   11914:	andeq	r1, r1, r4, lsl #20
   11918:	andeq	r1, r1, ip, lsl r9
   1191c:	add	r4, r4, #2
   11920:	strb	sl, [r5], #1
   11924:	ldrb	r2, [r4]
   11928:	cmp	r2, #0
   1192c:	cmpne	r2, #92	; 0x5c
   11930:	addne	r1, r4, #1
   11934:	beq	11950 <__assert_fail@plt+0x844>
   11938:	strb	r2, [r5], #1
   1193c:	mov	r4, r1
   11940:	ldrb	r2, [r1], #1
   11944:	cmp	r2, #0
   11948:	cmpne	r2, #92	; 0x5c
   1194c:	bne	11938 <__assert_fail@plt+0x82c>
   11950:	cmp	r2, #0
   11954:	bne	117ec <__assert_fail@plt+0x6e0>
   11958:	mov	r8, r6
   1195c:	cmp	r3, #0
   11960:	mov	r3, #0
   11964:	strbne	lr, [r0]
   11968:	strb	r3, [r5]
   1196c:	mov	r0, r8
   11970:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11974:	add	r4, r4, #2
   11978:	strb	r9, [r5], #1
   1197c:	b	11924 <__assert_fail@plt+0x818>
   11980:	add	r4, r4, #2
   11984:	strb	r8, [r5], #1
   11988:	b	11924 <__assert_fail@plt+0x818>
   1198c:	add	r4, r4, #2
   11990:	strb	r7, [r5], #1
   11994:	b	11924 <__assert_fail@plt+0x818>
   11998:	mov	r2, #12
   1199c:	add	r4, r4, #2
   119a0:	strb	r2, [r5], #1
   119a4:	b	11924 <__assert_fail@plt+0x818>
   119a8:	add	r4, r4, #2
   119ac:	mov	lr, #0
   119b0:	mov	r3, #1
   119b4:	b	11924 <__assert_fail@plt+0x818>
   119b8:	mov	r2, #8
   119bc:	add	r4, r4, #2
   119c0:	strb	r2, [r5], #1
   119c4:	b	11924 <__assert_fail@plt+0x818>
   119c8:	mov	r2, #7
   119cc:	add	r4, r4, #2
   119d0:	strb	r2, [r5], #1
   119d4:	b	11924 <__assert_fail@plt+0x818>
   119d8:	strb	ip, [r5]
   119dc:	add	r4, r4, #2
   119e0:	b	11924 <__assert_fail@plt+0x818>
   119e4:	ldrb	r1, [r4, #2]
   119e8:	sub	r1, r1, #48	; 0x30
   119ec:	uxtb	fp, r1
   119f0:	cmp	fp, #7
   119f4:	addhi	r4, r4, #2
   119f8:	bls	11a10 <__assert_fail@plt+0x904>
   119fc:	strb	r2, [r5]
   11a00:	b	11924 <__assert_fail@plt+0x818>
   11a04:	add	r4, r4, #1
   11a08:	strb	ip, [r5]
   11a0c:	b	11924 <__assert_fail@plt+0x818>
   11a10:	ldrb	fp, [r4, #3]
   11a14:	add	r2, r1, r2, lsl #3
   11a18:	sub	r1, fp, #48	; 0x30
   11a1c:	uxtb	fp, r1
   11a20:	cmp	fp, #7
   11a24:	addls	r2, r1, r2, lsl #3
   11a28:	addhi	r4, r4, #3
   11a2c:	addls	r4, r4, #4
   11a30:	strb	r2, [r5]
   11a34:	b	11924 <__assert_fail@plt+0x818>
   11a38:	andeq	r5, r1, r8, lsl r4
   11a3c:	andeq	r6, r2, sp, lsr #2
   11a40:	ldr	r3, [pc, #168]	; 11af0 <__assert_fail@plt+0x9e4>
   11a44:	push	{r4, r5, r6, lr}
   11a48:	ldr	r0, [r3]
   11a4c:	bl	11c24 <__assert_fail@plt+0xb18>
   11a50:	mov	r4, r0
   11a54:	bl	11004 <__errno_location@plt>
   11a58:	cmp	r4, #0
   11a5c:	mov	r5, r0
   11a60:	bne	11ab4 <__assert_fail@plt+0x9a8>
   11a64:	ldr	r4, [pc, #136]	; 11af4 <__assert_fail@plt+0x9e8>
   11a68:	mov	r3, #0
   11a6c:	str	r3, [r5]
   11a70:	ldr	r0, [r4]
   11a74:	bl	10ec0 <ferror@plt>
   11a78:	cmp	r0, #0
   11a7c:	bne	11ae0 <__assert_fail@plt+0x9d4>
   11a80:	ldr	r0, [r4]
   11a84:	bl	10e90 <fflush@plt>
   11a88:	cmp	r0, #0
   11a8c:	bne	11ae0 <__assert_fail@plt+0x9d4>
   11a90:	ldr	r0, [r4]
   11a94:	bl	1107c <fclose@plt>
   11a98:	cmp	r0, #0
   11a9c:	popeq	{r4, r5, r6, pc}
   11aa0:	ldr	r3, [r5]
   11aa4:	cmp	r3, #9
   11aa8:	popeq	{r4, r5, r6, pc}
   11aac:	mov	r0, #1
   11ab0:	bl	10fc8 <exit@plt>
   11ab4:	ldr	r4, [r0]
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #52]	; 11af8 <__assert_fail@plt+0x9ec>
   11ac0:	mov	r0, #0
   11ac4:	bl	10ef0 <dcgettext@plt>
   11ac8:	mov	r1, r4
   11acc:	ldr	r2, [pc, #40]	; 11afc <__assert_fail@plt+0x9f0>
   11ad0:	mov	r3, r0
   11ad4:	mov	r0, #1
   11ad8:	bl	10f5c <error@plt>
   11adc:	b	11a64 <__assert_fail@plt+0x958>
   11ae0:	ldr	r0, [r4]
   11ae4:	bl	1107c <fclose@plt>
   11ae8:	mov	r0, #1
   11aec:	bl	10fc8 <exit@plt>
   11af0:	andeq	r6, r2, r4, lsr #2
   11af4:	andeq	r6, r2, r0, lsr #2
   11af8:	ldrdeq	r5, [r1], -ip
   11afc:	andeq	r5, r1, r8, ror #21
   11b00:	ldr	r3, [pc, #268]	; 11c14 <__assert_fail@plt+0xb08>
   11b04:	push	{r4, r5, r6, r7, r8, lr}
   11b08:	ldr	r3, [r3]
   11b0c:	cmp	r3, r0
   11b10:	beq	11b8c <__assert_fail@plt+0xa80>
   11b14:	mov	r4, r0
   11b18:	mov	r5, r1
   11b1c:	bl	11004 <__errno_location@plt>
   11b20:	mov	r3, #0
   11b24:	str	r3, [r0]
   11b28:	mov	r6, r0
   11b2c:	mov	r0, r4
   11b30:	bl	10ec0 <ferror@plt>
   11b34:	cmp	r0, #0
   11b38:	mov	r0, r4
   11b3c:	bne	11ba8 <__assert_fail@plt+0xa9c>
   11b40:	cmp	r5, #0
   11b44:	beq	11b74 <__assert_fail@plt+0xa68>
   11b48:	bl	10e90 <fflush@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	11be0 <__assert_fail@plt+0xad4>
   11b54:	ldr	r7, [r6]
   11b58:	subs	r5, r7, #32
   11b5c:	mvnne	r5, #0
   11b60:	mov	r0, r4
   11b64:	bl	1107c <fclose@plt>
   11b68:	str	r7, [r6]
   11b6c:	mov	r0, r5
   11b70:	pop	{r4, r5, r6, r7, r8, pc}
   11b74:	bl	1107c <fclose@plt>
   11b78:	cmp	r0, #0
   11b7c:	bne	11c00 <__assert_fail@plt+0xaf4>
   11b80:	mov	r5, #0
   11b84:	mov	r0, r5
   11b88:	pop	{r4, r5, r6, r7, r8, pc}
   11b8c:	ldr	r3, [pc, #132]	; 11c18 <__assert_fail@plt+0xb0c>
   11b90:	ldrb	r2, [r3]
   11b94:	cmp	r2, #0
   11b98:	moveq	r2, #1
   11b9c:	strbeq	r2, [r3]
   11ba0:	beq	11b14 <__assert_fail@plt+0xa08>
   11ba4:	b	11b80 <__assert_fail@plt+0xa74>
   11ba8:	bl	10e90 <fflush@plt>
   11bac:	cmp	r0, #0
   11bb0:	bne	11b54 <__assert_fail@plt+0xa48>
   11bb4:	mov	r1, r4
   11bb8:	bl	110c4 <fputc@plt>
   11bbc:	cmn	r0, #1
   11bc0:	beq	11b54 <__assert_fail@plt+0xa48>
   11bc4:	mov	r0, r4
   11bc8:	bl	10e90 <fflush@plt>
   11bcc:	subs	r7, r0, #0
   11bd0:	streq	r7, [r6]
   11bd4:	mvneq	r5, #0
   11bd8:	beq	11b60 <__assert_fail@plt+0xa54>
   11bdc:	b	11b54 <__assert_fail@plt+0xa48>
   11be0:	mov	r0, r4
   11be4:	bl	1107c <fclose@plt>
   11be8:	cmp	r0, #0
   11bec:	beq	11b80 <__assert_fail@plt+0xa74>
   11bf0:	ldr	r5, [r6]
   11bf4:	cmp	r5, #9
   11bf8:	beq	11b80 <__assert_fail@plt+0xa74>
   11bfc:	b	11c04 <__assert_fail@plt+0xaf8>
   11c00:	ldr	r5, [r6]
   11c04:	subs	r5, r5, #32
   11c08:	mvnne	r5, #0
   11c0c:	mov	r0, r5
   11c10:	pop	{r4, r5, r6, r7, r8, pc}
   11c14:	andeq	r6, r2, r4, lsr #2
   11c18:	andeq	r6, r2, pc, lsr #2
   11c1c:	mov	r1, #0
   11c20:	b	11b00 <__assert_fail@plt+0x9f4>
   11c24:	mov	r1, #1
   11c28:	b	11b00 <__assert_fail@plt+0x9f4>
   11c2c:	push	{r4, r5, r6, lr}
   11c30:	subs	r4, r0, #0
   11c34:	beq	11ca8 <__assert_fail@plt+0xb9c>
   11c38:	mov	r1, #47	; 0x2f
   11c3c:	bl	110ac <strrchr@plt>
   11c40:	subs	r5, r0, #0
   11c44:	beq	11c94 <__assert_fail@plt+0xb88>
   11c48:	add	r6, r5, #1
   11c4c:	sub	r3, r6, r4
   11c50:	cmp	r3, #6
   11c54:	ble	11c94 <__assert_fail@plt+0xb88>
   11c58:	mov	r2, #7
   11c5c:	ldr	r1, [pc, #96]	; 11cc4 <__assert_fail@plt+0xbb8>
   11c60:	sub	r0, r5, #6
   11c64:	bl	110e8 <strncmp@plt>
   11c68:	cmp	r0, #0
   11c6c:	bne	11c94 <__assert_fail@plt+0xb88>
   11c70:	mov	r2, #3
   11c74:	ldr	r1, [pc, #76]	; 11cc8 <__assert_fail@plt+0xbbc>
   11c78:	mov	r0, r6
   11c7c:	bl	110e8 <strncmp@plt>
   11c80:	cmp	r0, #0
   11c84:	movne	r4, r6
   11c88:	ldreq	r3, [pc, #60]	; 11ccc <__assert_fail@plt+0xbc0>
   11c8c:	addeq	r4, r5, #4
   11c90:	streq	r4, [r3]
   11c94:	ldr	r2, [pc, #52]	; 11cd0 <__assert_fail@plt+0xbc4>
   11c98:	ldr	r3, [pc, #52]	; 11cd4 <__assert_fail@plt+0xbc8>
   11c9c:	str	r4, [r2]
   11ca0:	str	r4, [r3]
   11ca4:	pop	{r4, r5, r6, pc}
   11ca8:	ldr	r3, [pc, #40]	; 11cd8 <__assert_fail@plt+0xbcc>
   11cac:	mov	r2, #55	; 0x37
   11cb0:	mov	r1, #1
   11cb4:	ldr	r3, [r3]
   11cb8:	ldr	r0, [pc, #28]	; 11cdc <__assert_fail@plt+0xbd0>
   11cbc:	bl	10f38 <fwrite@plt>
   11cc0:	bl	110f4 <abort@plt>
   11cc4:	andeq	r5, r1, r4, lsr #22
   11cc8:	andeq	r5, r1, ip, lsr #22
   11ccc:	andeq	r6, r2, r0, lsl r1
   11cd0:	andeq	r6, r2, r0, lsr r1
   11cd4:	andeq	r6, r2, r4, lsl r1
   11cd8:	andeq	r6, r2, r0, lsr #2
   11cdc:	andeq	r5, r1, ip, ror #21
   11ce0:	push	{r4, lr}
   11ce4:	mov	r2, #179	; 0xb3
   11ce8:	ldr	r3, [pc, #8]	; 11cf8 <__assert_fail@plt+0xbec>
   11cec:	ldr	r1, [pc, #8]	; 11cfc <__assert_fail@plt+0xbf0>
   11cf0:	ldr	r0, [pc, #8]	; 11d00 <__assert_fail@plt+0xbf4>
   11cf4:	bl	1110c <__assert_fail@plt>
   11cf8:	andeq	r5, r1, r0, lsr fp
   11cfc:	andeq	r5, r1, r4, asr #22
   11d00:	andeq	r5, r1, r0, asr fp
   11d04:	ldr	r3, [pc, #1976]	; 124c4 <__assert_fail@plt+0x13b8>
   11d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d0c:	sub	sp, sp, #124	; 0x7c
   11d10:	ldr	r3, [r3]
   11d14:	mov	r4, r0
   11d18:	mov	r0, r1
   11d1c:	mov	r1, #2
   11d20:	str	r3, [sp, #116]	; 0x74
   11d24:	bl	12870 <__assert_fail@plt+0x1764>
   11d28:	ldr	r8, [pc, #1944]	; 124c8 <__assert_fail@plt+0x13bc>
   11d2c:	mov	r6, #0
   11d30:	mov	sl, r0
   11d34:	ldrb	r3, [r4]
   11d38:	cmp	r3, #0
   11d3c:	beq	11dd0 <__assert_fail@plt+0xcc4>
   11d40:	mov	r1, sl
   11d44:	mov	r0, r4
   11d48:	bl	13eb8 <__assert_fail@plt+0x2dac>
   11d4c:	subs	r9, r0, #0
   11d50:	beq	11dd0 <__assert_fail@plt+0xcc4>
   11d54:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   11d58:	cmp	r0, #1
   11d5c:	bhi	11dfc <__assert_fail@plt+0xcf0>
   11d60:	mov	r0, sl
   11d64:	bl	10fe0 <strlen@plt>
   11d68:	cmp	r4, r9
   11d6c:	mov	r5, r0
   11d70:	bcs	11d90 <__assert_fail@plt+0xc84>
   11d74:	bl	10fbc <__ctype_b_loc@plt>
   11d78:	ldrb	r3, [r9, #-1]
   11d7c:	lsl	r3, r3, #1
   11d80:	ldr	r2, [r0]
   11d84:	ldrh	r3, [r2, r3]
   11d88:	tst	r3, #8
   11d8c:	bne	11db4 <__assert_fail@plt+0xca8>
   11d90:	ldrb	r4, [r9, r5]
   11d94:	cmp	r4, #0
   11d98:	beq	12490 <__assert_fail@plt+0x1384>
   11d9c:	bl	10fbc <__ctype_b_loc@plt>
   11da0:	lsl	r4, r4, #1
   11da4:	ldr	r3, [r0]
   11da8:	ldrh	r3, [r3, r4]
   11dac:	tst	r3, #8
   11db0:	beq	12490 <__assert_fail@plt+0x1384>
   11db4:	ldrb	r3, [r9]
   11db8:	cmp	r3, #0
   11dbc:	beq	11dd0 <__assert_fail@plt+0xcc4>
   11dc0:	add	r4, r9, #1
   11dc4:	ldrb	r3, [r4]
   11dc8:	cmp	r3, #0
   11dcc:	bne	11d40 <__assert_fail@plt+0xc34>
   11dd0:	mov	fp, #0
   11dd4:	mov	r0, sl
   11dd8:	bl	10eb4 <free@plt>
   11ddc:	ldr	r3, [pc, #1760]	; 124c4 <__assert_fail@plt+0x13b8>
   11de0:	ldr	r2, [sp, #116]	; 0x74
   11de4:	mov	r0, fp
   11de8:	ldr	r3, [r3]
   11dec:	cmp	r2, r3
   11df0:	bne	124c0 <__assert_fail@plt+0x13b4>
   11df4:	add	sp, sp, #124	; 0x7c
   11df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dfc:	cmp	r4, r9
   11e00:	str	r4, [sp, #20]
   11e04:	strb	r6, [sp, #4]
   11e08:	str	r6, [sp, #8]
   11e0c:	strb	r6, [sp, #16]
   11e10:	str	r6, [sp, #12]
   11e14:	movcc	r5, #1
   11e18:	bcc	11e78 <__assert_fail@plt+0xd6c>
   11e1c:	b	122e4 <__assert_fail@plt+0x11d8>
   11e20:	ldrb	r3, [r4]
   11e24:	and	r2, r3, #31
   11e28:	lsr	r3, r3, #5
   11e2c:	ldr	r3, [r8, r3, lsl #2]
   11e30:	lsr	r3, r3, r2
   11e34:	tst	r3, #1
   11e38:	beq	11f08 <__assert_fail@plt+0xdfc>
   11e3c:	str	r5, [sp, #24]
   11e40:	ldrb	r7, [r4]
   11e44:	strb	r5, [sp, #28]
   11e48:	strb	r5, [sp, #16]
   11e4c:	cmp	r7, #0
   11e50:	str	r7, [sp, #32]
   11e54:	beq	11f04 <__assert_fail@plt+0xdf8>
   11e58:	ldr	r4, [sp, #20]
   11e5c:	ldr	r3, [sp, #24]
   11e60:	strb	r6, [sp, #16]
   11e64:	add	r4, r4, r3
   11e68:	cmp	r4, r9
   11e6c:	str	r4, [sp, #20]
   11e70:	ldrb	r3, [sp, #28]
   11e74:	bcs	11f58 <__assert_fail@plt+0xe4c>
   11e78:	ldrb	r3, [sp, #4]
   11e7c:	cmp	r3, #0
   11e80:	beq	11e20 <__assert_fail@plt+0xd14>
   11e84:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   11e88:	mov	r1, r0
   11e8c:	mov	r0, r4
   11e90:	bl	12820 <__assert_fail@plt+0x1714>
   11e94:	add	r3, sp, #8
   11e98:	mov	r1, r4
   11e9c:	mov	r2, r0
   11ea0:	add	r0, sp, #32
   11ea4:	bl	12f1c <__assert_fail@plt+0x1e10>
   11ea8:	cmn	r0, #1
   11eac:	str	r0, [sp, #24]
   11eb0:	beq	11f20 <__assert_fail@plt+0xe14>
   11eb4:	cmn	r0, #2
   11eb8:	beq	11f34 <__assert_fail@plt+0xe28>
   11ebc:	cmp	r0, #0
   11ec0:	bne	11f50 <__assert_fail@plt+0xe44>
   11ec4:	ldr	r4, [sp, #20]
   11ec8:	str	r5, [sp, #24]
   11ecc:	ldrb	r3, [r4]
   11ed0:	cmp	r3, #0
   11ed4:	bne	124ac <__assert_fail@plt+0x13a0>
   11ed8:	ldr	r7, [sp, #32]
   11edc:	cmp	r7, #0
   11ee0:	bne	12294 <__assert_fail@plt+0x1188>
   11ee4:	add	r0, sp, #8
   11ee8:	strb	r5, [sp, #28]
   11eec:	bl	10ed8 <mbsinit@plt>
   11ef0:	strb	r5, [sp, #16]
   11ef4:	cmp	r0, #0
   11ef8:	strbne	r6, [sp, #4]
   11efc:	cmp	r7, #0
   11f00:	bne	11e58 <__assert_fail@plt+0xd4c>
   11f04:	bl	110f4 <abort@plt>
   11f08:	add	r0, sp, #8
   11f0c:	bl	10ed8 <mbsinit@plt>
   11f10:	cmp	r0, #0
   11f14:	beq	12498 <__assert_fail@plt+0x138c>
   11f18:	strb	r5, [sp, #4]
   11f1c:	b	11e84 <__assert_fail@plt+0xd78>
   11f20:	str	r5, [sp, #24]
   11f24:	strb	r6, [sp, #28]
   11f28:	ldr	r7, [sp, #32]
   11f2c:	ldr	r4, [sp, #20]
   11f30:	b	11e5c <__assert_fail@plt+0xd50>
   11f34:	ldr	r4, [sp, #20]
   11f38:	mov	r0, r4
   11f3c:	bl	10fe0 <strlen@plt>
   11f40:	strb	r6, [sp, #28]
   11f44:	ldr	r7, [sp, #32]
   11f48:	str	r0, [sp, #24]
   11f4c:	b	11e5c <__assert_fail@plt+0xd50>
   11f50:	ldr	r7, [sp, #32]
   11f54:	b	11ee4 <__assert_fail@plt+0xdd8>
   11f58:	cmp	r3, #0
   11f5c:	beq	122e4 <__assert_fail@plt+0x11d8>
   11f60:	mov	r0, r7
   11f64:	bl	11010 <iswalnum@plt>
   11f68:	clz	fp, r0
   11f6c:	lsr	fp, fp, #5
   11f70:	str	r9, [sp, #20]
   11f74:	strb	r6, [sp, #4]
   11f78:	str	r6, [sp, #8]
   11f7c:	str	r6, [sp, #12]
   11f80:	strb	r6, [sp, #16]
   11f84:	str	sl, [sp, #76]	; 0x4c
   11f88:	strb	r6, [sp, #60]	; 0x3c
   11f8c:	str	r6, [sp, #64]	; 0x40
   11f90:	strb	r6, [sp, #72]	; 0x48
   11f94:	str	r6, [sp, #68]	; 0x44
   11f98:	mov	r5, sl
   11f9c:	mov	r7, #1
   11fa0:	b	12058 <__assert_fail@plt+0xf4c>
   11fa4:	ldrb	r3, [r5]
   11fa8:	and	r2, r3, #31
   11fac:	lsr	r3, r3, #5
   11fb0:	ldr	r3, [r8, r3, lsl #2]
   11fb4:	lsr	r3, r3, r2
   11fb8:	tst	r3, #1
   11fbc:	beq	12234 <__assert_fail@plt+0x1128>
   11fc0:	str	r7, [sp, #80]	; 0x50
   11fc4:	ldrb	r4, [r5]
   11fc8:	strb	r7, [sp, #84]	; 0x54
   11fcc:	strb	r7, [sp, #72]	; 0x48
   11fd0:	cmp	r4, #0
   11fd4:	str	r4, [sp, #88]	; 0x58
   11fd8:	beq	120d4 <__assert_fail@plt+0xfc8>
   11fdc:	ldrb	r3, [sp, #16]
   11fe0:	cmp	r3, #0
   11fe4:	bne	12220 <__assert_fail@plt+0x1114>
   11fe8:	ldrb	r3, [sp, #4]
   11fec:	ldr	r4, [sp, #20]
   11ff0:	cmp	r3, #0
   11ff4:	bne	121c0 <__assert_fail@plt+0x10b4>
   11ff8:	ldrb	r3, [r4]
   11ffc:	and	r2, r3, #31
   12000:	lsr	r3, r3, #5
   12004:	ldr	r3, [r8, r3, lsl #2]
   12008:	lsr	r3, r3, r2
   1200c:	tst	r3, #1
   12010:	beq	121ac <__assert_fail@plt+0x10a0>
   12014:	str	r7, [sp, #24]
   12018:	ldrb	r4, [r4]
   1201c:	strb	r7, [sp, #28]
   12020:	strb	r7, [sp, #16]
   12024:	str	r4, [sp, #32]
   12028:	cmp	r4, #0
   1202c:	beq	11f04 <__assert_fail@plt+0xdf8>
   12030:	ldr	r4, [sp, #20]
   12034:	ldr	r5, [sp, #76]	; 0x4c
   12038:	ldr	r3, [sp, #24]
   1203c:	ldr	r2, [sp, #80]	; 0x50
   12040:	add	r4, r4, r3
   12044:	add	r5, r5, r2
   12048:	strb	r6, [sp, #16]
   1204c:	strb	r6, [sp, #72]	; 0x48
   12050:	str	r4, [sp, #20]
   12054:	str	r5, [sp, #76]	; 0x4c
   12058:	ldrb	r3, [sp, #60]	; 0x3c
   1205c:	cmp	r3, #0
   12060:	beq	11fa4 <__assert_fail@plt+0xe98>
   12064:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   12068:	mov	r1, r0
   1206c:	mov	r0, r5
   12070:	bl	12820 <__assert_fail@plt+0x1714>
   12074:	add	r3, sp, #64	; 0x40
   12078:	mov	r1, r5
   1207c:	mov	r2, r0
   12080:	add	r0, sp, #88	; 0x58
   12084:	bl	12f1c <__assert_fail@plt+0x1e10>
   12088:	cmn	r0, #1
   1208c:	str	r0, [sp, #80]	; 0x50
   12090:	strbeq	r6, [sp, #84]	; 0x54
   12094:	streq	r7, [sp, #80]	; 0x50
   12098:	strbeq	r7, [sp, #72]	; 0x48
   1209c:	beq	11fdc <__assert_fail@plt+0xed0>
   120a0:	cmn	r0, #2
   120a4:	beq	1225c <__assert_fail@plt+0x1150>
   120a8:	cmp	r0, #0
   120ac:	beq	12274 <__assert_fail@plt+0x1168>
   120b0:	ldr	r4, [sp, #88]	; 0x58
   120b4:	add	r0, sp, #64	; 0x40
   120b8:	strb	r7, [sp, #84]	; 0x54
   120bc:	bl	10ed8 <mbsinit@plt>
   120c0:	strb	r7, [sp, #72]	; 0x48
   120c4:	cmp	r0, #0
   120c8:	strbne	r6, [sp, #60]	; 0x3c
   120cc:	cmp	r4, #0
   120d0:	bne	11fdc <__assert_fail@plt+0xed0>
   120d4:	ldrb	r3, [sp, #16]
   120d8:	cmp	r3, #0
   120dc:	bne	1236c <__assert_fail@plt+0x1260>
   120e0:	ldrb	r3, [sp, #4]
   120e4:	ldr	r4, [sp, #20]
   120e8:	cmp	r3, #0
   120ec:	bne	12304 <__assert_fail@plt+0x11f8>
   120f0:	ldrb	r3, [r4]
   120f4:	and	r2, r3, #31
   120f8:	lsr	r3, r3, #5
   120fc:	ldr	r3, [r8, r3, lsl #2]
   12100:	lsr	r3, r3, r2
   12104:	tst	r3, #1
   12108:	beq	122ec <__assert_fail@plt+0x11e0>
   1210c:	mov	r3, #1
   12110:	str	r3, [sp, #24]
   12114:	ldrb	r4, [r4]
   12118:	strb	r3, [sp, #28]
   1211c:	strb	r3, [sp, #16]
   12120:	str	r4, [sp, #32]
   12124:	cmp	r4, #0
   12128:	beq	12148 <__assert_fail@plt+0x103c>
   1212c:	ldrb	r3, [sp, #28]
   12130:	cmp	r3, #0
   12134:	beq	12148 <__assert_fail@plt+0x103c>
   12138:	mov	r0, r4
   1213c:	bl	11010 <iswalnum@plt>
   12140:	cmp	r0, #0
   12144:	bne	12150 <__assert_fail@plt+0x1044>
   12148:	cmp	fp, #0
   1214c:	bne	11dd4 <__assert_fail@plt+0xcc8>
   12150:	str	r9, [sp, #20]
   12154:	strb	r6, [sp, #4]
   12158:	str	r6, [sp, #8]
   1215c:	str	r6, [sp, #12]
   12160:	strb	r6, [sp, #16]
   12164:	ldrb	r3, [r9]
   12168:	and	r2, r3, #31
   1216c:	lsr	r3, r3, #5
   12170:	ldr	r3, [r8, r3, lsl #2]
   12174:	lsr	r3, r3, r2
   12178:	tst	r3, #1
   1217c:	beq	12380 <__assert_fail@plt+0x1274>
   12180:	mov	r3, #1
   12184:	str	r3, [sp, #24]
   12188:	ldrb	r4, [r9]
   1218c:	strb	r3, [sp, #28]
   12190:	strb	r3, [sp, #16]
   12194:	str	r4, [sp, #32]
   12198:	cmp	r4, #0
   1219c:	beq	11dd0 <__assert_fail@plt+0xcc4>
   121a0:	ldr	r4, [sp, #24]
   121a4:	add	r4, r9, r4
   121a8:	b	11d34 <__assert_fail@plt+0xc28>
   121ac:	add	r0, sp, #8
   121b0:	bl	10ed8 <mbsinit@plt>
   121b4:	cmp	r0, #0
   121b8:	beq	12498 <__assert_fail@plt+0x138c>
   121bc:	strb	r7, [sp, #4]
   121c0:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   121c4:	mov	r1, r0
   121c8:	mov	r0, r4
   121cc:	bl	12820 <__assert_fail@plt+0x1714>
   121d0:	add	r3, sp, #8
   121d4:	mov	r1, r4
   121d8:	mov	r2, r0
   121dc:	add	r0, sp, #32
   121e0:	bl	12f1c <__assert_fail@plt+0x1e10>
   121e4:	cmn	r0, #1
   121e8:	str	r0, [sp, #24]
   121ec:	beq	1224c <__assert_fail@plt+0x1140>
   121f0:	cmn	r0, #2
   121f4:	beq	122a8 <__assert_fail@plt+0x119c>
   121f8:	cmp	r0, #0
   121fc:	beq	122c0 <__assert_fail@plt+0x11b4>
   12200:	ldr	r4, [sp, #32]
   12204:	add	r0, sp, #8
   12208:	strb	r7, [sp, #28]
   1220c:	bl	10ed8 <mbsinit@plt>
   12210:	strb	r7, [sp, #16]
   12214:	cmp	r0, #0
   12218:	strbne	r6, [sp, #4]
   1221c:	b	12028 <__assert_fail@plt+0xf1c>
   12220:	ldrb	r3, [sp, #28]
   12224:	cmp	r3, #0
   12228:	ldrne	r4, [sp, #32]
   1222c:	beq	12030 <__assert_fail@plt+0xf24>
   12230:	b	12028 <__assert_fail@plt+0xf1c>
   12234:	add	r0, sp, #64	; 0x40
   12238:	bl	10ed8 <mbsinit@plt>
   1223c:	cmp	r0, #0
   12240:	beq	12498 <__assert_fail@plt+0x138c>
   12244:	strb	r7, [sp, #60]	; 0x3c
   12248:	b	12064 <__assert_fail@plt+0xf58>
   1224c:	str	r7, [sp, #24]
   12250:	strb	r6, [sp, #28]
   12254:	ldr	r4, [sp, #20]
   12258:	b	12034 <__assert_fail@plt+0xf28>
   1225c:	ldr	r0, [sp, #76]	; 0x4c
   12260:	bl	10fe0 <strlen@plt>
   12264:	strb	r6, [sp, #84]	; 0x54
   12268:	strb	r7, [sp, #72]	; 0x48
   1226c:	str	r0, [sp, #80]	; 0x50
   12270:	b	11fdc <__assert_fail@plt+0xed0>
   12274:	ldr	r3, [sp, #76]	; 0x4c
   12278:	str	r7, [sp, #80]	; 0x50
   1227c:	ldrb	r3, [r3]
   12280:	cmp	r3, #0
   12284:	bne	124ac <__assert_fail@plt+0x13a0>
   12288:	ldr	r4, [sp, #88]	; 0x58
   1228c:	cmp	r4, #0
   12290:	beq	120b4 <__assert_fail@plt+0xfa8>
   12294:	ldr	r3, [pc, #560]	; 124cc <__assert_fail@plt+0x13c0>
   12298:	mov	r2, #179	; 0xb3
   1229c:	ldr	r1, [pc, #556]	; 124d0 <__assert_fail@plt+0x13c4>
   122a0:	ldr	r0, [pc, #556]	; 124d4 <__assert_fail@plt+0x13c8>
   122a4:	bl	1110c <__assert_fail@plt>
   122a8:	ldr	r4, [sp, #20]
   122ac:	mov	r0, r4
   122b0:	bl	10fe0 <strlen@plt>
   122b4:	strb	r6, [sp, #28]
   122b8:	str	r0, [sp, #24]
   122bc:	b	12034 <__assert_fail@plt+0xf28>
   122c0:	ldr	r4, [sp, #20]
   122c4:	str	r7, [sp, #24]
   122c8:	ldrb	r3, [r4]
   122cc:	cmp	r3, #0
   122d0:	bne	124ac <__assert_fail@plt+0x13a0>
   122d4:	ldr	r4, [sp, #32]
   122d8:	cmp	r4, #0
   122dc:	beq	12204 <__assert_fail@plt+0x10f8>
   122e0:	b	12294 <__assert_fail@plt+0x1188>
   122e4:	mov	fp, #1
   122e8:	b	11f70 <__assert_fail@plt+0xe64>
   122ec:	add	r0, sp, #8
   122f0:	bl	10ed8 <mbsinit@plt>
   122f4:	cmp	r0, #0
   122f8:	beq	12498 <__assert_fail@plt+0x138c>
   122fc:	mov	r3, #1
   12300:	strb	r3, [sp, #4]
   12304:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   12308:	mov	r1, r0
   1230c:	mov	r0, r4
   12310:	bl	12820 <__assert_fail@plt+0x1714>
   12314:	add	r3, sp, #8
   12318:	mov	r1, r4
   1231c:	mov	r2, r0
   12320:	add	r0, sp, #32
   12324:	bl	12f1c <__assert_fail@plt+0x1e10>
   12328:	cmn	r0, #1
   1232c:	str	r0, [sp, #24]
   12330:	beq	12400 <__assert_fail@plt+0x12f4>
   12334:	cmn	r0, #2
   12338:	beq	12470 <__assert_fail@plt+0x1364>
   1233c:	cmp	r0, #0
   12340:	bne	1243c <__assert_fail@plt+0x1330>
   12344:	ldr	r3, [sp, #20]
   12348:	mov	r2, #1
   1234c:	str	r2, [sp, #24]
   12350:	ldrb	r3, [r3]
   12354:	cmp	r3, #0
   12358:	bne	124ac <__assert_fail@plt+0x13a0>
   1235c:	ldr	r4, [sp, #32]
   12360:	cmp	r4, #0
   12364:	beq	12440 <__assert_fail@plt+0x1334>
   12368:	bl	11ce0 <__assert_fail@plt+0xbd4>
   1236c:	ldrb	r3, [sp, #28]
   12370:	ldr	r4, [sp, #32]
   12374:	cmp	r3, #0
   12378:	beq	1212c <__assert_fail@plt+0x1020>
   1237c:	b	12124 <__assert_fail@plt+0x1018>
   12380:	add	r0, sp, #8
   12384:	bl	10ed8 <mbsinit@plt>
   12388:	cmp	r0, #0
   1238c:	beq	12498 <__assert_fail@plt+0x138c>
   12390:	mov	r4, #1
   12394:	strb	r4, [sp, #4]
   12398:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   1239c:	mov	r1, r0
   123a0:	mov	r0, r9
   123a4:	bl	12820 <__assert_fail@plt+0x1714>
   123a8:	add	r3, sp, #8
   123ac:	mov	r1, r9
   123b0:	mov	r2, r0
   123b4:	add	r0, sp, #32
   123b8:	bl	12f1c <__assert_fail@plt+0x1e10>
   123bc:	cmn	r0, #1
   123c0:	str	r0, [sp, #24]
   123c4:	streq	r4, [sp, #24]
   123c8:	beq	121a0 <__assert_fail@plt+0x1094>
   123cc:	cmn	r0, #2
   123d0:	beq	12460 <__assert_fail@plt+0x1354>
   123d4:	cmp	r0, #0
   123d8:	bne	12418 <__assert_fail@plt+0x130c>
   123dc:	ldr	r3, [sp, #20]
   123e0:	str	r4, [sp, #24]
   123e4:	ldrb	r3, [r3]
   123e8:	cmp	r3, #0
   123ec:	bne	124ac <__assert_fail@plt+0x13a0>
   123f0:	ldr	r4, [sp, #32]
   123f4:	cmp	r4, #0
   123f8:	beq	1241c <__assert_fail@plt+0x1310>
   123fc:	b	12368 <__assert_fail@plt+0x125c>
   12400:	mov	r3, #1
   12404:	strb	r6, [sp, #28]
   12408:	str	r3, [sp, #24]
   1240c:	strb	r3, [sp, #16]
   12410:	ldr	r4, [sp, #32]
   12414:	b	1212c <__assert_fail@plt+0x1020>
   12418:	ldr	r4, [sp, #32]
   1241c:	mov	r5, #1
   12420:	add	r0, sp, #8
   12424:	strb	r5, [sp, #28]
   12428:	bl	10ed8 <mbsinit@plt>
   1242c:	strb	r5, [sp, #16]
   12430:	cmp	r0, #0
   12434:	strbne	r6, [sp, #4]
   12438:	b	12198 <__assert_fail@plt+0x108c>
   1243c:	ldr	r4, [sp, #32]
   12440:	mov	r5, #1
   12444:	add	r0, sp, #8
   12448:	strb	r5, [sp, #28]
   1244c:	bl	10ed8 <mbsinit@plt>
   12450:	strb	r5, [sp, #16]
   12454:	cmp	r0, #0
   12458:	strbne	r6, [sp, #4]
   1245c:	b	12124 <__assert_fail@plt+0x1018>
   12460:	ldr	r0, [sp, #20]
   12464:	bl	10fe0 <strlen@plt>
   12468:	str	r0, [sp, #24]
   1246c:	b	121a0 <__assert_fail@plt+0x1094>
   12470:	ldr	r0, [sp, #20]
   12474:	bl	10fe0 <strlen@plt>
   12478:	mov	r3, #1
   1247c:	strb	r6, [sp, #28]
   12480:	strb	r3, [sp, #16]
   12484:	ldr	r4, [sp, #32]
   12488:	str	r0, [sp, #24]
   1248c:	b	1212c <__assert_fail@plt+0x1020>
   12490:	mov	fp, #1
   12494:	b	11dd4 <__assert_fail@plt+0xcc8>
   12498:	ldr	r3, [pc, #44]	; 124cc <__assert_fail@plt+0x13c0>
   1249c:	mov	r2, #150	; 0x96
   124a0:	ldr	r1, [pc, #40]	; 124d0 <__assert_fail@plt+0x13c4>
   124a4:	ldr	r0, [pc, #44]	; 124d8 <__assert_fail@plt+0x13cc>
   124a8:	bl	1110c <__assert_fail@plt>
   124ac:	ldr	r3, [pc, #24]	; 124cc <__assert_fail@plt+0x13c0>
   124b0:	mov	r2, #178	; 0xb2
   124b4:	ldr	r1, [pc, #20]	; 124d0 <__assert_fail@plt+0x13c4>
   124b8:	ldr	r0, [pc, #28]	; 124dc <__assert_fail@plt+0x13d0>
   124bc:	bl	1110c <__assert_fail@plt>
   124c0:	bl	10f08 <__stack_chk_fail@plt>
   124c4:	andeq	r5, r2, r8, lsl #30
   124c8:	andeq	r5, r1, r4, lsr ip
   124cc:	andeq	r5, r1, r0, lsr fp
   124d0:	andeq	r5, r1, r4, asr #22
   124d4:	andeq	r5, r1, r0, asr fp
   124d8:	andeq	r5, r1, r4, ror #22
   124dc:	andeq	r5, r1, ip, ror fp
   124e0:	push	{r4, r5, r6, lr}
   124e4:	mov	r1, r0
   124e8:	mov	r4, r0
   124ec:	sub	sp, sp, #8
   124f0:	mov	r2, #5
   124f4:	mov	r0, #0
   124f8:	bl	10ef0 <dcgettext@plt>
   124fc:	cmp	r4, r0
   12500:	mov	r5, r0
   12504:	beq	12518 <__assert_fail@plt+0x140c>
   12508:	mov	r1, r4
   1250c:	bl	11d04 <__assert_fail@plt+0xbf8>
   12510:	cmp	r0, #0
   12514:	beq	12524 <__assert_fail@plt+0x1418>
   12518:	mov	r0, r5
   1251c:	add	sp, sp, #8
   12520:	pop	{r4, r5, r6, pc}
   12524:	mov	r0, r5
   12528:	bl	10fe0 <strlen@plt>
   1252c:	mov	r6, r0
   12530:	mov	r0, r4
   12534:	bl	10fe0 <strlen@plt>
   12538:	add	r0, r6, r0
   1253c:	add	r0, r0, #4
   12540:	bl	12dc4 <__assert_fail@plt+0x1cb8>
   12544:	str	r5, [sp]
   12548:	str	r4, [sp, #4]
   1254c:	ldr	r3, [pc, #28]	; 12570 <__assert_fail@plt+0x1464>
   12550:	mvn	r2, #0
   12554:	mov	r1, #1
   12558:	mov	r6, r0
   1255c:	bl	1101c <__sprintf_chk@plt>
   12560:	mov	r5, r6
   12564:	mov	r0, r5
   12568:	add	sp, sp, #8
   1256c:	pop	{r4, r5, r6, pc}
   12570:	muleq	r1, r4, fp
   12574:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12578:	mov	r2, #5
   1257c:	sub	sp, sp, #8
   12580:	mov	r6, r0
   12584:	mov	r5, r1
   12588:	mov	r1, r0
   1258c:	mov	r0, #0
   12590:	bl	10ef0 <dcgettext@plt>
   12594:	mov	r8, r0
   12598:	bl	13058 <__assert_fail@plt+0x1f4c>
   1259c:	ldr	r1, [pc, #624]	; 12814 <__assert_fail@plt+0x1708>
   125a0:	mov	r9, r0
   125a4:	bl	12f9c <__assert_fail@plt+0x1e90>
   125a8:	subs	r4, r0, #0
   125ac:	bne	126c4 <__assert_fail@plt+0x15b8>
   125b0:	subs	r9, r5, #0
   125b4:	movne	r7, r5
   125b8:	beq	12634 <__assert_fail@plt+0x1528>
   125bc:	mov	r1, r6
   125c0:	mov	r0, r8
   125c4:	bl	10e78 <strcmp@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	12628 <__assert_fail@plt+0x151c>
   125d0:	mov	r1, r6
   125d4:	mov	r0, r8
   125d8:	bl	11d04 <__assert_fail@plt+0xbf8>
   125dc:	subs	r6, r0, #0
   125e0:	bne	12610 <__assert_fail@plt+0x1504>
   125e4:	cmp	r5, #0
   125e8:	beq	12640 <__assert_fail@plt+0x1534>
   125ec:	mov	r1, r5
   125f0:	mov	r0, r8
   125f4:	bl	11d04 <__assert_fail@plt+0xbf8>
   125f8:	cmp	r0, #0
   125fc:	beq	12640 <__assert_fail@plt+0x1534>
   12600:	cmp	r6, #0
   12604:	beq	12610 <__assert_fail@plt+0x1504>
   12608:	mov	r0, r6
   1260c:	bl	10eb4 <free@plt>
   12610:	cmp	r4, #0
   12614:	moveq	r7, r8
   12618:	beq	12628 <__assert_fail@plt+0x151c>
   1261c:	mov	r0, r4
   12620:	bl	10eb4 <free@plt>
   12624:	mov	r7, r8
   12628:	mov	r0, r7
   1262c:	add	sp, sp, #8
   12630:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12634:	mov	r7, r6
   12638:	mov	r4, r5
   1263c:	b	125bc <__assert_fail@plt+0x14b0>
   12640:	cmp	r9, #0
   12644:	beq	1265c <__assert_fail@plt+0x1550>
   12648:	mov	r1, r9
   1264c:	mov	r0, r8
   12650:	bl	11d04 <__assert_fail@plt+0xbf8>
   12654:	cmp	r0, #0
   12658:	bne	12600 <__assert_fail@plt+0x14f4>
   1265c:	mov	r0, r8
   12660:	bl	10fe0 <strlen@plt>
   12664:	mov	r5, r0
   12668:	mov	r0, r7
   1266c:	bl	10fe0 <strlen@plt>
   12670:	add	r0, r5, r0
   12674:	add	r0, r0, #4
   12678:	bl	12dc4 <__assert_fail@plt+0x1cb8>
   1267c:	str	r7, [sp, #4]
   12680:	str	r8, [sp]
   12684:	ldr	r3, [pc, #396]	; 12818 <__assert_fail@plt+0x170c>
   12688:	mvn	r2, #0
   1268c:	mov	r1, #1
   12690:	mov	r5, r0
   12694:	bl	1101c <__sprintf_chk@plt>
   12698:	cmp	r6, #0
   1269c:	beq	126a8 <__assert_fail@plt+0x159c>
   126a0:	mov	r0, r6
   126a4:	bl	10eb4 <free@plt>
   126a8:	cmp	r4, #0
   126ac:	moveq	r7, r5
   126b0:	beq	12628 <__assert_fail@plt+0x151c>
   126b4:	mov	r0, r4
   126b8:	bl	10eb4 <free@plt>
   126bc:	mov	r7, r5
   126c0:	b	12628 <__assert_fail@plt+0x151c>
   126c4:	mov	r2, r9
   126c8:	ldr	r1, [pc, #324]	; 12814 <__assert_fail@plt+0x1708>
   126cc:	mov	r0, r5
   126d0:	bl	12ef0 <__assert_fail@plt+0x1de4>
   126d4:	mov	r7, r0
   126d8:	mov	r0, r9
   126dc:	bl	10fe0 <strlen@plt>
   126e0:	mov	r4, r0
   126e4:	add	r0, r0, #11
   126e8:	bl	12dc4 <__assert_fail@plt+0x1cb8>
   126ec:	mov	r2, r4
   126f0:	mov	r1, r9
   126f4:	mov	sl, r0
   126f8:	bl	10ecc <memcpy@plt>
   126fc:	ldr	r3, [pc, #280]	; 1281c <__assert_fail@plt+0x1710>
   12700:	add	ip, sl, r4
   12704:	mov	r2, sl
   12708:	ldm	r3!, {r0, r1}
   1270c:	ldrh	lr, [r3]
   12710:	ldrb	r3, [r3, #2]
   12714:	str	r0, [sl, r4]
   12718:	str	r1, [ip, #4]
   1271c:	strh	lr, [ip, #8]
   12720:	strb	r3, [ip, #10]
   12724:	ldr	r1, [pc, #232]	; 12814 <__assert_fail@plt+0x1708>
   12728:	mov	r0, r5
   1272c:	bl	12ef0 <__assert_fail@plt+0x1de4>
   12730:	mov	r4, r0
   12734:	mov	r0, sl
   12738:	bl	10eb4 <free@plt>
   1273c:	cmp	r4, #0
   12740:	beq	127e0 <__assert_fail@plt+0x16d4>
   12744:	mov	r1, #63	; 0x3f
   12748:	mov	r0, r4
   1274c:	bl	10fec <strchr@plt>
   12750:	cmp	r0, #0
   12754:	beq	127a4 <__assert_fail@plt+0x1698>
   12758:	mov	r0, r4
   1275c:	bl	10eb4 <free@plt>
   12760:	cmp	r7, #0
   12764:	beq	127e8 <__assert_fail@plt+0x16dc>
   12768:	mov	r1, r6
   1276c:	mov	r0, r8
   12770:	bl	10e78 <strcmp@plt>
   12774:	cmp	r0, #0
   12778:	beq	12628 <__assert_fail@plt+0x151c>
   1277c:	mov	r9, #0
   12780:	mov	r4, r9
   12784:	mov	r1, r6
   12788:	mov	r0, r8
   1278c:	bl	11d04 <__assert_fail@plt+0xbf8>
   12790:	cmp	r0, #0
   12794:	bne	1280c <__assert_fail@plt+0x1700>
   12798:	mov	r5, r7
   1279c:	mov	r6, r7
   127a0:	b	125e4 <__assert_fail@plt+0x14d8>
   127a4:	cmp	r7, #0
   127a8:	beq	127fc <__assert_fail@plt+0x16f0>
   127ac:	mov	r1, r6
   127b0:	mov	r0, r8
   127b4:	bl	10e78 <strcmp@plt>
   127b8:	cmp	r0, #0
   127bc:	movne	r9, r4
   127c0:	bne	12784 <__assert_fail@plt+0x1678>
   127c4:	cmp	r7, r4
   127c8:	beq	12628 <__assert_fail@plt+0x151c>
   127cc:	mov	r0, r4
   127d0:	bl	10eb4 <free@plt>
   127d4:	mov	r0, r7
   127d8:	add	sp, sp, #8
   127dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127e0:	cmp	r7, #0
   127e4:	bne	12768 <__assert_fail@plt+0x165c>
   127e8:	mov	r9, #0
   127ec:	mov	r5, r9
   127f0:	mov	r4, r9
   127f4:	mov	r7, r6
   127f8:	b	125bc <__assert_fail@plt+0x14b0>
   127fc:	mov	r5, r7
   12800:	mov	r9, r4
   12804:	mov	r7, r4
   12808:	b	125bc <__assert_fail@plt+0x14b0>
   1280c:	mov	r6, r7
   12810:	b	12608 <__assert_fail@plt+0x14fc>
   12814:	muleq	r1, ip, fp
   12818:	muleq	r1, r4, fp
   1281c:	andeq	r5, r1, r4, lsr #23
   12820:	push	{r4, r5, r6, lr}
   12824:	mov	r2, r1
   12828:	mov	r4, r1
   1282c:	mov	r1, #0
   12830:	mov	r5, r0
   12834:	bl	11070 <memchr@plt>
   12838:	cmp	r0, #0
   1283c:	subne	r0, r0, r5
   12840:	addne	r0, r0, #1
   12844:	moveq	r0, r4
   12848:	pop	{r4, r5, r6, pc}
   1284c:	push	{r4, lr}
   12850:	mov	r2, #170	; 0xaa
   12854:	ldr	r3, [pc, #8]	; 12864 <__assert_fail@plt+0x1758>
   12858:	ldr	r1, [pc, #8]	; 12868 <__assert_fail@plt+0x175c>
   1285c:	ldr	r0, [pc, #8]	; 1286c <__assert_fail@plt+0x1760>
   12860:	bl	1110c <__assert_fail@plt>
   12864:			; <UNDEFINED> instruction: 0x00015bb0
   12868:	andeq	r5, r1, r4, asr #23
   1286c:	andeq	r5, r1, r0, asr fp
   12870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12874:	sub	sp, sp, #76	; 0x4c
   12878:	ldr	r7, [pc, #1232]	; 12d50 <__assert_fail@plt+0x1c44>
   1287c:	mov	r5, r1
   12880:	ldr	r3, [r7]
   12884:	str	r3, [sp, #68]	; 0x44
   12888:	bl	10efc <strdup@plt>
   1288c:	subs	r6, r0, #0
   12890:	beq	12d24 <__assert_fail@plt+0x1c18>
   12894:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   12898:	cmp	r0, #1
   1289c:	bls	12ab4 <__assert_fail@plt+0x19a8>
   128a0:	cmp	r5, #0
   128a4:	bne	12ba8 <__assert_fail@plt+0x1a9c>
   128a8:	add	r9, sp, #16
   128ac:	mov	r0, r6
   128b0:	str	r6, [sp, #28]
   128b4:	bl	10fe0 <strlen@plt>
   128b8:	mov	r5, #0
   128bc:	str	r5, [sp, #16]
   128c0:	strb	r5, [sp, #12]
   128c4:	str	r5, [r9, #4]
   128c8:	strb	r5, [sp, #24]
   128cc:	add	sl, r6, r0
   128d0:	cmp	sl, r6
   128d4:	str	sl, [sp, #8]
   128d8:	movhi	r4, r6
   128dc:	movhi	r8, #1
   128e0:	bhi	12918 <__assert_fail@plt+0x180c>
   128e4:	b	12a6c <__assert_fail@plt+0x1960>
   128e8:	ldrb	r3, [sp, #36]	; 0x24
   128ec:	cmp	r3, #0
   128f0:	beq	1299c <__assert_fail@plt+0x1890>
   128f4:	ldr	r0, [sp, #40]	; 0x28
   128f8:	bl	10fd4 <iswspace@plt>
   128fc:	clz	r5, r0
   12900:	lsr	r5, r5, #5
   12904:	mov	r3, #0
   12908:	cmp	r4, sl
   1290c:	str	r4, [sp, #28]
   12910:	strb	r3, [sp, #24]
   12914:	bcs	12b7c <__assert_fail@plt+0x1a70>
   12918:	ldrb	r3, [sp, #12]
   1291c:	cmp	r3, #0
   12920:	bne	129b8 <__assert_fail@plt+0x18ac>
   12924:	ldrb	r3, [r4]
   12928:	ldr	r2, [pc, #1060]	; 12d54 <__assert_fail@plt+0x1c48>
   1292c:	and	r1, r3, #31
   12930:	lsr	r3, r3, #5
   12934:	ldr	r3, [r2, r3, lsl #2]
   12938:	lsr	r3, r3, r1
   1293c:	tst	r3, #1
   12940:	beq	129a4 <__assert_fail@plt+0x1898>
   12944:	ldr	fp, [sp, #28]
   12948:	str	r8, [sp, #32]
   1294c:	ldr	sl, [sp, #8]
   12950:	ldrb	r2, [r4]
   12954:	add	r4, fp, #1
   12958:	strb	r8, [sp, #36]	; 0x24
   1295c:	str	r2, [sp, #40]	; 0x28
   12960:	cmp	r5, #0
   12964:	strb	r8, [sp, #24]
   12968:	beq	128e8 <__assert_fail@plt+0x17dc>
   1296c:	cmp	r5, #1
   12970:	beq	12a88 <__assert_fail@plt+0x197c>
   12974:	cmp	r5, #2
   12978:	bne	1299c <__assert_fail@plt+0x1890>
   1297c:	ldrb	r3, [sp, #36]	; 0x24
   12980:	cmp	r3, #0
   12984:	beq	1299c <__assert_fail@plt+0x1890>
   12988:	ldr	r0, [sp, #40]	; 0x28
   1298c:	bl	10fd4 <iswspace@plt>
   12990:	cmp	r0, #0
   12994:	moveq	r5, #1
   12998:	b	12904 <__assert_fail@plt+0x17f8>
   1299c:	mov	r5, #1
   129a0:	b	12904 <__assert_fail@plt+0x17f8>
   129a4:	mov	r0, r9
   129a8:	bl	10ed8 <mbsinit@plt>
   129ac:	cmp	r0, #0
   129b0:	beq	12d3c <__assert_fail@plt+0x1c30>
   129b4:	strb	r8, [sp, #12]
   129b8:	sub	r2, sl, r4
   129bc:	mov	r1, r4
   129c0:	mov	r3, r9
   129c4:	add	r0, sp, #40	; 0x28
   129c8:	bl	12f1c <__assert_fail@plt+0x1e10>
   129cc:	cmn	r0, #1
   129d0:	mov	r4, r0
   129d4:	str	r0, [sp, #32]
   129d8:	beq	12b60 <__assert_fail@plt+0x1a54>
   129dc:	cmn	r0, #2
   129e0:	ldr	fp, [sp, #28]
   129e4:	beq	12b8c <__assert_fail@plt+0x1a80>
   129e8:	cmp	r0, #0
   129ec:	bne	12a10 <__assert_fail@plt+0x1904>
   129f0:	str	r8, [sp, #32]
   129f4:	ldrb	r2, [fp]
   129f8:	cmp	r2, #0
   129fc:	bne	12d28 <__assert_fail@plt+0x1c1c>
   12a00:	ldr	r2, [sp, #40]	; 0x28
   12a04:	cmp	r2, #0
   12a08:	bne	12d14 <__assert_fail@plt+0x1c08>
   12a0c:	mov	r4, #1
   12a10:	mov	r0, r9
   12a14:	strb	r8, [sp, #36]	; 0x24
   12a18:	bl	10ed8 <mbsinit@plt>
   12a1c:	add	r4, fp, r4
   12a20:	ldr	sl, [sp, #8]
   12a24:	cmp	r0, #0
   12a28:	movne	r1, #0
   12a2c:	strbne	r1, [sp, #12]
   12a30:	b	12960 <__assert_fail@plt+0x1854>
   12a34:	ldr	r4, [sp, #28]
   12a38:	mov	r3, #1
   12a3c:	mov	r2, #0
   12a40:	str	r3, [sp, #32]
   12a44:	strb	r3, [sp, #24]
   12a48:	strb	r2, [sp, #36]	; 0x24
   12a4c:	mov	r0, r4
   12a50:	bl	10fe0 <strlen@plt>
   12a54:	mov	r1, r4
   12a58:	add	r2, r0, #1
   12a5c:	mov	r0, r6
   12a60:	bl	10ea8 <memmove@plt>
   12a64:	cmp	r5, #1
   12a68:	bne	128ac <__assert_fail@plt+0x17a0>
   12a6c:	ldr	r2, [sp, #68]	; 0x44
   12a70:	ldr	r3, [r7]
   12a74:	mov	r0, r6
   12a78:	cmp	r2, r3
   12a7c:	bne	12d20 <__assert_fail@plt+0x1c14>
   12a80:	add	sp, sp, #76	; 0x4c
   12a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a88:	ldrb	r1, [sp, #36]	; 0x24
   12a8c:	cmp	r1, #0
   12a90:	beq	12904 <__assert_fail@plt+0x17f8>
   12a94:	ldr	r0, [sp, #40]	; 0x28
   12a98:	bl	10fd4 <iswspace@plt>
   12a9c:	ldr	r3, [sp, #4]
   12aa0:	cmp	r0, #0
   12aa4:	movne	r3, fp
   12aa8:	str	r3, [sp, #4]
   12aac:	movne	r5, #2
   12ab0:	b	12904 <__assert_fail@plt+0x17f8>
   12ab4:	cmp	r5, #0
   12ab8:	beq	12b14 <__assert_fail@plt+0x1a08>
   12abc:	ldrb	r4, [r6]
   12ac0:	cmp	r4, #0
   12ac4:	beq	12d18 <__assert_fail@plt+0x1c0c>
   12ac8:	bl	10fbc <__ctype_b_loc@plt>
   12acc:	mov	r8, r6
   12ad0:	ldr	r2, [r0]
   12ad4:	b	12ae4 <__assert_fail@plt+0x19d8>
   12ad8:	ldrb	r4, [r8, #1]!
   12adc:	cmp	r4, #0
   12ae0:	beq	12af4 <__assert_fail@plt+0x19e8>
   12ae4:	lsl	r4, r4, #1
   12ae8:	ldrh	r3, [r2, r4]
   12aec:	tst	r3, #8192	; 0x2000
   12af0:	bne	12ad8 <__assert_fail@plt+0x19cc>
   12af4:	mov	r0, r8
   12af8:	bl	10fe0 <strlen@plt>
   12afc:	mov	r1, r8
   12b00:	add	r2, r0, #1
   12b04:	mov	r0, r6
   12b08:	bl	10ea8 <memmove@plt>
   12b0c:	cmp	r5, #1
   12b10:	beq	12a6c <__assert_fail@plt+0x1960>
   12b14:	mov	r0, r6
   12b18:	bl	10fe0 <strlen@plt>
   12b1c:	sub	r0, r0, #1
   12b20:	adds	r4, r6, r0
   12b24:	bcs	12a6c <__assert_fail@plt+0x1960>
   12b28:	bl	10fbc <__ctype_b_loc@plt>
   12b2c:	mov	r3, r4
   12b30:	mov	ip, #0
   12b34:	ldr	r1, [r0]
   12b38:	b	12b48 <__assert_fail@plt+0x1a3c>
   12b3c:	cmp	r6, r3
   12b40:	strb	ip, [r3, #1]
   12b44:	bhi	12a6c <__assert_fail@plt+0x1960>
   12b48:	ldrb	r2, [r3], #-1
   12b4c:	lsl	r2, r2, #1
   12b50:	ldrh	r2, [r1, r2]
   12b54:	tst	r2, #8192	; 0x2000
   12b58:	bne	12b3c <__assert_fail@plt+0x1a30>
   12b5c:	b	12a6c <__assert_fail@plt+0x1960>
   12b60:	ldr	fp, [sp, #28]
   12b64:	mov	r2, #0
   12b68:	str	r8, [sp, #32]
   12b6c:	add	r4, fp, #1
   12b70:	strb	r2, [sp, #36]	; 0x24
   12b74:	ldr	sl, [sp, #8]
   12b78:	b	12960 <__assert_fail@plt+0x1854>
   12b7c:	cmp	r5, #2
   12b80:	ldreq	r2, [sp, #4]
   12b84:	strbeq	r3, [r2]
   12b88:	b	12a6c <__assert_fail@plt+0x1960>
   12b8c:	ldr	r4, [sp, #8]
   12b90:	mov	r1, #0
   12b94:	sub	r2, r4, fp
   12b98:	str	r2, [sp, #32]
   12b9c:	mov	sl, r4
   12ba0:	strb	r1, [sp, #36]	; 0x24
   12ba4:	b	12960 <__assert_fail@plt+0x1854>
   12ba8:	mov	r0, r6
   12bac:	str	r6, [sp, #28]
   12bb0:	bl	10fe0 <strlen@plt>
   12bb4:	add	r9, sp, #16
   12bb8:	mov	r3, #0
   12bbc:	str	r3, [sp, #16]
   12bc0:	strb	r3, [sp, #12]
   12bc4:	str	r3, [r9, #4]
   12bc8:	strb	r3, [sp, #24]
   12bcc:	add	sl, r6, r0
   12bd0:	cmp	sl, r6
   12bd4:	str	sl, [sp, #8]
   12bd8:	movls	r4, r6
   12bdc:	bls	12a4c <__assert_fail@plt+0x1940>
   12be0:	ldr	fp, [pc, #364]	; 12d54 <__assert_fail@plt+0x1c48>
   12be4:	mov	r4, r6
   12be8:	mov	r8, #1
   12bec:	b	12c58 <__assert_fail@plt+0x1b4c>
   12bf0:	ldrb	r3, [r4]
   12bf4:	and	r1, r3, #31
   12bf8:	lsr	r3, r3, #5
   12bfc:	ldr	r3, [fp, r3, lsl #2]
   12c00:	lsr	r3, r3, r1
   12c04:	tst	r3, #1
   12c08:	beq	12cc0 <__assert_fail@plt+0x1bb4>
   12c0c:	str	r8, [sp, #32]
   12c10:	ldrb	r3, [r4]
   12c14:	ldr	r4, [sp, #28]
   12c18:	strb	r8, [sp, #36]	; 0x24
   12c1c:	mov	sl, r3
   12c20:	strb	r8, [sp, #24]
   12c24:	str	r3, [sp, #40]	; 0x28
   12c28:	mov	r0, sl
   12c2c:	bl	10fd4 <iswspace@plt>
   12c30:	cmp	r0, #0
   12c34:	beq	12a4c <__assert_fail@plt+0x1940>
   12c38:	ldr	r3, [sp, #32]
   12c3c:	ldr	sl, [sp, #8]
   12c40:	add	r4, r4, r3
   12c44:	cmp	r4, sl
   12c48:	mov	r3, #0
   12c4c:	str	r4, [sp, #28]
   12c50:	strb	r3, [sp, #24]
   12c54:	bcs	12a4c <__assert_fail@plt+0x1940>
   12c58:	ldrb	r3, [sp, #12]
   12c5c:	cmp	r3, #0
   12c60:	beq	12bf0 <__assert_fail@plt+0x1ae4>
   12c64:	sub	r2, sl, r4
   12c68:	mov	r1, r4
   12c6c:	mov	r3, r9
   12c70:	add	r0, sp, #40	; 0x28
   12c74:	bl	12f1c <__assert_fail@plt+0x1e10>
   12c78:	cmn	r0, #1
   12c7c:	str	r0, [sp, #32]
   12c80:	beq	12a34 <__assert_fail@plt+0x1928>
   12c84:	cmn	r0, #2
   12c88:	ldr	r4, [sp, #28]
   12c8c:	beq	12cd8 <__assert_fail@plt+0x1bcc>
   12c90:	cmp	r0, #0
   12c94:	beq	12cf8 <__assert_fail@plt+0x1bec>
   12c98:	ldr	sl, [sp, #40]	; 0x28
   12c9c:	mov	r0, r9
   12ca0:	strb	r8, [sp, #36]	; 0x24
   12ca4:	bl	10ed8 <mbsinit@plt>
   12ca8:	cmp	r0, #0
   12cac:	movne	r2, #0
   12cb0:	strbeq	r8, [sp, #24]
   12cb4:	strbne	r8, [sp, #24]
   12cb8:	strbne	r2, [sp, #12]
   12cbc:	b	12c28 <__assert_fail@plt+0x1b1c>
   12cc0:	mov	r0, r9
   12cc4:	bl	10ed8 <mbsinit@plt>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12d3c <__assert_fail@plt+0x1c30>
   12cd0:	strb	r8, [sp, #12]
   12cd4:	b	12c64 <__assert_fail@plt+0x1b58>
   12cd8:	ldr	r3, [sp, #8]
   12cdc:	mov	r2, #0
   12ce0:	sub	r3, r3, r4
   12ce4:	str	r3, [sp, #32]
   12ce8:	mov	r3, #1
   12cec:	strb	r2, [sp, #36]	; 0x24
   12cf0:	strb	r3, [sp, #24]
   12cf4:	b	12a4c <__assert_fail@plt+0x1940>
   12cf8:	str	r8, [sp, #32]
   12cfc:	ldrb	r3, [r4]
   12d00:	cmp	r3, #0
   12d04:	bne	12d28 <__assert_fail@plt+0x1c1c>
   12d08:	ldr	sl, [sp, #40]	; 0x28
   12d0c:	cmp	sl, #0
   12d10:	beq	12c9c <__assert_fail@plt+0x1b90>
   12d14:	bl	1284c <__assert_fail@plt+0x1740>
   12d18:	mov	r8, r6
   12d1c:	b	12af4 <__assert_fail@plt+0x19e8>
   12d20:	bl	10f08 <__stack_chk_fail@plt>
   12d24:	bl	12d68 <__assert_fail@plt+0x1c5c>
   12d28:	ldr	r3, [pc, #40]	; 12d58 <__assert_fail@plt+0x1c4c>
   12d2c:	mov	r2, #169	; 0xa9
   12d30:	ldr	r1, [pc, #36]	; 12d5c <__assert_fail@plt+0x1c50>
   12d34:	ldr	r0, [pc, #36]	; 12d60 <__assert_fail@plt+0x1c54>
   12d38:	bl	1110c <__assert_fail@plt>
   12d3c:	ldr	r3, [pc, #20]	; 12d58 <__assert_fail@plt+0x1c4c>
   12d40:	mov	r2, #142	; 0x8e
   12d44:	ldr	r1, [pc, #16]	; 12d5c <__assert_fail@plt+0x1c50>
   12d48:	ldr	r0, [pc, #20]	; 12d64 <__assert_fail@plt+0x1c58>
   12d4c:	bl	1110c <__assert_fail@plt>
   12d50:	andeq	r5, r2, r8, lsl #30
   12d54:	andeq	r5, r1, r4, lsr ip
   12d58:			; <UNDEFINED> instruction: 0x00015bb0
   12d5c:	andeq	r5, r1, r4, asr #23
   12d60:	andeq	r5, r1, ip, ror fp
   12d64:	andeq	r5, r1, r4, ror #22
   12d68:	ldr	r3, [pc, #44]	; 12d9c <__assert_fail@plt+0x1c90>
   12d6c:	push	{r4, lr}
   12d70:	mov	r2, #5
   12d74:	ldr	r1, [pc, #36]	; 12da0 <__assert_fail@plt+0x1c94>
   12d78:	mov	r0, #0
   12d7c:	ldr	r4, [r3]
   12d80:	bl	10ef0 <dcgettext@plt>
   12d84:	mov	r1, #0
   12d88:	mov	r2, r0
   12d8c:	mov	r0, r4
   12d90:	bl	10f5c <error@plt>
   12d94:	mov	r0, #1
   12d98:	bl	10fc8 <exit@plt>
   12d9c:	andeq	r6, r2, r8, lsl #2
   12da0:	ldrdeq	r5, [r1], -r0
   12da4:	cmp	r0, #0
   12da8:	push	{r4, lr}
   12dac:	bne	12dc0 <__assert_fail@plt+0x1cb4>
   12db0:	mov	r0, #1
   12db4:	bl	10f80 <malloc@plt>
   12db8:	cmp	r0, #0
   12dbc:	popne	{r4, pc}
   12dc0:	bl	12d68 <__assert_fail@plt+0x1c5c>
   12dc4:	push	{r4, lr}
   12dc8:	mov	r4, r0
   12dcc:	bl	10f80 <malloc@plt>
   12dd0:	cmp	r0, #0
   12dd4:	popne	{r4, pc}
   12dd8:	mov	r0, r4
   12ddc:	pop	{r4, lr}
   12de0:	b	12da4 <__assert_fail@plt+0x1c98>
   12de4:	umull	r2, r3, r1, r0
   12de8:	push	{r4, lr}
   12dec:	cmp	r3, #0
   12df0:	bne	12e14 <__assert_fail@plt+0x1d08>
   12df4:	mul	r4, r1, r0
   12df8:	mov	r0, r4
   12dfc:	bl	10f80 <malloc@plt>
   12e00:	cmp	r0, #0
   12e04:	popne	{r4, pc}
   12e08:	mov	r0, r4
   12e0c:	pop	{r4, lr}
   12e10:	b	12da4 <__assert_fail@plt+0x1c98>
   12e14:	bl	12d68 <__assert_fail@plt+0x1c5c>
   12e18:	push	{r4, lr}
   12e1c:	mov	r4, r0
   12e20:	bl	12dc4 <__assert_fail@plt+0x1cb8>
   12e24:	mov	r2, r4
   12e28:	mov	r1, #0
   12e2c:	bl	11034 <memset@plt>
   12e30:	pop	{r4, pc}
   12e34:	push	{r4, lr}
   12e38:	mov	r4, r0
   12e3c:	bl	10e54 <calloc@plt>
   12e40:	cmp	r0, #0
   12e44:	popne	{r4, pc}
   12e48:	mov	r0, r4
   12e4c:	pop	{r4, lr}
   12e50:	b	12da4 <__assert_fail@plt+0x1c98>
   12e54:	cmp	r0, #0
   12e58:	push	{r4, lr}
   12e5c:	mov	r4, r1
   12e60:	beq	12e7c <__assert_fail@plt+0x1d70>
   12e64:	bl	10f14 <realloc@plt>
   12e68:	cmp	r0, #0
   12e6c:	popne	{r4, pc}
   12e70:	mov	r0, r4
   12e74:	pop	{r4, lr}
   12e78:	b	12da4 <__assert_fail@plt+0x1c98>
   12e7c:	mov	r0, r1
   12e80:	pop	{r4, lr}
   12e84:	b	12dc4 <__assert_fail@plt+0x1cb8>
   12e88:	push	{r4, lr}
   12e8c:	sub	sp, sp, #8
   12e90:	ldr	ip, [sp, #16]
   12e94:	str	ip, [sp]
   12e98:	bl	14afc <__assert_fail@plt+0x39f0>
   12e9c:	subs	r4, r0, #0
   12ea0:	blt	12eb0 <__assert_fail@plt+0x1da4>
   12ea4:	mov	r0, r4
   12ea8:	add	sp, sp, #8
   12eac:	pop	{r4, pc}
   12eb0:	bl	11004 <__errno_location@plt>
   12eb4:	ldr	r3, [r0]
   12eb8:	cmp	r3, #12
   12ebc:	bne	12ea4 <__assert_fail@plt+0x1d98>
   12ec0:	bl	12d68 <__assert_fail@plt+0x1c5c>
   12ec4:	push	{r4, lr}
   12ec8:	bl	14d94 <__assert_fail@plt+0x3c88>
   12ecc:	subs	r4, r0, #0
   12ed0:	beq	12edc <__assert_fail@plt+0x1dd0>
   12ed4:	mov	r0, r4
   12ed8:	pop	{r4, pc}
   12edc:	bl	11004 <__errno_location@plt>
   12ee0:	ldr	r3, [r0]
   12ee4:	cmp	r3, #12
   12ee8:	bne	12ed4 <__assert_fail@plt+0x1dc8>
   12eec:	bl	12d68 <__assert_fail@plt+0x1c5c>
   12ef0:	push	{r4, lr}
   12ef4:	bl	14f7c <__assert_fail@plt+0x3e70>
   12ef8:	subs	r4, r0, #0
   12efc:	beq	12f08 <__assert_fail@plt+0x1dfc>
   12f00:	mov	r0, r4
   12f04:	pop	{r4, pc}
   12f08:	bl	11004 <__errno_location@plt>
   12f0c:	ldr	r3, [r0]
   12f10:	cmp	r3, #12
   12f14:	bne	12f00 <__assert_fail@plt+0x1df4>
   12f18:	bl	12d68 <__assert_fail@plt+0x1c5c>
   12f1c:	push	{r4, r5, r6, r7, r8, lr}
   12f20:	subs	r7, r0, #0
   12f24:	ldr	r5, [pc, #108]	; 12f98 <__assert_fail@plt+0x1e8c>
   12f28:	sub	sp, sp, #8
   12f2c:	mov	r8, r1
   12f30:	ldr	r1, [r5]
   12f34:	moveq	r7, sp
   12f38:	str	r1, [sp, #4]
   12f3c:	mov	r0, r7
   12f40:	mov	r1, r8
   12f44:	mov	r6, r2
   12f48:	bl	10f50 <mbrtowc@plt>
   12f4c:	cmp	r6, #0
   12f50:	cmnne	r0, #3
   12f54:	mov	r4, r0
   12f58:	bhi	12f78 <__assert_fail@plt+0x1e6c>
   12f5c:	ldr	r2, [sp, #4]
   12f60:	ldr	r3, [r5]
   12f64:	mov	r0, r4
   12f68:	cmp	r2, r3
   12f6c:	bne	12f94 <__assert_fail@plt+0x1e88>
   12f70:	add	sp, sp, #8
   12f74:	pop	{r4, r5, r6, r7, r8, pc}
   12f78:	mov	r0, #0
   12f7c:	bl	1300c <__assert_fail@plt+0x1f00>
   12f80:	cmp	r0, #0
   12f84:	moveq	r4, #1
   12f88:	ldrbeq	r3, [r8]
   12f8c:	streq	r3, [r7]
   12f90:	b	12f5c <__assert_fail@plt+0x1e50>
   12f94:	bl	10f08 <__stack_chk_fail@plt>
   12f98:	andeq	r5, r2, r8, lsl #30
   12f9c:	cmp	r0, r1
   12fa0:	beq	13004 <__assert_fail@plt+0x1ef8>
   12fa4:	push	{lr}		; (str lr, [sp, #-4]!)
   12fa8:	sub	r0, r0, #1
   12fac:	sub	r1, r1, #1
   12fb0:	b	12fbc <__assert_fail@plt+0x1eb0>
   12fb4:	cmp	r3, r2
   12fb8:	bne	12ff4 <__assert_fail@plt+0x1ee8>
   12fbc:	ldrb	r3, [r0, #1]!
   12fc0:	sub	r2, r3, #65	; 0x41
   12fc4:	cmp	r2, #25
   12fc8:	ldrb	r2, [r1, #1]!
   12fcc:	mov	ip, r3
   12fd0:	addls	ip, r3, #32
   12fd4:	sub	lr, r2, #65	; 0x41
   12fd8:	uxtbls	r3, ip
   12fdc:	cmp	lr, #25
   12fe0:	mov	lr, r2
   12fe4:	addls	lr, r2, #32
   12fe8:	uxtbls	r2, lr
   12fec:	cmp	r3, #0
   12ff0:	bne	12fb4 <__assert_fail@plt+0x1ea8>
   12ff4:	uxtb	ip, ip
   12ff8:	uxtb	r0, lr
   12ffc:	sub	r0, ip, r0
   13000:	pop	{pc}		; (ldr pc, [sp], #4)
   13004:	mov	r0, #0
   13008:	bx	lr
   1300c:	push	{r4, lr}
   13010:	mov	r1, #0
   13014:	bl	110a0 <setlocale@plt>
   13018:	subs	r4, r0, #0
   1301c:	beq	13048 <__assert_fail@plt+0x1f3c>
   13020:	ldr	r1, [pc, #40]	; 13050 <__assert_fail@plt+0x1f44>
   13024:	bl	10e78 <strcmp@plt>
   13028:	cmp	r0, #0
   1302c:	popeq	{r4, pc}
   13030:	mov	r0, r4
   13034:	ldr	r1, [pc, #24]	; 13054 <__assert_fail@plt+0x1f48>
   13038:	bl	10e78 <strcmp@plt>
   1303c:	adds	r0, r0, #0
   13040:	movne	r0, #1
   13044:	pop	{r4, pc}
   13048:	mov	r0, #1
   1304c:	pop	{r4, pc}
   13050:	andeq	r5, r1, r4, ror #23
   13054:	andeq	r5, r1, r8, ror #23
   13058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1305c:	sub	sp, sp, #124	; 0x7c
   13060:	ldr	r6, [pc, #920]	; 13400 <__assert_fail@plt+0x22f4>
   13064:	mov	r0, #14
   13068:	ldr	r7, [pc, #916]	; 13404 <__assert_fail@plt+0x22f8>
   1306c:	ldr	r3, [r6]
   13070:	ldr	r5, [pc, #912]	; 13408 <__assert_fail@plt+0x22fc>
   13074:	str	r3, [sp, #116]	; 0x74
   13078:	bl	110b8 <nl_langinfo@plt>
   1307c:	ldr	r4, [r7]
   13080:	cmp	r0, #0
   13084:	movne	r5, r0
   13088:	cmp	r4, #0
   1308c:	beq	13130 <__assert_fail@plt+0x2024>
   13090:	ldrb	r7, [r4]
   13094:	cmp	r7, #0
   13098:	bne	130cc <__assert_fail@plt+0x1fc0>
   1309c:	b	13104 <__assert_fail@plt+0x1ff8>
   130a0:	mov	r0, r4
   130a4:	bl	10fe0 <strlen@plt>
   130a8:	add	r0, r0, #1
   130ac:	add	r7, r4, r0
   130b0:	mov	r0, r7
   130b4:	bl	10fe0 <strlen@plt>
   130b8:	add	r0, r0, #1
   130bc:	add	r4, r7, r0
   130c0:	ldrb	r7, [r7, r0]
   130c4:	cmp	r7, #0
   130c8:	beq	13104 <__assert_fail@plt+0x1ff8>
   130cc:	mov	r1, r4
   130d0:	mov	r0, r5
   130d4:	bl	10e78 <strcmp@plt>
   130d8:	cmp	r0, #0
   130dc:	beq	130f4 <__assert_fail@plt+0x1fe8>
   130e0:	cmp	r7, #42	; 0x2a
   130e4:	bne	130a0 <__assert_fail@plt+0x1f94>
   130e8:	ldrb	r3, [r4, #1]
   130ec:	cmp	r3, #0
   130f0:	bne	130a0 <__assert_fail@plt+0x1f94>
   130f4:	mov	r0, r4
   130f8:	bl	10fe0 <strlen@plt>
   130fc:	add	r0, r0, #1
   13100:	add	r5, r4, r0
   13104:	ldrb	r0, [r5]
   13108:	ldr	r2, [sp, #116]	; 0x74
   1310c:	ldr	r1, [pc, #760]	; 1340c <__assert_fail@plt+0x2300>
   13110:	ldr	r3, [r6]
   13114:	cmp	r0, #0
   13118:	movne	r0, r5
   1311c:	moveq	r0, r1
   13120:	cmp	r2, r3
   13124:	bne	133ec <__assert_fail@plt+0x22e0>
   13128:	add	sp, sp, #124	; 0x7c
   1312c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13130:	ldr	r0, [pc, #728]	; 13410 <__assert_fail@plt+0x2304>
   13134:	bl	10f74 <getenv@plt>
   13138:	subs	r4, r0, #0
   1313c:	beq	131a8 <__assert_fail@plt+0x209c>
   13140:	ldrb	r3, [r4]
   13144:	cmp	r3, #0
   13148:	bne	13180 <__assert_fail@plt+0x2074>
   1314c:	ldr	r4, [pc, #704]	; 13414 <__assert_fail@plt+0x2308>
   13150:	mov	r0, #23
   13154:	mov	r8, #9
   13158:	mov	sl, #8
   1315c:	bl	10f80 <malloc@plt>
   13160:	subs	r9, r0, #0
   13164:	beq	1319c <__assert_fail@plt+0x2090>
   13168:	mov	r1, r4
   1316c:	mov	r2, sl
   13170:	bl	10ecc <memcpy@plt>
   13174:	mov	r3, #47	; 0x2f
   13178:	strb	r3, [r9, sl]
   1317c:	b	131c8 <__assert_fail@plt+0x20bc>
   13180:	bl	10fe0 <strlen@plt>
   13184:	subs	r8, r0, #0
   13188:	moveq	r0, #14
   1318c:	bne	133a8 <__assert_fail@plt+0x229c>
   13190:	bl	10f80 <malloc@plt>
   13194:	subs	r9, r0, #0
   13198:	bne	131bc <__assert_fail@plt+0x20b0>
   1319c:	ldr	r4, [pc, #612]	; 13408 <__assert_fail@plt+0x22fc>
   131a0:	str	r4, [r7]
   131a4:	b	13090 <__assert_fail@plt+0x1f84>
   131a8:	mov	r0, #23
   131ac:	mov	r8, #9
   131b0:	mov	sl, #8
   131b4:	ldr	r4, [pc, #600]	; 13414 <__assert_fail@plt+0x2308>
   131b8:	b	1315c <__assert_fail@plt+0x2050>
   131bc:	mov	r1, r4
   131c0:	mov	r2, r8
   131c4:	bl	10ecc <memcpy@plt>
   131c8:	ldr	r3, [pc, #584]	; 13418 <__assert_fail@plt+0x230c>
   131cc:	add	ip, r9, r8
   131d0:	ldm	r3!, {r0, r1, r2}
   131d4:	ldrh	r3, [r3]
   131d8:	str	r0, [r9, r8]
   131dc:	str	r1, [ip, #4]
   131e0:	strh	r3, [ip, #12]
   131e4:	str	r2, [ip, #8]
   131e8:	mov	r1, #32768	; 0x8000
   131ec:	mov	r0, r9
   131f0:	bl	10f68 <open64@plt>
   131f4:	subs	r4, r0, #0
   131f8:	bge	1320c <__assert_fail@plt+0x2100>
   131fc:	ldr	r4, [pc, #516]	; 13408 <__assert_fail@plt+0x22fc>
   13200:	mov	r0, r9
   13204:	bl	10eb4 <free@plt>
   13208:	b	131a0 <__assert_fail@plt+0x2094>
   1320c:	ldr	r1, [pc, #520]	; 1341c <__assert_fail@plt+0x2310>
   13210:	bl	10e48 <fdopen@plt>
   13214:	subs	r8, r0, #0
   13218:	beq	133c0 <__assert_fail@plt+0x22b4>
   1321c:	mov	fp, #0
   13220:	mov	r4, fp
   13224:	str	r9, [sp]
   13228:	str	r5, [sp, #4]
   1322c:	ldr	r3, [r8, #4]
   13230:	ldr	r2, [r8, #8]
   13234:	cmp	r3, r2
   13238:	bcs	13304 <__assert_fail@plt+0x21f8>
   1323c:	add	r2, r3, #1
   13240:	str	r2, [r8, #4]
   13244:	ldrb	r0, [r3]
   13248:	sub	r3, r0, #9
   1324c:	cmp	r0, #32
   13250:	cmpne	r3, #1
   13254:	bls	1322c <__assert_fail@plt+0x2120>
   13258:	cmp	r0, #35	; 0x23
   1325c:	beq	13318 <__assert_fail@plt+0x220c>
   13260:	mov	r1, r8
   13264:	bl	10ff8 <ungetc@plt>
   13268:	add	r3, sp, #64	; 0x40
   1326c:	add	r2, sp, #12
   13270:	ldr	r1, [pc, #424]	; 13420 <__assert_fail@plt+0x2314>
   13274:	mov	r0, r8
   13278:	bl	1104c <fscanf@plt>
   1327c:	cmp	r0, #1
   13280:	ble	13354 <__assert_fail@plt+0x2248>
   13284:	add	r0, sp, #12
   13288:	bl	10fe0 <strlen@plt>
   1328c:	mov	sl, r0
   13290:	add	r0, sp, #64	; 0x40
   13294:	bl	10fe0 <strlen@plt>
   13298:	cmp	fp, #0
   1329c:	mov	r9, r0
   132a0:	add	r3, sl, r0
   132a4:	bne	13378 <__assert_fail@plt+0x226c>
   132a8:	add	r0, r3, #3
   132ac:	add	fp, r3, #2
   132b0:	bl	10f80 <malloc@plt>
   132b4:	mov	r5, r0
   132b8:	cmp	r5, #0
   132bc:	beq	133cc <__assert_fail@plt+0x22c0>
   132c0:	sub	r4, fp, r9
   132c4:	sub	r0, r4, sl
   132c8:	sub	r0, r0, #2
   132cc:	add	r1, sp, #12
   132d0:	add	r2, sl, #1
   132d4:	add	r0, r5, r0
   132d8:	bl	10ecc <memcpy@plt>
   132dc:	sub	r0, r4, #1
   132e0:	add	r2, r9, #1
   132e4:	add	r0, r5, r0
   132e8:	add	r1, sp, #64	; 0x40
   132ec:	bl	10ecc <memcpy@plt>
   132f0:	ldr	r3, [r8, #4]
   132f4:	ldr	r2, [r8, #8]
   132f8:	mov	r4, r5
   132fc:	cmp	r3, r2
   13300:	bcc	1323c <__assert_fail@plt+0x2130>
   13304:	mov	r0, r8
   13308:	bl	11094 <__uflow@plt>
   1330c:	cmn	r0, #1
   13310:	bne	13248 <__assert_fail@plt+0x213c>
   13314:	b	13354 <__assert_fail@plt+0x2248>
   13318:	ldr	r3, [r8, #4]
   1331c:	ldr	r2, [r8, #8]
   13320:	cmp	r3, r2
   13324:	bcs	13394 <__assert_fail@plt+0x2288>
   13328:	add	r2, r3, #1
   1332c:	str	r2, [r8, #4]
   13330:	ldrb	r0, [r3]
   13334:	mov	r3, #1
   13338:	cmp	r0, #10
   1333c:	moveq	r3, #0
   13340:	andne	r3, r3, #1
   13344:	cmp	r3, #0
   13348:	bne	13318 <__assert_fail@plt+0x220c>
   1334c:	cmn	r0, #1
   13350:	bne	1322c <__assert_fail@plt+0x2120>
   13354:	mov	r0, r8
   13358:	ldr	r9, [sp]
   1335c:	ldr	r5, [sp, #4]
   13360:	bl	1107c <fclose@plt>
   13364:	cmp	fp, #0
   13368:	beq	131fc <__assert_fail@plt+0x20f0>
   1336c:	mov	r3, #0
   13370:	strb	r3, [r4, fp]
   13374:	b	13200 <__assert_fail@plt+0x20f4>
   13378:	add	fp, fp, r3
   1337c:	add	r1, fp, #3
   13380:	mov	r0, r4
   13384:	bl	10f14 <realloc@plt>
   13388:	add	fp, fp, #2
   1338c:	mov	r5, r0
   13390:	b	132b8 <__assert_fail@plt+0x21ac>
   13394:	mov	r0, r8
   13398:	bl	11094 <__uflow@plt>
   1339c:	adds	r3, r0, #1
   133a0:	movne	r3, #1
   133a4:	b	13338 <__assert_fail@plt+0x222c>
   133a8:	add	r3, r4, r8
   133ac:	ldrb	r3, [r3, #-1]
   133b0:	cmp	r3, #47	; 0x2f
   133b4:	bne	133f0 <__assert_fail@plt+0x22e4>
   133b8:	add	r0, r8, #14
   133bc:	b	13190 <__assert_fail@plt+0x2084>
   133c0:	mov	r0, r4
   133c4:	bl	11100 <close@plt>
   133c8:	b	131fc <__assert_fail@plt+0x20f0>
   133cc:	mov	r0, r4
   133d0:	ldr	r9, [sp]
   133d4:	ldr	r5, [sp, #4]
   133d8:	bl	10eb4 <free@plt>
   133dc:	mov	r0, r8
   133e0:	bl	1107c <fclose@plt>
   133e4:	ldr	r4, [pc, #28]	; 13408 <__assert_fail@plt+0x22fc>
   133e8:	b	13200 <__assert_fail@plt+0x20f4>
   133ec:	bl	10f08 <__stack_chk_fail@plt>
   133f0:	add	r0, r8, #15
   133f4:	mov	sl, r8
   133f8:	add	r8, r8, #1
   133fc:	b	1315c <__assert_fail@plt+0x2050>
   13400:	andeq	r5, r2, r8, lsl #30
   13404:	andeq	r6, r2, r4, lsr r1
   13408:	andeq	r5, r1, r0, ror r8
   1340c:	strdeq	r5, [r1], -r0
   13410:	andeq	r5, r1, r4, lsl #24
   13414:	strdeq	r5, [r1], -r8
   13418:	andeq	r5, r1, r4, lsl ip
   1341c:	andeq	r5, r1, r4, lsr #24
   13420:	andeq	r5, r1, r8, lsr #24
   13424:	push	{r4, lr}
   13428:	mov	r4, r0
   1342c:	bl	10e9c <wcwidth@plt>
   13430:	cmp	r0, #0
   13434:	popge	{r4, pc}
   13438:	mov	r0, r4
   1343c:	bl	10f2c <iswcntrl@plt>
   13440:	clz	r0, r0
   13444:	lsr	r0, r0, #5
   13448:	pop	{r4, pc}
   1344c:	mov	r3, r1
   13450:	push	{r4, r5, r6, lr}
   13454:	mov	r4, r1
   13458:	ldr	r1, [r3], #16
   1345c:	ldr	r2, [r4, #4]
   13460:	cmp	r1, r3
   13464:	mov	r5, r0
   13468:	strne	r1, [r0]
   1346c:	beq	1348c <__assert_fail@plt+0x2380>
   13470:	ldrb	r3, [r4, #8]
   13474:	str	r2, [r5, #4]
   13478:	cmp	r3, #0
   1347c:	strb	r3, [r5, #8]
   13480:	ldrne	r3, [r4, #12]
   13484:	strne	r3, [r5, #12]
   13488:	pop	{r4, r5, r6, pc}
   1348c:	add	r3, r0, #16
   13490:	mov	r0, r3
   13494:	bl	10ecc <memcpy@plt>
   13498:	ldr	r2, [r4, #4]
   1349c:	str	r0, [r5]
   134a0:	b	13470 <__assert_fail@plt+0x2364>
   134a4:	ldr	r3, [pc, #20]	; 134c0 <__assert_fail@plt+0x23b4>
   134a8:	lsr	r2, r0, #5
   134ac:	and	r0, r0, #31
   134b0:	ldr	r3, [r3, r2, lsl #2]
   134b4:	lsr	r0, r3, r0
   134b8:	and	r0, r0, #1
   134bc:	bx	lr
   134c0:	andeq	r5, r1, r4, lsr ip
   134c4:	push	{r4, r5, r6, r7, r8, fp, lr}
   134c8:	cmn	r2, #-1073741823	; 0xc0000001
   134cc:	ldr	r6, [pc, #348]	; 13630 <__assert_fail@plt+0x2524>
   134d0:	add	fp, sp, #24
   134d4:	mov	r7, r2
   134d8:	sub	sp, sp, #12
   134dc:	ldr	r2, [r6]
   134e0:	str	r2, [fp, #-32]	; 0xffffffe0
   134e4:	bhi	135f0 <__assert_fail@plt+0x24e4>
   134e8:	mov	r8, r3
   134ec:	ldr	r3, [pc, #320]	; 13634 <__assert_fail@plt+0x2528>
   134f0:	mov	r5, r0
   134f4:	lsl	r0, r7, #2
   134f8:	cmp	r0, r3
   134fc:	mov	r4, r1
   13500:	bhi	135e4 <__assert_fail@plt+0x24d8>
   13504:	add	r3, r0, #15
   13508:	bic	r3, r3, #7
   1350c:	sub	sp, sp, r3
   13510:	add	r0, sp, #8
   13514:	cmp	r0, #0
   13518:	beq	135f0 <__assert_fail@plt+0x24e4>
   1351c:	cmp	r7, #2
   13520:	mov	r3, #1
   13524:	str	r3, [r0, #4]
   13528:	movhi	r1, r4
   1352c:	movhi	ip, #0
   13530:	movhi	r3, #2
   13534:	bls	1357c <__assert_fail@plt+0x2470>
   13538:	ldrb	r2, [r1, #1]!
   1353c:	ldrb	lr, [r4, ip]
   13540:	cmp	lr, r2
   13544:	bne	13560 <__assert_fail@plt+0x2454>
   13548:	b	13614 <__assert_fail@plt+0x2508>
   1354c:	ldr	lr, [r0, ip, lsl #2]
   13550:	sub	ip, ip, lr
   13554:	ldrb	lr, [r4, ip]
   13558:	cmp	lr, r2
   1355c:	beq	13614 <__assert_fail@plt+0x2508>
   13560:	cmp	ip, #0
   13564:	bne	1354c <__assert_fail@plt+0x2440>
   13568:	mov	ip, #0
   1356c:	str	r3, [r0, r3, lsl #2]
   13570:	add	r3, r3, #1
   13574:	cmp	r7, r3
   13578:	bne	13538 <__assert_fail@plt+0x242c>
   1357c:	mov	r3, #0
   13580:	str	r3, [r8]
   13584:	ldrb	r2, [r5]
   13588:	mov	r1, r5
   1358c:	cmp	r2, #0
   13590:	beq	135c4 <__assert_fail@plt+0x24b8>
   13594:	ldrb	ip, [r4, r3]
   13598:	cmp	ip, r2
   1359c:	beq	135f8 <__assert_fail@plt+0x24ec>
   135a0:	cmp	r3, #0
   135a4:	addeq	r5, r5, #1
   135a8:	ldrbeq	r2, [r1, #1]
   135ac:	ldrne	ip, [r0, r3, lsl #2]
   135b0:	addeq	r1, r1, #1
   135b4:	addne	r5, r5, ip
   135b8:	subne	r3, r3, ip
   135bc:	cmp	r2, #0
   135c0:	bne	13594 <__assert_fail@plt+0x2488>
   135c4:	bl	150c0 <__assert_fail@plt+0x3fb4>
   135c8:	mov	r0, #1
   135cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   135d0:	ldr	r3, [r6]
   135d4:	cmp	r2, r3
   135d8:	bne	1362c <__assert_fail@plt+0x2520>
   135dc:	sub	sp, fp, #24
   135e0:	pop	{r4, r5, r6, r7, r8, fp, pc}
   135e4:	bl	15054 <__assert_fail@plt+0x3f48>
   135e8:	cmp	r0, #0
   135ec:	bne	1351c <__assert_fail@plt+0x2410>
   135f0:	mov	r0, #0
   135f4:	b	135cc <__assert_fail@plt+0x24c0>
   135f8:	add	r3, r3, #1
   135fc:	cmp	r7, r3
   13600:	add	ip, r1, #1
   13604:	beq	13624 <__assert_fail@plt+0x2518>
   13608:	ldrb	r2, [r1, #1]
   1360c:	mov	r1, ip
   13610:	b	1358c <__assert_fail@plt+0x2480>
   13614:	add	ip, ip, #1
   13618:	sub	r2, r3, ip
   1361c:	str	r2, [r0, r3, lsl #2]
   13620:	b	13570 <__assert_fail@plt+0x2464>
   13624:	str	r5, [r8]
   13628:	b	135c4 <__assert_fail@plt+0x24b8>
   1362c:	bl	10f08 <__stack_chk_fail@plt>
   13630:	andeq	r5, r2, r8, lsl #30
   13634:			; <UNDEFINED> instruction: 0x00000fb7
   13638:	push	{r4, lr}
   1363c:	mov	r2, #179	; 0xb3
   13640:	ldr	r3, [pc, #8]	; 13650 <__assert_fail@plt+0x2544>
   13644:	ldr	r1, [pc, #8]	; 13654 <__assert_fail@plt+0x2548>
   13648:	ldr	r0, [pc, #8]	; 13658 <__assert_fail@plt+0x254c>
   1364c:	bl	1110c <__assert_fail@plt>
   13650:	andeq	r5, r1, r4, asr ip
   13654:	andeq	r5, r1, r4, asr #22
   13658:	andeq	r5, r1, r0, asr fp
   1365c:	ldr	r3, [pc, #2096]	; 13e94 <__assert_fail@plt+0x2d88>
   13660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13664:	add	fp, sp, #32
   13668:	sub	sp, sp, #196	; 0xc4
   1366c:	ldr	r3, [r3]
   13670:	str	r0, [fp, #-220]	; 0xffffff24
   13674:	mov	r0, r1
   13678:	str	r3, [fp, #-40]	; 0xffffffd8
   1367c:	mov	r4, r1
   13680:	str	r2, [fp, #-224]	; 0xffffff20
   13684:	bl	15144 <__assert_fail@plt+0x4038>
   13688:	ldr	r3, [pc, #2056]	; 13e98 <__assert_fail@plt+0x2d8c>
   1368c:	cmp	r0, r3
   13690:	str	r0, [fp, #-216]	; 0xffffff28
   13694:	bhi	13a44 <__assert_fail@plt+0x2938>
   13698:	ldr	r2, [fp, #-216]	; 0xffffff28
   1369c:	ldr	r3, [pc, #2040]	; 13e9c <__assert_fail@plt+0x2d90>
   136a0:	lsl	r5, r2, #2
   136a4:	add	r0, r5, r2
   136a8:	add	r0, r2, r0, lsl #1
   136ac:	lsl	r0, r0, #2
   136b0:	cmp	r0, r3
   136b4:	bhi	13a64 <__assert_fail@plt+0x2958>
   136b8:	add	r3, r0, #15
   136bc:	bic	r3, r3, #7
   136c0:	sub	sp, sp, r3
   136c4:	add	r8, sp, #8
   136c8:	cmp	r8, #0
   136cc:	beq	13a44 <__assert_fail@plt+0x2938>
   136d0:	ldr	r3, [fp, #-216]	; 0xffffff28
   136d4:	mov	r6, #0
   136d8:	add	r5, r5, r3
   136dc:	str	r4, [fp, #-192]	; 0xffffff40
   136e0:	add	r9, r8, r5, lsl #3
   136e4:	str	r6, [fp, #-200]	; 0xffffff38
   136e8:	strb	r6, [fp, #-208]	; 0xffffff30
   136ec:	str	r6, [fp, #-204]	; 0xffffff34
   136f0:	strb	r6, [fp, #-196]	; 0xffffff3c
   136f4:	add	r5, r8, #16
   136f8:	ldr	r7, [pc, #1952]	; 13ea0 <__assert_fail@plt+0x2d94>
   136fc:	b	13780 <__assert_fail@plt+0x2674>
   13700:	ldrb	r3, [r4]
   13704:	and	r2, r3, #31
   13708:	lsr	r3, r3, #5
   1370c:	ldr	r3, [r7, r3, lsl #2]
   13710:	lsr	r3, r3, r2
   13714:	tst	r3, #1
   13718:	beq	13a70 <__assert_fail@plt+0x2964>
   1371c:	mov	r3, #1
   13720:	str	r3, [fp, #-188]	; 0xffffff44
   13724:	ldrb	r4, [r4]
   13728:	strb	r3, [fp, #-184]	; 0xffffff48
   1372c:	strb	r3, [fp, #-196]	; 0xffffff3c
   13730:	cmp	r4, #0
   13734:	str	r4, [fp, #-180]	; 0xffffff4c
   13738:	beq	137f4 <__assert_fail@plt+0x26e8>
   1373c:	mov	r3, #1
   13740:	ldr	r1, [fp, #-192]	; 0xffffff40
   13744:	sub	r2, fp, #176	; 0xb0
   13748:	cmp	r1, r2
   1374c:	ldr	r2, [fp, #-188]	; 0xffffff44
   13750:	strne	r1, [r5, #-16]
   13754:	beq	13a8c <__assert_fail@plt+0x2980>
   13758:	cmp	r3, #0
   1375c:	str	r2, [r5, #-12]
   13760:	strb	r3, [r5, #-8]
   13764:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   13768:	ldr	r4, [fp, #-192]	; 0xffffff40
   1376c:	strne	r3, [r5, #-4]
   13770:	add	r5, r5, #40	; 0x28
   13774:	add	r4, r4, r2
   13778:	strb	r6, [fp, #-196]	; 0xffffff3c
   1377c:	str	r4, [fp, #-192]	; 0xffffff40
   13780:	ldrb	r3, [fp, #-208]	; 0xffffff30
   13784:	cmp	r3, #0
   13788:	beq	13700 <__assert_fail@plt+0x25f4>
   1378c:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13790:	mov	r1, r0
   13794:	mov	r0, r4
   13798:	bl	12820 <__assert_fail@plt+0x1714>
   1379c:	sub	r3, fp, #204	; 0xcc
   137a0:	mov	r1, r4
   137a4:	mov	r2, r0
   137a8:	sub	r0, fp, #180	; 0xb4
   137ac:	bl	12f1c <__assert_fail@plt+0x1e10>
   137b0:	cmn	r0, #1
   137b4:	str	r0, [fp, #-188]	; 0xffffff44
   137b8:	beq	13aa4 <__assert_fail@plt+0x2998>
   137bc:	cmn	r0, #2
   137c0:	beq	13abc <__assert_fail@plt+0x29b0>
   137c4:	cmp	r0, #0
   137c8:	beq	13adc <__assert_fail@plt+0x29d0>
   137cc:	ldr	r4, [fp, #-180]	; 0xffffff4c
   137d0:	mov	sl, #1
   137d4:	sub	r0, fp, #204	; 0xcc
   137d8:	strb	sl, [fp, #-184]	; 0xffffff48
   137dc:	bl	10ed8 <mbsinit@plt>
   137e0:	strb	sl, [fp, #-196]	; 0xffffff3c
   137e4:	cmp	r0, #0
   137e8:	strbne	r6, [fp, #-208]	; 0xffffff30
   137ec:	cmp	r4, #0
   137f0:	bne	1373c <__assert_fail@plt+0x2630>
   137f4:	ldr	r3, [fp, #-216]	; 0xffffff28
   137f8:	cmp	r3, #2
   137fc:	mov	r3, #1
   13800:	str	r3, [r9, #4]
   13804:	bls	13898 <__assert_fail@plt+0x278c>
   13808:	ldr	sl, [fp, #-216]	; 0xffffff28
   1380c:	mov	r5, r8
   13810:	mov	r7, #2
   13814:	ldrb	r6, [r5, #48]	; 0x30
   13818:	b	13848 <__assert_fail@plt+0x273c>
   1381c:	ldrb	r2, [r3, #8]
   13820:	cmp	r2, #0
   13824:	beq	13858 <__assert_fail@plt+0x274c>
   13828:	ldr	r3, [r3, #12]
   1382c:	ldr	r2, [r5, #52]	; 0x34
   13830:	cmp	r2, r3
   13834:	beq	1387c <__assert_fail@plt+0x2770>
   13838:	cmp	r4, #0
   1383c:	beq	13db8 <__assert_fail@plt+0x2cac>
   13840:	ldr	r3, [r9, r4, lsl #2]
   13844:	sub	r4, r4, r3
   13848:	add	r3, r4, r4, lsl #2
   1384c:	cmp	r6, #0
   13850:	add	r3, r8, r3, lsl #3
   13854:	bne	1381c <__assert_fail@plt+0x2710>
   13858:	ldr	r2, [r5, #44]	; 0x2c
   1385c:	ldr	r1, [r3, #4]
   13860:	cmp	r2, r1
   13864:	bne	13838 <__assert_fail@plt+0x272c>
   13868:	ldr	r1, [r3]
   1386c:	ldr	r0, [r5, #40]	; 0x28
   13870:	bl	10ee4 <memcmp@plt>
   13874:	cmp	r0, #0
   13878:	bne	13838 <__assert_fail@plt+0x272c>
   1387c:	add	r4, r4, #1
   13880:	sub	r3, r7, r4
   13884:	str	r3, [r9, r7, lsl #2]
   13888:	add	r7, r7, #1
   1388c:	cmp	sl, r7
   13890:	add	r5, r5, #40	; 0x28
   13894:	bne	13814 <__assert_fail@plt+0x2708>
   13898:	ldr	r1, [fp, #-220]	; 0xffffff24
   1389c:	mov	r2, #0
   138a0:	str	r1, [fp, #-136]	; 0xffffff78
   138a4:	str	r1, [fp, #-80]	; 0xffffffb0
   138a8:	ldr	sl, [pc, #1520]	; 13ea0 <__assert_fail@plt+0x2d94>
   138ac:	ldr	r1, [fp, #-224]	; 0xffffff20
   138b0:	mov	r3, r2
   138b4:	mov	r7, r2
   138b8:	mov	r6, #1
   138bc:	str	r2, [r1]
   138c0:	strb	r2, [fp, #-152]	; 0xffffff68
   138c4:	str	r2, [fp, #-148]	; 0xffffff6c
   138c8:	strb	r2, [fp, #-140]	; 0xffffff74
   138cc:	strb	r2, [fp, #-96]	; 0xffffffa0
   138d0:	str	r2, [fp, #-92]	; 0xffffffa4
   138d4:	strb	r2, [fp, #-84]	; 0xffffffac
   138d8:	str	r2, [fp, #-144]	; 0xffffff70
   138dc:	str	r2, [fp, #-88]	; 0xffffffa8
   138e0:	cmp	r3, #0
   138e4:	ldreq	r5, [fp, #-80]	; 0xffffffb0
   138e8:	beq	1399c <__assert_fail@plt+0x2890>
   138ec:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   138f0:	cmp	r3, #0
   138f4:	ldrne	r4, [fp, #-68]	; 0xffffffbc
   138f8:	bne	139d8 <__assert_fail@plt+0x28cc>
   138fc:	add	r3, r7, r7, lsl #2
   13900:	add	r3, r8, r3, lsl #3
   13904:	ldr	r2, [r3, #4]
   13908:	ldr	r4, [fp, #-76]	; 0xffffffb4
   1390c:	cmp	r2, r4
   13910:	beq	13b80 <__assert_fail@plt+0x2a74>
   13914:	cmp	r7, #0
   13918:	bne	13ba4 <__assert_fail@plt+0x2a98>
   1391c:	ldrb	r3, [fp, #-140]	; 0xffffff74
   13920:	cmp	r3, #0
   13924:	bne	13e00 <__assert_fail@plt+0x2cf4>
   13928:	ldrb	r3, [fp, #-152]	; 0xffffff68
   1392c:	ldr	r4, [fp, #-136]	; 0xffffff78
   13930:	cmp	r3, #0
   13934:	bne	13d50 <__assert_fail@plt+0x2c44>
   13938:	ldrb	r3, [r4]
   1393c:	and	r2, r3, #31
   13940:	lsr	r3, r3, #5
   13944:	ldr	r3, [sl, r3, lsl #2]
   13948:	lsr	r3, r3, r2
   1394c:	tst	r3, #1
   13950:	beq	13d3c <__assert_fail@plt+0x2c30>
   13954:	str	r6, [fp, #-132]	; 0xffffff7c
   13958:	ldrb	r4, [r4]
   1395c:	strb	r6, [fp, #-128]	; 0xffffff80
   13960:	strb	r6, [fp, #-140]	; 0xffffff74
   13964:	str	r4, [fp, #-124]	; 0xffffff84
   13968:	cmp	r4, #0
   1396c:	beq	13c3c <__assert_fail@plt+0x2b30>
   13970:	ldr	r4, [fp, #-136]	; 0xffffff78
   13974:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13978:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1397c:	add	r4, r4, r3
   13980:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13984:	str	r4, [fp, #-136]	; 0xffffff78
   13988:	add	r5, r5, r3
   1398c:	mov	r3, #0
   13990:	str	r5, [fp, #-80]	; 0xffffffb0
   13994:	strb	r3, [fp, #-140]	; 0xffffff74
   13998:	strb	r3, [fp, #-84]	; 0xffffffac
   1399c:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   139a0:	cmp	r3, #0
   139a4:	bne	13b18 <__assert_fail@plt+0x2a0c>
   139a8:	ldrb	r3, [r5]
   139ac:	and	r2, r3, #31
   139b0:	lsr	r3, r3, #5
   139b4:	ldr	r3, [sl, r3, lsl #2]
   139b8:	lsr	r3, r3, r2
   139bc:	tst	r3, #1
   139c0:	beq	13b04 <__assert_fail@plt+0x29f8>
   139c4:	str	r6, [fp, #-76]	; 0xffffffb4
   139c8:	ldrb	r4, [r5]
   139cc:	strb	r6, [fp, #-72]	; 0xffffffb8
   139d0:	strb	r6, [fp, #-84]	; 0xffffffac
   139d4:	str	r4, [fp, #-68]	; 0xffffffbc
   139d8:	cmp	r4, #0
   139dc:	beq	13a34 <__assert_fail@plt+0x2928>
   139e0:	add	r3, r7, r7, lsl #2
   139e4:	add	r3, r8, r3, lsl #3
   139e8:	ldrb	r2, [r3, #8]
   139ec:	cmp	r2, #0
   139f0:	beq	13904 <__assert_fail@plt+0x27f8>
   139f4:	ldr	r3, [r3, #12]
   139f8:	cmp	r3, r4
   139fc:	bne	13914 <__assert_fail@plt+0x2808>
   13a00:	ldr	r4, [fp, #-76]	; 0xffffffb4
   13a04:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13a08:	ldr	r3, [fp, #-216]	; 0xffffff28
   13a0c:	add	r7, r7, #1
   13a10:	cmp	r3, r7
   13a14:	add	r5, r5, r4
   13a18:	mov	r3, #0
   13a1c:	str	r5, [fp, #-80]	; 0xffffffb0
   13a20:	strb	r3, [fp, #-84]	; 0xffffffac
   13a24:	bne	1399c <__assert_fail@plt+0x2890>
   13a28:	ldr	r2, [fp, #-224]	; 0xffffff20
   13a2c:	ldr	r3, [fp, #-136]	; 0xffffff78
   13a30:	str	r3, [r2]
   13a34:	mov	r0, r8
   13a38:	bl	150c0 <__assert_fail@plt+0x3fb4>
   13a3c:	mov	r0, #1
   13a40:	b	13a48 <__assert_fail@plt+0x293c>
   13a44:	mov	r0, #0
   13a48:	ldr	r3, [pc, #1092]	; 13e94 <__assert_fail@plt+0x2d88>
   13a4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13a50:	ldr	r3, [r3]
   13a54:	cmp	r2, r3
   13a58:	bne	13e90 <__assert_fail@plt+0x2d84>
   13a5c:	sub	sp, fp, #32
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	bl	15054 <__assert_fail@plt+0x3f48>
   13a68:	mov	r8, r0
   13a6c:	b	136c8 <__assert_fail@plt+0x25bc>
   13a70:	sub	r0, fp, #204	; 0xcc
   13a74:	bl	10ed8 <mbsinit@plt>
   13a78:	cmp	r0, #0
   13a7c:	beq	13e68 <__assert_fail@plt+0x2d5c>
   13a80:	mov	r3, #1
   13a84:	strb	r3, [fp, #-208]	; 0xffffff30
   13a88:	b	1378c <__assert_fail@plt+0x2680>
   13a8c:	mov	r0, r5
   13a90:	bl	10ecc <memcpy@plt>
   13a94:	str	r5, [r5, #-16]
   13a98:	ldrb	r3, [fp, #-184]	; 0xffffff48
   13a9c:	ldr	r2, [fp, #-188]	; 0xffffff44
   13aa0:	b	13758 <__assert_fail@plt+0x264c>
   13aa4:	mov	r3, #1
   13aa8:	str	r3, [fp, #-188]	; 0xffffff44
   13aac:	strb	r3, [fp, #-196]	; 0xffffff3c
   13ab0:	strb	r6, [fp, #-184]	; 0xffffff48
   13ab4:	mov	r3, #0
   13ab8:	b	13740 <__assert_fail@plt+0x2634>
   13abc:	ldr	r0, [fp, #-192]	; 0xffffff40
   13ac0:	bl	10fe0 <strlen@plt>
   13ac4:	mov	r3, #1
   13ac8:	strb	r3, [fp, #-196]	; 0xffffff3c
   13acc:	strb	r6, [fp, #-184]	; 0xffffff48
   13ad0:	mov	r3, #0
   13ad4:	str	r0, [fp, #-188]	; 0xffffff44
   13ad8:	b	13740 <__assert_fail@plt+0x2634>
   13adc:	ldr	r3, [fp, #-192]	; 0xffffff40
   13ae0:	mov	r2, #1
   13ae4:	str	r2, [fp, #-188]	; 0xffffff44
   13ae8:	ldrb	r3, [r3]
   13aec:	cmp	r3, #0
   13af0:	bne	13e7c <__assert_fail@plt+0x2d70>
   13af4:	ldr	r4, [fp, #-180]	; 0xffffff4c
   13af8:	cmp	r4, #0
   13afc:	beq	137d0 <__assert_fail@plt+0x26c4>
   13b00:	bl	13638 <__assert_fail@plt+0x252c>
   13b04:	sub	r0, fp, #92	; 0x5c
   13b08:	bl	10ed8 <mbsinit@plt>
   13b0c:	cmp	r0, #0
   13b10:	beq	13e68 <__assert_fail@plt+0x2d5c>
   13b14:	strb	r6, [fp, #-96]	; 0xffffffa0
   13b18:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13b1c:	mov	r1, r0
   13b20:	mov	r0, r5
   13b24:	bl	12820 <__assert_fail@plt+0x1714>
   13b28:	sub	r3, fp, #92	; 0x5c
   13b2c:	mov	r1, r5
   13b30:	mov	r2, r0
   13b34:	sub	r0, fp, #68	; 0x44
   13b38:	bl	12f1c <__assert_fail@plt+0x1e10>
   13b3c:	cmn	r0, #1
   13b40:	str	r0, [fp, #-76]	; 0xffffffb4
   13b44:	beq	13d28 <__assert_fail@plt+0x2c1c>
   13b48:	cmn	r0, #2
   13b4c:	beq	13dc0 <__assert_fail@plt+0x2cb4>
   13b50:	cmp	r0, #0
   13b54:	beq	13ddc <__assert_fail@plt+0x2cd0>
   13b58:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13b5c:	sub	r0, fp, #92	; 0x5c
   13b60:	strb	r6, [fp, #-72]	; 0xffffffb8
   13b64:	bl	10ed8 <mbsinit@plt>
   13b68:	cmp	r0, #0
   13b6c:	movne	r3, #0
   13b70:	strbeq	r6, [fp, #-84]	; 0xffffffac
   13b74:	strbne	r6, [fp, #-84]	; 0xffffffac
   13b78:	strbne	r3, [fp, #-96]	; 0xffffffa0
   13b7c:	b	139d8 <__assert_fail@plt+0x28cc>
   13b80:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13b84:	ldr	r0, [r3]
   13b88:	mov	r1, r5
   13b8c:	mov	r2, r4
   13b90:	bl	10ee4 <memcmp@plt>
   13b94:	cmp	r0, #0
   13b98:	beq	13a08 <__assert_fail@plt+0x28fc>
   13b9c:	cmp	r7, #0
   13ba0:	beq	1391c <__assert_fail@plt+0x2810>
   13ba4:	ldr	r5, [r9, r7, lsl #2]
   13ba8:	sub	r3, r7, r5
   13bac:	cmp	r5, #0
   13bb0:	str	r3, [fp, #-220]	; 0xffffff24
   13bb4:	beq	13d20 <__assert_fail@plt+0x2c14>
   13bb8:	ldrb	r3, [fp, #-140]	; 0xffffff74
   13bbc:	cmp	r3, #0
   13bc0:	ldreq	r4, [fp, #-136]	; 0xffffff78
   13bc4:	beq	13bf8 <__assert_fail@plt+0x2aec>
   13bc8:	ldrb	r3, [fp, #-128]	; 0xffffff80
   13bcc:	cmp	r3, #0
   13bd0:	ldrne	r4, [fp, #-124]	; 0xffffff84
   13bd4:	bne	13c34 <__assert_fail@plt+0x2b28>
   13bd8:	ldr	r4, [fp, #-136]	; 0xffffff78
   13bdc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13be0:	subs	r5, r5, #1
   13be4:	add	r4, r4, r3
   13be8:	mov	r3, #0
   13bec:	str	r4, [fp, #-136]	; 0xffffff78
   13bf0:	strb	r3, [fp, #-140]	; 0xffffff74
   13bf4:	beq	13d1c <__assert_fail@plt+0x2c10>
   13bf8:	ldrb	r3, [fp, #-152]	; 0xffffff68
   13bfc:	cmp	r3, #0
   13c00:	bne	13c54 <__assert_fail@plt+0x2b48>
   13c04:	ldrb	r3, [r4]
   13c08:	and	r2, r3, #31
   13c0c:	lsr	r3, r3, #5
   13c10:	ldr	r3, [sl, r3, lsl #2]
   13c14:	lsr	r3, r3, r2
   13c18:	tst	r3, #1
   13c1c:	beq	13c40 <__assert_fail@plt+0x2b34>
   13c20:	str	r6, [fp, #-132]	; 0xffffff7c
   13c24:	ldrb	r4, [r4]
   13c28:	strb	r6, [fp, #-128]	; 0xffffff80
   13c2c:	strb	r6, [fp, #-140]	; 0xffffff74
   13c30:	str	r4, [fp, #-124]	; 0xffffff84
   13c34:	cmp	r4, #0
   13c38:	bne	13bd8 <__assert_fail@plt+0x2acc>
   13c3c:	bl	110f4 <abort@plt>
   13c40:	sub	r0, fp, #148	; 0x94
   13c44:	bl	10ed8 <mbsinit@plt>
   13c48:	cmp	r0, #0
   13c4c:	beq	13e68 <__assert_fail@plt+0x2d5c>
   13c50:	strb	r6, [fp, #-152]	; 0xffffff68
   13c54:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13c58:	mov	r1, r0
   13c5c:	mov	r0, r4
   13c60:	bl	12820 <__assert_fail@plt+0x1714>
   13c64:	sub	r3, fp, #148	; 0x94
   13c68:	mov	r1, r4
   13c6c:	mov	r2, r0
   13c70:	sub	r0, fp, #124	; 0x7c
   13c74:	bl	12f1c <__assert_fail@plt+0x1e10>
   13c78:	cmn	r0, #1
   13c7c:	str	r0, [fp, #-132]	; 0xffffff7c
   13c80:	beq	13cbc <__assert_fail@plt+0x2bb0>
   13c84:	cmn	r0, #2
   13c88:	beq	13ccc <__assert_fail@plt+0x2bc0>
   13c8c:	cmp	r0, #0
   13c90:	beq	13ce8 <__assert_fail@plt+0x2bdc>
   13c94:	ldr	r4, [fp, #-124]	; 0xffffff84
   13c98:	sub	r0, fp, #148	; 0x94
   13c9c:	strb	r6, [fp, #-128]	; 0xffffff80
   13ca0:	bl	10ed8 <mbsinit@plt>
   13ca4:	cmp	r0, #0
   13ca8:	movne	r3, #0
   13cac:	strbeq	r6, [fp, #-140]	; 0xffffff74
   13cb0:	strbne	r6, [fp, #-140]	; 0xffffff74
   13cb4:	strbne	r3, [fp, #-152]	; 0xffffff68
   13cb8:	b	13c34 <__assert_fail@plt+0x2b28>
   13cbc:	mov	r3, #0
   13cc0:	str	r6, [fp, #-132]	; 0xffffff7c
   13cc4:	strb	r3, [fp, #-128]	; 0xffffff80
   13cc8:	b	13bd8 <__assert_fail@plt+0x2acc>
   13ccc:	ldr	r4, [fp, #-136]	; 0xffffff78
   13cd0:	mov	r0, r4
   13cd4:	bl	10fe0 <strlen@plt>
   13cd8:	mov	r3, #0
   13cdc:	strb	r3, [fp, #-128]	; 0xffffff80
   13ce0:	str	r0, [fp, #-132]	; 0xffffff7c
   13ce4:	b	13bdc <__assert_fail@plt+0x2ad0>
   13ce8:	ldr	r4, [fp, #-136]	; 0xffffff78
   13cec:	str	r6, [fp, #-132]	; 0xffffff7c
   13cf0:	ldrb	r3, [r4]
   13cf4:	cmp	r3, #0
   13cf8:	bne	13e7c <__assert_fail@plt+0x2d70>
   13cfc:	ldr	r4, [fp, #-124]	; 0xffffff84
   13d00:	cmp	r4, #0
   13d04:	beq	13c98 <__assert_fail@plt+0x2b8c>
   13d08:	ldr	r3, [pc, #404]	; 13ea4 <__assert_fail@plt+0x2d98>
   13d0c:	mov	r2, #179	; 0xb3
   13d10:	ldr	r1, [pc, #400]	; 13ea8 <__assert_fail@plt+0x2d9c>
   13d14:	ldr	r0, [pc, #400]	; 13eac <__assert_fail@plt+0x2da0>
   13d18:	bl	1110c <__assert_fail@plt>
   13d1c:	ldr	r7, [fp, #-220]	; 0xffffff24
   13d20:	ldrb	r3, [fp, #-84]	; 0xffffffac
   13d24:	b	138e0 <__assert_fail@plt+0x27d4>
   13d28:	mov	r3, #0
   13d2c:	str	r6, [fp, #-76]	; 0xffffffb4
   13d30:	strb	r6, [fp, #-84]	; 0xffffffac
   13d34:	strb	r3, [fp, #-72]	; 0xffffffb8
   13d38:	b	138fc <__assert_fail@plt+0x27f0>
   13d3c:	sub	r0, fp, #148	; 0x94
   13d40:	bl	10ed8 <mbsinit@plt>
   13d44:	cmp	r0, #0
   13d48:	beq	13e68 <__assert_fail@plt+0x2d5c>
   13d4c:	strb	r6, [fp, #-152]	; 0xffffff68
   13d50:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13d54:	mov	r1, r0
   13d58:	mov	r0, r4
   13d5c:	bl	12820 <__assert_fail@plt+0x1714>
   13d60:	sub	r3, fp, #148	; 0x94
   13d64:	mov	r1, r4
   13d68:	mov	r2, r0
   13d6c:	sub	r0, fp, #124	; 0x7c
   13d70:	bl	12f1c <__assert_fail@plt+0x1e10>
   13d74:	cmn	r0, #1
   13d78:	str	r0, [fp, #-132]	; 0xffffff7c
   13d7c:	beq	13e14 <__assert_fail@plt+0x2d08>
   13d80:	cmn	r0, #2
   13d84:	beq	13e28 <__assert_fail@plt+0x2d1c>
   13d88:	cmp	r0, #0
   13d8c:	beq	13e44 <__assert_fail@plt+0x2d38>
   13d90:	ldr	r4, [fp, #-124]	; 0xffffff84
   13d94:	sub	r0, fp, #148	; 0x94
   13d98:	strb	r6, [fp, #-128]	; 0xffffff80
   13d9c:	bl	10ed8 <mbsinit@plt>
   13da0:	cmp	r0, #0
   13da4:	movne	r3, #0
   13da8:	strbeq	r6, [fp, #-140]	; 0xffffff74
   13dac:	strbne	r6, [fp, #-140]	; 0xffffff74
   13db0:	strbne	r3, [fp, #-152]	; 0xffffff68
   13db4:	b	13968 <__assert_fail@plt+0x285c>
   13db8:	str	r7, [r9, r7, lsl #2]
   13dbc:	b	13888 <__assert_fail@plt+0x277c>
   13dc0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13dc4:	bl	10fe0 <strlen@plt>
   13dc8:	mov	r3, #0
   13dcc:	strb	r6, [fp, #-84]	; 0xffffffac
   13dd0:	strb	r3, [fp, #-72]	; 0xffffffb8
   13dd4:	str	r0, [fp, #-76]	; 0xffffffb4
   13dd8:	b	138fc <__assert_fail@plt+0x27f0>
   13ddc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13de0:	str	r6, [fp, #-76]	; 0xffffffb4
   13de4:	ldrb	r3, [r5]
   13de8:	cmp	r3, #0
   13dec:	bne	13e7c <__assert_fail@plt+0x2d70>
   13df0:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13df4:	cmp	r4, #0
   13df8:	beq	13b5c <__assert_fail@plt+0x2a50>
   13dfc:	b	13b00 <__assert_fail@plt+0x29f4>
   13e00:	ldrb	r3, [fp, #-128]	; 0xffffff80
   13e04:	cmp	r3, #0
   13e08:	ldrne	r4, [fp, #-124]	; 0xffffff84
   13e0c:	beq	13970 <__assert_fail@plt+0x2864>
   13e10:	b	13968 <__assert_fail@plt+0x285c>
   13e14:	mov	r3, #0
   13e18:	str	r6, [fp, #-132]	; 0xffffff7c
   13e1c:	strb	r3, [fp, #-128]	; 0xffffff80
   13e20:	ldr	r4, [fp, #-136]	; 0xffffff78
   13e24:	b	13974 <__assert_fail@plt+0x2868>
   13e28:	ldr	r4, [fp, #-136]	; 0xffffff78
   13e2c:	mov	r0, r4
   13e30:	bl	10fe0 <strlen@plt>
   13e34:	mov	r3, #0
   13e38:	strb	r3, [fp, #-128]	; 0xffffff80
   13e3c:	str	r0, [fp, #-132]	; 0xffffff7c
   13e40:	b	13974 <__assert_fail@plt+0x2868>
   13e44:	ldr	r4, [fp, #-136]	; 0xffffff78
   13e48:	str	r6, [fp, #-132]	; 0xffffff7c
   13e4c:	ldrb	r3, [r4]
   13e50:	cmp	r3, #0
   13e54:	bne	13e7c <__assert_fail@plt+0x2d70>
   13e58:	ldr	r4, [fp, #-124]	; 0xffffff84
   13e5c:	cmp	r4, #0
   13e60:	beq	13d94 <__assert_fail@plt+0x2c88>
   13e64:	b	13b00 <__assert_fail@plt+0x29f4>
   13e68:	ldr	r3, [pc, #52]	; 13ea4 <__assert_fail@plt+0x2d98>
   13e6c:	mov	r2, #150	; 0x96
   13e70:	ldr	r1, [pc, #48]	; 13ea8 <__assert_fail@plt+0x2d9c>
   13e74:	ldr	r0, [pc, #52]	; 13eb0 <__assert_fail@plt+0x2da4>
   13e78:	bl	1110c <__assert_fail@plt>
   13e7c:	ldr	r3, [pc, #32]	; 13ea4 <__assert_fail@plt+0x2d98>
   13e80:	mov	r2, #178	; 0xb2
   13e84:	ldr	r1, [pc, #28]	; 13ea8 <__assert_fail@plt+0x2d9c>
   13e88:	ldr	r0, [pc, #36]	; 13eb4 <__assert_fail@plt+0x2da8>
   13e8c:	bl	1110c <__assert_fail@plt>
   13e90:	bl	10f08 <__stack_chk_fail@plt>
   13e94:	andeq	r5, r2, r8, lsl #30
   13e98:	ldrbeq	r7, [r1, #1117]	; 0x45d
   13e9c:			; <UNDEFINED> instruction: 0x00000fb7
   13ea0:	andeq	r5, r1, r4, lsr ip
   13ea4:	andeq	r5, r1, r4, asr ip
   13ea8:	andeq	r5, r1, r4, asr #22
   13eac:	andeq	r5, r1, r0, asr fp
   13eb0:	andeq	r5, r1, r4, ror #22
   13eb4:	andeq	r5, r1, ip, ror fp
   13eb8:	ldr	r3, [pc, #3108]	; 14ae4 <__assert_fail@plt+0x39d8>
   13ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ec0:	sub	sp, sp, #308	; 0x134
   13ec4:	ldr	r3, [r3]
   13ec8:	str	r0, [sp, #4]
   13ecc:	mov	fp, r1
   13ed0:	str	r3, [sp, #300]	; 0x12c
   13ed4:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13ed8:	cmp	r0, #1
   13edc:	bhi	14108 <__assert_fail@plt+0x2ffc>
   13ee0:	ldrb	r7, [fp]
   13ee4:	cmp	r7, #0
   13ee8:	beq	14084 <__assert_fail@plt+0x2f78>
   13eec:	ldr	r3, [sp, #4]
   13ef0:	ldrb	r8, [r3]
   13ef4:	add	r3, fp, #1
   13ef8:	str	r3, [sp, #8]
   13efc:	cmp	r8, #0
   13f00:	beq	14100 <__assert_fail@plt+0x2ff4>
   13f04:	ldr	sl, [sp, #4]
   13f08:	mov	r5, #0
   13f0c:	mov	ip, r5
   13f10:	str	r5, [sp]
   13f14:	mov	r9, fp
   13f18:	mov	lr, #1
   13f1c:	mov	r6, sl
   13f20:	b	13f84 <__assert_fail@plt+0x2e78>
   13f24:	cmp	r9, #0
   13f28:	str	r3, [sp, #4]
   13f2c:	beq	13f54 <__assert_fail@plt+0x2e48>
   13f30:	ldr	r3, [sp]
   13f34:	mov	r0, r9
   13f38:	sub	r1, r4, r3
   13f3c:	bl	11088 <strnlen@plt>
   13f40:	ldr	r3, [sp, #4]
   13f44:	ldrb	r2, [r9, r0]!
   13f48:	cmp	r2, #0
   13f4c:	bne	14834 <__assert_fail@plt+0x3728>
   13f50:	str	r4, [sp]
   13f54:	mov	r0, fp
   13f58:	bl	10fe0 <strlen@plt>
   13f5c:	add	r3, sp, #16
   13f60:	mov	r1, fp
   13f64:	mov	r2, r0
   13f68:	mov	r0, r6
   13f6c:	bl	134c4 <__assert_fail@plt+0x23b8>
   13f70:	subs	lr, r0, #0
   13f74:	bne	14a70 <__assert_fail@plt+0x3964>
   13f78:	ldrb	r8, [sl, r5]
   13f7c:	mov	r9, lr
   13f80:	mov	ip, r4
   13f84:	add	r5, r5, #1
   13f88:	mov	r0, r6
   13f8c:	cmp	r7, r8
   13f90:	add	r6, r5, sl
   13f94:	mov	r1, r6
   13f98:	add	r4, ip, #1
   13f9c:	beq	140a4 <__assert_fail@plt+0x2f98>
   13fa0:	ldrb	r8, [sl, r5]
   13fa4:	cmp	r8, #0
   13fa8:	beq	14100 <__assert_fail@plt+0x2ff4>
   13fac:	cmp	r5, #9
   13fb0:	movls	r3, #0
   13fb4:	andhi	r3, lr, #1
   13fb8:	cmp	r3, #0
   13fbc:	beq	13f80 <__assert_fail@plt+0x2e74>
   13fc0:	add	r2, r5, r5, lsl #2
   13fc4:	cmp	r4, r2
   13fc8:	bcs	13f24 <__assert_fail@plt+0x2e18>
   13fcc:	mov	lr, r3
   13fd0:	b	13f80 <__assert_fail@plt+0x2e74>
   13fd4:	add	r0, sp, #24
   13fd8:	bl	10ed8 <mbsinit@plt>
   13fdc:	cmp	r0, #0
   13fe0:	beq	14ab8 <__assert_fail@plt+0x39ac>
   13fe4:	mov	r5, #1
   13fe8:	strb	r5, [sp, #20]
   13fec:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13ff0:	mov	r1, r0
   13ff4:	mov	r0, fp
   13ff8:	bl	12820 <__assert_fail@plt+0x1714>
   13ffc:	add	r3, sp, #24
   14000:	mov	r1, fp
   14004:	mov	r2, r0
   14008:	add	r0, sp, #48	; 0x30
   1400c:	bl	12f1c <__assert_fail@plt+0x1e10>
   14010:	cmn	r0, #1
   14014:	str	r0, [sp, #40]	; 0x28
   14018:	strbeq	r4, [sp, #44]	; 0x2c
   1401c:	streq	r5, [sp, #40]	; 0x28
   14020:	strbeq	r5, [sp, #32]
   14024:	beq	14170 <__assert_fail@plt+0x3064>
   14028:	cmn	r0, #2
   1402c:	beq	1415c <__assert_fail@plt+0x3050>
   14030:	cmp	r0, #0
   14034:	bne	14a50 <__assert_fail@plt+0x3944>
   14038:	ldr	r3, [sp, #36]	; 0x24
   1403c:	str	r5, [sp, #40]	; 0x28
   14040:	ldrb	r3, [r3]
   14044:	cmp	r3, #0
   14048:	bne	14acc <__assert_fail@plt+0x39c0>
   1404c:	ldr	r4, [sp, #48]	; 0x30
   14050:	cmp	r4, #0
   14054:	bne	14a98 <__assert_fail@plt+0x398c>
   14058:	mov	r5, #1
   1405c:	add	r0, sp, #24
   14060:	strb	r5, [sp, #44]	; 0x2c
   14064:	bl	10ed8 <mbsinit@plt>
   14068:	cmp	r0, #0
   1406c:	movne	r3, #0
   14070:	strbeq	r5, [sp, #32]
   14074:	strbne	r5, [sp, #32]
   14078:	strbne	r3, [sp, #20]
   1407c:	cmp	r4, #0
   14080:	bne	14170 <__assert_fail@plt+0x3064>
   14084:	ldr	r0, [sp, #4]
   14088:	ldr	r3, [pc, #2644]	; 14ae4 <__assert_fail@plt+0x39d8>
   1408c:	ldr	r2, [sp, #300]	; 0x12c
   14090:	ldr	r3, [r3]
   14094:	cmp	r2, r3
   14098:	bne	14ae0 <__assert_fail@plt+0x39d4>
   1409c:	add	sp, sp, #308	; 0x134
   140a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140a4:	ldrb	r3, [fp, #1]
   140a8:	cmp	r3, #0
   140ac:	beq	14088 <__assert_fail@plt+0x2f7c>
   140b0:	ldrb	r8, [sl, r5]
   140b4:	cmp	r8, #0
   140b8:	beq	14100 <__assert_fail@plt+0x2ff4>
   140bc:	cmp	r3, r8
   140c0:	add	r4, ip, #2
   140c4:	bne	13fac <__assert_fail@plt+0x2ea0>
   140c8:	ldr	r3, [sp, #8]
   140cc:	add	r3, r3, #1
   140d0:	b	140e8 <__assert_fail@plt+0x2fdc>
   140d4:	add	r3, r3, #1
   140d8:	cmp	r2, r4
   140dc:	sub	r4, r3, fp
   140e0:	add	r4, r4, ip
   140e4:	bne	13fac <__assert_fail@plt+0x2ea0>
   140e8:	ldrb	r2, [r3]
   140ec:	cmp	r2, #0
   140f0:	beq	14088 <__assert_fail@plt+0x2f7c>
   140f4:	ldrb	r4, [r1, #1]!
   140f8:	cmp	r4, #0
   140fc:	bne	140d4 <__assert_fail@plt+0x2fc8>
   14100:	mov	r0, #0
   14104:	b	14088 <__assert_fail@plt+0x2f7c>
   14108:	ldrb	r1, [fp]
   1410c:	ldr	r8, [pc, #2516]	; 14ae8 <__assert_fail@plt+0x39dc>
   14110:	str	fp, [sp, #36]	; 0x24
   14114:	and	r0, r1, #31
   14118:	lsr	r3, r1, #5
   1411c:	ldr	r2, [r8, r3, lsl #2]
   14120:	mov	r3, #0
   14124:	str	r3, [sp, #28]
   14128:	lsr	r2, r2, r0
   1412c:	ands	r4, r2, #1
   14130:	strb	r3, [sp, #20]
   14134:	str	r3, [sp, #24]
   14138:	strb	r3, [sp, #32]
   1413c:	beq	13fd4 <__assert_fail@plt+0x2ec8>
   14140:	mov	r3, #1
   14144:	str	r1, [sp, #48]	; 0x30
   14148:	mov	r4, r1
   1414c:	str	r3, [sp, #40]	; 0x28
   14150:	strb	r3, [sp, #44]	; 0x2c
   14154:	strb	r3, [sp, #32]
   14158:	b	1407c <__assert_fail@plt+0x2f70>
   1415c:	ldr	r0, [sp, #36]	; 0x24
   14160:	bl	10fe0 <strlen@plt>
   14164:	strb	r4, [sp, #44]	; 0x2c
   14168:	strb	r5, [sp, #32]
   1416c:	str	r0, [sp, #40]	; 0x28
   14170:	mov	r3, #0
   14174:	str	r3, [sp, #12]
   14178:	mov	r6, r3
   1417c:	mov	r7, r3
   14180:	str	fp, [sp, #92]	; 0x5c
   14184:	strb	r3, [sp, #76]	; 0x4c
   14188:	str	r3, [sp, #80]	; 0x50
   1418c:	strb	r3, [sp, #88]	; 0x58
   14190:	strb	r3, [sp, #132]	; 0x84
   14194:	str	r3, [sp, #136]	; 0x88
   14198:	strb	r3, [sp, #144]	; 0x90
   1419c:	str	r3, [sp, #84]	; 0x54
   141a0:	str	r3, [sp, #140]	; 0x8c
   141a4:	str	fp, [sp, #8]
   141a8:	mov	fp, r3
   141ac:	ldrb	r3, [sp, #132]	; 0x84
   141b0:	mov	r1, #1
   141b4:	str	r1, [sp]
   141b8:	mov	r4, r1
   141bc:	mov	r9, r1
   141c0:	ldr	r1, [sp, #4]
   141c4:	cmp	r3, #0
   141c8:	mov	r5, r1
   141cc:	str	r1, [sp, #148]	; 0x94
   141d0:	bne	144b0 <__assert_fail@plt+0x33a4>
   141d4:	ldrb	r3, [r5]
   141d8:	and	r2, r3, #31
   141dc:	lsr	r3, r3, #5
   141e0:	ldr	r3, [r8, r3, lsl #2]
   141e4:	lsr	r3, r3, r2
   141e8:	tst	r3, #1
   141ec:	beq	147e0 <__assert_fail@plt+0x36d4>
   141f0:	str	r9, [sp, #152]	; 0x98
   141f4:	ldrb	r5, [r5]
   141f8:	strb	r4, [sp, #156]	; 0x9c
   141fc:	strb	r4, [sp, #144]	; 0x90
   14200:	str	r5, [sp, #160]	; 0xa0
   14204:	cmp	r5, #0
   14208:	beq	14100 <__assert_fail@plt+0x2ff4>
   1420c:	ldr	r3, [sp]
   14210:	cmp	fp, #9
   14214:	movls	r3, #0
   14218:	andhi	r3, r3, #1
   1421c:	cmp	r3, #0
   14220:	addeq	r6, r6, #1
   14224:	beq	1423c <__assert_fail@plt+0x3130>
   14228:	add	r2, fp, fp, lsl #2
   1422c:	cmp	r6, r2
   14230:	addcc	r6, r6, #1
   14234:	strcc	r3, [sp]
   14238:	bcs	14668 <__assert_fail@plt+0x355c>
   1423c:	ldrb	r3, [sp, #44]	; 0x2c
   14240:	cmp	r3, #0
   14244:	beq	145f8 <__assert_fail@plt+0x34ec>
   14248:	ldr	r2, [sp, #160]	; 0xa0
   1424c:	ldr	r3, [sp, #48]	; 0x30
   14250:	cmp	r2, r3
   14254:	bne	1448c <__assert_fail@plt+0x3380>
   14258:	add	lr, sp, #132	; 0x84
   1425c:	add	ip, sp, #188	; 0xbc
   14260:	ldm	lr!, {r0, r1, r2, r3}
   14264:	stmia	ip!, {r0, r1, r2, r3}
   14268:	ldm	lr!, {r0, r1, r2, r3}
   1426c:	strb	r7, [sp, #200]	; 0xc8
   14270:	stmia	ip!, {r0, r1, r2, r3}
   14274:	ldm	lr!, {r0, r1, r2, r3}
   14278:	ldr	r5, [sp, #204]	; 0xcc
   1427c:	stmia	ip!, {r0, r1, r2, r3}
   14280:	ldm	lr, {r0, r1}
   14284:	ldr	r3, [sp, #208]	; 0xd0
   14288:	add	r5, r5, r3
   1428c:	stm	ip, {r0, r1}
   14290:	str	r5, [sp, #204]	; 0xcc
   14294:	ldr	r3, [sp, #8]
   14298:	strb	r7, [sp, #244]	; 0xf4
   1429c:	str	r3, [sp, #260]	; 0x104
   142a0:	ldrb	r3, [r3]
   142a4:	str	r7, [sp, #248]	; 0xf8
   142a8:	strb	r7, [sp, #256]	; 0x100
   142ac:	and	r2, r3, #31
   142b0:	lsr	r1, r3, #5
   142b4:	str	r7, [sp, #252]	; 0xfc
   142b8:	ldr	sl, [r8, r1, lsl #2]
   142bc:	lsr	sl, sl, r2
   142c0:	ands	sl, sl, #1
   142c4:	beq	148d4 <__assert_fail@plt+0x37c8>
   142c8:	mov	r5, r3
   142cc:	cmp	r5, #0
   142d0:	str	r9, [sp, #264]	; 0x108
   142d4:	str	r3, [sp, #272]	; 0x110
   142d8:	strb	r4, [sp, #268]	; 0x10c
   142dc:	strb	r4, [sp, #256]	; 0x100
   142e0:	beq	14950 <__assert_fail@plt+0x3844>
   142e4:	ldr	r5, [sp, #260]	; 0x104
   142e8:	ldr	r3, [sp, #264]	; 0x108
   142ec:	add	r6, r6, #1
   142f0:	add	r5, r5, r3
   142f4:	strb	r7, [sp, #256]	; 0x100
   142f8:	str	r5, [sp, #260]	; 0x104
   142fc:	b	143e4 <__assert_fail@plt+0x32d8>
   14300:	ldrb	r3, [r5]
   14304:	and	r2, r3, #31
   14308:	lsr	r3, r3, #5
   1430c:	ldr	r3, [r8, r3, lsl #2]
   14310:	lsr	r3, r3, r2
   14314:	tst	r3, #1
   14318:	beq	145dc <__assert_fail@plt+0x34d0>
   1431c:	str	r9, [sp, #264]	; 0x108
   14320:	ldrb	r5, [r5]
   14324:	strb	r4, [sp, #268]	; 0x10c
   14328:	strb	r4, [sp, #256]	; 0x100
   1432c:	cmp	r5, #0
   14330:	str	r5, [sp, #272]	; 0x110
   14334:	beq	14460 <__assert_fail@plt+0x3354>
   14338:	ldrb	r3, [sp, #200]	; 0xc8
   1433c:	cmp	r3, #0
   14340:	bne	145a4 <__assert_fail@plt+0x3498>
   14344:	ldrb	r3, [sp, #188]	; 0xbc
   14348:	ldr	r5, [sp, #204]	; 0xcc
   1434c:	cmp	r3, #0
   14350:	addne	sl, sp, #192	; 0xc0
   14354:	bne	14538 <__assert_fail@plt+0x342c>
   14358:	ldrb	r3, [r5]
   1435c:	and	r2, r3, #31
   14360:	lsr	r3, r3, #5
   14364:	ldr	r3, [r8, r3, lsl #2]
   14368:	lsr	r3, r3, r2
   1436c:	tst	r3, #1
   14370:	beq	14520 <__assert_fail@plt+0x3414>
   14374:	str	r9, [sp, #208]	; 0xd0
   14378:	ldrb	r0, [r5]
   1437c:	strb	r4, [sp, #212]	; 0xd4
   14380:	strb	r4, [sp, #200]	; 0xc8
   14384:	mov	r5, r0
   14388:	str	r0, [sp, #216]	; 0xd8
   1438c:	cmp	r5, #0
   14390:	beq	14100 <__assert_fail@plt+0x2ff4>
   14394:	ldrb	r3, [sp, #268]	; 0x10c
   14398:	cmp	r3, #0
   1439c:	beq	1447c <__assert_fail@plt+0x3370>
   143a0:	ldr	r0, [sp, #272]	; 0x110
   143a4:	subs	r0, r0, r5
   143a8:	movne	r0, #1
   143ac:	cmp	r0, #0
   143b0:	add	r1, r6, #1
   143b4:	bne	1448c <__assert_fail@plt+0x3380>
   143b8:	ldr	r3, [sp, #204]	; 0xcc
   143bc:	ldr	r2, [sp, #208]	; 0xd0
   143c0:	ldr	r5, [sp, #260]	; 0x104
   143c4:	add	r3, r3, r2
   143c8:	ldr	r2, [sp, #264]	; 0x108
   143cc:	mov	r6, r1
   143d0:	add	r5, r5, r2
   143d4:	strb	r0, [sp, #200]	; 0xc8
   143d8:	strb	r0, [sp, #256]	; 0x100
   143dc:	str	r3, [sp, #204]	; 0xcc
   143e0:	str	r5, [sp, #260]	; 0x104
   143e4:	ldrb	r3, [sp, #244]	; 0xf4
   143e8:	cmp	r3, #0
   143ec:	beq	14300 <__assert_fail@plt+0x31f4>
   143f0:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   143f4:	mov	r1, r0
   143f8:	mov	r0, r5
   143fc:	bl	12820 <__assert_fail@plt+0x1714>
   14400:	add	r3, sp, #248	; 0xf8
   14404:	mov	r1, r5
   14408:	mov	r2, r0
   1440c:	add	r0, sp, #272	; 0x110
   14410:	bl	12f1c <__assert_fail@plt+0x1e10>
   14414:	cmn	r0, #1
   14418:	str	r0, [sp, #264]	; 0x108
   1441c:	strbeq	r7, [sp, #268]	; 0x10c
   14420:	streq	r9, [sp, #264]	; 0x108
   14424:	strbeq	r4, [sp, #256]	; 0x100
   14428:	beq	14338 <__assert_fail@plt+0x322c>
   1442c:	cmn	r0, #2
   14430:	beq	1475c <__assert_fail@plt+0x3650>
   14434:	cmp	r0, #0
   14438:	beq	14774 <__assert_fail@plt+0x3668>
   1443c:	ldr	r5, [sp, #272]	; 0x110
   14440:	add	r0, sp, #248	; 0xf8
   14444:	strb	r4, [sp, #268]	; 0x10c
   14448:	bl	10ed8 <mbsinit@plt>
   1444c:	strb	r4, [sp, #256]	; 0x100
   14450:	cmp	r0, #0
   14454:	strbne	r7, [sp, #244]	; 0xf4
   14458:	cmp	r5, #0
   1445c:	bne	14338 <__assert_fail@plt+0x322c>
   14460:	ldr	r0, [sp, #148]	; 0x94
   14464:	b	14088 <__assert_fail@plt+0x2f7c>
   14468:	ldr	r0, [sp, #204]	; 0xcc
   1446c:	bl	10fe0 <strlen@plt>
   14470:	strb	r7, [sp, #212]	; 0xd4
   14474:	strb	r4, [sp, #200]	; 0xc8
   14478:	str	r0, [sp, #208]	; 0xd0
   1447c:	ldr	r2, [sp, #208]	; 0xd0
   14480:	ldr	r3, [sp, #264]	; 0x108
   14484:	cmp	r2, r3
   14488:	beq	145c4 <__assert_fail@plt+0x34b8>
   1448c:	ldr	r5, [sp, #148]	; 0x94
   14490:	ldr	sl, [sp, #152]	; 0x98
   14494:	ldrb	r3, [sp, #132]	; 0x84
   14498:	add	r5, r5, sl
   1449c:	str	r5, [sp, #148]	; 0x94
   144a0:	cmp	r3, #0
   144a4:	strb	r7, [sp, #144]	; 0x90
   144a8:	add	fp, fp, #1
   144ac:	beq	141d4 <__assert_fail@plt+0x30c8>
   144b0:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   144b4:	mov	r1, r0
   144b8:	mov	r0, r5
   144bc:	bl	12820 <__assert_fail@plt+0x1714>
   144c0:	add	r3, sp, #136	; 0x88
   144c4:	mov	r1, r5
   144c8:	mov	r2, r0
   144cc:	add	r0, sp, #160	; 0xa0
   144d0:	bl	12f1c <__assert_fail@plt+0x1e10>
   144d4:	cmn	r0, #1
   144d8:	str	r0, [sp, #152]	; 0x98
   144dc:	strbeq	r7, [sp, #156]	; 0x9c
   144e0:	streq	r9, [sp, #152]	; 0x98
   144e4:	strbeq	r4, [sp, #144]	; 0x90
   144e8:	beq	1463c <__assert_fail@plt+0x3530>
   144ec:	cmn	r0, #2
   144f0:	beq	14628 <__assert_fail@plt+0x351c>
   144f4:	cmp	r0, #0
   144f8:	bne	14840 <__assert_fail@plt+0x3734>
   144fc:	ldr	r5, [sp, #148]	; 0x94
   14500:	str	r9, [sp, #152]	; 0x98
   14504:	ldrb	r3, [r5]
   14508:	cmp	r3, #0
   1450c:	bne	14acc <__assert_fail@plt+0x39c0>
   14510:	ldr	r5, [sp, #160]	; 0xa0
   14514:	cmp	r5, #0
   14518:	beq	14844 <__assert_fail@plt+0x3738>
   1451c:	b	14a98 <__assert_fail@plt+0x398c>
   14520:	add	sl, sp, #192	; 0xc0
   14524:	mov	r0, sl
   14528:	bl	10ed8 <mbsinit@plt>
   1452c:	cmp	r0, #0
   14530:	beq	14ab8 <__assert_fail@plt+0x39ac>
   14534:	strb	r4, [sp, #188]	; 0xbc
   14538:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   1453c:	mov	r1, r0
   14540:	mov	r0, r5
   14544:	bl	12820 <__assert_fail@plt+0x1714>
   14548:	mov	r3, sl
   1454c:	mov	r1, r5
   14550:	mov	r2, r0
   14554:	add	r0, sp, #216	; 0xd8
   14558:	bl	12f1c <__assert_fail@plt+0x1e10>
   1455c:	cmn	r0, #1
   14560:	str	r0, [sp, #208]	; 0xd0
   14564:	strbeq	r7, [sp, #212]	; 0xd4
   14568:	streq	r9, [sp, #208]	; 0xd0
   1456c:	strbeq	r4, [sp, #200]	; 0xc8
   14570:	beq	1447c <__assert_fail@plt+0x3370>
   14574:	cmn	r0, #2
   14578:	beq	14468 <__assert_fail@plt+0x335c>
   1457c:	cmp	r0, #0
   14580:	beq	14798 <__assert_fail@plt+0x368c>
   14584:	ldr	r5, [sp, #216]	; 0xd8
   14588:	mov	r0, sl
   1458c:	strb	r4, [sp, #212]	; 0xd4
   14590:	bl	10ed8 <mbsinit@plt>
   14594:	strb	r4, [sp, #200]	; 0xc8
   14598:	cmp	r0, #0
   1459c:	strbne	r7, [sp, #188]	; 0xbc
   145a0:	b	1438c <__assert_fail@plt+0x3280>
   145a4:	ldrb	r3, [sp, #212]	; 0xd4
   145a8:	cmp	r3, #0
   145ac:	ldrne	r5, [sp, #216]	; 0xd8
   145b0:	bne	1438c <__assert_fail@plt+0x3280>
   145b4:	ldr	r2, [sp, #208]	; 0xd0
   145b8:	ldr	r3, [sp, #264]	; 0x108
   145bc:	cmp	r2, r3
   145c0:	bne	1448c <__assert_fail@plt+0x3380>
   145c4:	ldr	r1, [sp, #260]	; 0x104
   145c8:	ldr	r0, [sp, #204]	; 0xcc
   145cc:	bl	10ee4 <memcmp@plt>
   145d0:	adds	r0, r0, #0
   145d4:	movne	r0, #1
   145d8:	b	143ac <__assert_fail@plt+0x32a0>
   145dc:	add	r0, sp, #248	; 0xf8
   145e0:	bl	10ed8 <mbsinit@plt>
   145e4:	cmp	r0, #0
   145e8:	beq	14ab8 <__assert_fail@plt+0x39ac>
   145ec:	strb	r4, [sp, #244]	; 0xf4
   145f0:	b	143f0 <__assert_fail@plt+0x32e4>
   145f4:	add	r6, r6, #1
   145f8:	ldr	sl, [sp, #152]	; 0x98
   145fc:	ldr	r3, [sp, #40]	; 0x28
   14600:	ldr	r5, [sp, #148]	; 0x94
   14604:	cmp	sl, r3
   14608:	bne	14494 <__assert_fail@plt+0x3388>
   1460c:	mov	r2, sl
   14610:	mov	r0, r5
   14614:	ldr	r1, [sp, #36]	; 0x24
   14618:	bl	10ee4 <memcmp@plt>
   1461c:	cmp	r0, #0
   14620:	bne	14494 <__assert_fail@plt+0x3388>
   14624:	b	14258 <__assert_fail@plt+0x314c>
   14628:	ldr	r0, [sp, #148]	; 0x94
   1462c:	bl	10fe0 <strlen@plt>
   14630:	strb	r7, [sp, #156]	; 0x9c
   14634:	strb	r4, [sp, #144]	; 0x90
   14638:	str	r0, [sp, #152]	; 0x98
   1463c:	ldr	r3, [sp]
   14640:	cmp	fp, #9
   14644:	movls	r3, #0
   14648:	andhi	r3, r3, #1
   1464c:	cmp	r3, #0
   14650:	beq	145f4 <__assert_fail@plt+0x34e8>
   14654:	add	r2, fp, fp, lsl #2
   14658:	cmp	r6, r2
   1465c:	addcc	r6, r6, #1
   14660:	strcc	r3, [sp]
   14664:	bcc	145f8 <__assert_fail@plt+0x34ec>
   14668:	ldr	r3, [sp, #12]
   1466c:	subs	sl, r6, r3
   14670:	ldrb	r3, [sp, #88]	; 0x58
   14674:	beq	14a9c <__assert_fail@plt+0x3990>
   14678:	cmp	r3, #0
   1467c:	ldreq	r5, [sp, #92]	; 0x5c
   14680:	beq	146f0 <__assert_fail@plt+0x35e4>
   14684:	ldrb	r3, [sp, #100]	; 0x64
   14688:	cmp	r3, #0
   1468c:	ldrne	r5, [sp, #104]	; 0x68
   14690:	beq	146d0 <__assert_fail@plt+0x35c4>
   14694:	b	146c8 <__assert_fail@plt+0x35bc>
   14698:	ldrb	r3, [r5]
   1469c:	and	r2, r3, #31
   146a0:	lsr	r3, r3, #5
   146a4:	ldr	r3, [r8, r3, lsl #2]
   146a8:	lsr	r3, r3, r2
   146ac:	tst	r3, #1
   146b0:	beq	147bc <__assert_fail@plt+0x36b0>
   146b4:	str	r9, [sp, #96]	; 0x60
   146b8:	ldrb	r5, [r5]
   146bc:	strb	r4, [sp, #100]	; 0x64
   146c0:	strb	r4, [sp, #88]	; 0x58
   146c4:	str	r5, [sp, #104]	; 0x68
   146c8:	cmp	r5, #0
   146cc:	beq	149e8 <__assert_fail@plt+0x38dc>
   146d0:	ldr	r5, [sp, #92]	; 0x5c
   146d4:	ldr	r3, [sp, #96]	; 0x60
   146d8:	subs	sl, sl, #1
   146dc:	add	r5, r5, r3
   146e0:	strb	r7, [sp, #88]	; 0x58
   146e4:	str	r5, [sp, #92]	; 0x5c
   146e8:	str	r5, [sp]
   146ec:	beq	14868 <__assert_fail@plt+0x375c>
   146f0:	ldrb	r3, [sp, #76]	; 0x4c
   146f4:	cmp	r3, #0
   146f8:	beq	14698 <__assert_fail@plt+0x358c>
   146fc:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   14700:	mov	r1, r0
   14704:	mov	r0, r5
   14708:	bl	12820 <__assert_fail@plt+0x1714>
   1470c:	add	r3, sp, #80	; 0x50
   14710:	mov	r1, r5
   14714:	mov	r2, r0
   14718:	add	r0, sp, #104	; 0x68
   1471c:	bl	12f1c <__assert_fail@plt+0x1e10>
   14720:	cmn	r0, #1
   14724:	str	r0, [sp, #96]	; 0x60
   14728:	beq	147d4 <__assert_fail@plt+0x36c8>
   1472c:	cmn	r0, #2
   14730:	beq	147f8 <__assert_fail@plt+0x36ec>
   14734:	cmp	r0, #0
   14738:	beq	14810 <__assert_fail@plt+0x3704>
   1473c:	ldr	r5, [sp, #104]	; 0x68
   14740:	add	r0, sp, #80	; 0x50
   14744:	strb	r4, [sp, #100]	; 0x64
   14748:	bl	10ed8 <mbsinit@plt>
   1474c:	strb	r4, [sp, #88]	; 0x58
   14750:	cmp	r0, #0
   14754:	strbne	r7, [sp, #76]	; 0x4c
   14758:	b	146c8 <__assert_fail@plt+0x35bc>
   1475c:	ldr	r0, [sp, #260]	; 0x104
   14760:	bl	10fe0 <strlen@plt>
   14764:	strb	r7, [sp, #268]	; 0x10c
   14768:	strb	r4, [sp, #256]	; 0x100
   1476c:	str	r0, [sp, #264]	; 0x108
   14770:	b	14338 <__assert_fail@plt+0x322c>
   14774:	ldr	r3, [sp, #260]	; 0x104
   14778:	str	r9, [sp, #264]	; 0x108
   1477c:	ldrb	r3, [r3]
   14780:	cmp	r3, #0
   14784:	bne	14acc <__assert_fail@plt+0x39c0>
   14788:	ldr	r5, [sp, #272]	; 0x110
   1478c:	cmp	r5, #0
   14790:	beq	14440 <__assert_fail@plt+0x3334>
   14794:	b	14a98 <__assert_fail@plt+0x398c>
   14798:	ldr	r3, [sp, #204]	; 0xcc
   1479c:	str	r9, [sp, #208]	; 0xd0
   147a0:	ldrb	r3, [r3]
   147a4:	cmp	r3, #0
   147a8:	bne	14acc <__assert_fail@plt+0x39c0>
   147ac:	ldr	r5, [sp, #216]	; 0xd8
   147b0:	cmp	r5, #0
   147b4:	beq	14588 <__assert_fail@plt+0x347c>
   147b8:	b	14a98 <__assert_fail@plt+0x398c>
   147bc:	add	r0, sp, #80	; 0x50
   147c0:	bl	10ed8 <mbsinit@plt>
   147c4:	cmp	r0, #0
   147c8:	beq	14ab8 <__assert_fail@plt+0x39ac>
   147cc:	strb	r4, [sp, #76]	; 0x4c
   147d0:	b	146fc <__assert_fail@plt+0x35f0>
   147d4:	str	r9, [sp, #96]	; 0x60
   147d8:	strb	r7, [sp, #100]	; 0x64
   147dc:	b	146d0 <__assert_fail@plt+0x35c4>
   147e0:	add	r0, sp, #136	; 0x88
   147e4:	bl	10ed8 <mbsinit@plt>
   147e8:	cmp	r0, #0
   147ec:	beq	14ab8 <__assert_fail@plt+0x39ac>
   147f0:	strb	r4, [sp, #132]	; 0x84
   147f4:	b	144b0 <__assert_fail@plt+0x33a4>
   147f8:	ldr	r5, [sp, #92]	; 0x5c
   147fc:	mov	r0, r5
   14800:	bl	10fe0 <strlen@plt>
   14804:	strb	r7, [sp, #100]	; 0x64
   14808:	str	r0, [sp, #96]	; 0x60
   1480c:	b	146d4 <__assert_fail@plt+0x35c8>
   14810:	ldr	r5, [sp, #92]	; 0x5c
   14814:	str	r9, [sp, #96]	; 0x60
   14818:	ldrb	r3, [r5]
   1481c:	cmp	r3, #0
   14820:	bne	14acc <__assert_fail@plt+0x39c0>
   14824:	ldr	r5, [sp, #104]	; 0x68
   14828:	cmp	r5, #0
   1482c:	beq	14740 <__assert_fail@plt+0x3634>
   14830:	b	14a98 <__assert_fail@plt+0x398c>
   14834:	mov	lr, r3
   14838:	str	r4, [sp]
   1483c:	b	13f80 <__assert_fail@plt+0x2e74>
   14840:	ldr	r5, [sp, #160]	; 0xa0
   14844:	add	r0, sp, #136	; 0x88
   14848:	strb	r4, [sp, #156]	; 0x9c
   1484c:	bl	10ed8 <mbsinit@plt>
   14850:	strb	r4, [sp, #144]	; 0x90
   14854:	cmp	r0, #0
   14858:	strbne	r7, [sp, #132]	; 0x84
   1485c:	b	14204 <__assert_fail@plt+0x30f8>
   14860:	ldr	r3, [sp, #92]	; 0x5c
   14864:	str	r3, [sp]
   14868:	ldrb	r3, [sp, #76]	; 0x4c
   1486c:	cmp	r3, #0
   14870:	bne	14968 <__assert_fail@plt+0x385c>
   14874:	ldr	r1, [sp]
   14878:	ldrb	r3, [r1]
   1487c:	and	r2, r3, #31
   14880:	lsr	r3, r3, #5
   14884:	ldr	r3, [r8, r3, lsl #2]
   14888:	lsr	r3, r3, r2
   1488c:	tst	r3, #1
   14890:	beq	14954 <__assert_fail@plt+0x3848>
   14894:	str	r9, [sp, #96]	; 0x60
   14898:	ldrb	r5, [r1]
   1489c:	strb	r4, [sp, #100]	; 0x64
   148a0:	strb	r4, [sp, #88]	; 0x58
   148a4:	str	r5, [sp, #104]	; 0x68
   148a8:	cmp	r5, #0
   148ac:	beq	149f4 <__assert_fail@plt+0x38e8>
   148b0:	ldrb	r3, [sp, #156]	; 0x9c
   148b4:	mov	r2, #1
   148b8:	str	r2, [sp]
   148bc:	cmp	r3, #0
   148c0:	add	r3, r6, #1
   148c4:	str	r6, [sp, #12]
   148c8:	mov	r6, r3
   148cc:	bne	1423c <__assert_fail@plt+0x3130>
   148d0:	b	145f8 <__assert_fail@plt+0x34ec>
   148d4:	add	r0, sp, #248	; 0xf8
   148d8:	bl	10ed8 <mbsinit@plt>
   148dc:	cmp	r0, #0
   148e0:	beq	14ab8 <__assert_fail@plt+0x39ac>
   148e4:	strb	r4, [sp, #244]	; 0xf4
   148e8:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   148ec:	ldr	r5, [sp, #8]
   148f0:	mov	r1, r0
   148f4:	mov	r0, r5
   148f8:	bl	12820 <__assert_fail@plt+0x1714>
   148fc:	add	r3, sp, #248	; 0xf8
   14900:	mov	r1, r5
   14904:	mov	r2, r0
   14908:	add	r0, sp, #272	; 0x110
   1490c:	bl	12f1c <__assert_fail@plt+0x1e10>
   14910:	cmn	r0, #1
   14914:	str	r0, [sp, #264]	; 0x108
   14918:	beq	149d8 <__assert_fail@plt+0x38cc>
   1491c:	cmn	r0, #2
   14920:	beq	14a14 <__assert_fail@plt+0x3908>
   14924:	cmp	r0, #0
   14928:	beq	14a2c <__assert_fail@plt+0x3920>
   1492c:	ldr	r5, [sp, #272]	; 0x110
   14930:	add	r0, sp, #248	; 0xf8
   14934:	strb	r4, [sp, #268]	; 0x10c
   14938:	bl	10ed8 <mbsinit@plt>
   1493c:	strb	r4, [sp, #256]	; 0x100
   14940:	cmp	r0, #0
   14944:	strbne	r7, [sp, #244]	; 0xf4
   14948:	cmp	r5, #0
   1494c:	bne	142e4 <__assert_fail@plt+0x31d8>
   14950:	bl	110f4 <abort@plt>
   14954:	add	r0, sp, #80	; 0x50
   14958:	bl	10ed8 <mbsinit@plt>
   1495c:	cmp	r0, #0
   14960:	beq	14ab8 <__assert_fail@plt+0x39ac>
   14964:	strb	r4, [sp, #76]	; 0x4c
   14968:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   1496c:	ldr	r5, [sp]
   14970:	mov	r1, r0
   14974:	mov	r0, r5
   14978:	bl	12820 <__assert_fail@plt+0x1714>
   1497c:	add	r3, sp, #80	; 0x50
   14980:	mov	r1, r5
   14984:	mov	r2, r0
   14988:	add	r0, sp, #104	; 0x68
   1498c:	bl	12f1c <__assert_fail@plt+0x1e10>
   14990:	cmn	r0, #1
   14994:	str	r0, [sp, #96]	; 0x60
   14998:	strbeq	r7, [sp, #100]	; 0x64
   1499c:	streq	r9, [sp, #96]	; 0x60
   149a0:	strbeq	r4, [sp, #88]	; 0x58
   149a4:	beq	148b0 <__assert_fail@plt+0x37a4>
   149a8:	cmn	r0, #2
   149ac:	beq	14a58 <__assert_fail@plt+0x394c>
   149b0:	cmp	r0, #0
   149b4:	beq	14a78 <__assert_fail@plt+0x396c>
   149b8:	ldr	r5, [sp, #104]	; 0x68
   149bc:	add	r0, sp, #80	; 0x50
   149c0:	strb	r4, [sp, #100]	; 0x64
   149c4:	bl	10ed8 <mbsinit@plt>
   149c8:	strb	r4, [sp, #88]	; 0x58
   149cc:	cmp	r0, #0
   149d0:	strbne	r7, [sp, #76]	; 0x4c
   149d4:	b	148a8 <__assert_fail@plt+0x379c>
   149d8:	str	r9, [sp, #264]	; 0x108
   149dc:	strb	sl, [sp, #268]	; 0x10c
   149e0:	ldr	r5, [sp, #260]	; 0x104
   149e4:	b	142e8 <__assert_fail@plt+0x31dc>
   149e8:	ldrb	r3, [sp, #88]	; 0x58
   149ec:	cmp	r3, #0
   149f0:	beq	14860 <__assert_fail@plt+0x3754>
   149f4:	add	r2, sp, #16
   149f8:	ldrd	r0, [sp, #4]
   149fc:	bl	1365c <__assert_fail@plt+0x2550>
   14a00:	subs	r3, r0, #0
   14a04:	str	r3, [sp]
   14a08:	bne	14a70 <__assert_fail@plt+0x3964>
   14a0c:	ldrb	r3, [sp, #156]	; 0x9c
   14a10:	b	148bc <__assert_fail@plt+0x37b0>
   14a14:	ldr	r5, [sp, #260]	; 0x104
   14a18:	mov	r0, r5
   14a1c:	bl	10fe0 <strlen@plt>
   14a20:	strb	sl, [sp, #268]	; 0x10c
   14a24:	str	r0, [sp, #264]	; 0x108
   14a28:	b	142e8 <__assert_fail@plt+0x31dc>
   14a2c:	ldr	r5, [sp, #260]	; 0x104
   14a30:	str	r9, [sp, #264]	; 0x108
   14a34:	ldrb	r3, [r5]
   14a38:	cmp	r3, #0
   14a3c:	bne	14acc <__assert_fail@plt+0x39c0>
   14a40:	ldr	r5, [sp, #272]	; 0x110
   14a44:	cmp	r5, #0
   14a48:	beq	14930 <__assert_fail@plt+0x3824>
   14a4c:	b	14a98 <__assert_fail@plt+0x398c>
   14a50:	ldr	r4, [sp, #48]	; 0x30
   14a54:	b	14058 <__assert_fail@plt+0x2f4c>
   14a58:	ldr	r0, [sp, #92]	; 0x5c
   14a5c:	bl	10fe0 <strlen@plt>
   14a60:	strb	r7, [sp, #100]	; 0x64
   14a64:	strb	r4, [sp, #88]	; 0x58
   14a68:	str	r0, [sp, #96]	; 0x60
   14a6c:	b	148b0 <__assert_fail@plt+0x37a4>
   14a70:	ldr	r0, [sp, #16]
   14a74:	b	14088 <__assert_fail@plt+0x2f7c>
   14a78:	ldr	r5, [sp, #92]	; 0x5c
   14a7c:	str	r9, [sp, #96]	; 0x60
   14a80:	ldrb	r3, [r5]
   14a84:	cmp	r3, #0
   14a88:	bne	14acc <__assert_fail@plt+0x39c0>
   14a8c:	ldr	r5, [sp, #104]	; 0x68
   14a90:	cmp	r5, #0
   14a94:	beq	149bc <__assert_fail@plt+0x38b0>
   14a98:	bl	13638 <__assert_fail@plt+0x252c>
   14a9c:	cmp	r3, #0
   14aa0:	beq	14860 <__assert_fail@plt+0x3754>
   14aa4:	ldrb	r3, [sp, #100]	; 0x64
   14aa8:	cmp	r3, #0
   14aac:	ldrne	r5, [sp, #104]	; 0x68
   14ab0:	beq	148b0 <__assert_fail@plt+0x37a4>
   14ab4:	b	148a8 <__assert_fail@plt+0x379c>
   14ab8:	ldr	r3, [pc, #44]	; 14aec <__assert_fail@plt+0x39e0>
   14abc:	mov	r2, #150	; 0x96
   14ac0:	ldr	r1, [pc, #40]	; 14af0 <__assert_fail@plt+0x39e4>
   14ac4:	ldr	r0, [pc, #40]	; 14af4 <__assert_fail@plt+0x39e8>
   14ac8:	bl	1110c <__assert_fail@plt>
   14acc:	ldr	r3, [pc, #24]	; 14aec <__assert_fail@plt+0x39e0>
   14ad0:	mov	r2, #178	; 0xb2
   14ad4:	ldr	r1, [pc, #20]	; 14af0 <__assert_fail@plt+0x39e4>
   14ad8:	ldr	r0, [pc, #24]	; 14af8 <__assert_fail@plt+0x39ec>
   14adc:	bl	1110c <__assert_fail@plt>
   14ae0:	bl	10f08 <__stack_chk_fail@plt>
   14ae4:	andeq	r5, r2, r8, lsl #30
   14ae8:	andeq	r5, r1, r4, lsr ip
   14aec:	andeq	r5, r1, r4, asr ip
   14af0:	andeq	r5, r1, r4, asr #22
   14af4:	andeq	r5, r1, r4, ror #22
   14af8:	andeq	r5, r1, ip, ror fp
   14afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b00:	mov	r6, r2
   14b04:	sub	sp, sp, #4096	; 0x1000
   14b08:	ldr	r2, [pc, #640]	; 14d90 <__assert_fail@plt+0x3c84>
   14b0c:	sub	sp, sp, #44	; 0x2c
   14b10:	add	lr, sp, #4096	; 0x1000
   14b14:	ldr	ip, [r2]
   14b18:	add	lr, lr, #36	; 0x24
   14b1c:	mov	r4, #0
   14b20:	str	r4, [sp]
   14b24:	str	ip, [lr]
   14b28:	add	ip, sp, #4160	; 0x1040
   14b2c:	add	ip, ip, #16
   14b30:	mov	r9, r1
   14b34:	ldr	ip, [ip]
   14b38:	mov	fp, r0
   14b3c:	str	r3, [sp, #8]
   14b40:	mov	r0, r6
   14b44:	mov	r3, r4
   14b48:	mov	r2, r4
   14b4c:	mov	r1, r4
   14b50:	str	ip, [sp, #12]
   14b54:	bl	10e6c <iconv@plt>
   14b58:	cmp	r9, r4
   14b5c:	str	fp, [sp, #20]
   14b60:	str	r9, [sp, #24]
   14b64:	beq	14d74 <__assert_fail@plt+0x3c68>
   14b68:	add	r5, sp, #36	; 0x24
   14b6c:	add	r7, sp, #28
   14b70:	add	r8, sp, #32
   14b74:	mov	sl, #4096	; 0x1000
   14b78:	b	14b90 <__assert_fail@plt+0x3a84>
   14b7c:	ldrd	r2, [sp, #24]
   14b80:	sub	r3, r3, r5
   14b84:	cmp	r2, #0
   14b88:	add	r4, r4, r3
   14b8c:	beq	14bd0 <__assert_fail@plt+0x3ac4>
   14b90:	str	r8, [sp]
   14b94:	mov	r3, r7
   14b98:	add	r2, sp, #24
   14b9c:	add	r1, sp, #20
   14ba0:	mov	r0, r6
   14ba4:	str	r5, [sp, #28]
   14ba8:	str	sl, [sp, #32]
   14bac:	bl	10e6c <iconv@plt>
   14bb0:	cmn	r0, #1
   14bb4:	bne	14b7c <__assert_fail@plt+0x3a70>
   14bb8:	bl	11004 <__errno_location@plt>
   14bbc:	ldr	r3, [r0]
   14bc0:	cmp	r3, #7
   14bc4:	beq	14b7c <__assert_fail@plt+0x3a70>
   14bc8:	cmp	r3, #22
   14bcc:	bne	14d6c <__assert_fail@plt+0x3c60>
   14bd0:	mov	r2, #0
   14bd4:	mov	ip, #4096	; 0x1000
   14bd8:	str	r8, [sp]
   14bdc:	mov	r1, r2
   14be0:	mov	r3, r7
   14be4:	mov	r0, r6
   14be8:	str	r5, [sp, #28]
   14bec:	str	ip, [sp, #32]
   14bf0:	bl	10e6c <iconv@plt>
   14bf4:	cmn	r0, #1
   14bf8:	beq	14d6c <__assert_fail@plt+0x3c60>
   14bfc:	ldr	r3, [sp, #28]
   14c00:	sub	r5, r3, r5
   14c04:	adds	r4, r5, r4
   14c08:	beq	14d1c <__assert_fail@plt+0x3c10>
   14c0c:	ldr	r3, [sp, #8]
   14c10:	ldr	sl, [r3]
   14c14:	cmp	sl, #0
   14c18:	beq	14cf8 <__assert_fail@plt+0x3bec>
   14c1c:	ldr	r3, [sp, #12]
   14c20:	ldr	r3, [r3]
   14c24:	cmp	r3, r4
   14c28:	bcc	14cf8 <__assert_fail@plt+0x3bec>
   14c2c:	mov	r3, #0
   14c30:	str	r3, [sp]
   14c34:	mov	r2, r3
   14c38:	mov	r1, r3
   14c3c:	mov	r0, r6
   14c40:	bl	10e6c <iconv@plt>
   14c44:	add	r3, sp, #40	; 0x28
   14c48:	str	fp, [sp, #20]
   14c4c:	add	r5, sp, #24
   14c50:	str	r9, [sp, #24]
   14c54:	str	sl, [sp, #28]
   14c58:	str	r4, [sp, #32]
   14c5c:	sub	fp, r3, #20
   14c60:	b	14c88 <__assert_fail@plt+0x3b7c>
   14c64:	str	r8, [sp]
   14c68:	mov	r3, r7
   14c6c:	mov	r2, r5
   14c70:	mov	r1, fp
   14c74:	mov	r0, r6
   14c78:	bl	10e6c <iconv@plt>
   14c7c:	cmn	r0, #1
   14c80:	beq	14d2c <__assert_fail@plt+0x3c20>
   14c84:	ldr	r9, [sp, #24]
   14c88:	cmp	r9, #0
   14c8c:	bne	14c64 <__assert_fail@plt+0x3b58>
   14c90:	mov	r2, #0
   14c94:	str	r8, [sp]
   14c98:	mov	r3, r7
   14c9c:	mov	r0, r6
   14ca0:	mov	r1, r2
   14ca4:	bl	10e6c <iconv@plt>
   14ca8:	cmn	r0, #1
   14cac:	beq	14d3c <__assert_fail@plt+0x3c30>
   14cb0:	ldr	r3, [sp, #32]
   14cb4:	cmp	r3, #0
   14cb8:	bne	14d8c <__assert_fail@plt+0x3c80>
   14cbc:	ldr	r2, [sp, #8]
   14cc0:	str	sl, [r2]
   14cc4:	ldr	r2, [sp, #12]
   14cc8:	str	r4, [r2]
   14ccc:	add	r2, sp, #4096	; 0x1000
   14cd0:	add	r2, r2, #36	; 0x24
   14cd4:	ldr	r1, [r2]
   14cd8:	ldr	r2, [pc, #176]	; 14d90 <__assert_fail@plt+0x3c84>
   14cdc:	mov	r0, r3
   14ce0:	ldr	r2, [r2]
   14ce4:	cmp	r1, r2
   14ce8:	bne	14d88 <__assert_fail@plt+0x3c7c>
   14cec:	add	sp, sp, #4096	; 0x1000
   14cf0:	add	sp, sp, #44	; 0x2c
   14cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf8:	mov	r0, r4
   14cfc:	bl	10f80 <malloc@plt>
   14d00:	subs	sl, r0, #0
   14d04:	bne	14c2c <__assert_fail@plt+0x3b20>
   14d08:	bl	11004 <__errno_location@plt>
   14d0c:	mov	r2, #12
   14d10:	mvn	r3, #0
   14d14:	str	r2, [r0]
   14d18:	b	14ccc <__assert_fail@plt+0x3bc0>
   14d1c:	ldr	r3, [sp, #12]
   14d20:	str	r4, [r3]
   14d24:	mov	r3, r4
   14d28:	b	14ccc <__assert_fail@plt+0x3bc0>
   14d2c:	bl	11004 <__errno_location@plt>
   14d30:	ldr	r3, [r0]
   14d34:	cmp	r3, #22
   14d38:	beq	14c90 <__assert_fail@plt+0x3b84>
   14d3c:	ldr	r3, [sp, #8]
   14d40:	ldr	r3, [r3]
   14d44:	cmp	r3, sl
   14d48:	beq	14d6c <__assert_fail@plt+0x3c60>
   14d4c:	bl	11004 <__errno_location@plt>
   14d50:	mov	r4, r0
   14d54:	mov	r0, sl
   14d58:	ldr	r5, [r4]
   14d5c:	bl	10eb4 <free@plt>
   14d60:	str	r5, [r4]
   14d64:	mvn	r3, #0
   14d68:	b	14ccc <__assert_fail@plt+0x3bc0>
   14d6c:	mvn	r3, #0
   14d70:	b	14ccc <__assert_fail@plt+0x3bc0>
   14d74:	mov	r4, r9
   14d78:	add	r5, sp, #36	; 0x24
   14d7c:	add	r7, sp, #28
   14d80:	add	r8, sp, #32
   14d84:	b	14bd0 <__assert_fail@plt+0x3ac4>
   14d88:	bl	10f08 <__stack_chk_fail@plt>
   14d8c:	bl	110f4 <abort@plt>
   14d90:	andeq	r5, r2, r8, lsl #30
   14d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d98:	sub	sp, sp, #36	; 0x24
   14d9c:	ldr	r9, [pc, #468]	; 14f78 <__assert_fail@plt+0x3e6c>
   14da0:	mov	r7, r1
   14da4:	str	r0, [sp, #12]
   14da8:	ldr	r3, [r9]
   14dac:	str	r3, [sp, #28]
   14db0:	bl	10fe0 <strlen@plt>
   14db4:	cmp	r0, #4096	; 0x1000
   14db8:	mov	r4, r0
   14dbc:	lslcc	r4, r0, #4
   14dc0:	add	sl, r4, #1
   14dc4:	str	r0, [sp, #16]
   14dc8:	mov	r0, sl
   14dcc:	bl	10f80 <malloc@plt>
   14dd0:	subs	r6, r0, #0
   14dd4:	beq	14f64 <__assert_fail@plt+0x3e58>
   14dd8:	mov	r3, #0
   14ddc:	str	r3, [sp]
   14de0:	mov	r2, r3
   14de4:	mov	r1, r3
   14de8:	mov	r0, r7
   14dec:	bl	10e6c <iconv@plt>
   14df0:	add	r8, sp, #24
   14df4:	str	r6, [sp, #20]
   14df8:	str	r4, [sp, #24]
   14dfc:	b	14e60 <__assert_fail@plt+0x3d54>
   14e00:	bl	11004 <__errno_location@plt>
   14e04:	ldr	r3, [r0]
   14e08:	mov	fp, r0
   14e0c:	cmp	r3, #22
   14e10:	beq	14edc <__assert_fail@plt+0x3dd0>
   14e14:	cmp	r3, #7
   14e18:	bne	14f3c <__assert_fail@plt+0x3e30>
   14e1c:	ldr	r4, [sp, #20]
   14e20:	lsl	r5, sl, #1
   14e24:	cmp	sl, r5
   14e28:	sub	r4, r4, r6
   14e2c:	bcs	14f34 <__assert_fail@plt+0x3e28>
   14e30:	mov	r1, r5
   14e34:	mov	r0, r6
   14e38:	bl	10f14 <realloc@plt>
   14e3c:	cmp	r0, #0
   14e40:	beq	14f34 <__assert_fail@plt+0x3e28>
   14e44:	sub	r3, r5, #1
   14e48:	mov	r6, r0
   14e4c:	mov	sl, r5
   14e50:	sub	r3, r3, r4
   14e54:	add	r4, r0, r4
   14e58:	str	r3, [sp, #24]
   14e5c:	str	r4, [sp, #20]
   14e60:	str	r8, [sp]
   14e64:	add	r3, sp, #20
   14e68:	add	r2, sp, #16
   14e6c:	add	r1, sp, #12
   14e70:	mov	r0, r7
   14e74:	bl	10e6c <iconv@plt>
   14e78:	cmn	r0, #1
   14e7c:	beq	14e00 <__assert_fail@plt+0x3cf4>
   14e80:	b	14edc <__assert_fail@plt+0x3dd0>
   14e84:	bl	11004 <__errno_location@plt>
   14e88:	ldr	r3, [r0]
   14e8c:	mov	fp, r0
   14e90:	cmp	r3, #7
   14e94:	bne	14f3c <__assert_fail@plt+0x3e30>
   14e98:	ldr	r4, [sp, #20]
   14e9c:	lsl	r5, sl, #1
   14ea0:	cmp	sl, r5
   14ea4:	sub	r4, r4, r6
   14ea8:	bcs	14f34 <__assert_fail@plt+0x3e28>
   14eac:	mov	r1, r5
   14eb0:	mov	r0, r6
   14eb4:	bl	10f14 <realloc@plt>
   14eb8:	cmp	r0, #0
   14ebc:	beq	14f34 <__assert_fail@plt+0x3e28>
   14ec0:	sub	r3, r5, #1
   14ec4:	mov	sl, r5
   14ec8:	mov	r6, r0
   14ecc:	sub	r3, r3, r4
   14ed0:	add	r4, r0, r4
   14ed4:	str	r3, [sp, #24]
   14ed8:	str	r4, [sp, #20]
   14edc:	mov	r2, #0
   14ee0:	str	r8, [sp]
   14ee4:	mov	r1, r2
   14ee8:	add	r3, sp, #20
   14eec:	mov	r0, r7
   14ef0:	bl	10e6c <iconv@plt>
   14ef4:	cmn	r0, #1
   14ef8:	beq	14e84 <__assert_fail@plt+0x3d78>
   14efc:	ldr	r3, [sp, #20]
   14f00:	mov	r2, #0
   14f04:	add	r1, r3, #1
   14f08:	str	r1, [sp, #20]
   14f0c:	strb	r2, [r3]
   14f10:	ldr	r1, [sp, #20]
   14f14:	sub	r1, r1, r6
   14f18:	cmp	sl, r1
   14f1c:	bls	14f48 <__assert_fail@plt+0x3e3c>
   14f20:	mov	r0, r6
   14f24:	bl	10f14 <realloc@plt>
   14f28:	cmp	r0, #0
   14f2c:	movne	r6, r0
   14f30:	b	14f48 <__assert_fail@plt+0x3e3c>
   14f34:	mov	r3, #12
   14f38:	str	r3, [fp]
   14f3c:	mov	r0, r6
   14f40:	bl	10eb4 <free@plt>
   14f44:	mov	r6, #0
   14f48:	ldr	r2, [sp, #28]
   14f4c:	ldr	r3, [r9]
   14f50:	mov	r0, r6
   14f54:	cmp	r2, r3
   14f58:	bne	14f74 <__assert_fail@plt+0x3e68>
   14f5c:	add	sp, sp, #36	; 0x24
   14f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f64:	bl	11004 <__errno_location@plt>
   14f68:	mov	r3, #12
   14f6c:	str	r3, [r0]
   14f70:	b	14f48 <__assert_fail@plt+0x3e3c>
   14f74:	bl	10f08 <__stack_chk_fail@plt>
   14f78:	andeq	r5, r2, r8, lsl #30
   14f7c:	push	{r4, r5, r6, lr}
   14f80:	mov	r4, r0
   14f84:	ldrb	r3, [r0]
   14f88:	cmp	r3, #0
   14f8c:	beq	14fac <__assert_fail@plt+0x3ea0>
   14f90:	mov	r6, r1
   14f94:	mov	r0, r6
   14f98:	mov	r1, r2
   14f9c:	mov	r5, r2
   14fa0:	bl	12f9c <__assert_fail@plt+0x1e90>
   14fa4:	cmp	r0, #0
   14fa8:	bne	14fc4 <__assert_fail@plt+0x3eb8>
   14fac:	mov	r0, r4
   14fb0:	bl	10efc <strdup@plt>
   14fb4:	subs	r4, r0, #0
   14fb8:	beq	15024 <__assert_fail@plt+0x3f18>
   14fbc:	mov	r0, r4
   14fc0:	pop	{r4, r5, r6, pc}
   14fc4:	mov	r0, r5
   14fc8:	mov	r1, r6
   14fcc:	bl	10f8c <iconv_open@plt>
   14fd0:	cmn	r0, #1
   14fd4:	mov	r5, r0
   14fd8:	moveq	r4, #0
   14fdc:	beq	14fbc <__assert_fail@plt+0x3eb0>
   14fe0:	mov	r0, r4
   14fe4:	mov	r1, r5
   14fe8:	bl	14d94 <__assert_fail@plt+0x3c88>
   14fec:	subs	r4, r0, #0
   14ff0:	beq	15038 <__assert_fail@plt+0x3f2c>
   14ff4:	mov	r0, r5
   14ff8:	bl	10e60 <iconv_close@plt>
   14ffc:	cmp	r0, #0
   15000:	bge	14fbc <__assert_fail@plt+0x3eb0>
   15004:	bl	11004 <__errno_location@plt>
   15008:	mov	r5, r0
   1500c:	mov	r0, r4
   15010:	ldr	r6, [r5]
   15014:	mov	r4, #0
   15018:	bl	10eb4 <free@plt>
   1501c:	str	r6, [r5]
   15020:	b	14fbc <__assert_fail@plt+0x3eb0>
   15024:	bl	11004 <__errno_location@plt>
   15028:	mov	r3, #12
   1502c:	str	r3, [r0]
   15030:	mov	r0, r4
   15034:	pop	{r4, r5, r6, pc}
   15038:	bl	11004 <__errno_location@plt>
   1503c:	mov	r6, r0
   15040:	mov	r0, r5
   15044:	ldr	r5, [r6]
   15048:	bl	10e60 <iconv_close@plt>
   1504c:	str	r5, [r6]
   15050:	b	14fbc <__assert_fail@plt+0x3eb0>
   15054:	mov	r3, #8
   15058:	adds	r0, r0, r3
   1505c:	bcs	150ac <__assert_fail@plt+0x3fa0>
   15060:	push	{r4, lr}
   15064:	bl	10f80 <malloc@plt>
   15068:	subs	r2, r0, #0
   1506c:	beq	150a4 <__assert_fail@plt+0x3f98>
   15070:	ldr	r3, [pc, #60]	; 150b4 <__assert_fail@plt+0x3fa8>
   15074:	add	r0, r2, #8
   15078:	ldr	r1, [pc, #56]	; 150b8 <__assert_fail@plt+0x3fac>
   1507c:	umull	ip, r3, r3, r0
   15080:	ldr	ip, [pc, #52]	; 150bc <__assert_fail@plt+0x3fb0>
   15084:	lsr	r3, r3, #8
   15088:	str	ip, [r2, #4]
   1508c:	add	r3, r3, r3, lsl #8
   15090:	sub	r3, r0, r3
   15094:	ldr	ip, [r1, r3, lsl #2]
   15098:	str	r0, [r1, r3, lsl #2]
   1509c:	str	ip, [r2]
   150a0:	pop	{r4, pc}
   150a4:	mov	r0, #0
   150a8:	pop	{r4, pc}
   150ac:	mov	r0, #0
   150b0:	bx	lr
   150b4:			; <UNDEFINED> instruction: 0xff00ff01
   150b8:	andeq	r6, r2, r8, lsr r1
   150bc:	ldrne	pc, [r5], #-2890	; 0xfffff4b6
   150c0:	cmp	r0, #0
   150c4:	bxeq	lr
   150c8:	ldr	r3, [pc, #104]	; 15138 <__assert_fail@plt+0x402c>
   150cc:	ldr	r2, [r0, #-4]
   150d0:	cmp	r2, r3
   150d4:	bxne	lr
   150d8:	ldr	r2, [pc, #92]	; 1513c <__assert_fail@plt+0x4030>
   150dc:	ldr	r1, [pc, #92]	; 15140 <__assert_fail@plt+0x4034>
   150e0:	umull	r3, r2, r2, r0
   150e4:	lsr	r3, r2, #8
   150e8:	add	r2, r3, r3, lsl #8
   150ec:	sub	r3, r0, r2
   150f0:	ldr	r2, [r1, r3, lsl #2]
   150f4:	cmp	r2, #0
   150f8:	bxeq	lr
   150fc:	cmp	r0, r2
   15100:	bne	1510c <__assert_fail@plt+0x4000>
   15104:	b	15130 <__assert_fail@plt+0x4024>
   15108:	mov	r2, r3
   1510c:	ldr	r3, [r2, #-8]
   15110:	cmp	r3, #0
   15114:	bxeq	lr
   15118:	cmp	r0, r3
   1511c:	bne	15108 <__assert_fail@plt+0x3ffc>
   15120:	sub	r2, r2, #8
   15124:	ldr	r3, [r0, #-8]!
   15128:	str	r3, [r2]
   1512c:	b	10eb4 <free@plt>
   15130:	add	r2, r1, r3, lsl #2
   15134:	b	15124 <__assert_fail@plt+0x4018>
   15138:	ldrne	pc, [r5], #-2890	; 0xfffff4b6
   1513c:			; <UNDEFINED> instruction: 0xff00ff01
   15140:	andeq	r6, r2, r8, lsr r1
   15144:	push	{r4, r5, r6, r7, r8, lr}
   15148:	sub	sp, sp, #64	; 0x40
   1514c:	ldr	r7, [pc, #464]	; 15324 <__assert_fail@plt+0x4218>
   15150:	mov	r4, r0
   15154:	ldr	r3, [r7]
   15158:	str	r3, [sp, #60]	; 0x3c
   1515c:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   15160:	cmp	r0, #1
   15164:	bhi	15190 <__assert_fail@plt+0x4084>
   15168:	mov	r0, r4
   1516c:	bl	10fe0 <strlen@plt>
   15170:	mov	r5, r0
   15174:	ldr	r2, [sp, #60]	; 0x3c
   15178:	ldr	r3, [r7]
   1517c:	mov	r0, r5
   15180:	cmp	r2, r3
   15184:	bne	1530c <__assert_fail@plt+0x4200>
   15188:	add	sp, sp, #64	; 0x40
   1518c:	pop	{r4, r5, r6, r7, r8, pc}
   15190:	mov	r5, #0
   15194:	str	r4, [sp, #20]
   15198:	str	r5, [sp, #12]
   1519c:	strb	r5, [sp, #4]
   151a0:	str	r5, [sp, #8]
   151a4:	strb	r5, [sp, #16]
   151a8:	mov	r6, #1
   151ac:	ldr	r8, [pc, #372]	; 15328 <__assert_fail@plt+0x421c>
   151b0:	b	15208 <__assert_fail@plt+0x40fc>
   151b4:	ldrb	r3, [r4]
   151b8:	and	r2, r3, #31
   151bc:	lsr	r3, r3, #5
   151c0:	ldr	r3, [r8, r3, lsl #2]
   151c4:	lsr	r3, r3, r2
   151c8:	tst	r3, #1
   151cc:	beq	1527c <__assert_fail@plt+0x4170>
   151d0:	str	r6, [sp, #24]
   151d4:	ldrb	r4, [r4]
   151d8:	strb	r6, [sp, #28]
   151dc:	strb	r6, [sp, #16]
   151e0:	str	r4, [sp, #32]
   151e4:	cmp	r4, #0
   151e8:	beq	15174 <__assert_fail@plt+0x4068>
   151ec:	ldr	r4, [sp, #20]
   151f0:	ldr	r3, [sp, #24]
   151f4:	add	r5, r5, #1
   151f8:	add	r4, r4, r3
   151fc:	mov	r3, #0
   15200:	str	r4, [sp, #20]
   15204:	strb	r3, [sp, #16]
   15208:	ldrb	r3, [sp, #4]
   1520c:	cmp	r3, #0
   15210:	beq	151b4 <__assert_fail@plt+0x40a8>
   15214:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   15218:	mov	r1, r0
   1521c:	mov	r0, r4
   15220:	bl	12820 <__assert_fail@plt+0x1714>
   15224:	add	r3, sp, #8
   15228:	mov	r1, r4
   1522c:	mov	r2, r0
   15230:	add	r0, sp, #32
   15234:	bl	12f1c <__assert_fail@plt+0x1e10>
   15238:	cmn	r0, #1
   1523c:	str	r0, [sp, #24]
   15240:	beq	15294 <__assert_fail@plt+0x4188>
   15244:	cmn	r0, #2
   15248:	beq	152a8 <__assert_fail@plt+0x419c>
   1524c:	cmp	r0, #0
   15250:	beq	152c4 <__assert_fail@plt+0x41b8>
   15254:	ldr	r4, [sp, #32]
   15258:	add	r0, sp, #8
   1525c:	strb	r6, [sp, #28]
   15260:	bl	10ed8 <mbsinit@plt>
   15264:	cmp	r0, #0
   15268:	movne	r3, #0
   1526c:	strbeq	r6, [sp, #16]
   15270:	strbne	r6, [sp, #16]
   15274:	strbne	r3, [sp, #4]
   15278:	b	151e4 <__assert_fail@plt+0x40d8>
   1527c:	add	r0, sp, #8
   15280:	bl	10ed8 <mbsinit@plt>
   15284:	cmp	r0, #0
   15288:	beq	152f8 <__assert_fail@plt+0x41ec>
   1528c:	strb	r6, [sp, #4]
   15290:	b	15214 <__assert_fail@plt+0x4108>
   15294:	mov	r3, #0
   15298:	str	r6, [sp, #24]
   1529c:	strb	r3, [sp, #28]
   152a0:	ldr	r4, [sp, #20]
   152a4:	b	151f0 <__assert_fail@plt+0x40e4>
   152a8:	ldr	r4, [sp, #20]
   152ac:	mov	r0, r4
   152b0:	bl	10fe0 <strlen@plt>
   152b4:	mov	r3, #0
   152b8:	strb	r3, [sp, #28]
   152bc:	str	r0, [sp, #24]
   152c0:	b	151f0 <__assert_fail@plt+0x40e4>
   152c4:	ldr	r4, [sp, #20]
   152c8:	str	r6, [sp, #24]
   152cc:	ldrb	r3, [r4]
   152d0:	cmp	r3, #0
   152d4:	bne	15310 <__assert_fail@plt+0x4204>
   152d8:	ldr	r4, [sp, #32]
   152dc:	cmp	r4, #0
   152e0:	beq	15258 <__assert_fail@plt+0x414c>
   152e4:	ldr	r3, [pc, #64]	; 1532c <__assert_fail@plt+0x4220>
   152e8:	mov	r2, #179	; 0xb3
   152ec:	ldr	r1, [pc, #60]	; 15330 <__assert_fail@plt+0x4224>
   152f0:	ldr	r0, [pc, #60]	; 15334 <__assert_fail@plt+0x4228>
   152f4:	bl	1110c <__assert_fail@plt>
   152f8:	ldr	r3, [pc, #44]	; 1532c <__assert_fail@plt+0x4220>
   152fc:	mov	r2, #150	; 0x96
   15300:	ldr	r1, [pc, #40]	; 15330 <__assert_fail@plt+0x4224>
   15304:	ldr	r0, [pc, #44]	; 15338 <__assert_fail@plt+0x422c>
   15308:	bl	1110c <__assert_fail@plt>
   1530c:	bl	10f08 <__stack_chk_fail@plt>
   15310:	ldr	r3, [pc, #20]	; 1532c <__assert_fail@plt+0x4220>
   15314:	mov	r2, #178	; 0xb2
   15318:	ldr	r1, [pc, #16]	; 15330 <__assert_fail@plt+0x4224>
   1531c:	ldr	r0, [pc, #24]	; 1533c <__assert_fail@plt+0x4230>
   15320:	bl	1110c <__assert_fail@plt>
   15324:	andeq	r5, r2, r8, lsl #30
   15328:	andeq	r5, r1, r4, lsr ip
   1532c:	andeq	r5, r1, r8, ror #24
   15330:	andeq	r5, r1, r4, asr #22
   15334:	andeq	r5, r1, r0, asr fp
   15338:	andeq	r5, r1, r4, ror #22
   1533c:	andeq	r5, r1, ip, ror fp
   15340:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15344:	mov	r7, r0
   15348:	ldr	r6, [pc, #72]	; 15398 <__assert_fail@plt+0x428c>
   1534c:	ldr	r5, [pc, #72]	; 1539c <__assert_fail@plt+0x4290>
   15350:	add	r6, pc, r6
   15354:	add	r5, pc, r5
   15358:	sub	r6, r6, r5
   1535c:	mov	r8, r1
   15360:	mov	r9, r2
   15364:	bl	10e28 <fdopen@plt-0x20>
   15368:	asrs	r6, r6, #2
   1536c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15370:	mov	r4, #0
   15374:	add	r4, r4, #1
   15378:	ldr	r3, [r5], #4
   1537c:	mov	r2, r9
   15380:	mov	r1, r8
   15384:	mov	r0, r7
   15388:	blx	r3
   1538c:	cmp	r6, r4
   15390:	bne	15374 <__assert_fail@plt+0x4268>
   15394:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15398:	andeq	r0, r1, ip, lsr #23
   1539c:	andeq	r0, r1, r4, lsr #23
   153a0:	bx	lr
   153a4:	ldr	r3, [pc, #12]	; 153b8 <__assert_fail@plt+0x42ac>
   153a8:	mov	r1, #0
   153ac:	add	r3, pc, r3
   153b0:	ldr	r2, [r3]
   153b4:	b	11028 <__cxa_atexit@plt>
   153b8:	andeq	r0, r1, r0, asr sp

Disassembly of section .fini:

000153bc <.fini>:
   153bc:	push	{r3, lr}
   153c0:	pop	{r3, pc}
