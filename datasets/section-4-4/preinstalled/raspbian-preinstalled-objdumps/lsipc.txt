
raspbian-preinstalled/lsipc:     file format elf32-littlearm


Disassembly of section .init:

00011ccc <.init>:
   11ccc:	push	{r3, lr}
   11cd0:	bl	145c8 <__assert_fail@plt+0x227c>
   11cd4:	pop	{r3, pc}

Disassembly of section .plt:

00011cd8 <fdopen@plt-0x14>:
   11cd8:	push	{lr}		; (str lr, [sp, #-4]!)
   11cdc:	ldr	lr, [pc, #4]	; 11ce8 <fdopen@plt-0x4>
   11ce0:	add	lr, pc, lr
   11ce4:	ldr	pc, [lr, #8]!
   11ce8:	ldrdeq	lr, [r1], -ip

00011cec <fdopen@plt>:
   11cec:	add	ip, pc, #0, 12
   11cf0:	add	ip, ip, #122880	; 0x1e000
   11cf4:	ldr	pc, [ip, #220]!	; 0xdc

00011cf8 <calloc@plt>:
   11cf8:	add	ip, pc, #0, 12
   11cfc:	add	ip, ip, #122880	; 0x1e000
   11d00:	ldr	pc, [ip, #212]!	; 0xd4

00011d04 <raise@plt>:
   11d04:	add	ip, pc, #0, 12
   11d08:	add	ip, ip, #122880	; 0x1e000
   11d0c:	ldr	pc, [ip, #204]!	; 0xcc

00011d10 <gmtime_r@plt>:
   11d10:	add	ip, pc, #0, 12
   11d14:	add	ip, ip, #122880	; 0x1e000
   11d18:	ldr	pc, [ip, #196]!	; 0xc4

00011d1c <scols_line_set_data@plt>:
   11d1c:	add	ip, pc, #0, 12
   11d20:	add	ip, ip, #122880	; 0x1e000
   11d24:	ldr	pc, [ip, #188]!	; 0xbc

00011d28 <scols_line_refer_data@plt>:
   11d28:	add	ip, pc, #0, 12
   11d2c:	add	ip, ip, #122880	; 0x1e000
   11d30:	ldr	pc, [ip, #180]!	; 0xb4

00011d34 <strcmp@plt>:
   11d34:	add	ip, pc, #0, 12
   11d38:	add	ip, ip, #122880	; 0x1e000
   11d3c:	ldr	pc, [ip, #172]!	; 0xac

00011d40 <rewinddir@plt>:
   11d40:	add	ip, pc, #0, 12
   11d44:	add	ip, ip, #122880	; 0x1e000
   11d48:	ldr	pc, [ip, #164]!	; 0xa4

00011d4c <strtol@plt>:
   11d4c:	add	ip, pc, #0, 12
   11d50:	add	ip, ip, #122880	; 0x1e000
   11d54:	ldr	pc, [ip, #156]!	; 0x9c

00011d58 <getpwuid@plt>:
   11d58:	add	ip, pc, #0, 12
   11d5c:	add	ip, ip, #122880	; 0x1e000
   11d60:	ldr	pc, [ip, #148]!	; 0x94

00011d64 <strcspn@plt>:
   11d64:	add	ip, pc, #0, 12
   11d68:	add	ip, ip, #122880	; 0x1e000
   11d6c:	ldr	pc, [ip, #140]!	; 0x8c

00011d70 <scols_table_set_name@plt>:
   11d70:	add	ip, pc, #0, 12
   11d74:	add	ip, ip, #122880	; 0x1e000
   11d78:	ldr	pc, [ip, #132]!	; 0x84

00011d7c <scols_table_enable_noheadings@plt>:
   11d7c:	add	ip, pc, #0, 12
   11d80:	add	ip, ip, #122880	; 0x1e000
   11d84:	ldr	pc, [ip, #124]!	; 0x7c

00011d88 <read@plt>:
   11d88:	add	ip, pc, #0, 12
   11d8c:	add	ip, ip, #122880	; 0x1e000
   11d90:	ldr	pc, [ip, #116]!	; 0x74

00011d94 <scols_table_new_column@plt>:
   11d94:	add	ip, pc, #0, 12
   11d98:	add	ip, ip, #122880	; 0x1e000
   11d9c:	ldr	pc, [ip, #108]!	; 0x6c

00011da0 <mktime@plt>:
   11da0:	add	ip, pc, #0, 12
   11da4:	add	ip, ip, #122880	; 0x1e000
   11da8:	ldr	pc, [ip, #100]!	; 0x64

00011dac <getuid@plt>:
   11dac:	add	ip, pc, #0, 12
   11db0:	add	ip, ip, #122880	; 0x1e000
   11db4:	ldr	pc, [ip, #92]!	; 0x5c

00011db8 <scols_free_iter@plt>:
   11db8:	add	ip, pc, #0, 12
   11dbc:	add	ip, ip, #122880	; 0x1e000
   11dc0:	ldr	pc, [ip, #84]!	; 0x54

00011dc4 <free@plt>:
   11dc4:	add	ip, pc, #0, 12
   11dc8:	add	ip, ip, #122880	; 0x1e000
   11dcc:	ldr	pc, [ip, #76]!	; 0x4c

00011dd0 <fgets@plt>:
   11dd0:	add	ip, pc, #0, 12
   11dd4:	add	ip, ip, #122880	; 0x1e000
   11dd8:	ldr	pc, [ip, #68]!	; 0x44

00011ddc <nanosleep@plt>:
   11ddc:	add	ip, pc, #0, 12
   11de0:	add	ip, ip, #122880	; 0x1e000
   11de4:	ldr	pc, [ip, #60]!	; 0x3c

00011de8 <scols_table_enable_raw@plt>:
   11de8:	add	ip, pc, #0, 12
   11dec:	add	ip, ip, #122880	; 0x1e000
   11df0:	ldr	pc, [ip, #52]!	; 0x34

00011df4 <faccessat@plt>:
   11df4:	add	ip, pc, #0, 12
   11df8:	add	ip, ip, #122880	; 0x1e000
   11dfc:	ldr	pc, [ip, #44]!	; 0x2c

00011e00 <ferror@plt>:
   11e00:	add	ip, pc, #0, 12
   11e04:	add	ip, ip, #122880	; 0x1e000
   11e08:	ldr	pc, [ip, #36]!	; 0x24

00011e0c <strndup@plt>:
   11e0c:	add	ip, pc, #0, 12
   11e10:	add	ip, ip, #122880	; 0x1e000
   11e14:	ldr	pc, [ip, #28]!

00011e18 <__openat64_2@plt>:
   11e18:	add	ip, pc, #0, 12
   11e1c:	add	ip, ip, #122880	; 0x1e000
   11e20:	ldr	pc, [ip, #20]!

00011e24 <_exit@plt>:
   11e24:	add	ip, pc, #0, 12
   11e28:	add	ip, ip, #122880	; 0x1e000
   11e2c:	ldr	pc, [ip, #12]!

00011e30 <scols_table_set_column_separator@plt>:
   11e30:	add	ip, pc, #0, 12
   11e34:	add	ip, ip, #122880	; 0x1e000
   11e38:	ldr	pc, [ip, #4]!

00011e3c <__vsnprintf_chk@plt>:
   11e3c:	add	ip, pc, #0, 12
   11e40:	add	ip, ip, #118784	; 0x1d000
   11e44:	ldr	pc, [ip, #4092]!	; 0xffc

00011e48 <memcpy@plt>:
   11e48:	add	ip, pc, #0, 12
   11e4c:	add	ip, ip, #118784	; 0x1d000
   11e50:	ldr	pc, [ip, #4084]!	; 0xff4

00011e54 <__strtoull_internal@plt>:
   11e54:	add	ip, pc, #0, 12
   11e58:	add	ip, ip, #118784	; 0x1d000
   11e5c:	ldr	pc, [ip, #4076]!	; 0xfec

00011e60 <time@plt>:
   11e60:	add	ip, pc, #0, 12
   11e64:	add	ip, ip, #118784	; 0x1d000
   11e68:	ldr	pc, [ip, #4068]!	; 0xfe4

00011e6c <dcgettext@plt>:
   11e6c:	add	ip, pc, #0, 12
   11e70:	add	ip, ip, #118784	; 0x1d000
   11e74:	ldr	pc, [ip, #4060]!	; 0xfdc

00011e78 <strdup@plt>:
   11e78:	add	ip, pc, #0, 12
   11e7c:	add	ip, ip, #118784	; 0x1d000
   11e80:	ldr	pc, [ip, #4052]!	; 0xfd4

00011e84 <__stack_chk_fail@plt>:
   11e84:	add	ip, pc, #0, 12
   11e88:	add	ip, ip, #118784	; 0x1d000
   11e8c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011e90 <msgctl@plt>:
   11e90:	add	ip, pc, #0, 12
   11e94:	add	ip, ip, #118784	; 0x1d000
   11e98:	ldr	pc, [ip, #4036]!	; 0xfc4

00011e9c <strptime@plt>:
   11e9c:	add	ip, pc, #0, 12
   11ea0:	add	ip, ip, #118784	; 0x1d000
   11ea4:	ldr	pc, [ip, #4028]!	; 0xfbc

00011ea8 <dup@plt>:
   11ea8:	add	ip, pc, #0, 12
   11eac:	add	ip, ip, #118784	; 0x1d000
   11eb0:	ldr	pc, [ip, #4020]!	; 0xfb4

00011eb4 <localtime_r@plt>:
   11eb4:	add	ip, pc, #0, 12
   11eb8:	add	ip, ip, #118784	; 0x1d000
   11ebc:	ldr	pc, [ip, #4012]!	; 0xfac

00011ec0 <textdomain@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #118784	; 0x1d000
   11ec8:	ldr	pc, [ip, #4004]!	; 0xfa4

00011ecc <err@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #118784	; 0x1d000
   11ed4:	ldr	pc, [ip, #3996]!	; 0xf9c

00011ed8 <geteuid@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #118784	; 0x1d000
   11ee0:	ldr	pc, [ip, #3988]!	; 0xf94

00011ee4 <__fxstatat64@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #118784	; 0x1d000
   11eec:	ldr	pc, [ip, #3980]!	; 0xf8c

00011ef0 <vfscanf@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #118784	; 0x1d000
   11ef8:	ldr	pc, [ip, #3972]!	; 0xf84

00011efc <readlink@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #118784	; 0x1d000
   11f04:	ldr	pc, [ip, #3964]!	; 0xf7c

00011f08 <getegid@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #118784	; 0x1d000
   11f10:	ldr	pc, [ip, #3956]!	; 0xf74

00011f14 <mkostemp64@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #118784	; 0x1d000
   11f1c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011f20 <strtoll@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #118784	; 0x1d000
   11f28:	ldr	pc, [ip, #3940]!	; 0xf64

00011f2c <scols_new_table@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #118784	; 0x1d000
   11f34:	ldr	pc, [ip, #3932]!	; 0xf5c

00011f38 <strcpy@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #118784	; 0x1d000
   11f40:	ldr	pc, [ip, #3924]!	; 0xf54

00011f44 <gettimeofday@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #118784	; 0x1d000
   11f4c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011f50 <scols_table_enable_export@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #118784	; 0x1d000
   11f58:	ldr	pc, [ip, #3908]!	; 0xf44

00011f5c <__fpending@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #118784	; 0x1d000
   11f64:	ldr	pc, [ip, #3900]!	; 0xf3c

00011f68 <shmctl@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #118784	; 0x1d000
   11f70:	ldr	pc, [ip, #3892]!	; 0xf34

00011f74 <scols_line_set_userdata@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #118784	; 0x1d000
   11f7c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011f80 <opendir@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #118784	; 0x1d000
   11f88:	ldr	pc, [ip, #3876]!	; 0xf24

00011f8c <open64@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #118784	; 0x1d000
   11f94:	ldr	pc, [ip, #3868]!	; 0xf1c

00011f98 <__asprintf_chk@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #118784	; 0x1d000
   11fa0:	ldr	pc, [ip, #3860]!	; 0xf14

00011fa4 <getenv@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #118784	; 0x1d000
   11fac:	ldr	pc, [ip, #3852]!	; 0xf0c

00011fb0 <malloc@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #118784	; 0x1d000
   11fb8:	ldr	pc, [ip, #3844]!	; 0xf04

00011fbc <__libc_start_main@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #118784	; 0x1d000
   11fc4:	ldr	pc, [ip, #3836]!	; 0xefc

00011fc8 <readlinkat@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #118784	; 0x1d000
   11fd0:	ldr	pc, [ip, #3828]!	; 0xef4

00011fd4 <scols_table_new_line@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #118784	; 0x1d000
   11fdc:	ldr	pc, [ip, #3820]!	; 0xeec

00011fe0 <strftime@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #118784	; 0x1d000
   11fe8:	ldr	pc, [ip, #3812]!	; 0xee4

00011fec <scols_unref_table@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #118784	; 0x1d000
   11ff4:	ldr	pc, [ip, #3804]!	; 0xedc

00011ff8 <__vfprintf_chk@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #118784	; 0x1d000
   12000:	ldr	pc, [ip, #3796]!	; 0xed4

00012004 <getdtablesize@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #118784	; 0x1d000
   1200c:	ldr	pc, [ip, #3788]!	; 0xecc

00012010 <__ctype_tolower_loc@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #118784	; 0x1d000
   12018:	ldr	pc, [ip, #3780]!	; 0xec4

0001201c <__gmon_start__@plt>:
   1201c:	add	ip, pc, #0, 12
   12020:	add	ip, ip, #118784	; 0x1d000
   12024:	ldr	pc, [ip, #3772]!	; 0xebc

00012028 <getopt_long@plt>:
   12028:	add	ip, pc, #0, 12
   1202c:	add	ip, ip, #118784	; 0x1d000
   12030:	ldr	pc, [ip, #3764]!	; 0xeb4

00012034 <__ctype_b_loc@plt>:
   12034:	add	ip, pc, #0, 12
   12038:	add	ip, ip, #118784	; 0x1d000
   1203c:	ldr	pc, [ip, #3756]!	; 0xeac

00012040 <getpid@plt>:
   12040:	add	ip, pc, #0, 12
   12044:	add	ip, ip, #118784	; 0x1d000
   12048:	ldr	pc, [ip, #3748]!	; 0xea4

0001204c <exit@plt>:
   1204c:	add	ip, pc, #0, 12
   12050:	add	ip, ip, #118784	; 0x1d000
   12054:	ldr	pc, [ip, #3740]!	; 0xe9c

00012058 <syscall@plt>:
   12058:	add	ip, pc, #0, 12
   1205c:	add	ip, ip, #118784	; 0x1d000
   12060:	ldr	pc, [ip, #3732]!	; 0xe94

00012064 <feof@plt>:
   12064:	add	ip, pc, #0, 12
   12068:	add	ip, ip, #118784	; 0x1d000
   1206c:	ldr	pc, [ip, #3724]!	; 0xe8c

00012070 <strtoul@plt>:
   12070:	add	ip, pc, #0, 12
   12074:	add	ip, ip, #118784	; 0x1d000
   12078:	ldr	pc, [ip, #3716]!	; 0xe84

0001207c <strlen@plt>:
   1207c:	add	ip, pc, #0, 12
   12080:	add	ip, ip, #118784	; 0x1d000
   12084:	ldr	pc, [ip, #3708]!	; 0xe7c

00012088 <strchr@plt>:
   12088:	add	ip, pc, #0, 12
   1208c:	add	ip, ip, #118784	; 0x1d000
   12090:	ldr	pc, [ip, #3700]!	; 0xe74

00012094 <openat64@plt>:
   12094:	add	ip, pc, #0, 12
   12098:	add	ip, ip, #118784	; 0x1d000
   1209c:	ldr	pc, [ip, #3692]!	; 0xe6c

000120a0 <warnx@plt>:
   120a0:	add	ip, pc, #0, 12
   120a4:	add	ip, ip, #118784	; 0x1d000
   120a8:	ldr	pc, [ip, #3684]!	; 0xe64

000120ac <getpagesize@plt>:
   120ac:	add	ip, pc, #0, 12
   120b0:	add	ip, ip, #118784	; 0x1d000
   120b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000120b8 <__open64_2@plt>:
   120b8:	add	ip, pc, #0, 12
   120bc:	add	ip, ip, #118784	; 0x1d000
   120c0:	ldr	pc, [ip, #3668]!	; 0xe54

000120c4 <scols_line_get_cell@plt>:
   120c4:	add	ip, pc, #0, 12
   120c8:	add	ip, ip, #118784	; 0x1d000
   120cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000120d0 <__errno_location@plt>:
   120d0:	add	ip, pc, #0, 12
   120d4:	add	ip, ip, #118784	; 0x1d000
   120d8:	ldr	pc, [ip, #3652]!	; 0xe44

000120dc <strncasecmp@plt>:
   120dc:	add	ip, pc, #0, 12
   120e0:	add	ip, ip, #118784	; 0x1d000
   120e4:	ldr	pc, [ip, #3644]!	; 0xe3c

000120e8 <scols_table_next_column@plt>:
   120e8:	add	ip, pc, #0, 12
   120ec:	add	ip, ip, #118784	; 0x1d000
   120f0:	ldr	pc, [ip, #3636]!	; 0xe34

000120f4 <__sprintf_chk@plt>:
   120f4:	add	ip, pc, #0, 12
   120f8:	add	ip, ip, #118784	; 0x1d000
   120fc:	ldr	pc, [ip, #3628]!	; 0xe2c

00012100 <__cxa_atexit@plt>:
   12100:	add	ip, pc, #0, 12
   12104:	add	ip, ip, #118784	; 0x1d000
   12108:	ldr	pc, [ip, #3620]!	; 0xe24

0001210c <__vasprintf_chk@plt>:
   1210c:	add	ip, pc, #0, 12
   12110:	add	ip, ip, #118784	; 0x1d000
   12114:	ldr	pc, [ip, #3612]!	; 0xe1c

00012118 <mkdir@plt>:
   12118:	add	ip, pc, #0, 12
   1211c:	add	ip, ip, #118784	; 0x1d000
   12120:	ldr	pc, [ip, #3604]!	; 0xe14

00012124 <getgid@plt>:
   12124:	add	ip, pc, #0, 12
   12128:	add	ip, ip, #118784	; 0x1d000
   1212c:	ldr	pc, [ip, #3596]!	; 0xe0c

00012130 <__sched_cpufree@plt>:
   12130:	add	ip, pc, #0, 12
   12134:	add	ip, ip, #118784	; 0x1d000
   12138:	ldr	pc, [ip, #3588]!	; 0xe04

0001213c <memset@plt>:
   1213c:	add	ip, pc, #0, 12
   12140:	add	ip, ip, #118784	; 0x1d000
   12144:	ldr	pc, [ip, #3580]!	; 0xdfc

00012148 <strncpy@plt>:
   12148:	add	ip, pc, #0, 12
   1214c:	add	ip, ip, #118784	; 0x1d000
   12150:	ldr	pc, [ip, #3572]!	; 0xdf4

00012154 <scols_cell_get_data@plt>:
   12154:	add	ip, pc, #0, 12
   12158:	add	ip, ip, #118784	; 0x1d000
   1215c:	ldr	pc, [ip, #3564]!	; 0xdec

00012160 <fscanf@plt>:
   12160:	add	ip, pc, #0, 12
   12164:	add	ip, ip, #118784	; 0x1d000
   12168:	ldr	pc, [ip, #3556]!	; 0xde4

0001216c <fgetc@plt>:
   1216c:	add	ip, pc, #0, 12
   12170:	add	ip, ip, #118784	; 0x1d000
   12174:	ldr	pc, [ip, #3548]!	; 0xddc

00012178 <__printf_chk@plt>:
   12178:	add	ip, pc, #0, 12
   1217c:	add	ip, ip, #118784	; 0x1d000
   12180:	ldr	pc, [ip, #3540]!	; 0xdd4

00012184 <strtod@plt>:
   12184:	add	ip, pc, #0, 12
   12188:	add	ip, ip, #118784	; 0x1d000
   1218c:	ldr	pc, [ip, #3532]!	; 0xdcc

00012190 <write@plt>:
   12190:	add	ip, pc, #0, 12
   12194:	add	ip, ip, #118784	; 0x1d000
   12198:	ldr	pc, [ip, #3524]!	; 0xdc4

0001219c <__sched_cpualloc@plt>:
   1219c:	add	ip, pc, #0, 12
   121a0:	add	ip, ip, #118784	; 0x1d000
   121a4:	ldr	pc, [ip, #3516]!	; 0xdbc

000121a8 <asctime_r@plt>:
   121a8:	add	ip, pc, #0, 12
   121ac:	add	ip, ip, #118784	; 0x1d000
   121b0:	ldr	pc, [ip, #3508]!	; 0xdb4

000121b4 <scols_table_enable_json@plt>:
   121b4:	add	ip, pc, #0, 12
   121b8:	add	ip, ip, #118784	; 0x1d000
   121bc:	ldr	pc, [ip, #3500]!	; 0xdac

000121c0 <__fprintf_chk@plt>:
   121c0:	add	ip, pc, #0, 12
   121c4:	add	ip, ip, #118784	; 0x1d000
   121c8:	ldr	pc, [ip, #3492]!	; 0xda4

000121cc <access@plt>:
   121cc:	add	ip, pc, #0, 12
   121d0:	add	ip, ip, #118784	; 0x1d000
   121d4:	ldr	pc, [ip, #3484]!	; 0xd9c

000121d8 <scols_line_get_userdata@plt>:
   121d8:	add	ip, pc, #0, 12
   121dc:	add	ip, ip, #118784	; 0x1d000
   121e0:	ldr	pc, [ip, #3476]!	; 0xd94

000121e4 <fclose@plt>:
   121e4:	add	ip, pc, #0, 12
   121e8:	add	ip, ip, #118784	; 0x1d000
   121ec:	ldr	pc, [ip, #3468]!	; 0xd8c

000121f0 <fcntl64@plt>:
   121f0:	add	ip, pc, #0, 12
   121f4:	add	ip, ip, #118784	; 0x1d000
   121f8:	ldr	pc, [ip, #3460]!	; 0xd84

000121fc <semctl@plt>:
   121fc:	add	ip, pc, #0, 12
   12200:	add	ip, ip, #118784	; 0x1d000
   12204:	ldr	pc, [ip, #3452]!	; 0xd7c

00012208 <setlocale@plt>:
   12208:	add	ip, pc, #0, 12
   1220c:	add	ip, ip, #118784	; 0x1d000
   12210:	ldr	pc, [ip, #3444]!	; 0xd74

00012214 <scols_table_get_line@plt>:
   12214:	add	ip, pc, #0, 12
   12218:	add	ip, ip, #118784	; 0x1d000
   1221c:	ldr	pc, [ip, #3436]!	; 0xd6c

00012220 <errx@plt>:
   12220:	add	ip, pc, #0, 12
   12224:	add	ip, ip, #118784	; 0x1d000
   12228:	ldr	pc, [ip, #3428]!	; 0xd64

0001222c <strrchr@plt>:
   1222c:	add	ip, pc, #0, 12
   12230:	add	ip, ip, #118784	; 0x1d000
   12234:	ldr	pc, [ip, #3420]!	; 0xd5c

00012238 <warn@plt>:
   12238:	add	ip, pc, #0, 12
   1223c:	add	ip, ip, #118784	; 0x1d000
   12240:	ldr	pc, [ip, #3412]!	; 0xd54

00012244 <scols_print_table@plt>:
   12244:	add	ip, pc, #0, 12
   12248:	add	ip, ip, #118784	; 0x1d000
   1224c:	ldr	pc, [ip, #3404]!	; 0xd4c

00012250 <fputc@plt>:
   12250:	add	ip, pc, #0, 12
   12254:	add	ip, ip, #118784	; 0x1d000
   12258:	ldr	pc, [ip, #3396]!	; 0xd44

0001225c <sscanf@plt>:
   1225c:	add	ip, pc, #0, 12
   12260:	add	ip, ip, #118784	; 0x1d000
   12264:	ldr	pc, [ip, #3388]!	; 0xd3c

00012268 <localeconv@plt>:
   12268:	add	ip, pc, #0, 12
   1226c:	add	ip, ip, #118784	; 0x1d000
   12270:	ldr	pc, [ip, #3380]!	; 0xd34

00012274 <sprintf@plt>:
   12274:	add	ip, pc, #0, 12
   12278:	add	ip, ip, #118784	; 0x1d000
   1227c:	ldr	pc, [ip, #3372]!	; 0xd2c

00012280 <readdir64@plt>:
   12280:	add	ip, pc, #0, 12
   12284:	add	ip, ip, #118784	; 0x1d000
   12288:	ldr	pc, [ip, #3364]!	; 0xd24

0001228c <fdopendir@plt>:
   1228c:	add	ip, pc, #0, 12
   12290:	add	ip, ip, #118784	; 0x1d000
   12294:	ldr	pc, [ip, #3356]!	; 0xd1c

00012298 <scols_new_iter@plt>:
   12298:	add	ip, pc, #0, 12
   1229c:	add	ip, ip, #118784	; 0x1d000
   122a0:	ldr	pc, [ip, #3348]!	; 0xd14

000122a4 <dirfd@plt>:
   122a4:	add	ip, pc, #0, 12
   122a8:	add	ip, ip, #118784	; 0x1d000
   122ac:	ldr	pc, [ip, #3340]!	; 0xd0c

000122b0 <__strtoll_internal@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #118784	; 0x1d000
   122b8:	ldr	pc, [ip, #3332]!	; 0xd04

000122bc <fopen64@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #118784	; 0x1d000
   122c4:	ldr	pc, [ip, #3324]!	; 0xcfc

000122c8 <bindtextdomain@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #118784	; 0x1d000
   122d0:	ldr	pc, [ip, #3316]!	; 0xcf4

000122d4 <umask@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #118784	; 0x1d000
   122dc:	ldr	pc, [ip, #3308]!	; 0xcec

000122e0 <fputs@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #118784	; 0x1d000
   122e8:	ldr	pc, [ip, #3300]!	; 0xce4

000122ec <strncmp@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #118784	; 0x1d000
   122f4:	ldr	pc, [ip, #3292]!	; 0xcdc

000122f8 <abort@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #118784	; 0x1d000
   12300:	ldr	pc, [ip, #3284]!	; 0xcd4

00012304 <close@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #118784	; 0x1d000
   1230c:	ldr	pc, [ip, #3276]!	; 0xccc

00012310 <closedir@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #118784	; 0x1d000
   12318:	ldr	pc, [ip, #3268]!	; 0xcc4

0001231c <getgrgid@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #118784	; 0x1d000
   12324:	ldr	pc, [ip, #3260]!	; 0xcbc

00012328 <__snprintf_chk@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #118784	; 0x1d000
   12330:	ldr	pc, [ip, #3252]!	; 0xcb4

00012334 <scols_init_debug@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #118784	; 0x1d000
   1233c:	ldr	pc, [ip, #3244]!	; 0xcac

00012340 <strspn@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #118784	; 0x1d000
   12348:	ldr	pc, [ip, #3236]!	; 0xca4

0001234c <__assert_fail@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #118784	; 0x1d000
   12354:	ldr	pc, [ip, #3228]!	; 0xc9c

Disassembly of section .text:

00012358 <.text>:
   12358:	ldr	r3, [pc, #3976]	; 132e8 <__assert_fail@plt+0xf9c>
   1235c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12360:	sub	sp, sp, #204	; 0xcc
   12364:	ldr	r3, [r3]
   12368:	mov	r5, r0
   1236c:	mov	r6, r1
   12370:	mov	r0, #1
   12374:	mov	r1, #8
   12378:	str	r3, [sp, #196]	; 0xc4
   1237c:	bl	11cf8 <calloc@plt>
   12380:	subs	fp, r0, #0
   12384:	bne	12398 <__assert_fail@plt+0x4c>
   12388:	mov	r2, #8
   1238c:	ldr	r1, [pc, #3928]	; 132ec <__assert_fail@plt+0xfa0>
   12390:	mov	r0, #1
   12394:	bl	11ecc <err@plt>
   12398:	mov	r4, #0
   1239c:	ldr	r1, [pc, #3916]	; 132f0 <__assert_fail@plt+0xfa4>
   123a0:	mov	r0, #6
   123a4:	str	r4, [sp, #180]	; 0xb4
   123a8:	str	r4, [sp, #176]	; 0xb0
   123ac:	str	r4, [sp, #184]	; 0xb8
   123b0:	str	r4, [sp, #188]	; 0xbc
   123b4:	str	r4, [sp, #192]	; 0xc0
   123b8:	bl	12208 <setlocale@plt>
   123bc:	ldr	r1, [pc, #3888]	; 132f4 <__assert_fail@plt+0xfa8>
   123c0:	ldr	r0, [pc, #3888]	; 132f8 <__assert_fail@plt+0xfac>
   123c4:	bl	122c8 <bindtextdomain@plt>
   123c8:	ldr	r0, [pc, #3880]	; 132f8 <__assert_fail@plt+0xfac>
   123cc:	bl	11ec0 <textdomain@plt>
   123d0:	ldr	r0, [pc, #3876]	; 132fc <__assert_fail@plt+0xfb0>
   123d4:	bl	1d43c <__assert_fail@plt+0xb0f0>
   123d8:	ldrb	r3, [fp, #4]
   123dc:	mov	r0, r4
   123e0:	ldr	r7, [pc, #3864]	; 13300 <__assert_fail@plt+0xfb4>
   123e4:	bic	r3, r3, #48	; 0x30
   123e8:	strb	r3, [fp, #4]
   123ec:	bl	12334 <scols_init_debug@plt>
   123f0:	ldr	r3, [pc, #3852]	; 13304 <__assert_fail@plt+0xfb8>
   123f4:	mov	r8, r4
   123f8:	mov	r9, r4
   123fc:	add	sl, r3, #1104	; 0x450
   12400:	mvn	r3, #0
   12404:	str	r4, [sp, #40]	; 0x28
   12408:	str	r4, [sp, #44]	; 0x2c
   1240c:	str	r4, [sp, #32]
   12410:	str	r4, [sp, #36]	; 0x24
   12414:	str	r4, [sp, #28]
   12418:	str	r3, [sp, #24]
   1241c:	mov	r3, #0
   12420:	str	r3, [sp]
   12424:	mov	r2, r7
   12428:	mov	r3, sl
   1242c:	mov	r1, r6
   12430:	mov	r0, r5
   12434:	bl	12028 <getopt_long@plt>
   12438:	cmn	r0, #1
   1243c:	beq	12a30 <__assert_fail@plt+0x6e4>
   12440:	cmp	r0, #73	; 0x49
   12444:	ble	124c8 <__assert_fail@plt+0x17c>
   12448:	ldr	r4, [pc, #3768]	; 13308 <__assert_fail@plt+0xfbc>
   1244c:	add	r2, sp, #176	; 0xb0
   12450:	mov	r3, #74	; 0x4a
   12454:	cmp	r0, r3
   12458:	blt	124a4 <__assert_fail@plt+0x158>
   1245c:	beq	1248c <__assert_fail@plt+0x140>
   12460:	mov	r1, r4
   12464:	ldr	r3, [r1, #4]!
   12468:	cmp	r0, r3
   1246c:	movlt	ip, #0
   12470:	movge	ip, #1
   12474:	cmp	r3, #0
   12478:	moveq	ip, #0
   1247c:	cmp	ip, #0
   12480:	beq	124a4 <__assert_fail@plt+0x158>
   12484:	cmp	r0, r3
   12488:	bne	12464 <__assert_fail@plt+0x118>
   1248c:	ldr	r3, [r2]
   12490:	cmp	r3, #0
   12494:	streq	r0, [r2]
   12498:	beq	124a4 <__assert_fail@plt+0x158>
   1249c:	cmp	r0, r3
   124a0:	bne	13f3c <__assert_fail@plt+0x1bf0>
   124a4:	ldr	r3, [r4, #64]!	; 0x40
   124a8:	add	r2, r2, #4
   124ac:	cmp	r0, r3
   124b0:	movlt	r1, #0
   124b4:	movge	r1, #1
   124b8:	cmp	r3, #0
   124bc:	moveq	r1, #0
   124c0:	cmp	r1, #0
   124c4:	bne	12454 <__assert_fail@plt+0x108>
   124c8:	sub	r0, r0, #74	; 0x4a
   124cc:	cmp	r0, #56	; 0x38
   124d0:	ldrls	pc, [pc, r0, lsl #2]
   124d4:	b	12e44 <__assert_fail@plt+0xaf8>
   124d8:	andeq	r2, r1, r4, lsr #20
   124dc:	andeq	r2, r1, r4, asr #28
   124e0:	andeq	r2, r1, r4, asr #28
   124e4:	andeq	r2, r1, r4, asr #28
   124e8:	andeq	r2, r1, r4, asr #28
   124ec:	andeq	r2, r1, r4, asr #28
   124f0:	andeq	r2, r1, r4, lsl sl
   124f4:	andeq	r2, r1, r4, asr #28
   124f8:	andeq	r2, r1, r4, asr #28
   124fc:	andeq	r2, r1, r4, asr #28
   12500:	andeq	r2, r1, r4, asr #28
   12504:	andeq	r2, r1, r4, asr #28
   12508:	andeq	r2, r1, ip, asr #19
   1250c:	andeq	r2, r1, r4, asr #28
   12510:	andeq	r2, r1, r4, asr #28
   12514:	andeq	r2, r1, r4, asr #28
   12518:	andeq	r2, r1, r4, asr #28
   1251c:	andeq	r2, r1, r4, asr #28
   12520:	andeq	r2, r1, r4, asr #28
   12524:	andeq	r2, r1, r4, asr #28
   12528:	andeq	r2, r1, r4, asr #28
   1252c:	andeq	r2, r1, r4, asr #28
   12530:	andeq	r2, r1, r4, asr #28
   12534:	andeq	r2, r1, r4, asr #28
   12538:			; <UNDEFINED> instruction: 0x000129bc
   1253c:			; <UNDEFINED> instruction: 0x000129b0
   12540:	andeq	r2, r1, r4, asr #28
   12544:	andeq	r2, r1, r4, lsr #19
   12548:	andeq	r2, r1, r4, asr #28
   1254c:	muleq	r1, r8, r9
   12550:	andeq	r2, r1, r0, asr #28
   12554:	andeq	r2, r1, ip, ror #18
   12558:	andeq	r2, r1, r4, asr #28
   1255c:	andeq	r2, r1, r4, asr #28
   12560:	andeq	r2, r1, r0, ror #18
   12564:	andeq	r2, r1, ip, lsl #16
   12568:	andeq	r2, r1, r0, lsl #16
   1256c:	strdeq	r2, [r1], -r4
   12570:	andeq	r2, r1, r4, asr #28
   12574:	andeq	r2, r1, r0, lsl #14
   12578:	strdeq	r2, [r1], -r4
   1257c:	andeq	r2, r1, ip, asr #12
   12580:	andeq	r2, r1, r0, asr #12
   12584:	andeq	r2, r1, r4, asr #28
   12588:	andeq	r2, r1, r4, asr #28
   1258c:	andeq	r2, r1, r4, asr #28
   12590:	andeq	r2, r1, r4, asr #28
   12594:	andeq	r2, r1, r4, asr #28
   12598:	andeq	r2, r1, r4, asr #28
   1259c:	andeq	r2, r1, r4, asr #28
   125a0:	andeq	r2, r1, r4, asr #28
   125a4:	andeq	r2, r1, r4, asr #28
   125a8:	andeq	r2, r1, r4, asr #28
   125ac:	andeq	r2, r1, r4, asr #28
   125b0:	andeq	r2, r1, r0, lsr r6
   125b4:	andeq	r2, r1, r0, lsr #12
   125b8:			; <UNDEFINED> instruction: 0x000125bc
   125bc:	ldr	r3, [pc, #3400]	; 1330c <__assert_fail@plt+0xfc0>
   125c0:	ldr	r0, [pc, #3400]	; 13310 <__assert_fail@plt+0xfc4>
   125c4:	ldr	r4, [r3]
   125c8:	mov	r1, r4
   125cc:	bl	11d34 <strcmp@plt>
   125d0:	cmp	r0, #0
   125d4:	beq	12e1c <__assert_fail@plt+0xad0>
   125d8:	mov	r1, r4
   125dc:	ldr	r0, [pc, #3376]	; 13314 <__assert_fail@plt+0xfc8>
   125e0:	bl	11d34 <strcmp@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	12e18 <__assert_fail@plt+0xacc>
   125ec:	mov	r1, r4
   125f0:	ldr	r0, [pc, #3360]	; 13318 <__assert_fail@plt+0xfcc>
   125f4:	bl	11d34 <strcmp@plt>
   125f8:	cmp	r0, #0
   125fc:	beq	13f34 <__assert_fail@plt+0x1be8>
   12600:	mov	r2, #5
   12604:	ldr	r1, [pc, #3344]	; 1331c <__assert_fail@plt+0xfd0>
   12608:	mov	r0, #0
   1260c:	bl	11e6c <dcgettext@plt>
   12610:	mov	r2, r4
   12614:	mov	r1, r0
   12618:	mov	r0, #1
   1261c:	bl	12220 <errx@plt>
   12620:	ldrb	r3, [fp, #4]
   12624:	orr	r3, r3, #1
   12628:	strb	r3, [fp, #4]
   1262c:	b	1241c <__assert_fail@plt+0xd0>
   12630:	ldrb	r3, [fp, #4]
   12634:	orr	r3, r3, #2
   12638:	strb	r3, [fp, #4]
   1263c:	b	1241c <__assert_fail@plt+0xd0>
   12640:	mov	r3, #1
   12644:	str	r3, [sp, #32]
   12648:	b	1241c <__assert_fail@plt+0xd0>
   1264c:	ldr	r3, [pc, #3276]	; 13320 <__assert_fail@plt+0xfd4>
   12650:	ldr	r2, [r3, #8]
   12654:	add	r0, r2, #1
   12658:	cmp	r2, #67	; 0x43
   1265c:	str	r0, [r3, #8]
   12660:	bhi	14388 <__assert_fail@plt+0x203c>
   12664:	add	ip, r3, r2, lsl #2
   12668:	mov	lr, #0
   1266c:	add	r1, r2, #2
   12670:	cmp	r0, #67	; 0x43
   12674:	str	lr, [ip, #12]
   12678:	str	r1, [r3, #8]
   1267c:	bhi	14388 <__assert_fail@plt+0x203c>
   12680:	add	lr, r3, r0, lsl #2
   12684:	mov	ip, #1
   12688:	add	r0, r2, #3
   1268c:	cmp	r1, #67	; 0x43
   12690:	str	ip, [lr, #12]
   12694:	str	r0, [r3, #8]
   12698:	bhi	14388 <__assert_fail@plt+0x203c>
   1269c:	add	lr, r3, r1, lsl #2
   126a0:	mov	r4, #3
   126a4:	add	r1, r2, #4
   126a8:	cmp	r0, #67	; 0x43
   126ac:	str	r4, [lr, #12]
   126b0:	str	r1, [r3, #8]
   126b4:	bhi	14388 <__assert_fail@plt+0x203c>
   126b8:	add	r0, r3, r0, lsl #2
   126bc:	add	r2, r2, #5
   126c0:	mov	lr, #2
   126c4:	cmp	r1, #67	; 0x43
   126c8:	str	r2, [r3, #8]
   126cc:	str	lr, [r0, #12]
   126d0:	bhi	14388 <__assert_fail@plt+0x203c>
   126d4:	add	r1, r3, r1, lsl lr
   126d8:	mov	r2, #27
   126dc:	mov	r0, #28
   126e0:	str	ip, [sp, #28]
   126e4:	str	r2, [r1, #12]
   126e8:	str	r2, [r3]
   126ec:	str	r0, [r3, #4]
   126f0:	b	1241c <__assert_fail@plt+0xd0>
   126f4:	mov	r3, #3
   126f8:	str	r3, [fp]
   126fc:	b	1241c <__assert_fail@plt+0xd0>
   12700:	ldr	r3, [pc, #3096]	; 13320 <__assert_fail@plt+0xfd4>
   12704:	ldr	r2, [r3, #8]
   12708:	add	r1, r2, #1
   1270c:	cmp	r2, #67	; 0x43
   12710:	str	r1, [r3, #8]
   12714:	bhi	14388 <__assert_fail@plt+0x203c>
   12718:	add	ip, r3, r2, lsl #2
   1271c:	mov	lr, #0
   12720:	add	r0, r2, #2
   12724:	cmp	r1, #67	; 0x43
   12728:	str	lr, [ip, #12]
   1272c:	str	r0, [r3, #8]
   12730:	bhi	14388 <__assert_fail@plt+0x203c>
   12734:	add	ip, r3, r1, lsl #2
   12738:	mov	r9, #1
   1273c:	add	r1, r2, #3
   12740:	cmp	r0, #67	; 0x43
   12744:	str	r9, [ip, #12]
   12748:	str	r1, [r3, #8]
   1274c:	bhi	14388 <__assert_fail@plt+0x203c>
   12750:	add	ip, r3, r0, lsl #2
   12754:	mov	lr, #3
   12758:	add	r0, r2, #4
   1275c:	cmp	r1, #67	; 0x43
   12760:	str	lr, [ip, #12]
   12764:	str	r0, [r3, #8]
   12768:	bhi	14388 <__assert_fail@plt+0x203c>
   1276c:	add	ip, r3, r1, lsl #2
   12770:	mov	lr, #2
   12774:	add	r1, r2, #5
   12778:	cmp	r0, #67	; 0x43
   1277c:	str	lr, [ip, #12]
   12780:	str	r1, [r3, #8]
   12784:	bhi	14388 <__assert_fail@plt+0x203c>
   12788:	add	lr, r3, r0, lsl lr
   1278c:	mov	ip, #13
   12790:	add	r0, r2, #6
   12794:	cmp	r1, #67	; 0x43
   12798:	str	ip, [lr, #12]
   1279c:	str	r0, [r3, #8]
   127a0:	bhi	14388 <__assert_fail@plt+0x203c>
   127a4:	add	lr, r3, r1, lsl #2
   127a8:	mov	r4, #14
   127ac:	add	r1, r2, #7
   127b0:	cmp	r0, #67	; 0x43
   127b4:	str	r4, [lr, #12]
   127b8:	str	r1, [r3, #8]
   127bc:	bhi	14388 <__assert_fail@plt+0x203c>
   127c0:	add	r0, r3, r0, lsl #2
   127c4:	add	r2, r2, #8
   127c8:	mov	lr, #17
   127cc:	cmp	r1, #67	; 0x43
   127d0:	str	r2, [r3, #8]
   127d4:	str	lr, [r0, #12]
   127d8:	bhi	14388 <__assert_fail@plt+0x203c>
   127dc:	add	r1, r3, r1, lsl #2
   127e0:	mov	r2, #18
   127e4:	str	ip, [r3]
   127e8:	str	r2, [r1, #12]
   127ec:	str	r2, [r3, #4]
   127f0:	b	1241c <__assert_fail@plt+0xd0>
   127f4:	ldr	r3, [pc, #2832]	; 1330c <__assert_fail@plt+0xfc0>
   127f8:	ldr	r8, [r3]
   127fc:	b	1241c <__assert_fail@plt+0xd0>
   12800:	mov	r3, #2
   12804:	str	r3, [fp]
   12808:	b	1241c <__assert_fail@plt+0xd0>
   1280c:	ldr	r3, [pc, #2828]	; 13320 <__assert_fail@plt+0xfd4>
   12810:	ldr	r2, [r3, #8]
   12814:	add	r0, r2, #1
   12818:	cmp	r2, #67	; 0x43
   1281c:	str	r0, [r3, #8]
   12820:	bhi	14388 <__assert_fail@plt+0x203c>
   12824:	add	ip, r3, r2, lsl #2
   12828:	mov	lr, #0
   1282c:	add	r1, r2, #2
   12830:	cmp	r0, #67	; 0x43
   12834:	str	lr, [ip, #12]
   12838:	str	r1, [r3, #8]
   1283c:	bhi	14388 <__assert_fail@plt+0x203c>
   12840:	add	ip, r3, r0, lsl #2
   12844:	mov	lr, #1
   12848:	add	r0, r2, #3
   1284c:	cmp	r1, #67	; 0x43
   12850:	str	lr, [ip, #12]
   12854:	str	r0, [r3, #8]
   12858:	bhi	14388 <__assert_fail@plt+0x203c>
   1285c:	add	ip, r3, r1, lsl #2
   12860:	mov	lr, #3
   12864:	add	r1, r2, #4
   12868:	cmp	r0, #67	; 0x43
   1286c:	str	lr, [ip, #12]
   12870:	str	r1, [r3, #8]
   12874:	bhi	14388 <__assert_fail@plt+0x203c>
   12878:	add	ip, r3, r0, lsl #2
   1287c:	mov	lr, #2
   12880:	add	r0, r2, #5
   12884:	cmp	r1, #67	; 0x43
   12888:	str	lr, [ip, #12]
   1288c:	str	r0, [r3, #8]
   12890:	bhi	14388 <__assert_fail@plt+0x203c>
   12894:	add	ip, r3, r1, lsl lr
   12898:	cmp	r0, #67	; 0x43
   1289c:	mov	lr, #19
   128a0:	add	r1, r2, #6
   128a4:	str	lr, [ip, #12]
   128a8:	str	r1, [r3, #8]
   128ac:	bhi	14388 <__assert_fail@plt+0x203c>
   128b0:	add	ip, r3, r0, lsl #2
   128b4:	mov	lr, #20
   128b8:	add	r0, r2, #7
   128bc:	cmp	r1, #67	; 0x43
   128c0:	str	lr, [ip, #12]
   128c4:	str	r0, [r3, #8]
   128c8:	bhi	14388 <__assert_fail@plt+0x203c>
   128cc:	add	ip, r3, r1, lsl #2
   128d0:	mov	lr, #21
   128d4:	add	r1, r2, #8
   128d8:	cmp	r0, #67	; 0x43
   128dc:	str	lr, [ip, #12]
   128e0:	str	r1, [r3, #8]
   128e4:	bhi	14388 <__assert_fail@plt+0x203c>
   128e8:	add	ip, r3, r0, lsl #2
   128ec:	mov	lr, #12
   128f0:	add	r0, r2, #9
   128f4:	cmp	r1, #67	; 0x43
   128f8:	str	lr, [ip, #12]
   128fc:	str	r0, [r3, #8]
   12900:	bhi	14388 <__assert_fail@plt+0x203c>
   12904:	add	ip, r3, r1, lsl #2
   12908:	mov	lr, #25
   1290c:	add	r1, r2, #10
   12910:	cmp	r0, #67	; 0x43
   12914:	str	lr, [ip, #12]
   12918:	str	r1, [r3, #8]
   1291c:	bhi	14388 <__assert_fail@plt+0x203c>
   12920:	add	r0, r3, r0, lsl #2
   12924:	add	r2, r2, #11
   12928:	mov	ip, #26
   1292c:	cmp	r1, #67	; 0x43
   12930:	str	r2, [r3, #8]
   12934:	str	ip, [r0, #12]
   12938:	bhi	14388 <__assert_fail@plt+0x203c>
   1293c:	add	r1, r3, r1, lsl #2
   12940:	mov	r2, #19
   12944:	mov	r0, #24
   12948:	str	ip, [r3, #4]
   1294c:	str	r2, [r3]
   12950:	mov	r3, #1
   12954:	str	r0, [r1, #12]
   12958:	str	r3, [sp, #36]	; 0x24
   1295c:	b	1241c <__assert_fail@plt+0xd0>
   12960:	mov	r3, #6
   12964:	str	r3, [fp]
   12968:	b	1241c <__assert_fail@plt+0xd0>
   1296c:	ldr	r3, [pc, #2456]	; 1330c <__assert_fail@plt+0xfc0>
   12970:	mov	r2, #5
   12974:	ldr	r1, [pc, #2472]	; 13324 <__assert_fail@plt+0xfd8>
   12978:	mov	r0, #0
   1297c:	ldr	r4, [r3]
   12980:	bl	11e6c <dcgettext@plt>
   12984:	mov	r1, r0
   12988:	mov	r0, r4
   1298c:	bl	171b8 <__assert_fail@plt+0x4e6c>
   12990:	str	r0, [sp, #24]
   12994:	b	1241c <__assert_fail@plt+0xd0>
   12998:	mov	r3, #1
   1299c:	str	r3, [sp, #40]	; 0x28
   129a0:	b	1241c <__assert_fail@plt+0xd0>
   129a4:	mov	r3, #1
   129a8:	str	r3, [fp]
   129ac:	b	1241c <__assert_fail@plt+0xd0>
   129b0:	mov	r3, #1
   129b4:	str	r3, [sp, #44]	; 0x2c
   129b8:	b	1241c <__assert_fail@plt+0xd0>
   129bc:	ldrb	r3, [fp, #4]
   129c0:	orr	r3, r3, #4
   129c4:	strb	r3, [fp, #4]
   129c8:	b	1241c <__assert_fail@plt+0xd0>
   129cc:	mov	r2, #5
   129d0:	ldr	r1, [pc, #2384]	; 13328 <__assert_fail@plt+0xfdc>
   129d4:	mov	r0, #0
   129d8:	bl	11e6c <dcgettext@plt>
   129dc:	ldr	r2, [pc, #2568]	; 133ec <__assert_fail@plt+0x10a0>
   129e0:	ldr	r3, [pc, #2372]	; 1332c <__assert_fail@plt+0xfe0>
   129e4:	ldr	r2, [r2]
   129e8:	mov	r1, r0
   129ec:	mov	r0, #1
   129f0:	bl	12178 <__printf_chk@plt>
   129f4:	mov	r0, #0
   129f8:	ldr	r3, [pc, #2280]	; 132e8 <__assert_fail@plt+0xf9c>
   129fc:	ldr	r2, [sp, #196]	; 0xc4
   12a00:	ldr	r3, [r3]
   12a04:	cmp	r2, r3
   12a08:	bne	14524 <__assert_fail@plt+0x21d8>
   12a0c:	add	sp, sp, #204	; 0xcc
   12a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a14:	ldrb	r3, [fp, #4]
   12a18:	orr	r3, r3, #8
   12a1c:	strb	r3, [fp, #4]
   12a20:	b	1241c <__assert_fail@plt+0xd0>
   12a24:	mov	r3, #4
   12a28:	str	r3, [fp]
   12a2c:	b	1241c <__assert_fail@plt+0xd0>
   12a30:	ldr	r3, [sp, #36]	; 0x24
   12a34:	ldr	r2, [sp, #28]
   12a38:	add	r3, r9, r3
   12a3c:	adds	r0, r3, r2
   12a40:	beq	12d44 <__assert_fail@plt+0x9f8>
   12a44:	ldr	r3, [sp, #40]	; 0x28
   12a48:	cmp	r3, #0
   12a4c:	bne	12d70 <__assert_fail@plt+0xa24>
   12a50:	ldr	r2, [sp, #24]
   12a54:	ldrb	r3, [fp, #4]
   12a58:	cmn	r2, #1
   12a5c:	ldr	r2, [fp]
   12a60:	and	r3, r3, #48	; 0x30
   12a64:	beq	12e7c <__assert_fail@plt+0xb30>
   12a68:	cmp	r2, #0
   12a6c:	bne	12e7c <__assert_fail@plt+0xb30>
   12a70:	mov	r2, #5
   12a74:	cmp	r3, #0
   12a78:	str	r2, [fp]
   12a7c:	bne	12eac <__assert_fail@plt+0xb60>
   12a80:	mov	r1, #2
   12a84:	ldrb	r3, [fp, #4]
   12a88:	bic	r3, r3, #48	; 0x30
   12a8c:	orr	r3, r3, r1, lsl #4
   12a90:	strb	r3, [fp, #4]
   12a94:	cmp	r2, #5
   12a98:	beq	12eac <__assert_fail@plt+0xb60>
   12a9c:	ldr	r3, [sp, #44]	; 0x2c
   12aa0:	cmp	r3, #0
   12aa4:	beq	12b20 <__assert_fail@plt+0x7d4>
   12aa8:	ldr	r4, [pc, #2160]	; 13320 <__assert_fail@plt+0xfd4>
   12aac:	ldr	r3, [r4, #8]
   12ab0:	add	r1, r3, #1
   12ab4:	cmp	r3, #67	; 0x43
   12ab8:	str	r1, [r4, #8]
   12abc:	bhi	14388 <__assert_fail@plt+0x203c>
   12ac0:	add	r0, r4, r3, lsl #2
   12ac4:	mov	ip, #4
   12ac8:	add	r2, r3, #2
   12acc:	cmp	r1, #67	; 0x43
   12ad0:	str	ip, [r0, #12]
   12ad4:	str	r2, [r4, #8]
   12ad8:	bhi	14388 <__assert_fail@plt+0x203c>
   12adc:	add	r1, r4, r1, lsl #2
   12ae0:	mov	ip, #6
   12ae4:	add	r0, r3, #3
   12ae8:	cmp	r2, #67	; 0x43
   12aec:	str	ip, [r1, #12]
   12af0:	str	r0, [r4, #8]
   12af4:	bhi	14388 <__assert_fail@plt+0x203c>
   12af8:	add	r2, r4, r2, lsl #2
   12afc:	add	r3, r3, #4
   12b00:	mov	r1, #8
   12b04:	cmp	r0, #67	; 0x43
   12b08:	str	r3, [r4, #8]
   12b0c:	str	r1, [r2, #12]
   12b10:	bhi	14388 <__assert_fail@plt+0x203c>
   12b14:	add	r4, r4, r0, lsl #2
   12b18:	mov	r3, #10
   12b1c:	str	r3, [r4, #12]
   12b20:	ldr	r3, [sp, #32]
   12b24:	tst	r3, r9
   12b28:	beq	12b88 <__assert_fail@plt+0x83c>
   12b2c:	ldr	r4, [pc, #2028]	; 13320 <__assert_fail@plt+0xfd4>
   12b30:	ldr	r3, [r4, #8]
   12b34:	add	r1, r3, #1
   12b38:	cmp	r3, #67	; 0x43
   12b3c:	str	r1, [r4, #8]
   12b40:	bhi	14388 <__assert_fail@plt+0x203c>
   12b44:	add	r0, r4, r3, lsl #2
   12b48:	mov	ip, #15
   12b4c:	add	r2, r3, #2
   12b50:	cmp	r1, #67	; 0x43
   12b54:	str	ip, [r0, #12]
   12b58:	str	r2, [r4, #8]
   12b5c:	bhi	14388 <__assert_fail@plt+0x203c>
   12b60:	add	r1, r4, r1, lsl #2
   12b64:	add	r3, r3, #3
   12b68:	mov	r0, #16
   12b6c:	cmp	r2, #67	; 0x43
   12b70:	str	r3, [r4, #8]
   12b74:	str	r0, [r1, #12]
   12b78:	bhi	14388 <__assert_fail@plt+0x203c>
   12b7c:	add	r2, r4, r2, lsl #2
   12b80:	mov	r3, #12
   12b84:	str	r3, [r2, #12]
   12b88:	ldr	r3, [sp, #32]
   12b8c:	ldr	r2, [sp, #36]	; 0x24
   12b90:	tst	r3, r2
   12b94:	beq	12bf8 <__assert_fail@plt+0x8ac>
   12b98:	ldr	r4, [pc, #1920]	; 13320 <__assert_fail@plt+0xfd4>
   12b9c:	ldr	r3, [r4, #8]
   12ba0:	sub	r3, r3, #1
   12ba4:	add	r2, r4, r3, lsl #2
   12ba8:	ldr	r1, [r2, #12]
   12bac:	cmp	r1, #24
   12bb0:	streq	r3, [r4, #8]
   12bb4:	ldr	r3, [r4, #8]
   12bb8:	add	r2, r3, #1
   12bbc:	cmp	r3, #67	; 0x43
   12bc0:	str	r2, [r4, #8]
   12bc4:	bhi	14388 <__assert_fail@plt+0x203c>
   12bc8:	add	ip, r4, r3, lsl #2
   12bcc:	mov	lr, #22
   12bd0:	add	r0, r3, #2
   12bd4:	cmp	r2, #67	; 0x43
   12bd8:	str	lr, [ip, #12]
   12bdc:	str	r0, [r4, #8]
   12be0:	bhi	14388 <__assert_fail@plt+0x203c>
   12be4:	add	r2, r4, r2, lsl #2
   12be8:	mov	ip, #23
   12bec:	cmp	r1, #24
   12bf0:	str	ip, [r2, #12]
   12bf4:	beq	13530 <__assert_fail@plt+0x11e4>
   12bf8:	ldrd	r2, [sp, #28]
   12bfc:	tst	r3, r2
   12c00:	beq	12c44 <__assert_fail@plt+0x8f8>
   12c04:	ldr	r4, [pc, #1812]	; 13320 <__assert_fail@plt+0xfd4>
   12c08:	ldr	r3, [r4, #8]
   12c0c:	add	r2, r3, #1
   12c10:	cmp	r3, #67	; 0x43
   12c14:	str	r2, [r4, #8]
   12c18:	bhi	14388 <__assert_fail@plt+0x203c>
   12c1c:	add	r1, r4, r3, lsl #2
   12c20:	mov	r0, #28
   12c24:	add	r3, r3, #2
   12c28:	cmp	r2, #67	; 0x43
   12c2c:	str	r3, [r4, #8]
   12c30:	str	r0, [r1, #12]
   12c34:	bhi	14388 <__assert_fail@plt+0x203c>
   12c38:	add	r2, r4, r2, lsl #2
   12c3c:	mov	r3, #12
   12c40:	str	r3, [r2, #12]
   12c44:	cmp	r8, #0
   12c48:	beq	12c70 <__assert_fail@plt+0x924>
   12c4c:	ldr	r2, [pc, #1756]	; 13330 <__assert_fail@plt+0xfe4>
   12c50:	ldr	r3, [pc, #1756]	; 13334 <__assert_fail@plt+0xfe8>
   12c54:	str	r2, [sp]
   12c58:	mov	r0, r8
   12c5c:	add	r1, r3, #4
   12c60:	mov	r2, #68	; 0x44
   12c64:	bl	17c14 <__assert_fail@plt+0x58c8>
   12c68:	cmp	r0, #0
   12c6c:	blt	12ea4 <__assert_fail@plt+0xb58>
   12c70:	mov	r0, fp
   12c74:	bl	14c5c <__assert_fail@plt+0x2910>
   12c78:	mov	r5, #0
   12c7c:	ldr	r4, [pc, #1692]	; 13320 <__assert_fail@plt+0xfd4>
   12c80:	mov	r8, r0
   12c84:	b	12cd0 <__assert_fail@plt+0x984>
   12c88:	mov	r0, r5
   12c8c:	bl	14e4c <__assert_fail@plt+0x2b00>
   12c90:	ldrb	r1, [fp, #4]
   12c94:	ldr	r2, [pc, #1640]	; 13304 <__assert_fail@plt+0xfb8>
   12c98:	tst	r1, #2
   12c9c:	ldr	r1, [pc, #1632]	; 13304 <__assert_fail@plt+0xfb8>
   12ca0:	lsl	r3, r0, #5
   12ca4:	add	r2, r2, r3
   12ca8:	add	r3, r1, r3
   12cac:	ldr	r2, [r2, #24]
   12cb0:	ldr	r1, [r1, r0, lsl #5]
   12cb4:	bicne	r2, r2, #1
   12cb8:	vldr	d0, [r3, #16]
   12cbc:	mov	r0, r8
   12cc0:	bl	11d94 <scols_table_new_column@plt>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12e94 <__assert_fail@plt+0xb48>
   12ccc:	add	r5, r5, #1
   12cd0:	ldr	r3, [r4, #8]
   12cd4:	cmp	r5, r3
   12cd8:	bcc	12c88 <__assert_fail@plt+0x93c>
   12cdc:	cmp	r8, #0
   12ce0:	str	r8, [r4, #292]	; 0x124
   12ce4:	beq	12ea4 <__assert_fail@plt+0xb58>
   12ce8:	ldr	r3, [sp, #40]	; 0x28
   12cec:	cmp	r3, #0
   12cf0:	bne	12eec <__assert_fail@plt+0xba0>
   12cf4:	cmp	r9, #0
   12cf8:	bne	1354c <__assert_fail@plt+0x1200>
   12cfc:	ldr	r3, [sp, #36]	; 0x24
   12d00:	cmp	r3, #0
   12d04:	bne	13864 <__assert_fail@plt+0x1518>
   12d08:	ldr	r3, [sp, #28]
   12d0c:	cmp	r3, #0
   12d10:	bne	13c08 <__assert_fail@plt+0x18bc>
   12d14:	ldr	r3, [fp]
   12d18:	ldr	r7, [r4, #292]	; 0x124
   12d1c:	cmp	r3, #5
   12d20:	beq	131a4 <__assert_fail@plt+0xe58>
   12d24:	mov	r0, r7
   12d28:	bl	12244 <scols_print_table@plt>
   12d2c:	ldr	r0, [r4, #292]	; 0x124
   12d30:	bl	11fec <scols_unref_table@plt>
   12d34:	mov	r0, fp
   12d38:	bl	11dc4 <free@plt>
   12d3c:	mov	r0, #0
   12d40:	b	129f8 <__assert_fail@plt+0x6ac>
   12d44:	ldr	r2, [sp, #44]	; 0x2c
   12d48:	ldr	r3, [sp, #32]
   12d4c:	orr	r3, r3, r2
   12d50:	ldr	r2, [sp, #24]
   12d54:	adds	r2, r2, #1
   12d58:	movne	r2, #1
   12d5c:	orrs	r3, r2, r3
   12d60:	moveq	r9, #1
   12d64:	streq	r9, [sp, #36]	; 0x24
   12d68:	streq	r9, [sp, #28]
   12d6c:	bne	14528 <__assert_fail@plt+0x21dc>
   12d70:	ldr	r4, [pc, #1448]	; 13320 <__assert_fail@plt+0xfd4>
   12d74:	ldr	r3, [r4, #8]
   12d78:	add	r1, r3, #1
   12d7c:	cmp	r3, #67	; 0x43
   12d80:	str	r1, [r4, #8]
   12d84:	bhi	14388 <__assert_fail@plt+0x203c>
   12d88:	add	ip, r4, r3, lsl #2
   12d8c:	mov	r0, #29
   12d90:	add	r2, r3, #2
   12d94:	cmp	r1, #67	; 0x43
   12d98:	str	r0, [ip, #12]
   12d9c:	str	r2, [r4, #8]
   12da0:	bhi	14388 <__assert_fail@plt+0x203c>
   12da4:	add	ip, r4, r1, lsl #2
   12da8:	mov	lr, #30
   12dac:	add	r1, r3, #3
   12db0:	cmp	r2, #67	; 0x43
   12db4:	str	lr, [ip, #12]
   12db8:	str	r1, [r4, #8]
   12dbc:	bhi	14388 <__assert_fail@plt+0x203c>
   12dc0:	add	ip, r4, r2, lsl #2
   12dc4:	mov	lr, #31
   12dc8:	add	r2, r3, #4
   12dcc:	cmp	r1, #67	; 0x43
   12dd0:	str	lr, [ip, #12]
   12dd4:	str	r2, [r4, #8]
   12dd8:	bhi	14388 <__assert_fail@plt+0x203c>
   12ddc:	add	r1, r4, r1, lsl #2
   12de0:	add	r3, r3, #5
   12de4:	mov	ip, #32
   12de8:	cmp	r2, #67	; 0x43
   12dec:	str	r3, [r4, #8]
   12df0:	str	ip, [r1, #12]
   12df4:	bhi	14388 <__assert_fail@plt+0x203c>
   12df8:	mov	r3, #1
   12dfc:	add	r2, r4, r2, lsl #2
   12e00:	str	r3, [sp, #40]	; 0x28
   12e04:	mov	r3, #33	; 0x21
   12e08:	str	r0, [r4]
   12e0c:	str	r3, [r2, #12]
   12e10:	str	r3, [r4, #4]
   12e14:	b	12a50 <__assert_fail@plt+0x704>
   12e18:	mov	r0, #1
   12e1c:	ldr	r3, [pc, #1248]	; 13304 <__assert_fail@plt+0xfb8>
   12e20:	add	r0, r3, r0, lsl #3
   12e24:	ldrb	r3, [fp, #4]
   12e28:	ldr	r2, [r0, #1444]	; 0x5a4
   12e2c:	and	r2, r2, #3
   12e30:	bic	r3, r3, #48	; 0x30
   12e34:	orr	r3, r3, r2, lsl #4
   12e38:	strb	r3, [fp, #4]
   12e3c:	b	1241c <__assert_fail@plt+0xd0>
   12e40:	bl	14680 <__assert_fail@plt+0x2334>
   12e44:	ldr	r3, [pc, #1432]	; 133e4 <__assert_fail@plt+0x1098>
   12e48:	mov	r2, #5
   12e4c:	ldr	r1, [pc, #1252]	; 13338 <__assert_fail@plt+0xfec>
   12e50:	mov	r0, #0
   12e54:	ldr	r4, [r3]
   12e58:	bl	11e6c <dcgettext@plt>
   12e5c:	ldr	r3, [pc, #1416]	; 133ec <__assert_fail@plt+0x10a0>
   12e60:	mov	r1, #1
   12e64:	ldr	r3, [r3]
   12e68:	mov	r2, r0
   12e6c:	mov	r0, r4
   12e70:	bl	121c0 <__fprintf_chk@plt>
   12e74:	mov	r0, #1
   12e78:	bl	1204c <exit@plt>
   12e7c:	cmp	r3, #0
   12e80:	bne	12a94 <__assert_fail@plt+0x748>
   12e84:	cmp	r2, #5
   12e88:	movne	r1, #1
   12e8c:	bne	12a84 <__assert_fail@plt+0x738>
   12e90:	b	12a80 <__assert_fail@plt+0x734>
   12e94:	mov	r6, r0
   12e98:	mov	r0, r8
   12e9c:	bl	11fec <scols_unref_table@plt>
   12ea0:	str	r6, [r4, #292]	; 0x124
   12ea4:	mov	r0, #1
   12ea8:	b	129f8 <__assert_fail@plt+0x6ac>
   12eac:	ldr	r3, [pc, #1112]	; 1330c <__assert_fail@plt+0xfc0>
   12eb0:	ldr	r3, [r3]
   12eb4:	cmp	r3, #0
   12eb8:	bne	12a9c <__assert_fail@plt+0x750>
   12ebc:	ldr	r3, [sp, #32]
   12ec0:	ldr	r2, [sp, #44]	; 0x2c
   12ec4:	orrs	r3, r3, r2
   12ec8:	bne	12a9c <__assert_fail@plt+0x750>
   12ecc:	ldr	r2, [pc, #1128]	; 1333c <__assert_fail@plt+0xff0>
   12ed0:	str	r3, [r2], #4
   12ed4:	add	r3, r3, #1
   12ed8:	cmp	r3, #34	; 0x22
   12edc:	bne	12ed0 <__assert_fail@plt+0xb84>
   12ee0:	ldr	r4, [pc, #1080]	; 13320 <__assert_fail@plt+0xfd4>
   12ee4:	str	r3, [r4, #8]
   12ee8:	b	12c44 <__assert_fail@plt+0x8f8>
   12eec:	mov	r0, r8
   12ef0:	ldr	r1, [pc, #1096]	; 13340 <__assert_fail@plt+0xff4>
   12ef4:	bl	11d70 <scols_table_set_name@plt>
   12ef8:	cmp	r9, #0
   12efc:	beq	13294 <__assert_fail@plt+0xf48>
   12f00:	add	r3, sp, #100	; 0x64
   12f04:	add	sl, sp, #104	; 0x68
   12f08:	mov	r6, r3
   12f0c:	mov	r0, sl
   12f10:	str	r3, [sp, #24]
   12f14:	ldr	r5, [r4, #292]	; 0x124
   12f18:	bl	155a0 <__assert_fail@plt+0x3254>
   12f1c:	mov	r1, r6
   12f20:	mvn	r0, #0
   12f24:	bl	15e9c <__assert_fail@plt+0x3b50>
   12f28:	cmp	r0, #0
   12f2c:	movle	r7, #0
   12f30:	ble	12f58 <__assert_fail@plt+0xc0c>
   12f34:	ldr	r0, [sp, #100]	; 0x64
   12f38:	mov	r7, #0
   12f3c:	mov	r3, r0
   12f40:	b	12f48 <__assert_fail@plt+0xbfc>
   12f44:	add	r7, r7, #1
   12f48:	ldr	r3, [r3, #88]	; 0x58
   12f4c:	cmp	r3, #0
   12f50:	bne	12f44 <__assert_fail@plt+0xbf8>
   12f54:	bl	16194 <__assert_fail@plt+0x3e48>
   12f58:	mov	r2, #5
   12f5c:	ldr	r1, [pc, #992]	; 13344 <__assert_fail@plt+0xff8>
   12f60:	mov	r0, #0
   12f64:	bl	11e6c <dcgettext@plt>
   12f68:	ldr	r6, [sp, #156]	; 0x9c
   12f6c:	asr	r3, r7, #31
   12f70:	mov	r2, r7
   12f74:	asr	r7, r6, #31
   12f78:	mov	r1, #1
   12f7c:	strd	r2, [sp]
   12f80:	strd	r6, [sp, #8]
   12f84:	str	r1, [sp, #16]
   12f88:	mov	r6, #0
   12f8c:	ldr	r1, [pc, #948]	; 13348 <__assert_fail@plt+0xffc>
   12f90:	mov	r8, #0
   12f94:	mov	r9, #0
   12f98:	mov	r2, r0
   12f9c:	mov	r0, r5
   12fa0:	bl	14ecc <__assert_fail@plt+0x2b80>
   12fa4:	mov	r2, #5
   12fa8:	ldr	r1, [pc, #924]	; 1334c <__assert_fail@plt+0x1000>
   12fac:	mov	r0, r6
   12fb0:	bl	11e6c <dcgettext@plt>
   12fb4:	ldrd	r2, [sp, #160]	; 0xa0
   12fb8:	ldr	r1, [pc, #912]	; 13350 <__assert_fail@plt+0x1004>
   12fbc:	strd	r8, [sp]
   12fc0:	strd	r2, [sp, #8]
   12fc4:	str	r6, [sp, #16]
   12fc8:	mov	r2, r0
   12fcc:	mov	r0, r5
   12fd0:	bl	14ecc <__assert_fail@plt+0x2b80>
   12fd4:	mov	r2, #5
   12fd8:	ldr	r1, [pc, #884]	; 13354 <__assert_fail@plt+0x1008>
   12fdc:	mov	r0, r6
   12fe0:	bl	11e6c <dcgettext@plt>
   12fe4:	ldr	r2, [sp, #168]	; 0xa8
   12fe8:	strd	r8, [sp]
   12fec:	str	r6, [sp, #16]
   12ff0:	asr	r3, r2, #31
   12ff4:	ldr	r1, [pc, #860]	; 13358 <__assert_fail@plt+0x100c>
   12ff8:	strd	r2, [sp, #8]
   12ffc:	mov	r2, r0
   13000:	mov	r0, r5
   13004:	bl	14ecc <__assert_fail@plt+0x2b80>
   13008:	ldr	r3, [sp, #36]	; 0x24
   1300c:	cmp	r3, r6
   13010:	bne	132ac <__assert_fail@plt+0xf60>
   13014:	ldr	r3, [sp, #28]
   13018:	cmp	r3, #0
   1301c:	beq	12d14 <__assert_fail@plt+0x9c8>
   13020:	mov	r0, sl
   13024:	ldr	r6, [r4, #292]	; 0x124
   13028:	bl	15684 <__assert_fail@plt+0x3338>
   1302c:	ldr	r1, [sp, #24]
   13030:	mvn	r0, #0
   13034:	bl	15bd4 <__assert_fail@plt+0x3888>
   13038:	cmp	r0, #0
   1303c:	movle	r7, #0
   13040:	movle	r5, r7
   13044:	ble	13078 <__assert_fail@plt+0xd2c>
   13048:	ldr	r0, [sp, #100]	; 0x64
   1304c:	mov	r7, #0
   13050:	mov	r3, r0
   13054:	mov	r5, r7
   13058:	b	13068 <__assert_fail@plt+0xd1c>
   1305c:	ldr	r2, [r0, #48]	; 0x30
   13060:	add	r7, r7, #1
   13064:	add	r5, r5, r2
   13068:	ldr	r3, [r3, #60]	; 0x3c
   1306c:	cmp	r3, #0
   13070:	bne	1305c <__assert_fail@plt+0xd10>
   13074:	bl	15e70 <__assert_fail@plt+0x3b24>
   13078:	mov	r2, #5
   1307c:	ldr	r1, [pc, #728]	; 1335c <__assert_fail@plt+0x1010>
   13080:	mov	r0, #0
   13084:	bl	11e6c <dcgettext@plt>
   13088:	ldr	r8, [sp, #136]	; 0x88
   1308c:	asr	r3, r7, #31
   13090:	mov	r2, r7
   13094:	asr	r9, r8, #31
   13098:	mov	sl, #1
   1309c:	mov	r7, #0
   130a0:	strd	r2, [sp]
   130a4:	strd	r8, [sp, #8]
   130a8:	str	sl, [sp, #16]
   130ac:	ldr	r1, [pc, #684]	; 13360 <__assert_fail@plt+0x1014>
   130b0:	mov	r2, r0
   130b4:	mov	r0, r6
   130b8:	bl	14ecc <__assert_fail@plt+0x2b80>
   130bc:	mov	r2, #5
   130c0:	ldr	r1, [pc, #668]	; 13364 <__assert_fail@plt+0x1018>
   130c4:	mov	r0, r7
   130c8:	bl	11e6c <dcgettext@plt>
   130cc:	ldr	r3, [sp, #144]	; 0x90
   130d0:	mov	r2, r5
   130d4:	mov	r8, r3
   130d8:	asr	r9, r3, #31
   130dc:	asr	r3, r5, #31
   130e0:	strd	r8, [sp, #8]
   130e4:	strd	r2, [sp]
   130e8:	str	sl, [sp, #16]
   130ec:	ldr	r1, [pc, #628]	; 13368 <__assert_fail@plt+0x101c>
   130f0:	mov	r8, #0
   130f4:	mov	r9, #0
   130f8:	mov	r2, r0
   130fc:	mov	r0, r6
   13100:	bl	14ecc <__assert_fail@plt+0x2b80>
   13104:	mov	r2, #5
   13108:	ldr	r1, [pc, #604]	; 1336c <__assert_fail@plt+0x1020>
   1310c:	mov	r0, r7
   13110:	bl	11e6c <dcgettext@plt>
   13114:	ldr	r2, [sp, #140]	; 0x8c
   13118:	strd	r8, [sp]
   1311c:	str	r7, [sp, #16]
   13120:	asr	r3, r2, #31
   13124:	ldr	r1, [pc, #580]	; 13370 <__assert_fail@plt+0x1024>
   13128:	strd	r2, [sp, #8]
   1312c:	mov	r2, r0
   13130:	mov	r0, r6
   13134:	bl	14ecc <__assert_fail@plt+0x2b80>
   13138:	mov	r0, r7
   1313c:	mov	r2, #5
   13140:	ldr	r1, [pc, #556]	; 13374 <__assert_fail@plt+0x1028>
   13144:	bl	11e6c <dcgettext@plt>
   13148:	ldr	r2, [sp, #148]	; 0x94
   1314c:	str	r7, [sp, #16]
   13150:	strd	r8, [sp]
   13154:	asr	r3, r2, #31
   13158:	ldr	r1, [pc, #536]	; 13378 <__assert_fail@plt+0x102c>
   1315c:	strd	r2, [sp, #8]
   13160:	mov	r2, r0
   13164:	mov	r0, r6
   13168:	bl	14ecc <__assert_fail@plt+0x2b80>
   1316c:	mov	r0, r7
   13170:	mov	r2, #5
   13174:	ldr	r1, [pc, #512]	; 1337c <__assert_fail@plt+0x1030>
   13178:	bl	11e6c <dcgettext@plt>
   1317c:	ldr	r3, [sp, #152]	; 0x98
   13180:	strd	r8, [sp]
   13184:	str	r7, [sp, #16]
   13188:	str	r7, [sp, #12]
   1318c:	str	r3, [sp, #8]
   13190:	ldr	r1, [pc, #488]	; 13380 <__assert_fail@plt+0x1034>
   13194:	mov	r2, r0
   13198:	mov	r0, r6
   1319c:	bl	14ecc <__assert_fail@plt+0x2b80>
   131a0:	b	12d14 <__assert_fail@plt+0x9c8>
   131a4:	mov	r0, #0
   131a8:	bl	12298 <scols_new_iter@plt>
   131ac:	mov	r1, #0
   131b0:	mov	r5, #0
   131b4:	add	sl, sp, #104	; 0x68
   131b8:	mov	r8, r0
   131bc:	mov	r0, r7
   131c0:	bl	12214 <scols_table_get_line@plt>
   131c4:	str	r4, [sp, #24]
   131c8:	mov	r9, r0
   131cc:	b	13230 <__assert_fail@plt+0xee4>
   131d0:	mov	r1, r5
   131d4:	mov	r0, r9
   131d8:	bl	120c4 <scols_line_get_cell@plt>
   131dc:	mov	r6, r0
   131e0:	mov	r0, r5
   131e4:	bl	14e4c <__assert_fail@plt+0x2b00>
   131e8:	ldr	r3, [pc, #276]	; 13304 <__assert_fail@plt+0xfb8>
   131ec:	add	r3, r3, r0, lsl #5
   131f0:	mov	r0, r6
   131f4:	ldr	r6, [r3, #8]
   131f8:	bl	12154 <scols_cell_get_data@plt>
   131fc:	subs	r4, r0, #0
   13200:	beq	1322c <__assert_fail@plt+0xee0>
   13204:	mov	r0, r6
   13208:	bl	1207c <strlen@plt>
   1320c:	mov	r3, #32
   13210:	str	r3, [sp]
   13214:	str	r4, [sp, #4]
   13218:	mov	r2, r6
   1321c:	ldr	r1, [pc, #352]	; 13384 <__assert_fail@plt+0x1038>
   13220:	rsb	r3, r0, #35	; 0x23
   13224:	mov	r0, #1
   13228:	bl	12178 <__printf_chk@plt>
   1322c:	add	r5, r5, #1
   13230:	mov	r2, sl
   13234:	mov	r1, r8
   13238:	mov	r0, r7
   1323c:	bl	120e8 <scols_table_next_column@plt>
   13240:	cmp	r0, #0
   13244:	beq	131d0 <__assert_fail@plt+0xe84>
   13248:	cmp	r9, #0
   1324c:	ldr	r4, [sp, #24]
   13250:	beq	13288 <__assert_fail@plt+0xf3c>
   13254:	mov	r0, r9
   13258:	bl	121d8 <scols_line_get_userdata@plt>
   1325c:	subs	r5, r0, #0
   13260:	beq	13288 <__assert_fail@plt+0xf3c>
   13264:	mov	r2, #5
   13268:	ldr	r1, [pc, #280]	; 13388 <__assert_fail@plt+0x103c>
   1326c:	mov	r0, #0
   13270:	bl	11e6c <dcgettext@plt>
   13274:	mov	r1, r0
   13278:	mov	r0, #1
   1327c:	bl	12178 <__printf_chk@plt>
   13280:	mov	r0, r5
   13284:	bl	12244 <scols_print_table@plt>
   13288:	mov	r0, r8
   1328c:	bl	11db8 <scols_free_iter@plt>
   13290:	b	12d2c <__assert_fail@plt+0x9e0>
   13294:	ldr	r3, [sp, #36]	; 0x24
   13298:	cmp	r3, #0
   1329c:	beq	14540 <__assert_fail@plt+0x21f4>
   132a0:	add	sl, sp, #104	; 0x68
   132a4:	add	r3, sp, #100	; 0x64
   132a8:	str	r3, [sp, #24]
   132ac:	mov	r0, sl
   132b0:	ldr	r9, [r4, #292]	; 0x124
   132b4:	bl	15774 <__assert_fail@plt+0x3428>
   132b8:	ldr	r1, [sp, #24]
   132bc:	mvn	r0, #0
   132c0:	bl	15874 <__assert_fail@plt+0x3528>
   132c4:	cmp	r0, #0
   132c8:	ble	14320 <__assert_fail@plt+0x1fd4>
   132cc:	ldr	r0, [sp, #100]	; 0x64
   132d0:	mov	r5, #0
   132d4:	mov	r6, r5
   132d8:	mov	r3, r0
   132dc:	mov	r7, r5
   132e0:	mov	r8, r5
   132e4:	b	13420 <__assert_fail@plt+0x10d4>
   132e8:			; <UNDEFINED> instruction: 0x0002fcb8
   132ec:	muleq	r1, r0, r3
   132f0:	andeq	pc, r1, ip, asr r1	; <UNPREDICTABLE>
   132f4:	andeq	lr, r1, ip, lsr #7
   132f8:	andeq	lr, r1, r0, asr #7
   132fc:	andeq	r5, r1, r8, asr #5
   13300:	andeq	lr, r1, ip, lsl #9
   13304:	andeq	sp, r1, r8, ror #8
   13308:	andeq	sp, r1, r0, lsr #20
   1330c:	andeq	r0, r3, r0, lsr #32
   13310:	andeq	lr, r1, r8, lsl r4
   13314:	andeq	lr, r1, ip, lsl r4
   13318:	andeq	lr, r1, r4, lsr #8
   1331c:	andeq	lr, r1, ip, lsr #8
   13320:	andeq	r0, r3, r8, lsr #32
   13324:	strdeq	lr, [r1], -r8
   13328:	andeq	lr, r1, r4, asr #8
   1332c:	andeq	lr, r1, r0, asr r4
   13330:	muleq	r1, r0, sp
   13334:	andeq	r0, r3, r0, lsr r0
   13338:	andeq	lr, r1, r4, ror #8
   1333c:	andeq	r0, r3, r4, lsr r0
   13340:	andeq	lr, r1, r0, ror #9
   13344:	andeq	lr, r1, ip, ror #9
   13348:	andeq	lr, r1, r8, lsl #10
   1334c:	andeq	lr, r1, r0, lsl r5
   13350:	andeq	lr, r1, ip, lsr #10
   13354:	andeq	lr, r1, r4, lsr r5
   13358:	andeq	lr, r1, r8, asr r5
   1335c:	andeq	lr, r1, ip, ror r6
   13360:	muleq	r1, ip, r6
   13364:	andeq	lr, r1, r4, lsr #13
   13368:	andeq	lr, r1, r0, asr #13
   1336c:	andeq	lr, r1, r8, asr #13
   13370:	andeq	lr, r1, ip, ror #13
   13374:	strdeq	lr, [r1], -r4
   13378:	andeq	lr, r1, ip, lsl r7
   1337c:	andeq	lr, r1, r4, lsr #14
   13380:	andeq	lr, r1, r8, lsr r7
   13384:	andeq	lr, r1, r8, ror r7
   13388:	andeq	lr, r1, r8, lsl #15
   1338c:	andeq	lr, r1, r4, lsr #11
   13390:			; <UNDEFINED> instruction: 0x0001e5bc
   13394:	andeq	lr, r1, r4, asr #11
   13398:	ldrdeq	lr, [r1], -r8
   1339c:	andeq	lr, r1, r0, ror #11
   133a0:	andeq	lr, r1, ip, lsl #12
   133a4:	andeq	lr, r1, r4, lsl r6
   133a8:	andeq	lr, r1, r0, asr #12
   133ac:	andeq	lr, r1, r0, ror r5
   133b0:	andeq	lr, r1, r8, asr #12
   133b4:	andeq	lr, r1, r8, asr r6
   133b8:	andeq	lr, r1, r0, ror #12
   133bc:	andeq	lr, r1, r8, ror #12
   133c0:	andeq	lr, r1, r0, ror r6
   133c4:	muleq	r1, r0, r3
   133c8:			; <UNDEFINED> instruction: 0x0001e6b4
   133cc:	ldrdeq	lr, [r1], -r0
   133d0:	andeq	lr, r1, r8, lsl #11
   133d4:	andeq	lr, r1, r0, ror #5
   133d8:	andeq	lr, r1, ip, ror r5
   133dc:	andeq	lr, r1, r4, lsl #11
   133e0:	andeq	lr, r1, ip, lsl #11
   133e4:	andeq	r0, r3, r8, lsl r0
   133e8:	andeq	lr, r1, ip, asr #7
   133ec:	andeq	r0, r3, r0, lsl r0
   133f0:	muleq	r1, r4, r7
   133f4:	andeq	lr, r1, r4, lsr #7
   133f8:	strdeq	lr, [r1], -r0
   133fc:			; <UNDEFINED> instruction: 0x0001d8b8
   13400:	andeq	lr, r1, r0, asr #14
   13404:	ldr	r1, [r3, #40]	; 0x28
   13408:	adds	r7, r7, #1
   1340c:	ldr	r3, [r3, #44]	; 0x2c
   13410:	adc	r8, r8, #0
   13414:	adds	r5, r5, r1
   13418:	adc	r6, r6, r3
   1341c:	mov	r3, r2
   13420:	ldr	r2, [r3, #96]	; 0x60
   13424:	cmp	r2, #0
   13428:	bne	13404 <__assert_fail@plt+0x10b8>
   1342c:	bl	15bb4 <__assert_fail@plt+0x3868>
   13430:	mov	r2, #5
   13434:	ldr	r1, [pc, #-176]	; 1338c <__assert_fail@plt+0x1040>
   13438:	mov	r0, #0
   1343c:	bl	11e6c <dcgettext@plt>
   13440:	ldrd	r2, [sp, #104]	; 0x68
   13444:	mov	ip, #1
   13448:	str	ip, [sp, #16]
   1344c:	strd	r2, [sp, #8]
   13450:	stm	sp, {r7, r8}
   13454:	ldr	r1, [pc, #-204]	; 13390 <__assert_fail@plt+0x1044>
   13458:	mov	r7, #0
   1345c:	mov	r2, r0
   13460:	mov	r0, r9
   13464:	bl	14ecc <__assert_fail@plt+0x2b80>
   13468:	mov	r2, #5
   1346c:	ldr	r1, [pc, #-224]	; 13394 <__assert_fail@plt+0x1048>
   13470:	mov	r0, #0
   13474:	bl	11e6c <dcgettext@plt>
   13478:	mov	r8, r0
   1347c:	bl	120ac <getpagesize@plt>
   13480:	ldrd	r2, [sp, #120]	; 0x78
   13484:	mov	ip, #1
   13488:	mov	r1, r6
   1348c:	strd	r2, [sp, #8]
   13490:	str	ip, [sp, #16]
   13494:	mov	r6, #0
   13498:	asr	r3, r0, #31
   1349c:	mov	r2, r0
   134a0:	mov	r0, r5
   134a4:	bl	1d264 <__assert_fail@plt+0xaf18>
   134a8:	mov	r2, r8
   134ac:	mov	r5, #0
   134b0:	strd	r0, [sp]
   134b4:	ldr	r1, [pc, #-292]	; 13398 <__assert_fail@plt+0x104c>
   134b8:	mov	r0, r9
   134bc:	bl	14ecc <__assert_fail@plt+0x2b80>
   134c0:	mov	r2, #5
   134c4:	ldr	r1, [pc, #-304]	; 1339c <__assert_fail@plt+0x1050>
   134c8:	mov	r0, #0
   134cc:	bl	11e6c <dcgettext@plt>
   134d0:	ldrd	r2, [sp, #112]	; 0x70
   134d4:	ldr	r1, [pc, #-316]	; 133a0 <__assert_fail@plt+0x1054>
   134d8:	strd	r6, [sp]
   134dc:	strd	r2, [sp, #8]
   134e0:	str	r5, [sp, #16]
   134e4:	mov	r2, r0
   134e8:	mov	r0, r9
   134ec:	bl	14ecc <__assert_fail@plt+0x2b80>
   134f0:	mov	r2, #5
   134f4:	ldr	r1, [pc, #-344]	; 133a4 <__assert_fail@plt+0x1058>
   134f8:	mov	r0, r5
   134fc:	bl	11e6c <dcgettext@plt>
   13500:	ldrd	r2, [sp, #128]	; 0x80
   13504:	strd	r6, [sp]
   13508:	str	r5, [sp, #16]
   1350c:	strd	r2, [sp, #8]
   13510:	ldr	r1, [pc, #-368]	; 133a8 <__assert_fail@plt+0x105c>
   13514:	mov	r2, r0
   13518:	mov	r0, r9
   1351c:	bl	14ecc <__assert_fail@plt+0x2b80>
   13520:	ldr	r3, [sp, #28]
   13524:	cmp	r3, r5
   13528:	bne	13020 <__assert_fail@plt+0xcd4>
   1352c:	b	12d14 <__assert_fail@plt+0x9c8>
   13530:	add	r3, r3, #3
   13534:	cmp	r0, #67	; 0x43
   13538:	str	r3, [r4, #8]
   1353c:	bhi	14388 <__assert_fail@plt+0x203c>
   13540:	add	r0, r4, r0, lsl #2
   13544:	str	r1, [r0, #12]
   13548:	b	12bf8 <__assert_fail@plt+0x8ac>
   1354c:	ldr	r6, [sp, #24]
   13550:	ldr	r5, [sp, #40]	; 0x28
   13554:	add	r1, sp, #60	; 0x3c
   13558:	mov	r0, r6
   1355c:	str	r5, [sp, #52]	; 0x34
   13560:	str	r5, [sp, #56]	; 0x38
   13564:	str	r5, [sp, #64]	; 0x40
   13568:	bl	15e9c <__assert_fail@plt+0x3b50>
   1356c:	cmp	r0, #0
   13570:	ble	14358 <__assert_fail@plt+0x200c>
   13574:	ldr	r1, [pc, #-464]	; 133ac <__assert_fail@plt+0x1060>
   13578:	mov	r0, r8
   1357c:	bl	11d70 <scols_table_set_name@plt>
   13580:	ldr	r9, [pc, #-440]	; 133d0 <__assert_fail@plt+0x1084>
   13584:	ldr	r3, [sp, #24]
   13588:	ldr	r6, [sp, #60]	; 0x3c
   1358c:	mvn	r3, r3
   13590:	str	r3, [sp, #32]
   13594:	ldr	r3, [r6, #88]	; 0x58
   13598:	ldr	r2, [sp, #32]
   1359c:	cmp	r3, #0
   135a0:	movne	r3, #1
   135a4:	lsreq	r3, r2, #31
   135a8:	cmp	r3, #0
   135ac:	beq	1400c <__assert_fail@plt+0x1cc0>
   135b0:	mov	r1, #0
   135b4:	mov	r0, r8
   135b8:	bl	11fd4 <scols_table_new_line@plt>
   135bc:	subs	r7, r0, #0
   135c0:	beq	1450c <__assert_fail@plt+0x21c0>
   135c4:	ldr	r3, [sp, #52]	; 0x34
   135c8:	ldr	r0, [r6, #8]
   135cc:	cmp	r3, #0
   135d0:	beq	135e0 <__assert_fail@plt+0x1294>
   135d4:	ldr	r3, [r3, #8]
   135d8:	cmp	r3, r0
   135dc:	beq	135e8 <__assert_fail@plt+0x129c>
   135e0:	bl	11d58 <getpwuid@plt>
   135e4:	str	r0, [sp, #52]	; 0x34
   135e8:	ldr	r3, [sp, #56]	; 0x38
   135ec:	ldr	r0, [r6, #12]
   135f0:	cmp	r3, #0
   135f4:	beq	13604 <__assert_fail@plt+0x12b8>
   135f8:	ldr	r3, [r3, #8]
   135fc:	cmp	r3, r0
   13600:	beq	1360c <__assert_fail@plt+0x12c0>
   13604:	bl	1231c <getgrgid@plt>
   13608:	str	r0, [sp, #56]	; 0x38
   1360c:	ldr	r3, [r4, #8]
   13610:	cmp	r3, #0
   13614:	movne	r5, #0
   13618:	ldrne	sl, [pc, #-596]	; 133cc <__assert_fail@plt+0x1080>
   1361c:	beq	136c0 <__assert_fail@plt+0x1374>
   13620:	mov	r0, r5
   13624:	bl	14e4c <__assert_fail@plt+0x2b00>
   13628:	cmp	r0, #18
   1362c:	ldrls	pc, [pc, r0, lsl #2]
   13630:	b	136a8 <__assert_fail@plt+0x135c>
   13634:	muleq	r1, r8, r7
   13638:	andeq	r3, r1, r4, lsr #15
   1363c:	andeq	r3, r1, ip, ror #14
   13640:	andeq	r3, r1, r8, lsl #14
   13644:	andeq	r3, r1, r0, lsl #13
   13648:	ldrdeq	r3, [r1], -r4
   1364c:	andeq	r3, r1, r0, lsl #13
   13650:	andeq	r3, r1, r0, lsr #16
   13654:	andeq	r3, r1, r8, lsl r8
   13658:	andeq	r3, r1, r0, lsl r8
   1365c:	andeq	r3, r1, r8, lsl #16
   13660:	andeq	r3, r1, ip, ror #15
   13664:	ldrdeq	r3, [r1], -ip
   13668:	ldrdeq	r3, [r1], -r4
   1366c:			; <UNDEFINED> instruction: 0x000137b0
   13670:	andeq	r3, r1, ip, asr r7
   13674:	andeq	r3, r1, r8, lsr r7
   13678:	andeq	r3, r1, r0, lsr r7
   1367c:	andeq	r3, r1, r0, lsl #14
   13680:	ldr	r2, [r6, #16]
   13684:	mov	r1, r9
   13688:	add	r0, sp, #64	; 0x40
   1368c:	bl	14d20 <__assert_fail@plt+0x29d4>
   13690:	ldr	r2, [sp, #64]	; 0x40
   13694:	mov	r1, r5
   13698:	mov	r0, r7
   1369c:	bl	11d28 <scols_line_refer_data@plt>
   136a0:	cmp	r0, #0
   136a4:	bne	1437c <__assert_fail@plt+0x2030>
   136a8:	ldr	r3, [r4, #8]
   136ac:	add	r5, r5, #1
   136b0:	cmp	r5, r3
   136b4:	mov	r3, #0
   136b8:	str	r3, [sp, #64]	; 0x40
   136bc:	bcc	13620 <__assert_fail@plt+0x12d4>
   136c0:	ldr	r3, [sp, #24]
   136c4:	cmp	r3, #0
   136c8:	bge	1400c <__assert_fail@plt+0x1cc0>
   136cc:	ldr	r6, [r6, #88]	; 0x58
   136d0:	b	13594 <__assert_fail@plt+0x1248>
   136d4:	ldr	r1, [r6, #16]
   136d8:	add	r0, sp, #52	; 0x34
   136dc:	bl	15264 <__assert_fail@plt+0x2f18>
   136e0:	cmp	r0, #0
   136e4:	str	r0, [sp, #64]	; 0x40
   136e8:	beq	136a8 <__assert_fail@plt+0x135c>
   136ec:	mov	r2, r0
   136f0:	mov	r1, r5
   136f4:	mov	r0, r7
   136f8:	bl	11d28 <scols_line_refer_data@plt>
   136fc:	b	136a0 <__assert_fail@plt+0x1354>
   13700:	ldr	r2, [r6, #84]	; 0x54
   13704:	b	13684 <__assert_fail@plt+0x1338>
   13708:	ldrb	r3, [fp, #4]
   1370c:	tst	r3, #8
   13710:	beq	13828 <__assert_fail@plt+0x14dc>
   13714:	ldr	r2, [r6, #24]
   13718:	ldr	r1, [pc, #-832]	; 133e0 <__assert_fail@plt+0x1094>
   1371c:	add	r0, sp, #64	; 0x40
   13720:	lsl	r2, r2, #23
   13724:	lsr	r2, r2, #23
   13728:	bl	14d20 <__assert_fail@plt+0x29d4>
   1372c:	b	136a8 <__assert_fail@plt+0x135c>
   13730:	ldr	r2, [r6, #80]	; 0x50
   13734:	b	13684 <__assert_fail@plt+0x1338>
   13738:	ldrd	r0, [r6, #40]	; 0x28
   1373c:	orrs	r3, r0, r1
   13740:	beq	136a8 <__assert_fail@plt+0x135c>
   13744:	ldrb	r3, [fp, #4]
   13748:	mov	r1, r0
   1374c:	lsr	r3, r3, #4
   13750:	and	r0, r3, #3
   13754:	bl	1509c <__assert_fail@plt+0x2d50>
   13758:	b	136ec <__assert_fail@plt+0x13a0>
   1375c:	ldrd	r0, [r6, #32]
   13760:	orrs	r3, r0, r1
   13764:	beq	136a8 <__assert_fail@plt+0x135c>
   13768:	b	13744 <__assert_fail@plt+0x13f8>
   1376c:	ldr	r1, [r6, #8]
   13770:	add	r0, sp, #52	; 0x34
   13774:	bl	15264 <__assert_fail@plt+0x2f18>
   13778:	cmp	r0, #0
   1377c:	str	r0, [sp, #64]	; 0x40
   13780:	bne	13690 <__assert_fail@plt+0x1344>
   13784:	ldr	r2, [r6, #8]
   13788:	mov	r1, r9
   1378c:	add	r0, sp, #64	; 0x40
   13790:	bl	14d20 <__assert_fail@plt+0x29d4>
   13794:	b	13690 <__assert_fail@plt+0x1344>
   13798:	ldr	r2, [r6, #4]
   1379c:	ldr	r1, [pc, #-972]	; 133d8 <__assert_fail@plt+0x108c>
   137a0:	b	13688 <__assert_fail@plt+0x133c>
   137a4:	ldr	r2, [r6]
   137a8:	ldr	r1, [pc, #-980]	; 133dc <__assert_fail@plt+0x1090>
   137ac:	b	13688 <__assert_fail@plt+0x133c>
   137b0:	ldrd	r2, [r6, #64]	; 0x40
   137b4:	mov	r1, sl
   137b8:	add	r0, sp, #64	; 0x40
   137bc:	bl	14d20 <__assert_fail@plt+0x29d4>
   137c0:	ldr	r2, [sp, #64]	; 0x40
   137c4:	mov	r1, r5
   137c8:	mov	r0, r7
   137cc:	bl	11d28 <scols_line_refer_data@plt>
   137d0:	b	136a0 <__assert_fail@plt+0x1354>
   137d4:	ldrd	r2, [r6, #56]	; 0x38
   137d8:	b	137b4 <__assert_fail@plt+0x1468>
   137dc:	ldrd	r0, [r6, #48]	; 0x30
   137e0:	orrs	r3, r0, r1
   137e4:	beq	136a8 <__assert_fail@plt+0x135c>
   137e8:	b	13744 <__assert_fail@plt+0x13f8>
   137ec:	ldr	r1, [r6, #12]
   137f0:	add	r0, sp, #56	; 0x38
   137f4:	bl	15200 <__assert_fail@plt+0x2eb4>
   137f8:	cmp	r0, #0
   137fc:	str	r0, [sp, #64]	; 0x40
   13800:	bne	136ec <__assert_fail@plt+0x13a0>
   13804:	b	136a8 <__assert_fail@plt+0x135c>
   13808:	ldr	r2, [r6, #12]
   1380c:	b	13684 <__assert_fail@plt+0x1338>
   13810:	ldr	r1, [r6, #8]
   13814:	b	136d8 <__assert_fail@plt+0x138c>
   13818:	ldr	r2, [r6, #8]
   1381c:	b	13684 <__assert_fail@plt+0x1338>
   13820:	ldr	r1, [r6, #20]
   13824:	b	137f0 <__assert_fail@plt+0x14a4>
   13828:	mov	r0, #11
   1382c:	bl	11fb0 <malloc@plt>
   13830:	subs	r3, r0, #0
   13834:	beq	144fc <__assert_fail@plt+0x21b0>
   13838:	ldr	r0, [r6, #24]
   1383c:	mov	r1, r3
   13840:	str	r3, [sp, #64]	; 0x40
   13844:	lsl	r0, r0, #23
   13848:	lsr	r0, r0, #23
   1384c:	bl	17678 <__assert_fail@plt+0x532c>
   13850:	ldr	r2, [sp, #64]	; 0x40
   13854:	mov	r1, r5
   13858:	mov	r0, r7
   1385c:	bl	11d28 <scols_line_refer_data@plt>
   13860:	b	136a0 <__assert_fail@plt+0x1354>
   13864:	ldr	r6, [sp, #24]
   13868:	ldr	r3, [r4, #292]	; 0x124
   1386c:	mov	r5, #0
   13870:	add	r1, sp, #76	; 0x4c
   13874:	mov	r0, r6
   13878:	str	r5, [sp, #68]	; 0x44
   1387c:	str	r5, [sp, #72]	; 0x48
   13880:	str	r5, [sp, #80]	; 0x50
   13884:	str	r3, [sp, #36]	; 0x24
   13888:	bl	15874 <__assert_fail@plt+0x3528>
   1388c:	cmp	r0, r5
   13890:	ble	14334 <__assert_fail@plt+0x1fe8>
   13894:	ldr	r1, [pc, #-1260]	; 133b0 <__assert_fail@plt+0x1064>
   13898:	ldr	r0, [sp, #36]	; 0x24
   1389c:	bl	11d70 <scols_table_set_name@plt>
   138a0:	ldr	r3, [sp, #24]
   138a4:	ldr	sl, [sp, #76]	; 0x4c
   138a8:	mvn	r3, r3
   138ac:	str	r3, [sp, #32]
   138b0:	ldr	r3, [sl, #96]	; 0x60
   138b4:	ldr	r2, [sp, #32]
   138b8:	cmp	r3, #0
   138bc:	movne	r3, #1
   138c0:	lsreq	r3, r2, #31
   138c4:	cmp	r3, #0
   138c8:	beq	144dc <__assert_fail@plt+0x2190>
   138cc:	mov	r1, #0
   138d0:	ldr	r0, [sp, #36]	; 0x24
   138d4:	bl	11fd4 <scols_table_new_line@plt>
   138d8:	subs	r6, r0, #0
   138dc:	beq	1450c <__assert_fail@plt+0x21c0>
   138e0:	mov	r5, #0
   138e4:	ldr	r3, [r4, #8]
   138e8:	cmp	r5, r3
   138ec:	bcs	13bf4 <__assert_fail@plt+0x18a8>
   138f0:	mov	r0, r5
   138f4:	bl	14e4c <__assert_fail@plt+0x2b00>
   138f8:	cmp	r0, #26
   138fc:	ldrls	pc, [pc, r0, lsl #2]
   13900:	b	13998 <__assert_fail@plt+0x164c>
   13904:	andeq	r3, r1, r8, lsr sl
   13908:	andeq	r3, r1, ip, lsr #20
   1390c:	andeq	r3, r1, r8, lsl #20
   13910:	andeq	r3, r1, r0, ror #19
   13914:	andeq	r3, r1, r0, ror r9
   13918:	andeq	r3, r1, r8, lsr #19
   1391c:	andeq	r3, r1, r0, ror r9
   13920:	muleq	r1, r4, fp
   13924:	andeq	r3, r1, ip, lsl #23
   13928:	andeq	r3, r1, r4, lsl #23
   1392c:	andeq	r3, r1, ip, ror fp
   13930:	andeq	r3, r1, r4, asr #23
   13934:			; <UNDEFINED> instruction: 0x00013bb4
   13938:	muleq	r1, r8, r9
   1393c:	muleq	r1, r8, r9
   13940:	muleq	r1, r8, r9
   13944:	muleq	r1, r8, r9
   13948:	muleq	r1, r8, r9
   1394c:	muleq	r1, r8, r9
   13950:	andeq	r3, r1, ip, asr #23
   13954:	andeq	r3, r1, r8, asr fp
   13958:	andeq	r3, r1, ip, lsr #21
   1395c:	muleq	r1, ip, sl
   13960:	andeq	r3, r1, r4, ror sl
   13964:	andeq	r3, r1, r0, asr sl
   13968:	andeq	r3, r1, r4, asr #20
   1396c:	andeq	r3, r1, r8, asr #19
   13970:	ldr	r2, [sl, #16]
   13974:	ldr	r1, [pc, #-1452]	; 133d0 <__assert_fail@plt+0x1084>
   13978:	add	r0, sp, #80	; 0x50
   1397c:	bl	14d20 <__assert_fail@plt+0x29d4>
   13980:	ldr	r2, [sp, #80]	; 0x50
   13984:	mov	r1, r5
   13988:	mov	r0, r6
   1398c:	bl	11d28 <scols_line_refer_data@plt>
   13990:	cmp	r0, #0
   13994:	bne	1437c <__assert_fail@plt+0x2030>
   13998:	mov	r3, #0
   1399c:	add	r5, r5, #1
   139a0:	str	r3, [sp, #80]	; 0x50
   139a4:	b	138e4 <__assert_fail@plt+0x1598>
   139a8:	ldr	r1, [sl, #16]
   139ac:	add	r0, sp, #68	; 0x44
   139b0:	bl	15264 <__assert_fail@plt+0x2f18>
   139b4:	cmp	r0, #0
   139b8:	mov	r2, r0
   139bc:	str	r0, [sp, #80]	; 0x50
   139c0:	bne	13984 <__assert_fail@plt+0x1638>
   139c4:	b	13998 <__assert_fail@plt+0x164c>
   139c8:	ldr	r2, [sl, #76]	; 0x4c
   139cc:	ldr	r1, [pc, #-1540]	; 133d0 <__assert_fail@plt+0x1084>
   139d0:	add	r0, sp, #80	; 0x50
   139d4:	bl	14d20 <__assert_fail@plt+0x29d4>
   139d8:	ldr	r2, [sp, #80]	; 0x50
   139dc:	b	13984 <__assert_fail@plt+0x1638>
   139e0:	ldrb	r3, [fp, #4]
   139e4:	tst	r3, #8
   139e8:	beq	14018 <__assert_fail@plt+0x1ccc>
   139ec:	ldr	r2, [sl, #24]
   139f0:	ldr	r1, [pc, #-1560]	; 133e0 <__assert_fail@plt+0x1094>
   139f4:	add	r0, sp, #80	; 0x50
   139f8:	lsl	r2, r2, #23
   139fc:	lsr	r2, r2, #23
   13a00:	bl	14d20 <__assert_fail@plt+0x29d4>
   13a04:	b	139d8 <__assert_fail@plt+0x168c>
   13a08:	ldr	r1, [sl, #8]
   13a0c:	add	r0, sp, #68	; 0x44
   13a10:	bl	15264 <__assert_fail@plt+0x2f18>
   13a14:	cmp	r0, #0
   13a18:	str	r0, [sp, #80]	; 0x50
   13a1c:	bne	139d8 <__assert_fail@plt+0x168c>
   13a20:	ldr	r2, [sl, #8]
   13a24:	ldr	r1, [pc, #-1628]	; 133d0 <__assert_fail@plt+0x1084>
   13a28:	b	139d0 <__assert_fail@plt+0x1684>
   13a2c:	ldr	r2, [sl]
   13a30:	ldr	r1, [pc, #-1628]	; 133dc <__assert_fail@plt+0x1090>
   13a34:	b	139d0 <__assert_fail@plt+0x1684>
   13a38:	ldr	r2, [sl, #4]
   13a3c:	ldr	r1, [pc, #-1644]	; 133d8 <__assert_fail@plt+0x108c>
   13a40:	b	139d0 <__assert_fail@plt+0x1684>
   13a44:	ldr	r2, [sl, #72]	; 0x48
   13a48:	ldr	r1, [pc, #-1664]	; 133d0 <__assert_fail@plt+0x1084>
   13a4c:	b	139d0 <__assert_fail@plt+0x1684>
   13a50:	ldr	r0, [sl, #72]	; 0x48
   13a54:	bl	1c0cc <__assert_fail@plt+0x9d80>
   13a58:	mov	r1, r5
   13a5c:	mov	r3, r0
   13a60:	mov	r2, r0
   13a64:	mov	r0, r6
   13a68:	str	r3, [sp, #80]	; 0x50
   13a6c:	bl	11d28 <scols_line_refer_data@plt>
   13a70:	b	13990 <__assert_fail@plt+0x1644>
   13a74:	ldrd	r0, [sl, #56]	; 0x38
   13a78:	orrs	r3, r0, r1
   13a7c:	beq	13998 <__assert_fail@plt+0x164c>
   13a80:	ldrb	r3, [fp, #4]
   13a84:	mov	r1, r0
   13a88:	lsr	r3, r3, #4
   13a8c:	and	r0, r3, #3
   13a90:	bl	1509c <__assert_fail@plt+0x2d50>
   13a94:	mov	r2, r0
   13a98:	b	13984 <__assert_fail@plt+0x1638>
   13a9c:	ldrd	r0, [sl, #48]	; 0x30
   13aa0:	orrs	r3, r0, r1
   13aa4:	beq	13998 <__assert_fail@plt+0x164c>
   13aa8:	b	13a80 <__assert_fail@plt+0x1734>
   13aac:	ldr	r0, [sp, #80]	; 0x50
   13ab0:	bl	11dc4 <free@plt>
   13ab4:	mov	r2, #5
   13ab8:	ldr	r1, [pc, #-1804]	; 133b4 <__assert_fail@plt+0x1068>
   13abc:	mov	r0, #0
   13ac0:	bl	11e6c <dcgettext@plt>
   13ac4:	bl	1207c <strlen@plt>
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #-1820]	; 133b8 <__assert_fail@plt+0x106c>
   13ad0:	mov	r7, r0
   13ad4:	mov	r0, #0
   13ad8:	bl	11e6c <dcgettext@plt>
   13adc:	bl	1207c <strlen@plt>
   13ae0:	mov	r2, #5
   13ae4:	ldr	r1, [pc, #-1840]	; 133bc <__assert_fail@plt+0x1070>
   13ae8:	mov	r9, r0
   13aec:	mov	r0, #0
   13af0:	bl	11e6c <dcgettext@plt>
   13af4:	bl	1207c <strlen@plt>
   13af8:	mov	r2, #5
   13afc:	ldr	r1, [pc, #-1860]	; 133c0 <__assert_fail@plt+0x1074>
   13b00:	add	r9, r7, r9
   13b04:	add	r9, r9, #4
   13b08:	mov	r8, r0
   13b0c:	mov	r0, #0
   13b10:	bl	11e6c <dcgettext@plt>
   13b14:	bl	1207c <strlen@plt>
   13b18:	add	r9, r9, r8
   13b1c:	add	r9, r9, r0
   13b20:	mov	r1, r9
   13b24:	mov	r0, #1
   13b28:	bl	11cf8 <calloc@plt>
   13b2c:	adds	r8, r9, #0
   13b30:	movne	r8, #1
   13b34:	cmp	r0, #0
   13b38:	movne	r8, #0
   13b3c:	cmp	r8, #0
   13b40:	mov	r7, r0
   13b44:	beq	14280 <__assert_fail@plt+0x1f34>
   13b48:	mov	r2, r9
   13b4c:	ldr	r1, [pc, #-1936]	; 133c4 <__assert_fail@plt+0x1078>
   13b50:	mov	r0, #1
   13b54:	bl	11ecc <err@plt>
   13b58:	ldrd	r2, [sl, #32]
   13b5c:	ldr	r1, [pc, #-1944]	; 133cc <__assert_fail@plt+0x1080>
   13b60:	add	r0, sp, #80	; 0x50
   13b64:	bl	14d20 <__assert_fail@plt+0x29d4>
   13b68:	ldr	r2, [sp, #80]	; 0x50
   13b6c:	mov	r1, r5
   13b70:	mov	r0, r6
   13b74:	bl	11d28 <scols_line_refer_data@plt>
   13b78:	b	13990 <__assert_fail@plt+0x1644>
   13b7c:	ldr	r2, [sl, #12]
   13b80:	b	13974 <__assert_fail@plt+0x1628>
   13b84:	ldr	r1, [sl, #8]
   13b88:	b	139ac <__assert_fail@plt+0x1660>
   13b8c:	ldr	r2, [sl, #8]
   13b90:	b	13974 <__assert_fail@plt+0x1628>
   13b94:	ldr	r1, [sl, #20]
   13b98:	add	r0, sp, #72	; 0x48
   13b9c:	bl	15200 <__assert_fail@plt+0x2eb4>
   13ba0:	cmp	r0, #0
   13ba4:	mov	r2, r0
   13ba8:	str	r0, [sp, #80]	; 0x50
   13bac:	bne	13984 <__assert_fail@plt+0x1638>
   13bb0:	b	13998 <__assert_fail@plt+0x164c>
   13bb4:	ldrd	r0, [sl, #64]	; 0x40
   13bb8:	orrs	r3, r0, r1
   13bbc:	beq	13998 <__assert_fail@plt+0x164c>
   13bc0:	b	13a80 <__assert_fail@plt+0x1734>
   13bc4:	ldr	r1, [sl, #12]
   13bc8:	b	13b98 <__assert_fail@plt+0x184c>
   13bcc:	ldrb	r3, [fp, #4]
   13bd0:	ldrd	r8, [sl, #40]	; 0x28
   13bd4:	ands	r0, r3, #4
   13bd8:	mov	r2, r8
   13bdc:	mov	r3, r9
   13be0:	beq	14040 <__assert_fail@plt+0x1cf4>
   13be4:	ldr	r1, [pc, #-2080]	; 133cc <__assert_fail@plt+0x1080>
   13be8:	add	r0, sp, #80	; 0x50
   13bec:	bl	14d20 <__assert_fail@plt+0x29d4>
   13bf0:	b	139d8 <__assert_fail@plt+0x168c>
   13bf4:	ldr	r3, [sp, #24]
   13bf8:	cmp	r3, #0
   13bfc:	bge	144dc <__assert_fail@plt+0x2190>
   13c00:	ldr	sl, [sl, #96]	; 0x60
   13c04:	b	138b0 <__assert_fail@plt+0x1564>
   13c08:	ldr	sl, [r4, #292]	; 0x124
   13c0c:	mov	r5, #0
   13c10:	ldr	r1, [pc, #-2128]	; 133c8 <__assert_fail@plt+0x107c>
   13c14:	mov	r0, sl
   13c18:	str	r5, [sp, #84]	; 0x54
   13c1c:	str	r5, [sp, #88]	; 0x58
   13c20:	str	r5, [sp, #92]	; 0x5c
   13c24:	str	r5, [sp, #96]	; 0x60
   13c28:	str	r5, [sp, #104]	; 0x68
   13c2c:	bl	11d70 <scols_table_set_name@plt>
   13c30:	add	r1, sp, #100	; 0x64
   13c34:	ldr	r0, [sp, #24]
   13c38:	bl	15bd4 <__assert_fail@plt+0x3888>
   13c3c:	cmp	r0, r5
   13c40:	ble	144b4 <__assert_fail@plt+0x2168>
   13c44:	ldr	r3, [sp, #24]
   13c48:	ldr	r7, [sp, #100]	; 0x64
   13c4c:	ldr	r9, [pc, #-2184]	; 133cc <__assert_fail@plt+0x1080>
   13c50:	mvn	r3, r3
   13c54:	str	r3, [sp, #32]
   13c58:	ldr	r3, [r7, #60]	; 0x3c
   13c5c:	ldr	r2, [sp, #32]
   13c60:	cmp	r3, #0
   13c64:	movne	r3, #1
   13c68:	lsreq	r3, r2, #31
   13c6c:	cmp	r3, #0
   13c70:	beq	14274 <__assert_fail@plt+0x1f28>
   13c74:	mov	r1, #0
   13c78:	mov	r0, sl
   13c7c:	bl	11fd4 <scols_table_new_line@plt>
   13c80:	subs	r5, r0, #0
   13c84:	beq	1450c <__assert_fail@plt+0x21c0>
   13c88:	ldr	r3, [r4, #8]
   13c8c:	cmp	r3, #0
   13c90:	movne	r6, #0
   13c94:	ldrne	r8, [pc, #-2252]	; 133d0 <__assert_fail@plt+0x1084>
   13c98:	beq	13d48 <__assert_fail@plt+0x19fc>
   13c9c:	mov	r0, r6
   13ca0:	bl	14e4c <__assert_fail@plt+0x2b00>
   13ca4:	cmp	r0, #28
   13ca8:	ldrls	pc, [pc, r0, lsl #2]
   13cac:	b	13d30 <__assert_fail@plt+0x19e4>
   13cb0:	muleq	r1, r4, lr
   13cb4:	andeq	r3, r1, r0, lsr #29
   13cb8:	andeq	r3, r1, r8, ror #28
   13cbc:	andeq	r3, r1, r0, ror #29
   13cc0:	ldrdeq	r3, [r1], -r4
   13cc4:			; <UNDEFINED> instruction: 0x00013eb8
   13cc8:	andeq	r3, r1, ip, lsr #29
   13ccc:	andeq	r3, r1, ip, asr #28
   13cd0:	andeq	r3, r1, r0, asr #28
   13cd4:	andeq	r3, r1, r4, lsr #28
   13cd8:	andeq	r3, r1, r0, lsl #28
   13cdc:	andeq	r3, r1, r4, ror #27
   13ce0:			; <UNDEFINED> instruction: 0x00013db0
   13ce4:	andeq	r3, r1, r0, lsr sp
   13ce8:	andeq	r3, r1, r0, lsr sp
   13cec:	andeq	r3, r1, r0, lsr sp
   13cf0:	andeq	r3, r1, r0, lsr sp
   13cf4:	andeq	r3, r1, r0, lsr sp
   13cf8:	andeq	r3, r1, r0, lsr sp
   13cfc:	andeq	r3, r1, r0, lsr sp
   13d00:	andeq	r3, r1, r0, lsr sp
   13d04:	andeq	r3, r1, r0, lsr sp
   13d08:	andeq	r3, r1, r0, lsr sp
   13d0c:	andeq	r3, r1, r0, lsr sp
   13d10:	andeq	r3, r1, r0, lsr sp
   13d14:	andeq	r3, r1, r0, lsr sp
   13d18:	andeq	r3, r1, r0, lsr sp
   13d1c:	andeq	r3, r1, ip, ror #26
   13d20:	andeq	r3, r1, r4, lsr #26
   13d24:	ldrd	r0, [r7, #40]	; 0x28
   13d28:	orrs	r3, r0, r1
   13d2c:	bne	13dbc <__assert_fail@plt+0x1a70>
   13d30:	ldr	r3, [r4, #8]
   13d34:	add	r6, r6, #1
   13d38:	cmp	r6, r3
   13d3c:	mov	r3, #0
   13d40:	str	r3, [sp, #104]	; 0x68
   13d44:	bcc	13c9c <__assert_fail@plt+0x1950>
   13d48:	ldr	r3, [sp, #24]
   13d4c:	cmp	r3, #0
   13d50:	blt	13d64 <__assert_fail@plt+0x1a18>
   13d54:	ldr	r3, [sp, #100]	; 0x64
   13d58:	ldrd	r2, [r3, #48]	; 0x30
   13d5c:	orrs	r3, r2, r3
   13d60:	bne	1404c <__assert_fail@plt+0x1d00>
   13d64:	ldr	r7, [r7, #60]	; 0x3c
   13d68:	b	13c58 <__assert_fail@plt+0x190c>
   13d6c:	ldrd	r2, [r7, #48]	; 0x30
   13d70:	mov	r1, r9
   13d74:	add	r0, sp, #104	; 0x68
   13d78:	bl	14d20 <__assert_fail@plt+0x29d4>
   13d7c:	ldr	r2, [sp, #104]	; 0x68
   13d80:	mov	r1, r6
   13d84:	mov	r0, r5
   13d88:	bl	11d28 <scols_line_refer_data@plt>
   13d8c:	cmp	r0, #0
   13d90:	beq	13d30 <__assert_fail@plt+0x19e4>
   13d94:	ldr	r1, [pc, #-2504]	; 133d4 <__assert_fail@plt+0x1088>
   13d98:	mov	r2, #5
   13d9c:	mov	r0, #0
   13da0:	bl	11e6c <dcgettext@plt>
   13da4:	mov	r1, r0
   13da8:	mov	r0, #1
   13dac:	bl	11ecc <err@plt>
   13db0:	ldrd	r0, [r7, #32]
   13db4:	orrs	r3, r0, r1
   13db8:	beq	13d30 <__assert_fail@plt+0x19e4>
   13dbc:	ldrb	r3, [fp, #4]
   13dc0:	mov	r1, r0
   13dc4:	lsr	r3, r3, #4
   13dc8:	and	r0, r3, #3
   13dcc:	bl	1509c <__assert_fail@plt+0x2d50>
   13dd0:	mov	r2, r0
   13dd4:	mov	r1, r6
   13dd8:	mov	r0, r5
   13ddc:	bl	11d28 <scols_line_refer_data@plt>
   13de0:	b	13d8c <__assert_fail@plt+0x1a40>
   13de4:	ldr	r1, [r7, #12]
   13de8:	add	r0, sp, #92	; 0x5c
   13dec:	bl	15200 <__assert_fail@plt+0x2eb4>
   13df0:	cmp	r0, #0
   13df4:	str	r0, [sp, #104]	; 0x68
   13df8:	bne	13dd0 <__assert_fail@plt+0x1a84>
   13dfc:	b	13d30 <__assert_fail@plt+0x19e4>
   13e00:	ldr	r2, [r7, #12]
   13e04:	mov	r1, r8
   13e08:	add	r0, sp, #104	; 0x68
   13e0c:	bl	14d20 <__assert_fail@plt+0x29d4>
   13e10:	ldr	r2, [sp, #104]	; 0x68
   13e14:	mov	r1, r6
   13e18:	mov	r0, r5
   13e1c:	bl	11d28 <scols_line_refer_data@plt>
   13e20:	b	13d8c <__assert_fail@plt+0x1a40>
   13e24:	ldr	r1, [r7, #8]
   13e28:	add	r0, sp, #84	; 0x54
   13e2c:	bl	15264 <__assert_fail@plt+0x2f18>
   13e30:	cmp	r0, #0
   13e34:	str	r0, [sp, #104]	; 0x68
   13e38:	bne	13dd0 <__assert_fail@plt+0x1a84>
   13e3c:	b	13d30 <__assert_fail@plt+0x19e4>
   13e40:	ldr	r2, [r7, #8]
   13e44:	mov	r1, r8
   13e48:	b	13e08 <__assert_fail@plt+0x1abc>
   13e4c:	ldr	r1, [r7, #20]
   13e50:	add	r0, sp, #96	; 0x60
   13e54:	bl	15200 <__assert_fail@plt+0x2eb4>
   13e58:	cmp	r0, #0
   13e5c:	str	r0, [sp, #104]	; 0x68
   13e60:	bne	13dd0 <__assert_fail@plt+0x1a84>
   13e64:	b	13d30 <__assert_fail@plt+0x19e4>
   13e68:	ldr	r1, [r7, #8]
   13e6c:	add	r0, sp, #84	; 0x54
   13e70:	bl	15264 <__assert_fail@plt+0x2f18>
   13e74:	cmp	r0, #0
   13e78:	str	r0, [sp, #104]	; 0x68
   13e7c:	bne	13d7c <__assert_fail@plt+0x1a30>
   13e80:	ldr	r2, [r7, #8]
   13e84:	mov	r1, r8
   13e88:	add	r0, sp, #104	; 0x68
   13e8c:	bl	14d20 <__assert_fail@plt+0x29d4>
   13e90:	b	13d7c <__assert_fail@plt+0x1a30>
   13e94:	ldr	r2, [r7, #4]
   13e98:	ldr	r1, [pc, #-2760]	; 133d8 <__assert_fail@plt+0x108c>
   13e9c:	b	13e08 <__assert_fail@plt+0x1abc>
   13ea0:	ldr	r2, [r7]
   13ea4:	ldr	r1, [pc, #-2768]	; 133dc <__assert_fail@plt+0x1090>
   13ea8:	b	13e08 <__assert_fail@plt+0x1abc>
   13eac:	ldr	r2, [r7, #20]
   13eb0:	mov	r1, r8
   13eb4:	b	13e08 <__assert_fail@plt+0x1abc>
   13eb8:	ldr	r1, [r7, #16]
   13ebc:	add	r0, sp, #88	; 0x58
   13ec0:	bl	15264 <__assert_fail@plt+0x2f18>
   13ec4:	cmp	r0, #0
   13ec8:	str	r0, [sp, #104]	; 0x68
   13ecc:	bne	13dd0 <__assert_fail@plt+0x1a84>
   13ed0:	b	13d30 <__assert_fail@plt+0x19e4>
   13ed4:	ldr	r2, [r7, #16]
   13ed8:	mov	r1, r8
   13edc:	b	13e08 <__assert_fail@plt+0x1abc>
   13ee0:	ldrb	r3, [fp, #4]
   13ee4:	tst	r3, #8
   13ee8:	beq	13f08 <__assert_fail@plt+0x1bbc>
   13eec:	ldr	r2, [r7, #24]
   13ef0:	ldr	r1, [pc, #-2840]	; 133e0 <__assert_fail@plt+0x1094>
   13ef4:	add	r0, sp, #104	; 0x68
   13ef8:	lsl	r2, r2, #23
   13efc:	lsr	r2, r2, #23
   13f00:	bl	14d20 <__assert_fail@plt+0x29d4>
   13f04:	b	13d7c <__assert_fail@plt+0x1a30>
   13f08:	mov	r0, #11
   13f0c:	bl	11fb0 <malloc@plt>
   13f10:	subs	r3, r0, #0
   13f14:	beq	144fc <__assert_fail@plt+0x21b0>
   13f18:	ldr	r0, [r7, #24]
   13f1c:	mov	r1, r3
   13f20:	str	r3, [sp, #104]	; 0x68
   13f24:	lsl	r0, r0, #23
   13f28:	lsr	r0, r0, #23
   13f2c:	bl	17678 <__assert_fail@plt+0x532c>
   13f30:	b	13d7c <__assert_fail@plt+0x1a30>
   13f34:	mov	r0, #2
   13f38:	b	12e1c <__assert_fail@plt+0xad0>
   13f3c:	ldr	r6, [pc, #-2912]	; 133e4 <__assert_fail@plt+0x1098>
   13f40:	mov	r2, #5
   13f44:	ldr	r1, [pc, #-2916]	; 133e8 <__assert_fail@plt+0x109c>
   13f48:	mov	r0, #0
   13f4c:	ldr	sl, [r6]
   13f50:	bl	11e6c <dcgettext@plt>
   13f54:	ldr	r3, [pc, #-2928]	; 133ec <__assert_fail@plt+0x10a0>
   13f58:	mov	r1, #1
   13f5c:	sub	r5, r4, #4
   13f60:	ldr	r3, [r3]
   13f64:	add	r4, r4, #56	; 0x38
   13f68:	ldr	r7, [pc, #-2944]	; 133f0 <__assert_fail@plt+0x10a4>
   13f6c:	ldr	r9, [pc, #-2944]	; 133f4 <__assert_fail@plt+0x10a8>
   13f70:	ldr	r8, [pc, #-2944]	; 133f8 <__assert_fail@plt+0x10ac>
   13f74:	mov	r2, r0
   13f78:	mov	r0, sl
   13f7c:	bl	121c0 <__fprintf_chk@plt>
   13f80:	ldr	r0, [r5, #4]!
   13f84:	cmp	r0, #0
   13f88:	beq	13fe0 <__assert_fail@plt+0x1c94>
   13f8c:	cmp	r0, #98	; 0x62
   13f90:	beq	13ff4 <__assert_fail@plt+0x1ca8>
   13f94:	ldr	r2, [pc, #-2976]	; 133fc <__assert_fail@plt+0x10b0>
   13f98:	b	13fac <__assert_fail@plt+0x1c60>
   13f9c:	add	r2, r2, #16
   13fa0:	ldr	r1, [r2, #12]
   13fa4:	cmp	r0, r1
   13fa8:	beq	13ff8 <__assert_fail@plt+0x1cac>
   13fac:	ldr	r3, [r2, #16]
   13fb0:	cmp	r3, #0
   13fb4:	bne	13f9c <__assert_fail@plt+0x1c50>
   13fb8:	sub	r3, r0, #33	; 0x21
   13fbc:	cmp	r3, #93	; 0x5d
   13fc0:	bhi	13fd8 <__assert_fail@plt+0x1c8c>
   13fc4:	mov	r3, r0
   13fc8:	mov	r2, r8
   13fcc:	mov	r1, #1
   13fd0:	ldr	r0, [r6]
   13fd4:	bl	121c0 <__fprintf_chk@plt>
   13fd8:	cmp	r4, r5
   13fdc:	bne	13f80 <__assert_fail@plt+0x1c34>
   13fe0:	ldr	r1, [r6]
   13fe4:	mov	r0, #10
   13fe8:	bl	12250 <fputc@plt>
   13fec:	mov	r0, #1
   13ff0:	bl	1204c <exit@plt>
   13ff4:	mov	r3, r9
   13ff8:	mov	r2, r7
   13ffc:	mov	r1, #1
   14000:	ldr	r0, [r6]
   14004:	bl	121c0 <__fprintf_chk@plt>
   14008:	b	13fd8 <__assert_fail@plt+0x1c8c>
   1400c:	ldr	r0, [sp, #60]	; 0x3c
   14010:	bl	16194 <__assert_fail@plt+0x3e48>
   14014:	b	12cfc <__assert_fail@plt+0x9b0>
   14018:	mov	r0, #11
   1401c:	bl	11fb0 <malloc@plt>
   14020:	subs	r1, r0, #0
   14024:	beq	144fc <__assert_fail@plt+0x21b0>
   14028:	ldr	r0, [sl, #24]
   1402c:	str	r1, [sp, #80]	; 0x50
   14030:	lsl	r0, r0, #23
   14034:	lsr	r0, r0, #23
   14038:	bl	17678 <__assert_fail@plt+0x532c>
   1403c:	b	139d8 <__assert_fail@plt+0x168c>
   14040:	bl	17850 <__assert_fail@plt+0x5504>
   14044:	str	r0, [sp, #80]	; 0x50
   14048:	b	139d8 <__assert_fail@plt+0x168c>
   1404c:	mov	r0, fp
   14050:	bl	14c5c <__assert_fail@plt+0x2910>
   14054:	mov	r1, #0
   14058:	mov	r8, r0
   1405c:	bl	11d7c <scols_table_enable_noheadings@plt>
   14060:	ldr	r1, [pc, #-3176]	; 13400 <__assert_fail@plt+0x10b4>
   14064:	mov	r0, r8
   14068:	bl	11d70 <scols_table_set_name@plt>
   1406c:	mov	r0, r8
   14070:	mov	r2, #4
   14074:	vldr	d0, [pc, #988]	; 14458 <__assert_fail@plt+0x210c>
   14078:	ldr	r1, [pc, #992]	; 14460 <__assert_fail@plt+0x2114>
   1407c:	bl	11d94 <scols_table_new_column@plt>
   14080:	cmp	r0, #0
   14084:	beq	14584 <__assert_fail@plt+0x2238>
   14088:	mov	r2, #4
   1408c:	vldr	d0, [pc, #964]	; 14458 <__assert_fail@plt+0x210c>
   14090:	ldr	r1, [pc, #972]	; 14464 <__assert_fail@plt+0x2118>
   14094:	mov	r0, r8
   14098:	bl	11d94 <scols_table_new_column@plt>
   1409c:	cmp	r0, #0
   140a0:	beq	1457c <__assert_fail@plt+0x2230>
   140a4:	mov	r2, #4
   140a8:	vldr	d0, [pc, #936]	; 14458 <__assert_fail@plt+0x210c>
   140ac:	ldr	r1, [pc, #948]	; 14468 <__assert_fail@plt+0x211c>
   140b0:	mov	r0, r8
   140b4:	bl	11d94 <scols_table_new_column@plt>
   140b8:	cmp	r0, #0
   140bc:	beq	14574 <__assert_fail@plt+0x2228>
   140c0:	mov	r2, #4
   140c4:	vldr	d0, [pc, #908]	; 14458 <__assert_fail@plt+0x210c>
   140c8:	ldr	r1, [pc, #924]	; 1446c <__assert_fail@plt+0x2120>
   140cc:	mov	r0, r8
   140d0:	bl	11d94 <scols_table_new_column@plt>
   140d4:	cmp	r0, #0
   140d8:	beq	1456c <__assert_fail@plt+0x2220>
   140dc:	mov	r2, #4
   140e0:	vldr	d0, [pc, #880]	; 14458 <__assert_fail@plt+0x210c>
   140e4:	ldr	r1, [pc, #900]	; 14470 <__assert_fail@plt+0x2124>
   140e8:	mov	r0, r8
   140ec:	bl	11d94 <scols_table_new_column@plt>
   140f0:	cmp	r0, #0
   140f4:	beq	14564 <__assert_fail@plt+0x2218>
   140f8:	mov	r2, #4
   140fc:	vldr	d0, [pc, #852]	; 14458 <__assert_fail@plt+0x210c>
   14100:	ldr	r1, [pc, #876]	; 14474 <__assert_fail@plt+0x2128>
   14104:	mov	r0, r8
   14108:	bl	11d94 <scols_table_new_column@plt>
   1410c:	cmp	r0, #0
   14110:	beq	1455c <__assert_fail@plt+0x2210>
   14114:	ldr	sl, [pc, #860]	; 14478 <__assert_fail@plt+0x212c>
   14118:	mov	r9, #0
   1411c:	str	fp, [sp, #24]
   14120:	str	r5, [sp, #28]
   14124:	str	r4, [sp, #32]
   14128:	b	14244 <__assert_fail@plt+0x1ef8>
   1412c:	mov	r1, #0
   14130:	mov	r0, r8
   14134:	ldr	fp, [ip, #56]	; 0x38
   14138:	bl	11fd4 <scols_table_new_line@plt>
   1413c:	lsl	r4, r9, #4
   14140:	add	r7, fp, r4
   14144:	subs	r5, r0, #0
   14148:	beq	1450c <__assert_fail@plt+0x21c0>
   1414c:	add	r6, sp, #104	; 0x68
   14150:	mov	r2, r9
   14154:	ldr	r1, [pc, #800]	; 1447c <__assert_fail@plt+0x2130>
   14158:	mov	r0, r6
   1415c:	bl	14d20 <__assert_fail@plt+0x29d4>
   14160:	ldr	r2, [sp, #104]	; 0x68
   14164:	mov	r1, #0
   14168:	mov	r0, r5
   1416c:	bl	11d28 <scols_line_refer_data@plt>
   14170:	cmp	r0, #0
   14174:	bne	1437c <__assert_fail@plt+0x2030>
   14178:	ldr	r2, [fp, r4]
   1417c:	mov	r1, sl
   14180:	mov	r0, r6
   14184:	bl	14d20 <__assert_fail@plt+0x29d4>
   14188:	ldr	r2, [sp, #104]	; 0x68
   1418c:	mov	r1, #1
   14190:	mov	r0, r5
   14194:	bl	11d28 <scols_line_refer_data@plt>
   14198:	cmp	r0, #0
   1419c:	bne	1437c <__assert_fail@plt+0x2030>
   141a0:	ldr	r2, [r7, #4]
   141a4:	mov	r1, sl
   141a8:	mov	r0, r6
   141ac:	bl	14d20 <__assert_fail@plt+0x29d4>
   141b0:	ldr	r2, [sp, #104]	; 0x68
   141b4:	mov	r1, #2
   141b8:	mov	r0, r5
   141bc:	bl	11d28 <scols_line_refer_data@plt>
   141c0:	cmp	r0, #0
   141c4:	bne	1437c <__assert_fail@plt+0x2030>
   141c8:	ldr	r2, [r7, #8]
   141cc:	mov	r1, sl
   141d0:	mov	r0, r6
   141d4:	bl	14d20 <__assert_fail@plt+0x29d4>
   141d8:	ldr	r2, [sp, #104]	; 0x68
   141dc:	mov	r1, #3
   141e0:	mov	r0, r5
   141e4:	bl	11d28 <scols_line_refer_data@plt>
   141e8:	cmp	r0, #0
   141ec:	bne	1437c <__assert_fail@plt+0x2030>
   141f0:	ldr	r2, [r7, #12]
   141f4:	mov	r1, sl
   141f8:	mov	r0, r6
   141fc:	bl	14d20 <__assert_fail@plt+0x29d4>
   14200:	ldr	r2, [sp, #104]	; 0x68
   14204:	mov	r1, #4
   14208:	mov	r0, r5
   1420c:	bl	11d28 <scols_line_refer_data@plt>
   14210:	cmp	r0, #0
   14214:	bne	1437c <__assert_fail@plt+0x2030>
   14218:	ldr	r0, [r7, #12]
   1421c:	bl	1c0cc <__assert_fail@plt+0x9d80>
   14220:	mov	r1, #5
   14224:	mov	r3, r0
   14228:	mov	r2, r0
   1422c:	mov	r0, r5
   14230:	str	r3, [sp, #104]	; 0x68
   14234:	bl	11d28 <scols_line_refer_data@plt>
   14238:	cmp	r0, #0
   1423c:	bne	1437c <__assert_fail@plt+0x2030>
   14240:	add	r9, r9, #1
   14244:	ldr	ip, [sp, #100]	; 0x64
   14248:	mov	r1, #0
   1424c:	ldrd	r2, [ip, #48]	; 0x30
   14250:	cmp	r1, r3
   14254:	cmpeq	r9, r2
   14258:	bcc	1412c <__assert_fail@plt+0x1de0>
   1425c:	ldr	r5, [sp, #28]
   14260:	mov	r1, r8
   14264:	mov	r0, r5
   14268:	ldr	fp, [sp, #24]
   1426c:	ldr	r4, [sp, #32]
   14270:	bl	11f74 <scols_line_set_userdata@plt>
   14274:	ldr	r0, [sp, #100]	; 0x64
   14278:	bl	15e70 <__assert_fail@plt+0x3b24>
   1427c:	b	12d14 <__assert_fail@plt+0x9c8>
   14280:	ldr	r3, [sl, #24]
   14284:	str	r0, [sp, #80]	; 0x50
   14288:	ands	r9, r3, #512	; 0x200
   1428c:	bne	143c8 <__assert_fail@plt+0x207c>
   14290:	ands	r2, r3, #1024	; 0x400
   14294:	bne	1438c <__assert_fail@plt+0x2040>
   14298:	ands	r7, r3, #2048	; 0x800
   1429c:	beq	143bc <__assert_fail@plt+0x2070>
   142a0:	mov	r9, r2
   142a4:	mov	r7, r2
   142a8:	mov	r2, #5
   142ac:	ldr	r1, [pc, #460]	; 14480 <__assert_fail@plt+0x2134>
   142b0:	mov	r0, #0
   142b4:	ldr	r8, [sp, #80]	; 0x50
   142b8:	bl	11e6c <dcgettext@plt>
   142bc:	add	r8, r8, r7
   142c0:	ldr	r1, [pc, #444]	; 14484 <__assert_fail@plt+0x2138>
   142c4:	mov	r2, r0
   142c8:	mov	r0, r8
   142cc:	bl	12274 <sprintf@plt>
   142d0:	ldr	r3, [sl, #24]
   142d4:	tst	r3, #4096	; 0x1000
   142d8:	add	r7, r7, r0
   142dc:	beq	139d8 <__assert_fail@plt+0x168c>
   142e0:	cmp	r9, #0
   142e4:	beq	142f8 <__assert_fail@plt+0x1fac>
   142e8:	ldr	r3, [sp, #80]	; 0x50
   142ec:	mov	r2, #44	; 0x2c
   142f0:	strb	r2, [r3, r7]
   142f4:	add	r7, r7, #1
   142f8:	ldr	r3, [sp, #80]	; 0x50
   142fc:	mov	r2, #5
   14300:	ldr	r1, [pc, #384]	; 14488 <__assert_fail@plt+0x213c>
   14304:	mov	r0, #0
   14308:	add	r7, r3, r7
   1430c:	bl	11e6c <dcgettext@plt>
   14310:	mov	r1, r0
   14314:	mov	r0, r7
   14318:	bl	11f38 <strcpy@plt>
   1431c:	b	139d8 <__assert_fail@plt+0x168c>
   14320:	mov	r5, #0
   14324:	mov	r6, r5
   14328:	mov	r7, r5
   1432c:	mov	r8, r5
   14330:	b	13430 <__assert_fail@plt+0x10e4>
   14334:	cmp	r6, r5
   14338:	blt	12d08 <__assert_fail@plt+0x9bc>
   1433c:	mov	r0, r5
   14340:	mov	r2, #5
   14344:	ldr	r1, [pc, #332]	; 14498 <__assert_fail@plt+0x214c>
   14348:	bl	11e6c <dcgettext@plt>
   1434c:	mov	r1, r6
   14350:	bl	120a0 <warnx@plt>
   14354:	b	12d08 <__assert_fail@plt+0x9bc>
   14358:	cmp	r6, #0
   1435c:	blt	12cfc <__assert_fail@plt+0x9b0>
   14360:	mov	r0, r5
   14364:	mov	r2, #5
   14368:	ldr	r1, [pc, #296]	; 14498 <__assert_fail@plt+0x214c>
   1436c:	bl	11e6c <dcgettext@plt>
   14370:	mov	r1, r6
   14374:	bl	120a0 <warnx@plt>
   14378:	b	12cfc <__assert_fail@plt+0x9b0>
   1437c:	mov	r2, #5
   14380:	ldr	r1, [pc, #260]	; 1448c <__assert_fail@plt+0x2140>
   14384:	b	13d9c <__assert_fail@plt+0x1a50>
   14388:	bl	151d8 <__assert_fail@plt+0x2e8c>
   1438c:	mov	r2, #5
   14390:	ldr	r1, [pc, #248]	; 14490 <__assert_fail@plt+0x2144>
   14394:	mov	r0, r9
   14398:	bl	11e6c <dcgettext@plt>
   1439c:	ldr	r1, [pc, #224]	; 14484 <__assert_fail@plt+0x2138>
   143a0:	mov	r2, r0
   143a4:	mov	r0, r7
   143a8:	bl	12274 <sprintf@plt>
   143ac:	ldr	r3, [sl, #24]
   143b0:	tst	r3, #2048	; 0x800
   143b4:	mov	r7, r0
   143b8:	bne	142a8 <__assert_fail@plt+0x1f5c>
   143bc:	tst	r3, #4096	; 0x1000
   143c0:	beq	139d8 <__assert_fail@plt+0x168c>
   143c4:	b	142f8 <__assert_fail@plt+0x1fac>
   143c8:	mov	r2, #5
   143cc:	ldr	r1, [pc, #192]	; 14494 <__assert_fail@plt+0x2148>
   143d0:	mov	r0, r8
   143d4:	bl	11e6c <dcgettext@plt>
   143d8:	ldr	r1, [pc, #164]	; 14484 <__assert_fail@plt+0x2138>
   143dc:	mov	r2, r0
   143e0:	mov	r0, r7
   143e4:	bl	12274 <sprintf@plt>
   143e8:	ldr	r3, [sl, #24]
   143ec:	tst	r3, #1024	; 0x400
   143f0:	mov	r7, r0
   143f4:	beq	144e8 <__assert_fail@plt+0x219c>
   143f8:	ldr	r3, [sp, #80]	; 0x50
   143fc:	mov	r2, #44	; 0x2c
   14400:	add	r9, r0, #1
   14404:	strb	r2, [r3, r0]
   14408:	ldr	r1, [pc, #128]	; 14490 <__assert_fail@plt+0x2144>
   1440c:	mov	r2, #5
   14410:	mov	r0, r8
   14414:	ldr	r7, [sp, #80]	; 0x50
   14418:	bl	11e6c <dcgettext@plt>
   1441c:	add	r7, r7, r9
   14420:	ldr	r1, [pc, #92]	; 14484 <__assert_fail@plt+0x2138>
   14424:	mov	r2, r0
   14428:	mov	r0, r7
   1442c:	bl	12274 <sprintf@plt>
   14430:	ldr	r3, [sl, #24]
   14434:	tst	r3, #2048	; 0x800
   14438:	add	r7, r0, r9
   1443c:	beq	144f0 <__assert_fail@plt+0x21a4>
   14440:	ldr	r3, [sp, #80]	; 0x50
   14444:	mov	r2, #44	; 0x2c
   14448:	mov	r9, #1
   1444c:	strb	r2, [r3, r7]
   14450:	add	r7, r7, r9
   14454:	b	142a8 <__assert_fail@plt+0x1f5c>
	...
   14460:	andeq	lr, r1, ip, asr #14
   14464:	andeq	lr, r1, r4, asr r7
   14468:	andeq	lr, r1, ip, asr r7
   1446c:	andeq	lr, r1, r4, ror #14
   14470:	strdeq	lr, [r1], -r0
   14474:	andeq	lr, r1, ip, ror #14
   14478:	andeq	lr, r1, r4, lsl #11
   1447c:	andeq	lr, r1, r4, ror r7
   14480:	andeq	lr, r1, r8, ror #12
   14484:	andeq	lr, r1, r4, asr #4
   14488:	andeq	lr, r1, r0, ror r6
   1448c:	muleq	r1, r0, r5
   14490:	andeq	lr, r1, r0, ror #12
   14494:	andeq	lr, r1, r8, asr r6
   14498:	andeq	lr, r1, r0, ror #10
   1449c:	muleq	r1, r0, r3
   144a0:			; <UNDEFINED> instruction: 0x0001e2b0
   144a4:	andeq	lr, r1, r0, lsr #9
   144a8:	andeq	r0, r0, r2, lsl r2
   144ac:	andeq	r0, r0, lr, lsl #4
   144b0:	andeq	r0, r0, sl, lsl #4
   144b4:	ldr	r6, [sp, #24]
   144b8:	cmp	r6, r5
   144bc:	blt	12d14 <__assert_fail@plt+0x9c8>
   144c0:	mov	r0, r5
   144c4:	mov	r2, #5
   144c8:	ldr	r1, [pc, #-56]	; 14498 <__assert_fail@plt+0x214c>
   144cc:	bl	11e6c <dcgettext@plt>
   144d0:	mov	r1, r6
   144d4:	bl	120a0 <warnx@plt>
   144d8:	b	12d14 <__assert_fail@plt+0x9c8>
   144dc:	ldr	r0, [sp, #76]	; 0x4c
   144e0:	bl	15bb4 <__assert_fail@plt+0x3868>
   144e4:	b	12d08 <__assert_fail@plt+0x9bc>
   144e8:	tst	r3, #2048	; 0x800
   144ec:	bne	14440 <__assert_fail@plt+0x20f4>
   144f0:	tst	r3, #4096	; 0x1000
   144f4:	bne	142e8 <__assert_fail@plt+0x1f9c>
   144f8:	b	139d8 <__assert_fail@plt+0x168c>
   144fc:	mov	r2, #11
   14500:	ldr	r1, [pc, #-108]	; 1449c <__assert_fail@plt+0x2150>
   14504:	mov	r0, #1
   14508:	bl	11ecc <err@plt>
   1450c:	ldr	r1, [pc, #-116]	; 144a0 <__assert_fail@plt+0x2154>
   14510:	mov	r2, #5
   14514:	bl	11e6c <dcgettext@plt>
   14518:	mov	r1, r0
   1451c:	mov	r0, #1
   14520:	bl	11ecc <err@plt>
   14524:	bl	11e84 <__stack_chk_fail@plt>
   14528:	ldr	r1, [pc, #-140]	; 144a4 <__assert_fail@plt+0x2158>
   1452c:	mov	r2, #5
   14530:	bl	11e6c <dcgettext@plt>
   14534:	mov	r1, r0
   14538:	mov	r0, #1
   1453c:	bl	12220 <errx@plt>
   14540:	ldr	r3, [sp, #28]
   14544:	cmp	r3, #0
   14548:	beq	12d14 <__assert_fail@plt+0x9c8>
   1454c:	add	r3, sp, #100	; 0x64
   14550:	add	sl, sp, #104	; 0x68
   14554:	str	r3, [sp, #24]
   14558:	b	13020 <__assert_fail@plt+0xcd4>
   1455c:	mov	r0, #532	; 0x214
   14560:	bl	151b8 <__assert_fail@plt+0x2e6c>
   14564:	ldr	r0, [pc, #-196]	; 144a8 <__assert_fail@plt+0x215c>
   14568:	bl	151b8 <__assert_fail@plt+0x2e6c>
   1456c:	mov	r0, #528	; 0x210
   14570:	bl	151b8 <__assert_fail@plt+0x2e6c>
   14574:	ldr	r0, [pc, #-208]	; 144ac <__assert_fail@plt+0x2160>
   14578:	bl	151b8 <__assert_fail@plt+0x2e6c>
   1457c:	mov	r0, #524	; 0x20c
   14580:	bl	151b8 <__assert_fail@plt+0x2e6c>
   14584:	ldr	r0, [pc, #-220]	; 144b0 <__assert_fail@plt+0x2164>
   14588:	bl	151b8 <__assert_fail@plt+0x2e6c>
   1458c:	mov	fp, #0
   14590:	mov	lr, #0
   14594:	pop	{r1}		; (ldr r1, [sp], #4)
   14598:	mov	r2, sp
   1459c:	push	{r2}		; (str r2, [sp, #-4]!)
   145a0:	push	{r0}		; (str r0, [sp, #-4]!)
   145a4:	ldr	ip, [pc, #16]	; 145bc <__assert_fail@plt+0x2270>
   145a8:	push	{ip}		; (str ip, [sp, #-4]!)
   145ac:	ldr	r0, [pc, #12]	; 145c0 <__assert_fail@plt+0x2274>
   145b0:	ldr	r3, [pc, #12]	; 145c4 <__assert_fail@plt+0x2278>
   145b4:	bl	11fbc <__libc_start_main@plt>
   145b8:	bl	122f8 <abort@plt>
   145bc:	andeq	sp, r1, r8, lsr r4
   145c0:	andeq	r2, r1, r8, asr r3
   145c4:	ldrdeq	sp, [r1], -r8
   145c8:	ldr	r3, [pc, #20]	; 145e4 <__assert_fail@plt+0x2298>
   145cc:	ldr	r2, [pc, #20]	; 145e8 <__assert_fail@plt+0x229c>
   145d0:	add	r3, pc, r3
   145d4:	ldr	r2, [r3, r2]
   145d8:	cmp	r2, #0
   145dc:	bxeq	lr
   145e0:	b	1201c <__gmon_start__@plt>
   145e4:	andeq	fp, r1, ip, ror #15
   145e8:	andeq	r0, r0, r8, lsr r2
   145ec:	ldr	r0, [pc, #24]	; 1460c <__assert_fail@plt+0x22c0>
   145f0:	ldr	r3, [pc, #24]	; 14610 <__assert_fail@plt+0x22c4>
   145f4:	cmp	r3, r0
   145f8:	bxeq	lr
   145fc:	ldr	r3, [pc, #16]	; 14614 <__assert_fail@plt+0x22c8>
   14600:	cmp	r3, #0
   14604:	bxeq	lr
   14608:	bx	r3
   1460c:	andeq	r0, r3, ip
   14610:	andeq	r0, r3, ip
   14614:	andeq	r0, r0, r0
   14618:	ldr	r0, [pc, #36]	; 14644 <__assert_fail@plt+0x22f8>
   1461c:	ldr	r1, [pc, #36]	; 14648 <__assert_fail@plt+0x22fc>
   14620:	sub	r1, r1, r0
   14624:	asr	r1, r1, #2
   14628:	add	r1, r1, r1, lsr #31
   1462c:	asrs	r1, r1, #1
   14630:	bxeq	lr
   14634:	ldr	r3, [pc, #16]	; 1464c <__assert_fail@plt+0x2300>
   14638:	cmp	r3, #0
   1463c:	bxeq	lr
   14640:	bx	r3
   14644:	andeq	r0, r3, ip
   14648:	andeq	r0, r3, ip
   1464c:	andeq	r0, r0, r0
   14650:	push	{r4, lr}
   14654:	ldr	r4, [pc, #24]	; 14674 <__assert_fail@plt+0x2328>
   14658:	ldrb	r3, [r4]
   1465c:	cmp	r3, #0
   14660:	popne	{r4, pc}
   14664:	bl	145ec <__assert_fail@plt+0x22a0>
   14668:	mov	r3, #1
   1466c:	strb	r3, [r4]
   14670:	pop	{r4, pc}
   14674:	andeq	r0, r3, r4, lsr #32
   14678:	b	14618 <__assert_fail@plt+0x22cc>
   1467c:	andeq	r0, r0, r0
   14680:	ldr	r3, [pc, #1276]	; 14b84 <__assert_fail@plt+0x2838>
   14684:	push	{r7, lr}
   14688:	mov	r2, #5
   1468c:	ldr	r4, [r3]
   14690:	sub	sp, sp, #8
   14694:	ldr	r1, [pc, #1260]	; 14b88 <__assert_fail@plt+0x283c>
   14698:	mov	r0, #0
   1469c:	bl	11e6c <dcgettext@plt>
   146a0:	mov	r1, r4
   146a4:	bl	122e0 <fputs@plt>
   146a8:	mov	r2, #5
   146ac:	ldr	r1, [pc, #1240]	; 14b8c <__assert_fail@plt+0x2840>
   146b0:	mov	r0, #0
   146b4:	bl	11e6c <dcgettext@plt>
   146b8:	ldr	r3, [pc, #1232]	; 14b90 <__assert_fail@plt+0x2844>
   146bc:	mov	r1, #1
   146c0:	ldr	r5, [pc, #1228]	; 14b94 <__assert_fail@plt+0x2848>
   146c4:	ldr	r3, [r3]
   146c8:	sub	r7, r5, #32
   146cc:	ldr	r6, [pc, #1220]	; 14b98 <__assert_fail@plt+0x284c>
   146d0:	ldr	r9, [pc, #1220]	; 14b9c <__assert_fail@plt+0x2850>
   146d4:	add	r8, r7, #448	; 0x1c0
   146d8:	mov	r2, r0
   146dc:	mov	r0, r4
   146e0:	bl	121c0 <__fprintf_chk@plt>
   146e4:	mov	r1, r4
   146e8:	mov	r0, #10
   146ec:	bl	12250 <fputc@plt>
   146f0:	mov	r2, #5
   146f4:	ldr	r1, [pc, #1188]	; 14ba0 <__assert_fail@plt+0x2854>
   146f8:	mov	r0, #0
   146fc:	bl	11e6c <dcgettext@plt>
   14700:	mov	r1, r4
   14704:	bl	122e0 <fputs@plt>
   14708:	mov	r1, r4
   1470c:	mov	r0, #10
   14710:	bl	12250 <fputc@plt>
   14714:	mov	r2, #5
   14718:	ldr	r1, [pc, #1156]	; 14ba4 <__assert_fail@plt+0x2858>
   1471c:	mov	r0, #0
   14720:	bl	11e6c <dcgettext@plt>
   14724:	mov	r1, r4
   14728:	bl	122e0 <fputs@plt>
   1472c:	mov	r2, #5
   14730:	ldr	r1, [pc, #1136]	; 14ba8 <__assert_fail@plt+0x285c>
   14734:	mov	r0, #0
   14738:	bl	11e6c <dcgettext@plt>
   1473c:	mov	r1, r4
   14740:	bl	122e0 <fputs@plt>
   14744:	mov	r2, #5
   14748:	ldr	r1, [pc, #1116]	; 14bac <__assert_fail@plt+0x2860>
   1474c:	mov	r0, #0
   14750:	bl	11e6c <dcgettext@plt>
   14754:	mov	r1, r4
   14758:	bl	122e0 <fputs@plt>
   1475c:	mov	r2, #5
   14760:	ldr	r1, [pc, #1096]	; 14bb0 <__assert_fail@plt+0x2864>
   14764:	mov	r0, #0
   14768:	bl	11e6c <dcgettext@plt>
   1476c:	mov	r1, r4
   14770:	bl	122e0 <fputs@plt>
   14774:	mov	r2, #5
   14778:	ldr	r1, [pc, #1076]	; 14bb4 <__assert_fail@plt+0x2868>
   1477c:	mov	r0, #0
   14780:	bl	11e6c <dcgettext@plt>
   14784:	mov	r1, r4
   14788:	bl	122e0 <fputs@plt>
   1478c:	mov	r2, #5
   14790:	ldr	r1, [pc, #1056]	; 14bb8 <__assert_fail@plt+0x286c>
   14794:	mov	r0, #0
   14798:	bl	11e6c <dcgettext@plt>
   1479c:	mov	r1, r4
   147a0:	bl	122e0 <fputs@plt>
   147a4:	mov	r2, #5
   147a8:	ldr	r1, [pc, #1036]	; 14bbc <__assert_fail@plt+0x2870>
   147ac:	mov	r0, #0
   147b0:	bl	11e6c <dcgettext@plt>
   147b4:	mov	r1, r4
   147b8:	bl	122e0 <fputs@plt>
   147bc:	mov	r2, #5
   147c0:	ldr	r1, [pc, #1016]	; 14bc0 <__assert_fail@plt+0x2874>
   147c4:	mov	r0, #0
   147c8:	bl	11e6c <dcgettext@plt>
   147cc:	mov	r1, r4
   147d0:	bl	122e0 <fputs@plt>
   147d4:	mov	r2, #5
   147d8:	ldr	r1, [pc, #996]	; 14bc4 <__assert_fail@plt+0x2878>
   147dc:	mov	r0, #0
   147e0:	bl	11e6c <dcgettext@plt>
   147e4:	mov	r1, r4
   147e8:	bl	122e0 <fputs@plt>
   147ec:	mov	r2, #5
   147f0:	ldr	r1, [pc, #976]	; 14bc8 <__assert_fail@plt+0x287c>
   147f4:	mov	r0, #0
   147f8:	bl	11e6c <dcgettext@plt>
   147fc:	mov	r1, r4
   14800:	bl	122e0 <fputs@plt>
   14804:	mov	r2, #5
   14808:	ldr	r1, [pc, #956]	; 14bcc <__assert_fail@plt+0x2880>
   1480c:	mov	r0, #0
   14810:	bl	11e6c <dcgettext@plt>
   14814:	mov	r1, r4
   14818:	bl	122e0 <fputs@plt>
   1481c:	mov	r2, #5
   14820:	ldr	r1, [pc, #936]	; 14bd0 <__assert_fail@plt+0x2884>
   14824:	mov	r0, #0
   14828:	bl	11e6c <dcgettext@plt>
   1482c:	mov	r1, r4
   14830:	bl	122e0 <fputs@plt>
   14834:	mov	r2, #5
   14838:	ldr	r1, [pc, #916]	; 14bd4 <__assert_fail@plt+0x2888>
   1483c:	mov	r0, #0
   14840:	bl	11e6c <dcgettext@plt>
   14844:	mov	r1, r4
   14848:	bl	122e0 <fputs@plt>
   1484c:	mov	r2, #5
   14850:	ldr	r1, [pc, #896]	; 14bd8 <__assert_fail@plt+0x288c>
   14854:	mov	r0, #0
   14858:	bl	11e6c <dcgettext@plt>
   1485c:	mov	r1, r4
   14860:	bl	122e0 <fputs@plt>
   14864:	mov	r2, #5
   14868:	ldr	r1, [pc, #876]	; 14bdc <__assert_fail@plt+0x2890>
   1486c:	mov	r0, #0
   14870:	bl	11e6c <dcgettext@plt>
   14874:	mov	r1, r4
   14878:	bl	122e0 <fputs@plt>
   1487c:	mov	r2, #5
   14880:	ldr	r1, [pc, #856]	; 14be0 <__assert_fail@plt+0x2894>
   14884:	mov	r0, #0
   14888:	bl	11e6c <dcgettext@plt>
   1488c:	mov	r1, r4
   14890:	bl	122e0 <fputs@plt>
   14894:	mov	r2, #5
   14898:	ldr	r1, [pc, #836]	; 14be4 <__assert_fail@plt+0x2898>
   1489c:	mov	r0, #0
   148a0:	bl	11e6c <dcgettext@plt>
   148a4:	mov	r1, r4
   148a8:	bl	122e0 <fputs@plt>
   148ac:	mov	r2, #5
   148b0:	ldr	r1, [pc, #816]	; 14be8 <__assert_fail@plt+0x289c>
   148b4:	mov	r0, #0
   148b8:	bl	11e6c <dcgettext@plt>
   148bc:	mov	r1, r4
   148c0:	bl	122e0 <fputs@plt>
   148c4:	mov	r2, #5
   148c8:	ldr	r1, [pc, #796]	; 14bec <__assert_fail@plt+0x28a0>
   148cc:	mov	r0, #0
   148d0:	bl	11e6c <dcgettext@plt>
   148d4:	mov	r1, r4
   148d8:	bl	122e0 <fputs@plt>
   148dc:	mov	r2, #5
   148e0:	ldr	r1, [pc, #776]	; 14bf0 <__assert_fail@plt+0x28a4>
   148e4:	mov	r0, #0
   148e8:	bl	11e6c <dcgettext@plt>
   148ec:	mov	r1, r4
   148f0:	bl	122e0 <fputs@plt>
   148f4:	mov	r1, r4
   148f8:	mov	r0, #10
   148fc:	bl	12250 <fputc@plt>
   14900:	mov	r2, #5
   14904:	ldr	r1, [pc, #744]	; 14bf4 <__assert_fail@plt+0x28a8>
   14908:	mov	r0, #0
   1490c:	bl	11e6c <dcgettext@plt>
   14910:	mov	r2, #5
   14914:	ldr	r1, [pc, #732]	; 14bf8 <__assert_fail@plt+0x28ac>
   14918:	mov	sl, r0
   1491c:	mov	r0, #0
   14920:	bl	11e6c <dcgettext@plt>
   14924:	ldr	r2, [pc, #720]	; 14bfc <__assert_fail@plt+0x28b0>
   14928:	mov	r3, sl
   1492c:	str	r2, [sp]
   14930:	ldr	r1, [pc, #712]	; 14c00 <__assert_fail@plt+0x28b4>
   14934:	ldr	r2, [pc, #712]	; 14c04 <__assert_fail@plt+0x28b8>
   14938:	str	r0, [sp, #4]
   1493c:	mov	r0, #1
   14940:	bl	12178 <__printf_chk@plt>
   14944:	mov	r2, #5
   14948:	ldr	r1, [pc, #696]	; 14c08 <__assert_fail@plt+0x28bc>
   1494c:	mov	r0, #0
   14950:	bl	11e6c <dcgettext@plt>
   14954:	mov	r1, #1
   14958:	mov	r2, r0
   1495c:	mov	r0, r4
   14960:	bl	121c0 <__fprintf_chk@plt>
   14964:	ldr	r1, [pc, #672]	; 14c0c <__assert_fail@plt+0x28c0>
   14968:	b	14974 <__assert_fail@plt+0x2628>
   1496c:	ldr	r6, [r5, #-32]	; 0xffffffe0
   14970:	ldr	r1, [r5, #-28]	; 0xffffffe4
   14974:	mov	r2, #5
   14978:	mov	r0, #0
   1497c:	bl	11e6c <dcgettext@plt>
   14980:	add	r5, r5, #32
   14984:	mov	r3, r6
   14988:	mov	r2, r9
   1498c:	mov	r1, #1
   14990:	str	r0, [sp]
   14994:	mov	r0, r4
   14998:	bl	121c0 <__fprintf_chk@plt>
   1499c:	cmp	r5, r8
   149a0:	bne	1496c <__assert_fail@plt+0x2620>
   149a4:	mov	r2, #5
   149a8:	ldr	r1, [pc, #608]	; 14c10 <__assert_fail@plt+0x28c4>
   149ac:	mov	r0, #0
   149b0:	bl	11e6c <dcgettext@plt>
   149b4:	ldr	r8, [pc, #600]	; 14c14 <__assert_fail@plt+0x28c8>
   149b8:	mov	r1, #1
   149bc:	ldr	r6, [pc, #596]	; 14c18 <__assert_fail@plt+0x28cc>
   149c0:	ldr	r9, [pc, #468]	; 14b9c <__assert_fail@plt+0x2850>
   149c4:	sub	r5, r8, #256	; 0x100
   149c8:	mov	r2, r0
   149cc:	mov	r0, r4
   149d0:	bl	121c0 <__fprintf_chk@plt>
   149d4:	ldr	r1, [pc, #576]	; 14c1c <__assert_fail@plt+0x28d0>
   149d8:	b	149e4 <__assert_fail@plt+0x2698>
   149dc:	ldr	r6, [r5, #608]	; 0x260
   149e0:	ldr	r1, [r5, #612]	; 0x264
   149e4:	mov	r2, #5
   149e8:	mov	r0, #0
   149ec:	bl	11e6c <dcgettext@plt>
   149f0:	add	r5, r5, #32
   149f4:	mov	r3, r6
   149f8:	mov	r2, r9
   149fc:	mov	r1, #1
   14a00:	str	r0, [sp]
   14a04:	mov	r0, r4
   14a08:	bl	121c0 <__fprintf_chk@plt>
   14a0c:	cmp	r5, r8
   14a10:	bne	149dc <__assert_fail@plt+0x2690>
   14a14:	mov	r2, #5
   14a18:	ldr	r1, [pc, #512]	; 14c20 <__assert_fail@plt+0x28d4>
   14a1c:	mov	r0, #0
   14a20:	bl	11e6c <dcgettext@plt>
   14a24:	ldr	r5, [pc, #504]	; 14c24 <__assert_fail@plt+0x28d8>
   14a28:	mov	r1, #1
   14a2c:	ldr	r6, [pc, #500]	; 14c28 <__assert_fail@plt+0x28dc>
   14a30:	ldr	r9, [pc, #356]	; 14b9c <__assert_fail@plt+0x2850>
   14a34:	add	r8, r5, #192	; 0xc0
   14a38:	mov	r2, r0
   14a3c:	mov	r0, r4
   14a40:	bl	121c0 <__fprintf_chk@plt>
   14a44:	ldr	r1, [pc, #480]	; 14c2c <__assert_fail@plt+0x28e0>
   14a48:	b	14a54 <__assert_fail@plt+0x2708>
   14a4c:	ldr	r6, [r5, #-32]	; 0xffffffe0
   14a50:	ldr	r1, [r5, #-28]	; 0xffffffe4
   14a54:	mov	r2, #5
   14a58:	mov	r0, #0
   14a5c:	bl	11e6c <dcgettext@plt>
   14a60:	add	r5, r5, #32
   14a64:	mov	r3, r6
   14a68:	mov	r2, r9
   14a6c:	mov	r1, #1
   14a70:	str	r0, [sp]
   14a74:	mov	r0, r4
   14a78:	bl	121c0 <__fprintf_chk@plt>
   14a7c:	cmp	r5, r8
   14a80:	bne	14a4c <__assert_fail@plt+0x2700>
   14a84:	mov	r2, #5
   14a88:	ldr	r1, [pc, #416]	; 14c30 <__assert_fail@plt+0x28e4>
   14a8c:	mov	r0, #0
   14a90:	bl	11e6c <dcgettext@plt>
   14a94:	mov	r1, #1
   14a98:	ldr	r8, [pc, #404]	; 14c34 <__assert_fail@plt+0x28e8>
   14a9c:	ldr	r5, [pc, #404]	; 14c38 <__assert_fail@plt+0x28ec>
   14aa0:	mov	r2, r0
   14aa4:	mov	r0, r4
   14aa8:	bl	121c0 <__fprintf_chk@plt>
   14aac:	mov	r2, #5
   14ab0:	ldr	r1, [pc, #388]	; 14c3c <__assert_fail@plt+0x28f0>
   14ab4:	mov	r0, #0
   14ab8:	bl	11e6c <dcgettext@plt>
   14abc:	ldr	r2, [pc, #216]	; 14b9c <__assert_fail@plt+0x2850>
   14ac0:	ldr	r3, [pc, #376]	; 14c40 <__assert_fail@plt+0x28f4>
   14ac4:	mov	r1, #1
   14ac8:	mov	r6, r2
   14acc:	str	r0, [sp]
   14ad0:	mov	r0, r4
   14ad4:	bl	121c0 <__fprintf_chk@plt>
   14ad8:	mov	r2, #5
   14adc:	ldr	r1, [pc, #352]	; 14c44 <__assert_fail@plt+0x28f8>
   14ae0:	mov	r0, #0
   14ae4:	bl	11e6c <dcgettext@plt>
   14ae8:	ldr	r3, [pc, #344]	; 14c48 <__assert_fail@plt+0x28fc>
   14aec:	mov	r2, r6
   14af0:	mov	r1, #1
   14af4:	str	r0, [sp]
   14af8:	mov	r0, r4
   14afc:	bl	121c0 <__fprintf_chk@plt>
   14b00:	mov	r2, #5
   14b04:	ldr	r1, [pc, #320]	; 14c4c <__assert_fail@plt+0x2900>
   14b08:	mov	r0, #0
   14b0c:	bl	11e6c <dcgettext@plt>
   14b10:	mov	r1, #1
   14b14:	mov	r2, r0
   14b18:	mov	r0, r4
   14b1c:	bl	121c0 <__fprintf_chk@plt>
   14b20:	ldr	r1, [pc, #296]	; 14c50 <__assert_fail@plt+0x2904>
   14b24:	mov	r2, #5
   14b28:	mov	r0, #0
   14b2c:	bl	11e6c <dcgettext@plt>
   14b30:	add	r7, r7, #32
   14b34:	mov	r3, r5
   14b38:	mov	r2, r6
   14b3c:	mov	r1, #1
   14b40:	str	r0, [sp]
   14b44:	mov	r0, r4
   14b48:	bl	121c0 <__fprintf_chk@plt>
   14b4c:	cmp	r7, r8
   14b50:	ldrne	r5, [r7, #928]	; 0x3a0
   14b54:	ldrne	r1, [r7, #932]	; 0x3a4
   14b58:	bne	14b24 <__assert_fail@plt+0x27d8>
   14b5c:	mov	r2, #5
   14b60:	ldr	r1, [pc, #236]	; 14c54 <__assert_fail@plt+0x2908>
   14b64:	mov	r0, #0
   14b68:	bl	11e6c <dcgettext@plt>
   14b6c:	ldr	r2, [pc, #228]	; 14c58 <__assert_fail@plt+0x290c>
   14b70:	mov	r1, r0
   14b74:	mov	r0, #1
   14b78:	bl	12178 <__printf_chk@plt>
   14b7c:	mov	r0, #0
   14b80:	bl	1204c <exit@plt>
   14b84:	andeq	r0, r3, ip, lsl r0
   14b88:	andeq	sp, r1, r0, asr #23
   14b8c:	andeq	sp, r1, ip, asr #23
   14b90:	andeq	r0, r3, r0, lsl r0
   14b94:	andeq	sp, r1, r8, lsl #9
   14b98:	andeq	sp, r1, r0, ror fp
   14b9c:	andeq	lr, r1, r8, asr #1
   14ba0:	ldrdeq	sp, [r1], -ip
   14ba4:	andeq	sp, r1, r4, lsl #24
   14ba8:	andeq	sp, r1, r8, lsl ip
   14bac:	andeq	sp, r1, r4, asr #24
   14bb0:	andeq	sp, r1, r8, ror #24
   14bb4:	andeq	sp, r1, r8, lsl #25
   14bb8:	ldrdeq	sp, [r1], -ip
   14bbc:	andeq	sp, r1, r0, lsr #26
   14bc0:	andeq	sp, r1, ip, lsr #26
   14bc4:	andeq	sp, r1, ip, asr sp
   14bc8:	muleq	r1, r0, sp
   14bcc:	ldrdeq	sp, [r1], -r8
   14bd0:	andeq	sp, r1, ip, lsr #28
   14bd4:	andeq	sp, r1, r0, ror #28
   14bd8:	andeq	sp, r1, r4, lsr #29
   14bdc:	ldrdeq	sp, [r1], -ip
   14be0:	andeq	sp, r1, r8, lsr #30
   14be4:	andeq	sp, r1, r4, ror pc
   14be8:	andeq	sp, r1, ip, lsr #31
   14bec:	strdeq	sp, [r1], -r0
   14bf0:	andeq	lr, r1, r0, lsr #32
   14bf4:	andeq	lr, r1, r0, rrx
   14bf8:	andeq	lr, r1, r4, ror r0
   14bfc:	andeq	lr, r1, r4, lsr #1
   14c00:	muleq	r1, r0, r0
   14c04:	andeq	lr, r1, r4, lsl #1
   14c08:	strheq	lr, [r1], -r4
   14c0c:	andeq	sp, r1, r0, ror #22
   14c10:	ldrdeq	lr, [r1], -r4
   14c14:	andeq	sp, r1, r8, ror #10
   14c18:	andeq	sp, r1, r4, lsl #23
   14c1c:	andeq	sp, r1, r4, ror fp
   14c20:	strdeq	lr, [r1], -r8
   14c24:	andeq	sp, r1, r8, lsr #12
   14c28:	muleq	r1, r8, fp
   14c2c:	andeq	sp, r1, ip, lsl #23
   14c30:	andeq	lr, r1, ip, lsl r1
   14c34:	andeq	sp, r1, r8, lsl #10
   14c38:			; <UNDEFINED> instruction: 0x0001dbb4
   14c3c:	andeq	lr, r1, r0, asr #2
   14c40:	andeq	lr, r1, r8, asr r1
   14c44:	andeq	lr, r1, r0, ror #2
   14c48:	andeq	lr, r1, ip, ror r1
   14c4c:	andeq	lr, r1, r4, lsl #3
   14c50:	andeq	sp, r1, r4, lsr #23
   14c54:	andeq	lr, r1, r4, lsr #3
   14c58:	andeq	lr, r1, r0, asr #3
   14c5c:	push	{r4, r5, r6, lr}
   14c60:	mov	r4, r0
   14c64:	bl	11f2c <scols_new_table@plt>
   14c68:	subs	r5, r0, #0
   14c6c:	beq	14d00 <__assert_fail@plt+0x29b4>
   14c70:	ldrb	r3, [r4, #4]
   14c74:	tst	r3, #1
   14c78:	bne	14cd4 <__assert_fail@plt+0x2988>
   14c7c:	ldr	r3, [r4]
   14c80:	sub	r3, r3, #1
   14c84:	cmp	r3, #4
   14c88:	ldrls	pc, [pc, r3, lsl #2]
   14c8c:	b	14cb0 <__assert_fail@plt+0x2964>
   14c90:	andeq	r4, r1, r4, asr #25
   14c94:			; <UNDEFINED> instruction: 0x00014cb8
   14c98:	strdeq	r4, [r1], -r0
   14c9c:	andeq	r4, r1, r4, lsr #25
   14ca0:	andeq	r4, r1, r0, ror #25
   14ca4:	mov	r1, #1
   14ca8:	mov	r0, r5
   14cac:	bl	121b4 <scols_table_enable_json@plt>
   14cb0:	mov	r0, r5
   14cb4:	pop	{r4, r5, r6, pc}
   14cb8:	ldr	r1, [pc, #88]	; 14d18 <__assert_fail@plt+0x29cc>
   14cbc:	mov	r0, r5
   14cc0:	bl	11e30 <scols_table_set_column_separator@plt>
   14cc4:	mov	r1, #1
   14cc8:	mov	r0, r5
   14ccc:	bl	11f50 <scols_table_enable_export@plt>
   14cd0:	b	14cb0 <__assert_fail@plt+0x2964>
   14cd4:	mov	r1, #1
   14cd8:	bl	11d7c <scols_table_enable_noheadings@plt>
   14cdc:	b	14c7c <__assert_fail@plt+0x2930>
   14ce0:	mov	r1, #1
   14ce4:	mov	r0, r5
   14ce8:	bl	11d7c <scols_table_enable_noheadings@plt>
   14cec:	b	14cb0 <__assert_fail@plt+0x2964>
   14cf0:	mov	r1, #1
   14cf4:	mov	r0, r5
   14cf8:	bl	11de8 <scols_table_enable_raw@plt>
   14cfc:	b	14cb0 <__assert_fail@plt+0x2964>
   14d00:	ldr	r1, [pc, #20]	; 14d1c <__assert_fail@plt+0x29d0>
   14d04:	mov	r2, #5
   14d08:	bl	11e6c <dcgettext@plt>
   14d0c:	mov	r1, r0
   14d10:	mov	r0, #1
   14d14:	bl	11ecc <err@plt>
   14d18:	ldrdeq	sp, [r1], -r8
   14d1c:	andeq	lr, r1, ip, asr #3
   14d20:	push	{r1, r2, r3}
   14d24:	push	{r4, lr}
   14d28:	sub	sp, sp, #12
   14d2c:	ldr	r4, [pc, #84]	; 14d88 <__assert_fail@plt+0x2a3c>
   14d30:	add	ip, sp, #24
   14d34:	mov	r3, ip
   14d38:	ldr	r1, [r4]
   14d3c:	ldr	r2, [sp, #20]
   14d40:	str	r1, [sp, #4]
   14d44:	mov	r1, #1
   14d48:	str	ip, [sp]
   14d4c:	bl	1210c <__vasprintf_chk@plt>
   14d50:	cmp	r0, #0
   14d54:	blt	14d78 <__assert_fail@plt+0x2a2c>
   14d58:	ldr	r2, [sp, #4]
   14d5c:	ldr	r3, [r4]
   14d60:	cmp	r2, r3
   14d64:	bne	14d84 <__assert_fail@plt+0x2a38>
   14d68:	add	sp, sp, #12
   14d6c:	pop	{r4, lr}
   14d70:	add	sp, sp, #12
   14d74:	bx	lr
   14d78:	ldr	r1, [pc, #12]	; 14d8c <__assert_fail@plt+0x2a40>
   14d7c:	mov	r0, #1
   14d80:	bl	11ecc <err@plt>
   14d84:	bl	11e84 <__stack_chk_fail@plt>
   14d88:			; <UNDEFINED> instruction: 0x0002fcb8
   14d8c:	andeq	lr, r1, ip, ror #3
   14d90:	push	{r4, r5, r6, r7, r8, lr}
   14d94:	mov	r7, r0
   14d98:	ldr	r5, [pc, #152]	; 14e38 <__assert_fail@plt+0x2aec>
   14d9c:	ldr	r8, [pc, #152]	; 14e3c <__assert_fail@plt+0x2af0>
   14da0:	mov	r6, r1
   14da4:	mov	r4, #0
   14da8:	b	14db0 <__assert_fail@plt+0x2a64>
   14dac:	ldr	r5, [r8, r4, lsl #5]
   14db0:	mov	r2, r6
   14db4:	mov	r1, r5
   14db8:	mov	r0, r7
   14dbc:	bl	120dc <strncasecmp@plt>
   14dc0:	cmp	r0, #0
   14dc4:	bne	14dd4 <__assert_fail@plt+0x2a88>
   14dc8:	ldrsb	r3, [r5, r6]
   14dcc:	cmp	r3, #0
   14dd0:	beq	14e00 <__assert_fail@plt+0x2ab4>
   14dd4:	add	r4, r4, #1
   14dd8:	cmp	r4, #34	; 0x22
   14ddc:	bne	14dac <__assert_fail@plt+0x2a60>
   14de0:	ldr	r1, [pc, #88]	; 14e40 <__assert_fail@plt+0x2af4>
   14de4:	mov	r2, #5
   14de8:	mov	r0, #0
   14dec:	bl	11e6c <dcgettext@plt>
   14df0:	mov	r1, r7
   14df4:	bl	120a0 <warnx@plt>
   14df8:	mvn	r0, #0
   14dfc:	pop	{r4, r5, r6, r7, r8, pc}
   14e00:	cmp	r4, #12
   14e04:	bls	14e24 <__assert_fail@plt+0x2ad8>
   14e08:	ldr	r3, [pc, #52]	; 14e44 <__assert_fail@plt+0x2af8>
   14e0c:	ldr	r2, [r3]
   14e10:	cmp	r2, r4
   14e14:	bhi	14e2c <__assert_fail@plt+0x2ae0>
   14e18:	ldr	r3, [r3, #4]
   14e1c:	cmp	r3, r4
   14e20:	bcc	14e2c <__assert_fail@plt+0x2ae0>
   14e24:	mov	r0, r4
   14e28:	pop	{r4, r5, r6, r7, r8, pc}
   14e2c:	mov	r2, #5
   14e30:	ldr	r1, [pc, #16]	; 14e48 <__assert_fail@plt+0x2afc>
   14e34:	b	14de8 <__assert_fail@plt+0x2a9c>
   14e38:	andeq	sp, r1, r0, ror fp
   14e3c:	andeq	sp, r1, r8, ror #8
   14e40:	andeq	lr, r1, r4, lsr r2
   14e44:	andeq	r0, r3, r8, lsr #32
   14e48:	andeq	lr, r1, r4, lsl #4
   14e4c:	cmp	r0, #0
   14e50:	push	{r4, lr}
   14e54:	blt	14ea0 <__assert_fail@plt+0x2b54>
   14e58:	ldr	r3, [pc, #84]	; 14eb4 <__assert_fail@plt+0x2b68>
   14e5c:	ldr	r2, [r3, #8]
   14e60:	cmp	r0, r2
   14e64:	bcs	14e8c <__assert_fail@plt+0x2b40>
   14e68:	add	r3, r3, r0, lsl #2
   14e6c:	ldr	r0, [r3, #12]
   14e70:	cmp	r0, #33	; 0x21
   14e74:	popls	{r4, pc}
   14e78:	ldr	r3, [pc, #56]	; 14eb8 <__assert_fail@plt+0x2b6c>
   14e7c:	mov	r2, #240	; 0xf0
   14e80:	ldr	r1, [pc, #52]	; 14ebc <__assert_fail@plt+0x2b70>
   14e84:	ldr	r0, [pc, #52]	; 14ec0 <__assert_fail@plt+0x2b74>
   14e88:	bl	1234c <__assert_fail@plt>
   14e8c:	ldr	r3, [pc, #36]	; 14eb8 <__assert_fail@plt+0x2b6c>
   14e90:	mov	r2, #239	; 0xef
   14e94:	ldr	r1, [pc, #32]	; 14ebc <__assert_fail@plt+0x2b70>
   14e98:	ldr	r0, [pc, #36]	; 14ec4 <__assert_fail@plt+0x2b78>
   14e9c:	bl	1234c <__assert_fail@plt>
   14ea0:	ldr	r3, [pc, #16]	; 14eb8 <__assert_fail@plt+0x2b6c>
   14ea4:	mov	r2, #238	; 0xee
   14ea8:	ldr	r1, [pc, #12]	; 14ebc <__assert_fail@plt+0x2b70>
   14eac:	ldr	r0, [pc, #20]	; 14ec8 <__assert_fail@plt+0x2b7c>
   14eb0:	bl	1234c <__assert_fail@plt>
   14eb4:	andeq	r0, r3, r8, lsr #32
   14eb8:	andeq	sp, r1, r8, lsr #17
   14ebc:	andeq	lr, r1, r8, asr #4
   14ec0:	andeq	lr, r1, r0, lsl #5
   14ec4:	andeq	lr, r1, r8, ror #4
   14ec8:	andeq	lr, r1, ip, asr r2
   14ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	vpush	{d8-d9}
   14ed4:	ldr	r3, [pc, #420]	; 15080 <__assert_fail@plt+0x2d34>
   14ed8:	mov	sl, r1
   14edc:	mov	r1, #0
   14ee0:	sub	sp, sp, #12
   14ee4:	ldr	r3, [r3]
   14ee8:	mov	fp, r2
   14eec:	str	r3, [sp, #4]
   14ef0:	ldr	r8, [sp, #80]	; 0x50
   14ef4:	bl	11fd4 <scols_table_new_line@plt>
   14ef8:	subs	r7, r0, #0
   14efc:	beq	1505c <__assert_fail@plt+0x2d10>
   14f00:	ldr	r5, [pc, #380]	; 15084 <__assert_fail@plt+0x2d38>
   14f04:	ldr	r3, [r5, #8]
   14f08:	cmp	r3, #0
   14f0c:	beq	14fb0 <__assert_fail@plt+0x2c64>
   14f10:	vldr	d9, [pc, #352]	; 15078 <__assert_fail@plt+0x2d2c>
   14f14:	mov	r4, #0
   14f18:	ldr	r9, [pc, #360]	; 15088 <__assert_fail@plt+0x2d3c>
   14f1c:	mov	r6, r4
   14f20:	mov	r0, r4
   14f24:	str	r6, [sp]
   14f28:	bl	14e4c <__assert_fail@plt+0x2b00>
   14f2c:	sub	r0, r0, #29
   14f30:	cmp	r0, #4
   14f34:	ldrls	pc, [pc, r0, lsl #2]
   14f38:	b	14fa0 <__assert_fail@plt+0x2c54>
   14f3c:	andeq	r5, r1, r8, lsl r0
   14f40:	ldrdeq	r4, [r1], -r0
   14f44:	andeq	r5, r1, r0, lsl r0
   14f48:	andeq	r4, r1, r4, ror #31
   14f4c:	andeq	r4, r1, r0, asr pc
   14f50:	cmp	r8, #0
   14f54:	beq	1502c <__assert_fail@plt+0x2ce0>
   14f58:	ldrd	r0, [sp, #64]	; 0x40
   14f5c:	bl	1d1f0 <__assert_fail@plt+0xaea4>
   14f60:	vmov	d8, r0, r1
   14f64:	ldrd	r0, [sp, #72]	; 0x48
   14f68:	bl	1d1f0 <__assert_fail@plt+0xaea4>
   14f6c:	vmov	d7, r0, r1
   14f70:	ldr	r1, [pc, #276]	; 1508c <__assert_fail@plt+0x2d40>
   14f74:	mov	r0, sp
   14f78:	vdiv.f64	d7, d8, d7
   14f7c:	vmul.f64	d7, d7, d9
   14f80:	vmov	r2, r3, d7
   14f84:	bl	14d20 <__assert_fail@plt+0x29d4>
   14f88:	ldr	r2, [sp]
   14f8c:	mov	r1, r4
   14f90:	mov	r0, r7
   14f94:	bl	11d28 <scols_line_refer_data@plt>
   14f98:	cmp	r0, #0
   14f9c:	bne	15040 <__assert_fail@plt+0x2cf4>
   14fa0:	ldr	r3, [r5, #8]
   14fa4:	add	r4, r4, #1
   14fa8:	cmp	r3, r4
   14fac:	bhi	14f20 <__assert_fail@plt+0x2bd4>
   14fb0:	ldr	r3, [pc, #200]	; 15080 <__assert_fail@plt+0x2d34>
   14fb4:	ldr	r2, [sp, #4]
   14fb8:	ldr	r3, [r3]
   14fbc:	cmp	r2, r3
   14fc0:	bne	15074 <__assert_fail@plt+0x2d28>
   14fc4:	add	sp, sp, #12
   14fc8:	vpop	{d8-d9}
   14fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd0:	mov	r2, fp
   14fd4:	mov	r1, r4
   14fd8:	mov	r0, r7
   14fdc:	bl	11d1c <scols_line_set_data@plt>
   14fe0:	b	14f98 <__assert_fail@plt+0x2c4c>
   14fe4:	cmp	r8, #0
   14fe8:	beq	1502c <__assert_fail@plt+0x2ce0>
   14fec:	ldrd	r2, [sp, #64]	; 0x40
   14ff0:	mov	r1, r9
   14ff4:	mov	r0, sp
   14ff8:	bl	14d20 <__assert_fail@plt+0x29d4>
   14ffc:	ldr	r2, [sp]
   15000:	mov	r1, r4
   15004:	mov	r0, r7
   15008:	bl	11d28 <scols_line_refer_data@plt>
   1500c:	b	14f98 <__assert_fail@plt+0x2c4c>
   15010:	ldrd	r2, [sp, #72]	; 0x48
   15014:	b	14ff0 <__assert_fail@plt+0x2ca4>
   15018:	mov	r2, sl
   1501c:	mov	r1, r4
   15020:	mov	r0, r7
   15024:	bl	11d1c <scols_line_set_data@plt>
   15028:	b	14f98 <__assert_fail@plt+0x2c4c>
   1502c:	ldr	r2, [pc, #92]	; 15090 <__assert_fail@plt+0x2d44>
   15030:	mov	r1, r4
   15034:	mov	r0, r7
   15038:	bl	11d1c <scols_line_set_data@plt>
   1503c:	b	14f98 <__assert_fail@plt+0x2c4c>
   15040:	ldr	r1, [pc, #76]	; 15094 <__assert_fail@plt+0x2d48>
   15044:	mov	r2, #5
   15048:	mov	r0, #0
   1504c:	bl	11e6c <dcgettext@plt>
   15050:	mov	r1, r0
   15054:	mov	r0, #1
   15058:	bl	11ecc <err@plt>
   1505c:	ldr	r1, [pc, #52]	; 15098 <__assert_fail@plt+0x2d4c>
   15060:	mov	r2, #5
   15064:	bl	11e6c <dcgettext@plt>
   15068:	mov	r1, r0
   1506c:	mov	r0, #1
   15070:	bl	11ecc <err@plt>
   15074:	bl	11e84 <__stack_chk_fail@plt>
   15078:	andeq	r0, r0, r0
   1507c:	subsmi	r0, r9, r0
   15080:			; <UNDEFINED> instruction: 0x0002fcb8
   15084:	andeq	r0, r3, r8, lsr #32
   15088:	ldrdeq	lr, [r1], -r0
   1508c:	ldrdeq	lr, [r1], -r8
   15090:	ldrdeq	lr, [r1], -r4
   15094:	andeq	lr, r1, r0, ror #5
   15098:			; <UNDEFINED> instruction: 0x0001e2b0
   1509c:	push	{r4, r5, r6, lr}
   150a0:	sub	sp, sp, #128	; 0x80
   150a4:	ldr	r5, [pc, #252]	; 151a8 <__assert_fail@plt+0x2e5c>
   150a8:	mov	r6, #64	; 0x40
   150ac:	mov	r4, r0
   150b0:	ldr	r3, [r5]
   150b4:	str	r1, [sp, #12]
   150b8:	add	r0, sp, #60	; 0x3c
   150bc:	mov	r2, r6
   150c0:	mov	r1, #0
   150c4:	str	r3, [sp, #124]	; 0x7c
   150c8:	bl	1213c <memset@plt>
   150cc:	cmp	r4, #2
   150d0:	beq	15100 <__assert_fail@plt+0x2db4>
   150d4:	cmp	r4, #3
   150d8:	beq	15180 <__assert_fail@plt+0x2e34>
   150dc:	cmp	r4, #1
   150e0:	beq	15164 <__assert_fail@plt+0x2e18>
   150e4:	ldr	r1, [pc, #192]	; 151ac <__assert_fail@plt+0x2e60>
   150e8:	mov	r2, #5
   150ec:	mov	r0, #0
   150f0:	bl	11e6c <dcgettext@plt>
   150f4:	mov	r1, r0
   150f8:	mov	r0, #1
   150fc:	bl	12220 <errx@plt>
   15100:	add	r1, sp, #16
   15104:	add	r0, sp, #12
   15108:	bl	11eb4 <localtime_r@plt>
   1510c:	add	r1, sp, #60	; 0x3c
   15110:	add	r0, sp, #16
   15114:	bl	121a8 <asctime_r@plt>
   15118:	add	r0, sp, #60	; 0x3c
   1511c:	bl	1207c <strlen@plt>
   15120:	add	r3, sp, #60	; 0x3c
   15124:	sub	r0, r0, #1
   15128:	ldrsb	r3, [r3, r0]
   1512c:	cmp	r3, #10
   15130:	addeq	r2, sp, #60	; 0x3c
   15134:	moveq	r3, #0
   15138:	strbeq	r3, [r2, r0]
   1513c:	add	r0, sp, #60	; 0x3c
   15140:	bl	11e78 <strdup@plt>
   15144:	cmp	r0, #0
   15148:	beq	15198 <__assert_fail@plt+0x2e4c>
   1514c:	ldr	r2, [sp, #124]	; 0x7c
   15150:	ldr	r3, [r5]
   15154:	cmp	r2, r3
   15158:	bne	151a4 <__assert_fail@plt+0x2e58>
   1515c:	add	sp, sp, #128	; 0x80
   15160:	pop	{r4, r5, r6, pc}
   15164:	str	r6, [sp]
   15168:	add	r3, sp, #60	; 0x3c
   1516c:	mov	r2, #0
   15170:	ldr	r1, [pc, #56]	; 151b0 <__assert_fail@plt+0x2e64>
   15174:	add	r0, sp, #12
   15178:	bl	191f0 <__assert_fail@plt+0x6ea4>
   1517c:	b	1513c <__assert_fail@plt+0x2df0>
   15180:	mov	r3, r6
   15184:	add	r2, sp, #60	; 0x3c
   15188:	mov	r1, #39	; 0x27
   1518c:	add	r0, sp, #12
   15190:	bl	19078 <__assert_fail@plt+0x6d2c>
   15194:	b	1513c <__assert_fail@plt+0x2df0>
   15198:	ldr	r1, [pc, #20]	; 151b4 <__assert_fail@plt+0x2e68>
   1519c:	mov	r0, #1
   151a0:	bl	11ecc <err@plt>
   151a4:	bl	11e84 <__stack_chk_fail@plt>
   151a8:			; <UNDEFINED> instruction: 0x0002fcb8
   151ac:	strdeq	lr, [r1], -ip
   151b0:	andeq	r0, r3, r4, asr #2
   151b4:	andeq	lr, r1, r4, lsl r3
   151b8:	mov	r3, r0
   151bc:	push	{r4, lr}
   151c0:	mov	r0, #1
   151c4:	ldr	r2, [pc, #4]	; 151d0 <__assert_fail@plt+0x2e84>
   151c8:	ldr	r1, [pc, #4]	; 151d4 <__assert_fail@plt+0x2e88>
   151cc:	bl	11ecc <err@plt>
   151d0:	andeq	lr, r1, r8, asr #4
   151d4:	andeq	lr, r1, ip, lsr #6
   151d8:	mov	r2, #5
   151dc:	ldr	r1, [pc, #24]	; 151fc <__assert_fail@plt+0x2eb0>
   151e0:	push	{r4, lr}
   151e4:	mov	r0, #0
   151e8:	bl	11e6c <dcgettext@plt>
   151ec:	mov	r2, #67	; 0x43
   151f0:	mov	r1, r0
   151f4:	mov	r0, #1
   151f8:	bl	12220 <errx@plt>
   151fc:	andeq	lr, r1, ip, asr #6
   15200:	push	{r4, lr}
   15204:	mov	r4, r0
   15208:	ldr	r0, [r0]
   1520c:	cmp	r0, #0
   15210:	beq	15220 <__assert_fail@plt+0x2ed4>
   15214:	ldr	r2, [r0, #8]
   15218:	cmp	r2, r1
   1521c:	beq	15234 <__assert_fail@plt+0x2ee8>
   15220:	mov	r0, r1
   15224:	bl	1231c <getgrgid@plt>
   15228:	cmp	r0, #0
   1522c:	str	r0, [r4]
   15230:	beq	15258 <__assert_fail@plt+0x2f0c>
   15234:	ldr	r0, [r0]
   15238:	cmp	r0, #0
   1523c:	beq	15258 <__assert_fail@plt+0x2f0c>
   15240:	bl	11e78 <strdup@plt>
   15244:	cmp	r0, #0
   15248:	popne	{r4, pc}
   1524c:	ldr	r1, [pc, #12]	; 15260 <__assert_fail@plt+0x2f14>
   15250:	mov	r0, #1
   15254:	bl	11ecc <err@plt>
   15258:	mov	r0, #0
   1525c:	pop	{r4, pc}
   15260:	andeq	lr, r1, r4, lsl r3
   15264:	push	{r4, lr}
   15268:	mov	r4, r0
   1526c:	ldr	r0, [r0]
   15270:	cmp	r0, #0
   15274:	beq	15284 <__assert_fail@plt+0x2f38>
   15278:	ldr	r2, [r0, #8]
   1527c:	cmp	r2, r1
   15280:	beq	15298 <__assert_fail@plt+0x2f4c>
   15284:	mov	r0, r1
   15288:	bl	11d58 <getpwuid@plt>
   1528c:	cmp	r0, #0
   15290:	str	r0, [r4]
   15294:	beq	152bc <__assert_fail@plt+0x2f70>
   15298:	ldr	r0, [r0]
   1529c:	cmp	r0, #0
   152a0:	beq	152bc <__assert_fail@plt+0x2f70>
   152a4:	bl	11e78 <strdup@plt>
   152a8:	cmp	r0, #0
   152ac:	popne	{r4, pc}
   152b0:	ldr	r1, [pc, #12]	; 152c4 <__assert_fail@plt+0x2f78>
   152b4:	mov	r0, #1
   152b8:	bl	11ecc <err@plt>
   152bc:	mov	r0, #0
   152c0:	pop	{r4, pc}
   152c4:	andeq	lr, r1, r4, lsl r3
   152c8:	ldr	r3, [pc, #292]	; 153f4 <__assert_fail@plt+0x30a8>
   152cc:	push	{r4, r5, r6, lr}
   152d0:	ldr	r4, [r3]
   152d4:	mov	r0, r4
   152d8:	bl	11f5c <__fpending@plt>
   152dc:	mov	r6, r0
   152e0:	mov	r0, r4
   152e4:	bl	11e00 <ferror@plt>
   152e8:	mov	r5, r0
   152ec:	mov	r0, r4
   152f0:	bl	121e4 <fclose@plt>
   152f4:	cmp	r5, #0
   152f8:	mov	r4, r0
   152fc:	bne	153a4 <__assert_fail@plt+0x3058>
   15300:	cmp	r0, #0
   15304:	beq	15320 <__assert_fail@plt+0x2fd4>
   15308:	bl	120d0 <__errno_location@plt>
   1530c:	cmp	r6, #0
   15310:	ldr	r3, [r0]
   15314:	bne	1537c <__assert_fail@plt+0x3030>
   15318:	cmp	r3, #9
   1531c:	bne	1537c <__assert_fail@plt+0x3030>
   15320:	ldr	r3, [pc, #208]	; 153f8 <__assert_fail@plt+0x30ac>
   15324:	ldr	r4, [r3]
   15328:	mov	r0, r4
   1532c:	bl	11f5c <__fpending@plt>
   15330:	mov	r6, r0
   15334:	mov	r0, r4
   15338:	bl	11e00 <ferror@plt>
   1533c:	mov	r5, r0
   15340:	mov	r0, r4
   15344:	bl	121e4 <fclose@plt>
   15348:	cmp	r5, #0
   1534c:	mov	r4, r0
   15350:	bne	153d8 <__assert_fail@plt+0x308c>
   15354:	cmp	r0, #0
   15358:	popeq	{r4, r5, r6, pc}
   1535c:	cmp	r6, #0
   15360:	bne	15374 <__assert_fail@plt+0x3028>
   15364:	bl	120d0 <__errno_location@plt>
   15368:	ldr	r3, [r0]
   1536c:	cmp	r3, #9
   15370:	popeq	{r4, r5, r6, pc}
   15374:	mov	r0, #1
   15378:	bl	11e24 <_exit@plt>
   1537c:	cmp	r3, #32
   15380:	beq	15320 <__assert_fail@plt+0x2fd4>
   15384:	cmp	r3, #0
   15388:	beq	153c0 <__assert_fail@plt+0x3074>
   1538c:	mov	r2, #5
   15390:	ldr	r1, [pc, #100]	; 153fc <__assert_fail@plt+0x30b0>
   15394:	mov	r0, #0
   15398:	bl	11e6c <dcgettext@plt>
   1539c:	bl	12238 <warn@plt>
   153a0:	b	15374 <__assert_fail@plt+0x3028>
   153a4:	bl	120d0 <__errno_location@plt>
   153a8:	cmp	r4, #0
   153ac:	ldr	r3, [r0]
   153b0:	bne	1537c <__assert_fail@plt+0x3030>
   153b4:	cmp	r3, #32
   153b8:	strne	r4, [r0]
   153bc:	beq	15320 <__assert_fail@plt+0x2fd4>
   153c0:	mov	r2, #5
   153c4:	ldr	r1, [pc, #48]	; 153fc <__assert_fail@plt+0x30b0>
   153c8:	mov	r0, #0
   153cc:	bl	11e6c <dcgettext@plt>
   153d0:	bl	120a0 <warnx@plt>
   153d4:	b	15374 <__assert_fail@plt+0x3028>
   153d8:	cmp	r0, #0
   153dc:	bne	15374 <__assert_fail@plt+0x3028>
   153e0:	bl	120d0 <__errno_location@plt>
   153e4:	ldr	r3, [r0]
   153e8:	cmp	r3, #32
   153ec:	strne	r4, [r0]
   153f0:	b	15374 <__assert_fail@plt+0x3028>
   153f4:	andeq	r0, r3, ip, lsl r0
   153f8:	andeq	r0, r3, r8, lsl r0
   153fc:	andeq	lr, r1, r4, lsl #7
   15400:	push	{r4, r5, r6, r7, r8, lr}
   15404:	ldrd	r4, [r0, #48]	; 0x30
   15408:	orrs	r3, r4, r5
   1540c:	popeq	{r4, r5, r6, r7, r8, pc}
   15410:	ldr	r7, [r0]
   15414:	cmp	r7, #0
   15418:	poplt	{r4, r5, r6, r7, r8, pc}
   1541c:	mov	r6, r0
   15420:	mov	r1, #16
   15424:	mov	r0, r4
   15428:	bl	11cf8 <calloc@plt>
   1542c:	cmp	r4, #0
   15430:	moveq	r4, #0
   15434:	clz	r3, r0
   15438:	lsr	r3, r3, #5
   1543c:	movne	r4, r3
   15440:	cmp	r4, #0
   15444:	mov	r8, r0
   15448:	streq	r0, [r6, #56]	; 0x38
   1544c:	beq	154d4 <__assert_fail@plt+0x3188>
   15450:	b	15578 <__assert_fail@plt+0x322c>
   15454:	mov	r3, #0
   15458:	mov	r2, #14
   1545c:	mov	r1, r4
   15460:	ldr	r0, [r6]
   15464:	bl	121fc <semctl@plt>
   15468:	cmp	r0, #0
   1546c:	str	r0, [r5, #4]
   15470:	blt	15518 <__assert_fail@plt+0x31cc>
   15474:	mov	r3, #0
   15478:	mov	r2, #15
   1547c:	mov	r1, r4
   15480:	ldr	r0, [r6]
   15484:	bl	121fc <semctl@plt>
   15488:	cmp	r0, #0
   1548c:	str	r0, [r5, #8]
   15490:	blt	15538 <__assert_fail@plt+0x31ec>
   15494:	mov	r3, #0
   15498:	mov	r2, #11
   1549c:	mov	r1, r4
   154a0:	ldr	r0, [r6]
   154a4:	bl	121fc <semctl@plt>
   154a8:	cmp	r0, #0
   154ac:	str	r0, [r5, #12]
   154b0:	blt	15558 <__assert_fail@plt+0x320c>
   154b4:	ldrd	r2, [r6, #48]	; 0x30
   154b8:	mov	r1, #0
   154bc:	add	r4, r4, #1
   154c0:	cmp	r1, r3
   154c4:	cmpeq	r4, r2
   154c8:	popcs	{r4, r5, r6, r7, r8, pc}
   154cc:	ldr	r8, [r6, #56]	; 0x38
   154d0:	ldr	r7, [r6]
   154d4:	mov	r0, r7
   154d8:	mov	r3, #0
   154dc:	mov	r2, #12
   154e0:	mov	r1, r4
   154e4:	bl	121fc <semctl@plt>
   154e8:	add	r5, r8, r4, lsl #4
   154ec:	cmp	r0, #0
   154f0:	str	r0, [r8, r4, lsl #4]
   154f4:	bge	15454 <__assert_fail@plt+0x3108>
   154f8:	mov	r2, #5
   154fc:	ldr	r1, [pc, #132]	; 15588 <__assert_fail@plt+0x323c>
   15500:	mov	r0, #0
   15504:	bl	11e6c <dcgettext@plt>
   15508:	ldr	r2, [pc, #124]	; 1558c <__assert_fail@plt+0x3240>
   1550c:	mov	r1, r0
   15510:	mov	r0, #1
   15514:	bl	11ecc <err@plt>
   15518:	mov	r2, #5
   1551c:	ldr	r1, [pc, #100]	; 15588 <__assert_fail@plt+0x323c>
   15520:	mov	r0, #0
   15524:	bl	11e6c <dcgettext@plt>
   15528:	ldr	r2, [pc, #96]	; 15590 <__assert_fail@plt+0x3244>
   1552c:	mov	r1, r0
   15530:	mov	r0, #1
   15534:	bl	11ecc <err@plt>
   15538:	mov	r2, #5
   1553c:	ldr	r1, [pc, #68]	; 15588 <__assert_fail@plt+0x323c>
   15540:	mov	r0, #0
   15544:	bl	11e6c <dcgettext@plt>
   15548:	ldr	r2, [pc, #68]	; 15594 <__assert_fail@plt+0x3248>
   1554c:	mov	r1, r0
   15550:	mov	r0, #1
   15554:	bl	11ecc <err@plt>
   15558:	mov	r2, #5
   1555c:	ldr	r1, [pc, #36]	; 15588 <__assert_fail@plt+0x323c>
   15560:	mov	r0, #0
   15564:	bl	11e6c <dcgettext@plt>
   15568:	ldr	r2, [pc, #40]	; 15598 <__assert_fail@plt+0x324c>
   1556c:	mov	r1, r0
   15570:	mov	r0, #1
   15574:	bl	11ecc <err@plt>
   15578:	mov	r2, #16
   1557c:	ldr	r1, [pc, #24]	; 1559c <__assert_fail@plt+0x3250>
   15580:	mov	r0, #1
   15584:	bl	11ecc <err@plt>
   15588:	andeq	lr, r1, r4, ror #23
   1558c:	strdeq	lr, [r1], -r0
   15590:	andeq	lr, r1, r0, lsl #24
   15594:	andeq	lr, r1, r0, lsl ip
   15598:	andeq	lr, r1, r0, lsr #24
   1559c:	muleq	r1, r0, r3
   155a0:	push	{r4, r5, r6, lr}
   155a4:	sub	sp, sp, #40	; 0x28
   155a8:	ldr	r5, [pc, #196]	; 15674 <__assert_fail@plt+0x3328>
   155ac:	mov	r1, #0
   155b0:	mov	r4, r0
   155b4:	ldr	r3, [r5]
   155b8:	ldr	r0, [pc, #184]	; 15678 <__assert_fail@plt+0x332c>
   155bc:	str	r3, [sp, #36]	; 0x24
   155c0:	bl	121cc <access@plt>
   155c4:	subs	r1, r0, #0
   155c8:	bne	155dc <__assert_fail@plt+0x3290>
   155cc:	ldr	r0, [pc, #168]	; 1567c <__assert_fail@plt+0x3330>
   155d0:	bl	121cc <access@plt>
   155d4:	subs	r1, r0, #0
   155d8:	beq	15630 <__assert_fail@plt+0x32e4>
   155dc:	add	r2, sp, #4
   155e0:	mov	r1, #3
   155e4:	mov	r0, #0
   155e8:	bl	11e90 <msgctl@plt>
   155ec:	cmp	r0, #0
   155f0:	movlt	r6, #1
   155f4:	ldrge	r2, [sp, #12]
   155f8:	ldrge	r0, [sp, #20]
   155fc:	ldrge	r1, [sp, #16]
   15600:	asrge	r3, r2, #31
   15604:	movge	r6, #0
   15608:	strdge	r2, [r4, #56]	; 0x38
   1560c:	strge	r0, [r4, #52]	; 0x34
   15610:	strge	r1, [r4, #64]	; 0x40
   15614:	ldr	r2, [sp, #36]	; 0x24
   15618:	ldr	r3, [r5]
   1561c:	mov	r0, r6
   15620:	cmp	r2, r3
   15624:	bne	15670 <__assert_fail@plt+0x3324>
   15628:	add	sp, sp, #40	; 0x28
   1562c:	pop	{r4, r5, r6, pc}
   15630:	ldr	r0, [pc, #72]	; 15680 <__assert_fail@plt+0x3334>
   15634:	bl	121cc <access@plt>
   15638:	subs	r6, r0, #0
   1563c:	bne	155dc <__assert_fail@plt+0x3290>
   15640:	add	r1, r4, #52	; 0x34
   15644:	ldr	r2, [pc, #44]	; 15678 <__assert_fail@plt+0x332c>
   15648:	bl	1b200 <__assert_fail@plt+0x8eb4>
   1564c:	add	r1, r4, #64	; 0x40
   15650:	ldr	r2, [pc, #36]	; 1567c <__assert_fail@plt+0x3330>
   15654:	mov	r0, r6
   15658:	bl	1b200 <__assert_fail@plt+0x8eb4>
   1565c:	add	r1, r4, #56	; 0x38
   15660:	ldr	r2, [pc, #24]	; 15680 <__assert_fail@plt+0x3334>
   15664:	mov	r0, r6
   15668:	bl	1b0e8 <__assert_fail@plt+0x8d9c>
   1566c:	b	15614 <__assert_fail@plt+0x32c8>
   15670:	bl	11e84 <__stack_chk_fail@plt>
   15674:			; <UNDEFINED> instruction: 0x0002fcb8
   15678:	andeq	lr, r1, r0, lsr ip
   1567c:	andeq	lr, r1, r8, asr #24
   15680:	andeq	lr, r1, r0, ror #24
   15684:	push	{r4, r5, r6, r7, lr}
   15688:	sub	sp, sp, #60	; 0x3c
   1568c:	ldr	r5, [pc, #204]	; 15760 <__assert_fail@plt+0x3414>
   15690:	ldr	r2, [pc, #204]	; 15764 <__assert_fail@plt+0x3418>
   15694:	mov	r4, r0
   15698:	ldr	r3, [r5]
   1569c:	str	r2, [r0, #48]	; 0x30
   156a0:	ldr	r1, [pc, #192]	; 15768 <__assert_fail@plt+0x341c>
   156a4:	ldr	r0, [pc, #192]	; 1576c <__assert_fail@plt+0x3420>
   156a8:	str	r3, [sp, #52]	; 0x34
   156ac:	bl	122bc <fopen64@plt>
   156b0:	subs	r6, r0, #0
   156b4:	beq	156f0 <__assert_fail@plt+0x33a4>
   156b8:	add	r2, r4, #32
   156bc:	add	r3, r4, #44	; 0x2c
   156c0:	str	r2, [sp, #4]
   156c4:	str	r3, [sp]
   156c8:	add	r2, r4, #36	; 0x24
   156cc:	add	r3, r4, #40	; 0x28
   156d0:	ldr	r1, [pc, #152]	; 15770 <__assert_fail@plt+0x3424>
   156d4:	bl	12160 <fscanf@plt>
   156d8:	mov	r7, r0
   156dc:	mov	r0, r6
   156e0:	bl	121e4 <fclose@plt>
   156e4:	cmp	r7, #4
   156e8:	moveq	r0, #0
   156ec:	beq	1573c <__assert_fail@plt+0x33f0>
   156f0:	mov	r2, #40	; 0x28
   156f4:	mov	r1, #0
   156f8:	add	r0, sp, #12
   156fc:	bl	1213c <memset@plt>
   15700:	mov	r1, #0
   15704:	add	r3, sp, #12
   15708:	mov	r0, r1
   1570c:	mov	r2, #3
   15710:	bl	121fc <semctl@plt>
   15714:	cmp	r0, #0
   15718:	blt	15754 <__assert_fail@plt+0x3408>
   1571c:	ldr	r0, [sp, #16]
   15720:	ldr	r2, [sp, #20]
   15724:	ldr	r3, [sp, #32]
   15728:	ldr	r1, [sp, #28]
   1572c:	str	r0, [r4, #32]
   15730:	mov	r0, #0
   15734:	str	r1, [r4, #36]	; 0x24
   15738:	strd	r2, [r4, #40]	; 0x28
   1573c:	ldr	r2, [sp, #52]	; 0x34
   15740:	ldr	r3, [r5]
   15744:	cmp	r2, r3
   15748:	bne	1575c <__assert_fail@plt+0x3410>
   1574c:	add	sp, sp, #60	; 0x3c
   15750:	pop	{r4, r5, r6, r7, pc}
   15754:	mov	r0, #1
   15758:	b	1573c <__assert_fail@plt+0x33f0>
   1575c:	bl	11e84 <__stack_chk_fail@plt>
   15760:			; <UNDEFINED> instruction: 0x0002fcb8
   15764:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   15768:	andeq	lr, r1, r8, ror #16
   1576c:	andeq	lr, r1, r8, ror ip
   15770:	muleq	r1, r0, ip
   15774:	push	{r4, r5, r6, lr}
   15778:	mov	r1, #0
   1577c:	ldr	r5, [pc, #224]	; 15864 <__assert_fail@plt+0x3518>
   15780:	mov	r4, r0
   15784:	mov	r0, #1
   15788:	sub	sp, sp, #88	; 0x58
   1578c:	ldr	r3, [r5]
   15790:	strd	r0, [r4, #24]
   15794:	mov	r1, #0
   15798:	ldr	r0, [pc, #200]	; 15868 <__assert_fail@plt+0x351c>
   1579c:	str	r3, [sp, #84]	; 0x54
   157a0:	bl	121cc <access@plt>
   157a4:	subs	r1, r0, #0
   157a8:	bne	157bc <__assert_fail@plt+0x3470>
   157ac:	ldr	r0, [pc, #184]	; 1586c <__assert_fail@plt+0x3520>
   157b0:	bl	121cc <access@plt>
   157b4:	subs	r1, r0, #0
   157b8:	beq	15820 <__assert_fail@plt+0x34d4>
   157bc:	mov	r2, sp
   157c0:	mov	r1, #3
   157c4:	mov	r0, #0
   157c8:	bl	11f68 <shmctl@plt>
   157cc:	cmp	r0, #0
   157d0:	movlt	r6, #1
   157d4:	blt	15804 <__assert_fail@plt+0x34b8>
   157d8:	mov	r3, #0
   157dc:	mov	r6, r3
   157e0:	ldr	r1, [sp, #8]
   157e4:	ldr	r2, [sp, #16]
   157e8:	str	r3, [r4, #4]
   157ec:	str	r3, [r4, #20]
   157f0:	str	r3, [r4, #12]
   157f4:	ldr	r3, [sp]
   157f8:	str	r1, [r4]
   157fc:	str	r2, [r4, #16]
   15800:	str	r3, [r4, #8]
   15804:	ldr	r2, [sp, #84]	; 0x54
   15808:	ldr	r3, [r5]
   1580c:	mov	r0, r6
   15810:	cmp	r2, r3
   15814:	bne	15860 <__assert_fail@plt+0x3514>
   15818:	add	sp, sp, #88	; 0x58
   1581c:	pop	{r4, r5, r6, pc}
   15820:	ldr	r0, [pc, #72]	; 15870 <__assert_fail@plt+0x3524>
   15824:	bl	121cc <access@plt>
   15828:	subs	r6, r0, #0
   1582c:	bne	157bc <__assert_fail@plt+0x3470>
   15830:	add	r1, r4, #16
   15834:	ldr	r2, [pc, #44]	; 15868 <__assert_fail@plt+0x351c>
   15838:	bl	1b0e8 <__assert_fail@plt+0x8d9c>
   1583c:	add	r1, r4, #8
   15840:	ldr	r2, [pc, #36]	; 1586c <__assert_fail@plt+0x3520>
   15844:	mov	r0, r6
   15848:	bl	1b0e8 <__assert_fail@plt+0x8d9c>
   1584c:	mov	r1, r4
   15850:	ldr	r2, [pc, #24]	; 15870 <__assert_fail@plt+0x3524>
   15854:	mov	r0, r6
   15858:	bl	1b0e8 <__assert_fail@plt+0x8d9c>
   1585c:	b	15804 <__assert_fail@plt+0x34b8>
   15860:	bl	11e84 <__stack_chk_fail@plt>
   15864:			; <UNDEFINED> instruction: 0x0002fcb8
   15868:	muleq	r1, ip, ip
   1586c:			; <UNDEFINED> instruction: 0x0001ecb4
   15870:	andeq	lr, r1, ip, asr #25
   15874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15878:	sub	sp, sp, #8384	; 0x20c0
   1587c:	ldr	r9, [pc, #792]	; 15b9c <__assert_fail@plt+0x3850>
   15880:	sub	sp, sp, #52	; 0x34
   15884:	add	r2, sp, #8384	; 0x20c0
   15888:	ldr	r3, [r9]
   1588c:	add	r2, r2, #44	; 0x2c
   15890:	mov	r8, r0
   15894:	mov	sl, r1
   15898:	mov	r0, #1
   1589c:	mov	r1, #104	; 0x68
   158a0:	str	r3, [r2]
   158a4:	bl	11cf8 <calloc@plt>
   158a8:	subs	r4, r0, #0
   158ac:	beq	159f0 <__assert_fail@plt+0x36a4>
   158b0:	mov	r3, #0
   158b4:	str	r4, [sl]
   158b8:	str	r3, [r4, #96]	; 0x60
   158bc:	ldr	r1, [pc, #732]	; 15ba0 <__assert_fail@plt+0x3854>
   158c0:	ldr	r0, [pc, #732]	; 15ba4 <__assert_fail@plt+0x3858>
   158c4:	bl	122bc <fopen64@plt>
   158c8:	subs	r5, r0, #0
   158cc:	beq	15a50 <__assert_fail@plt+0x3704>
   158d0:	mov	r0, r5
   158d4:	bl	1216c <fgetc@plt>
   158d8:	cmp	r0, #10
   158dc:	bne	158d0 <__assert_fail@plt+0x3584>
   158e0:	ldr	r6, [pc, #704]	; 15ba8 <__assert_fail@plt+0x385c>
   158e4:	ldr	fp, [pc, #704]	; 15bac <__assert_fail@plt+0x3860>
   158e8:	mov	r7, #0
   158ec:	mov	r3, #0
   158f0:	str	r3, [sp, #56]	; 0x38
   158f4:	str	sl, [sp, #60]	; 0x3c
   158f8:	mov	r2, r5
   158fc:	mov	r1, #8192	; 0x2000
   15900:	add	r0, sp, #236	; 0xec
   15904:	bl	11dd0 <fgets@plt>
   15908:	cmp	r0, #0
   1590c:	beq	15a34 <__assert_fail@plt+0x36e8>
   15910:	add	ip, r4, #88	; 0x58
   15914:	add	r0, r4, #80	; 0x50
   15918:	strd	r6, [r4, #80]	; 0x50
   1591c:	strd	r6, [r4, #88]	; 0x58
   15920:	add	r1, r4, #64	; 0x40
   15924:	add	r2, r4, #56	; 0x38
   15928:	add	r3, r4, #48	; 0x30
   1592c:	str	ip, [sp, #52]	; 0x34
   15930:	str	r0, [sp, #48]	; 0x30
   15934:	add	ip, r4, #20
   15938:	add	r0, r4, #16
   1593c:	str	r1, [sp, #44]	; 0x2c
   15940:	str	r2, [sp, #40]	; 0x28
   15944:	add	r1, r4, #12
   15948:	add	lr, r4, #8
   1594c:	str	r3, [sp, #36]	; 0x24
   15950:	str	ip, [sp, #32]
   15954:	str	r0, [sp, #28]
   15958:	add	ip, r4, #76	; 0x4c
   1595c:	add	r0, r4, #72	; 0x48
   15960:	add	r2, r4, #40	; 0x28
   15964:	add	r3, r4, #24
   15968:	add	sl, r4, #32
   1596c:	str	r1, [sp, #24]
   15970:	str	r0, [sp, #8]
   15974:	str	r2, [sp, #4]
   15978:	str	r3, [sp]
   1597c:	str	lr, [sp, #20]
   15980:	str	sl, [sp, #16]
   15984:	str	ip, [sp, #12]
   15988:	mov	r3, r4
   1598c:	add	r2, r4, #4
   15990:	mov	r1, fp
   15994:	add	r0, sp, #236	; 0xec
   15998:	bl	1225c <sscanf@plt>
   1599c:	cmp	r0, #13
   159a0:	ble	158f8 <__assert_fail@plt+0x35ac>
   159a4:	cmp	r8, #0
   159a8:	blt	15a00 <__assert_fail@plt+0x36b4>
   159ac:	ldr	r3, [r4]
   159b0:	cmp	r3, r8
   159b4:	bne	158f8 <__assert_fail@plt+0x35ac>
   159b8:	mov	r3, #1
   159bc:	str	r3, [sp, #56]	; 0x38
   159c0:	mov	r0, r5
   159c4:	bl	121e4 <fclose@plt>
   159c8:	add	r3, sp, #8384	; 0x20c0
   159cc:	add	r3, r3, #44	; 0x2c
   159d0:	ldr	r2, [r3]
   159d4:	ldr	r3, [r9]
   159d8:	ldr	r0, [sp, #56]	; 0x38
   159dc:	cmp	r2, r3
   159e0:	bne	15b98 <__assert_fail@plt+0x384c>
   159e4:	add	sp, sp, #8384	; 0x20c0
   159e8:	add	sp, sp, #52	; 0x34
   159ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159f0:	mov	r2, #104	; 0x68
   159f4:	ldr	r1, [pc, #436]	; 15bb0 <__assert_fail@plt+0x3864>
   159f8:	mov	r0, #1
   159fc:	bl	11ecc <err@plt>
   15a00:	mov	r1, #104	; 0x68
   15a04:	mov	r0, #1
   15a08:	bl	11cf8 <calloc@plt>
   15a0c:	cmp	r0, #0
   15a10:	beq	159f0 <__assert_fail@plt+0x36a4>
   15a14:	ldr	r3, [sp, #56]	; 0x38
   15a18:	str	r0, [r4, #96]	; 0x60
   15a1c:	add	r3, r3, #1
   15a20:	str	r3, [sp, #56]	; 0x38
   15a24:	mov	r3, #0
   15a28:	mov	r4, r0
   15a2c:	str	r3, [r0, #96]	; 0x60
   15a30:	b	158f8 <__assert_fail@plt+0x35ac>
   15a34:	ldr	r3, [sp, #56]	; 0x38
   15a38:	ldr	sl, [sp, #60]	; 0x3c
   15a3c:	cmp	r3, #0
   15a40:	bne	159c0 <__assert_fail@plt+0x3674>
   15a44:	ldr	r0, [sl]
   15a48:	bl	11dc4 <free@plt>
   15a4c:	b	159c0 <__assert_fail@plt+0x3674>
   15a50:	add	r2, sp, #68	; 0x44
   15a54:	mov	r1, #14
   15a58:	bl	11f68 <shmctl@plt>
   15a5c:	subs	r6, r0, #0
   15a60:	mvnge	r7, r8
   15a64:	movge	fp, r5
   15a68:	lsrge	r7, r7, #31
   15a6c:	strge	sl, [sp, #60]	; 0x3c
   15a70:	blt	15b7c <__assert_fail@plt+0x3830>
   15a74:	add	r2, sp, #152	; 0x98
   15a78:	mov	r1, #13
   15a7c:	mov	r0, r5
   15a80:	bl	11f68 <shmctl@plt>
   15a84:	cmp	r0, #0
   15a88:	blt	15b60 <__assert_fail@plt+0x3814>
   15a8c:	cmp	r0, r8
   15a90:	moveq	sl, #0
   15a94:	andne	sl, r7, #1
   15a98:	cmp	sl, #0
   15a9c:	bne	15b60 <__assert_fail@plt+0x3814>
   15aa0:	ldr	r3, [sp, #192]	; 0xc0
   15aa4:	ldr	r2, [pc, #252]	; 15ba8 <__assert_fail@plt+0x385c>
   15aa8:	ldr	lr, [sp, #200]	; 0xc8
   15aac:	asr	r1, r3, #31
   15ab0:	str	r0, [r4]
   15ab4:	mov	r0, r3
   15ab8:	mov	r3, #0
   15abc:	ldr	ip, [sp, #208]	; 0xd0
   15ac0:	strd	r0, [r4, #48]	; 0x30
   15ac4:	strd	r2, [r4, #80]	; 0x50
   15ac8:	mov	r0, lr
   15acc:	asr	r1, lr, #31
   15ad0:	strd	r2, [r4, #88]	; 0x58
   15ad4:	ldrh	r2, [sp, #172]	; 0xac
   15ad8:	strd	r0, [r4, #56]	; 0x38
   15adc:	mov	r0, ip
   15ae0:	asr	r1, ip, #31
   15ae4:	str	r2, [r4, #24]
   15ae8:	ldr	r2, [sp, #152]	; 0x98
   15aec:	strd	r0, [r4, #64]	; 0x40
   15af0:	ldr	r0, [sp, #188]	; 0xbc
   15af4:	ldr	r1, [sp, #216]	; 0xd8
   15af8:	str	r2, [r4, #4]
   15afc:	ldr	r2, [sp, #220]	; 0xdc
   15b00:	str	r0, [r4, #40]	; 0x28
   15b04:	str	r1, [r4, #72]	; 0x48
   15b08:	ldr	r0, [sp, #156]	; 0x9c
   15b0c:	ldr	r1, [sp, #160]	; 0xa0
   15b10:	ldr	ip, [sp, #224]	; 0xe0
   15b14:	str	r2, [r4, #76]	; 0x4c
   15b18:	ldr	r2, [sp, #164]	; 0xa4
   15b1c:	cmp	r8, #0
   15b20:	add	fp, fp, #1
   15b24:	str	sl, [r4, #44]	; 0x2c
   15b28:	str	sl, [r4, #36]	; 0x24
   15b2c:	str	ip, [r4, #32]
   15b30:	strd	r0, [r4, #8]
   15b34:	str	r2, [r4, #16]
   15b38:	str	r2, [r4, #20]
   15b3c:	bge	15b90 <__assert_fail@plt+0x3844>
   15b40:	mov	r1, #104	; 0x68
   15b44:	mov	r0, #1
   15b48:	bl	11cf8 <calloc@plt>
   15b4c:	cmp	r0, #0
   15b50:	beq	159f0 <__assert_fail@plt+0x36a4>
   15b54:	str	r0, [r4, #96]	; 0x60
   15b58:	mov	r4, r0
   15b5c:	str	sl, [r0, #96]	; 0x60
   15b60:	add	r5, r5, #1
   15b64:	cmp	r6, r5
   15b68:	bge	15a74 <__assert_fail@plt+0x3728>
   15b6c:	cmp	fp, #0
   15b70:	str	fp, [sp, #56]	; 0x38
   15b74:	ldr	sl, [sp, #60]	; 0x3c
   15b78:	bne	159c8 <__assert_fail@plt+0x367c>
   15b7c:	ldr	r0, [sl]
   15b80:	bl	11dc4 <free@plt>
   15b84:	mov	r3, #0
   15b88:	str	r3, [sp, #56]	; 0x38
   15b8c:	b	159c8 <__assert_fail@plt+0x367c>
   15b90:	str	fp, [sp, #56]	; 0x38
   15b94:	b	159c8 <__assert_fail@plt+0x367c>
   15b98:	bl	11e84 <__stack_chk_fail@plt>
   15b9c:			; <UNDEFINED> instruction: 0x0002fcb8
   15ba0:	andeq	lr, r1, r8, ror #16
   15ba4:	andeq	lr, r1, r4, ror #25
   15ba8:	andeq	sp, r0, sp, lsr #29
   15bac:	strdeq	lr, [r1], -r8
   15bb0:	muleq	r1, r0, r3
   15bb4:	cmp	r0, #0
   15bb8:	bxeq	lr
   15bbc:	push	{r4, lr}
   15bc0:	ldr	r4, [r0, #96]	; 0x60
   15bc4:	bl	11dc4 <free@plt>
   15bc8:	subs	r0, r4, #0
   15bcc:	bne	15bc0 <__assert_fail@plt+0x3874>
   15bd0:	pop	{r4, pc}
   15bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bd8:	sub	sp, sp, #156	; 0x9c
   15bdc:	ldr	r7, [pc, #632]	; 15e5c <__assert_fail@plt+0x3b10>
   15be0:	mov	r6, r0
   15be4:	mov	sl, r1
   15be8:	ldr	r3, [r7]
   15bec:	mov	r1, #64	; 0x40
   15bf0:	mov	r0, #1
   15bf4:	str	r3, [sp, #148]	; 0x94
   15bf8:	bl	11cf8 <calloc@plt>
   15bfc:	subs	r4, r0, #0
   15c00:	beq	15d00 <__assert_fail@plt+0x39b4>
   15c04:	mov	r3, #0
   15c08:	str	r4, [sl]
   15c0c:	str	r3, [r4, #60]	; 0x3c
   15c10:	ldr	r1, [pc, #584]	; 15e60 <__assert_fail@plt+0x3b14>
   15c14:	ldr	r0, [pc, #584]	; 15e64 <__assert_fail@plt+0x3b18>
   15c18:	bl	122bc <fopen64@plt>
   15c1c:	subs	r5, r0, #0
   15c20:	beq	15d44 <__assert_fail@plt+0x39f8>
   15c24:	mov	r0, r5
   15c28:	bl	1216c <fgetc@plt>
   15c2c:	cmp	r0, #10
   15c30:	bne	15c24 <__assert_fail@plt+0x38d8>
   15c34:	ldr	r8, [pc, #556]	; 15e68 <__assert_fail@plt+0x3b1c>
   15c38:	mov	fp, #0
   15c3c:	mov	r0, r5
   15c40:	bl	12064 <feof@plt>
   15c44:	subs	r9, r0, #0
   15c48:	bne	15d30 <__assert_fail@plt+0x39e4>
   15c4c:	add	r1, r4, #32
   15c50:	add	r2, r4, #40	; 0x28
   15c54:	add	r3, r4, #20
   15c58:	add	ip, r4, #16
   15c5c:	add	r0, r4, #12
   15c60:	str	r1, [sp, #28]
   15c64:	str	r2, [sp, #24]
   15c68:	add	r1, r4, #8
   15c6c:	add	r2, r4, #48	; 0x30
   15c70:	str	r3, [sp, #20]
   15c74:	add	r3, r4, #24
   15c78:	str	r0, [sp, #12]
   15c7c:	str	r1, [sp, #8]
   15c80:	str	r2, [sp, #4]
   15c84:	str	r3, [sp]
   15c88:	str	ip, [sp, #16]
   15c8c:	mov	r3, r4
   15c90:	add	r2, r4, #4
   15c94:	mov	r1, r8
   15c98:	mov	r0, r5
   15c9c:	bl	12160 <fscanf@plt>
   15ca0:	cmp	r0, #10
   15ca4:	bne	15c3c <__assert_fail@plt+0x38f0>
   15ca8:	cmp	r6, #0
   15cac:	blt	15cec <__assert_fail@plt+0x39a0>
   15cb0:	ldr	r3, [r4]
   15cb4:	cmp	r3, r6
   15cb8:	bne	15c3c <__assert_fail@plt+0x38f0>
   15cbc:	mov	r0, r4
   15cc0:	bl	15400 <__assert_fail@plt+0x30b4>
   15cc4:	mov	fp, #1
   15cc8:	mov	r0, r5
   15ccc:	bl	121e4 <fclose@plt>
   15cd0:	ldr	r2, [sp, #148]	; 0x94
   15cd4:	ldr	r3, [r7]
   15cd8:	mov	r0, fp
   15cdc:	cmp	r2, r3
   15ce0:	bne	15e58 <__assert_fail@plt+0x3b0c>
   15ce4:	add	sp, sp, #156	; 0x9c
   15ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cec:	mov	r1, #64	; 0x40
   15cf0:	mov	r0, #1
   15cf4:	bl	11cf8 <calloc@plt>
   15cf8:	cmp	r0, #0
   15cfc:	bne	15d10 <__assert_fail@plt+0x39c4>
   15d00:	mov	r2, #64	; 0x40
   15d04:	ldr	r1, [pc, #352]	; 15e6c <__assert_fail@plt+0x3b20>
   15d08:	mov	r0, #1
   15d0c:	bl	11ecc <err@plt>
   15d10:	str	r0, [r4, #60]	; 0x3c
   15d14:	str	r9, [r0, #60]	; 0x3c
   15d18:	mov	r4, r0
   15d1c:	mov	r0, r5
   15d20:	bl	12064 <feof@plt>
   15d24:	add	fp, fp, #1
   15d28:	subs	r9, r0, #0
   15d2c:	beq	15c4c <__assert_fail@plt+0x3900>
   15d30:	cmp	fp, #0
   15d34:	bne	15cc8 <__assert_fail@plt+0x397c>
   15d38:	ldr	r0, [sl]
   15d3c:	bl	11dc4 <free@plt>
   15d40:	b	15cc8 <__assert_fail@plt+0x397c>
   15d44:	add	r3, sp, #44	; 0x2c
   15d48:	mov	r2, #19
   15d4c:	mov	r1, r5
   15d50:	bl	121fc <semctl@plt>
   15d54:	subs	r8, r0, #0
   15d58:	mvnge	r9, r6
   15d5c:	movge	fp, r5
   15d60:	lsrge	r9, r9, #31
   15d64:	blt	15e38 <__assert_fail@plt+0x3aec>
   15d68:	add	r3, sp, #84	; 0x54
   15d6c:	mov	r2, #18
   15d70:	mov	r1, #0
   15d74:	mov	r0, r5
   15d78:	bl	121fc <semctl@plt>
   15d7c:	cmp	r0, #0
   15d80:	blt	15e24 <__assert_fail@plt+0x3ad8>
   15d84:	cmp	r0, r6
   15d88:	moveq	r3, #0
   15d8c:	andne	r3, r9, #1
   15d90:	cmp	r3, #0
   15d94:	bne	15e24 <__assert_fail@plt+0x3ad8>
   15d98:	ldr	r1, [sp, #120]	; 0x78
   15d9c:	ldr	ip, [sp, #128]	; 0x80
   15da0:	ldrh	r2, [sp, #104]	; 0x68
   15da4:	str	r0, [r4]
   15da8:	mov	r0, r1
   15dac:	asr	r1, r1, #31
   15db0:	str	r2, [r4, #24]
   15db4:	strd	r0, [r4, #40]	; 0x28
   15db8:	mov	r0, ip
   15dbc:	asr	r1, ip, #31
   15dc0:	ldr	r2, [sp, #136]	; 0x88
   15dc4:	strd	r0, [r4, #32]
   15dc8:	ldr	r0, [sp, #88]	; 0x58
   15dcc:	ldr	r1, [sp, #92]	; 0x5c
   15dd0:	ldr	ip, [sp, #84]	; 0x54
   15dd4:	str	r2, [r4, #48]	; 0x30
   15dd8:	ldr	r2, [sp, #96]	; 0x60
   15ddc:	cmp	r6, #0
   15de0:	str	r3, [r4, #52]	; 0x34
   15de4:	str	r3, [sp, #36]	; 0x24
   15de8:	str	ip, [r4, #4]
   15dec:	strd	r0, [r4, #8]
   15df0:	str	r2, [r4, #16]
   15df4:	str	r2, [r4, #20]
   15df8:	bge	15e48 <__assert_fail@plt+0x3afc>
   15dfc:	mov	r1, #64	; 0x40
   15e00:	mov	r0, #1
   15e04:	bl	11cf8 <calloc@plt>
   15e08:	cmp	r0, #0
   15e0c:	beq	15d00 <__assert_fail@plt+0x39b4>
   15e10:	str	r0, [r4, #60]	; 0x3c
   15e14:	ldr	r3, [sp, #36]	; 0x24
   15e18:	add	fp, fp, #2
   15e1c:	mov	r4, r0
   15e20:	str	r3, [r0, #60]	; 0x3c
   15e24:	add	r5, r5, #1
   15e28:	cmp	r8, r5
   15e2c:	bge	15d68 <__assert_fail@plt+0x3a1c>
   15e30:	cmp	fp, #0
   15e34:	bne	15cd0 <__assert_fail@plt+0x3984>
   15e38:	ldr	r0, [sl]
   15e3c:	bl	11dc4 <free@plt>
   15e40:	mov	fp, #0
   15e44:	b	15cd0 <__assert_fail@plt+0x3984>
   15e48:	mov	r0, r4
   15e4c:	add	fp, fp, #1
   15e50:	bl	15400 <__assert_fail@plt+0x30b4>
   15e54:	b	15cd0 <__assert_fail@plt+0x3984>
   15e58:	bl	11e84 <__stack_chk_fail@plt>
   15e5c:			; <UNDEFINED> instruction: 0x0002fcb8
   15e60:	andeq	lr, r1, r8, ror #16
   15e64:	andeq	lr, r1, ip, lsr sp
   15e68:	andeq	lr, r1, r0, asr sp
   15e6c:	muleq	r1, r0, r3
   15e70:	push	{r4, r5, r6, lr}
   15e74:	subs	r4, r0, #0
   15e78:	popeq	{r4, r5, r6, pc}
   15e7c:	ldr	r0, [r4, #56]	; 0x38
   15e80:	ldr	r5, [r4, #60]	; 0x3c
   15e84:	bl	11dc4 <free@plt>
   15e88:	mov	r0, r4
   15e8c:	bl	11dc4 <free@plt>
   15e90:	subs	r4, r5, #0
   15e94:	bne	15e7c <__assert_fail@plt+0x3b30>
   15e98:	pop	{r4, r5, r6, pc}
   15e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea0:	sub	sp, sp, #244	; 0xf4
   15ea4:	ldr	r7, [pc, #724]	; 16180 <__assert_fail@plt+0x3e34>
   15ea8:	mov	r6, r0
   15eac:	mov	r9, r1
   15eb0:	ldr	r3, [r7]
   15eb4:	mov	r1, #96	; 0x60
   15eb8:	mov	r0, #1
   15ebc:	str	r3, [sp, #236]	; 0xec
   15ec0:	bl	11cf8 <calloc@plt>
   15ec4:	subs	r4, r0, #0
   15ec8:	beq	16004 <__assert_fail@plt+0x3cb8>
   15ecc:	mov	r3, #0
   15ed0:	str	r4, [r9]
   15ed4:	str	r3, [r4, #88]	; 0x58
   15ed8:	ldr	r1, [pc, #676]	; 16184 <__assert_fail@plt+0x3e38>
   15edc:	ldr	r0, [pc, #676]	; 16188 <__assert_fail@plt+0x3e3c>
   15ee0:	bl	122bc <fopen64@plt>
   15ee4:	subs	r5, r0, #0
   15ee8:	beq	16048 <__assert_fail@plt+0x3cfc>
   15eec:	mov	r0, r5
   15ef0:	bl	1216c <fgetc@plt>
   15ef4:	cmp	r0, #10
   15ef8:	bne	15eec <__assert_fail@plt+0x3ba0>
   15efc:	ldr	sl, [pc, #648]	; 1618c <__assert_fail@plt+0x3e40>
   15f00:	mov	r8, #0
   15f04:	mov	r0, r5
   15f08:	bl	12064 <feof@plt>
   15f0c:	subs	fp, r0, #0
   15f10:	bne	16034 <__assert_fail@plt+0x3ce8>
   15f14:	add	r2, r4, #48	; 0x30
   15f18:	add	r3, r4, #40	; 0x28
   15f1c:	add	ip, r4, #32
   15f20:	add	r0, r4, #20
   15f24:	add	r1, r4, #16
   15f28:	str	r2, [sp, #44]	; 0x2c
   15f2c:	str	r3, [sp, #40]	; 0x28
   15f30:	add	r2, r4, #12
   15f34:	add	r3, r4, #8
   15f38:	str	ip, [sp, #36]	; 0x24
   15f3c:	str	r0, [sp, #32]
   15f40:	add	ip, r4, #84	; 0x54
   15f44:	add	r0, r4, #80	; 0x50
   15f48:	str	r1, [sp, #28]
   15f4c:	str	r2, [sp, #24]
   15f50:	add	r1, r4, #64	; 0x40
   15f54:	add	r2, r4, #56	; 0x38
   15f58:	str	r3, [sp, #20]
   15f5c:	add	r3, r4, #24
   15f60:	str	r0, [sp, #12]
   15f64:	str	r1, [sp, #8]
   15f68:	str	r2, [sp, #4]
   15f6c:	str	r3, [sp]
   15f70:	str	ip, [sp, #16]
   15f74:	mov	r3, r4
   15f78:	add	r2, r4, #4
   15f7c:	mov	r1, sl
   15f80:	mov	r0, r5
   15f84:	bl	12160 <fscanf@plt>
   15f88:	cmp	r0, #14
   15f8c:	bne	15f04 <__assert_fail@plt+0x3bb8>
   15f90:	cmp	r6, #0
   15f94:	blt	15ff0 <__assert_fail@plt+0x3ca4>
   15f98:	ldr	r3, [r4]
   15f9c:	cmp	r3, r6
   15fa0:	bne	15f04 <__assert_fail@plt+0x3bb8>
   15fa4:	mov	r0, r6
   15fa8:	add	r2, sp, #148	; 0x94
   15fac:	mov	r1, #2
   15fb0:	bl	11e90 <msgctl@plt>
   15fb4:	cmn	r0, #1
   15fb8:	moveq	r8, #1
   15fbc:	ldrne	r3, [sp, #216]	; 0xd8
   15fc0:	movne	r8, #1
   15fc4:	strne	fp, [r4, #76]	; 0x4c
   15fc8:	strne	r3, [r4, #72]	; 0x48
   15fcc:	mov	r0, r5
   15fd0:	bl	121e4 <fclose@plt>
   15fd4:	ldr	r2, [sp, #236]	; 0xec
   15fd8:	ldr	r3, [r7]
   15fdc:	mov	r0, r8
   15fe0:	cmp	r2, r3
   15fe4:	bne	1617c <__assert_fail@plt+0x3e30>
   15fe8:	add	sp, sp, #244	; 0xf4
   15fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ff0:	mov	r1, #96	; 0x60
   15ff4:	mov	r0, #1
   15ff8:	bl	11cf8 <calloc@plt>
   15ffc:	cmp	r0, #0
   16000:	bne	16014 <__assert_fail@plt+0x3cc8>
   16004:	mov	r2, #96	; 0x60
   16008:	ldr	r1, [pc, #384]	; 16190 <__assert_fail@plt+0x3e44>
   1600c:	mov	r0, #1
   16010:	bl	11ecc <err@plt>
   16014:	str	r0, [r4, #88]	; 0x58
   16018:	str	fp, [r0, #88]	; 0x58
   1601c:	mov	r4, r0
   16020:	mov	r0, r5
   16024:	bl	12064 <feof@plt>
   16028:	add	r8, r8, #1
   1602c:	subs	fp, r0, #0
   16030:	beq	15f14 <__assert_fail@plt+0x3bc8>
   16034:	cmp	r8, #0
   16038:	bne	15fcc <__assert_fail@plt+0x3c80>
   1603c:	ldr	r0, [r9]
   16040:	bl	11dc4 <free@plt>
   16044:	b	15fcc <__assert_fail@plt+0x3c80>
   16048:	add	r2, sp, #60	; 0x3c
   1604c:	mov	r1, #12
   16050:	bl	11e90 <msgctl@plt>
   16054:	subs	sl, r0, #0
   16058:	mvnge	fp, r6
   1605c:	movge	r8, r5
   16060:	lsrge	fp, fp, #31
   16064:	blt	1616c <__assert_fail@plt+0x3e20>
   16068:	add	r2, sp, #148	; 0x94
   1606c:	mov	r1, #11
   16070:	mov	r0, r5
   16074:	bl	11e90 <msgctl@plt>
   16078:	cmp	r0, #0
   1607c:	blt	16158 <__assert_fail@plt+0x3e0c>
   16080:	cmp	r0, r6
   16084:	moveq	r3, #0
   16088:	andne	r3, fp, #1
   1608c:	cmp	r3, #0
   16090:	bne	16158 <__assert_fail@plt+0x3e0c>
   16094:	ldr	r2, [sp, #184]	; 0xb8
   16098:	ldr	lr, [sp, #192]	; 0xc0
   1609c:	str	r0, [r4]
   160a0:	asr	r1, r2, #31
   160a4:	mov	r0, r2
   160a8:	ldr	ip, [sp, #200]	; 0xc8
   160ac:	strd	r0, [r4, #32]
   160b0:	mov	r0, lr
   160b4:	asr	r1, lr, #31
   160b8:	ldrh	r2, [sp, #168]	; 0xa8
   160bc:	strd	r0, [r4, #40]	; 0x28
   160c0:	mov	r0, ip
   160c4:	asr	r1, ip, #31
   160c8:	str	r2, [r4, #24]
   160cc:	strd	r0, [r4, #48]	; 0x30
   160d0:	ldr	r2, [sp, #148]	; 0x94
   160d4:	ldrd	r0, [sp, #208]	; 0xd0
   160d8:	str	r2, [r4, #4]
   160dc:	ldr	r2, [sp, #220]	; 0xdc
   160e0:	str	r0, [r4, #56]	; 0x38
   160e4:	str	r1, [r4, #64]	; 0x40
   160e8:	ldr	r0, [sp, #224]	; 0xe0
   160ec:	ldr	r1, [sp, #152]	; 0x98
   160f0:	str	r2, [r4, #80]	; 0x50
   160f4:	ldr	r2, [sp, #156]	; 0x9c
   160f8:	str	r0, [r4, #84]	; 0x54
   160fc:	str	r1, [r4, #8]
   16100:	ldr	r0, [sp, #160]	; 0xa0
   16104:	ldr	r1, [sp, #164]	; 0xa4
   16108:	str	r2, [r4, #12]
   1610c:	ldr	r2, [sp, #216]	; 0xd8
   16110:	cmp	r6, #0
   16114:	add	r8, r8, #1
   16118:	str	r3, [r4, #60]	; 0x3c
   1611c:	str	r3, [r4, #68]	; 0x44
   16120:	str	r3, [r4, #76]	; 0x4c
   16124:	str	r3, [sp, #52]	; 0x34
   16128:	strd	r0, [r4, #16]
   1612c:	str	r2, [r4, #72]	; 0x48
   16130:	bge	15fd4 <__assert_fail@plt+0x3c88>
   16134:	mov	r1, #96	; 0x60
   16138:	mov	r0, #1
   1613c:	bl	11cf8 <calloc@plt>
   16140:	cmp	r0, #0
   16144:	beq	16004 <__assert_fail@plt+0x3cb8>
   16148:	str	r0, [r4, #88]	; 0x58
   1614c:	ldr	r3, [sp, #52]	; 0x34
   16150:	mov	r4, r0
   16154:	str	r3, [r0, #88]	; 0x58
   16158:	add	r5, r5, #1
   1615c:	cmp	sl, r5
   16160:	bge	16068 <__assert_fail@plt+0x3d1c>
   16164:	cmp	r8, #0
   16168:	bne	15fd4 <__assert_fail@plt+0x3c88>
   1616c:	ldr	r0, [r9]
   16170:	bl	11dc4 <free@plt>
   16174:	mov	r8, #0
   16178:	b	15fd4 <__assert_fail@plt+0x3c88>
   1617c:	bl	11e84 <__stack_chk_fail@plt>
   16180:			; <UNDEFINED> instruction: 0x0002fcb8
   16184:	andeq	lr, r1, r8, ror #16
   16188:	andeq	lr, r1, r8, ror sp
   1618c:	andeq	lr, r1, ip, lsl #27
   16190:	muleq	r1, r0, r3
   16194:	cmp	r0, #0
   16198:	bxeq	lr
   1619c:	push	{r4, lr}
   161a0:	ldr	r4, [r0, #88]	; 0x58
   161a4:	bl	11dc4 <free@plt>
   161a8:	subs	r0, r4, #0
   161ac:	bne	161a0 <__assert_fail@plt+0x3e54>
   161b0:	pop	{r4, pc}
   161b4:	ldr	ip, [r1, #24]
   161b8:	push	{r4, r5, lr}
   161bc:	sub	sp, sp, #12
   161c0:	lsl	ip, ip, #23
   161c4:	mov	r4, r1
   161c8:	lsr	ip, ip, #23
   161cc:	ldr	r3, [r1]
   161d0:	ldr	r2, [pc, #184]	; 16290 <__assert_fail@plt+0x3f44>
   161d4:	str	ip, [sp]
   161d8:	mov	r1, #1
   161dc:	mov	r5, r0
   161e0:	bl	121c0 <__fprintf_chk@plt>
   161e4:	ldr	r0, [r4, #16]
   161e8:	bl	11d58 <getpwuid@plt>
   161ec:	mov	r1, #1
   161f0:	cmp	r0, #0
   161f4:	ldrne	r3, [r0]
   161f8:	ldrne	r2, [pc, #148]	; 16294 <__assert_fail@plt+0x3f48>
   161fc:	ldreq	r3, [r4, #16]
   16200:	ldreq	r2, [pc, #144]	; 16298 <__assert_fail@plt+0x3f4c>
   16204:	mov	r0, r5
   16208:	bl	121c0 <__fprintf_chk@plt>
   1620c:	ldr	r0, [r4, #20]
   16210:	bl	1231c <getgrgid@plt>
   16214:	mov	r1, #1
   16218:	cmp	r0, #0
   1621c:	ldrne	r3, [r0]
   16220:	ldrne	r2, [pc, #108]	; 16294 <__assert_fail@plt+0x3f48>
   16224:	ldreq	r3, [r4, #20]
   16228:	ldreq	r2, [pc, #104]	; 16298 <__assert_fail@plt+0x3f4c>
   1622c:	mov	r0, r5
   16230:	bl	121c0 <__fprintf_chk@plt>
   16234:	ldr	r0, [r4, #8]
   16238:	bl	11d58 <getpwuid@plt>
   1623c:	mov	r1, #1
   16240:	cmp	r0, #0
   16244:	ldrne	r3, [r0]
   16248:	ldrne	r2, [pc, #68]	; 16294 <__assert_fail@plt+0x3f48>
   1624c:	ldreq	r3, [r4, #8]
   16250:	ldreq	r2, [pc, #64]	; 16298 <__assert_fail@plt+0x3f4c>
   16254:	mov	r0, r5
   16258:	bl	121c0 <__fprintf_chk@plt>
   1625c:	ldr	r0, [r4, #12]
   16260:	bl	1231c <getgrgid@plt>
   16264:	mov	r1, #1
   16268:	cmp	r0, #0
   1626c:	moveq	r0, r5
   16270:	ldrne	r3, [r0]
   16274:	ldrne	r2, [pc, #32]	; 1629c <__assert_fail@plt+0x3f50>
   16278:	movne	r0, r5
   1627c:	ldreq	r3, [r4, #12]
   16280:	ldreq	r2, [pc, #24]	; 162a0 <__assert_fail@plt+0x3f54>
   16284:	add	sp, sp, #12
   16288:	pop	{r4, r5, lr}
   1628c:	b	121c0 <__fprintf_chk@plt>
   16290:	andeq	lr, r1, r4, asr #27
   16294:	ldrdeq	lr, [r1], -r0
   16298:	ldrdeq	lr, [r1], -r8
   1629c:	andeq	lr, r1, r0, ror #27
   162a0:	andeq	lr, r1, r8, ror #27
   162a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   162a8:	subs	r5, r1, #0
   162ac:	ldr	r6, [pc, #432]	; 16464 <__assert_fail@plt+0x4118>
   162b0:	sub	sp, sp, #52	; 0x34
   162b4:	mov	r4, r0
   162b8:	ldr	r1, [r6]
   162bc:	mov	r7, r2
   162c0:	mov	r9, r3
   162c4:	str	r1, [sp, #44]	; 0x2c
   162c8:	ldr	r8, [sp, #80]	; 0x50
   162cc:	beq	16308 <__assert_fail@plt+0x3fbc>
   162d0:	mov	r0, r5
   162d4:	bl	1207c <strlen@plt>
   162d8:	add	r0, r5, r0
   162dc:	ldrsb	r3, [r0, #-1]
   162e0:	cmp	r3, #61	; 0x3d
   162e4:	beq	16448 <__assert_fail@plt+0x40fc>
   162e8:	cmp	r4, #1
   162ec:	beq	1639c <__assert_fail@plt+0x4050>
   162f0:	cmp	r4, #2
   162f4:	beq	163f0 <__assert_fail@plt+0x40a4>
   162f8:	mov	r2, r5
   162fc:	ldr	r1, [pc, #356]	; 16468 <__assert_fail@plt+0x411c>
   16300:	mov	r0, #1
   16304:	bl	12178 <__printf_chk@plt>
   16308:	cmp	r4, #3
   1630c:	ldrls	pc, [pc, r4, lsl #2]
   16310:	b	16460 <__assert_fail@plt+0x4114>
   16314:			; <UNDEFINED> instruction: 0x000163bc
   16318:			; <UNDEFINED> instruction: 0x000163bc
   1631c:	andeq	r6, r1, r0, lsl r4
   16320:	andeq	r6, r1, r4, lsr #6
   16324:	ldr	r3, [sp, #84]	; 0x54
   16328:	mov	r1, #1
   1632c:	str	r3, [sp]
   16330:	mov	r2, #32
   16334:	ldr	r3, [pc, #304]	; 1646c <__assert_fail@plt+0x4120>
   16338:	add	r0, sp, #12
   1633c:	bl	120f4 <__sprintf_chk@plt>
   16340:	mov	r2, r7
   16344:	mov	r3, r9
   16348:	mov	r0, #0
   1634c:	bl	17850 <__assert_fail@plt+0x5504>
   16350:	add	r1, sp, #12
   16354:	mov	r4, r0
   16358:	mov	r2, r0
   1635c:	mov	r0, #1
   16360:	bl	12178 <__printf_chk@plt>
   16364:	mov	r0, r4
   16368:	bl	11dc4 <free@plt>
   1636c:	cmp	r8, #0
   16370:	beq	16384 <__assert_fail@plt+0x4038>
   16374:	mov	r2, r8
   16378:	ldr	r1, [pc, #240]	; 16470 <__assert_fail@plt+0x4124>
   1637c:	mov	r0, #1
   16380:	bl	12178 <__printf_chk@plt>
   16384:	ldr	r2, [sp, #44]	; 0x2c
   16388:	ldr	r3, [r6]
   1638c:	cmp	r2, r3
   16390:	bne	1645c <__assert_fail@plt+0x4110>
   16394:	add	sp, sp, #52	; 0x34
   16398:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1639c:	mov	r2, #5
   163a0:	ldr	r1, [pc, #204]	; 16474 <__assert_fail@plt+0x4128>
   163a4:	mov	r0, #0
   163a8:	bl	11e6c <dcgettext@plt>
   163ac:	mov	r2, r5
   163b0:	mov	r1, r0
   163b4:	mov	r0, r4
   163b8:	bl	12178 <__printf_chk@plt>
   163bc:	ldr	r3, [sp, #84]	; 0x54
   163c0:	add	r0, sp, #12
   163c4:	str	r3, [sp]
   163c8:	mov	r2, #32
   163cc:	ldr	r3, [pc, #164]	; 16478 <__assert_fail@plt+0x412c>
   163d0:	mov	r1, #1
   163d4:	bl	120f4 <__sprintf_chk@plt>
   163d8:	mov	r2, r7
   163dc:	mov	r3, r9
   163e0:	add	r1, sp, #12
   163e4:	mov	r0, #1
   163e8:	bl	12178 <__printf_chk@plt>
   163ec:	b	1636c <__assert_fail@plt+0x4020>
   163f0:	mov	r2, #5
   163f4:	ldr	r1, [pc, #128]	; 1647c <__assert_fail@plt+0x4130>
   163f8:	mov	r0, #0
   163fc:	bl	11e6c <dcgettext@plt>
   16400:	mov	r2, r5
   16404:	mov	r1, r0
   16408:	mov	r0, #1
   1640c:	bl	12178 <__printf_chk@plt>
   16410:	ldr	r3, [sp, #84]	; 0x54
   16414:	add	r0, sp, #12
   16418:	str	r3, [sp]
   1641c:	mov	r2, #32
   16420:	ldr	r3, [pc, #80]	; 16478 <__assert_fail@plt+0x412c>
   16424:	mov	r1, #1
   16428:	bl	120f4 <__sprintf_chk@plt>
   1642c:	lsr	r2, r7, #10
   16430:	add	r1, sp, #12
   16434:	orr	r2, r2, r9, lsl #22
   16438:	lsr	r3, r9, #10
   1643c:	mov	r0, #1
   16440:	bl	12178 <__printf_chk@plt>
   16444:	b	1636c <__assert_fail@plt+0x4020>
   16448:	mov	r2, r5
   1644c:	ldr	r1, [pc, #28]	; 16470 <__assert_fail@plt+0x4124>
   16450:	mov	r0, #1
   16454:	bl	12178 <__printf_chk@plt>
   16458:	b	16308 <__assert_fail@plt+0x3fbc>
   1645c:	bl	11e84 <__stack_chk_fail@plt>
   16460:	bl	122f8 <abort@plt>
   16464:			; <UNDEFINED> instruction: 0x0002fcb8
   16468:	andeq	lr, r1, r0, lsl lr
   1646c:	andeq	lr, r1, r0, lsr #28
   16470:	andeq	lr, r1, r4, asr #4
   16474:	strdeq	lr, [r1], -r0
   16478:	andeq	lr, r1, r8, lsl lr
   1647c:	andeq	lr, r1, r0, lsl #28
   16480:	cmp	r0, #0
   16484:	mov	r3, #0
   16488:	str	r3, [r1]
   1648c:	bxeq	lr
   16490:	ldrsb	r2, [r0]
   16494:	cmp	r2, #47	; 0x2f
   16498:	bne	164d4 <__assert_fail@plt+0x4188>
   1649c:	ldrsb	r3, [r0, #1]
   164a0:	cmp	r3, #47	; 0x2f
   164a4:	bne	164dc <__assert_fail@plt+0x4190>
   164a8:	add	r3, r0, #1
   164ac:	b	164bc <__assert_fail@plt+0x4170>
   164b0:	ldrsb	r2, [r3]
   164b4:	cmp	r2, #47	; 0x2f
   164b8:	bne	164dc <__assert_fail@plt+0x4190>
   164bc:	cmp	r3, #0
   164c0:	mov	r0, r3
   164c4:	bxeq	lr
   164c8:	ldrsb	r2, [r3], #1
   164cc:	cmp	r2, #47	; 0x2f
   164d0:	beq	164b0 <__assert_fail@plt+0x4164>
   164d4:	cmp	r2, #0
   164d8:	beq	16518 <__assert_fail@plt+0x41cc>
   164dc:	mov	r3, #1
   164e0:	str	r3, [r1]
   164e4:	ldrsb	r3, [r0, #1]
   164e8:	add	r2, r0, #1
   164ec:	cmp	r3, #47	; 0x2f
   164f0:	cmpne	r3, #0
   164f4:	bxeq	lr
   164f8:	rsb	r3, r0, #1
   164fc:	add	ip, r2, r3
   16500:	str	ip, [r1]
   16504:	ldrsb	ip, [r2, #1]!
   16508:	cmp	ip, #0
   1650c:	cmpne	ip, #47	; 0x2f
   16510:	bne	164fc <__assert_fail@plt+0x41b0>
   16514:	bx	lr
   16518:	mov	r0, r2
   1651c:	bx	lr
   16520:	push	{r4, r5, r6, r7, r8, lr}
   16524:	mov	r7, r1
   16528:	ldrsb	r1, [r0]
   1652c:	cmp	r1, #0
   16530:	movne	r5, r0
   16534:	movne	r4, #0
   16538:	beq	165a4 <__assert_fail@plt+0x4258>
   1653c:	cmp	r1, #92	; 0x5c
   16540:	addne	r6, r5, r4
   16544:	beq	16574 <__assert_fail@plt+0x4228>
   16548:	mov	r0, r7
   1654c:	bl	12088 <strchr@plt>
   16550:	cmp	r0, #0
   16554:	bne	1659c <__assert_fail@plt+0x4250>
   16558:	ldrsb	r1, [r6, #1]!
   1655c:	add	r4, r4, #1
   16560:	mov	r0, r4
   16564:	cmp	r1, #0
   16568:	popeq	{r4, r5, r6, r7, r8, pc}
   1656c:	cmp	r1, #92	; 0x5c
   16570:	bne	16548 <__assert_fail@plt+0x41fc>
   16574:	add	r3, r5, r4
   16578:	ldrsb	r3, [r3, #1]
   1657c:	cmp	r3, #0
   16580:	beq	1659c <__assert_fail@plt+0x4250>
   16584:	add	r4, r4, #2
   16588:	mov	r0, r4
   1658c:	ldrsb	r1, [r5, r4]
   16590:	cmp	r1, #0
   16594:	bne	1653c <__assert_fail@plt+0x41f0>
   16598:	pop	{r4, r5, r6, r7, r8, pc}
   1659c:	mov	r0, r4
   165a0:	pop	{r4, r5, r6, r7, r8, pc}
   165a4:	mov	r0, r1
   165a8:	pop	{r4, r5, r6, r7, r8, pc}
   165ac:	ldr	ip, [pc, #244]	; 166a8 <__assert_fail@plt+0x435c>
   165b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   165b4:	add	ip, pc, ip
   165b8:	ldr	lr, [pc, #236]	; 166ac <__assert_fail@plt+0x4360>
   165bc:	sub	sp, sp, #12
   165c0:	mov	r5, #0
   165c4:	ldr	r7, [ip, lr]
   165c8:	mov	r4, r0
   165cc:	mov	r8, r1
   165d0:	ldr	r3, [r7]
   165d4:	mov	r0, ip
   165d8:	mov	r9, r2
   165dc:	str	r5, [sp]
   165e0:	str	r3, [sp, #4]
   165e4:	bl	120d0 <__errno_location@plt>
   165e8:	cmp	r4, r5
   165ec:	str	r5, [r0]
   165f0:	beq	16600 <__assert_fail@plt+0x42b4>
   165f4:	ldrsb	r3, [r4]
   165f8:	cmp	r3, r5
   165fc:	bne	16620 <__assert_fail@plt+0x42d4>
   16600:	ldr	r1, [pc, #168]	; 166b0 <__assert_fail@plt+0x4364>
   16604:	mov	r3, r4
   16608:	add	r1, pc, r1
   1660c:	mov	r2, r8
   16610:	ldr	r0, [r1]
   16614:	ldr	r1, [pc, #152]	; 166b4 <__assert_fail@plt+0x4368>
   16618:	add	r1, pc, r1
   1661c:	bl	12220 <errx@plt>
   16620:	mov	r6, r0
   16624:	mov	r2, r9
   16628:	mov	r3, r5
   1662c:	mov	r1, sp
   16630:	mov	r0, r4
   16634:	bl	11e54 <__strtoull_internal@plt>
   16638:	ldr	r2, [r6]
   1663c:	cmp	r2, r5
   16640:	bne	1667c <__assert_fail@plt+0x4330>
   16644:	ldr	r3, [sp]
   16648:	cmp	r3, r4
   1664c:	beq	16600 <__assert_fail@plt+0x42b4>
   16650:	cmp	r3, r5
   16654:	beq	16664 <__assert_fail@plt+0x4318>
   16658:	ldrsb	r3, [r3]
   1665c:	cmp	r3, r5
   16660:	bne	16600 <__assert_fail@plt+0x42b4>
   16664:	ldr	r2, [sp, #4]
   16668:	ldr	r3, [r7]
   1666c:	cmp	r2, r3
   16670:	bne	166a4 <__assert_fail@plt+0x4358>
   16674:	add	sp, sp, #12
   16678:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1667c:	ldr	r3, [pc, #52]	; 166b8 <__assert_fail@plt+0x436c>
   16680:	cmp	r2, #34	; 0x22
   16684:	add	r3, pc, r3
   16688:	ldr	r0, [r3]
   1668c:	bne	16600 <__assert_fail@plt+0x42b4>
   16690:	ldr	r1, [pc, #36]	; 166bc <__assert_fail@plt+0x4370>
   16694:	mov	r3, r4
   16698:	mov	r2, r8
   1669c:	add	r1, pc, r1
   166a0:	bl	11ecc <err@plt>
   166a4:	bl	11e84 <__stack_chk_fail@plt>
   166a8:	andeq	r9, r1, r8, lsl #16
   166ac:	andeq	r0, r0, r0, lsr r2
   166b0:	strdeq	r9, [r1], -r8
   166b4:	andeq	r8, r0, r8, lsl #16
   166b8:	andeq	r9, r1, ip, ror r9
   166bc:	andeq	r8, r0, r4, lsl #15
   166c0:	push	{r4, lr}
   166c4:	mov	r5, r0
   166c8:	mov	r4, r1
   166cc:	bl	120d0 <__errno_location@plt>
   166d0:	ldr	ip, [pc, #32]	; 166f8 <__assert_fail@plt+0x43ac>
   166d4:	ldr	r1, [pc, #32]	; 166fc <__assert_fail@plt+0x43b0>
   166d8:	add	ip, pc, ip
   166dc:	mov	lr, #34	; 0x22
   166e0:	mov	r3, r5
   166e4:	mov	r2, r4
   166e8:	add	r1, pc, r1
   166ec:	str	lr, [r0]
   166f0:	ldr	r0, [ip]
   166f4:	bl	11ecc <err@plt>
   166f8:	andeq	r9, r1, r8, lsr #18
   166fc:	andeq	r8, r0, r8, lsr r7
   16700:	push	{r4, r5, r6, lr}
   16704:	mov	r4, r0
   16708:	mov	r5, r1
   1670c:	bl	165ac <__assert_fail@plt+0x4260>
   16710:	mov	r3, #0
   16714:	mvn	r2, #0
   16718:	cmp	r1, r3
   1671c:	cmpeq	r0, r2
   16720:	popls	{r4, r5, r6, pc}
   16724:	mov	r1, r5
   16728:	mov	r0, r4
   1672c:	bl	166c0 <__assert_fail@plt+0x4374>
   16730:	ldr	r3, [pc, #8]	; 16740 <__assert_fail@plt+0x43f4>
   16734:	add	r3, pc, r3
   16738:	str	r0, [r3]
   1673c:	bx	lr
   16740:	andeq	r9, r1, ip, asr #17
   16744:	ldr	r3, [pc, #1648]	; 16dbc <__assert_fail@plt+0x4a70>
   16748:	ldr	ip, [pc, #1648]	; 16dc0 <__assert_fail@plt+0x4a74>
   1674c:	add	r3, pc, r3
   16750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16754:	mov	r5, r1
   16758:	ldr	r1, [r3, ip]
   1675c:	sub	sp, sp, #52	; 0x34
   16760:	mov	ip, r1
   16764:	mov	r8, r0
   16768:	str	r1, [sp, #24]
   1676c:	mov	r0, #0
   16770:	mov	r1, #0
   16774:	ldr	r3, [ip]
   16778:	strd	r0, [r5]
   1677c:	mov	r9, r2
   16780:	str	r3, [sp, #44]	; 0x2c
   16784:	bl	120d0 <__errno_location@plt>
   16788:	cmp	r8, #0
   1678c:	mov	r4, r0
   16790:	beq	16970 <__assert_fail@plt+0x4624>
   16794:	ldrsb	fp, [r8]
   16798:	cmp	fp, #0
   1679c:	beq	16970 <__assert_fail@plt+0x4624>
   167a0:	bl	12034 <__ctype_b_loc@plt>
   167a4:	mov	r2, r8
   167a8:	ldr	r1, [r0]
   167ac:	b	167b4 <__assert_fail@plt+0x4468>
   167b0:	ldrsb	fp, [r2, #1]!
   167b4:	uxtb	r3, fp
   167b8:	lsl	r3, r3, #1
   167bc:	ldrh	ip, [r1, r3]
   167c0:	ands	ip, ip, #8192	; 0x2000
   167c4:	bne	167b0 <__assert_fail@plt+0x4464>
   167c8:	cmp	fp, #45	; 0x2d
   167cc:	beq	16970 <__assert_fail@plt+0x4624>
   167d0:	add	fp, sp, #40	; 0x28
   167d4:	mov	r3, ip
   167d8:	mov	r2, ip
   167dc:	str	ip, [r4]
   167e0:	mov	r1, fp
   167e4:	mov	r0, r8
   167e8:	str	ip, [sp, #40]	; 0x28
   167ec:	bl	11e54 <__strtoull_internal@plt>
   167f0:	ldr	sl, [sp, #40]	; 0x28
   167f4:	cmp	sl, r8
   167f8:	mov	r2, r0
   167fc:	mov	r3, r1
   16800:	ldr	r0, [r4]
   16804:	strd	r2, [sp, #16]
   16808:	beq	16af0 <__assert_fail@plt+0x47a4>
   1680c:	cmp	r0, #0
   16810:	bne	16998 <__assert_fail@plt+0x464c>
   16814:	cmp	sl, #0
   16818:	beq	16b24 <__assert_fail@plt+0x47d8>
   1681c:	ldrsb	r0, [sl]
   16820:	cmp	r0, #0
   16824:	beq	16b18 <__assert_fail@plt+0x47cc>
   16828:	mov	r8, #0
   1682c:	mov	r2, #0
   16830:	mov	r3, #0
   16834:	str	r9, [sp, #32]
   16838:	mov	r6, fp
   1683c:	mov	r9, sl
   16840:	mov	r7, r8
   16844:	mov	sl, r2
   16848:	mov	fp, r3
   1684c:	str	r5, [sp, #28]
   16850:	ldrsb	r2, [r9, #1]
   16854:	cmp	r2, #105	; 0x69
   16858:	beq	169dc <__assert_fail@plt+0x4690>
   1685c:	bic	r1, r2, #32
   16860:	cmp	r1, #66	; 0x42
   16864:	bne	16afc <__assert_fail@plt+0x47b0>
   16868:	ldrsb	r2, [r9, #2]
   1686c:	cmp	r2, #0
   16870:	beq	16ce0 <__assert_fail@plt+0x4994>
   16874:	bl	12268 <localeconv@plt>
   16878:	cmp	r0, #0
   1687c:	beq	16970 <__assert_fail@plt+0x4624>
   16880:	ldr	r2, [r0]
   16884:	cmp	r2, #0
   16888:	beq	16970 <__assert_fail@plt+0x4624>
   1688c:	mov	r0, r2
   16890:	str	r2, [sp]
   16894:	bl	1207c <strlen@plt>
   16898:	orrs	r3, sl, fp
   1689c:	mov	r5, r0
   168a0:	bne	16970 <__assert_fail@plt+0x4624>
   168a4:	ldrsb	r1, [r9]
   168a8:	cmp	r1, #0
   168ac:	beq	16970 <__assert_fail@plt+0x4624>
   168b0:	ldr	r2, [sp]
   168b4:	mov	r1, r9
   168b8:	mov	r0, r2
   168bc:	mov	r2, r5
   168c0:	bl	122ec <strncmp@plt>
   168c4:	cmp	r0, #0
   168c8:	bne	16970 <__assert_fail@plt+0x4624>
   168cc:	ldrsb	r2, [r9, r5]
   168d0:	add	r5, r9, r5
   168d4:	cmp	r2, #48	; 0x30
   168d8:	bne	168f8 <__assert_fail@plt+0x45ac>
   168dc:	add	r8, r8, #1
   168e0:	sub	r1, r8, r5
   168e4:	mov	r3, r5
   168e8:	add	r8, r3, r1
   168ec:	ldrsb	r2, [r3, #1]!
   168f0:	cmp	r2, #48	; 0x30
   168f4:	beq	168e8 <__assert_fail@plt+0x459c>
   168f8:	mov	r3, #0
   168fc:	str	r7, [r4]
   16900:	mov	r2, r3
   16904:	mov	r1, r6
   16908:	mov	r0, r5
   1690c:	str	r7, [sp, #40]	; 0x28
   16910:	bl	11e54 <__strtoull_internal@plt>
   16914:	ldr	r9, [sp, #40]	; 0x28
   16918:	cmp	r9, r5
   1691c:	mov	sl, r0
   16920:	mov	fp, r1
   16924:	beq	16aec <__assert_fail@plt+0x47a0>
   16928:	ldr	ip, [r4]
   1692c:	cmp	ip, #0
   16930:	beq	169c8 <__assert_fail@plt+0x467c>
   16934:	subs	r3, r0, #1
   16938:	str	r3, [sp, #8]
   1693c:	sbc	r3, r1, #0
   16940:	str	r3, [sp, #12]
   16944:	ldrd	r2, [sp, #8]
   16948:	mvn	r1, #0
   1694c:	mvn	r0, #2
   16950:	cmp	r3, r1
   16954:	cmpeq	r2, r0
   16958:	bhi	16d1c <__assert_fail@plt+0x49d0>
   1695c:	cmp	r9, #0
   16960:	beq	16970 <__assert_fail@plt+0x4624>
   16964:	ldrsb	r2, [r9]
   16968:	cmp	r2, #0
   1696c:	bne	16850 <__assert_fail@plt+0x4504>
   16970:	mov	r3, #22
   16974:	mvn	r0, #21
   16978:	str	r3, [r4]
   1697c:	ldr	r3, [sp, #24]
   16980:	ldr	r2, [sp, #44]	; 0x2c
   16984:	ldr	r3, [r3]
   16988:	cmp	r2, r3
   1698c:	bne	16db8 <__assert_fail@plt+0x4a6c>
   16990:	add	sp, sp, #52	; 0x34
   16994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16998:	subs	r6, r2, #1
   1699c:	sbc	r7, r3, #0
   169a0:	mvn	r3, #0
   169a4:	mvn	r2, #2
   169a8:	cmp	r7, r3
   169ac:	cmpeq	r6, r2
   169b0:	bls	16814 <__assert_fail@plt+0x44c8>
   169b4:	rsb	r0, r0, #0
   169b8:	cmp	r0, #0
   169bc:	bge	1697c <__assert_fail@plt+0x4630>
   169c0:	rsb	r3, r0, #0
   169c4:	b	16978 <__assert_fail@plt+0x462c>
   169c8:	orrs	r3, sl, fp
   169cc:	bne	1695c <__assert_fail@plt+0x4610>
   169d0:	ldrsb	r2, [r9, #1]
   169d4:	cmp	r2, #105	; 0x69
   169d8:	bne	1685c <__assert_fail@plt+0x4510>
   169dc:	ldrsb	r2, [r9, #2]
   169e0:	bic	r2, r2, #32
   169e4:	cmp	r2, #66	; 0x42
   169e8:	bne	16874 <__assert_fail@plt+0x4528>
   169ec:	ldrsb	r2, [r9, #3]
   169f0:	cmp	r2, #0
   169f4:	bne	16874 <__assert_fail@plt+0x4528>
   169f8:	strd	sl, [sp]
   169fc:	mov	sl, r9
   16a00:	ldr	r9, [sp, #32]
   16a04:	mov	r3, #1024	; 0x400
   16a08:	ldr	r5, [sp, #28]
   16a0c:	str	r3, [sp, #28]
   16a10:	ldrsb	r7, [sl]
   16a14:	ldr	r6, [pc, #936]	; 16dc4 <__assert_fail@plt+0x4a78>
   16a18:	add	r6, pc, r6
   16a1c:	mov	r1, r7
   16a20:	mov	r0, r6
   16a24:	bl	12088 <strchr@plt>
   16a28:	cmp	r0, #0
   16a2c:	beq	16cfc <__assert_fail@plt+0x49b0>
   16a30:	sub	ip, r0, r6
   16a34:	add	fp, ip, #1
   16a38:	cmp	fp, #0
   16a3c:	beq	16b08 <__assert_fail@plt+0x47bc>
   16a40:	ldr	r3, [sp, #20]
   16a44:	ldr	r6, [sp, #28]
   16a48:	cmp	r3, #0
   16a4c:	mov	r0, #0
   16a50:	asr	r7, r6, #31
   16a54:	mov	r1, #0
   16a58:	bne	16d58 <__assert_fail@plt+0x4a0c>
   16a5c:	orrs	r3, r0, r1
   16a60:	bne	16b4c <__assert_fail@plt+0x4800>
   16a64:	str	fp, [sp, #32]
   16a68:	sub	ip, ip, #1
   16a6c:	str	r8, [sp, #36]	; 0x24
   16a70:	mov	fp, r4
   16a74:	ldrd	r0, [sp, #16]
   16a78:	mov	lr, r5
   16a7c:	mov	sl, r9
   16a80:	b	16a90 <__assert_fail@plt+0x4744>
   16a84:	orrs	r3, r4, r5
   16a88:	sub	ip, ip, #1
   16a8c:	bne	16b34 <__assert_fail@plt+0x47e8>
   16a90:	mul	r2, r0, r7
   16a94:	cmn	ip, #1
   16a98:	mla	r2, r6, r1, r2
   16a9c:	umull	r0, r1, r0, r6
   16aa0:	add	r2, r2, r1
   16aa4:	mov	r1, r2
   16aa8:	beq	16cc0 <__assert_fail@plt+0x4974>
   16aac:	cmp	r2, #0
   16ab0:	mov	r4, #0
   16ab4:	mov	r5, #0
   16ab8:	beq	16a84 <__assert_fail@plt+0x4738>
   16abc:	umull	r2, r3, r6, r2
   16ac0:	umull	r8, r9, r0, r6
   16ac4:	strd	r2, [sp, #8]
   16ac8:	mov	r8, r9
   16acc:	ldr	r3, [sp, #12]
   16ad0:	adds	r8, r2, r8
   16ad4:	mov	r2, #0
   16ad8:	adc	r3, r3, r2
   16adc:	cmp	r3, r2
   16ae0:	movne	r4, #1
   16ae4:	movne	r5, #0
   16ae8:	b	16a84 <__assert_fail@plt+0x4738>
   16aec:	ldr	r0, [r4]
   16af0:	cmp	r0, #0
   16af4:	beq	16970 <__assert_fail@plt+0x4624>
   16af8:	b	169b4 <__assert_fail@plt+0x4668>
   16afc:	cmp	r2, #0
   16b00:	bne	16874 <__assert_fail@plt+0x4528>
   16b04:	b	169f8 <__assert_fail@plt+0x46ac>
   16b08:	cmp	r9, #0
   16b0c:	movne	r0, fp
   16b10:	bne	16b58 <__assert_fail@plt+0x480c>
   16b14:	mov	r0, r9
   16b18:	ldrd	r2, [sp, #16]
   16b1c:	strd	r2, [r5]
   16b20:	b	1697c <__assert_fail@plt+0x4630>
   16b24:	ldrd	r2, [sp, #16]
   16b28:	mov	r0, sl
   16b2c:	strd	r2, [r5]
   16b30:	b	1697c <__assert_fail@plt+0x4630>
   16b34:	mov	r4, fp
   16b38:	ldr	r8, [sp, #36]	; 0x24
   16b3c:	ldr	fp, [sp, #32]
   16b40:	mov	r5, lr
   16b44:	mov	r9, sl
   16b48:	strd	r0, [sp, #16]
   16b4c:	mvn	r0, #33	; 0x21
   16b50:	cmp	r9, #0
   16b54:	beq	16b5c <__assert_fail@plt+0x4810>
   16b58:	str	fp, [r9]
   16b5c:	ldrd	r2, [sp]
   16b60:	mov	r1, r2
   16b64:	orrs	r3, r1, r3
   16b68:	movne	r3, #1
   16b6c:	moveq	r3, #0
   16b70:	cmp	fp, #0
   16b74:	moveq	r3, #0
   16b78:	cmp	r3, #0
   16b7c:	beq	16cb4 <__assert_fail@plt+0x4968>
   16b80:	ldr	r3, [pc, #576]	; 16dc8 <__assert_fail@plt+0x4a7c>
   16b84:	ldr	r1, [pc, #576]	; 16dcc <__assert_fail@plt+0x4a80>
   16b88:	umull	ip, r3, r3, r8
   16b8c:	smull	ip, r1, r1, r8
   16b90:	lsr	r3, r3, #1
   16b94:	rsb	r1, r1, r8, asr #31
   16b98:	add	r3, r3, r3, lsl #1
   16b9c:	add	r1, r1, fp
   16ba0:	subs	r3, r8, r3
   16ba4:	sub	r6, r1, #1
   16ba8:	bne	16d24 <__assert_fail@plt+0x49d8>
   16bac:	ldrd	r8, [sp]
   16bb0:	adds	r3, r8, r8
   16bb4:	adc	r2, r9, r9
   16bb8:	adds	r3, r3, r8
   16bbc:	adc	r2, r2, r9
   16bc0:	lsl	ip, r3, #5
   16bc4:	lsl	lr, r2, #5
   16bc8:	orr	lr, lr, r3, lsr #27
   16bcc:	adds	r3, r3, ip
   16bd0:	adc	r2, r2, lr
   16bd4:	adds	r3, r8, r3
   16bd8:	str	r3, [sp]
   16bdc:	ldr	r3, [sp, #4]
   16be0:	adc	r3, r3, r2
   16be4:	str	r3, [sp, #4]
   16be8:	cmp	r6, #0
   16bec:	blt	16970 <__assert_fail@plt+0x4624>
   16bf0:	beq	16c98 <__assert_fail@plt+0x494c>
   16bf4:	ldr	r3, [sp, #4]
   16bf8:	ldr	r8, [sp, #28]
   16bfc:	cmp	r3, #0
   16c00:	mov	r6, #0
   16c04:	asr	r9, r8, #31
   16c08:	mov	r7, #0
   16c0c:	bne	16d8c <__assert_fail@plt+0x4a40>
   16c10:	orrs	r3, r6, r7
   16c14:	bne	16c98 <__assert_fail@plt+0x494c>
   16c18:	sub	r1, r1, #3
   16c1c:	ldrd	r2, [sp]
   16c20:	mov	lr, r4
   16c24:	str	r5, [sp, #8]
   16c28:	b	16c38 <__assert_fail@plt+0x48ec>
   16c2c:	orrs	ip, r6, r7
   16c30:	sub	r1, r1, #1
   16c34:	bne	16c8c <__assert_fail@plt+0x4940>
   16c38:	mul	ip, r2, r9
   16c3c:	cmn	r1, #1
   16c40:	mla	ip, r8, r3, ip
   16c44:	umull	r2, r3, r2, r8
   16c48:	add	ip, ip, r3
   16c4c:	mov	r3, ip
   16c50:	beq	16c8c <__assert_fail@plt+0x4940>
   16c54:	cmp	ip, #0
   16c58:	mov	r6, #0
   16c5c:	mov	r7, #0
   16c60:	beq	16c2c <__assert_fail@plt+0x48e0>
   16c64:	umull	sl, fp, r2, r8
   16c68:	umull	r4, r5, r8, ip
   16c6c:	mov	ip, fp
   16c70:	adds	ip, r4, ip
   16c74:	mov	ip, #0
   16c78:	adc	ip, r5, ip
   16c7c:	cmp	ip, #0
   16c80:	movne	r6, #1
   16c84:	movne	r7, #0
   16c88:	b	16c2c <__assert_fail@plt+0x48e0>
   16c8c:	ldr	r5, [sp, #8]
   16c90:	mov	r4, lr
   16c94:	strd	r2, [sp]
   16c98:	ldrd	r2, [sp]
   16c9c:	ldr	r1, [sp, #16]
   16ca0:	adds	r1, r1, r2
   16ca4:	str	r1, [sp, #16]
   16ca8:	ldr	r1, [sp, #20]
   16cac:	adc	r3, r1, r3
   16cb0:	str	r3, [sp, #20]
   16cb4:	ldrd	r2, [sp, #16]
   16cb8:	strd	r2, [r5]
   16cbc:	b	169b8 <__assert_fail@plt+0x466c>
   16cc0:	mov	r4, fp
   16cc4:	strd	r0, [sp, #16]
   16cc8:	ldr	r8, [sp, #36]	; 0x24
   16ccc:	ldr	fp, [sp, #32]
   16cd0:	mov	r5, lr
   16cd4:	mov	r9, sl
   16cd8:	mov	r0, #0
   16cdc:	b	16b50 <__assert_fail@plt+0x4804>
   16ce0:	mov	r3, #1000	; 0x3e8
   16ce4:	strd	sl, [sp]
   16ce8:	ldr	r5, [sp, #28]
   16cec:	mov	sl, r9
   16cf0:	str	r3, [sp, #28]
   16cf4:	ldr	r9, [sp, #32]
   16cf8:	b	16a10 <__assert_fail@plt+0x46c4>
   16cfc:	ldr	r6, [pc, #204]	; 16dd0 <__assert_fail@plt+0x4a84>
   16d00:	mov	r1, r7
   16d04:	add	r6, pc, r6
   16d08:	mov	r0, r6
   16d0c:	bl	12088 <strchr@plt>
   16d10:	cmp	r0, #0
   16d14:	bne	16a30 <__assert_fail@plt+0x46e4>
   16d18:	b	16970 <__assert_fail@plt+0x4624>
   16d1c:	mov	r0, ip
   16d20:	b	169b4 <__assert_fail@plt+0x4668>
   16d24:	cmp	r3, #1
   16d28:	bne	16be8 <__assert_fail@plt+0x489c>
   16d2c:	ldrd	r8, [sp]
   16d30:	lsl	r2, r9, #2
   16d34:	lsl	r3, r8, #2
   16d38:	adds	r3, r3, r8
   16d3c:	orr	r2, r2, r8, lsr #30
   16d40:	adc	r2, r2, r9
   16d44:	adds	r3, r3, r3
   16d48:	str	r3, [sp]
   16d4c:	adc	r3, r2, r2
   16d50:	str	r3, [sp, #4]
   16d54:	b	16be8 <__assert_fail@plt+0x489c>
   16d58:	ldr	lr, [sp, #28]
   16d5c:	ldr	r3, [sp, #16]
   16d60:	ldr	sl, [sp, #20]
   16d64:	umull	r2, r3, r3, lr
   16d68:	str	r3, [sp, #8]
   16d6c:	mov	r3, #0
   16d70:	str	r3, [sp, #12]
   16d74:	ldrd	r2, [sp, #8]
   16d78:	umlal	r2, r3, sl, lr
   16d7c:	cmp	r3, #0
   16d80:	movne	r0, #1
   16d84:	movne	r1, #0
   16d88:	b	16a5c <__assert_fail@plt+0x4710>
   16d8c:	ldr	r3, [sp]
   16d90:	ldr	ip, [sp, #28]
   16d94:	ldr	lr, [sp, #4]
   16d98:	umull	sl, fp, r3, ip
   16d9c:	mov	r3, #0
   16da0:	mov	r2, fp
   16da4:	umlal	r2, r3, lr, ip
   16da8:	cmp	r3, #0
   16dac:	movne	r6, #1
   16db0:	movne	r7, #0
   16db4:	b	16c10 <__assert_fail@plt+0x48c4>
   16db8:	bl	11e84 <__stack_chk_fail@plt>
   16dbc:	andeq	r9, r1, r0, ror r6
   16dc0:	andeq	r0, r0, r0, lsr r2
   16dc4:	andeq	r8, r0, r4, lsl r4
   16dc8:	bge	feac187c <optarg@@GLIBC_2.4+0xfea9185c>
   16dcc:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   16dd0:	andeq	r8, r0, r4, lsr r1
   16dd4:	mov	r2, #0
   16dd8:	b	16744 <__assert_fail@plt+0x43f8>
   16ddc:	push	{r4, r5, r6, lr}
   16de0:	subs	r5, r0, #0
   16de4:	mov	r6, r1
   16de8:	beq	16e54 <__assert_fail@plt+0x4b08>
   16dec:	ldrsb	r4, [r5]
   16df0:	cmp	r4, #0
   16df4:	beq	16e68 <__assert_fail@plt+0x4b1c>
   16df8:	bl	12034 <__ctype_b_loc@plt>
   16dfc:	mov	r3, r5
   16e00:	ldr	r0, [r0]
   16e04:	b	16e1c <__assert_fail@plt+0x4ad0>
   16e08:	adds	r3, r3, #1
   16e0c:	beq	16e54 <__assert_fail@plt+0x4b08>
   16e10:	ldrsb	r4, [r3]
   16e14:	cmp	r4, #0
   16e18:	beq	16e30 <__assert_fail@plt+0x4ae4>
   16e1c:	uxtb	r4, r4
   16e20:	lsl	r4, r4, #1
   16e24:	ldrh	r2, [r0, r4]
   16e28:	tst	r2, #2048	; 0x800
   16e2c:	bne	16e08 <__assert_fail@plt+0x4abc>
   16e30:	cmp	r6, #0
   16e34:	strne	r3, [r6]
   16e38:	cmp	r5, r3
   16e3c:	bcs	16e60 <__assert_fail@plt+0x4b14>
   16e40:	ldrsb	r3, [r3]
   16e44:	cmp	r3, #0
   16e48:	bne	16e60 <__assert_fail@plt+0x4b14>
   16e4c:	mov	r0, #1
   16e50:	pop	{r4, r5, r6, pc}
   16e54:	cmp	r6, #0
   16e58:	movne	r3, #0
   16e5c:	strne	r3, [r6]
   16e60:	mov	r0, #0
   16e64:	pop	{r4, r5, r6, pc}
   16e68:	cmp	r1, #0
   16e6c:	strne	r5, [r1]
   16e70:	b	16e60 <__assert_fail@plt+0x4b14>
   16e74:	push	{r4, r5, r6, lr}
   16e78:	subs	r5, r0, #0
   16e7c:	mov	r6, r1
   16e80:	beq	16eec <__assert_fail@plt+0x4ba0>
   16e84:	ldrsb	r4, [r5]
   16e88:	cmp	r4, #0
   16e8c:	beq	16f00 <__assert_fail@plt+0x4bb4>
   16e90:	bl	12034 <__ctype_b_loc@plt>
   16e94:	mov	r3, r5
   16e98:	ldr	r0, [r0]
   16e9c:	b	16eb4 <__assert_fail@plt+0x4b68>
   16ea0:	adds	r3, r3, #1
   16ea4:	beq	16eec <__assert_fail@plt+0x4ba0>
   16ea8:	ldrsb	r4, [r3]
   16eac:	cmp	r4, #0
   16eb0:	beq	16ec8 <__assert_fail@plt+0x4b7c>
   16eb4:	uxtb	r4, r4
   16eb8:	lsl	r4, r4, #1
   16ebc:	ldrh	r2, [r0, r4]
   16ec0:	tst	r2, #4096	; 0x1000
   16ec4:	bne	16ea0 <__assert_fail@plt+0x4b54>
   16ec8:	cmp	r6, #0
   16ecc:	strne	r3, [r6]
   16ed0:	cmp	r5, r3
   16ed4:	bcs	16ef8 <__assert_fail@plt+0x4bac>
   16ed8:	ldrsb	r3, [r3]
   16edc:	cmp	r3, #0
   16ee0:	bne	16ef8 <__assert_fail@plt+0x4bac>
   16ee4:	mov	r0, #1
   16ee8:	pop	{r4, r5, r6, pc}
   16eec:	cmp	r6, #0
   16ef0:	movne	r3, #0
   16ef4:	strne	r3, [r6]
   16ef8:	mov	r0, #0
   16efc:	pop	{r4, r5, r6, pc}
   16f00:	cmp	r1, #0
   16f04:	strne	r5, [r1]
   16f08:	b	16ef8 <__assert_fail@plt+0x4bac>
   16f0c:	push	{r1, r2, r3}
   16f10:	ldr	r3, [pc, #188]	; 16fd4 <__assert_fail@plt+0x4c88>
   16f14:	ldr	r2, [pc, #188]	; 16fd8 <__assert_fail@plt+0x4c8c>
   16f18:	add	r3, pc, r3
   16f1c:	push	{r4, r5, r6, r7, r8, lr}
   16f20:	sub	sp, sp, #12
   16f24:	ldr	r7, [r3, r2]
   16f28:	ldr	r8, [sp, #36]	; 0x24
   16f2c:	mov	r6, r0
   16f30:	ldr	r3, [r7]
   16f34:	add	r4, sp, #48	; 0x30
   16f38:	str	r3, [sp, #4]
   16f3c:	b	16f58 <__assert_fail@plt+0x4c0c>
   16f40:	mov	r1, r5
   16f44:	mov	r0, r6
   16f48:	bl	11d34 <strcmp@plt>
   16f4c:	add	r4, r4, #8
   16f50:	cmp	r0, #0
   16f54:	beq	16f90 <__assert_fail@plt+0x4c44>
   16f58:	ldr	r1, [r4, #-8]
   16f5c:	sub	r3, r4, #4
   16f60:	cmp	r1, #0
   16f64:	str	r3, [sp]
   16f68:	beq	16fb0 <__assert_fail@plt+0x4c64>
   16f6c:	ldr	r5, [r4, #-4]
   16f70:	str	r4, [sp]
   16f74:	cmp	r5, #0
   16f78:	beq	16fb0 <__assert_fail@plt+0x4c64>
   16f7c:	mov	r0, r6
   16f80:	bl	11d34 <strcmp@plt>
   16f84:	cmp	r0, #0
   16f88:	bne	16f40 <__assert_fail@plt+0x4bf4>
   16f8c:	mov	r0, #1
   16f90:	ldr	r2, [sp, #4]
   16f94:	ldr	r3, [r7]
   16f98:	cmp	r2, r3
   16f9c:	bne	16fd0 <__assert_fail@plt+0x4c84>
   16fa0:	add	sp, sp, #12
   16fa4:	pop	{r4, r5, r6, r7, r8, lr}
   16fa8:	add	sp, sp, #12
   16fac:	bx	lr
   16fb0:	ldr	r1, [pc, #36]	; 16fdc <__assert_fail@plt+0x4c90>
   16fb4:	mov	r3, r6
   16fb8:	add	r1, pc, r1
   16fbc:	mov	r2, r8
   16fc0:	ldr	r0, [r1]
   16fc4:	ldr	r1, [pc, #20]	; 16fe0 <__assert_fail@plt+0x4c94>
   16fc8:	add	r1, pc, r1
   16fcc:	bl	12220 <errx@plt>
   16fd0:	bl	11e84 <__stack_chk_fail@plt>
   16fd4:	andeq	r8, r1, r4, lsr #29
   16fd8:	andeq	r0, r0, r0, lsr r2
   16fdc:	andeq	r9, r1, r8, asr #32
   16fe0:	andeq	r7, r0, r8, asr lr
   16fe4:	cmp	r1, #0
   16fe8:	beq	17034 <__assert_fail@plt+0x4ce8>
   16fec:	ldrsb	r3, [r0]
   16ff0:	cmp	r3, #0
   16ff4:	beq	17034 <__assert_fail@plt+0x4ce8>
   16ff8:	sxtb	r2, r2
   16ffc:	cmp	r3, r2
   17000:	bxeq	lr
   17004:	add	r1, r0, r1
   17008:	add	r3, r0, #1
   1700c:	b	17028 <__assert_fail@plt+0x4cdc>
   17010:	ldrsb	ip, [r3]
   17014:	add	r3, r3, #1
   17018:	cmp	ip, #0
   1701c:	beq	17034 <__assert_fail@plt+0x4ce8>
   17020:	cmp	ip, r2
   17024:	bxeq	lr
   17028:	cmp	r3, r1
   1702c:	mov	r0, r3
   17030:	bne	17010 <__assert_fail@plt+0x4cc4>
   17034:	mov	r0, #0
   17038:	bx	lr
   1703c:	push	{r4, r5, r6, lr}
   17040:	mov	r2, #10
   17044:	mov	r4, r0
   17048:	mov	r5, r1
   1704c:	bl	16700 <__assert_fail@plt+0x43b4>
   17050:	cmp	r0, #65536	; 0x10000
   17054:	bcs	17060 <__assert_fail@plt+0x4d14>
   17058:	uxth	r0, r0
   1705c:	pop	{r4, r5, r6, pc}
   17060:	mov	r1, r5
   17064:	mov	r0, r4
   17068:	bl	166c0 <__assert_fail@plt+0x4374>
   1706c:	push	{r4, r5, r6, lr}
   17070:	mov	r2, #16
   17074:	mov	r4, r0
   17078:	mov	r5, r1
   1707c:	bl	16700 <__assert_fail@plt+0x43b4>
   17080:	cmp	r0, #65536	; 0x10000
   17084:	bcs	17090 <__assert_fail@plt+0x4d44>
   17088:	uxth	r0, r0
   1708c:	pop	{r4, r5, r6, pc}
   17090:	mov	r1, r5
   17094:	mov	r0, r4
   17098:	bl	166c0 <__assert_fail@plt+0x4374>
   1709c:	mov	r2, #10
   170a0:	b	16700 <__assert_fail@plt+0x43b4>
   170a4:	mov	r2, #16
   170a8:	b	16700 <__assert_fail@plt+0x43b4>
   170ac:	ldr	r2, [pc, #236]	; 171a0 <__assert_fail@plt+0x4e54>
   170b0:	ldr	ip, [pc, #236]	; 171a4 <__assert_fail@plt+0x4e58>
   170b4:	add	r2, pc, r2
   170b8:	push	{r4, r5, r6, r7, r8, lr}
   170bc:	sub	sp, sp, #8
   170c0:	ldr	r7, [r2, ip]
   170c4:	mov	r5, #0
   170c8:	mov	r4, r0
   170cc:	ldr	r3, [r7]
   170d0:	mov	r8, r1
   170d4:	str	r5, [sp]
   170d8:	str	r3, [sp, #4]
   170dc:	bl	120d0 <__errno_location@plt>
   170e0:	cmp	r4, r5
   170e4:	str	r5, [r0]
   170e8:	beq	170f8 <__assert_fail@plt+0x4dac>
   170ec:	ldrsb	r3, [r4]
   170f0:	cmp	r3, r5
   170f4:	bne	17118 <__assert_fail@plt+0x4dcc>
   170f8:	ldr	r1, [pc, #168]	; 171a8 <__assert_fail@plt+0x4e5c>
   170fc:	mov	r3, r4
   17100:	add	r1, pc, r1
   17104:	mov	r2, r8
   17108:	ldr	r0, [r1]
   1710c:	ldr	r1, [pc, #152]	; 171ac <__assert_fail@plt+0x4e60>
   17110:	add	r1, pc, r1
   17114:	bl	12220 <errx@plt>
   17118:	mov	r6, r0
   1711c:	mov	r2, #10
   17120:	mov	r3, r5
   17124:	mov	r1, sp
   17128:	mov	r0, r4
   1712c:	bl	122b0 <__strtoll_internal@plt>
   17130:	ldr	r2, [r6]
   17134:	cmp	r2, r5
   17138:	bne	17174 <__assert_fail@plt+0x4e28>
   1713c:	ldr	r3, [sp]
   17140:	cmp	r3, r4
   17144:	beq	170f8 <__assert_fail@plt+0x4dac>
   17148:	cmp	r3, r5
   1714c:	beq	1715c <__assert_fail@plt+0x4e10>
   17150:	ldrsb	r3, [r3]
   17154:	cmp	r3, r5
   17158:	bne	170f8 <__assert_fail@plt+0x4dac>
   1715c:	ldr	r2, [sp, #4]
   17160:	ldr	r3, [r7]
   17164:	cmp	r2, r3
   17168:	bne	1719c <__assert_fail@plt+0x4e50>
   1716c:	add	sp, sp, #8
   17170:	pop	{r4, r5, r6, r7, r8, pc}
   17174:	ldr	r3, [pc, #52]	; 171b0 <__assert_fail@plt+0x4e64>
   17178:	cmp	r2, #34	; 0x22
   1717c:	add	r3, pc, r3
   17180:	ldr	r0, [r3]
   17184:	bne	170f8 <__assert_fail@plt+0x4dac>
   17188:	ldr	r1, [pc, #36]	; 171b4 <__assert_fail@plt+0x4e68>
   1718c:	mov	r3, r4
   17190:	mov	r2, r8
   17194:	add	r1, pc, r1
   17198:	bl	11ecc <err@plt>
   1719c:	bl	11e84 <__stack_chk_fail@plt>
   171a0:	andeq	r8, r1, r8, lsl #26
   171a4:	andeq	r0, r0, r0, lsr r2
   171a8:	andeq	r8, r1, r0, lsl #30
   171ac:	andeq	r7, r0, r0, lsl sp
   171b0:	andeq	r8, r1, r4, lsl #29
   171b4:	andeq	r7, r0, ip, lsl #25
   171b8:	push	{r4, r5, r6, r7, r8, lr}
   171bc:	mov	r7, r0
   171c0:	mov	r6, r1
   171c4:	bl	170ac <__assert_fail@plt+0x4d60>
   171c8:	mov	r3, #0
   171cc:	mvn	r2, #0
   171d0:	adds	r4, r0, #-2147483648	; 0x80000000
   171d4:	adc	r5, r1, #0
   171d8:	cmp	r5, r3
   171dc:	cmpeq	r4, r2
   171e0:	popls	{r4, r5, r6, r7, r8, pc}
   171e4:	bl	120d0 <__errno_location@plt>
   171e8:	ldr	ip, [pc, #32]	; 17210 <__assert_fail@plt+0x4ec4>
   171ec:	ldr	r1, [pc, #32]	; 17214 <__assert_fail@plt+0x4ec8>
   171f0:	add	ip, pc, ip
   171f4:	mov	lr, #34	; 0x22
   171f8:	mov	r3, r7
   171fc:	mov	r2, r6
   17200:	add	r1, pc, r1
   17204:	str	lr, [r0]
   17208:	ldr	r0, [ip]
   1720c:	bl	11ecc <err@plt>
   17210:	andeq	r8, r1, r0, lsl lr
   17214:	andeq	r7, r0, r0, lsr #24
   17218:	push	{r4, r5, r6, lr}
   1721c:	mov	r5, r0
   17220:	mov	r4, r1
   17224:	bl	171b8 <__assert_fail@plt+0x4e6c>
   17228:	add	r3, r0, #32768	; 0x8000
   1722c:	cmp	r3, #65536	; 0x10000
   17230:	bcs	1723c <__assert_fail@plt+0x4ef0>
   17234:	sxth	r0, r0
   17238:	pop	{r4, r5, r6, pc}
   1723c:	bl	120d0 <__errno_location@plt>
   17240:	ldr	ip, [pc, #32]	; 17268 <__assert_fail@plt+0x4f1c>
   17244:	ldr	r1, [pc, #32]	; 1726c <__assert_fail@plt+0x4f20>
   17248:	add	ip, pc, ip
   1724c:	mov	lr, #34	; 0x22
   17250:	mov	r3, r5
   17254:	mov	r2, r4
   17258:	add	r1, pc, r1
   1725c:	str	lr, [r0]
   17260:	ldr	r0, [ip]
   17264:	bl	11ecc <err@plt>
   17268:			; <UNDEFINED> instruction: 0x00018db8
   1726c:	andeq	r7, r0, r8, asr #23
   17270:	mov	r2, #10
   17274:	b	165ac <__assert_fail@plt+0x4260>
   17278:	mov	r2, #16
   1727c:	b	165ac <__assert_fail@plt+0x4260>
   17280:	ldr	r2, [pc, #228]	; 1736c <__assert_fail@plt+0x5020>
   17284:	ldr	r3, [pc, #228]	; 17370 <__assert_fail@plt+0x5024>
   17288:	add	r2, pc, r2
   1728c:	push	{r4, r5, r6, r7, r8, lr}
   17290:	sub	sp, sp, #8
   17294:	ldr	r7, [r2, r3]
   17298:	mov	r5, #0
   1729c:	mov	r4, r0
   172a0:	ldr	r3, [r7]
   172a4:	mov	r8, r1
   172a8:	str	r5, [sp]
   172ac:	str	r3, [sp, #4]
   172b0:	bl	120d0 <__errno_location@plt>
   172b4:	cmp	r4, r5
   172b8:	str	r5, [r0]
   172bc:	beq	172cc <__assert_fail@plt+0x4f80>
   172c0:	ldrsb	r3, [r4]
   172c4:	cmp	r3, r5
   172c8:	bne	172ec <__assert_fail@plt+0x4fa0>
   172cc:	ldr	r1, [pc, #160]	; 17374 <__assert_fail@plt+0x5028>
   172d0:	mov	r3, r4
   172d4:	add	r1, pc, r1
   172d8:	mov	r2, r8
   172dc:	ldr	r0, [r1]
   172e0:	ldr	r1, [pc, #144]	; 17378 <__assert_fail@plt+0x502c>
   172e4:	add	r1, pc, r1
   172e8:	bl	12220 <errx@plt>
   172ec:	mov	r6, r0
   172f0:	mov	r1, sp
   172f4:	mov	r0, r4
   172f8:	bl	12184 <strtod@plt>
   172fc:	ldr	r2, [r6]
   17300:	cmp	r2, r5
   17304:	bne	17340 <__assert_fail@plt+0x4ff4>
   17308:	ldr	r3, [sp]
   1730c:	cmp	r3, r4
   17310:	beq	172cc <__assert_fail@plt+0x4f80>
   17314:	cmp	r3, r5
   17318:	beq	17328 <__assert_fail@plt+0x4fdc>
   1731c:	ldrsb	r3, [r3]
   17320:	cmp	r3, r5
   17324:	bne	172cc <__assert_fail@plt+0x4f80>
   17328:	ldr	r2, [sp, #4]
   1732c:	ldr	r3, [r7]
   17330:	cmp	r2, r3
   17334:	bne	17368 <__assert_fail@plt+0x501c>
   17338:	add	sp, sp, #8
   1733c:	pop	{r4, r5, r6, r7, r8, pc}
   17340:	ldr	r3, [pc, #52]	; 1737c <__assert_fail@plt+0x5030>
   17344:	cmp	r2, #34	; 0x22
   17348:	add	r3, pc, r3
   1734c:	ldr	r0, [r3]
   17350:	bne	172cc <__assert_fail@plt+0x4f80>
   17354:	ldr	r1, [pc, #36]	; 17380 <__assert_fail@plt+0x5034>
   17358:	mov	r3, r4
   1735c:	mov	r2, r8
   17360:	add	r1, pc, r1
   17364:	bl	11ecc <err@plt>
   17368:	bl	11e84 <__stack_chk_fail@plt>
   1736c:	andeq	r8, r1, r4, lsr fp
   17370:	andeq	r0, r0, r0, lsr r2
   17374:	andeq	r8, r1, ip, lsr #26
   17378:	andeq	r7, r0, ip, lsr fp
   1737c:			; <UNDEFINED> instruction: 0x00018cb8
   17380:	andeq	r7, r0, r0, asr #21
   17384:	ldr	r2, [pc, #232]	; 17474 <__assert_fail@plt+0x5128>
   17388:	ldr	r3, [pc, #232]	; 17478 <__assert_fail@plt+0x512c>
   1738c:	add	r2, pc, r2
   17390:	push	{r4, r5, r6, r7, r8, lr}
   17394:	sub	sp, sp, #8
   17398:	ldr	r7, [r2, r3]
   1739c:	mov	r5, #0
   173a0:	mov	r4, r0
   173a4:	ldr	r3, [r7]
   173a8:	mov	r8, r1
   173ac:	str	r5, [sp]
   173b0:	str	r3, [sp, #4]
   173b4:	bl	120d0 <__errno_location@plt>
   173b8:	cmp	r4, r5
   173bc:	str	r5, [r0]
   173c0:	beq	173d0 <__assert_fail@plt+0x5084>
   173c4:	ldrsb	r3, [r4]
   173c8:	cmp	r3, r5
   173cc:	bne	173f0 <__assert_fail@plt+0x50a4>
   173d0:	ldr	r1, [pc, #164]	; 1747c <__assert_fail@plt+0x5130>
   173d4:	mov	r3, r4
   173d8:	add	r1, pc, r1
   173dc:	mov	r2, r8
   173e0:	ldr	r0, [r1]
   173e4:	ldr	r1, [pc, #148]	; 17480 <__assert_fail@plt+0x5134>
   173e8:	add	r1, pc, r1
   173ec:	bl	12220 <errx@plt>
   173f0:	mov	r6, r0
   173f4:	mov	r2, #10
   173f8:	mov	r1, sp
   173fc:	mov	r0, r4
   17400:	bl	11d4c <strtol@plt>
   17404:	ldr	r2, [r6]
   17408:	cmp	r2, r5
   1740c:	bne	17448 <__assert_fail@plt+0x50fc>
   17410:	ldr	r3, [sp]
   17414:	cmp	r3, r4
   17418:	beq	173d0 <__assert_fail@plt+0x5084>
   1741c:	cmp	r3, r5
   17420:	beq	17430 <__assert_fail@plt+0x50e4>
   17424:	ldrsb	r3, [r3]
   17428:	cmp	r3, r5
   1742c:	bne	173d0 <__assert_fail@plt+0x5084>
   17430:	ldr	r2, [sp, #4]
   17434:	ldr	r3, [r7]
   17438:	cmp	r2, r3
   1743c:	bne	17470 <__assert_fail@plt+0x5124>
   17440:	add	sp, sp, #8
   17444:	pop	{r4, r5, r6, r7, r8, pc}
   17448:	ldr	r3, [pc, #52]	; 17484 <__assert_fail@plt+0x5138>
   1744c:	cmp	r2, #34	; 0x22
   17450:	add	r3, pc, r3
   17454:	ldr	r0, [r3]
   17458:	bne	173d0 <__assert_fail@plt+0x5084>
   1745c:	ldr	r1, [pc, #36]	; 17488 <__assert_fail@plt+0x513c>
   17460:	mov	r3, r4
   17464:	mov	r2, r8
   17468:	add	r1, pc, r1
   1746c:	bl	11ecc <err@plt>
   17470:	bl	11e84 <__stack_chk_fail@plt>
   17474:	andeq	r8, r1, r0, lsr sl
   17478:	andeq	r0, r0, r0, lsr r2
   1747c:	andeq	r8, r1, r8, lsr #24
   17480:	andeq	r7, r0, r8, lsr sl
   17484:			; <UNDEFINED> instruction: 0x00018bb0
   17488:			; <UNDEFINED> instruction: 0x000079b8
   1748c:	ldr	r2, [pc, #232]	; 1757c <__assert_fail@plt+0x5230>
   17490:	ldr	r3, [pc, #232]	; 17580 <__assert_fail@plt+0x5234>
   17494:	add	r2, pc, r2
   17498:	push	{r4, r5, r6, r7, r8, lr}
   1749c:	sub	sp, sp, #8
   174a0:	ldr	r7, [r2, r3]
   174a4:	mov	r5, #0
   174a8:	mov	r4, r0
   174ac:	ldr	r3, [r7]
   174b0:	mov	r8, r1
   174b4:	str	r5, [sp]
   174b8:	str	r3, [sp, #4]
   174bc:	bl	120d0 <__errno_location@plt>
   174c0:	cmp	r4, r5
   174c4:	str	r5, [r0]
   174c8:	beq	174d8 <__assert_fail@plt+0x518c>
   174cc:	ldrsb	r3, [r4]
   174d0:	cmp	r3, r5
   174d4:	bne	174f8 <__assert_fail@plt+0x51ac>
   174d8:	ldr	r1, [pc, #164]	; 17584 <__assert_fail@plt+0x5238>
   174dc:	mov	r3, r4
   174e0:	add	r1, pc, r1
   174e4:	mov	r2, r8
   174e8:	ldr	r0, [r1]
   174ec:	ldr	r1, [pc, #148]	; 17588 <__assert_fail@plt+0x523c>
   174f0:	add	r1, pc, r1
   174f4:	bl	12220 <errx@plt>
   174f8:	mov	r6, r0
   174fc:	mov	r2, #10
   17500:	mov	r1, sp
   17504:	mov	r0, r4
   17508:	bl	12070 <strtoul@plt>
   1750c:	ldr	r2, [r6]
   17510:	cmp	r2, r5
   17514:	bne	17550 <__assert_fail@plt+0x5204>
   17518:	ldr	r3, [sp]
   1751c:	cmp	r3, r4
   17520:	beq	174d8 <__assert_fail@plt+0x518c>
   17524:	cmp	r3, r5
   17528:	beq	17538 <__assert_fail@plt+0x51ec>
   1752c:	ldrsb	r3, [r3]
   17530:	cmp	r3, r5
   17534:	bne	174d8 <__assert_fail@plt+0x518c>
   17538:	ldr	r2, [sp, #4]
   1753c:	ldr	r3, [r7]
   17540:	cmp	r2, r3
   17544:	bne	17578 <__assert_fail@plt+0x522c>
   17548:	add	sp, sp, #8
   1754c:	pop	{r4, r5, r6, r7, r8, pc}
   17550:	ldr	r3, [pc, #52]	; 1758c <__assert_fail@plt+0x5240>
   17554:	cmp	r2, #34	; 0x22
   17558:	add	r3, pc, r3
   1755c:	ldr	r0, [r3]
   17560:	bne	174d8 <__assert_fail@plt+0x518c>
   17564:	ldr	r1, [pc, #36]	; 17590 <__assert_fail@plt+0x5244>
   17568:	mov	r3, r4
   1756c:	mov	r2, r8
   17570:	add	r1, pc, r1
   17574:	bl	11ecc <err@plt>
   17578:	bl	11e84 <__stack_chk_fail@plt>
   1757c:	andeq	r8, r1, r8, lsr #18
   17580:	andeq	r0, r0, r0, lsr r2
   17584:	andeq	r8, r1, r0, lsr #22
   17588:	andeq	r7, r0, r0, lsr r9
   1758c:	andeq	r8, r1, r8, lsr #21
   17590:			; <UNDEFINED> instruction: 0x000078b0
   17594:	ldr	r3, [pc, #140]	; 17628 <__assert_fail@plt+0x52dc>
   17598:	ldr	r2, [pc, #140]	; 1762c <__assert_fail@plt+0x52e0>
   1759c:	add	r3, pc, r3
   175a0:	push	{r4, r5, r6, lr}
   175a4:	sub	sp, sp, #16
   175a8:	ldr	r4, [r3, r2]
   175ac:	mov	r5, r1
   175b0:	mov	r1, sp
   175b4:	ldr	r3, [r4]
   175b8:	mov	r6, r0
   175bc:	str	r3, [sp, #12]
   175c0:	bl	16dd4 <__assert_fail@plt+0x4a88>
   175c4:	cmp	r0, #0
   175c8:	beq	17608 <__assert_fail@plt+0x52bc>
   175cc:	bl	120d0 <__errno_location@plt>
   175d0:	ldr	r3, [pc, #88]	; 17630 <__assert_fail@plt+0x52e4>
   175d4:	mov	r2, r5
   175d8:	ldr	r1, [pc, r3]
   175dc:	ldr	r3, [r0]
   175e0:	mov	r0, r1
   175e4:	cmp	r3, #0
   175e8:	mov	r3, r6
   175ec:	beq	175fc <__assert_fail@plt+0x52b0>
   175f0:	ldr	r1, [pc, #60]	; 17634 <__assert_fail@plt+0x52e8>
   175f4:	add	r1, pc, r1
   175f8:	bl	11ecc <err@plt>
   175fc:	ldr	r1, [pc, #52]	; 17638 <__assert_fail@plt+0x52ec>
   17600:	add	r1, pc, r1
   17604:	bl	12220 <errx@plt>
   17608:	ldr	r2, [sp, #12]
   1760c:	ldr	r3, [r4]
   17610:	ldrd	r0, [sp]
   17614:	cmp	r2, r3
   17618:	bne	17624 <__assert_fail@plt+0x52d8>
   1761c:	add	sp, sp, #16
   17620:	pop	{r4, r5, r6, pc}
   17624:	bl	11e84 <__stack_chk_fail@plt>
   17628:	andeq	r8, r1, r0, lsr #16
   1762c:	andeq	r0, r0, r0, lsr r2
   17630:	andeq	r8, r1, r8, lsr #20
   17634:	andeq	r7, r0, ip, lsr #16
   17638:	andeq	r7, r0, r0, lsr #16
   1763c:	push	{r4, lr}
   17640:	mov	r4, r1
   17644:	mov	r1, r2
   17648:	bl	17280 <__assert_fail@plt+0x4f34>
   1764c:	vldr	d6, [pc, #28]	; 17670 <__assert_fail@plt+0x5324>
   17650:	vcvt.s32.f64	s15, d0
   17654:	vcvt.f64.s32	d5, s15
   17658:	vstr	s15, [r4]
   1765c:	vsub.f64	d0, d0, d5
   17660:	vmul.f64	d0, d0, d6
   17664:	vcvt.s32.f64	s0, d0
   17668:	vstr	s0, [r4, #4]
   1766c:	pop	{r4, pc}
   17670:	andeq	r0, r0, r0
   17674:	smlawbmi	lr, r0, r4, r8
   17678:	and	r2, r0, #61440	; 0xf000
   1767c:	cmp	r2, #16384	; 0x4000
   17680:	moveq	r2, r1
   17684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17688:	moveq	sl, #100	; 0x64
   1768c:	mov	r3, r0
   17690:	add	r9, r1, #1
   17694:	add	r8, r1, #2
   17698:	add	r7, r1, #3
   1769c:	add	r6, r1, #4
   176a0:	add	r5, r1, #5
   176a4:	add	r4, r1, #6
   176a8:	add	lr, r1, #7
   176ac:	add	ip, r1, #8
   176b0:	add	r0, r1, #9
   176b4:	strbeq	sl, [r2], #10
   176b8:	beq	1775c <__assert_fail@plt+0x5410>
   176bc:	cmp	r2, #40960	; 0xa000
   176c0:	moveq	r2, r1
   176c4:	moveq	sl, #108	; 0x6c
   176c8:	strbeq	sl, [r2], #10
   176cc:	beq	1775c <__assert_fail@plt+0x5410>
   176d0:	cmp	r2, #8192	; 0x2000
   176d4:	moveq	r2, r1
   176d8:	moveq	sl, #99	; 0x63
   176dc:	strbeq	sl, [r2], #10
   176e0:	beq	1775c <__assert_fail@plt+0x5410>
   176e4:	cmp	r2, #24576	; 0x6000
   176e8:	moveq	r2, r1
   176ec:	moveq	sl, #98	; 0x62
   176f0:	strbeq	sl, [r2], #10
   176f4:	beq	1775c <__assert_fail@plt+0x5410>
   176f8:	cmp	r2, #49152	; 0xc000
   176fc:	moveq	r2, r1
   17700:	moveq	sl, #115	; 0x73
   17704:	strbeq	sl, [r2], #10
   17708:	beq	1775c <__assert_fail@plt+0x5410>
   1770c:	cmp	r2, #4096	; 0x1000
   17710:	moveq	r2, r1
   17714:	moveq	sl, #112	; 0x70
   17718:	strbeq	sl, [r2], #10
   1771c:	beq	1775c <__assert_fail@plt+0x5410>
   17720:	cmp	r2, #32768	; 0x8000
   17724:	moveq	r2, r1
   17728:	moveq	sl, #45	; 0x2d
   1772c:	strbeq	sl, [r2], #10
   17730:	beq	1775c <__assert_fail@plt+0x5410>
   17734:	mov	r2, r0
   17738:	mov	r0, ip
   1773c:	mov	ip, lr
   17740:	mov	lr, r4
   17744:	mov	r4, r5
   17748:	mov	r5, r6
   1774c:	mov	r6, r7
   17750:	mov	r7, r8
   17754:	mov	r8, r9
   17758:	mov	r9, r1
   1775c:	tst	r3, #256	; 0x100
   17760:	movne	fp, #114	; 0x72
   17764:	moveq	fp, #45	; 0x2d
   17768:	tst	r3, #128	; 0x80
   1776c:	movne	sl, #119	; 0x77
   17770:	moveq	sl, #45	; 0x2d
   17774:	tst	r3, #2048	; 0x800
   17778:	strb	fp, [r9]
   1777c:	and	r9, r3, #64	; 0x40
   17780:	strb	sl, [r8]
   17784:	beq	17820 <__assert_fail@plt+0x54d4>
   17788:	cmp	r9, #0
   1778c:	movne	r9, #115	; 0x73
   17790:	moveq	r9, #83	; 0x53
   17794:	tst	r3, #32
   17798:	movne	r8, #114	; 0x72
   1779c:	moveq	r8, #45	; 0x2d
   177a0:	tst	r3, #16
   177a4:	strb	r9, [r7]
   177a8:	movne	r7, #119	; 0x77
   177ac:	moveq	r7, #45	; 0x2d
   177b0:	tst	r3, #1024	; 0x400
   177b4:	strb	r8, [r6]
   177b8:	and	r6, r3, #8
   177bc:	strb	r7, [r5]
   177c0:	beq	17830 <__assert_fail@plt+0x54e4>
   177c4:	cmp	r6, #0
   177c8:	movne	r6, #115	; 0x73
   177cc:	moveq	r6, #83	; 0x53
   177d0:	tst	r3, #4
   177d4:	movne	r5, #114	; 0x72
   177d8:	moveq	r5, #45	; 0x2d
   177dc:	tst	r3, #2
   177e0:	strb	r6, [r4]
   177e4:	movne	r4, #119	; 0x77
   177e8:	moveq	r4, #45	; 0x2d
   177ec:	tst	r3, #512	; 0x200
   177f0:	strb	r5, [lr]
   177f4:	and	r3, r3, #1
   177f8:	strb	r4, [ip]
   177fc:	beq	17840 <__assert_fail@plt+0x54f4>
   17800:	cmp	r3, #0
   17804:	movne	ip, #116	; 0x74
   17808:	moveq	ip, #84	; 0x54
   1780c:	mov	r3, #0
   17810:	strb	ip, [r0]
   17814:	mov	r0, r1
   17818:	strb	r3, [r2]
   1781c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17820:	cmp	r9, #0
   17824:	movne	r9, #120	; 0x78
   17828:	moveq	r9, #45	; 0x2d
   1782c:	b	17794 <__assert_fail@plt+0x5448>
   17830:	cmp	r6, #0
   17834:	movne	r6, #120	; 0x78
   17838:	moveq	r6, #45	; 0x2d
   1783c:	b	177d0 <__assert_fail@plt+0x5484>
   17840:	cmp	r3, #0
   17844:	movne	ip, #120	; 0x78
   17848:	moveq	ip, #45	; 0x2d
   1784c:	b	1780c <__assert_fail@plt+0x54c0>
   17850:	ldr	r1, [pc, #680]	; 17b00 <__assert_fail@plt+0x57b4>
   17854:	ldr	ip, [pc, #680]	; 17b04 <__assert_fail@plt+0x57b8>
   17858:	add	r1, pc, r1
   1785c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17860:	sub	sp, sp, #108	; 0x6c
   17864:	ldr	r8, [r1, ip]
   17868:	tst	r0, #2
   1786c:	strd	r2, [sp, #32]
   17870:	ldr	r1, [r8]
   17874:	addeq	r9, sp, #60	; 0x3c
   17878:	str	r1, [sp, #100]	; 0x64
   1787c:	ldrd	r2, [sp, #32]
   17880:	movne	r1, #32
   17884:	strbne	r1, [sp, #60]	; 0x3c
   17888:	addne	ip, sp, #61	; 0x3d
   1788c:	addne	r9, sp, #60	; 0x3c
   17890:	moveq	ip, r9
   17894:	mov	r1, #10
   17898:	mov	sl, #1
   1789c:	sub	lr, r1, #32
   178a0:	lsl	r4, sl, r1
   178a4:	lsl	r5, sl, lr
   178a8:	rsb	lr, r1, #32
   178ac:	orr	r5, r5, sl, lsr lr
   178b0:	cmp	r3, r5
   178b4:	cmpeq	r2, r4
   178b8:	bcc	17a74 <__assert_fail@plt+0x5728>
   178bc:	add	r1, r1, #10
   178c0:	cmp	r1, #70	; 0x46
   178c4:	bne	1789c <__assert_fail@plt+0x5550>
   178c8:	mov	lr, ip
   178cc:	strd	r2, [sp, #32]
   178d0:	mov	r4, r2
   178d4:	tst	r0, #1
   178d8:	mov	r2, #69	; 0x45
   178dc:	bic	r5, r3, #-268435456	; 0xf0000000
   178e0:	lsr	sl, r3, #28
   178e4:	strb	r2, [lr], #1
   178e8:	bne	17a5c <__assert_fail@plt+0x5710>
   178ec:	orrs	r3, r4, r5
   178f0:	mov	r3, #0
   178f4:	strb	r3, [lr]
   178f8:	beq	17a9c <__assert_fail@plt+0x5750>
   178fc:	sub	r2, r1, #20
   17900:	rsb	r0, r2, #32
   17904:	lsr	r3, r4, r2
   17908:	sub	r1, r1, #52	; 0x34
   1790c:	orr	r3, r3, r5, lsl r0
   17910:	orr	r3, r3, r5, lsr r1
   17914:	lsr	r2, r5, r2
   17918:	adds	r6, r3, #50	; 0x32
   1791c:	adc	r7, r2, #0
   17920:	mov	r3, #0
   17924:	mov	r2, #100	; 0x64
   17928:	mov	r0, r6
   1792c:	mov	r1, r7
   17930:	bl	1d264 <__assert_fail@plt+0xaf18>
   17934:	cmp	r1, #0
   17938:	cmpeq	r0, #10
   1793c:	mov	r2, r0
   17940:	mov	r3, r1
   17944:	addeq	sl, sl, #1
   17948:	beq	17a9c <__assert_fail@plt+0x5750>
   1794c:	cmp	r7, #0
   17950:	cmpeq	r6, #99	; 0x63
   17954:	strd	r2, [sp, #32]
   17958:	bls	17a9c <__assert_fail@plt+0x5750>
   1795c:	bl	12268 <localeconv@plt>
   17960:	ldrd	r2, [sp, #32]
   17964:	cmp	r0, #0
   17968:	beq	17ae4 <__assert_fail@plt+0x5798>
   1796c:	ldr	r0, [r0]
   17970:	cmp	r0, #0
   17974:	beq	17af0 <__assert_fail@plt+0x57a4>
   17978:	ldrsb	r1, [r0]
   1797c:	cmp	r1, #0
   17980:	ldreq	r0, [pc, #384]	; 17b08 <__assert_fail@plt+0x57bc>
   17984:	addeq	r0, pc, r0
   17988:	ldr	r1, [pc, #380]	; 17b0c <__assert_fail@plt+0x57c0>
   1798c:	strd	r2, [sp, #16]
   17990:	add	r1, pc, r1
   17994:	add	r4, sp, #68	; 0x44
   17998:	mov	r3, #32
   1799c:	str	r0, [sp, #8]
   179a0:	str	r1, [sp]
   179a4:	str	r9, [sp, #24]
   179a8:	str	sl, [sp, #4]
   179ac:	mov	r0, r4
   179b0:	mov	r1, r3
   179b4:	mov	r2, #1
   179b8:	bl	12328 <__snprintf_chk@plt>
   179bc:	b	17ac4 <__assert_fail@plt+0x5778>
   179c0:	ldr	r4, [pc, #328]	; 17b10 <__assert_fail@plt+0x57c4>
   179c4:	mvn	sl, #0
   179c8:	ldr	fp, [pc, #324]	; 17b14 <__assert_fail@plt+0x57c8>
   179cc:	umull	r2, r3, lr, r4
   179d0:	sub	r4, r1, #42	; 0x2a
   179d4:	strd	r2, [sp, #40]	; 0x28
   179d8:	ldr	r3, [sp, #44]	; 0x2c
   179dc:	lsl	r2, sl, lr
   179e0:	lsr	r3, r3, #3
   179e4:	str	r3, [sp, #52]	; 0x34
   179e8:	ldr	r3, [sp, #32]
   179ec:	str	r4, [sp, #48]	; 0x30
   179f0:	orr	r4, r2, sl, lsl r4
   179f4:	lsr	r2, r3, lr
   179f8:	mov	r3, r2
   179fc:	ldr	r2, [sp, #52]	; 0x34
   17a00:	add	fp, pc, fp
   17a04:	str	r4, [sp, #40]	; 0x28
   17a08:	ldrsb	fp, [fp, r2]
   17a0c:	mov	r2, r3
   17a10:	ldr	r3, [sp, #36]	; 0x24
   17a14:	rsb	r5, lr, #32
   17a18:	ldr	r4, [sp, #40]	; 0x28
   17a1c:	orr	r2, r2, r3, lsl r5
   17a20:	orr	r4, r4, sl, lsr r5
   17a24:	ldr	r3, [sp, #32]
   17a28:	str	r4, [sp, #40]	; 0x28
   17a2c:	cmp	r0, #0
   17a30:	bic	r4, r3, sl, lsl lr
   17a34:	ldr	r0, [sp, #36]	; 0x24
   17a38:	ldr	r3, [sp, #48]	; 0x30
   17a3c:	mov	lr, ip
   17a40:	orr	sl, r2, r0, lsr r3
   17a44:	ldr	r3, [sp, #40]	; 0x28
   17a48:	strb	fp, [lr], #1
   17a4c:	bic	r5, r0, r3
   17a50:	beq	178ec <__assert_fail@plt+0x55a0>
   17a54:	cmp	fp, #66	; 0x42
   17a58:	beq	178ec <__assert_fail@plt+0x55a0>
   17a5c:	mov	r3, #105	; 0x69
   17a60:	strb	r3, [ip, #1]
   17a64:	mov	r3, #66	; 0x42
   17a68:	add	lr, ip, #3
   17a6c:	strb	r3, [ip, #2]
   17a70:	b	178ec <__assert_fail@plt+0x55a0>
   17a74:	subs	lr, r1, #10
   17a78:	strd	r2, [sp, #32]
   17a7c:	and	r0, r0, #1
   17a80:	bne	179c0 <__assert_fail@plt+0x5674>
   17a84:	ldr	sl, [sp, #32]
   17a88:	cmp	r0, #0
   17a8c:	movne	r0, lr
   17a90:	mov	r3, #66	; 0x42
   17a94:	strb	r0, [ip, #1]
   17a98:	strb	r3, [ip]
   17a9c:	ldr	r2, [pc, #116]	; 17b18 <__assert_fail@plt+0x57cc>
   17aa0:	add	r4, sp, #68	; 0x44
   17aa4:	add	r2, pc, r2
   17aa8:	mov	r3, #32
   17aac:	stm	sp, {r2, sl}
   17ab0:	str	r9, [sp, #8]
   17ab4:	mov	r0, r4
   17ab8:	mov	r1, r3
   17abc:	mov	r2, #1
   17ac0:	bl	12328 <__snprintf_chk@plt>
   17ac4:	mov	r0, r4
   17ac8:	bl	11e78 <strdup@plt>
   17acc:	ldr	r2, [sp, #100]	; 0x64
   17ad0:	ldr	r3, [r8]
   17ad4:	cmp	r2, r3
   17ad8:	bne	17afc <__assert_fail@plt+0x57b0>
   17adc:	add	sp, sp, #108	; 0x6c
   17ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae4:	ldr	r0, [pc, #48]	; 17b1c <__assert_fail@plt+0x57d0>
   17ae8:	add	r0, pc, r0
   17aec:	b	17988 <__assert_fail@plt+0x563c>
   17af0:	ldr	r0, [pc, #40]	; 17b20 <__assert_fail@plt+0x57d4>
   17af4:	add	r0, pc, r0
   17af8:	b	17988 <__assert_fail@plt+0x563c>
   17afc:	bl	11e84 <__stack_chk_fail@plt>
   17b00:	andeq	r8, r1, r4, ror #10
   17b04:	andeq	r0, r0, r0, lsr r2
   17b08:	andeq	r7, r0, r4, asr r6
   17b0c:			; <UNDEFINED> instruction: 0x000074bc
   17b10:	stclgt	12, cr12, [ip], {205}	; 0xcd
   17b14:	andeq	r7, r0, r4, asr #8
   17b18:			; <UNDEFINED> instruction: 0x000073b4
   17b1c:	strdeq	r7, [r0], -r0
   17b20:	andeq	r7, r0, r4, ror #9
   17b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b28:	subs	r4, r0, #0
   17b2c:	beq	17bfc <__assert_fail@plt+0x58b0>
   17b30:	ldrsb	lr, [r4]
   17b34:	cmp	lr, #0
   17b38:	beq	17bfc <__assert_fail@plt+0x58b0>
   17b3c:	cmp	r1, #0
   17b40:	clz	ip, r2
   17b44:	lsr	ip, ip, #5
   17b48:	moveq	r0, #1
   17b4c:	movne	r0, ip
   17b50:	cmp	r3, #0
   17b54:	moveq	r0, #1
   17b58:	cmp	r0, #0
   17b5c:	bne	17bfc <__assert_fail@plt+0x58b0>
   17b60:	mov	r8, r3
   17b64:	mov	r7, r2
   17b68:	mov	r9, r1
   17b6c:	mov	r5, r0
   17b70:	b	17bcc <__assert_fail@plt+0x5880>
   17b74:	cmp	r3, #0
   17b78:	bne	17bb8 <__assert_fail@plt+0x586c>
   17b7c:	cmn	r4, #1
   17b80:	add	r6, r4, #1
   17b84:	beq	17c04 <__assert_fail@plt+0x58b8>
   17b88:	cmp	r0, r6
   17b8c:	bcs	17bfc <__assert_fail@plt+0x58b0>
   17b90:	sub	r1, r6, r0
   17b94:	blx	r8
   17b98:	cmn	r0, #1
   17b9c:	beq	17bfc <__assert_fail@plt+0x58b0>
   17ba0:	str	r0, [r9, r5, lsl #2]
   17ba4:	ldrsb	r3, [r6]
   17ba8:	add	r5, r5, #1
   17bac:	cmp	r3, #0
   17bb0:	beq	17c04 <__assert_fail@plt+0x58b8>
   17bb4:	mov	r0, #0
   17bb8:	cmn	r4, #1
   17bbc:	beq	17c04 <__assert_fail@plt+0x58b8>
   17bc0:	ldrsb	lr, [r4, #1]!
   17bc4:	cmp	lr, #0
   17bc8:	beq	17c04 <__assert_fail@plt+0x58b8>
   17bcc:	cmp	r7, r5
   17bd0:	mov	r6, r4
   17bd4:	bls	17c0c <__assert_fail@plt+0x58c0>
   17bd8:	cmp	r0, #0
   17bdc:	moveq	r0, r4
   17be0:	cmp	lr, #44	; 0x2c
   17be4:	ldrsb	r3, [r4, #1]
   17be8:	bne	17b74 <__assert_fail@plt+0x5828>
   17bec:	cmp	r3, #0
   17bf0:	beq	17b7c <__assert_fail@plt+0x5830>
   17bf4:	cmp	r0, r6
   17bf8:	bcc	17b90 <__assert_fail@plt+0x5844>
   17bfc:	mvn	r0, #0
   17c00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c04:	mov	r0, r5
   17c08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c0c:	mvn	r0, #1
   17c10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c14:	cmp	r0, #0
   17c18:	beq	17c84 <__assert_fail@plt+0x5938>
   17c1c:	push	{r4, lr}
   17c20:	mov	r4, r3
   17c24:	cmp	r4, #0
   17c28:	ldrsb	ip, [r0]
   17c2c:	clz	r3, ip
   17c30:	lsr	r3, r3, #5
   17c34:	moveq	r3, #1
   17c38:	cmp	r3, #0
   17c3c:	bne	17c7c <__assert_fail@plt+0x5930>
   17c40:	ldr	lr, [r4]
   17c44:	cmp	lr, r2
   17c48:	bhi	17c7c <__assert_fail@plt+0x5930>
   17c4c:	cmp	ip, #43	; 0x2b
   17c50:	strne	r3, [r4]
   17c54:	addeq	r0, r0, #1
   17c58:	ldr	r3, [sp, #8]
   17c5c:	addeq	r1, r1, lr, lsl #2
   17c60:	subeq	r2, r2, lr
   17c64:	bl	17b24 <__assert_fail@plt+0x57d8>
   17c68:	cmp	r0, #0
   17c6c:	ldrgt	r3, [r4]
   17c70:	addgt	r3, r3, r0
   17c74:	strgt	r3, [r4]
   17c78:	pop	{r4, pc}
   17c7c:	mvn	r0, #0
   17c80:	pop	{r4, pc}
   17c84:	mvn	r0, #0
   17c88:	bx	lr
   17c8c:	cmp	r2, #0
   17c90:	clz	r3, r1
   17c94:	lsr	r3, r3, #5
   17c98:	moveq	r3, #1
   17c9c:	cmp	r0, #0
   17ca0:	moveq	r3, #1
   17ca4:	cmp	r3, #0
   17ca8:	bne	17d74 <__assert_fail@plt+0x5a28>
   17cac:	push	{r4, r5, r6, r7, r8, lr}
   17cb0:	mov	r6, r2
   17cb4:	mov	r2, r3
   17cb8:	ldrsb	r3, [r0]
   17cbc:	mov	r8, r1
   17cc0:	mov	r4, r0
   17cc4:	mov	r7, #1
   17cc8:	cmp	r3, #0
   17ccc:	beq	17d3c <__assert_fail@plt+0x59f0>
   17cd0:	cmp	r2, #0
   17cd4:	moveq	r2, r4
   17cd8:	cmp	r3, #44	; 0x2c
   17cdc:	mov	r5, r4
   17ce0:	ldrsb	r3, [r4, #1]!
   17ce4:	beq	17d44 <__assert_fail@plt+0x59f8>
   17ce8:	cmp	r3, #0
   17cec:	bne	17d64 <__assert_fail@plt+0x5a18>
   17cf0:	mov	r5, r4
   17cf4:	cmp	r2, r5
   17cf8:	sub	r1, r5, r2
   17cfc:	mov	r0, r2
   17d00:	bcs	17d5c <__assert_fail@plt+0x5a10>
   17d04:	blx	r6
   17d08:	mov	r2, r4
   17d0c:	cmp	r0, #0
   17d10:	and	r1, r0, #7
   17d14:	poplt	{r4, r5, r6, r7, r8, pc}
   17d18:	ldrb	r3, [r8, r0, asr #3]
   17d1c:	orr	r3, r3, r7, lsl r1
   17d20:	strb	r3, [r8, r0, asr #3]
   17d24:	ldrsb	r3, [r5]
   17d28:	cmp	r3, #0
   17d2c:	beq	17d3c <__assert_fail@plt+0x59f0>
   17d30:	ldrsb	r3, [r4]
   17d34:	cmp	r3, #0
   17d38:	bne	17cd8 <__assert_fail@plt+0x598c>
   17d3c:	mov	r0, #0
   17d40:	pop	{r4, r5, r6, r7, r8, pc}
   17d44:	cmp	r3, #0
   17d48:	moveq	r5, r4
   17d4c:	cmp	r2, r5
   17d50:	sub	r1, r5, r2
   17d54:	mov	r0, r2
   17d58:	bcc	17d04 <__assert_fail@plt+0x59b8>
   17d5c:	mvn	r0, #0
   17d60:	pop	{r4, r5, r6, r7, r8, pc}
   17d64:	adds	r4, r5, #1
   17d68:	bne	17cc8 <__assert_fail@plt+0x597c>
   17d6c:	mov	r0, #0
   17d70:	pop	{r4, r5, r6, r7, r8, pc}
   17d74:	mvn	r0, #21
   17d78:	bx	lr
   17d7c:	cmp	r2, #0
   17d80:	clz	r3, r1
   17d84:	lsr	r3, r3, #5
   17d88:	moveq	r3, #1
   17d8c:	cmp	r0, #0
   17d90:	moveq	r3, #1
   17d94:	cmp	r3, #0
   17d98:	bne	17e5c <__assert_fail@plt+0x5b10>
   17d9c:	push	{r4, r5, r6, r7, r8, lr}
   17da0:	mov	r6, r2
   17da4:	mov	r2, r3
   17da8:	ldrsb	r3, [r0]
   17dac:	mov	r7, r1
   17db0:	mov	r4, r0
   17db4:	cmp	r3, #0
   17db8:	beq	17e24 <__assert_fail@plt+0x5ad8>
   17dbc:	cmp	r2, #0
   17dc0:	moveq	r2, r4
   17dc4:	cmp	r3, #44	; 0x2c
   17dc8:	mov	r5, r4
   17dcc:	ldrsb	r3, [r4, #1]!
   17dd0:	beq	17e2c <__assert_fail@plt+0x5ae0>
   17dd4:	cmp	r3, #0
   17dd8:	bne	17e4c <__assert_fail@plt+0x5b00>
   17ddc:	mov	r5, r4
   17de0:	cmp	r2, r5
   17de4:	sub	r1, r5, r2
   17de8:	mov	r0, r2
   17dec:	bcs	17e44 <__assert_fail@plt+0x5af8>
   17df0:	blx	r6
   17df4:	mov	r2, r4
   17df8:	cmp	r0, #0
   17dfc:	poplt	{r4, r5, r6, r7, r8, pc}
   17e00:	ldr	r3, [r7]
   17e04:	orr	r3, r3, r0
   17e08:	str	r3, [r7]
   17e0c:	ldrsb	r3, [r5]
   17e10:	cmp	r3, #0
   17e14:	beq	17e24 <__assert_fail@plt+0x5ad8>
   17e18:	ldrsb	r3, [r4]
   17e1c:	cmp	r3, #0
   17e20:	bne	17dc4 <__assert_fail@plt+0x5a78>
   17e24:	mov	r0, #0
   17e28:	pop	{r4, r5, r6, r7, r8, pc}
   17e2c:	cmp	r3, #0
   17e30:	moveq	r5, r4
   17e34:	cmp	r2, r5
   17e38:	sub	r1, r5, r2
   17e3c:	mov	r0, r2
   17e40:	bcc	17df0 <__assert_fail@plt+0x5aa4>
   17e44:	mvn	r0, #0
   17e48:	pop	{r4, r5, r6, r7, r8, pc}
   17e4c:	adds	r4, r5, #1
   17e50:	bne	17db4 <__assert_fail@plt+0x5a68>
   17e54:	mov	r0, #0
   17e58:	pop	{r4, r5, r6, r7, r8, pc}
   17e5c:	mvn	r0, #21
   17e60:	bx	lr
   17e64:	ldr	ip, [pc, #396]	; 17ff8 <__assert_fail@plt+0x5cac>
   17e68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e6c:	add	ip, pc, ip
   17e70:	ldr	lr, [pc, #388]	; 17ffc <__assert_fail@plt+0x5cb0>
   17e74:	sub	sp, sp, #8
   17e78:	mov	r9, r3
   17e7c:	ldr	r5, [ip, lr]
   17e80:	mov	sl, #0
   17e84:	subs	r4, r0, #0
   17e88:	ldr	r3, [r5]
   17e8c:	mov	r7, r1
   17e90:	str	sl, [sp]
   17e94:	mov	r1, ip
   17e98:	str	r3, [sp, #4]
   17e9c:	beq	17f10 <__assert_fail@plt+0x5bc4>
   17ea0:	str	r9, [r7]
   17ea4:	str	r9, [r2]
   17ea8:	mov	r6, r2
   17eac:	bl	120d0 <__errno_location@plt>
   17eb0:	str	sl, [r0]
   17eb4:	ldrsb	r3, [r4]
   17eb8:	mov	r8, r0
   17ebc:	cmp	r3, #58	; 0x3a
   17ec0:	beq	17f2c <__assert_fail@plt+0x5be0>
   17ec4:	mov	sl, sp
   17ec8:	mov	r1, sl
   17ecc:	mov	r2, #10
   17ed0:	mov	r0, r4
   17ed4:	bl	11d4c <strtol@plt>
   17ed8:	str	r0, [r7]
   17edc:	str	r0, [r6]
   17ee0:	ldr	r0, [r8]
   17ee4:	cmp	r0, #0
   17ee8:	bne	17f7c <__assert_fail@plt+0x5c30>
   17eec:	ldr	r2, [sp]
   17ef0:	cmp	r2, #0
   17ef4:	cmpne	r2, r4
   17ef8:	beq	17f7c <__assert_fail@plt+0x5c30>
   17efc:	ldrsb	r3, [r2]
   17f00:	cmp	r3, #58	; 0x3a
   17f04:	beq	17f84 <__assert_fail@plt+0x5c38>
   17f08:	cmp	r3, #45	; 0x2d
   17f0c:	beq	17f94 <__assert_fail@plt+0x5c48>
   17f10:	mov	r0, #0
   17f14:	ldr	r2, [sp, #4]
   17f18:	ldr	r3, [r5]
   17f1c:	cmp	r2, r3
   17f20:	bne	17ff4 <__assert_fail@plt+0x5ca8>
   17f24:	add	sp, sp, #8
   17f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f2c:	add	r4, r4, #1
   17f30:	mov	r0, r4
   17f34:	mov	r2, #10
   17f38:	mov	r1, sp
   17f3c:	bl	11d4c <strtol@plt>
   17f40:	str	r0, [r6]
   17f44:	ldr	r3, [r8]
   17f48:	cmp	r3, #0
   17f4c:	bne	17f7c <__assert_fail@plt+0x5c30>
   17f50:	ldr	r3, [sp]
   17f54:	cmp	r3, #0
   17f58:	beq	17f7c <__assert_fail@plt+0x5c30>
   17f5c:	ldrsb	r2, [r3]
   17f60:	sub	r3, r3, r4
   17f64:	clz	r3, r3
   17f68:	cmp	r2, #0
   17f6c:	lsr	r3, r3, #5
   17f70:	movne	r3, #1
   17f74:	cmp	r3, #0
   17f78:	beq	17f10 <__assert_fail@plt+0x5bc4>
   17f7c:	mvn	r0, #0
   17f80:	b	17f14 <__assert_fail@plt+0x5bc8>
   17f84:	ldrsb	r3, [r2, #1]
   17f88:	cmp	r3, #0
   17f8c:	streq	r9, [r6]
   17f90:	beq	17f14 <__assert_fail@plt+0x5bc8>
   17f94:	mov	r3, #0
   17f98:	add	r4, r2, #1
   17f9c:	str	r3, [r8]
   17fa0:	mov	r1, sl
   17fa4:	mov	r0, r4
   17fa8:	mov	r2, #10
   17fac:	str	r3, [sp]
   17fb0:	bl	11d4c <strtol@plt>
   17fb4:	str	r0, [r6]
   17fb8:	ldr	r3, [r8]
   17fbc:	cmp	r3, #0
   17fc0:	bne	17f7c <__assert_fail@plt+0x5c30>
   17fc4:	ldr	r2, [sp]
   17fc8:	cmp	r2, #0
   17fcc:	beq	17f7c <__assert_fail@plt+0x5c30>
   17fd0:	ldrsb	r3, [r2]
   17fd4:	sub	r2, r2, r4
   17fd8:	clz	r2, r2
   17fdc:	cmp	r3, #0
   17fe0:	lsr	r2, r2, #5
   17fe4:	movne	r2, #1
   17fe8:	cmp	r2, #0
   17fec:	beq	17f10 <__assert_fail@plt+0x5bc4>
   17ff0:	b	17f7c <__assert_fail@plt+0x5c30>
   17ff4:	bl	11e84 <__stack_chk_fail@plt>
   17ff8:	andeq	r7, r1, r0, asr pc
   17ffc:	andeq	r0, r0, r0, lsr r2
   18000:	ldr	r3, [pc, #244]	; 180fc <__assert_fail@plt+0x5db0>
   18004:	ldr	r2, [pc, #244]	; 18100 <__assert_fail@plt+0x5db4>
   18008:	add	r3, pc, r3
   1800c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18010:	sub	sp, sp, #20
   18014:	ldr	r9, [r3, r2]
   18018:	cmp	r0, #0
   1801c:	cmpne	r1, #0
   18020:	ldr	r3, [r9]
   18024:	str	r3, [sp, #12]
   18028:	beq	180f0 <__assert_fail@plt+0x5da4>
   1802c:	mov	r4, r1
   18030:	add	r8, sp, #4
   18034:	add	r7, sp, #8
   18038:	b	18078 <__assert_fail@plt+0x5d2c>
   1803c:	cmp	r4, r3
   18040:	bne	180f0 <__assert_fail@plt+0x5da4>
   18044:	mov	r2, r4
   18048:	mov	r1, r6
   1804c:	mov	r0, r5
   18050:	bl	122ec <strncmp@plt>
   18054:	cmp	r0, #0
   18058:	bne	180f0 <__assert_fail@plt+0x5da4>
   1805c:	adds	r0, r5, r4
   18060:	moveq	r3, #0
   18064:	movne	r3, #1
   18068:	adds	r4, r6, r4
   1806c:	moveq	r3, #0
   18070:	cmp	r3, #0
   18074:	beq	180f0 <__assert_fail@plt+0x5da4>
   18078:	mov	r1, r8
   1807c:	bl	16480 <__assert_fail@plt+0x4134>
   18080:	mov	r1, r7
   18084:	mov	r5, r0
   18088:	mov	r0, r4
   1808c:	bl	16480 <__assert_fail@plt+0x4134>
   18090:	ldr	r4, [sp, #4]
   18094:	ldr	r3, [sp, #8]
   18098:	mov	r6, r0
   1809c:	adds	r0, r4, r3
   180a0:	beq	180d4 <__assert_fail@plt+0x5d88>
   180a4:	cmp	r0, #1
   180a8:	bne	1803c <__assert_fail@plt+0x5cf0>
   180ac:	cmp	r5, #0
   180b0:	beq	180c0 <__assert_fail@plt+0x5d74>
   180b4:	ldrsb	r2, [r5]
   180b8:	cmp	r2, #47	; 0x2f
   180bc:	beq	180d8 <__assert_fail@plt+0x5d8c>
   180c0:	cmp	r6, #0
   180c4:	beq	1803c <__assert_fail@plt+0x5cf0>
   180c8:	ldrsb	r2, [r6]
   180cc:	cmp	r2, #47	; 0x2f
   180d0:	bne	1803c <__assert_fail@plt+0x5cf0>
   180d4:	mov	r0, #1
   180d8:	ldr	r2, [sp, #12]
   180dc:	ldr	r3, [r9]
   180e0:	cmp	r2, r3
   180e4:	bne	180f8 <__assert_fail@plt+0x5dac>
   180e8:	add	sp, sp, #20
   180ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   180f0:	mov	r0, #0
   180f4:	b	180d8 <__assert_fail@plt+0x5d8c>
   180f8:	bl	11e84 <__stack_chk_fail@plt>
   180fc:			; <UNDEFINED> instruction: 0x00017db4
   18100:	andeq	r0, r0, r0, lsr r2
   18104:	orrs	r3, r0, r1
   18108:	beq	18184 <__assert_fail@plt+0x5e38>
   1810c:	cmp	r0, #0
   18110:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18114:	mov	r4, r1
   18118:	mov	r5, r0
   1811c:	beq	18190 <__assert_fail@plt+0x5e44>
   18120:	cmp	r1, #0
   18124:	beq	181a0 <__assert_fail@plt+0x5e54>
   18128:	mov	r6, r2
   1812c:	bl	1207c <strlen@plt>
   18130:	mvn	r3, r0
   18134:	cmp	r6, r3
   18138:	mov	r7, r0
   1813c:	movhi	r8, #0
   18140:	bhi	1817c <__assert_fail@plt+0x5e30>
   18144:	add	r9, r6, r0
   18148:	add	r0, r9, #1
   1814c:	bl	11fb0 <malloc@plt>
   18150:	subs	r8, r0, #0
   18154:	beq	1817c <__assert_fail@plt+0x5e30>
   18158:	mov	r1, r5
   1815c:	mov	r2, r7
   18160:	bl	11e48 <memcpy@plt>
   18164:	mov	r2, r6
   18168:	mov	r1, r4
   1816c:	add	r0, r8, r7
   18170:	bl	11e48 <memcpy@plt>
   18174:	mov	r3, #0
   18178:	strb	r3, [r8, r9]
   1817c:	mov	r0, r8
   18180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18184:	ldr	r0, [pc, #28]	; 181a8 <__assert_fail@plt+0x5e5c>
   18188:	add	r0, pc, r0
   1818c:	b	11e78 <strdup@plt>
   18190:	mov	r0, r4
   18194:	mov	r1, r2
   18198:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1819c:	b	11e0c <strndup@plt>
   181a0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   181a4:	b	11e78 <strdup@plt>
   181a8:	andeq	r6, r0, ip, asr #31
   181ac:	push	{r4, r5, r6, lr}
   181b0:	subs	r4, r1, #0
   181b4:	mov	r5, r0
   181b8:	moveq	r2, r4
   181bc:	beq	181cc <__assert_fail@plt+0x5e80>
   181c0:	mov	r0, r4
   181c4:	bl	1207c <strlen@plt>
   181c8:	mov	r2, r0
   181cc:	mov	r1, r4
   181d0:	mov	r0, r5
   181d4:	pop	{r4, r5, r6, lr}
   181d8:	b	18104 <__assert_fail@plt+0x5db8>
   181dc:	push	{r1, r2, r3}
   181e0:	ldr	r1, [pc, #132]	; 1826c <__assert_fail@plt+0x5f20>
   181e4:	ldr	r3, [pc, #132]	; 18270 <__assert_fail@plt+0x5f24>
   181e8:	add	r1, pc, r1
   181ec:	push	{r4, r5, lr}
   181f0:	mov	r5, r0
   181f4:	ldr	r4, [r1, r3]
   181f8:	sub	sp, sp, #16
   181fc:	add	ip, sp, #32
   18200:	ldr	r0, [r4]
   18204:	ldr	r2, [sp, #28]
   18208:	str	r0, [sp, #12]
   1820c:	mov	r3, ip
   18210:	add	r0, sp, #8
   18214:	mov	r1, #1
   18218:	str	ip, [sp, #4]
   1821c:	bl	1210c <__vasprintf_chk@plt>
   18220:	subs	r2, r0, #0
   18224:	movlt	r5, #0
   18228:	blt	18244 <__assert_fail@plt+0x5ef8>
   1822c:	mov	r0, r5
   18230:	ldr	r1, [sp, #8]
   18234:	bl	18104 <__assert_fail@plt+0x5db8>
   18238:	mov	r5, r0
   1823c:	ldr	r0, [sp, #8]
   18240:	bl	11dc4 <free@plt>
   18244:	ldr	r2, [sp, #12]
   18248:	ldr	r3, [r4]
   1824c:	mov	r0, r5
   18250:	cmp	r2, r3
   18254:	bne	18268 <__assert_fail@plt+0x5f1c>
   18258:	add	sp, sp, #16
   1825c:	pop	{r4, r5, lr}
   18260:	add	sp, sp, #12
   18264:	bx	lr
   18268:	bl	11e84 <__stack_chk_fail@plt>
   1826c:	ldrdeq	r7, [r1], -r4
   18270:	andeq	r0, r0, r0, lsr r2
   18274:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18278:	mov	r6, r0
   1827c:	ldr	r0, [pc, #348]	; 183e0 <__assert_fail@plt+0x6094>
   18280:	ldr	ip, [pc, #348]	; 183e4 <__assert_fail@plt+0x6098>
   18284:	add	r0, pc, r0
   18288:	ldr	r5, [r6]
   1828c:	ldr	r8, [r0, ip]
   18290:	sub	sp, sp, #8
   18294:	ldrsb	r4, [r5]
   18298:	mov	r9, r2
   1829c:	ldr	r2, [r8]
   182a0:	cmp	r4, #0
   182a4:	mov	r7, r1
   182a8:	str	r2, [sp, #4]
   182ac:	mov	r1, r0
   182b0:	beq	18360 <__assert_fail@plt+0x6014>
   182b4:	mov	r0, r5
   182b8:	mov	r1, r9
   182bc:	mov	sl, r3
   182c0:	bl	12340 <strspn@plt>
   182c4:	add	r4, r5, r0
   182c8:	ldrsb	r5, [r5, r0]
   182cc:	cmp	r5, #0
   182d0:	beq	183c8 <__assert_fail@plt+0x607c>
   182d4:	cmp	sl, #0
   182d8:	beq	1837c <__assert_fail@plt+0x6030>
   182dc:	ldr	r0, [pc, #260]	; 183e8 <__assert_fail@plt+0x609c>
   182e0:	mov	r1, r5
   182e4:	add	r0, pc, r0
   182e8:	bl	12088 <strchr@plt>
   182ec:	cmp	r0, #0
   182f0:	beq	18398 <__assert_fail@plt+0x604c>
   182f4:	add	sl, r4, #1
   182f8:	mov	r3, #0
   182fc:	mov	r0, sl
   18300:	mov	r1, sp
   18304:	strb	r5, [sp]
   18308:	strb	r3, [sp, #1]
   1830c:	bl	16520 <__assert_fail@plt+0x41d4>
   18310:	add	r3, r4, r0
   18314:	str	r0, [r7]
   18318:	ldrsb	r3, [r3, #1]
   1831c:	subs	r5, r5, r3
   18320:	movne	r5, #1
   18324:	cmp	r3, #0
   18328:	moveq	r5, #1
   1832c:	cmp	r5, #0
   18330:	bne	183c8 <__assert_fail@plt+0x607c>
   18334:	add	r0, r0, #2
   18338:	add	r5, r4, r0
   1833c:	ldrsb	r1, [r4, r0]
   18340:	cmp	r1, #0
   18344:	beq	18358 <__assert_fail@plt+0x600c>
   18348:	mov	r0, r9
   1834c:	bl	12088 <strchr@plt>
   18350:	cmp	r0, #0
   18354:	beq	183c8 <__assert_fail@plt+0x607c>
   18358:	mov	r4, sl
   1835c:	str	r5, [r6]
   18360:	ldr	r2, [sp, #4]
   18364:	ldr	r3, [r8]
   18368:	mov	r0, r4
   1836c:	cmp	r2, r3
   18370:	bne	183dc <__assert_fail@plt+0x6090>
   18374:	add	sp, sp, #8
   18378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1837c:	mov	r1, r9
   18380:	mov	r0, r4
   18384:	bl	11d64 <strcspn@plt>
   18388:	add	r3, r4, r0
   1838c:	str	r0, [r7]
   18390:	str	r3, [r6]
   18394:	b	18360 <__assert_fail@plt+0x6014>
   18398:	mov	r1, r9
   1839c:	mov	r0, r4
   183a0:	bl	16520 <__assert_fail@plt+0x41d4>
   183a4:	str	r0, [r7]
   183a8:	ldrsb	r1, [r4, r0]
   183ac:	add	r5, r4, r0
   183b0:	cmp	r1, #0
   183b4:	beq	183d4 <__assert_fail@plt+0x6088>
   183b8:	mov	r0, r9
   183bc:	bl	12088 <strchr@plt>
   183c0:	cmp	r0, #0
   183c4:	bne	183d4 <__assert_fail@plt+0x6088>
   183c8:	str	r4, [r6]
   183cc:	mov	r4, #0
   183d0:	b	18360 <__assert_fail@plt+0x6014>
   183d4:	str	r5, [r6]
   183d8:	b	18360 <__assert_fail@plt+0x6014>
   183dc:	bl	11e84 <__stack_chk_fail@plt>
   183e0:	andeq	r7, r1, r8, lsr fp
   183e4:	andeq	r0, r0, r0, lsr r2
   183e8:	andeq	r6, r0, ip, ror fp
   183ec:	push	{r4, lr}
   183f0:	mov	r4, r0
   183f4:	b	18400 <__assert_fail@plt+0x60b4>
   183f8:	cmp	r0, #10
   183fc:	beq	18418 <__assert_fail@plt+0x60cc>
   18400:	mov	r0, r4
   18404:	bl	1216c <fgetc@plt>
   18408:	cmn	r0, #1
   1840c:	bne	183f8 <__assert_fail@plt+0x60ac>
   18410:	mov	r0, #1
   18414:	pop	{r4, pc}
   18418:	mov	r0, #0
   1841c:	pop	{r4, pc}
   18420:	ldr	r3, [pc, #656]	; 186b8 <__assert_fail@plt+0x636c>
   18424:	ldr	r2, [pc, #656]	; 186bc <__assert_fail@plt+0x6370>
   18428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1842c:	add	r3, pc, r3
   18430:	sub	sp, sp, #44	; 0x2c
   18434:	subs	r4, r0, #0
   18438:	str	r1, [sp, #28]
   1843c:	ldr	r2, [r3, r2]
   18440:	str	r2, [sp, #24]
   18444:	ldr	r3, [r2]
   18448:	str	r3, [sp, #36]	; 0x24
   1844c:	beq	18694 <__assert_fail@plt+0x6348>
   18450:	ldr	r6, [pc, #616]	; 186c0 <__assert_fail@plt+0x6374>
   18454:	mov	r5, #0
   18458:	ldr	r3, [pc, #612]	; 186c4 <__assert_fail@plt+0x6378>
   1845c:	add	r6, pc, r6
   18460:	mov	r9, r5
   18464:	add	r3, pc, r3
   18468:	str	r3, [sp, #20]
   1846c:	str	r5, [sp, #16]
   18470:	ldr	r1, [sp, #20]
   18474:	mov	r0, r4
   18478:	bl	12340 <strspn@plt>
   1847c:	ldrsb	r3, [r4, r0]
   18480:	add	r8, r4, r0
   18484:	cmp	r3, #0
   18488:	beq	18674 <__assert_fail@plt+0x6328>
   1848c:	bl	120d0 <__errno_location@plt>
   18490:	mov	r5, #0
   18494:	add	fp, sp, #32
   18498:	mov	r1, fp
   1849c:	mov	r2, #10
   184a0:	mov	r4, r0
   184a4:	str	r5, [r0]
   184a8:	mov	r0, r8
   184ac:	bl	11f20 <strtoll@plt>
   184b0:	ldr	r3, [r4]
   184b4:	cmp	r3, r5
   184b8:	strd	r0, [sp]
   184bc:	bgt	18664 <__assert_fail@plt+0x6318>
   184c0:	ldrd	r2, [sp]
   184c4:	cmp	r2, #0
   184c8:	sbcs	r3, r3, #0
   184cc:	blt	1866c <__assert_fail@plt+0x6320>
   184d0:	ldr	r7, [sp, #32]
   184d4:	ldrsb	r3, [r7]
   184d8:	cmp	r3, #46	; 0x2e
   184dc:	beq	18618 <__assert_fail@plt+0x62cc>
   184e0:	cmp	r8, r7
   184e4:	beq	185f8 <__assert_fail@plt+0x62ac>
   184e8:	mov	r2, #0
   184ec:	mov	r3, #0
   184f0:	strd	r2, [sp, #8]
   184f4:	ldr	r1, [pc, #460]	; 186c8 <__assert_fail@plt+0x637c>
   184f8:	mov	r0, r7
   184fc:	add	r1, pc, r1
   18500:	bl	12340 <strspn@plt>
   18504:	ldr	fp, [pc, #448]	; 186cc <__assert_fail@plt+0x6380>
   18508:	mov	r8, #0
   1850c:	add	fp, pc, fp
   18510:	ldr	sl, [sp, #16]
   18514:	add	r7, r7, r0
   18518:	str	r7, [sp, #32]
   1851c:	b	18530 <__assert_fail@plt+0x61e4>
   18520:	add	r8, r8, #1
   18524:	cmp	r8, #28
   18528:	beq	185f8 <__assert_fail@plt+0x62ac>
   1852c:	ldr	fp, [r6, r8, lsl #4]
   18530:	cmp	fp, #0
   18534:	beq	18520 <__assert_fail@plt+0x61d4>
   18538:	mov	r0, fp
   1853c:	bl	1207c <strlen@plt>
   18540:	cmp	r7, #0
   18544:	cmpne	r0, #0
   18548:	mov	r4, r0
   1854c:	beq	18520 <__assert_fail@plt+0x61d4>
   18550:	mov	r2, r0
   18554:	mov	r1, fp
   18558:	mov	r0, r7
   1855c:	bl	122ec <strncmp@plt>
   18560:	cmp	r0, #0
   18564:	bne	18520 <__assert_fail@plt+0x61d4>
   18568:	adds	r4, r7, r4
   1856c:	beq	18520 <__assert_fail@plt+0x61d4>
   18570:	ldr	r3, [pc, #344]	; 186d0 <__assert_fail@plt+0x6384>
   18574:	str	sl, [sp, #16]
   18578:	add	r3, pc, r3
   1857c:	add	r3, r3, r8, lsl #4
   18580:	ldrd	sl, [sp, #8]
   18584:	ldr	r8, [r3, #12]
   18588:	ldr	r7, [r3, #8]
   1858c:	cmp	r5, #0
   18590:	mul	r3, sl, r8
   18594:	umull	r0, r1, sl, r7
   18598:	mla	r3, r7, fp, r3
   1859c:	add	r1, r3, r1
   185a0:	beq	185c0 <__assert_fail@plt+0x6274>
   185a4:	ldr	sl, [sp, #16]
   185a8:	mov	r2, #10
   185ac:	mov	r3, #0
   185b0:	bl	1d264 <__assert_fail@plt+0xaf18>
   185b4:	subs	r5, r5, #1
   185b8:	bne	185a8 <__assert_fail@plt+0x625c>
   185bc:	str	sl, [sp, #16]
   185c0:	ldrd	r2, [sp]
   185c4:	mov	r5, #1
   185c8:	mul	r8, r2, r8
   185cc:	umull	sl, fp, r2, r7
   185d0:	mla	r7, r7, r3, r8
   185d4:	adds	r2, sl, r0
   185d8:	add	r3, r7, fp
   185dc:	mov	fp, r3
   185e0:	adc	r3, fp, r1
   185e4:	adds	r9, r9, r2
   185e8:	ldr	r2, [sp, #16]
   185ec:	adc	r3, r2, r3
   185f0:	str	r3, [sp, #16]
   185f4:	b	18470 <__assert_fail@plt+0x6124>
   185f8:	mvn	r0, #21
   185fc:	ldr	r3, [sp, #24]
   18600:	ldr	r2, [sp, #36]	; 0x24
   18604:	ldr	r3, [r3]
   18608:	cmp	r2, r3
   1860c:	bne	186b4 <__assert_fail@plt+0x6368>
   18610:	add	sp, sp, #44	; 0x2c
   18614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18618:	add	r8, r7, #1
   1861c:	str	r5, [r4]
   18620:	mov	r1, fp
   18624:	mov	r0, r8
   18628:	mov	r2, #10
   1862c:	bl	11f20 <strtoll@plt>
   18630:	ldr	r3, [r4]
   18634:	cmp	r3, #0
   18638:	strd	r0, [sp, #8]
   1863c:	bgt	18664 <__assert_fail@plt+0x6318>
   18640:	ldrd	r2, [sp, #8]
   18644:	cmp	r2, #0
   18648:	sbcs	r3, r3, #0
   1864c:	blt	1866c <__assert_fail@plt+0x6320>
   18650:	ldr	r7, [sp, #32]
   18654:	cmp	r8, r7
   18658:	beq	185f8 <__assert_fail@plt+0x62ac>
   1865c:	sub	r5, r7, r8
   18660:	b	184f4 <__assert_fail@plt+0x61a8>
   18664:	rsb	r0, r3, #0
   18668:	b	185fc <__assert_fail@plt+0x62b0>
   1866c:	mvn	r0, #33	; 0x21
   18670:	b	185fc <__assert_fail@plt+0x62b0>
   18674:	cmp	r5, #0
   18678:	ldr	r1, [sp, #16]
   1867c:	beq	185f8 <__assert_fail@plt+0x62ac>
   18680:	mov	r0, r3
   18684:	ldr	r3, [sp, #28]
   18688:	str	r9, [r3]
   1868c:	str	r1, [r3, #4]
   18690:	b	185fc <__assert_fail@plt+0x62b0>
   18694:	ldr	r3, [pc, #56]	; 186d4 <__assert_fail@plt+0x6388>
   18698:	ldr	r1, [pc, #56]	; 186d8 <__assert_fail@plt+0x638c>
   1869c:	ldr	r0, [pc, #56]	; 186dc <__assert_fail@plt+0x6390>
   186a0:	add	r3, pc, r3
   186a4:	mov	r2, #77	; 0x4d
   186a8:	add	r1, pc, r1
   186ac:	add	r0, pc, r0
   186b0:	bl	1234c <__assert_fail@plt>
   186b4:	bl	11e84 <__stack_chk_fail@plt>
   186b8:	muleq	r1, r0, r9
   186bc:	andeq	r0, r0, r0, lsr r2
   186c0:	andeq	r7, r1, r4, lsr #12
   186c4:	andeq	r6, r0, r4, lsr sl
   186c8:	muleq	r0, ip, r9
   186cc:	andeq	r6, r0, r4, ror r9
   186d0:	andeq	r7, r1, r8, lsl #10
   186d4:	andeq	r6, r0, r4, asr #15
   186d8:	andeq	r6, r0, r0, ror #15
   186dc:	andeq	r6, r0, r4, ror #9
   186e0:	ldr	r3, [pc, #1556]	; 18cfc <__assert_fail@plt+0x69b0>
   186e4:	ldr	r2, [pc, #1556]	; 18d00 <__assert_fail@plt+0x69b4>
   186e8:	add	r3, pc, r3
   186ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186f0:	sub	sp, sp, #124	; 0x7c
   186f4:	ldr	r6, [r3, r2]
   186f8:	subs	r4, r0, #0
   186fc:	mov	r5, r1
   18700:	mov	r0, #0
   18704:	mov	r1, #0
   18708:	ldr	r3, [r6]
   1870c:	strd	r0, [sp, #8]
   18710:	str	r3, [sp, #116]	; 0x74
   18714:	strd	r0, [sp, #16]
   18718:	beq	18cd4 <__assert_fail@plt+0x6988>
   1871c:	cmp	r5, #0
   18720:	beq	18cb0 <__assert_fail@plt+0x6964>
   18724:	mov	r0, #0
   18728:	bl	11e60 <time@plt>
   1872c:	add	r7, sp, #28
   18730:	mov	r1, r7
   18734:	str	r0, [sp, #4]
   18738:	add	r0, sp, #4
   1873c:	bl	11eb4 <localtime_r@plt>
   18740:	ldr	r1, [pc, #1468]	; 18d04 <__assert_fail@plt+0x69b8>
   18744:	mvn	r3, #0
   18748:	add	r1, pc, r1
   1874c:	mov	r0, r4
   18750:	str	r3, [sp, #60]	; 0x3c
   18754:	bl	11d34 <strcmp@plt>
   18758:	cmp	r0, #0
   1875c:	beq	18be0 <__assert_fail@plt+0x6894>
   18760:	ldr	r1, [pc, #1440]	; 18d08 <__assert_fail@plt+0x69bc>
   18764:	mov	r0, r4
   18768:	add	r1, pc, r1
   1876c:	bl	11d34 <strcmp@plt>
   18770:	subs	r3, r0, #0
   18774:	beq	18b14 <__assert_fail@plt+0x67c8>
   18778:	ldr	r1, [pc, #1420]	; 18d0c <__assert_fail@plt+0x69c0>
   1877c:	mov	r0, r4
   18780:	add	r1, pc, r1
   18784:	bl	11d34 <strcmp@plt>
   18788:	subs	r3, r0, #0
   1878c:	beq	18c3c <__assert_fail@plt+0x68f0>
   18790:	ldr	r1, [pc, #1400]	; 18d10 <__assert_fail@plt+0x69c4>
   18794:	mov	r0, r4
   18798:	add	r1, pc, r1
   1879c:	bl	11d34 <strcmp@plt>
   187a0:	subs	r3, r0, #0
   187a4:	beq	18bf8 <__assert_fail@plt+0x68ac>
   187a8:	ldrsb	r3, [r4]
   187ac:	cmp	r3, #43	; 0x2b
   187b0:	beq	18c4c <__assert_fail@plt+0x6900>
   187b4:	cmp	r3, #45	; 0x2d
   187b8:	beq	18c64 <__assert_fail@plt+0x6918>
   187bc:	mov	r0, r4
   187c0:	bl	1207c <strlen@plt>
   187c4:	cmp	r0, #3
   187c8:	bls	18c7c <__assert_fail@plt+0x6930>
   187cc:	sub	r0, r0, #4
   187d0:	add	r2, r4, r0
   187d4:	ldrb	r3, [r4, r0]
   187d8:	cmp	r3, #32
   187dc:	beq	18b8c <__assert_fail@plt+0x6840>
   187e0:	ldr	r9, [pc, #1324]	; 18d14 <__assert_fail@plt+0x69c8>
   187e4:	mov	sl, #0
   187e8:	add	r9, pc, r9
   187ec:	ldr	fp, [pc, #1316]	; 18d18 <__assert_fail@plt+0x69cc>
   187f0:	add	fp, pc, fp
   187f4:	add	fp, fp, #448	; 0x1c0
   187f8:	cmp	r9, #0
   187fc:	beq	18c28 <__assert_fail@plt+0x68dc>
   18800:	mov	r0, r9
   18804:	bl	1207c <strlen@plt>
   18808:	subs	r8, r0, #0
   1880c:	beq	18c28 <__assert_fail@plt+0x68dc>
   18810:	mov	r1, r9
   18814:	mov	r2, r8
   18818:	mov	r0, r4
   1881c:	bl	120dc <strncasecmp@plt>
   18820:	cmp	r0, #0
   18824:	bne	18c28 <__assert_fail@plt+0x68dc>
   18828:	cmn	r4, r8
   1882c:	beq	18c28 <__assert_fail@plt+0x68dc>
   18830:	ldrsb	r3, [r4, r8]
   18834:	cmp	r3, #32
   18838:	bne	18c28 <__assert_fail@plt+0x68dc>
   1883c:	ldr	r3, [pc, #1240]	; 18d1c <__assert_fail@plt+0x69d0>
   18840:	add	r8, r8, #1
   18844:	add	r3, pc, r3
   18848:	add	sl, r3, sl, lsl #3
   1884c:	add	r4, r4, r8
   18850:	ldr	r8, [sl, #452]	; 0x1c4
   18854:	mov	lr, r7
   18858:	add	r9, sp, #72	; 0x48
   1885c:	ldm	lr!, {r0, r1, r2, r3}
   18860:	mov	ip, r9
   18864:	stmia	ip!, {r0, r1, r2, r3}
   18868:	ldm	lr!, {r0, r1, r2, r3}
   1886c:	stmia	ip!, {r0, r1, r2, r3}
   18870:	ldm	lr, {r0, r1, r2}
   18874:	stm	ip, {r0, r1, r2}
   18878:	mov	r2, r7
   1887c:	ldr	r1, [pc, #1180]	; 18d20 <__assert_fail@plt+0x69d4>
   18880:	mov	r0, r4
   18884:	add	r1, pc, r1
   18888:	bl	11e9c <strptime@plt>
   1888c:	cmp	r0, #0
   18890:	beq	188a0 <__assert_fail@plt+0x6554>
   18894:	ldrsb	r3, [r0]
   18898:	cmp	r3, #0
   1889c:	beq	18ae4 <__assert_fail@plt+0x6798>
   188a0:	mov	lr, r9
   188a4:	mov	ip, r7
   188a8:	ldm	lr!, {r0, r1, r2, r3}
   188ac:	stmia	ip!, {r0, r1, r2, r3}
   188b0:	ldm	lr!, {r0, r1, r2, r3}
   188b4:	stmia	ip!, {r0, r1, r2, r3}
   188b8:	ldm	lr, {r0, r1, r2}
   188bc:	stm	ip, {r0, r1, r2}
   188c0:	mov	r2, r7
   188c4:	ldr	r1, [pc, #1112]	; 18d24 <__assert_fail@plt+0x69d8>
   188c8:	mov	r0, r4
   188cc:	add	r1, pc, r1
   188d0:	bl	11e9c <strptime@plt>
   188d4:	cmp	r0, #0
   188d8:	beq	188e8 <__assert_fail@plt+0x659c>
   188dc:	ldrsb	r3, [r0]
   188e0:	cmp	r3, #0
   188e4:	beq	18ae4 <__assert_fail@plt+0x6798>
   188e8:	mov	lr, r9
   188ec:	mov	ip, r7
   188f0:	ldm	lr!, {r0, r1, r2, r3}
   188f4:	stmia	ip!, {r0, r1, r2, r3}
   188f8:	ldm	lr!, {r0, r1, r2, r3}
   188fc:	stmia	ip!, {r0, r1, r2, r3}
   18900:	ldm	lr, {r0, r1, r2}
   18904:	stm	ip, {r0, r1, r2}
   18908:	mov	r2, r7
   1890c:	ldr	r1, [pc, #1044]	; 18d28 <__assert_fail@plt+0x69dc>
   18910:	mov	r0, r4
   18914:	add	r1, pc, r1
   18918:	bl	11e9c <strptime@plt>
   1891c:	cmp	r0, #0
   18920:	beq	18930 <__assert_fail@plt+0x65e4>
   18924:	ldrsb	r3, [r0]
   18928:	cmp	r3, #0
   1892c:	beq	18adc <__assert_fail@plt+0x6790>
   18930:	mov	lr, r9
   18934:	mov	ip, r7
   18938:	ldm	lr!, {r0, r1, r2, r3}
   1893c:	stmia	ip!, {r0, r1, r2, r3}
   18940:	ldm	lr!, {r0, r1, r2, r3}
   18944:	stmia	ip!, {r0, r1, r2, r3}
   18948:	ldm	lr, {r0, r1, r2}
   1894c:	stm	ip, {r0, r1, r2}
   18950:	mov	r2, r7
   18954:	ldr	r1, [pc, #976]	; 18d2c <__assert_fail@plt+0x69e0>
   18958:	mov	r0, r4
   1895c:	add	r1, pc, r1
   18960:	bl	11e9c <strptime@plt>
   18964:	cmp	r0, #0
   18968:	beq	18978 <__assert_fail@plt+0x662c>
   1896c:	ldrsb	r3, [r0]
   18970:	cmp	r3, #0
   18974:	beq	18adc <__assert_fail@plt+0x6790>
   18978:	mov	lr, r9
   1897c:	mov	ip, r7
   18980:	ldm	lr!, {r0, r1, r2, r3}
   18984:	stmia	ip!, {r0, r1, r2, r3}
   18988:	ldm	lr!, {r0, r1, r2, r3}
   1898c:	stmia	ip!, {r0, r1, r2, r3}
   18990:	ldm	lr, {r0, r1, r2}
   18994:	stm	ip, {r0, r1, r2}
   18998:	mov	r2, r7
   1899c:	ldr	r1, [pc, #908]	; 18d30 <__assert_fail@plt+0x69e4>
   189a0:	mov	r0, r4
   189a4:	add	r1, pc, r1
   189a8:	bl	11e9c <strptime@plt>
   189ac:	cmp	r0, #0
   189b0:	beq	189c0 <__assert_fail@plt+0x6674>
   189b4:	ldrsb	r3, [r0]
   189b8:	cmp	r3, #0
   189bc:	beq	18c94 <__assert_fail@plt+0x6948>
   189c0:	mov	lr, r9
   189c4:	mov	ip, r7
   189c8:	ldm	lr!, {r0, r1, r2, r3}
   189cc:	stmia	ip!, {r0, r1, r2, r3}
   189d0:	ldm	lr!, {r0, r1, r2, r3}
   189d4:	stmia	ip!, {r0, r1, r2, r3}
   189d8:	ldm	lr, {r0, r1, r2}
   189dc:	stm	ip, {r0, r1, r2}
   189e0:	mov	r2, r7
   189e4:	ldr	r1, [pc, #840]	; 18d34 <__assert_fail@plt+0x69e8>
   189e8:	mov	r0, r4
   189ec:	add	r1, pc, r1
   189f0:	bl	11e9c <strptime@plt>
   189f4:	cmp	r0, #0
   189f8:	beq	18a08 <__assert_fail@plt+0x66bc>
   189fc:	ldrsb	r3, [r0]
   18a00:	cmp	r3, #0
   18a04:	beq	18c94 <__assert_fail@plt+0x6948>
   18a08:	mov	lr, r9
   18a0c:	mov	ip, r7
   18a10:	ldm	lr!, {r0, r1, r2, r3}
   18a14:	stmia	ip!, {r0, r1, r2, r3}
   18a18:	ldm	lr!, {r0, r1, r2, r3}
   18a1c:	stmia	ip!, {r0, r1, r2, r3}
   18a20:	ldm	lr, {r0, r1, r2}
   18a24:	stm	ip, {r0, r1, r2}
   18a28:	mov	r2, r7
   18a2c:	ldr	r1, [pc, #772]	; 18d38 <__assert_fail@plt+0x69ec>
   18a30:	mov	r0, r4
   18a34:	add	r1, pc, r1
   18a38:	bl	11e9c <strptime@plt>
   18a3c:	cmp	r0, #0
   18a40:	beq	18a50 <__assert_fail@plt+0x6704>
   18a44:	ldrsb	r3, [r0]
   18a48:	cmp	r3, #0
   18a4c:	beq	18ae4 <__assert_fail@plt+0x6798>
   18a50:	mov	lr, r9
   18a54:	mov	ip, r7
   18a58:	ldm	lr!, {r0, r1, r2, r3}
   18a5c:	stmia	ip!, {r0, r1, r2, r3}
   18a60:	ldm	lr!, {r0, r1, r2, r3}
   18a64:	stmia	ip!, {r0, r1, r2, r3}
   18a68:	ldm	lr, {r0, r1, r2}
   18a6c:	stm	ip, {r0, r1, r2}
   18a70:	mov	r2, r7
   18a74:	ldr	r1, [pc, #704]	; 18d3c <__assert_fail@plt+0x69f0>
   18a78:	mov	r0, r4
   18a7c:	add	r1, pc, r1
   18a80:	bl	11e9c <strptime@plt>
   18a84:	cmp	r0, #0
   18a88:	beq	18a98 <__assert_fail@plt+0x674c>
   18a8c:	ldrsb	r3, [r0]
   18a90:	cmp	r3, #0
   18a94:	beq	18adc <__assert_fail@plt+0x6790>
   18a98:	ldm	r9!, {r0, r1, r2, r3}
   18a9c:	mov	ip, r7
   18aa0:	stmia	ip!, {r0, r1, r2, r3}
   18aa4:	ldm	r9!, {r0, r1, r2, r3}
   18aa8:	stmia	ip!, {r0, r1, r2, r3}
   18aac:	ldm	r9, {r0, r1, r2}
   18ab0:	stm	ip, {r0, r1, r2}
   18ab4:	mov	r0, r4
   18ab8:	ldr	r1, [pc, #640]	; 18d40 <__assert_fail@plt+0x69f4>
   18abc:	mov	r2, r7
   18ac0:	add	r1, pc, r1
   18ac4:	bl	11e9c <strptime@plt>
   18ac8:	cmp	r0, #0
   18acc:	beq	18b0c <__assert_fail@plt+0x67c0>
   18ad0:	ldrsb	r3, [r0]
   18ad4:	cmp	r3, #0
   18ad8:	bne	18b0c <__assert_fail@plt+0x67c0>
   18adc:	mov	r3, #0
   18ae0:	str	r3, [sp, #28]
   18ae4:	mov	r0, r7
   18ae8:	bl	11da0 <mktime@plt>
   18aec:	cmn	r0, #1
   18af0:	str	r0, [sp, #4]
   18af4:	beq	18b0c <__assert_fail@plt+0x67c0>
   18af8:	cmp	r8, #0
   18afc:	blt	18b34 <__assert_fail@plt+0x67e8>
   18b00:	ldr	r3, [sp, #52]	; 0x34
   18b04:	cmp	r3, r8
   18b08:	beq	18b34 <__assert_fail@plt+0x67e8>
   18b0c:	mvn	r4, #21
   18b10:	b	18b70 <__assert_fail@plt+0x6824>
   18b14:	mov	r0, r7
   18b18:	str	r3, [sp, #36]	; 0x24
   18b1c:	str	r3, [sp, #32]
   18b20:	str	r3, [sp, #28]
   18b24:	bl	11da0 <mktime@plt>
   18b28:	cmn	r0, #1
   18b2c:	str	r0, [sp, #4]
   18b30:	beq	18b0c <__assert_fail@plt+0x67c0>
   18b34:	ldr	r1, [pc, #520]	; 18d44 <__assert_fail@plt+0x69f8>
   18b38:	ldrd	r2, [sp, #8]
   18b3c:	ldrd	r8, [sp, #16]
   18b40:	smlal	r2, r3, r1, r0
   18b44:	cmp	r9, r3
   18b48:	cmpeq	r8, r2
   18b4c:	mov	r0, r2
   18b50:	movcs	r2, #0
   18b54:	mov	r1, r3
   18b58:	movcs	r3, r2
   18b5c:	bcs	18b68 <__assert_fail@plt+0x681c>
   18b60:	subs	r2, r0, r8
   18b64:	sbc	r3, r1, r9
   18b68:	mov	r4, #0
   18b6c:	strd	r2, [r5]
   18b70:	ldr	r2, [sp, #116]	; 0x74
   18b74:	ldr	r3, [r6]
   18b78:	mov	r0, r4
   18b7c:	cmp	r2, r3
   18b80:	bne	18cf8 <__assert_fail@plt+0x69ac>
   18b84:	add	sp, sp, #124	; 0x7c
   18b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b8c:	ldrb	r3, [r2, #1]!
   18b90:	cmp	r3, #97	; 0x61
   18b94:	bne	187e0 <__assert_fail@plt+0x6494>
   18b98:	ldrb	r3, [r2, #1]!
   18b9c:	cmp	r3, #103	; 0x67
   18ba0:	bne	187e0 <__assert_fail@plt+0x6494>
   18ba4:	ldrb	r3, [r2, #1]
   18ba8:	cmp	r3, #111	; 0x6f
   18bac:	bne	187e0 <__assert_fail@plt+0x6494>
   18bb0:	mov	r1, r0
   18bb4:	mov	r0, r4
   18bb8:	bl	11e0c <strndup@plt>
   18bbc:	subs	r8, r0, #0
   18bc0:	beq	18ca8 <__assert_fail@plt+0x695c>
   18bc4:	add	r1, sp, #16
   18bc8:	bl	18420 <__assert_fail@plt+0x60d4>
   18bcc:	mov	r4, r0
   18bd0:	mov	r0, r8
   18bd4:	bl	11dc4 <free@plt>
   18bd8:	cmp	r4, #0
   18bdc:	blt	18b70 <__assert_fail@plt+0x6824>
   18be0:	mov	r0, r7
   18be4:	bl	11da0 <mktime@plt>
   18be8:	cmn	r0, #1
   18bec:	str	r0, [sp, #4]
   18bf0:	bne	18b34 <__assert_fail@plt+0x67e8>
   18bf4:	b	18b0c <__assert_fail@plt+0x67c0>
   18bf8:	ldr	r2, [sp, #40]	; 0x28
   18bfc:	mov	r0, r7
   18c00:	add	r2, r2, #1
   18c04:	str	r3, [sp, #36]	; 0x24
   18c08:	str	r3, [sp, #32]
   18c0c:	str	r3, [sp, #28]
   18c10:	str	r2, [sp, #40]	; 0x28
   18c14:	bl	11da0 <mktime@plt>
   18c18:	cmn	r0, #1
   18c1c:	str	r0, [sp, #4]
   18c20:	bne	18b34 <__assert_fail@plt+0x67e8>
   18c24:	b	18b0c <__assert_fail@plt+0x67c0>
   18c28:	add	sl, sl, #1
   18c2c:	cmp	sl, #14
   18c30:	beq	18c8c <__assert_fail@plt+0x6940>
   18c34:	ldr	r9, [fp, sl, lsl #3]
   18c38:	b	187f8 <__assert_fail@plt+0x64ac>
   18c3c:	ldr	r2, [sp, #40]	; 0x28
   18c40:	mov	r0, r7
   18c44:	sub	r2, r2, #1
   18c48:	b	18c04 <__assert_fail@plt+0x68b8>
   18c4c:	add	r0, r4, #1
   18c50:	add	r1, sp, #8
   18c54:	bl	18420 <__assert_fail@plt+0x60d4>
   18c58:	subs	r4, r0, #0
   18c5c:	bge	18be0 <__assert_fail@plt+0x6894>
   18c60:	b	18b70 <__assert_fail@plt+0x6824>
   18c64:	add	r0, r4, #1
   18c68:	add	r1, sp, #16
   18c6c:	bl	18420 <__assert_fail@plt+0x60d4>
   18c70:	subs	r4, r0, #0
   18c74:	bge	18be0 <__assert_fail@plt+0x6894>
   18c78:	b	18b70 <__assert_fail@plt+0x6824>
   18c7c:	ldr	r9, [pc, #196]	; 18d48 <__assert_fail@plt+0x69fc>
   18c80:	mov	sl, #0
   18c84:	add	r9, pc, r9
   18c88:	b	187ec <__assert_fail@plt+0x64a0>
   18c8c:	mvn	r8, #0
   18c90:	b	18854 <__assert_fail@plt+0x6508>
   18c94:	mov	r3, #0
   18c98:	str	r3, [sp, #36]	; 0x24
   18c9c:	str	r3, [sp, #32]
   18ca0:	str	r3, [sp, #28]
   18ca4:	b	18ae4 <__assert_fail@plt+0x6798>
   18ca8:	mvn	r4, #11
   18cac:	b	18b70 <__assert_fail@plt+0x6824>
   18cb0:	ldr	r3, [pc, #148]	; 18d4c <__assert_fail@plt+0x6a00>
   18cb4:	ldr	r1, [pc, #148]	; 18d50 <__assert_fail@plt+0x6a04>
   18cb8:	ldr	r0, [pc, #148]	; 18d54 <__assert_fail@plt+0x6a08>
   18cbc:	add	r3, pc, r3
   18cc0:	mov	r2, #196	; 0xc4
   18cc4:	add	r3, r3, #12
   18cc8:	add	r1, pc, r1
   18ccc:	add	r0, pc, r0
   18cd0:	bl	1234c <__assert_fail@plt>
   18cd4:	ldr	r3, [pc, #124]	; 18d58 <__assert_fail@plt+0x6a0c>
   18cd8:	ldr	r1, [pc, #124]	; 18d5c <__assert_fail@plt+0x6a10>
   18cdc:	ldr	r0, [pc, #124]	; 18d60 <__assert_fail@plt+0x6a14>
   18ce0:	add	r3, pc, r3
   18ce4:	mov	r2, #195	; 0xc3
   18ce8:	add	r3, r3, #12
   18cec:	add	r1, pc, r1
   18cf0:	add	r0, pc, r0
   18cf4:	bl	1234c <__assert_fail@plt>
   18cf8:	bl	11e84 <__stack_chk_fail@plt>
   18cfc:	ldrdeq	r7, [r1], -r4
   18d00:	andeq	r0, r0, r0, lsr r2
   18d04:	andeq	r6, r0, r8, ror #14
   18d08:	andeq	r6, r0, ip, asr #14
   18d0c:	andeq	r6, r0, ip, lsr r7
   18d10:	andeq	r6, r0, r0, lsr r7
   18d14:			; <UNDEFINED> instruction: 0x000066b8
   18d18:	muleq	r1, r0, r2
   18d1c:	andeq	r7, r1, ip, lsr r2
   18d20:	andeq	r6, r0, r8, asr r6
   18d24:	andeq	r6, r0, r4, lsr #12
   18d28:	strdeq	r6, [r0], -r0
   18d2c:			; <UNDEFINED> instruction: 0x000065b8
   18d30:	andeq	r6, r0, r0, lsl #11
   18d34:	andeq	r6, r0, r4, asr #10
   18d38:	andeq	r6, r0, r8, lsl #10
   18d3c:	andeq	r6, r0, ip, asr #9
   18d40:	muleq	r0, r0, r4
   18d44:	andeq	r4, pc, r0, asr #4
   18d48:	andeq	r6, r0, ip, lsl r2
   18d4c:	andeq	r6, r0, r8, lsr #3
   18d50:	andeq	r6, r0, r0, asr #3
   18d54:	ldrdeq	r6, [r0], -ip
   18d58:	andeq	r6, r0, r4, lsl #3
   18d5c:	muleq	r0, ip, r1
   18d60:	andeq	r5, r0, r0, lsr #29
   18d64:	ldr	r3, [r0, #32]
   18d68:	cmp	r3, #0
   18d6c:	ldrge	r0, [r0, #36]	; 0x24
   18d70:	movlt	r0, #0
   18d74:	bx	lr
   18d78:	push	{r4, r5, r6, r7, r8, lr}
   18d7c:	sub	sp, sp, #16
   18d80:	tst	r2, #1
   18d84:	mov	r5, r2
   18d88:	mov	r7, r0
   18d8c:	mov	r8, r1
   18d90:	mov	r6, r3
   18d94:	ldr	r4, [sp, #40]	; 0x28
   18d98:	bne	18f24 <__assert_fail@plt+0x6bd8>
   18d9c:	and	r3, r5, #3
   18da0:	cmp	r3, #3
   18da4:	beq	18ea8 <__assert_fail@plt+0x6b5c>
   18da8:	tst	r5, #2
   18dac:	bne	18ecc <__assert_fail@plt+0x6b80>
   18db0:	tst	r5, #8
   18db4:	bne	18f18 <__assert_fail@plt+0x6bcc>
   18db8:	tst	r5, #16
   18dbc:	bne	18dd4 <__assert_fail@plt+0x6a88>
   18dc0:	tst	r5, #4
   18dc4:	bne	18e0c <__assert_fail@plt+0x6ac0>
   18dc8:	mov	r0, #0
   18dcc:	add	sp, sp, #16
   18dd0:	pop	{r4, r5, r6, r7, r8, pc}
   18dd4:	ldr	r3, [pc, #416]	; 18f7c <__assert_fail@plt+0x6c30>
   18dd8:	add	r3, pc, r3
   18ddc:	stm	sp, {r3, r8}
   18de0:	mov	r2, #1
   18de4:	mvn	r3, #0
   18de8:	mov	r1, r4
   18dec:	mov	r0, r6
   18df0:	bl	12328 <__snprintf_chk@plt>
   18df4:	cmp	r0, r4
   18df8:	bhi	18e88 <__assert_fail@plt+0x6b3c>
   18dfc:	tst	r5, #4
   18e00:	sub	r4, r4, r0
   18e04:	add	r6, r6, r0
   18e08:	beq	18dc8 <__assert_fail@plt+0x6a7c>
   18e0c:	mov	r0, r7
   18e10:	bl	18d64 <__assert_fail@plt+0x6a18>
   18e14:	ldr	r2, [pc, #356]	; 18f80 <__assert_fail@plt+0x6c34>
   18e18:	mov	r5, r0
   18e1c:	asr	ip, r0, #31
   18e20:	smull	r1, r3, r2, r5
   18e24:	ldr	r1, [pc, #344]	; 18f84 <__assert_fail@plt+0x6c38>
   18e28:	add	r3, r3, r5
   18e2c:	mov	r0, r6
   18e30:	rsb	r3, ip, r3, asr #5
   18e34:	smull	r1, lr, r1, r5
   18e38:	smull	r1, r2, r2, r3
   18e3c:	add	r1, r2, r3
   18e40:	asr	r2, r3, #31
   18e44:	rsb	r2, r2, r1, asr #5
   18e48:	add	r1, lr, r5
   18e4c:	rsb	r2, r2, r2, lsl #4
   18e50:	ldr	lr, [pc, #304]	; 18f88 <__assert_fail@plt+0x6c3c>
   18e54:	sub	r3, r3, r2, lsl #2
   18e58:	cmp	r3, #0
   18e5c:	rsblt	r3, r3, #0
   18e60:	rsb	r1, ip, r1, asr #11
   18e64:	add	lr, pc, lr
   18e68:	stmib	sp, {r1, r3}
   18e6c:	str	lr, [sp]
   18e70:	mvn	r3, #0
   18e74:	mov	r2, #1
   18e78:	mov	r1, r4
   18e7c:	bl	12328 <__snprintf_chk@plt>
   18e80:	cmp	r0, r4
   18e84:	bls	18dc8 <__assert_fail@plt+0x6a7c>
   18e88:	ldr	r1, [pc, #252]	; 18f8c <__assert_fail@plt+0x6c40>
   18e8c:	mov	r2, #5
   18e90:	add	r1, pc, r1
   18e94:	mov	r0, #0
   18e98:	bl	11e6c <dcgettext@plt>
   18e9c:	bl	120a0 <warnx@plt>
   18ea0:	mvn	r0, #0
   18ea4:	b	18dcc <__assert_fail@plt+0x6a80>
   18ea8:	cmp	r4, #0
   18eac:	beq	18e88 <__assert_fail@plt+0x6b3c>
   18eb0:	tst	r5, #32
   18eb4:	movne	r3, #84	; 0x54
   18eb8:	moveq	r3, #32
   18ebc:	tst	r5, #2
   18ec0:	sub	r4, r4, #1
   18ec4:	strb	r3, [r6], #1
   18ec8:	beq	18db0 <__assert_fail@plt+0x6a64>
   18ecc:	ldrd	r0, [r7]
   18ed0:	ldr	r3, [pc, #184]	; 18f90 <__assert_fail@plt+0x6c44>
   18ed4:	ldr	r2, [r7, #8]
   18ed8:	add	r3, pc, r3
   18edc:	str	r0, [sp, #12]
   18ee0:	str	r1, [sp, #8]
   18ee4:	str	r2, [sp, #4]
   18ee8:	str	r3, [sp]
   18eec:	mov	r2, #1
   18ef0:	mvn	r3, #0
   18ef4:	mov	r1, r4
   18ef8:	mov	r0, r6
   18efc:	bl	12328 <__snprintf_chk@plt>
   18f00:	cmp	r0, r4
   18f04:	bhi	18e88 <__assert_fail@plt+0x6b3c>
   18f08:	tst	r5, #8
   18f0c:	sub	r4, r4, r0
   18f10:	add	r6, r6, r0
   18f14:	beq	18db8 <__assert_fail@plt+0x6a6c>
   18f18:	ldr	r3, [pc, #116]	; 18f94 <__assert_fail@plt+0x6c48>
   18f1c:	add	r3, pc, r3
   18f20:	b	18ddc <__assert_fail@plt+0x6a90>
   18f24:	ldr	r3, [r0, #20]
   18f28:	ldr	r1, [r0, #16]
   18f2c:	ldr	r2, [pc, #100]	; 18f98 <__assert_fail@plt+0x6c4c>
   18f30:	ldr	r0, [r0, #12]
   18f34:	add	r3, r3, #1888	; 0x760
   18f38:	add	r2, pc, r2
   18f3c:	add	r3, r3, #12
   18f40:	add	r1, r1, #1
   18f44:	str	r3, [sp, #4]
   18f48:	str	r1, [sp, #8]
   18f4c:	str	r0, [sp, #12]
   18f50:	str	r2, [sp]
   18f54:	mov	r1, r4
   18f58:	mov	r0, r6
   18f5c:	mvn	r3, #0
   18f60:	mov	r2, #1
   18f64:	bl	12328 <__snprintf_chk@plt>
   18f68:	cmp	r0, r4
   18f6c:	subls	r4, r4, r0
   18f70:	addls	r6, r6, r0
   18f74:	bls	18d9c <__assert_fail@plt+0x6a50>
   18f78:	b	18e88 <__assert_fail@plt+0x6b3c>
   18f7c:	ldrdeq	r6, [r0], -r4
   18f80:	stmhi	r8, {r0, r3, r7, fp, pc}
   18f84:			; <UNDEFINED> instruction: 0x91a2b3c5
   18f88:	andeq	r6, r0, r0, asr r1
   18f8c:	andeq	r6, r0, r0, ror #1
   18f90:	strheq	r6, [r0], -ip
   18f94:	andeq	r6, r0, r8, lsl #1
   18f98:	andeq	r6, r0, r8, lsr #32
   18f9c:	ldr	ip, [pc, #164]	; 19048 <__assert_fail@plt+0x6cfc>
   18fa0:	push	{r4, r5, r6, r7, r8, r9, lr}
   18fa4:	add	ip, pc, ip
   18fa8:	ldr	lr, [pc, #156]	; 1904c <__assert_fail@plt+0x6d00>
   18fac:	sub	sp, sp, #60	; 0x3c
   18fb0:	mov	r6, r1
   18fb4:	ldr	r4, [ip, lr]
   18fb8:	tst	r1, #64	; 0x40
   18fbc:	mov	r1, ip
   18fc0:	ldr	ip, [r4]
   18fc4:	add	r5, sp, #8
   18fc8:	mov	r8, r2
   18fcc:	mov	r9, r3
   18fd0:	mov	r7, r0
   18fd4:	str	ip, [sp, #52]	; 0x34
   18fd8:	mov	r1, r5
   18fdc:	beq	1901c <__assert_fail@plt+0x6cd0>
   18fe0:	bl	11d10 <gmtime_r@plt>
   18fe4:	cmp	r0, #0
   18fe8:	beq	19024 <__assert_fail@plt+0x6cd8>
   18fec:	str	r9, [sp]
   18ff0:	mov	r3, r8
   18ff4:	mov	r2, r6
   18ff8:	ldr	r1, [r7, #4]
   18ffc:	mov	r0, r5
   19000:	bl	18d78 <__assert_fail@plt+0x6a2c>
   19004:	ldr	r2, [sp, #52]	; 0x34
   19008:	ldr	r3, [r4]
   1900c:	cmp	r2, r3
   19010:	bne	19044 <__assert_fail@plt+0x6cf8>
   19014:	add	sp, sp, #60	; 0x3c
   19018:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1901c:	bl	11eb4 <localtime_r@plt>
   19020:	b	18fe4 <__assert_fail@plt+0x6c98>
   19024:	ldr	r1, [pc, #36]	; 19050 <__assert_fail@plt+0x6d04>
   19028:	mov	r2, #5
   1902c:	add	r1, pc, r1
   19030:	bl	11e6c <dcgettext@plt>
   19034:	ldr	r1, [r7]
   19038:	bl	120a0 <warnx@plt>
   1903c:	mvn	r0, #0
   19040:	b	19004 <__assert_fail@plt+0x6cb8>
   19044:	bl	11e84 <__stack_chk_fail@plt>
   19048:	andeq	r6, r1, r8, lsl lr
   1904c:	andeq	r0, r0, r0, lsr r2
   19050:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   19054:	push	{lr}		; (str lr, [sp, #-4]!)
   19058:	sub	sp, sp, #12
   1905c:	str	r3, [sp]
   19060:	mov	r3, r2
   19064:	mov	r2, r1
   19068:	mov	r1, #0
   1906c:	bl	18d78 <__assert_fail@plt+0x6a2c>
   19070:	add	sp, sp, #12
   19074:	pop	{pc}		; (ldr pc, [sp], #4)
   19078:	ldr	ip, [pc, #164]	; 19124 <__assert_fail@plt+0x6dd8>
   1907c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19080:	add	ip, pc, ip
   19084:	ldr	lr, [pc, #156]	; 19128 <__assert_fail@plt+0x6ddc>
   19088:	sub	sp, sp, #60	; 0x3c
   1908c:	mov	r6, r1
   19090:	ldr	r4, [ip, lr]
   19094:	tst	r1, #64	; 0x40
   19098:	mov	r1, ip
   1909c:	ldr	ip, [r4]
   190a0:	add	r5, sp, #8
   190a4:	mov	r7, r2
   190a8:	mov	r8, r3
   190ac:	mov	r9, r0
   190b0:	str	ip, [sp, #52]	; 0x34
   190b4:	mov	r1, r5
   190b8:	beq	190f8 <__assert_fail@plt+0x6dac>
   190bc:	bl	11d10 <gmtime_r@plt>
   190c0:	cmp	r0, #0
   190c4:	beq	19100 <__assert_fail@plt+0x6db4>
   190c8:	str	r8, [sp]
   190cc:	mov	r3, r7
   190d0:	mov	r2, r6
   190d4:	mov	r0, r5
   190d8:	mov	r1, #0
   190dc:	bl	18d78 <__assert_fail@plt+0x6a2c>
   190e0:	ldr	r2, [sp, #52]	; 0x34
   190e4:	ldr	r3, [r4]
   190e8:	cmp	r2, r3
   190ec:	bne	19120 <__assert_fail@plt+0x6dd4>
   190f0:	add	sp, sp, #60	; 0x3c
   190f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   190f8:	bl	11eb4 <localtime_r@plt>
   190fc:	b	190c0 <__assert_fail@plt+0x6d74>
   19100:	ldr	r1, [pc, #36]	; 1912c <__assert_fail@plt+0x6de0>
   19104:	mov	r2, #5
   19108:	add	r1, pc, r1
   1910c:	bl	11e6c <dcgettext@plt>
   19110:	mov	r1, r9
   19114:	bl	120a0 <warnx@plt>
   19118:	mvn	r0, #0
   1911c:	b	190e0 <__assert_fail@plt+0x6d94>
   19120:	bl	11e84 <__stack_chk_fail@plt>
   19124:	andeq	r6, r1, ip, lsr sp
   19128:	andeq	r0, r0, r0, lsr r2
   1912c:			; <UNDEFINED> instruction: 0x00005eb8
   19130:	push	{r4, r5, r6, lr}
   19134:	mov	r4, r1
   19138:	ldr	r1, [r1]
   1913c:	mov	r5, r0
   19140:	cmp	r1, #0
   19144:	beq	19180 <__assert_fail@plt+0x6e34>
   19148:	ldr	lr, [r5]
   1914c:	ldr	r3, [pc, #60]	; 19190 <__assert_fail@plt+0x6e44>
   19150:	asr	r2, r1, #31
   19154:	asr	r0, lr, #31
   19158:	smull	r4, ip, r3, lr
   1915c:	smull	r4, r3, r3, r1
   19160:	add	ip, ip, lr
   19164:	add	r3, r3, r1
   19168:	rsb	r0, r0, ip, asr #16
   1916c:	rsb	r3, r2, r3, asr #16
   19170:	sub	r0, r0, r3
   19174:	clz	r0, r0
   19178:	lsr	r0, r0, #5
   1917c:	pop	{r4, r5, r6, pc}
   19180:	mov	r0, r4
   19184:	bl	11f44 <gettimeofday@plt>
   19188:	ldr	r1, [r4]
   1918c:	b	19148 <__assert_fail@plt+0x6dfc>
   19190:	eorgt	r4, lr, #29360128	; 0x1c00000
   19194:	push	{r4, r5, r6, lr}
   19198:	mov	r4, r1
   1919c:	ldr	r1, [r1]
   191a0:	mov	r5, r0
   191a4:	cmp	r1, #0
   191a8:	beq	191dc <__assert_fail@plt+0x6e90>
   191ac:	ldr	r3, [r5]
   191b0:	ldr	ip, [pc, #52]	; 191ec <__assert_fail@plt+0x6ea0>
   191b4:	asr	r2, r1, #31
   191b8:	asr	r0, r3, #31
   191bc:	smull	lr, r3, ip, r3
   191c0:	smull	ip, r1, ip, r1
   191c4:	rsb	r0, r0, r3, asr #23
   191c8:	rsb	r1, r2, r1, asr #23
   191cc:	sub	r0, r0, r1
   191d0:	clz	r0, r0
   191d4:	lsr	r0, r0, #5
   191d8:	pop	{r4, r5, r6, pc}
   191dc:	mov	r0, r4
   191e0:	bl	11f44 <gettimeofday@plt>
   191e4:	ldr	r1, [r4]
   191e8:	b	191ac <__assert_fail@plt+0x6e60>
   191ec:	ldrmi	sl, [r8], #-1147	; 0xfffffb85
   191f0:	ldr	ip, [pc, #276]	; 1930c <__assert_fail@plt+0x6fc0>
   191f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   191f8:	add	ip, pc, ip
   191fc:	ldr	lr, [pc, #268]	; 19310 <__assert_fail@plt+0x6fc4>
   19200:	sub	sp, sp, #68	; 0x44
   19204:	add	r7, sp, #16
   19208:	ldr	r4, [ip, lr]
   1920c:	mov	r8, r3
   19210:	mov	r6, r1
   19214:	ldr	r3, [r4]
   19218:	mov	r1, r7
   1921c:	mov	r5, r0
   19220:	mov	r9, r2
   19224:	str	r3, [sp, #60]	; 0x3c
   19228:	bl	11eb4 <localtime_r@plt>
   1922c:	mov	r1, r6
   19230:	mov	r0, r5
   19234:	bl	19130 <__assert_fail@plt+0x6de4>
   19238:	cmp	r0, #0
   1923c:	beq	19298 <__assert_fail@plt+0x6f4c>
   19240:	ldr	r3, [pc, #204]	; 19314 <__assert_fail@plt+0x6fc8>
   19244:	ldr	r1, [sp, #20]
   19248:	ldr	r2, [sp, #24]
   1924c:	add	r3, pc, r3
   19250:	str	r1, [sp, #8]
   19254:	str	r2, [sp, #4]
   19258:	str	r3, [sp]
   1925c:	mov	r0, r8
   19260:	mvn	r3, #0
   19264:	mov	r2, #1
   19268:	ldr	r1, [sp, #96]	; 0x60
   1926c:	bl	12328 <__snprintf_chk@plt>
   19270:	ldr	r3, [sp, #96]	; 0x60
   19274:	cmp	r0, r3
   19278:	movls	r0, #0
   1927c:	mvnhi	r0, #0
   19280:	ldr	r2, [sp, #60]	; 0x3c
   19284:	ldr	r3, [r4]
   19288:	cmp	r2, r3
   1928c:	bne	19308 <__assert_fail@plt+0x6fbc>
   19290:	add	sp, sp, #68	; 0x44
   19294:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19298:	mov	r1, r6
   1929c:	mov	r0, r5
   192a0:	bl	19194 <__assert_fail@plt+0x6e48>
   192a4:	mov	r3, r7
   192a8:	cmp	r0, #0
   192ac:	mov	r0, r8
   192b0:	beq	192f4 <__assert_fail@plt+0x6fa8>
   192b4:	tst	r9, #2
   192b8:	bne	192e0 <__assert_fail@plt+0x6f94>
   192bc:	ldr	r2, [pc, #84]	; 19318 <__assert_fail@plt+0x6fcc>
   192c0:	ldr	r1, [sp, #96]	; 0x60
   192c4:	add	r2, pc, r2
   192c8:	bl	11fe0 <strftime@plt>
   192cc:	cmp	r0, #0
   192d0:	movgt	r0, #0
   192d4:	movle	r0, #1
   192d8:	rsb	r0, r0, #0
   192dc:	b	19280 <__assert_fail@plt+0x6f34>
   192e0:	ldr	r2, [pc, #52]	; 1931c <__assert_fail@plt+0x6fd0>
   192e4:	ldr	r1, [sp, #96]	; 0x60
   192e8:	add	r2, pc, r2
   192ec:	bl	11fe0 <strftime@plt>
   192f0:	b	192cc <__assert_fail@plt+0x6f80>
   192f4:	ldr	r2, [pc, #36]	; 19320 <__assert_fail@plt+0x6fd4>
   192f8:	ldr	r1, [sp, #96]	; 0x60
   192fc:	add	r2, pc, r2
   19300:	bl	11fe0 <strftime@plt>
   19304:	b	192cc <__assert_fail@plt+0x6f80>
   19308:	bl	11e84 <__stack_chk_fail@plt>
   1930c:	andeq	r6, r1, r4, asr #23
   19310:	andeq	r0, r0, r0, lsr r2
   19314:	muleq	r0, r0, sp
   19318:	andeq	r5, r0, r0, lsr sp
   1931c:	andeq	r5, r0, r0, lsl #26
   19320:	andeq	r5, r0, r0, lsl #26
   19324:	push	{r1, r2, r3}
   19328:	subs	r3, r0, #0
   1932c:	ldr	r1, [pc, #168]	; 193dc <__assert_fail@plt+0x7090>
   19330:	ldr	r2, [pc, #168]	; 193e0 <__assert_fail@plt+0x7094>
   19334:	add	r1, pc, r1
   19338:	push	{r4, r5, r6, lr}
   1933c:	sub	sp, sp, #12
   19340:	ldr	r5, [r1, r2]
   19344:	ldr	r6, [sp, #28]
   19348:	ldr	r2, [r5]
   1934c:	str	r2, [sp, #4]
   19350:	beq	19368 <__assert_fail@plt+0x701c>
   19354:	ldr	r2, [pc, #136]	; 193e4 <__assert_fail@plt+0x7098>
   19358:	add	r2, pc, r2
   1935c:	ldr	r2, [r2]
   19360:	tst	r2, #16777216	; 0x1000000
   19364:	beq	193b8 <__assert_fail@plt+0x706c>
   19368:	ldr	r3, [pc, #120]	; 193e8 <__assert_fail@plt+0x709c>
   1936c:	ldr	r4, [r1, r3]
   19370:	add	ip, sp, #32
   19374:	mov	r2, r6
   19378:	mov	r3, ip
   1937c:	mov	r1, #1
   19380:	ldr	r0, [r4]
   19384:	str	ip, [sp]
   19388:	bl	11ff8 <__vfprintf_chk@plt>
   1938c:	ldr	r1, [r4]
   19390:	mov	r0, #10
   19394:	bl	12250 <fputc@plt>
   19398:	ldr	r2, [sp, #4]
   1939c:	ldr	r3, [r5]
   193a0:	cmp	r2, r3
   193a4:	bne	193d8 <__assert_fail@plt+0x708c>
   193a8:	add	sp, sp, #12
   193ac:	pop	{r4, r5, r6, lr}
   193b0:	add	sp, sp, #12
   193b4:	bx	lr
   193b8:	ldr	r0, [pc, #40]	; 193e8 <__assert_fail@plt+0x709c>
   193bc:	ldr	r2, [pc, #40]	; 193ec <__assert_fail@plt+0x70a0>
   193c0:	ldr	r4, [r1, r0]
   193c4:	add	r2, pc, r2
   193c8:	mov	r1, #1
   193cc:	ldr	r0, [r4]
   193d0:	bl	121c0 <__fprintf_chk@plt>
   193d4:	b	19370 <__assert_fail@plt+0x7024>
   193d8:	bl	11e84 <__stack_chk_fail@plt>
   193dc:	andeq	r6, r1, r8, lsl #21
   193e0:	andeq	r0, r0, r0, lsr r2
   193e4:	strdeq	r6, [r1], -r0
   193e8:	andeq	r0, r0, r4, lsr r2
   193ec:	andeq	r5, r0, r8, lsr sp
   193f0:	push	{r0, r1, r2, r3}
   193f4:	ldr	r0, [pc, #104]	; 19464 <__assert_fail@plt+0x7118>
   193f8:	ldr	r2, [pc, #104]	; 19468 <__assert_fail@plt+0x711c>
   193fc:	add	r0, pc, r0
   19400:	push	{r4, r5, lr}
   19404:	sub	sp, sp, #12
   19408:	ldr	r4, [r0, r2]
   1940c:	ldr	r1, [pc, #88]	; 1946c <__assert_fail@plt+0x7120>
   19410:	add	r3, sp, #28
   19414:	ldr	ip, [r4]
   19418:	str	r3, [sp]
   1941c:	str	ip, [sp, #4]
   19420:	ldr	r5, [r0, r1]
   19424:	ldr	r2, [sp, #24]
   19428:	mov	r1, #1
   1942c:	ldr	r0, [r5]
   19430:	bl	11ff8 <__vfprintf_chk@plt>
   19434:	ldr	r1, [r5]
   19438:	mov	r0, #10
   1943c:	bl	12250 <fputc@plt>
   19440:	ldr	r2, [sp, #4]
   19444:	ldr	r3, [r4]
   19448:	cmp	r2, r3
   1944c:	bne	19460 <__assert_fail@plt+0x7114>
   19450:	add	sp, sp, #12
   19454:	pop	{r4, r5, lr}
   19458:	add	sp, sp, #16
   1945c:	bx	lr
   19460:	bl	11e84 <__stack_chk_fail@plt>
   19464:	andeq	r6, r1, r0, asr #19
   19468:	andeq	r0, r0, r0, lsr r2
   1946c:	andeq	r0, r0, r4, lsr r2
   19470:	ldr	r1, [r0, #12]
   19474:	ldr	r2, [r0, #4]
   19478:	cmp	r1, #0
   1947c:	push	{r4, lr}
   19480:	moveq	r4, r2
   19484:	sub	sp, sp, #16
   19488:	beq	194dc <__assert_fail@plt+0x7190>
   1948c:	cmp	r2, #0
   19490:	beq	19504 <__assert_fail@plt+0x71b8>
   19494:	ldrsb	r3, [r2]
   19498:	ldr	ip, [pc, #116]	; 19514 <__assert_fail@plt+0x71c8>
   1949c:	add	r4, r0, #16
   194a0:	cmp	r3, #47	; 0x2f
   194a4:	addeq	r2, r2, #1
   194a8:	add	ip, pc, ip
   194ac:	mov	r3, #4096	; 0x1000
   194b0:	stmib	sp, {r1, r2}
   194b4:	mov	r0, r4
   194b8:	str	ip, [sp]
   194bc:	mov	r1, r3
   194c0:	mov	r2, #1
   194c4:	bl	12328 <__snprintf_chk@plt>
   194c8:	cmp	r0, #0
   194cc:	movlt	r4, #0
   194d0:	blt	194dc <__assert_fail@plt+0x7190>
   194d4:	cmp	r0, #4096	; 0x1000
   194d8:	bge	194e8 <__assert_fail@plt+0x719c>
   194dc:	mov	r0, r4
   194e0:	add	sp, sp, #16
   194e4:	pop	{r4, pc}
   194e8:	bl	120d0 <__errno_location@plt>
   194ec:	mov	r4, #0
   194f0:	mov	r3, #36	; 0x24
   194f4:	str	r3, [r0]
   194f8:	mov	r0, r4
   194fc:	add	sp, sp, #16
   19500:	pop	{r4, pc}
   19504:	mov	r4, r1
   19508:	mov	r0, r4
   1950c:	add	sp, sp, #16
   19510:	pop	{r4, pc}
   19514:	andeq	r5, r0, ip, asr ip
   19518:	push	{r4, lr}
   1951c:	sub	sp, sp, #8
   19520:	add	r4, r0, #16
   19524:	mov	r3, #4096	; 0x1000
   19528:	stm	sp, {r1, r2}
   1952c:	mov	r0, r4
   19530:	mov	r1, r3
   19534:	mov	r2, #1
   19538:	bl	11e3c <__vsnprintf_chk@plt>
   1953c:	cmp	r0, #0
   19540:	movlt	r4, #0
   19544:	blt	19550 <__assert_fail@plt+0x7204>
   19548:	cmp	r0, #4096	; 0x1000
   1954c:	bge	1955c <__assert_fail@plt+0x7210>
   19550:	mov	r0, r4
   19554:	add	sp, sp, #8
   19558:	pop	{r4, pc}
   1955c:	bl	120d0 <__errno_location@plt>
   19560:	mov	r4, #0
   19564:	mov	r3, #36	; 0x24
   19568:	str	r3, [r0]
   1956c:	mov	r0, r4
   19570:	add	sp, sp, #8
   19574:	pop	{r4, pc}
   19578:	push	{r4, r5, r6, r7, lr}
   1957c:	sub	sp, sp, #20
   19580:	ldr	r4, [pc, #312]	; 196c0 <__assert_fail@plt+0x7374>
   19584:	ldr	r3, [pc, #312]	; 196c4 <__assert_fail@plt+0x7378>
   19588:	add	r4, pc, r4
   1958c:	ldr	r7, [pc, #308]	; 196c8 <__assert_fail@plt+0x737c>
   19590:	ldr	r5, [r4, r3]
   19594:	add	r7, pc, r7
   19598:	ldr	r6, [r7]
   1959c:	ldr	r3, [r5]
   195a0:	cmp	r6, #0
   195a4:	str	r3, [sp, #12]
   195a8:	beq	195c4 <__assert_fail@plt+0x7278>
   195ac:	ldr	r2, [sp, #12]
   195b0:	ldr	r3, [r5]
   195b4:	cmp	r2, r3
   195b8:	bne	196bc <__assert_fail@plt+0x7370>
   195bc:	add	sp, sp, #20
   195c0:	pop	{r4, r5, r6, r7, pc}
   195c4:	ldr	r0, [pc, #256]	; 196cc <__assert_fail@plt+0x7380>
   195c8:	add	r0, pc, r0
   195cc:	bl	11fa4 <getenv@plt>
   195d0:	cmp	r0, #0
   195d4:	beq	1961c <__assert_fail@plt+0x72d0>
   195d8:	mov	r2, r6
   195dc:	add	r1, sp, #8
   195e0:	bl	12070 <strtoul@plt>
   195e4:	mov	r6, r0
   195e8:	ldr	r0, [sp, #8]
   195ec:	cmp	r0, #0
   195f0:	beq	19608 <__assert_fail@plt+0x72bc>
   195f4:	ldr	r1, [pc, #212]	; 196d0 <__assert_fail@plt+0x7384>
   195f8:	add	r1, pc, r1
   195fc:	bl	11d34 <strcmp@plt>
   19600:	cmp	r0, #0
   19604:	beq	19630 <__assert_fail@plt+0x72e4>
   19608:	ldr	r3, [pc, #196]	; 196d4 <__assert_fail@plt+0x7388>
   1960c:	cmp	r6, #0
   19610:	add	r3, pc, r3
   19614:	str	r6, [r3]
   19618:	bne	1963c <__assert_fail@plt+0x72f0>
   1961c:	mov	r3, #2
   19620:	ldr	r2, [pc, #176]	; 196d8 <__assert_fail@plt+0x738c>
   19624:	add	r2, pc, r2
   19628:	str	r3, [r2]
   1962c:	b	195ac <__assert_fail@plt+0x7260>
   19630:	ldr	r3, [pc, #164]	; 196dc <__assert_fail@plt+0x7390>
   19634:	mov	r6, r3
   19638:	str	r3, [r7]
   1963c:	bl	11dac <getuid@plt>
   19640:	mov	r7, r0
   19644:	bl	11ed8 <geteuid@plt>
   19648:	cmp	r7, r0
   1964c:	beq	196a0 <__assert_fail@plt+0x7354>
   19650:	ldr	r7, [pc, #136]	; 196e0 <__assert_fail@plt+0x7394>
   19654:	ldr	r2, [pc, #136]	; 196e4 <__assert_fail@plt+0x7398>
   19658:	add	r7, pc, r7
   1965c:	orr	r3, r6, #16777216	; 0x1000000
   19660:	str	r3, [r7]
   19664:	ldr	r3, [r4, r2]
   19668:	ldr	r4, [r3]
   1966c:	bl	12040 <getpid@plt>
   19670:	ldr	r3, [pc, #112]	; 196e8 <__assert_fail@plt+0x739c>
   19674:	ldr	r2, [pc, #112]	; 196ec <__assert_fail@plt+0x73a0>
   19678:	add	r3, pc, r3
   1967c:	str	r3, [sp]
   19680:	add	r2, pc, r2
   19684:	mov	r1, #1
   19688:	mov	r3, r0
   1968c:	mov	r0, r4
   19690:	bl	121c0 <__fprintf_chk@plt>
   19694:	ldr	r3, [r7]
   19698:	orr	r3, r3, #2
   1969c:	b	19620 <__assert_fail@plt+0x72d4>
   196a0:	bl	12124 <getgid@plt>
   196a4:	mov	r7, r0
   196a8:	bl	11f08 <getegid@plt>
   196ac:	cmp	r7, r0
   196b0:	orreq	r3, r6, #2
   196b4:	bne	19650 <__assert_fail@plt+0x7304>
   196b8:	b	19620 <__assert_fail@plt+0x72d4>
   196bc:	bl	11e84 <__stack_chk_fail@plt>
   196c0:	andeq	r6, r1, r4, lsr r8
   196c4:	andeq	r0, r0, r0, lsr r2
   196c8:			; <UNDEFINED> instruction: 0x00016bb4
   196cc:	andeq	r5, r0, r4, asr #22
   196d0:			; <UNDEFINED> instruction: 0x000056b0
   196d4:	andeq	r6, r1, r8, lsr fp
   196d8:	andeq	r6, r1, r4, lsr #22
   196dc:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   196e0:	strdeq	r6, [r1], -r0
   196e4:	andeq	r0, r0, r4, lsr r2
   196e8:	andeq	r5, r0, r0, ror #21
   196ec:	muleq	r0, ip, sl
   196f0:	cmp	r0, #0
   196f4:	ldrne	r3, [r0, #8]
   196f8:	addne	r3, r3, #1
   196fc:	strne	r3, [r0, #8]
   19700:	bx	lr
   19704:	ldr	r2, [pc, #228]	; 197f0 <__assert_fail@plt+0x74a4>
   19708:	push	{r4, r5, lr}
   1970c:	subs	r4, r0, #0
   19710:	sub	sp, sp, #12
   19714:	add	r2, pc, r2
   19718:	beq	19730 <__assert_fail@plt+0x73e4>
   1971c:	ldr	r3, [r4, #8]
   19720:	sub	r3, r3, #1
   19724:	cmp	r3, #0
   19728:	str	r3, [r4, #8]
   1972c:	ble	19738 <__assert_fail@plt+0x73ec>
   19730:	add	sp, sp, #12
   19734:	pop	{r4, r5, pc}
   19738:	ldr	r3, [pc, #180]	; 197f4 <__assert_fail@plt+0x74a8>
   1973c:	add	r3, pc, r3
   19740:	ldr	r3, [r3]
   19744:	tst	r3, #4
   19748:	bne	1979c <__assert_fail@plt+0x7450>
   1974c:	add	r3, r4, #4096	; 0x1000
   19750:	ldr	r2, [r3, #16]
   19754:	cmp	r2, #0
   19758:	beq	19768 <__assert_fail@plt+0x741c>
   1975c:	ldr	r3, [r3, #20]
   19760:	mov	r0, r4
   19764:	blx	r3
   19768:	ldr	r0, [r4]
   1976c:	cmp	r0, #0
   19770:	bge	19794 <__assert_fail@plt+0x7448>
   19774:	ldr	r0, [r4, #4]
   19778:	bl	11dc4 <free@plt>
   1977c:	ldr	r0, [r4, #12]
   19780:	bl	11dc4 <free@plt>
   19784:	mov	r0, r4
   19788:	add	sp, sp, #12
   1978c:	pop	{r4, r5, lr}
   19790:	b	11dc4 <free@plt>
   19794:	bl	12304 <close@plt>
   19798:	b	19774 <__assert_fail@plt+0x7428>
   1979c:	ldr	r3, [pc, #84]	; 197f8 <__assert_fail@plt+0x74ac>
   197a0:	ldr	r3, [r2, r3]
   197a4:	ldr	r5, [r3]
   197a8:	bl	12040 <getpid@plt>
   197ac:	ldr	r2, [pc, #72]	; 197fc <__assert_fail@plt+0x74b0>
   197b0:	ldr	r3, [pc, #72]	; 19800 <__assert_fail@plt+0x74b4>
   197b4:	add	r2, pc, r2
   197b8:	str	r2, [sp, #4]
   197bc:	ldr	r2, [pc, #64]	; 19804 <__assert_fail@plt+0x74b8>
   197c0:	add	r3, pc, r3
   197c4:	str	r3, [sp]
   197c8:	add	r2, pc, r2
   197cc:	mov	r1, #1
   197d0:	mov	r3, r0
   197d4:	mov	r0, r5
   197d8:	bl	121c0 <__fprintf_chk@plt>
   197dc:	ldr	r1, [pc, #36]	; 19808 <__assert_fail@plt+0x74bc>
   197e0:	mov	r0, r4
   197e4:	add	r1, pc, r1
   197e8:	bl	19324 <__assert_fail@plt+0x6fd8>
   197ec:	b	1974c <__assert_fail@plt+0x7400>
   197f0:	andeq	r6, r1, r8, lsr #13
   197f4:	andeq	r6, r1, ip, lsl #20
   197f8:	andeq	r0, r0, r4, lsr r2
   197fc:			; <UNDEFINED> instruction: 0x000059bc
   19800:	muleq	r0, r8, r9
   19804:	muleq	r0, r8, r9
   19808:	muleq	r0, r0, r9
   1980c:	push	{r0, r1, r2, r3}
   19810:	mov	r0, #1
   19814:	push	{r4, r5, r6, r7, lr}
   19818:	sub	sp, sp, #20
   1981c:	ldr	r5, [pc, #264]	; 1992c <__assert_fail@plt+0x75e0>
   19820:	ldr	r3, [pc, #264]	; 19930 <__assert_fail@plt+0x75e4>
   19824:	add	r5, pc, r5
   19828:	ldr	r1, [pc, #260]	; 19934 <__assert_fail@plt+0x75e8>
   1982c:	ldr	r6, [r5, r3]
   19830:	ldr	r7, [sp, #40]	; 0x28
   19834:	ldr	r3, [r6]
   19838:	str	r3, [sp, #12]
   1983c:	bl	11cf8 <calloc@plt>
   19840:	subs	r4, r0, #0
   19844:	beq	198a0 <__assert_fail@plt+0x7554>
   19848:	ldr	r3, [pc, #232]	; 19938 <__assert_fail@plt+0x75ec>
   1984c:	add	r3, pc, r3
   19850:	ldr	r3, [r3]
   19854:	tst	r3, #4
   19858:	bne	198c4 <__assert_fail@plt+0x7578>
   1985c:	mov	r1, #1
   19860:	mvn	r3, #0
   19864:	cmp	r7, #0
   19868:	str	r1, [r4, #8]
   1986c:	str	r3, [r4]
   19870:	beq	198a0 <__assert_fail@plt+0x7554>
   19874:	add	ip, sp, #44	; 0x2c
   19878:	mov	r2, r7
   1987c:	mov	r3, ip
   19880:	add	r0, r4, #4
   19884:	str	ip, [sp, #8]
   19888:	bl	1210c <__vasprintf_chk@plt>
   1988c:	cmp	r0, #0
   19890:	blt	19918 <__assert_fail@plt+0x75cc>
   19894:	ldr	r3, [r4, #4]
   19898:	cmp	r3, #0
   1989c:	beq	19918 <__assert_fail@plt+0x75cc>
   198a0:	ldr	r2, [sp, #12]
   198a4:	ldr	r3, [r6]
   198a8:	mov	r0, r4
   198ac:	cmp	r2, r3
   198b0:	bne	19928 <__assert_fail@plt+0x75dc>
   198b4:	add	sp, sp, #20
   198b8:	pop	{r4, r5, r6, r7, lr}
   198bc:	add	sp, sp, #16
   198c0:	bx	lr
   198c4:	ldr	r3, [pc, #112]	; 1993c <__assert_fail@plt+0x75f0>
   198c8:	ldr	r3, [r5, r3]
   198cc:	ldr	r5, [r3]
   198d0:	bl	12040 <getpid@plt>
   198d4:	ldr	r2, [pc, #100]	; 19940 <__assert_fail@plt+0x75f4>
   198d8:	ldr	r3, [pc, #100]	; 19944 <__assert_fail@plt+0x75f8>
   198dc:	add	r2, pc, r2
   198e0:	str	r2, [sp, #4]
   198e4:	ldr	r2, [pc, #92]	; 19948 <__assert_fail@plt+0x75fc>
   198e8:	add	r3, pc, r3
   198ec:	str	r3, [sp]
   198f0:	add	r2, pc, r2
   198f4:	mov	r1, #1
   198f8:	mov	r3, r0
   198fc:	mov	r0, r5
   19900:	bl	121c0 <__fprintf_chk@plt>
   19904:	ldr	r1, [pc, #64]	; 1994c <__assert_fail@plt+0x7600>
   19908:	mov	r0, r4
   1990c:	add	r1, pc, r1
   19910:	bl	19324 <__assert_fail@plt+0x6fd8>
   19914:	b	1985c <__assert_fail@plt+0x7510>
   19918:	mov	r0, r4
   1991c:	bl	19704 <__assert_fail@plt+0x73b8>
   19920:	mov	r4, #0
   19924:	b	198a0 <__assert_fail@plt+0x7554>
   19928:	bl	11e84 <__stack_chk_fail@plt>
   1992c:	muleq	r1, r8, r5
   19930:	andeq	r0, r0, r0, lsr r2
   19934:	andeq	r1, r0, ip, lsl r0
   19938:	strdeq	r6, [r1], -ip
   1993c:	andeq	r0, r0, r4, lsr r2
   19940:	muleq	r0, r4, r8
   19944:	andeq	r5, r0, r0, ror r8
   19948:	andeq	r5, r0, r0, ror r8
   1994c:	andeq	r5, r0, r0, ror r8
   19950:	ldr	r3, [r0]
   19954:	push	{r4, r5, r6, lr}
   19958:	cmp	r3, #0
   1995c:	ldr	r6, [pc, #220]	; 19a40 <__assert_fail@plt+0x76f4>
   19960:	sub	sp, sp, #8
   19964:	add	r6, pc, r6
   19968:	bge	19a20 <__assert_fail@plt+0x76d4>
   1996c:	cmp	r1, #0
   19970:	mov	r5, r0
   19974:	beq	19a10 <__assert_fail@plt+0x76c4>
   19978:	mov	r0, r1
   1997c:	bl	11e78 <strdup@plt>
   19980:	subs	r4, r0, #0
   19984:	beq	19a18 <__assert_fail@plt+0x76cc>
   19988:	ldr	r0, [r5, #12]
   1998c:	bl	11dc4 <free@plt>
   19990:	ldr	r3, [pc, #172]	; 19a44 <__assert_fail@plt+0x76f8>
   19994:	str	r4, [r5, #12]
   19998:	add	r3, pc, r3
   1999c:	ldr	r0, [r3]
   199a0:	ands	r0, r0, #4
   199a4:	bne	199b0 <__assert_fail@plt+0x7664>
   199a8:	add	sp, sp, #8
   199ac:	pop	{r4, r5, r6, pc}
   199b0:	ldr	r3, [pc, #144]	; 19a48 <__assert_fail@plt+0x76fc>
   199b4:	ldr	r3, [r6, r3]
   199b8:	ldr	r6, [r3]
   199bc:	bl	12040 <getpid@plt>
   199c0:	ldr	r2, [pc, #132]	; 19a4c <__assert_fail@plt+0x7700>
   199c4:	ldr	r3, [pc, #132]	; 19a50 <__assert_fail@plt+0x7704>
   199c8:	add	r2, pc, r2
   199cc:	str	r2, [sp, #4]
   199d0:	ldr	r2, [pc, #124]	; 19a54 <__assert_fail@plt+0x7708>
   199d4:	add	r3, pc, r3
   199d8:	str	r3, [sp]
   199dc:	add	r2, pc, r2
   199e0:	mov	r1, #1
   199e4:	mov	r3, r0
   199e8:	mov	r0, r6
   199ec:	bl	121c0 <__fprintf_chk@plt>
   199f0:	ldr	r1, [pc, #96]	; 19a58 <__assert_fail@plt+0x770c>
   199f4:	mov	r0, r5
   199f8:	mov	r2, r4
   199fc:	add	r1, pc, r1
   19a00:	bl	19324 <__assert_fail@plt+0x6fd8>
   19a04:	mov	r0, #0
   19a08:	add	sp, sp, #8
   19a0c:	pop	{r4, r5, r6, pc}
   19a10:	mov	r4, r1
   19a14:	b	19988 <__assert_fail@plt+0x763c>
   19a18:	mvn	r0, #11
   19a1c:	b	199a8 <__assert_fail@plt+0x765c>
   19a20:	ldr	r3, [pc, #52]	; 19a5c <__assert_fail@plt+0x7710>
   19a24:	ldr	r1, [pc, #52]	; 19a60 <__assert_fail@plt+0x7714>
   19a28:	ldr	r0, [pc, #52]	; 19a64 <__assert_fail@plt+0x7718>
   19a2c:	add	r3, pc, r3
   19a30:	mov	r2, #109	; 0x6d
   19a34:	add	r1, pc, r1
   19a38:	add	r0, pc, r0
   19a3c:	bl	1234c <__assert_fail@plt>
   19a40:	andeq	r6, r1, r8, asr r4
   19a44:			; <UNDEFINED> instruction: 0x000167b0
   19a48:	andeq	r0, r0, r4, lsr r2
   19a4c:	andeq	r5, r0, r8, lsr #15
   19a50:	andeq	r5, r0, r4, lsl #15
   19a54:	andeq	r5, r0, r4, lsl #15
   19a58:	andeq	r5, r0, r4, lsr #15
   19a5c:	andeq	r5, r0, r8, lsr #13
   19a60:	andeq	r5, r0, r0, asr r7
   19a64:	andeq	r5, r0, r8, asr r7
   19a68:	cmp	r0, #0
   19a6c:	ldrne	r0, [r0, #12]
   19a70:	bx	lr
   19a74:	push	{r4, r5, r6, lr}
   19a78:	subs	r5, r1, #0
   19a7c:	ldr	r6, [pc, #196]	; 19b48 <__assert_fail@plt+0x77fc>
   19a80:	sub	sp, sp, #8
   19a84:	mov	r4, r0
   19a88:	add	r6, pc, r6
   19a8c:	beq	19aa0 <__assert_fail@plt+0x7754>
   19a90:	mov	r0, r5
   19a94:	bl	11e78 <strdup@plt>
   19a98:	subs	r5, r0, #0
   19a9c:	beq	19b40 <__assert_fail@plt+0x77f4>
   19aa0:	ldr	r0, [r4]
   19aa4:	cmp	r0, #0
   19aa8:	blt	19ab8 <__assert_fail@plt+0x776c>
   19aac:	bl	12304 <close@plt>
   19ab0:	mvn	r3, #0
   19ab4:	str	r3, [r4]
   19ab8:	ldr	r0, [r4, #4]
   19abc:	bl	11dc4 <free@plt>
   19ac0:	ldr	r3, [pc, #132]	; 19b4c <__assert_fail@plt+0x7800>
   19ac4:	str	r5, [r4, #4]
   19ac8:	add	r3, pc, r3
   19acc:	ldr	r3, [r3]
   19ad0:	ands	r0, r3, #4
   19ad4:	bne	19ae0 <__assert_fail@plt+0x7794>
   19ad8:	add	sp, sp, #8
   19adc:	pop	{r4, r5, r6, pc}
   19ae0:	ldr	r3, [pc, #104]	; 19b50 <__assert_fail@plt+0x7804>
   19ae4:	ldr	r3, [r6, r3]
   19ae8:	ldr	r6, [r3]
   19aec:	bl	12040 <getpid@plt>
   19af0:	ldr	r2, [pc, #92]	; 19b54 <__assert_fail@plt+0x7808>
   19af4:	ldr	r3, [pc, #92]	; 19b58 <__assert_fail@plt+0x780c>
   19af8:	add	r2, pc, r2
   19afc:	str	r2, [sp, #4]
   19b00:	ldr	r2, [pc, #84]	; 19b5c <__assert_fail@plt+0x7810>
   19b04:	add	r3, pc, r3
   19b08:	str	r3, [sp]
   19b0c:	add	r2, pc, r2
   19b10:	mov	r1, #1
   19b14:	mov	r3, r0
   19b18:	mov	r0, r6
   19b1c:	bl	121c0 <__fprintf_chk@plt>
   19b20:	ldr	r1, [pc, #56]	; 19b60 <__assert_fail@plt+0x7814>
   19b24:	mov	r0, r4
   19b28:	mov	r2, r5
   19b2c:	add	r1, pc, r1
   19b30:	bl	19324 <__assert_fail@plt+0x6fd8>
   19b34:	mov	r0, #0
   19b38:	add	sp, sp, #8
   19b3c:	pop	{r4, r5, r6, pc}
   19b40:	mvn	r0, #11
   19b44:	b	19ad8 <__assert_fail@plt+0x778c>
   19b48:	andeq	r6, r1, r4, lsr r3
   19b4c:	andeq	r6, r1, r0, lsl #13
   19b50:	andeq	r0, r0, r4, lsr r2
   19b54:	andeq	r5, r0, r8, ror r6
   19b58:	andeq	r5, r0, r4, asr r6
   19b5c:	andeq	r5, r0, r4, asr r6
   19b60:	andeq	r5, r0, r8, lsl #13
   19b64:	cmp	r0, #0
   19b68:	ldrne	r0, [r0, #4]
   19b6c:	bx	lr
   19b70:	ldr	r3, [pc, #144]	; 19c08 <__assert_fail@plt+0x78bc>
   19b74:	add	ip, r0, #4096	; 0x1000
   19b78:	add	r3, pc, r3
   19b7c:	str	r1, [ip, #16]
   19b80:	ldr	r3, [r3]
   19b84:	str	r2, [ip, #20]
   19b88:	tst	r3, #4
   19b8c:	ldr	r3, [pc, #120]	; 19c0c <__assert_fail@plt+0x78c0>
   19b90:	add	r3, pc, r3
   19b94:	bne	19ba0 <__assert_fail@plt+0x7854>
   19b98:	mov	r0, #0
   19b9c:	bx	lr
   19ba0:	ldr	r2, [pc, #104]	; 19c10 <__assert_fail@plt+0x78c4>
   19ba4:	push	{r4, r5, lr}
   19ba8:	sub	sp, sp, #12
   19bac:	ldr	r3, [r3, r2]
   19bb0:	mov	r4, r0
   19bb4:	ldr	r5, [r3]
   19bb8:	bl	12040 <getpid@plt>
   19bbc:	ldr	r2, [pc, #80]	; 19c14 <__assert_fail@plt+0x78c8>
   19bc0:	ldr	r3, [pc, #80]	; 19c18 <__assert_fail@plt+0x78cc>
   19bc4:	add	r2, pc, r2
   19bc8:	str	r2, [sp, #4]
   19bcc:	ldr	r2, [pc, #72]	; 19c1c <__assert_fail@plt+0x78d0>
   19bd0:	add	r3, pc, r3
   19bd4:	str	r3, [sp]
   19bd8:	add	r2, pc, r2
   19bdc:	mov	r1, #1
   19be0:	mov	r3, r0
   19be4:	mov	r0, r5
   19be8:	bl	121c0 <__fprintf_chk@plt>
   19bec:	ldr	r1, [pc, #44]	; 19c20 <__assert_fail@plt+0x78d4>
   19bf0:	mov	r0, r4
   19bf4:	add	r1, pc, r1
   19bf8:	bl	19324 <__assert_fail@plt+0x6fd8>
   19bfc:	mov	r0, #0
   19c00:	add	sp, sp, #12
   19c04:	pop	{r4, r5, pc}
   19c08:	ldrdeq	r6, [r1], -r0
   19c0c:	andeq	r6, r1, ip, lsr #4
   19c10:	andeq	r0, r0, r4, lsr r2
   19c14:	andeq	r5, r0, ip, lsr #11
   19c18:	andeq	r5, r0, r8, lsl #11
   19c1c:	andeq	r5, r0, r8, lsl #11
   19c20:	ldrdeq	r5, [r0], -r0
   19c24:	cmp	r0, #0
   19c28:	addne	r0, r0, #4096	; 0x1000
   19c2c:	ldrne	r0, [r0, #16]
   19c30:	bx	lr
   19c34:	add	r3, r0, #4096	; 0x1000
   19c38:	mov	r0, #0
   19c3c:	str	r1, [r3, #24]
   19c40:	bx	lr
   19c44:	push	{r4, r5, r6, lr}
   19c48:	subs	r4, r0, #0
   19c4c:	ldr	r5, [pc, #284]	; 19d70 <__assert_fail@plt+0x7a24>
   19c50:	sub	sp, sp, #8
   19c54:	add	r5, pc, r5
   19c58:	beq	19d4c <__assert_fail@plt+0x7a00>
   19c5c:	ldr	r3, [r4, #4]
   19c60:	cmp	r3, #0
   19c64:	beq	19d28 <__assert_fail@plt+0x79dc>
   19c68:	ldr	r3, [r4]
   19c6c:	cmp	r3, #0
   19c70:	blt	19c80 <__assert_fail@plt+0x7934>
   19c74:	mov	r0, r3
   19c78:	add	sp, sp, #8
   19c7c:	pop	{r4, r5, r6, pc}
   19c80:	bl	19470 <__assert_fail@plt+0x7124>
   19c84:	subs	r6, r0, #0
   19c88:	beq	19d18 <__assert_fail@plt+0x79cc>
   19c8c:	ldr	r3, [pc, #224]	; 19d74 <__assert_fail@plt+0x7a28>
   19c90:	add	r3, pc, r3
   19c94:	ldr	r3, [r3]
   19c98:	tst	r3, #4
   19c9c:	bne	19cc0 <__assert_fail@plt+0x7974>
   19ca0:	mov	r0, r6
   19ca4:	mov	r1, #524288	; 0x80000
   19ca8:	bl	11f8c <open64@plt>
   19cac:	mov	r3, r0
   19cb0:	str	r0, [r4]
   19cb4:	mov	r0, r3
   19cb8:	add	sp, sp, #8
   19cbc:	pop	{r4, r5, r6, pc}
   19cc0:	ldr	r3, [pc, #176]	; 19d78 <__assert_fail@plt+0x7a2c>
   19cc4:	ldr	r3, [r5, r3]
   19cc8:	ldr	r5, [r3]
   19ccc:	bl	12040 <getpid@plt>
   19cd0:	ldr	r2, [pc, #164]	; 19d7c <__assert_fail@plt+0x7a30>
   19cd4:	ldr	r3, [pc, #164]	; 19d80 <__assert_fail@plt+0x7a34>
   19cd8:	add	r2, pc, r2
   19cdc:	str	r2, [sp, #4]
   19ce0:	ldr	r2, [pc, #156]	; 19d84 <__assert_fail@plt+0x7a38>
   19ce4:	add	r3, pc, r3
   19ce8:	str	r3, [sp]
   19cec:	add	r2, pc, r2
   19cf0:	mov	r1, #1
   19cf4:	mov	r3, r0
   19cf8:	mov	r0, r5
   19cfc:	bl	121c0 <__fprintf_chk@plt>
   19d00:	ldr	r1, [pc, #128]	; 19d88 <__assert_fail@plt+0x7a3c>
   19d04:	mov	r2, r6
   19d08:	add	r1, pc, r1
   19d0c:	mov	r0, r4
   19d10:	bl	19324 <__assert_fail@plt+0x6fd8>
   19d14:	b	19ca0 <__assert_fail@plt+0x7954>
   19d18:	bl	120d0 <__errno_location@plt>
   19d1c:	ldr	r3, [r0]
   19d20:	rsb	r3, r3, #0
   19d24:	b	19c74 <__assert_fail@plt+0x7928>
   19d28:	ldr	r3, [pc, #92]	; 19d8c <__assert_fail@plt+0x7a40>
   19d2c:	ldr	r1, [pc, #92]	; 19d90 <__assert_fail@plt+0x7a44>
   19d30:	ldr	r0, [pc, #92]	; 19d94 <__assert_fail@plt+0x7a48>
   19d34:	add	r3, pc, r3
   19d38:	mov	r2, #201	; 0xc9
   19d3c:	add	r3, r3, #20
   19d40:	add	r1, pc, r1
   19d44:	add	r0, pc, r0
   19d48:	bl	1234c <__assert_fail@plt>
   19d4c:	ldr	r3, [pc, #68]	; 19d98 <__assert_fail@plt+0x7a4c>
   19d50:	ldr	r1, [pc, #68]	; 19d9c <__assert_fail@plt+0x7a50>
   19d54:	ldr	r0, [pc, #68]	; 19da0 <__assert_fail@plt+0x7a54>
   19d58:	add	r3, pc, r3
   19d5c:	mov	r2, #200	; 0xc8
   19d60:	add	r3, r3, #20
   19d64:	add	r1, pc, r1
   19d68:	add	r0, pc, r0
   19d6c:	bl	1234c <__assert_fail@plt>
   19d70:	andeq	r6, r1, r8, ror #2
   19d74:			; <UNDEFINED> instruction: 0x000164b8
   19d78:	andeq	r0, r0, r4, lsr r2
   19d7c:	muleq	r0, r8, r4
   19d80:	andeq	r5, r0, r4, ror r4
   19d84:	andeq	r5, r0, r4, ror r4
   19d88:	andeq	r5, r0, r0, ror #9
   19d8c:	andeq	r5, r0, r0, lsr #7
   19d90:	andeq	r5, r0, r4, asr #8
   19d94:	muleq	r0, r4, r4
   19d98:	andeq	r5, r0, ip, ror r3
   19d9c:	andeq	r5, r0, r0, lsr #8
   19da0:	andeq	r5, r0, ip, ror #8
   19da4:	push	{r3}		; (str r3, [sp, #-4]!)
   19da8:	ldr	r3, [pc, #340]	; 19f04 <__assert_fail@plt+0x7bb8>
   19dac:	ldr	ip, [pc, #340]	; 19f08 <__assert_fail@plt+0x7bbc>
   19db0:	add	r3, pc, r3
   19db4:	push	{r4, r5, r6, r7, r8, r9, lr}
   19db8:	sub	sp, sp, #24
   19dbc:	ldr	r8, [r3, ip]
   19dc0:	ldr	r7, [sp, #52]	; 0x34
   19dc4:	mov	r6, r2
   19dc8:	ldr	r2, [r8]
   19dcc:	cmp	r7, #0
   19dd0:	mov	r4, r1
   19dd4:	str	r2, [sp, #20]
   19dd8:	beq	19ec4 <__assert_fail@plt+0x7b78>
   19ddc:	add	r3, sp, #56	; 0x38
   19de0:	ldr	r5, [r0, #4]
   19de4:	mov	r1, r7
   19de8:	mov	r2, r3
   19dec:	mov	r9, r0
   19df0:	str	r3, [sp, #16]
   19df4:	bl	19518 <__assert_fail@plt+0x71cc>
   19df8:	cmp	r5, #0
   19dfc:	beq	19e0c <__assert_fail@plt+0x7ac0>
   19e00:	ldrsb	r3, [r5]
   19e04:	cmp	r3, #47	; 0x2f
   19e08:	addeq	r5, r5, #1
   19e0c:	cmp	r0, #0
   19e10:	beq	19e20 <__assert_fail@plt+0x7ad4>
   19e14:	ldrsb	r3, [r0]
   19e18:	cmp	r3, #47	; 0x2f
   19e1c:	addeq	r0, r0, #1
   19e20:	ldr	r2, [r9, #12]
   19e24:	cmp	r2, #0
   19e28:	beq	19eb0 <__assert_fail@plt+0x7b64>
   19e2c:	cmp	r5, #0
   19e30:	beq	19e9c <__assert_fail@plt+0x7b50>
   19e34:	cmp	r0, #0
   19e38:	beq	19e90 <__assert_fail@plt+0x7b44>
   19e3c:	ldr	r3, [pc, #200]	; 19f0c <__assert_fail@plt+0x7bc0>
   19e40:	str	r0, [sp, #12]
   19e44:	add	r3, pc, r3
   19e48:	stmib	sp, {r2, r5}
   19e4c:	str	r3, [sp]
   19e50:	mov	r2, #1
   19e54:	mvn	r3, #0
   19e58:	mov	r1, r6
   19e5c:	mov	r0, r4
   19e60:	bl	12328 <__snprintf_chk@plt>
   19e64:	cmp	r0, r6
   19e68:	bcs	19eec <__assert_fail@plt+0x7ba0>
   19e6c:	ldr	r2, [sp, #20]
   19e70:	ldr	r3, [r8]
   19e74:	mov	r0, r4
   19e78:	cmp	r2, r3
   19e7c:	bne	19f00 <__assert_fail@plt+0x7bb4>
   19e80:	add	sp, sp, #24
   19e84:	pop	{r4, r5, r6, r7, r8, r9, lr}
   19e88:	add	sp, sp, #4
   19e8c:	bx	lr
   19e90:	ldr	r0, [pc, #120]	; 19f10 <__assert_fail@plt+0x7bc4>
   19e94:	add	r0, pc, r0
   19e98:	b	19e3c <__assert_fail@plt+0x7af0>
   19e9c:	ldr	r5, [pc, #112]	; 19f14 <__assert_fail@plt+0x7bc8>
   19ea0:	cmp	r0, #0
   19ea4:	add	r5, pc, r5
   19ea8:	bne	19e3c <__assert_fail@plt+0x7af0>
   19eac:	b	19e90 <__assert_fail@plt+0x7b44>
   19eb0:	ldr	r2, [pc, #96]	; 19f18 <__assert_fail@plt+0x7bcc>
   19eb4:	cmp	r5, #0
   19eb8:	add	r2, pc, r2
   19ebc:	bne	19e34 <__assert_fail@plt+0x7ae8>
   19ec0:	b	19e9c <__assert_fail@plt+0x7b50>
   19ec4:	bl	19470 <__assert_fail@plt+0x7124>
   19ec8:	subs	r1, r0, #0
   19ecc:	moveq	r4, r1
   19ed0:	beq	19e6c <__assert_fail@plt+0x7b20>
   19ed4:	mov	r2, r6
   19ed8:	add	r6, r4, r6
   19edc:	mov	r0, r4
   19ee0:	bl	12148 <strncpy@plt>
   19ee4:	strb	r7, [r6, #-1]
   19ee8:	b	19e6c <__assert_fail@plt+0x7b20>
   19eec:	bl	120d0 <__errno_location@plt>
   19ef0:	mov	r3, #36	; 0x24
   19ef4:	mov	r4, #0
   19ef8:	str	r3, [r0]
   19efc:	b	19e6c <__assert_fail@plt+0x7b20>
   19f00:	bl	11e84 <__stack_chk_fail@plt>
   19f04:	andeq	r6, r1, ip
   19f08:	andeq	r0, r0, r0, lsr r2
   19f0c:			; <UNDEFINED> instruction: 0x000053b8
   19f10:	andeq	r5, r0, r0, asr #5
   19f14:			; <UNDEFINED> instruction: 0x000052b0
   19f18:	muleq	r0, ip, r2
   19f1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19f20:	sub	sp, sp, #20
   19f24:	ldr	r5, [pc, #296]	; 1a054 <__assert_fail@plt+0x7d08>
   19f28:	ldr	r3, [pc, #296]	; 1a058 <__assert_fail@plt+0x7d0c>
   19f2c:	add	r5, pc, r5
   19f30:	mov	r8, r1
   19f34:	ldr	r6, [r5, r3]
   19f38:	mov	r7, r2
   19f3c:	mov	r9, r0
   19f40:	ldr	r3, [r6]
   19f44:	str	r3, [sp, #12]
   19f48:	bl	19c44 <__assert_fail@plt+0x78f8>
   19f4c:	subs	r4, r0, #0
   19f50:	str	r0, [sp, #8]
   19f54:	blt	19f88 <__assert_fail@plt+0x7c3c>
   19f58:	ldr	r3, [pc, #252]	; 1a05c <__assert_fail@plt+0x7d10>
   19f5c:	add	r3, pc, r3
   19f60:	ldr	r3, [r3]
   19f64:	tst	r3, #4
   19f68:	bne	19ff4 <__assert_fail@plt+0x7ca8>
   19f6c:	mov	r0, r4
   19f70:	mov	r3, #0
   19f74:	mov	r2, r8
   19f78:	mov	r1, r7
   19f7c:	bl	11df4 <faccessat@plt>
   19f80:	subs	r4, r0, #0
   19f84:	bne	19fa4 <__assert_fail@plt+0x7c58>
   19f88:	ldr	r2, [sp, #12]
   19f8c:	ldr	r3, [r6]
   19f90:	mov	r0, r4
   19f94:	cmp	r2, r3
   19f98:	bne	1a050 <__assert_fail@plt+0x7d04>
   19f9c:	add	sp, sp, #20
   19fa0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19fa4:	bl	120d0 <__errno_location@plt>
   19fa8:	ldr	r3, [r0]
   19fac:	cmp	r3, #2
   19fb0:	bne	19f88 <__assert_fail@plt+0x7c3c>
   19fb4:	add	r3, r9, #4096	; 0x1000
   19fb8:	ldr	r3, [r3, #24]
   19fbc:	cmp	r3, #0
   19fc0:	beq	19f88 <__assert_fail@plt+0x7c3c>
   19fc4:	mov	r0, r9
   19fc8:	add	r2, sp, #8
   19fcc:	mov	r1, r7
   19fd0:	blx	r3
   19fd4:	subs	r3, r0, #0
   19fd8:	bne	19f88 <__assert_fail@plt+0x7c3c>
   19fdc:	mov	r2, r8
   19fe0:	mov	r1, r7
   19fe4:	ldr	r0, [sp, #8]
   19fe8:	bl	11df4 <faccessat@plt>
   19fec:	mov	r4, r0
   19ff0:	b	19f88 <__assert_fail@plt+0x7c3c>
   19ff4:	ldr	r3, [pc, #100]	; 1a060 <__assert_fail@plt+0x7d14>
   19ff8:	ldr	r3, [r5, r3]
   19ffc:	ldr	r4, [r3]
   1a000:	bl	12040 <getpid@plt>
   1a004:	ldr	r2, [pc, #88]	; 1a064 <__assert_fail@plt+0x7d18>
   1a008:	ldr	r3, [pc, #88]	; 1a068 <__assert_fail@plt+0x7d1c>
   1a00c:	add	r2, pc, r2
   1a010:	str	r2, [sp, #4]
   1a014:	ldr	r2, [pc, #80]	; 1a06c <__assert_fail@plt+0x7d20>
   1a018:	add	r3, pc, r3
   1a01c:	str	r3, [sp]
   1a020:	add	r2, pc, r2
   1a024:	mov	r1, #1
   1a028:	mov	r3, r0
   1a02c:	mov	r0, r4
   1a030:	bl	121c0 <__fprintf_chk@plt>
   1a034:	ldr	r1, [pc, #52]	; 1a070 <__assert_fail@plt+0x7d24>
   1a038:	mov	r2, r7
   1a03c:	add	r1, pc, r1
   1a040:	mov	r0, r9
   1a044:	bl	19324 <__assert_fail@plt+0x6fd8>
   1a048:	ldr	r4, [sp, #8]
   1a04c:	b	19f6c <__assert_fail@plt+0x7c20>
   1a050:	bl	11e84 <__stack_chk_fail@plt>
   1a054:	muleq	r1, r0, lr
   1a058:	andeq	r0, r0, r0, lsr r2
   1a05c:	andeq	r6, r1, ip, ror #3
   1a060:	andeq	r0, r0, r4, lsr r2
   1a064:	andeq	r5, r0, r4, ror #2
   1a068:	andeq	r5, r0, r0, asr #2
   1a06c:	andeq	r5, r0, r0, asr #2
   1a070:	andeq	r5, r0, ip, asr #3
   1a074:	push	{r2, r3}
   1a078:	ldr	r3, [pc, #104]	; 1a0e8 <__assert_fail@plt+0x7d9c>
   1a07c:	ldr	r2, [pc, #104]	; 1a0ec <__assert_fail@plt+0x7da0>
   1a080:	add	r3, pc, r3
   1a084:	push	{r4, r5, r6, lr}
   1a088:	sub	sp, sp, #8
   1a08c:	ldr	r4, [r3, r2]
   1a090:	add	ip, sp, #28
   1a094:	mov	r2, ip
   1a098:	ldr	r3, [r4]
   1a09c:	mov	r6, r1
   1a0a0:	ldr	r1, [sp, #24]
   1a0a4:	str	r3, [sp, #4]
   1a0a8:	mov	r5, r0
   1a0ac:	str	ip, [sp]
   1a0b0:	bl	19518 <__assert_fail@plt+0x71cc>
   1a0b4:	mov	r1, r6
   1a0b8:	mov	r2, r0
   1a0bc:	mov	r0, r5
   1a0c0:	bl	19f1c <__assert_fail@plt+0x7bd0>
   1a0c4:	ldr	r2, [sp, #4]
   1a0c8:	ldr	r3, [r4]
   1a0cc:	cmp	r2, r3
   1a0d0:	bne	1a0e4 <__assert_fail@plt+0x7d98>
   1a0d4:	add	sp, sp, #8
   1a0d8:	pop	{r4, r5, r6, lr}
   1a0dc:	add	sp, sp, #8
   1a0e0:	bx	lr
   1a0e4:	bl	11e84 <__stack_chk_fail@plt>
   1a0e8:	andeq	r5, r1, ip, lsr sp
   1a0ec:	andeq	r0, r0, r0, lsr r2
   1a0f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a0f4:	sub	sp, sp, #20
   1a0f8:	ldr	r5, [pc, #536]	; 1a318 <__assert_fail@plt+0x7fcc>
   1a0fc:	ldr	r3, [pc, #536]	; 1a31c <__assert_fail@plt+0x7fd0>
   1a100:	add	r5, pc, r5
   1a104:	subs	r8, r0, #0
   1a108:	ldr	r6, [r5, r3]
   1a10c:	mov	r7, r2
   1a110:	ldr	r3, [r6]
   1a114:	str	r3, [sp, #12]
   1a118:	beq	1a178 <__assert_fail@plt+0x7e2c>
   1a11c:	mov	r9, r1
   1a120:	bl	19c44 <__assert_fail@plt+0x78f8>
   1a124:	cmp	r0, #0
   1a128:	mov	r4, r0
   1a12c:	str	r0, [sp, #8]
   1a130:	blt	1a15c <__assert_fail@plt+0x7e10>
   1a134:	mov	r2, r9
   1a138:	mov	r1, r7
   1a13c:	bl	11e18 <__openat64_2@plt>
   1a140:	subs	r4, r0, #0
   1a144:	blt	1a1ec <__assert_fail@plt+0x7ea0>
   1a148:	ldr	r3, [pc, #464]	; 1a320 <__assert_fail@plt+0x7fd4>
   1a14c:	add	r3, pc, r3
   1a150:	ldr	r3, [r3]
   1a154:	tst	r3, #4
   1a158:	bne	1a2a4 <__assert_fail@plt+0x7f58>
   1a15c:	ldr	r2, [sp, #12]
   1a160:	ldr	r3, [r6]
   1a164:	mov	r0, r4
   1a168:	cmp	r2, r3
   1a16c:	bne	1a30c <__assert_fail@plt+0x7fc0>
   1a170:	add	sp, sp, #20
   1a174:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a178:	mov	r0, r2
   1a17c:	bl	120b8 <__open64_2@plt>
   1a180:	ldr	r3, [pc, #412]	; 1a324 <__assert_fail@plt+0x7fd8>
   1a184:	add	r3, pc, r3
   1a188:	ldr	r3, [r3]
   1a18c:	tst	r3, #4
   1a190:	mov	r4, r0
   1a194:	beq	1a15c <__assert_fail@plt+0x7e10>
   1a198:	ldr	r3, [pc, #392]	; 1a328 <__assert_fail@plt+0x7fdc>
   1a19c:	ldr	r3, [r5, r3]
   1a1a0:	ldr	r5, [r3]
   1a1a4:	bl	12040 <getpid@plt>
   1a1a8:	ldr	r2, [pc, #380]	; 1a32c <__assert_fail@plt+0x7fe0>
   1a1ac:	ldr	r3, [pc, #380]	; 1a330 <__assert_fail@plt+0x7fe4>
   1a1b0:	add	r2, pc, r2
   1a1b4:	str	r2, [sp, #4]
   1a1b8:	ldr	r2, [pc, #372]	; 1a334 <__assert_fail@plt+0x7fe8>
   1a1bc:	add	r3, pc, r3
   1a1c0:	str	r3, [sp]
   1a1c4:	add	r2, pc, r2
   1a1c8:	mov	r1, #1
   1a1cc:	mov	r3, r0
   1a1d0:	mov	r0, r5
   1a1d4:	bl	121c0 <__fprintf_chk@plt>
   1a1d8:	ldr	r0, [pc, #344]	; 1a338 <__assert_fail@plt+0x7fec>
   1a1dc:	mov	r1, r7
   1a1e0:	add	r0, pc, r0
   1a1e4:	bl	193f0 <__assert_fail@plt+0x70a4>
   1a1e8:	b	1a15c <__assert_fail@plt+0x7e10>
   1a1ec:	bl	120d0 <__errno_location@plt>
   1a1f0:	ldr	r3, [r0]
   1a1f4:	cmp	r3, #2
   1a1f8:	bne	1a148 <__assert_fail@plt+0x7dfc>
   1a1fc:	add	r3, r8, #4096	; 0x1000
   1a200:	ldr	r3, [r3, #24]
   1a204:	cmp	r3, #0
   1a208:	beq	1a148 <__assert_fail@plt+0x7dfc>
   1a20c:	add	r2, sp, #8
   1a210:	mov	r1, r7
   1a214:	mov	r0, r8
   1a218:	blx	r3
   1a21c:	cmp	r0, #0
   1a220:	bne	1a148 <__assert_fail@plt+0x7dfc>
   1a224:	mov	r2, r9
   1a228:	mov	r1, r7
   1a22c:	ldr	r0, [sp, #8]
   1a230:	bl	11e18 <__openat64_2@plt>
   1a234:	ldr	r3, [pc, #256]	; 1a33c <__assert_fail@plt+0x7ff0>
   1a238:	add	r3, pc, r3
   1a23c:	ldr	r3, [r3]
   1a240:	tst	r3, #4
   1a244:	mov	r9, r0
   1a248:	beq	1a310 <__assert_fail@plt+0x7fc4>
   1a24c:	ldr	r3, [pc, #212]	; 1a328 <__assert_fail@plt+0x7fdc>
   1a250:	ldr	r3, [r5, r3]
   1a254:	ldr	r5, [r3]
   1a258:	bl	12040 <getpid@plt>
   1a25c:	ldr	r2, [pc, #220]	; 1a340 <__assert_fail@plt+0x7ff4>
   1a260:	ldr	r3, [pc, #220]	; 1a344 <__assert_fail@plt+0x7ff8>
   1a264:	add	r2, pc, r2
   1a268:	str	r2, [sp, #4]
   1a26c:	ldr	r2, [pc, #212]	; 1a348 <__assert_fail@plt+0x7ffc>
   1a270:	add	r3, pc, r3
   1a274:	str	r3, [sp]
   1a278:	add	r2, pc, r2
   1a27c:	mov	r1, #1
   1a280:	mov	r3, r0
   1a284:	mov	r0, r5
   1a288:	bl	121c0 <__fprintf_chk@plt>
   1a28c:	ldr	r3, [pc, #184]	; 1a34c <__assert_fail@plt+0x8000>
   1a290:	cmp	r4, r9
   1a294:	add	r3, pc, r3
   1a298:	ldrne	r3, [pc, #176]	; 1a350 <__assert_fail@plt+0x8004>
   1a29c:	addne	r3, pc, r3
   1a2a0:	b	1a2f0 <__assert_fail@plt+0x7fa4>
   1a2a4:	ldr	r3, [pc, #124]	; 1a328 <__assert_fail@plt+0x7fdc>
   1a2a8:	mov	r9, r4
   1a2ac:	ldr	r3, [r5, r3]
   1a2b0:	ldr	r4, [r3]
   1a2b4:	bl	12040 <getpid@plt>
   1a2b8:	ldr	r2, [pc, #148]	; 1a354 <__assert_fail@plt+0x8008>
   1a2bc:	ldr	r3, [pc, #148]	; 1a358 <__assert_fail@plt+0x800c>
   1a2c0:	add	r2, pc, r2
   1a2c4:	str	r2, [sp, #4]
   1a2c8:	ldr	r2, [pc, #140]	; 1a35c <__assert_fail@plt+0x8010>
   1a2cc:	add	r3, pc, r3
   1a2d0:	str	r3, [sp]
   1a2d4:	add	r2, pc, r2
   1a2d8:	mov	r1, #1
   1a2dc:	mov	r3, r0
   1a2e0:	mov	r0, r4
   1a2e4:	bl	121c0 <__fprintf_chk@plt>
   1a2e8:	ldr	r3, [pc, #112]	; 1a360 <__assert_fail@plt+0x8014>
   1a2ec:	add	r3, pc, r3
   1a2f0:	ldr	r1, [pc, #108]	; 1a364 <__assert_fail@plt+0x8018>
   1a2f4:	mov	r2, r7
   1a2f8:	mov	r0, r8
   1a2fc:	add	r1, pc, r1
   1a300:	mov	r4, r9
   1a304:	bl	19324 <__assert_fail@plt+0x6fd8>
   1a308:	b	1a15c <__assert_fail@plt+0x7e10>
   1a30c:	bl	11e84 <__stack_chk_fail@plt>
   1a310:	mov	r4, r0
   1a314:	b	1a15c <__assert_fail@plt+0x7e10>
   1a318:			; <UNDEFINED> instruction: 0x00015cbc
   1a31c:	andeq	r0, r0, r0, lsr r2
   1a320:	strdeq	r5, [r1], -ip
   1a324:	andeq	r5, r1, r4, asr #31
   1a328:	andeq	r0, r0, r4, lsr r2
   1a32c:	andeq	r4, r0, r0, asr #31
   1a330:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1a334:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1a338:	andeq	r5, r0, r8, asr #32
   1a33c:	andeq	r5, r1, r0, lsl pc
   1a340:	andeq	r4, r0, ip, lsl #30
   1a344:	andeq	r4, r0, r8, ror #29
   1a348:	andeq	r4, r0, r8, ror #29
   1a34c:	andeq	r4, r0, r0, asr #29
   1a350:	andeq	r4, r0, ip, ror pc
   1a354:			; <UNDEFINED> instruction: 0x00004eb0
   1a358:	andeq	r4, r0, ip, lsl #29
   1a35c:	andeq	r4, r0, ip, lsl #29
   1a360:	andeq	r4, r0, r8, ror #28
   1a364:	andeq	r4, r0, ip, lsr pc
   1a368:	mov	ip, r2
   1a36c:	push	{r4, r5, r6, lr}
   1a370:	mov	r2, r3
   1a374:	mov	r5, r1
   1a378:	mov	r1, ip
   1a37c:	mov	r4, r0
   1a380:	bl	19518 <__assert_fail@plt+0x71cc>
   1a384:	subs	r2, r0, #0
   1a388:	beq	1a39c <__assert_fail@plt+0x8050>
   1a38c:	mov	r1, r5
   1a390:	mov	r0, r4
   1a394:	pop	{r4, r5, r6, lr}
   1a398:	b	1a0f0 <__assert_fail@plt+0x7da4>
   1a39c:	bl	120d0 <__errno_location@plt>
   1a3a0:	ldr	r0, [r0]
   1a3a4:	rsb	r0, r0, #0
   1a3a8:	pop	{r4, r5, r6, pc}
   1a3ac:	push	{r2, r3}
   1a3b0:	ldr	r2, [pc, #80]	; 1a408 <__assert_fail@plt+0x80bc>
   1a3b4:	ldr	ip, [pc, #80]	; 1a40c <__assert_fail@plt+0x80c0>
   1a3b8:	add	r2, pc, r2
   1a3bc:	push	{r4, lr}
   1a3c0:	sub	sp, sp, #8
   1a3c4:	ldr	r4, [r2, ip]
   1a3c8:	add	lr, sp, #20
   1a3cc:	mov	r3, lr
   1a3d0:	ldr	ip, [r4]
   1a3d4:	ldr	r2, [sp, #16]
   1a3d8:	str	lr, [sp]
   1a3dc:	str	ip, [sp, #4]
   1a3e0:	bl	1a368 <__assert_fail@plt+0x801c>
   1a3e4:	ldr	r2, [sp, #4]
   1a3e8:	ldr	r3, [r4]
   1a3ec:	cmp	r2, r3
   1a3f0:	bne	1a404 <__assert_fail@plt+0x80b8>
   1a3f4:	add	sp, sp, #8
   1a3f8:	pop	{r4, lr}
   1a3fc:	add	sp, sp, #8
   1a400:	bx	lr
   1a404:	bl	11e84 <__stack_chk_fail@plt>
   1a408:	andeq	r5, r1, r4, lsl #20
   1a40c:	andeq	r0, r0, r0, lsr r2
   1a410:	push	{r4, r5, r6, r7, r8, lr}
   1a414:	subs	r4, r1, #0
   1a418:	beq	1a4d4 <__assert_fail@plt+0x8188>
   1a41c:	ldrsb	r3, [r4]
   1a420:	cmp	r3, #0
   1a424:	beq	1a4dc <__assert_fail@plt+0x8190>
   1a428:	ldr	r5, [pc, #180]	; 1a4e4 <__assert_fail@plt+0x8198>
   1a42c:	ldr	r7, [pc, #180]	; 1a4e8 <__assert_fail@plt+0x819c>
   1a430:	ldr	lr, [pc, #180]	; 1a4ec <__assert_fail@plt+0x81a0>
   1a434:	ldr	r6, [pc, #180]	; 1a4f0 <__assert_fail@plt+0x81a4>
   1a438:	mov	ip, r4
   1a43c:	mov	r1, #0
   1a440:	b	1a470 <__assert_fail@plt+0x8124>
   1a444:	cmp	r3, #119	; 0x77
   1a448:	beq	1a4a4 <__assert_fail@plt+0x8158>
   1a44c:	cmp	r3, #97	; 0x61
   1a450:	beq	1a4b8 <__assert_fail@plt+0x816c>
   1a454:	cmp	r3, #101	; 0x65
   1a458:	orreq	r1, r1, #524288	; 0x80000
   1a45c:	cmn	ip, #1
   1a460:	beq	1a48c <__assert_fail@plt+0x8140>
   1a464:	ldrsb	r3, [ip, #1]!
   1a468:	cmp	r3, #0
   1a46c:	beq	1a48c <__assert_fail@plt+0x8140>
   1a470:	cmp	r3, #114	; 0x72
   1a474:	bne	1a444 <__assert_fail@plt+0x80f8>
   1a478:	ldrsb	r3, [ip, #1]
   1a47c:	cmp	r3, #43	; 0x2b
   1a480:	orreq	r1, r1, #2
   1a484:	cmn	ip, #1
   1a488:	bne	1a464 <__assert_fail@plt+0x8118>
   1a48c:	bl	1a0f0 <__assert_fail@plt+0x7da4>
   1a490:	cmp	r0, #0
   1a494:	blt	1a4cc <__assert_fail@plt+0x8180>
   1a498:	mov	r1, r4
   1a49c:	pop	{r4, r5, r6, r7, r8, lr}
   1a4a0:	b	11cec <fdopen@plt>
   1a4a4:	ldrsb	r3, [ip, #1]
   1a4a8:	cmp	r3, #43	; 0x2b
   1a4ac:	orreq	r1, r1, r6
   1a4b0:	orrne	r1, r1, lr
   1a4b4:	b	1a45c <__assert_fail@plt+0x8110>
   1a4b8:	ldrsb	r3, [ip, #1]
   1a4bc:	cmp	r3, #43	; 0x2b
   1a4c0:	orreq	r1, r1, r7
   1a4c4:	orrne	r1, r1, r5
   1a4c8:	b	1a45c <__assert_fail@plt+0x8110>
   1a4cc:	mov	r0, #0
   1a4d0:	pop	{r4, r5, r6, r7, r8, pc}
   1a4d4:	mov	r1, r4
   1a4d8:	b	1a48c <__assert_fail@plt+0x8140>
   1a4dc:	mov	r1, r3
   1a4e0:	b	1a48c <__assert_fail@plt+0x8140>
   1a4e4:	andeq	r0, r0, r1, lsl #8
   1a4e8:	andeq	r0, r0, r2, lsl #8
   1a4ec:	andeq	r0, r0, r1, lsl #4
   1a4f0:	andeq	r0, r0, r2, lsl #4
   1a4f4:	mov	ip, r2
   1a4f8:	push	{r4, r5, r6, lr}
   1a4fc:	mov	r2, r3
   1a500:	mov	r5, r1
   1a504:	mov	r1, ip
   1a508:	mov	r4, r0
   1a50c:	bl	19518 <__assert_fail@plt+0x71cc>
   1a510:	subs	r2, r0, #0
   1a514:	popeq	{r4, r5, r6, pc}
   1a518:	mov	r1, r5
   1a51c:	mov	r0, r4
   1a520:	pop	{r4, r5, r6, lr}
   1a524:	b	1a410 <__assert_fail@plt+0x80c4>
   1a528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a52c:	add	fp, sp, #32
   1a530:	ldr	lr, [pc, #300]	; 1a664 <__assert_fail@plt+0x8318>
   1a534:	ldr	ip, [pc, #300]	; 1a668 <__assert_fail@plt+0x831c>
   1a538:	add	lr, pc, lr
   1a53c:	sub	sp, sp, #20
   1a540:	ldr	ip, [lr, ip]
   1a544:	rsb	r6, r2, r2, lsl #3
   1a548:	mov	r7, r1
   1a54c:	mov	r4, r2
   1a550:	mov	r1, lr
   1a554:	add	r2, r6, #7
   1a558:	ldr	r1, [pc, #268]	; 1a66c <__assert_fail@plt+0x8320>
   1a55c:	str	ip, [fp, #-48]	; 0xffffffd0
   1a560:	bic	r2, r2, #7
   1a564:	ldr	ip, [ip]
   1a568:	mov	r8, #0
   1a56c:	sub	sp, sp, r2
   1a570:	mov	r9, r3
   1a574:	str	r8, [r7]
   1a578:	ldrd	r2, [fp, #4]
   1a57c:	add	r1, pc, r1
   1a580:	str	ip, [fp, #-40]	; 0xffffffd8
   1a584:	bl	1a4f4 <__assert_fail@plt+0x81a8>
   1a588:	subs	r5, r0, #0
   1a58c:	beq	1a648 <__assert_fail@plt+0x82fc>
   1a590:	mov	r1, r6
   1a594:	mov	r2, r5
   1a598:	mov	r0, sp
   1a59c:	bl	11dd0 <fgets@plt>
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a648 <__assert_fail@plt+0x82fc>
   1a5a8:	mov	r0, r5
   1a5ac:	bl	121e4 <fclose@plt>
   1a5b0:	mov	r0, sp
   1a5b4:	bl	1207c <strlen@plt>
   1a5b8:	mov	r2, #0
   1a5bc:	sub	r1, fp, #44	; 0x2c
   1a5c0:	mov	sl, sp
   1a5c4:	sub	r0, r0, #1
   1a5c8:	ldrsb	r3, [sp, r0]
   1a5cc:	cmp	r3, #10
   1a5d0:	strbeq	r8, [sp, r0]
   1a5d4:	mov	r0, r4
   1a5d8:	bl	1c6bc <__assert_fail@plt+0xa370>
   1a5dc:	cmp	r0, #0
   1a5e0:	str	r0, [r7]
   1a5e4:	beq	1a658 <__assert_fail@plt+0x830c>
   1a5e8:	cmp	r9, #0
   1a5ec:	mov	r1, r0
   1a5f0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a5f4:	mov	r0, sl
   1a5f8:	bne	1a628 <__assert_fail@plt+0x82dc>
   1a5fc:	bl	1caec <__assert_fail@plt+0xa7a0>
   1a600:	cmp	r0, #0
   1a604:	bne	1a638 <__assert_fail@plt+0x82ec>
   1a608:	mov	r0, #0
   1a60c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a610:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a614:	ldr	r3, [r3]
   1a618:	cmp	r2, r3
   1a61c:	bne	1a660 <__assert_fail@plt+0x8314>
   1a620:	sub	sp, fp, #32
   1a624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a628:	mov	r3, #0
   1a62c:	bl	1cc44 <__assert_fail@plt+0xa8f8>
   1a630:	cmp	r0, #0
   1a634:	beq	1a608 <__assert_fail@plt+0x82bc>
   1a638:	ldr	r0, [r7]
   1a63c:	bl	1c700 <__assert_fail@plt+0xa3b4>
   1a640:	mvn	r0, #21
   1a644:	b	1a60c <__assert_fail@plt+0x82c0>
   1a648:	bl	120d0 <__errno_location@plt>
   1a64c:	ldr	r0, [r0]
   1a650:	rsb	r0, r0, #0
   1a654:	b	1a60c <__assert_fail@plt+0x82c0>
   1a658:	mvn	r0, #11
   1a65c:	b	1a60c <__assert_fail@plt+0x82c0>
   1a660:	bl	11e84 <__stack_chk_fail@plt>
   1a664:	andeq	r5, r1, r4, lsl #17
   1a668:	andeq	r0, r0, r0, lsr r2
   1a66c:	andeq	r4, r0, ip, asr #25
   1a670:	push	{r2, r3}
   1a674:	ldr	r2, [pc, #80]	; 1a6cc <__assert_fail@plt+0x8380>
   1a678:	ldr	ip, [pc, #80]	; 1a6d0 <__assert_fail@plt+0x8384>
   1a67c:	add	r2, pc, r2
   1a680:	push	{r4, lr}
   1a684:	sub	sp, sp, #8
   1a688:	ldr	r4, [r2, ip]
   1a68c:	add	lr, sp, #20
   1a690:	mov	r3, lr
   1a694:	ldr	ip, [r4]
   1a698:	ldr	r2, [sp, #16]
   1a69c:	str	lr, [sp]
   1a6a0:	str	ip, [sp, #4]
   1a6a4:	bl	1a4f4 <__assert_fail@plt+0x81a8>
   1a6a8:	ldr	r2, [sp, #4]
   1a6ac:	ldr	r3, [r4]
   1a6b0:	cmp	r2, r3
   1a6b4:	bne	1a6c8 <__assert_fail@plt+0x837c>
   1a6b8:	add	sp, sp, #8
   1a6bc:	pop	{r4, lr}
   1a6c0:	add	sp, sp, #8
   1a6c4:	bx	lr
   1a6c8:	bl	11e84 <__stack_chk_fail@plt>
   1a6cc:	andeq	r5, r1, r0, asr #14
   1a6d0:	andeq	r0, r0, r0, lsr r2
   1a6d4:	ldr	r3, [pc, #268]	; 1a7e8 <__assert_fail@plt+0x849c>
   1a6d8:	push	{r4, r5, r6, lr}
   1a6dc:	subs	r5, r1, #0
   1a6e0:	sub	sp, sp, #8
   1a6e4:	add	r3, pc, r3
   1a6e8:	beq	1a728 <__assert_fail@plt+0x83dc>
   1a6ec:	mov	r2, r5
   1a6f0:	mov	r1, #524288	; 0x80000
   1a6f4:	bl	1a0f0 <__assert_fail@plt+0x7da4>
   1a6f8:	mov	r4, r0
   1a6fc:	cmp	r4, #0
   1a700:	blt	1a768 <__assert_fail@plt+0x841c>
   1a704:	mov	r0, r4
   1a708:	bl	1228c <fdopendir@plt>
   1a70c:	subs	r6, r0, #0
   1a710:	beq	1a7dc <__assert_fail@plt+0x8490>
   1a714:	cmp	r5, #0
   1a718:	beq	1a7cc <__assert_fail@plt+0x8480>
   1a71c:	mov	r0, r6
   1a720:	add	sp, sp, #8
   1a724:	pop	{r4, r5, r6, pc}
   1a728:	ldr	r2, [r0, #4]
   1a72c:	mov	r4, r0
   1a730:	cmp	r2, #0
   1a734:	beq	1a768 <__assert_fail@plt+0x841c>
   1a738:	ldr	r2, [pc, #172]	; 1a7ec <__assert_fail@plt+0x84a0>
   1a73c:	add	r2, pc, r2
   1a740:	ldr	r2, [r2]
   1a744:	tst	r2, #4
   1a748:	bne	1a778 <__assert_fail@plt+0x842c>
   1a74c:	mov	r0, r4
   1a750:	bl	19c44 <__assert_fail@plt+0x78f8>
   1a754:	mov	r1, #3
   1a758:	bl	1c4fc <__assert_fail@plt+0xa1b0>
   1a75c:	mov	r4, r0
   1a760:	cmp	r4, #0
   1a764:	bge	1a704 <__assert_fail@plt+0x83b8>
   1a768:	mov	r6, #0
   1a76c:	mov	r0, r6
   1a770:	add	sp, sp, #8
   1a774:	pop	{r4, r5, r6, pc}
   1a778:	ldr	r2, [pc, #112]	; 1a7f0 <__assert_fail@plt+0x84a4>
   1a77c:	ldr	r3, [r3, r2]
   1a780:	ldr	r6, [r3]
   1a784:	bl	12040 <getpid@plt>
   1a788:	ldr	r2, [pc, #100]	; 1a7f4 <__assert_fail@plt+0x84a8>
   1a78c:	ldr	r3, [pc, #100]	; 1a7f8 <__assert_fail@plt+0x84ac>
   1a790:	add	r2, pc, r2
   1a794:	str	r2, [sp, #4]
   1a798:	ldr	r2, [pc, #92]	; 1a7fc <__assert_fail@plt+0x84b0>
   1a79c:	add	r3, pc, r3
   1a7a0:	str	r3, [sp]
   1a7a4:	add	r2, pc, r2
   1a7a8:	mov	r1, #1
   1a7ac:	mov	r3, r0
   1a7b0:	mov	r0, r6
   1a7b4:	bl	121c0 <__fprintf_chk@plt>
   1a7b8:	ldr	r1, [pc, #64]	; 1a800 <__assert_fail@plt+0x84b4>
   1a7bc:	mov	r0, r4
   1a7c0:	add	r1, pc, r1
   1a7c4:	bl	19324 <__assert_fail@plt+0x6fd8>
   1a7c8:	b	1a74c <__assert_fail@plt+0x8400>
   1a7cc:	bl	11d40 <rewinddir@plt>
   1a7d0:	mov	r0, r6
   1a7d4:	add	sp, sp, #8
   1a7d8:	pop	{r4, r5, r6, pc}
   1a7dc:	mov	r0, r4
   1a7e0:	bl	12304 <close@plt>
   1a7e4:	b	1a71c <__assert_fail@plt+0x83d0>
   1a7e8:	ldrdeq	r5, [r1], -r8
   1a7ec:	andeq	r5, r1, ip, lsl #20
   1a7f0:	andeq	r0, r0, r4, lsr r2
   1a7f4:	andeq	r4, r0, r0, ror #19
   1a7f8:			; <UNDEFINED> instruction: 0x000049bc
   1a7fc:			; <UNDEFINED> instruction: 0x000049bc
   1a800:	andeq	r4, r0, ip, lsl #21
   1a804:	push	{r4, lr}
   1a808:	mov	r4, r0
   1a80c:	bl	19518 <__assert_fail@plt+0x71cc>
   1a810:	subs	r1, r0, #0
   1a814:	popeq	{r4, pc}
   1a818:	mov	r0, r4
   1a81c:	pop	{r4, lr}
   1a820:	b	1a6d4 <__assert_fail@plt+0x8388>
   1a824:	push	{r1, r2, r3}
   1a828:	ldr	r3, [pc, #80]	; 1a880 <__assert_fail@plt+0x8534>
   1a82c:	ldr	r1, [pc, #80]	; 1a884 <__assert_fail@plt+0x8538>
   1a830:	add	r3, pc, r3
   1a834:	push	{r4, lr}
   1a838:	sub	sp, sp, #12
   1a83c:	ldr	r4, [r3, r1]
   1a840:	add	ip, sp, #24
   1a844:	mov	r2, ip
   1a848:	ldr	r3, [r4]
   1a84c:	ldr	r1, [sp, #20]
   1a850:	str	r3, [sp, #4]
   1a854:	str	ip, [sp]
   1a858:	bl	1a804 <__assert_fail@plt+0x84b8>
   1a85c:	ldr	r2, [sp, #4]
   1a860:	ldr	r3, [r4]
   1a864:	cmp	r2, r3
   1a868:	bne	1a87c <__assert_fail@plt+0x8530>
   1a86c:	add	sp, sp, #12
   1a870:	pop	{r4, lr}
   1a874:	add	sp, sp, #12
   1a878:	bx	lr
   1a87c:	bl	11e84 <__stack_chk_fail@plt>
   1a880:	andeq	r5, r1, ip, lsl #11
   1a884:	andeq	r0, r0, r0, lsr r2
   1a888:	push	{r4, r5, r6, lr}
   1a88c:	subs	r6, r3, #0
   1a890:	mov	r4, r1
   1a894:	mov	r5, r2
   1a898:	beq	1a8bc <__assert_fail@plt+0x8570>
   1a89c:	bl	19c44 <__assert_fail@plt+0x78f8>
   1a8a0:	subs	r3, r0, #0
   1a8a4:	blt	1a8e4 <__assert_fail@plt+0x8598>
   1a8a8:	mov	r3, r5
   1a8ac:	mov	r2, r4
   1a8b0:	mov	r1, r6
   1a8b4:	pop	{r4, r5, r6, lr}
   1a8b8:	b	11fc8 <readlinkat@plt>
   1a8bc:	bl	19470 <__assert_fail@plt+0x7124>
   1a8c0:	cmp	r0, #0
   1a8c4:	beq	1a8d8 <__assert_fail@plt+0x858c>
   1a8c8:	mov	r2, r5
   1a8cc:	mov	r1, r4
   1a8d0:	pop	{r4, r5, r6, lr}
   1a8d4:	b	11efc <readlink@plt>
   1a8d8:	bl	120d0 <__errno_location@plt>
   1a8dc:	ldr	r3, [r0]
   1a8e0:	rsb	r3, r3, #0
   1a8e4:	mov	r0, r3
   1a8e8:	pop	{r4, r5, r6, pc}
   1a8ec:	push	{r3}		; (str r3, [sp, #-4]!)
   1a8f0:	ldr	r3, [pc, #132]	; 1a97c <__assert_fail@plt+0x8630>
   1a8f4:	ldr	ip, [pc, #132]	; 1a980 <__assert_fail@plt+0x8634>
   1a8f8:	add	r3, pc, r3
   1a8fc:	push	{r4, r5, r6, r7, lr}
   1a900:	sub	sp, sp, #8
   1a904:	ldr	r4, [r3, ip]
   1a908:	add	lr, sp, #32
   1a90c:	mov	r5, r1
   1a910:	ldr	ip, [r4]
   1a914:	mov	r7, r2
   1a918:	ldr	r1, [sp, #28]
   1a91c:	mov	r2, lr
   1a920:	str	ip, [sp, #4]
   1a924:	str	lr, [sp]
   1a928:	mov	r6, r0
   1a92c:	bl	19518 <__assert_fail@plt+0x71cc>
   1a930:	subs	r3, r0, #0
   1a934:	beq	1a968 <__assert_fail@plt+0x861c>
   1a938:	mov	r2, r7
   1a93c:	mov	r1, r5
   1a940:	mov	r0, r6
   1a944:	bl	1a888 <__assert_fail@plt+0x853c>
   1a948:	ldr	r2, [sp, #4]
   1a94c:	ldr	r3, [r4]
   1a950:	cmp	r2, r3
   1a954:	bne	1a978 <__assert_fail@plt+0x862c>
   1a958:	add	sp, sp, #8
   1a95c:	pop	{r4, r5, r6, r7, lr}
   1a960:	add	sp, sp, #4
   1a964:	bx	lr
   1a968:	bl	120d0 <__errno_location@plt>
   1a96c:	ldr	r0, [r0]
   1a970:	rsb	r0, r0, #0
   1a974:	b	1a948 <__assert_fail@plt+0x85fc>
   1a978:	bl	11e84 <__stack_chk_fail@plt>
   1a97c:	andeq	r5, r1, r4, asr #9
   1a980:	andeq	r0, r0, r0, lsr r2
   1a984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a988:	mov	r9, r3
   1a98c:	ldr	r4, [pc, #400]	; 1ab24 <__assert_fail@plt+0x87d8>
   1a990:	ldr	ip, [pc, #400]	; 1ab28 <__assert_fail@plt+0x87dc>
   1a994:	add	r4, pc, r4
   1a998:	sub	sp, sp, #36	; 0x24
   1a99c:	ldr	r3, [r4, ip]
   1a9a0:	mov	r6, r1
   1a9a4:	str	r3, [sp, #12]
   1a9a8:	ldr	r3, [r3]
   1a9ac:	mov	r1, #524288	; 0x80000
   1a9b0:	mov	r5, r2
   1a9b4:	mov	r2, r9
   1a9b8:	str	r3, [sp, #28]
   1a9bc:	bl	1a0f0 <__assert_fail@plt+0x7da4>
   1a9c0:	mov	r7, r0
   1a9c4:	bl	120d0 <__errno_location@plt>
   1a9c8:	cmp	r7, #0
   1a9cc:	mov	r8, r0
   1a9d0:	blt	1ab00 <__assert_fail@plt+0x87b4>
   1a9d4:	ldr	r3, [pc, #336]	; 1ab2c <__assert_fail@plt+0x87e0>
   1a9d8:	add	r3, pc, r3
   1a9dc:	ldr	r3, [r3]
   1a9e0:	tst	r3, #4
   1a9e4:	bne	1aa8c <__assert_fail@plt+0x8740>
   1a9e8:	mov	r2, r5
   1a9ec:	mov	r1, #0
   1a9f0:	mov	r0, r6
   1a9f4:	bl	1213c <memset@plt>
   1a9f8:	cmp	r5, #0
   1a9fc:	movne	r4, #0
   1aa00:	movne	fp, r4
   1aa04:	addne	r9, sp, #20
   1aa08:	beq	1ab14 <__assert_fail@plt+0x87c8>
   1aa0c:	mov	r2, r5
   1aa10:	mov	r1, r6
   1aa14:	mov	r0, r7
   1aa18:	bl	11d88 <read@plt>
   1aa1c:	cmp	r0, #0
   1aa20:	ble	1aa3c <__assert_fail@plt+0x86f0>
   1aa24:	subs	r5, r5, r0
   1aa28:	add	r6, r6, r0
   1aa2c:	add	r4, r4, r0
   1aa30:	beq	1ab0c <__assert_fail@plt+0x87c0>
   1aa34:	mov	fp, #0
   1aa38:	b	1aa0c <__assert_fail@plt+0x86c0>
   1aa3c:	ldr	sl, [r8]
   1aa40:	beq	1aa58 <__assert_fail@plt+0x870c>
   1aa44:	cmp	sl, #4
   1aa48:	cmpne	sl, #11
   1aa4c:	bne	1aa58 <__assert_fail@plt+0x870c>
   1aa50:	cmp	fp, #4
   1aa54:	ble	1aae0 <__assert_fail@plt+0x8794>
   1aa58:	cmp	r4, #0
   1aa5c:	mvneq	r4, #0
   1aa60:	mov	r0, r7
   1aa64:	bl	12304 <close@plt>
   1aa68:	str	sl, [r8]
   1aa6c:	ldr	r3, [sp, #12]
   1aa70:	ldr	r2, [sp, #28]
   1aa74:	mov	r0, r4
   1aa78:	ldr	r3, [r3]
   1aa7c:	cmp	r2, r3
   1aa80:	bne	1ab20 <__assert_fail@plt+0x87d4>
   1aa84:	add	sp, sp, #36	; 0x24
   1aa88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa8c:	ldr	r3, [pc, #156]	; 1ab30 <__assert_fail@plt+0x87e4>
   1aa90:	ldr	r3, [r4, r3]
   1aa94:	ldr	r4, [r3]
   1aa98:	bl	12040 <getpid@plt>
   1aa9c:	ldr	r2, [pc, #144]	; 1ab34 <__assert_fail@plt+0x87e8>
   1aaa0:	ldr	r3, [pc, #144]	; 1ab38 <__assert_fail@plt+0x87ec>
   1aaa4:	add	r2, pc, r2
   1aaa8:	str	r2, [sp, #4]
   1aaac:	ldr	r2, [pc, #136]	; 1ab3c <__assert_fail@plt+0x87f0>
   1aab0:	add	r3, pc, r3
   1aab4:	str	r3, [sp]
   1aab8:	add	r2, pc, r2
   1aabc:	mov	r1, #1
   1aac0:	mov	r3, r0
   1aac4:	mov	r0, r4
   1aac8:	bl	121c0 <__fprintf_chk@plt>
   1aacc:	ldr	r0, [pc, #108]	; 1ab40 <__assert_fail@plt+0x87f4>
   1aad0:	mov	r1, r9
   1aad4:	add	r0, pc, r0
   1aad8:	bl	193f0 <__assert_fail@plt+0x70a4>
   1aadc:	b	1a9e8 <__assert_fail@plt+0x869c>
   1aae0:	ldr	r3, [pc, #92]	; 1ab44 <__assert_fail@plt+0x87f8>
   1aae4:	mov	r1, #0
   1aae8:	mov	r0, r9
   1aaec:	add	fp, fp, #1
   1aaf0:	str	r1, [sp, #20]
   1aaf4:	str	r3, [sp, #24]
   1aaf8:	bl	11ddc <nanosleep@plt>
   1aafc:	b	1aa0c <__assert_fail@plt+0x86c0>
   1ab00:	ldr	r4, [r0]
   1ab04:	rsb	r4, r4, #0
   1ab08:	b	1aa6c <__assert_fail@plt+0x8720>
   1ab0c:	ldr	sl, [r8]
   1ab10:	b	1aa60 <__assert_fail@plt+0x8714>
   1ab14:	ldr	sl, [r8]
   1ab18:	mov	r4, r5
   1ab1c:	b	1aa60 <__assert_fail@plt+0x8714>
   1ab20:	bl	11e84 <__stack_chk_fail@plt>
   1ab24:	andeq	r5, r1, r8, lsr #8
   1ab28:	andeq	r0, r0, r0, lsr r2
   1ab2c:	andeq	r5, r1, r0, ror r7
   1ab30:	andeq	r0, r0, r4, lsr r2
   1ab34:	andeq	r4, r0, ip, asr #13
   1ab38:	andeq	r4, r0, r8, lsr #13
   1ab3c:	andeq	r4, r0, r8, lsr #13
   1ab40:	andeq	r4, r0, ip, lsl #15
   1ab44:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1ab48:	push	{r4, r5, r6, lr}
   1ab4c:	mov	r5, r1
   1ab50:	mov	r6, r2
   1ab54:	mov	r1, r3
   1ab58:	ldr	r2, [sp, #16]
   1ab5c:	mov	r4, r0
   1ab60:	bl	19518 <__assert_fail@plt+0x71cc>
   1ab64:	subs	r3, r0, #0
   1ab68:	beq	1ab80 <__assert_fail@plt+0x8834>
   1ab6c:	mov	r2, r6
   1ab70:	mov	r1, r5
   1ab74:	mov	r0, r4
   1ab78:	pop	{r4, r5, r6, lr}
   1ab7c:	b	1a984 <__assert_fail@plt+0x8638>
   1ab80:	mvn	r0, #21
   1ab84:	pop	{r4, r5, r6, pc}
   1ab88:	push	{r3}		; (str r3, [sp, #-4]!)
   1ab8c:	ldr	r3, [pc, #80]	; 1abe4 <__assert_fail@plt+0x8898>
   1ab90:	ldr	ip, [pc, #80]	; 1abe8 <__assert_fail@plt+0x889c>
   1ab94:	add	r3, pc, r3
   1ab98:	push	{r4, lr}
   1ab9c:	sub	sp, sp, #20
   1aba0:	ldr	r4, [r3, ip]
   1aba4:	add	lr, sp, #32
   1aba8:	str	lr, [sp]
   1abac:	ldr	ip, [r4]
   1abb0:	ldr	r3, [sp, #28]
   1abb4:	str	lr, [sp, #8]
   1abb8:	str	ip, [sp, #12]
   1abbc:	bl	1ab48 <__assert_fail@plt+0x87fc>
   1abc0:	ldr	r2, [sp, #12]
   1abc4:	ldr	r3, [r4]
   1abc8:	cmp	r2, r3
   1abcc:	bne	1abe0 <__assert_fail@plt+0x8894>
   1abd0:	add	sp, sp, #20
   1abd4:	pop	{r4, lr}
   1abd8:	add	sp, sp, #4
   1abdc:	bx	lr
   1abe0:	bl	11e84 <__stack_chk_fail@plt>
   1abe4:	andeq	r5, r1, r8, lsr #4
   1abe8:	andeq	r0, r0, r0, lsr r2
   1abec:	ldr	ip, [pc, #176]	; 1aca4 <__assert_fail@plt+0x8958>
   1abf0:	ldr	r3, [pc, #176]	; 1aca8 <__assert_fail@plt+0x895c>
   1abf4:	add	ip, pc, ip
   1abf8:	push	{r4, r5, r6, r7, r8, lr}
   1abfc:	sub	sp, sp, #8192	; 0x2000
   1ac00:	ldr	r7, [ip, r3]
   1ac04:	sub	sp, sp, #8
   1ac08:	mov	r6, r1
   1ac0c:	add	r5, sp, #8
   1ac10:	add	ip, sp, #8192	; 0x2000
   1ac14:	ldr	lr, [r7]
   1ac18:	mov	r1, #0
   1ac1c:	add	ip, ip, #4
   1ac20:	sub	r8, r5, #4
   1ac24:	mov	r3, r2
   1ac28:	str	r1, [r6]
   1ac2c:	ldr	r2, [pc, #120]	; 1acac <__assert_fail@plt+0x8960>
   1ac30:	mov	r1, r8
   1ac34:	str	lr, [ip]
   1ac38:	bl	1a984 <__assert_fail@plt+0x8638>
   1ac3c:	subs	r4, r0, #0
   1ac40:	blt	1ac78 <__assert_fail@plt+0x892c>
   1ac44:	beq	1ac58 <__assert_fail@plt+0x890c>
   1ac48:	sub	r3, r5, #5
   1ac4c:	ldrsb	r3, [r3, r4]
   1ac50:	cmp	r3, #10
   1ac54:	subeq	r4, r4, #1
   1ac58:	add	r5, r5, r4
   1ac5c:	mov	r3, #0
   1ac60:	mov	r0, r8
   1ac64:	strb	r3, [r5, #-4]
   1ac68:	bl	11e78 <strdup@plt>
   1ac6c:	cmp	r0, #0
   1ac70:	mvneq	r4, #11
   1ac74:	str	r0, [r6]
   1ac78:	add	r3, sp, #8192	; 0x2000
   1ac7c:	add	r3, r3, #4
   1ac80:	ldr	r2, [r3]
   1ac84:	ldr	r3, [r7]
   1ac88:	mov	r0, r4
   1ac8c:	cmp	r2, r3
   1ac90:	bne	1aca0 <__assert_fail@plt+0x8954>
   1ac94:	add	sp, sp, #8192	; 0x2000
   1ac98:	add	sp, sp, #8
   1ac9c:	pop	{r4, r5, r6, r7, r8, pc}
   1aca0:	bl	11e84 <__stack_chk_fail@plt>
   1aca4:	andeq	r5, r1, r8, asr #3
   1aca8:	andeq	r0, r0, r0, lsr r2
   1acac:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1acb0:	push	{r2, r3}
   1acb4:	ldr	r3, [pc, #116]	; 1ad30 <__assert_fail@plt+0x89e4>
   1acb8:	ldr	r2, [pc, #116]	; 1ad34 <__assert_fail@plt+0x89e8>
   1acbc:	add	r3, pc, r3
   1acc0:	push	{r4, r5, r6, lr}
   1acc4:	sub	sp, sp, #8
   1acc8:	ldr	r4, [r3, r2]
   1accc:	add	ip, sp, #28
   1acd0:	mov	r2, ip
   1acd4:	ldr	r3, [r4]
   1acd8:	mov	r5, r1
   1acdc:	ldr	r1, [sp, #24]
   1ace0:	str	ip, [sp]
   1ace4:	str	r3, [sp, #4]
   1ace8:	mov	r6, r0
   1acec:	bl	19518 <__assert_fail@plt+0x71cc>
   1acf0:	subs	r2, r0, #0
   1acf4:	beq	1ad24 <__assert_fail@plt+0x89d8>
   1acf8:	mov	r1, r5
   1acfc:	mov	r0, r6
   1ad00:	bl	1abec <__assert_fail@plt+0x88a0>
   1ad04:	ldr	r2, [sp, #4]
   1ad08:	ldr	r3, [r4]
   1ad0c:	cmp	r2, r3
   1ad10:	bne	1ad2c <__assert_fail@plt+0x89e0>
   1ad14:	add	sp, sp, #8
   1ad18:	pop	{r4, r5, r6, lr}
   1ad1c:	add	sp, sp, #8
   1ad20:	bx	lr
   1ad24:	mvn	r0, #21
   1ad28:	b	1ad04 <__assert_fail@plt+0x89b8>
   1ad2c:	bl	11e84 <__stack_chk_fail@plt>
   1ad30:	andeq	r5, r1, r0, lsl #2
   1ad34:	andeq	r0, r0, r0, lsr r2
   1ad38:	push	{r4, lr}
   1ad3c:	sub	r2, r2, #1
   1ad40:	mov	r4, r1
   1ad44:	bl	1a984 <__assert_fail@plt+0x8638>
   1ad48:	cmp	r0, #0
   1ad4c:	poplt	{r4, pc}
   1ad50:	beq	1ad6c <__assert_fail@plt+0x8a20>
   1ad54:	add	r3, r4, r0
   1ad58:	ldrsb	r2, [r3, #-1]
   1ad5c:	cmp	r2, #10
   1ad60:	subeq	r0, r0, #1
   1ad64:	movne	r4, r3
   1ad68:	addeq	r4, r4, r0
   1ad6c:	mov	r3, #0
   1ad70:	strb	r3, [r4]
   1ad74:	pop	{r4, pc}
   1ad78:	push	{r3}		; (str r3, [sp, #-4]!)
   1ad7c:	ldr	r3, [pc, #124]	; 1ae00 <__assert_fail@plt+0x8ab4>
   1ad80:	ldr	ip, [pc, #124]	; 1ae04 <__assert_fail@plt+0x8ab8>
   1ad84:	add	r3, pc, r3
   1ad88:	push	{r4, r5, r6, r7, lr}
   1ad8c:	sub	sp, sp, #8
   1ad90:	ldr	r4, [r3, ip]
   1ad94:	add	lr, sp, #32
   1ad98:	mov	r5, r1
   1ad9c:	ldr	ip, [r4]
   1ada0:	mov	r7, r2
   1ada4:	ldr	r1, [sp, #28]
   1ada8:	mov	r2, lr
   1adac:	str	ip, [sp, #4]
   1adb0:	str	lr, [sp]
   1adb4:	mov	r6, r0
   1adb8:	bl	19518 <__assert_fail@plt+0x71cc>
   1adbc:	subs	r3, r0, #0
   1adc0:	beq	1adf4 <__assert_fail@plt+0x8aa8>
   1adc4:	mov	r2, r7
   1adc8:	mov	r1, r5
   1adcc:	mov	r0, r6
   1add0:	bl	1ad38 <__assert_fail@plt+0x89ec>
   1add4:	ldr	r2, [sp, #4]
   1add8:	ldr	r3, [r4]
   1addc:	cmp	r2, r3
   1ade0:	bne	1adfc <__assert_fail@plt+0x8ab0>
   1ade4:	add	sp, sp, #8
   1ade8:	pop	{r4, r5, r6, r7, lr}
   1adec:	add	sp, sp, #4
   1adf0:	bx	lr
   1adf4:	mvn	r0, #21
   1adf8:	b	1add4 <__assert_fail@plt+0x8a88>
   1adfc:	bl	11e84 <__stack_chk_fail@plt>
   1ae00:	andeq	r5, r1, r8, lsr r0
   1ae04:	andeq	r0, r0, r0, lsr r2
   1ae08:	push	{r2, r3}
   1ae0c:	mov	r2, r1
   1ae10:	push	{r4, r5, r6, r7, r8, lr}
   1ae14:	mov	r7, r1
   1ae18:	ldr	r4, [pc, #236]	; 1af0c <__assert_fail@plt+0x8bc0>
   1ae1c:	ldr	r3, [pc, #236]	; 1af10 <__assert_fail@plt+0x8bc4>
   1ae20:	add	r4, pc, r4
   1ae24:	ldr	r1, [pc, #232]	; 1af14 <__assert_fail@plt+0x8bc8>
   1ae28:	ldr	r5, [r4, r3]
   1ae2c:	sub	sp, sp, #16
   1ae30:	add	r1, pc, r1
   1ae34:	ldr	r3, [r5]
   1ae38:	ldr	r8, [sp, #40]	; 0x28
   1ae3c:	str	r3, [sp, #12]
   1ae40:	bl	1a410 <__assert_fail@plt+0x80c4>
   1ae44:	subs	r6, r0, #0
   1ae48:	beq	1af00 <__assert_fail@plt+0x8bb4>
   1ae4c:	ldr	r3, [pc, #196]	; 1af18 <__assert_fail@plt+0x8bcc>
   1ae50:	add	r3, pc, r3
   1ae54:	ldr	r3, [r3]
   1ae58:	tst	r3, #4
   1ae5c:	bne	1aea8 <__assert_fail@plt+0x8b5c>
   1ae60:	add	r3, sp, #44	; 0x2c
   1ae64:	mov	r1, r8
   1ae68:	mov	r2, r3
   1ae6c:	mov	r0, r6
   1ae70:	str	r3, [sp, #8]
   1ae74:	bl	11ef0 <vfscanf@plt>
   1ae78:	mov	r4, r0
   1ae7c:	mov	r0, r6
   1ae80:	bl	121e4 <fclose@plt>
   1ae84:	ldr	r2, [sp, #12]
   1ae88:	ldr	r3, [r5]
   1ae8c:	mov	r0, r4
   1ae90:	cmp	r2, r3
   1ae94:	bne	1af08 <__assert_fail@plt+0x8bbc>
   1ae98:	add	sp, sp, #16
   1ae9c:	pop	{r4, r5, r6, r7, r8, lr}
   1aea0:	add	sp, sp, #8
   1aea4:	bx	lr
   1aea8:	ldr	r3, [pc, #108]	; 1af1c <__assert_fail@plt+0x8bd0>
   1aeac:	ldr	r3, [r4, r3]
   1aeb0:	ldr	r4, [r3]
   1aeb4:	bl	12040 <getpid@plt>
   1aeb8:	ldr	r2, [pc, #96]	; 1af20 <__assert_fail@plt+0x8bd4>
   1aebc:	ldr	r3, [pc, #96]	; 1af24 <__assert_fail@plt+0x8bd8>
   1aec0:	add	r2, pc, r2
   1aec4:	str	r2, [sp, #4]
   1aec8:	ldr	r2, [pc, #88]	; 1af28 <__assert_fail@plt+0x8bdc>
   1aecc:	add	r3, pc, r3
   1aed0:	str	r3, [sp]
   1aed4:	add	r2, pc, r2
   1aed8:	mov	r1, #1
   1aedc:	mov	r3, r0
   1aee0:	mov	r0, r4
   1aee4:	bl	121c0 <__fprintf_chk@plt>
   1aee8:	ldr	r0, [pc, #60]	; 1af2c <__assert_fail@plt+0x8be0>
   1aeec:	mov	r2, r7
   1aef0:	mov	r1, r8
   1aef4:	add	r0, pc, r0
   1aef8:	bl	193f0 <__assert_fail@plt+0x70a4>
   1aefc:	b	1ae60 <__assert_fail@plt+0x8b14>
   1af00:	mvn	r4, #21
   1af04:	b	1ae84 <__assert_fail@plt+0x8b38>
   1af08:	bl	11e84 <__stack_chk_fail@plt>
   1af0c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1af10:	andeq	r0, r0, r0, lsr r2
   1af14:	andeq	r4, r0, r8, lsl r4
   1af18:	strdeq	r5, [r1], -r8
   1af1c:	andeq	r0, r0, r4, lsr r2
   1af20:			; <UNDEFINED> instruction: 0x000042b0
   1af24:	andeq	r4, r0, ip, lsl #5
   1af28:	andeq	r4, r0, ip, lsl #5
   1af2c:	andeq	r4, r0, ip, ror r3
   1af30:	ldr	ip, [pc, #140]	; 1afc4 <__assert_fail@plt+0x8c78>
   1af34:	push	{r3}		; (str r3, [sp, #-4]!)
   1af38:	add	ip, pc, ip
   1af3c:	push	{r4, r5, r6, lr}
   1af40:	mov	r3, r2
   1af44:	ldr	lr, [pc, #124]	; 1afc8 <__assert_fail@plt+0x8c7c>
   1af48:	mov	r2, r1
   1af4c:	ldr	r1, [pc, #120]	; 1afcc <__assert_fail@plt+0x8c80>
   1af50:	ldr	r4, [ip, lr]
   1af54:	sub	sp, sp, #12
   1af58:	add	r1, pc, r1
   1af5c:	ldr	ip, [r4]
   1af60:	ldr	r5, [sp, #28]
   1af64:	str	ip, [sp, #4]
   1af68:	bl	1a4f4 <__assert_fail@plt+0x81a8>
   1af6c:	subs	r6, r0, #0
   1af70:	beq	1afb8 <__assert_fail@plt+0x8c6c>
   1af74:	add	r3, sp, #32
   1af78:	mov	r1, r5
   1af7c:	mov	r2, r3
   1af80:	str	r3, [sp]
   1af84:	bl	11ef0 <vfscanf@plt>
   1af88:	mov	r5, r0
   1af8c:	mov	r0, r6
   1af90:	bl	121e4 <fclose@plt>
   1af94:	ldr	r2, [sp, #4]
   1af98:	ldr	r3, [r4]
   1af9c:	mov	r0, r5
   1afa0:	cmp	r2, r3
   1afa4:	bne	1afc0 <__assert_fail@plt+0x8c74>
   1afa8:	add	sp, sp, #12
   1afac:	pop	{r4, r5, r6, lr}
   1afb0:	add	sp, sp, #4
   1afb4:	bx	lr
   1afb8:	mvn	r5, #21
   1afbc:	b	1af94 <__assert_fail@plt+0x8c48>
   1afc0:	bl	11e84 <__stack_chk_fail@plt>
   1afc4:	andeq	r4, r1, r4, lsl #29
   1afc8:	andeq	r0, r0, r0, lsr r2
   1afcc:	strdeq	r4, [r0], -r0
   1afd0:	ldr	r3, [pc, #124]	; 1b054 <__assert_fail@plt+0x8d08>
   1afd4:	ldr	ip, [pc, #124]	; 1b058 <__assert_fail@plt+0x8d0c>
   1afd8:	add	r3, pc, r3
   1afdc:	push	{r4, r5, r6, r7, lr}
   1afe0:	mov	r5, r1
   1afe4:	ldr	r4, [r3, ip]
   1afe8:	mov	r1, r2
   1afec:	ldr	r2, [pc, #104]	; 1b05c <__assert_fail@plt+0x8d10>
   1aff0:	sub	sp, sp, #20
   1aff4:	ldr	ip, [r4]
   1aff8:	mov	r6, #0
   1affc:	mov	r7, #0
   1b000:	add	r2, pc, r2
   1b004:	mov	r3, sp
   1b008:	strd	r6, [sp]
   1b00c:	str	ip, [sp, #12]
   1b010:	bl	1ae08 <__assert_fail@plt+0x8abc>
   1b014:	cmp	r0, #1
   1b018:	bne	1b048 <__assert_fail@plt+0x8cfc>
   1b01c:	cmp	r5, #0
   1b020:	moveq	r0, r5
   1b024:	ldrdne	r2, [sp]
   1b028:	movne	r0, #0
   1b02c:	strdne	r2, [r5]
   1b030:	ldr	r2, [sp, #12]
   1b034:	ldr	r3, [r4]
   1b038:	cmp	r2, r3
   1b03c:	bne	1b050 <__assert_fail@plt+0x8d04>
   1b040:	add	sp, sp, #20
   1b044:	pop	{r4, r5, r6, r7, pc}
   1b048:	mvn	r0, #0
   1b04c:	b	1b030 <__assert_fail@plt+0x8ce4>
   1b050:	bl	11e84 <__stack_chk_fail@plt>
   1b054:	andeq	r4, r1, r4, ror #27
   1b058:	andeq	r0, r0, r0, lsr r2
   1b05c:	andeq	r4, r0, r4, lsl #5
   1b060:	push	{r2, r3}
   1b064:	ldr	r3, [pc, #116]	; 1b0e0 <__assert_fail@plt+0x8d94>
   1b068:	ldr	r2, [pc, #116]	; 1b0e4 <__assert_fail@plt+0x8d98>
   1b06c:	add	r3, pc, r3
   1b070:	push	{r4, r5, r6, lr}
   1b074:	sub	sp, sp, #8
   1b078:	ldr	r4, [r3, r2]
   1b07c:	add	ip, sp, #28
   1b080:	mov	r2, ip
   1b084:	ldr	r3, [r4]
   1b088:	mov	r5, r1
   1b08c:	ldr	r1, [sp, #24]
   1b090:	str	ip, [sp]
   1b094:	str	r3, [sp, #4]
   1b098:	mov	r6, r0
   1b09c:	bl	19518 <__assert_fail@plt+0x71cc>
   1b0a0:	subs	r2, r0, #0
   1b0a4:	beq	1b0d4 <__assert_fail@plt+0x8d88>
   1b0a8:	mov	r1, r5
   1b0ac:	mov	r0, r6
   1b0b0:	bl	1afd0 <__assert_fail@plt+0x8c84>
   1b0b4:	ldr	r2, [sp, #4]
   1b0b8:	ldr	r3, [r4]
   1b0bc:	cmp	r2, r3
   1b0c0:	bne	1b0dc <__assert_fail@plt+0x8d90>
   1b0c4:	add	sp, sp, #8
   1b0c8:	pop	{r4, r5, r6, lr}
   1b0cc:	add	sp, sp, #8
   1b0d0:	bx	lr
   1b0d4:	mvn	r0, #21
   1b0d8:	b	1b0b4 <__assert_fail@plt+0x8d68>
   1b0dc:	bl	11e84 <__stack_chk_fail@plt>
   1b0e0:	andeq	r4, r1, r0, asr sp
   1b0e4:	andeq	r0, r0, r0, lsr r2
   1b0e8:	ldr	r3, [pc, #124]	; 1b16c <__assert_fail@plt+0x8e20>
   1b0ec:	ldr	ip, [pc, #124]	; 1b170 <__assert_fail@plt+0x8e24>
   1b0f0:	add	r3, pc, r3
   1b0f4:	push	{r4, r5, r6, r7, lr}
   1b0f8:	mov	r5, r1
   1b0fc:	ldr	r4, [r3, ip]
   1b100:	mov	r1, r2
   1b104:	ldr	r2, [pc, #104]	; 1b174 <__assert_fail@plt+0x8e28>
   1b108:	sub	sp, sp, #20
   1b10c:	ldr	ip, [r4]
   1b110:	mov	r6, #0
   1b114:	mov	r7, #0
   1b118:	add	r2, pc, r2
   1b11c:	mov	r3, sp
   1b120:	strd	r6, [sp]
   1b124:	str	ip, [sp, #12]
   1b128:	bl	1ae08 <__assert_fail@plt+0x8abc>
   1b12c:	cmp	r0, #1
   1b130:	bne	1b160 <__assert_fail@plt+0x8e14>
   1b134:	cmp	r5, #0
   1b138:	moveq	r0, r5
   1b13c:	ldrdne	r2, [sp]
   1b140:	movne	r0, #0
   1b144:	strdne	r2, [r5]
   1b148:	ldr	r2, [sp, #12]
   1b14c:	ldr	r3, [r4]
   1b150:	cmp	r2, r3
   1b154:	bne	1b168 <__assert_fail@plt+0x8e1c>
   1b158:	add	sp, sp, #20
   1b15c:	pop	{r4, r5, r6, r7, pc}
   1b160:	mvn	r0, #0
   1b164:	b	1b148 <__assert_fail@plt+0x8dfc>
   1b168:	bl	11e84 <__stack_chk_fail@plt>
   1b16c:	andeq	r4, r1, ip, asr #25
   1b170:	andeq	r0, r0, r0, lsr r2
   1b174:	andeq	r4, r0, r4, ror r1
   1b178:	push	{r2, r3}
   1b17c:	ldr	r3, [pc, #116]	; 1b1f8 <__assert_fail@plt+0x8eac>
   1b180:	ldr	r2, [pc, #116]	; 1b1fc <__assert_fail@plt+0x8eb0>
   1b184:	add	r3, pc, r3
   1b188:	push	{r4, r5, r6, lr}
   1b18c:	sub	sp, sp, #8
   1b190:	ldr	r4, [r3, r2]
   1b194:	add	ip, sp, #28
   1b198:	mov	r2, ip
   1b19c:	ldr	r3, [r4]
   1b1a0:	mov	r5, r1
   1b1a4:	ldr	r1, [sp, #24]
   1b1a8:	str	ip, [sp]
   1b1ac:	str	r3, [sp, #4]
   1b1b0:	mov	r6, r0
   1b1b4:	bl	19518 <__assert_fail@plt+0x71cc>
   1b1b8:	subs	r2, r0, #0
   1b1bc:	beq	1b1ec <__assert_fail@plt+0x8ea0>
   1b1c0:	mov	r1, r5
   1b1c4:	mov	r0, r6
   1b1c8:	bl	1b0e8 <__assert_fail@plt+0x8d9c>
   1b1cc:	ldr	r2, [sp, #4]
   1b1d0:	ldr	r3, [r4]
   1b1d4:	cmp	r2, r3
   1b1d8:	bne	1b1f4 <__assert_fail@plt+0x8ea8>
   1b1dc:	add	sp, sp, #8
   1b1e0:	pop	{r4, r5, r6, lr}
   1b1e4:	add	sp, sp, #8
   1b1e8:	bx	lr
   1b1ec:	mvn	r0, #21
   1b1f0:	b	1b1cc <__assert_fail@plt+0x8e80>
   1b1f4:	bl	11e84 <__stack_chk_fail@plt>
   1b1f8:	andeq	r4, r1, r8, lsr ip
   1b1fc:	andeq	r0, r0, r0, lsr r2
   1b200:	ldr	ip, [pc, #120]	; 1b280 <__assert_fail@plt+0x8f34>
   1b204:	ldr	r3, [pc, #120]	; 1b284 <__assert_fail@plt+0x8f38>
   1b208:	add	ip, pc, ip
   1b20c:	push	{r4, r5, r6, lr}
   1b210:	mov	r6, r1
   1b214:	ldr	r5, [ip, r3]
   1b218:	mov	r1, r2
   1b21c:	ldr	r2, [pc, #100]	; 1b288 <__assert_fail@plt+0x8f3c>
   1b220:	sub	sp, sp, #8
   1b224:	ldr	lr, [r5]
   1b228:	mov	r4, #0
   1b22c:	mov	r3, sp
   1b230:	add	r2, pc, r2
   1b234:	str	lr, [sp, #4]
   1b238:	str	r4, [sp]
   1b23c:	bl	1ae08 <__assert_fail@plt+0x8abc>
   1b240:	cmp	r0, #1
   1b244:	bne	1b274 <__assert_fail@plt+0x8f28>
   1b248:	cmp	r6, r4
   1b24c:	moveq	r0, r6
   1b250:	ldrne	r3, [sp]
   1b254:	movne	r0, r4
   1b258:	strne	r3, [r6]
   1b25c:	ldr	r2, [sp, #4]
   1b260:	ldr	r3, [r5]
   1b264:	cmp	r2, r3
   1b268:	bne	1b27c <__assert_fail@plt+0x8f30>
   1b26c:	add	sp, sp, #8
   1b270:	pop	{r4, r5, r6, pc}
   1b274:	mvn	r0, #0
   1b278:	b	1b25c <__assert_fail@plt+0x8f10>
   1b27c:	bl	11e84 <__stack_chk_fail@plt>
   1b280:			; <UNDEFINED> instruction: 0x00014bb4
   1b284:	andeq	r0, r0, r0, lsr r2
   1b288:	andeq	r3, r0, ip, asr #6
   1b28c:	push	{r2, r3}
   1b290:	ldr	r3, [pc, #116]	; 1b30c <__assert_fail@plt+0x8fc0>
   1b294:	ldr	r2, [pc, #116]	; 1b310 <__assert_fail@plt+0x8fc4>
   1b298:	add	r3, pc, r3
   1b29c:	push	{r4, r5, r6, lr}
   1b2a0:	sub	sp, sp, #8
   1b2a4:	ldr	r4, [r3, r2]
   1b2a8:	add	ip, sp, #28
   1b2ac:	mov	r2, ip
   1b2b0:	ldr	r3, [r4]
   1b2b4:	mov	r5, r1
   1b2b8:	ldr	r1, [sp, #24]
   1b2bc:	str	ip, [sp]
   1b2c0:	str	r3, [sp, #4]
   1b2c4:	mov	r6, r0
   1b2c8:	bl	19518 <__assert_fail@plt+0x71cc>
   1b2cc:	subs	r2, r0, #0
   1b2d0:	beq	1b300 <__assert_fail@plt+0x8fb4>
   1b2d4:	mov	r1, r5
   1b2d8:	mov	r0, r6
   1b2dc:	bl	1b200 <__assert_fail@plt+0x8eb4>
   1b2e0:	ldr	r2, [sp, #4]
   1b2e4:	ldr	r3, [r4]
   1b2e8:	cmp	r2, r3
   1b2ec:	bne	1b308 <__assert_fail@plt+0x8fbc>
   1b2f0:	add	sp, sp, #8
   1b2f4:	pop	{r4, r5, r6, lr}
   1b2f8:	add	sp, sp, #8
   1b2fc:	bx	lr
   1b300:	mvn	r0, #21
   1b304:	b	1b2e0 <__assert_fail@plt+0x8f94>
   1b308:	bl	11e84 <__stack_chk_fail@plt>
   1b30c:	andeq	r4, r1, r4, lsr #22
   1b310:	andeq	r0, r0, r0, lsr r2
   1b314:	ldr	ip, [pc, #112]	; 1b38c <__assert_fail@plt+0x9040>
   1b318:	ldr	r3, [pc, #112]	; 1b390 <__assert_fail@plt+0x9044>
   1b31c:	add	ip, pc, ip
   1b320:	push	{r4, r5, lr}
   1b324:	mov	r5, r1
   1b328:	ldr	r4, [ip, r3]
   1b32c:	mov	r1, r2
   1b330:	ldr	r2, [pc, #92]	; 1b394 <__assert_fail@plt+0x9048>
   1b334:	sub	sp, sp, #12
   1b338:	ldr	lr, [r4]
   1b33c:	mov	r3, sp
   1b340:	add	r2, pc, r2
   1b344:	str	lr, [sp, #4]
   1b348:	bl	1ae08 <__assert_fail@plt+0x8abc>
   1b34c:	cmp	r0, #1
   1b350:	bne	1b380 <__assert_fail@plt+0x9034>
   1b354:	cmp	r5, #0
   1b358:	moveq	r0, r5
   1b35c:	ldrne	r3, [sp]
   1b360:	movne	r0, #0
   1b364:	strne	r3, [r5]
   1b368:	ldr	r2, [sp, #4]
   1b36c:	ldr	r3, [r4]
   1b370:	cmp	r2, r3
   1b374:	bne	1b388 <__assert_fail@plt+0x903c>
   1b378:	add	sp, sp, #12
   1b37c:	pop	{r4, r5, pc}
   1b380:	mvn	r0, #0
   1b384:	b	1b368 <__assert_fail@plt+0x901c>
   1b388:	bl	11e84 <__stack_chk_fail@plt>
   1b38c:	andeq	r4, r1, r0, lsr #21
   1b390:	andeq	r0, r0, r0, lsr r2
   1b394:	andeq	r3, r0, r0, asr #4
   1b398:	push	{r2, r3}
   1b39c:	ldr	r3, [pc, #116]	; 1b418 <__assert_fail@plt+0x90cc>
   1b3a0:	ldr	r2, [pc, #116]	; 1b41c <__assert_fail@plt+0x90d0>
   1b3a4:	add	r3, pc, r3
   1b3a8:	push	{r4, r5, r6, lr}
   1b3ac:	sub	sp, sp, #8
   1b3b0:	ldr	r4, [r3, r2]
   1b3b4:	add	ip, sp, #28
   1b3b8:	mov	r2, ip
   1b3bc:	ldr	r3, [r4]
   1b3c0:	mov	r5, r1
   1b3c4:	ldr	r1, [sp, #24]
   1b3c8:	str	ip, [sp]
   1b3cc:	str	r3, [sp, #4]
   1b3d0:	mov	r6, r0
   1b3d4:	bl	19518 <__assert_fail@plt+0x71cc>
   1b3d8:	subs	r2, r0, #0
   1b3dc:	beq	1b40c <__assert_fail@plt+0x90c0>
   1b3e0:	mov	r1, r5
   1b3e4:	mov	r0, r6
   1b3e8:	bl	1b314 <__assert_fail@plt+0x8fc8>
   1b3ec:	ldr	r2, [sp, #4]
   1b3f0:	ldr	r3, [r4]
   1b3f4:	cmp	r2, r3
   1b3f8:	bne	1b414 <__assert_fail@plt+0x90c8>
   1b3fc:	add	sp, sp, #8
   1b400:	pop	{r4, r5, r6, lr}
   1b404:	add	sp, sp, #8
   1b408:	bx	lr
   1b40c:	mvn	r0, #21
   1b410:	b	1b3ec <__assert_fail@plt+0x90a0>
   1b414:	bl	11e84 <__stack_chk_fail@plt>
   1b418:	andeq	r4, r1, r8, lsl sl
   1b41c:	andeq	r0, r0, r0, lsr r2
   1b420:	ldr	ip, [pc, #168]	; 1b4d0 <__assert_fail@plt+0x9184>
   1b424:	ldr	r3, [pc, #168]	; 1b4d4 <__assert_fail@plt+0x9188>
   1b428:	add	ip, pc, ip
   1b42c:	push	{r4, r5, lr}
   1b430:	sub	sp, sp, #28
   1b434:	ldr	r5, [ip, r3]
   1b438:	mov	r4, r1
   1b43c:	add	r3, sp, #16
   1b440:	mov	r1, r2
   1b444:	ldr	r2, [pc, #140]	; 1b4d8 <__assert_fail@plt+0x918c>
   1b448:	str	r3, [sp]
   1b44c:	ldr	lr, [r5]
   1b450:	add	r3, sp, #12
   1b454:	add	r2, pc, r2
   1b458:	str	lr, [sp, #20]
   1b45c:	bl	1ae08 <__assert_fail@plt+0x8abc>
   1b460:	cmp	r0, #2
   1b464:	bne	1b4c4 <__assert_fail@plt+0x9178>
   1b468:	cmp	r4, #0
   1b46c:	moveq	r0, r4
   1b470:	beq	1b4ac <__assert_fail@plt+0x9160>
   1b474:	ldr	r0, [sp, #16]
   1b478:	ldr	r3, [sp, #12]
   1b47c:	ldr	ip, [pc, #88]	; 1b4dc <__assert_fail@plt+0x9190>
   1b480:	ldr	r2, [pc, #88]	; 1b4e0 <__assert_fail@plt+0x9194>
   1b484:	uxtb	r1, r0
   1b488:	and	ip, ip, r3, lsl #8
   1b48c:	bic	r3, r3, #4080	; 0xff0
   1b490:	and	r2, r2, r0, lsl #12
   1b494:	orr	r1, r1, ip
   1b498:	bic	r3, r3, #15
   1b49c:	orr	r3, r3, r0, lsr #20
   1b4a0:	orr	r2, r2, r1
   1b4a4:	mov	r0, #0
   1b4a8:	strd	r2, [r4]
   1b4ac:	ldr	r2, [sp, #20]
   1b4b0:	ldr	r3, [r5]
   1b4b4:	cmp	r2, r3
   1b4b8:	bne	1b4cc <__assert_fail@plt+0x9180>
   1b4bc:	add	sp, sp, #28
   1b4c0:	pop	{r4, r5, pc}
   1b4c4:	mvn	r0, #0
   1b4c8:	b	1b4ac <__assert_fail@plt+0x9160>
   1b4cc:	bl	11e84 <__stack_chk_fail@plt>
   1b4d0:	muleq	r1, r4, r9
   1b4d4:	andeq	r0, r0, r0, lsr r2
   1b4d8:	andeq	r3, r0, r0, asr #28
   1b4dc:	andeq	pc, pc, r0, lsl #30
   1b4e0:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1b4e4:	push	{r2, r3}
   1b4e8:	ldr	r3, [pc, #116]	; 1b564 <__assert_fail@plt+0x9218>
   1b4ec:	ldr	r2, [pc, #116]	; 1b568 <__assert_fail@plt+0x921c>
   1b4f0:	add	r3, pc, r3
   1b4f4:	push	{r4, r5, r6, lr}
   1b4f8:	sub	sp, sp, #8
   1b4fc:	ldr	r4, [r3, r2]
   1b500:	add	ip, sp, #28
   1b504:	mov	r2, ip
   1b508:	ldr	r3, [r4]
   1b50c:	mov	r5, r1
   1b510:	ldr	r1, [sp, #24]
   1b514:	str	ip, [sp]
   1b518:	str	r3, [sp, #4]
   1b51c:	mov	r6, r0
   1b520:	bl	19518 <__assert_fail@plt+0x71cc>
   1b524:	subs	r2, r0, #0
   1b528:	beq	1b558 <__assert_fail@plt+0x920c>
   1b52c:	mov	r1, r5
   1b530:	mov	r0, r6
   1b534:	bl	1b420 <__assert_fail@plt+0x90d4>
   1b538:	ldr	r2, [sp, #4]
   1b53c:	ldr	r3, [r4]
   1b540:	cmp	r2, r3
   1b544:	bne	1b560 <__assert_fail@plt+0x9214>
   1b548:	add	sp, sp, #8
   1b54c:	pop	{r4, r5, r6, lr}
   1b550:	add	sp, sp, #8
   1b554:	bx	lr
   1b558:	mvn	r0, #21
   1b55c:	b	1b538 <__assert_fail@plt+0x91ec>
   1b560:	bl	11e84 <__stack_chk_fail@plt>
   1b564:	andeq	r4, r1, ip, asr #17
   1b568:	andeq	r0, r0, r0, lsr r2
   1b56c:	ldr	r3, [pc, #284]	; 1b690 <__assert_fail@plt+0x9344>
   1b570:	ldr	ip, [pc, #284]	; 1b694 <__assert_fail@plt+0x9348>
   1b574:	add	r3, pc, r3
   1b578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b57c:	sub	sp, sp, #20
   1b580:	ldr	r8, [r3, ip]
   1b584:	mov	r6, r1
   1b588:	ldr	r1, [pc, #264]	; 1b698 <__assert_fail@plt+0x934c>
   1b58c:	ldr	r3, [r8]
   1b590:	str	r3, [sp, #12]
   1b594:	bl	1a0f0 <__assert_fail@plt+0x7da4>
   1b598:	mov	r7, r0
   1b59c:	bl	120d0 <__errno_location@plt>
   1b5a0:	cmp	r7, #0
   1b5a4:	mov	r5, r0
   1b5a8:	blt	1b678 <__assert_fail@plt+0x932c>
   1b5ac:	mov	r0, r6
   1b5b0:	bl	1207c <strlen@plt>
   1b5b4:	subs	r4, r0, #0
   1b5b8:	beq	1b630 <__assert_fail@plt+0x92e4>
   1b5bc:	mov	r9, #0
   1b5c0:	add	sl, sp, #4
   1b5c4:	str	r9, [r5]
   1b5c8:	mov	r2, r4
   1b5cc:	mov	r1, r6
   1b5d0:	mov	r0, r7
   1b5d4:	bl	12190 <write@plt>
   1b5d8:	cmp	r0, #0
   1b5dc:	ble	1b65c <__assert_fail@plt+0x9310>
   1b5e0:	subs	r4, r4, r0
   1b5e4:	ldr	fp, [r5]
   1b5e8:	beq	1b614 <__assert_fail@plt+0x92c8>
   1b5ec:	cmp	fp, #11
   1b5f0:	add	r6, r6, r0
   1b5f4:	bne	1b5c4 <__assert_fail@plt+0x9278>
   1b5f8:	ldr	r3, [pc, #156]	; 1b69c <__assert_fail@plt+0x9350>
   1b5fc:	mov	r1, #0
   1b600:	mov	r0, sl
   1b604:	str	r9, [sp, #4]
   1b608:	str	r3, [sp, #8]
   1b60c:	bl	11ddc <nanosleep@plt>
   1b610:	b	1b5c4 <__assert_fail@plt+0x9278>
   1b614:	cmp	fp, #11
   1b618:	bne	1b634 <__assert_fail@plt+0x92e8>
   1b61c:	ldr	r3, [pc, #120]	; 1b69c <__assert_fail@plt+0x9350>
   1b620:	mov	r1, r4
   1b624:	add	r0, sp, #4
   1b628:	stmib	sp, {r1, r3}
   1b62c:	bl	11ddc <nanosleep@plt>
   1b630:	ldr	fp, [r5]
   1b634:	mov	r0, r7
   1b638:	bl	12304 <close@plt>
   1b63c:	str	fp, [r5]
   1b640:	ldr	r2, [sp, #12]
   1b644:	ldr	r3, [r8]
   1b648:	mov	r0, r4
   1b64c:	cmp	r2, r3
   1b650:	bne	1b68c <__assert_fail@plt+0x9340>
   1b654:	add	sp, sp, #20
   1b658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b65c:	ldr	fp, [r5]
   1b660:	cmp	fp, #4
   1b664:	cmpne	fp, #11
   1b668:	bne	1b684 <__assert_fail@plt+0x9338>
   1b66c:	cmp	fp, #11
   1b670:	bne	1b5c4 <__assert_fail@plt+0x9278>
   1b674:	b	1b5f8 <__assert_fail@plt+0x92ac>
   1b678:	ldr	r4, [r0]
   1b67c:	rsb	r4, r4, #0
   1b680:	b	1b640 <__assert_fail@plt+0x92f4>
   1b684:	mvn	r4, #0
   1b688:	b	1b634 <__assert_fail@plt+0x92e8>
   1b68c:	bl	11e84 <__stack_chk_fail@plt>
   1b690:	andeq	r4, r1, r8, asr #16
   1b694:	andeq	r0, r0, r0, lsr r2
   1b698:	andeq	r0, r8, r1
   1b69c:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1b6a0:	push	{r2, r3}
   1b6a4:	ldr	r3, [pc, #116]	; 1b720 <__assert_fail@plt+0x93d4>
   1b6a8:	ldr	r2, [pc, #116]	; 1b724 <__assert_fail@plt+0x93d8>
   1b6ac:	add	r3, pc, r3
   1b6b0:	push	{r4, r5, r6, lr}
   1b6b4:	sub	sp, sp, #8
   1b6b8:	ldr	r4, [r3, r2]
   1b6bc:	add	ip, sp, #28
   1b6c0:	mov	r2, ip
   1b6c4:	ldr	r3, [r4]
   1b6c8:	mov	r5, r1
   1b6cc:	ldr	r1, [sp, #24]
   1b6d0:	str	ip, [sp]
   1b6d4:	str	r3, [sp, #4]
   1b6d8:	mov	r6, r0
   1b6dc:	bl	19518 <__assert_fail@plt+0x71cc>
   1b6e0:	subs	r2, r0, #0
   1b6e4:	beq	1b714 <__assert_fail@plt+0x93c8>
   1b6e8:	mov	r1, r5
   1b6ec:	mov	r0, r6
   1b6f0:	bl	1b56c <__assert_fail@plt+0x9220>
   1b6f4:	ldr	r2, [sp, #4]
   1b6f8:	ldr	r3, [r4]
   1b6fc:	cmp	r2, r3
   1b700:	bne	1b71c <__assert_fail@plt+0x93d0>
   1b704:	add	sp, sp, #8
   1b708:	pop	{r4, r5, r6, lr}
   1b70c:	add	sp, sp, #8
   1b710:	bx	lr
   1b714:	mvn	r0, #21
   1b718:	b	1b6f4 <__assert_fail@plt+0x93a8>
   1b71c:	bl	11e84 <__stack_chk_fail@plt>
   1b720:	andeq	r4, r1, r0, lsl r7
   1b724:	andeq	r0, r0, r0, lsr r2
   1b728:	ldr	ip, [pc, #328]	; 1b878 <__assert_fail@plt+0x952c>
   1b72c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b730:	add	ip, pc, ip
   1b734:	ldr	lr, [pc, #320]	; 1b87c <__assert_fail@plt+0x9530>
   1b738:	sub	sp, sp, #60	; 0x3c
   1b73c:	mov	r9, r3
   1b740:	ldr	r7, [ip, lr]
   1b744:	mov	r3, ip
   1b748:	ldr	r1, [pc, #304]	; 1b880 <__assert_fail@plt+0x9534>
   1b74c:	ldr	r3, [r7]
   1b750:	mov	r8, r2
   1b754:	ldr	r2, [sp, #96]	; 0x60
   1b758:	str	r3, [sp, #52]	; 0x34
   1b75c:	bl	1a0f0 <__assert_fail@plt+0x7da4>
   1b760:	mov	r6, r0
   1b764:	bl	120d0 <__errno_location@plt>
   1b768:	cmp	r6, #0
   1b76c:	mov	r5, r0
   1b770:	blt	1b860 <__assert_fail@plt+0x9514>
   1b774:	ldr	r2, [pc, #264]	; 1b884 <__assert_fail@plt+0x9538>
   1b778:	mov	r3, #21
   1b77c:	add	r2, pc, r2
   1b780:	strd	r8, [sp, #8]
   1b784:	str	r2, [sp]
   1b788:	add	r0, sp, #28
   1b78c:	mov	r1, r3
   1b790:	mov	r2, #1
   1b794:	mov	r8, r0
   1b798:	bl	12328 <__snprintf_chk@plt>
   1b79c:	mov	r9, #0
   1b7a0:	add	sl, sp, #20
   1b7a4:	mov	r4, r0
   1b7a8:	str	r9, [r5]
   1b7ac:	mov	r2, r4
   1b7b0:	mov	r1, r8
   1b7b4:	mov	r0, r6
   1b7b8:	bl	12190 <write@plt>
   1b7bc:	cmp	r0, #0
   1b7c0:	ble	1b7f8 <__assert_fail@plt+0x94ac>
   1b7c4:	subs	r4, r4, r0
   1b7c8:	ldr	fp, [r5]
   1b7cc:	beq	1b814 <__assert_fail@plt+0x94c8>
   1b7d0:	cmp	fp, #11
   1b7d4:	add	r8, r8, r0
   1b7d8:	bne	1b7a8 <__assert_fail@plt+0x945c>
   1b7dc:	ldr	r3, [pc, #164]	; 1b888 <__assert_fail@plt+0x953c>
   1b7e0:	mov	r1, #0
   1b7e4:	mov	r0, sl
   1b7e8:	str	r9, [sp, #20]
   1b7ec:	str	r3, [sp, #24]
   1b7f0:	bl	11ddc <nanosleep@plt>
   1b7f4:	b	1b7a8 <__assert_fail@plt+0x945c>
   1b7f8:	ldr	fp, [r5]
   1b7fc:	cmp	fp, #4
   1b800:	cmpne	fp, #11
   1b804:	bne	1b86c <__assert_fail@plt+0x9520>
   1b808:	cmp	fp, #11
   1b80c:	bne	1b7a8 <__assert_fail@plt+0x945c>
   1b810:	b	1b7dc <__assert_fail@plt+0x9490>
   1b814:	cmp	fp, #11
   1b818:	bne	1b838 <__assert_fail@plt+0x94ec>
   1b81c:	ldr	r3, [pc, #100]	; 1b888 <__assert_fail@plt+0x953c>
   1b820:	mov	r1, r4
   1b824:	add	r0, sp, #20
   1b828:	str	r4, [sp, #20]
   1b82c:	str	r3, [sp, #24]
   1b830:	bl	11ddc <nanosleep@plt>
   1b834:	ldr	fp, [r5]
   1b838:	mov	r0, r6
   1b83c:	bl	12304 <close@plt>
   1b840:	str	fp, [r5]
   1b844:	ldr	r2, [sp, #52]	; 0x34
   1b848:	ldr	r3, [r7]
   1b84c:	mov	r0, r4
   1b850:	cmp	r2, r3
   1b854:	bne	1b874 <__assert_fail@plt+0x9528>
   1b858:	add	sp, sp, #60	; 0x3c
   1b85c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b860:	ldr	r4, [r0]
   1b864:	rsb	r4, r4, #0
   1b868:	b	1b844 <__assert_fail@plt+0x94f8>
   1b86c:	mvn	r4, #0
   1b870:	b	1b838 <__assert_fail@plt+0x94ec>
   1b874:	bl	11e84 <__stack_chk_fail@plt>
   1b878:	andeq	r4, r1, ip, lsl #13
   1b87c:	andeq	r0, r0, r0, lsr r2
   1b880:	andeq	r0, r8, r1
   1b884:	andeq	r3, r0, r8, lsl #22
   1b888:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1b88c:	ldr	ip, [pc, #328]	; 1b9dc <__assert_fail@plt+0x9690>
   1b890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b894:	add	ip, pc, ip
   1b898:	ldr	lr, [pc, #320]	; 1b9e0 <__assert_fail@plt+0x9694>
   1b89c:	sub	sp, sp, #76	; 0x4c
   1b8a0:	mov	r9, r3
   1b8a4:	ldr	r7, [ip, lr]
   1b8a8:	mov	r3, ip
   1b8ac:	ldr	r1, [pc, #304]	; 1b9e4 <__assert_fail@plt+0x9698>
   1b8b0:	ldr	r3, [r7]
   1b8b4:	mov	r8, r2
   1b8b8:	ldr	r2, [sp, #112]	; 0x70
   1b8bc:	str	r3, [sp, #68]	; 0x44
   1b8c0:	bl	1a0f0 <__assert_fail@plt+0x7da4>
   1b8c4:	mov	r6, r0
   1b8c8:	bl	120d0 <__errno_location@plt>
   1b8cc:	cmp	r6, #0
   1b8d0:	mov	r5, r0
   1b8d4:	blt	1b9c4 <__assert_fail@plt+0x9678>
   1b8d8:	ldr	r2, [pc, #264]	; 1b9e8 <__assert_fail@plt+0x969c>
   1b8dc:	mov	r3, #37	; 0x25
   1b8e0:	add	r2, pc, r2
   1b8e4:	strd	r8, [sp, #8]
   1b8e8:	str	r2, [sp]
   1b8ec:	add	r0, sp, #28
   1b8f0:	mov	r1, r3
   1b8f4:	mov	r2, #1
   1b8f8:	mov	r8, r0
   1b8fc:	bl	12328 <__snprintf_chk@plt>
   1b900:	mov	r9, #0
   1b904:	add	sl, sp, #20
   1b908:	mov	r4, r0
   1b90c:	str	r9, [r5]
   1b910:	mov	r2, r4
   1b914:	mov	r1, r8
   1b918:	mov	r0, r6
   1b91c:	bl	12190 <write@plt>
   1b920:	cmp	r0, #0
   1b924:	ble	1b95c <__assert_fail@plt+0x9610>
   1b928:	subs	r4, r4, r0
   1b92c:	ldr	fp, [r5]
   1b930:	beq	1b978 <__assert_fail@plt+0x962c>
   1b934:	cmp	fp, #11
   1b938:	add	r8, r8, r0
   1b93c:	bne	1b90c <__assert_fail@plt+0x95c0>
   1b940:	ldr	r3, [pc, #164]	; 1b9ec <__assert_fail@plt+0x96a0>
   1b944:	mov	r1, #0
   1b948:	mov	r0, sl
   1b94c:	str	r9, [sp, #20]
   1b950:	str	r3, [sp, #24]
   1b954:	bl	11ddc <nanosleep@plt>
   1b958:	b	1b90c <__assert_fail@plt+0x95c0>
   1b95c:	ldr	fp, [r5]
   1b960:	cmp	fp, #4
   1b964:	cmpne	fp, #11
   1b968:	bne	1b9d0 <__assert_fail@plt+0x9684>
   1b96c:	cmp	fp, #11
   1b970:	bne	1b90c <__assert_fail@plt+0x95c0>
   1b974:	b	1b940 <__assert_fail@plt+0x95f4>
   1b978:	cmp	fp, #11
   1b97c:	bne	1b99c <__assert_fail@plt+0x9650>
   1b980:	ldr	r3, [pc, #100]	; 1b9ec <__assert_fail@plt+0x96a0>
   1b984:	mov	r1, r4
   1b988:	add	r0, sp, #20
   1b98c:	str	r4, [sp, #20]
   1b990:	str	r3, [sp, #24]
   1b994:	bl	11ddc <nanosleep@plt>
   1b998:	ldr	fp, [r5]
   1b99c:	mov	r0, r6
   1b9a0:	bl	12304 <close@plt>
   1b9a4:	str	fp, [r5]
   1b9a8:	ldr	r2, [sp, #68]	; 0x44
   1b9ac:	ldr	r3, [r7]
   1b9b0:	mov	r0, r4
   1b9b4:	cmp	r2, r3
   1b9b8:	bne	1b9d8 <__assert_fail@plt+0x968c>
   1b9bc:	add	sp, sp, #76	; 0x4c
   1b9c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9c4:	ldr	r4, [r0]
   1b9c8:	rsb	r4, r4, #0
   1b9cc:	b	1b9a8 <__assert_fail@plt+0x965c>
   1b9d0:	mvn	r4, #0
   1b9d4:	b	1b99c <__assert_fail@plt+0x9650>
   1b9d8:	bl	11e84 <__stack_chk_fail@plt>
   1b9dc:	andeq	r4, r1, r8, lsr #10
   1b9e0:	andeq	r0, r0, r0, lsr r2
   1b9e4:	andeq	r0, r8, r1
   1b9e8:	andeq	r3, r0, ip, lsr #19
   1b9ec:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1b9f0:	ldr	r1, [pc, #124]	; 1ba74 <__assert_fail@plt+0x9728>
   1b9f4:	ldr	ip, [pc, #124]	; 1ba78 <__assert_fail@plt+0x972c>
   1b9f8:	add	r1, pc, r1
   1b9fc:	push	{r4, r5, r6, r7, lr}
   1ba00:	sub	sp, sp, #20
   1ba04:	ldr	r6, [r1, ip]
   1ba08:	add	lr, sp, #44	; 0x2c
   1ba0c:	mov	r5, r3
   1ba10:	mov	r3, r1
   1ba14:	ldr	r3, [r6]
   1ba18:	mov	r4, r2
   1ba1c:	ldr	r1, [sp, #40]	; 0x28
   1ba20:	mov	r2, lr
   1ba24:	str	lr, [sp, #8]
   1ba28:	str	r3, [sp, #12]
   1ba2c:	mov	r7, r0
   1ba30:	bl	19518 <__assert_fail@plt+0x71cc>
   1ba34:	cmp	r0, #0
   1ba38:	beq	1ba68 <__assert_fail@plt+0x971c>
   1ba3c:	str	r0, [sp]
   1ba40:	mov	r2, r4
   1ba44:	mov	r3, r5
   1ba48:	mov	r0, r7
   1ba4c:	bl	1b88c <__assert_fail@plt+0x9540>
   1ba50:	ldr	r2, [sp, #12]
   1ba54:	ldr	r3, [r6]
   1ba58:	cmp	r2, r3
   1ba5c:	bne	1ba70 <__assert_fail@plt+0x9724>
   1ba60:	add	sp, sp, #20
   1ba64:	pop	{r4, r5, r6, r7, pc}
   1ba68:	mvn	r0, #21
   1ba6c:	b	1ba50 <__assert_fail@plt+0x9704>
   1ba70:	bl	11e84 <__stack_chk_fail@plt>
   1ba74:	andeq	r4, r1, r4, asr #7
   1ba78:	andeq	r0, r0, r0, lsr r2
   1ba7c:	push	{r4, r5, r6, r7, r8, lr}
   1ba80:	bl	1a6d4 <__assert_fail@plt+0x8388>
   1ba84:	subs	r6, r0, #0
   1ba88:	moveq	r5, r6
   1ba8c:	beq	1baec <__assert_fail@plt+0x97a0>
   1ba90:	ldr	r8, [pc, #92]	; 1baf4 <__assert_fail@plt+0x97a8>
   1ba94:	ldr	r7, [pc, #92]	; 1baf8 <__assert_fail@plt+0x97ac>
   1ba98:	mov	r5, #0
   1ba9c:	add	r8, pc, r8
   1baa0:	add	r7, pc, r7
   1baa4:	mov	r0, r6
   1baa8:	bl	12280 <readdir64@plt>
   1baac:	mov	r1, r8
   1bab0:	cmp	r0, #0
   1bab4:	add	r4, r0, #19
   1bab8:	mov	r0, r4
   1babc:	beq	1bae4 <__assert_fail@plt+0x9798>
   1bac0:	bl	11d34 <strcmp@plt>
   1bac4:	mov	r1, r7
   1bac8:	cmp	r0, #0
   1bacc:	mov	r0, r4
   1bad0:	beq	1baa4 <__assert_fail@plt+0x9758>
   1bad4:	bl	11d34 <strcmp@plt>
   1bad8:	cmp	r0, #0
   1badc:	addne	r5, r5, #1
   1bae0:	b	1baa4 <__assert_fail@plt+0x9758>
   1bae4:	mov	r0, r6
   1bae8:	bl	12310 <closedir@plt>
   1baec:	mov	r0, r5
   1baf0:	pop	{r4, r5, r6, r7, r8, pc}
   1baf4:	andeq	r3, r0, ip, lsr r5
   1baf8:	strdeq	r3, [r0], -ip
   1bafc:	push	{r1, r2, r3}
   1bb00:	ldr	r3, [pc, #104]	; 1bb70 <__assert_fail@plt+0x9824>
   1bb04:	ldr	r1, [pc, #104]	; 1bb74 <__assert_fail@plt+0x9828>
   1bb08:	add	r3, pc, r3
   1bb0c:	push	{r4, r5, lr}
   1bb10:	sub	sp, sp, #8
   1bb14:	ldr	r4, [r3, r1]
   1bb18:	add	ip, sp, #24
   1bb1c:	ldr	r1, [sp, #20]
   1bb20:	ldr	r3, [r4]
   1bb24:	mov	r2, ip
   1bb28:	str	ip, [sp]
   1bb2c:	mov	r5, r0
   1bb30:	str	r3, [sp, #4]
   1bb34:	bl	19518 <__assert_fail@plt+0x71cc>
   1bb38:	subs	r1, r0, #0
   1bb3c:	moveq	r0, r1
   1bb40:	beq	1bb4c <__assert_fail@plt+0x9800>
   1bb44:	mov	r0, r5
   1bb48:	bl	1ba7c <__assert_fail@plt+0x9730>
   1bb4c:	ldr	r2, [sp, #4]
   1bb50:	ldr	r3, [r4]
   1bb54:	cmp	r2, r3
   1bb58:	bne	1bb6c <__assert_fail@plt+0x9820>
   1bb5c:	add	sp, sp, #8
   1bb60:	pop	{r4, r5, lr}
   1bb64:	add	sp, sp, #12
   1bb68:	bx	lr
   1bb6c:	bl	11e84 <__stack_chk_fail@plt>
   1bb70:			; <UNDEFINED> instruction: 0x000142b4
   1bb74:	andeq	r0, r0, r0, lsr r2
   1bb78:	ldr	r3, [pc, #184]	; 1bc38 <__assert_fail@plt+0x98ec>
   1bb7c:	push	{r4, r5, r6, lr}
   1bb80:	add	r3, pc, r3
   1bb84:	ldr	lr, [pc, #176]	; 1bc3c <__assert_fail@plt+0x98f0>
   1bb88:	sub	sp, sp, #4096	; 0x1000
   1bb8c:	sub	sp, sp, #24
   1bb90:	ldr	r5, [r3, lr]
   1bb94:	mov	r6, r2
   1bb98:	add	r2, sp, #4096	; 0x1000
   1bb9c:	add	r2, r2, #20
   1bba0:	ldr	r3, [r5]
   1bba4:	subs	ip, r1, #0
   1bba8:	str	r3, [r2]
   1bbac:	beq	1bc2c <__assert_fail@plt+0x98e0>
   1bbb0:	cmp	r0, #0
   1bbb4:	beq	1bc1c <__assert_fail@plt+0x98d0>
   1bbb8:	ldrsb	r3, [ip]
   1bbbc:	ldr	r2, [pc, #124]	; 1bc40 <__assert_fail@plt+0x98f4>
   1bbc0:	add	r4, sp, #20
   1bbc4:	cmp	r3, #47	; 0x2f
   1bbc8:	addeq	ip, ip, #1
   1bbcc:	add	r2, pc, r2
   1bbd0:	mov	r3, #4096	; 0x1000
   1bbd4:	stmib	sp, {r0, ip}
   1bbd8:	str	r2, [sp]
   1bbdc:	mov	r1, r3
   1bbe0:	mov	r0, r4
   1bbe4:	mov	r2, #1
   1bbe8:	bl	12328 <__snprintf_chk@plt>
   1bbec:	mov	r1, r6
   1bbf0:	mov	r0, r4
   1bbf4:	bl	122bc <fopen64@plt>
   1bbf8:	add	r3, sp, #4096	; 0x1000
   1bbfc:	add	r3, r3, #20
   1bc00:	ldr	r2, [r3]
   1bc04:	ldr	r3, [r5]
   1bc08:	cmp	r2, r3
   1bc0c:	bne	1bc34 <__assert_fail@plt+0x98e8>
   1bc10:	add	sp, sp, #4096	; 0x1000
   1bc14:	add	sp, sp, #24
   1bc18:	pop	{r4, r5, r6, pc}
   1bc1c:	mov	r1, r6
   1bc20:	mov	r0, ip
   1bc24:	bl	122bc <fopen64@plt>
   1bc28:	b	1bbf8 <__assert_fail@plt+0x98ac>
   1bc2c:	mov	r0, ip
   1bc30:	b	1bbf8 <__assert_fail@plt+0x98ac>
   1bc34:	bl	11e84 <__stack_chk_fail@plt>
   1bc38:	andeq	r4, r1, ip, lsr r2
   1bc3c:	andeq	r0, r0, r0, lsr r2
   1bc40:	andeq	r3, r0, r8, lsr r5
   1bc44:	push	{r3}		; (str r3, [sp, #-4]!)
   1bc48:	ldr	r3, [pc, #88]	; 1bca8 <__assert_fail@plt+0x995c>
   1bc4c:	ldr	ip, [pc, #88]	; 1bcac <__assert_fail@plt+0x9960>
   1bc50:	add	r3, pc, r3
   1bc54:	push	{r4, lr}
   1bc58:	sub	sp, sp, #20
   1bc5c:	ldr	r4, [r3, ip]
   1bc60:	ldr	lr, [sp, #28]
   1bc64:	add	ip, sp, #32
   1bc68:	str	lr, [sp]
   1bc6c:	ldr	r3, [r4]
   1bc70:	str	ip, [sp, #4]
   1bc74:	str	r3, [sp, #12]
   1bc78:	mov	r3, #0
   1bc7c:	str	ip, [sp, #8]
   1bc80:	bl	1a528 <__assert_fail@plt+0x81dc>
   1bc84:	ldr	r2, [sp, #12]
   1bc88:	ldr	r3, [r4]
   1bc8c:	cmp	r2, r3
   1bc90:	bne	1bca4 <__assert_fail@plt+0x9958>
   1bc94:	add	sp, sp, #20
   1bc98:	pop	{r4, lr}
   1bc9c:	add	sp, sp, #4
   1bca0:	bx	lr
   1bca4:	bl	11e84 <__stack_chk_fail@plt>
   1bca8:	andeq	r4, r1, ip, ror #2
   1bcac:	andeq	r0, r0, r0, lsr r2
   1bcb0:	push	{r3}		; (str r3, [sp, #-4]!)
   1bcb4:	ldr	r3, [pc, #88]	; 1bd14 <__assert_fail@plt+0x99c8>
   1bcb8:	ldr	ip, [pc, #88]	; 1bd18 <__assert_fail@plt+0x99cc>
   1bcbc:	add	r3, pc, r3
   1bcc0:	push	{r4, lr}
   1bcc4:	sub	sp, sp, #20
   1bcc8:	ldr	r4, [r3, ip]
   1bccc:	ldr	lr, [sp, #28]
   1bcd0:	add	ip, sp, #32
   1bcd4:	str	lr, [sp]
   1bcd8:	ldr	r3, [r4]
   1bcdc:	str	ip, [sp, #4]
   1bce0:	str	r3, [sp, #12]
   1bce4:	mov	r3, #1
   1bce8:	str	ip, [sp, #8]
   1bcec:	bl	1a528 <__assert_fail@plt+0x81dc>
   1bcf0:	ldr	r2, [sp, #12]
   1bcf4:	ldr	r3, [r4]
   1bcf8:	cmp	r2, r3
   1bcfc:	bne	1bd10 <__assert_fail@plt+0x99c4>
   1bd00:	add	sp, sp, #20
   1bd04:	pop	{r4, lr}
   1bd08:	add	sp, sp, #4
   1bd0c:	bx	lr
   1bd10:	bl	11e84 <__stack_chk_fail@plt>
   1bd14:	andeq	r4, r1, r0, lsl #2
   1bd18:	andeq	r0, r0, r0, lsr r2
   1bd1c:	ldr	r2, [pc, #400]	; 1beb4 <__assert_fail@plt+0x9b68>
   1bd20:	ldr	r3, [pc, #400]	; 1beb8 <__assert_fail@plt+0x9b6c>
   1bd24:	add	r2, pc, r2
   1bd28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd2c:	sub	sp, sp, #8192	; 0x2000
   1bd30:	ldr	r3, [r2, r3]
   1bd34:	ldr	ip, [pc, #384]	; 1bebc <__assert_fail@plt+0x9b70>
   1bd38:	sub	sp, sp, #44	; 0x2c
   1bd3c:	mov	lr, r3
   1bd40:	add	ip, pc, ip
   1bd44:	str	r1, [sp, #8]
   1bd48:	ldr	lr, [lr]
   1bd4c:	str	ip, [sp]
   1bd50:	add	ip, sp, #8192	; 0x2000
   1bd54:	add	ip, ip, #36	; 0x24
   1bd58:	add	r7, sp, #40	; 0x28
   1bd5c:	sub	r6, r7, #4
   1bd60:	str	r3, [sp, #16]
   1bd64:	mov	r3, #8192	; 0x2000
   1bd68:	str	r0, [sp, #4]
   1bd6c:	mov	r1, r3
   1bd70:	str	lr, [ip]
   1bd74:	mov	r0, r6
   1bd78:	mov	r2, #1
   1bd7c:	bl	12328 <__snprintf_chk@plt>
   1bd80:	mov	r0, r6
   1bd84:	mov	r1, #0
   1bd88:	bl	11f8c <open64@plt>
   1bd8c:	subs	r8, r0, #0
   1bd90:	movlt	r7, #0
   1bd94:	blt	1be64 <__assert_fail@plt+0x9b18>
   1bd98:	mov	r1, #0
   1bd9c:	mov	sl, r1
   1bda0:	mov	r2, #8192	; 0x2000
   1bda4:	mov	r0, r6
   1bda8:	mov	r9, sl
   1bdac:	mov	fp, sl
   1bdb0:	mov	r4, #8192	; 0x2000
   1bdb4:	mov	r5, r6
   1bdb8:	bl	1213c <memset@plt>
   1bdbc:	sub	r3, r7, #12
   1bdc0:	str	r3, [sp, #20]
   1bdc4:	mov	r2, r4
   1bdc8:	mov	r1, r5
   1bdcc:	mov	r0, r8
   1bdd0:	bl	11d88 <read@plt>
   1bdd4:	cmp	r0, #0
   1bdd8:	ble	1bdf4 <__assert_fail@plt+0x9aa8>
   1bddc:	subs	r4, r4, r0
   1bde0:	add	r5, r5, r0
   1bde4:	add	sl, sl, r0
   1bde8:	beq	1be20 <__assert_fail@plt+0x9ad4>
   1bdec:	mov	r9, #0
   1bdf0:	b	1bdc4 <__assert_fail@plt+0x9a78>
   1bdf4:	beq	1be14 <__assert_fail@plt+0x9ac8>
   1bdf8:	bl	120d0 <__errno_location@plt>
   1bdfc:	ldr	r3, [r0]
   1be00:	cmp	r3, #4
   1be04:	cmpne	r3, #11
   1be08:	bne	1be14 <__assert_fail@plt+0x9ac8>
   1be0c:	cmp	r9, #4
   1be10:	ble	1be90 <__assert_fail@plt+0x9b44>
   1be14:	cmp	sl, #0
   1be18:	moveq	r7, sl
   1be1c:	beq	1be5c <__assert_fail@plt+0x9b10>
   1be20:	mov	r1, r6
   1be24:	mov	r2, #0
   1be28:	mov	ip, #32
   1be2c:	ldrsb	r3, [r1], #1
   1be30:	add	r2, r2, #1
   1be34:	cmp	r3, #0
   1be38:	strbeq	ip, [r1, #-1]
   1be3c:	cmp	r2, sl
   1be40:	bcc	1be2c <__assert_fail@plt+0x9ae0>
   1be44:	add	r7, r7, sl
   1be48:	mov	r3, #0
   1be4c:	mov	r0, r6
   1be50:	strb	r3, [r7, #-5]
   1be54:	bl	11e78 <strdup@plt>
   1be58:	mov	r7, r0
   1be5c:	mov	r0, r8
   1be60:	bl	12304 <close@plt>
   1be64:	add	r3, sp, #8192	; 0x2000
   1be68:	add	r3, r3, #36	; 0x24
   1be6c:	ldr	r2, [r3]
   1be70:	ldr	r3, [sp, #16]
   1be74:	mov	r0, r7
   1be78:	ldr	r3, [r3]
   1be7c:	cmp	r2, r3
   1be80:	bne	1beb0 <__assert_fail@plt+0x9b64>
   1be84:	add	sp, sp, #8192	; 0x2000
   1be88:	add	sp, sp, #44	; 0x2c
   1be8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be90:	ldr	r3, [pc, #40]	; 1bec0 <__assert_fail@plt+0x9b74>
   1be94:	mov	r1, #0
   1be98:	ldr	r0, [sp, #20]
   1be9c:	add	r9, r9, #1
   1bea0:	str	fp, [r7, #-12]
   1bea4:	str	r3, [r7, #-8]
   1bea8:	bl	11ddc <nanosleep@plt>
   1beac:	b	1bdc4 <__assert_fail@plt+0x9a78>
   1beb0:	bl	11e84 <__stack_chk_fail@plt>
   1beb4:	muleq	r1, r8, r0
   1beb8:	andeq	r0, r0, r0, lsr r2
   1bebc:	andeq	r3, r0, r0, ror #10
   1bec0:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1bec4:	ldr	r1, [pc, #164]	; 1bf70 <__assert_fail@plt+0x9c24>
   1bec8:	ldr	r2, [pc, #164]	; 1bf74 <__assert_fail@plt+0x9c28>
   1becc:	add	r1, pc, r1
   1bed0:	push	{r4, r5, r6, lr}
   1bed4:	sub	sp, sp, #4096	; 0x1000
   1bed8:	ldr	r5, [r1, r2]
   1bedc:	sub	sp, sp, #16
   1bee0:	add	lr, sp, #4096	; 0x1000
   1bee4:	str	r0, [sp]
   1bee8:	add	lr, lr, #12
   1beec:	ldr	ip, [r5]
   1bef0:	ldr	r3, [pc, #128]	; 1bf78 <__assert_fail@plt+0x9c2c>
   1bef4:	add	r6, sp, #12
   1bef8:	add	r3, pc, r3
   1befc:	mov	r2, #4096	; 0x1000
   1bf00:	str	ip, [lr]
   1bf04:	mov	r0, r6
   1bf08:	mov	r1, #1
   1bf0c:	bl	120f4 <__sprintf_chk@plt>
   1bf10:	mov	r0, #4
   1bf14:	bl	11fb0 <malloc@plt>
   1bf18:	subs	r4, r0, #0
   1bf1c:	beq	1bf5c <__assert_fail@plt+0x9c10>
   1bf20:	mov	r0, r6
   1bf24:	bl	11f80 <opendir@plt>
   1bf28:	cmp	r0, #0
   1bf2c:	str	r0, [r4]
   1bf30:	beq	1bf5c <__assert_fail@plt+0x9c10>
   1bf34:	add	r3, sp, #4096	; 0x1000
   1bf38:	add	r3, r3, #12
   1bf3c:	ldr	r2, [r3]
   1bf40:	ldr	r3, [r5]
   1bf44:	mov	r0, r4
   1bf48:	cmp	r2, r3
   1bf4c:	bne	1bf6c <__assert_fail@plt+0x9c20>
   1bf50:	add	sp, sp, #4096	; 0x1000
   1bf54:	add	sp, sp, #16
   1bf58:	pop	{r4, r5, r6, pc}
   1bf5c:	mov	r0, r4
   1bf60:	bl	11dc4 <free@plt>
   1bf64:	mov	r4, #0
   1bf68:	b	1bf34 <__assert_fail@plt+0x9be8>
   1bf6c:	bl	11e84 <__stack_chk_fail@plt>
   1bf70:	strdeq	r3, [r1], -r0
   1bf74:	andeq	r0, r0, r0, lsr r2
   1bf78:			; <UNDEFINED> instruction: 0x000033b4
   1bf7c:	push	{r4, lr}
   1bf80:	subs	r4, r0, #0
   1bf84:	beq	1bf98 <__assert_fail@plt+0x9c4c>
   1bf88:	ldr	r0, [r4]
   1bf8c:	cmp	r0, #0
   1bf90:	beq	1bf98 <__assert_fail@plt+0x9c4c>
   1bf94:	bl	12310 <closedir@plt>
   1bf98:	mov	r0, r4
   1bf9c:	pop	{r4, lr}
   1bfa0:	b	11dc4 <free@plt>
   1bfa4:	ldr	r3, [pc, #280]	; 1c0c4 <__assert_fail@plt+0x9d78>
   1bfa8:	ldr	r2, [pc, #280]	; 1c0c8 <__assert_fail@plt+0x9d7c>
   1bfac:	add	r3, pc, r3
   1bfb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bfb4:	cmp	r0, #0
   1bfb8:	ldr	r9, [r3, r2]
   1bfbc:	sub	sp, sp, #8
   1bfc0:	clz	sl, r1
   1bfc4:	ldr	r2, [r9]
   1bfc8:	lsr	sl, sl, #5
   1bfcc:	moveq	sl, #1
   1bfd0:	cmp	sl, #0
   1bfd4:	str	r2, [sp, #4]
   1bfd8:	bne	1c0b8 <__assert_fail@plt+0x9d6c>
   1bfdc:	str	sl, [r1]
   1bfe0:	mov	r6, r0
   1bfe4:	mov	r5, r1
   1bfe8:	bl	120d0 <__errno_location@plt>
   1bfec:	mov	r8, sl
   1bff0:	mov	r7, sp
   1bff4:	mov	r4, r0
   1bff8:	str	sl, [r0]
   1bffc:	b	1c00c <__assert_fail@plt+0x9cc0>
   1c000:	ldr	r0, [r5]
   1c004:	cmp	r0, #0
   1c008:	bne	1c0b0 <__assert_fail@plt+0x9d64>
   1c00c:	ldr	r0, [r6]
   1c010:	bl	12280 <readdir64@plt>
   1c014:	subs	sl, r0, #0
   1c018:	beq	1c09c <__assert_fail@plt+0x9d50>
   1c01c:	bl	12034 <__ctype_b_loc@plt>
   1c020:	ldrb	r3, [sl, #19]
   1c024:	lsl	r3, r3, #1
   1c028:	ldr	r2, [r0]
   1c02c:	ldrh	r3, [r2, r3]
   1c030:	tst	r3, #2048	; 0x800
   1c034:	beq	1c000 <__assert_fail@plt+0x9cb4>
   1c038:	add	sl, sl, #19
   1c03c:	str	r8, [r4]
   1c040:	mov	r0, sl
   1c044:	mov	r2, #10
   1c048:	mov	r1, r7
   1c04c:	bl	11d4c <strtol@plt>
   1c050:	str	r0, [r5]
   1c054:	ldr	r3, [r4]
   1c058:	cmp	r3, #0
   1c05c:	bne	1c080 <__assert_fail@plt+0x9d34>
   1c060:	ldr	r3, [sp]
   1c064:	cmp	sl, r3
   1c068:	beq	1c080 <__assert_fail@plt+0x9d34>
   1c06c:	cmp	r3, #0
   1c070:	beq	1c004 <__assert_fail@plt+0x9cb8>
   1c074:	ldrsb	r3, [r3]
   1c078:	cmp	r3, #0
   1c07c:	beq	1c004 <__assert_fail@plt+0x9cb8>
   1c080:	mvn	r0, #0
   1c084:	ldr	r2, [sp, #4]
   1c088:	ldr	r3, [r9]
   1c08c:	cmp	r2, r3
   1c090:	bne	1c0c0 <__assert_fail@plt+0x9d74>
   1c094:	add	sp, sp, #8
   1c098:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c09c:	ldr	r3, [r4]
   1c0a0:	cmp	r3, #0
   1c0a4:	moveq	r0, #1
   1c0a8:	beq	1c084 <__assert_fail@plt+0x9d38>
   1c0ac:	b	1c080 <__assert_fail@plt+0x9d34>
   1c0b0:	mov	r0, #0
   1c0b4:	b	1c084 <__assert_fail@plt+0x9d38>
   1c0b8:	mvn	r0, #21
   1c0bc:	b	1c084 <__assert_fail@plt+0x9d38>
   1c0c0:	bl	11e84 <__stack_chk_fail@plt>
   1c0c4:	andeq	r3, r1, r0, lsl lr
   1c0c8:	andeq	r0, r0, r0, lsr r2
   1c0cc:	ldr	r1, [pc, #4]	; 1c0d8 <__assert_fail@plt+0x9d8c>
   1c0d0:	add	r1, pc, r1
   1c0d4:	b	1bd1c <__assert_fail@plt+0x99d0>
   1c0d8:	andeq	r3, r0, ip, ror #3
   1c0dc:	ldr	r1, [pc, #4]	; 1c0e8 <__assert_fail@plt+0x9d9c>
   1c0e0:	add	r1, pc, r1
   1c0e4:	b	1bd1c <__assert_fail@plt+0x99d0>
   1c0e8:	andeq	r3, r0, r4, ror #3
   1c0ec:	push	{r4, lr}
   1c0f0:	mov	r1, #16
   1c0f4:	mov	r0, #1
   1c0f8:	bl	11cf8 <calloc@plt>
   1c0fc:	subs	r4, r0, #0
   1c100:	beq	1c124 <__assert_fail@plt+0x9dd8>
   1c104:	ldr	r0, [pc, #44]	; 1c138 <__assert_fail@plt+0x9dec>
   1c108:	add	r0, pc, r0
   1c10c:	bl	11f80 <opendir@plt>
   1c110:	cmp	r0, #0
   1c114:	str	r0, [r4]
   1c118:	beq	1c124 <__assert_fail@plt+0x9dd8>
   1c11c:	mov	r0, r4
   1c120:	pop	{r4, pc}
   1c124:	mov	r0, r4
   1c128:	mov	r4, #0
   1c12c:	bl	11dc4 <free@plt>
   1c130:	mov	r0, r4
   1c134:	pop	{r4, pc}
   1c138:	andeq	r3, r0, r4, asr #3
   1c13c:	push	{r4, lr}
   1c140:	subs	r4, r0, #0
   1c144:	beq	1c158 <__assert_fail@plt+0x9e0c>
   1c148:	ldr	r0, [r4]
   1c14c:	cmp	r0, #0
   1c150:	beq	1c158 <__assert_fail@plt+0x9e0c>
   1c154:	bl	12310 <closedir@plt>
   1c158:	mov	r0, r4
   1c15c:	pop	{r4, lr}
   1c160:	b	11dc4 <free@plt>
   1c164:	ldrb	r3, [r0, #12]
   1c168:	str	r1, [r0, #4]
   1c16c:	bic	r3, r3, #1
   1c170:	cmp	r1, #0
   1c174:	orrne	r3, r3, #1
   1c178:	strb	r3, [r0, #12]
   1c17c:	bx	lr
   1c180:	ldrb	r3, [r0, #12]
   1c184:	str	r1, [r0, #8]
   1c188:	orr	r3, r3, #2
   1c18c:	strb	r3, [r0, #12]
   1c190:	bx	lr
   1c194:	ldr	r2, [pc, #596]	; 1c3f0 <__assert_fail@plt+0xa0a4>
   1c198:	ldr	ip, [pc, #596]	; 1c3f4 <__assert_fail@plt+0xa0a8>
   1c19c:	add	r2, pc, r2
   1c1a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1a4:	sub	sp, sp, #8576	; 0x2180
   1c1a8:	ldr	ip, [r2, ip]
   1c1ac:	sub	sp, sp, #12
   1c1b0:	cmp	r0, #0
   1c1b4:	add	r2, sp, #8576	; 0x2180
   1c1b8:	clz	r3, r1
   1c1bc:	str	ip, [sp, #16]
   1c1c0:	lsr	r3, r3, #5
   1c1c4:	ldr	ip, [ip]
   1c1c8:	moveq	r3, #1
   1c1cc:	add	r2, r2, #4
   1c1d0:	cmp	r3, #0
   1c1d4:	str	ip, [r2]
   1c1d8:	bne	1c3e4 <__assert_fail@plt+0xa098>
   1c1dc:	str	r3, [r1]
   1c1e0:	ldr	r3, [pc, #528]	; 1c3f8 <__assert_fail@plt+0xa0ac>
   1c1e4:	mov	r5, r0
   1c1e8:	add	r3, pc, r3
   1c1ec:	mov	sl, r1
   1c1f0:	str	r3, [sp, #12]
   1c1f4:	bl	120d0 <__errno_location@plt>
   1c1f8:	ldr	r9, [pc, #508]	; 1c3fc <__assert_fail@plt+0xa0b0>
   1c1fc:	ldr	fp, [pc, #508]	; 1c400 <__assert_fail@plt+0xa0b4>
   1c200:	add	r9, pc, r9
   1c204:	add	fp, pc, fp
   1c208:	mov	r8, r0
   1c20c:	mov	r6, #0
   1c210:	str	r6, [r8]
   1c214:	ldr	r0, [r5]
   1c218:	bl	12280 <readdir64@plt>
   1c21c:	subs	r4, r0, #0
   1c220:	beq	1c3cc <__assert_fail@plt+0xa080>
   1c224:	bl	12034 <__ctype_b_loc@plt>
   1c228:	ldrb	r3, [r4, #19]
   1c22c:	lsl	r3, r3, #1
   1c230:	ldr	r2, [r0]
   1c234:	ldrh	r3, [r2, r3]
   1c238:	tst	r3, #2048	; 0x800
   1c23c:	beq	1c20c <__assert_fail@plt+0x9ec0>
   1c240:	ldrb	r3, [r5, #12]
   1c244:	add	r4, r4, #19
   1c248:	tst	r3, #2
   1c24c:	addeq	r7, sp, #392	; 0x188
   1c250:	bne	1c388 <__assert_fail@plt+0xa03c>
   1c254:	tst	r3, #1
   1c258:	beq	1c310 <__assert_fail@plt+0x9fc4>
   1c25c:	mov	r3, #8192	; 0x2000
   1c260:	sub	r6, r7, #4
   1c264:	mov	r1, r3
   1c268:	mov	r2, #1
   1c26c:	str	r4, [sp, #4]
   1c270:	str	r9, [sp]
   1c274:	mov	r0, r6
   1c278:	bl	12328 <__snprintf_chk@plt>
   1c27c:	ldr	r0, [r5]
   1c280:	bl	122a4 <dirfd@plt>
   1c284:	mov	r1, r6
   1c288:	mov	r2, #524288	; 0x80000
   1c28c:	bl	12094 <openat64@plt>
   1c290:	cmp	r0, #0
   1c294:	blt	1c20c <__assert_fail@plt+0x9ec0>
   1c298:	mov	r1, fp
   1c29c:	bl	11cec <fdopen@plt>
   1c2a0:	subs	r3, r0, #0
   1c2a4:	beq	1c20c <__assert_fail@plt+0x9ec0>
   1c2a8:	mov	r2, r3
   1c2ac:	mov	r1, #8192	; 0x2000
   1c2b0:	mov	r0, r6
   1c2b4:	str	r3, [sp, #20]
   1c2b8:	bl	11dd0 <fgets@plt>
   1c2bc:	ldr	r3, [sp, #20]
   1c2c0:	str	r0, [r7, #-368]	; 0xfffffe90
   1c2c4:	mov	r0, r3
   1c2c8:	bl	121e4 <fclose@plt>
   1c2cc:	ldr	r3, [r7, #-368]	; 0xfffffe90
   1c2d0:	cmp	r3, #0
   1c2d4:	beq	1c20c <__assert_fail@plt+0x9ec0>
   1c2d8:	add	r3, sp, #132	; 0x84
   1c2dc:	mov	r0, r6
   1c2e0:	mov	r2, r3
   1c2e4:	ldr	r1, [sp, #12]
   1c2e8:	str	r3, [sp, #20]
   1c2ec:	bl	1225c <sscanf@plt>
   1c2f0:	cmp	r0, #1
   1c2f4:	bne	1c20c <__assert_fail@plt+0x9ec0>
   1c2f8:	ldr	r3, [sp, #20]
   1c2fc:	ldr	r1, [r5, #4]
   1c300:	mov	r0, r3
   1c304:	bl	11d34 <strcmp@plt>
   1c308:	cmp	r0, #0
   1c30c:	bne	1c20c <__assert_fail@plt+0x9ec0>
   1c310:	mov	r3, #0
   1c314:	str	r3, [r8]
   1c318:	mov	r2, #10
   1c31c:	add	r1, sp, #24
   1c320:	mov	r0, r4
   1c324:	str	r3, [r7, #-368]	; 0xfffffe90
   1c328:	bl	11d4c <strtol@plt>
   1c32c:	str	r0, [sl]
   1c330:	ldr	r0, [r8]
   1c334:	cmp	r0, #0
   1c338:	rsbne	r0, r0, #0
   1c33c:	bne	1c360 <__assert_fail@plt+0xa014>
   1c340:	ldr	r3, [r7, #-368]	; 0xfffffe90
   1c344:	cmp	r3, r4
   1c348:	beq	1c3dc <__assert_fail@plt+0xa090>
   1c34c:	cmp	r3, #0
   1c350:	beq	1c360 <__assert_fail@plt+0xa014>
   1c354:	ldrsb	r3, [r3]
   1c358:	cmp	r3, #0
   1c35c:	bne	1c3dc <__assert_fail@plt+0xa090>
   1c360:	add	r3, sp, #8576	; 0x2180
   1c364:	add	r3, r3, #4
   1c368:	ldr	r2, [r3]
   1c36c:	ldr	r3, [sp, #16]
   1c370:	ldr	r3, [r3]
   1c374:	cmp	r2, r3
   1c378:	bne	1c3ec <__assert_fail@plt+0xa0a0>
   1c37c:	add	sp, sp, #8576	; 0x2180
   1c380:	add	sp, sp, #12
   1c384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c388:	ldr	r0, [r5]
   1c38c:	bl	122a4 <dirfd@plt>
   1c390:	str	r6, [sp]
   1c394:	add	r3, sp, #24
   1c398:	mov	r2, r4
   1c39c:	mov	r1, r0
   1c3a0:	mov	r0, #3
   1c3a4:	bl	11ee4 <__fxstatat64@plt>
   1c3a8:	cmp	r0, #0
   1c3ac:	bne	1c20c <__assert_fail@plt+0x9ec0>
   1c3b0:	add	r7, sp, #392	; 0x188
   1c3b4:	ldr	r2, [r5, #8]
   1c3b8:	ldr	r3, [r7, #-344]	; 0xfffffea8
   1c3bc:	cmp	r2, r3
   1c3c0:	bne	1c20c <__assert_fail@plt+0x9ec0>
   1c3c4:	ldrb	r3, [r5, #12]
   1c3c8:	b	1c254 <__assert_fail@plt+0x9f08>
   1c3cc:	ldr	r3, [r8]
   1c3d0:	cmp	r3, r6
   1c3d4:	moveq	r0, #1
   1c3d8:	beq	1c360 <__assert_fail@plt+0xa014>
   1c3dc:	mvn	r0, #0
   1c3e0:	b	1c360 <__assert_fail@plt+0xa014>
   1c3e4:	mvn	r0, #21
   1c3e8:	b	1c360 <__assert_fail@plt+0xa014>
   1c3ec:	bl	11e84 <__stack_chk_fail@plt>
   1c3f0:	andeq	r3, r1, r0, lsr #24
   1c3f4:	andeq	r0, r0, r0, lsr r2
   1c3f8:	strdeq	r3, [r0], -r4
   1c3fc:	ldrdeq	r3, [r0], -r4
   1c400:	andeq	r2, r0, ip, asr r6
   1c404:	ldr	r1, [pc]	; 1c40c <__assert_fail@plt+0xa0c0>
   1c408:	b	11f14 <mkostemp64@plt>
   1c40c:	andeq	r0, r8, r2, asr #1
   1c410:	ldr	ip, [pc, #208]	; 1c4e8 <__assert_fail@plt+0xa19c>
   1c414:	push	{r4, r5, r6, r7, lr}
   1c418:	add	ip, pc, ip
   1c41c:	ldr	lr, [pc, #200]	; 1c4ec <__assert_fail@plt+0xa1a0>
   1c420:	sub	sp, sp, #20
   1c424:	mov	r5, r2
   1c428:	ldr	r4, [ip, lr]
   1c42c:	subs	r3, r1, #0
   1c430:	mov	r6, r0
   1c434:	ldr	r2, [r4]
   1c438:	mov	r0, ip
   1c43c:	str	r2, [sp, #12]
   1c440:	beq	1c4b0 <__assert_fail@plt+0xa164>
   1c444:	ldr	r2, [pc, #164]	; 1c4f0 <__assert_fail@plt+0xa1a4>
   1c448:	str	r5, [sp]
   1c44c:	add	r2, pc, r2
   1c450:	mov	r1, #1
   1c454:	add	r0, sp, #8
   1c458:	bl	11f98 <__asprintf_chk@plt>
   1c45c:	cmp	r0, #0
   1c460:	blt	1c4dc <__assert_fail@plt+0xa190>
   1c464:	mov	r0, #63	; 0x3f
   1c468:	bl	122d4 <umask@plt>
   1c46c:	mov	r7, r0
   1c470:	ldr	r0, [sp, #8]
   1c474:	bl	1c404 <__assert_fail@plt+0xa0b8>
   1c478:	mov	r5, r0
   1c47c:	mov	r0, r7
   1c480:	bl	122d4 <umask@plt>
   1c484:	cmn	r5, #1
   1c488:	beq	1c4cc <__assert_fail@plt+0xa180>
   1c48c:	ldr	r3, [sp, #8]
   1c490:	str	r3, [r6]
   1c494:	ldr	r2, [sp, #12]
   1c498:	ldr	r3, [r4]
   1c49c:	mov	r0, r5
   1c4a0:	cmp	r2, r3
   1c4a4:	bne	1c4e4 <__assert_fail@plt+0xa198>
   1c4a8:	add	sp, sp, #20
   1c4ac:	pop	{r4, r5, r6, r7, pc}
   1c4b0:	ldr	r0, [pc, #60]	; 1c4f4 <__assert_fail@plt+0xa1a8>
   1c4b4:	add	r0, pc, r0
   1c4b8:	bl	11fa4 <getenv@plt>
   1c4bc:	subs	r3, r0, #0
   1c4c0:	ldreq	r3, [pc, #48]	; 1c4f8 <__assert_fail@plt+0xa1ac>
   1c4c4:	addeq	r3, pc, r3
   1c4c8:	b	1c444 <__assert_fail@plt+0xa0f8>
   1c4cc:	ldr	r0, [sp, #8]
   1c4d0:	bl	11dc4 <free@plt>
   1c4d4:	mov	r3, #0
   1c4d8:	b	1c490 <__assert_fail@plt+0xa144>
   1c4dc:	mvn	r5, #0
   1c4e0:	b	1c494 <__assert_fail@plt+0xa148>
   1c4e4:	bl	11e84 <__stack_chk_fail@plt>
   1c4e8:	andeq	r3, r1, r4, lsr #19
   1c4ec:	andeq	r0, r0, r0, lsr r2
   1c4f0:			; <UNDEFINED> instruction: 0x00002eb0
   1c4f4:	andeq	r2, r0, r0, asr #28
   1c4f8:	andeq	r2, r0, r8, lsr #28
   1c4fc:	push	{r4, r5, r6, lr}
   1c500:	mov	r2, r1
   1c504:	ldr	r1, [pc, #108]	; 1c578 <__assert_fail@plt+0xa22c>
   1c508:	mov	r5, r0
   1c50c:	bl	121f0 <fcntl64@plt>
   1c510:	subs	r4, r0, #0
   1c514:	blt	1c520 <__assert_fail@plt+0xa1d4>
   1c518:	mov	r0, r4
   1c51c:	pop	{r4, r5, r6, pc}
   1c520:	mov	r0, r5
   1c524:	bl	11ea8 <dup@plt>
   1c528:	subs	r4, r0, #0
   1c52c:	blt	1c518 <__assert_fail@plt+0xa1cc>
   1c530:	mov	r1, #1
   1c534:	bl	121f0 <fcntl64@plt>
   1c538:	subs	r2, r0, #0
   1c53c:	blt	1c558 <__assert_fail@plt+0xa20c>
   1c540:	orr	r2, r2, #1
   1c544:	mov	r1, #2
   1c548:	mov	r0, r4
   1c54c:	bl	121f0 <fcntl64@plt>
   1c550:	cmp	r0, #0
   1c554:	bge	1c518 <__assert_fail@plt+0xa1cc>
   1c558:	bl	120d0 <__errno_location@plt>
   1c55c:	mov	r5, r0
   1c560:	mov	r0, r4
   1c564:	ldr	r6, [r5]
   1c568:	mvn	r4, #0
   1c56c:	bl	12304 <close@plt>
   1c570:	str	r6, [r5]
   1c574:	b	1c518 <__assert_fail@plt+0xa1cc>
   1c578:	andeq	r0, r0, r6, lsl #8
   1c57c:	b	12004 <getdtablesize@plt>
   1c580:	subs	r3, r0, #0
   1c584:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c588:	beq	1c680 <__assert_fail@plt+0xa334>
   1c58c:	ldrsb	r3, [r3]
   1c590:	cmp	r3, #0
   1c594:	beq	1c680 <__assert_fail@plt+0xa334>
   1c598:	mov	r9, r1
   1c59c:	bl	11e78 <strdup@plt>
   1c5a0:	subs	r8, r0, #0
   1c5a4:	beq	1c688 <__assert_fail@plt+0xa33c>
   1c5a8:	ldrsb	r3, [r8]
   1c5ac:	cmp	r3, #47	; 0x2f
   1c5b0:	addeq	r4, r8, #1
   1c5b4:	ldrsbeq	r3, [r8, #1]
   1c5b8:	movne	r4, r8
   1c5bc:	cmp	r3, #0
   1c5c0:	beq	1c650 <__assert_fail@plt+0xa304>
   1c5c4:	mov	r6, #47	; 0x2f
   1c5c8:	mov	r7, #0
   1c5cc:	b	1c5fc <__assert_fail@plt+0xa2b0>
   1c5d0:	strb	r7, [r5]
   1c5d4:	ldrsb	r3, [r4]
   1c5d8:	cmp	r3, #0
   1c5dc:	bne	1c658 <__assert_fail@plt+0xa30c>
   1c5e0:	mov	r4, r5
   1c5e4:	strb	r6, [r4], #1
   1c5e8:	cmp	r4, #0
   1c5ec:	beq	1c650 <__assert_fail@plt+0xa304>
   1c5f0:	ldrsb	r3, [r5, #1]
   1c5f4:	cmp	r3, #0
   1c5f8:	beq	1c650 <__assert_fail@plt+0xa304>
   1c5fc:	mov	r1, #47	; 0x2f
   1c600:	mov	r0, r4
   1c604:	bl	12088 <strchr@plt>
   1c608:	subs	r5, r0, #0
   1c60c:	bne	1c5d0 <__assert_fail@plt+0xa284>
   1c610:	ldrsb	r3, [r4]
   1c614:	cmp	r3, #0
   1c618:	beq	1c650 <__assert_fail@plt+0xa304>
   1c61c:	mov	r1, r9
   1c620:	mov	r0, r8
   1c624:	bl	12118 <mkdir@plt>
   1c628:	subs	r4, r0, #0
   1c62c:	beq	1c650 <__assert_fail@plt+0xa304>
   1c630:	bl	120d0 <__errno_location@plt>
   1c634:	ldr	r3, [r0]
   1c638:	cmp	r3, #17
   1c63c:	beq	1c650 <__assert_fail@plt+0xa304>
   1c640:	mov	r0, r8
   1c644:	bl	11dc4 <free@plt>
   1c648:	mov	r0, r4
   1c64c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c650:	mov	r4, #0
   1c654:	b	1c640 <__assert_fail@plt+0xa2f4>
   1c658:	mov	r1, r9
   1c65c:	mov	r0, r8
   1c660:	bl	12118 <mkdir@plt>
   1c664:	subs	r4, r0, #0
   1c668:	beq	1c5e0 <__assert_fail@plt+0xa294>
   1c66c:	bl	120d0 <__errno_location@plt>
   1c670:	ldr	r3, [r0]
   1c674:	cmp	r3, #17
   1c678:	beq	1c5e0 <__assert_fail@plt+0xa294>
   1c67c:	b	1c640 <__assert_fail@plt+0xa2f4>
   1c680:	mvn	r4, #21
   1c684:	b	1c648 <__assert_fail@plt+0xa2fc>
   1c688:	mvn	r4, #11
   1c68c:	b	1c648 <__assert_fail@plt+0xa2fc>
   1c690:	subs	r3, r0, #0
   1c694:	beq	1c6b4 <__assert_fail@plt+0xa368>
   1c698:	push	{r4, lr}
   1c69c:	mov	r1, #47	; 0x2f
   1c6a0:	bl	1222c <strrchr@plt>
   1c6a4:	cmp	r0, #0
   1c6a8:	movne	r3, #0
   1c6ac:	strbne	r3, [r0], #1
   1c6b0:	pop	{r4, pc}
   1c6b4:	mov	r0, r3
   1c6b8:	bx	lr
   1c6bc:	push	{r4, r5, r6, lr}
   1c6c0:	mov	r6, r1
   1c6c4:	mov	r5, r2
   1c6c8:	mov	r4, r0
   1c6cc:	bl	1219c <__sched_cpualloc@plt>
   1c6d0:	cmp	r0, #0
   1c6d4:	popeq	{r4, r5, r6, pc}
   1c6d8:	cmp	r6, #0
   1c6dc:	addne	r3, r4, #31
   1c6e0:	lsrne	r3, r3, #5
   1c6e4:	lslne	r3, r3, #2
   1c6e8:	strne	r3, [r6]
   1c6ec:	cmp	r5, #0
   1c6f0:	addne	r4, r4, #31
   1c6f4:	bicne	r4, r4, #31
   1c6f8:	strne	r4, [r5]
   1c6fc:	pop	{r4, r5, r6, pc}
   1c700:	b	12130 <__sched_cpufree@plt>
   1c704:	ldr	r3, [pc, #212]	; 1c7e0 <__assert_fail@plt+0xa494>
   1c708:	ldr	r2, [pc, #212]	; 1c7e4 <__assert_fail@plt+0xa498>
   1c70c:	add	r3, pc, r3
   1c710:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c714:	sub	sp, sp, #12
   1c718:	ldr	r9, [r3, r2]
   1c71c:	mov	r7, sp
   1c720:	mov	r1, r7
   1c724:	ldr	r3, [r9]
   1c728:	mov	r2, #0
   1c72c:	mov	r0, #2048	; 0x800
   1c730:	str	r3, [sp, #4]
   1c734:	bl	1c6bc <__assert_fail@plt+0xa370>
   1c738:	subs	r4, r0, #0
   1c73c:	movne	r5, #2048	; 0x800
   1c740:	ldrne	r8, [pc, #160]	; 1c7e8 <__assert_fail@plt+0xa49c>
   1c744:	bne	1c770 <__assert_fail@plt+0xa424>
   1c748:	b	1c7d4 <__assert_fail@plt+0xa488>
   1c74c:	mov	r0, r4
   1c750:	lsl	r5, r5, #1
   1c754:	bl	1c700 <__assert_fail@plt+0xa3b4>
   1c758:	mov	r0, r5
   1c75c:	mov	r2, #0
   1c760:	mov	r1, r7
   1c764:	bl	1c6bc <__assert_fail@plt+0xa370>
   1c768:	subs	r4, r0, #0
   1c76c:	beq	1c7d4 <__assert_fail@plt+0xa488>
   1c770:	ldr	r2, [sp]
   1c774:	mov	r1, #0
   1c778:	mov	r0, r4
   1c77c:	bl	1213c <memset@plt>
   1c780:	mov	r3, r4
   1c784:	ldr	r2, [sp]
   1c788:	mov	r1, #0
   1c78c:	mov	r0, #242	; 0xf2
   1c790:	bl	12058 <syscall@plt>
   1c794:	subs	r6, r0, #0
   1c798:	bge	1c7b0 <__assert_fail@plt+0xa464>
   1c79c:	bl	120d0 <__errno_location@plt>
   1c7a0:	ldr	r3, [r0]
   1c7a4:	cmp	r5, r8
   1c7a8:	cmple	r3, #22
   1c7ac:	beq	1c74c <__assert_fail@plt+0xa400>
   1c7b0:	mov	r0, r4
   1c7b4:	bl	1c700 <__assert_fail@plt+0xa3b4>
   1c7b8:	lsl	r0, r6, #3
   1c7bc:	ldr	r2, [sp, #4]
   1c7c0:	ldr	r3, [r9]
   1c7c4:	cmp	r2, r3
   1c7c8:	bne	1c7dc <__assert_fail@plt+0xa490>
   1c7cc:	add	sp, sp, #12
   1c7d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c7d4:	mvn	r0, #0
   1c7d8:	b	1c7bc <__assert_fail@plt+0xa470>
   1c7dc:	bl	11e84 <__stack_chk_fail@plt>
   1c7e0:			; <UNDEFINED> instruction: 0x000136b0
   1c7e4:	andeq	r0, r0, r0, lsr r2
   1c7e8:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1c7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7f0:	lsls	r7, r3, #3
   1c7f4:	sub	sp, sp, #28
   1c7f8:	mov	sl, r0
   1c7fc:	beq	1c998 <__assert_fail@plt+0xa64c>
   1c800:	mov	r5, r3
   1c804:	ldr	r3, [pc, #404]	; 1c9a0 <__assert_fail@plt+0xa654>
   1c808:	ldr	fp, [pc, #404]	; 1c9a4 <__assert_fail@plt+0xa658>
   1c80c:	add	r3, pc, r3
   1c810:	str	r3, [sp, #16]
   1c814:	ldr	r3, [pc, #396]	; 1c9a8 <__assert_fail@plt+0xa65c>
   1c818:	mov	r9, r1
   1c81c:	add	r3, pc, r3
   1c820:	mov	r1, #0
   1c824:	mov	r6, r2
   1c828:	add	fp, pc, fp
   1c82c:	str	r3, [sp, #20]
   1c830:	mov	ip, r1
   1c834:	mov	r8, r0
   1c838:	b	1c848 <__assert_fail@plt+0xa4fc>
   1c83c:	cmp	r7, r4
   1c840:	mov	ip, r4
   1c844:	bls	1c924 <__assert_fail@plt+0xa5d8>
   1c848:	cmp	r5, ip, lsr #3
   1c84c:	add	r4, ip, #1
   1c850:	bls	1c83c <__assert_fail@plt+0xa4f0>
   1c854:	lsr	r2, ip, #5
   1c858:	and	r3, ip, #31
   1c85c:	ldr	r2, [r6, r2, lsl #2]
   1c860:	lsr	r3, r2, r3
   1c864:	tst	r3, #1
   1c868:	beq	1c83c <__assert_fail@plt+0xa4f0>
   1c86c:	cmp	r7, r4
   1c870:	bls	1c93c <__assert_fail@plt+0xa5f0>
   1c874:	cmp	r5, r4, lsr #3
   1c878:	bls	1c93c <__assert_fail@plt+0xa5f0>
   1c87c:	lsr	r2, r4, #5
   1c880:	and	r3, r4, #31
   1c884:	ldr	r2, [r6, r2, lsl #2]
   1c888:	lsr	r3, r2, r3
   1c88c:	tst	r3, #1
   1c890:	beq	1c93c <__assert_fail@plt+0xa5f0>
   1c894:	sub	r0, r7, #1
   1c898:	sub	r0, r0, ip
   1c89c:	mov	r2, #1
   1c8a0:	b	1c8c4 <__assert_fail@plt+0xa578>
   1c8a4:	cmp	r5, r3, lsr #3
   1c8a8:	bls	1c8d8 <__assert_fail@plt+0xa58c>
   1c8ac:	ldr	r3, [r6, lr, lsl #2]
   1c8b0:	add	lr, r2, #1
   1c8b4:	lsr	r3, r3, r1
   1c8b8:	tst	r3, #1
   1c8bc:	beq	1c8d8 <__assert_fail@plt+0xa58c>
   1c8c0:	mov	r2, lr
   1c8c4:	add	r3, r2, r4
   1c8c8:	cmp	r0, r2
   1c8cc:	and	r1, r3, #31
   1c8d0:	lsr	lr, r3, #5
   1c8d4:	bne	1c8a4 <__assert_fail@plt+0xa558>
   1c8d8:	cmp	r2, #1
   1c8dc:	beq	1c974 <__assert_fail@plt+0xa628>
   1c8e0:	add	r4, ip, r2
   1c8e4:	str	r4, [sp, #8]
   1c8e8:	stm	sp, {fp, ip}
   1c8ec:	mvn	r3, #0
   1c8f0:	mov	r2, #1
   1c8f4:	mov	r1, r9
   1c8f8:	mov	r0, r8
   1c8fc:	bl	12328 <__snprintf_chk@plt>
   1c900:	cmp	r0, r9
   1c904:	bcs	1c968 <__assert_fail@plt+0xa61c>
   1c908:	add	r4, r4, #1
   1c90c:	cmp	r7, r4
   1c910:	add	r8, r8, r0
   1c914:	sub	r9, r9, r0
   1c918:	mov	r1, #1
   1c91c:	mov	ip, r4
   1c920:	bhi	1c848 <__assert_fail@plt+0xa4fc>
   1c924:	sub	r8, r8, r1
   1c928:	mov	r3, #0
   1c92c:	mov	r0, sl
   1c930:	strb	r3, [r8]
   1c934:	add	sp, sp, #28
   1c938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c93c:	ldr	r3, [sp, #16]
   1c940:	str	ip, [sp, #4]
   1c944:	str	r3, [sp]
   1c948:	mov	r2, #1
   1c94c:	mvn	r3, #0
   1c950:	mov	r1, r9
   1c954:	mov	r0, r8
   1c958:	mov	r4, ip
   1c95c:	bl	12328 <__snprintf_chk@plt>
   1c960:	cmp	r0, r9
   1c964:	bcc	1c908 <__assert_fail@plt+0xa5bc>
   1c968:	mov	r0, #0
   1c96c:	add	sp, sp, #28
   1c970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c974:	ldr	r3, [sp, #20]
   1c978:	str	r4, [sp, #8]
   1c97c:	str	r3, [sp]
   1c980:	str	ip, [sp, #4]
   1c984:	mvn	r3, #0
   1c988:	mov	r1, r9
   1c98c:	mov	r0, r8
   1c990:	bl	12328 <__snprintf_chk@plt>
   1c994:	b	1c900 <__assert_fail@plt+0xa5b4>
   1c998:	mov	r8, r0
   1c99c:	b	1c928 <__assert_fail@plt+0xa5dc>
   1c9a0:	andeq	r2, r0, r4, lsl #22
   1c9a4:	strdeq	r2, [r0], -r0
   1c9a8:	strdeq	r2, [r0], -r0
   1c9ac:	lsl	ip, r3, #3
   1c9b0:	subs	ip, ip, #4
   1c9b4:	push	{r4, r5, r6, r7, r8, lr}
   1c9b8:	mov	r7, r0
   1c9bc:	mov	r6, r0
   1c9c0:	bmi	1cadc <__assert_fail@plt+0xa790>
   1c9c4:	cmp	r1, #0
   1c9c8:	beq	1cadc <__assert_fail@plt+0xa790>
   1c9cc:	mov	r0, #0
   1c9d0:	b	1ca28 <__assert_fail@plt+0xa6dc>
   1c9d4:	lsr	r8, r5, #5
   1c9d8:	and	r5, r5, #31
   1c9dc:	ldr	r8, [r2, r8, lsl #2]
   1c9e0:	lsr	r5, r8, r5
   1c9e4:	tst	r5, #1
   1c9e8:	beq	1caa0 <__assert_fail@plt+0xa754>
   1c9ec:	orr	r4, lr, #8
   1c9f0:	cmp	r0, #0
   1c9f4:	moveq	r0, r6
   1c9f8:	cmp	r4, #9
   1c9fc:	mov	lr, r4
   1ca00:	addgt	lr, r4, #87	; 0x57
   1ca04:	ble	1cab0 <__assert_fail@plt+0xa764>
   1ca08:	mov	r4, r6
   1ca0c:	subs	ip, ip, #4
   1ca10:	strb	lr, [r4], #1
   1ca14:	bmi	1cac4 <__assert_fail@plt+0xa778>
   1ca18:	sub	lr, r4, r7
   1ca1c:	cmp	lr, r1
   1ca20:	beq	1cac4 <__assert_fail@plt+0xa778>
   1ca24:	mov	r6, r4
   1ca28:	cmp	r3, ip, lsr #3
   1ca2c:	lsrhi	r4, ip, #5
   1ca30:	andhi	lr, ip, #31
   1ca34:	ldrhi	r4, [r2, r4, lsl #2]
   1ca38:	movls	lr, #0
   1ca3c:	lsrhi	lr, r4, lr
   1ca40:	add	r4, ip, #1
   1ca44:	andhi	lr, lr, #1
   1ca48:	cmp	r3, r4, lsr #3
   1ca4c:	bls	1ca68 <__assert_fail@plt+0xa71c>
   1ca50:	lsr	r5, r4, #5
   1ca54:	and	r4, r4, #31
   1ca58:	ldr	r5, [r2, r5, lsl #2]
   1ca5c:	lsr	r4, r5, r4
   1ca60:	tst	r4, #1
   1ca64:	orrne	lr, lr, #2
   1ca68:	add	r4, ip, #2
   1ca6c:	cmp	r3, r4, lsr #3
   1ca70:	bls	1ca8c <__assert_fail@plt+0xa740>
   1ca74:	lsr	r5, r4, #5
   1ca78:	and	r4, r4, #31
   1ca7c:	ldr	r5, [r2, r5, lsl #2]
   1ca80:	lsr	r4, r5, r4
   1ca84:	tst	r4, #1
   1ca88:	orrne	lr, lr, #4
   1ca8c:	add	r5, ip, #3
   1ca90:	clz	r4, r0
   1ca94:	cmp	r3, r5, lsr #3
   1ca98:	lsr	r4, r4, #5
   1ca9c:	bhi	1c9d4 <__assert_fail@plt+0xa688>
   1caa0:	cmp	lr, #0
   1caa4:	moveq	r4, #0
   1caa8:	cmp	r4, #0
   1caac:	movne	r0, r6
   1cab0:	mov	r4, r6
   1cab4:	add	lr, lr, #48	; 0x30
   1cab8:	subs	ip, ip, #4
   1cabc:	strb	lr, [r4], #1
   1cac0:	bpl	1ca18 <__assert_fail@plt+0xa6cc>
   1cac4:	cmp	r0, #0
   1cac8:	mov	r3, #0
   1cacc:	strb	r3, [r4]
   1cad0:	popne	{r4, r5, r6, r7, r8, pc}
   1cad4:	mov	r0, r6
   1cad8:	pop	{r4, r5, r6, r7, r8, pc}
   1cadc:	mov	r3, #0
   1cae0:	strb	r3, [r6], #-1
   1cae4:	mov	r0, r6
   1cae8:	pop	{r4, r5, r6, r7, r8, pc}
   1caec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1caf0:	mov	r7, r0
   1caf4:	mov	r6, r1
   1caf8:	mov	r9, r2
   1cafc:	bl	1207c <strlen@plt>
   1cb00:	cmp	r0, #1
   1cb04:	sub	r0, r0, #1
   1cb08:	add	r4, r7, r0
   1cb0c:	bls	1cb1c <__assert_fail@plt+0xa7d0>
   1cb10:	ldrb	r3, [r7]
   1cb14:	cmp	r3, #48	; 0x30
   1cb18:	beq	1cc2c <__assert_fail@plt+0xa8e0>
   1cb1c:	mov	r2, r9
   1cb20:	mov	r1, #0
   1cb24:	mov	r0, r6
   1cb28:	bl	1213c <memset@plt>
   1cb2c:	cmp	r7, r4
   1cb30:	movls	r5, #0
   1cb34:	movls	r8, #1
   1cb38:	bls	1cbe8 <__assert_fail@plt+0xa89c>
   1cb3c:	b	1cc24 <__assert_fail@plt+0xa8d8>
   1cb40:	sxtb	r0, r3
   1cb44:	cmn	r0, #1
   1cb48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb4c:	tst	r3, #1
   1cb50:	beq	1cb6c <__assert_fail@plt+0xa820>
   1cb54:	cmp	r9, r5, lsr #3
   1cb58:	lsrhi	r0, r5, #5
   1cb5c:	andhi	r2, r5, #31
   1cb60:	ldrhi	r1, [r6, r0, lsl #2]
   1cb64:	orrhi	r2, r1, r8, lsl r2
   1cb68:	strhi	r2, [r6, r0, lsl #2]
   1cb6c:	tst	r3, #2
   1cb70:	beq	1cb90 <__assert_fail@plt+0xa844>
   1cb74:	add	r2, r5, #1
   1cb78:	cmp	r9, r2, lsr #3
   1cb7c:	lsrhi	r0, r2, #5
   1cb80:	andhi	r2, r2, #31
   1cb84:	ldrhi	r1, [r6, r0, lsl #2]
   1cb88:	orrhi	r2, r1, r8, lsl r2
   1cb8c:	strhi	r2, [r6, r0, lsl #2]
   1cb90:	tst	r3, #4
   1cb94:	beq	1cbb4 <__assert_fail@plt+0xa868>
   1cb98:	add	r2, r5, #2
   1cb9c:	cmp	r9, r2, lsr #3
   1cba0:	lsrhi	r0, r2, #5
   1cba4:	andhi	r2, r2, #31
   1cba8:	ldrhi	r1, [r6, r0, lsl #2]
   1cbac:	orrhi	r2, r1, r8, lsl r2
   1cbb0:	strhi	r2, [r6, r0, lsl #2]
   1cbb4:	tst	r3, #8
   1cbb8:	beq	1cbd8 <__assert_fail@plt+0xa88c>
   1cbbc:	add	r3, r5, #3
   1cbc0:	cmp	r9, r3, lsr #3
   1cbc4:	lsrhi	r1, r3, #5
   1cbc8:	andhi	r3, r3, #31
   1cbcc:	ldrhi	r2, [r6, r1, lsl #2]
   1cbd0:	orrhi	r3, r2, r8, lsl r3
   1cbd4:	strhi	r3, [r6, r1, lsl #2]
   1cbd8:	sub	r4, r4, #1
   1cbdc:	cmp	r7, r4
   1cbe0:	add	r5, r5, #4
   1cbe4:	bhi	1cc24 <__assert_fail@plt+0xa8d8>
   1cbe8:	ldrsb	sl, [r4]
   1cbec:	cmp	sl, #44	; 0x2c
   1cbf0:	ldrsbeq	sl, [r4, #-1]
   1cbf4:	subeq	r4, r4, #1
   1cbf8:	sub	r3, sl, #48	; 0x30
   1cbfc:	cmp	r3, #9
   1cc00:	bls	1cb40 <__assert_fail@plt+0xa7f4>
   1cc04:	bl	12010 <__ctype_tolower_loc@plt>
   1cc08:	ldr	r3, [r0]
   1cc0c:	ldr	r3, [r3, sl, lsl #2]
   1cc10:	sub	r2, r3, #97	; 0x61
   1cc14:	cmp	r2, #5
   1cc18:	bhi	1cc3c <__assert_fail@plt+0xa8f0>
   1cc1c:	sub	r3, r3, #87	; 0x57
   1cc20:	b	1cb4c <__assert_fail@plt+0xa800>
   1cc24:	mov	r0, #0
   1cc28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc2c:	ldrb	r3, [r7, #1]
   1cc30:	cmp	r3, #120	; 0x78
   1cc34:	addeq	r7, r7, #2
   1cc38:	b	1cb1c <__assert_fail@plt+0xa7d0>
   1cc3c:	mvn	r0, #0
   1cc40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc44:	ldr	ip, [pc, #584]	; 1ce94 <__assert_fail@plt+0xab48>
   1cc48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc4c:	add	ip, pc, ip
   1cc50:	ldr	lr, [pc, #576]	; 1ce98 <__assert_fail@plt+0xab4c>
   1cc54:	mov	r6, r1
   1cc58:	sub	sp, sp, #52	; 0x34
   1cc5c:	ldr	r1, [ip, lr]
   1cc60:	mov	sl, r0
   1cc64:	mov	lr, r1
   1cc68:	str	r1, [sp, #16]
   1cc6c:	ldr	lr, [lr]
   1cc70:	mov	r1, #0
   1cc74:	mov	r0, r6
   1cc78:	str	r3, [sp, #8]
   1cc7c:	mov	r4, r2
   1cc80:	str	lr, [sp, #44]	; 0x2c
   1cc84:	lsl	r5, r2, #3
   1cc88:	bl	1213c <memset@plt>
   1cc8c:	mov	r3, #0
   1cc90:	str	r3, [sp]
   1cc94:	ldr	r3, [pc, #512]	; 1ce9c <__assert_fail@plt+0xab50>
   1cc98:	cmp	sl, #0
   1cc9c:	add	r3, pc, r3
   1cca0:	str	r3, [sp, #4]
   1cca4:	ldr	r3, [pc, #500]	; 1cea0 <__assert_fail@plt+0xab54>
   1cca8:	add	r3, pc, r3
   1ccac:	str	r3, [sp, #20]
   1ccb0:	beq	1cdc4 <__assert_fail@plt+0xaa78>
   1ccb4:	mov	r1, #44	; 0x2c
   1ccb8:	mov	r0, sl
   1ccbc:	bl	12088 <strchr@plt>
   1ccc0:	subs	r9, r0, #0
   1ccc4:	addne	r9, r9, #1
   1ccc8:	add	r3, sp, #31
   1cccc:	add	r2, sp, #32
   1ccd0:	ldr	r1, [sp, #4]
   1ccd4:	mov	r0, sl
   1ccd8:	str	r3, [sp, #12]
   1ccdc:	bl	1225c <sscanf@plt>
   1cce0:	subs	r3, r0, #0
   1cce4:	str	r3, [sp]
   1cce8:	ble	1ce5c <__assert_fail@plt+0xab10>
   1ccec:	ldr	fp, [sp, #32]
   1ccf0:	mov	r7, #1
   1ccf4:	mov	r1, #45	; 0x2d
   1ccf8:	mov	r0, sl
   1ccfc:	str	fp, [sp, #36]	; 0x24
   1cd00:	str	r7, [sp, #40]	; 0x28
   1cd04:	bl	12088 <strchr@plt>
   1cd08:	subs	r8, r0, #0
   1cd0c:	beq	1cd50 <__assert_fail@plt+0xaa04>
   1cd10:	mov	r0, sl
   1cd14:	mov	r1, #44	; 0x2c
   1cd18:	bl	12088 <strchr@plt>
   1cd1c:	add	r8, r8, r7
   1cd20:	subs	sl, r0, #0
   1cd24:	beq	1cdf8 <__assert_fail@plt+0xaaac>
   1cd28:	cmp	r8, #0
   1cd2c:	add	sl, sl, r7
   1cd30:	beq	1cd50 <__assert_fail@plt+0xaa04>
   1cd34:	clz	r7, sl
   1cd38:	lsr	r7, r7, #5
   1cd3c:	cmp	sl, r8
   1cd40:	movls	r2, r7
   1cd44:	orrhi	r2, r7, #1
   1cd48:	cmp	r2, #0
   1cd4c:	bne	1ce00 <__assert_fail@plt+0xaab4>
   1cd50:	mov	lr, fp
   1cd54:	ldr	r3, [sp, #8]
   1cd58:	adds	ip, r3, #0
   1cd5c:	movne	ip, #1
   1cd60:	cmp	r5, fp
   1cd64:	movhi	r2, #0
   1cd68:	andls	r2, ip, #1
   1cd6c:	cmp	r2, #0
   1cd70:	bne	1cdd8 <__assert_fail@plt+0xaa8c>
   1cd74:	ldr	r7, [sp, #40]	; 0x28
   1cd78:	mov	r8, #1
   1cd7c:	b	1cd94 <__assert_fail@plt+0xaa48>
   1cd80:	cmp	fp, r5
   1cd84:	movcc	r3, #0
   1cd88:	andcs	r3, ip, #1
   1cd8c:	cmp	r3, #0
   1cd90:	bne	1cdd8 <__assert_fail@plt+0xaa8c>
   1cd94:	cmp	r4, fp, lsr #3
   1cd98:	lsrhi	r1, fp, #5
   1cd9c:	andhi	r3, fp, #31
   1cda0:	ldrhi	r2, [r6, r1, lsl #2]
   1cda4:	add	fp, fp, r7
   1cda8:	orrhi	r3, r2, r8, lsl r3
   1cdac:	strhi	r3, [r6, r1, lsl #2]
   1cdb0:	cmp	fp, lr
   1cdb4:	bls	1cd80 <__assert_fail@plt+0xaa34>
   1cdb8:	mov	sl, r9
   1cdbc:	cmp	sl, #0
   1cdc0:	bne	1ccb4 <__assert_fail@plt+0xa968>
   1cdc4:	ldr	r3, [sp]
   1cdc8:	sub	r0, r3, #2
   1cdcc:	clz	r0, r0
   1cdd0:	lsr	r0, r0, #5
   1cdd4:	b	1cddc <__assert_fail@plt+0xaa90>
   1cdd8:	mov	r0, #2
   1cddc:	ldr	r3, [sp, #16]
   1cde0:	ldr	r2, [sp, #44]	; 0x2c
   1cde4:	ldr	r3, [r3]
   1cde8:	cmp	r2, r3
   1cdec:	bne	1ce90 <__assert_fail@plt+0xab44>
   1cdf0:	add	sp, sp, #52	; 0x34
   1cdf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdf8:	cmp	r8, #0
   1cdfc:	beq	1cd50 <__assert_fail@plt+0xaa04>
   1ce00:	ldr	r3, [sp, #12]
   1ce04:	add	r2, sp, #36	; 0x24
   1ce08:	ldr	r1, [sp, #20]
   1ce0c:	mov	r0, r8
   1ce10:	bl	1225c <sscanf@plt>
   1ce14:	subs	r3, r0, #0
   1ce18:	str	r3, [sp]
   1ce1c:	ble	1ce5c <__assert_fail@plt+0xab10>
   1ce20:	mov	r0, r8
   1ce24:	mov	r1, #58	; 0x3a
   1ce28:	bl	12088 <strchr@plt>
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1ce4c <__assert_fail@plt+0xab00>
   1ce34:	adds	r0, r0, #1
   1ce38:	beq	1ce4c <__assert_fail@plt+0xab00>
   1ce3c:	cmp	r0, sl
   1ce40:	orrcc	r7, r7, #1
   1ce44:	cmp	r7, #0
   1ce48:	bne	1ce64 <__assert_fail@plt+0xab18>
   1ce4c:	ldr	fp, [sp, #32]
   1ce50:	ldr	lr, [sp, #36]	; 0x24
   1ce54:	cmp	fp, lr
   1ce58:	bls	1cd54 <__assert_fail@plt+0xaa08>
   1ce5c:	mov	r0, #1
   1ce60:	b	1cddc <__assert_fail@plt+0xaa90>
   1ce64:	ldr	r3, [sp, #12]
   1ce68:	add	r2, sp, #40	; 0x28
   1ce6c:	ldr	r1, [sp, #20]
   1ce70:	bl	1225c <sscanf@plt>
   1ce74:	subs	r3, r0, #0
   1ce78:	str	r3, [sp]
   1ce7c:	ble	1ce5c <__assert_fail@plt+0xab10>
   1ce80:	ldr	r3, [sp, #40]	; 0x28
   1ce84:	cmp	r3, #0
   1ce88:	bne	1ce4c <__assert_fail@plt+0xab00>
   1ce8c:	b	1ce5c <__assert_fail@plt+0xab10>
   1ce90:	bl	11e84 <__stack_chk_fail@plt>
   1ce94:	andeq	r3, r1, r0, ror r1
   1ce98:	andeq	r0, r0, r0, lsr r2
   1ce9c:	andeq	r2, r0, ip, lsl #13
   1cea0:	andeq	r2, r0, r0, lsl #13
   1cea4:	eor	r1, r1, #-2147483648	; 0x80000000
   1cea8:	b	1ceb0 <__assert_fail@plt+0xab64>
   1ceac:	eor	r3, r3, #-2147483648	; 0x80000000
   1ceb0:	push	{r4, r5, lr}
   1ceb4:	lsl	r4, r1, #1
   1ceb8:	lsl	r5, r3, #1
   1cebc:	teq	r4, r5
   1cec0:	teqeq	r0, r2
   1cec4:	orrsne	ip, r4, r0
   1cec8:	orrsne	ip, r5, r2
   1cecc:	mvnsne	ip, r4, asr #21
   1ced0:	mvnsne	ip, r5, asr #21
   1ced4:	beq	1d0c0 <__assert_fail@plt+0xad74>
   1ced8:	lsr	r4, r4, #21
   1cedc:	rsbs	r5, r4, r5, lsr #21
   1cee0:	rsblt	r5, r5, #0
   1cee4:	ble	1cf04 <__assert_fail@plt+0xabb8>
   1cee8:	add	r4, r4, r5
   1ceec:	eor	r2, r0, r2
   1cef0:	eor	r3, r1, r3
   1cef4:	eor	r0, r2, r0
   1cef8:	eor	r1, r3, r1
   1cefc:	eor	r2, r0, r2
   1cf00:	eor	r3, r1, r3
   1cf04:	cmp	r5, #54	; 0x36
   1cf08:	pophi	{r4, r5, pc}
   1cf0c:	tst	r1, #-2147483648	; 0x80000000
   1cf10:	lsl	r1, r1, #12
   1cf14:	mov	ip, #1048576	; 0x100000
   1cf18:	orr	r1, ip, r1, lsr #12
   1cf1c:	beq	1cf28 <__assert_fail@plt+0xabdc>
   1cf20:	rsbs	r0, r0, #0
   1cf24:	rsc	r1, r1, #0
   1cf28:	tst	r3, #-2147483648	; 0x80000000
   1cf2c:	lsl	r3, r3, #12
   1cf30:	orr	r3, ip, r3, lsr #12
   1cf34:	beq	1cf40 <__assert_fail@plt+0xabf4>
   1cf38:	rsbs	r2, r2, #0
   1cf3c:	rsc	r3, r3, #0
   1cf40:	teq	r4, r5
   1cf44:	beq	1d0a8 <__assert_fail@plt+0xad5c>
   1cf48:	sub	r4, r4, #1
   1cf4c:	rsbs	lr, r5, #32
   1cf50:	blt	1cf6c <__assert_fail@plt+0xac20>
   1cf54:	lsl	ip, r2, lr
   1cf58:	adds	r0, r0, r2, lsr r5
   1cf5c:	adc	r1, r1, #0
   1cf60:	adds	r0, r0, r3, lsl lr
   1cf64:	adcs	r1, r1, r3, asr r5
   1cf68:	b	1cf88 <__assert_fail@plt+0xac3c>
   1cf6c:	sub	r5, r5, #32
   1cf70:	add	lr, lr, #32
   1cf74:	cmp	r2, #1
   1cf78:	lsl	ip, r3, lr
   1cf7c:	orrcs	ip, ip, #2
   1cf80:	adds	r0, r0, r3, asr r5
   1cf84:	adcs	r1, r1, r3, asr #31
   1cf88:	and	r5, r1, #-2147483648	; 0x80000000
   1cf8c:	bpl	1cf9c <__assert_fail@plt+0xac50>
   1cf90:	rsbs	ip, ip, #0
   1cf94:	rscs	r0, r0, #0
   1cf98:	rsc	r1, r1, #0
   1cf9c:	cmp	r1, #1048576	; 0x100000
   1cfa0:	bcc	1cfe0 <__assert_fail@plt+0xac94>
   1cfa4:	cmp	r1, #2097152	; 0x200000
   1cfa8:	bcc	1cfc8 <__assert_fail@plt+0xac7c>
   1cfac:	lsrs	r1, r1, #1
   1cfb0:	rrxs	r0, r0
   1cfb4:	rrx	ip, ip
   1cfb8:	add	r4, r4, #1
   1cfbc:	lsl	r2, r4, #21
   1cfc0:	cmn	r2, #4194304	; 0x400000
   1cfc4:	bcs	1d120 <__assert_fail@plt+0xadd4>
   1cfc8:	cmp	ip, #-2147483648	; 0x80000000
   1cfcc:	lsrseq	ip, r0, #1
   1cfd0:	adcs	r0, r0, #0
   1cfd4:	adc	r1, r1, r4, lsl #20
   1cfd8:	orr	r1, r1, r5
   1cfdc:	pop	{r4, r5, pc}
   1cfe0:	lsls	ip, ip, #1
   1cfe4:	adcs	r0, r0, r0
   1cfe8:	adc	r1, r1, r1
   1cfec:	tst	r1, #1048576	; 0x100000
   1cff0:	sub	r4, r4, #1
   1cff4:	bne	1cfc8 <__assert_fail@plt+0xac7c>
   1cff8:	teq	r1, #0
   1cffc:	moveq	r1, r0
   1d000:	moveq	r0, #0
   1d004:	clz	r3, r1
   1d008:	addeq	r3, r3, #32
   1d00c:	sub	r3, r3, #11
   1d010:	subs	r2, r3, #32
   1d014:	bge	1d038 <__assert_fail@plt+0xacec>
   1d018:	adds	r2, r2, #12
   1d01c:	ble	1d034 <__assert_fail@plt+0xace8>
   1d020:	add	ip, r2, #20
   1d024:	rsb	r2, r2, #12
   1d028:	lsl	r0, r1, ip
   1d02c:	lsr	r1, r1, r2
   1d030:	b	1d048 <__assert_fail@plt+0xacfc>
   1d034:	add	r2, r2, #20
   1d038:	rsble	ip, r2, #32
   1d03c:	lsl	r1, r1, r2
   1d040:	orrle	r1, r1, r0, lsr ip
   1d044:	lslle	r0, r0, r2
   1d048:	subs	r4, r4, r3
   1d04c:	addge	r1, r1, r4, lsl #20
   1d050:	orrge	r1, r1, r5
   1d054:	popge	{r4, r5, pc}
   1d058:	mvn	r4, r4
   1d05c:	subs	r4, r4, #31
   1d060:	bge	1d09c <__assert_fail@plt+0xad50>
   1d064:	adds	r4, r4, #12
   1d068:	bgt	1d084 <__assert_fail@plt+0xad38>
   1d06c:	add	r4, r4, #20
   1d070:	rsb	r2, r4, #32
   1d074:	lsr	r0, r0, r4
   1d078:	orr	r0, r0, r1, lsl r2
   1d07c:	orr	r1, r5, r1, lsr r4
   1d080:	pop	{r4, r5, pc}
   1d084:	rsb	r4, r4, #12
   1d088:	rsb	r2, r4, #32
   1d08c:	lsr	r0, r0, r2
   1d090:	orr	r0, r0, r1, lsl r4
   1d094:	mov	r1, r5
   1d098:	pop	{r4, r5, pc}
   1d09c:	lsr	r0, r1, r4
   1d0a0:	mov	r1, r5
   1d0a4:	pop	{r4, r5, pc}
   1d0a8:	teq	r4, #0
   1d0ac:	eor	r3, r3, #1048576	; 0x100000
   1d0b0:	eoreq	r1, r1, #1048576	; 0x100000
   1d0b4:	addeq	r4, r4, #1
   1d0b8:	subne	r5, r5, #1
   1d0bc:	b	1cf48 <__assert_fail@plt+0xabfc>
   1d0c0:	mvns	ip, r4, asr #21
   1d0c4:	mvnsne	ip, r5, asr #21
   1d0c8:	beq	1d130 <__assert_fail@plt+0xade4>
   1d0cc:	teq	r4, r5
   1d0d0:	teqeq	r0, r2
   1d0d4:	beq	1d0e8 <__assert_fail@plt+0xad9c>
   1d0d8:	orrs	ip, r4, r0
   1d0dc:	moveq	r1, r3
   1d0e0:	moveq	r0, r2
   1d0e4:	pop	{r4, r5, pc}
   1d0e8:	teq	r1, r3
   1d0ec:	movne	r1, #0
   1d0f0:	movne	r0, #0
   1d0f4:	popne	{r4, r5, pc}
   1d0f8:	lsrs	ip, r4, #21
   1d0fc:	bne	1d110 <__assert_fail@plt+0xadc4>
   1d100:	lsls	r0, r0, #1
   1d104:	adcs	r1, r1, r1
   1d108:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1d10c:	pop	{r4, r5, pc}
   1d110:	adds	r4, r4, #4194304	; 0x400000
   1d114:	addcc	r1, r1, #1048576	; 0x100000
   1d118:	popcc	{r4, r5, pc}
   1d11c:	and	r5, r1, #-2147483648	; 0x80000000
   1d120:	orr	r1, r5, #2130706432	; 0x7f000000
   1d124:	orr	r1, r1, #15728640	; 0xf00000
   1d128:	mov	r0, #0
   1d12c:	pop	{r4, r5, pc}
   1d130:	mvns	ip, r4, asr #21
   1d134:	movne	r1, r3
   1d138:	movne	r0, r2
   1d13c:	mvnseq	ip, r5, asr #21
   1d140:	movne	r3, r1
   1d144:	movne	r2, r0
   1d148:	orrs	r4, r0, r1, lsl #12
   1d14c:	orrseq	r5, r2, r3, lsl #12
   1d150:	teqeq	r1, r3
   1d154:	orrne	r1, r1, #524288	; 0x80000
   1d158:	pop	{r4, r5, pc}
   1d15c:	teq	r0, #0
   1d160:	moveq	r1, #0
   1d164:	bxeq	lr
   1d168:	push	{r4, r5, lr}
   1d16c:	mov	r4, #1024	; 0x400
   1d170:	add	r4, r4, #50	; 0x32
   1d174:	mov	r5, #0
   1d178:	mov	r1, #0
   1d17c:	b	1cff8 <__assert_fail@plt+0xacac>
   1d180:	teq	r0, #0
   1d184:	moveq	r1, #0
   1d188:	bxeq	lr
   1d18c:	push	{r4, r5, lr}
   1d190:	mov	r4, #1024	; 0x400
   1d194:	add	r4, r4, #50	; 0x32
   1d198:	ands	r5, r0, #-2147483648	; 0x80000000
   1d19c:	rsbmi	r0, r0, #0
   1d1a0:	mov	r1, #0
   1d1a4:	b	1cff8 <__assert_fail@plt+0xacac>
   1d1a8:	lsls	r2, r0, #1
   1d1ac:	asr	r1, r2, #3
   1d1b0:	rrx	r1, r1
   1d1b4:	lsl	r0, r2, #28
   1d1b8:	andsne	r3, r2, #-16777216	; 0xff000000
   1d1bc:	teqne	r3, #-16777216	; 0xff000000
   1d1c0:	eorne	r1, r1, #939524096	; 0x38000000
   1d1c4:	bxne	lr
   1d1c8:	bics	r2, r2, #-16777216	; 0xff000000
   1d1cc:	bxeq	lr
   1d1d0:	teq	r3, #-16777216	; 0xff000000
   1d1d4:	orreq	r1, r1, #524288	; 0x80000
   1d1d8:	bxeq	lr
   1d1dc:	push	{r4, r5, lr}
   1d1e0:	mov	r4, #896	; 0x380
   1d1e4:	and	r5, r1, #-2147483648	; 0x80000000
   1d1e8:	bic	r1, r1, #-2147483648	; 0x80000000
   1d1ec:	b	1cff8 <__assert_fail@plt+0xacac>
   1d1f0:	orrs	r2, r0, r1
   1d1f4:	bxeq	lr
   1d1f8:	push	{r4, r5, lr}
   1d1fc:	mov	r5, #0
   1d200:	b	1d220 <__assert_fail@plt+0xaed4>
   1d204:	orrs	r2, r0, r1
   1d208:	bxeq	lr
   1d20c:	push	{r4, r5, lr}
   1d210:	ands	r5, r1, #-2147483648	; 0x80000000
   1d214:	bpl	1d220 <__assert_fail@plt+0xaed4>
   1d218:	rsbs	r0, r0, #0
   1d21c:	rsc	r1, r1, #0
   1d220:	mov	r4, #1024	; 0x400
   1d224:	add	r4, r4, #50	; 0x32
   1d228:	lsrs	ip, r1, #22
   1d22c:	beq	1cf9c <__assert_fail@plt+0xac50>
   1d230:	mov	r2, #3
   1d234:	lsrs	ip, ip, #3
   1d238:	addne	r2, r2, #3
   1d23c:	lsrs	ip, ip, #3
   1d240:	addne	r2, r2, #3
   1d244:	add	r2, r2, ip, lsr #3
   1d248:	rsb	r3, r2, #32
   1d24c:	lsl	ip, r0, r3
   1d250:	lsr	r0, r0, r2
   1d254:	orr	r0, r0, r1, lsl r3
   1d258:	lsr	r1, r1, r2
   1d25c:	add	r4, r4, r2
   1d260:	b	1cf9c <__assert_fail@plt+0xac50>
   1d264:	cmp	r3, #0
   1d268:	cmpeq	r2, #0
   1d26c:	bne	1d284 <__assert_fail@plt+0xaf38>
   1d270:	cmp	r1, #0
   1d274:	cmpeq	r0, #0
   1d278:	mvnne	r1, #0
   1d27c:	mvnne	r0, #0
   1d280:	b	1d2a0 <__assert_fail@plt+0xaf54>
   1d284:	sub	sp, sp, #8
   1d288:	push	{sp, lr}
   1d28c:	bl	1d2b0 <__assert_fail@plt+0xaf64>
   1d290:	ldr	lr, [sp, #4]
   1d294:	add	sp, sp, #8
   1d298:	pop	{r2, r3}
   1d29c:	bx	lr
   1d2a0:	push	{r1, lr}
   1d2a4:	mov	r0, #8
   1d2a8:	bl	11d04 <raise@plt>
   1d2ac:	pop	{r1, pc}
   1d2b0:	cmp	r1, r3
   1d2b4:	cmpeq	r0, r2
   1d2b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2bc:	mov	r4, r0
   1d2c0:	movcc	r0, #0
   1d2c4:	mov	r5, r1
   1d2c8:	ldr	lr, [sp, #36]	; 0x24
   1d2cc:	movcc	r1, r0
   1d2d0:	bcc	1d3cc <__assert_fail@plt+0xb080>
   1d2d4:	cmp	r3, #0
   1d2d8:	clzeq	ip, r2
   1d2dc:	clzne	ip, r3
   1d2e0:	addeq	ip, ip, #32
   1d2e4:	cmp	r5, #0
   1d2e8:	clzeq	r1, r4
   1d2ec:	addeq	r1, r1, #32
   1d2f0:	clzne	r1, r5
   1d2f4:	sub	ip, ip, r1
   1d2f8:	sub	sl, ip, #32
   1d2fc:	lsl	r9, r3, ip
   1d300:	rsb	fp, ip, #32
   1d304:	orr	r9, r9, r2, lsl sl
   1d308:	orr	r9, r9, r2, lsr fp
   1d30c:	lsl	r8, r2, ip
   1d310:	cmp	r5, r9
   1d314:	cmpeq	r4, r8
   1d318:	movcc	r0, #0
   1d31c:	movcc	r1, r0
   1d320:	bcc	1d33c <__assert_fail@plt+0xaff0>
   1d324:	mov	r0, #1
   1d328:	subs	r4, r4, r8
   1d32c:	lsl	r1, r0, sl
   1d330:	orr	r1, r1, r0, lsr fp
   1d334:	lsl	r0, r0, ip
   1d338:	sbc	r5, r5, r9
   1d33c:	cmp	ip, #0
   1d340:	beq	1d3cc <__assert_fail@plt+0xb080>
   1d344:	lsr	r6, r8, #1
   1d348:	orr	r6, r6, r9, lsl #31
   1d34c:	lsr	r7, r9, #1
   1d350:	mov	r2, ip
   1d354:	b	1d378 <__assert_fail@plt+0xb02c>
   1d358:	subs	r3, r4, r6
   1d35c:	sbc	r8, r5, r7
   1d360:	adds	r3, r3, r3
   1d364:	adc	r8, r8, r8
   1d368:	adds	r4, r3, #1
   1d36c:	adc	r5, r8, #0
   1d370:	subs	r2, r2, #1
   1d374:	beq	1d394 <__assert_fail@plt+0xb048>
   1d378:	cmp	r5, r7
   1d37c:	cmpeq	r4, r6
   1d380:	bcs	1d358 <__assert_fail@plt+0xb00c>
   1d384:	adds	r4, r4, r4
   1d388:	adc	r5, r5, r5
   1d38c:	subs	r2, r2, #1
   1d390:	bne	1d378 <__assert_fail@plt+0xb02c>
   1d394:	lsr	r3, r4, ip
   1d398:	orr	r3, r3, r5, lsl fp
   1d39c:	lsr	r2, r5, ip
   1d3a0:	orr	r3, r3, r5, lsr sl
   1d3a4:	adds	r0, r0, r4
   1d3a8:	mov	r4, r3
   1d3ac:	lsl	r3, r2, ip
   1d3b0:	orr	r3, r3, r4, lsl sl
   1d3b4:	lsl	ip, r4, ip
   1d3b8:	orr	r3, r3, r4, lsr fp
   1d3bc:	adc	r1, r1, r5
   1d3c0:	subs	r0, r0, ip
   1d3c4:	mov	r5, r2
   1d3c8:	sbc	r1, r1, r3
   1d3cc:	cmp	lr, #0
   1d3d0:	strdne	r4, [lr]
   1d3d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3dc:	mov	r7, r0
   1d3e0:	ldr	r6, [pc, #72]	; 1d430 <__assert_fail@plt+0xb0e4>
   1d3e4:	ldr	r5, [pc, #72]	; 1d434 <__assert_fail@plt+0xb0e8>
   1d3e8:	add	r6, pc, r6
   1d3ec:	add	r5, pc, r5
   1d3f0:	sub	r6, r6, r5
   1d3f4:	mov	r8, r1
   1d3f8:	mov	r9, r2
   1d3fc:	bl	11ccc <fdopen@plt-0x20>
   1d400:	asrs	r6, r6, #2
   1d404:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d408:	mov	r4, #0
   1d40c:	add	r4, r4, #1
   1d410:	ldr	r3, [r5], #4
   1d414:	mov	r2, r9
   1d418:	mov	r1, r8
   1d41c:	mov	r0, r7
   1d420:	blx	r3
   1d424:	cmp	r6, r4
   1d428:	bne	1d40c <__assert_fail@plt+0xb0c0>
   1d42c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d430:	muleq	r1, r4, r6
   1d434:	andeq	r2, r1, ip, lsl #13
   1d438:	bx	lr
   1d43c:	ldr	r3, [pc, #12]	; 1d450 <__assert_fail@plt+0xb104>
   1d440:	mov	r1, #0
   1d444:	add	r3, pc, r3
   1d448:	ldr	r2, [r3]
   1d44c:	b	12100 <__cxa_atexit@plt>
   1d450:			; <UNDEFINED> instruction: 0x00012bb8

Disassembly of section .fini:

0001d454 <.fini>:
   1d454:	push	{r3, lr}
   1d458:	pop	{r3, pc}
