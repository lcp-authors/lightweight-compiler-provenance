
raspbian-preinstalled/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010ce0 <.init>:
   10ce0:	push	{r3, lr}
   10ce4:	bl	114cc <__assert_fail@plt+0x568>
   10ce8:	pop	{r3, pc}

Disassembly of section .plt:

00010cec <calloc@plt-0x14>:
   10cec:	push	{lr}		; (str lr, [sp, #-4]!)
   10cf0:	ldr	lr, [pc, #4]	; 10cfc <calloc@plt-0x4>
   10cf4:	add	lr, pc, lr
   10cf8:	ldr	pc, [lr, #8]!
   10cfc:	andeq	r7, r1, r4, lsl #6

00010d00 <calloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #772]!	; 0x304

00010d0c <fputs_unlocked@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #764]!	; 0x2fc

00010d18 <raise@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #756]!	; 0x2f4

00010d24 <strcmp@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d30 <posix_fadvise64@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #740]!	; 0x2e4

00010d3c <fflush@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #732]!	; 0x2dc

00010d48 <__memmove_chk@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #724]!	; 0x2d4

00010d54 <free@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d60 <_exit@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #708]!	; 0x2c4

00010d6c <memcpy@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #700]!	; 0x2bc

00010d78 <__strtoull_internal@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #692]!	; 0x2b4

00010d84 <mbsinit@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d90 <fwrite_unlocked@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #676]!	; 0x2a4

00010d9c <memcmp@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #668]!	; 0x29c

00010da8 <dcgettext@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #660]!	; 0x294

00010db4 <__stack_chk_fail@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #652]!	; 0x28c

00010dc0 <realloc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #644]!	; 0x284

00010dcc <textdomain@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #636]!	; 0x27c

00010dd8 <iswprint@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #628]!	; 0x274

00010de4 <fwrite@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #620]!	; 0x26c

00010df0 <lseek64@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #612]!	; 0x264

00010dfc <__ctype_get_mb_cur_max@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #604]!	; 0x25c

00010e08 <__fpending@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #596]!	; 0x254

00010e14 <mbrtowc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #588]!	; 0x24c

00010e20 <error@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #580]!	; 0x244

00010e2c <malloc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #572]!	; 0x23c

00010e38 <__libc_start_main@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #564]!	; 0x234

00010e44 <__freading@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #556]!	; 0x22c

00010e50 <__gmon_start__@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #548]!	; 0x224

00010e5c <getopt_long@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #540]!	; 0x21c

00010e68 <__ctype_b_loc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #532]!	; 0x214

00010e74 <exit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #524]!	; 0x20c

00010e80 <strlen@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #516]!	; 0x204

00010e8c <strchr@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #508]!	; 0x1fc

00010e98 <__errno_location@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea4 <__cxa_atexit@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb0 <memset@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #484]!	; 0x1e4

00010ebc <__printf_chk@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ec8 <fileno@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed4 <__fprintf_chk@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #452]!	; 0x1c4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ef8 <__uflow@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #436]!	; 0x1b4

00010f04 <__overflow@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f10 <setlocale@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #420]!	; 0x1a4

00010f1c <strrchr@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #412]!	; 0x19c

00010f28 <nl_langinfo@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #404]!	; 0x194

00010f34 <fopen64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #396]!	; 0x18c

00010f40 <bindtextdomain@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #388]!	; 0x184

00010f4c <strncmp@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #380]!	; 0x17c

00010f58 <abort@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #372]!	; 0x174

00010f64 <__assert_fail@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #364]!	; 0x16c

Disassembly of section .text:

00010f70 <.text>:
   10f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f74:	mov	r7, r0
   10f78:	ldr	fp, [pc, #1204]	; 11434 <__assert_fail@plt+0x4d0>
   10f7c:	sub	sp, sp, #36	; 0x24
   10f80:	ldr	r0, [r1]
   10f84:	mov	r6, r1
   10f88:	bl	129ac <__assert_fail@plt+0x1a48>
   10f8c:	mov	r1, fp
   10f90:	mov	r0, #6
   10f94:	bl	10f10 <setlocale@plt>
   10f98:	ldr	r1, [pc, #1176]	; 11438 <__assert_fail@plt+0x4d4>
   10f9c:	ldr	r0, [pc, #1176]	; 1143c <__assert_fail@plt+0x4d8>
   10fa0:	ldr	r4, [pc, #1176]	; 11440 <__assert_fail@plt+0x4dc>
   10fa4:	bl	10f40 <bindtextdomain@plt>
   10fa8:	ldr	r0, [pc, #1164]	; 1143c <__assert_fail@plt+0x4d8>
   10fac:	bl	10dcc <textdomain@plt>
   10fb0:	ldr	r0, [pc, #1164]	; 11444 <__assert_fail@plt+0x4e0>
   10fb4:	bl	1673c <__assert_fail@plt+0x57d8>
   10fb8:	mov	r3, #0
   10fbc:	mov	r2, #75	; 0x4b
   10fc0:	cmp	r7, #1
   10fc4:	str	fp, [r4, #44]	; 0x2c
   10fc8:	str	r2, [r4, #4]
   10fcc:	strb	r3, [r4, #64]	; 0x40
   10fd0:	strb	r3, [r4, #52]	; 0x34
   10fd4:	strb	r3, [r4, #54]	; 0x36
   10fd8:	strb	r3, [r4, #53]	; 0x35
   10fdc:	str	r3, [r4, #72]	; 0x48
   10fe0:	str	r3, [r4, #40]	; 0x28
   10fe4:	str	r3, [r4, #32]
   10fe8:	ble	10ffc <__assert_fail@plt+0x98>
   10fec:	ldr	r2, [r6, #4]
   10ff0:	ldrb	r1, [r2]
   10ff4:	cmp	r1, #45	; 0x2d
   10ff8:	beq	11194 <__assert_fail@plt+0x230>
   10ffc:	str	r3, [sp, #28]
   11000:	ldr	r9, [pc, #1088]	; 11448 <__assert_fail@plt+0x4e4>
   11004:	ldr	r8, [pc, #1088]	; 1144c <__assert_fail@plt+0x4e8>
   11008:	ldr	sl, [pc, #1088]	; 11450 <__assert_fail@plt+0x4ec>
   1100c:	mov	r3, #0
   11010:	str	r3, [sp, #24]
   11014:	mov	r5, #0
   11018:	str	r5, [sp]
   1101c:	mov	r3, r9
   11020:	mov	r2, r8
   11024:	mov	r1, r6
   11028:	mov	r0, r7
   1102c:	bl	10e5c <getopt_long@plt>
   11030:	cmn	r0, #1
   11034:	beq	111bc <__assert_fail@plt+0x258>
   11038:	cmp	r0, #112	; 0x70
   1103c:	beq	110fc <__assert_fail@plt+0x198>
   11040:	ble	11064 <__assert_fail@plt+0x100>
   11044:	cmp	r0, #116	; 0x74
   11048:	beq	11188 <__assert_fail@plt+0x224>
   1104c:	ble	11098 <__assert_fail@plt+0x134>
   11050:	cmp	r0, #117	; 0x75
   11054:	bne	11084 <__assert_fail@plt+0x120>
   11058:	mov	r3, #1
   1105c:	strb	r3, [r4, #64]	; 0x40
   11060:	b	11014 <__assert_fail@plt+0xb0>
   11064:	cmn	r0, #2
   11068:	beq	11400 <__assert_fail@plt+0x49c>
   1106c:	ble	110c0 <__assert_fail@plt+0x15c>
   11070:	cmp	r0, #99	; 0x63
   11074:	bne	110ac <__assert_fail@plt+0x148>
   11078:	mov	r3, #1
   1107c:	strb	r3, [r4, #53]	; 0x35
   11080:	b	11014 <__assert_fail@plt+0xb0>
   11084:	cmp	r0, #119	; 0x77
   11088:	bne	113e8 <__assert_fail@plt+0x484>
   1108c:	ldr	r3, [sl]
   11090:	str	r3, [sp, #28]
   11094:	b	11014 <__assert_fail@plt+0xb0>
   11098:	cmp	r0, #115	; 0x73
   1109c:	bne	113e8 <__assert_fail@plt+0x484>
   110a0:	mov	r3, #1
   110a4:	strb	r3, [r4, #52]	; 0x34
   110a8:	b	11014 <__assert_fail@plt+0xb0>
   110ac:	cmp	r0, #103	; 0x67
   110b0:	bne	113e8 <__assert_fail@plt+0x484>
   110b4:	ldr	r3, [sl]
   110b8:	str	r3, [sp, #24]
   110bc:	b	11014 <__assert_fail@plt+0xb0>
   110c0:	cmn	r0, #3
   110c4:	mov	r3, r0
   110c8:	bne	113ec <__assert_fail@plt+0x488>
   110cc:	ldr	r1, [pc, #896]	; 11454 <__assert_fail@plt+0x4f0>
   110d0:	ldr	r3, [pc, #896]	; 11458 <__assert_fail@plt+0x4f4>
   110d4:	ldr	r2, [pc, #896]	; 1145c <__assert_fail@plt+0x4f8>
   110d8:	str	r5, [sp, #4]
   110dc:	ldr	r0, [r1]
   110e0:	ldr	r3, [r3]
   110e4:	ldr	r1, [pc, #884]	; 11460 <__assert_fail@plt+0x4fc>
   110e8:	str	r2, [sp]
   110ec:	ldr	r2, [pc, #880]	; 11464 <__assert_fail@plt+0x500>
   110f0:	bl	1507c <__assert_fail@plt+0x4118>
   110f4:	mov	r0, r5
   110f8:	bl	10e74 <exit@plt>
   110fc:	ldr	r3, [sl]
   11100:	str	r5, [r4, #40]	; 0x28
   11104:	mov	r5, r3
   11108:	ldrb	r2, [r3]
   1110c:	cmp	r2, #32
   11110:	bne	1112c <__assert_fail@plt+0x1c8>
   11114:	rsb	r1, r3, #1
   11118:	add	r2, r5, r1
   1111c:	ldrb	r3, [r5, #1]!
   11120:	cmp	r3, #32
   11124:	beq	11118 <__assert_fail@plt+0x1b4>
   11128:	str	r2, [r4, #40]	; 0x28
   1112c:	mov	r0, r5
   11130:	str	r5, [r4, #44]	; 0x2c
   11134:	bl	10e80 <strlen@plt>
   11138:	add	r1, r5, r0
   1113c:	cmp	r5, r1
   11140:	str	r0, [r4, #72]	; 0x48
   11144:	bcs	11174 <__assert_fail@plt+0x210>
   11148:	ldrb	r3, [r1, #-1]
   1114c:	cmp	r3, #32
   11150:	bne	11174 <__assert_fail@plt+0x210>
   11154:	sub	r3, r1, #1
   11158:	b	11168 <__assert_fail@plt+0x204>
   1115c:	ldrb	r2, [r3, #-1]!
   11160:	cmp	r2, #32
   11164:	bne	11174 <__assert_fail@plt+0x210>
   11168:	cmp	r5, r3
   1116c:	mov	r1, r3
   11170:	bne	1115c <__assert_fail@plt+0x1f8>
   11174:	sub	r5, r1, r5
   11178:	mov	r3, #0
   1117c:	str	r5, [r4, #32]
   11180:	strb	r3, [r1]
   11184:	b	11014 <__assert_fail@plt+0xb0>
   11188:	mov	r3, #1
   1118c:	strb	r3, [r4, #54]	; 0x36
   11190:	b	11014 <__assert_fail@plt+0xb0>
   11194:	ldrb	r1, [r2, #1]
   11198:	sub	r1, r1, #48	; 0x30
   1119c:	cmp	r1, #9
   111a0:	bhi	10ffc <__assert_fail@plt+0x98>
   111a4:	ldr	r3, [r6]
   111a8:	add	r2, r2, #1
   111ac:	str	r2, [sp, #28]
   111b0:	sub	r7, r7, #1
   111b4:	str	r3, [r6, #4]!
   111b8:	b	11000 <__assert_fail@plt+0x9c>
   111bc:	ldr	r8, [sp, #28]
   111c0:	cmp	r8, r5
   111c4:	beq	1136c <__assert_fail@plt+0x408>
   111c8:	mov	r2, #5
   111cc:	ldr	r1, [pc, #660]	; 11468 <__assert_fail@plt+0x504>
   111d0:	mov	r0, r5
   111d4:	bl	10da8 <dcgettext@plt>
   111d8:	ldr	r2, [pc, #652]	; 1146c <__assert_fail@plt+0x508>
   111dc:	mov	r3, #0
   111e0:	str	r5, [sp, #16]
   111e4:	strd	r2, [sp]
   111e8:	str	fp, [sp, #8]
   111ec:	mov	r3, #0
   111f0:	mov	r2, #0
   111f4:	str	r0, [sp, #12]
   111f8:	mov	r0, r8
   111fc:	bl	15558 <__assert_fail@plt+0x45f4>
   11200:	ldr	r3, [sp, #24]
   11204:	cmp	r3, r5
   11208:	mov	r8, r0
   1120c:	str	r0, [r4, #4]
   11210:	beq	11378 <__assert_fail@plt+0x414>
   11214:	mov	r2, #5
   11218:	ldr	r1, [pc, #584]	; 11468 <__assert_fail@plt+0x504>
   1121c:	mov	r0, r5
   11220:	bl	10da8 <dcgettext@plt>
   11224:	asr	r9, r8, #31
   11228:	str	r5, [sp, #16]
   1122c:	str	fp, [sp, #8]
   11230:	strd	r8, [sp]
   11234:	mov	r2, #0
   11238:	mov	r3, #0
   1123c:	str	r0, [sp, #12]
   11240:	ldr	r0, [sp, #24]
   11244:	bl	15558 <__assert_fail@plt+0x45f4>
   11248:	str	r0, [r4, #16]
   1124c:	ldr	r5, [pc, #540]	; 11470 <__assert_fail@plt+0x50c>
   11250:	ldr	r3, [r5]
   11254:	cmp	r3, r7
   11258:	beq	11308 <__assert_fail@plt+0x3a4>
   1125c:	movge	fp, #1
   11260:	bge	11318 <__assert_fail@plt+0x3b4>
   11264:	ldr	r9, [pc, #520]	; 11474 <__assert_fail@plt+0x510>
   11268:	ldr	sl, [pc, #520]	; 11478 <__assert_fail@plt+0x514>
   1126c:	mov	fp, #1
   11270:	b	11294 <__assert_fail@plt+0x330>
   11274:	ldr	r3, [pc, #512]	; 1147c <__assert_fail@plt+0x518>
   11278:	ldr	r0, [r3]
   1127c:	bl	12034 <__assert_fail@plt+0x10d0>
   11280:	ldr	r3, [r5]
   11284:	add	r3, r3, #1
   11288:	cmp	r3, r7
   1128c:	str	r3, [r5]
   11290:	bge	11318 <__assert_fail@plt+0x3b4>
   11294:	ldr	r4, [r6, r3, lsl #2]
   11298:	mov	r1, r9
   1129c:	mov	r0, r4
   112a0:	bl	10d24 <strcmp@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	11274 <__assert_fail@plt+0x310>
   112ac:	mov	r1, sl
   112b0:	mov	r0, r4
   112b4:	bl	10f34 <fopen64@plt>
   112b8:	subs	r8, r0, #0
   112bc:	beq	11324 <__assert_fail@plt+0x3c0>
   112c0:	bl	12034 <__assert_fail@plt+0x10d0>
   112c4:	mov	r0, r8
   112c8:	bl	15f68 <__assert_fail@plt+0x5004>
   112cc:	cmn	r0, #1
   112d0:	bne	11280 <__assert_fail@plt+0x31c>
   112d4:	bl	10e98 <__errno_location@plt>
   112d8:	mov	fp, #0
   112dc:	mov	r2, r4
   112e0:	mov	r1, #3
   112e4:	ldr	r4, [r0]
   112e8:	mov	r0, fp
   112ec:	bl	14a44 <__assert_fail@plt+0x3ae0>
   112f0:	mov	r1, r4
   112f4:	ldr	r2, [pc, #388]	; 11480 <__assert_fail@plt+0x51c>
   112f8:	mov	r3, r0
   112fc:	mov	r0, fp
   11300:	bl	10e20 <error@plt>
   11304:	b	11280 <__assert_fail@plt+0x31c>
   11308:	ldr	r3, [pc, #364]	; 1147c <__assert_fail@plt+0x518>
   1130c:	mov	fp, #1
   11310:	ldr	r0, [r3]
   11314:	bl	12034 <__assert_fail@plt+0x10d0>
   11318:	eor	r0, fp, #1
   1131c:	add	sp, sp, #36	; 0x24
   11320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11324:	bl	10e98 <__errno_location@plt>
   11328:	mov	r2, #5
   1132c:	ldr	r1, [pc, #336]	; 11484 <__assert_fail@plt+0x520>
   11330:	mov	fp, r8
   11334:	ldr	r3, [r0]
   11338:	mov	r0, r8
   1133c:	str	r3, [sp, #24]
   11340:	bl	10da8 <dcgettext@plt>
   11344:	mov	r1, r4
   11348:	str	r0, [sp, #28]
   1134c:	mov	r0, #4
   11350:	bl	14968 <__assert_fail@plt+0x3a04>
   11354:	ldr	r2, [sp, #28]
   11358:	ldr	r1, [sp, #24]
   1135c:	mov	r3, r0
   11360:	mov	r0, r8
   11364:	bl	10e20 <error@plt>
   11368:	b	11280 <__assert_fail@plt+0x31c>
   1136c:	ldr	r3, [sp, #24]
   11370:	cmp	r3, #0
   11374:	bne	1139c <__assert_fail@plt+0x438>
   11378:	ldr	r2, [r4, #4]
   1137c:	mov	r3, #187	; 0xbb
   11380:	ldr	r0, [pc, #256]	; 11488 <__assert_fail@plt+0x524>
   11384:	mul	r3, r3, r2
   11388:	smull	r0, r1, r3, r0
   1138c:	asr	r3, r3, #31
   11390:	rsb	r3, r3, r1, asr #6
   11394:	str	r3, [r4, #16]
   11398:	b	1124c <__assert_fail@plt+0x2e8>
   1139c:	ldr	r5, [sp, #28]
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #188]	; 11468 <__assert_fail@plt+0x504>
   113a8:	mov	r0, r5
   113ac:	bl	10da8 <dcgettext@plt>
   113b0:	mov	r2, #75	; 0x4b
   113b4:	mov	r3, #0
   113b8:	str	r5, [sp, #16]
   113bc:	strd	r2, [sp]
   113c0:	str	fp, [sp, #8]
   113c4:	mov	r3, #0
   113c8:	mov	r2, #0
   113cc:	str	r0, [sp, #12]
   113d0:	ldr	r0, [sp, #24]
   113d4:	bl	15558 <__assert_fail@plt+0x45f4>
   113d8:	add	r3, r0, #10
   113dc:	str	r0, [r4, #16]
   113e0:	str	r3, [r4, #4]
   113e4:	b	1124c <__assert_fail@plt+0x2e8>
   113e8:	mov	r3, r0
   113ec:	sub	r2, r3, #48	; 0x30
   113f0:	cmp	r2, #9
   113f4:	bls	11408 <__assert_fail@plt+0x4a4>
   113f8:	mov	r0, #1
   113fc:	bl	1252c <__assert_fail@plt+0x15c8>
   11400:	mov	r0, r5
   11404:	bl	1252c <__assert_fail@plt+0x15c8>
   11408:	mov	r2, #5
   1140c:	ldr	r1, [pc, #120]	; 1148c <__assert_fail@plt+0x528>
   11410:	mov	r0, #0
   11414:	str	r3, [sp, #24]
   11418:	bl	10da8 <dcgettext@plt>
   1141c:	mov	r1, #0
   11420:	ldr	r3, [sp, #24]
   11424:	mov	r2, r0
   11428:	mov	r0, r1
   1142c:	bl	10e20 <error@plt>
   11430:	b	113f8 <__assert_fail@plt+0x494>
   11434:	andeq	r6, r1, r4, asr r9
   11438:	andeq	r6, r1, ip, ror #26
   1143c:	andeq	r6, r1, r0, asr #25
   11440:	andeq	r8, r2, r8, asr r1
   11444:	muleq	r1, ip, r8
   11448:	andeq	r6, r1, r8, lsr #15
   1144c:	strdeq	r6, [r1], -r0
   11450:	andeq	r8, r2, r0, asr r1
   11454:	andeq	r8, r2, ip, asr #2
   11458:	andeq	r8, r2, r8, ror #1
   1145c:	andeq	r6, r1, r0, ror #27
   11460:	andeq	r6, r1, ip, ror r8
   11464:			; <UNDEFINED> instruction: 0x00016cbc
   11468:	andeq	r6, r1, r8, lsl #28
   1146c:	andeq	r0, r0, r4, asr #19
   11470:	andeq	r8, r2, r8, lsr r1
   11474:	andeq	r6, r1, r8, lsl lr
   11478:	andeq	r6, r1, ip, lsl lr
   1147c:	andeq	r8, r2, r8, asr #2
   11480:	andeq	r6, r1, r0, lsr #30
   11484:	andeq	r6, r1, r0, lsr #28
   11488:	mvnpl	r8, pc, lsl r5
   1148c:	andeq	r6, r1, r0, lsl #27
   11490:	mov	fp, #0
   11494:	mov	lr, #0
   11498:	pop	{r1}		; (ldr r1, [sp], #4)
   1149c:	mov	r2, sp
   114a0:	push	{r2}		; (str r2, [sp, #-4]!)
   114a4:	push	{r0}		; (str r0, [sp, #-4]!)
   114a8:	ldr	ip, [pc, #16]	; 114c0 <__assert_fail@plt+0x55c>
   114ac:	push	{ip}		; (str ip, [sp, #-4]!)
   114b0:	ldr	r0, [pc, #12]	; 114c4 <__assert_fail@plt+0x560>
   114b4:	ldr	r3, [pc, #12]	; 114c8 <__assert_fail@plt+0x564>
   114b8:	bl	10e38 <__libc_start_main@plt>
   114bc:	bl	10f58 <abort@plt>
   114c0:	andeq	r6, r1, r8, lsr r7
   114c4:	andeq	r0, r1, r0, ror pc
   114c8:	ldrdeq	r6, [r1], -r8
   114cc:	ldr	r3, [pc, #20]	; 114e8 <__assert_fail@plt+0x584>
   114d0:	ldr	r2, [pc, #20]	; 114ec <__assert_fail@plt+0x588>
   114d4:	add	r3, pc, r3
   114d8:	ldr	r2, [r3, r2]
   114dc:	cmp	r2, #0
   114e0:	bxeq	lr
   114e4:	b	10e50 <__gmon_start__@plt>
   114e8:	andeq	r6, r1, r4, lsr #22
   114ec:	ldrdeq	r0, [r0], -ip
   114f0:	ldr	r0, [pc, #24]	; 11510 <__assert_fail@plt+0x5ac>
   114f4:	ldr	r3, [pc, #24]	; 11514 <__assert_fail@plt+0x5b0>
   114f8:	cmp	r3, r0
   114fc:	bxeq	lr
   11500:	ldr	r3, [pc, #16]	; 11518 <__assert_fail@plt+0x5b4>
   11504:	cmp	r3, #0
   11508:	bxeq	lr
   1150c:	bx	r3
   11510:	andeq	r8, r2, r0, lsr r1
   11514:	andeq	r8, r2, r0, lsr r1
   11518:	andeq	r0, r0, r0
   1151c:	ldr	r0, [pc, #36]	; 11548 <__assert_fail@plt+0x5e4>
   11520:	ldr	r1, [pc, #36]	; 1154c <__assert_fail@plt+0x5e8>
   11524:	sub	r1, r1, r0
   11528:	asr	r1, r1, #2
   1152c:	add	r1, r1, r1, lsr #31
   11530:	asrs	r1, r1, #1
   11534:	bxeq	lr
   11538:	ldr	r3, [pc, #16]	; 11550 <__assert_fail@plt+0x5ec>
   1153c:	cmp	r3, #0
   11540:	bxeq	lr
   11544:	bx	r3
   11548:	andeq	r8, r2, r0, lsr r1
   1154c:	andeq	r8, r2, r0, lsr r1
   11550:	andeq	r0, r0, r0
   11554:	push	{r4, lr}
   11558:	ldr	r4, [pc, #24]	; 11578 <__assert_fail@plt+0x614>
   1155c:	ldrb	r3, [r4]
   11560:	cmp	r3, #0
   11564:	popne	{r4, pc}
   11568:	bl	114f0 <__assert_fail@plt+0x58c>
   1156c:	mov	r3, #1
   11570:	strb	r3, [r4]
   11574:	pop	{r4, pc}
   11578:	andeq	r8, r2, r4, asr r1
   1157c:	b	1151c <__assert_fail@plt+0x5b8>
   11580:	ldr	r3, [pc, #480]	; 11768 <__assert_fail@plt+0x804>
   11584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11588:	mov	r2, #0
   1158c:	ldm	r3, {r5, r8}
   11590:	ldr	r7, [pc, #468]	; 1176c <__assert_fail@plt+0x808>
   11594:	sub	sp, sp, #20
   11598:	sub	r4, r5, #28
   1159c:	str	r2, [r5, #20]
   115a0:	ldr	r2, [r5, #4]
   115a4:	cmp	r4, r7
   115a8:	str	r2, [sp, #8]
   115ac:	str	r8, [r5, #4]
   115b0:	bcc	11700 <__assert_fail@plt+0x79c>
   115b4:	ldr	r2, [r3, #8]
   115b8:	ldr	r9, [r3, #16]
   115bc:	ldr	sl, [r3, #20]
   115c0:	ldr	r1, [r3, #12]
   115c4:	str	r1, [sp]
   115c8:	ldr	ip, [sp]
   115cc:	ldr	r3, [r4, #4]
   115d0:	cmp	r4, r7
   115d4:	movne	ip, r2
   115d8:	add	ip, r3, ip
   115dc:	mov	r0, r4
   115e0:	mvn	r6, #-2147483648	; 0x80000000
   115e4:	b	11618 <__assert_fail@plt+0x6b4>
   115e8:	cmp	r1, r6
   115ec:	movlt	r6, r1
   115f0:	strlt	r0, [r4, #24]
   115f4:	strlt	ip, [r4, #16]
   115f8:	cmp	r5, r0
   115fc:	beq	11698 <__assert_fail@plt+0x734>
   11600:	ldr	r1, [r0, #-20]	; 0xffffffec
   11604:	ldr	lr, [r0, #4]
   11608:	add	r1, r1, lr
   1160c:	add	ip, ip, r1
   11610:	cmp	r8, ip
   11614:	ble	11698 <__assert_fail@plt+0x734>
   11618:	add	r0, r0, #28
   1161c:	cmp	r5, r0
   11620:	moveq	r1, #0
   11624:	beq	11664 <__assert_fail@plt+0x700>
   11628:	sub	r1, r9, ip
   1162c:	ldr	lr, [r0, #24]
   11630:	mul	r1, r1, r1
   11634:	cmp	r5, lr
   11638:	add	r1, r1, r1, lsl #2
   1163c:	add	r1, r1, r1, lsl #2
   11640:	lsl	r1, r1, #2
   11644:	beq	11664 <__assert_fail@plt+0x700>
   11648:	ldr	lr, [r0, #16]
   1164c:	sub	lr, ip, lr
   11650:	mul	lr, lr, lr
   11654:	add	lr, lr, lr, lsl #2
   11658:	add	lr, lr, lr, lsl #2
   1165c:	lsl	lr, lr, #2
   11660:	add	r1, r1, lr, asr #1
   11664:	ldr	lr, [r0, #20]
   11668:	cmp	r4, r7
   1166c:	add	r1, r1, lr
   11670:	bne	115e8 <__assert_fail@plt+0x684>
   11674:	cmp	sl, #0
   11678:	ble	115e8 <__assert_fail@plt+0x684>
   1167c:	sub	lr, ip, sl
   11680:	mul	lr, lr, lr
   11684:	add	lr, lr, lr, lsl #2
   11688:	add	lr, lr, lr, lsl #2
   1168c:	lsl	lr, lr, #2
   11690:	add	r1, r1, lr, asr #1
   11694:	b	115e8 <__assert_fail@plt+0x684>
   11698:	cmp	r4, r7
   1169c:	bls	11734 <__assert_fail@plt+0x7d0>
   116a0:	ldrb	r1, [r4, #-16]
   116a4:	tst	r1, #2
   116a8:	beq	11710 <__assert_fail@plt+0x7ac>
   116ac:	tst	r1, #8
   116b0:	ldr	r1, [pc, #184]	; 11770 <__assert_fail@plt+0x80c>
   116b4:	movne	fp, #2400	; 0x960
   116b8:	moveq	fp, r1
   116bc:	ldrb	r1, [r4, #12]
   116c0:	tst	r1, #1
   116c4:	subne	fp, fp, #1600	; 0x640
   116c8:	bne	116ec <__assert_fail@plt+0x788>
   116cc:	tst	r1, #8
   116d0:	beq	116ec <__assert_fail@plt+0x788>
   116d4:	add	r1, r3, #2
   116d8:	ldr	r0, [pc, #148]	; 11774 <__assert_fail@plt+0x810>
   116dc:	str	r2, [sp, #4]
   116e0:	bl	16488 <__assert_fail@plt+0x5524>
   116e4:	ldr	r2, [sp, #4]
   116e8:	add	fp, fp, r0
   116ec:	add	r6, r6, fp
   116f0:	str	r6, [r4, #20]
   116f4:	sub	r4, r4, #28
   116f8:	cmp	r4, r7
   116fc:	bcs	115c8 <__assert_fail@plt+0x664>
   11700:	ldr	r3, [sp, #8]
   11704:	str	r3, [r5, #4]
   11708:	add	sp, sp, #20
   1170c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11710:	tst	r1, #4
   11714:	ldrne	fp, [pc, #92]	; 11778 <__assert_fail@plt+0x814>
   11718:	bne	116bc <__assert_fail@plt+0x758>
   1171c:	ldr	r1, [pc, #88]	; 1177c <__assert_fail@plt+0x818>
   11720:	cmp	r4, r1
   11724:	bls	11734 <__assert_fail@plt+0x7d0>
   11728:	ldrb	r1, [r4, #-44]	; 0xffffffd4
   1172c:	tst	r1, #8
   11730:	bne	1173c <__assert_fail@plt+0x7d8>
   11734:	ldr	fp, [pc, #68]	; 11780 <__assert_fail@plt+0x81c>
   11738:	b	116bc <__assert_fail@plt+0x758>
   1173c:	ldr	r1, [r4, #-24]	; 0xffffffe8
   11740:	ldr	r0, [pc, #60]	; 11784 <__assert_fail@plt+0x820>
   11744:	add	r1, r1, #2
   11748:	str	r2, [sp, #12]
   1174c:	str	r3, [sp, #4]
   11750:	bl	16488 <__assert_fail@plt+0x5524>
   11754:	ldr	r3, [sp, #4]
   11758:	ldr	r2, [sp, #12]
   1175c:	add	fp, r0, #4864	; 0x1300
   11760:	add	fp, fp, #36	; 0x24
   11764:	b	116bc <__assert_fail@plt+0x758>
   11768:	andeq	r8, r2, r8, asr r1
   1176c:	andeq	r8, r2, r4, lsr #3
   11770:	andeq	r9, r5, r4, ror #2
   11774:	andeq	r5, r0, r4, ror #15
   11778:	andeq	r0, r0, r4, ror #25
   1177c:	andeq	r8, r2, r0, asr #3
   11780:	andeq	r1, r0, r4, lsr #6
   11784:	andeq	r9, r0, r0, asr #24
   11788:	push	{r4, r5, r6, lr}
   1178c:	mov	r4, r0
   11790:	ldr	r5, [pc, #112]	; 11808 <__assert_fail@plt+0x8a4>
   11794:	mov	r0, r1
   11798:	mov	r6, #1
   1179c:	b	117e4 <__assert_fail@plt+0x880>
   117a0:	cmp	r0, #9
   117a4:	popne	{r4, r5, r6, pc}
   117a8:	ldr	r3, [r5, #24]
   117ac:	strb	r6, [r5, #28]
   117b0:	add	r2, r3, #7
   117b4:	cmp	r3, #0
   117b8:	movlt	r3, r2
   117bc:	bic	r3, r3, #7
   117c0:	add	r3, r3, #8
   117c4:	str	r3, [r5, #24]
   117c8:	ldr	r3, [r4, #4]
   117cc:	ldr	r2, [r4, #8]
   117d0:	add	r1, r3, #1
   117d4:	cmp	r3, r2
   117d8:	strcc	r1, [r4, #4]
   117dc:	ldrbcc	r0, [r3]
   117e0:	bcs	117fc <__assert_fail@plt+0x898>
   117e4:	cmp	r0, #32
   117e8:	bne	117a0 <__assert_fail@plt+0x83c>
   117ec:	ldr	r3, [r5, #24]
   117f0:	add	r3, r3, #1
   117f4:	str	r3, [r5, #24]
   117f8:	b	117c8 <__assert_fail@plt+0x864>
   117fc:	mov	r0, r4
   11800:	bl	10ef8 <__uflow@plt>
   11804:	b	117e4 <__assert_fail@plt+0x880>
   11808:	andeq	r8, r2, r8, asr r1
   1180c:	push	{r4, r5, r6, lr}
   11810:	mov	r2, #0
   11814:	ldr	r5, [pc, #220]	; 118f8 <__assert_fail@plt+0x994>
   11818:	ldr	r3, [r0, #4]
   1181c:	ldr	r1, [r0, #8]
   11820:	mov	r4, r0
   11824:	cmp	r3, r1
   11828:	str	r2, [r5, #24]
   1182c:	bcs	118ec <__assert_fail@plt+0x988>
   11830:	add	r2, r3, #1
   11834:	str	r2, [r0, #4]
   11838:	ldrb	r1, [r3]
   1183c:	mov	r0, r4
   11840:	bl	11788 <__assert_fail@plt+0x824>
   11844:	ldr	r3, [r5, #32]
   11848:	cmp	r3, #0
   1184c:	bne	11868 <__assert_fail@plt+0x904>
   11850:	ldr	r3, [r5, #24]
   11854:	ldr	r2, [r5, #40]	; 0x28
   11858:	cmp	r3, r2
   1185c:	movge	r3, r2
   11860:	str	r3, [r5, #36]	; 0x24
   11864:	pop	{r4, r5, r6, pc}
   11868:	ldr	r6, [r5, #44]	; 0x2c
   1186c:	ldr	r3, [r5, #24]
   11870:	ldrb	r2, [r6]
   11874:	str	r3, [r5, #36]	; 0x24
   11878:	cmp	r2, #0
   1187c:	beq	118dc <__assert_fail@plt+0x978>
   11880:	cmp	r0, r2
   11884:	beq	118a4 <__assert_fail@plt+0x940>
   11888:	pop	{r4, r5, r6, pc}
   1188c:	ldrb	r3, [r6, #1]!
   11890:	cmp	r3, #0
   11894:	beq	118dc <__assert_fail@plt+0x978>
   11898:	cmp	r3, r0
   1189c:	popne	{r4, r5, r6, pc}
   118a0:	ldr	r3, [r5, #24]
   118a4:	ldr	r2, [r4, #4]
   118a8:	ldr	r1, [r4, #8]
   118ac:	add	r0, r2, #1
   118b0:	cmp	r2, r1
   118b4:	add	r3, r3, #1
   118b8:	strcc	r0, [r4, #4]
   118bc:	str	r3, [r5, #24]
   118c0:	ldrbcc	r0, [r2]
   118c4:	bcc	1188c <__assert_fail@plt+0x928>
   118c8:	mov	r0, r4
   118cc:	bl	10ef8 <__uflow@plt>
   118d0:	ldrb	r3, [r6, #1]!
   118d4:	cmp	r3, #0
   118d8:	bne	11898 <__assert_fail@plt+0x934>
   118dc:	mov	r1, r0
   118e0:	mov	r0, r4
   118e4:	pop	{r4, r5, r6, lr}
   118e8:	b	11788 <__assert_fail@plt+0x824>
   118ec:	bl	10ef8 <__uflow@plt>
   118f0:	mov	r1, r0
   118f4:	b	1183c <__assert_fail@plt+0x8d8>
   118f8:	andeq	r8, r2, r8, asr r1
   118fc:	push	{r4, r5, r6, r7, r8, lr}
   11900:	ldr	r4, [pc, #232]	; 119f0 <__assert_fail@plt+0xa8c>
   11904:	ldrb	r2, [r4, #28]
   11908:	ldr	r3, [r4, #48]	; 0x30
   1190c:	cmp	r2, #0
   11910:	add	r5, r3, r0
   11914:	beq	11990 <__assert_fail@plt+0xa2c>
   11918:	cmp	r5, #0
   1191c:	add	r7, r5, #7
   11920:	movge	r7, r5
   11924:	add	r2, r3, #1
   11928:	asr	r7, r7, #3
   1192c:	lsl	r1, r7, #3
   11930:	cmp	r2, r1
   11934:	bge	11990 <__assert_fail@plt+0xa2c>
   11938:	cmp	r3, r1
   1193c:	bge	11990 <__assert_fail@plt+0xa2c>
   11940:	ldr	r6, [pc, #172]	; 119f4 <__assert_fail@plt+0xa90>
   11944:	mov	r8, #9
   11948:	ldr	r0, [r6]
   1194c:	ldr	r3, [r0, #20]
   11950:	ldr	r2, [r0, #24]
   11954:	add	r1, r3, #1
   11958:	cmp	r3, r2
   1195c:	strcc	r1, [r0, #20]
   11960:	strbcc	r8, [r3]
   11964:	bcs	119e4 <__assert_fail@plt+0xa80>
   11968:	ldr	r3, [r4, #48]	; 0x30
   1196c:	cmp	r3, #0
   11970:	add	r2, r3, #7
   11974:	movlt	r3, r2
   11978:	asr	r3, r3, #3
   1197c:	add	r3, r3, #1
   11980:	cmp	r7, r3
   11984:	lsl	r3, r3, #3
   11988:	str	r3, [r4, #48]	; 0x30
   1198c:	bgt	11948 <__assert_fail@plt+0x9e4>
   11990:	cmp	r5, r3
   11994:	pople	{r4, r5, r6, r7, r8, pc}
   11998:	ldr	r6, [pc, #84]	; 119f4 <__assert_fail@plt+0xa90>
   1199c:	mov	r7, #32
   119a0:	b	119b8 <__assert_fail@plt+0xa54>
   119a4:	ldr	r3, [r4, #48]	; 0x30
   119a8:	add	r3, r3, #1
   119ac:	cmp	r3, r5
   119b0:	str	r3, [r4, #48]	; 0x30
   119b4:	popge	{r4, r5, r6, r7, r8, pc}
   119b8:	ldr	r0, [r6]
   119bc:	ldr	r3, [r0, #20]
   119c0:	ldr	r2, [r0, #24]
   119c4:	add	r1, r3, #1
   119c8:	cmp	r3, r2
   119cc:	strcc	r1, [r0, #20]
   119d0:	strbcc	r7, [r3]
   119d4:	bcc	119a4 <__assert_fail@plt+0xa40>
   119d8:	mov	r1, #32
   119dc:	bl	10f04 <__overflow@plt>
   119e0:	b	119a4 <__assert_fail@plt+0xa40>
   119e4:	mov	r1, #9
   119e8:	bl	10f04 <__overflow@plt>
   119ec:	b	11968 <__assert_fail@plt+0xa04>
   119f0:	andeq	r8, r2, r8, asr r1
   119f4:	andeq	r8, r2, ip, asr #2
   119f8:	ldr	r3, [pc, #128]	; 11a80 <__assert_fail@plt+0xb1c>
   119fc:	ldrb	r2, [r3, #52]	; 0x34
   11a00:	cmp	r2, #0
   11a04:	bne	11a1c <__assert_fail@plt+0xab8>
   11a08:	ldrb	r2, [r3, #53]	; 0x35
   11a0c:	cmp	r2, #0
   11a10:	beq	11a28 <__assert_fail@plt+0xac4>
   11a14:	cmp	r0, #0
   11a18:	bne	11a54 <__assert_fail@plt+0xaf0>
   11a1c:	ldr	r2, [r3, #12]
   11a20:	str	r2, [r3, #8]
   11a24:	bx	lr
   11a28:	ldrb	r1, [r3, #54]	; 0x36
   11a2c:	ldr	r2, [r3, #12]
   11a30:	cmp	r1, #0
   11a34:	beq	11a20 <__assert_fail@plt+0xabc>
   11a38:	cmp	r0, #0
   11a3c:	beq	11a60 <__assert_fail@plt+0xafc>
   11a40:	ldr	r1, [r3, #24]
   11a44:	cmp	r1, r2
   11a48:	beq	11a60 <__assert_fail@plt+0xafc>
   11a4c:	str	r1, [r3, #8]
   11a50:	bx	lr
   11a54:	ldr	r2, [r3, #24]
   11a58:	str	r2, [r3, #8]
   11a5c:	bx	lr
   11a60:	ldr	r1, [r3, #8]
   11a64:	cmp	r1, r2
   11a68:	bxne	lr
   11a6c:	cmp	r2, #0
   11a70:	moveq	r2, #3
   11a74:	movne	r2, #0
   11a78:	str	r2, [r3, #8]
   11a7c:	bx	lr
   11a80:	andeq	r8, r2, r8, asr r1
   11a84:	push	{r4, r5, r6, r7, r8, lr}
   11a88:	ldr	r5, [r1]
   11a8c:	cmp	r5, #0
   11a90:	beq	11ad4 <__assert_fail@plt+0xb70>
   11a94:	ldr	r6, [pc, #84]	; 11af0 <__assert_fail@plt+0xb8c>
   11a98:	mov	r7, r1
   11a9c:	mov	r4, r0
   11aa0:	add	r5, r0, r5
   11aa4:	ldr	r0, [r6]
   11aa8:	ldrb	r1, [r4], #1
   11aac:	ldr	r3, [r0, #20]
   11ab0:	ldr	r2, [r0, #24]
   11ab4:	add	ip, r3, #1
   11ab8:	cmp	r3, r2
   11abc:	strcc	ip, [r0, #20]
   11ac0:	strbcc	r1, [r3]
   11ac4:	bcs	11ae8 <__assert_fail@plt+0xb84>
   11ac8:	cmp	r4, r5
   11acc:	bne	11aa4 <__assert_fail@plt+0xb40>
   11ad0:	ldr	r5, [r7]
   11ad4:	ldr	r2, [pc, #24]	; 11af4 <__assert_fail@plt+0xb90>
   11ad8:	ldr	r3, [r2, #48]	; 0x30
   11adc:	add	r5, r3, r5
   11ae0:	str	r5, [r2, #48]	; 0x30
   11ae4:	pop	{r4, r5, r6, r7, r8, pc}
   11ae8:	bl	10f04 <__overflow@plt>
   11aec:	b	11ac8 <__assert_fail@plt+0xb64>
   11af0:	andeq	r8, r2, ip, asr #2
   11af4:	andeq	r8, r2, r8, asr r1
   11af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11afc:	mov	r3, #0
   11b00:	ldr	r6, [pc, #236]	; 11bf4 <__assert_fail@plt+0xc90>
   11b04:	ldr	r8, [pc, #236]	; 11bf8 <__assert_fail@plt+0xc94>
   11b08:	mov	r7, r0
   11b0c:	ldr	r0, [r6, #56]	; 0x38
   11b10:	mov	r4, r1
   11b14:	str	r3, [r6, #48]	; 0x30
   11b18:	bl	118fc <__assert_fail@plt+0x998>
   11b1c:	ldr	r1, [r8]
   11b20:	ldr	r0, [r6, #44]	; 0x2c
   11b24:	bl	10d0c <fputs_unlocked@plt>
   11b28:	ldr	r3, [r6, #48]	; 0x30
   11b2c:	ldr	r2, [r6, #32]
   11b30:	add	r3, r3, r2
   11b34:	sub	r0, r4, r3
   11b38:	str	r3, [r6, #48]	; 0x30
   11b3c:	bl	118fc <__assert_fail@plt+0x998>
   11b40:	ldr	r5, [r7, #24]
   11b44:	sub	r9, r5, #28
   11b48:	cmp	r7, r9
   11b4c:	beq	11bac <__assert_fail@plt+0xc48>
   11b50:	add	r4, r7, #4
   11b54:	mov	r1, r4
   11b58:	ldr	r0, [r4, #-4]
   11b5c:	bl	11a84 <__assert_fail@plt+0xb20>
   11b60:	ldr	r0, [r4, #4]
   11b64:	bl	118fc <__assert_fail@plt+0x998>
   11b68:	add	r2, r4, #24
   11b6c:	cmp	r9, r2
   11b70:	add	r4, r4, #28
   11b74:	bne	11b54 <__assert_fail@plt+0xbf0>
   11b78:	sub	r3, r5, r7
   11b7c:	sub	r3, r3, #56	; 0x38
   11b80:	lsr	r3, r3, #2
   11b84:	rsb	r2, r3, r3, lsl #3
   11b88:	add	r2, r3, r2, lsl #4
   11b8c:	add	r2, r3, r2, lsl #2
   11b90:	rsb	r2, r2, r2, lsl #5
   11b94:	add	r2, r2, r2, lsl #15
   11b98:	add	r3, r3, r2, lsl #1
   11b9c:	bic	r3, r3, #-1073741824	; 0xc0000000
   11ba0:	add	r3, r3, #1
   11ba4:	rsb	r3, r3, r3, lsl #3
   11ba8:	add	r9, r7, r3, lsl #2
   11bac:	mov	r1, r9
   11bb0:	ldr	r0, [r1], #4
   11bb4:	bl	11a84 <__assert_fail@plt+0xb20>
   11bb8:	ldr	r0, [r8]
   11bbc:	ldr	r1, [r6, #48]	; 0x30
   11bc0:	ldr	r3, [r0, #20]
   11bc4:	ldr	r2, [r0, #24]
   11bc8:	str	r1, [r6, #20]
   11bcc:	cmp	r3, r2
   11bd0:	bcs	11be8 <__assert_fail@plt+0xc84>
   11bd4:	add	r1, r3, #1
   11bd8:	mov	r2, #10
   11bdc:	str	r1, [r0, #20]
   11be0:	strb	r2, [r3]
   11be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11be8:	mov	r1, #10
   11bec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bf0:	b	10f04 <__overflow@plt>
   11bf4:	andeq	r8, r2, r8, asr r1
   11bf8:	andeq	r8, r2, ip, asr #2
   11bfc:	push	{r4, r5, r6, lr}
   11c00:	mov	r5, r0
   11c04:	ldr	r6, [pc, #52]	; 11c40 <__assert_fail@plt+0xcdc>
   11c08:	ldr	r4, [pc, #52]	; 11c44 <__assert_fail@plt+0xce0>
   11c0c:	ldr	r1, [r6, #12]
   11c10:	mov	r0, r4
   11c14:	bl	11af8 <__assert_fail@plt+0xb94>
   11c18:	ldr	r4, [r4, #24]
   11c1c:	cmp	r4, r5
   11c20:	popeq	{r4, r5, r6, pc}
   11c24:	mov	r0, r4
   11c28:	ldr	r1, [r6, #8]
   11c2c:	bl	11af8 <__assert_fail@plt+0xb94>
   11c30:	ldr	r4, [r4, #24]
   11c34:	cmp	r5, r4
   11c38:	bne	11c24 <__assert_fail@plt+0xcc0>
   11c3c:	pop	{r4, r5, r6, pc}
   11c40:	andeq	r8, r2, r8, asr r1
   11c44:	andeq	r8, r2, r4, lsr #3
   11c48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c4c:	ldr	r5, [pc, #304]	; 11d84 <__assert_fail@plt+0xe20>
   11c50:	ldr	r6, [pc, #304]	; 11d88 <__assert_fail@plt+0xe24>
   11c54:	ldr	r7, [r5]
   11c58:	cmp	r7, r6
   11c5c:	beq	11d54 <__assert_fail@plt+0xdf0>
   11c60:	bl	11580 <__assert_fail@plt+0x61c>
   11c64:	ldr	r1, [r6, #24]
   11c68:	cmp	r7, r1
   11c6c:	beq	11d7c <__assert_fail@plt+0xe18>
   11c70:	ldr	r2, [r1, #20]
   11c74:	mov	r4, r7
   11c78:	mvn	r3, #-2147483648	; 0x80000000
   11c7c:	ldr	ip, [r1, #24]
   11c80:	ldr	r0, [ip, #20]
   11c84:	sub	r2, r2, r0
   11c88:	cmp	r2, r3
   11c8c:	movlt	r3, r2
   11c90:	movlt	r4, r1
   11c94:	cmn	r3, #-2147483638	; 0x8000000a
   11c98:	addle	r3, r3, #9
   11c9c:	cmp	r7, ip
   11ca0:	mov	r1, ip
   11ca4:	mov	r2, r0
   11ca8:	bne	11c7c <__assert_fail@plt+0xd18>
   11cac:	mov	r0, r4
   11cb0:	bl	11bfc <__assert_fail@plt+0xc98>
   11cb4:	ldr	r8, [pc, #208]	; 11d8c <__assert_fail@plt+0xe28>
   11cb8:	ldr	r2, [r4]
   11cbc:	ldr	r9, [r5, #60]	; 0x3c
   11cc0:	mov	r1, r2
   11cc4:	ldr	r3, [pc, #196]	; 11d90 <__assert_fail@plt+0xe2c>
   11cc8:	sub	r2, r9, r2
   11ccc:	mov	r0, r8
   11cd0:	bl	10d48 <__memmove_chk@plt>
   11cd4:	ldr	r3, [r4]
   11cd8:	ldr	r7, [r5]
   11cdc:	sub	r0, r8, r3
   11ce0:	add	r9, r9, r0
   11ce4:	cmp	r7, r4
   11ce8:	str	r9, [r5, #60]	; 0x3c
   11cec:	bcc	11d0c <__assert_fail@plt+0xda8>
   11cf0:	add	r2, r4, #28
   11cf4:	b	11cfc <__assert_fail@plt+0xd98>
   11cf8:	ldr	r3, [r2], #28
   11cfc:	add	r3, r3, r0
   11d00:	cmp	r2, r7
   11d04:	str	r3, [r2, #-28]	; 0xffffffe4
   11d08:	bls	11cf8 <__assert_fail@plt+0xd94>
   11d0c:	sub	r2, r7, r4
   11d10:	mov	r1, r4
   11d14:	asr	r2, r2, #2
   11d18:	sub	r4, r4, r6
   11d1c:	add	ip, r2, r2, lsl #3
   11d20:	ldr	r3, [pc, #108]	; 11d94 <__assert_fail@plt+0xe30>
   11d24:	add	ip, ip, ip, lsl #6
   11d28:	ldr	r0, [pc, #88]	; 11d88 <__assert_fail@plt+0xe24>
   11d2c:	add	ip, r2, ip, lsl #3
   11d30:	sub	r4, r7, r4
   11d34:	add	ip, ip, ip, lsl #15
   11d38:	add	r2, r2, ip, lsl #3
   11d3c:	rsb	r2, r2, #1
   11d40:	rsb	r2, r2, r2, lsl #3
   11d44:	lsl	r2, r2, #2
   11d48:	bl	10d48 <__memmove_chk@plt>
   11d4c:	str	r4, [r5]
   11d50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d54:	ldr	r3, [pc, #60]	; 11d98 <__assert_fail@plt+0xe34>
   11d58:	ldr	r4, [pc, #44]	; 11d8c <__assert_fail@plt+0xe28>
   11d5c:	ldr	r2, [r5, #60]	; 0x3c
   11d60:	ldr	r3, [r3]
   11d64:	sub	r2, r2, r4
   11d68:	mov	r0, r4
   11d6c:	mov	r1, #1
   11d70:	bl	10d90 <fwrite_unlocked@plt>
   11d74:	str	r4, [r5, #60]	; 0x3c
   11d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d7c:	mov	r4, r7
   11d80:	b	11cac <__assert_fail@plt+0xd48>
   11d84:	andeq	r8, r2, r8, asr r1
   11d88:	andeq	r8, r2, r4, lsr #3
   11d8c:	andeq	lr, r2, r4, lsl #30
   11d90:	andeq	r1, r0, r8, lsl #7
   11d94:	andeq	r6, r0, r0, ror #26
   11d98:	andeq	r8, r2, ip, asr #2
   11d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da0:	sub	sp, sp, #12
   11da4:	mov	r6, r0
   11da8:	mov	r5, r1
   11dac:	bl	10e68 <__ctype_b_loc@plt>
   11db0:	ldr	r7, [pc, #612]	; 1201c <__assert_fail@plt+0x10b8>
   11db4:	ldr	r3, [r7]
   11db8:	mov	fp, r0
   11dbc:	ldr	r2, [r7, #60]	; 0x3c
   11dc0:	str	r2, [r3]
   11dc4:	b	11e08 <__assert_fail@plt+0xea4>
   11dc8:	strb	r5, [r2]
   11dcc:	ldr	r3, [r6, #4]
   11dd0:	ldr	r0, [r6, #8]
   11dd4:	add	r1, r2, #1
   11dd8:	cmp	r3, r0
   11ddc:	add	ip, r3, #1
   11de0:	strcc	ip, [r6, #4]
   11de4:	mov	r2, r1
   11de8:	str	r1, [r7, #60]	; 0x3c
   11dec:	ldrbcc	r5, [r3]
   11df0:	bcs	11e28 <__assert_fail@plt+0xec4>
   11df4:	ldr	sl, [fp]
   11df8:	lsl	r3, r5, #1
   11dfc:	ldrh	r3, [sl, r3]
   11e00:	tst	r3, #8192	; 0x2000
   11e04:	bne	11e44 <__assert_fail@plt+0xee0>
   11e08:	ldr	r3, [pc, #528]	; 12020 <__assert_fail@plt+0x10bc>
   11e0c:	cmp	r2, r3
   11e10:	bne	11dc8 <__assert_fail@plt+0xe64>
   11e14:	mov	r0, #1
   11e18:	bl	119f8 <__assert_fail@plt+0xa94>
   11e1c:	bl	11c48 <__assert_fail@plt+0xce4>
   11e20:	ldr	r2, [r7, #60]	; 0x3c
   11e24:	b	11dc8 <__assert_fail@plt+0xe64>
   11e28:	mov	r0, r6
   11e2c:	bl	10ef8 <__uflow@plt>
   11e30:	ldr	r2, [r7, #60]	; 0x3c
   11e34:	cmn	r0, #1
   11e38:	mov	r5, r0
   11e3c:	bne	11df4 <__assert_fail@plt+0xe90>
   11e40:	ldr	sl, [fp]
   11e44:	ldr	r3, [r7]
   11e48:	ldr	r9, [r7, #24]
   11e4c:	ldr	r0, [pc, #464]	; 12024 <__assert_fail@plt+0x10c0>
   11e50:	ldr	r4, [r3]
   11e54:	str	r3, [sp]
   11e58:	sub	r2, r2, r4
   11e5c:	add	r1, r2, r9
   11e60:	str	r2, [r3, #4]
   11e64:	mov	ip, r1
   11e68:	str	r1, [sp, #4]
   11e6c:	ldrb	r1, [r4]
   11e70:	sub	r8, r2, #1
   11e74:	str	ip, [r7, #24]
   11e78:	bl	10e8c <strchr@plt>
   11e7c:	ldrb	ip, [r4, r8]
   11e80:	ldr	r2, [sp]
   11e84:	add	r3, r4, r8
   11e88:	ldrb	r1, [r2, #12]
   11e8c:	lsl	ip, ip, #1
   11e90:	ldrh	ip, [sl, ip]
   11e94:	bic	r1, r1, #1
   11e98:	and	ip, ip, #4
   11e9c:	cmp	r0, #0
   11ea0:	moveq	r0, r1
   11ea4:	orrne	r0, r1, #1
   11ea8:	bic	r0, r0, #4
   11eac:	cmp	r4, r3
   11eb0:	orr	ip, ip, r0
   11eb4:	strb	ip, [r2, #12]
   11eb8:	ldrbcs	r9, [r4, r8]
   11ebc:	bcs	11ef0 <__assert_fail@plt+0xf8c>
   11ec0:	mov	sl, r3
   11ec4:	b	11ed0 <__assert_fail@plt+0xf6c>
   11ec8:	cmp	sl, r4
   11ecc:	beq	12008 <__assert_fail@plt+0x10a4>
   11ed0:	ldrb	r9, [sl]
   11ed4:	ldr	r0, [pc, #332]	; 12028 <__assert_fail@plt+0x10c4>
   11ed8:	mov	r8, sl
   11edc:	mov	r1, r9
   11ee0:	bl	10e8c <strchr@plt>
   11ee4:	sub	sl, sl, #1
   11ee8:	cmp	r0, #0
   11eec:	bne	11ec8 <__assert_fail@plt+0xf64>
   11ef0:	mov	r1, r9
   11ef4:	ldr	r0, [pc, #304]	; 1202c <__assert_fail@plt+0x10c8>
   11ef8:	bl	10e8c <strchr@plt>
   11efc:	ldr	ip, [sp]
   11f00:	mov	r1, r5
   11f04:	ldrb	r3, [ip, #12]
   11f08:	bic	r3, r3, #2
   11f0c:	adds	r2, r0, #0
   11f10:	movne	r2, #1
   11f14:	mov	r0, r6
   11f18:	orr	r3, r3, r2, lsl #1
   11f1c:	strb	r3, [ip, #12]
   11f20:	bl	11788 <__assert_fail@plt+0x824>
   11f24:	ldr	r2, [r7, #24]
   11f28:	ldr	r3, [r7]
   11f2c:	ldr	r1, [sp, #4]
   11f30:	sub	r9, r2, r1
   11f34:	str	r9, [r3, #8]
   11f38:	cmn	r0, #1
   11f3c:	mov	r5, r0
   11f40:	beq	11fd8 <__assert_fail@plt+0x1074>
   11f44:	ldrb	r1, [r3, #12]
   11f48:	ands	r2, r1, #2
   11f4c:	beq	11f6c <__assert_fail@plt+0x1008>
   11f50:	sub	r2, r0, #10
   11f54:	clz	r2, r2
   11f58:	lsr	r2, r2, #5
   11f5c:	cmp	r9, #1
   11f60:	orrgt	r2, r2, #1
   11f64:	cmp	r2, #0
   11f68:	beq	12010 <__assert_fail@plt+0x10ac>
   11f6c:	ldrb	r9, [r3, #12]
   11f70:	cmp	r5, #10
   11f74:	bic	r9, r9, #8
   11f78:	orr	r9, r9, r2, lsl #3
   11f7c:	strb	r9, [r3, #12]
   11f80:	beq	11fe4 <__assert_fail@plt+0x1080>
   11f84:	ldrb	r2, [r7, #64]	; 0x40
   11f88:	cmp	r2, #0
   11f8c:	bne	11fe4 <__assert_fail@plt+0x1080>
   11f90:	ldr	r2, [pc, #152]	; 12030 <__assert_fail@plt+0x10cc>
   11f94:	cmp	r3, r2
   11f98:	addne	r3, r3, #28
   11f9c:	strne	r3, [r7]
   11fa0:	bne	11dbc <__assert_fail@plt+0xe58>
   11fa4:	mov	r0, #1
   11fa8:	bl	119f8 <__assert_fail@plt+0xa94>
   11fac:	bl	11c48 <__assert_fail@plt+0xce4>
   11fb0:	ldr	r3, [r7]
   11fb4:	add	r3, r3, #28
   11fb8:	cmp	r5, #10
   11fbc:	cmnne	r5, #1
   11fc0:	str	r3, [r7]
   11fc4:	bne	11dbc <__assert_fail@plt+0xe58>
   11fc8:	mov	r0, r6
   11fcc:	add	sp, sp, #12
   11fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd4:	b	1180c <__assert_fail@plt+0x8a8>
   11fd8:	ldrb	r2, [r3, #12]
   11fdc:	orr	r2, r2, #8
   11fe0:	strb	r2, [r3, #12]
   11fe4:	ldrb	r2, [r3, #12]
   11fe8:	ldr	r1, [pc, #64]	; 12030 <__assert_fail@plt+0x10cc>
   11fec:	tst	r2, #8
   11ff0:	movne	r2, #2
   11ff4:	moveq	r2, #1
   11ff8:	cmp	r3, r1
   11ffc:	str	r2, [r3, #8]
   12000:	bne	11fb4 <__assert_fail@plt+0x1050>
   12004:	b	11fa4 <__assert_fail@plt+0x1040>
   12008:	ldrb	r9, [r8, #-1]
   1200c:	b	11ef0 <__assert_fail@plt+0xf8c>
   12010:	bic	r1, r1, #8
   12014:	strb	r1, [r3, #12]
   12018:	b	11f84 <__assert_fail@plt+0x1020>
   1201c:	andeq	r8, r2, r8, asr r1
   12020:	andeq	r0, r3, ip, lsl #5
   12024:	andeq	r6, r1, r8, asr #16
   12028:	andeq	r6, r1, r0, asr r8
   1202c:	andeq	r6, r1, r8, asr r8
   12030:	andeq	lr, r2, ip, asr #29
   12034:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12038:	mov	r1, #2
   1203c:	ldr	r4, [pc, #1224]	; 1250c <__assert_fail@plt+0x15a8>
   12040:	mov	r6, r0
   12044:	bl	12978 <__assert_fail@plt+0x1a14>
   12048:	mov	r3, #0
   1204c:	mov	r0, r6
   12050:	strb	r3, [r4, #28]
   12054:	str	r3, [r4, #8]
   12058:	bl	1180c <__assert_fail@plt+0x8a8>
   1205c:	ldr	r7, [pc, #1196]	; 12510 <__assert_fail@plt+0x15ac>
   12060:	ldr	r8, [pc, #1196]	; 12514 <__assert_fail@plt+0x15b0>
   12064:	mov	r5, r0
   12068:	str	r0, [r4, #68]	; 0x44
   1206c:	mov	r3, #0
   12070:	str	r3, [r4, #20]
   12074:	cmn	r5, #1
   12078:	cmpne	r5, #10
   1207c:	moveq	sl, #1
   12080:	movne	sl, #0
   12084:	ldr	r3, [r4, #36]	; 0x24
   12088:	ldr	r2, [r4, #24]
   1208c:	beq	12264 <__assert_fail@plt+0x1300>
   12090:	ldr	r1, [r4, #40]	; 0x28
   12094:	cmp	r1, r3
   12098:	bgt	120ac <__assert_fail@plt+0x1148>
   1209c:	ldr	r1, [r4, #72]	; 0x48
   120a0:	add	r1, r3, r1
   120a4:	cmp	r1, r2
   120a8:	ble	122c4 <__assert_fail@plt+0x1360>
   120ac:	cmp	r2, r3
   120b0:	mov	r2, #0
   120b4:	str	r2, [r4, #48]	; 0x30
   120b8:	ble	1228c <__assert_fail@plt+0x1328>
   120bc:	mov	fp, #1
   120c0:	mov	r0, r3
   120c4:	bl	118fc <__assert_fail@plt+0x998>
   120c8:	ldr	r0, [r4, #48]	; 0x30
   120cc:	ldr	r3, [r4, #24]
   120d0:	ldr	sl, [r4, #44]	; 0x2c
   120d4:	cmp	r3, r0
   120d8:	beq	12138 <__assert_fail@plt+0x11d4>
   120dc:	ldrb	r1, [sl]
   120e0:	cmp	r1, #0
   120e4:	bne	12110 <__assert_fail@plt+0x11ac>
   120e8:	b	12138 <__assert_fail@plt+0x11d4>
   120ec:	ldr	r0, [r4, #48]	; 0x30
   120f0:	ldr	r3, [r4, #24]
   120f4:	add	r0, r0, #1
   120f8:	cmp	r0, r3
   120fc:	str	r0, [r4, #48]	; 0x30
   12100:	beq	12138 <__assert_fail@plt+0x11d4>
   12104:	ldrb	r1, [sl, #1]!
   12108:	cmp	r1, #0
   1210c:	beq	12138 <__assert_fail@plt+0x11d4>
   12110:	ldr	r0, [r7]
   12114:	ldr	r3, [r0, #20]
   12118:	ldr	r2, [r0, #24]
   1211c:	cmp	r3, r2
   12120:	addcc	r2, r3, #1
   12124:	strcc	r2, [r0, #20]
   12128:	strbcc	r1, [r3]
   1212c:	bcc	120ec <__assert_fail@plt+0x1188>
   12130:	bl	10f04 <__overflow@plt>
   12134:	b	120ec <__assert_fail@plt+0x1188>
   12138:	cmp	fp, #0
   1213c:	bne	122b8 <__assert_fail@plt+0x1354>
   12140:	cmn	r5, #1
   12144:	bne	12168 <__assert_fail@plt+0x1204>
   12148:	b	12200 <__assert_fail@plt+0x129c>
   1214c:	ldr	r3, [r6, #4]
   12150:	ldr	r2, [r6, #8]
   12154:	cmp	r3, r2
   12158:	bcs	121ac <__assert_fail@plt+0x1248>
   1215c:	add	r2, r3, #1
   12160:	str	r2, [r6, #4]
   12164:	ldrb	r5, [r3]
   12168:	cmp	r5, #10
   1216c:	cmnne	r5, #1
   12170:	beq	121c4 <__assert_fail@plt+0x1260>
   12174:	ldr	r0, [r7]
   12178:	ldr	r3, [r0, #20]
   1217c:	ldr	r2, [r0, #24]
   12180:	cmp	r3, r2
   12184:	addcc	r2, r3, #1
   12188:	strcc	r2, [r0, #20]
   1218c:	strbcc	r5, [r3]
   12190:	bcc	1214c <__assert_fail@plt+0x11e8>
   12194:	uxtb	r1, r5
   12198:	bl	10f04 <__overflow@plt>
   1219c:	ldr	r3, [r6, #4]
   121a0:	ldr	r2, [r6, #8]
   121a4:	cmp	r3, r2
   121a8:	bcc	1215c <__assert_fail@plt+0x11f8>
   121ac:	mov	r0, r6
   121b0:	bl	10ef8 <__uflow@plt>
   121b4:	mov	r5, r0
   121b8:	cmp	r5, #10
   121bc:	cmnne	r5, #1
   121c0:	bne	12174 <__assert_fail@plt+0x1210>
   121c4:	cmn	r5, #1
   121c8:	beq	12218 <__assert_fail@plt+0x12b4>
   121cc:	ldr	r0, [r7]
   121d0:	ldr	r3, [r0, #20]
   121d4:	ldr	r2, [r0, #24]
   121d8:	cmp	r3, r2
   121dc:	addcc	r1, r3, #1
   121e0:	movcc	r2, #10
   121e4:	strcc	r1, [r0, #20]
   121e8:	strbcc	r2, [r3]
   121ec:	bcs	12258 <__assert_fail@plt+0x12f4>
   121f0:	mov	r0, r6
   121f4:	bl	1180c <__assert_fail@plt+0x8a8>
   121f8:	mov	r5, r0
   121fc:	b	12074 <__assert_fail@plt+0x1110>
   12200:	ldr	r3, [r4, #36]	; 0x24
   12204:	ldr	r1, [r4, #32]
   12208:	ldr	r2, [r4, #24]
   1220c:	add	r3, r3, r1
   12210:	cmp	r3, r2
   12214:	ble	12224 <__assert_fail@plt+0x12c0>
   12218:	mvn	r3, #0
   1221c:	str	r3, [r4, #68]	; 0x44
   12220:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12224:	ldr	r3, [pc, #740]	; 12510 <__assert_fail@plt+0x15ac>
   12228:	ldr	r0, [r3]
   1222c:	ldr	r3, [r0, #20]
   12230:	ldr	r2, [r0, #24]
   12234:	cmp	r3, r2
   12238:	addcc	r1, r3, #1
   1223c:	movcc	r2, #10
   12240:	strcc	r1, [r0, #20]
   12244:	strbcc	r2, [r3]
   12248:	bcc	12218 <__assert_fail@plt+0x12b4>
   1224c:	mov	r1, #10
   12250:	bl	10f04 <__overflow@plt>
   12254:	b	12218 <__assert_fail@plt+0x12b4>
   12258:	mov	r1, #10
   1225c:	bl	10f04 <__overflow@plt>
   12260:	b	121f0 <__assert_fail@plt+0x128c>
   12264:	cmp	r5, #10
   12268:	cmnne	r5, #1
   1226c:	mov	r1, #0
   12270:	movne	fp, #1
   12274:	moveq	fp, #0
   12278:	cmp	r2, r3
   1227c:	str	r1, [r4, #48]	; 0x30
   12280:	bgt	120c0 <__assert_fail@plt+0x115c>
   12284:	cmp	fp, r1
   12288:	beq	121c4 <__assert_fail@plt+0x1260>
   1228c:	mov	r0, r3
   12290:	bl	118fc <__assert_fail@plt+0x998>
   12294:	ldr	r0, [r4, #48]	; 0x30
   12298:	ldr	r3, [r4, #24]
   1229c:	ldr	sl, [r4, #44]	; 0x2c
   122a0:	cmp	r0, r3
   122a4:	beq	12350 <__assert_fail@plt+0x13ec>
   122a8:	ldrb	r1, [sl]
   122ac:	cmp	r1, #0
   122b0:	movne	fp, #1
   122b4:	bne	12110 <__assert_fail@plt+0x11ac>
   122b8:	sub	r0, r3, r0
   122bc:	bl	118fc <__assert_fail@plt+0x998>
   122c0:	b	12140 <__assert_fail@plt+0x11dc>
   122c4:	str	r3, [r4, #56]	; 0x38
   122c8:	ldr	r3, [pc, #584]	; 12518 <__assert_fail@plt+0x15b4>
   122cc:	mov	r1, r5
   122d0:	mov	r0, r6
   122d4:	str	r2, [r4, #12]
   122d8:	str	r3, [r4, #60]	; 0x3c
   122dc:	str	r8, [r4]
   122e0:	bl	11d9c <__assert_fail@plt+0xe38>
   122e4:	ldr	r5, [r4, #36]	; 0x24
   122e8:	ldr	r9, [r4, #56]	; 0x38
   122ec:	cmp	r5, r9
   122f0:	mov	fp, r0
   122f4:	beq	12358 <__assert_fail@plt+0x13f4>
   122f8:	mov	r0, sl
   122fc:	bl	119f8 <__assert_fail@plt+0xa94>
   12300:	ldrb	r2, [r4, #52]	; 0x34
   12304:	cmp	r2, #0
   12308:	bne	12320 <__assert_fail@plt+0x13bc>
   1230c:	ldrb	r2, [r4, #53]	; 0x35
   12310:	cmp	r2, #0
   12314:	beq	12380 <__assert_fail@plt+0x141c>
   12318:	cmp	r5, r9
   1231c:	beq	12434 <__assert_fail@plt+0x14d0>
   12320:	ldr	r5, [r4]
   12324:	cmp	r5, r8
   12328:	bls	124f8 <__assert_fail@plt+0x1594>
   1232c:	ldrb	r3, [r5, #-16]
   12330:	str	fp, [r4, #68]	; 0x44
   12334:	orr	r3, r3, #10
   12338:	strb	r3, [r5, #-16]
   1233c:	bl	11580 <__assert_fail@plt+0x61c>
   12340:	mov	r0, r5
   12344:	bl	11bfc <__assert_fail@plt+0xc98>
   12348:	ldr	r5, [r4, #68]	; 0x44
   1234c:	b	1206c <__assert_fail@plt+0x1108>
   12350:	mov	r0, #0
   12354:	b	122bc <__assert_fail@plt+0x1358>
   12358:	ldr	r2, [r4, #72]	; 0x48
   1235c:	ldr	r1, [r4, #24]
   12360:	add	r2, r5, r2
   12364:	cmp	r2, r1
   12368:	bgt	122f8 <__assert_fail@plt+0x1394>
   1236c:	cmp	r0, #10
   12370:	cmnne	r0, #1
   12374:	movne	sl, #1
   12378:	moveq	sl, #0
   1237c:	b	122f8 <__assert_fail@plt+0x1394>
   12380:	ldrb	r2, [r4, #54]	; 0x36
   12384:	cmp	r2, #0
   12388:	beq	12414 <__assert_fail@plt+0x14b0>
   1238c:	cmp	r5, r9
   12390:	bne	12320 <__assert_fail@plt+0x13bc>
   12394:	ldr	r2, [r4, #72]	; 0x48
   12398:	ldr	r3, [r4, #24]
   1239c:	add	r5, r5, r2
   123a0:	cmp	r5, r3
   123a4:	bgt	12320 <__assert_fail@plt+0x13bc>
   123a8:	cmp	fp, #10
   123ac:	cmnne	fp, #1
   123b0:	beq	12320 <__assert_fail@plt+0x13bc>
   123b4:	ldr	r2, [r4, #12]
   123b8:	cmp	r3, r2
   123bc:	bne	123f0 <__assert_fail@plt+0x148c>
   123c0:	b	12320 <__assert_fail@plt+0x13bc>
   123c4:	ldr	r1, [r4, #72]	; 0x48
   123c8:	ldr	r2, [r4, #24]
   123cc:	add	r3, r3, r1
   123d0:	cmp	r3, r2
   123d4:	bgt	12320 <__assert_fail@plt+0x13bc>
   123d8:	cmp	r0, #10
   123dc:	cmnne	r0, #1
   123e0:	beq	12320 <__assert_fail@plt+0x13bc>
   123e4:	ldr	r3, [r4, #8]
   123e8:	cmp	r2, r3
   123ec:	bne	12320 <__assert_fail@plt+0x13bc>
   123f0:	mov	r1, fp
   123f4:	mov	r0, r6
   123f8:	bl	11d9c <__assert_fail@plt+0xe38>
   123fc:	ldr	r3, [r4, #36]	; 0x24
   12400:	ldr	r2, [r4, #56]	; 0x38
   12404:	cmp	r3, r2
   12408:	mov	fp, r0
   1240c:	bne	12320 <__assert_fail@plt+0x13bc>
   12410:	b	123c4 <__assert_fail@plt+0x1460>
   12414:	cmp	r5, r9
   12418:	bne	12320 <__assert_fail@plt+0x13bc>
   1241c:	ldr	r3, [r4, #72]	; 0x48
   12420:	ldr	r2, [r4, #24]
   12424:	add	r5, r5, r3
   12428:	cmp	r5, r2
   1242c:	bgt	12320 <__assert_fail@plt+0x13bc>
   12430:	b	124bc <__assert_fail@plt+0x1558>
   12434:	ldr	r3, [r4, #72]	; 0x48
   12438:	ldr	r2, [r4, #24]
   1243c:	add	r5, r5, r3
   12440:	cmp	r5, r2
   12444:	bgt	12320 <__assert_fail@plt+0x13bc>
   12448:	cmp	fp, #10
   1244c:	cmnne	fp, #1
   12450:	beq	12320 <__assert_fail@plt+0x13bc>
   12454:	b	12484 <__assert_fail@plt+0x1520>
   12458:	ldr	r1, [r4, #72]	; 0x48
   1245c:	ldr	r2, [r4, #24]
   12460:	add	r3, r3, r1
   12464:	cmp	r3, r2
   12468:	bgt	12320 <__assert_fail@plt+0x13bc>
   1246c:	cmp	r0, #10
   12470:	cmnne	r0, #1
   12474:	beq	12320 <__assert_fail@plt+0x13bc>
   12478:	ldr	r3, [r4, #8]
   1247c:	cmp	r2, r3
   12480:	bne	12320 <__assert_fail@plt+0x13bc>
   12484:	mov	r1, fp
   12488:	mov	r0, r6
   1248c:	bl	11d9c <__assert_fail@plt+0xe38>
   12490:	ldr	r3, [r4, #36]	; 0x24
   12494:	ldr	r2, [r4, #56]	; 0x38
   12498:	cmp	r3, r2
   1249c:	mov	fp, r0
   124a0:	bne	12320 <__assert_fail@plt+0x13bc>
   124a4:	b	12458 <__assert_fail@plt+0x14f4>
   124a8:	ldr	r1, [r4, #72]	; 0x48
   124ac:	ldr	r2, [r4, #24]
   124b0:	add	r3, r3, r1
   124b4:	cmp	r3, r2
   124b8:	bgt	12320 <__assert_fail@plt+0x13bc>
   124bc:	cmp	fp, #10
   124c0:	cmnne	fp, #1
   124c4:	beq	12320 <__assert_fail@plt+0x13bc>
   124c8:	ldr	r3, [r4, #8]
   124cc:	cmp	r2, r3
   124d0:	bne	12320 <__assert_fail@plt+0x13bc>
   124d4:	mov	r1, fp
   124d8:	mov	r0, r6
   124dc:	bl	11d9c <__assert_fail@plt+0xe38>
   124e0:	ldr	r3, [r4, #36]	; 0x24
   124e4:	ldr	r2, [r4, #56]	; 0x38
   124e8:	cmp	r3, r2
   124ec:	mov	fp, r0
   124f0:	bne	12320 <__assert_fail@plt+0x13bc>
   124f4:	b	124a8 <__assert_fail@plt+0x1544>
   124f8:	ldr	r3, [pc, #28]	; 1251c <__assert_fail@plt+0x15b8>
   124fc:	ldr	r2, [pc, #28]	; 12520 <__assert_fail@plt+0x15bc>
   12500:	ldr	r1, [pc, #28]	; 12524 <__assert_fail@plt+0x15c0>
   12504:	ldr	r0, [pc, #28]	; 12528 <__assert_fail@plt+0x15c4>
   12508:	bl	10f64 <__assert_fail@plt>
   1250c:	andeq	r8, r2, r8, asr r1
   12510:	andeq	r8, r2, ip, asr #2
   12514:	andeq	r8, r2, r4, lsr #3
   12518:	andeq	lr, r2, r4, lsl #30
   1251c:	andeq	r6, r1, r0, ror #14
   12520:	andeq	r0, r0, lr, asr r2
   12524:	andeq	r6, r1, ip, asr r8
   12528:	andeq	r6, r1, r8, ror #16
   1252c:	ldr	r3, [pc, #744]	; 1281c <__assert_fail@plt+0x18b8>
   12530:	push	{r7, lr}
   12534:	sub	sp, sp, #64	; 0x40
   12538:	ldr	r3, [r3]
   1253c:	subs	r4, r0, #0
   12540:	str	r3, [sp, #60]	; 0x3c
   12544:	beq	12580 <__assert_fail@plt+0x161c>
   12548:	ldr	r3, [pc, #720]	; 12820 <__assert_fail@plt+0x18bc>
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #716]	; 12824 <__assert_fail@plt+0x18c0>
   12554:	mov	r0, #0
   12558:	ldr	r5, [r3]
   1255c:	bl	10da8 <dcgettext@plt>
   12560:	ldr	r3, [pc, #704]	; 12828 <__assert_fail@plt+0x18c4>
   12564:	mov	r1, #1
   12568:	ldr	r3, [r3]
   1256c:	mov	r2, r0
   12570:	mov	r0, r5
   12574:	bl	10ed4 <__fprintf_chk@plt>
   12578:	mov	r0, r4
   1257c:	bl	10e74 <exit@plt>
   12580:	mov	r2, #5
   12584:	ldr	r1, [pc, #672]	; 1282c <__assert_fail@plt+0x18c8>
   12588:	bl	10da8 <dcgettext@plt>
   1258c:	ldr	r3, [pc, #660]	; 12828 <__assert_fail@plt+0x18c4>
   12590:	ldr	r5, [pc, #664]	; 12830 <__assert_fail@plt+0x18cc>
   12594:	ldr	r2, [r3]
   12598:	mov	r1, r0
   1259c:	mov	r0, #1
   125a0:	bl	10ebc <__printf_chk@plt>
   125a4:	mov	r2, #5
   125a8:	ldr	r1, [pc, #644]	; 12834 <__assert_fail@plt+0x18d0>
   125ac:	mov	r0, r4
   125b0:	bl	10da8 <dcgettext@plt>
   125b4:	ldr	r1, [r5]
   125b8:	bl	10d0c <fputs_unlocked@plt>
   125bc:	mov	r2, #5
   125c0:	ldr	r1, [pc, #624]	; 12838 <__assert_fail@plt+0x18d4>
   125c4:	mov	r0, r4
   125c8:	bl	10da8 <dcgettext@plt>
   125cc:	ldr	r1, [r5]
   125d0:	bl	10d0c <fputs_unlocked@plt>
   125d4:	mov	r2, #5
   125d8:	ldr	r1, [pc, #604]	; 1283c <__assert_fail@plt+0x18d8>
   125dc:	mov	r0, r4
   125e0:	bl	10da8 <dcgettext@plt>
   125e4:	ldr	r1, [r5]
   125e8:	bl	10d0c <fputs_unlocked@plt>
   125ec:	mov	r2, #5
   125f0:	ldr	r1, [pc, #584]	; 12840 <__assert_fail@plt+0x18dc>
   125f4:	mov	r0, r4
   125f8:	bl	10da8 <dcgettext@plt>
   125fc:	ldr	r1, [r5]
   12600:	bl	10d0c <fputs_unlocked@plt>
   12604:	mov	r2, #5
   12608:	ldr	r1, [pc, #564]	; 12844 <__assert_fail@plt+0x18e0>
   1260c:	mov	r0, r4
   12610:	bl	10da8 <dcgettext@plt>
   12614:	ldr	r1, [r5]
   12618:	bl	10d0c <fputs_unlocked@plt>
   1261c:	mov	r2, #5
   12620:	ldr	r1, [pc, #544]	; 12848 <__assert_fail@plt+0x18e4>
   12624:	mov	r0, r4
   12628:	bl	10da8 <dcgettext@plt>
   1262c:	ldr	r1, [r5]
   12630:	bl	10d0c <fputs_unlocked@plt>
   12634:	mov	r2, #5
   12638:	ldr	r1, [pc, #524]	; 1284c <__assert_fail@plt+0x18e8>
   1263c:	mov	r0, r4
   12640:	bl	10da8 <dcgettext@plt>
   12644:	ldr	r1, [r5]
   12648:	bl	10d0c <fputs_unlocked@plt>
   1264c:	ldr	lr, [pc, #508]	; 12850 <__assert_fail@plt+0x18ec>
   12650:	add	ip, sp, #4
   12654:	ldm	lr!, {r0, r1, r2, r3}
   12658:	stmia	ip!, {r0, r1, r2, r3}
   1265c:	ldm	lr!, {r0, r1, r2, r3}
   12660:	ldr	r6, [sp, #4]
   12664:	stmia	ip!, {r0, r1, r2, r3}
   12668:	cmp	r6, #0
   1266c:	ldm	lr!, {r0, r1, r2, r3}
   12670:	addeq	r5, sp, #4
   12674:	stmia	ip!, {r0, r1, r2, r3}
   12678:	ldm	lr, {r0, r1}
   1267c:	stm	ip, {r0, r1}
   12680:	beq	126b0 <__assert_fail@plt+0x174c>
   12684:	ldr	r7, [pc, #456]	; 12854 <__assert_fail@plt+0x18f0>
   12688:	add	r5, sp, #4
   1268c:	b	1269c <__assert_fail@plt+0x1738>
   12690:	ldr	r6, [r5, #8]!
   12694:	cmp	r6, #0
   12698:	beq	126b0 <__assert_fail@plt+0x174c>
   1269c:	mov	r1, r6
   126a0:	mov	r0, r7
   126a4:	bl	10d24 <strcmp@plt>
   126a8:	cmp	r0, #0
   126ac:	bne	12690 <__assert_fail@plt+0x172c>
   126b0:	ldr	r5, [r5, #4]
   126b4:	mov	r2, #5
   126b8:	cmp	r5, #0
   126bc:	ldr	r1, [pc, #404]	; 12858 <__assert_fail@plt+0x18f4>
   126c0:	beq	12768 <__assert_fail@plt+0x1804>
   126c4:	mov	r0, #0
   126c8:	bl	10da8 <dcgettext@plt>
   126cc:	ldr	r3, [pc, #392]	; 1285c <__assert_fail@plt+0x18f8>
   126d0:	ldr	r2, [pc, #392]	; 12860 <__assert_fail@plt+0x18fc>
   126d4:	mov	r1, r0
   126d8:	mov	r0, #1
   126dc:	bl	10ebc <__printf_chk@plt>
   126e0:	mov	r1, #0
   126e4:	mov	r0, #5
   126e8:	bl	10f10 <setlocale@plt>
   126ec:	cmp	r0, #0
   126f0:	ldreq	r6, [pc, #348]	; 12854 <__assert_fail@plt+0x18f0>
   126f4:	beq	12710 <__assert_fail@plt+0x17ac>
   126f8:	mov	r2, #3
   126fc:	ldr	r1, [pc, #352]	; 12864 <__assert_fail@plt+0x1900>
   12700:	bl	10f4c <strncmp@plt>
   12704:	ldr	r6, [pc, #328]	; 12854 <__assert_fail@plt+0x18f0>
   12708:	cmp	r0, #0
   1270c:	bne	127f8 <__assert_fail@plt+0x1894>
   12710:	mov	r2, #5
   12714:	ldr	r1, [pc, #332]	; 12868 <__assert_fail@plt+0x1904>
   12718:	mov	r0, #0
   1271c:	bl	10da8 <dcgettext@plt>
   12720:	ldr	r3, [pc, #300]	; 12854 <__assert_fail@plt+0x18f0>
   12724:	ldr	r2, [pc, #304]	; 1285c <__assert_fail@plt+0x18f8>
   12728:	mov	r1, r0
   1272c:	mov	r0, #1
   12730:	bl	10ebc <__printf_chk@plt>
   12734:	mov	r2, #5
   12738:	ldr	r1, [pc, #300]	; 1286c <__assert_fail@plt+0x1908>
   1273c:	mov	r0, #0
   12740:	bl	10da8 <dcgettext@plt>
   12744:	ldr	r2, [pc, #292]	; 12870 <__assert_fail@plt+0x190c>
   12748:	cmp	r5, r6
   1274c:	ldr	r3, [pc, #288]	; 12874 <__assert_fail@plt+0x1910>
   12750:	movne	r3, r2
   12754:	mov	r1, r0
   12758:	mov	r2, r5
   1275c:	mov	r0, #1
   12760:	bl	10ebc <__printf_chk@plt>
   12764:	b	12578 <__assert_fail@plt+0x1614>
   12768:	mov	r0, r5
   1276c:	bl	10da8 <dcgettext@plt>
   12770:	ldr	r3, [pc, #228]	; 1285c <__assert_fail@plt+0x18f8>
   12774:	ldr	r2, [pc, #228]	; 12860 <__assert_fail@plt+0x18fc>
   12778:	mov	r1, r0
   1277c:	mov	r0, #1
   12780:	bl	10ebc <__printf_chk@plt>
   12784:	mov	r1, r5
   12788:	mov	r0, #5
   1278c:	bl	10f10 <setlocale@plt>
   12790:	cmp	r0, #0
   12794:	beq	127ac <__assert_fail@plt+0x1848>
   12798:	mov	r2, #3
   1279c:	ldr	r1, [pc, #192]	; 12864 <__assert_fail@plt+0x1900>
   127a0:	bl	10f4c <strncmp@plt>
   127a4:	cmp	r0, #0
   127a8:	bne	127f0 <__assert_fail@plt+0x188c>
   127ac:	mov	r2, #5
   127b0:	ldr	r1, [pc, #176]	; 12868 <__assert_fail@plt+0x1904>
   127b4:	mov	r0, #0
   127b8:	bl	10da8 <dcgettext@plt>
   127bc:	ldr	r3, [pc, #144]	; 12854 <__assert_fail@plt+0x18f0>
   127c0:	ldr	r2, [pc, #148]	; 1285c <__assert_fail@plt+0x18f8>
   127c4:	mov	r5, r3
   127c8:	mov	r1, r0
   127cc:	mov	r0, #1
   127d0:	bl	10ebc <__printf_chk@plt>
   127d4:	ldr	r1, [pc, #144]	; 1286c <__assert_fail@plt+0x1908>
   127d8:	mov	r2, #5
   127dc:	mov	r0, #0
   127e0:	bl	10da8 <dcgettext@plt>
   127e4:	ldr	r3, [pc, #136]	; 12874 <__assert_fail@plt+0x1910>
   127e8:	mov	r1, r0
   127ec:	b	12758 <__assert_fail@plt+0x17f4>
   127f0:	ldr	r6, [pc, #92]	; 12854 <__assert_fail@plt+0x18f0>
   127f4:	mov	r5, r6
   127f8:	mov	r2, #5
   127fc:	ldr	r1, [pc, #116]	; 12878 <__assert_fail@plt+0x1914>
   12800:	mov	r0, #0
   12804:	bl	10da8 <dcgettext@plt>
   12808:	ldr	r2, [pc, #68]	; 12854 <__assert_fail@plt+0x18f0>
   1280c:	mov	r1, r0
   12810:	mov	r0, #1
   12814:	bl	10ebc <__printf_chk@plt>
   12818:	b	12710 <__assert_fail@plt+0x17ac>
   1281c:	andeq	r7, r2, r8, lsl #30
   12820:	andeq	r8, r2, r0, asr #2
   12824:	andeq	r6, r1, r0, lsl #17
   12828:	muleq	r3, r4, r2
   1282c:	andeq	r6, r1, r8, lsr #17
   12830:	andeq	r8, r2, ip, asr #2
   12834:	ldrdeq	r6, [r1], -r4
   12838:	andeq	r6, r1, r8, asr r9
   1283c:	muleq	r1, r0, r9
   12840:	ldrdeq	r6, [r1], -ip
   12844:	strdeq	r6, [r1], -r4
   12848:	andeq	r6, r1, r4, lsl ip
   1284c:	andeq	r6, r1, r4, asr #24
   12850:	andeq	r6, r1, r0, ror r7
   12854:	andeq	r6, r1, ip, ror r8
   12858:	andeq	r6, r1, ip, ror ip
   1285c:	muleq	r1, r4, ip
   12860:			; <UNDEFINED> instruction: 0x00016cbc
   12864:	andeq	r6, r1, ip, asr #25
   12868:	andeq	r6, r1, r8, lsl sp
   1286c:	andeq	r6, r1, r8, lsr sp
   12870:	andeq	r6, r1, r4, asr r9
   12874:	andeq	r6, r1, r4, asr #28
   12878:	ldrdeq	r6, [r1], -r0
   1287c:	ldr	r3, [pc, #4]	; 12888 <__assert_fail@plt+0x1924>
   12880:	str	r0, [r3]
   12884:	bx	lr
   12888:	andeq	r0, r3, ip, lsl #5
   1288c:	ldr	r3, [pc, #4]	; 12898 <__assert_fail@plt+0x1934>
   12890:	strb	r0, [r3, #4]
   12894:	bx	lr
   12898:	andeq	r0, r3, ip, lsl #5
   1289c:	ldr	r3, [pc, #180]	; 12958 <__assert_fail@plt+0x19f4>
   128a0:	push	{r4, r5, r6, lr}
   128a4:	sub	sp, sp, #8
   128a8:	ldr	r0, [r3]
   128ac:	bl	16188 <__assert_fail@plt+0x5224>
   128b0:	cmp	r0, #0
   128b4:	beq	128dc <__assert_fail@plt+0x1978>
   128b8:	bl	10e98 <__errno_location@plt>
   128bc:	ldr	r5, [pc, #152]	; 1295c <__assert_fail@plt+0x19f8>
   128c0:	ldrb	r3, [r5, #4]
   128c4:	cmp	r3, #0
   128c8:	mov	r4, r0
   128cc:	beq	128f8 <__assert_fail@plt+0x1994>
   128d0:	ldr	r3, [r0]
   128d4:	cmp	r3, #32
   128d8:	bne	128f8 <__assert_fail@plt+0x1994>
   128dc:	ldr	r3, [pc, #124]	; 12960 <__assert_fail@plt+0x19fc>
   128e0:	ldr	r0, [r3]
   128e4:	bl	16188 <__assert_fail@plt+0x5224>
   128e8:	cmp	r0, #0
   128ec:	bne	12938 <__assert_fail@plt+0x19d4>
   128f0:	add	sp, sp, #8
   128f4:	pop	{r4, r5, r6, pc}
   128f8:	mov	r2, #5
   128fc:	ldr	r1, [pc, #96]	; 12964 <__assert_fail@plt+0x1a00>
   12900:	mov	r0, #0
   12904:	bl	10da8 <dcgettext@plt>
   12908:	mov	r6, r0
   1290c:	ldr	r0, [r5]
   12910:	cmp	r0, #0
   12914:	beq	12944 <__assert_fail@plt+0x19e0>
   12918:	ldr	r4, [r4]
   1291c:	bl	14a30 <__assert_fail@plt+0x3acc>
   12920:	mov	r1, r4
   12924:	str	r6, [sp]
   12928:	ldr	r2, [pc, #56]	; 12968 <__assert_fail@plt+0x1a04>
   1292c:	mov	r3, r0
   12930:	mov	r0, #0
   12934:	bl	10e20 <error@plt>
   12938:	ldr	r3, [pc, #44]	; 1296c <__assert_fail@plt+0x1a08>
   1293c:	ldr	r0, [r3]
   12940:	bl	10d60 <_exit@plt>
   12944:	mov	r3, r6
   12948:	ldr	r1, [r4]
   1294c:	ldr	r2, [pc, #28]	; 12970 <__assert_fail@plt+0x1a0c>
   12950:	bl	10e20 <error@plt>
   12954:	b	12938 <__assert_fail@plt+0x19d4>
   12958:	andeq	r8, r2, ip, asr #2
   1295c:	andeq	r0, r3, ip, lsl #5
   12960:	andeq	r8, r2, r0, asr #2
   12964:	andeq	r6, r1, r0, lsl pc
   12968:	andeq	r6, r1, ip, lsl pc
   1296c:	andeq	r8, r2, ip, ror #1
   12970:	andeq	r6, r1, r0, lsr #30
   12974:	b	10d30 <posix_fadvise64@plt>
   12978:	cmp	r0, #0
   1297c:	bxeq	lr
   12980:	push	{r4, lr}
   12984:	sub	sp, sp, #16
   12988:	mov	r4, r1
   1298c:	bl	10ec8 <fileno@plt>
   12990:	mov	r2, #0
   12994:	mov	r3, #0
   12998:	str	r4, [sp, #8]
   1299c:	strd	r2, [sp]
   129a0:	bl	10d30 <posix_fadvise64@plt>
   129a4:	add	sp, sp, #16
   129a8:	pop	{r4, pc}
   129ac:	push	{r4, r5, r6, lr}
   129b0:	subs	r4, r0, #0
   129b4:	beq	12a28 <__assert_fail@plt+0x1ac4>
   129b8:	mov	r1, #47	; 0x2f
   129bc:	bl	10f1c <strrchr@plt>
   129c0:	subs	r5, r0, #0
   129c4:	beq	12a14 <__assert_fail@plt+0x1ab0>
   129c8:	add	r6, r5, #1
   129cc:	sub	r3, r6, r4
   129d0:	cmp	r3, #6
   129d4:	ble	12a14 <__assert_fail@plt+0x1ab0>
   129d8:	mov	r2, #7
   129dc:	ldr	r1, [pc, #96]	; 12a44 <__assert_fail@plt+0x1ae0>
   129e0:	sub	r0, r5, #6
   129e4:	bl	10f4c <strncmp@plt>
   129e8:	cmp	r0, #0
   129ec:	bne	12a14 <__assert_fail@plt+0x1ab0>
   129f0:	mov	r2, #3
   129f4:	ldr	r1, [pc, #76]	; 12a48 <__assert_fail@plt+0x1ae4>
   129f8:	mov	r0, r6
   129fc:	bl	10f4c <strncmp@plt>
   12a00:	cmp	r0, #0
   12a04:	movne	r4, r6
   12a08:	ldreq	r3, [pc, #60]	; 12a4c <__assert_fail@plt+0x1ae8>
   12a0c:	addeq	r4, r5, #4
   12a10:	streq	r4, [r3]
   12a14:	ldr	r2, [pc, #52]	; 12a50 <__assert_fail@plt+0x1aec>
   12a18:	ldr	r3, [pc, #52]	; 12a54 <__assert_fail@plt+0x1af0>
   12a1c:	str	r4, [r2]
   12a20:	str	r4, [r3]
   12a24:	pop	{r4, r5, r6, pc}
   12a28:	ldr	r3, [pc, #40]	; 12a58 <__assert_fail@plt+0x1af4>
   12a2c:	mov	r2, #55	; 0x37
   12a30:	mov	r1, #1
   12a34:	ldr	r3, [r3]
   12a38:	ldr	r0, [pc, #28]	; 12a5c <__assert_fail@plt+0x1af8>
   12a3c:	bl	10de4 <fwrite@plt>
   12a40:	bl	10f58 <abort@plt>
   12a44:	andeq	r6, r1, ip, asr pc
   12a48:	andeq	r6, r1, r4, ror #30
   12a4c:	andeq	r8, r2, r0, lsr r1
   12a50:	muleq	r3, r4, r2
   12a54:	andeq	r8, r2, r4, lsr r1
   12a58:	andeq	r8, r2, r0, asr #2
   12a5c:	andeq	r6, r1, r4, lsr #30
   12a60:	push	{r4, lr}
   12a64:	mov	r2, #48	; 0x30
   12a68:	mov	r4, r1
   12a6c:	mov	r1, #0
   12a70:	bl	10eb0 <memset@plt>
   12a74:	cmp	r4, #10
   12a78:	beq	12a84 <__assert_fail@plt+0x1b20>
   12a7c:	str	r4, [r0]
   12a80:	pop	{r4, pc}
   12a84:	bl	10f58 <abort@plt>
   12a88:	push	{r4, r5, r6, lr}
   12a8c:	mov	r2, #5
   12a90:	mov	r5, r0
   12a94:	mov	r6, r1
   12a98:	mov	r1, r0
   12a9c:	mov	r0, #0
   12aa0:	bl	10da8 <dcgettext@plt>
   12aa4:	cmp	r5, r0
   12aa8:	mov	r4, r0
   12aac:	beq	12ab8 <__assert_fail@plt+0x1b54>
   12ab0:	mov	r0, r4
   12ab4:	pop	{r4, r5, r6, pc}
   12ab8:	bl	16248 <__assert_fail@plt+0x52e4>
   12abc:	ldrb	r3, [r0]
   12ac0:	bic	r3, r3, #32
   12ac4:	cmp	r3, #85	; 0x55
   12ac8:	bne	12b28 <__assert_fail@plt+0x1bc4>
   12acc:	ldrb	r3, [r0, #1]
   12ad0:	bic	r3, r3, #32
   12ad4:	cmp	r3, #84	; 0x54
   12ad8:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12adc:	ldrb	r3, [r0, #2]
   12ae0:	bic	r3, r3, #32
   12ae4:	cmp	r3, #70	; 0x46
   12ae8:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12aec:	ldrb	r3, [r0, #3]
   12af0:	cmp	r3, #45	; 0x2d
   12af4:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12af8:	ldrb	r3, [r0, #4]
   12afc:	cmp	r3, #56	; 0x38
   12b00:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b04:	ldrb	r3, [r0, #5]
   12b08:	cmp	r3, #0
   12b0c:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b10:	ldrb	r2, [r4]
   12b14:	ldr	r3, [pc, #156]	; 12bb8 <__assert_fail@plt+0x1c54>
   12b18:	ldr	r4, [pc, #156]	; 12bbc <__assert_fail@plt+0x1c58>
   12b1c:	cmp	r2, #96	; 0x60
   12b20:	movne	r4, r3
   12b24:	b	12ab0 <__assert_fail@plt+0x1b4c>
   12b28:	cmp	r3, #71	; 0x47
   12b2c:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b30:	ldrb	r3, [r0, #1]
   12b34:	bic	r3, r3, #32
   12b38:	cmp	r3, #66	; 0x42
   12b3c:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b40:	ldrb	r3, [r0, #2]
   12b44:	cmp	r3, #49	; 0x31
   12b48:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b4c:	ldrb	r3, [r0, #3]
   12b50:	cmp	r3, #56	; 0x38
   12b54:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b58:	ldrb	r3, [r0, #4]
   12b5c:	cmp	r3, #48	; 0x30
   12b60:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b64:	ldrb	r3, [r0, #5]
   12b68:	cmp	r3, #51	; 0x33
   12b6c:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b70:	ldrb	r3, [r0, #6]
   12b74:	cmp	r3, #48	; 0x30
   12b78:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b7c:	ldrb	r3, [r0, #7]
   12b80:	cmp	r3, #0
   12b84:	bne	12ba0 <__assert_fail@plt+0x1c3c>
   12b88:	ldrb	r2, [r4]
   12b8c:	ldr	r3, [pc, #44]	; 12bc0 <__assert_fail@plt+0x1c5c>
   12b90:	ldr	r4, [pc, #44]	; 12bc4 <__assert_fail@plt+0x1c60>
   12b94:	cmp	r2, #96	; 0x60
   12b98:	movne	r4, r3
   12b9c:	b	12ab0 <__assert_fail@plt+0x1b4c>
   12ba0:	ldr	r3, [pc, #32]	; 12bc8 <__assert_fail@plt+0x1c64>
   12ba4:	ldr	r4, [pc, #32]	; 12bcc <__assert_fail@plt+0x1c68>
   12ba8:	cmp	r6, #9
   12bac:	movne	r4, r3
   12bb0:	mov	r0, r4
   12bb4:	pop	{r4, r5, r6, pc}
   12bb8:			; <UNDEFINED> instruction: 0x00016fbc
   12bbc:	andeq	r6, r1, r8, asr #31
   12bc0:	andeq	r6, r1, r0, asr #31
   12bc4:	andeq	r6, r1, r4, asr #31
   12bc8:	andeq	r6, r1, ip, asr #31
   12bcc:	andeq	r6, r1, ip, asr #16
   12bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd4:	sub	sp, sp, #124	; 0x7c
   12bd8:	ldr	ip, [pc, #3576]	; 139d8 <__assert_fail@plt+0x2a74>
   12bdc:	str	r3, [sp, #24]
   12be0:	ldr	r3, [sp, #168]	; 0xa8
   12be4:	ldr	ip, [ip]
   12be8:	str	r3, [sp, #56]	; 0x38
   12bec:	ldr	r3, [sp, #172]	; 0xac
   12bf0:	ldr	r8, [sp, #160]	; 0xa0
   12bf4:	str	r3, [sp, #80]	; 0x50
   12bf8:	ldr	r3, [sp, #176]	; 0xb0
   12bfc:	mov	fp, r0
   12c00:	str	r3, [sp, #76]	; 0x4c
   12c04:	mov	sl, r1
   12c08:	str	r2, [sp, #36]	; 0x24
   12c0c:	str	ip, [sp, #116]	; 0x74
   12c10:	bl	10dfc <__ctype_get_mb_cur_max@plt>
   12c14:	ldr	r3, [sp, #164]	; 0xa4
   12c18:	ands	r4, r3, #2
   12c1c:	movne	r3, #1
   12c20:	moveq	r3, #0
   12c24:	str	r3, [sp, #32]
   12c28:	str	r0, [sp, #64]	; 0x40
   12c2c:	cmp	r8, #10
   12c30:	ldrls	pc, [pc, r8, lsl #2]
   12c34:	b	143e4 <__assert_fail@plt+0x3480>
   12c38:	andeq	r3, r1, ip, lsr #32
   12c3c:	andeq	r3, r1, r4, asr #1
   12c40:	andeq	r3, r1, r4, asr #13
   12c44:	andeq	r3, r1, r4, ror #1
   12c48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12c4c:	andeq	r2, r1, r0, ror #31
   12c50:	andeq	r3, r1, ip, asr r0
   12c54:	muleq	r1, r4, r0
   12c58:	andeq	r2, r1, r4, ror #24
   12c5c:	andeq	r2, r1, r4, ror #24
   12c60:	andeq	r2, r1, r4, ror #24
   12c64:	cmp	r8, #10
   12c68:	beq	12c8c <__assert_fail@plt+0x1d28>
   12c6c:	mov	r1, r8
   12c70:	ldr	r0, [pc, #3428]	; 139dc <__assert_fail@plt+0x2a78>
   12c74:	bl	12a88 <__assert_fail@plt+0x1b24>
   12c78:	mov	r1, r8
   12c7c:	str	r0, [sp, #80]	; 0x50
   12c80:	ldr	r0, [pc, #3420]	; 139e4 <__assert_fail@plt+0x2a80>
   12c84:	bl	12a88 <__assert_fail@plt+0x1b24>
   12c88:	str	r0, [sp, #76]	; 0x4c
   12c8c:	cmp	r4, #0
   12c90:	movne	r4, #0
   12c94:	beq	140a4 <__assert_fail@plt+0x3140>
   12c98:	ldr	r7, [sp, #76]	; 0x4c
   12c9c:	mov	r5, #0
   12ca0:	mov	r6, #1
   12ca4:	mov	r0, r7
   12ca8:	str	r6, [sp, #40]	; 0x28
   12cac:	str	r5, [sp, #68]	; 0x44
   12cb0:	bl	10e80 <strlen@plt>
   12cb4:	str	r6, [sp, #28]
   12cb8:	str	r5, [sp, #44]	; 0x2c
   12cbc:	str	r5, [sp, #72]	; 0x48
   12cc0:	str	r7, [sp, #60]	; 0x3c
   12cc4:	str	r0, [sp, #52]	; 0x34
   12cc8:	str	r8, [sp, #160]	; 0xa0
   12ccc:	mov	r8, fp
   12cd0:	ldr	fp, [sp, #160]	; 0xa0
   12cd4:	mov	r9, #0
   12cd8:	ldr	r3, [sp, #24]
   12cdc:	cmn	r3, #1
   12ce0:	beq	13248 <__assert_fail@plt+0x22e4>
   12ce4:	ldr	r3, [sp, #24]
   12ce8:	subs	r6, r3, r9
   12cec:	movne	r6, #1
   12cf0:	cmp	r6, #0
   12cf4:	beq	13260 <__assert_fail@plt+0x22fc>
   12cf8:	ldr	r7, [sp, #28]
   12cfc:	ldr	r0, [sp, #36]	; 0x24
   12d00:	cmp	fp, #2
   12d04:	moveq	r7, #0
   12d08:	andne	r7, r7, #1
   12d0c:	add	r3, r0, r9
   12d10:	cmp	r7, #0
   12d14:	str	r3, [sp, #48]	; 0x30
   12d18:	beq	13704 <__assert_fail@plt+0x27a0>
   12d1c:	ldr	r2, [sp, #52]	; 0x34
   12d20:	cmp	r2, #0
   12d24:	beq	139e8 <__assert_fail@plt+0x2a84>
   12d28:	ldr	r1, [sp, #24]
   12d2c:	cmp	r2, #1
   12d30:	mov	r3, r2
   12d34:	movls	r3, #0
   12d38:	movhi	r3, #1
   12d3c:	cmn	r1, #1
   12d40:	movne	r3, #0
   12d44:	cmp	r3, #0
   12d48:	add	r5, r9, r2
   12d4c:	beq	12d58 <__assert_fail@plt+0x1df4>
   12d50:	bl	10e80 <strlen@plt>
   12d54:	str	r0, [sp, #24]
   12d58:	ldr	r3, [sp, #24]
   12d5c:	cmp	r5, r3
   12d60:	bhi	139e8 <__assert_fail@plt+0x2a84>
   12d64:	ldr	r2, [sp, #52]	; 0x34
   12d68:	ldr	r1, [sp, #60]	; 0x3c
   12d6c:	ldr	r0, [sp, #48]	; 0x30
   12d70:	bl	10d9c <memcmp@plt>
   12d74:	cmp	r0, #0
   12d78:	bne	139e8 <__assert_fail@plt+0x2a84>
   12d7c:	ldr	r3, [sp, #32]
   12d80:	cmp	r3, #0
   12d84:	bne	142a4 <__assert_fail@plt+0x3340>
   12d88:	ldr	r3, [sp, #48]	; 0x30
   12d8c:	ldrb	r5, [r3]
   12d90:	cmp	r5, #126	; 0x7e
   12d94:	ldrls	pc, [pc, r5, lsl #2]
   12d98:	b	13668 <__assert_fail@plt+0x2704>
   12d9c:	andeq	r3, r1, r4, asr r5
   12da0:	andeq	r3, r1, r8, ror #12
   12da4:	andeq	r3, r1, r8, ror #12
   12da8:	andeq	r3, r1, r8, ror #12
   12dac:	andeq	r3, r1, r8, ror #12
   12db0:	andeq	r3, r1, r8, ror #12
   12db4:	andeq	r3, r1, r8, ror #12
   12db8:	andeq	r3, r1, r0, lsr #12
   12dbc:	andeq	r3, r1, r0, lsl r6
   12dc0:	andeq	r3, r1, r0, lsl r5
   12dc4:	ldrdeq	r3, [r1], -r8
   12dc8:	andeq	r3, r1, r0, lsr r5
   12dcc:	andeq	r3, r1, r8, lsl r5
   12dd0:	andeq	r3, r1, r8, asr #8
   12dd4:	andeq	r3, r1, r8, ror #12
   12dd8:	andeq	r3, r1, r8, ror #12
   12ddc:	andeq	r3, r1, r8, ror #12
   12de0:	andeq	r3, r1, r8, ror #12
   12de4:	andeq	r3, r1, r8, ror #12
   12de8:	andeq	r3, r1, r8, ror #12
   12dec:	andeq	r3, r1, r8, ror #12
   12df0:	andeq	r3, r1, r8, ror #12
   12df4:	andeq	r3, r1, r8, ror #12
   12df8:	andeq	r3, r1, r8, ror #12
   12dfc:	andeq	r3, r1, r8, ror #12
   12e00:	andeq	r3, r1, r8, ror #12
   12e04:	andeq	r3, r1, r8, ror #12
   12e08:	andeq	r3, r1, r8, ror #12
   12e0c:	andeq	r3, r1, r8, ror #12
   12e10:	andeq	r3, r1, r8, ror #12
   12e14:	andeq	r3, r1, r8, ror #12
   12e18:	andeq	r3, r1, r8, ror #12
   12e1c:	andeq	r3, r1, r8, lsr #12
   12e20:	andeq	r3, r1, ip, lsr r5
   12e24:	andeq	r3, r1, ip, lsr r5
   12e28:	andeq	r3, r1, r0, asr #12
   12e2c:	andeq	r3, r1, ip, lsr r5
   12e30:	andeq	r3, r1, ip, asr r6
   12e34:	andeq	r3, r1, ip, lsr r5
   12e38:	andeq	r3, r1, ip, ror r3
   12e3c:	andeq	r3, r1, ip, lsr r5
   12e40:	andeq	r3, r1, ip, lsr r5
   12e44:	andeq	r3, r1, ip, lsr r5
   12e48:	andeq	r3, r1, ip, asr r6
   12e4c:	andeq	r3, r1, ip, asr r6
   12e50:	andeq	r3, r1, ip, asr r6
   12e54:	andeq	r3, r1, ip, asr r6
   12e58:	andeq	r3, r1, ip, asr r6
   12e5c:	andeq	r3, r1, ip, asr r6
   12e60:	andeq	r3, r1, ip, asr r6
   12e64:	andeq	r3, r1, ip, asr r6
   12e68:	andeq	r3, r1, ip, asr r6
   12e6c:	andeq	r3, r1, ip, asr r6
   12e70:	andeq	r3, r1, ip, asr r6
   12e74:	andeq	r3, r1, ip, asr r6
   12e78:	andeq	r3, r1, ip, asr r6
   12e7c:	andeq	r3, r1, ip, asr r6
   12e80:	andeq	r3, r1, ip, asr r6
   12e84:	andeq	r3, r1, ip, asr r6
   12e88:	andeq	r3, r1, ip, lsr r5
   12e8c:	andeq	r3, r1, ip, lsr r5
   12e90:	andeq	r3, r1, ip, lsr r5
   12e94:	andeq	r3, r1, ip, lsr r5
   12e98:	andeq	r3, r1, r0, asr r3
   12e9c:	andeq	r3, r1, r8, ror #12
   12ea0:	andeq	r3, r1, ip, asr r6
   12ea4:	andeq	r3, r1, ip, asr r6
   12ea8:	andeq	r3, r1, ip, asr r6
   12eac:	andeq	r3, r1, ip, asr r6
   12eb0:	andeq	r3, r1, ip, asr r6
   12eb4:	andeq	r3, r1, ip, asr r6
   12eb8:	andeq	r3, r1, ip, asr r6
   12ebc:	andeq	r3, r1, ip, asr r6
   12ec0:	andeq	r3, r1, ip, asr r6
   12ec4:	andeq	r3, r1, ip, asr r6
   12ec8:	andeq	r3, r1, ip, asr r6
   12ecc:	andeq	r3, r1, ip, asr r6
   12ed0:	andeq	r3, r1, ip, asr r6
   12ed4:	andeq	r3, r1, ip, asr r6
   12ed8:	andeq	r3, r1, ip, asr r6
   12edc:	andeq	r3, r1, ip, asr r6
   12ee0:	andeq	r3, r1, ip, asr r6
   12ee4:	andeq	r3, r1, ip, asr r6
   12ee8:	andeq	r3, r1, ip, asr r6
   12eec:	andeq	r3, r1, ip, asr r6
   12ef0:	andeq	r3, r1, ip, asr r6
   12ef4:	andeq	r3, r1, ip, asr r6
   12ef8:	andeq	r3, r1, ip, asr r6
   12efc:	andeq	r3, r1, ip, asr r6
   12f00:	andeq	r3, r1, ip, asr r6
   12f04:	andeq	r3, r1, ip, asr r6
   12f08:	andeq	r3, r1, ip, lsr r5
   12f0c:	andeq	r3, r1, r8, lsl #6
   12f10:	andeq	r3, r1, ip, asr r6
   12f14:	andeq	r3, r1, ip, lsr r5
   12f18:	andeq	r3, r1, ip, asr r6
   12f1c:	andeq	r3, r1, ip, lsr r5
   12f20:	andeq	r3, r1, ip, asr r6
   12f24:	andeq	r3, r1, ip, asr r6
   12f28:	andeq	r3, r1, ip, asr r6
   12f2c:	andeq	r3, r1, ip, asr r6
   12f30:	andeq	r3, r1, ip, asr r6
   12f34:	andeq	r3, r1, ip, asr r6
   12f38:	andeq	r3, r1, ip, asr r6
   12f3c:	andeq	r3, r1, ip, asr r6
   12f40:	andeq	r3, r1, ip, asr r6
   12f44:	andeq	r3, r1, ip, asr r6
   12f48:	andeq	r3, r1, ip, asr r6
   12f4c:	andeq	r3, r1, ip, asr r6
   12f50:	andeq	r3, r1, ip, asr r6
   12f54:	andeq	r3, r1, ip, asr r6
   12f58:	andeq	r3, r1, ip, asr r6
   12f5c:	andeq	r3, r1, ip, asr r6
   12f60:	andeq	r3, r1, ip, asr r6
   12f64:	andeq	r3, r1, ip, asr r6
   12f68:	andeq	r3, r1, ip, asr r6
   12f6c:	andeq	r3, r1, ip, asr r6
   12f70:	andeq	r3, r1, ip, asr r6
   12f74:	andeq	r3, r1, ip, asr r6
   12f78:	andeq	r3, r1, ip, asr r6
   12f7c:	andeq	r3, r1, ip, asr r6
   12f80:	andeq	r3, r1, ip, asr r6
   12f84:	andeq	r3, r1, ip, asr r6
   12f88:	andeq	r3, r1, r0, lsr #2
   12f8c:	andeq	r3, r1, ip, lsr r5
   12f90:	andeq	r3, r1, r0, lsr #2
   12f94:	andeq	r3, r1, r0, asr #12
   12f98:	cmp	r4, #0
   12f9c:	moveq	r3, #1
   12fa0:	streq	r3, [sp, #28]
   12fa4:	beq	136d0 <__assert_fail@plt+0x276c>
   12fa8:	mov	r3, #0
   12fac:	mov	r4, r3
   12fb0:	mov	r2, #1
   12fb4:	str	r2, [sp, #40]	; 0x28
   12fb8:	str	r3, [sp, #68]	; 0x44
   12fbc:	str	r2, [sp, #32]
   12fc0:	str	r2, [sp, #52]	; 0x34
   12fc4:	ldr	r3, [pc, #2584]	; 139e4 <__assert_fail@plt+0x2a80>
   12fc8:	str	r4, [sp, #44]	; 0x2c
   12fcc:	str	r4, [sp, #72]	; 0x48
   12fd0:	str	r4, [sp, #28]
   12fd4:	str	r3, [sp, #60]	; 0x3c
   12fd8:	mov	r8, #2
   12fdc:	b	12cc8 <__assert_fail@plt+0x1d64>
   12fe0:	cmp	r4, #0
   12fe4:	bne	14270 <__assert_fail@plt+0x330c>
   12fe8:	cmp	sl, #0
   12fec:	beq	14030 <__assert_fail@plt+0x30cc>
   12ff0:	mov	r3, #34	; 0x22
   12ff4:	strb	r3, [fp]
   12ff8:	ldr	r3, [pc, #2528]	; 139e0 <__assert_fail@plt+0x2a7c>
   12ffc:	mov	r1, r4
   13000:	mov	r2, #1
   13004:	str	r4, [sp, #68]	; 0x44
   13008:	str	r2, [sp, #40]	; 0x28
   1300c:	mov	r4, r2
   13010:	str	r1, [sp, #44]	; 0x2c
   13014:	str	r1, [sp, #72]	; 0x48
   13018:	str	r1, [sp, #32]
   1301c:	str	r2, [sp, #28]
   13020:	str	r2, [sp, #52]	; 0x34
   13024:	str	r3, [sp, #60]	; 0x3c
   13028:	b	12cc8 <__assert_fail@plt+0x1d64>
   1302c:	mov	r3, #0
   13030:	str	r3, [sp, #68]	; 0x44
   13034:	str	r3, [sp, #44]	; 0x2c
   13038:	str	r3, [sp, #32]
   1303c:	str	r3, [sp, #28]
   13040:	str	r3, [sp, #60]	; 0x3c
   13044:	mov	r3, #1
   13048:	str	r8, [sp, #72]	; 0x48
   1304c:	str	r8, [sp, #52]	; 0x34
   13050:	mov	r4, r8
   13054:	str	r3, [sp, #40]	; 0x28
   13058:	b	12cc8 <__assert_fail@plt+0x1d64>
   1305c:	mov	r3, #1
   13060:	str	r3, [sp, #40]	; 0x28
   13064:	str	r3, [sp, #32]
   13068:	str	r3, [sp, #28]
   1306c:	str	r3, [sp, #52]	; 0x34
   13070:	ldr	r3, [pc, #2408]	; 139e0 <__assert_fail@plt+0x2a7c>
   13074:	mov	r2, #0
   13078:	mov	r4, r2
   1307c:	str	r2, [sp, #68]	; 0x44
   13080:	str	r2, [sp, #44]	; 0x2c
   13084:	str	r2, [sp, #72]	; 0x48
   13088:	str	r3, [sp, #60]	; 0x3c
   1308c:	mov	r8, #5
   13090:	b	12cc8 <__assert_fail@plt+0x1d64>
   13094:	mov	r3, #0
   13098:	mov	r2, #1
   1309c:	str	r2, [sp, #40]	; 0x28
   130a0:	mov	r4, r3
   130a4:	str	r3, [sp, #68]	; 0x44
   130a8:	str	r2, [sp, #28]
   130ac:	str	r3, [sp, #44]	; 0x2c
   130b0:	str	r3, [sp, #72]	; 0x48
   130b4:	str	r3, [sp, #32]
   130b8:	str	r3, [sp, #52]	; 0x34
   130bc:	str	r3, [sp, #60]	; 0x3c
   130c0:	b	12cc8 <__assert_fail@plt+0x1d64>
   130c4:	mov	r2, #1
   130c8:	mov	r3, #0
   130cc:	str	r2, [sp, #40]	; 0x28
   130d0:	mov	r4, r3
   130d4:	str	r3, [sp, #68]	; 0x44
   130d8:	str	r8, [sp, #52]	; 0x34
   130dc:	str	r2, [sp, #32]
   130e0:	b	12fc4 <__assert_fail@plt+0x2060>
   130e4:	mov	r3, #1
   130e8:	str	r3, [sp, #40]	; 0x28
   130ec:	str	r3, [sp, #32]
   130f0:	str	r3, [sp, #28]
   130f4:	str	r3, [sp, #52]	; 0x34
   130f8:	ldr	r3, [pc, #2276]	; 139e4 <__assert_fail@plt+0x2a80>
   130fc:	mov	r2, #0
   13100:	mov	r4, r2
   13104:	str	r2, [sp, #68]	; 0x44
   13108:	str	r2, [sp, #44]	; 0x2c
   1310c:	str	r2, [sp, #72]	; 0x48
   13110:	str	r3, [sp, #60]	; 0x3c
   13114:	mov	r8, #2
   13118:	b	12cc8 <__assert_fail@plt+0x1d64>
   1311c:	mov	r7, #0
   13120:	ldr	r3, [sp, #24]
   13124:	cmn	r3, #1
   13128:	beq	13c64 <__assert_fail@plt+0x2d00>
   1312c:	ldr	r3, [sp, #24]
   13130:	subs	r3, r3, #1
   13134:	movne	r3, #1
   13138:	cmp	r3, #0
   1313c:	sub	r2, fp, #2
   13140:	clz	r2, r2
   13144:	lsr	r2, r2, #5
   13148:	bne	13344 <__assert_fail@plt+0x23e0>
   1314c:	cmp	r9, #0
   13150:	bne	13344 <__assert_fail@plt+0x23e0>
   13154:	ldr	r3, [sp, #32]
   13158:	tst	r3, r2
   1315c:	bne	13464 <__assert_fail@plt+0x2500>
   13160:	ldr	r3, [sp, #28]
   13164:	eor	r3, r3, #1
   13168:	orr	r3, r2, r3
   1316c:	ldr	r2, [sp, #32]
   13170:	eor	r3, r3, #1
   13174:	orrs	r3, r2, r3
   13178:	beq	131a8 <__assert_fail@plt+0x2244>
   1317c:	mov	r3, #0
   13180:	ldr	r1, [sp, #56]	; 0x38
   13184:	cmp	r1, #0
   13188:	beq	131a8 <__assert_fail@plt+0x2244>
   1318c:	lsr	r2, r5, #5
   13190:	and	r0, r5, #31
   13194:	uxtb	r2, r2
   13198:	ldr	r1, [r1, r2, lsl #2]
   1319c:	lsr	r2, r1, r0
   131a0:	tst	r2, #1
   131a4:	bne	131b0 <__assert_fail@plt+0x224c>
   131a8:	cmp	r7, #0
   131ac:	beq	13400 <__assert_fail@plt+0x249c>
   131b0:	sub	r2, fp, #2
   131b4:	clz	r2, r2
   131b8:	lsr	r2, r2, #5
   131bc:	ldr	r3, [sp, #32]
   131c0:	cmp	r3, #0
   131c4:	bne	134f0 <__assert_fail@plt+0x258c>
   131c8:	ldr	r3, [sp, #44]	; 0x2c
   131cc:	eor	r3, r3, #1
   131d0:	ands	r3, r2, r3
   131d4:	beq	1320c <__assert_fail@plt+0x22a8>
   131d8:	cmp	sl, r4
   131dc:	movhi	r2, #39	; 0x27
   131e0:	strbhi	r2, [r8, r4]
   131e4:	add	r2, r4, #1
   131e8:	cmp	r2, sl
   131ec:	movcc	r1, #36	; 0x24
   131f0:	strbcc	r1, [r8, r2]
   131f4:	add	r2, r4, #2
   131f8:	cmp	r2, sl
   131fc:	add	r4, r4, #3
   13200:	movcc	r1, #39	; 0x27
   13204:	strbcc	r1, [r8, r2]
   13208:	str	r3, [sp, #44]	; 0x2c
   1320c:	cmp	r4, sl
   13210:	movcc	r3, #92	; 0x5c
   13214:	strbcc	r3, [r8, r4]
   13218:	add	r9, r9, #1
   1321c:	add	r4, r4, #1
   13220:	cmp	r4, sl
   13224:	ldr	r3, [sp, #40]	; 0x28
   13228:	strbcc	r5, [r8, r4]
   1322c:	cmp	r6, #0
   13230:	moveq	r3, #0
   13234:	str	r3, [sp, #40]	; 0x28
   13238:	ldr	r3, [sp, #24]
   1323c:	add	r4, r4, #1
   13240:	cmn	r3, #1
   13244:	bne	12ce4 <__assert_fail@plt+0x1d80>
   13248:	ldr	r3, [sp, #36]	; 0x24
   1324c:	ldrb	r6, [r3, r9]
   13250:	adds	r6, r6, #0
   13254:	movne	r6, #1
   13258:	cmp	r6, #0
   1325c:	bne	12cf8 <__assert_fail@plt+0x1d94>
   13260:	str	fp, [sp, #160]	; 0xa0
   13264:	mov	fp, r8
   13268:	ldr	r8, [sp, #160]	; 0xa0
   1326c:	ldr	r1, [sp, #32]
   13270:	cmp	r4, #0
   13274:	sub	r2, r8, #2
   13278:	clz	r2, r2
   1327c:	lsr	r2, r2, #5
   13280:	andeq	r3, r2, r1
   13284:	movne	r3, #0
   13288:	cmp	r3, #0
   1328c:	bne	14378 <__assert_fail@plt+0x3414>
   13290:	eor	r3, r1, #1
   13294:	ands	r2, r2, r3
   13298:	beq	142b4 <__assert_fail@plt+0x3350>
   1329c:	ldr	r3, [sp, #68]	; 0x44
   132a0:	cmp	r3, #0
   132a4:	beq	142b8 <__assert_fail@plt+0x3354>
   132a8:	ldr	r3, [sp, #40]	; 0x28
   132ac:	cmp	r3, #0
   132b0:	bne	14334 <__assert_fail@plt+0x33d0>
   132b4:	ldr	r3, [sp, #72]	; 0x48
   132b8:	adds	r3, r3, #0
   132bc:	movne	r3, #1
   132c0:	cmp	sl, #0
   132c4:	movne	r3, #0
   132c8:	cmp	r3, #0
   132cc:	ldreq	r2, [sp, #68]	; 0x44
   132d0:	beq	142b8 <__assert_fail@plt+0x3354>
   132d4:	ldr	sl, [sp, #72]	; 0x48
   132d8:	str	r3, [sp, #68]	; 0x44
   132dc:	ldr	r3, [pc, #1792]	; 139e4 <__assert_fail@plt+0x2a80>
   132e0:	mov	r2, #39	; 0x27
   132e4:	mov	r4, #1
   132e8:	str	r3, [sp, #60]	; 0x3c
   132ec:	mov	r3, #0
   132f0:	strb	r2, [fp]
   132f4:	str	r4, [sp, #52]	; 0x34
   132f8:	mov	r8, #2
   132fc:	str	r3, [sp, #32]
   13300:	b	12cc8 <__assert_fail@plt+0x1d64>
   13304:	mov	r7, #0
   13308:	cmp	fp, #2
   1330c:	beq	13c44 <__assert_fail@plt+0x2ce0>
   13310:	ldr	r3, [sp, #52]	; 0x34
   13314:	ldr	r2, [sp, #28]
   13318:	ldr	r1, [sp, #32]
   1331c:	cmp	r3, #0
   13320:	andne	r2, r2, r1
   13324:	moveq	r2, #0
   13328:	cmp	r2, #0
   1332c:	moveq	r5, #92	; 0x5c
   13330:	moveq	r3, r5
   13334:	bne	13c50 <__assert_fail@plt+0x2cec>
   13338:	ldr	r1, [sp, #28]
   1333c:	cmp	r1, #0
   13340:	bne	143c0 <__assert_fail@plt+0x345c>
   13344:	mov	r6, #0
   13348:	b	13160 <__assert_fail@plt+0x21fc>
   1334c:	mov	r7, #0
   13350:	cmp	fp, #2
   13354:	beq	13cb4 <__assert_fail@plt+0x2d50>
   13358:	cmp	fp, #5
   1335c:	beq	13c78 <__assert_fail@plt+0x2d14>
   13360:	sub	r2, fp, #2
   13364:	mov	r6, #0
   13368:	clz	r2, r2
   1336c:	mov	r5, #63	; 0x3f
   13370:	lsr	r2, r2, #5
   13374:	b	13160 <__assert_fail@plt+0x21fc>
   13378:	mov	r7, #0
   1337c:	cmp	fp, #2
   13380:	strne	r6, [sp, #68]	; 0x44
   13384:	movne	r2, #0
   13388:	movne	r5, #39	; 0x27
   1338c:	bne	13160 <__assert_fail@plt+0x21fc>
   13390:	ldr	r3, [sp, #32]
   13394:	cmp	r3, #0
   13398:	bne	14094 <__assert_fail@plt+0x3130>
   1339c:	cmp	sl, #0
   133a0:	ldr	r3, [sp, #72]	; 0x48
   133a4:	clz	r3, r3
   133a8:	lsr	r3, r3, #5
   133ac:	moveq	r3, #0
   133b0:	cmp	r3, #0
   133b4:	bne	13fc8 <__assert_fail@plt+0x3064>
   133b8:	cmp	sl, r4
   133bc:	movhi	r3, #39	; 0x27
   133c0:	strbhi	r3, [r8, r4]
   133c4:	add	r3, r4, #1
   133c8:	cmp	sl, r3
   133cc:	movhi	r2, #92	; 0x5c
   133d0:	strbhi	r2, [r8, r3]
   133d4:	add	r3, r4, #2
   133d8:	cmp	sl, r3
   133dc:	movhi	r2, #39	; 0x27
   133e0:	strbhi	r2, [r8, r3]
   133e4:	mov	r3, #0
   133e8:	cmp	r7, #0
   133ec:	add	r4, r4, #3
   133f0:	str	r3, [sp, #44]	; 0x2c
   133f4:	str	r6, [sp, #68]	; 0x44
   133f8:	mov	r5, #39	; 0x27
   133fc:	bne	131b0 <__assert_fail@plt+0x224c>
   13400:	ldr	r2, [sp, #44]	; 0x2c
   13404:	eor	r3, r3, #1
   13408:	and	r3, r3, r2
   1340c:	add	r9, r9, #1
   13410:	uxtb	r3, r3
   13414:	cmp	r3, #0
   13418:	beq	13220 <__assert_fail@plt+0x22bc>
   1341c:	cmp	sl, r4
   13420:	movhi	r3, #39	; 0x27
   13424:	strbhi	r3, [r8, r4]
   13428:	add	r3, r4, #1
   1342c:	cmp	sl, r3
   13430:	movhi	r2, #39	; 0x27
   13434:	strbhi	r2, [r8, r3]
   13438:	mov	r3, #0
   1343c:	add	r4, r4, #2
   13440:	str	r3, [sp, #44]	; 0x2c
   13444:	b	13220 <__assert_fail@plt+0x22bc>
   13448:	mov	r3, #114	; 0x72
   1344c:	ldr	r1, [sp, #32]
   13450:	sub	r2, fp, #2
   13454:	clz	r2, r2
   13458:	lsr	r2, r2, #5
   1345c:	tst	r2, r1
   13460:	beq	13338 <__assert_fail@plt+0x23d4>
   13464:	mov	fp, r8
   13468:	mov	r8, #2
   1346c:	ldr	r3, [sp, #28]
   13470:	cmp	r3, #0
   13474:	movne	r8, #4
   13478:	ldr	r3, [sp, #164]	; 0xa4
   1347c:	mov	ip, #0
   13480:	bic	r3, r3, #2
   13484:	str	r3, [sp, #4]
   13488:	ldr	r3, [sp, #76]	; 0x4c
   1348c:	str	r8, [sp]
   13490:	str	r3, [sp, #16]
   13494:	ldr	r3, [sp, #80]	; 0x50
   13498:	ldr	r2, [sp, #36]	; 0x24
   1349c:	str	r3, [sp, #12]
   134a0:	mov	r1, sl
   134a4:	ldr	r3, [sp, #24]
   134a8:	mov	r0, fp
   134ac:	str	ip, [sp, #8]
   134b0:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   134b4:	mov	r4, r0
   134b8:	ldr	r3, [pc, #1304]	; 139d8 <__assert_fail@plt+0x2a74>
   134bc:	ldr	r2, [sp, #116]	; 0x74
   134c0:	mov	r0, r4
   134c4:	ldr	r3, [r3]
   134c8:	cmp	r2, r3
   134cc:	bne	143bc <__assert_fail@plt+0x3458>
   134d0:	add	sp, sp, #124	; 0x7c
   134d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134d8:	mov	r5, #110	; 0x6e
   134dc:	ldr	r3, [sp, #32]
   134e0:	mov	r2, #0
   134e4:	cmp	r3, #0
   134e8:	mov	r6, r2
   134ec:	beq	131c8 <__assert_fail@plt+0x2264>
   134f0:	str	fp, [sp, #160]	; 0xa0
   134f4:	mov	fp, r8
   134f8:	ldr	r8, [sp, #160]	; 0xa0
   134fc:	mov	r3, r2
   13500:	ldr	r2, [sp, #28]
   13504:	and	r2, r2, r3
   13508:	str	r2, [sp, #28]
   1350c:	b	1346c <__assert_fail@plt+0x2508>
   13510:	mov	r5, #116	; 0x74
   13514:	b	134dc <__assert_fail@plt+0x2578>
   13518:	mov	r5, #102	; 0x66
   1351c:	ldr	r3, [sp, #32]
   13520:	cmp	r3, #0
   13524:	bne	140d0 <__assert_fail@plt+0x316c>
   13528:	mov	r6, #0
   1352c:	b	1320c <__assert_fail@plt+0x22a8>
   13530:	mov	r5, #118	; 0x76
   13534:	b	1351c <__assert_fail@plt+0x25b8>
   13538:	mov	r7, #0
   1353c:	mov	r6, #0
   13540:	b	1317c <__assert_fail@plt+0x2218>
   13544:	ldr	r3, [sp, #32]
   13548:	cmp	r3, #0
   1354c:	bne	14314 <__assert_fail@plt+0x33b0>
   13550:	mov	r7, r3
   13554:	ldr	r3, [sp, #44]	; 0x2c
   13558:	sub	r2, fp, #2
   1355c:	eor	r3, r3, #1
   13560:	clz	r2, r2
   13564:	lsr	r2, r2, #5
   13568:	ands	r3, r2, r3
   1356c:	beq	13fb4 <__assert_fail@plt+0x3050>
   13570:	cmp	sl, r4
   13574:	movhi	r1, #39	; 0x27
   13578:	strbhi	r1, [r8, r4]
   1357c:	add	r1, r4, #1
   13580:	cmp	sl, r1
   13584:	movhi	r0, #36	; 0x24
   13588:	strbhi	r0, [r8, r1]
   1358c:	add	r1, r4, #2
   13590:	cmp	sl, r1
   13594:	movhi	r0, #39	; 0x27
   13598:	strbhi	r0, [r8, r1]
   1359c:	add	r1, r4, #3
   135a0:	cmp	sl, r1
   135a4:	bls	14014 <__assert_fail@plt+0x30b0>
   135a8:	mov	r4, r1
   135ac:	mov	r1, #92	; 0x5c
   135b0:	strb	r1, [r8, r4]
   135b4:	mov	r1, r4
   135b8:	str	r3, [sp, #44]	; 0x2c
   135bc:	cmp	fp, #2
   135c0:	add	r4, r4, #1
   135c4:	beq	1405c <__assert_fail@plt+0x30f8>
   135c8:	ldr	r0, [sp, #24]
   135cc:	add	r3, r9, #1
   135d0:	cmp	r3, r0
   135d4:	bcs	135ec <__assert_fail@plt+0x2688>
   135d8:	ldr	r0, [sp, #36]	; 0x24
   135dc:	ldrb	r3, [r0, r3]
   135e0:	sub	r3, r3, #48	; 0x30
   135e4:	cmp	r3, #9
   135e8:	bls	1406c <__assert_fail@plt+0x3108>
   135ec:	mov	r5, #48	; 0x30
   135f0:	ldr	r3, [sp, #28]
   135f4:	eor	r3, r3, #1
   135f8:	orrs	r2, r2, r3
   135fc:	mov	r3, r6
   13600:	moveq	r6, r2
   13604:	beq	13180 <__assert_fail@plt+0x221c>
   13608:	mov	r6, #0
   1360c:	b	131a8 <__assert_fail@plt+0x2244>
   13610:	mov	r2, #0
   13614:	mov	r6, r2
   13618:	mov	r5, #98	; 0x62
   1361c:	b	131c8 <__assert_fail@plt+0x2264>
   13620:	mov	r5, #97	; 0x61
   13624:	b	13528 <__assert_fail@plt+0x25c4>
   13628:	mov	r3, r7
   1362c:	mov	r6, r7
   13630:	mov	r2, #0
   13634:	mov	r7, r3
   13638:	mov	r5, #32
   1363c:	b	13160 <__assert_fail@plt+0x21fc>
   13640:	cmp	r9, #0
   13644:	mov	r3, r7
   13648:	bne	13c10 <__assert_fail@plt+0x2cac>
   1364c:	mov	r6, r7
   13650:	mov	r2, r9
   13654:	mov	r7, r3
   13658:	b	13160 <__assert_fail@plt+0x21fc>
   1365c:	mov	r6, r7
   13660:	b	1317c <__assert_fail@plt+0x2218>
   13664:	mov	r7, #0
   13668:	ldr	r3, [sp, #64]	; 0x40
   1366c:	cmp	r3, #1
   13670:	bne	13ccc <__assert_fail@plt+0x2d68>
   13674:	bl	10e68 <__ctype_b_loc@plt>
   13678:	ldr	r2, [sp, #64]	; 0x40
   1367c:	sxth	r3, r5
   13680:	mov	ip, r2
   13684:	lsl	r3, r3, #1
   13688:	ldr	r2, [r0]
   1368c:	ldrh	r3, [r2, r3]
   13690:	and	r3, r3, #16384	; 0x4000
   13694:	cmp	r3, #0
   13698:	ldr	r3, [sp, #28]
   1369c:	movne	r6, #1
   136a0:	moveq	r6, #0
   136a4:	movne	r2, #0
   136a8:	andeq	r2, r3, #1
   136ac:	cmp	r2, #0
   136b0:	bne	13fdc <__assert_fail@plt+0x3078>
   136b4:	sub	r2, fp, #2
   136b8:	clz	r2, r2
   136bc:	lsr	r2, r2, #5
   136c0:	b	13160 <__assert_fail@plt+0x21fc>
   136c4:	cmp	r4, #0
   136c8:	bne	14388 <__assert_fail@plt+0x3424>
   136cc:	str	r4, [sp, #28]
   136d0:	cmp	sl, #0
   136d4:	bne	143cc <__assert_fail@plt+0x3468>
   136d8:	ldr	r3, [pc, #772]	; 139e4 <__assert_fail@plt+0x2a80>
   136dc:	mov	r4, #1
   136e0:	str	r4, [sp, #40]	; 0x28
   136e4:	str	r3, [sp, #60]	; 0x3c
   136e8:	str	r4, [sp, #52]	; 0x34
   136ec:	str	sl, [sp, #72]	; 0x48
   136f0:	str	sl, [sp, #68]	; 0x44
   136f4:	str	sl, [sp, #44]	; 0x2c
   136f8:	str	sl, [sp, #32]
   136fc:	mov	r8, #2
   13700:	b	12cc8 <__assert_fail@plt+0x1d64>
   13704:	ldr	r3, [sp, #36]	; 0x24
   13708:	ldrb	r5, [r3, r9]
   1370c:	cmp	r5, #126	; 0x7e
   13710:	ldrls	pc, [pc, r5, lsl #2]
   13714:	b	13668 <__assert_fail@plt+0x2704>
   13718:	andeq	r3, r1, ip, asr #18
   1371c:	andeq	r3, r1, r8, ror #12
   13720:	andeq	r3, r1, r8, ror #12
   13724:	andeq	r3, r1, r8, ror #12
   13728:	andeq	r3, r1, r8, ror #12
   1372c:	andeq	r3, r1, r8, ror #12
   13730:	andeq	r3, r1, r8, ror #12
   13734:	andeq	r3, r1, r8, lsr r9
   13738:	andeq	r3, r1, r4, lsr #18
   1373c:	andeq	r3, r1, ip, lsl r9
   13740:	andeq	r3, r1, r4, lsl r9
   13744:	andeq	r3, r1, r4, asr #19
   13748:			; <UNDEFINED> instruction: 0x000139b0
   1374c:	andeq	r3, r1, r8, asr #8
   13750:	andeq	r3, r1, r8, ror #12
   13754:	andeq	r3, r1, r8, ror #12
   13758:	andeq	r3, r1, r8, ror #12
   1375c:	andeq	r3, r1, r8, ror #12
   13760:	andeq	r3, r1, r8, ror #12
   13764:	andeq	r3, r1, r8, ror #12
   13768:	andeq	r3, r1, r8, ror #12
   1376c:	andeq	r3, r1, r8, ror #12
   13770:	andeq	r3, r1, r8, ror #12
   13774:	andeq	r3, r1, r8, ror #12
   13778:	andeq	r3, r1, r8, ror #12
   1377c:	andeq	r3, r1, r8, ror #12
   13780:	andeq	r3, r1, r8, ror #12
   13784:	andeq	r3, r1, r8, ror #12
   13788:	andeq	r3, r1, r8, ror #12
   1378c:	andeq	r3, r1, r8, ror #12
   13790:	andeq	r3, r1, r8, ror #12
   13794:	andeq	r3, r1, r8, ror #12
   13798:	andeq	r3, r1, r0, lsr #19
   1379c:	andeq	r3, r1, ip, lsl #19
   137a0:	andeq	r3, r1, ip, lsl #19
   137a4:	andeq	r3, r1, ip, ror r9
   137a8:	andeq	r3, r1, ip, lsl #19
   137ac:			; <UNDEFINED> instruction: 0x000136b4
   137b0:	andeq	r3, r1, ip, lsl #19
   137b4:	andeq	r3, r1, ip, ror r3
   137b8:	andeq	r3, r1, ip, lsl #19
   137bc:	andeq	r3, r1, ip, lsl #19
   137c0:	andeq	r3, r1, ip, lsl #19
   137c4:			; <UNDEFINED> instruction: 0x000136b4
   137c8:			; <UNDEFINED> instruction: 0x000136b4
   137cc:			; <UNDEFINED> instruction: 0x000136b4
   137d0:			; <UNDEFINED> instruction: 0x000136b4
   137d4:			; <UNDEFINED> instruction: 0x000136b4
   137d8:			; <UNDEFINED> instruction: 0x000136b4
   137dc:			; <UNDEFINED> instruction: 0x000136b4
   137e0:			; <UNDEFINED> instruction: 0x000136b4
   137e4:			; <UNDEFINED> instruction: 0x000136b4
   137e8:			; <UNDEFINED> instruction: 0x000136b4
   137ec:			; <UNDEFINED> instruction: 0x000136b4
   137f0:			; <UNDEFINED> instruction: 0x000136b4
   137f4:			; <UNDEFINED> instruction: 0x000136b4
   137f8:			; <UNDEFINED> instruction: 0x000136b4
   137fc:			; <UNDEFINED> instruction: 0x000136b4
   13800:			; <UNDEFINED> instruction: 0x000136b4
   13804:	andeq	r3, r1, ip, lsl #19
   13808:	andeq	r3, r1, ip, lsl #19
   1380c:	andeq	r3, r1, ip, lsl #19
   13810:	andeq	r3, r1, ip, lsl #19
   13814:	andeq	r3, r1, r0, asr r3
   13818:	andeq	r3, r1, r8, ror #12
   1381c:			; <UNDEFINED> instruction: 0x000136b4
   13820:			; <UNDEFINED> instruction: 0x000136b4
   13824:			; <UNDEFINED> instruction: 0x000136b4
   13828:			; <UNDEFINED> instruction: 0x000136b4
   1382c:			; <UNDEFINED> instruction: 0x000136b4
   13830:			; <UNDEFINED> instruction: 0x000136b4
   13834:			; <UNDEFINED> instruction: 0x000136b4
   13838:			; <UNDEFINED> instruction: 0x000136b4
   1383c:			; <UNDEFINED> instruction: 0x000136b4
   13840:			; <UNDEFINED> instruction: 0x000136b4
   13844:			; <UNDEFINED> instruction: 0x000136b4
   13848:			; <UNDEFINED> instruction: 0x000136b4
   1384c:			; <UNDEFINED> instruction: 0x000136b4
   13850:			; <UNDEFINED> instruction: 0x000136b4
   13854:			; <UNDEFINED> instruction: 0x000136b4
   13858:			; <UNDEFINED> instruction: 0x000136b4
   1385c:			; <UNDEFINED> instruction: 0x000136b4
   13860:			; <UNDEFINED> instruction: 0x000136b4
   13864:			; <UNDEFINED> instruction: 0x000136b4
   13868:			; <UNDEFINED> instruction: 0x000136b4
   1386c:			; <UNDEFINED> instruction: 0x000136b4
   13870:			; <UNDEFINED> instruction: 0x000136b4
   13874:			; <UNDEFINED> instruction: 0x000136b4
   13878:			; <UNDEFINED> instruction: 0x000136b4
   1387c:			; <UNDEFINED> instruction: 0x000136b4
   13880:			; <UNDEFINED> instruction: 0x000136b4
   13884:	andeq	r3, r1, ip, lsl #19
   13888:	andeq	r3, r1, r8, lsl #6
   1388c:			; <UNDEFINED> instruction: 0x000136b4
   13890:	andeq	r3, r1, ip, lsl #19
   13894:			; <UNDEFINED> instruction: 0x000136b4
   13898:	andeq	r3, r1, ip, lsl #19
   1389c:			; <UNDEFINED> instruction: 0x000136b4
   138a0:			; <UNDEFINED> instruction: 0x000136b4
   138a4:			; <UNDEFINED> instruction: 0x000136b4
   138a8:			; <UNDEFINED> instruction: 0x000136b4
   138ac:			; <UNDEFINED> instruction: 0x000136b4
   138b0:			; <UNDEFINED> instruction: 0x000136b4
   138b4:			; <UNDEFINED> instruction: 0x000136b4
   138b8:			; <UNDEFINED> instruction: 0x000136b4
   138bc:			; <UNDEFINED> instruction: 0x000136b4
   138c0:			; <UNDEFINED> instruction: 0x000136b4
   138c4:			; <UNDEFINED> instruction: 0x000136b4
   138c8:			; <UNDEFINED> instruction: 0x000136b4
   138cc:			; <UNDEFINED> instruction: 0x000136b4
   138d0:			; <UNDEFINED> instruction: 0x000136b4
   138d4:			; <UNDEFINED> instruction: 0x000136b4
   138d8:			; <UNDEFINED> instruction: 0x000136b4
   138dc:			; <UNDEFINED> instruction: 0x000136b4
   138e0:			; <UNDEFINED> instruction: 0x000136b4
   138e4:			; <UNDEFINED> instruction: 0x000136b4
   138e8:			; <UNDEFINED> instruction: 0x000136b4
   138ec:			; <UNDEFINED> instruction: 0x000136b4
   138f0:			; <UNDEFINED> instruction: 0x000136b4
   138f4:			; <UNDEFINED> instruction: 0x000136b4
   138f8:			; <UNDEFINED> instruction: 0x000136b4
   138fc:			; <UNDEFINED> instruction: 0x000136b4
   13900:			; <UNDEFINED> instruction: 0x000136b4
   13904:	andeq	r3, r1, r0, lsr #2
   13908:	andeq	r3, r1, ip, lsl #19
   1390c:	andeq	r3, r1, r0, lsr #2
   13910:	andeq	r3, r1, ip, ror r9
   13914:	mov	r3, #110	; 0x6e
   13918:	b	1344c <__assert_fail@plt+0x24e8>
   1391c:	mov	r3, #116	; 0x74
   13920:	b	1344c <__assert_fail@plt+0x24e8>
   13924:	sub	r2, fp, #2
   13928:	mov	r3, #98	; 0x62
   1392c:	clz	r2, r2
   13930:	lsr	r2, r2, #5
   13934:	b	13338 <__assert_fail@plt+0x23d4>
   13938:	sub	r2, fp, #2
   1393c:	mov	r3, #97	; 0x61
   13940:	clz	r2, r2
   13944:	lsr	r2, r2, #5
   13948:	b	13338 <__assert_fail@plt+0x23d4>
   1394c:	ldr	r3, [sp, #28]
   13950:	cmp	r3, #0
   13954:	bne	13544 <__assert_fail@plt+0x25e0>
   13958:	ldr	r3, [sp, #164]	; 0xa4
   1395c:	tst	r3, #1
   13960:	bne	13fd4 <__assert_fail@plt+0x3070>
   13964:	ldr	r6, [sp, #28]
   13968:	sub	r2, fp, #2
   1396c:	mov	r7, r6
   13970:	clz	r2, r2
   13974:	lsr	r2, r2, #5
   13978:	b	13160 <__assert_fail@plt+0x21fc>
   1397c:	sub	r2, fp, #2
   13980:	clz	r2, r2
   13984:	lsr	r2, r2, #5
   13988:	b	1314c <__assert_fail@plt+0x21e8>
   1398c:	sub	r2, fp, #2
   13990:	mov	r6, #0
   13994:	clz	r2, r2
   13998:	lsr	r2, r2, #5
   1399c:	b	13154 <__assert_fail@plt+0x21f0>
   139a0:	sub	r2, fp, #2
   139a4:	clz	r2, r2
   139a8:	lsr	r2, r2, #5
   139ac:	b	13154 <__assert_fail@plt+0x21f0>
   139b0:	sub	r2, fp, #2
   139b4:	mov	r3, #102	; 0x66
   139b8:	clz	r2, r2
   139bc:	lsr	r2, r2, #5
   139c0:	b	13338 <__assert_fail@plt+0x23d4>
   139c4:	sub	r2, fp, #2
   139c8:	mov	r3, #118	; 0x76
   139cc:	clz	r2, r2
   139d0:	lsr	r2, r2, #5
   139d4:	b	13338 <__assert_fail@plt+0x23d4>
   139d8:	andeq	r7, r2, r8, lsl #30
   139dc:	ldrdeq	r6, [r1], -r0
   139e0:	andeq	r6, r1, ip, asr #16
   139e4:	andeq	r6, r1, ip, asr #31
   139e8:	ldr	r3, [sp, #48]	; 0x30
   139ec:	ldrb	r5, [r3]
   139f0:	cmp	r5, #126	; 0x7e
   139f4:	ldrls	pc, [pc, r5, lsl #2]
   139f8:	b	13664 <__assert_fail@plt+0x2700>
   139fc:	andeq	r3, r1, r4, asr #10
   13a00:	andeq	r3, r1, r4, ror #12
   13a04:	andeq	r3, r1, r4, ror #12
   13a08:	andeq	r3, r1, r4, ror #12
   13a0c:	andeq	r3, r1, r4, ror #12
   13a10:	andeq	r3, r1, r4, ror #12
   13a14:	andeq	r3, r1, r4, ror #12
   13a18:	andeq	r3, r1, ip, lsr ip
   13a1c:	andeq	r3, r1, r4, lsr ip
   13a20:	andeq	r3, r1, r0, lsl r5
   13a24:	ldrdeq	r3, [r1], -r8
   13a28:	andeq	r3, r1, r0, lsr r5
   13a2c:	andeq	r3, r1, r8, lsl r5
   13a30:	andeq	r3, r1, r8, lsr #24
   13a34:	andeq	r3, r1, r4, ror #12
   13a38:	andeq	r3, r1, r4, ror #12
   13a3c:	andeq	r3, r1, r4, ror #12
   13a40:	andeq	r3, r1, r4, ror #12
   13a44:	andeq	r3, r1, r4, ror #12
   13a48:	andeq	r3, r1, r4, ror #12
   13a4c:	andeq	r3, r1, r4, ror #12
   13a50:	andeq	r3, r1, r4, ror #12
   13a54:	andeq	r3, r1, r4, ror #12
   13a58:	andeq	r3, r1, r4, ror #12
   13a5c:	andeq	r3, r1, r4, ror #12
   13a60:	andeq	r3, r1, r4, ror #12
   13a64:	andeq	r3, r1, r4, ror #12
   13a68:	andeq	r3, r1, r4, ror #12
   13a6c:	andeq	r3, r1, r4, ror #12
   13a70:	andeq	r3, r1, r4, ror #12
   13a74:	andeq	r3, r1, r4, ror #12
   13a78:	andeq	r3, r1, r4, ror #12
   13a7c:	andeq	r3, r1, r0, lsr #24
   13a80:	andeq	r3, r1, r8, lsr r5
   13a84:	andeq	r3, r1, r8, lsr r5
   13a88:	andeq	r3, r1, r4, lsl #24
   13a8c:	andeq	r3, r1, r8, lsr r5
   13a90:	strdeq	r3, [r1], -r8
   13a94:	andeq	r3, r1, r8, lsr r5
   13a98:	andeq	r3, r1, r8, ror r3
   13a9c:	andeq	r3, r1, r8, lsr r5
   13aa0:	andeq	r3, r1, r8, lsr r5
   13aa4:	andeq	r3, r1, r8, lsr r5
   13aa8:	strdeq	r3, [r1], -r8
   13aac:	strdeq	r3, [r1], -r8
   13ab0:	strdeq	r3, [r1], -r8
   13ab4:	strdeq	r3, [r1], -r8
   13ab8:	strdeq	r3, [r1], -r8
   13abc:	strdeq	r3, [r1], -r8
   13ac0:	strdeq	r3, [r1], -r8
   13ac4:	strdeq	r3, [r1], -r8
   13ac8:	strdeq	r3, [r1], -r8
   13acc:	strdeq	r3, [r1], -r8
   13ad0:	strdeq	r3, [r1], -r8
   13ad4:	strdeq	r3, [r1], -r8
   13ad8:	strdeq	r3, [r1], -r8
   13adc:	strdeq	r3, [r1], -r8
   13ae0:	strdeq	r3, [r1], -r8
   13ae4:	strdeq	r3, [r1], -r8
   13ae8:	andeq	r3, r1, r8, lsr r5
   13aec:	andeq	r3, r1, r8, lsr r5
   13af0:	andeq	r3, r1, r8, lsr r5
   13af4:	andeq	r3, r1, r8, lsr r5
   13af8:	andeq	r3, r1, ip, asr #6
   13afc:	andeq	r3, r1, r4, ror #12
   13b00:	strdeq	r3, [r1], -r8
   13b04:	strdeq	r3, [r1], -r8
   13b08:	strdeq	r3, [r1], -r8
   13b0c:	strdeq	r3, [r1], -r8
   13b10:	strdeq	r3, [r1], -r8
   13b14:	strdeq	r3, [r1], -r8
   13b18:	strdeq	r3, [r1], -r8
   13b1c:	strdeq	r3, [r1], -r8
   13b20:	strdeq	r3, [r1], -r8
   13b24:	strdeq	r3, [r1], -r8
   13b28:	strdeq	r3, [r1], -r8
   13b2c:	strdeq	r3, [r1], -r8
   13b30:	strdeq	r3, [r1], -r8
   13b34:	strdeq	r3, [r1], -r8
   13b38:	strdeq	r3, [r1], -r8
   13b3c:	strdeq	r3, [r1], -r8
   13b40:	strdeq	r3, [r1], -r8
   13b44:	strdeq	r3, [r1], -r8
   13b48:	strdeq	r3, [r1], -r8
   13b4c:	strdeq	r3, [r1], -r8
   13b50:	strdeq	r3, [r1], -r8
   13b54:	strdeq	r3, [r1], -r8
   13b58:	strdeq	r3, [r1], -r8
   13b5c:	strdeq	r3, [r1], -r8
   13b60:	strdeq	r3, [r1], -r8
   13b64:	strdeq	r3, [r1], -r8
   13b68:	andeq	r3, r1, r8, lsr r5
   13b6c:	andeq	r3, r1, r4, lsl #6
   13b70:	strdeq	r3, [r1], -r8
   13b74:	andeq	r3, r1, r8, lsr r5
   13b78:	strdeq	r3, [r1], -r8
   13b7c:	andeq	r3, r1, r8, lsr r5
   13b80:	strdeq	r3, [r1], -r8
   13b84:	strdeq	r3, [r1], -r8
   13b88:	strdeq	r3, [r1], -r8
   13b8c:	strdeq	r3, [r1], -r8
   13b90:	strdeq	r3, [r1], -r8
   13b94:	strdeq	r3, [r1], -r8
   13b98:	strdeq	r3, [r1], -r8
   13b9c:	strdeq	r3, [r1], -r8
   13ba0:	strdeq	r3, [r1], -r8
   13ba4:	strdeq	r3, [r1], -r8
   13ba8:	strdeq	r3, [r1], -r8
   13bac:	strdeq	r3, [r1], -r8
   13bb0:	strdeq	r3, [r1], -r8
   13bb4:	strdeq	r3, [r1], -r8
   13bb8:	strdeq	r3, [r1], -r8
   13bbc:	strdeq	r3, [r1], -r8
   13bc0:	strdeq	r3, [r1], -r8
   13bc4:	strdeq	r3, [r1], -r8
   13bc8:	strdeq	r3, [r1], -r8
   13bcc:	strdeq	r3, [r1], -r8
   13bd0:	strdeq	r3, [r1], -r8
   13bd4:	strdeq	r3, [r1], -r8
   13bd8:	strdeq	r3, [r1], -r8
   13bdc:	strdeq	r3, [r1], -r8
   13be0:	strdeq	r3, [r1], -r8
   13be4:	strdeq	r3, [r1], -r8
   13be8:	andeq	r3, r1, ip, lsl r1
   13bec:	andeq	r3, r1, r8, lsr r5
   13bf0:	andeq	r3, r1, ip, lsl r1
   13bf4:	andeq	r3, r1, r4, lsl #24
   13bf8:	mov	r6, r7
   13bfc:	mov	r7, #0
   13c00:	b	1317c <__assert_fail@plt+0x2218>
   13c04:	cmp	r9, #0
   13c08:	mov	r3, #0
   13c0c:	beq	1364c <__assert_fail@plt+0x26e8>
   13c10:	mov	r6, #0
   13c14:	mov	r7, r3
   13c18:	mov	r3, r6
   13c1c:	b	13180 <__assert_fail@plt+0x221c>
   13c20:	mov	r3, #0
   13c24:	b	1362c <__assert_fail@plt+0x26c8>
   13c28:	mov	r7, #0
   13c2c:	mov	r3, #114	; 0x72
   13c30:	b	1344c <__assert_fail@plt+0x24e8>
   13c34:	mov	r5, #98	; 0x62
   13c38:	b	134dc <__assert_fail@plt+0x2578>
   13c3c:	mov	r5, #97	; 0x61
   13c40:	b	1351c <__assert_fail@plt+0x25b8>
   13c44:	ldr	r3, [sp, #32]
   13c48:	cmp	r3, #0
   13c4c:	bne	14094 <__assert_fail@plt+0x3130>
   13c50:	add	r9, r9, #1
   13c54:	ldr	r3, [sp, #44]	; 0x2c
   13c58:	mov	r6, #0
   13c5c:	mov	r5, #92	; 0x5c
   13c60:	b	13414 <__assert_fail@plt+0x24b0>
   13c64:	ldr	r3, [sp, #36]	; 0x24
   13c68:	ldrb	r3, [r3, #1]
   13c6c:	adds	r3, r3, #0
   13c70:	movne	r3, #1
   13c74:	b	13138 <__assert_fail@plt+0x21d4>
   13c78:	ldr	r3, [sp, #164]	; 0xa4
   13c7c:	ands	r3, r3, #4
   13c80:	beq	13ca4 <__assert_fail@plt+0x2d40>
   13c84:	ldr	r2, [sp, #24]
   13c88:	add	r3, r9, #2
   13c8c:	cmp	r3, r2
   13c90:	bcs	13ca4 <__assert_fail@plt+0x2d40>
   13c94:	ldr	r2, [sp, #48]	; 0x30
   13c98:	ldrb	r5, [r2, #1]
   13c9c:	cmp	r5, #63	; 0x3f
   13ca0:	beq	14108 <__assert_fail@plt+0x31a4>
   13ca4:	mov	r2, #0
   13ca8:	mov	r6, r2
   13cac:	mov	r5, #63	; 0x3f
   13cb0:	b	13160 <__assert_fail@plt+0x21fc>
   13cb4:	ldr	r3, [sp, #32]
   13cb8:	cmp	r3, #0
   13cbc:	bne	14094 <__assert_fail@plt+0x3130>
   13cc0:	mov	r6, r3
   13cc4:	mov	r5, #63	; 0x3f
   13cc8:	b	131a8 <__assert_fail@plt+0x2244>
   13ccc:	ldr	r3, [sp, #24]
   13cd0:	cmn	r3, #1
   13cd4:	mov	r3, #0
   13cd8:	str	r3, [sp, #108]	; 0x6c
   13cdc:	str	r3, [sp, #112]	; 0x70
   13ce0:	bne	13cf0 <__assert_fail@plt+0x2d8c>
   13ce4:	ldr	r0, [sp, #36]	; 0x24
   13ce8:	bl	10e80 <strlen@plt>
   13cec:	str	r0, [sp, #24]
   13cf0:	mov	r3, #0
   13cf4:	str	sl, [sp, #88]	; 0x58
   13cf8:	ldr	sl, [sp, #36]	; 0x24
   13cfc:	str	r5, [sp, #92]	; 0x5c
   13d00:	mov	r5, r3
   13d04:	str	r7, [sp, #96]	; 0x60
   13d08:	str	r4, [sp, #100]	; 0x64
   13d0c:	str	r8, [sp, #84]	; 0x54
   13d10:	ldr	r3, [sp, #24]
   13d14:	add	r4, r9, r5
   13d18:	add	r7, sl, r4
   13d1c:	sub	r2, r3, r4
   13d20:	mov	r1, r7
   13d24:	add	r3, sp, #108	; 0x6c
   13d28:	add	r0, sp, #104	; 0x68
   13d2c:	bl	16108 <__assert_fail@plt+0x51a4>
   13d30:	subs	r8, r0, #0
   13d34:	beq	13d84 <__assert_fail@plt+0x2e20>
   13d38:	cmn	r8, #1
   13d3c:	beq	140e4 <__assert_fail@plt+0x3180>
   13d40:	cmn	r8, #2
   13d44:	beq	14204 <__assert_fail@plt+0x32a0>
   13d48:	ldr	r3, [sp, #32]
   13d4c:	cmp	fp, #2
   13d50:	movne	r3, #0
   13d54:	andeq	r3, r3, #1
   13d58:	cmp	r3, #0
   13d5c:	bne	13ee4 <__assert_fail@plt+0x2f80>
   13d60:	ldr	r0, [sp, #104]	; 0x68
   13d64:	bl	10dd8 <iswprint@plt>
   13d68:	add	r5, r5, r8
   13d6c:	cmp	r0, #0
   13d70:	add	r0, sp, #108	; 0x6c
   13d74:	moveq	r6, #0
   13d78:	bl	10d84 <mbsinit@plt>
   13d7c:	cmp	r0, #0
   13d80:	beq	13d10 <__assert_fail@plt+0x2dac>
   13d84:	ldr	r3, [sp, #28]
   13d88:	mov	ip, r5
   13d8c:	eor	r2, r6, #1
   13d90:	ldr	r5, [sp, #92]	; 0x5c
   13d94:	ldr	r7, [sp, #96]	; 0x60
   13d98:	ldr	r4, [sp, #100]	; 0x64
   13d9c:	ldr	r8, [sp, #84]	; 0x54
   13da0:	ldr	sl, [sp, #88]	; 0x58
   13da4:	and	r2, r2, r3
   13da8:	cmp	ip, #1
   13dac:	bls	136ac <__assert_fail@plt+0x2748>
   13db0:	add	r1, ip, r9
   13db4:	ldr	lr, [sp, #48]	; 0x30
   13db8:	mov	r0, #0
   13dbc:	str	r6, [sp, #48]	; 0x30
   13dc0:	mov	ip, #39	; 0x27
   13dc4:	ldr	r6, [sp, #44]	; 0x2c
   13dc8:	b	13e80 <__assert_fail@plt+0x2f1c>
   13dcc:	ldr	r0, [sp, #32]
   13dd0:	sub	r3, fp, #2
   13dd4:	cmp	r0, #0
   13dd8:	clz	r3, r3
   13ddc:	lsr	r3, r3, #5
   13de0:	bne	13fe8 <__assert_fail@plt+0x3084>
   13de4:	eor	r0, r6, #1
   13de8:	ands	r3, r3, r0
   13dec:	beq	13e1c <__assert_fail@plt+0x2eb8>
   13df0:	add	r0, r4, #1
   13df4:	cmp	sl, r4
   13df8:	strbhi	ip, [r8, r4]
   13dfc:	cmp	sl, r0
   13e00:	movhi	r6, #36	; 0x24
   13e04:	strbhi	r6, [r8, r0]
   13e08:	add	r0, r4, #2
   13e0c:	mov	r6, r3
   13e10:	add	r4, r4, #3
   13e14:	cmp	sl, r0
   13e18:	strbhi	ip, [r8, r0]
   13e1c:	cmp	sl, r4
   13e20:	movhi	r3, #92	; 0x5c
   13e24:	strbhi	r3, [r8, r4]
   13e28:	add	r3, r4, #1
   13e2c:	cmp	sl, r3
   13e30:	lsrhi	r0, r5, #6
   13e34:	addhi	r0, r0, #48	; 0x30
   13e38:	strbhi	r0, [r8, r3]
   13e3c:	add	r0, r4, #2
   13e40:	cmp	sl, r0
   13e44:	lsrhi	r3, r5, #3
   13e48:	andhi	r3, r3, #7
   13e4c:	addhi	r3, r3, #48	; 0x30
   13e50:	add	r9, r9, #1
   13e54:	strbhi	r3, [r8, r0]
   13e58:	and	r5, r5, #7
   13e5c:	cmp	r9, r1
   13e60:	add	r5, r5, #48	; 0x30
   13e64:	add	r4, r4, #3
   13e68:	bcs	14008 <__assert_fail@plt+0x30a4>
   13e6c:	mov	r0, r2
   13e70:	cmp	sl, r4
   13e74:	strbhi	r5, [r8, r4]
   13e78:	ldrb	r5, [lr, #1]!
   13e7c:	add	r4, r4, #1
   13e80:	cmp	r2, #0
   13e84:	bne	13dcc <__assert_fail@plt+0x2e68>
   13e88:	eor	r3, r0, #1
   13e8c:	and	r3, r3, r6
   13e90:	cmp	r7, #0
   13e94:	uxtb	r3, r3
   13e98:	beq	13eac <__assert_fail@plt+0x2f48>
   13e9c:	cmp	sl, r4
   13ea0:	movhi	r7, #92	; 0x5c
   13ea4:	strbhi	r7, [r8, r4]
   13ea8:	add	r4, r4, #1
   13eac:	add	r9, r9, #1
   13eb0:	cmp	r9, r1
   13eb4:	bcs	13ffc <__assert_fail@plt+0x3098>
   13eb8:	cmp	r3, #0
   13ebc:	beq	14028 <__assert_fail@plt+0x30c4>
   13ec0:	cmp	sl, r4
   13ec4:	add	r3, r4, #1
   13ec8:	strbhi	ip, [r8, r4]
   13ecc:	mov	r7, #0
   13ed0:	cmp	sl, r3
   13ed4:	strbhi	ip, [r8, r3]
   13ed8:	add	r4, r4, #2
   13edc:	mov	r6, r7
   13ee0:	b	13e70 <__assert_fail@plt+0x2f0c>
   13ee4:	cmp	r8, #1
   13ee8:	beq	13d60 <__assert_fail@plt+0x2dfc>
   13eec:	add	r1, r4, #1
   13ef0:	add	r3, sl, r8
   13ef4:	add	r1, sl, r1
   13ef8:	add	r4, r3, r4
   13efc:	ldrb	r3, [r1], #1
   13f00:	sub	r3, r3, #91	; 0x5b
   13f04:	cmp	r3, #33	; 0x21
   13f08:	ldrls	pc, [pc, r3, lsl #2]
   13f0c:	b	13f98 <__assert_fail@plt+0x3034>
   13f10:	andeq	r3, r1, r4, lsr #31
   13f14:	andeq	r3, r1, r4, lsr #31
   13f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f1c:	andeq	r3, r1, r4, lsr #31
   13f20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f24:	andeq	r3, r1, r4, lsr #31
   13f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f34:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f94:	andeq	r3, r1, r4, lsr #31
   13f98:	cmp	r4, r1
   13f9c:	bne	13efc <__assert_fail@plt+0x2f98>
   13fa0:	b	13d60 <__assert_fail@plt+0x2dfc>
   13fa4:	ldr	fp, [sp, #84]	; 0x54
   13fa8:	ldr	sl, [sp, #88]	; 0x58
   13fac:	mov	r8, #2
   13fb0:	b	1346c <__assert_fail@plt+0x2508>
   13fb4:	cmp	sl, r4
   13fb8:	movls	r1, r4
   13fbc:	bls	135bc <__assert_fail@plt+0x2658>
   13fc0:	ldr	r3, [sp, #44]	; 0x2c
   13fc4:	b	135ac <__assert_fail@plt+0x2648>
   13fc8:	str	sl, [sp, #72]	; 0x48
   13fcc:	ldr	sl, [sp, #32]
   13fd0:	b	133e4 <__assert_fail@plt+0x2480>
   13fd4:	add	r9, r9, #1
   13fd8:	b	12cd8 <__assert_fail@plt+0x1d74>
   13fdc:	ldr	r2, [sp, #28]
   13fe0:	mov	r6, #0
   13fe4:	b	13db0 <__assert_fail@plt+0x2e4c>
   13fe8:	str	fp, [sp, #160]	; 0xa0
   13fec:	str	r3, [sp, #28]
   13ff0:	mov	fp, r8
   13ff4:	ldr	r8, [sp, #160]	; 0xa0
   13ff8:	b	1346c <__assert_fail@plt+0x2508>
   13ffc:	str	r6, [sp, #44]	; 0x2c
   14000:	ldr	r6, [sp, #48]	; 0x30
   14004:	b	13414 <__assert_fail@plt+0x24b0>
   14008:	str	r6, [sp, #44]	; 0x2c
   1400c:	ldr	r6, [sp, #48]	; 0x30
   14010:	b	13220 <__assert_fail@plt+0x22bc>
   14014:	add	r4, r4, #4
   14018:	str	r3, [sp, #44]	; 0x2c
   1401c:	mov	r6, #0
   14020:	mov	r5, #48	; 0x30
   14024:	b	131a8 <__assert_fail@plt+0x2244>
   14028:	mov	r7, r3
   1402c:	b	13e70 <__assert_fail@plt+0x2f0c>
   14030:	ldr	r3, [pc, #-1624]	; 139e0 <__assert_fail@plt+0x2a7c>
   14034:	mov	r4, #1
   14038:	str	r4, [sp, #40]	; 0x28
   1403c:	str	r4, [sp, #28]
   14040:	str	r4, [sp, #52]	; 0x34
   14044:	str	sl, [sp, #72]	; 0x48
   14048:	str	sl, [sp, #68]	; 0x44
   1404c:	str	sl, [sp, #44]	; 0x2c
   14050:	str	sl, [sp, #32]
   14054:	str	r3, [sp, #60]	; 0x3c
   14058:	b	12cc8 <__assert_fail@plt+0x1d64>
   1405c:	mov	r3, r6
   14060:	mov	r5, #48	; 0x30
   14064:	mov	r6, #0
   14068:	b	131a8 <__assert_fail@plt+0x2244>
   1406c:	cmp	sl, r4
   14070:	movhi	r3, #48	; 0x30
   14074:	strbhi	r3, [r8, r4]
   14078:	add	r3, r1, #2
   1407c:	cmp	sl, r3
   14080:	movhi	r0, #48	; 0x30
   14084:	strbhi	r0, [r8, r3]
   14088:	add	r4, r1, #3
   1408c:	mov	r5, #48	; 0x30
   14090:	b	135f0 <__assert_fail@plt+0x268c>
   14094:	str	fp, [sp, #160]	; 0xa0
   14098:	mov	fp, r8
   1409c:	ldr	r8, [sp, #160]	; 0xa0
   140a0:	b	1346c <__assert_fail@plt+0x2508>
   140a4:	ldr	r2, [sp, #80]	; 0x50
   140a8:	ldrb	r3, [r2]
   140ac:	cmp	r3, #0
   140b0:	beq	12c98 <__assert_fail@plt+0x1d34>
   140b4:	cmp	sl, r4
   140b8:	strbhi	r3, [fp, r4]
   140bc:	ldrb	r3, [r2, #1]!
   140c0:	add	r4, r4, #1
   140c4:	cmp	r3, #0
   140c8:	bne	140b4 <__assert_fail@plt+0x3150>
   140cc:	b	12c98 <__assert_fail@plt+0x1d34>
   140d0:	str	fp, [sp, #160]	; 0xa0
   140d4:	mov	r3, #0
   140d8:	mov	fp, r8
   140dc:	ldr	r8, [sp, #160]	; 0xa0
   140e0:	b	13500 <__assert_fail@plt+0x259c>
   140e4:	mov	ip, r5
   140e8:	ldr	r7, [sp, #96]	; 0x60
   140ec:	ldr	r5, [sp, #92]	; 0x5c
   140f0:	ldr	r4, [sp, #100]	; 0x64
   140f4:	ldr	r8, [sp, #84]	; 0x54
   140f8:	ldr	sl, [sp, #88]	; 0x58
   140fc:	ldr	r2, [sp, #28]
   14100:	mov	r6, #0
   14104:	b	13da8 <__assert_fail@plt+0x2e44>
   14108:	ldr	r2, [sp, #36]	; 0x24
   1410c:	ldrb	r1, [r2, r3]
   14110:	sub	r2, r1, #33	; 0x21
   14114:	cmp	r2, #29
   14118:	ldrls	pc, [pc, r2, lsl #2]
   1411c:	b	141f8 <__assert_fail@plt+0x3294>
   14120:	muleq	r1, r8, r1
   14124:	strdeq	r4, [r1], -r8
   14128:	strdeq	r4, [r1], -r8
   1412c:	strdeq	r4, [r1], -r8
   14130:	strdeq	r4, [r1], -r8
   14134:	strdeq	r4, [r1], -r8
   14138:	muleq	r1, r8, r1
   1413c:	muleq	r1, r8, r1
   14140:	muleq	r1, r8, r1
   14144:	strdeq	r4, [r1], -r8
   14148:	strdeq	r4, [r1], -r8
   1414c:	strdeq	r4, [r1], -r8
   14150:	muleq	r1, r8, r1
   14154:	strdeq	r4, [r1], -r8
   14158:	muleq	r1, r8, r1
   1415c:	strdeq	r4, [r1], -r8
   14160:	strdeq	r4, [r1], -r8
   14164:	strdeq	r4, [r1], -r8
   14168:	strdeq	r4, [r1], -r8
   1416c:	strdeq	r4, [r1], -r8
   14170:	strdeq	r4, [r1], -r8
   14174:	strdeq	r4, [r1], -r8
   14178:	strdeq	r4, [r1], -r8
   1417c:	strdeq	r4, [r1], -r8
   14180:	strdeq	r4, [r1], -r8
   14184:	strdeq	r4, [r1], -r8
   14188:	strdeq	r4, [r1], -r8
   1418c:	muleq	r1, r8, r1
   14190:	muleq	r1, r8, r1
   14194:	muleq	r1, r8, r1
   14198:	ldr	r2, [sp, #32]
   1419c:	cmp	r2, #0
   141a0:	bne	142a4 <__assert_fail@plt+0x3340>
   141a4:	cmp	sl, r4
   141a8:	movhi	r2, #63	; 0x3f
   141ac:	strbhi	r2, [r8, r4]
   141b0:	add	r2, r4, #1
   141b4:	cmp	sl, r2
   141b8:	movhi	r0, #34	; 0x22
   141bc:	strbhi	r0, [r8, r2]
   141c0:	add	r2, r4, #2
   141c4:	cmp	sl, r2
   141c8:	movhi	r0, #34	; 0x22
   141cc:	strbhi	r0, [r8, r2]
   141d0:	add	r2, r4, #3
   141d4:	cmp	sl, r2
   141d8:	movhi	r0, #63	; 0x3f
   141dc:	strbhi	r0, [r8, r2]
   141e0:	mov	r2, #0
   141e4:	add	r4, r4, #4
   141e8:	mov	r5, r1
   141ec:	mov	r9, r3
   141f0:	mov	r6, r2
   141f4:	b	135f0 <__assert_fail@plt+0x268c>
   141f8:	mov	r2, #0
   141fc:	mov	r6, r2
   14200:	b	13160 <__assert_fail@plt+0x21fc>
   14204:	ldr	r0, [sp, #24]
   14208:	mov	r1, r4
   1420c:	cmp	r1, r0
   14210:	mov	r2, r7
   14214:	mov	r3, r5
   14218:	mov	ip, r5
   1421c:	ldr	r7, [sp, #96]	; 0x60
   14220:	ldr	r5, [sp, #92]	; 0x5c
   14224:	ldr	r4, [sp, #100]	; 0x64
   14228:	ldr	r8, [sp, #84]	; 0x54
   1422c:	ldr	sl, [sp, #88]	; 0x58
   14230:	bcs	14264 <__assert_fail@plt+0x3300>
   14234:	ldrb	r6, [r2]
   14238:	cmp	r6, #0
   1423c:	bne	14250 <__assert_fail@plt+0x32ec>
   14240:	b	14380 <__assert_fail@plt+0x341c>
   14244:	ldrb	r6, [r2, #1]!
   14248:	cmp	r6, #0
   1424c:	beq	14308 <__assert_fail@plt+0x33a4>
   14250:	add	r3, r3, #1
   14254:	add	r1, r9, r3
   14258:	cmp	r1, r0
   1425c:	bcc	14244 <__assert_fail@plt+0x32e0>
   14260:	mov	ip, r3
   14264:	ldr	r2, [sp, #28]
   14268:	mov	r6, #0
   1426c:	b	13da8 <__assert_fail@plt+0x2e44>
   14270:	mov	r3, #1
   14274:	str	r3, [sp, #40]	; 0x28
   14278:	str	r3, [sp, #32]
   1427c:	str	r3, [sp, #28]
   14280:	str	r3, [sp, #52]	; 0x34
   14284:	ldr	r3, [pc, #-2220]	; 139e0 <__assert_fail@plt+0x2a7c>
   14288:	mov	r2, #0
   1428c:	str	r2, [sp, #68]	; 0x44
   14290:	str	r2, [sp, #44]	; 0x2c
   14294:	str	r2, [sp, #72]	; 0x48
   14298:	mov	r4, r2
   1429c:	str	r3, [sp, #60]	; 0x3c
   142a0:	b	12cc8 <__assert_fail@plt+0x1d64>
   142a4:	str	fp, [sp, #160]	; 0xa0
   142a8:	mov	fp, r8
   142ac:	ldr	r8, [sp, #160]	; 0xa0
   142b0:	b	13478 <__assert_fail@plt+0x2514>
   142b4:	mov	r2, r3
   142b8:	ldr	r3, [sp, #60]	; 0x3c
   142bc:	cmp	r3, #0
   142c0:	moveq	r2, #0
   142c4:	andne	r2, r2, #1
   142c8:	cmp	r2, #0
   142cc:	beq	142f8 <__assert_fail@plt+0x3394>
   142d0:	mov	r2, r3
   142d4:	ldrb	r3, [r3]
   142d8:	cmp	r3, #0
   142dc:	beq	142f8 <__assert_fail@plt+0x3394>
   142e0:	cmp	sl, r4
   142e4:	strbhi	r3, [fp, r4]
   142e8:	ldrb	r3, [r2, #1]!
   142ec:	add	r4, r4, #1
   142f0:	cmp	r3, #0
   142f4:	bne	142e0 <__assert_fail@plt+0x337c>
   142f8:	cmp	sl, r4
   142fc:	movhi	r3, #0
   14300:	strbhi	r3, [fp, r4]
   14304:	b	134b8 <__assert_fail@plt+0x2554>
   14308:	mov	ip, r3
   1430c:	ldr	r2, [sp, #28]
   14310:	b	13da8 <__assert_fail@plt+0x2e44>
   14314:	str	fp, [sp, #160]	; 0xa0
   14318:	mov	fp, r8
   1431c:	ldr	r8, [sp, #160]	; 0xa0
   14320:	sub	r3, r8, #2
   14324:	clz	r3, r3
   14328:	lsr	r3, r3, #5
   1432c:	str	r3, [sp, #28]
   14330:	b	1346c <__assert_fail@plt+0x2508>
   14334:	ldr	r3, [sp, #76]	; 0x4c
   14338:	mov	ip, #5
   1433c:	str	r3, [sp, #16]
   14340:	ldr	r3, [sp, #80]	; 0x50
   14344:	ldr	r2, [sp, #36]	; 0x24
   14348:	str	r3, [sp, #12]
   1434c:	ldr	r3, [sp, #56]	; 0x38
   14350:	ldr	r1, [sp, #72]	; 0x48
   14354:	str	r3, [sp, #8]
   14358:	ldr	r3, [sp, #164]	; 0xa4
   1435c:	mov	r0, fp
   14360:	str	r3, [sp, #4]
   14364:	str	ip, [sp]
   14368:	ldr	r3, [sp, #24]
   1436c:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   14370:	mov	r4, r0
   14374:	b	134b8 <__assert_fail@plt+0x2554>
   14378:	mov	r8, #2
   1437c:	b	1346c <__assert_fail@plt+0x2508>
   14380:	ldr	r2, [sp, #28]
   14384:	b	13da8 <__assert_fail@plt+0x2e44>
   14388:	mov	r3, #0
   1438c:	str	r3, [sp, #68]	; 0x44
   14390:	str	r3, [sp, #44]	; 0x2c
   14394:	str	r3, [sp, #72]	; 0x48
   14398:	str	r3, [sp, #28]
   1439c:	mov	r4, r3
   143a0:	ldr	r3, [pc, #-2500]	; 139e4 <__assert_fail@plt+0x2a80>
   143a4:	mov	r2, #1
   143a8:	str	r2, [sp, #40]	; 0x28
   143ac:	str	r2, [sp, #32]
   143b0:	str	r2, [sp, #52]	; 0x34
   143b4:	str	r3, [sp, #60]	; 0x3c
   143b8:	b	12cc8 <__assert_fail@plt+0x1d64>
   143bc:	bl	10db4 <__stack_chk_fail@plt>
   143c0:	mov	r5, r3
   143c4:	mov	r6, #0
   143c8:	b	131bc <__assert_fail@plt+0x2258>
   143cc:	mov	r3, #0
   143d0:	mov	r2, #1
   143d4:	str	r3, [sp, #44]	; 0x2c
   143d8:	str	r3, [sp, #72]	; 0x48
   143dc:	str	r2, [sp, #40]	; 0x28
   143e0:	b	132d8 <__assert_fail@plt+0x2374>
   143e4:	bl	10f58 <abort@plt>
   143e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ec:	sub	sp, sp, #44	; 0x2c
   143f0:	mov	r6, r0
   143f4:	mov	r4, r3
   143f8:	mov	sl, r1
   143fc:	mov	fp, r2
   14400:	bl	10e98 <__errno_location@plt>
   14404:	ldr	r7, [pc, #364]	; 14578 <__assert_fail@plt+0x3614>
   14408:	cmp	r6, #0
   1440c:	ldr	r5, [r7]
   14410:	ldr	r3, [r0]
   14414:	str	r3, [sp, #24]
   14418:	blt	14574 <__assert_fail@plt+0x3610>
   1441c:	ldr	r3, [r7, #4]
   14420:	mov	r8, r0
   14424:	cmp	r3, r6
   14428:	bgt	14474 <__assert_fail@plt+0x3510>
   1442c:	cmn	r6, #-268435454	; 0xf0000002
   14430:	bgt	14570 <__assert_fail@plt+0x360c>
   14434:	add	r9, r6, #1
   14438:	add	r3, r7, #8
   1443c:	cmp	r5, r3
   14440:	lsl	r1, r9, #3
   14444:	beq	14550 <__assert_fail@plt+0x35ec>
   14448:	mov	r0, r5
   1444c:	bl	151dc <__assert_fail@plt+0x4278>
   14450:	mov	r5, r0
   14454:	str	r0, [r7]
   14458:	ldr	r0, [r7, #4]
   1445c:	mov	r1, #0
   14460:	sub	r2, r9, r0
   14464:	add	r0, r5, r0, lsl #3
   14468:	lsl	r2, r2, #3
   1446c:	bl	10eb0 <memset@plt>
   14470:	str	r9, [r7, #4]
   14474:	add	r3, r5, r6, lsl #3
   14478:	ldr	r1, [r4, #4]
   1447c:	ldr	r7, [r3, #4]
   14480:	ldr	r9, [r5, r6, lsl #3]
   14484:	ldr	r2, [r4, #40]	; 0x28
   14488:	ldr	ip, [r4, #44]	; 0x2c
   1448c:	str	r3, [sp, #28]
   14490:	ldr	r3, [r4]
   14494:	orr	r1, r1, #1
   14498:	add	lr, r4, #8
   1449c:	str	r1, [sp, #36]	; 0x24
   144a0:	str	r1, [sp, #4]
   144a4:	str	r2, [sp, #12]
   144a8:	str	r3, [sp]
   144ac:	mov	r0, r7
   144b0:	mov	r1, r9
   144b4:	str	ip, [sp, #16]
   144b8:	str	lr, [sp, #8]
   144bc:	mov	r3, fp
   144c0:	mov	r2, sl
   144c4:	str	lr, [sp, #32]
   144c8:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   144cc:	cmp	r9, r0
   144d0:	bhi	1453c <__assert_fail@plt+0x35d8>
   144d4:	ldr	r3, [pc, #160]	; 1457c <__assert_fail@plt+0x3618>
   144d8:	add	r9, r0, #1
   144dc:	cmp	r7, r3
   144e0:	str	r9, [r5, r6, lsl #3]
   144e4:	beq	144f0 <__assert_fail@plt+0x358c>
   144e8:	mov	r0, r7
   144ec:	bl	10d54 <free@plt>
   144f0:	mov	r0, r9
   144f4:	bl	15180 <__assert_fail@plt+0x421c>
   144f8:	ldr	lr, [sp, #28]
   144fc:	ldr	ip, [r4, #44]	; 0x2c
   14500:	ldr	r5, [r4, #40]	; 0x28
   14504:	mov	r3, fp
   14508:	mov	r2, sl
   1450c:	mov	r1, r9
   14510:	str	r0, [lr, #4]
   14514:	ldr	lr, [r4]
   14518:	ldr	r4, [sp, #32]
   1451c:	str	ip, [sp, #16]
   14520:	str	r4, [sp, #8]
   14524:	ldr	r4, [sp, #36]	; 0x24
   14528:	str	r5, [sp, #12]
   1452c:	str	r4, [sp, #4]
   14530:	str	lr, [sp]
   14534:	mov	r7, r0
   14538:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   1453c:	ldr	r3, [sp, #24]
   14540:	mov	r0, r7
   14544:	str	r3, [r8]
   14548:	add	sp, sp, #44	; 0x2c
   1454c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14550:	mov	r0, #0
   14554:	bl	151dc <__assert_fail@plt+0x4278>
   14558:	ldr	r3, [pc, #32]	; 14580 <__assert_fail@plt+0x361c>
   1455c:	mov	r5, r0
   14560:	ldm	r3, {r0, r1}
   14564:	str	r5, [r7]
   14568:	stm	r5, {r0, r1}
   1456c:	b	14458 <__assert_fail@plt+0x34f4>
   14570:	bl	153c8 <__assert_fail@plt+0x4464>
   14574:	bl	10f58 <abort@plt>
   14578:	strdeq	r8, [r2], -r0
   1457c:	muleq	r3, r8, r2
   14580:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14584:	push	{r4, r5, r6, lr}
   14588:	mov	r5, r0
   1458c:	bl	10e98 <__errno_location@plt>
   14590:	cmp	r5, #0
   14594:	mov	r1, #48	; 0x30
   14598:	mov	r4, r0
   1459c:	ldr	r0, [pc, #16]	; 145b4 <__assert_fail@plt+0x3650>
   145a0:	ldr	r6, [r4]
   145a4:	movne	r0, r5
   145a8:	bl	15388 <__assert_fail@plt+0x4424>
   145ac:	str	r6, [r4]
   145b0:	pop	{r4, r5, r6, pc}
   145b4:	muleq	r3, r8, r3
   145b8:	ldr	r3, [pc, #12]	; 145cc <__assert_fail@plt+0x3668>
   145bc:	cmp	r0, #0
   145c0:	moveq	r0, r3
   145c4:	ldr	r0, [r0]
   145c8:	bx	lr
   145cc:	muleq	r3, r8, r3
   145d0:	ldr	r3, [pc, #12]	; 145e4 <__assert_fail@plt+0x3680>
   145d4:	cmp	r0, #0
   145d8:	moveq	r0, r3
   145dc:	str	r1, [r0]
   145e0:	bx	lr
   145e4:	muleq	r3, r8, r3
   145e8:	ldr	r3, [pc, #52]	; 14624 <__assert_fail@plt+0x36c0>
   145ec:	cmp	r0, #0
   145f0:	moveq	r0, r3
   145f4:	add	r3, r0, #8
   145f8:	push	{lr}		; (str lr, [sp, #-4]!)
   145fc:	lsr	lr, r1, #5
   14600:	and	r1, r1, #31
   14604:	ldr	ip, [r3, lr, lsl #2]
   14608:	lsr	r0, ip, r1
   1460c:	eor	r2, r2, r0
   14610:	and	r2, r2, #1
   14614:	and	r0, r0, #1
   14618:	eor	r1, ip, r2, lsl r1
   1461c:	str	r1, [r3, lr, lsl #2]
   14620:	pop	{pc}		; (ldr pc, [sp], #4)
   14624:	muleq	r3, r8, r3
   14628:	ldr	r3, [pc, #16]	; 14640 <__assert_fail@plt+0x36dc>
   1462c:	cmp	r0, #0
   14630:	movne	r3, r0
   14634:	ldr	r0, [r3, #4]
   14638:	str	r1, [r3, #4]
   1463c:	bx	lr
   14640:	muleq	r3, r8, r3
   14644:	ldr	r3, [pc, #44]	; 14678 <__assert_fail@plt+0x3714>
   14648:	cmp	r0, #0
   1464c:	moveq	r0, r3
   14650:	mov	ip, #10
   14654:	cmp	r2, #0
   14658:	cmpne	r1, #0
   1465c:	str	ip, [r0]
   14660:	beq	14670 <__assert_fail@plt+0x370c>
   14664:	str	r1, [r0, #40]	; 0x28
   14668:	str	r2, [r0, #44]	; 0x2c
   1466c:	bx	lr
   14670:	push	{r4, lr}
   14674:	bl	10f58 <abort@plt>
   14678:	muleq	r3, r8, r3
   1467c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14680:	sub	sp, sp, #24
   14684:	ldr	ip, [pc, #108]	; 146f8 <__assert_fail@plt+0x3794>
   14688:	ldr	r4, [sp, #56]	; 0x38
   1468c:	mov	r9, r2
   14690:	cmp	r4, #0
   14694:	moveq	r4, ip
   14698:	mov	sl, r3
   1469c:	mov	r7, r0
   146a0:	mov	r8, r1
   146a4:	bl	10e98 <__errno_location@plt>
   146a8:	ldr	r3, [r4, #44]	; 0x2c
   146ac:	mov	r1, r8
   146b0:	ldr	r6, [r0]
   146b4:	str	r3, [sp, #16]
   146b8:	ldr	r2, [r4, #40]	; 0x28
   146bc:	add	r3, r4, #8
   146c0:	str	r3, [sp, #8]
   146c4:	str	r2, [sp, #12]
   146c8:	ldr	r2, [r4, #4]
   146cc:	mov	r5, r0
   146d0:	str	r2, [sp, #4]
   146d4:	ldr	ip, [r4]
   146d8:	mov	r3, sl
   146dc:	mov	r2, r9
   146e0:	mov	r0, r7
   146e4:	str	ip, [sp]
   146e8:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   146ec:	str	r6, [r5]
   146f0:	add	sp, sp, #24
   146f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146f8:	muleq	r3, r8, r3
   146fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14700:	cmp	r3, #0
   14704:	sub	sp, sp, #44	; 0x2c
   14708:	ldr	r4, [pc, #192]	; 147d0 <__assert_fail@plt+0x386c>
   1470c:	mov	r6, r2
   14710:	movne	r4, r3
   14714:	mov	r9, r1
   14718:	mov	r8, r0
   1471c:	bl	10e98 <__errno_location@plt>
   14720:	ldr	r3, [r4, #44]	; 0x2c
   14724:	ldr	r5, [r4, #4]
   14728:	add	sl, r4, #8
   1472c:	cmp	r6, #0
   14730:	orreq	r5, r5, #1
   14734:	mov	r1, #0
   14738:	ldr	r2, [r0]
   1473c:	str	r3, [sp, #16]
   14740:	ldr	r3, [r4, #40]	; 0x28
   14744:	stmib	sp, {r5, sl}
   14748:	str	r3, [sp, #12]
   1474c:	ldr	r3, [r4]
   14750:	mov	r7, r0
   14754:	str	r2, [sp, #28]
   14758:	str	r3, [sp]
   1475c:	mov	r2, r8
   14760:	mov	r3, r9
   14764:	mov	r0, r1
   14768:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   1476c:	add	r1, r0, #1
   14770:	mov	fp, r0
   14774:	mov	r0, r1
   14778:	str	r1, [sp, #36]	; 0x24
   1477c:	bl	15180 <__assert_fail@plt+0x421c>
   14780:	ldr	r3, [r4, #44]	; 0x2c
   14784:	mov	r2, r8
   14788:	str	r3, [sp, #16]
   1478c:	ldr	r3, [r4, #40]	; 0x28
   14790:	str	r5, [sp, #4]
   14794:	str	r3, [sp, #12]
   14798:	str	sl, [sp, #8]
   1479c:	ldr	ip, [r4]
   147a0:	ldr	r1, [sp, #36]	; 0x24
   147a4:	mov	r3, r9
   147a8:	str	ip, [sp]
   147ac:	str	r0, [sp, #32]
   147b0:	bl	12bd0 <__assert_fail@plt+0x1c6c>
   147b4:	ldr	r2, [sp, #28]
   147b8:	cmp	r6, #0
   147bc:	str	r2, [r7]
   147c0:	ldr	r0, [sp, #32]
   147c4:	strne	fp, [r6]
   147c8:	add	sp, sp, #44	; 0x2c
   147cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d0:	muleq	r3, r8, r3
   147d4:	mov	r3, r2
   147d8:	mov	r2, #0
   147dc:	b	146fc <__assert_fail@plt+0x3798>
   147e0:	push	{r4, r5, r6, r7, r8, lr}
   147e4:	ldr	r6, [pc, #112]	; 1485c <__assert_fail@plt+0x38f8>
   147e8:	ldr	r3, [r6, #4]
   147ec:	ldr	r7, [r6]
   147f0:	cmp	r3, #1
   147f4:	ble	14818 <__assert_fail@plt+0x38b4>
   147f8:	sub	r5, r7, #8
   147fc:	add	r5, r5, r3, lsl #3
   14800:	mov	r4, r7
   14804:	ldr	r0, [r4, #12]
   14808:	add	r4, r4, #8
   1480c:	bl	10d54 <free@plt>
   14810:	cmp	r4, r5
   14814:	bne	14804 <__assert_fail@plt+0x38a0>
   14818:	ldr	r0, [r7, #4]
   1481c:	ldr	r4, [pc, #60]	; 14860 <__assert_fail@plt+0x38fc>
   14820:	cmp	r0, r4
   14824:	beq	14838 <__assert_fail@plt+0x38d4>
   14828:	bl	10d54 <free@plt>
   1482c:	mov	r3, #256	; 0x100
   14830:	str	r4, [r6, #12]
   14834:	str	r3, [r6, #8]
   14838:	ldr	r4, [pc, #36]	; 14864 <__assert_fail@plt+0x3900>
   1483c:	cmp	r7, r4
   14840:	beq	14850 <__assert_fail@plt+0x38ec>
   14844:	mov	r0, r7
   14848:	bl	10d54 <free@plt>
   1484c:	str	r4, [r6]
   14850:	mov	r3, #1
   14854:	str	r3, [r6, #4]
   14858:	pop	{r4, r5, r6, r7, r8, pc}
   1485c:	strdeq	r8, [r2], -r0
   14860:	muleq	r3, r8, r2
   14864:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14868:	ldr	r3, [pc, #4]	; 14874 <__assert_fail@plt+0x3910>
   1486c:	mvn	r2, #0
   14870:	b	143e8 <__assert_fail@plt+0x3484>
   14874:	muleq	r3, r8, r3
   14878:	ldr	r3, [pc]	; 14880 <__assert_fail@plt+0x391c>
   1487c:	b	143e8 <__assert_fail@plt+0x3484>
   14880:	muleq	r3, r8, r3
   14884:	mov	r1, r0
   14888:	ldr	r3, [pc, #8]	; 14898 <__assert_fail@plt+0x3934>
   1488c:	mvn	r2, #0
   14890:	mov	r0, #0
   14894:	b	143e8 <__assert_fail@plt+0x3484>
   14898:	muleq	r3, r8, r3
   1489c:	mov	r2, r1
   148a0:	ldr	r3, [pc, #8]	; 148b0 <__assert_fail@plt+0x394c>
   148a4:	mov	r1, r0
   148a8:	mov	r0, #0
   148ac:	b	143e8 <__assert_fail@plt+0x3484>
   148b0:	muleq	r3, r8, r3
   148b4:	push	{r4, r5, r6, lr}
   148b8:	sub	sp, sp, #56	; 0x38
   148bc:	ldr	r4, [pc, #68]	; 14908 <__assert_fail@plt+0x39a4>
   148c0:	mov	r6, r2
   148c4:	mov	r5, r0
   148c8:	ldr	r3, [r4]
   148cc:	add	r0, sp, #4
   148d0:	str	r3, [sp, #52]	; 0x34
   148d4:	bl	12a60 <__assert_fail@plt+0x1afc>
   148d8:	add	r3, sp, #4
   148dc:	mvn	r2, #0
   148e0:	mov	r1, r6
   148e4:	mov	r0, r5
   148e8:	bl	143e8 <__assert_fail@plt+0x3484>
   148ec:	ldr	r2, [sp, #52]	; 0x34
   148f0:	ldr	r3, [r4]
   148f4:	cmp	r2, r3
   148f8:	bne	14904 <__assert_fail@plt+0x39a0>
   148fc:	add	sp, sp, #56	; 0x38
   14900:	pop	{r4, r5, r6, pc}
   14904:	bl	10db4 <__stack_chk_fail@plt>
   14908:	andeq	r7, r2, r8, lsl #30
   1490c:	push	{r4, r5, r6, r7, lr}
   14910:	sub	sp, sp, #60	; 0x3c
   14914:	ldr	r4, [pc, #72]	; 14964 <__assert_fail@plt+0x3a00>
   14918:	mov	r6, r2
   1491c:	mov	r7, r3
   14920:	ldr	ip, [r4]
   14924:	mov	r5, r0
   14928:	add	r0, sp, #4
   1492c:	str	ip, [sp, #52]	; 0x34
   14930:	bl	12a60 <__assert_fail@plt+0x1afc>
   14934:	add	r3, sp, #4
   14938:	mov	r2, r7
   1493c:	mov	r1, r6
   14940:	mov	r0, r5
   14944:	bl	143e8 <__assert_fail@plt+0x3484>
   14948:	ldr	r2, [sp, #52]	; 0x34
   1494c:	ldr	r3, [r4]
   14950:	cmp	r2, r3
   14954:	bne	14960 <__assert_fail@plt+0x39fc>
   14958:	add	sp, sp, #60	; 0x3c
   1495c:	pop	{r4, r5, r6, r7, pc}
   14960:	bl	10db4 <__stack_chk_fail@plt>
   14964:	andeq	r7, r2, r8, lsl #30
   14968:	mov	r2, r1
   1496c:	mov	r1, r0
   14970:	mov	r0, #0
   14974:	b	148b4 <__assert_fail@plt+0x3950>
   14978:	mov	r3, r2
   1497c:	mov	r2, r1
   14980:	mov	r1, r0
   14984:	mov	r0, #0
   14988:	b	1490c <__assert_fail@plt+0x39a8>
   1498c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14990:	mov	r4, r2
   14994:	ldr	lr, [pc, #128]	; 14a1c <__assert_fail@plt+0x3ab8>
   14998:	mov	r8, r0
   1499c:	mov	r9, r1
   149a0:	ldm	lr!, {r0, r1, r2, r3}
   149a4:	sub	sp, sp, #60	; 0x3c
   149a8:	add	ip, sp, #4
   149ac:	lsr	r6, r4, #5
   149b0:	stmia	ip!, {r0, r1, r2, r3}
   149b4:	add	r7, sp, #12
   149b8:	ldm	lr!, {r0, r1, r2, r3}
   149bc:	and	r4, r4, #31
   149c0:	ldr	r5, [pc, #88]	; 14a20 <__assert_fail@plt+0x3abc>
   149c4:	stmia	ip!, {r0, r1, r2, r3}
   149c8:	ldm	lr, {r0, r1, r2, r3}
   149cc:	stm	ip, {r0, r1, r2, r3}
   149d0:	mov	r2, r9
   149d4:	ldr	r3, [r7, r6, lsl #2]
   149d8:	ldr	ip, [r5]
   149dc:	mov	r1, r8
   149e0:	mvn	r0, r3, lsr r4
   149e4:	and	r0, r0, #1
   149e8:	str	ip, [sp, #52]	; 0x34
   149ec:	eor	r4, r3, r0, lsl r4
   149f0:	add	r3, sp, #4
   149f4:	mov	r0, #0
   149f8:	str	r4, [r7, r6, lsl #2]
   149fc:	bl	143e8 <__assert_fail@plt+0x3484>
   14a00:	ldr	r2, [sp, #52]	; 0x34
   14a04:	ldr	r3, [r5]
   14a08:	cmp	r2, r3
   14a0c:	bne	14a18 <__assert_fail@plt+0x3ab4>
   14a10:	add	sp, sp, #60	; 0x3c
   14a14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14a18:	bl	10db4 <__stack_chk_fail@plt>
   14a1c:	muleq	r3, r8, r3
   14a20:	andeq	r7, r2, r8, lsl #30
   14a24:	mov	r2, r1
   14a28:	mvn	r1, #0
   14a2c:	b	1498c <__assert_fail@plt+0x3a28>
   14a30:	mov	r2, #58	; 0x3a
   14a34:	mvn	r1, #0
   14a38:	b	1498c <__assert_fail@plt+0x3a28>
   14a3c:	mov	r2, #58	; 0x3a
   14a40:	b	1498c <__assert_fail@plt+0x3a28>
   14a44:	push	{r4, r5, r6, r7, r8, lr}
   14a48:	sub	sp, sp, #104	; 0x68
   14a4c:	ldr	r5, [pc, #120]	; 14acc <__assert_fail@plt+0x3b68>
   14a50:	mov	r6, r0
   14a54:	mov	r0, sp
   14a58:	ldr	r3, [r5]
   14a5c:	mov	r7, r2
   14a60:	str	r3, [sp, #100]	; 0x64
   14a64:	bl	12a60 <__assert_fail@plt+0x1afc>
   14a68:	mov	ip, sp
   14a6c:	add	lr, sp, #52	; 0x34
   14a70:	ldm	ip!, {r0, r1, r2, r3}
   14a74:	stmia	lr!, {r0, r1, r2, r3}
   14a78:	ldm	ip!, {r0, r1, r2, r3}
   14a7c:	ldr	r8, [sp, #64]	; 0x40
   14a80:	stmia	lr!, {r0, r1, r2, r3}
   14a84:	mvn	r4, r8
   14a88:	ldm	ip, {r0, r1, r2, r3}
   14a8c:	and	ip, r4, #67108864	; 0x4000000
   14a90:	eor	ip, ip, r8
   14a94:	str	ip, [sp, #64]	; 0x40
   14a98:	stm	lr, {r0, r1, r2, r3}
   14a9c:	add	r3, sp, #52	; 0x34
   14aa0:	mvn	r2, #0
   14aa4:	mov	r1, r7
   14aa8:	mov	r0, r6
   14aac:	bl	143e8 <__assert_fail@plt+0x3484>
   14ab0:	ldr	r2, [sp, #100]	; 0x64
   14ab4:	ldr	r3, [r5]
   14ab8:	cmp	r2, r3
   14abc:	bne	14ac8 <__assert_fail@plt+0x3b64>
   14ac0:	add	sp, sp, #104	; 0x68
   14ac4:	pop	{r4, r5, r6, r7, r8, pc}
   14ac8:	bl	10db4 <__stack_chk_fail@plt>
   14acc:	andeq	r7, r2, r8, lsl #30
   14ad0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ad4:	mov	r6, r1
   14ad8:	ldr	lr, [pc, #132]	; 14b64 <__assert_fail@plt+0x3c00>
   14adc:	mov	r5, r2
   14ae0:	mov	r8, r0
   14ae4:	mov	r9, r3
   14ae8:	ldm	lr!, {r0, r1, r2, r3}
   14aec:	sub	sp, sp, #60	; 0x3c
   14af0:	add	ip, sp, #4
   14af4:	ldr	r4, [pc, #108]	; 14b68 <__assert_fail@plt+0x3c04>
   14af8:	stmia	ip!, {r0, r1, r2, r3}
   14afc:	mov	r7, #10
   14b00:	ldm	lr!, {r0, r1, r2, r3}
   14b04:	cmp	r5, #0
   14b08:	cmpne	r6, #0
   14b0c:	str	r7, [sp, #4]
   14b10:	stmia	ip!, {r0, r1, r2, r3}
   14b14:	ldm	lr, {r0, r1, r2, r3}
   14b18:	ldr	lr, [r4]
   14b1c:	stm	ip, {r0, r1, r2, r3}
   14b20:	str	lr, [sp, #52]	; 0x34
   14b24:	beq	14b60 <__assert_fail@plt+0x3bfc>
   14b28:	add	r3, sp, #4
   14b2c:	ldr	r2, [sp, #88]	; 0x58
   14b30:	mov	r1, r9
   14b34:	mov	r0, r8
   14b38:	str	r6, [sp, #44]	; 0x2c
   14b3c:	str	r5, [sp, #48]	; 0x30
   14b40:	bl	143e8 <__assert_fail@plt+0x3484>
   14b44:	ldr	r2, [sp, #52]	; 0x34
   14b48:	ldr	r3, [r4]
   14b4c:	cmp	r2, r3
   14b50:	bne	14b5c <__assert_fail@plt+0x3bf8>
   14b54:	add	sp, sp, #60	; 0x3c
   14b58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14b5c:	bl	10db4 <__stack_chk_fail@plt>
   14b60:	bl	10f58 <abort@plt>
   14b64:	muleq	r3, r8, r3
   14b68:	andeq	r7, r2, r8, lsl #30
   14b6c:	push	{lr}		; (str lr, [sp, #-4]!)
   14b70:	sub	sp, sp, #12
   14b74:	mvn	ip, #0
   14b78:	str	ip, [sp]
   14b7c:	bl	14ad0 <__assert_fail@plt+0x3b6c>
   14b80:	add	sp, sp, #12
   14b84:	pop	{pc}		; (ldr pc, [sp], #4)
   14b88:	push	{lr}		; (str lr, [sp, #-4]!)
   14b8c:	sub	sp, sp, #12
   14b90:	mvn	ip, #0
   14b94:	mov	r3, r2
   14b98:	str	ip, [sp]
   14b9c:	mov	r2, r1
   14ba0:	mov	r1, r0
   14ba4:	mov	r0, #0
   14ba8:	bl	14ad0 <__assert_fail@plt+0x3b6c>
   14bac:	add	sp, sp, #12
   14bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bb4:	push	{lr}		; (str lr, [sp, #-4]!)
   14bb8:	sub	sp, sp, #12
   14bbc:	str	r3, [sp]
   14bc0:	mov	r3, r2
   14bc4:	mov	r2, r1
   14bc8:	mov	r1, r0
   14bcc:	mov	r0, #0
   14bd0:	bl	14ad0 <__assert_fail@plt+0x3b6c>
   14bd4:	add	sp, sp, #12
   14bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bdc:	ldr	r3, [pc]	; 14be4 <__assert_fail@plt+0x3c80>
   14be0:	b	143e8 <__assert_fail@plt+0x3484>
   14be4:	andeq	r8, r2, r0, lsl #2
   14be8:	mov	r2, r1
   14bec:	ldr	r3, [pc, #8]	; 14bfc <__assert_fail@plt+0x3c98>
   14bf0:	mov	r1, r0
   14bf4:	mov	r0, #0
   14bf8:	b	143e8 <__assert_fail@plt+0x3484>
   14bfc:	andeq	r8, r2, r0, lsl #2
   14c00:	ldr	r3, [pc, #4]	; 14c0c <__assert_fail@plt+0x3ca8>
   14c04:	mvn	r2, #0
   14c08:	b	143e8 <__assert_fail@plt+0x3484>
   14c0c:	andeq	r8, r2, r0, lsl #2
   14c10:	mov	r1, r0
   14c14:	ldr	r3, [pc, #8]	; 14c24 <__assert_fail@plt+0x3cc0>
   14c18:	mvn	r2, #0
   14c1c:	mov	r0, #0
   14c20:	b	143e8 <__assert_fail@plt+0x3484>
   14c24:	andeq	r8, r2, r0, lsl #2
   14c28:	push	{r4, r5, r6, lr}
   14c2c:	sub	sp, sp, #32
   14c30:	cmp	r1, #0
   14c34:	mov	r5, r0
   14c38:	ldr	r4, [sp, #48]	; 0x30
   14c3c:	ldr	r6, [sp, #52]	; 0x34
   14c40:	beq	14cd0 <__assert_fail@plt+0x3d6c>
   14c44:	strd	r2, [sp]
   14c48:	mov	r3, r1
   14c4c:	ldr	r2, [pc, #828]	; 14f90 <__assert_fail@plt+0x402c>
   14c50:	mov	r1, #1
   14c54:	bl	10ed4 <__fprintf_chk@plt>
   14c58:	mov	r2, #5
   14c5c:	ldr	r1, [pc, #816]	; 14f94 <__assert_fail@plt+0x4030>
   14c60:	mov	r0, #0
   14c64:	bl	10da8 <dcgettext@plt>
   14c68:	ldr	r3, [pc, #808]	; 14f98 <__assert_fail@plt+0x4034>
   14c6c:	ldr	r2, [pc, #808]	; 14f9c <__assert_fail@plt+0x4038>
   14c70:	str	r3, [sp]
   14c74:	mov	r1, #1
   14c78:	mov	r3, r0
   14c7c:	mov	r0, r5
   14c80:	bl	10ed4 <__fprintf_chk@plt>
   14c84:	ldr	r1, [pc, #788]	; 14fa0 <__assert_fail@plt+0x403c>
   14c88:	mov	r2, #5
   14c8c:	mov	r0, #0
   14c90:	bl	10da8 <dcgettext@plt>
   14c94:	mov	r1, r5
   14c98:	bl	10d0c <fputs_unlocked@plt>
   14c9c:	cmp	r6, #9
   14ca0:	ldrls	pc, [pc, r6, lsl #2]
   14ca4:	b	14f80 <__assert_fail@plt+0x401c>
   14ca8:	andeq	r4, r1, ip, lsl #31
   14cac:	andeq	r4, r1, r4, asr sp
   14cb0:	andeq	r4, r1, r0, lsl #27
   14cb4:			; <UNDEFINED> instruction: 0x00014db4
   14cb8:	strdeq	r4, [r1], -r0
   14cbc:	andeq	r4, r1, r0, lsr lr
   14cc0:	andeq	r4, r1, r8, ror lr
   14cc4:	andeq	r4, r1, r8, asr #29
   14cc8:	andeq	r4, r1, r0, lsr #30
   14ccc:	andeq	r4, r1, r8, ror #25
   14cd0:	str	r3, [sp]
   14cd4:	mov	r1, #1
   14cd8:	mov	r3, r2
   14cdc:	ldr	r2, [pc, #704]	; 14fa4 <__assert_fail@plt+0x4040>
   14ce0:	bl	10ed4 <__fprintf_chk@plt>
   14ce4:	b	14c58 <__assert_fail@plt+0x3cf4>
   14ce8:	ldr	r1, [pc, #696]	; 14fa8 <__assert_fail@plt+0x4044>
   14cec:	mov	r2, #5
   14cf0:	mov	r0, #0
   14cf4:	bl	10da8 <dcgettext@plt>
   14cf8:	ldr	r2, [r4, #32]
   14cfc:	ldr	r3, [r4, #28]
   14d00:	ldr	r1, [r4, #24]
   14d04:	str	r2, [sp, #28]
   14d08:	ldr	r2, [r4, #20]
   14d0c:	str	r3, [sp, #24]
   14d10:	ldr	r3, [r4, #16]
   14d14:	str	r1, [sp, #20]
   14d18:	ldr	r1, [r4, #12]
   14d1c:	str	r2, [sp, #16]
   14d20:	ldr	r2, [r4, #8]
   14d24:	str	r3, [sp, #12]
   14d28:	ldr	r3, [r4, #4]
   14d2c:	str	r1, [sp, #8]
   14d30:	str	r2, [sp, #4]
   14d34:	str	r3, [sp]
   14d38:	mov	r1, #1
   14d3c:	ldr	r3, [r4]
   14d40:	mov	r2, r0
   14d44:	mov	r0, r5
   14d48:	bl	10ed4 <__fprintf_chk@plt>
   14d4c:	add	sp, sp, #32
   14d50:	pop	{r4, r5, r6, pc}
   14d54:	mov	r2, #5
   14d58:	ldr	r1, [pc, #588]	; 14fac <__assert_fail@plt+0x4048>
   14d5c:	mov	r0, #0
   14d60:	bl	10da8 <dcgettext@plt>
   14d64:	ldr	r3, [r4]
   14d68:	mov	r1, #1
   14d6c:	mov	r2, r0
   14d70:	mov	r0, r5
   14d74:	add	sp, sp, #32
   14d78:	pop	{r4, r5, r6, lr}
   14d7c:	b	10ed4 <__fprintf_chk@plt>
   14d80:	mov	r2, #5
   14d84:	ldr	r1, [pc, #548]	; 14fb0 <__assert_fail@plt+0x404c>
   14d88:	mov	r0, #0
   14d8c:	bl	10da8 <dcgettext@plt>
   14d90:	ldr	r2, [r4, #4]
   14d94:	ldr	r3, [r4]
   14d98:	mov	r1, #1
   14d9c:	str	r2, [sp, #48]	; 0x30
   14da0:	mov	r2, r0
   14da4:	mov	r0, r5
   14da8:	add	sp, sp, #32
   14dac:	pop	{r4, r5, r6, lr}
   14db0:	b	10ed4 <__fprintf_chk@plt>
   14db4:	mov	r2, #5
   14db8:	ldr	r1, [pc, #500]	; 14fb4 <__assert_fail@plt+0x4050>
   14dbc:	mov	r0, #0
   14dc0:	bl	10da8 <dcgettext@plt>
   14dc4:	ldr	r2, [r4, #8]
   14dc8:	ldr	r3, [r4, #4]
   14dcc:	mov	r1, #1
   14dd0:	str	r2, [sp, #52]	; 0x34
   14dd4:	str	r3, [sp, #48]	; 0x30
   14dd8:	ldr	r3, [r4]
   14ddc:	mov	r2, r0
   14de0:	mov	r0, r5
   14de4:	add	sp, sp, #32
   14de8:	pop	{r4, r5, r6, lr}
   14dec:	b	10ed4 <__fprintf_chk@plt>
   14df0:	mov	r2, #5
   14df4:	ldr	r1, [pc, #444]	; 14fb8 <__assert_fail@plt+0x4054>
   14df8:	mov	r0, #0
   14dfc:	bl	10da8 <dcgettext@plt>
   14e00:	ldr	r1, [r4, #12]
   14e04:	ldr	r2, [r4, #8]
   14e08:	ldr	r3, [r4, #4]
   14e0c:	str	r1, [sp, #8]
   14e10:	str	r2, [sp, #4]
   14e14:	str	r3, [sp]
   14e18:	mov	r1, #1
   14e1c:	ldr	r3, [r4]
   14e20:	mov	r2, r0
   14e24:	mov	r0, r5
   14e28:	bl	10ed4 <__fprintf_chk@plt>
   14e2c:	b	14d4c <__assert_fail@plt+0x3de8>
   14e30:	mov	r2, #5
   14e34:	ldr	r1, [pc, #384]	; 14fbc <__assert_fail@plt+0x4058>
   14e38:	mov	r0, #0
   14e3c:	bl	10da8 <dcgettext@plt>
   14e40:	ldr	r3, [r4, #16]
   14e44:	ldr	r1, [r4, #12]
   14e48:	ldr	r2, [r4, #8]
   14e4c:	str	r3, [sp, #12]
   14e50:	ldr	r3, [r4, #4]
   14e54:	str	r1, [sp, #8]
   14e58:	str	r2, [sp, #4]
   14e5c:	str	r3, [sp]
   14e60:	mov	r1, #1
   14e64:	ldr	r3, [r4]
   14e68:	mov	r2, r0
   14e6c:	mov	r0, r5
   14e70:	bl	10ed4 <__fprintf_chk@plt>
   14e74:	b	14d4c <__assert_fail@plt+0x3de8>
   14e78:	mov	r2, #5
   14e7c:	ldr	r1, [pc, #316]	; 14fc0 <__assert_fail@plt+0x405c>
   14e80:	mov	r0, #0
   14e84:	bl	10da8 <dcgettext@plt>
   14e88:	ldr	r2, [r4, #20]
   14e8c:	ldr	r3, [r4, #16]
   14e90:	ldr	r1, [r4, #12]
   14e94:	str	r2, [sp, #16]
   14e98:	ldr	r2, [r4, #8]
   14e9c:	str	r3, [sp, #12]
   14ea0:	ldr	r3, [r4, #4]
   14ea4:	str	r1, [sp, #8]
   14ea8:	str	r2, [sp, #4]
   14eac:	str	r3, [sp]
   14eb0:	mov	r1, #1
   14eb4:	ldr	r3, [r4]
   14eb8:	mov	r2, r0
   14ebc:	mov	r0, r5
   14ec0:	bl	10ed4 <__fprintf_chk@plt>
   14ec4:	b	14d4c <__assert_fail@plt+0x3de8>
   14ec8:	mov	r2, #5
   14ecc:	ldr	r1, [pc, #240]	; 14fc4 <__assert_fail@plt+0x4060>
   14ed0:	mov	r0, #0
   14ed4:	bl	10da8 <dcgettext@plt>
   14ed8:	ldr	r1, [r4, #24]
   14edc:	ldr	r2, [r4, #20]
   14ee0:	ldr	r3, [r4, #16]
   14ee4:	str	r1, [sp, #20]
   14ee8:	ldr	r1, [r4, #12]
   14eec:	str	r2, [sp, #16]
   14ef0:	ldr	r2, [r4, #8]
   14ef4:	str	r3, [sp, #12]
   14ef8:	ldr	r3, [r4, #4]
   14efc:	str	r1, [sp, #8]
   14f00:	str	r2, [sp, #4]
   14f04:	str	r3, [sp]
   14f08:	mov	r1, #1
   14f0c:	ldr	r3, [r4]
   14f10:	mov	r2, r0
   14f14:	mov	r0, r5
   14f18:	bl	10ed4 <__fprintf_chk@plt>
   14f1c:	b	14d4c <__assert_fail@plt+0x3de8>
   14f20:	mov	r2, #5
   14f24:	ldr	r1, [pc, #156]	; 14fc8 <__assert_fail@plt+0x4064>
   14f28:	mov	r0, #0
   14f2c:	bl	10da8 <dcgettext@plt>
   14f30:	ldr	r3, [r4, #28]
   14f34:	ldr	r1, [r4, #24]
   14f38:	ldr	r2, [r4, #20]
   14f3c:	str	r3, [sp, #24]
   14f40:	ldr	r3, [r4, #16]
   14f44:	str	r1, [sp, #20]
   14f48:	ldr	r1, [r4, #12]
   14f4c:	str	r2, [sp, #16]
   14f50:	ldr	r2, [r4, #8]
   14f54:	str	r3, [sp, #12]
   14f58:	ldr	r3, [r4, #4]
   14f5c:	str	r1, [sp, #8]
   14f60:	str	r2, [sp, #4]
   14f64:	str	r3, [sp]
   14f68:	mov	r1, #1
   14f6c:	ldr	r3, [r4]
   14f70:	mov	r2, r0
   14f74:	mov	r0, r5
   14f78:	bl	10ed4 <__fprintf_chk@plt>
   14f7c:	b	14d4c <__assert_fail@plt+0x3de8>
   14f80:	mov	r2, #5
   14f84:	ldr	r1, [pc, #64]	; 14fcc <__assert_fail@plt+0x4068>
   14f88:	b	14cf0 <__assert_fail@plt+0x3d8c>
   14f8c:	bl	10f58 <abort@plt>
   14f90:	andeq	r7, r1, r8, lsr r0
   14f94:	andeq	r7, r1, ip, asr #32
   14f98:	andeq	r0, r0, r2, ror #15
   14f9c:	andeq	r7, r1, r0, lsr #6
   14fa0:	andeq	r7, r1, r0, asr r0
   14fa4:	andeq	r7, r1, r4, asr #32
   14fa8:	andeq	r7, r1, r8, lsr #4
   14fac:	andeq	r7, r1, ip, lsl r1
   14fb0:	andeq	r7, r1, ip, lsr #2
   14fb4:	andeq	r7, r1, r4, asr #2
   14fb8:	andeq	r7, r1, r0, ror #2
   14fbc:	andeq	r7, r1, r0, lsl #3
   14fc0:	andeq	r7, r1, r4, lsr #3
   14fc4:	andeq	r7, r1, ip, asr #3
   14fc8:	strdeq	r7, [r1], -r8
   14fcc:	andeq	r7, r1, ip, asr r2
   14fd0:	push	{r4, r5, lr}
   14fd4:	sub	sp, sp, #12
   14fd8:	ldr	r5, [sp, #24]
   14fdc:	ldr	ip, [r5]
   14fe0:	cmp	ip, #0
   14fe4:	beq	15000 <__assert_fail@plt+0x409c>
   14fe8:	mov	lr, r5
   14fec:	mov	ip, #0
   14ff0:	ldr	r4, [lr, #4]!
   14ff4:	add	ip, ip, #1
   14ff8:	cmp	r4, #0
   14ffc:	bne	14ff0 <__assert_fail@plt+0x408c>
   15000:	stm	sp, {r5, ip}
   15004:	bl	14c28 <__assert_fail@plt+0x3cc4>
   15008:	add	sp, sp, #12
   1500c:	pop	{r4, r5, pc}
   15010:	push	{r4, r5, r6, lr}
   15014:	sub	sp, sp, #56	; 0x38
   15018:	ldr	r6, [pc, #88]	; 15078 <__assert_fail@plt+0x4114>
   1501c:	ldr	r5, [sp, #72]	; 0x48
   15020:	add	r4, sp, #8
   15024:	ldr	ip, [r6]
   15028:	str	ip, [sp, #52]	; 0x34
   1502c:	mov	ip, #0
   15030:	ldr	lr, [r5], #4
   15034:	cmp	lr, #0
   15038:	str	lr, [r4, #4]!
   1503c:	beq	1504c <__assert_fail@plt+0x40e8>
   15040:	add	ip, ip, #1
   15044:	cmp	ip, #10
   15048:	bne	15030 <__assert_fail@plt+0x40cc>
   1504c:	add	lr, sp, #12
   15050:	str	ip, [sp, #4]
   15054:	str	lr, [sp]
   15058:	bl	14c28 <__assert_fail@plt+0x3cc4>
   1505c:	ldr	r2, [sp, #52]	; 0x34
   15060:	ldr	r3, [r6]
   15064:	cmp	r2, r3
   15068:	bne	15074 <__assert_fail@plt+0x4110>
   1506c:	add	sp, sp, #56	; 0x38
   15070:	pop	{r4, r5, r6, pc}
   15074:	bl	10db4 <__stack_chk_fail@plt>
   15078:	andeq	r7, r2, r8, lsl #30
   1507c:	push	{r3}		; (str r3, [sp, #-4]!)
   15080:	mov	ip, #0
   15084:	push	{r4, r5, r6, lr}
   15088:	sub	sp, sp, #60	; 0x3c
   1508c:	ldr	r6, [pc, #100]	; 150f8 <__assert_fail@plt+0x4194>
   15090:	add	r5, sp, #8
   15094:	add	r4, sp, #80	; 0x50
   15098:	ldr	r3, [r6]
   1509c:	str	r4, [sp, #8]
   150a0:	str	r3, [sp, #52]	; 0x34
   150a4:	ldr	r3, [sp, #76]	; 0x4c
   150a8:	ldr	lr, [r4], #4
   150ac:	cmp	lr, #0
   150b0:	str	lr, [r5, #4]!
   150b4:	beq	150c4 <__assert_fail@plt+0x4160>
   150b8:	add	ip, ip, #1
   150bc:	cmp	ip, #10
   150c0:	bne	150a8 <__assert_fail@plt+0x4144>
   150c4:	add	lr, sp, #12
   150c8:	str	ip, [sp, #4]
   150cc:	str	lr, [sp]
   150d0:	bl	14c28 <__assert_fail@plt+0x3cc4>
   150d4:	ldr	r2, [sp, #52]	; 0x34
   150d8:	ldr	r3, [r6]
   150dc:	cmp	r2, r3
   150e0:	bne	150f4 <__assert_fail@plt+0x4190>
   150e4:	add	sp, sp, #60	; 0x3c
   150e8:	pop	{r4, r5, r6, lr}
   150ec:	add	sp, sp, #4
   150f0:	bx	lr
   150f4:	bl	10db4 <__stack_chk_fail@plt>
   150f8:	andeq	r7, r2, r8, lsl #30
   150fc:	push	{r4, lr}
   15100:	mov	r2, #5
   15104:	ldr	r1, [pc, #88]	; 15164 <__assert_fail@plt+0x4200>
   15108:	mov	r0, #0
   1510c:	bl	10da8 <dcgettext@plt>
   15110:	ldr	r2, [pc, #80]	; 15168 <__assert_fail@plt+0x4204>
   15114:	mov	r1, r0
   15118:	mov	r0, #1
   1511c:	bl	10ebc <__printf_chk@plt>
   15120:	mov	r2, #5
   15124:	ldr	r1, [pc, #64]	; 1516c <__assert_fail@plt+0x4208>
   15128:	mov	r0, #0
   1512c:	bl	10da8 <dcgettext@plt>
   15130:	ldr	r3, [pc, #56]	; 15170 <__assert_fail@plt+0x420c>
   15134:	ldr	r2, [pc, #56]	; 15174 <__assert_fail@plt+0x4210>
   15138:	mov	r1, r0
   1513c:	mov	r0, #1
   15140:	bl	10ebc <__printf_chk@plt>
   15144:	ldr	r1, [pc, #44]	; 15178 <__assert_fail@plt+0x4214>
   15148:	mov	r2, #5
   1514c:	mov	r0, #0
   15150:	bl	10da8 <dcgettext@plt>
   15154:	ldr	r3, [pc, #32]	; 1517c <__assert_fail@plt+0x4218>
   15158:	pop	{r4, lr}
   1515c:	ldr	r1, [r3]
   15160:	b	10d0c <fputs_unlocked@plt>
   15164:	muleq	r1, r8, r2
   15168:			; <UNDEFINED> instruction: 0x000172b0
   1516c:	andeq	r7, r1, r8, asr #5
   15170:	muleq	r1, r4, ip
   15174:			; <UNDEFINED> instruction: 0x00016cbc
   15178:	ldrdeq	r7, [r1], -ip
   1517c:	andeq	r8, r2, ip, asr #2
   15180:	push	{r4, lr}
   15184:	mov	r4, r0
   15188:	bl	10e2c <malloc@plt>
   1518c:	adds	r4, r4, #0
   15190:	movne	r4, #1
   15194:	cmp	r0, #0
   15198:	movne	r4, #0
   1519c:	cmp	r4, #0
   151a0:	popeq	{r4, pc}
   151a4:	bl	153c8 <__assert_fail@plt+0x4464>
   151a8:	push	{r4, r5, r6, lr}
   151ac:	umull	r4, r5, r0, r1
   151b0:	adds	r3, r5, #0
   151b4:	movne	r3, #1
   151b8:	cmp	r4, #0
   151bc:	blt	151d4 <__assert_fail@plt+0x4270>
   151c0:	cmp	r3, #0
   151c4:	bne	151d4 <__assert_fail@plt+0x4270>
   151c8:	mul	r0, r1, r0
   151cc:	pop	{r4, r5, r6, lr}
   151d0:	b	15180 <__assert_fail@plt+0x421c>
   151d4:	bl	153c8 <__assert_fail@plt+0x4464>
   151d8:	b	15180 <__assert_fail@plt+0x421c>
   151dc:	adds	r3, r0, #0
   151e0:	movne	r3, #1
   151e4:	cmp	r1, #0
   151e8:	movne	r3, #0
   151ec:	cmp	r3, #0
   151f0:	push	{r4, lr}
   151f4:	bne	1521c <__assert_fail@plt+0x42b8>
   151f8:	mov	r4, r1
   151fc:	bl	10dc0 <realloc@plt>
   15200:	adds	r4, r4, #0
   15204:	movne	r4, #1
   15208:	cmp	r0, #0
   1520c:	movne	r4, #0
   15210:	cmp	r4, #0
   15214:	popeq	{r4, pc}
   15218:	bl	153c8 <__assert_fail@plt+0x4464>
   1521c:	bl	10d54 <free@plt>
   15220:	mov	r0, #0
   15224:	pop	{r4, pc}
   15228:	push	{r4, r5, r6, lr}
   1522c:	umull	r4, r5, r1, r2
   15230:	adds	r3, r5, #0
   15234:	movne	r3, #1
   15238:	cmp	r4, #0
   1523c:	blt	15254 <__assert_fail@plt+0x42f0>
   15240:	cmp	r3, #0
   15244:	bne	15254 <__assert_fail@plt+0x42f0>
   15248:	mul	r1, r2, r1
   1524c:	pop	{r4, r5, r6, lr}
   15250:	b	151dc <__assert_fail@plt+0x4278>
   15254:	bl	153c8 <__assert_fail@plt+0x4464>
   15258:	push	{r4, r5, r6, r7, r8, lr}
   1525c:	subs	r7, r0, #0
   15260:	mov	r6, r1
   15264:	mov	r5, r2
   15268:	ldr	r4, [r1]
   1526c:	beq	152a0 <__assert_fail@plt+0x433c>
   15270:	mov	r1, r2
   15274:	ldr	r0, [pc, #104]	; 152e4 <__assert_fail@plt+0x4380>
   15278:	bl	1627c <__assert_fail@plt+0x5318>
   1527c:	cmp	r0, r4
   15280:	bls	152c4 <__assert_fail@plt+0x4360>
   15284:	add	r3, r4, #1
   15288:	add	r4, r3, r4, lsr #1
   1528c:	str	r4, [r6]
   15290:	mul	r1, r5, r4
   15294:	mov	r0, r7
   15298:	pop	{r4, r5, r6, r7, r8, lr}
   1529c:	b	151dc <__assert_fail@plt+0x4278>
   152a0:	cmp	r4, #0
   152a4:	beq	152c8 <__assert_fail@plt+0x4364>
   152a8:	umull	r0, r1, r4, r5
   152ac:	adds	r3, r1, #0
   152b0:	movne	r3, #1
   152b4:	cmp	r0, #0
   152b8:	blt	152c4 <__assert_fail@plt+0x4360>
   152bc:	cmp	r3, #0
   152c0:	beq	1528c <__assert_fail@plt+0x4328>
   152c4:	bl	153c8 <__assert_fail@plt+0x4464>
   152c8:	mov	r1, r2
   152cc:	mov	r0, #64	; 0x40
   152d0:	bl	1627c <__assert_fail@plt+0x5318>
   152d4:	cmp	r5, #64	; 0x40
   152d8:	movls	r4, r0
   152dc:	addhi	r4, r0, #1
   152e0:	b	152a8 <__assert_fail@plt+0x4344>
   152e4:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   152e8:	cmp	r0, #0
   152ec:	ldr	r3, [r1]
   152f0:	beq	15314 <__assert_fail@plt+0x43b0>
   152f4:	ldr	r2, [pc, #60]	; 15338 <__assert_fail@plt+0x43d4>
   152f8:	cmp	r3, r2
   152fc:	bhi	15330 <__assert_fail@plt+0x43cc>
   15300:	add	r2, r3, #1
   15304:	add	r3, r2, r3, lsr #1
   15308:	str	r3, [r1]
   1530c:	mov	r1, r3
   15310:	b	151dc <__assert_fail@plt+0x4278>
   15314:	cmp	r3, #0
   15318:	bne	1532c <__assert_fail@plt+0x43c8>
   1531c:	mov	r3, #64	; 0x40
   15320:	str	r3, [r1]
   15324:	mov	r1, r3
   15328:	b	151dc <__assert_fail@plt+0x4278>
   1532c:	bge	15308 <__assert_fail@plt+0x43a4>
   15330:	push	{r4, lr}
   15334:	bl	153c8 <__assert_fail@plt+0x4464>
   15338:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1533c:	push	{r4, lr}
   15340:	mov	r4, r0
   15344:	bl	15180 <__assert_fail@plt+0x421c>
   15348:	mov	r2, r4
   1534c:	mov	r1, #0
   15350:	pop	{r4, lr}
   15354:	b	10eb0 <memset@plt>
   15358:	push	{r4, r5, r6, lr}
   1535c:	umull	r4, r5, r0, r1
   15360:	adds	r3, r5, #0
   15364:	movne	r3, #1
   15368:	cmp	r4, #0
   1536c:	blt	15384 <__assert_fail@plt+0x4420>
   15370:	cmp	r3, #0
   15374:	bne	15384 <__assert_fail@plt+0x4420>
   15378:	bl	10d00 <calloc@plt>
   1537c:	cmp	r0, #0
   15380:	popne	{r4, r5, r6, pc}
   15384:	bl	153c8 <__assert_fail@plt+0x4464>
   15388:	push	{r4, r5, r6, lr}
   1538c:	mov	r4, r1
   15390:	mov	r5, r0
   15394:	mov	r0, r1
   15398:	bl	15180 <__assert_fail@plt+0x421c>
   1539c:	mov	r2, r4
   153a0:	mov	r1, r5
   153a4:	pop	{r4, r5, r6, lr}
   153a8:	b	10d6c <memcpy@plt>
   153ac:	push	{r4, lr}
   153b0:	mov	r4, r0
   153b4:	bl	10e80 <strlen@plt>
   153b8:	add	r1, r0, #1
   153bc:	mov	r0, r4
   153c0:	pop	{r4, lr}
   153c4:	b	15388 <__assert_fail@plt+0x4424>
   153c8:	ldr	r3, [pc, #44]	; 153fc <__assert_fail@plt+0x4498>
   153cc:	push	{r4, lr}
   153d0:	mov	r2, #5
   153d4:	ldr	r1, [pc, #36]	; 15400 <__assert_fail@plt+0x449c>
   153d8:	mov	r0, #0
   153dc:	ldr	r4, [r3]
   153e0:	bl	10da8 <dcgettext@plt>
   153e4:	ldr	r2, [pc, #24]	; 15404 <__assert_fail@plt+0x44a0>
   153e8:	mov	r1, #0
   153ec:	mov	r3, r0
   153f0:	mov	r0, r4
   153f4:	bl	10e20 <error@plt>
   153f8:	bl	10f58 <abort@plt>
   153fc:	andeq	r8, r2, ip, ror #1
   15400:	andeq	r7, r1, r0, asr r3
   15404:	andeq	r6, r1, r0, lsr #30
   15408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1540c:	sub	sp, sp, #36	; 0x24
   15410:	ldr	r6, [pc, #312]	; 15550 <__assert_fail@plt+0x45ec>
   15414:	ldr	lr, [sp, #80]	; 0x50
   15418:	mov	r8, r2
   1541c:	ldr	ip, [r6]
   15420:	mov	r2, r1
   15424:	mov	r9, r3
   15428:	str	lr, [sp]
   1542c:	add	r3, sp, #16
   15430:	mov	r1, #0
   15434:	str	ip, [sp, #28]
   15438:	mov	r7, r0
   1543c:	ldr	sl, [sp, #84]	; 0x54
   15440:	ldr	r5, [sp, #88]	; 0x58
   15444:	bl	15560 <__assert_fail@plt+0x45fc>
   15448:	subs	fp, r0, #0
   1544c:	bne	1550c <__assert_fail@plt+0x45a8>
   15450:	ldrd	r2, [sp, #16]
   15454:	cmp	r3, r9
   15458:	cmpeq	r2, r8
   1545c:	ldrd	r8, [sp, #72]	; 0x48
   15460:	movcc	r1, #1
   15464:	movcs	r1, #0
   15468:	cmp	r3, r9
   1546c:	cmpeq	r2, r8
   15470:	orrhi	r1, r1, #1
   15474:	cmp	r1, #0
   15478:	beq	154d0 <__assert_fail@plt+0x456c>
   1547c:	strd	r2, [sp, #8]
   15480:	bl	10e98 <__errno_location@plt>
   15484:	ldrd	r2, [sp, #8]
   15488:	mov	r9, #0
   1548c:	mvn	r8, #-1073741824	; 0xc0000000
   15490:	cmp	r3, r9
   15494:	cmpeq	r2, r8
   15498:	bls	15538 <__assert_fail@plt+0x45d4>
   1549c:	mov	r4, #75	; 0x4b
   154a0:	cmp	r5, #0
   154a4:	str	r4, [r0]
   154a8:	beq	15504 <__assert_fail@plt+0x45a0>
   154ac:	mov	r0, r7
   154b0:	bl	14c10 <__assert_fail@plt+0x3cac>
   154b4:	mov	r3, sl
   154b8:	ldr	r2, [pc, #148]	; 15554 <__assert_fail@plt+0x45f0>
   154bc:	mov	r1, r4
   154c0:	str	r0, [sp]
   154c4:	mov	r0, r5
   154c8:	bl	10e20 <error@plt>
   154cc:	ldrd	r2, [sp, #16]
   154d0:	ldr	lr, [sp, #28]
   154d4:	ldr	ip, [r6]
   154d8:	mov	r0, r2
   154dc:	cmp	lr, ip
   154e0:	mov	r1, r3
   154e4:	bne	1554c <__assert_fail@plt+0x45e8>
   154e8:	add	sp, sp, #36	; 0x24
   154ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f0:	mov	r4, #0
   154f4:	cmp	r5, #0
   154f8:	str	r4, [r0]
   154fc:	bne	154ac <__assert_fail@plt+0x4548>
   15500:	mov	r4, r5
   15504:	mov	r5, #1
   15508:	b	154ac <__assert_fail@plt+0x4548>
   1550c:	bl	10e98 <__errno_location@plt>
   15510:	cmp	fp, #1
   15514:	beq	1549c <__assert_fail@plt+0x4538>
   15518:	cmp	fp, #3
   1551c:	beq	154f0 <__assert_fail@plt+0x458c>
   15520:	ldr	r4, [r0]
   15524:	cmp	r5, #0
   15528:	moveq	r5, #1
   1552c:	cmp	r4, #22
   15530:	moveq	r4, #0
   15534:	b	154ac <__assert_fail@plt+0x4548>
   15538:	mov	r4, #34	; 0x22
   1553c:	cmp	r5, #0
   15540:	str	r4, [r0]
   15544:	bne	154ac <__assert_fail@plt+0x4548>
   15548:	b	15504 <__assert_fail@plt+0x45a0>
   1554c:	bl	10db4 <__stack_chk_fail@plt>
   15550:	andeq	r7, r2, r8, lsl #30
   15554:	andeq	r6, r1, ip, lsl pc
   15558:	mov	r1, #10
   1555c:	b	15408 <__assert_fail@plt+0x44a4>
   15560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15564:	sub	sp, sp, #36	; 0x24
   15568:	ldr	r5, [pc, #2536]	; 15f58 <__assert_fail@plt+0x4ff4>
   1556c:	mov	r9, r2
   15570:	cmp	r2, #36	; 0x24
   15574:	str	r3, [sp, #12]
   15578:	ldr	r2, [r5]
   1557c:	ldr	r3, [sp, #72]	; 0x48
   15580:	str	r2, [sp, #28]
   15584:	str	r3, [sp]
   15588:	bhi	15f44 <__assert_fail@plt+0x4fe0>
   1558c:	cmp	r1, #0
   15590:	mov	r4, r1
   15594:	mov	r6, r0
   15598:	addeq	r4, sp, #24
   1559c:	bl	10e98 <__errno_location@plt>
   155a0:	mov	r3, #0
   155a4:	str	r3, [r0]
   155a8:	mov	r7, r0
   155ac:	bl	10e68 <__ctype_b_loc@plt>
   155b0:	ldrb	r3, [r6]
   155b4:	mov	r1, r6
   155b8:	ldr	r0, [r0]
   155bc:	b	155c4 <__assert_fail@plt+0x4660>
   155c0:	ldrb	r3, [r1, #1]!
   155c4:	lsl	r2, r3, #1
   155c8:	ldrh	r8, [r0, r2]
   155cc:	ands	r8, r8, #8192	; 0x2000
   155d0:	bne	155c0 <__assert_fail@plt+0x465c>
   155d4:	cmp	r3, #45	; 0x2d
   155d8:	beq	15674 <__assert_fail@plt+0x4710>
   155dc:	mov	r2, r9
   155e0:	mov	r3, r8
   155e4:	mov	r1, r4
   155e8:	mov	r0, r6
   155ec:	bl	10d78 <__strtoull_internal@plt>
   155f0:	ldr	r9, [r4]
   155f4:	cmp	r9, r6
   155f8:	mov	sl, r0
   155fc:	mov	fp, r1
   15600:	beq	1565c <__assert_fail@plt+0x46f8>
   15604:	ldr	r8, [r7]
   15608:	cmp	r8, #0
   1560c:	bne	1564c <__assert_fail@plt+0x46e8>
   15610:	ldr	r3, [sp]
   15614:	cmp	r3, #0
   15618:	beq	15628 <__assert_fail@plt+0x46c4>
   1561c:	ldrb	r6, [r9]
   15620:	cmp	r6, #0
   15624:	bne	159fc <__assert_fail@plt+0x4a98>
   15628:	ldr	r3, [sp, #12]
   1562c:	strd	sl, [r3]
   15630:	ldr	r2, [sp, #28]
   15634:	ldr	r3, [r5]
   15638:	mov	r0, r8
   1563c:	cmp	r2, r3
   15640:	bne	15f40 <__assert_fail@plt+0x4fdc>
   15644:	add	sp, sp, #36	; 0x24
   15648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1564c:	cmp	r8, #34	; 0x22
   15650:	bne	15674 <__assert_fail@plt+0x4710>
   15654:	mov	r8, #1
   15658:	b	15610 <__assert_fail@plt+0x46ac>
   1565c:	ldr	r0, [sp]
   15660:	cmp	r0, #0
   15664:	beq	15674 <__assert_fail@plt+0x4710>
   15668:	ldrb	r6, [r6]
   1566c:	cmp	r6, #0
   15670:	bne	1567c <__assert_fail@plt+0x4718>
   15674:	mov	r8, #4
   15678:	b	15630 <__assert_fail@plt+0x46cc>
   1567c:	mov	r1, r6
   15680:	bl	10e8c <strchr@plt>
   15684:	cmp	r0, #0
   15688:	movne	sl, #1
   1568c:	movne	fp, #0
   15690:	beq	15674 <__assert_fail@plt+0x4710>
   15694:	sub	r7, r6, #69	; 0x45
   15698:	cmp	r7, #47	; 0x2f
   1569c:	ldrls	pc, [pc, r7, lsl #2]
   156a0:	b	15860 <__assert_fail@plt+0x48fc>
   156a4:	andeq	r5, r1, r4, ror #14
   156a8:	andeq	r5, r1, r0, ror #16
   156ac:	andeq	r5, r1, r4, ror #14
   156b0:	andeq	r5, r1, r0, ror #16
   156b4:	andeq	r5, r1, r0, ror #16
   156b8:	andeq	r5, r1, r0, ror #16
   156bc:	andeq	r5, r1, r4, ror #14
   156c0:	andeq	r5, r1, r0, ror #16
   156c4:	andeq	r5, r1, r4, ror #14
   156c8:	andeq	r5, r1, r0, ror #16
   156cc:	andeq	r5, r1, r0, ror #16
   156d0:	andeq	r5, r1, r4, ror #14
   156d4:	andeq	r5, r1, r0, ror #16
   156d8:	andeq	r5, r1, r0, ror #16
   156dc:	andeq	r5, r1, r0, ror #16
   156e0:	andeq	r5, r1, r4, ror #14
   156e4:	andeq	r5, r1, r0, ror #16
   156e8:	andeq	r5, r1, r0, ror #16
   156ec:	andeq	r5, r1, r0, ror #16
   156f0:	andeq	r5, r1, r0, ror #16
   156f4:	andeq	r5, r1, r4, ror #14
   156f8:	andeq	r5, r1, r4, ror #14
   156fc:	andeq	r5, r1, r0, ror #16
   15700:	andeq	r5, r1, r0, ror #16
   15704:	andeq	r5, r1, r0, ror #16
   15708:	andeq	r5, r1, r0, ror #16
   1570c:	andeq	r5, r1, r0, ror #16
   15710:	andeq	r5, r1, r0, ror #16
   15714:	andeq	r5, r1, r0, ror #16
   15718:	andeq	r5, r1, r0, ror #16
   1571c:	andeq	r5, r1, r0, ror #16
   15720:	andeq	r5, r1, r0, ror #16
   15724:	andeq	r5, r1, r0, ror #16
   15728:	andeq	r5, r1, r0, ror #16
   1572c:	andeq	r5, r1, r4, ror #14
   15730:	andeq	r5, r1, r0, ror #16
   15734:	andeq	r5, r1, r0, ror #16
   15738:	andeq	r5, r1, r0, ror #16
   1573c:	andeq	r5, r1, r4, ror #14
   15740:	andeq	r5, r1, r0, ror #16
   15744:	andeq	r5, r1, r4, ror #14
   15748:	andeq	r5, r1, r0, ror #16
   1574c:	andeq	r5, r1, r0, ror #16
   15750:	andeq	r5, r1, r0, ror #16
   15754:	andeq	r5, r1, r0, ror #16
   15758:	andeq	r5, r1, r0, ror #16
   1575c:	andeq	r5, r1, r0, ror #16
   15760:	andeq	r5, r1, r4, ror #14
   15764:	ldr	r0, [sp]
   15768:	mov	r1, #48	; 0x30
   1576c:	bl	10e8c <strchr@plt>
   15770:	cmp	r0, #0
   15774:	beq	15860 <__assert_fail@plt+0x48fc>
   15778:	ldrb	r3, [r9, #1]
   1577c:	cmp	r3, #68	; 0x44
   15780:	beq	15e40 <__assert_fail@plt+0x4edc>
   15784:	cmp	r3, #105	; 0x69
   15788:	beq	15a20 <__assert_fail@plt+0x4abc>
   1578c:	cmp	r3, #66	; 0x42
   15790:	beq	15e40 <__assert_fail@plt+0x4edc>
   15794:	cmp	r7, #47	; 0x2f
   15798:	ldrls	pc, [pc, r7, lsl #2]
   1579c:	b	15a10 <__assert_fail@plt+0x4aac>
   157a0:	andeq	r5, r1, r4, lsr #28
   157a4:	andeq	r5, r1, r0, lsl sl
   157a8:	andeq	r5, r1, r4, lsl lr
   157ac:	andeq	r5, r1, r0, lsl sl
   157b0:	andeq	r5, r1, r0, lsl sl
   157b4:	andeq	r5, r1, r0, lsl sl
   157b8:	andeq	r5, r1, r4, lsl #28
   157bc:	andeq	r5, r1, r0, lsl sl
   157c0:	strdeq	r5, [r1], -r4
   157c4:	andeq	r5, r1, r0, lsl sl
   157c8:	andeq	r5, r1, r0, lsl sl
   157cc:	andeq	r5, r1, r4, ror #27
   157d0:	andeq	r5, r1, r0, lsl sl
   157d4:	andeq	r5, r1, r0, lsl sl
   157d8:	andeq	r5, r1, r0, lsl sl
   157dc:	ldrdeq	r5, [r1], -r4
   157e0:	andeq	r5, r1, r0, lsl sl
   157e4:	andeq	r5, r1, r0, lsl sl
   157e8:	andeq	r5, r1, r0, lsl sl
   157ec:	andeq	r5, r1, r0, lsl sl
   157f0:	andeq	r5, r1, r4, asr #27
   157f4:			; <UNDEFINED> instruction: 0x00015db4
   157f8:	andeq	r5, r1, r0, lsl sl
   157fc:	andeq	r5, r1, r0, lsl sl
   15800:	andeq	r5, r1, r0, lsl sl
   15804:	andeq	r5, r1, r0, lsl sl
   15808:	andeq	r5, r1, r0, lsl sl
   1580c:	andeq	r5, r1, r0, lsl sl
   15810:	andeq	r5, r1, r0, lsl sl
   15814:	andeq	r5, r1, ip, asr sl
   15818:	andeq	r5, r1, ip, lsr #27
   1581c:	andeq	r5, r1, r0, lsl sl
   15820:	andeq	r5, r1, r0, lsl sl
   15824:	andeq	r5, r1, r0, lsl sl
   15828:	andeq	r5, r1, r4, lsl lr
   1582c:	andeq	r5, r1, r0, lsl sl
   15830:	andeq	r5, r1, r0, lsl sl
   15834:	andeq	r5, r1, r0, lsl sl
   15838:	andeq	r5, r1, r4, lsl #28
   1583c:	andeq	r5, r1, r0, lsl sl
   15840:	strdeq	r5, [r1], -r4
   15844:	andeq	r5, r1, r0, lsl sl
   15848:	andeq	r5, r1, r0, lsl sl
   1584c:	andeq	r5, r1, r0, lsl sl
   15850:	andeq	r5, r1, r0, lsl sl
   15854:	andeq	r5, r1, r0, lsl sl
   15858:	andeq	r5, r1, r0, lsl sl
   1585c:	ldrdeq	r5, [r1], -r4
   15860:	mov	lr, #1
   15864:	mov	r0, #1024	; 0x400
   15868:	sub	r6, r6, #66	; 0x42
   1586c:	cmp	r6, #53	; 0x35
   15870:	ldrls	pc, [pc, r6, lsl #2]
   15874:	b	15a10 <__assert_fail@plt+0x4aac>
   15878:	andeq	r5, r1, r4, lsl #21
   1587c:	andeq	r5, r1, r0, lsl sl
   15880:	andeq	r5, r1, r0, lsl sl
   15884:	andeq	r5, r1, r8, lsr #21
   15888:	andeq	r5, r1, r0, lsl sl
   1588c:	andeq	r5, r1, r0, asr r9
   15890:	andeq	r5, r1, r0, lsl sl
   15894:	andeq	r5, r1, r0, lsl sl
   15898:	andeq	r5, r1, r0, lsl sl
   1589c:	andeq	r5, r1, r0, lsr #23
   158a0:	andeq	r5, r1, r0, lsl sl
   158a4:	andeq	r5, r1, r4, asr #26
   158a8:	andeq	r5, r1, r0, lsl sl
   158ac:	andeq	r5, r1, r0, lsl sl
   158b0:	andeq	r5, r1, r8, asr #25
   158b4:	andeq	r5, r1, r0, lsl sl
   158b8:	andeq	r5, r1, r0, lsl sl
   158bc:	andeq	r5, r1, r0, lsl sl
   158c0:	andeq	r5, r1, ip, asr #24
   158c4:	andeq	r5, r1, r0, lsl sl
   158c8:	andeq	r5, r1, r0, lsl sl
   158cc:	andeq	r5, r1, r0, lsl sl
   158d0:	andeq	r5, r1, r0, lsl sl
   158d4:	ldrdeq	r5, [r1], -r0
   158d8:	andeq	r5, r1, r4, lsr #22
   158dc:	andeq	r5, r1, r0, lsl sl
   158e0:	andeq	r5, r1, r0, lsl sl
   158e4:	andeq	r5, r1, r0, lsl sl
   158e8:	andeq	r5, r1, r0, lsl sl
   158ec:	andeq	r5, r1, r0, lsl sl
   158f0:	andeq	r5, r1, r0, lsl sl
   158f4:	andeq	r5, r1, r0, lsl sl
   158f8:	andeq	r5, r1, r0, ror #20
   158fc:	andeq	r5, r1, r4, ror #19
   15900:	andeq	r5, r1, r0, lsl sl
   15904:	andeq	r5, r1, r0, lsl sl
   15908:	andeq	r5, r1, r0, lsl sl
   1590c:	andeq	r5, r1, r0, asr r9
   15910:	andeq	r5, r1, r0, lsl sl
   15914:	andeq	r5, r1, r0, lsl sl
   15918:	andeq	r5, r1, r0, lsl sl
   1591c:	andeq	r5, r1, r0, lsr #23
   15920:	andeq	r5, r1, r0, lsl sl
   15924:	andeq	r5, r1, r4, asr #26
   15928:	andeq	r5, r1, r0, lsl sl
   1592c:	andeq	r5, r1, r0, lsl sl
   15930:	andeq	r5, r1, r0, lsl sl
   15934:	andeq	r5, r1, r0, lsl sl
   15938:	andeq	r5, r1, r0, lsl sl
   1593c:	andeq	r5, r1, r0, lsl sl
   15940:	andeq	r5, r1, ip, asr #24
   15944:	andeq	r5, r1, r0, lsl sl
   15948:	andeq	r5, r1, r0, lsl sl
   1594c:	andeq	r5, r1, r8, lsr sl
   15950:	asr	r1, r0, #31
   15954:	mov	r2, #0
   15958:	mov	r3, #0
   1595c:	cmp	fp, #0
   15960:	strd	r2, [sp]
   15964:	bne	15e84 <__assert_fail@plt+0x4f20>
   15968:	ldrd	r2, [sp]
   1596c:	orrs	r3, r2, r3
   15970:	bne	15e74 <__assert_fail@plt+0x4f10>
   15974:	mul	r3, sl, r1
   15978:	umull	r6, r7, sl, r0
   1597c:	mla	r3, r0, fp, r3
   15980:	ldrd	sl, [sp]
   15984:	add	ip, r3, r7
   15988:	cmp	ip, #0
   1598c:	mov	r7, ip
   15990:	bne	15f18 <__assert_fail@plt+0x4fb4>
   15994:	orrs	r3, sl, fp
   15998:	bne	15e74 <__assert_fail@plt+0x4f10>
   1599c:	umull	r2, r3, r6, r0
   159a0:	mul	ip, r6, r1
   159a4:	strd	r2, [sp]
   159a8:	mla	r3, r0, r7, ip
   159ac:	ldr	r2, [sp, #4]
   159b0:	add	ip, r3, r2
   159b4:	cmp	ip, #0
   159b8:	str	ip, [sp, #4]
   159bc:	bne	15ef4 <__assert_fail@plt+0x4f90>
   159c0:	orrs	r3, sl, fp
   159c4:	bne	15e74 <__assert_fail@plt+0x4f10>
   159c8:	ldrd	r6, [sp]
   159cc:	mov	r3, #0
   159d0:	mul	r2, r6, r1
   159d4:	umull	sl, fp, r6, r0
   159d8:	mla	r2, r0, r7, r2
   159dc:	add	fp, r2, fp
   159e0:	orr	r8, r8, r3
   159e4:	add	r3, r9, lr
   159e8:	str	r3, [r4]
   159ec:	ldrb	r3, [r9, lr]
   159f0:	cmp	r3, #0
   159f4:	orrne	r8, r8, #2
   159f8:	b	15628 <__assert_fail@plt+0x46c4>
   159fc:	mov	r1, r6
   15a00:	ldr	r0, [sp]
   15a04:	bl	10e8c <strchr@plt>
   15a08:	cmp	r0, #0
   15a0c:	bne	15694 <__assert_fail@plt+0x4730>
   15a10:	ldr	r3, [sp, #12]
   15a14:	orr	r8, r8, #2
   15a18:	strd	sl, [r3]
   15a1c:	b	15630 <__assert_fail@plt+0x46cc>
   15a20:	ldrb	r3, [r9, #2]
   15a24:	mov	r0, #1024	; 0x400
   15a28:	cmp	r3, #66	; 0x42
   15a2c:	movne	lr, #1
   15a30:	moveq	lr, #3
   15a34:	b	15868 <__assert_fail@plt+0x4904>
   15a38:	lsr	r3, fp, #31
   15a3c:	adds	sl, sl, sl
   15a40:	adc	fp, fp, fp
   15a44:	cmp	r3, #0
   15a48:	beq	159e4 <__assert_fail@plt+0x4a80>
   15a4c:	mov	r8, #1
   15a50:	mvn	sl, #0
   15a54:	mvn	fp, #0
   15a58:	b	159e4 <__assert_fail@plt+0x4a80>
   15a5c:	mov	lr, #1
   15a60:	lsr	r3, fp, #23
   15a64:	cmp	r3, #0
   15a68:	bne	15a4c <__assert_fail@plt+0x4ae8>
   15a6c:	lsl	r3, fp, #9
   15a70:	orr	r3, r3, sl, lsr #23
   15a74:	lsl	r2, sl, #9
   15a78:	mov	sl, r2
   15a7c:	mov	fp, r3
   15a80:	b	159e4 <__assert_fail@plt+0x4a80>
   15a84:	lsr	r3, fp, #22
   15a88:	cmp	r3, #0
   15a8c:	bne	15a4c <__assert_fail@plt+0x4ae8>
   15a90:	lsl	r3, fp, #10
   15a94:	orr	r3, r3, sl, lsr #22
   15a98:	lsl	r2, sl, #10
   15a9c:	mov	sl, r2
   15aa0:	mov	fp, r3
   15aa4:	b	159e4 <__assert_fail@plt+0x4a80>
   15aa8:	mov	r6, r0
   15aac:	asr	r7, r0, #31
   15ab0:	mov	r3, #0
   15ab4:	mov	ip, #6
   15ab8:	str	r3, [sp]
   15abc:	strd	r4, [sp, #16]
   15ac0:	b	15af0 <__assert_fail@plt+0x4b8c>
   15ac4:	orrs	r3, r2, r3
   15ac8:	movne	r3, #1
   15acc:	muleq	r3, sl, r7
   15ad0:	strne	r3, [sp]
   15ad4:	mlaeq	r3, r6, fp, r3
   15ad8:	umulleq	sl, fp, sl, r6
   15adc:	mvnne	sl, #0
   15ae0:	addeq	fp, r3, fp
   15ae4:	mvnne	fp, #0
   15ae8:	subs	ip, ip, #1
   15aec:	beq	15e34 <__assert_fail@plt+0x4ed0>
   15af0:	cmp	fp, #0
   15af4:	mov	r2, #0
   15af8:	mov	r3, #0
   15afc:	beq	15ac4 <__assert_fail@plt+0x4b60>
   15b00:	umull	r0, r1, sl, r6
   15b04:	mov	r5, #0
   15b08:	mov	r0, r1
   15b0c:	mov	r1, r5
   15b10:	umlal	r0, r1, fp, r6
   15b14:	cmp	r1, r5
   15b18:	movne	r2, #1
   15b1c:	movne	r3, #0
   15b20:	b	15ac4 <__assert_fail@plt+0x4b60>
   15b24:	mov	r6, r0
   15b28:	asr	r7, r0, #31
   15b2c:	mov	r3, #0
   15b30:	mov	ip, #7
   15b34:	str	r3, [sp]
   15b38:	strd	r4, [sp, #16]
   15b3c:	b	15b6c <__assert_fail@plt+0x4c08>
   15b40:	orrs	r3, r2, r3
   15b44:	movne	r3, #1
   15b48:	muleq	r3, sl, r7
   15b4c:	strne	r3, [sp]
   15b50:	mlaeq	r3, r6, fp, r3
   15b54:	umulleq	sl, fp, sl, r6
   15b58:	mvnne	sl, #0
   15b5c:	addeq	fp, r3, fp
   15b60:	mvnne	fp, #0
   15b64:	subs	ip, ip, #1
   15b68:	beq	15e34 <__assert_fail@plt+0x4ed0>
   15b6c:	cmp	fp, #0
   15b70:	mov	r2, #0
   15b74:	mov	r3, #0
   15b78:	beq	15b40 <__assert_fail@plt+0x4bdc>
   15b7c:	umull	r0, r1, sl, r6
   15b80:	mov	r5, #0
   15b84:	mov	r0, r1
   15b88:	mov	r1, r5
   15b8c:	umlal	r0, r1, fp, r6
   15b90:	cmp	r1, r5
   15b94:	movne	r2, #1
   15b98:	movne	r3, #0
   15b9c:	b	15b40 <__assert_fail@plt+0x4bdc>
   15ba0:	asr	r1, r0, #31
   15ba4:	cmp	fp, #0
   15ba8:	mov	r6, #0
   15bac:	mov	r7, #0
   15bb0:	bne	15e4c <__assert_fail@plt+0x4ee8>
   15bb4:	orrs	r3, r6, r7
   15bb8:	bne	15a4c <__assert_fail@plt+0x4ae8>
   15bbc:	mul	r3, sl, r1
   15bc0:	mla	r3, r0, fp, r3
   15bc4:	umull	sl, fp, sl, r0
   15bc8:	add	fp, r3, fp
   15bcc:	b	159e4 <__assert_fail@plt+0x4a80>
   15bd0:	mov	r6, r0
   15bd4:	asr	r7, r0, #31
   15bd8:	mov	r3, #0
   15bdc:	mov	ip, #8
   15be0:	str	r3, [sp]
   15be4:	strd	r4, [sp, #16]
   15be8:	b	15c18 <__assert_fail@plt+0x4cb4>
   15bec:	orrs	r3, r2, r3
   15bf0:	movne	r3, #1
   15bf4:	muleq	r3, sl, r7
   15bf8:	strne	r3, [sp]
   15bfc:	mlaeq	r3, r6, fp, r3
   15c00:	umulleq	sl, fp, sl, r6
   15c04:	mvnne	sl, #0
   15c08:	addeq	fp, r3, fp
   15c0c:	mvnne	fp, #0
   15c10:	subs	ip, ip, #1
   15c14:	beq	15e34 <__assert_fail@plt+0x4ed0>
   15c18:	cmp	fp, #0
   15c1c:	mov	r2, #0
   15c20:	mov	r3, #0
   15c24:	beq	15bec <__assert_fail@plt+0x4c88>
   15c28:	umull	r0, r1, sl, r6
   15c2c:	mov	r5, #0
   15c30:	mov	r0, r1
   15c34:	mov	r1, r5
   15c38:	umlal	r0, r1, fp, r6
   15c3c:	cmp	r1, r5
   15c40:	movne	r2, #1
   15c44:	movne	r3, #0
   15c48:	b	15bec <__assert_fail@plt+0x4c88>
   15c4c:	mov	r6, r0
   15c50:	asr	r7, r0, #31
   15c54:	mov	r3, #0
   15c58:	mov	ip, #4
   15c5c:	str	r3, [sp]
   15c60:	strd	r4, [sp, #16]
   15c64:	b	15c94 <__assert_fail@plt+0x4d30>
   15c68:	orrs	r3, r2, r3
   15c6c:	movne	r3, #1
   15c70:	muleq	r3, sl, r7
   15c74:	strne	r3, [sp]
   15c78:	mlaeq	r3, r6, fp, r3
   15c7c:	umulleq	sl, fp, sl, r6
   15c80:	mvnne	sl, #0
   15c84:	addeq	fp, r3, fp
   15c88:	mvnne	fp, #0
   15c8c:	subs	ip, ip, #1
   15c90:	beq	15e34 <__assert_fail@plt+0x4ed0>
   15c94:	cmp	fp, #0
   15c98:	mov	r2, #0
   15c9c:	mov	r3, #0
   15ca0:	beq	15c68 <__assert_fail@plt+0x4d04>
   15ca4:	umull	r0, r1, sl, r6
   15ca8:	mov	r5, #0
   15cac:	mov	r0, r1
   15cb0:	mov	r1, r5
   15cb4:	umlal	r0, r1, fp, r6
   15cb8:	cmp	r1, r5
   15cbc:	movne	r2, #1
   15cc0:	movne	r3, #0
   15cc4:	b	15c68 <__assert_fail@plt+0x4d04>
   15cc8:	mov	r6, r0
   15ccc:	asr	r7, r0, #31
   15cd0:	mov	r3, #0
   15cd4:	mov	ip, #5
   15cd8:	str	r3, [sp]
   15cdc:	strd	r4, [sp, #16]
   15ce0:	b	15d10 <__assert_fail@plt+0x4dac>
   15ce4:	orrs	r3, r2, r3
   15ce8:	movne	r3, #1
   15cec:	muleq	r3, sl, r7
   15cf0:	strne	r3, [sp]
   15cf4:	mlaeq	r3, r6, fp, r3
   15cf8:	umulleq	sl, fp, sl, r6
   15cfc:	mvnne	sl, #0
   15d00:	addeq	fp, r3, fp
   15d04:	mvnne	fp, #0
   15d08:	subs	ip, ip, #1
   15d0c:	beq	15e34 <__assert_fail@plt+0x4ed0>
   15d10:	cmp	fp, #0
   15d14:	mov	r2, #0
   15d18:	mov	r3, #0
   15d1c:	beq	15ce4 <__assert_fail@plt+0x4d80>
   15d20:	umull	r0, r1, sl, r6
   15d24:	mov	r5, #0
   15d28:	mov	r0, r1
   15d2c:	mov	r1, r5
   15d30:	umlal	r0, r1, fp, r6
   15d34:	cmp	r1, r5
   15d38:	movne	r2, #1
   15d3c:	movne	r3, #0
   15d40:	b	15ce4 <__assert_fail@plt+0x4d80>
   15d44:	asr	r1, r0, #31
   15d48:	cmp	fp, #0
   15d4c:	mov	r6, #0
   15d50:	mov	r7, #0
   15d54:	bne	15ea8 <__assert_fail@plt+0x4f44>
   15d58:	orrs	r3, r6, r7
   15d5c:	bne	15a4c <__assert_fail@plt+0x4ae8>
   15d60:	umull	r2, r3, sl, r0
   15d64:	mul	ip, sl, r1
   15d68:	strd	r2, [sp]
   15d6c:	mla	r3, r0, fp, ip
   15d70:	ldr	r2, [sp, #4]
   15d74:	mov	sl, r6
   15d78:	add	ip, r3, r2
   15d7c:	cmp	ip, #0
   15d80:	mov	fp, r7
   15d84:	str	ip, [sp, #4]
   15d88:	bne	15ed0 <__assert_fail@plt+0x4f6c>
   15d8c:	orrs	r3, sl, fp
   15d90:	bne	15a4c <__assert_fail@plt+0x4ae8>
   15d94:	ldrd	r6, [sp]
   15d98:	mul	r3, r6, r1
   15d9c:	umull	sl, fp, r6, r0
   15da0:	mla	r0, r0, r7, r3
   15da4:	add	fp, r0, fp
   15da8:	b	159e4 <__assert_fail@plt+0x4a80>
   15dac:	mov	lr, #1
   15db0:	b	159e4 <__assert_fail@plt+0x4a80>
   15db4:	mov	lr, #1
   15db8:	mov	r6, #1024	; 0x400
   15dbc:	mov	r7, #0
   15dc0:	b	15b2c <__assert_fail@plt+0x4bc8>
   15dc4:	mov	lr, #1
   15dc8:	mov	r6, #1024	; 0x400
   15dcc:	mov	r7, #0
   15dd0:	b	15bd8 <__assert_fail@plt+0x4c74>
   15dd4:	mov	lr, #1
   15dd8:	mov	r6, #1024	; 0x400
   15ddc:	mov	r7, #0
   15de0:	b	15c54 <__assert_fail@plt+0x4cf0>
   15de4:	mov	lr, #1
   15de8:	mov	r6, #1024	; 0x400
   15dec:	mov	r7, #0
   15df0:	b	15cd0 <__assert_fail@plt+0x4d6c>
   15df4:	mov	lr, #1
   15df8:	mov	r0, #1024	; 0x400
   15dfc:	mov	r1, #0
   15e00:	b	15d48 <__assert_fail@plt+0x4de4>
   15e04:	mov	lr, #1
   15e08:	mov	r0, #1024	; 0x400
   15e0c:	mov	r1, #0
   15e10:	b	15ba4 <__assert_fail@plt+0x4c40>
   15e14:	mov	lr, #1
   15e18:	mov	r0, #1024	; 0x400
   15e1c:	mov	r1, #0
   15e20:	b	15954 <__assert_fail@plt+0x49f0>
   15e24:	mov	lr, #1
   15e28:	mov	r6, #1024	; 0x400
   15e2c:	mov	r7, #0
   15e30:	b	15ab0 <__assert_fail@plt+0x4b4c>
   15e34:	ldrd	r4, [sp, #16]
   15e38:	ldr	r3, [sp]
   15e3c:	b	159e0 <__assert_fail@plt+0x4a7c>
   15e40:	mov	lr, #2
   15e44:	mov	r0, #1000	; 0x3e8
   15e48:	b	15868 <__assert_fail@plt+0x4904>
   15e4c:	umull	r2, r3, sl, r0
   15e50:	str	r3, [sp]
   15e54:	mov	r3, #0
   15e58:	str	r3, [sp, #4]
   15e5c:	ldrd	r2, [sp]
   15e60:	umlal	r2, r3, fp, r0
   15e64:	cmp	r3, #0
   15e68:	movne	r6, #1
   15e6c:	movne	r7, #0
   15e70:	b	15bb4 <__assert_fail@plt+0x4c50>
   15e74:	mov	r3, #1
   15e78:	mvn	sl, #0
   15e7c:	mvn	fp, #0
   15e80:	b	159e0 <__assert_fail@plt+0x4a7c>
   15e84:	umull	r2, r3, sl, r0
   15e88:	mov	r7, #0
   15e8c:	mov	r6, r3
   15e90:	umlal	r6, r7, fp, r0
   15e94:	cmp	r7, #0
   15e98:	movne	r2, #1
   15e9c:	movne	r3, #0
   15ea0:	strdne	r2, [sp]
   15ea4:	b	15968 <__assert_fail@plt+0x4a04>
   15ea8:	umull	r2, r3, sl, r0
   15eac:	str	r3, [sp]
   15eb0:	mov	r3, #0
   15eb4:	str	r3, [sp, #4]
   15eb8:	ldrd	r2, [sp]
   15ebc:	umlal	r2, r3, fp, r0
   15ec0:	cmp	r3, #0
   15ec4:	movne	r6, #1
   15ec8:	movne	r7, #0
   15ecc:	b	15d58 <__assert_fail@plt+0x4df4>
   15ed0:	ldr	r3, [sp]
   15ed4:	mov	r7, #0
   15ed8:	umull	r2, r3, r3, r0
   15edc:	mov	r6, r3
   15ee0:	umlal	r6, r7, ip, r0
   15ee4:	cmp	r7, #0
   15ee8:	movne	sl, #1
   15eec:	movne	fp, #0
   15ef0:	b	15d8c <__assert_fail@plt+0x4e28>
   15ef4:	ldr	r3, [sp]
   15ef8:	mov	r7, #0
   15efc:	umull	r2, r3, r3, r0
   15f00:	mov	r6, r3
   15f04:	umlal	r6, r7, ip, r0
   15f08:	cmp	r7, #0
   15f0c:	movne	sl, #1
   15f10:	movne	fp, #0
   15f14:	b	159c0 <__assert_fail@plt+0x4a5c>
   15f18:	umull	r2, r3, r6, r0
   15f1c:	str	r3, [sp]
   15f20:	mov	r3, #0
   15f24:	str	r3, [sp, #4]
   15f28:	ldrd	r2, [sp]
   15f2c:	umlal	r2, r3, ip, r0
   15f30:	cmp	r3, #0
   15f34:	movne	sl, #1
   15f38:	movne	fp, #0
   15f3c:	b	15994 <__assert_fail@plt+0x4a30>
   15f40:	bl	10db4 <__stack_chk_fail@plt>
   15f44:	ldr	r3, [pc, #16]	; 15f5c <__assert_fail@plt+0x4ff8>
   15f48:	mov	r2, #96	; 0x60
   15f4c:	ldr	r1, [pc, #12]	; 15f60 <__assert_fail@plt+0x4ffc>
   15f50:	ldr	r0, [pc, #12]	; 15f64 <__assert_fail@plt+0x5000>
   15f54:	bl	10f64 <__assert_fail@plt>
   15f58:	andeq	r7, r2, r8, lsl #30
   15f5c:	andeq	r7, r1, r4, ror #6
   15f60:	andeq	r7, r1, r0, ror r3
   15f64:	andeq	r7, r1, r0, lsl #7
   15f68:	push	{r4, r5, lr}
   15f6c:	sub	sp, sp, #12
   15f70:	mov	r4, r0
   15f74:	bl	10ec8 <fileno@plt>
   15f78:	cmp	r0, #0
   15f7c:	mov	r0, r4
   15f80:	blt	15ffc <__assert_fail@plt+0x5098>
   15f84:	bl	10e44 <__freading@plt>
   15f88:	cmp	r0, #0
   15f8c:	bne	15fc8 <__assert_fail@plt+0x5064>
   15f90:	mov	r0, r4
   15f94:	bl	16008 <__assert_fail@plt+0x50a4>
   15f98:	cmp	r0, #0
   15f9c:	beq	15ff8 <__assert_fail@plt+0x5094>
   15fa0:	bl	10e98 <__errno_location@plt>
   15fa4:	mov	r5, r0
   15fa8:	mov	r0, r4
   15fac:	ldr	r4, [r5]
   15fb0:	bl	10ee0 <fclose@plt>
   15fb4:	cmp	r4, #0
   15fb8:	mvnne	r0, #0
   15fbc:	strne	r4, [r5]
   15fc0:	add	sp, sp, #12
   15fc4:	pop	{r4, r5, pc}
   15fc8:	mov	r0, r4
   15fcc:	bl	10ec8 <fileno@plt>
   15fd0:	mov	r3, #1
   15fd4:	str	r3, [sp]
   15fd8:	mov	r2, #0
   15fdc:	mov	r3, #0
   15fe0:	bl	10df0 <lseek64@plt>
   15fe4:	mvn	r3, #0
   15fe8:	mvn	r2, #0
   15fec:	cmp	r1, r3
   15ff0:	cmpeq	r0, r2
   15ff4:	bne	15f90 <__assert_fail@plt+0x502c>
   15ff8:	mov	r0, r4
   15ffc:	add	sp, sp, #12
   16000:	pop	{r4, r5, lr}
   16004:	b	10ee0 <fclose@plt>
   16008:	push	{r4, lr}
   1600c:	subs	r4, r0, #0
   16010:	sub	sp, sp, #8
   16014:	beq	16030 <__assert_fail@plt+0x50cc>
   16018:	bl	10e44 <__freading@plt>
   1601c:	cmp	r0, #0
   16020:	beq	16030 <__assert_fail@plt+0x50cc>
   16024:	ldr	r3, [r4]
   16028:	tst	r3, #256	; 0x100
   1602c:	bne	16040 <__assert_fail@plt+0x50dc>
   16030:	mov	r0, r4
   16034:	add	sp, sp, #8
   16038:	pop	{r4, lr}
   1603c:	b	10d3c <fflush@plt>
   16040:	mov	r3, #1
   16044:	str	r3, [sp]
   16048:	mov	r2, #0
   1604c:	mov	r3, #0
   16050:	mov	r0, r4
   16054:	bl	16068 <__assert_fail@plt+0x5104>
   16058:	mov	r0, r4
   1605c:	add	sp, sp, #8
   16060:	pop	{r4, lr}
   16064:	b	10d3c <fflush@plt>
   16068:	push	{r4, r5, r6, r7, r8, lr}
   1606c:	sub	sp, sp, #8
   16070:	ldmib	r0, {ip, lr}
   16074:	mov	r4, r0
   16078:	ldr	r5, [sp, #32]
   1607c:	cmp	lr, ip
   16080:	beq	16098 <__assert_fail@plt+0x5134>
   16084:	str	r5, [sp, #32]
   16088:	mov	r0, r4
   1608c:	add	sp, sp, #8
   16090:	pop	{r4, r5, r6, r7, r8, lr}
   16094:	b	10eec <fseeko64@plt>
   16098:	ldr	lr, [r0, #20]
   1609c:	ldr	ip, [r0, #16]
   160a0:	cmp	lr, ip
   160a4:	bne	16084 <__assert_fail@plt+0x5120>
   160a8:	ldr	r8, [r0, #36]	; 0x24
   160ac:	cmp	r8, #0
   160b0:	bne	16084 <__assert_fail@plt+0x5120>
   160b4:	mov	r6, r2
   160b8:	mov	r7, r3
   160bc:	bl	10ec8 <fileno@plt>
   160c0:	mov	r2, r6
   160c4:	mov	r3, r7
   160c8:	str	r5, [sp]
   160cc:	bl	10df0 <lseek64@plt>
   160d0:	mvn	r3, #0
   160d4:	mvn	r2, #0
   160d8:	cmp	r1, r3
   160dc:	cmpeq	r0, r2
   160e0:	beq	16100 <__assert_fail@plt+0x519c>
   160e4:	ldr	r3, [r4]
   160e8:	strd	r0, [r4, #80]	; 0x50
   160ec:	mov	r0, r8
   160f0:	bic	r3, r3, #16
   160f4:	str	r3, [r4]
   160f8:	add	sp, sp, #8
   160fc:	pop	{r4, r5, r6, r7, r8, pc}
   16100:	mvn	r0, #0
   16104:	b	160f8 <__assert_fail@plt+0x5194>
   16108:	push	{r4, r5, r6, r7, r8, lr}
   1610c:	subs	r7, r0, #0
   16110:	ldr	r5, [pc, #108]	; 16184 <__assert_fail@plt+0x5220>
   16114:	sub	sp, sp, #8
   16118:	mov	r8, r1
   1611c:	ldr	r1, [r5]
   16120:	moveq	r7, sp
   16124:	str	r1, [sp, #4]
   16128:	mov	r0, r7
   1612c:	mov	r1, r8
   16130:	mov	r6, r2
   16134:	bl	10e14 <mbrtowc@plt>
   16138:	cmp	r6, #0
   1613c:	cmnne	r0, #3
   16140:	mov	r4, r0
   16144:	bhi	16164 <__assert_fail@plt+0x5200>
   16148:	ldr	r2, [sp, #4]
   1614c:	ldr	r3, [r5]
   16150:	mov	r0, r4
   16154:	cmp	r2, r3
   16158:	bne	16180 <__assert_fail@plt+0x521c>
   1615c:	add	sp, sp, #8
   16160:	pop	{r4, r5, r6, r7, r8, pc}
   16164:	mov	r0, #0
   16168:	bl	161fc <__assert_fail@plt+0x5298>
   1616c:	cmp	r0, #0
   16170:	moveq	r4, #1
   16174:	ldrbeq	r3, [r8]
   16178:	streq	r3, [r7]
   1617c:	b	16148 <__assert_fail@plt+0x51e4>
   16180:	bl	10db4 <__stack_chk_fail@plt>
   16184:	andeq	r7, r2, r8, lsl #30
   16188:	push	{r4, r5, r6, lr}
   1618c:	mov	r4, r0
   16190:	bl	10e08 <__fpending@plt>
   16194:	ldr	r5, [r4]
   16198:	and	r5, r5, #32
   1619c:	mov	r6, r0
   161a0:	mov	r0, r4
   161a4:	bl	15f68 <__assert_fail@plt+0x5004>
   161a8:	cmp	r5, #0
   161ac:	mov	r4, r0
   161b0:	bne	161dc <__assert_fail@plt+0x5278>
   161b4:	cmp	r0, #0
   161b8:	beq	161d4 <__assert_fail@plt+0x5270>
   161bc:	cmp	r6, #0
   161c0:	bne	161f4 <__assert_fail@plt+0x5290>
   161c4:	bl	10e98 <__errno_location@plt>
   161c8:	ldr	r4, [r0]
   161cc:	subs	r4, r4, #9
   161d0:	mvnne	r4, #0
   161d4:	mov	r0, r4
   161d8:	pop	{r4, r5, r6, pc}
   161dc:	cmp	r0, #0
   161e0:	bne	161f4 <__assert_fail@plt+0x5290>
   161e4:	bl	10e98 <__errno_location@plt>
   161e8:	str	r4, [r0]
   161ec:	mvn	r4, #0
   161f0:	b	161d4 <__assert_fail@plt+0x5270>
   161f4:	mvn	r4, #0
   161f8:	b	161d4 <__assert_fail@plt+0x5270>
   161fc:	push	{r4, lr}
   16200:	mov	r1, #0
   16204:	bl	10f10 <setlocale@plt>
   16208:	subs	r4, r0, #0
   1620c:	beq	16238 <__assert_fail@plt+0x52d4>
   16210:	ldr	r1, [pc, #40]	; 16240 <__assert_fail@plt+0x52dc>
   16214:	bl	10d24 <strcmp@plt>
   16218:	cmp	r0, #0
   1621c:	popeq	{r4, pc}
   16220:	mov	r0, r4
   16224:	ldr	r1, [pc, #24]	; 16244 <__assert_fail@plt+0x52e0>
   16228:	bl	10d24 <strcmp@plt>
   1622c:	adds	r0, r0, #0
   16230:	movne	r0, #1
   16234:	pop	{r4, pc}
   16238:	mov	r0, #1
   1623c:	pop	{r4, pc}
   16240:	andeq	r7, r1, r8, lsr #7
   16244:	andeq	r7, r1, ip, lsr #7
   16248:	push	{r4, lr}
   1624c:	mov	r0, #14
   16250:	bl	10f28 <nl_langinfo@plt>
   16254:	cmp	r0, #0
   16258:	beq	16270 <__assert_fail@plt+0x530c>
   1625c:	ldrb	r2, [r0]
   16260:	ldr	r3, [pc, #16]	; 16278 <__assert_fail@plt+0x5314>
   16264:	cmp	r2, #0
   16268:	moveq	r0, r3
   1626c:	pop	{r4, pc}
   16270:	ldr	r0, [pc]	; 16278 <__assert_fail@plt+0x5314>
   16274:	pop	{r4, pc}
   16278:			; <UNDEFINED> instruction: 0x000173b4
   1627c:	subs	r2, r1, #1
   16280:	bxeq	lr
   16284:	bcc	1645c <__assert_fail@plt+0x54f8>
   16288:	cmp	r0, r1
   1628c:	bls	16440 <__assert_fail@plt+0x54dc>
   16290:	tst	r1, r2
   16294:	beq	1644c <__assert_fail@plt+0x54e8>
   16298:	clz	r3, r0
   1629c:	clz	r2, r1
   162a0:	sub	r3, r2, r3
   162a4:	rsbs	r3, r3, #31
   162a8:	addne	r3, r3, r3, lsl #1
   162ac:	mov	r2, #0
   162b0:	addne	pc, pc, r3, lsl #2
   162b4:	nop			; (mov r0, r0)
   162b8:	cmp	r0, r1, lsl #31
   162bc:	adc	r2, r2, r2
   162c0:	subcs	r0, r0, r1, lsl #31
   162c4:	cmp	r0, r1, lsl #30
   162c8:	adc	r2, r2, r2
   162cc:	subcs	r0, r0, r1, lsl #30
   162d0:	cmp	r0, r1, lsl #29
   162d4:	adc	r2, r2, r2
   162d8:	subcs	r0, r0, r1, lsl #29
   162dc:	cmp	r0, r1, lsl #28
   162e0:	adc	r2, r2, r2
   162e4:	subcs	r0, r0, r1, lsl #28
   162e8:	cmp	r0, r1, lsl #27
   162ec:	adc	r2, r2, r2
   162f0:	subcs	r0, r0, r1, lsl #27
   162f4:	cmp	r0, r1, lsl #26
   162f8:	adc	r2, r2, r2
   162fc:	subcs	r0, r0, r1, lsl #26
   16300:	cmp	r0, r1, lsl #25
   16304:	adc	r2, r2, r2
   16308:	subcs	r0, r0, r1, lsl #25
   1630c:	cmp	r0, r1, lsl #24
   16310:	adc	r2, r2, r2
   16314:	subcs	r0, r0, r1, lsl #24
   16318:	cmp	r0, r1, lsl #23
   1631c:	adc	r2, r2, r2
   16320:	subcs	r0, r0, r1, lsl #23
   16324:	cmp	r0, r1, lsl #22
   16328:	adc	r2, r2, r2
   1632c:	subcs	r0, r0, r1, lsl #22
   16330:	cmp	r0, r1, lsl #21
   16334:	adc	r2, r2, r2
   16338:	subcs	r0, r0, r1, lsl #21
   1633c:	cmp	r0, r1, lsl #20
   16340:	adc	r2, r2, r2
   16344:	subcs	r0, r0, r1, lsl #20
   16348:	cmp	r0, r1, lsl #19
   1634c:	adc	r2, r2, r2
   16350:	subcs	r0, r0, r1, lsl #19
   16354:	cmp	r0, r1, lsl #18
   16358:	adc	r2, r2, r2
   1635c:	subcs	r0, r0, r1, lsl #18
   16360:	cmp	r0, r1, lsl #17
   16364:	adc	r2, r2, r2
   16368:	subcs	r0, r0, r1, lsl #17
   1636c:	cmp	r0, r1, lsl #16
   16370:	adc	r2, r2, r2
   16374:	subcs	r0, r0, r1, lsl #16
   16378:	cmp	r0, r1, lsl #15
   1637c:	adc	r2, r2, r2
   16380:	subcs	r0, r0, r1, lsl #15
   16384:	cmp	r0, r1, lsl #14
   16388:	adc	r2, r2, r2
   1638c:	subcs	r0, r0, r1, lsl #14
   16390:	cmp	r0, r1, lsl #13
   16394:	adc	r2, r2, r2
   16398:	subcs	r0, r0, r1, lsl #13
   1639c:	cmp	r0, r1, lsl #12
   163a0:	adc	r2, r2, r2
   163a4:	subcs	r0, r0, r1, lsl #12
   163a8:	cmp	r0, r1, lsl #11
   163ac:	adc	r2, r2, r2
   163b0:	subcs	r0, r0, r1, lsl #11
   163b4:	cmp	r0, r1, lsl #10
   163b8:	adc	r2, r2, r2
   163bc:	subcs	r0, r0, r1, lsl #10
   163c0:	cmp	r0, r1, lsl #9
   163c4:	adc	r2, r2, r2
   163c8:	subcs	r0, r0, r1, lsl #9
   163cc:	cmp	r0, r1, lsl #8
   163d0:	adc	r2, r2, r2
   163d4:	subcs	r0, r0, r1, lsl #8
   163d8:	cmp	r0, r1, lsl #7
   163dc:	adc	r2, r2, r2
   163e0:	subcs	r0, r0, r1, lsl #7
   163e4:	cmp	r0, r1, lsl #6
   163e8:	adc	r2, r2, r2
   163ec:	subcs	r0, r0, r1, lsl #6
   163f0:	cmp	r0, r1, lsl #5
   163f4:	adc	r2, r2, r2
   163f8:	subcs	r0, r0, r1, lsl #5
   163fc:	cmp	r0, r1, lsl #4
   16400:	adc	r2, r2, r2
   16404:	subcs	r0, r0, r1, lsl #4
   16408:	cmp	r0, r1, lsl #3
   1640c:	adc	r2, r2, r2
   16410:	subcs	r0, r0, r1, lsl #3
   16414:	cmp	r0, r1, lsl #2
   16418:	adc	r2, r2, r2
   1641c:	subcs	r0, r0, r1, lsl #2
   16420:	cmp	r0, r1, lsl #1
   16424:	adc	r2, r2, r2
   16428:	subcs	r0, r0, r1, lsl #1
   1642c:	cmp	r0, r1
   16430:	adc	r2, r2, r2
   16434:	subcs	r0, r0, r1
   16438:	mov	r0, r2
   1643c:	bx	lr
   16440:	moveq	r0, #1
   16444:	movne	r0, #0
   16448:	bx	lr
   1644c:	clz	r2, r1
   16450:	rsb	r2, r2, #31
   16454:	lsr	r0, r0, r2
   16458:	bx	lr
   1645c:	cmp	r0, #0
   16460:	mvnne	r0, #0
   16464:	b	166c8 <__assert_fail@plt+0x5764>
   16468:	cmp	r1, #0
   1646c:	beq	1645c <__assert_fail@plt+0x54f8>
   16470:	push	{r0, r1, lr}
   16474:	bl	1627c <__assert_fail@plt+0x5318>
   16478:	pop	{r1, r2, lr}
   1647c:	mul	r3, r2, r0
   16480:	sub	r1, r1, r3
   16484:	bx	lr
   16488:	cmp	r1, #0
   1648c:	beq	16698 <__assert_fail@plt+0x5734>
   16490:	eor	ip, r0, r1
   16494:	rsbmi	r1, r1, #0
   16498:	subs	r2, r1, #1
   1649c:	beq	16664 <__assert_fail@plt+0x5700>
   164a0:	movs	r3, r0
   164a4:	rsbmi	r3, r0, #0
   164a8:	cmp	r3, r1
   164ac:	bls	16670 <__assert_fail@plt+0x570c>
   164b0:	tst	r1, r2
   164b4:	beq	16680 <__assert_fail@plt+0x571c>
   164b8:	clz	r2, r3
   164bc:	clz	r0, r1
   164c0:	sub	r2, r0, r2
   164c4:	rsbs	r2, r2, #31
   164c8:	addne	r2, r2, r2, lsl #1
   164cc:	mov	r0, #0
   164d0:	addne	pc, pc, r2, lsl #2
   164d4:	nop			; (mov r0, r0)
   164d8:	cmp	r3, r1, lsl #31
   164dc:	adc	r0, r0, r0
   164e0:	subcs	r3, r3, r1, lsl #31
   164e4:	cmp	r3, r1, lsl #30
   164e8:	adc	r0, r0, r0
   164ec:	subcs	r3, r3, r1, lsl #30
   164f0:	cmp	r3, r1, lsl #29
   164f4:	adc	r0, r0, r0
   164f8:	subcs	r3, r3, r1, lsl #29
   164fc:	cmp	r3, r1, lsl #28
   16500:	adc	r0, r0, r0
   16504:	subcs	r3, r3, r1, lsl #28
   16508:	cmp	r3, r1, lsl #27
   1650c:	adc	r0, r0, r0
   16510:	subcs	r3, r3, r1, lsl #27
   16514:	cmp	r3, r1, lsl #26
   16518:	adc	r0, r0, r0
   1651c:	subcs	r3, r3, r1, lsl #26
   16520:	cmp	r3, r1, lsl #25
   16524:	adc	r0, r0, r0
   16528:	subcs	r3, r3, r1, lsl #25
   1652c:	cmp	r3, r1, lsl #24
   16530:	adc	r0, r0, r0
   16534:	subcs	r3, r3, r1, lsl #24
   16538:	cmp	r3, r1, lsl #23
   1653c:	adc	r0, r0, r0
   16540:	subcs	r3, r3, r1, lsl #23
   16544:	cmp	r3, r1, lsl #22
   16548:	adc	r0, r0, r0
   1654c:	subcs	r3, r3, r1, lsl #22
   16550:	cmp	r3, r1, lsl #21
   16554:	adc	r0, r0, r0
   16558:	subcs	r3, r3, r1, lsl #21
   1655c:	cmp	r3, r1, lsl #20
   16560:	adc	r0, r0, r0
   16564:	subcs	r3, r3, r1, lsl #20
   16568:	cmp	r3, r1, lsl #19
   1656c:	adc	r0, r0, r0
   16570:	subcs	r3, r3, r1, lsl #19
   16574:	cmp	r3, r1, lsl #18
   16578:	adc	r0, r0, r0
   1657c:	subcs	r3, r3, r1, lsl #18
   16580:	cmp	r3, r1, lsl #17
   16584:	adc	r0, r0, r0
   16588:	subcs	r3, r3, r1, lsl #17
   1658c:	cmp	r3, r1, lsl #16
   16590:	adc	r0, r0, r0
   16594:	subcs	r3, r3, r1, lsl #16
   16598:	cmp	r3, r1, lsl #15
   1659c:	adc	r0, r0, r0
   165a0:	subcs	r3, r3, r1, lsl #15
   165a4:	cmp	r3, r1, lsl #14
   165a8:	adc	r0, r0, r0
   165ac:	subcs	r3, r3, r1, lsl #14
   165b0:	cmp	r3, r1, lsl #13
   165b4:	adc	r0, r0, r0
   165b8:	subcs	r3, r3, r1, lsl #13
   165bc:	cmp	r3, r1, lsl #12
   165c0:	adc	r0, r0, r0
   165c4:	subcs	r3, r3, r1, lsl #12
   165c8:	cmp	r3, r1, lsl #11
   165cc:	adc	r0, r0, r0
   165d0:	subcs	r3, r3, r1, lsl #11
   165d4:	cmp	r3, r1, lsl #10
   165d8:	adc	r0, r0, r0
   165dc:	subcs	r3, r3, r1, lsl #10
   165e0:	cmp	r3, r1, lsl #9
   165e4:	adc	r0, r0, r0
   165e8:	subcs	r3, r3, r1, lsl #9
   165ec:	cmp	r3, r1, lsl #8
   165f0:	adc	r0, r0, r0
   165f4:	subcs	r3, r3, r1, lsl #8
   165f8:	cmp	r3, r1, lsl #7
   165fc:	adc	r0, r0, r0
   16600:	subcs	r3, r3, r1, lsl #7
   16604:	cmp	r3, r1, lsl #6
   16608:	adc	r0, r0, r0
   1660c:	subcs	r3, r3, r1, lsl #6
   16610:	cmp	r3, r1, lsl #5
   16614:	adc	r0, r0, r0
   16618:	subcs	r3, r3, r1, lsl #5
   1661c:	cmp	r3, r1, lsl #4
   16620:	adc	r0, r0, r0
   16624:	subcs	r3, r3, r1, lsl #4
   16628:	cmp	r3, r1, lsl #3
   1662c:	adc	r0, r0, r0
   16630:	subcs	r3, r3, r1, lsl #3
   16634:	cmp	r3, r1, lsl #2
   16638:	adc	r0, r0, r0
   1663c:	subcs	r3, r3, r1, lsl #2
   16640:	cmp	r3, r1, lsl #1
   16644:	adc	r0, r0, r0
   16648:	subcs	r3, r3, r1, lsl #1
   1664c:	cmp	r3, r1
   16650:	adc	r0, r0, r0
   16654:	subcs	r3, r3, r1
   16658:	cmp	ip, #0
   1665c:	rsbmi	r0, r0, #0
   16660:	bx	lr
   16664:	teq	ip, r0
   16668:	rsbmi	r0, r0, #0
   1666c:	bx	lr
   16670:	movcc	r0, #0
   16674:	asreq	r0, ip, #31
   16678:	orreq	r0, r0, #1
   1667c:	bx	lr
   16680:	clz	r2, r1
   16684:	rsb	r2, r2, #31
   16688:	cmp	ip, #0
   1668c:	lsr	r0, r3, r2
   16690:	rsbmi	r0, r0, #0
   16694:	bx	lr
   16698:	cmp	r0, #0
   1669c:	mvngt	r0, #-2147483648	; 0x80000000
   166a0:	movlt	r0, #-2147483648	; 0x80000000
   166a4:	b	166c8 <__assert_fail@plt+0x5764>
   166a8:	cmp	r1, #0
   166ac:	beq	16698 <__assert_fail@plt+0x5734>
   166b0:	push	{r0, r1, lr}
   166b4:	bl	16490 <__assert_fail@plt+0x552c>
   166b8:	pop	{r1, r2, lr}
   166bc:	mul	r3, r2, r0
   166c0:	sub	r1, r1, r3
   166c4:	bx	lr
   166c8:	push	{r1, lr}
   166cc:	mov	r0, #8
   166d0:	bl	10d18 <raise@plt>
   166d4:	pop	{r1, pc}
   166d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166dc:	mov	r7, r0
   166e0:	ldr	r6, [pc, #72]	; 16730 <__assert_fail@plt+0x57cc>
   166e4:	ldr	r5, [pc, #72]	; 16734 <__assert_fail@plt+0x57d0>
   166e8:	add	r6, pc, r6
   166ec:	add	r5, pc, r5
   166f0:	sub	r6, r6, r5
   166f4:	mov	r8, r1
   166f8:	mov	r9, r2
   166fc:	bl	10ce0 <calloc@plt-0x20>
   16700:	asrs	r6, r6, #2
   16704:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16708:	mov	r4, #0
   1670c:	add	r4, r4, #1
   16710:	ldr	r3, [r5], #4
   16714:	mov	r2, r9
   16718:	mov	r1, r8
   1671c:	mov	r0, r7
   16720:	blx	r3
   16724:	cmp	r6, r4
   16728:	bne	1670c <__assert_fail@plt+0x57a8>
   1672c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16730:	andeq	r1, r1, r4, lsl r8
   16734:	andeq	r1, r1, ip, lsl #16
   16738:	bx	lr
   1673c:	ldr	r3, [pc, #12]	; 16750 <__assert_fail@plt+0x57ec>
   16740:	mov	r1, #0
   16744:	add	r3, pc, r3
   16748:	ldr	r2, [r3]
   1674c:	b	10ea4 <__cxa_atexit@plt>
   16750:	muleq	r1, r8, r9

Disassembly of section .fini:

00016754 <.fini>:
   16754:	push	{r3, lr}
   16758:	pop	{r3, pc}
