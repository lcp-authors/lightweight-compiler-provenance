
raspbian-preinstalled/gpgconf:     file format elf32-littlearm


Disassembly of section .init:

00011fb0 <.init>:
   11fb0:	push	{r3, lr}
   11fb4:	bl	13a50 <__assert_fail@plt+0x130c>
   11fb8:	pop	{r3, pc}

Disassembly of section .plt:

00011fbc <gcry_xmalloc@plt-0x14>:
   11fbc:	push	{lr}		; (str lr, [sp, #-4]!)
   11fc0:	ldr	lr, [pc, #4]	; 11fcc <gcry_xmalloc@plt-0x4>
   11fc4:	add	lr, pc, lr
   11fc8:	ldr	pc, [lr, #8]!
   11fcc:	andeq	r8, r2, r4, lsr #27

00011fd0 <gcry_xmalloc@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #40, 20	; 0x28000
   11fd8:	ldr	pc, [ip, #3492]!	; 0xda4

00011fdc <calloc@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #40, 20	; 0x28000
   11fe4:	ldr	pc, [ip, #3484]!	; 0xd9c

00011fe8 <strstr@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #40, 20	; 0x28000
   11ff0:	ldr	pc, [ip, #3476]!	; 0xd94

00011ff4 <raise@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #40, 20	; 0x28000
   11ffc:	ldr	pc, [ip, #3468]!	; 0xd8c

00012000 <gpgrt_funlockfile@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #40, 20	; 0x28000
   12008:	ldr	pc, [ip, #3460]!	; 0xd84

0001200c <gcry_malloc@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #40, 20	; 0x28000
   12014:	ldr	pc, [ip, #3452]!	; 0xd7c

00012018 <gmtime_r@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #40, 20	; 0x28000
   12020:	ldr	pc, [ip, #3444]!	; 0xd74

00012024 <gpgrt_read_line@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #40, 20	; 0x28000
   1202c:	ldr	pc, [ip, #3436]!	; 0xd6c

00012030 <getpwnam@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #40, 20	; 0x28000
   12038:	ldr	pc, [ip, #3428]!	; 0xd64

0001203c <iconv_close@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #40, 20	; 0x28000
   12044:	ldr	pc, [ip, #3420]!	; 0xd5c

00012048 <iconv@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #40, 20	; 0x28000
   12050:	ldr	pc, [ip, #3412]!	; 0xd54

00012054 <strcmp@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #40, 20	; 0x28000
   1205c:	ldr	pc, [ip, #3404]!	; 0xd4c

00012060 <gpgrt_vfprintf_unlocked@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #40, 20	; 0x28000
   12068:	ldr	pc, [ip, #3396]!	; 0xd44

0001206c <strtol@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #40, 20	; 0x28000
   12074:	ldr	pc, [ip, #3388]!	; 0xd3c

00012078 <getpwuid@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #40, 20	; 0x28000
   12080:	ldr	pc, [ip, #3380]!	; 0xd34

00012084 <strcspn@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #40, 20	; 0x28000
   1208c:	ldr	pc, [ip, #3372]!	; 0xd2c

00012090 <gpgrt_vfprintf@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #40, 20	; 0x28000
   12098:	ldr	pc, [ip, #3364]!	; 0xd24

0001209c <setrlimit64@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #40, 20	; 0x28000
   120a4:	ldr	pc, [ip, #3356]!	; 0xd1c

000120a8 <mktime@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #40, 20	; 0x28000
   120b0:	ldr	pc, [ip, #3348]!	; 0xd14

000120b4 <fflush@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #40, 20	; 0x28000
   120bc:	ldr	pc, [ip, #3340]!	; 0xd0c

000120c0 <getuid@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #40, 20	; 0x28000
   120c8:	ldr	pc, [ip, #3332]!	; 0xd04

000120cc <sigprocmask@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #40, 20	; 0x28000
   120d4:	ldr	pc, [ip, #3324]!	; 0xcfc

000120d8 <memmove@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #40, 20	; 0x28000
   120e0:	ldr	pc, [ip, #3316]!	; 0xcf4

000120e4 <free@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #40, 20	; 0x28000
   120ec:	ldr	pc, [ip, #3308]!	; 0xcec

000120f0 <_gpgrt_putc_overflow@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #40, 20	; 0x28000
   120f8:	ldr	pc, [ip, #3300]!	; 0xce4

000120fc <nanosleep@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #40, 20	; 0x28000
   12104:	ldr	pc, [ip, #3292]!	; 0xcdc

00012108 <ferror@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #40, 20	; 0x28000
   12110:	ldr	pc, [ip, #3284]!	; 0xcd4

00012114 <inet_pton@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #40, 20	; 0x28000
   1211c:	ldr	pc, [ip, #3276]!	; 0xccc

00012120 <_exit@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #40, 20	; 0x28000
   12128:	ldr	pc, [ip, #3268]!	; 0xcc4

0001212c <memcpy@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #40, 20	; 0x28000
   12134:	ldr	pc, [ip, #3260]!	; 0xcbc

00012138 <time@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #40, 20	; 0x28000
   12140:	ldr	pc, [ip, #3252]!	; 0xcb4

00012144 <rmdir@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #40, 20	; 0x28000
   1214c:	ldr	pc, [ip, #3244]!	; 0xcac

00012150 <gcry_free@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #40, 20	; 0x28000
   12158:	ldr	pc, [ip, #3236]!	; 0xca4

0001215c <memcmp@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #40, 20	; 0x28000
   12164:	ldr	pc, [ip, #3228]!	; 0xc9c

00012168 <sleep@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #40, 20	; 0x28000
   12170:	ldr	pc, [ip, #3220]!	; 0xc94

00012174 <stpcpy@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #40, 20	; 0x28000
   1217c:	ldr	pc, [ip, #3212]!	; 0xc8c

00012180 <dcgettext@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #40, 20	; 0x28000
   12188:	ldr	pc, [ip, #3204]!	; 0xc84

0001218c <__stack_chk_fail@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #40, 20	; 0x28000
   12194:	ldr	pc, [ip, #3196]!	; 0xc7c

00012198 <gpgrt_set_alloc_func@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #40, 20	; 0x28000
   121a0:	ldr	pc, [ip, #3188]!	; 0xc74

000121a4 <sysconf@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #40, 20	; 0x28000
   121ac:	ldr	pc, [ip, #3180]!	; 0xc6c

000121b0 <unlink@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #40, 20	; 0x28000
   121b8:	ldr	pc, [ip, #3172]!	; 0xc64

000121bc <dup2@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #40, 20	; 0x28000
   121c4:	ldr	pc, [ip, #3164]!	; 0xc5c

000121c8 <gpgrt_ferror@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #40, 20	; 0x28000
   121d0:	ldr	pc, [ip, #3156]!	; 0xc54

000121d4 <getrlimit64@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #40, 20	; 0x28000
   121dc:	ldr	pc, [ip, #3148]!	; 0xc4c

000121e0 <realloc@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #40, 20	; 0x28000
   121e8:	ldr	pc, [ip, #3140]!	; 0xc44

000121ec <gpgrt_fflush@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #40, 20	; 0x28000
   121f4:	ldr	pc, [ip, #3132]!	; 0xc3c

000121f8 <dup@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #40, 20	; 0x28000
   12200:	ldr	pc, [ip, #3124]!	; 0xc34

00012204 <textdomain@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #40, 20	; 0x28000
   1220c:	ldr	pc, [ip, #3116]!	; 0xc2c

00012210 <tmpfile64@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #40, 20	; 0x28000
   12218:	ldr	pc, [ip, #3108]!	; 0xc24

0001221c <chdir@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #40, 20	; 0x28000
   12224:	ldr	pc, [ip, #3100]!	; 0xc1c

00012228 <geteuid@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #40, 20	; 0x28000
   12230:	ldr	pc, [ip, #3092]!	; 0xc14

00012234 <gpgrt_fputs_unlocked@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #40, 20	; 0x28000
   1223c:	ldr	pc, [ip, #3084]!	; 0xc0c

00012240 <__fxstat64@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #40, 20	; 0x28000
   12248:	ldr	pc, [ip, #3076]!	; 0xc04

0001224c <sigaction@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #40, 20	; 0x28000
   12254:	ldr	pc, [ip, #3068]!	; 0xbfc

00012258 <gpg_err_code_from_errno@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #40, 20	; 0x28000
   12260:	ldr	pc, [ip, #3060]!	; 0xbf4

00012264 <fwrite@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #40, 20	; 0x28000
   1226c:	ldr	pc, [ip, #3052]!	; 0xbec

00012270 <gcry_check_version@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #40, 20	; 0x28000
   12278:	ldr	pc, [ip, #3044]!	; 0xbe4

0001227c <waitpid@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #40, 20	; 0x28000
   12284:	ldr	pc, [ip, #3036]!	; 0xbdc

00012288 <strcpy@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #40, 20	; 0x28000
   12290:	ldr	pc, [ip, #3028]!	; 0xbd4

00012294 <bind_textdomain_codeset@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #40, 20	; 0x28000
   1229c:	ldr	pc, [ip, #3020]!	; 0xbcc

000122a0 <gpgrt_fputc@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #40, 20	; 0x28000
   122a8:	ldr	pc, [ip, #3012]!	; 0xbc4

000122ac <gpgrt_flockfile@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #40, 20	; 0x28000
   122b4:	ldr	pc, [ip, #3004]!	; 0xbbc

000122b8 <gpgrt_fclose@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #40, 20	; 0x28000
   122c0:	ldr	pc, [ip, #2996]!	; 0xbb4

000122c4 <gpgrt_setvbuf@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #40, 20	; 0x28000
   122cc:	ldr	pc, [ip, #2988]!	; 0xbac

000122d0 <opendir@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #40, 20	; 0x28000
   122d8:	ldr	pc, [ip, #2980]!	; 0xba4

000122dc <open64@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #40, 20	; 0x28000
   122e4:	ldr	pc, [ip, #2972]!	; 0xb9c

000122e8 <getenv@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #40, 20	; 0x28000
   122f0:	ldr	pc, [ip, #2964]!	; 0xb94

000122f4 <gcry_malloc_secure@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #40, 20	; 0x28000
   122fc:	ldr	pc, [ip, #2956]!	; 0xb8c

00012300 <gpgrt_fdopen@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #40, 20	; 0x28000
   12308:	ldr	pc, [ip, #2948]!	; 0xb84

0001230c <malloc@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #40, 20	; 0x28000
   12314:	ldr	pc, [ip, #2940]!	; 0xb7c

00012318 <iconv_open@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #40, 20	; 0x28000
   12320:	ldr	pc, [ip, #2932]!	; 0xb74

00012324 <__libc_start_main@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #40, 20	; 0x28000
   1232c:	ldr	pc, [ip, #2924]!	; 0xb6c

00012330 <strerror@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #40, 20	; 0x28000
   12338:	ldr	pc, [ip, #2916]!	; 0xb64

0001233c <strftime@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #40, 20	; 0x28000
   12344:	ldr	pc, [ip, #2908]!	; 0xb5c

00012348 <localtime@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #40, 20	; 0x28000
   12350:	ldr	pc, [ip, #2900]!	; 0xb54

00012354 <__ctype_tolower_loc@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #40, 20	; 0x28000
   1235c:	ldr	pc, [ip, #2892]!	; 0xb4c

00012360 <__ctype_toupper_loc@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #40, 20	; 0x28000
   12368:	ldr	pc, [ip, #2884]!	; 0xb44

0001236c <__gmon_start__@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #40, 20	; 0x28000
   12374:	ldr	pc, [ip, #2876]!	; 0xb3c

00012378 <rename@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #40, 20	; 0x28000
   12380:	ldr	pc, [ip, #2868]!	; 0xb34

00012384 <kill@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #40, 20	; 0x28000
   1238c:	ldr	pc, [ip, #2860]!	; 0xb2c

00012390 <__ctype_b_loc@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #40, 20	; 0x28000
   12398:	ldr	pc, [ip, #2852]!	; 0xb24

0001239c <_gpgrt_get_std_stream@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #40, 20	; 0x28000
   123a4:	ldr	pc, [ip, #2844]!	; 0xb1c

000123a8 <getcwd@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #40, 20	; 0x28000
   123b0:	ldr	pc, [ip, #2836]!	; 0xb14

000123b4 <getpid@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #40, 20	; 0x28000
   123bc:	ldr	pc, [ip, #2828]!	; 0xb0c

000123c0 <exit@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #40, 20	; 0x28000
   123c8:	ldr	pc, [ip, #2820]!	; 0xb04

000123cc <gpgrt_fprintf_unlocked@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #40, 20	; 0x28000
   123d4:	ldr	pc, [ip, #2812]!	; 0xafc

000123d8 <strtoul@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #40, 20	; 0x28000
   123e0:	ldr	pc, [ip, #2804]!	; 0xaf4

000123e4 <strlen@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #40, 20	; 0x28000
   123ec:	ldr	pc, [ip, #2796]!	; 0xaec

000123f0 <inotify_init@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #40, 20	; 0x28000
   123f8:	ldr	pc, [ip, #2788]!	; 0xae4

000123fc <setsid@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #40, 20	; 0x28000
   12404:	ldr	pc, [ip, #2780]!	; 0xadc

00012408 <strchr@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #40, 20	; 0x28000
   12410:	ldr	pc, [ip, #2772]!	; 0xad4

00012414 <setenv@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #40, 20	; 0x28000
   1241c:	ldr	pc, [ip, #2764]!	; 0xacc

00012420 <gpg_err_code_from_syserror@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #40, 20	; 0x28000
   12428:	ldr	pc, [ip, #2756]!	; 0xac4

0001242c <execv@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #40, 20	; 0x28000
   12434:	ldr	pc, [ip, #2748]!	; 0xabc

00012438 <__open64_2@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #40, 20	; 0x28000
   12440:	ldr	pc, [ip, #2740]!	; 0xab4

00012444 <sigfillset@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #40, 20	; 0x28000
   1244c:	ldr	pc, [ip, #2732]!	; 0xaac

00012450 <inotify_add_watch@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #40, 20	; 0x28000
   12458:	ldr	pc, [ip, #2724]!	; 0xaa4

0001245c <__errno_location@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #40, 20	; 0x28000
   12464:	ldr	pc, [ip, #2716]!	; 0xa9c

00012468 <__strcat_chk@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #40, 20	; 0x28000
   12470:	ldr	pc, [ip, #2708]!	; 0xa94

00012474 <__sprintf_chk@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #40, 20	; 0x28000
   1247c:	ldr	pc, [ip, #2700]!	; 0xa8c

00012480 <__cxa_atexit@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #40, 20	; 0x28000
   12488:	ldr	pc, [ip, #2692]!	; 0xa84

0001248c <mkdir@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #40, 20	; 0x28000
   12494:	ldr	pc, [ip, #2684]!	; 0xa7c

00012498 <getgid@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #40, 20	; 0x28000
   124a0:	ldr	pc, [ip, #2676]!	; 0xa74

000124a4 <memset@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #40, 20	; 0x28000
   124ac:	ldr	pc, [ip, #2668]!	; 0xa6c

000124b0 <gcry_calloc@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #40, 20	; 0x28000
   124b8:	ldr	pc, [ip, #2660]!	; 0xa64

000124bc <strncpy@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #40, 20	; 0x28000
   124c4:	ldr	pc, [ip, #2652]!	; 0xa5c

000124c8 <gpgrt_vasprintf@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #40, 20	; 0x28000
   124d0:	ldr	pc, [ip, #2644]!	; 0xa54

000124d4 <gmtime@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #40, 20	; 0x28000
   124dc:	ldr	pc, [ip, #2636]!	; 0xa4c

000124e0 <gpgrt_fopen@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #40, 20	; 0x28000
   124e8:	ldr	pc, [ip, #2628]!	; 0xa44

000124ec <link@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #40, 20	; 0x28000
   124f4:	ldr	pc, [ip, #2620]!	; 0xa3c

000124f8 <write@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #40, 20	; 0x28000
   12500:	ldr	pc, [ip, #2612]!	; 0xa34

00012504 <gpgrt_fgetc@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #40, 20	; 0x28000
   1250c:	ldr	pc, [ip, #2604]!	; 0xa2c

00012510 <difftime@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #40, 20	; 0x28000
   12518:	ldr	pc, [ip, #2596]!	; 0xa24

0001251c <__fprintf_chk@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #40, 20	; 0x28000
   12524:	ldr	pc, [ip, #2588]!	; 0xa1c

00012528 <gcry_xstrdup@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #40, 20	; 0x28000
   12530:	ldr	pc, [ip, #2580]!	; 0xa14

00012534 <access@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #40, 20	; 0x28000
   1253c:	ldr	pc, [ip, #2572]!	; 0xa0c

00012540 <gcry_realloc@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #40, 20	; 0x28000
   12548:	ldr	pc, [ip, #2564]!	; 0xa04

0001254c <gpgrt_fputs@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #40, 20	; 0x28000
   12554:	ldr	pc, [ip, #2556]!	; 0x9fc

00012558 <pipe@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #40, 20	; 0x28000
   12560:	ldr	pc, [ip, #2548]!	; 0x9f4

00012564 <gpgrt_snprintf@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #40, 20	; 0x28000
   1256c:	ldr	pc, [ip, #2540]!	; 0x9ec

00012570 <fcntl64@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #40, 20	; 0x28000
   12578:	ldr	pc, [ip, #2532]!	; 0x9e4

0001257c <gcry_md_hash_buffer@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #40, 20	; 0x28000
   12584:	ldr	pc, [ip, #2524]!	; 0x9dc

00012588 <setlocale@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #40, 20	; 0x28000
   12590:	ldr	pc, [ip, #2516]!	; 0x9d4

00012594 <sigemptyset@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #40, 20	; 0x28000
   1259c:	ldr	pc, [ip, #2508]!	; 0x9cc

000125a0 <fork@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #40, 20	; 0x28000
   125a8:	ldr	pc, [ip, #2500]!	; 0x9c4

000125ac <putenv@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #40, 20	; 0x28000
   125b4:	ldr	pc, [ip, #2492]!	; 0x9bc

000125b8 <__explicit_bzero_chk@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #40, 20	; 0x28000
   125c0:	ldr	pc, [ip, #2484]!	; 0x9b4

000125c4 <strrchr@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #40, 20	; 0x28000
   125cc:	ldr	pc, [ip, #2476]!	; 0x9ac

000125d0 <nl_langinfo@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #40, 20	; 0x28000
   125d8:	ldr	pc, [ip, #2468]!	; 0x9a4

000125dc <gpg_err_set_errno@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #40, 20	; 0x28000
   125e4:	ldr	pc, [ip, #2460]!	; 0x99c

000125e8 <readdir64@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #40, 20	; 0x28000
   125f0:	ldr	pc, [ip, #2452]!	; 0x994

000125f4 <timegm@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #40, 20	; 0x28000
   125fc:	ldr	pc, [ip, #2444]!	; 0x98c

00012600 <getgroups@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #40, 20	; 0x28000
   12608:	ldr	pc, [ip, #2436]!	; 0x984

0001260c <gpg_strerror@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #40, 20	; 0x28000
   12614:	ldr	pc, [ip, #2428]!	; 0x97c

00012618 <gpgrt_fopencookie@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #40, 20	; 0x28000
   12620:	ldr	pc, [ip, #2420]!	; 0x974

00012624 <getsockname@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #40, 20	; 0x28000
   1262c:	ldr	pc, [ip, #2412]!	; 0x96c

00012630 <gpg_err_init@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #40, 20	; 0x28000
   12638:	ldr	pc, [ip, #2404]!	; 0x964

0001263c <remove@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #40, 20	; 0x28000
   12644:	ldr	pc, [ip, #2396]!	; 0x95c

00012648 <gcry_create_nonce@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #40, 20	; 0x28000
   12650:	ldr	pc, [ip, #2388]!	; 0x954

00012654 <gcry_control@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #40, 20	; 0x28000
   1265c:	ldr	pc, [ip, #2380]!	; 0x94c

00012660 <strpbrk@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #40, 20	; 0x28000
   12668:	ldr	pc, [ip, #2372]!	; 0x944

0001266c <socket@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #40, 20	; 0x28000
   12674:	ldr	pc, [ip, #2364]!	; 0x93c

00012678 <gpgrt_fprintf@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #40, 20	; 0x28000
   12680:	ldr	pc, [ip, #2356]!	; 0x934

00012684 <bindtextdomain@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #40, 20	; 0x28000
   1268c:	ldr	pc, [ip, #2348]!	; 0x92c

00012690 <gcry_xcalloc@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #40, 20	; 0x28000
   12698:	ldr	pc, [ip, #2340]!	; 0x924

0001269c <chmod@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #40, 20	; 0x28000
   126a4:	ldr	pc, [ip, #2332]!	; 0x91c

000126a8 <__xstat64@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #40, 20	; 0x28000
   126b0:	ldr	pc, [ip, #2324]!	; 0x914

000126b4 <isatty@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #40, 20	; 0x28000
   126bc:	ldr	pc, [ip, #2316]!	; 0x90c

000126c0 <unsetenv@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #40, 20	; 0x28000
   126c8:	ldr	pc, [ip, #2308]!	; 0x904

000126cc <fputs@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #40, 20	; 0x28000
   126d4:	ldr	pc, [ip, #2300]!	; 0x8fc

000126d8 <strncmp@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #40, 20	; 0x28000
   126e0:	ldr	pc, [ip, #2292]!	; 0x8f4

000126e4 <abort@plt>:
   126e4:	add	ip, pc, #0, 12
   126e8:	add	ip, ip, #40, 20	; 0x28000
   126ec:	ldr	pc, [ip, #2284]!	; 0x8ec

000126f0 <getc@plt>:
   126f0:	add	ip, pc, #0, 12
   126f4:	add	ip, ip, #40, 20	; 0x28000
   126f8:	ldr	pc, [ip, #2276]!	; 0x8e4

000126fc <gpgrt_fileno@plt>:
   126fc:	add	ip, pc, #0, 12
   12700:	add	ip, ip, #40, 20	; 0x28000
   12704:	ldr	pc, [ip, #2268]!	; 0x8dc

00012708 <close@plt>:
   12708:	add	ip, pc, #0, 12
   1270c:	add	ip, ip, #40, 20	; 0x28000
   12710:	ldr	pc, [ip, #2260]!	; 0x8d4

00012714 <gcry_strdup@plt>:
   12714:	add	ip, pc, #0, 12
   12718:	add	ip, ip, #40, 20	; 0x28000
   1271c:	ldr	pc, [ip, #2252]!	; 0x8cc

00012720 <connect@plt>:
   12720:	add	ip, pc, #0, 12
   12724:	add	ip, ip, #40, 20	; 0x28000
   12728:	ldr	pc, [ip, #2244]!	; 0x8c4

0001272c <closedir@plt>:
   1272c:	add	ip, pc, #0, 12
   12730:	add	ip, ip, #40, 20	; 0x28000
   12734:	ldr	pc, [ip, #2236]!	; 0x8bc

00012738 <getgrgid@plt>:
   12738:	add	ip, pc, #0, 12
   1273c:	add	ip, ip, #40, 20	; 0x28000
   12740:	ldr	pc, [ip, #2228]!	; 0x8b4

00012744 <__assert_fail@plt>:
   12744:	add	ip, pc, #0, 12
   12748:	add	ip, ip, #40, 20	; 0x28000
   1274c:	ldr	pc, [ip, #2220]!	; 0x8ac

Disassembly of section .text:

00012750 <.text>:
   12750:	ldr	r3, [pc, #4076]	; 13744 <__assert_fail@plt+0x1000>
   12754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12758:	sub	sp, sp, #204	; 0xcc
   1275c:	ldr	r3, [r3]
   12760:	mov	r6, #0
   12764:	str	r3, [sp, #196]	; 0xc4
   12768:	str	r1, [sp, #56]	; 0x38
   1276c:	str	r0, [sp, #60]	; 0x3c
   12770:	str	r6, [sp, #64]	; 0x40
   12774:	bl	1ef50 <__assert_fail@plt+0xc80c>
   12778:	ldr	r0, [pc, #4040]	; 13748 <__assert_fail@plt+0x1004>
   1277c:	bl	1f400 <__assert_fail@plt+0xccbc>
   12780:	ldr	r0, [pc, #4036]	; 1374c <__assert_fail@plt+0x1008>
   12784:	bl	1d670 <__assert_fail@plt+0xaf2c>
   12788:	add	r4, sp, #56	; 0x38
   1278c:	mov	r1, #1
   12790:	ldr	r0, [pc, #4016]	; 13748 <__assert_fail@plt+0x1004>
   12794:	add	r5, sp, #60	; 0x3c
   12798:	bl	1e6b4 <__assert_fail@plt+0xbf70>
   1279c:	ldr	r9, [pc, #4012]	; 13750 <__assert_fail@plt+0x100c>
   127a0:	bl	19440 <__assert_fail@plt+0x6cfc>
   127a4:	mov	r2, r4
   127a8:	mov	r1, r5
   127ac:	mov	r0, r6
   127b0:	bl	1ef54 <__assert_fail@plt+0xc810>
   127b4:	ldr	r8, [pc, #3992]	; 13754 <__assert_fail@plt+0x1010>
   127b8:	bl	14ea4 <__assert_fail@plt+0x2760>
   127bc:	ldr	r7, [pc, #3988]	; 13758 <__assert_fail@plt+0x1014>
   127c0:	str	r5, [sp, #84]	; 0x54
   127c4:	ldr	r5, [pc, #3984]	; 1375c <__assert_fail@plt+0x1018>
   127c8:	str	r4, [sp, #88]	; 0x58
   127cc:	add	r4, r9, #4
   127d0:	mov	r3, #1
   127d4:	str	r3, [sp, #92]	; 0x5c
   127d8:	mov	r2, #0
   127dc:	str	r4, [sp]
   127e0:	mov	r1, r2
   127e4:	mov	r0, r2
   127e8:	add	r3, sp, #84	; 0x54
   127ec:	bl	1cb14 <__assert_fail@plt+0xa3d0>
   127f0:	cmp	r0, #0
   127f4:	beq	128b0 <__assert_fail@plt+0x16c>
   127f8:	ldr	r3, [sp, #100]	; 0x64
   127fc:	cmp	r3, #118	; 0x76
   12800:	beq	129b4 <__assert_fail@plt+0x270>
   12804:	bgt	12864 <__assert_fail@plt+0x120>
   12808:	cmp	r3, #111	; 0x6f
   1280c:	beq	129a8 <__assert_fail@plt+0x264>
   12810:	bgt	12840 <__assert_fail@plt+0xfc>
   12814:	cmp	r3, #48	; 0x30
   12818:	moveq	r3, #1
   1281c:	streq	r3, [r8, #16]
   12820:	beq	127d8 <__assert_fail@plt+0x94>
   12824:	cmp	r3, #110	; 0x6e
   12828:	moveq	r3, #1
   1282c:	streq	r3, [r8, #8]
   12830:	beq	127d8 <__assert_fail@plt+0x94>
   12834:	mov	r3, #2
   12838:	str	r3, [sp, #96]	; 0x60
   1283c:	b	127d8 <__assert_fail@plt+0x94>
   12840:	cmp	r3, #113	; 0x71
   12844:	moveq	r3, #1
   12848:	streq	r3, [r8, #4]
   1284c:	beq	127d8 <__assert_fail@plt+0x94>
   12850:	cmp	r3, #114	; 0x72
   12854:	moveq	r3, #1
   12858:	streq	r3, [r8, #12]
   1285c:	beq	127d8 <__assert_fail@plt+0x94>
   12860:	b	12834 <__assert_fail@plt+0xf0>
   12864:	cmp	r3, r7
   12868:	beq	1299c <__assert_fail@plt+0x258>
   1286c:	bgt	12898 <__assert_fail@plt+0x154>
   12870:	cmp	r3, #500	; 0x1f4
   12874:	moveq	r3, #0
   12878:	streq	r3, [r8]
   1287c:	beq	127d8 <__assert_fail@plt+0x94>
   12880:	ldr	r2, [pc, #3800]	; 13760 <__assert_fail@plt+0x101c>
   12884:	cmp	r3, r2
   12888:	bne	12834 <__assert_fail@plt+0xf0>
   1288c:	ldr	r0, [sp, #108]	; 0x6c
   12890:	bl	1ff74 <__assert_fail@plt+0xd830>
   12894:	b	127d8 <__assert_fail@plt+0x94>
   12898:	cmp	r3, r5
   1289c:	beq	129c4 <__assert_fail@plt+0x280>
   128a0:	cmp	r3, #520	; 0x208
   128a4:	movlt	r6, r3
   128a8:	blt	127d8 <__assert_fail@plt+0x94>
   128ac:	b	12834 <__assert_fail@plt+0xf0>
   128b0:	bl	1e648 <__assert_fail@plt+0xbf04>
   128b4:	subs	r4, r0, #0
   128b8:	bne	130fc <__assert_fail@plt+0x9b8>
   128bc:	ldr	fp, [pc, #3728]	; 13754 <__assert_fail@plt+0x1010>
   128c0:	ldr	r3, [sp, #92]	; 0x5c
   128c4:	ldr	r2, [fp, #4]
   128c8:	and	r3, r3, #256	; 0x100
   128cc:	orrs	r3, r3, r2
   128d0:	ldr	r2, [sp, #60]	; 0x3c
   128d4:	bne	1293c <__assert_fail@plt+0x1f8>
   128d8:	cmp	r2, #0
   128dc:	ble	1293c <__assert_fail@plt+0x1f8>
   128e0:	ldr	r7, [pc, #3708]	; 13764 <__assert_fail@plt+0x1020>
   128e4:	b	128f4 <__assert_fail@plt+0x1b0>
   128e8:	add	r4, r4, #1
   128ec:	cmp	r2, r4
   128f0:	ble	1293c <__assert_fail@plt+0x1f8>
   128f4:	ldr	r3, [sp, #56]	; 0x38
   128f8:	lsl	r5, r4, #2
   128fc:	ldr	r3, [r3, r4, lsl #2]
   12900:	ldrb	r1, [r3]
   12904:	cmp	r1, #45	; 0x2d
   12908:	bne	128e8 <__assert_fail@plt+0x1a4>
   1290c:	ldrb	r3, [r3, #1]
   12910:	cmp	r3, #45	; 0x2d
   12914:	bne	128e8 <__assert_fail@plt+0x1a4>
   12918:	mov	r2, #5
   1291c:	mov	r1, r7
   12920:	mov	r0, #0
   12924:	bl	12180 <dcgettext@plt>
   12928:	ldr	r3, [sp, #56]	; 0x38
   1292c:	ldr	r1, [r3, r5]
   12930:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   12934:	ldr	r2, [sp, #60]	; 0x3c
   12938:	b	128e8 <__assert_fail@plt+0x1a4>
   1293c:	cmp	r2, #0
   12940:	beq	12a48 <__assert_fail@plt+0x304>
   12944:	ldr	r1, [sp, #56]	; 0x38
   12948:	sub	r3, r6, #504	; 0x1f8
   1294c:	sub	r3, r3, #1
   12950:	ldr	r5, [r1]
   12954:	cmp	r3, #14
   12958:	ldrls	pc, [pc, r3, lsl #2]
   1295c:	b	13a04 <__assert_fail@plt+0x12c0>
   12960:	andeq	r2, r1, ip, ror #23
   12964:	strdeq	r2, [r1], -r4
   12968:	strdeq	r2, [r1], -r4
   1296c:	strdeq	r2, [r1], -r4
   12970:	andeq	r3, r1, r8, lsr r1
   12974:	andeq	r2, r1, r0, asr #30
   12978:	strdeq	r2, [r1], -ip
   1297c:	andeq	r2, r1, r0, lsl #28
   12980:	andeq	r2, r1, r4, lsl sp
   12984:	andeq	r3, r1, ip, lsl #3
   12988:	andeq	r3, r1, ip, lsl #3
   1298c:	andeq	r2, r1, r0, lsr ip
   12990:	strdeq	r2, [r1], -ip
   12994:	andeq	r2, r1, r0, lsr #30
   12998:	andeq	r3, r1, r4, lsl #2
   1299c:	ldr	r0, [sp, #108]	; 0x6c
   129a0:	bl	2050c <__assert_fail@plt+0xddc8>
   129a4:	b	127d8 <__assert_fail@plt+0x94>
   129a8:	ldr	r3, [sp, #108]	; 0x6c
   129ac:	str	r3, [r8, #20]
   129b0:	b	127d8 <__assert_fail@plt+0x94>
   129b4:	ldr	r3, [r8]
   129b8:	add	r3, r3, #1
   129bc:	str	r3, [r8]
   129c0:	b	127d8 <__assert_fail@plt+0x94>
   129c4:	mov	r1, #1
   129c8:	ldr	r0, [sp, #108]	; 0x6c
   129cc:	bl	1f334 <__assert_fail@plt+0xcbf0>
   129d0:	cmn	r0, #1
   129d4:	mov	sl, r0
   129d8:	beq	12a98 <__assert_fail@plt+0x354>
   129dc:	ldr	r3, [r9]
   129e0:	cmp	r0, r3
   129e4:	beq	127d8 <__assert_fail@plt+0x94>
   129e8:	ldr	fp, [pc, #3448]	; 13768 <__assert_fail@plt+0x1024>
   129ec:	ldr	r3, [fp]
   129f0:	cmp	r3, #0
   129f4:	beq	12a14 <__assert_fail@plt+0x2d0>
   129f8:	mov	r0, #1
   129fc:	bl	1239c <_gpgrt_get_std_stream@plt>
   12a00:	ldr	r3, [fp]
   12a04:	cmp	r3, r0
   12a08:	bne	13060 <__assert_fail@plt+0x91c>
   12a0c:	mov	r3, #0
   12a10:	str	r3, [fp]
   12a14:	cmp	sl, #1
   12a18:	beq	12ae4 <__assert_fail@plt+0x3a0>
   12a1c:	cmp	sl, #2
   12a20:	beq	12ae4 <__assert_fail@plt+0x3a0>
   12a24:	ldr	r1, [pc, #3392]	; 1376c <__assert_fail@plt+0x1028>
   12a28:	mov	r0, sl
   12a2c:	bl	12300 <gpgrt_fdopen@plt>
   12a30:	str	r0, [fp]
   12a34:	ldr	r3, [fp]
   12a38:	cmp	r3, #0
   12a3c:	beq	13984 <__assert_fail@plt+0x1240>
   12a40:	str	sl, [r9]
   12a44:	b	127d8 <__assert_fail@plt+0x94>
   12a48:	sub	r6, r6, #504	; 0x1f8
   12a4c:	sub	r6, r6, #1
   12a50:	cmp	r6, #14
   12a54:	ldrls	pc, [pc, r6, lsl #2]
   12a58:	b	13a04 <__assert_fail@plt+0x12c0>
   12a5c:	andeq	r2, r1, ip, ror #23
   12a60:	andeq	r3, r1, r0, lsl #1
   12a64:	andeq	r3, r1, r0, lsl #1
   12a68:	andeq	r3, r1, r0, lsl #1
   12a6c:	andeq	r2, r1, r8, ror #22
   12a70:	andeq	r2, r1, ip, lsr pc
   12a74:	strdeq	r2, [r1], -r8
   12a78:	strdeq	r2, [r1], -ip
   12a7c:	andeq	r2, r1, r4, lsl sp
   12a80:	andeq	r3, r1, r0, lsl #1
   12a84:	andeq	r3, r1, r0, lsl #1
   12a88:	andeq	r2, r1, r0, lsr ip
   12a8c:	strdeq	r2, [r1], -ip
   12a90:	andeq	r2, r1, ip, lsl pc
   12a94:	strdeq	r2, [r1], -r0
   12a98:	ldr	fp, [pc, #3272]	; 13768 <__assert_fail@plt+0x1024>
   12a9c:	ldr	r3, [fp]
   12aa0:	cmp	r3, #0
   12aa4:	beq	127d8 <__assert_fail@plt+0x94>
   12aa8:	mov	r0, #1
   12aac:	bl	1239c <_gpgrt_get_std_stream@plt>
   12ab0:	ldr	r3, [fp]
   12ab4:	cmp	r3, r0
   12ab8:	beq	12ad8 <__assert_fail@plt+0x394>
   12abc:	mov	r0, #2
   12ac0:	bl	1239c <_gpgrt_get_std_stream@plt>
   12ac4:	ldr	r3, [fp]
   12ac8:	cmp	r3, r0
   12acc:	beq	12ad8 <__assert_fail@plt+0x394>
   12ad0:	mov	r0, r3
   12ad4:	bl	122b8 <gpgrt_fclose@plt>
   12ad8:	mov	r3, #0
   12adc:	str	r3, [fp]
   12ae0:	b	127d8 <__assert_fail@plt+0x94>
   12ae4:	mov	r0, sl
   12ae8:	bl	1239c <_gpgrt_get_std_stream@plt>
   12aec:	str	r0, [fp]
   12af0:	b	12a34 <__assert_fail@plt+0x2f0>
   12af4:	cmp	r5, #0
   12af8:	beq	13080 <__assert_fail@plt+0x93c>
   12afc:	mov	r0, r5
   12b00:	bl	15dd4 <__assert_fail@plt+0x3690>
   12b04:	subs	r4, r0, #0
   12b08:	blt	139c0 <__assert_fail@plt+0x127c>
   12b0c:	cmp	r6, #508	; 0x1fc
   12b10:	beq	13314 <__assert_fail@plt+0xbd0>
   12b14:	bl	15f94 <__assert_fail@plt+0x3850>
   12b18:	mov	r3, #0
   12b1c:	mov	r2, r3
   12b20:	mov	r0, r3
   12b24:	mov	r1, #1
   12b28:	bl	18068 <__assert_fail@plt+0x5924>
   12b2c:	subs	r5, r0, #0
   12b30:	bne	13358 <__assert_fail@plt+0xc14>
   12b34:	ldr	r2, [pc, #3124]	; 13770 <__assert_fail@plt+0x102c>
   12b38:	cmp	r6, r2
   12b3c:	beq	132fc <__assert_fail@plt+0xbb8>
   12b40:	bl	1239c <_gpgrt_get_std_stream@plt>
   12b44:	mov	r6, r0
   12b48:	add	r0, sp, #64	; 0x40
   12b4c:	bl	13b04 <__assert_fail@plt+0x13c0>
   12b50:	mov	r3, r5
   12b54:	mov	r1, r6
   12b58:	mov	r2, r0
   12b5c:	mov	r0, r4
   12b60:	bl	16a84 <__assert_fail@plt+0x4340>
   12b64:	b	12b8c <__assert_fail@plt+0x448>
   12b68:	mvn	r0, #0
   12b6c:	bl	15f94 <__assert_fail@plt+0x3850>
   12b70:	mov	r3, #0
   12b74:	mov	r2, #1
   12b78:	mov	r0, r3
   12b7c:	mov	r1, r2
   12b80:	bl	18068 <__assert_fail@plt+0x5924>
   12b84:	cmp	r0, #0
   12b88:	bne	13358 <__assert_fail@plt+0xc14>
   12b8c:	mov	r0, #1
   12b90:	bl	1239c <_gpgrt_get_std_stream@plt>
   12b94:	ldr	r3, [sp, #64]	; 0x40
   12b98:	cmp	r3, r0
   12b9c:	beq	12bb0 <__assert_fail@plt+0x46c>
   12ba0:	mov	r0, r3
   12ba4:	bl	122b8 <gpgrt_fclose@plt>
   12ba8:	cmp	r0, #0
   12bac:	bne	12f8c <__assert_fail@plt+0x848>
   12bb0:	mov	r0, #0
   12bb4:	bl	1e648 <__assert_fail@plt+0xbf04>
   12bb8:	subs	r4, r0, #0
   12bbc:	bne	13358 <__assert_fail@plt+0xc14>
   12bc0:	mov	r0, #98	; 0x62
   12bc4:	mov	r1, r4
   12bc8:	bl	13c94 <__assert_fail@plt+0x1550>
   12bcc:	ldr	r3, [pc, #2928]	; 13744 <__assert_fail@plt+0x1000>
   12bd0:	ldr	r2, [sp, #196]	; 0xc4
   12bd4:	mov	r0, r4
   12bd8:	ldr	r3, [r3]
   12bdc:	cmp	r2, r3
   12be0:	bne	13a00 <__assert_fail@plt+0x12bc>
   12be4:	add	sp, sp, #204	; 0xcc
   12be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bec:	add	r0, sp, #64	; 0x40
   12bf0:	bl	13b04 <__assert_fail@plt+0x13c0>
   12bf4:	bl	15da8 <__assert_fail@plt+0x3664>
   12bf8:	b	12b8c <__assert_fail@plt+0x448>
   12bfc:	add	r1, sp, #80	; 0x50
   12c00:	mov	r0, #1
   12c04:	bl	2004c <__assert_fail@plt+0xd908>
   12c08:	ldr	r3, [sp, #80]	; 0x50
   12c0c:	tst	r3, #128	; 0x80
   12c10:	mov	r4, r0
   12c14:	bne	13360 <__assert_fail@plt+0xc1c>
   12c18:	ldr	r5, [fp, #8]
   12c1c:	cmp	r5, #0
   12c20:	beq	13258 <__assert_fail@plt+0xb14>
   12c24:	mov	r0, r4
   12c28:	bl	12150 <gcry_free@plt>
   12c2c:	b	12b8c <__assert_fail@plt+0x448>
   12c30:	bl	203f0 <__assert_fail@plt+0xdcac>
   12c34:	add	r1, sp, #80	; 0x50
   12c38:	mov	r0, #1
   12c3c:	bl	2004c <__assert_fail@plt+0xd908>
   12c40:	ldr	r3, [sp, #80]	; 0x50
   12c44:	tst	r3, #64	; 0x40
   12c48:	mov	r4, r0
   12c4c:	beq	12c88 <__assert_fail@plt+0x544>
   12c50:	ldr	r2, [fp, #8]
   12c54:	cmp	r2, #0
   12c58:	bne	12c88 <__assert_fail@plt+0x544>
   12c5c:	ldr	r1, [pc, #2832]	; 13774 <__assert_fail@plt+0x1030>
   12c60:	bl	1f720 <__assert_fail@plt+0xcfdc>
   12c64:	cmp	r0, #0
   12c68:	bne	13700 <__assert_fail@plt+0xfbc>
   12c6c:	mov	r0, r4
   12c70:	bl	12150 <gcry_free@plt>
   12c74:	add	r1, sp, #80	; 0x50
   12c78:	mov	r0, #1
   12c7c:	bl	2004c <__assert_fail@plt+0xd908>
   12c80:	ldr	r3, [sp, #80]	; 0x50
   12c84:	mov	r4, r0
   12c88:	ldr	r2, [fp]
   12c8c:	ldr	r1, [fp, #8]
   12c90:	bic	r3, r3, #32
   12c94:	orr	r2, r2, r1
   12c98:	orrs	r3, r2, r3
   12c9c:	beq	12c24 <__assert_fail@plt+0x4e0>
   12ca0:	mov	r1, r4
   12ca4:	ldr	r0, [pc, #2764]	; 13778 <__assert_fail@plt+0x1034>
   12ca8:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   12cac:	ldr	r3, [sp, #80]	; 0x50
   12cb0:	tst	r3, #1
   12cb4:	bne	13248 <__assert_fail@plt+0xb04>
   12cb8:	tst	r3, #2
   12cbc:	bne	13238 <__assert_fail@plt+0xaf4>
   12cc0:	tst	r3, #4
   12cc4:	bne	13218 <__assert_fail@plt+0xad4>
   12cc8:	tst	r3, #8
   12ccc:	bne	13208 <__assert_fail@plt+0xac4>
   12cd0:	tst	r3, #16
   12cd4:	bne	13228 <__assert_fail@plt+0xae4>
   12cd8:	tst	r3, #32
   12cdc:	bne	131d8 <__assert_fail@plt+0xa94>
   12ce0:	tst	r3, #64	; 0x40
   12ce4:	bne	131f8 <__assert_fail@plt+0xab4>
   12ce8:	tst	r3, #128	; 0x80
   12cec:	bne	131e8 <__assert_fail@plt+0xaa4>
   12cf0:	bics	r3, r3, #32
   12cf4:	beq	12c24 <__assert_fail@plt+0x4e0>
   12cf8:	ldr	r1, [fp, #8]
   12cfc:	cmp	r1, #0
   12d00:	bne	12c24 <__assert_fail@plt+0x4e0>
   12d04:	ldr	r2, [pc, #2672]	; 1377c <__assert_fail@plt+0x1038>
   12d08:	mov	r0, #1
   12d0c:	bl	14234 <__assert_fail@plt+0x1af0>
   12d10:	b	12c24 <__assert_fail@plt+0x4e0>
   12d14:	add	r0, sp, #64	; 0x40
   12d18:	bl	13b04 <__assert_fail@plt+0x13c0>
   12d1c:	ldr	sl, [sp, #60]	; 0x3c
   12d20:	ldr	r8, [sp, #64]	; 0x40
   12d24:	cmp	sl, #0
   12d28:	ldr	r5, [pc, #2640]	; 13780 <__assert_fail@plt+0x103c>
   12d2c:	ldrne	r3, [sp, #56]	; 0x38
   12d30:	streq	sl, [sp, #36]	; 0x24
   12d34:	strne	r3, [sp, #36]	; 0x24
   12d38:	ldr	r3, [r5, #4]
   12d3c:	blx	r3
   12d40:	ldr	r7, [r5, #8]
   12d44:	cmp	r7, #0
   12d48:	mov	r9, r0
   12d4c:	beq	12d64 <__assert_fail@plt+0x620>
   12d50:	mov	r1, r7
   12d54:	mov	r2, #0
   12d58:	bl	1a578 <__assert_fail@plt+0x7e34>
   12d5c:	mov	r7, r0
   12d60:	mov	r9, r0
   12d64:	ldr	r3, [sp, #36]	; 0x24
   12d68:	cmp	r3, #0
   12d6c:	beq	12f68 <__assert_fail@plt+0x824>
   12d70:	ldr	r0, [r3]
   12d74:	cmp	r0, #0
   12d78:	ldrne	r6, [r5]
   12d7c:	ldrne	r4, [sp, #36]	; 0x24
   12d80:	bne	12d94 <__assert_fail@plt+0x650>
   12d84:	b	12dd4 <__assert_fail@plt+0x690>
   12d88:	ldr	r0, [r4, #4]!
   12d8c:	cmp	r0, #0
   12d90:	beq	12dd4 <__assert_fail@plt+0x690>
   12d94:	mov	r1, r6
   12d98:	bl	12054 <strcmp@plt>
   12d9c:	subs	sl, r0, #0
   12da0:	bne	12d88 <__assert_fail@plt+0x644>
   12da4:	mov	r1, r8
   12da8:	mov	r0, r9
   12dac:	bl	1254c <gpgrt_fputs@plt>
   12db0:	ldr	r3, [fp, #16]
   12db4:	mov	r1, r8
   12db8:	cmp	r3, #0
   12dbc:	movne	r0, sl
   12dc0:	moveq	r0, #10
   12dc4:	bl	122a0 <gpgrt_fputc@plt>
   12dc8:	ldr	r0, [r4, #4]!
   12dcc:	cmp	r0, #0
   12dd0:	bne	12d94 <__assert_fail@plt+0x650>
   12dd4:	mov	r0, r7
   12dd8:	bl	12150 <gcry_free@plt>
   12ddc:	ldr	r3, [pc, #2464]	; 13784 <__assert_fail@plt+0x1040>
   12de0:	add	r5, r5, #12
   12de4:	cmp	r3, r5
   12de8:	bne	12d38 <__assert_fail@plt+0x5f4>
   12dec:	b	12b8c <__assert_fail@plt+0x448>
   12df0:	mvn	r0, #0
   12df4:	bl	15024 <__assert_fail@plt+0x28e0>
   12df8:	b	12b8c <__assert_fail@plt+0x448>
   12dfc:	mov	r5, #0
   12e00:	clz	r3, r5
   12e04:	lsr	r3, r3, #5
   12e08:	cmp	r2, #2
   12e0c:	movle	r6, r3
   12e10:	orrgt	r6, r3, #1
   12e14:	cmp	r6, #0
   12e18:	bne	139a4 <__assert_fail@plt+0x1260>
   12e1c:	add	r0, sp, #64	; 0x40
   12e20:	bl	13b04 <__assert_fail@plt+0x13c0>
   12e24:	ldr	r3, [sp, #60]	; 0x3c
   12e28:	ldr	r2, [sp, #64]	; 0x40
   12e2c:	cmp	r3, #1
   12e30:	str	r2, [sp, #52]	; 0x34
   12e34:	ldrgt	r3, [sp, #56]	; 0x38
   12e38:	ldrgt	r6, [r3, #4]
   12e3c:	mov	r3, #0
   12e40:	str	r3, [sp, #152]	; 0x98
   12e44:	str	r3, [sp, #68]	; 0x44
   12e48:	str	r3, [sp, #72]	; 0x48
   12e4c:	str	r3, [sp, #148]	; 0x94
   12e50:	str	r3, [sp, #156]	; 0x9c
   12e54:	str	r3, [sp, #160]	; 0xa0
   12e58:	str	r3, [sp, #164]	; 0xa4
   12e5c:	str	r3, [sp, #180]	; 0xb4
   12e60:	str	r3, [sp, #168]	; 0xa8
   12e64:	str	r3, [sp, #172]	; 0xac
   12e68:	str	r3, [sp, #176]	; 0xb0
   12e6c:	str	r3, [sp, #184]	; 0xb8
   12e70:	str	r3, [sp, #188]	; 0xbc
   12e74:	str	r3, [sp, #192]	; 0xc0
   12e78:	ldrb	r3, [r5]
   12e7c:	cmp	r3, #0
   12e80:	beq	12ec4 <__assert_fail@plt+0x780>
   12e84:	bic	r3, r3, #32
   12e88:	sub	r3, r3, #65	; 0x41
   12e8c:	cmp	r3, #25
   12e90:	movls	r2, r5
   12e94:	bhi	12ec4 <__assert_fail@plt+0x780>
   12e98:	ldrb	r4, [r2, #1]!
   12e9c:	cmp	r4, #0
   12ea0:	beq	12fa8 <__assert_fail@plt+0x864>
   12ea4:	bic	r3, r4, #32
   12ea8:	sub	r3, r3, #65	; 0x41
   12eac:	cmp	r3, #25
   12eb0:	bls	12e98 <__assert_fail@plt+0x754>
   12eb4:	sub	r3, r4, #48	; 0x30
   12eb8:	cmp	r4, #95	; 0x5f
   12ebc:	cmpne	r3, #9
   12ec0:	bls	12e98 <__assert_fail@plt+0x754>
   12ec4:	mov	r0, #88	; 0x58
   12ec8:	bl	1260c <gpg_strerror@plt>
   12ecc:	mov	r7, #0
   12ed0:	mov	r1, r5
   12ed4:	mov	sl, r7
   12ed8:	mov	r8, r7
   12edc:	mov	r2, r0
   12ee0:	ldr	r0, [pc, #2208]	; 13788 <__assert_fail@plt+0x1044>
   12ee4:	bl	1e95c <__assert_fail@plt+0xc218>
   12ee8:	str	r7, [sp, #36]	; 0x24
   12eec:	str	r7, [sp, #44]	; 0x2c
   12ef0:	str	r7, [sp, #40]	; 0x28
   12ef4:	b	13024 <__assert_fail@plt+0x8e0>
   12ef8:	mov	r5, #0
   12efc:	mov	r3, #0
   12f00:	mov	r0, r5
   12f04:	mov	r2, r3
   12f08:	mov	r1, r3
   12f0c:	bl	18068 <__assert_fail@plt+0x5924>
   12f10:	cmp	r0, #0
   12f14:	beq	12b8c <__assert_fail@plt+0x448>
   12f18:	b	13358 <__assert_fail@plt+0xc14>
   12f1c:	mov	r5, #0
   12f20:	mvn	r0, #0
   12f24:	bl	15f94 <__assert_fail@plt+0x3850>
   12f28:	mov	r0, r5
   12f2c:	bl	18d60 <__assert_fail@plt+0x661c>
   12f30:	cmp	r0, #0
   12f34:	beq	12b8c <__assert_fail@plt+0x448>
   12f38:	b	13358 <__assert_fail@plt+0xc14>
   12f3c:	mov	r5, #0
   12f40:	add	r0, sp, #64	; 0x40
   12f44:	bl	13b04 <__assert_fail@plt+0x13c0>
   12f48:	mov	r2, #0
   12f4c:	mov	r1, r2
   12f50:	mov	r3, r0
   12f54:	mov	r0, r5
   12f58:	bl	18068 <__assert_fail@plt+0x5924>
   12f5c:	cmp	r0, #0
   12f60:	beq	12b8c <__assert_fail@plt+0x448>
   12f64:	b	13358 <__assert_fail@plt+0xc14>
   12f68:	mov	r0, r9
   12f6c:	ldr	r4, [r5]
   12f70:	bl	15198 <__assert_fail@plt+0x2a54>
   12f74:	mov	r2, r4
   12f78:	ldr	r1, [pc, #2060]	; 1378c <__assert_fail@plt+0x1048>
   12f7c:	mov	r3, r0
   12f80:	mov	r0, r8
   12f84:	bl	12678 <gpgrt_fprintf@plt>
   12f88:	b	12dd4 <__assert_fail@plt+0x690>
   12f8c:	bl	1245c <__errno_location@plt>
   12f90:	ldr	r3, [fp, #20]
   12f94:	ldr	r2, [pc, #2036]	; 13790 <__assert_fail@plt+0x104c>
   12f98:	ldr	r1, [r0]
   12f9c:	mov	r0, #1
   12fa0:	bl	14234 <__assert_fail@plt+0x1af0>
   12fa4:	b	12bb0 <__assert_fail@plt+0x46c>
   12fa8:	ldr	r1, [pc, #2020]	; 13794 <__assert_fail@plt+0x1050>
   12fac:	mov	r0, r5
   12fb0:	bl	12054 <strcmp@plt>
   12fb4:	subs	r7, r0, #0
   12fb8:	beq	131c0 <__assert_fail@plt+0xa7c>
   12fbc:	ldr	r1, [pc, #2004]	; 13798 <__assert_fail@plt+0x1054>
   12fc0:	mov	r0, r5
   12fc4:	bl	12054 <strcmp@plt>
   12fc8:	ldr	r3, [pc, #1992]	; 13798 <__assert_fail@plt+0x1054>
   12fcc:	cmp	r0, #0
   12fd0:	movne	r3, r5
   12fd4:	cmp	r6, #0
   12fd8:	str	r3, [sp, #48]	; 0x30
   12fdc:	strne	r4, [sp, #44]	; 0x2c
   12fe0:	beq	1361c <__assert_fail@plt+0xed8>
   12fe4:	mov	r1, #58	; 0x3a
   12fe8:	mov	r0, r6
   12fec:	bl	12408 <strchr@plt>
   12ff0:	subs	r1, r0, #0
   12ff4:	beq	1336c <__assert_fail@plt+0xc28>
   12ff8:	mov	r0, #45	; 0x2d
   12ffc:	bl	1260c <gpg_strerror@plt>
   13000:	mov	r7, #0
   13004:	mov	sl, r7
   13008:	mov	r8, r7
   1300c:	mov	r1, r6
   13010:	mov	r2, r0
   13014:	ldr	r0, [pc, #1920]	; 1379c <__assert_fail@plt+0x1058>
   13018:	bl	1e95c <__assert_fail@plt+0xc218>
   1301c:	str	r7, [sp, #36]	; 0x24
   13020:	str	r7, [sp, #40]	; 0x28
   13024:	mov	r0, sl
   13028:	bl	12150 <gcry_free@plt>
   1302c:	ldr	r0, [sp, #36]	; 0x24
   13030:	bl	12150 <gcry_free@plt>
   13034:	mov	r0, r7
   13038:	bl	12150 <gcry_free@plt>
   1303c:	ldr	r0, [sp, #68]	; 0x44
   13040:	bl	12150 <gcry_free@plt>
   13044:	mov	r0, r8
   13048:	bl	122b8 <gpgrt_fclose@plt>
   1304c:	ldr	r0, [sp, #40]	; 0x28
   13050:	bl	12150 <gcry_free@plt>
   13054:	ldr	r0, [sp, #44]	; 0x2c
   13058:	bl	12150 <gcry_free@plt>
   1305c:	b	12b8c <__assert_fail@plt+0x448>
   13060:	mov	r0, #2
   13064:	bl	1239c <_gpgrt_get_std_stream@plt>
   13068:	ldr	r3, [fp]
   1306c:	cmp	r3, r0
   13070:	beq	12a0c <__assert_fail@plt+0x2c8>
   13074:	mov	r0, r3
   13078:	bl	122b8 <gpgrt_fclose@plt>
   1307c:	b	12a0c <__assert_fail@plt+0x2c8>
   13080:	mov	r0, #2
   13084:	bl	1239c <_gpgrt_get_std_stream@plt>
   13088:	mov	r2, #5
   1308c:	ldr	r1, [pc, #1804]	; 137a0 <__assert_fail@plt+0x105c>
   13090:	mov	r4, r0
   13094:	mov	r0, #0
   13098:	bl	12180 <dcgettext@plt>
   1309c:	ldr	r2, [pc, #1700]	; 13748 <__assert_fail@plt+0x1004>
   130a0:	mov	r1, r0
   130a4:	mov	r0, r4
   130a8:	bl	12678 <gpgrt_fprintf@plt>
   130ac:	mov	r0, #2
   130b0:	bl	1239c <_gpgrt_get_std_stream@plt>
   130b4:	mov	r1, r0
   130b8:	mov	r0, #10
   130bc:	bl	122a0 <gpgrt_fputc@plt>
   130c0:	ldr	r1, [pc, #1756]	; 137a4 <__assert_fail@plt+0x1060>
   130c4:	mov	r2, #5
   130c8:	mov	r0, #0
   130cc:	bl	12180 <dcgettext@plt>
   130d0:	mov	r4, r0
   130d4:	mov	r0, #2
   130d8:	bl	1239c <_gpgrt_get_std_stream@plt>
   130dc:	mov	r1, r0
   130e0:	mov	r0, r4
   130e4:	bl	1254c <gpgrt_fputs@plt>
   130e8:	mov	r0, #2
   130ec:	bl	1239c <_gpgrt_get_std_stream@plt>
   130f0:	mov	r1, r0
   130f4:	mov	r0, #10
   130f8:	bl	122a0 <gpgrt_fputc@plt>
   130fc:	ldr	r0, [pc, #1848]	; 1383c <__assert_fail@plt+0x10f8>
   13100:	bl	13d44 <__assert_fail@plt+0x1600>
   13104:	cmp	r5, #0
   13108:	beq	12df0 <__assert_fail@plt+0x6ac>
   1310c:	ldr	r1, [pc, #1684]	; 137a8 <__assert_fail@plt+0x1064>
   13110:	mov	r0, r5
   13114:	bl	12054 <strcmp@plt>
   13118:	cmp	r0, #0
   1311c:	beq	12df0 <__assert_fail@plt+0x6ac>
   13120:	mov	r0, r5
   13124:	bl	15dd4 <__assert_fail@plt+0x3690>
   13128:	cmp	r0, #0
   1312c:	blt	139c0 <__assert_fail@plt+0x127c>
   13130:	bl	15024 <__assert_fail@plt+0x28e0>
   13134:	b	12b8c <__assert_fail@plt+0x448>
   13138:	cmp	r5, #0
   1313c:	beq	12b68 <__assert_fail@plt+0x424>
   13140:	mov	r0, #2
   13144:	bl	1239c <_gpgrt_get_std_stream@plt>
   13148:	mov	r2, #5
   1314c:	ldr	r1, [pc, #1612]	; 137a0 <__assert_fail@plt+0x105c>
   13150:	mov	r4, r0
   13154:	mov	r0, #0
   13158:	bl	12180 <dcgettext@plt>
   1315c:	ldr	r2, [pc, #1508]	; 13748 <__assert_fail@plt+0x1004>
   13160:	mov	r1, r0
   13164:	mov	r0, r4
   13168:	bl	12678 <gpgrt_fprintf@plt>
   1316c:	mov	r0, #2
   13170:	bl	1239c <_gpgrt_get_std_stream@plt>
   13174:	mov	r1, r0
   13178:	mov	r0, #10
   1317c:	bl	122a0 <gpgrt_fputc@plt>
   13180:	mov	r2, #5
   13184:	ldr	r1, [pc, #1568]	; 137ac <__assert_fail@plt+0x1068>
   13188:	b	130c8 <__assert_fail@plt+0x984>
   1318c:	cmp	r5, #0
   13190:	beq	13080 <__assert_fail@plt+0x93c>
   13194:	ldr	r1, [pc, #1548]	; 137a8 <__assert_fail@plt+0x1064>
   13198:	mov	r0, r5
   1319c:	bl	12054 <strcmp@plt>
   131a0:	cmp	r0, #0
   131a4:	bne	13330 <__assert_fail@plt+0xbec>
   131a8:	ldr	r3, [pc, #1536]	; 137b0 <__assert_fail@plt+0x106c>
   131ac:	mvn	r0, #0
   131b0:	cmp	r6, r3
   131b4:	beq	1334c <__assert_fail@plt+0xc08>
   131b8:	bl	14eb0 <__assert_fail@plt+0x276c>
   131bc:	b	12b8c <__assert_fail@plt+0x448>
   131c0:	cmp	r6, #0
   131c4:	beq	136bc <__assert_fail@plt+0xf78>
   131c8:	ldr	r3, [pc, #1612]	; 1381c <__assert_fail@plt+0x10d8>
   131cc:	str	r7, [sp, #44]	; 0x2c
   131d0:	str	r3, [sp, #48]	; 0x30
   131d4:	b	12fe4 <__assert_fail@plt+0x8a0>
   131d8:	ldr	r0, [pc, #1492]	; 137b4 <__assert_fail@plt+0x1070>
   131dc:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   131e0:	ldr	r3, [sp, #80]	; 0x50
   131e4:	b	12ce0 <__assert_fail@plt+0x59c>
   131e8:	ldr	r0, [pc, #1480]	; 137b8 <__assert_fail@plt+0x1074>
   131ec:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   131f0:	ldr	r3, [sp, #80]	; 0x50
   131f4:	b	12cf0 <__assert_fail@plt+0x5ac>
   131f8:	ldr	r0, [pc, #1468]	; 137bc <__assert_fail@plt+0x1078>
   131fc:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13200:	ldr	r3, [sp, #80]	; 0x50
   13204:	b	12ce8 <__assert_fail@plt+0x5a4>
   13208:	ldr	r0, [pc, #1456]	; 137c0 <__assert_fail@plt+0x107c>
   1320c:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13210:	ldr	r3, [sp, #80]	; 0x50
   13214:	b	12cd0 <__assert_fail@plt+0x58c>
   13218:	ldr	r0, [pc, #1444]	; 137c4 <__assert_fail@plt+0x1080>
   1321c:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13220:	ldr	r3, [sp, #80]	; 0x50
   13224:	b	12cc8 <__assert_fail@plt+0x584>
   13228:	ldr	r0, [pc, #1432]	; 137c8 <__assert_fail@plt+0x1084>
   1322c:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13230:	ldr	r3, [sp, #80]	; 0x50
   13234:	b	12cd8 <__assert_fail@plt+0x594>
   13238:	ldr	r0, [pc, #1420]	; 137cc <__assert_fail@plt+0x1088>
   1323c:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13240:	ldr	r3, [sp, #80]	; 0x50
   13244:	b	12cc0 <__assert_fail@plt+0x57c>
   13248:	ldr	r0, [pc, #1408]	; 137d0 <__assert_fail@plt+0x108c>
   1324c:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13250:	ldr	r3, [sp, #80]	; 0x50
   13254:	b	12cb8 <__assert_fail@plt+0x574>
   13258:	bl	12144 <rmdir@plt>
   1325c:	cmp	r0, #0
   13260:	beq	12c24 <__assert_fail@plt+0x4e0>
   13264:	bl	12420 <gpg_err_code_from_syserror@plt>
   13268:	subs	r6, r0, #0
   1326c:	beq	132d8 <__assert_fail@plt+0xb94>
   13270:	ldr	r3, [pc, #1372]	; 137d4 <__assert_fail@plt+0x1090>
   13274:	uxth	r6, r6
   13278:	cmp	r6, r3
   1327c:	beq	1328c <__assert_fail@plt+0xb48>
   13280:	sub	r3, r3, #63	; 0x3f
   13284:	cmp	r6, r3
   13288:	bne	13954 <__assert_fail@plt+0x1210>
   1328c:	ldr	r7, [pc, #1264]	; 13784 <__assert_fail@plt+0x1040>
   13290:	ldr	r8, [pc, #1344]	; 137d8 <__assert_fail@plt+0x1094>
   13294:	mov	r3, #0
   13298:	ldr	r2, [r7], #4
   1329c:	mov	r1, r8
   132a0:	mov	r0, r4
   132a4:	bl	1ab74 <__assert_fail@plt+0x8430>
   132a8:	subs	r9, r0, #0
   132ac:	beq	132b4 <__assert_fail@plt+0xb70>
   132b0:	bl	1f614 <__assert_fail@plt+0xced0>
   132b4:	mov	r0, r9
   132b8:	add	r5, r5, #1
   132bc:	bl	12150 <gcry_free@plt>
   132c0:	cmp	r5, #6
   132c4:	bne	13294 <__assert_fail@plt+0xb50>
   132c8:	mov	r0, r4
   132cc:	bl	12144 <rmdir@plt>
   132d0:	cmp	r0, #0
   132d4:	beq	12c24 <__assert_fail@plt+0x4e0>
   132d8:	mov	r0, r6
   132dc:	bl	1260c <gpg_strerror@plt>
   132e0:	mov	r3, r4
   132e4:	ldr	r2, [pc, #1264]	; 137dc <__assert_fail@plt+0x1098>
   132e8:	mov	r1, #0
   132ec:	str	r0, [sp]
   132f0:	mov	r0, #1
   132f4:	bl	14234 <__assert_fail@plt+0x1af0>
   132f8:	b	12c24 <__assert_fail@plt+0x4e0>
   132fc:	add	r0, sp, #64	; 0x40
   13300:	bl	13b04 <__assert_fail@plt+0x13c0>
   13304:	mov	r1, r0
   13308:	mov	r0, r4
   1330c:	bl	15e4c <__assert_fail@plt+0x3708>
   13310:	b	12b8c <__assert_fail@plt+0x448>
   13314:	add	r0, sp, #64	; 0x40
   13318:	bl	13b04 <__assert_fail@plt+0x13c0>
   1331c:	mov	r2, #0
   13320:	mov	r1, r0
   13324:	mov	r0, r4
   13328:	bl	15788 <__assert_fail@plt+0x3044>
   1332c:	b	12b8c <__assert_fail@plt+0x448>
   13330:	mov	r0, r5
   13334:	bl	15dd4 <__assert_fail@plt+0x3690>
   13338:	cmp	r0, #0
   1333c:	blt	139c0 <__assert_fail@plt+0x127c>
   13340:	ldr	r3, [pc, #1128]	; 137b0 <__assert_fail@plt+0x106c>
   13344:	cmp	r6, r3
   13348:	bne	131b8 <__assert_fail@plt+0xa74>
   1334c:	bl	15b18 <__assert_fail@plt+0x33d4>
   13350:	cmp	r0, #0
   13354:	beq	12b8c <__assert_fail@plt+0x448>
   13358:	mov	r0, #0
   1335c:	bl	13d44 <__assert_fail@plt+0x1600>
   13360:	ldr	r0, [pc, #1144]	; 137e0 <__assert_fail@plt+0x109c>
   13364:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   13368:	b	12c24 <__assert_fail@plt+0x4e0>
   1336c:	mov	r0, r6
   13370:	bl	1b020 <__assert_fail@plt+0x88dc>
   13374:	subs	r4, r0, #0
   13378:	bne	12ff8 <__assert_fail@plt+0x8b4>
   1337c:	bl	1ffec <__assert_fail@plt+0xd8a8>
   13380:	mov	r2, r4
   13384:	ldr	r1, [pc, #1112]	; 137e4 <__assert_fail@plt+0x10a0>
   13388:	bl	1a578 <__assert_fail@plt+0x7e34>
   1338c:	ldr	r1, [pc, #1108]	; 137e8 <__assert_fail@plt+0x10a4>
   13390:	str	r0, [sp, #40]	; 0x28
   13394:	bl	124e0 <gpgrt_fopen@plt>
   13398:	subs	r8, r0, #0
   1339c:	beq	13864 <__assert_fail@plt+0x1120>
   133a0:	mov	r7, #0
   133a4:	mov	sl, r7
   133a8:	mov	r4, r7
   133ac:	mov	r3, #2048	; 0x800
   133b0:	str	r3, [sp, #76]	; 0x4c
   133b4:	str	r7, [sp, #36]	; 0x24
   133b8:	add	r3, sp, #76	; 0x4c
   133bc:	add	r2, sp, #72	; 0x48
   133c0:	add	r1, sp, #68	; 0x44
   133c4:	mov	r0, r8
   133c8:	bl	12024 <gpgrt_read_line@plt>
   133cc:	cmp	r0, #0
   133d0:	ble	13518 <__assert_fail@plt+0xdd4>
   133d4:	ldr	r3, [sp, #76]	; 0x4c
   133d8:	cmp	r3, #0
   133dc:	beq	13648 <__assert_fail@plt+0xf04>
   133e0:	sub	r0, r0, #1
   133e4:	ldr	r2, [sp, #68]	; 0x44
   133e8:	ldrb	r3, [r2, r0]
   133ec:	cmp	r3, #13
   133f0:	cmpne	r3, #10
   133f4:	bne	13404 <__assert_fail@plt+0xcc0>
   133f8:	strb	r4, [r2, r0]
   133fc:	subs	r0, r0, #1
   13400:	bcs	133e4 <__assert_fail@plt+0xca0>
   13404:	mov	r2, #2
   13408:	add	r1, sp, #140	; 0x8c
   1340c:	ldr	r0, [sp, #68]	; 0x44
   13410:	bl	1af34 <__assert_fail@plt+0x87f0>
   13414:	cmp	r0, #1
   13418:	bls	133b8 <__assert_fail@plt+0xc74>
   1341c:	ldr	r9, [sp, #140]	; 0x8c
   13420:	ldrb	r3, [r9]
   13424:	cmp	r3, #35	; 0x23
   13428:	beq	133b8 <__assert_fail@plt+0xc74>
   1342c:	ldrb	r3, [sp, #148]	; 0x94
   13430:	cmp	r3, #0
   13434:	bne	1344c <__assert_fail@plt+0xd08>
   13438:	ldr	r1, [pc, #940]	; 137ec <__assert_fail@plt+0x10a8>
   1343c:	mov	r0, r9
   13440:	bl	12054 <strcmp@plt>
   13444:	cmp	r0, #0
   13448:	beq	13678 <__assert_fail@plt+0xf34>
   1344c:	ldrb	r3, [sp, #164]	; 0xa4
   13450:	cmp	r3, #0
   13454:	bne	1346c <__assert_fail@plt+0xd28>
   13458:	ldr	r1, [pc, #912]	; 137f0 <__assert_fail@plt+0x10ac>
   1345c:	mov	r0, r9
   13460:	bl	12054 <strcmp@plt>
   13464:	cmp	r0, #0
   13468:	beq	13688 <__assert_fail@plt+0xf44>
   1346c:	mov	r0, r9
   13470:	mov	r1, #95	; 0x5f
   13474:	bl	125c4 <strrchr@plt>
   13478:	cmp	r0, #0
   1347c:	streq	r0, [sp, #80]	; 0x50
   13480:	beq	133b8 <__assert_fail@plt+0xc74>
   13484:	add	r3, r0, #1
   13488:	str	r3, [sp, #80]	; 0x50
   1348c:	strb	r4, [r0]
   13490:	ldr	r0, [sp, #140]	; 0x8c
   13494:	ldr	r1, [sp, #48]	; 0x30
   13498:	bl	12054 <strcmp@plt>
   1349c:	cmp	r0, #0
   134a0:	bne	133b8 <__assert_fail@plt+0xc74>
   134a4:	ldr	r9, [sp, #80]	; 0x50
   134a8:	ldr	r1, [pc, #836]	; 137f4 <__assert_fail@plt+0x10b0>
   134ac:	mov	r0, r9
   134b0:	bl	12054 <strcmp@plt>
   134b4:	orrs	r3, sl, r0
   134b8:	beq	13844 <__assert_fail@plt+0x1100>
   134bc:	ldr	r1, [pc, #820]	; 137f8 <__assert_fail@plt+0x10b4>
   134c0:	mov	r0, r9
   134c4:	bl	12054 <strcmp@plt>
   134c8:	cmp	r0, #0
   134cc:	bne	134dc <__assert_fail@plt+0xd98>
   134d0:	ldrb	r3, [sp, #180]	; 0xb4
   134d4:	cmp	r3, #0
   134d8:	beq	136f0 <__assert_fail@plt+0xfac>
   134dc:	ldr	r1, [pc, #792]	; 137fc <__assert_fail@plt+0x10b8>
   134e0:	mov	r0, r9
   134e4:	bl	12054 <strcmp@plt>
   134e8:	ldr	r3, [sp, #36]	; 0x24
   134ec:	orrs	r3, r3, r0
   134f0:	beq	13854 <__assert_fail@plt+0x1110>
   134f4:	mov	r0, r9
   134f8:	ldr	r1, [pc, #768]	; 13800 <__assert_fail@plt+0x10bc>
   134fc:	bl	12054 <strcmp@plt>
   13500:	orrs	r3, r7, r0
   13504:	bne	133b8 <__assert_fail@plt+0xc74>
   13508:	ldr	r0, [sp, #144]	; 0x90
   1350c:	bl	12528 <gcry_xstrdup@plt>
   13510:	mov	r7, r0
   13514:	b	133b8 <__assert_fail@plt+0xc74>
   13518:	bne	13698 <__assert_fail@plt+0xf54>
   1351c:	mov	r0, r8
   13520:	bl	121c8 <gpgrt_ferror@plt>
   13524:	cmp	r0, #0
   13528:	bne	13698 <__assert_fail@plt+0xf54>
   1352c:	ldrb	r3, [sp, #148]	; 0x94
   13530:	cmp	r3, #0
   13534:	beq	1371c <__assert_fail@plt+0xfd8>
   13538:	ldrb	r3, [sp, #164]	; 0xa4
   1353c:	cmp	r3, #0
   13540:	beq	1371c <__assert_fail@plt+0xfd8>
   13544:	cmp	sl, #0
   13548:	beq	138e8 <__assert_fail@plt+0x11a4>
   1354c:	ldr	r3, [sp, #36]	; 0x24
   13550:	cmp	r3, #0
   13554:	beq	138d0 <__assert_fail@plt+0x118c>
   13558:	bl	125dc <gpg_err_set_errno@plt>
   1355c:	mov	r2, #10
   13560:	add	r1, sp, #80	; 0x50
   13564:	ldr	r0, [sp, #36]	; 0x24
   13568:	bl	123d8 <strtoul@plt>
   1356c:	mov	r4, r0
   13570:	bl	1245c <__errno_location@plt>
   13574:	ldr	r3, [r0]
   13578:	cmp	r3, #0
   1357c:	bne	138d0 <__assert_fail@plt+0x118c>
   13580:	ldr	r3, [sp, #80]	; 0x50
   13584:	ldrb	r3, [r3]
   13588:	cmp	r3, #107	; 0x6b
   1358c:	lsleq	r4, r4, #10
   13590:	mov	r1, #0
   13594:	mov	r0, sl
   13598:	bl	1b020 <__assert_fail@plt+0x88dc>
   1359c:	subs	r9, r0, #0
   135a0:	bne	1391c <__assert_fail@plt+0x11d8>
   135a4:	cmp	r6, #0
   135a8:	beq	13948 <__assert_fail@plt+0x1204>
   135ac:	mov	r1, r6
   135b0:	mov	r0, sl
   135b4:	bl	1b020 <__assert_fail@plt+0x88dc>
   135b8:	subs	r3, r0, #0
   135bc:	moveq	r2, #99	; 0x63
   135c0:	beq	135d0 <__assert_fail@plt+0xe8c>
   135c4:	mov	r3, r9
   135c8:	movle	r2, #110	; 0x6e
   135cc:	movgt	r2, #117	; 0x75
   135d0:	add	r0, sp, #180	; 0xb4
   135d4:	ldr	r1, [pc, #584]	; 13824 <__assert_fail@plt+0x10e0>
   135d8:	cmp	r7, #0
   135dc:	str	r0, [sp, #20]
   135e0:	add	r0, sp, #164	; 0xa4
   135e4:	movne	r1, r7
   135e8:	str	r0, [sp, #12]
   135ec:	add	r0, sp, #148	; 0x94
   135f0:	strd	r2, [sp]
   135f4:	str	r0, [sp, #8]
   135f8:	str	r1, [sp, #28]
   135fc:	str	r4, [sp, #24]
   13600:	str	sl, [sp, #16]
   13604:	mov	r3, r6
   13608:	mov	r2, r5
   1360c:	ldr	r0, [sp, #52]	; 0x34
   13610:	ldr	r1, [pc, #492]	; 13804 <__assert_fail@plt+0x10c0>
   13614:	bl	12678 <gpgrt_fprintf@plt>
   13618:	b	13024 <__assert_fail@plt+0x8e0>
   1361c:	bl	1ffec <__assert_fail@plt+0xd8a8>
   13620:	mov	r2, r6
   13624:	ldr	r1, [pc, #440]	; 137e4 <__assert_fail@plt+0x10a0>
   13628:	bl	1a578 <__assert_fail@plt+0x7e34>
   1362c:	ldr	r1, [pc, #436]	; 137e8 <__assert_fail@plt+0x10a4>
   13630:	str	r0, [sp, #40]	; 0x28
   13634:	bl	124e0 <gpgrt_fopen@plt>
   13638:	subs	r8, r0, #0
   1363c:	beq	13908 <__assert_fail@plt+0x11c4>
   13640:	str	r6, [sp, #44]	; 0x2c
   13644:	b	133a0 <__assert_fail@plt+0xc5c>
   13648:	mov	r0, r3
   1364c:	mov	r2, #5
   13650:	ldr	r1, [pc, #432]	; 13808 <__assert_fail@plt+0x10c4>
   13654:	bl	12180 <dcgettext@plt>
   13658:	mov	r4, r0
   1365c:	mov	r0, #97	; 0x61
   13660:	bl	1260c <gpg_strerror@plt>
   13664:	ldr	r1, [sp, #40]	; 0x28
   13668:	mov	r2, r0
   1366c:	mov	r0, r4
   13670:	bl	1e95c <__assert_fail@plt+0xc218>
   13674:	b	13024 <__assert_fail@plt+0x8e0>
   13678:	ldr	r1, [sp, #144]	; 0x90
   1367c:	add	r0, sp, #148	; 0x94
   13680:	bl	211fc <__assert_fail@plt+0xeab8>
   13684:	b	133b8 <__assert_fail@plt+0xc74>
   13688:	ldr	r1, [sp, #144]	; 0x90
   1368c:	add	r0, sp, #164	; 0xa4
   13690:	bl	211fc <__assert_fail@plt+0xeab8>
   13694:	b	133b8 <__assert_fail@plt+0xc74>
   13698:	bl	12420 <gpg_err_code_from_syserror@plt>
   1369c:	mov	r2, #5
   136a0:	ldr	r1, [pc, #352]	; 13808 <__assert_fail@plt+0x10c4>
   136a4:	mov	r5, r0
   136a8:	mov	r0, #0
   136ac:	bl	12180 <dcgettext@plt>
   136b0:	mov	r4, r0
   136b4:	uxth	r0, r5
   136b8:	b	13660 <__assert_fail@plt+0xf1c>
   136bc:	ldr	r0, [pc, #328]	; 1380c <__assert_fail@plt+0x10c8>
   136c0:	bl	12528 <gcry_xstrdup@plt>
   136c4:	mov	r1, #45	; 0x2d
   136c8:	mov	r6, r0
   136cc:	bl	12408 <strchr@plt>
   136d0:	cmp	r0, #0
   136d4:	str	r0, [sp, #80]	; 0x50
   136d8:	beq	138d8 <__assert_fail@plt+0x1194>
   136dc:	ldr	r3, [pc, #312]	; 1381c <__assert_fail@plt+0x10d8>
   136e0:	strb	r7, [r0]
   136e4:	str	r6, [sp, #44]	; 0x2c
   136e8:	str	r3, [sp, #48]	; 0x30
   136ec:	b	12fe4 <__assert_fail@plt+0x8a0>
   136f0:	ldr	r1, [sp, #144]	; 0x90
   136f4:	add	r0, sp, #180	; 0xb4
   136f8:	bl	211fc <__assert_fail@plt+0xeab8>
   136fc:	b	133b8 <__assert_fail@plt+0xc74>
   13700:	bl	1245c <__errno_location@plt>
   13704:	mov	r3, r4
   13708:	ldr	r2, [pc, #256]	; 13810 <__assert_fail@plt+0x10cc>
   1370c:	ldr	r1, [r0]
   13710:	mov	r0, #1
   13714:	bl	14234 <__assert_fail@plt+0x1af0>
   13718:	b	12c6c <__assert_fail@plt+0x528>
   1371c:	mov	r1, #161	; 0xa1
   13720:	cmp	r6, #0
   13724:	ldr	r3, [pc, #248]	; 13824 <__assert_fail@plt+0x10e0>
   13728:	str	r1, [sp]
   1372c:	mov	r2, r5
   13730:	ldr	r0, [sp, #52]	; 0x34
   13734:	movne	r3, r6
   13738:	ldr	r1, [pc, #212]	; 13814 <__assert_fail@plt+0x10d0>
   1373c:	bl	12678 <gpgrt_fprintf@plt>
   13740:	b	13024 <__assert_fail@plt+0x8e0>
   13744:	andeq	sl, r3, r8, asr fp
   13748:	muleq	r2, r4, r8
   1374c:	andeq	r3, r1, r8, ror fp
   13750:	andeq	fp, r3, r8
   13754:	muleq	r3, r4, r5
   13758:	strdeq	r0, [r0], -r6
   1375c:	strdeq	r0, [r0], -r7
   13760:	strdeq	r0, [r0], -r5
   13764:	andeq	r5, r2, r4, asr #17
   13768:	andeq	sp, r3, ip, lsl r3
   1376c:	andeq	r5, r2, r4, lsl #15
   13770:	strdeq	r0, [r0], -sl
   13774:	andeq	r5, r2, ip, ror #20
   13778:	andeq	r5, r2, r8, lsl #21
   1377c:	andeq	r5, r2, r8, asr #22
   13780:	ldrdeq	r5, [r2], -r0
   13784:	andeq	r5, r2, ip, ror #14
   13788:	andeq	r5, r2, ip, ror r9
   1378c:	andeq	r5, r2, ip, asr #18
   13790:	ldrdeq	r5, [r2], -ip
   13794:	strdeq	r5, [r2], -r0
   13798:	andeq	r5, r2, ip, lsl #17
   1379c:	muleq	r2, ip, r9
   137a0:	andeq	r5, r2, ip, ror #17
   137a4:	andeq	r5, r2, r4, lsl #18
   137a8:	andeq	r5, r2, r4, lsr r9
   137ac:	andeq	r5, r2, r8, lsr r9
   137b0:	andeq	r0, r0, r2, lsl #4
   137b4:	andeq	r5, r2, r0, lsl #22
   137b8:	andeq	r5, r2, ip, lsr #22
   137bc:	andeq	r5, r2, r8, lsl fp
   137c0:	ldrdeq	r5, [r2], -r4
   137c4:	andeq	r5, r2, r0, asr #21
   137c8:	strdeq	r5, [r2], -r0
   137cc:	andeq	r5, r2, ip, lsr #21
   137d0:	muleq	r2, ip, sl
   137d4:	andeq	r8, r0, r2, rrx
   137d8:	andeq	r9, r2, r8, lsr #32
   137dc:	andeq	r5, r2, r0, lsr #23
   137e0:	andeq	r5, r2, r8, ror #22
   137e4:	strdeq	r5, [r2], -r8
   137e8:	andeq	r8, r2, ip, asr #19
   137ec:	andeq	r5, r2, r4, lsl #20
   137f0:	andeq	r5, r2, r0, lsl sl
   137f4:	andeq	r8, r2, ip, asr #2
   137f8:	andeq	r5, r2, ip, lsl sl
   137fc:	andeq	r5, r2, r4, lsr #20
   13800:	andeq	r5, r2, ip, lsr #20
   13804:	andeq	r5, r2, r8, asr #20
   13808:	andeq	r5, r2, ip, ror #19
   1380c:			; <UNDEFINED> instruction: 0x000257bc
   13810:	andeq	r5, r2, r4, ror sl
   13814:	andeq	r5, r2, r0, asr #19
   13818:	ldrdeq	r5, [r2], -r4
   1381c:	andeq	r5, r2, r4, lsl #17
   13820:	andeq	r5, r2, r4, lsr sl
   13824:	andeq	r6, r2, r4, ror #29
   13828:	andeq	r8, r0, r1, asr r0
   1382c:			; <UNDEFINED> instruction: 0x00025bb8
   13830:	muleq	r2, ip, r8
   13834:	muleq	r2, r4, r8
   13838:	andeq	r5, r2, r4, asr r9
   1383c:	andeq	r0, r0, r1, lsl #8
   13840:	andeq	r5, r2, r0, lsr #18
   13844:	ldr	r0, [sp, #144]	; 0x90
   13848:	bl	12528 <gcry_xstrdup@plt>
   1384c:	mov	sl, r0
   13850:	b	133b8 <__assert_fail@plt+0xc74>
   13854:	ldr	r0, [sp, #144]	; 0x90
   13858:	bl	12528 <gcry_xstrdup@plt>
   1385c:	str	r0, [sp, #36]	; 0x24
   13860:	b	133b8 <__assert_fail@plt+0xc74>
   13864:	bl	12420 <gpg_err_code_from_syserror@plt>
   13868:	uxth	r4, r0
   1386c:	mov	r3, r6
   13870:	str	r4, [sp]
   13874:	mov	r2, r5
   13878:	ldr	r0, [sp, #52]	; 0x34
   1387c:	ldr	r1, [pc, #-112]	; 13814 <__assert_fail@plt+0x10d0>
   13880:	bl	12678 <gpgrt_fprintf@plt>
   13884:	ldr	r3, [pc, #-100]	; 13828 <__assert_fail@plt+0x10e4>
   13888:	cmp	r4, r3
   1388c:	beq	13934 <__assert_fail@plt+0x11f0>
   13890:	mov	r2, #5
   13894:	ldr	r1, [pc, #-132]	; 13818 <__assert_fail@plt+0x10d4>
   13898:	mov	r0, #0
   1389c:	bl	12180 <dcgettext@plt>
   138a0:	mov	r7, #0
   138a4:	mov	sl, r7
   138a8:	mov	r8, r7
   138ac:	mov	r5, r0
   138b0:	mov	r0, r4
   138b4:	bl	1260c <gpg_strerror@plt>
   138b8:	ldr	r1, [sp, #40]	; 0x28
   138bc:	mov	r2, r0
   138c0:	mov	r0, r5
   138c4:	bl	1e95c <__assert_fail@plt+0xc218>
   138c8:	str	r7, [sp, #36]	; 0x24
   138cc:	b	13024 <__assert_fail@plt+0x8e0>
   138d0:	mov	r4, #0
   138d4:	b	13590 <__assert_fail@plt+0xe4c>
   138d8:	ldr	r3, [pc, #-196]	; 1381c <__assert_fail@plt+0x10d8>
   138dc:	str	r6, [sp, #44]	; 0x2c
   138e0:	str	r3, [sp, #48]	; 0x30
   138e4:	b	12fe4 <__assert_fail@plt+0x8a0>
   138e8:	cmp	r6, #0
   138ec:	ldr	r3, [pc, #-208]	; 13824 <__assert_fail@plt+0x10e0>
   138f0:	mov	r2, r5
   138f4:	ldr	r0, [sp, #52]	; 0x34
   138f8:	movne	r3, r6
   138fc:	ldr	r1, [pc, #-228]	; 13820 <__assert_fail@plt+0x10dc>
   13900:	bl	12678 <gpgrt_fprintf@plt>
   13904:	b	13024 <__assert_fail@plt+0x8e0>
   13908:	bl	12420 <gpg_err_code_from_syserror@plt>
   1390c:	str	r6, [sp, #44]	; 0x2c
   13910:	ldr	r6, [pc, #-244]	; 13824 <__assert_fail@plt+0x10e0>
   13914:	uxth	r4, r0
   13918:	b	1386c <__assert_fail@plt+0x1128>
   1391c:	cmp	r6, #0
   13920:	mov	r3, #55	; 0x37
   13924:	mov	r2, #45	; 0x2d
   13928:	bne	135d0 <__assert_fail@plt+0xe8c>
   1392c:	ldr	r6, [pc, #-272]	; 13824 <__assert_fail@plt+0x10e0>
   13930:	b	135d0 <__assert_fail@plt+0xe8c>
   13934:	mov	r7, #0
   13938:	str	r7, [sp, #36]	; 0x24
   1393c:	mov	sl, r7
   13940:	mov	r8, r7
   13944:	b	13024 <__assert_fail@plt+0x8e0>
   13948:	mov	r3, r6
   1394c:	mov	r2, #45	; 0x2d
   13950:	b	1392c <__assert_fail@plt+0x11e8>
   13954:	ldr	r3, [pc, #-308]	; 13828 <__assert_fail@plt+0x10e4>
   13958:	cmp	r6, r3
   1395c:	bne	132d8 <__assert_fail@plt+0xb94>
   13960:	mov	r0, r6
   13964:	bl	1260c <gpg_strerror@plt>
   13968:	mov	r3, r4
   1396c:	ldr	r2, [pc, #-328]	; 1382c <__assert_fail@plt+0x10e8>
   13970:	mov	r1, r5
   13974:	str	r0, [sp]
   13978:	mov	r0, r5
   1397c:	bl	14234 <__assert_fail@plt+0x1af0>
   13980:	b	12c24 <__assert_fail@plt+0x4e0>
   13984:	bl	12420 <gpg_err_code_from_syserror@plt>
   13988:	cmp	r0, #0
   1398c:	uxthne	r0, r0
   13990:	bl	1260c <gpg_strerror@plt>
   13994:	mov	r1, sl
   13998:	mov	r2, r0
   1399c:	ldr	r0, [pc, #-372]	; 13830 <__assert_fail@plt+0x10ec>
   139a0:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   139a4:	mov	r0, #2
   139a8:	bl	1239c <_gpgrt_get_std_stream@plt>
   139ac:	ldr	r2, [pc, #-384]	; 13834 <__assert_fail@plt+0x10f0>
   139b0:	ldr	r1, [pc, #-384]	; 13838 <__assert_fail@plt+0x10f4>
   139b4:	bl	12678 <gpgrt_fprintf@plt>
   139b8:	ldr	r0, [pc, #-388]	; 1383c <__assert_fail@plt+0x10f8>
   139bc:	bl	13d44 <__assert_fail@plt+0x1600>
   139c0:	mov	r2, #5
   139c4:	ldr	r1, [pc, #-396]	; 13840 <__assert_fail@plt+0x10fc>
   139c8:	mov	r0, #0
   139cc:	bl	12180 <dcgettext@plt>
   139d0:	mov	r4, r0
   139d4:	mov	r0, #2
   139d8:	bl	1239c <_gpgrt_get_std_stream@plt>
   139dc:	mov	r1, r0
   139e0:	mov	r0, r4
   139e4:	bl	1254c <gpgrt_fputs@plt>
   139e8:	mov	r0, #2
   139ec:	bl	1239c <_gpgrt_get_std_stream@plt>
   139f0:	mov	r1, r0
   139f4:	mov	r0, #10
   139f8:	bl	122a0 <gpgrt_fputc@plt>
   139fc:	b	13358 <__assert_fail@plt+0xc14>
   13a00:	bl	1218c <__stack_chk_fail@plt>
   13a04:	add	r0, sp, #64	; 0x40
   13a08:	bl	13b04 <__assert_fail@plt+0x13c0>
   13a0c:	bl	155f4 <__assert_fail@plt+0x2eb0>
   13a10:	b	12b8c <__assert_fail@plt+0x448>
   13a14:	mov	fp, #0
   13a18:	mov	lr, #0
   13a1c:	pop	{r1}		; (ldr r1, [sp], #4)
   13a20:	mov	r2, sp
   13a24:	push	{r2}		; (str r2, [sp, #-4]!)
   13a28:	push	{r0}		; (str r0, [sp, #-4]!)
   13a2c:	ldr	ip, [pc, #16]	; 13a44 <__assert_fail@plt+0x1300>
   13a30:	push	{ip}		; (str ip, [sp, #-4]!)
   13a34:	ldr	r0, [pc, #12]	; 13a48 <__assert_fail@plt+0x1304>
   13a38:	ldr	r3, [pc, #12]	; 13a4c <__assert_fail@plt+0x1308>
   13a3c:	bl	12324 <__libc_start_main@plt>
   13a40:	bl	126e4 <abort@plt>
   13a44:	andeq	r5, r2, r8, lsr #13
   13a48:	andeq	r2, r1, r0, asr r7
   13a4c:	andeq	r5, r2, r8, asr #12
   13a50:	ldr	r3, [pc, #20]	; 13a6c <__assert_fail@plt+0x1328>
   13a54:	ldr	r2, [pc, #20]	; 13a70 <__assert_fail@plt+0x132c>
   13a58:	add	r3, pc, r3
   13a5c:	ldr	r2, [r3, r2]
   13a60:	cmp	r2, #0
   13a64:	bxeq	lr
   13a68:	b	1236c <__gmon_start__@plt>
   13a6c:	andeq	r7, r2, r0, lsl r3
   13a70:	andeq	r0, r0, ip, lsl #5
   13a74:	ldr	r0, [pc, #24]	; 13a94 <__assert_fail@plt+0x1350>
   13a78:	ldr	r3, [pc, #24]	; 13a98 <__assert_fail@plt+0x1354>
   13a7c:	cmp	r3, r0
   13a80:	bxeq	lr
   13a84:	ldr	r3, [pc, #16]	; 13a9c <__assert_fail@plt+0x1358>
   13a88:	cmp	r3, #0
   13a8c:	bxeq	lr
   13a90:	bx	r3
   13a94:	andeq	sp, r3, ip, lsl #6
   13a98:	andeq	sp, r3, ip, lsl #6
   13a9c:	andeq	r0, r0, r0
   13aa0:	ldr	r0, [pc, #36]	; 13acc <__assert_fail@plt+0x1388>
   13aa4:	ldr	r1, [pc, #36]	; 13ad0 <__assert_fail@plt+0x138c>
   13aa8:	sub	r1, r1, r0
   13aac:	asr	r1, r1, #2
   13ab0:	add	r1, r1, r1, lsr #31
   13ab4:	asrs	r1, r1, #1
   13ab8:	bxeq	lr
   13abc:	ldr	r3, [pc, #16]	; 13ad4 <__assert_fail@plt+0x1390>
   13ac0:	cmp	r3, #0
   13ac4:	bxeq	lr
   13ac8:	bx	r3
   13acc:	andeq	sp, r3, ip, lsl #6
   13ad0:	andeq	sp, r3, ip, lsl #6
   13ad4:	andeq	r0, r0, r0
   13ad8:	push	{r4, lr}
   13adc:	ldr	r4, [pc, #24]	; 13afc <__assert_fail@plt+0x13b8>
   13ae0:	ldrb	r3, [r4]
   13ae4:	cmp	r3, #0
   13ae8:	popne	{r4, pc}
   13aec:	bl	13a74 <__assert_fail@plt+0x1330>
   13af0:	mov	r3, #1
   13af4:	strb	r3, [r4]
   13af8:	pop	{r4, pc}
   13afc:	andeq	sp, r3, r8, lsl r3
   13b00:	b	13aa0 <__assert_fail@plt+0x135c>
   13b04:	push	{r4, r5, r6, lr}
   13b08:	mov	r4, r0
   13b0c:	ldr	r0, [r0]
   13b10:	cmp	r0, #0
   13b14:	popne	{r4, r5, r6, pc}
   13b18:	ldr	r5, [pc, #76]	; 13b6c <__assert_fail@plt+0x1428>
   13b1c:	ldr	r0, [r5, #20]
   13b20:	cmp	r0, #0
   13b24:	beq	13b5c <__assert_fail@plt+0x1418>
   13b28:	ldr	r1, [pc, #64]	; 13b70 <__assert_fail@plt+0x142c>
   13b2c:	bl	124e0 <gpgrt_fopen@plt>
   13b30:	cmp	r0, #0
   13b34:	str	r0, [r4]
   13b38:	popne	{r4, r5, r6, pc}
   13b3c:	bl	1245c <__errno_location@plt>
   13b40:	ldr	r3, [r5, #20]
   13b44:	ldr	r2, [pc, #40]	; 13b74 <__assert_fail@plt+0x1430>
   13b48:	ldr	r1, [r0]
   13b4c:	mov	r0, #1
   13b50:	bl	14234 <__assert_fail@plt+0x1af0>
   13b54:	ldr	r0, [r4]
   13b58:	pop	{r4, r5, r6, pc}
   13b5c:	mov	r0, #1
   13b60:	bl	1239c <_gpgrt_get_std_stream@plt>
   13b64:	str	r0, [r4]
   13b68:	pop	{r4, r5, r6, pc}
   13b6c:	muleq	r3, r4, r5
   13b70:	andeq	r5, r2, r4, lsl #15
   13b74:	andeq	r5, r2, r8, lsl #15
   13b78:	sub	r0, r0, #1
   13b7c:	cmp	r0, #40	; 0x28
   13b80:	ldrls	pc, [pc, r0, lsl #2]
   13b84:	b	13c74 <__assert_fail@plt+0x1530>
   13b88:	andeq	r3, r1, ip, asr ip
   13b8c:	andeq	r3, r1, r4, ror ip
   13b90:	andeq	r3, r1, r4, ror ip
   13b94:	andeq	r3, r1, r4, ror ip
   13b98:	andeq	r3, r1, r4, ror ip
   13b9c:	andeq	r3, r1, r4, ror ip
   13ba0:	andeq	r3, r1, r4, ror ip
   13ba4:	andeq	r3, r1, r4, ror ip
   13ba8:	andeq	r3, r1, r4, ror ip
   13bac:	andeq	r3, r1, r4, ror ip
   13bb0:	andeq	r3, r1, ip, lsr #24
   13bb4:	andeq	r3, r1, r4, ror ip
   13bb8:	andeq	r3, r1, ip, ror #24
   13bbc:	andeq	r3, r1, r4, ror ip
   13bc0:	andeq	r3, r1, r4, ror ip
   13bc4:	andeq	r3, r1, r4, ror ip
   13bc8:	andeq	r3, r1, r4, lsr ip
   13bcc:	andeq	r3, r1, r4, ror ip
   13bd0:	andeq	r3, r1, ip, lsr ip
   13bd4:	andeq	r3, r1, r4, ror ip
   13bd8:	andeq	r3, r1, r4, ror ip
   13bdc:	andeq	r3, r1, r4, ror ip
   13be0:	andeq	r3, r1, r4, ror ip
   13be4:	andeq	r3, r1, r4, ror ip
   13be8:	andeq	r3, r1, r4, ror ip
   13bec:	andeq	r3, r1, r4, ror ip
   13bf0:	andeq	r3, r1, r4, ror ip
   13bf4:	andeq	r3, r1, r4, ror ip
   13bf8:	andeq	r3, r1, r4, ror ip
   13bfc:	andeq	r3, r1, r4, ror ip
   13c00:	andeq	r3, r1, r4, ror ip
   13c04:	andeq	r3, r1, r4, ror ip
   13c08:	andeq	r3, r1, r4, ror ip
   13c0c:	andeq	r3, r1, r4, ror ip
   13c10:	andeq	r3, r1, r4, ror ip
   13c14:	andeq	r3, r1, r4, ror ip
   13c18:	andeq	r3, r1, r4, ror ip
   13c1c:	andeq	r3, r1, r4, ror ip
   13c20:	andeq	r3, r1, r4, ror ip
   13c24:	andeq	r3, r1, ip, asr ip
   13c28:	andeq	r3, r1, ip, asr #24
   13c2c:	ldr	r0, [pc, #72]	; 13c7c <__assert_fail@plt+0x1538>
   13c30:	bx	lr
   13c34:	ldr	r0, [pc, #68]	; 13c80 <__assert_fail@plt+0x153c>
   13c38:	bx	lr
   13c3c:	mov	r2, #5
   13c40:	ldr	r1, [pc, #60]	; 13c84 <__assert_fail@plt+0x1540>
   13c44:	mov	r0, #0
   13c48:	b	12180 <dcgettext@plt>
   13c4c:	mov	r2, #5
   13c50:	ldr	r1, [pc, #48]	; 13c88 <__assert_fail@plt+0x1544>
   13c54:	mov	r0, #0
   13c58:	b	12180 <dcgettext@plt>
   13c5c:	mov	r2, #5
   13c60:	ldr	r1, [pc, #36]	; 13c8c <__assert_fail@plt+0x1548>
   13c64:	mov	r0, #0
   13c68:	b	12180 <dcgettext@plt>
   13c6c:	ldr	r0, [pc, #28]	; 13c90 <__assert_fail@plt+0x154c>
   13c70:	bx	lr
   13c74:	mov	r0, #0
   13c78:	bx	lr
   13c7c:	muleq	r2, ip, r7
   13c80:			; <UNDEFINED> instruction: 0x000257b0
   13c84:	andeq	r5, r2, r4, asr #15
   13c88:	andeq	r5, r2, r4, lsl r8
   13c8c:	andeq	r5, r2, r8, ror #15
   13c90:			; <UNDEFINED> instruction: 0x000257bc
   13c94:	push	{r1, r2, r3}
   13c98:	push	{r4, r5, r6, r7, lr}
   13c9c:	sub	sp, sp, #8
   13ca0:	ldr	r4, [pc, #144]	; 13d38 <__assert_fail@plt+0x15f4>
   13ca4:	ldr	r5, [pc, #144]	; 13d3c <__assert_fail@plt+0x15f8>
   13ca8:	ldr	r6, [sp, #28]
   13cac:	ldr	r1, [r4]
   13cb0:	ldr	r3, [r5]
   13cb4:	cmp	r1, #0
   13cb8:	str	r3, [sp, #4]
   13cbc:	beq	13d14 <__assert_fail@plt+0x15d0>
   13cc0:	mov	r7, r0
   13cc4:	ldr	r0, [pc, #116]	; 13d40 <__assert_fail@plt+0x15fc>
   13cc8:	bl	1254c <gpgrt_fputs@plt>
   13ccc:	mov	r0, r7
   13cd0:	bl	1ed08 <__assert_fail@plt+0xc5c4>
   13cd4:	ldr	r1, [r4]
   13cd8:	bl	1254c <gpgrt_fputs@plt>
   13cdc:	cmp	r6, #0
   13ce0:	beq	13d08 <__assert_fail@plt+0x15c4>
   13ce4:	ldr	r1, [r4]
   13ce8:	mov	r0, #32
   13cec:	bl	122a0 <gpgrt_fputc@plt>
   13cf0:	add	r3, sp, #32
   13cf4:	mov	r1, r6
   13cf8:	mov	r2, r3
   13cfc:	ldr	r0, [r4]
   13d00:	str	r3, [sp]
   13d04:	bl	12090 <gpgrt_vfprintf@plt>
   13d08:	ldr	r1, [r4]
   13d0c:	mov	r0, #10
   13d10:	bl	122a0 <gpgrt_fputc@plt>
   13d14:	ldr	r2, [sp, #4]
   13d18:	ldr	r3, [r5]
   13d1c:	cmp	r2, r3
   13d20:	bne	13d34 <__assert_fail@plt+0x15f0>
   13d24:	add	sp, sp, #8
   13d28:	pop	{r4, r5, r6, r7, lr}
   13d2c:	add	sp, sp, #12
   13d30:	bx	lr
   13d34:	bl	1218c <__stack_chk_fail@plt>
   13d38:	andeq	sp, r3, ip, lsl r3
   13d3c:	andeq	sl, r3, r8, asr fp
   13d40:	andeq	r5, r2, r0, ror r8
   13d44:	push	{r4, lr}
   13d48:	mov	r4, r0
   13d4c:	bl	1ebdc <__assert_fail@plt+0xc498>
   13d50:	cmp	r4, #0
   13d54:	beq	13d80 <__assert_fail@plt+0x163c>
   13d58:	ldr	r3, [pc, #60]	; 13d9c <__assert_fail@plt+0x1658>
   13d5c:	uxth	r2, r4
   13d60:	cmp	r2, r3
   13d64:	bne	13d84 <__assert_fail@plt+0x1640>
   13d68:	mov	r0, #99	; 0x63
   13d6c:	ldr	r2, [pc, #44]	; 13da0 <__assert_fail@plt+0x165c>
   13d70:	ldr	r1, [pc, #44]	; 13da4 <__assert_fail@plt+0x1660>
   13d74:	bl	13c94 <__assert_fail@plt+0x1550>
   13d78:	mov	r0, #2
   13d7c:	b	13d98 <__assert_fail@plt+0x1654>
   13d80:	mov	r4, #1
   13d84:	mov	r0, #99	; 0x63
   13d88:	mov	r2, r4
   13d8c:	ldr	r1, [pc, #16]	; 13da4 <__assert_fail@plt+0x1660>
   13d90:	bl	13c94 <__assert_fail@plt+0x1550>
   13d94:	mov	r0, #1
   13d98:	bl	123c0 <exit@plt>
   13d9c:	andeq	r0, r0, r1, lsl #8
   13da0:	andeq	r8, r0, r0, lsr r0
   13da4:	andeq	r5, r2, ip, ror r8
   13da8:	push	{r4, r5, r6, lr}
   13dac:	ldr	r5, [pc, #64]	; 13df4 <__assert_fail@plt+0x16b0>
   13db0:	ldr	r4, [pc, #64]	; 13df8 <__assert_fail@plt+0x16b4>
   13db4:	add	r6, r5, #96	; 0x60
   13db8:	cmp	r4, #0
   13dbc:	bne	13dd4 <__assert_fail@plt+0x1690>
   13dc0:	b	13de0 <__assert_fail@plt+0x169c>
   13dc4:	ldr	r0, [r4, #40]	; 0x28
   13dc8:	bl	12150 <gcry_free@plt>
   13dcc:	adds	r4, r4, #52	; 0x34
   13dd0:	beq	13de0 <__assert_fail@plt+0x169c>
   13dd4:	ldr	r3, [r4]
   13dd8:	cmp	r3, #0
   13ddc:	bne	13dc4 <__assert_fail@plt+0x1680>
   13de0:	add	r5, r5, #16
   13de4:	cmp	r5, r6
   13de8:	popeq	{r4, r5, r6, pc}
   13dec:	ldr	r4, [r5, #-16]
   13df0:	b	13db8 <__assert_fail@plt+0x1674>
   13df4:	strheq	r6, [r2], -r0
   13df8:	andeq	fp, r3, ip, lsl r2
   13dfc:	push	{r4, r5, r6, lr}
   13e00:	subs	r4, r0, #0
   13e04:	mov	r5, r1
   13e08:	beq	13e4c <__assert_fail@plt+0x1708>
   13e0c:	ldr	r3, [pc, #112]	; 13e84 <__assert_fail@plt+0x1740>
   13e10:	ldr	r2, [r3]
   13e14:	cmp	r2, #0
   13e18:	beq	13e54 <__assert_fail@plt+0x1710>
   13e1c:	ldr	r1, [pc, #100]	; 13e88 <__assert_fail@plt+0x1744>
   13e20:	mov	r0, r4
   13e24:	bl	12054 <strcmp@plt>
   13e28:	ldr	r3, [pc, #92]	; 13e8c <__assert_fail@plt+0x1748>
   13e2c:	mov	r2, #5
   13e30:	mov	r1, r5
   13e34:	cmp	r0, #0
   13e38:	movne	r0, r4
   13e3c:	moveq	r0, r3
   13e40:	bl	12180 <dcgettext@plt>
   13e44:	cmp	r0, #0
   13e48:	popne	{r4, r5, r6, pc}
   13e4c:	mov	r0, r5
   13e50:	pop	{r4, r5, r6, pc}
   13e54:	mov	r2, #1
   13e58:	ldr	r1, [pc, #48]	; 13e90 <__assert_fail@plt+0x174c>
   13e5c:	ldr	r0, [pc, #40]	; 13e8c <__assert_fail@plt+0x1748>
   13e60:	str	r2, [r3]
   13e64:	bl	12294 <bind_textdomain_codeset@plt>
   13e68:	ldr	r1, [pc, #36]	; 13e94 <__assert_fail@plt+0x1750>
   13e6c:	ldr	r0, [pc, #36]	; 13e98 <__assert_fail@plt+0x1754>
   13e70:	bl	12684 <bindtextdomain@plt>
   13e74:	ldr	r1, [pc, #20]	; 13e90 <__assert_fail@plt+0x174c>
   13e78:	ldr	r0, [pc, #24]	; 13e98 <__assert_fail@plt+0x1754>
   13e7c:	bl	12294 <bind_textdomain_codeset@plt>
   13e80:	b	13e1c <__assert_fail@plt+0x16d8>
   13e84:	andeq	sp, r3, r0, lsr #6
   13e88:	strdeq	r5, [r2], -r0
   13e8c:	andeq	r6, r2, r8, ror r4
   13e90:	andeq	r6, r2, r0, lsl #9
   13e94:	andeq	r6, r2, r8, lsl #9
   13e98:	andeq	r7, r2, ip, asr #25
   13e9c:	ldr	r3, [pc, #100]	; 13f08 <__assert_fail@plt+0x17c4>
   13ea0:	push	{r4, r5, r6, lr}
   13ea4:	add	r0, r3, r0, lsl #4
   13ea8:	ldr	r4, [r0, #12]
   13eac:	ldr	r0, [r4]
   13eb0:	cmp	r0, #0
   13eb4:	popeq	{r4, r5, r6, pc}
   13eb8:	mov	r6, r2
   13ebc:	mov	r5, r1
   13ec0:	b	13edc <__assert_fail@plt+0x1798>
   13ec4:	ldr	r3, [r4, #24]
   13ec8:	cmp	r3, r6
   13ecc:	beq	13f00 <__assert_fail@plt+0x17bc>
   13ed0:	ldr	r0, [r4, #52]!	; 0x34
   13ed4:	cmp	r0, #0
   13ed8:	popeq	{r4, r5, r6, pc}
   13edc:	ldr	r3, [r4, #4]
   13ee0:	mov	r1, r5
   13ee4:	tst	r3, #1
   13ee8:	bne	13ed0 <__assert_fail@plt+0x178c>
   13eec:	bl	12054 <strcmp@plt>
   13ef0:	cmp	r0, #0
   13ef4:	bne	13ed0 <__assert_fail@plt+0x178c>
   13ef8:	cmp	r6, #0
   13efc:	bne	13ec4 <__assert_fail@plt+0x1780>
   13f00:	mov	r0, r4
   13f04:	pop	{r4, r5, r6, pc}
   13f08:	muleq	r2, r4, r0
   13f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f10:	sub	sp, sp, #1056	; 0x420
   13f14:	ldr	r7, [pc, #784]	; 1422c <__assert_fail@plt+0x1ae8>
   13f18:	sub	sp, sp, #4
   13f1c:	mov	r5, r0
   13f20:	ldr	r3, [r7]
   13f24:	mov	r0, r1
   13f28:	str	r3, [sp, #1052]	; 0x41c
   13f2c:	mov	fp, r1
   13f30:	bl	123e4 <strlen@plt>
   13f34:	ldr	r6, [pc, #756]	; 14230 <__assert_fail@plt+0x1aec>
   13f38:	mov	r3, #0
   13f3c:	mov	r9, r3
   13f40:	str	r3, [sp, #24]
   13f44:	add	r3, sp, #24
   13f48:	str	r3, [sp, #8]
   13f4c:	str	r0, [sp, #4]
   13f50:	add	sl, sp, #27
   13f54:	mov	r8, #0
   13f58:	b	13f84 <__assert_fail@plt+0x1840>
   13f5c:	add	r8, r8, #1
   13f60:	sub	r3, r0, #10
   13f64:	clz	r3, r3
   13f68:	lsr	r3, r3, #5
   13f6c:	cmp	r8, r6
   13f70:	movls	r2, r3
   13f74:	orrhi	r2, r3, #1
   13f78:	cmp	r2, #0
   13f7c:	strb	r0, [sl, #1]!
   13f80:	bne	13fb4 <__assert_fail@plt+0x1870>
   13f84:	mov	r0, r5
   13f88:	bl	12504 <gpgrt_fgetc@plt>
   13f8c:	cmn	r0, #1
   13f90:	bne	13f5c <__assert_fail@plt+0x1818>
   13f94:	ldr	r2, [sp, #1052]	; 0x41c
   13f98:	ldr	r3, [r7]
   13f9c:	ldr	r0, [sp, #24]
   13fa0:	cmp	r2, r3
   13fa4:	bne	14228 <__assert_fail@plt+0x1ae4>
   13fa8:	add	sp, sp, #1056	; 0x420
   13fac:	add	sp, sp, #4
   13fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fb4:	sub	r8, r8, r3
   13fb8:	add	r3, sp, #1056	; 0x420
   13fbc:	add	r8, r3, r8
   13fc0:	cmp	r9, #0
   13fc4:	mov	r3, #0
   13fc8:	mov	r4, r0
   13fcc:	strb	r3, [r8, #-1028]	; 0xfffffbfc
   13fd0:	bne	14004 <__assert_fail@plt+0x18c0>
   13fd4:	ldr	r8, [sp, #4]
   13fd8:	add	r0, sp, #28
   13fdc:	mov	r2, r8
   13fe0:	mov	r1, fp
   13fe4:	bl	126d8 <strncmp@plt>
   13fe8:	cmp	r0, #0
   13fec:	bne	14004 <__assert_fail@plt+0x18c0>
   13ff0:	add	r2, sp, #1056	; 0x420
   13ff4:	add	r3, r2, r8
   13ff8:	ldrb	r3, [r3, #-1028]	; 0xfffffbfc
   13ffc:	cmp	r3, #58	; 0x3a
   14000:	beq	14010 <__assert_fail@plt+0x18cc>
   14004:	subs	r9, r4, #10
   14008:	movne	r9, #1
   1400c:	b	13f50 <__assert_fail@plt+0x180c>
   14010:	ldr	r3, [sp, #4]
   14014:	add	r2, sp, #28
   14018:	add	r3, r3, #1
   1401c:	add	r8, r2, r3
   14020:	ldrb	r3, [r2, r3]
   14024:	cmp	r3, #9
   14028:	cmpne	r3, #32
   1402c:	bne	14040 <__assert_fail@plt+0x18fc>
   14030:	ldrb	r3, [r8, #1]!
   14034:	cmp	r3, #9
   14038:	cmpne	r3, #32
   1403c:	beq	14030 <__assert_fail@plt+0x18ec>
   14040:	mov	r0, r8
   14044:	bl	1a3b0 <__assert_fail@plt+0x7c6c>
   14048:	ldrb	r3, [r8]
   1404c:	cmp	r3, #0
   14050:	beq	14004 <__assert_fail@plt+0x18c0>
   14054:	mov	r1, #58	; 0x3a
   14058:	mov	r0, r8
   1405c:	bl	12408 <strchr@plt>
   14060:	subs	r9, r0, #0
   14064:	beq	141dc <__assert_fail@plt+0x1a98>
   14068:	add	sl, r9, #1
   1406c:	mov	r0, sl
   14070:	mov	r1, #58	; 0x3a
   14074:	bl	12408 <strchr@plt>
   14078:	subs	r3, r0, #0
   1407c:	str	r3, [sp, #20]
   14080:	beq	141dc <__assert_fail@plt+0x1a98>
   14084:	subs	r3, r3, sl
   14088:	str	r3, [sp, #12]
   1408c:	beq	141dc <__assert_fail@plt+0x1a98>
   14090:	mov	sl, r9
   14094:	mov	r3, r5
   14098:	mov	r5, r9
   1409c:	mov	r9, r8
   140a0:	mov	r8, sl
   140a4:	mov	sl, r3
   140a8:	str	r4, [sp, #16]
   140ac:	ldrb	r4, [r8, #1]!
   140b0:	tst	r4, #128	; 0x80
   140b4:	bne	141d0 <__assert_fail@plt+0x1a8c>
   140b8:	bl	12390 <__ctype_b_loc@plt>
   140bc:	lsl	r4, r4, #1
   140c0:	ldr	r3, [r0]
   140c4:	ldrh	r3, [r3, r4]
   140c8:	tst	r3, #2048	; 0x800
   140cc:	beq	141d0 <__assert_fail@plt+0x1a8c>
   140d0:	ldr	r2, [sp, #12]
   140d4:	sub	r3, r5, r8
   140d8:	cmn	r3, r2
   140dc:	bne	140ac <__assert_fail@plt+0x1968>
   140e0:	ldr	r1, [sp, #20]
   140e4:	ldr	r4, [sp, #16]
   140e8:	add	r1, r1, #1
   140ec:	ldrb	r2, [r1]
   140f0:	mov	r8, r9
   140f4:	str	r5, [sp, #16]
   140f8:	cmp	r2, #32
   140fc:	cmpne	r2, #9
   14100:	mov	r9, r5
   14104:	str	r1, [sp, #12]
   14108:	mov	r3, r0
   1410c:	mov	r5, sl
   14110:	ldreq	r1, [sp, #12]
   14114:	bne	1412c <__assert_fail@plt+0x19e8>
   14118:	ldrb	r2, [r1, #1]!
   1411c:	cmp	r2, #9
   14120:	cmpne	r2, #32
   14124:	beq	14118 <__assert_fail@plt+0x19d4>
   14128:	str	r1, [sp, #12]
   1412c:	mov	r0, r8
   14130:	str	r3, [sp, #20]
   14134:	bl	123e4 <strlen@plt>
   14138:	add	r0, r0, #20
   1413c:	bl	11fd0 <gcry_xmalloc@plt>
   14140:	mov	r3, #0
   14144:	mov	r1, r8
   14148:	mov	r2, r0
   1414c:	mov	sl, r0
   14150:	str	r3, [r2], #16
   14154:	mov	r0, r2
   14158:	bl	12288 <strcpy@plt>
   1415c:	ldr	r3, [sp, #12]
   14160:	sub	ip, r9, r8
   14164:	sub	r1, r3, r8
   14168:	ldr	r3, [sp, #20]
   1416c:	add	ip, sl, ip
   14170:	add	r1, r0, r1
   14174:	str	r0, [sl, #4]
   14178:	ldr	r0, [r3]
   1417c:	mov	r3, #0
   14180:	strb	r3, [ip, #16]
   14184:	mov	r3, #0
   14188:	str	r1, [sl, #12]
   1418c:	str	r3, [sl, #8]
   14190:	ldr	r1, [sp, #16]
   14194:	b	141ac <__assert_fail@plt+0x1a68>
   14198:	ldr	r2, [sl, #8]
   1419c:	sub	r3, r3, #48	; 0x30
   141a0:	add	r2, r2, r2, lsl #2
   141a4:	add	r3, r3, r2, lsl #1
   141a8:	str	r3, [sl, #8]
   141ac:	ldrb	r3, [r1, #1]!
   141b0:	lsl	r2, r3, #1
   141b4:	ldrh	r2, [r0, r2]
   141b8:	tst	r2, #2048	; 0x800
   141bc:	bne	14198 <__assert_fail@plt+0x1a54>
   141c0:	ldr	r3, [sp, #8]
   141c4:	str	sl, [sp, #8]
   141c8:	str	sl, [r3]
   141cc:	b	14004 <__assert_fail@plt+0x18c0>
   141d0:	ldr	r4, [sp, #16]
   141d4:	mov	r8, r9
   141d8:	mov	r5, sl
   141dc:	mov	r0, r8
   141e0:	bl	123e4 <strlen@plt>
   141e4:	add	r0, r0, #20
   141e8:	bl	11fd0 <gcry_xmalloc@plt>
   141ec:	mov	r2, #0
   141f0:	mov	r1, r8
   141f4:	mov	r8, r2
   141f8:	mov	r3, r0
   141fc:	mov	r9, r0
   14200:	str	r2, [r3], #16
   14204:	mov	r0, r3
   14208:	bl	12288 <strcpy@plt>
   1420c:	ldr	r3, [sp, #8]
   14210:	str	r8, [r9, #4]
   14214:	str	r8, [r9, #8]
   14218:	str	r9, [sp, #8]
   1421c:	str	r0, [r9, #12]
   14220:	str	r9, [r3]
   14224:	b	14004 <__assert_fail@plt+0x18c0>
   14228:	bl	1218c <__stack_chk_fail@plt>
   1422c:	andeq	sl, r3, r8, asr fp
   14230:	strdeq	r0, [r0], -sl
   14234:	push	{r2, r3}
   14238:	push	{r4, r5, r6, lr}
   1423c:	mov	r6, r0
   14240:	ldr	r4, [pc, #160]	; 142e8 <__assert_fail@plt+0x1ba4>
   14244:	sub	sp, sp, #8
   14248:	add	r3, sp, #28
   1424c:	ldr	r0, [r4]
   14250:	mov	r5, r1
   14254:	str	r0, [sp, #4]
   14258:	mov	r2, r3
   1425c:	ldr	r1, [sp, #24]
   14260:	mov	r0, #4
   14264:	str	r3, [sp]
   14268:	bl	1e8a8 <__assert_fail@plt+0xc164>
   1426c:	cmp	r5, #0
   14270:	beq	142b0 <__assert_fail@plt+0x1b6c>
   14274:	mov	r0, r5
   14278:	bl	12330 <strerror@plt>
   1427c:	mov	r1, r0
   14280:	ldr	r0, [pc, #100]	; 142ec <__assert_fail@plt+0x1ba8>
   14284:	bl	1eb70 <__assert_fail@plt+0xc42c>
   14288:	cmp	r6, #0
   1428c:	bne	142c0 <__assert_fail@plt+0x1b7c>
   14290:	ldr	r2, [sp, #4]
   14294:	ldr	r3, [r4]
   14298:	cmp	r2, r3
   1429c:	bne	142bc <__assert_fail@plt+0x1b78>
   142a0:	add	sp, sp, #8
   142a4:	pop	{r4, r5, r6, lr}
   142a8:	add	sp, sp, #8
   142ac:	bx	lr
   142b0:	ldr	r0, [pc, #56]	; 142f0 <__assert_fail@plt+0x1bac>
   142b4:	bl	1eb70 <__assert_fail@plt+0xc42c>
   142b8:	b	14288 <__assert_fail@plt+0x1b44>
   142bc:	bl	1218c <__stack_chk_fail@plt>
   142c0:	mov	r0, #0
   142c4:	bl	1eb70 <__assert_fail@plt+0xc42c>
   142c8:	mov	r1, r6
   142cc:	ldr	r0, [pc, #32]	; 142f4 <__assert_fail@plt+0x1bb0>
   142d0:	bl	1eb70 <__assert_fail@plt+0xc42c>
   142d4:	mov	r0, r5
   142d8:	bl	12258 <gpg_err_code_from_errno@plt>
   142dc:	cmp	r0, #0
   142e0:	uxthne	r0, r0
   142e4:	bl	13d44 <__assert_fail@plt+0x1600>
   142e8:	andeq	sl, r3, r8, asr fp
   142ec:			; <UNDEFINED> instruction: 0x000259b8
   142f0:	muleq	r2, r8, r3
   142f4:	muleq	r2, ip, r4
   142f8:	push	{r4, r5, r6, lr}
   142fc:	sub	sp, sp, #40	; 0x28
   14300:	ldr	r4, [pc, #256]	; 14408 <__assert_fail@plt+0x1cc4>
   14304:	mov	r6, r0
   14308:	mvn	r3, #0
   1430c:	ldr	r2, [r4]
   14310:	mov	r0, #9
   14314:	str	r2, [sp, #36]	; 0x24
   14318:	str	r3, [sp, #8]
   1431c:	bl	2057c <__assert_fail@plt+0xde38>
   14320:	ldr	r3, [pc, #228]	; 1440c <__assert_fail@plt+0x1cc8>
   14324:	cmp	r6, #0
   14328:	ldr	r2, [pc, #224]	; 14410 <__assert_fail@plt+0x1ccc>
   1432c:	mov	r5, r0
   14330:	ldr	r0, [pc, #220]	; 14414 <__assert_fail@plt+0x1cd0>
   14334:	moveq	r0, r3
   14338:	ldr	r3, [pc, #216]	; 14418 <__assert_fail@plt+0x1cd4>
   1433c:	str	r0, [sp, #20]
   14340:	strd	r2, [sp, #12]
   14344:	bl	20028 <__assert_fail@plt+0xd8e4>
   14348:	subs	r6, r0, #0
   1434c:	beq	143ec <__assert_fail@plt+0x1ca8>
   14350:	mov	r3, #0
   14354:	str	r3, [sp, #24]
   14358:	mvn	r3, #0
   1435c:	add	r2, sp, #8
   14360:	str	r2, [sp, #4]
   14364:	str	r3, [sp]
   14368:	mov	r2, r3
   1436c:	add	r1, sp, #12
   14370:	mov	r0, r5
   14374:	bl	235dc <__assert_fail@plt+0x10e98>
   14378:	subs	r3, r0, #0
   1437c:	beq	143d0 <__assert_fail@plt+0x1c8c>
   14380:	mov	r0, r3
   14384:	ldr	r6, [sp, #20]
   14388:	bl	1260c <gpg_strerror@plt>
   1438c:	mov	r1, #0
   14390:	str	r6, [sp]
   14394:	mov	r3, r5
   14398:	ldr	r2, [pc, #124]	; 1441c <__assert_fail@plt+0x1cd8>
   1439c:	str	r0, [sp, #4]
   143a0:	mov	r0, r1
   143a4:	bl	14234 <__assert_fail@plt+0x1af0>
   143a8:	ldr	r0, [sp, #8]
   143ac:	bl	23c04 <__assert_fail@plt+0x114c0>
   143b0:	mov	r0, #0
   143b4:	bl	12150 <gcry_free@plt>
   143b8:	ldr	r2, [sp, #36]	; 0x24
   143bc:	ldr	r3, [r4]
   143c0:	cmp	r2, r3
   143c4:	bne	14404 <__assert_fail@plt+0x1cc0>
   143c8:	add	sp, sp, #40	; 0x28
   143cc:	pop	{r4, r5, r6, pc}
   143d0:	mov	r2, #1
   143d4:	ldr	r1, [sp, #8]
   143d8:	mov	r0, r5
   143dc:	bl	236b0 <__assert_fail@plt+0x10f6c>
   143e0:	subs	r3, r0, #0
   143e4:	beq	143a8 <__assert_fail@plt+0x1c64>
   143e8:	b	14380 <__assert_fail@plt+0x1c3c>
   143ec:	ldr	r3, [pc, #44]	; 14420 <__assert_fail@plt+0x1cdc>
   143f0:	str	r3, [sp, #24]
   143f4:	bl	1ffec <__assert_fail@plt+0xd8a8>
   143f8:	str	r6, [sp, #32]
   143fc:	str	r0, [sp, #28]
   14400:	b	14358 <__assert_fail@plt+0x1c14>
   14404:	bl	1218c <__stack_chk_fail@plt>
   14408:	andeq	sl, r3, r8, asr fp
   1440c:	andeq	r6, r2, r8, asr #9
   14410:	ldrdeq	r6, [r2], -r8
   14414:			; <UNDEFINED> instruction: 0x000264bc
   14418:	andeq	r6, r2, r8, ror #9
   1441c:	andeq	r6, r2, r0, lsl #10
   14420:	strdeq	r6, [r2], -r4
   14424:	push	{r4, r5, r6, r7, r8, r9, lr}
   14428:	sub	sp, sp, #60	; 0x3c
   1442c:	ldr	r4, [pc, #356]	; 14598 <__assert_fail@plt+0x1e54>
   14430:	mvn	r2, #0
   14434:	mov	r0, #9
   14438:	ldr	r3, [r4]
   1443c:	str	r2, [sp, #12]
   14440:	str	r3, [sp, #52]	; 0x34
   14444:	bl	2057c <__assert_fail@plt+0xde38>
   14448:	mov	r5, r0
   1444c:	bl	20028 <__assert_fail@plt+0xd8e4>
   14450:	cmp	r0, #0
   14454:	beq	14564 <__assert_fail@plt+0x1e20>
   14458:	mov	ip, #6
   1445c:	mov	lr, #5
   14460:	mov	r7, #4
   14464:	mov	r2, #3
   14468:	mov	r3, #2
   1446c:	mov	r1, #1
   14470:	mov	r6, #0
   14474:	add	r0, sp, #56	; 0x38
   14478:	add	r6, r0, r6, lsl #2
   1447c:	add	r1, r0, r1, lsl #2
   14480:	add	r3, r0, r3, lsl #2
   14484:	add	r2, r0, r2, lsl #2
   14488:	ldr	r8, [pc, #268]	; 1459c <__assert_fail@plt+0x1e58>
   1448c:	add	r0, r0, r7, lsl #2
   14490:	add	r7, sp, #56	; 0x38
   14494:	add	lr, r7, lr, lsl #2
   14498:	add	ip, r7, ip, lsl #2
   1449c:	ldr	r7, [pc, #252]	; 145a0 <__assert_fail@plt+0x1e5c>
   144a0:	str	r8, [r6, #-40]	; 0xffffffd8
   144a4:	ldr	r6, [pc, #248]	; 145a4 <__assert_fail@plt+0x1e60>
   144a8:	str	r7, [r1, #-40]	; 0xffffffd8
   144ac:	ldr	r9, [pc, #244]	; 145a8 <__assert_fail@plt+0x1e64>
   144b0:	ldr	r8, [pc, #244]	; 145ac <__assert_fail@plt+0x1e68>
   144b4:	ldr	r7, [pc, #244]	; 145b0 <__assert_fail@plt+0x1e6c>
   144b8:	str	r6, [r3, #-40]	; 0xffffffd8
   144bc:	add	r1, sp, #12
   144c0:	mvn	r3, #0
   144c4:	mov	r6, #0
   144c8:	str	r1, [sp, #4]
   144cc:	str	r3, [sp]
   144d0:	add	r1, sp, #16
   144d4:	str	r9, [r2, #-40]	; 0xffffffd8
   144d8:	str	r8, [r0, #-40]	; 0xffffffd8
   144dc:	mov	r2, r3
   144e0:	str	r7, [lr, #-40]	; 0xffffffd8
   144e4:	mov	r0, r5
   144e8:	str	r6, [ip, #-40]	; 0xffffffd8
   144ec:	bl	235dc <__assert_fail@plt+0x10e98>
   144f0:	subs	r3, r0, #0
   144f4:	beq	14548 <__assert_fail@plt+0x1e04>
   144f8:	mov	r0, r3
   144fc:	ldr	r6, [sp, #32]
   14500:	bl	1260c <gpg_strerror@plt>
   14504:	mov	r1, #0
   14508:	str	r6, [sp]
   1450c:	mov	r3, r5
   14510:	ldr	r2, [pc, #156]	; 145b4 <__assert_fail@plt+0x1e70>
   14514:	str	r0, [sp, #4]
   14518:	mov	r0, r1
   1451c:	bl	14234 <__assert_fail@plt+0x1af0>
   14520:	ldr	r0, [sp, #12]
   14524:	bl	23c04 <__assert_fail@plt+0x114c0>
   14528:	mov	r0, #0
   1452c:	bl	12150 <gcry_free@plt>
   14530:	ldr	r2, [sp, #52]	; 0x34
   14534:	ldr	r3, [r4]
   14538:	cmp	r2, r3
   1453c:	bne	14594 <__assert_fail@plt+0x1e50>
   14540:	add	sp, sp, #60	; 0x3c
   14544:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14548:	mov	r2, #1
   1454c:	ldr	r1, [sp, #12]
   14550:	mov	r0, r5
   14554:	bl	236b0 <__assert_fail@plt+0x10f6c>
   14558:	subs	r3, r0, #0
   1455c:	beq	14520 <__assert_fail@plt+0x1ddc>
   14560:	b	144f8 <__assert_fail@plt+0x1db4>
   14564:	ldr	r3, [pc, #76]	; 145b8 <__assert_fail@plt+0x1e74>
   14568:	mov	r7, #6
   1456c:	str	r3, [sp, #16]
   14570:	bl	1ffec <__assert_fail@plt+0xd8a8>
   14574:	mov	r6, #2
   14578:	mov	ip, #8
   1457c:	mov	lr, #7
   14580:	mov	r2, #5
   14584:	mov	r3, #4
   14588:	mov	r1, #3
   1458c:	str	r0, [sp, #20]
   14590:	b	14474 <__assert_fail@plt+0x1d30>
   14594:	bl	1218c <__stack_chk_fail@plt>
   14598:	andeq	sl, r3, r8, asr fp
   1459c:	andeq	r6, r2, ip, lsl r5
   145a0:	ldrdeq	r6, [r2], -r8
   145a4:	andeq	r6, r2, r0, lsr #10
   145a8:	andeq	r6, r2, r4, lsr r5
   145ac:	andeq	r6, r2, r0, asr #10
   145b0:	andeq	r6, r2, ip, asr #10
   145b4:	andeq	r6, r2, r0, lsl #10
   145b8:	strdeq	r6, [r2], -r4
   145bc:	push	{r4, r5, r6, lr}
   145c0:	sub	sp, sp, #40	; 0x28
   145c4:	ldr	r4, [pc, #288]	; 146ec <__assert_fail@plt+0x1fa8>
   145c8:	mvn	r3, #0
   145cc:	mov	r6, r0
   145d0:	ldr	r2, [r4]
   145d4:	mov	r0, #9
   145d8:	str	r3, [sp, #12]
   145dc:	str	r2, [sp, #36]	; 0x24
   145e0:	bl	2057c <__assert_fail@plt+0xde38>
   145e4:	mov	r5, r0
   145e8:	bl	20028 <__assert_fail@plt+0xd8e4>
   145ec:	cmp	r0, #0
   145f0:	movne	ip, #2
   145f4:	movne	r1, #1
   145f8:	movne	r3, #0
   145fc:	beq	146c8 <__assert_fail@plt+0x1f84>
   14600:	add	r2, sp, #40	; 0x28
   14604:	add	r3, r2, r3, lsl #2
   14608:	add	r1, r2, r1, lsl #2
   1460c:	add	ip, r2, ip, lsl #2
   14610:	ldr	lr, [pc, #216]	; 146f0 <__assert_fail@plt+0x1fac>
   14614:	ldr	r2, [pc, #216]	; 146f4 <__assert_fail@plt+0x1fb0>
   14618:	ldr	r0, [pc, #216]	; 146f8 <__assert_fail@plt+0x1fb4>
   1461c:	cmp	r6, #0
   14620:	str	r2, [r3, #-24]	; 0xffffffe8
   14624:	moveq	r0, lr
   14628:	mvn	r3, #0
   1462c:	add	r2, sp, #12
   14630:	mov	lr, #0
   14634:	str	r2, [sp, #4]
   14638:	str	r3, [sp]
   1463c:	mov	r2, r3
   14640:	str	r0, [r1, #-24]	; 0xffffffe8
   14644:	add	r1, sp, #16
   14648:	mov	r0, r5
   1464c:	str	lr, [ip, #-24]	; 0xffffffe8
   14650:	bl	235dc <__assert_fail@plt+0x10e98>
   14654:	subs	r3, r0, #0
   14658:	beq	146ac <__assert_fail@plt+0x1f68>
   1465c:	mov	r0, r3
   14660:	ldr	r6, [sp, #20]
   14664:	bl	1260c <gpg_strerror@plt>
   14668:	mov	r1, #0
   1466c:	str	r6, [sp]
   14670:	mov	r3, r5
   14674:	ldr	r2, [pc, #128]	; 146fc <__assert_fail@plt+0x1fb8>
   14678:	str	r0, [sp, #4]
   1467c:	mov	r0, r1
   14680:	bl	14234 <__assert_fail@plt+0x1af0>
   14684:	ldr	r0, [sp, #12]
   14688:	bl	23c04 <__assert_fail@plt+0x114c0>
   1468c:	mov	r0, #0
   14690:	bl	12150 <gcry_free@plt>
   14694:	ldr	r2, [sp, #36]	; 0x24
   14698:	ldr	r3, [r4]
   1469c:	cmp	r2, r3
   146a0:	bne	146e8 <__assert_fail@plt+0x1fa4>
   146a4:	add	sp, sp, #40	; 0x28
   146a8:	pop	{r4, r5, r6, pc}
   146ac:	mov	r2, #1
   146b0:	ldr	r1, [sp, #12]
   146b4:	mov	r0, r5
   146b8:	bl	236b0 <__assert_fail@plt+0x10f6c>
   146bc:	subs	r3, r0, #0
   146c0:	beq	14684 <__assert_fail@plt+0x1f40>
   146c4:	b	1465c <__assert_fail@plt+0x1f18>
   146c8:	ldr	r3, [pc, #48]	; 14700 <__assert_fail@plt+0x1fbc>
   146cc:	str	r3, [sp, #16]
   146d0:	bl	1ffec <__assert_fail@plt+0xd8a8>
   146d4:	mov	ip, #4
   146d8:	mov	r1, #3
   146dc:	mov	r3, #2
   146e0:	str	r0, [sp, #20]
   146e4:	b	14600 <__assert_fail@plt+0x1ebc>
   146e8:	bl	1218c <__stack_chk_fail@plt>
   146ec:	andeq	sl, r3, r8, asr fp
   146f0:	andeq	r6, r2, r0, ror #10
   146f4:	ldrdeq	r6, [r2], -r8
   146f8:	andeq	r6, r2, r4, asr r5
   146fc:	andeq	r6, r2, r0, lsl #10
   14700:	strdeq	r6, [r2], -r4
   14704:	push	{r4, r5, r6, r7, r8, lr}
   14708:	mov	r4, r0
   1470c:	bl	123e4 <strlen@plt>
   14710:	ldr	r6, [pc, #184]	; 147d0 <__assert_fail@plt+0x208c>
   14714:	ldr	r3, [r6, #8]
   14718:	ldr	r5, [r6, #4]
   1471c:	add	r0, r0, r0, lsl #1
   14720:	add	r7, r0, #1
   14724:	cmp	r3, r7
   14728:	blt	1479c <__assert_fail@plt+0x2058>
   1472c:	ldr	r8, [pc, #160]	; 147d4 <__assert_fail@plt+0x2090>
   14730:	ldrb	r3, [r4]
   14734:	add	r0, r4, #1
   14738:	cmp	r3, #0
   1473c:	beq	14778 <__assert_fail@plt+0x2034>
   14740:	add	r5, r5, #1
   14744:	cmp	r3, #37	; 0x25
   14748:	movne	r4, r0
   1474c:	strbne	r3, [r5, #-1]
   14750:	bne	14730 <__assert_fail@plt+0x1fec>
   14754:	bl	1a758 <__assert_fail@plt+0x8014>
   14758:	subs	r7, r0, #0
   1475c:	blt	14784 <__assert_fail@plt+0x2040>
   14760:	add	r4, r4, #3
   14764:	strb	r7, [r5, #-1]
   14768:	ldrb	r3, [r4]
   1476c:	add	r0, r4, #1
   14770:	cmp	r3, #0
   14774:	bne	14740 <__assert_fail@plt+0x1ffc>
   14778:	strb	r3, [r5]
   1477c:	ldr	r0, [r6, #4]
   14780:	pop	{r4, r5, r6, r7, r8, pc}
   14784:	mov	r3, r4
   14788:	mov	r2, r8
   1478c:	mov	r1, #0
   14790:	mov	r0, #1
   14794:	bl	14234 <__assert_fail@plt+0x1af0>
   14798:	b	14760 <__assert_fail@plt+0x201c>
   1479c:	mov	r0, r5
   147a0:	mov	r1, r7
   147a4:	bl	121e0 <realloc@plt>
   147a8:	subs	r5, r0, #0
   147ac:	beq	147b8 <__assert_fail@plt+0x2074>
   147b0:	stmib	r6, {r5, r7}
   147b4:	b	1472c <__assert_fail@plt+0x1fe8>
   147b8:	bl	1245c <__errno_location@plt>
   147bc:	ldr	r2, [pc, #20]	; 147d8 <__assert_fail@plt+0x2094>
   147c0:	ldr	r1, [r0]
   147c4:	mov	r0, #1
   147c8:	bl	14234 <__assert_fail@plt+0x1af0>
   147cc:	b	147b0 <__assert_fail@plt+0x206c>
   147d0:	andeq	sp, r3, r0, lsr #6
   147d4:	andeq	r6, r2, r4, lsl #11
   147d8:	andeq	r6, r2, ip, ror #10
   147dc:	push	{r4, r5, r6, r7, r8, lr}
   147e0:	lsl	r7, r1, #1
   147e4:	add	r3, r7, r1
   147e8:	ldr	r6, [pc, #364]	; 1495c <__assert_fail@plt+0x2218>
   147ec:	sub	sp, sp, #8
   147f0:	add	r3, r6, r3, lsl #3
   147f4:	mov	r5, r1
   147f8:	ldr	r8, [r3, #112]	; 0x70
   147fc:	mov	r2, #0
   14800:	mov	r1, r8
   14804:	bl	13e9c <__assert_fail@plt+0x1758>
   14808:	subs	r4, r0, #0
   1480c:	beq	14920 <__assert_fail@plt+0x21dc>
   14810:	ldr	r3, [r4, #20]
   14814:	cmp	r3, #32
   14818:	bne	14948 <__assert_fail@plt+0x2204>
   1481c:	ldr	r3, [r4, #4]
   14820:	tst	r3, #4
   14824:	bne	14934 <__assert_fail@plt+0x21f0>
   14828:	ldr	r3, [r4, #28]
   1482c:	cmp	r3, #0
   14830:	beq	14898 <__assert_fail@plt+0x2154>
   14834:	ldr	r3, [r4, #32]
   14838:	cmp	r3, #0
   1483c:	beq	14898 <__assert_fail@plt+0x2154>
   14840:	ldr	r0, [r4, #40]	; 0x28
   14844:	cmp	r0, #0
   14848:	beq	14858 <__assert_fail@plt+0x2114>
   1484c:	ldrb	r2, [r0]
   14850:	cmp	r2, #0
   14854:	bne	148fc <__assert_fail@plt+0x21b8>
   14858:	ldrb	r2, [r3]
   1485c:	cmp	r2, #0
   14860:	bne	148ec <__assert_fail@plt+0x21a8>
   14864:	ldr	r4, [pc, #244]	; 14960 <__assert_fail@plt+0x221c>
   14868:	add	r5, r7, r5
   1486c:	mov	r3, r8
   14870:	add	r6, r6, r5, lsl #3
   14874:	ldr	r2, [pc, #232]	; 14964 <__assert_fail@plt+0x2220>
   14878:	ldr	r0, [r6, #96]	; 0x60
   1487c:	mov	r1, #0
   14880:	str	r0, [sp]
   14884:	mov	r0, #1
   14888:	bl	14234 <__assert_fail@plt+0x1af0>
   1488c:	mov	r0, r4
   14890:	add	sp, sp, #8
   14894:	pop	{r4, r5, r6, r7, r8, pc}
   14898:	add	r1, r7, r5
   1489c:	mov	r3, r8
   148a0:	add	r1, r6, r1, lsl #3
   148a4:	ldr	r2, [pc, #188]	; 14968 <__assert_fail@plt+0x2224>
   148a8:	ldr	r0, [r1, #96]	; 0x60
   148ac:	mov	r1, #0
   148b0:	str	r0, [sp]
   148b4:	mov	r0, #1
   148b8:	bl	14234 <__assert_fail@plt+0x1af0>
   148bc:	ldr	r0, [r4, #40]	; 0x28
   148c0:	cmp	r0, #0
   148c4:	beq	148d4 <__assert_fail@plt+0x2190>
   148c8:	ldrb	r3, [r0]
   148cc:	cmp	r3, #0
   148d0:	bne	148fc <__assert_fail@plt+0x21b8>
   148d4:	ldr	r3, [r4, #32]
   148d8:	cmp	r3, #0
   148dc:	beq	14864 <__assert_fail@plt+0x2120>
   148e0:	ldrb	r2, [r3]
   148e4:	cmp	r2, #0
   148e8:	beq	14864 <__assert_fail@plt+0x2120>
   148ec:	add	r0, r3, #1
   148f0:	bl	14704 <__assert_fail@plt+0x1fc0>
   148f4:	mov	r4, r0
   148f8:	b	14908 <__assert_fail@plt+0x21c4>
   148fc:	add	r0, r0, #1
   14900:	bl	14704 <__assert_fail@plt+0x1fc0>
   14904:	mov	r4, r0
   14908:	ldrb	r3, [r4]
   1490c:	cmp	r3, #47	; 0x2f
   14910:	bne	14868 <__assert_fail@plt+0x2124>
   14914:	mov	r0, r4
   14918:	add	sp, sp, #8
   1491c:	pop	{r4, r5, r6, r7, r8, pc}
   14920:	add	r3, r6, #288	; 0x120
   14924:	ldr	r2, [pc, #64]	; 1496c <__assert_fail@plt+0x2228>
   14928:	ldr	r1, [pc, #64]	; 14970 <__assert_fail@plt+0x222c>
   1492c:	ldr	r0, [pc, #64]	; 14974 <__assert_fail@plt+0x2230>
   14930:	bl	12744 <__assert_fail@plt>
   14934:	add	r3, r6, #288	; 0x120
   14938:	ldr	r2, [pc, #56]	; 14978 <__assert_fail@plt+0x2234>
   1493c:	ldr	r1, [pc, #44]	; 14970 <__assert_fail@plt+0x222c>
   14940:	ldr	r0, [pc, #52]	; 1497c <__assert_fail@plt+0x2238>
   14944:	bl	12744 <__assert_fail@plt>
   14948:	add	r3, r6, #288	; 0x120
   1494c:	ldr	r2, [pc, #44]	; 14980 <__assert_fail@plt+0x223c>
   14950:	ldr	r1, [pc, #24]	; 14970 <__assert_fail@plt+0x222c>
   14954:	ldr	r0, [pc, #40]	; 14984 <__assert_fail@plt+0x2240>
   14958:	bl	12744 <__assert_fail@plt>
   1495c:	muleq	r2, r4, r0
   14960:	andeq	r6, r2, r4, ror #29
   14964:	andeq	r6, r2, r4, asr #12
   14968:	andeq	r6, r2, ip, lsl #12
   1496c:	andeq	r0, r0, sp, lsl #16
   14970:	andeq	r6, r2, r0, lsr #11
   14974:	ldrdeq	r8, [r2], -ip
   14978:	andeq	r0, r0, pc, lsl #16
   1497c:	andeq	r6, r2, r8, ror #11
   14980:	andeq	r0, r0, lr, lsl #16
   14984:			; <UNDEFINED> instruction: 0x000265bc
   14988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1498c:	sub	sp, sp, #28
   14990:	ldr	sl, [pc, #1224]	; 14e60 <__assert_fail@plt+0x271c>
   14994:	mov	r4, r0
   14998:	ldr	r0, [r0, #28]
   1499c:	str	r1, [sp, #8]
   149a0:	ldr	r1, [sl]
   149a4:	cmp	r0, #0
   149a8:	mov	r7, r2
   149ac:	mov	r8, r3
   149b0:	str	r1, [sp, #20]
   149b4:	ldr	r6, [sp, #64]	; 0x40
   149b8:	beq	14cd0 <__assert_fail@plt+0x258c>
   149bc:	ldr	r3, [r4, #44]	; 0x2c
   149c0:	cmp	r3, #0
   149c4:	bne	149d4 <__assert_fail@plt+0x2290>
   149c8:	ldr	r3, [r4, #48]	; 0x30
   149cc:	cmp	r3, #0
   149d0:	beq	149e8 <__assert_fail@plt+0x22a4>
   149d4:	ldr	r3, [r4]
   149d8:	ldr	r2, [pc, #1156]	; 14e64 <__assert_fail@plt+0x2720>
   149dc:	mov	r1, #0
   149e0:	mov	r0, #1
   149e4:	bl	14234 <__assert_fail@plt+0x1af0>
   149e8:	ands	fp, r7, #16
   149ec:	bne	14ca4 <__assert_fail@plt+0x2560>
   149f0:	ldr	r3, [r4, #20]
   149f4:	ldr	r9, [pc, #1132]	; 14e68 <__assert_fail@plt+0x2724>
   149f8:	add	r3, r9, r3, lsl #3
   149fc:	ldr	r3, [r3, #308]	; 0x134
   14a00:	cmp	r3, #0
   14a04:	beq	14d58 <__assert_fail@plt+0x2614>
   14a08:	ldrb	ip, [r8]
   14a0c:	str	r8, [sp, #16]
   14a10:	mov	r3, r8
   14a14:	cmp	ip, #0
   14a18:	bne	14a68 <__assert_fail@plt+0x2324>
   14a1c:	ldr	r3, [r4, #4]
   14a20:	tst	r3, #2
   14a24:	beq	14b9c <__assert_fail@plt+0x2458>
   14a28:	cmp	r6, #0
   14a2c:	beq	14b14 <__assert_fail@plt+0x23d0>
   14a30:	ldr	r3, [sp, #16]
   14a34:	mov	r0, r3
   14a38:	mov	r1, #44	; 0x2c
   14a3c:	bl	12408 <strchr@plt>
   14a40:	cmp	r0, #0
   14a44:	str	r0, [sp, #16]
   14a48:	beq	14b14 <__assert_fail@plt+0x23d0>
   14a4c:	add	r3, r0, #1
   14a50:	cmp	r3, #0
   14a54:	str	r3, [sp, #16]
   14a58:	beq	14b14 <__assert_fail@plt+0x23d0>
   14a5c:	ldrb	ip, [r0, #1]
   14a60:	cmp	ip, #0
   14a64:	beq	14b14 <__assert_fail@plt+0x23d0>
   14a68:	eor	r5, r6, #1
   14a6c:	and	r5, r5, #1
   14a70:	cmp	ip, #44	; 0x2c
   14a74:	movne	r2, #0
   14a78:	andeq	r2, r5, #1
   14a7c:	cmp	r2, #0
   14a80:	bne	14c74 <__assert_fail@plt+0x2530>
   14a84:	ldr	r1, [r4, #20]
   14a88:	add	r1, r9, r1, lsl #3
   14a8c:	ldr	r0, [r1, #308]	; 0x134
   14a90:	cmp	r0, #1
   14a94:	beq	14c08 <__assert_fail@plt+0x24c4>
   14a98:	cmp	r0, #2
   14a9c:	beq	14d00 <__assert_fail@plt+0x25bc>
   14aa0:	cmp	r0, #3
   14aa4:	bne	14a28 <__assert_fail@plt+0x22e4>
   14aa8:	mov	r0, r2
   14aac:	str	r2, [sp, #12]
   14ab0:	bl	125dc <gpg_err_set_errno@plt>
   14ab4:	add	r1, sp, #16
   14ab8:	ldr	r2, [sp, #12]
   14abc:	ldr	r0, [sp, #16]
   14ac0:	bl	123d8 <strtoul@plt>
   14ac4:	bl	1245c <__errno_location@plt>
   14ac8:	ldr	r1, [r0]
   14acc:	cmp	r1, #0
   14ad0:	bne	14d2c <__assert_fail@plt+0x25e8>
   14ad4:	ldr	r3, [sp, #16]
   14ad8:	ldrb	r3, [r3]
   14adc:	cmp	r3, #0
   14ae0:	beq	14a28 <__assert_fail@plt+0x22e4>
   14ae4:	cmp	r3, #44	; 0x2c
   14ae8:	moveq	r3, r6
   14aec:	orrne	r3, r6, #1
   14af0:	tst	r3, #1
   14af4:	beq	14b14 <__assert_fail@plt+0x23d0>
   14af8:	ldr	r3, [r4]
   14afc:	ldr	r2, [pc, #872]	; 14e6c <__assert_fail@plt+0x2728>
   14b00:	mov	r1, #0
   14b04:	mov	r0, #1
   14b08:	bl	14234 <__assert_fail@plt+0x1af0>
   14b0c:	cmp	r6, #0
   14b10:	bne	14a30 <__assert_fail@plt+0x22ec>
   14b14:	ldr	r3, [r4, #4]
   14b18:	ands	r5, r3, #8
   14b1c:	bne	14bf0 <__assert_fail@plt+0x24ac>
   14b20:	str	r7, [r4, #44]	; 0x2c
   14b24:	ldr	r2, [r4, #20]
   14b28:	add	r9, r9, r2, lsl #3
   14b2c:	ldr	r2, [r9, #308]	; 0x134
   14b30:	cmp	r2, #0
   14b34:	bne	14c50 <__assert_fail@plt+0x250c>
   14b38:	tst	r3, #4
   14b3c:	beq	14c50 <__assert_fail@plt+0x250c>
   14b40:	cmp	r5, #0
   14b44:	beq	14e4c <__assert_fail@plt+0x2708>
   14b48:	lsl	r6, r5, #1
   14b4c:	mov	r0, r6
   14b50:	bl	11fd0 <gcry_xmalloc@plt>
   14b54:	mov	r2, #49	; 0x31
   14b58:	subs	r3, r5, #1
   14b5c:	mov	ip, r0
   14b60:	str	r0, [r4, #48]	; 0x30
   14b64:	strb	r2, [ip], #1
   14b68:	beq	14b90 <__assert_fail@plt+0x244c>
   14b6c:	add	r0, r0, #3
   14b70:	mov	r1, #44	; 0x2c
   14b74:	subs	r3, r3, #1
   14b78:	strb	r1, [r0, #-2]
   14b7c:	strb	r2, [r0, #-1]
   14b80:	add	r0, r0, #2
   14b84:	bne	14b74 <__assert_fail@plt+0x2430>
   14b88:	sub	r6, r6, #2
   14b8c:	add	ip, ip, r6
   14b90:	mov	r3, #0
   14b94:	strb	r3, [ip]
   14b98:	b	14c5c <__assert_fail@plt+0x2518>
   14b9c:	ldr	r3, [r4]
   14ba0:	ldr	r2, [pc, #712]	; 14e70 <__assert_fail@plt+0x272c>
   14ba4:	mov	r1, fp
   14ba8:	mov	r0, #1
   14bac:	bl	14234 <__assert_fail@plt+0x1af0>
   14bb0:	ldr	r3, [sp, #16]
   14bb4:	ldrb	r2, [r3]
   14bb8:	cmp	r2, #44	; 0x2c
   14bbc:	bne	14a28 <__assert_fail@plt+0x22e4>
   14bc0:	cmp	r6, #0
   14bc4:	bne	14a34 <__assert_fail@plt+0x22f0>
   14bc8:	ldr	r3, [r4, #4]
   14bcc:	ands	r1, r3, #4
   14bd0:	bne	14b18 <__assert_fail@plt+0x23d4>
   14bd4:	ldr	r3, [r4]
   14bd8:	ldr	r2, [pc, #660]	; 14e74 <__assert_fail@plt+0x2730>
   14bdc:	mov	r0, #1
   14be0:	bl	14234 <__assert_fail@plt+0x1af0>
   14be4:	ldr	r3, [r4, #4]
   14be8:	ands	r5, r3, #8
   14bec:	beq	14b20 <__assert_fail@plt+0x23dc>
   14bf0:	ldr	r2, [r4, #24]
   14bf4:	ldr	r0, [sp, #8]
   14bf8:	mov	r1, #1
   14bfc:	mov	r5, fp
   14c00:	str	r1, [r0, r2, lsl #2]
   14c04:	b	14b20 <__assert_fail@plt+0x23dc>
   14c08:	cmp	ip, #34	; 0x22
   14c0c:	moveq	ip, #0
   14c10:	andne	ip, r5, #1
   14c14:	cmp	ip, #0
   14c18:	bne	14d40 <__assert_fail@plt+0x25fc>
   14c1c:	ldrb	r2, [r3, #1]
   14c20:	cmp	r2, #0
   14c24:	beq	14c38 <__assert_fail@plt+0x24f4>
   14c28:	cmp	r2, #44	; 0x2c
   14c2c:	bne	14a28 <__assert_fail@plt+0x22e4>
   14c30:	cmp	r5, #0
   14c34:	beq	14a34 <__assert_fail@plt+0x22f0>
   14c38:	ldr	r3, [r4]
   14c3c:	ldr	r2, [pc, #564]	; 14e78 <__assert_fail@plt+0x2734>
   14c40:	mov	r1, #0
   14c44:	mov	r0, #1
   14c48:	bl	14234 <__assert_fail@plt+0x1af0>
   14c4c:	b	14a28 <__assert_fail@plt+0x22e4>
   14c50:	mov	r0, r8
   14c54:	bl	12528 <gcry_xstrdup@plt>
   14c58:	str	r0, [r4, #48]	; 0x30
   14c5c:	ldr	r2, [sp, #20]
   14c60:	ldr	r3, [sl]
   14c64:	cmp	r2, r3
   14c68:	bne	14e48 <__assert_fail@plt+0x2704>
   14c6c:	add	sp, sp, #28
   14c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c74:	ldr	r3, [r4, #4]
   14c78:	ands	r1, r3, #2
   14c7c:	bne	14bcc <__assert_fail@plt+0x2488>
   14c80:	ldr	r3, [r4]
   14c84:	ldr	r2, [pc, #484]	; 14e70 <__assert_fail@plt+0x272c>
   14c88:	mov	r0, #1
   14c8c:	bl	14234 <__assert_fail@plt+0x1af0>
   14c90:	ldr	r3, [sp, #16]
   14c94:	ldrb	r3, [r3]
   14c98:	cmp	r3, #44	; 0x2c
   14c9c:	beq	14bc8 <__assert_fail@plt+0x2484>
   14ca0:	b	14b14 <__assert_fail@plt+0x23d0>
   14ca4:	ldrb	r3, [r8]
   14ca8:	cmp	r3, #0
   14cac:	ldreq	r3, [r4, #4]
   14cb0:	bne	14dbc <__assert_fail@plt+0x2678>
   14cb4:	tst	r3, #8
   14cb8:	ldrne	r3, [r4, #24]
   14cbc:	ldrne	r1, [sp, #8]
   14cc0:	movne	r2, #1
   14cc4:	strne	r2, [r1, r3, lsl #2]
   14cc8:	str	r7, [r4, #44]	; 0x2c
   14ccc:	b	14c5c <__assert_fail@plt+0x2518>
   14cd0:	ldr	r3, [r4, #24]
   14cd4:	ldr	ip, [pc, #396]	; 14e68 <__assert_fail@plt+0x2724>
   14cd8:	mov	r1, r0
   14cdc:	add	r2, r3, r3, lsl #1
   14ce0:	ldr	r3, [r4]
   14ce4:	add	r0, ip, r2, lsl #3
   14ce8:	ldr	r2, [pc, #396]	; 14e7c <__assert_fail@plt+0x2738>
   14cec:	ldr	ip, [r0, #96]	; 0x60
   14cf0:	mov	r0, #1
   14cf4:	str	ip, [sp]
   14cf8:	bl	14234 <__assert_fail@plt+0x1af0>
   14cfc:	b	149bc <__assert_fail@plt+0x2278>
   14d00:	mov	r0, r2
   14d04:	str	r2, [sp, #12]
   14d08:	bl	125dc <gpg_err_set_errno@plt>
   14d0c:	add	r1, sp, #16
   14d10:	ldr	r2, [sp, #12]
   14d14:	ldr	r0, [sp, #16]
   14d18:	bl	1206c <strtol@plt>
   14d1c:	bl	1245c <__errno_location@plt>
   14d20:	ldr	r1, [r0]
   14d24:	cmp	r1, #0
   14d28:	beq	14ad4 <__assert_fail@plt+0x2390>
   14d2c:	ldr	r3, [r4]
   14d30:	ldr	r2, [pc, #328]	; 14e80 <__assert_fail@plt+0x273c>
   14d34:	mov	r0, #1
   14d38:	bl	14234 <__assert_fail@plt+0x1af0>
   14d3c:	b	14ad4 <__assert_fail@plt+0x2390>
   14d40:	mov	r1, r2
   14d44:	ldr	r3, [r4]
   14d48:	ldr	r2, [pc, #308]	; 14e84 <__assert_fail@plt+0x2740>
   14d4c:	bl	14234 <__assert_fail@plt+0x1af0>
   14d50:	ldr	r3, [sp, #16]
   14d54:	b	14c1c <__assert_fail@plt+0x24d8>
   14d58:	mov	r0, fp
   14d5c:	bl	125dc <gpg_err_set_errno@plt>
   14d60:	mov	r2, fp
   14d64:	add	r1, sp, #16
   14d68:	mov	r0, r8
   14d6c:	bl	123d8 <strtoul@plt>
   14d70:	mov	fp, r0
   14d74:	bl	1245c <__errno_location@plt>
   14d78:	ldr	r1, [r0]
   14d7c:	cmp	r1, #0
   14d80:	bne	14e34 <__assert_fail@plt+0x26f0>
   14d84:	ldr	r3, [sp, #16]
   14d88:	ldrb	r3, [r3]
   14d8c:	cmp	r3, #0
   14d90:	bne	14e1c <__assert_fail@plt+0x26d8>
   14d94:	ldr	r3, [r4, #4]
   14d98:	ands	r1, r3, #4
   14d9c:	bne	14de0 <__assert_fail@plt+0x269c>
   14da0:	cmp	fp, #1
   14da4:	bne	14e04 <__assert_fail@plt+0x26c0>
   14da8:	tst	r3, #8
   14dac:	streq	r7, [r4, #44]	; 0x2c
   14db0:	moveq	r5, fp
   14db4:	beq	14b24 <__assert_fail@plt+0x23e0>
   14db8:	b	14bf0 <__assert_fail@plt+0x24ac>
   14dbc:	ldr	r2, [r4]
   14dc0:	mov	r3, r8
   14dc4:	str	r2, [sp]
   14dc8:	mov	r1, #0
   14dcc:	ldr	r2, [pc, #180]	; 14e88 <__assert_fail@plt+0x2744>
   14dd0:	mov	r0, #1
   14dd4:	bl	14234 <__assert_fail@plt+0x1af0>
   14dd8:	ldr	r3, [r4, #4]
   14ddc:	b	14cb4 <__assert_fail@plt+0x2570>
   14de0:	cmp	fp, #0
   14de4:	bne	14da8 <__assert_fail@plt+0x2664>
   14de8:	ldr	r3, [r4]
   14dec:	ldr	r2, [pc, #152]	; 14e8c <__assert_fail@plt+0x2748>
   14df0:	mov	r1, fp
   14df4:	mov	r0, #1
   14df8:	bl	14234 <__assert_fail@plt+0x1af0>
   14dfc:	ldr	r3, [r4, #4]
   14e00:	b	14da8 <__assert_fail@plt+0x2664>
   14e04:	ldr	r3, [r4]
   14e08:	ldr	r2, [pc, #128]	; 14e90 <__assert_fail@plt+0x274c>
   14e0c:	mov	r0, #1
   14e10:	bl	14234 <__assert_fail@plt+0x1af0>
   14e14:	ldr	r3, [r4, #4]
   14e18:	b	14da8 <__assert_fail@plt+0x2664>
   14e1c:	ldr	r3, [r4]
   14e20:	ldr	r2, [pc, #68]	; 14e6c <__assert_fail@plt+0x2728>
   14e24:	mov	r1, #0
   14e28:	mov	r0, #1
   14e2c:	bl	14234 <__assert_fail@plt+0x1af0>
   14e30:	b	14d94 <__assert_fail@plt+0x2650>
   14e34:	ldr	r3, [r4]
   14e38:	ldr	r2, [pc, #64]	; 14e80 <__assert_fail@plt+0x273c>
   14e3c:	mov	r0, #1
   14e40:	bl	14234 <__assert_fail@plt+0x1af0>
   14e44:	b	14d84 <__assert_fail@plt+0x2640>
   14e48:	bl	1218c <__stack_chk_fail@plt>
   14e4c:	ldr	r3, [pc, #64]	; 14e94 <__assert_fail@plt+0x2750>
   14e50:	ldr	r2, [pc, #64]	; 14e98 <__assert_fail@plt+0x2754>
   14e54:	ldr	r1, [pc, #64]	; 14e9c <__assert_fail@plt+0x2758>
   14e58:	ldr	r0, [pc, #64]	; 14ea0 <__assert_fail@plt+0x275c>
   14e5c:	bl	12744 <__assert_fail@plt>
   14e60:	andeq	sl, r3, r8, asr fp
   14e64:	andeq	r6, r2, r0, lsr #13
   14e68:	muleq	r2, r4, r0
   14e6c:	andeq	r6, r2, r8, lsl #14
   14e70:	andeq	r6, r2, r8, lsr #15
   14e74:	andeq	r6, r2, r8, asr #15
   14e78:	andeq	r6, r2, r0, lsr r8
   14e7c:	andeq	r6, r2, r8, ror r6
   14e80:	andeq	r6, r2, r8, ror #13
   14e84:	andeq	r6, r2, ip, ror #15
   14e88:			; <UNDEFINED> instruction: 0x000266bc
   14e8c:	andeq	r6, r2, ip, ror #14
   14e90:	andeq	r6, r2, r0, lsr r7
   14e94:	strdeq	r6, [r2], -r8
   14e98:	andeq	r0, r0, r7, ror #25
   14e9c:	andeq	r6, r2, r0, lsr #11
   14ea0:	andeq	r6, r2, r4, lsl #17
   14ea4:	ldr	r0, [pc]	; 14eac <__assert_fail@plt+0x2768>
   14ea8:	b	256ac <__assert_fail@plt+0x12f68>
   14eac:	andeq	r3, r1, r8, lsr #27
   14eb0:	push	{r4, r5, r6, r7, lr}
   14eb4:	sub	sp, sp, #44	; 0x2c
   14eb8:	ldr	r6, [pc, #320]	; 15000 <__assert_fail@plt+0x28bc>
   14ebc:	mov	r3, #0
   14ec0:	cmp	r0, #0
   14ec4:	ldr	r2, [r6]
   14ec8:	str	r3, [sp, #4]
   14ecc:	str	r2, [sp, #36]	; 0x24
   14ed0:	str	r3, [sp, #8]
   14ed4:	str	r3, [sp, #12]
   14ed8:	str	r3, [sp, #16]
   14edc:	str	r3, [sp, #20]
   14ee0:	str	r3, [sp, #24]
   14ee4:	str	r3, [sp, #28]
   14ee8:	str	r3, [sp, #32]
   14eec:	blt	14f94 <__assert_fail@plt+0x2850>
   14ef0:	cmp	r0, #5
   14ef4:	bgt	14fec <__assert_fail@plt+0x28a8>
   14ef8:	ldr	r3, [pc, #260]	; 15004 <__assert_fail@plt+0x28c0>
   14efc:	add	r3, r3, r0, lsl #4
   14f00:	ldr	r3, [r3, #12]
   14f04:	cmp	r3, #0
   14f08:	beq	14f44 <__assert_fail@plt+0x2800>
   14f0c:	ldr	r2, [r3]
   14f10:	cmp	r2, #0
   14f14:	beq	14f44 <__assert_fail@plt+0x2800>
   14f18:	mov	r1, #1
   14f1c:	b	14f2c <__assert_fail@plt+0x27e8>
   14f20:	ldr	r2, [r3]
   14f24:	cmp	r2, #0
   14f28:	beq	14f44 <__assert_fail@plt+0x2800>
   14f2c:	ldr	r2, [r3, #24]
   14f30:	add	r0, sp, #40	; 0x28
   14f34:	adds	r3, r3, #52	; 0x34
   14f38:	add	r2, r0, r2, lsl #2
   14f3c:	str	r1, [r2, #-36]	; 0xffffffdc
   14f40:	bne	14f20 <__assert_fail@plt+0x27dc>
   14f44:	ldr	r5, [pc, #188]	; 15008 <__assert_fail@plt+0x28c4>
   14f48:	add	r7, sp, #4
   14f4c:	add	r4, sp, #32
   14f50:	ldr	r3, [r4], #-4
   14f54:	cmp	r3, #0
   14f58:	beq	14f70 <__assert_fail@plt+0x282c>
   14f5c:	ldr	r3, [r5, #180]	; 0xb4
   14f60:	cmp	r3, #0
   14f64:	beq	14f70 <__assert_fail@plt+0x282c>
   14f68:	mov	r0, #1
   14f6c:	blx	r3
   14f70:	cmp	r4, r7
   14f74:	sub	r5, r5, #24
   14f78:	bne	14f50 <__assert_fail@plt+0x280c>
   14f7c:	ldr	r2, [sp, #36]	; 0x24
   14f80:	ldr	r3, [r6]
   14f84:	cmp	r2, r3
   14f88:	bne	14fe8 <__assert_fail@plt+0x28a4>
   14f8c:	add	sp, sp, #44	; 0x2c
   14f90:	pop	{r4, r5, r6, r7, pc}
   14f94:	ldr	r0, [pc, #112]	; 1500c <__assert_fail@plt+0x28c8>
   14f98:	ldr	r3, [pc, #112]	; 15010 <__assert_fail@plt+0x28cc>
   14f9c:	add	ip, r0, #96	; 0x60
   14fa0:	mov	r1, #1
   14fa4:	cmp	r3, #0
   14fa8:	bne	14fc8 <__assert_fail@plt+0x2884>
   14fac:	b	14fd4 <__assert_fail@plt+0x2890>
   14fb0:	ldr	r2, [r3, #24]
   14fb4:	add	lr, sp, #40	; 0x28
   14fb8:	adds	r3, r3, #52	; 0x34
   14fbc:	add	r2, lr, r2, lsl #2
   14fc0:	str	r1, [r2, #-36]	; 0xffffffdc
   14fc4:	beq	14fd4 <__assert_fail@plt+0x2890>
   14fc8:	ldr	r2, [r3]
   14fcc:	cmp	r2, #0
   14fd0:	bne	14fb0 <__assert_fail@plt+0x286c>
   14fd4:	add	r0, r0, #16
   14fd8:	cmp	ip, r0
   14fdc:	beq	14f44 <__assert_fail@plt+0x2800>
   14fe0:	ldr	r3, [r0, #-16]
   14fe4:	b	14fa4 <__assert_fail@plt+0x2860>
   14fe8:	bl	1218c <__stack_chk_fail@plt>
   14fec:	ldr	r3, [pc, #32]	; 15014 <__assert_fail@plt+0x28d0>
   14ff0:	ldr	r2, [pc, #32]	; 15018 <__assert_fail@plt+0x28d4>
   14ff4:	ldr	r1, [pc, #32]	; 1501c <__assert_fail@plt+0x28d8>
   14ff8:	ldr	r0, [pc, #32]	; 15020 <__assert_fail@plt+0x28dc>
   14ffc:	bl	12744 <__assert_fail@plt>
   15000:	andeq	sl, r3, r8, asr fp
   15004:	muleq	r2, r4, r0
   15008:	strdeq	r6, [r2], -r4
   1500c:	strheq	r6, [r2], -r0
   15010:	andeq	fp, r3, ip, lsl r2
   15014:	andeq	r6, r2, ip, lsl #6
   15018:	andeq	r0, r0, r3, asr r5
   1501c:	andeq	r6, r2, r0, lsr #11
   15020:	muleq	r2, r8, r8
   15024:	push	{r4, r5, r6, r7, lr}
   15028:	sub	sp, sp, #44	; 0x2c
   1502c:	ldr	r6, [pc, #320]	; 15174 <__assert_fail@plt+0x2a30>
   15030:	mov	r3, #0
   15034:	cmp	r0, #0
   15038:	ldr	r2, [r6]
   1503c:	str	r3, [sp, #4]
   15040:	str	r2, [sp, #36]	; 0x24
   15044:	str	r3, [sp, #8]
   15048:	str	r3, [sp, #12]
   1504c:	str	r3, [sp, #16]
   15050:	str	r3, [sp, #20]
   15054:	str	r3, [sp, #24]
   15058:	str	r3, [sp, #28]
   1505c:	str	r3, [sp, #32]
   15060:	blt	15108 <__assert_fail@plt+0x29c4>
   15064:	cmp	r0, #5
   15068:	bgt	15160 <__assert_fail@plt+0x2a1c>
   1506c:	ldr	r3, [pc, #260]	; 15178 <__assert_fail@plt+0x2a34>
   15070:	add	r3, r3, r0, lsl #4
   15074:	ldr	r3, [r3, #12]
   15078:	cmp	r3, #0
   1507c:	beq	150b8 <__assert_fail@plt+0x2974>
   15080:	ldr	r2, [r3]
   15084:	cmp	r2, #0
   15088:	beq	150b8 <__assert_fail@plt+0x2974>
   1508c:	mov	r1, #1
   15090:	b	150a0 <__assert_fail@plt+0x295c>
   15094:	ldr	r2, [r3]
   15098:	cmp	r2, #0
   1509c:	beq	150b8 <__assert_fail@plt+0x2974>
   150a0:	ldr	r2, [r3, #24]
   150a4:	add	r0, sp, #40	; 0x28
   150a8:	adds	r3, r3, #52	; 0x34
   150ac:	add	r2, r0, r2, lsl #2
   150b0:	str	r1, [r2, #-36]	; 0xffffffdc
   150b4:	bne	15094 <__assert_fail@plt+0x2950>
   150b8:	ldr	r5, [pc, #188]	; 1517c <__assert_fail@plt+0x2a38>
   150bc:	add	r4, sp, #4
   150c0:	add	r7, sp, #36	; 0x24
   150c4:	ldr	r3, [r4], #4
   150c8:	cmp	r3, #0
   150cc:	beq	150e4 <__assert_fail@plt+0x29a0>
   150d0:	ldr	r3, [r5, #12]
   150d4:	cmp	r3, #0
   150d8:	beq	150e4 <__assert_fail@plt+0x29a0>
   150dc:	mov	r0, #0
   150e0:	blx	r3
   150e4:	cmp	r4, r7
   150e8:	add	r5, r5, #24
   150ec:	bne	150c4 <__assert_fail@plt+0x2980>
   150f0:	ldr	r2, [sp, #36]	; 0x24
   150f4:	ldr	r3, [r6]
   150f8:	cmp	r2, r3
   150fc:	bne	1515c <__assert_fail@plt+0x2a18>
   15100:	add	sp, sp, #44	; 0x2c
   15104:	pop	{r4, r5, r6, r7, pc}
   15108:	ldr	r0, [pc, #112]	; 15180 <__assert_fail@plt+0x2a3c>
   1510c:	ldr	r3, [pc, #112]	; 15184 <__assert_fail@plt+0x2a40>
   15110:	add	ip, r0, #96	; 0x60
   15114:	mov	r1, #1
   15118:	cmp	r3, #0
   1511c:	bne	1513c <__assert_fail@plt+0x29f8>
   15120:	b	15148 <__assert_fail@plt+0x2a04>
   15124:	ldr	r2, [r3, #24]
   15128:	add	lr, sp, #40	; 0x28
   1512c:	adds	r3, r3, #52	; 0x34
   15130:	add	r2, lr, r2, lsl #2
   15134:	str	r1, [r2, #-36]	; 0xffffffdc
   15138:	beq	15148 <__assert_fail@plt+0x2a04>
   1513c:	ldr	r2, [r3]
   15140:	cmp	r2, #0
   15144:	bne	15124 <__assert_fail@plt+0x29e0>
   15148:	add	r0, r0, #16
   1514c:	cmp	ip, r0
   15150:	beq	150b8 <__assert_fail@plt+0x2974>
   15154:	ldr	r3, [r0, #-16]
   15158:	b	15118 <__assert_fail@plt+0x29d4>
   1515c:	bl	1218c <__stack_chk_fail@plt>
   15160:	ldr	r3, [pc, #32]	; 15188 <__assert_fail@plt+0x2a44>
   15164:	ldr	r2, [pc, #32]	; 1518c <__assert_fail@plt+0x2a48>
   15168:	ldr	r1, [pc, #32]	; 15190 <__assert_fail@plt+0x2a4c>
   1516c:	ldr	r0, [pc, #32]	; 15194 <__assert_fail@plt+0x2a50>
   15170:	bl	12744 <__assert_fail@plt>
   15174:	andeq	sl, r3, r8, asr fp
   15178:	muleq	r2, r4, r0
   1517c:	strdeq	r6, [r2], -r4
   15180:	strheq	r6, [r2], -r0
   15184:	andeq	fp, r3, ip, lsl r2
   15188:	andeq	r6, r2, r0, lsr #6
   1518c:	andeq	r0, r0, r9, ror r5
   15190:	andeq	r6, r2, r0, lsr #11
   15194:	muleq	r2, r8, r8
   15198:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1519c:	mov	r5, r0
   151a0:	bl	123e4 <strlen@plt>
   151a4:	ldr	r7, [pc, #288]	; 152cc <__assert_fail@plt+0x2b88>
   151a8:	ldr	r3, [r7, #16]
   151ac:	ldr	r4, [r7, #12]
   151b0:	add	r0, r0, r0, lsl #1
   151b4:	add	r6, r0, #1
   151b8:	cmp	r3, r6
   151bc:	blt	15284 <__assert_fail@plt+0x2b40>
   151c0:	ldrb	r3, [r5]
   151c4:	cmp	r3, #0
   151c8:	beq	152ac <__assert_fail@plt+0x2b68>
   151cc:	mov	r0, #37	; 0x25
   151d0:	mov	r9, #48	; 0x30
   151d4:	mov	lr, #97	; 0x61
   151d8:	mov	r1, #50	; 0x32
   151dc:	mov	r8, #99	; 0x63
   151e0:	mov	r6, #51	; 0x33
   151e4:	mov	ip, #53	; 0x35
   151e8:	b	15228 <__assert_fail@plt+0x2ae4>
   151ec:	cmp	r3, #58	; 0x3a
   151f0:	beq	1525c <__assert_fail@plt+0x2b18>
   151f4:	cmp	r3, #44	; 0x2c
   151f8:	mov	r2, r4
   151fc:	beq	15270 <__assert_fail@plt+0x2b2c>
   15200:	cmp	r3, #10
   15204:	strbeq	r0, [r4]
   15208:	strbeq	r9, [r4, #1]
   1520c:	strbeq	lr, [r4, #2]
   15210:	strbne	r3, [r2], #1
   15214:	addeq	r4, r4, #3
   15218:	movne	r4, r2
   1521c:	ldrb	r3, [r5, #1]!
   15220:	cmp	r3, #0
   15224:	beq	1524c <__assert_fail@plt+0x2b08>
   15228:	cmp	r3, #37	; 0x25
   1522c:	bne	151ec <__assert_fail@plt+0x2aa8>
   15230:	strb	r3, [r4]
   15234:	strb	r1, [r4, #1]
   15238:	strb	ip, [r4, #2]
   1523c:	ldrb	r3, [r5, #1]!
   15240:	add	r4, r4, #3
   15244:	cmp	r3, #0
   15248:	bne	15228 <__assert_fail@plt+0x2ae4>
   1524c:	ldr	r0, [r7, #12]
   15250:	mov	r3, #0
   15254:	strb	r3, [r4]
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1525c:	strb	r0, [r4]
   15260:	strb	r6, [r4, #1]
   15264:	strb	lr, [r4, #2]
   15268:	add	r4, r4, #3
   1526c:	b	1521c <__assert_fail@plt+0x2ad8>
   15270:	strb	r0, [r4]
   15274:	strb	r1, [r4, #1]
   15278:	strb	r8, [r4, #2]
   1527c:	add	r4, r4, #3
   15280:	b	1521c <__assert_fail@plt+0x2ad8>
   15284:	mov	r0, r4
   15288:	mov	r1, r6
   1528c:	bl	121e0 <realloc@plt>
   15290:	subs	r4, r0, #0
   15294:	beq	152b4 <__assert_fail@plt+0x2b70>
   15298:	ldrb	r3, [r5]
   1529c:	str	r4, [r7, #12]
   152a0:	str	r6, [r7, #16]
   152a4:	cmp	r3, #0
   152a8:	bne	151cc <__assert_fail@plt+0x2a88>
   152ac:	mov	r0, r4
   152b0:	b	15250 <__assert_fail@plt+0x2b0c>
   152b4:	bl	1245c <__errno_location@plt>
   152b8:	ldr	r2, [pc, #16]	; 152d0 <__assert_fail@plt+0x2b8c>
   152bc:	ldr	r1, [r0]
   152c0:	mov	r0, #1
   152c4:	bl	14234 <__assert_fail@plt+0x1af0>
   152c8:	b	15298 <__assert_fail@plt+0x2b54>
   152cc:	andeq	sp, r3, r0, lsr #6
   152d0:			; <UNDEFINED> instruction: 0x000268b4
   152d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d8:	mov	r5, r0
   152dc:	ldr	r7, [r0, #16]
   152e0:	mov	r4, r1
   152e4:	cmp	r7, #0
   152e8:	beq	15308 <__assert_fail@plt+0x2bc4>
   152ec:	mov	r1, r7
   152f0:	ldr	r0, [r0, #12]
   152f4:	bl	13dfc <__assert_fail@plt+0x16b8>
   152f8:	ldrb	r1, [r0]
   152fc:	mov	r7, r0
   15300:	cmp	r1, #124	; 0x7c
   15304:	beq	15574 <__assert_fail@plt+0x2e30>
   15308:	mov	sl, #0
   1530c:	ldr	r8, [pc, #696]	; 155cc <__assert_fail@plt+0x2e88>
   15310:	ldr	r2, [r5]
   15314:	ldr	r1, [pc, #692]	; 155d0 <__assert_fail@plt+0x2e8c>
   15318:	mov	r0, r4
   1531c:	bl	12678 <gpgrt_fprintf@plt>
   15320:	ldr	r2, [r5, #4]
   15324:	ldr	r1, [pc, #680]	; 155d4 <__assert_fail@plt+0x2e90>
   15328:	mov	r0, r4
   1532c:	bl	12678 <gpgrt_fprintf@plt>
   15330:	ldr	r3, [r8]
   15334:	cmp	r3, #0
   15338:	bne	154ac <__assert_fail@plt+0x2d68>
   1533c:	ldr	r2, [r5, #8]
   15340:	ldr	r1, [pc, #656]	; 155d8 <__assert_fail@plt+0x2e94>
   15344:	mov	r0, r4
   15348:	bl	12678 <gpgrt_fprintf@plt>
   1534c:	ldr	r3, [r8]
   15350:	cmp	r3, #0
   15354:	bne	15538 <__assert_fail@plt+0x2df4>
   15358:	ldr	r6, [pc, #636]	; 155dc <__assert_fail@plt+0x2e98>
   1535c:	cmp	r7, #0
   15360:	beq	154a4 <__assert_fail@plt+0x2d60>
   15364:	mov	r0, r7
   15368:	bl	15198 <__assert_fail@plt+0x2a54>
   1536c:	mov	r2, r0
   15370:	ldr	r1, [pc, #616]	; 155e0 <__assert_fail@plt+0x2e9c>
   15374:	mov	r0, r4
   15378:	bl	12678 <gpgrt_fprintf@plt>
   1537c:	ldr	r2, [r5, #20]
   15380:	ldr	r1, [pc, #592]	; 155d8 <__assert_fail@plt+0x2e94>
   15384:	mov	r0, r4
   15388:	bl	12678 <gpgrt_fprintf@plt>
   1538c:	ldr	r3, [r8]
   15390:	cmp	r3, #0
   15394:	bne	15558 <__assert_fail@plt+0x2e14>
   15398:	ldr	r3, [r5, #20]
   1539c:	ldr	r1, [pc, #564]	; 155d8 <__assert_fail@plt+0x2e94>
   153a0:	mov	r0, r4
   153a4:	add	r3, r6, r3, lsl #3
   153a8:	ldr	r2, [r3, #308]	; 0x134
   153ac:	bl	12678 <gpgrt_fprintf@plt>
   153b0:	ldr	r3, [r8]
   153b4:	cmp	r3, #0
   153b8:	bne	15514 <__assert_fail@plt+0x2dd0>
   153bc:	cmp	sl, #0
   153c0:	beq	1549c <__assert_fail@plt+0x2d58>
   153c4:	mov	r0, sl
   153c8:	bl	15198 <__assert_fail@plt+0x2a54>
   153cc:	mov	r2, r0
   153d0:	ldr	r1, [pc, #520]	; 155e0 <__assert_fail@plt+0x2e9c>
   153d4:	mov	r0, r4
   153d8:	bl	12678 <gpgrt_fprintf@plt>
   153dc:	mov	r0, sl
   153e0:	bl	12150 <gcry_free@plt>
   153e4:	ldr	r2, [r5, #32]
   153e8:	ldr	r7, [pc, #500]	; 155e4 <__assert_fail@plt+0x2ea0>
   153ec:	cmp	r2, #0
   153f0:	moveq	r2, r7
   153f4:	ldr	r1, [pc, #484]	; 155e0 <__assert_fail@plt+0x2e9c>
   153f8:	mov	r0, r4
   153fc:	bl	12678 <gpgrt_fprintf@plt>
   15400:	ldr	r2, [r5, #36]	; 0x24
   15404:	ldr	r1, [pc, #468]	; 155e0 <__assert_fail@plt+0x2e9c>
   15408:	cmp	r2, #0
   1540c:	moveq	r2, r7
   15410:	mov	r0, r4
   15414:	bl	12678 <gpgrt_fprintf@plt>
   15418:	ldr	r3, [r5, #20]
   1541c:	add	r6, r6, r3, lsl #3
   15420:	ldr	r3, [r6, #308]	; 0x134
   15424:	cmp	r3, #0
   15428:	beq	15458 <__assert_fail@plt+0x2d14>
   1542c:	ldr	r2, [r5, #40]	; 0x28
   15430:	ldr	r3, [pc, #428]	; 155e4 <__assert_fail@plt+0x2ea0>
   15434:	cmp	r2, #0
   15438:	moveq	r2, r3
   1543c:	ldr	r1, [pc, #412]	; 155e0 <__assert_fail@plt+0x2e9c>
   15440:	mov	r0, r4
   15444:	bl	12678 <gpgrt_fprintf@plt>
   15448:	mov	r1, r4
   1544c:	mov	r0, #10
   15450:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15454:	b	122a0 <gpgrt_fputc@plt>
   15458:	ldr	r3, [r5, #4]
   1545c:	ldr	r2, [r5, #40]	; 0x28
   15460:	tst	r3, #4
   15464:	beq	15430 <__assert_fail@plt+0x2cec>
   15468:	cmp	r2, #0
   1546c:	beq	155b4 <__assert_fail@plt+0x2e70>
   15470:	mov	r0, r2
   15474:	bl	123e4 <strlen@plt>
   15478:	ldr	r1, [pc, #344]	; 155d8 <__assert_fail@plt+0x2e94>
   1547c:	add	r2, r0, #1
   15480:	mov	r0, r4
   15484:	lsr	r2, r2, #1
   15488:	bl	12678 <gpgrt_fprintf@plt>
   1548c:	mov	r1, r4
   15490:	mov	r0, #10
   15494:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15498:	b	122a0 <gpgrt_fputc@plt>
   1549c:	ldr	r2, [pc, #320]	; 155e4 <__assert_fail@plt+0x2ea0>
   154a0:	b	153d0 <__assert_fail@plt+0x2c8c>
   154a4:	ldr	r2, [pc, #312]	; 155e4 <__assert_fail@plt+0x2ea0>
   154a8:	b	15370 <__assert_fail@plt+0x2c2c>
   154ac:	mov	r1, r4
   154b0:	mov	r0, #32
   154b4:	bl	122a0 <gpgrt_fputc@plt>
   154b8:	ldr	r6, [r5, #4]
   154bc:	cmp	r6, #0
   154c0:	beq	155bc <__assert_fail@plt+0x2e78>
   154c4:	ldr	r9, [pc, #284]	; 155e8 <__assert_fail@plt+0x2ea4>
   154c8:	ldr	fp, [pc, #256]	; 155d0 <__assert_fail@plt+0x2e8c>
   154cc:	mov	r3, #1
   154d0:	b	154f4 <__assert_fail@plt+0x2db0>
   154d4:	ldr	r2, [r9]
   154d8:	mov	r1, fp
   154dc:	mov	r0, r4
   154e0:	bl	12678 <gpgrt_fprintf@plt>
   154e4:	mov	r3, #0
   154e8:	lsrs	r6, r6, #1
   154ec:	add	r9, r9, #4
   154f0:	beq	1533c <__assert_fail@plt+0x2bf8>
   154f4:	tst	r6, #1
   154f8:	beq	154e8 <__assert_fail@plt+0x2da4>
   154fc:	cmp	r3, #0
   15500:	bne	154d4 <__assert_fail@plt+0x2d90>
   15504:	mov	r1, r4
   15508:	mov	r0, #44	; 0x2c
   1550c:	bl	122a0 <gpgrt_fputc@plt>
   15510:	b	154d4 <__assert_fail@plt+0x2d90>
   15514:	ldr	r3, [r5, #20]
   15518:	ldr	r1, [pc, #204]	; 155ec <__assert_fail@plt+0x2ea8>
   1551c:	mov	r0, r4
   15520:	add	r3, r6, r3, lsl #3
   15524:	ldr	r3, [r3, #308]	; 0x134
   15528:	add	r3, r6, r3, lsl #3
   1552c:	ldr	r2, [r3, #312]	; 0x138
   15530:	bl	12678 <gpgrt_fprintf@plt>
   15534:	b	153bc <__assert_fail@plt+0x2c78>
   15538:	ldr	r3, [r5, #8]
   1553c:	ldr	r6, [pc, #152]	; 155dc <__assert_fail@plt+0x2e98>
   15540:	ldr	r1, [pc, #164]	; 155ec <__assert_fail@plt+0x2ea8>
   15544:	add	r3, r6, r3, lsl #2
   15548:	mov	r0, r4
   1554c:	ldr	r2, [r3, #704]	; 0x2c0
   15550:	bl	12678 <gpgrt_fprintf@plt>
   15554:	b	1535c <__assert_fail@plt+0x2c18>
   15558:	ldr	r3, [r5, #20]
   1555c:	ldr	r1, [pc, #136]	; 155ec <__assert_fail@plt+0x2ea8>
   15560:	mov	r0, r4
   15564:	add	r3, r6, r3, lsl #3
   15568:	ldr	r2, [r3, #312]	; 0x138
   1556c:	bl	12678 <gpgrt_fprintf@plt>
   15570:	b	15398 <__assert_fail@plt+0x2c54>
   15574:	add	r6, r0, #1
   15578:	mov	r0, r6
   1557c:	bl	12408 <strchr@plt>
   15580:	subs	sl, r0, #0
   15584:	beq	1530c <__assert_fail@plt+0x2bc8>
   15588:	sub	r8, sl, r6
   1558c:	add	r0, r8, #1
   15590:	bl	11fd0 <gcry_xmalloc@plt>
   15594:	mov	r2, r8
   15598:	mov	r1, r6
   1559c:	bl	1212c <memcpy@plt>
   155a0:	mov	r2, #0
   155a4:	add	r7, sl, #1
   155a8:	strb	r2, [r0, r8]
   155ac:	mov	sl, r0
   155b0:	b	1530c <__assert_fail@plt+0x2bc8>
   155b4:	mov	r2, r7
   155b8:	b	1543c <__assert_fail@plt+0x2cf8>
   155bc:	ldr	r1, [pc, #44]	; 155f0 <__assert_fail@plt+0x2eac>
   155c0:	mov	r0, r4
   155c4:	bl	12678 <gpgrt_fprintf@plt>
   155c8:	b	1533c <__assert_fail@plt+0x2bf8>
   155cc:	muleq	r3, r4, r5
   155d0:	andeq	r6, r2, r8, lsl #20
   155d4:	andeq	r6, r2, ip, asr #17
   155d8:	ldrdeq	r6, [r2], -ip
   155dc:	muleq	r2, r4, r0
   155e0:	andeq	r9, r2, ip, ror pc
   155e4:	andeq	r6, r2, r4, ror #29
   155e8:	andeq	r6, r2, r4, lsr r3
   155ec:			; <UNDEFINED> instruction: 0x00025bb4
   155f0:	ldrdeq	r6, [r2], -r4
   155f4:	ldr	r2, [pc, #356]	; 15760 <__assert_fail@plt+0x301c>
   155f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155fc:	sub	sp, sp, #44	; 0x2c
   15600:	ldr	r6, [pc, #348]	; 15764 <__assert_fail@plt+0x3020>
   15604:	ldr	r2, [r2]
   15608:	ldr	r3, [pc, #344]	; 15768 <__assert_fail@plt+0x3024>
   1560c:	ldr	sl, [pc, #344]	; 1576c <__assert_fail@plt+0x3028>
   15610:	ldr	r9, [pc, #344]	; 15770 <__assert_fail@plt+0x302c>
   15614:	mov	r7, r0
   15618:	mov	r4, r6
   1561c:	add	r5, r6, #96	; 0x60
   15620:	str	r2, [sp, #36]	; 0x24
   15624:	b	15638 <__assert_fail@plt+0x2ef4>
   15628:	add	r4, r4, #16
   1562c:	cmp	r4, r5
   15630:	beq	15718 <__assert_fail@plt+0x2fd4>
   15634:	ldr	r3, [r4, #12]
   15638:	cmp	r3, #0
   1563c:	beq	15628 <__assert_fail@plt+0x2ee4>
   15640:	add	r3, r3, #52	; 0x34
   15644:	mov	ip, #1
   15648:	mov	r2, #0
   1564c:	str	r2, [sp, #4]
   15650:	str	r2, [sp, #8]
   15654:	str	r2, [sp, #12]
   15658:	str	r2, [sp, #16]
   1565c:	str	r2, [sp, #20]
   15660:	str	r2, [sp, #24]
   15664:	str	r2, [sp, #28]
   15668:	str	r2, [sp, #32]
   1566c:	ldr	r2, [r3, #-52]	; 0xffffffcc
   15670:	cmp	r2, #0
   15674:	beq	15740 <__assert_fail@plt+0x2ffc>
   15678:	ldr	r2, [r3, #-48]	; 0xffffffd0
   1567c:	tst	r2, #1
   15680:	bne	15734 <__assert_fail@plt+0x2ff0>
   15684:	ldr	r2, [r3, #-28]	; 0xffffffe4
   15688:	add	r1, sp, #40	; 0x28
   1568c:	add	r1, r1, r2, lsl #2
   15690:	ldr	r0, [r1, #-36]	; 0xffffffdc
   15694:	cmp	r0, #0
   15698:	bne	15734 <__assert_fail@plt+0x2ff0>
   1569c:	cmp	r2, #0
   156a0:	str	ip, [r1, #-36]	; 0xffffffdc
   156a4:	beq	15748 <__assert_fail@plt+0x3004>
   156a8:	add	r2, r2, r2, lsl #1
   156ac:	add	r2, r6, r2, lsl #3
   156b0:	ldr	r1, [r2, #100]	; 0x64
   156b4:	ldrb	r0, [r2, #104]	; 0x68
   156b8:	cmp	r1, #0
   156bc:	beq	156c8 <__assert_fail@plt+0x2f84>
   156c0:	cmp	r0, #0
   156c4:	beq	15734 <__assert_fail@plt+0x2ff0>
   156c8:	bl	2057c <__assert_fail@plt+0xde38>
   156cc:	mov	fp, r0
   156d0:	ldrd	r0, [r4, #4]
   156d4:	bl	13dfc <__assert_fail@plt+0x16b8>
   156d8:	ldr	r8, [r4]
   156dc:	bl	15198 <__assert_fail@plt+0x2a54>
   156e0:	mov	r2, r8
   156e4:	mov	r1, sl
   156e8:	add	r4, r4, #16
   156ec:	mov	r3, r0
   156f0:	mov	r0, r7
   156f4:	bl	12678 <gpgrt_fprintf@plt>
   156f8:	mov	r0, fp
   156fc:	bl	15198 <__assert_fail@plt+0x2a54>
   15700:	mov	r1, r9
   15704:	mov	r2, r0
   15708:	mov	r0, r7
   1570c:	bl	12678 <gpgrt_fprintf@plt>
   15710:	cmp	r4, r5
   15714:	bne	15634 <__assert_fail@plt+0x2ef0>
   15718:	ldr	r3, [pc, #64]	; 15760 <__assert_fail@plt+0x301c>
   1571c:	ldr	r2, [sp, #36]	; 0x24
   15720:	ldr	r3, [r3]
   15724:	cmp	r2, r3
   15728:	bne	1575c <__assert_fail@plt+0x3018>
   1572c:	add	sp, sp, #44	; 0x2c
   15730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15734:	cmp	r3, #0
   15738:	add	r3, r3, #52	; 0x34
   1573c:	bne	1566c <__assert_fail@plt+0x2f28>
   15740:	ldr	fp, [pc, #44]	; 15774 <__assert_fail@plt+0x3030>
   15744:	b	156d0 <__assert_fail@plt+0x2f8c>
   15748:	ldr	r3, [pc, #40]	; 15778 <__assert_fail@plt+0x3034>
   1574c:	ldr	r2, [pc, #40]	; 1577c <__assert_fail@plt+0x3038>
   15750:	ldr	r1, [pc, #40]	; 15780 <__assert_fail@plt+0x303c>
   15754:	ldr	r0, [pc, #40]	; 15784 <__assert_fail@plt+0x3040>
   15758:	bl	12744 <__assert_fail@plt>
   1575c:	bl	1218c <__stack_chk_fail@plt>
   15760:	andeq	sl, r3, r8, asr fp
   15764:	muleq	r2, r4, r0
   15768:	andeq	fp, r3, ip, lsl r2
   1576c:	strdeq	r6, [r2], -ip
   15770:	muleq	r2, r8, r9
   15774:	andeq	r6, r2, r4, ror #29
   15778:	andeq	r6, r2, r8, ror #6
   1577c:	andeq	r0, r0, r9, asr #12
   15780:	andeq	r6, r2, r0, lsr #11
   15784:	andeq	r6, r2, r0, ror #17
   15788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1578c:	lsl	r8, r0, #4
   15790:	ldr	r7, [pc, #844]	; 15ae4 <__assert_fail@plt+0x33a0>
   15794:	ldr	sl, [pc, #844]	; 15ae8 <__assert_fail@plt+0x33a4>
   15798:	add	r3, r7, r8
   1579c:	sub	sp, sp, #100	; 0x64
   157a0:	ldr	r3, [r3, #12]
   157a4:	mov	r9, r0
   157a8:	ldr	r0, [sl]
   157ac:	mov	r5, r1
   157b0:	cmp	r3, #0
   157b4:	mov	r1, #0
   157b8:	str	r0, [sp, #92]	; 0x5c
   157bc:	str	r1, [sp, #60]	; 0x3c
   157c0:	str	r1, [sp, #64]	; 0x40
   157c4:	str	r1, [sp, #68]	; 0x44
   157c8:	str	r1, [sp, #72]	; 0x48
   157cc:	str	r1, [sp, #76]	; 0x4c
   157d0:	str	r1, [sp, #80]	; 0x50
   157d4:	str	r1, [sp, #84]	; 0x54
   157d8:	str	r1, [sp, #88]	; 0x58
   157dc:	beq	15a48 <__assert_fail@plt+0x3304>
   157e0:	mov	r4, r2
   157e4:	ldr	r2, [r3]
   157e8:	cmp	r2, r1
   157ec:	beq	15a48 <__assert_fail@plt+0x3304>
   157f0:	mov	ip, #1
   157f4:	ldr	r2, [r3, #4]
   157f8:	tst	r2, #1
   157fc:	bne	15a34 <__assert_fail@plt+0x32f0>
   15800:	ldr	r1, [r3, #24]
   15804:	add	r2, sp, #96	; 0x60
   15808:	add	r2, r2, r1, lsl #2
   1580c:	ldr	r6, [r2, #-36]	; 0xffffffdc
   15810:	cmp	r6, #0
   15814:	bne	15a34 <__assert_fail@plt+0x32f0>
   15818:	cmp	r1, #0
   1581c:	str	ip, [r2, #-36]	; 0xffffffdc
   15820:	beq	15acc <__assert_fail@plt+0x3388>
   15824:	add	r1, r1, r1, lsl #1
   15828:	add	r1, r7, r1, lsl #3
   1582c:	ldr	r2, [r1, #100]	; 0x64
   15830:	cmp	r2, #0
   15834:	beq	15a34 <__assert_fail@plt+0x32f0>
   15838:	ldrb	r0, [r1, #104]	; 0x68
   1583c:	cmp	r0, #0
   15840:	beq	15a34 <__assert_fail@plt+0x32f0>
   15844:	ldr	r3, [r3]
   15848:	cmp	r3, #0
   1584c:	beq	15a48 <__assert_fail@plt+0x3304>
   15850:	bl	2057c <__assert_fail@plt+0xde38>
   15854:	cmp	r4, #0
   15858:	movne	ip, #3
   1585c:	ldrne	r3, [pc, #648]	; 15aec <__assert_fail@plt+0x33a8>
   15860:	movne	r1, #2
   15864:	moveq	r1, r6
   15868:	moveq	ip, #1
   1586c:	add	r2, sp, #96	; 0x60
   15870:	strne	r4, [sp, #48]	; 0x30
   15874:	mov	r4, #0
   15878:	str	r4, [sp, #8]
   1587c:	str	r4, [sp, #4]
   15880:	str	r4, [sp]
   15884:	strne	r3, [sp, #44]	; 0x2c
   15888:	ldr	r3, [pc, #608]	; 15af0 <__assert_fail@plt+0x33ac>
   1588c:	add	r1, r2, r1, lsl #2
   15890:	add	ip, r2, ip, lsl #2
   15894:	cmp	r9, #5
   15898:	mov	fp, r0
   1589c:	ldr	r0, [pc, #592]	; 15af4 <__assert_fail@plt+0x33b0>
   158a0:	add	r2, sp, #32
   158a4:	movne	r0, r3
   158a8:	add	r3, sp, #40	; 0x28
   158ac:	str	r2, [sp, #16]
   158b0:	str	r3, [sp, #12]
   158b4:	mov	r2, r4
   158b8:	str	r0, [r1, #-52]	; 0xffffffcc
   158bc:	mov	r3, r4
   158c0:	add	r1, sp, #44	; 0x2c
   158c4:	mov	r0, fp
   158c8:	str	r4, [ip, #-52]	; 0xffffffcc
   158cc:	bl	231ec <__assert_fail@plt+0x10aa8>
   158d0:	cmp	r0, r4
   158d4:	movne	r6, #3
   158d8:	strne	r6, [sp, #28]
   158dc:	beq	15a50 <__assert_fail@plt+0x330c>
   158e0:	cmp	r5, #0
   158e4:	beq	159fc <__assert_fail@plt+0x32b8>
   158e8:	add	r8, r7, r8
   158ec:	ldrd	r0, [r8, #4]
   158f0:	bl	13dfc <__assert_fail@plt+0x16b8>
   158f4:	ldr	r7, [r7, r9, lsl #4]
   158f8:	bl	15198 <__assert_fail@plt+0x2a54>
   158fc:	mov	r2, r7
   15900:	ldr	r1, [pc, #496]	; 15af8 <__assert_fail@plt+0x33b4>
   15904:	mov	r3, r0
   15908:	mov	r0, r5
   1590c:	bl	12678 <gpgrt_fprintf@plt>
   15910:	mov	r0, fp
   15914:	bl	15198 <__assert_fail@plt+0x2a54>
   15918:	mov	r1, r5
   1591c:	bl	1254c <gpgrt_fputs@plt>
   15920:	ldr	r2, [sp, #28]
   15924:	ldr	r1, [pc, #464]	; 15afc <__assert_fail@plt+0x33b8>
   15928:	mov	r0, r5
   1592c:	lsr	r3, r2, #1
   15930:	eor	r3, r3, #1
   15934:	mvn	r2, r2
   15938:	and	r3, r3, #1
   1593c:	and	r2, r2, #1
   15940:	bl	12678 <gpgrt_fprintf@plt>
   15944:	cmp	r4, #0
   15948:	beq	159f0 <__assert_fail@plt+0x32ac>
   1594c:	ldr	r9, [pc, #428]	; 15b00 <__assert_fail@plt+0x33bc>
   15950:	ldr	r8, [pc, #428]	; 15b04 <__assert_fail@plt+0x33c0>
   15954:	mov	r7, r4
   15958:	ldr	r0, [r7, #4]
   1595c:	cmp	r0, #0
   15960:	beq	15970 <__assert_fail@plt+0x322c>
   15964:	bl	15198 <__assert_fail@plt+0x2a54>
   15968:	mov	r1, r5
   1596c:	bl	1254c <gpgrt_fputs@plt>
   15970:	mov	r1, r5
   15974:	mov	r0, #58	; 0x3a
   15978:	bl	122a0 <gpgrt_fputc@plt>
   1597c:	ldr	r3, [r7, #4]
   15980:	cmp	r3, #0
   15984:	beq	15998 <__assert_fail@plt+0x3254>
   15988:	ldr	r2, [r7, #8]
   1598c:	mov	r1, r9
   15990:	mov	r0, r5
   15994:	bl	12678 <gpgrt_fprintf@plt>
   15998:	mov	r1, r5
   1599c:	mov	r0, #58	; 0x3a
   159a0:	bl	122a0 <gpgrt_fputc@plt>
   159a4:	ldr	r0, [r7, #12]
   159a8:	bl	15198 <__assert_fail@plt+0x2a54>
   159ac:	mov	r1, r5
   159b0:	bl	1254c <gpgrt_fputs@plt>
   159b4:	mov	r1, r5
   159b8:	mov	r0, #58	; 0x3a
   159bc:	bl	122a0 <gpgrt_fputc@plt>
   159c0:	ldr	r7, [r7]
   159c4:	cmp	r7, #0
   159c8:	beq	159f0 <__assert_fail@plt+0x32ac>
   159cc:	cmp	r7, r4
   159d0:	beq	15958 <__assert_fail@plt+0x3214>
   159d4:	mov	r1, r5
   159d8:	mov	r0, r8
   159dc:	bl	1254c <gpgrt_fputs@plt>
   159e0:	ldr	r0, [r7, #4]
   159e4:	cmp	r0, #0
   159e8:	bne	15964 <__assert_fail@plt+0x3220>
   159ec:	b	15970 <__assert_fail@plt+0x322c>
   159f0:	mov	r1, r5
   159f4:	mov	r0, #10
   159f8:	bl	122a0 <gpgrt_fputc@plt>
   159fc:	cmp	r4, #0
   15a00:	beq	15a18 <__assert_fail@plt+0x32d4>
   15a04:	ldr	r5, [r4]
   15a08:	mov	r0, r4
   15a0c:	bl	12150 <gcry_free@plt>
   15a10:	subs	r4, r5, #0
   15a14:	bne	15a04 <__assert_fail@plt+0x32c0>
   15a18:	ldr	r2, [sp, #92]	; 0x5c
   15a1c:	ldr	r3, [sl]
   15a20:	mov	r0, r6
   15a24:	cmp	r2, r3
   15a28:	bne	15ae0 <__assert_fail@plt+0x339c>
   15a2c:	add	sp, sp, #100	; 0x64
   15a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a34:	adds	r3, r3, #52	; 0x34
   15a38:	beq	15a48 <__assert_fail@plt+0x3304>
   15a3c:	ldr	r2, [r3]
   15a40:	cmp	r2, #0
   15a44:	bne	157f4 <__assert_fail@plt+0x30b0>
   15a48:	mov	r6, #0
   15a4c:	b	15a18 <__assert_fail@plt+0x32d4>
   15a50:	ldr	r1, [r7, r9, lsl #4]
   15a54:	ldr	r0, [sp, #40]	; 0x28
   15a58:	bl	13f0c <__assert_fail@plt+0x17c8>
   15a5c:	add	r3, sp, #36	; 0x24
   15a60:	mov	r2, #1
   15a64:	ldr	r1, [sp, #32]
   15a68:	mov	r4, r0
   15a6c:	mov	r0, fp
   15a70:	bl	236b0 <__assert_fail@plt+0x10f6c>
   15a74:	subs	r3, r0, #0
   15a78:	str	r3, [sp, #28]
   15a7c:	bne	15a94 <__assert_fail@plt+0x3350>
   15a80:	ldr	r0, [sp, #32]
   15a84:	bl	23c04 <__assert_fail@plt+0x114c0>
   15a88:	ldr	r0, [sp, #40]	; 0x28
   15a8c:	bl	122b8 <gpgrt_fclose@plt>
   15a90:	b	158e0 <__assert_fail@plt+0x319c>
   15a94:	ldr	r2, [sp, #36]	; 0x24
   15a98:	ldr	r0, [sp, #32]
   15a9c:	cmn	r2, #1
   15aa0:	movne	r2, #0
   15aa4:	moveq	r2, #1
   15aa8:	orr	r3, r2, #2
   15aac:	mov	r6, r3
   15ab0:	str	r3, [sp, #28]
   15ab4:	bl	23c04 <__assert_fail@plt+0x114c0>
   15ab8:	ldr	r0, [sp, #40]	; 0x28
   15abc:	bl	122b8 <gpgrt_fclose@plt>
   15ac0:	cmp	r5, #0
   15ac4:	bne	158e8 <__assert_fail@plt+0x31a4>
   15ac8:	b	159fc <__assert_fail@plt+0x32b8>
   15acc:	ldr	r3, [pc, #52]	; 15b08 <__assert_fail@plt+0x33c4>
   15ad0:	ldr	r2, [pc, #52]	; 15b0c <__assert_fail@plt+0x33c8>
   15ad4:	ldr	r1, [pc, #52]	; 15b10 <__assert_fail@plt+0x33cc>
   15ad8:	ldr	r0, [pc, #52]	; 15b14 <__assert_fail@plt+0x33d0>
   15adc:	bl	12744 <__assert_fail@plt>
   15ae0:	bl	1218c <__stack_chk_fail@plt>
   15ae4:	muleq	r2, r4, r0
   15ae8:	andeq	sl, r3, r8, asr fp
   15aec:	andeq	r6, r2, r0, lsr #18
   15af0:	andeq	r6, r2, r0, lsl r9
   15af4:	andeq	r6, r2, r4, lsl #18
   15af8:	strdeq	r6, [r2], -ip
   15afc:	andeq	r6, r2, ip, lsr #18
   15b00:	strdeq	r9, [r2], -r8
   15b04:	andeq	r6, r2, r4, lsr r9
   15b08:	andeq	r6, r2, r8, lsl #7
   15b0c:	ldrdeq	r0, [r0], -r8
   15b10:	andeq	r6, r2, r0, lsr #11
   15b14:	andeq	r6, r2, r0, ror #17
   15b18:	push	{r4, r5, r6, r7, lr}
   15b1c:	sub	sp, sp, #52	; 0x34
   15b20:	ldr	r6, [pc, #580]	; 15d6c <__assert_fail@plt+0x3628>
   15b24:	subs	r4, r0, #0
   15b28:	ldr	r3, [r6]
   15b2c:	str	r3, [sp, #44]	; 0x2c
   15b30:	blt	15cd0 <__assert_fail@plt+0x358c>
   15b34:	cmp	r4, #1
   15b38:	cmpne	r4, #4
   15b3c:	movne	r7, #1
   15b40:	moveq	r7, #0
   15b44:	bne	15cf4 <__assert_fail@plt+0x35b0>
   15b48:	mov	r2, r7
   15b4c:	mov	r1, r7
   15b50:	bl	15788 <__assert_fail@plt+0x3044>
   15b54:	subs	r5, r0, #0
   15b58:	bne	15d18 <__assert_fail@plt+0x35d4>
   15b5c:	mov	r0, #9
   15b60:	bl	2057c <__assert_fail@plt+0xde38>
   15b64:	mov	r7, r0
   15b68:	bl	20028 <__assert_fail@plt+0xd8e4>
   15b6c:	cmp	r0, #0
   15b70:	movne	r3, #1
   15b74:	beq	15c94 <__assert_fail@plt+0x3550>
   15b78:	cmp	r4, #4
   15b7c:	beq	15c38 <__assert_fail@plt+0x34f4>
   15b80:	add	r2, sp, #48	; 0x30
   15b84:	add	r0, r2, r3, lsl #2
   15b88:	add	r5, r2, r5, lsl #2
   15b8c:	ldr	r2, [pc, #476]	; 15d70 <__assert_fail@plt+0x362c>
   15b90:	mvn	r3, #0
   15b94:	add	r1, sp, #20
   15b98:	mov	ip, #0
   15b9c:	str	r1, [sp, #4]
   15ba0:	str	r3, [sp]
   15ba4:	add	r1, sp, #24
   15ba8:	str	r2, [r5, #-24]	; 0xffffffe8
   15bac:	str	ip, [r0, #-24]	; 0xffffffe8
   15bb0:	mov	r2, r3
   15bb4:	mov	r0, r7
   15bb8:	bl	235dc <__assert_fail@plt+0x10e98>
   15bbc:	subs	r4, r0, #0
   15bc0:	beq	15c18 <__assert_fail@plt+0x34d4>
   15bc4:	ldr	r5, [pc, #424]	; 15d74 <__assert_fail@plt+0x3630>
   15bc8:	mov	r0, r4
   15bcc:	bl	1260c <gpg_strerror@plt>
   15bd0:	ldr	r2, [pc, #416]	; 15d78 <__assert_fail@plt+0x3634>
   15bd4:	mov	r1, #0
   15bd8:	str	r2, [sp, #4]
   15bdc:	str	r5, [sp]
   15be0:	mov	r3, r7
   15be4:	ldr	r2, [pc, #400]	; 15d7c <__assert_fail@plt+0x3638>
   15be8:	str	r0, [sp, #8]
   15bec:	mov	r0, r1
   15bf0:	bl	14234 <__assert_fail@plt+0x1af0>
   15bf4:	ldr	r0, [sp, #20]
   15bf8:	bl	23c04 <__assert_fail@plt+0x114c0>
   15bfc:	ldr	r2, [sp, #44]	; 0x2c
   15c00:	ldr	r3, [r6]
   15c04:	mov	r0, r4
   15c08:	cmp	r2, r3
   15c0c:	bne	15cf0 <__assert_fail@plt+0x35ac>
   15c10:	add	sp, sp, #52	; 0x34
   15c14:	pop	{r4, r5, r6, r7, pc}
   15c18:	mov	r3, r4
   15c1c:	mov	r2, #1
   15c20:	ldr	r1, [sp, #20]
   15c24:	mov	r0, r7
   15c28:	bl	236b0 <__assert_fail@plt+0x10f6c>
   15c2c:	subs	r4, r0, #0
   15c30:	beq	15bf4 <__assert_fail@plt+0x34b0>
   15c34:	b	15bc4 <__assert_fail@plt+0x3480>
   15c38:	add	r0, r5, #2
   15c3c:	add	r2, sp, #48	; 0x30
   15c40:	add	r2, r2, r3, lsl #2
   15c44:	add	r3, sp, #48	; 0x30
   15c48:	add	r0, r3, r0, lsl #2
   15c4c:	add	r5, r3, r5, lsl #2
   15c50:	ldr	r3, [pc, #296]	; 15d80 <__assert_fail@plt+0x363c>
   15c54:	add	ip, sp, #20
   15c58:	str	r3, [r5, #-24]	; 0xffffffe8
   15c5c:	mvn	r3, #0
   15c60:	ldr	r1, [pc, #264]	; 15d70 <__assert_fail@plt+0x362c>
   15c64:	stm	sp, {r3, ip}
   15c68:	mov	ip, #0
   15c6c:	str	r1, [r2, #-24]	; 0xffffffe8
   15c70:	str	ip, [r0, #-24]	; 0xffffffe8
   15c74:	mov	r2, r3
   15c78:	add	r1, sp, #24
   15c7c:	mov	r0, r7
   15c80:	bl	235dc <__assert_fail@plt+0x10e98>
   15c84:	subs	r4, r0, #0
   15c88:	beq	15cb0 <__assert_fail@plt+0x356c>
   15c8c:	ldr	r5, [pc, #240]	; 15d84 <__assert_fail@plt+0x3640>
   15c90:	b	15bc8 <__assert_fail@plt+0x3484>
   15c94:	ldr	r3, [pc, #236]	; 15d88 <__assert_fail@plt+0x3644>
   15c98:	mov	r5, #2
   15c9c:	str	r3, [sp, #24]
   15ca0:	bl	1ffec <__assert_fail@plt+0xd8a8>
   15ca4:	mov	r3, #3
   15ca8:	str	r0, [sp, #28]
   15cac:	b	15b78 <__assert_fail@plt+0x3434>
   15cb0:	mov	r3, r4
   15cb4:	mov	r2, #1
   15cb8:	ldr	r1, [sp, #20]
   15cbc:	mov	r0, r7
   15cc0:	bl	236b0 <__assert_fail@plt+0x10f6c>
   15cc4:	subs	r4, r0, #0
   15cc8:	beq	15bf4 <__assert_fail@plt+0x34b0>
   15ccc:	b	15c8c <__assert_fail@plt+0x3548>
   15cd0:	mov	r0, #1
   15cd4:	bl	15b18 <__assert_fail@plt+0x33d4>
   15cd8:	subs	r4, r0, #0
   15cdc:	bne	15bfc <__assert_fail@plt+0x34b8>
   15ce0:	mov	r0, #4
   15ce4:	bl	15b18 <__assert_fail@plt+0x33d4>
   15ce8:	mov	r4, r0
   15cec:	b	15bfc <__assert_fail@plt+0x34b8>
   15cf0:	bl	1218c <__stack_chk_fail@plt>
   15cf4:	mov	r2, #5
   15cf8:	ldr	r1, [pc, #140]	; 15d8c <__assert_fail@plt+0x3648>
   15cfc:	mov	r0, #0
   15d00:	bl	12180 <dcgettext@plt>
   15d04:	mov	r1, r0
   15d08:	ldr	r0, [pc, #128]	; 15d90 <__assert_fail@plt+0x364c>
   15d0c:	bl	1e95c <__assert_fail@plt+0xc218>
   15d10:	mov	r0, #0
   15d14:	bl	13d44 <__assert_fail@plt+0x1600>
   15d18:	mov	r2, #5
   15d1c:	ldr	r1, [pc, #112]	; 15d94 <__assert_fail@plt+0x3650>
   15d20:	mov	r0, r7
   15d24:	bl	12180 <dcgettext@plt>
   15d28:	ldr	r3, [pc, #104]	; 15d98 <__assert_fail@plt+0x3654>
   15d2c:	ldr	r4, [r3, r4, lsl #4]
   15d30:	mov	r1, r4
   15d34:	bl	1e95c <__assert_fail@plt+0xc218>
   15d38:	ldr	r3, [pc, #92]	; 15d9c <__assert_fail@plt+0x3658>
   15d3c:	ldr	r0, [r3, #4]
   15d40:	cmp	r0, #0
   15d44:	beq	15d50 <__assert_fail@plt+0x360c>
   15d48:	mov	r0, #0
   15d4c:	bl	13d44 <__assert_fail@plt+0x1600>
   15d50:	mov	r2, #5
   15d54:	ldr	r1, [pc, #68]	; 15da0 <__assert_fail@plt+0x365c>
   15d58:	bl	12180 <dcgettext@plt>
   15d5c:	mov	r2, r4
   15d60:	ldr	r1, [pc, #60]	; 15da4 <__assert_fail@plt+0x3660>
   15d64:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   15d68:	b	15d48 <__assert_fail@plt+0x3604>
   15d6c:	andeq	sl, r3, r8, asr fp
   15d70:	andeq	r6, r2, ip, ror #19
   15d74:	andeq	r6, r2, r4, ror #29
   15d78:	andeq	r6, r2, ip, lsl #20
   15d7c:	strdeq	r6, [r2], -r0
   15d80:	andeq	r6, r2, r8, ror #9
   15d84:	andeq	r6, r2, ip, lsr r9
   15d88:	strdeq	r6, [r2], -r4
   15d8c:	andeq	r6, r2, r8, asr #18
   15d90:	muleq	r2, r8, r9
   15d94:	andeq	r6, r2, r0, ror r9
   15d98:	muleq	r2, r4, r0
   15d9c:	muleq	r3, r4, r5
   15da0:	andeq	r6, r2, r0, lsr #19
   15da4:	ldrdeq	r6, [r2], -r0
   15da8:	push	{r4, r5, r6, lr}
   15dac:	mov	r5, r0
   15db0:	mov	r4, #0
   15db4:	mov	r0, r4
   15db8:	mov	r2, #0
   15dbc:	mov	r1, r5
   15dc0:	add	r4, r4, #1
   15dc4:	bl	15788 <__assert_fail@plt+0x3044>
   15dc8:	cmp	r4, #6
   15dcc:	bne	15db4 <__assert_fail@plt+0x3670>
   15dd0:	pop	{r4, r5, r6, pc}
   15dd4:	ldr	r3, [pc, #104]	; 15e44 <__assert_fail@plt+0x3700>
   15dd8:	push	{r4, r5, r6, lr}
   15ddc:	cmp	r3, #0
   15de0:	mov	r6, r0
   15de4:	ldr	r4, [pc, #92]	; 15e48 <__assert_fail@plt+0x3704>
   15de8:	mov	r5, #0
   15dec:	mov	r0, r6
   15df0:	beq	15e04 <__assert_fail@plt+0x36c0>
   15df4:	ldr	r1, [r4, #-28]	; 0xffffffe4
   15df8:	bl	12054 <strcmp@plt>
   15dfc:	cmp	r0, #0
   15e00:	beq	15e34 <__assert_fail@plt+0x36f0>
   15e04:	add	r5, r5, #1
   15e08:	cmp	r5, #6
   15e0c:	add	r4, r4, #16
   15e10:	beq	15e3c <__assert_fail@plt+0x36f8>
   15e14:	ldr	r3, [r4, #-16]
   15e18:	mov	r0, r6
   15e1c:	cmp	r3, #0
   15e20:	beq	15e04 <__assert_fail@plt+0x36c0>
   15e24:	ldr	r1, [r4, #-28]	; 0xffffffe4
   15e28:	bl	12054 <strcmp@plt>
   15e2c:	cmp	r0, #0
   15e30:	bne	15e04 <__assert_fail@plt+0x36c0>
   15e34:	mov	r0, r5
   15e38:	pop	{r4, r5, r6, pc}
   15e3c:	mvn	r0, #0
   15e40:	pop	{r4, r5, r6, pc}
   15e44:	andeq	fp, r3, ip, lsl r2
   15e48:	strheq	r6, [r2], -r0
   15e4c:	ldr	r3, [pc, #312]	; 15f8c <__assert_fail@plt+0x3848>
   15e50:	push	{r4, r5, r6, r7, r8, r9, lr}
   15e54:	add	r0, r3, r0, lsl #4
   15e58:	ldr	r6, [pc, #304]	; 15f90 <__assert_fail@plt+0x384c>
   15e5c:	ldr	r0, [r0, #12]
   15e60:	sub	sp, sp, #60	; 0x3c
   15e64:	ldr	r3, [r6]
   15e68:	cmp	r0, #0
   15e6c:	str	r3, [sp, #52]	; 0x34
   15e70:	beq	15f48 <__assert_fail@plt+0x3804>
   15e74:	ldr	r3, [r0]
   15e78:	mov	r5, r1
   15e7c:	cmp	r3, #0
   15e80:	beq	15f48 <__assert_fail@plt+0x3804>
   15e84:	ldr	r3, [r0, #4]
   15e88:	add	r4, r0, #52	; 0x34
   15e8c:	tst	r3, #1
   15e90:	beq	15f60 <__assert_fail@plt+0x381c>
   15e94:	ldr	lr, [r0, #52]	; 0x34
   15e98:	cmp	lr, #0
   15e9c:	beq	15f3c <__assert_fail@plt+0x37f8>
   15ea0:	ldr	r3, [r4, #4]
   15ea4:	tst	r3, #1
   15ea8:	bne	15f3c <__assert_fail@plt+0x37f8>
   15eac:	mov	r3, r4
   15eb0:	mov	ip, #5
   15eb4:	b	15ec8 <__assert_fail@plt+0x3784>
   15eb8:	ldr	r2, [r2, #56]	; 0x38
   15ebc:	add	r3, r3, #52	; 0x34
   15ec0:	tst	r2, #1
   15ec4:	bne	15ee4 <__assert_fail@plt+0x37a0>
   15ec8:	ldr	r2, [r3, #8]
   15ecc:	ldr	r1, [r3, #52]	; 0x34
   15ed0:	cmp	ip, r2
   15ed4:	movcs	ip, r2
   15ed8:	cmp	r1, #0
   15edc:	mov	r2, r3
   15ee0:	bne	15eb8 <__assert_fail@plt+0x3774>
   15ee4:	cmp	ip, #5
   15ee8:	beq	15f3c <__assert_fail@plt+0x37f8>
   15eec:	mov	lr, r0
   15ef0:	add	r9, r0, #48	; 0x30
   15ef4:	mov	r8, sp
   15ef8:	ldr	r0, [lr]
   15efc:	ldr	r1, [lr, #4]
   15f00:	ldr	r2, [lr, #8]
   15f04:	ldr	r3, [lr, #12]
   15f08:	mov	r7, r8
   15f0c:	add	lr, lr, #16
   15f10:	cmp	lr, r9
   15f14:	stmia	r7!, {r0, r1, r2, r3}
   15f18:	mov	r8, r7
   15f1c:	bne	15ef8 <__assert_fail@plt+0x37b4>
   15f20:	ldr	r0, [lr]
   15f24:	mov	r1, r5
   15f28:	str	r0, [r7]
   15f2c:	mov	r0, sp
   15f30:	str	ip, [sp, #8]
   15f34:	bl	152d4 <__assert_fail@plt+0x2b90>
   15f38:	ldr	lr, [r4]
   15f3c:	cmp	lr, #0
   15f40:	mov	r0, r4
   15f44:	bne	15e84 <__assert_fail@plt+0x3740>
   15f48:	ldr	r2, [sp, #52]	; 0x34
   15f4c:	ldr	r3, [r6]
   15f50:	cmp	r2, r3
   15f54:	bne	15f88 <__assert_fail@plt+0x3844>
   15f58:	add	sp, sp, #60	; 0x3c
   15f5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f60:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15f64:	cmp	r3, #0
   15f68:	beq	15f80 <__assert_fail@plt+0x383c>
   15f6c:	ldr	r3, [r4, #-44]	; 0xffffffd4
   15f70:	cmp	r3, #4
   15f74:	beq	15f80 <__assert_fail@plt+0x383c>
   15f78:	mov	r1, r5
   15f7c:	bl	152d4 <__assert_fail@plt+0x2b90>
   15f80:	ldr	lr, [r4]
   15f84:	b	15f3c <__assert_fail@plt+0x37f8>
   15f88:	bl	1218c <__stack_chk_fail@plt>
   15f8c:	muleq	r2, r4, r0
   15f90:	andeq	sl, r3, r8, asr fp
   15f94:	ldr	r3, [pc, #2680]	; 16a14 <__assert_fail@plt+0x42d0>
   15f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f9c:	sub	sp, sp, #116	; 0x74
   15fa0:	cmn	r0, #1
   15fa4:	ldr	r2, [r3]
   15fa8:	mov	r3, #0
   15fac:	str	r0, [sp, #28]
   15fb0:	str	r3, [sp, #76]	; 0x4c
   15fb4:	str	r3, [sp, #80]	; 0x50
   15fb8:	str	r3, [sp, #84]	; 0x54
   15fbc:	str	r3, [sp, #88]	; 0x58
   15fc0:	str	r3, [sp, #92]	; 0x5c
   15fc4:	str	r3, [sp, #96]	; 0x60
   15fc8:	str	r3, [sp, #100]	; 0x64
   15fcc:	str	r3, [sp, #104]	; 0x68
   15fd0:	streq	r3, [sp, #28]
   15fd4:	moveq	r3, #1
   15fd8:	str	r2, [sp, #108]	; 0x6c
   15fdc:	str	r3, [sp, #44]	; 0x2c
   15fe0:	ldr	r3, [sp, #28]
   15fe4:	cmp	r3, #5
   15fe8:	beq	162f0 <__assert_fail@plt+0x3bac>
   15fec:	ldr	r2, [pc, #2596]	; 16a18 <__assert_fail@plt+0x42d4>
   15ff0:	add	r3, r2, r3, lsl #4
   15ff4:	ldr	r3, [r3, #12]
   15ff8:	cmp	r3, #0
   15ffc:	beq	162d0 <__assert_fail@plt+0x3b8c>
   16000:	ldr	r2, [r3]
   16004:	cmp	r2, #0
   16008:	beq	162d0 <__assert_fail@plt+0x3b8c>
   1600c:	add	sl, r3, #52	; 0x34
   16010:	ldr	r3, [sl, #-48]	; 0xffffffd0
   16014:	str	sl, [sp, #32]
   16018:	tst	r3, #1
   1601c:	bne	162bc <__assert_fail@plt+0x3b78>
   16020:	ldr	r8, [sl, #-28]	; 0xffffffe4
   16024:	add	r3, sp, #112	; 0x70
   16028:	add	r2, r3, r8, lsl #2
   1602c:	ldr	r3, [r2, #-36]	; 0xffffffdc
   16030:	cmp	r3, #0
   16034:	bne	162bc <__assert_fail@plt+0x3b78>
   16038:	mov	r6, #1
   1603c:	cmp	r8, #0
   16040:	str	r6, [r2, #-36]	; 0xffffffdc
   16044:	beq	169d4 <__assert_fail@plt+0x4290>
   16048:	add	r4, r8, r8, lsl #1
   1604c:	ldr	r2, [pc, #2500]	; 16a18 <__assert_fail@plt+0x42d4>
   16050:	add	r4, r2, r4, lsl #3
   16054:	ldr	r7, [r4, #100]	; 0x64
   16058:	cmp	r7, #0
   1605c:	beq	165b0 <__assert_fail@plt+0x3e6c>
   16060:	ldrb	r0, [r4, #104]	; 0x68
   16064:	str	r3, [sp, #56]	; 0x38
   16068:	str	r3, [sp, #60]	; 0x3c
   1606c:	cmp	r0, #0
   16070:	bne	16834 <__assert_fail@plt+0x40f0>
   16074:	ldr	r3, [sp, #44]	; 0x2c
   16078:	ldr	r2, [pc, #2460]	; 16a1c <__assert_fail@plt+0x42d8>
   1607c:	cmp	r3, #0
   16080:	mov	r3, #0
   16084:	strd	r2, [sp, #68]	; 0x44
   16088:	beq	160a0 <__assert_fail@plt+0x395c>
   1608c:	mov	r1, #1
   16090:	mov	r0, r7
   16094:	bl	12534 <access@plt>
   16098:	cmp	r0, #0
   1609c:	bne	162bc <__assert_fail@plt+0x3b78>
   160a0:	mov	r4, #0
   160a4:	add	r3, sp, #52	; 0x34
   160a8:	add	r1, sp, #48	; 0x30
   160ac:	str	r3, [sp, #16]
   160b0:	str	r1, [sp, #8]
   160b4:	str	r4, [sp, #12]
   160b8:	str	r4, [sp, #4]
   160bc:	str	r4, [sp]
   160c0:	mov	r3, r4
   160c4:	mov	r2, r4
   160c8:	add	r1, sp, #68	; 0x44
   160cc:	mov	r0, r7
   160d0:	bl	231ec <__assert_fail@plt+0x10aa8>
   160d4:	cmp	r0, r4
   160d8:	bne	16898 <__assert_fail@plt+0x4154>
   160dc:	add	fp, sp, #60	; 0x3c
   160e0:	add	r3, sp, #64	; 0x40
   160e4:	str	r3, [sp, #36]	; 0x24
   160e8:	str	sl, [sp, #40]	; 0x28
   160ec:	ldr	sl, [sp, #36]	; 0x24
   160f0:	mov	r6, #0
   160f4:	mov	r3, #0
   160f8:	mov	r2, fp
   160fc:	add	r1, sp, #56	; 0x38
   16100:	ldr	r0, [sp, #48]	; 0x30
   16104:	bl	12024 <gpgrt_read_line@plt>
   16108:	cmp	r0, #0
   1610c:	ble	16340 <__assert_fail@plt+0x3bfc>
   16110:	sub	r0, r0, #1
   16114:	ldr	r9, [sp, #56]	; 0x38
   16118:	ldrb	r3, [r9, r0]
   1611c:	cmp	r3, #13
   16120:	cmpne	r3, #10
   16124:	bne	16138 <__assert_fail@plt+0x39f4>
   16128:	strb	r6, [r9, r0]
   1612c:	subs	r0, r0, #1
   16130:	bcs	16114 <__assert_fail@plt+0x39d0>
   16134:	ldr	r9, [sp, #56]	; 0x38
   16138:	mov	r1, #58	; 0x3a
   1613c:	mov	r0, r9
   16140:	bl	12408 <strchr@plt>
   16144:	subs	r4, r0, #0
   16148:	mov	r5, r4
   1614c:	beq	161e4 <__assert_fail@plt+0x3aa0>
   16150:	strb	r6, [r5], #1
   16154:	cmp	r5, #0
   16158:	moveq	r4, r5
   1615c:	ldreq	r9, [sp, #56]	; 0x38
   16160:	beq	161e4 <__assert_fail@plt+0x3aa0>
   16164:	mov	r1, #58	; 0x3a
   16168:	mov	r0, r5
   1616c:	bl	12408 <strchr@plt>
   16170:	subs	r4, r0, #0
   16174:	mov	r0, #0
   16178:	strbne	r6, [r4], #1
   1617c:	bl	125dc <gpg_err_set_errno@plt>
   16180:	mov	r1, sl
   16184:	mov	r0, r5
   16188:	mov	r2, #0
   1618c:	bl	123d8 <strtoul@plt>
   16190:	mov	r5, r0
   16194:	bl	1245c <__errno_location@plt>
   16198:	ldr	r1, [r0]
   1619c:	cmp	r1, #0
   161a0:	bne	1630c <__assert_fail@plt+0x3bc8>
   161a4:	ldr	r3, [sp, #64]	; 0x40
   161a8:	ldrb	r3, [r3]
   161ac:	and	r2, r3, #223	; 0xdf
   161b0:	cmp	r3, #58	; 0x3a
   161b4:	cmpne	r2, #0
   161b8:	bne	16324 <__assert_fail@plt+0x3be0>
   161bc:	cmp	r4, #0
   161c0:	beq	161e0 <__assert_fail@plt+0x3a9c>
   161c4:	mov	r0, r4
   161c8:	mov	r1, #58	; 0x3a
   161cc:	bl	12408 <strchr@plt>
   161d0:	cmp	r0, #0
   161d4:	strbne	r6, [r0]
   161d8:	tst	r5, #16
   161dc:	moveq	r4, #0
   161e0:	ldr	r9, [sp, #56]	; 0x38
   161e4:	mov	r2, r8
   161e8:	mov	r1, r9
   161ec:	ldr	r0, [sp, #28]
   161f0:	bl	13e9c <__assert_fail@plt+0x1758>
   161f4:	cmp	r0, #0
   161f8:	beq	160f4 <__assert_fail@plt+0x39b0>
   161fc:	ldr	r2, [r0, #28]
   16200:	mov	sl, r9
   16204:	cmp	r2, #0
   16208:	mov	r9, r0
   1620c:	bne	168d0 <__assert_fail@plt+0x418c>
   16210:	ldr	r3, [r9, #4]
   16214:	cmp	r4, #0
   16218:	orr	r5, r3, r5
   1621c:	mov	r3, #1
   16220:	str	r5, [r9, #4]
   16224:	str	r3, [r9, #28]
   16228:	beq	160ec <__assert_fail@plt+0x39a8>
   1622c:	ldrb	r3, [r4]
   16230:	cmp	r3, #0
   16234:	beq	160ec <__assert_fail@plt+0x39a8>
   16238:	mov	r0, r4
   1623c:	bl	12528 <gcry_xstrdup@plt>
   16240:	str	r0, [r9, #32]
   16244:	b	160ec <__assert_fail@plt+0x39a8>
   16248:	bne	1625c <__assert_fail@plt+0x3b18>
   1624c:	mov	r0, r4
   16250:	bl	121c8 <gpgrt_ferror@plt>
   16254:	cmp	r0, #0
   16258:	beq	16274 <__assert_fail@plt+0x3b30>
   1625c:	bl	1245c <__errno_location@plt>
   16260:	mov	r3, r9
   16264:	ldr	r2, [pc, #1972]	; 16a20 <__assert_fail@plt+0x42dc>
   16268:	ldr	r1, [r0]
   1626c:	mov	r0, #1
   16270:	bl	14234 <__assert_fail@plt+0x1af0>
   16274:	mov	r3, #1
   16278:	str	r3, [r5, #28]
   1627c:	str	r7, [r5, #40]	; 0x28
   16280:	ldr	r1, [sp, #40]	; 0x28
   16284:	mov	r2, #0
   16288:	ldr	r0, [sp, #28]
   1628c:	bl	13e9c <__assert_fail@plt+0x1758>
   16290:	ldr	r3, [r0, #4]
   16294:	tst	r3, #128	; 0x80
   16298:	ldrne	r3, [r5, #4]
   1629c:	orrne	r3, r3, #128	; 0x80
   162a0:	strne	r3, [r5, #4]
   162a4:	mov	r0, r4
   162a8:	bl	122b8 <gpgrt_fclose@plt>
   162ac:	cmp	r0, #0
   162b0:	bne	16960 <__assert_fail@plt+0x421c>
   162b4:	ldr	r0, [sp, #60]	; 0x3c
   162b8:	bl	12150 <gcry_free@plt>
   162bc:	ldr	r3, [sp, #32]
   162c0:	add	sl, sl, #52	; 0x34
   162c4:	ldr	r3, [r3]
   162c8:	cmp	r3, #0
   162cc:	bne	16010 <__assert_fail@plt+0x38cc>
   162d0:	ldr	r3, [sp, #44]	; 0x2c
   162d4:	cmp	r3, #0
   162d8:	beq	162f0 <__assert_fail@plt+0x3bac>
   162dc:	ldr	r3, [sp, #28]
   162e0:	add	r3, r3, #1
   162e4:	cmp	r3, #5
   162e8:	str	r3, [sp, #28]
   162ec:	ble	15fe0 <__assert_fail@plt+0x389c>
   162f0:	ldr	r3, [pc, #1820]	; 16a14 <__assert_fail@plt+0x42d0>
   162f4:	ldr	r2, [sp, #108]	; 0x6c
   162f8:	ldr	r3, [r3]
   162fc:	cmp	r2, r3
   16300:	bne	169e8 <__assert_fail@plt+0x42a4>
   16304:	add	sp, sp, #116	; 0x74
   16308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1630c:	str	r7, [sp]
   16310:	ldr	r3, [sp, #56]	; 0x38
   16314:	ldr	r2, [pc, #1800]	; 16a24 <__assert_fail@plt+0x42e0>
   16318:	mov	r0, #1
   1631c:	bl	14234 <__assert_fail@plt+0x1af0>
   16320:	b	161a4 <__assert_fail@plt+0x3a60>
   16324:	str	r7, [sp]
   16328:	ldr	r3, [sp, #56]	; 0x38
   1632c:	ldr	r2, [pc, #1780]	; 16a28 <__assert_fail@plt+0x42e4>
   16330:	mov	r1, #0
   16334:	mov	r0, #1
   16338:	bl	14234 <__assert_fail@plt+0x1af0>
   1633c:	b	161bc <__assert_fail@plt+0x3a78>
   16340:	ldr	sl, [sp, #40]	; 0x28
   16344:	bne	16358 <__assert_fail@plt+0x3c14>
   16348:	ldr	r0, [sp, #48]	; 0x30
   1634c:	bl	121c8 <gpgrt_ferror@plt>
   16350:	cmp	r0, #0
   16354:	beq	16370 <__assert_fail@plt+0x3c2c>
   16358:	bl	1245c <__errno_location@plt>
   1635c:	mov	r3, r7
   16360:	ldr	r2, [pc, #1732]	; 16a2c <__assert_fail@plt+0x42e8>
   16364:	ldr	r1, [r0]
   16368:	mov	r0, #1
   1636c:	bl	14234 <__assert_fail@plt+0x1af0>
   16370:	ldr	r0, [sp, #48]	; 0x30
   16374:	bl	122b8 <gpgrt_fclose@plt>
   16378:	cmp	r0, #0
   1637c:	bne	1687c <__assert_fail@plt+0x4138>
   16380:	ldr	r3, [sp, #36]	; 0x24
   16384:	mov	r2, #1
   16388:	ldr	r1, [sp, #52]	; 0x34
   1638c:	mov	r0, r7
   16390:	bl	236b0 <__assert_fail@plt+0x10f6c>
   16394:	cmp	r0, #0
   16398:	bne	16854 <__assert_fail@plt+0x4110>
   1639c:	ldr	r0, [sp, #52]	; 0x34
   163a0:	bl	23c04 <__assert_fail@plt+0x114c0>
   163a4:	mov	r1, r8
   163a8:	ldr	r0, [sp, #28]
   163ac:	bl	147dc <__assert_fail@plt+0x2098>
   163b0:	ldr	r1, [pc, #1656]	; 16a30 <__assert_fail@plt+0x42ec>
   163b4:	str	r0, [sp, #36]	; 0x24
   163b8:	bl	124e0 <gpgrt_fopen@plt>
   163bc:	subs	r5, r0, #0
   163c0:	movne	r7, #0
   163c4:	beq	168f0 <__assert_fail@plt+0x41ac>
   163c8:	mov	r3, #0
   163cc:	mov	r2, fp
   163d0:	add	r1, sp, #56	; 0x38
   163d4:	mov	r0, r5
   163d8:	bl	12024 <gpgrt_read_line@plt>
   163dc:	cmp	r0, #0
   163e0:	ble	16520 <__assert_fail@plt+0x3ddc>
   163e4:	ldr	r4, [sp, #56]	; 0x38
   163e8:	ldrb	r3, [r4]
   163ec:	cmp	r3, #9
   163f0:	cmpne	r3, #32
   163f4:	bne	16408 <__assert_fail@plt+0x3cc4>
   163f8:	ldrb	r3, [r4, #1]!
   163fc:	cmp	r3, #9
   16400:	cmpne	r3, #32
   16404:	beq	163f8 <__assert_fail@plt+0x3cb4>
   16408:	cmp	r3, #0
   1640c:	sub	r2, r3, #35	; 0x23
   16410:	clz	r2, r2
   16414:	lsr	r2, r2, #5
   16418:	moveq	r2, #1
   1641c:	cmp	r3, #13
   16420:	orreq	r2, r2, #1
   16424:	cmp	r3, #10
   16428:	movne	r3, r2
   1642c:	orreq	r3, r2, #1
   16430:	cmp	r3, #0
   16434:	bne	163c8 <__assert_fail@plt+0x3c84>
   16438:	ldrb	r2, [r4]
   1643c:	tst	r2, #223	; 0xdf
   16440:	beq	16840 <__assert_fail@plt+0x40fc>
   16444:	cmp	r2, #9
   16448:	beq	1674c <__assert_fail@plt+0x4008>
   1644c:	cmp	r2, #35	; 0x23
   16450:	cmpne	r2, #13
   16454:	movne	r3, #1
   16458:	moveq	r3, #0
   1645c:	cmp	r2, #10
   16460:	moveq	r2, #0
   16464:	andne	r2, r3, #1
   16468:	cmp	r2, #0
   1646c:	mov	r6, r4
   16470:	beq	164ac <__assert_fail@plt+0x3d68>
   16474:	ldrb	r2, [r6, #1]!
   16478:	tst	r2, #223	; 0xdf
   1647c:	beq	16844 <__assert_fail@plt+0x4100>
   16480:	cmp	r2, #9
   16484:	beq	16750 <__assert_fail@plt+0x400c>
   16488:	cmp	r2, #35	; 0x23
   1648c:	cmpne	r2, #13
   16490:	movne	r3, #1
   16494:	moveq	r3, #0
   16498:	cmp	r2, #10
   1649c:	moveq	r2, #0
   164a0:	andne	r2, r3, #1
   164a4:	cmp	r2, #0
   164a8:	bne	16474 <__assert_fail@plt+0x3d30>
   164ac:	strb	r7, [r6]
   164b0:	mov	r2, r8
   164b4:	ldr	r1, [sp, #56]	; 0x38
   164b8:	ldr	r0, [sp, #28]
   164bc:	bl	13e9c <__assert_fail@plt+0x1758>
   164c0:	subs	r9, r0, #0
   164c4:	beq	163c8 <__assert_fail@plt+0x3c84>
   164c8:	ldr	r3, [r9, #20]
   164cc:	ldr	r2, [pc, #1348]	; 16a18 <__assert_fail@plt+0x42d4>
   164d0:	add	r3, r2, r3, lsl #3
   164d4:	ldr	r1, [r3, #308]	; 0x134
   164d8:	cmp	r1, #0
   164dc:	bne	16598 <__assert_fail@plt+0x3e54>
   164e0:	ldrb	r3, [r6]
   164e4:	cmp	r3, #0
   164e8:	bne	16948 <__assert_fail@plt+0x4204>
   164ec:	ldr	r0, [pc, #1344]	; 16a34 <__assert_fail@plt+0x42f0>
   164f0:	bl	12528 <gcry_xstrdup@plt>
   164f4:	mov	r6, r0
   164f8:	ldr	r3, [r9, #4]
   164fc:	ldr	r4, [r9, #40]	; 0x28
   16500:	tst	r3, #4
   16504:	bne	16568 <__assert_fail@plt+0x3e24>
   16508:	cmp	r4, #0
   1650c:	beq	16518 <__assert_fail@plt+0x3dd4>
   16510:	mov	r0, r4
   16514:	bl	12150 <gcry_free@plt>
   16518:	str	r6, [r9, #40]	; 0x28
   1651c:	b	163c8 <__assert_fail@plt+0x3c84>
   16520:	bne	16534 <__assert_fail@plt+0x3df0>
   16524:	mov	r0, r5
   16528:	bl	121c8 <gpgrt_ferror@plt>
   1652c:	cmp	r0, #0
   16530:	beq	1654c <__assert_fail@plt+0x3e08>
   16534:	bl	1245c <__errno_location@plt>
   16538:	ldr	r3, [sp, #36]	; 0x24
   1653c:	ldr	r2, [pc, #1256]	; 16a2c <__assert_fail@plt+0x42e8>
   16540:	ldr	r1, [r0]
   16544:	mov	r0, #1
   16548:	bl	14234 <__assert_fail@plt+0x1af0>
   1654c:	mov	r0, r5
   16550:	bl	122b8 <gpgrt_fclose@plt>
   16554:	cmp	r0, #0
   16558:	bne	16914 <__assert_fail@plt+0x41d0>
   1655c:	ldr	r0, [sp, #56]	; 0x38
   16560:	bl	12150 <gcry_free@plt>
   16564:	b	162bc <__assert_fail@plt+0x3b78>
   16568:	cmp	r4, #0
   1656c:	beq	16518 <__assert_fail@plt+0x3dd4>
   16570:	mov	r2, r6
   16574:	mov	r1, r4
   16578:	ldr	r0, [pc, #1208]	; 16a38 <__assert_fail@plt+0x42f4>
   1657c:	bl	226c8 <__assert_fail@plt+0xff84>
   16580:	str	r0, [r9, #40]	; 0x28
   16584:	mov	r0, r4
   16588:	bl	12150 <gcry_free@plt>
   1658c:	mov	r0, r6
   16590:	bl	12150 <gcry_free@plt>
   16594:	b	163c8 <__assert_fail@plt+0x3c84>
   16598:	cmp	r1, #1
   1659c:	mov	r0, r6
   165a0:	beq	16930 <__assert_fail@plt+0x41ec>
   165a4:	bl	12528 <gcry_xstrdup@plt>
   165a8:	mov	r6, r0
   165ac:	b	164f8 <__assert_fail@plt+0x3db4>
   165b0:	mov	r2, r7
   165b4:	ldr	r1, [r4, #116]	; 0x74
   165b8:	ldr	r0, [sp, #28]
   165bc:	str	r7, [sp, #60]	; 0x3c
   165c0:	str	r7, [sp, #64]	; 0x40
   165c4:	bl	13e9c <__assert_fail@plt+0x1758>
   165c8:	subs	r5, r0, #0
   165cc:	beq	16a00 <__assert_fail@plt+0x42bc>
   165d0:	ldr	r3, [r5, #28]
   165d4:	cmp	r3, #0
   165d8:	bne	169ec <__assert_fail@plt+0x42a8>
   165dc:	mov	r1, r8
   165e0:	ldr	r0, [sp, #28]
   165e4:	bl	147dc <__assert_fail@plt+0x2098>
   165e8:	ldr	r1, [pc, #1088]	; 16a30 <__assert_fail@plt+0x42ec>
   165ec:	mov	r9, r0
   165f0:	bl	124e0 <gpgrt_fopen@plt>
   165f4:	ldr	r3, [r4, #112]	; 0x70
   165f8:	str	r3, [sp, #40]	; 0x28
   165fc:	subs	r4, r0, #0
   16600:	beq	1697c <__assert_fail@plt+0x4238>
   16604:	add	fp, sp, #60	; 0x3c
   16608:	mov	r6, r7
   1660c:	add	r3, sp, #64	; 0x40
   16610:	str	r3, [sp, #36]	; 0x24
   16614:	mov	r3, #0
   16618:	ldr	r2, [sp, #36]	; 0x24
   1661c:	mov	r1, fp
   16620:	mov	r0, r4
   16624:	bl	12024 <gpgrt_read_line@plt>
   16628:	cmp	r0, #0
   1662c:	ble	16248 <__assert_fail@plt+0x3b04>
   16630:	ldr	r0, [sp, #60]	; 0x3c
   16634:	ldrb	r3, [r0]
   16638:	cmp	r3, #32
   1663c:	cmpne	r3, #9
   16640:	bne	16654 <__assert_fail@plt+0x3f10>
   16644:	ldrb	r3, [r0, #1]!
   16648:	cmp	r3, #9
   1664c:	cmpne	r3, #32
   16650:	beq	16644 <__assert_fail@plt+0x3f00>
   16654:	cmp	r3, #0
   16658:	sub	r2, r3, #35	; 0x23
   1665c:	clz	r2, r2
   16660:	lsr	r2, r2, #5
   16664:	moveq	r2, #1
   16668:	cmp	r3, #13
   1666c:	orreq	r2, r2, #1
   16670:	cmp	r3, #10
   16674:	movne	r3, r2
   16678:	orreq	r3, r2, #1
   1667c:	cmp	r3, #0
   16680:	bne	16614 <__assert_fail@plt+0x3ed0>
   16684:	ldrb	r2, [r0]
   16688:	mov	r1, r0
   1668c:	cmp	r2, #35	; 0x23
   16690:	cmpne	r2, #0
   16694:	movne	r3, #1
   16698:	moveq	r3, #0
   1669c:	cmp	r2, #13
   166a0:	moveq	r3, #0
   166a4:	andne	r3, r3, #1
   166a8:	cmp	r2, #10
   166ac:	moveq	r3, #0
   166b0:	andne	r3, r3, #1
   166b4:	cmp	r3, #0
   166b8:	beq	166f0 <__assert_fail@plt+0x3fac>
   166bc:	ldrb	r2, [r1, #1]!
   166c0:	subs	r3, r2, #35	; 0x23
   166c4:	movne	r3, #1
   166c8:	cmp	r2, #0
   166cc:	moveq	r3, #0
   166d0:	cmp	r2, #13
   166d4:	moveq	r3, #0
   166d8:	andne	r3, r3, #1
   166dc:	cmp	r2, #10
   166e0:	moveq	r3, #0
   166e4:	andne	r3, r3, #1
   166e8:	cmp	r3, #0
   166ec:	bne	166bc <__assert_fail@plt+0x3f78>
   166f0:	ldrb	r3, [r1, #-1]
   166f4:	cmp	r3, #32
   166f8:	cmpne	r3, #9
   166fc:	bne	16718 <__assert_fail@plt+0x3fd4>
   16700:	sub	r3, r1, #1
   16704:	mov	r1, r3
   16708:	ldrb	r2, [r3, #-1]!
   1670c:	cmp	r2, #9
   16710:	cmpne	r2, #32
   16714:	beq	16704 <__assert_fail@plt+0x3fc0>
   16718:	cmp	r7, #0
   1671c:	strb	r6, [r1]
   16720:	beq	168b8 <__assert_fail@plt+0x4174>
   16724:	bl	15198 <__assert_fail@plt+0x2a54>
   16728:	mov	r1, r7
   1672c:	mov	r2, r0
   16730:	ldr	r0, [pc, #772]	; 16a3c <__assert_fail@plt+0x42f8>
   16734:	bl	226c8 <__assert_fail@plt+0xff84>
   16738:	mov	r8, r0
   1673c:	mov	r0, r7
   16740:	bl	12150 <gcry_free@plt>
   16744:	mov	r7, r8
   16748:	b	16614 <__assert_fail@plt+0x3ed0>
   1674c:	mov	r6, r4
   16750:	mov	r1, r6
   16754:	strb	r7, [r1], #1
   16758:	ldrb	r3, [r6, #1]
   1675c:	cmp	r3, #32
   16760:	cmpne	r3, #9
   16764:	bne	16778 <__assert_fail@plt+0x4034>
   16768:	ldrb	r3, [r1, #1]!
   1676c:	cmp	r3, #9
   16770:	cmpne	r3, #32
   16774:	beq	16768 <__assert_fail@plt+0x4024>
   16778:	cmp	r3, #35	; 0x23
   1677c:	cmpne	r3, #0
   16780:	movne	r2, #1
   16784:	moveq	r2, #0
   16788:	cmp	r3, #13
   1678c:	moveq	r2, #0
   16790:	andne	r2, r2, #1
   16794:	cmp	r3, #10
   16798:	moveq	r3, #0
   1679c:	andne	r3, r2, #1
   167a0:	cmp	r3, #0
   167a4:	beq	169c4 <__assert_fail@plt+0x4280>
   167a8:	mov	r2, r1
   167ac:	b	167b4 <__assert_fail@plt+0x4070>
   167b0:	mov	r2, r0
   167b4:	ldrb	ip, [r2, #1]
   167b8:	add	r0, r2, #1
   167bc:	subs	r3, ip, #35	; 0x23
   167c0:	movne	r3, #1
   167c4:	cmp	ip, #0
   167c8:	moveq	r3, #0
   167cc:	cmp	ip, #13
   167d0:	moveq	r3, #0
   167d4:	andne	r3, r3, #1
   167d8:	cmp	ip, #10
   167dc:	moveq	r3, #0
   167e0:	andne	r3, r3, #1
   167e4:	cmp	r3, #0
   167e8:	bne	167b0 <__assert_fail@plt+0x406c>
   167ec:	cmp	r0, r1
   167f0:	bls	16828 <__assert_fail@plt+0x40e4>
   167f4:	ldrb	r3, [r0, #-1]
   167f8:	cmp	r3, #9
   167fc:	cmpne	r3, #32
   16800:	bne	16828 <__assert_fail@plt+0x40e4>
   16804:	mov	r3, r2
   16808:	b	1681c <__assert_fail@plt+0x40d8>
   1680c:	ldrb	r2, [r3, #-1]!
   16810:	cmp	r2, #9
   16814:	cmpne	r2, #32
   16818:	bne	16828 <__assert_fail@plt+0x40e4>
   1681c:	cmp	r1, r3
   16820:	mov	r0, r3
   16824:	bne	1680c <__assert_fail@plt+0x40c8>
   16828:	strb	r7, [r0]
   1682c:	mov	r6, r1
   16830:	b	164b0 <__assert_fail@plt+0x3d6c>
   16834:	bl	2057c <__assert_fail@plt+0xde38>
   16838:	mov	r7, r0
   1683c:	b	16074 <__assert_fail@plt+0x3930>
   16840:	mov	r6, r4
   16844:	cmp	r2, #9
   16848:	cmpne	r2, #32
   1684c:	bne	164ac <__assert_fail@plt+0x3d68>
   16850:	b	16750 <__assert_fail@plt+0x400c>
   16854:	ldr	r4, [sp, #64]	; 0x40
   16858:	bl	1260c <gpg_strerror@plt>
   1685c:	str	r4, [sp]
   16860:	mov	r3, r7
   16864:	ldr	r2, [pc, #468]	; 16a40 <__assert_fail@plt+0x42fc>
   16868:	mov	r1, #0
   1686c:	str	r0, [sp, #4]
   16870:	mov	r0, #1
   16874:	bl	14234 <__assert_fail@plt+0x1af0>
   16878:	b	1639c <__assert_fail@plt+0x3c58>
   1687c:	bl	1245c <__errno_location@plt>
   16880:	mov	r3, r7
   16884:	ldr	r2, [pc, #440]	; 16a44 <__assert_fail@plt+0x4300>
   16888:	ldr	r1, [r0]
   1688c:	mov	r0, #1
   16890:	bl	14234 <__assert_fail@plt+0x1af0>
   16894:	b	16380 <__assert_fail@plt+0x3c3c>
   16898:	bl	1260c <gpg_strerror@plt>
   1689c:	mov	r1, r4
   168a0:	mov	r3, r7
   168a4:	ldr	r2, [pc, #412]	; 16a48 <__assert_fail@plt+0x4304>
   168a8:	str	r0, [sp]
   168ac:	mov	r0, #1
   168b0:	bl	14234 <__assert_fail@plt+0x1af0>
   168b4:	b	160dc <__assert_fail@plt+0x3998>
   168b8:	bl	15198 <__assert_fail@plt+0x2a54>
   168bc:	mov	r1, r0
   168c0:	ldr	r0, [pc, #388]	; 16a4c <__assert_fail@plt+0x4308>
   168c4:	bl	226c8 <__assert_fail@plt+0xff84>
   168c8:	mov	r7, r0
   168cc:	b	16614 <__assert_fail@plt+0x3ed0>
   168d0:	bl	1245c <__errno_location@plt>
   168d4:	mov	r3, sl
   168d8:	ldr	r2, [pc, #368]	; 16a50 <__assert_fail@plt+0x430c>
   168dc:	ldr	r1, [r0]
   168e0:	str	r7, [sp]
   168e4:	mov	r0, #1
   168e8:	bl	14234 <__assert_fail@plt+0x1af0>
   168ec:	b	16210 <__assert_fail@plt+0x3acc>
   168f0:	bl	1245c <__errno_location@plt>
   168f4:	ldr	r1, [r0]
   168f8:	cmp	r1, #2
   168fc:	beq	1655c <__assert_fail@plt+0x3e18>
   16900:	ldr	r3, [sp, #36]	; 0x24
   16904:	mov	r0, r5
   16908:	ldr	r2, [pc, #324]	; 16a54 <__assert_fail@plt+0x4310>
   1690c:	bl	14234 <__assert_fail@plt+0x1af0>
   16910:	b	1655c <__assert_fail@plt+0x3e18>
   16914:	bl	1245c <__errno_location@plt>
   16918:	ldr	r3, [sp, #36]	; 0x24
   1691c:	ldr	r2, [pc, #288]	; 16a44 <__assert_fail@plt+0x4300>
   16920:	ldr	r1, [r0]
   16924:	mov	r0, #1
   16928:	bl	14234 <__assert_fail@plt+0x1af0>
   1692c:	b	1655c <__assert_fail@plt+0x3e18>
   16930:	bl	15198 <__assert_fail@plt+0x2a54>
   16934:	mov	r1, r0
   16938:	ldr	r0, [pc, #268]	; 16a4c <__assert_fail@plt+0x4308>
   1693c:	bl	226c8 <__assert_fail@plt+0xff84>
   16940:	mov	r6, r0
   16944:	b	164f8 <__assert_fail@plt+0x3db4>
   16948:	str	r4, [sp]
   1694c:	mov	r3, r6
   16950:	ldr	r2, [pc, #256]	; 16a58 <__assert_fail@plt+0x4314>
   16954:	mov	r0, r1
   16958:	bl	14234 <__assert_fail@plt+0x1af0>
   1695c:	b	164ec <__assert_fail@plt+0x3da8>
   16960:	bl	1245c <__errno_location@plt>
   16964:	mov	r3, r9
   16968:	ldr	r2, [pc, #212]	; 16a44 <__assert_fail@plt+0x4300>
   1696c:	ldr	r1, [r0]
   16970:	mov	r0, #1
   16974:	bl	14234 <__assert_fail@plt+0x1af0>
   16978:	b	162b4 <__assert_fail@plt+0x3b70>
   1697c:	bl	1245c <__errno_location@plt>
   16980:	mov	r3, r9
   16984:	ldr	r2, [pc, #208]	; 16a5c <__assert_fail@plt+0x4318>
   16988:	ldr	r1, [r0]
   1698c:	mov	r0, r4
   16990:	bl	14234 <__assert_fail@plt+0x1af0>
   16994:	str	r6, [r5, #28]
   16998:	str	r4, [r5, #40]	; 0x28
   1699c:	mov	r2, r4
   169a0:	ldr	r1, [sp, #40]	; 0x28
   169a4:	ldr	r0, [sp, #28]
   169a8:	bl	13e9c <__assert_fail@plt+0x1758>
   169ac:	ldr	r3, [r0, #4]
   169b0:	tst	r3, #128	; 0x80
   169b4:	ldrne	r3, [r5, #4]
   169b8:	orrne	r3, r3, #128	; 0x80
   169bc:	strne	r3, [r5, #4]
   169c0:	b	162b4 <__assert_fail@plt+0x3b70>
   169c4:	mov	r0, r1
   169c8:	mov	r6, r1
   169cc:	strb	r7, [r0]
   169d0:	b	164b0 <__assert_fail@plt+0x3d6c>
   169d4:	ldr	r3, [pc, #132]	; 16a60 <__assert_fail@plt+0x431c>
   169d8:	ldr	r2, [pc, #132]	; 16a64 <__assert_fail@plt+0x4320>
   169dc:	ldr	r1, [pc, #132]	; 16a68 <__assert_fail@plt+0x4324>
   169e0:	ldr	r0, [pc, #132]	; 16a6c <__assert_fail@plt+0x4328>
   169e4:	bl	12744 <__assert_fail@plt>
   169e8:	bl	1218c <__stack_chk_fail@plt>
   169ec:	ldr	r3, [pc, #124]	; 16a70 <__assert_fail@plt+0x432c>
   169f0:	ldr	r2, [pc, #124]	; 16a74 <__assert_fail@plt+0x4330>
   169f4:	ldr	r1, [pc, #108]	; 16a68 <__assert_fail@plt+0x4324>
   169f8:	ldr	r0, [pc, #120]	; 16a78 <__assert_fail@plt+0x4334>
   169fc:	bl	12744 <__assert_fail@plt>
   16a00:	ldr	r3, [pc, #104]	; 16a70 <__assert_fail@plt+0x432c>
   16a04:	ldr	r2, [pc, #112]	; 16a7c <__assert_fail@plt+0x4338>
   16a08:	ldr	r1, [pc, #88]	; 16a68 <__assert_fail@plt+0x4324>
   16a0c:	ldr	r0, [pc, #108]	; 16a80 <__assert_fail@plt+0x433c>
   16a10:	bl	12744 <__assert_fail@plt>
   16a14:	andeq	sl, r3, r8, asr fp
   16a18:	muleq	r2, r4, r0
   16a1c:	andeq	r6, r2, r4, lsl sl
   16a20:	ldrdeq	r6, [r2], -r0
   16a24:	andeq	r6, r2, r4, asr sl
   16a28:	andeq	r6, r2, ip, ror sl
   16a2c:	andeq	r6, r2, ip, asr #21
   16a30:	andeq	r8, r2, ip, asr #19
   16a34:	andeq	r6, r2, r0, ror fp
   16a38:	andeq	r6, r2, r8, ror fp
   16a3c:	andeq	r6, r2, r8, asr #23
   16a40:	strdeq	r6, [r2], -r8
   16a44:	andeq	r6, r2, r4, ror #21
   16a48:	andeq	r6, r2, r4, lsr #20
   16a4c:	andeq	r6, r2, r4, ror fp
   16a50:	andeq	r6, r2, r8, lsr #21
   16a54:	andeq	r6, r2, ip, lsl fp
   16a58:	andeq	r6, r2, r4, asr #22
   16a5c:	andeq	r6, r2, r4, lsr #23
   16a60:	andeq	r6, r2, r4, lsr #7
   16a64:	andeq	r0, r0, r5, lsl #19
   16a68:	andeq	r6, r2, r0, lsr #11
   16a6c:	andeq	r6, r2, r0, ror #17
   16a70:	andeq	r6, r2, r4, asr #7
   16a74:	andeq	r0, r0, pc, lsl r9
   16a78:	andeq	r6, r2, ip, lsl #23
   16a7c:	andeq	r0, r0, lr, lsl r9
   16a80:	andeq	r6, r2, r0, lsl #23
   16a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a88:	sub	sp, sp, #228	; 0xe4
   16a8c:	cmp	r0, #5
   16a90:	str	r0, [sp, #24]
   16a94:	ldr	r0, [pc, #4068]	; 17a80 <__assert_fail@plt+0x533c>
   16a98:	str	r2, [sp, #64]	; 0x40
   16a9c:	str	r3, [sp, #32]
   16aa0:	ldr	ip, [r0]
   16aa4:	mov	r0, #0
   16aa8:	str	ip, [sp, #220]	; 0xdc
   16aac:	str	r0, [sp, #76]	; 0x4c
   16ab0:	str	r0, [sp, #80]	; 0x50
   16ab4:	beq	16ca4 <__assert_fail@plt+0x4560>
   16ab8:	add	ip, sp, #124	; 0x7c
   16abc:	add	r4, sp, #156	; 0x9c
   16ac0:	mov	r3, r0
   16ac4:	mov	lr, ip
   16ac8:	mov	r0, r4
   16acc:	mov	r8, r1
   16ad0:	add	r2, sp, #92	; 0x5c
   16ad4:	add	r1, sp, #188	; 0xbc
   16ad8:	str	ip, [sp, #48]	; 0x30
   16adc:	str	r4, [sp, #60]	; 0x3c
   16ae0:	str	r1, [sp, #56]	; 0x38
   16ae4:	str	r2, [sp, #68]	; 0x44
   16ae8:	str	r3, [r2], #4
   16aec:	cmp	lr, r2
   16af0:	str	r3, [ip], #4
   16af4:	str	r3, [r0], #4
   16af8:	str	r3, [r1], #4
   16afc:	bne	16ae8 <__assert_fail@plt+0x43a4>
   16b00:	cmp	r8, #0
   16b04:	beq	16ce8 <__assert_fail@plt+0x45a4>
   16b08:	ldr	sl, [pc, #3956]	; 17a84 <__assert_fail@plt+0x5340>
   16b0c:	ldr	r9, [pc, #3956]	; 17a88 <__assert_fail@plt+0x5344>
   16b10:	mov	r4, #0
   16b14:	mov	r3, #0
   16b18:	add	r2, sp, #80	; 0x50
   16b1c:	add	r1, sp, #76	; 0x4c
   16b20:	mov	r0, r8
   16b24:	bl	12024 <gpgrt_read_line@plt>
   16b28:	cmp	r0, #0
   16b2c:	ble	16cc0 <__assert_fail@plt+0x457c>
   16b30:	sub	r0, r0, #1
   16b34:	ldr	r5, [sp, #76]	; 0x4c
   16b38:	ldrb	r3, [r5, r0]
   16b3c:	cmp	r3, #13
   16b40:	cmpne	r3, #10
   16b44:	bne	16b58 <__assert_fail@plt+0x4414>
   16b48:	strb	r4, [r5, r0]
   16b4c:	subs	r0, r0, #1
   16b50:	bcs	16b34 <__assert_fail@plt+0x43f0>
   16b54:	ldr	r5, [sp, #76]	; 0x4c
   16b58:	mov	r1, #58	; 0x3a
   16b5c:	mov	r0, r5
   16b60:	bl	12408 <strchr@plt>
   16b64:	subs	r6, r0, #0
   16b68:	moveq	r7, sl
   16b6c:	beq	16bf8 <__assert_fail@plt+0x44b4>
   16b70:	strb	r4, [r6], #1
   16b74:	cmp	r6, #0
   16b78:	beq	17ff4 <__assert_fail@plt+0x58b0>
   16b7c:	mov	r1, #58	; 0x3a
   16b80:	mov	r0, r6
   16b84:	bl	12408 <strchr@plt>
   16b88:	subs	r7, r0, #0
   16b8c:	mov	r0, #0
   16b90:	strbne	r4, [r7], #1
   16b94:	bl	125dc <gpg_err_set_errno@plt>
   16b98:	add	r1, sp, #88	; 0x58
   16b9c:	mov	r0, r6
   16ba0:	mov	r2, #0
   16ba4:	bl	123d8 <strtoul@plt>
   16ba8:	mov	r6, r0
   16bac:	bl	1245c <__errno_location@plt>
   16bb0:	ldr	r1, [r0]
   16bb4:	cmp	r1, #0
   16bb8:	bne	16c50 <__assert_fail@plt+0x450c>
   16bbc:	ldr	r3, [sp, #88]	; 0x58
   16bc0:	ldrb	r3, [r3]
   16bc4:	and	r2, r3, #223	; 0xdf
   16bc8:	cmp	r3, #58	; 0x3a
   16bcc:	cmpne	r2, #0
   16bd0:	bne	17874 <__assert_fail@plt+0x5130>
   16bd4:	cmp	r7, #0
   16bd8:	bic	r6, r6, #128	; 0x80
   16bdc:	beq	17ff4 <__assert_fail@plt+0x58b0>
   16be0:	mov	r1, #58	; 0x3a
   16be4:	mov	r0, r7
   16be8:	bl	12408 <strchr@plt>
   16bec:	cmp	r0, #0
   16bf0:	strbne	r4, [r0]
   16bf4:	ldr	r5, [sp, #76]	; 0x4c
   16bf8:	mov	r2, #0
   16bfc:	mov	r1, r5
   16c00:	ldr	r0, [sp, #24]
   16c04:	bl	13e9c <__assert_fail@plt+0x1758>
   16c08:	subs	fp, r0, #0
   16c0c:	beq	1785c <__assert_fail@plt+0x5118>
   16c10:	ldr	r3, [fp, #4]
   16c14:	ands	r3, r3, #128	; 0x80
   16c18:	bne	16c38 <__assert_fail@plt+0x44f4>
   16c1c:	str	r3, [sp]
   16c20:	mov	r2, r6
   16c24:	mov	r3, r7
   16c28:	mov	r0, fp
   16c2c:	add	r1, sp, #92	; 0x5c
   16c30:	bl	14988 <__assert_fail@plt+0x2244>
   16c34:	b	16b14 <__assert_fail@plt+0x43d0>
   16c38:	mov	r1, #0
   16c3c:	ldr	r3, [fp]
   16c40:	mov	r0, r1
   16c44:	mov	r2, r9
   16c48:	bl	14234 <__assert_fail@plt+0x1af0>
   16c4c:	b	16b14 <__assert_fail@plt+0x43d0>
   16c50:	ldr	r3, [sp, #76]	; 0x4c
   16c54:	ldr	r2, [pc, #3632]	; 17a8c <__assert_fail@plt+0x5348>
   16c58:	mov	r0, #1
   16c5c:	bl	14234 <__assert_fail@plt+0x1af0>
   16c60:	b	16bbc <__assert_fail@plt+0x4478>
   16c64:	cmp	r4, #0
   16c68:	bne	17ea4 <__assert_fail@plt+0x5760>
   16c6c:	bl	22b28 <__assert_fail@plt+0x103e4>
   16c70:	ldr	r0, [sp, #76]	; 0x4c
   16c74:	bl	12150 <gcry_free@plt>
   16c78:	ldr	r4, [sp, #48]	; 0x30
   16c7c:	ldr	r5, [sp, #56]	; 0x38
   16c80:	ldr	r6, [sp, #60]	; 0x3c
   16c84:	ldr	r0, [r4], #4
   16c88:	bl	12150 <gcry_free@plt>
   16c8c:	ldr	r0, [r6], #4
   16c90:	bl	12150 <gcry_free@plt>
   16c94:	ldr	r0, [r5], #4
   16c98:	bl	12150 <gcry_free@plt>
   16c9c:	cmp	r7, r4
   16ca0:	bne	16c84 <__assert_fail@plt+0x4540>
   16ca4:	ldr	r3, [pc, #3540]	; 17a80 <__assert_fail@plt+0x533c>
   16ca8:	ldr	r2, [sp, #220]	; 0xdc
   16cac:	ldr	r3, [r3]
   16cb0:	cmp	r2, r3
   16cb4:	bne	18000 <__assert_fail@plt+0x58bc>
   16cb8:	add	sp, sp, #228	; 0xe4
   16cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc0:	bne	16cd4 <__assert_fail@plt+0x4590>
   16cc4:	mov	r0, r8
   16cc8:	bl	121c8 <gpgrt_ferror@plt>
   16ccc:	cmp	r0, #0
   16cd0:	beq	16ce8 <__assert_fail@plt+0x45a4>
   16cd4:	bl	1245c <__errno_location@plt>
   16cd8:	ldr	r2, [pc, #3504]	; 17a90 <__assert_fail@plt+0x534c>
   16cdc:	ldr	r1, [r0]
   16ce0:	mov	r0, #1
   16ce4:	bl	14234 <__assert_fail@plt+0x1af0>
   16ce8:	ldr	r3, [sp, #24]
   16cec:	ldr	r2, [pc, #3488]	; 17a94 <__assert_fail@plt+0x5350>
   16cf0:	lsl	r3, r3, #4
   16cf4:	str	r3, [sp, #52]	; 0x34
   16cf8:	add	r3, r2, r3
   16cfc:	ldr	r3, [r3, #12]
   16d00:	cmp	r3, #0
   16d04:	beq	1789c <__assert_fail@plt+0x5158>
   16d08:	ldr	r2, [r3]
   16d0c:	cmp	r2, #0
   16d10:	beq	1789c <__assert_fail@plt+0x5158>
   16d14:	add	r3, r3, #52	; 0x34
   16d18:	str	r3, [sp, #16]
   16d1c:	b	16d3c <__assert_fail@plt+0x45f8>
   16d20:	ldr	r3, [sp, #20]
   16d24:	ldr	r2, [sp, #16]
   16d28:	ldr	r3, [r3]
   16d2c:	add	r2, r2, #52	; 0x34
   16d30:	cmp	r3, #0
   16d34:	str	r2, [sp, #16]
   16d38:	beq	1789c <__assert_fail@plt+0x5158>
   16d3c:	ldr	r2, [sp, #16]
   16d40:	str	r2, [sp, #20]
   16d44:	ldr	r3, [r2, #-28]	; 0xffffffe4
   16d48:	str	r3, [sp, #12]
   16d4c:	lsl	r5, r3, #2
   16d50:	add	r3, sp, #224	; 0xe0
   16d54:	add	r3, r3, r5
   16d58:	ldr	r3, [r3, #-100]	; 0xffffff9c
   16d5c:	cmp	r3, #0
   16d60:	bne	16d20 <__assert_fail@plt+0x45dc>
   16d64:	ldr	r3, [r2, #-8]
   16d68:	cmp	r3, #0
   16d6c:	bne	16d7c <__assert_fail@plt+0x4638>
   16d70:	ldr	r3, [r2, #-4]
   16d74:	cmp	r3, #0
   16d78:	beq	16d20 <__assert_fail@plt+0x45dc>
   16d7c:	ldr	r1, [sp, #12]
   16d80:	ldr	r2, [pc, #3340]	; 17a94 <__assert_fail@plt+0x5350>
   16d84:	add	r3, r1, r1, lsl #1
   16d88:	add	r3, r2, r3, lsl #3
   16d8c:	ldr	r7, [r3, #100]	; 0x64
   16d90:	cmp	r7, #0
   16d94:	beq	174d8 <__assert_fail@plt+0x4d94>
   16d98:	mov	r7, #0
   16d9c:	ldr	r0, [sp, #24]
   16da0:	str	r7, [sp, #84]	; 0x54
   16da4:	bl	147dc <__assert_fail@plt+0x2098>
   16da8:	bl	12528 <gcry_xstrdup@plt>
   16dac:	mov	r4, r0
   16db0:	bl	123b4 <getpid@plt>
   16db4:	ldr	r2, [pc, #3292]	; 17a98 <__assert_fail@plt+0x5354>
   16db8:	mov	r1, r4
   16dbc:	mov	r3, r0
   16dc0:	ldr	r0, [pc, #3284]	; 17a9c <__assert_fail@plt+0x5358>
   16dc4:	bl	226c8 <__assert_fail@plt+0xff84>
   16dc8:	mov	r6, r0
   16dcc:	bl	123b4 <getpid@plt>
   16dd0:	ldr	r2, [pc, #3264]	; 17a98 <__assert_fail@plt+0x5354>
   16dd4:	mov	r1, r4
   16dd8:	mov	r3, r0
   16ddc:	ldr	r0, [pc, #3260]	; 17aa0 <__assert_fail@plt+0x535c>
   16de0:	bl	226c8 <__assert_fail@plt+0xff84>
   16de4:	mov	r1, r0
   16de8:	str	r0, [sp, #8]
   16dec:	mov	r0, r4
   16df0:	bl	124ec <link@plt>
   16df4:	mov	r8, r0
   16df8:	bl	1245c <__errno_location@plt>
   16dfc:	cmp	r8, r7
   16e00:	str	r0, [sp, #36]	; 0x24
   16e04:	blt	1780c <__assert_fail@plt+0x50c8>
   16e08:	add	r3, sp, #224	; 0xe0
   16e0c:	add	r5, r3, r5
   16e10:	ldr	r3, [sp, #8]
   16e14:	mov	r0, r6
   16e18:	mov	r2, #420	; 0x1a4
   16e1c:	mov	r1, #193	; 0xc1
   16e20:	str	r3, [r5, #-36]	; 0xffffffdc
   16e24:	str	r6, [r5, #-100]	; 0xffffff9c
   16e28:	str	r4, [r5, #-68]	; 0xffffffbc
   16e2c:	bl	122dc <open64@plt>
   16e30:	subs	r3, r0, #0
   16e34:	str	r3, [sp, #44]	; 0x2c
   16e38:	blt	17d58 <__assert_fail@plt+0x5614>
   16e3c:	ldr	r1, [pc, #3168]	; 17aa4 <__assert_fail@plt+0x5360>
   16e40:	bl	12300 <gpgrt_fdopen@plt>
   16e44:	subs	r8, r0, #0
   16e48:	beq	17f0c <__assert_fail@plt+0x57c8>
   16e4c:	ldr	r3, [sp, #8]
   16e50:	cmp	r3, #0
   16e54:	beq	17138 <__assert_fail@plt+0x49f4>
   16e58:	mov	r0, r4
   16e5c:	ldr	r1, [pc, #3140]	; 17aa8 <__assert_fail@plt+0x5364>
   16e60:	bl	124e0 <gpgrt_fopen@plt>
   16e64:	subs	r3, r0, #0
   16e68:	str	r3, [sp, #8]
   16e6c:	beq	17f6c <__assert_fail@plt+0x5828>
   16e70:	mov	r3, #0
   16e74:	ldr	fp, [pc, #3120]	; 17aac <__assert_fail@plt+0x5368>
   16e78:	mov	r6, r3
   16e7c:	add	sl, sp, #88	; 0x58
   16e80:	add	r9, sp, #84	; 0x54
   16e84:	str	r3, [sp, #28]
   16e88:	mov	r3, #0
   16e8c:	mov	r2, sl
   16e90:	mov	r1, r9
   16e94:	ldr	r0, [sp, #8]
   16e98:	bl	12024 <gpgrt_read_line@plt>
   16e9c:	cmp	r0, #0
   16ea0:	ble	17934 <__assert_fail@plt+0x51f0>
   16ea4:	ldr	r5, [sp, #84]	; 0x54
   16ea8:	mov	r2, #27
   16eac:	mov	r1, r5
   16eb0:	mov	r0, fp
   16eb4:	bl	126d8 <strncmp@plt>
   16eb8:	cmp	r0, #0
   16ebc:	bne	16f34 <__assert_fail@plt+0x47f0>
   16ec0:	cmp	r6, #0
   16ec4:	bne	17bb0 <__assert_fail@plt+0x546c>
   16ec8:	mov	r7, #1
   16ecc:	ldrb	r3, [r5]
   16ed0:	cmp	r3, #9
   16ed4:	cmpne	r3, #32
   16ed8:	bne	16eec <__assert_fail@plt+0x47a8>
   16edc:	ldrb	r3, [r5, #1]!
   16ee0:	cmp	r3, #9
   16ee4:	cmpne	r3, #32
   16ee8:	beq	16edc <__assert_fail@plt+0x4798>
   16eec:	subs	r2, r3, #13
   16ef0:	movne	r2, #1
   16ef4:	cmp	r3, #0
   16ef8:	moveq	r2, #0
   16efc:	cmp	r3, #10
   16f00:	moveq	r2, #0
   16f04:	andne	r2, r2, #1
   16f08:	cmp	r3, #35	; 0x23
   16f0c:	moveq	r3, #0
   16f10:	andne	r3, r2, #1
   16f14:	cmp	r3, #0
   16f18:	bne	17090 <__assert_fail@plt+0x494c>
   16f1c:	cmp	r6, #0
   16f20:	beq	16f7c <__assert_fail@plt+0x4838>
   16f24:	cmp	r7, #0
   16f28:	beq	17040 <__assert_fail@plt+0x48fc>
   16f2c:	mov	r6, r7
   16f30:	b	16e88 <__assert_fail@plt+0x4744>
   16f34:	ldr	r3, [sp, #12]
   16f38:	cmp	r3, #1
   16f3c:	movne	r3, #0
   16f40:	andeq	r3, r6, #1
   16f44:	cmp	r3, #0
   16f48:	moveq	r7, r6
   16f4c:	moveq	r6, r3
   16f50:	beq	16ecc <__assert_fail@plt+0x4788>
   16f54:	mov	r1, r5
   16f58:	ldr	r0, [pc, #2896]	; 17ab0 <__assert_fail@plt+0x536c>
   16f5c:	bl	12054 <strcmp@plt>
   16f60:	cmp	r0, #0
   16f64:	bne	17130 <__assert_fail@plt+0x49ec>
   16f68:	mov	r3, #1
   16f6c:	ldr	r6, [sp, #28]
   16f70:	mov	r7, r3
   16f74:	str	r3, [sp, #28]
   16f78:	b	16ecc <__assert_fail@plt+0x4788>
   16f7c:	ldr	r2, [sp, #84]	; 0x54
   16f80:	ldr	r1, [pc, #2916]	; 17aec <__assert_fail@plt+0x53a8>
   16f84:	mov	r0, r8
   16f88:	bl	12678 <gpgrt_fprintf@plt>
   16f8c:	mov	r0, r8
   16f90:	bl	121c8 <gpgrt_ferror@plt>
   16f94:	cmp	r0, #0
   16f98:	beq	16f2c <__assert_fail@plt+0x47e8>
   16f9c:	ldr	r0, [sp, #84]	; 0x54
   16fa0:	bl	12150 <gcry_free@plt>
   16fa4:	ldr	r3, [sp, #36]	; 0x24
   16fa8:	mov	r0, r8
   16fac:	ldr	r4, [r3]
   16fb0:	bl	122b8 <gpgrt_fclose@plt>
   16fb4:	ldr	r0, [sp, #44]	; 0x2c
   16fb8:	bl	12708 <close@plt>
   16fbc:	ldr	r0, [sp, #8]
   16fc0:	bl	122b8 <gpgrt_fclose@plt>
   16fc4:	mov	r0, r4
   16fc8:	bl	125dc <gpg_err_set_errno@plt>
   16fcc:	mvn	r4, #0
   16fd0:	bl	22ab4 <__assert_fail@plt+0x10370>
   16fd4:	ldr	r3, [sp, #48]	; 0x30
   16fd8:	add	r7, r3, #32
   16fdc:	ldr	r3, [sp, #36]	; 0x24
   16fe0:	ldr	sl, [sp, #60]	; 0x3c
   16fe4:	ldr	r8, [sp, #56]	; 0x38
   16fe8:	ldr	r9, [r3]
   16fec:	ldr	r5, [sp, #48]	; 0x30
   16ff0:	b	17014 <__assert_fail@plt+0x48d0>
   16ff4:	bl	121b0 <unlink@plt>
   16ff8:	cmp	r6, #0
   16ffc:	beq	17008 <__assert_fail@plt+0x48c4>
   17000:	mov	r0, r6
   17004:	bl	121b0 <unlink@plt>
   17008:	cmp	r7, r5
   1700c:	add	sl, sl, #4
   17010:	beq	16c64 <__assert_fail@plt+0x4520>
   17014:	ldr	r0, [r5], #4
   17018:	ldr	r6, [r8], #4
   1701c:	cmp	r0, #0
   17020:	bne	16ff4 <__assert_fail@plt+0x48b0>
   17024:	cmp	r6, #0
   17028:	ldr	r1, [sl]
   1702c:	beq	179f0 <__assert_fail@plt+0x52ac>
   17030:	mov	r2, r0
   17034:	mov	r0, r6
   17038:	bl	1f618 <__assert_fail@plt+0xced4>
   1703c:	b	17008 <__assert_fail@plt+0x48c4>
   17040:	bl	20ee4 <__assert_fail@plt+0xe7a0>
   17044:	bl	21c58 <__assert_fail@plt+0xf514>
   17048:	ldr	r2, [pc, #2720]	; 17af0 <__assert_fail@plt+0x53ac>
   1704c:	ldr	r1, [pc, #2656]	; 17ab4 <__assert_fail@plt+0x5370>
   17050:	mov	r3, r0
   17054:	mov	r0, r8
   17058:	bl	12678 <gpgrt_fprintf@plt>
   1705c:	mov	r0, r8
   17060:	bl	121c8 <gpgrt_ferror@plt>
   17064:	cmp	r0, #0
   17068:	bne	16f9c <__assert_fail@plt+0x4858>
   1706c:	ldr	r2, [sp, #84]	; 0x54
   17070:	ldr	r1, [pc, #2624]	; 17ab8 <__assert_fail@plt+0x5374>
   17074:	mov	r0, r8
   17078:	bl	12678 <gpgrt_fprintf@plt>
   1707c:	mov	r0, r8
   17080:	bl	121c8 <gpgrt_ferror@plt>
   17084:	subs	r7, r0, #0
   17088:	beq	16f2c <__assert_fail@plt+0x47e8>
   1708c:	b	16f9c <__assert_fail@plt+0x4858>
   17090:	ldrb	r4, [r5]
   17094:	tst	r4, #223	; 0xdf
   17098:	beq	17ba8 <__assert_fail@plt+0x5464>
   1709c:	cmp	r4, #9
   170a0:	beq	17ba8 <__assert_fail@plt+0x5464>
   170a4:	cmp	r4, #13
   170a8:	beq	17ba8 <__assert_fail@plt+0x5464>
   170ac:	cmp	r4, #10
   170b0:	beq	17ba8 <__assert_fail@plt+0x5464>
   170b4:	mov	r3, r5
   170b8:	b	170e0 <__assert_fail@plt+0x499c>
   170bc:	ldrb	r4, [r3, #1]!
   170c0:	tst	r4, #223	; 0xdf
   170c4:	beq	170e8 <__assert_fail@plt+0x49a4>
   170c8:	cmp	r4, #9
   170cc:	beq	170e8 <__assert_fail@plt+0x49a4>
   170d0:	cmp	r4, #13
   170d4:	beq	170e8 <__assert_fail@plt+0x49a4>
   170d8:	cmp	r4, #10
   170dc:	beq	170e8 <__assert_fail@plt+0x49a4>
   170e0:	cmp	r4, #35	; 0x23
   170e4:	bne	170bc <__assert_fail@plt+0x4978>
   170e8:	mov	r2, #0
   170ec:	strb	r2, [r3]
   170f0:	mov	r1, r5
   170f4:	ldr	r2, [sp, #12]
   170f8:	ldr	r0, [sp, #24]
   170fc:	str	r3, [sp, #40]	; 0x28
   17100:	bl	13e9c <__assert_fail@plt+0x1758>
   17104:	ldr	r3, [sp, #40]	; 0x28
   17108:	strb	r4, [r3]
   1710c:	cmp	r0, #0
   17110:	beq	16f1c <__assert_fail@plt+0x47d8>
   17114:	ldr	r3, [r0, #44]	; 0x2c
   17118:	tst	r3, #16
   1711c:	bne	16f24 <__assert_fail@plt+0x47e0>
   17120:	ldr	r3, [r0, #48]	; 0x30
   17124:	cmp	r3, #0
   17128:	bne	16f24 <__assert_fail@plt+0x47e0>
   1712c:	b	16f1c <__assert_fail@plt+0x47d8>
   17130:	mov	r6, #0
   17134:	b	16ec8 <__assert_fail@plt+0x4784>
   17138:	ldr	r3, [sp, #8]
   1713c:	str	r3, [sp, #28]
   17140:	ldr	r2, [pc, #2404]	; 17aac <__assert_fail@plt+0x5368>
   17144:	ldr	r1, [pc, #2448]	; 17adc <__assert_fail@plt+0x5398>
   17148:	mov	r0, r8
   1714c:	bl	12678 <gpgrt_fprintf@plt>
   17150:	mov	r0, r8
   17154:	bl	121c8 <gpgrt_ferror@plt>
   17158:	subs	r6, r0, #0
   1715c:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17160:	ldr	r3, [sp, #28]
   17164:	ldr	r2, [sp, #12]
   17168:	eor	r3, r3, #1
   1716c:	cmp	r2, #1
   17170:	movne	r3, #0
   17174:	andeq	r3, r3, #1
   17178:	cmp	r3, #0
   1717c:	bne	1788c <__assert_fail@plt+0x5148>
   17180:	ldr	r3, [pc, #2316]	; 17a94 <__assert_fail@plt+0x5350>
   17184:	ldr	r2, [sp, #52]	; 0x34
   17188:	add	r3, r3, r2
   1718c:	ldr	r4, [r3, #12]
   17190:	ldr	r3, [r4]
   17194:	cmp	r3, #0
   17198:	beq	1734c <__assert_fail@plt+0x4c08>
   1719c:	ldr	sl, [sp, #12]
   171a0:	ldr	r7, [pc, #2360]	; 17ae0 <__assert_fail@plt+0x539c>
   171a4:	add	r4, r4, #52	; 0x34
   171a8:	mov	r9, #44	; 0x2c
   171ac:	str	r6, [sp, #12]
   171b0:	b	171c0 <__assert_fail@plt+0x4a7c>
   171b4:	ldr	r3, [r4], #52	; 0x34
   171b8:	cmp	r3, #0
   171bc:	beq	17348 <__assert_fail@plt+0x4c04>
   171c0:	ldr	r3, [r4, #-48]	; 0xffffffd0
   171c4:	tst	r3, #1
   171c8:	bne	171b4 <__assert_fail@plt+0x4a70>
   171cc:	ldr	r3, [r4, #-28]	; 0xffffffe4
   171d0:	cmp	sl, r3
   171d4:	bne	171b4 <__assert_fail@plt+0x4a70>
   171d8:	ldr	r6, [r4, #-4]
   171dc:	cmp	r6, #0
   171e0:	beq	171b4 <__assert_fail@plt+0x4a70>
   171e4:	ldrb	r1, [r6]
   171e8:	b	17240 <__assert_fail@plt+0x4afc>
   171ec:	cmp	r1, #49	; 0x31
   171f0:	bne	17f20 <__assert_fail@plt+0x57dc>
   171f4:	ldr	r2, [r4, #-52]	; 0xffffffcc
   171f8:	mov	r1, r7
   171fc:	mov	r0, r8
   17200:	bl	12678 <gpgrt_fprintf@plt>
   17204:	mov	r0, r8
   17208:	bl	121c8 <gpgrt_ferror@plt>
   1720c:	cmp	r0, #0
   17210:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17214:	adds	r6, r6, #1
   17218:	beq	171b4 <__assert_fail@plt+0x4a70>
   1721c:	ldrb	r3, [r6]
   17220:	cmp	r3, #44	; 0x2c
   17224:	cmpne	r3, #0
   17228:	bne	17f34 <__assert_fail@plt+0x57f0>
   1722c:	cmp	r3, #44	; 0x2c
   17230:	beq	174d0 <__assert_fail@plt+0x4d8c>
   17234:	ldrb	r1, [r6]
   17238:	cmp	r1, #0
   1723c:	beq	171b4 <__assert_fail@plt+0x4a70>
   17240:	cmp	r1, #0
   17244:	sub	r5, r1, #44	; 0x2c
   17248:	clz	r5, r5
   1724c:	lsr	r5, r5, #5
   17250:	moveq	r5, #1
   17254:	cmp	r5, #0
   17258:	bne	172c8 <__assert_fail@plt+0x4b84>
   1725c:	ldr	r3, [r4, #-32]	; 0xffffffe0
   17260:	ldr	r2, [pc, #2092]	; 17a94 <__assert_fail@plt+0x5350>
   17264:	add	r3, r2, r3, lsl #3
   17268:	ldr	r3, [r3, #308]	; 0x134
   1726c:	cmp	r3, #0
   17270:	beq	171ec <__assert_fail@plt+0x4aa8>
   17274:	cmp	r3, #1
   17278:	beq	17484 <__assert_fail@plt+0x4d40>
   1727c:	mov	r1, #44	; 0x2c
   17280:	mov	r0, r6
   17284:	bl	12408 <strchr@plt>
   17288:	subs	fp, r0, #0
   1728c:	beq	17318 <__assert_fail@plt+0x4bd4>
   17290:	strb	r5, [fp]
   17294:	ldr	r2, [r4, #-52]	; 0xffffffcc
   17298:	mov	r3, r6
   1729c:	ldr	r1, [pc, #2116]	; 17ae8 <__assert_fail@plt+0x53a4>
   172a0:	mov	r0, r8
   172a4:	bl	12678 <gpgrt_fprintf@plt>
   172a8:	mov	r0, r8
   172ac:	bl	121c8 <gpgrt_ferror@plt>
   172b0:	cmp	r0, #0
   172b4:	bne	172e8 <__assert_fail@plt+0x4ba4>
   172b8:	strb	r9, [fp]
   172bc:	adds	r6, fp, #1
   172c0:	bne	17234 <__assert_fail@plt+0x4af0>
   172c4:	b	171b4 <__assert_fail@plt+0x4a70>
   172c8:	ldr	r2, [r4, #-52]	; 0xffffffcc
   172cc:	mov	r1, r7
   172d0:	mov	r0, r8
   172d4:	bl	12678 <gpgrt_fprintf@plt>
   172d8:	mov	r0, r8
   172dc:	bl	121c8 <gpgrt_ferror@plt>
   172e0:	cmp	r0, #0
   172e4:	beq	1721c <__assert_fail@plt+0x4ad8>
   172e8:	ldr	r0, [sp, #84]	; 0x54
   172ec:	bl	12150 <gcry_free@plt>
   172f0:	ldr	r3, [sp, #36]	; 0x24
   172f4:	mov	r0, r8
   172f8:	ldr	r4, [r3]
   172fc:	bl	122b8 <gpgrt_fclose@plt>
   17300:	ldr	r0, [sp, #44]	; 0x2c
   17304:	bl	12708 <close@plt>
   17308:	ldr	r3, [sp, #8]
   1730c:	cmp	r3, #0
   17310:	beq	16fc4 <__assert_fail@plt+0x4880>
   17314:	b	16fbc <__assert_fail@plt+0x4878>
   17318:	mov	r3, r6
   1731c:	ldr	r2, [r4, #-52]	; 0xffffffcc
   17320:	ldr	r1, [pc, #1984]	; 17ae8 <__assert_fail@plt+0x53a4>
   17324:	mov	r0, r8
   17328:	bl	12678 <gpgrt_fprintf@plt>
   1732c:	mov	r0, r8
   17330:	bl	121c8 <gpgrt_ferror@plt>
   17334:	cmp	r0, #0
   17338:	bne	172e8 <__assert_fail@plt+0x4ba4>
   1733c:	ldr	r3, [r4], #52	; 0x34
   17340:	cmp	r3, #0
   17344:	bne	171c0 <__assert_fail@plt+0x4a7c>
   17348:	ldr	r6, [sp, #12]
   1734c:	bl	20ee4 <__assert_fail@plt+0xe7a0>
   17350:	bl	21c58 <__assert_fail@plt+0xf514>
   17354:	ldr	r2, [pc, #1872]	; 17aac <__assert_fail@plt+0x5368>
   17358:	ldr	r1, [pc, #1928]	; 17ae8 <__assert_fail@plt+0x53a4>
   1735c:	mov	r3, r0
   17360:	mov	r0, r8
   17364:	bl	12678 <gpgrt_fprintf@plt>
   17368:	mov	r0, r8
   1736c:	bl	121c8 <gpgrt_ferror@plt>
   17370:	cmp	r0, #0
   17374:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17378:	cmp	r6, #0
   1737c:	beq	17d60 <__assert_fail@plt+0x561c>
   17380:	ldr	r5, [sp, #8]
   17384:	cmp	r5, #0
   17388:	beq	17dc4 <__assert_fail@plt+0x5680>
   1738c:	add	sl, sp, #88	; 0x58
   17390:	add	r9, sp, #84	; 0x54
   17394:	ldr	r4, [pc, #1872]	; 17aec <__assert_fail@plt+0x53a8>
   17398:	b	173bc <__assert_fail@plt+0x4c78>
   1739c:	ldr	r2, [sp, #84]	; 0x54
   173a0:	mov	r1, r4
   173a4:	mov	r0, r8
   173a8:	bl	12678 <gpgrt_fprintf@plt>
   173ac:	mov	r0, r8
   173b0:	bl	121c8 <gpgrt_ferror@plt>
   173b4:	cmp	r0, #0
   173b8:	bne	16f9c <__assert_fail@plt+0x4858>
   173bc:	mov	r3, #0
   173c0:	mov	r2, sl
   173c4:	mov	r1, r9
   173c8:	mov	r0, r5
   173cc:	bl	12024 <gpgrt_read_line@plt>
   173d0:	cmp	r0, #0
   173d4:	bgt	1739c <__assert_fail@plt+0x4c58>
   173d8:	bne	16f9c <__assert_fail@plt+0x4858>
   173dc:	ldr	r0, [sp, #8]
   173e0:	bl	121c8 <gpgrt_ferror@plt>
   173e4:	subs	r4, r0, #0
   173e8:	bne	16f9c <__assert_fail@plt+0x4858>
   173ec:	ldr	r0, [sp, #84]	; 0x54
   173f0:	bl	12150 <gcry_free@plt>
   173f4:	mov	r0, r8
   173f8:	str	r4, [sp, #84]	; 0x54
   173fc:	bl	122b8 <gpgrt_fclose@plt>
   17400:	cmp	r0, #0
   17404:	bne	17f90 <__assert_fail@plt+0x584c>
   17408:	ldr	r0, [sp, #44]	; 0x2c
   1740c:	bl	12708 <close@plt>
   17410:	ldr	r0, [sp, #8]
   17414:	bl	122b8 <gpgrt_fclose@plt>
   17418:	cmp	r0, #0
   1741c:	bne	17d58 <__assert_fail@plt+0x5614>
   17420:	ldr	r3, [sp, #16]
   17424:	add	r2, sp, #224	; 0xe0
   17428:	ldr	r1, [sp, #64]	; 0x40
   1742c:	ldr	r3, [r3, #-28]	; 0xffffffe4
   17430:	ldr	r0, [sp, #24]
   17434:	add	r3, r2, r3, lsl #2
   17438:	ldr	r2, [r3, #-100]	; 0xffffff9c
   1743c:	bl	15788 <__assert_fail@plt+0x3044>
   17440:	cmp	r0, #0
   17444:	beq	16d20 <__assert_fail@plt+0x45dc>
   17448:	mov	r4, r0
   1744c:	mov	r2, #5
   17450:	ldr	r1, [pc, #1636]	; 17abc <__assert_fail@plt+0x5378>
   17454:	mov	r0, #0
   17458:	bl	12180 <dcgettext@plt>
   1745c:	ldr	r2, [sp, #24]
   17460:	ldr	r3, [pc, #1580]	; 17a94 <__assert_fail@plt+0x5350>
   17464:	mov	r1, #0
   17468:	ldr	r3, [r3, r2, lsl #4]
   1746c:	mov	r2, r0
   17470:	mov	r0, r1
   17474:	bl	14234 <__assert_fail@plt+0x1af0>
   17478:	mov	r0, #22
   1747c:	bl	125dc <gpg_err_set_errno@plt>
   17480:	b	16fd0 <__assert_fail@plt+0x488c>
   17484:	ldr	r3, [sp, #32]
   17488:	cmp	r3, #0
   1748c:	bne	17318 <__assert_fail@plt+0x4bd4>
   17490:	cmp	r1, #34	; 0x22
   17494:	bne	18018 <__assert_fail@plt+0x58d4>
   17498:	add	r6, r6, #1
   1749c:	mov	r0, r6
   174a0:	mov	r1, #44	; 0x2c
   174a4:	bl	12408 <strchr@plt>
   174a8:	subs	fp, r0, #0
   174ac:	beq	17828 <__assert_fail@plt+0x50e4>
   174b0:	ldr	r3, [sp, #32]
   174b4:	mov	r0, r6
   174b8:	strb	r3, [fp]
   174bc:	ldr	r5, [r4, #-52]	; 0xffffffcc
   174c0:	bl	14704 <__assert_fail@plt+0x1fc0>
   174c4:	mov	r2, r5
   174c8:	mov	r3, r0
   174cc:	b	1729c <__assert_fail@plt+0x4b58>
   174d0:	mov	fp, r6
   174d4:	b	172bc <__assert_fail@plt+0x4b78>
   174d8:	ldr	r1, [r3, #116]	; 0x74
   174dc:	mov	r2, r7
   174e0:	ldr	r0, [sp, #24]
   174e4:	str	r7, [sp, #84]	; 0x54
   174e8:	bl	13e9c <__assert_fail@plt+0x1758>
   174ec:	subs	r3, r0, #0
   174f0:	str	r3, [sp, #8]
   174f4:	beq	18040 <__assert_fail@plt+0x58fc>
   174f8:	ldr	r3, [sp, #8]
   174fc:	ldr	r3, [r3, #28]
   17500:	cmp	r3, #0
   17504:	beq	18004 <__assert_fail@plt+0x58c0>
   17508:	ldr	r3, [sp, #8]
   1750c:	ldr	r2, [pc, #1408]	; 17a94 <__assert_fail@plt+0x5350>
   17510:	ldr	r3, [r3, #20]
   17514:	add	r3, r2, r3, lsl #3
   17518:	ldr	r3, [r3, #308]	; 0x134
   1751c:	cmp	r3, #0
   17520:	beq	1802c <__assert_fail@plt+0x58e8>
   17524:	ldr	r1, [sp, #12]
   17528:	ldr	r0, [sp, #24]
   1752c:	bl	147dc <__assert_fail@plt+0x2098>
   17530:	bl	12528 <gcry_xstrdup@plt>
   17534:	mov	r8, r0
   17538:	bl	123b4 <getpid@plt>
   1753c:	ldr	r2, [pc, #1364]	; 17a98 <__assert_fail@plt+0x5354>
   17540:	mov	r1, r8
   17544:	mov	r3, r0
   17548:	ldr	r0, [pc, #1356]	; 17a9c <__assert_fail@plt+0x5358>
   1754c:	bl	226c8 <__assert_fail@plt+0xff84>
   17550:	mov	sl, r0
   17554:	bl	123b4 <getpid@plt>
   17558:	ldr	r2, [pc, #1336]	; 17a98 <__assert_fail@plt+0x5354>
   1755c:	mov	r1, r8
   17560:	mov	r3, r0
   17564:	ldr	r0, [pc, #1332]	; 17aa0 <__assert_fail@plt+0x535c>
   17568:	bl	226c8 <__assert_fail@plt+0xff84>
   1756c:	ldr	r3, [sp, #8]
   17570:	ldr	r4, [r3, #48]	; 0x30
   17574:	cmp	r4, #0
   17578:	moveq	r6, r4
   1757c:	mov	fp, r0
   17580:	beq	17594 <__assert_fail@plt+0x4e50>
   17584:	ldrb	r6, [r4]
   17588:	cmp	r6, #0
   1758c:	moveq	r4, r6
   17590:	bne	17954 <__assert_fail@plt+0x5210>
   17594:	mov	r1, fp
   17598:	mov	r0, r8
   1759c:	bl	124ec <link@plt>
   175a0:	mov	r7, r0
   175a4:	bl	1245c <__errno_location@plt>
   175a8:	cmp	r7, #0
   175ac:	str	r0, [sp, #36]	; 0x24
   175b0:	blt	179fc <__assert_fail@plt+0x52b8>
   175b4:	add	r3, sp, #224	; 0xe0
   175b8:	add	r5, r3, r5
   175bc:	mov	r0, sl
   175c0:	mov	r2, #420	; 0x1a4
   175c4:	mov	r1, #193	; 0xc1
   175c8:	str	sl, [r5, #-100]	; 0xffffff9c
   175cc:	str	r8, [r5, #-68]	; 0xffffffbc
   175d0:	str	fp, [r5, #-36]	; 0xffffffdc
   175d4:	bl	122dc <open64@plt>
   175d8:	subs	r3, r0, #0
   175dc:	str	r3, [sp, #12]
   175e0:	blt	17d58 <__assert_fail@plt+0x5614>
   175e4:	ldr	r1, [pc, #1208]	; 17aa4 <__assert_fail@plt+0x5360>
   175e8:	bl	12300 <gpgrt_fdopen@plt>
   175ec:	subs	r7, r0, #0
   175f0:	beq	17f0c <__assert_fail@plt+0x57c8>
   175f4:	cmp	fp, #0
   175f8:	beq	17be0 <__assert_fail@plt+0x549c>
   175fc:	mov	r0, r8
   17600:	ldr	r1, [pc, #1184]	; 17aa8 <__assert_fail@plt+0x5364>
   17604:	bl	124e0 <gpgrt_fopen@plt>
   17608:	subs	fp, r0, #0
   1760c:	beq	17f48 <__assert_fail@plt+0x5804>
   17610:	mov	r5, #0
   17614:	add	sl, sp, #88	; 0x58
   17618:	add	r9, sp, #84	; 0x54
   1761c:	mov	r3, #0
   17620:	mov	r2, sl
   17624:	mov	r1, r9
   17628:	mov	r0, fp
   1762c:	bl	12024 <gpgrt_read_line@plt>
   17630:	cmp	r0, #0
   17634:	ble	17bc4 <__assert_fail@plt+0x5480>
   17638:	ldr	r8, [sp, #84]	; 0x54
   1763c:	mov	r2, #27
   17640:	mov	r1, r8
   17644:	ldr	r0, [pc, #1176]	; 17ae4 <__assert_fail@plt+0x53a0>
   17648:	bl	126d8 <strncmp@plt>
   1764c:	cmp	r0, #0
   17650:	bne	17660 <__assert_fail@plt+0x4f1c>
   17654:	cmp	r5, #0
   17658:	bne	17eb8 <__assert_fail@plt+0x5774>
   1765c:	mov	r5, #1
   17660:	ldrb	r3, [r8]
   17664:	mov	r0, r8
   17668:	cmp	r3, #9
   1766c:	cmpne	r3, #32
   17670:	bne	17684 <__assert_fail@plt+0x4f40>
   17674:	ldrb	r3, [r0, #1]!
   17678:	cmp	r3, #9
   1767c:	cmpne	r3, #32
   17680:	beq	17674 <__assert_fail@plt+0x4f30>
   17684:	subs	r2, r3, #13
   17688:	movne	r2, #1
   1768c:	cmp	r3, #0
   17690:	moveq	r2, #0
   17694:	cmp	r3, #10
   17698:	moveq	r2, #0
   1769c:	andne	r2, r2, #1
   176a0:	cmp	r3, #35	; 0x23
   176a4:	moveq	r3, #0
   176a8:	andne	r3, r2, #1
   176ac:	cmp	r3, #0
   176b0:	bne	17700 <__assert_fail@plt+0x4fbc>
   176b4:	mov	r2, r8
   176b8:	ldr	r1, [pc, #1068]	; 17aec <__assert_fail@plt+0x53a8>
   176bc:	mov	r0, r7
   176c0:	bl	12678 <gpgrt_fprintf@plt>
   176c4:	mov	r0, r7
   176c8:	bl	121c8 <gpgrt_ferror@plt>
   176cc:	cmp	r0, #0
   176d0:	beq	1761c <__assert_fail@plt+0x4ed8>
   176d4:	ldr	r0, [sp, #84]	; 0x54
   176d8:	bl	12150 <gcry_free@plt>
   176dc:	ldr	r3, [sp, #36]	; 0x24
   176e0:	mov	r0, r7
   176e4:	ldr	r4, [r3]
   176e8:	bl	122b8 <gpgrt_fclose@plt>
   176ec:	ldr	r0, [sp, #12]
   176f0:	bl	12708 <close@plt>
   176f4:	mov	r0, fp
   176f8:	bl	122b8 <gpgrt_fclose@plt>
   176fc:	b	16fc4 <__assert_fail@plt+0x4880>
   17700:	ldrb	r3, [r0]
   17704:	mov	r1, r0
   17708:	mov	r8, r0
   1770c:	b	17744 <__assert_fail@plt+0x5000>
   17710:	ldrb	r3, [r1, #1]!
   17714:	cmp	r3, #35	; 0x23
   17718:	cmpne	r3, #13
   1771c:	movne	r2, #1
   17720:	moveq	r2, #0
   17724:	tst	r3, #223	; 0xdf
   17728:	moveq	r2, #0
   1772c:	sub	ip, r3, #9
   17730:	cmp	ip, #1
   17734:	movls	r2, #0
   17738:	andhi	r2, r2, #1
   1773c:	cmp	r2, #0
   17740:	addne	r8, r1, #1
   17744:	subs	r2, r3, #35	; 0x23
   17748:	movne	r2, #1
   1774c:	cmp	r3, #0
   17750:	moveq	r2, #0
   17754:	cmp	r3, #13
   17758:	moveq	r2, #0
   1775c:	andne	r2, r2, #1
   17760:	cmp	r3, #10
   17764:	moveq	r3, #0
   17768:	andne	r3, r2, #1
   1776c:	cmp	r3, #0
   17770:	bne	17710 <__assert_fail@plt+0x4fcc>
   17774:	ldrb	r2, [r8]
   17778:	strb	r3, [r8]
   1777c:	ldr	r3, [sp, #8]
   17780:	ldr	r3, [r3, #44]	; 0x2c
   17784:	tst	r3, #16
   17788:	bne	177b0 <__assert_fail@plt+0x506c>
   1778c:	cmp	r6, #0
   17790:	beq	177b0 <__assert_fail@plt+0x506c>
   17794:	mov	r1, r6
   17798:	str	r2, [sp, #28]
   1779c:	bl	12054 <strcmp@plt>
   177a0:	ldr	r2, [sp, #28]
   177a4:	subs	r3, r0, #0
   177a8:	str	r3, [sp, #40]	; 0x28
   177ac:	beq	179a0 <__assert_fail@plt+0x525c>
   177b0:	cmp	r5, #0
   177b4:	strb	r2, [r8]
   177b8:	bne	1761c <__assert_fail@plt+0x4ed8>
   177bc:	bl	20ee4 <__assert_fail@plt+0xe7a0>
   177c0:	bl	21c58 <__assert_fail@plt+0xf514>
   177c4:	ldr	r2, [pc, #804]	; 17af0 <__assert_fail@plt+0x53ac>
   177c8:	ldr	r1, [pc, #740]	; 17ab4 <__assert_fail@plt+0x5370>
   177cc:	mov	r3, r0
   177d0:	mov	r0, r7
   177d4:	bl	12678 <gpgrt_fprintf@plt>
   177d8:	mov	r0, r7
   177dc:	bl	121c8 <gpgrt_ferror@plt>
   177e0:	cmp	r0, #0
   177e4:	bne	176d4 <__assert_fail@plt+0x4f90>
   177e8:	ldr	r2, [sp, #84]	; 0x54
   177ec:	ldr	r1, [pc, #708]	; 17ab8 <__assert_fail@plt+0x5374>
   177f0:	mov	r0, r7
   177f4:	bl	12678 <gpgrt_fprintf@plt>
   177f8:	mov	r0, r7
   177fc:	bl	121c8 <gpgrt_ferror@plt>
   17800:	subs	r5, r0, #0
   17804:	beq	1761c <__assert_fail@plt+0x4ed8>
   17808:	b	176d4 <__assert_fail@plt+0x4f90>
   1780c:	ldr	r3, [r0]
   17810:	cmp	r3, #2
   17814:	bne	17eec <__assert_fail@plt+0x57a8>
   17818:	ldr	r0, [sp, #8]
   1781c:	bl	12150 <gcry_free@plt>
   17820:	str	r7, [sp, #8]
   17824:	b	16e08 <__assert_fail@plt+0x46c4>
   17828:	mov	r0, r6
   1782c:	ldr	r5, [r4, #-52]	; 0xffffffcc
   17830:	bl	14704 <__assert_fail@plt+0x1fc0>
   17834:	mov	r2, r5
   17838:	ldr	r1, [pc, #680]	; 17ae8 <__assert_fail@plt+0x53a4>
   1783c:	mov	r3, r0
   17840:	mov	r0, r8
   17844:	bl	12678 <gpgrt_fprintf@plt>
   17848:	mov	r0, r8
   1784c:	bl	121c8 <gpgrt_ferror@plt>
   17850:	cmp	r0, #0
   17854:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17858:	b	171b4 <__assert_fail@plt+0x4a70>
   1785c:	mov	r3, r5
   17860:	ldr	r2, [pc, #600]	; 17ac0 <__assert_fail@plt+0x537c>
   17864:	mov	r1, fp
   17868:	mov	r0, #1
   1786c:	bl	14234 <__assert_fail@plt+0x1af0>
   17870:	b	16c10 <__assert_fail@plt+0x44cc>
   17874:	ldr	r3, [sp, #76]	; 0x4c
   17878:	ldr	r2, [pc, #580]	; 17ac4 <__assert_fail@plt+0x5380>
   1787c:	mov	r1, #0
   17880:	mov	r0, #1
   17884:	bl	14234 <__assert_fail@plt+0x1af0>
   17888:	b	16bd4 <__assert_fail@plt+0x4490>
   1788c:	ldr	r1, [pc, #540]	; 17ab0 <__assert_fail@plt+0x536c>
   17890:	mov	r0, r8
   17894:	bl	12678 <gpgrt_fprintf@plt>
   17898:	b	17180 <__assert_fail@plt+0x4a3c>
   1789c:	ldr	r8, [pc, #548]	; 17ac8 <__assert_fail@plt+0x5384>
   178a0:	bl	22ab4 <__assert_fail@plt+0x10370>
   178a4:	ldr	r3, [r8, #8]
   178a8:	cmp	r3, #0
   178ac:	bne	17988 <__assert_fail@plt+0x5244>
   178b0:	ldr	r5, [sp, #48]	; 0x30
   178b4:	ldr	r9, [sp, #60]	; 0x3c
   178b8:	add	r7, r5, #32
   178bc:	ldr	r6, [sp, #56]	; 0x38
   178c0:	b	178f4 <__assert_fail@plt+0x51b0>
   178c4:	mov	r2, #0
   178c8:	bl	1f618 <__assert_fail@plt+0xced4>
   178cc:	mov	r4, r0
   178d0:	cmp	r4, #0
   178d4:	bne	17928 <__assert_fail@plt+0x51e4>
   178d8:	ldr	r0, [r5, #-4]
   178dc:	bl	12150 <gcry_free@plt>
   178e0:	str	r4, [r5, #-4]
   178e4:	cmp	r5, r7
   178e8:	add	r6, r6, #4
   178ec:	add	r9, r9, #4
   178f0:	beq	17a18 <__assert_fail@plt+0x52d4>
   178f4:	ldr	sl, [r5], #4
   178f8:	cmp	sl, #0
   178fc:	beq	178e4 <__assert_fail@plt+0x51a0>
   17900:	ldr	r1, [r9]
   17904:	cmp	r1, #0
   17908:	beq	18054 <__assert_fail@plt+0x5910>
   1790c:	ldr	r3, [r6]
   17910:	mov	r0, sl
   17914:	cmp	r3, #0
   17918:	bne	178c4 <__assert_fail@plt+0x5180>
   1791c:	bl	124ec <link@plt>
   17920:	subs	r4, r0, #0
   17924:	beq	17e74 <__assert_fail@plt+0x5730>
   17928:	bl	1245c <__errno_location@plt>
   1792c:	str	r0, [sp, #36]	; 0x24
   17930:	b	16fdc <__assert_fail@plt+0x4898>
   17934:	bne	16f9c <__assert_fail@plt+0x4858>
   17938:	ldr	r0, [sp, #8]
   1793c:	bl	121c8 <gpgrt_ferror@plt>
   17940:	cmp	r0, #0
   17944:	bne	16f9c <__assert_fail@plt+0x4858>
   17948:	cmp	r6, #0
   1794c:	bne	17160 <__assert_fail@plt+0x4a1c>
   17950:	b	17140 <__assert_fail@plt+0x49fc>
   17954:	add	r6, r4, #1
   17958:	mov	r0, r6
   1795c:	mov	r1, #44	; 0x2c
   17960:	bl	12408 <strchr@plt>
   17964:	subs	r4, r0, #0
   17968:	beq	17e94 <__assert_fail@plt+0x5750>
   1796c:	strb	r7, [r4]
   17970:	mov	r0, r6
   17974:	bl	14704 <__assert_fail@plt+0x1fc0>
   17978:	mov	r3, #44	; 0x2c
   1797c:	strb	r3, [r4], #1
   17980:	mov	r6, r0
   17984:	b	17594 <__assert_fail@plt+0x4e50>
   17988:	ldr	r3, [sp, #48]	; 0x30
   1798c:	add	r7, r3, #32
   17990:	bl	1245c <__errno_location@plt>
   17994:	mov	r4, #0
   17998:	str	r0, [sp, #36]	; 0x24
   1799c:	b	16fdc <__assert_fail@plt+0x4898>
   179a0:	cmp	r4, #0
   179a4:	beq	17e84 <__assert_fail@plt+0x5740>
   179a8:	add	r6, r4, #1
   179ac:	mov	r0, r6
   179b0:	mov	r1, #44	; 0x2c
   179b4:	bl	12408 <strchr@plt>
   179b8:	ldr	r2, [sp, #28]
   179bc:	subs	r4, r0, #0
   179c0:	beq	17ecc <__assert_fail@plt+0x5788>
   179c4:	ldr	r3, [sp, #40]	; 0x28
   179c8:	mov	r0, r6
   179cc:	strb	r3, [r4]
   179d0:	bl	14704 <__assert_fail@plt+0x1fc0>
   179d4:	ldr	r2, [sp, #28]
   179d8:	mov	r3, #44	; 0x2c
   179dc:	strb	r3, [r4], #1
   179e0:	strb	r2, [r8]
   179e4:	ldr	r8, [sp, #84]	; 0x54
   179e8:	mov	r6, r0
   179ec:	b	176b4 <__assert_fail@plt+0x4f70>
   179f0:	mov	r0, r1
   179f4:	bl	121b0 <unlink@plt>
   179f8:	b	17008 <__assert_fail@plt+0x48c4>
   179fc:	ldr	r3, [r0]
   17a00:	cmp	r3, #2
   17a04:	bne	17fc0 <__assert_fail@plt+0x587c>
   17a08:	mov	r0, fp
   17a0c:	bl	12150 <gcry_free@plt>
   17a10:	mov	fp, #0
   17a14:	b	175b4 <__assert_fail@plt+0x4e70>
   17a18:	ldr	r3, [r8, #8]
   17a1c:	cmp	r3, #0
   17a20:	bne	17990 <__assert_fail@plt+0x524c>
   17a24:	ldr	r3, [r8, #12]
   17a28:	cmp	r3, #0
   17a2c:	beq	17a68 <__assert_fail@plt+0x5324>
   17a30:	ldr	r4, [pc, #148]	; 17acc <__assert_fail@plt+0x5388>
   17a34:	ldr	r6, [sp, #48]	; 0x30
   17a38:	ldr	r5, [sp, #68]	; 0x44
   17a3c:	ldr	r3, [r5], #4
   17a40:	cmp	r3, #0
   17a44:	beq	17a5c <__assert_fail@plt+0x5318>
   17a48:	ldr	r3, [r4, #12]
   17a4c:	cmp	r3, #0
   17a50:	beq	17a5c <__assert_fail@plt+0x5318>
   17a54:	mov	r0, #0
   17a58:	blx	r3
   17a5c:	cmp	r6, r5
   17a60:	add	r4, r4, #24
   17a64:	bne	17a3c <__assert_fail@plt+0x52f8>
   17a68:	ldr	r4, [sp, #56]	; 0x38
   17a6c:	ldr	r5, [sp, #60]	; 0x3c
   17a70:	add	r8, r4, #32
   17a74:	ldr	sl, [pc, #28]	; 17a98 <__assert_fail@plt+0x5354>
   17a78:	ldr	r9, [pc, #80]	; 17ad0 <__assert_fail@plt+0x538c>
   17a7c:	b	17b7c <__assert_fail@plt+0x5438>
   17a80:	andeq	sl, r3, r8, asr fp
   17a84:	andeq	r6, r2, r4, ror #29
   17a88:	andeq	r6, r2, r4, asr #24
   17a8c:	andeq	r6, r2, ip, ror #23
   17a90:	andeq	r6, r2, r8, ror #24
   17a94:	muleq	r2, r4, r0
   17a98:	muleq	r2, r4, r8
   17a9c:	andeq	r6, r2, r4, lsl #25
   17aa0:	muleq	r2, r4, ip
   17aa4:	andeq	r5, r2, r4, lsl #15
   17aa8:	andeq	r8, r2, ip, asr #19
   17aac:	andeq	r6, r2, r0, ror #7
   17ab0:	andeq	r6, r2, r4, lsr #25
   17ab4:			; <UNDEFINED> instruction: 0x00026cbc
   17ab8:	andeq	r6, r2, r4, ror #25
   17abc:	ldrdeq	r6, [r2], -r8
   17ac0:	andeq	r6, r2, r0, lsr ip
   17ac4:	andeq	r6, r2, ip, lsl #24
   17ac8:	muleq	r3, r4, r5
   17acc:	strdeq	r6, [r2], -r4
   17ad0:	muleq	r2, ip, lr
   17ad4:	andeq	r0, r0, r9, ror #27
   17ad8:	andeq	r6, r2, r4, lsl #29
   17adc:	andeq	r6, r2, ip, ror #25
   17ae0:	muleq	r2, r8, r9
   17ae4:	andeq	r6, r2, r0, asr #8
   17ae8:	strdeq	r6, [r2], -r4
   17aec:	andeq	r6, r2, r8, lsl #20
   17af0:			; <UNDEFINED> instruction: 0x00026cb4
   17af4:	andeq	r6, r2, r0, asr #26
   17af8:	andeq	r6, r2, r8, ror #26
   17afc:	andeq	r6, r2, ip, lsr #27
   17b00:	andeq	r6, r2, r8, ror #28
   17b04:	andeq	r0, r0, r2, asr ip
   17b08:	strdeq	r6, [r2], -ip
   17b0c:	strdeq	r6, [r2], -ip
   17b10:	andeq	r6, r2, r4, lsl sp
   17b14:	andeq	r0, r0, r4, lsl #25
   17b18:	andeq	r0, r0, r1, ror sl
   17b1c:	andeq	r6, r2, r8, lsl #28
   17b20:	andeq	r6, r2, r4, lsl r4
   17b24:	andeq	r6, r2, r8, lsl #26
   17b28:	andeq	r0, r0, r2, ror sl
   17b2c:	andeq	r6, r2, r8, lsl lr
   17b30:	andeq	r6, r2, ip, lsr #8
   17b34:	ldrdeq	r8, [r2], -ip
   17b38:	muleq	r0, lr, sp
   17b3c:	andeq	r6, r2, r4, asr lr
   17b40:	andeq	r6, r2, r0, lsr #11
   17b44:	andeq	r6, r2, ip, asr r4
   17b48:	mov	r2, sl
   17b4c:	mov	r0, r9
   17b50:	bl	226c8 <__assert_fail@plt+0xff84>
   17b54:	mov	r2, #0
   17b58:	mov	fp, r0
   17b5c:	mov	r1, r0
   17b60:	mov	r0, r6
   17b64:	bl	1f618 <__assert_fail@plt+0xced4>
   17b68:	mov	r0, fp
   17b6c:	bl	12150 <gcry_free@plt>
   17b70:	cmp	r8, r4
   17b74:	add	r5, r5, #4
   17b78:	beq	16c6c <__assert_fail@plt+0x4528>
   17b7c:	ldr	r6, [r4], #4
   17b80:	cmp	r6, #0
   17b84:	beq	17b70 <__assert_fail@plt+0x542c>
   17b88:	ldr	r1, [r5]
   17b8c:	cmp	r1, #0
   17b90:	bne	17b48 <__assert_fail@plt+0x5404>
   17b94:	ldr	r3, [pc, #-88]	; 17b44 <__assert_fail@plt+0x5400>
   17b98:	ldr	r2, [pc, #-204]	; 17ad4 <__assert_fail@plt+0x5390>
   17b9c:	ldr	r1, [pc, #-100]	; 17b40 <__assert_fail@plt+0x53fc>
   17ba0:	ldr	r0, [pc, #-208]	; 17ad8 <__assert_fail@plt+0x5394>
   17ba4:	bl	12744 <__assert_fail@plt>
   17ba8:	mov	r3, r5
   17bac:	b	170e8 <__assert_fail@plt+0x49a4>
   17bb0:	ldr	r0, [sp, #8]
   17bb4:	bl	121c8 <gpgrt_ferror@plt>
   17bb8:	cmp	r0, #0
   17bbc:	beq	17160 <__assert_fail@plt+0x4a1c>
   17bc0:	b	16f9c <__assert_fail@plt+0x4858>
   17bc4:	bne	176d4 <__assert_fail@plt+0x4f90>
   17bc8:	mov	r0, fp
   17bcc:	bl	121c8 <gpgrt_ferror@plt>
   17bd0:	cmp	r0, #0
   17bd4:	bne	176d4 <__assert_fail@plt+0x4f90>
   17bd8:	cmp	r5, #0
   17bdc:	bne	17c00 <__assert_fail@plt+0x54bc>
   17be0:	ldr	r2, [pc, #-260]	; 17ae4 <__assert_fail@plt+0x53a0>
   17be4:	ldr	r1, [pc, #-272]	; 17adc <__assert_fail@plt+0x5398>
   17be8:	mov	r0, r7
   17bec:	bl	12678 <gpgrt_fprintf@plt>
   17bf0:	mov	r0, r7
   17bf4:	bl	121c8 <gpgrt_ferror@plt>
   17bf8:	subs	r5, r0, #0
   17bfc:	bne	17e48 <__assert_fail@plt+0x5704>
   17c00:	cmp	r6, #0
   17c04:	beq	17c7c <__assert_fail@plt+0x5538>
   17c08:	ldr	r8, [pc, #-304]	; 17ae0 <__assert_fail@plt+0x539c>
   17c0c:	mov	sl, #44	; 0x2c
   17c10:	mov	r9, #0
   17c14:	mov	r2, r6
   17c18:	b	17c34 <__assert_fail@plt+0x54f0>
   17c1c:	strb	r9, [r4]
   17c20:	mov	r0, r6
   17c24:	bl	14704 <__assert_fail@plt+0x1fc0>
   17c28:	strb	sl, [r4], #1
   17c2c:	subs	r2, r0, #0
   17c30:	beq	17c7c <__assert_fail@plt+0x5538>
   17c34:	mov	r1, r8
   17c38:	mov	r0, r7
   17c3c:	bl	12678 <gpgrt_fprintf@plt>
   17c40:	cmp	r4, #0
   17c44:	beq	17c7c <__assert_fail@plt+0x5538>
   17c48:	add	r6, r4, #1
   17c4c:	mov	r0, r6
   17c50:	mov	r1, #44	; 0x2c
   17c54:	bl	12408 <strchr@plt>
   17c58:	subs	r4, r0, #0
   17c5c:	bne	17c1c <__assert_fail@plt+0x54d8>
   17c60:	mov	r0, r6
   17c64:	bl	14704 <__assert_fail@plt+0x1fc0>
   17c68:	subs	r2, r0, #0
   17c6c:	beq	17c7c <__assert_fail@plt+0x5538>
   17c70:	ldr	r1, [pc, #-408]	; 17ae0 <__assert_fail@plt+0x539c>
   17c74:	mov	r0, r7
   17c78:	bl	12678 <gpgrt_fprintf@plt>
   17c7c:	bl	20ee4 <__assert_fail@plt+0xe7a0>
   17c80:	bl	21c58 <__assert_fail@plt+0xf514>
   17c84:	ldr	r2, [pc, #-424]	; 17ae4 <__assert_fail@plt+0x53a0>
   17c88:	ldr	r1, [pc, #-424]	; 17ae8 <__assert_fail@plt+0x53a4>
   17c8c:	mov	r3, r0
   17c90:	mov	r0, r7
   17c94:	bl	12678 <gpgrt_fprintf@plt>
   17c98:	mov	r0, r7
   17c9c:	bl	121c8 <gpgrt_ferror@plt>
   17ca0:	cmp	r0, #0
   17ca4:	bne	17e48 <__assert_fail@plt+0x5704>
   17ca8:	cmp	r5, #0
   17cac:	beq	17df0 <__assert_fail@plt+0x56ac>
   17cb0:	cmp	fp, #0
   17cb4:	beq	17d18 <__assert_fail@plt+0x55d4>
   17cb8:	add	sl, sp, #88	; 0x58
   17cbc:	add	r9, sp, #84	; 0x54
   17cc0:	ldr	r4, [pc, #-476]	; 17aec <__assert_fail@plt+0x53a8>
   17cc4:	b	17ce8 <__assert_fail@plt+0x55a4>
   17cc8:	ldr	r2, [sp, #84]	; 0x54
   17ccc:	mov	r1, r4
   17cd0:	mov	r0, r7
   17cd4:	bl	12678 <gpgrt_fprintf@plt>
   17cd8:	mov	r0, r7
   17cdc:	bl	121c8 <gpgrt_ferror@plt>
   17ce0:	cmp	r0, #0
   17ce4:	bne	176d4 <__assert_fail@plt+0x4f90>
   17ce8:	mov	r3, #0
   17cec:	mov	r2, sl
   17cf0:	mov	r1, r9
   17cf4:	mov	r0, fp
   17cf8:	bl	12024 <gpgrt_read_line@plt>
   17cfc:	cmp	r0, #0
   17d00:	bgt	17cc8 <__assert_fail@plt+0x5584>
   17d04:	bne	176d4 <__assert_fail@plt+0x4f90>
   17d08:	mov	r0, fp
   17d0c:	bl	121c8 <gpgrt_ferror@plt>
   17d10:	cmp	r0, #0
   17d14:	bne	176d4 <__assert_fail@plt+0x4f90>
   17d18:	ldr	r0, [sp, #84]	; 0x54
   17d1c:	bl	12150 <gcry_free@plt>
   17d20:	mov	r3, #0
   17d24:	mov	r0, r7
   17d28:	str	r3, [sp, #84]	; 0x54
   17d2c:	bl	122b8 <gpgrt_fclose@plt>
   17d30:	cmp	r0, #0
   17d34:	bne	17fa4 <__assert_fail@plt+0x5860>
   17d38:	ldr	r0, [sp, #12]
   17d3c:	bl	12708 <close@plt>
   17d40:	cmp	fp, #0
   17d44:	beq	16d20 <__assert_fail@plt+0x45dc>
   17d48:	mov	r0, fp
   17d4c:	bl	122b8 <gpgrt_fclose@plt>
   17d50:	cmp	r0, #0
   17d54:	beq	16d20 <__assert_fail@plt+0x45dc>
   17d58:	mvn	r4, #0
   17d5c:	b	16fd0 <__assert_fail@plt+0x488c>
   17d60:	ldr	r2, [pc, #-632]	; 17af0 <__assert_fail@plt+0x53ac>
   17d64:	ldr	r1, [pc, #-632]	; 17af4 <__assert_fail@plt+0x53b0>
   17d68:	mov	r0, r8
   17d6c:	bl	12678 <gpgrt_fprintf@plt>
   17d70:	mov	r0, r8
   17d74:	bl	121c8 <gpgrt_ferror@plt>
   17d78:	cmp	r0, #0
   17d7c:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17d80:	ldr	r1, [pc, #-656]	; 17af8 <__assert_fail@plt+0x53b4>
   17d84:	mov	r0, r8
   17d88:	bl	12678 <gpgrt_fprintf@plt>
   17d8c:	mov	r0, r8
   17d90:	bl	121c8 <gpgrt_ferror@plt>
   17d94:	cmp	r0, #0
   17d98:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17d9c:	ldr	r1, [pc, #-680]	; 17afc <__assert_fail@plt+0x53b8>
   17da0:	mov	r0, r8
   17da4:	bl	12678 <gpgrt_fprintf@plt>
   17da8:	mov	r0, r8
   17dac:	bl	121c8 <gpgrt_ferror@plt>
   17db0:	cmp	r0, #0
   17db4:	bne	172e8 <__assert_fail@plt+0x4ba4>
   17db8:	ldr	r5, [sp, #8]
   17dbc:	cmp	r5, #0
   17dc0:	bne	1738c <__assert_fail@plt+0x4c48>
   17dc4:	ldr	r0, [sp, #84]	; 0x54
   17dc8:	bl	12150 <gcry_free@plt>
   17dcc:	ldr	r3, [sp, #8]
   17dd0:	mov	r0, r8
   17dd4:	str	r3, [sp, #84]	; 0x54
   17dd8:	bl	122b8 <gpgrt_fclose@plt>
   17ddc:	cmp	r0, #0
   17de0:	bne	17fe0 <__assert_fail@plt+0x589c>
   17de4:	ldr	r0, [sp, #44]	; 0x2c
   17de8:	bl	12708 <close@plt>
   17dec:	b	17420 <__assert_fail@plt+0x4cdc>
   17df0:	ldr	r2, [pc, #-776]	; 17af0 <__assert_fail@plt+0x53ac>
   17df4:	ldr	r1, [pc, #-776]	; 17af4 <__assert_fail@plt+0x53b0>
   17df8:	mov	r0, r7
   17dfc:	bl	12678 <gpgrt_fprintf@plt>
   17e00:	mov	r0, r7
   17e04:	bl	121c8 <gpgrt_ferror@plt>
   17e08:	cmp	r0, #0
   17e0c:	bne	17e48 <__assert_fail@plt+0x5704>
   17e10:	ldr	r1, [pc, #-800]	; 17af8 <__assert_fail@plt+0x53b4>
   17e14:	mov	r0, r7
   17e18:	bl	12678 <gpgrt_fprintf@plt>
   17e1c:	mov	r0, r7
   17e20:	bl	121c8 <gpgrt_ferror@plt>
   17e24:	cmp	r0, #0
   17e28:	bne	17e48 <__assert_fail@plt+0x5704>
   17e2c:	ldr	r1, [pc, #-824]	; 17afc <__assert_fail@plt+0x53b8>
   17e30:	mov	r0, r7
   17e34:	bl	12678 <gpgrt_fprintf@plt>
   17e38:	mov	r0, r7
   17e3c:	bl	121c8 <gpgrt_ferror@plt>
   17e40:	cmp	r0, #0
   17e44:	beq	17cb0 <__assert_fail@plt+0x556c>
   17e48:	ldr	r0, [sp, #84]	; 0x54
   17e4c:	bl	12150 <gcry_free@plt>
   17e50:	ldr	r3, [sp, #36]	; 0x24
   17e54:	mov	r0, r7
   17e58:	ldr	r4, [r3]
   17e5c:	bl	122b8 <gpgrt_fclose@plt>
   17e60:	ldr	r0, [sp, #12]
   17e64:	bl	12708 <close@plt>
   17e68:	cmp	fp, #0
   17e6c:	beq	16fc4 <__assert_fail@plt+0x4880>
   17e70:	b	176f4 <__assert_fail@plt+0x4fb0>
   17e74:	mov	r0, sl
   17e78:	bl	121b0 <unlink@plt>
   17e7c:	mov	r4, r0
   17e80:	b	178d0 <__assert_fail@plt+0x518c>
   17e84:	strb	r2, [r8]
   17e88:	ldr	r8, [sp, #84]	; 0x54
   17e8c:	mov	r6, r4
   17e90:	b	176b4 <__assert_fail@plt+0x4f70>
   17e94:	mov	r0, r6
   17e98:	bl	14704 <__assert_fail@plt+0x1fc0>
   17e9c:	mov	r6, r0
   17ea0:	b	17594 <__assert_fail@plt+0x4e50>
   17ea4:	mov	r1, r9
   17ea8:	ldr	r2, [pc, #-944]	; 17b00 <__assert_fail@plt+0x53bc>
   17eac:	mov	r0, #1
   17eb0:	bl	14234 <__assert_fail@plt+0x1af0>
   17eb4:	b	16c6c <__assert_fail@plt+0x4528>
   17eb8:	mov	r0, fp
   17ebc:	bl	121c8 <gpgrt_ferror@plt>
   17ec0:	cmp	r0, #0
   17ec4:	beq	17c00 <__assert_fail@plt+0x54bc>
   17ec8:	b	176d4 <__assert_fail@plt+0x4f90>
   17ecc:	mov	r0, r6
   17ed0:	str	r2, [sp, #28]
   17ed4:	bl	14704 <__assert_fail@plt+0x1fc0>
   17ed8:	ldr	r2, [sp, #28]
   17edc:	strb	r2, [r8]
   17ee0:	ldr	r8, [sp, #84]	; 0x54
   17ee4:	mov	r6, r0
   17ee8:	b	176b4 <__assert_fail@plt+0x4f70>
   17eec:	mov	r0, r4
   17ef0:	bl	12150 <gcry_free@plt>
   17ef4:	mov	r0, r6
   17ef8:	bl	12150 <gcry_free@plt>
   17efc:	ldr	r0, [sp, #8]
   17f00:	bl	12150 <gcry_free@plt>
   17f04:	mvn	r4, #0
   17f08:	b	16fd0 <__assert_fail@plt+0x488c>
   17f0c:	ldr	r3, [sp, #36]	; 0x24
   17f10:	mvn	r4, #0
   17f14:	ldr	r0, [r3]
   17f18:	bl	125dc <gpg_err_set_errno@plt>
   17f1c:	b	16fd0 <__assert_fail@plt+0x488c>
   17f20:	add	r3, r2, #872	; 0x368
   17f24:	ldr	r1, [pc, #-1004]	; 17b40 <__assert_fail@plt+0x53fc>
   17f28:	ldr	r2, [pc, #-1068]	; 17b04 <__assert_fail@plt+0x53c0>
   17f2c:	ldr	r0, [pc, #-1068]	; 17b08 <__assert_fail@plt+0x53c4>
   17f30:	bl	12744 <__assert_fail@plt>
   17f34:	ldr	r3, [pc, #-1072]	; 17b0c <__assert_fail@plt+0x53c8>
   17f38:	ldr	r2, [pc, #-1068]	; 17b14 <__assert_fail@plt+0x53d0>
   17f3c:	ldr	r1, [pc, #-1028]	; 17b40 <__assert_fail@plt+0x53fc>
   17f40:	ldr	r0, [pc, #-1080]	; 17b10 <__assert_fail@plt+0x53cc>
   17f44:	bl	12744 <__assert_fail@plt>
   17f48:	ldr	r0, [sp, #84]	; 0x54
   17f4c:	bl	12150 <gcry_free@plt>
   17f50:	ldr	r3, [sp, #36]	; 0x24
   17f54:	mov	r0, r7
   17f58:	ldr	r4, [r3]
   17f5c:	bl	122b8 <gpgrt_fclose@plt>
   17f60:	ldr	r0, [sp, #12]
   17f64:	bl	12708 <close@plt>
   17f68:	b	16fc4 <__assert_fail@plt+0x4880>
   17f6c:	ldr	r0, [sp, #84]	; 0x54
   17f70:	bl	12150 <gcry_free@plt>
   17f74:	ldr	r3, [sp, #36]	; 0x24
   17f78:	mov	r0, r8
   17f7c:	ldr	r4, [r3]
   17f80:	bl	122b8 <gpgrt_fclose@plt>
   17f84:	ldr	r0, [sp, #44]	; 0x2c
   17f88:	bl	12708 <close@plt>
   17f8c:	b	16fc4 <__assert_fail@plt+0x4880>
   17f90:	ldr	r3, [sp, #36]	; 0x24
   17f94:	ldr	r0, [sp, #44]	; 0x2c
   17f98:	ldr	r4, [r3]
   17f9c:	bl	12708 <close@plt>
   17fa0:	b	16fbc <__assert_fail@plt+0x4878>
   17fa4:	ldr	r3, [sp, #36]	; 0x24
   17fa8:	ldr	r0, [sp, #12]
   17fac:	ldr	r4, [r3]
   17fb0:	bl	12708 <close@plt>
   17fb4:	cmp	fp, #0
   17fb8:	bne	176f4 <__assert_fail@plt+0x4fb0>
   17fbc:	b	16fc4 <__assert_fail@plt+0x4880>
   17fc0:	mov	r0, r8
   17fc4:	bl	12150 <gcry_free@plt>
   17fc8:	mov	r0, sl
   17fcc:	bl	12150 <gcry_free@plt>
   17fd0:	mov	r0, fp
   17fd4:	bl	12150 <gcry_free@plt>
   17fd8:	mvn	r4, #0
   17fdc:	b	16fd0 <__assert_fail@plt+0x488c>
   17fe0:	ldr	r3, [sp, #36]	; 0x24
   17fe4:	ldr	r0, [sp, #44]	; 0x2c
   17fe8:	ldr	r4, [r3]
   17fec:	bl	12708 <close@plt>
   17ff0:	b	16fc4 <__assert_fail@plt+0x4880>
   17ff4:	ldr	r5, [sp, #76]	; 0x4c
   17ff8:	mov	r7, sl
   17ffc:	b	16bf8 <__assert_fail@plt+0x44b4>
   18000:	bl	1218c <__stack_chk_fail@plt>
   18004:	ldr	r3, [pc, #-1244]	; 17b30 <__assert_fail@plt+0x53ec>
   18008:	ldr	r2, [pc, #-1272]	; 17b18 <__assert_fail@plt+0x53d4>
   1800c:	ldr	r1, [pc, #-1236]	; 17b40 <__assert_fail@plt+0x53fc>
   18010:	ldr	r0, [pc, #-1276]	; 17b1c <__assert_fail@plt+0x53d8>
   18014:	bl	12744 <__assert_fail@plt>
   18018:	ldr	r3, [pc, #-1280]	; 17b20 <__assert_fail@plt+0x53dc>
   1801c:	mov	r2, #3168	; 0xc60
   18020:	ldr	r1, [pc, #-1256]	; 17b40 <__assert_fail@plt+0x53fc>
   18024:	ldr	r0, [pc, #-1288]	; 17b24 <__assert_fail@plt+0x53e0>
   18028:	bl	1ece4 <__assert_fail@plt+0xc5a0>
   1802c:	add	r3, r2, #920	; 0x398
   18030:	ldr	r1, [pc, #-1272]	; 17b40 <__assert_fail@plt+0x53fc>
   18034:	ldr	r2, [pc, #-1300]	; 17b28 <__assert_fail@plt+0x53e4>
   18038:	ldr	r0, [pc, #-1300]	; 17b2c <__assert_fail@plt+0x53e8>
   1803c:	bl	12744 <__assert_fail@plt>
   18040:	ldr	r3, [pc, #-1304]	; 17b30 <__assert_fail@plt+0x53ec>
   18044:	mov	r2, #2672	; 0xa70
   18048:	ldr	r1, [pc, #-1296]	; 17b40 <__assert_fail@plt+0x53fc>
   1804c:	ldr	r0, [pc, #-1312]	; 17b34 <__assert_fail@plt+0x53f0>
   18050:	bl	12744 <__assert_fail@plt>
   18054:	ldr	r3, [pc, #-1304]	; 17b44 <__assert_fail@plt+0x5400>
   18058:	ldr	r2, [pc, #-1320]	; 17b38 <__assert_fail@plt+0x53f4>
   1805c:	ldr	r1, [pc, #-1316]	; 17b40 <__assert_fail@plt+0x53fc>
   18060:	ldr	r0, [pc, #-1324]	; 17b3c <__assert_fail@plt+0x53f8>
   18064:	bl	12744 <__assert_fail@plt>
   18068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1806c:	sub	sp, sp, #108	; 0x6c
   18070:	mov	ip, #0
   18074:	str	r1, [sp, #48]	; 0x30
   18078:	ldr	r1, [pc, #3140]	; 18cc4 <__assert_fail@plt+0x6580>
   1807c:	subs	r4, r0, #0
   18080:	str	r2, [sp, #52]	; 0x34
   18084:	ldr	r1, [r1]
   18088:	str	r3, [sp, #28]
   1808c:	str	r1, [sp, #100]	; 0x64
   18090:	str	ip, [sp, #60]	; 0x3c
   18094:	str	ip, [sp, #64]	; 0x40
   18098:	beq	188b0 <__assert_fail@plt+0x616c>
   1809c:	bl	12528 <gcry_xstrdup@plt>
   180a0:	str	r0, [sp, #20]
   180a4:	mov	r4, #0
   180a8:	ldr	r1, [pc, #3096]	; 18cc8 <__assert_fail@plt+0x6584>
   180ac:	ldr	r0, [sp, #20]
   180b0:	str	r4, [sp, #68]	; 0x44
   180b4:	str	r4, [sp, #72]	; 0x48
   180b8:	str	r4, [sp, #76]	; 0x4c
   180bc:	str	r4, [sp, #80]	; 0x50
   180c0:	str	r4, [sp, #84]	; 0x54
   180c4:	str	r4, [sp, #88]	; 0x58
   180c8:	str	r4, [sp, #92]	; 0x5c
   180cc:	str	r4, [sp, #96]	; 0x60
   180d0:	bl	124e0 <gpgrt_fopen@plt>
   180d4:	subs	r3, r0, #0
   180d8:	str	r3, [sp, #12]
   180dc:	beq	189ec <__assert_fail@plt+0x62a8>
   180e0:	ldr	r8, [pc, #3044]	; 18ccc <__assert_fail@plt+0x6588>
   180e4:	mov	r5, r4
   180e8:	mov	fp, r4
   180ec:	str	r4, [sp, #24]
   180f0:	str	r4, [sp, #16]
   180f4:	mov	r3, #0
   180f8:	add	r2, sp, #64	; 0x40
   180fc:	add	r1, sp, #60	; 0x3c
   18100:	ldr	r0, [sp, #12]
   18104:	bl	12024 <gpgrt_read_line@plt>
   18108:	cmp	r0, #0
   1810c:	ble	1863c <__assert_fail@plt+0x5ef8>
   18110:	ldr	r9, [sp, #60]	; 0x3c
   18114:	add	fp, fp, #1
   18118:	mov	r4, r9
   1811c:	ldrb	r3, [r9]
   18120:	cmp	r3, #9
   18124:	cmpne	r3, #32
   18128:	bne	1813c <__assert_fail@plt+0x59f8>
   1812c:	ldrb	r3, [r4, #1]!
   18130:	cmp	r3, #9
   18134:	cmpne	r3, #32
   18138:	beq	1812c <__assert_fail@plt+0x59e8>
   1813c:	cmp	r3, #0
   18140:	sub	r2, r3, #35	; 0x23
   18144:	clz	r2, r2
   18148:	lsr	r2, r2, #5
   1814c:	moveq	r2, #1
   18150:	cmp	r3, #13
   18154:	orreq	r2, r2, #1
   18158:	cmp	r3, #10
   1815c:	movne	r3, r2
   18160:	orreq	r3, r2, #1
   18164:	cmp	r3, #0
   18168:	bne	180f4 <__assert_fail@plt+0x59b0>
   1816c:	ldr	r3, [sp, #24]
   18170:	cmp	r9, r4
   18174:	movne	r3, #0
   18178:	andeq	r3, r3, #1
   1817c:	cmp	r3, #0
   18180:	bne	18750 <__assert_fail@plt+0x600c>
   18184:	cmp	r9, r4
   18188:	beq	186a4 <__assert_fail@plt+0x5f60>
   1818c:	cmp	r5, #0
   18190:	beq	18604 <__assert_fail@plt+0x5ec0>
   18194:	ldrb	r1, [r4]
   18198:	str	r3, [sp, #40]	; 0x28
   1819c:	mov	r5, r4
   181a0:	b	181a8 <__assert_fail@plt+0x5a64>
   181a4:	ldrb	r1, [r5, #1]!
   181a8:	cmp	r1, #9
   181ac:	cmpne	r1, #32
   181b0:	beq	181a4 <__assert_fail@plt+0x5a60>
   181b4:	cmp	r1, #0
   181b8:	movne	r6, r5
   181bc:	bne	181d0 <__assert_fail@plt+0x5a8c>
   181c0:	b	186ec <__assert_fail@plt+0x5fa8>
   181c4:	ldrb	r1, [r6, #1]!
   181c8:	cmp	r1, #0
   181cc:	beq	181e0 <__assert_fail@plt+0x5a9c>
   181d0:	mov	r0, r8
   181d4:	bl	12408 <strchr@plt>
   181d8:	cmp	r0, #0
   181dc:	beq	181c4 <__assert_fail@plt+0x5a80>
   181e0:	cmp	r6, r5
   181e4:	beq	186ec <__assert_fail@plt+0x5fa8>
   181e8:	mov	r7, r6
   181ec:	mov	sl, #0
   181f0:	mov	r0, r5
   181f4:	strb	sl, [r7], #1
   181f8:	bl	15dd4 <__assert_fail@plt+0x3690>
   181fc:	subs	r3, r0, #0
   18200:	str	r3, [sp, #32]
   18204:	blt	18840 <__assert_fail@plt+0x60fc>
   18208:	ldrb	r1, [r6, #1]
   1820c:	cmp	r1, #32
   18210:	cmpne	r1, #9
   18214:	bne	18228 <__assert_fail@plt+0x5ae4>
   18218:	ldrb	r1, [r7, #1]!
   1821c:	cmp	r1, #9
   18220:	cmpne	r1, #32
   18224:	beq	18218 <__assert_fail@plt+0x5ad4>
   18228:	cmp	r1, #0
   1822c:	movne	sl, r7
   18230:	bne	18244 <__assert_fail@plt+0x5b00>
   18234:	b	18880 <__assert_fail@plt+0x613c>
   18238:	ldrb	r1, [sl, #1]!
   1823c:	cmp	r1, #0
   18240:	beq	18254 <__assert_fail@plt+0x5b10>
   18244:	mov	r0, r8
   18248:	bl	12408 <strchr@plt>
   1824c:	cmp	r0, #0
   18250:	beq	18238 <__assert_fail@plt+0x5af4>
   18254:	cmp	r7, sl
   18258:	beq	18880 <__assert_fail@plt+0x613c>
   1825c:	ldr	r0, [sp, #32]
   18260:	mov	r5, sl
   18264:	mov	r2, #0
   18268:	cmn	r0, #1
   1826c:	strb	r2, [r5], #1
   18270:	streq	r2, [sp, #44]	; 0x2c
   18274:	beq	1828c <__assert_fail@plt+0x5b48>
   18278:	mov	r1, r7
   1827c:	bl	13e9c <__assert_fail@plt+0x1758>
   18280:	subs	r3, r0, #0
   18284:	str	r3, [sp, #44]	; 0x2c
   18288:	beq	18a2c <__assert_fail@plt+0x62e8>
   1828c:	ldrb	r3, [sl, #1]
   18290:	cmp	r3, #32
   18294:	cmpne	r3, #9
   18298:	bne	182ac <__assert_fail@plt+0x5b68>
   1829c:	ldrb	r3, [r5, #1]!
   182a0:	cmp	r3, #9
   182a4:	cmpne	r3, #32
   182a8:	beq	1829c <__assert_fail@plt+0x5b58>
   182ac:	cmp	r3, #91	; 0x5b
   182b0:	bne	18630 <__assert_fail@plt+0x5eec>
   182b4:	add	r3, r5, #1
   182b8:	mov	r0, r3
   182bc:	mov	r1, #93	; 0x5d
   182c0:	str	r3, [sp, #36]	; 0x24
   182c4:	bl	12408 <strchr@plt>
   182c8:	subs	r5, r0, #0
   182cc:	movne	r3, #0
   182d0:	strbne	r3, [r5], #1
   182d4:	beq	189c0 <__assert_fail@plt+0x627c>
   182d8:	ldrb	r1, [r5]
   182dc:	cmp	r1, #32
   182e0:	cmpne	r1, #9
   182e4:	bne	182f8 <__assert_fail@plt+0x5bb4>
   182e8:	ldrb	r1, [r5, #1]!
   182ec:	cmp	r1, #9
   182f0:	cmpne	r1, #32
   182f4:	beq	182e8 <__assert_fail@plt+0x5ba4>
   182f8:	cmp	r1, #0
   182fc:	movne	sl, r5
   18300:	ldrne	r7, [pc, #2504]	; 18cd0 <__assert_fail@plt+0x658c>
   18304:	bne	18318 <__assert_fail@plt+0x5bd4>
   18308:	b	18628 <__assert_fail@plt+0x5ee4>
   1830c:	ldrb	r1, [sl, #1]!
   18310:	cmp	r1, #0
   18314:	beq	18328 <__assert_fail@plt+0x5be4>
   18318:	mov	r0, r7
   1831c:	bl	12408 <strchr@plt>
   18320:	cmp	r0, #0
   18324:	beq	1830c <__assert_fail@plt+0x5bc8>
   18328:	cmp	r5, sl
   1832c:	beq	18628 <__assert_fail@plt+0x5ee4>
   18330:	mov	r2, sl
   18334:	mov	r1, #0
   18338:	strb	r1, [r2], #-1
   1833c:	cmp	r5, r2
   18340:	bcs	18374 <__assert_fail@plt+0x5c30>
   18344:	ldrb	r3, [sl, #-1]
   18348:	cmp	r3, #9
   1834c:	cmpne	r3, #32
   18350:	beq	18368 <__assert_fail@plt+0x5c24>
   18354:	b	18374 <__assert_fail@plt+0x5c30>
   18358:	ldrb	r3, [r2]
   1835c:	cmp	r3, #9
   18360:	cmpne	r3, #32
   18364:	bne	18374 <__assert_fail@plt+0x5c30>
   18368:	strb	r1, [r2], #-1
   1836c:	cmp	r5, r2
   18370:	bne	18358 <__assert_fail@plt+0x5c14>
   18374:	ldr	r3, [sp, #36]	; 0x24
   18378:	cmp	r3, #0
   1837c:	beq	183c0 <__assert_fail@plt+0x5c7c>
   18380:	ldr	r1, [pc, #2380]	; 18cd4 <__assert_fail@plt+0x6590>
   18384:	mov	r0, r3
   18388:	bl	12054 <strcmp@plt>
   1838c:	subs	r1, r0, #0
   18390:	beq	18730 <__assert_fail@plt+0x5fec>
   18394:	ldr	r7, [sp, #36]	; 0x24
   18398:	ldr	r1, [pc, #2360]	; 18cd8 <__assert_fail@plt+0x6594>
   1839c:	mov	r0, r7
   183a0:	bl	12054 <strcmp@plt>
   183a4:	cmp	r0, #0
   183a8:	beq	183c0 <__assert_fail@plt+0x5c7c>
   183ac:	ldr	r1, [pc, #2344]	; 18cdc <__assert_fail@plt+0x6598>
   183b0:	mov	r0, r7
   183b4:	bl	12054 <strcmp@plt>
   183b8:	cmp	r0, #0
   183bc:	bne	189a4 <__assert_fail@plt+0x6260>
   183c0:	ldr	r3, [sp, #16]
   183c4:	ldr	r2, [sp, #28]
   183c8:	add	r3, r3, #1
   183cc:	cmp	r2, #0
   183d0:	moveq	r7, #0
   183d4:	andne	r7, r3, #1
   183d8:	cmp	r7, #0
   183dc:	beq	18460 <__assert_fail@plt+0x5d1c>
   183e0:	cmp	r9, r4
   183e4:	beq	1890c <__assert_fail@plt+0x61c8>
   183e8:	ldr	r3, [sp, #44]	; 0x2c
   183ec:	ldr	ip, [sp, #36]	; 0x24
   183f0:	ldr	r2, [pc, #2280]	; 18ce0 <__assert_fail@plt+0x659c>
   183f4:	ldr	r3, [r3]
   183f8:	subs	r0, ip, #0
   183fc:	moveq	r0, r2
   18400:	cmp	r3, #0
   18404:	moveq	r3, r2
   18408:	ldr	r1, [pc, #2260]	; 18ce4 <__assert_fail@plt+0x65a0>
   1840c:	ldr	r2, [sp, #32]
   18410:	ldr	r4, [sp, #28]
   18414:	str	r0, [sp]
   18418:	ldr	r2, [r1, r2, lsl #4]
   1841c:	mov	r0, r4
   18420:	ldr	r1, [pc, #2240]	; 18ce8 <__assert_fail@plt+0x65a4>
   18424:	bl	12678 <gpgrt_fprintf@plt>
   18428:	cmp	r6, r5
   1842c:	beq	18448 <__assert_fail@plt+0x5d04>
   18430:	mov	r0, r5
   18434:	bl	15198 <__assert_fail@plt+0x2a54>
   18438:	ldr	r1, [pc, #2220]	; 18cec <__assert_fail@plt+0x65a8>
   1843c:	mov	r2, r0
   18440:	mov	r0, r4
   18444:	bl	12678 <gpgrt_fprintf@plt>
   18448:	ldr	r1, [sp, #28]
   1844c:	mov	r0, #10
   18450:	bl	122a0 <gpgrt_fputc@plt>
   18454:	mov	r3, #0
   18458:	str	r3, [sp, #16]
   1845c:	mov	r3, r7
   18460:	ldr	r2, [sp, #48]	; 0x30
   18464:	cmp	r2, #0
   18468:	moveq	r3, #0
   1846c:	andne	r3, r3, #1
   18470:	cmp	r3, #0
   18474:	moveq	r5, #1
   18478:	beq	180f4 <__assert_fail@plt+0x59b0>
   1847c:	ldr	r3, [sp, #28]
   18480:	cmp	r3, #0
   18484:	movne	r3, #0
   18488:	movne	r5, #1
   1848c:	strne	r3, [sp, #16]
   18490:	bne	180f4 <__assert_fail@plt+0x59b0>
   18494:	ldr	r3, [sp, #24]
   18498:	cmp	r3, #0
   1849c:	bne	18578 <__assert_fail@plt+0x5e34>
   184a0:	ldr	r3, [sp, #40]	; 0x28
   184a4:	cmp	r3, #0
   184a8:	beq	18a68 <__assert_fail@plt+0x6324>
   184ac:	ldr	r3, [sp, #40]	; 0x28
   184b0:	ldrb	r4, [r3]
   184b4:	cmp	r4, #42	; 0x2a
   184b8:	beq	18ab4 <__assert_fail@plt+0x6370>
   184bc:	mov	r1, #58	; 0x3a
   184c0:	ldr	r0, [sp, #40]	; 0x28
   184c4:	bl	12408 <strchr@plt>
   184c8:	subs	r9, r0, #0
   184cc:	beq	18b48 <__assert_fail@plt+0x6404>
   184d0:	mov	r3, #0
   184d4:	strb	r3, [r9], #1
   184d8:	ldr	r3, [sp, #40]	; 0x28
   184dc:	ldrb	r3, [r3]
   184e0:	cmp	r3, #0
   184e4:	beq	18508 <__assert_fail@plt+0x5dc4>
   184e8:	ldr	r4, [pc, #2048]	; 18cf0 <__assert_fail@plt+0x65ac>
   184ec:	ldr	r1, [r4, #20]
   184f0:	cmp	r1, #0
   184f4:	beq	18b5c <__assert_fail@plt+0x6418>
   184f8:	ldr	r0, [sp, #40]	; 0x28
   184fc:	bl	12054 <strcmp@plt>
   18500:	cmp	r0, #0
   18504:	beq	18578 <__assert_fail@plt+0x5e34>
   18508:	cmp	r9, #0
   1850c:	beq	18a68 <__assert_fail@plt+0x6324>
   18510:	ldrb	r3, [r9]
   18514:	cmp	r3, #0
   18518:	beq	18a68 <__assert_fail@plt+0x6324>
   1851c:	ldr	r4, [pc, #1996]	; 18cf0 <__assert_fail@plt+0x65ac>
   18520:	ldr	r1, [r4, #24]
   18524:	cmp	r1, #0
   18528:	beq	18c3c <__assert_fail@plt+0x64f8>
   1852c:	mov	r0, r9
   18530:	bl	12054 <strcmp@plt>
   18534:	cmp	r0, #0
   18538:	beq	18578 <__assert_fail@plt+0x5e34>
   1853c:	ldr	r3, [r4, #28]
   18540:	cmp	r3, #0
   18544:	beq	18b80 <__assert_fail@plt+0x643c>
   18548:	ldr	r1, [r3]
   1854c:	cmp	r1, #0
   18550:	beq	18a68 <__assert_fail@plt+0x6324>
   18554:	mov	r4, r3
   18558:	b	18568 <__assert_fail@plt+0x5e24>
   1855c:	ldr	r1, [r4, #4]!
   18560:	cmp	r1, #0
   18564:	beq	18a68 <__assert_fail@plt+0x6324>
   18568:	mov	r0, r9
   1856c:	bl	12054 <strcmp@plt>
   18570:	cmp	r0, #0
   18574:	bne	1855c <__assert_fail@plt+0x5e18>
   18578:	ldr	r4, [sp, #36]	; 0x24
   1857c:	cmp	r4, #0
   18580:	beq	18b20 <__assert_fail@plt+0x63dc>
   18584:	ldr	r1, [pc, #1864]	; 18cd4 <__assert_fail@plt+0x6590>
   18588:	mov	r0, r4
   1858c:	bl	12054 <strcmp@plt>
   18590:	cmp	r0, #0
   18594:	beq	18a98 <__assert_fail@plt+0x6354>
   18598:	ldr	r1, [pc, #1852]	; 18cdc <__assert_fail@plt+0x6598>
   1859c:	mov	r0, r4
   185a0:	bl	12054 <strcmp@plt>
   185a4:	cmp	r0, #0
   185a8:	bne	18ad8 <__assert_fail@plt+0x6394>
   185ac:	ldr	r2, [sp, #44]	; 0x2c
   185b0:	ldr	r1, [sp, #52]	; 0x34
   185b4:	ldr	r3, [r2, #4]
   185b8:	cmp	r1, #0
   185bc:	orr	r3, r3, #128	; 0x80
   185c0:	str	r3, [r2, #4]
   185c4:	beq	18b08 <__assert_fail@plt+0x63c4>
   185c8:	mov	r4, #0
   185cc:	ldrb	r3, [r5]
   185d0:	cmp	r3, #0
   185d4:	bne	18b30 <__assert_fail@plt+0x63ec>
   185d8:	mov	ip, #0
   185dc:	mov	r3, r5
   185e0:	mov	r2, r4
   185e4:	mov	r5, #1
   185e8:	ldr	r0, [sp, #44]	; 0x2c
   185ec:	str	ip, [sp]
   185f0:	add	r1, sp, #68	; 0x44
   185f4:	str	r5, [sp, #24]
   185f8:	str	ip, [sp, #16]
   185fc:	bl	14988 <__assert_fail@plt+0x2244>
   18600:	b	180f4 <__assert_fail@plt+0x59b0>
   18604:	ldr	r3, [sp, #20]
   18608:	str	fp, [sp]
   1860c:	ldr	r2, [pc, #1760]	; 18cf4 <__assert_fail@plt+0x65b0>
   18610:	mov	r1, r5
   18614:	mov	r0, r5
   18618:	bl	14234 <__assert_fail@plt+0x1af0>
   1861c:	mvn	r3, #0
   18620:	str	r3, [sp, #16]
   18624:	b	180f4 <__assert_fail@plt+0x59b0>
   18628:	mov	r5, r6
   1862c:	b	18374 <__assert_fail@plt+0x5c30>
   18630:	mov	r3, #0
   18634:	str	r3, [sp, #36]	; 0x24
   18638:	b	182d8 <__assert_fail@plt+0x5b94>
   1863c:	beq	18750 <__assert_fail@plt+0x600c>
   18640:	bl	1245c <__errno_location@plt>
   18644:	ldr	r3, [sp, #20]
   18648:	ldr	r2, [pc, #1704]	; 18cf8 <__assert_fail@plt+0x65b4>
   1864c:	ldr	r1, [r0]
   18650:	mov	r4, r0
   18654:	mov	r0, #0
   18658:	bl	14234 <__assert_fail@plt+0x1af0>
   1865c:	ldr	r0, [sp, #12]
   18660:	bl	122b8 <gpgrt_fclose@plt>
   18664:	cmp	r0, #0
   18668:	bne	18974 <__assert_fail@plt+0x6230>
   1866c:	ldr	r0, [sp, #60]	; 0x3c
   18670:	bl	12150 <gcry_free@plt>
   18674:	mvn	r3, #0
   18678:	str	r3, [sp, #16]
   1867c:	ldr	r0, [sp, #20]
   18680:	bl	12150 <gcry_free@plt>
   18684:	ldr	r3, [pc, #1592]	; 18cc4 <__assert_fail@plt+0x6580>
   18688:	ldr	r2, [sp, #100]	; 0x64
   1868c:	ldr	r0, [sp, #16]
   18690:	ldr	r3, [r3]
   18694:	cmp	r2, r3
   18698:	bne	18b58 <__assert_fail@plt+0x6414>
   1869c:	add	sp, sp, #108	; 0x6c
   186a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a4:	ldrb	r1, [r9, #1]
   186a8:	add	r6, r9, #1
   186ac:	cmp	r1, #0
   186b0:	bne	186c4 <__assert_fail@plt+0x5f80>
   186b4:	b	188c8 <__assert_fail@plt+0x6184>
   186b8:	cmp	r1, #0
   186bc:	mov	r6, r5
   186c0:	beq	188c8 <__assert_fail@plt+0x6184>
   186c4:	mov	r0, r8
   186c8:	bl	12408 <strchr@plt>
   186cc:	mov	r5, r6
   186d0:	ldrb	r1, [r5, #1]!
   186d4:	cmp	r0, #0
   186d8:	beq	186b8 <__assert_fail@plt+0x5f74>
   186dc:	mov	r3, #0
   186e0:	strb	r3, [r6]
   186e4:	str	r4, [sp, #40]	; 0x28
   186e8:	b	181a8 <__assert_fail@plt+0x5a64>
   186ec:	ldr	r4, [sp, #20]
   186f0:	mov	r1, #0
   186f4:	mov	r0, r1
   186f8:	mov	r3, r4
   186fc:	ldr	r2, [pc, #1528]	; 18cfc <__assert_fail@plt+0x65b8>
   18700:	str	fp, [sp]
   18704:	bl	14234 <__assert_fail@plt+0x1af0>
   18708:	ldr	r1, [pc, #1520]	; 18d00 <__assert_fail@plt+0x65bc>
   1870c:	mov	r3, r4
   18710:	mov	r2, #220	; 0xdc
   18714:	str	fp, [sp]
   18718:	mov	r0, #97	; 0x61
   1871c:	bl	13c94 <__assert_fail@plt+0x1550>
   18720:	mvn	r3, #0
   18724:	mov	r5, #1
   18728:	str	r3, [sp, #16]
   1872c:	b	180f4 <__assert_fail@plt+0x59b0>
   18730:	ldrb	r3, [r5]
   18734:	cmp	r3, #0
   18738:	beq	183c0 <__assert_fail@plt+0x5c7c>
   1873c:	str	fp, [sp]
   18740:	ldr	r3, [sp, #20]
   18744:	ldr	r2, [pc, #1464]	; 18d04 <__assert_fail@plt+0x65c0>
   18748:	bl	14234 <__assert_fail@plt+0x1af0>
   1874c:	b	18720 <__assert_fail@plt+0x5fdc>
   18750:	ldr	r4, [sp, #12]
   18754:	mov	r0, r4
   18758:	bl	121c8 <gpgrt_ferror@plt>
   1875c:	cmp	r0, #0
   18760:	bne	18640 <__assert_fail@plt+0x5efc>
   18764:	mov	r0, r4
   18768:	bl	122b8 <gpgrt_fclose@plt>
   1876c:	ldr	r3, [sp, #16]
   18770:	add	r5, r3, #1
   18774:	ldr	r3, [sp, #48]	; 0x30
   18778:	cmp	r3, #0
   1877c:	moveq	r5, #0
   18780:	andne	r5, r5, #1
   18784:	cmp	r0, #0
   18788:	bne	18998 <__assert_fail@plt+0x6254>
   1878c:	ldr	r0, [sp, #60]	; 0x3c
   18790:	bl	12150 <gcry_free@plt>
   18794:	cmp	r5, #0
   18798:	beq	1867c <__assert_fail@plt+0x5f38>
   1879c:	ldr	r2, [sp, #52]	; 0x34
   187a0:	ldr	r3, [sp, #28]
   187a4:	cmp	r2, #0
   187a8:	clz	r3, r3
   187ac:	lsr	r3, r3, #5
   187b0:	moveq	r3, #0
   187b4:	cmp	r3, #0
   187b8:	beq	18834 <__assert_fail@plt+0x60f0>
   187bc:	ldr	r5, [pc, #1348]	; 18d08 <__assert_fail@plt+0x65c4>
   187c0:	mov	r3, #0
   187c4:	mov	r4, r3
   187c8:	ldr	r6, [r5, #12]
   187cc:	str	r3, [r5, #12]
   187d0:	mov	r3, #0
   187d4:	mov	r0, r4
   187d8:	mov	r2, r3
   187dc:	mov	r1, r3
   187e0:	add	r4, r4, #1
   187e4:	bl	16a84 <__assert_fail@plt+0x4340>
   187e8:	cmp	r4, #6
   187ec:	bne	187d0 <__assert_fail@plt+0x608c>
   187f0:	cmp	r6, #0
   187f4:	str	r6, [r5, #12]
   187f8:	beq	18834 <__assert_fail@plt+0x60f0>
   187fc:	ldr	r5, [pc, #1288]	; 18d0c <__assert_fail@plt+0x65c8>
   18800:	add	r4, sp, #68	; 0x44
   18804:	add	r6, sp, #100	; 0x64
   18808:	ldr	r3, [r4], #4
   1880c:	cmp	r3, #0
   18810:	beq	18828 <__assert_fail@plt+0x60e4>
   18814:	ldr	r3, [r5, #12]
   18818:	cmp	r3, #0
   1881c:	beq	18828 <__assert_fail@plt+0x60e4>
   18820:	mov	r0, #0
   18824:	blx	r3
   18828:	cmp	r6, r4
   1882c:	add	r5, r5, #24
   18830:	bne	18808 <__assert_fail@plt+0x60c4>
   18834:	mov	r3, #0
   18838:	str	r3, [sp, #16]
   1883c:	b	1867c <__assert_fail@plt+0x5f38>
   18840:	ldr	r5, [sp, #20]
   18844:	ldr	r2, [pc, #1220]	; 18d10 <__assert_fail@plt+0x65cc>
   18848:	mov	r3, r5
   1884c:	mov	r1, sl
   18850:	mov	r0, sl
   18854:	str	fp, [sp]
   18858:	bl	14234 <__assert_fail@plt+0x1af0>
   1885c:	mov	r3, r5
   18860:	str	fp, [sp]
   18864:	mov	r2, #165	; 0xa5
   18868:	ldr	r1, [pc, #1188]	; 18d14 <__assert_fail@plt+0x65d0>
   1886c:	mov	r0, #97	; 0x61
   18870:	bl	13c94 <__assert_fail@plt+0x1550>
   18874:	mvn	r3, #0
   18878:	str	r3, [sp, #16]
   1887c:	b	18208 <__assert_fail@plt+0x5ac4>
   18880:	ldr	r4, [sp, #20]
   18884:	mov	r1, #0
   18888:	mov	r0, r1
   1888c:	mov	r3, r4
   18890:	ldr	r2, [pc, #1152]	; 18d18 <__assert_fail@plt+0x65d4>
   18894:	str	fp, [sp]
   18898:	bl	14234 <__assert_fail@plt+0x1af0>
   1889c:	str	fp, [sp]
   188a0:	mov	r3, r4
   188a4:	mov	r2, #88	; 0x58
   188a8:	ldr	r1, [pc, #1132]	; 18d1c <__assert_fail@plt+0x65d8>
   188ac:	b	18718 <__assert_fail@plt+0x5fd4>
   188b0:	bl	20448 <__assert_fail@plt+0xdd04>
   188b4:	mov	r2, r4
   188b8:	ldr	r1, [pc, #1120]	; 18d20 <__assert_fail@plt+0x65dc>
   188bc:	bl	1a578 <__assert_fail@plt+0x7e34>
   188c0:	str	r0, [sp, #20]
   188c4:	b	180a4 <__assert_fail@plt+0x5960>
   188c8:	ldr	r4, [sp, #20]
   188cc:	mov	r1, #0
   188d0:	mov	r0, r1
   188d4:	mov	r3, r4
   188d8:	ldr	r2, [pc, #1092]	; 18d24 <__assert_fail@plt+0x65e0>
   188dc:	str	fp, [sp]
   188e0:	bl	14234 <__assert_fail@plt+0x1af0>
   188e4:	mov	r3, r4
   188e8:	str	fp, [sp]
   188ec:	mov	r2, #29
   188f0:	ldr	r1, [pc, #1072]	; 18d28 <__assert_fail@plt+0x65e4>
   188f4:	mov	r0, #97	; 0x61
   188f8:	bl	13c94 <__assert_fail@plt+0x1550>
   188fc:	mvn	r3, #0
   18900:	mov	r5, #0
   18904:	str	r3, [sp, #16]
   18908:	b	180f4 <__assert_fail@plt+0x59b0>
   1890c:	mov	r1, #58	; 0x3a
   18910:	ldr	r0, [sp, #40]	; 0x28
   18914:	bl	12408 <strchr@plt>
   18918:	cmp	r0, #0
   1891c:	beq	18a78 <__assert_fail@plt+0x6334>
   18920:	mov	r4, r0
   18924:	mov	r9, #0
   18928:	strb	r9, [r4], #1
   1892c:	mov	r1, #58	; 0x3a
   18930:	mov	r0, r4
   18934:	bl	12408 <strchr@plt>
   18938:	cmp	r0, #0
   1893c:	strbne	r9, [r0]
   18940:	ldr	r0, [sp, #40]	; 0x28
   18944:	bl	15198 <__assert_fail@plt+0x2a54>
   18948:	ldr	r1, [pc, #988]	; 18d2c <__assert_fail@plt+0x65e8>
   1894c:	mov	r2, r0
   18950:	ldr	r0, [sp, #28]
   18954:	bl	12678 <gpgrt_fprintf@plt>
   18958:	mov	r0, r4
   1895c:	bl	15198 <__assert_fail@plt+0x2a54>
   18960:	mov	r2, r0
   18964:	ldr	r1, [pc, #964]	; 18d30 <__assert_fail@plt+0x65ec>
   18968:	ldr	r0, [sp, #28]
   1896c:	bl	12678 <gpgrt_fprintf@plt>
   18970:	b	183e8 <__assert_fail@plt+0x5ca4>
   18974:	mov	r5, #0
   18978:	mvn	r3, #0
   1897c:	str	r3, [sp, #16]
   18980:	ldr	r1, [r4]
   18984:	ldr	r3, [sp, #20]
   18988:	ldr	r2, [pc, #932]	; 18d34 <__assert_fail@plt+0x65f0>
   1898c:	mov	r0, #0
   18990:	bl	14234 <__assert_fail@plt+0x1af0>
   18994:	b	1878c <__assert_fail@plt+0x6048>
   18998:	bl	1245c <__errno_location@plt>
   1899c:	mov	r4, r0
   189a0:	b	18980 <__assert_fail@plt+0x623c>
   189a4:	mov	r1, #0
   189a8:	str	fp, [sp]
   189ac:	mov	r0, r1
   189b0:	ldr	r3, [sp, #20]
   189b4:	ldr	r2, [pc, #892]	; 18d38 <__assert_fail@plt+0x65f4>
   189b8:	bl	14234 <__assert_fail@plt+0x1af0>
   189bc:	b	18720 <__assert_fail@plt+0x5fdc>
   189c0:	ldr	r4, [sp, #20]
   189c4:	mov	r1, r5
   189c8:	mov	r3, r4
   189cc:	ldr	r2, [pc, #872]	; 18d3c <__assert_fail@plt+0x65f8>
   189d0:	str	fp, [sp]
   189d4:	bl	14234 <__assert_fail@plt+0x1af0>
   189d8:	str	fp, [sp]
   189dc:	mov	r3, r4
   189e0:	mov	r2, #29
   189e4:	ldr	r1, [pc, #852]	; 18d40 <__assert_fail@plt+0x65fc>
   189e8:	b	18718 <__assert_fail@plt+0x5fd4>
   189ec:	bl	1245c <__errno_location@plt>
   189f0:	ldr	r2, [sp, #48]	; 0x30
   189f4:	ldr	r1, [r0]
   189f8:	subs	r3, r1, #2
   189fc:	movne	r3, #1
   18a00:	cmp	r2, r4
   18a04:	moveq	r3, #1
   18a08:	cmp	r3, r4
   18a0c:	beq	18838 <__assert_fail@plt+0x60f4>
   18a10:	ldr	r3, [sp, #20]
   18a14:	ldr	r0, [sp, #12]
   18a18:	ldr	r2, [pc, #804]	; 18d44 <__assert_fail@plt+0x6600>
   18a1c:	bl	14234 <__assert_fail@plt+0x1af0>
   18a20:	mvn	r3, #0
   18a24:	str	r3, [sp, #16]
   18a28:	b	1867c <__assert_fail@plt+0x5f38>
   18a2c:	ldr	r7, [sp, #20]
   18a30:	mov	r1, r0
   18a34:	mov	r3, r7
   18a38:	ldr	r2, [pc, #776]	; 18d48 <__assert_fail@plt+0x6604>
   18a3c:	str	fp, [sp]
   18a40:	bl	14234 <__assert_fail@plt+0x1af0>
   18a44:	mov	r3, r7
   18a48:	str	fp, [sp]
   18a4c:	mov	r2, #174	; 0xae
   18a50:	ldr	r1, [pc, #756]	; 18d4c <__assert_fail@plt+0x6608>
   18a54:	mov	r0, #97	; 0x61
   18a58:	bl	13c94 <__assert_fail@plt+0x1550>
   18a5c:	mvn	r3, #0
   18a60:	str	r3, [sp, #16]
   18a64:	b	1828c <__assert_fail@plt+0x5b48>
   18a68:	mov	r3, #0
   18a6c:	str	r3, [sp, #16]
   18a70:	mov	r5, #1
   18a74:	b	180f4 <__assert_fail@plt+0x59b0>
   18a78:	ldr	r0, [sp, #40]	; 0x28
   18a7c:	bl	15198 <__assert_fail@plt+0x2a54>
   18a80:	ldr	r1, [pc, #676]	; 18d2c <__assert_fail@plt+0x65e8>
   18a84:	mov	r2, r0
   18a88:	ldr	r0, [sp, #28]
   18a8c:	bl	12678 <gpgrt_fprintf@plt>
   18a90:	ldr	r2, [pc, #584]	; 18ce0 <__assert_fail@plt+0x659c>
   18a94:	b	18964 <__assert_fail@plt+0x6220>
   18a98:	ldr	r3, [sp, #52]	; 0x34
   18a9c:	cmp	r3, #0
   18aa0:	beq	18b08 <__assert_fail@plt+0x63c4>
   18aa4:	ldr	r3, [sp, #44]	; 0x2c
   18aa8:	mov	r4, #16
   18aac:	str	r0, [r3, #44]	; 0x2c
   18ab0:	b	185cc <__assert_fail@plt+0x5e88>
   18ab4:	ldrb	r3, [r3, #1]
   18ab8:	cmp	r3, #0
   18abc:	beq	18578 <__assert_fail@plt+0x5e34>
   18ac0:	mov	r1, #58	; 0x3a
   18ac4:	ldr	r0, [sp, #40]	; 0x28
   18ac8:	bl	12408 <strchr@plt>
   18acc:	subs	r9, r0, #0
   18ad0:	bne	184d0 <__assert_fail@plt+0x5d8c>
   18ad4:	b	184e8 <__assert_fail@plt+0x5da4>
   18ad8:	ldr	r0, [sp, #36]	; 0x24
   18adc:	ldr	r1, [pc, #500]	; 18cd8 <__assert_fail@plt+0x6594>
   18ae0:	bl	12054 <strcmp@plt>
   18ae4:	cmp	r0, #0
   18ae8:	bne	18b20 <__assert_fail@plt+0x63dc>
   18aec:	ldr	r2, [sp, #44]	; 0x2c
   18af0:	ldr	r1, [sp, #52]	; 0x34
   18af4:	ldr	r3, [r2, #4]
   18af8:	cmp	r1, #0
   18afc:	bic	r3, r3, #128	; 0x80
   18b00:	str	r3, [r2, #4]
   18b04:	bne	185c8 <__assert_fail@plt+0x5e84>
   18b08:	mov	r3, #1
   18b0c:	str	r3, [sp, #24]
   18b10:	mov	r5, r3
   18b14:	mov	r3, #0
   18b18:	str	r3, [sp, #16]
   18b1c:	b	180f4 <__assert_fail@plt+0x59b0>
   18b20:	ldr	r3, [sp, #52]	; 0x34
   18b24:	cmp	r3, #0
   18b28:	bne	185c8 <__assert_fail@plt+0x5e84>
   18b2c:	b	18b08 <__assert_fail@plt+0x63c4>
   18b30:	ldr	r6, [sp, #44]	; 0x2c
   18b34:	ldr	r0, [r6, #48]	; 0x30
   18b38:	bl	12150 <gcry_free@plt>
   18b3c:	mov	r3, #0
   18b40:	str	r3, [r6, #48]	; 0x30
   18b44:	b	185d8 <__assert_fail@plt+0x5e94>
   18b48:	cmp	r4, #0
   18b4c:	beq	18a68 <__assert_fail@plt+0x6324>
   18b50:	ldr	r9, [sp, #24]
   18b54:	b	184e8 <__assert_fail@plt+0x5da4>
   18b58:	bl	1218c <__stack_chk_fail@plt>
   18b5c:	bl	120c0 <getuid@plt>
   18b60:	bl	12078 <getpwuid@plt>
   18b64:	subs	r6, r0, #0
   18b68:	beq	18c60 <__assert_fail@plt+0x651c>
   18b6c:	ldr	r0, [r6]
   18b70:	bl	12528 <gcry_xstrdup@plt>
   18b74:	mov	r1, r0
   18b78:	str	r0, [r4, #20]
   18b7c:	b	184f8 <__assert_fail@plt+0x5db4>
   18b80:	mov	r1, r3
   18b84:	mov	r0, r3
   18b88:	bl	12600 <getgroups@plt>
   18b8c:	mov	r1, #4
   18b90:	mov	r6, r0
   18b94:	add	r0, r0, #1
   18b98:	bl	12690 <gcry_xcalloc@plt>
   18b9c:	mov	r1, r0
   18ba0:	str	r0, [sp, #16]
   18ba4:	mov	r0, r6
   18ba8:	bl	12600 <getgroups@plt>
   18bac:	subs	r7, r0, #0
   18bb0:	blt	18c78 <__assert_fail@plt+0x6534>
   18bb4:	mov	r1, #4
   18bb8:	add	r0, r7, #1
   18bbc:	bl	12690 <gcry_xcalloc@plt>
   18bc0:	cmp	r7, #0
   18bc4:	str	r0, [r4, #28]
   18bc8:	beq	18c9c <__assert_fail@plt+0x6558>
   18bcc:	ldr	r3, [sp, #16]
   18bd0:	sub	r6, r3, #4
   18bd4:	rsb	r3, r3, #4
   18bd8:	add	r7, r6, r7, lsl #2
   18bdc:	str	r3, [sp, #32]
   18be0:	b	18c04 <__assert_fail@plt+0x64c0>
   18be4:	ldr	r0, [r3]
   18be8:	ldr	r3, [r4, #28]
   18bec:	str	r3, [sp, #40]	; 0x28
   18bf0:	bl	12528 <gcry_xstrdup@plt>
   18bf4:	ldr	r3, [sp, #40]	; 0x28
   18bf8:	cmp	r7, r6
   18bfc:	str	r0, [r3, sl]
   18c00:	beq	18c9c <__assert_fail@plt+0x6558>
   18c04:	ldr	r3, [sp, #32]
   18c08:	add	sl, r3, r6
   18c0c:	ldr	r0, [r6, #4]!
   18c10:	bl	12738 <getgrgid@plt>
   18c14:	subs	r3, r0, #0
   18c18:	bne	18be4 <__assert_fail@plt+0x64a0>
   18c1c:	str	r3, [sp, #40]	; 0x28
   18c20:	bl	1245c <__errno_location@plt>
   18c24:	ldr	r2, [pc, #292]	; 18d50 <__assert_fail@plt+0x660c>
   18c28:	ldr	r1, [r0]
   18c2c:	mov	r0, #1
   18c30:	bl	14234 <__assert_fail@plt+0x1af0>
   18c34:	ldr	r3, [sp, #40]	; 0x28
   18c38:	b	18be4 <__assert_fail@plt+0x64a0>
   18c3c:	bl	12498 <getgid@plt>
   18c40:	bl	12738 <getgrgid@plt>
   18c44:	subs	r6, r0, #0
   18c48:	beq	18cac <__assert_fail@plt+0x6568>
   18c4c:	ldr	r0, [r6]
   18c50:	bl	12528 <gcry_xstrdup@plt>
   18c54:	mov	r1, r0
   18c58:	str	r0, [r4, #24]
   18c5c:	b	1852c <__assert_fail@plt+0x5de8>
   18c60:	bl	1245c <__errno_location@plt>
   18c64:	ldr	r2, [pc, #232]	; 18d54 <__assert_fail@plt+0x6610>
   18c68:	ldr	r1, [r0]
   18c6c:	mov	r0, #1
   18c70:	bl	14234 <__assert_fail@plt+0x1af0>
   18c74:	b	18b6c <__assert_fail@plt+0x6428>
   18c78:	bl	1245c <__errno_location@plt>
   18c7c:	ldr	r2, [pc, #212]	; 18d58 <__assert_fail@plt+0x6614>
   18c80:	ldr	r1, [r0]
   18c84:	mov	r0, #1
   18c88:	bl	14234 <__assert_fail@plt+0x1af0>
   18c8c:	add	r0, r7, #1
   18c90:	mov	r1, #4
   18c94:	bl	12690 <gcry_xcalloc@plt>
   18c98:	str	r0, [r4, #28]
   18c9c:	ldr	r0, [sp, #16]
   18ca0:	bl	12150 <gcry_free@plt>
   18ca4:	ldr	r3, [r4, #28]
   18ca8:	b	18548 <__assert_fail@plt+0x5e04>
   18cac:	bl	1245c <__errno_location@plt>
   18cb0:	ldr	r2, [pc, #164]	; 18d5c <__assert_fail@plt+0x6618>
   18cb4:	ldr	r1, [r0]
   18cb8:	mov	r0, #1
   18cbc:	bl	14234 <__assert_fail@plt+0x1af0>
   18cc0:	b	18c4c <__assert_fail@plt+0x6508>
   18cc4:	andeq	sl, r3, r8, asr fp
   18cc8:	andeq	r8, r2, ip, asr #19
   18ccc:	andeq	r6, r2, r0, ror #29
   18cd0:	ldrdeq	r7, [r2], -r0
   18cd4:	ldrdeq	r7, [r2], -r4
   18cd8:	andeq	r7, r2, r0, lsr #2
   18cdc:	andeq	r7, r2, r8, lsr #2
   18ce0:	andeq	r6, r2, r4, ror #29
   18ce4:	muleq	r2, r4, r0
   18ce8:	andeq	r7, r2, r4, asr r1
   18cec:	andeq	r6, r2, r4, ror fp
   18cf0:	andeq	sp, r3, r0, lsr #6
   18cf4:	andeq	r6, r2, r8, ror #29
   18cf8:	strdeq	r7, [r2], -r8
   18cfc:	andeq	r6, r2, r4, lsl pc
   18d00:	andeq	r6, r2, r8, lsr pc
   18d04:	ldrdeq	r7, [r2], -ip
   18d08:	muleq	r3, r4, r5
   18d0c:	strdeq	r6, [r2], -r4
   18d10:	andeq	r6, r2, r0, ror pc
   18d14:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   18d18:	andeq	r6, r2, r8, asr #31
   18d1c:	andeq	r6, r2, r8, ror #31
   18d20:	andeq	r6, r2, r8, lsr #29
   18d24:	andeq	r7, r2, r8, lsl r2
   18d28:	andeq	r7, r2, r8, lsr r2
   18d2c:	andeq	r7, r2, r0, lsl r2
   18d30:	muleq	r2, r8, r9
   18d34:	ldrdeq	r5, [r2], -ip
   18d38:	andeq	r7, r2, r4, lsr r1
   18d3c:	andeq	r7, r2, r0, ror r0
   18d40:	muleq	r2, r8, r0
   18d44:			; <UNDEFINED> instruction: 0x00026eb8
   18d48:	andeq	r7, r2, ip, lsl r0
   18d4c:	andeq	r7, r2, ip, lsr r0
   18d50:	ldrdeq	r7, [r2], -r0
   18d54:	andeq	r7, r2, r4, ror #2
   18d58:	andeq	r7, r2, ip, lsr #3
   18d5c:	andeq	r7, r2, r8, lsl #3
   18d60:	ldr	r3, [pc, #1668]	; 193ec <__assert_fail@plt+0x6ca8>
   18d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d68:	sub	sp, sp, #76	; 0x4c
   18d6c:	ldr	r3, [r3]
   18d70:	mov	r4, #0
   18d74:	subs	r7, r0, #0
   18d78:	str	r4, [sp, #28]
   18d7c:	str	r3, [sp, #68]	; 0x44
   18d80:	str	r4, [sp, #32]
   18d84:	beq	19184 <__assert_fail@plt+0x6a40>
   18d88:	ldr	r1, [pc, #1632]	; 193f0 <__assert_fail@plt+0x6cac>
   18d8c:	str	r4, [sp, #36]	; 0x24
   18d90:	str	r4, [sp, #40]	; 0x28
   18d94:	str	r4, [sp, #44]	; 0x2c
   18d98:	str	r4, [sp, #48]	; 0x30
   18d9c:	str	r4, [sp, #52]	; 0x34
   18da0:	str	r4, [sp, #56]	; 0x38
   18da4:	str	r4, [sp, #60]	; 0x3c
   18da8:	str	r4, [sp, #64]	; 0x40
   18dac:	bl	12054 <strcmp@plt>
   18db0:	cmp	r0, #0
   18db4:	beq	18f78 <__assert_fail@plt+0x6834>
   18db8:	mov	r1, #47	; 0x2f
   18dbc:	mov	r0, r7
   18dc0:	bl	12408 <strchr@plt>
   18dc4:	subs	r3, r0, #0
   18dc8:	str	r3, [sp, #16]
   18dcc:	strne	r4, [sp, #16]
   18dd0:	beq	1929c <__assert_fail@plt+0x6b58>
   18dd4:	ldr	r1, [pc, #1560]	; 193f4 <__assert_fail@plt+0x6cb0>
   18dd8:	mov	r0, r7
   18ddc:	bl	124e0 <gpgrt_fopen@plt>
   18de0:	mov	r6, r0
   18de4:	cmp	r6, #0
   18de8:	beq	1935c <__assert_fail@plt+0x6c18>
   18dec:	ldr	r9, [pc, #1540]	; 193f8 <__assert_fail@plt+0x6cb4>
   18df0:	ldr	r3, [r9]
   18df4:	cmp	r3, #0
   18df8:	bne	191b0 <__assert_fail@plt+0x6a6c>
   18dfc:	mov	r8, #0
   18e00:	mov	r4, r8
   18e04:	mvn	sl, #0
   18e08:	str	r8, [sp, #8]
   18e0c:	mov	r3, #0
   18e10:	add	r2, sp, #32
   18e14:	add	r1, sp, #28
   18e18:	mov	r0, r6
   18e1c:	bl	12024 <gpgrt_read_line@plt>
   18e20:	cmp	r0, #0
   18e24:	ble	18f8c <__assert_fail@plt+0x6848>
   18e28:	ldr	r5, [sp, #28]
   18e2c:	add	r4, r4, #1
   18e30:	ldrb	r3, [r5]
   18e34:	cmp	r3, #32
   18e38:	cmpne	r3, #9
   18e3c:	bne	18e50 <__assert_fail@plt+0x670c>
   18e40:	ldrb	r3, [r5, #1]!
   18e44:	cmp	r3, #9
   18e48:	cmpne	r3, #32
   18e4c:	beq	18e40 <__assert_fail@plt+0x66fc>
   18e50:	cmp	r3, #0
   18e54:	sub	fp, r3, #35	; 0x23
   18e58:	clz	fp, fp
   18e5c:	lsr	fp, fp, #5
   18e60:	moveq	fp, #1
   18e64:	cmp	r3, #13
   18e68:	orreq	fp, fp, #1
   18e6c:	cmp	r3, #10
   18e70:	orreq	fp, fp, #1
   18e74:	cmp	fp, #0
   18e78:	bne	18e0c <__assert_fail@plt+0x66c8>
   18e7c:	mov	r0, r5
   18e80:	bl	1a3b0 <__assert_fail@plt+0x7c6c>
   18e84:	ldrb	r3, [r5]
   18e88:	cmp	r3, #91	; 0x5b
   18e8c:	beq	19060 <__assert_fail@plt+0x691c>
   18e90:	ldr	r2, [sp, #8]
   18e94:	cmp	r2, #0
   18e98:	bne	18e0c <__assert_fail@plt+0x66c8>
   18e9c:	cmp	sl, #0
   18ea0:	blt	1915c <__assert_fail@plt+0x6a18>
   18ea4:	tst	r3, #223	; 0xdf
   18ea8:	beq	1939c <__assert_fail@plt+0x6c58>
   18eac:	cmp	r3, #9
   18eb0:	mov	r3, r5
   18eb4:	bne	18ec4 <__assert_fail@plt+0x6780>
   18eb8:	b	18ed0 <__assert_fail@plt+0x678c>
   18ebc:	cmp	r2, #9
   18ec0:	beq	18ed0 <__assert_fail@plt+0x678c>
   18ec4:	ldrb	r2, [r3, #1]!
   18ec8:	tst	r2, #223	; 0xdf
   18ecc:	bne	18ebc <__assert_fail@plt+0x6778>
   18ed0:	mov	fp, r3
   18ed4:	str	r3, [sp, #20]
   18ed8:	mov	r3, #0
   18edc:	strb	r3, [fp], #1
   18ee0:	mov	r2, #0
   18ee4:	mov	r1, r5
   18ee8:	mov	r0, sl
   18eec:	bl	13e9c <__assert_fail@plt+0x1758>
   18ef0:	subs	r3, r0, #0
   18ef4:	str	r3, [sp, #12]
   18ef8:	ldr	r3, [sp, #20]
   18efc:	beq	1932c <__assert_fail@plt+0x6be8>
   18f00:	mov	r0, fp
   18f04:	str	r3, [sp, #20]
   18f08:	bl	1a310 <__assert_fail@plt+0x7bcc>
   18f0c:	ldr	r3, [sp, #20]
   18f10:	ldrb	r1, [r3, #1]
   18f14:	cmp	r1, #91	; 0x5b
   18f18:	beq	191e0 <__assert_fail@plt+0x6a9c>
   18f1c:	ldr	r3, [sp, #12]
   18f20:	ldr	r2, [pc, #1236]	; 193fc <__assert_fail@plt+0x6cb8>
   18f24:	ldr	r3, [r3, #20]
   18f28:	add	r3, r2, r3, lsl #3
   18f2c:	ldr	r5, [r3, #308]	; 0x134
   18f30:	cmp	r5, #0
   18f34:	bne	19324 <__assert_fail@plt+0x6be0>
   18f38:	cmp	r1, #0
   18f3c:	beq	19278 <__assert_fail@plt+0x6b34>
   18f40:	ldr	r3, [sp, #12]
   18f44:	ldr	r0, [r3, #48]	; 0x30
   18f48:	bl	12150 <gcry_free@plt>
   18f4c:	ldr	r2, [sp, #12]
   18f50:	mov	r3, #0
   18f54:	str	r3, [r2, #48]	; 0x30
   18f58:	mov	r1, #1
   18f5c:	str	r1, [sp]
   18f60:	mov	r3, fp
   18f64:	mov	r2, r5
   18f68:	ldr	r0, [sp, #12]
   18f6c:	add	r1, sp, #36	; 0x24
   18f70:	bl	14988 <__assert_fail@plt+0x2244>
   18f74:	b	18e0c <__assert_fail@plt+0x66c8>
   18f78:	str	r0, [sp, #16]
   18f7c:	mov	r0, #0
   18f80:	bl	1239c <_gpgrt_get_std_stream@plt>
   18f84:	mov	r6, r0
   18f88:	b	18de4 <__assert_fail@plt+0x66a0>
   18f8c:	bne	190d0 <__assert_fail@plt+0x698c>
   18f90:	mov	r0, r6
   18f94:	bl	121c8 <gpgrt_ferror@plt>
   18f98:	subs	r5, r0, #0
   18f9c:	bne	190d0 <__assert_fail@plt+0x698c>
   18fa0:	mov	r0, r6
   18fa4:	bl	122b8 <gpgrt_fclose@plt>
   18fa8:	cmp	r0, #0
   18fac:	bne	193a4 <__assert_fail@plt+0x6c60>
   18fb0:	cmp	r8, #0
   18fb4:	bne	193c4 <__assert_fail@plt+0x6c80>
   18fb8:	ldr	r0, [sp, #28]
   18fbc:	bl	12150 <gcry_free@plt>
   18fc0:	mov	r3, #0
   18fc4:	mov	r4, r3
   18fc8:	ldr	r5, [r9, #12]
   18fcc:	str	r3, [r9, #12]
   18fd0:	mov	r2, #0
   18fd4:	mov	r3, #1
   18fd8:	mov	r0, r4
   18fdc:	mov	r1, r2
   18fe0:	add	r4, r4, r3
   18fe4:	bl	16a84 <__assert_fail@plt+0x4340>
   18fe8:	cmp	r4, #6
   18fec:	bne	18fd0 <__assert_fail@plt+0x688c>
   18ff0:	cmp	r5, #0
   18ff4:	str	r5, [r9, #12]
   18ff8:	beq	19034 <__assert_fail@plt+0x68f0>
   18ffc:	ldr	r5, [pc, #1020]	; 19400 <__assert_fail@plt+0x6cbc>
   19000:	add	r4, sp, #36	; 0x24
   19004:	add	r6, sp, #68	; 0x44
   19008:	ldr	r3, [r4], #4
   1900c:	cmp	r3, #0
   19010:	beq	19028 <__assert_fail@plt+0x68e4>
   19014:	ldr	r3, [r5, #12]
   19018:	cmp	r3, #0
   1901c:	beq	19028 <__assert_fail@plt+0x68e4>
   19020:	mov	r0, #0
   19024:	blx	r3
   19028:	cmp	r6, r4
   1902c:	add	r5, r5, #24
   19030:	bne	19008 <__assert_fail@plt+0x68c4>
   19034:	mov	r5, #0
   19038:	ldr	r0, [sp, #16]
   1903c:	bl	12150 <gcry_free@plt>
   19040:	ldr	r3, [pc, #932]	; 193ec <__assert_fail@plt+0x6ca8>
   19044:	ldr	r2, [sp, #68]	; 0x44
   19048:	mov	r0, r5
   1904c:	ldr	r3, [r3]
   19050:	cmp	r2, r3
   19054:	bne	193e8 <__assert_fail@plt+0x6ca4>
   19058:	add	sp, sp, #76	; 0x4c
   1905c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19060:	add	r5, r5, #1
   19064:	mov	r0, r5
   19068:	mov	r1, #93	; 0x5d
   1906c:	bl	12408 <strchr@plt>
   19070:	cmp	r0, #0
   19074:	beq	192fc <__assert_fail@plt+0x6bb8>
   19078:	ldrb	r3, [r0, #1]
   1907c:	strb	fp, [r0]
   19080:	cmp	r3, #0
   19084:	bne	191c0 <__assert_fail@plt+0x6a7c>
   19088:	mov	r0, r5
   1908c:	bl	1a310 <__assert_fail@plt+0x7bcc>
   19090:	mov	r0, r5
   19094:	bl	15dd4 <__assert_fail@plt+0x3690>
   19098:	subs	sl, r0, #0
   1909c:	movge	r3, #0
   190a0:	strge	r3, [sp, #8]
   190a4:	bge	18e0c <__assert_fail@plt+0x66c8>
   190a8:	ldr	r3, [sp, #28]
   190ac:	str	r5, [sp]
   190b0:	sub	r3, r5, r3
   190b4:	mov	r2, r4
   190b8:	mov	r1, r7
   190bc:	ldr	r0, [pc, #832]	; 19404 <__assert_fail@plt+0x6cc0>
   190c0:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   190c4:	mov	r3, #1
   190c8:	str	r3, [sp, #8]
   190cc:	b	18e0c <__assert_fail@plt+0x66c8>
   190d0:	bl	12420 <gpg_err_code_from_syserror@plt>
   190d4:	mov	r2, #5
   190d8:	ldr	r1, [pc, #808]	; 19408 <__assert_fail@plt+0x6cc4>
   190dc:	uxth	r5, r0
   190e0:	mov	r0, #0
   190e4:	bl	12180 <dcgettext@plt>
   190e8:	mov	r8, r0
   190ec:	mov	r0, r5
   190f0:	bl	1260c <gpg_strerror@plt>
   190f4:	mov	r2, r4
   190f8:	mov	r1, r7
   190fc:	mov	r3, r0
   19100:	mov	r0, r8
   19104:	bl	1e95c <__assert_fail@plt+0xc218>
   19108:	mov	r0, r6
   1910c:	bl	122b8 <gpgrt_fclose@plt>
   19110:	cmp	r0, #0
   19114:	beq	19130 <__assert_fail@plt+0x69ec>
   19118:	ldr	r1, [pc, #748]	; 1940c <__assert_fail@plt+0x6cc8>
   1911c:	mov	r2, #5
   19120:	mov	r0, #0
   19124:	bl	12180 <dcgettext@plt>
   19128:	mov	r1, r7
   1912c:	bl	1e95c <__assert_fail@plt+0xc218>
   19130:	mov	r2, #5
   19134:	ldr	r1, [pc, #724]	; 19410 <__assert_fail@plt+0x6ccc>
   19138:	mov	r0, #0
   1913c:	bl	12180 <dcgettext@plt>
   19140:	mov	r1, r7
   19144:	bl	1e95c <__assert_fail@plt+0xc218>
   19148:	ldr	r0, [sp, #28]
   1914c:	bl	12150 <gcry_free@plt>
   19150:	cmp	r5, #0
   19154:	bne	19038 <__assert_fail@plt+0x68f4>
   19158:	b	18fc0 <__assert_fail@plt+0x687c>
   1915c:	ldr	r3, [sp, #28]
   19160:	mov	r2, r4
   19164:	sub	r3, r5, r3
   19168:	mov	r1, r7
   1916c:	ldr	r0, [pc, #672]	; 19414 <__assert_fail@plt+0x6cd0>
   19170:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   19174:	mov	r3, #1
   19178:	add	r8, r8, #1
   1917c:	str	r3, [sp, #8]
   19180:	b	18e0c <__assert_fail@plt+0x66c8>
   19184:	str	r7, [sp, #36]	; 0x24
   19188:	str	r7, [sp, #40]	; 0x28
   1918c:	str	r7, [sp, #44]	; 0x2c
   19190:	str	r7, [sp, #48]	; 0x30
   19194:	str	r7, [sp, #52]	; 0x34
   19198:	str	r7, [sp, #56]	; 0x38
   1919c:	str	r7, [sp, #60]	; 0x3c
   191a0:	str	r7, [sp, #64]	; 0x40
   191a4:	str	r7, [sp, #16]
   191a8:	ldr	r7, [pc, #576]	; 193f0 <__assert_fail@plt+0x6cac>
   191ac:	b	18f7c <__assert_fail@plt+0x6838>
   191b0:	mov	r1, r7
   191b4:	ldr	r0, [pc, #604]	; 19418 <__assert_fail@plt+0x6cd4>
   191b8:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   191bc:	b	18dfc <__assert_fail@plt+0x66b8>
   191c0:	ldr	r3, [sp, #28]
   191c4:	add	r0, r0, #1
   191c8:	sub	r3, r0, r3
   191cc:	mov	r2, r4
   191d0:	mov	r1, r7
   191d4:	ldr	r0, [pc, #576]	; 1941c <__assert_fail@plt+0x6cd8>
   191d8:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   191dc:	b	19088 <__assert_fail@plt+0x6944>
   191e0:	add	r5, r3, #2
   191e4:	mov	r0, r5
   191e8:	mov	r1, #93	; 0x5d
   191ec:	bl	12408 <strchr@plt>
   191f0:	subs	r3, r0, #0
   191f4:	str	r3, [sp, #20]
   191f8:	beq	19380 <__assert_fail@plt+0x6c3c>
   191fc:	ldr	fp, [sp, #20]
   19200:	mov	r3, #0
   19204:	strb	r3, [fp], #1
   19208:	mov	r0, fp
   1920c:	bl	1a310 <__assert_fail@plt+0x7bcc>
   19210:	ldr	r3, [sp, #12]
   19214:	ldr	r2, [pc, #480]	; 193fc <__assert_fail@plt+0x6cb8>
   19218:	mov	r0, r5
   1921c:	ldr	r3, [r3, #20]
   19220:	ldr	r1, [pc, #504]	; 19420 <__assert_fail@plt+0x6cdc>
   19224:	add	r3, r2, r3, lsl #3
   19228:	ldr	r3, [r3, #308]	; 0x134
   1922c:	cmp	r3, #0
   19230:	beq	19258 <__assert_fail@plt+0x6b14>
   19234:	bl	12054 <strcmp@plt>
   19238:	cmp	r0, #0
   1923c:	beq	19284 <__assert_fail@plt+0x6b40>
   19240:	ldr	r3, [sp, #20]
   19244:	mov	r5, #0
   19248:	ldrb	r1, [r3, #1]
   1924c:	cmp	r1, #0
   19250:	beq	18f58 <__assert_fail@plt+0x6814>
   19254:	b	18f40 <__assert_fail@plt+0x67fc>
   19258:	bl	12054 <strcmp@plt>
   1925c:	ldr	r2, [sp, #20]
   19260:	ldrb	r2, [r2, #1]
   19264:	cmp	r2, #0
   19268:	bne	19238 <__assert_fail@plt+0x6af4>
   1926c:	cmp	r0, #0
   19270:	ldreq	fp, [pc, #428]	; 19424 <__assert_fail@plt+0x6ce0>
   19274:	beq	19284 <__assert_fail@plt+0x6b40>
   19278:	mov	r5, #0
   1927c:	ldr	fp, [pc, #416]	; 19424 <__assert_fail@plt+0x6ce0>
   19280:	b	18f40 <__assert_fail@plt+0x67fc>
   19284:	ldr	r2, [sp, #12]
   19288:	mov	r3, #0
   1928c:	mov	r5, #16
   19290:	str	r3, [r2, #44]	; 0x2c
   19294:	ldrb	r1, [fp]
   19298:	b	1924c <__assert_fail@plt+0x6b08>
   1929c:	mov	r1, #46	; 0x2e
   192a0:	mov	r0, r7
   192a4:	bl	12408 <strchr@plt>
   192a8:	subs	r4, r0, #0
   192ac:	bne	18dd4 <__assert_fail@plt+0x6690>
   192b0:	bl	2046c <__assert_fail@plt+0xdd28>
   192b4:	ldr	r3, [sp, #16]
   192b8:	mov	r2, r7
   192bc:	str	r3, [sp]
   192c0:	ldr	r1, [pc, #352]	; 19428 <__assert_fail@plt+0x6ce4>
   192c4:	ldr	r3, [pc, #352]	; 1942c <__assert_fail@plt+0x6ce8>
   192c8:	bl	1abe0 <__assert_fail@plt+0x849c>
   192cc:	mov	r1, r4
   192d0:	mov	r5, r0
   192d4:	str	r0, [sp, #16]
   192d8:	bl	12534 <access@plt>
   192dc:	ldr	r1, [pc, #268]	; 193f0 <__assert_fail@plt+0x6cac>
   192e0:	cmp	r0, #0
   192e4:	moveq	r7, r5
   192e8:	mov	r0, r7
   192ec:	bl	12054 <strcmp@plt>
   192f0:	cmp	r0, #0
   192f4:	bne	18dd4 <__assert_fail@plt+0x6690>
   192f8:	b	18f7c <__assert_fail@plt+0x6838>
   192fc:	ldr	r3, [sp, #28]
   19300:	mov	r2, r4
   19304:	sub	r3, r5, r3
   19308:	mov	r1, r7
   1930c:	ldr	r0, [pc, #284]	; 19430 <__assert_fail@plt+0x6cec>
   19310:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   19314:	mov	r3, #1
   19318:	add	r8, r8, #1
   1931c:	str	r3, [sp, #8]
   19320:	b	18e0c <__assert_fail@plt+0x66c8>
   19324:	mov	r5, #0
   19328:	b	1924c <__assert_fail@plt+0x6b08>
   1932c:	ldr	r2, [pc, #200]	; 193fc <__assert_fail@plt+0x6cb8>
   19330:	ldr	r3, [sp, #28]
   19334:	str	r5, [sp]
   19338:	ldr	r2, [r2, sl, lsl #4]
   1933c:	sub	r3, r5, r3
   19340:	str	r2, [sp, #4]
   19344:	mov	r1, r7
   19348:	mov	r2, r4
   1934c:	ldr	r0, [pc, #224]	; 19434 <__assert_fail@plt+0x6cf0>
   19350:	add	r8, r8, #1
   19354:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   19358:	b	18e0c <__assert_fail@plt+0x66c8>
   1935c:	bl	12420 <gpg_err_code_from_syserror@plt>
   19360:	uxth	r5, r0
   19364:	mov	r0, r5
   19368:	bl	1260c <gpg_strerror@plt>
   1936c:	mov	r1, r7
   19370:	mov	r2, r0
   19374:	ldr	r0, [pc, #188]	; 19438 <__assert_fail@plt+0x6cf4>
   19378:	bl	1e95c <__assert_fail@plt+0xc218>
   1937c:	b	19040 <__assert_fail@plt+0x68fc>
   19380:	ldr	r3, [sp, #28]
   19384:	mov	r2, r4
   19388:	rsb	r3, r3, #0
   1938c:	mov	r1, r7
   19390:	ldr	r0, [pc, #164]	; 1943c <__assert_fail@plt+0x6cf8>
   19394:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   19398:	b	18e0c <__assert_fail@plt+0x66c8>
   1939c:	mov	r3, r5
   193a0:	b	18ed0 <__assert_fail@plt+0x678c>
   193a4:	mov	r2, #5
   193a8:	ldr	r1, [pc, #92]	; 1940c <__assert_fail@plt+0x6cc8>
   193ac:	mov	r0, r5
   193b0:	bl	12180 <dcgettext@plt>
   193b4:	mov	r1, r7
   193b8:	bl	1e95c <__assert_fail@plt+0xc218>
   193bc:	cmp	r8, #0
   193c0:	beq	18fb8 <__assert_fail@plt+0x6874>
   193c4:	mov	r2, #5
   193c8:	ldr	r1, [pc, #64]	; 19410 <__assert_fail@plt+0x6ccc>
   193cc:	mov	r0, #0
   193d0:	bl	12180 <dcgettext@plt>
   193d4:	mov	r1, r7
   193d8:	bl	1e95c <__assert_fail@plt+0xc218>
   193dc:	ldr	r0, [sp, #28]
   193e0:	bl	12150 <gcry_free@plt>
   193e4:	b	18fc0 <__assert_fail@plt+0x687c>
   193e8:	bl	1218c <__stack_chk_fail@plt>
   193ec:	andeq	sl, r3, r8, asr fp
   193f0:	andeq	r7, r2, r8, ror #4
   193f4:	andeq	r8, r2, ip, asr #19
   193f8:	muleq	r3, r4, r5
   193fc:	muleq	r2, r4, r0
   19400:	strdeq	r6, [r2], -r4
   19404:	andeq	r7, r2, r4, lsl #6
   19408:	andeq	r7, r2, ip, asr #7
   1940c:	strdeq	r7, [r2], -r8
   19410:	andeq	r7, r2, r4, ror #7
   19414:	andeq	r7, r2, r8, lsr r3
   19418:	andeq	r7, r2, ip, lsl #5
   1941c:	ldrdeq	r7, [r2], -r4
   19420:	ldrdeq	r7, [r2], -r4
   19424:	andeq	r6, r2, r0, ror fp
   19428:	andeq	r9, r2, r8, lsr #32
   1942c:	andeq	r7, r2, ip, ror #4
   19430:	andeq	r7, r2, r4, lsr #5
   19434:	andeq	r7, r2, r4, ror #6
   19438:	andeq	r7, r2, r4, ror r2
   1943c:	muleq	r2, ip, r3
   19440:	push	{r4, lr}
   19444:	mov	r0, #6
   19448:	ldr	r4, [pc, #28]	; 1946c <__assert_fail@plt+0x6d28>
   1944c:	ldr	r1, [pc, #28]	; 19470 <__assert_fail@plt+0x6d2c>
   19450:	bl	12588 <setlocale@plt>
   19454:	mov	r0, r4
   19458:	ldr	r1, [pc, #20]	; 19474 <__assert_fail@plt+0x6d30>
   1945c:	bl	12684 <bindtextdomain@plt>
   19460:	mov	r0, r4
   19464:	pop	{r4, lr}
   19468:	b	12204 <textdomain@plt>
   1946c:	andeq	r6, r2, r8, ror r4
   19470:	andeq	r6, r2, r4, ror #29
   19474:	andeq	r6, r2, r8, lsl #9
   19478:	push	{r4, r5, r6, lr}
   1947c:	mov	r1, #0
   19480:	ldr	r0, [pc, #88]	; 194e0 <__assert_fail@plt+0x6d9c>
   19484:	bl	12294 <bind_textdomain_codeset@plt>
   19488:	subs	r4, r0, #0
   1948c:	beq	194b8 <__assert_fail@plt+0x6d74>
   19490:	mov	r0, r4
   19494:	bl	12528 <gcry_xstrdup@plt>
   19498:	ldr	r1, [pc, #68]	; 194e4 <__assert_fail@plt+0x6da0>
   1949c:	mov	r4, r0
   194a0:	ldr	r0, [pc, #56]	; 194e0 <__assert_fail@plt+0x6d9c>
   194a4:	bl	12294 <bind_textdomain_codeset@plt>
   194a8:	subs	r5, r0, #0
   194ac:	beq	194d0 <__assert_fail@plt+0x6d8c>
   194b0:	mov	r0, r4
   194b4:	pop	{r4, r5, r6, pc}
   194b8:	mov	r0, #14
   194bc:	bl	125d0 <nl_langinfo@plt>
   194c0:	subs	r4, r0, #0
   194c4:	bne	19490 <__assert_fail@plt+0x6d4c>
   194c8:	mov	r0, r4
   194cc:	pop	{r4, r5, r6, pc}
   194d0:	mov	r0, r4
   194d4:	bl	12150 <gcry_free@plt>
   194d8:	mov	r4, r5
   194dc:	b	194b0 <__assert_fail@plt+0x6d6c>
   194e0:	andeq	r6, r2, r8, ror r4
   194e4:	andeq	r6, r2, r0, lsl #9
   194e8:	push	{r4, lr}
   194ec:	subs	r4, r0, #0
   194f0:	popeq	{r4, pc}
   194f4:	mov	r1, r4
   194f8:	ldr	r0, [pc, #12]	; 1950c <__assert_fail@plt+0x6dc8>
   194fc:	bl	12294 <bind_textdomain_codeset@plt>
   19500:	mov	r0, r4
   19504:	pop	{r4, lr}
   19508:	b	12150 <gcry_free@plt>
   1950c:	andeq	r6, r2, r8, ror r4
   19510:	push	{r4, r5, r6, lr}
   19514:	mov	r5, r0
   19518:	bl	19478 <__assert_fail@plt+0x6d34>
   1951c:	mov	r1, r5
   19520:	mov	r2, #5
   19524:	mov	r4, r0
   19528:	mov	r0, #0
   1952c:	bl	12180 <dcgettext@plt>
   19530:	cmp	r4, #0
   19534:	mov	r5, r0
   19538:	beq	19550 <__assert_fail@plt+0x6e0c>
   1953c:	mov	r1, r4
   19540:	ldr	r0, [pc, #16]	; 19558 <__assert_fail@plt+0x6e14>
   19544:	bl	12294 <bind_textdomain_codeset@plt>
   19548:	mov	r0, r4
   1954c:	bl	12150 <gcry_free@plt>
   19550:	mov	r0, r5
   19554:	pop	{r4, r5, r6, pc}
   19558:	andeq	r6, r2, r8, ror r4
   1955c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19560:	subs	r5, r0, #0
   19564:	mov	r6, r1
   19568:	beq	19668 <__assert_fail@plt+0x6f24>
   1956c:	ldr	r8, [pc, #376]	; 196ec <__assert_fail@plt+0x6fa8>
   19570:	ldr	r4, [r8]
   19574:	cmp	r4, #0
   19578:	bne	1958c <__assert_fail@plt+0x6e48>
   1957c:	b	195d4 <__assert_fail@plt+0x6e90>
   19580:	ldr	r4, [r4]
   19584:	cmp	r4, #0
   19588:	beq	195d4 <__assert_fail@plt+0x6e90>
   1958c:	mov	r1, r5
   19590:	add	r0, r4, #8
   19594:	bl	12054 <strcmp@plt>
   19598:	cmp	r0, #0
   1959c:	bne	19580 <__assert_fail@plt+0x6e3c>
   195a0:	ldr	r3, [r4, #4]
   195a4:	cmp	r3, #0
   195a8:	beq	195d4 <__assert_fail@plt+0x6e90>
   195ac:	ldr	r2, [r3, #4]
   195b0:	cmp	r6, r2
   195b4:	bne	195c8 <__assert_fail@plt+0x6e84>
   195b8:	b	19684 <__assert_fail@plt+0x6f40>
   195bc:	ldr	r2, [r3, #4]
   195c0:	cmp	r2, r6
   195c4:	beq	19684 <__assert_fail@plt+0x6f40>
   195c8:	ldr	r3, [r3]
   195cc:	cmp	r3, #0
   195d0:	bne	195bc <__assert_fail@plt+0x6e78>
   195d4:	mov	r1, #0
   195d8:	mov	r0, #5
   195dc:	bl	12588 <setlocale@plt>
   195e0:	cmp	r0, #0
   195e4:	beq	19668 <__assert_fail@plt+0x6f24>
   195e8:	bl	12714 <gcry_strdup@plt>
   195ec:	subs	r9, r0, #0
   195f0:	beq	19668 <__assert_fail@plt+0x6f24>
   195f4:	mov	r1, r5
   195f8:	mov	r0, #5
   195fc:	bl	12588 <setlocale@plt>
   19600:	cmp	r0, #0
   19604:	beq	196a4 <__assert_fail@plt+0x6f60>
   19608:	ldr	r1, [pc, #224]	; 196f0 <__assert_fail@plt+0x6fac>
   1960c:	ldr	r0, [pc, #224]	; 196f4 <__assert_fail@plt+0x6fb0>
   19610:	bl	12684 <bindtextdomain@plt>
   19614:	mov	r2, #5
   19618:	mov	r1, r6
   1961c:	mov	r0, #0
   19620:	bl	12180 <dcgettext@plt>
   19624:	mov	r1, r9
   19628:	mov	r7, r0
   1962c:	mov	r0, #5
   19630:	bl	12588 <setlocale@plt>
   19634:	ldr	r1, [pc, #180]	; 196f0 <__assert_fail@plt+0x6fac>
   19638:	ldr	r0, [pc, #180]	; 196f4 <__assert_fail@plt+0x6fb0>
   1963c:	bl	12684 <bindtextdomain@plt>
   19640:	cmp	r4, #0
   19644:	beq	196b0 <__assert_fail@plt+0x6f6c>
   19648:	mov	r0, #12
   1964c:	bl	1200c <gcry_malloc@plt>
   19650:	cmp	r0, #0
   19654:	ldrne	r3, [r4, #4]
   19658:	strdne	r6, [r0, #4]
   1965c:	strne	r3, [r0]
   19660:	strne	r0, [r4, #4]
   19664:	b	1968c <__assert_fail@plt+0x6f48>
   19668:	mov	r0, #0
   1966c:	bl	12150 <gcry_free@plt>
   19670:	mov	r1, r6
   19674:	mov	r2, #5
   19678:	mov	r0, #0
   1967c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19680:	b	12180 <dcgettext@plt>
   19684:	ldr	r7, [r3, #8]
   19688:	mov	r9, #0
   1968c:	mov	r0, r9
   19690:	bl	12150 <gcry_free@plt>
   19694:	cmp	r7, #0
   19698:	beq	19670 <__assert_fail@plt+0x6f2c>
   1969c:	mov	r0, r7
   196a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196a4:	mov	r0, r9
   196a8:	bl	12150 <gcry_free@plt>
   196ac:	b	19670 <__assert_fail@plt+0x6f2c>
   196b0:	mov	r0, r5
   196b4:	bl	123e4 <strlen@plt>
   196b8:	add	r0, r0, #12
   196bc:	bl	1200c <gcry_malloc@plt>
   196c0:	subs	r4, r0, #0
   196c4:	beq	1968c <__assert_fail@plt+0x6f48>
   196c8:	mov	r1, r5
   196cc:	add	r0, r4, #8
   196d0:	bl	12288 <strcpy@plt>
   196d4:	ldr	r2, [r8]
   196d8:	mov	r3, #0
   196dc:	str	r2, [r4]
   196e0:	str	r4, [r8]
   196e4:	str	r3, [r4, #4]
   196e8:	b	19648 <__assert_fail@plt+0x6f04>
   196ec:	andeq	sp, r3, r0, asr #6
   196f0:	andeq	r6, r2, r8, lsl #9
   196f4:	andeq	r6, r2, r8, ror r4
   196f8:	push	{r4, r5, r6, r7, lr}
   196fc:	ldrb	r6, [r0]
   19700:	cmp	r6, #48	; 0x30
   19704:	beq	197cc <__assert_fail@plt+0x7088>
   19708:	sub	r7, r6, #48	; 0x30
   1970c:	uxtb	ip, r7
   19710:	cmp	ip, #9
   19714:	movhi	ip, #0
   19718:	bhi	19758 <__assert_fail@plt+0x7014>
   1971c:	ldrb	r4, [r0, #1]
   19720:	sub	lr, r4, #48	; 0x30
   19724:	add	r5, r0, #1
   19728:	mov	ip, #0
   1972c:	b	1973c <__assert_fail@plt+0x6ff8>
   19730:	ldrb	r4, [r5, #1]!
   19734:	sub	r7, r6, #48	; 0x30
   19738:	sub	lr, r4, #48	; 0x30
   1973c:	add	ip, ip, ip, lsl #2
   19740:	uxtb	lr, lr
   19744:	cmp	lr, #9
   19748:	mov	r6, r4
   1974c:	add	ip, r7, ip, lsl #1
   19750:	mov	r0, r5
   19754:	bls	19730 <__assert_fail@plt+0x6fec>
   19758:	str	ip, [r1]
   1975c:	ldrb	r1, [r0]
   19760:	cmp	r1, #46	; 0x2e
   19764:	bne	197e4 <__assert_fail@plt+0x70a0>
   19768:	ldrb	r4, [r0, #1]
   1976c:	add	lr, r0, #1
   19770:	cmp	r4, #48	; 0x30
   19774:	beq	197f0 <__assert_fail@plt+0x70ac>
   19778:	sub	ip, r4, #48	; 0x30
   1977c:	uxtb	r1, ip
   19780:	cmp	r1, #9
   19784:	movhi	r1, #0
   19788:	bhi	197ac <__assert_fail@plt+0x7068>
   1978c:	mov	r1, #0
   19790:	ldrb	r4, [lr, #1]!
   19794:	add	r1, r1, r1, lsl #2
   19798:	add	r1, ip, r1, lsl #1
   1979c:	sub	ip, r4, #48	; 0x30
   197a0:	uxtb	r0, ip
   197a4:	cmp	r0, #9
   197a8:	bls	19790 <__assert_fail@plt+0x704c>
   197ac:	str	r1, [r2]
   197b0:	ldrb	r2, [lr]
   197b4:	cmp	r2, #46	; 0x2e
   197b8:	movne	r2, #0
   197bc:	beq	19808 <__assert_fail@plt+0x70c4>
   197c0:	str	r2, [r3]
   197c4:	mov	r0, lr
   197c8:	pop	{r4, r5, r6, r7, pc}
   197cc:	ldrb	r4, [r0, #1]
   197d0:	sub	lr, r4, #48	; 0x30
   197d4:	uxtb	ip, lr
   197d8:	cmp	ip, #9
   197dc:	movhi	r7, #0
   197e0:	bhi	19724 <__assert_fail@plt+0x6fe0>
   197e4:	mov	lr, #0
   197e8:	mov	r0, lr
   197ec:	pop	{r4, r5, r6, r7, pc}
   197f0:	ldrb	r1, [r0, #2]
   197f4:	sub	r1, r1, #48	; 0x30
   197f8:	cmp	r1, #9
   197fc:	bls	197e4 <__assert_fail@plt+0x70a0>
   19800:	mov	ip, #0
   19804:	b	1978c <__assert_fail@plt+0x7048>
   19808:	ldrb	r0, [lr, #1]
   1980c:	add	r2, lr, #1
   19810:	cmp	r0, #48	; 0x30
   19814:	beq	19858 <__assert_fail@plt+0x7114>
   19818:	sub	r1, r0, #48	; 0x30
   1981c:	uxtb	r0, r1
   19820:	cmp	r0, #9
   19824:	movhi	lr, r2
   19828:	movhi	r2, #0
   1982c:	bhi	197c0 <__assert_fail@plt+0x707c>
   19830:	mov	lr, r2
   19834:	mov	r2, #0
   19838:	ldrb	r0, [lr, #1]!
   1983c:	add	r2, r2, r2, lsl #2
   19840:	add	r2, r1, r2, lsl #1
   19844:	sub	r1, r0, #48	; 0x30
   19848:	uxtb	r0, r1
   1984c:	cmp	r0, #9
   19850:	bls	19838 <__assert_fail@plt+0x70f4>
   19854:	b	197c0 <__assert_fail@plt+0x707c>
   19858:	ldrb	r1, [lr, #2]
   1985c:	sub	r1, r1, #48	; 0x30
   19860:	cmp	r1, #9
   19864:	bls	197e4 <__assert_fail@plt+0x70a0>
   19868:	mov	r1, #0
   1986c:	b	19830 <__assert_fail@plt+0x70ec>
   19870:	cmp	r1, #0
   19874:	push	{r4, lr}
   19878:	mov	r4, r0
   1987c:	beq	198ac <__assert_fail@plt+0x7168>
   19880:	mov	r0, r1
   19884:	bl	12030 <getpwnam@plt>
   19888:	cmp	r0, #0
   1988c:	popeq	{r4, pc}
   19890:	cmp	r4, #0
   19894:	ldr	r0, [r0, #20]
   19898:	beq	198a4 <__assert_fail@plt+0x7160>
   1989c:	pop	{r4, lr}
   198a0:	b	12528 <gcry_xstrdup@plt>
   198a4:	pop	{r4, lr}
   198a8:	b	12714 <gcry_strdup@plt>
   198ac:	bl	120c0 <getuid@plt>
   198b0:	bl	12078 <getpwuid@plt>
   198b4:	cmp	r0, #0
   198b8:	bne	19890 <__assert_fail@plt+0x714c>
   198bc:	pop	{r4, pc}
   198c0:	push	{r4, r5, r6, r7, r8, lr}
   198c4:	sub	sp, sp, #200	; 0xc8
   198c8:	ldr	r8, [pc, #188]	; 1998c <__assert_fail@plt+0x7248>
   198cc:	mov	r5, r1
   198d0:	str	r0, [sp, #4]
   198d4:	ldr	r3, [r8]
   198d8:	str	r3, [sp, #196]	; 0xc4
   198dc:	bl	123e4 <strlen@plt>
   198e0:	mov	r6, r0
   198e4:	ldr	r0, [r5], #4
   198e8:	cmp	r0, #0
   198ec:	str	r0, [sp, #8]
   198f0:	beq	19928 <__assert_fail@plt+0x71e4>
   198f4:	bl	123e4 <strlen@plt>
   198f8:	add	r4, sp, #12
   198fc:	add	r7, sp, #196	; 0xc4
   19900:	add	r6, r6, r0
   19904:	b	19918 <__assert_fail@plt+0x71d4>
   19908:	bl	123e4 <strlen@plt>
   1990c:	cmp	r7, r4
   19910:	add	r6, r6, r0
   19914:	beq	19978 <__assert_fail@plt+0x7234>
   19918:	ldr	r0, [r5], #4
   1991c:	cmp	r0, #0
   19920:	str	r0, [r4], #4
   19924:	bne	19908 <__assert_fail@plt+0x71c4>
   19928:	add	r0, r6, #1
   1992c:	bl	1200c <gcry_malloc@plt>
   19930:	subs	r5, r0, #0
   19934:	beq	1995c <__assert_fail@plt+0x7218>
   19938:	ldr	r1, [sp, #4]
   1993c:	cmp	r1, #0
   19940:	beq	1995c <__assert_fail@plt+0x7218>
   19944:	add	r4, sp, #8
   19948:	mov	r0, r5
   1994c:	bl	12174 <stpcpy@plt>
   19950:	ldr	r1, [r4], #4
   19954:	cmp	r1, #0
   19958:	bne	1994c <__assert_fail@plt+0x7208>
   1995c:	ldr	r2, [sp, #196]	; 0xc4
   19960:	ldr	r3, [r8]
   19964:	mov	r0, r5
   19968:	cmp	r2, r3
   1996c:	bne	19988 <__assert_fail@plt+0x7244>
   19970:	add	sp, sp, #200	; 0xc8
   19974:	pop	{r4, r5, r6, r7, r8, pc}
   19978:	mov	r0, #22
   1997c:	bl	125dc <gpg_err_set_errno@plt>
   19980:	mov	r5, #0
   19984:	b	1995c <__assert_fail@plt+0x7218>
   19988:	bl	1218c <__stack_chk_fail@plt>
   1998c:	andeq	sl, r3, r8, asr fp
   19990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19994:	sub	sp, sp, #148	; 0x94
   19998:	ldr	r7, [pc, #1020]	; 19d9c <__assert_fail@plt+0x7658>
   1999c:	mov	r9, r0
   199a0:	mov	r0, r1
   199a4:	ldr	r3, [r7]
   199a8:	mov	fp, r2
   199ac:	mov	r6, r1
   199b0:	str	r3, [sp, #140]	; 0x8c
   199b4:	bl	123e4 <strlen@plt>
   199b8:	and	r8, r9, #1
   199bc:	mov	r5, r0
   199c0:	ldr	r0, [fp], #4
   199c4:	cmp	r0, #0
   199c8:	str	r0, [sp, #12]
   199cc:	addeq	r5, r5, #1
   199d0:	beq	19a10 <__assert_fail@plt+0x72cc>
   199d4:	bl	123e4 <strlen@plt>
   199d8:	add	r5, r5, #2
   199dc:	add	r4, sp, #16
   199e0:	add	sl, sp, #140	; 0x8c
   199e4:	add	r5, r5, r0
   199e8:	b	19a00 <__assert_fail@plt+0x72bc>
   199ec:	bl	123e4 <strlen@plt>
   199f0:	cmp	sl, r4
   199f4:	add	r0, r0, #1
   199f8:	add	r5, r5, r0
   199fc:	beq	19b9c <__assert_fail@plt+0x7458>
   19a00:	ldr	r0, [fp], #4
   19a04:	cmp	r0, #0
   19a08:	str	r0, [r4], #4
   19a0c:	bne	199ec <__assert_fail@plt+0x72a8>
   19a10:	ldrb	r3, [r6]
   19a14:	add	r5, r5, #1
   19a18:	cmp	r3, #126	; 0x7e
   19a1c:	beq	19b18 <__assert_fail@plt+0x73d4>
   19a20:	mov	r4, #0
   19a24:	mov	fp, r4
   19a28:	mov	r3, #1
   19a2c:	str	r3, [sp, #4]
   19a30:	cmp	r8, #0
   19a34:	mov	r0, r5
   19a38:	beq	19bb4 <__assert_fail@plt+0x7470>
   19a3c:	bl	11fd0 <gcry_xmalloc@plt>
   19a40:	mov	sl, r0
   19a44:	cmp	r4, #0
   19a48:	beq	19cb8 <__assert_fail@plt+0x7574>
   19a4c:	mov	r1, r4
   19a50:	mov	r0, sl
   19a54:	bl	12174 <stpcpy@plt>
   19a58:	ldr	r3, [sp, #4]
   19a5c:	add	r1, r6, r3
   19a60:	bl	12174 <stpcpy@plt>
   19a64:	mov	r4, r0
   19a68:	mov	r0, fp
   19a6c:	bl	12150 <gcry_free@plt>
   19a70:	ldr	r1, [sp, #12]
   19a74:	cmp	r1, #0
   19a78:	addne	fp, sp, #16
   19a7c:	movne	r6, #0
   19a80:	movne	r5, #47	; 0x2f
   19a84:	bne	19aac <__assert_fail@plt+0x7368>
   19a88:	b	19ae8 <__assert_fail@plt+0x73a4>
   19a8c:	mov	r0, r4
   19a90:	add	r6, r6, #1
   19a94:	strb	r5, [r0], #1
   19a98:	bl	12174 <stpcpy@plt>
   19a9c:	ldr	r1, [fp], #4
   19aa0:	cmp	r1, #0
   19aa4:	mov	r4, r0
   19aa8:	beq	19ae8 <__assert_fail@plt+0x73a4>
   19aac:	cmp	r6, #0
   19ab0:	bne	19a8c <__assert_fail@plt+0x7348>
   19ab4:	ldrb	r3, [sl]
   19ab8:	cmp	r3, #47	; 0x2f
   19abc:	bne	19a8c <__assert_fail@plt+0x7348>
   19ac0:	ldrb	r3, [sl, #1]
   19ac4:	cmp	r3, #0
   19ac8:	bne	19a8c <__assert_fail@plt+0x7348>
   19acc:	mov	r0, r4
   19ad0:	bl	12174 <stpcpy@plt>
   19ad4:	ldr	r1, [fp], #4
   19ad8:	add	r6, r6, #1
   19adc:	cmp	r1, #0
   19ae0:	mov	r4, r0
   19ae4:	bne	19aac <__assert_fail@plt+0x7368>
   19ae8:	tst	r9, #2
   19aec:	beq	19afc <__assert_fail@plt+0x73b8>
   19af0:	ldrb	r3, [sl]
   19af4:	cmp	r3, #47	; 0x2f
   19af8:	bne	19bcc <__assert_fail@plt+0x7488>
   19afc:	ldr	r2, [sp, #140]	; 0x8c
   19b00:	ldr	r3, [r7]
   19b04:	mov	r0, sl
   19b08:	cmp	r2, r3
   19b0c:	bne	19d98 <__assert_fail@plt+0x7654>
   19b10:	add	sp, sp, #148	; 0x94
   19b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b18:	ldrb	r3, [r6, #1]
   19b1c:	cmp	r3, #0
   19b20:	cmpne	r3, #47	; 0x2f
   19b24:	beq	19c70 <__assert_fail@plt+0x752c>
   19b28:	cmp	r8, #0
   19b2c:	add	r0, r6, #1
   19b30:	beq	19ccc <__assert_fail@plt+0x7588>
   19b34:	bl	12528 <gcry_xstrdup@plt>
   19b38:	mov	sl, r0
   19b3c:	mov	r1, #47	; 0x2f
   19b40:	mov	r0, sl
   19b44:	bl	12408 <strchr@plt>
   19b48:	cmp	r0, #0
   19b4c:	movne	r3, #0
   19b50:	strbne	r3, [r0]
   19b54:	mov	r0, sl
   19b58:	bl	123e4 <strlen@plt>
   19b5c:	mov	r1, sl
   19b60:	mov	r4, r0
   19b64:	mov	r0, r8
   19b68:	bl	19870 <__assert_fail@plt+0x712c>
   19b6c:	mov	fp, r0
   19b70:	mov	r0, sl
   19b74:	bl	12150 <gcry_free@plt>
   19b78:	cmp	fp, #0
   19b7c:	beq	19ca8 <__assert_fail@plt+0x7564>
   19b80:	mov	r0, fp
   19b84:	bl	123e4 <strlen@plt>
   19b88:	add	r3, r4, #1
   19b8c:	str	r3, [sp, #4]
   19b90:	mov	r4, fp
   19b94:	add	r5, r5, r0
   19b98:	b	19a30 <__assert_fail@plt+0x72ec>
   19b9c:	cmp	r8, #0
   19ba0:	bne	19d88 <__assert_fail@plt+0x7644>
   19ba4:	mov	r0, #22
   19ba8:	mov	sl, r8
   19bac:	bl	125dc <gpg_err_set_errno@plt>
   19bb0:	b	19afc <__assert_fail@plt+0x73b8>
   19bb4:	bl	1200c <gcry_malloc@plt>
   19bb8:	subs	sl, r0, #0
   19bbc:	bne	19a44 <__assert_fail@plt+0x7300>
   19bc0:	mov	r0, fp
   19bc4:	bl	12150 <gcry_free@plt>
   19bc8:	b	19afc <__assert_fail@plt+0x73b8>
   19bcc:	bl	1f99c <__assert_fail@plt+0xd258>
   19bd0:	subs	r5, r0, #0
   19bd4:	beq	19d34 <__assert_fail@plt+0x75f0>
   19bd8:	bl	123e4 <strlen@plt>
   19bdc:	mov	r4, r0
   19be0:	mov	r0, sl
   19be4:	bl	123e4 <strlen@plt>
   19be8:	cmp	r8, #0
   19bec:	add	r0, r4, r0
   19bf0:	add	r0, r0, #2
   19bf4:	beq	19cdc <__assert_fail@plt+0x7598>
   19bf8:	bl	11fd0 <gcry_xmalloc@plt>
   19bfc:	mov	r4, r0
   19c00:	ldrb	r3, [r5]
   19c04:	cmp	r3, #47	; 0x2f
   19c08:	bne	19c18 <__assert_fail@plt+0x74d4>
   19c0c:	ldrb	r2, [r5, #1]
   19c10:	cmp	r2, #0
   19c14:	beq	19d00 <__assert_fail@plt+0x75bc>
   19c18:	mov	r1, r5
   19c1c:	mov	r0, r4
   19c20:	bl	12174 <stpcpy@plt>
   19c24:	mov	r3, #47	; 0x2f
   19c28:	mov	r1, sl
   19c2c:	strb	r3, [r0], #1
   19c30:	bl	12288 <strcpy@plt>
   19c34:	mov	r0, r5
   19c38:	bl	12150 <gcry_free@plt>
   19c3c:	mov	r0, sl
   19c40:	bl	12150 <gcry_free@plt>
   19c44:	mov	r0, r4
   19c48:	bl	123e4 <strlen@plt>
   19c4c:	cmp	r0, #2
   19c50:	bls	19c68 <__assert_fail@plt+0x7524>
   19c54:	sub	r3, r0, #2
   19c58:	add	r2, r4, r3
   19c5c:	ldrb	r3, [r4, r3]
   19c60:	cmp	r3, #47	; 0x2f
   19c64:	beq	19d14 <__assert_fail@plt+0x75d0>
   19c68:	mov	sl, r4
   19c6c:	b	19afc <__assert_fail@plt+0x73b8>
   19c70:	ldr	r0, [pc, #296]	; 19da0 <__assert_fail@plt+0x765c>
   19c74:	bl	122e8 <getenv@plt>
   19c78:	subs	r4, r0, #0
   19c7c:	movne	fp, #0
   19c80:	beq	19d6c <__assert_fail@plt+0x7628>
   19c84:	ldrb	r3, [r4]
   19c88:	cmp	r3, #0
   19c8c:	beq	19cac <__assert_fail@plt+0x7568>
   19c90:	mov	r0, r4
   19c94:	bl	123e4 <strlen@plt>
   19c98:	mov	r3, #1
   19c9c:	str	r3, [sp, #4]
   19ca0:	add	r5, r5, r0
   19ca4:	b	19a30 <__assert_fail@plt+0x72ec>
   19ca8:	mov	r4, fp
   19cac:	mov	r3, #1
   19cb0:	str	r3, [sp, #4]
   19cb4:	b	19a30 <__assert_fail@plt+0x72ec>
   19cb8:	mov	r1, r6
   19cbc:	mov	r0, sl
   19cc0:	bl	12174 <stpcpy@plt>
   19cc4:	mov	r4, r0
   19cc8:	b	19a68 <__assert_fail@plt+0x7324>
   19ccc:	bl	12714 <gcry_strdup@plt>
   19cd0:	subs	sl, r0, #0
   19cd4:	bne	19b3c <__assert_fail@plt+0x73f8>
   19cd8:	b	19afc <__assert_fail@plt+0x73b8>
   19cdc:	bl	1200c <gcry_malloc@plt>
   19ce0:	subs	r4, r0, #0
   19ce4:	bne	19c00 <__assert_fail@plt+0x74bc>
   19ce8:	mov	r0, r5
   19cec:	bl	12150 <gcry_free@plt>
   19cf0:	mov	r0, sl
   19cf4:	bl	12150 <gcry_free@plt>
   19cf8:	mov	sl, r8
   19cfc:	b	19afc <__assert_fail@plt+0x73b8>
   19d00:	mov	r0, r4
   19d04:	mov	r1, sl
   19d08:	strb	r3, [r0], #1
   19d0c:	bl	12288 <strcpy@plt>
   19d10:	b	19c34 <__assert_fail@plt+0x74f0>
   19d14:	add	r0, r4, r0
   19d18:	ldrb	r3, [r0, #-1]
   19d1c:	cmp	r3, #46	; 0x2e
   19d20:	moveq	r3, #0
   19d24:	moveq	sl, r4
   19d28:	strbeq	r3, [r2]
   19d2c:	bne	19c68 <__assert_fail@plt+0x7524>
   19d30:	b	19afc <__assert_fail@plt+0x73b8>
   19d34:	cmp	r8, #0
   19d38:	beq	19cf0 <__assert_fail@plt+0x75ac>
   19d3c:	ldr	r3, [pc, #96]	; 19da4 <__assert_fail@plt+0x7660>
   19d40:	ldr	r4, [r3]
   19d44:	bl	1245c <__errno_location@plt>
   19d48:	ldr	r0, [r0]
   19d4c:	bl	12330 <strerror@plt>
   19d50:	ldr	r2, [pc, #80]	; 19da8 <__assert_fail@plt+0x7664>
   19d54:	mov	r1, #1
   19d58:	mov	r3, r0
   19d5c:	mov	r0, r4
   19d60:	bl	1251c <__fprintf_chk@plt>
   19d64:	mov	r0, #2
   19d68:	bl	123c0 <exit@plt>
   19d6c:	mov	r1, r4
   19d70:	mov	r0, r8
   19d74:	bl	19870 <__assert_fail@plt+0x712c>
   19d78:	subs	fp, r0, #0
   19d7c:	mov	r4, fp
   19d80:	beq	19cac <__assert_fail@plt+0x7568>
   19d84:	b	19c84 <__assert_fail@plt+0x7540>
   19d88:	ldr	r2, [pc, #28]	; 19dac <__assert_fail@plt+0x7668>
   19d8c:	mov	r1, #432	; 0x1b0
   19d90:	ldr	r0, [pc, #24]	; 19db0 <__assert_fail@plt+0x766c>
   19d94:	bl	1ecbc <__assert_fail@plt+0xc578>
   19d98:	bl	1218c <__stack_chk_fail@plt>
   19d9c:	andeq	sl, r3, r8, asr fp
   19da0:	andeq	r8, r2, r8, asr #18
   19da4:	andeq	sp, r3, r0, lsl r3
   19da8:	andeq	r8, r2, r0, asr r9
   19dac:	andeq	r8, r2, ip, lsl #18
   19db0:	andeq	r8, r2, ip, lsr #18
   19db4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19db8:	mov	fp, r1
   19dbc:	ldrb	r1, [r0]
   19dc0:	mov	r7, r0
   19dc4:	mov	r6, r2
   19dc8:	cmp	r1, #0
   19dcc:	beq	19fa0 <__assert_fail@plt+0x785c>
   19dd0:	mov	r4, r0
   19dd4:	mov	r5, #0
   19dd8:	rsb	r8, r0, #1
   19ddc:	b	19df4 <__assert_fail@plt+0x76b0>
   19de0:	add	r5, r5, #1
   19de4:	add	r0, r8, r4
   19de8:	ldrb	r1, [r4, #1]!
   19dec:	cmp	r1, #0
   19df0:	beq	19e38 <__assert_fail@plt+0x76f4>
   19df4:	cmp	r1, #37	; 0x25
   19df8:	cmpne	r1, #58	; 0x3a
   19dfc:	moveq	r3, #1
   19e00:	movne	r3, #0
   19e04:	cmp	r1, #10
   19e08:	orreq	r3, r3, #1
   19e0c:	cmp	r3, #0
   19e10:	bne	19de0 <__assert_fail@plt+0x769c>
   19e14:	subs	r0, fp, #0
   19e18:	beq	19de4 <__assert_fail@plt+0x76a0>
   19e1c:	bl	12408 <strchr@plt>
   19e20:	cmp	r0, #0
   19e24:	bne	19de0 <__assert_fail@plt+0x769c>
   19e28:	add	r0, r8, r4
   19e2c:	ldrb	r1, [r4, #1]!
   19e30:	cmp	r1, #0
   19e34:	bne	19df4 <__assert_fail@plt+0x76b0>
   19e38:	add	r0, r0, r5, lsl #1
   19e3c:	add	r0, r0, #1
   19e40:	cmp	r6, #0
   19e44:	beq	19f80 <__assert_fail@plt+0x783c>
   19e48:	bl	11fd0 <gcry_xmalloc@plt>
   19e4c:	ldrb	r5, [r7]
   19e50:	cmp	r5, #0
   19e54:	mov	r6, r0
   19e58:	beq	19f98 <__assert_fail@plt+0x7854>
   19e5c:	mov	r4, #0
   19e60:	mov	r3, #37	; 0x25
   19e64:	mov	r2, #97	; 0x61
   19e68:	b	19ee4 <__assert_fail@plt+0x77a0>
   19e6c:	cmp	r5, #37	; 0x25
   19e70:	beq	19f30 <__assert_fail@plt+0x77ec>
   19e74:	cmp	r5, #10
   19e78:	beq	19f54 <__assert_fail@plt+0x7810>
   19e7c:	cmp	fp, #0
   19e80:	beq	19f74 <__assert_fail@plt+0x7830>
   19e84:	mov	r1, r5
   19e88:	mov	r0, fp
   19e8c:	bl	12408 <strchr@plt>
   19e90:	mov	r3, #37	; 0x25
   19e94:	mov	r2, #97	; 0x61
   19e98:	cmp	r0, #0
   19e9c:	beq	19f74 <__assert_fail@plt+0x7830>
   19ea0:	lsr	r1, r5, #4
   19ea4:	cmp	r1, #9
   19ea8:	addls	r1, r1, #48	; 0x30
   19eac:	addhi	r1, r1, #87	; 0x57
   19eb0:	and	r5, r5, #15
   19eb4:	strb	r3, [sl]
   19eb8:	strb	r1, [r8]
   19ebc:	add	r1, r4, #2
   19ec0:	add	r4, r4, #3
   19ec4:	cmp	r5, #9
   19ec8:	add	r8, r6, r4
   19ecc:	addls	r5, r5, #48	; 0x30
   19ed0:	addhi	r5, r5, #87	; 0x57
   19ed4:	strb	r5, [r6, r1]
   19ed8:	ldrb	r5, [r7, #1]!
   19edc:	cmp	r5, #0
   19ee0:	beq	19f20 <__assert_fail@plt+0x77dc>
   19ee4:	add	r9, r4, #1
   19ee8:	cmp	r5, #58	; 0x3a
   19eec:	add	r8, r6, r9
   19ef0:	add	sl, r6, r4
   19ef4:	bne	19e6c <__assert_fail@plt+0x7728>
   19ef8:	add	r1, r4, #2
   19efc:	mov	r0, #51	; 0x33
   19f00:	strb	r3, [r6, r4]
   19f04:	strb	r0, [r6, r9]
   19f08:	strb	r2, [r6, r1]
   19f0c:	ldrb	r5, [r7, #1]!
   19f10:	add	r4, r4, #3
   19f14:	add	r8, r6, r4
   19f18:	cmp	r5, #0
   19f1c:	bne	19ee4 <__assert_fail@plt+0x77a0>
   19f20:	mov	r3, #0
   19f24:	strb	r3, [r8]
   19f28:	mov	r0, r6
   19f2c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f30:	add	r1, r4, #2
   19f34:	mov	r0, #50	; 0x32
   19f38:	strb	r5, [sl]
   19f3c:	add	r4, r4, #3
   19f40:	strb	r0, [r8]
   19f44:	mov	r0, #53	; 0x35
   19f48:	strb	r0, [r6, r1]
   19f4c:	add	r8, r6, r4
   19f50:	b	19ed8 <__assert_fail@plt+0x7794>
   19f54:	add	r1, r4, #2
   19f58:	mov	r0, #48	; 0x30
   19f5c:	add	r4, r4, #3
   19f60:	strb	r3, [sl]
   19f64:	strb	r0, [r8]
   19f68:	strb	r2, [r6, r1]
   19f6c:	add	r8, r6, r4
   19f70:	b	19ed8 <__assert_fail@plt+0x7794>
   19f74:	mov	r4, r9
   19f78:	strb	r5, [sl]
   19f7c:	b	19ed8 <__assert_fail@plt+0x7794>
   19f80:	bl	1200c <gcry_malloc@plt>
   19f84:	subs	r6, r0, #0
   19f88:	beq	19f28 <__assert_fail@plt+0x77e4>
   19f8c:	ldrb	r5, [r7]
   19f90:	cmp	r5, #0
   19f94:	bne	19e5c <__assert_fail@plt+0x7718>
   19f98:	mov	r8, r6
   19f9c:	b	19f20 <__assert_fail@plt+0x77dc>
   19fa0:	mov	r0, #1
   19fa4:	b	19e40 <__assert_fail@plt+0x76fc>
   19fa8:	ldrb	r3, [r0]
   19fac:	mov	r2, r0
   19fb0:	cmp	r3, #0
   19fb4:	beq	19fe8 <__assert_fail@plt+0x78a4>
   19fb8:	mov	r0, #0
   19fbc:	and	r3, r3, #192	; 0xc0
   19fc0:	cmp	r3, #128	; 0x80
   19fc4:	addne	r0, r0, #1
   19fc8:	cmn	r1, #1
   19fcc:	beq	19fd8 <__assert_fail@plt+0x7894>
   19fd0:	subs	r1, r1, #1
   19fd4:	bxeq	lr
   19fd8:	ldrb	r3, [r2, #1]!
   19fdc:	cmp	r3, #0
   19fe0:	bne	19fbc <__assert_fail@plt+0x7878>
   19fe4:	bx	lr
   19fe8:	mov	r0, r3
   19fec:	bx	lr
   19ff0:	cmp	r2, #0
   19ff4:	beq	1a05c <__assert_fail@plt+0x7918>
   19ff8:	add	r2, r0, r2
   19ffc:	push	{r4, r5, r6, lr}
   1a000:	sub	r0, r0, #1
   1a004:	sub	r6, r2, #1
   1a008:	sub	r1, r1, #1
   1a00c:	ldrb	lr, [r0, #1]!
   1a010:	ldrb	ip, [r1, #1]!
   1a014:	mov	r2, lr
   1a018:	cmp	lr, ip
   1a01c:	mov	r3, ip
   1a020:	sub	r5, lr, #97	; 0x61
   1a024:	sub	r4, ip, #97	; 0x61
   1a028:	beq	1a044 <__assert_fail@plt+0x7900>
   1a02c:	cmp	r5, #25
   1a030:	bicls	r2, lr, #32
   1a034:	cmp	r4, #25
   1a038:	bicls	r3, ip, #32
   1a03c:	cmp	r3, r2
   1a040:	bne	1a054 <__assert_fail@plt+0x7910>
   1a044:	cmp	r0, r6
   1a048:	bne	1a00c <__assert_fail@plt+0x78c8>
   1a04c:	mov	r0, #0
   1a050:	pop	{r4, r5, r6, pc}
   1a054:	sub	r0, r2, r3
   1a058:	pop	{r4, r5, r6, pc}
   1a05c:	mov	r0, r2
   1a060:	bx	lr
   1a064:	push	{r4, r5, r6, lr}
   1a068:	mov	r4, r0
   1a06c:	mov	r0, r1
   1a070:	mov	r6, r1
   1a074:	bl	123e4 <strlen@plt>
   1a078:	mov	r1, r6
   1a07c:	mov	r2, r0
   1a080:	mov	r5, r0
   1a084:	mov	r0, r4
   1a088:	bl	126d8 <strncmp@plt>
   1a08c:	cmp	r0, #0
   1a090:	bne	1a0e0 <__assert_fail@plt+0x799c>
   1a094:	ldrb	r2, [r4, r5]
   1a098:	add	r0, r4, r5
   1a09c:	tst	r2, #223	; 0xdf
   1a0a0:	sub	r3, r2, #9
   1a0a4:	clz	r3, r3
   1a0a8:	lsr	r3, r3, #5
   1a0ac:	movne	r1, r3
   1a0b0:	moveq	r1, #1
   1a0b4:	cmp	r1, #0
   1a0b8:	beq	1a0e0 <__assert_fail@plt+0x799c>
   1a0bc:	cmp	r2, #32
   1a0c0:	orreq	r3, r3, #1
   1a0c4:	cmp	r3, #0
   1a0c8:	popeq	{r4, r5, r6, pc}
   1a0cc:	ldrb	r3, [r0, #1]!
   1a0d0:	cmp	r3, #9
   1a0d4:	cmpne	r3, #32
   1a0d8:	beq	1a0cc <__assert_fail@plt+0x7988>
   1a0dc:	pop	{r4, r5, r6, pc}
   1a0e0:	mov	r0, #0
   1a0e4:	pop	{r4, r5, r6, pc}
   1a0e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0ec:	subs	r5, r1, #0
   1a0f0:	beq	1a19c <__assert_fail@plt+0x7a58>
   1a0f4:	mov	r4, r0
   1a0f8:	mov	r8, r2
   1a0fc:	bl	12360 <__ctype_toupper_loc@plt>
   1a100:	ldrb	r3, [r8]
   1a104:	mov	r1, r5
   1a108:	add	r9, r4, r1
   1a10c:	mov	r5, r4
   1a110:	ldr	r0, [r0]
   1a114:	ldr	sl, [r0, r3, lsl #2]
   1a118:	b	1a12c <__assert_fail@plt+0x79e8>
   1a11c:	cmp	lr, #0
   1a120:	beq	1a1a4 <__assert_fail@plt+0x7a60>
   1a124:	mov	r1, lr
   1a128:	mov	r5, r3
   1a12c:	mov	r3, r5
   1a130:	sub	lr, r1, #1
   1a134:	ldrb	r2, [r3], #1
   1a138:	ldr	r2, [r0, r2, lsl #2]
   1a13c:	cmp	r2, sl
   1a140:	bne	1a11c <__assert_fail@plt+0x79d8>
   1a144:	cmp	r3, r9
   1a148:	add	r4, r8, #1
   1a14c:	ldrb	ip, [r8, #1]
   1a150:	beq	1a1b0 <__assert_fail@plt+0x7a6c>
   1a154:	ldrb	r6, [r3]
   1a158:	ldr	r2, [r0, ip, lsl #2]
   1a15c:	ldr	r6, [r0, r6, lsl #2]
   1a160:	cmp	r6, r2
   1a164:	bne	1a194 <__assert_fail@plt+0x7a50>
   1a168:	add	fp, r5, r1
   1a16c:	add	r1, r3, #1
   1a170:	b	1a188 <__assert_fail@plt+0x7a44>
   1a174:	ldrb	r2, [r1], #1
   1a178:	ldr	r6, [r0, ip, lsl #2]
   1a17c:	ldr	r7, [r0, r2, lsl #2]
   1a180:	cmp	r7, r6
   1a184:	bne	1a194 <__assert_fail@plt+0x7a50>
   1a188:	cmp	fp, r1
   1a18c:	ldrb	ip, [r4, #1]!
   1a190:	bne	1a174 <__assert_fail@plt+0x7a30>
   1a194:	cmp	ip, #0
   1a198:	bne	1a124 <__assert_fail@plt+0x79e0>
   1a19c:	mov	r0, r5
   1a1a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1a4:	mov	r5, lr
   1a1a8:	mov	r0, r5
   1a1ac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1b0:	cmp	ip, #0
   1a1b4:	bne	1a11c <__assert_fail@plt+0x79d8>
   1a1b8:	b	1a19c <__assert_fail@plt+0x7a58>
   1a1bc:	cmp	r1, #0
   1a1c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1c4:	beq	1a214 <__assert_fail@plt+0x7ad0>
   1a1c8:	ldrb	r6, [r2]
   1a1cc:	add	r8, r1, #1
   1a1d0:	add	r8, r2, r8
   1a1d4:	sub	r3, r6, #97	; 0x61
   1a1d8:	cmp	r3, #25
   1a1dc:	add	r8, r0, r8
   1a1e0:	andls	r6, r6, #223	; 0xdf
   1a1e4:	add	r7, r0, r1
   1a1e8:	ldrb	r1, [r0]
   1a1ec:	add	r3, r0, #1
   1a1f0:	mov	r9, r0
   1a1f4:	sub	r0, r1, #97	; 0x61
   1a1f8:	cmp	r0, #25
   1a1fc:	bicls	r1, r1, #32
   1a200:	cmp	r6, r1
   1a204:	mov	r0, r3
   1a208:	beq	1a220 <__assert_fail@plt+0x7adc>
   1a20c:	cmp	r7, r3
   1a210:	bne	1a1e8 <__assert_fail@plt+0x7aa4>
   1a214:	mov	r9, #0
   1a218:	mov	r0, r9
   1a21c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a220:	cmp	r3, r7
   1a224:	add	lr, r2, #1
   1a228:	ldrb	ip, [r2, #1]
   1a22c:	beq	1a280 <__assert_fail@plt+0x7b3c>
   1a230:	sub	sl, r8, r3
   1a234:	b	1a244 <__assert_fail@plt+0x7b00>
   1a238:	ldrb	ip, [lr, #1]!
   1a23c:	cmp	lr, sl
   1a240:	beq	1a270 <__assert_fail@plt+0x7b2c>
   1a244:	ldrb	r1, [r3]
   1a248:	sub	r4, ip, #97	; 0x61
   1a24c:	add	r3, r3, #1
   1a250:	sub	r5, r1, #97	; 0x61
   1a254:	cmp	r5, #25
   1a258:	bicls	r1, r1, #32
   1a25c:	cmp	r4, #25
   1a260:	mov	r4, ip
   1a264:	bicls	r4, ip, #32
   1a268:	cmp	r4, r1
   1a26c:	beq	1a238 <__assert_fail@plt+0x7af4>
   1a270:	cmp	ip, #0
   1a274:	bne	1a1e8 <__assert_fail@plt+0x7aa4>
   1a278:	mov	r0, r9
   1a27c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a280:	cmp	ip, #0
   1a284:	bne	1a214 <__assert_fail@plt+0x7ad0>
   1a288:	b	1a218 <__assert_fail@plt+0x7ad4>
   1a28c:	push	{r4, lr}
   1a290:	subs	r4, r2, #0
   1a294:	sub	sp, sp, #8
   1a298:	beq	1a2ec <__assert_fail@plt+0x7ba8>
   1a29c:	cmp	r0, #0
   1a2a0:	beq	1a2f4 <__assert_fail@plt+0x7bb0>
   1a2a4:	cmp	r4, #1
   1a2a8:	beq	1a308 <__assert_fail@plt+0x7bc4>
   1a2ac:	ldrb	r3, [r1]
   1a2b0:	cmp	r3, #0
   1a2b4:	beq	1a308 <__assert_fail@plt+0x7bc4>
   1a2b8:	sub	ip, r1, #1
   1a2bc:	add	r2, ip, r4
   1a2c0:	add	r1, r1, #1
   1a2c4:	mov	ip, r0
   1a2c8:	b	1a2d8 <__assert_fail@plt+0x7b94>
   1a2cc:	ldrb	r3, [r1], #1
   1a2d0:	cmp	r3, #0
   1a2d4:	beq	1a2e4 <__assert_fail@plt+0x7ba0>
   1a2d8:	cmp	r1, r2
   1a2dc:	strb	r3, [ip], #1
   1a2e0:	bne	1a2cc <__assert_fail@plt+0x7b88>
   1a2e4:	mov	r3, #0
   1a2e8:	strb	r3, [ip]
   1a2ec:	add	sp, sp, #8
   1a2f0:	pop	{r4, pc}
   1a2f4:	mov	r0, r4
   1a2f8:	str	r1, [sp, #4]
   1a2fc:	bl	11fd0 <gcry_xmalloc@plt>
   1a300:	ldr	r1, [sp, #4]
   1a304:	b	1a2a4 <__assert_fail@plt+0x7b60>
   1a308:	mov	ip, r0
   1a30c:	b	1a2e4 <__assert_fail@plt+0x7ba0>
   1a310:	push	{r4, r5, r6, lr}
   1a314:	mov	r5, r0
   1a318:	ldrb	r4, [r0]
   1a31c:	cmp	r4, #0
   1a320:	beq	1a39c <__assert_fail@plt+0x7c58>
   1a324:	bl	12390 <__ctype_b_loc@plt>
   1a328:	mov	r1, r5
   1a32c:	ldr	r2, [r0]
   1a330:	b	1a340 <__assert_fail@plt+0x7bfc>
   1a334:	ldrb	r4, [r1, #1]!
   1a338:	cmp	r4, #0
   1a33c:	beq	1a3a4 <__assert_fail@plt+0x7c60>
   1a340:	lsl	r4, r4, #1
   1a344:	ldrh	r3, [r2, r4]
   1a348:	ands	r3, r3, #8192	; 0x2000
   1a34c:	bne	1a334 <__assert_fail@plt+0x7bf0>
   1a350:	ldrb	r2, [r1]
   1a354:	cmp	r2, #0
   1a358:	strb	r2, [r5]
   1a35c:	movne	ip, r5
   1a360:	beq	1a39c <__assert_fail@plt+0x7c58>
   1a364:	ldr	lr, [r0]
   1a368:	lsl	r2, r2, #1
   1a36c:	ldrh	r2, [lr, r2]
   1a370:	ands	r2, r2, #8192	; 0x2000
   1a374:	moveq	r3, r2
   1a378:	beq	1a384 <__assert_fail@plt+0x7c40>
   1a37c:	cmp	r3, #0
   1a380:	moveq	r3, ip
   1a384:	ldrb	r2, [r1, #1]!
   1a388:	cmp	r2, #0
   1a38c:	strb	r2, [ip, #1]!
   1a390:	bne	1a364 <__assert_fail@plt+0x7c20>
   1a394:	cmp	r3, #0
   1a398:	strbne	r2, [r3]
   1a39c:	mov	r0, r5
   1a3a0:	pop	{r4, r5, r6, pc}
   1a3a4:	strb	r4, [r5]
   1a3a8:	mov	r0, r5
   1a3ac:	pop	{r4, r5, r6, pc}
   1a3b0:	push	{r4, r5, r6, lr}
   1a3b4:	mov	r5, r0
   1a3b8:	ldrb	r4, [r0]
   1a3bc:	cmp	r4, #0
   1a3c0:	beq	1a404 <__assert_fail@plt+0x7cc0>
   1a3c4:	bl	12390 <__ctype_b_loc@plt>
   1a3c8:	mov	r2, r5
   1a3cc:	mov	r1, #0
   1a3d0:	ldr	r0, [r0]
   1a3d4:	lsl	r4, r4, #1
   1a3d8:	ldrh	r3, [r0, r4]
   1a3dc:	ands	r3, r3, #8192	; 0x2000
   1a3e0:	moveq	r1, r3
   1a3e4:	beq	1a3f0 <__assert_fail@plt+0x7cac>
   1a3e8:	cmp	r1, #0
   1a3ec:	moveq	r1, r2
   1a3f0:	ldrb	r4, [r2, #1]!
   1a3f4:	cmp	r4, #0
   1a3f8:	bne	1a3d4 <__assert_fail@plt+0x7c90>
   1a3fc:	cmp	r1, #0
   1a400:	strbne	r4, [r1]
   1a404:	mov	r0, r5
   1a408:	pop	{r4, r5, r6, pc}
   1a40c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a410:	subs	r9, r1, #0
   1a414:	beq	1a474 <__assert_fail@plt+0x7d30>
   1a418:	mov	r7, r2
   1a41c:	mov	sl, r0
   1a420:	mov	r4, r0
   1a424:	add	r8, r0, r9
   1a428:	mov	r5, #0
   1a42c:	ldrb	r1, [r4]
   1a430:	mov	r0, r7
   1a434:	bl	12408 <strchr@plt>
   1a438:	mov	r6, r4
   1a43c:	add	r4, r4, #1
   1a440:	cmp	r0, #0
   1a444:	moveq	r5, r0
   1a448:	beq	1a454 <__assert_fail@plt+0x7d10>
   1a44c:	cmp	r5, #0
   1a450:	moveq	r5, r6
   1a454:	cmp	r4, r8
   1a458:	bne	1a42c <__assert_fail@plt+0x7ce8>
   1a45c:	cmp	r5, #0
   1a460:	beq	1a474 <__assert_fail@plt+0x7d30>
   1a464:	mov	r3, #0
   1a468:	sub	r0, r5, sl
   1a46c:	strb	r3, [r5]
   1a470:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a474:	mov	r0, r9
   1a478:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a47c:	ldr	r2, [pc]	; 1a484 <__assert_fail@plt+0x7d40>
   1a480:	b	1a40c <__assert_fail@plt+0x7cc8>
   1a484:	andeq	r6, r2, r0, ror #29
   1a488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a48c:	subs	r9, r1, #0
   1a490:	beq	1a4e8 <__assert_fail@plt+0x7da4>
   1a494:	mov	r7, r2
   1a498:	mov	sl, r0
   1a49c:	mov	r4, r0
   1a4a0:	add	r8, r0, r9
   1a4a4:	mov	r6, #0
   1a4a8:	ldrb	r1, [r4]
   1a4ac:	mov	r0, r7
   1a4b0:	bl	12408 <strchr@plt>
   1a4b4:	mov	r5, r4
   1a4b8:	add	r4, r4, #1
   1a4bc:	cmp	r0, #0
   1a4c0:	moveq	r6, r0
   1a4c4:	beq	1a4d0 <__assert_fail@plt+0x7d8c>
   1a4c8:	cmp	r6, #0
   1a4cc:	moveq	r6, r5
   1a4d0:	cmp	r4, r8
   1a4d4:	bne	1a4a8 <__assert_fail@plt+0x7d64>
   1a4d8:	cmp	r6, #0
   1a4dc:	beq	1a4e8 <__assert_fail@plt+0x7da4>
   1a4e0:	sub	r0, r6, sl
   1a4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4e8:	mov	r0, r9
   1a4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4f0:	ldr	r2, [pc]	; 1a4f8 <__assert_fail@plt+0x7db4>
   1a4f4:	b	1a488 <__assert_fail@plt+0x7d44>
   1a4f8:	andeq	r6, r2, r0, ror #29
   1a4fc:	push	{r4, lr}
   1a500:	mov	r1, #47	; 0x2f
   1a504:	mov	r4, r0
   1a508:	bl	125c4 <strrchr@plt>
   1a50c:	cmp	r0, #0
   1a510:	beq	1a520 <__assert_fail@plt+0x7ddc>
   1a514:	add	r0, r0, #1
   1a518:	pop	{r4, lr}
   1a51c:	b	12528 <gcry_xstrdup@plt>
   1a520:	mov	r0, r4
   1a524:	pop	{r4, lr}
   1a528:	b	12528 <gcry_xstrdup@plt>
   1a52c:	push	{r4, r5, r6, lr}
   1a530:	mov	r1, #47	; 0x2f
   1a534:	mov	r5, r0
   1a538:	bl	125c4 <strrchr@plt>
   1a53c:	cmp	r0, #0
   1a540:	beq	1a568 <__assert_fail@plt+0x7e24>
   1a544:	sub	r4, r0, r5
   1a548:	add	r0, r4, #1
   1a54c:	bl	11fd0 <gcry_xmalloc@plt>
   1a550:	mov	r2, r4
   1a554:	mov	r1, r5
   1a558:	bl	124bc <strncpy@plt>
   1a55c:	mov	r2, #0
   1a560:	strb	r2, [r0, r4]
   1a564:	pop	{r4, r5, r6, pc}
   1a568:	ldr	r0, [pc, #4]	; 1a574 <__assert_fail@plt+0x7e30>
   1a56c:	pop	{r4, r5, r6, lr}
   1a570:	b	12528 <gcry_xstrdup@plt>
   1a574:	strdeq	r8, [r2], -r4
   1a578:	push	{r0, r1, r2, r3}
   1a57c:	mov	r0, #1
   1a580:	push	{r4, lr}
   1a584:	sub	sp, sp, #8
   1a588:	ldr	r4, [pc, #60]	; 1a5cc <__assert_fail@plt+0x7e88>
   1a58c:	add	r3, sp, #20
   1a590:	mov	r2, r3
   1a594:	ldr	ip, [r4]
   1a598:	ldr	r1, [sp, #16]
   1a59c:	str	r3, [sp]
   1a5a0:	str	ip, [sp, #4]
   1a5a4:	bl	19990 <__assert_fail@plt+0x724c>
   1a5a8:	ldr	r2, [sp, #4]
   1a5ac:	ldr	r3, [r4]
   1a5b0:	cmp	r2, r3
   1a5b4:	bne	1a5c8 <__assert_fail@plt+0x7e84>
   1a5b8:	add	sp, sp, #8
   1a5bc:	pop	{r4, lr}
   1a5c0:	add	sp, sp, #16
   1a5c4:	bx	lr
   1a5c8:	bl	1218c <__stack_chk_fail@plt>
   1a5cc:	andeq	sl, r3, r8, asr fp
   1a5d0:	push	{r0, r1, r2, r3}
   1a5d4:	mov	r0, #0
   1a5d8:	push	{r4, lr}
   1a5dc:	sub	sp, sp, #8
   1a5e0:	ldr	r4, [pc, #60]	; 1a624 <__assert_fail@plt+0x7ee0>
   1a5e4:	add	r3, sp, #20
   1a5e8:	mov	r2, r3
   1a5ec:	ldr	ip, [r4]
   1a5f0:	ldr	r1, [sp, #16]
   1a5f4:	str	r3, [sp]
   1a5f8:	str	ip, [sp, #4]
   1a5fc:	bl	19990 <__assert_fail@plt+0x724c>
   1a600:	ldr	r2, [sp, #4]
   1a604:	ldr	r3, [r4]
   1a608:	cmp	r2, r3
   1a60c:	bne	1a620 <__assert_fail@plt+0x7edc>
   1a610:	add	sp, sp, #8
   1a614:	pop	{r4, lr}
   1a618:	add	sp, sp, #16
   1a61c:	bx	lr
   1a620:	bl	1218c <__stack_chk_fail@plt>
   1a624:	andeq	sl, r3, r8, asr fp
   1a628:	push	{r0, r1, r2, r3}
   1a62c:	mov	r0, #3
   1a630:	push	{r4, lr}
   1a634:	sub	sp, sp, #8
   1a638:	ldr	r4, [pc, #60]	; 1a67c <__assert_fail@plt+0x7f38>
   1a63c:	add	r3, sp, #20
   1a640:	mov	r2, r3
   1a644:	ldr	ip, [r4]
   1a648:	ldr	r1, [sp, #16]
   1a64c:	str	r3, [sp]
   1a650:	str	ip, [sp, #4]
   1a654:	bl	19990 <__assert_fail@plt+0x724c>
   1a658:	ldr	r2, [sp, #4]
   1a65c:	ldr	r3, [r4]
   1a660:	cmp	r2, r3
   1a664:	bne	1a678 <__assert_fail@plt+0x7f34>
   1a668:	add	sp, sp, #8
   1a66c:	pop	{r4, lr}
   1a670:	add	sp, sp, #16
   1a674:	bx	lr
   1a678:	bl	1218c <__stack_chk_fail@plt>
   1a67c:	andeq	sl, r3, r8, asr fp
   1a680:	push	{r0, r1, r2, r3}
   1a684:	mov	r0, #2
   1a688:	push	{r4, lr}
   1a68c:	sub	sp, sp, #8
   1a690:	ldr	r4, [pc, #60]	; 1a6d4 <__assert_fail@plt+0x7f90>
   1a694:	add	r3, sp, #20
   1a698:	mov	r2, r3
   1a69c:	ldr	ip, [r4]
   1a6a0:	ldr	r1, [sp, #16]
   1a6a4:	str	r3, [sp]
   1a6a8:	str	ip, [sp, #4]
   1a6ac:	bl	19990 <__assert_fail@plt+0x724c>
   1a6b0:	ldr	r2, [sp, #4]
   1a6b4:	ldr	r3, [r4]
   1a6b8:	cmp	r2, r3
   1a6bc:	bne	1a6d0 <__assert_fail@plt+0x7f8c>
   1a6c0:	add	sp, sp, #8
   1a6c4:	pop	{r4, lr}
   1a6c8:	add	sp, sp, #16
   1a6cc:	bx	lr
   1a6d0:	bl	1218c <__stack_chk_fail@plt>
   1a6d4:	andeq	sl, r3, r8, asr fp
   1a6d8:	b	12054 <strcmp@plt>
   1a6dc:	push	{r4, r5, r6, lr}
   1a6e0:	mov	lr, r0
   1a6e4:	ldrb	ip, [r0]
   1a6e8:	cmp	ip, #9
   1a6ec:	cmpne	ip, #32
   1a6f0:	bne	1a704 <__assert_fail@plt+0x7fc0>
   1a6f4:	ldrb	ip, [lr, #1]!
   1a6f8:	cmp	ip, #9
   1a6fc:	cmpne	ip, #32
   1a700:	beq	1a6f4 <__assert_fail@plt+0x7fb0>
   1a704:	sub	r6, ip, #48	; 0x30
   1a708:	mov	r0, #0
   1a70c:	uxtb	r3, r6
   1a710:	cmp	r3, #9
   1a714:	mov	r1, #0
   1a718:	pophi	{r4, r5, r6, pc}
   1a71c:	lsl	r2, r1, #2
   1a720:	lsl	r3, r0, #2
   1a724:	adds	r3, r3, r0
   1a728:	orr	r2, r2, r0, lsr #30
   1a72c:	ldrb	ip, [lr, #1]!
   1a730:	adc	r2, r2, r1
   1a734:	adds	r4, r3, r3
   1a738:	adc	r5, r2, r2
   1a73c:	adds	r0, r4, r6
   1a740:	adc	r1, r5, r6, asr #31
   1a744:	sub	r6, ip, #48	; 0x30
   1a748:	uxtb	r3, r6
   1a74c:	cmp	r3, #9
   1a750:	bls	1a71c <__assert_fail@plt+0x7fd8>
   1a754:	pop	{r4, r5, r6, pc}
   1a758:	ldrb	r2, [r0]
   1a75c:	sub	r3, r2, #48	; 0x30
   1a760:	uxtb	r1, r3
   1a764:	cmp	r1, #9
   1a768:	bls	1a790 <__assert_fail@plt+0x804c>
   1a76c:	sub	r3, r2, #65	; 0x41
   1a770:	cmp	r3, #5
   1a774:	subls	r3, r2, #55	; 0x37
   1a778:	lslls	r3, r3, #4
   1a77c:	bls	1a794 <__assert_fail@plt+0x8050>
   1a780:	sub	r3, r2, #97	; 0x61
   1a784:	cmp	r3, #5
   1a788:	bhi	1a7d8 <__assert_fail@plt+0x8094>
   1a78c:	sub	r3, r2, #87	; 0x57
   1a790:	lsl	r3, r3, #4
   1a794:	ldrb	r2, [r0, #1]
   1a798:	sub	r0, r2, #48	; 0x30
   1a79c:	uxtb	r1, r0
   1a7a0:	cmp	r1, #9
   1a7a4:	bls	1a7b8 <__assert_fail@plt+0x8074>
   1a7a8:	sub	r1, r2, #65	; 0x41
   1a7ac:	cmp	r1, #5
   1a7b0:	bhi	1a7c0 <__assert_fail@plt+0x807c>
   1a7b4:	sub	r0, r2, #55	; 0x37
   1a7b8:	add	r0, r0, r3
   1a7bc:	bx	lr
   1a7c0:	sub	r1, r2, #97	; 0x61
   1a7c4:	cmp	r1, #5
   1a7c8:	bhi	1a7d8 <__assert_fail@plt+0x8094>
   1a7cc:	sub	r0, r2, #87	; 0x57
   1a7d0:	add	r0, r0, r3
   1a7d4:	bx	lr
   1a7d8:	mvn	r0, #0
   1a7dc:	bx	lr
   1a7e0:	subs	r3, r1, #0
   1a7e4:	beq	1a7ec <__assert_fail@plt+0x80a8>
   1a7e8:	b	19fa8 <__assert_fail@plt+0x7864>
   1a7ec:	mov	r0, r3
   1a7f0:	bx	lr
   1a7f4:	sub	r0, r0, #65	; 0x41
   1a7f8:	cmp	r0, #25
   1a7fc:	movhi	r0, #0
   1a800:	movls	r0, #1
   1a804:	bx	lr
   1a808:	sub	r0, r0, #97	; 0x61
   1a80c:	cmp	r0, #25
   1a810:	movhi	r0, #0
   1a814:	movls	r0, #1
   1a818:	bx	lr
   1a81c:	sub	r3, r0, #97	; 0x61
   1a820:	cmp	r3, #25
   1a824:	bicls	r0, r0, #32
   1a828:	bx	lr
   1a82c:	sub	r3, r0, #65	; 0x41
   1a830:	cmp	r3, #25
   1a834:	orrls	r0, r0, #32
   1a838:	bx	lr
   1a83c:	ldrb	r3, [r0]
   1a840:	cmp	r3, #0
   1a844:	bxeq	lr
   1a848:	mov	r1, r0
   1a84c:	tst	r3, #128	; 0x80
   1a850:	moveq	r2, #1
   1a854:	movne	r2, #0
   1a858:	sub	ip, r3, #65	; 0x41
   1a85c:	cmp	ip, #25
   1a860:	movhi	r2, #0
   1a864:	andls	r2, r2, #1
   1a868:	cmp	r2, #0
   1a86c:	orrne	r3, r3, #32
   1a870:	strbne	r3, [r1]
   1a874:	ldrb	r3, [r1, #1]!
   1a878:	cmp	r3, #0
   1a87c:	bne	1a84c <__assert_fail@plt+0x8108>
   1a880:	bx	lr
   1a884:	cmp	r0, r1
   1a888:	beq	1a944 <__assert_fail@plt+0x8200>
   1a88c:	push	{r4, r5, lr}
   1a890:	ldrb	r2, [r0]
   1a894:	ldrb	r3, [r1]
   1a898:	cmp	r2, #0
   1a89c:	bne	1a8e4 <__assert_fail@plt+0x81a0>
   1a8a0:	b	1a918 <__assert_fail@plt+0x81d4>
   1a8a4:	cmp	r3, r2
   1a8a8:	sub	ip, r2, #97	; 0x61
   1a8ac:	beq	1a8d4 <__assert_fail@plt+0x8190>
   1a8b0:	cmp	ip, #25
   1a8b4:	sub	r4, r3, #97	; 0x61
   1a8b8:	mov	lr, r2
   1a8bc:	bicls	lr, r2, #32
   1a8c0:	cmp	r4, #25
   1a8c4:	bicls	r3, r3, #32
   1a8c8:	cmp	r3, lr
   1a8cc:	mov	r5, r2
   1a8d0:	bne	1a92c <__assert_fail@plt+0x81e8>
   1a8d4:	ldrb	r2, [r0, #1]!
   1a8d8:	ldrb	r3, [r1, #1]!
   1a8dc:	cmp	r2, #0
   1a8e0:	beq	1a918 <__assert_fail@plt+0x81d4>
   1a8e4:	cmp	r3, #0
   1a8e8:	bne	1a8a4 <__assert_fail@plt+0x8160>
   1a8ec:	sub	r3, r2, #97	; 0x61
   1a8f0:	cmp	r3, #25
   1a8f4:	mov	r5, r2
   1a8f8:	mov	r3, #0
   1a8fc:	bhi	1a910 <__assert_fail@plt+0x81cc>
   1a900:	bic	r5, r2, #32
   1a904:	sub	r2, r3, #97	; 0x61
   1a908:	cmp	r2, #25
   1a90c:	bicls	r3, r3, #32
   1a910:	sub	r0, r5, r3
   1a914:	pop	{r4, r5, pc}
   1a918:	cmp	r3, #0
   1a91c:	movne	r5, #0
   1a920:	bne	1a904 <__assert_fail@plt+0x81c0>
   1a924:	mov	r0, #0
   1a928:	pop	{r4, r5, pc}
   1a92c:	ldrb	r3, [r1]
   1a930:	cmp	r3, r2
   1a934:	beq	1a924 <__assert_fail@plt+0x81e0>
   1a938:	cmp	ip, #25
   1a93c:	bls	1a900 <__assert_fail@plt+0x81bc>
   1a940:	b	1a904 <__assert_fail@plt+0x81c0>
   1a944:	mov	r0, #0
   1a948:	bx	lr
   1a94c:	cmp	r2, #0
   1a950:	cmpne	r0, r1
   1a954:	beq	1a9bc <__assert_fail@plt+0x8278>
   1a958:	push	{r4, r5, lr}
   1a95c:	sub	r1, r1, #1
   1a960:	sub	r4, r0, #1
   1a964:	b	1a970 <__assert_fail@plt+0x822c>
   1a968:	cmp	r3, ip
   1a96c:	bne	1a9b4 <__assert_fail@plt+0x8270>
   1a970:	ldrb	r3, [r4, #1]!
   1a974:	sub	ip, r3, #65	; 0x41
   1a978:	cmp	ip, #25
   1a97c:	ldrb	ip, [r1, #1]!
   1a980:	mvn	lr, r4
   1a984:	add	lr, lr, r2
   1a988:	sub	r5, ip, #65	; 0x41
   1a98c:	orrls	r3, r3, #32
   1a990:	cmp	r5, #25
   1a994:	orrls	ip, ip, #32
   1a998:	cmn	r0, lr
   1a99c:	moveq	lr, #1
   1a9a0:	movne	lr, #0
   1a9a4:	cmp	r3, #0
   1a9a8:	moveq	lr, #1
   1a9ac:	cmp	lr, #0
   1a9b0:	beq	1a968 <__assert_fail@plt+0x8224>
   1a9b4:	sub	r0, r3, ip
   1a9b8:	pop	{r4, r5, pc}
   1a9bc:	mov	r0, #0
   1a9c0:	bx	lr
   1a9c4:	cmp	r1, r0
   1a9c8:	beq	1a9d0 <__assert_fail@plt+0x828c>
   1a9cc:	b	19ff0 <__assert_fail@plt+0x78ac>
   1a9d0:	mov	r0, #0
   1a9d4:	bx	lr
   1a9d8:	cmp	r0, r1
   1a9dc:	beq	1aa3c <__assert_fail@plt+0x82f8>
   1a9e0:	ldrb	r2, [r0]
   1a9e4:	ldrb	ip, [r1]
   1a9e8:	cmp	r2, #0
   1a9ec:	beq	1aa24 <__assert_fail@plt+0x82e0>
   1a9f0:	clz	r3, ip
   1a9f4:	lsr	r3, r3, #5
   1a9f8:	b	1aa14 <__assert_fail@plt+0x82d0>
   1a9fc:	ldrb	r2, [r0, #1]!
   1aa00:	ldrb	ip, [r1, #1]!
   1aa04:	clz	r3, ip
   1aa08:	cmp	r2, #0
   1aa0c:	lsr	r3, r3, #5
   1aa10:	beq	1aa24 <__assert_fail@plt+0x82e0>
   1aa14:	cmp	ip, r2
   1aa18:	orrne	r3, r3, #1
   1aa1c:	cmp	r3, #0
   1aa20:	beq	1a9fc <__assert_fail@plt+0x82b8>
   1aa24:	cmp	ip, r2
   1aa28:	beq	1aa3c <__assert_fail@plt+0x82f8>
   1aa2c:	sxtb	r2, r2
   1aa30:	sxtb	r0, ip
   1aa34:	sub	r0, r2, r0
   1aa38:	bx	lr
   1aa3c:	mov	r0, #0
   1aa40:	bx	lr
   1aa44:	push	{r4, r5, r6, r7, r8, lr}
   1aa48:	subs	r7, r3, #0
   1aa4c:	mov	r4, r0
   1aa50:	beq	1aab0 <__assert_fail@plt+0x836c>
   1aa54:	cmp	r7, r1
   1aa58:	bhi	1aaa8 <__assert_fail@plt+0x8364>
   1aa5c:	sub	r1, r1, r7
   1aa60:	adds	r5, r0, r1
   1aa64:	bcs	1aaa8 <__assert_fail@plt+0x8364>
   1aa68:	cmp	r0, r2
   1aa6c:	mov	r6, r2
   1aa70:	beq	1aab0 <__assert_fail@plt+0x836c>
   1aa74:	mov	r2, r7
   1aa78:	mov	r1, r6
   1aa7c:	mov	r0, r4
   1aa80:	bl	19ff0 <__assert_fail@plt+0x78ac>
   1aa84:	cmp	r0, #0
   1aa88:	beq	1aab0 <__assert_fail@plt+0x836c>
   1aa8c:	add	r4, r4, #1
   1aa90:	cmp	r5, r4
   1aa94:	bcc	1aaa8 <__assert_fail@plt+0x8364>
   1aa98:	cmp	r6, r4
   1aa9c:	bne	1aa74 <__assert_fail@plt+0x8330>
   1aaa0:	mov	r0, r6
   1aaa4:	pop	{r4, r5, r6, r7, r8, pc}
   1aaa8:	mov	r0, #0
   1aaac:	pop	{r4, r5, r6, r7, r8, pc}
   1aab0:	mov	r0, r4
   1aab4:	pop	{r4, r5, r6, r7, r8, pc}
   1aab8:	push	{r4, r5, r6, lr}
   1aabc:	mov	r5, r0
   1aac0:	ldrb	r4, [r0]
   1aac4:	cmp	r4, #0
   1aac8:	beq	1aaec <__assert_fail@plt+0x83a8>
   1aacc:	bl	12354 <__ctype_tolower_loc@plt>
   1aad0:	mov	r3, r5
   1aad4:	ldr	r2, [r0]
   1aad8:	ldr	r2, [r2, r4, lsl #2]
   1aadc:	strb	r2, [r3]
   1aae0:	ldrb	r4, [r3, #1]!
   1aae4:	cmp	r4, #0
   1aae8:	bne	1aad4 <__assert_fail@plt+0x8390>
   1aaec:	mov	r0, r5
   1aaf0:	pop	{r4, r5, r6, pc}
   1aaf4:	cmp	r2, #0
   1aaf8:	beq	1ab4c <__assert_fail@plt+0x8408>
   1aafc:	push	{r4, r5, r6, r7, r8, lr}
   1ab00:	sub	r4, r0, #1
   1ab04:	add	r8, r4, r2
   1ab08:	sub	r7, r1, #1
   1ab0c:	ldrb	r5, [r4, #1]!
   1ab10:	ldrb	r6, [r7, #1]!
   1ab14:	cmp	r5, r6
   1ab18:	beq	1ab34 <__assert_fail@plt+0x83f0>
   1ab1c:	bl	12360 <__ctype_toupper_loc@plt>
   1ab20:	ldr	r3, [r0]
   1ab24:	ldr	r2, [r3, r5, lsl #2]
   1ab28:	ldr	r3, [r3, r6, lsl #2]
   1ab2c:	cmp	r2, r3
   1ab30:	bne	1ab44 <__assert_fail@plt+0x8400>
   1ab34:	cmp	r8, r4
   1ab38:	bne	1ab0c <__assert_fail@plt+0x83c8>
   1ab3c:	mov	r0, #0
   1ab40:	pop	{r4, r5, r6, r7, r8, pc}
   1ab44:	sub	r0, r5, r6
   1ab48:	pop	{r4, r5, r6, r7, r8, pc}
   1ab4c:	mov	r0, r2
   1ab50:	bx	lr
   1ab54:	cmp	r0, #0
   1ab58:	bxeq	lr
   1ab5c:	mov	r2, #1
   1ab60:	b	19db4 <__assert_fail@plt+0x7670>
   1ab64:	cmp	r0, #0
   1ab68:	bxeq	lr
   1ab6c:	mov	r2, #0
   1ab70:	b	19db4 <__assert_fail@plt+0x7670>
   1ab74:	push	{r0, r1, r2, r3}
   1ab78:	push	{r4, lr}
   1ab7c:	sub	sp, sp, #8
   1ab80:	ldr	r4, [pc, #80]	; 1abd8 <__assert_fail@plt+0x8494>
   1ab84:	ldr	r0, [sp, #16]
   1ab88:	ldr	r3, [r4]
   1ab8c:	cmp	r0, #0
   1ab90:	str	r3, [sp, #4]
   1ab94:	beq	1abc8 <__assert_fail@plt+0x8484>
   1ab98:	add	r3, sp, #20
   1ab9c:	mov	r1, r3
   1aba0:	str	r3, [sp]
   1aba4:	bl	198c0 <__assert_fail@plt+0x717c>
   1aba8:	ldr	r2, [sp, #4]
   1abac:	ldr	r3, [r4]
   1abb0:	cmp	r2, r3
   1abb4:	bne	1abd4 <__assert_fail@plt+0x8490>
   1abb8:	add	sp, sp, #8
   1abbc:	pop	{r4, lr}
   1abc0:	add	sp, sp, #16
   1abc4:	bx	lr
   1abc8:	ldr	r0, [pc, #12]	; 1abdc <__assert_fail@plt+0x8498>
   1abcc:	bl	12714 <gcry_strdup@plt>
   1abd0:	b	1aba8 <__assert_fail@plt+0x8464>
   1abd4:	bl	1218c <__stack_chk_fail@plt>
   1abd8:	andeq	sl, r3, r8, asr fp
   1abdc:	andeq	r6, r2, r4, ror #29
   1abe0:	push	{r0, r1, r2, r3}
   1abe4:	push	{r4, lr}
   1abe8:	sub	sp, sp, #8
   1abec:	ldr	r4, [pc, #144]	; 1ac84 <__assert_fail@plt+0x8540>
   1abf0:	ldr	r0, [sp, #16]
   1abf4:	ldr	r3, [r4]
   1abf8:	cmp	r0, #0
   1abfc:	str	r3, [sp, #4]
   1ac00:	beq	1ac3c <__assert_fail@plt+0x84f8>
   1ac04:	add	r3, sp, #20
   1ac08:	mov	r1, r3
   1ac0c:	str	r3, [sp]
   1ac10:	bl	198c0 <__assert_fail@plt+0x717c>
   1ac14:	cmp	r0, #0
   1ac18:	beq	1ac4c <__assert_fail@plt+0x8508>
   1ac1c:	ldr	r2, [sp, #4]
   1ac20:	ldr	r3, [r4]
   1ac24:	cmp	r2, r3
   1ac28:	bne	1ac48 <__assert_fail@plt+0x8504>
   1ac2c:	add	sp, sp, #8
   1ac30:	pop	{r4, lr}
   1ac34:	add	sp, sp, #16
   1ac38:	bx	lr
   1ac3c:	ldr	r0, [pc, #68]	; 1ac88 <__assert_fail@plt+0x8544>
   1ac40:	bl	12528 <gcry_xstrdup@plt>
   1ac44:	b	1ac14 <__assert_fail@plt+0x84d0>
   1ac48:	bl	1218c <__stack_chk_fail@plt>
   1ac4c:	bl	1245c <__errno_location@plt>
   1ac50:	ldr	r3, [pc, #52]	; 1ac8c <__assert_fail@plt+0x8548>
   1ac54:	ldr	r3, [r3]
   1ac58:	ldr	r2, [r0]
   1ac5c:	cmp	r2, #22
   1ac60:	moveq	r2, #37	; 0x25
   1ac64:	moveq	r1, #1
   1ac68:	ldreq	r0, [pc, #32]	; 1ac90 <__assert_fail@plt+0x854c>
   1ac6c:	movne	r2, #22
   1ac70:	movne	r1, #1
   1ac74:	ldrne	r0, [pc, #24]	; 1ac94 <__assert_fail@plt+0x8550>
   1ac78:	bl	12264 <fwrite@plt>
   1ac7c:	mov	r0, #2
   1ac80:	bl	123c0 <exit@plt>
   1ac84:	andeq	sl, r3, r8, asr fp
   1ac88:	andeq	r6, r2, r4, ror #29
   1ac8c:	andeq	sp, r3, r0, lsl r3
   1ac90:	andeq	r8, r2, ip, ror #18
   1ac94:	muleq	r2, r4, r9
   1ac98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac9c:	mov	r6, r2
   1aca0:	mov	r7, r3
   1aca4:	mov	r8, r0
   1aca8:	mov	r5, r1
   1acac:	bl	12408 <strchr@plt>
   1acb0:	cmp	r0, #0
   1acb4:	beq	1ad40 <__assert_fail@plt+0x85fc>
   1acb8:	mov	r4, #1
   1acbc:	b	1acc4 <__assert_fail@plt+0x8580>
   1acc0:	mov	r4, r3
   1acc4:	add	r0, r0, #1
   1acc8:	mov	r1, r5
   1accc:	bl	12408 <strchr@plt>
   1acd0:	add	r3, r4, #1
   1acd4:	cmp	r0, #0
   1acd8:	bne	1acc0 <__assert_fail@plt+0x857c>
   1acdc:	add	r0, r4, #2
   1ace0:	mov	r1, #4
   1ace4:	bl	124b0 <gcry_calloc@plt>
   1ace8:	subs	r9, r0, #0
   1acec:	beq	1ad38 <__assert_fail@plt+0x85f4>
   1acf0:	str	r8, [r9]
   1acf4:	mov	r0, r8
   1acf8:	mov	r1, r5
   1acfc:	bl	12408 <strchr@plt>
   1ad00:	subs	r3, r0, #0
   1ad04:	beq	1ad48 <__assert_fail@plt+0x8604>
   1ad08:	mov	r8, r9
   1ad0c:	mov	r4, #1
   1ad10:	add	r0, r3, #1
   1ad14:	strb	r6, [r3]
   1ad18:	str	r0, [r8, #4]!
   1ad1c:	mov	r1, r5
   1ad20:	bl	12408 <strchr@plt>
   1ad24:	add	r4, r4, #1
   1ad28:	subs	r3, r0, #0
   1ad2c:	bne	1ad10 <__assert_fail@plt+0x85cc>
   1ad30:	cmp	r7, #0
   1ad34:	strne	r4, [r7]
   1ad38:	mov	r0, r9
   1ad3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad40:	mov	r0, #2
   1ad44:	b	1ace0 <__assert_fail@plt+0x859c>
   1ad48:	mov	r4, #1
   1ad4c:	b	1ad30 <__assert_fail@plt+0x85ec>
   1ad50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad54:	mov	r8, r0
   1ad58:	mov	r6, r1
   1ad5c:	bl	12660 <strpbrk@plt>
   1ad60:	cmp	r0, #0
   1ad64:	beq	1af1c <__assert_fail@plt+0x87d8>
   1ad68:	mov	r5, #1
   1ad6c:	b	1ad74 <__assert_fail@plt+0x8630>
   1ad70:	mov	r5, r3
   1ad74:	add	r0, r0, #1
   1ad78:	mov	r1, r6
   1ad7c:	bl	12660 <strpbrk@plt>
   1ad80:	add	r3, r5, #1
   1ad84:	cmp	r0, #0
   1ad88:	bne	1ad70 <__assert_fail@plt+0x862c>
   1ad8c:	add	r5, r5, #2
   1ad90:	tst	r5, #-1073741824	; 0xc0000000
   1ad94:	lsl	r5, r5, #2
   1ad98:	bne	1ae68 <__assert_fail@plt+0x8724>
   1ad9c:	mov	r0, r8
   1ada0:	bl	123e4 <strlen@plt>
   1ada4:	add	r0, r0, #1
   1ada8:	adds	r0, r5, r0
   1adac:	movcs	r7, #1
   1adb0:	movcc	r7, #0
   1adb4:	bcs	1ae68 <__assert_fail@plt+0x8724>
   1adb8:	bl	1200c <gcry_malloc@plt>
   1adbc:	subs	r9, r0, #0
   1adc0:	beq	1ae74 <__assert_fail@plt+0x8730>
   1adc4:	add	r5, r9, r5
   1adc8:	mov	r1, r8
   1adcc:	mov	r0, r5
   1add0:	bl	12288 <strcpy@plt>
   1add4:	mov	r4, r5
   1add8:	sub	r8, r9, #4
   1addc:	mov	sl, r7
   1ade0:	mov	r1, r6
   1ade4:	mov	r0, r4
   1ade8:	bl	12660 <strpbrk@plt>
   1adec:	cmp	r0, #0
   1adf0:	beq	1ae7c <__assert_fail@plt+0x8738>
   1adf4:	strb	sl, [r0]
   1adf8:	ldrb	r3, [r4]
   1adfc:	cmp	r3, #32
   1ae00:	cmpne	r3, #9
   1ae04:	bne	1ae18 <__assert_fail@plt+0x86d4>
   1ae08:	ldrb	r3, [r4, #1]!
   1ae0c:	cmp	r3, #9
   1ae10:	cmpne	r3, #32
   1ae14:	beq	1ae08 <__assert_fail@plt+0x86c4>
   1ae18:	sub	r3, r0, #1
   1ae1c:	cmp	r3, r4
   1ae20:	bcc	1ae58 <__assert_fail@plt+0x8714>
   1ae24:	ldrb	r2, [r0, #-1]
   1ae28:	cmp	r2, #9
   1ae2c:	cmpne	r2, #32
   1ae30:	bne	1ae58 <__assert_fail@plt+0x8714>
   1ae34:	sub	r1, r4, #1
   1ae38:	b	1ae4c <__assert_fail@plt+0x8708>
   1ae3c:	ldrb	r2, [r3]
   1ae40:	cmp	r2, #9
   1ae44:	cmpne	r2, #32
   1ae48:	bne	1ae58 <__assert_fail@plt+0x8714>
   1ae4c:	strb	sl, [r3], #-1
   1ae50:	cmp	r3, r1
   1ae54:	bne	1ae3c <__assert_fail@plt+0x86f8>
   1ae58:	str	r4, [r8, #4]!
   1ae5c:	add	r7, r7, #1
   1ae60:	add	r4, r0, #1
   1ae64:	b	1ade0 <__assert_fail@plt+0x869c>
   1ae68:	mov	r0, #12
   1ae6c:	bl	125dc <gpg_err_set_errno@plt>
   1ae70:	mov	r9, #0
   1ae74:	mov	r0, r9
   1ae78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae7c:	ldrb	r3, [r4]
   1ae80:	cmp	r3, #32
   1ae84:	cmpne	r3, #9
   1ae88:	bne	1ae9c <__assert_fail@plt+0x8758>
   1ae8c:	ldrb	r3, [r4, #1]!
   1ae90:	cmp	r3, #9
   1ae94:	cmpne	r3, #32
   1ae98:	beq	1ae8c <__assert_fail@plt+0x8748>
   1ae9c:	mov	r0, r4
   1aea0:	bl	123e4 <strlen@plt>
   1aea4:	sub	r0, r0, #1
   1aea8:	adds	r3, r4, r0
   1aeac:	bcs	1aee4 <__assert_fail@plt+0x87a0>
   1aeb0:	ldrb	r2, [r4, r0]
   1aeb4:	cmp	r2, #9
   1aeb8:	cmpne	r2, #32
   1aebc:	bne	1aee4 <__assert_fail@plt+0x87a0>
   1aec0:	mov	r1, #0
   1aec4:	b	1aed8 <__assert_fail@plt+0x8794>
   1aec8:	ldrb	r2, [r3]
   1aecc:	cmp	r2, #9
   1aed0:	cmpne	r2, #32
   1aed4:	bne	1aee4 <__assert_fail@plt+0x87a0>
   1aed8:	strb	r1, [r3], #-1
   1aedc:	cmp	r3, r4
   1aee0:	bcs	1aec8 <__assert_fail@plt+0x8784>
   1aee4:	lsl	r3, r7, #2
   1aee8:	add	r2, r3, #8
   1aeec:	add	r2, r9, r2
   1aef0:	add	r3, r9, r3
   1aef4:	cmp	r5, r2
   1aef8:	mov	r2, #0
   1aefc:	str	r4, [r9, r7, lsl #2]
   1af00:	str	r2, [r3, #4]
   1af04:	beq	1ae74 <__assert_fail@plt+0x8730>
   1af08:	ldr	r3, [pc, #20]	; 1af24 <__assert_fail@plt+0x87e0>
   1af0c:	ldr	r2, [pc, #20]	; 1af28 <__assert_fail@plt+0x87e4>
   1af10:	ldr	r1, [pc, #20]	; 1af2c <__assert_fail@plt+0x87e8>
   1af14:	ldr	r0, [pc, #20]	; 1af30 <__assert_fail@plt+0x87ec>
   1af18:	bl	12744 <__assert_fail@plt>
   1af1c:	mov	r5, #8
   1af20:	b	1ad9c <__assert_fail@plt+0x8658>
   1af24:	andeq	r8, r2, r0, lsr #18
   1af28:	andeq	r0, r0, r2, lsl r5
   1af2c:	andeq	r8, r2, ip, lsr #18
   1af30:	andeq	r8, r2, ip, lsr #19
   1af34:	push	{r4, r5, r6, r7, r8, lr}
   1af38:	mov	r6, r2
   1af3c:	ldrb	r3, [r0]
   1af40:	cmp	r3, #32
   1af44:	bne	1af54 <__assert_fail@plt+0x8810>
   1af48:	ldrb	r3, [r0, #1]!
   1af4c:	cmp	r3, #32
   1af50:	beq	1af48 <__assert_fail@plt+0x8804>
   1af54:	cmp	r6, #0
   1af58:	beq	1afb8 <__assert_fail@plt+0x8874>
   1af5c:	mov	r4, #0
   1af60:	sub	r5, r1, #4
   1af64:	mov	r7, r4
   1af68:	str	r0, [r5, #4]!
   1af6c:	mov	r1, #32
   1af70:	bl	12408 <strchr@plt>
   1af74:	add	r4, r4, #1
   1af78:	subs	r3, r0, #0
   1af7c:	beq	1afb0 <__assert_fail@plt+0x886c>
   1af80:	mov	r0, r3
   1af84:	strb	r7, [r0], #1
   1af88:	ldrb	r3, [r3, #1]
   1af8c:	cmp	r3, #32
   1af90:	bne	1afa0 <__assert_fail@plt+0x885c>
   1af94:	ldrb	r3, [r0, #1]!
   1af98:	cmp	r3, #32
   1af9c:	beq	1af94 <__assert_fail@plt+0x8850>
   1afa0:	cmp	r3, #0
   1afa4:	beq	1afb0 <__assert_fail@plt+0x886c>
   1afa8:	cmp	r6, r4
   1afac:	bne	1af68 <__assert_fail@plt+0x8824>
   1afb0:	mov	r0, r4
   1afb4:	pop	{r4, r5, r6, r7, r8, pc}
   1afb8:	mov	r4, r6
   1afbc:	b	1afb0 <__assert_fail@plt+0x886c>
   1afc0:	push	{r4, r5, r6, r7, r8, lr}
   1afc4:	subs	r7, r2, #0
   1afc8:	beq	1b018 <__assert_fail@plt+0x88d4>
   1afcc:	mov	r4, #0
   1afd0:	sub	r5, r1, #4
   1afd4:	mov	r6, r4
   1afd8:	b	1aff4 <__assert_fail@plt+0x88b0>
   1afdc:	strb	r6, [r0], #1
   1afe0:	ldrb	r3, [r3, #1]
   1afe4:	cmp	r3, #0
   1afe8:	beq	1b010 <__assert_fail@plt+0x88cc>
   1afec:	cmp	r7, r4
   1aff0:	beq	1b010 <__assert_fail@plt+0x88cc>
   1aff4:	str	r0, [r5, #4]!
   1aff8:	mov	r1, #58	; 0x3a
   1affc:	bl	12408 <strchr@plt>
   1b000:	add	r4, r4, #1
   1b004:	subs	r3, r0, #0
   1b008:	mov	r0, r3
   1b00c:	bne	1afdc <__assert_fail@plt+0x8898>
   1b010:	mov	r0, r4
   1b014:	pop	{r4, r5, r6, r7, r8, pc}
   1b018:	mov	r4, r7
   1b01c:	b	1b010 <__assert_fail@plt+0x88cc>
   1b020:	push	{r4, r5, r6, lr}
   1b024:	sub	sp, sp, #32
   1b028:	ldr	r4, [pc, #220]	; 1b10c <__assert_fail@plt+0x89c8>
   1b02c:	cmp	r0, #0
   1b030:	ldr	r3, [r4]
   1b034:	str	r3, [sp, #28]
   1b038:	beq	1b100 <__assert_fail@plt+0x89bc>
   1b03c:	mov	r5, r1
   1b040:	add	r3, sp, #12
   1b044:	add	r2, sp, #8
   1b048:	add	r1, sp, #4
   1b04c:	bl	196f8 <__assert_fail@plt+0x6fb4>
   1b050:	subs	r6, r0, #0
   1b054:	beq	1b100 <__assert_fail@plt+0x89bc>
   1b058:	cmp	r5, #0
   1b05c:	beq	1b0d0 <__assert_fail@plt+0x898c>
   1b060:	add	r1, sp, #16
   1b064:	mov	r0, r5
   1b068:	add	r3, sp, #24
   1b06c:	add	r2, sp, #20
   1b070:	bl	196f8 <__assert_fail@plt+0x6fb4>
   1b074:	subs	r1, r0, #0
   1b078:	beq	1b100 <__assert_fail@plt+0x89bc>
   1b07c:	ldr	r3, [sp, #4]
   1b080:	ldr	r2, [sp, #16]
   1b084:	cmp	r3, r2
   1b088:	subne	r3, r3, r2
   1b08c:	beq	1b0a0 <__assert_fail@plt+0x895c>
   1b090:	cmp	r3, #0
   1b094:	mvnlt	r0, #0
   1b098:	movge	r0, #1
   1b09c:	b	1b0d4 <__assert_fail@plt+0x8990>
   1b0a0:	ldr	r3, [sp, #8]
   1b0a4:	ldr	r0, [sp, #20]
   1b0a8:	cmp	r3, r0
   1b0ac:	bne	1b0ec <__assert_fail@plt+0x89a8>
   1b0b0:	ldr	r3, [sp, #12]
   1b0b4:	ldr	r0, [sp, #24]
   1b0b8:	cmp	r3, r0
   1b0bc:	bne	1b0ec <__assert_fail@plt+0x89a8>
   1b0c0:	mov	r0, r6
   1b0c4:	bl	12054 <strcmp@plt>
   1b0c8:	subs	r3, r0, #0
   1b0cc:	bne	1b090 <__assert_fail@plt+0x894c>
   1b0d0:	mov	r0, #0
   1b0d4:	ldr	r2, [sp, #28]
   1b0d8:	ldr	r3, [r4]
   1b0dc:	cmp	r2, r3
   1b0e0:	bne	1b108 <__assert_fail@plt+0x89c4>
   1b0e4:	add	sp, sp, #32
   1b0e8:	pop	{r4, r5, r6, pc}
   1b0ec:	sub	r3, r3, r0
   1b0f0:	cmp	r3, #0
   1b0f4:	mvnlt	r0, #0
   1b0f8:	movge	r0, #1
   1b0fc:	b	1b0d4 <__assert_fail@plt+0x8990>
   1b100:	mov	r0, #-2147483648	; 0x80000000
   1b104:	b	1b0d4 <__assert_fail@plt+0x8990>
   1b108:	bl	1218c <__stack_chk_fail@plt>
   1b10c:	andeq	sl, r3, r8, asr fp
   1b110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b114:	sub	sp, sp, #12
   1b118:	mov	r7, r1
   1b11c:	str	r2, [sp]
   1b120:	bl	12714 <gcry_strdup@plt>
   1b124:	subs	r3, r0, #0
   1b128:	str	r3, [sp, #4]
   1b12c:	beq	1b2f8 <__assert_fail@plt+0x8bb4>
   1b130:	mov	r6, #0
   1b134:	ldr	r9, [pc, #464]	; 1b30c <__assert_fail@plt+0x8bc8>
   1b138:	mov	r5, r6
   1b13c:	mov	r8, r6
   1b140:	mov	r4, r3
   1b144:	mov	fp, r3
   1b148:	mov	r1, r9
   1b14c:	mov	r0, fp
   1b150:	bl	12084 <strcspn@plt>
   1b154:	adds	sl, fp, r0
   1b158:	beq	1b1f8 <__assert_fail@plt+0x8ab4>
   1b15c:	ldrb	fp, [sl]
   1b160:	cmp	fp, #10
   1b164:	beq	1b214 <__assert_fail@plt+0x8ad0>
   1b168:	subs	r1, sl, r4
   1b16c:	beq	1b17c <__assert_fail@plt+0x8a38>
   1b170:	mov	r0, r4
   1b174:	bl	19fa8 <__assert_fail@plt+0x7864>
   1b178:	mov	r1, r0
   1b17c:	cmp	r7, r1
   1b180:	bgt	1b22c <__assert_fail@plt+0x8ae8>
   1b184:	ldr	r3, [sp]
   1b188:	sub	ip, r1, r7
   1b18c:	cmp	r3, r1
   1b190:	sublt	r1, r1, r3
   1b194:	lsl	ip, ip, #1
   1b198:	sub	r0, r7, r5
   1b19c:	addlt	ip, ip, r1, lsl #2
   1b1a0:	cmp	ip, r0
   1b1a4:	movlt	ip, #0
   1b1a8:	movge	ip, #1
   1b1ac:	cmp	r5, #0
   1b1b0:	movne	r5, ip
   1b1b4:	moveq	r5, #0
   1b1b8:	cmp	r5, #0
   1b1bc:	movne	sl, r8
   1b1c0:	ldrbne	fp, [r8]
   1b1c4:	cmp	fp, #0
   1b1c8:	beq	1b2ac <__assert_fail@plt+0x8b68>
   1b1cc:	mov	fp, sl
   1b1d0:	mov	r1, #10
   1b1d4:	strb	r1, [fp], #1
   1b1d8:	ldrb	r1, [sl, #1]
   1b1dc:	cmp	r1, #32
   1b1e0:	beq	1b25c <__assert_fail@plt+0x8b18>
   1b1e4:	mov	r6, #0
   1b1e8:	mov	r5, r6
   1b1ec:	mov	r8, r6
   1b1f0:	mov	r4, fp
   1b1f4:	b	1b148 <__assert_fail@plt+0x8a04>
   1b1f8:	ldr	sl, [sp, #4]
   1b1fc:	mov	r0, sl
   1b200:	bl	123e4 <strlen@plt>
   1b204:	add	sl, sl, r0
   1b208:	ldrb	fp, [sl]
   1b20c:	cmp	fp, #10
   1b210:	bne	1b168 <__assert_fail@plt+0x8a24>
   1b214:	add	r4, sl, #1
   1b218:	mov	r5, #0
   1b21c:	mov	fp, r4
   1b220:	mov	r8, r5
   1b224:	mov	r6, #1
   1b228:	b	1b148 <__assert_fail@plt+0x8a04>
   1b22c:	cmp	fp, #0
   1b230:	beq	1b2ac <__assert_fail@plt+0x8b68>
   1b234:	ldrb	r0, [sl, #1]
   1b238:	add	fp, sl, #1
   1b23c:	cmp	r0, #32
   1b240:	bne	1b250 <__assert_fail@plt+0x8b0c>
   1b244:	ldrb	r0, [fp, #1]!
   1b248:	cmp	r0, #32
   1b24c:	beq	1b244 <__assert_fail@plt+0x8b00>
   1b250:	mov	r5, r1
   1b254:	mov	r8, sl
   1b258:	b	1b148 <__assert_fail@plt+0x8a04>
   1b25c:	ldrb	r1, [sl, #2]
   1b260:	cmp	r1, #32
   1b264:	bne	1b304 <__assert_fail@plt+0x8bc0>
   1b268:	add	r2, sl, #3
   1b26c:	mov	r4, r2
   1b270:	add	r2, r2, #1
   1b274:	ldrb	r1, [r4]
   1b278:	cmp	r1, #32
   1b27c:	beq	1b26c <__assert_fail@plt+0x8b28>
   1b280:	mov	r0, r4
   1b284:	bl	123e4 <strlen@plt>
   1b288:	mov	r6, #0
   1b28c:	mov	r1, r4
   1b290:	mov	r5, r6
   1b294:	mov	r8, r6
   1b298:	mov	r4, fp
   1b29c:	add	r2, r0, #1
   1b2a0:	mov	r0, fp
   1b2a4:	bl	120d8 <memmove@plt>
   1b2a8:	b	1b148 <__assert_fail@plt+0x8a04>
   1b2ac:	ldr	r4, [sp, #4]
   1b2b0:	mov	r0, r4
   1b2b4:	bl	123e4 <strlen@plt>
   1b2b8:	ldr	r2, [pc, #80]	; 1b310 <__assert_fail@plt+0x8bcc>
   1b2bc:	mov	r1, r0
   1b2c0:	mov	r0, r4
   1b2c4:	bl	1a40c <__assert_fail@plt+0x7cc8>
   1b2c8:	cmp	r6, #0
   1b2cc:	bne	1b2f8 <__assert_fail@plt+0x8bb4>
   1b2d0:	ldrb	r3, [r4]
   1b2d4:	cmp	r3, #0
   1b2d8:	beq	1b2f8 <__assert_fail@plt+0x8bb4>
   1b2dc:	mov	r0, r4
   1b2e0:	bl	123e4 <strlen@plt>
   1b2e4:	sub	r0, r0, #1
   1b2e8:	ldrb	r3, [r4, r0]
   1b2ec:	cmp	r3, #10
   1b2f0:	ldreq	r3, [sp, #4]
   1b2f4:	strbeq	r6, [r3, r0]
   1b2f8:	ldr	r0, [sp, #4]
   1b2fc:	add	sp, sp, #12
   1b300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b304:	add	r4, sl, #2
   1b308:	b	1b280 <__assert_fail@plt+0x8b3c>
   1b30c:	ldrdeq	r8, [r2], -r0
   1b310:	andeq	r9, r2, r8, lsl #1
   1b314:	push	{r4, r5, r6, lr}
   1b318:	mov	r5, r1
   1b31c:	ldr	r1, [r0, #8]
   1b320:	mov	r4, r0
   1b324:	ands	r3, r1, #32768	; 0x8000
   1b328:	bne	1b370 <__assert_fail@plt+0x8c2c>
   1b32c:	ldr	r2, [r0]
   1b330:	orr	r1, r1, #32768	; 0x8000
   1b334:	str	r1, [r0, #8]
   1b338:	str	r3, [r0, #28]
   1b33c:	str	r3, [r0, #32]
   1b340:	str	r3, [r0, #36]	; 0x24
   1b344:	str	r3, [r0, #12]
   1b348:	ldr	r2, [r2]
   1b34c:	str	r3, [r0, #40]	; 0x28
   1b350:	cmp	r2, #0
   1b354:	str	r3, [r0, #44]	; 0x2c
   1b358:	str	r3, [r0, #48]	; 0x30
   1b35c:	str	r3, [r0, #52]	; 0x34
   1b360:	blt	1b4c8 <__assert_fail@plt+0x8d84>
   1b364:	mov	r3, #0
   1b368:	str	r3, [r4, #24]
   1b36c:	pop	{r4, r5, r6, pc}
   1b370:	ldr	r3, [r0, #12]
   1b374:	cmp	r3, #0
   1b378:	beq	1b364 <__assert_fail@plt+0x8c20>
   1b37c:	cmp	r5, #0
   1b380:	ldr	r3, [r0, #16]
   1b384:	beq	1b40c <__assert_fail@plt+0x8cc8>
   1b388:	cmn	r3, #6
   1b38c:	mov	r6, r2
   1b390:	mov	r2, #5
   1b394:	beq	1b470 <__assert_fail@plt+0x8d2c>
   1b398:	cmn	r3, #5
   1b39c:	beq	1b484 <__assert_fail@plt+0x8d40>
   1b3a0:	cmn	r3, #4
   1b3a4:	beq	1b498 <__assert_fail@plt+0x8d54>
   1b3a8:	cmn	r3, #3
   1b3ac:	beq	1b4d0 <__assert_fail@plt+0x8d8c>
   1b3b0:	cmn	r3, #12
   1b3b4:	beq	1b500 <__assert_fail@plt+0x8dbc>
   1b3b8:	cmn	r3, #7
   1b3bc:	beq	1b530 <__assert_fail@plt+0x8dec>
   1b3c0:	cmn	r3, #10
   1b3c4:	beq	1b560 <__assert_fail@plt+0x8e1c>
   1b3c8:	cmn	r3, #11
   1b3cc:	mov	r0, #0
   1b3d0:	ldreq	r1, [pc, #496]	; 1b5c8 <__assert_fail@plt+0x8e84>
   1b3d4:	ldrne	r1, [pc, #496]	; 1b5cc <__assert_fail@plt+0x8e88>
   1b3d8:	bl	12180 <dcgettext@plt>
   1b3dc:	mov	r3, r0
   1b3e0:	ldr	r2, [r6]
   1b3e4:	mov	r1, r5
   1b3e8:	ldr	r0, [pc, #480]	; 1b5d0 <__assert_fail@plt+0x8e8c>
   1b3ec:	bl	1e95c <__assert_fail@plt+0xc218>
   1b3f0:	ldr	r3, [r4, #12]
   1b3f4:	cmp	r3, #1
   1b3f8:	moveq	r3, #0
   1b3fc:	streq	r3, [r4, #12]
   1b400:	beq	1b364 <__assert_fail@plt+0x8c20>
   1b404:	mov	r0, #2
   1b408:	bl	123c0 <exit@plt>
   1b40c:	ldr	r6, [r0, #40]	; 0x28
   1b410:	ldr	r2, [pc, #444]	; 1b5d4 <__assert_fail@plt+0x8e90>
   1b414:	cmp	r6, #0
   1b418:	moveq	r6, r2
   1b41c:	cmn	r3, #3
   1b420:	beq	1b4e4 <__assert_fail@plt+0x8da0>
   1b424:	cmn	r3, #12
   1b428:	beq	1b514 <__assert_fail@plt+0x8dd0>
   1b42c:	cmn	r3, #6
   1b430:	beq	1b544 <__assert_fail@plt+0x8e00>
   1b434:	cmn	r3, #7
   1b438:	beq	1b574 <__assert_fail@plt+0x8e30>
   1b43c:	cmn	r3, #8
   1b440:	beq	1b4ac <__assert_fail@plt+0x8d68>
   1b444:	cmn	r3, #9
   1b448:	beq	1b5ac <__assert_fail@plt+0x8e68>
   1b44c:	cmn	r3, #11
   1b450:	mov	r2, #5
   1b454:	beq	1b590 <__assert_fail@plt+0x8e4c>
   1b458:	ldr	r1, [pc, #376]	; 1b5d8 <__assert_fail@plt+0x8e94>
   1b45c:	mov	r0, #0
   1b460:	bl	12180 <dcgettext@plt>
   1b464:	mov	r1, r6
   1b468:	bl	1e95c <__assert_fail@plt+0xc218>
   1b46c:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b470:	ldr	r1, [pc, #356]	; 1b5dc <__assert_fail@plt+0x8e98>
   1b474:	mov	r0, #0
   1b478:	bl	12180 <dcgettext@plt>
   1b47c:	mov	r3, r0
   1b480:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b484:	ldr	r1, [pc, #340]	; 1b5e0 <__assert_fail@plt+0x8e9c>
   1b488:	mov	r0, #0
   1b48c:	bl	12180 <dcgettext@plt>
   1b490:	mov	r3, r0
   1b494:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b498:	ldr	r1, [pc, #324]	; 1b5e4 <__assert_fail@plt+0x8ea0>
   1b49c:	mov	r0, #0
   1b4a0:	bl	12180 <dcgettext@plt>
   1b4a4:	mov	r3, r0
   1b4a8:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b4ac:	mov	r0, r5
   1b4b0:	mov	r2, #5
   1b4b4:	ldr	r1, [pc, #300]	; 1b5e8 <__assert_fail@plt+0x8ea4>
   1b4b8:	bl	12180 <dcgettext@plt>
   1b4bc:	mov	r1, r6
   1b4c0:	bl	1e95c <__assert_fail@plt+0xc218>
   1b4c4:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b4c8:	ldr	r0, [pc, #284]	; 1b5ec <__assert_fail@plt+0x8ea8>
   1b4cc:	bl	1ea64 <__assert_fail@plt+0xc320>
   1b4d0:	ldr	r1, [pc, #280]	; 1b5f0 <__assert_fail@plt+0x8eac>
   1b4d4:	mov	r0, #0
   1b4d8:	bl	12180 <dcgettext@plt>
   1b4dc:	mov	r3, r0
   1b4e0:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b4e4:	mov	r0, r5
   1b4e8:	mov	r2, #5
   1b4ec:	ldr	r1, [pc, #256]	; 1b5f4 <__assert_fail@plt+0x8eb0>
   1b4f0:	bl	12180 <dcgettext@plt>
   1b4f4:	mov	r1, r6
   1b4f8:	bl	1e95c <__assert_fail@plt+0xc218>
   1b4fc:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b500:	ldr	r1, [pc, #240]	; 1b5f8 <__assert_fail@plt+0x8eb4>
   1b504:	mov	r0, #0
   1b508:	bl	12180 <dcgettext@plt>
   1b50c:	mov	r3, r0
   1b510:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b514:	mov	r0, r5
   1b518:	mov	r2, #5
   1b51c:	ldr	r1, [pc, #216]	; 1b5fc <__assert_fail@plt+0x8eb8>
   1b520:	bl	12180 <dcgettext@plt>
   1b524:	mov	r1, r6
   1b528:	bl	1e95c <__assert_fail@plt+0xc218>
   1b52c:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b530:	ldr	r1, [pc, #200]	; 1b600 <__assert_fail@plt+0x8ebc>
   1b534:	mov	r0, #0
   1b538:	bl	12180 <dcgettext@plt>
   1b53c:	mov	r3, r0
   1b540:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b544:	mov	r0, r5
   1b548:	mov	r2, #5
   1b54c:	ldr	r1, [pc, #176]	; 1b604 <__assert_fail@plt+0x8ec0>
   1b550:	bl	12180 <dcgettext@plt>
   1b554:	mov	r1, r6
   1b558:	bl	1e95c <__assert_fail@plt+0xc218>
   1b55c:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b560:	ldr	r1, [pc, #160]	; 1b608 <__assert_fail@plt+0x8ec4>
   1b564:	mov	r0, #0
   1b568:	bl	12180 <dcgettext@plt>
   1b56c:	mov	r3, r0
   1b570:	b	1b3e0 <__assert_fail@plt+0x8c9c>
   1b574:	mov	r0, r5
   1b578:	mov	r2, #5
   1b57c:	ldr	r1, [pc, #136]	; 1b60c <__assert_fail@plt+0x8ec8>
   1b580:	bl	12180 <dcgettext@plt>
   1b584:	mov	r1, r6
   1b588:	bl	1e95c <__assert_fail@plt+0xc218>
   1b58c:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b590:	ldr	r1, [pc, #120]	; 1b610 <__assert_fail@plt+0x8ecc>
   1b594:	mov	r0, #0
   1b598:	bl	12180 <dcgettext@plt>
   1b59c:	mov	r1, r0
   1b5a0:	ldr	r0, [pc, #108]	; 1b614 <__assert_fail@plt+0x8ed0>
   1b5a4:	bl	1e95c <__assert_fail@plt+0xc218>
   1b5a8:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b5ac:	mov	r0, r5
   1b5b0:	mov	r2, #5
   1b5b4:	ldr	r1, [pc, #92]	; 1b618 <__assert_fail@plt+0x8ed4>
   1b5b8:	bl	12180 <dcgettext@plt>
   1b5bc:	mov	r1, r6
   1b5c0:	bl	1e95c <__assert_fail@plt+0xc218>
   1b5c4:	b	1b3f0 <__assert_fail@plt+0x8cac>
   1b5c8:	andeq	r8, r2, r8, asr #21
   1b5cc:	ldrdeq	r8, [r2], -r4
   1b5d0:	andeq	r8, r2, r4, ror #21
   1b5d4:	andeq	r8, r2, r4, lsl sl
   1b5d8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1b5dc:	andeq	r8, r2, ip, lsr sl
   1b5e0:	andeq	r8, r2, r4, asr sl
   1b5e4:	andeq	r8, r2, r0, ror #20
   1b5e8:	andeq	r8, r2, r8, lsl #23
   1b5ec:	andeq	r8, r2, ip, lsl sl
   1b5f0:	andeq	r8, r2, r4, ror sl
   1b5f4:	strdeq	r8, [r2], -r0
   1b5f8:	andeq	r8, r2, r8, lsl #21
   1b5fc:	andeq	r8, r2, r8, lsl fp
   1b600:	muleq	r2, ip, sl
   1b604:	andeq	r8, r2, r0, asr #22
   1b608:	andeq	r8, r2, ip, lsr #21
   1b60c:	andeq	r8, r2, ip, ror #22
   1b610:	andeq	r8, r2, r8, asr #23
   1b614:	muleq	r2, r8, r9
   1b618:	andeq	r8, r2, r8, lsr #23
   1b61c:	tst	r1, #16
   1b620:	and	r1, r1, #7
   1b624:	push	{r4, r5, r6, r7, r8, lr}
   1b628:	movne	r7, #0
   1b62c:	moveq	r7, #10
   1b630:	cmp	r1, #3
   1b634:	mov	r6, r0
   1b638:	str	r1, [r0, #20]
   1b63c:	mov	r5, r2
   1b640:	beq	1b660 <__assert_fail@plt+0x8f1c>
   1b644:	cmp	r1, #4
   1b648:	beq	1b6a0 <__assert_fail@plt+0x8f5c>
   1b64c:	cmp	r1, #1
   1b650:	beq	1b660 <__assert_fail@plt+0x8f1c>
   1b654:	str	r2, [r6, #24]
   1b658:	mov	r0, #1
   1b65c:	pop	{r4, r5, r6, r7, r8, pc}
   1b660:	bl	1245c <__errno_location@plt>
   1b664:	mov	r1, #0
   1b668:	mov	r2, r7
   1b66c:	mov	r4, r0
   1b670:	mov	r0, r5
   1b674:	str	r1, [r4]
   1b678:	bl	1206c <strtol@plt>
   1b67c:	sub	r3, r0, #-2147483647	; 0x80000001
   1b680:	cmn	r3, #3
   1b684:	bls	1b694 <__assert_fail@plt+0x8f50>
   1b688:	ldr	r3, [r4]
   1b68c:	cmp	r3, #34	; 0x22
   1b690:	beq	1b71c <__assert_fail@plt+0x8fd8>
   1b694:	str	r0, [r6, #24]
   1b698:	mov	r0, #0
   1b69c:	pop	{r4, r5, r6, r7, r8, pc}
   1b6a0:	ldrb	r4, [r2]
   1b6a4:	tst	r4, #128	; 0x80
   1b6a8:	bne	1b6d4 <__assert_fail@plt+0x8f90>
   1b6ac:	bl	12390 <__ctype_b_loc@plt>
   1b6b0:	ldr	r2, [r0]
   1b6b4:	b	1b6c4 <__assert_fail@plt+0x8f80>
   1b6b8:	ldrb	r4, [r5, #1]!
   1b6bc:	tst	r4, #128	; 0x80
   1b6c0:	bne	1b6d4 <__assert_fail@plt+0x8f90>
   1b6c4:	lsl	r3, r4, #1
   1b6c8:	ldrh	r3, [r2, r3]
   1b6cc:	tst	r3, #8192	; 0x2000
   1b6d0:	bne	1b6b8 <__assert_fail@plt+0x8f74>
   1b6d4:	cmp	r4, #45	; 0x2d
   1b6d8:	beq	1b72c <__assert_fail@plt+0x8fe8>
   1b6dc:	bl	1245c <__errno_location@plt>
   1b6e0:	mov	r4, #0
   1b6e4:	mov	r2, r7
   1b6e8:	mov	r1, r4
   1b6ec:	mov	r8, r0
   1b6f0:	mov	r0, r5
   1b6f4:	str	r4, [r8]
   1b6f8:	bl	123d8 <strtoul@plt>
   1b6fc:	cmn	r0, #1
   1b700:	str	r0, [r6, #24]
   1b704:	beq	1b710 <__assert_fail@plt+0x8fcc>
   1b708:	mov	r0, r4
   1b70c:	pop	{r4, r5, r6, r7, r8, pc}
   1b710:	ldr	r3, [r8]
   1b714:	cmp	r3, #34	; 0x22
   1b718:	bne	1b708 <__assert_fail@plt+0x8fc4>
   1b71c:	mvn	r3, #11
   1b720:	str	r3, [r6, #16]
   1b724:	mvn	r0, #0
   1b728:	pop	{r4, r5, r6, r7, r8, pc}
   1b72c:	mov	r2, #0
   1b730:	mvn	r3, #11
   1b734:	str	r2, [r6, #24]
   1b738:	str	r3, [r6, #16]
   1b73c:	mvn	r0, #0
   1b740:	pop	{r4, r5, r6, r7, r8, pc}
   1b744:	push	{r1, r2, r3}
   1b748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b74c:	sub	sp, sp, #8
   1b750:	ldr	r8, [pc, #188]	; 1b814 <__assert_fail@plt+0x90d0>
   1b754:	ldr	r4, [sp, #44]	; 0x2c
   1b758:	ldr	r3, [r8]
   1b75c:	cmp	r4, #0
   1b760:	str	r3, [sp, #4]
   1b764:	moveq	r5, r4
   1b768:	beq	1b7ec <__assert_fail@plt+0x90a8>
   1b76c:	cmp	r0, #0
   1b770:	add	r2, sp, #48	; 0x30
   1b774:	mov	r9, r0
   1b778:	ldr	r6, [pc, #152]	; 1b818 <__assert_fail@plt+0x90d4>
   1b77c:	ldr	fp, [pc, #152]	; 1b81c <__assert_fail@plt+0x90d8>
   1b780:	movne	r7, #2
   1b784:	moveq	r7, #1
   1b788:	mov	sl, r2
   1b78c:	mov	r5, #0
   1b790:	str	r2, [sp]
   1b794:	b	1b7c4 <__assert_fail@plt+0x9080>
   1b798:	mov	r1, r4
   1b79c:	mov	r0, r7
   1b7a0:	blx	r2
   1b7a4:	mov	r0, r4
   1b7a8:	bl	123e4 <strlen@plt>
   1b7ac:	add	sl, sl, #4
   1b7b0:	ldr	r4, [sl, #-4]
   1b7b4:	str	sl, [sp]
   1b7b8:	cmp	r4, #0
   1b7bc:	add	r5, r5, r0
   1b7c0:	beq	1b7ec <__assert_fail@plt+0x90a8>
   1b7c4:	ldr	r2, [r6]
   1b7c8:	cmp	r2, #0
   1b7cc:	bne	1b798 <__assert_fail@plt+0x9054>
   1b7d0:	cmp	r9, #0
   1b7d4:	mov	r0, r4
   1b7d8:	ldrne	r3, [pc, #64]	; 1b820 <__assert_fail@plt+0x90dc>
   1b7dc:	ldreq	r1, [fp]
   1b7e0:	ldrne	r1, [r3]
   1b7e4:	bl	126cc <fputs@plt>
   1b7e8:	b	1b7a4 <__assert_fail@plt+0x9060>
   1b7ec:	ldr	r2, [sp, #4]
   1b7f0:	ldr	r3, [r8]
   1b7f4:	mov	r0, r5
   1b7f8:	cmp	r2, r3
   1b7fc:	bne	1b810 <__assert_fail@plt+0x90cc>
   1b800:	add	sp, sp, #8
   1b804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b808:	add	sp, sp, #12
   1b80c:	bx	lr
   1b810:	bl	1218c <__stack_chk_fail@plt>
   1b814:	andeq	sl, r3, r8, asr fp
   1b818:	andeq	sp, r3, r4, asr #6
   1b81c:	andeq	sp, r3, r4, lsl r3
   1b820:	andeq	sp, r3, r0, lsl r3
   1b824:	ldr	r3, [pc, #48]	; 1b85c <__assert_fail@plt+0x9118>
   1b828:	ldr	r3, [r3]
   1b82c:	cmp	r3, #0
   1b830:	beq	1b848 <__assert_fail@plt+0x9104>
   1b834:	cmp	r0, #0
   1b838:	movne	r0, #2
   1b83c:	moveq	r0, #1
   1b840:	mov	r1, #0
   1b844:	bx	r3
   1b848:	cmp	r0, #0
   1b84c:	ldrne	r3, [pc, #12]	; 1b860 <__assert_fail@plt+0x911c>
   1b850:	ldreq	r3, [pc, #12]	; 1b864 <__assert_fail@plt+0x9120>
   1b854:	ldr	r0, [r3]
   1b858:	b	120b4 <fflush@plt>
   1b85c:	andeq	sp, r3, r4, asr #6
   1b860:	andeq	sp, r3, r0, lsl r3
   1b864:	andeq	sp, r3, r4, lsl r3
   1b868:	ldr	r3, [pc, #4]	; 1b874 <__assert_fail@plt+0x9130>
   1b86c:	str	r0, [r3]
   1b870:	bx	lr
   1b874:	andeq	sp, r3, r4, asr #6
   1b878:	ldr	r3, [pc, #244]	; 1b974 <__assert_fail@plt+0x9230>
   1b87c:	push	{r4, lr}
   1b880:	mov	r4, r0
   1b884:	ldr	r3, [r3, #4]
   1b888:	cmp	r3, #0
   1b88c:	beq	1b89c <__assert_fail@plt+0x9158>
   1b890:	blx	r3
   1b894:	cmp	r0, #0
   1b898:	bne	1b92c <__assert_fail@plt+0x91e8>
   1b89c:	sub	r0, r4, #10
   1b8a0:	cmp	r0, #31
   1b8a4:	ldrls	pc, [pc, r0, lsl #2]
   1b8a8:	b	1b96c <__assert_fail@plt+0x9228>
   1b8ac:	andeq	fp, r1, ip, lsr r9
   1b8b0:	andeq	fp, r1, r4, asr #18
   1b8b4:	andeq	fp, r1, ip, ror #18
   1b8b8:	andeq	fp, r1, ip, asr #18
   1b8bc:	andeq	fp, r1, r4, asr r9
   1b8c0:	andeq	fp, r1, ip, asr r9
   1b8c4:	andeq	fp, r1, r4, ror #18
   1b8c8:	andeq	fp, r1, ip, ror #18
   1b8cc:	andeq	fp, r1, ip, ror #18
   1b8d0:	andeq	fp, r1, ip, ror #18
   1b8d4:	andeq	fp, r1, ip, ror #18
   1b8d8:	andeq	fp, r1, ip, ror #18
   1b8dc:	andeq	fp, r1, ip, ror #18
   1b8e0:	andeq	fp, r1, ip, ror #18
   1b8e4:	andeq	fp, r1, ip, ror #18
   1b8e8:	andeq	fp, r1, ip, ror #18
   1b8ec:	andeq	fp, r1, ip, ror #18
   1b8f0:	andeq	fp, r1, ip, ror #18
   1b8f4:	andeq	fp, r1, ip, ror #18
   1b8f8:	andeq	fp, r1, ip, ror #18
   1b8fc:	andeq	fp, r1, ip, ror #18
   1b900:	andeq	fp, r1, ip, ror #18
   1b904:	andeq	fp, r1, ip, ror #18
   1b908:	andeq	fp, r1, ip, ror #18
   1b90c:	andeq	fp, r1, ip, ror #18
   1b910:	andeq	fp, r1, ip, ror #18
   1b914:	andeq	fp, r1, ip, ror #18
   1b918:	andeq	fp, r1, ip, ror #18
   1b91c:	andeq	fp, r1, ip, ror #18
   1b920:	andeq	fp, r1, ip, ror #18
   1b924:	andeq	fp, r1, r4, lsr r9
   1b928:	andeq	fp, r1, r4, lsr r9
   1b92c:	pop	{r4, lr}
   1b930:	b	23ee8 <__assert_fail@plt+0x117a4>
   1b934:	ldr	r0, [pc, #60]	; 1b978 <__assert_fail@plt+0x9234>
   1b938:	pop	{r4, pc}
   1b93c:	ldr	r0, [pc, #56]	; 1b97c <__assert_fail@plt+0x9238>
   1b940:	pop	{r4, pc}
   1b944:	ldr	r0, [pc, #52]	; 1b980 <__assert_fail@plt+0x923c>
   1b948:	pop	{r4, pc}
   1b94c:	ldr	r0, [pc, #48]	; 1b984 <__assert_fail@plt+0x9240>
   1b950:	pop	{r4, pc}
   1b954:	ldr	r0, [pc, #44]	; 1b988 <__assert_fail@plt+0x9244>
   1b958:	pop	{r4, pc}
   1b95c:	ldr	r0, [pc, #40]	; 1b98c <__assert_fail@plt+0x9248>
   1b960:	pop	{r4, pc}
   1b964:	ldr	r0, [pc, #36]	; 1b990 <__assert_fail@plt+0x924c>
   1b968:	pop	{r4, pc}
   1b96c:	mov	r0, #0
   1b970:	pop	{r4, pc}
   1b974:	andeq	sp, r3, r4, asr #6
   1b978:	andeq	r6, r2, r4, ror #29
   1b97c:	strdeq	r8, [r2], -ip
   1b980:	strdeq	r8, [r2], -r0
   1b984:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1b988:	andeq	r8, r2, r4, asr #29
   1b98c:	andeq	r8, r2, r8, asr #28
   1b990:	strdeq	r8, [r2], -r4
   1b994:	push	{r4, r5, lr}
   1b998:	mov	r0, #11
   1b99c:	sub	sp, sp, #12
   1b9a0:	bl	1b878 <__assert_fail@plt+0x9134>
   1b9a4:	mov	r2, #0
   1b9a8:	mov	r1, r0
   1b9ac:	mov	r0, r2
   1b9b0:	bl	1b744 <__assert_fail@plt+0x9000>
   1b9b4:	mov	r0, #12
   1b9b8:	bl	1b878 <__assert_fail@plt+0x9134>
   1b9bc:	subs	r2, r0, #0
   1b9c0:	beq	1b9d8 <__assert_fail@plt+0x9294>
   1b9c4:	mov	r0, #0
   1b9c8:	str	r0, [sp]
   1b9cc:	ldr	r3, [pc, #268]	; 1bae0 <__assert_fail@plt+0x939c>
   1b9d0:	ldr	r1, [pc, #268]	; 1bae4 <__assert_fail@plt+0x93a0>
   1b9d4:	bl	1b744 <__assert_fail@plt+0x9000>
   1b9d8:	mov	r0, #13
   1b9dc:	bl	1b878 <__assert_fail@plt+0x9134>
   1b9e0:	mov	ip, #0
   1b9e4:	ldr	r3, [pc, #252]	; 1bae8 <__assert_fail@plt+0x93a4>
   1b9e8:	str	ip, [sp]
   1b9ec:	ldr	r1, [pc, #248]	; 1baec <__assert_fail@plt+0x93a8>
   1b9f0:	mov	r5, r3
   1b9f4:	mov	r4, #20
   1b9f8:	mov	r2, r0
   1b9fc:	mov	r0, ip
   1ba00:	bl	1b744 <__assert_fail@plt+0x9000>
   1ba04:	mov	r0, r4
   1ba08:	bl	1b878 <__assert_fail@plt+0x9134>
   1ba0c:	mov	r3, #0
   1ba10:	mov	r2, r5
   1ba14:	add	r4, r4, #1
   1ba18:	subs	r1, r0, #0
   1ba1c:	mov	r0, r3
   1ba20:	beq	1ba28 <__assert_fail@plt+0x92e4>
   1ba24:	bl	1b744 <__assert_fail@plt+0x9000>
   1ba28:	cmp	r4, #30
   1ba2c:	bne	1ba04 <__assert_fail@plt+0x92c0>
   1ba30:	mov	r0, #14
   1ba34:	bl	1b878 <__assert_fail@plt+0x9134>
   1ba38:	subs	r1, r0, #0
   1ba3c:	beq	1ba50 <__assert_fail@plt+0x930c>
   1ba40:	mov	r3, #0
   1ba44:	mov	r0, r3
   1ba48:	ldr	r2, [pc, #152]	; 1bae8 <__assert_fail@plt+0x93a4>
   1ba4c:	bl	1b744 <__assert_fail@plt+0x9000>
   1ba50:	mov	r0, #10
   1ba54:	bl	1b878 <__assert_fail@plt+0x9134>
   1ba58:	subs	r1, r0, #0
   1ba5c:	beq	1ba70 <__assert_fail@plt+0x932c>
   1ba60:	mov	r3, #0
   1ba64:	mov	r0, r3
   1ba68:	ldr	r2, [pc, #120]	; 1bae8 <__assert_fail@plt+0x93a4>
   1ba6c:	bl	1b744 <__assert_fail@plt+0x9000>
   1ba70:	mov	r0, #15
   1ba74:	bl	1b878 <__assert_fail@plt+0x9134>
   1ba78:	subs	r1, r0, #0
   1ba7c:	beq	1ba8c <__assert_fail@plt+0x9348>
   1ba80:	mov	r2, #0
   1ba84:	mov	r0, r2
   1ba88:	bl	1b744 <__assert_fail@plt+0x9000>
   1ba8c:	mov	r0, #18
   1ba90:	bl	1b878 <__assert_fail@plt+0x9134>
   1ba94:	subs	r1, r0, #0
   1ba98:	beq	1baa8 <__assert_fail@plt+0x9364>
   1ba9c:	mov	r2, #0
   1baa0:	mov	r0, r2
   1baa4:	bl	1b744 <__assert_fail@plt+0x9000>
   1baa8:	mov	r0, r4
   1baac:	bl	1b878 <__assert_fail@plt+0x9134>
   1bab0:	mov	r2, #0
   1bab4:	add	r4, r4, #1
   1bab8:	subs	r1, r0, #0
   1babc:	mov	r0, r2
   1bac0:	beq	1bac8 <__assert_fail@plt+0x9384>
   1bac4:	bl	1b744 <__assert_fail@plt+0x9000>
   1bac8:	cmp	r4, #40	; 0x28
   1bacc:	bne	1baa8 <__assert_fail@plt+0x9364>
   1bad0:	mov	r0, #0
   1bad4:	add	sp, sp, #12
   1bad8:	pop	{r4, r5, lr}
   1badc:	b	1b824 <__assert_fail@plt+0x90e0>
   1bae0:	andeq	r8, r2, ip, asr #30
   1bae4:	andeq	r8, r2, r0, asr pc
   1bae8:	muleq	r2, r8, r3
   1baec:	andeq	r9, r2, r8, lsl #1
   1baf0:	ldr	r3, [pc, #1504]	; 1c0d8 <__assert_fail@plt+0x9994>
   1baf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baf8:	sub	sp, sp, #28
   1bafc:	ldr	r3, [r3]
   1bb00:	mov	r7, r0
   1bb04:	str	r3, [sp, #20]
   1bb08:	str	r1, [sp, #8]
   1bb0c:	bl	1b994 <__assert_fail@plt+0x9250>
   1bb10:	mov	r2, #0
   1bb14:	mov	r0, r2
   1bb18:	ldr	r1, [pc, #1468]	; 1c0dc <__assert_fail@plt+0x9998>
   1bb1c:	bl	1b744 <__assert_fail@plt+0x9000>
   1bb20:	mov	r0, #42	; 0x2a
   1bb24:	bl	1b878 <__assert_fail@plt+0x9134>
   1bb28:	cmp	r0, #0
   1bb2c:	beq	1bb3c <__assert_fail@plt+0x93f8>
   1bb30:	ldrb	r3, [r0]
   1bb34:	cmp	r3, #49	; 0x31
   1bb38:	beq	1bff0 <__assert_fail@plt+0x98ac>
   1bb3c:	mov	r0, #41	; 0x29
   1bb40:	bl	1b878 <__assert_fail@plt+0x9134>
   1bb44:	mov	r3, #0
   1bb48:	ldr	r2, [pc, #1420]	; 1c0dc <__assert_fail@plt+0x9998>
   1bb4c:	mov	r1, r0
   1bb50:	mov	r0, r3
   1bb54:	bl	1b744 <__assert_fail@plt+0x9000>
   1bb58:	ldr	r3, [r7, #12]
   1bb5c:	cmp	r3, #0
   1bb60:	beq	1bc0c <__assert_fail@plt+0x94c8>
   1bb64:	ldr	r2, [r7]
   1bb68:	cmp	r2, #0
   1bb6c:	beq	1bbe4 <__assert_fail@plt+0x94a0>
   1bb70:	mov	r4, r7
   1bb74:	mov	r6, #0
   1bb78:	b	1bbc0 <__assert_fail@plt+0x947c>
   1bb7c:	ldrb	r8, [r3]
   1bb80:	cmp	r8, #64	; 0x40
   1bb84:	beq	1bbb4 <__assert_fail@plt+0x9470>
   1bb88:	bl	123e4 <strlen@plt>
   1bb8c:	cmp	r8, #124	; 0x7c
   1bb90:	mov	r5, r0
   1bb94:	beq	1bf08 <__assert_fail@plt+0x97c4>
   1bb98:	cmp	r5, #34	; 0x22
   1bb9c:	movle	r3, #1
   1bba0:	movgt	r3, #0
   1bba4:	cmp	r5, r6
   1bba8:	movle	r3, #0
   1bbac:	cmp	r3, #0
   1bbb0:	movne	r6, r5
   1bbb4:	ldr	r3, [r4, #16]!
   1bbb8:	cmp	r3, #0
   1bbbc:	beq	1bc4c <__assert_fail@plt+0x9508>
   1bbc0:	ldr	r0, [r4, #4]
   1bbc4:	cmp	r0, #0
   1bbc8:	beq	1bbb4 <__assert_fail@plt+0x9470>
   1bbcc:	ldr	r3, [r4, #12]
   1bbd0:	cmp	r3, #0
   1bbd4:	bne	1bb7c <__assert_fail@plt+0x9438>
   1bbd8:	bl	123e4 <strlen@plt>
   1bbdc:	mov	r5, r0
   1bbe0:	b	1bb98 <__assert_fail@plt+0x9454>
   1bbe4:	ldrb	r3, [r3]
   1bbe8:	cmp	r3, #64	; 0x40
   1bbec:	bne	1beec <__assert_fail@plt+0x97a8>
   1bbf0:	ldr	r3, [sp, #8]
   1bbf4:	tst	r3, #32
   1bbf8:	beq	1bc0c <__assert_fail@plt+0x94c8>
   1bbfc:	mov	r2, #0
   1bc00:	mov	r0, r2
   1bc04:	ldr	r1, [pc, #1236]	; 1c0e0 <__assert_fail@plt+0x999c>
   1bc08:	bl	1b744 <__assert_fail@plt+0x9000>
   1bc0c:	mov	r0, #19
   1bc10:	bl	1b878 <__assert_fail@plt+0x9134>
   1bc14:	subs	r4, r0, #0
   1bc18:	beq	1bc3c <__assert_fail@plt+0x94f8>
   1bc1c:	mov	r2, #0
   1bc20:	mov	r0, r2
   1bc24:	ldr	r1, [pc, #1200]	; 1c0dc <__assert_fail@plt+0x9998>
   1bc28:	bl	1b744 <__assert_fail@plt+0x9000>
   1bc2c:	mov	r2, #0
   1bc30:	mov	r1, r4
   1bc34:	mov	r0, r2
   1bc38:	bl	1b744 <__assert_fail@plt+0x9000>
   1bc3c:	mov	r0, #0
   1bc40:	bl	1b824 <__assert_fail@plt+0x90e0>
   1bc44:	mov	r0, #0
   1bc48:	bl	123c0 <exit@plt>
   1bc4c:	ldr	r3, [r7, #12]
   1bc50:	add	r6, r6, #10
   1bc54:	ldrb	r3, [r3]
   1bc58:	cmp	r3, #64	; 0x40
   1bc5c:	bne	1bef0 <__assert_fail@plt+0x97ac>
   1bc60:	ldr	r3, [r7]
   1bc64:	cmp	r3, #0
   1bc68:	beq	1bbf0 <__assert_fail@plt+0x94ac>
   1bc6c:	ldr	fp, [pc, #1136]	; 1c0e4 <__assert_fail@plt+0x99a0>
   1bc70:	ldr	sl, [pc, #1136]	; 1c0e8 <__assert_fail@plt+0x99a4>
   1bc74:	add	r7, r7, #16
   1bc78:	mov	r2, #5
   1bc7c:	ldr	r1, [r7, #-4]
   1bc80:	mov	r0, #0
   1bc84:	bl	12180 <dcgettext@plt>
   1bc88:	bl	23ee8 <__assert_fail@plt+0x117a4>
   1bc8c:	subs	r5, r0, #0
   1bc90:	beq	1bca0 <__assert_fail@plt+0x955c>
   1bc94:	ldrb	r3, [r5]
   1bc98:	cmp	r3, #64	; 0x40
   1bc9c:	beq	1be5c <__assert_fail@plt+0x9718>
   1bca0:	ldr	r1, [r7, #-16]
   1bca4:	cmp	r1, #255	; 0xff
   1bca8:	bgt	1bd8c <__assert_fail@plt+0x9648>
   1bcac:	mov	ip, #0
   1bcb0:	add	r9, sp, #16
   1bcb4:	mov	r3, ip
   1bcb8:	strb	r1, [sp, #16]
   1bcbc:	mov	r0, ip
   1bcc0:	mov	r2, r9
   1bcc4:	ldr	r1, [pc, #1056]	; 1c0ec <__assert_fail@plt+0x99a8>
   1bcc8:	strb	ip, [sp, #17]
   1bccc:	bl	1b744 <__assert_fail@plt+0x9000>
   1bcd0:	ldr	r3, [r7, #-12]
   1bcd4:	cmp	r3, #0
   1bcd8:	movne	r4, #3
   1bcdc:	beq	1bed0 <__assert_fail@plt+0x978c>
   1bce0:	ldr	r2, [r7, #-16]
   1bce4:	mov	r8, #0
   1bce8:	cmp	r2, #256	; 0x100
   1bcec:	movlt	ip, #44	; 0x2c
   1bcf0:	movge	ip, #32
   1bcf4:	str	r8, [sp]
   1bcf8:	mov	r0, r8
   1bcfc:	mov	r2, fp
   1bd00:	mov	r1, r9
   1bd04:	strb	ip, [sp, #16]
   1bd08:	strb	r8, [sp, #17]
   1bd0c:	bl	1b744 <__assert_fail@plt+0x9000>
   1bd10:	cmp	r5, r8
   1bd14:	add	r4, r4, r0
   1bd18:	beq	1bd28 <__assert_fail@plt+0x95e4>
   1bd1c:	ldrb	r3, [r5]
   1bd20:	cmp	r3, #124	; 0x7c
   1bd24:	beq	1bf58 <__assert_fail@plt+0x9814>
   1bd28:	mov	r2, #0
   1bd2c:	mov	r0, r2
   1bd30:	mov	r1, sl
   1bd34:	add	r4, r4, #3
   1bd38:	bl	1b744 <__assert_fail@plt+0x9000>
   1bd3c:	cmp	r6, r4
   1bd40:	ble	1bd64 <__assert_fail@plt+0x9620>
   1bd44:	ldr	r8, [pc, #932]	; 1c0f0 <__assert_fail@plt+0x99ac>
   1bd48:	mov	r2, #0
   1bd4c:	add	r4, r4, #1
   1bd50:	mov	r0, r2
   1bd54:	mov	r1, r8
   1bd58:	bl	1b744 <__assert_fail@plt+0x9000>
   1bd5c:	cmp	r6, r4
   1bd60:	bne	1bd48 <__assert_fail@plt+0x9604>
   1bd64:	cmp	r5, #0
   1bd68:	bne	1bdb4 <__assert_fail@plt+0x9670>
   1bd6c:	mov	r2, #0
   1bd70:	mov	r0, r2
   1bd74:	ldr	r1, [pc, #864]	; 1c0dc <__assert_fail@plt+0x9998>
   1bd78:	bl	1b744 <__assert_fail@plt+0x9000>
   1bd7c:	ldr	r3, [r7], #16
   1bd80:	cmp	r3, #0
   1bd84:	bne	1bc78 <__assert_fail@plt+0x9534>
   1bd88:	b	1bbf0 <__assert_fail@plt+0x94ac>
   1bd8c:	mov	r2, #0
   1bd90:	mov	r0, r2
   1bd94:	mov	r1, sl
   1bd98:	bl	1b744 <__assert_fail@plt+0x9000>
   1bd9c:	ldr	r3, [r7, #-12]
   1bda0:	mov	r4, #3
   1bda4:	cmp	r3, #0
   1bda8:	addne	r9, sp, #16
   1bdac:	bne	1bce0 <__assert_fail@plt+0x959c>
   1bdb0:	b	1bd44 <__assert_fail@plt+0x9600>
   1bdb4:	ldrb	r3, [r5]
   1bdb8:	cmp	r3, #0
   1bdbc:	cmpne	r6, r4
   1bdc0:	blt	1c02c <__assert_fail@plt+0x98e8>
   1bdc4:	cmp	r3, #0
   1bdc8:	beq	1bd6c <__assert_fail@plt+0x9628>
   1bdcc:	cmp	r3, #10
   1bdd0:	mov	r8, #0
   1bdd4:	ldr	r4, [pc, #788]	; 1c0f0 <__assert_fail@plt+0x99ac>
   1bdd8:	bne	1be30 <__assert_fail@plt+0x96ec>
   1bddc:	ldrb	r3, [r5, #1]
   1bde0:	cmp	r3, #0
   1bde4:	beq	1bd6c <__assert_fail@plt+0x9628>
   1bde8:	mov	r2, #0
   1bdec:	mov	r0, r2
   1bdf0:	ldr	r1, [pc, #740]	; 1c0dc <__assert_fail@plt+0x9998>
   1bdf4:	bl	1b744 <__assert_fail@plt+0x9000>
   1bdf8:	mov	r9, #0
   1bdfc:	mov	r2, #0
   1be00:	add	r9, r9, #1
   1be04:	mov	r0, r2
   1be08:	mov	r1, r4
   1be0c:	bl	1b744 <__assert_fail@plt+0x9000>
   1be10:	cmp	r6, r9
   1be14:	bne	1bdfc <__assert_fail@plt+0x96b8>
   1be18:	ldrb	r3, [r5, #1]
   1be1c:	add	r5, r5, #1
   1be20:	cmp	r3, #0
   1be24:	beq	1bd6c <__assert_fail@plt+0x9628>
   1be28:	cmp	r3, #10
   1be2c:	beq	1bddc <__assert_fail@plt+0x9698>
   1be30:	mov	r2, #0
   1be34:	mov	r0, r2
   1be38:	add	r1, sp, #16
   1be3c:	strb	r3, [sp, #16]
   1be40:	strb	r8, [sp, #17]
   1be44:	bl	1b744 <__assert_fail@plt+0x9000>
   1be48:	ldrb	r3, [r5, #1]
   1be4c:	add	r5, r5, #1
   1be50:	cmp	r3, #0
   1be54:	bne	1be28 <__assert_fail@plt+0x96e4>
   1be58:	b	1bd6c <__assert_fail@plt+0x9628>
   1be5c:	ldrb	r3, [r5, #1]
   1be60:	cmp	r3, #0
   1be64:	beq	1bd7c <__assert_fail@plt+0x9638>
   1be68:	cmp	r3, #10
   1be6c:	add	r5, r5, #1
   1be70:	mov	r4, #0
   1be74:	ldr	r8, [pc, #608]	; 1c0dc <__assert_fail@plt+0x9998>
   1be78:	bne	1beb0 <__assert_fail@plt+0x976c>
   1be7c:	ldrb	r3, [r5, #1]
   1be80:	cmp	r3, #0
   1be84:	beq	1bd6c <__assert_fail@plt+0x9628>
   1be88:	mov	r2, #0
   1be8c:	mov	r0, r2
   1be90:	mov	r1, r8
   1be94:	bl	1b744 <__assert_fail@plt+0x9000>
   1be98:	ldrb	r3, [r5, #1]
   1be9c:	cmp	r3, #0
   1bea0:	add	r5, r5, #1
   1bea4:	beq	1bd6c <__assert_fail@plt+0x9628>
   1bea8:	cmp	r3, #10
   1beac:	beq	1be7c <__assert_fail@plt+0x9738>
   1beb0:	mov	r2, #0
   1beb4:	mov	r0, r2
   1beb8:	add	r1, sp, #16
   1bebc:	strb	r3, [sp, #16]
   1bec0:	strb	r4, [sp, #17]
   1bec4:	bl	1b744 <__assert_fail@plt+0x9000>
   1bec8:	ldrb	r3, [r5, #1]
   1becc:	b	1be9c <__assert_fail@plt+0x9758>
   1bed0:	cmp	r5, #0
   1bed4:	beq	1bee4 <__assert_fail@plt+0x97a0>
   1bed8:	ldrb	r2, [r5]
   1bedc:	cmp	r2, #124	; 0x7c
   1bee0:	beq	1c068 <__assert_fail@plt+0x9924>
   1bee4:	mov	r4, #3
   1bee8:	b	1bd44 <__assert_fail@plt+0x9600>
   1beec:	mov	r6, #10
   1bef0:	mov	r3, #0
   1bef4:	mov	r0, r3
   1bef8:	ldr	r2, [pc, #476]	; 1c0dc <__assert_fail@plt+0x9998>
   1befc:	ldr	r1, [pc, #496]	; 1c0f4 <__assert_fail@plt+0x99b0>
   1bf00:	bl	1b744 <__assert_fail@plt+0x9000>
   1bf04:	b	1bc60 <__assert_fail@plt+0x951c>
   1bf08:	bl	24b1c <__assert_fail@plt+0x123d8>
   1bf0c:	ldr	r3, [r4, #12]
   1bf10:	add	r2, r3, #1
   1bf14:	ldrb	r3, [r3, #1]
   1bf18:	cmp	r3, #61	; 0x3d
   1bf1c:	beq	1bf30 <__assert_fail@plt+0x97ec>
   1bf20:	cmp	r3, #124	; 0x7c
   1bf24:	cmpne	r3, #0
   1bf28:	add	r5, r5, #1
   1bf2c:	beq	1bb98 <__assert_fail@plt+0x9454>
   1bf30:	cmp	r0, #0
   1bf34:	beq	1bf44 <__assert_fail@plt+0x9800>
   1bf38:	and	r3, r3, #192	; 0xc0
   1bf3c:	cmp	r3, #128	; 0x80
   1bf40:	addne	r5, r5, #1
   1bf44:	ldrb	r3, [r2, #1]!
   1bf48:	cmp	r3, #0
   1bf4c:	cmpne	r3, #124	; 0x7c
   1bf50:	bne	1bf30 <__assert_fail@plt+0x97ec>
   1bf54:	b	1bb98 <__assert_fail@plt+0x9454>
   1bf58:	ldrb	ip, [r5, #1]
   1bf5c:	add	r3, r5, #1
   1bf60:	str	r3, [sp, #12]
   1bf64:	cmp	ip, #61	; 0x3d
   1bf68:	bne	1bfc0 <__assert_fail@plt+0x987c>
   1bf6c:	mvn	r8, r5
   1bf70:	add	r8, r8, r4
   1bf74:	add	r4, r5, #2
   1bf78:	mov	r5, #0
   1bf7c:	mov	r2, #0
   1bf80:	mov	r0, r2
   1bf84:	mov	r1, r9
   1bf88:	strb	ip, [sp, #16]
   1bf8c:	strb	r5, [sp, #17]
   1bf90:	bl	1b744 <__assert_fail@plt+0x9000>
   1bf94:	mov	r3, r4
   1bf98:	add	r2, r8, r4
   1bf9c:	ldrb	ip, [r4], #1
   1bfa0:	cmp	ip, #0
   1bfa4:	cmpne	ip, #124	; 0x7c
   1bfa8:	bne	1bf7c <__assert_fail@plt+0x9838>
   1bfac:	mov	r4, r2
   1bfb0:	mov	r5, r3
   1bfb4:	cmp	ip, #0
   1bfb8:	addne	r5, r5, #1
   1bfbc:	b	1bd28 <__assert_fail@plt+0x95e4>
   1bfc0:	mov	r2, r8
   1bfc4:	mov	r0, r8
   1bfc8:	ldr	r1, [pc, #288]	; 1c0f0 <__assert_fail@plt+0x99ac>
   1bfcc:	bl	1b744 <__assert_fail@plt+0x9000>
   1bfd0:	ldrb	ip, [r5, #1]
   1bfd4:	ldr	r3, [sp, #12]
   1bfd8:	add	r4, r4, #1
   1bfdc:	cmp	ip, #124	; 0x7c
   1bfe0:	cmpne	ip, r8
   1bfe4:	moveq	r5, r3
   1bfe8:	bne	1bf6c <__assert_fail@plt+0x9828>
   1bfec:	b	1bfb4 <__assert_fail@plt+0x9870>
   1bff0:	mov	r0, #40	; 0x28
   1bff4:	bl	1b878 <__assert_fail@plt+0x9134>
   1bff8:	mov	r2, #0
   1bffc:	mov	r4, r0
   1c000:	mov	r1, r0
   1c004:	mov	r0, #1
   1c008:	bl	1b744 <__assert_fail@plt+0x9000>
   1c00c:	ldrb	r3, [r4]
   1c010:	cmp	r3, #0
   1c014:	beq	1bb3c <__assert_fail@plt+0x93f8>
   1c018:	mov	r2, #0
   1c01c:	ldr	r1, [pc, #184]	; 1c0dc <__assert_fail@plt+0x9998>
   1c020:	mov	r0, #1
   1c024:	bl	1b744 <__assert_fail@plt+0x9000>
   1c028:	b	1bb3c <__assert_fail@plt+0x93f8>
   1c02c:	mov	r2, #0
   1c030:	mov	r0, r2
   1c034:	ldr	r1, [pc, #160]	; 1c0dc <__assert_fail@plt+0x9998>
   1c038:	bl	1b744 <__assert_fail@plt+0x9000>
   1c03c:	ldr	r8, [pc, #172]	; 1c0f0 <__assert_fail@plt+0x99ac>
   1c040:	mov	r4, #0
   1c044:	mov	r2, #0
   1c048:	add	r4, r4, #1
   1c04c:	mov	r0, r2
   1c050:	mov	r1, r8
   1c054:	bl	1b744 <__assert_fail@plt+0x9000>
   1c058:	cmp	r6, r4
   1c05c:	bne	1c044 <__assert_fail@plt+0x9900>
   1c060:	ldrb	r3, [r5]
   1c064:	b	1bdc4 <__assert_fail@plt+0x9680>
   1c068:	mov	r2, r3
   1c06c:	ldr	r1, [pc, #124]	; 1c0f0 <__assert_fail@plt+0x99ac>
   1c070:	mov	r0, r3
   1c074:	str	r3, [sp, #12]
   1c078:	add	r8, r5, #1
   1c07c:	bl	1b744 <__assert_fail@plt+0x9000>
   1c080:	rsb	r5, r5, #3
   1c084:	b	1c0a4 <__assert_fail@plt+0x9960>
   1c088:	mov	r2, #0
   1c08c:	ldr	r3, [sp, #12]
   1c090:	mov	r0, r2
   1c094:	mov	r1, r9
   1c098:	strb	ip, [sp, #16]
   1c09c:	strb	r3, [sp, #17]
   1c0a0:	bl	1b744 <__assert_fail@plt+0x9000>
   1c0a4:	add	r4, r5, r8
   1c0a8:	mov	r2, r8
   1c0ac:	ldrb	ip, [r8], #1
   1c0b0:	cmp	ip, #0
   1c0b4:	cmpne	ip, #124	; 0x7c
   1c0b8:	bne	1c088 <__assert_fail@plt+0x9944>
   1c0bc:	cmp	ip, #0
   1c0c0:	movne	r5, r8
   1c0c4:	moveq	r5, r2
   1c0c8:	ldr	r3, [r7, #-12]
   1c0cc:	cmp	r3, #0
   1c0d0:	bne	1bce0 <__assert_fail@plt+0x959c>
   1c0d4:	b	1bd3c <__assert_fail@plt+0x95f8>
   1c0d8:	andeq	sl, r3, r8, asr fp
   1c0dc:	muleq	r2, r8, r3
   1c0e0:	andeq	r8, r2, ip, ror #30
   1c0e4:	andeq	r8, r2, r8, ror #30
   1c0e8:	andeq	r8, r2, r4, ror #30
   1c0ec:	andeq	r8, r2, r0, ror #30
   1c0f0:	andeq	r9, r2, r8, lsl #1
   1c0f4:	andeq	r8, r2, r4, asr pc
   1c0f8:	ldr	ip, [pc, #2540]	; 1caec <__assert_fail@plt+0xa3a8>
   1c0fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c100:	sub	sp, sp, #108	; 0x6c
   1c104:	mov	r6, r1
   1c108:	str	r1, [sp, #16]
   1c10c:	mov	r4, r0
   1c110:	ldm	ip, {r0, r1, r2, r3}
   1c114:	add	r5, ip, #16
   1c118:	add	lr, sp, #40	; 0x28
   1c11c:	stm	lr, {r0, r1, r2, r3}
   1c120:	add	lr, ip, #32
   1c124:	ldm	r5, {r0, r1, r2, r3}
   1c128:	add	r5, sp, #56	; 0x38
   1c12c:	add	ip, ip, #48	; 0x30
   1c130:	stm	r5, {r0, r1, r2, r3}
   1c134:	ldm	lr, {r0, r1, r2, r3}
   1c138:	add	lr, sp, #72	; 0x48
   1c13c:	stm	lr, {r0, r1, r2, r3}
   1c140:	ldm	ip, {r0, r1, r2, r3}
   1c144:	add	ip, sp, #88	; 0x58
   1c148:	stm	ip, {r0, r1, r2, r3}
   1c14c:	ldr	r7, [r6]
   1c150:	cmp	r7, #0
   1c154:	beq	1c460 <__assert_fail@plt+0x9d1c>
   1c158:	mov	r7, #0
   1c15c:	mov	r5, r6
   1c160:	str	r7, [sp, #20]
   1c164:	str	r7, [sp, #12]
   1c168:	mov	r9, r7
   1c16c:	mov	r6, r7
   1c170:	ldr	r8, [pc, #2424]	; 1caf0 <__assert_fail@plt+0xa3ac>
   1c174:	ldr	sl, [pc, #2424]	; 1caf4 <__assert_fail@plt+0xa3b0>
   1c178:	b	1c180 <__assert_fail@plt+0x9a3c>
   1c17c:	mov	r6, ip
   1c180:	ldr	fp, [r5, #4]
   1c184:	cmp	fp, #0
   1c188:	beq	1c1f0 <__assert_fail@plt+0x9aac>
   1c18c:	mov	r1, r8
   1c190:	mov	r0, fp
   1c194:	bl	12054 <strcmp@plt>
   1c198:	cmp	r0, #0
   1c19c:	moveq	r9, #1
   1c1a0:	beq	1c1f0 <__assert_fail@plt+0x9aac>
   1c1a4:	mov	r1, sl
   1c1a8:	mov	r0, fp
   1c1ac:	bl	12054 <strcmp@plt>
   1c1b0:	cmp	r0, #0
   1c1b4:	moveq	r3, #1
   1c1b8:	streq	r3, [sp, #12]
   1c1bc:	beq	1c1f0 <__assert_fail@plt+0x9aac>
   1c1c0:	ldr	r1, [pc, #2352]	; 1caf8 <__assert_fail@plt+0xa3b4>
   1c1c4:	mov	r0, fp
   1c1c8:	bl	12054 <strcmp@plt>
   1c1cc:	cmp	r0, #0
   1c1d0:	moveq	r3, #1
   1c1d4:	streq	r3, [sp, #20]
   1c1d8:	beq	1c1f0 <__assert_fail@plt+0x9aac>
   1c1dc:	mov	r0, fp
   1c1e0:	ldr	r1, [pc, #2324]	; 1cafc <__assert_fail@plt+0xa3b8>
   1c1e4:	bl	12054 <strcmp@plt>
   1c1e8:	cmp	r0, #0
   1c1ec:	moveq	r7, #1
   1c1f0:	ldr	r3, [r5, #16]!
   1c1f4:	add	ip, r6, #1
   1c1f8:	cmp	r3, #0
   1c1fc:	bne	1c17c <__assert_fail@plt+0x9a38>
   1c200:	cmp	r9, #0
   1c204:	addeq	ip, r6, #2
   1c208:	beq	1c470 <__assert_fail@plt+0x9d2c>
   1c20c:	ldr	r3, [sp, #12]
   1c210:	cmp	r3, #0
   1c214:	bne	1c230 <__assert_fail@plt+0x9aec>
   1c218:	add	r3, sp, #56	; 0x38
   1c21c:	ldr	lr, [sp, #16]
   1c220:	ldm	r3, {r0, r1, r2, r3}
   1c224:	add	lr, lr, ip, lsl #4
   1c228:	add	ip, ip, #1
   1c22c:	stm	lr, {r0, r1, r2, r3}
   1c230:	ldr	r3, [sp, #20]
   1c234:	cmp	r3, #0
   1c238:	bne	1c254 <__assert_fail@plt+0x9b10>
   1c23c:	add	r3, sp, #72	; 0x48
   1c240:	ldr	lr, [sp, #16]
   1c244:	ldm	r3, {r0, r1, r2, r3}
   1c248:	add	lr, lr, ip, lsl #4
   1c24c:	add	ip, ip, #1
   1c250:	stm	lr, {r0, r1, r2, r3}
   1c254:	cmp	r7, #0
   1c258:	addeq	r3, sp, #88	; 0x58
   1c25c:	ldreq	lr, [sp, #16]
   1c260:	ldmeq	r3, {r0, r1, r2, r3}
   1c264:	addeq	ip, lr, ip, lsl #4
   1c268:	stmeq	ip, {r0, r1, r2, r3}
   1c26c:	mov	r2, #0
   1c270:	mov	r1, r2
   1c274:	mov	r0, r4
   1c278:	bl	1b314 <__assert_fail@plt+0x8bd0>
   1c27c:	ldr	fp, [r4]
   1c280:	ldr	r9, [r4, #28]
   1c284:	ldr	r3, [r4, #4]
   1c288:	ldr	r8, [fp]
   1c28c:	mov	r1, fp
   1c290:	adds	r2, r8, #0
   1c294:	movne	r2, #1
   1c298:	cmp	r9, #0
   1c29c:	movne	r2, #0
   1c2a0:	cmp	r2, #0
   1c2a4:	ldr	r7, [r3]
   1c2a8:	mov	r2, r3
   1c2ac:	beq	1c2c8 <__assert_fail@plt+0x9b84>
   1c2b0:	ldr	r0, [r4, #8]
   1c2b4:	tst	r0, #16
   1c2b8:	bne	1c480 <__assert_fail@plt+0x9d3c>
   1c2bc:	sub	r8, r8, #1
   1c2c0:	add	r7, r7, #4
   1c2c4:	mov	r9, #1
   1c2c8:	cmp	r8, #0
   1c2cc:	beq	1c454 <__assert_fail@plt+0x9d10>
   1c2d0:	ldr	sl, [r4, #36]	; 0x24
   1c2d4:	ldr	r5, [r7]
   1c2d8:	cmp	sl, #0
   1c2dc:	str	r5, [r4, #40]	; 0x28
   1c2e0:	moveq	r1, #1
   1c2e4:	moveq	r0, sl
   1c2e8:	bne	1c328 <__assert_fail@plt+0x9be4>
   1c2ec:	ldrb	r2, [r5]
   1c2f0:	cmp	r2, #45	; 0x2d
   1c2f4:	beq	1c358 <__assert_fail@plt+0x9c14>
   1c2f8:	ldr	r6, [r4, #32]
   1c2fc:	cmp	r6, #0
   1c300:	bne	1c4b4 <__assert_fail@plt+0x9d70>
   1c304:	ldr	r2, [r4, #8]
   1c308:	tst	r2, #4
   1c30c:	bne	1c488 <__assert_fail@plt+0x9d44>
   1c310:	str	r1, [r4, #36]	; 0x24
   1c314:	ldr	r2, [r4, #36]	; 0x24
   1c318:	ldr	r5, [r7]
   1c31c:	cmp	r2, #0
   1c320:	str	r5, [r4, #40]	; 0x28
   1c324:	beq	1c2ec <__assert_fail@plt+0x9ba8>
   1c328:	ldr	r2, [r4, #8]
   1c32c:	ands	r2, r2, #2
   1c330:	streq	r2, [r4, #16]
   1c334:	moveq	r1, fp
   1c338:	moveq	r2, r3
   1c33c:	bne	1c488 <__assert_fail@plt+0x9d44>
   1c340:	str	r8, [r1]
   1c344:	str	r7, [r2]
   1c348:	ldr	r0, [r4, #16]
   1c34c:	str	r9, [r4, #28]
   1c350:	add	sp, sp, #108	; 0x6c
   1c354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c358:	ldrb	r2, [r5, #1]
   1c35c:	cmp	r2, #45	; 0x2d
   1c360:	beq	1c414 <__assert_fail@plt+0x9cd0>
   1c364:	cmp	r2, #0
   1c368:	beq	1c2f8 <__assert_fail@plt+0x9bb4>
   1c36c:	ldr	r2, [sp, #16]
   1c370:	ldr	r6, [r4, #32]
   1c374:	ldr	r2, [r2]
   1c378:	cmp	r6, #0
   1c37c:	str	r2, [sp, #20]
   1c380:	bne	1c4c0 <__assert_fail@plt+0x9d7c>
   1c384:	ldr	r1, [r4, #8]
   1c388:	mov	r2, #1
   1c38c:	tst	r1, #32
   1c390:	add	r1, r5, r2
   1c394:	str	r2, [r4, #32]
   1c398:	str	r1, [sp, #12]
   1c39c:	beq	1c610 <__assert_fail@plt+0x9ecc>
   1c3a0:	ldr	r0, [sp, #20]
   1c3a4:	cmp	r0, #0
   1c3a8:	beq	1c990 <__assert_fail@plt+0xa24c>
   1c3ac:	ldr	r2, [sp, #16]
   1c3b0:	str	sl, [sp, #28]
   1c3b4:	str	r5, [sp, #32]
   1c3b8:	str	r4, [sp, #24]
   1c3bc:	mov	r5, r6
   1c3c0:	mov	sl, r1
   1c3c4:	mov	r4, r2
   1c3c8:	mov	r6, r3
   1c3cc:	ldr	r0, [r4, #4]
   1c3d0:	cmp	r0, #0
   1c3d4:	beq	1c3e8 <__assert_fail@plt+0x9ca4>
   1c3d8:	mov	r1, sl
   1c3dc:	bl	12054 <strcmp@plt>
   1c3e0:	cmp	r0, #0
   1c3e4:	beq	1c580 <__assert_fail@plt+0x9e3c>
   1c3e8:	ldr	r1, [r4, #16]!
   1c3ec:	add	r5, r5, #1
   1c3f0:	cmp	r1, #0
   1c3f4:	bne	1c3cc <__assert_fail@plt+0x9c88>
   1c3f8:	ldr	r5, [sp, #32]
   1c3fc:	mov	r3, r6
   1c400:	ldr	sl, [sp, #28]
   1c404:	ldr	r4, [sp, #24]
   1c408:	ldrb	r1, [r5, #1]
   1c40c:	mov	r6, #1
   1c410:	b	1c4dc <__assert_fail@plt+0x9d98>
   1c414:	str	r0, [r4, #32]
   1c418:	ldrb	r2, [r5, #2]
   1c41c:	cmp	r2, #0
   1c420:	bne	1c674 <__assert_fail@plt+0x9f30>
   1c424:	ldr	r2, [r4, #8]
   1c428:	tst	r2, #8
   1c42c:	bne	1c778 <__assert_fail@plt+0xa034>
   1c430:	orr	r2, r2, #256	; 0x100
   1c434:	subs	r8, r8, #1
   1c438:	str	r2, [r4, #8]
   1c43c:	str	r1, [r4, #36]	; 0x24
   1c440:	add	r7, r7, #4
   1c444:	add	r9, r9, #1
   1c448:	bne	1c314 <__assert_fail@plt+0x9bd0>
   1c44c:	mov	r1, fp
   1c450:	mov	r2, r3
   1c454:	mov	r8, #0
   1c458:	str	r8, [r4, #16]
   1c45c:	b	1c340 <__assert_fail@plt+0x9bfc>
   1c460:	ldr	r5, [sp, #16]
   1c464:	mov	ip, #1
   1c468:	str	r7, [sp, #20]
   1c46c:	str	r7, [sp, #12]
   1c470:	add	r3, sp, #40	; 0x28
   1c474:	ldm	r3, {r0, r1, r2, r3}
   1c478:	stm	r5, {r0, r1, r2, r3}
   1c47c:	b	1c20c <__assert_fail@plt+0x9ac8>
   1c480:	mov	r9, #0
   1c484:	b	1c2d0 <__assert_fail@plt+0x9b8c>
   1c488:	mvn	ip, #0
   1c48c:	mov	r0, #2
   1c490:	str	r5, [r4, #24]
   1c494:	add	r8, r8, ip
   1c498:	add	r7, r7, #4
   1c49c:	add	r9, r9, #1
   1c4a0:	mov	r1, fp
   1c4a4:	mov	r2, r3
   1c4a8:	str	ip, [r4, #16]
   1c4ac:	str	r0, [r4, #20]
   1c4b0:	b	1c340 <__assert_fail@plt+0x9bfc>
   1c4b4:	ldr	r2, [sp, #16]
   1c4b8:	ldr	r2, [r2]
   1c4bc:	str	r2, [sp, #20]
   1c4c0:	add	r2, r5, r6
   1c4c4:	str	r2, [sp, #12]
   1c4c8:	ldr	r2, [sp, #20]
   1c4cc:	cmp	r2, #0
   1c4d0:	ldr	r2, [sp, #12]
   1c4d4:	ldrb	r1, [r2]
   1c4d8:	beq	1c998 <__assert_fail@plt+0xa254>
   1c4dc:	ldr	r2, [sp, #20]
   1c4e0:	mov	ip, r1
   1c4e4:	cmp	r1, r2
   1c4e8:	beq	1c9a0 <__assert_fail@plt+0xa25c>
   1c4ec:	ldr	r2, [sp, #16]
   1c4f0:	add	r2, r2, #16
   1c4f4:	b	1c504 <__assert_fail@plt+0x9dc0>
   1c4f8:	cmp	lr, r1
   1c4fc:	add	r2, r2, #16
   1c500:	beq	1c59c <__assert_fail@plt+0x9e58>
   1c504:	ldr	lr, [r2]
   1c508:	mov	r0, r2
   1c50c:	cmp	lr, #0
   1c510:	bne	1c4f8 <__assert_fail@plt+0x9db4>
   1c514:	cmp	r1, #63	; 0x3f
   1c518:	cmpne	r1, #104	; 0x68
   1c51c:	beq	1cae0 <__assert_fail@plt+0xa39c>
   1c520:	ldr	r2, [r0, #8]
   1c524:	ldr	r1, [sp, #12]
   1c528:	tst	r2, #128	; 0x80
   1c52c:	add	r6, r6, #1
   1c530:	mvnne	r2, #6
   1c534:	mvneq	r2, #1
   1c538:	str	r6, [r4, #32]
   1c53c:	str	r1, [r4, #24]
   1c540:	str	r2, [r4, #16]
   1c544:	ldr	r2, [sp, #12]
   1c548:	mov	r1, fp
   1c54c:	ldrb	r0, [r2, #1]
   1c550:	mov	r2, r3
   1c554:	cmp	r0, #0
   1c558:	andne	sl, sl, #1
   1c55c:	moveq	sl, #1
   1c560:	cmp	sl, #0
   1c564:	beq	1c340 <__assert_fail@plt+0x9bfc>
   1c568:	mov	r3, #0
   1c56c:	sub	r8, r8, #1
   1c570:	add	r7, r7, #4
   1c574:	add	r9, r9, #1
   1c578:	str	r3, [r4, #32]
   1c57c:	b	1c340 <__assert_fail@plt+0x9bfc>
   1c580:	ldr	r2, [sp, #16]
   1c584:	mov	r3, r6
   1c588:	ldr	r4, [sp, #24]
   1c58c:	mov	r6, #1
   1c590:	ldr	ip, [r2, r5, lsl #4]
   1c594:	add	r0, r2, r5, lsl #4
   1c598:	mov	sl, r6
   1c59c:	cmp	ip, #0
   1c5a0:	beq	1c628 <__assert_fail@plt+0x9ee4>
   1c5a4:	ldr	r1, [r0, #8]
   1c5a8:	str	ip, [r4, #16]
   1c5ac:	ands	r2, r1, #7
   1c5b0:	beq	1c618 <__assert_fail@plt+0x9ed4>
   1c5b4:	ldr	r2, [sp, #12]
   1c5b8:	eor	sl, sl, #1
   1c5bc:	ldrb	r0, [r2, #1]
   1c5c0:	cmp	r0, #0
   1c5c4:	andne	r0, sl, #1
   1c5c8:	moveq	r0, #0
   1c5cc:	cmp	r0, #0
   1c5d0:	bne	1c97c <__assert_fail@plt+0xa238>
   1c5d4:	ldr	r2, [r7, #4]
   1c5d8:	cmp	r2, #0
   1c5dc:	beq	1c634 <__assert_fail@plt+0x9ef0>
   1c5e0:	ldrb	ip, [r2]
   1c5e4:	cmp	ip, #45	; 0x2d
   1c5e8:	bne	1c658 <__assert_fail@plt+0x9f14>
   1c5ec:	ldrb	ip, [r2, #1]
   1c5f0:	cmp	ip, #0
   1c5f4:	beq	1c658 <__assert_fail@plt+0x9f14>
   1c5f8:	tst	r1, #8
   1c5fc:	beq	1c658 <__assert_fail@plt+0x9f14>
   1c600:	str	r0, [r4, #20]
   1c604:	mov	r1, fp
   1c608:	mov	r2, r3
   1c60c:	b	1c568 <__assert_fail@plt+0x9e24>
   1c610:	mov	r6, r2
   1c614:	b	1c4c8 <__assert_fail@plt+0x9d84>
   1c618:	add	r6, r6, #1
   1c61c:	str	r6, [r4, #32]
   1c620:	str	r2, [r4, #20]
   1c624:	b	1c544 <__assert_fail@plt+0x9e00>
   1c628:	ldr	r2, [sp, #12]
   1c62c:	ldrb	r1, [r2]
   1c630:	b	1c514 <__assert_fail@plt+0x9dd0>
   1c634:	tst	r1, #8
   1c638:	mvneq	r0, #2
   1c63c:	strne	r2, [r4, #20]
   1c640:	movne	r1, fp
   1c644:	movne	r2, r3
   1c648:	moveq	r1, fp
   1c64c:	moveq	r2, r3
   1c650:	streq	r0, [r4, #16]
   1c654:	b	1c568 <__assert_fail@plt+0x9e24>
   1c658:	mov	r0, r4
   1c65c:	bl	1b61c <__assert_fail@plt+0x8ed8>
   1c660:	sub	r8, r8, #1
   1c664:	add	r7, r7, #4
   1c668:	add	r9, r9, #1
   1c66c:	ldm	r4, {r1, r2}
   1c670:	b	1c568 <__assert_fail@plt+0x9e24>
   1c674:	add	r6, r5, #2
   1c678:	mov	r0, r6
   1c67c:	mov	r1, #61	; 0x3d
   1c680:	str	r3, [sp, #20]
   1c684:	bl	12408 <strchr@plt>
   1c688:	subs	r3, r0, #0
   1c68c:	str	r3, [sp, #12]
   1c690:	ldr	r3, [sp, #20]
   1c694:	bne	1c79c <__assert_fail@plt+0xa058>
   1c698:	ldr	r2, [sp, #16]
   1c69c:	ldr	r2, [r2]
   1c6a0:	cmp	r2, #0
   1c6a4:	str	r2, [sp, #20]
   1c6a8:	beq	1c754 <__assert_fail@plt+0xa010>
   1c6ac:	ldr	fp, [sp, #16]
   1c6b0:	add	r5, fp, #4
   1c6b4:	ldr	r0, [r5, sl, lsl #4]
   1c6b8:	cmp	r0, #0
   1c6bc:	beq	1c6d0 <__assert_fail@plt+0x9f8c>
   1c6c0:	mov	r1, r6
   1c6c4:	bl	12054 <strcmp@plt>
   1c6c8:	cmp	r0, #0
   1c6cc:	beq	1c898 <__assert_fail@plt+0xa154>
   1c6d0:	add	sl, sl, #1
   1c6d4:	ldr	r3, [fp, sl, lsl #4]
   1c6d8:	cmp	r3, #0
   1c6dc:	bne	1c6b4 <__assert_fail@plt+0x9f70>
   1c6e0:	mov	r0, r6
   1c6e4:	mov	fp, r3
   1c6e8:	bl	123e4 <strlen@plt>
   1c6ec:	str	r4, [sp, #24]
   1c6f0:	ldr	r5, [sp, #16]
   1c6f4:	ldr	r4, [sp, #20]
   1c6f8:	mov	sl, r0
   1c6fc:	str	r0, [sp, #28]
   1c700:	ldr	r0, [r5, #4]
   1c704:	cmp	r0, #0
   1c708:	beq	1c720 <__assert_fail@plt+0x9fdc>
   1c70c:	mov	r2, sl
   1c710:	mov	r1, r6
   1c714:	bl	126d8 <strncmp@plt>
   1c718:	cmp	r0, #0
   1c71c:	beq	1c7dc <__assert_fail@plt+0xa098>
   1c720:	ldr	r4, [r5, #16]!
   1c724:	add	fp, fp, #1
   1c728:	cmp	r4, #0
   1c72c:	bne	1c700 <__assert_fail@plt+0x9fbc>
   1c730:	ldr	r3, [sp, #12]
   1c734:	ldr	r4, [sp, #24]
   1c738:	cmp	r3, #0
   1c73c:	beq	1c74c <__assert_fail@plt+0xa008>
   1c740:	ldr	r2, [sp, #12]
   1c744:	mov	r3, #61	; 0x3d
   1c748:	strb	r3, [r2]
   1c74c:	ldr	fp, [r4]
   1c750:	ldr	r3, [r4, #4]
   1c754:	mvn	r2, #1
   1c758:	str	r6, [r4, #24]
   1c75c:	str	r2, [r4, #16]
   1c760:	sub	r8, r8, #1
   1c764:	add	r7, r7, #4
   1c768:	add	r9, r9, #1
   1c76c:	mov	r1, fp
   1c770:	mov	r2, r3
   1c774:	b	1c340 <__assert_fail@plt+0x9bfc>
   1c778:	add	r6, r5, #2
   1c77c:	mov	r0, r6
   1c780:	mov	r1, #61	; 0x3d
   1c784:	str	r3, [sp, #20]
   1c788:	bl	12408 <strchr@plt>
   1c78c:	subs	r3, r0, #0
   1c790:	str	r3, [sp, #12]
   1c794:	ldr	r3, [sp, #20]
   1c798:	beq	1c754 <__assert_fail@plt+0xa010>
   1c79c:	ldr	r2, [sp, #12]
   1c7a0:	mov	r3, #0
   1c7a4:	strb	r3, [r2]
   1c7a8:	ldrb	r3, [r5, #2]
   1c7ac:	cmp	r3, #0
   1c7b0:	moveq	r3, #61	; 0x3d
   1c7b4:	strbeq	r3, [r2]
   1c7b8:	ldreq	fp, [r4]
   1c7bc:	ldreq	r3, [r4, #4]
   1c7c0:	beq	1c754 <__assert_fail@plt+0xa010>
   1c7c4:	ldr	r3, [sp, #16]
   1c7c8:	ldr	r3, [r3]
   1c7cc:	cmp	r3, #0
   1c7d0:	str	r3, [sp, #20]
   1c7d4:	bne	1c6ac <__assert_fail@plt+0x9f68>
   1c7d8:	b	1c740 <__assert_fail@plt+0x9ffc>
   1c7dc:	ldr	r2, [sp, #16]
   1c7e0:	add	r3, fp, #1
   1c7e4:	mov	r0, r4
   1c7e8:	ldr	r1, [r2, r3, lsl #4]
   1c7ec:	lsl	r3, r3, #4
   1c7f0:	cmp	r1, #0
   1c7f4:	ldr	r4, [sp, #24]
   1c7f8:	add	sl, r2, r3
   1c7fc:	beq	1cad8 <__assert_fail@plt+0xa394>
   1c800:	sub	r3, r3, #16
   1c804:	add	r3, r2, r3
   1c808:	sub	r2, r3, sl
   1c80c:	add	r2, r2, #32
   1c810:	str	r7, [sp, #20]
   1c814:	str	r8, [sp, #24]
   1c818:	str	r9, [sp, #32]
   1c81c:	str	fp, [sp, #36]	; 0x24
   1c820:	ldr	r9, [sp, #28]
   1c824:	mov	r7, r3
   1c828:	str	r4, [sp, #28]
   1c82c:	mov	fp, r0
   1c830:	mov	r4, r1
   1c834:	mov	r8, r2
   1c838:	ldr	r0, [sl, #4]
   1c83c:	cmp	r0, #0
   1c840:	beq	1c870 <__assert_fail@plt+0xa12c>
   1c844:	mov	r2, r9
   1c848:	mov	r1, r6
   1c84c:	bl	126d8 <strncmp@plt>
   1c850:	cmp	r0, #0
   1c854:	bne	1c870 <__assert_fail@plt+0xa12c>
   1c858:	cmp	r4, fp
   1c85c:	bne	1ca50 <__assert_fail@plt+0xa30c>
   1c860:	ldr	r2, [sl, #8]
   1c864:	ldr	r3, [r5, #8]
   1c868:	cmp	r2, r3
   1c86c:	bne	1ca50 <__assert_fail@plt+0xa30c>
   1c870:	add	r7, r7, #16
   1c874:	ldr	r4, [r7, #16]
   1c878:	add	sl, sl, r8
   1c87c:	cmp	r4, #0
   1c880:	bne	1c838 <__assert_fail@plt+0xa0f4>
   1c884:	add	r4, sp, #28
   1c888:	ldr	r7, [sp, #20]
   1c88c:	ldm	r4, {r4, r9, fp}
   1c890:	ldr	r8, [sp, #24]
   1c894:	mov	sl, fp
   1c898:	ldr	r2, [sp, #12]
   1c89c:	cmp	r2, #0
   1c8a0:	movne	r3, #61	; 0x3d
   1c8a4:	strbne	r3, [r2]
   1c8a8:	cmp	sl, #0
   1c8ac:	beq	1c8e4 <__assert_fail@plt+0xa1a0>
   1c8b0:	ldr	r3, [sp, #16]
   1c8b4:	ldr	r3, [r3, sl, lsl #4]
   1c8b8:	cmp	r3, #32768	; 0x8000
   1c8bc:	beq	1cae0 <__assert_fail@plt+0xa39c>
   1c8c0:	ldr	r2, [pc, #568]	; 1cb00 <__assert_fail@plt+0xa3bc>
   1c8c4:	cmp	r3, r2
   1c8c8:	beq	1c938 <__assert_fail@plt+0xa1f4>
   1c8cc:	ldr	r2, [pc, #560]	; 1cb04 <__assert_fail@plt+0xa3c0>
   1c8d0:	cmp	r3, r2
   1c8d4:	beq	1ca2c <__assert_fail@plt+0xa2e8>
   1c8d8:	ldr	r2, [pc, #552]	; 1cb08 <__assert_fail@plt+0xa3c4>
   1c8dc:	cmp	r3, r2
   1c8e0:	beq	1c9ac <__assert_fail@plt+0xa268>
   1c8e4:	ldr	r3, [sp, #16]
   1c8e8:	add	r2, r3, sl, lsl #4
   1c8ec:	ldr	r3, [r3, sl, lsl #4]
   1c8f0:	ldr	r1, [r2, #8]
   1c8f4:	str	r3, [r4, #16]
   1c8f8:	tst	r1, #7
   1c8fc:	beq	1c950 <__assert_fail@plt+0xa20c>
   1c900:	ldr	r3, [sp, #12]
   1c904:	cmp	r3, #0
   1c908:	beq	1ca84 <__assert_fail@plt+0xa340>
   1c90c:	ldrb	r3, [r3, #1]
   1c910:	cmp	r3, #0
   1c914:	beq	1ca0c <__assert_fail@plt+0xa2c8>
   1c918:	ldr	r3, [sp, #12]
   1c91c:	adds	r2, r3, #1
   1c920:	beq	1ca0c <__assert_fail@plt+0xa2c8>
   1c924:	mov	r0, r4
   1c928:	bl	1b61c <__assert_fail@plt+0x8ed8>
   1c92c:	ldr	fp, [r4]
   1c930:	ldr	r3, [r4, #4]
   1c934:	b	1c760 <__assert_fail@plt+0xa01c>
   1c938:	ldr	r3, [r4, #8]
   1c93c:	ands	r5, r3, #64	; 0x40
   1c940:	bne	1c8e4 <__assert_fail@plt+0xa1a0>
   1c944:	bl	1b994 <__assert_fail@plt+0x9250>
   1c948:	mov	r0, r5
   1c94c:	bl	123c0 <exit@plt>
   1c950:	ldr	r3, [sp, #12]
   1c954:	cmp	r3, #0
   1c958:	mvnne	r3, #5
   1c95c:	ldreq	r2, [sp, #12]
   1c960:	strne	r3, [r4, #20]
   1c964:	ldrne	fp, [r4]
   1c968:	ldrne	r3, [r4, #4]
   1c96c:	ldreq	fp, [r4]
   1c970:	ldreq	r3, [r4, #4]
   1c974:	streq	r2, [r4, #20]
   1c978:	b	1c760 <__assert_fail@plt+0xa01c>
   1c97c:	add	r2, r2, #1
   1c980:	mov	r0, r4
   1c984:	bl	1b61c <__assert_fail@plt+0x8ed8>
   1c988:	ldm	r4, {r1, r2}
   1c98c:	b	1c568 <__assert_fail@plt+0x9e24>
   1c990:	ldrb	r1, [r5, #1]
   1c994:	mov	r6, r2
   1c998:	ldr	r0, [sp, #16]
   1c99c:	b	1c514 <__assert_fail@plt+0x9dd0>
   1c9a0:	ldr	r0, [sp, #16]
   1c9a4:	ldr	ip, [sp, #20]
   1c9a8:	b	1c5a4 <__assert_fail@plt+0x9e60>
   1c9ac:	ldr	r3, [sp, #16]
   1c9b0:	ldr	r3, [r3]
   1c9b4:	cmp	r3, #0
   1c9b8:	beq	1ca04 <__assert_fail@plt+0xa2c0>
   1c9bc:	ldr	r6, [pc, #328]	; 1cb0c <__assert_fail@plt+0xa3c8>
   1c9c0:	ldr	r5, [pc, #328]	; 1cb10 <__assert_fail@plt+0xa3cc>
   1c9c4:	ldr	r4, [sp, #16]
   1c9c8:	b	1c9d8 <__assert_fail@plt+0xa294>
   1c9cc:	ldr	r3, [r4, #16]!
   1c9d0:	cmp	r3, #0
   1c9d4:	beq	1ca04 <__assert_fail@plt+0xa2c0>
   1c9d8:	ldr	r2, [r4, #4]
   1c9dc:	cmp	r2, #0
   1c9e0:	beq	1c9cc <__assert_fail@plt+0xa288>
   1c9e4:	ldr	r3, [r4, #8]
   1c9e8:	ands	r0, r3, #64	; 0x40
   1c9ec:	bne	1c9cc <__assert_fail@plt+0xa288>
   1c9f0:	str	r0, [sp]
   1c9f4:	mov	r3, r6
   1c9f8:	mov	r1, r5
   1c9fc:	bl	1b744 <__assert_fail@plt+0x9000>
   1ca00:	b	1c9cc <__assert_fail@plt+0xa288>
   1ca04:	mov	r0, #0
   1ca08:	bl	123c0 <exit@plt>
   1ca0c:	tst	r1, #8
   1ca10:	movne	r3, #0
   1ca14:	mvneq	r3, #2
   1ca18:	strne	r3, [r4, #20]
   1ca1c:	streq	r3, [r4, #16]
   1ca20:	ldr	fp, [r4]
   1ca24:	ldr	r3, [r4, #4]
   1ca28:	b	1c760 <__assert_fail@plt+0xa01c>
   1ca2c:	mov	r0, #16
   1ca30:	bl	1b878 <__assert_fail@plt+0x9134>
   1ca34:	mov	r3, #0
   1ca38:	ldr	r2, [pc, #204]	; 1cb0c <__assert_fail@plt+0xa3c8>
   1ca3c:	mov	r1, r0
   1ca40:	mov	r0, r3
   1ca44:	bl	1b744 <__assert_fail@plt+0x9000>
   1ca48:	mov	r0, #0
   1ca4c:	bl	123c0 <exit@plt>
   1ca50:	ldr	r2, [sp, #12]
   1ca54:	ldr	r4, [sp, #28]
   1ca58:	cmp	r2, #0
   1ca5c:	movne	r3, #61	; 0x3d
   1ca60:	strbne	r3, [r2]
   1ca64:	mvn	r3, #7
   1ca68:	str	r3, [r4, #16]
   1ca6c:	ldr	r7, [sp, #20]
   1ca70:	ldr	r8, [sp, #24]
   1ca74:	ldr	r9, [sp, #32]
   1ca78:	ldr	fp, [r4]
   1ca7c:	ldr	r3, [r4, #4]
   1ca80:	b	1c760 <__assert_fail@plt+0xa01c>
   1ca84:	ldr	r2, [r7, #4]
   1ca88:	cmp	r2, #0
   1ca8c:	beq	1ca0c <__assert_fail@plt+0xa2c8>
   1ca90:	ldrb	r3, [r2]
   1ca94:	cmp	r3, #45	; 0x2d
   1ca98:	beq	1cabc <__assert_fail@plt+0xa378>
   1ca9c:	mov	r0, r4
   1caa0:	bl	1b61c <__assert_fail@plt+0x8ed8>
   1caa4:	sub	r8, r8, #1
   1caa8:	add	r7, r7, #4
   1caac:	add	r9, r9, #1
   1cab0:	ldr	fp, [r4]
   1cab4:	ldr	r3, [r4, #4]
   1cab8:	b	1c760 <__assert_fail@plt+0xa01c>
   1cabc:	tst	r1, #8
   1cac0:	beq	1ca9c <__assert_fail@plt+0xa358>
   1cac4:	ldr	r3, [sp, #12]
   1cac8:	ldr	fp, [r4]
   1cacc:	str	r3, [r4, #20]
   1cad0:	ldr	r3, [r4, #4]
   1cad4:	b	1c760 <__assert_fail@plt+0xa01c>
   1cad8:	mov	sl, fp
   1cadc:	b	1c898 <__assert_fail@plt+0xa154>
   1cae0:	ldr	r1, [r4, #8]
   1cae4:	ldr	r0, [sp, #16]
   1cae8:	bl	1baf0 <__assert_fail@plt+0x93ac>
   1caec:	ldrdeq	r8, [r2], -r4
   1caf0:	andeq	r8, r2, r8, lsr #31
   1caf4:			; <UNDEFINED> instruction: 0x00028fb0
   1caf8:			; <UNDEFINED> instruction: 0x00028fb8
   1cafc:	andeq	r8, r2, r4, asr #31
   1cb00:	andeq	r8, r0, r1
   1cb04:	andeq	r8, r0, r2
   1cb08:	andeq	r8, r0, r3
   1cb0c:	muleq	r2, r8, r3
   1cb10:	ldrdeq	r8, [r2], -r4
   1cb14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb18:	cmp	r0, #0
   1cb1c:	sub	sp, sp, #252	; 0xfc
   1cb20:	stm	sp, {r0, r3}
   1cb24:	ldr	r3, [pc, #2536]	; 1d514 <__assert_fail@plt+0xadd0>
   1cb28:	ldr	r3, [r3]
   1cb2c:	str	r3, [sp, #244]	; 0xf4
   1cb30:	ldr	r3, [sp, #288]	; 0x120
   1cb34:	str	r3, [sp, #8]
   1cb38:	beq	1cf30 <__assert_fail@plt+0xa7ec>
   1cb3c:	mov	fp, r2
   1cb40:	ldr	r0, [sp, #4]
   1cb44:	bl	1b314 <__assert_fail@plt+0x8bd0>
   1cb48:	ldr	r3, [fp]
   1cb4c:	cmp	r3, #0
   1cb50:	beq	1ce68 <__assert_fail@plt+0xa724>
   1cb54:	mov	sl, #0
   1cb58:	mov	r3, #0
   1cb5c:	mov	r4, r3
   1cb60:	mov	r6, r3
   1cb64:	mov	r8, r3
   1cb68:	str	r3, [sp, #20]
   1cb6c:	str	r3, [sp, #16]
   1cb70:	str	r3, [sp, #12]
   1cb74:	cmp	sl, #0
   1cb78:	beq	1cbe4 <__assert_fail@plt+0xa4a0>
   1cb7c:	rsb	r3, sl, #3
   1cb80:	add	r2, sp, #248	; 0xf8
   1cb84:	add	r3, r2, r3, lsl #2
   1cb88:	sub	sl, sl, #1
   1cb8c:	ldr	r9, [r3, #-216]	; 0xffffff28
   1cb90:	cmn	r9, #1
   1cb94:	cmpne	r9, #10
   1cb98:	bne	1cbfc <__assert_fail@plt+0xa4b8>
   1cb9c:	cmn	r9, #1
   1cba0:	ldrne	r3, [fp]
   1cba4:	addne	r3, r3, #1
   1cba8:	strne	r3, [fp]
   1cbac:	cmn	r4, #1
   1cbb0:	beq	1cf24 <__assert_fail@plt+0xa7e0>
   1cbb4:	cmp	r4, #2
   1cbb8:	beq	1cc98 <__assert_fail@plt+0xa554>
   1cbbc:	cmp	r4, #3
   1cbc0:	beq	1cf44 <__assert_fail@plt+0xa800>
   1cbc4:	cmp	r4, #4
   1cbc8:	beq	1cf78 <__assert_fail@plt+0xa834>
   1cbcc:	cmn	r9, #1
   1cbd0:	beq	1d010 <__assert_fail@plt+0xa8cc>
   1cbd4:	mov	r8, #0
   1cbd8:	cmp	sl, #0
   1cbdc:	mov	r4, r8
   1cbe0:	bne	1cb7c <__assert_fail@plt+0xa438>
   1cbe4:	ldr	r0, [sp]
   1cbe8:	bl	126f0 <getc@plt>
   1cbec:	mov	r9, r0
   1cbf0:	cmn	r9, #1
   1cbf4:	cmpne	r9, #10
   1cbf8:	beq	1cb9c <__assert_fail@plt+0xa458>
   1cbfc:	cmn	r4, #1
   1cc00:	beq	1cb74 <__assert_fail@plt+0xa430>
   1cc04:	cmp	r4, #0
   1cc08:	beq	1cc3c <__assert_fail@plt+0xa4f8>
   1cc0c:	cmp	r4, #1
   1cc10:	beq	1cb74 <__assert_fail@plt+0xa430>
   1cc14:	cmp	r4, #2
   1cc18:	beq	1cd18 <__assert_fail@plt+0xa5d4>
   1cc1c:	cmp	r4, #3
   1cc20:	bne	1ce34 <__assert_fail@plt+0xa6f0>
   1cc24:	bics	r3, r9, #127	; 0x7f
   1cc28:	beq	1ce10 <__assert_fail@plt+0xa6cc>
   1cc2c:	strb	r9, [sp, #44]	; 0x2c
   1cc30:	mov	r8, #1
   1cc34:	mov	r4, #4
   1cc38:	b	1cb74 <__assert_fail@plt+0xa430>
   1cc3c:	bics	r4, r9, #127	; 0x7f
   1cc40:	beq	1cc70 <__assert_fail@plt+0xa52c>
   1cc44:	cmp	r8, #98	; 0x62
   1cc48:	addle	r3, sp, #248	; 0xf8
   1cc4c:	ldrgt	r2, [sp, #4]
   1cc50:	addle	r3, r3, r8
   1cc54:	mvngt	r3, #3
   1cc58:	strgt	r3, [r2, #16]
   1cc5c:	mvngt	r4, #0
   1cc60:	strble	r9, [r3, #-204]	; 0xffffff34
   1cc64:	addle	r8, r8, #1
   1cc68:	movle	r4, #2
   1cc6c:	b	1cb74 <__assert_fail@plt+0xa430>
   1cc70:	bl	12390 <__ctype_b_loc@plt>
   1cc74:	lsl	r3, r9, #1
   1cc78:	ldr	r2, [r0]
   1cc7c:	ldrh	r3, [r2, r3]
   1cc80:	tst	r3, #8192	; 0x2000
   1cc84:	bne	1cb74 <__assert_fail@plt+0xa430>
   1cc88:	cmp	r9, #35	; 0x23
   1cc8c:	bne	1cc44 <__assert_fail@plt+0xa500>
   1cc90:	mov	r4, #1
   1cc94:	b	1cb74 <__assert_fail@plt+0xa430>
   1cc98:	ldr	r5, [sp, #8]
   1cc9c:	add	r3, sp, #248	; 0xf8
   1cca0:	mov	r6, #0
   1cca4:	ldr	r4, [r5]
   1cca8:	add	r8, r3, r8
   1ccac:	cmp	r4, r6
   1ccb0:	strb	r6, [r8, #-204]	; 0xffffff34
   1ccb4:	beq	1d08c <__assert_fail@plt+0xa948>
   1ccb8:	ldr	r0, [r5, #4]
   1ccbc:	cmp	r0, #0
   1ccc0:	beq	1ccd4 <__assert_fail@plt+0xa590>
   1ccc4:	add	r1, sp, #44	; 0x2c
   1ccc8:	bl	12054 <strcmp@plt>
   1cccc:	cmp	r0, #0
   1ccd0:	beq	1cda4 <__assert_fail@plt+0xa660>
   1ccd4:	ldr	r4, [r5, #16]!
   1ccd8:	add	r6, r6, #1
   1ccdc:	cmp	r4, #0
   1cce0:	bne	1ccb8 <__assert_fail@plt+0xa574>
   1cce4:	ldr	r5, [r5, #8]
   1cce8:	ldr	r3, [sp, #4]
   1ccec:	tst	r5, #64	; 0x40
   1ccf0:	str	r4, [r3, #16]
   1ccf4:	bne	1cd10 <__assert_fail@plt+0xa5cc>
   1ccf8:	add	r8, sp, #44	; 0x2c
   1ccfc:	mov	r0, r8
   1cd00:	ldr	r1, [pc, #2064]	; 1d518 <__assert_fail@plt+0xadd4>
   1cd04:	bl	12054 <strcmp@plt>
   1cd08:	subs	r4, r0, #0
   1cd0c:	bne	1cdd0 <__assert_fail@plt+0xa68c>
   1cd10:	mov	r8, r4
   1cd14:	b	1cb74 <__assert_fail@plt+0xa430>
   1cd18:	bics	r5, r9, #127	; 0x7f
   1cd1c:	bne	1cc44 <__assert_fail@plt+0xa500>
   1cd20:	bl	12390 <__ctype_b_loc@plt>
   1cd24:	lsl	r3, r9, #1
   1cd28:	ldr	r2, [r0]
   1cd2c:	mov	r7, r0
   1cd30:	ldrh	r3, [r2, r3]
   1cd34:	tst	r3, #8192	; 0x2000
   1cd38:	beq	1cc44 <__assert_fail@plt+0xa500>
   1cd3c:	ldr	r4, [sp, #8]
   1cd40:	add	r3, sp, #248	; 0xf8
   1cd44:	add	r3, r3, r8
   1cd48:	ldr	r8, [r4]
   1cd4c:	strb	r5, [r3, #-204]	; 0xffffff34
   1cd50:	cmp	r8, #0
   1cd54:	beq	1d198 <__assert_fail@plt+0xaa54>
   1cd58:	ldr	r0, [r4, #4]
   1cd5c:	cmp	r0, #0
   1cd60:	beq	1cd74 <__assert_fail@plt+0xa630>
   1cd64:	add	r1, sp, #44	; 0x2c
   1cd68:	bl	12054 <strcmp@plt>
   1cd6c:	cmp	r0, #0
   1cd70:	beq	1d16c <__assert_fail@plt+0xaa28>
   1cd74:	ldr	r8, [r4, #16]!
   1cd78:	add	r5, r5, #1
   1cd7c:	cmp	r8, #0
   1cd80:	bne	1cd58 <__assert_fail@plt+0xa614>
   1cd84:	ldr	r6, [r4, #8]
   1cd88:	ldr	r3, [sp, #4]
   1cd8c:	tst	r6, #64	; 0x40
   1cd90:	str	r8, [r3, #16]
   1cd94:	beq	1d1b0 <__assert_fail@plt+0xaa6c>
   1cd98:	mov	r6, r5
   1cd9c:	mov	r8, r5
   1cda0:	b	1cc90 <__assert_fail@plt+0xa54c>
   1cda4:	ldr	r2, [r5, #8]
   1cda8:	ldr	r3, [sp, #4]
   1cdac:	ands	r1, r2, #64	; 0x40
   1cdb0:	mov	r8, r0
   1cdb4:	str	r4, [r3, #16]
   1cdb8:	bne	1cbd8 <__assert_fail@plt+0xa494>
   1cdbc:	ands	r3, r2, #7
   1cdc0:	bne	1d3d8 <__assert_fail@plt+0xac94>
   1cdc4:	ldr	r2, [sp, #4]
   1cdc8:	str	r3, [r2, #20]
   1cdcc:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1cdd0:	ldr	r3, [sp, #4]
   1cdd4:	ldr	r7, [r3, #52]	; 0x34
   1cdd8:	cmp	r7, #0
   1cddc:	bne	1cdf0 <__assert_fail@plt+0xa6ac>
   1cde0:	b	1cef0 <__assert_fail@plt+0xa7ac>
   1cde4:	ldr	r7, [r7]
   1cde8:	cmp	r7, #0
   1cdec:	beq	1cef0 <__assert_fail@plt+0xa7ac>
   1cdf0:	mov	r1, r8
   1cdf4:	add	r0, r7, #4
   1cdf8:	bl	12054 <strcmp@plt>
   1cdfc:	cmp	r0, #0
   1ce00:	bne	1cde4 <__assert_fail@plt+0xa6a0>
   1ce04:	mov	r4, r0
   1ce08:	mov	r8, r4
   1ce0c:	b	1cb74 <__assert_fail@plt+0xa430>
   1ce10:	bl	12390 <__ctype_b_loc@plt>
   1ce14:	lsl	r3, r9, #1
   1ce18:	ldr	r2, [r0]
   1ce1c:	ldrh	r3, [r2, r3]
   1ce20:	tst	r3, #8192	; 0x2000
   1ce24:	strbeq	r9, [sp, #44]	; 0x2c
   1ce28:	moveq	r8, #1
   1ce2c:	moveq	r4, #4
   1ce30:	b	1cb74 <__assert_fail@plt+0xa430>
   1ce34:	cmp	r4, #4
   1ce38:	bne	1cc44 <__assert_fail@plt+0xa500>
   1ce3c:	ldr	r2, [sp, #12]
   1ce40:	mov	r5, r8
   1ce44:	cmp	r2, #0
   1ce48:	beq	1d058 <__assert_fail@plt+0xa914>
   1ce4c:	ldr	r3, [sp, #16]
   1ce50:	sub	r3, r3, #1
   1ce54:	cmp	r3, r8
   1ce58:	bls	1cec0 <__assert_fail@plt+0xa77c>
   1ce5c:	add	r8, r8, #1
   1ce60:	strb	r9, [r2, r5]
   1ce64:	b	1cb74 <__assert_fail@plt+0xa430>
   1ce68:	ldr	r6, [sp]
   1ce6c:	mov	r0, r6
   1ce70:	bl	126f0 <getc@plt>
   1ce74:	mov	r4, r0
   1ce78:	mov	r0, r6
   1ce7c:	str	r4, [sp, #32]
   1ce80:	bl	126f0 <getc@plt>
   1ce84:	mov	r5, r0
   1ce88:	mov	r0, r6
   1ce8c:	str	r5, [sp, #36]	; 0x24
   1ce90:	bl	126f0 <getc@plt>
   1ce94:	cmp	r5, #187	; 0xbb
   1ce98:	cmpeq	r4, #239	; 0xef
   1ce9c:	movne	r4, #1
   1cea0:	moveq	r4, #0
   1cea4:	cmp	r0, #191	; 0xbf
   1cea8:	orrne	r4, r4, #1
   1ceac:	cmp	r4, #0
   1ceb0:	str	r0, [sp, #40]	; 0x28
   1ceb4:	movne	sl, #3
   1ceb8:	bne	1cb58 <__assert_fail@plt+0xa414>
   1cebc:	b	1cb54 <__assert_fail@plt+0xa410>
   1cec0:	ldr	r3, [sp, #16]
   1cec4:	ldr	r0, [sp, #12]
   1cec8:	add	r3, r3, #50	; 0x32
   1cecc:	mov	r1, r3
   1ced0:	str	r3, [sp, #16]
   1ced4:	bl	12540 <gcry_realloc@plt>
   1ced8:	cmp	r0, #0
   1cedc:	beq	1d4a0 <__assert_fail@plt+0xad5c>
   1cee0:	add	r8, r8, #1
   1cee4:	strb	r9, [r0, r5]
   1cee8:	str	r0, [sp, #12]
   1ceec:	b	1cb74 <__assert_fail@plt+0xa430>
   1cef0:	ldr	r3, [sp, #4]
   1cef4:	tst	r5, #128	; 0x80
   1cef8:	mvnne	r4, #6
   1cefc:	mvneq	r4, #1
   1cf00:	str	r4, [r3, #16]
   1cf04:	ldr	r3, [pc, #1544]	; 1d514 <__assert_fail@plt+0xadd0>
   1cf08:	ldr	r2, [sp, #244]	; 0xf4
   1cf0c:	mov	r0, r4
   1cf10:	ldr	r3, [r3]
   1cf14:	cmp	r2, r3
   1cf18:	bne	1d4e0 <__assert_fail@plt+0xad9c>
   1cf1c:	add	sp, sp, #252	; 0xfc
   1cf20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf24:	ldr	r3, [sp, #4]
   1cf28:	ldr	r4, [r3, #16]
   1cf2c:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1cf30:	mov	r1, r3
   1cf34:	ldr	r0, [sp, #4]
   1cf38:	bl	1c0f8 <__assert_fail@plt+0x99b4>
   1cf3c:	mov	r4, r0
   1cf40:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1cf44:	ldr	r3, [sp, #20]
   1cf48:	cmp	r3, #0
   1cf4c:	bne	1d07c <__assert_fail@plt+0xa938>
   1cf50:	ldr	r3, [sp, #8]
   1cf54:	add	r6, r3, r6, lsl #4
   1cf58:	ldr	r3, [r6, #8]
   1cf5c:	tst	r3, #7
   1cf60:	bne	1d074 <__assert_fail@plt+0xa930>
   1cf64:	ldr	r2, [sp, #4]
   1cf68:	mov	r3, #0
   1cf6c:	str	r3, [r2, #20]
   1cf70:	ldr	r4, [r2, #16]
   1cf74:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1cf78:	ldr	r3, [sp, #20]
   1cf7c:	cmp	r3, #0
   1cf80:	beq	1cfec <__assert_fail@plt+0xa8a8>
   1cf84:	ldr	r3, [sp, #12]
   1cf88:	cmp	r3, #0
   1cf8c:	beq	1d000 <__assert_fail@plt+0xa8bc>
   1cf90:	ldr	r3, [sp, #12]
   1cf94:	mov	r6, #0
   1cf98:	ldr	r1, [pc, #1404]	; 1d51c <__assert_fail@plt+0xadd8>
   1cf9c:	strb	r6, [r3, r8]
   1cfa0:	mov	r0, r3
   1cfa4:	bl	12660 <strpbrk@plt>
   1cfa8:	subs	r5, r0, #0
   1cfac:	beq	1cfd4 <__assert_fail@plt+0xa890>
   1cfb0:	mov	r4, r5
   1cfb4:	strb	r6, [r4], #1
   1cfb8:	mov	r0, r4
   1cfbc:	bl	1a310 <__assert_fail@plt+0x7bcc>
   1cfc0:	cmp	r4, r6
   1cfc4:	beq	1cfd4 <__assert_fail@plt+0xa890>
   1cfc8:	ldrb	r3, [r5, #1]
   1cfcc:	cmp	r3, r6
   1cfd0:	bne	1cf24 <__assert_fail@plt+0xa7e0>
   1cfd4:	ldr	r0, [sp, #12]
   1cfd8:	bl	12150 <gcry_free@plt>
   1cfdc:	ldr	r3, [sp, #4]
   1cfe0:	mvn	r4, #9
   1cfe4:	str	r4, [r3, #16]
   1cfe8:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1cfec:	ldr	r3, [sp, #8]
   1cff0:	add	r6, r3, r6, lsl #4
   1cff4:	ldr	r3, [r6, #8]
   1cff8:	tst	r3, #7
   1cffc:	bne	1d0e0 <__assert_fail@plt+0xa99c>
   1d000:	ldr	r3, [sp, #4]
   1d004:	mvn	r4, #5
   1d008:	str	r4, [r3, #16]
   1d00c:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d010:	ldr	r3, [sp, #4]
   1d014:	ldr	r0, [r3, #52]	; 0x34
   1d018:	cmp	r0, #0
   1d01c:	beq	1d030 <__assert_fail@plt+0xa8ec>
   1d020:	ldr	r4, [r0]
   1d024:	bl	12150 <gcry_free@plt>
   1d028:	subs	r0, r4, #0
   1d02c:	bne	1d020 <__assert_fail@plt+0xa8dc>
   1d030:	ldm	sp, {r0, r2}
   1d034:	mov	r3, #0
   1d038:	str	r3, [r2, #52]	; 0x34
   1d03c:	bl	12108 <ferror@plt>
   1d040:	subs	r4, r0, #0
   1d044:	beq	1d0d4 <__assert_fail@plt+0xa990>
   1d048:	ldr	r3, [sp, #4]
   1d04c:	mvn	r4, #4
   1d050:	str	r4, [r3, #16]
   1d054:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d058:	cmp	r8, #98	; 0x62
   1d05c:	bgt	1d134 <__assert_fail@plt+0xa9f0>
   1d060:	add	r3, sp, #248	; 0xf8
   1d064:	add	r3, r3, r8
   1d068:	add	r8, r8, #1
   1d06c:	strb	r9, [r3, #-204]	; 0xffffff34
   1d070:	b	1cb74 <__assert_fail@plt+0xa430>
   1d074:	tst	r3, #8
   1d078:	bne	1cf64 <__assert_fail@plt+0xa820>
   1d07c:	ldr	r3, [sp, #4]
   1d080:	mvn	r4, #2
   1d084:	str	r4, [r3, #16]
   1d088:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d08c:	ldr	r3, [sp, #8]
   1d090:	mov	r6, r4
   1d094:	ldr	r5, [r3, #8]
   1d098:	ldr	r3, [sp, #4]
   1d09c:	tst	r5, #64	; 0x40
   1d0a0:	str	r4, [r3, #16]
   1d0a4:	beq	1ccf8 <__assert_fail@plt+0xa5b4>
   1d0a8:	b	1cd10 <__assert_fail@plt+0xa5cc>
   1d0ac:	add	r3, sp, #248	; 0xf8
   1d0b0:	add	r8, r3, r8
   1d0b4:	ldr	r3, [sp, #12]
   1d0b8:	add	r0, sp, #44	; 0x2c
   1d0bc:	strb	r3, [r8, #-204]	; 0xffffff34
   1d0c0:	bl	12714 <gcry_strdup@plt>
   1d0c4:	subs	r3, r0, #0
   1d0c8:	str	r3, [sp, #12]
   1d0cc:	bne	1d0f8 <__assert_fail@plt+0xa9b4>
   1d0d0:	mvn	r4, #10
   1d0d4:	ldr	r3, [sp, #4]
   1d0d8:	str	r4, [r3, #16]
   1d0dc:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d0e0:	ldr	r3, [sp, #12]
   1d0e4:	cmp	r3, #0
   1d0e8:	beq	1d0ac <__assert_fail@plt+0xa968>
   1d0ec:	ldr	r3, [sp, #12]
   1d0f0:	ldr	r2, [sp, #20]
   1d0f4:	strb	r2, [r3, r8]
   1d0f8:	ldr	r4, [sp, #12]
   1d0fc:	mov	r0, r4
   1d100:	bl	1a310 <__assert_fail@plt+0x7bcc>
   1d104:	ldrb	r3, [r4]
   1d108:	cmp	r3, #34	; 0x22
   1d10c:	beq	1d400 <__assert_fail@plt+0xacbc>
   1d110:	mov	r2, r4
   1d114:	ldr	r4, [sp, #4]
   1d118:	ldr	r1, [r6, #8]
   1d11c:	mov	r0, r4
   1d120:	bl	1b61c <__assert_fail@plt+0x8ed8>
   1d124:	cmp	r0, #0
   1d128:	beq	1d3ec <__assert_fail@plt+0xaca8>
   1d12c:	ldr	r4, [r4, #16]
   1d130:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d134:	mov	r0, #150	; 0x96
   1d138:	bl	1200c <gcry_malloc@plt>
   1d13c:	subs	r7, r0, #0
   1d140:	str	r7, [sp, #12]
   1d144:	beq	1d0d0 <__assert_fail@plt+0xa98c>
   1d148:	mov	r2, r8
   1d14c:	add	r1, sp, #44	; 0x2c
   1d150:	mov	r0, r7
   1d154:	bl	1212c <memcpy@plt>
   1d158:	mov	r3, #150	; 0x96
   1d15c:	add	r8, r8, #1
   1d160:	str	r3, [sp, #16]
   1d164:	strb	r9, [r7, r5]
   1d168:	b	1cb74 <__assert_fail@plt+0xa430>
   1d16c:	ldr	r3, [r4, #8]
   1d170:	ldr	r2, [sp, #4]
   1d174:	tst	r3, #64	; 0x40
   1d178:	moveq	r6, r5
   1d17c:	str	r8, [r2, #16]
   1d180:	moveq	r4, #3
   1d184:	mov	r8, r5
   1d188:	beq	1cb74 <__assert_fail@plt+0xa430>
   1d18c:	mov	r6, r8
   1d190:	mov	r4, #1
   1d194:	b	1cb74 <__assert_fail@plt+0xa430>
   1d198:	ldr	r3, [sp, #8]
   1d19c:	ldr	r6, [r3, #8]
   1d1a0:	ldr	r3, [sp, #4]
   1d1a4:	tst	r6, #64	; 0x40
   1d1a8:	str	r8, [r3, #16]
   1d1ac:	bne	1d18c <__assert_fail@plt+0xaa48>
   1d1b0:	add	r8, sp, #44	; 0x2c
   1d1b4:	mov	r0, r8
   1d1b8:	ldr	r1, [pc, #864]	; 1d520 <__assert_fail@plt+0xaddc>
   1d1bc:	bl	12054 <strcmp@plt>
   1d1c0:	cmp	r0, #0
   1d1c4:	beq	1d3c0 <__assert_fail@plt+0xac7c>
   1d1c8:	ldr	r1, [pc, #840]	; 1d518 <__assert_fail@plt+0xadd4>
   1d1cc:	mov	r0, r8
   1d1d0:	bl	12054 <strcmp@plt>
   1d1d4:	subs	r4, r0, #0
   1d1d8:	bne	1d44c <__assert_fail@plt+0xad08>
   1d1dc:	ldr	r0, [sp]
   1d1e0:	bl	126f0 <getc@plt>
   1d1e4:	ldr	r8, [r7]
   1d1e8:	str	r4, [sp, #28]
   1d1ec:	cmn	r0, #1
   1d1f0:	cmpne	r0, #10
   1d1f4:	moveq	r3, #1
   1d1f8:	movne	r3, #0
   1d1fc:	cmp	r3, #0
   1d200:	mov	r6, r0
   1d204:	movne	r6, #10
   1d208:	movne	r3, #1
   1d20c:	moveq	r3, #0
   1d210:	str	r3, [sp, #24]
   1d214:	lsl	r3, r6, #1
   1d218:	bics	r2, r6, #127	; 0x7f
   1d21c:	ldrh	r3, [r8, r3]
   1d220:	and	r3, r3, #8192	; 0x2000
   1d224:	bne	1d39c <__assert_fail@plt+0xac58>
   1d228:	cmp	r3, #0
   1d22c:	bne	1d2e0 <__assert_fail@plt+0xab9c>
   1d230:	mov	r3, #1
   1d234:	ldr	r4, [sp, #24]
   1d238:	mov	r8, r3
   1d23c:	mov	r0, r6
   1d240:	add	r3, sp, #248	; 0xf8
   1d244:	add	r2, r3, r2
   1d248:	cmp	r4, #0
   1d24c:	strb	r0, [r2, #-104]	; 0xffffff98
   1d250:	bne	1d4f8 <__assert_fail@plt+0xadb4>
   1d254:	ldr	r0, [sp]
   1d258:	bl	126f0 <getc@plt>
   1d25c:	cmn	r0, #1
   1d260:	cmpne	r0, #10
   1d264:	bne	1d4f0 <__assert_fail@plt+0xadac>
   1d268:	mov	r3, #20
   1d26c:	mov	r4, #1
   1d270:	mov	r0, #10
   1d274:	ldr	r2, [r7]
   1d278:	ldrh	r3, [r2, r3]
   1d27c:	tst	r3, #8192	; 0x2000
   1d280:	bne	1d314 <__assert_fail@plt+0xabd0>
   1d284:	cmp	r8, #98	; 0x62
   1d288:	ble	1d4e4 <__assert_fail@plt+0xada0>
   1d28c:	cmp	r4, #0
   1d290:	mov	r9, r4
   1d294:	bne	1d4f8 <__assert_fail@plt+0xadb4>
   1d298:	ldr	r0, [sp]
   1d29c:	bl	126f0 <getc@plt>
   1d2a0:	cmn	r0, #1
   1d2a4:	cmpne	r0, #10
   1d2a8:	mov	r6, r0
   1d2ac:	bne	1d438 <__assert_fail@plt+0xacf4>
   1d2b0:	mov	r6, #10
   1d2b4:	mov	r3, #20
   1d2b8:	mov	r0, r6
   1d2bc:	mov	r2, #1
   1d2c0:	str	r2, [sp, #24]
   1d2c4:	ldr	r8, [r7]
   1d2c8:	ldrh	r3, [r8, r3]
   1d2cc:	tst	r3, #8192	; 0x2000
   1d2d0:	beq	1d4ac <__assert_fail@plt+0xad68>
   1d2d4:	bics	r3, r0, #127	; 0x7f
   1d2d8:	mov	r6, r0
   1d2dc:	bne	1d328 <__assert_fail@plt+0xabe4>
   1d2e0:	ldr	r3, [sp, #24]
   1d2e4:	cmp	r3, #0
   1d2e8:	bne	1d4f8 <__assert_fail@plt+0xadb4>
   1d2ec:	ldr	r0, [sp]
   1d2f0:	bl	126f0 <getc@plt>
   1d2f4:	ldr	r8, [r7]
   1d2f8:	cmn	r0, #1
   1d2fc:	cmpne	r0, #10
   1d300:	moveq	r3, #1
   1d304:	mov	r6, r0
   1d308:	streq	r3, [sp, #24]
   1d30c:	moveq	r6, #10
   1d310:	b	1d214 <__assert_fail@plt+0xaad0>
   1d314:	mov	r3, r8
   1d318:	mov	r6, r0
   1d31c:	mov	r8, r2
   1d320:	mov	r9, r3
   1d324:	str	r4, [sp, #24]
   1d328:	ldr	r3, [sp, #4]
   1d32c:	ldr	r4, [r3, #52]	; 0x34
   1d330:	add	r3, sp, #248	; 0xf8
   1d334:	add	r2, r3, r9
   1d338:	cmp	r4, #0
   1d33c:	mov	r3, #0
   1d340:	strb	r3, [r2, #-104]	; 0xffffff98
   1d344:	beq	1d368 <__assert_fail@plt+0xac24>
   1d348:	add	r1, sp, #144	; 0x90
   1d34c:	add	r0, r4, #4
   1d350:	bl	12054 <strcmp@plt>
   1d354:	cmp	r0, #0
   1d358:	beq	1d214 <__assert_fail@plt+0xaad0>
   1d35c:	ldr	r4, [r4]
   1d360:	cmp	r4, #0
   1d364:	bne	1d348 <__assert_fail@plt+0xac04>
   1d368:	add	r0, r9, #8
   1d36c:	bl	1200c <gcry_malloc@plt>
   1d370:	subs	r8, r0, #0
   1d374:	beq	1d0d0 <__assert_fail@plt+0xa98c>
   1d378:	add	r0, r8, #4
   1d37c:	add	r1, sp, #144	; 0x90
   1d380:	bl	12288 <strcpy@plt>
   1d384:	ldr	r2, [sp, #4]
   1d388:	ldr	r3, [r2, #52]	; 0x34
   1d38c:	str	r8, [r2, #52]	; 0x34
   1d390:	str	r3, [r8]
   1d394:	ldr	r8, [r7]
   1d398:	b	1d214 <__assert_fail@plt+0xaad0>
   1d39c:	cmp	r3, #0
   1d3a0:	movne	r9, #0
   1d3a4:	bne	1d328 <__assert_fail@plt+0xabe4>
   1d3a8:	mov	r2, r3
   1d3ac:	mov	r3, #1
   1d3b0:	ldr	r4, [sp, #24]
   1d3b4:	mov	r8, r3
   1d3b8:	mov	r0, r6
   1d3bc:	b	1d240 <__assert_fail@plt+0xaafc>
   1d3c0:	mov	r3, #1
   1d3c4:	mov	r6, r5
   1d3c8:	mov	r8, r5
   1d3cc:	str	r3, [sp, #20]
   1d3d0:	mov	r4, #3
   1d3d4:	b	1cb74 <__assert_fail@plt+0xa430>
   1d3d8:	tst	r2, #8
   1d3dc:	beq	1d07c <__assert_fail@plt+0xa938>
   1d3e0:	ldr	r3, [sp, #4]
   1d3e4:	str	r1, [r3, #20]
   1d3e8:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d3ec:	ldr	r0, [sp, #12]
   1d3f0:	bl	12150 <gcry_free@plt>
   1d3f4:	ldr	r3, [sp, #4]
   1d3f8:	ldr	r4, [r3, #16]
   1d3fc:	b	1cf04 <__assert_fail@plt+0xa7c0>
   1d400:	ldr	r5, [sp, #12]
   1d404:	add	r4, r5, #1
   1d408:	ldrb	r3, [r5, #1]
   1d40c:	cmp	r3, #0
   1d410:	beq	1d110 <__assert_fail@plt+0xa9cc>
   1d414:	mov	r0, r4
   1d418:	bl	123e4 <strlen@plt>
   1d41c:	ldrb	r3, [r5, r0]
   1d420:	cmp	r3, #34	; 0x22
   1d424:	moveq	r3, #0
   1d428:	ldreq	r2, [sp, #12]
   1d42c:	strbeq	r3, [r2, r0]
   1d430:	b	1d110 <__assert_fail@plt+0xa9cc>
   1d434:	mov	r6, r0
   1d438:	mov	r2, #0
   1d43c:	lsl	r3, r6, #1
   1d440:	str	r2, [sp, #24]
   1d444:	mov	r0, r6
   1d448:	b	1d2c4 <__assert_fail@plt+0xab80>
   1d44c:	ldr	r3, [sp, #4]
   1d450:	ldr	r4, [r3, #52]	; 0x34
   1d454:	cmp	r4, #0
   1d458:	beq	1d47c <__assert_fail@plt+0xad38>
   1d45c:	mov	r1, r8
   1d460:	add	r0, r4, #4
   1d464:	bl	12054 <strcmp@plt>
   1d468:	cmp	r0, #0
   1d46c:	beq	1cd98 <__assert_fail@plt+0xa654>
   1d470:	ldr	r4, [r4]
   1d474:	cmp	r4, #0
   1d478:	bne	1d45c <__assert_fail@plt+0xad18>
   1d47c:	ldr	r2, [sp, #4]
   1d480:	tst	r6, #128	; 0x80
   1d484:	mvnne	r3, #6
   1d488:	mvneq	r3, #1
   1d48c:	mov	r6, r5
   1d490:	str	r3, [r2, #16]
   1d494:	mov	r8, r5
   1d498:	mvn	r4, #0
   1d49c:	b	1cb74 <__assert_fail@plt+0xa430>
   1d4a0:	ldr	r0, [sp, #12]
   1d4a4:	bl	12150 <gcry_free@plt>
   1d4a8:	b	1d0d0 <__assert_fail@plt+0xa98c>
   1d4ac:	ldr	r3, [sp, #24]
   1d4b0:	cmp	r3, #0
   1d4b4:	bne	1d4f8 <__assert_fail@plt+0xadb4>
   1d4b8:	ldr	r0, [sp]
   1d4bc:	bl	126f0 <getc@plt>
   1d4c0:	mov	r3, #1
   1d4c4:	str	r3, [sp, #24]
   1d4c8:	mov	r3, #20
   1d4cc:	cmn	r0, #1
   1d4d0:	cmpne	r0, #10
   1d4d4:	bne	1d434 <__assert_fail@plt+0xacf0>
   1d4d8:	mov	r0, #10
   1d4dc:	b	1d2c4 <__assert_fail@plt+0xab80>
   1d4e0:	bl	1218c <__stack_chk_fail@plt>
   1d4e4:	mov	r2, r8
   1d4e8:	add	r8, r8, #1
   1d4ec:	b	1d240 <__assert_fail@plt+0xaafc>
   1d4f0:	lsl	r3, r0, #1
   1d4f4:	b	1d274 <__assert_fail@plt+0xab30>
   1d4f8:	ldr	r3, [fp]
   1d4fc:	ldr	r4, [sp, #28]
   1d500:	add	r3, r3, #1
   1d504:	mov	r6, r5
   1d508:	str	r3, [fp]
   1d50c:	mov	r8, #0
   1d510:	b	1cb74 <__assert_fail@plt+0xa430>
   1d514:	andeq	sl, r3, r8, asr fp
   1d518:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1d51c:	strdeq	r8, [r2], -r0
   1d520:	strdeq	r8, [r2], -r4
   1d524:	push	{r4, r5, r6, lr}
   1d528:	subs	r4, r0, #0
   1d52c:	sub	sp, sp, #16
   1d530:	beq	1d54c <__assert_fail@plt+0xae08>
   1d534:	cmp	r4, #1
   1d538:	beq	1d624 <__assert_fail@plt+0xaee0>
   1d53c:	cmp	r4, #2
   1d540:	beq	1d5a8 <__assert_fail@plt+0xae64>
   1d544:	add	sp, sp, #16
   1d548:	pop	{r4, r5, r6, pc}
   1d54c:	mov	r0, #11
   1d550:	bl	1b878 <__assert_fail@plt+0x9134>
   1d554:	mov	r5, r0
   1d558:	mov	r0, #13
   1d55c:	bl	1b878 <__assert_fail@plt+0x9134>
   1d560:	mov	r6, r0
   1d564:	mov	r0, #14
   1d568:	bl	1b878 <__assert_fail@plt+0x9134>
   1d56c:	ldr	ip, [pc, #240]	; 1d664 <__assert_fail@plt+0xaf20>
   1d570:	ldr	r2, [pc, #240]	; 1d668 <__assert_fail@plt+0xaf24>
   1d574:	mov	r3, r6
   1d578:	str	r2, [sp]
   1d57c:	mov	r1, r5
   1d580:	str	r4, [sp, #12]
   1d584:	str	ip, [sp, #8]
   1d588:	ldr	r2, [pc, #220]	; 1d66c <__assert_fail@plt+0xaf28>
   1d58c:	str	r0, [sp, #4]
   1d590:	mov	r0, #1
   1d594:	bl	1b744 <__assert_fail@plt+0x9000>
   1d598:	mov	r0, #1
   1d59c:	add	sp, sp, #16
   1d5a0:	pop	{r4, r5, r6, lr}
   1d5a4:	b	1b824 <__assert_fail@plt+0x90e0>
   1d5a8:	mov	r0, #42	; 0x2a
   1d5ac:	bl	1b878 <__assert_fail@plt+0x9134>
   1d5b0:	cmp	r0, #0
   1d5b4:	beq	1d5c4 <__assert_fail@plt+0xae80>
   1d5b8:	ldrb	r3, [r0]
   1d5bc:	cmp	r3, #49	; 0x31
   1d5c0:	beq	1d5e8 <__assert_fail@plt+0xaea4>
   1d5c4:	mov	r0, #41	; 0x29
   1d5c8:	bl	1b878 <__assert_fail@plt+0x9134>
   1d5cc:	mov	r3, #0
   1d5d0:	ldr	r2, [pc, #140]	; 1d664 <__assert_fail@plt+0xaf20>
   1d5d4:	mov	r1, r0
   1d5d8:	mov	r0, r3
   1d5dc:	bl	1b744 <__assert_fail@plt+0x9000>
   1d5e0:	mov	r0, #0
   1d5e4:	bl	123c0 <exit@plt>
   1d5e8:	mov	r0, #40	; 0x28
   1d5ec:	bl	1b878 <__assert_fail@plt+0x9134>
   1d5f0:	mov	r2, #0
   1d5f4:	mov	r4, r0
   1d5f8:	mov	r1, r0
   1d5fc:	mov	r0, #1
   1d600:	bl	1b744 <__assert_fail@plt+0x9000>
   1d604:	ldrb	r3, [r4]
   1d608:	cmp	r3, #0
   1d60c:	beq	1d5c4 <__assert_fail@plt+0xae80>
   1d610:	mov	r2, #0
   1d614:	ldr	r1, [pc, #72]	; 1d664 <__assert_fail@plt+0xaf20>
   1d618:	mov	r0, #1
   1d61c:	bl	1b744 <__assert_fail@plt+0x9000>
   1d620:	b	1d5c4 <__assert_fail@plt+0xae80>
   1d624:	mov	r0, #40	; 0x28
   1d628:	bl	1b878 <__assert_fail@plt+0x9134>
   1d62c:	mov	r2, #0
   1d630:	mov	r5, r0
   1d634:	mov	r1, r0
   1d638:	mov	r0, r4
   1d63c:	bl	1b744 <__assert_fail@plt+0x9000>
   1d640:	ldrb	r3, [r5]
   1d644:	cmp	r3, #0
   1d648:	beq	1d65c <__assert_fail@plt+0xaf18>
   1d64c:	mov	r0, r4
   1d650:	mov	r2, #0
   1d654:	ldr	r1, [pc, #8]	; 1d664 <__assert_fail@plt+0xaf20>
   1d658:	bl	1b744 <__assert_fail@plt+0x9000>
   1d65c:	mov	r0, #2
   1d660:	bl	123c0 <exit@plt>
   1d664:	muleq	r2, r8, r3
   1d668:	strdeq	r8, [r2], -ip
   1d66c:	andeq	r9, r2, r8, lsl #1
   1d670:	ldr	r3, [pc, #4]	; 1d67c <__assert_fail@plt+0xaf38>
   1d674:	str	r0, [r3, #4]
   1d678:	bx	lr
   1d67c:	andeq	sp, r3, r4, asr #6
   1d680:	push	{r4, lr}
   1d684:	mov	r4, r0
   1d688:	ldr	r0, [r0]
   1d68c:	cmp	r0, #2
   1d690:	cmnne	r0, #1
   1d694:	bne	1d6b4 <__assert_fail@plt+0xaf70>
   1d698:	mov	r0, r4
   1d69c:	bl	12150 <gcry_free@plt>
   1d6a0:	ldr	r3, [pc, #20]	; 1d6bc <__assert_fail@plt+0xaf78>
   1d6a4:	mvn	r2, #0
   1d6a8:	mov	r0, #0
   1d6ac:	str	r2, [r3]
   1d6b0:	pop	{r4, pc}
   1d6b4:	bl	12708 <close@plt>
   1d6b8:	b	1d698 <__assert_fail@plt+0xaf54>
   1d6bc:	andeq	sp, r3, r4, lsl #6
   1d6c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d6c4:	mov	r6, r0
   1d6c8:	ldr	r7, [pc, #504]	; 1d8c8 <__assert_fail@plt+0xb184>
   1d6cc:	sub	sp, sp, #28
   1d6d0:	mov	r4, r1
   1d6d4:	ldr	r3, [r7]
   1d6d8:	cmp	r3, #0
   1d6dc:	beq	1d704 <__assert_fail@plt+0xafc0>
   1d6e0:	mov	r0, #2
   1d6e4:	bl	1239c <_gpgrt_get_std_stream@plt>
   1d6e8:	ldr	r3, [r7]
   1d6ec:	cmp	r3, r0
   1d6f0:	beq	1d6fc <__assert_fail@plt+0xafb8>
   1d6f4:	mov	r0, r3
   1d6f8:	bl	122b8 <gpgrt_fclose@plt>
   1d6fc:	mov	r3, #0
   1d700:	str	r3, [r7]
   1d704:	cmp	r6, #0
   1d708:	beq	1d890 <__assert_fail@plt+0xb14c>
   1d70c:	ldr	r1, [pc, #440]	; 1d8cc <__assert_fail@plt+0xb188>
   1d710:	mov	r0, r6
   1d714:	bl	12054 <strcmp@plt>
   1d718:	cmp	r0, #0
   1d71c:	beq	1d880 <__assert_fail@plt+0xb13c>
   1d720:	mov	r2, #6
   1d724:	ldr	r1, [pc, #420]	; 1d8d0 <__assert_fail@plt+0xb18c>
   1d728:	mov	r0, r6
   1d72c:	bl	126d8 <strncmp@plt>
   1d730:	mov	r4, r0
   1d734:	mov	r0, r6
   1d738:	bl	123e4 <strlen@plt>
   1d73c:	cmp	r4, #0
   1d740:	add	r4, r0, #20
   1d744:	bne	1d7f8 <__assert_fail@plt+0xb0b4>
   1d748:	ldrb	r3, [r6, #6]
   1d74c:	cmp	r3, #0
   1d750:	beq	1d7f8 <__assert_fail@plt+0xb0b4>
   1d754:	mov	r8, #1
   1d758:	mov	r0, r4
   1d75c:	bl	11fd0 <gcry_xmalloc@plt>
   1d760:	mov	r1, r6
   1d764:	mvn	r4, #0
   1d768:	mov	r5, r0
   1d76c:	add	r0, r0, #16
   1d770:	bl	12288 <strcpy@plt>
   1d774:	mov	r3, #0
   1d778:	str	r3, [r5, #12]
   1d77c:	stmib	r5, {r3, r8}
   1d780:	str	r4, [r5]
   1d784:	ldr	r1, [pc, #328]	; 1d8d4 <__assert_fail@plt+0xb190>
   1d788:	mov	r2, #0
   1d78c:	str	r1, [sp, #20]
   1d790:	add	r1, sp, #24
   1d794:	str	r2, [sp, #16]
   1d798:	ldmdb	r1, {r0, r1}
   1d79c:	ldr	ip, [pc, #308]	; 1d8d8 <__assert_fail@plt+0xb194>
   1d7a0:	str	r2, [sp, #8]
   1d7a4:	add	r3, sp, #8
   1d7a8:	ldr	r2, [pc, #300]	; 1d8dc <__assert_fail@plt+0xb198>
   1d7ac:	stm	sp, {r0, r1}
   1d7b0:	str	r2, [sp, #12]
   1d7b4:	mov	r0, r5
   1d7b8:	ldm	r3, {r2, r3}
   1d7bc:	ldr	r1, [pc, #284]	; 1d8e0 <__assert_fail@plt+0xb19c>
   1d7c0:	str	r4, [ip]
   1d7c4:	bl	12618 <gpgrt_fopencookie@plt>
   1d7c8:	subs	r4, r0, #0
   1d7cc:	beq	1d8b8 <__assert_fail@plt+0xb174>
   1d7d0:	mov	r3, #0
   1d7d4:	mov	r1, r3
   1d7d8:	mov	r2, #1
   1d7dc:	mov	r0, r4
   1d7e0:	bl	122c4 <gpgrt_setvbuf@plt>
   1d7e4:	mov	r3, #0
   1d7e8:	stm	r7, {r4, r8}
   1d7ec:	str	r3, [r7, #8]
   1d7f0:	add	sp, sp, #28
   1d7f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d7f8:	mov	r2, #9
   1d7fc:	ldr	r1, [pc, #224]	; 1d8e4 <__assert_fail@plt+0xb1a0>
   1d800:	mov	r0, r6
   1d804:	bl	126d8 <strncmp@plt>
   1d808:	cmp	r0, #0
   1d80c:	moveq	r8, #2
   1d810:	beq	1d758 <__assert_fail@plt+0xb014>
   1d814:	mov	r0, r4
   1d818:	bl	11fd0 <gcry_xmalloc@plt>
   1d81c:	mov	r1, r6
   1d820:	ldr	r9, [pc, #192]	; 1d8e8 <__assert_fail@plt+0xb1a4>
   1d824:	ldr	r8, [pc, #192]	; 1d8ec <__assert_fail@plt+0xb1a8>
   1d828:	mov	r5, r0
   1d82c:	add	r0, r0, #16
   1d830:	bl	12288 <strcpy@plt>
   1d834:	mov	r3, #0
   1d838:	str	r3, [r5, #4]
   1d83c:	str	r3, [r5, #12]
   1d840:	str	r3, [r5, #8]
   1d844:	b	1d858 <__assert_fail@plt+0xb114>
   1d848:	bl	1245c <__errno_location@plt>
   1d84c:	ldr	r3, [r0]
   1d850:	cmp	r3, #4
   1d854:	bne	1d878 <__assert_fail@plt+0xb134>
   1d858:	mov	r2, r9
   1d85c:	mov	r1, r8
   1d860:	mov	r0, r6
   1d864:	bl	122dc <open64@plt>
   1d868:	cmn	r0, #1
   1d86c:	mov	r4, r0
   1d870:	str	r0, [r5]
   1d874:	beq	1d848 <__assert_fail@plt+0xb104>
   1d878:	mov	r8, #0
   1d87c:	b	1d784 <__assert_fail@plt+0xb040>
   1d880:	mov	r0, #2
   1d884:	bl	1239c <_gpgrt_get_std_stream@plt>
   1d888:	bl	126fc <gpgrt_fileno@plt>
   1d88c:	mov	r4, r0
   1d890:	mov	r0, #20
   1d894:	bl	11fd0 <gcry_xmalloc@plt>
   1d898:	mov	r8, #0
   1d89c:	mov	r5, r0
   1d8a0:	str	r4, [r0]
   1d8a4:	strb	r8, [r0, #16]
   1d8a8:	str	r8, [r0, #4]
   1d8ac:	str	r8, [r0, #12]
   1d8b0:	str	r8, [r0, #8]
   1d8b4:	b	1d784 <__assert_fail@plt+0xb040>
   1d8b8:	mov	r0, #2
   1d8bc:	bl	1239c <_gpgrt_get_std_stream@plt>
   1d8c0:	mov	r4, r0
   1d8c4:	b	1d7d0 <__assert_fail@plt+0xb08c>
   1d8c8:	andeq	sp, r3, ip, asr #6
   1d8cc:	andeq	r7, r2, r8, ror #4
   1d8d0:	andeq	r9, r2, r8, lsl r0
   1d8d4:	andeq	sp, r1, r0, lsl #13
   1d8d8:	andeq	sp, r3, r4, lsl #6
   1d8dc:	andeq	sp, r1, ip, ror #31
   1d8e0:	andeq	r5, r2, r4, lsl #15
   1d8e4:	andeq	r9, r2, r0, lsr #32
   1d8e8:			; <UNDEFINED> instruction: 0x000001b6
   1d8ec:	andeq	r0, r0, r1, asr #8
   1d8f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d8f4:	sub	sp, sp, #28
   1d8f8:	ldr	r6, [pc, #688]	; 1dbb0 <__assert_fail@plt+0xb46c>
   1d8fc:	cmp	r0, #1
   1d900:	ldr	r3, [r6]
   1d904:	str	r3, [sp, #20]
   1d908:	beq	1d9e0 <__assert_fail@plt+0xb29c>
   1d90c:	ldr	r4, [pc, #672]	; 1dbb4 <__assert_fail@plt+0xb470>
   1d910:	mov	r5, r0
   1d914:	mov	r7, r1
   1d918:	ldr	r3, [r4, #12]
   1d91c:	ldr	r0, [r4, #4]
   1d920:	cmp	r3, #0
   1d924:	bne	1d9f8 <__assert_fail@plt+0xb2b4>
   1d928:	ldr	r3, [r4, #16]
   1d92c:	orrs	r0, r0, r3
   1d930:	bne	1db90 <__assert_fail@plt+0xb44c>
   1d934:	ldr	r3, [r4, #100]	; 0x64
   1d938:	orrs	r3, r0, r3
   1d93c:	bne	1da20 <__assert_fail@plt+0xb2dc>
   1d940:	ldr	r3, [r4, #12]
   1d944:	cmp	r3, #0
   1d948:	beq	1da78 <__assert_fail@plt+0xb334>
   1d94c:	cmp	r7, #0
   1d950:	bne	1d9a8 <__assert_fail@plt+0xb264>
   1d954:	ldr	r2, [r4, #16]
   1d958:	ldr	r3, [r4, #12]
   1d95c:	ldr	r1, [r4, #100]	; 0x64
   1d960:	orr	r3, r3, r2
   1d964:	ldr	r2, [r4, #4]
   1d968:	orr	r3, r3, r1
   1d96c:	orrs	r3, r3, r2
   1d970:	beq	1d9a8 <__assert_fail@plt+0xb264>
   1d974:	ldr	r1, [r4]
   1d978:	ldrb	r3, [r1, #2]
   1d97c:	tst	r3, #1
   1d980:	beq	1dadc <__assert_fail@plt+0xb398>
   1d984:	ldr	r3, [r1, #16]
   1d988:	ldr	r2, [r1, #8]
   1d98c:	cmp	r3, r2
   1d990:	bcs	1dadc <__assert_fail@plt+0xb398>
   1d994:	ldr	r2, [r1, #4]
   1d998:	add	r0, r3, #1
   1d99c:	str	r0, [r1, #16]
   1d9a0:	mov	r1, #32
   1d9a4:	strb	r1, [r2, r3]
   1d9a8:	cmp	r5, #7
   1d9ac:	ldrls	pc, [pc, r5, lsl #2]
   1d9b0:	b	1db9c <__assert_fail@plt+0xb458>
   1d9b4:	andeq	sp, r1, r0, ror #19
   1d9b8:	andeq	sp, r1, r0, ror #19
   1d9bc:	andeq	sp, r1, r0, ror #19
   1d9c0:	andeq	sp, r1, r0, ror #19
   1d9c4:	andeq	sp, r1, r0, ror #19
   1d9c8:			; <UNDEFINED> instruction: 0x0001dabc
   1d9cc:	andeq	sp, r1, ip, asr #21
   1d9d0:	ldrdeq	sp, [r1], -r4
   1d9d4:	ldr	r1, [r4]
   1d9d8:	ldr	r0, [pc, #472]	; 1dbb8 <__assert_fail@plt+0xb474>
   1d9dc:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1d9e0:	ldr	r2, [sp, #20]
   1d9e4:	ldr	r3, [r6]
   1d9e8:	cmp	r2, r3
   1d9ec:	bne	1db98 <__assert_fail@plt+0xb454>
   1d9f0:	add	sp, sp, #28
   1d9f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d9f8:	cmp	r0, #0
   1d9fc:	ldr	r8, [r4]
   1da00:	beq	1db2c <__assert_fail@plt+0xb3e8>
   1da04:	mov	r1, r8
   1da08:	ldr	r0, [pc, #428]	; 1dbbc <__assert_fail@plt+0xb478>
   1da0c:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1da10:	ldr	r0, [r4, #4]
   1da14:	ldr	r3, [r4, #100]	; 0x64
   1da18:	orrs	r3, r0, r3
   1da1c:	beq	1d940 <__assert_fail@plt+0xb1fc>
   1da20:	ldr	r3, [r4, #104]	; 0x68
   1da24:	cmp	r3, #0
   1da28:	beq	1db10 <__assert_fail@plt+0xb3cc>
   1da2c:	add	r0, sp, #16
   1da30:	blx	r3
   1da34:	cmp	r0, #0
   1da38:	beq	1db10 <__assert_fail@plt+0xb3cc>
   1da3c:	ldr	r1, [pc, #380]	; 1dbc0 <__assert_fail@plt+0xb47c>
   1da40:	cmp	r0, #1
   1da44:	ldr	r8, [pc, #376]	; 1dbc4 <__assert_fail@plt+0xb480>
   1da48:	ldr	r9, [r4]
   1da4c:	movne	r8, r1
   1da50:	bl	123b4 <getpid@plt>
   1da54:	mov	r1, r8
   1da58:	ldr	r3, [sp, #16]
   1da5c:	mov	r2, r0
   1da60:	mov	r0, r9
   1da64:	bl	123cc <gpgrt_fprintf_unlocked@plt>
   1da68:	ldr	r3, [r4, #12]
   1da6c:	cmp	r3, #0
   1da70:	bne	1dae8 <__assert_fail@plt+0xb3a4>
   1da74:	ldr	r3, [r4, #100]	; 0x64
   1da78:	ldr	r2, [r4, #16]
   1da7c:	orrs	r3, r3, r2
   1da80:	beq	1dae8 <__assert_fail@plt+0xb3a4>
   1da84:	ldr	r1, [r4]
   1da88:	ldrb	r3, [r1, #2]
   1da8c:	tst	r3, #1
   1da90:	beq	1db04 <__assert_fail@plt+0xb3c0>
   1da94:	ldr	r3, [r1, #16]
   1da98:	ldr	r2, [r1, #8]
   1da9c:	cmp	r3, r2
   1daa0:	bcs	1db04 <__assert_fail@plt+0xb3c0>
   1daa4:	ldr	r2, [r1, #4]
   1daa8:	add	r0, r3, #1
   1daac:	str	r0, [r1, #16]
   1dab0:	mov	r1, #58	; 0x3a
   1dab4:	strb	r1, [r2, r3]
   1dab8:	b	1d94c <__assert_fail@plt+0xb208>
   1dabc:	ldr	r1, [r4]
   1dac0:	ldr	r0, [pc, #256]	; 1dbc8 <__assert_fail@plt+0xb484>
   1dac4:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1dac8:	b	1d9e0 <__assert_fail@plt+0xb29c>
   1dacc:	ldr	r1, [r4]
   1dad0:	ldr	r0, [pc, #244]	; 1dbcc <__assert_fail@plt+0xb488>
   1dad4:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1dad8:	b	1d9e0 <__assert_fail@plt+0xb29c>
   1dadc:	mov	r0, #32
   1dae0:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1dae4:	b	1d9a8 <__assert_fail@plt+0xb264>
   1dae8:	ldr	r3, [r4, #4]
   1daec:	cmp	r3, #0
   1daf0:	beq	1d94c <__assert_fail@plt+0xb208>
   1daf4:	ldr	r1, [r4]
   1daf8:	ldrb	r3, [r1, #2]
   1dafc:	tst	r3, #1
   1db00:	bne	1da94 <__assert_fail@plt+0xb350>
   1db04:	mov	r0, #58	; 0x3a
   1db08:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1db0c:	b	1d94c <__assert_fail@plt+0xb208>
   1db10:	ldr	r8, [r4]
   1db14:	bl	123b4 <getpid@plt>
   1db18:	ldr	r1, [pc, #176]	; 1dbd0 <__assert_fail@plt+0xb48c>
   1db1c:	mov	r2, r0
   1db20:	mov	r0, r8
   1db24:	bl	123cc <gpgrt_fprintf_unlocked@plt>
   1db28:	b	1da68 <__assert_fail@plt+0xb324>
   1db2c:	bl	12138 <time@plt>
   1db30:	str	r0, [sp, #16]
   1db34:	add	r0, sp, #16
   1db38:	bl	12348 <localtime@plt>
   1db3c:	mov	r1, r0
   1db40:	mov	r0, r8
   1db44:	ldr	ip, [r1]
   1db48:	ldr	r3, [r1, #16]
   1db4c:	ldr	r2, [r1, #20]
   1db50:	str	ip, [sp, #12]
   1db54:	ldr	ip, [r1, #4]
   1db58:	add	r2, r2, #1888	; 0x760
   1db5c:	str	ip, [sp, #8]
   1db60:	ldr	ip, [r1, #8]
   1db64:	add	r3, r3, #1
   1db68:	str	ip, [sp, #4]
   1db6c:	ldr	r1, [r1, #12]
   1db70:	add	r2, r2, #12
   1db74:	str	r1, [sp]
   1db78:	ldr	r1, [pc, #84]	; 1dbd4 <__assert_fail@plt+0xb490>
   1db7c:	bl	123cc <gpgrt_fprintf_unlocked@plt>
   1db80:	ldr	r0, [r4, #4]
   1db84:	ldr	r3, [r4, #16]
   1db88:	orrs	r0, r0, r3
   1db8c:	beq	1d934 <__assert_fail@plt+0xb1f0>
   1db90:	ldr	r8, [r4]
   1db94:	b	1da04 <__assert_fail@plt+0xb2c0>
   1db98:	bl	1218c <__stack_chk_fail@plt>
   1db9c:	mov	r2, r5
   1dba0:	ldr	r0, [r4]
   1dba4:	ldr	r1, [pc, #44]	; 1dbd8 <__assert_fail@plt+0xb494>
   1dba8:	bl	123cc <gpgrt_fprintf_unlocked@plt>
   1dbac:	b	1d9e0 <__assert_fail@plt+0xb29c>
   1dbb0:	andeq	sl, r3, r8, asr fp
   1dbb4:	andeq	sp, r3, ip, asr #6
   1dbb8:	andeq	r9, r2, r4, lsl #1
   1dbbc:	andeq	sp, r3, r0, ror #6
   1dbc0:	andeq	r9, r2, r8, lsr r0
   1dbc4:	andeq	r9, r2, ip, lsr #32
   1dbc8:	andeq	r9, r2, ip, rrx
   1dbcc:	andeq	r9, r2, r4, ror r0
   1dbd0:	andeq	r9, r2, r4, rrx
   1dbd4:	andeq	r9, r2, r4, asr #32
   1dbd8:	andeq	r9, r2, ip, lsl #1
   1dbdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbe0:	sub	sp, sp, #20
   1dbe4:	mov	r5, r3
   1dbe8:	ldr	r8, [sp, #56]	; 0x38
   1dbec:	ldr	r4, [pc, #868]	; 1df58 <__assert_fail@plt+0xb814>
   1dbf0:	cmp	r8, #0
   1dbf4:	mov	sl, r0
   1dbf8:	ldrbne	r3, [r8]
   1dbfc:	ldr	r0, [r4]
   1dc00:	streq	r8, [sp, #12]
   1dc04:	subne	r3, r3, #8
   1dc08:	clzne	r3, r3
   1dc0c:	lsrne	r3, r3, #5
   1dc10:	strne	r3, [sp, #12]
   1dc14:	cmp	r0, #0
   1dc18:	mov	r7, r1
   1dc1c:	mov	r6, r2
   1dc20:	ldr	fp, [sp, #60]	; 0x3c
   1dc24:	beq	1deb8 <__assert_fail@plt+0xb774>
   1dc28:	bl	122ac <gpgrt_flockfile@plt>
   1dc2c:	ldr	r3, [r4, #8]
   1dc30:	cmp	r3, #0
   1dc34:	cmpne	sl, #1
   1dc38:	bne	1dee4 <__assert_fail@plt+0xb7a0>
   1dc3c:	ldr	r9, [sp, #12]
   1dc40:	mov	r3, #0
   1dc44:	mov	r1, r9
   1dc48:	mov	r0, sl
   1dc4c:	str	r3, [r4, #8]
   1dc50:	bl	1d8f0 <__assert_fail@plt+0xb1ac>
   1dc54:	cmp	r9, #0
   1dc58:	addne	r8, r8, #1
   1dc5c:	cmp	r8, #0
   1dc60:	beq	1de08 <__assert_fail@plt+0xb6c4>
   1dc64:	cmp	r5, #0
   1dc68:	ldr	r9, [r4]
   1dc6c:	beq	1dc80 <__assert_fail@plt+0xb53c>
   1dc70:	mov	r1, r9
   1dc74:	mov	r0, r5
   1dc78:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1dc7c:	ldr	r9, [r4]
   1dc80:	cmp	r7, #0
   1dc84:	beq	1dea4 <__assert_fail@plt+0xb760>
   1dc88:	ldr	fp, [pc, #716]	; 1df5c <__assert_fail@plt+0xb818>
   1dc8c:	mov	r5, r8
   1dc90:	b	1dce0 <__assert_fail@plt+0xb59c>
   1dc94:	cmp	r8, r5
   1dc98:	moveq	r2, #0
   1dc9c:	beq	1dcbc <__assert_fail@plt+0xb578>
   1dca0:	ldr	r2, [r4, #16]
   1dca4:	ldr	r0, [r4, #4]
   1dca8:	orrs	r2, r2, r0
   1dcac:	beq	1dcbc <__assert_fail@plt+0xb578>
   1dcb0:	ldr	r0, [pc, #680]	; 1df60 <__assert_fail@plt+0xb81c>
   1dcb4:	bl	123e4 <strlen@plt>
   1dcb8:	add	r2, r0, #2
   1dcbc:	sub	r3, r7, r5
   1dcc0:	add	r3, r3, #1
   1dcc4:	mov	r0, r9
   1dcc8:	stm	sp, {r3, r5}
   1dccc:	ldr	r1, [pc, #656]	; 1df64 <__assert_fail@plt+0xb820>
   1dcd0:	mov	r3, fp
   1dcd4:	bl	123cc <gpgrt_fprintf_unlocked@plt>
   1dcd8:	ldr	r9, [r4]
   1dcdc:	add	r5, r7, #1
   1dce0:	mov	r1, #10
   1dce4:	mov	r0, r5
   1dce8:	bl	12408 <strchr@plt>
   1dcec:	subs	r7, r0, #0
   1dcf0:	bne	1dc94 <__assert_fail@plt+0xb550>
   1dcf4:	mov	r1, r9
   1dcf8:	mov	r0, r5
   1dcfc:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1dd00:	ldrb	r3, [r8]
   1dd04:	cmp	r3, #0
   1dd08:	beq	1de08 <__assert_fail@plt+0xb6c4>
   1dd0c:	mov	r0, r8
   1dd10:	bl	123e4 <strlen@plt>
   1dd14:	add	r0, r8, r0
   1dd18:	ldrb	r3, [r0, #-1]
   1dd1c:	cmp	r3, #10
   1dd20:	beq	1de08 <__assert_fail@plt+0xb6c4>
   1dd24:	mov	r3, #1
   1dd28:	cmp	r6, #0
   1dd2c:	str	r3, [r4, #8]
   1dd30:	beq	1df24 <__assert_fail@plt+0xb7e0>
   1dd34:	ldr	r1, [r4]
   1dd38:	mov	r0, #10
   1dd3c:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1dd40:	mov	r3, #0
   1dd44:	str	r3, [r4, #8]
   1dd48:	ldr	r1, [sp, #12]
   1dd4c:	mov	r0, sl
   1dd50:	bl	1d8f0 <__assert_fail@plt+0xb1ac>
   1dd54:	ldr	r1, [r4]
   1dd58:	ldr	r0, [pc, #520]	; 1df68 <__assert_fail@plt+0xb824>
   1dd5c:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1dd60:	ldr	r9, [pc, #516]	; 1df6c <__assert_fail@plt+0xb828>
   1dd64:	ldr	r1, [r4]
   1dd68:	ldr	fp, [pc, #504]	; 1df68 <__assert_fail@plt+0xb824>
   1dd6c:	ldr	r8, [pc, #508]	; 1df70 <__assert_fail@plt+0xb82c>
   1dd70:	ldr	r7, [pc, #508]	; 1df74 <__assert_fail@plt+0xb830>
   1dd74:	mov	r5, #1
   1dd78:	str	r5, [r4, #8]
   1dd7c:	ldrb	r0, [r6], #1
   1dd80:	cmp	r0, #0
   1dd84:	beq	1dddc <__assert_fail@plt+0xb698>
   1dd88:	cmp	r0, #92	; 0x5c
   1dd8c:	str	r5, [r4, #8]
   1dd90:	beq	1de2c <__assert_fail@plt+0xb6e8>
   1dd94:	cmp	r0, #13
   1dd98:	beq	1de3c <__assert_fail@plt+0xb6f8>
   1dd9c:	cmp	r0, #10
   1dda0:	beq	1de4c <__assert_fail@plt+0xb708>
   1dda4:	ldrb	r3, [r1, #2]
   1dda8:	tst	r3, #1
   1ddac:	beq	1de20 <__assert_fail@plt+0xb6dc>
   1ddb0:	ldr	r3, [r1, #16]
   1ddb4:	ldr	r2, [r1, #8]
   1ddb8:	cmp	r3, r2
   1ddbc:	bcs	1de20 <__assert_fail@plt+0xb6dc>
   1ddc0:	ldr	r2, [r1, #4]
   1ddc4:	add	ip, r3, #1
   1ddc8:	str	ip, [r1, #16]
   1ddcc:	strb	r0, [r2, r3]
   1ddd0:	ldrb	r0, [r6], #1
   1ddd4:	cmp	r0, #0
   1ddd8:	bne	1dd88 <__assert_fail@plt+0xb644>
   1dddc:	ldr	r2, [r4, #8]
   1dde0:	cmp	r2, #0
   1dde4:	bne	1de88 <__assert_fail@plt+0xb744>
   1dde8:	cmp	sl, #5
   1ddec:	beq	1df14 <__assert_fail@plt+0xb7d0>
   1ddf0:	cmp	sl, #6
   1ddf4:	beq	1df34 <__assert_fail@plt+0xb7f0>
   1ddf8:	mov	r0, r1
   1ddfc:	add	sp, sp, #20
   1de00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de04:	b	12000 <gpgrt_funlockfile@plt>
   1de08:	cmp	r6, #0
   1de0c:	beq	1def4 <__assert_fail@plt+0xb7b0>
   1de10:	ldr	r3, [r4, #8]
   1de14:	cmp	r3, #0
   1de18:	beq	1dd48 <__assert_fail@plt+0xb604>
   1de1c:	b	1dd34 <__assert_fail@plt+0xb5f0>
   1de20:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1de24:	ldr	r1, [r4]
   1de28:	b	1dd7c <__assert_fail@plt+0xb638>
   1de2c:	mov	r0, r7
   1de30:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1de34:	ldr	r1, [r4]
   1de38:	b	1dd7c <__assert_fail@plt+0xb638>
   1de3c:	mov	r0, r8
   1de40:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1de44:	ldr	r1, [r4]
   1de48:	b	1dd7c <__assert_fail@plt+0xb638>
   1de4c:	mov	r0, r9
   1de50:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1de54:	ldrb	r3, [r6]
   1de58:	cmp	r3, #0
   1de5c:	streq	r3, [r4, #8]
   1de60:	ldreq	r1, [r4]
   1de64:	beq	1dd7c <__assert_fail@plt+0xb638>
   1de68:	ldr	r1, [sp, #12]
   1de6c:	mov	r0, sl
   1de70:	bl	1d8f0 <__assert_fail@plt+0xb1ac>
   1de74:	ldr	r1, [r4]
   1de78:	mov	r0, fp
   1de7c:	bl	12234 <gpgrt_fputs_unlocked@plt>
   1de80:	ldr	r1, [r4]
   1de84:	b	1dd7c <__assert_fail@plt+0xb638>
   1de88:	str	r0, [sp, #12]
   1de8c:	mov	r0, #10
   1de90:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1de94:	ldr	r3, [sp, #12]
   1de98:	ldr	r1, [r4]
   1de9c:	str	r3, [r4, #8]
   1dea0:	b	1dde8 <__assert_fail@plt+0xb6a4>
   1dea4:	mov	r2, fp
   1dea8:	mov	r0, r9
   1deac:	mov	r1, r8
   1deb0:	bl	12060 <gpgrt_vfprintf_unlocked@plt>
   1deb4:	b	1dd00 <__assert_fail@plt+0xb5bc>
   1deb8:	ldr	r0, [pc, #184]	; 1df78 <__assert_fail@plt+0xb834>
   1debc:	mvn	r1, #0
   1dec0:	bl	1d6c0 <__assert_fail@plt+0xaf7c>
   1dec4:	ldr	r0, [r4]
   1dec8:	cmp	r0, #0
   1decc:	bne	1dc28 <__assert_fail@plt+0xb4e4>
   1ded0:	ldr	r3, [pc, #164]	; 1df7c <__assert_fail@plt+0xb838>
   1ded4:	ldr	r2, [pc, #164]	; 1df80 <__assert_fail@plt+0xb83c>
   1ded8:	ldr	r1, [pc, #164]	; 1df84 <__assert_fail@plt+0xb840>
   1dedc:	ldr	r0, [pc, #164]	; 1df88 <__assert_fail@plt+0xb844>
   1dee0:	bl	12744 <__assert_fail@plt>
   1dee4:	ldr	r1, [r4]
   1dee8:	mov	r0, #10
   1deec:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1def0:	b	1dc3c <__assert_fail@plt+0xb4f8>
   1def4:	cmp	sl, #5
   1def8:	ldr	r1, [r4]
   1defc:	bne	1ddf0 <__assert_fail@plt+0xb6ac>
   1df00:	ldr	r3, [r4, #8]
   1df04:	cmp	r3, #0
   1df08:	beq	1df14 <__assert_fail@plt+0xb7d0>
   1df0c:	mov	r0, #10
   1df10:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1df14:	ldr	r0, [r4]
   1df18:	bl	12000 <gpgrt_funlockfile@plt>
   1df1c:	mov	r0, #2
   1df20:	bl	123c0 <exit@plt>
   1df24:	cmp	sl, #5
   1df28:	ldr	r1, [r4]
   1df2c:	bne	1ddf0 <__assert_fail@plt+0xb6ac>
   1df30:	b	1df0c <__assert_fail@plt+0xb7c8>
   1df34:	ldr	r3, [r4, #8]
   1df38:	cmp	r3, #0
   1df3c:	bne	1df4c <__assert_fail@plt+0xb808>
   1df40:	ldr	r0, [r4]
   1df44:	bl	12000 <gpgrt_funlockfile@plt>
   1df48:	bl	126e4 <abort@plt>
   1df4c:	mov	r0, #10
   1df50:	bl	120f0 <_gpgrt_putc_overflow@plt>
   1df54:	b	1df40 <__assert_fail@plt+0xb7fc>
   1df58:	andeq	sp, r3, ip, asr #6
   1df5c:	andeq	r6, r2, r4, ror #29
   1df60:	andeq	sp, r3, r0, ror #6
   1df64:	andeq	r9, r2, ip, asr #1
   1df68:	ldrdeq	r9, [r2], -r4
   1df6c:	andeq	r9, r2, r0, ror #1
   1df70:	ldrdeq	r9, [r2], -ip
   1df74:	ldrdeq	r9, [r2], -r8
   1df78:	andeq	r7, r2, r8, ror #4
   1df7c:	andeq	r9, r2, r0
   1df80:	strdeq	r0, [r0], -r1
   1df84:	andeq	r9, r2, r8, lsr #1
   1df88:	andeq	r9, r2, r0, asr #1
   1df8c:	push	{r1, r2, r3}
   1df90:	mov	r3, #0
   1df94:	push	{r4, lr}
   1df98:	sub	sp, sp, #20
   1df9c:	ldr	r4, [pc, #68]	; 1dfe8 <__assert_fail@plt+0xb8a4>
   1dfa0:	ldr	r2, [sp, #28]
   1dfa4:	add	ip, sp, #32
   1dfa8:	ldr	r1, [r4]
   1dfac:	stm	sp, {r2, ip}
   1dfb0:	str	r1, [sp, #12]
   1dfb4:	mov	r2, r3
   1dfb8:	mov	r1, #1
   1dfbc:	str	ip, [sp, #8]
   1dfc0:	bl	1dbdc <__assert_fail@plt+0xb498>
   1dfc4:	ldr	r2, [sp, #12]
   1dfc8:	ldr	r3, [r4]
   1dfcc:	cmp	r2, r3
   1dfd0:	bne	1dfe4 <__assert_fail@plt+0xb8a0>
   1dfd4:	add	sp, sp, #20
   1dfd8:	pop	{r4, lr}
   1dfdc:	add	sp, sp, #12
   1dfe0:	bx	lr
   1dfe4:	bl	1218c <__stack_chk_fail@plt>
   1dfe8:	andeq	sl, r3, r8, asr fp
   1dfec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dff0:	mov	r4, r0
   1dff4:	ldr	r8, [pc, #1564]	; 1e618 <__assert_fail@plt+0xbed4>
   1dff8:	ldr	r0, [r0, #8]
   1dffc:	sub	sp, sp, #180	; 0xb4
   1e000:	ldr	r3, [r8]
   1e004:	cmp	r0, #0
   1e008:	mov	r7, r1
   1e00c:	mov	r9, r2
   1e010:	str	r3, [sp, #172]	; 0xac
   1e014:	ldr	r6, [r4]
   1e018:	beq	1e1d4 <__assert_fail@plt+0xba90>
   1e01c:	cmn	r6, #1
   1e020:	beq	1e124 <__assert_fail@plt+0xb9e0>
   1e024:	ldr	sl, [pc, #1520]	; 1e61c <__assert_fail@plt+0xbed8>
   1e028:	str	r6, [sl]
   1e02c:	cmp	r9, #0
   1e030:	beq	1e108 <__assert_fail@plt+0xb9c4>
   1e034:	mov	r5, r9
   1e038:	b	1e048 <__assert_fail@plt+0xb904>
   1e03c:	subs	r5, r5, r0
   1e040:	add	r7, r7, r0
   1e044:	beq	1e108 <__assert_fail@plt+0xb9c4>
   1e048:	mov	r2, r5
   1e04c:	mov	r1, r7
   1e050:	mov	r0, r6
   1e054:	bl	124f8 <write@plt>
   1e058:	cmp	r0, #0
   1e05c:	bge	1e03c <__assert_fail@plt+0xb8f8>
   1e060:	bl	1245c <__errno_location@plt>
   1e064:	ldr	r3, [r0]
   1e068:	cmp	r3, #4
   1e06c:	beq	1e048 <__assert_fail@plt+0xb904>
   1e070:	ldr	r5, [pc, #1448]	; 1e620 <__assert_fail@plt+0xbedc>
   1e074:	ldr	r3, [r5, #112]	; 0x70
   1e078:	cmp	r3, #0
   1e07c:	bne	1e0e0 <__assert_fail@plt+0xb99c>
   1e080:	ldr	r3, [r4]
   1e084:	cmn	r3, #1
   1e088:	beq	1e108 <__assert_fail@plt+0xb9c4>
   1e08c:	mov	r0, #2
   1e090:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e094:	bl	126fc <gpgrt_fileno@plt>
   1e098:	bl	126b4 <isatty@plt>
   1e09c:	cmp	r0, #0
   1e0a0:	beq	1e0e0 <__assert_fail@plt+0xb99c>
   1e0a4:	bl	1245c <__errno_location@plt>
   1e0a8:	ldrb	r3, [r4, #16]
   1e0ac:	cmp	r3, #0
   1e0b0:	mov	r5, r0
   1e0b4:	mov	r0, #2
   1e0b8:	beq	1e2e4 <__assert_fail@plt+0xbba0>
   1e0bc:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e0c0:	mov	r6, r0
   1e0c4:	ldr	r0, [r5]
   1e0c8:	bl	12330 <strerror@plt>
   1e0cc:	add	r2, r4, #16
   1e0d0:	ldr	r1, [pc, #1356]	; 1e624 <__assert_fail@plt+0xbee0>
   1e0d4:	mov	r3, r0
   1e0d8:	mov	r0, r6
   1e0dc:	bl	12678 <gpgrt_fprintf@plt>
   1e0e0:	ldr	r3, [r4, #12]
   1e0e4:	cmp	r3, #0
   1e0e8:	beq	1e108 <__assert_fail@plt+0xb9c4>
   1e0ec:	ldr	r0, [r4]
   1e0f0:	cmn	r0, #1
   1e0f4:	beq	1e108 <__assert_fail@plt+0xb9c4>
   1e0f8:	bl	12708 <close@plt>
   1e0fc:	mvn	r3, #0
   1e100:	str	r3, [r4]
   1e104:	str	r3, [sl]
   1e108:	ldr	r2, [sp, #172]	; 0xac
   1e10c:	ldr	r3, [r8]
   1e110:	mov	r0, r9
   1e114:	cmp	r2, r3
   1e118:	bne	1e5f8 <__assert_fail@plt+0xbeb4>
   1e11c:	add	sp, sp, #180	; 0xb4
   1e120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e124:	mov	r3, #0
   1e128:	add	r6, r4, #16
   1e12c:	mov	r0, r6
   1e130:	str	r3, [r4, #12]
   1e134:	mov	r2, #6
   1e138:	ldr	r1, [pc, #1256]	; 1e628 <__assert_fail@plt+0xbee4>
   1e13c:	bl	126d8 <strncmp@plt>
   1e140:	cmp	r0, #0
   1e144:	bne	1e154 <__assert_fail@plt+0xba10>
   1e148:	ldrb	r3, [r4, #22]
   1e14c:	cmp	r3, #0
   1e150:	bne	1e1e8 <__assert_fail@plt+0xbaa4>
   1e154:	mov	r2, #9
   1e158:	ldr	r1, [pc, #1228]	; 1e62c <__assert_fail@plt+0xbee8>
   1e15c:	mov	r0, r6
   1e160:	bl	126d8 <strncmp@plt>
   1e164:	mov	sl, #1
   1e168:	strh	sl, [sp, #60]	; 0x3c
   1e16c:	cmp	r0, #0
   1e170:	addeq	r5, r4, #25
   1e174:	movne	r5, r6
   1e178:	ldrb	fp, [r5]
   1e17c:	cmp	fp, #0
   1e180:	beq	1e400 <__assert_fail@plt+0xbcbc>
   1e184:	mov	r0, r5
   1e188:	bl	123e4 <strlen@plt>
   1e18c:	cmp	r0, #106	; 0x6a
   1e190:	bls	1e350 <__assert_fail@plt+0xbc0c>
   1e194:	ldr	r5, [pc, #1156]	; 1e620 <__assert_fail@plt+0xbedc>
   1e198:	mvn	r3, #0
   1e19c:	str	r3, [r4]
   1e1a0:	ldr	r3, [r4, #4]
   1e1a4:	ldr	r2, [r5, #112]	; 0x70
   1e1a8:	cmp	r3, #0
   1e1ac:	bne	1e4ac <__assert_fail@plt+0xbd68>
   1e1b0:	cmp	r2, #0
   1e1b4:	beq	1e4bc <__assert_fail@plt+0xbd78>
   1e1b8:	ldr	r6, [r4]
   1e1bc:	cmn	r6, #1
   1e1c0:	beq	1e500 <__assert_fail@plt+0xbdbc>
   1e1c4:	mov	r2, #0
   1e1c8:	mov	r3, #1
   1e1cc:	str	r2, [r4, #4]
   1e1d0:	str	r3, [r4, #12]
   1e1d4:	ldr	sl, [pc, #1088]	; 1e61c <__assert_fail@plt+0xbed8>
   1e1d8:	cmn	r6, #1
   1e1dc:	str	r6, [sl]
   1e1e0:	beq	1e070 <__assert_fail@plt+0xb92c>
   1e1e4:	b	1e02c <__assert_fail@plt+0xb8e8>
   1e1e8:	add	r5, r4, #22
   1e1ec:	mov	r0, r5
   1e1f0:	bl	123e4 <strlen@plt>
   1e1f4:	add	r0, r0, #1
   1e1f8:	bl	1200c <gcry_malloc@plt>
   1e1fc:	subs	sl, r0, #0
   1e200:	beq	1e4a0 <__assert_fail@plt+0xbd5c>
   1e204:	ldrb	r3, [r4, #22]
   1e208:	cmp	r3, #91	; 0x5b
   1e20c:	beq	1e310 <__assert_fail@plt+0xbbcc>
   1e210:	mov	r1, r5
   1e214:	bl	12288 <strcpy@plt>
   1e218:	mov	r1, #58	; 0x3a
   1e21c:	mov	r0, sl
   1e220:	bl	12408 <strchr@plt>
   1e224:	cmp	r0, #0
   1e228:	beq	1e338 <__assert_fail@plt+0xbbf4>
   1e22c:	ldrb	r3, [r0, #1]
   1e230:	add	ip, r0, #1
   1e234:	sub	r3, r3, #48	; 0x30
   1e238:	uxtb	r2, r3
   1e23c:	cmp	r2, #9
   1e240:	bhi	1e338 <__assert_fail@plt+0xbbf4>
   1e244:	ldr	r5, [pc, #996]	; 1e630 <__assert_fail@plt+0xbeec>
   1e248:	b	1e25c <__assert_fail@plt+0xbb18>
   1e24c:	add	r3, r3, r3, lsl #2
   1e250:	add	r3, r2, r3, lsl #1
   1e254:	cmp	r3, r5
   1e258:	bhi	1e338 <__assert_fail@plt+0xbbf4>
   1e25c:	ldrb	r1, [ip, #1]!
   1e260:	sub	r2, r1, #48	; 0x30
   1e264:	uxtb	lr, r2
   1e268:	cmp	lr, #9
   1e26c:	bls	1e24c <__assert_fail@plt+0xbb08>
   1e270:	adds	r2, r1, #0
   1e274:	movne	r2, #1
   1e278:	cmp	r3, #0
   1e27c:	moveq	r2, #1
   1e280:	cmp	r2, #0
   1e284:	bne	1e338 <__assert_fail@plt+0xbbf4>
   1e288:	rev16	r3, r3
   1e28c:	mov	r1, #2
   1e290:	strh	r3, [sp, #18]
   1e294:	strb	r2, [r0]
   1e298:	str	r2, [sp, #20]
   1e29c:	str	r2, [sp, #24]
   1e2a0:	str	r2, [sp, #28]
   1e2a4:	mov	r3, r1
   1e2a8:	add	r2, sp, #20
   1e2ac:	add	r5, sp, #16
   1e2b0:	mov	fp, #16
   1e2b4:	strh	r1, [sp, #16]
   1e2b8:	mov	r0, r3
   1e2bc:	mov	r1, sl
   1e2c0:	str	r3, [sp, #12]
   1e2c4:	bl	12114 <inet_pton@plt>
   1e2c8:	ldr	r3, [sp, #12]
   1e2cc:	cmp	r0, #1
   1e2d0:	beq	1e5fc <__assert_fail@plt+0xbeb8>
   1e2d4:	mov	r0, sl
   1e2d8:	bl	12150 <gcry_free@plt>
   1e2dc:	ldr	r5, [pc, #828]	; 1e620 <__assert_fail@plt+0xbedc>
   1e2e0:	b	1e198 <__assert_fail@plt+0xba54>
   1e2e4:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e2e8:	ldr	r7, [r4]
   1e2ec:	mov	r6, r0
   1e2f0:	ldr	r0, [r5]
   1e2f4:	bl	12330 <strerror@plt>
   1e2f8:	mov	r2, r7
   1e2fc:	ldr	r1, [pc, #816]	; 1e634 <__assert_fail@plt+0xbef0>
   1e300:	mov	r3, r0
   1e304:	mov	r0, r6
   1e308:	bl	12678 <gpgrt_fprintf@plt>
   1e30c:	b	1e0e0 <__assert_fail@plt+0xb99c>
   1e310:	add	r1, r4, #23
   1e314:	bl	12288 <strcpy@plt>
   1e318:	mov	r1, #93	; 0x5d
   1e31c:	mov	r0, sl
   1e320:	bl	12408 <strchr@plt>
   1e324:	cmp	r0, #0
   1e328:	beq	1e338 <__assert_fail@plt+0xbbf4>
   1e32c:	ldrb	r3, [r0, #1]
   1e330:	cmp	r3, #58	; 0x3a
   1e334:	beq	1e50c <__assert_fail@plt+0xbdc8>
   1e338:	mov	r0, #22
   1e33c:	bl	125dc <gpg_err_set_errno@plt>
   1e340:	mov	r0, sl
   1e344:	bl	12150 <gcry_free@plt>
   1e348:	ldr	r5, [pc, #720]	; 1e620 <__assert_fail@plt+0xbedc>
   1e34c:	b	1e198 <__assert_fail@plt+0xba54>
   1e350:	mov	r1, r5
   1e354:	mov	r2, #107	; 0x6b
   1e358:	add	r0, sp, #62	; 0x3e
   1e35c:	bl	124bc <strncpy@plt>
   1e360:	mov	r3, #0
   1e364:	add	r0, sp, #62	; 0x3e
   1e368:	strb	r3, [sp, #169]	; 0xa9
   1e36c:	bl	123e4 <strlen@plt>
   1e370:	mov	r3, sl
   1e374:	ldr	sl, [pc, #700]	; 1e638 <__assert_fail@plt+0xbef4>
   1e378:	add	r5, sp, #60	; 0x3c
   1e37c:	add	fp, r0, #2
   1e380:	mov	r0, r3
   1e384:	mov	r2, #0
   1e388:	mov	r1, #1
   1e38c:	bl	1266c <socket@plt>
   1e390:	cmn	r0, #1
   1e394:	str	r0, [r4]
   1e398:	ldreq	r5, [pc, #640]	; 1e620 <__assert_fail@plt+0xbedc>
   1e39c:	beq	1e1a0 <__assert_fail@plt+0xba5c>
   1e3a0:	mov	r2, fp
   1e3a4:	mov	r1, r5
   1e3a8:	bl	12720 <connect@plt>
   1e3ac:	cmn	r0, #1
   1e3b0:	beq	1e474 <__assert_fail@plt+0xbd30>
   1e3b4:	ldr	r6, [r4]
   1e3b8:	cmn	r6, #1
   1e3bc:	bne	1e1c4 <__assert_fail@plt+0xba80>
   1e3c0:	ldr	r5, [pc, #600]	; 1e620 <__assert_fail@plt+0xbedc>
   1e3c4:	ldr	r3, [r5, #112]	; 0x70
   1e3c8:	cmp	r3, #0
   1e3cc:	bne	1e4b4 <__assert_fail@plt+0xbd70>
   1e3d0:	ldr	r3, [r4, #4]
   1e3d4:	cmp	r3, #0
   1e3d8:	moveq	r3, #1
   1e3dc:	streq	r3, [r4, #4]
   1e3e0:	ldr	r3, [r5, #112]	; 0x70
   1e3e4:	ldr	sl, [pc, #560]	; 1e61c <__assert_fail@plt+0xbed8>
   1e3e8:	cmp	r3, #0
   1e3ec:	mvn	r3, #0
   1e3f0:	str	r3, [sl]
   1e3f4:	str	r3, [r4]
   1e3f8:	bne	1e0e0 <__assert_fail@plt+0xb99c>
   1e3fc:	b	1e108 <__assert_fail@plt+0xb9c4>
   1e400:	ldr	r5, [pc, #536]	; 1e620 <__assert_fail@plt+0xbedc>
   1e404:	ldr	r3, [r5, #108]	; 0x6c
   1e408:	blx	r3
   1e40c:	subs	r1, r0, #0
   1e410:	ldrb	r3, [r1]
   1e414:	beq	1e614 <__assert_fail@plt+0xbed0>
   1e418:	cmp	r3, #0
   1e41c:	str	r1, [sp, #12]
   1e420:	beq	1e198 <__assert_fail@plt+0xba54>
   1e424:	bl	123e4 <strlen@plt>
   1e428:	ldr	r1, [sp, #12]
   1e42c:	add	r0, r0, #7
   1e430:	cmp	r0, #106	; 0x6a
   1e434:	bhi	1e198 <__assert_fail@plt+0xba54>
   1e438:	mov	r2, #107	; 0x6b
   1e43c:	add	r0, sp, #62	; 0x3e
   1e440:	bl	124bc <strncpy@plt>
   1e444:	mov	r2, #108	; 0x6c
   1e448:	ldr	r1, [pc, #492]	; 1e63c <__assert_fail@plt+0xbef8>
   1e44c:	add	r0, sp, #62	; 0x3e
   1e450:	bl	12468 <__strcat_chk@plt>
   1e454:	add	r0, sp, #62	; 0x3e
   1e458:	strb	fp, [sp, #169]	; 0xa9
   1e45c:	bl	123e4 <strlen@plt>
   1e460:	add	r5, sp, #60	; 0x3c
   1e464:	mov	r3, sl
   1e468:	add	sl, sp, #62	; 0x3e
   1e46c:	add	fp, r0, #2
   1e470:	b	1e380 <__assert_fail@plt+0xbc3c>
   1e474:	ldr	r5, [pc, #420]	; 1e620 <__assert_fail@plt+0xbedc>
   1e478:	ldr	r2, [r4, #4]
   1e47c:	ldr	r3, [r5, #112]	; 0x70
   1e480:	orrs	r3, r2, r3
   1e484:	beq	1e5ac <__assert_fail@plt+0xbe68>
   1e488:	ldr	r0, [r4]
   1e48c:	bl	12708 <close@plt>
   1e490:	mvn	r3, #0
   1e494:	str	r3, [r4]
   1e498:	ldr	r3, [r5, #112]	; 0x70
   1e49c:	b	1e3c8 <__assert_fail@plt+0xbc84>
   1e4a0:	bl	12150 <gcry_free@plt>
   1e4a4:	ldr	r5, [pc, #372]	; 1e620 <__assert_fail@plt+0xbedc>
   1e4a8:	b	1e198 <__assert_fail@plt+0xba54>
   1e4ac:	cmp	r2, #0
   1e4b0:	beq	1e3e0 <__assert_fail@plt+0xbc9c>
   1e4b4:	ldr	r6, [r4]
   1e4b8:	b	1e1d4 <__assert_fail@plt+0xba90>
   1e4bc:	mov	r0, #2
   1e4c0:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e4c4:	bl	126fc <gpgrt_fileno@plt>
   1e4c8:	bl	126b4 <isatty@plt>
   1e4cc:	cmp	r0, #0
   1e4d0:	beq	1e3b4 <__assert_fail@plt+0xbc70>
   1e4d4:	mov	r0, #2
   1e4d8:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e4dc:	mov	r5, r0
   1e4e0:	bl	1245c <__errno_location@plt>
   1e4e4:	ldr	r0, [r0]
   1e4e8:	bl	12330 <strerror@plt>
   1e4ec:	ldr	r1, [pc, #332]	; 1e640 <__assert_fail@plt+0xbefc>
   1e4f0:	mov	r2, r0
   1e4f4:	mov	r0, r5
   1e4f8:	bl	12678 <gpgrt_fprintf@plt>
   1e4fc:	b	1e3b4 <__assert_fail@plt+0xbc70>
   1e500:	ldr	sl, [pc, #276]	; 1e61c <__assert_fail@plt+0xbed8>
   1e504:	str	r6, [sl]
   1e508:	b	1e074 <__assert_fail@plt+0xb930>
   1e50c:	ldrb	r3, [r0, #2]
   1e510:	add	lr, r0, #2
   1e514:	sub	r3, r3, #48	; 0x30
   1e518:	uxtb	r2, r3
   1e51c:	cmp	r2, #9
   1e520:	bhi	1e338 <__assert_fail@plt+0xbbf4>
   1e524:	ldr	r5, [pc, #260]	; 1e630 <__assert_fail@plt+0xbeec>
   1e528:	b	1e53c <__assert_fail@plt+0xbdf8>
   1e52c:	add	r3, r3, r3, lsl #2
   1e530:	add	r3, r2, r3, lsl #1
   1e534:	cmp	r3, r5
   1e538:	bhi	1e338 <__assert_fail@plt+0xbbf4>
   1e53c:	ldrb	r1, [lr, #1]!
   1e540:	sub	r2, r1, #48	; 0x30
   1e544:	uxtb	ip, r2
   1e548:	cmp	ip, #9
   1e54c:	bls	1e52c <__assert_fail@plt+0xbde8>
   1e550:	cmp	r1, #0
   1e554:	clz	r2, r3
   1e558:	lsr	r2, r2, #5
   1e55c:	moveq	r1, r2
   1e560:	movne	r1, #1
   1e564:	cmp	r1, #0
   1e568:	bne	1e338 <__assert_fail@plt+0xbbf4>
   1e56c:	mov	r2, #10
   1e570:	rev16	r3, r3
   1e574:	strh	r3, [sp, #34]	; 0x22
   1e578:	strh	r2, [sp, #32]
   1e57c:	mov	r3, r2
   1e580:	strb	r1, [r0]
   1e584:	str	r1, [sp, #36]	; 0x24
   1e588:	str	r1, [sp, #40]	; 0x28
   1e58c:	str	r1, [sp, #44]	; 0x2c
   1e590:	str	r1, [sp, #48]	; 0x30
   1e594:	str	r1, [sp, #52]	; 0x34
   1e598:	str	r1, [sp, #56]	; 0x38
   1e59c:	add	r5, sp, #32
   1e5a0:	add	r2, sp, #40	; 0x28
   1e5a4:	mov	fp, #28
   1e5a8:	b	1e2b8 <__assert_fail@plt+0xbb74>
   1e5ac:	mov	r0, #2
   1e5b0:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e5b4:	bl	126fc <gpgrt_fileno@plt>
   1e5b8:	bl	126b4 <isatty@plt>
   1e5bc:	cmp	r0, #0
   1e5c0:	beq	1e488 <__assert_fail@plt+0xbd44>
   1e5c4:	mov	r0, #2
   1e5c8:	bl	1239c <_gpgrt_get_std_stream@plt>
   1e5cc:	mov	fp, r0
   1e5d0:	bl	1245c <__errno_location@plt>
   1e5d4:	ldr	r0, [r0]
   1e5d8:	bl	12330 <strerror@plt>
   1e5dc:	mov	r3, sl
   1e5e0:	mov	r2, r6
   1e5e4:	ldr	r1, [pc, #88]	; 1e644 <__assert_fail@plt+0xbf00>
   1e5e8:	str	r0, [sp]
   1e5ec:	mov	r0, fp
   1e5f0:	bl	12678 <gpgrt_fprintf@plt>
   1e5f4:	b	1e488 <__assert_fail@plt+0xbd44>
   1e5f8:	bl	1218c <__stack_chk_fail@plt>
   1e5fc:	mov	r0, sl
   1e600:	str	r3, [sp, #12]
   1e604:	ldr	sl, [pc, #44]	; 1e638 <__assert_fail@plt+0xbef4>
   1e608:	bl	12150 <gcry_free@plt>
   1e60c:	ldr	r3, [sp, #12]
   1e610:	b	1e380 <__assert_fail@plt+0xbc3c>
   1e614:	udf	#0
   1e618:	andeq	sl, r3, r8, asr fp
   1e61c:	andeq	sp, r3, r4, lsl #6
   1e620:	andeq	sp, r3, ip, asr #6
   1e624:	andeq	r9, r2, r8, lsr r1
   1e628:	andeq	r9, r2, r8, lsl r0
   1e62c:	andeq	r9, r2, r0, lsr #32
   1e630:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1e634:	andeq	r9, r2, r4, asr r1
   1e638:	andeq	r6, r2, r4, ror #29
   1e63c:	andeq	r9, r2, r4, ror #1
   1e640:	andeq	r9, r2, ip, ror #1
   1e644:	andeq	r9, r2, r8, lsl r1
   1e648:	ldr	r3, [pc, #16]	; 1e660 <__assert_fail@plt+0xbf1c>
   1e64c:	cmp	r0, #0
   1e650:	movne	r2, #0
   1e654:	ldr	r0, [r3, #116]	; 0x74
   1e658:	strne	r2, [r3, #116]	; 0x74
   1e65c:	bx	lr
   1e660:	andeq	sp, r3, ip, asr #6
   1e664:	ldr	r2, [pc, #12]	; 1e678 <__assert_fail@plt+0xbf34>
   1e668:	ldr	r3, [r2, #116]	; 0x74
   1e66c:	add	r3, r3, #1
   1e670:	str	r3, [r2, #116]	; 0x74
   1e674:	bx	lr
   1e678:	andeq	sp, r3, ip, asr #6
   1e67c:	ldr	r3, [pc, #12]	; 1e690 <__assert_fail@plt+0xbf4c>
   1e680:	cmp	r0, #0
   1e684:	mvn	r1, #0
   1e688:	moveq	r0, r3
   1e68c:	b	1d6c0 <__assert_fail@plt+0xaf7c>
   1e690:	andeq	r7, r2, r8, ror #4
   1e694:	ldr	r3, [pc, #4]	; 1e6a0 <__assert_fail@plt+0xbf5c>
   1e698:	str	r0, [r3, #108]	; 0x6c
   1e69c:	bx	lr
   1e6a0:	andeq	sp, r3, ip, asr #6
   1e6a4:	ldr	r3, [pc, #4]	; 1e6b0 <__assert_fail@plt+0xbf6c>
   1e6a8:	str	r0, [r3, #104]	; 0x68
   1e6ac:	bx	lr
   1e6b0:	andeq	sp, r3, ip, asr #6
   1e6b4:	cmp	r0, #0
   1e6b8:	push	{r4, r5, r6, lr}
   1e6bc:	mov	r4, r1
   1e6c0:	ldr	r5, [pc, #60]	; 1e704 <__assert_fail@plt+0xbfc0>
   1e6c4:	beq	1e6e0 <__assert_fail@plt+0xbf9c>
   1e6c8:	mov	r1, r0
   1e6cc:	mov	r2, #79	; 0x4f
   1e6d0:	add	r0, r5, #20
   1e6d4:	bl	124bc <strncpy@plt>
   1e6d8:	mov	r3, #0
   1e6dc:	strb	r3, [r5, #99]	; 0x63
   1e6e0:	and	r1, r4, #1
   1e6e4:	and	r2, r4, #2
   1e6e8:	and	r3, r4, #4
   1e6ec:	and	r4, r4, #256	; 0x100
   1e6f0:	str	r1, [r5, #16]
   1e6f4:	str	r2, [r5, #12]
   1e6f8:	str	r3, [r5, #100]	; 0x64
   1e6fc:	str	r4, [r5, #112]	; 0x70
   1e700:	pop	{r4, r5, r6, pc}
   1e704:	andeq	sp, r3, ip, asr #6
   1e708:	cmp	r0, #0
   1e70c:	beq	1e75c <__assert_fail@plt+0xc018>
   1e710:	ldr	r2, [pc, #76]	; 1e764 <__assert_fail@plt+0xc020>
   1e714:	ldr	r3, [r2, #16]
   1e718:	ldr	r1, [r2, #12]
   1e71c:	adds	r3, r3, #0
   1e720:	movne	r3, #1
   1e724:	cmp	r1, #0
   1e728:	str	r3, [r0]
   1e72c:	orrne	r3, r3, #2
   1e730:	strne	r3, [r0]
   1e734:	ldr	r3, [r2, #100]	; 0x64
   1e738:	cmp	r3, #0
   1e73c:	ldrne	r3, [r0]
   1e740:	orrne	r3, r3, #4
   1e744:	strne	r3, [r0]
   1e748:	ldr	r3, [r2, #112]	; 0x70
   1e74c:	cmp	r3, #0
   1e750:	ldrne	r3, [r0]
   1e754:	orrne	r3, r3, #256	; 0x100
   1e758:	strne	r3, [r0]
   1e75c:	ldr	r0, [pc, #4]	; 1e768 <__assert_fail@plt+0xc024>
   1e760:	bx	lr
   1e764:	andeq	sp, r3, ip, asr #6
   1e768:	andeq	sp, r3, r0, ror #6
   1e76c:	ldr	r3, [pc, #88]	; 1e7cc <__assert_fail@plt+0xc088>
   1e770:	push	{r4, lr}
   1e774:	mov	r4, r0
   1e778:	ldr	r0, [r3]
   1e77c:	cmp	r0, #0
   1e780:	beq	1e7a4 <__assert_fail@plt+0xc060>
   1e784:	bl	126fc <gpgrt_fileno@plt>
   1e788:	cmn	r0, #1
   1e78c:	sub	r3, r0, r4
   1e790:	clz	r3, r3
   1e794:	lsr	r3, r3, #5
   1e798:	moveq	r3, #0
   1e79c:	cmp	r3, #0
   1e7a0:	bne	1e7c4 <__assert_fail@plt+0xc080>
   1e7a4:	ldr	r3, [pc, #36]	; 1e7d0 <__assert_fail@plt+0xc08c>
   1e7a8:	ldr	r3, [r3]
   1e7ac:	cmn	r3, #1
   1e7b0:	sub	r0, r3, r4
   1e7b4:	clz	r0, r0
   1e7b8:	lsr	r0, r0, #5
   1e7bc:	moveq	r0, #0
   1e7c0:	pop	{r4, pc}
   1e7c4:	mov	r0, #1
   1e7c8:	pop	{r4, pc}
   1e7cc:	andeq	sp, r3, ip, asr #6
   1e7d0:	andeq	sp, r3, r4, lsl #6
   1e7d4:	ldr	r3, [pc, #20]	; 1e7f0 <__assert_fail@plt+0xc0ac>
   1e7d8:	ldr	r0, [r3]
   1e7dc:	cmp	r0, #0
   1e7e0:	beq	1e7e8 <__assert_fail@plt+0xc0a4>
   1e7e4:	b	126fc <gpgrt_fileno@plt>
   1e7e8:	mvn	r0, #0
   1e7ec:	bx	lr
   1e7f0:	andeq	sp, r3, ip, asr #6
   1e7f4:	push	{r4, lr}
   1e7f8:	ldr	r4, [pc, #52]	; 1e834 <__assert_fail@plt+0xc0f0>
   1e7fc:	ldr	r0, [r4]
   1e800:	cmp	r0, #0
   1e804:	popne	{r4, pc}
   1e808:	ldr	r0, [pc, #40]	; 1e838 <__assert_fail@plt+0xc0f4>
   1e80c:	mvn	r1, #0
   1e810:	bl	1d6c0 <__assert_fail@plt+0xaf7c>
   1e814:	ldr	r0, [r4]
   1e818:	cmp	r0, #0
   1e81c:	popne	{r4, pc}
   1e820:	ldr	r3, [pc, #20]	; 1e83c <__assert_fail@plt+0xc0f8>
   1e824:	mov	r2, #672	; 0x2a0
   1e828:	ldr	r1, [pc, #16]	; 1e840 <__assert_fail@plt+0xc0fc>
   1e82c:	ldr	r0, [pc, #16]	; 1e844 <__assert_fail@plt+0xc100>
   1e830:	bl	12744 <__assert_fail@plt>
   1e834:	andeq	sp, r3, ip, asr #6
   1e838:	andeq	r7, r2, r8, ror #4
   1e83c:	andeq	r9, r2, r8
   1e840:	andeq	r9, r2, r8, lsr #1
   1e844:	andeq	r9, r2, r0, asr #1
   1e848:	push	{r1, r2, r3}
   1e84c:	mov	r3, #0
   1e850:	push	{r4, lr}
   1e854:	sub	sp, sp, #20
   1e858:	ldr	r4, [pc, #68]	; 1e8a4 <__assert_fail@plt+0xc160>
   1e85c:	ldr	r2, [sp, #28]
   1e860:	add	ip, sp, #32
   1e864:	ldr	r1, [r4]
   1e868:	stm	sp, {r2, ip}
   1e86c:	str	r1, [sp, #12]
   1e870:	mov	r2, r3
   1e874:	mov	r1, r3
   1e878:	str	ip, [sp, #8]
   1e87c:	bl	1dbdc <__assert_fail@plt+0xb498>
   1e880:	ldr	r2, [sp, #12]
   1e884:	ldr	r3, [r4]
   1e888:	cmp	r2, r3
   1e88c:	bne	1e8a0 <__assert_fail@plt+0xc15c>
   1e890:	add	sp, sp, #20
   1e894:	pop	{r4, lr}
   1e898:	add	sp, sp, #12
   1e89c:	bx	lr
   1e8a0:	bl	1218c <__stack_chk_fail@plt>
   1e8a4:	andeq	sl, r3, r8, asr fp
   1e8a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e8ac:	sub	sp, sp, #12
   1e8b0:	mov	r3, #0
   1e8b4:	stm	sp, {r1, r2}
   1e8b8:	mov	r2, r3
   1e8bc:	mov	r1, r3
   1e8c0:	bl	1dbdc <__assert_fail@plt+0xb498>
   1e8c4:	add	sp, sp, #12
   1e8c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1e8d0:	sub	sp, sp, #12
   1e8d4:	str	r2, [sp]
   1e8d8:	mov	r2, #0
   1e8dc:	str	r3, [sp, #4]
   1e8e0:	mov	r3, r1
   1e8e4:	mov	r1, r2
   1e8e8:	bl	1dbdc <__assert_fail@plt+0xb498>
   1e8ec:	add	sp, sp, #12
   1e8f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8f4:	b	1df8c <__assert_fail@plt+0xb848>
   1e8f8:	push	{r0, r1, r2, r3}
   1e8fc:	mov	r3, #0
   1e900:	push	{r4, lr}
   1e904:	sub	sp, sp, #16
   1e908:	ldr	r4, [pc, #72]	; 1e958 <__assert_fail@plt+0xc214>
   1e90c:	ldr	r2, [sp, #24]
   1e910:	add	ip, sp, #28
   1e914:	ldr	r0, [r4]
   1e918:	stm	sp, {r2, ip}
   1e91c:	mov	r1, r3
   1e920:	mov	r2, r3
   1e924:	str	r0, [sp, #12]
   1e928:	mov	r0, #2
   1e92c:	str	ip, [sp, #8]
   1e930:	bl	1dbdc <__assert_fail@plt+0xb498>
   1e934:	ldr	r2, [sp, #12]
   1e938:	ldr	r3, [r4]
   1e93c:	cmp	r2, r3
   1e940:	bne	1e954 <__assert_fail@plt+0xc210>
   1e944:	add	sp, sp, #16
   1e948:	pop	{r4, lr}
   1e94c:	add	sp, sp, #16
   1e950:	bx	lr
   1e954:	bl	1218c <__stack_chk_fail@plt>
   1e958:	andeq	sl, r3, r8, asr fp
   1e95c:	push	{r0, r1, r2, r3}
   1e960:	mov	r3, #0
   1e964:	push	{r4, lr}
   1e968:	sub	sp, sp, #16
   1e96c:	ldr	r4, [pc, #96]	; 1e9d4 <__assert_fail@plt+0xc290>
   1e970:	ldr	r2, [sp, #24]
   1e974:	add	ip, sp, #28
   1e978:	ldr	r0, [r4]
   1e97c:	mov	r1, r3
   1e980:	stm	sp, {r2, ip}
   1e984:	str	r0, [sp, #12]
   1e988:	mov	r2, r3
   1e98c:	mov	r0, #4
   1e990:	str	ip, [sp, #8]
   1e994:	bl	1dbdc <__assert_fail@plt+0xb498>
   1e998:	ldr	r2, [pc, #56]	; 1e9d8 <__assert_fail@plt+0xc294>
   1e99c:	ldr	r1, [pc, #56]	; 1e9dc <__assert_fail@plt+0xc298>
   1e9a0:	ldr	r3, [r2, #116]	; 0x74
   1e9a4:	cmp	r3, r1
   1e9a8:	addle	r3, r3, #1
   1e9ac:	strle	r3, [r2, #116]	; 0x74
   1e9b0:	ldr	r2, [sp, #12]
   1e9b4:	ldr	r3, [r4]
   1e9b8:	cmp	r2, r3
   1e9bc:	bne	1e9d0 <__assert_fail@plt+0xc28c>
   1e9c0:	add	sp, sp, #16
   1e9c4:	pop	{r4, lr}
   1e9c8:	add	sp, sp, #16
   1e9cc:	bx	lr
   1e9d0:	bl	1218c <__stack_chk_fail@plt>
   1e9d4:	andeq	sl, r3, r8, asr fp
   1e9d8:	andeq	sp, r3, ip, asr #6
   1e9dc:	andeq	r7, r0, pc, lsr #10
   1e9e0:	push	{r0, r1, r2, r3}
   1e9e4:	mov	r0, #5
   1e9e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e9ec:	sub	sp, sp, #20
   1e9f0:	ldr	r3, [pc, #40]	; 1ea20 <__assert_fail@plt+0xc2dc>
   1e9f4:	ldr	r2, [sp, #24]
   1e9f8:	add	ip, sp, #28
   1e9fc:	ldr	lr, [r3]
   1ea00:	mov	r3, #0
   1ea04:	stm	sp, {r2, ip}
   1ea08:	mov	r1, r3
   1ea0c:	mov	r2, r3
   1ea10:	str	lr, [sp, #12]
   1ea14:	str	ip, [sp, #8]
   1ea18:	bl	1dbdc <__assert_fail@plt+0xb498>
   1ea1c:	bl	126e4 <abort@plt>
   1ea20:	andeq	sl, r3, r8, asr fp
   1ea24:	push	{r4, lr}
   1ea28:	mov	r4, r0
   1ea2c:	bl	1fd44 <__assert_fail@plt+0xd600>
   1ea30:	cmp	r0, #0
   1ea34:	beq	1ea48 <__assert_fail@plt+0xc304>
   1ea38:	mov	r1, r4
   1ea3c:	mov	r0, #0
   1ea40:	pop	{r4, lr}
   1ea44:	b	1d6c0 <__assert_fail@plt+0xaf7c>
   1ea48:	bl	1245c <__errno_location@plt>
   1ea4c:	ldr	r0, [r0]
   1ea50:	bl	12330 <strerror@plt>
   1ea54:	mov	r1, r0
   1ea58:	ldr	r0, [pc]	; 1ea60 <__assert_fail@plt+0xc31c>
   1ea5c:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   1ea60:	andeq	r9, r2, r0, lsl #3
   1ea64:	push	{r0, r1, r2, r3}
   1ea68:	mov	r0, #6
   1ea6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ea70:	sub	sp, sp, #20
   1ea74:	ldr	r3, [pc, #40]	; 1eaa4 <__assert_fail@plt+0xc360>
   1ea78:	ldr	r2, [sp, #24]
   1ea7c:	add	ip, sp, #28
   1ea80:	ldr	lr, [r3]
   1ea84:	mov	r3, #0
   1ea88:	stm	sp, {r2, ip}
   1ea8c:	mov	r1, r3
   1ea90:	mov	r2, r3
   1ea94:	str	lr, [sp, #12]
   1ea98:	str	ip, [sp, #8]
   1ea9c:	bl	1dbdc <__assert_fail@plt+0xb498>
   1eaa0:	bl	126e4 <abort@plt>
   1eaa4:	andeq	sl, r3, r8, asr fp
   1eaa8:	push	{r0, r1, r2, r3}
   1eaac:	mov	r3, #0
   1eab0:	push	{r4, lr}
   1eab4:	sub	sp, sp, #16
   1eab8:	ldr	r4, [pc, #72]	; 1eb08 <__assert_fail@plt+0xc3c4>
   1eabc:	ldr	r2, [sp, #24]
   1eac0:	add	ip, sp, #28
   1eac4:	ldr	r0, [r4]
   1eac8:	stm	sp, {r2, ip}
   1eacc:	mov	r1, r3
   1ead0:	mov	r2, r3
   1ead4:	str	r0, [sp, #12]
   1ead8:	mov	r0, #7
   1eadc:	str	ip, [sp, #8]
   1eae0:	bl	1dbdc <__assert_fail@plt+0xb498>
   1eae4:	ldr	r2, [sp, #12]
   1eae8:	ldr	r3, [r4]
   1eaec:	cmp	r2, r3
   1eaf0:	bne	1eb04 <__assert_fail@plt+0xc3c0>
   1eaf4:	add	sp, sp, #16
   1eaf8:	pop	{r4, lr}
   1eafc:	add	sp, sp, #16
   1eb00:	bx	lr
   1eb04:	bl	1218c <__stack_chk_fail@plt>
   1eb08:	andeq	sl, r3, r8, asr fp
   1eb0c:	push	{r1, r2, r3}
   1eb10:	mov	r3, #0
   1eb14:	push	{r4, lr}
   1eb18:	sub	sp, sp, #20
   1eb1c:	ldr	r4, [pc, #72]	; 1eb6c <__assert_fail@plt+0xc428>
   1eb20:	ldr	r1, [sp, #28]
   1eb24:	add	ip, sp, #32
   1eb28:	ldr	lr, [r4]
   1eb2c:	mov	r2, r0
   1eb30:	stm	sp, {r1, ip}
   1eb34:	mov	r0, #7
   1eb38:	mov	r1, r3
   1eb3c:	str	lr, [sp, #12]
   1eb40:	str	ip, [sp, #8]
   1eb44:	bl	1dbdc <__assert_fail@plt+0xb498>
   1eb48:	ldr	r2, [sp, #12]
   1eb4c:	ldr	r3, [r4]
   1eb50:	cmp	r2, r3
   1eb54:	bne	1eb68 <__assert_fail@plt+0xc424>
   1eb58:	add	sp, sp, #20
   1eb5c:	pop	{r4, lr}
   1eb60:	add	sp, sp, #12
   1eb64:	bx	lr
   1eb68:	bl	1218c <__stack_chk_fail@plt>
   1eb6c:	andeq	sl, r3, r8, asr fp
   1eb70:	push	{r0, r1, r2, r3}
   1eb74:	mov	r3, #0
   1eb78:	push	{r4, lr}
   1eb7c:	sub	sp, sp, #16
   1eb80:	ldr	r4, [pc, #80]	; 1ebd8 <__assert_fail@plt+0xc494>
   1eb84:	ldr	r0, [sp, #24]
   1eb88:	add	ip, sp, #28
   1eb8c:	ldr	r1, [r4]
   1eb90:	str	r0, [sp]
   1eb94:	subs	r0, r0, r3
   1eb98:	mov	r2, r3
   1eb9c:	movne	r0, #1
   1eba0:	str	r1, [sp, #12]
   1eba4:	str	ip, [sp, #4]
   1eba8:	mov	r1, r3
   1ebac:	str	ip, [sp, #8]
   1ebb0:	bl	1dbdc <__assert_fail@plt+0xb498>
   1ebb4:	ldr	r2, [sp, #12]
   1ebb8:	ldr	r3, [r4]
   1ebbc:	cmp	r2, r3
   1ebc0:	bne	1ebd4 <__assert_fail@plt+0xc490>
   1ebc4:	add	sp, sp, #16
   1ebc8:	pop	{r4, lr}
   1ebcc:	add	sp, sp, #16
   1ebd0:	bx	lr
   1ebd4:	bl	1218c <__stack_chk_fail@plt>
   1ebd8:	andeq	sl, r3, r8, asr fp
   1ebdc:	mov	r1, #0
   1ebe0:	mov	r0, #1
   1ebe4:	b	1df8c <__assert_fail@plt+0xb848>
   1ebe8:	push	{r4, r5, r6, r7, r8, lr}
   1ebec:	subs	r7, r0, #0
   1ebf0:	mov	r4, r1
   1ebf4:	mov	r5, r2
   1ebf8:	beq	1ec78 <__assert_fail@plt+0xc534>
   1ebfc:	ldrb	r3, [r7]
   1ec00:	cmp	r3, #0
   1ec04:	bne	1ec60 <__assert_fail@plt+0xc51c>
   1ec08:	cmp	r5, #0
   1ec0c:	bne	1ec1c <__assert_fail@plt+0xc4d8>
   1ec10:	ldr	r0, [pc, #132]	; 1ec9c <__assert_fail@plt+0xc558>
   1ec14:	pop	{r4, r5, r6, r7, r8, lr}
   1ec18:	b	1eb70 <__assert_fail@plt+0xc42c>
   1ec1c:	ldr	r0, [pc, #124]	; 1eca0 <__assert_fail@plt+0xc55c>
   1ec20:	ldrb	r1, [r4], #1
   1ec24:	bl	1eb70 <__assert_fail@plt+0xc42c>
   1ec28:	cmp	r5, #1
   1ec2c:	sub	r5, r5, #2
   1ec30:	beq	1ec10 <__assert_fail@plt+0xc4cc>
   1ec34:	add	r5, r5, #1
   1ec38:	ldr	r6, [pc, #100]	; 1eca4 <__assert_fail@plt+0xc560>
   1ec3c:	add	r5, r4, r5
   1ec40:	ldrb	r1, [r4], #1
   1ec44:	mov	r0, r6
   1ec48:	bl	1eb70 <__assert_fail@plt+0xc42c>
   1ec4c:	cmp	r4, r5
   1ec50:	bne	1ec40 <__assert_fail@plt+0xc4fc>
   1ec54:	cmp	r7, #0
   1ec58:	popeq	{r4, r5, r6, r7, r8, pc}
   1ec5c:	b	1ec10 <__assert_fail@plt+0xc4cc>
   1ec60:	mov	r1, r7
   1ec64:	ldr	r0, [pc, #60]	; 1eca8 <__assert_fail@plt+0xc564>
   1ec68:	bl	1eaa8 <__assert_fail@plt+0xc364>
   1ec6c:	cmp	r5, #0
   1ec70:	beq	1ec10 <__assert_fail@plt+0xc4cc>
   1ec74:	b	1ec1c <__assert_fail@plt+0xc4d8>
   1ec78:	cmp	r2, #0
   1ec7c:	popeq	{r4, r5, r6, r7, r8, pc}
   1ec80:	ldr	r0, [pc, #24]	; 1eca0 <__assert_fail@plt+0xc55c>
   1ec84:	ldrb	r1, [r4], #1
   1ec88:	bl	1eb70 <__assert_fail@plt+0xc42c>
   1ec8c:	cmp	r5, #1
   1ec90:	sub	r5, r5, #2
   1ec94:	bne	1ec34 <__assert_fail@plt+0xc4f0>
   1ec98:	pop	{r4, r5, r6, r7, r8, pc}
   1ec9c:	muleq	r2, r8, r3
   1eca0:	andeq	r9, r2, r8, lsr #3
   1eca4:	andeq	r9, r2, r0, lsr #3
   1eca8:	muleq	r2, ip, r1
   1ecac:	mov	r1, r0
   1ecb0:	ldr	r0, [pc]	; 1ecb8 <__assert_fail@plt+0xc574>
   1ecb4:	b	1eaa8 <__assert_fail@plt+0xc364>
   1ecb8:			; <UNDEFINED> instruction: 0x000291b0
   1ecbc:	push	{lr}		; (str lr, [sp, #-4]!)
   1ecc0:	sub	sp, sp, #12
   1ecc4:	mov	r3, r1
   1ecc8:	str	r2, [sp]
   1eccc:	ldr	r1, [pc, #12]	; 1ece0 <__assert_fail@plt+0xc59c>
   1ecd0:	mov	r2, r0
   1ecd4:	mov	r0, #6
   1ecd8:	bl	1e848 <__assert_fail@plt+0xc104>
   1ecdc:	bl	126e4 <abort@plt>
   1ece0:	ldrdeq	r9, [r2], -r0
   1ece4:	push	{lr}		; (str lr, [sp, #-4]!)
   1ece8:	sub	sp, sp, #12
   1ecec:	stm	sp, {r1, r2}
   1ecf0:	mov	r2, r0
   1ecf4:	ldr	r1, [pc, #8]	; 1ed04 <__assert_fail@plt+0xc5c0>
   1ecf8:	mov	r0, #6
   1ecfc:	bl	1e848 <__assert_fail@plt+0xc104>
   1ed00:	bl	126e4 <abort@plt>
   1ed04:	strdeq	r9, [r2], -r0
   1ed08:	cmp	r0, #100	; 0x64
   1ed0c:	ldrls	r3, [pc, #16]	; 1ed24 <__assert_fail@plt+0xc5e0>
   1ed10:	addls	r0, r3, r0, lsl #2
   1ed14:	ldrls	r0, [r0, #1244]	; 0x4dc
   1ed18:	addls	r0, r3, r0
   1ed1c:	ldrhi	r0, [pc, #4]	; 1ed28 <__assert_fail@plt+0xc5e4>
   1ed20:	bx	lr
   1ed24:	andeq	r9, r2, r8, lsl r2
   1ed28:	andeq	r9, r2, r8, lsl #17
   1ed2c:	uxth	r0, r0
   1ed30:	cmp	r0, #96	; 0x60
   1ed34:	beq	1ee20 <__assert_fail@plt+0xc6dc>
   1ed38:	bls	1ed70 <__assert_fail@plt+0xc62c>
   1ed3c:	cmp	r0, #107	; 0x6b
   1ed40:	beq	1ee10 <__assert_fail@plt+0xc6cc>
   1ed44:	bls	1eda0 <__assert_fail@plt+0xc65c>
   1ed48:	cmp	r0, #125	; 0x7d
   1ed4c:	beq	1ee00 <__assert_fail@plt+0xc6bc>
   1ed50:	cmp	r0, #185	; 0xb9
   1ed54:	beq	1ede8 <__assert_fail@plt+0xc6a4>
   1ed58:	ldr	r2, [pc, #200]	; 1ee28 <__assert_fail@plt+0xc6e4>
   1ed5c:	ldr	r3, [pc, #200]	; 1ee2c <__assert_fail@plt+0xc6e8>
   1ed60:	cmp	r0, #116	; 0x74
   1ed64:	moveq	r0, r2
   1ed68:	movne	r0, r3
   1ed6c:	bx	lr
   1ed70:	cmp	r0, #54	; 0x36
   1ed74:	beq	1ee18 <__assert_fail@plt+0xc6d4>
   1ed78:	bls	1edc0 <__assert_fail@plt+0xc67c>
   1ed7c:	cmp	r0, #94	; 0x5e
   1ed80:	beq	1ee08 <__assert_fail@plt+0xc6c4>
   1ed84:	bhi	1edf8 <__assert_fail@plt+0xc6b4>
   1ed88:	ldr	r2, [pc, #160]	; 1ee30 <__assert_fail@plt+0xc6ec>
   1ed8c:	ldr	r3, [pc, #152]	; 1ee2c <__assert_fail@plt+0xc6e8>
   1ed90:	cmp	r0, #57	; 0x39
   1ed94:	moveq	r0, r2
   1ed98:	movne	r0, r3
   1ed9c:	bx	lr
   1eda0:	cmp	r0, #98	; 0x62
   1eda4:	beq	1edf0 <__assert_fail@plt+0xc6ac>
   1eda8:	ldr	r2, [pc, #132]	; 1ee34 <__assert_fail@plt+0xc6f0>
   1edac:	ldr	r3, [pc, #120]	; 1ee2c <__assert_fail@plt+0xc6e8>
   1edb0:	cmp	r0, #101	; 0x65
   1edb4:	moveq	r0, r2
   1edb8:	movne	r0, r3
   1edbc:	bx	lr
   1edc0:	cmp	r0, #9
   1edc4:	bne	1edd0 <__assert_fail@plt+0xc68c>
   1edc8:	ldr	r0, [pc, #104]	; 1ee38 <__assert_fail@plt+0xc6f4>
   1edcc:	bx	lr
   1edd0:	ldr	r2, [pc, #100]	; 1ee3c <__assert_fail@plt+0xc6f8>
   1edd4:	ldr	r3, [pc, #80]	; 1ee2c <__assert_fail@plt+0xc6e8>
   1edd8:	cmp	r0, #17
   1eddc:	moveq	r0, r2
   1ede0:	movne	r0, r3
   1ede4:	bx	lr
   1ede8:	ldr	r0, [pc, #80]	; 1ee40 <__assert_fail@plt+0xc6fc>
   1edec:	bx	lr
   1edf0:	ldr	r0, [pc, #76]	; 1ee44 <__assert_fail@plt+0xc700>
   1edf4:	bx	lr
   1edf8:	ldr	r0, [pc, #72]	; 1ee48 <__assert_fail@plt+0xc704>
   1edfc:	bx	lr
   1ee00:	ldr	r0, [pc, #68]	; 1ee4c <__assert_fail@plt+0xc708>
   1ee04:	bx	lr
   1ee08:	ldr	r0, [pc, #64]	; 1ee50 <__assert_fail@plt+0xc70c>
   1ee0c:	bx	lr
   1ee10:	ldr	r0, [pc, #60]	; 1ee54 <__assert_fail@plt+0xc710>
   1ee14:	bx	lr
   1ee18:	ldr	r0, [pc, #28]	; 1ee3c <__assert_fail@plt+0xc6f8>
   1ee1c:	bx	lr
   1ee20:	ldr	r0, [pc, #48]	; 1ee58 <__assert_fail@plt+0xc714>
   1ee24:	bx	lr
   1ee28:	andeq	r6, r2, r4, lsl #9
   1ee2c:			; <UNDEFINED> instruction: 0x000298b0
   1ee30:	andeq	r9, r2, r8, lsr #17
   1ee34:	muleq	r2, r4, r8
   1ee38:	andeq	r6, r2, r0, ror fp
   1ee3c:	andeq	r9, r2, r0, lsr #17
   1ee40:	andeq	r5, r2, r0, asr #15
   1ee44:	andeq	r9, r2, r4, lsr #17
   1ee48:	muleq	r2, r8, r8
   1ee4c:	andeq	r9, r2, ip, lsl #17
   1ee50:	muleq	r2, r0, r8
   1ee54:	andeq	r8, r2, ip, ror #16
   1ee58:	muleq	r2, ip, r8
   1ee5c:	push	{r4, r5, r6, lr}
   1ee60:	ldr	r5, [pc, #44]	; 1ee94 <__assert_fail@plt+0xc750>
   1ee64:	ldr	r3, [r5]
   1ee68:	cmp	r3, #0
   1ee6c:	popeq	{r4, r5, r6, pc}
   1ee70:	ldr	r4, [r3]
   1ee74:	ldr	r3, [r3, #4]
   1ee78:	blx	r3
   1ee7c:	ldr	r0, [r5]
   1ee80:	bl	120e4 <free@plt>
   1ee84:	subs	r3, r4, #0
   1ee88:	str	r4, [r5]
   1ee8c:	bne	1ee70 <__assert_fail@plt+0xc72c>
   1ee90:	pop	{r4, r5, r6, pc}
   1ee94:	andeq	sp, r3, r4, asr #7
   1ee98:	sub	r2, r0, #1
   1ee9c:	cmp	r2, #1
   1eea0:	bhi	1eee4 <__assert_fail@plt+0xc7a0>
   1eea4:	cmp	r1, #0
   1eea8:	push	{r4, lr}
   1eeac:	mov	r4, r1
   1eeb0:	beq	1eed0 <__assert_fail@plt+0xc78c>
   1eeb4:	cmp	r0, #1
   1eeb8:	movne	r0, #2
   1eebc:	bl	1239c <_gpgrt_get_std_stream@plt>
   1eec0:	mov	r1, r0
   1eec4:	mov	r0, r4
   1eec8:	pop	{r4, lr}
   1eecc:	b	1254c <gpgrt_fputs@plt>
   1eed0:	cmp	r0, #1
   1eed4:	movne	r0, #2
   1eed8:	bl	1239c <_gpgrt_get_std_stream@plt>
   1eedc:	pop	{r4, lr}
   1eee0:	b	121ec <gpgrt_fflush@plt>
   1eee4:	mvn	r0, #0
   1eee8:	bx	lr
   1eeec:	push	{r4, r5, r6, lr}
   1eef0:	ldr	r6, [pc, #84]	; 1ef4c <__assert_fail@plt+0xc808>
   1eef4:	ldr	r5, [r6]
   1eef8:	cmp	r5, #0
   1eefc:	beq	1ef2c <__assert_fail@plt+0xc7e8>
   1ef00:	ldr	r3, [r5, #4]
   1ef04:	cmp	r0, r3
   1ef08:	popeq	{r4, r5, r6, pc}
   1ef0c:	mov	r3, r5
   1ef10:	b	1ef20 <__assert_fail@plt+0xc7dc>
   1ef14:	ldr	r2, [r3, #4]
   1ef18:	cmp	r2, r0
   1ef1c:	popeq	{r4, r5, r6, pc}
   1ef20:	ldr	r3, [r3]
   1ef24:	cmp	r3, #0
   1ef28:	bne	1ef14 <__assert_fail@plt+0xc7d0>
   1ef2c:	mov	r4, r0
   1ef30:	mov	r0, #8
   1ef34:	bl	1230c <malloc@plt>
   1ef38:	cmp	r0, #0
   1ef3c:	strne	r0, [r6]
   1ef40:	strne	r4, [r0, #4]
   1ef44:	strne	r5, [r0]
   1ef48:	pop	{r4, r5, r6, pc}
   1ef4c:	andeq	sp, r3, r4, asr #7
   1ef50:	bx	lr
   1ef54:	ldr	r3, [pc, #136]	; 1efe4 <__assert_fail@plt+0xc8a0>
   1ef58:	push	{r4, r5, r6, lr}
   1ef5c:	str	r0, [r3, #4]
   1ef60:	ldr	r0, [pc, #128]	; 1efe8 <__assert_fail@plt+0xc8a4>
   1ef64:	bl	256ac <__assert_fail@plt+0x12f68>
   1ef68:	mov	r0, #0
   1ef6c:	bl	24928 <__assert_fail@plt+0x121e4>
   1ef70:	ldr	r0, [pc, #116]	; 1efec <__assert_fail@plt+0xc8a8>
   1ef74:	bl	12270 <gcry_check_version@plt>
   1ef78:	subs	r4, r0, #0
   1ef7c:	beq	1efb8 <__assert_fail@plt+0xc874>
   1ef80:	bl	12630 <gpg_err_init@plt>
   1ef84:	ldr	r0, [pc, #100]	; 1eff0 <__assert_fail@plt+0xc8ac>
   1ef88:	bl	12198 <gpgrt_set_alloc_func@plt>
   1ef8c:	mov	r0, #0
   1ef90:	bl	1239c <_gpgrt_get_std_stream@plt>
   1ef94:	mov	r0, #1
   1ef98:	bl	1239c <_gpgrt_get_std_stream@plt>
   1ef9c:	mov	r0, #2
   1efa0:	bl	1239c <_gpgrt_get_std_stream@plt>
   1efa4:	ldr	r0, [pc, #72]	; 1eff4 <__assert_fail@plt+0xc8b0>
   1efa8:	bl	1b868 <__assert_fail@plt+0x9124>
   1efac:	ldr	r0, [pc, #68]	; 1eff8 <__assert_fail@plt+0xc8b4>
   1efb0:	pop	{r4, r5, r6, lr}
   1efb4:	b	1e694 <__assert_fail@plt+0xbf50>
   1efb8:	mov	r2, #5
   1efbc:	ldr	r1, [pc, #56]	; 1effc <__assert_fail@plt+0xc8b8>
   1efc0:	bl	12180 <dcgettext@plt>
   1efc4:	mov	r5, r0
   1efc8:	mov	r0, r4
   1efcc:	bl	12270 <gcry_check_version@plt>
   1efd0:	ldr	r2, [pc, #20]	; 1efec <__assert_fail@plt+0xc8a8>
   1efd4:	ldr	r1, [pc, #36]	; 1f000 <__assert_fail@plt+0xc8bc>
   1efd8:	mov	r3, r0
   1efdc:	mov	r0, r5
   1efe0:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   1efe4:	andeq	sp, r3, r4, asr #7
   1efe8:	andeq	lr, r1, ip, asr lr
   1efec:	andeq	r9, r2, ip, lsr #17
   1eff0:	andeq	r2, r1, r0, asr #10
   1eff4:	muleq	r1, r8, lr
   1eff8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1effc:			; <UNDEFINED> instruction: 0x000298b4
   1f000:	ldrdeq	r9, [r2], -r8
   1f004:	andeq	r0, r0, r0
   1f008:	ldrb	r3, [r0, #1]
   1f00c:	mov	r2, r0
   1f010:	cmp	r3, #0
   1f014:	beq	1f0c0 <__assert_fail@plt+0xc97c>
   1f018:	ldrb	r1, [r0, #2]
   1f01c:	cmp	r3, #114	; 0x72
   1f020:	movne	r0, #0
   1f024:	moveq	r0, #256	; 0x100
   1f028:	cmp	r1, #0
   1f02c:	bxeq	lr
   1f030:	ldrb	r3, [r2, #3]
   1f034:	cmp	r1, #119	; 0x77
   1f038:	orreq	r0, r0, #128	; 0x80
   1f03c:	cmp	r3, #0
   1f040:	bxeq	lr
   1f044:	cmp	r3, #120	; 0x78
   1f048:	ldrb	r3, [r2, #4]
   1f04c:	orreq	r0, r0, #64	; 0x40
   1f050:	cmp	r3, #0
   1f054:	bxeq	lr
   1f058:	cmp	r3, #114	; 0x72
   1f05c:	ldrb	r3, [r2, #5]
   1f060:	orreq	r0, r0, #32
   1f064:	cmp	r3, #0
   1f068:	bxeq	lr
   1f06c:	cmp	r3, #119	; 0x77
   1f070:	ldrb	r3, [r2, #6]
   1f074:	orreq	r0, r0, #16
   1f078:	cmp	r3, #0
   1f07c:	bxeq	lr
   1f080:	cmp	r3, #120	; 0x78
   1f084:	ldrb	r3, [r2, #7]
   1f088:	orreq	r0, r0, #8
   1f08c:	cmp	r3, #0
   1f090:	bxeq	lr
   1f094:	cmp	r3, #114	; 0x72
   1f098:	ldrb	r3, [r2, #8]
   1f09c:	orreq	r0, r0, #4
   1f0a0:	cmp	r3, #0
   1f0a4:	bxeq	lr
   1f0a8:	cmp	r3, #119	; 0x77
   1f0ac:	ldrb	r3, [r2, #9]
   1f0b0:	orreq	r0, r0, #2
   1f0b4:	cmp	r3, #120	; 0x78
   1f0b8:	orreq	r0, r0, #1
   1f0bc:	bx	lr
   1f0c0:	mov	r0, r3
   1f0c4:	bx	lr
   1f0c8:	bx	lr
   1f0cc:	push	{r4, r5, lr}
   1f0d0:	sub	sp, sp, #28
   1f0d4:	ldr	r4, [pc, #160]	; 1f17c <__assert_fail@plt+0xca38>
   1f0d8:	mov	r1, sp
   1f0dc:	mov	r0, #4
   1f0e0:	ldr	r3, [r4]
   1f0e4:	str	r3, [sp, #20]
   1f0e8:	bl	121d4 <getrlimit64@plt>
   1f0ec:	mov	r1, sp
   1f0f0:	cmp	r0, #0
   1f0f4:	movne	r2, #0
   1f0f8:	movne	r3, #0
   1f0fc:	mov	r0, #4
   1f100:	strdne	r2, [sp, #8]
   1f104:	mov	r2, #0
   1f108:	mov	r3, #0
   1f10c:	strd	r2, [sp]
   1f110:	bl	1209c <setrlimit64@plt>
   1f114:	cmp	r0, #0
   1f118:	beq	1f138 <__assert_fail@plt+0xc9f4>
   1f11c:	bl	1245c <__errno_location@plt>
   1f120:	ldr	r3, [r0]
   1f124:	mov	r5, r0
   1f128:	sub	r3, r3, #22
   1f12c:	bics	r3, r3, #16
   1f130:	moveq	r0, #1
   1f134:	bne	1f154 <__assert_fail@plt+0xca10>
   1f138:	ldr	r2, [sp, #20]
   1f13c:	ldr	r3, [r4]
   1f140:	cmp	r2, r3
   1f144:	bne	1f150 <__assert_fail@plt+0xca0c>
   1f148:	add	sp, sp, #28
   1f14c:	pop	{r4, r5, pc}
   1f150:	bl	1218c <__stack_chk_fail@plt>
   1f154:	ldr	r1, [pc, #36]	; 1f180 <__assert_fail@plt+0xca3c>
   1f158:	mov	r2, #5
   1f15c:	mov	r0, #0
   1f160:	bl	12180 <dcgettext@plt>
   1f164:	mov	r4, r0
   1f168:	ldr	r0, [r5]
   1f16c:	bl	12330 <strerror@plt>
   1f170:	mov	r1, r0
   1f174:	mov	r0, r4
   1f178:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   1f17c:	andeq	sl, r3, r8, asr fp
   1f180:	andeq	r9, r2, r4, lsr #18
   1f184:	push	{r4, lr}
   1f188:	sub	sp, sp, #24
   1f18c:	ldr	r4, [pc, #76]	; 1f1e0 <__assert_fail@plt+0xca9c>
   1f190:	mov	r1, sp
   1f194:	mov	r0, #4
   1f198:	ldr	r3, [r4]
   1f19c:	str	r3, [sp, #20]
   1f1a0:	bl	121d4 <getrlimit64@plt>
   1f1a4:	cmp	r0, #0
   1f1a8:	bne	1f1c0 <__assert_fail@plt+0xca7c>
   1f1ac:	ldrd	r2, [sp, #8]
   1f1b0:	mov	r1, sp
   1f1b4:	mov	r0, #4
   1f1b8:	strd	r2, [sp]
   1f1bc:	bl	1209c <setrlimit64@plt>
   1f1c0:	ldr	r2, [sp, #20]
   1f1c4:	ldr	r3, [r4]
   1f1c8:	mov	r0, #1
   1f1cc:	cmp	r2, r3
   1f1d0:	bne	1f1dc <__assert_fail@plt+0xca98>
   1f1d4:	add	sp, sp, #24
   1f1d8:	pop	{r4, pc}
   1f1dc:	bl	1218c <__stack_chk_fail@plt>
   1f1e0:	andeq	sl, r3, r8, asr fp
   1f1e4:	ldr	r3, [pc, #8]	; 1f1f4 <__assert_fail@plt+0xcab0>
   1f1e8:	mov	r2, #1
   1f1ec:	str	r2, [r3]
   1f1f0:	bx	lr
   1f1f4:	andeq	sp, r3, ip, asr #7
   1f1f8:	push	{r4, r5, r6, lr}
   1f1fc:	mov	r5, r0
   1f200:	ldr	r4, [pc, #48]	; 1f238 <__assert_fail@plt+0xcaf4>
   1f204:	ldr	r3, [r4, #4]
   1f208:	cmp	r3, #0
   1f20c:	beq	1f220 <__assert_fail@plt+0xcadc>
   1f210:	mov	r3, #8
   1f214:	str	r3, [r5]
   1f218:	ldr	r0, [pc, #28]	; 1f23c <__assert_fail@plt+0xcaf8>
   1f21c:	pop	{r4, r5, r6, pc}
   1f220:	mov	r1, #8
   1f224:	add	r0, r4, r1
   1f228:	bl	12648 <gcry_create_nonce@plt>
   1f22c:	mov	r3, #1
   1f230:	str	r3, [r4, #4]
   1f234:	b	1f210 <__assert_fail@plt+0xcacc>
   1f238:	andeq	sp, r3, ip, asr #7
   1f23c:	ldrdeq	sp, [r3], -r4
   1f240:	push	{r4, lr}
   1f244:	sub	sp, sp, #8
   1f248:	ldr	r4, [pc, #48]	; 1f280 <__assert_fail@plt+0xcb3c>
   1f24c:	mov	r0, sp
   1f250:	mov	r1, #4
   1f254:	ldr	r3, [r4]
   1f258:	str	r3, [sp, #4]
   1f25c:	bl	12648 <gcry_create_nonce@plt>
   1f260:	ldr	r2, [sp, #4]
   1f264:	ldr	r3, [r4]
   1f268:	ldr	r0, [sp]
   1f26c:	cmp	r2, r3
   1f270:	bne	1f27c <__assert_fail@plt+0xcb38>
   1f274:	add	sp, sp, #8
   1f278:	pop	{r4, pc}
   1f27c:	bl	1218c <__stack_chk_fail@plt>
   1f280:	andeq	sl, r3, r8, asr fp
   1f284:	b	12168 <sleep@plt>
   1f288:	push	{r4, r5, r6, lr}
   1f28c:	sub	sp, sp, #24
   1f290:	ldr	r6, [pc, #144]	; 1f328 <__assert_fail@plt+0xcbe4>
   1f294:	cmp	r0, #0
   1f298:	ldr	r3, [r6]
   1f29c:	str	r3, [sp, #20]
   1f2a0:	beq	1f30c <__assert_fail@plt+0xcbc8>
   1f2a4:	ldr	r3, [pc, #128]	; 1f32c <__assert_fail@plt+0xcbe8>
   1f2a8:	add	r5, sp, #12
   1f2ac:	add	r4, sp, #4
   1f2b0:	umull	r2, r3, r3, r0
   1f2b4:	lsr	r3, r3, #18
   1f2b8:	str	r3, [sp, #4]
   1f2bc:	rsb	r2, r3, r3, lsl #5
   1f2c0:	rsb	r2, r2, r2, lsl #6
   1f2c4:	add	r3, r3, r2, lsl #3
   1f2c8:	sub	r0, r0, r3, lsl #6
   1f2cc:	rsb	r3, r0, r0, lsl #5
   1f2d0:	add	r0, r0, r3, lsl #2
   1f2d4:	lsl	r0, r0, #3
   1f2d8:	str	r0, [sp, #8]
   1f2dc:	b	1f2f8 <__assert_fail@plt+0xcbb4>
   1f2e0:	bl	1245c <__errno_location@plt>
   1f2e4:	ldr	r3, [r0]
   1f2e8:	cmp	r3, #4
   1f2ec:	bne	1f30c <__assert_fail@plt+0xcbc8>
   1f2f0:	ldm	r5, {r0, r1}
   1f2f4:	stm	r4, {r0, r1}
   1f2f8:	mov	r1, r5
   1f2fc:	mov	r0, r4
   1f300:	bl	120fc <nanosleep@plt>
   1f304:	cmp	r0, #0
   1f308:	blt	1f2e0 <__assert_fail@plt+0xcb9c>
   1f30c:	ldr	r2, [sp, #20]
   1f310:	ldr	r3, [r6]
   1f314:	cmp	r2, r3
   1f318:	bne	1f324 <__assert_fail@plt+0xcbe0>
   1f31c:	add	sp, sp, #24
   1f320:	pop	{r4, r5, r6, pc}
   1f324:	bl	1218c <__stack_chk_fail@plt>
   1f328:	andeq	sl, r3, r8, asr fp
   1f32c:	tstmi	fp, #2096	; 0x830
   1f330:	bx	lr
   1f334:	bx	lr
   1f338:	ldr	r3, [pc, #184]	; 1f3f8 <__assert_fail@plt+0xccb4>
   1f33c:	ldr	r3, [r3]
   1f340:	cmp	r3, #0
   1f344:	cmpne	r0, #0
   1f348:	beq	1f3f0 <__assert_fail@plt+0xccac>
   1f34c:	ldrb	r3, [r0]
   1f350:	cmp	r3, #45	; 0x2d
   1f354:	bne	1f3f0 <__assert_fail@plt+0xccac>
   1f358:	ldrb	r3, [r0, #1]
   1f35c:	cmp	r3, #38	; 0x26
   1f360:	bne	1f3f0 <__assert_fail@plt+0xccac>
   1f364:	ldrb	r3, [r0, #2]
   1f368:	add	r0, r0, #2
   1f36c:	sub	r1, r3, #48	; 0x30
   1f370:	cmp	r1, #9
   1f374:	bhi	1f3c8 <__assert_fail@plt+0xcc84>
   1f378:	mov	ip, r0
   1f37c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f380:	ldrb	r3, [ip, #1]!
   1f384:	sub	lr, r3, #48	; 0x30
   1f388:	cmp	lr, #9
   1f38c:	bls	1f380 <__assert_fail@plt+0xcc3c>
   1f390:	cmp	r3, #0
   1f394:	bne	1f3c0 <__assert_fail@plt+0xcc7c>
   1f398:	cmp	r2, #0
   1f39c:	beq	1f3b0 <__assert_fail@plt+0xcc6c>
   1f3a0:	mov	r1, r3
   1f3a4:	mov	r2, #10
   1f3a8:	pop	{lr}		; (ldr lr, [sp], #4)
   1f3ac:	b	1206c <strtol@plt>
   1f3b0:	mov	r1, r2
   1f3b4:	pop	{lr}		; (ldr lr, [sp], #4)
   1f3b8:	mov	r2, #10
   1f3bc:	b	1206c <strtol@plt>
   1f3c0:	mvn	r0, #0
   1f3c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3c8:	cmp	r3, #0
   1f3cc:	bne	1f3f0 <__assert_fail@plt+0xccac>
   1f3d0:	cmp	r2, #0
   1f3d4:	beq	1f3e4 <__assert_fail@plt+0xcca0>
   1f3d8:	mov	r1, r3
   1f3dc:	mov	r2, #10
   1f3e0:	b	1206c <strtol@plt>
   1f3e4:	mov	r1, r2
   1f3e8:	mov	r2, #10
   1f3ec:	b	1206c <strtol@plt>
   1f3f0:	mvn	r0, #0
   1f3f4:	bx	lr
   1f3f8:	andeq	sp, r3, ip, asr #7
   1f3fc:	b	12210 <tmpfile64@plt>
   1f400:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f404:	mov	r1, #1
   1f408:	mov	r8, r0
   1f40c:	mov	r0, #0
   1f410:	bl	12570 <fcntl64@plt>
   1f414:	cmn	r0, #1
   1f418:	beq	1f55c <__assert_fail@plt+0xce18>
   1f41c:	mov	r6, #0
   1f420:	mov	r1, #1
   1f424:	mov	r0, r1
   1f428:	bl	12570 <fcntl64@plt>
   1f42c:	cmn	r0, #1
   1f430:	beq	1f588 <__assert_fail@plt+0xce44>
   1f434:	mov	r4, #0
   1f438:	mov	r1, #1
   1f43c:	mov	r0, #2
   1f440:	bl	12570 <fcntl64@plt>
   1f444:	cmn	r0, #1
   1f448:	beq	1f4b8 <__assert_fail@plt+0xcd74>
   1f44c:	ldr	r3, [pc, #392]	; 1f5dc <__assert_fail@plt+0xce98>
   1f450:	cmp	r4, #2
   1f454:	cmpne	r6, #2
   1f458:	moveq	r7, #1
   1f45c:	ldr	r5, [r3]
   1f460:	movne	r7, #0
   1f464:	mov	r9, #0
   1f468:	cmp	r5, #0
   1f46c:	beq	1f4ac <__assert_fail@plt+0xcd68>
   1f470:	cmp	r6, #1
   1f474:	beq	1f504 <__assert_fail@plt+0xcdc0>
   1f478:	cmp	r4, #1
   1f47c:	beq	1f520 <__assert_fail@plt+0xcddc>
   1f480:	cmp	r9, #1
   1f484:	beq	1f53c <__assert_fail@plt+0xcdf8>
   1f488:	cmp	r7, #0
   1f48c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f490:	mov	r3, r8
   1f494:	mov	r0, r5
   1f498:	ldr	r2, [pc, #320]	; 1f5e0 <__assert_fail@plt+0xce9c>
   1f49c:	mov	r1, #1
   1f4a0:	bl	1251c <__fprintf_chk@plt>
   1f4a4:	mov	r0, #3
   1f4a8:	bl	123c0 <exit@plt>
   1f4ac:	cmp	r7, #0
   1f4b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f4b4:	b	1f4a4 <__assert_fail@plt+0xcd60>
   1f4b8:	bl	1245c <__errno_location@plt>
   1f4bc:	ldr	r3, [r0]
   1f4c0:	cmp	r3, #9
   1f4c4:	bne	1f44c <__assert_fail@plt+0xcd08>
   1f4c8:	mov	r1, #1
   1f4cc:	ldr	r0, [pc, #272]	; 1f5e4 <__assert_fail@plt+0xcea0>
   1f4d0:	bl	122dc <open64@plt>
   1f4d4:	cmp	r0, #2
   1f4d8:	beq	1f5b4 <__assert_fail@plt+0xce70>
   1f4dc:	cmp	r4, #0
   1f4e0:	bne	1f4a4 <__assert_fail@plt+0xcd60>
   1f4e4:	ldr	r3, [pc, #252]	; 1f5e8 <__assert_fail@plt+0xcea4>
   1f4e8:	ldr	r5, [r3]
   1f4ec:	cmp	r5, #0
   1f4f0:	beq	1f4a4 <__assert_fail@plt+0xcd60>
   1f4f4:	cmp	r6, #1
   1f4f8:	bne	1f490 <__assert_fail@plt+0xcd4c>
   1f4fc:	mov	r7, r6
   1f500:	mov	r9, #2
   1f504:	mov	r3, r8
   1f508:	ldr	r2, [pc, #220]	; 1f5ec <__assert_fail@plt+0xcea8>
   1f50c:	mov	r1, #1
   1f510:	mov	r0, r5
   1f514:	bl	1251c <__fprintf_chk@plt>
   1f518:	cmp	r4, #1
   1f51c:	bne	1f480 <__assert_fail@plt+0xcd3c>
   1f520:	mov	r1, r4
   1f524:	mov	r3, r8
   1f528:	ldr	r2, [pc, #192]	; 1f5f0 <__assert_fail@plt+0xceac>
   1f52c:	mov	r0, r5
   1f530:	bl	1251c <__fprintf_chk@plt>
   1f534:	cmp	r9, #1
   1f538:	bne	1f488 <__assert_fail@plt+0xcd44>
   1f53c:	mov	r1, r9
   1f540:	mov	r3, r8
   1f544:	ldr	r2, [pc, #168]	; 1f5f4 <__assert_fail@plt+0xceb0>
   1f548:	mov	r0, r5
   1f54c:	bl	1251c <__fprintf_chk@plt>
   1f550:	cmp	r7, #0
   1f554:	bne	1f490 <__assert_fail@plt+0xcd4c>
   1f558:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f55c:	bl	1245c <__errno_location@plt>
   1f560:	ldr	r3, [r0]
   1f564:	cmp	r3, #9
   1f568:	bne	1f41c <__assert_fail@plt+0xccd8>
   1f56c:	mov	r1, #0
   1f570:	ldr	r0, [pc, #108]	; 1f5e4 <__assert_fail@plt+0xcea0>
   1f574:	bl	122dc <open64@plt>
   1f578:	cmp	r0, #0
   1f57c:	moveq	r6, #1
   1f580:	movne	r6, #2
   1f584:	b	1f420 <__assert_fail@plt+0xccdc>
   1f588:	bl	1245c <__errno_location@plt>
   1f58c:	ldr	r3, [r0]
   1f590:	cmp	r3, #9
   1f594:	bne	1f434 <__assert_fail@plt+0xccf0>
   1f598:	mov	r1, #1
   1f59c:	ldr	r0, [pc, #64]	; 1f5e4 <__assert_fail@plt+0xcea0>
   1f5a0:	bl	122dc <open64@plt>
   1f5a4:	cmp	r0, #1
   1f5a8:	mov	r4, r0
   1f5ac:	movne	r4, #2
   1f5b0:	b	1f438 <__assert_fail@plt+0xccf4>
   1f5b4:	cmp	r4, #2
   1f5b8:	cmpne	r6, #2
   1f5bc:	moveq	r7, #1
   1f5c0:	movne	r7, #0
   1f5c4:	cmp	r4, #0
   1f5c8:	bne	1f4ac <__assert_fail@plt+0xcd68>
   1f5cc:	ldr	r3, [pc, #20]	; 1f5e8 <__assert_fail@plt+0xcea4>
   1f5d0:	mov	r9, #1
   1f5d4:	ldr	r5, [r3]
   1f5d8:	b	1f468 <__assert_fail@plt+0xcd24>
   1f5dc:	andeq	sp, r3, r0, lsl r3
   1f5e0:	andeq	r9, r2, r8, asr #19
   1f5e4:	andeq	r9, r2, r4, asr #18
   1f5e8:	andeq	sp, r3, r4, lsl r3
   1f5ec:	andeq	r9, r2, r0, asr r9
   1f5f0:	andeq	r9, r2, r8, ror r9
   1f5f4:	andeq	r9, r2, r0, lsr #19
   1f5f8:	subs	r2, r0, #0
   1f5fc:	bxne	lr
   1f600:	ldr	r1, [pc, #4]	; 1f60c <__assert_fail@plt+0xcec8>
   1f604:	ldr	r0, [pc, #4]	; 1f610 <__assert_fail@plt+0xcecc>
   1f608:	b	1e8f8 <__assert_fail@plt+0xc1b4>
   1f60c:	andeq	r9, r2, r8, lsl #20
   1f610:	andeq	r9, r2, ip, lsr #20
   1f614:	b	1263c <remove@plt>
   1f618:	push	{r4, r5, r6, r7, r8, lr}
   1f61c:	subs	r8, r2, #0
   1f620:	mov	r6, r0
   1f624:	mov	r7, r1
   1f628:	beq	1f6dc <__assert_fail@plt+0xcf98>
   1f62c:	ldr	r3, [r8]
   1f630:	cmp	r3, #0
   1f634:	bne	1f6d4 <__assert_fail@plt+0xcf90>
   1f638:	mov	r1, r7
   1f63c:	mov	r0, r6
   1f640:	bl	12378 <rename@plt>
   1f644:	cmp	r0, #0
   1f648:	bne	1f658 <__assert_fail@plt+0xcf14>
   1f64c:	mov	r4, #0
   1f650:	mov	r0, r4
   1f654:	pop	{r4, r5, r6, r7, r8, pc}
   1f658:	ldr	r3, [pc, #184]	; 1f718 <__assert_fail@plt+0xcfd4>
   1f65c:	ldr	r4, [r3]
   1f660:	bl	12420 <gpg_err_code_from_syserror@plt>
   1f664:	cmp	r0, #0
   1f668:	beq	1f64c <__assert_fail@plt+0xcf08>
   1f66c:	ldr	r3, [r8]
   1f670:	lsl	r4, r4, #24
   1f674:	and	r4, r4, #2130706432	; 0x7f000000
   1f678:	uxth	r0, r0
   1f67c:	cmp	r3, #0
   1f680:	orr	r4, r4, r0
   1f684:	beq	1f70c <__assert_fail@plt+0xcfc8>
   1f688:	cmp	r4, #0
   1f68c:	beq	1f64c <__assert_fail@plt+0xcf08>
   1f690:	bl	22b28 <__assert_fail@plt+0x103e4>
   1f694:	mov	r3, #0
   1f698:	str	r3, [r8]
   1f69c:	mov	r2, #5
   1f6a0:	ldr	r1, [pc, #116]	; 1f71c <__assert_fail@plt+0xcfd8>
   1f6a4:	mov	r0, #0
   1f6a8:	bl	12180 <dcgettext@plt>
   1f6ac:	mov	r5, r0
   1f6b0:	mov	r0, r4
   1f6b4:	bl	1260c <gpg_strerror@plt>
   1f6b8:	mov	r2, r7
   1f6bc:	mov	r1, r6
   1f6c0:	mov	r3, r0
   1f6c4:	mov	r0, r5
   1f6c8:	bl	1e95c <__assert_fail@plt+0xc218>
   1f6cc:	mov	r0, r4
   1f6d0:	pop	{r4, r5, r6, r7, r8, pc}
   1f6d4:	bl	22ab4 <__assert_fail@plt+0x10370>
   1f6d8:	b	1f638 <__assert_fail@plt+0xcef4>
   1f6dc:	bl	12378 <rename@plt>
   1f6e0:	cmp	r0, #0
   1f6e4:	beq	1f64c <__assert_fail@plt+0xcf08>
   1f6e8:	ldr	r3, [pc, #40]	; 1f718 <__assert_fail@plt+0xcfd4>
   1f6ec:	ldr	r4, [r3]
   1f6f0:	bl	12420 <gpg_err_code_from_syserror@plt>
   1f6f4:	cmp	r0, #0
   1f6f8:	beq	1f64c <__assert_fail@plt+0xcf08>
   1f6fc:	lsl	r4, r4, #24
   1f700:	and	r4, r4, #2130706432	; 0x7f000000
   1f704:	uxth	r0, r0
   1f708:	orr	r4, r4, r0
   1f70c:	cmp	r4, #0
   1f710:	bne	1f69c <__assert_fail@plt+0xcf58>
   1f714:	b	1f64c <__assert_fail@plt+0xcf08>
   1f718:	andeq	sp, r3, r8, asr #7
   1f71c:	andeq	r9, r2, ip, asr #20
   1f720:	subs	r3, r1, #0
   1f724:	push	{r4, lr}
   1f728:	moveq	r1, r3
   1f72c:	mov	r4, r0
   1f730:	beq	1f74c <__assert_fail@plt+0xd008>
   1f734:	ldrb	r1, [r3]
   1f738:	cmp	r1, #0
   1f73c:	beq	1f74c <__assert_fail@plt+0xd008>
   1f740:	mov	r0, r3
   1f744:	bl	1f008 <__assert_fail@plt+0xc8c4>
   1f748:	mov	r1, r0
   1f74c:	mov	r0, r4
   1f750:	pop	{r4, lr}
   1f754:	b	1248c <mkdir@plt>
   1f758:	b	1221c <chdir@plt>
   1f75c:	subs	r3, r1, #0
   1f760:	push	{r4, lr}
   1f764:	moveq	r1, r3
   1f768:	mov	r4, r0
   1f76c:	beq	1f788 <__assert_fail@plt+0xd044>
   1f770:	ldrb	r1, [r3]
   1f774:	cmp	r1, #0
   1f778:	beq	1f788 <__assert_fail@plt+0xd044>
   1f77c:	mov	r0, r3
   1f780:	bl	1f008 <__assert_fail@plt+0xc8c4>
   1f784:	mov	r1, r0
   1f788:	mov	r0, r4
   1f78c:	pop	{r4, lr}
   1f790:	b	1269c <chmod@plt>
   1f794:	ldr	r3, [pc, #476]	; 1f978 <__assert_fail@plt+0xd234>
   1f798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f79c:	sub	sp, sp, #28
   1f7a0:	ldr	r3, [r3]
   1f7a4:	mov	r9, r0
   1f7a8:	str	r3, [sp, #20]
   1f7ac:	bl	123e4 <strlen@plt>
   1f7b0:	cmp	r0, #5
   1f7b4:	bls	1f94c <__assert_fail@plt+0xd208>
   1f7b8:	sub	r0, r0, #6
   1f7bc:	add	r6, r9, r0
   1f7c0:	mov	r0, r6
   1f7c4:	ldr	r1, [pc, #432]	; 1f97c <__assert_fail@plt+0xd238>
   1f7c8:	bl	12054 <strcmp@plt>
   1f7cc:	cmp	r0, #0
   1f7d0:	bne	1f94c <__assert_fail@plt+0xd208>
   1f7d4:	bl	1245c <__errno_location@plt>
   1f7d8:	mov	r1, #8
   1f7dc:	ldr	r8, [pc, #412]	; 1f980 <__assert_fail@plt+0xd23c>
   1f7e0:	ldr	r7, [pc, #412]	; 1f984 <__assert_fail@plt+0xd240>
   1f7e4:	ldr	fp, [pc, #412]	; 1f988 <__assert_fail@plt+0xd244>
   1f7e8:	mov	sl, r0
   1f7ec:	add	r0, sp, r1
   1f7f0:	ldr	r3, [sl]
   1f7f4:	str	r3, [sp, #4]
   1f7f8:	bl	12648 <gcry_create_nonce@plt>
   1f7fc:	ldrd	r4, [sp, #8]
   1f800:	b	1f82c <__assert_fail@plt+0xd0e8>
   1f804:	ldr	r0, [sl]
   1f808:	cmp	r0, #17
   1f80c:	bne	1f95c <__assert_fail@plt+0xd218>
   1f810:	ldrd	r4, [sp, #8]
   1f814:	ldr	r3, [pc, #368]	; 1f98c <__assert_fail@plt+0xd248>
   1f818:	adds	r4, r4, r3
   1f81c:	adc	r5, r5, #0
   1f820:	subs	r8, r8, #1
   1f824:	strd	r4, [sp, #8]
   1f828:	beq	1f950 <__assert_fail@plt+0xd20c>
   1f82c:	mov	r2, #62	; 0x3e
   1f830:	mov	r3, #0
   1f834:	mov	r0, r4
   1f838:	mov	r1, r5
   1f83c:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f840:	mov	r3, #0
   1f844:	mov	r0, r4
   1f848:	mov	r1, r5
   1f84c:	ldrb	ip, [r7, r2]
   1f850:	mov	r2, #62	; 0x3e
   1f854:	strb	ip, [r6]
   1f858:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f85c:	mov	r2, #62	; 0x3e
   1f860:	mov	r3, #0
   1f864:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f868:	mov	r3, #0
   1f86c:	mov	r0, r4
   1f870:	mov	r1, r5
   1f874:	ldrb	ip, [r7, r2]
   1f878:	ldr	r2, [pc, #272]	; 1f990 <__assert_fail@plt+0xd24c>
   1f87c:	strb	ip, [r6, #1]
   1f880:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f884:	mov	r2, #62	; 0x3e
   1f888:	mov	r3, #0
   1f88c:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f890:	mov	r3, #0
   1f894:	mov	r0, r4
   1f898:	mov	r1, r5
   1f89c:	ldrb	ip, [r7, r2]
   1f8a0:	ldr	r2, [pc, #216]	; 1f980 <__assert_fail@plt+0xd23c>
   1f8a4:	strb	ip, [r6, #2]
   1f8a8:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f8ac:	mov	r2, #62	; 0x3e
   1f8b0:	mov	r3, #0
   1f8b4:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f8b8:	mov	r0, r4
   1f8bc:	mov	r1, r5
   1f8c0:	ldrb	ip, [r7, r2]
   1f8c4:	add	r3, pc, #156	; 0x9c
   1f8c8:	ldrd	r2, [r3]
   1f8cc:	strb	ip, [r6, #3]
   1f8d0:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f8d4:	mov	r2, #62	; 0x3e
   1f8d8:	mov	r3, #0
   1f8dc:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f8e0:	mov	r0, r4
   1f8e4:	mov	r1, r5
   1f8e8:	ldrb	ip, [r7, r2]
   1f8ec:	add	r3, pc, #124	; 0x7c
   1f8f0:	ldrd	r2, [r3]
   1f8f4:	strb	ip, [r6, #4]
   1f8f8:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f8fc:	mov	r2, #62	; 0x3e
   1f900:	mov	r3, #0
   1f904:	bl	254d4 <__assert_fail@plt+0x12d90>
   1f908:	mov	r1, fp
   1f90c:	mov	r0, r9
   1f910:	ldrb	r3, [r7, r2]
   1f914:	strb	r3, [r6, #5]
   1f918:	bl	1f720 <__assert_fail@plt+0xcfdc>
   1f91c:	cmp	r0, #0
   1f920:	bne	1f804 <__assert_fail@plt+0xd0c0>
   1f924:	ldr	r0, [sp, #4]
   1f928:	bl	125dc <gpg_err_set_errno@plt>
   1f92c:	mov	r0, r9
   1f930:	ldr	r3, [pc, #64]	; 1f978 <__assert_fail@plt+0xd234>
   1f934:	ldr	r2, [sp, #20]
   1f938:	ldr	r3, [r3]
   1f93c:	cmp	r2, r3
   1f940:	bne	1f964 <__assert_fail@plt+0xd220>
   1f944:	add	sp, sp, #28
   1f948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f94c:	mov	r0, #22
   1f950:	bl	125dc <gpg_err_set_errno@plt>
   1f954:	mov	r0, #0
   1f958:	b	1f930 <__assert_fail@plt+0xd1ec>
   1f95c:	mov	r0, #0
   1f960:	b	1f930 <__assert_fail@plt+0xd1ec>
   1f964:	bl	1218c <__stack_chk_fail@plt>
   1f968:	rsceq	r7, r1, r0, lsl r8
   1f96c:	andeq	r0, r0, r0
   1f970:	ldrcc	r1, [fp], r0, ror #7
   1f974:	andeq	r0, r0, r0
   1f978:	andeq	sl, r3, r8, asr fp
   1f97c:	andeq	r9, r2, r0, ror sl
   1f980:	strdeq	sl, [r3], -r8
   1f984:	andeq	r9, r2, r4, ror #17
   1f988:	andeq	r5, r2, ip, ror #20
   1f98c:	andeq	r1, r0, r1, ror #28
   1f990:	andeq	r0, r0, r4, lsl #30
   1f994:	b	12414 <setenv@plt>
   1f998:	b	126c0 <unsetenv@plt>
   1f99c:	push	{r4, r5, r6, lr}
   1f9a0:	mov	r4, #100	; 0x64
   1f9a4:	b	1f9d0 <__assert_fail@plt+0xd28c>
   1f9a8:	bl	123a8 <getcwd@plt>
   1f9ac:	mov	r3, r0
   1f9b0:	cmp	r5, r3
   1f9b4:	mov	r0, r5
   1f9b8:	beq	1f9ec <__assert_fail@plt+0xd2a8>
   1f9bc:	bl	12150 <gcry_free@plt>
   1f9c0:	bl	1245c <__errno_location@plt>
   1f9c4:	ldr	r3, [r0]
   1f9c8:	cmp	r3, #34	; 0x22
   1f9cc:	bne	1f9e8 <__assert_fail@plt+0xd2a4>
   1f9d0:	add	r0, r4, #1
   1f9d4:	bl	1200c <gcry_malloc@plt>
   1f9d8:	mov	r1, r4
   1f9dc:	lsl	r4, r4, #1
   1f9e0:	subs	r5, r0, #0
   1f9e4:	bne	1f9a8 <__assert_fail@plt+0xd264>
   1f9e8:	mov	r3, #0
   1f9ec:	mov	r0, r3
   1f9f0:	pop	{r4, r5, r6, pc}
   1f9f4:	push	{r4, r5, r6, lr}
   1f9f8:	mvn	r3, #0
   1f9fc:	subs	r4, r1, #0
   1fa00:	str	r3, [r0]
   1fa04:	beq	1fa40 <__assert_fail@plt+0xd2fc>
   1fa08:	mov	r5, r0
   1fa0c:	bl	123f0 <inotify_init@plt>
   1fa10:	cmn	r0, #1
   1fa14:	mov	r6, r0
   1fa18:	beq	1fa88 <__assert_fail@plt+0xd344>
   1fa1c:	mov	r1, r4
   1fa20:	mov	r2, #1024	; 0x400
   1fa24:	bl	12450 <inotify_add_watch@plt>
   1fa28:	cmn	r0, #1
   1fa2c:	movne	r4, #0
   1fa30:	strne	r6, [r5]
   1fa34:	beq	1fa5c <__assert_fail@plt+0xd318>
   1fa38:	mov	r0, r4
   1fa3c:	pop	{r4, r5, r6, pc}
   1fa40:	ldr	r3, [pc, #100]	; 1faac <__assert_fail@plt+0xd368>
   1fa44:	ldr	r4, [r3]
   1fa48:	lsl	r4, r4, #24
   1fa4c:	and	r4, r4, #2130706432	; 0x7f000000
   1fa50:	orr	r4, r4, #55	; 0x37
   1fa54:	mov	r0, r4
   1fa58:	pop	{r4, r5, r6, pc}
   1fa5c:	ldr	r3, [pc, #72]	; 1faac <__assert_fail@plt+0xd368>
   1fa60:	ldr	r5, [r3]
   1fa64:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fa68:	subs	r4, r0, #0
   1fa6c:	lslne	r5, r5, #24
   1fa70:	andne	r5, r5, #2130706432	; 0x7f000000
   1fa74:	uxthne	r4, r4
   1fa78:	mov	r0, r6
   1fa7c:	orrne	r4, r5, r4
   1fa80:	bl	12708 <close@plt>
   1fa84:	b	1fa38 <__assert_fail@plt+0xd2f4>
   1fa88:	ldr	r3, [pc, #28]	; 1faac <__assert_fail@plt+0xd368>
   1fa8c:	ldr	r5, [r3]
   1fa90:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fa94:	subs	r4, r0, #0
   1fa98:	lslne	r5, r5, #24
   1fa9c:	andne	r5, r5, #2130706432	; 0x7f000000
   1faa0:	uxthne	r4, r4
   1faa4:	orrne	r4, r5, r4
   1faa8:	b	1fa38 <__assert_fail@plt+0xd2f4>
   1faac:	andeq	sp, r3, r8, asr #7
   1fab0:	mvn	r3, #0
   1fab4:	cmp	r1, #0
   1fab8:	push	{r4, r5, r6, r7, r8, lr}
   1fabc:	str	r3, [r0]
   1fac0:	beq	1fb30 <__assert_fail@plt+0xd3ec>
   1fac4:	mov	r5, r0
   1fac8:	mov	r0, r1
   1facc:	bl	12714 <gcry_strdup@plt>
   1fad0:	subs	r6, r0, #0
   1fad4:	beq	1fb84 <__assert_fail@plt+0xd440>
   1fad8:	bl	123f0 <inotify_init@plt>
   1fadc:	cmn	r0, #1
   1fae0:	mov	r7, r0
   1fae4:	beq	1fba8 <__assert_fail@plt+0xd464>
   1fae8:	mov	r1, #47	; 0x2f
   1faec:	mov	r0, r6
   1faf0:	bl	125c4 <strrchr@plt>
   1faf4:	ldr	r2, [pc, #208]	; 1fbcc <__assert_fail@plt+0xd488>
   1faf8:	mov	r1, r6
   1fafc:	cmp	r0, #0
   1fb00:	movne	r3, #0
   1fb04:	strbne	r3, [r0]
   1fb08:	mov	r0, r7
   1fb0c:	bl	12450 <inotify_add_watch@plt>
   1fb10:	cmn	r0, #1
   1fb14:	beq	1fb4c <__assert_fail@plt+0xd408>
   1fb18:	mov	r4, #0
   1fb1c:	mov	r0, r6
   1fb20:	bl	12150 <gcry_free@plt>
   1fb24:	str	r7, [r5]
   1fb28:	mov	r0, r4
   1fb2c:	pop	{r4, r5, r6, r7, r8, pc}
   1fb30:	ldr	r3, [pc, #152]	; 1fbd0 <__assert_fail@plt+0xd48c>
   1fb34:	ldr	r4, [r3]
   1fb38:	lsl	r4, r4, #24
   1fb3c:	and	r4, r4, #2130706432	; 0x7f000000
   1fb40:	orr	r4, r4, #55	; 0x37
   1fb44:	mov	r0, r4
   1fb48:	pop	{r4, r5, r6, r7, r8, pc}
   1fb4c:	ldr	r3, [pc, #124]	; 1fbd0 <__assert_fail@plt+0xd48c>
   1fb50:	ldr	r5, [r3]
   1fb54:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fb58:	subs	r4, r0, #0
   1fb5c:	lslne	r5, r5, #24
   1fb60:	andne	r5, r5, #2130706432	; 0x7f000000
   1fb64:	uxthne	r4, r4
   1fb68:	mov	r0, r7
   1fb6c:	orrne	r4, r5, r4
   1fb70:	bl	12708 <close@plt>
   1fb74:	mov	r0, r6
   1fb78:	bl	12150 <gcry_free@plt>
   1fb7c:	mov	r0, r4
   1fb80:	pop	{r4, r5, r6, r7, r8, pc}
   1fb84:	ldr	r3, [pc, #68]	; 1fbd0 <__assert_fail@plt+0xd48c>
   1fb88:	ldr	r5, [r3]
   1fb8c:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fb90:	subs	r4, r0, #0
   1fb94:	lslne	r5, r5, #24
   1fb98:	andne	r5, r5, #2130706432	; 0x7f000000
   1fb9c:	uxthne	r4, r4
   1fba0:	orrne	r4, r5, r4
   1fba4:	b	1fb28 <__assert_fail@plt+0xd3e4>
   1fba8:	ldr	r3, [pc, #32]	; 1fbd0 <__assert_fail@plt+0xd48c>
   1fbac:	ldr	r5, [r3]
   1fbb0:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fbb4:	subs	r4, r0, #0
   1fbb8:	lslne	r5, r5, #24
   1fbbc:	andne	r5, r5, #2130706432	; 0x7f000000
   1fbc0:	uxthne	r4, r4
   1fbc4:	orrne	r4, r5, r4
   1fbc8:	b	1fb74 <__assert_fail@plt+0xd430>
   1fbcc:	streq	r0, [r0], #-1536	; 0xfffffa00
   1fbd0:	andeq	sp, r3, r8, asr #7
   1fbd4:	mov	r0, #0
   1fbd8:	bx	lr
   1fbdc:	push	{r4, r5, r6, r7, r8, lr}
   1fbe0:	sub	sp, sp, #120	; 0x78
   1fbe4:	ldr	r5, [pc, #316]	; 1fd28 <__assert_fail@plt+0xd5e4>
   1fbe8:	mov	r4, #110	; 0x6e
   1fbec:	mov	r2, sp
   1fbf0:	ldr	r3, [r5]
   1fbf4:	add	r1, sp, #4
   1fbf8:	str	r3, [sp, #116]	; 0x74
   1fbfc:	str	r4, [sp]
   1fc00:	mov	r8, r0
   1fc04:	bl	12624 <getsockname@plt>
   1fc08:	subs	r7, r0, #0
   1fc0c:	bne	1fc98 <__assert_fail@plt+0xd554>
   1fc10:	ldrh	r3, [sp, #4]
   1fc14:	cmp	r3, #1
   1fc18:	bne	1fc70 <__assert_fail@plt+0xd52c>
   1fc1c:	ldr	r3, [sp]
   1fc20:	cmp	r3, #2
   1fc24:	bls	1fc84 <__assert_fail@plt+0xd540>
   1fc28:	cmp	r3, #110	; 0x6e
   1fc2c:	bhi	1fcd4 <__assert_fail@plt+0xd590>
   1fc30:	sub	r0, r3, #1
   1fc34:	sub	r4, r3, #2
   1fc38:	bl	1200c <gcry_malloc@plt>
   1fc3c:	subs	r6, r0, #0
   1fc40:	beq	1fcec <__assert_fail@plt+0xd5a8>
   1fc44:	mov	r2, r4
   1fc48:	add	r1, sp, #6
   1fc4c:	bl	1212c <memcpy@plt>
   1fc50:	strb	r7, [r6, r4]
   1fc54:	ldr	r2, [sp, #116]	; 0x74
   1fc58:	ldr	r3, [r5]
   1fc5c:	mov	r0, r6
   1fc60:	cmp	r2, r3
   1fc64:	bne	1fd24 <__assert_fail@plt+0xd5e0>
   1fc68:	add	sp, sp, #120	; 0x78
   1fc6c:	pop	{r4, r5, r6, r7, r8, pc}
   1fc70:	mov	r1, r8
   1fc74:	ldr	r0, [pc, #176]	; 1fd2c <__assert_fail@plt+0xd5e8>
   1fc78:	mov	r6, r7
   1fc7c:	bl	1e95c <__assert_fail@plt+0xc218>
   1fc80:	b	1fc54 <__assert_fail@plt+0xd510>
   1fc84:	mov	r1, r8
   1fc88:	ldr	r0, [pc, #160]	; 1fd30 <__assert_fail@plt+0xd5ec>
   1fc8c:	mov	r6, r7
   1fc90:	bl	1e95c <__assert_fail@plt+0xc218>
   1fc94:	b	1fc54 <__assert_fail@plt+0xd510>
   1fc98:	ldr	r3, [pc, #148]	; 1fd34 <__assert_fail@plt+0xd5f0>
   1fc9c:	mov	r6, #0
   1fca0:	ldr	r4, [r3]
   1fca4:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fca8:	cmp	r0, #0
   1fcac:	lslne	r4, r4, #24
   1fcb0:	andne	r4, r4, #2130706432	; 0x7f000000
   1fcb4:	uxthne	r0, r0
   1fcb8:	orrne	r0, r4, r0
   1fcbc:	bl	1260c <gpg_strerror@plt>
   1fcc0:	mov	r1, r8
   1fcc4:	mov	r2, r0
   1fcc8:	ldr	r0, [pc, #104]	; 1fd38 <__assert_fail@plt+0xd5f4>
   1fccc:	bl	1e95c <__assert_fail@plt+0xc218>
   1fcd0:	b	1fc54 <__assert_fail@plt+0xd510>
   1fcd4:	mov	r2, r4
   1fcd8:	mov	r1, r8
   1fcdc:	ldr	r0, [pc, #88]	; 1fd3c <__assert_fail@plt+0xd5f8>
   1fce0:	mov	r6, r7
   1fce4:	bl	1e95c <__assert_fail@plt+0xc218>
   1fce8:	b	1fc54 <__assert_fail@plt+0xd510>
   1fcec:	ldr	r3, [pc, #64]	; 1fd34 <__assert_fail@plt+0xd5f0>
   1fcf0:	ldr	r4, [r3]
   1fcf4:	bl	12420 <gpg_err_code_from_syserror@plt>
   1fcf8:	cmp	r0, #0
   1fcfc:	lslne	r4, r4, #24
   1fd00:	andne	r4, r4, #2130706432	; 0x7f000000
   1fd04:	uxthne	r0, r0
   1fd08:	orrne	r0, r4, r0
   1fd0c:	bl	1260c <gpg_strerror@plt>
   1fd10:	mov	r1, r8
   1fd14:	mov	r2, r0
   1fd18:	ldr	r0, [pc, #32]	; 1fd40 <__assert_fail@plt+0xd5fc>
   1fd1c:	bl	1e95c <__assert_fail@plt+0xc218>
   1fd20:	b	1fc54 <__assert_fail@plt+0xd510>
   1fd24:	bl	1218c <__stack_chk_fail@plt>
   1fd28:	andeq	sl, r3, r8, asr fp
   1fd2c:	muleq	r2, r8, sl
   1fd30:	andeq	r9, r2, r8, asr #21
   1fd34:	andeq	sp, r3, r8, asr #7
   1fd38:	andeq	r9, r2, r8, ror sl
   1fd3c:	strdeq	r9, [r2], -r8
   1fd40:	andeq	r9, r2, r8, asr #22
   1fd44:	push	{r4, lr}
   1fd48:	bl	121f8 <dup@plt>
   1fd4c:	cmp	r0, #0
   1fd50:	blt	1fd60 <__assert_fail@plt+0xd61c>
   1fd54:	bl	12708 <close@plt>
   1fd58:	mov	r0, #1
   1fd5c:	pop	{r4, pc}
   1fd60:	mov	r0, #0
   1fd64:	pop	{r4, pc}
   1fd68:	ldr	r0, [pc]	; 1fd70 <__assert_fail@plt+0xd62c>
   1fd6c:	bx	lr
   1fd70:			; <UNDEFINED> instruction: 0x00029bb0
   1fd74:	push	{r4, r5, r6, lr}
   1fd78:	mov	r1, #0
   1fd7c:	bl	1a628 <__assert_fail@plt+0x7ee4>
   1fd80:	mov	r1, #0
   1fd84:	mov	r4, r0
   1fd88:	ldr	r0, [pc, #48]	; 1fdc0 <__assert_fail@plt+0xd67c>
   1fd8c:	bl	1a628 <__assert_fail@plt+0x7ee4>
   1fd90:	mov	r1, r0
   1fd94:	mov	r5, r0
   1fd98:	mov	r0, r4
   1fd9c:	bl	1a6d8 <__assert_fail@plt+0x7f94>
   1fda0:	mov	r6, r0
   1fda4:	mov	r0, r5
   1fda8:	bl	12150 <gcry_free@plt>
   1fdac:	mov	r0, r4
   1fdb0:	bl	12150 <gcry_free@plt>
   1fdb4:	clz	r0, r6
   1fdb8:	lsr	r0, r0, #5
   1fdbc:	pop	{r4, r5, r6, pc}
   1fdc0:			; <UNDEFINED> instruction: 0x00029bbc
   1fdc4:	push	{r4, r5, r6, lr}
   1fdc8:	cmp	r0, #0
   1fdcc:	ldr	r5, [pc, #152]	; 1fe6c <__assert_fail@plt+0xd728>
   1fdd0:	ldr	r4, [r5]
   1fdd4:	bne	1fde8 <__assert_fail@plt+0xd6a4>
   1fdd8:	cmp	r4, #0
   1fddc:	beq	1fdf8 <__assert_fail@plt+0xd6b4>
   1fde0:	mov	r0, r4
   1fde4:	pop	{r4, r5, r6, pc}
   1fde8:	mov	r0, r4
   1fdec:	bl	12150 <gcry_free@plt>
   1fdf0:	mov	r3, #0
   1fdf4:	str	r3, [r5]
   1fdf8:	bl	1fd68 <__assert_fail@plt+0xd624>
   1fdfc:	mov	r2, #0
   1fe00:	ldr	r1, [pc, #104]	; 1fe70 <__assert_fail@plt+0xd72c>
   1fe04:	mov	r6, r0
   1fe08:	bl	1abe0 <__assert_fail@plt+0x849c>
   1fe0c:	mov	r1, #0
   1fe10:	mov	r4, r0
   1fe14:	bl	12534 <access@plt>
   1fe18:	cmp	r0, #0
   1fe1c:	beq	1fe5c <__assert_fail@plt+0xd718>
   1fe20:	mov	r2, #0
   1fe24:	ldr	r1, [pc, #72]	; 1fe74 <__assert_fail@plt+0xd730>
   1fe28:	mov	r0, r6
   1fe2c:	str	r4, [r5]
   1fe30:	bl	1abe0 <__assert_fail@plt+0x849c>
   1fe34:	mov	r1, #0
   1fe38:	mov	r4, r0
   1fe3c:	bl	12534 <access@plt>
   1fe40:	cmp	r0, #0
   1fe44:	beq	1fe5c <__assert_fail@plt+0xd718>
   1fe48:	mov	r0, r4
   1fe4c:	bl	12150 <gcry_free@plt>
   1fe50:	ldr	r4, [r5]
   1fe54:	mov	r0, r4
   1fe58:	pop	{r4, r5, r6, pc}
   1fe5c:	ldr	r0, [r5]
   1fe60:	bl	12150 <gcry_free@plt>
   1fe64:	str	r4, [r5]
   1fe68:	b	1fde0 <__assert_fail@plt+0xd69c>
   1fe6c:	ldrdeq	sp, [r3], -ip
   1fe70:	andeq	r9, r2, r8, asr #23
   1fe74:	ldrdeq	r9, [r2], -r4
   1fe78:	push	{r4, lr}
   1fe7c:	ldrb	r4, [r0]
   1fe80:	cmp	r4, #0
   1fe84:	beq	1fea4 <__assert_fail@plt+0xd760>
   1fe88:	mov	r4, r0
   1fe8c:	bl	123e4 <strlen@plt>
   1fe90:	add	r0, r4, r0
   1fe94:	ldrb	r3, [r0, #-1]
   1fe98:	cmp	r3, #47	; 0x2f
   1fe9c:	movne	r4, #0
   1fea0:	beq	1feac <__assert_fail@plt+0xd768>
   1fea4:	mov	r0, r4
   1fea8:	pop	{r4, pc}
   1feac:	mov	r0, r4
   1feb0:	bl	12528 <gcry_xstrdup@plt>
   1feb4:	mov	r4, r0
   1feb8:	bl	123e4 <strlen@plt>
   1febc:	sub	r0, r0, #1
   1fec0:	add	r3, r4, r0
   1fec4:	cmp	r4, r3
   1fec8:	bcs	1fea4 <__assert_fail@plt+0xd760>
   1fecc:	ldrb	r2, [r4, r0]
   1fed0:	cmp	r2, #47	; 0x2f
   1fed4:	bne	1fea4 <__assert_fail@plt+0xd760>
   1fed8:	mov	r1, #0
   1fedc:	b	1feec <__assert_fail@plt+0xd7a8>
   1fee0:	ldrb	r2, [r3]
   1fee4:	cmp	r2, #47	; 0x2f
   1fee8:	bne	1fea4 <__assert_fail@plt+0xd760>
   1feec:	strb	r1, [r3], #-1
   1fef0:	cmp	r4, r3
   1fef4:	bne	1fee0 <__assert_fail@plt+0xd79c>
   1fef8:	mov	r0, r4
   1fefc:	pop	{r4, pc}
   1ff00:	ldr	r0, [pc]	; 1ff08 <__assert_fail@plt+0xd7c4>
   1ff04:	bx	lr
   1ff08:			; <UNDEFINED> instruction: 0x00029bbc
   1ff0c:	push	{r4, lr}
   1ff10:	ldr	r0, [pc, #80]	; 1ff68 <__assert_fail@plt+0xd824>
   1ff14:	bl	122e8 <getenv@plt>
   1ff18:	subs	r4, r0, #0
   1ff1c:	beq	1ff2c <__assert_fail@plt+0xd7e8>
   1ff20:	ldrb	r3, [r4]
   1ff24:	cmp	r3, #0
   1ff28:	bne	1ff38 <__assert_fail@plt+0xd7f4>
   1ff2c:	ldr	r4, [pc, #56]	; 1ff6c <__assert_fail@plt+0xd828>
   1ff30:	mov	r0, r4
   1ff34:	pop	{r4, pc}
   1ff38:	bl	1fe78 <__assert_fail@plt+0xd734>
   1ff3c:	cmp	r0, #0
   1ff40:	movne	r4, r0
   1ff44:	mov	r0, r4
   1ff48:	bl	1fd74 <__assert_fail@plt+0xd630>
   1ff4c:	cmp	r0, #0
   1ff50:	bne	1ff30 <__assert_fail@plt+0xd7ec>
   1ff54:	ldr	r3, [pc, #20]	; 1ff70 <__assert_fail@plt+0xd82c>
   1ff58:	mov	r2, #1
   1ff5c:	mov	r0, r4
   1ff60:	strb	r2, [r3, #4]
   1ff64:	pop	{r4, pc}
   1ff68:	andeq	r9, r2, r4, ror #23
   1ff6c:			; <UNDEFINED> instruction: 0x00029bbc
   1ff70:	ldrdeq	sp, [r3], -ip
   1ff74:	push	{r4, r5, r6, lr}
   1ff78:	subs	r4, r0, #0
   1ff7c:	beq	1ff8c <__assert_fail@plt+0xd848>
   1ff80:	ldrb	r3, [r4]
   1ff84:	cmp	r3, #0
   1ff88:	bne	1ffc0 <__assert_fail@plt+0xd87c>
   1ff8c:	bl	1ff0c <__assert_fail@plt+0xd7c8>
   1ff90:	ldr	r5, [pc, #80]	; 1ffe8 <__assert_fail@plt+0xd8a4>
   1ff94:	mov	r6, #0
   1ff98:	mov	r4, r0
   1ff9c:	ldr	r0, [r5, #8]
   1ffa0:	bl	12150 <gcry_free@plt>
   1ffa4:	mov	r0, r4
   1ffa8:	mov	r1, #0
   1ffac:	bl	1a628 <__assert_fail@plt+0x7ee4>
   1ffb0:	str	r0, [r5, #8]
   1ffb4:	mov	r0, r6
   1ffb8:	pop	{r4, r5, r6, lr}
   1ffbc:	b	12150 <gcry_free@plt>
   1ffc0:	bl	1fe78 <__assert_fail@plt+0xd734>
   1ffc4:	ldr	r5, [pc, #28]	; 1ffe8 <__assert_fail@plt+0xd8a4>
   1ffc8:	subs	r6, r0, #0
   1ffcc:	movne	r4, r6
   1ffd0:	mov	r0, r4
   1ffd4:	bl	1fd74 <__assert_fail@plt+0xd630>
   1ffd8:	cmp	r0, #0
   1ffdc:	moveq	r3, #1
   1ffe0:	strbeq	r3, [r5, #4]
   1ffe4:	b	1ff9c <__assert_fail@plt+0xd858>
   1ffe8:	ldrdeq	sp, [r3], -ip
   1ffec:	push	{r4, r5, r6, lr}
   1fff0:	ldr	r5, [pc, #44]	; 20024 <__assert_fail@plt+0xd8e0>
   1fff4:	ldr	r4, [r5, #8]
   1fff8:	cmp	r4, #0
   1fffc:	beq	20008 <__assert_fail@plt+0xd8c4>
   20000:	mov	r0, r4
   20004:	pop	{r4, r5, r6, pc}
   20008:	bl	1ff0c <__assert_fail@plt+0xd7c8>
   2000c:	mov	r1, r4
   20010:	bl	1a628 <__assert_fail@plt+0x7ee4>
   20014:	mov	r4, r0
   20018:	str	r0, [r5, #8]
   2001c:	mov	r0, r4
   20020:	pop	{r4, r5, r6, pc}
   20024:	ldrdeq	sp, [r3], -ip
   20028:	ldr	r3, [pc, #12]	; 2003c <__assert_fail@plt+0xd8f8>
   2002c:	ldrb	r0, [r3, #4]
   20030:	clz	r0, r0
   20034:	lsr	r0, r0, #5
   20038:	bx	lr
   2003c:	ldrdeq	sp, [r3], -ip
   20040:	ldr	r0, [pc]	; 20048 <__assert_fail@plt+0xd904>
   20044:	bx	lr
   20048:	andeq	r9, r2, r8, lsr #32
   2004c:	push	{r4, r5, r6, r7, r8, r9, lr}
   20050:	mov	r2, #0
   20054:	ldr	r8, [pc, #884]	; 203d0 <__assert_fail@plt+0xdc8c>
   20058:	sub	sp, sp, #188	; 0xbc
   2005c:	mov	r7, r1
   20060:	ldr	r3, [r8]
   20064:	str	r2, [r1]
   20068:	mov	r9, r0
   2006c:	str	r3, [sp, #180]	; 0xb4
   20070:	bl	1ffec <__assert_fail@plt+0xd8a8>
   20074:	ldr	r5, [pc, #856]	; 203d4 <__assert_fail@plt+0xdc90>
   20078:	ldr	r4, [pc, #856]	; 203d8 <__assert_fail@plt+0xdc94>
   2007c:	ldr	r6, [pc, #856]	; 203dc <__assert_fail@plt+0xdc98>
   20080:	bl	120c0 <getuid@plt>
   20084:	mov	r3, r4
   20088:	mov	r2, r6
   2008c:	mov	r1, #47	; 0x2f
   20090:	str	r0, [sp]
   20094:	add	r0, sp, #132	; 0x84
   20098:	bl	12564 <gpgrt_snprintf@plt>
   2009c:	add	r2, sp, #8
   200a0:	add	r1, sp, #132	; 0x84
   200a4:	mov	r0, #3
   200a8:	bl	126a8 <__xstat64@plt>
   200ac:	cmp	r0, #0
   200b0:	bne	200c4 <__assert_fail@plt+0xd980>
   200b4:	ldr	r3, [sp, #24]
   200b8:	and	r3, r3, #61440	; 0xf000
   200bc:	cmp	r3, #16384	; 0x4000
   200c0:	beq	20108 <__assert_fail@plt+0xd9c4>
   200c4:	ldr	r4, [r5], #4
   200c8:	cmp	r4, #0
   200cc:	bne	20080 <__assert_fail@plt+0xd93c>
   200d0:	ldr	r3, [r7]
   200d4:	orr	r3, r3, #2
   200d8:	orr	r3, r3, #128	; 0x80
   200dc:	str	r3, [r7]
   200e0:	bl	1ffec <__assert_fail@plt+0xd8a8>
   200e4:	bl	12528 <gcry_xstrdup@plt>
   200e8:	mov	r4, r0
   200ec:	ldr	r2, [sp, #180]	; 0xb4
   200f0:	ldr	r3, [r8]
   200f4:	mov	r0, r4
   200f8:	cmp	r2, r3
   200fc:	bne	20398 <__assert_fail@plt+0xdc54>
   20100:	add	sp, sp, #188	; 0xbc
   20104:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20108:	ldr	r4, [sp, #32]
   2010c:	bl	120c0 <getuid@plt>
   20110:	cmp	r4, r0
   20114:	beq	2012c <__assert_fail@plt+0xd9e8>
   20118:	ldr	r3, [r7]
   2011c:	cmp	r9, #0
   20120:	orr	r3, r3, #4
   20124:	str	r3, [r7]
   20128:	beq	200d8 <__assert_fail@plt+0xd994>
   2012c:	add	r0, sp, #132	; 0x84
   20130:	bl	123e4 <strlen@plt>
   20134:	add	r2, r0, #7
   20138:	cmp	r2, #46	; 0x2e
   2013c:	mov	r3, r0
   20140:	bls	20150 <__assert_fail@plt+0xda0c>
   20144:	ldr	r3, [r7]
   20148:	orr	r3, r3, #1
   2014c:	b	200d8 <__assert_fail@plt+0xd994>
   20150:	ldr	r2, [pc, #648]	; 203e0 <__assert_fail@plt+0xdc9c>
   20154:	add	r1, sp, #132	; 0x84
   20158:	add	ip, r1, r0
   2015c:	ldrb	lr, [r2, #6]
   20160:	ldrh	r1, [r2, #4]
   20164:	ldr	r0, [r2]
   20168:	add	r2, sp, #132	; 0x84
   2016c:	str	r0, [r2, r3]
   20170:	strh	r1, [ip, #4]
   20174:	add	r2, sp, #8
   20178:	add	r1, sp, #132	; 0x84
   2017c:	strb	lr, [ip, #6]
   20180:	mov	r0, #3
   20184:	bl	126a8 <__xstat64@plt>
   20188:	cmp	r0, #0
   2018c:	bne	2027c <__assert_fail@plt+0xdb38>
   20190:	ldr	r3, [sp, #24]
   20194:	and	r3, r3, #61440	; 0xf000
   20198:	cmp	r3, #16384	; 0x4000
   2019c:	beq	202c8 <__assert_fail@plt+0xdb84>
   201a0:	ldr	r3, [r7]
   201a4:	cmp	r9, #0
   201a8:	orr	r3, r3, #4
   201ac:	str	r3, [r7]
   201b0:	beq	200d8 <__assert_fail@plt+0xd994>
   201b4:	ldr	r3, [pc, #552]	; 203e4 <__assert_fail@plt+0xdca0>
   201b8:	ldrb	r3, [r3, #4]
   201bc:	cmp	r3, #0
   201c0:	beq	202ac <__assert_fail@plt+0xdb68>
   201c4:	ldr	r3, [r7]
   201c8:	orr	r3, r3, #32
   201cc:	str	r3, [r7]
   201d0:	bl	1ffec <__assert_fail@plt+0xd8a8>
   201d4:	mov	r4, r0
   201d8:	bl	123e4 <strlen@plt>
   201dc:	mov	r2, r4
   201e0:	add	r1, sp, #112	; 0x70
   201e4:	mov	r3, r0
   201e8:	mov	r0, #2
   201ec:	bl	1257c <gcry_md_hash_buffer@plt>
   201f0:	add	r0, sp, #112	; 0x70
   201f4:	mov	r1, #120	; 0x78
   201f8:	bl	223c8 <__assert_fail@plt+0xfc84>
   201fc:	subs	r5, r0, #0
   20200:	beq	20144 <__assert_fail@plt+0xda00>
   20204:	mov	r3, #0
   20208:	mov	r2, r5
   2020c:	ldr	r1, [pc, #468]	; 203e8 <__assert_fail@plt+0xdca4>
   20210:	add	r0, sp, #132	; 0x84
   20214:	bl	1ab74 <__assert_fail@plt+0x8430>
   20218:	mov	r4, r0
   2021c:	mov	r0, r5
   20220:	bl	12150 <gcry_free@plt>
   20224:	cmp	r4, #0
   20228:	beq	2032c <__assert_fail@plt+0xdbe8>
   2022c:	add	r2, sp, #8
   20230:	mov	r1, r4
   20234:	mov	r0, #3
   20238:	bl	126a8 <__xstat64@plt>
   2023c:	cmp	r0, #0
   20240:	beq	20304 <__assert_fail@plt+0xdbc0>
   20244:	bl	1245c <__errno_location@plt>
   20248:	ldr	r3, [r0]
   2024c:	mov	r5, r0
   20250:	cmp	r3, #2
   20254:	beq	2033c <__assert_fail@plt+0xdbf8>
   20258:	ldr	r3, [r7]
   2025c:	cmp	r9, #0
   20260:	orr	r3, r3, #1
   20264:	str	r3, [r7]
   20268:	bne	200ec <__assert_fail@plt+0xd9a8>
   2026c:	mov	r0, r4
   20270:	bl	12150 <gcry_free@plt>
   20274:	ldr	r3, [r7]
   20278:	b	200d8 <__assert_fail@plt+0xd994>
   2027c:	bl	1245c <__errno_location@plt>
   20280:	ldr	r3, [r0]
   20284:	cmp	r3, #2
   20288:	bne	20144 <__assert_fail@plt+0xda00>
   2028c:	ldr	r1, [pc, #344]	; 203ec <__assert_fail@plt+0xdca8>
   20290:	add	r0, sp, #132	; 0x84
   20294:	bl	1f720 <__assert_fail@plt+0xcfdc>
   20298:	cmp	r0, #0
   2029c:	beq	202e8 <__assert_fail@plt+0xdba4>
   202a0:	ldr	r3, [r7]
   202a4:	orr	r3, r3, #16
   202a8:	b	200d8 <__assert_fail@plt+0xd994>
   202ac:	add	r0, sp, #132	; 0x84
   202b0:	bl	12528 <gcry_xstrdup@plt>
   202b4:	mov	r4, r0
   202b8:	cmp	r4, #0
   202bc:	bne	200ec <__assert_fail@plt+0xd9a8>
   202c0:	ldr	r3, [r7]
   202c4:	b	200d8 <__assert_fail@plt+0xd994>
   202c8:	ldr	r4, [sp, #32]
   202cc:	bl	120c0 <getuid@plt>
   202d0:	cmp	r4, r0
   202d4:	bne	201a0 <__assert_fail@plt+0xda5c>
   202d8:	ldr	r3, [sp, #24]
   202dc:	tst	r3, #63	; 0x3f
   202e0:	bne	201a0 <__assert_fail@plt+0xda5c>
   202e4:	b	201b4 <__assert_fail@plt+0xda70>
   202e8:	add	r2, sp, #8
   202ec:	add	r1, sp, #132	; 0x84
   202f0:	mov	r0, #3
   202f4:	bl	126a8 <__xstat64@plt>
   202f8:	cmp	r0, #0
   202fc:	beq	20190 <__assert_fail@plt+0xda4c>
   20300:	b	20144 <__assert_fail@plt+0xda00>
   20304:	ldr	r3, [sp, #24]
   20308:	and	r3, r3, #61440	; 0xf000
   2030c:	cmp	r3, #16384	; 0x4000
   20310:	beq	20354 <__assert_fail@plt+0xdc10>
   20314:	ldr	r3, [r7]
   20318:	cmp	r9, #0
   2031c:	orr	r3, r3, #8
   20320:	str	r3, [r7]
   20324:	bne	200ec <__assert_fail@plt+0xd9a8>
   20328:	b	2026c <__assert_fail@plt+0xdb28>
   2032c:	ldr	r3, [r7]
   20330:	orr	r3, r3, #1
   20334:	str	r3, [r7]
   20338:	b	200d8 <__assert_fail@plt+0xd994>
   2033c:	cmp	r9, #0
   20340:	beq	20374 <__assert_fail@plt+0xdc30>
   20344:	ldr	r3, [r7]
   20348:	orr	r3, r3, #64	; 0x40
   2034c:	str	r3, [r7]
   20350:	b	200ec <__assert_fail@plt+0xd9a8>
   20354:	ldr	r5, [sp, #32]
   20358:	bl	120c0 <getuid@plt>
   2035c:	cmp	r5, r0
   20360:	bne	20314 <__assert_fail@plt+0xdbd0>
   20364:	ldr	r3, [sp, #24]
   20368:	tst	r3, #63	; 0x3f
   2036c:	bne	20314 <__assert_fail@plt+0xdbd0>
   20370:	b	200ec <__assert_fail@plt+0xd9a8>
   20374:	ldr	r1, [pc, #112]	; 203ec <__assert_fail@plt+0xdca8>
   20378:	mov	r0, r4
   2037c:	bl	1f720 <__assert_fail@plt+0xcfdc>
   20380:	cmp	r0, #0
   20384:	beq	2039c <__assert_fail@plt+0xdc58>
   20388:	ldr	r3, [r7]
   2038c:	orr	r3, r3, #16
   20390:	str	r3, [r7]
   20394:	b	2026c <__assert_fail@plt+0xdb28>
   20398:	bl	1218c <__stack_chk_fail@plt>
   2039c:	add	r2, sp, #8
   203a0:	add	r1, sp, #132	; 0x84
   203a4:	mov	r0, #3
   203a8:	bl	126a8 <__xstat64@plt>
   203ac:	cmp	r0, #0
   203b0:	beq	202b8 <__assert_fail@plt+0xdb74>
   203b4:	ldr	r2, [r5]
   203b8:	ldr	r3, [r7]
   203bc:	cmp	r2, #2
   203c0:	orrne	r3, r3, #1
   203c4:	orreq	r3, r3, #64	; 0x40
   203c8:	str	r3, [r7]
   203cc:	b	2026c <__assert_fail@plt+0xdb28>
   203d0:	andeq	sl, r3, r8, asr fp
   203d4:	andeq	r9, r2, r0, lsl #23
   203d8:	andeq	r9, r2, r8, ror #27
   203dc:	strdeq	r9, [r2], -r0
   203e0:	andeq	r9, r2, r4, lsl ip
   203e4:	ldrdeq	sp, [r3], -ip
   203e8:	strdeq	r9, [r2], -ip
   203ec:	andeq	r5, r2, ip, ror #20
   203f0:	push	{r4, r5, lr}
   203f4:	sub	sp, sp, #12
   203f8:	ldr	r5, [pc, #64]	; 20440 <__assert_fail@plt+0xdcfc>
   203fc:	ldr	r4, [pc, #64]	; 20444 <__assert_fail@plt+0xdd00>
   20400:	ldr	r0, [r5, #12]
   20404:	ldr	r3, [r4]
   20408:	cmp	r0, #0
   2040c:	str	r3, [sp, #4]
   20410:	beq	2042c <__assert_fail@plt+0xdce8>
   20414:	ldr	r2, [sp, #4]
   20418:	ldr	r3, [r4]
   2041c:	cmp	r2, r3
   20420:	bne	2043c <__assert_fail@plt+0xdcf8>
   20424:	add	sp, sp, #12
   20428:	pop	{r4, r5, pc}
   2042c:	mov	r1, sp
   20430:	bl	2004c <__assert_fail@plt+0xd908>
   20434:	str	r0, [r5, #12]
   20438:	b	20414 <__assert_fail@plt+0xdcd0>
   2043c:	bl	1218c <__stack_chk_fail@plt>
   20440:	ldrdeq	sp, [r3], -ip
   20444:	andeq	sl, r3, r8, asr fp
   20448:	ldr	r0, [pc]	; 20450 <__assert_fail@plt+0xdd0c>
   2044c:	bx	lr
   20450:	andeq	r9, r2, r0, lsl #24
   20454:	ldr	r0, [pc]	; 2045c <__assert_fail@plt+0xdd18>
   20458:	bx	lr
   2045c:	andeq	r9, r2, ip, lsl #24
   20460:	ldr	r0, [pc]	; 20468 <__assert_fail@plt+0xdd24>
   20464:	bx	lr
   20468:	andeq	r9, r2, ip, lsl ip
   2046c:	ldr	r0, [pc]	; 20474 <__assert_fail@plt+0xdd30>
   20470:	bx	lr
   20474:	andeq	r9, r2, r0, asr #24
   20478:	ldr	r0, [pc]	; 20480 <__assert_fail@plt+0xdd3c>
   2047c:	bx	lr
   20480:	andeq	r6, r2, r8, lsl #9
   20484:	ldr	r0, [pc]	; 2048c <__assert_fail@plt+0xdd48>
   20488:	bx	lr
   2048c:	andeq	r9, r2, r4, asr ip
   20490:	push	{r4, r5, lr}
   20494:	sub	sp, sp, #12
   20498:	ldr	r5, [pc, #96]	; 20500 <__assert_fail@plt+0xddbc>
   2049c:	ldr	r4, [pc, #96]	; 20504 <__assert_fail@plt+0xddc0>
   204a0:	ldr	r0, [r5, #16]
   204a4:	ldr	r3, [r4]
   204a8:	cmp	r0, #0
   204ac:	str	r3, [sp, #4]
   204b0:	beq	204cc <__assert_fail@plt+0xdd88>
   204b4:	ldr	r2, [sp, #4]
   204b8:	ldr	r3, [r4]
   204bc:	cmp	r2, r3
   204c0:	bne	204fc <__assert_fail@plt+0xddb8>
   204c4:	add	sp, sp, #12
   204c8:	pop	{r4, r5, pc}
   204cc:	ldr	r0, [r5, #12]
   204d0:	cmp	r0, #0
   204d4:	beq	204ec <__assert_fail@plt+0xdda8>
   204d8:	mov	r2, #0
   204dc:	ldr	r1, [pc, #36]	; 20508 <__assert_fail@plt+0xddc4>
   204e0:	bl	1a578 <__assert_fail@plt+0x7e34>
   204e4:	str	r0, [r5, #16]
   204e8:	b	204b4 <__assert_fail@plt+0xdd70>
   204ec:	mov	r1, sp
   204f0:	bl	2004c <__assert_fail@plt+0xd908>
   204f4:	str	r0, [r5, #12]
   204f8:	b	204d8 <__assert_fail@plt+0xdd94>
   204fc:	bl	1218c <__stack_chk_fail@plt>
   20500:	ldrdeq	sp, [r3], -ip
   20504:	andeq	sl, r3, r8, asr fp
   20508:	andeq	r5, r2, r4, lsl #26
   2050c:	push	{r4, lr}
   20510:	ldr	r4, [pc, #72]	; 20560 <__assert_fail@plt+0xde1c>
   20514:	ldr	r3, [r4, #20]
   20518:	cmp	r3, #0
   2051c:	bne	20538 <__assert_fail@plt+0xddf4>
   20520:	ldr	r3, [r4, #24]
   20524:	cmp	r3, #0
   20528:	bne	2054c <__assert_fail@plt+0xde08>
   2052c:	bl	12714 <gcry_strdup@plt>
   20530:	str	r0, [r4, #24]
   20534:	pop	{r4, pc}
   20538:	ldr	r3, [pc, #36]	; 20564 <__assert_fail@plt+0xde20>
   2053c:	ldr	r2, [pc, #36]	; 20568 <__assert_fail@plt+0xde24>
   20540:	ldr	r1, [pc, #36]	; 2056c <__assert_fail@plt+0xde28>
   20544:	ldr	r0, [pc, #36]	; 20570 <__assert_fail@plt+0xde2c>
   20548:	bl	1ece4 <__assert_fail@plt+0xc5a0>
   2054c:	ldr	r3, [pc, #16]	; 20564 <__assert_fail@plt+0xde20>
   20550:	ldr	r2, [pc, #28]	; 20574 <__assert_fail@plt+0xde30>
   20554:	ldr	r1, [pc, #16]	; 2056c <__assert_fail@plt+0xde28>
   20558:	ldr	r0, [pc, #24]	; 20578 <__assert_fail@plt+0xde34>
   2055c:	bl	1ece4 <__assert_fail@plt+0xc5a0>
   20560:	ldrdeq	sp, [r3], -ip
   20564:	andeq	r9, r2, r8, lsl #23
   20568:	andeq	r0, r0, sp, lsl #8
   2056c:	andeq	r9, r2, r8, ror #24
   20570:	andeq	r9, r2, r0, lsl #25
   20574:	andeq	r0, r0, lr, lsl #8
   20578:	muleq	r2, ip, ip
   2057c:	push	{r4, lr}
   20580:	mov	r3, #1
   20584:	ldr	r4, [pc, #664]	; 20824 <__assert_fail@plt+0xe0e0>
   20588:	sub	r0, r0, #1
   2058c:	str	r3, [r4, #20]
   20590:	cmp	r0, #11
   20594:	ldrls	pc, [pc, r0, lsl #2]
   20598:	b	20814 <__assert_fail@plt+0xe0d0>
   2059c:	andeq	r0, r2, r0, lsl #12
   205a0:	andeq	r0, r2, r4, lsr r6
   205a4:	andeq	r0, r2, r0, asr #12
   205a8:	andeq	r0, r2, r4, ror r6
   205ac:	andeq	r0, r2, r8, lsr #13
   205b0:	ldrdeq	r0, [r2], -ip
   205b4:	andeq	r0, r2, r0, lsl r7
   205b8:	andeq	r0, r2, r4, asr #14
   205bc:	andeq	r0, r2, r8, ror r7
   205c0:	andeq	r0, r2, ip, lsr #15
   205c4:	andeq	r0, r2, r0, ror #15
   205c8:	andeq	r0, r2, ip, asr #11
   205cc:	ldr	r0, [r4, #60]	; 0x3c
   205d0:	cmp	r0, #0
   205d4:	popne	{r4, pc}
   205d8:	ldr	r3, [r4, #24]
   205dc:	mov	r2, r0
   205e0:	cmp	r3, #0
   205e4:	movne	r0, r3
   205e8:	ldrne	r1, [pc, #568]	; 20828 <__assert_fail@plt+0xe0e4>
   205ec:	ldreq	r1, [pc, #568]	; 2082c <__assert_fail@plt+0xe0e8>
   205f0:	ldreq	r0, [pc, #568]	; 20830 <__assert_fail@plt+0xe0ec>
   205f4:	bl	1abe0 <__assert_fail@plt+0x849c>
   205f8:	str	r0, [r4, #60]	; 0x3c
   205fc:	pop	{r4, pc}
   20600:	ldr	r0, [r4, #28]
   20604:	cmp	r0, #0
   20608:	popne	{r4, pc}
   2060c:	ldr	r3, [r4, #24]
   20610:	mov	r2, r0
   20614:	cmp	r3, #0
   20618:	movne	r0, r3
   2061c:	ldrne	r1, [pc, #528]	; 20834 <__assert_fail@plt+0xe0f0>
   20620:	ldreq	r1, [pc, #528]	; 20838 <__assert_fail@plt+0xe0f4>
   20624:	ldreq	r0, [pc, #516]	; 20830 <__assert_fail@plt+0xe0ec>
   20628:	bl	1abe0 <__assert_fail@plt+0x849c>
   2062c:	str	r0, [r4, #28]
   20630:	pop	{r4, pc}
   20634:	mov	r0, #0
   20638:	pop	{r4, lr}
   2063c:	b	1fdc4 <__assert_fail@plt+0xd680>
   20640:	ldr	r0, [r4, #32]
   20644:	cmp	r0, #0
   20648:	popne	{r4, pc}
   2064c:	ldr	r3, [r4, #24]
   20650:	mov	r2, r0
   20654:	cmp	r3, #0
   20658:	movne	r0, r3
   2065c:	ldrne	r1, [pc, #472]	; 2083c <__assert_fail@plt+0xe0f8>
   20660:	ldreq	r1, [pc, #472]	; 20840 <__assert_fail@plt+0xe0fc>
   20664:	ldreq	r0, [pc, #472]	; 20844 <__assert_fail@plt+0xe100>
   20668:	bl	1abe0 <__assert_fail@plt+0x849c>
   2066c:	str	r0, [r4, #32]
   20670:	pop	{r4, pc}
   20674:	ldr	r0, [r4, #36]	; 0x24
   20678:	cmp	r0, #0
   2067c:	popne	{r4, pc}
   20680:	ldr	r3, [r4, #24]
   20684:	mov	r2, r0
   20688:	cmp	r3, #0
   2068c:	movne	r0, r3
   20690:	ldrne	r1, [pc, #432]	; 20848 <__assert_fail@plt+0xe104>
   20694:	ldreq	r1, [pc, #432]	; 2084c <__assert_fail@plt+0xe108>
   20698:	ldreq	r0, [pc, #400]	; 20830 <__assert_fail@plt+0xe0ec>
   2069c:	bl	1abe0 <__assert_fail@plt+0x849c>
   206a0:	str	r0, [r4, #36]	; 0x24
   206a4:	pop	{r4, pc}
   206a8:	ldr	r0, [r4, #40]	; 0x28
   206ac:	cmp	r0, #0
   206b0:	popne	{r4, pc}
   206b4:	ldr	r3, [r4, #24]
   206b8:	mov	r2, r0
   206bc:	cmp	r3, #0
   206c0:	movne	r0, r3
   206c4:	ldrne	r1, [pc, #388]	; 20850 <__assert_fail@plt+0xe10c>
   206c8:	ldreq	r1, [pc, #388]	; 20854 <__assert_fail@plt+0xe110>
   206cc:	ldreq	r0, [pc, #368]	; 20844 <__assert_fail@plt+0xe100>
   206d0:	bl	1abe0 <__assert_fail@plt+0x849c>
   206d4:	str	r0, [r4, #40]	; 0x28
   206d8:	pop	{r4, pc}
   206dc:	ldr	r0, [r4, #48]	; 0x30
   206e0:	cmp	r0, #0
   206e4:	popne	{r4, pc}
   206e8:	ldr	r3, [r4, #24]
   206ec:	mov	r2, r0
   206f0:	cmp	r3, #0
   206f4:	movne	r0, r3
   206f8:	ldrne	r1, [pc, #344]	; 20858 <__assert_fail@plt+0xe114>
   206fc:	ldreq	r1, [pc, #344]	; 2085c <__assert_fail@plt+0xe118>
   20700:	ldreq	r0, [pc, #316]	; 20844 <__assert_fail@plt+0xe100>
   20704:	bl	1abe0 <__assert_fail@plt+0x849c>
   20708:	str	r0, [r4, #48]	; 0x30
   2070c:	pop	{r4, pc}
   20710:	ldr	r0, [r4, #52]	; 0x34
   20714:	cmp	r0, #0
   20718:	popne	{r4, pc}
   2071c:	ldr	r3, [r4, #24]
   20720:	mov	r2, r0
   20724:	cmp	r3, #0
   20728:	movne	r0, r3
   2072c:	ldrne	r1, [pc, #300]	; 20860 <__assert_fail@plt+0xe11c>
   20730:	ldreq	r1, [pc, #300]	; 20864 <__assert_fail@plt+0xe120>
   20734:	ldreq	r0, [pc, #244]	; 20830 <__assert_fail@plt+0xe0ec>
   20738:	bl	1abe0 <__assert_fail@plt+0x849c>
   2073c:	str	r0, [r4, #52]	; 0x34
   20740:	pop	{r4, pc}
   20744:	ldr	r0, [r4, #56]	; 0x38
   20748:	cmp	r0, #0
   2074c:	popne	{r4, pc}
   20750:	ldr	r3, [r4, #24]
   20754:	mov	r2, r0
   20758:	cmp	r3, #0
   2075c:	movne	r0, r3
   20760:	ldrne	r1, [pc, #256]	; 20868 <__assert_fail@plt+0xe124>
   20764:	ldreq	r1, [pc, #256]	; 2086c <__assert_fail@plt+0xe128>
   20768:	ldreq	r0, [pc, #192]	; 20830 <__assert_fail@plt+0xe0ec>
   2076c:	bl	1abe0 <__assert_fail@plt+0x849c>
   20770:	str	r0, [r4, #56]	; 0x38
   20774:	pop	{r4, pc}
   20778:	ldr	r0, [r4, #64]	; 0x40
   2077c:	cmp	r0, #0
   20780:	popne	{r4, pc}
   20784:	ldr	r3, [r4, #24]
   20788:	mov	r2, r0
   2078c:	cmp	r3, #0
   20790:	movne	r0, r3
   20794:	ldrne	r1, [pc, #212]	; 20870 <__assert_fail@plt+0xe12c>
   20798:	ldreq	r1, [pc, #212]	; 20874 <__assert_fail@plt+0xe130>
   2079c:	ldreq	r0, [pc, #140]	; 20830 <__assert_fail@plt+0xe0ec>
   207a0:	bl	1abe0 <__assert_fail@plt+0x849c>
   207a4:	str	r0, [r4, #64]	; 0x40
   207a8:	pop	{r4, pc}
   207ac:	ldr	r0, [r4, #68]	; 0x44
   207b0:	cmp	r0, #0
   207b4:	popne	{r4, pc}
   207b8:	ldr	r3, [r4, #24]
   207bc:	mov	r2, r0
   207c0:	cmp	r3, #0
   207c4:	movne	r0, r3
   207c8:	ldrne	r1, [pc, #168]	; 20878 <__assert_fail@plt+0xe134>
   207cc:	ldreq	r1, [pc, #168]	; 2087c <__assert_fail@plt+0xe138>
   207d0:	ldreq	r0, [pc, #88]	; 20830 <__assert_fail@plt+0xe0ec>
   207d4:	bl	1abe0 <__assert_fail@plt+0x849c>
   207d8:	str	r0, [r4, #68]	; 0x44
   207dc:	pop	{r4, pc}
   207e0:	ldr	r0, [r4, #44]	; 0x2c
   207e4:	cmp	r0, #0
   207e8:	popne	{r4, pc}
   207ec:	ldr	r3, [r4, #24]
   207f0:	mov	r2, r0
   207f4:	cmp	r3, #0
   207f8:	movne	r0, r3
   207fc:	ldrne	r1, [pc, #124]	; 20880 <__assert_fail@plt+0xe13c>
   20800:	ldreq	r1, [pc, #124]	; 20884 <__assert_fail@plt+0xe140>
   20804:	ldreq	r0, [pc, #56]	; 20844 <__assert_fail@plt+0xe100>
   20808:	bl	1abe0 <__assert_fail@plt+0x849c>
   2080c:	str	r0, [r4, #44]	; 0x2c
   20810:	pop	{r4, pc}
   20814:	ldr	r2, [pc, #108]	; 20888 <__assert_fail@plt+0xe144>
   20818:	ldr	r1, [pc, #108]	; 2088c <__assert_fail@plt+0xe148>
   2081c:	ldr	r0, [pc, #108]	; 20890 <__assert_fail@plt+0xe14c>
   20820:	bl	1ecbc <__assert_fail@plt+0xc578>
   20824:	ldrdeq	sp, [r3], -ip
   20828:	andeq	r9, r2, ip, lsl #27
   2082c:	muleq	r2, r0, sp
   20830:			; <UNDEFINED> instruction: 0x00029bb0
   20834:			; <UNDEFINED> instruction: 0x00029cb4
   20838:	andeq	r9, r2, r8, asr #25
   2083c:	ldrdeq	r9, [r2], -r4
   20840:	ldrdeq	r9, [r2], -r8
   20844:	andeq	r9, r2, ip, lsl #24
   20848:	andeq	r9, r2, r4, ror #25
   2084c:	andeq	r9, r2, ip, ror #25
   20850:	strdeq	r9, [r2], -r8
   20854:	andeq	r9, r2, r0, lsl sp
   20858:	andeq	r9, r2, ip, lsr sp
   2085c:	andeq	r9, r2, r8, asr sp
   20860:	andeq	r9, r2, ip, ror #26
   20864:	andeq	r9, r2, r8, ror sp
   20868:	andeq	r9, r2, r0, lsl #27
   2086c:	andeq	r9, r2, r4, lsl #27
   20870:	muleq	r2, r8, sp
   20874:			; <UNDEFINED> instruction: 0x00029db4
   20878:	andeq	r9, r2, r8, asr #27
   2087c:	ldrdeq	r9, [r2], -r8
   20880:	andeq	r9, r2, r4, lsr #26
   20884:	andeq	r9, r2, ip, lsr #26
   20888:	muleq	r2, ip, fp
   2088c:	andeq	r0, r0, lr, ror r4
   20890:	andeq	r9, r2, r8, ror #24
   20894:	mov	r0, #1
   20898:	b	1fdc4 <__assert_fail@plt+0xd680>
   2089c:	andeq	r0, r0, r0
   208a0:	add	ip, r0, r0, lsl #3
   208a4:	sub	r3, r1, #1
   208a8:	add	ip, r0, ip, lsl #3
   208ac:	cmp	r1, #2
   208b0:	add	ip, ip, ip, lsl #2
   208b4:	rsb	r3, r3, r3, lsl #5
   208b8:	add	r3, r3, ip
   208bc:	lslgt	r1, r1, #2
   208c0:	add	r2, r3, r2
   208c4:	ldrgt	r3, [pc, #88]	; 20924 <__assert_fail@plt+0xe1e0>
   208c8:	addgt	r1, r1, #23
   208cc:	ldr	ip, [pc, #84]	; 20928 <__assert_fail@plt+0xe1e4>
   208d0:	suble	r0, r0, #1
   208d4:	umullgt	r3, r1, r3, r1
   208d8:	push	{lr}		; (str lr, [sp, #-4]!)
   208dc:	smull	lr, ip, ip, r0
   208e0:	add	r2, r2, #1720320	; 0x1a4000
   208e4:	add	r2, r2, #740	; 0x2e4
   208e8:	subgt	r2, r2, r1, lsr #3
   208ec:	asr	r1, r0, #31
   208f0:	add	r3, r0, #3
   208f4:	cmp	r0, #0
   208f8:	rsb	r1, r1, ip, asr #5
   208fc:	movlt	r0, r3
   20900:	add	r1, r1, #1
   20904:	asr	r3, r0, #2
   20908:	add	r0, r1, r1, lsl #1
   2090c:	add	r1, r0, #3
   20910:	cmp	r0, #0
   20914:	movlt	r0, r1
   20918:	sub	r0, r3, r0, asr #2
   2091c:	add	r0, r0, r2
   20920:	pop	{pc}		; (ldr pc, [sp], #4)
   20924:	stclgt	12, cr12, [ip], {205}	; 0xcd
   20928:	mvnpl	r8, pc, lsl r5
   2092c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20930:	sub	r4, r0, #1720320	; 0x1a4000
   20934:	mov	r6, r0
   20938:	ldr	r0, [pc, #592]	; 20b90 <__assert_fail@plt+0xe44c>
   2093c:	sub	sp, sp, #20
   20940:	sub	r4, r4, #740	; 0x2e4
   20944:	str	r1, [sp, #4]
   20948:	umull	r1, r4, r0, r4
   2094c:	ldr	r7, [pc, #576]	; 20b94 <__assert_fail@plt+0xe450>
   20950:	strd	r2, [sp, #8]
   20954:	lsr	r4, r4, #8
   20958:	ldr	r8, [pc, #568]	; 20b98 <__assert_fail@plt+0xe454>
   2095c:	ldr	r5, [pc, #568]	; 20b9c <__assert_fail@plt+0xe458>
   20960:	b	20968 <__assert_fail@plt+0xe224>
   20964:	add	r4, r4, #1
   20968:	mov	r2, #1
   2096c:	mov	r1, r2
   20970:	mov	r0, r4
   20974:	bl	208a0 <__assert_fail@plt+0xe15c>
   20978:	umull	r3, r2, r7, r4
   2097c:	lsr	r3, r2, #5
   20980:	add	r3, r3, r3, lsl #2
   20984:	add	r3, r3, r3, lsl #2
   20988:	cmp	r4, r3, lsl #2
   2098c:	sub	r0, r6, r0
   20990:	bne	209ac <__assert_fail@plt+0xe268>
   20994:	lsr	r2, r2, #7
   20998:	add	r2, r2, r2, lsl #2
   2099c:	add	r2, r2, r2, lsl #2
   209a0:	cmp	r4, r2, lsl #4
   209a4:	movne	r3, r5
   209a8:	bne	209b8 <__assert_fail@plt+0xe274>
   209ac:	tst	r4, #3
   209b0:	moveq	r3, r8
   209b4:	movne	r3, r5
   209b8:	cmp	r0, r3
   209bc:	bgt	20964 <__assert_fail@plt+0xe220>
   209c0:	ldr	r3, [pc, #472]	; 20ba0 <__assert_fail@plt+0xe45c>
   209c4:	asr	r5, r0, #31
   209c8:	ldr	sl, [pc, #452]	; 20b94 <__assert_fail@plt+0xe450>
   209cc:	smull	r2, r3, r3, r0
   209d0:	add	r0, r3, r0
   209d4:	rsb	r5, r5, r0, asr #4
   209d8:	add	r5, r5, #1
   209dc:	umull	r3, r7, sl, r4
   209e0:	add	r5, r5, #1
   209e4:	lsr	r8, r7, #5
   209e8:	lsr	r7, r7, #7
   209ec:	add	r8, r8, r8, lsl #2
   209f0:	add	r7, r7, r7, lsl #2
   209f4:	add	r8, r8, r8, lsl #2
   209f8:	add	r7, r7, r7, lsl #2
   209fc:	sub	r8, r4, r8, lsl #2
   20a00:	sub	r7, r4, r7, lsl #4
   20a04:	and	r9, r4, #3
   20a08:	sub	fp, r5, #1
   20a0c:	mov	r1, fp
   20a10:	mov	r2, #1
   20a14:	mov	r0, r4
   20a18:	bl	208a0 <__assert_fail@plt+0xe15c>
   20a1c:	sub	r3, fp, #1
   20a20:	sub	r0, r6, r0
   20a24:	cmp	r3, #11
   20a28:	ldrls	pc, [pc, r3, lsl #2]
   20a2c:	b	20b80 <__assert_fail@plt+0xe43c>
   20a30:	andeq	r0, r2, r0, ror #20
   20a34:	andeq	r0, r2, r4, lsr #22
   20a38:	andeq	r0, r2, r0, ror #20
   20a3c:	andeq	r0, r2, ip, ror sl
   20a40:	andeq	r0, r2, r0, ror #20
   20a44:	andeq	r0, r2, ip, ror sl
   20a48:	andeq	r0, r2, r0, ror #20
   20a4c:	andeq	r0, r2, r0, ror #20
   20a50:	andeq	r0, r2, ip, ror sl
   20a54:	andeq	r0, r2, r0, ror #20
   20a58:	andeq	r0, r2, ip, ror sl
   20a5c:	andeq	r0, r2, r0, ror #20
   20a60:	mov	r2, #31
   20a64:	cmp	r0, r2
   20a68:	ble	20a88 <__assert_fail@plt+0xe344>
   20a6c:	cmp	r5, #13
   20a70:	beq	20b64 <__assert_fail@plt+0xe420>
   20a74:	add	r5, r5, #1
   20a78:	b	20a08 <__assert_fail@plt+0xe2c4>
   20a7c:	mov	r2, #30
   20a80:	cmp	r0, r2
   20a84:	bgt	20a6c <__assert_fail@plt+0xe328>
   20a88:	add	r0, r0, #1
   20a8c:	cmp	r0, r2
   20a90:	ble	20b5c <__assert_fail@plt+0xe418>
   20a94:	cmp	r5, #13
   20a98:	mov	fp, r5
   20a9c:	moveq	fp, #1
   20aa0:	moveq	r0, fp
   20aa4:	moveq	r2, r4
   20aa8:	addeq	r4, r4, r0
   20aac:	bne	20b74 <__assert_fail@plt+0xe430>
   20ab0:	ldr	r3, [sp, #4]
   20ab4:	ldr	r1, [pc, #216]	; 20b94 <__assert_fail@plt+0xe450>
   20ab8:	cmp	r2, #0
   20abc:	str	r4, [r3]
   20ac0:	ldr	r3, [sp, #8]
   20ac4:	str	fp, [r3]
   20ac8:	smull	r1, r3, r1, r2
   20acc:	ldr	r1, [sp, #12]
   20ad0:	str	r0, [r1]
   20ad4:	asr	r0, r2, #31
   20ad8:	rsb	r0, r0, r3, asr #5
   20adc:	add	r3, r4, r4, lsl #3
   20ae0:	add	r0, r0, #1
   20ae4:	add	r4, r4, r3, lsl #3
   20ae8:	add	r0, r0, r0, lsl #1
   20aec:	add	r1, r2, #3
   20af0:	movlt	r2, r1
   20af4:	add	r4, r4, r4, lsl #2
   20af8:	cmp	r0, #0
   20afc:	add	r3, r0, #3
   20b00:	sub	r6, r6, r4
   20b04:	movge	r3, r0
   20b08:	asr	r2, r2, #2
   20b0c:	sub	r0, r6, #1720320	; 0x1a4000
   20b10:	sub	r3, r2, r3, asr #2
   20b14:	sub	r0, r0, #740	; 0x2e4
   20b18:	sub	r0, r0, r3
   20b1c:	add	sp, sp, #20
   20b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b24:	cmp	r8, #0
   20b28:	bne	20b38 <__assert_fail@plt+0xe3f4>
   20b2c:	cmp	r7, #0
   20b30:	movne	r3, #28
   20b34:	bne	20b44 <__assert_fail@plt+0xe400>
   20b38:	cmp	r9, #0
   20b3c:	moveq	r3, #29
   20b40:	movne	r3, #28
   20b44:	cmp	r0, r3
   20b48:	bgt	20a74 <__assert_fail@plt+0xe330>
   20b4c:	add	r0, r0, #1
   20b50:	cmp	r0, r3
   20b54:	bgt	20b70 <__assert_fail@plt+0xe42c>
   20b58:	mov	fp, #2
   20b5c:	sub	r2, r4, #1
   20b60:	b	20ab0 <__assert_fail@plt+0xe36c>
   20b64:	add	r4, r4, #1
   20b68:	mov	r5, #1
   20b6c:	b	209dc <__assert_fail@plt+0xe298>
   20b70:	mov	fp, #3
   20b74:	sub	r2, r4, #1
   20b78:	mov	r0, #1
   20b7c:	b	20ab0 <__assert_fail@plt+0xe36c>
   20b80:	ldr	r2, [pc, #28]	; 20ba4 <__assert_fail@plt+0xe460>
   20b84:	ldr	r1, [pc, #28]	; 20ba8 <__assert_fail@plt+0xe464>
   20b88:	ldr	r0, [pc, #28]	; 20bac <__assert_fail@plt+0xe468>
   20b8c:	bl	1ecbc <__assert_fail@plt+0xc578>
   20b90:	movwlt	r6, #62291	; 0xf353
   20b94:	mvnpl	r8, pc, lsl r5
   20b98:	andeq	r0, r0, lr, ror #2
   20b9c:	andeq	r0, r0, sp, ror #2
   20ba0:	strthi	r0, [r1], #-2115	; 0xfffff7bd
   20ba4:	strdeq	r9, [r2], -r0
   20ba8:	andeq	r0, r0, r3, lsl r3
   20bac:	andeq	r9, r2, r0, lsl lr
   20bb0:	add	r1, r0, #8
   20bb4:	b	20bbc <__assert_fail@plt+0xe478>
   20bb8:	mov	r0, r3
   20bbc:	mov	r3, r0
   20bc0:	ldrb	r2, [r3], #1
   20bc4:	sub	r2, r2, #48	; 0x30
   20bc8:	cmp	r2, #9
   20bcc:	bhi	20c5c <__assert_fail@plt+0xe518>
   20bd0:	cmp	r3, r1
   20bd4:	bne	20bb8 <__assert_fail@plt+0xe474>
   20bd8:	ldrb	r3, [r1]
   20bdc:	cmp	r3, #84	; 0x54
   20be0:	bne	20c5c <__assert_fail@plt+0xe518>
   20be4:	add	r3, r0, #2
   20be8:	add	r0, r0, #8
   20bec:	mov	r1, r3
   20bf0:	add	r3, r3, #1
   20bf4:	ldrb	r2, [r1]
   20bf8:	sub	r2, r2, #48	; 0x30
   20bfc:	cmp	r2, #9
   20c00:	bhi	20c5c <__assert_fail@plt+0xe518>
   20c04:	cmp	r3, r0
   20c08:	bne	20bec <__assert_fail@plt+0xe4a8>
   20c0c:	push	{r4, lr}
   20c10:	ldrb	r4, [r3]
   20c14:	cmp	r4, #90	; 0x5a
   20c18:	ldrbeq	r4, [r1, #2]
   20c1c:	cmp	r4, #0
   20c20:	beq	20c64 <__assert_fail@plt+0xe520>
   20c24:	tst	r4, #128	; 0x80
   20c28:	bne	20c44 <__assert_fail@plt+0xe500>
   20c2c:	bl	12390 <__ctype_b_loc@plt>
   20c30:	lsl	r3, r4, #1
   20c34:	ldr	r2, [r0]
   20c38:	ldrh	r3, [r2, r3]
   20c3c:	tst	r3, #8192	; 0x2000
   20c40:	bne	20c64 <__assert_fail@plt+0xe520>
   20c44:	cmp	r4, #44	; 0x2c
   20c48:	cmpne	r4, #58	; 0x3a
   20c4c:	movne	r4, #1
   20c50:	moveq	r4, #0
   20c54:	eor	r0, r4, #1
   20c58:	pop	{r4, pc}
   20c5c:	mov	r0, #0
   20c60:	bx	lr
   20c64:	mov	r0, #1
   20c68:	pop	{r4, pc}
   20c6c:	add	r2, r0, #4
   20c70:	ldrb	r3, [r0], #1
   20c74:	sub	r3, r3, #48	; 0x30
   20c78:	cmp	r3, #9
   20c7c:	bhi	20e64 <__assert_fail@plt+0xe720>
   20c80:	cmp	r0, r2
   20c84:	bne	20c70 <__assert_fail@plt+0xe52c>
   20c88:	ldrb	r3, [r0]
   20c8c:	cmp	r3, #45	; 0x2d
   20c90:	bne	20e64 <__assert_fail@plt+0xe720>
   20c94:	ldrb	r3, [r0, #1]
   20c98:	sub	r3, r3, #48	; 0x30
   20c9c:	uxtb	r2, r3
   20ca0:	cmp	r2, #9
   20ca4:	bhi	20e64 <__assert_fail@plt+0xe720>
   20ca8:	ldrb	r2, [r0, #2]
   20cac:	sub	r2, r2, #48	; 0x30
   20cb0:	uxtb	ip, r2
   20cb4:	cmp	ip, #9
   20cb8:	bhi	20e64 <__assert_fail@plt+0xe720>
   20cbc:	ldrb	ip, [r0, #3]
   20cc0:	cmp	ip, #45	; 0x2d
   20cc4:	bne	20e64 <__assert_fail@plt+0xe720>
   20cc8:	add	r3, r3, r3, lsl #2
   20ccc:	add	r3, r2, r3, lsl #1
   20cd0:	sub	r3, r3, #1
   20cd4:	cmp	r3, #11
   20cd8:	bhi	20e64 <__assert_fail@plt+0xe720>
   20cdc:	ldrb	r3, [r0, #4]
   20ce0:	sub	r3, r3, #48	; 0x30
   20ce4:	uxtb	r2, r3
   20ce8:	cmp	r2, #9
   20cec:	bhi	20e64 <__assert_fail@plt+0xe720>
   20cf0:	ldrb	r2, [r0, #5]
   20cf4:	sub	r2, r2, #48	; 0x30
   20cf8:	uxtb	ip, r2
   20cfc:	cmp	ip, #9
   20d00:	bhi	20e64 <__assert_fail@plt+0xe720>
   20d04:	add	r3, r3, r3, lsl #2
   20d08:	add	r3, r2, r3, lsl #1
   20d0c:	sub	r3, r3, #1
   20d10:	cmp	r3, #30
   20d14:	bhi	20e64 <__assert_fail@plt+0xe720>
   20d18:	ldrb	r2, [r0, #6]
   20d1c:	cmp	r2, #0
   20d20:	sub	r3, r2, #44	; 0x2c
   20d24:	clz	r3, r3
   20d28:	lsr	r3, r3, #5
   20d2c:	moveq	r3, #1
   20d30:	cmp	r3, #0
   20d34:	bne	20e6c <__assert_fail@plt+0xe728>
   20d38:	cmp	r2, #32
   20d3c:	cmpne	r2, #9
   20d40:	bne	20e64 <__assert_fail@plt+0xe720>
   20d44:	cmp	r1, #0
   20d48:	bne	20e6c <__assert_fail@plt+0xe728>
   20d4c:	ldrb	r3, [r0, #7]
   20d50:	cmp	r3, #9
   20d54:	cmpne	r3, #32
   20d58:	beq	20e6c <__assert_fail@plt+0xe728>
   20d5c:	sub	r3, r3, #48	; 0x30
   20d60:	uxtb	r2, r3
   20d64:	cmp	r2, #9
   20d68:	bhi	20e64 <__assert_fail@plt+0xe720>
   20d6c:	ldrb	r2, [r0, #8]
   20d70:	sub	r2, r2, #48	; 0x30
   20d74:	uxtb	ip, r2
   20d78:	cmp	ip, #9
   20d7c:	bhi	20e64 <__assert_fail@plt+0xe720>
   20d80:	add	r3, r3, r3, lsl #2
   20d84:	add	r3, r2, r3, lsl #1
   20d88:	cmp	r3, #23
   20d8c:	bgt	20e64 <__assert_fail@plt+0xe720>
   20d90:	ldrb	r3, [r0, #9]
   20d94:	cmp	r3, #44	; 0x2c
   20d98:	cmpne	r3, #0
   20d9c:	beq	20e6c <__assert_fail@plt+0xe728>
   20da0:	cmp	r3, #58	; 0x3a
   20da4:	bne	20e64 <__assert_fail@plt+0xe720>
   20da8:	ldrb	r3, [r0, #10]
   20dac:	sub	r3, r3, #48	; 0x30
   20db0:	uxtb	r2, r3
   20db4:	cmp	r2, #9
   20db8:	bhi	20e64 <__assert_fail@plt+0xe720>
   20dbc:	ldrb	r2, [r0, #11]
   20dc0:	sub	r2, r2, #48	; 0x30
   20dc4:	uxtb	r1, r2
   20dc8:	cmp	r1, #9
   20dcc:	bhi	20e64 <__assert_fail@plt+0xe720>
   20dd0:	mov	ip, #10
   20dd4:	mla	r3, ip, r3, r2
   20dd8:	cmp	r3, #59	; 0x3b
   20ddc:	bgt	20e64 <__assert_fail@plt+0xe720>
   20de0:	ldrb	r2, [r0, #12]
   20de4:	cmp	r2, #0
   20de8:	sub	r3, r2, #44	; 0x2c
   20dec:	clz	r3, r3
   20df0:	lsr	r3, r3, #5
   20df4:	moveq	r3, #1
   20df8:	cmp	r3, #0
   20dfc:	bne	20e6c <__assert_fail@plt+0xe728>
   20e00:	cmp	r2, #58	; 0x3a
   20e04:	bne	20e64 <__assert_fail@plt+0xe720>
   20e08:	ldrb	r2, [r0, #13]
   20e0c:	sub	r2, r2, #48	; 0x30
   20e10:	uxtb	r1, r2
   20e14:	cmp	r1, #9
   20e18:	bhi	20e64 <__assert_fail@plt+0xe720>
   20e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   20e20:	ldrb	r1, [r0, #14]
   20e24:	sub	r1, r1, #48	; 0x30
   20e28:	uxtb	lr, r1
   20e2c:	cmp	lr, #9
   20e30:	bhi	20e7c <__assert_fail@plt+0xe738>
   20e34:	mla	r2, ip, r2, r1
   20e38:	cmp	r2, #60	; 0x3c
   20e3c:	bgt	20e7c <__assert_fail@plt+0xe738>
   20e40:	ldrb	r0, [r0, #15]
   20e44:	and	r3, r0, #223	; 0xdf
   20e48:	cmp	r3, #0
   20e4c:	cmpne	r0, #44	; 0x2c
   20e50:	beq	20e74 <__assert_fail@plt+0xe730>
   20e54:	sub	r0, r0, #9
   20e58:	clz	r0, r0
   20e5c:	lsr	r0, r0, #5
   20e60:	pop	{pc}		; (ldr pc, [sp], #4)
   20e64:	mov	r0, #0
   20e68:	bx	lr
   20e6c:	mov	r0, #1
   20e70:	bx	lr
   20e74:	mov	r0, #1
   20e78:	pop	{pc}		; (ldr pc, [sp], #4)
   20e7c:	mov	r0, r3
   20e80:	pop	{pc}		; (ldr pc, [sp], #4)
   20e84:	add	r1, r0, #8
   20e88:	b	20e90 <__assert_fail@plt+0xe74c>
   20e8c:	mov	r0, r3
   20e90:	mov	r3, r0
   20e94:	ldrb	r2, [r3], #1
   20e98:	sub	r2, r2, #48	; 0x30
   20e9c:	cmp	r2, #9
   20ea0:	bhi	20edc <__assert_fail@plt+0xe798>
   20ea4:	cmp	r3, r1
   20ea8:	bne	20e8c <__assert_fail@plt+0xe748>
   20eac:	ldrb	r3, [r1]
   20eb0:	cmp	r3, #84	; 0x54
   20eb4:	bne	20edc <__assert_fail@plt+0xe798>
   20eb8:	add	r0, r0, #7
   20ebc:	ldrb	r3, [r1, #1]!
   20ec0:	sub	r3, r3, #48	; 0x30
   20ec4:	cmp	r3, #9
   20ec8:	bhi	20edc <__assert_fail@plt+0xe798>
   20ecc:	cmp	r0, r1
   20ed0:	bne	20ebc <__assert_fail@plt+0xe778>
   20ed4:	mov	r0, #0
   20ed8:	bx	lr
   20edc:	mov	r0, #161	; 0xa1
   20ee0:	bx	lr
   20ee4:	push	{r4, lr}
   20ee8:	mov	r0, #0
   20eec:	bl	12138 <time@plt>
   20ef0:	cmn	r0, #1
   20ef4:	beq	20f2c <__assert_fail@plt+0xe7e8>
   20ef8:	ldr	r2, [pc, #52]	; 20f34 <__assert_fail@plt+0xe7f0>
   20efc:	ldr	r3, [r2]
   20f00:	cmp	r3, #0
   20f04:	popeq	{r4, pc}
   20f08:	cmp	r3, #1
   20f0c:	ldr	r2, [r2, #4]
   20f10:	beq	20f24 <__assert_fail@plt+0xe7e0>
   20f14:	cmp	r3, #2
   20f18:	addeq	r0, r0, r2
   20f1c:	subne	r0, r0, r2
   20f20:	pop	{r4, pc}
   20f24:	mov	r0, r2
   20f28:	pop	{r4, pc}
   20f2c:	ldr	r0, [pc, #4]	; 20f38 <__assert_fail@plt+0xe7f4>
   20f30:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   20f34:	andeq	sp, r3, r4, lsr #8
   20f38:	andeq	r9, r2, r8, lsr #28
   20f3c:	b	12018 <gmtime_r@plt>
   20f40:	push	{r4, r5, lr}
   20f44:	sub	sp, sp, #84	; 0x54
   20f48:	ldr	r4, [pc, #140]	; 20fdc <__assert_fail@plt+0xe898>
   20f4c:	mov	r5, r0
   20f50:	ldr	r3, [r4]
   20f54:	str	r3, [sp, #76]	; 0x4c
   20f58:	bl	20ee4 <__assert_fail@plt+0xe7a0>
   20f5c:	add	r1, sp, #32
   20f60:	str	r0, [sp, #28]
   20f64:	add	r0, sp, #28
   20f68:	bl	12018 <gmtime_r@plt>
   20f6c:	subs	r2, r0, #0
   20f70:	strbeq	r2, [r5]
   20f74:	beq	20fc0 <__assert_fail@plt+0xe87c>
   20f78:	ldr	r1, [r2]
   20f7c:	ldr	r3, [r2, #20]
   20f80:	str	r1, [sp, #16]
   20f84:	ldr	r1, [r2, #4]
   20f88:	add	r3, r3, #1888	; 0x760
   20f8c:	str	r1, [sp, #12]
   20f90:	ldr	r1, [r2, #8]
   20f94:	mov	r0, r5
   20f98:	str	r1, [sp, #8]
   20f9c:	ldr	r1, [r2, #12]
   20fa0:	add	r3, r3, #12
   20fa4:	str	r1, [sp, #4]
   20fa8:	ldr	r1, [r2, #16]
   20fac:	ldr	r2, [pc, #44]	; 20fe0 <__assert_fail@plt+0xe89c>
   20fb0:	add	r1, r1, #1
   20fb4:	str	r1, [sp]
   20fb8:	mov	r1, #16
   20fbc:	bl	12564 <gpgrt_snprintf@plt>
   20fc0:	ldr	r2, [sp, #76]	; 0x4c
   20fc4:	ldr	r3, [r4]
   20fc8:	cmp	r2, r3
   20fcc:	bne	20fd8 <__assert_fail@plt+0xe894>
   20fd0:	add	sp, sp, #84	; 0x54
   20fd4:	pop	{r4, r5, pc}
   20fd8:	bl	1218c <__stack_chk_fail@plt>
   20fdc:	andeq	sl, r3, r8, asr fp
   20fe0:	andeq	r9, r2, r8, lsr lr
   20fe4:	push	{r4, r5, r6, lr}
   20fe8:	mov	r4, r0
   20fec:	mov	r0, #0
   20ff0:	mov	r5, r1
   20ff4:	bl	12138 <time@plt>
   20ff8:	ldr	r3, [pc, #72]	; 21048 <__assert_fail@plt+0xe904>
   20ffc:	cmn	r4, #1
   21000:	cmpne	r0, r4
   21004:	bne	21018 <__assert_fail@plt+0xe8d4>
   21008:	mov	r2, #0
   2100c:	str	r2, [r3]
   21010:	str	r2, [r3, #4]
   21014:	pop	{r4, r5, r6, pc}
   21018:	cmp	r5, #0
   2101c:	beq	2102c <__assert_fail@plt+0xe8e8>
   21020:	mov	r2, #1
   21024:	stm	r3, {r2, r4}
   21028:	pop	{r4, r5, r6, pc}
   2102c:	cmp	r0, r4
   21030:	sublt	r4, r4, r0
   21034:	movlt	r2, #2
   21038:	subge	r4, r0, r4
   2103c:	movge	r2, #3
   21040:	stm	r3, {r2, r4}
   21044:	pop	{r4, r5, r6, pc}
   21048:	andeq	sp, r3, r4, lsr #8
   2104c:	ldr	r3, [pc, #4]	; 21058 <__assert_fail@plt+0xe914>
   21050:	ldr	r0, [r3]
   21054:	bx	lr
   21058:	andeq	sp, r3, r4, lsr #8
   2105c:	b	20ee4 <__assert_fail@plt+0xe7a0>
   21060:	push	{r4, r5, r6, r7, r8, lr}
   21064:	sub	sp, sp, #48	; 0x30
   21068:	ldr	r4, [pc, #340]	; 211c4 <__assert_fail@plt+0xea80>
   2106c:	mov	r5, r0
   21070:	ldr	r3, [r4]
   21074:	str	r3, [sp, #44]	; 0x2c
   21078:	bl	123e4 <strlen@plt>
   2107c:	cmp	r0, #10
   21080:	bne	21090 <__assert_fail@plt+0xe94c>
   21084:	ldrb	r3, [r5, #4]
   21088:	cmp	r3, #45	; 0x2d
   2108c:	beq	210ac <__assert_fail@plt+0xe968>
   21090:	mov	r0, #0
   21094:	ldr	r2, [sp, #44]	; 0x2c
   21098:	ldr	r3, [r4]
   2109c:	cmp	r2, r3
   210a0:	bne	211c0 <__assert_fail@plt+0xea7c>
   210a4:	add	sp, sp, #48	; 0x30
   210a8:	pop	{r4, r5, r6, r7, r8, pc}
   210ac:	ldrb	r3, [r5, #7]
   210b0:	cmp	r3, #45	; 0x2d
   210b4:	bne	21090 <__assert_fail@plt+0xe94c>
   210b8:	sub	r2, r5, #1
   210bc:	add	r1, r5, #3
   210c0:	ldrb	r3, [r2, #1]!
   210c4:	sub	r3, r3, #48	; 0x30
   210c8:	cmp	r3, #9
   210cc:	bhi	21090 <__assert_fail@plt+0xe94c>
   210d0:	cmp	r2, r1
   210d4:	bne	210c0 <__assert_fail@plt+0xe97c>
   210d8:	ldrb	r3, [r5, #5]
   210dc:	sub	r3, r3, #48	; 0x30
   210e0:	cmp	r3, #9
   210e4:	bhi	21090 <__assert_fail@plt+0xe94c>
   210e8:	ldrb	r3, [r5, #6]
   210ec:	sub	r3, r3, #48	; 0x30
   210f0:	cmp	r3, #9
   210f4:	bhi	21090 <__assert_fail@plt+0xe94c>
   210f8:	ldrb	r3, [r5, #8]
   210fc:	sub	r3, r3, #48	; 0x30
   21100:	cmp	r3, #9
   21104:	bhi	21090 <__assert_fail@plt+0xe94c>
   21108:	ldrb	r3, [r5, #9]
   2110c:	sub	r3, r3, #48	; 0x30
   21110:	cmp	r3, #9
   21114:	bhi	21090 <__assert_fail@plt+0xe94c>
   21118:	mov	r2, #10
   2111c:	mov	r1, #0
   21120:	mov	r0, r5
   21124:	bl	1206c <strtol@plt>
   21128:	mov	r2, #10
   2112c:	mov	r1, #0
   21130:	mov	r7, r0
   21134:	add	r0, r5, #5
   21138:	bl	1206c <strtol@plt>
   2113c:	mov	r1, #0
   21140:	mov	r2, #10
   21144:	mov	r6, r0
   21148:	add	r0, r5, #8
   2114c:	bl	1206c <strtol@plt>
   21150:	ldr	r1, [pc, #112]	; 211c8 <__assert_fail@plt+0xea84>
   21154:	sub	r6, r6, #1
   21158:	cmp	r7, r1
   2115c:	movgt	r1, #0
   21160:	movle	r1, #1
   21164:	cmp	r6, #11
   21168:	orrhi	r1, r1, #1
   2116c:	cmp	r1, #0
   21170:	mov	r8, r0
   21174:	bne	21090 <__assert_fail@plt+0xe94c>
   21178:	sub	r3, r0, #1
   2117c:	cmp	r3, #30
   21180:	bhi	21090 <__assert_fail@plt+0xe94c>
   21184:	mov	r2, #44	; 0x2c
   21188:	mov	r0, sp
   2118c:	bl	124a4 <memset@plt>
   21190:	sub	r3, r7, #1888	; 0x760
   21194:	sub	r3, r3, #12
   21198:	mvn	r2, #0
   2119c:	mov	r0, sp
   211a0:	str	r3, [sp, #20]
   211a4:	str	r8, [sp, #12]
   211a8:	str	r6, [sp, #16]
   211ac:	str	r2, [sp, #32]
   211b0:	bl	120a8 <mktime@plt>
   211b4:	cmn	r0, #1
   211b8:	bne	21094 <__assert_fail@plt+0xe950>
   211bc:	b	21090 <__assert_fail@plt+0xe94c>
   211c0:	bl	1218c <__stack_chk_fail@plt>
   211c4:	andeq	sl, r3, r8, asr fp
   211c8:			; <UNDEFINED> instruction: 0x000007b1
   211cc:	ldrb	r3, [r0]
   211d0:	cmp	r3, #0
   211d4:	beq	211dc <__assert_fail@plt+0xea98>
   211d8:	b	20bb0 <__assert_fail@plt+0xe46c>
   211dc:	mov	r0, r3
   211e0:	bx	lr
   211e4:	ldrb	r3, [r0]
   211e8:	cmp	r3, #0
   211ec:	beq	211f4 <__assert_fail@plt+0xeab0>
   211f0:	b	20c6c <__assert_fail@plt+0xe528>
   211f4:	mov	r0, r3
   211f8:	bx	lr
   211fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   21200:	subs	r5, r0, #0
   21204:	sub	sp, sp, #28
   21208:	ldr	r7, [pc, #356]	; 21374 <__assert_fail@plt+0xec30>
   2120c:	addeq	r5, sp, #4
   21210:	mov	r8, #0
   21214:	ldr	r3, [r7]
   21218:	strb	r8, [r5]
   2121c:	ldrb	r6, [r1]
   21220:	mov	r4, r1
   21224:	str	r3, [sp, #20]
   21228:	cmp	r6, r8
   2122c:	moveq	r0, r6
   21230:	beq	21258 <__assert_fail@plt+0xeb14>
   21234:	mov	r0, r1
   21238:	bl	20bb0 <__assert_fail@plt+0xe46c>
   2123c:	subs	r9, r0, #0
   21240:	bne	2133c <__assert_fail@plt+0xebf8>
   21244:	mov	r1, r9
   21248:	mov	r0, r4
   2124c:	bl	20c6c <__assert_fail@plt+0xe528>
   21250:	cmp	r0, #0
   21254:	bne	21270 <__assert_fail@plt+0xeb2c>
   21258:	ldr	r2, [sp, #20]
   2125c:	ldr	r3, [r7]
   21260:	cmp	r2, r3
   21264:	bne	21370 <__assert_fail@plt+0xec2c>
   21268:	add	sp, sp, #28
   2126c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21270:	strb	r6, [r5]
   21274:	ldrb	r2, [r4, #1]
   21278:	ldr	r3, [pc, #248]	; 21378 <__assert_fail@plt+0xec34>
   2127c:	strb	r2, [r5, #1]
   21280:	ldrb	r1, [r4, #2]
   21284:	mov	r2, #84	; 0x54
   21288:	strb	r1, [r5, #2]
   2128c:	ldrb	r1, [r4, #3]
   21290:	strb	r1, [r5, #3]
   21294:	ldrb	r1, [r4, #5]
   21298:	strb	r1, [r5, #4]
   2129c:	ldrb	r1, [r4, #6]
   212a0:	strb	r1, [r5, #5]
   212a4:	ldrb	r1, [r4, #8]
   212a8:	strb	r1, [r5, #6]
   212ac:	ldrb	r1, [r4, #9]
   212b0:	strb	r9, [r5, #15]
   212b4:	str	r3, [r5, #9]
   212b8:	strb	r1, [r5, #7]
   212bc:	strh	r3, [r5, #13]
   212c0:	strb	r2, [r5, #8]
   212c4:	ldrb	r3, [r4, #10]
   212c8:	cmp	r3, #32
   212cc:	cmpne	r3, #9
   212d0:	movne	r0, #10
   212d4:	bne	21258 <__assert_fail@plt+0xeb14>
   212d8:	ldrb	r3, [r4, #11]
   212dc:	cmp	r3, #9
   212e0:	cmpne	r3, #32
   212e4:	moveq	r0, #11
   212e8:	beq	21258 <__assert_fail@plt+0xeb14>
   212ec:	strb	r3, [r5, #9]
   212f0:	ldrb	r3, [r4, #12]
   212f4:	strb	r3, [r5, #10]
   212f8:	ldrb	r3, [r4, #13]
   212fc:	cmp	r3, #58	; 0x3a
   21300:	movne	r0, #13
   21304:	bne	21258 <__assert_fail@plt+0xeb14>
   21308:	ldrb	r3, [r4, #14]
   2130c:	strb	r3, [r5, #11]
   21310:	ldrb	r3, [r4, #15]
   21314:	strb	r3, [r5, #12]
   21318:	ldrb	r3, [r4, #16]
   2131c:	cmp	r3, #58	; 0x3a
   21320:	moveq	r0, #19
   21324:	ldrbeq	r3, [r4, #17]
   21328:	movne	r0, #16
   2132c:	strbeq	r3, [r5, #13]
   21330:	ldrbeq	r3, [r4, #18]
   21334:	strbeq	r3, [r5, #14]
   21338:	b	21258 <__assert_fail@plt+0xeb14>
   2133c:	ldr	r2, [r4, #4]
   21340:	ldr	r3, [r4, #8]
   21344:	ldr	r1, [r4]
   21348:	str	r2, [r5, #4]
   2134c:	str	r1, [r5]
   21350:	str	r3, [r5, #8]
   21354:	ldrh	r2, [r4, #12]
   21358:	ldrb	r3, [r4, #14]
   2135c:	mov	r0, #15
   21360:	strh	r2, [r5, #12]
   21364:	strb	r3, [r5, #14]
   21368:	strb	r8, [r5, #15]
   2136c:	b	21258 <__assert_fail@plt+0xeb14>
   21370:	bl	1218c <__stack_chk_fail@plt>
   21374:	andeq	sl, r3, r8, asr fp
   21378:	eorscc	r3, r0, r0, lsr r0
   2137c:	push	{r4, r5, r6, r7, r8, r9, lr}
   21380:	sub	sp, sp, #52	; 0x34
   21384:	ldr	r6, [pc, #376]	; 21504 <__assert_fail@plt+0xedc0>
   21388:	ldrb	r5, [r0]
   2138c:	ldr	r3, [r6]
   21390:	cmp	r5, #0
   21394:	str	r3, [sp, #44]	; 0x2c
   21398:	beq	214f8 <__assert_fail@plt+0xedb4>
   2139c:	mov	r4, r0
   213a0:	bl	20bb0 <__assert_fail@plt+0xe46c>
   213a4:	cmp	r0, #0
   213a8:	beq	214f8 <__assert_fail@plt+0xedb4>
   213ac:	ldrb	r3, [r4, #1]
   213b0:	sub	r5, r5, #48	; 0x30
   213b4:	ldrb	r1, [r4, #2]
   213b8:	add	r5, r5, r5, lsl #2
   213bc:	sub	r3, r3, #48	; 0x30
   213c0:	ldrb	r2, [r4, #4]
   213c4:	add	r3, r3, r5, lsl #1
   213c8:	ldrb	r0, [r4, #3]
   213cc:	sub	r1, r1, #48	; 0x30
   213d0:	add	r3, r3, r3, lsl #2
   213d4:	sub	r2, r2, #48	; 0x30
   213d8:	add	r1, r1, r1, lsl #2
   213dc:	ldrb	r5, [r4, #5]
   213e0:	sub	r0, r0, #48	; 0x30
   213e4:	add	r3, r3, r3, lsl #2
   213e8:	ldr	r8, [pc, #280]	; 21508 <__assert_fail@plt+0xedc4>
   213ec:	add	r1, r0, r1, lsl #1
   213f0:	add	r2, r2, r2, lsl #2
   213f4:	ldrb	r0, [r4, #13]
   213f8:	add	r3, r1, r3, lsl #2
   213fc:	cmp	r3, r8
   21400:	ldrb	r7, [r4, #6]
   21404:	ldrb	lr, [r4, #9]
   21408:	ldrb	ip, [r4, #11]
   2140c:	add	r2, r5, r2, lsl #1
   21410:	sub	r1, r0, #48	; 0x30
   21414:	movgt	r8, #0
   21418:	movle	r8, #1
   2141c:	sub	r5, r2, #49	; 0x31
   21420:	cmp	r5, #11
   21424:	orrhi	r8, r8, #1
   21428:	ldrb	r9, [r4, #7]
   2142c:	add	r0, r1, r1, lsl #2
   21430:	ldrb	r2, [r4, #12]
   21434:	ldrb	r1, [r4, #14]
   21438:	sub	r7, r7, #48	; 0x30
   2143c:	sub	lr, lr, #48	; 0x30
   21440:	sub	ip, ip, #48	; 0x30
   21444:	cmp	r8, #0
   21448:	ldrb	r8, [r4, #10]
   2144c:	add	r7, r7, r7, lsl #2
   21450:	add	lr, lr, lr, lsl #2
   21454:	add	ip, ip, ip, lsl #2
   21458:	sub	r9, r9, #48	; 0x30
   2145c:	sub	r4, r8, #48	; 0x30
   21460:	sub	r2, r2, #48	; 0x30
   21464:	sub	r1, r1, #48	; 0x30
   21468:	add	r7, r9, r7, lsl #1
   2146c:	add	lr, r4, lr, lsl #1
   21470:	add	r2, r2, ip, lsl #1
   21474:	add	r1, r1, r0, lsl #1
   21478:	bne	214f8 <__assert_fail@plt+0xedb4>
   2147c:	sub	r0, r7, #1
   21480:	cmp	r0, #30
   21484:	bhi	214f8 <__assert_fail@plt+0xedb4>
   21488:	cmp	lr, #23
   2148c:	bgt	214f8 <__assert_fail@plt+0xedb4>
   21490:	cmp	r1, #61	; 0x3d
   21494:	cmple	r2, #59	; 0x3b
   21498:	movgt	ip, #1
   2149c:	movle	ip, #0
   214a0:	bgt	214f8 <__assert_fail@plt+0xedb4>
   214a4:	sub	r3, r3, #1888	; 0x760
   214a8:	sub	r3, r3, #12
   214ac:	str	r3, [sp, #20]
   214b0:	mov	r0, sp
   214b4:	mvn	r3, #0
   214b8:	str	ip, [sp, #24]
   214bc:	str	r1, [sp]
   214c0:	stmib	sp, {r2, lr}
   214c4:	str	r7, [sp, #12]
   214c8:	str	r5, [sp, #16]
   214cc:	str	ip, [sp, #28]
   214d0:	str	ip, [sp, #36]	; 0x24
   214d4:	str	ip, [sp, #40]	; 0x28
   214d8:	str	r3, [sp, #32]
   214dc:	bl	125f4 <timegm@plt>
   214e0:	ldr	r2, [sp, #44]	; 0x2c
   214e4:	ldr	r3, [r6]
   214e8:	cmp	r2, r3
   214ec:	bne	21500 <__assert_fail@plt+0xedbc>
   214f0:	add	sp, sp, #52	; 0x34
   214f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   214f8:	mvn	r0, #0
   214fc:	b	214e0 <__assert_fail@plt+0xed9c>
   21500:	bl	1218c <__stack_chk_fail@plt>
   21504:	andeq	sl, r3, r8, asr fp
   21508:			; <UNDEFINED> instruction: 0x000007b1
   2150c:	push	{r4, r5, lr}
   21510:	sub	sp, sp, #84	; 0x54
   21514:	ldr	r4, [pc, #144]	; 215ac <__assert_fail@plt+0xee68>
   21518:	cmn	r1, #1
   2151c:	mov	r5, r0
   21520:	ldr	r3, [r4]
   21524:	str	r1, [sp, #28]
   21528:	str	r3, [sp, #76]	; 0x4c
   2152c:	moveq	r3, #0
   21530:	strbeq	r3, [r0]
   21534:	beq	21590 <__assert_fail@plt+0xee4c>
   21538:	add	r1, sp, #32
   2153c:	add	r0, sp, #28
   21540:	bl	12018 <gmtime_r@plt>
   21544:	mov	r1, r0
   21548:	mov	r0, r5
   2154c:	ldr	r2, [r1]
   21550:	ldr	r3, [r1, #20]
   21554:	str	r2, [sp, #16]
   21558:	ldr	r2, [r1, #4]
   2155c:	add	r3, r3, #1888	; 0x760
   21560:	str	r2, [sp, #12]
   21564:	ldr	r2, [r1, #8]
   21568:	add	r3, r3, #12
   2156c:	str	r2, [sp, #8]
   21570:	ldr	ip, [r1, #12]
   21574:	ldr	r2, [pc, #52]	; 215b0 <__assert_fail@plt+0xee6c>
   21578:	str	ip, [sp, #4]
   2157c:	ldr	ip, [r1, #16]
   21580:	mov	r1, #16
   21584:	add	ip, ip, #1
   21588:	str	ip, [sp]
   2158c:	bl	12564 <gpgrt_snprintf@plt>
   21590:	ldr	r2, [sp, #76]	; 0x4c
   21594:	ldr	r3, [r4]
   21598:	cmp	r2, r3
   2159c:	bne	215a8 <__assert_fail@plt+0xee64>
   215a0:	add	sp, sp, #84	; 0x54
   215a4:	pop	{r4, r5, pc}
   215a8:	bl	1218c <__stack_chk_fail@plt>
   215ac:	andeq	sl, r3, r8, asr fp
   215b0:	andeq	r9, r2, r8, lsr lr
   215b4:	push	{r4, r5, r6, lr}
   215b8:	ldrb	r6, [r0]
   215bc:	cmp	r6, #0
   215c0:	beq	216ac <__assert_fail@plt+0xef68>
   215c4:	mov	r4, r1
   215c8:	mov	r1, #1
   215cc:	mov	r5, r0
   215d0:	bl	20c6c <__assert_fail@plt+0xe528>
   215d4:	cmp	r0, #0
   215d8:	beq	216ac <__assert_fail@plt+0xef68>
   215dc:	sub	r6, r6, #48	; 0x30
   215e0:	ldrb	r3, [r5, #1]
   215e4:	add	r6, r6, r6, lsl #2
   215e8:	ldrb	r1, [r5, #2]
   215ec:	sub	r3, r3, #48	; 0x30
   215f0:	ldrb	r2, [r5, #5]
   215f4:	add	r3, r3, r6, lsl #1
   215f8:	sub	r1, r1, #48	; 0x30
   215fc:	ldrb	lr, [r5, #3]
   21600:	add	r3, r3, r3, lsl #2
   21604:	sub	r2, r2, #48	; 0x30
   21608:	add	r0, r1, r1, lsl #2
   2160c:	add	r3, r3, r3, lsl #2
   21610:	sub	lr, lr, #48	; 0x30
   21614:	ldrb	ip, [r5, #6]
   21618:	add	r1, r2, r2, lsl #2
   2161c:	add	r0, lr, r0, lsl #1
   21620:	ldrb	r2, [r5, #8]
   21624:	add	r3, r0, r3, lsl #2
   21628:	ldr	r0, [pc, #132]	; 216b4 <__assert_fail@plt+0xef70>
   2162c:	add	r1, ip, r1, lsl #1
   21630:	cmp	r3, r0
   21634:	sub	r2, r2, #48	; 0x30
   21638:	ldrb	ip, [r5, #9]
   2163c:	movgt	r0, #0
   21640:	movle	r0, #1
   21644:	sub	r1, r1, #49	; 0x31
   21648:	cmp	r1, #11
   2164c:	orrhi	r0, r0, #1
   21650:	add	r2, r2, r2, lsl #2
   21654:	sub	ip, ip, #48	; 0x30
   21658:	cmp	r0, #0
   2165c:	add	r2, ip, r2, lsl #1
   21660:	bne	216ac <__assert_fail@plt+0xef68>
   21664:	sub	ip, r2, #1
   21668:	cmp	ip, #30
   2166c:	bhi	216ac <__assert_fail@plt+0xef68>
   21670:	sub	r3, r3, #1888	; 0x760
   21674:	sub	r3, r3, #12
   21678:	mvn	lr, #0
   2167c:	str	r0, [r4, #24]
   21680:	str	r0, [r4, #28]
   21684:	str	r0, [r4, #36]	; 0x24
   21688:	str	r0, [r4, #40]	; 0x28
   2168c:	str	r3, [r4, #20]
   21690:	str	r0, [r4]
   21694:	str	r0, [r4, #4]
   21698:	str	r0, [r4, #8]
   2169c:	str	r2, [r4, #12]
   216a0:	str	r1, [r4, #16]
   216a4:	str	lr, [r4, #32]
   216a8:	pop	{r4, r5, r6, pc}
   216ac:	mvn	r0, #0
   216b0:	pop	{r4, r5, r6, pc}
   216b4:			; <UNDEFINED> instruction: 0x000007b1
   216b8:	push	{r4, r5, r6, r7, lr}
   216bc:	sub	sp, sp, #52	; 0x34
   216c0:	ldr	r6, [pc, #404]	; 2185c <__assert_fail@plt+0xf118>
   216c4:	ldrb	r4, [r0]
   216c8:	mov	r5, r0
   216cc:	ldr	r3, [r6]
   216d0:	cmp	r4, #32
   216d4:	mov	r7, r1
   216d8:	str	r3, [sp, #44]	; 0x2c
   216dc:	bne	216ec <__assert_fail@plt+0xefa8>
   216e0:	ldrb	r4, [r5, #1]!
   216e4:	cmp	r4, #32
   216e8:	beq	216e0 <__assert_fail@plt+0xef9c>
   216ec:	cmp	r4, #0
   216f0:	moveq	r0, r4
   216f4:	beq	2182c <__assert_fail@plt+0xf0e8>
   216f8:	mov	r0, r5
   216fc:	bl	123e4 <strlen@plt>
   21700:	cmp	r0, #14
   21704:	bls	21844 <__assert_fail@plt+0xf100>
   21708:	ldrb	r3, [r5, #8]
   2170c:	cmp	r3, #84	; 0x54
   21710:	bne	21844 <__assert_fail@plt+0xf100>
   21714:	sub	r4, r4, #48	; 0x30
   21718:	ldrb	r3, [r5, #1]
   2171c:	ldrb	r2, [r5, #2]
   21720:	add	r4, r4, r4, lsl #2
   21724:	sub	r3, r3, #48	; 0x30
   21728:	add	r4, r3, r4, lsl #1
   2172c:	sub	r3, r2, #48	; 0x30
   21730:	ldrb	r2, [r5, #3]
   21734:	add	r4, r4, r4, lsl #2
   21738:	add	r3, r3, r3, lsl #2
   2173c:	sub	r2, r2, #48	; 0x30
   21740:	add	r4, r4, r4, lsl #2
   21744:	add	r3, r2, r3, lsl #1
   21748:	ldr	r2, [pc, #272]	; 21860 <__assert_fail@plt+0xf11c>
   2174c:	add	r4, r3, r4, lsl #2
   21750:	cmp	r4, r2
   21754:	mvnle	r0, #0
   21758:	ble	2182c <__assert_fail@plt+0xf0e8>
   2175c:	cmp	r7, #0
   21760:	addne	r3, r5, #15
   21764:	strne	r3, [r7]
   21768:	ldr	r3, [pc, #244]	; 21864 <__assert_fail@plt+0xf120>
   2176c:	cmp	r4, r3
   21770:	ldrgt	r0, [pc, #240]	; 21868 <__assert_fail@plt+0xf124>
   21774:	bgt	2182c <__assert_fail@plt+0xf0e8>
   21778:	ldrb	ip, [r5, #4]
   2177c:	ldrb	lr, [r5, #5]
   21780:	ldrb	r0, [r5, #6]
   21784:	sub	ip, ip, #48	; 0x30
   21788:	ldrb	r1, [r5, #9]
   2178c:	add	ip, ip, ip, lsl #2
   21790:	sub	r4, r4, #1888	; 0x760
   21794:	sub	r4, r4, #12
   21798:	sub	r0, r0, #48	; 0x30
   2179c:	sub	r1, r1, #48	; 0x30
   217a0:	str	r4, [sp, #20]
   217a4:	add	r4, lr, ip, lsl #1
   217a8:	ldrb	lr, [r5, #7]
   217ac:	ldrb	ip, [r5, #10]
   217b0:	ldrb	r2, [r5, #11]
   217b4:	ldrb	r3, [r5, #13]
   217b8:	add	r0, r0, r0, lsl #2
   217bc:	add	r1, r1, r1, lsl #2
   217c0:	sub	ip, ip, #48	; 0x30
   217c4:	sub	lr, lr, #48	; 0x30
   217c8:	add	lr, lr, r0, lsl #1
   217cc:	sub	r2, r2, #48	; 0x30
   217d0:	add	r0, ip, r1, lsl #1
   217d4:	sub	r3, r3, #48	; 0x30
   217d8:	ldrb	ip, [r5, #12]
   217dc:	ldrb	r1, [r5, #14]
   217e0:	add	r2, r2, r2, lsl #2
   217e4:	add	r3, r3, r3, lsl #2
   217e8:	sub	ip, ip, #48	; 0x30
   217ec:	sub	r1, r1, #48	; 0x30
   217f0:	add	ip, ip, r2, lsl #1
   217f4:	add	r2, r1, r3, lsl #1
   217f8:	sub	r4, r4, #49	; 0x31
   217fc:	mov	r3, #0
   21800:	str	r0, [sp, #8]
   21804:	mov	r0, sp
   21808:	str	r4, [sp, #16]
   2180c:	str	lr, [sp, #12]
   21810:	stm	sp, {r2, ip}
   21814:	str	r3, [sp, #28]
   21818:	str	r3, [sp, #24]
   2181c:	str	r3, [sp, #32]
   21820:	str	r3, [sp, #36]	; 0x24
   21824:	str	r3, [sp, #40]	; 0x28
   21828:	bl	125f4 <timegm@plt>
   2182c:	ldr	r2, [sp, #44]	; 0x2c
   21830:	ldr	r3, [r6]
   21834:	cmp	r2, r3
   21838:	bne	21858 <__assert_fail@plt+0xf114>
   2183c:	add	sp, sp, #52	; 0x34
   21840:	pop	{r4, r5, r6, r7, pc}
   21844:	mov	r1, r7
   21848:	mov	r0, r5
   2184c:	mov	r2, #10
   21850:	bl	123d8 <strtoul@plt>
   21854:	b	2182c <__assert_fail@plt+0xf0e8>
   21858:	bl	1218c <__stack_chk_fail@plt>
   2185c:	andeq	sl, r3, r8, asr fp
   21860:	andeq	r0, r0, fp, ror #14
   21864:	strdeq	r0, [r0], -r5
   21868:	svcvc	0x00e80eeb
   2186c:	add	r1, r1, r1, lsl #1
   21870:	rsb	r1, r1, r1, lsl #4
   21874:	rsb	r1, r1, r1, lsl #4
   21878:	add	r0, r0, r1, lsl #7
   2187c:	bx	lr
   21880:	ldr	r2, [pc, #216]	; 21960 <__assert_fail@plt+0xf21c>
   21884:	push	{r4, r5, r6, r7, lr}
   21888:	mov	r5, r0
   2188c:	umull	r2, r0, r2, r0
   21890:	ldr	r3, [pc, #204]	; 21964 <__assert_fail@plt+0xf220>
   21894:	ldr	r2, [pc, #204]	; 21968 <__assert_fail@plt+0xf224>
   21898:	ldr	r4, [pc, #204]	; 2196c <__assert_fail@plt+0xf228>
   2189c:	lsr	r0, r0, #16
   218a0:	umull	r1, ip, r3, r5
   218a4:	umull	r1, r2, r2, r5
   218a8:	umull	r1, r4, r4, r0
   218ac:	ldr	r1, [pc, #188]	; 21970 <__assert_fail@plt+0xf22c>
   218b0:	sub	lr, r0, r4
   218b4:	lsr	ip, ip, #5
   218b8:	lsr	r2, r2, #11
   218bc:	add	r4, r4, lr, lsr #1
   218c0:	umull	lr, r3, r3, ip
   218c4:	umull	lr, r1, r1, r2
   218c8:	ldr	r6, [pc, #164]	; 21974 <__assert_fail@plt+0xf230>
   218cc:	lsr	r4, r4, #8
   218d0:	lsr	r3, r3, #5
   218d4:	add	lr, r4, r4, lsl #3
   218d8:	umull	r7, r6, r6, r5
   218dc:	lsr	r1, r1, #4
   218e0:	add	r4, r4, lr, lsl #3
   218e4:	rsb	r3, r3, r3, lsl #4
   218e8:	add	r1, r1, r1, lsl #1
   218ec:	sub	sp, sp, #20
   218f0:	add	r4, r4, r4, lsl #2
   218f4:	sub	r3, ip, r3, lsl #2
   218f8:	sub	r1, r2, r1, lsl #3
   218fc:	sub	r4, r0, r4
   21900:	lsr	r6, r6, #23
   21904:	str	r3, [sp, #12]
   21908:	str	r1, [sp, #8]
   2190c:	ldr	r3, [pc, #100]	; 21978 <__assert_fail@plt+0xf234>
   21910:	str	r4, [sp, #4]
   21914:	str	r6, [sp]
   21918:	mov	r2, #30
   2191c:	mov	r1, #1
   21920:	ldr	r0, [pc, #84]	; 2197c <__assert_fail@plt+0xf238>
   21924:	bl	12474 <__sprintf_chk@plt>
   21928:	ldr	r3, [pc, #80]	; 21980 <__assert_fail@plt+0xf23c>
   2192c:	cmp	r5, r3
   21930:	bhi	21954 <__assert_fail@plt+0xf210>
   21934:	cmp	r4, #0
   21938:	movne	r1, #121	; 0x79
   2193c:	moveq	r1, #100	; 0x64
   21940:	ldr	r0, [pc, #52]	; 2197c <__assert_fail@plt+0xf238>
   21944:	bl	12408 <strchr@plt>
   21948:	add	r0, r0, #1
   2194c:	add	sp, sp, #20
   21950:	pop	{r4, r5, r6, r7, pc}
   21954:	ldr	r0, [pc, #32]	; 2197c <__assert_fail@plt+0xf238>
   21958:	add	sp, sp, #20
   2195c:	pop	{r4, r5, r6, r7, pc}
   21960:	eorgt	r4, lr, #29360128	; 0x1c00000
   21964:	stmhi	r8, {r0, r3, r7, fp, pc}
   21968:			; <UNDEFINED> instruction: 0x91a2b3c5
   2196c:	ldrvs	pc, [r9, -r1, ror #6]
   21970:	bge	feacc424 <stdout@@GLIBC_2.4+0xfea8f110>
   21974:	ldrmi	sl, [r8], #-1147	; 0xfffffb85
   21978:	andeq	r9, r2, r4, asr lr
   2197c:	andeq	sp, r3, ip, lsr #8
   21980:	mvneq	r3, pc, ror r3
   21984:	subs	r3, r1, #0
   21988:	push	{r4, r5, lr}
   2198c:	mov	r4, r0
   21990:	sub	sp, sp, #12
   21994:	beq	21a5c <__assert_fail@plt+0xf318>
   21998:	mov	r1, r4
   2199c:	mov	r0, r3
   219a0:	bl	12510 <difftime@plt>
   219a4:	vcmpe.f64	d0, #0.0
   219a8:	vmrs	APSR_nzcv, fpscr
   219ac:	bmi	21ab8 <__assert_fail@plt+0xf374>
   219b0:	vldr	d6, [pc, #272]	; 21ac8 <__assert_fail@plt+0xf384>
   219b4:	ldr	ip, [pc, #276]	; 21ad0 <__assert_fail@plt+0xf38c>
   219b8:	ldr	r5, [pc, #276]	; 21ad4 <__assert_fail@plt+0xf390>
   219bc:	ldr	r0, [pc, #276]	; 21ad8 <__assert_fail@plt+0xf394>
   219c0:	vdiv.f64	d7, d0, d6
   219c4:	vcvt.u32.f64	s13, d0
   219c8:	ldr	lr, [pc, #268]	; 21adc <__assert_fail@plt+0xf398>
   219cc:	vmov	r4, s13
   219d0:	umull	r3, r2, ip, r4
   219d4:	lsr	r2, r2, #5
   219d8:	rsb	r2, r2, r2, lsl #4
   219dc:	sub	r2, r4, r2, lsl #2
   219e0:	vcvt.u32.f64	s15, d7
   219e4:	vmov	r3, s15
   219e8:	lsr	r4, r3, #5
   219ec:	umull	r1, ip, ip, r3
   219f0:	umull	r1, r4, r5, r4
   219f4:	lsr	ip, ip, #5
   219f8:	umull	r1, r0, r0, r4
   219fc:	sub	r1, r4, r0
   21a00:	mov	r5, ip
   21a04:	add	r0, r0, r1, lsr #1
   21a08:	umull	r1, lr, lr, ip
   21a0c:	lsr	r0, r0, #8
   21a10:	lsr	lr, lr, #4
   21a14:	add	r1, r0, r0, lsl #3
   21a18:	rsb	ip, ip, ip, lsl #4
   21a1c:	add	r0, r0, r1, lsl #3
   21a20:	add	lr, lr, lr, lsl #1
   21a24:	add	r0, r0, r0, lsl #2
   21a28:	subs	r0, r4, r0
   21a2c:	sub	ip, r3, ip, lsl #2
   21a30:	sub	lr, r5, lr, lsl #3
   21a34:	bne	21a68 <__assert_fail@plt+0xf324>
   21a38:	cmp	lr, #0
   21a3c:	bne	21a9c <__assert_fail@plt+0xf358>
   21a40:	cmp	ip, #0
   21a44:	beq	21a88 <__assert_fail@plt+0xf344>
   21a48:	mov	r1, ip
   21a4c:	ldr	r0, [pc, #140]	; 21ae0 <__assert_fail@plt+0xf39c>
   21a50:	add	sp, sp, #12
   21a54:	pop	{r4, r5, lr}
   21a58:	b	22748 <__assert_fail@plt+0x10004>
   21a5c:	bl	20ee4 <__assert_fail@plt+0xe7a0>
   21a60:	mov	r3, r0
   21a64:	b	21998 <__assert_fail@plt+0xf254>
   21a68:	str	r2, [sp]
   21a6c:	mov	r1, r0
   21a70:	mov	r3, ip
   21a74:	mov	r2, lr
   21a78:	ldr	r0, [pc, #100]	; 21ae4 <__assert_fail@plt+0xf3a0>
   21a7c:	bl	22748 <__assert_fail@plt+0x10004>
   21a80:	add	sp, sp, #12
   21a84:	pop	{r4, r5, pc}
   21a88:	mov	r1, r2
   21a8c:	ldr	r0, [pc, #84]	; 21ae8 <__assert_fail@plt+0xf3a4>
   21a90:	add	sp, sp, #12
   21a94:	pop	{r4, r5, lr}
   21a98:	b	22748 <__assert_fail@plt+0x10004>
   21a9c:	mov	r3, r2
   21aa0:	mov	r1, lr
   21aa4:	mov	r2, ip
   21aa8:	ldr	r0, [pc, #60]	; 21aec <__assert_fail@plt+0xf3a8>
   21aac:	add	sp, sp, #12
   21ab0:	pop	{r4, r5, lr}
   21ab4:	b	22748 <__assert_fail@plt+0x10004>
   21ab8:	ldr	r0, [pc, #48]	; 21af0 <__assert_fail@plt+0xf3ac>
   21abc:	add	sp, sp, #12
   21ac0:	pop	{r4, r5, lr}
   21ac4:	b	12714 <gcry_strdup@plt>
   21ac8:	andeq	r0, r0, r0
   21acc:	submi	r0, lr, r0
   21ad0:	stmhi	r8, {r0, r3, r7, fp, pc}
   21ad4:	ldreq	r5, [r0, #2822]!	; 0xb06
   21ad8:	ldrvs	pc, [r9, -r1, ror #6]
   21adc:	bge	feacc590 <stdout@@GLIBC_2.4+0xfea8f27c>
   21ae0:	andeq	r9, r2, ip, lsl #29
   21ae4:	andeq	r9, r2, r0, ror lr
   21ae8:	muleq	r2, r4, lr
   21aec:	andeq	r9, r2, r0, lsl #29
   21af0:	andeq	r9, r2, r4, ror #28
   21af4:	push	{r4, lr}
   21af8:	sub	sp, sp, #16
   21afc:	ldr	r4, [pc, #136]	; 21b8c <__assert_fail@plt+0xf448>
   21b00:	cmp	r0, #0
   21b04:	str	r0, [sp, #8]
   21b08:	ldr	r3, [r4]
   21b0c:	str	r3, [sp, #12]
   21b10:	blt	21b68 <__assert_fail@plt+0xf424>
   21b14:	add	r0, sp, #8
   21b18:	bl	124d4 <gmtime@plt>
   21b1c:	ldr	r2, [pc, #108]	; 21b90 <__assert_fail@plt+0xf44c>
   21b20:	ldr	r1, [r0, #12]
   21b24:	ldr	r3, [r0, #20]
   21b28:	str	r1, [sp, #4]
   21b2c:	ldr	r1, [r0, #16]
   21b30:	add	r3, r3, #1888	; 0x760
   21b34:	add	r1, r1, #1
   21b38:	str	r1, [sp]
   21b3c:	add	r3, r3, #12
   21b40:	mov	r1, #16
   21b44:	ldr	r0, [pc, #72]	; 21b94 <__assert_fail@plt+0xf450>
   21b48:	bl	12564 <gpgrt_snprintf@plt>
   21b4c:	ldr	r2, [sp, #12]
   21b50:	ldr	r3, [r4]
   21b54:	ldr	r0, [pc, #56]	; 21b94 <__assert_fail@plt+0xf450>
   21b58:	cmp	r2, r3
   21b5c:	bne	21b88 <__assert_fail@plt+0xf444>
   21b60:	add	sp, sp, #16
   21b64:	pop	{r4, pc}
   21b68:	ldr	r2, [pc, #40]	; 21b98 <__assert_fail@plt+0xf454>
   21b6c:	ldr	r3, [pc, #32]	; 21b94 <__assert_fail@plt+0xf450>
   21b70:	ldm	r2, {r0, r1, r2}
   21b74:	lsr	ip, r2, #16
   21b78:	stmia	r3!, {r0, r1}
   21b7c:	strh	r2, [r3], #2
   21b80:	strb	ip, [r3]
   21b84:	b	21b4c <__assert_fail@plt+0xf408>
   21b88:	bl	1218c <__stack_chk_fail@plt>
   21b8c:	andeq	sl, r3, r8, asr fp
   21b90:	andeq	r9, r2, r4, lsr #29
   21b94:	andeq	sp, r3, ip, asr #8
   21b98:	muleq	r2, r8, lr
   21b9c:	push	{r4, lr}
   21ba0:	sub	sp, sp, #32
   21ba4:	ldr	r4, [pc, #156]	; 21c48 <__assert_fail@plt+0xf504>
   21ba8:	cmp	r0, #0
   21bac:	str	r0, [sp, #24]
   21bb0:	ldr	r3, [r4]
   21bb4:	str	r3, [sp, #28]
   21bb8:	blt	21c28 <__assert_fail@plt+0xf4e4>
   21bbc:	add	r0, sp, #24
   21bc0:	bl	124d4 <gmtime@plt>
   21bc4:	ldr	r2, [pc, #128]	; 21c4c <__assert_fail@plt+0xf508>
   21bc8:	ldr	r1, [r0]
   21bcc:	ldr	r3, [r0, #20]
   21bd0:	str	r1, [sp, #16]
   21bd4:	ldr	r1, [r0, #4]
   21bd8:	add	r3, r3, #1888	; 0x760
   21bdc:	str	r1, [sp, #12]
   21be0:	ldr	r1, [r0, #8]
   21be4:	add	r3, r3, #12
   21be8:	str	r1, [sp, #8]
   21bec:	ldr	ip, [r0, #12]
   21bf0:	mov	r1, #30
   21bf4:	str	ip, [sp, #4]
   21bf8:	ldr	ip, [r0, #16]
   21bfc:	ldr	r0, [pc, #76]	; 21c50 <__assert_fail@plt+0xf50c>
   21c00:	add	ip, ip, #1
   21c04:	str	ip, [sp]
   21c08:	bl	12564 <gpgrt_snprintf@plt>
   21c0c:	ldr	r2, [sp, #28]
   21c10:	ldr	r3, [r4]
   21c14:	ldr	r0, [pc, #52]	; 21c50 <__assert_fail@plt+0xf50c>
   21c18:	cmp	r2, r3
   21c1c:	bne	21c44 <__assert_fail@plt+0xf500>
   21c20:	add	sp, sp, #32
   21c24:	pop	{r4, pc}
   21c28:	ldr	lr, [pc, #36]	; 21c54 <__assert_fail@plt+0xf510>
   21c2c:	ldr	ip, [pc, #28]	; 21c50 <__assert_fail@plt+0xf50c>
   21c30:	ldm	lr!, {r0, r1, r2, r3}
   21c34:	ldr	lr, [lr]
   21c38:	stmia	ip!, {r0, r1, r2, r3}
   21c3c:	str	lr, [ip]
   21c40:	b	21c0c <__assert_fail@plt+0xf4c8>
   21c44:	bl	1218c <__stack_chk_fail@plt>
   21c48:	andeq	sl, r3, r8, asr fp
   21c4c:	andeq	r9, r2, r8, asr #29
   21c50:	andeq	sp, r3, ip, asr r4
   21c54:			; <UNDEFINED> instruction: 0x00029eb4
   21c58:	push	{r4, r5, r6, lr}
   21c5c:	sub	sp, sp, #8
   21c60:	ldr	r4, [pc, #188]	; 21d24 <__assert_fail@plt+0xf5e0>
   21c64:	cmp	r0, #0
   21c68:	str	r0, [sp]
   21c6c:	ldr	r3, [r4]
   21c70:	str	r3, [sp, #4]
   21c74:	blt	21cec <__assert_fail@plt+0xf5a8>
   21c78:	mov	r0, sp
   21c7c:	bl	12348 <localtime@plt>
   21c80:	mov	r6, r0
   21c84:	ldr	r0, [pc, #156]	; 21d28 <__assert_fail@plt+0xf5e4>
   21c88:	bl	125d0 <nl_langinfo@plt>
   21c8c:	mov	r2, #47	; 0x2f
   21c90:	mov	r1, r0
   21c94:	ldr	r0, [pc, #144]	; 21d2c <__assert_fail@plt+0xf5e8>
   21c98:	bl	1a28c <__assert_fail@plt+0x7b48>
   21c9c:	ldr	r1, [pc, #140]	; 21d30 <__assert_fail@plt+0xf5ec>
   21ca0:	ldr	r0, [pc, #132]	; 21d2c <__assert_fail@plt+0xf5e8>
   21ca4:	bl	11fe8 <strstr@plt>
   21ca8:	cmp	r0, #0
   21cac:	beq	21d0c <__assert_fail@plt+0xf5c8>
   21cb0:	ldr	r5, [pc, #124]	; 21d34 <__assert_fail@plt+0xf5f0>
   21cb4:	mov	r3, r6
   21cb8:	add	r2, r5, #140	; 0x8c
   21cbc:	add	r0, r5, #88	; 0x58
   21cc0:	mov	r1, #49	; 0x31
   21cc4:	bl	1233c <strftime@plt>
   21cc8:	mov	r3, #0
   21ccc:	strb	r3, [r5, #137]	; 0x89
   21cd0:	ldr	r2, [sp, #4]
   21cd4:	ldr	r3, [r4]
   21cd8:	ldr	r0, [pc, #88]	; 21d38 <__assert_fail@plt+0xf5f4>
   21cdc:	cmp	r2, r3
   21ce0:	bne	21d20 <__assert_fail@plt+0xf5dc>
   21ce4:	add	sp, sp, #8
   21ce8:	pop	{r4, r5, r6, pc}
   21cec:	ldr	r2, [pc, #72]	; 21d3c <__assert_fail@plt+0xf5f8>
   21cf0:	ldr	r3, [pc, #64]	; 21d38 <__assert_fail@plt+0xf5f4>
   21cf4:	ldm	r2, {r0, r1, r2}
   21cf8:	lsr	ip, r2, #16
   21cfc:	stmia	r3!, {r0, r1}
   21d00:	strh	r2, [r3], #2
   21d04:	strb	ip, [r3]
   21d08:	b	21cd0 <__assert_fail@plt+0xf58c>
   21d0c:	mov	r2, #50	; 0x32
   21d10:	ldr	r1, [pc, #40]	; 21d40 <__assert_fail@plt+0xf5fc>
   21d14:	ldr	r0, [pc, #16]	; 21d2c <__assert_fail@plt+0xf5e8>
   21d18:	bl	12468 <__strcat_chk@plt>
   21d1c:	b	21cb0 <__assert_fail@plt+0xf56c>
   21d20:	bl	1218c <__stack_chk_fail@plt>
   21d24:	andeq	sl, r3, r8, asr fp
   21d28:	andeq	r0, r2, r8, lsr #32
   21d2c:			; <UNDEFINED> instruction: 0x0003d4b0
   21d30:	andeq	r9, r2, r8, ror #29
   21d34:	andeq	sp, r3, r4, lsr #8
   21d38:	andeq	sp, r3, ip, ror r4
   21d3c:	muleq	r2, r8, lr
   21d40:	andeq	r9, r2, ip, ror #29
   21d44:	push	{r4, r5, r6, r7, lr}
   21d48:	sub	sp, sp, #76	; 0x4c
   21d4c:	ldr	r4, [pc, #216]	; 21e2c <__assert_fail@plt+0xf6e8>
   21d50:	cmp	r0, #0
   21d54:	str	r0, [sp, #20]
   21d58:	ldr	r3, [r4]
   21d5c:	str	r3, [sp, #68]	; 0x44
   21d60:	blt	21e18 <__assert_fail@plt+0xf6d4>
   21d64:	add	r1, sp, #24
   21d68:	add	r0, sp, #20
   21d6c:	bl	12018 <gmtime_r@plt>
   21d70:	cmp	r0, #0
   21d74:	beq	21e00 <__assert_fail@plt+0xf6bc>
   21d78:	ldr	r1, [r0, #24]
   21d7c:	ldr	lr, [pc, #172]	; 21e30 <__assert_fail@plt+0xf6ec>
   21d80:	ldr	r3, [r0, #16]
   21d84:	ldr	ip, [pc, #168]	; 21e34 <__assert_fail@plt+0xf6f0>
   21d88:	ldr	r7, [r0]
   21d8c:	smull	r2, lr, lr, r1
   21d90:	smull	r2, r6, ip, r3
   21d94:	ldr	r2, [r0, #12]
   21d98:	str	r7, [sp, #12]
   21d9c:	ldr	ip, [r0, #4]
   21da0:	add	r5, lr, r1
   21da4:	str	ip, [sp, #8]
   21da8:	ldr	lr, [r0, #8]
   21dac:	asr	ip, r3, #31
   21db0:	str	lr, [sp, #4]
   21db4:	rsb	ip, ip, r6, asr #1
   21db8:	asr	lr, r1, #31
   21dbc:	rsb	lr, lr, r5, asr #2
   21dc0:	add	ip, ip, ip, lsl #1
   21dc4:	ldr	r0, [r0, #20]
   21dc8:	rsb	lr, lr, lr, lsl #3
   21dcc:	sub	r1, r1, lr
   21dd0:	sub	r3, r3, ip, lsl #2
   21dd4:	add	r0, r0, #1888	; 0x760
   21dd8:	ldr	lr, [pc, #88]	; 21e38 <__assert_fail@plt+0xf6f4>
   21ddc:	ldr	ip, [pc, #88]	; 21e3c <__assert_fail@plt+0xf6f8>
   21de0:	add	r0, r0, #12
   21de4:	add	r1, r1, r1, lsl #1
   21de8:	add	r3, r3, r3, lsl #1
   21dec:	str	r0, [sp]
   21df0:	add	r1, lr, r1
   21df4:	add	r3, ip, r3
   21df8:	ldr	r0, [pc, #64]	; 21e40 <__assert_fail@plt+0xf6fc>
   21dfc:	bl	22748 <__assert_fail@plt+0x10004>
   21e00:	ldr	r2, [sp, #68]	; 0x44
   21e04:	ldr	r3, [r4]
   21e08:	cmp	r2, r3
   21e0c:	bne	21e28 <__assert_fail@plt+0xf6e4>
   21e10:	add	sp, sp, #76	; 0x4c
   21e14:	pop	{r4, r5, r6, r7, pc}
   21e18:	mov	r0, #22
   21e1c:	bl	125dc <gpg_err_set_errno@plt>
   21e20:	mov	r0, #0
   21e24:	b	21e00 <__assert_fail@plt+0xf6bc>
   21e28:	bl	1218c <__stack_chk_fail@plt>
   21e2c:	andeq	sl, r3, r8, asr fp
   21e30:	subls	r2, r9, #-1828716544	; 0x93000000
   21e34:	bcs	feacc8e8 <stdout@@GLIBC_2.4+0xfea8f5d4>
   21e38:	andeq	r9, r2, r8, lsl pc
   21e3c:	strdeq	r9, [r2], -r0
   21e40:	andeq	r9, r2, r0, lsr pc
   21e44:	ldrb	r3, [r0]
   21e48:	cmp	r3, #0
   21e4c:	beq	21e54 <__assert_fail@plt+0xf710>
   21e50:	b	20e84 <__assert_fail@plt+0xe740>
   21e54:	mov	r0, #26
   21e58:	bx	lr
   21e5c:	subs	r1, r0, #0
   21e60:	push	{lr}		; (str lr, [sp, #-4]!)
   21e64:	sub	sp, sp, #20
   21e68:	beq	21e78 <__assert_fail@plt+0xf734>
   21e6c:	ldrb	r3, [r1]
   21e70:	cmp	r3, #0
   21e74:	bne	21e9c <__assert_fail@plt+0xf758>
   21e78:	mov	r2, #5
   21e7c:	ldr	r1, [pc, #72]	; 21ecc <__assert_fail@plt+0xf788>
   21e80:	mov	r0, #0
   21e84:	bl	12180 <dcgettext@plt>
   21e88:	mov	r1, r0
   21e8c:	ldr	r0, [pc, #60]	; 21ed0 <__assert_fail@plt+0xf78c>
   21e90:	add	sp, sp, #20
   21e94:	pop	{lr}		; (ldr lr, [sp], #4)
   21e98:	b	1eb70 <__assert_fail@plt+0xc42c>
   21e9c:	add	r0, r1, #13
   21ea0:	add	r2, r1, #11
   21ea4:	add	r3, r1, #9
   21ea8:	str	r0, [sp, #8]
   21eac:	str	r2, [sp, #4]
   21eb0:	str	r3, [sp]
   21eb4:	add	r2, r1, #4
   21eb8:	add	r3, r1, #6
   21ebc:	ldr	r0, [pc, #16]	; 21ed4 <__assert_fail@plt+0xf790>
   21ec0:	bl	1eb70 <__assert_fail@plt+0xc42c>
   21ec4:	add	sp, sp, #20
   21ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   21ecc:	andeq	r9, r2, ip, asr pc
   21ed0:	andeq	r6, r2, r8, lsl #20
   21ed4:	andeq	r9, r2, r4, ror #30
   21ed8:	ldrb	r3, [r1]
   21edc:	cmp	r3, #0
   21ee0:	beq	21f40 <__assert_fail@plt+0xf7fc>
   21ee4:	push	{r4, r5, r6, lr}
   21ee8:	mov	r5, r0
   21eec:	mov	r0, r1
   21ef0:	mov	r4, r1
   21ef4:	bl	123e4 <strlen@plt>
   21ef8:	cmp	r0, #15
   21efc:	bne	21f48 <__assert_fail@plt+0xf804>
   21f00:	ldrb	r3, [r4, #8]
   21f04:	cmp	r3, #84	; 0x54
   21f08:	bne	21f48 <__assert_fail@plt+0xf804>
   21f0c:	ldr	r1, [r4]
   21f10:	ldr	r2, [r4, #4]
   21f14:	ldr	r3, [r4, #8]
   21f18:	str	r1, [r5]
   21f1c:	str	r3, [r5, #8]
   21f20:	str	r2, [r5, #4]
   21f24:	ldrh	r1, [r4, #12]
   21f28:	ldrb	r2, [r4, #14]
   21f2c:	mov	r3, #0
   21f30:	strh	r1, [r5, #12]
   21f34:	strb	r2, [r5, #14]
   21f38:	strb	r3, [r5, #15]
   21f3c:	pop	{r4, r5, r6, pc}
   21f40:	strb	r3, [r0]
   21f44:	bx	lr
   21f48:	ldr	r2, [pc, #8]	; 21f58 <__assert_fail@plt+0xf814>
   21f4c:	ldr	r1, [pc, #8]	; 21f5c <__assert_fail@plt+0xf818>
   21f50:	ldr	r0, [pc, #8]	; 21f60 <__assert_fail@plt+0xf81c>
   21f54:	bl	1ecbc <__assert_fail@plt+0xc578>
   21f58:	andeq	r9, r2, r0, lsl #28
   21f5c:	andeq	r0, r0, r9, lsl #7
   21f60:	andeq	r9, r2, r0, lsl lr
   21f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f68:	sub	sp, sp, #52	; 0x34
   21f6c:	ldr	r8, [pc, #576]	; 221b4 <__assert_fail@plt+0xfa70>
   21f70:	ldrb	r5, [r0]
   21f74:	ldr	r3, [r8]
   21f78:	cmp	r5, #0
   21f7c:	str	r3, [sp, #44]	; 0x2c
   21f80:	moveq	r9, #26
   21f84:	beq	2218c <__assert_fail@plt+0xfa48>
   21f88:	mov	r4, r0
   21f8c:	mov	r7, r1
   21f90:	bl	20e84 <__assert_fail@plt+0xe740>
   21f94:	subs	r9, r0, #0
   21f98:	bne	2218c <__assert_fail@plt+0xfa48>
   21f9c:	cmn	r7, #-2147483585	; 0x8000003f
   21fa0:	bhi	221a8 <__assert_fail@plt+0xfa64>
   21fa4:	sub	r5, r5, #48	; 0x30
   21fa8:	ldrb	r3, [r4, #1]
   21fac:	ldrb	r6, [r4, #2]
   21fb0:	add	r5, r5, r5, lsl #2
   21fb4:	sub	r3, r3, #48	; 0x30
   21fb8:	add	r5, r3, r5, lsl #1
   21fbc:	ldrb	fp, [r4, #4]
   21fc0:	sub	r3, r6, #48	; 0x30
   21fc4:	ldrb	ip, [r4, #3]
   21fc8:	add	r5, r5, r5, lsl #2
   21fcc:	add	r6, r3, r3, lsl #2
   21fd0:	ldrb	r2, [r4, #6]
   21fd4:	sub	fp, fp, #48	; 0x30
   21fd8:	ldrb	r1, [r4, #5]
   21fdc:	add	r5, r5, r5, lsl #2
   21fe0:	sub	r3, ip, #48	; 0x30
   21fe4:	ldrb	sl, [r4, #9]
   21fe8:	ldrb	lr, [r4, #11]
   21fec:	ldrb	r0, [r4, #13]
   21ff0:	add	r3, r3, r6, lsl #1
   21ff4:	add	fp, fp, fp, lsl #2
   21ff8:	ldr	r6, [pc, #440]	; 221b8 <__assert_fail@plt+0xfa74>
   21ffc:	add	r3, r3, r5, lsl #2
   22000:	sub	r2, r2, #48	; 0x30
   22004:	ldrb	ip, [r4, #7]
   22008:	sub	r1, r1, #48	; 0x30
   2200c:	add	r1, r1, fp, lsl #1
   22010:	sub	sl, sl, #48	; 0x30
   22014:	sub	lr, lr, #48	; 0x30
   22018:	sub	r0, r0, #48	; 0x30
   2201c:	cmp	r3, r6
   22020:	ldrb	r5, [r4, #10]
   22024:	ldrb	r6, [r4, #12]
   22028:	ldrb	fp, [r4, #14]
   2202c:	add	r2, r2, r2, lsl #2
   22030:	sub	ip, ip, #48	; 0x30
   22034:	add	sl, sl, sl, lsl #2
   22038:	add	lr, lr, lr, lsl #2
   2203c:	add	r0, r0, r0, lsl #2
   22040:	add	r2, ip, r2, lsl #1
   22044:	sub	r5, r5, #48	; 0x30
   22048:	sub	r6, r6, #48	; 0x30
   2204c:	sub	fp, fp, #48	; 0x30
   22050:	str	r3, [sp, #32]
   22054:	str	r1, [sp, #36]	; 0x24
   22058:	str	r2, [sp, #40]	; 0x28
   2205c:	add	ip, r5, sl, lsl #1
   22060:	add	lr, r6, lr, lsl #1
   22064:	add	r0, fp, r0, lsl #1
   22068:	ble	221a8 <__assert_fail@plt+0xfa64>
   2206c:	ldr	r5, [pc, #328]	; 221bc <__assert_fail@plt+0xfa78>
   22070:	add	r7, r7, r0
   22074:	str	r3, [sp, #24]
   22078:	smull	r0, r6, r5, r7
   2207c:	add	r6, r6, r7
   22080:	asr	fp, r7, #31
   22084:	rsb	r6, fp, r6, asr #5
   22088:	add	r6, r6, lr
   2208c:	smull	r0, r5, r5, r6
   22090:	add	r5, r5, r6
   22094:	asr	sl, r6, #31
   22098:	mov	r0, r3
   2209c:	rsb	r5, sl, r5, asr #5
   220a0:	add	r5, r5, ip
   220a4:	bl	208a0 <__assert_fail@plt+0xe15c>
   220a8:	ldr	r2, [pc, #272]	; 221c0 <__assert_fail@plt+0xfa7c>
   220ac:	asr	r3, r5, #31
   220b0:	ldr	r1, [pc, #268]	; 221c4 <__assert_fail@plt+0xfa80>
   220b4:	smull	ip, r2, r2, r5
   220b8:	ldr	ip, [pc, #264]	; 221c8 <__assert_fail@plt+0xfa84>
   220bc:	str	r3, [sp, #28]
   220c0:	rsb	r2, r3, r2, asr #2
   220c4:	ldr	r3, [sp, #24]
   220c8:	add	r0, r2, r0
   220cc:	add	r1, r0, r1
   220d0:	cmp	r1, ip
   220d4:	bhi	220ec <__assert_fail@plt+0xf9a8>
   220d8:	add	r3, sp, #40	; 0x28
   220dc:	add	r2, sp, #36	; 0x24
   220e0:	add	r1, sp, #32
   220e4:	bl	2092c <__assert_fail@plt+0xe1e8>
   220e8:	ldr	r3, [sp, #32]
   220ec:	ldr	r2, [pc, #216]	; 221cc <__assert_fail@plt+0xfa88>
   220f0:	cmp	r3, r2
   220f4:	bgt	221a8 <__assert_fail@plt+0xfa64>
   220f8:	ldr	r1, [sp, #36]	; 0x24
   220fc:	cmp	r1, #12
   22100:	bgt	221a8 <__assert_fail@plt+0xfa64>
   22104:	ldr	ip, [sp, #40]	; 0x28
   22108:	cmp	r1, #0
   2210c:	movgt	r2, #0
   22110:	movle	r2, #1
   22114:	sub	r0, ip, #1
   22118:	cmp	r0, #30
   2211c:	orrhi	r2, r2, #1
   22120:	orrs	r2, r2, r3, lsr #31
   22124:	bne	221a8 <__assert_fail@plt+0xfa64>
   22128:	ldr	r0, [pc, #140]	; 221bc <__assert_fail@plt+0xfa78>
   2212c:	ldr	r2, [pc, #140]	; 221c0 <__assert_fail@plt+0xfa7c>
   22130:	str	ip, [sp, #4]
   22134:	smull	lr, ip, r0, r7
   22138:	smull	lr, r0, r0, r6
   2213c:	smull	lr, r2, r2, r5
   22140:	str	r1, [sp]
   22144:	add	r1, r0, r6
   22148:	add	ip, ip, r7
   2214c:	rsb	sl, sl, r1, asr #5
   22150:	ldr	r1, [sp, #28]
   22154:	rsb	fp, fp, ip, asr #5
   22158:	rsb	r2, r1, r2, asr #2
   2215c:	rsb	fp, fp, fp, lsl #4
   22160:	rsb	sl, sl, sl, lsl #4
   22164:	add	r2, r2, r2, lsl #1
   22168:	sub	r7, r7, fp, lsl #2
   2216c:	sub	r6, r6, sl, lsl #2
   22170:	sub	r5, r5, r2, lsl #3
   22174:	mov	r0, r4
   22178:	strd	r6, [sp, #12]
   2217c:	str	r5, [sp, #8]
   22180:	ldr	r2, [pc, #72]	; 221d0 <__assert_fail@plt+0xfa8c>
   22184:	mov	r1, #16
   22188:	bl	12564 <gpgrt_snprintf@plt>
   2218c:	ldr	r2, [sp, #44]	; 0x2c
   22190:	ldr	r3, [r8]
   22194:	mov	r0, r9
   22198:	cmp	r2, r3
   2219c:	bne	221b0 <__assert_fail@plt+0xfa6c>
   221a0:	add	sp, sp, #52	; 0x34
   221a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221a8:	mov	r9, #55	; 0x37
   221ac:	b	2218c <__assert_fail@plt+0xfa48>
   221b0:	bl	1218c <__stack_chk_fail@plt>
   221b4:	andeq	sl, r3, r8, asr fp
   221b8:	andeq	r0, r0, lr, lsr #12
   221bc:	stmhi	r8, {r0, r3, r7, fp, pc}
   221c0:	bcs	feaccc74 <stdout@@GLIBC_2.4+0xfea8f960>
   221c4:			; <UNDEFINED> instruction: 0xffe5bbaf
   221c8:	andseq	r1, r1, ip, ror sp
   221cc:	andeq	r2, r0, pc, lsl #14
   221d0:	andeq	r9, r2, r8, lsr lr
   221d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221d8:	sub	sp, sp, #60	; 0x3c
   221dc:	ldr	r5, [pc, #456]	; 223ac <__assert_fail@plt+0xfc68>
   221e0:	ldrb	r8, [r0]
   221e4:	ldr	r3, [r5]
   221e8:	cmp	r8, #0
   221ec:	str	r3, [sp, #52]	; 0x34
   221f0:	moveq	r7, #26
   221f4:	beq	22384 <__assert_fail@plt+0xfc40>
   221f8:	mov	r4, r0
   221fc:	mov	r6, r1
   22200:	bl	20e84 <__assert_fail@plt+0xe740>
   22204:	subs	r7, r0, #0
   22208:	bne	22384 <__assert_fail@plt+0xfc40>
   2220c:	ldr	r3, [pc, #412]	; 223b0 <__assert_fail@plt+0xfc6c>
   22210:	cmp	r6, r3
   22214:	bhi	223a0 <__assert_fail@plt+0xfc5c>
   22218:	sub	r8, r8, #48	; 0x30
   2221c:	ldrb	r3, [r4, #1]
   22220:	ldrb	r1, [r4, #2]
   22224:	add	r8, r8, r8, lsl #2
   22228:	sub	r3, r3, #48	; 0x30
   2222c:	add	r8, r3, r8, lsl #1
   22230:	ldrb	r0, [r4, #3]
   22234:	sub	r3, r1, #48	; 0x30
   22238:	ldrb	ip, [r4, #4]
   2223c:	ldrb	r2, [r4, #6]
   22240:	add	r3, r3, r3, lsl #2
   22244:	sub	r0, r0, #48	; 0x30
   22248:	add	r8, r8, r8, lsl #2
   2224c:	add	r3, r0, r3, lsl #1
   22250:	sub	ip, ip, #48	; 0x30
   22254:	sub	r2, r2, #48	; 0x30
   22258:	ldrb	r1, [r4, #5]
   2225c:	ldrb	r0, [r4, #7]
   22260:	add	r8, r8, r8, lsl #2
   22264:	add	ip, ip, ip, lsl #2
   22268:	add	r2, r2, r2, lsl #2
   2226c:	ldr	lr, [pc, #320]	; 223b4 <__assert_fail@plt+0xfc70>
   22270:	add	fp, r3, r8, lsl #2
   22274:	sub	r1, r1, #48	; 0x30
   22278:	sub	r0, r0, #48	; 0x30
   2227c:	add	r1, r1, ip, lsl #1
   22280:	add	r2, r0, r2, lsl #1
   22284:	cmp	fp, lr
   22288:	str	fp, [sp, #40]	; 0x28
   2228c:	str	r1, [sp, #44]	; 0x2c
   22290:	str	r2, [sp, #48]	; 0x30
   22294:	ble	223a0 <__assert_fail@plt+0xfc5c>
   22298:	mov	r0, fp
   2229c:	bl	208a0 <__assert_fail@plt+0xe15c>
   222a0:	ldrb	r3, [r4, #10]
   222a4:	ldr	r2, [pc, #268]	; 223b8 <__assert_fail@plt+0xfc74>
   222a8:	ldr	r1, [pc, #268]	; 223bc <__assert_fail@plt+0xfc78>
   222ac:	str	r3, [sp, #28]
   222b0:	ldrb	r3, [r4, #12]
   222b4:	ldrb	r8, [r4, #9]
   222b8:	ldrb	r9, [r4, #11]
   222bc:	str	r3, [sp, #32]
   222c0:	ldrb	r3, [r4, #14]
   222c4:	ldrb	sl, [r4, #13]
   222c8:	str	r3, [sp, #36]	; 0x24
   222cc:	add	r0, r6, r0
   222d0:	add	r2, r0, r2
   222d4:	cmp	r2, r1
   222d8:	bhi	222f0 <__assert_fail@plt+0xfbac>
   222dc:	add	r3, sp, #48	; 0x30
   222e0:	add	r2, sp, #44	; 0x2c
   222e4:	add	r1, sp, #40	; 0x28
   222e8:	bl	2092c <__assert_fail@plt+0xe1e8>
   222ec:	ldr	fp, [sp, #40]	; 0x28
   222f0:	ldr	r2, [pc, #200]	; 223c0 <__assert_fail@plt+0xfc7c>
   222f4:	cmp	fp, r2
   222f8:	bgt	223a0 <__assert_fail@plt+0xfc5c>
   222fc:	ldr	r1, [sp, #44]	; 0x2c
   22300:	cmp	r1, #12
   22304:	bgt	223a0 <__assert_fail@plt+0xfc5c>
   22308:	ldr	r0, [sp, #48]	; 0x30
   2230c:	cmp	r1, #0
   22310:	movgt	r2, #0
   22314:	movle	r2, #1
   22318:	sub	ip, r0, #1
   2231c:	cmp	ip, #30
   22320:	orrhi	r2, r2, #1
   22324:	orrs	r3, r2, fp, lsr #31
   22328:	bne	223a0 <__assert_fail@plt+0xfc5c>
   2232c:	ldr	r2, [sp, #32]
   22330:	sub	sl, sl, #48	; 0x30
   22334:	sub	r9, r9, #48	; 0x30
   22338:	sub	r8, r8, #48	; 0x30
   2233c:	sub	ip, r2, #48	; 0x30
   22340:	ldr	r3, [sp, #36]	; 0x24
   22344:	ldr	r2, [sp, #28]
   22348:	add	sl, sl, sl, lsl #2
   2234c:	add	r9, r9, r9, lsl #2
   22350:	add	r8, r8, r8, lsl #2
   22354:	sub	r3, r3, #48	; 0x30
   22358:	sub	r2, r2, #48	; 0x30
   2235c:	add	sl, r3, sl, lsl #1
   22360:	add	r8, r2, r8, lsl #1
   22364:	add	r9, ip, r9, lsl #1
   22368:	str	r1, [sp]
   2236c:	stmib	sp, {r0, r8, r9, sl}
   22370:	mov	r3, fp
   22374:	mov	r0, r4
   22378:	ldr	r2, [pc, #68]	; 223c4 <__assert_fail@plt+0xfc80>
   2237c:	mov	r1, #16
   22380:	bl	12564 <gpgrt_snprintf@plt>
   22384:	ldr	r2, [sp, #52]	; 0x34
   22388:	ldr	r3, [r5]
   2238c:	mov	r0, r7
   22390:	cmp	r2, r3
   22394:	bne	223a8 <__assert_fail@plt+0xfc64>
   22398:	add	sp, sp, #60	; 0x3c
   2239c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223a0:	mov	r7, #55	; 0x37
   223a4:	b	22384 <__assert_fail@plt+0xfc40>
   223a8:	bl	1218c <__stack_chk_fail@plt>
   223ac:	andeq	sl, r3, r8, asr fp
   223b0:	eorseq	sp, r7, r1, ror r7
   223b4:	andeq	r0, r0, lr, lsr #12
   223b8:			; <UNDEFINED> instruction: 0xffe5bbaf
   223bc:	andseq	r1, r1, ip, ror sp
   223c0:	andeq	r2, r0, pc, lsl #14
   223c4:	andeq	r9, r2, r8, lsr lr
   223c8:	ldr	r2, [pc, #748]	; 226bc <__assert_fail@plt+0xff78>
   223cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223d0:	add	r3, r1, #7
   223d4:	cmp	r3, r2
   223d8:	bhi	225b8 <__assert_fail@plt+0xfe74>
   223dc:	ldr	r2, [pc, #732]	; 226c0 <__assert_fail@plt+0xff7c>
   223e0:	lsr	r8, r3, #3
   223e4:	mov	r9, r1
   223e8:	mov	r4, r0
   223ec:	umull	r1, r0, r2, r8
   223f0:	umull	r2, r3, r2, r3
   223f4:	lsr	r0, r0, #2
   223f8:	lsr	r3, r3, #5
   223fc:	add	r0, r0, r0, lsl #2
   22400:	sub	r0, r8, r0
   22404:	add	r3, r0, r3, lsl #2
   22408:	lsl	r3, r3, #1
   2240c:	cmp	r0, #2
   22410:	movhi	r0, r3
   22414:	addls	r0, r3, #1
   22418:	bl	1200c <gcry_malloc@plt>
   2241c:	subs	sl, r0, #0
   22420:	beq	225b0 <__assert_fail@plt+0xfe6c>
   22424:	cmp	r8, #4
   22428:	bls	226b4 <__assert_fail@plt+0xff70>
   2242c:	ldr	r0, [pc, #656]	; 226c4 <__assert_fail@plt+0xff80>
   22430:	add	r2, r4, #5
   22434:	add	r3, sl, #8
   22438:	ldrb	lr, [r2, #-4]
   2243c:	ldrb	r4, [r2, #-3]
   22440:	ldrb	fp, [r2, #-5]
   22444:	ldrb	ip, [r2, #-2]
   22448:	ldrb	r1, [r2, #-1]
   2244c:	lsl	r6, lr, #4
   22450:	lsl	r7, fp, #2
   22454:	lsl	r5, r4, #1
   22458:	and	r6, r6, #16
   2245c:	orr	r6, r6, r4, lsr #4
   22460:	and	r7, r7, #28
   22464:	lsl	r4, ip, #3
   22468:	and	r5, r5, #30
   2246c:	orr	r7, r7, lr, lsr #6
   22470:	orr	r5, r5, ip, lsr #7
   22474:	asr	lr, lr, #1
   22478:	and	r4, r4, #24
   2247c:	asr	ip, ip, #2
   22480:	orr	r4, r4, r1, lsr #5
   22484:	and	lr, lr, #31
   22488:	and	ip, ip, #31
   2248c:	and	r1, r1, #31
   22490:	ldrb	ip, [r0, ip]
   22494:	ldrb	r4, [r0, r4]
   22498:	ldrb	fp, [r0, fp, lsr #3]
   2249c:	ldrb	r7, [r0, r7]
   224a0:	ldrb	lr, [r0, lr]
   224a4:	ldrb	r6, [r0, r6]
   224a8:	ldrb	r5, [r0, r5]
   224ac:	ldrb	r1, [r0, r1]
   224b0:	sub	r8, r8, #5
   224b4:	cmp	r8, #4
   224b8:	strb	ip, [r3, #-3]
   224bc:	strb	r4, [r3, #-2]
   224c0:	strb	fp, [r3, #-8]
   224c4:	strb	r7, [r3, #-7]
   224c8:	strb	lr, [r3, #-6]
   224cc:	strb	r6, [r3, #-5]
   224d0:	strb	r5, [r3, #-4]
   224d4:	strb	r1, [r3, #-1]
   224d8:	mov	r4, r2
   224dc:	mov	ip, r3
   224e0:	add	r2, r2, #5
   224e4:	add	r3, r3, #8
   224e8:	bhi	22438 <__assert_fail@plt+0xfcf4>
   224ec:	sub	r8, r8, #1
   224f0:	cmp	r8, #3
   224f4:	ldrls	pc, [pc, r8, lsl #2]
   224f8:	b	22598 <__assert_fail@plt+0xfe54>
   224fc:	ldrdeq	r2, [r2], -r0
   22500:	strdeq	r2, [r2], -ip
   22504:	andeq	r2, r2, ip, asr #12
   22508:	andeq	r2, r2, ip, lsl #10
   2250c:	ldrb	r0, [r4, #1]
   22510:	ldrb	r3, [r4, #2]
   22514:	ldrb	r5, [r4]
   22518:	ldrb	r2, [r4, #3]
   2251c:	lsl	lr, r0, #4
   22520:	and	lr, lr, #16
   22524:	orr	lr, lr, r3, lsr #4
   22528:	lsl	r4, r5, #2
   2252c:	lsl	r3, r3, #1
   22530:	and	r4, r4, #28
   22534:	and	r3, r3, #30
   22538:	ldr	r1, [pc, #388]	; 226c4 <__assert_fail@plt+0xff80>
   2253c:	orr	r3, r3, r2, lsr #7
   22540:	orr	r4, r4, r0, lsr #6
   22544:	asr	r6, r2, #2
   22548:	asr	r0, r0, #1
   2254c:	lsl	r2, r2, #3
   22550:	and	r0, r0, #31
   22554:	and	r6, r6, #31
   22558:	and	r2, r2, #24
   2255c:	ldrb	r7, [r1, r0]
   22560:	ldrb	r8, [r1, lr]
   22564:	ldrb	r4, [r1, r4]
   22568:	ldrb	lr, [r1, r3]
   2256c:	ldrb	r5, [r1, r5, lsr #3]
   22570:	ldrb	r0, [r1, r6]
   22574:	ldrb	r3, [r1, r2]
   22578:	strb	r4, [ip, #1]
   2257c:	strb	r5, [ip]
   22580:	strb	r7, [ip, #2]
   22584:	strb	r8, [ip, #3]
   22588:	strb	lr, [ip, #4]
   2258c:	strb	r0, [ip, #5]
   22590:	strb	r3, [ip, #6]
   22594:	add	ip, ip, #7
   22598:	ldr	r1, [pc, #288]	; 226c0 <__assert_fail@plt+0xff7c>
   2259c:	add	r9, r9, #4
   225a0:	mov	r3, #0
   225a4:	umull	r2, r9, r1, r9
   225a8:	strb	r3, [ip]
   225ac:	strb	r3, [sl, r9, lsr #2]
   225b0:	mov	r0, sl
   225b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225b8:	bl	1245c <__errno_location@plt>
   225bc:	mov	sl, #0
   225c0:	mov	r3, #22
   225c4:	str	r3, [r0]
   225c8:	mov	r0, sl
   225cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225d0:	ldrb	r0, [r4]
   225d4:	ldr	r1, [pc, #232]	; 226c4 <__assert_fail@plt+0xff80>
   225d8:	mov	r3, ip
   225dc:	lsl	r2, r0, #2
   225e0:	and	r2, r2, #28
   225e4:	ldrb	r0, [r1, r0, lsr #3]
   225e8:	ldrb	r2, [r1, r2]
   225ec:	strb	r0, [r3], #2
   225f0:	strb	r2, [ip, #1]
   225f4:	mov	ip, r3
   225f8:	b	22598 <__assert_fail@plt+0xfe54>
   225fc:	ldrb	lr, [r4]
   22600:	ldrb	r3, [r4, #1]
   22604:	ldr	r1, [pc, #184]	; 226c4 <__assert_fail@plt+0xff80>
   22608:	add	ip, ip, #4
   2260c:	lsl	r2, lr, #2
   22610:	and	r2, r2, #28
   22614:	orr	r2, r2, r3, lsr #6
   22618:	asr	r0, r3, #1
   2261c:	lsl	r3, r3, #4
   22620:	and	r0, r0, #31
   22624:	and	r3, r3, #16
   22628:	ldrb	r4, [r1, r2]
   2262c:	ldrb	lr, [r1, lr, lsr #3]
   22630:	ldrb	r2, [r1, r0]
   22634:	ldrb	r3, [r1, r3]
   22638:	strb	r4, [ip, #-3]
   2263c:	strb	lr, [ip, #-4]
   22640:	strb	r2, [ip, #-2]
   22644:	strb	r3, [ip, #-1]
   22648:	b	22598 <__assert_fail@plt+0xfe54>
   2264c:	ldrb	r3, [r4, #1]
   22650:	ldrb	lr, [r4]
   22654:	ldrb	r2, [r4, #2]
   22658:	ldr	r1, [pc, #100]	; 226c4 <__assert_fail@plt+0xff80>
   2265c:	lsl	r0, r3, #4
   22660:	lsl	r4, lr, #2
   22664:	and	r4, r4, #28
   22668:	and	r0, r0, #16
   2266c:	orr	r4, r4, r3, lsr #6
   22670:	orr	r0, r0, r2, lsr #4
   22674:	asr	r3, r3, #1
   22678:	lsl	r2, r2, #1
   2267c:	and	r3, r3, #31
   22680:	and	r2, r2, #30
   22684:	ldrb	r5, [r1, r4]
   22688:	ldrb	r4, [r1, lr, lsr #3]
   2268c:	ldrb	lr, [r1, r0]
   22690:	ldrb	r0, [r1, r3]
   22694:	ldrb	r3, [r1, r2]
   22698:	strb	r5, [ip, #1]
   2269c:	strb	r4, [ip]
   226a0:	strb	lr, [ip, #3]
   226a4:	strb	r0, [ip, #2]
   226a8:	strb	r3, [ip, #4]
   226ac:	add	ip, ip, #5
   226b0:	b	22598 <__assert_fail@plt+0xfe54>
   226b4:	mov	ip, sl
   226b8:	b	224ec <__assert_fail@plt+0xfda8>
   226bc:	andeq	r0, r8, r7
   226c0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   226c4:	andeq	r9, r2, r0, lsl #31
   226c8:	push	{r0, r1, r2, r3}
   226cc:	push	{r4, lr}
   226d0:	sub	sp, sp, #16
   226d4:	ldr	r4, [pc, #100]	; 22740 <__assert_fail@plt+0xfffc>
   226d8:	add	r3, sp, #28
   226dc:	mov	r2, r3
   226e0:	ldr	ip, [r4]
   226e4:	ldr	r1, [sp, #24]
   226e8:	add	r0, sp, #8
   226ec:	str	ip, [sp, #12]
   226f0:	str	r3, [sp, #4]
   226f4:	bl	124c8 <gpgrt_vasprintf@plt>
   226f8:	cmp	r0, #0
   226fc:	blt	22724 <__assert_fail@plt+0xffe0>
   22700:	ldr	r2, [sp, #12]
   22704:	ldr	r3, [r4]
   22708:	ldr	r0, [sp, #8]
   2270c:	cmp	r2, r3
   22710:	bne	2273c <__assert_fail@plt+0xfff8>
   22714:	add	sp, sp, #16
   22718:	pop	{r4, lr}
   2271c:	add	sp, sp, #16
   22720:	bx	lr
   22724:	bl	1245c <__errno_location@plt>
   22728:	ldr	r0, [r0]
   2272c:	bl	12330 <strerror@plt>
   22730:	mov	r1, r0
   22734:	ldr	r0, [pc, #8]	; 22744 <__assert_fail@plt+0x10000>
   22738:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   2273c:	bl	1218c <__stack_chk_fail@plt>
   22740:	andeq	sl, r3, r8, asr fp
   22744:	andeq	r9, r2, r0, lsr #31
   22748:	push	{r0, r1, r2, r3}
   2274c:	push	{r4, lr}
   22750:	sub	sp, sp, #16
   22754:	ldr	r4, [pc, #76]	; 227a8 <__assert_fail@plt+0x10064>
   22758:	add	r3, sp, #28
   2275c:	mov	r2, r3
   22760:	ldr	ip, [r4]
   22764:	ldr	r1, [sp, #24]
   22768:	add	r0, sp, #8
   2276c:	str	r3, [sp, #4]
   22770:	str	ip, [sp, #12]
   22774:	bl	124c8 <gpgrt_vasprintf@plt>
   22778:	ldr	r2, [sp, #12]
   2277c:	ldr	r3, [r4]
   22780:	cmp	r0, #0
   22784:	movlt	r0, #0
   22788:	ldrge	r0, [sp, #8]
   2278c:	cmp	r2, r3
   22790:	bne	227a4 <__assert_fail@plt+0x10060>
   22794:	add	sp, sp, #16
   22798:	pop	{r4, lr}
   2279c:	add	sp, sp, #16
   227a0:	bx	lr
   227a4:	bl	1218c <__stack_chk_fail@plt>
   227a8:	andeq	sl, r3, r8, asr fp
   227ac:	ldr	r3, [pc, #8]	; 227bc <__assert_fail@plt+0x10078>
   227b0:	mov	r2, #1
   227b4:	str	r2, [r3]
   227b8:	bx	lr
   227bc:	andeq	sp, r3, r4, ror #9
   227c0:	push	{r4, r5, r6, lr}
   227c4:	sub	sp, sp, #288	; 0x120
   227c8:	ldr	r4, [pc, #108]	; 2283c <__assert_fail@plt+0x100f8>
   227cc:	cmp	r2, #0
   227d0:	mov	r6, r1
   227d4:	ldr	r3, [r4]
   227d8:	mov	r5, r0
   227dc:	str	r3, [sp, #284]	; 0x11c
   227e0:	beq	227fc <__assert_fail@plt+0x100b8>
   227e4:	add	r2, sp, #4
   227e8:	mov	r1, #0
   227ec:	bl	1224c <sigaction@plt>
   227f0:	ldr	r3, [sp, #4]
   227f4:	cmp	r3, #1
   227f8:	beq	22820 <__assert_fail@plt+0x100dc>
   227fc:	add	r0, sp, #148	; 0x94
   22800:	str	r6, [sp, #144]	; 0x90
   22804:	bl	12594 <sigemptyset@plt>
   22808:	mov	r3, #0
   2280c:	mov	r0, r5
   22810:	add	r1, sp, #144	; 0x90
   22814:	mov	r2, r3
   22818:	str	r3, [sp, #276]	; 0x114
   2281c:	bl	1224c <sigaction@plt>
   22820:	ldr	r2, [sp, #284]	; 0x11c
   22824:	ldr	r3, [r4]
   22828:	cmp	r2, r3
   2282c:	bne	22838 <__assert_fail@plt+0x100f4>
   22830:	add	sp, sp, #288	; 0x120
   22834:	pop	{r4, r5, r6, pc}
   22838:	bl	1218c <__stack_chk_fail@plt>
   2283c:	andeq	sl, r3, r8, asr fp
   22840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22844:	mov	r7, r0
   22848:	ldr	r4, [pc, #392]	; 229d8 <__assert_fail@plt+0x10294>
   2284c:	sub	sp, sp, #12
   22850:	ldr	r3, [r4, #4]
   22854:	cmp	r3, #0
   22858:	bne	229b8 <__assert_fail@plt+0x10274>
   2285c:	ldr	r3, [r4, #8]
   22860:	mov	r2, #1
   22864:	cmp	r3, #0
   22868:	str	r2, [r4, #4]
   2286c:	beq	22874 <__assert_fail@plt+0x10130>
   22870:	blx	r3
   22874:	mov	r2, #1
   22878:	ldr	r1, [pc, #348]	; 229dc <__assert_fail@plt+0x10298>
   2287c:	mov	r0, #2
   22880:	bl	124f8 <write@plt>
   22884:	mov	r0, #0
   22888:	bl	1e708 <__assert_fail@plt+0xbfc4>
   2288c:	subs	r4, r0, #0
   22890:	beq	228a8 <__assert_fail@plt+0x10164>
   22894:	bl	123e4 <strlen@plt>
   22898:	mov	r1, r4
   2289c:	mov	r2, r0
   228a0:	mov	r0, #2
   228a4:	bl	124f8 <write@plt>
   228a8:	mov	r2, #9
   228ac:	ldr	r1, [pc, #300]	; 229e0 <__assert_fail@plt+0x1029c>
   228b0:	mov	r0, #2
   228b4:	bl	124f8 <write@plt>
   228b8:	cmp	r7, #64	; 0x40
   228bc:	bhi	22954 <__assert_fail@plt+0x10210>
   228c0:	ldr	r3, [pc, #284]	; 229e4 <__assert_fail@plt+0x102a0>
   228c4:	ldr	r1, [r3, r7, lsl #2]
   228c8:	cmp	r1, #0
   228cc:	bne	229c0 <__assert_fail@plt+0x1027c>
   228d0:	ldr	r4, [pc, #272]	; 229e8 <__assert_fail@plt+0x102a4>
   228d4:	ldr	r9, [pc, #272]	; 229ec <__assert_fail@plt+0x102a8>
   228d8:	ldr	r8, [pc, #272]	; 229f0 <__assert_fail@plt+0x102ac>
   228dc:	mov	r5, r1
   228e0:	mov	sl, r7
   228e4:	mov	r6, #5
   228e8:	cmp	r4, sl
   228ec:	and	r3, r5, #1
   228f0:	mov	r1, r4
   228f4:	mov	r0, sl
   228f8:	ble	22994 <__assert_fail@plt+0x10250>
   228fc:	cmp	r4, #1
   22900:	orreq	r3, r3, #1
   22904:	cmp	r3, #0
   22908:	moveq	r5, r3
   2290c:	beq	2293c <__assert_fail@plt+0x101f8>
   22910:	bl	251c0 <__assert_fail@plt+0x12a7c>
   22914:	mov	r2, #1
   22918:	mov	r1, r9
   2291c:	cmp	r0, #0
   22920:	mov	r0, #2
   22924:	bne	2293c <__assert_fail@plt+0x101f8>
   22928:	bl	124f8 <write@plt>
   2292c:	mov	r0, sl
   22930:	mov	r1, r4
   22934:	bl	253e0 <__assert_fail@plt+0x12c9c>
   22938:	mov	sl, r1
   2293c:	smull	r2, r3, r8, r4
   22940:	subs	r6, r6, #1
   22944:	asr	r4, r4, #31
   22948:	rsb	r4, r4, r3, asr #2
   2294c:	bne	228e8 <__assert_fail@plt+0x101a4>
   22950:	b	22964 <__assert_fail@plt+0x10220>
   22954:	ldr	r1, [pc, #152]	; 229f4 <__assert_fail@plt+0x102b0>
   22958:	mov	r2, #1
   2295c:	mov	r0, #2
   22960:	bl	124f8 <write@plt>
   22964:	mov	r2, #20
   22968:	ldr	r1, [pc, #136]	; 229f8 <__assert_fail@plt+0x102b4>
   2296c:	mov	r0, #2
   22970:	bl	124f8 <write@plt>
   22974:	mov	r2, #0
   22978:	mov	r0, r7
   2297c:	mov	r1, r2
   22980:	bl	227c0 <__assert_fail@plt+0x1007c>
   22984:	mov	r0, r7
   22988:	add	sp, sp, #12
   2298c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22990:	b	11ff4 <raise@plt>
   22994:	bl	251c0 <__assert_fail@plt+0x12a7c>
   22998:	mov	r2, #1
   2299c:	mov	fp, r0
   229a0:	add	r1, r9, r0
   229a4:	mov	r0, #2
   229a8:	bl	124f8 <write@plt>
   229ac:	cmp	fp, #0
   229b0:	movne	r5, #1
   229b4:	b	2292c <__assert_fail@plt+0x101e8>
   229b8:	bl	11ff4 <raise@plt>
   229bc:	b	2285c <__assert_fail@plt+0x10118>
   229c0:	mov	r0, r1
   229c4:	str	r1, [sp, #4]
   229c8:	bl	123e4 <strlen@plt>
   229cc:	ldr	r1, [sp, #4]
   229d0:	mov	r2, r0
   229d4:	b	2295c <__assert_fail@plt+0x10218>
   229d8:	andeq	sp, r3, r4, ror #9
   229dc:	muleq	r2, r8, r3
   229e0:	ldrdeq	r9, [r2], -r4
   229e4:	andeq	sl, r3, ip, asr fp
   229e8:	andeq	r2, r0, r0, lsl r7
   229ec:	andeq	r9, r2, r0, ror #31
   229f0:	strbtvs	r6, [r6], -r7, ror #12
   229f4:	andeq	r9, r2, r8, lsl #17
   229f8:	andeq	r9, r2, ip, ror #31
   229fc:	push	{r4, lr}
   22a00:	subs	r4, r0, #0
   22a04:	bne	22a88 <__assert_fail@plt+0x10344>
   22a08:	ldr	ip, [pc, #140]	; 22a9c <__assert_fail@plt+0x10358>
   22a0c:	mov	r3, r1
   22a10:	mov	r2, #1
   22a14:	ldr	r1, [pc, #132]	; 22aa0 <__assert_fail@plt+0x1035c>
   22a18:	mov	r0, #2
   22a1c:	str	r3, [ip, #8]
   22a20:	bl	227c0 <__assert_fail@plt+0x1007c>
   22a24:	mov	r2, #1
   22a28:	mov	r0, r2
   22a2c:	ldr	r1, [pc, #108]	; 22aa0 <__assert_fail@plt+0x1035c>
   22a30:	bl	227c0 <__assert_fail@plt+0x1007c>
   22a34:	mov	r2, #1
   22a38:	ldr	r1, [pc, #96]	; 22aa0 <__assert_fail@plt+0x1035c>
   22a3c:	mov	r0, #15
   22a40:	bl	227c0 <__assert_fail@plt+0x1007c>
   22a44:	mov	r2, #1
   22a48:	ldr	r1, [pc, #80]	; 22aa0 <__assert_fail@plt+0x1035c>
   22a4c:	mov	r0, #3
   22a50:	bl	227c0 <__assert_fail@plt+0x1007c>
   22a54:	mov	r2, #1
   22a58:	ldr	r1, [pc, #64]	; 22aa0 <__assert_fail@plt+0x1035c>
   22a5c:	mov	r0, #11
   22a60:	bl	227c0 <__assert_fail@plt+0x1007c>
   22a64:	mov	r2, r4
   22a68:	ldr	r1, [pc, #52]	; 22aa4 <__assert_fail@plt+0x10360>
   22a6c:	mov	r0, #10
   22a70:	bl	227c0 <__assert_fail@plt+0x1007c>
   22a74:	mov	r2, r4
   22a78:	mov	r1, #1
   22a7c:	mov	r0, #13
   22a80:	pop	{r4, lr}
   22a84:	b	227c0 <__assert_fail@plt+0x1007c>
   22a88:	ldr	r3, [pc, #24]	; 22aa8 <__assert_fail@plt+0x10364>
   22a8c:	mov	r2, #169	; 0xa9
   22a90:	ldr	r1, [pc, #20]	; 22aac <__assert_fail@plt+0x10368>
   22a94:	ldr	r0, [pc, #20]	; 22ab0 <__assert_fail@plt+0x1036c>
   22a98:	bl	12744 <__assert_fail@plt>
   22a9c:	andeq	sp, r3, r4, ror #9
   22aa0:	andeq	r2, r2, r0, asr #16
   22aa4:	andeq	r2, r2, ip, lsr #15
   22aa8:	andeq	r9, r2, r0, asr #31
   22aac:	andeq	sl, r2, r4
   22ab0:	andeq	sl, r2, ip, lsl r0
   22ab4:	push	{r4, r5, r6, lr}
   22ab8:	sub	sp, sp, #136	; 0x88
   22abc:	ldr	r4, [pc, #88]	; 22b1c <__assert_fail@plt+0x103d8>
   22ac0:	ldr	r5, [pc, #88]	; 22b20 <__assert_fail@plt+0x103dc>
   22ac4:	ldr	r6, [r4, #12]
   22ac8:	ldr	r3, [r5]
   22acc:	cmp	r6, #0
   22ad0:	str	r3, [sp, #132]	; 0x84
   22ad4:	bne	22b10 <__assert_fail@plt+0x103cc>
   22ad8:	add	r0, sp, #4
   22adc:	bl	12444 <sigfillset@plt>
   22ae0:	add	r1, sp, #4
   22ae4:	add	r2, r4, #16
   22ae8:	mov	r0, r6
   22aec:	bl	120cc <sigprocmask@plt>
   22af0:	ldr	r1, [sp, #132]	; 0x84
   22af4:	ldr	r2, [r5]
   22af8:	mov	r3, #1
   22afc:	cmp	r1, r2
   22b00:	str	r3, [r4, #12]
   22b04:	bne	22b18 <__assert_fail@plt+0x103d4>
   22b08:	add	sp, sp, #136	; 0x88
   22b0c:	pop	{r4, r5, r6, pc}
   22b10:	ldr	r0, [pc, #12]	; 22b24 <__assert_fail@plt+0x103e0>
   22b14:	bl	1ea64 <__assert_fail@plt+0xc320>
   22b18:	bl	1218c <__stack_chk_fail@plt>
   22b1c:	andeq	sp, r3, r4, ror #9
   22b20:	andeq	sl, r3, r8, asr fp
   22b24:	andeq	sl, r2, r4, lsr #32
   22b28:	push	{r4, lr}
   22b2c:	ldr	r4, [pc, #44]	; 22b60 <__assert_fail@plt+0x1041c>
   22b30:	ldr	r3, [r4, #12]
   22b34:	cmp	r3, #0
   22b38:	beq	22b58 <__assert_fail@plt+0x10414>
   22b3c:	mov	r2, #0
   22b40:	add	r1, r4, #16
   22b44:	mov	r0, #2
   22b48:	bl	120cc <sigprocmask@plt>
   22b4c:	mov	r3, #0
   22b50:	str	r3, [r4, #12]
   22b54:	pop	{r4, pc}
   22b58:	ldr	r0, [pc, #4]	; 22b64 <__assert_fail@plt+0x10420>
   22b5c:	bl	1ea64 <__assert_fail@plt+0xc320>
   22b60:	andeq	sp, r3, r4, ror #9
   22b64:	andeq	sl, r2, r4, asr #32
   22b68:	push	{r4, r5, r6, r7, r8, lr}
   22b6c:	mov	r6, r1
   22b70:	mov	r7, r2
   22b74:	mov	r4, r3
   22b78:	mov	r5, r0
   22b7c:	bl	12558 <pipe@plt>
   22b80:	cmn	r0, #1
   22b84:	beq	22bc8 <__assert_fail@plt+0x10484>
   22b88:	cmp	r7, #0
   22b8c:	ldreq	r3, [pc, #256]	; 22c94 <__assert_fail@plt+0x10550>
   22b90:	ldreq	r1, [pc, #256]	; 22c98 <__assert_fail@plt+0x10554>
   22b94:	ldreq	r0, [r5]
   22b98:	ldrne	r1, [pc, #252]	; 22c9c <__assert_fail@plt+0x10558>
   22b9c:	ldrne	r3, [pc, #252]	; 22ca0 <__assert_fail@plt+0x1055c>
   22ba0:	ldrne	r0, [r5, #4]
   22ba4:	cmp	r4, #0
   22ba8:	moveq	r1, r3
   22bac:	bl	12300 <gpgrt_fdopen@plt>
   22bb0:	cmp	r0, #0
   22bb4:	str	r0, [r6]
   22bb8:	movne	r4, #0
   22bbc:	beq	22c2c <__assert_fail@plt+0x104e8>
   22bc0:	mov	r0, r4
   22bc4:	pop	{r4, r5, r6, r7, r8, pc}
   22bc8:	ldr	r3, [pc, #212]	; 22ca4 <__assert_fail@plt+0x10560>
   22bcc:	ldr	r7, [r3]
   22bd0:	bl	12420 <gpg_err_code_from_syserror@plt>
   22bd4:	mov	r2, #5
   22bd8:	ldr	r1, [pc, #200]	; 22ca8 <__assert_fail@plt+0x10564>
   22bdc:	subs	r4, r0, #0
   22be0:	lslne	r7, r7, #24
   22be4:	uxthne	r4, r4
   22be8:	andne	r7, r7, #2130706432	; 0x7f000000
   22bec:	mov	r0, #0
   22bf0:	orrne	r4, r7, r4
   22bf4:	bl	12180 <dcgettext@plt>
   22bf8:	mov	r7, r0
   22bfc:	mov	r0, r4
   22c00:	bl	1260c <gpg_strerror@plt>
   22c04:	mov	r1, r0
   22c08:	mov	r0, r7
   22c0c:	bl	1e95c <__assert_fail@plt+0xc218>
   22c10:	mvn	r3, #0
   22c14:	mov	r2, #0
   22c18:	str	r3, [r5, #4]
   22c1c:	str	r3, [r5]
   22c20:	mov	r0, r4
   22c24:	str	r2, [r6]
   22c28:	pop	{r4, r5, r6, r7, r8, pc}
   22c2c:	ldr	r3, [pc, #112]	; 22ca4 <__assert_fail@plt+0x10560>
   22c30:	ldr	r6, [r3]
   22c34:	bl	12420 <gpg_err_code_from_syserror@plt>
   22c38:	mov	r2, #5
   22c3c:	ldr	r1, [pc, #104]	; 22cac <__assert_fail@plt+0x10568>
   22c40:	subs	r4, r0, #0
   22c44:	lslne	r6, r6, #24
   22c48:	andne	r6, r6, #2130706432	; 0x7f000000
   22c4c:	uxthne	r4, r4
   22c50:	mov	r0, #0
   22c54:	orrne	r4, r6, r4
   22c58:	bl	12180 <dcgettext@plt>
   22c5c:	mov	r6, r0
   22c60:	mov	r0, r4
   22c64:	bl	1260c <gpg_strerror@plt>
   22c68:	mov	r1, r0
   22c6c:	mov	r0, r6
   22c70:	bl	1e95c <__assert_fail@plt+0xc218>
   22c74:	ldr	r0, [r5]
   22c78:	bl	12708 <close@plt>
   22c7c:	ldr	r0, [r5, #4]
   22c80:	bl	12708 <close@plt>
   22c84:	mvn	r3, #0
   22c88:	str	r3, [r5, #4]
   22c8c:	str	r3, [r5]
   22c90:	b	22bc0 <__assert_fail@plt+0x1047c>
   22c94:	andeq	r8, r2, ip, asr #19
   22c98:	andeq	sl, r2, r8, rrx
   22c9c:	andeq	sl, r2, r4, ror r0
   22ca0:	andeq	r5, r2, r4, lsl #15
   22ca4:	andeq	sp, r3, r8, asr #7
   22ca8:	andeq	sl, r2, r0, lsl #1
   22cac:	muleq	r2, ip, r0
   22cb0:	push	{r4, r5, r6, lr}
   22cb4:	mov	r4, r0
   22cb8:	bl	12558 <pipe@plt>
   22cbc:	cmn	r0, #1
   22cc0:	beq	22ccc <__assert_fail@plt+0x10588>
   22cc4:	mov	r0, #0
   22cc8:	pop	{r4, r5, r6, pc}
   22ccc:	ldr	r3, [pc, #40]	; 22cfc <__assert_fail@plt+0x105b8>
   22cd0:	ldr	r5, [r3]
   22cd4:	bl	12420 <gpg_err_code_from_syserror@plt>
   22cd8:	mvn	r3, #0
   22cdc:	str	r3, [r4, #4]
   22ce0:	str	r3, [r4]
   22ce4:	cmp	r0, #0
   22ce8:	lslne	r5, r5, #24
   22cec:	andne	r5, r5, #2130706432	; 0x7f000000
   22cf0:	uxthne	r0, r0
   22cf4:	orrne	r0, r5, r0
   22cf8:	pop	{r4, r5, r6, pc}
   22cfc:	andeq	sp, r3, r8, asr #7
   22d00:	push	{r4, r5, r6, lr}
   22d04:	sub	sp, sp, #24
   22d08:	ldr	r6, [pc, #248]	; 22e08 <__assert_fail@plt+0x106c4>
   22d0c:	ldr	r0, [pc, #248]	; 22e0c <__assert_fail@plt+0x106c8>
   22d10:	ldr	r3, [r6]
   22d14:	str	r3, [sp, #20]
   22d18:	bl	122d0 <opendir@plt>
   22d1c:	subs	r5, r0, #0
   22d20:	mvnne	r4, #0
   22d24:	beq	22d9c <__assert_fail@plt+0x10658>
   22d28:	mov	r0, r5
   22d2c:	bl	125e8 <readdir64@plt>
   22d30:	cmp	r0, #0
   22d34:	beq	22d70 <__assert_fail@plt+0x1062c>
   22d38:	ldrb	r3, [r0, #19]
   22d3c:	sub	r3, r3, #48	; 0x30
   22d40:	cmp	r3, #9
   22d44:	bhi	22d28 <__assert_fail@plt+0x105e4>
   22d48:	mov	r2, #10
   22d4c:	mov	r1, #0
   22d50:	add	r0, r0, #19
   22d54:	bl	1206c <strtol@plt>
   22d58:	cmp	r4, r0
   22d5c:	movlt	r4, r0
   22d60:	mov	r0, r5
   22d64:	bl	125e8 <readdir64@plt>
   22d68:	cmp	r0, #0
   22d6c:	bne	22d38 <__assert_fail@plt+0x105f4>
   22d70:	mov	r0, r5
   22d74:	bl	1272c <closedir@plt>
   22d78:	cmn	r4, #1
   22d7c:	addne	r0, r4, #1
   22d80:	beq	22d9c <__assert_fail@plt+0x10658>
   22d84:	ldr	r2, [sp, #20]
   22d88:	ldr	r3, [r6]
   22d8c:	cmp	r2, r3
   22d90:	bne	22e04 <__assert_fail@plt+0x106c0>
   22d94:	add	sp, sp, #24
   22d98:	pop	{r4, r5, r6, pc}
   22d9c:	mov	r4, sp
   22da0:	mov	r1, r4
   22da4:	mov	r0, #7
   22da8:	bl	121d4 <getrlimit64@plt>
   22dac:	cmp	r0, #0
   22db0:	bne	22dcc <__assert_fail@plt+0x10688>
   22db4:	ldr	r0, [sp, #8]
   22db8:	cmn	r0, #1
   22dbc:	beq	22dcc <__assert_fail@plt+0x10688>
   22dc0:	cmn	r0, #-2147483647	; 0x80000001
   22dc4:	moveq	r0, #256	; 0x100
   22dc8:	b	22d84 <__assert_fail@plt+0x10640>
   22dcc:	mov	r1, r4
   22dd0:	mov	r0, #7
   22dd4:	bl	121d4 <getrlimit64@plt>
   22dd8:	cmp	r0, #0
   22ddc:	bne	22dec <__assert_fail@plt+0x106a8>
   22de0:	ldr	r0, [sp, #8]
   22de4:	cmn	r0, #1
   22de8:	bne	22dc0 <__assert_fail@plt+0x1067c>
   22dec:	mov	r0, #4
   22df0:	bl	121a4 <sysconf@plt>
   22df4:	cmp	r0, #0
   22df8:	bge	22dc0 <__assert_fail@plt+0x1067c>
   22dfc:	mov	r0, #20
   22e00:	b	22d84 <__assert_fail@plt+0x10640>
   22e04:	bl	1218c <__stack_chk_fail@plt>
   22e08:	andeq	sl, r3, r8, asr fp
   22e0c:	andeq	sl, r2, r4, asr #1
   22e10:	push	{r4, r5, r6, r7, r8, lr}
   22e14:	mov	r6, r1
   22e18:	mov	r4, r0
   22e1c:	bl	22d00 <__assert_fail@plt+0x105bc>
   22e20:	cmp	r6, #0
   22e24:	mov	r7, r0
   22e28:	beq	22e9c <__assert_fail@plt+0x10758>
   22e2c:	cmp	r0, r4
   22e30:	movgt	r5, #0
   22e34:	ble	22e84 <__assert_fail@plt+0x10740>
   22e38:	ldr	r3, [r6, r5, lsl #2]
   22e3c:	add	r2, r6, r5, lsl #2
   22e40:	cmn	r3, #1
   22e44:	beq	22e70 <__assert_fail@plt+0x1072c>
   22e48:	cmp	r3, r4
   22e4c:	movne	r0, r5
   22e50:	bne	22e60 <__assert_fail@plt+0x1071c>
   22e54:	b	22e90 <__assert_fail@plt+0x1074c>
   22e58:	cmp	r3, r4
   22e5c:	beq	22e94 <__assert_fail@plt+0x10750>
   22e60:	ldr	r3, [r2, #4]!
   22e64:	add	r0, r0, #1
   22e68:	cmn	r3, #1
   22e6c:	bne	22e58 <__assert_fail@plt+0x10714>
   22e70:	mov	r0, r4
   22e74:	bl	12708 <close@plt>
   22e78:	add	r4, r4, #1
   22e7c:	cmp	r7, r4
   22e80:	bne	22e38 <__assert_fail@plt+0x106f4>
   22e84:	mov	r0, #0
   22e88:	pop	{r4, r5, r6, r7, r8, lr}
   22e8c:	b	125dc <gpg_err_set_errno@plt>
   22e90:	mov	r0, r5
   22e94:	add	r5, r0, #1
   22e98:	b	22e78 <__assert_fail@plt+0x10734>
   22e9c:	cmp	r0, r4
   22ea0:	ble	22e84 <__assert_fail@plt+0x10740>
   22ea4:	mov	r0, r4
   22ea8:	add	r4, r4, #1
   22eac:	bl	12708 <close@plt>
   22eb0:	cmp	r7, r4
   22eb4:	bne	22ea4 <__assert_fail@plt+0x10760>
   22eb8:	mov	r0, #0
   22ebc:	pop	{r4, r5, r6, r7, r8, lr}
   22ec0:	b	125dc <gpg_err_set_errno@plt>
   22ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ec8:	sub	sp, sp, #20
   22ecc:	ldr	lr, [pc, #444]	; 23090 <__assert_fail@plt+0x1094c>
   22ed0:	mov	r8, r2
   22ed4:	ldr	ip, [sp, #56]	; 0x38
   22ed8:	ldr	r2, [lr]
   22edc:	subs	r4, r1, #0
   22ee0:	mov	r5, r0
   22ee4:	str	r8, [sp]
   22ee8:	str	r3, [sp, #4]
   22eec:	str	r2, [sp, #12]
   22ef0:	str	ip, [sp, #8]
   22ef4:	ldr	r7, [sp, #60]	; 0x3c
   22ef8:	ldr	r6, [sp, #64]	; 0x40
   22efc:	moveq	r0, r4
   22f00:	beq	22f28 <__assert_fail@plt+0x107e4>
   22f04:	ldr	r0, [r4]
   22f08:	cmp	r0, #0
   22f0c:	beq	22f28 <__assert_fail@plt+0x107e4>
   22f10:	mov	r3, r4
   22f14:	mov	r0, #0
   22f18:	ldr	r2, [r3, #4]!
   22f1c:	add	r0, r0, #1
   22f20:	cmp	r2, #0
   22f24:	bne	22f18 <__assert_fail@plt+0x107d4>
   22f28:	mov	r1, #4
   22f2c:	add	r0, r0, #2
   22f30:	bl	12690 <gcry_xcalloc@plt>
   22f34:	mov	r1, #47	; 0x2f
   22f38:	mov	r9, r0
   22f3c:	mov	r0, r5
   22f40:	bl	125c4 <strrchr@plt>
   22f44:	cmp	r0, #0
   22f48:	str	r0, [r9]
   22f4c:	beq	23044 <__assert_fail@plt+0x10900>
   22f50:	add	r0, r0, #1
   22f54:	str	r0, [r9]
   22f58:	cmp	r4, #0
   22f5c:	beq	22f84 <__assert_fail@plt+0x10840>
   22f60:	ldr	r3, [r4]
   22f64:	cmp	r3, #0
   22f68:	beq	22f84 <__assert_fail@plt+0x10840>
   22f6c:	mov	r1, r4
   22f70:	mov	r2, r9
   22f74:	str	r3, [r2, #4]!
   22f78:	ldr	r3, [r1, #4]!
   22f7c:	cmp	r3, #0
   22f80:	bne	22f74 <__assert_fail@plt+0x10830>
   22f84:	cmn	r8, #1
   22f88:	add	sl, sp, #4
   22f8c:	mov	r4, #0
   22f90:	ldr	fp, [pc, #252]	; 23094 <__assert_fail@plt+0x10950>
   22f94:	beq	22fb0 <__assert_fail@plt+0x1086c>
   22f98:	add	r4, r4, #1
   22f9c:	cmp	r4, #3
   22fa0:	beq	22fe8 <__assert_fail@plt+0x108a4>
   22fa4:	ldr	r8, [sl], #4
   22fa8:	cmn	r8, #1
   22fac:	bne	22f98 <__assert_fail@plt+0x10854>
   22fb0:	adds	r1, r4, #0
   22fb4:	movne	r1, #1
   22fb8:	mov	r0, fp
   22fbc:	bl	12438 <__open64_2@plt>
   22fc0:	cmn	r0, #1
   22fc4:	str	r0, [sl, #-4]
   22fc8:	bne	22f98 <__assert_fail@plt+0x10854>
   22fcc:	bl	1245c <__errno_location@plt>
   22fd0:	ldr	r0, [r0]
   22fd4:	bl	12330 <strerror@plt>
   22fd8:	ldr	r1, [pc, #180]	; 23094 <__assert_fail@plt+0x10950>
   22fdc:	mov	r2, r0
   22fe0:	ldr	r0, [pc, #176]	; 23098 <__assert_fail@plt+0x10954>
   22fe4:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   22fe8:	mov	r8, sp
   22fec:	mov	r4, #0
   22ff0:	ldr	r0, [r8], #4
   22ff4:	cmp	r0, r4
   22ff8:	beq	2300c <__assert_fail@plt+0x108c8>
   22ffc:	mov	r1, r4
   23000:	bl	121bc <dup2@plt>
   23004:	cmn	r0, #1
   23008:	beq	23054 <__assert_fail@plt+0x10910>
   2300c:	add	r4, r4, #1
   23010:	cmp	r4, #3
   23014:	bne	22ff0 <__assert_fail@plt+0x108ac>
   23018:	mov	r1, r7
   2301c:	mov	r0, r4
   23020:	bl	22e10 <__assert_fail@plt+0x106cc>
   23024:	cmp	r6, #0
   23028:	beq	23030 <__assert_fail@plt+0x108ec>
   2302c:	blx	r6
   23030:	mov	r1, r9
   23034:	mov	r0, r5
   23038:	bl	1242c <execv@plt>
   2303c:	mov	r0, #127	; 0x7f
   23040:	bl	12120 <_exit@plt>
   23044:	mov	r0, r5
   23048:	bl	12528 <gcry_xstrdup@plt>
   2304c:	str	r0, [r9]
   23050:	b	22f58 <__assert_fail@plt+0x10814>
   23054:	cmp	r4, #0
   23058:	ldreq	r4, [pc, #60]	; 2309c <__assert_fail@plt+0x10958>
   2305c:	beq	23074 <__assert_fail@plt+0x10930>
   23060:	ldr	r3, [pc, #56]	; 230a0 <__assert_fail@plt+0x1095c>
   23064:	ldr	r2, [pc, #56]	; 230a4 <__assert_fail@plt+0x10960>
   23068:	cmp	r4, #1
   2306c:	moveq	r4, r3
   23070:	movne	r4, r2
   23074:	bl	1245c <__errno_location@plt>
   23078:	ldr	r0, [r0]
   2307c:	bl	12330 <strerror@plt>
   23080:	mov	r1, r4
   23084:	mov	r2, r0
   23088:	ldr	r0, [pc, #24]	; 230a8 <__assert_fail@plt+0x10964>
   2308c:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   23090:	andeq	sl, r3, r8, asr fp
   23094:	andeq	r9, r2, r4, asr #18
   23098:	ldrdeq	sl, [r2], -r8
   2309c:	andeq	r8, r2, ip, lsr #4
   230a0:	andeq	r7, r2, ip, asr sl
   230a4:	ldrdeq	sl, [r2], -r4
   230a8:	strdeq	sl, [r2], -r4
   230ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230b0:	sub	sp, sp, #116	; 0x74
   230b4:	ldr	sl, [pc, #248]	; 231b4 <__assert_fail@plt+0x10a70>
   230b8:	ldr	r3, [sl]
   230bc:	str	r3, [sp, #108]	; 0x6c
   230c0:	bl	22d00 <__assert_fail@plt+0x105bc>
   230c4:	mov	r1, #4
   230c8:	mov	r9, r0
   230cc:	mov	r0, #32
   230d0:	bl	11fdc <calloc@plt>
   230d4:	subs	r8, r0, #0
   230d8:	beq	2317c <__assert_fail@plt+0x10a38>
   230dc:	cmp	r9, #0
   230e0:	ble	231a8 <__assert_fail@plt+0x10a64>
   230e4:	mov	r5, #0
   230e8:	mov	r4, r5
   230ec:	mov	r6, #32
   230f0:	b	2313c <__assert_fail@plt+0x109f8>
   230f4:	add	r7, r5, #1
   230f8:	cmp	r7, r6
   230fc:	bcc	23128 <__assert_fail@plt+0x109e4>
   23100:	cmp	r6, #256	; 0x100
   23104:	movcc	r3, #32
   23108:	movcs	r3, #256	; 0x100
   2310c:	add	r6, r6, r3
   23110:	mov	r0, r8
   23114:	lsl	r1, r6, #2
   23118:	bl	121e0 <realloc@plt>
   2311c:	subs	fp, r0, #0
   23120:	beq	23198 <__assert_fail@plt+0x10a54>
   23124:	mov	r8, fp
   23128:	str	r4, [r8, r5, lsl #2]
   2312c:	add	r4, r4, #1
   23130:	cmp	r9, r4
   23134:	mov	r5, r7
   23138:	beq	23170 <__assert_fail@plt+0x10a2c>
   2313c:	mov	r2, sp
   23140:	mov	r1, r4
   23144:	mov	r0, #3
   23148:	bl	12240 <__fxstat64@plt>
   2314c:	cmn	r0, #1
   23150:	bne	230f4 <__assert_fail@plt+0x109b0>
   23154:	bl	1245c <__errno_location@plt>
   23158:	ldr	r3, [r0]
   2315c:	cmp	r3, #9
   23160:	bne	230f4 <__assert_fail@plt+0x109b0>
   23164:	add	r4, r4, #1
   23168:	cmp	r9, r4
   2316c:	bne	2313c <__assert_fail@plt+0x109f8>
   23170:	add	r5, r8, r5, lsl #2
   23174:	mvn	r3, #0
   23178:	str	r3, [r5]
   2317c:	ldr	r2, [sp, #108]	; 0x6c
   23180:	ldr	r3, [sl]
   23184:	mov	r0, r8
   23188:	cmp	r2, r3
   2318c:	bne	231b0 <__assert_fail@plt+0x10a6c>
   23190:	add	sp, sp, #116	; 0x74
   23194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23198:	mov	r0, r8
   2319c:	bl	120e4 <free@plt>
   231a0:	mov	r8, fp
   231a4:	b	2317c <__assert_fail@plt+0x10a38>
   231a8:	mov	r5, r8
   231ac:	b	23174 <__assert_fail@plt+0x10a30>
   231b0:	bl	1218c <__stack_chk_fail@plt>
   231b4:	andeq	sl, r3, r8, asr fp
   231b8:	cmp	r1, #0
   231bc:	beq	231cc <__assert_fail@plt+0x10a88>
   231c0:	mov	r3, r2
   231c4:	mov	r2, #0
   231c8:	b	22b68 <__assert_fail@plt+0x10424>
   231cc:	b	22cb0 <__assert_fail@plt+0x1056c>
   231d0:	cmp	r1, #0
   231d4:	beq	231e4 <__assert_fail@plt+0x10aa0>
   231d8:	mov	r3, r2
   231dc:	mov	r2, #1
   231e0:	b	22b68 <__assert_fail@plt+0x10424>
   231e4:	b	22cb0 <__assert_fail@plt+0x1056c>
   231e8:	b	22cb0 <__assert_fail@plt+0x1056c>
   231ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231f0:	sub	sp, sp, #76	; 0x4c
   231f4:	ldr	sl, [pc, #976]	; 235cc <__assert_fail@plt+0x10e88>
   231f8:	ldr	ip, [pc, #976]	; 235d0 <__assert_fail@plt+0x10e8c>
   231fc:	ldr	r5, [sp, #116]	; 0x74
   23200:	ldr	r6, [sl]
   23204:	cmp	r5, #0
   23208:	str	r6, [sp, #68]	; 0x44
   2320c:	ldrd	r6, [sp, #120]	; 0x78
   23210:	strd	r0, [sp, #16]
   23214:	ldm	ip, {r0, r1}
   23218:	mov	ip, #0
   2321c:	strne	ip, [r5]
   23220:	cmp	r6, #0
   23224:	strd	r2, [sp, #24]
   23228:	ldr	r4, [sp, #112]	; 0x70
   2322c:	movne	r3, #0
   23230:	strne	r3, [r6]
   23234:	ldr	fp, [sp, #128]	; 0x80
   23238:	cmp	r7, #0
   2323c:	movne	r3, #0
   23240:	add	lr, sp, #44	; 0x2c
   23244:	add	r9, sp, #52	; 0x34
   23248:	add	r8, sp, #60	; 0x3c
   2324c:	strne	r3, [r7]
   23250:	lsr	r4, r4, #4
   23254:	mvn	r3, #0
   23258:	cmp	r5, #0
   2325c:	stm	lr, {r0, r1}
   23260:	stm	r9, {r0, r1}
   23264:	stm	r8, {r0, r1}
   23268:	and	r4, r4, #1
   2326c:	str	ip, [sp, #32]
   23270:	str	ip, [sp, #36]	; 0x24
   23274:	str	ip, [sp, #40]	; 0x28
   23278:	str	r3, [fp]
   2327c:	beq	2329c <__assert_fail@plt+0x10b58>
   23280:	mov	r3, r4
   23284:	mov	r0, lr
   23288:	mov	r2, #1
   2328c:	add	r1, sp, #32
   23290:	bl	22b68 <__assert_fail@plt+0x10424>
   23294:	subs	r3, r0, #0
   23298:	bne	23358 <__assert_fail@plt+0x10c14>
   2329c:	cmp	r6, #0
   232a0:	beq	232c0 <__assert_fail@plt+0x10b7c>
   232a4:	mov	r3, r4
   232a8:	mov	r0, r9
   232ac:	mov	r2, #0
   232b0:	add	r1, sp, #36	; 0x24
   232b4:	bl	22b68 <__assert_fail@plt+0x10424>
   232b8:	subs	r3, r0, #0
   232bc:	bne	233d8 <__assert_fail@plt+0x10c94>
   232c0:	cmp	r7, #0
   232c4:	beq	232e4 <__assert_fail@plt+0x10ba0>
   232c8:	mov	r3, r4
   232cc:	mov	r0, r8
   232d0:	mov	r2, #0
   232d4:	add	r1, sp, #40	; 0x28
   232d8:	bl	22b68 <__assert_fail@plt+0x10424>
   232dc:	subs	r3, r0, #0
   232e0:	bne	23374 <__assert_fail@plt+0x10c30>
   232e4:	bl	125a0 <fork@plt>
   232e8:	cmn	r0, #1
   232ec:	str	r0, [fp]
   232f0:	beq	23400 <__assert_fail@plt+0x10cbc>
   232f4:	cmp	r0, #0
   232f8:	beq	23584 <__assert_fail@plt+0x10e40>
   232fc:	ldr	r0, [sp, #44]	; 0x2c
   23300:	cmn	r0, #1
   23304:	beq	2330c <__assert_fail@plt+0x10bc8>
   23308:	bl	12708 <close@plt>
   2330c:	ldr	r0, [sp, #56]	; 0x38
   23310:	cmn	r0, #1
   23314:	beq	2331c <__assert_fail@plt+0x10bd8>
   23318:	bl	12708 <close@plt>
   2331c:	ldr	r0, [sp, #64]	; 0x40
   23320:	cmn	r0, #1
   23324:	beq	2332c <__assert_fail@plt+0x10be8>
   23328:	bl	12708 <close@plt>
   2332c:	cmp	r5, #0
   23330:	ldrne	r3, [sp, #32]
   23334:	strne	r3, [r5]
   23338:	cmp	r6, #0
   2333c:	ldrne	r3, [sp, #36]	; 0x24
   23340:	strne	r3, [r6]
   23344:	cmp	r7, #0
   23348:	movne	r3, #0
   2334c:	ldrne	r2, [sp, #40]	; 0x28
   23350:	moveq	r3, r7
   23354:	strne	r2, [r7]
   23358:	ldr	r1, [sp, #68]	; 0x44
   2335c:	ldr	r2, [sl]
   23360:	mov	r0, r3
   23364:	cmp	r1, r2
   23368:	bne	23580 <__assert_fail@plt+0x10e3c>
   2336c:	add	sp, sp, #76	; 0x4c
   23370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23374:	ldr	r0, [sp, #32]
   23378:	cmp	r0, #0
   2337c:	beq	234d8 <__assert_fail@plt+0x10d94>
   23380:	str	r3, [sp, #16]
   23384:	bl	122b8 <gpgrt_fclose@plt>
   23388:	ldr	r3, [sp, #16]
   2338c:	ldr	r0, [sp, #44]	; 0x2c
   23390:	cmn	r0, #1
   23394:	beq	233a4 <__assert_fail@plt+0x10c60>
   23398:	str	r3, [sp, #16]
   2339c:	bl	12708 <close@plt>
   233a0:	ldr	r3, [sp, #16]
   233a4:	ldr	r0, [sp, #36]	; 0x24
   233a8:	cmp	r0, #0
   233ac:	beq	234f4 <__assert_fail@plt+0x10db0>
   233b0:	str	r3, [sp, #16]
   233b4:	bl	122b8 <gpgrt_fclose@plt>
   233b8:	ldr	r3, [sp, #16]
   233bc:	ldr	r0, [sp, #56]	; 0x38
   233c0:	cmn	r0, #1
   233c4:	beq	23358 <__assert_fail@plt+0x10c14>
   233c8:	str	r3, [sp, #16]
   233cc:	bl	12708 <close@plt>
   233d0:	ldr	r3, [sp, #16]
   233d4:	b	23358 <__assert_fail@plt+0x10c14>
   233d8:	ldr	r0, [sp, #32]
   233dc:	cmp	r0, #0
   233e0:	beq	23510 <__assert_fail@plt+0x10dcc>
   233e4:	str	r3, [sp, #16]
   233e8:	bl	122b8 <gpgrt_fclose@plt>
   233ec:	ldr	r3, [sp, #16]
   233f0:	ldr	r0, [sp, #44]	; 0x2c
   233f4:	cmn	r0, #1
   233f8:	beq	23358 <__assert_fail@plt+0x10c14>
   233fc:	b	233c8 <__assert_fail@plt+0x10c84>
   23400:	ldr	r3, [pc, #460]	; 235d4 <__assert_fail@plt+0x10e90>
   23404:	ldr	r4, [r3]
   23408:	bl	12420 <gpg_err_code_from_syserror@plt>
   2340c:	mov	r2, #5
   23410:	ldr	r1, [pc, #448]	; 235d8 <__assert_fail@plt+0x10e94>
   23414:	subs	r3, r0, #0
   23418:	lslne	r4, r4, #24
   2341c:	uxthne	r3, r3
   23420:	andne	r4, r4, #2130706432	; 0x7f000000
   23424:	orrne	r3, r4, r3
   23428:	mov	r0, #0
   2342c:	str	r3, [sp, #16]
   23430:	bl	12180 <dcgettext@plt>
   23434:	ldr	r3, [sp, #16]
   23438:	mov	r4, r0
   2343c:	mov	r0, r3
   23440:	bl	1260c <gpg_strerror@plt>
   23444:	mov	r1, r0
   23448:	mov	r0, r4
   2344c:	bl	1e95c <__assert_fail@plt+0xc218>
   23450:	ldr	r0, [sp, #32]
   23454:	ldr	r3, [sp, #16]
   23458:	cmp	r0, #0
   2345c:	beq	2352c <__assert_fail@plt+0x10de8>
   23460:	bl	122b8 <gpgrt_fclose@plt>
   23464:	ldr	r3, [sp, #16]
   23468:	ldr	r0, [sp, #44]	; 0x2c
   2346c:	cmn	r0, #1
   23470:	beq	23480 <__assert_fail@plt+0x10d3c>
   23474:	str	r3, [sp, #16]
   23478:	bl	12708 <close@plt>
   2347c:	ldr	r3, [sp, #16]
   23480:	ldr	r0, [sp, #36]	; 0x24
   23484:	cmp	r0, #0
   23488:	beq	23548 <__assert_fail@plt+0x10e04>
   2348c:	str	r3, [sp, #16]
   23490:	bl	122b8 <gpgrt_fclose@plt>
   23494:	ldr	r3, [sp, #16]
   23498:	ldr	r0, [sp, #56]	; 0x38
   2349c:	cmn	r0, #1
   234a0:	beq	234b0 <__assert_fail@plt+0x10d6c>
   234a4:	str	r3, [sp, #16]
   234a8:	bl	12708 <close@plt>
   234ac:	ldr	r3, [sp, #16]
   234b0:	ldr	r0, [sp, #40]	; 0x28
   234b4:	cmp	r0, #0
   234b8:	beq	23564 <__assert_fail@plt+0x10e20>
   234bc:	str	r3, [sp, #16]
   234c0:	bl	122b8 <gpgrt_fclose@plt>
   234c4:	ldr	r3, [sp, #16]
   234c8:	ldr	r0, [sp, #64]	; 0x40
   234cc:	cmn	r0, #1
   234d0:	beq	23358 <__assert_fail@plt+0x10c14>
   234d4:	b	233c8 <__assert_fail@plt+0x10c84>
   234d8:	ldr	r0, [sp, #48]	; 0x30
   234dc:	cmn	r0, #1
   234e0:	beq	2338c <__assert_fail@plt+0x10c48>
   234e4:	str	r3, [sp, #16]
   234e8:	bl	12708 <close@plt>
   234ec:	ldr	r3, [sp, #16]
   234f0:	b	2338c <__assert_fail@plt+0x10c48>
   234f4:	ldr	r0, [sp, #52]	; 0x34
   234f8:	cmn	r0, #1
   234fc:	beq	233bc <__assert_fail@plt+0x10c78>
   23500:	str	r3, [sp, #16]
   23504:	bl	12708 <close@plt>
   23508:	ldr	r3, [sp, #16]
   2350c:	b	233bc <__assert_fail@plt+0x10c78>
   23510:	ldr	r0, [sp, #48]	; 0x30
   23514:	cmn	r0, #1
   23518:	beq	233f0 <__assert_fail@plt+0x10cac>
   2351c:	str	r3, [sp, #16]
   23520:	bl	12708 <close@plt>
   23524:	ldr	r3, [sp, #16]
   23528:	b	233f0 <__assert_fail@plt+0x10cac>
   2352c:	ldr	r0, [sp, #48]	; 0x30
   23530:	cmn	r0, #1
   23534:	beq	23468 <__assert_fail@plt+0x10d24>
   23538:	str	r3, [sp, #16]
   2353c:	bl	12708 <close@plt>
   23540:	ldr	r3, [sp, #16]
   23544:	b	23468 <__assert_fail@plt+0x10d24>
   23548:	ldr	r0, [sp, #52]	; 0x34
   2354c:	cmn	r0, #1
   23550:	beq	23498 <__assert_fail@plt+0x10d54>
   23554:	str	r3, [sp, #16]
   23558:	bl	12708 <close@plt>
   2355c:	ldr	r3, [sp, #16]
   23560:	b	23498 <__assert_fail@plt+0x10d54>
   23564:	ldr	r0, [sp, #60]	; 0x3c
   23568:	cmn	r0, #1
   2356c:	beq	234c8 <__assert_fail@plt+0x10d84>
   23570:	str	r3, [sp, #16]
   23574:	bl	12708 <close@plt>
   23578:	ldr	r3, [sp, #16]
   2357c:	b	234c8 <__assert_fail@plt+0x10d84>
   23580:	bl	1218c <__stack_chk_fail@plt>
   23584:	mov	r0, #25
   23588:	bl	12654 <gcry_control@plt>
   2358c:	ldr	r0, [sp, #32]
   23590:	bl	122b8 <gpgrt_fclose@plt>
   23594:	ldr	r0, [sp, #36]	; 0x24
   23598:	bl	122b8 <gpgrt_fclose@plt>
   2359c:	ldr	r0, [sp, #40]	; 0x28
   235a0:	bl	122b8 <gpgrt_fclose@plt>
   235a4:	ldr	r2, [sp, #28]
   235a8:	ldr	r3, [sp, #64]	; 0x40
   235ac:	str	r2, [sp, #8]
   235b0:	ldr	r2, [sp, #24]
   235b4:	str	r3, [sp]
   235b8:	str	r2, [sp, #4]
   235bc:	ldrd	r0, [sp, #16]
   235c0:	ldr	r3, [sp, #56]	; 0x38
   235c4:	ldr	r2, [sp, #44]	; 0x2c
   235c8:	bl	22ec4 <__assert_fail@plt+0x10780>
   235cc:	andeq	sl, r3, r8, asr fp
   235d0:	andeq	sl, r2, r0, rrx
   235d4:	andeq	sp, r3, r8, asr #7
   235d8:	andeq	sl, r2, ip, lsl #2
   235dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   235e0:	sub	sp, sp, #20
   235e4:	mov	r6, r0
   235e8:	ldr	r5, [sp, #52]	; 0x34
   235ec:	mov	r7, r1
   235f0:	mov	r8, r2
   235f4:	mov	r9, r3
   235f8:	bl	125a0 <fork@plt>
   235fc:	cmn	r0, #1
   23600:	str	r0, [r5]
   23604:	beq	23624 <__assert_fail@plt+0x10ee0>
   23608:	cmp	r0, #0
   2360c:	mov	r4, r0
   23610:	movne	r4, #0
   23614:	beq	2367c <__assert_fail@plt+0x10f38>
   23618:	mov	r0, r4
   2361c:	add	sp, sp, #20
   23620:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23624:	ldr	r3, [pc, #124]	; 236a8 <__assert_fail@plt+0x10f64>
   23628:	ldr	r5, [r3]
   2362c:	bl	12420 <gpg_err_code_from_syserror@plt>
   23630:	mov	r2, #5
   23634:	ldr	r1, [pc, #112]	; 236ac <__assert_fail@plt+0x10f68>
   23638:	subs	r4, r0, #0
   2363c:	lslne	r5, r5, #24
   23640:	andne	r5, r5, #2130706432	; 0x7f000000
   23644:	uxthne	r4, r4
   23648:	mov	r0, #0
   2364c:	orrne	r4, r5, r4
   23650:	bl	12180 <dcgettext@plt>
   23654:	mov	r5, r0
   23658:	bl	1245c <__errno_location@plt>
   2365c:	ldr	r0, [r0]
   23660:	bl	12330 <strerror@plt>
   23664:	mov	r1, r0
   23668:	mov	r0, r5
   2366c:	bl	1e95c <__assert_fail@plt+0xc218>
   23670:	mov	r0, r4
   23674:	add	sp, sp, #20
   23678:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2367c:	mov	r0, #25
   23680:	bl	12654 <gcry_control@plt>
   23684:	ldr	r3, [sp, #48]	; 0x30
   23688:	str	r4, [sp, #8]
   2368c:	str	r3, [sp]
   23690:	str	r4, [sp, #4]
   23694:	mov	r3, r9
   23698:	mov	r2, r8
   2369c:	mov	r1, r7
   236a0:	mov	r0, r6
   236a4:	bl	22ec4 <__assert_fail@plt+0x10780>
   236a8:	andeq	sp, r3, r8, asr #7
   236ac:	andeq	sl, r2, ip, lsl #2
   236b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   236b4:	subs	r8, r3, #0
   236b8:	ldr	r7, [pc, #376]	; 23838 <__assert_fail@plt+0x110f4>
   236bc:	sub	sp, sp, #12
   236c0:	mov	r9, r0
   236c4:	ldr	r3, [r7]
   236c8:	mov	r6, r1
   236cc:	str	r3, [sp, #4]
   236d0:	mvnne	r3, #0
   236d4:	strne	r3, [r8]
   236d8:	cmn	r1, #1
   236dc:	beq	2380c <__assert_fail@plt+0x110c8>
   236e0:	clz	r5, r2
   236e4:	lsr	r5, r5, #5
   236e8:	b	23700 <__assert_fail@plt+0x10fbc>
   236ec:	bl	1245c <__errno_location@plt>
   236f0:	mov	r4, r0
   236f4:	ldr	r0, [r0]
   236f8:	cmp	r0, #4
   236fc:	bne	237b4 <__assert_fail@plt+0x11070>
   23700:	mov	r2, r5
   23704:	mov	r1, sp
   23708:	mov	r0, r6
   2370c:	bl	1227c <waitpid@plt>
   23710:	cmn	r0, #1
   23714:	beq	236ec <__assert_fail@plt+0x10fa8>
   23718:	cmp	r0, #0
   2371c:	moveq	r0, #62	; 0x3e
   23720:	bne	2373c <__assert_fail@plt+0x10ff8>
   23724:	ldr	r2, [sp, #4]
   23728:	ldr	r3, [r7]
   2372c:	cmp	r2, r3
   23730:	bne	23834 <__assert_fail@plt+0x110f0>
   23734:	add	sp, sp, #12
   23738:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2373c:	ldr	r3, [sp]
   23740:	ands	r2, r3, #127	; 0x7f
   23744:	bne	23794 <__assert_fail@plt+0x11050>
   23748:	asr	r3, r3, #8
   2374c:	uxtb	r0, r3
   23750:	cmp	r0, #127	; 0x7f
   23754:	beq	23814 <__assert_fail@plt+0x110d0>
   23758:	cmp	r0, #0
   2375c:	beq	237fc <__assert_fail@plt+0x110b8>
   23760:	cmp	r8, #0
   23764:	strne	r0, [r8]
   23768:	movne	r0, #1
   2376c:	bne	23724 <__assert_fail@plt+0x10fe0>
   23770:	mov	r2, #5
   23774:	ldr	r1, [pc, #192]	; 2383c <__assert_fail@plt+0x110f8>
   23778:	mov	r0, r8
   2377c:	bl	12180 <dcgettext@plt>
   23780:	mov	r1, r9
   23784:	ldrb	r2, [sp, #1]
   23788:	bl	1e95c <__assert_fail@plt+0xc218>
   2378c:	mov	r0, #1
   23790:	b	23724 <__assert_fail@plt+0x10fe0>
   23794:	mov	r2, #5
   23798:	ldr	r1, [pc, #160]	; 23840 <__assert_fail@plt+0x110fc>
   2379c:	mov	r0, #0
   237a0:	bl	12180 <dcgettext@plt>
   237a4:	mov	r1, r9
   237a8:	bl	1e95c <__assert_fail@plt+0xc218>
   237ac:	mov	r0, #1
   237b0:	b	23724 <__assert_fail@plt+0x10fe0>
   237b4:	bl	12258 <gpg_err_code_from_errno@plt>
   237b8:	mov	r2, #5
   237bc:	ldr	r1, [pc, #128]	; 23844 <__assert_fail@plt+0x11100>
   237c0:	mov	r5, r0
   237c4:	mov	r0, #0
   237c8:	bl	12180 <dcgettext@plt>
   237cc:	mov	r8, r0
   237d0:	ldr	r0, [r4]
   237d4:	bl	12330 <strerror@plt>
   237d8:	mov	r1, r6
   237dc:	mov	r2, r0
   237e0:	mov	r0, r8
   237e4:	bl	1e95c <__assert_fail@plt+0xc218>
   237e8:	cmp	r5, #0
   237ec:	uxthne	r0, r5
   237f0:	bne	23724 <__assert_fail@plt+0x10fe0>
   237f4:	mov	r0, #0
   237f8:	b	23724 <__assert_fail@plt+0x10fe0>
   237fc:	cmp	r8, #0
   23800:	strne	r0, [r8]
   23804:	bne	23724 <__assert_fail@plt+0x10fe0>
   23808:	b	237f4 <__assert_fail@plt+0x110b0>
   2380c:	mov	r0, #55	; 0x37
   23810:	b	23724 <__assert_fail@plt+0x10fe0>
   23814:	mov	r0, r2
   23818:	ldr	r1, [pc, #40]	; 23848 <__assert_fail@plt+0x11104>
   2381c:	mov	r2, #5
   23820:	bl	12180 <dcgettext@plt>
   23824:	mov	r1, r9
   23828:	bl	1e95c <__assert_fail@plt+0xc218>
   2382c:	mov	r0, #115	; 0x73
   23830:	b	23724 <__assert_fail@plt+0x10fe0>
   23834:	bl	1218c <__stack_chk_fail@plt>
   23838:	andeq	sl, r3, r8, asr fp
   2383c:	andeq	sl, r2, r4, asr r1
   23840:	andeq	sl, r2, r8, ror r1
   23844:	muleq	r2, r8, r1
   23848:	andeq	sl, r2, r8, lsr #2
   2384c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23850:	sub	sp, sp, #36	; 0x24
   23854:	mov	sl, r1
   23858:	str	r0, [sp, #16]
   2385c:	ldr	r0, [pc, #896]	; 23be4 <__assert_fail@plt+0x114a0>
   23860:	ldr	ip, [sp, #72]	; 0x48
   23864:	str	r3, [sp, #12]
   23868:	cmp	ip, #0
   2386c:	ldr	r0, [r0]
   23870:	movne	r3, #0
   23874:	str	ip, [sp, #4]
   23878:	mov	r7, r2
   2387c:	str	r0, [sp, #28]
   23880:	strne	r3, [sp, #8]
   23884:	beq	23b7c <__assert_fail@plt+0x11438>
   23888:	cmp	r7, #0
   2388c:	beq	23ba8 <__assert_fail@plt+0x11464>
   23890:	ldr	ip, [sl]
   23894:	cmn	ip, #1
   23898:	beq	23b3c <__assert_fail@plt+0x113f8>
   2389c:	ldr	r3, [sp, #4]
   238a0:	ldr	r9, [pc, #832]	; 23be8 <__assert_fail@plt+0x114a4>
   238a4:	sub	r3, r3, #4
   238a8:	mov	r6, r3
   238ac:	mov	r4, sl
   238b0:	mov	r8, r7
   238b4:	mov	r5, #0
   238b8:	str	r3, [sp, #20]
   238bc:	ldr	r2, [r9]
   238c0:	cmp	r2, #0
   238c4:	beq	238f4 <__assert_fail@plt+0x111b0>
   238c8:	ldr	r3, [r2]
   238cc:	cmp	r3, ip
   238d0:	bne	238e8 <__assert_fail@plt+0x111a4>
   238d4:	b	23b54 <__assert_fail@plt+0x11410>
   238d8:	ldr	r1, [r3]
   238dc:	cmp	r1, ip
   238e0:	beq	2391c <__assert_fail@plt+0x111d8>
   238e4:	mov	r2, r3
   238e8:	ldr	r3, [r2, #8]
   238ec:	cmp	r3, #0
   238f0:	bne	238d8 <__assert_fail@plt+0x11194>
   238f4:	add	r3, r5, #1
   238f8:	mvn	fp, #0
   238fc:	cmp	r7, r3
   23900:	str	fp, [r6, #4]!
   23904:	beq	23948 <__assert_fail@plt+0x11204>
   23908:	ldr	ip, [r4, #4]!
   2390c:	cmn	ip, #1
   23910:	beq	23b3c <__assert_fail@plt+0x113f8>
   23914:	mov	r5, r3
   23918:	b	238bc <__assert_fail@plt+0x11178>
   2391c:	add	r2, r2, #8
   23920:	ldr	r1, [r3, #8]
   23924:	mov	r0, r3
   23928:	str	r1, [r2]
   2392c:	ldr	fp, [r3, #4]
   23930:	bl	12150 <gcry_free@plt>
   23934:	add	r3, r5, #1
   23938:	cmp	r7, r3
   2393c:	sub	r8, r8, #1
   23940:	str	fp, [r6, #4]!
   23944:	bne	23908 <__assert_fail@plt+0x111c4>
   23948:	cmp	r8, #0
   2394c:	beq	23b34 <__assert_fail@plt+0x113f0>
   23950:	ldr	r3, [sp, #12]
   23954:	clz	r6, r3
   23958:	lsr	r6, r6, #5
   2395c:	b	23970 <__assert_fail@plt+0x1122c>
   23960:	bl	1245c <__errno_location@plt>
   23964:	ldr	r3, [r0]
   23968:	cmp	r3, #4
   2396c:	bne	239f0 <__assert_fail@plt+0x112ac>
   23970:	mov	r2, r6
   23974:	add	r1, sp, #24
   23978:	mvn	r0, #0
   2397c:	bl	1227c <waitpid@plt>
   23980:	cmn	r0, #1
   23984:	mov	r4, r0
   23988:	beq	23960 <__assert_fail@plt+0x1121c>
   2398c:	cmp	r0, #0
   23990:	beq	23bb0 <__assert_fail@plt+0x1146c>
   23994:	ldr	r3, [sl]
   23998:	cmp	r0, r3
   2399c:	beq	23ba0 <__assert_fail@plt+0x1145c>
   239a0:	mov	r2, sl
   239a4:	mov	r3, #0
   239a8:	b	239bc <__assert_fail@plt+0x11278>
   239ac:	ldr	r1, [r2, #4]!
   239b0:	lsl	r0, r3, #2
   239b4:	cmp	r1, r4
   239b8:	beq	23b10 <__assert_fail@plt+0x113cc>
   239bc:	cmp	r5, r3
   239c0:	add	r3, r3, #1
   239c4:	bne	239ac <__assert_fail@plt+0x11268>
   239c8:	mov	r0, #12
   239cc:	ldr	fp, [sp, #24]
   239d0:	bl	1200c <gcry_malloc@plt>
   239d4:	cmp	r0, #0
   239d8:	beq	23bb8 <__assert_fail@plt+0x11474>
   239dc:	ldr	r3, [r9]
   239e0:	stm	r0, {r4, fp}
   239e4:	str	r3, [r0, #8]
   239e8:	str	r0, [r9]
   239ec:	b	23970 <__assert_fail@plt+0x1122c>
   239f0:	mov	r4, r0
   239f4:	mov	r0, r3
   239f8:	bl	12258 <gpg_err_code_from_errno@plt>
   239fc:	mov	r2, #5
   23a00:	ldr	r1, [pc, #484]	; 23bec <__assert_fail@plt+0x114a8>
   23a04:	str	r0, [sp, #12]
   23a08:	mov	r0, #0
   23a0c:	bl	12180 <dcgettext@plt>
   23a10:	mov	r5, r0
   23a14:	ldr	r0, [r4]
   23a18:	bl	12330 <strerror@plt>
   23a1c:	mov	r1, r0
   23a20:	mov	r0, r5
   23a24:	bl	1e95c <__assert_fail@plt+0xc218>
   23a28:	ldr	r3, [sp, #12]
   23a2c:	ldr	r2, [sp, #4]
   23a30:	ldr	r4, [pc, #440]	; 23bf0 <__assert_fail@plt+0x114ac>
   23a34:	add	r7, r2, r7, lsl #2
   23a38:	ldr	r5, [pc, #436]	; 23bf4 <__assert_fail@plt+0x114b0>
   23a3c:	ldr	r6, [pc, #436]	; 23bf8 <__assert_fail@plt+0x114b4>
   23a40:	sub	r7, r7, #4
   23a44:	ldr	r8, [sp, #20]
   23a48:	ldr	r9, [sp, #16]
   23a4c:	b	23a78 <__assert_fail@plt+0x11334>
   23a50:	mov	r2, #5
   23a54:	mov	r1, r4
   23a58:	mov	r0, #0
   23a5c:	bl	12180 <dcgettext@plt>
   23a60:	ldr	r1, [r9]
   23a64:	bl	1e95c <__assert_fail@plt+0xc218>
   23a68:	mov	r3, #1
   23a6c:	cmp	r8, r7
   23a70:	add	r9, r9, #4
   23a74:	beq	23ae0 <__assert_fail@plt+0x1139c>
   23a78:	ldr	r2, [r8, #4]!
   23a7c:	cmn	r2, #1
   23a80:	beq	23a6c <__assert_fail@plt+0x11328>
   23a84:	ands	r0, r2, #127	; 0x7f
   23a88:	bne	23a50 <__assert_fail@plt+0x1130c>
   23a8c:	asr	r2, r2, #8
   23a90:	uxtb	r2, r2
   23a94:	cmp	r2, #127	; 0x7f
   23a98:	beq	23b60 <__assert_fail@plt+0x1141c>
   23a9c:	cmp	r2, #0
   23aa0:	beq	23a6c <__assert_fail@plt+0x11328>
   23aa4:	ldr	r3, [sp, #8]
   23aa8:	cmp	r3, #0
   23aac:	streq	r2, [r8]
   23ab0:	moveq	r3, #1
   23ab4:	beq	23a6c <__assert_fail@plt+0x11328>
   23ab8:	mov	r2, #5
   23abc:	mov	r1, r5
   23ac0:	bl	12180 <dcgettext@plt>
   23ac4:	ldr	r1, [r9]
   23ac8:	ldrb	r2, [r8, #1]
   23acc:	bl	1e95c <__assert_fail@plt+0xc218>
   23ad0:	cmp	r8, r7
   23ad4:	mov	r3, #1
   23ad8:	add	r9, r9, #4
   23adc:	bne	23a78 <__assert_fail@plt+0x11334>
   23ae0:	ldr	r0, [sp, #8]
   23ae4:	str	r3, [sp, #4]
   23ae8:	bl	12150 <gcry_free@plt>
   23aec:	ldr	r3, [sp, #4]
   23af0:	uxth	r0, r3
   23af4:	ldr	r3, [pc, #232]	; 23be4 <__assert_fail@plt+0x114a0>
   23af8:	ldr	r2, [sp, #28]
   23afc:	ldr	r3, [r3]
   23b00:	cmp	r2, r3
   23b04:	bne	23be0 <__assert_fail@plt+0x1149c>
   23b08:	add	sp, sp, #36	; 0x24
   23b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b10:	ldr	r3, [sp, #4]
   23b14:	add	r0, r3, r0
   23b18:	ldr	r3, [r0]
   23b1c:	cmn	r3, #1
   23b20:	bne	23bcc <__assert_fail@plt+0x11488>
   23b24:	ldr	r3, [sp, #24]
   23b28:	subs	r8, r8, #1
   23b2c:	str	r3, [r0]
   23b30:	bne	23970 <__assert_fail@plt+0x1122c>
   23b34:	mov	r3, #0
   23b38:	b	23a2c <__assert_fail@plt+0x112e8>
   23b3c:	ldr	r3, [pc, #184]	; 23bfc <__assert_fail@plt+0x114b8>
   23b40:	ldr	r3, [r3]
   23b44:	lsl	r3, r3, #24
   23b48:	and	r3, r3, #2130706432	; 0x7f000000
   23b4c:	orr	r0, r3, #55	; 0x37
   23b50:	b	23af4 <__assert_fail@plt+0x113b0>
   23b54:	mov	r3, r2
   23b58:	ldr	r2, [pc, #136]	; 23be8 <__assert_fail@plt+0x114a4>
   23b5c:	b	23920 <__assert_fail@plt+0x111dc>
   23b60:	mov	r2, #5
   23b64:	mov	r1, r6
   23b68:	bl	12180 <dcgettext@plt>
   23b6c:	ldr	r1, [r9]
   23b70:	bl	1e95c <__assert_fail@plt+0xc218>
   23b74:	mov	r3, #115	; 0x73
   23b78:	b	23a6c <__assert_fail@plt+0x11328>
   23b7c:	lsl	r0, r2, #2
   23b80:	bl	1200c <gcry_malloc@plt>
   23b84:	subs	r3, r0, #0
   23b88:	str	r3, [sp, #4]
   23b8c:	ldrne	r3, [sp, #4]
   23b90:	strne	r3, [sp, #8]
   23b94:	bne	23888 <__assert_fail@plt+0x11144>
   23b98:	bl	12420 <gpg_err_code_from_syserror@plt>
   23b9c:	b	23af4 <__assert_fail@plt+0x113b0>
   23ba0:	ldr	r0, [sp, #4]
   23ba4:	b	23b18 <__assert_fail@plt+0x113d4>
   23ba8:	mov	r3, r7
   23bac:	b	23ae0 <__assert_fail@plt+0x1139c>
   23bb0:	mov	r3, #62	; 0x3e
   23bb4:	b	23a2c <__assert_fail@plt+0x112e8>
   23bb8:	bl	12420 <gpg_err_code_from_syserror@plt>
   23bbc:	cmp	r0, #0
   23bc0:	beq	23970 <__assert_fail@plt+0x1122c>
   23bc4:	mov	r3, r0
   23bc8:	b	23a2c <__assert_fail@plt+0x112e8>
   23bcc:	mov	r1, r4
   23bd0:	ldr	r0, [pc, #40]	; 23c00 <__assert_fail@plt+0x114bc>
   23bd4:	bl	1e95c <__assert_fail@plt+0xc218>
   23bd8:	mov	r3, #1
   23bdc:	b	23a2c <__assert_fail@plt+0x112e8>
   23be0:	bl	1218c <__stack_chk_fail@plt>
   23be4:	andeq	sl, r3, r8, asr fp
   23be8:			; <UNDEFINED> instruction: 0x0003d5b0
   23bec:	ldrdeq	sl, [r2], -ip
   23bf0:	andeq	sl, r2, r8, ror r1
   23bf4:	andeq	sl, r2, r4, asr r1
   23bf8:	andeq	sl, r2, r8, lsr #2
   23bfc:	andeq	sp, r3, r8, asr #7
   23c00:	andeq	sl, r2, r8, asr #3
   23c04:	bx	lr
   23c08:	push	{r4, r5, r6, r7, lr}
   23c0c:	sub	sp, sp, #20
   23c10:	mov	r7, r1
   23c14:	mov	r6, r2
   23c18:	mov	r5, r0
   23c1c:	bl	120c0 <getuid@plt>
   23c20:	mov	r4, r0
   23c24:	bl	12228 <geteuid@plt>
   23c28:	cmp	r4, r0
   23c2c:	beq	23c4c <__assert_fail@plt+0x11508>
   23c30:	ldr	r3, [pc, #392]	; 23dc0 <__assert_fail@plt+0x1167c>
   23c34:	ldr	r0, [r3]
   23c38:	lsl	r0, r0, #24
   23c3c:	and	r0, r0, #2130706432	; 0x7f000000
   23c40:	orr	r0, r0, #59	; 0x3b
   23c44:	add	sp, sp, #20
   23c48:	pop	{r4, r5, r6, r7, pc}
   23c4c:	mov	r1, #1
   23c50:	mov	r0, r5
   23c54:	bl	12534 <access@plt>
   23c58:	subs	r4, r0, #0
   23c5c:	bne	23cb4 <__assert_fail@plt+0x11570>
   23c60:	bl	125a0 <fork@plt>
   23c64:	cmn	r0, #1
   23c68:	beq	23cfc <__assert_fail@plt+0x115b8>
   23c6c:	cmp	r0, #0
   23c70:	bne	23cdc <__assert_fail@plt+0x11598>
   23c74:	mov	r0, #25
   23c78:	bl	12654 <gcry_control@plt>
   23c7c:	bl	123fc <setsid@plt>
   23c80:	cmn	r0, #1
   23c84:	beq	23d70 <__assert_fail@plt+0x1162c>
   23c88:	ldr	r0, [pc, #308]	; 23dc4 <__assert_fail@plt+0x11680>
   23c8c:	bl	1221c <chdir@plt>
   23c90:	subs	r4, r0, #0
   23c94:	bne	23d70 <__assert_fail@plt+0x1162c>
   23c98:	bl	125a0 <fork@plt>
   23c9c:	cmn	r0, #1
   23ca0:	beq	23d70 <__assert_fail@plt+0x1162c>
   23ca4:	cmp	r0, #0
   23ca8:	beq	23d78 <__assert_fail@plt+0x11634>
   23cac:	mov	r0, r4
   23cb0:	bl	12120 <_exit@plt>
   23cb4:	ldr	r3, [pc, #260]	; 23dc0 <__assert_fail@plt+0x1167c>
   23cb8:	ldr	r4, [r3]
   23cbc:	bl	12420 <gpg_err_code_from_syserror@plt>
   23cc0:	cmp	r0, #0
   23cc4:	beq	23cf0 <__assert_fail@plt+0x115ac>
   23cc8:	lsl	r4, r4, #24
   23ccc:	and	r4, r4, #2130706432	; 0x7f000000
   23cd0:	uxth	r0, r0
   23cd4:	orr	r0, r4, r0
   23cd8:	b	23c44 <__assert_fail@plt+0x11500>
   23cdc:	mov	r2, r4
   23ce0:	mov	r1, r4
   23ce4:	bl	1227c <waitpid@plt>
   23ce8:	cmn	r0, #1
   23cec:	beq	23d50 <__assert_fail@plt+0x1160c>
   23cf0:	mov	r0, #0
   23cf4:	add	sp, sp, #20
   23cf8:	pop	{r4, r5, r6, r7, pc}
   23cfc:	mov	r2, #5
   23d00:	ldr	r1, [pc, #192]	; 23dc8 <__assert_fail@plt+0x11684>
   23d04:	mov	r0, r4
   23d08:	bl	12180 <dcgettext@plt>
   23d0c:	mov	r4, r0
   23d10:	bl	1245c <__errno_location@plt>
   23d14:	ldr	r0, [r0]
   23d18:	bl	12330 <strerror@plt>
   23d1c:	mov	r1, r0
   23d20:	mov	r0, r4
   23d24:	bl	1e95c <__assert_fail@plt+0xc218>
   23d28:	ldr	r3, [pc, #144]	; 23dc0 <__assert_fail@plt+0x1167c>
   23d2c:	ldr	r4, [r3]
   23d30:	bl	12420 <gpg_err_code_from_syserror@plt>
   23d34:	cmp	r0, #0
   23d38:	beq	23cf0 <__assert_fail@plt+0x115ac>
   23d3c:	lsl	r3, r4, #24
   23d40:	and	r3, r3, #2130706432	; 0x7f000000
   23d44:	uxth	r0, r0
   23d48:	orr	r0, r3, r0
   23d4c:	b	23c44 <__assert_fail@plt+0x11500>
   23d50:	bl	1245c <__errno_location@plt>
   23d54:	ldr	r0, [r0]
   23d58:	bl	12330 <strerror@plt>
   23d5c:	mov	r1, r0
   23d60:	ldr	r0, [pc, #100]	; 23dcc <__assert_fail@plt+0x11688>
   23d64:	bl	1e95c <__assert_fail@plt+0xc218>
   23d68:	mov	r0, r4
   23d6c:	b	23c44 <__assert_fail@plt+0x11500>
   23d70:	mov	r0, #1
   23d74:	bl	12120 <_exit@plt>
   23d78:	cmp	r6, #0
   23d7c:	subne	r6, r6, #4
   23d80:	bne	23d90 <__assert_fail@plt+0x1164c>
   23d84:	b	23d9c <__assert_fail@plt+0x11658>
   23d88:	bl	12528 <gcry_xstrdup@plt>
   23d8c:	bl	125ac <putenv@plt>
   23d90:	ldr	r0, [r6, #4]!
   23d94:	cmp	r0, #0
   23d98:	bne	23d88 <__assert_fail@plt+0x11644>
   23d9c:	mov	r2, #0
   23da0:	mvn	r3, #0
   23da4:	str	r2, [sp, #8]
   23da8:	str	r2, [sp, #4]
   23dac:	mov	r1, r7
   23db0:	mov	r0, r5
   23db4:	str	r3, [sp]
   23db8:	mov	r2, r3
   23dbc:	bl	22ec4 <__assert_fail@plt+0x10780>
   23dc0:	andeq	sp, r3, r8, asr #7
   23dc4:	andeq	r9, r2, r8, lsr #32
   23dc8:	andeq	sl, r2, ip, lsl #2
   23dcc:	andeq	sl, r2, ip, lsl #4
   23dd0:	cmn	r0, #1
   23dd4:	bxeq	lr
   23dd8:	mov	r1, #15
   23ddc:	b	12384 <kill@plt>
   23de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23de4:	sub	sp, sp, #12
   23de8:	ldr	r9, [pc, #228]	; 23ed4 <__assert_fail@plt+0x11790>
   23dec:	str	r1, [sp]
   23df0:	mov	r1, #64	; 0x40
   23df4:	str	r2, [sp, #4]
   23df8:	bl	12408 <strchr@plt>
   23dfc:	ldr	r8, [pc, #212]	; 23ed8 <__assert_fail@plt+0x11794>
   23e00:	mov	r4, r0
   23e04:	cmp	r4, #0
   23e08:	beq	23e50 <__assert_fail@plt+0x1170c>
   23e0c:	add	r5, r4, #1
   23e10:	mov	r0, r5
   23e14:	mov	r1, #64	; 0x40
   23e18:	bl	12408 <strchr@plt>
   23e1c:	ldrb	r3, [r4, #1]
   23e20:	sub	r3, r3, #65	; 0x41
   23e24:	cmp	r3, #25
   23e28:	mov	r7, r0
   23e2c:	bhi	23e44 <__assert_fail@plt+0x11700>
   23e30:	cmp	r0, #0
   23e34:	bne	23e60 <__assert_fail@plt+0x1171c>
   23e38:	mov	r0, r7
   23e3c:	add	sp, sp, #12
   23e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e44:	mov	r4, r7
   23e48:	cmp	r4, #0
   23e4c:	bne	23e0c <__assert_fail@plt+0x116c8>
   23e50:	mov	r7, r4
   23e54:	mov	r0, r7
   23e58:	add	sp, sp, #12
   23e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e60:	sub	r6, r0, r5
   23e64:	mov	fp, r9
   23e68:	mov	r0, #5
   23e6c:	mov	sl, #0
   23e70:	b	23e8c <__assert_fail@plt+0x11748>
   23e74:	add	sl, sl, #1
   23e78:	cmp	sl, #10
   23e7c:	beq	23e44 <__assert_fail@plt+0x11700>
   23e80:	ldr	fp, [r8, sl, lsl #3]
   23e84:	mov	r0, fp
   23e88:	bl	123e4 <strlen@plt>
   23e8c:	cmp	r6, r0
   23e90:	bne	23e74 <__assert_fail@plt+0x11730>
   23e94:	mov	r0, fp
   23e98:	mov	r2, r6
   23e9c:	mov	r1, r5
   23ea0:	bl	1215c <memcmp@plt>
   23ea4:	cmp	r0, #0
   23ea8:	bne	23e74 <__assert_fail@plt+0x11730>
   23eac:	ldr	r3, [sp]
   23eb0:	ldr	r2, [pc, #32]	; 23ed8 <__assert_fail@plt+0x11794>
   23eb4:	str	r4, [r3]
   23eb8:	add	r3, r2, sl, lsl #3
   23ebc:	ldr	r2, [sp, #4]
   23ec0:	str	r7, [r2]
   23ec4:	ldr	r7, [r3, #4]
   23ec8:	mov	r0, r7
   23ecc:	add	sp, sp, #12
   23ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ed4:	muleq	r2, r0, r2
   23ed8:	andeq	sl, r2, r0, asr #4
   23edc:	cmp	r0, #0
   23ee0:	bxeq	lr
   23ee4:	b	23de0 <__assert_fail@plt+0x1169c>
   23ee8:	push	{r4, r5, r6, r7, r8, lr}
   23eec:	sub	sp, sp, #32
   23ef0:	ldr	r8, [pc, #336]	; 24048 <__assert_fail@plt+0x11904>
   23ef4:	ldr	r7, [pc, #336]	; 2404c <__assert_fail@plt+0x11908>
   23ef8:	mov	r5, r0
   23efc:	ldr	r3, [r8]
   23f00:	ldr	r2, [r7]
   23f04:	cmp	r3, #0
   23f08:	str	r2, [sp, #28]
   23f0c:	bne	23f20 <__assert_fail@plt+0x117dc>
   23f10:	b	23f54 <__assert_fail@plt+0x11810>
   23f14:	ldr	r3, [r3]
   23f18:	cmp	r3, #0
   23f1c:	beq	23f54 <__assert_fail@plt+0x11810>
   23f20:	ldr	r2, [r3, #4]
   23f24:	cmp	r5, r2
   23f28:	bne	23f14 <__assert_fail@plt+0x117d0>
   23f2c:	ldr	r4, [r3, #8]
   23f30:	cmp	r4, #0
   23f34:	beq	23f5c <__assert_fail@plt+0x11818>
   23f38:	ldr	r2, [sp, #28]
   23f3c:	ldr	r3, [r7]
   23f40:	mov	r0, r4
   23f44:	cmp	r2, r3
   23f48:	bne	2402c <__assert_fail@plt+0x118e8>
   23f4c:	add	sp, sp, #32
   23f50:	pop	{r4, r5, r6, r7, r8, pc}
   23f54:	cmp	r5, #0
   23f58:	beq	24024 <__assert_fail@plt+0x118e0>
   23f5c:	add	r2, sp, #8
   23f60:	add	r1, sp, #4
   23f64:	mov	r0, r5
   23f68:	bl	23de0 <__assert_fail@plt+0x1169c>
   23f6c:	subs	r6, r0, #0
   23f70:	beq	24024 <__assert_fail@plt+0x118e0>
   23f74:	mov	r0, r5
   23f78:	bl	123e4 <strlen@plt>
   23f7c:	mov	r4, r5
   23f80:	add	r1, r0, #100	; 0x64
   23f84:	add	r0, sp, #12
   23f88:	bl	24db0 <__assert_fail@plt+0x1266c>
   23f8c:	b	23fa8 <__assert_fail@plt+0x11864>
   23f90:	add	r2, sp, #8
   23f94:	add	r1, sp, #4
   23f98:	mov	r0, r4
   23f9c:	bl	23de0 <__assert_fail@plt+0x1169c>
   23fa0:	subs	r6, r0, #0
   23fa4:	beq	23fd4 <__assert_fail@plt+0x11890>
   23fa8:	ldr	r2, [sp, #4]
   23fac:	mov	r1, r4
   23fb0:	sub	r2, r2, r4
   23fb4:	add	r0, sp, #12
   23fb8:	bl	24e60 <__assert_fail@plt+0x1271c>
   23fbc:	mov	r1, r6
   23fc0:	add	r0, sp, #12
   23fc4:	bl	24f28 <__assert_fail@plt+0x127e4>
   23fc8:	ldr	r4, [sp, #8]
   23fcc:	adds	r4, r4, #1
   23fd0:	bne	23f90 <__assert_fail@plt+0x1184c>
   23fd4:	mov	r1, r4
   23fd8:	add	r0, sp, #12
   23fdc:	bl	24f28 <__assert_fail@plt+0x127e4>
   23fe0:	mov	r2, #1
   23fe4:	ldr	r1, [pc, #100]	; 24050 <__assert_fail@plt+0x1190c>
   23fe8:	add	r0, sp, #12
   23fec:	bl	24e60 <__assert_fail@plt+0x1271c>
   23ff0:	add	r0, sp, #12
   23ff4:	mov	r1, #0
   23ff8:	bl	25028 <__assert_fail@plt+0x128e4>
   23ffc:	subs	r4, r0, #0
   24000:	beq	24030 <__assert_fail@plt+0x118ec>
   24004:	mov	r0, #12
   24008:	bl	11fd0 <gcry_xmalloc@plt>
   2400c:	ldr	r3, [r8]
   24010:	str	r5, [r0, #4]
   24014:	str	r4, [r0, #8]
   24018:	str	r3, [r0]
   2401c:	str	r0, [r8]
   24020:	b	23f38 <__assert_fail@plt+0x117f4>
   24024:	mov	r4, r5
   24028:	b	23f38 <__assert_fail@plt+0x117f4>
   2402c:	bl	1218c <__stack_chk_fail@plt>
   24030:	bl	1245c <__errno_location@plt>
   24034:	ldr	r0, [r0]
   24038:	bl	12330 <strerror@plt>
   2403c:	mov	r1, r0
   24040:	ldr	r0, [pc, #12]	; 24054 <__assert_fail@plt+0x11910>
   24044:	bl	1e9e0 <__assert_fail@plt+0xc29c>
   24048:	andeq	sp, r3, r4, ror r5
   2404c:	andeq	sl, r3, r8, asr fp
   24050:	andeq	r6, r2, r4, ror #29
   24054:	muleq	r2, r8, r2
   24058:	push	{r4, r5, r6, r7, r8, lr}
   2405c:	mov	r7, r0
   24060:	mov	r8, r1
   24064:	mov	r6, r2
   24068:	bl	1245c <__errno_location@plt>
   2406c:	ldr	r3, [r0]
   24070:	cmp	r3, #22
   24074:	beq	240e0 <__assert_fail@plt+0x1199c>
   24078:	ldr	r4, [pc, #200]	; 24148 <__assert_fail@plt+0x11a04>
   2407c:	mov	r5, r0
   24080:	ldr	r0, [r4, #8]
   24084:	cmp	r0, #0
   24088:	beq	240b8 <__assert_fail@plt+0x11974>
   2408c:	mov	r3, #1
   24090:	str	r3, [r4, #8]
   24094:	cmp	r6, #0
   24098:	popeq	{r4, r5, r6, r7, r8, pc}
   2409c:	ldr	r2, [pc, #168]	; 2414c <__assert_fail@plt+0x11a08>
   240a0:	ldr	r1, [pc, #168]	; 24150 <__assert_fail@plt+0x11a0c>
   240a4:	mov	r3, #0
   240a8:	str	r1, [r2]
   240ac:	str	r3, [r4, #12]
   240b0:	str	r3, [r4, #16]
   240b4:	pop	{r4, r5, r6, r7, r8, pc}
   240b8:	mov	r2, #5
   240bc:	ldr	r1, [pc, #144]	; 24154 <__assert_fail@plt+0x11a10>
   240c0:	bl	12180 <dcgettext@plt>
   240c4:	mov	r7, r0
   240c8:	ldr	r0, [r5]
   240cc:	bl	12330 <strerror@plt>
   240d0:	mov	r1, r0
   240d4:	mov	r0, r7
   240d8:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   240dc:	b	2408c <__assert_fail@plt+0x11948>
   240e0:	cmp	r7, #0
   240e4:	ldr	r4, [pc, #92]	; 24148 <__assert_fail@plt+0x11a04>
   240e8:	beq	24100 <__assert_fail@plt+0x119bc>
   240ec:	ldr	r1, [pc, #92]	; 24150 <__assert_fail@plt+0x11a0c>
   240f0:	mov	r0, r7
   240f4:	bl	12054 <strcmp@plt>
   240f8:	cmp	r0, #0
   240fc:	beq	24138 <__assert_fail@plt+0x119f4>
   24100:	mov	r3, #1
   24104:	ldr	r0, [r4, #4]
   24108:	str	r3, [r4, #4]
   2410c:	cmp	r0, #0
   24110:	bne	24094 <__assert_fail@plt+0x11950>
   24114:	mov	r2, #5
   24118:	ldr	r1, [pc, #56]	; 24158 <__assert_fail@plt+0x11a14>
   2411c:	bl	12180 <dcgettext@plt>
   24120:	mov	r2, r7
   24124:	mov	r1, r8
   24128:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   2412c:	cmp	r6, #0
   24130:	popeq	{r4, r5, r6, r7, r8, pc}
   24134:	b	2409c <__assert_fail@plt+0x11958>
   24138:	mov	r3, #1
   2413c:	ldr	r0, [r4]
   24140:	str	r3, [r4]
   24144:	b	2410c <__assert_fail@plt+0x119c8>
   24148:	andeq	sp, r3, r8, ror r5
   2414c:	andeq	sp, r3, r8, lsl #6
   24150:	andeq	r6, r2, r0, lsl #9
   24154:	andeq	sl, r2, r8, asr r3
   24158:	andeq	sl, r2, ip, lsr #6
   2415c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24160:	sub	sp, sp, #76	; 0x4c
   24164:	mov	r7, #0
   24168:	str	r3, [sp, #36]	; 0x24
   2416c:	ldr	r3, [pc, #1932]	; 24900 <__assert_fail@plt+0x121bc>
   24170:	str	r1, [sp, #28]
   24174:	add	r1, r0, r1
   24178:	ldr	r3, [r3]
   2417c:	str	r0, [sp, #32]
   24180:	str	r3, [sp, #68]	; 0x44
   24184:	ldr	r3, [sp, #28]
   24188:	ldr	sl, [pc, #1908]	; 24904 <__assert_fail@plt+0x121c0>
   2418c:	cmp	r3, #0
   24190:	str	r2, [sp, #24]
   24194:	sub	fp, r1, #1
   24198:	str	r7, [sp, #16]
   2419c:	str	r7, [sp, #20]
   241a0:	beq	242ac <__assert_fail@plt+0x11b68>
   241a4:	ldr	r3, [sp, #32]
   241a8:	mov	r9, #0
   241ac:	mov	r5, r9
   241b0:	mov	r8, r9
   241b4:	sub	r6, r3, #1
   241b8:	ldr	r4, [sp, #20]
   241bc:	b	2421c <__assert_fail@plt+0x11ad8>
   241c0:	tst	r3, #128	; 0x80
   241c4:	bne	24344 <__assert_fail@plt+0x11c00>
   241c8:	ldr	r1, [sp, #24]
   241cc:	cmn	r1, #1
   241d0:	beq	24204 <__assert_fail@plt+0x11ac0>
   241d4:	cmp	r3, #127	; 0x7f
   241d8:	cmpne	r3, #31
   241dc:	bls	243dc <__assert_fail@plt+0x11c98>
   241e0:	cmp	r3, r1
   241e4:	beq	243dc <__assert_fail@plt+0x11c98>
   241e8:	cmp	r1, #0
   241ec:	sub	r2, r3, #92	; 0x5c
   241f0:	clz	r2, r2
   241f4:	lsr	r2, r2, #5
   241f8:	moveq	r2, #0
   241fc:	cmp	r2, #0
   24200:	bne	244ec <__assert_fail@plt+0x11da8>
   24204:	add	r9, r9, #1
   24208:	mov	r7, #0
   2420c:	cmp	r4, #0
   24210:	strbne	r3, [r4], #1
   24214:	cmp	fp, r6
   24218:	beq	24288 <__assert_fail@plt+0x11b44>
   2421c:	cmp	r7, #0
   24220:	ldrb	r3, [r6, #1]!
   24224:	beq	24248 <__assert_fail@plt+0x11b04>
   24228:	add	r1, r3, #64	; 0x40
   2422c:	lsr	r2, r3, #7
   24230:	uxtb	r1, r1
   24234:	cmp	r1, #61	; 0x3d
   24238:	movls	r2, #0
   2423c:	andhi	r2, r2, #1
   24240:	cmp	r2, #0
   24244:	bne	243b0 <__assert_fail@plt+0x11c6c>
   24248:	cmp	r8, #0
   2424c:	beq	241c0 <__assert_fail@plt+0x11a7c>
   24250:	eor	r2, r3, #128	; 0x80
   24254:	cmp	r2, #63	; 0x3f
   24258:	add	r2, r5, #1
   2425c:	str	r2, [sp, #12]
   24260:	bls	242f4 <__assert_fail@plt+0x11bb0>
   24264:	cmp	r4, #0
   24268:	bne	2453c <__assert_fail@plt+0x11df8>
   2426c:	ldr	r3, [sp, #12]
   24270:	mov	r5, #0
   24274:	cmp	fp, r6
   24278:	add	r9, r9, r3, lsl #2
   2427c:	mov	r8, r5
   24280:	mov	r7, #1
   24284:	bne	2421c <__assert_fail@plt+0x11ad8>
   24288:	ldr	r3, [sp, #20]
   2428c:	cmp	r3, #0
   24290:	bne	242c0 <__assert_fail@plt+0x11b7c>
   24294:	add	r0, r9, #1
   24298:	bl	11fd0 <gcry_xmalloc@plt>
   2429c:	ldr	r3, [sp, #28]
   242a0:	cmp	r3, #0
   242a4:	str	r0, [sp, #20]
   242a8:	bne	241a4 <__assert_fail@plt+0x11a60>
   242ac:	ldr	r3, [sp, #20]
   242b0:	ldr	r4, [sp, #20]
   242b4:	cmp	r3, #0
   242b8:	ldr	r9, [sp, #28]
   242bc:	beq	24294 <__assert_fail@plt+0x11b50>
   242c0:	ldr	r3, [sp, #36]	; 0x24
   242c4:	cmp	r3, #0
   242c8:	bne	24758 <__assert_fail@plt+0x12014>
   242cc:	ldr	r3, [sp, #36]	; 0x24
   242d0:	strb	r3, [r4]
   242d4:	ldr	r3, [pc, #1572]	; 24900 <__assert_fail@plt+0x121bc>
   242d8:	ldr	r2, [sp, #68]	; 0x44
   242dc:	ldr	r0, [sp, #20]
   242e0:	ldr	r3, [r3]
   242e4:	cmp	r2, r3
   242e8:	bne	248ec <__assert_fail@plt+0x121a8>
   242ec:	add	sp, sp, #76	; 0x4c
   242f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242f4:	add	r2, sp, #72	; 0x48
   242f8:	add	r2, r2, r5
   242fc:	and	r1, r3, #63	; 0x3f
   24300:	strb	r3, [r2, #-12]
   24304:	ldr	r3, [sp, #16]
   24308:	subs	r8, r8, #1
   2430c:	orr	r3, r1, r3, lsl #6
   24310:	str	r3, [sp, #16]
   24314:	bne	24530 <__assert_fail@plt+0x11dec>
   24318:	ldr	r3, [pc, #1512]	; 24908 <__assert_fail@plt+0x121c4>
   2431c:	ldr	r7, [r3, #12]
   24320:	cmp	r7, #0
   24324:	beq	245b4 <__assert_fail@plt+0x11e70>
   24328:	cmp	r4, #0
   2432c:	bne	24694 <__assert_fail@plt+0x11f50>
   24330:	ldr	r3, [sp, #12]
   24334:	mov	r7, #0
   24338:	add	r9, r9, r3
   2433c:	mov	r5, r7
   24340:	b	24214 <__assert_fail@plt+0x11ad0>
   24344:	and	r2, r3, #224	; 0xe0
   24348:	cmp	r2, #192	; 0xc0
   2434c:	beq	24598 <__assert_fail@plt+0x11e54>
   24350:	and	r2, r3, #240	; 0xf0
   24354:	cmp	r2, #224	; 0xe0
   24358:	beq	245dc <__assert_fail@plt+0x11e98>
   2435c:	and	r2, r3, #248	; 0xf8
   24360:	cmp	r2, #240	; 0xf0
   24364:	beq	24678 <__assert_fail@plt+0x11f34>
   24368:	and	r2, r3, #252	; 0xfc
   2436c:	cmp	r2, #248	; 0xf8
   24370:	beq	246bc <__assert_fail@plt+0x11f78>
   24374:	and	r2, r3, #254	; 0xfe
   24378:	cmp	r2, #252	; 0xfc
   2437c:	beq	24724 <__assert_fail@plt+0x11fe0>
   24380:	cmp	r4, #0
   24384:	beq	243a4 <__assert_fail@plt+0x11c60>
   24388:	str	r3, [sp]
   2438c:	mov	r0, r4
   24390:	mov	r3, sl
   24394:	mvn	r2, #0
   24398:	mov	r1, #1
   2439c:	bl	12474 <__sprintf_chk@plt>
   243a0:	add	r4, r4, #4
   243a4:	add	r9, r9, #4
   243a8:	mov	r7, #1
   243ac:	b	24214 <__assert_fail@plt+0x11ad0>
   243b0:	cmp	r4, #0
   243b4:	beq	243d4 <__assert_fail@plt+0x11c90>
   243b8:	str	r3, [sp]
   243bc:	mov	r0, r4
   243c0:	mov	r3, sl
   243c4:	mvn	r2, #0
   243c8:	mov	r1, #1
   243cc:	bl	12474 <__sprintf_chk@plt>
   243d0:	add	r4, r4, #4
   243d4:	add	r9, r9, #4
   243d8:	b	24214 <__assert_fail@plt+0x11ad0>
   243dc:	cmp	r4, #0
   243e0:	beq	245f8 <__assert_fail@plt+0x11eb4>
   243e4:	mov	r7, r4
   243e8:	mov	r2, #92	; 0x5c
   243ec:	strb	r2, [r7], #1
   243f0:	cmp	r3, #13
   243f4:	ldrls	pc, [pc, r3, lsl #2]
   243f8:	b	24500 <__assert_fail@plt+0x11dbc>
   243fc:	andeq	r4, r2, ip, lsl #9
   24400:	andeq	r4, r2, r0, lsl #10
   24404:	andeq	r4, r2, r0, lsl #10
   24408:	andeq	r4, r2, r0, lsl #10
   2440c:	andeq	r4, r2, r0, lsl #10
   24410:	andeq	r4, r2, r0, lsl #10
   24414:	andeq	r4, r2, r0, lsl #10
   24418:	andeq	r4, r2, r0, lsl #10
   2441c:	andeq	r4, r2, r4, asr r4
   24420:	andeq	r4, r2, r0, lsl #10
   24424:	andeq	r4, r2, ip, ror #8
   24428:	andeq	r4, r2, r8, lsr r4
   2442c:	andeq	r4, r2, ip, asr #9
   24430:	andeq	r4, r2, ip, lsr #9
   24434:	mov	r7, #0
   24438:	subs	r4, r7, #0
   2443c:	add	r9, r9, #2
   24440:	movne	r3, #118	; 0x76
   24444:	strbne	r3, [r4], #1
   24448:	movne	r7, #0
   2444c:	b	24214 <__assert_fail@plt+0x11ad0>
   24450:	mov	r7, #0
   24454:	subs	r4, r7, #0
   24458:	add	r9, r9, #2
   2445c:	movne	r3, #98	; 0x62
   24460:	strbne	r3, [r4], #1
   24464:	movne	r7, #0
   24468:	b	24214 <__assert_fail@plt+0x11ad0>
   2446c:	cmp	r7, #0
   24470:	add	r9, r9, #2
   24474:	beq	2485c <__assert_fail@plt+0x12118>
   24478:	mov	r3, #110	; 0x6e
   2447c:	strb	r3, [r4, #1]
   24480:	mov	r7, #0
   24484:	add	r4, r4, #2
   24488:	b	24214 <__assert_fail@plt+0x11ad0>
   2448c:	cmp	r7, #0
   24490:	add	r9, r9, #2
   24494:	beq	2485c <__assert_fail@plt+0x12118>
   24498:	mov	r3, #48	; 0x30
   2449c:	strb	r3, [r4, #1]
   244a0:	mov	r7, #0
   244a4:	add	r4, r4, #2
   244a8:	b	24214 <__assert_fail@plt+0x11ad0>
   244ac:	cmp	r7, #0
   244b0:	add	r9, r9, #2
   244b4:	beq	2485c <__assert_fail@plt+0x12118>
   244b8:	mov	r3, #114	; 0x72
   244bc:	strb	r3, [r4, #1]
   244c0:	mov	r7, #0
   244c4:	add	r4, r4, #2
   244c8:	b	24214 <__assert_fail@plt+0x11ad0>
   244cc:	cmp	r7, #0
   244d0:	add	r9, r9, #2
   244d4:	beq	2485c <__assert_fail@plt+0x12118>
   244d8:	mov	r3, #102	; 0x66
   244dc:	strb	r3, [r4, #1]
   244e0:	mov	r7, #0
   244e4:	add	r4, r4, #2
   244e8:	b	24214 <__assert_fail@plt+0x11ad0>
   244ec:	cmp	r4, #0
   244f0:	movne	r7, r4
   244f4:	movne	r3, #92	; 0x5c
   244f8:	strbne	r3, [r7], #1
   244fc:	beq	24748 <__assert_fail@plt+0x12004>
   24500:	cmp	r7, #0
   24504:	add	r9, r9, #4
   24508:	beq	24750 <__assert_fail@plt+0x1200c>
   2450c:	str	r3, [sp]
   24510:	mov	r0, r7
   24514:	ldr	r3, [pc, #1008]	; 2490c <__assert_fail@plt+0x121c8>
   24518:	mvn	r2, #0
   2451c:	mov	r1, #1
   24520:	add	r4, r7, #3
   24524:	bl	12474 <__sprintf_chk@plt>
   24528:	mov	r7, #0
   2452c:	b	24214 <__assert_fail@plt+0x11ad0>
   24530:	ldr	r5, [sp, #12]
   24534:	mov	r7, #0
   24538:	b	24214 <__assert_fail@plt+0x11ad0>
   2453c:	cmp	r5, #0
   24540:	beq	24740 <__assert_fail@plt+0x11ffc>
   24544:	add	r5, r4, r5, lsl #2
   24548:	add	r7, sp, #60	; 0x3c
   2454c:	ldrb	r1, [r7], #1
   24550:	mov	r0, r4
   24554:	mov	r3, sl
   24558:	str	r1, [sp]
   2455c:	mvn	r2, #0
   24560:	mov	r1, #1
   24564:	add	r4, r4, #4
   24568:	bl	12474 <__sprintf_chk@plt>
   2456c:	cmp	r5, r4
   24570:	bne	2454c <__assert_fail@plt+0x11e08>
   24574:	ldrb	r3, [r6]
   24578:	str	r3, [sp]
   2457c:	mvn	r2, #0
   24580:	mov	r3, sl
   24584:	mov	r1, #1
   24588:	mov	r0, r5
   2458c:	bl	12474 <__sprintf_chk@plt>
   24590:	add	r4, r5, #4
   24594:	b	2426c <__assert_fail@plt+0x11b28>
   24598:	mov	r5, #1
   2459c:	strb	r3, [sp, #60]	; 0x3c
   245a0:	and	r3, r3, #31
   245a4:	mov	r7, r8
   245a8:	str	r3, [sp, #16]
   245ac:	mov	r8, r5
   245b0:	b	24214 <__assert_fail@plt+0x11ad0>
   245b4:	ldr	r3, [sp, #36]	; 0x24
   245b8:	cmp	r3, #0
   245bc:	beq	24648 <__assert_fail@plt+0x11f04>
   245c0:	cmp	r4, #0
   245c4:	bne	246fc <__assert_fail@plt+0x11fb8>
   245c8:	ldr	r3, [sp, #12]
   245cc:	mov	r5, #0
   245d0:	add	r9, r9, r3
   245d4:	mov	r8, r5
   245d8:	b	24214 <__assert_fail@plt+0x11ad0>
   245dc:	strb	r3, [sp, #60]	; 0x3c
   245e0:	and	r3, r3, #15
   245e4:	mov	r7, r8
   245e8:	str	r3, [sp, #16]
   245ec:	mov	r5, #1
   245f0:	mov	r8, #2
   245f4:	b	24214 <__assert_fail@plt+0x11ad0>
   245f8:	cmp	r3, #13
   245fc:	ldrls	pc, [pc, r3, lsl #2]
   24600:	b	24748 <__assert_fail@plt+0x12004>
   24604:	andeq	r4, r2, ip, lsr r6
   24608:	andeq	r4, r2, r8, asr #14
   2460c:	andeq	r4, r2, r8, asr #14
   24610:	andeq	r4, r2, r8, asr #14
   24614:	andeq	r4, r2, r8, asr #14
   24618:	andeq	r4, r2, r8, asr #14
   2461c:	andeq	r4, r2, r8, asr #14
   24620:	andeq	r4, r2, r8, asr #14
   24624:	andeq	r4, r2, r0, asr r4
   24628:	andeq	r4, r2, r8, asr #14
   2462c:	andeq	r4, r2, ip, lsr r6
   24630:	andeq	r4, r2, r4, lsr r4
   24634:	andeq	r4, r2, ip, lsr r6
   24638:	andeq	r4, r2, ip, lsr r6
   2463c:	add	r9, r9, #2
   24640:	mov	r7, #0
   24644:	b	24214 <__assert_fail@plt+0x11ad0>
   24648:	ldr	r2, [sp, #16]
   2464c:	sub	r3, r2, #128	; 0x80
   24650:	cmp	r3, #127	; 0x7f
   24654:	bhi	246d8 <__assert_fail@plt+0x11f94>
   24658:	cmp	r4, #0
   2465c:	ldr	r5, [sp, #12]
   24660:	add	r9, r9, #1
   24664:	beq	24850 <__assert_fail@plt+0x1210c>
   24668:	ldr	r8, [sp, #36]	; 0x24
   2466c:	strb	r2, [r4], #1
   24670:	mov	r7, r8
   24674:	b	24214 <__assert_fail@plt+0x11ad0>
   24678:	strb	r3, [sp, #60]	; 0x3c
   2467c:	and	r3, r3, #7
   24680:	mov	r7, r8
   24684:	str	r3, [sp, #16]
   24688:	mov	r5, #1
   2468c:	mov	r8, #3
   24690:	b	24214 <__assert_fail@plt+0x11ad0>
   24694:	add	r5, r4, r5
   24698:	add	r2, sp, #60	; 0x3c
   2469c:	sub	r3, r4, #1
   246a0:	ldrb	r1, [r2], #1
   246a4:	strb	r1, [r3, #1]!
   246a8:	cmp	r3, r5
   246ac:	bne	246a0 <__assert_fail@plt+0x11f5c>
   246b0:	ldr	r3, [sp, #12]
   246b4:	add	r4, r4, r3
   246b8:	b	24330 <__assert_fail@plt+0x11bec>
   246bc:	strb	r3, [sp, #60]	; 0x3c
   246c0:	and	r3, r3, #3
   246c4:	mov	r7, r8
   246c8:	str	r3, [sp, #16]
   246cc:	mov	r5, #1
   246d0:	mov	r8, #4
   246d4:	b	24214 <__assert_fail@plt+0x11ad0>
   246d8:	ldr	r3, [sp, #12]
   246dc:	cmp	r4, #0
   246e0:	lsl	r8, r3, #2
   246e4:	bne	2481c <__assert_fail@plt+0x120d8>
   246e8:	mov	r7, #0
   246ec:	add	r9, r9, r8
   246f0:	mov	r5, r7
   246f4:	mov	r8, r7
   246f8:	b	24214 <__assert_fail@plt+0x11ad0>
   246fc:	add	r5, r4, r5
   24700:	add	r2, sp, #60	; 0x3c
   24704:	sub	r3, r4, #1
   24708:	ldrb	r1, [r2], #1
   2470c:	strb	r1, [r3, #1]!
   24710:	cmp	r5, r3
   24714:	bne	24708 <__assert_fail@plt+0x11fc4>
   24718:	ldr	r3, [sp, #12]
   2471c:	add	r4, r4, r3
   24720:	b	245c8 <__assert_fail@plt+0x11e84>
   24724:	strb	r3, [sp, #60]	; 0x3c
   24728:	and	r3, r3, #1
   2472c:	mov	r7, r8
   24730:	str	r3, [sp, #16]
   24734:	mov	r5, #1
   24738:	mov	r8, #5
   2473c:	b	24214 <__assert_fail@plt+0x11ad0>
   24740:	mov	r5, r4
   24744:	b	24578 <__assert_fail@plt+0x11e34>
   24748:	mov	r7, #0
   2474c:	add	r9, r9, #4
   24750:	mov	r4, r7
   24754:	b	24214 <__assert_fail@plt+0x11ad0>
   24758:	ldr	r7, [pc, #432]	; 24910 <__assert_fail@plt+0x121cc>
   2475c:	mov	r6, #0
   24760:	strb	r6, [r4]
   24764:	ldr	r0, [r7]
   24768:	ldr	r1, [pc, #420]	; 24914 <__assert_fail@plt+0x121d0>
   2476c:	bl	12318 <iconv_open@plt>
   24770:	cmn	r0, #1
   24774:	mov	r5, r0
   24778:	beq	248b4 <__assert_fail@plt+0x12170>
   2477c:	ldr	r3, [sp, #20]
   24780:	sub	r4, r4, r3
   24784:	add	r0, r4, #1
   24788:	tst	r0, #-268435456	; 0xf0000000
   2478c:	lsl	r0, r0, #4
   24790:	str	r4, [sp, #52]	; 0x34
   24794:	str	r0, [sp, #56]	; 0x38
   24798:	str	r3, [sp, #44]	; 0x2c
   2479c:	bne	248f0 <__assert_fail@plt+0x121ac>
   247a0:	bl	11fd0 <gcry_xmalloc@plt>
   247a4:	add	r3, sp, #56	; 0x38
   247a8:	str	r3, [sp]
   247ac:	add	r2, sp, #52	; 0x34
   247b0:	add	r3, sp, #48	; 0x30
   247b4:	add	r1, sp, #44	; 0x2c
   247b8:	mov	r4, r0
   247bc:	mov	r0, r5
   247c0:	str	r4, [sp, #48]	; 0x30
   247c4:	bl	12048 <iconv@plt>
   247c8:	cmn	r0, #1
   247cc:	bne	24864 <__assert_fail@plt+0x12120>
   247d0:	ldr	r6, [pc, #304]	; 24908 <__assert_fail@plt+0x121c4>
   247d4:	ldr	r0, [r6, #20]
   247d8:	cmp	r0, #0
   247dc:	beq	2487c <__assert_fail@plt+0x12138>
   247e0:	mov	r3, #1
   247e4:	ldr	r0, [sp, #20]
   247e8:	str	r3, [r6, #20]
   247ec:	bl	12150 <gcry_free@plt>
   247f0:	mov	r0, r4
   247f4:	bl	12150 <gcry_free@plt>
   247f8:	ldr	r2, [sp, #24]
   247fc:	ldr	r1, [sp, #28]
   24800:	ldr	r0, [sp, #32]
   24804:	mov	r3, #0
   24808:	bl	2415c <__assert_fail@plt+0x11a18>
   2480c:	str	r0, [sp, #20]
   24810:	mov	r0, r5
   24814:	bl	1203c <iconv_close@plt>
   24818:	b	242d4 <__assert_fail@plt+0x11b90>
   2481c:	add	r7, r4, r8
   24820:	add	r5, sp, #60	; 0x3c
   24824:	ldrb	r1, [r5], #1
   24828:	mov	r0, r4
   2482c:	mov	r3, sl
   24830:	str	r1, [sp]
   24834:	mvn	r2, #0
   24838:	mov	r1, #1
   2483c:	add	r4, r4, #4
   24840:	bl	12474 <__sprintf_chk@plt>
   24844:	cmp	r4, r7
   24848:	bne	24824 <__assert_fail@plt+0x120e0>
   2484c:	b	246e8 <__assert_fail@plt+0x11fa4>
   24850:	mov	r7, r4
   24854:	mov	r8, r4
   24858:	b	24214 <__assert_fail@plt+0x11ad0>
   2485c:	mov	r4, r7
   24860:	b	24214 <__assert_fail@plt+0x11ad0>
   24864:	ldr	r3, [sp, #48]	; 0x30
   24868:	ldr	r0, [sp, #20]
   2486c:	str	r4, [sp, #20]
   24870:	strb	r6, [r3]
   24874:	bl	12150 <gcry_free@plt>
   24878:	b	24810 <__assert_fail@plt+0x120cc>
   2487c:	mov	r2, #5
   24880:	ldr	r1, [pc, #144]	; 24918 <__assert_fail@plt+0x121d4>
   24884:	bl	12180 <dcgettext@plt>
   24888:	mov	r8, r0
   2488c:	bl	1245c <__errno_location@plt>
   24890:	ldr	r7, [r7]
   24894:	ldr	r0, [r0]
   24898:	bl	12330 <strerror@plt>
   2489c:	mov	r2, r7
   248a0:	ldr	r1, [pc, #108]	; 24914 <__assert_fail@plt+0x121d0>
   248a4:	mov	r3, r0
   248a8:	mov	r0, r8
   248ac:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   248b0:	b	247e0 <__assert_fail@plt+0x1209c>
   248b4:	mov	r2, #1
   248b8:	ldr	r1, [pc, #84]	; 24914 <__assert_fail@plt+0x121d0>
   248bc:	ldr	r0, [r7]
   248c0:	bl	24058 <__assert_fail@plt+0x11914>
   248c4:	ldr	r0, [sp, #20]
   248c8:	bl	12150 <gcry_free@plt>
   248cc:	ldr	r3, [pc, #52]	; 24908 <__assert_fail@plt+0x121c4>
   248d0:	ldr	r2, [sp, #24]
   248d4:	ldr	r1, [sp, #28]
   248d8:	ldr	r0, [sp, #32]
   248dc:	ldr	r3, [r3, #16]
   248e0:	bl	2415c <__assert_fail@plt+0x11a18>
   248e4:	str	r0, [sp, #20]
   248e8:	b	242d4 <__assert_fail@plt+0x11b90>
   248ec:	bl	1218c <__stack_chk_fail@plt>
   248f0:	ldr	r2, [pc, #36]	; 2491c <__assert_fail@plt+0x121d8>
   248f4:	ldr	r1, [pc, #36]	; 24920 <__assert_fail@plt+0x121dc>
   248f8:	ldr	r0, [pc, #36]	; 24924 <__assert_fail@plt+0x121e0>
   248fc:	bl	1ecbc <__assert_fail@plt+0xc578>
   24900:	andeq	sl, r3, r8, asr fp
   24904:	andeq	sl, r2, r0, ror r3
   24908:	andeq	sp, r3, r8, ror r5
   2490c:	andeq	sl, r2, r8, ror r3
   24910:	andeq	sp, r3, r8, lsl #6
   24914:	andeq	r6, r2, r0, lsl #9
   24918:	muleq	r2, r8, r3
   2491c:	andeq	sl, r2, r8, lsl r3
   24920:	andeq	r0, r0, r3, lsl #5
   24924:	andeq	sl, r2, r0, lsl #7
   24928:	push	{r4, r5, r6, lr}
   2492c:	subs	r5, r0, #0
   24930:	beq	24a34 <__assert_fail@plt+0x122f0>
   24934:	mov	r0, r5
   24938:	bl	123e4 <strlen@plt>
   2493c:	cmp	r0, #3
   24940:	bhi	24974 <__assert_fail@plt+0x12230>
   24944:	ldrb	r3, [r5]
   24948:	mov	r4, r5
   2494c:	cmp	r3, #0
   24950:	bne	249ac <__assert_fail@plt+0x12268>
   24954:	ldr	r3, [pc, #392]	; 24ae4 <__assert_fail@plt+0x123a0>
   24958:	ldr	r2, [pc, #392]	; 24ae8 <__assert_fail@plt+0x123a4>
   2495c:	ldr	r1, [pc, #392]	; 24aec <__assert_fail@plt+0x123a8>
   24960:	mov	r0, #0
   24964:	str	r1, [r2]
   24968:	str	r0, [r3, #12]
   2496c:	str	r0, [r3, #16]
   24970:	pop	{r4, r5, r6, pc}
   24974:	mov	r2, #3
   24978:	ldr	r1, [pc, #368]	; 24af0 <__assert_fail@plt+0x123ac>
   2497c:	mov	r0, r5
   24980:	bl	1a9c4 <__assert_fail@plt+0x8280>
   24984:	cmp	r0, #0
   24988:	bne	24944 <__assert_fail@plt+0x12200>
   2498c:	ldrb	r3, [r5, #3]
   24990:	cmp	r3, #95	; 0x5f
   24994:	cmpne	r3, #45	; 0x2d
   24998:	addne	r4, r5, #3
   2499c:	ldrbeq	r3, [r5, #4]
   249a0:	addeq	r4, r5, #4
   249a4:	cmp	r3, #0
   249a8:	beq	24954 <__assert_fail@plt+0x12210>
   249ac:	ldr	r1, [pc, #320]	; 24af4 <__assert_fail@plt+0x123b0>
   249b0:	mov	r0, r4
   249b4:	bl	1a884 <__assert_fail@plt+0x8140>
   249b8:	cmp	r0, #0
   249bc:	beq	24954 <__assert_fail@plt+0x12210>
   249c0:	ldr	r1, [pc, #304]	; 24af8 <__assert_fail@plt+0x123b4>
   249c4:	mov	r0, r4
   249c8:	bl	1a884 <__assert_fail@plt+0x8140>
   249cc:	cmp	r0, #0
   249d0:	beq	24954 <__assert_fail@plt+0x12210>
   249d4:	ldr	r1, [pc, #288]	; 24afc <__assert_fail@plt+0x123b8>
   249d8:	mov	r0, r4
   249dc:	bl	1a884 <__assert_fail@plt+0x8140>
   249e0:	cmp	r0, #0
   249e4:	beq	24954 <__assert_fail@plt+0x12210>
   249e8:	ldr	r1, [pc, #272]	; 24b00 <__assert_fail@plt+0x123bc>
   249ec:	mov	r0, r4
   249f0:	bl	1a884 <__assert_fail@plt+0x8140>
   249f4:	cmp	r0, #0
   249f8:	beq	24954 <__assert_fail@plt+0x12210>
   249fc:	ldr	r1, [pc, #256]	; 24b04 <__assert_fail@plt+0x123c0>
   24a00:	mov	r0, r4
   24a04:	bl	1a884 <__assert_fail@plt+0x8140>
   24a08:	ldr	r6, [pc, #248]	; 24b08 <__assert_fail@plt+0x123c4>
   24a0c:	cmp	r0, #0
   24a10:	bne	24a44 <__assert_fail@plt+0x12300>
   24a14:	ldr	r3, [pc, #200]	; 24ae4 <__assert_fail@plt+0x123a0>
   24a18:	ldr	r1, [pc, #200]	; 24ae8 <__assert_fail@plt+0x123a4>
   24a1c:	mov	r2, #1
   24a20:	mov	r0, #0
   24a24:	str	r6, [r1]
   24a28:	str	r2, [r3, #12]
   24a2c:	str	r0, [r3, #16]
   24a30:	pop	{r4, r5, r6, pc}
   24a34:	mov	r0, #14
   24a38:	bl	125d0 <nl_langinfo@plt>
   24a3c:	mov	r5, r0
   24a40:	b	24934 <__assert_fail@plt+0x121f0>
   24a44:	mov	r0, r4
   24a48:	mov	r1, r6
   24a4c:	bl	1a884 <__assert_fail@plt+0x8140>
   24a50:	cmp	r0, #0
   24a54:	beq	24a14 <__assert_fail@plt+0x122d0>
   24a58:	mov	r1, r6
   24a5c:	mov	r0, r5
   24a60:	bl	12318 <iconv_open@plt>
   24a64:	cmn	r0, #1
   24a68:	mov	r4, r0
   24a6c:	beq	24ab4 <__assert_fail@plt+0x12370>
   24a70:	bl	1203c <iconv_close@plt>
   24a74:	mov	r1, r5
   24a78:	mov	r0, r6
   24a7c:	bl	12318 <iconv_open@plt>
   24a80:	cmn	r0, #1
   24a84:	mov	r4, r0
   24a88:	beq	24acc <__assert_fail@plt+0x12388>
   24a8c:	bl	1203c <iconv_close@plt>
   24a90:	ldr	r3, [pc, #76]	; 24ae4 <__assert_fail@plt+0x123a0>
   24a94:	ldr	ip, [pc, #76]	; 24ae8 <__assert_fail@plt+0x123a4>
   24a98:	mov	r2, #0
   24a9c:	mov	r1, #1
   24aa0:	mov	r0, r2
   24aa4:	str	r5, [ip]
   24aa8:	str	r1, [r3, #16]
   24aac:	str	r2, [r3, #12]
   24ab0:	pop	{r4, r5, r6, pc}
   24ab4:	mov	r0, r5
   24ab8:	mov	r1, r6
   24abc:	mov	r2, #0
   24ac0:	bl	24058 <__assert_fail@plt+0x11914>
   24ac4:	mov	r0, r4
   24ac8:	pop	{r4, r5, r6, pc}
   24acc:	mov	r0, r6
   24ad0:	mov	r1, r5
   24ad4:	mov	r2, #0
   24ad8:	bl	24058 <__assert_fail@plt+0x11914>
   24adc:	mov	r0, r4
   24ae0:	pop	{r4, r5, r6, pc}
   24ae4:	andeq	sp, r3, r8, ror r5
   24ae8:	andeq	sp, r3, r8, lsl #6
   24aec:	andeq	sl, r2, r8, asr #7
   24af0:	andeq	sl, r2, r4, asr #7
   24af4:	andeq	sl, r2, ip, asr #7
   24af8:	ldrdeq	sl, [r2], -r4
   24afc:	ldrdeq	sl, [r2], -r8
   24b00:	andeq	sl, r2, r0, ror #7
   24b04:	strdeq	sl, [r2], -r0
   24b08:	andeq	r6, r2, r0, lsl #9
   24b0c:	ldr	r3, [pc, #4]	; 24b18 <__assert_fail@plt+0x123d4>
   24b10:	ldr	r0, [r3]
   24b14:	bx	lr
   24b18:	andeq	sp, r3, r8, lsl #6
   24b1c:	ldr	r3, [pc, #4]	; 24b28 <__assert_fail@plt+0x123e4>
   24b20:	ldr	r0, [r3, #12]
   24b24:	bx	lr
   24b28:	andeq	sp, r3, r8, ror r5
   24b2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24b30:	sub	sp, sp, #32
   24b34:	ldr	r8, [pc, #520]	; 24d44 <__assert_fail@plt+0x12600>
   24b38:	ldr	r5, [pc, #520]	; 24d48 <__assert_fail@plt+0x12604>
   24b3c:	ldr	r7, [r8, #12]
   24b40:	ldr	r3, [r5]
   24b44:	cmp	r7, #0
   24b48:	str	r3, [sp, #28]
   24b4c:	bne	24cb0 <__assert_fail@plt+0x1256c>
   24b50:	mov	r4, r0
   24b54:	ldr	r0, [r8, #16]
   24b58:	cmp	r0, #0
   24b5c:	bne	24c04 <__assert_fail@plt+0x124c0>
   24b60:	ldrb	r3, [r4]
   24b64:	cmp	r3, #0
   24b68:	beq	24d38 <__assert_fail@plt+0x125f4>
   24b6c:	mov	r2, r4
   24b70:	tst	r3, #128	; 0x80
   24b74:	ldrb	r3, [r2, #1]!
   24b78:	addeq	r0, r0, #1
   24b7c:	addne	r0, r0, #2
   24b80:	cmp	r3, #0
   24b84:	bne	24b70 <__assert_fail@plt+0x1242c>
   24b88:	add	r0, r0, #1
   24b8c:	bl	11fd0 <gcry_xmalloc@plt>
   24b90:	ldrb	r3, [r4]
   24b94:	cmp	r3, #0
   24b98:	mov	r6, r0
   24b9c:	mov	r2, r0
   24ba0:	beq	24be0 <__assert_fail@plt+0x1249c>
   24ba4:	mvn	lr, #63	; 0x3f
   24ba8:	mvn	ip, #127	; 0x7f
   24bac:	sxtb	r1, r3
   24bb0:	cmp	r1, #0
   24bb4:	movlt	r0, r2
   24bb8:	orrlt	r3, lr, r3, lsr #6
   24bbc:	strblt	r3, [r0], #2
   24bc0:	strbge	r3, [r2], #1
   24bc4:	ldrb	r3, [r4, #1]!
   24bc8:	andlt	r1, r1, #63	; 0x3f
   24bcc:	orrlt	r1, ip, r1
   24bd0:	strblt	r1, [r2, #1]
   24bd4:	movlt	r2, r0
   24bd8:	cmp	r3, #0
   24bdc:	bne	24bac <__assert_fail@plt+0x12468>
   24be0:	mov	r3, #0
   24be4:	strb	r3, [r2]
   24be8:	ldr	r2, [sp, #28]
   24bec:	ldr	r3, [r5]
   24bf0:	mov	r0, r6
   24bf4:	cmp	r2, r3
   24bf8:	bne	24d40 <__assert_fail@plt+0x125fc>
   24bfc:	add	sp, sp, #32
   24c00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24c04:	ldr	sl, [pc, #320]	; 24d4c <__assert_fail@plt+0x12608>
   24c08:	ldr	r0, [pc, #320]	; 24d50 <__assert_fail@plt+0x1260c>
   24c0c:	ldr	r1, [sl]
   24c10:	bl	12318 <iconv_open@plt>
   24c14:	cmn	r0, #1
   24c18:	mov	r9, r0
   24c1c:	beq	24d18 <__assert_fail@plt+0x125d4>
   24c20:	ldrb	r3, [r4]
   24c24:	cmp	r3, #0
   24c28:	moveq	r7, r3
   24c2c:	moveq	r0, #1
   24c30:	beq	24c54 <__assert_fail@plt+0x12510>
   24c34:	mov	r2, r4
   24c38:	tst	r3, #128	; 0x80
   24c3c:	ldrb	r3, [r2, #1]!
   24c40:	addeq	r7, r7, #1
   24c44:	addne	r7, r7, #6
   24c48:	cmp	r3, #0
   24c4c:	bne	24c38 <__assert_fail@plt+0x124f4>
   24c50:	add	r0, r7, #1
   24c54:	bl	11fd0 <gcry_xmalloc@plt>
   24c58:	str	r4, [sp, #12]
   24c5c:	mov	r6, r0
   24c60:	mov	r0, r4
   24c64:	bl	123e4 <strlen@plt>
   24c68:	add	r3, sp, #24
   24c6c:	str	r3, [sp]
   24c70:	add	r2, sp, #20
   24c74:	add	r3, sp, #16
   24c78:	add	r1, sp, #12
   24c7c:	str	r6, [sp, #16]
   24c80:	str	r7, [sp, #24]
   24c84:	str	r0, [sp, #20]
   24c88:	mov	r0, r9
   24c8c:	bl	12048 <iconv@plt>
   24c90:	cmn	r0, #1
   24c94:	beq	24cbc <__assert_fail@plt+0x12578>
   24c98:	ldr	r3, [sp, #16]
   24c9c:	mov	r2, #0
   24ca0:	strb	r2, [r3]
   24ca4:	mov	r0, r9
   24ca8:	bl	1203c <iconv_close@plt>
   24cac:	b	24be8 <__assert_fail@plt+0x124a4>
   24cb0:	bl	12528 <gcry_xstrdup@plt>
   24cb4:	mov	r6, r0
   24cb8:	b	24be8 <__assert_fail@plt+0x124a4>
   24cbc:	ldr	r0, [r8, #24]
   24cc0:	cmp	r0, #0
   24cc4:	beq	24ce0 <__assert_fail@plt+0x1259c>
   24cc8:	mov	r3, #1
   24ccc:	mov	r1, r4
   24cd0:	mov	r0, r6
   24cd4:	str	r3, [r8, #24]
   24cd8:	bl	12288 <strcpy@plt>
   24cdc:	b	24ca4 <__assert_fail@plt+0x12560>
   24ce0:	mov	r2, #5
   24ce4:	ldr	r1, [pc, #104]	; 24d54 <__assert_fail@plt+0x12610>
   24ce8:	bl	12180 <dcgettext@plt>
   24cec:	mov	r7, r0
   24cf0:	bl	1245c <__errno_location@plt>
   24cf4:	ldr	sl, [sl]
   24cf8:	ldr	r0, [r0]
   24cfc:	bl	12330 <strerror@plt>
   24d00:	mov	r1, sl
   24d04:	ldr	r2, [pc, #68]	; 24d50 <__assert_fail@plt+0x1260c>
   24d08:	mov	r3, r0
   24d0c:	mov	r0, r7
   24d10:	bl	1e8f8 <__assert_fail@plt+0xc1b4>
   24d14:	b	24cc8 <__assert_fail@plt+0x12584>
   24d18:	ldr	r1, [sl]
   24d1c:	mov	r2, #1
   24d20:	ldr	r0, [pc, #40]	; 24d50 <__assert_fail@plt+0x1260c>
   24d24:	bl	24058 <__assert_fail@plt+0x11914>
   24d28:	mov	r0, r4
   24d2c:	bl	24b2c <__assert_fail@plt+0x123e8>
   24d30:	mov	r6, r0
   24d34:	b	24be8 <__assert_fail@plt+0x124a4>
   24d38:	mov	r0, #1
   24d3c:	b	24b8c <__assert_fail@plt+0x12448>
   24d40:	bl	1218c <__stack_chk_fail@plt>
   24d44:	andeq	sp, r3, r8, ror r5
   24d48:	andeq	sl, r3, r8, asr fp
   24d4c:	andeq	sp, r3, r8, lsl #6
   24d50:	andeq	r6, r2, r0, lsl #9
   24d54:	muleq	r2, r8, r3
   24d58:	ldr	r3, [pc, #4]	; 24d64 <__assert_fail@plt+0x12620>
   24d5c:	ldr	r3, [r3, #16]
   24d60:	b	2415c <__assert_fail@plt+0x11a18>
   24d64:	andeq	sp, r3, r8, ror r5
   24d68:	b	12318 <iconv_open@plt>
   24d6c:	b	12048 <iconv@plt>
   24d70:	b	1203c <iconv_close@plt>
   24d74:	push	{r4, lr}
   24d78:	mov	r4, r0
   24d7c:	ldr	r0, [r0, #8]
   24d80:	cmp	r0, #0
   24d84:	beq	24da0 <__assert_fail@plt+0x1265c>
   24d88:	ldr	r1, [r4]
   24d8c:	bl	25104 <__assert_fail@plt+0x129c0>
   24d90:	ldr	r0, [r4, #8]
   24d94:	bl	12150 <gcry_free@plt>
   24d98:	mov	r3, #0
   24d9c:	str	r3, [r4, #8]
   24da0:	ldr	r0, [r4, #12]
   24da4:	bl	125dc <gpg_err_set_errno@plt>
   24da8:	mov	r0, #0
   24dac:	pop	{r4, pc}
   24db0:	push	{r4, lr}
   24db4:	mov	r4, r0
   24db8:	mov	r3, #0
   24dbc:	str	r1, [r0, #4]
   24dc0:	mov	r0, r1
   24dc4:	str	r3, [r4]
   24dc8:	str	r3, [r4, #12]
   24dcc:	bl	1200c <gcry_malloc@plt>
   24dd0:	cmp	r0, #0
   24dd4:	str	r0, [r4, #8]
   24dd8:	popne	{r4, pc}
   24ddc:	bl	1245c <__errno_location@plt>
   24de0:	ldr	r3, [r0]
   24de4:	str	r3, [r4, #12]
   24de8:	pop	{r4, pc}
   24dec:	push	{r4, lr}
   24df0:	mov	r4, r0
   24df4:	mov	r3, #0
   24df8:	str	r1, [r0, #4]
   24dfc:	mov	r0, r1
   24e00:	str	r3, [r4]
   24e04:	str	r3, [r4, #12]
   24e08:	bl	122f4 <gcry_malloc_secure@plt>
   24e0c:	cmp	r0, #0
   24e10:	str	r0, [r4, #8]
   24e14:	popne	{r4, pc}
   24e18:	bl	1245c <__errno_location@plt>
   24e1c:	ldr	r3, [r0]
   24e20:	str	r3, [r4, #12]
   24e24:	pop	{r4, pc}
   24e28:	ldr	r3, [r0, #12]
   24e2c:	cmp	r3, #0
   24e30:	bxne	lr
   24e34:	ldr	r2, [r0]
   24e38:	cmp	r2, r1
   24e3c:	bhi	24e48 <__assert_fail@plt+0x12704>
   24e40:	str	r3, [r0]
   24e44:	bx	lr
   24e48:	ldr	r3, [r0, #8]
   24e4c:	sub	r2, r2, r1
   24e50:	str	r2, [r0]
   24e54:	add	r1, r3, r1
   24e58:	mov	r0, r3
   24e5c:	b	120d8 <memmove@plt>
   24e60:	ldr	ip, [r0, #12]
   24e64:	clz	r3, r2
   24e68:	cmp	ip, #0
   24e6c:	lsr	r3, r3, #5
   24e70:	movne	r3, #1
   24e74:	cmp	r3, #0
   24e78:	bxne	lr
   24e7c:	ldr	r3, [r0]
   24e80:	push	{r4, r5, r6, lr}
   24e84:	mov	r6, r1
   24e88:	ldr	r1, [r0, #4]
   24e8c:	mov	r5, r2
   24e90:	add	r2, r3, r2
   24e94:	cmp	r2, r1
   24e98:	mov	r4, r0
   24e9c:	ldr	r0, [r0, #8]
   24ea0:	bcc	24ec4 <__assert_fail@plt+0x12780>
   24ea4:	add	r3, r5, #1024	; 0x400
   24ea8:	add	r1, r3, r1
   24eac:	str	r1, [r4, #4]
   24eb0:	bl	12540 <gcry_realloc@plt>
   24eb4:	cmp	r0, #0
   24eb8:	beq	24ee4 <__assert_fail@plt+0x127a0>
   24ebc:	ldr	r3, [r4]
   24ec0:	str	r0, [r4, #8]
   24ec4:	mov	r2, r5
   24ec8:	mov	r1, r6
   24ecc:	add	r0, r0, r3
   24ed0:	bl	1212c <memcpy@plt>
   24ed4:	ldr	r2, [r4]
   24ed8:	add	r5, r2, r5
   24edc:	str	r5, [r4]
   24ee0:	pop	{r4, r5, r6, pc}
   24ee4:	bl	1245c <__errno_location@plt>
   24ee8:	ldr	r1, [r4]
   24eec:	ldr	r3, [r0]
   24ef0:	ldr	r0, [r4, #8]
   24ef4:	cmp	r3, #0
   24ef8:	moveq	r3, #12
   24efc:	str	r3, [r4, #12]
   24f00:	pop	{r4, r5, r6, lr}
   24f04:	b	25104 <__assert_fail@plt+0x129c0>
   24f08:	cmp	r1, #0
   24f0c:	beq	24f20 <__assert_fail@plt+0x127dc>
   24f10:	push	{r4, lr}
   24f14:	bl	24e60 <__assert_fail@plt+0x1271c>
   24f18:	mov	r0, #0
   24f1c:	pop	{r4, pc}
   24f20:	mov	r0, #0
   24f24:	bx	lr
   24f28:	push	{r4, r5, r6, lr}
   24f2c:	mov	r5, r0
   24f30:	mov	r0, r1
   24f34:	mov	r4, r1
   24f38:	bl	123e4 <strlen@plt>
   24f3c:	mov	r1, r4
   24f40:	mov	r2, r0
   24f44:	mov	r0, r5
   24f48:	pop	{r4, r5, r6, lr}
   24f4c:	b	24e60 <__assert_fail@plt+0x1271c>
   24f50:	push	{r1, r2, r3}
   24f54:	push	{r4, r5, r6, lr}
   24f58:	mov	r5, r0
   24f5c:	ldr	r4, [pc, #136]	; 24fec <__assert_fail@plt+0x128a8>
   24f60:	sub	sp, sp, #20
   24f64:	add	r3, sp, #40	; 0x28
   24f68:	ldr	r0, [r4]
   24f6c:	mov	r2, r3
   24f70:	str	r0, [sp, #12]
   24f74:	ldr	r1, [sp, #36]	; 0x24
   24f78:	add	r0, sp, #8
   24f7c:	str	r3, [sp, #4]
   24f80:	bl	124c8 <gpgrt_vasprintf@plt>
   24f84:	cmp	r0, #0
   24f88:	blt	24fd0 <__assert_fail@plt+0x1288c>
   24f8c:	ldr	r6, [sp, #8]
   24f90:	mov	r0, r6
   24f94:	bl	123e4 <strlen@plt>
   24f98:	mov	r1, r6
   24f9c:	mov	r2, r0
   24fa0:	mov	r0, r5
   24fa4:	bl	24e60 <__assert_fail@plt+0x1271c>
   24fa8:	ldr	r0, [sp, #8]
   24fac:	bl	12150 <gcry_free@plt>
   24fb0:	ldr	r2, [sp, #12]
   24fb4:	ldr	r3, [r4]
   24fb8:	cmp	r2, r3
   24fbc:	bne	24fe8 <__assert_fail@plt+0x128a4>
   24fc0:	add	sp, sp, #20
   24fc4:	pop	{r4, r5, r6, lr}
   24fc8:	add	sp, sp, #12
   24fcc:	bx	lr
   24fd0:	bl	1245c <__errno_location@plt>
   24fd4:	ldr	r3, [r0]
   24fd8:	cmp	r3, #0
   24fdc:	moveq	r3, #12
   24fe0:	str	r3, [r5, #12]
   24fe4:	b	24fb0 <__assert_fail@plt+0x1286c>
   24fe8:	bl	1218c <__stack_chk_fail@plt>
   24fec:	andeq	sl, r3, r8, asr fp
   24ff0:	ldr	r2, [r0, #12]
   24ff4:	mov	r3, r0
   24ff8:	cmp	r2, #0
   24ffc:	bne	25024 <__assert_fail@plt+0x128e0>
   25000:	cmp	r1, #0
   25004:	ldr	r0, [r0, #8]
   25008:	ldrne	r2, [r3]
   2500c:	strne	r2, [r1]
   25010:	mov	r1, #0
   25014:	mov	r2, #12
   25018:	str	r1, [r3, #8]
   2501c:	str	r2, [r3, #12]
   25020:	bx	lr
   25024:	b	24d74 <__assert_fail@plt+0x12630>
   25028:	push	{r4, r5, r6, lr}
   2502c:	sub	sp, sp, #8
   25030:	ldr	r6, [pc, #148]	; 250cc <__assert_fail@plt+0x12988>
   25034:	subs	r5, r1, #0
   25038:	ldr	r3, [r6]
   2503c:	str	r3, [sp, #4]
   25040:	beq	250ac <__assert_fail@plt+0x12968>
   25044:	ldr	r3, [r0, #12]
   25048:	cmp	r3, #0
   2504c:	bne	250bc <__assert_fail@plt+0x12978>
   25050:	ldr	r1, [r0]
   25054:	mov	r2, #12
   25058:	ldr	r4, [r0, #8]
   2505c:	str	r1, [r5]
   25060:	str	r3, [r0, #8]
   25064:	str	r2, [r0, #12]
   25068:	cmp	r4, #0
   2506c:	beq	2507c <__assert_fail@plt+0x12938>
   25070:	ldr	r1, [r5]
   25074:	cmp	r1, #0
   25078:	bne	25098 <__assert_fail@plt+0x12954>
   2507c:	ldr	r2, [sp, #4]
   25080:	ldr	r3, [r6]
   25084:	mov	r0, r4
   25088:	cmp	r2, r3
   2508c:	bne	250c8 <__assert_fail@plt+0x12984>
   25090:	add	sp, sp, #8
   25094:	pop	{r4, r5, r6, pc}
   25098:	mov	r0, r4
   2509c:	bl	12540 <gcry_realloc@plt>
   250a0:	cmp	r0, #0
   250a4:	movne	r4, r0
   250a8:	b	2507c <__assert_fail@plt+0x12938>
   250ac:	ldr	r3, [r0, #12]
   250b0:	mov	r5, sp
   250b4:	cmp	r3, #0
   250b8:	beq	25050 <__assert_fail@plt+0x1290c>
   250bc:	bl	24d74 <__assert_fail@plt+0x12630>
   250c0:	mov	r4, r0
   250c4:	b	25068 <__assert_fail@plt+0x12924>
   250c8:	bl	1218c <__stack_chk_fail@plt>
   250cc:	andeq	sl, r3, r8, asr fp
   250d0:	mov	r3, r0
   250d4:	ldr	r0, [r0, #12]
   250d8:	cmp	r0, #0
   250dc:	bne	250f4 <__assert_fail@plt+0x129b0>
   250e0:	cmp	r1, #0
   250e4:	ldr	r0, [r3, #8]
   250e8:	ldrne	r3, [r3]
   250ec:	strne	r3, [r1]
   250f0:	bx	lr
   250f4:	push	{r4, lr}
   250f8:	bl	125dc <gpg_err_set_errno@plt>
   250fc:	mov	r0, #0
   25100:	pop	{r4, pc}
   25104:	mvn	r2, #0
   25108:	b	125b8 <__explicit_bzero_chk@plt>
   2510c:	push	{r4, r5, r6, lr}
   25110:	sub	sp, sp, #216	; 0xd8
   25114:	ldr	r4, [pc, #160]	; 251bc <__assert_fail@plt+0x12a78>
   25118:	mov	r5, r0
   2511c:	mov	r6, r1
   25120:	ldr	r3, [r4]
   25124:	str	r3, [sp, #212]	; 0xd4
   25128:	bl	1a6d8 <__assert_fail@plt+0x7f94>
   2512c:	cmp	r0, #0
   25130:	moveq	r0, #1
   25134:	bne	25150 <__assert_fail@plt+0x12a0c>
   25138:	ldr	r2, [sp, #212]	; 0xd4
   2513c:	ldr	r3, [r4]
   25140:	cmp	r2, r3
   25144:	bne	251b8 <__assert_fail@plt+0x12a74>
   25148:	add	sp, sp, #216	; 0xd8
   2514c:	pop	{r4, r5, r6, pc}
   25150:	mov	r1, r5
   25154:	mov	r2, sp
   25158:	mov	r0, #3
   2515c:	bl	126a8 <__xstat64@plt>
   25160:	cmp	r0, #0
   25164:	beq	25170 <__assert_fail@plt+0x12a2c>
   25168:	mov	r0, #0
   2516c:	b	25138 <__assert_fail@plt+0x129f4>
   25170:	mov	r1, r6
   25174:	add	r2, sp, #104	; 0x68
   25178:	mov	r0, #3
   2517c:	bl	126a8 <__xstat64@plt>
   25180:	cmp	r0, #0
   25184:	bne	25168 <__assert_fail@plt+0x12a24>
   25188:	ldrd	r0, [sp]
   2518c:	ldrd	r2, [sp, #104]	; 0x68
   25190:	cmp	r1, r3
   25194:	cmpeq	r0, r2
   25198:	bne	25168 <__assert_fail@plt+0x12a24>
   2519c:	ldrd	r0, [sp, #96]	; 0x60
   251a0:	ldrd	r2, [sp, #200]	; 0xc8
   251a4:	cmp	r1, r3
   251a8:	cmpeq	r0, r2
   251ac:	moveq	r0, #1
   251b0:	movne	r0, #0
   251b4:	b	25138 <__assert_fail@plt+0x129f4>
   251b8:	bl	1218c <__stack_chk_fail@plt>
   251bc:	andeq	sl, r3, r8, asr fp
   251c0:	cmp	r1, #0
   251c4:	beq	253d0 <__assert_fail@plt+0x12c8c>
   251c8:	eor	ip, r0, r1
   251cc:	rsbmi	r1, r1, #0
   251d0:	subs	r2, r1, #1
   251d4:	beq	2539c <__assert_fail@plt+0x12c58>
   251d8:	movs	r3, r0
   251dc:	rsbmi	r3, r0, #0
   251e0:	cmp	r3, r1
   251e4:	bls	253a8 <__assert_fail@plt+0x12c64>
   251e8:	tst	r1, r2
   251ec:	beq	253b8 <__assert_fail@plt+0x12c74>
   251f0:	clz	r2, r3
   251f4:	clz	r0, r1
   251f8:	sub	r2, r0, r2
   251fc:	rsbs	r2, r2, #31
   25200:	addne	r2, r2, r2, lsl #1
   25204:	mov	r0, #0
   25208:	addne	pc, pc, r2, lsl #2
   2520c:	nop			; (mov r0, r0)
   25210:	cmp	r3, r1, lsl #31
   25214:	adc	r0, r0, r0
   25218:	subcs	r3, r3, r1, lsl #31
   2521c:	cmp	r3, r1, lsl #30
   25220:	adc	r0, r0, r0
   25224:	subcs	r3, r3, r1, lsl #30
   25228:	cmp	r3, r1, lsl #29
   2522c:	adc	r0, r0, r0
   25230:	subcs	r3, r3, r1, lsl #29
   25234:	cmp	r3, r1, lsl #28
   25238:	adc	r0, r0, r0
   2523c:	subcs	r3, r3, r1, lsl #28
   25240:	cmp	r3, r1, lsl #27
   25244:	adc	r0, r0, r0
   25248:	subcs	r3, r3, r1, lsl #27
   2524c:	cmp	r3, r1, lsl #26
   25250:	adc	r0, r0, r0
   25254:	subcs	r3, r3, r1, lsl #26
   25258:	cmp	r3, r1, lsl #25
   2525c:	adc	r0, r0, r0
   25260:	subcs	r3, r3, r1, lsl #25
   25264:	cmp	r3, r1, lsl #24
   25268:	adc	r0, r0, r0
   2526c:	subcs	r3, r3, r1, lsl #24
   25270:	cmp	r3, r1, lsl #23
   25274:	adc	r0, r0, r0
   25278:	subcs	r3, r3, r1, lsl #23
   2527c:	cmp	r3, r1, lsl #22
   25280:	adc	r0, r0, r0
   25284:	subcs	r3, r3, r1, lsl #22
   25288:	cmp	r3, r1, lsl #21
   2528c:	adc	r0, r0, r0
   25290:	subcs	r3, r3, r1, lsl #21
   25294:	cmp	r3, r1, lsl #20
   25298:	adc	r0, r0, r0
   2529c:	subcs	r3, r3, r1, lsl #20
   252a0:	cmp	r3, r1, lsl #19
   252a4:	adc	r0, r0, r0
   252a8:	subcs	r3, r3, r1, lsl #19
   252ac:	cmp	r3, r1, lsl #18
   252b0:	adc	r0, r0, r0
   252b4:	subcs	r3, r3, r1, lsl #18
   252b8:	cmp	r3, r1, lsl #17
   252bc:	adc	r0, r0, r0
   252c0:	subcs	r3, r3, r1, lsl #17
   252c4:	cmp	r3, r1, lsl #16
   252c8:	adc	r0, r0, r0
   252cc:	subcs	r3, r3, r1, lsl #16
   252d0:	cmp	r3, r1, lsl #15
   252d4:	adc	r0, r0, r0
   252d8:	subcs	r3, r3, r1, lsl #15
   252dc:	cmp	r3, r1, lsl #14
   252e0:	adc	r0, r0, r0
   252e4:	subcs	r3, r3, r1, lsl #14
   252e8:	cmp	r3, r1, lsl #13
   252ec:	adc	r0, r0, r0
   252f0:	subcs	r3, r3, r1, lsl #13
   252f4:	cmp	r3, r1, lsl #12
   252f8:	adc	r0, r0, r0
   252fc:	subcs	r3, r3, r1, lsl #12
   25300:	cmp	r3, r1, lsl #11
   25304:	adc	r0, r0, r0
   25308:	subcs	r3, r3, r1, lsl #11
   2530c:	cmp	r3, r1, lsl #10
   25310:	adc	r0, r0, r0
   25314:	subcs	r3, r3, r1, lsl #10
   25318:	cmp	r3, r1, lsl #9
   2531c:	adc	r0, r0, r0
   25320:	subcs	r3, r3, r1, lsl #9
   25324:	cmp	r3, r1, lsl #8
   25328:	adc	r0, r0, r0
   2532c:	subcs	r3, r3, r1, lsl #8
   25330:	cmp	r3, r1, lsl #7
   25334:	adc	r0, r0, r0
   25338:	subcs	r3, r3, r1, lsl #7
   2533c:	cmp	r3, r1, lsl #6
   25340:	adc	r0, r0, r0
   25344:	subcs	r3, r3, r1, lsl #6
   25348:	cmp	r3, r1, lsl #5
   2534c:	adc	r0, r0, r0
   25350:	subcs	r3, r3, r1, lsl #5
   25354:	cmp	r3, r1, lsl #4
   25358:	adc	r0, r0, r0
   2535c:	subcs	r3, r3, r1, lsl #4
   25360:	cmp	r3, r1, lsl #3
   25364:	adc	r0, r0, r0
   25368:	subcs	r3, r3, r1, lsl #3
   2536c:	cmp	r3, r1, lsl #2
   25370:	adc	r0, r0, r0
   25374:	subcs	r3, r3, r1, lsl #2
   25378:	cmp	r3, r1, lsl #1
   2537c:	adc	r0, r0, r0
   25380:	subcs	r3, r3, r1, lsl #1
   25384:	cmp	r3, r1
   25388:	adc	r0, r0, r0
   2538c:	subcs	r3, r3, r1
   25390:	cmp	ip, #0
   25394:	rsbmi	r0, r0, #0
   25398:	bx	lr
   2539c:	teq	ip, r0
   253a0:	rsbmi	r0, r0, #0
   253a4:	bx	lr
   253a8:	movcc	r0, #0
   253ac:	asreq	r0, ip, #31
   253b0:	orreq	r0, r0, #1
   253b4:	bx	lr
   253b8:	clz	r2, r1
   253bc:	rsb	r2, r2, #31
   253c0:	cmp	ip, #0
   253c4:	lsr	r0, r3, r2
   253c8:	rsbmi	r0, r0, #0
   253cc:	bx	lr
   253d0:	cmp	r0, #0
   253d4:	mvngt	r0, #-2147483648	; 0x80000000
   253d8:	movlt	r0, #-2147483648	; 0x80000000
   253dc:	b	25510 <__assert_fail@plt+0x12dcc>
   253e0:	cmp	r1, #0
   253e4:	beq	253d0 <__assert_fail@plt+0x12c8c>
   253e8:	push	{r0, r1, lr}
   253ec:	bl	251c8 <__assert_fail@plt+0x12a84>
   253f0:	pop	{r1, r2, lr}
   253f4:	mul	r3, r2, r0
   253f8:	sub	r1, r1, r3
   253fc:	bx	lr
   25400:	cmp	r3, #0
   25404:	cmpeq	r2, #0
   25408:	bne	2542c <__assert_fail@plt+0x12ce8>
   2540c:	cmp	r1, #0
   25410:	movlt	r1, #-2147483648	; 0x80000000
   25414:	movlt	r0, #0
   25418:	blt	25428 <__assert_fail@plt+0x12ce4>
   2541c:	cmpeq	r0, #0
   25420:	mvnne	r1, #-2147483648	; 0x80000000
   25424:	mvnne	r0, #0
   25428:	b	25510 <__assert_fail@plt+0x12dcc>
   2542c:	sub	sp, sp, #8
   25430:	push	{sp, lr}
   25434:	cmp	r1, #0
   25438:	blt	25458 <__assert_fail@plt+0x12d14>
   2543c:	cmp	r3, #0
   25440:	blt	2548c <__assert_fail@plt+0x12d48>
   25444:	bl	25520 <__assert_fail@plt+0x12ddc>
   25448:	ldr	lr, [sp, #4]
   2544c:	add	sp, sp, #8
   25450:	pop	{r2, r3}
   25454:	bx	lr
   25458:	rsbs	r0, r0, #0
   2545c:	sbc	r1, r1, r1, lsl #1
   25460:	cmp	r3, #0
   25464:	blt	254b0 <__assert_fail@plt+0x12d6c>
   25468:	bl	25520 <__assert_fail@plt+0x12ddc>
   2546c:	ldr	lr, [sp, #4]
   25470:	add	sp, sp, #8
   25474:	pop	{r2, r3}
   25478:	rsbs	r0, r0, #0
   2547c:	sbc	r1, r1, r1, lsl #1
   25480:	rsbs	r2, r2, #0
   25484:	sbc	r3, r3, r3, lsl #1
   25488:	bx	lr
   2548c:	rsbs	r2, r2, #0
   25490:	sbc	r3, r3, r3, lsl #1
   25494:	bl	25520 <__assert_fail@plt+0x12ddc>
   25498:	ldr	lr, [sp, #4]
   2549c:	add	sp, sp, #8
   254a0:	pop	{r2, r3}
   254a4:	rsbs	r0, r0, #0
   254a8:	sbc	r1, r1, r1, lsl #1
   254ac:	bx	lr
   254b0:	rsbs	r2, r2, #0
   254b4:	sbc	r3, r3, r3, lsl #1
   254b8:	bl	25520 <__assert_fail@plt+0x12ddc>
   254bc:	ldr	lr, [sp, #4]
   254c0:	add	sp, sp, #8
   254c4:	pop	{r2, r3}
   254c8:	rsbs	r2, r2, #0
   254cc:	sbc	r3, r3, r3, lsl #1
   254d0:	bx	lr
   254d4:	cmp	r3, #0
   254d8:	cmpeq	r2, #0
   254dc:	bne	254f4 <__assert_fail@plt+0x12db0>
   254e0:	cmp	r1, #0
   254e4:	cmpeq	r0, #0
   254e8:	mvnne	r1, #0
   254ec:	mvnne	r0, #0
   254f0:	b	25510 <__assert_fail@plt+0x12dcc>
   254f4:	sub	sp, sp, #8
   254f8:	push	{sp, lr}
   254fc:	bl	25520 <__assert_fail@plt+0x12ddc>
   25500:	ldr	lr, [sp, #4]
   25504:	add	sp, sp, #8
   25508:	pop	{r2, r3}
   2550c:	bx	lr
   25510:	push	{r1, lr}
   25514:	mov	r0, #8
   25518:	bl	11ff4 <raise@plt>
   2551c:	pop	{r1, pc}
   25520:	cmp	r1, r3
   25524:	cmpeq	r0, r2
   25528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2552c:	mov	r4, r0
   25530:	movcc	r0, #0
   25534:	mov	r5, r1
   25538:	ldr	lr, [sp, #36]	; 0x24
   2553c:	movcc	r1, r0
   25540:	bcc	2563c <__assert_fail@plt+0x12ef8>
   25544:	cmp	r3, #0
   25548:	clzeq	ip, r2
   2554c:	clzne	ip, r3
   25550:	addeq	ip, ip, #32
   25554:	cmp	r5, #0
   25558:	clzeq	r1, r4
   2555c:	addeq	r1, r1, #32
   25560:	clzne	r1, r5
   25564:	sub	ip, ip, r1
   25568:	sub	sl, ip, #32
   2556c:	lsl	r9, r3, ip
   25570:	rsb	fp, ip, #32
   25574:	orr	r9, r9, r2, lsl sl
   25578:	orr	r9, r9, r2, lsr fp
   2557c:	lsl	r8, r2, ip
   25580:	cmp	r5, r9
   25584:	cmpeq	r4, r8
   25588:	movcc	r0, #0
   2558c:	movcc	r1, r0
   25590:	bcc	255ac <__assert_fail@plt+0x12e68>
   25594:	mov	r0, #1
   25598:	subs	r4, r4, r8
   2559c:	lsl	r1, r0, sl
   255a0:	orr	r1, r1, r0, lsr fp
   255a4:	lsl	r0, r0, ip
   255a8:	sbc	r5, r5, r9
   255ac:	cmp	ip, #0
   255b0:	beq	2563c <__assert_fail@plt+0x12ef8>
   255b4:	lsr	r6, r8, #1
   255b8:	orr	r6, r6, r9, lsl #31
   255bc:	lsr	r7, r9, #1
   255c0:	mov	r2, ip
   255c4:	b	255e8 <__assert_fail@plt+0x12ea4>
   255c8:	subs	r3, r4, r6
   255cc:	sbc	r8, r5, r7
   255d0:	adds	r3, r3, r3
   255d4:	adc	r8, r8, r8
   255d8:	adds	r4, r3, #1
   255dc:	adc	r5, r8, #0
   255e0:	subs	r2, r2, #1
   255e4:	beq	25604 <__assert_fail@plt+0x12ec0>
   255e8:	cmp	r5, r7
   255ec:	cmpeq	r4, r6
   255f0:	bcs	255c8 <__assert_fail@plt+0x12e84>
   255f4:	adds	r4, r4, r4
   255f8:	adc	r5, r5, r5
   255fc:	subs	r2, r2, #1
   25600:	bne	255e8 <__assert_fail@plt+0x12ea4>
   25604:	lsr	r3, r4, ip
   25608:	orr	r3, r3, r5, lsl fp
   2560c:	lsr	r2, r5, ip
   25610:	orr	r3, r3, r5, lsr sl
   25614:	adds	r0, r0, r4
   25618:	mov	r4, r3
   2561c:	lsl	r3, r2, ip
   25620:	orr	r3, r3, r4, lsl sl
   25624:	lsl	ip, r4, ip
   25628:	orr	r3, r3, r4, lsr fp
   2562c:	adc	r1, r1, r5
   25630:	subs	r0, r0, ip
   25634:	mov	r5, r2
   25638:	sbc	r1, r1, r3
   2563c:	cmp	lr, #0
   25640:	strdne	r4, [lr]
   25644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25648:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2564c:	mov	r7, r0
   25650:	ldr	r6, [pc, #72]	; 256a0 <__assert_fail@plt+0x12f5c>
   25654:	ldr	r5, [pc, #72]	; 256a4 <__assert_fail@plt+0x12f60>
   25658:	add	r6, pc, r6
   2565c:	add	r5, pc, r5
   25660:	sub	r6, r6, r5
   25664:	mov	r8, r1
   25668:	mov	r9, r2
   2566c:	bl	11fb0 <gcry_xmalloc@plt-0x20>
   25670:	asrs	r6, r6, #2
   25674:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25678:	mov	r4, #0
   2567c:	add	r4, r4, #1
   25680:	ldr	r3, [r5], #4
   25684:	mov	r2, r9
   25688:	mov	r1, r8
   2568c:	mov	r0, r7
   25690:	blx	r3
   25694:	cmp	r6, r4
   25698:	bne	2567c <__assert_fail@plt+0x12f38>
   2569c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   256a0:	strdeq	r5, [r1], -r4
   256a4:	andeq	r5, r1, ip, ror #9
   256a8:	bx	lr
   256ac:	ldr	r3, [pc, #12]	; 256c0 <__assert_fail@plt+0x12f7c>
   256b0:	mov	r1, #0
   256b4:	add	r3, pc, r3
   256b8:	ldr	r2, [r3]
   256bc:	b	12480 <__cxa_atexit@plt>
   256c0:	andeq	r5, r1, r8, asr #18

Disassembly of section .fini:

000256c4 <.fini>:
   256c4:	push	{r3, lr}
   256c8:	pop	{r3, pc}
