
raspbian-preinstalled/env:     file format elf32-littlearm


Disassembly of section .init:

00010ce4 <.init>:
   10ce4:	push	{r3, lr}
   10ce8:	bl	11ecc <__assert_fail@plt+0xf64>
   10cec:	pop	{r3, pc}

Disassembly of section .plt:

00010cf0 <calloc@plt-0x14>:
   10cf0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cf4:	ldr	lr, [pc, #4]	; 10d00 <calloc@plt-0x4>
   10cf8:	add	lr, pc, lr
   10cfc:	ldr	pc, [lr, #8]!
   10d00:	andeq	r6, r1, r0, lsl #6

00010d04 <calloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #768]!	; 0x300

00010d10 <fputs_unlocked@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #760]!	; 0x2f8

00010d1c <raise@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #752]!	; 0x2f0

00010d28 <strcmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #744]!	; 0x2e8

00010d34 <fflush@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d40 <free@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #728]!	; 0x2d8

00010d4c <_exit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #720]!	; 0x2d0

00010d58 <memcpy@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #712]!	; 0x2c8

00010d64 <execvp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d70 <mbsinit@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #696]!	; 0x2b8

00010d7c <memcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #688]!	; 0x2b0

00010d88 <stpcpy@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #680]!	; 0x2a8

00010d94 <dcgettext@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #672]!	; 0x2a0

00010da0 <__stack_chk_fail@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #664]!	; 0x298

00010dac <realloc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #656]!	; 0x290

00010db8 <textdomain@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #648]!	; 0x288

00010dc4 <chdir@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #640]!	; 0x280

00010dd0 <iswprint@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #632]!	; 0x278

00010ddc <fwrite@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #624]!	; 0x270

00010de8 <lseek64@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #616]!	; 0x268

00010df4 <__ctype_get_mb_cur_max@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #608]!	; 0x260

00010e00 <__fpending@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #600]!	; 0x258

00010e0c <mbrtowc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #592]!	; 0x250

00010e18 <error@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #584]!	; 0x248

00010e24 <getenv@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #576]!	; 0x240

00010e30 <malloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #568]!	; 0x238

00010e3c <__libc_start_main@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #560]!	; 0x230

00010e48 <__freading@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #552]!	; 0x228

00010e54 <__gmon_start__@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #544]!	; 0x220

00010e60 <getopt_long@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #536]!	; 0x218

00010e6c <__ctype_b_loc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #528]!	; 0x210

00010e78 <exit@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #520]!	; 0x208

00010e84 <strlen@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #512]!	; 0x200

00010e90 <strchr@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #504]!	; 0x1f8

00010e9c <__errno_location@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ea8 <__cxa_atexit@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb4 <memset@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec0 <__printf_chk@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #472]!	; 0x1d8

00010ecc <fileno@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ed8 <__fprintf_chk@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee4 <fclose@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef0 <fseeko64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #440]!	; 0x1b8

00010efc <setlocale@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #432]!	; 0x1b0

00010f08 <putenv@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #424]!	; 0x1a8

00010f14 <strrchr@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f20 <nl_langinfo@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #408]!	; 0x198

00010f2c <bindtextdomain@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #400]!	; 0x190

00010f38 <unsetenv@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #392]!	; 0x188

00010f44 <strncmp@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #384]!	; 0x180

00010f50 <abort@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #376]!	; 0x178

00010f5c <strspn@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #368]!	; 0x170

00010f68 <__assert_fail@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #360]!	; 0x168

Disassembly of section .text:

00010f74 <.text>:
   10f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f78:	sub	sp, sp, #60	; 0x3c
   10f7c:	mov	fp, r0
   10f80:	ldr	r0, [r1]
   10f84:	str	r1, [sp, #20]
   10f88:	bl	1250c <__assert_fail@plt+0x15a4>
   10f8c:	ldr	r1, [pc, #3624]	; 11dbc <__assert_fail@plt+0xe54>
   10f90:	mov	r0, #6
   10f94:	bl	10efc <setlocale@plt>
   10f98:	ldr	r1, [pc, #3616]	; 11dc0 <__assert_fail@plt+0xe58>
   10f9c:	ldr	r0, [pc, #3616]	; 11dc4 <__assert_fail@plt+0xe5c>
   10fa0:	bl	10f2c <bindtextdomain@plt>
   10fa4:	ldr	r0, [pc, #3608]	; 11dc4 <__assert_fail@plt+0xe5c>
   10fa8:	bl	10db8 <textdomain@plt>
   10fac:	ldr	r3, [pc, #3604]	; 11dc8 <__assert_fail@plt+0xe60>
   10fb0:	mov	r4, #0
   10fb4:	mov	r2, #125	; 0x7d
   10fb8:	ldr	r0, [pc, #3596]	; 11dcc <__assert_fail@plt+0xe64>
   10fbc:	str	r4, [sp, #32]
   10fc0:	str	r2, [r3]
   10fc4:	str	r4, [sp, #36]	; 0x24
   10fc8:	bl	154fc <__assert_fail@plt+0x4594>
   10fcc:	str	r4, [sp, #28]
   10fd0:	ldr	r3, [pc, #3576]	; 11dd0 <__assert_fail@plt+0xe68>
   10fd4:	mov	r4, #0
   10fd8:	str	r4, [sp]
   10fdc:	add	r2, r3, #144	; 0x90
   10fe0:	ldr	r1, [sp, #20]
   10fe4:	mov	r0, fp
   10fe8:	bl	10e60 <getopt_long@plt>
   10fec:	cmn	r0, #1
   10ff0:	beq	117a0 <__assert_fail@plt+0x838>
   10ff4:	cmp	r0, #48	; 0x30
   10ff8:	beq	1126c <__assert_fail@plt+0x304>
   10ffc:	ble	11024 <__assert_fail@plt+0xbc>
   11000:	cmp	r0, #105	; 0x69
   11004:	beq	11260 <__assert_fail@plt+0x2f8>
   11008:	bgt	111cc <__assert_fail@plt+0x264>
   1100c:	cmp	r0, #67	; 0x43
   11010:	bne	11078 <__assert_fail@plt+0x110>
   11014:	ldr	r3, [pc, #3512]	; 11dd4 <__assert_fail@plt+0xe6c>
   11018:	ldr	r3, [r3]
   1101c:	str	r3, [sp, #32]
   11020:	b	10fd0 <__assert_fail@plt+0x68>
   11024:	cmn	r0, #2
   11028:	mov	r5, r0
   1102c:	beq	11c6c <__assert_fail@plt+0xd04>
   11030:	bgt	11208 <__assert_fail@plt+0x2a0>
   11034:	cmn	r0, #3
   11038:	bne	11b08 <__assert_fail@plt+0xba0>
   1103c:	ldr	ip, [pc, #3476]	; 11dd8 <__assert_fail@plt+0xe70>
   11040:	ldr	r1, [pc, #3476]	; 11ddc <__assert_fail@plt+0xe74>
   11044:	ldr	r3, [pc, #3476]	; 11de0 <__assert_fail@plt+0xe78>
   11048:	ldr	r0, [pc, #3476]	; 11de4 <__assert_fail@plt+0xe7c>
   1104c:	ldr	r2, [pc, #3476]	; 11de8 <__assert_fail@plt+0xe80>
   11050:	str	r4, [sp, #12]
   11054:	ldr	r0, [r0]
   11058:	ldr	r3, [r3]
   1105c:	stmib	sp, {r1, ip}
   11060:	str	r2, [sp]
   11064:	ldr	r1, [pc, #3456]	; 11dec <__assert_fail@plt+0xe84>
   11068:	ldr	r2, [pc, #3456]	; 11df0 <__assert_fail@plt+0xe88>
   1106c:	bl	14bdc <__assert_fail@plt+0x3c74>
   11070:	mov	r0, r4
   11074:	bl	10e78 <exit@plt>
   11078:	cmp	r0, #83	; 0x53
   1107c:	bne	11b08 <__assert_fail@plt+0xba0>
   11080:	bl	10e6c <__ctype_b_loc@plt>
   11084:	ldr	r3, [pc, #3400]	; 11dd4 <__assert_fail@plt+0xe6c>
   11088:	ldr	r2, [r3]
   1108c:	ldr	r3, [r0]
   11090:	str	r0, [sp, #44]	; 0x2c
   11094:	ldrb	r6, [r2]
   11098:	mov	r1, r2
   1109c:	add	r2, r2, #1
   110a0:	sxth	r4, r6
   110a4:	lsl	r0, r4, #1
   110a8:	ldrh	r5, [r3, r0]
   110ac:	ands	r5, r5, #8192	; 0x2000
   110b0:	bne	11094 <__assert_fail@plt+0x12c>
   110b4:	cmp	r6, #0
   110b8:	str	r3, [sp, #48]	; 0x30
   110bc:	mov	r9, r1
   110c0:	str	r1, [sp, #40]	; 0x28
   110c4:	beq	10fd0 <__assert_fail@plt+0x68>
   110c8:	ldr	r3, [pc, #3364]	; 11df4 <__assert_fail@plt+0xe8c>
   110cc:	mov	r0, r1
   110d0:	mov	r8, #1
   110d4:	ldr	r2, [r3]
   110d8:	mov	sl, r5
   110dc:	sub	r3, fp, r2
   110e0:	str	r3, [sp, #52]	; 0x34
   110e4:	bl	10e84 <strlen@plt>
   110e8:	mov	r7, r5
   110ec:	add	r3, r0, r8
   110f0:	str	r3, [sp, #24]
   110f4:	ldr	r3, [sp, #48]	; 0x30
   110f8:	str	fp, [sp, #48]	; 0x30
   110fc:	mov	fp, r9
   11100:	ldr	r9, [sp, #44]	; 0x2c
   11104:	lsl	r0, r4, #1
   11108:	ldrb	r4, [fp, #1]
   1110c:	ldrh	r0, [r3, r0]
   11110:	tst	r0, #8192	; 0x2000
   11114:	beq	11278 <__assert_fail@plt+0x310>
   11118:	orrs	r0, r7, sl
   1111c:	bne	11278 <__assert_fail@plt+0x310>
   11120:	cmp	r6, #36	; 0x24
   11124:	beq	11560 <__assert_fail@plt+0x5f8>
   11128:	bls	114c4 <__assert_fail@plt+0x55c>
   1112c:	cmp	r6, #39	; 0x27
   11130:	beq	114e0 <__assert_fail@plt+0x578>
   11134:	cmp	r6, #92	; 0x5c
   11138:	moveq	r5, #1
   1113c:	bne	114d0 <__assert_fail@plt+0x568>
   11140:	sub	r3, r4, #99	; 0x63
   11144:	clz	r3, r3
   11148:	lsr	r3, r3, #5
   1114c:	tst	r7, r3
   11150:	bne	11c74 <__assert_fail@plt+0xd0c>
   11154:	cmp	r4, #0
   11158:	beq	11c94 <__assert_fail@plt+0xd2c>
   1115c:	and	r0, r4, #247	; 0xf7
   11160:	cmp	r0, #102	; 0x66
   11164:	orreq	r3, r3, #1
   11168:	cmp	r3, #0
   1116c:	bne	114f8 <__assert_fail@plt+0x590>
   11170:	and	r3, r4, #251	; 0xfb
   11174:	cmp	r3, #114	; 0x72
   11178:	beq	114f8 <__assert_fail@plt+0x590>
   1117c:	cmp	r4, #116	; 0x74
   11180:	beq	111a8 <__assert_fail@plt+0x240>
   11184:	sub	r3, r4, #34	; 0x22
   11188:	cmp	r4, #95	; 0x5f
   1118c:	cmpne	r3, #2
   11190:	bls	114f8 <__assert_fail@plt+0x590>
   11194:	cmp	r4, #92	; 0x5c
   11198:	cmpne	r4, #39	; 0x27
   1119c:	moveq	r6, #1
   111a0:	movne	r6, #0
   111a4:	bne	11a7c <__assert_fail@plt+0xb14>
   111a8:	ldrb	r4, [fp, #2]
   111ac:	add	fp, fp, #1
   111b0:	cmp	r4, #0
   111b4:	add	fp, fp, #1
   111b8:	beq	112ac <__assert_fail@plt+0x344>
   111bc:	ldr	r3, [r9]
   111c0:	mov	r6, r4
   111c4:	sxth	r4, r4
   111c8:	b	11104 <__assert_fail@plt+0x19c>
   111cc:	cmp	r0, #117	; 0x75
   111d0:	bne	11248 <__assert_fail@plt+0x2e0>
   111d4:	ldr	r1, [pc, #3100]	; 11df8 <__assert_fail@plt+0xe90>
   111d8:	ldr	r0, [pc, #3060]	; 11dd4 <__assert_fail@plt+0xe6c>
   111dc:	ldr	r3, [r1, #8]
   111e0:	ldr	r2, [r1, #12]
   111e4:	ldr	r4, [r0]
   111e8:	cmp	r3, r2
   111ec:	ldr	r0, [r1, #16]
   111f0:	beq	11768 <__assert_fail@plt+0x800>
   111f4:	add	r2, r3, #1
   111f8:	str	r4, [r0, r3, lsl #2]
   111fc:	ldr	r3, [pc, #3060]	; 11df8 <__assert_fail@plt+0xe90>
   11200:	str	r2, [r3, #8]
   11204:	b	10fd0 <__assert_fail@plt+0x68>
   11208:	cmp	r0, #9
   1120c:	beq	11218 <__assert_fail@plt+0x2b0>
   11210:	cmp	r0, #32
   11214:	bne	11b08 <__assert_fail@plt+0xba0>
   11218:	mov	r2, #5
   1121c:	ldr	r1, [pc, #3032]	; 11dfc <__assert_fail@plt+0xe94>
   11220:	mov	r0, #0
   11224:	bl	10d94 <dcgettext@plt>
   11228:	mov	r1, #0
   1122c:	mov	r3, r5
   11230:	mov	r2, r0
   11234:	mov	r0, r1
   11238:	bl	10e18 <error@plt>
   1123c:	mov	r2, #5
   11240:	ldr	r1, [pc, #3000]	; 11e00 <__assert_fail@plt+0xe98>
   11244:	b	11af0 <__assert_fail@plt+0xb88>
   11248:	cmp	r0, #118	; 0x76
   1124c:	bne	11b08 <__assert_fail@plt+0xba0>
   11250:	ldr	r2, [pc, #2976]	; 11df8 <__assert_fail@plt+0xe90>
   11254:	mov	r3, #1
   11258:	strb	r3, [r2, #20]
   1125c:	b	10fd0 <__assert_fail@plt+0x68>
   11260:	mov	r3, #1
   11264:	str	r3, [sp, #28]
   11268:	b	10fd0 <__assert_fail@plt+0x68>
   1126c:	mov	r3, #1
   11270:	str	r3, [sp, #36]	; 0x24
   11274:	b	10fd0 <__assert_fail@plt+0x68>
   11278:	cmp	r5, #0
   1127c:	addne	r8, r8, #1
   11280:	cmp	r6, #36	; 0x24
   11284:	beq	11504 <__assert_fail@plt+0x59c>
   11288:	bls	114a4 <__assert_fail@plt+0x53c>
   1128c:	cmp	r6, #39	; 0x27
   11290:	mov	r5, #0
   11294:	beq	114e4 <__assert_fail@plt+0x57c>
   11298:	cmp	r6, #92	; 0x5c
   1129c:	beq	11140 <__assert_fail@plt+0x1d8>
   112a0:	cmp	r4, #0
   112a4:	add	fp, fp, #1
   112a8:	bne	111bc <__assert_fail@plt+0x254>
   112ac:	orrs	r3, r7, sl
   112b0:	ldr	fp, [sp, #48]	; 0x30
   112b4:	bne	1151c <__assert_fail@plt+0x5b4>
   112b8:	ldr	r3, [sp, #24]
   112bc:	mov	sl, r4
   112c0:	add	r0, r3, #7
   112c4:	bl	14ce0 <__assert_fail@plt+0x3d78>
   112c8:	ldr	r3, [sp, #52]	; 0x34
   112cc:	add	r2, r3, r8
   112d0:	mov	r8, #1
   112d4:	mov	r5, r0
   112d8:	add	r0, r2, #2
   112dc:	add	r6, r5, #6
   112e0:	lsl	r0, r0, #2
   112e4:	bl	14ce0 <__assert_fail@plt+0x3d78>
   112e8:	ldr	r3, [pc, #2836]	; 11e04 <__assert_fail@plt+0xe9c>
   112ec:	ldrh	r2, [r3, #4]
   112f0:	strh	r2, [r5, #4]
   112f4:	mov	r9, r0
   112f8:	str	r0, [sp, #24]
   112fc:	ldr	r0, [r3]
   11300:	str	r5, [r9], #4
   11304:	str	r0, [r5]
   11308:	ldr	r5, [sp, #40]	; 0x28
   1130c:	mov	r7, r9
   11310:	ldrb	r3, [r5]
   11314:	cmp	r3, #0
   11318:	beq	11384 <__assert_fail@plt+0x41c>
   1131c:	cmp	r3, #35	; 0x23
   11320:	beq	116c8 <__assert_fail@plt+0x760>
   11324:	bls	11568 <__assert_fail@plt+0x600>
   11328:	cmp	r3, #39	; 0x27
   1132c:	beq	116dc <__assert_fail@plt+0x774>
   11330:	cmp	r3, #92	; 0x5c
   11334:	beq	1163c <__assert_fail@plt+0x6d4>
   11338:	cmp	r3, #36	; 0x24
   1133c:	beq	115d4 <__assert_fail@plt+0x66c>
   11340:	add	r2, r5, #1
   11344:	cmp	r8, #0
   11348:	add	r1, r6, #1
   1134c:	beq	11368 <__assert_fail@plt+0x400>
   11350:	mov	r0, r6
   11354:	mov	ip, #0
   11358:	str	r1, [r7], #4
   1135c:	mov	r6, r1
   11360:	strb	ip, [r0], #2
   11364:	mov	r1, r0
   11368:	mov	r5, r2
   1136c:	strb	r3, [r6]
   11370:	ldrb	r3, [r5]
   11374:	mov	r6, r1
   11378:	mov	r8, #0
   1137c:	cmp	r3, #0
   11380:	bne	1131c <__assert_fail@plt+0x3b4>
   11384:	ldr	r3, [pc, #2668]	; 11df8 <__assert_fail@plt+0xe90>
   11388:	ldr	r2, [sp, #20]
   1138c:	ldrb	r1, [r3, #20]
   11390:	mov	r3, #0
   11394:	str	r3, [r7]
   11398:	cmp	r1, r3
   1139c:	strb	r3, [r6]
   113a0:	ldr	r3, [sp, #24]
   113a4:	ldr	r2, [r2]
   113a8:	str	r2, [r3]
   113ac:	beq	11710 <__assert_fail@plt+0x7a8>
   113b0:	ldr	r3, [sp, #24]
   113b4:	ldr	r3, [r3, #4]
   113b8:	cmp	r3, #0
   113bc:	beq	11420 <__assert_fail@plt+0x4b8>
   113c0:	ldr	r5, [pc, #2624]	; 11e08 <__assert_fail@plt+0xea0>
   113c4:	ldr	r0, [sp, #40]	; 0x28
   113c8:	ldr	r4, [r5]
   113cc:	bl	14770 <__assert_fail@plt+0x3808>
   113d0:	ldr	r2, [pc, #2612]	; 11e0c <__assert_fail@plt+0xea4>
   113d4:	mov	r1, #1
   113d8:	mov	r3, r0
   113dc:	mov	r0, r4
   113e0:	bl	10ed8 <__fprintf_chk@plt>
   113e4:	ldr	r3, [pc, #2572]	; 11df8 <__assert_fail@plt+0xe90>
   113e8:	ldrb	r3, [r3, #20]
   113ec:	cmp	r3, #0
   113f0:	bne	11b44 <__assert_fail@plt+0xbdc>
   113f4:	ldr	r6, [pc, #2580]	; 11e10 <__assert_fail@plt+0xea8>
   113f8:	mov	r4, r9
   113fc:	ldr	r3, [pc, #2548]	; 11df8 <__assert_fail@plt+0xe90>
   11400:	mov	r9, r4
   11404:	ldr	r0, [r4], #4
   11408:	ldrb	r3, [r3, #20]
   1140c:	b	11418 <__assert_fail@plt+0x4b0>
   11410:	cmp	r3, #0
   11414:	bne	11900 <__assert_fail@plt+0x998>
   11418:	cmp	r0, #0
   1141c:	bne	11410 <__assert_fail@plt+0x4a8>
   11420:	ldr	r3, [pc, #2508]	; 11df4 <__assert_fail@plt+0xe8c>
   11424:	ldr	ip, [r3]
   11428:	cmp	ip, fp
   1142c:	bge	11460 <__assert_fail@plt+0x4f8>
   11430:	ldr	r2, [sp, #20]
   11434:	sub	r3, ip, #-1073741823	; 0xc0000001
   11438:	sub	r0, r2, #4
   1143c:	add	r3, r2, r3, lsl #2
   11440:	add	r0, r0, fp, lsl #2
   11444:	sub	r2, r9, #4
   11448:	ldr	r1, [r3, #4]!
   1144c:	cmp	r0, r3
   11450:	str	r1, [r2, #4]!
   11454:	bne	11448 <__assert_fail@plt+0x4e0>
   11458:	sub	fp, fp, ip
   1145c:	add	r9, r9, fp, lsl #2
   11460:	ldr	r2, [sp, #24]
   11464:	mov	fp, #0
   11468:	str	fp, [r9]
   1146c:	ldr	r3, [r2]
   11470:	cmp	r3, fp
   11474:	beq	11b3c <__assert_fail@plt+0xbd4>
   11478:	mov	r3, r2
   1147c:	ldr	r2, [r3, #4]!
   11480:	add	fp, fp, #1
   11484:	cmp	r2, #0
   11488:	bne	1147c <__assert_fail@plt+0x514>
   1148c:	ldr	r2, [sp, #24]
   11490:	mov	r3, #0
   11494:	str	r2, [sp, #20]
   11498:	ldr	r2, [pc, #2388]	; 11df4 <__assert_fail@plt+0xe8c>
   1149c:	str	r3, [r2]
   114a0:	b	10fd0 <__assert_fail@plt+0x68>
   114a4:	cmp	r6, #34	; 0x22
   114a8:	movne	r5, #0
   114ac:	bne	111b0 <__assert_fail@plt+0x248>
   114b0:	ands	r5, r7, sl
   114b4:	bne	11ca0 <__assert_fail@plt+0xd38>
   114b8:	orr	r0, r7, sl
   114bc:	eor	r7, r0, #1
   114c0:	b	111b0 <__assert_fail@plt+0x248>
   114c4:	cmp	r6, #34	; 0x22
   114c8:	moveq	r5, #1
   114cc:	beq	114bc <__assert_fail@plt+0x554>
   114d0:	mov	sl, r0
   114d4:	mov	r7, r0
   114d8:	mov	r5, #1
   114dc:	b	111b0 <__assert_fail@plt+0x248>
   114e0:	mov	r5, #1
   114e4:	tst	r7, sl
   114e8:	bne	11cb4 <__assert_fail@plt+0xd4c>
   114ec:	orr	sl, r7, sl
   114f0:	eor	sl, sl, #1
   114f4:	b	111b0 <__assert_fail@plt+0x248>
   114f8:	cmp	r4, #95	; 0x5f
   114fc:	addeq	r8, r8, #1
   11500:	b	111a8 <__assert_fail@plt+0x240>
   11504:	mov	r5, #0
   11508:	cmp	sl, #0
   1150c:	beq	11528 <__assert_fail@plt+0x5c0>
   11510:	cmp	r4, #0
   11514:	add	fp, fp, #1
   11518:	bne	111c0 <__assert_fail@plt+0x258>
   1151c:	mov	r2, #5
   11520:	ldr	r1, [pc, #2284]	; 11e14 <__assert_fail@plt+0xeac>
   11524:	b	11c7c <__assert_fail@plt+0xd14>
   11528:	mov	r0, fp
   1152c:	bl	11f80 <__assert_fail@plt+0x1018>
   11530:	cmp	r0, #0
   11534:	beq	11cc8 <__assert_fail@plt+0xd60>
   11538:	bl	10e24 <getenv@plt>
   1153c:	cmp	r0, #0
   11540:	ldrbeq	r4, [fp, #1]
   11544:	beq	111b0 <__assert_fail@plt+0x248>
   11548:	bl	10e84 <strlen@plt>
   1154c:	ldr	r3, [sp, #24]
   11550:	ldrb	r4, [fp, #1]
   11554:	add	r3, r3, r0
   11558:	str	r3, [sp, #24]
   1155c:	b	111b0 <__assert_fail@plt+0x248>
   11560:	mov	r5, #1
   11564:	b	11508 <__assert_fail@plt+0x5a0>
   11568:	cmp	r3, #32
   1156c:	beq	115a4 <__assert_fail@plt+0x63c>
   11570:	cmp	r3, #34	; 0x22
   11574:	bne	1159c <__assert_fail@plt+0x634>
   11578:	cmp	r4, #0
   1157c:	bne	11340 <__assert_fail@plt+0x3d8>
   11580:	eor	sl, sl, #1
   11584:	cmp	r8, #0
   11588:	strbne	r4, [r6], #1
   1158c:	strne	r6, [r7], #4
   11590:	add	r5, r5, #1
   11594:	mov	r8, #0
   11598:	b	11310 <__assert_fail@plt+0x3a8>
   1159c:	cmp	r3, #9
   115a0:	bne	11340 <__assert_fail@plt+0x3d8>
   115a4:	orrs	r2, sl, r4
   115a8:	bne	11340 <__assert_fail@plt+0x3d8>
   115ac:	mov	r0, r5
   115b0:	ldr	r1, [pc, #2144]	; 11e18 <__assert_fail@plt+0xeb0>
   115b4:	str	r2, [sp, #44]	; 0x2c
   115b8:	bl	10f5c <strspn@plt>
   115bc:	ldr	r2, [sp, #44]	; 0x2c
   115c0:	mov	r8, #1
   115c4:	mov	r4, r2
   115c8:	mov	sl, r2
   115cc:	add	r5, r5, r0
   115d0:	b	11310 <__assert_fail@plt+0x3a8>
   115d4:	cmp	r4, #0
   115d8:	bne	11340 <__assert_fail@plt+0x3d8>
   115dc:	mov	r0, r5
   115e0:	bl	11f80 <__assert_fail@plt+0x1018>
   115e4:	str	r0, [sp, #48]	; 0x30
   115e8:	bl	10e24 <getenv@plt>
   115ec:	subs	r3, r0, #0
   115f0:	str	r3, [sp, #44]	; 0x2c
   115f4:	beq	1173c <__assert_fail@plt+0x7d4>
   115f8:	ldr	r3, [pc, #2040]	; 11df8 <__assert_fail@plt+0xe90>
   115fc:	cmp	r8, #0
   11600:	strbne	r4, [r6], #1
   11604:	ldrb	r3, [r3, #20]
   11608:	strne	r6, [r7], #4
   1160c:	cmp	r3, #0
   11610:	bne	11a28 <__assert_fail@plt+0xac0>
   11614:	mov	r0, r6
   11618:	ldr	r1, [sp, #44]	; 0x2c
   1161c:	bl	10d88 <stpcpy@plt>
   11620:	mov	r8, #0
   11624:	mov	r6, r0
   11628:	mov	r0, r5
   1162c:	mov	r1, #125	; 0x7d
   11630:	bl	10e90 <strchr@plt>
   11634:	add	r5, r0, #1
   11638:	b	11310 <__assert_fail@plt+0x3a8>
   1163c:	cmp	r4, #0
   11640:	add	r2, r5, #1
   11644:	ldrb	r1, [r5, #1]
   11648:	beq	116f8 <__assert_fail@plt+0x790>
   1164c:	cmp	r1, #39	; 0x27
   11650:	cmpne	r1, #92	; 0x5c
   11654:	bne	11344 <__assert_fail@plt+0x3dc>
   11658:	cmp	r1, #39	; 0x27
   1165c:	cmpne	r1, #92	; 0x5c
   11660:	beq	11704 <__assert_fail@plt+0x79c>
   11664:	cmp	r1, #95	; 0x5f
   11668:	beq	118e4 <__assert_fail@plt+0x97c>
   1166c:	cmp	r1, #99	; 0x63
   11670:	beq	11384 <__assert_fail@plt+0x41c>
   11674:	sub	r1, r1, #102	; 0x66
   11678:	cmp	r1, #16
   1167c:	ldrls	pc, [pc, r1, lsl #2]
   11680:	b	11d74 <__assert_fail@plt+0xe0c>
   11684:	andeq	r1, r1, r0, lsr #21
   11688:	andeq	r1, r1, r4, ror sp
   1168c:	andeq	r1, r1, r4, ror sp
   11690:	andeq	r1, r1, r4, ror sp
   11694:	andeq	r1, r1, r4, ror sp
   11698:	andeq	r1, r1, r4, ror sp
   1169c:	andeq	r1, r1, r4, ror sp
   116a0:	andeq	r1, r1, r4, ror sp
   116a4:	andeq	r1, r1, ip, lsr #21
   116a8:	andeq	r1, r1, r4, ror sp
   116ac:	andeq	r1, r1, r4, ror sp
   116b0:	andeq	r1, r1, r4, ror sp
   116b4:			; <UNDEFINED> instruction: 0x00011ab8
   116b8:	andeq	r1, r1, r4, ror sp
   116bc:	andeq	r1, r1, r4, asr #21
   116c0:	andeq	r1, r1, r4, ror sp
   116c4:	ldrdeq	r1, [r1], -r0
   116c8:	cmp	r8, #0
   116cc:	bne	11384 <__assert_fail@plt+0x41c>
   116d0:	add	r2, r5, #1
   116d4:	add	r1, r6, #1
   116d8:	b	11368 <__assert_fail@plt+0x400>
   116dc:	cmp	sl, #0
   116e0:	bne	11340 <__assert_fail@plt+0x3d8>
   116e4:	cmp	r8, #0
   116e8:	strbne	sl, [r6], #1
   116ec:	eor	r4, r4, #1
   116f0:	strne	r6, [r7], #4
   116f4:	b	11590 <__assert_fail@plt+0x628>
   116f8:	cmp	r1, #39	; 0x27
   116fc:	cmpne	r1, #92	; 0x5c
   11700:	bne	1172c <__assert_fail@plt+0x7c4>
   11704:	mov	r3, r1
   11708:	add	r2, r2, #1
   1170c:	b	11344 <__assert_fail@plt+0x3dc>
   11710:	ldr	r3, [r3, #4]
   11714:	cmp	r3, #0
   11718:	beq	11420 <__assert_fail@plt+0x4b8>
   1171c:	ldr	r3, [r9, #4]!
   11720:	cmp	r3, #0
   11724:	bne	1171c <__assert_fail@plt+0x7b4>
   11728:	b	11420 <__assert_fail@plt+0x4b8>
   1172c:	sub	r3, r1, #34	; 0x22
   11730:	cmp	r3, #2
   11734:	bls	11704 <__assert_fail@plt+0x79c>
   11738:	b	11664 <__assert_fail@plt+0x6fc>
   1173c:	ldr	r3, [pc, #1716]	; 11df8 <__assert_fail@plt+0xe90>
   11740:	ldrb	r3, [r3, #20]
   11744:	cmp	r3, #0
   11748:	beq	11628 <__assert_fail@plt+0x6c0>
   1174c:	ldr	r0, [pc, #1716]	; 11e08 <__assert_fail@plt+0xea0>
   11750:	ldr	r3, [sp, #48]	; 0x30
   11754:	ldr	r2, [pc, #1728]	; 11e1c <__assert_fail@plt+0xeb4>
   11758:	mov	r1, #1
   1175c:	ldr	r0, [r0]
   11760:	bl	10ed8 <__fprintf_chk@plt>
   11764:	b	11628 <__assert_fail@plt+0x6c0>
   11768:	cmp	r0, #0
   1176c:	beq	11a54 <__assert_fail@plt+0xaec>
   11770:	ldr	r3, [pc, #1704]	; 11e20 <__assert_fail@plt+0xeb8>
   11774:	cmp	r2, r3
   11778:	bhi	11a78 <__assert_fail@plt+0xb10>
   1177c:	add	r3, r2, #1
   11780:	add	r2, r3, r2, lsr #1
   11784:	lsl	r1, r2, #2
   11788:	ldr	r5, [pc, #1640]	; 11df8 <__assert_fail@plt+0xe90>
   1178c:	str	r2, [r5, #12]
   11790:	bl	14d3c <__assert_fail@plt+0x3dd4>
   11794:	ldr	r3, [r5, #8]
   11798:	str	r0, [r5, #16]
   1179c:	b	111f4 <__assert_fail@plt+0x28c>
   117a0:	ldr	r4, [pc, #1612]	; 11df4 <__assert_fail@plt+0xe8c>
   117a4:	ldr	r5, [r4]
   117a8:	cmp	r5, fp
   117ac:	bge	11870 <__assert_fail@plt+0x908>
   117b0:	ldr	r3, [sp, #20]
   117b4:	ldr	r1, [pc, #1640]	; 11e24 <__assert_fail@plt+0xebc>
   117b8:	ldr	r0, [r3, r5, lsl #2]
   117bc:	bl	10d28 <strcmp@plt>
   117c0:	cmp	r0, #0
   117c4:	addeq	r5, r5, #1
   117c8:	streq	r5, [r4]
   117cc:	bne	11870 <__assert_fail@plt+0x908>
   117d0:	ldr	r6, [pc, #1568]	; 11df8 <__assert_fail@plt+0xe90>
   117d4:	ldrb	r3, [r6, #20]
   117d8:	cmp	r3, #0
   117dc:	bne	11b70 <__assert_fail@plt+0xc08>
   117e0:	ldr	r3, [pc, #1600]	; 11e28 <__assert_fail@plt+0xec0>
   117e4:	ldr	r2, [pc, #1600]	; 11e2c <__assert_fail@plt+0xec4>
   117e8:	str	r2, [r3]
   117ec:	ldr	r9, [r4]
   117f0:	cmp	r9, fp
   117f4:	bge	11920 <__assert_fail@plt+0x9b8>
   117f8:	ldr	r8, [pc, #1544]	; 11e08 <__assert_fail@plt+0xea0>
   117fc:	ldr	r7, [pc, #1580]	; 11e30 <__assert_fail@plt+0xec8>
   11800:	ldr	sl, [sp, #20]
   11804:	b	11830 <__assert_fail@plt+0x8c8>
   11808:	ldr	r3, [r4]
   1180c:	ldr	r0, [sl, r3, lsl #2]
   11810:	bl	10f08 <putenv@plt>
   11814:	cmp	r0, #0
   11818:	bne	11cec <__assert_fail@plt+0xd84>
   1181c:	ldr	r9, [r4]
   11820:	add	r9, r9, #1
   11824:	cmp	r9, fp
   11828:	str	r9, [r4]
   1182c:	bge	11920 <__assert_fail@plt+0x9b8>
   11830:	ldr	r5, [sl, r9, lsl #2]
   11834:	mov	r1, #61	; 0x3d
   11838:	mov	r0, r5
   1183c:	bl	10e90 <strchr@plt>
   11840:	subs	r3, r0, #0
   11844:	str	r3, [sp, #24]
   11848:	beq	11988 <__assert_fail@plt+0xa20>
   1184c:	ldrb	r2, [r6, #20]
   11850:	cmp	r2, #0
   11854:	beq	11808 <__assert_fail@plt+0x8a0>
   11858:	mov	r3, r5
   1185c:	mov	r2, r7
   11860:	mov	r1, #1
   11864:	ldr	r0, [r8]
   11868:	bl	10ed8 <__fprintf_chk@plt>
   1186c:	b	11808 <__assert_fail@plt+0x8a0>
   11870:	ldr	r3, [sp, #28]
   11874:	cmp	r3, #0
   11878:	bne	117d0 <__assert_fail@plt+0x868>
   1187c:	ldr	r6, [pc, #1396]	; 11df8 <__assert_fail@plt+0xe90>
   11880:	ldr	sl, [pc, #1408]	; 11e08 <__assert_fail@plt+0xea0>
   11884:	ldr	r9, [pc, #1448]	; 11e34 <__assert_fail@plt+0xecc>
   11888:	ldr	r5, [sp, #28]
   1188c:	b	118ac <__assert_fail@plt+0x944>
   11890:	ldr	r3, [r6, #16]
   11894:	add	r8, r3, r7
   11898:	ldr	r0, [r3, r7]
   1189c:	bl	10f38 <unsetenv@plt>
   118a0:	cmp	r0, #0
   118a4:	bne	11d94 <__assert_fail@plt+0xe2c>
   118a8:	add	r5, r5, #1
   118ac:	ldr	r3, [r6, #8]
   118b0:	cmp	r5, r3
   118b4:	bcs	117ec <__assert_fail@plt+0x884>
   118b8:	ldrb	r3, [r6, #20]
   118bc:	lsl	r7, r5, #2
   118c0:	cmp	r3, #0
   118c4:	beq	11890 <__assert_fail@plt+0x928>
   118c8:	ldr	r3, [r6, #16]
   118cc:	mov	r2, r9
   118d0:	mov	r1, #1
   118d4:	ldr	r3, [r3, r5, lsl #2]
   118d8:	ldr	r0, [sl]
   118dc:	bl	10ed8 <__fprintf_chk@plt>
   118e0:	b	11890 <__assert_fail@plt+0x928>
   118e4:	cmp	sl, #0
   118e8:	addeq	r5, r5, #2
   118ec:	moveq	r8, #1
   118f0:	beq	11310 <__assert_fail@plt+0x3a8>
   118f4:	add	r2, r2, #1
   118f8:	mov	r3, #32
   118fc:	b	11344 <__assert_fail@plt+0x3dc>
   11900:	ldr	r7, [r5]
   11904:	bl	14770 <__assert_fail@plt+0x3808>
   11908:	mov	r2, r6
   1190c:	mov	r1, #1
   11910:	mov	r3, r0
   11914:	mov	r0, r7
   11918:	bl	10ed8 <__fprintf_chk@plt>
   1191c:	b	113fc <__assert_fail@plt+0x494>
   11920:	ldr	r2, [sp, #32]
   11924:	cmp	r9, fp
   11928:	movlt	r3, #0
   1192c:	movge	r3, #1
   11930:	cmp	r2, #0
   11934:	moveq	r3, #0
   11938:	cmp	r3, #0
   1193c:	bne	11ae8 <__assert_fail@plt+0xb80>
   11940:	ldr	r3, [pc, #1248]	; 11e28 <__assert_fail@plt+0xec0>
   11944:	ldr	r2, [sp, #36]	; 0x24
   11948:	ldr	r5, [pc, #1256]	; 11e38 <__assert_fail@plt+0xed0>
   1194c:	ldr	r4, [r3]
   11950:	cmp	r2, #0
   11954:	movne	r6, #0
   11958:	moveq	r6, #10
   1195c:	sub	r4, r4, #4
   11960:	b	11974 <__assert_fail@plt+0xa0c>
   11964:	mov	r3, r6
   11968:	mov	r1, r5
   1196c:	mov	r0, #1
   11970:	bl	10ec0 <__printf_chk@plt>
   11974:	ldr	r2, [r4, #4]!
   11978:	cmp	r2, #0
   1197c:	bne	11964 <__assert_fail@plt+0x9fc>
   11980:	mov	r0, r2
   11984:	b	11a20 <__assert_fail@plt+0xab8>
   11988:	ldr	r3, [sp, #36]	; 0x24
   1198c:	cmp	r9, fp
   11990:	movge	r3, #0
   11994:	andlt	r3, r3, #1
   11998:	cmp	r3, #0
   1199c:	bne	11d88 <__assert_fail@plt+0xe20>
   119a0:	ldr	r3, [sp, #32]
   119a4:	cmp	r3, #0
   119a8:	beq	119c8 <__assert_fail@plt+0xa60>
   119ac:	ldrb	r3, [r6, #20]
   119b0:	cmp	r3, #0
   119b4:	bne	11b10 <__assert_fail@plt+0xba8>
   119b8:	ldr	r0, [sp, #32]
   119bc:	bl	10dc4 <chdir@plt>
   119c0:	cmp	r0, #0
   119c4:	bne	11d38 <__assert_fail@plt+0xdd0>
   119c8:	ldrb	r3, [r6, #20]
   119cc:	cmp	r3, #0
   119d0:	bne	11bf4 <__assert_fail@plt+0xc8c>
   119d4:	ldr	r3, [r4]
   119d8:	ldr	r2, [sp, #20]
   119dc:	add	r1, r2, r3, lsl #2
   119e0:	ldr	r0, [r2, r3, lsl #2]
   119e4:	bl	10d64 <execvp@plt>
   119e8:	bl	10e9c <__errno_location@plt>
   119ec:	ldr	r5, [r0]
   119f0:	cmp	r5, #2
   119f4:	beq	11b8c <__assert_fail@plt+0xc24>
   119f8:	ldr	r3, [r4]
   119fc:	ldr	r2, [sp, #20]
   11a00:	ldr	r0, [r2, r3, lsl #2]
   11a04:	bl	14770 <__assert_fail@plt+0x3808>
   11a08:	mov	r1, r5
   11a0c:	ldr	r2, [pc, #1064]	; 11e3c <__assert_fail@plt+0xed4>
   11a10:	mov	r3, r0
   11a14:	mov	r0, #0
   11a18:	bl	10e18 <error@plt>
   11a1c:	mov	r0, #126	; 0x7e
   11a20:	add	sp, sp, #60	; 0x3c
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a28:	ldr	r3, [pc, #984]	; 11e08 <__assert_fail@plt+0xea0>
   11a2c:	ldr	r0, [sp, #44]	; 0x2c
   11a30:	ldr	r8, [r3]
   11a34:	bl	14770 <__assert_fail@plt+0x3808>
   11a38:	ldr	r3, [sp, #48]	; 0x30
   11a3c:	ldr	r2, [pc, #1020]	; 11e40 <__assert_fail@plt+0xed8>
   11a40:	mov	r1, #1
   11a44:	str	r0, [sp]
   11a48:	mov	r0, r8
   11a4c:	bl	10ed8 <__fprintf_chk@plt>
   11a50:	b	11614 <__assert_fail@plt+0x6ac>
   11a54:	cmp	r2, #0
   11a58:	beq	11adc <__assert_fail@plt+0xb74>
   11a5c:	lsrs	r3, r2, #30
   11a60:	movne	r3, #1
   11a64:	moveq	r3, #0
   11a68:	lsls	r1, r2, #2
   11a6c:	bmi	11a78 <__assert_fail@plt+0xb10>
   11a70:	cmp	r3, #0
   11a74:	beq	11788 <__assert_fail@plt+0x820>
   11a78:	bl	14f28 <__assert_fail@plt+0x3fc0>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #956]	; 11e44 <__assert_fail@plt+0xedc>
   11a84:	mov	r0, r6
   11a88:	bl	10d94 <dcgettext@plt>
   11a8c:	mov	r3, r4
   11a90:	mov	r1, r6
   11a94:	mov	r2, r0
   11a98:	mov	r0, #125	; 0x7d
   11a9c:	bl	10e18 <error@plt>
   11aa0:	add	r2, r2, #1
   11aa4:	mov	r3, #12
   11aa8:	b	11344 <__assert_fail@plt+0x3dc>
   11aac:	add	r2, r2, #1
   11ab0:	mov	r3, #10
   11ab4:	b	11344 <__assert_fail@plt+0x3dc>
   11ab8:	add	r2, r2, #1
   11abc:	mov	r3, #13
   11ac0:	b	11344 <__assert_fail@plt+0x3dc>
   11ac4:	add	r2, r2, #1
   11ac8:	mov	r3, #9
   11acc:	b	11344 <__assert_fail@plt+0x3dc>
   11ad0:	add	r2, r2, #1
   11ad4:	mov	r3, #11
   11ad8:	b	11344 <__assert_fail@plt+0x3dc>
   11adc:	mov	r2, #16
   11ae0:	mov	r1, #64	; 0x40
   11ae4:	b	11788 <__assert_fail@plt+0x820>
   11ae8:	ldr	r1, [pc, #856]	; 11e48 <__assert_fail@plt+0xee0>
   11aec:	mov	r2, #5
   11af0:	mov	r0, #0
   11af4:	bl	10d94 <dcgettext@plt>
   11af8:	mov	r1, #0
   11afc:	mov	r2, r0
   11b00:	mov	r0, r1
   11b04:	bl	10e18 <error@plt>
   11b08:	mov	r0, #125	; 0x7d
   11b0c:	bl	120a8 <__assert_fail@plt+0x1140>
   11b10:	ldr	r3, [pc, #752]	; 11e08 <__assert_fail@plt+0xea0>
   11b14:	ldr	r1, [sp, #32]
   11b18:	mov	r0, #4
   11b1c:	ldr	r5, [r3]
   11b20:	bl	144c8 <__assert_fail@plt+0x3560>
   11b24:	ldr	r2, [pc, #800]	; 11e4c <__assert_fail@plt+0xee4>
   11b28:	mov	r1, #1
   11b2c:	mov	r3, r0
   11b30:	mov	r0, r5
   11b34:	bl	10ed8 <__fprintf_chk@plt>
   11b38:	b	119b8 <__assert_fail@plt+0xa50>
   11b3c:	mov	fp, r3
   11b40:	b	1148c <__assert_fail@plt+0x524>
   11b44:	ldr	r6, [sp, #24]
   11b48:	ldr	r4, [r5]
   11b4c:	add	r9, r6, #8
   11b50:	ldr	r0, [r6, #4]
   11b54:	bl	14770 <__assert_fail@plt+0x3808>
   11b58:	ldr	r2, [pc, #752]	; 11e50 <__assert_fail@plt+0xee8>
   11b5c:	mov	r1, #1
   11b60:	mov	r3, r0
   11b64:	mov	r0, r4
   11b68:	bl	10ed8 <__fprintf_chk@plt>
   11b6c:	b	113f4 <__assert_fail@plt+0x48c>
   11b70:	ldr	r3, [pc, #656]	; 11e08 <__assert_fail@plt+0xea0>
   11b74:	mov	r2, #17
   11b78:	mov	r1, #1
   11b7c:	ldr	r3, [r3]
   11b80:	ldr	r0, [pc, #716]	; 11e54 <__assert_fail@plt+0xeec>
   11b84:	bl	10ddc <fwrite@plt>
   11b88:	b	117e0 <__assert_fail@plt+0x878>
   11b8c:	ldr	r3, [r4]
   11b90:	ldr	r6, [sp, #20]
   11b94:	ldr	r0, [r6, r3, lsl #2]
   11b98:	bl	14770 <__assert_fail@plt+0x3808>
   11b9c:	mov	r1, r5
   11ba0:	ldr	r2, [pc, #660]	; 11e3c <__assert_fail@plt+0xed4>
   11ba4:	mov	r3, r0
   11ba8:	mov	r0, #0
   11bac:	bl	10e18 <error@plt>
   11bb0:	ldr	r3, [r4]
   11bb4:	mov	r1, #32
   11bb8:	ldr	r0, [r6, r3, lsl #2]
   11bbc:	bl	10e90 <strchr@plt>
   11bc0:	cmp	r0, #0
   11bc4:	moveq	r0, #127	; 0x7f
   11bc8:	beq	11a20 <__assert_fail@plt+0xab8>
   11bcc:	mov	r2, #5
   11bd0:	ldr	r1, [pc, #552]	; 11e00 <__assert_fail@plt+0xe98>
   11bd4:	mov	r0, #0
   11bd8:	bl	10d94 <dcgettext@plt>
   11bdc:	mov	r1, #0
   11be0:	mov	r2, r0
   11be4:	mov	r0, r1
   11be8:	bl	10e18 <error@plt>
   11bec:	mov	r0, #127	; 0x7f
   11bf0:	b	11a20 <__assert_fail@plt+0xab8>
   11bf4:	ldr	r1, [sp, #20]
   11bf8:	ldr	r3, [r4]
   11bfc:	ldr	r7, [pc, #516]	; 11e08 <__assert_fail@plt+0xea0>
   11c00:	ldr	r2, [pc, #592]	; 11e58 <__assert_fail@plt+0xef0>
   11c04:	ldr	r3, [r1, r3, lsl #2]
   11c08:	ldr	r0, [r7]
   11c0c:	mov	r1, #1
   11c10:	bl	10ed8 <__fprintf_chk@plt>
   11c14:	ldr	r8, [pc, #576]	; 11e5c <__assert_fail@plt+0xef4>
   11c18:	ldr	r5, [r4]
   11c1c:	b	11c24 <__assert_fail@plt+0xcbc>
   11c20:	add	r5, r5, #1
   11c24:	cmp	r5, fp
   11c28:	bge	119d4 <__assert_fail@plt+0xa6c>
   11c2c:	ldrb	r3, [r6, #20]
   11c30:	cmp	r3, #0
   11c34:	beq	11c20 <__assert_fail@plt+0xcb8>
   11c38:	ldr	r2, [sp, #20]
   11c3c:	ldr	r3, [r4]
   11c40:	ldr	sl, [r7]
   11c44:	ldr	r0, [r2, r5, lsl #2]
   11c48:	sub	r9, r5, r3
   11c4c:	bl	14770 <__assert_fail@plt+0x3808>
   11c50:	mov	r3, r9
   11c54:	mov	r2, r8
   11c58:	mov	r1, #1
   11c5c:	str	r0, [sp]
   11c60:	mov	r0, sl
   11c64:	bl	10ed8 <__fprintf_chk@plt>
   11c68:	b	11c20 <__assert_fail@plt+0xcb8>
   11c6c:	mov	r0, r4
   11c70:	bl	120a8 <__assert_fail@plt+0x1140>
   11c74:	ldr	r1, [pc, #484]	; 11e60 <__assert_fail@plt+0xef8>
   11c78:	mov	r2, #5
   11c7c:	mov	r0, #0
   11c80:	bl	10d94 <dcgettext@plt>
   11c84:	mov	r1, #0
   11c88:	mov	r2, r0
   11c8c:	mov	r0, #125	; 0x7d
   11c90:	bl	10e18 <error@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #452]	; 11e64 <__assert_fail@plt+0xefc>
   11c9c:	b	11c7c <__assert_fail@plt+0xd14>
   11ca0:	ldr	r3, [pc, #448]	; 11e68 <__assert_fail@plt+0xf00>
   11ca4:	mov	r2, #249	; 0xf9
   11ca8:	ldr	r1, [pc, #444]	; 11e6c <__assert_fail@plt+0xf04>
   11cac:	ldr	r0, [pc, #444]	; 11e70 <__assert_fail@plt+0xf08>
   11cb0:	bl	10f68 <__assert_fail@plt>
   11cb4:	ldr	r3, [pc, #428]	; 11e68 <__assert_fail@plt+0xf00>
   11cb8:	mov	r2, #244	; 0xf4
   11cbc:	ldr	r1, [pc, #424]	; 11e6c <__assert_fail@plt+0xf04>
   11cc0:	ldr	r0, [pc, #424]	; 11e70 <__assert_fail@plt+0xf08>
   11cc4:	bl	10f68 <__assert_fail@plt>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #416]	; 11e74 <__assert_fail@plt+0xf0c>
   11cd0:	str	fp, [sp, #20]
   11cd4:	bl	10d94 <dcgettext@plt>
   11cd8:	ldr	r3, [sp, #20]
   11cdc:	mov	r1, sl
   11ce0:	mov	r2, r0
   11ce4:	mov	r0, #125	; 0x7d
   11ce8:	bl	10e18 <error@plt>
   11cec:	ldr	r5, [sp, #24]
   11cf0:	mov	r6, #0
   11cf4:	strb	r6, [r5]
   11cf8:	bl	10e9c <__errno_location@plt>
   11cfc:	ldr	r1, [pc, #372]	; 11e78 <__assert_fail@plt+0xf10>
   11d00:	mov	r2, #5
   11d04:	ldr	r5, [r0]
   11d08:	mov	r0, r6
   11d0c:	bl	10d94 <dcgettext@plt>
   11d10:	ldr	r3, [r4]
   11d14:	ldr	r2, [sp, #20]
   11d18:	mov	r6, r0
   11d1c:	ldr	r0, [r2, r3, lsl #2]
   11d20:	bl	14770 <__assert_fail@plt+0x3808>
   11d24:	mov	r2, r6
   11d28:	mov	r1, r5
   11d2c:	mov	r3, r0
   11d30:	mov	r0, #125	; 0x7d
   11d34:	bl	10e18 <error@plt>
   11d38:	bl	10e9c <__errno_location@plt>
   11d3c:	ldr	r1, [pc, #312]	; 11e7c <__assert_fail@plt+0xf14>
   11d40:	mov	r2, #5
   11d44:	ldr	r4, [r0]
   11d48:	mov	r0, #0
   11d4c:	bl	10d94 <dcgettext@plt>
   11d50:	ldr	r1, [sp, #32]
   11d54:	mov	r5, r0
   11d58:	mov	r0, #4
   11d5c:	bl	144c8 <__assert_fail@plt+0x3560>
   11d60:	mov	r3, r0
   11d64:	mov	r2, r5
   11d68:	mov	r1, r4
   11d6c:	mov	r0, #125	; 0x7d
   11d70:	bl	10e18 <error@plt>
   11d74:	ldr	r3, [pc, #260]	; 11e80 <__assert_fail@plt+0xf18>
   11d78:	mov	r2, #151	; 0x97
   11d7c:	ldr	r1, [pc, #232]	; 11e6c <__assert_fail@plt+0xf04>
   11d80:	ldr	r0, [pc, #252]	; 11e84 <__assert_fail@plt+0xf1c>
   11d84:	bl	10f68 <__assert_fail@plt>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #244]	; 11e88 <__assert_fail@plt+0xf20>
   11d90:	b	11af4 <__assert_fail@plt+0xb8c>
   11d94:	bl	10e9c <__errno_location@plt>
   11d98:	mov	r2, #5
   11d9c:	ldr	r1, [pc, #232]	; 11e8c <__assert_fail@plt+0xf24>
   11da0:	ldr	r4, [r0]
   11da4:	mov	r0, #0
   11da8:	bl	10d94 <dcgettext@plt>
   11dac:	mov	r5, r0
   11db0:	ldr	r0, [r8]
   11db4:	bl	14770 <__assert_fail@plt+0x3808>
   11db8:	b	11d60 <__assert_fail@plt+0xdf8>
   11dbc:	andeq	r6, r1, r4, ror r2
   11dc0:	andeq	r5, r1, ip, lsr #21
   11dc4:	andeq	r5, r1, r0, lsl #20
   11dc8:	andeq	r7, r2, ip, ror #1
   11dcc:	andeq	r2, r1, r4, lsr r4
   11dd0:	andeq	r5, r1, r8, lsl #11
   11dd4:	andeq	r7, r2, r0, asr r1
   11dd8:	andeq	r5, r1, r8, asr #24
   11ddc:	andeq	r5, r1, r8, asr ip
   11de0:	andeq	r7, r2, r8, ror #1
   11de4:	andeq	r7, r2, ip, asr #2
   11de8:	andeq	r5, r1, r8, ror #24
   11dec:	andeq	r5, r1, r8, asr #12
   11df0:	strdeq	r5, [r1], -ip
   11df4:	andeq	r7, r2, r0, asr #2
   11df8:	andeq	r7, r2, r8, asr r1
   11dfc:	andeq	r5, r1, r4, lsl #24
   11e00:	andeq	r5, r1, ip, lsl ip
   11e04:	andeq	r5, r1, r4, lsl #23
   11e08:	andeq	r7, r2, r8, asr #2
   11e0c:	ldrdeq	r5, [r1], -r4
   11e10:	strdeq	r5, [r1], -r4
   11e14:	andeq	r5, r1, r0, ror #22
   11e18:	andeq	r5, r1, ip, lsl #23
   11e1c:			; <UNDEFINED> instruction: 0x00015bb0
   11e20:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   11e24:	andeq	r5, r1, ip, ror ip
   11e28:	andeq	r7, r2, r4, lsr r1
   11e2c:	andeq	r7, r2, r0, ror r1
   11e30:			; <UNDEFINED> instruction: 0x00015cb4
   11e34:	muleq	r1, r4, ip
   11e38:	andeq	r5, r1, r4, lsr #26
   11e3c:	andeq	r5, r1, r4, ror lr
   11e40:	muleq	r1, r4, fp
   11e44:	andeq	r5, r1, ip, ror sp
   11e48:	strdeq	r5, [r1], -ip
   11e4c:	andeq	r5, r1, ip, lsr #26
   11e50:	andeq	r5, r1, r4, ror #23
   11e54:	andeq	r5, r1, r0, lsl #25
   11e58:	andeq	r5, r1, ip, asr sp
   11e5c:	andeq	r5, r1, ip, ror #26
   11e60:	andeq	r5, r1, ip, asr #21
   11e64:	strdeq	r5, [r1], -ip
   11e68:	andeq	r5, r1, r8, ror #10
   11e6c:	andeq	r5, r1, r8, lsr #12
   11e70:	andeq	r5, r1, r0, asr #21
   11e74:	andeq	r5, r1, r8, lsr #22
   11e78:	andeq	r5, r1, r4, asr #25
   11e7c:	andeq	r5, r1, ip, lsr sp
   11e80:	andeq	r5, r1, ip, ror r5
   11e84:	muleq	r1, r0, fp
   11e88:	ldrdeq	r5, [r1], -r4
   11e8c:	andeq	r5, r1, r4, lsr #25
   11e90:	mov	fp, #0
   11e94:	mov	lr, #0
   11e98:	pop	{r1}		; (ldr r1, [sp], #4)
   11e9c:	mov	r2, sp
   11ea0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ea4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ea8:	ldr	ip, [pc, #16]	; 11ec0 <__assert_fail@plt+0xf58>
   11eac:	push	{ip}		; (str ip, [sp, #-4]!)
   11eb0:	ldr	r0, [pc, #12]	; 11ec4 <__assert_fail@plt+0xf5c>
   11eb4:	ldr	r3, [pc, #12]	; 11ec8 <__assert_fail@plt+0xf60>
   11eb8:	bl	10e3c <__libc_start_main@plt>
   11ebc:	bl	10f50 <abort@plt>
   11ec0:	strdeq	r5, [r1], -r8
   11ec4:	andeq	r0, r1, r4, ror pc
   11ec8:	muleq	r1, r8, r4
   11ecc:	ldr	r3, [pc, #20]	; 11ee8 <__assert_fail@plt+0xf80>
   11ed0:	ldr	r2, [pc, #20]	; 11eec <__assert_fail@plt+0xf84>
   11ed4:	add	r3, pc, r3
   11ed8:	ldr	r2, [r3, r2]
   11edc:	cmp	r2, #0
   11ee0:	bxeq	lr
   11ee4:	b	10e54 <__gmon_start__@plt>
   11ee8:	andeq	r5, r1, r4, lsr #2
   11eec:	ldrdeq	r0, [r0], -ip
   11ef0:	ldr	r0, [pc, #24]	; 11f10 <__assert_fail@plt+0xfa8>
   11ef4:	ldr	r3, [pc, #24]	; 11f14 <__assert_fail@plt+0xfac>
   11ef8:	cmp	r3, r0
   11efc:	bxeq	lr
   11f00:	ldr	r3, [pc, #16]	; 11f18 <__assert_fail@plt+0xfb0>
   11f04:	cmp	r3, #0
   11f08:	bxeq	lr
   11f0c:	bx	r3
   11f10:	andeq	r7, r2, r0, lsr r1
   11f14:	andeq	r7, r2, r0, lsr r1
   11f18:	andeq	r0, r0, r0
   11f1c:	ldr	r0, [pc, #36]	; 11f48 <__assert_fail@plt+0xfe0>
   11f20:	ldr	r1, [pc, #36]	; 11f4c <__assert_fail@plt+0xfe4>
   11f24:	sub	r1, r1, r0
   11f28:	asr	r1, r1, #2
   11f2c:	add	r1, r1, r1, lsr #31
   11f30:	asrs	r1, r1, #1
   11f34:	bxeq	lr
   11f38:	ldr	r3, [pc, #16]	; 11f50 <__assert_fail@plt+0xfe8>
   11f3c:	cmp	r3, #0
   11f40:	bxeq	lr
   11f44:	bx	r3
   11f48:	andeq	r7, r2, r0, lsr r1
   11f4c:	andeq	r7, r2, r0, lsr r1
   11f50:	andeq	r0, r0, r0
   11f54:	push	{r4, lr}
   11f58:	ldr	r4, [pc, #24]	; 11f78 <__assert_fail@plt+0x1010>
   11f5c:	ldrb	r3, [r4]
   11f60:	cmp	r3, #0
   11f64:	popne	{r4, pc}
   11f68:	bl	11ef0 <__assert_fail@plt+0xf88>
   11f6c:	mov	r3, #1
   11f70:	strb	r3, [r4]
   11f74:	pop	{r4, pc}
   11f78:	andeq	r7, r2, r4, asr r1
   11f7c:	b	11f1c <__assert_fail@plt+0xfb4>
   11f80:	push	{r4, r5, r6, lr}
   11f84:	subs	r4, r0, #0
   11f88:	beq	12084 <__assert_fail@plt+0x111c>
   11f8c:	ldrb	r3, [r4]
   11f90:	cmp	r3, #36	; 0x24
   11f94:	bne	12084 <__assert_fail@plt+0x111c>
   11f98:	ldrb	r3, [r4, #1]
   11f9c:	cmp	r3, #123	; 0x7b
   11fa0:	bne	11ffc <__assert_fail@plt+0x1094>
   11fa4:	ldrb	r3, [r4, #2]
   11fa8:	cmp	r3, #65	; 0x41
   11fac:	bcc	12008 <__assert_fail@plt+0x10a0>
   11fb0:	cmp	r3, #90	; 0x5a
   11fb4:	bls	11fc4 <__assert_fail@plt+0x105c>
   11fb8:	sub	r2, r3, #97	; 0x61
   11fbc:	cmp	r2, #25
   11fc0:	bhi	12008 <__assert_fail@plt+0x10a0>
   11fc4:	add	r2, r4, #3
   11fc8:	mov	r1, r2
   11fcc:	ldrb	r3, [r2], #1
   11fd0:	cmp	r3, #90	; 0x5a
   11fd4:	bhi	12054 <__assert_fail@plt+0x10ec>
   11fd8:	cmp	r3, #65	; 0x41
   11fdc:	bcs	11fc8 <__assert_fail@plt+0x1060>
   11fe0:	sub	r0, r3, #48	; 0x30
   11fe4:	cmp	r0, #9
   11fe8:	bls	11fc8 <__assert_fail@plt+0x1060>
   11fec:	cmp	r3, #95	; 0x5f
   11ff0:	beq	11fc8 <__assert_fail@plt+0x1060>
   11ff4:	cmp	r3, #125	; 0x7d
   11ff8:	beq	12014 <__assert_fail@plt+0x10ac>
   11ffc:	mov	r3, #0
   12000:	mov	r0, r3
   12004:	pop	{r4, r5, r6, pc}
   12008:	cmp	r3, #95	; 0x5f
   1200c:	beq	11fc4 <__assert_fail@plt+0x105c>
   12010:	b	11ffc <__assert_fail@plt+0x1094>
   12014:	ldr	r6, [pc, #124]	; 12098 <__assert_fail@plt+0x1130>
   12018:	sub	r1, r1, r4
   1201c:	sub	r5, r1, #2
   12020:	ldr	r2, [r6, #4]
   12024:	ldr	r3, [r6]
   12028:	cmp	r5, r2
   1202c:	bcs	12064 <__assert_fail@plt+0x10fc>
   12030:	mov	r2, r5
   12034:	add	r1, r4, #2
   12038:	mov	r0, r3
   1203c:	bl	10d58 <memcpy@plt>
   12040:	mov	r2, #0
   12044:	mov	r3, r0
   12048:	strb	r2, [r0, r5]
   1204c:	mov	r0, r3
   12050:	pop	{r4, r5, r6, pc}
   12054:	sub	r0, r3, #97	; 0x61
   12058:	cmp	r0, #25
   1205c:	bhi	11fec <__assert_fail@plt+0x1084>
   12060:	b	11fc8 <__assert_fail@plt+0x1060>
   12064:	sub	r2, r1, #1
   12068:	mov	r0, r3
   1206c:	mov	r1, r2
   12070:	str	r2, [r6, #4]
   12074:	bl	14d3c <__assert_fail@plt+0x3dd4>
   12078:	mov	r3, r0
   1207c:	str	r0, [r6]
   12080:	b	12030 <__assert_fail@plt+0x10c8>
   12084:	ldr	r3, [pc, #16]	; 1209c <__assert_fail@plt+0x1134>
   12088:	mov	r2, #162	; 0xa2
   1208c:	ldr	r1, [pc, #12]	; 120a0 <__assert_fail@plt+0x1138>
   12090:	ldr	r0, [pc, #12]	; 120a4 <__assert_fail@plt+0x113c>
   12094:	bl	10f68 <__assert_fail@plt>
   12098:	andeq	r7, r2, r8, asr r1
   1209c:	andeq	r5, r1, r0, lsr #10
   120a0:	andeq	r5, r1, r8, lsr #12
   120a4:	andeq	r5, r1, r4, lsr r6
   120a8:	ldr	r3, [pc, #768]	; 123b0 <__assert_fail@plt+0x1448>
   120ac:	push	{r7, lr}
   120b0:	sub	sp, sp, #64	; 0x40
   120b4:	ldr	r3, [r3]
   120b8:	subs	r4, r0, #0
   120bc:	str	r3, [sp, #60]	; 0x3c
   120c0:	beq	120fc <__assert_fail@plt+0x1194>
   120c4:	ldr	r3, [pc, #744]	; 123b4 <__assert_fail@plt+0x144c>
   120c8:	mov	r2, #5
   120cc:	ldr	r1, [pc, #740]	; 123b8 <__assert_fail@plt+0x1450>
   120d0:	mov	r0, #0
   120d4:	ldr	r5, [r3]
   120d8:	bl	10d94 <dcgettext@plt>
   120dc:	ldr	r3, [pc, #728]	; 123bc <__assert_fail@plt+0x1454>
   120e0:	mov	r1, #1
   120e4:	ldr	r3, [r3]
   120e8:	mov	r2, r0
   120ec:	mov	r0, r5
   120f0:	bl	10ed8 <__fprintf_chk@plt>
   120f4:	mov	r0, r4
   120f8:	bl	10e78 <exit@plt>
   120fc:	mov	r2, #5
   12100:	ldr	r1, [pc, #696]	; 123c0 <__assert_fail@plt+0x1458>
   12104:	bl	10d94 <dcgettext@plt>
   12108:	ldr	r3, [pc, #684]	; 123bc <__assert_fail@plt+0x1454>
   1210c:	ldr	r5, [pc, #688]	; 123c4 <__assert_fail@plt+0x145c>
   12110:	ldr	r2, [r3]
   12114:	mov	r1, r0
   12118:	mov	r0, #1
   1211c:	bl	10ec0 <__printf_chk@plt>
   12120:	mov	r2, #5
   12124:	ldr	r1, [pc, #668]	; 123c8 <__assert_fail@plt+0x1460>
   12128:	mov	r0, r4
   1212c:	bl	10d94 <dcgettext@plt>
   12130:	ldr	r1, [r5]
   12134:	bl	10d10 <fputs_unlocked@plt>
   12138:	mov	r2, #5
   1213c:	ldr	r1, [pc, #648]	; 123cc <__assert_fail@plt+0x1464>
   12140:	mov	r0, r4
   12144:	bl	10d94 <dcgettext@plt>
   12148:	ldr	r1, [r5]
   1214c:	bl	10d10 <fputs_unlocked@plt>
   12150:	mov	r2, #5
   12154:	ldr	r1, [pc, #628]	; 123d0 <__assert_fail@plt+0x1468>
   12158:	mov	r0, r4
   1215c:	bl	10d94 <dcgettext@plt>
   12160:	ldr	r1, [r5]
   12164:	bl	10d10 <fputs_unlocked@plt>
   12168:	mov	r2, #5
   1216c:	ldr	r1, [pc, #608]	; 123d4 <__assert_fail@plt+0x146c>
   12170:	mov	r0, r4
   12174:	bl	10d94 <dcgettext@plt>
   12178:	ldr	r1, [r5]
   1217c:	bl	10d10 <fputs_unlocked@plt>
   12180:	mov	r2, #5
   12184:	ldr	r1, [pc, #588]	; 123d8 <__assert_fail@plt+0x1470>
   12188:	mov	r0, r4
   1218c:	bl	10d94 <dcgettext@plt>
   12190:	ldr	r1, [r5]
   12194:	bl	10d10 <fputs_unlocked@plt>
   12198:	mov	r2, #5
   1219c:	ldr	r1, [pc, #568]	; 123dc <__assert_fail@plt+0x1474>
   121a0:	mov	r0, r4
   121a4:	bl	10d94 <dcgettext@plt>
   121a8:	ldr	r1, [r5]
   121ac:	bl	10d10 <fputs_unlocked@plt>
   121b0:	mov	r2, #5
   121b4:	ldr	r1, [pc, #548]	; 123e0 <__assert_fail@plt+0x1478>
   121b8:	mov	r0, r4
   121bc:	bl	10d94 <dcgettext@plt>
   121c0:	ldr	r1, [r5]
   121c4:	bl	10d10 <fputs_unlocked@plt>
   121c8:	mov	r2, #5
   121cc:	ldr	r1, [pc, #528]	; 123e4 <__assert_fail@plt+0x147c>
   121d0:	mov	r0, r4
   121d4:	bl	10d94 <dcgettext@plt>
   121d8:	ldr	r1, [r5]
   121dc:	bl	10d10 <fputs_unlocked@plt>
   121e0:	ldr	lr, [pc, #512]	; 123e8 <__assert_fail@plt+0x1480>
   121e4:	add	ip, sp, #4
   121e8:	ldm	lr!, {r0, r1, r2, r3}
   121ec:	stmia	ip!, {r0, r1, r2, r3}
   121f0:	ldm	lr!, {r0, r1, r2, r3}
   121f4:	ldr	r6, [sp, #4]
   121f8:	stmia	ip!, {r0, r1, r2, r3}
   121fc:	cmp	r6, #0
   12200:	ldm	lr!, {r0, r1, r2, r3}
   12204:	addeq	r5, sp, #4
   12208:	stmia	ip!, {r0, r1, r2, r3}
   1220c:	ldm	lr, {r0, r1}
   12210:	stm	ip, {r0, r1}
   12214:	beq	12244 <__assert_fail@plt+0x12dc>
   12218:	ldr	r7, [pc, #460]	; 123ec <__assert_fail@plt+0x1484>
   1221c:	add	r5, sp, #4
   12220:	b	12230 <__assert_fail@plt+0x12c8>
   12224:	ldr	r6, [r5, #8]!
   12228:	cmp	r6, #0
   1222c:	beq	12244 <__assert_fail@plt+0x12dc>
   12230:	mov	r1, r6
   12234:	mov	r0, r7
   12238:	bl	10d28 <strcmp@plt>
   1223c:	cmp	r0, #0
   12240:	bne	12224 <__assert_fail@plt+0x12bc>
   12244:	ldr	r5, [r5, #4]
   12248:	mov	r2, #5
   1224c:	cmp	r5, #0
   12250:	ldr	r1, [pc, #408]	; 123f0 <__assert_fail@plt+0x1488>
   12254:	beq	122fc <__assert_fail@plt+0x1394>
   12258:	mov	r0, #0
   1225c:	bl	10d94 <dcgettext@plt>
   12260:	ldr	r3, [pc, #396]	; 123f4 <__assert_fail@plt+0x148c>
   12264:	ldr	r2, [pc, #396]	; 123f8 <__assert_fail@plt+0x1490>
   12268:	mov	r1, r0
   1226c:	mov	r0, #1
   12270:	bl	10ec0 <__printf_chk@plt>
   12274:	mov	r1, #0
   12278:	mov	r0, #5
   1227c:	bl	10efc <setlocale@plt>
   12280:	cmp	r0, #0
   12284:	ldreq	r6, [pc, #352]	; 123ec <__assert_fail@plt+0x1484>
   12288:	beq	122a4 <__assert_fail@plt+0x133c>
   1228c:	mov	r2, #3
   12290:	ldr	r1, [pc, #356]	; 123fc <__assert_fail@plt+0x1494>
   12294:	bl	10f44 <strncmp@plt>
   12298:	ldr	r6, [pc, #332]	; 123ec <__assert_fail@plt+0x1484>
   1229c:	cmp	r0, #0
   122a0:	bne	1238c <__assert_fail@plt+0x1424>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #336]	; 12400 <__assert_fail@plt+0x1498>
   122ac:	mov	r0, #0
   122b0:	bl	10d94 <dcgettext@plt>
   122b4:	ldr	r3, [pc, #304]	; 123ec <__assert_fail@plt+0x1484>
   122b8:	ldr	r2, [pc, #308]	; 123f4 <__assert_fail@plt+0x148c>
   122bc:	mov	r1, r0
   122c0:	mov	r0, #1
   122c4:	bl	10ec0 <__printf_chk@plt>
   122c8:	mov	r2, #5
   122cc:	ldr	r1, [pc, #304]	; 12404 <__assert_fail@plt+0x149c>
   122d0:	mov	r0, #0
   122d4:	bl	10d94 <dcgettext@plt>
   122d8:	ldr	r2, [pc, #296]	; 12408 <__assert_fail@plt+0x14a0>
   122dc:	cmp	r5, r6
   122e0:	ldr	r3, [pc, #292]	; 1240c <__assert_fail@plt+0x14a4>
   122e4:	movne	r3, r2
   122e8:	mov	r1, r0
   122ec:	mov	r2, r5
   122f0:	mov	r0, #1
   122f4:	bl	10ec0 <__printf_chk@plt>
   122f8:	b	120f4 <__assert_fail@plt+0x118c>
   122fc:	mov	r0, r5
   12300:	bl	10d94 <dcgettext@plt>
   12304:	ldr	r3, [pc, #232]	; 123f4 <__assert_fail@plt+0x148c>
   12308:	ldr	r2, [pc, #232]	; 123f8 <__assert_fail@plt+0x1490>
   1230c:	mov	r1, r0
   12310:	mov	r0, #1
   12314:	bl	10ec0 <__printf_chk@plt>
   12318:	mov	r1, r5
   1231c:	mov	r0, #5
   12320:	bl	10efc <setlocale@plt>
   12324:	cmp	r0, #0
   12328:	beq	12340 <__assert_fail@plt+0x13d8>
   1232c:	mov	r2, #3
   12330:	ldr	r1, [pc, #196]	; 123fc <__assert_fail@plt+0x1494>
   12334:	bl	10f44 <strncmp@plt>
   12338:	cmp	r0, #0
   1233c:	bne	12384 <__assert_fail@plt+0x141c>
   12340:	mov	r2, #5
   12344:	ldr	r1, [pc, #180]	; 12400 <__assert_fail@plt+0x1498>
   12348:	mov	r0, #0
   1234c:	bl	10d94 <dcgettext@plt>
   12350:	ldr	r3, [pc, #148]	; 123ec <__assert_fail@plt+0x1484>
   12354:	ldr	r2, [pc, #152]	; 123f4 <__assert_fail@plt+0x148c>
   12358:	mov	r5, r3
   1235c:	mov	r1, r0
   12360:	mov	r0, #1
   12364:	bl	10ec0 <__printf_chk@plt>
   12368:	ldr	r1, [pc, #148]	; 12404 <__assert_fail@plt+0x149c>
   1236c:	mov	r2, #5
   12370:	mov	r0, #0
   12374:	bl	10d94 <dcgettext@plt>
   12378:	ldr	r3, [pc, #140]	; 1240c <__assert_fail@plt+0x14a4>
   1237c:	mov	r1, r0
   12380:	b	122ec <__assert_fail@plt+0x1384>
   12384:	ldr	r6, [pc, #96]	; 123ec <__assert_fail@plt+0x1484>
   12388:	mov	r5, r6
   1238c:	mov	r2, #5
   12390:	ldr	r1, [pc, #120]	; 12410 <__assert_fail@plt+0x14a8>
   12394:	mov	r0, #0
   12398:	bl	10d94 <dcgettext@plt>
   1239c:	ldr	r2, [pc, #72]	; 123ec <__assert_fail@plt+0x1484>
   123a0:	mov	r1, r0
   123a4:	mov	r0, #1
   123a8:	bl	10ec0 <__printf_chk@plt>
   123ac:	b	122a4 <__assert_fail@plt+0x133c>
   123b0:	andeq	r6, r2, r8, lsl #30
   123b4:	andeq	r7, r2, r8, asr #2
   123b8:	andeq	r5, r1, ip, asr #12
   123bc:	andeq	r7, r2, ip, ror r1
   123c0:	andeq	r5, r1, r4, ror r6
   123c4:	andeq	r7, r2, ip, asr #2
   123c8:			; <UNDEFINED> instruction: 0x000156b4
   123cc:	strdeq	r5, [r1], -r0
   123d0:	andeq	r5, r1, ip, lsr r7
   123d4:	strdeq	r5, [r1], -r8
   123d8:	andeq	r5, r1, r0, lsr r8
   123dc:	andeq	r5, r1, ip, lsl #18
   123e0:	andeq	r5, r1, ip, lsr r9
   123e4:	andeq	r5, r1, r4, ror r9
   123e8:	andeq	r5, r1, r0, lsr r5
   123ec:	andeq	r5, r1, r8, asr #12
   123f0:			; <UNDEFINED> instruction: 0x000159bc
   123f4:	ldrdeq	r5, [r1], -r4
   123f8:	strdeq	r5, [r1], -ip
   123fc:	andeq	r5, r1, ip, lsl #20
   12400:	andeq	r5, r1, r8, asr sl
   12404:	andeq	r5, r1, r8, ror sl
   12408:	andeq	r6, r1, r4, ror r2
   1240c:	andeq	r5, r1, r4, lsr #27
   12410:	andeq	r5, r1, r0, lsl sl
   12414:	ldr	r3, [pc, #4]	; 12420 <__assert_fail@plt+0x14b8>
   12418:	str	r0, [r3]
   1241c:	bx	lr
   12420:	andeq	r7, r2, r4, ror r1
   12424:	ldr	r3, [pc, #4]	; 12430 <__assert_fail@plt+0x14c8>
   12428:	strb	r0, [r3, #4]
   1242c:	bx	lr
   12430:	andeq	r7, r2, r4, ror r1
   12434:	ldr	r3, [pc, #180]	; 124f0 <__assert_fail@plt+0x1588>
   12438:	push	{r4, r5, r6, lr}
   1243c:	sub	sp, sp, #8
   12440:	ldr	r0, [r3]
   12444:	bl	14fe8 <__assert_fail@plt+0x4080>
   12448:	cmp	r0, #0
   1244c:	beq	12474 <__assert_fail@plt+0x150c>
   12450:	bl	10e9c <__errno_location@plt>
   12454:	ldr	r5, [pc, #152]	; 124f4 <__assert_fail@plt+0x158c>
   12458:	ldrb	r3, [r5, #4]
   1245c:	cmp	r3, #0
   12460:	mov	r4, r0
   12464:	beq	12490 <__assert_fail@plt+0x1528>
   12468:	ldr	r3, [r0]
   1246c:	cmp	r3, #32
   12470:	bne	12490 <__assert_fail@plt+0x1528>
   12474:	ldr	r3, [pc, #124]	; 124f8 <__assert_fail@plt+0x1590>
   12478:	ldr	r0, [r3]
   1247c:	bl	14fe8 <__assert_fail@plt+0x4080>
   12480:	cmp	r0, #0
   12484:	bne	124d0 <__assert_fail@plt+0x1568>
   12488:	add	sp, sp, #8
   1248c:	pop	{r4, r5, r6, pc}
   12490:	mov	r2, #5
   12494:	ldr	r1, [pc, #96]	; 124fc <__assert_fail@plt+0x1594>
   12498:	mov	r0, #0
   1249c:	bl	10d94 <dcgettext@plt>
   124a0:	mov	r6, r0
   124a4:	ldr	r0, [r5]
   124a8:	cmp	r0, #0
   124ac:	beq	124dc <__assert_fail@plt+0x1574>
   124b0:	ldr	r4, [r4]
   124b4:	bl	14590 <__assert_fail@plt+0x3628>
   124b8:	mov	r1, r4
   124bc:	str	r6, [sp]
   124c0:	ldr	r2, [pc, #56]	; 12500 <__assert_fail@plt+0x1598>
   124c4:	mov	r3, r0
   124c8:	mov	r0, #0
   124cc:	bl	10e18 <error@plt>
   124d0:	ldr	r3, [pc, #44]	; 12504 <__assert_fail@plt+0x159c>
   124d4:	ldr	r0, [r3]
   124d8:	bl	10d4c <_exit@plt>
   124dc:	mov	r3, r6
   124e0:	ldr	r1, [r4]
   124e4:	ldr	r2, [pc, #28]	; 12508 <__assert_fail@plt+0x15a0>
   124e8:	bl	10e18 <error@plt>
   124ec:	b	124d0 <__assert_fail@plt+0x1568>
   124f0:	andeq	r7, r2, ip, asr #2
   124f4:	andeq	r7, r2, r4, ror r1
   124f8:	andeq	r7, r2, r8, asr #2
   124fc:	andeq	r5, r1, r4, ror #28
   12500:	andeq	r5, r1, r0, ror lr
   12504:	andeq	r7, r2, ip, ror #1
   12508:	andeq	r5, r1, r4, ror lr
   1250c:	push	{r4, r5, r6, lr}
   12510:	subs	r4, r0, #0
   12514:	beq	12588 <__assert_fail@plt+0x1620>
   12518:	mov	r1, #47	; 0x2f
   1251c:	bl	10f14 <strrchr@plt>
   12520:	subs	r5, r0, #0
   12524:	beq	12574 <__assert_fail@plt+0x160c>
   12528:	add	r6, r5, #1
   1252c:	sub	r3, r6, r4
   12530:	cmp	r3, #6
   12534:	ble	12574 <__assert_fail@plt+0x160c>
   12538:	mov	r2, #7
   1253c:	ldr	r1, [pc, #96]	; 125a4 <__assert_fail@plt+0x163c>
   12540:	sub	r0, r5, #6
   12544:	bl	10f44 <strncmp@plt>
   12548:	cmp	r0, #0
   1254c:	bne	12574 <__assert_fail@plt+0x160c>
   12550:	mov	r2, #3
   12554:	ldr	r1, [pc, #76]	; 125a8 <__assert_fail@plt+0x1640>
   12558:	mov	r0, r6
   1255c:	bl	10f44 <strncmp@plt>
   12560:	cmp	r0, #0
   12564:	movne	r4, r6
   12568:	ldreq	r3, [pc, #60]	; 125ac <__assert_fail@plt+0x1644>
   1256c:	addeq	r4, r5, #4
   12570:	streq	r4, [r3]
   12574:	ldr	r2, [pc, #52]	; 125b0 <__assert_fail@plt+0x1648>
   12578:	ldr	r3, [pc, #52]	; 125b4 <__assert_fail@plt+0x164c>
   1257c:	str	r4, [r2]
   12580:	str	r4, [r3]
   12584:	pop	{r4, r5, r6, pc}
   12588:	ldr	r3, [pc, #40]	; 125b8 <__assert_fail@plt+0x1650>
   1258c:	mov	r2, #55	; 0x37
   12590:	mov	r1, #1
   12594:	ldr	r3, [r3]
   12598:	ldr	r0, [pc, #28]	; 125bc <__assert_fail@plt+0x1654>
   1259c:	bl	10ddc <fwrite@plt>
   125a0:	bl	10f50 <abort@plt>
   125a4:			; <UNDEFINED> instruction: 0x00015eb0
   125a8:			; <UNDEFINED> instruction: 0x00015eb8
   125ac:	andeq	r7, r2, r0, lsr r1
   125b0:	andeq	r7, r2, ip, ror r1
   125b4:	andeq	r7, r2, r8, lsr r1
   125b8:	andeq	r7, r2, r8, asr #2
   125bc:	andeq	r5, r1, r8, ror lr
   125c0:	push	{r4, lr}
   125c4:	mov	r2, #48	; 0x30
   125c8:	mov	r4, r1
   125cc:	mov	r1, #0
   125d0:	bl	10eb4 <memset@plt>
   125d4:	cmp	r4, #10
   125d8:	beq	125e4 <__assert_fail@plt+0x167c>
   125dc:	str	r4, [r0]
   125e0:	pop	{r4, pc}
   125e4:	bl	10f50 <abort@plt>
   125e8:	push	{r4, r5, r6, lr}
   125ec:	mov	r2, #5
   125f0:	mov	r5, r0
   125f4:	mov	r6, r1
   125f8:	mov	r1, r0
   125fc:	mov	r0, #0
   12600:	bl	10d94 <dcgettext@plt>
   12604:	cmp	r5, r0
   12608:	mov	r4, r0
   1260c:	beq	12618 <__assert_fail@plt+0x16b0>
   12610:	mov	r0, r4
   12614:	pop	{r4, r5, r6, pc}
   12618:	bl	150a8 <__assert_fail@plt+0x4140>
   1261c:	ldrb	r3, [r0]
   12620:	bic	r3, r3, #32
   12624:	cmp	r3, #85	; 0x55
   12628:	bne	12688 <__assert_fail@plt+0x1720>
   1262c:	ldrb	r3, [r0, #1]
   12630:	bic	r3, r3, #32
   12634:	cmp	r3, #84	; 0x54
   12638:	bne	12700 <__assert_fail@plt+0x1798>
   1263c:	ldrb	r3, [r0, #2]
   12640:	bic	r3, r3, #32
   12644:	cmp	r3, #70	; 0x46
   12648:	bne	12700 <__assert_fail@plt+0x1798>
   1264c:	ldrb	r3, [r0, #3]
   12650:	cmp	r3, #45	; 0x2d
   12654:	bne	12700 <__assert_fail@plt+0x1798>
   12658:	ldrb	r3, [r0, #4]
   1265c:	cmp	r3, #56	; 0x38
   12660:	bne	12700 <__assert_fail@plt+0x1798>
   12664:	ldrb	r3, [r0, #5]
   12668:	cmp	r3, #0
   1266c:	bne	12700 <__assert_fail@plt+0x1798>
   12670:	ldrb	r2, [r4]
   12674:	ldr	r3, [pc, #156]	; 12718 <__assert_fail@plt+0x17b0>
   12678:	ldr	r4, [pc, #156]	; 1271c <__assert_fail@plt+0x17b4>
   1267c:	cmp	r2, #96	; 0x60
   12680:	movne	r4, r3
   12684:	b	12610 <__assert_fail@plt+0x16a8>
   12688:	cmp	r3, #71	; 0x47
   1268c:	bne	12700 <__assert_fail@plt+0x1798>
   12690:	ldrb	r3, [r0, #1]
   12694:	bic	r3, r3, #32
   12698:	cmp	r3, #66	; 0x42
   1269c:	bne	12700 <__assert_fail@plt+0x1798>
   126a0:	ldrb	r3, [r0, #2]
   126a4:	cmp	r3, #49	; 0x31
   126a8:	bne	12700 <__assert_fail@plt+0x1798>
   126ac:	ldrb	r3, [r0, #3]
   126b0:	cmp	r3, #56	; 0x38
   126b4:	bne	12700 <__assert_fail@plt+0x1798>
   126b8:	ldrb	r3, [r0, #4]
   126bc:	cmp	r3, #48	; 0x30
   126c0:	bne	12700 <__assert_fail@plt+0x1798>
   126c4:	ldrb	r3, [r0, #5]
   126c8:	cmp	r3, #51	; 0x33
   126cc:	bne	12700 <__assert_fail@plt+0x1798>
   126d0:	ldrb	r3, [r0, #6]
   126d4:	cmp	r3, #48	; 0x30
   126d8:	bne	12700 <__assert_fail@plt+0x1798>
   126dc:	ldrb	r3, [r0, #7]
   126e0:	cmp	r3, #0
   126e4:	bne	12700 <__assert_fail@plt+0x1798>
   126e8:	ldrb	r2, [r4]
   126ec:	ldr	r3, [pc, #44]	; 12720 <__assert_fail@plt+0x17b8>
   126f0:	ldr	r4, [pc, #44]	; 12724 <__assert_fail@plt+0x17bc>
   126f4:	cmp	r2, #96	; 0x60
   126f8:	movne	r4, r3
   126fc:	b	12610 <__assert_fail@plt+0x16a8>
   12700:	ldr	r3, [pc, #32]	; 12728 <__assert_fail@plt+0x17c0>
   12704:	ldr	r4, [pc, #32]	; 1272c <__assert_fail@plt+0x17c4>
   12708:	cmp	r6, #9
   1270c:	movne	r4, r3
   12710:	mov	r0, r4
   12714:	pop	{r4, r5, r6, pc}
   12718:	andeq	r5, r1, r4, lsl pc
   1271c:	andeq	r5, r1, r0, lsr #30
   12720:	andeq	r5, r1, r8, lsl pc
   12724:	andeq	r5, r1, ip, lsl pc
   12728:	andeq	r5, r1, r4, lsr #30
   1272c:	andeq	r5, r1, r0, lsl pc
   12730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12734:	sub	sp, sp, #124	; 0x7c
   12738:	ldr	ip, [pc, #3576]	; 13538 <__assert_fail@plt+0x25d0>
   1273c:	str	r3, [sp, #24]
   12740:	ldr	r3, [sp, #168]	; 0xa8
   12744:	ldr	ip, [ip]
   12748:	str	r3, [sp, #56]	; 0x38
   1274c:	ldr	r3, [sp, #172]	; 0xac
   12750:	ldr	r8, [sp, #160]	; 0xa0
   12754:	str	r3, [sp, #80]	; 0x50
   12758:	ldr	r3, [sp, #176]	; 0xb0
   1275c:	mov	fp, r0
   12760:	str	r3, [sp, #76]	; 0x4c
   12764:	mov	sl, r1
   12768:	str	r2, [sp, #36]	; 0x24
   1276c:	str	ip, [sp, #116]	; 0x74
   12770:	bl	10df4 <__ctype_get_mb_cur_max@plt>
   12774:	ldr	r3, [sp, #164]	; 0xa4
   12778:	ands	r4, r3, #2
   1277c:	movne	r3, #1
   12780:	moveq	r3, #0
   12784:	str	r3, [sp, #32]
   12788:	str	r0, [sp, #64]	; 0x40
   1278c:	cmp	r8, #10
   12790:	ldrls	pc, [pc, r8, lsl #2]
   12794:	b	13f44 <__assert_fail@plt+0x2fdc>
   12798:	andeq	r2, r1, ip, lsl #23
   1279c:	andeq	r2, r1, r4, lsr #24
   127a0:	andeq	r3, r1, r4, lsr #4
   127a4:	andeq	r2, r1, r4, asr #24
   127a8:	strdeq	r2, [r1], -r8
   127ac:	andeq	r2, r1, r0, asr #22
   127b0:			; <UNDEFINED> instruction: 0x00012bbc
   127b4:	strdeq	r2, [r1], -r4
   127b8:	andeq	r2, r1, r4, asr #15
   127bc:	andeq	r2, r1, r4, asr #15
   127c0:	andeq	r2, r1, r4, asr #15
   127c4:	cmp	r8, #10
   127c8:	beq	127ec <__assert_fail@plt+0x1884>
   127cc:	mov	r1, r8
   127d0:	ldr	r0, [pc, #3428]	; 1353c <__assert_fail@plt+0x25d4>
   127d4:	bl	125e8 <__assert_fail@plt+0x1680>
   127d8:	mov	r1, r8
   127dc:	str	r0, [sp, #80]	; 0x50
   127e0:	ldr	r0, [pc, #3420]	; 13544 <__assert_fail@plt+0x25dc>
   127e4:	bl	125e8 <__assert_fail@plt+0x1680>
   127e8:	str	r0, [sp, #76]	; 0x4c
   127ec:	cmp	r4, #0
   127f0:	movne	r4, #0
   127f4:	beq	13c04 <__assert_fail@plt+0x2c9c>
   127f8:	ldr	r7, [sp, #76]	; 0x4c
   127fc:	mov	r5, #0
   12800:	mov	r6, #1
   12804:	mov	r0, r7
   12808:	str	r6, [sp, #40]	; 0x28
   1280c:	str	r5, [sp, #68]	; 0x44
   12810:	bl	10e84 <strlen@plt>
   12814:	str	r6, [sp, #28]
   12818:	str	r5, [sp, #44]	; 0x2c
   1281c:	str	r5, [sp, #72]	; 0x48
   12820:	str	r7, [sp, #60]	; 0x3c
   12824:	str	r0, [sp, #52]	; 0x34
   12828:	str	r8, [sp, #160]	; 0xa0
   1282c:	mov	r8, fp
   12830:	ldr	fp, [sp, #160]	; 0xa0
   12834:	mov	r9, #0
   12838:	ldr	r3, [sp, #24]
   1283c:	cmn	r3, #1
   12840:	beq	12da8 <__assert_fail@plt+0x1e40>
   12844:	ldr	r3, [sp, #24]
   12848:	subs	r6, r3, r9
   1284c:	movne	r6, #1
   12850:	cmp	r6, #0
   12854:	beq	12dc0 <__assert_fail@plt+0x1e58>
   12858:	ldr	r7, [sp, #28]
   1285c:	ldr	r0, [sp, #36]	; 0x24
   12860:	cmp	fp, #2
   12864:	moveq	r7, #0
   12868:	andne	r7, r7, #1
   1286c:	add	r3, r0, r9
   12870:	cmp	r7, #0
   12874:	str	r3, [sp, #48]	; 0x30
   12878:	beq	13264 <__assert_fail@plt+0x22fc>
   1287c:	ldr	r2, [sp, #52]	; 0x34
   12880:	cmp	r2, #0
   12884:	beq	13548 <__assert_fail@plt+0x25e0>
   12888:	ldr	r1, [sp, #24]
   1288c:	cmp	r2, #1
   12890:	mov	r3, r2
   12894:	movls	r3, #0
   12898:	movhi	r3, #1
   1289c:	cmn	r1, #1
   128a0:	movne	r3, #0
   128a4:	cmp	r3, #0
   128a8:	add	r5, r9, r2
   128ac:	beq	128b8 <__assert_fail@plt+0x1950>
   128b0:	bl	10e84 <strlen@plt>
   128b4:	str	r0, [sp, #24]
   128b8:	ldr	r3, [sp, #24]
   128bc:	cmp	r5, r3
   128c0:	bhi	13548 <__assert_fail@plt+0x25e0>
   128c4:	ldr	r2, [sp, #52]	; 0x34
   128c8:	ldr	r1, [sp, #60]	; 0x3c
   128cc:	ldr	r0, [sp, #48]	; 0x30
   128d0:	bl	10d7c <memcmp@plt>
   128d4:	cmp	r0, #0
   128d8:	bne	13548 <__assert_fail@plt+0x25e0>
   128dc:	ldr	r3, [sp, #32]
   128e0:	cmp	r3, #0
   128e4:	bne	13e04 <__assert_fail@plt+0x2e9c>
   128e8:	ldr	r3, [sp, #48]	; 0x30
   128ec:	ldrb	r5, [r3]
   128f0:	cmp	r5, #126	; 0x7e
   128f4:	ldrls	pc, [pc, r5, lsl #2]
   128f8:	b	131c8 <__assert_fail@plt+0x2260>
   128fc:	strheq	r3, [r1], -r4
   12900:	andeq	r3, r1, r8, asr #3
   12904:	andeq	r3, r1, r8, asr #3
   12908:	andeq	r3, r1, r8, asr #3
   1290c:	andeq	r3, r1, r8, asr #3
   12910:	andeq	r3, r1, r8, asr #3
   12914:	andeq	r3, r1, r8, asr #3
   12918:	andeq	r3, r1, r0, lsl #3
   1291c:	andeq	r3, r1, r0, ror r1
   12920:	andeq	r3, r1, r0, ror r0
   12924:	andeq	r3, r1, r8, lsr r0
   12928:	muleq	r1, r0, r0
   1292c:	andeq	r3, r1, r8, ror r0
   12930:	andeq	r2, r1, r8, lsr #31
   12934:	andeq	r3, r1, r8, asr #3
   12938:	andeq	r3, r1, r8, asr #3
   1293c:	andeq	r3, r1, r8, asr #3
   12940:	andeq	r3, r1, r8, asr #3
   12944:	andeq	r3, r1, r8, asr #3
   12948:	andeq	r3, r1, r8, asr #3
   1294c:	andeq	r3, r1, r8, asr #3
   12950:	andeq	r3, r1, r8, asr #3
   12954:	andeq	r3, r1, r8, asr #3
   12958:	andeq	r3, r1, r8, asr #3
   1295c:	andeq	r3, r1, r8, asr #3
   12960:	andeq	r3, r1, r8, asr #3
   12964:	andeq	r3, r1, r8, asr #3
   12968:	andeq	r3, r1, r8, asr #3
   1296c:	andeq	r3, r1, r8, asr #3
   12970:	andeq	r3, r1, r8, asr #3
   12974:	andeq	r3, r1, r8, asr #3
   12978:	andeq	r3, r1, r8, asr #3
   1297c:	andeq	r3, r1, r8, lsl #3
   12980:	muleq	r1, ip, r0
   12984:	muleq	r1, ip, r0
   12988:	andeq	r3, r1, r0, lsr #3
   1298c:	muleq	r1, ip, r0
   12990:			; <UNDEFINED> instruction: 0x000131bc
   12994:	muleq	r1, ip, r0
   12998:	ldrdeq	r2, [r1], -ip
   1299c:	muleq	r1, ip, r0
   129a0:	muleq	r1, ip, r0
   129a4:	muleq	r1, ip, r0
   129a8:			; <UNDEFINED> instruction: 0x000131bc
   129ac:			; <UNDEFINED> instruction: 0x000131bc
   129b0:			; <UNDEFINED> instruction: 0x000131bc
   129b4:			; <UNDEFINED> instruction: 0x000131bc
   129b8:			; <UNDEFINED> instruction: 0x000131bc
   129bc:			; <UNDEFINED> instruction: 0x000131bc
   129c0:			; <UNDEFINED> instruction: 0x000131bc
   129c4:			; <UNDEFINED> instruction: 0x000131bc
   129c8:			; <UNDEFINED> instruction: 0x000131bc
   129cc:			; <UNDEFINED> instruction: 0x000131bc
   129d0:			; <UNDEFINED> instruction: 0x000131bc
   129d4:			; <UNDEFINED> instruction: 0x000131bc
   129d8:			; <UNDEFINED> instruction: 0x000131bc
   129dc:			; <UNDEFINED> instruction: 0x000131bc
   129e0:			; <UNDEFINED> instruction: 0x000131bc
   129e4:			; <UNDEFINED> instruction: 0x000131bc
   129e8:	muleq	r1, ip, r0
   129ec:	muleq	r1, ip, r0
   129f0:	muleq	r1, ip, r0
   129f4:	muleq	r1, ip, r0
   129f8:			; <UNDEFINED> instruction: 0x00012eb0
   129fc:	andeq	r3, r1, r8, asr #3
   12a00:			; <UNDEFINED> instruction: 0x000131bc
   12a04:			; <UNDEFINED> instruction: 0x000131bc
   12a08:			; <UNDEFINED> instruction: 0x000131bc
   12a0c:			; <UNDEFINED> instruction: 0x000131bc
   12a10:			; <UNDEFINED> instruction: 0x000131bc
   12a14:			; <UNDEFINED> instruction: 0x000131bc
   12a18:			; <UNDEFINED> instruction: 0x000131bc
   12a1c:			; <UNDEFINED> instruction: 0x000131bc
   12a20:			; <UNDEFINED> instruction: 0x000131bc
   12a24:			; <UNDEFINED> instruction: 0x000131bc
   12a28:			; <UNDEFINED> instruction: 0x000131bc
   12a2c:			; <UNDEFINED> instruction: 0x000131bc
   12a30:			; <UNDEFINED> instruction: 0x000131bc
   12a34:			; <UNDEFINED> instruction: 0x000131bc
   12a38:			; <UNDEFINED> instruction: 0x000131bc
   12a3c:			; <UNDEFINED> instruction: 0x000131bc
   12a40:			; <UNDEFINED> instruction: 0x000131bc
   12a44:			; <UNDEFINED> instruction: 0x000131bc
   12a48:			; <UNDEFINED> instruction: 0x000131bc
   12a4c:			; <UNDEFINED> instruction: 0x000131bc
   12a50:			; <UNDEFINED> instruction: 0x000131bc
   12a54:			; <UNDEFINED> instruction: 0x000131bc
   12a58:			; <UNDEFINED> instruction: 0x000131bc
   12a5c:			; <UNDEFINED> instruction: 0x000131bc
   12a60:			; <UNDEFINED> instruction: 0x000131bc
   12a64:			; <UNDEFINED> instruction: 0x000131bc
   12a68:	muleq	r1, ip, r0
   12a6c:	andeq	r2, r1, r8, ror #28
   12a70:			; <UNDEFINED> instruction: 0x000131bc
   12a74:	muleq	r1, ip, r0
   12a78:			; <UNDEFINED> instruction: 0x000131bc
   12a7c:	muleq	r1, ip, r0
   12a80:			; <UNDEFINED> instruction: 0x000131bc
   12a84:			; <UNDEFINED> instruction: 0x000131bc
   12a88:			; <UNDEFINED> instruction: 0x000131bc
   12a8c:			; <UNDEFINED> instruction: 0x000131bc
   12a90:			; <UNDEFINED> instruction: 0x000131bc
   12a94:			; <UNDEFINED> instruction: 0x000131bc
   12a98:			; <UNDEFINED> instruction: 0x000131bc
   12a9c:			; <UNDEFINED> instruction: 0x000131bc
   12aa0:			; <UNDEFINED> instruction: 0x000131bc
   12aa4:			; <UNDEFINED> instruction: 0x000131bc
   12aa8:			; <UNDEFINED> instruction: 0x000131bc
   12aac:			; <UNDEFINED> instruction: 0x000131bc
   12ab0:			; <UNDEFINED> instruction: 0x000131bc
   12ab4:			; <UNDEFINED> instruction: 0x000131bc
   12ab8:			; <UNDEFINED> instruction: 0x000131bc
   12abc:			; <UNDEFINED> instruction: 0x000131bc
   12ac0:			; <UNDEFINED> instruction: 0x000131bc
   12ac4:			; <UNDEFINED> instruction: 0x000131bc
   12ac8:			; <UNDEFINED> instruction: 0x000131bc
   12acc:			; <UNDEFINED> instruction: 0x000131bc
   12ad0:			; <UNDEFINED> instruction: 0x000131bc
   12ad4:			; <UNDEFINED> instruction: 0x000131bc
   12ad8:			; <UNDEFINED> instruction: 0x000131bc
   12adc:			; <UNDEFINED> instruction: 0x000131bc
   12ae0:			; <UNDEFINED> instruction: 0x000131bc
   12ae4:			; <UNDEFINED> instruction: 0x000131bc
   12ae8:	andeq	r2, r1, r0, lsl #25
   12aec:	muleq	r1, ip, r0
   12af0:	andeq	r2, r1, r0, lsl #25
   12af4:	andeq	r3, r1, r0, lsr #3
   12af8:	cmp	r4, #0
   12afc:	moveq	r3, #1
   12b00:	streq	r3, [sp, #28]
   12b04:	beq	13230 <__assert_fail@plt+0x22c8>
   12b08:	mov	r3, #0
   12b0c:	mov	r4, r3
   12b10:	mov	r2, #1
   12b14:	str	r2, [sp, #40]	; 0x28
   12b18:	str	r3, [sp, #68]	; 0x44
   12b1c:	str	r2, [sp, #32]
   12b20:	str	r2, [sp, #52]	; 0x34
   12b24:	ldr	r3, [pc, #2584]	; 13544 <__assert_fail@plt+0x25dc>
   12b28:	str	r4, [sp, #44]	; 0x2c
   12b2c:	str	r4, [sp, #72]	; 0x48
   12b30:	str	r4, [sp, #28]
   12b34:	str	r3, [sp, #60]	; 0x3c
   12b38:	mov	r8, #2
   12b3c:	b	12828 <__assert_fail@plt+0x18c0>
   12b40:	cmp	r4, #0
   12b44:	bne	13dd0 <__assert_fail@plt+0x2e68>
   12b48:	cmp	sl, #0
   12b4c:	beq	13b90 <__assert_fail@plt+0x2c28>
   12b50:	mov	r3, #34	; 0x22
   12b54:	strb	r3, [fp]
   12b58:	ldr	r3, [pc, #2528]	; 13540 <__assert_fail@plt+0x25d8>
   12b5c:	mov	r1, r4
   12b60:	mov	r2, #1
   12b64:	str	r4, [sp, #68]	; 0x44
   12b68:	str	r2, [sp, #40]	; 0x28
   12b6c:	mov	r4, r2
   12b70:	str	r1, [sp, #44]	; 0x2c
   12b74:	str	r1, [sp, #72]	; 0x48
   12b78:	str	r1, [sp, #32]
   12b7c:	str	r2, [sp, #28]
   12b80:	str	r2, [sp, #52]	; 0x34
   12b84:	str	r3, [sp, #60]	; 0x3c
   12b88:	b	12828 <__assert_fail@plt+0x18c0>
   12b8c:	mov	r3, #0
   12b90:	str	r3, [sp, #68]	; 0x44
   12b94:	str	r3, [sp, #44]	; 0x2c
   12b98:	str	r3, [sp, #32]
   12b9c:	str	r3, [sp, #28]
   12ba0:	str	r3, [sp, #60]	; 0x3c
   12ba4:	mov	r3, #1
   12ba8:	str	r8, [sp, #72]	; 0x48
   12bac:	str	r8, [sp, #52]	; 0x34
   12bb0:	mov	r4, r8
   12bb4:	str	r3, [sp, #40]	; 0x28
   12bb8:	b	12828 <__assert_fail@plt+0x18c0>
   12bbc:	mov	r3, #1
   12bc0:	str	r3, [sp, #40]	; 0x28
   12bc4:	str	r3, [sp, #32]
   12bc8:	str	r3, [sp, #28]
   12bcc:	str	r3, [sp, #52]	; 0x34
   12bd0:	ldr	r3, [pc, #2408]	; 13540 <__assert_fail@plt+0x25d8>
   12bd4:	mov	r2, #0
   12bd8:	mov	r4, r2
   12bdc:	str	r2, [sp, #68]	; 0x44
   12be0:	str	r2, [sp, #44]	; 0x2c
   12be4:	str	r2, [sp, #72]	; 0x48
   12be8:	str	r3, [sp, #60]	; 0x3c
   12bec:	mov	r8, #5
   12bf0:	b	12828 <__assert_fail@plt+0x18c0>
   12bf4:	mov	r3, #0
   12bf8:	mov	r2, #1
   12bfc:	str	r2, [sp, #40]	; 0x28
   12c00:	mov	r4, r3
   12c04:	str	r3, [sp, #68]	; 0x44
   12c08:	str	r2, [sp, #28]
   12c0c:	str	r3, [sp, #44]	; 0x2c
   12c10:	str	r3, [sp, #72]	; 0x48
   12c14:	str	r3, [sp, #32]
   12c18:	str	r3, [sp, #52]	; 0x34
   12c1c:	str	r3, [sp, #60]	; 0x3c
   12c20:	b	12828 <__assert_fail@plt+0x18c0>
   12c24:	mov	r2, #1
   12c28:	mov	r3, #0
   12c2c:	str	r2, [sp, #40]	; 0x28
   12c30:	mov	r4, r3
   12c34:	str	r3, [sp, #68]	; 0x44
   12c38:	str	r8, [sp, #52]	; 0x34
   12c3c:	str	r2, [sp, #32]
   12c40:	b	12b24 <__assert_fail@plt+0x1bbc>
   12c44:	mov	r3, #1
   12c48:	str	r3, [sp, #40]	; 0x28
   12c4c:	str	r3, [sp, #32]
   12c50:	str	r3, [sp, #28]
   12c54:	str	r3, [sp, #52]	; 0x34
   12c58:	ldr	r3, [pc, #2276]	; 13544 <__assert_fail@plt+0x25dc>
   12c5c:	mov	r2, #0
   12c60:	mov	r4, r2
   12c64:	str	r2, [sp, #68]	; 0x44
   12c68:	str	r2, [sp, #44]	; 0x2c
   12c6c:	str	r2, [sp, #72]	; 0x48
   12c70:	str	r3, [sp, #60]	; 0x3c
   12c74:	mov	r8, #2
   12c78:	b	12828 <__assert_fail@plt+0x18c0>
   12c7c:	mov	r7, #0
   12c80:	ldr	r3, [sp, #24]
   12c84:	cmn	r3, #1
   12c88:	beq	137c4 <__assert_fail@plt+0x285c>
   12c8c:	ldr	r3, [sp, #24]
   12c90:	subs	r3, r3, #1
   12c94:	movne	r3, #1
   12c98:	cmp	r3, #0
   12c9c:	sub	r2, fp, #2
   12ca0:	clz	r2, r2
   12ca4:	lsr	r2, r2, #5
   12ca8:	bne	12ea4 <__assert_fail@plt+0x1f3c>
   12cac:	cmp	r9, #0
   12cb0:	bne	12ea4 <__assert_fail@plt+0x1f3c>
   12cb4:	ldr	r3, [sp, #32]
   12cb8:	tst	r3, r2
   12cbc:	bne	12fc4 <__assert_fail@plt+0x205c>
   12cc0:	ldr	r3, [sp, #28]
   12cc4:	eor	r3, r3, #1
   12cc8:	orr	r3, r2, r3
   12ccc:	ldr	r2, [sp, #32]
   12cd0:	eor	r3, r3, #1
   12cd4:	orrs	r3, r2, r3
   12cd8:	beq	12d08 <__assert_fail@plt+0x1da0>
   12cdc:	mov	r3, #0
   12ce0:	ldr	r1, [sp, #56]	; 0x38
   12ce4:	cmp	r1, #0
   12ce8:	beq	12d08 <__assert_fail@plt+0x1da0>
   12cec:	lsr	r2, r5, #5
   12cf0:	and	r0, r5, #31
   12cf4:	uxtb	r2, r2
   12cf8:	ldr	r1, [r1, r2, lsl #2]
   12cfc:	lsr	r2, r1, r0
   12d00:	tst	r2, #1
   12d04:	bne	12d10 <__assert_fail@plt+0x1da8>
   12d08:	cmp	r7, #0
   12d0c:	beq	12f60 <__assert_fail@plt+0x1ff8>
   12d10:	sub	r2, fp, #2
   12d14:	clz	r2, r2
   12d18:	lsr	r2, r2, #5
   12d1c:	ldr	r3, [sp, #32]
   12d20:	cmp	r3, #0
   12d24:	bne	13050 <__assert_fail@plt+0x20e8>
   12d28:	ldr	r3, [sp, #44]	; 0x2c
   12d2c:	eor	r3, r3, #1
   12d30:	ands	r3, r2, r3
   12d34:	beq	12d6c <__assert_fail@plt+0x1e04>
   12d38:	cmp	sl, r4
   12d3c:	movhi	r2, #39	; 0x27
   12d40:	strbhi	r2, [r8, r4]
   12d44:	add	r2, r4, #1
   12d48:	cmp	r2, sl
   12d4c:	movcc	r1, #36	; 0x24
   12d50:	strbcc	r1, [r8, r2]
   12d54:	add	r2, r4, #2
   12d58:	cmp	r2, sl
   12d5c:	add	r4, r4, #3
   12d60:	movcc	r1, #39	; 0x27
   12d64:	strbcc	r1, [r8, r2]
   12d68:	str	r3, [sp, #44]	; 0x2c
   12d6c:	cmp	r4, sl
   12d70:	movcc	r3, #92	; 0x5c
   12d74:	strbcc	r3, [r8, r4]
   12d78:	add	r9, r9, #1
   12d7c:	add	r4, r4, #1
   12d80:	cmp	r4, sl
   12d84:	ldr	r3, [sp, #40]	; 0x28
   12d88:	strbcc	r5, [r8, r4]
   12d8c:	cmp	r6, #0
   12d90:	moveq	r3, #0
   12d94:	str	r3, [sp, #40]	; 0x28
   12d98:	ldr	r3, [sp, #24]
   12d9c:	add	r4, r4, #1
   12da0:	cmn	r3, #1
   12da4:	bne	12844 <__assert_fail@plt+0x18dc>
   12da8:	ldr	r3, [sp, #36]	; 0x24
   12dac:	ldrb	r6, [r3, r9]
   12db0:	adds	r6, r6, #0
   12db4:	movne	r6, #1
   12db8:	cmp	r6, #0
   12dbc:	bne	12858 <__assert_fail@plt+0x18f0>
   12dc0:	str	fp, [sp, #160]	; 0xa0
   12dc4:	mov	fp, r8
   12dc8:	ldr	r8, [sp, #160]	; 0xa0
   12dcc:	ldr	r1, [sp, #32]
   12dd0:	cmp	r4, #0
   12dd4:	sub	r2, r8, #2
   12dd8:	clz	r2, r2
   12ddc:	lsr	r2, r2, #5
   12de0:	andeq	r3, r2, r1
   12de4:	movne	r3, #0
   12de8:	cmp	r3, #0
   12dec:	bne	13ed8 <__assert_fail@plt+0x2f70>
   12df0:	eor	r3, r1, #1
   12df4:	ands	r2, r2, r3
   12df8:	beq	13e14 <__assert_fail@plt+0x2eac>
   12dfc:	ldr	r3, [sp, #68]	; 0x44
   12e00:	cmp	r3, #0
   12e04:	beq	13e18 <__assert_fail@plt+0x2eb0>
   12e08:	ldr	r3, [sp, #40]	; 0x28
   12e0c:	cmp	r3, #0
   12e10:	bne	13e94 <__assert_fail@plt+0x2f2c>
   12e14:	ldr	r3, [sp, #72]	; 0x48
   12e18:	adds	r3, r3, #0
   12e1c:	movne	r3, #1
   12e20:	cmp	sl, #0
   12e24:	movne	r3, #0
   12e28:	cmp	r3, #0
   12e2c:	ldreq	r2, [sp, #68]	; 0x44
   12e30:	beq	13e18 <__assert_fail@plt+0x2eb0>
   12e34:	ldr	sl, [sp, #72]	; 0x48
   12e38:	str	r3, [sp, #68]	; 0x44
   12e3c:	ldr	r3, [pc, #1792]	; 13544 <__assert_fail@plt+0x25dc>
   12e40:	mov	r2, #39	; 0x27
   12e44:	mov	r4, #1
   12e48:	str	r3, [sp, #60]	; 0x3c
   12e4c:	mov	r3, #0
   12e50:	strb	r2, [fp]
   12e54:	str	r4, [sp, #52]	; 0x34
   12e58:	mov	r8, #2
   12e5c:	str	r3, [sp, #32]
   12e60:	b	12828 <__assert_fail@plt+0x18c0>
   12e64:	mov	r7, #0
   12e68:	cmp	fp, #2
   12e6c:	beq	137a4 <__assert_fail@plt+0x283c>
   12e70:	ldr	r3, [sp, #52]	; 0x34
   12e74:	ldr	r2, [sp, #28]
   12e78:	ldr	r1, [sp, #32]
   12e7c:	cmp	r3, #0
   12e80:	andne	r2, r2, r1
   12e84:	moveq	r2, #0
   12e88:	cmp	r2, #0
   12e8c:	moveq	r5, #92	; 0x5c
   12e90:	moveq	r3, r5
   12e94:	bne	137b0 <__assert_fail@plt+0x2848>
   12e98:	ldr	r1, [sp, #28]
   12e9c:	cmp	r1, #0
   12ea0:	bne	13f20 <__assert_fail@plt+0x2fb8>
   12ea4:	mov	r6, #0
   12ea8:	b	12cc0 <__assert_fail@plt+0x1d58>
   12eac:	mov	r7, #0
   12eb0:	cmp	fp, #2
   12eb4:	beq	13814 <__assert_fail@plt+0x28ac>
   12eb8:	cmp	fp, #5
   12ebc:	beq	137d8 <__assert_fail@plt+0x2870>
   12ec0:	sub	r2, fp, #2
   12ec4:	mov	r6, #0
   12ec8:	clz	r2, r2
   12ecc:	mov	r5, #63	; 0x3f
   12ed0:	lsr	r2, r2, #5
   12ed4:	b	12cc0 <__assert_fail@plt+0x1d58>
   12ed8:	mov	r7, #0
   12edc:	cmp	fp, #2
   12ee0:	strne	r6, [sp, #68]	; 0x44
   12ee4:	movne	r2, #0
   12ee8:	movne	r5, #39	; 0x27
   12eec:	bne	12cc0 <__assert_fail@plt+0x1d58>
   12ef0:	ldr	r3, [sp, #32]
   12ef4:	cmp	r3, #0
   12ef8:	bne	13bf4 <__assert_fail@plt+0x2c8c>
   12efc:	cmp	sl, #0
   12f00:	ldr	r3, [sp, #72]	; 0x48
   12f04:	clz	r3, r3
   12f08:	lsr	r3, r3, #5
   12f0c:	moveq	r3, #0
   12f10:	cmp	r3, #0
   12f14:	bne	13b28 <__assert_fail@plt+0x2bc0>
   12f18:	cmp	sl, r4
   12f1c:	movhi	r3, #39	; 0x27
   12f20:	strbhi	r3, [r8, r4]
   12f24:	add	r3, r4, #1
   12f28:	cmp	sl, r3
   12f2c:	movhi	r2, #92	; 0x5c
   12f30:	strbhi	r2, [r8, r3]
   12f34:	add	r3, r4, #2
   12f38:	cmp	sl, r3
   12f3c:	movhi	r2, #39	; 0x27
   12f40:	strbhi	r2, [r8, r3]
   12f44:	mov	r3, #0
   12f48:	cmp	r7, #0
   12f4c:	add	r4, r4, #3
   12f50:	str	r3, [sp, #44]	; 0x2c
   12f54:	str	r6, [sp, #68]	; 0x44
   12f58:	mov	r5, #39	; 0x27
   12f5c:	bne	12d10 <__assert_fail@plt+0x1da8>
   12f60:	ldr	r2, [sp, #44]	; 0x2c
   12f64:	eor	r3, r3, #1
   12f68:	and	r3, r3, r2
   12f6c:	add	r9, r9, #1
   12f70:	uxtb	r3, r3
   12f74:	cmp	r3, #0
   12f78:	beq	12d80 <__assert_fail@plt+0x1e18>
   12f7c:	cmp	sl, r4
   12f80:	movhi	r3, #39	; 0x27
   12f84:	strbhi	r3, [r8, r4]
   12f88:	add	r3, r4, #1
   12f8c:	cmp	sl, r3
   12f90:	movhi	r2, #39	; 0x27
   12f94:	strbhi	r2, [r8, r3]
   12f98:	mov	r3, #0
   12f9c:	add	r4, r4, #2
   12fa0:	str	r3, [sp, #44]	; 0x2c
   12fa4:	b	12d80 <__assert_fail@plt+0x1e18>
   12fa8:	mov	r3, #114	; 0x72
   12fac:	ldr	r1, [sp, #32]
   12fb0:	sub	r2, fp, #2
   12fb4:	clz	r2, r2
   12fb8:	lsr	r2, r2, #5
   12fbc:	tst	r2, r1
   12fc0:	beq	12e98 <__assert_fail@plt+0x1f30>
   12fc4:	mov	fp, r8
   12fc8:	mov	r8, #2
   12fcc:	ldr	r3, [sp, #28]
   12fd0:	cmp	r3, #0
   12fd4:	movne	r8, #4
   12fd8:	ldr	r3, [sp, #164]	; 0xa4
   12fdc:	mov	ip, #0
   12fe0:	bic	r3, r3, #2
   12fe4:	str	r3, [sp, #4]
   12fe8:	ldr	r3, [sp, #76]	; 0x4c
   12fec:	str	r8, [sp]
   12ff0:	str	r3, [sp, #16]
   12ff4:	ldr	r3, [sp, #80]	; 0x50
   12ff8:	ldr	r2, [sp, #36]	; 0x24
   12ffc:	str	r3, [sp, #12]
   13000:	mov	r1, sl
   13004:	ldr	r3, [sp, #24]
   13008:	mov	r0, fp
   1300c:	str	ip, [sp, #8]
   13010:	bl	12730 <__assert_fail@plt+0x17c8>
   13014:	mov	r4, r0
   13018:	ldr	r3, [pc, #1304]	; 13538 <__assert_fail@plt+0x25d0>
   1301c:	ldr	r2, [sp, #116]	; 0x74
   13020:	mov	r0, r4
   13024:	ldr	r3, [r3]
   13028:	cmp	r2, r3
   1302c:	bne	13f1c <__assert_fail@plt+0x2fb4>
   13030:	add	sp, sp, #124	; 0x7c
   13034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13038:	mov	r5, #110	; 0x6e
   1303c:	ldr	r3, [sp, #32]
   13040:	mov	r2, #0
   13044:	cmp	r3, #0
   13048:	mov	r6, r2
   1304c:	beq	12d28 <__assert_fail@plt+0x1dc0>
   13050:	str	fp, [sp, #160]	; 0xa0
   13054:	mov	fp, r8
   13058:	ldr	r8, [sp, #160]	; 0xa0
   1305c:	mov	r3, r2
   13060:	ldr	r2, [sp, #28]
   13064:	and	r2, r2, r3
   13068:	str	r2, [sp, #28]
   1306c:	b	12fcc <__assert_fail@plt+0x2064>
   13070:	mov	r5, #116	; 0x74
   13074:	b	1303c <__assert_fail@plt+0x20d4>
   13078:	mov	r5, #102	; 0x66
   1307c:	ldr	r3, [sp, #32]
   13080:	cmp	r3, #0
   13084:	bne	13c30 <__assert_fail@plt+0x2cc8>
   13088:	mov	r6, #0
   1308c:	b	12d6c <__assert_fail@plt+0x1e04>
   13090:	mov	r5, #118	; 0x76
   13094:	b	1307c <__assert_fail@plt+0x2114>
   13098:	mov	r7, #0
   1309c:	mov	r6, #0
   130a0:	b	12cdc <__assert_fail@plt+0x1d74>
   130a4:	ldr	r3, [sp, #32]
   130a8:	cmp	r3, #0
   130ac:	bne	13e74 <__assert_fail@plt+0x2f0c>
   130b0:	mov	r7, r3
   130b4:	ldr	r3, [sp, #44]	; 0x2c
   130b8:	sub	r2, fp, #2
   130bc:	eor	r3, r3, #1
   130c0:	clz	r2, r2
   130c4:	lsr	r2, r2, #5
   130c8:	ands	r3, r2, r3
   130cc:	beq	13b14 <__assert_fail@plt+0x2bac>
   130d0:	cmp	sl, r4
   130d4:	movhi	r1, #39	; 0x27
   130d8:	strbhi	r1, [r8, r4]
   130dc:	add	r1, r4, #1
   130e0:	cmp	sl, r1
   130e4:	movhi	r0, #36	; 0x24
   130e8:	strbhi	r0, [r8, r1]
   130ec:	add	r1, r4, #2
   130f0:	cmp	sl, r1
   130f4:	movhi	r0, #39	; 0x27
   130f8:	strbhi	r0, [r8, r1]
   130fc:	add	r1, r4, #3
   13100:	cmp	sl, r1
   13104:	bls	13b74 <__assert_fail@plt+0x2c0c>
   13108:	mov	r4, r1
   1310c:	mov	r1, #92	; 0x5c
   13110:	strb	r1, [r8, r4]
   13114:	mov	r1, r4
   13118:	str	r3, [sp, #44]	; 0x2c
   1311c:	cmp	fp, #2
   13120:	add	r4, r4, #1
   13124:	beq	13bbc <__assert_fail@plt+0x2c54>
   13128:	ldr	r0, [sp, #24]
   1312c:	add	r3, r9, #1
   13130:	cmp	r3, r0
   13134:	bcs	1314c <__assert_fail@plt+0x21e4>
   13138:	ldr	r0, [sp, #36]	; 0x24
   1313c:	ldrb	r3, [r0, r3]
   13140:	sub	r3, r3, #48	; 0x30
   13144:	cmp	r3, #9
   13148:	bls	13bcc <__assert_fail@plt+0x2c64>
   1314c:	mov	r5, #48	; 0x30
   13150:	ldr	r3, [sp, #28]
   13154:	eor	r3, r3, #1
   13158:	orrs	r2, r2, r3
   1315c:	mov	r3, r6
   13160:	moveq	r6, r2
   13164:	beq	12ce0 <__assert_fail@plt+0x1d78>
   13168:	mov	r6, #0
   1316c:	b	12d08 <__assert_fail@plt+0x1da0>
   13170:	mov	r2, #0
   13174:	mov	r6, r2
   13178:	mov	r5, #98	; 0x62
   1317c:	b	12d28 <__assert_fail@plt+0x1dc0>
   13180:	mov	r5, #97	; 0x61
   13184:	b	13088 <__assert_fail@plt+0x2120>
   13188:	mov	r3, r7
   1318c:	mov	r6, r7
   13190:	mov	r2, #0
   13194:	mov	r7, r3
   13198:	mov	r5, #32
   1319c:	b	12cc0 <__assert_fail@plt+0x1d58>
   131a0:	cmp	r9, #0
   131a4:	mov	r3, r7
   131a8:	bne	13770 <__assert_fail@plt+0x2808>
   131ac:	mov	r6, r7
   131b0:	mov	r2, r9
   131b4:	mov	r7, r3
   131b8:	b	12cc0 <__assert_fail@plt+0x1d58>
   131bc:	mov	r6, r7
   131c0:	b	12cdc <__assert_fail@plt+0x1d74>
   131c4:	mov	r7, #0
   131c8:	ldr	r3, [sp, #64]	; 0x40
   131cc:	cmp	r3, #1
   131d0:	bne	1382c <__assert_fail@plt+0x28c4>
   131d4:	bl	10e6c <__ctype_b_loc@plt>
   131d8:	ldr	r2, [sp, #64]	; 0x40
   131dc:	sxth	r3, r5
   131e0:	mov	ip, r2
   131e4:	lsl	r3, r3, #1
   131e8:	ldr	r2, [r0]
   131ec:	ldrh	r3, [r2, r3]
   131f0:	and	r3, r3, #16384	; 0x4000
   131f4:	cmp	r3, #0
   131f8:	ldr	r3, [sp, #28]
   131fc:	movne	r6, #1
   13200:	moveq	r6, #0
   13204:	movne	r2, #0
   13208:	andeq	r2, r3, #1
   1320c:	cmp	r2, #0
   13210:	bne	13b3c <__assert_fail@plt+0x2bd4>
   13214:	sub	r2, fp, #2
   13218:	clz	r2, r2
   1321c:	lsr	r2, r2, #5
   13220:	b	12cc0 <__assert_fail@plt+0x1d58>
   13224:	cmp	r4, #0
   13228:	bne	13ee8 <__assert_fail@plt+0x2f80>
   1322c:	str	r4, [sp, #28]
   13230:	cmp	sl, #0
   13234:	bne	13f2c <__assert_fail@plt+0x2fc4>
   13238:	ldr	r3, [pc, #772]	; 13544 <__assert_fail@plt+0x25dc>
   1323c:	mov	r4, #1
   13240:	str	r4, [sp, #40]	; 0x28
   13244:	str	r3, [sp, #60]	; 0x3c
   13248:	str	r4, [sp, #52]	; 0x34
   1324c:	str	sl, [sp, #72]	; 0x48
   13250:	str	sl, [sp, #68]	; 0x44
   13254:	str	sl, [sp, #44]	; 0x2c
   13258:	str	sl, [sp, #32]
   1325c:	mov	r8, #2
   13260:	b	12828 <__assert_fail@plt+0x18c0>
   13264:	ldr	r3, [sp, #36]	; 0x24
   13268:	ldrb	r5, [r3, r9]
   1326c:	cmp	r5, #126	; 0x7e
   13270:	ldrls	pc, [pc, r5, lsl #2]
   13274:	b	131c8 <__assert_fail@plt+0x2260>
   13278:	andeq	r3, r1, ip, lsr #9
   1327c:	andeq	r3, r1, r8, asr #3
   13280:	andeq	r3, r1, r8, asr #3
   13284:	andeq	r3, r1, r8, asr #3
   13288:	andeq	r3, r1, r8, asr #3
   1328c:	andeq	r3, r1, r8, asr #3
   13290:	andeq	r3, r1, r8, asr #3
   13294:	muleq	r1, r8, r4
   13298:	andeq	r3, r1, r4, lsl #9
   1329c:	andeq	r3, r1, ip, ror r4
   132a0:	andeq	r3, r1, r4, ror r4
   132a4:	andeq	r3, r1, r4, lsr #10
   132a8:	andeq	r3, r1, r0, lsl r5
   132ac:	andeq	r2, r1, r8, lsr #31
   132b0:	andeq	r3, r1, r8, asr #3
   132b4:	andeq	r3, r1, r8, asr #3
   132b8:	andeq	r3, r1, r8, asr #3
   132bc:	andeq	r3, r1, r8, asr #3
   132c0:	andeq	r3, r1, r8, asr #3
   132c4:	andeq	r3, r1, r8, asr #3
   132c8:	andeq	r3, r1, r8, asr #3
   132cc:	andeq	r3, r1, r8, asr #3
   132d0:	andeq	r3, r1, r8, asr #3
   132d4:	andeq	r3, r1, r8, asr #3
   132d8:	andeq	r3, r1, r8, asr #3
   132dc:	andeq	r3, r1, r8, asr #3
   132e0:	andeq	r3, r1, r8, asr #3
   132e4:	andeq	r3, r1, r8, asr #3
   132e8:	andeq	r3, r1, r8, asr #3
   132ec:	andeq	r3, r1, r8, asr #3
   132f0:	andeq	r3, r1, r8, asr #3
   132f4:	andeq	r3, r1, r8, asr #3
   132f8:	andeq	r3, r1, r0, lsl #10
   132fc:	andeq	r3, r1, ip, ror #9
   13300:	andeq	r3, r1, ip, ror #9
   13304:	ldrdeq	r3, [r1], -ip
   13308:	andeq	r3, r1, ip, ror #9
   1330c:	andeq	r3, r1, r4, lsl r2
   13310:	andeq	r3, r1, ip, ror #9
   13314:	ldrdeq	r2, [r1], -ip
   13318:	andeq	r3, r1, ip, ror #9
   1331c:	andeq	r3, r1, ip, ror #9
   13320:	andeq	r3, r1, ip, ror #9
   13324:	andeq	r3, r1, r4, lsl r2
   13328:	andeq	r3, r1, r4, lsl r2
   1332c:	andeq	r3, r1, r4, lsl r2
   13330:	andeq	r3, r1, r4, lsl r2
   13334:	andeq	r3, r1, r4, lsl r2
   13338:	andeq	r3, r1, r4, lsl r2
   1333c:	andeq	r3, r1, r4, lsl r2
   13340:	andeq	r3, r1, r4, lsl r2
   13344:	andeq	r3, r1, r4, lsl r2
   13348:	andeq	r3, r1, r4, lsl r2
   1334c:	andeq	r3, r1, r4, lsl r2
   13350:	andeq	r3, r1, r4, lsl r2
   13354:	andeq	r3, r1, r4, lsl r2
   13358:	andeq	r3, r1, r4, lsl r2
   1335c:	andeq	r3, r1, r4, lsl r2
   13360:	andeq	r3, r1, r4, lsl r2
   13364:	andeq	r3, r1, ip, ror #9
   13368:	andeq	r3, r1, ip, ror #9
   1336c:	andeq	r3, r1, ip, ror #9
   13370:	andeq	r3, r1, ip, ror #9
   13374:			; <UNDEFINED> instruction: 0x00012eb0
   13378:	andeq	r3, r1, r8, asr #3
   1337c:	andeq	r3, r1, r4, lsl r2
   13380:	andeq	r3, r1, r4, lsl r2
   13384:	andeq	r3, r1, r4, lsl r2
   13388:	andeq	r3, r1, r4, lsl r2
   1338c:	andeq	r3, r1, r4, lsl r2
   13390:	andeq	r3, r1, r4, lsl r2
   13394:	andeq	r3, r1, r4, lsl r2
   13398:	andeq	r3, r1, r4, lsl r2
   1339c:	andeq	r3, r1, r4, lsl r2
   133a0:	andeq	r3, r1, r4, lsl r2
   133a4:	andeq	r3, r1, r4, lsl r2
   133a8:	andeq	r3, r1, r4, lsl r2
   133ac:	andeq	r3, r1, r4, lsl r2
   133b0:	andeq	r3, r1, r4, lsl r2
   133b4:	andeq	r3, r1, r4, lsl r2
   133b8:	andeq	r3, r1, r4, lsl r2
   133bc:	andeq	r3, r1, r4, lsl r2
   133c0:	andeq	r3, r1, r4, lsl r2
   133c4:	andeq	r3, r1, r4, lsl r2
   133c8:	andeq	r3, r1, r4, lsl r2
   133cc:	andeq	r3, r1, r4, lsl r2
   133d0:	andeq	r3, r1, r4, lsl r2
   133d4:	andeq	r3, r1, r4, lsl r2
   133d8:	andeq	r3, r1, r4, lsl r2
   133dc:	andeq	r3, r1, r4, lsl r2
   133e0:	andeq	r3, r1, r4, lsl r2
   133e4:	andeq	r3, r1, ip, ror #9
   133e8:	andeq	r2, r1, r8, ror #28
   133ec:	andeq	r3, r1, r4, lsl r2
   133f0:	andeq	r3, r1, ip, ror #9
   133f4:	andeq	r3, r1, r4, lsl r2
   133f8:	andeq	r3, r1, ip, ror #9
   133fc:	andeq	r3, r1, r4, lsl r2
   13400:	andeq	r3, r1, r4, lsl r2
   13404:	andeq	r3, r1, r4, lsl r2
   13408:	andeq	r3, r1, r4, lsl r2
   1340c:	andeq	r3, r1, r4, lsl r2
   13410:	andeq	r3, r1, r4, lsl r2
   13414:	andeq	r3, r1, r4, lsl r2
   13418:	andeq	r3, r1, r4, lsl r2
   1341c:	andeq	r3, r1, r4, lsl r2
   13420:	andeq	r3, r1, r4, lsl r2
   13424:	andeq	r3, r1, r4, lsl r2
   13428:	andeq	r3, r1, r4, lsl r2
   1342c:	andeq	r3, r1, r4, lsl r2
   13430:	andeq	r3, r1, r4, lsl r2
   13434:	andeq	r3, r1, r4, lsl r2
   13438:	andeq	r3, r1, r4, lsl r2
   1343c:	andeq	r3, r1, r4, lsl r2
   13440:	andeq	r3, r1, r4, lsl r2
   13444:	andeq	r3, r1, r4, lsl r2
   13448:	andeq	r3, r1, r4, lsl r2
   1344c:	andeq	r3, r1, r4, lsl r2
   13450:	andeq	r3, r1, r4, lsl r2
   13454:	andeq	r3, r1, r4, lsl r2
   13458:	andeq	r3, r1, r4, lsl r2
   1345c:	andeq	r3, r1, r4, lsl r2
   13460:	andeq	r3, r1, r4, lsl r2
   13464:	andeq	r2, r1, r0, lsl #25
   13468:	andeq	r3, r1, ip, ror #9
   1346c:	andeq	r2, r1, r0, lsl #25
   13470:	ldrdeq	r3, [r1], -ip
   13474:	mov	r3, #110	; 0x6e
   13478:	b	12fac <__assert_fail@plt+0x2044>
   1347c:	mov	r3, #116	; 0x74
   13480:	b	12fac <__assert_fail@plt+0x2044>
   13484:	sub	r2, fp, #2
   13488:	mov	r3, #98	; 0x62
   1348c:	clz	r2, r2
   13490:	lsr	r2, r2, #5
   13494:	b	12e98 <__assert_fail@plt+0x1f30>
   13498:	sub	r2, fp, #2
   1349c:	mov	r3, #97	; 0x61
   134a0:	clz	r2, r2
   134a4:	lsr	r2, r2, #5
   134a8:	b	12e98 <__assert_fail@plt+0x1f30>
   134ac:	ldr	r3, [sp, #28]
   134b0:	cmp	r3, #0
   134b4:	bne	130a4 <__assert_fail@plt+0x213c>
   134b8:	ldr	r3, [sp, #164]	; 0xa4
   134bc:	tst	r3, #1
   134c0:	bne	13b34 <__assert_fail@plt+0x2bcc>
   134c4:	ldr	r6, [sp, #28]
   134c8:	sub	r2, fp, #2
   134cc:	mov	r7, r6
   134d0:	clz	r2, r2
   134d4:	lsr	r2, r2, #5
   134d8:	b	12cc0 <__assert_fail@plt+0x1d58>
   134dc:	sub	r2, fp, #2
   134e0:	clz	r2, r2
   134e4:	lsr	r2, r2, #5
   134e8:	b	12cac <__assert_fail@plt+0x1d44>
   134ec:	sub	r2, fp, #2
   134f0:	mov	r6, #0
   134f4:	clz	r2, r2
   134f8:	lsr	r2, r2, #5
   134fc:	b	12cb4 <__assert_fail@plt+0x1d4c>
   13500:	sub	r2, fp, #2
   13504:	clz	r2, r2
   13508:	lsr	r2, r2, #5
   1350c:	b	12cb4 <__assert_fail@plt+0x1d4c>
   13510:	sub	r2, fp, #2
   13514:	mov	r3, #102	; 0x66
   13518:	clz	r2, r2
   1351c:	lsr	r2, r2, #5
   13520:	b	12e98 <__assert_fail@plt+0x1f30>
   13524:	sub	r2, fp, #2
   13528:	mov	r3, #118	; 0x76
   1352c:	clz	r2, r2
   13530:	lsr	r2, r2, #5
   13534:	b	12e98 <__assert_fail@plt+0x1f30>
   13538:	andeq	r6, r2, r8, lsl #30
   1353c:	andeq	r5, r1, r8, lsr #30
   13540:	andeq	r5, r1, r0, lsl pc
   13544:	andeq	r5, r1, r4, lsr #30
   13548:	ldr	r3, [sp, #48]	; 0x30
   1354c:	ldrb	r5, [r3]
   13550:	cmp	r5, #126	; 0x7e
   13554:	ldrls	pc, [pc, r5, lsl #2]
   13558:	b	131c4 <__assert_fail@plt+0x225c>
   1355c:	andeq	r3, r1, r4, lsr #1
   13560:	andeq	r3, r1, r4, asr #3
   13564:	andeq	r3, r1, r4, asr #3
   13568:	andeq	r3, r1, r4, asr #3
   1356c:	andeq	r3, r1, r4, asr #3
   13570:	andeq	r3, r1, r4, asr #3
   13574:	andeq	r3, r1, r4, asr #3
   13578:	muleq	r1, ip, r7
   1357c:	muleq	r1, r4, r7
   13580:	andeq	r3, r1, r0, ror r0
   13584:	andeq	r3, r1, r8, lsr r0
   13588:	muleq	r1, r0, r0
   1358c:	andeq	r3, r1, r8, ror r0
   13590:	andeq	r3, r1, r8, lsl #15
   13594:	andeq	r3, r1, r4, asr #3
   13598:	andeq	r3, r1, r4, asr #3
   1359c:	andeq	r3, r1, r4, asr #3
   135a0:	andeq	r3, r1, r4, asr #3
   135a4:	andeq	r3, r1, r4, asr #3
   135a8:	andeq	r3, r1, r4, asr #3
   135ac:	andeq	r3, r1, r4, asr #3
   135b0:	andeq	r3, r1, r4, asr #3
   135b4:	andeq	r3, r1, r4, asr #3
   135b8:	andeq	r3, r1, r4, asr #3
   135bc:	andeq	r3, r1, r4, asr #3
   135c0:	andeq	r3, r1, r4, asr #3
   135c4:	andeq	r3, r1, r4, asr #3
   135c8:	andeq	r3, r1, r4, asr #3
   135cc:	andeq	r3, r1, r4, asr #3
   135d0:	andeq	r3, r1, r4, asr #3
   135d4:	andeq	r3, r1, r4, asr #3
   135d8:	andeq	r3, r1, r4, asr #3
   135dc:	andeq	r3, r1, r0, lsl #15
   135e0:	muleq	r1, r8, r0
   135e4:	muleq	r1, r8, r0
   135e8:	andeq	r3, r1, r4, ror #14
   135ec:	muleq	r1, r8, r0
   135f0:	andeq	r3, r1, r8, asr r7
   135f4:	muleq	r1, r8, r0
   135f8:	ldrdeq	r2, [r1], -r8
   135fc:	muleq	r1, r8, r0
   13600:	muleq	r1, r8, r0
   13604:	muleq	r1, r8, r0
   13608:	andeq	r3, r1, r8, asr r7
   1360c:	andeq	r3, r1, r8, asr r7
   13610:	andeq	r3, r1, r8, asr r7
   13614:	andeq	r3, r1, r8, asr r7
   13618:	andeq	r3, r1, r8, asr r7
   1361c:	andeq	r3, r1, r8, asr r7
   13620:	andeq	r3, r1, r8, asr r7
   13624:	andeq	r3, r1, r8, asr r7
   13628:	andeq	r3, r1, r8, asr r7
   1362c:	andeq	r3, r1, r8, asr r7
   13630:	andeq	r3, r1, r8, asr r7
   13634:	andeq	r3, r1, r8, asr r7
   13638:	andeq	r3, r1, r8, asr r7
   1363c:	andeq	r3, r1, r8, asr r7
   13640:	andeq	r3, r1, r8, asr r7
   13644:	andeq	r3, r1, r8, asr r7
   13648:	muleq	r1, r8, r0
   1364c:	muleq	r1, r8, r0
   13650:	muleq	r1, r8, r0
   13654:	muleq	r1, r8, r0
   13658:	andeq	r2, r1, ip, lsr #29
   1365c:	andeq	r3, r1, r4, asr #3
   13660:	andeq	r3, r1, r8, asr r7
   13664:	andeq	r3, r1, r8, asr r7
   13668:	andeq	r3, r1, r8, asr r7
   1366c:	andeq	r3, r1, r8, asr r7
   13670:	andeq	r3, r1, r8, asr r7
   13674:	andeq	r3, r1, r8, asr r7
   13678:	andeq	r3, r1, r8, asr r7
   1367c:	andeq	r3, r1, r8, asr r7
   13680:	andeq	r3, r1, r8, asr r7
   13684:	andeq	r3, r1, r8, asr r7
   13688:	andeq	r3, r1, r8, asr r7
   1368c:	andeq	r3, r1, r8, asr r7
   13690:	andeq	r3, r1, r8, asr r7
   13694:	andeq	r3, r1, r8, asr r7
   13698:	andeq	r3, r1, r8, asr r7
   1369c:	andeq	r3, r1, r8, asr r7
   136a0:	andeq	r3, r1, r8, asr r7
   136a4:	andeq	r3, r1, r8, asr r7
   136a8:	andeq	r3, r1, r8, asr r7
   136ac:	andeq	r3, r1, r8, asr r7
   136b0:	andeq	r3, r1, r8, asr r7
   136b4:	andeq	r3, r1, r8, asr r7
   136b8:	andeq	r3, r1, r8, asr r7
   136bc:	andeq	r3, r1, r8, asr r7
   136c0:	andeq	r3, r1, r8, asr r7
   136c4:	andeq	r3, r1, r8, asr r7
   136c8:	muleq	r1, r8, r0
   136cc:	andeq	r2, r1, r4, ror #28
   136d0:	andeq	r3, r1, r8, asr r7
   136d4:	muleq	r1, r8, r0
   136d8:	andeq	r3, r1, r8, asr r7
   136dc:	muleq	r1, r8, r0
   136e0:	andeq	r3, r1, r8, asr r7
   136e4:	andeq	r3, r1, r8, asr r7
   136e8:	andeq	r3, r1, r8, asr r7
   136ec:	andeq	r3, r1, r8, asr r7
   136f0:	andeq	r3, r1, r8, asr r7
   136f4:	andeq	r3, r1, r8, asr r7
   136f8:	andeq	r3, r1, r8, asr r7
   136fc:	andeq	r3, r1, r8, asr r7
   13700:	andeq	r3, r1, r8, asr r7
   13704:	andeq	r3, r1, r8, asr r7
   13708:	andeq	r3, r1, r8, asr r7
   1370c:	andeq	r3, r1, r8, asr r7
   13710:	andeq	r3, r1, r8, asr r7
   13714:	andeq	r3, r1, r8, asr r7
   13718:	andeq	r3, r1, r8, asr r7
   1371c:	andeq	r3, r1, r8, asr r7
   13720:	andeq	r3, r1, r8, asr r7
   13724:	andeq	r3, r1, r8, asr r7
   13728:	andeq	r3, r1, r8, asr r7
   1372c:	andeq	r3, r1, r8, asr r7
   13730:	andeq	r3, r1, r8, asr r7
   13734:	andeq	r3, r1, r8, asr r7
   13738:	andeq	r3, r1, r8, asr r7
   1373c:	andeq	r3, r1, r8, asr r7
   13740:	andeq	r3, r1, r8, asr r7
   13744:	andeq	r3, r1, r8, asr r7
   13748:	andeq	r2, r1, ip, ror ip
   1374c:	muleq	r1, r8, r0
   13750:	andeq	r2, r1, ip, ror ip
   13754:	andeq	r3, r1, r4, ror #14
   13758:	mov	r6, r7
   1375c:	mov	r7, #0
   13760:	b	12cdc <__assert_fail@plt+0x1d74>
   13764:	cmp	r9, #0
   13768:	mov	r3, #0
   1376c:	beq	131ac <__assert_fail@plt+0x2244>
   13770:	mov	r6, #0
   13774:	mov	r7, r3
   13778:	mov	r3, r6
   1377c:	b	12ce0 <__assert_fail@plt+0x1d78>
   13780:	mov	r3, #0
   13784:	b	1318c <__assert_fail@plt+0x2224>
   13788:	mov	r7, #0
   1378c:	mov	r3, #114	; 0x72
   13790:	b	12fac <__assert_fail@plt+0x2044>
   13794:	mov	r5, #98	; 0x62
   13798:	b	1303c <__assert_fail@plt+0x20d4>
   1379c:	mov	r5, #97	; 0x61
   137a0:	b	1307c <__assert_fail@plt+0x2114>
   137a4:	ldr	r3, [sp, #32]
   137a8:	cmp	r3, #0
   137ac:	bne	13bf4 <__assert_fail@plt+0x2c8c>
   137b0:	add	r9, r9, #1
   137b4:	ldr	r3, [sp, #44]	; 0x2c
   137b8:	mov	r6, #0
   137bc:	mov	r5, #92	; 0x5c
   137c0:	b	12f74 <__assert_fail@plt+0x200c>
   137c4:	ldr	r3, [sp, #36]	; 0x24
   137c8:	ldrb	r3, [r3, #1]
   137cc:	adds	r3, r3, #0
   137d0:	movne	r3, #1
   137d4:	b	12c98 <__assert_fail@plt+0x1d30>
   137d8:	ldr	r3, [sp, #164]	; 0xa4
   137dc:	ands	r3, r3, #4
   137e0:	beq	13804 <__assert_fail@plt+0x289c>
   137e4:	ldr	r2, [sp, #24]
   137e8:	add	r3, r9, #2
   137ec:	cmp	r3, r2
   137f0:	bcs	13804 <__assert_fail@plt+0x289c>
   137f4:	ldr	r2, [sp, #48]	; 0x30
   137f8:	ldrb	r5, [r2, #1]
   137fc:	cmp	r5, #63	; 0x3f
   13800:	beq	13c68 <__assert_fail@plt+0x2d00>
   13804:	mov	r2, #0
   13808:	mov	r6, r2
   1380c:	mov	r5, #63	; 0x3f
   13810:	b	12cc0 <__assert_fail@plt+0x1d58>
   13814:	ldr	r3, [sp, #32]
   13818:	cmp	r3, #0
   1381c:	bne	13bf4 <__assert_fail@plt+0x2c8c>
   13820:	mov	r6, r3
   13824:	mov	r5, #63	; 0x3f
   13828:	b	12d08 <__assert_fail@plt+0x1da0>
   1382c:	ldr	r3, [sp, #24]
   13830:	cmn	r3, #1
   13834:	mov	r3, #0
   13838:	str	r3, [sp, #108]	; 0x6c
   1383c:	str	r3, [sp, #112]	; 0x70
   13840:	bne	13850 <__assert_fail@plt+0x28e8>
   13844:	ldr	r0, [sp, #36]	; 0x24
   13848:	bl	10e84 <strlen@plt>
   1384c:	str	r0, [sp, #24]
   13850:	mov	r3, #0
   13854:	str	sl, [sp, #88]	; 0x58
   13858:	ldr	sl, [sp, #36]	; 0x24
   1385c:	str	r5, [sp, #92]	; 0x5c
   13860:	mov	r5, r3
   13864:	str	r7, [sp, #96]	; 0x60
   13868:	str	r4, [sp, #100]	; 0x64
   1386c:	str	r8, [sp, #84]	; 0x54
   13870:	ldr	r3, [sp, #24]
   13874:	add	r4, r9, r5
   13878:	add	r7, sl, r4
   1387c:	sub	r2, r3, r4
   13880:	mov	r1, r7
   13884:	add	r3, sp, #108	; 0x6c
   13888:	add	r0, sp, #104	; 0x68
   1388c:	bl	14f68 <__assert_fail@plt+0x4000>
   13890:	subs	r8, r0, #0
   13894:	beq	138e4 <__assert_fail@plt+0x297c>
   13898:	cmn	r8, #1
   1389c:	beq	13c44 <__assert_fail@plt+0x2cdc>
   138a0:	cmn	r8, #2
   138a4:	beq	13d64 <__assert_fail@plt+0x2dfc>
   138a8:	ldr	r3, [sp, #32]
   138ac:	cmp	fp, #2
   138b0:	movne	r3, #0
   138b4:	andeq	r3, r3, #1
   138b8:	cmp	r3, #0
   138bc:	bne	13a44 <__assert_fail@plt+0x2adc>
   138c0:	ldr	r0, [sp, #104]	; 0x68
   138c4:	bl	10dd0 <iswprint@plt>
   138c8:	add	r5, r5, r8
   138cc:	cmp	r0, #0
   138d0:	add	r0, sp, #108	; 0x6c
   138d4:	moveq	r6, #0
   138d8:	bl	10d70 <mbsinit@plt>
   138dc:	cmp	r0, #0
   138e0:	beq	13870 <__assert_fail@plt+0x2908>
   138e4:	ldr	r3, [sp, #28]
   138e8:	mov	ip, r5
   138ec:	eor	r2, r6, #1
   138f0:	ldr	r5, [sp, #92]	; 0x5c
   138f4:	ldr	r7, [sp, #96]	; 0x60
   138f8:	ldr	r4, [sp, #100]	; 0x64
   138fc:	ldr	r8, [sp, #84]	; 0x54
   13900:	ldr	sl, [sp, #88]	; 0x58
   13904:	and	r2, r2, r3
   13908:	cmp	ip, #1
   1390c:	bls	1320c <__assert_fail@plt+0x22a4>
   13910:	add	r1, ip, r9
   13914:	ldr	lr, [sp, #48]	; 0x30
   13918:	mov	r0, #0
   1391c:	str	r6, [sp, #48]	; 0x30
   13920:	mov	ip, #39	; 0x27
   13924:	ldr	r6, [sp, #44]	; 0x2c
   13928:	b	139e0 <__assert_fail@plt+0x2a78>
   1392c:	ldr	r0, [sp, #32]
   13930:	sub	r3, fp, #2
   13934:	cmp	r0, #0
   13938:	clz	r3, r3
   1393c:	lsr	r3, r3, #5
   13940:	bne	13b48 <__assert_fail@plt+0x2be0>
   13944:	eor	r0, r6, #1
   13948:	ands	r3, r3, r0
   1394c:	beq	1397c <__assert_fail@plt+0x2a14>
   13950:	add	r0, r4, #1
   13954:	cmp	sl, r4
   13958:	strbhi	ip, [r8, r4]
   1395c:	cmp	sl, r0
   13960:	movhi	r6, #36	; 0x24
   13964:	strbhi	r6, [r8, r0]
   13968:	add	r0, r4, #2
   1396c:	mov	r6, r3
   13970:	add	r4, r4, #3
   13974:	cmp	sl, r0
   13978:	strbhi	ip, [r8, r0]
   1397c:	cmp	sl, r4
   13980:	movhi	r3, #92	; 0x5c
   13984:	strbhi	r3, [r8, r4]
   13988:	add	r3, r4, #1
   1398c:	cmp	sl, r3
   13990:	lsrhi	r0, r5, #6
   13994:	addhi	r0, r0, #48	; 0x30
   13998:	strbhi	r0, [r8, r3]
   1399c:	add	r0, r4, #2
   139a0:	cmp	sl, r0
   139a4:	lsrhi	r3, r5, #3
   139a8:	andhi	r3, r3, #7
   139ac:	addhi	r3, r3, #48	; 0x30
   139b0:	add	r9, r9, #1
   139b4:	strbhi	r3, [r8, r0]
   139b8:	and	r5, r5, #7
   139bc:	cmp	r9, r1
   139c0:	add	r5, r5, #48	; 0x30
   139c4:	add	r4, r4, #3
   139c8:	bcs	13b68 <__assert_fail@plt+0x2c00>
   139cc:	mov	r0, r2
   139d0:	cmp	sl, r4
   139d4:	strbhi	r5, [r8, r4]
   139d8:	ldrb	r5, [lr, #1]!
   139dc:	add	r4, r4, #1
   139e0:	cmp	r2, #0
   139e4:	bne	1392c <__assert_fail@plt+0x29c4>
   139e8:	eor	r3, r0, #1
   139ec:	and	r3, r3, r6
   139f0:	cmp	r7, #0
   139f4:	uxtb	r3, r3
   139f8:	beq	13a0c <__assert_fail@plt+0x2aa4>
   139fc:	cmp	sl, r4
   13a00:	movhi	r7, #92	; 0x5c
   13a04:	strbhi	r7, [r8, r4]
   13a08:	add	r4, r4, #1
   13a0c:	add	r9, r9, #1
   13a10:	cmp	r9, r1
   13a14:	bcs	13b5c <__assert_fail@plt+0x2bf4>
   13a18:	cmp	r3, #0
   13a1c:	beq	13b88 <__assert_fail@plt+0x2c20>
   13a20:	cmp	sl, r4
   13a24:	add	r3, r4, #1
   13a28:	strbhi	ip, [r8, r4]
   13a2c:	mov	r7, #0
   13a30:	cmp	sl, r3
   13a34:	strbhi	ip, [r8, r3]
   13a38:	add	r4, r4, #2
   13a3c:	mov	r6, r7
   13a40:	b	139d0 <__assert_fail@plt+0x2a68>
   13a44:	cmp	r8, #1
   13a48:	beq	138c0 <__assert_fail@plt+0x2958>
   13a4c:	add	r1, r4, #1
   13a50:	add	r3, sl, r8
   13a54:	add	r1, sl, r1
   13a58:	add	r4, r3, r4
   13a5c:	ldrb	r3, [r1], #1
   13a60:	sub	r3, r3, #91	; 0x5b
   13a64:	cmp	r3, #33	; 0x21
   13a68:	ldrls	pc, [pc, r3, lsl #2]
   13a6c:	b	13af8 <__assert_fail@plt+0x2b90>
   13a70:	andeq	r3, r1, r4, lsl #22
   13a74:	andeq	r3, r1, r4, lsl #22
   13a78:	strdeq	r3, [r1], -r8
   13a7c:	andeq	r3, r1, r4, lsl #22
   13a80:	strdeq	r3, [r1], -r8
   13a84:	andeq	r3, r1, r4, lsl #22
   13a88:	strdeq	r3, [r1], -r8
   13a8c:	strdeq	r3, [r1], -r8
   13a90:	strdeq	r3, [r1], -r8
   13a94:	strdeq	r3, [r1], -r8
   13a98:	strdeq	r3, [r1], -r8
   13a9c:	strdeq	r3, [r1], -r8
   13aa0:	strdeq	r3, [r1], -r8
   13aa4:	strdeq	r3, [r1], -r8
   13aa8:	strdeq	r3, [r1], -r8
   13aac:	strdeq	r3, [r1], -r8
   13ab0:	strdeq	r3, [r1], -r8
   13ab4:	strdeq	r3, [r1], -r8
   13ab8:	strdeq	r3, [r1], -r8
   13abc:	strdeq	r3, [r1], -r8
   13ac0:	strdeq	r3, [r1], -r8
   13ac4:	strdeq	r3, [r1], -r8
   13ac8:	strdeq	r3, [r1], -r8
   13acc:	strdeq	r3, [r1], -r8
   13ad0:	strdeq	r3, [r1], -r8
   13ad4:	strdeq	r3, [r1], -r8
   13ad8:	strdeq	r3, [r1], -r8
   13adc:	strdeq	r3, [r1], -r8
   13ae0:	strdeq	r3, [r1], -r8
   13ae4:	strdeq	r3, [r1], -r8
   13ae8:	strdeq	r3, [r1], -r8
   13aec:	strdeq	r3, [r1], -r8
   13af0:	strdeq	r3, [r1], -r8
   13af4:	andeq	r3, r1, r4, lsl #22
   13af8:	cmp	r4, r1
   13afc:	bne	13a5c <__assert_fail@plt+0x2af4>
   13b00:	b	138c0 <__assert_fail@plt+0x2958>
   13b04:	ldr	fp, [sp, #84]	; 0x54
   13b08:	ldr	sl, [sp, #88]	; 0x58
   13b0c:	mov	r8, #2
   13b10:	b	12fcc <__assert_fail@plt+0x2064>
   13b14:	cmp	sl, r4
   13b18:	movls	r1, r4
   13b1c:	bls	1311c <__assert_fail@plt+0x21b4>
   13b20:	ldr	r3, [sp, #44]	; 0x2c
   13b24:	b	1310c <__assert_fail@plt+0x21a4>
   13b28:	str	sl, [sp, #72]	; 0x48
   13b2c:	ldr	sl, [sp, #32]
   13b30:	b	12f44 <__assert_fail@plt+0x1fdc>
   13b34:	add	r9, r9, #1
   13b38:	b	12838 <__assert_fail@plt+0x18d0>
   13b3c:	ldr	r2, [sp, #28]
   13b40:	mov	r6, #0
   13b44:	b	13910 <__assert_fail@plt+0x29a8>
   13b48:	str	fp, [sp, #160]	; 0xa0
   13b4c:	str	r3, [sp, #28]
   13b50:	mov	fp, r8
   13b54:	ldr	r8, [sp, #160]	; 0xa0
   13b58:	b	12fcc <__assert_fail@plt+0x2064>
   13b5c:	str	r6, [sp, #44]	; 0x2c
   13b60:	ldr	r6, [sp, #48]	; 0x30
   13b64:	b	12f74 <__assert_fail@plt+0x200c>
   13b68:	str	r6, [sp, #44]	; 0x2c
   13b6c:	ldr	r6, [sp, #48]	; 0x30
   13b70:	b	12d80 <__assert_fail@plt+0x1e18>
   13b74:	add	r4, r4, #4
   13b78:	str	r3, [sp, #44]	; 0x2c
   13b7c:	mov	r6, #0
   13b80:	mov	r5, #48	; 0x30
   13b84:	b	12d08 <__assert_fail@plt+0x1da0>
   13b88:	mov	r7, r3
   13b8c:	b	139d0 <__assert_fail@plt+0x2a68>
   13b90:	ldr	r3, [pc, #-1624]	; 13540 <__assert_fail@plt+0x25d8>
   13b94:	mov	r4, #1
   13b98:	str	r4, [sp, #40]	; 0x28
   13b9c:	str	r4, [sp, #28]
   13ba0:	str	r4, [sp, #52]	; 0x34
   13ba4:	str	sl, [sp, #72]	; 0x48
   13ba8:	str	sl, [sp, #68]	; 0x44
   13bac:	str	sl, [sp, #44]	; 0x2c
   13bb0:	str	sl, [sp, #32]
   13bb4:	str	r3, [sp, #60]	; 0x3c
   13bb8:	b	12828 <__assert_fail@plt+0x18c0>
   13bbc:	mov	r3, r6
   13bc0:	mov	r5, #48	; 0x30
   13bc4:	mov	r6, #0
   13bc8:	b	12d08 <__assert_fail@plt+0x1da0>
   13bcc:	cmp	sl, r4
   13bd0:	movhi	r3, #48	; 0x30
   13bd4:	strbhi	r3, [r8, r4]
   13bd8:	add	r3, r1, #2
   13bdc:	cmp	sl, r3
   13be0:	movhi	r0, #48	; 0x30
   13be4:	strbhi	r0, [r8, r3]
   13be8:	add	r4, r1, #3
   13bec:	mov	r5, #48	; 0x30
   13bf0:	b	13150 <__assert_fail@plt+0x21e8>
   13bf4:	str	fp, [sp, #160]	; 0xa0
   13bf8:	mov	fp, r8
   13bfc:	ldr	r8, [sp, #160]	; 0xa0
   13c00:	b	12fcc <__assert_fail@plt+0x2064>
   13c04:	ldr	r2, [sp, #80]	; 0x50
   13c08:	ldrb	r3, [r2]
   13c0c:	cmp	r3, #0
   13c10:	beq	127f8 <__assert_fail@plt+0x1890>
   13c14:	cmp	sl, r4
   13c18:	strbhi	r3, [fp, r4]
   13c1c:	ldrb	r3, [r2, #1]!
   13c20:	add	r4, r4, #1
   13c24:	cmp	r3, #0
   13c28:	bne	13c14 <__assert_fail@plt+0x2cac>
   13c2c:	b	127f8 <__assert_fail@plt+0x1890>
   13c30:	str	fp, [sp, #160]	; 0xa0
   13c34:	mov	r3, #0
   13c38:	mov	fp, r8
   13c3c:	ldr	r8, [sp, #160]	; 0xa0
   13c40:	b	13060 <__assert_fail@plt+0x20f8>
   13c44:	mov	ip, r5
   13c48:	ldr	r7, [sp, #96]	; 0x60
   13c4c:	ldr	r5, [sp, #92]	; 0x5c
   13c50:	ldr	r4, [sp, #100]	; 0x64
   13c54:	ldr	r8, [sp, #84]	; 0x54
   13c58:	ldr	sl, [sp, #88]	; 0x58
   13c5c:	ldr	r2, [sp, #28]
   13c60:	mov	r6, #0
   13c64:	b	13908 <__assert_fail@plt+0x29a0>
   13c68:	ldr	r2, [sp, #36]	; 0x24
   13c6c:	ldrb	r1, [r2, r3]
   13c70:	sub	r2, r1, #33	; 0x21
   13c74:	cmp	r2, #29
   13c78:	ldrls	pc, [pc, r2, lsl #2]
   13c7c:	b	13d58 <__assert_fail@plt+0x2df0>
   13c80:	strdeq	r3, [r1], -r8
   13c84:	andeq	r3, r1, r8, asr sp
   13c88:	andeq	r3, r1, r8, asr sp
   13c8c:	andeq	r3, r1, r8, asr sp
   13c90:	andeq	r3, r1, r8, asr sp
   13c94:	andeq	r3, r1, r8, asr sp
   13c98:	strdeq	r3, [r1], -r8
   13c9c:	strdeq	r3, [r1], -r8
   13ca0:	strdeq	r3, [r1], -r8
   13ca4:	andeq	r3, r1, r8, asr sp
   13ca8:	andeq	r3, r1, r8, asr sp
   13cac:	andeq	r3, r1, r8, asr sp
   13cb0:	strdeq	r3, [r1], -r8
   13cb4:	andeq	r3, r1, r8, asr sp
   13cb8:	strdeq	r3, [r1], -r8
   13cbc:	andeq	r3, r1, r8, asr sp
   13cc0:	andeq	r3, r1, r8, asr sp
   13cc4:	andeq	r3, r1, r8, asr sp
   13cc8:	andeq	r3, r1, r8, asr sp
   13ccc:	andeq	r3, r1, r8, asr sp
   13cd0:	andeq	r3, r1, r8, asr sp
   13cd4:	andeq	r3, r1, r8, asr sp
   13cd8:	andeq	r3, r1, r8, asr sp
   13cdc:	andeq	r3, r1, r8, asr sp
   13ce0:	andeq	r3, r1, r8, asr sp
   13ce4:	andeq	r3, r1, r8, asr sp
   13ce8:	andeq	r3, r1, r8, asr sp
   13cec:	strdeq	r3, [r1], -r8
   13cf0:	strdeq	r3, [r1], -r8
   13cf4:	strdeq	r3, [r1], -r8
   13cf8:	ldr	r2, [sp, #32]
   13cfc:	cmp	r2, #0
   13d00:	bne	13e04 <__assert_fail@plt+0x2e9c>
   13d04:	cmp	sl, r4
   13d08:	movhi	r2, #63	; 0x3f
   13d0c:	strbhi	r2, [r8, r4]
   13d10:	add	r2, r4, #1
   13d14:	cmp	sl, r2
   13d18:	movhi	r0, #34	; 0x22
   13d1c:	strbhi	r0, [r8, r2]
   13d20:	add	r2, r4, #2
   13d24:	cmp	sl, r2
   13d28:	movhi	r0, #34	; 0x22
   13d2c:	strbhi	r0, [r8, r2]
   13d30:	add	r2, r4, #3
   13d34:	cmp	sl, r2
   13d38:	movhi	r0, #63	; 0x3f
   13d3c:	strbhi	r0, [r8, r2]
   13d40:	mov	r2, #0
   13d44:	add	r4, r4, #4
   13d48:	mov	r5, r1
   13d4c:	mov	r9, r3
   13d50:	mov	r6, r2
   13d54:	b	13150 <__assert_fail@plt+0x21e8>
   13d58:	mov	r2, #0
   13d5c:	mov	r6, r2
   13d60:	b	12cc0 <__assert_fail@plt+0x1d58>
   13d64:	ldr	r0, [sp, #24]
   13d68:	mov	r1, r4
   13d6c:	cmp	r1, r0
   13d70:	mov	r2, r7
   13d74:	mov	r3, r5
   13d78:	mov	ip, r5
   13d7c:	ldr	r7, [sp, #96]	; 0x60
   13d80:	ldr	r5, [sp, #92]	; 0x5c
   13d84:	ldr	r4, [sp, #100]	; 0x64
   13d88:	ldr	r8, [sp, #84]	; 0x54
   13d8c:	ldr	sl, [sp, #88]	; 0x58
   13d90:	bcs	13dc4 <__assert_fail@plt+0x2e5c>
   13d94:	ldrb	r6, [r2]
   13d98:	cmp	r6, #0
   13d9c:	bne	13db0 <__assert_fail@plt+0x2e48>
   13da0:	b	13ee0 <__assert_fail@plt+0x2f78>
   13da4:	ldrb	r6, [r2, #1]!
   13da8:	cmp	r6, #0
   13dac:	beq	13e68 <__assert_fail@plt+0x2f00>
   13db0:	add	r3, r3, #1
   13db4:	add	r1, r9, r3
   13db8:	cmp	r1, r0
   13dbc:	bcc	13da4 <__assert_fail@plt+0x2e3c>
   13dc0:	mov	ip, r3
   13dc4:	ldr	r2, [sp, #28]
   13dc8:	mov	r6, #0
   13dcc:	b	13908 <__assert_fail@plt+0x29a0>
   13dd0:	mov	r3, #1
   13dd4:	str	r3, [sp, #40]	; 0x28
   13dd8:	str	r3, [sp, #32]
   13ddc:	str	r3, [sp, #28]
   13de0:	str	r3, [sp, #52]	; 0x34
   13de4:	ldr	r3, [pc, #-2220]	; 13540 <__assert_fail@plt+0x25d8>
   13de8:	mov	r2, #0
   13dec:	str	r2, [sp, #68]	; 0x44
   13df0:	str	r2, [sp, #44]	; 0x2c
   13df4:	str	r2, [sp, #72]	; 0x48
   13df8:	mov	r4, r2
   13dfc:	str	r3, [sp, #60]	; 0x3c
   13e00:	b	12828 <__assert_fail@plt+0x18c0>
   13e04:	str	fp, [sp, #160]	; 0xa0
   13e08:	mov	fp, r8
   13e0c:	ldr	r8, [sp, #160]	; 0xa0
   13e10:	b	12fd8 <__assert_fail@plt+0x2070>
   13e14:	mov	r2, r3
   13e18:	ldr	r3, [sp, #60]	; 0x3c
   13e1c:	cmp	r3, #0
   13e20:	moveq	r2, #0
   13e24:	andne	r2, r2, #1
   13e28:	cmp	r2, #0
   13e2c:	beq	13e58 <__assert_fail@plt+0x2ef0>
   13e30:	mov	r2, r3
   13e34:	ldrb	r3, [r3]
   13e38:	cmp	r3, #0
   13e3c:	beq	13e58 <__assert_fail@plt+0x2ef0>
   13e40:	cmp	sl, r4
   13e44:	strbhi	r3, [fp, r4]
   13e48:	ldrb	r3, [r2, #1]!
   13e4c:	add	r4, r4, #1
   13e50:	cmp	r3, #0
   13e54:	bne	13e40 <__assert_fail@plt+0x2ed8>
   13e58:	cmp	sl, r4
   13e5c:	movhi	r3, #0
   13e60:	strbhi	r3, [fp, r4]
   13e64:	b	13018 <__assert_fail@plt+0x20b0>
   13e68:	mov	ip, r3
   13e6c:	ldr	r2, [sp, #28]
   13e70:	b	13908 <__assert_fail@plt+0x29a0>
   13e74:	str	fp, [sp, #160]	; 0xa0
   13e78:	mov	fp, r8
   13e7c:	ldr	r8, [sp, #160]	; 0xa0
   13e80:	sub	r3, r8, #2
   13e84:	clz	r3, r3
   13e88:	lsr	r3, r3, #5
   13e8c:	str	r3, [sp, #28]
   13e90:	b	12fcc <__assert_fail@plt+0x2064>
   13e94:	ldr	r3, [sp, #76]	; 0x4c
   13e98:	mov	ip, #5
   13e9c:	str	r3, [sp, #16]
   13ea0:	ldr	r3, [sp, #80]	; 0x50
   13ea4:	ldr	r2, [sp, #36]	; 0x24
   13ea8:	str	r3, [sp, #12]
   13eac:	ldr	r3, [sp, #56]	; 0x38
   13eb0:	ldr	r1, [sp, #72]	; 0x48
   13eb4:	str	r3, [sp, #8]
   13eb8:	ldr	r3, [sp, #164]	; 0xa4
   13ebc:	mov	r0, fp
   13ec0:	str	r3, [sp, #4]
   13ec4:	str	ip, [sp]
   13ec8:	ldr	r3, [sp, #24]
   13ecc:	bl	12730 <__assert_fail@plt+0x17c8>
   13ed0:	mov	r4, r0
   13ed4:	b	13018 <__assert_fail@plt+0x20b0>
   13ed8:	mov	r8, #2
   13edc:	b	12fcc <__assert_fail@plt+0x2064>
   13ee0:	ldr	r2, [sp, #28]
   13ee4:	b	13908 <__assert_fail@plt+0x29a0>
   13ee8:	mov	r3, #0
   13eec:	str	r3, [sp, #68]	; 0x44
   13ef0:	str	r3, [sp, #44]	; 0x2c
   13ef4:	str	r3, [sp, #72]	; 0x48
   13ef8:	str	r3, [sp, #28]
   13efc:	mov	r4, r3
   13f00:	ldr	r3, [pc, #-2500]	; 13544 <__assert_fail@plt+0x25dc>
   13f04:	mov	r2, #1
   13f08:	str	r2, [sp, #40]	; 0x28
   13f0c:	str	r2, [sp, #32]
   13f10:	str	r2, [sp, #52]	; 0x34
   13f14:	str	r3, [sp, #60]	; 0x3c
   13f18:	b	12828 <__assert_fail@plt+0x18c0>
   13f1c:	bl	10da0 <__stack_chk_fail@plt>
   13f20:	mov	r5, r3
   13f24:	mov	r6, #0
   13f28:	b	12d1c <__assert_fail@plt+0x1db4>
   13f2c:	mov	r3, #0
   13f30:	mov	r2, #1
   13f34:	str	r3, [sp, #44]	; 0x2c
   13f38:	str	r3, [sp, #72]	; 0x48
   13f3c:	str	r2, [sp, #40]	; 0x28
   13f40:	b	12e38 <__assert_fail@plt+0x1ed0>
   13f44:	bl	10f50 <abort@plt>
   13f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f4c:	sub	sp, sp, #44	; 0x2c
   13f50:	mov	r6, r0
   13f54:	mov	r4, r3
   13f58:	mov	sl, r1
   13f5c:	mov	fp, r2
   13f60:	bl	10e9c <__errno_location@plt>
   13f64:	ldr	r7, [pc, #364]	; 140d8 <__assert_fail@plt+0x3170>
   13f68:	cmp	r6, #0
   13f6c:	ldr	r5, [r7]
   13f70:	ldr	r3, [r0]
   13f74:	str	r3, [sp, #24]
   13f78:	blt	140d4 <__assert_fail@plt+0x316c>
   13f7c:	ldr	r3, [r7, #4]
   13f80:	mov	r8, r0
   13f84:	cmp	r3, r6
   13f88:	bgt	13fd4 <__assert_fail@plt+0x306c>
   13f8c:	cmn	r6, #-268435454	; 0xf0000002
   13f90:	bgt	140d0 <__assert_fail@plt+0x3168>
   13f94:	add	r9, r6, #1
   13f98:	add	r3, r7, #8
   13f9c:	cmp	r5, r3
   13fa0:	lsl	r1, r9, #3
   13fa4:	beq	140b0 <__assert_fail@plt+0x3148>
   13fa8:	mov	r0, r5
   13fac:	bl	14d3c <__assert_fail@plt+0x3dd4>
   13fb0:	mov	r5, r0
   13fb4:	str	r0, [r7]
   13fb8:	ldr	r0, [r7, #4]
   13fbc:	mov	r1, #0
   13fc0:	sub	r2, r9, r0
   13fc4:	add	r0, r5, r0, lsl #3
   13fc8:	lsl	r2, r2, #3
   13fcc:	bl	10eb4 <memset@plt>
   13fd0:	str	r9, [r7, #4]
   13fd4:	add	r3, r5, r6, lsl #3
   13fd8:	ldr	r1, [r4, #4]
   13fdc:	ldr	r7, [r3, #4]
   13fe0:	ldr	r9, [r5, r6, lsl #3]
   13fe4:	ldr	r2, [r4, #40]	; 0x28
   13fe8:	ldr	ip, [r4, #44]	; 0x2c
   13fec:	str	r3, [sp, #28]
   13ff0:	ldr	r3, [r4]
   13ff4:	orr	r1, r1, #1
   13ff8:	add	lr, r4, #8
   13ffc:	str	r1, [sp, #36]	; 0x24
   14000:	str	r1, [sp, #4]
   14004:	str	r2, [sp, #12]
   14008:	str	r3, [sp]
   1400c:	mov	r0, r7
   14010:	mov	r1, r9
   14014:	str	ip, [sp, #16]
   14018:	str	lr, [sp, #8]
   1401c:	mov	r3, fp
   14020:	mov	r2, sl
   14024:	str	lr, [sp, #32]
   14028:	bl	12730 <__assert_fail@plt+0x17c8>
   1402c:	cmp	r9, r0
   14030:	bhi	1409c <__assert_fail@plt+0x3134>
   14034:	ldr	r3, [pc, #160]	; 140dc <__assert_fail@plt+0x3174>
   14038:	add	r9, r0, #1
   1403c:	cmp	r7, r3
   14040:	str	r9, [r5, r6, lsl #3]
   14044:	beq	14050 <__assert_fail@plt+0x30e8>
   14048:	mov	r0, r7
   1404c:	bl	10d40 <free@plt>
   14050:	mov	r0, r9
   14054:	bl	14ce0 <__assert_fail@plt+0x3d78>
   14058:	ldr	lr, [sp, #28]
   1405c:	ldr	ip, [r4, #44]	; 0x2c
   14060:	ldr	r5, [r4, #40]	; 0x28
   14064:	mov	r3, fp
   14068:	mov	r2, sl
   1406c:	mov	r1, r9
   14070:	str	r0, [lr, #4]
   14074:	ldr	lr, [r4]
   14078:	ldr	r4, [sp, #32]
   1407c:	str	ip, [sp, #16]
   14080:	str	r4, [sp, #8]
   14084:	ldr	r4, [sp, #36]	; 0x24
   14088:	str	r5, [sp, #12]
   1408c:	str	r4, [sp, #4]
   14090:	str	lr, [sp]
   14094:	mov	r7, r0
   14098:	bl	12730 <__assert_fail@plt+0x17c8>
   1409c:	ldr	r3, [sp, #24]
   140a0:	mov	r0, r7
   140a4:	str	r3, [r8]
   140a8:	add	sp, sp, #44	; 0x2c
   140ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140b0:	mov	r0, #0
   140b4:	bl	14d3c <__assert_fail@plt+0x3dd4>
   140b8:	ldr	r3, [pc, #32]	; 140e0 <__assert_fail@plt+0x3178>
   140bc:	mov	r5, r0
   140c0:	ldm	r3, {r0, r1}
   140c4:	str	r5, [r7]
   140c8:	stm	r5, {r0, r1}
   140cc:	b	13fb8 <__assert_fail@plt+0x3050>
   140d0:	bl	14f28 <__assert_fail@plt+0x3fc0>
   140d4:	bl	10f50 <abort@plt>
   140d8:	strdeq	r7, [r2], -r0
   140dc:	andeq	r7, r2, r0, lsl #3
   140e0:	strdeq	r7, [r2], -r8
   140e4:	push	{r4, r5, r6, lr}
   140e8:	mov	r5, r0
   140ec:	bl	10e9c <__errno_location@plt>
   140f0:	cmp	r5, #0
   140f4:	mov	r1, #48	; 0x30
   140f8:	mov	r4, r0
   140fc:	ldr	r0, [pc, #16]	; 14114 <__assert_fail@plt+0x31ac>
   14100:	ldr	r6, [r4]
   14104:	movne	r0, r5
   14108:	bl	14ee8 <__assert_fail@plt+0x3f80>
   1410c:	str	r6, [r4]
   14110:	pop	{r4, r5, r6, pc}
   14114:	andeq	r7, r2, r0, lsl #5
   14118:	ldr	r3, [pc, #12]	; 1412c <__assert_fail@plt+0x31c4>
   1411c:	cmp	r0, #0
   14120:	moveq	r0, r3
   14124:	ldr	r0, [r0]
   14128:	bx	lr
   1412c:	andeq	r7, r2, r0, lsl #5
   14130:	ldr	r3, [pc, #12]	; 14144 <__assert_fail@plt+0x31dc>
   14134:	cmp	r0, #0
   14138:	moveq	r0, r3
   1413c:	str	r1, [r0]
   14140:	bx	lr
   14144:	andeq	r7, r2, r0, lsl #5
   14148:	ldr	r3, [pc, #52]	; 14184 <__assert_fail@plt+0x321c>
   1414c:	cmp	r0, #0
   14150:	moveq	r0, r3
   14154:	add	r3, r0, #8
   14158:	push	{lr}		; (str lr, [sp, #-4]!)
   1415c:	lsr	lr, r1, #5
   14160:	and	r1, r1, #31
   14164:	ldr	ip, [r3, lr, lsl #2]
   14168:	lsr	r0, ip, r1
   1416c:	eor	r2, r2, r0
   14170:	and	r2, r2, #1
   14174:	and	r0, r0, #1
   14178:	eor	r1, ip, r2, lsl r1
   1417c:	str	r1, [r3, lr, lsl #2]
   14180:	pop	{pc}		; (ldr pc, [sp], #4)
   14184:	andeq	r7, r2, r0, lsl #5
   14188:	ldr	r3, [pc, #16]	; 141a0 <__assert_fail@plt+0x3238>
   1418c:	cmp	r0, #0
   14190:	movne	r3, r0
   14194:	ldr	r0, [r3, #4]
   14198:	str	r1, [r3, #4]
   1419c:	bx	lr
   141a0:	andeq	r7, r2, r0, lsl #5
   141a4:	ldr	r3, [pc, #44]	; 141d8 <__assert_fail@plt+0x3270>
   141a8:	cmp	r0, #0
   141ac:	moveq	r0, r3
   141b0:	mov	ip, #10
   141b4:	cmp	r2, #0
   141b8:	cmpne	r1, #0
   141bc:	str	ip, [r0]
   141c0:	beq	141d0 <__assert_fail@plt+0x3268>
   141c4:	str	r1, [r0, #40]	; 0x28
   141c8:	str	r2, [r0, #44]	; 0x2c
   141cc:	bx	lr
   141d0:	push	{r4, lr}
   141d4:	bl	10f50 <abort@plt>
   141d8:	andeq	r7, r2, r0, lsl #5
   141dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141e0:	sub	sp, sp, #24
   141e4:	ldr	ip, [pc, #108]	; 14258 <__assert_fail@plt+0x32f0>
   141e8:	ldr	r4, [sp, #56]	; 0x38
   141ec:	mov	r9, r2
   141f0:	cmp	r4, #0
   141f4:	moveq	r4, ip
   141f8:	mov	sl, r3
   141fc:	mov	r7, r0
   14200:	mov	r8, r1
   14204:	bl	10e9c <__errno_location@plt>
   14208:	ldr	r3, [r4, #44]	; 0x2c
   1420c:	mov	r1, r8
   14210:	ldr	r6, [r0]
   14214:	str	r3, [sp, #16]
   14218:	ldr	r2, [r4, #40]	; 0x28
   1421c:	add	r3, r4, #8
   14220:	str	r3, [sp, #8]
   14224:	str	r2, [sp, #12]
   14228:	ldr	r2, [r4, #4]
   1422c:	mov	r5, r0
   14230:	str	r2, [sp, #4]
   14234:	ldr	ip, [r4]
   14238:	mov	r3, sl
   1423c:	mov	r2, r9
   14240:	mov	r0, r7
   14244:	str	ip, [sp]
   14248:	bl	12730 <__assert_fail@plt+0x17c8>
   1424c:	str	r6, [r5]
   14250:	add	sp, sp, #24
   14254:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14258:	andeq	r7, r2, r0, lsl #5
   1425c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14260:	cmp	r3, #0
   14264:	sub	sp, sp, #44	; 0x2c
   14268:	ldr	r4, [pc, #192]	; 14330 <__assert_fail@plt+0x33c8>
   1426c:	mov	r6, r2
   14270:	movne	r4, r3
   14274:	mov	r9, r1
   14278:	mov	r8, r0
   1427c:	bl	10e9c <__errno_location@plt>
   14280:	ldr	r3, [r4, #44]	; 0x2c
   14284:	ldr	r5, [r4, #4]
   14288:	add	sl, r4, #8
   1428c:	cmp	r6, #0
   14290:	orreq	r5, r5, #1
   14294:	mov	r1, #0
   14298:	ldr	r2, [r0]
   1429c:	str	r3, [sp, #16]
   142a0:	ldr	r3, [r4, #40]	; 0x28
   142a4:	stmib	sp, {r5, sl}
   142a8:	str	r3, [sp, #12]
   142ac:	ldr	r3, [r4]
   142b0:	mov	r7, r0
   142b4:	str	r2, [sp, #28]
   142b8:	str	r3, [sp]
   142bc:	mov	r2, r8
   142c0:	mov	r3, r9
   142c4:	mov	r0, r1
   142c8:	bl	12730 <__assert_fail@plt+0x17c8>
   142cc:	add	r1, r0, #1
   142d0:	mov	fp, r0
   142d4:	mov	r0, r1
   142d8:	str	r1, [sp, #36]	; 0x24
   142dc:	bl	14ce0 <__assert_fail@plt+0x3d78>
   142e0:	ldr	r3, [r4, #44]	; 0x2c
   142e4:	mov	r2, r8
   142e8:	str	r3, [sp, #16]
   142ec:	ldr	r3, [r4, #40]	; 0x28
   142f0:	str	r5, [sp, #4]
   142f4:	str	r3, [sp, #12]
   142f8:	str	sl, [sp, #8]
   142fc:	ldr	ip, [r4]
   14300:	ldr	r1, [sp, #36]	; 0x24
   14304:	mov	r3, r9
   14308:	str	ip, [sp]
   1430c:	str	r0, [sp, #32]
   14310:	bl	12730 <__assert_fail@plt+0x17c8>
   14314:	ldr	r2, [sp, #28]
   14318:	cmp	r6, #0
   1431c:	str	r2, [r7]
   14320:	ldr	r0, [sp, #32]
   14324:	strne	fp, [r6]
   14328:	add	sp, sp, #44	; 0x2c
   1432c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14330:	andeq	r7, r2, r0, lsl #5
   14334:	mov	r3, r2
   14338:	mov	r2, #0
   1433c:	b	1425c <__assert_fail@plt+0x32f4>
   14340:	push	{r4, r5, r6, r7, r8, lr}
   14344:	ldr	r6, [pc, #112]	; 143bc <__assert_fail@plt+0x3454>
   14348:	ldr	r3, [r6, #4]
   1434c:	ldr	r7, [r6]
   14350:	cmp	r3, #1
   14354:	ble	14378 <__assert_fail@plt+0x3410>
   14358:	sub	r5, r7, #8
   1435c:	add	r5, r5, r3, lsl #3
   14360:	mov	r4, r7
   14364:	ldr	r0, [r4, #12]
   14368:	add	r4, r4, #8
   1436c:	bl	10d40 <free@plt>
   14370:	cmp	r4, r5
   14374:	bne	14364 <__assert_fail@plt+0x33fc>
   14378:	ldr	r0, [r7, #4]
   1437c:	ldr	r4, [pc, #60]	; 143c0 <__assert_fail@plt+0x3458>
   14380:	cmp	r0, r4
   14384:	beq	14398 <__assert_fail@plt+0x3430>
   14388:	bl	10d40 <free@plt>
   1438c:	mov	r3, #256	; 0x100
   14390:	str	r4, [r6, #12]
   14394:	str	r3, [r6, #8]
   14398:	ldr	r4, [pc, #36]	; 143c4 <__assert_fail@plt+0x345c>
   1439c:	cmp	r7, r4
   143a0:	beq	143b0 <__assert_fail@plt+0x3448>
   143a4:	mov	r0, r7
   143a8:	bl	10d40 <free@plt>
   143ac:	str	r4, [r6]
   143b0:	mov	r3, #1
   143b4:	str	r3, [r6, #4]
   143b8:	pop	{r4, r5, r6, r7, r8, pc}
   143bc:	strdeq	r7, [r2], -r0
   143c0:	andeq	r7, r2, r0, lsl #3
   143c4:	strdeq	r7, [r2], -r8
   143c8:	ldr	r3, [pc, #4]	; 143d4 <__assert_fail@plt+0x346c>
   143cc:	mvn	r2, #0
   143d0:	b	13f48 <__assert_fail@plt+0x2fe0>
   143d4:	andeq	r7, r2, r0, lsl #5
   143d8:	ldr	r3, [pc]	; 143e0 <__assert_fail@plt+0x3478>
   143dc:	b	13f48 <__assert_fail@plt+0x2fe0>
   143e0:	andeq	r7, r2, r0, lsl #5
   143e4:	mov	r1, r0
   143e8:	ldr	r3, [pc, #8]	; 143f8 <__assert_fail@plt+0x3490>
   143ec:	mvn	r2, #0
   143f0:	mov	r0, #0
   143f4:	b	13f48 <__assert_fail@plt+0x2fe0>
   143f8:	andeq	r7, r2, r0, lsl #5
   143fc:	mov	r2, r1
   14400:	ldr	r3, [pc, #8]	; 14410 <__assert_fail@plt+0x34a8>
   14404:	mov	r1, r0
   14408:	mov	r0, #0
   1440c:	b	13f48 <__assert_fail@plt+0x2fe0>
   14410:	andeq	r7, r2, r0, lsl #5
   14414:	push	{r4, r5, r6, lr}
   14418:	sub	sp, sp, #56	; 0x38
   1441c:	ldr	r4, [pc, #68]	; 14468 <__assert_fail@plt+0x3500>
   14420:	mov	r6, r2
   14424:	mov	r5, r0
   14428:	ldr	r3, [r4]
   1442c:	add	r0, sp, #4
   14430:	str	r3, [sp, #52]	; 0x34
   14434:	bl	125c0 <__assert_fail@plt+0x1658>
   14438:	add	r3, sp, #4
   1443c:	mvn	r2, #0
   14440:	mov	r1, r6
   14444:	mov	r0, r5
   14448:	bl	13f48 <__assert_fail@plt+0x2fe0>
   1444c:	ldr	r2, [sp, #52]	; 0x34
   14450:	ldr	r3, [r4]
   14454:	cmp	r2, r3
   14458:	bne	14464 <__assert_fail@plt+0x34fc>
   1445c:	add	sp, sp, #56	; 0x38
   14460:	pop	{r4, r5, r6, pc}
   14464:	bl	10da0 <__stack_chk_fail@plt>
   14468:	andeq	r6, r2, r8, lsl #30
   1446c:	push	{r4, r5, r6, r7, lr}
   14470:	sub	sp, sp, #60	; 0x3c
   14474:	ldr	r4, [pc, #72]	; 144c4 <__assert_fail@plt+0x355c>
   14478:	mov	r6, r2
   1447c:	mov	r7, r3
   14480:	ldr	ip, [r4]
   14484:	mov	r5, r0
   14488:	add	r0, sp, #4
   1448c:	str	ip, [sp, #52]	; 0x34
   14490:	bl	125c0 <__assert_fail@plt+0x1658>
   14494:	add	r3, sp, #4
   14498:	mov	r2, r7
   1449c:	mov	r1, r6
   144a0:	mov	r0, r5
   144a4:	bl	13f48 <__assert_fail@plt+0x2fe0>
   144a8:	ldr	r2, [sp, #52]	; 0x34
   144ac:	ldr	r3, [r4]
   144b0:	cmp	r2, r3
   144b4:	bne	144c0 <__assert_fail@plt+0x3558>
   144b8:	add	sp, sp, #60	; 0x3c
   144bc:	pop	{r4, r5, r6, r7, pc}
   144c0:	bl	10da0 <__stack_chk_fail@plt>
   144c4:	andeq	r6, r2, r8, lsl #30
   144c8:	mov	r2, r1
   144cc:	mov	r1, r0
   144d0:	mov	r0, #0
   144d4:	b	14414 <__assert_fail@plt+0x34ac>
   144d8:	mov	r3, r2
   144dc:	mov	r2, r1
   144e0:	mov	r1, r0
   144e4:	mov	r0, #0
   144e8:	b	1446c <__assert_fail@plt+0x3504>
   144ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   144f0:	mov	r4, r2
   144f4:	ldr	lr, [pc, #128]	; 1457c <__assert_fail@plt+0x3614>
   144f8:	mov	r8, r0
   144fc:	mov	r9, r1
   14500:	ldm	lr!, {r0, r1, r2, r3}
   14504:	sub	sp, sp, #60	; 0x3c
   14508:	add	ip, sp, #4
   1450c:	lsr	r6, r4, #5
   14510:	stmia	ip!, {r0, r1, r2, r3}
   14514:	add	r7, sp, #12
   14518:	ldm	lr!, {r0, r1, r2, r3}
   1451c:	and	r4, r4, #31
   14520:	ldr	r5, [pc, #88]	; 14580 <__assert_fail@plt+0x3618>
   14524:	stmia	ip!, {r0, r1, r2, r3}
   14528:	ldm	lr, {r0, r1, r2, r3}
   1452c:	stm	ip, {r0, r1, r2, r3}
   14530:	mov	r2, r9
   14534:	ldr	r3, [r7, r6, lsl #2]
   14538:	ldr	ip, [r5]
   1453c:	mov	r1, r8
   14540:	mvn	r0, r3, lsr r4
   14544:	and	r0, r0, #1
   14548:	str	ip, [sp, #52]	; 0x34
   1454c:	eor	r4, r3, r0, lsl r4
   14550:	add	r3, sp, #4
   14554:	mov	r0, #0
   14558:	str	r4, [r7, r6, lsl #2]
   1455c:	bl	13f48 <__assert_fail@plt+0x2fe0>
   14560:	ldr	r2, [sp, #52]	; 0x34
   14564:	ldr	r3, [r5]
   14568:	cmp	r2, r3
   1456c:	bne	14578 <__assert_fail@plt+0x3610>
   14570:	add	sp, sp, #60	; 0x3c
   14574:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14578:	bl	10da0 <__stack_chk_fail@plt>
   1457c:	andeq	r7, r2, r0, lsl #5
   14580:	andeq	r6, r2, r8, lsl #30
   14584:	mov	r2, r1
   14588:	mvn	r1, #0
   1458c:	b	144ec <__assert_fail@plt+0x3584>
   14590:	mov	r2, #58	; 0x3a
   14594:	mvn	r1, #0
   14598:	b	144ec <__assert_fail@plt+0x3584>
   1459c:	mov	r2, #58	; 0x3a
   145a0:	b	144ec <__assert_fail@plt+0x3584>
   145a4:	push	{r4, r5, r6, r7, r8, lr}
   145a8:	sub	sp, sp, #104	; 0x68
   145ac:	ldr	r5, [pc, #120]	; 1462c <__assert_fail@plt+0x36c4>
   145b0:	mov	r6, r0
   145b4:	mov	r0, sp
   145b8:	ldr	r3, [r5]
   145bc:	mov	r7, r2
   145c0:	str	r3, [sp, #100]	; 0x64
   145c4:	bl	125c0 <__assert_fail@plt+0x1658>
   145c8:	mov	ip, sp
   145cc:	add	lr, sp, #52	; 0x34
   145d0:	ldm	ip!, {r0, r1, r2, r3}
   145d4:	stmia	lr!, {r0, r1, r2, r3}
   145d8:	ldm	ip!, {r0, r1, r2, r3}
   145dc:	ldr	r8, [sp, #64]	; 0x40
   145e0:	stmia	lr!, {r0, r1, r2, r3}
   145e4:	mvn	r4, r8
   145e8:	ldm	ip, {r0, r1, r2, r3}
   145ec:	and	ip, r4, #67108864	; 0x4000000
   145f0:	eor	ip, ip, r8
   145f4:	str	ip, [sp, #64]	; 0x40
   145f8:	stm	lr, {r0, r1, r2, r3}
   145fc:	add	r3, sp, #52	; 0x34
   14600:	mvn	r2, #0
   14604:	mov	r1, r7
   14608:	mov	r0, r6
   1460c:	bl	13f48 <__assert_fail@plt+0x2fe0>
   14610:	ldr	r2, [sp, #100]	; 0x64
   14614:	ldr	r3, [r5]
   14618:	cmp	r2, r3
   1461c:	bne	14628 <__assert_fail@plt+0x36c0>
   14620:	add	sp, sp, #104	; 0x68
   14624:	pop	{r4, r5, r6, r7, r8, pc}
   14628:	bl	10da0 <__stack_chk_fail@plt>
   1462c:	andeq	r6, r2, r8, lsl #30
   14630:	push	{r4, r5, r6, r7, r8, r9, lr}
   14634:	mov	r6, r1
   14638:	ldr	lr, [pc, #132]	; 146c4 <__assert_fail@plt+0x375c>
   1463c:	mov	r5, r2
   14640:	mov	r8, r0
   14644:	mov	r9, r3
   14648:	ldm	lr!, {r0, r1, r2, r3}
   1464c:	sub	sp, sp, #60	; 0x3c
   14650:	add	ip, sp, #4
   14654:	ldr	r4, [pc, #108]	; 146c8 <__assert_fail@plt+0x3760>
   14658:	stmia	ip!, {r0, r1, r2, r3}
   1465c:	mov	r7, #10
   14660:	ldm	lr!, {r0, r1, r2, r3}
   14664:	cmp	r5, #0
   14668:	cmpne	r6, #0
   1466c:	str	r7, [sp, #4]
   14670:	stmia	ip!, {r0, r1, r2, r3}
   14674:	ldm	lr, {r0, r1, r2, r3}
   14678:	ldr	lr, [r4]
   1467c:	stm	ip, {r0, r1, r2, r3}
   14680:	str	lr, [sp, #52]	; 0x34
   14684:	beq	146c0 <__assert_fail@plt+0x3758>
   14688:	add	r3, sp, #4
   1468c:	ldr	r2, [sp, #88]	; 0x58
   14690:	mov	r1, r9
   14694:	mov	r0, r8
   14698:	str	r6, [sp, #44]	; 0x2c
   1469c:	str	r5, [sp, #48]	; 0x30
   146a0:	bl	13f48 <__assert_fail@plt+0x2fe0>
   146a4:	ldr	r2, [sp, #52]	; 0x34
   146a8:	ldr	r3, [r4]
   146ac:	cmp	r2, r3
   146b0:	bne	146bc <__assert_fail@plt+0x3754>
   146b4:	add	sp, sp, #60	; 0x3c
   146b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   146bc:	bl	10da0 <__stack_chk_fail@plt>
   146c0:	bl	10f50 <abort@plt>
   146c4:	andeq	r7, r2, r0, lsl #5
   146c8:	andeq	r6, r2, r8, lsl #30
   146cc:	push	{lr}		; (str lr, [sp, #-4]!)
   146d0:	sub	sp, sp, #12
   146d4:	mvn	ip, #0
   146d8:	str	ip, [sp]
   146dc:	bl	14630 <__assert_fail@plt+0x36c8>
   146e0:	add	sp, sp, #12
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	push	{lr}		; (str lr, [sp, #-4]!)
   146ec:	sub	sp, sp, #12
   146f0:	mvn	ip, #0
   146f4:	mov	r3, r2
   146f8:	str	ip, [sp]
   146fc:	mov	r2, r1
   14700:	mov	r1, r0
   14704:	mov	r0, #0
   14708:	bl	14630 <__assert_fail@plt+0x36c8>
   1470c:	add	sp, sp, #12
   14710:	pop	{pc}		; (ldr pc, [sp], #4)
   14714:	push	{lr}		; (str lr, [sp, #-4]!)
   14718:	sub	sp, sp, #12
   1471c:	str	r3, [sp]
   14720:	mov	r3, r2
   14724:	mov	r2, r1
   14728:	mov	r1, r0
   1472c:	mov	r0, #0
   14730:	bl	14630 <__assert_fail@plt+0x36c8>
   14734:	add	sp, sp, #12
   14738:	pop	{pc}		; (ldr pc, [sp], #4)
   1473c:	ldr	r3, [pc]	; 14744 <__assert_fail@plt+0x37dc>
   14740:	b	13f48 <__assert_fail@plt+0x2fe0>
   14744:	andeq	r7, r2, r0, lsl #2
   14748:	mov	r2, r1
   1474c:	ldr	r3, [pc, #8]	; 1475c <__assert_fail@plt+0x37f4>
   14750:	mov	r1, r0
   14754:	mov	r0, #0
   14758:	b	13f48 <__assert_fail@plt+0x2fe0>
   1475c:	andeq	r7, r2, r0, lsl #2
   14760:	ldr	r3, [pc, #4]	; 1476c <__assert_fail@plt+0x3804>
   14764:	mvn	r2, #0
   14768:	b	13f48 <__assert_fail@plt+0x2fe0>
   1476c:	andeq	r7, r2, r0, lsl #2
   14770:	mov	r1, r0
   14774:	ldr	r3, [pc, #8]	; 14784 <__assert_fail@plt+0x381c>
   14778:	mvn	r2, #0
   1477c:	mov	r0, #0
   14780:	b	13f48 <__assert_fail@plt+0x2fe0>
   14784:	andeq	r7, r2, r0, lsl #2
   14788:	push	{r4, r5, r6, lr}
   1478c:	sub	sp, sp, #32
   14790:	cmp	r1, #0
   14794:	mov	r5, r0
   14798:	ldr	r4, [sp, #48]	; 0x30
   1479c:	ldr	r6, [sp, #52]	; 0x34
   147a0:	beq	14830 <__assert_fail@plt+0x38c8>
   147a4:	strd	r2, [sp]
   147a8:	mov	r3, r1
   147ac:	ldr	r2, [pc, #828]	; 14af0 <__assert_fail@plt+0x3b88>
   147b0:	mov	r1, #1
   147b4:	bl	10ed8 <__fprintf_chk@plt>
   147b8:	mov	r2, #5
   147bc:	ldr	r1, [pc, #816]	; 14af4 <__assert_fail@plt+0x3b8c>
   147c0:	mov	r0, #0
   147c4:	bl	10d94 <dcgettext@plt>
   147c8:	ldr	r3, [pc, #808]	; 14af8 <__assert_fail@plt+0x3b90>
   147cc:	ldr	r2, [pc, #808]	; 14afc <__assert_fail@plt+0x3b94>
   147d0:	str	r3, [sp]
   147d4:	mov	r1, #1
   147d8:	mov	r3, r0
   147dc:	mov	r0, r5
   147e0:	bl	10ed8 <__fprintf_chk@plt>
   147e4:	ldr	r1, [pc, #788]	; 14b00 <__assert_fail@plt+0x3b98>
   147e8:	mov	r2, #5
   147ec:	mov	r0, #0
   147f0:	bl	10d94 <dcgettext@plt>
   147f4:	mov	r1, r5
   147f8:	bl	10d10 <fputs_unlocked@plt>
   147fc:	cmp	r6, #9
   14800:	ldrls	pc, [pc, r6, lsl #2]
   14804:	b	14ae0 <__assert_fail@plt+0x3b78>
   14808:	andeq	r4, r1, ip, ror #21
   1480c:			; <UNDEFINED> instruction: 0x000148b4
   14810:	andeq	r4, r1, r0, ror #17
   14814:	andeq	r4, r1, r4, lsl r9
   14818:	andeq	r4, r1, r0, asr r9
   1481c:	muleq	r1, r0, r9
   14820:	ldrdeq	r4, [r1], -r8
   14824:	andeq	r4, r1, r8, lsr #20
   14828:	andeq	r4, r1, r0, lsl #21
   1482c:	andeq	r4, r1, r8, asr #16
   14830:	str	r3, [sp]
   14834:	mov	r1, #1
   14838:	mov	r3, r2
   1483c:	ldr	r2, [pc, #704]	; 14b04 <__assert_fail@plt+0x3b9c>
   14840:	bl	10ed8 <__fprintf_chk@plt>
   14844:	b	147b8 <__assert_fail@plt+0x3850>
   14848:	ldr	r1, [pc, #696]	; 14b08 <__assert_fail@plt+0x3ba0>
   1484c:	mov	r2, #5
   14850:	mov	r0, #0
   14854:	bl	10d94 <dcgettext@plt>
   14858:	ldr	r2, [r4, #32]
   1485c:	ldr	r3, [r4, #28]
   14860:	ldr	r1, [r4, #24]
   14864:	str	r2, [sp, #28]
   14868:	ldr	r2, [r4, #20]
   1486c:	str	r3, [sp, #24]
   14870:	ldr	r3, [r4, #16]
   14874:	str	r1, [sp, #20]
   14878:	ldr	r1, [r4, #12]
   1487c:	str	r2, [sp, #16]
   14880:	ldr	r2, [r4, #8]
   14884:	str	r3, [sp, #12]
   14888:	ldr	r3, [r4, #4]
   1488c:	str	r1, [sp, #8]
   14890:	str	r2, [sp, #4]
   14894:	str	r3, [sp]
   14898:	mov	r1, #1
   1489c:	ldr	r3, [r4]
   148a0:	mov	r2, r0
   148a4:	mov	r0, r5
   148a8:	bl	10ed8 <__fprintf_chk@plt>
   148ac:	add	sp, sp, #32
   148b0:	pop	{r4, r5, r6, pc}
   148b4:	mov	r2, #5
   148b8:	ldr	r1, [pc, #588]	; 14b0c <__assert_fail@plt+0x3ba4>
   148bc:	mov	r0, #0
   148c0:	bl	10d94 <dcgettext@plt>
   148c4:	ldr	r3, [r4]
   148c8:	mov	r1, #1
   148cc:	mov	r2, r0
   148d0:	mov	r0, r5
   148d4:	add	sp, sp, #32
   148d8:	pop	{r4, r5, r6, lr}
   148dc:	b	10ed8 <__fprintf_chk@plt>
   148e0:	mov	r2, #5
   148e4:	ldr	r1, [pc, #548]	; 14b10 <__assert_fail@plt+0x3ba8>
   148e8:	mov	r0, #0
   148ec:	bl	10d94 <dcgettext@plt>
   148f0:	ldr	r2, [r4, #4]
   148f4:	ldr	r3, [r4]
   148f8:	mov	r1, #1
   148fc:	str	r2, [sp, #48]	; 0x30
   14900:	mov	r2, r0
   14904:	mov	r0, r5
   14908:	add	sp, sp, #32
   1490c:	pop	{r4, r5, r6, lr}
   14910:	b	10ed8 <__fprintf_chk@plt>
   14914:	mov	r2, #5
   14918:	ldr	r1, [pc, #500]	; 14b14 <__assert_fail@plt+0x3bac>
   1491c:	mov	r0, #0
   14920:	bl	10d94 <dcgettext@plt>
   14924:	ldr	r2, [r4, #8]
   14928:	ldr	r3, [r4, #4]
   1492c:	mov	r1, #1
   14930:	str	r2, [sp, #52]	; 0x34
   14934:	str	r3, [sp, #48]	; 0x30
   14938:	ldr	r3, [r4]
   1493c:	mov	r2, r0
   14940:	mov	r0, r5
   14944:	add	sp, sp, #32
   14948:	pop	{r4, r5, r6, lr}
   1494c:	b	10ed8 <__fprintf_chk@plt>
   14950:	mov	r2, #5
   14954:	ldr	r1, [pc, #444]	; 14b18 <__assert_fail@plt+0x3bb0>
   14958:	mov	r0, #0
   1495c:	bl	10d94 <dcgettext@plt>
   14960:	ldr	r1, [r4, #12]
   14964:	ldr	r2, [r4, #8]
   14968:	ldr	r3, [r4, #4]
   1496c:	str	r1, [sp, #8]
   14970:	str	r2, [sp, #4]
   14974:	str	r3, [sp]
   14978:	mov	r1, #1
   1497c:	ldr	r3, [r4]
   14980:	mov	r2, r0
   14984:	mov	r0, r5
   14988:	bl	10ed8 <__fprintf_chk@plt>
   1498c:	b	148ac <__assert_fail@plt+0x3944>
   14990:	mov	r2, #5
   14994:	ldr	r1, [pc, #384]	; 14b1c <__assert_fail@plt+0x3bb4>
   14998:	mov	r0, #0
   1499c:	bl	10d94 <dcgettext@plt>
   149a0:	ldr	r3, [r4, #16]
   149a4:	ldr	r1, [r4, #12]
   149a8:	ldr	r2, [r4, #8]
   149ac:	str	r3, [sp, #12]
   149b0:	ldr	r3, [r4, #4]
   149b4:	str	r1, [sp, #8]
   149b8:	str	r2, [sp, #4]
   149bc:	str	r3, [sp]
   149c0:	mov	r1, #1
   149c4:	ldr	r3, [r4]
   149c8:	mov	r2, r0
   149cc:	mov	r0, r5
   149d0:	bl	10ed8 <__fprintf_chk@plt>
   149d4:	b	148ac <__assert_fail@plt+0x3944>
   149d8:	mov	r2, #5
   149dc:	ldr	r1, [pc, #316]	; 14b20 <__assert_fail@plt+0x3bb8>
   149e0:	mov	r0, #0
   149e4:	bl	10d94 <dcgettext@plt>
   149e8:	ldr	r2, [r4, #20]
   149ec:	ldr	r3, [r4, #16]
   149f0:	ldr	r1, [r4, #12]
   149f4:	str	r2, [sp, #16]
   149f8:	ldr	r2, [r4, #8]
   149fc:	str	r3, [sp, #12]
   14a00:	ldr	r3, [r4, #4]
   14a04:	str	r1, [sp, #8]
   14a08:	str	r2, [sp, #4]
   14a0c:	str	r3, [sp]
   14a10:	mov	r1, #1
   14a14:	ldr	r3, [r4]
   14a18:	mov	r2, r0
   14a1c:	mov	r0, r5
   14a20:	bl	10ed8 <__fprintf_chk@plt>
   14a24:	b	148ac <__assert_fail@plt+0x3944>
   14a28:	mov	r2, #5
   14a2c:	ldr	r1, [pc, #240]	; 14b24 <__assert_fail@plt+0x3bbc>
   14a30:	mov	r0, #0
   14a34:	bl	10d94 <dcgettext@plt>
   14a38:	ldr	r1, [r4, #24]
   14a3c:	ldr	r2, [r4, #20]
   14a40:	ldr	r3, [r4, #16]
   14a44:	str	r1, [sp, #20]
   14a48:	ldr	r1, [r4, #12]
   14a4c:	str	r2, [sp, #16]
   14a50:	ldr	r2, [r4, #8]
   14a54:	str	r3, [sp, #12]
   14a58:	ldr	r3, [r4, #4]
   14a5c:	str	r1, [sp, #8]
   14a60:	str	r2, [sp, #4]
   14a64:	str	r3, [sp]
   14a68:	mov	r1, #1
   14a6c:	ldr	r3, [r4]
   14a70:	mov	r2, r0
   14a74:	mov	r0, r5
   14a78:	bl	10ed8 <__fprintf_chk@plt>
   14a7c:	b	148ac <__assert_fail@plt+0x3944>
   14a80:	mov	r2, #5
   14a84:	ldr	r1, [pc, #156]	; 14b28 <__assert_fail@plt+0x3bc0>
   14a88:	mov	r0, #0
   14a8c:	bl	10d94 <dcgettext@plt>
   14a90:	ldr	r3, [r4, #28]
   14a94:	ldr	r1, [r4, #24]
   14a98:	ldr	r2, [r4, #20]
   14a9c:	str	r3, [sp, #24]
   14aa0:	ldr	r3, [r4, #16]
   14aa4:	str	r1, [sp, #20]
   14aa8:	ldr	r1, [r4, #12]
   14aac:	str	r2, [sp, #16]
   14ab0:	ldr	r2, [r4, #8]
   14ab4:	str	r3, [sp, #12]
   14ab8:	ldr	r3, [r4, #4]
   14abc:	str	r1, [sp, #8]
   14ac0:	str	r2, [sp, #4]
   14ac4:	str	r3, [sp]
   14ac8:	mov	r1, #1
   14acc:	ldr	r3, [r4]
   14ad0:	mov	r2, r0
   14ad4:	mov	r0, r5
   14ad8:	bl	10ed8 <__fprintf_chk@plt>
   14adc:	b	148ac <__assert_fail@plt+0x3944>
   14ae0:	mov	r2, #5
   14ae4:	ldr	r1, [pc, #64]	; 14b2c <__assert_fail@plt+0x3bc4>
   14ae8:	b	14850 <__assert_fail@plt+0x38e8>
   14aec:	bl	10f50 <abort@plt>
   14af0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14af4:	andeq	r5, r1, r4, lsr #31
   14af8:	andeq	r0, r0, r2, ror #15
   14afc:	andeq	r6, r1, r8, ror r2
   14b00:	andeq	r5, r1, r8, lsr #31
   14b04:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14b08:	andeq	r6, r1, r0, lsl #3
   14b0c:	andeq	r6, r1, r4, ror r0
   14b10:	andeq	r6, r1, r4, lsl #1
   14b14:	muleq	r1, ip, r0
   14b18:	strheq	r6, [r1], -r8
   14b1c:	ldrdeq	r6, [r1], -r8
   14b20:	strdeq	r6, [r1], -ip
   14b24:	andeq	r6, r1, r4, lsr #2
   14b28:	andeq	r6, r1, r0, asr r1
   14b2c:			; <UNDEFINED> instruction: 0x000161b4
   14b30:	push	{r4, r5, lr}
   14b34:	sub	sp, sp, #12
   14b38:	ldr	r5, [sp, #24]
   14b3c:	ldr	ip, [r5]
   14b40:	cmp	ip, #0
   14b44:	beq	14b60 <__assert_fail@plt+0x3bf8>
   14b48:	mov	lr, r5
   14b4c:	mov	ip, #0
   14b50:	ldr	r4, [lr, #4]!
   14b54:	add	ip, ip, #1
   14b58:	cmp	r4, #0
   14b5c:	bne	14b50 <__assert_fail@plt+0x3be8>
   14b60:	stm	sp, {r5, ip}
   14b64:	bl	14788 <__assert_fail@plt+0x3820>
   14b68:	add	sp, sp, #12
   14b6c:	pop	{r4, r5, pc}
   14b70:	push	{r4, r5, r6, lr}
   14b74:	sub	sp, sp, #56	; 0x38
   14b78:	ldr	r6, [pc, #88]	; 14bd8 <__assert_fail@plt+0x3c70>
   14b7c:	ldr	r5, [sp, #72]	; 0x48
   14b80:	add	r4, sp, #8
   14b84:	ldr	ip, [r6]
   14b88:	str	ip, [sp, #52]	; 0x34
   14b8c:	mov	ip, #0
   14b90:	ldr	lr, [r5], #4
   14b94:	cmp	lr, #0
   14b98:	str	lr, [r4, #4]!
   14b9c:	beq	14bac <__assert_fail@plt+0x3c44>
   14ba0:	add	ip, ip, #1
   14ba4:	cmp	ip, #10
   14ba8:	bne	14b90 <__assert_fail@plt+0x3c28>
   14bac:	add	lr, sp, #12
   14bb0:	str	ip, [sp, #4]
   14bb4:	str	lr, [sp]
   14bb8:	bl	14788 <__assert_fail@plt+0x3820>
   14bbc:	ldr	r2, [sp, #52]	; 0x34
   14bc0:	ldr	r3, [r6]
   14bc4:	cmp	r2, r3
   14bc8:	bne	14bd4 <__assert_fail@plt+0x3c6c>
   14bcc:	add	sp, sp, #56	; 0x38
   14bd0:	pop	{r4, r5, r6, pc}
   14bd4:	bl	10da0 <__stack_chk_fail@plt>
   14bd8:	andeq	r6, r2, r8, lsl #30
   14bdc:	push	{r3}		; (str r3, [sp, #-4]!)
   14be0:	mov	ip, #0
   14be4:	push	{r4, r5, r6, lr}
   14be8:	sub	sp, sp, #60	; 0x3c
   14bec:	ldr	r6, [pc, #100]	; 14c58 <__assert_fail@plt+0x3cf0>
   14bf0:	add	r5, sp, #8
   14bf4:	add	r4, sp, #80	; 0x50
   14bf8:	ldr	r3, [r6]
   14bfc:	str	r4, [sp, #8]
   14c00:	str	r3, [sp, #52]	; 0x34
   14c04:	ldr	r3, [sp, #76]	; 0x4c
   14c08:	ldr	lr, [r4], #4
   14c0c:	cmp	lr, #0
   14c10:	str	lr, [r5, #4]!
   14c14:	beq	14c24 <__assert_fail@plt+0x3cbc>
   14c18:	add	ip, ip, #1
   14c1c:	cmp	ip, #10
   14c20:	bne	14c08 <__assert_fail@plt+0x3ca0>
   14c24:	add	lr, sp, #12
   14c28:	str	ip, [sp, #4]
   14c2c:	str	lr, [sp]
   14c30:	bl	14788 <__assert_fail@plt+0x3820>
   14c34:	ldr	r2, [sp, #52]	; 0x34
   14c38:	ldr	r3, [r6]
   14c3c:	cmp	r2, r3
   14c40:	bne	14c54 <__assert_fail@plt+0x3cec>
   14c44:	add	sp, sp, #60	; 0x3c
   14c48:	pop	{r4, r5, r6, lr}
   14c4c:	add	sp, sp, #4
   14c50:	bx	lr
   14c54:	bl	10da0 <__stack_chk_fail@plt>
   14c58:	andeq	r6, r2, r8, lsl #30
   14c5c:	push	{r4, lr}
   14c60:	mov	r2, #5
   14c64:	ldr	r1, [pc, #88]	; 14cc4 <__assert_fail@plt+0x3d5c>
   14c68:	mov	r0, #0
   14c6c:	bl	10d94 <dcgettext@plt>
   14c70:	ldr	r2, [pc, #80]	; 14cc8 <__assert_fail@plt+0x3d60>
   14c74:	mov	r1, r0
   14c78:	mov	r0, #1
   14c7c:	bl	10ec0 <__printf_chk@plt>
   14c80:	mov	r2, #5
   14c84:	ldr	r1, [pc, #64]	; 14ccc <__assert_fail@plt+0x3d64>
   14c88:	mov	r0, #0
   14c8c:	bl	10d94 <dcgettext@plt>
   14c90:	ldr	r3, [pc, #56]	; 14cd0 <__assert_fail@plt+0x3d68>
   14c94:	ldr	r2, [pc, #56]	; 14cd4 <__assert_fail@plt+0x3d6c>
   14c98:	mov	r1, r0
   14c9c:	mov	r0, #1
   14ca0:	bl	10ec0 <__printf_chk@plt>
   14ca4:	ldr	r1, [pc, #44]	; 14cd8 <__assert_fail@plt+0x3d70>
   14ca8:	mov	r2, #5
   14cac:	mov	r0, #0
   14cb0:	bl	10d94 <dcgettext@plt>
   14cb4:	ldr	r3, [pc, #32]	; 14cdc <__assert_fail@plt+0x3d74>
   14cb8:	pop	{r4, lr}
   14cbc:	ldr	r1, [r3]
   14cc0:	b	10d10 <fputs_unlocked@plt>
   14cc4:	strdeq	r6, [r1], -r0
   14cc8:	andeq	r6, r1, r8, lsl #4
   14ccc:	andeq	r6, r1, r0, lsr #4
   14cd0:	ldrdeq	r5, [r1], -r4
   14cd4:	strdeq	r5, [r1], -ip
   14cd8:	andeq	r6, r1, r4, lsr r2
   14cdc:	andeq	r7, r2, ip, asr #2
   14ce0:	push	{r4, lr}
   14ce4:	mov	r4, r0
   14ce8:	bl	10e30 <malloc@plt>
   14cec:	adds	r4, r4, #0
   14cf0:	movne	r4, #1
   14cf4:	cmp	r0, #0
   14cf8:	movne	r4, #0
   14cfc:	cmp	r4, #0
   14d00:	popeq	{r4, pc}
   14d04:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14d08:	push	{r4, r5, r6, lr}
   14d0c:	umull	r4, r5, r0, r1
   14d10:	adds	r3, r5, #0
   14d14:	movne	r3, #1
   14d18:	cmp	r4, #0
   14d1c:	blt	14d34 <__assert_fail@plt+0x3dcc>
   14d20:	cmp	r3, #0
   14d24:	bne	14d34 <__assert_fail@plt+0x3dcc>
   14d28:	mul	r0, r1, r0
   14d2c:	pop	{r4, r5, r6, lr}
   14d30:	b	14ce0 <__assert_fail@plt+0x3d78>
   14d34:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14d38:	b	14ce0 <__assert_fail@plt+0x3d78>
   14d3c:	adds	r3, r0, #0
   14d40:	movne	r3, #1
   14d44:	cmp	r1, #0
   14d48:	movne	r3, #0
   14d4c:	cmp	r3, #0
   14d50:	push	{r4, lr}
   14d54:	bne	14d7c <__assert_fail@plt+0x3e14>
   14d58:	mov	r4, r1
   14d5c:	bl	10dac <realloc@plt>
   14d60:	adds	r4, r4, #0
   14d64:	movne	r4, #1
   14d68:	cmp	r0, #0
   14d6c:	movne	r4, #0
   14d70:	cmp	r4, #0
   14d74:	popeq	{r4, pc}
   14d78:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14d7c:	bl	10d40 <free@plt>
   14d80:	mov	r0, #0
   14d84:	pop	{r4, pc}
   14d88:	push	{r4, r5, r6, lr}
   14d8c:	umull	r4, r5, r1, r2
   14d90:	adds	r3, r5, #0
   14d94:	movne	r3, #1
   14d98:	cmp	r4, #0
   14d9c:	blt	14db4 <__assert_fail@plt+0x3e4c>
   14da0:	cmp	r3, #0
   14da4:	bne	14db4 <__assert_fail@plt+0x3e4c>
   14da8:	mul	r1, r2, r1
   14dac:	pop	{r4, r5, r6, lr}
   14db0:	b	14d3c <__assert_fail@plt+0x3dd4>
   14db4:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14db8:	push	{r4, r5, r6, r7, r8, lr}
   14dbc:	subs	r7, r0, #0
   14dc0:	mov	r6, r1
   14dc4:	mov	r5, r2
   14dc8:	ldr	r4, [r1]
   14dcc:	beq	14e00 <__assert_fail@plt+0x3e98>
   14dd0:	mov	r1, r2
   14dd4:	ldr	r0, [pc, #104]	; 14e44 <__assert_fail@plt+0x3edc>
   14dd8:	bl	1527c <__assert_fail@plt+0x4314>
   14ddc:	cmp	r0, r4
   14de0:	bls	14e24 <__assert_fail@plt+0x3ebc>
   14de4:	add	r3, r4, #1
   14de8:	add	r4, r3, r4, lsr #1
   14dec:	str	r4, [r6]
   14df0:	mul	r1, r5, r4
   14df4:	mov	r0, r7
   14df8:	pop	{r4, r5, r6, r7, r8, lr}
   14dfc:	b	14d3c <__assert_fail@plt+0x3dd4>
   14e00:	cmp	r4, #0
   14e04:	beq	14e28 <__assert_fail@plt+0x3ec0>
   14e08:	umull	r0, r1, r4, r5
   14e0c:	adds	r3, r1, #0
   14e10:	movne	r3, #1
   14e14:	cmp	r0, #0
   14e18:	blt	14e24 <__assert_fail@plt+0x3ebc>
   14e1c:	cmp	r3, #0
   14e20:	beq	14dec <__assert_fail@plt+0x3e84>
   14e24:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14e28:	mov	r1, r2
   14e2c:	mov	r0, #64	; 0x40
   14e30:	bl	1527c <__assert_fail@plt+0x4314>
   14e34:	cmp	r5, #64	; 0x40
   14e38:	movls	r4, r0
   14e3c:	addhi	r4, r0, #1
   14e40:	b	14e08 <__assert_fail@plt+0x3ea0>
   14e44:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14e48:	cmp	r0, #0
   14e4c:	ldr	r3, [r1]
   14e50:	beq	14e74 <__assert_fail@plt+0x3f0c>
   14e54:	ldr	r2, [pc, #60]	; 14e98 <__assert_fail@plt+0x3f30>
   14e58:	cmp	r3, r2
   14e5c:	bhi	14e90 <__assert_fail@plt+0x3f28>
   14e60:	add	r2, r3, #1
   14e64:	add	r3, r2, r3, lsr #1
   14e68:	str	r3, [r1]
   14e6c:	mov	r1, r3
   14e70:	b	14d3c <__assert_fail@plt+0x3dd4>
   14e74:	cmp	r3, #0
   14e78:	bne	14e8c <__assert_fail@plt+0x3f24>
   14e7c:	mov	r3, #64	; 0x40
   14e80:	str	r3, [r1]
   14e84:	mov	r1, r3
   14e88:	b	14d3c <__assert_fail@plt+0x3dd4>
   14e8c:	bge	14e68 <__assert_fail@plt+0x3f00>
   14e90:	push	{r4, lr}
   14e94:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14e98:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14e9c:	push	{r4, lr}
   14ea0:	mov	r4, r0
   14ea4:	bl	14ce0 <__assert_fail@plt+0x3d78>
   14ea8:	mov	r2, r4
   14eac:	mov	r1, #0
   14eb0:	pop	{r4, lr}
   14eb4:	b	10eb4 <memset@plt>
   14eb8:	push	{r4, r5, r6, lr}
   14ebc:	umull	r4, r5, r0, r1
   14ec0:	adds	r3, r5, #0
   14ec4:	movne	r3, #1
   14ec8:	cmp	r4, #0
   14ecc:	blt	14ee4 <__assert_fail@plt+0x3f7c>
   14ed0:	cmp	r3, #0
   14ed4:	bne	14ee4 <__assert_fail@plt+0x3f7c>
   14ed8:	bl	10d04 <calloc@plt>
   14edc:	cmp	r0, #0
   14ee0:	popne	{r4, r5, r6, pc}
   14ee4:	bl	14f28 <__assert_fail@plt+0x3fc0>
   14ee8:	push	{r4, r5, r6, lr}
   14eec:	mov	r4, r1
   14ef0:	mov	r5, r0
   14ef4:	mov	r0, r1
   14ef8:	bl	14ce0 <__assert_fail@plt+0x3d78>
   14efc:	mov	r2, r4
   14f00:	mov	r1, r5
   14f04:	pop	{r4, r5, r6, lr}
   14f08:	b	10d58 <memcpy@plt>
   14f0c:	push	{r4, lr}
   14f10:	mov	r4, r0
   14f14:	bl	10e84 <strlen@plt>
   14f18:	add	r1, r0, #1
   14f1c:	mov	r0, r4
   14f20:	pop	{r4, lr}
   14f24:	b	14ee8 <__assert_fail@plt+0x3f80>
   14f28:	ldr	r3, [pc, #44]	; 14f5c <__assert_fail@plt+0x3ff4>
   14f2c:	push	{r4, lr}
   14f30:	mov	r2, #5
   14f34:	ldr	r1, [pc, #36]	; 14f60 <__assert_fail@plt+0x3ff8>
   14f38:	mov	r0, #0
   14f3c:	ldr	r4, [r3]
   14f40:	bl	10d94 <dcgettext@plt>
   14f44:	ldr	r2, [pc, #24]	; 14f64 <__assert_fail@plt+0x3ffc>
   14f48:	mov	r1, #0
   14f4c:	mov	r3, r0
   14f50:	mov	r0, r4
   14f54:	bl	10e18 <error@plt>
   14f58:	bl	10f50 <abort@plt>
   14f5c:	andeq	r7, r2, ip, ror #1
   14f60:	andeq	r6, r1, r8, lsr #5
   14f64:	andeq	r5, r1, r4, ror lr
   14f68:	push	{r4, r5, r6, r7, r8, lr}
   14f6c:	subs	r7, r0, #0
   14f70:	ldr	r5, [pc, #108]	; 14fe4 <__assert_fail@plt+0x407c>
   14f74:	sub	sp, sp, #8
   14f78:	mov	r8, r1
   14f7c:	ldr	r1, [r5]
   14f80:	moveq	r7, sp
   14f84:	str	r1, [sp, #4]
   14f88:	mov	r0, r7
   14f8c:	mov	r1, r8
   14f90:	mov	r6, r2
   14f94:	bl	10e0c <mbrtowc@plt>
   14f98:	cmp	r6, #0
   14f9c:	cmnne	r0, #3
   14fa0:	mov	r4, r0
   14fa4:	bhi	14fc4 <__assert_fail@plt+0x405c>
   14fa8:	ldr	r2, [sp, #4]
   14fac:	ldr	r3, [r5]
   14fb0:	mov	r0, r4
   14fb4:	cmp	r2, r3
   14fb8:	bne	14fe0 <__assert_fail@plt+0x4078>
   14fbc:	add	sp, sp, #8
   14fc0:	pop	{r4, r5, r6, r7, r8, pc}
   14fc4:	mov	r0, #0
   14fc8:	bl	1505c <__assert_fail@plt+0x40f4>
   14fcc:	cmp	r0, #0
   14fd0:	moveq	r4, #1
   14fd4:	ldrbeq	r3, [r8]
   14fd8:	streq	r3, [r7]
   14fdc:	b	14fa8 <__assert_fail@plt+0x4040>
   14fe0:	bl	10da0 <__stack_chk_fail@plt>
   14fe4:	andeq	r6, r2, r8, lsl #30
   14fe8:	push	{r4, r5, r6, lr}
   14fec:	mov	r4, r0
   14ff0:	bl	10e00 <__fpending@plt>
   14ff4:	ldr	r5, [r4]
   14ff8:	and	r5, r5, #32
   14ffc:	mov	r6, r0
   15000:	mov	r0, r4
   15004:	bl	150dc <__assert_fail@plt+0x4174>
   15008:	cmp	r5, #0
   1500c:	mov	r4, r0
   15010:	bne	1503c <__assert_fail@plt+0x40d4>
   15014:	cmp	r0, #0
   15018:	beq	15034 <__assert_fail@plt+0x40cc>
   1501c:	cmp	r6, #0
   15020:	bne	15054 <__assert_fail@plt+0x40ec>
   15024:	bl	10e9c <__errno_location@plt>
   15028:	ldr	r4, [r0]
   1502c:	subs	r4, r4, #9
   15030:	mvnne	r4, #0
   15034:	mov	r0, r4
   15038:	pop	{r4, r5, r6, pc}
   1503c:	cmp	r0, #0
   15040:	bne	15054 <__assert_fail@plt+0x40ec>
   15044:	bl	10e9c <__errno_location@plt>
   15048:	str	r4, [r0]
   1504c:	mvn	r4, #0
   15050:	b	15034 <__assert_fail@plt+0x40cc>
   15054:	mvn	r4, #0
   15058:	b	15034 <__assert_fail@plt+0x40cc>
   1505c:	push	{r4, lr}
   15060:	mov	r1, #0
   15064:	bl	10efc <setlocale@plt>
   15068:	subs	r4, r0, #0
   1506c:	beq	15098 <__assert_fail@plt+0x4130>
   15070:	ldr	r1, [pc, #40]	; 150a0 <__assert_fail@plt+0x4138>
   15074:	bl	10d28 <strcmp@plt>
   15078:	cmp	r0, #0
   1507c:	popeq	{r4, pc}
   15080:	mov	r0, r4
   15084:	ldr	r1, [pc, #24]	; 150a4 <__assert_fail@plt+0x413c>
   15088:	bl	10d28 <strcmp@plt>
   1508c:	adds	r0, r0, #0
   15090:	movne	r0, #1
   15094:	pop	{r4, pc}
   15098:	mov	r0, #1
   1509c:	pop	{r4, pc}
   150a0:			; <UNDEFINED> instruction: 0x000162bc
   150a4:	andeq	r6, r1, r0, asr #5
   150a8:	push	{r4, lr}
   150ac:	mov	r0, #14
   150b0:	bl	10f20 <nl_langinfo@plt>
   150b4:	cmp	r0, #0
   150b8:	beq	150d0 <__assert_fail@plt+0x4168>
   150bc:	ldrb	r2, [r0]
   150c0:	ldr	r3, [pc, #16]	; 150d8 <__assert_fail@plt+0x4170>
   150c4:	cmp	r2, #0
   150c8:	moveq	r0, r3
   150cc:	pop	{r4, pc}
   150d0:	ldr	r0, [pc]	; 150d8 <__assert_fail@plt+0x4170>
   150d4:	pop	{r4, pc}
   150d8:	andeq	r6, r1, r8, asr #5
   150dc:	push	{r4, r5, lr}
   150e0:	sub	sp, sp, #12
   150e4:	mov	r4, r0
   150e8:	bl	10ecc <fileno@plt>
   150ec:	cmp	r0, #0
   150f0:	mov	r0, r4
   150f4:	blt	15170 <__assert_fail@plt+0x4208>
   150f8:	bl	10e48 <__freading@plt>
   150fc:	cmp	r0, #0
   15100:	bne	1513c <__assert_fail@plt+0x41d4>
   15104:	mov	r0, r4
   15108:	bl	1517c <__assert_fail@plt+0x4214>
   1510c:	cmp	r0, #0
   15110:	beq	1516c <__assert_fail@plt+0x4204>
   15114:	bl	10e9c <__errno_location@plt>
   15118:	mov	r5, r0
   1511c:	mov	r0, r4
   15120:	ldr	r4, [r5]
   15124:	bl	10ee4 <fclose@plt>
   15128:	cmp	r4, #0
   1512c:	mvnne	r0, #0
   15130:	strne	r4, [r5]
   15134:	add	sp, sp, #12
   15138:	pop	{r4, r5, pc}
   1513c:	mov	r0, r4
   15140:	bl	10ecc <fileno@plt>
   15144:	mov	r3, #1
   15148:	str	r3, [sp]
   1514c:	mov	r2, #0
   15150:	mov	r3, #0
   15154:	bl	10de8 <lseek64@plt>
   15158:	mvn	r3, #0
   1515c:	mvn	r2, #0
   15160:	cmp	r1, r3
   15164:	cmpeq	r0, r2
   15168:	bne	15104 <__assert_fail@plt+0x419c>
   1516c:	mov	r0, r4
   15170:	add	sp, sp, #12
   15174:	pop	{r4, r5, lr}
   15178:	b	10ee4 <fclose@plt>
   1517c:	push	{r4, lr}
   15180:	subs	r4, r0, #0
   15184:	sub	sp, sp, #8
   15188:	beq	151a4 <__assert_fail@plt+0x423c>
   1518c:	bl	10e48 <__freading@plt>
   15190:	cmp	r0, #0
   15194:	beq	151a4 <__assert_fail@plt+0x423c>
   15198:	ldr	r3, [r4]
   1519c:	tst	r3, #256	; 0x100
   151a0:	bne	151b4 <__assert_fail@plt+0x424c>
   151a4:	mov	r0, r4
   151a8:	add	sp, sp, #8
   151ac:	pop	{r4, lr}
   151b0:	b	10d34 <fflush@plt>
   151b4:	mov	r3, #1
   151b8:	str	r3, [sp]
   151bc:	mov	r2, #0
   151c0:	mov	r3, #0
   151c4:	mov	r0, r4
   151c8:	bl	151dc <__assert_fail@plt+0x4274>
   151cc:	mov	r0, r4
   151d0:	add	sp, sp, #8
   151d4:	pop	{r4, lr}
   151d8:	b	10d34 <fflush@plt>
   151dc:	push	{r4, r5, r6, r7, r8, lr}
   151e0:	sub	sp, sp, #8
   151e4:	ldmib	r0, {ip, lr}
   151e8:	mov	r4, r0
   151ec:	ldr	r5, [sp, #32]
   151f0:	cmp	lr, ip
   151f4:	beq	1520c <__assert_fail@plt+0x42a4>
   151f8:	str	r5, [sp, #32]
   151fc:	mov	r0, r4
   15200:	add	sp, sp, #8
   15204:	pop	{r4, r5, r6, r7, r8, lr}
   15208:	b	10ef0 <fseeko64@plt>
   1520c:	ldr	lr, [r0, #20]
   15210:	ldr	ip, [r0, #16]
   15214:	cmp	lr, ip
   15218:	bne	151f8 <__assert_fail@plt+0x4290>
   1521c:	ldr	r8, [r0, #36]	; 0x24
   15220:	cmp	r8, #0
   15224:	bne	151f8 <__assert_fail@plt+0x4290>
   15228:	mov	r6, r2
   1522c:	mov	r7, r3
   15230:	bl	10ecc <fileno@plt>
   15234:	mov	r2, r6
   15238:	mov	r3, r7
   1523c:	str	r5, [sp]
   15240:	bl	10de8 <lseek64@plt>
   15244:	mvn	r3, #0
   15248:	mvn	r2, #0
   1524c:	cmp	r1, r3
   15250:	cmpeq	r0, r2
   15254:	beq	15274 <__assert_fail@plt+0x430c>
   15258:	ldr	r3, [r4]
   1525c:	strd	r0, [r4, #80]	; 0x50
   15260:	mov	r0, r8
   15264:	bic	r3, r3, #16
   15268:	str	r3, [r4]
   1526c:	add	sp, sp, #8
   15270:	pop	{r4, r5, r6, r7, r8, pc}
   15274:	mvn	r0, #0
   15278:	b	1526c <__assert_fail@plt+0x4304>
   1527c:	subs	r2, r1, #1
   15280:	bxeq	lr
   15284:	bcc	1545c <__assert_fail@plt+0x44f4>
   15288:	cmp	r0, r1
   1528c:	bls	15440 <__assert_fail@plt+0x44d8>
   15290:	tst	r1, r2
   15294:	beq	1544c <__assert_fail@plt+0x44e4>
   15298:	clz	r3, r0
   1529c:	clz	r2, r1
   152a0:	sub	r3, r2, r3
   152a4:	rsbs	r3, r3, #31
   152a8:	addne	r3, r3, r3, lsl #1
   152ac:	mov	r2, #0
   152b0:	addne	pc, pc, r3, lsl #2
   152b4:	nop			; (mov r0, r0)
   152b8:	cmp	r0, r1, lsl #31
   152bc:	adc	r2, r2, r2
   152c0:	subcs	r0, r0, r1, lsl #31
   152c4:	cmp	r0, r1, lsl #30
   152c8:	adc	r2, r2, r2
   152cc:	subcs	r0, r0, r1, lsl #30
   152d0:	cmp	r0, r1, lsl #29
   152d4:	adc	r2, r2, r2
   152d8:	subcs	r0, r0, r1, lsl #29
   152dc:	cmp	r0, r1, lsl #28
   152e0:	adc	r2, r2, r2
   152e4:	subcs	r0, r0, r1, lsl #28
   152e8:	cmp	r0, r1, lsl #27
   152ec:	adc	r2, r2, r2
   152f0:	subcs	r0, r0, r1, lsl #27
   152f4:	cmp	r0, r1, lsl #26
   152f8:	adc	r2, r2, r2
   152fc:	subcs	r0, r0, r1, lsl #26
   15300:	cmp	r0, r1, lsl #25
   15304:	adc	r2, r2, r2
   15308:	subcs	r0, r0, r1, lsl #25
   1530c:	cmp	r0, r1, lsl #24
   15310:	adc	r2, r2, r2
   15314:	subcs	r0, r0, r1, lsl #24
   15318:	cmp	r0, r1, lsl #23
   1531c:	adc	r2, r2, r2
   15320:	subcs	r0, r0, r1, lsl #23
   15324:	cmp	r0, r1, lsl #22
   15328:	adc	r2, r2, r2
   1532c:	subcs	r0, r0, r1, lsl #22
   15330:	cmp	r0, r1, lsl #21
   15334:	adc	r2, r2, r2
   15338:	subcs	r0, r0, r1, lsl #21
   1533c:	cmp	r0, r1, lsl #20
   15340:	adc	r2, r2, r2
   15344:	subcs	r0, r0, r1, lsl #20
   15348:	cmp	r0, r1, lsl #19
   1534c:	adc	r2, r2, r2
   15350:	subcs	r0, r0, r1, lsl #19
   15354:	cmp	r0, r1, lsl #18
   15358:	adc	r2, r2, r2
   1535c:	subcs	r0, r0, r1, lsl #18
   15360:	cmp	r0, r1, lsl #17
   15364:	adc	r2, r2, r2
   15368:	subcs	r0, r0, r1, lsl #17
   1536c:	cmp	r0, r1, lsl #16
   15370:	adc	r2, r2, r2
   15374:	subcs	r0, r0, r1, lsl #16
   15378:	cmp	r0, r1, lsl #15
   1537c:	adc	r2, r2, r2
   15380:	subcs	r0, r0, r1, lsl #15
   15384:	cmp	r0, r1, lsl #14
   15388:	adc	r2, r2, r2
   1538c:	subcs	r0, r0, r1, lsl #14
   15390:	cmp	r0, r1, lsl #13
   15394:	adc	r2, r2, r2
   15398:	subcs	r0, r0, r1, lsl #13
   1539c:	cmp	r0, r1, lsl #12
   153a0:	adc	r2, r2, r2
   153a4:	subcs	r0, r0, r1, lsl #12
   153a8:	cmp	r0, r1, lsl #11
   153ac:	adc	r2, r2, r2
   153b0:	subcs	r0, r0, r1, lsl #11
   153b4:	cmp	r0, r1, lsl #10
   153b8:	adc	r2, r2, r2
   153bc:	subcs	r0, r0, r1, lsl #10
   153c0:	cmp	r0, r1, lsl #9
   153c4:	adc	r2, r2, r2
   153c8:	subcs	r0, r0, r1, lsl #9
   153cc:	cmp	r0, r1, lsl #8
   153d0:	adc	r2, r2, r2
   153d4:	subcs	r0, r0, r1, lsl #8
   153d8:	cmp	r0, r1, lsl #7
   153dc:	adc	r2, r2, r2
   153e0:	subcs	r0, r0, r1, lsl #7
   153e4:	cmp	r0, r1, lsl #6
   153e8:	adc	r2, r2, r2
   153ec:	subcs	r0, r0, r1, lsl #6
   153f0:	cmp	r0, r1, lsl #5
   153f4:	adc	r2, r2, r2
   153f8:	subcs	r0, r0, r1, lsl #5
   153fc:	cmp	r0, r1, lsl #4
   15400:	adc	r2, r2, r2
   15404:	subcs	r0, r0, r1, lsl #4
   15408:	cmp	r0, r1, lsl #3
   1540c:	adc	r2, r2, r2
   15410:	subcs	r0, r0, r1, lsl #3
   15414:	cmp	r0, r1, lsl #2
   15418:	adc	r2, r2, r2
   1541c:	subcs	r0, r0, r1, lsl #2
   15420:	cmp	r0, r1, lsl #1
   15424:	adc	r2, r2, r2
   15428:	subcs	r0, r0, r1, lsl #1
   1542c:	cmp	r0, r1
   15430:	adc	r2, r2, r2
   15434:	subcs	r0, r0, r1
   15438:	mov	r0, r2
   1543c:	bx	lr
   15440:	moveq	r0, #1
   15444:	movne	r0, #0
   15448:	bx	lr
   1544c:	clz	r2, r1
   15450:	rsb	r2, r2, #31
   15454:	lsr	r0, r0, r2
   15458:	bx	lr
   1545c:	cmp	r0, #0
   15460:	mvnne	r0, #0
   15464:	b	15488 <__assert_fail@plt+0x4520>
   15468:	cmp	r1, #0
   1546c:	beq	1545c <__assert_fail@plt+0x44f4>
   15470:	push	{r0, r1, lr}
   15474:	bl	1527c <__assert_fail@plt+0x4314>
   15478:	pop	{r1, r2, lr}
   1547c:	mul	r3, r2, r0
   15480:	sub	r1, r1, r3
   15484:	bx	lr
   15488:	push	{r1, lr}
   1548c:	mov	r0, #8
   15490:	bl	10d1c <raise@plt>
   15494:	pop	{r1, pc}
   15498:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1549c:	mov	r7, r0
   154a0:	ldr	r6, [pc, #72]	; 154f0 <__assert_fail@plt+0x4588>
   154a4:	ldr	r5, [pc, #72]	; 154f4 <__assert_fail@plt+0x458c>
   154a8:	add	r6, pc, r6
   154ac:	add	r5, pc, r5
   154b0:	sub	r6, r6, r5
   154b4:	mov	r8, r1
   154b8:	mov	r9, r2
   154bc:	bl	10ce4 <calloc@plt-0x20>
   154c0:	asrs	r6, r6, #2
   154c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   154c8:	mov	r4, #0
   154cc:	add	r4, r4, #1
   154d0:	ldr	r3, [r5], #4
   154d4:	mov	r2, r9
   154d8:	mov	r1, r8
   154dc:	mov	r0, r7
   154e0:	blx	r3
   154e4:	cmp	r6, r4
   154e8:	bne	154cc <__assert_fail@plt+0x4564>
   154ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154f0:	andeq	r1, r1, r4, asr sl
   154f4:	andeq	r1, r1, ip, asr #20
   154f8:	bx	lr
   154fc:	ldr	r3, [pc, #12]	; 15510 <__assert_fail@plt+0x45a8>
   15500:	mov	r1, #0
   15504:	add	r3, pc, r3
   15508:	ldr	r2, [r3]
   1550c:	b	10ea8 <__cxa_atexit@plt>
   15510:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

00015514 <.fini>:
   15514:	push	{r3, lr}
   15518:	pop	{r3, pc}
