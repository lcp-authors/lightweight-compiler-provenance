
raspbian-preinstalled/pstree:     file format elf32-littlearm


Disassembly of section .init:

00010f7c <_init@@Base>:
   10f7c:	push	{r3, lr}
   10f80:	bl	11cd8 <__assert_fail@plt+0xa84>
   10f84:	pop	{r3, pc}

Disassembly of section .plt:

00010f88 <calloc@plt-0x14>:
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	ldr	lr, [pc, #4]	; 10f98 <_init@@Base+0x1c>
   10f90:	add	lr, pc, lr
   10f94:	ldr	pc, [lr, #8]!
   10f98:	andeq	r4, r1, r8, rrx

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #104]!	; 0x68

00010fa8 <raise@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #96]!	; 0x60

00010fb4 <getpwnam@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #88]!	; 0x58

00010fc0 <tputs@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #80]!	; 0x50

00010fcc <is_selinux_enabled@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #72]!	; 0x48

00010fd8 <strcmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #64]!	; 0x40

00010fe4 <strtol@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #56]!	; 0x38

00010ff0 <getpwuid@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #48]!	; 0x30

00010ffc <read@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #40]!	; 0x28

00011008 <free@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #32]!

00011014 <fgets@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #24]!

00011020 <ferror@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #16]!

0001102c <memcpy@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #8]!

00011038 <_IO_getc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #0]!

00011044 <dcgettext@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #77824	; 0x13000
   1104c:	ldr	pc, [ip, #4088]!	; 0xff8

00011050 <__stack_chk_fail@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #77824	; 0x13000
   11058:	ldr	pc, [ip, #4080]!	; 0xff0

0001105c <realloc@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #77824	; 0x13000
   11064:	ldr	pc, [ip, #4072]!	; 0xfe8

00011068 <textdomain@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #77824	; 0x13000
   11070:	ldr	pc, [ip, #4064]!	; 0xfe0

00011074 <perror@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #77824	; 0x13000
   1107c:	ldr	pc, [ip, #4056]!	; 0xfd8

00011080 <_IO_putc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #77824	; 0x13000
   11088:	ldr	pc, [ip, #4048]!	; 0xfd0

0001108c <fwrite@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #77824	; 0x13000
   11094:	ldr	pc, [ip, #4040]!	; 0xfc8

00011098 <ioctl@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #77824	; 0x13000
   110a0:	ldr	pc, [ip, #4032]!	; 0xfc0

000110a4 <fread@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #77824	; 0x13000
   110ac:	ldr	pc, [ip, #4024]!	; 0xfb8

000110b0 <opendir@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #77824	; 0x13000
   110b8:	ldr	pc, [ip, #4016]!	; 0xfb0

000110bc <open64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #77824	; 0x13000
   110c4:	ldr	pc, [ip, #4008]!	; 0xfa8

000110c8 <getenv@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #77824	; 0x13000
   110d0:	ldr	pc, [ip, #4000]!	; 0xfa0

000110d4 <malloc@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #3992]!	; 0xf98

000110e0 <__libc_start_main@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #3984]!	; 0xf90

000110ec <__gmon_start__@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #77824	; 0x13000
   110f4:	ldr	pc, [ip, #3976]!	; 0xf88

000110f8 <getopt_long@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #77824	; 0x13000
   11100:	ldr	pc, [ip, #3968]!	; 0xf80

00011104 <__ctype_b_loc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #77824	; 0x13000
   1110c:	ldr	pc, [ip, #3960]!	; 0xf78

00011110 <getpid@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #77824	; 0x13000
   11118:	ldr	pc, [ip, #3952]!	; 0xf70

0001111c <exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #77824	; 0x13000
   11124:	ldr	pc, [ip, #3944]!	; 0xf68

00011128 <strlen@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #77824	; 0x13000
   11130:	ldr	pc, [ip, #3936]!	; 0xf60

00011134 <strchr@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #77824	; 0x13000
   1113c:	ldr	pc, [ip, #3928]!	; 0xf58

00011140 <__sprintf_chk@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #77824	; 0x13000
   11148:	ldr	pc, [ip, #3920]!	; 0xf50

0001114c <putchar@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #77824	; 0x13000
   11154:	ldr	pc, [ip, #3912]!	; 0xf48

00011158 <strncpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #77824	; 0x13000
   11160:	ldr	pc, [ip, #3904]!	; 0xf40

00011164 <tgetstr@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #77824	; 0x13000
   1116c:	ldr	pc, [ip, #3896]!	; 0xf38

00011170 <__fprintf_chk@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #77824	; 0x13000
   11178:	ldr	pc, [ip, #3888]!	; 0xf30

0001117c <setupterm@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #77824	; 0x13000
   11184:	ldr	pc, [ip, #3880]!	; 0xf28

00011188 <fclose@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #77824	; 0x13000
   11190:	ldr	pc, [ip, #3872]!	; 0xf20

00011194 <setlocale@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #77824	; 0x13000
   1119c:	ldr	pc, [ip, #3864]!	; 0xf18

000111a0 <strrchr@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #77824	; 0x13000
   111a8:	ldr	pc, [ip, #3856]!	; 0xf10

000111ac <tigetstr@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #77824	; 0x13000
   111b4:	ldr	pc, [ip, #3848]!	; 0xf08

000111b8 <nl_langinfo@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #77824	; 0x13000
   111c0:	ldr	pc, [ip, #3840]!	; 0xf00

000111c4 <sscanf@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #77824	; 0x13000
   111cc:	ldr	pc, [ip, #3832]!	; 0xef8

000111d0 <readdir64@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #77824	; 0x13000
   111d8:	ldr	pc, [ip, #3824]!	; 0xef0

000111dc <fopen64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #77824	; 0x13000
   111e4:	ldr	pc, [ip, #3816]!	; 0xee8

000111e8 <bindtextdomain@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #77824	; 0x13000
   111f0:	ldr	pc, [ip, #3808]!	; 0xee0

000111f4 <__xstat64@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #77824	; 0x13000
   111fc:	ldr	pc, [ip, #3800]!	; 0xed8

00011200 <isatty@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #77824	; 0x13000
   11208:	ldr	pc, [ip, #3792]!	; 0xed0

0001120c <tgetent@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #77824	; 0x13000
   11214:	ldr	pc, [ip, #3784]!	; 0xec8

00011218 <getpidcon@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #77824	; 0x13000
   11220:	ldr	pc, [ip, #3776]!	; 0xec0

00011224 <abort@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #77824	; 0x13000
   1122c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011230 <close@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #77824	; 0x13000
   11238:	ldr	pc, [ip, #3760]!	; 0xeb0

0001123c <closedir@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #77824	; 0x13000
   11244:	ldr	pc, [ip, #3752]!	; 0xea8

00011248 <__snprintf_chk@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #77824	; 0x13000
   11250:	ldr	pc, [ip, #3744]!	; 0xea0

00011254 <__assert_fail@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #77824	; 0x13000
   1125c:	ldr	pc, [ip, #3736]!	; 0xe98

Disassembly of section .text:

00011260 <.text>:
   11260:	ldr	r3, [pc, #2476]	; 11c14 <__assert_fail@plt+0x9c0>
   11264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11268:	sub	sp, sp, #1536	; 0x600
   1126c:	sub	sp, sp, #4
   11270:	ldr	r3, [r3]
   11274:	mov	r2, #320	; 0x140
   11278:	mov	r4, r0
   1127c:	mov	r5, r1
   11280:	add	r0, sp, #136	; 0x88
   11284:	ldr	r1, [pc, #2444]	; 11c18 <__assert_fail@plt+0x9c4>
   11288:	mov	r6, #0
   1128c:	str	r3, [sp, #1532]	; 0x5fc
   11290:	str	r6, [sp, #24]
   11294:	bl	1102c <memcpy@plt>
   11298:	ldr	r0, [pc, #2428]	; 11c1c <__assert_fail@plt+0x9c8>
   1129c:	bl	110c8 <getenv@plt>
   112a0:	subs	r3, r0, #0
   112a4:	beq	112b4 <__assert_fail@plt+0x60>
   112a8:	ldrb	r3, [r3]
   112ac:	cmp	r3, #0
   112b0:	bne	1170c <__assert_fail@plt+0x4b8>
   112b4:	add	r3, sp, #32
   112b8:	str	r3, [sp, #20]
   112bc:	ldr	r2, [sp, #20]
   112c0:	ldr	r1, [pc, #2392]	; 11c20 <__assert_fail@plt+0x9cc>
   112c4:	mov	r0, #1
   112c8:	bl	11098 <ioctl@plt>
   112cc:	cmp	r0, #0
   112d0:	movlt	r3, #132	; 0x84
   112d4:	blt	112e8 <__assert_fail@plt+0x94>
   112d8:	ldr	r3, [sp, #20]
   112dc:	ldrh	r3, [r3, #2]
   112e0:	cmp	r3, #0
   112e4:	moveq	r3, #132	; 0x84
   112e8:	ldr	r8, [pc, #2356]	; 11c24 <__assert_fail@plt+0x9d0>
   112ec:	ldr	r1, [pc, #2356]	; 11c28 <__assert_fail@plt+0x9d4>
   112f0:	mov	r0, #6
   112f4:	str	r3, [r8, #8]
   112f8:	bl	11194 <setlocale@plt>
   112fc:	ldr	r1, [pc, #2344]	; 11c2c <__assert_fail@plt+0x9d8>
   11300:	ldr	r0, [pc, #2344]	; 11c30 <__assert_fail@plt+0x9dc>
   11304:	bl	111e8 <bindtextdomain@plt>
   11308:	ldr	r0, [pc, #2336]	; 11c30 <__assert_fail@plt+0x9dc>
   1130c:	bl	11068 <textdomain@plt>
   11310:	ldr	r3, [pc, #2332]	; 11c34 <__assert_fail@plt+0x9e0>
   11314:	ldr	r1, [pc, #2332]	; 11c38 <__assert_fail@plt+0x9e4>
   11318:	ldr	r0, [r3]
   1131c:	bl	10fd8 <strcmp@plt>
   11320:	cmp	r0, #0
   11324:	moveq	r2, #1
   11328:	ldreq	r3, [pc, #2316]	; 11c3c <__assert_fail@plt+0x9e8>
   1132c:	mov	r0, #1
   11330:	streq	r2, [r3, #64]	; 0x40
   11334:	bl	11200 <isatty@plt>
   11338:	cmp	r0, #0
   1133c:	beq	11358 <__assert_fail@plt+0x104>
   11340:	mov	r0, #14
   11344:	bl	111b8 <nl_langinfo@plt>
   11348:	ldr	r1, [pc, #2288]	; 11c40 <__assert_fail@plt+0x9ec>
   1134c:	bl	10fd8 <strcmp@plt>
   11350:	cmp	r0, #0
   11354:	beq	11700 <__assert_fail@plt+0x4ac>
   11358:	mov	r0, #1
   1135c:	bl	11200 <isatty@plt>
   11360:	cmp	r0, #0
   11364:	bne	11840 <__assert_fail@plt+0x5ec>
   11368:	ldr	r3, [pc, #2260]	; 11c44 <__assert_fail@plt+0x9f0>
   1136c:	str	r3, [r8, #12]
   11370:	ldr	r6, [pc, #2256]	; 11c48 <__assert_fail@plt+0x9f4>
   11374:	mov	r7, #7
   11378:	mov	fp, #0
   1137c:	mov	r9, #0
   11380:	str	r9, [sp]
   11384:	add	r3, sp, #136	; 0x88
   11388:	mov	r2, r6
   1138c:	mov	r1, r5
   11390:	mov	r0, r4
   11394:	bl	110f8 <getopt_long@plt>
   11398:	cmn	r0, #1
   1139c:	beq	11744 <__assert_fail@plt+0x4f0>
   113a0:	sub	r0, r0, #65	; 0x41
   113a4:	cmp	r0, #52	; 0x34
   113a8:	ldrls	pc, [pc, r0, lsl #2]
   113ac:	b	11604 <__assert_fail@plt+0x3b0>
   113b0:	andeq	r1, r1, r8, ror #12
   113b4:	andeq	r1, r1, r4, lsl #12
   113b8:	andeq	r1, r1, r4, lsl #12
   113bc:	andeq	r1, r1, r4, lsl #12
   113c0:	andeq	r1, r1, r4, lsl #12
   113c4:	andeq	r1, r1, r4, lsl #12
   113c8:	andeq	r1, r1, ip, asr r6
   113cc:	andeq	r1, r1, r8, lsl #12
   113d0:	andeq	r1, r1, r4, lsl #12
   113d4:	andeq	r1, r1, r4, lsl #12
   113d8:	andeq	r1, r1, r4, lsl #12
   113dc:	andeq	r1, r1, r4, lsl #12
   113e0:	andeq	r1, r1, r4, lsl #12
   113e4:	andeq	r1, r1, ip, asr #11
   113e8:	andeq	r1, r1, r4, lsl #12
   113ec:	andeq	r1, r1, r4, lsl #12
   113f0:	andeq	r1, r1, r4, lsl #12
   113f4:	andeq	r1, r1, r4, lsl #12
   113f8:			; <UNDEFINED> instruction: 0x000115bc
   113fc:	andeq	r1, r1, ip, lsr #11
   11400:	andeq	r1, r1, r0, lsr #11
   11404:	andeq	r1, r1, r8, ror r5
   11408:	andeq	r1, r1, r4, lsl #12
   1140c:	andeq	r1, r1, r4, lsl #12
   11410:	andeq	r1, r1, r4, lsl #12
   11414:	andeq	r1, r1, ip, asr r5
   11418:	andeq	r1, r1, r4, lsl #12
   1141c:	andeq	r1, r1, r4, lsl #12
   11420:	andeq	r1, r1, r4, lsl #12
   11424:	andeq	r1, r1, r4, lsl #12
   11428:	andeq	r1, r1, r4, lsl #12
   1142c:	andeq	r1, r1, r4, lsl #12
   11430:	andeq	r1, r1, ip, asr #10
   11434:	andeq	r1, r1, r4, lsl #12
   11438:	andeq	r1, r1, r0, asr #10
   1143c:	andeq	r1, r1, r4, lsl #12
   11440:	andeq	r1, r1, r4, lsl #12
   11444:	andeq	r1, r1, r4, lsl #12
   11448:	andeq	r1, r1, r8, lsr #10
   1144c:	andeq	r1, r1, r8, ror #9
   11450:	andeq	r1, r1, r4, lsl #12
   11454:	andeq	r1, r1, r4, lsl #12
   11458:	andeq	r1, r1, r4, lsl #12
   1145c:	ldrdeq	r1, [r1], -ip
   11460:	andeq	r1, r1, r4, lsl #12
   11464:	andeq	r1, r1, ip, asr #9
   11468:	andeq	r1, r1, r4, lsl #12
   1146c:			; <UNDEFINED> instruction: 0x000114b4
   11470:	andeq	r1, r1, r4, lsl #12
   11474:	andeq	r1, r1, r4, lsl #12
   11478:	andeq	r1, r1, r4, lsr #9
   1147c:	muleq	r1, r4, r4
   11480:	andeq	r1, r1, r4, lsl #9
   11484:	ldr	r3, [pc, #1968]	; 11c3c <__assert_fail@plt+0x9e8>
   11488:	mov	r2, #1
   1148c:	str	r2, [r3, #12]
   11490:	b	1137c <__assert_fail@plt+0x128>
   11494:	ldr	r3, [pc, #1952]	; 11c3c <__assert_fail@plt+0x9e8>
   11498:	mov	r2, #1
   1149c:	str	r2, [r3, #60]	; 0x3c
   114a0:	b	1137c <__assert_fail@plt+0x128>
   114a4:	ldr	r3, [pc, #1936]	; 11c3c <__assert_fail@plt+0x9e8>
   114a8:	mov	r2, #1
   114ac:	str	r2, [r3, #68]	; 0x44
   114b0:	b	1137c <__assert_fail@plt+0x128>
   114b4:	ldr	r2, [pc, #1920]	; 11c3c <__assert_fail@plt+0x9e8>
   114b8:	mov	r1, #1
   114bc:	mov	r3, #0
   114c0:	str	r1, [r2, #40]	; 0x28
   114c4:	str	r3, [r8, #16]
   114c8:	b	1137c <__assert_fail@plt+0x128>
   114cc:	ldr	r3, [pc, #1896]	; 11c3c <__assert_fail@plt+0x9e8>
   114d0:	mov	r2, #1
   114d4:	str	r2, [r3, #52]	; 0x34
   114d8:	b	1137c <__assert_fail@plt+0x128>
   114dc:	mov	r3, #0
   114e0:	str	r3, [r8, #4]
   114e4:	b	1137c <__assert_fail@plt+0x128>
   114e8:	cmp	fp, #0
   114ec:	bne	11604 <__assert_fail@plt+0x3b0>
   114f0:	ldr	r0, [pc, #1876]	; 11c4c <__assert_fail@plt+0x9f8>
   114f4:	bl	110c8 <getenv@plt>
   114f8:	cmp	r0, #0
   114fc:	beq	1137c <__assert_fail@plt+0x128>
   11500:	ldr	r0, [pc, #1860]	; 11c4c <__assert_fail@plt+0x9f8>
   11504:	bl	110c8 <getenv@plt>
   11508:	mov	r1, r0
   1150c:	add	r0, sp, #508	; 0x1fc
   11510:	bl	1120c <tgetent@plt>
   11514:	cmp	r0, #0
   11518:	ble	1137c <__assert_fail@plt+0x128>
   1151c:	bl	11110 <getpid@plt>
   11520:	mov	fp, r0
   11524:	b	1137c <__assert_fail@plt+0x128>
   11528:	ldr	r2, [pc, #1804]	; 11c3c <__assert_fail@plt+0x9e8>
   1152c:	mov	r1, #1
   11530:	mov	r3, #0
   11534:	str	r1, [r2, #44]	; 0x2c
   11538:	str	r3, [r8, #16]
   1153c:	b	1137c <__assert_fail@plt+0x128>
   11540:	mov	r3, #0
   11544:	str	r3, [r8, #16]
   11548:	b	1137c <__assert_fail@plt+0x128>
   1154c:	ldr	r3, [pc, #1768]	; 11c3c <__assert_fail@plt+0x9e8>
   11550:	mov	r2, #1
   11554:	str	r2, [r3, #28]
   11558:	b	1137c <__assert_fail@plt+0x128>
   1155c:	bl	10fcc <is_selinux_enabled@plt>
   11560:	cmp	r0, #0
   11564:	ble	11b3c <__assert_fail@plt+0x8e8>
   11568:	ldr	r3, [pc, #1740]	; 11c3c <__assert_fail@plt+0x9e8>
   1156c:	mov	r2, #1
   11570:	str	r2, [r3, #32]
   11574:	b	1137c <__assert_fail@plt+0x128>
   11578:	bl	13a44 <__assert_fail@plt+0x27f0>
   1157c:	mov	r0, #0
   11580:	ldr	r3, [pc, #1676]	; 11c14 <__assert_fail@plt+0x9c0>
   11584:	ldr	r2, [sp, #1532]	; 0x5fc
   11588:	ldr	r3, [r3]
   1158c:	cmp	r2, r3
   11590:	bne	11c10 <__assert_fail@plt+0x9bc>
   11594:	add	sp, sp, #1536	; 0x600
   11598:	add	sp, sp, #4
   1159c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a0:	ldr	r3, [pc, #1704]	; 11c50 <__assert_fail@plt+0x9fc>
   115a4:	str	r3, [r8, #12]
   115a8:	b	1137c <__assert_fail@plt+0x128>
   115ac:	ldr	r3, [pc, #1672]	; 11c3c <__assert_fail@plt+0x9e8>
   115b0:	mov	r2, #1
   115b4:	str	r2, [r3, #56]	; 0x38
   115b8:	b	1137c <__assert_fail@plt+0x128>
   115bc:	ldr	r3, [pc, #1656]	; 11c3c <__assert_fail@plt+0x9e8>
   115c0:	mov	r2, #1
   115c4:	str	r2, [r3, #16]
   115c8:	b	1137c <__assert_fail@plt+0x128>
   115cc:	ldr	r3, [pc, #1664]	; 11c54 <__assert_fail@plt+0xa00>
   115d0:	ldr	r9, [pc, #1664]	; 11c58 <__assert_fail@plt+0xa04>
   115d4:	ldr	r0, [pc, #1664]	; 11c5c <__assert_fail@plt+0xa08>
   115d8:	ldr	sl, [r3]
   115dc:	mov	r7, #0
   115e0:	b	115e8 <__assert_fail@plt+0x394>
   115e4:	ldr	r0, [r9], #4
   115e8:	mov	r1, sl
   115ec:	bl	10fd8 <strcmp@plt>
   115f0:	cmp	r0, #0
   115f4:	beq	11674 <__assert_fail@plt+0x420>
   115f8:	add	r7, r7, #1
   115fc:	cmp	r7, #7
   11600:	bne	115e4 <__assert_fail@plt+0x390>
   11604:	bl	11d8c <__assert_fail@plt+0xb38>
   11608:	cmp	fp, #0
   1160c:	bne	11604 <__assert_fail@plt+0x3b0>
   11610:	ldr	r0, [pc, #1588]	; 11c4c <__assert_fail@plt+0x9f8>
   11614:	bl	110c8 <getenv@plt>
   11618:	cmp	r0, #0
   1161c:	beq	11bfc <__assert_fail@plt+0x9a8>
   11620:	ldr	r0, [pc, #1572]	; 11c4c <__assert_fail@plt+0x9f8>
   11624:	bl	110c8 <getenv@plt>
   11628:	mov	r1, r0
   1162c:	add	r0, sp, #508	; 0x1fc
   11630:	bl	1120c <tgetent@plt>
   11634:	cmp	r0, #0
   11638:	ble	11be4 <__assert_fail@plt+0x990>
   1163c:	ldr	r3, [pc, #1552]	; 11c54 <__assert_fail@plt+0xa00>
   11640:	mov	r1, fp
   11644:	mov	r2, #10
   11648:	ldr	r0, [r3]
   1164c:	bl	10fe4 <strtol@plt>
   11650:	subs	fp, r0, #0
   11654:	bne	1137c <__assert_fail@plt+0x128>
   11658:	b	11604 <__assert_fail@plt+0x3b0>
   1165c:	ldr	r3, [pc, #1532]	; 11c60 <__assert_fail@plt+0xa0c>
   11660:	str	r3, [r8, #12]
   11664:	b	1137c <__assert_fail@plt+0x128>
   11668:	ldr	r3, [pc, #1492]	; 11c44 <__assert_fail@plt+0x9f0>
   1166c:	str	r3, [r8, #12]
   11670:	b	1137c <__assert_fail@plt+0x128>
   11674:	mov	sl, r0
   11678:	bl	11110 <getpid@plt>
   1167c:	ldr	r3, [pc, #1504]	; 11c64 <__assert_fail@plt+0xa10>
   11680:	ldr	r1, [pc, #1504]	; 11c68 <__assert_fail@plt+0xa14>
   11684:	add	r3, r3, r7, lsl #2
   11688:	add	r9, sp, #456	; 0x1c8
   1168c:	ldr	r2, [r3, #12]
   11690:	mov	r3, #50	; 0x32
   11694:	str	r1, [sp]
   11698:	str	r2, [sp, #8]
   1169c:	mov	r1, r3
   116a0:	mov	r2, #1
   116a4:	str	r0, [sp, #4]
   116a8:	mov	r0, r9
   116ac:	bl	11248 <__snprintf_chk@plt>
   116b0:	ldr	r2, [sp, #20]
   116b4:	mov	r1, r9
   116b8:	mov	r0, #3
   116bc:	bl	111f4 <__xstat64@plt>
   116c0:	cmp	r0, #0
   116c4:	beq	1137c <__assert_fail@plt+0x128>
   116c8:	ldr	r3, [pc, #1436]	; 11c6c <__assert_fail@plt+0xa18>
   116cc:	mov	r2, #5
   116d0:	ldr	r1, [pc, #1432]	; 11c70 <__assert_fail@plt+0xa1c>
   116d4:	mov	r0, sl
   116d8:	ldr	r4, [r3]
   116dc:	bl	11044 <dcgettext@plt>
   116e0:	ldr	r3, [pc, #1388]	; 11c54 <__assert_fail@plt+0xa00>
   116e4:	mov	r1, #1
   116e8:	ldr	r3, [r3]
   116ec:	mov	r2, r0
   116f0:	mov	r0, r4
   116f4:	bl	11170 <__fprintf_chk@plt>
   116f8:	mov	r0, #1
   116fc:	b	11580 <__assert_fail@plt+0x32c>
   11700:	ldr	r3, [pc, #1352]	; 11c50 <__assert_fail@plt+0x9fc>
   11704:	str	r3, [r8, #12]
   11708:	b	11370 <__assert_fail@plt+0x11c>
   1170c:	add	r3, sp, #32
   11710:	mov	r2, r6
   11714:	add	r1, sp, #28
   11718:	str	r3, [sp, #20]
   1171c:	bl	10fe4 <strtol@plt>
   11720:	ldr	r2, [sp, #28]
   11724:	ldrb	r2, [r2]
   11728:	cmp	r2, #0
   1172c:	mov	r3, r0
   11730:	bne	112bc <__assert_fail@plt+0x68>
   11734:	sub	r2, r0, #1
   11738:	cmn	r2, #-2147483645	; 0x80000003
   1173c:	bhi	112bc <__assert_fail@plt+0x68>
   11740:	b	112e8 <__assert_fail@plt+0x94>
   11744:	ldr	r6, [pc, #1320]	; 11c74 <__assert_fail@plt+0xa20>
   11748:	sub	r8, r4, #1
   1174c:	ldr	r3, [r6]
   11750:	cmp	r8, r3
   11754:	beq	11ad0 <__assert_fail@plt+0x87c>
   11758:	mov	r5, #1
   1175c:	ldr	r3, [r6]
   11760:	cmp	r3, r4
   11764:	bne	11604 <__assert_fail@plt+0x3b0>
   11768:	ldr	r8, [pc, #1228]	; 11c3c <__assert_fail@plt+0x9e8>
   1176c:	bl	132a0 <__assert_fail@plt+0x204c>
   11770:	ldr	r6, [r8]
   11774:	cmp	r6, #0
   11778:	beq	11bd4 <__assert_fail@plt+0x980>
   1177c:	ldr	r1, [r6, #76]	; 0x4c
   11780:	mov	r3, r6
   11784:	cmp	fp, r1
   11788:	bne	1179c <__assert_fail@plt+0x548>
   1178c:	b	11824 <__assert_fail@plt+0x5d0>
   11790:	ldr	r2, [r3, #76]	; 0x4c
   11794:	cmp	fp, r2
   11798:	beq	11824 <__assert_fail@plt+0x5d0>
   1179c:	ldr	r3, [r3, #164]	; 0xa4
   117a0:	cmp	r3, #0
   117a4:	bne	11790 <__assert_fail@plt+0x53c>
   117a8:	ldr	r3, [r8, #68]	; 0x44
   117ac:	cmp	r3, #0
   117b0:	bne	11aa0 <__assert_fail@plt+0x84c>
   117b4:	cmp	r7, #7
   117b8:	bne	118cc <__assert_fail@plt+0x678>
   117bc:	cmp	r9, #0
   117c0:	bne	117d8 <__assert_fail@plt+0x584>
   117c4:	b	118a0 <__assert_fail@plt+0x64c>
   117c8:	ldr	r3, [r6, #76]	; 0x4c
   117cc:	cmp	r3, #1
   117d0:	beq	117e0 <__assert_fail@plt+0x58c>
   117d4:	ldr	r6, [r6, #164]	; 0xa4
   117d8:	cmp	r6, #0
   117dc:	bne	117c8 <__assert_fail@plt+0x574>
   117e0:	mov	r0, r6
   117e4:	ldr	r1, [r9, #8]
   117e8:	bl	12d98 <__assert_fail@plt+0x1b44>
   117ec:	ldr	r0, [r8, #48]	; 0x30
   117f0:	cmp	r0, #0
   117f4:	bne	11980 <__assert_fail@plt+0x72c>
   117f8:	ldr	r3, [pc, #1132]	; 11c6c <__assert_fail@plt+0xa18>
   117fc:	ldr	r1, [pc, #1140]	; 11c78 <__assert_fail@plt+0xa24>
   11800:	mov	r2, #5
   11804:	ldr	r4, [r3]
   11808:	bl	11044 <dcgettext@plt>
   1180c:	mov	r1, #1
   11810:	mov	r2, r0
   11814:	mov	r0, r4
   11818:	bl	11170 <__fprintf_chk@plt>
   1181c:	mov	r0, #1
   11820:	b	11580 <__assert_fail@plt+0x32c>
   11824:	ldrb	r2, [r3, #152]	; 0x98
   11828:	orr	r2, r2, #1
   1182c:	strb	r2, [r3, #152]	; 0x98
   11830:	ldr	r3, [r3, #160]	; 0xa0
   11834:	cmp	r3, #0
   11838:	bne	11824 <__assert_fail@plt+0x5d0>
   1183c:	b	117a8 <__assert_fail@plt+0x554>
   11840:	ldr	r0, [pc, #1028]	; 11c4c <__assert_fail@plt+0x9f8>
   11844:	bl	110c8 <getenv@plt>
   11848:	cmp	r0, #0
   1184c:	beq	11368 <__assert_fail@plt+0x114>
   11850:	ldrb	r3, [r0]
   11854:	cmp	r3, #0
   11858:	beq	11368 <__assert_fail@plt+0x114>
   1185c:	mov	r2, #0
   11860:	mov	r0, r2
   11864:	mov	r1, #1
   11868:	bl	1117c <setupterm@plt>
   1186c:	cmp	r0, #0
   11870:	bne	11368 <__assert_fail@plt+0x114>
   11874:	ldr	r0, [pc, #1024]	; 11c7c <__assert_fail@plt+0xa28>
   11878:	bl	111ac <tigetstr@plt>
   1187c:	cmp	r0, #0
   11880:	beq	11368 <__assert_fail@plt+0x114>
   11884:	ldr	r0, [pc, #1008]	; 11c7c <__assert_fail@plt+0xa28>
   11888:	bl	111ac <tigetstr@plt>
   1188c:	b	11368 <__assert_fail@plt+0x114>
   11890:	ldr	r3, [r6, #76]	; 0x4c
   11894:	cmp	r5, r3
   11898:	beq	118a8 <__assert_fail@plt+0x654>
   1189c:	ldr	r6, [r6, #164]	; 0xa4
   118a0:	cmp	r6, #0
   118a4:	bne	11890 <__assert_fail@plt+0x63c>
   118a8:	mov	r1, #0
   118ac:	mov	r3, #1
   118b0:	mov	r0, r6
   118b4:	str	r1, [sp, #8]
   118b8:	str	r1, [sp, #4]
   118bc:	str	r3, [sp]
   118c0:	mov	r2, r3
   118c4:	bl	12394 <__assert_fail@plt+0x1140>
   118c8:	b	11980 <__assert_fail@plt+0x72c>
   118cc:	ldr	r3, [sp, #20]
   118d0:	mov	r1, r7
   118d4:	sub	r2, r3, #8
   118d8:	mov	r0, #0
   118dc:	bl	11e18 <__assert_fail@plt+0xbc4>
   118e0:	ldr	r7, [sp, #24]
   118e4:	cmp	r7, #0
   118e8:	beq	11980 <__assert_fail@plt+0x72c>
   118ec:	ldr	sl, [pc, #908]	; 11c80 <__assert_fail@plt+0xa2c>
   118f0:	add	r9, sp, #456	; 0x1c8
   118f4:	mov	r6, #1
   118f8:	mov	r5, #0
   118fc:	ldr	r2, [r7]
   11900:	mov	r3, #14
   11904:	str	r2, [sp, #4]
   11908:	str	sl, [sp]
   1190c:	mov	r1, r3
   11910:	mov	r2, #1
   11914:	mov	r0, r9
   11918:	bl	11248 <__snprintf_chk@plt>
   1191c:	ldrb	r0, [sp, #456]	; 0x1c8
   11920:	cmp	r0, #0
   11924:	movne	r4, r9
   11928:	beq	1193c <__assert_fail@plt+0x6e8>
   1192c:	bl	1201c <__assert_fail@plt+0xdc8>
   11930:	ldrb	r0, [r4, #1]!
   11934:	cmp	r0, #0
   11938:	bne	1192c <__assert_fail@plt+0x6d8>
   1193c:	ldr	r4, [r7, #8]
   11940:	cmp	r4, #0
   11944:	beq	11974 <__assert_fail@plt+0x720>
   11948:	mov	r3, #1
   1194c:	ldr	r0, [r4]
   11950:	mov	r2, r3
   11954:	str	r5, [sp, #8]
   11958:	str	r5, [sp, #4]
   1195c:	str	r6, [sp]
   11960:	mov	r1, #0
   11964:	bl	12394 <__assert_fail@plt+0x1140>
   11968:	ldr	r4, [r4, #4]
   1196c:	cmp	r4, #0
   11970:	bne	11948 <__assert_fail@plt+0x6f4>
   11974:	ldr	r7, [r7, #12]
   11978:	cmp	r7, #0
   1197c:	bne	118fc <__assert_fail@plt+0x6a8>
   11980:	ldr	r0, [r8, #20]
   11984:	cmp	r0, #0
   11988:	beq	11998 <__assert_fail@plt+0x744>
   1198c:	bl	11008 <free@plt>
   11990:	mov	r3, #0
   11994:	str	r3, [r8, #20]
   11998:	ldr	r0, [r8, #24]
   1199c:	cmp	r0, #0
   119a0:	beq	119b0 <__assert_fail@plt+0x75c>
   119a4:	bl	11008 <free@plt>
   119a8:	mov	r3, #0
   119ac:	str	r3, [r8, #24]
   119b0:	ldr	r5, [r8]
   119b4:	mov	r3, #0
   119b8:	cmp	r5, r3
   119bc:	str	r3, [r8, #36]	; 0x24
   119c0:	beq	11a10 <__assert_fail@plt+0x7bc>
   119c4:	ldr	r0, [r5, #156]	; 0x9c
   119c8:	ldr	r6, [r5, #164]	; 0xa4
   119cc:	cmp	r0, #0
   119d0:	beq	119e4 <__assert_fail@plt+0x790>
   119d4:	ldr	r4, [r0, #4]
   119d8:	bl	11008 <free@plt>
   119dc:	subs	r0, r4, #0
   119e0:	bne	119d4 <__assert_fail@plt+0x780>
   119e4:	ldr	r3, [r5, #68]	; 0x44
   119e8:	cmp	r3, #0
   119ec:	beq	11a00 <__assert_fail@plt+0x7ac>
   119f0:	ldr	r0, [r3]
   119f4:	bl	11008 <free@plt>
   119f8:	ldr	r0, [r5, #68]	; 0x44
   119fc:	bl	11008 <free@plt>
   11a00:	mov	r0, r5
   11a04:	bl	11008 <free@plt>
   11a08:	subs	r5, r6, #0
   11a0c:	bne	119c4 <__assert_fail@plt+0x770>
   11a10:	ldr	r5, [sp, #24]
   11a14:	mov	r3, #0
   11a18:	cmp	r5, r3
   11a1c:	str	r3, [r8]
   11a20:	beq	11a54 <__assert_fail@plt+0x800>
   11a24:	ldr	r0, [r5, #8]
   11a28:	ldr	r6, [r5, #12]
   11a2c:	cmp	r0, #0
   11a30:	beq	11a44 <__assert_fail@plt+0x7f0>
   11a34:	ldr	r4, [r0, #4]
   11a38:	bl	11008 <free@plt>
   11a3c:	subs	r0, r4, #0
   11a40:	bne	11a34 <__assert_fail@plt+0x7e0>
   11a44:	mov	r0, r5
   11a48:	bl	11008 <free@plt>
   11a4c:	subs	r5, r6, #0
   11a50:	bne	11a24 <__assert_fail@plt+0x7d0>
   11a54:	ldr	r5, [r8, #64]	; 0x40
   11a58:	mov	r4, #0
   11a5c:	cmp	r5, #1
   11a60:	str	r4, [sp, #24]
   11a64:	bne	1157c <__assert_fail@plt+0x328>
   11a68:	ldr	r3, [pc, #508]	; 11c6c <__assert_fail@plt+0xa18>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #524]	; 11c84 <__assert_fail@plt+0xa30>
   11a74:	mov	r0, r4
   11a78:	ldr	r6, [r3]
   11a7c:	bl	11044 <dcgettext@plt>
   11a80:	mov	r1, r5
   11a84:	mov	r2, r0
   11a88:	mov	r0, r6
   11a8c:	bl	11170 <__fprintf_chk@plt>
   11a90:	ldr	r3, [pc, #496]	; 11c88 <__assert_fail@plt+0xa34>
   11a94:	ldr	r0, [r3]
   11a98:	bl	11038 <_IO_getc@plt>
   11a9c:	b	1157c <__assert_fail@plt+0x328>
   11aa0:	cmp	r5, r1
   11aa4:	mov	r4, r6
   11aa8:	bne	11abc <__assert_fail@plt+0x868>
   11aac:	b	11b58 <__assert_fail@plt+0x904>
   11ab0:	ldr	r3, [r4, #76]	; 0x4c
   11ab4:	cmp	r5, r3
   11ab8:	beq	11b58 <__assert_fail@plt+0x904>
   11abc:	ldr	r4, [r4, #164]	; 0xa4
   11ac0:	cmp	r4, #0
   11ac4:	bne	11ab0 <__assert_fail@plt+0x85c>
   11ac8:	mov	r5, #1
   11acc:	b	117b4 <__assert_fail@plt+0x560>
   11ad0:	bl	11104 <__ctype_b_loc@plt>
   11ad4:	ldr	r2, [r5, r8, lsl #2]
   11ad8:	ldrb	r3, [r2]
   11adc:	lsl	r3, r3, #1
   11ae0:	ldr	r1, [r0]
   11ae4:	mov	r0, r2
   11ae8:	ldrh	r3, [r1, r3]
   11aec:	tst	r3, #2048	; 0x800
   11af0:	bne	11bac <__assert_fail@plt+0x958>
   11af4:	str	r4, [r6]
   11af8:	bl	10fb4 <getpwnam@plt>
   11afc:	subs	r9, r0, #0
   11b00:	bne	11758 <__assert_fail@plt+0x504>
   11b04:	ldr	r3, [pc, #352]	; 11c6c <__assert_fail@plt+0xa18>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #376]	; 11c8c <__assert_fail@plt+0xa38>
   11b10:	ldr	r4, [r3]
   11b14:	bl	11044 <dcgettext@plt>
   11b18:	ldr	r3, [r6]
   11b1c:	mov	r1, #1
   11b20:	sub	r3, r3, #-1073741823	; 0xc0000001
   11b24:	ldr	r3, [r5, r3, lsl #2]
   11b28:	mov	r2, r0
   11b2c:	mov	r0, r4
   11b30:	bl	11170 <__fprintf_chk@plt>
   11b34:	mov	r0, #1
   11b38:	b	11580 <__assert_fail@plt+0x32c>
   11b3c:	ldr	r3, [pc, #296]	; 11c6c <__assert_fail@plt+0xa18>
   11b40:	mov	r2, #57	; 0x39
   11b44:	mov	r1, #1
   11b48:	ldr	r3, [r3]
   11b4c:	ldr	r0, [pc, #316]	; 11c90 <__assert_fail@plt+0xa3c>
   11b50:	bl	1108c <fwrite@plt>
   11b54:	b	1137c <__assert_fail@plt+0x128>
   11b58:	ldr	r5, [r4, #160]	; 0xa0
   11b5c:	cmp	r5, #0
   11b60:	beq	11ac8 <__assert_fail@plt+0x874>
   11b64:	mov	sl, #0
   11b68:	ldr	r0, [r5, #156]	; 0x9c
   11b6c:	cmp	r0, #0
   11b70:	beq	11b84 <__assert_fail@plt+0x930>
   11b74:	ldr	fp, [r0, #4]
   11b78:	bl	11008 <free@plt>
   11b7c:	subs	r0, fp, #0
   11b80:	bne	11b74 <__assert_fail@plt+0x920>
   11b84:	mov	r1, r4
   11b88:	str	sl, [r5, #156]	; 0x9c
   11b8c:	mov	r0, r5
   11b90:	bl	12f70 <__assert_fail@plt+0x1d1c>
   11b94:	ldr	r3, [r5, #160]	; 0xa0
   11b98:	mov	r4, r5
   11b9c:	cmp	r3, #0
   11ba0:	beq	11ac8 <__assert_fail@plt+0x874>
   11ba4:	mov	r5, r3
   11ba8:	b	11b68 <__assert_fail@plt+0x914>
   11bac:	mov	r2, #10
   11bb0:	ldr	r1, [sp, #20]
   11bb4:	str	r4, [r6]
   11bb8:	bl	10fe4 <strtol@plt>
   11bbc:	ldr	r3, [sp, #32]
   11bc0:	ldrb	r9, [r3]
   11bc4:	cmp	r9, #0
   11bc8:	mov	r5, r0
   11bcc:	beq	1175c <__assert_fail@plt+0x508>
   11bd0:	b	11604 <__assert_fail@plt+0x3b0>
   11bd4:	ldr	r3, [r8, #68]	; 0x44
   11bd8:	cmp	r3, #0
   11bdc:	bne	11ac8 <__assert_fail@plt+0x874>
   11be0:	b	117b4 <__assert_fail@plt+0x560>
   11be4:	ldr	r3, [pc, #128]	; 11c6c <__assert_fail@plt+0xa18>
   11be8:	mov	r0, fp
   11bec:	mov	r2, #5
   11bf0:	ldr	r4, [r3]
   11bf4:	ldr	r1, [pc, #152]	; 11c94 <__assert_fail@plt+0xa40>
   11bf8:	b	11808 <__assert_fail@plt+0x5b4>
   11bfc:	ldr	r3, [pc, #104]	; 11c6c <__assert_fail@plt+0xa18>
   11c00:	mov	r2, #5
   11c04:	ldr	r1, [pc, #140]	; 11c98 <__assert_fail@plt+0xa44>
   11c08:	ldr	r4, [r3]
   11c0c:	b	11808 <__assert_fail@plt+0x5b4>
   11c10:	bl	11050 <__stack_chk_fail@plt>
   11c14:	strdeq	r4, [r2], -r8
   11c18:			; <UNDEFINED> instruction: 0x00013dbc
   11c1c:			; <UNDEFINED> instruction: 0x000146b8
   11c20:	andeq	r5, r0, r3, lsl r4
   11c24:	andeq	r5, r2, r4, lsl #2
   11c28:	ldrdeq	r4, [r1], -r0
   11c2c:	andeq	r4, r1, r0, asr #13
   11c30:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11c34:	andeq	r5, r2, r0, ror #2
   11c38:	ldrdeq	r4, [r1], -ip
   11c3c:	andeq	r5, r2, r8, lsl #3
   11c40:	andeq	r4, r1, r8, ror #13
   11c44:	andeq	r5, r2, r0, lsr r1
   11c48:	andeq	r4, r1, r0, lsr #15
   11c4c:	strdeq	r4, [r1], -r0
   11c50:	andeq	r5, r2, r8, lsl r1
   11c54:	andeq	r5, r2, r0, lsl #3
   11c58:	andeq	r3, r1, r4, lsr #27
   11c5c:	andeq	r4, r1, r0, asr #9
   11c60:	andeq	r5, r2, r8, asr #2
   11c64:	muleq	r1, r4, sp
   11c68:	andeq	r4, r1, r8, asr #9
   11c6c:	andeq	r5, r2, r0, ror r1
   11c70:	andeq	r4, r1, r8, lsr r7
   11c74:	andeq	r5, r2, r8, ror #2
   11c78:	ldrdeq	r4, [r1], -r8
   11c7c:	strdeq	r4, [r1], -r8
   11c80:	ldrdeq	r4, [r1], -r0
   11c84:	strdeq	r4, [r1], -r0
   11c88:	andeq	r5, r2, r8, ror r1
   11c8c:			; <UNDEFINED> instruction: 0x000147b8
   11c90:	andeq	r4, r1, r4, ror #14
   11c94:	andeq	r4, r1, r4, lsl r7
   11c98:	andeq	r4, r1, r0, lsl #14
   11c9c:	mov	fp, #0
   11ca0:	mov	lr, #0
   11ca4:	pop	{r1}		; (ldr r1, [sp], #4)
   11ca8:	mov	r2, sp
   11cac:	push	{r2}		; (str r2, [sp, #-4]!)
   11cb0:	push	{r0}		; (str r0, [sp, #-4]!)
   11cb4:	ldr	ip, [pc, #16]	; 11ccc <__assert_fail@plt+0xa78>
   11cb8:	push	{ip}		; (str ip, [sp, #-4]!)
   11cbc:	ldr	r0, [pc, #12]	; 11cd0 <__assert_fail@plt+0xa7c>
   11cc0:	ldr	r3, [pc, #12]	; 11cd4 <__assert_fail@plt+0xa80>
   11cc4:	bl	110e0 <__libc_start_main@plt>
   11cc8:	bl	11224 <abort@plt>
   11ccc:	andeq	r3, r1, r4, lsl #27
   11cd0:	andeq	r1, r1, r0, ror #4
   11cd4:	andeq	r3, r1, r4, lsr #26
   11cd8:	ldr	r3, [pc, #20]	; 11cf4 <__assert_fail@plt+0xaa0>
   11cdc:	ldr	r2, [pc, #20]	; 11cf8 <__assert_fail@plt+0xaa4>
   11ce0:	add	r3, pc, r3
   11ce4:	ldr	r2, [r3, r2]
   11ce8:	cmp	r2, #0
   11cec:	bxeq	lr
   11cf0:	b	110ec <__gmon_start__@plt>
   11cf4:	andeq	r3, r1, r8, lsl r3
   11cf8:	strdeq	r0, [r0], -r8
   11cfc:	ldr	r0, [pc, #24]	; 11d1c <__assert_fail@plt+0xac8>
   11d00:	ldr	r3, [pc, #24]	; 11d20 <__assert_fail@plt+0xacc>
   11d04:	cmp	r3, r0
   11d08:	bxeq	lr
   11d0c:	ldr	r3, [pc, #16]	; 11d24 <__assert_fail@plt+0xad0>
   11d10:	cmp	r3, #0
   11d14:	bxeq	lr
   11d18:	bx	r3
   11d1c:	andeq	r5, r2, r0, ror #2
   11d20:	andeq	r5, r2, r0, ror #2
   11d24:	andeq	r0, r0, r0
   11d28:	ldr	r0, [pc, #36]	; 11d54 <__assert_fail@plt+0xb00>
   11d2c:	ldr	r1, [pc, #36]	; 11d58 <__assert_fail@plt+0xb04>
   11d30:	sub	r1, r1, r0
   11d34:	asr	r1, r1, #2
   11d38:	add	r1, r1, r1, lsr #31
   11d3c:	asrs	r1, r1, #1
   11d40:	bxeq	lr
   11d44:	ldr	r3, [pc, #16]	; 11d5c <__assert_fail@plt+0xb08>
   11d48:	cmp	r3, #0
   11d4c:	bxeq	lr
   11d50:	bx	r3
   11d54:	andeq	r5, r2, r0, ror #2
   11d58:	andeq	r5, r2, r0, ror #2
   11d5c:	andeq	r0, r0, r0
   11d60:	push	{r4, lr}
   11d64:	ldr	r4, [pc, #24]	; 11d84 <__assert_fail@plt+0xb30>
   11d68:	ldrb	r3, [r4]
   11d6c:	cmp	r3, #0
   11d70:	popne	{r4, pc}
   11d74:	bl	11cfc <__assert_fail@plt+0xaa8>
   11d78:	mov	r3, #1
   11d7c:	strb	r3, [r4]
   11d80:	pop	{r4, pc}
   11d84:	andeq	r5, r2, r4, lsl #3
   11d88:	b	11d28 <__assert_fail@plt+0xad4>
   11d8c:	push	{r4, lr}
   11d90:	mov	r2, #5
   11d94:	ldr	r4, [pc, #108]	; 11e08 <__assert_fail@plt+0xbb4>
   11d98:	ldr	r1, [pc, #108]	; 11e0c <__assert_fail@plt+0xbb8>
   11d9c:	mov	r0, #0
   11da0:	ldr	r5, [r4]
   11da4:	bl	11044 <dcgettext@plt>
   11da8:	mov	r1, #1
   11dac:	mov	r2, r0
   11db0:	mov	r0, r5
   11db4:	bl	11170 <__fprintf_chk@plt>
   11db8:	mov	r2, #5
   11dbc:	ldr	r1, [pc, #76]	; 11e10 <__assert_fail@plt+0xbbc>
   11dc0:	mov	r0, #0
   11dc4:	ldr	r5, [r4]
   11dc8:	bl	11044 <dcgettext@plt>
   11dcc:	mov	r1, #1
   11dd0:	mov	r2, r0
   11dd4:	mov	r0, r5
   11dd8:	bl	11170 <__fprintf_chk@plt>
   11ddc:	mov	r2, #5
   11de0:	ldr	r1, [pc, #44]	; 11e14 <__assert_fail@plt+0xbc0>
   11de4:	mov	r0, #0
   11de8:	ldr	r4, [r4]
   11dec:	bl	11044 <dcgettext@plt>
   11df0:	mov	r1, #1
   11df4:	mov	r2, r0
   11df8:	mov	r0, r4
   11dfc:	bl	11170 <__fprintf_chk@plt>
   11e00:	mov	r0, #1
   11e04:	bl	1111c <exit@plt>
   11e08:	andeq	r5, r2, r0, ror r1
   11e0c:	strdeq	r3, [r1], -ip
   11e10:			; <UNDEFINED> instruction: 0x000143b8
   11e14:	andeq	r4, r1, r8, lsl #8
   11e18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e1c:	subs	r8, r0, #0
   11e20:	mov	r4, r1
   11e24:	mov	r5, r2
   11e28:	beq	11f74 <__assert_fail@plt+0xd20>
   11e2c:	ldr	r2, [r8, #160]	; 0xa0
   11e30:	cmp	r2, #0
   11e34:	beq	11e54 <__assert_fail@plt+0xc00>
   11e38:	add	r3, r4, #12
   11e3c:	lsl	r3, r3, #3
   11e40:	ldrd	r0, [r2, r3]
   11e44:	ldrd	r2, [r3, r8]
   11e48:	cmp	r1, r3
   11e4c:	cmpeq	r0, r2
   11e50:	beq	11f4c <__assert_fail@plt+0xcf8>
   11e54:	ldr	r9, [r5]
   11e58:	cmp	r9, #0
   11e5c:	beq	11fec <__assert_fail@plt+0xd98>
   11e60:	add	sl, r8, r4, lsl #3
   11e64:	ldrd	r2, [r9]
   11e68:	ldrd	r6, [sl, #96]	; 0x60
   11e6c:	cmp	r3, r7
   11e70:	cmpeq	r2, r6
   11e74:	bne	11e90 <__assert_fail@plt+0xc3c>
   11e78:	b	11fc8 <__assert_fail@plt+0xd74>
   11e7c:	ldrd	r2, [r0]
   11e80:	mov	r9, r0
   11e84:	cmp	r3, r7
   11e88:	cmpeq	r2, r6
   11e8c:	beq	11ebc <__assert_fail@plt+0xc68>
   11e90:	ldr	r0, [r9, #12]
   11e94:	cmp	r0, #0
   11e98:	bne	11e7c <__assert_fail@plt+0xc28>
   11e9c:	mov	r1, #1
   11ea0:	mov	r0, #16
   11ea4:	bl	10f9c <calloc@plt>
   11ea8:	cmp	r0, #0
   11eac:	beq	11fdc <__assert_fail@plt+0xd88>
   11eb0:	ldrd	r2, [sl, #96]	; 0x60
   11eb4:	strd	r2, [r0]
   11eb8:	str	r0, [r9, #12]
   11ebc:	ldr	r2, [r0, #8]
   11ec0:	cmp	r2, #0
   11ec4:	bne	11ed0 <__assert_fail@plt+0xc7c>
   11ec8:	b	11fc0 <__assert_fail@plt+0xd6c>
   11ecc:	mov	r2, r3
   11ed0:	ldr	r3, [r2, #4]
   11ed4:	cmp	r3, #0
   11ed8:	bne	11ecc <__assert_fail@plt+0xc78>
   11edc:	add	r6, r2, #4
   11ee0:	mov	r0, #8
   11ee4:	bl	110d4 <malloc@plt>
   11ee8:	cmp	r0, #0
   11eec:	str	r0, [r6]
   11ef0:	beq	11fdc <__assert_fail@plt+0xd88>
   11ef4:	ldr	r2, [r8, #160]	; 0xa0
   11ef8:	mov	r3, #0
   11efc:	cmp	r2, r3
   11f00:	str	r8, [r0]
   11f04:	str	r3, [r0, #4]
   11f08:	beq	11f4c <__assert_fail@plt+0xcf8>
   11f0c:	ldr	r3, [r2, #156]	; 0x9c
   11f10:	cmp	r3, #0
   11f14:	beq	11f44 <__assert_fail@plt+0xcf0>
   11f18:	ldr	r1, [r3]
   11f1c:	cmp	r8, r1
   11f20:	bne	11f38 <__assert_fail@plt+0xce4>
   11f24:	b	11fd0 <__assert_fail@plt+0xd7c>
   11f28:	ldr	r2, [r0]
   11f2c:	cmp	r8, r2
   11f30:	beq	11fa4 <__assert_fail@plt+0xd50>
   11f34:	mov	r3, r0
   11f38:	ldr	r0, [r3, #4]
   11f3c:	cmp	r0, #0
   11f40:	bne	11f28 <__assert_fail@plt+0xcd4>
   11f44:	mov	r3, #0
   11f48:	str	r3, [r8, #160]	; 0xa0
   11f4c:	ldr	r3, [r8, #156]	; 0x9c
   11f50:	cmp	r3, #0
   11f54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f58:	ldm	r3, {r0, r6}
   11f5c:	mov	r2, r5
   11f60:	mov	r1, r4
   11f64:	bl	11e18 <__assert_fail@plt+0xbc4>
   11f68:	subs	r3, r6, #0
   11f6c:	bne	11f58 <__assert_fail@plt+0xd04>
   11f70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f74:	ldr	r3, [pc, #152]	; 12014 <__assert_fail@plt+0xdc0>
   11f78:	ldr	r8, [r3]
   11f7c:	cmp	r8, #0
   11f80:	bne	11f94 <__assert_fail@plt+0xd40>
   11f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f88:	ldr	r8, [r8, #164]	; 0xa4
   11f8c:	cmp	r8, #0
   11f90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f94:	ldr	r3, [r8, #76]	; 0x4c
   11f98:	cmp	r3, #1
   11f9c:	bne	11f88 <__assert_fail@plt+0xd34>
   11fa0:	b	11e2c <__assert_fail@plt+0xbd8>
   11fa4:	add	r6, r3, #4
   11fa8:	ldr	r7, [r0, #4]
   11fac:	bl	11008 <free@plt>
   11fb0:	mov	r3, #0
   11fb4:	str	r7, [r6]
   11fb8:	str	r3, [r8, #160]	; 0xa0
   11fbc:	b	11f4c <__assert_fail@plt+0xcf8>
   11fc0:	add	r6, r0, #8
   11fc4:	b	11ee0 <__assert_fail@plt+0xc8c>
   11fc8:	mov	r0, r9
   11fcc:	b	11ebc <__assert_fail@plt+0xc68>
   11fd0:	add	r6, r2, #156	; 0x9c
   11fd4:	mov	r0, r3
   11fd8:	b	11fa8 <__assert_fail@plt+0xd54>
   11fdc:	ldr	r0, [pc, #52]	; 12018 <__assert_fail@plt+0xdc4>
   11fe0:	bl	11074 <perror@plt>
   11fe4:	mov	r0, #1
   11fe8:	bl	1111c <exit@plt>
   11fec:	mov	r1, #1
   11ff0:	mov	r0, #16
   11ff4:	bl	10f9c <calloc@plt>
   11ff8:	cmp	r0, #0
   11ffc:	beq	11fdc <__assert_fail@plt+0xd88>
   12000:	add	r3, r8, r4, lsl #3
   12004:	ldrd	r2, [r3, #96]	; 0x60
   12008:	str	r0, [r5]
   1200c:	strd	r2, [r0]
   12010:	b	11ebc <__assert_fail@plt+0xc68>
   12014:	andeq	r5, r2, r8, lsl #3
   12018:	andeq	r4, r1, r4, ror r4
   1201c:	ldr	r1, [pc, #164]	; 120c8 <__assert_fail@plt+0xe74>
   12020:	ldr	r2, [r1, #4]
   12024:	cmp	r2, #0
   12028:	beq	1207c <__assert_fail@plt+0xe28>
   1202c:	ldr	r3, [pc, #152]	; 120cc <__assert_fail@plt+0xe78>
   12030:	sub	r2, r2, #1
   12034:	ldr	ip, [r3, #4]
   12038:	str	r2, [r1, #4]
   1203c:	cmp	ip, #0
   12040:	beq	12054 <__assert_fail@plt+0xe00>
   12044:	ldr	r2, [r3]
   12048:	ldr	r3, [r3, #8]
   1204c:	cmp	r2, r3
   12050:	bgt	12060 <__assert_fail@plt+0xe0c>
   12054:	ldr	r3, [pc, #116]	; 120d0 <__assert_fail@plt+0xe7c>
   12058:	ldr	r1, [r3]
   1205c:	b	11080 <_IO_putc@plt>
   12060:	add	r3, r3, #1
   12064:	cmp	r2, r3
   12068:	bxne	lr
   1206c:	ldr	r3, [pc, #92]	; 120d0 <__assert_fail@plt+0xe7c>
   12070:	mov	r0, #43	; 0x2b
   12074:	ldr	r1, [r3]
   12078:	b	11080 <_IO_putc@plt>
   1207c:	tst	r0, #128	; 0x80
   12080:	bne	12098 <__assert_fail@plt+0xe44>
   12084:	ldr	r3, [pc, #64]	; 120cc <__assert_fail@plt+0xe78>
   12088:	ldr	ip, [r3]
   1208c:	add	ip, ip, #1
   12090:	str	ip, [r3]
   12094:	b	12034 <__assert_fail@plt+0xde0>
   12098:	and	r3, r0, #224	; 0xe0
   1209c:	cmp	r3, #192	; 0xc0
   120a0:	moveq	r2, #1
   120a4:	beq	12084 <__assert_fail@plt+0xe30>
   120a8:	and	r3, r0, #240	; 0xf0
   120ac:	cmp	r3, #224	; 0xe0
   120b0:	moveq	r2, #2
   120b4:	beq	12084 <__assert_fail@plt+0xe30>
   120b8:	and	r3, r0, #248	; 0xf8
   120bc:	cmp	r3, #240	; 0xf0
   120c0:	moveq	r2, #3
   120c4:	b	12084 <__assert_fail@plt+0xe30>
   120c8:	andeq	r5, r2, r8, lsl #3
   120cc:	andeq	r5, r2, r4, lsl #2
   120d0:	andeq	r5, r2, ip, ror r1
   120d4:	push	{r4, r5, r6, r7, r8, lr}
   120d8:	subs	r5, r0, #0
   120dc:	beq	12158 <__assert_fail@plt+0xf04>
   120e0:	mov	r4, #1
   120e4:	mov	r6, #0
   120e8:	b	120f0 <__assert_fail@plt+0xe9c>
   120ec:	mov	r4, r7
   120f0:	add	r7, r4, r4, lsl #2
   120f4:	mov	r0, r5
   120f8:	lsl	r7, r7, #1
   120fc:	mov	r1, r7
   12100:	bl	13ad4 <__assert_fail@plt+0x2880>
   12104:	add	r6, r6, #1
   12108:	cmp	r0, #0
   1210c:	bne	120ec <__assert_fail@plt+0xe98>
   12110:	ldr	r8, [pc, #76]	; 12164 <__assert_fail@plt+0xf10>
   12114:	ldr	r7, [pc, #76]	; 12168 <__assert_fail@plt+0xf14>
   12118:	mov	r1, r4
   1211c:	mov	r0, r5
   12120:	bl	13ad4 <__assert_fail@plt+0x2880>
   12124:	smull	r3, r2, r8, r0
   12128:	asr	r3, r0, #31
   1212c:	rsb	r3, r3, r2, asr #2
   12130:	add	r3, r3, r3, lsl #2
   12134:	sub	r0, r0, r3, lsl #1
   12138:	umull	r3, r4, r7, r4
   1213c:	add	r0, r0, #48	; 0x30
   12140:	uxtb	r0, r0
   12144:	bl	1201c <__assert_fail@plt+0xdc8>
   12148:	lsrs	r4, r4, #3
   1214c:	bne	12118 <__assert_fail@plt+0xec4>
   12150:	mov	r0, r6
   12154:	pop	{r4, r5, r6, r7, r8, pc}
   12158:	mov	r6, #1
   1215c:	mov	r0, r6
   12160:	pop	{r4, r5, r6, r7, r8, pc}
   12164:	strbtvs	r6, [r6], -r7, ror #12
   12168:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1216c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12170:	mov	r5, r0
   12174:	ldr	r7, [pc, #224]	; 1225c <__assert_fail@plt+0x1008>
   12178:	ldrb	r0, [r0]
   1217c:	sub	sp, sp, #28
   12180:	ldr	r3, [r7]
   12184:	cmp	r0, #0
   12188:	str	r3, [sp, #20]
   1218c:	beq	12250 <__assert_fail@plt+0xffc>
   12190:	ldr	r8, [pc, #200]	; 12260 <__assert_fail@plt+0x100c>
   12194:	mov	r6, #0
   12198:	b	121b0 <__assert_fail@plt+0xf5c>
   1219c:	bl	1201c <__assert_fail@plt+0xdc8>
   121a0:	add	r6, r6, #1
   121a4:	ldrb	r0, [r5, #1]!
   121a8:	cmp	r0, #0
   121ac:	beq	1220c <__assert_fail@plt+0xfb8>
   121b0:	cmp	r0, #92	; 0x5c
   121b4:	beq	12228 <__assert_fail@plt+0xfd4>
   121b8:	sub	r3, r0, #32
   121bc:	cmp	r3, #94	; 0x5e
   121c0:	bls	1219c <__assert_fail@plt+0xf48>
   121c4:	str	r0, [sp]
   121c8:	mov	r3, r8
   121cc:	add	r0, sp, #12
   121d0:	mov	r2, #5
   121d4:	mov	r1, #1
   121d8:	bl	11140 <__sprintf_chk@plt>
   121dc:	ldrb	r0, [sp, #12]
   121e0:	cmp	r0, #0
   121e4:	addne	r4, sp, #12
   121e8:	beq	121fc <__assert_fail@plt+0xfa8>
   121ec:	bl	1201c <__assert_fail@plt+0xdc8>
   121f0:	ldrb	r0, [r4, #1]!
   121f4:	cmp	r0, #0
   121f8:	bne	121ec <__assert_fail@plt+0xf98>
   121fc:	ldrb	r0, [r5, #1]!
   12200:	add	r6, r6, #4
   12204:	cmp	r0, #0
   12208:	bne	121b0 <__assert_fail@plt+0xf5c>
   1220c:	ldr	r2, [sp, #20]
   12210:	ldr	r3, [r7]
   12214:	mov	r0, r6
   12218:	cmp	r2, r3
   1221c:	bne	12258 <__assert_fail@plt+0x1004>
   12220:	add	sp, sp, #28
   12224:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12228:	mov	r4, r0
   1222c:	ldr	r9, [pc, #48]	; 12264 <__assert_fail@plt+0x1010>
   12230:	b	1223c <__assert_fail@plt+0xfe8>
   12234:	mov	r0, r4
   12238:	ldrb	r4, [r9, #1]!
   1223c:	bl	1201c <__assert_fail@plt+0xdc8>
   12240:	cmp	r4, #0
   12244:	bne	12234 <__assert_fail@plt+0xfe0>
   12248:	add	r6, r6, #2
   1224c:	b	121a4 <__assert_fail@plt+0xf50>
   12250:	mov	r6, r0
   12254:	b	1220c <__assert_fail@plt+0xfb8>
   12258:	bl	11050 <__stack_chk_fail@plt>
   1225c:	strdeq	r4, [r2], -r8
   12260:	andeq	r4, r1, r0, lsl #9
   12264:	andeq	r4, r1, sp, ror r4
   12268:	push	{r4, r5, r6, lr}
   1226c:	ldr	r5, [pc, #76]	; 122c0 <__assert_fail@plt+0x106c>
   12270:	ldr	r6, [pc, #76]	; 122c4 <__assert_fail@plt+0x1070>
   12274:	ldr	r4, [pc, #76]	; 122c8 <__assert_fail@plt+0x1074>
   12278:	ldrb	r0, [r5, #8]
   1227c:	ldr	r1, [r6]
   12280:	cmp	r0, #0
   12284:	beq	12298 <__assert_fail@plt+0x1044>
   12288:	ldr	r2, [r4]
   1228c:	ldr	r3, [r4, #8]
   12290:	cmp	r2, r3
   12294:	beq	122b4 <__assert_fail@plt+0x1060>
   12298:	mov	r3, #0
   1229c:	mov	r0, #10
   122a0:	strb	r3, [r5, #8]
   122a4:	bl	11080 <_IO_putc@plt>
   122a8:	mov	r3, #1
   122ac:	str	r3, [r4]
   122b0:	pop	{r4, r5, r6, pc}
   122b4:	bl	11080 <_IO_putc@plt>
   122b8:	ldr	r1, [r6]
   122bc:	b	12298 <__assert_fail@plt+0x1044>
   122c0:	andeq	r5, r2, r8, lsl #3
   122c4:	andeq	r5, r2, ip, ror r1
   122c8:	andeq	r5, r2, r4, lsl #2
   122cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   122d0:	mov	r8, r0
   122d4:	mov	r9, r1
   122d8:	bl	10fd8 <strcmp@plt>
   122dc:	cmp	r0, #0
   122e0:	bne	12388 <__assert_fail@plt+0x1134>
   122e4:	ldr	r3, [pc, #164]	; 12390 <__assert_fail@plt+0x113c>
   122e8:	ldr	r2, [r3, #12]
   122ec:	cmp	r2, #0
   122f0:	bne	12374 <__assert_fail@plt+0x1120>
   122f4:	ldr	r3, [r3, #16]
   122f8:	cmp	r3, #0
   122fc:	beq	12328 <__assert_fail@plt+0x10d4>
   12300:	add	r3, r8, #96	; 0x60
   12304:	add	r2, r9, #96	; 0x60
   12308:	add	r1, r8, #152	; 0x98
   1230c:	ldrd	r6, [r3], #8
   12310:	ldrd	r4, [r2], #8
   12314:	cmp	r7, r5
   12318:	cmpeq	r6, r4
   1231c:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   12320:	cmp	r3, r1
   12324:	bne	1230c <__assert_fail@plt+0x10b8>
   12328:	ldr	r5, [r8, #156]	; 0x9c
   1232c:	ldr	r4, [r9, #156]	; 0x9c
   12330:	cmp	r4, #0
   12334:	cmpne	r5, #0
   12338:	beq	12364 <__assert_fail@plt+0x1110>
   1233c:	ldr	r1, [r4]
   12340:	ldr	r0, [r5]
   12344:	bl	122cc <__assert_fail@plt+0x1078>
   12348:	cmp	r0, #0
   1234c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12350:	ldr	r5, [r5, #4]
   12354:	ldr	r4, [r4, #4]
   12358:	cmp	r5, #0
   1235c:	cmpne	r4, #0
   12360:	bne	1233c <__assert_fail@plt+0x10e8>
   12364:	orrs	r3, r5, r4
   12368:	moveq	r0, #1
   1236c:	movne	r0, #0
   12370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12374:	ldr	r1, [r8, #84]	; 0x54
   12378:	ldr	r2, [r9, #84]	; 0x54
   1237c:	cmp	r1, r2
   12380:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   12384:	b	122f4 <__assert_fail@plt+0x10a0>
   12388:	mov	r0, #0
   1238c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12390:	andeq	r5, r2, r8, lsl #3
   12394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12398:	sub	sp, sp, #52	; 0x34
   1239c:	ldr	fp, [pc, #2496]	; 12d64 <__assert_fail@plt+0x1b10>
   123a0:	ldr	ip, [sp, #88]	; 0x58
   123a4:	ldr	r9, [pc, #2492]	; 12d68 <__assert_fail@plt+0x1b14>
   123a8:	str	ip, [sp, #28]
   123ac:	ldr	ip, [sp, #92]	; 0x5c
   123b0:	mov	r4, r0
   123b4:	str	ip, [sp, #36]	; 0x24
   123b8:	mov	r5, r3
   123bc:	ldr	ip, [sp, #96]	; 0x60
   123c0:	mov	sl, r2
   123c4:	str	ip, [sp, #24]
   123c8:	str	r1, [sp, #20]
   123cc:	ldr	r3, [sp, #24]
   123d0:	cmn	r3, #1
   123d4:	beq	12d50 <__assert_fail@plt+0x1afc>
   123d8:	cmp	r4, #0
   123dc:	beq	12a30 <__assert_fail@plt+0x17dc>
   123e0:	cmp	r5, #0
   123e4:	bne	12470 <__assert_fail@plt+0x121c>
   123e8:	ldr	r8, [sp, #20]
   123ec:	cmp	r8, #0
   123f0:	ble	12470 <__assert_fail@plt+0x121c>
   123f4:	sub	r7, r8, #1
   123f8:	str	r4, [sp, #32]
   123fc:	ldr	r3, [fp, #20]
   12400:	lsl	r6, r5, #2
   12404:	ldr	r3, [r3, r5, lsl #2]
   12408:	adds	r4, r3, #1
   1240c:	beq	12420 <__assert_fail@plt+0x11cc>
   12410:	mov	r0, #32
   12414:	bl	1201c <__assert_fail@plt+0xdc8>
   12418:	subs	r4, r4, #1
   1241c:	bne	12410 <__assert_fail@plt+0x11bc>
   12420:	cmp	r7, r5
   12424:	ldr	r2, [r9, #12]
   12428:	beq	12b30 <__assert_fail@plt+0x18dc>
   1242c:	ldr	r3, [fp, #24]
   12430:	add	r6, r3, r6
   12434:	ldr	r3, [r6, #4]
   12438:	cmp	r3, #0
   1243c:	ldrne	r6, [r2, #8]
   12440:	ldreq	r6, [r2]
   12444:	ldrb	r0, [r6]
   12448:	cmp	r0, #0
   1244c:	beq	12460 <__assert_fail@plt+0x120c>
   12450:	bl	1201c <__assert_fail@plt+0xdc8>
   12454:	ldrb	r0, [r6, #1]!
   12458:	cmp	r0, #0
   1245c:	bne	12450 <__assert_fail@plt+0x11fc>
   12460:	add	r5, r5, #1
   12464:	cmp	r8, r5
   12468:	bne	123fc <__assert_fail@plt+0x11a8>
   1246c:	ldr	r4, [sp, #32]
   12470:	cmp	sl, #1
   12474:	movle	r3, #0
   12478:	strle	r3, [sp, #40]	; 0x28
   1247c:	bgt	12a84 <__assert_fail@plt+0x1830>
   12480:	ldrb	r3, [r4, #152]	; 0x98
   12484:	tst	r3, #1
   12488:	bne	12ac8 <__assert_fail@plt+0x1874>
   1248c:	ldr	sl, [fp, #28]
   12490:	cmp	sl, #0
   12494:	beq	12a38 <__assert_fail@plt+0x17e4>
   12498:	ldr	r3, [r4, #72]	; 0x48
   1249c:	cmp	r3, #0
   124a0:	blt	12cac <__assert_fail@plt+0x1a58>
   124a4:	mov	r0, r4
   124a8:	bl	1216c <__assert_fail@plt+0xf18>
   124ac:	ldr	r3, [fp, #40]	; 0x28
   124b0:	ldr	r2, [r9]
   124b4:	cmp	r3, #0
   124b8:	str	r2, [sp, #44]	; 0x2c
   124bc:	str	r0, [sp, #32]
   124c0:	beq	12c14 <__assert_fail@plt+0x19c0>
   124c4:	mov	r0, #44	; 0x2c
   124c8:	bl	1201c <__assert_fail@plt+0xdc8>
   124cc:	ldr	r0, [r4, #76]	; 0x4c
   124d0:	bl	120d4 <__assert_fail@plt+0xe80>
   124d4:	ldr	r3, [fp, #44]	; 0x2c
   124d8:	add	r8, sl, #1
   124dc:	cmp	r3, #0
   124e0:	beq	12504 <__assert_fail@plt+0x12b0>
   124e4:	cmp	r8, #0
   124e8:	add	r8, sl, #2
   124ec:	bne	12a7c <__assert_fail@plt+0x1828>
   124f0:	mov	r8, #1
   124f4:	mov	r0, #40	; 0x28
   124f8:	bl	1201c <__assert_fail@plt+0xdc8>
   124fc:	ldr	r0, [r4, #80]	; 0x50
   12500:	bl	120d4 <__assert_fail@plt+0xe80>
   12504:	ldr	r3, [fp, #12]
   12508:	cmp	r3, #0
   1250c:	beq	12564 <__assert_fail@plt+0x1310>
   12510:	ldr	r3, [r4, #84]	; 0x54
   12514:	ldr	r2, [sp, #36]	; 0x24
   12518:	cmp	r3, r2
   1251c:	beq	12564 <__assert_fail@plt+0x1310>
   12520:	cmp	r8, #0
   12524:	movne	r0, #44	; 0x2c
   12528:	moveq	r0, #40	; 0x28
   1252c:	bl	1201c <__assert_fail@plt+0xdc8>
   12530:	ldr	r0, [r4, #84]	; 0x54
   12534:	bl	10ff0 <getpwuid@plt>
   12538:	add	r8, r8, #1
   1253c:	cmp	r0, #0
   12540:	beq	12d34 <__assert_fail@plt+0x1ae0>
   12544:	ldr	r5, [r0]
   12548:	ldrb	r0, [r5]
   1254c:	cmp	r0, #0
   12550:	beq	12564 <__assert_fail@plt+0x1310>
   12554:	bl	1201c <__assert_fail@plt+0xdc8>
   12558:	ldrb	r0, [r5, #1]!
   1255c:	cmp	r0, #0
   12560:	bne	12554 <__assert_fail@plt+0x1300>
   12564:	ldr	r3, [fp, #16]
   12568:	cmp	r3, #0
   1256c:	beq	12620 <__assert_fail@plt+0x13cc>
   12570:	ldr	r3, [r4, #160]	; 0xa0
   12574:	cmp	r3, #0
   12578:	beq	12620 <__assert_fail@plt+0x13cc>
   1257c:	add	r5, r4, #96	; 0x60
   12580:	add	r7, r4, #152	; 0x98
   12584:	mov	r6, #0
   12588:	str	sl, [sp, #36]	; 0x24
   1258c:	b	1259c <__assert_fail@plt+0x1348>
   12590:	cmp	r7, r5
   12594:	add	r6, r6, #1
   12598:	beq	1261c <__assert_fail@plt+0x13c8>
   1259c:	ldrd	r0, [r5], #8
   125a0:	orrs	r3, r0, r1
   125a4:	beq	12590 <__assert_fail@plt+0x133c>
   125a8:	ldr	r3, [r4, #160]	; 0xa0
   125ac:	add	r3, r3, r6, lsl #3
   125b0:	ldrd	r2, [r3, #96]	; 0x60
   125b4:	cmp	r1, r3
   125b8:	cmpeq	r0, r2
   125bc:	movne	r1, #1
   125c0:	moveq	r1, #0
   125c4:	orrs	r3, r2, r3
   125c8:	movne	r3, r1
   125cc:	moveq	r3, #0
   125d0:	cmp	r3, #0
   125d4:	beq	12590 <__assert_fail@plt+0x133c>
   125d8:	cmp	r8, #0
   125dc:	movne	r0, #44	; 0x2c
   125e0:	moveq	r0, #40	; 0x28
   125e4:	bl	1201c <__assert_fail@plt+0xdc8>
   125e8:	ldr	r3, [pc, #1916]	; 12d6c <__assert_fail@plt+0x1b18>
   125ec:	add	r8, r8, #1
   125f0:	ldr	sl, [r3, r6, lsl #2]
   125f4:	ldrb	r0, [sl]
   125f8:	cmp	r0, #0
   125fc:	beq	12590 <__assert_fail@plt+0x133c>
   12600:	bl	1201c <__assert_fail@plt+0xdc8>
   12604:	ldrb	r0, [sl, #1]!
   12608:	cmp	r0, #0
   1260c:	bne	12600 <__assert_fail@plt+0x13ac>
   12610:	cmp	r7, r5
   12614:	add	r6, r6, #1
   12618:	bne	1259c <__assert_fail@plt+0x1348>
   1261c:	ldr	sl, [sp, #36]	; 0x24
   12620:	ldr	r3, [fp, #32]
   12624:	cmp	r3, #0
   12628:	beq	12670 <__assert_fail@plt+0x141c>
   1262c:	cmp	r8, #0
   12630:	movne	r0, #44	; 0x2c
   12634:	moveq	r0, #40	; 0x28
   12638:	bl	1201c <__assert_fail@plt+0xdc8>
   1263c:	ldr	r5, [r4, #88]	; 0x58
   12640:	mov	r0, #96	; 0x60
   12644:	bl	1201c <__assert_fail@plt+0xdc8>
   12648:	ldrb	r0, [r5]
   1264c:	add	r8, r8, #1
   12650:	cmp	r0, #0
   12654:	beq	12668 <__assert_fail@plt+0x1414>
   12658:	bl	1201c <__assert_fail@plt+0xdc8>
   1265c:	ldrb	r0, [r5, #1]!
   12660:	cmp	r0, #0
   12664:	bne	12658 <__assert_fail@plt+0x1404>
   12668:	mov	r0, #39	; 0x27
   1266c:	bl	1201c <__assert_fail@plt+0xdc8>
   12670:	cmp	sl, #0
   12674:	beq	12aec <__assert_fail@plt+0x1898>
   12678:	ldr	r3, [fp, #28]
   1267c:	cmp	r3, #0
   12680:	beq	12afc <__assert_fail@plt+0x18a8>
   12684:	ldr	lr, [r4, #72]	; 0x48
   12688:	cmp	lr, #0
   1268c:	blt	12af4 <__assert_fail@plt+0x18a0>
   12690:	ldrb	r3, [r4, #152]	; 0x98
   12694:	tst	r3, #1
   12698:	beq	126cc <__assert_fail@plt+0x1478>
   1269c:	mov	r1, #0
   126a0:	ldr	r0, [pc, #1736]	; 12d70 <__assert_fail@plt+0x1b1c>
   126a4:	bl	11164 <tgetstr@plt>
   126a8:	cmp	r0, #0
   126ac:	beq	12b08 <__assert_fail@plt+0x18b4>
   126b0:	ldr	r2, [pc, #1724]	; 12d74 <__assert_fail@plt+0x1b20>
   126b4:	mov	r1, #1
   126b8:	bl	10fc0 <tputs@plt>
   126bc:	ldr	r3, [fp, #28]
   126c0:	cmp	r3, #0
   126c4:	beq	12b14 <__assert_fail@plt+0x18c0>
   126c8:	ldr	lr, [r4, #72]	; 0x48
   126cc:	cmp	lr, #0
   126d0:	movgt	r5, #0
   126d4:	ble	12770 <__assert_fail@plt+0x151c>
   126d8:	sub	r3, lr, #1
   126dc:	cmp	r3, r5
   126e0:	bgt	12b4c <__assert_fail@plt+0x18f8>
   126e4:	ldr	r3, [r4, #68]	; 0x44
   126e8:	ldr	r0, [r3, r5, lsl #2]
   126ec:	ldrb	r3, [r0]
   126f0:	cmp	r3, #0
   126f4:	beq	12b5c <__assert_fail@plt+0x1908>
   126f8:	mov	r1, r0
   126fc:	mov	r2, #0
   12700:	sub	ip, r3, #32
   12704:	ldrb	r3, [r1, #1]!
   12708:	cmp	ip, #94	; 0x5e
   1270c:	movls	ip, #1
   12710:	movhi	ip, #4
   12714:	cmp	r3, #0
   12718:	add	r2, r2, ip
   1271c:	bne	12700 <__assert_fail@plt+0x14ac>
   12720:	ldr	r3, [r9]
   12724:	sub	lr, lr, #1
   12728:	add	r2, r2, r3
   1272c:	ldr	r3, [r9, #8]
   12730:	cmp	lr, r5
   12734:	subne	r3, r3, #4
   12738:	cmp	r2, r3
   1273c:	ble	1274c <__assert_fail@plt+0x14f8>
   12740:	ldr	r3, [r9, #4]
   12744:	cmp	r3, #0
   12748:	bne	12c74 <__assert_fail@plt+0x1a20>
   1274c:	bl	1216c <__assert_fail@plt+0xf18>
   12750:	ldr	lr, [r4, #72]	; 0x48
   12754:	add	r5, r5, #1
   12758:	cmp	lr, r5
   1275c:	bgt	126d8 <__assert_fail@plt+0x1484>
   12760:	ldr	r2, [fp, #32]
   12764:	ldr	r3, [fp, #28]
   12768:	orrs	r3, r2, r3
   1276c:	beq	12b20 <__assert_fail@plt+0x18cc>
   12770:	ldr	r3, [sp, #24]
   12774:	cmp	r3, #0
   12778:	sub	r5, r3, #1
   1277c:	beq	12794 <__assert_fail@plt+0x1540>
   12780:	sub	r5, r5, #1
   12784:	mov	r0, #93	; 0x5d
   12788:	bl	1201c <__assert_fail@plt+0xdc8>
   1278c:	cmn	r5, #1
   12790:	bne	12780 <__assert_fail@plt+0x152c>
   12794:	bl	12268 <__assert_fail@plt+0x1014>
   12798:	mvn	r3, #0
   1279c:	str	r3, [sp, #24]
   127a0:	ldr	r3, [fp, #36]	; 0x24
   127a4:	ldr	r2, [sp, #20]
   127a8:	ldr	r5, [fp, #20]
   127ac:	cmp	r2, r3
   127b0:	blt	12b44 <__assert_fail@plt+0x18f0>
   127b4:	cmp	r3, #0
   127b8:	lslne	r6, r3, #3
   127bc:	moveq	r6, #400	; 0x190
   127c0:	lslne	r2, r3, #1
   127c4:	moveq	r2, #100	; 0x64
   127c8:	mov	r0, r5
   127cc:	mov	r1, r6
   127d0:	str	r2, [fp, #36]	; 0x24
   127d4:	bl	1105c <realloc@plt>
   127d8:	cmp	r0, #0
   127dc:	mov	r5, r0
   127e0:	str	r0, [fp, #20]
   127e4:	beq	12d40 <__assert_fail@plt+0x1aec>
   127e8:	mov	r1, r6
   127ec:	ldr	r0, [fp, #24]
   127f0:	bl	1105c <realloc@plt>
   127f4:	cmp	r0, #0
   127f8:	str	r0, [fp, #24]
   127fc:	beq	12d40 <__assert_fail@plt+0x1aec>
   12800:	ldr	r1, [fp, #32]
   12804:	ldr	r2, [fp, #28]
   12808:	ldr	r3, [sp, #28]
   1280c:	orrs	r2, r1, r2
   12810:	ldr	r2, [sp, #20]
   12814:	eor	r3, r3, #1
   12818:	str	r3, [r0, r2, lsl #2]
   1281c:	add	r1, r5, r2, lsl #2
   12820:	bne	129a4 <__assert_fail@plt+0x1750>
   12824:	ldr	r2, [r9]
   12828:	ldr	r3, [sp, #32]
   1282c:	ldr	r0, [sp, #44]	; 0x2c
   12830:	ldr	r1, [r9, #8]
   12834:	add	r3, r2, r3
   12838:	sub	r3, r3, r0
   1283c:	cmp	r2, r1
   12840:	ldr	r0, [sp, #40]	; 0x28
   12844:	ldr	r2, [sp, #20]
   12848:	add	r3, r3, r0
   1284c:	str	r3, [r5, r2, lsl #2]
   12850:	bge	12c30 <__assert_fail@plt+0x19dc>
   12854:	ldr	r7, [r4, #156]	; 0x9c
   12858:	cmp	r7, #0
   1285c:	beq	12a30 <__assert_fail@plt+0x17dc>
   12860:	ldr	r3, [sp, #20]
   12864:	ldr	r6, [r7, #4]
   12868:	add	r3, r3, #1
   1286c:	str	r3, [sp, #20]
   12870:	mov	r3, #1
   12874:	str	r3, [sp, #32]
   12878:	ldr	r3, [r9, #16]
   1287c:	cmp	r3, #0
   12880:	bne	128f8 <__assert_fail@plt+0x16a4>
   12884:	ldr	r3, [sp, #24]
   12888:	mov	sl, #1
   1288c:	str	r3, [sp, #28]
   12890:	ldr	r3, [sp, #32]
   12894:	cmp	r3, #0
   12898:	bne	12970 <__assert_fail@plt+0x171c>
   1289c:	ldr	r2, [sp, #28]
   128a0:	ldr	r3, [r4, #156]	; 0x9c
   128a4:	ldr	r0, [r7]
   128a8:	str	r2, [sp, #8]
   128ac:	ldr	ip, [r4, #84]	; 0x54
   128b0:	clz	r1, r6
   128b4:	lsr	r1, r1, #5
   128b8:	mov	r2, sl
   128bc:	stm	sp, {r1, ip}
   128c0:	sub	r3, r3, r7
   128c4:	ldr	r1, [sp, #20]
   128c8:	clz	r3, r3
   128cc:	lsr	r3, r3, #5
   128d0:	bl	12394 <__assert_fail@plt+0x1140>
   128d4:	cmp	r6, #0
   128d8:	beq	12a30 <__assert_fail@plt+0x17dc>
   128dc:	mov	r3, #0
   128e0:	str	r3, [sp, #32]
   128e4:	ldr	r3, [r9, #16]
   128e8:	mov	r7, r6
   128ec:	cmp	r3, #0
   128f0:	ldr	r6, [r7, #4]
   128f4:	beq	12884 <__assert_fail@plt+0x1630>
   128f8:	add	sl, r7, #4
   128fc:	mov	r5, r6
   12900:	mov	r8, #0
   12904:	str	r4, [sp, #28]
   12908:	b	12944 <__assert_fail@plt+0x16f0>
   1290c:	ldr	r1, [r5]
   12910:	ldr	r0, [r7]
   12914:	bl	122cc <__assert_fail@plt+0x1078>
   12918:	ldr	r4, [r5, #4]
   1291c:	cmp	r0, #0
   12920:	addeq	sl, r5, #4
   12924:	beq	12940 <__assert_fail@plt+0x16ec>
   12928:	add	r8, r8, #1
   1292c:	cmp	r6, r5
   12930:	mov	r0, r5
   12934:	moveq	r6, r4
   12938:	bl	11008 <free@plt>
   1293c:	str	r4, [sl]
   12940:	mov	r5, r4
   12944:	cmp	r5, #0
   12948:	bne	1290c <__assert_fail@plt+0x16b8>
   1294c:	ldr	r3, [sp, #24]
   12950:	ldr	r4, [sp, #28]
   12954:	cmp	r8, #0
   12958:	addne	r3, r3, #1
   1295c:	str	r3, [sp, #28]
   12960:	ldr	r3, [sp, #32]
   12964:	add	sl, r8, #1
   12968:	cmp	r3, #0
   1296c:	beq	1289c <__assert_fail@plt+0x1648>
   12970:	cmp	r6, #0
   12974:	ldr	r3, [r9, #12]
   12978:	beq	12cb8 <__assert_fail@plt+0x1a64>
   1297c:	ldr	r8, [r3, #20]
   12980:	ldrb	r5, [r8]
   12984:	cmp	r5, #0
   12988:	beq	12cf8 <__assert_fail@plt+0x1aa4>
   1298c:	mov	r0, r5
   12990:	bl	1201c <__assert_fail@plt+0xdc8>
   12994:	ldrb	r0, [r8, #1]!
   12998:	cmp	r0, #0
   1299c:	bne	12990 <__assert_fail@plt+0x173c>
   129a0:	b	1289c <__assert_fail@plt+0x1648>
   129a4:	mov	r8, sl
   129a8:	ldr	r3, [sp, #32]
   129ac:	ldr	sl, [r4, #156]	; 0x9c
   129b0:	cmp	r3, #1
   129b4:	movgt	r2, r8
   129b8:	suble	r2, r8, #1
   129bc:	cmp	sl, #0
   129c0:	str	r2, [r1]
   129c4:	beq	12a30 <__assert_fail@plt+0x17dc>
   129c8:	ldr	r3, [sp, #20]
   129cc:	add	r3, r3, #1
   129d0:	str	r3, [sp, #20]
   129d4:	ldr	r3, [r9, #16]
   129d8:	ldr	r5, [sl, #4]
   129dc:	cmp	r3, #0
   129e0:	ldr	r6, [sl]
   129e4:	beq	129f4 <__assert_fail@plt+0x17a0>
   129e8:	ldrb	r3, [r6, #152]	; 0x98
   129ec:	tst	r3, #2
   129f0:	bne	12b64 <__assert_fail@plt+0x1910>
   129f4:	mov	r3, #0
   129f8:	str	r3, [sp, #8]
   129fc:	ldr	r2, [r4, #84]	; 0x54
   12a00:	clz	r3, r5
   12a04:	lsr	r3, r3, #5
   12a08:	str	r2, [sp, #4]
   12a0c:	str	r3, [sp]
   12a10:	mov	r0, r6
   12a14:	mov	r3, #0
   12a18:	mov	r2, #1
   12a1c:	ldr	r1, [sp, #20]
   12a20:	bl	12394 <__assert_fail@plt+0x1140>
   12a24:	mov	sl, r5
   12a28:	cmp	r5, #0
   12a2c:	bne	129d4 <__assert_fail@plt+0x1780>
   12a30:	add	sp, sp, #52	; 0x34
   12a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a38:	mov	r0, r4
   12a3c:	bl	1216c <__assert_fail@plt+0xf18>
   12a40:	ldr	r3, [fp, #40]	; 0x28
   12a44:	ldr	r2, [r9]
   12a48:	cmp	r3, #0
   12a4c:	str	r2, [sp, #44]	; 0x2c
   12a50:	str	r0, [sp, #32]
   12a54:	beq	12c04 <__assert_fail@plt+0x19b0>
   12a58:	mov	r0, #40	; 0x28
   12a5c:	bl	1201c <__assert_fail@plt+0xdc8>
   12a60:	ldr	r0, [r4, #76]	; 0x4c
   12a64:	bl	120d4 <__assert_fail@plt+0xe80>
   12a68:	ldr	r3, [fp, #44]	; 0x2c
   12a6c:	cmp	r3, #0
   12a70:	moveq	r8, #1
   12a74:	beq	12504 <__assert_fail@plt+0x12b0>
   12a78:	mov	r8, #2
   12a7c:	mov	r0, #44	; 0x2c
   12a80:	b	124f8 <__assert_fail@plt+0x12a4>
   12a84:	mov	r0, sl
   12a88:	bl	120d4 <__assert_fail@plt+0xe80>
   12a8c:	mov	r3, #42	; 0x2a
   12a90:	ldr	r5, [pc, #736]	; 12d78 <__assert_fail@plt+0x1b24>
   12a94:	mov	r6, #91	; 0x5b
   12a98:	add	r2, r0, #2
   12a9c:	str	r2, [sp, #40]	; 0x28
   12aa0:	mov	r0, r3
   12aa4:	b	12ab0 <__assert_fail@plt+0x185c>
   12aa8:	mov	r0, r6
   12aac:	ldrb	r6, [r5, #1]!
   12ab0:	bl	1201c <__assert_fail@plt+0xdc8>
   12ab4:	cmp	r6, #0
   12ab8:	bne	12aa8 <__assert_fail@plt+0x1854>
   12abc:	ldrb	r3, [r4, #152]	; 0x98
   12ac0:	tst	r3, #1
   12ac4:	beq	1248c <__assert_fail@plt+0x1238>
   12ac8:	mov	r1, #0
   12acc:	ldr	r0, [pc, #680]	; 12d7c <__assert_fail@plt+0x1b28>
   12ad0:	bl	11164 <tgetstr@plt>
   12ad4:	cmp	r0, #0
   12ad8:	beq	1248c <__assert_fail@plt+0x1238>
   12adc:	ldr	r2, [pc, #656]	; 12d74 <__assert_fail@plt+0x1b20>
   12ae0:	mov	r1, #1
   12ae4:	bl	10fc0 <tputs@plt>
   12ae8:	b	1248c <__assert_fail@plt+0x1238>
   12aec:	cmp	r8, #0
   12af0:	beq	12afc <__assert_fail@plt+0x18a8>
   12af4:	mov	r0, #41	; 0x29
   12af8:	bl	1201c <__assert_fail@plt+0xdc8>
   12afc:	ldrb	r3, [r4, #152]	; 0x98
   12b00:	tst	r3, #1
   12b04:	bne	1269c <__assert_fail@plt+0x1448>
   12b08:	ldr	r3, [fp, #28]
   12b0c:	cmp	r3, #0
   12b10:	bne	126c8 <__assert_fail@plt+0x1474>
   12b14:	ldr	r3, [fp, #32]
   12b18:	cmp	r3, #0
   12b1c:	bne	12770 <__assert_fail@plt+0x151c>
   12b20:	ldr	r3, [r4, #156]	; 0x9c
   12b24:	cmp	r3, #0
   12b28:	bne	127a0 <__assert_fail@plt+0x154c>
   12b2c:	b	12770 <__assert_fail@plt+0x151c>
   12b30:	ldr	r3, [sp, #28]
   12b34:	cmp	r3, #0
   12b38:	ldrne	r6, [r2, #12]
   12b3c:	ldreq	r6, [r2, #4]
   12b40:	b	12444 <__assert_fail@plt+0x11f0>
   12b44:	ldr	r0, [fp, #24]
   12b48:	b	12800 <__assert_fail@plt+0x15ac>
   12b4c:	mov	r0, #32
   12b50:	bl	1201c <__assert_fail@plt+0xdc8>
   12b54:	ldr	lr, [r4, #72]	; 0x48
   12b58:	b	126e4 <__assert_fail@plt+0x1490>
   12b5c:	mov	r2, r3
   12b60:	b	12720 <__assert_fail@plt+0x14cc>
   12b64:	add	r8, sl, #4
   12b68:	mov	fp, r5
   12b6c:	mov	r7, #0
   12b70:	str	r4, [sp, #28]
   12b74:	b	12bb4 <__assert_fail@plt+0x1960>
   12b78:	ldr	r1, [fp]
   12b7c:	mov	r0, r6
   12b80:	bl	122cc <__assert_fail@plt+0x1078>
   12b84:	ldr	r4, [fp, #4]
   12b88:	cmp	r0, #0
   12b8c:	addeq	r8, fp, #4
   12b90:	beq	12bb0 <__assert_fail@plt+0x195c>
   12b94:	mov	r0, fp
   12b98:	bl	11008 <free@plt>
   12b9c:	cmp	r5, fp
   12ba0:	moveq	r5, r4
   12ba4:	add	r7, r7, #1
   12ba8:	ldr	r6, [sl]
   12bac:	str	r4, [r8]
   12bb0:	mov	fp, r4
   12bb4:	cmp	fp, #0
   12bb8:	bne	12b78 <__assert_fail@plt+0x1924>
   12bbc:	ldr	r4, [sp, #28]
   12bc0:	cmp	r7, #0
   12bc4:	ldr	r3, [sp, #24]
   12bc8:	ldr	lr, [r4, #84]	; 0x54
   12bcc:	movne	ip, #2
   12bd0:	moveq	ip, #1
   12bd4:	clz	r1, r5
   12bd8:	lsr	r1, r1, #5
   12bdc:	add	ip, r3, ip
   12be0:	stm	sp, {r1, lr}
   12be4:	mov	r3, fp
   12be8:	add	r2, r7, #1
   12bec:	mov	r0, r6
   12bf0:	str	ip, [sp, #8]
   12bf4:	ldr	r1, [sp, #20]
   12bf8:	bl	12394 <__assert_fail@plt+0x1140>
   12bfc:	mov	sl, r5
   12c00:	b	12a28 <__assert_fail@plt+0x17d4>
   12c04:	ldr	r8, [fp, #44]	; 0x2c
   12c08:	cmp	r8, #0
   12c0c:	beq	12504 <__assert_fail@plt+0x12b0>
   12c10:	b	124f0 <__assert_fail@plt+0x129c>
   12c14:	ldr	r3, [fp, #44]	; 0x2c
   12c18:	cmp	r3, #0
   12c1c:	moveq	r8, sl
   12c20:	beq	12504 <__assert_fail@plt+0x12b0>
   12c24:	add	r8, sl, #1
   12c28:	mov	r0, #44	; 0x2c
   12c2c:	b	124f8 <__assert_fail@plt+0x12a4>
   12c30:	ldr	r3, [r9, #4]
   12c34:	cmp	r3, #0
   12c38:	beq	12854 <__assert_fail@plt+0x1600>
   12c3c:	ldr	r3, [r9, #12]
   12c40:	ldr	r4, [r3, #20]
   12c44:	ldrb	r0, [r4]
   12c48:	cmp	r0, #0
   12c4c:	beq	12c60 <__assert_fail@plt+0x1a0c>
   12c50:	bl	1201c <__assert_fail@plt+0xdc8>
   12c54:	ldrb	r0, [r4, #1]!
   12c58:	cmp	r0, #0
   12c5c:	bne	12c50 <__assert_fail@plt+0x19fc>
   12c60:	mov	r0, #43	; 0x2b
   12c64:	bl	1201c <__assert_fail@plt+0xdc8>
   12c68:	add	sp, sp, #52	; 0x34
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c70:	b	12268 <__assert_fail@plt+0x1014>
   12c74:	mov	r6, #46	; 0x2e
   12c78:	mov	r0, r6
   12c7c:	ldr	r5, [pc, #252]	; 12d80 <__assert_fail@plt+0x1b2c>
   12c80:	b	12c8c <__assert_fail@plt+0x1a38>
   12c84:	mov	r0, r6
   12c88:	ldrb	r6, [r5, #1]!
   12c8c:	bl	1201c <__assert_fail@plt+0xdc8>
   12c90:	cmp	r6, #0
   12c94:	bne	12c84 <__assert_fail@plt+0x1a30>
   12c98:	ldr	r2, [fp, #32]
   12c9c:	ldr	r3, [fp, #28]
   12ca0:	orrs	r3, r2, r3
   12ca4:	bne	12770 <__assert_fail@plt+0x151c>
   12ca8:	b	12b20 <__assert_fail@plt+0x18cc>
   12cac:	mov	r0, #40	; 0x28
   12cb0:	bl	1201c <__assert_fail@plt+0xdc8>
   12cb4:	b	124a4 <__assert_fail@plt+0x1250>
   12cb8:	ldr	r8, [r3, #16]
   12cbc:	ldrb	r5, [r8]
   12cc0:	cmp	r5, #0
   12cc4:	bne	1298c <__assert_fail@plt+0x1738>
   12cc8:	ldr	r3, [sp, #28]
   12ccc:	ldr	r5, [r4, #156]	; 0x9c
   12cd0:	str	r3, [sp, #24]
   12cd4:	ldr	r3, [r4, #84]	; 0x54
   12cd8:	sub	r5, r5, r7
   12cdc:	str	r3, [sp, #36]	; 0x24
   12ce0:	mov	r3, #1
   12ce4:	clz	r5, r5
   12ce8:	str	r3, [sp, #28]
   12cec:	lsr	r5, r5, #5
   12cf0:	ldr	r4, [r7]
   12cf4:	b	123cc <__assert_fail@plt+0x1178>
   12cf8:	ldr	r2, [sp, #28]
   12cfc:	ldr	r3, [r4, #156]	; 0x9c
   12d00:	ldr	r0, [r7]
   12d04:	str	r2, [sp, #8]
   12d08:	ldr	r1, [r4, #84]	; 0x54
   12d0c:	sub	r3, r3, r7
   12d10:	str	r1, [sp, #4]
   12d14:	mov	r2, sl
   12d18:	clz	r3, r3
   12d1c:	str	r5, [sp]
   12d20:	lsr	r3, r3, #5
   12d24:	ldr	r1, [sp, #20]
   12d28:	str	r5, [sp, #32]
   12d2c:	bl	12394 <__assert_fail@plt+0x1140>
   12d30:	b	128e4 <__assert_fail@plt+0x1690>
   12d34:	ldr	r0, [r4, #84]	; 0x54
   12d38:	bl	120d4 <__assert_fail@plt+0xe80>
   12d3c:	b	12564 <__assert_fail@plt+0x1310>
   12d40:	ldr	r0, [pc, #60]	; 12d84 <__assert_fail@plt+0x1b30>
   12d44:	bl	11074 <perror@plt>
   12d48:	mov	r0, #1
   12d4c:	bl	1111c <exit@plt>
   12d50:	ldr	r3, [pc, #48]	; 12d88 <__assert_fail@plt+0x1b34>
   12d54:	ldr	r2, [pc, #48]	; 12d8c <__assert_fail@plt+0x1b38>
   12d58:	ldr	r1, [pc, #48]	; 12d90 <__assert_fail@plt+0x1b3c>
   12d5c:	ldr	r0, [pc, #48]	; 12d94 <__assert_fail@plt+0x1b40>
   12d60:	bl	11254 <__assert_fail@plt>
   12d64:	andeq	r5, r2, r8, lsl #3
   12d68:	andeq	r5, r2, r4, lsl #2
   12d6c:	andeq	r3, r1, r0, lsr #27
   12d70:			; <UNDEFINED> instruction: 0x000144b0
   12d74:	andeq	r1, r1, ip, asr #2
   12d78:	andeq	r4, r1, r9, lsr #9
   12d7c:	andeq	r4, r1, ip, lsr #9
   12d80:			; <UNDEFINED> instruction: 0x000144b5
   12d84:			; <UNDEFINED> instruction: 0x000144b8
   12d88:	muleq	r1, r4, sp
   12d8c:	muleq	r0, r2, r2
   12d90:	andeq	r4, r1, r8, lsl #9
   12d94:	muleq	r1, r8, r4
   12d98:	push	{r4, r5, r6, r7, lr}
   12d9c:	subs	r4, r0, #0
   12da0:	sub	sp, sp, #20
   12da4:	beq	12ddc <__assert_fail@plt+0x1b88>
   12da8:	ldr	r3, [r4, #84]	; 0x54
   12dac:	mov	r5, r1
   12db0:	cmp	r3, r1
   12db4:	beq	12de4 <__assert_fail@plt+0x1b90>
   12db8:	ldr	r4, [r4, #156]	; 0x9c
   12dbc:	cmp	r4, #0
   12dc0:	beq	12ddc <__assert_fail@plt+0x1b88>
   12dc4:	ldr	r0, [r4]
   12dc8:	mov	r1, r5
   12dcc:	bl	12d98 <__assert_fail@plt+0x1b44>
   12dd0:	ldr	r4, [r4, #4]
   12dd4:	cmp	r4, #0
   12dd8:	bne	12dc4 <__assert_fail@plt+0x1b70>
   12ddc:	add	sp, sp, #20
   12de0:	pop	{r4, r5, r6, r7, pc}
   12de4:	ldr	r7, [pc, #76]	; 12e38 <__assert_fail@plt+0x1be4>
   12de8:	ldr	r3, [r7, #48]	; 0x30
   12dec:	cmp	r3, #0
   12df0:	bne	12e24 <__assert_fail@plt+0x1bd0>
   12df4:	mov	r6, #1
   12df8:	mov	r1, #0
   12dfc:	str	r5, [sp, #4]
   12e00:	mov	r0, r4
   12e04:	str	r1, [sp, #8]
   12e08:	str	r6, [sp]
   12e0c:	mov	r3, r6
   12e10:	mov	r2, r6
   12e14:	bl	12394 <__assert_fail@plt+0x1140>
   12e18:	str	r6, [r7, #48]	; 0x30
   12e1c:	add	sp, sp, #20
   12e20:	pop	{r4, r5, r6, r7, pc}
   12e24:	ldr	r3, [pc, #16]	; 12e3c <__assert_fail@plt+0x1be8>
   12e28:	mov	r0, #10
   12e2c:	ldr	r1, [r3]
   12e30:	bl	11080 <_IO_putc@plt>
   12e34:	b	12df4 <__assert_fail@plt+0x1ba0>
   12e38:	andeq	r5, r2, r8, lsl #3
   12e3c:	andeq	r5, r2, ip, ror r1
   12e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e44:	sub	sp, sp, #188	; 0xbc
   12e48:	ldr	r6, [pc, #260]	; 12f54 <__assert_fail@plt+0x1d00>
   12e4c:	mov	r5, r0
   12e50:	mov	r0, #168	; 0xa8
   12e54:	ldr	ip, [r6]
   12e58:	mov	r7, r1
   12e5c:	mov	sl, r2
   12e60:	str	r3, [sp, #20]
   12e64:	str	ip, [sp, #180]	; 0xb4
   12e68:	bl	110d4 <malloc@plt>
   12e6c:	subs	r4, r0, #0
   12e70:	beq	12f40 <__assert_fail@plt+0x1cec>
   12e74:	ldr	r9, [pc, #220]	; 12f58 <__assert_fail@plt+0x1d04>
   12e78:	mov	r1, r5
   12e7c:	mov	r2, #66	; 0x42
   12e80:	bl	11158 <strncpy@plt>
   12e84:	ldr	r3, [r9]
   12e88:	ldr	r1, [sp, #20]
   12e8c:	str	r3, [r4, #164]	; 0xa4
   12e90:	mov	r3, #0
   12e94:	ldr	r5, [pc, #192]	; 12f5c <__assert_fail@plt+0x1d08>
   12e98:	ldr	fp, [pc, #192]	; 12f60 <__assert_fail@plt+0x1d0c>
   12e9c:	ldr	r2, [pc, #192]	; 12f64 <__assert_fail@plt+0x1d10>
   12ea0:	add	r8, r4, #96	; 0x60
   12ea4:	str	r7, [r4, #76]	; 0x4c
   12ea8:	str	sl, [r4, #84]	; 0x54
   12eac:	str	r1, [r4, #88]	; 0x58
   12eb0:	strb	r3, [r4, #65]	; 0x41
   12eb4:	strb	r3, [r4, #152]	; 0x98
   12eb8:	str	r3, [r4, #72]	; 0x48
   12ebc:	str	r3, [r4, #68]	; 0x44
   12ec0:	str	r3, [r4, #156]	; 0x9c
   12ec4:	str	r3, [r4, #160]	; 0xa0
   12ec8:	b	12ed0 <__assert_fail@plt+0x1c7c>
   12ecc:	ldr	r2, [r5], #4
   12ed0:	mov	r3, #50	; 0x32
   12ed4:	mov	r1, r3
   12ed8:	str	r2, [sp, #8]
   12edc:	str	r7, [sp, #4]
   12ee0:	mov	r2, #1
   12ee4:	str	fp, [sp]
   12ee8:	add	r0, sp, #128	; 0x80
   12eec:	bl	11248 <__snprintf_chk@plt>
   12ef0:	add	r2, sp, #24
   12ef4:	add	r1, sp, #128	; 0x80
   12ef8:	mov	r0, #3
   12efc:	bl	111f4 <__xstat64@plt>
   12f00:	ldr	r1, [pc, #96]	; 12f68 <__assert_fail@plt+0x1d14>
   12f04:	cmp	r0, #0
   12f08:	movne	r2, #0
   12f0c:	ldrdeq	r2, [sp, #120]	; 0x78
   12f10:	movne	r3, #0
   12f14:	cmp	r5, r1
   12f18:	strd	r2, [r8], #8
   12f1c:	bne	12ecc <__assert_fail@plt+0x1c78>
   12f20:	ldr	r2, [sp, #180]	; 0xb4
   12f24:	ldr	r3, [r6]
   12f28:	str	r4, [r9]
   12f2c:	cmp	r2, r3
   12f30:	mov	r0, r4
   12f34:	bne	12f50 <__assert_fail@plt+0x1cfc>
   12f38:	add	sp, sp, #188	; 0xbc
   12f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f40:	ldr	r0, [pc, #36]	; 12f6c <__assert_fail@plt+0x1d18>
   12f44:	bl	11074 <perror@plt>
   12f48:	mov	r0, #1
   12f4c:	bl	1111c <exit@plt>
   12f50:	bl	11050 <__stack_chk_fail@plt>
   12f54:	strdeq	r4, [r2], -r8
   12f58:	andeq	r5, r2, r8, lsl #3
   12f5c:	andeq	r3, r1, r4, lsr #27
   12f60:	andeq	r4, r1, r8, asr #9
   12f64:	andeq	r4, r1, r0, asr #9
   12f68:			; <UNDEFINED> instruction: 0x00013dbc
   12f6c:	andeq	r4, r1, r4, ror r4
   12f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f74:	mov	r7, r0
   12f78:	mov	r0, #8
   12f7c:	mov	r6, r1
   12f80:	bl	110d4 <malloc@plt>
   12f84:	subs	r9, r0, #0
   12f88:	beq	1300c <__assert_fail@plt+0x1db8>
   12f8c:	ldr	r4, [r7, #156]	; 0x9c
   12f90:	str	r6, [r9]
   12f94:	cmp	r4, #0
   12f98:	add	r7, r7, #156	; 0x9c
   12f9c:	beq	13000 <__assert_fail@plt+0x1dac>
   12fa0:	ldr	r3, [pc, #116]	; 1301c <__assert_fail@plt+0x1dc8>
   12fa4:	ldr	r8, [r3, #52]	; 0x34
   12fa8:	b	12fcc <__assert_fail@plt+0x1d78>
   12fac:	ldr	r2, [r5, #76]	; 0x4c
   12fb0:	ldr	r3, [r6, #76]	; 0x4c
   12fb4:	cmp	r2, r3
   12fb8:	bgt	13000 <__assert_fail@plt+0x1dac>
   12fbc:	add	r7, r4, #4
   12fc0:	ldr	r4, [r4, #4]
   12fc4:	cmp	r4, #0
   12fc8:	beq	13000 <__assert_fail@plt+0x1dac>
   12fcc:	cmp	r8, #0
   12fd0:	ldr	r5, [r4]
   12fd4:	bne	12fac <__assert_fail@plt+0x1d58>
   12fd8:	mov	r1, r6
   12fdc:	mov	r0, r5
   12fe0:	bl	10fd8 <strcmp@plt>
   12fe4:	cmp	r0, #0
   12fe8:	bgt	13000 <__assert_fail@plt+0x1dac>
   12fec:	bne	12fbc <__assert_fail@plt+0x1d68>
   12ff0:	ldr	r2, [r5, #84]	; 0x54
   12ff4:	ldr	r3, [r6, #84]	; 0x54
   12ff8:	cmp	r2, r3
   12ffc:	bls	12fbc <__assert_fail@plt+0x1d68>
   13000:	str	r4, [r9, #4]
   13004:	str	r9, [r7]
   13008:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1300c:	ldr	r0, [pc, #12]	; 13020 <__assert_fail@plt+0x1dcc>
   13010:	bl	11074 <perror@plt>
   13014:	mov	r0, #1
   13018:	bl	1111c <exit@plt>
   1301c:	andeq	r5, r2, r8, lsl #3
   13020:	andeq	r4, r1, r4, ror r4
   13024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13028:	sub	sp, sp, #20
   1302c:	ldr	r8, [pc, #608]	; 13294 <__assert_fail@plt+0x2040>
   13030:	str	r3, [sp, #4]
   13034:	ldrb	r3, [sp, #68]	; 0x44
   13038:	ldr	r4, [r8]
   1303c:	mov	r6, r1
   13040:	cmp	r4, #0
   13044:	mov	r5, r2
   13048:	str	r3, [sp, #8]
   1304c:	bne	13060 <__assert_fail@plt+0x1e0c>
   13050:	b	13250 <__assert_fail@plt+0x1ffc>
   13054:	ldr	r4, [r4, #164]	; 0xa4
   13058:	cmp	r4, #0
   1305c:	beq	13250 <__assert_fail@plt+0x1ffc>
   13060:	ldr	r3, [r4, #76]	; 0x4c
   13064:	cmp	r6, r3
   13068:	bne	13054 <__assert_fail@plt+0x1e00>
   1306c:	mov	r1, r0
   13070:	mov	r2, #66	; 0x42
   13074:	mov	r0, r4
   13078:	bl	11158 <strncpy@plt>
   1307c:	ldr	r2, [r8, #52]	; 0x34
   13080:	mov	r3, #0
   13084:	cmp	r2, r3
   13088:	ldr	r2, [sp, #56]	; 0x38
   1308c:	strb	r3, [r4, #65]	; 0x41
   13090:	str	r2, [r4, #84]	; 0x54
   13094:	bne	130e8 <__assert_fail@plt+0x1e94>
   13098:	ldr	r3, [r4, #160]	; 0xa0
   1309c:	cmp	r3, #0
   130a0:	beq	130e8 <__assert_fail@plt+0x1e94>
   130a4:	ldr	r7, [r3, #156]	; 0x9c
   130a8:	cmp	r7, #0
   130ac:	beq	130e8 <__assert_fail@plt+0x1e94>
   130b0:	ldr	r9, [r7, #4]
   130b4:	cmp	r9, #0
   130b8:	beq	130dc <__assert_fail@plt+0x1e88>
   130bc:	ldr	sl, [r7]
   130c0:	ldr	fp, [r9]
   130c4:	mov	r0, sl
   130c8:	mov	r1, fp
   130cc:	bl	10fd8 <strcmp@plt>
   130d0:	cmp	r0, #0
   130d4:	strgt	fp, [r7]
   130d8:	strgt	sl, [r9]
   130dc:	ldr	r7, [r7, #4]
   130e0:	cmp	r7, #0
   130e4:	bne	130b0 <__assert_fail@plt+0x1e5c>
   130e8:	ldr	r3, [sp, #60]	; 0x3c
   130ec:	cmp	r3, #0
   130f0:	beq	131dc <__assert_fail@plt+0x1f88>
   130f4:	ldr	r3, [sp, #64]	; 0x40
   130f8:	cmp	r3, #0
   130fc:	mvneq	r3, #0
   13100:	streq	r3, [r4, #72]	; 0x48
   13104:	beq	131dc <__assert_fail@plt+0x1f88>
   13108:	ldr	r3, [sp, #64]	; 0x40
   1310c:	mov	r7, #0
   13110:	cmp	r3, #1
   13114:	str	r7, [r4, #72]	; 0x48
   13118:	ble	131dc <__assert_fail@plt+0x1f88>
   1311c:	sub	r1, r3, #2
   13120:	ldr	r3, [sp, #60]	; 0x3c
   13124:	add	r1, r3, r1
   13128:	sub	r3, r3, #1
   1312c:	ldrb	r2, [r3, #1]!
   13130:	cmp	r2, #0
   13134:	addeq	r7, r7, #1
   13138:	streq	r7, [r4, #72]	; 0x48
   1313c:	cmp	r1, r3
   13140:	bne	1312c <__assert_fail@plt+0x1ed8>
   13144:	cmp	r7, #0
   13148:	beq	131dc <__assert_fail@plt+0x1f88>
   1314c:	lsl	sl, r7, #2
   13150:	mov	r0, sl
   13154:	bl	110d4 <malloc@plt>
   13158:	cmp	r0, #0
   1315c:	mov	fp, r0
   13160:	str	r0, [r4, #68]	; 0x44
   13164:	beq	13284 <__assert_fail@plt+0x2030>
   13168:	ldr	r0, [sp, #60]	; 0x3c
   1316c:	bl	11128 <strlen@plt>
   13170:	ldr	r3, [sp, #64]	; 0x40
   13174:	add	r9, r0, #1
   13178:	sub	r2, r3, r9
   1317c:	ldr	r3, [sp, #60]	; 0x3c
   13180:	mov	r0, r2
   13184:	str	r2, [sp, #12]
   13188:	add	r9, r3, r9
   1318c:	bl	110d4 <malloc@plt>
   13190:	cmp	r0, #0
   13194:	str	r0, [fp]
   13198:	beq	13284 <__assert_fail@plt+0x2030>
   1319c:	mov	r1, r9
   131a0:	ldr	r2, [sp, #12]
   131a4:	bl	1102c <memcpy@plt>
   131a8:	cmp	r7, #1
   131ac:	mov	r9, r0
   131b0:	beq	131dc <__assert_fail@plt+0x1f88>
   131b4:	mov	r7, fp
   131b8:	sub	fp, sl, #4
   131bc:	add	fp, r7, fp
   131c0:	mov	r0, r9
   131c4:	bl	11128 <strlen@plt>
   131c8:	add	r0, r0, #1
   131cc:	add	r9, r9, r0
   131d0:	str	r9, [r7, #4]!
   131d4:	cmp	r7, fp
   131d8:	bne	131c0 <__assert_fail@plt+0x1f6c>
   131dc:	ldr	r3, [sp, #8]
   131e0:	cmp	r6, r5
   131e4:	moveq	r5, #0
   131e8:	cmp	r3, #0
   131ec:	ldr	r3, [sp, #4]
   131f0:	ldr	r7, [r8]
   131f4:	str	r3, [r4, #80]	; 0x50
   131f8:	ldrbne	r3, [r4, #152]	; 0x98
   131fc:	orrne	r3, r3, #2
   13200:	strbne	r3, [r4, #152]	; 0x98
   13204:	cmp	r7, #0
   13208:	bne	1321c <__assert_fail@plt+0x1fc8>
   1320c:	b	13268 <__assert_fail@plt+0x2014>
   13210:	ldr	r7, [r7, #164]	; 0xa4
   13214:	cmp	r7, #0
   13218:	beq	13268 <__assert_fail@plt+0x2014>
   1321c:	ldr	r3, [r7, #76]	; 0x4c
   13220:	cmp	r5, r3
   13224:	bne	13210 <__assert_fail@plt+0x1fbc>
   13228:	cmp	r6, #0
   1322c:	bne	13238 <__assert_fail@plt+0x1fe4>
   13230:	add	sp, sp, #20
   13234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13238:	mov	r1, r4
   1323c:	mov	r0, r7
   13240:	bl	12f70 <__assert_fail@plt+0x1d1c>
   13244:	str	r7, [r4, #160]	; 0xa0
   13248:	add	sp, sp, #20
   1324c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13250:	ldr	r3, [sp, #72]	; 0x48
   13254:	ldr	r2, [sp, #56]	; 0x38
   13258:	mov	r1, r6
   1325c:	bl	12e40 <__assert_fail@plt+0x1bec>
   13260:	mov	r4, r0
   13264:	b	130e8 <__assert_fail@plt+0x1e94>
   13268:	mov	r1, r5
   1326c:	ldr	r3, [sp, #72]	; 0x48
   13270:	mov	r2, #0
   13274:	ldr	r0, [pc, #28]	; 13298 <__assert_fail@plt+0x2044>
   13278:	bl	12e40 <__assert_fail@plt+0x1bec>
   1327c:	mov	r7, r0
   13280:	b	13228 <__assert_fail@plt+0x1fd4>
   13284:	ldr	r0, [pc, #16]	; 1329c <__assert_fail@plt+0x2048>
   13288:	bl	11074 <perror@plt>
   1328c:	mov	r0, #1
   13290:	bl	1111c <exit@plt>
   13294:	andeq	r5, r2, r8, lsl #3
   13298:	ldrdeq	r4, [r1], -r8
   1329c:	andeq	r4, r1, r4, ror r4
   132a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a4:	sub	sp, sp, #16384	; 0x4000
   132a8:	sub	sp, sp, #204	; 0xcc
   132ac:	ldr	r3, [pc, #1836]	; 139e0 <__assert_fail@plt+0x278c>
   132b0:	mov	r2, #0
   132b4:	str	r2, [sp, #76]	; 0x4c
   132b8:	add	r2, sp, #16384	; 0x4000
   132bc:	ldr	r3, [r3]
   132c0:	add	r2, r2, #196	; 0xc4
   132c4:	str	r3, [r2]
   132c8:	bl	10fcc <is_selinux_enabled@plt>
   132cc:	ldr	r3, [pc, #1808]	; 139e4 <__assert_fail@plt+0x2790>
   132d0:	ldr	r2, [r3, #4]
   132d4:	cmp	r2, #0
   132d8:	ldrne	r3, [r3, #8]
   132dc:	ldreq	r3, [pc, #1796]	; 139e8 <__assert_fail@plt+0x2794>
   132e0:	addne	r3, r3, #1
   132e4:	str	r3, [sp, #28]
   132e8:	ldr	r3, [pc, #1788]	; 139ec <__assert_fail@plt+0x2798>
   132ec:	ldr	r3, [r3, #28]
   132f0:	cmp	r3, #0
   132f4:	str	r0, [sp, #24]
   132f8:	beq	13654 <__assert_fail@plt+0x2400>
   132fc:	ldr	r0, [sp, #28]
   13300:	bl	110d4 <malloc@plt>
   13304:	subs	r3, r0, #0
   13308:	str	r3, [sp, #32]
   1330c:	beq	139d0 <__assert_fail@plt+0x277c>
   13310:	ldr	sl, [pc, #1752]	; 139f0 <__assert_fail@plt+0x279c>
   13314:	mov	r0, sl
   13318:	bl	110b0 <opendir@plt>
   1331c:	subs	r8, r0, #0
   13320:	movne	r9, #1
   13324:	ldrne	r7, [pc, #1736]	; 139f4 <__assert_fail@plt+0x27a0>
   13328:	beq	139bc <__assert_fail@plt+0x2768>
   1332c:	mov	r0, r8
   13330:	bl	111d0 <readdir64@plt>
   13334:	cmp	r0, #0
   13338:	beq	1349c <__assert_fail@plt+0x2248>
   1333c:	add	r4, r0, #19
   13340:	mov	r0, r4
   13344:	mov	r2, #10
   13348:	add	r1, sp, #64	; 0x40
   1334c:	bl	10fe4 <strtol@plt>
   13350:	ldr	r3, [sp, #64]	; 0x40
   13354:	cmp	r4, r3
   13358:	mov	r5, r0
   1335c:	beq	1332c <__assert_fail@plt+0x20d8>
   13360:	ldrb	r3, [r3]
   13364:	cmp	r3, #0
   13368:	bne	1332c <__assert_fail@plt+0x20d8>
   1336c:	mov	r0, r4
   13370:	bl	11128 <strlen@plt>
   13374:	add	r0, r0, #15
   13378:	bl	110d4 <malloc@plt>
   1337c:	subs	fp, r0, #0
   13380:	beq	13970 <__assert_fail@plt+0x271c>
   13384:	ldr	r3, [pc, #1644]	; 139f8 <__assert_fail@plt+0x27a4>
   13388:	mvn	r2, #0
   1338c:	mov	r1, #1
   13390:	str	r5, [sp, #4]
   13394:	str	sl, [sp]
   13398:	bl	11140 <__sprintf_chk@plt>
   1339c:	mov	r1, r7
   133a0:	mov	r0, fp
   133a4:	bl	111dc <fopen64@plt>
   133a8:	subs	r6, r0, #0
   133ac:	beq	13484 <__assert_fail@plt+0x2230>
   133b0:	ldr	r3, [pc, #1604]	; 139fc <__assert_fail@plt+0x27a8>
   133b4:	str	r5, [sp, #4]
   133b8:	str	sl, [sp]
   133bc:	mvn	r2, #0
   133c0:	mov	r1, #1
   133c4:	mov	r0, fp
   133c8:	bl	11140 <__sprintf_chk@plt>
   133cc:	ldr	r3, [sp, #24]
   133d0:	cmp	r3, #0
   133d4:	ble	133ec <__assert_fail@plt+0x2198>
   133d8:	add	r1, sp, #76	; 0x4c
   133dc:	mov	r0, r5
   133e0:	bl	11218 <getpidcon@plt>
   133e4:	cmp	r0, #0
   133e8:	blt	13978 <__assert_fail@plt+0x2724>
   133ec:	add	r2, sp, #80	; 0x50
   133f0:	mov	r1, fp
   133f4:	mov	r0, #3
   133f8:	bl	111f4 <__xstat64@plt>
   133fc:	cmp	r0, #0
   13400:	blt	13978 <__assert_fail@plt+0x2724>
   13404:	mov	r3, r6
   13408:	mov	r2, #8192	; 0x2000
   1340c:	mov	r1, #1
   13410:	add	r0, sp, #188	; 0xbc
   13414:	bl	110a4 <fread@plt>
   13418:	mov	r4, r0
   1341c:	mov	r0, r6
   13420:	bl	11020 <ferror@plt>
   13424:	subs	r9, r0, #0
   13428:	bne	13478 <__assert_fail@plt+0x2224>
   1342c:	add	r3, sp, #200	; 0xc8
   13430:	add	r4, r3, r4
   13434:	add	r0, sp, #188	; 0xbc
   13438:	mov	r1, #40	; 0x28
   1343c:	strb	r9, [r4, #-12]
   13440:	bl	11134 <strchr@plt>
   13444:	subs	r4, r0, #0
   13448:	beq	13478 <__assert_fail@plt+0x2224>
   1344c:	mov	r1, #41	; 0x29
   13450:	bl	111a0 <strrchr@plt>
   13454:	cmp	r0, #0
   13458:	beq	13478 <__assert_fail@plt+0x2224>
   1345c:	add	r3, sp, #72	; 0x48
   13460:	strb	r9, [r0], #2
   13464:	add	r2, sp, #68	; 0x44
   13468:	ldr	r1, [pc, #1424]	; 13a00 <__assert_fail@plt+0x27ac>
   1346c:	bl	111c4 <sscanf@plt>
   13470:	cmp	r0, #2
   13474:	beq	13580 <__assert_fail@plt+0x232c>
   13478:	mov	r0, r6
   1347c:	bl	11188 <fclose@plt>
   13480:	mov	r9, #0
   13484:	mov	r0, fp
   13488:	bl	11008 <free@plt>
   1348c:	mov	r0, r8
   13490:	bl	111d0 <readdir64@plt>
   13494:	cmp	r0, #0
   13498:	bne	1333c <__assert_fail@plt+0x20e8>
   1349c:	mov	r0, r8
   134a0:	bl	1123c <closedir@plt>
   134a4:	ldr	r3, [pc, #1344]	; 139ec <__assert_fail@plt+0x2798>
   134a8:	ldr	r4, [r3]
   134ac:	cmp	r4, #0
   134b0:	beq	134e0 <__assert_fail@plt+0x228c>
   134b4:	ldr	r3, [r4, #76]	; 0x4c
   134b8:	mov	r5, r4
   134bc:	cmp	r3, #1
   134c0:	bne	134d4 <__assert_fail@plt+0x2280>
   134c4:	b	13564 <__assert_fail@plt+0x2310>
   134c8:	ldr	r3, [r5, #76]	; 0x4c
   134cc:	cmp	r3, #1
   134d0:	beq	13564 <__assert_fail@plt+0x2310>
   134d4:	ldr	r5, [r5, #164]	; 0xa4
   134d8:	cmp	r5, #0
   134dc:	bne	134c8 <__assert_fail@plt+0x2274>
   134e0:	ldr	r3, [sp, #76]	; 0x4c
   134e4:	mov	r2, #0
   134e8:	mov	r1, #1
   134ec:	ldr	r0, [pc, #1296]	; 13a04 <__assert_fail@plt+0x27b0>
   134f0:	bl	12e40 <__assert_fail@plt+0x1bec>
   134f4:	ldr	r3, [pc, #1264]	; 139ec <__assert_fail@plt+0x2798>
   134f8:	ldr	r4, [r3]
   134fc:	cmp	r4, #0
   13500:	mov	r5, r0
   13504:	bne	13564 <__assert_fail@plt+0x2310>
   13508:	ldr	r3, [pc, #1244]	; 139ec <__assert_fail@plt+0x2798>
   1350c:	ldr	r3, [r3, #28]
   13510:	cmp	r3, #0
   13514:	bne	13890 <__assert_fail@plt+0x263c>
   13518:	cmp	r9, #0
   1351c:	bne	13988 <__assert_fail@plt+0x2734>
   13520:	add	r3, sp, #16384	; 0x4000
   13524:	add	r3, r3, #196	; 0xc4
   13528:	ldr	r2, [r3]
   1352c:	ldr	r3, [pc, #1196]	; 139e0 <__assert_fail@plt+0x278c>
   13530:	ldr	r3, [r3]
   13534:	cmp	r2, r3
   13538:	bne	139cc <__assert_fail@plt+0x2778>
   1353c:	add	sp, sp, #16384	; 0x4000
   13540:	add	sp, sp, #204	; 0xcc
   13544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13548:	mov	r1, r4
   1354c:	mov	r0, r5
   13550:	bl	12f70 <__assert_fail@plt+0x1d1c>
   13554:	str	r5, [r4, #160]	; 0xa0
   13558:	ldr	r4, [r4, #164]	; 0xa4
   1355c:	cmp	r4, #0
   13560:	beq	13508 <__assert_fail@plt+0x22b4>
   13564:	ldr	r3, [r4, #76]	; 0x4c
   13568:	cmp	r3, #1
   1356c:	bls	13558 <__assert_fail@plt+0x2304>
   13570:	ldr	r3, [r4, #160]	; 0xa0
   13574:	cmp	r3, #0
   13578:	bne	13558 <__assert_fail@plt+0x2304>
   1357c:	b	13548 <__assert_fail@plt+0x22f4>
   13580:	ldr	r3, [pc, #1124]	; 139ec <__assert_fail@plt+0x2798>
   13584:	add	r2, r4, #1
   13588:	str	r2, [sp, #36]	; 0x24
   1358c:	ldr	r3, [r3, #56]	; 0x38
   13590:	cmp	r3, #0
   13594:	beq	1368c <__assert_fail@plt+0x2438>
   13598:	ldr	r3, [pc, #1100]	; 139ec <__assert_fail@plt+0x2798>
   1359c:	ldr	r3, [r3, #28]
   135a0:	cmp	r3, #0
   135a4:	beq	1365c <__assert_fail@plt+0x2408>
   135a8:	ldr	r3, [pc, #1112]	; 13a08 <__assert_fail@plt+0x27b4>
   135ac:	mvn	r2, #0
   135b0:	mov	r1, #1
   135b4:	str	r5, [sp, #4]
   135b8:	str	sl, [sp]
   135bc:	mov	r0, fp
   135c0:	bl	11140 <__sprintf_chk@plt>
   135c4:	mov	r1, #0
   135c8:	mov	r0, fp
   135cc:	bl	110bc <open64@plt>
   135d0:	subs	r4, r0, #0
   135d4:	blt	138a4 <__assert_fail@plt+0x2650>
   135d8:	ldr	r2, [sp, #28]
   135dc:	ldr	r1, [sp, #32]
   135e0:	bl	10ffc <read@plt>
   135e4:	subs	r2, r0, #0
   135e8:	blt	1389c <__assert_fail@plt+0x2648>
   135ec:	mov	r0, r4
   135f0:	str	r2, [sp, #40]	; 0x28
   135f4:	bl	11230 <close@plt>
   135f8:	ldr	r2, [sp, #40]	; 0x28
   135fc:	ldr	r3, [sp, #28]
   13600:	ldr	ip, [sp, #76]	; 0x4c
   13604:	cmp	r3, r2
   13608:	suble	r2, r2, #1
   1360c:	cmp	r2, #0
   13610:	movne	r3, #0
   13614:	ldrne	r1, [sp, #32]
   13618:	ldr	lr, [sp, #104]	; 0x68
   1361c:	ldr	r0, [sp, #36]	; 0x24
   13620:	strbne	r3, [r1, r2]
   13624:	addne	r2, r2, #1
   13628:	str	r2, [sp, #8]
   1362c:	ldr	r2, [sp, #32]
   13630:	mov	r3, #0
   13634:	str	r2, [sp, #4]
   13638:	str	r3, [sp, #12]
   1363c:	mov	r1, r5
   13640:	str	ip, [sp, #16]
   13644:	str	lr, [sp]
   13648:	ldrd	r2, [sp, #68]	; 0x44
   1364c:	bl	13024 <__assert_fail@plt+0x1dd0>
   13650:	b	13478 <__assert_fail@plt+0x2224>
   13654:	str	r3, [sp, #32]
   13658:	b	13310 <__assert_fail@plt+0x20bc>
   1365c:	ldr	r2, [sp, #104]	; 0x68
   13660:	ldr	ip, [sp, #76]	; 0x4c
   13664:	str	r3, [sp, #12]
   13668:	str	r3, [sp, #8]
   1366c:	str	r3, [sp, #4]
   13670:	str	r2, [sp]
   13674:	mov	r1, r5
   13678:	ldr	r0, [sp, #36]	; 0x24
   1367c:	str	ip, [sp, #16]
   13680:	ldrd	r2, [sp, #68]	; 0x44
   13684:	bl	13024 <__assert_fail@plt+0x1dd0>
   13688:	b	13478 <__assert_fail@plt+0x2224>
   1368c:	mov	r0, fp
   13690:	bl	11128 <strlen@plt>
   13694:	add	r0, r0, #10
   13698:	bl	110d4 <malloc@plt>
   1369c:	subs	r3, r0, #0
   136a0:	mov	r4, r3
   136a4:	str	r3, [sp, #48]	; 0x30
   136a8:	beq	13970 <__assert_fail@plt+0x271c>
   136ac:	ldr	r3, [pc, #856]	; 13a0c <__assert_fail@plt+0x27b8>
   136b0:	mvn	r2, #0
   136b4:	mov	r1, #1
   136b8:	str	fp, [sp]
   136bc:	bl	11140 <__sprintf_chk@plt>
   136c0:	mov	r0, r4
   136c4:	bl	110b0 <opendir@plt>
   136c8:	subs	r3, r0, #0
   136cc:	str	r3, [sp, #40]	; 0x28
   136d0:	strne	r9, [sp, #56]	; 0x38
   136d4:	bne	1385c <__assert_fail@plt+0x2608>
   136d8:	ldr	r0, [sp, #48]	; 0x30
   136dc:	bl	11008 <free@plt>
   136e0:	b	13598 <__assert_fail@plt+0x2344>
   136e4:	mov	r0, #67	; 0x43
   136e8:	bl	110d4 <malloc@plt>
   136ec:	subs	r3, r0, #0
   136f0:	str	r3, [sp, #44]	; 0x2c
   136f4:	beq	13970 <__assert_fail@plt+0x271c>
   136f8:	ldr	r3, [pc, #748]	; 139ec <__assert_fail@plt+0x2798>
   136fc:	ldr	r3, [r3, #60]	; 0x3c
   13700:	cmp	r3, #0
   13704:	beq	138f0 <__assert_fail@plt+0x269c>
   13708:	ldr	r3, [pc, #768]	; 13a10 <__assert_fail@plt+0x27bc>
   1370c:	mov	r1, #0
   13710:	mov	r2, #1
   13714:	str	r3, [sp]
   13718:	mov	r0, r1
   1371c:	mvn	r3, #0
   13720:	str	r4, [sp, #12]
   13724:	str	r5, [sp, #8]
   13728:	str	sl, [sp, #4]
   1372c:	bl	11248 <__snprintf_chk@plt>
   13730:	add	r9, r0, #1
   13734:	mov	r0, r9
   13738:	bl	110d4 <malloc@plt>
   1373c:	subs	r2, r0, #0
   13740:	str	r2, [sp, #52]	; 0x34
   13744:	beq	13970 <__assert_fail@plt+0x271c>
   13748:	ldr	r3, [pc, #704]	; 13a10 <__assert_fail@plt+0x27bc>
   1374c:	str	r4, [sp, #12]
   13750:	str	r3, [sp]
   13754:	str	r5, [sp, #8]
   13758:	str	sl, [sp, #4]
   1375c:	mvn	r3, #0
   13760:	mov	r2, #1
   13764:	mov	r1, r9
   13768:	bl	11248 <__snprintf_chk@plt>
   1376c:	cmp	r9, r0
   13770:	bls	13964 <__assert_fail@plt+0x2710>
   13774:	mov	r1, r7
   13778:	ldr	r0, [sp, #52]	; 0x34
   1377c:	bl	111dc <fopen64@plt>
   13780:	subs	r9, r0, #0
   13784:	beq	137c0 <__assert_fail@plt+0x256c>
   13788:	add	r0, sp, #8384	; 0x20c0
   1378c:	mov	r2, r9
   13790:	mov	r1, #8192	; 0x2000
   13794:	bl	11014 <fgets@plt>
   13798:	cmp	r0, #0
   1379c:	beq	137b8 <__assert_fail@plt+0x2564>
   137a0:	add	r0, sp, #8384	; 0x20c0
   137a4:	mov	r1, #40	; 0x28
   137a8:	bl	11134 <strchr@plt>
   137ac:	subs	r2, r0, #0
   137b0:	str	r2, [sp, #60]	; 0x3c
   137b4:	bne	13914 <__assert_fail@plt+0x26c0>
   137b8:	mov	r0, r9
   137bc:	bl	11188 <fclose@plt>
   137c0:	ldr	r0, [sp, #52]	; 0x34
   137c4:	bl	11008 <free@plt>
   137c8:	ldr	r2, [sp, #36]	; 0x24
   137cc:	mov	r3, #64	; 0x40
   137d0:	str	r2, [sp, #4]
   137d4:	str	r3, [sp]
   137d8:	mov	r2, #67	; 0x43
   137dc:	ldr	r3, [pc, #560]	; 13a14 <__assert_fail@plt+0x27c0>
   137e0:	mov	r1, #1
   137e4:	ldr	r0, [sp, #44]	; 0x2c
   137e8:	bl	11140 <__sprintf_chk@plt>
   137ec:	ldr	r3, [pc, #504]	; 139ec <__assert_fail@plt+0x2798>
   137f0:	ldr	r9, [sp, #72]	; 0x48
   137f4:	ldr	r2, [sp, #76]	; 0x4c
   137f8:	ldr	r1, [r3, #28]
   137fc:	ldr	r3, [sp, #104]	; 0x68
   13800:	cmp	r1, #0
   13804:	beq	138c0 <__assert_fail@plt+0x266c>
   13808:	ldr	r0, [sp, #44]	; 0x2c
   1380c:	str	r2, [sp, #60]	; 0x3c
   13810:	str	r3, [sp, #52]	; 0x34
   13814:	bl	11128 <strlen@plt>
   13818:	mov	ip, #1
   1381c:	ldr	r2, [sp, #60]	; 0x3c
   13820:	ldr	lr, [sp, #44]	; 0x2c
   13824:	ldr	r3, [sp, #52]	; 0x34
   13828:	str	r2, [sp, #16]
   1382c:	str	r3, [sp]
   13830:	str	lr, [sp, #4]
   13834:	mov	r3, r9
   13838:	mov	r1, r4
   1383c:	str	ip, [sp, #12]
   13840:	mov	r2, r5
   13844:	add	r0, r0, ip
   13848:	str	r0, [sp, #8]
   1384c:	mov	r0, lr
   13850:	bl	13024 <__assert_fail@plt+0x1dd0>
   13854:	ldr	r0, [sp, #44]	; 0x2c
   13858:	bl	11008 <free@plt>
   1385c:	ldr	r0, [sp, #40]	; 0x28
   13860:	bl	111d0 <readdir64@plt>
   13864:	cmp	r0, #0
   13868:	beq	138b0 <__assert_fail@plt+0x265c>
   1386c:	add	r0, r0, #19
   13870:	mov	r2, #10
   13874:	mov	r1, #0
   13878:	bl	10fe4 <strtol@plt>
   1387c:	cmp	r5, r0
   13880:	cmpne	r0, #0
   13884:	mov	r4, r0
   13888:	beq	1385c <__assert_fail@plt+0x2608>
   1388c:	b	136e4 <__assert_fail@plt+0x2490>
   13890:	ldr	r0, [sp, #32]
   13894:	bl	11008 <free@plt>
   13898:	b	13518 <__assert_fail@plt+0x22c4>
   1389c:	mov	r0, r4
   138a0:	bl	11230 <close@plt>
   138a4:	mov	r0, r6
   138a8:	bl	11188 <fclose@plt>
   138ac:	b	13484 <__assert_fail@plt+0x2230>
   138b0:	ldr	r0, [sp, #40]	; 0x28
   138b4:	ldr	r9, [sp, #56]	; 0x38
   138b8:	bl	1123c <closedir@plt>
   138bc:	b	136d8 <__assert_fail@plt+0x2484>
   138c0:	mov	r0, #1
   138c4:	str	r2, [sp, #16]
   138c8:	str	r1, [sp, #8]
   138cc:	str	r1, [sp, #4]
   138d0:	str	r3, [sp]
   138d4:	str	r0, [sp, #12]
   138d8:	mov	r3, r9
   138dc:	mov	r1, r4
   138e0:	mov	r2, r5
   138e4:	ldr	r0, [sp, #44]	; 0x2c
   138e8:	bl	13024 <__assert_fail@plt+0x1dd0>
   138ec:	b	13854 <__assert_fail@plt+0x2600>
   138f0:	ldr	r2, [sp, #36]	; 0x24
   138f4:	mov	r3, #64	; 0x40
   138f8:	str	r2, [sp, #4]
   138fc:	str	r3, [sp]
   13900:	mov	r2, #67	; 0x43
   13904:	ldr	r3, [pc, #264]	; 13a14 <__assert_fail@plt+0x27c0>
   13908:	mov	r1, #1
   1390c:	bl	11140 <__sprintf_chk@plt>
   13910:	b	137ec <__assert_fail@plt+0x2598>
   13914:	mov	r1, #41	; 0x29
   13918:	bl	111a0 <strrchr@plt>
   1391c:	ldr	r2, [sp, #60]	; 0x3c
   13920:	cmp	r0, #0
   13924:	beq	137b8 <__assert_fail@plt+0x2564>
   13928:	add	r2, r2, #1
   1392c:	mov	r1, #64	; 0x40
   13930:	mov	r3, #0
   13934:	strb	r3, [r0]
   13938:	stm	sp, {r1, r2}
   1393c:	ldr	r3, [pc, #208]	; 13a14 <__assert_fail@plt+0x27c0>
   13940:	mov	r2, #67	; 0x43
   13944:	mov	r1, #1
   13948:	ldr	r0, [sp, #44]	; 0x2c
   1394c:	bl	11140 <__sprintf_chk@plt>
   13950:	mov	r0, r9
   13954:	bl	11188 <fclose@plt>
   13958:	ldr	r0, [sp, #52]	; 0x34
   1395c:	bl	11008 <free@plt>
   13960:	b	137ec <__assert_fail@plt+0x2598>
   13964:	ldr	r0, [pc, #172]	; 13a18 <__assert_fail@plt+0x27c4>
   13968:	bl	11074 <perror@plt>
   1396c:	b	13774 <__assert_fail@plt+0x2520>
   13970:	mov	r0, #2
   13974:	bl	1111c <exit@plt>
   13978:	mov	r0, fp
   1397c:	bl	11074 <perror@plt>
   13980:	mov	r0, #1
   13984:	bl	1111c <exit@plt>
   13988:	ldr	r3, [pc, #140]	; 13a1c <__assert_fail@plt+0x27c8>
   1398c:	mov	r2, #5
   13990:	ldr	r1, [pc, #136]	; 13a20 <__assert_fail@plt+0x27cc>
   13994:	mov	r0, #0
   13998:	ldr	r4, [r3]
   1399c:	bl	11044 <dcgettext@plt>
   139a0:	ldr	r3, [pc, #72]	; 139f0 <__assert_fail@plt+0x279c>
   139a4:	mov	r1, #1
   139a8:	mov	r2, r0
   139ac:	mov	r0, r4
   139b0:	bl	11170 <__fprintf_chk@plt>
   139b4:	mov	r0, #1
   139b8:	bl	1111c <exit@plt>
   139bc:	mov	r0, sl
   139c0:	bl	11074 <perror@plt>
   139c4:	mov	r0, #1
   139c8:	bl	1111c <exit@plt>
   139cc:	bl	11050 <__stack_chk_fail@plt>
   139d0:	ldr	r0, [pc, #76]	; 13a24 <__assert_fail@plt+0x27d0>
   139d4:	bl	11074 <perror@plt>
   139d8:	mov	r0, #1
   139dc:	bl	1111c <exit@plt>
   139e0:	strdeq	r4, [r2], -r8
   139e4:	andeq	r5, r2, r4, lsl #2
   139e8:	andeq	r2, r0, r1
   139ec:	andeq	r5, r2, r8, lsl #3
   139f0:	ldrdeq	r4, [r1], -ip
   139f4:	strdeq	r4, [r1], -r0
   139f8:	andeq	r4, r1, r4, ror #9
   139fc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a00:	strdeq	r4, [r1], -ip
   13a04:	ldrdeq	r4, [r1], -r8
   13a08:	andeq	r4, r1, r8, asr #10
   13a0c:	andeq	r4, r1, r8, lsl #10
   13a10:	andeq	r4, r1, r8, lsl r5
   13a14:	andeq	r4, r1, r0, lsl r5
   13a18:	andeq	r4, r1, ip, lsr #10
   13a1c:	andeq	r5, r2, r0, ror r1
   13a20:	andeq	r4, r1, r8, asr r5
   13a24:	andeq	r4, r1, r4, ror r4
   13a28:	cmp	r0, #6
   13a2c:	ldrls	r3, [pc, #12]	; 13a40 <__assert_fail@plt+0x27ec>
   13a30:	addls	r3, r3, r0, lsl #2
   13a34:	ldrls	r0, [r3, #12]
   13a38:	movhi	r0, #0
   13a3c:	bx	lr
   13a40:	muleq	r1, r4, sp
   13a44:	push	{r4, r5, r6, lr}
   13a48:	mov	r2, #5
   13a4c:	ldr	r4, [pc, #108]	; 13ac0 <__assert_fail@plt+0x286c>
   13a50:	ldr	r1, [pc, #108]	; 13ac4 <__assert_fail@plt+0x2870>
   13a54:	mov	r0, #0
   13a58:	ldr	r5, [r4]
   13a5c:	bl	11044 <dcgettext@plt>
   13a60:	ldr	r3, [pc, #96]	; 13ac8 <__assert_fail@plt+0x2874>
   13a64:	mov	r1, #1
   13a68:	mov	r2, r0
   13a6c:	mov	r0, r5
   13a70:	bl	11170 <__fprintf_chk@plt>
   13a74:	mov	r2, #5
   13a78:	ldr	r1, [pc, #76]	; 13acc <__assert_fail@plt+0x2878>
   13a7c:	mov	r0, #0
   13a80:	ldr	r5, [r4]
   13a84:	bl	11044 <dcgettext@plt>
   13a88:	mov	r1, #1
   13a8c:	mov	r2, r0
   13a90:	mov	r0, r5
   13a94:	bl	11170 <__fprintf_chk@plt>
   13a98:	mov	r2, #5
   13a9c:	ldr	r1, [pc, #44]	; 13ad0 <__assert_fail@plt+0x287c>
   13aa0:	mov	r0, #0
   13aa4:	ldr	r4, [r4]
   13aa8:	bl	11044 <dcgettext@plt>
   13aac:	mov	r1, #1
   13ab0:	mov	r2, r0
   13ab4:	mov	r0, r4
   13ab8:	pop	{r4, r5, r6, lr}
   13abc:	b	11170 <__fprintf_chk@plt>
   13ac0:	andeq	r5, r2, r0, ror r1
   13ac4:	andeq	r4, r1, r8, ror r5
   13ac8:	andeq	r4, r1, ip, lsl #11
   13acc:	muleq	r1, r4, r5
   13ad0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ad4:	cmp	r1, #0
   13ad8:	beq	13ce4 <__assert_fail@plt+0x2a90>
   13adc:	eor	ip, r0, r1
   13ae0:	rsbmi	r1, r1, #0
   13ae4:	subs	r2, r1, #1
   13ae8:	beq	13cb0 <__assert_fail@plt+0x2a5c>
   13aec:	movs	r3, r0
   13af0:	rsbmi	r3, r0, #0
   13af4:	cmp	r3, r1
   13af8:	bls	13cbc <__assert_fail@plt+0x2a68>
   13afc:	tst	r1, r2
   13b00:	beq	13ccc <__assert_fail@plt+0x2a78>
   13b04:	clz	r2, r3
   13b08:	clz	r0, r1
   13b0c:	sub	r2, r0, r2
   13b10:	rsbs	r2, r2, #31
   13b14:	addne	r2, r2, r2, lsl #1
   13b18:	mov	r0, #0
   13b1c:	addne	pc, pc, r2, lsl #2
   13b20:	nop			; (mov r0, r0)
   13b24:	cmp	r3, r1, lsl #31
   13b28:	adc	r0, r0, r0
   13b2c:	subcs	r3, r3, r1, lsl #31
   13b30:	cmp	r3, r1, lsl #30
   13b34:	adc	r0, r0, r0
   13b38:	subcs	r3, r3, r1, lsl #30
   13b3c:	cmp	r3, r1, lsl #29
   13b40:	adc	r0, r0, r0
   13b44:	subcs	r3, r3, r1, lsl #29
   13b48:	cmp	r3, r1, lsl #28
   13b4c:	adc	r0, r0, r0
   13b50:	subcs	r3, r3, r1, lsl #28
   13b54:	cmp	r3, r1, lsl #27
   13b58:	adc	r0, r0, r0
   13b5c:	subcs	r3, r3, r1, lsl #27
   13b60:	cmp	r3, r1, lsl #26
   13b64:	adc	r0, r0, r0
   13b68:	subcs	r3, r3, r1, lsl #26
   13b6c:	cmp	r3, r1, lsl #25
   13b70:	adc	r0, r0, r0
   13b74:	subcs	r3, r3, r1, lsl #25
   13b78:	cmp	r3, r1, lsl #24
   13b7c:	adc	r0, r0, r0
   13b80:	subcs	r3, r3, r1, lsl #24
   13b84:	cmp	r3, r1, lsl #23
   13b88:	adc	r0, r0, r0
   13b8c:	subcs	r3, r3, r1, lsl #23
   13b90:	cmp	r3, r1, lsl #22
   13b94:	adc	r0, r0, r0
   13b98:	subcs	r3, r3, r1, lsl #22
   13b9c:	cmp	r3, r1, lsl #21
   13ba0:	adc	r0, r0, r0
   13ba4:	subcs	r3, r3, r1, lsl #21
   13ba8:	cmp	r3, r1, lsl #20
   13bac:	adc	r0, r0, r0
   13bb0:	subcs	r3, r3, r1, lsl #20
   13bb4:	cmp	r3, r1, lsl #19
   13bb8:	adc	r0, r0, r0
   13bbc:	subcs	r3, r3, r1, lsl #19
   13bc0:	cmp	r3, r1, lsl #18
   13bc4:	adc	r0, r0, r0
   13bc8:	subcs	r3, r3, r1, lsl #18
   13bcc:	cmp	r3, r1, lsl #17
   13bd0:	adc	r0, r0, r0
   13bd4:	subcs	r3, r3, r1, lsl #17
   13bd8:	cmp	r3, r1, lsl #16
   13bdc:	adc	r0, r0, r0
   13be0:	subcs	r3, r3, r1, lsl #16
   13be4:	cmp	r3, r1, lsl #15
   13be8:	adc	r0, r0, r0
   13bec:	subcs	r3, r3, r1, lsl #15
   13bf0:	cmp	r3, r1, lsl #14
   13bf4:	adc	r0, r0, r0
   13bf8:	subcs	r3, r3, r1, lsl #14
   13bfc:	cmp	r3, r1, lsl #13
   13c00:	adc	r0, r0, r0
   13c04:	subcs	r3, r3, r1, lsl #13
   13c08:	cmp	r3, r1, lsl #12
   13c0c:	adc	r0, r0, r0
   13c10:	subcs	r3, r3, r1, lsl #12
   13c14:	cmp	r3, r1, lsl #11
   13c18:	adc	r0, r0, r0
   13c1c:	subcs	r3, r3, r1, lsl #11
   13c20:	cmp	r3, r1, lsl #10
   13c24:	adc	r0, r0, r0
   13c28:	subcs	r3, r3, r1, lsl #10
   13c2c:	cmp	r3, r1, lsl #9
   13c30:	adc	r0, r0, r0
   13c34:	subcs	r3, r3, r1, lsl #9
   13c38:	cmp	r3, r1, lsl #8
   13c3c:	adc	r0, r0, r0
   13c40:	subcs	r3, r3, r1, lsl #8
   13c44:	cmp	r3, r1, lsl #7
   13c48:	adc	r0, r0, r0
   13c4c:	subcs	r3, r3, r1, lsl #7
   13c50:	cmp	r3, r1, lsl #6
   13c54:	adc	r0, r0, r0
   13c58:	subcs	r3, r3, r1, lsl #6
   13c5c:	cmp	r3, r1, lsl #5
   13c60:	adc	r0, r0, r0
   13c64:	subcs	r3, r3, r1, lsl #5
   13c68:	cmp	r3, r1, lsl #4
   13c6c:	adc	r0, r0, r0
   13c70:	subcs	r3, r3, r1, lsl #4
   13c74:	cmp	r3, r1, lsl #3
   13c78:	adc	r0, r0, r0
   13c7c:	subcs	r3, r3, r1, lsl #3
   13c80:	cmp	r3, r1, lsl #2
   13c84:	adc	r0, r0, r0
   13c88:	subcs	r3, r3, r1, lsl #2
   13c8c:	cmp	r3, r1, lsl #1
   13c90:	adc	r0, r0, r0
   13c94:	subcs	r3, r3, r1, lsl #1
   13c98:	cmp	r3, r1
   13c9c:	adc	r0, r0, r0
   13ca0:	subcs	r3, r3, r1
   13ca4:	cmp	ip, #0
   13ca8:	rsbmi	r0, r0, #0
   13cac:	bx	lr
   13cb0:	teq	ip, r0
   13cb4:	rsbmi	r0, r0, #0
   13cb8:	bx	lr
   13cbc:	movcc	r0, #0
   13cc0:	asreq	r0, ip, #31
   13cc4:	orreq	r0, r0, #1
   13cc8:	bx	lr
   13ccc:	clz	r2, r1
   13cd0:	rsb	r2, r2, #31
   13cd4:	cmp	ip, #0
   13cd8:	lsr	r0, r3, r2
   13cdc:	rsbmi	r0, r0, #0
   13ce0:	bx	lr
   13ce4:	cmp	r0, #0
   13ce8:	mvngt	r0, #-2147483648	; 0x80000000
   13cec:	movlt	r0, #-2147483648	; 0x80000000
   13cf0:	b	13d14 <__assert_fail@plt+0x2ac0>
   13cf4:	cmp	r1, #0
   13cf8:	beq	13ce4 <__assert_fail@plt+0x2a90>
   13cfc:	push	{r0, r1, lr}
   13d00:	bl	13adc <__assert_fail@plt+0x2888>
   13d04:	pop	{r1, r2, lr}
   13d08:	mul	r3, r2, r0
   13d0c:	sub	r1, r1, r3
   13d10:	bx	lr
   13d14:	push	{r1, lr}
   13d18:	mov	r0, #8
   13d1c:	bl	10fa8 <raise@plt>
   13d20:	pop	{r1, pc}
   13d24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d28:	mov	r7, r0
   13d2c:	ldr	r6, [pc, #72]	; 13d7c <__assert_fail@plt+0x2b28>
   13d30:	ldr	r5, [pc, #72]	; 13d80 <__assert_fail@plt+0x2b2c>
   13d34:	add	r6, pc, r6
   13d38:	add	r5, pc, r5
   13d3c:	sub	r6, r6, r5
   13d40:	mov	r8, r1
   13d44:	mov	r9, r2
   13d48:	bl	10f7c <_init@@Base>
   13d4c:	asrs	r6, r6, #2
   13d50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d54:	mov	r4, #0
   13d58:	add	r4, r4, #1
   13d5c:	ldr	r3, [r5], #4
   13d60:	mov	r2, r9
   13d64:	mov	r1, r8
   13d68:	mov	r0, r7
   13d6c:	blx	r3
   13d70:	cmp	r6, r4
   13d74:	bne	13d58 <__assert_fail@plt+0x2b04>
   13d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d7c:			; <UNDEFINED> instruction: 0x000111b8
   13d80:			; <UNDEFINED> instruction: 0x000111b0
   13d84:	bx	lr

Disassembly of section .fini:

00013d88 <_fini@@Base>:
   13d88:	push	{r3, lr}
   13d8c:	pop	{r3, pc}
