
raspbian-preinstalled/setmetamode:     file format elf32-littlearm


Disassembly of section .init:

000105a4 <.init>:
   105a4:	push	{r3, lr}
   105a8:	bl	1094c <abort@plt+0x2c8>
   105ac:	pop	{r3, pc}

Disassembly of section .plt:

000105b0 <strcmp@plt-0x14>:
   105b0:	push	{lr}		; (str lr, [sp, #-4]!)
   105b4:	ldr	lr, [pc, #4]	; 105c0 <strcmp@plt-0x4>
   105b8:	add	lr, pc, lr
   105bc:	ldr	pc, [lr, #8]!
   105c0:	andeq	r0, r1, r0, asr #20

000105c4 <strcmp@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2624]!	; 0xa40

000105d0 <dcgettext@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2616]!	; 0xa38

000105dc <__stack_chk_fail@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2608]!	; 0xa30

000105e8 <textdomain@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2600]!	; 0xa28

000105f4 <ioctl@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2592]!	; 0xa20

00010600 <__libc_start_main@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2584]!	; 0xa18

0001060c <strerror@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2576]!	; 0xa10

00010618 <__vfprintf_chk@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2568]!	; 0xa08

00010624 <__gmon_start__@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2560]!	; 0xa00

00010630 <exit@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2552]!	; 0x9f8

0001063c <__errno_location@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2544]!	; 0x9f0

00010648 <__printf_chk@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2536]!	; 0x9e8

00010654 <__fprintf_chk@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2528]!	; 0x9e0

00010660 <setlocale@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2520]!	; 0x9d8

0001066c <strrchr@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2512]!	; 0x9d0

00010678 <bindtextdomain@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2504]!	; 0x9c8

00010684 <abort@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2496]!	; 0x9c0

Disassembly of section .text:

00010690 <.text>:
   10690:	push	{r4, r5, r6, r7, r8, r9, lr}
   10694:	sub	sp, sp, #12
   10698:	ldr	r8, [pc, #552]	; 108c8 <abort@plt+0x244>
   1069c:	ldr	r4, [r1]
   106a0:	mov	r5, r0
   106a4:	ldr	r3, [r8]
   106a8:	mov	r0, r4
   106ac:	mov	r9, r1
   106b0:	mov	r1, #47	; 0x2f
   106b4:	str	r3, [sp, #4]
   106b8:	bl	1066c <strrchr@plt>
   106bc:	ldr	r6, [pc, #520]	; 108cc <abort@plt+0x248>
   106c0:	ldr	r1, [pc, #520]	; 108d0 <abort@plt+0x24c>
   106c4:	cmp	r0, #0
   106c8:	addne	r4, r0, #1
   106cc:	mov	r0, #6
   106d0:	str	r4, [r6]
   106d4:	bl	10660 <setlocale@plt>
   106d8:	ldr	r1, [pc, #500]	; 108d4 <abort@plt+0x250>
   106dc:	ldr	r0, [pc, #500]	; 108d8 <abort@plt+0x254>
   106e0:	bl	10678 <bindtextdomain@plt>
   106e4:	ldr	r0, [pc, #492]	; 108d8 <abort@plt+0x254>
   106e8:	bl	105e8 <textdomain@plt>
   106ec:	cmp	r5, #2
   106f0:	bne	107ec <abort@plt+0x168>
   106f4:	ldr	r1, [pc, #480]	; 108dc <abort@plt+0x258>
   106f8:	ldr	r0, [r9, #4]
   106fc:	bl	105c4 <strcmp@plt>
   10700:	subs	r4, r0, #0
   10704:	beq	108a0 <abort@plt+0x21c>
   10708:	add	r2, sp, #3
   1070c:	ldr	r1, [pc, #460]	; 108e0 <abort@plt+0x25c>
   10710:	mov	r0, #0
   10714:	bl	105f4 <ioctl@plt>
   10718:	cmp	r0, #0
   1071c:	bne	10804 <abort@plt+0x180>
   10720:	ldr	r5, [pc, #444]	; 108e4 <abort@plt+0x260>
   10724:	ldr	r7, [r9, #4]
   10728:	mov	r4, r5
   1072c:	b	10740 <abort@plt+0xbc>
   10730:	add	r4, r4, #8
   10734:	sub	r3, r4, r5
   10738:	cmp	r3, #47	; 0x2f
   1073c:	bhi	10844 <abort@plt+0x1c0>
   10740:	ldr	r1, [r4]
   10744:	mov	r0, r7
   10748:	bl	105c4 <strcmp@plt>
   1074c:	subs	r6, r0, #0
   10750:	bne	10730 <abort@plt+0xac>
   10754:	mov	r2, #5
   10758:	ldr	r1, [pc, #392]	; 108e8 <abort@plt+0x264>
   1075c:	ldr	r4, [r4, #4]
   10760:	bl	105d0 <dcgettext@plt>
   10764:	uxtb	r4, r4
   10768:	mov	r1, r0
   1076c:	mov	r0, #1
   10770:	bl	10648 <__printf_chk@plt>
   10774:	ldrb	r0, [sp, #3]
   10778:	bl	10a00 <abort@plt+0x37c>
   1077c:	mov	r0, r6
   10780:	mov	r2, r4
   10784:	ldr	r1, [pc, #352]	; 108ec <abort@plt+0x268>
   10788:	bl	105f4 <ioctl@plt>
   1078c:	cmp	r0, #0
   10790:	bne	107d4 <abort@plt+0x150>
   10794:	mov	r2, #5
   10798:	ldr	r1, [pc, #336]	; 108f0 <abort@plt+0x26c>
   1079c:	mov	r0, #0
   107a0:	bl	105d0 <dcgettext@plt>
   107a4:	mov	r1, r0
   107a8:	mov	r0, #1
   107ac:	bl	10648 <__printf_chk@plt>
   107b0:	mov	r0, r4
   107b4:	bl	10a00 <abort@plt+0x37c>
   107b8:	ldr	r2, [sp, #4]
   107bc:	ldr	r3, [r8]
   107c0:	mov	r0, #0
   107c4:	cmp	r2, r3
   107c8:	bne	1089c <abort@plt+0x218>
   107cc:	add	sp, sp, #12
   107d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   107d4:	bl	1063c <__errno_location@plt>
   107d8:	ldr	r2, [pc, #276]	; 108f4 <abort@plt+0x270>
   107dc:	ldr	r1, [r0]
   107e0:	mov	r0, #1
   107e4:	bl	10b30 <abort@plt+0x4ac>
   107e8:	b	10794 <abort@plt+0x110>
   107ec:	add	r2, sp, #3
   107f0:	ldr	r1, [pc, #232]	; 108e0 <abort@plt+0x25c>
   107f4:	mov	r0, #0
   107f8:	bl	105f4 <ioctl@plt>
   107fc:	cmp	r0, #0
   10800:	beq	1082c <abort@plt+0x1a8>
   10804:	bl	1063c <__errno_location@plt>
   10808:	mov	r2, #5
   1080c:	ldr	r1, [pc, #228]	; 108f8 <abort@plt+0x274>
   10810:	ldr	r4, [r0]
   10814:	mov	r0, #0
   10818:	bl	105d0 <dcgettext@plt>
   1081c:	mov	r1, r4
   10820:	mov	r2, r0
   10824:	mov	r0, #1
   10828:	bl	10b30 <abort@plt+0x4ac>
   1082c:	cmp	r5, #1
   10830:	bgt	10720 <abort@plt+0x9c>
   10834:	ldrb	r0, [sp, #3]
   10838:	bl	10a00 <abort@plt+0x37c>
   1083c:	mov	r0, #0
   10840:	bl	10630 <exit@plt>
   10844:	ldr	r4, [pc, #176]	; 108fc <abort@plt+0x278>
   10848:	mov	r2, #5
   1084c:	ldr	r1, [pc, #172]	; 10900 <abort@plt+0x27c>
   10850:	mov	r0, #0
   10854:	ldr	r5, [r4]
   10858:	bl	105d0 <dcgettext@plt>
   1085c:	ldr	r3, [r9, #4]
   10860:	mov	r1, #1
   10864:	mov	r2, r0
   10868:	mov	r0, r5
   1086c:	bl	10654 <__fprintf_chk@plt>
   10870:	mov	r2, #5
   10874:	ldr	r1, [pc, #136]	; 10904 <abort@plt+0x280>
   10878:	mov	r0, #0
   1087c:	ldr	r4, [r4]
   10880:	bl	105d0 <dcgettext@plt>
   10884:	mov	r1, #1
   10888:	mov	r2, r0
   1088c:	mov	r0, r4
   10890:	bl	10654 <__fprintf_chk@plt>
   10894:	mov	r0, #1
   10898:	bl	10630 <exit@plt>
   1089c:	bl	105dc <__stack_chk_fail@plt>
   108a0:	mov	r2, #5
   108a4:	ldr	r1, [pc, #92]	; 10908 <abort@plt+0x284>
   108a8:	bl	105d0 <dcgettext@plt>
   108ac:	ldr	r2, [r6]
   108b0:	ldr	r3, [pc, #84]	; 1090c <abort@plt+0x288>
   108b4:	mov	r1, r0
   108b8:	mov	r0, #1
   108bc:	bl	10648 <__printf_chk@plt>
   108c0:	mov	r0, r4
   108c4:	bl	10630 <exit@plt>
   108c8:	andeq	r0, r2, r8, lsl #30
   108cc:	muleq	r2, r8, r0
   108d0:	andeq	r0, r1, r8, lsl #29
   108d4:	muleq	r1, ip, ip
   108d8:			; <UNDEFINED> instruction: 0x00010cb0
   108dc:			; <UNDEFINED> instruction: 0x00010cb4
   108e0:	andeq	r4, r0, r2, ror #22
   108e4:	andeq	r1, r2, ip, asr r0
   108e8:	andeq	r0, r1, ip, lsl sp
   108ec:	andeq	r4, r0, r3, ror #22
   108f0:	andeq	r0, r1, ip, asr #28
   108f4:	andeq	r0, r1, ip, lsr lr
   108f8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   108fc:	muleq	r2, r0, r0
   10900:	andeq	r0, r1, ip, lsr #26
   10904:	andeq	r0, r1, ip, asr #26
   10908:			; <UNDEFINED> instruction: 0x00010cb8
   1090c:	andeq	r0, r1, r4, asr #25
   10910:	mov	fp, #0
   10914:	mov	lr, #0
   10918:	pop	{r1}		; (ldr r1, [sp], #4)
   1091c:	mov	r2, sp
   10920:	push	{r2}		; (str r2, [sp, #-4]!)
   10924:	push	{r0}		; (str r0, [sp, #-4]!)
   10928:	ldr	ip, [pc, #16]	; 10940 <abort@plt+0x2bc>
   1092c:	push	{ip}		; (str ip, [sp, #-4]!)
   10930:	ldr	r0, [pc, #12]	; 10944 <abort@plt+0x2c0>
   10934:	ldr	r3, [pc, #12]	; 10948 <abort@plt+0x2c4>
   10938:	bl	10600 <__libc_start_main@plt>
   1093c:	bl	10684 <abort@plt>
   10940:	andeq	r0, r1, r0, lsr ip
   10944:	muleq	r1, r0, r6
   10948:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1094c:	ldr	r3, [pc, #20]	; 10968 <abort@plt+0x2e4>
   10950:	ldr	r2, [pc, #20]	; 1096c <abort@plt+0x2e8>
   10954:	add	r3, pc, r3
   10958:	ldr	r2, [r3, r2]
   1095c:	cmp	r2, #0
   10960:	bxeq	lr
   10964:	b	10624 <__gmon_start__@plt>
   10968:	andeq	r0, r1, r4, lsr #13
   1096c:	andeq	r0, r0, r0, asr r0
   10970:	ldr	r0, [pc, #24]	; 10990 <abort@plt+0x30c>
   10974:	ldr	r3, [pc, #24]	; 10994 <abort@plt+0x310>
   10978:	cmp	r3, r0
   1097c:	bxeq	lr
   10980:	ldr	r3, [pc, #16]	; 10998 <abort@plt+0x314>
   10984:	cmp	r3, #0
   10988:	bxeq	lr
   1098c:	bx	r3
   10990:	andeq	r1, r2, ip, lsl #1
   10994:	andeq	r1, r2, ip, lsl #1
   10998:	andeq	r0, r0, r0
   1099c:	ldr	r0, [pc, #36]	; 109c8 <abort@plt+0x344>
   109a0:	ldr	r1, [pc, #36]	; 109cc <abort@plt+0x348>
   109a4:	sub	r1, r1, r0
   109a8:	asr	r1, r1, #2
   109ac:	add	r1, r1, r1, lsr #31
   109b0:	asrs	r1, r1, #1
   109b4:	bxeq	lr
   109b8:	ldr	r3, [pc, #16]	; 109d0 <abort@plt+0x34c>
   109bc:	cmp	r3, #0
   109c0:	bxeq	lr
   109c4:	bx	r3
   109c8:	andeq	r1, r2, ip, lsl #1
   109cc:	andeq	r1, r2, ip, lsl #1
   109d0:	andeq	r0, r0, r0
   109d4:	push	{r4, lr}
   109d8:	ldr	r4, [pc, #24]	; 109f8 <abort@plt+0x374>
   109dc:	ldrb	r3, [r4]
   109e0:	cmp	r3, #0
   109e4:	popne	{r4, pc}
   109e8:	bl	10970 <abort@plt+0x2ec>
   109ec:	mov	r3, #1
   109f0:	strb	r3, [r4]
   109f4:	pop	{r4, pc}
   109f8:	muleq	r2, r4, r0
   109fc:	b	1099c <abort@plt+0x318>
   10a00:	cmp	r0, #3
   10a04:	push	{r4, lr}
   10a08:	beq	10a50 <abort@plt+0x3cc>
   10a0c:	cmp	r0, #4
   10a10:	beq	10a38 <abort@plt+0x3b4>
   10a14:	mov	r2, #5
   10a18:	ldr	r1, [pc, #72]	; 10a68 <abort@plt+0x3e4>
   10a1c:	mov	r0, #0
   10a20:	bl	105d0 <dcgettext@plt>
   10a24:	mov	r2, r0
   10a28:	ldr	r1, [pc, #60]	; 10a6c <abort@plt+0x3e8>
   10a2c:	mov	r0, #1
   10a30:	pop	{r4, lr}
   10a34:	b	10648 <__printf_chk@plt>
   10a38:	mov	r2, #5
   10a3c:	ldr	r1, [pc, #44]	; 10a70 <abort@plt+0x3ec>
   10a40:	mov	r0, #0
   10a44:	bl	105d0 <dcgettext@plt>
   10a48:	mov	r2, r0
   10a4c:	b	10a28 <abort@plt+0x3a4>
   10a50:	mov	r2, #5
   10a54:	ldr	r1, [pc, #24]	; 10a74 <abort@plt+0x3f0>
   10a58:	mov	r0, #0
   10a5c:	bl	105d0 <dcgettext@plt>
   10a60:	mov	r2, r0
   10a64:	b	10a28 <abort@plt+0x3a4>
   10a68:	andeq	r0, r1, ip, ror ip
   10a6c:	muleq	r1, r8, ip
   10a70:	andeq	r0, r1, r0, ror #24
   10a74:	andeq	r0, r1, r0, asr #24
   10a78:	push	{r1, r2, r3}
   10a7c:	push	{r4, r5, r6, r7, lr}
   10a80:	sub	sp, sp, #8
   10a84:	ldr	r5, [pc, #144]	; 10b1c <abort@plt+0x498>
   10a88:	ldr	r4, [pc, #144]	; 10b20 <abort@plt+0x49c>
   10a8c:	ldr	r3, [pc, #144]	; 10b24 <abort@plt+0x4a0>
   10a90:	ldr	r1, [r5]
   10a94:	ldr	r7, [sp, #28]
   10a98:	add	ip, sp, #32
   10a9c:	mov	r6, r0
   10aa0:	ldr	r3, [r3]
   10aa4:	ldr	r2, [pc, #124]	; 10b28 <abort@plt+0x4a4>
   10aa8:	str	r1, [sp, #4]
   10aac:	ldr	r0, [r4]
   10ab0:	mov	r1, #1
   10ab4:	str	ip, [sp]
   10ab8:	bl	10654 <__fprintf_chk@plt>
   10abc:	mov	r2, r7
   10ac0:	ldr	r0, [r4]
   10ac4:	ldr	r3, [sp]
   10ac8:	mov	r1, #1
   10acc:	bl	10618 <__vfprintf_chk@plt>
   10ad0:	cmp	r6, #0
   10ad4:	ble	10af8 <abort@plt+0x474>
   10ad8:	mov	r0, r6
   10adc:	ldr	r4, [r4]
   10ae0:	bl	1060c <strerror@plt>
   10ae4:	ldr	r2, [pc, #64]	; 10b2c <abort@plt+0x4a8>
   10ae8:	mov	r1, #1
   10aec:	mov	r3, r0
   10af0:	mov	r0, r4
   10af4:	bl	10654 <__fprintf_chk@plt>
   10af8:	ldr	r2, [sp, #4]
   10afc:	ldr	r3, [r5]
   10b00:	cmp	r2, r3
   10b04:	bne	10b18 <abort@plt+0x494>
   10b08:	add	sp, sp, #8
   10b0c:	pop	{r4, r5, r6, r7, lr}
   10b10:	add	sp, sp, #12
   10b14:	bx	lr
   10b18:	bl	105dc <__stack_chk_fail@plt>
   10b1c:	andeq	r0, r2, r8, lsl #30
   10b20:	muleq	r2, r0, r0
   10b24:	muleq	r2, r8, r0
   10b28:	andeq	r0, r1, r4, lsl #29
   10b2c:	andeq	r0, r1, ip, lsl #29
   10b30:	push	{r2, r3}
   10b34:	mov	r5, r1
   10b38:	ldr	r2, [pc, #124]	; 10bbc <abort@plt+0x538>
   10b3c:	push	{r7, lr}
   10b40:	sub	sp, sp, #8
   10b44:	ldr	r4, [pc, #116]	; 10bc0 <abort@plt+0x53c>
   10b48:	ldr	r3, [pc, #116]	; 10bc4 <abort@plt+0x540>
   10b4c:	ldr	lr, [r2]
   10b50:	ldr	r7, [sp, #16]
   10b54:	add	ip, sp, #20
   10b58:	ldr	r3, [r3]
   10b5c:	ldr	r2, [pc, #100]	; 10bc8 <abort@plt+0x544>
   10b60:	mov	r1, #1
   10b64:	mov	r6, r0
   10b68:	ldr	r0, [r4]
   10b6c:	str	lr, [sp, #4]
   10b70:	str	ip, [sp]
   10b74:	bl	10654 <__fprintf_chk@plt>
   10b78:	mov	r2, r7
   10b7c:	ldr	r0, [r4]
   10b80:	ldr	r3, [sp]
   10b84:	mov	r1, #1
   10b88:	bl	10618 <__vfprintf_chk@plt>
   10b8c:	cmp	r5, #0
   10b90:	ble	10bb4 <abort@plt+0x530>
   10b94:	mov	r0, r5
   10b98:	ldr	r4, [r4]
   10b9c:	bl	1060c <strerror@plt>
   10ba0:	ldr	r2, [pc, #36]	; 10bcc <abort@plt+0x548>
   10ba4:	mov	r1, #1
   10ba8:	mov	r3, r0
   10bac:	mov	r0, r4
   10bb0:	bl	10654 <__fprintf_chk@plt>
   10bb4:	mov	r0, r6
   10bb8:	bl	10630 <exit@plt>
   10bbc:	andeq	r0, r2, r8, lsl #30
   10bc0:	muleq	r2, r0, r0
   10bc4:	muleq	r2, r8, r0
   10bc8:	andeq	r0, r1, r4, lsl #29
   10bcc:	andeq	r0, r1, ip, lsl #29
   10bd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10bd4:	mov	r7, r0
   10bd8:	ldr	r6, [pc, #72]	; 10c28 <abort@plt+0x5a4>
   10bdc:	ldr	r5, [pc, #72]	; 10c2c <abort@plt+0x5a8>
   10be0:	add	r6, pc, r6
   10be4:	add	r5, pc, r5
   10be8:	sub	r6, r6, r5
   10bec:	mov	r8, r1
   10bf0:	mov	r9, r2
   10bf4:	bl	105a4 <strcmp@plt-0x20>
   10bf8:	asrs	r6, r6, #2
   10bfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c00:	mov	r4, #0
   10c04:	add	r4, r4, #1
   10c08:	ldr	r3, [r5], #4
   10c0c:	mov	r2, r9
   10c10:	mov	r1, r8
   10c14:	mov	r0, r7
   10c18:	blx	r3
   10c1c:	cmp	r6, r4
   10c20:	bne	10c04 <abort@plt+0x580>
   10c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c28:	andeq	r0, r1, ip, lsl r3
   10c2c:	andeq	r0, r1, r4, lsl r3
   10c30:	bx	lr

Disassembly of section .fini:

00010c34 <.fini>:
   10c34:	push	{r3, lr}
   10c38:	pop	{r3, pc}
