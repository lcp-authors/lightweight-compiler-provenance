
raspbian-preinstalled/shred:     file format elf32-littlearm


Disassembly of section .init:

000111dc <.init>:
   111dc:	push	{r3, lr}
   111e0:	bl	11f70 <__assert_fail@plt+0x9a8>
   111e4:	pop	{r3, pc}

Disassembly of section .plt:

000111e8 <fdopen@plt-0x14>:
   111e8:	push	{lr}		; (str lr, [sp, #-4]!)
   111ec:	ldr	lr, [pc, #4]	; 111f8 <fdopen@plt-0x4>
   111f0:	add	lr, pc, lr
   111f4:	ldr	pc, [lr, #8]!
   111f8:	andeq	sl, r1, r8, lsl #28

000111fc <fdopen@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3592]!	; 0xe08

00011208 <calloc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3584]!	; 0xe00

00011214 <fputs_unlocked@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011220 <raise@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3568]!	; 0xdf0

0001122c <fsync@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3560]!	; 0xde8

00011238 <strcmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3552]!	; 0xde0

00011244 <__read_chk@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011250 <fflush@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3536]!	; 0xdd0

0001125c <getuid@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3528]!	; 0xdc8

00011268 <memmove@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3520]!	; 0xdc0

00011274 <free@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011280 <_exit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3504]!	; 0xdb0

0001128c <memcpy@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3496]!	; 0xda8

00011298 <__strtoull_internal@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3488]!	; 0xda0

000112a4 <mbsinit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3480]!	; 0xd98

000112b0 <time@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3472]!	; 0xd90

000112bc <ftruncate64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3464]!	; 0xd88

000112c8 <memcmp@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3456]!	; 0xd80

000112d4 <dcgettext@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3448]!	; 0xd78

000112e0 <__stack_chk_fail@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3440]!	; 0xd70

000112ec <unlink@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3432]!	; 0xd68

000112f8 <realloc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3424]!	; 0xd60

00011304 <textdomain@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3416]!	; 0xd58

00011310 <__fxstatat64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3408]!	; 0xd50

0001131c <iswprint@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3400]!	; 0xd48

00011328 <__fxstat64@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3392]!	; 0xd40

00011334 <__memcpy_chk@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3384]!	; 0xd38

00011340 <fwrite@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3376]!	; 0xd30

0001134c <ioctl@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3368]!	; 0xd28

00011358 <lseek64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3360]!	; 0xd20

00011364 <__ctype_get_mb_cur_max@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3352]!	; 0xd18

00011370 <gettimeofday@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3344]!	; 0xd10

0001137c <__strcpy_chk@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3336]!	; 0xd08

00011388 <__fpending@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3328]!	; 0xd00

00011394 <mbrtowc@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a0 <error@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113ac <open64@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3304]!	; 0xce8

000113b8 <getenv@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3296]!	; 0xce0

000113c4 <malloc@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d0 <__libc_start_main@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113dc <__freading@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3272]!	; 0xcc8

000113e8 <__gmon_start__@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f4 <getopt_long@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3256]!	; 0xcb8

00011400 <__ctype_b_loc@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3248]!	; 0xcb0

0001140c <getpid@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3240]!	; 0xca8

00011418 <exit@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3232]!	; 0xca0

00011424 <strlen@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3224]!	; 0xc98

00011430 <strchr@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3216]!	; 0xc90

0001143c <getpagesize@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3208]!	; 0xc88

00011448 <__errno_location@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3200]!	; 0xc80

00011454 <__sprintf_chk@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3192]!	; 0xc78

00011460 <__cxa_atexit@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3184]!	; 0xc70

0001146c <setvbuf@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3176]!	; 0xc68

00011478 <getgid@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3168]!	; 0xc60

00011484 <memset@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3160]!	; 0xc58

00011490 <renameat2@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3152]!	; 0xc50

0001149c <__printf_chk@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3144]!	; 0xc48

000114a8 <write@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3136]!	; 0xc40

000114b4 <fileno@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3128]!	; 0xc38

000114c0 <__fprintf_chk@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3120]!	; 0xc30

000114cc <fclose@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3112]!	; 0xc28

000114d8 <fseeko64@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3104]!	; 0xc20

000114e4 <fcntl64@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3096]!	; 0xc18

000114f0 <__overflow@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3088]!	; 0xc10

000114fc <setlocale@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3080]!	; 0xc08

00011508 <__explicit_bzero_chk@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3072]!	; 0xc00

00011514 <strrchr@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011520 <nl_langinfo@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3056]!	; 0xbf0

0001152c <localeconv@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3048]!	; 0xbe8

00011538 <getppid@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3040]!	; 0xbe0

00011544 <fopen64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011550 <renameat@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3024]!	; 0xbd0

0001155c <bindtextdomain@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3016]!	; 0xbc8

00011568 <fread_unlocked@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #3008]!	; 0xbc0

00011574 <sync@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011580 <chmod@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2992]!	; 0xbb0

0001158c <isatty@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2984]!	; 0xba8

00011598 <strncmp@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2976]!	; 0xba0

000115a4 <fdatasync@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2968]!	; 0xb98

000115b0 <abort@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2960]!	; 0xb90

000115bc <close@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2952]!	; 0xb88

000115c8 <__assert_fail@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2944]!	; 0xb80

Disassembly of section .text:

000115d8 <.text>:
   115d8:	ldr	r3, [pc, #2228]	; 11e94 <__assert_fail@plt+0x8cc>
   115dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115e0:	sub	sp, sp, #108	; 0x6c
   115e4:	ldr	r3, [r3]
   115e8:	mov	r5, #0
   115ec:	mov	r7, r0
   115f0:	ldr	r0, [r1]
   115f4:	str	r3, [sp, #100]	; 0x64
   115f8:	mov	r6, r1
   115fc:	str	r5, [sp, #76]	; 0x4c
   11600:	str	r5, [sp, #72]	; 0x48
   11604:	str	r5, [sp, #80]	; 0x50
   11608:	str	r5, [sp, #84]	; 0x54
   1160c:	str	r5, [sp, #88]	; 0x58
   11610:	str	r5, [sp, #92]	; 0x5c
   11614:	bl	14774 <__assert_fail@plt+0x31ac>
   11618:	ldr	r1, [pc, #2168]	; 11e98 <__assert_fail@plt+0x8d0>
   1161c:	mov	r0, #6
   11620:	bl	114fc <setlocale@plt>
   11624:	ldr	r1, [pc, #2160]	; 11e9c <__assert_fail@plt+0x8d4>
   11628:	ldr	r0, [pc, #2160]	; 11ea0 <__assert_fail@plt+0x8d8>
   1162c:	bl	1155c <bindtextdomain@plt>
   11630:	ldr	r0, [pc, #2152]	; 11ea0 <__assert_fail@plt+0x8d8>
   11634:	bl	11304 <textdomain@plt>
   11638:	ldr	r0, [pc, #2148]	; 11ea4 <__assert_fail@plt+0x8dc>
   1163c:	bl	1983c <__assert_fail@plt+0x8274>
   11640:	mvn	r3, #0
   11644:	mvn	r2, #0
   11648:	ldr	r8, [pc, #2136]	; 11ea8 <__assert_fail@plt+0x8e0>
   1164c:	strd	r2, [sp, #80]	; 0x50
   11650:	ldr	r3, [pc, #2132]	; 11eac <__assert_fail@plt+0x8e4>
   11654:	ldr	sl, [pc, #2132]	; 11eb0 <__assert_fail@plt+0x8e8>
   11658:	add	r9, r3, #304	; 0x130
   1165c:	mov	r1, #3
   11660:	str	r1, [sp, #76]	; 0x4c
   11664:	mov	r4, #0
   11668:	str	r4, [sp]
   1166c:	mov	r3, r9
   11670:	mov	r2, r8
   11674:	mov	r1, r6
   11678:	mov	r0, r7
   1167c:	bl	113f4 <getopt_long@plt>
   11680:	cmn	r0, #1
   11684:	beq	1184c <__assert_fail@plt+0x284>
   11688:	cmp	r0, #115	; 0x73
   1168c:	beq	117f4 <__assert_fail@plt+0x22c>
   11690:	ble	116f4 <__assert_fail@plt+0x12c>
   11694:	cmp	r0, #120	; 0x78
   11698:	beq	11840 <__assert_fail@plt+0x278>
   1169c:	bgt	11728 <__assert_fail@plt+0x160>
   116a0:	cmp	r0, #117	; 0x75
   116a4:	bne	11714 <__assert_fail@plt+0x14c>
   116a8:	ldr	r1, [sl]
   116ac:	cmp	r1, #0
   116b0:	moveq	r3, #3
   116b4:	streq	r3, [sp, #88]	; 0x58
   116b8:	beq	11664 <__assert_fail@plt+0x9c>
   116bc:	ldr	r2, [pc, #2032]	; 11eb4 <__assert_fail@plt+0x8ec>
   116c0:	ldr	r3, [pc, #2032]	; 11eb8 <__assert_fail@plt+0x8f0>
   116c4:	mov	r0, #4
   116c8:	ldr	r2, [r2]
   116cc:	str	r0, [sp]
   116d0:	str	r2, [sp, #4]
   116d4:	ldr	r0, [pc, #2016]	; 11ebc <__assert_fail@plt+0x8f4>
   116d8:	add	r2, r3, #12
   116dc:	bl	137d8 <__assert_fail@plt+0x2210>
   116e0:	ldr	r3, [pc, #1988]	; 11eac <__assert_fail@plt+0x8e4>
   116e4:	add	r0, r3, r0, lsl #2
   116e8:	ldr	r3, [r0, #276]	; 0x114
   116ec:	str	r3, [sp, #88]	; 0x58
   116f0:	b	11664 <__assert_fail@plt+0x9c>
   116f4:	cmn	r0, #2
   116f8:	beq	11e28 <__assert_fail@plt+0x860>
   116fc:	ble	1178c <__assert_fail@plt+0x1c4>
   11700:	cmp	r0, #102	; 0x66
   11704:	bne	1173c <__assert_fail@plt+0x174>
   11708:	mov	r3, #1
   1170c:	strb	r3, [sp, #72]	; 0x48
   11710:	b	11664 <__assert_fail@plt+0x9c>
   11714:	cmp	r0, #118	; 0x76
   11718:	bne	11e20 <__assert_fail@plt+0x858>
   1171c:	mov	r3, #1
   11720:	strb	r3, [sp, #92]	; 0x5c
   11724:	b	11664 <__assert_fail@plt+0x9c>
   11728:	cmp	r0, #122	; 0x7a
   1172c:	bne	117c4 <__assert_fail@plt+0x1fc>
   11730:	mov	r3, #1
   11734:	strb	r3, [sp, #94]	; 0x5e
   11738:	b	11664 <__assert_fail@plt+0x9c>
   1173c:	cmp	r0, #110	; 0x6e
   11740:	bne	11e20 <__assert_fail@plt+0x858>
   11744:	mov	r2, #5
   11748:	ldr	r1, [pc, #1904]	; 11ec0 <__assert_fail@plt+0x8f8>
   1174c:	mov	r0, r4
   11750:	ldr	fp, [sl]
   11754:	bl	112d4 <dcgettext@plt>
   11758:	ldr	r1, [pc, #1848]	; 11e98 <__assert_fail@plt+0x8d0>
   1175c:	mvn	r2, #-1073741824	; 0xc0000000
   11760:	mov	r3, #0
   11764:	str	r4, [sp, #16]
   11768:	strd	r2, [sp]
   1176c:	str	r1, [sp, #8]
   11770:	mov	r2, #0
   11774:	mov	r3, #0
   11778:	str	r0, [sp, #12]
   1177c:	mov	r0, fp
   11780:	bl	1806c <__assert_fail@plt+0x6aa4>
   11784:	str	r0, [sp, #76]	; 0x4c
   11788:	b	11664 <__assert_fail@plt+0x9c>
   1178c:	cmn	r0, #3
   11790:	bne	11e20 <__assert_fail@plt+0x858>
   11794:	ldr	r1, [pc, #1832]	; 11ec4 <__assert_fail@plt+0x8fc>
   11798:	ldr	r3, [pc, #1832]	; 11ec8 <__assert_fail@plt+0x900>
   1179c:	ldr	r2, [pc, #1832]	; 11ecc <__assert_fail@plt+0x904>
   117a0:	str	r4, [sp, #4]
   117a4:	ldr	r0, [r1]
   117a8:	ldr	r3, [r3]
   117ac:	ldr	r1, [pc, #1820]	; 11ed0 <__assert_fail@plt+0x908>
   117b0:	str	r2, [sp]
   117b4:	ldr	r2, [pc, #1816]	; 11ed4 <__assert_fail@plt+0x90c>
   117b8:	bl	17b90 <__assert_fail@plt+0x65c8>
   117bc:	mov	r0, r4
   117c0:	bl	11418 <exit@plt>
   117c4:	cmp	r0, #256	; 0x100
   117c8:	bne	11e20 <__assert_fail@plt+0x858>
   117cc:	cmp	r5, #0
   117d0:	ldr	fp, [sl]
   117d4:	beq	117ec <__assert_fail@plt+0x224>
   117d8:	mov	r0, r5
   117dc:	mov	r1, fp
   117e0:	bl	11238 <strcmp@plt>
   117e4:	cmp	r0, #0
   117e8:	bne	11e74 <__assert_fail@plt+0x8ac>
   117ec:	mov	r5, fp
   117f0:	b	11664 <__assert_fail@plt+0x9c>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #1752]	; 11ed8 <__assert_fail@plt+0x910>
   117fc:	mov	r0, r4
   11800:	ldr	fp, [sl]
   11804:	bl	112d4 <dcgettext@plt>
   11808:	mvn	r2, #0
   1180c:	mvn	r3, #-2147483648	; 0x80000000
   11810:	ldr	r1, [pc, #1732]	; 11edc <__assert_fail@plt+0x914>
   11814:	strd	r2, [sp]
   11818:	str	r1, [sp, #8]
   1181c:	str	r4, [sp, #16]
   11820:	mov	r1, r4
   11824:	mov	r2, #0
   11828:	mov	r3, #0
   1182c:	str	r0, [sp, #12]
   11830:	mov	r0, fp
   11834:	bl	17f1c <__assert_fail@plt+0x6954>
   11838:	strd	r0, [sp, #80]	; 0x50
   1183c:	b	11664 <__assert_fail@plt+0x9c>
   11840:	mov	r3, #1
   11844:	strb	r3, [sp, #93]	; 0x5d
   11848:	b	11664 <__assert_fail@plt+0x9c>
   1184c:	ldr	r3, [pc, #1676]	; 11ee0 <__assert_fail@plt+0x918>
   11850:	ldr	r8, [r3]
   11854:	subs	r3, r7, r8
   11858:	str	r3, [sp, #40]	; 0x28
   1185c:	beq	11dfc <__assert_fail@plt+0x834>
   11860:	mov	r1, r0
   11864:	mov	r0, r5
   11868:	bl	16a18 <__assert_fail@plt+0x5450>
   1186c:	ldr	r3, [pc, #1648]	; 11ee4 <__assert_fail@plt+0x91c>
   11870:	cmp	r0, #0
   11874:	mov	r7, r0
   11878:	str	r0, [r3]
   1187c:	beq	11e44 <__assert_fail@plt+0x87c>
   11880:	ldr	r0, [pc, #1632]	; 11ee8 <__assert_fail@plt+0x920>
   11884:	bl	1983c <__assert_fail@plt+0x8274>
   11888:	ldr	r3, [sp, #40]	; 0x28
   1188c:	cmp	r3, #0
   11890:	ble	11a2c <__assert_fail@plt+0x464>
   11894:	sub	r3, r8, #-1073741823	; 0xc0000001
   11898:	mov	sl, r4
   1189c:	add	r3, r6, r3, lsl #2
   118a0:	str	r3, [sp, #32]
   118a4:	mov	r3, #1
   118a8:	ldr	r8, [pc, #1596]	; 11eec <__assert_fail@plt+0x924>
   118ac:	str	r3, [sp, #28]
   118b0:	b	11910 <__assert_fail@plt+0x348>
   118b4:	ldr	r3, [pc, #1576]	; 11ee4 <__assert_fail@plt+0x91c>
   118b8:	mov	r1, #3
   118bc:	mov	r0, #1
   118c0:	ldr	r5, [r3]
   118c4:	bl	18b1c <__assert_fail@plt+0x7554>
   118c8:	cmp	r0, #0
   118cc:	blt	11a90 <__assert_fail@plt+0x4c8>
   118d0:	tst	r0, #1024	; 0x400
   118d4:	bne	11a00 <__assert_fail@plt+0x438>
   118d8:	mov	r2, r5
   118dc:	add	r3, sp, #72	; 0x48
   118e0:	mov	r1, r6
   118e4:	mov	r0, #1
   118e8:	bl	12abc <__assert_fail@plt+0x14f4>
   118ec:	ldr	r3, [sp, #28]
   118f0:	and	r3, r3, r0
   118f4:	str	r3, [sp, #28]
   118f8:	mov	r0, r6
   118fc:	bl	11274 <free@plt>
   11900:	ldr	r3, [sp, #40]	; 0x28
   11904:	add	sl, sl, #1
   11908:	cmp	r3, sl
   1190c:	beq	11a34 <__assert_fail@plt+0x46c>
   11910:	ldr	r3, [sp, #32]
   11914:	mov	r1, #3
   11918:	mov	r0, #0
   1191c:	ldr	r2, [r3, #4]!
   11920:	mov	r4, r3
   11924:	str	r3, [sp, #32]
   11928:	bl	1680c <__assert_fail@plt+0x5244>
   1192c:	bl	17ec0 <__assert_fail@plt+0x68f8>
   11930:	ldr	r7, [r4]
   11934:	ldr	r1, [pc, #1460]	; 11ef0 <__assert_fail@plt+0x928>
   11938:	mov	r6, r0
   1193c:	mov	r0, r7
   11940:	bl	11238 <strcmp@plt>
   11944:	subs	r4, r0, #0
   11948:	beq	118b4 <__assert_fail@plt+0x2ec>
   1194c:	ldr	r3, [pc, #1424]	; 11ee4 <__assert_fail@plt+0x91c>
   11950:	ldr	r1, [pc, #1436]	; 11ef4 <__assert_fail@plt+0x92c>
   11954:	mov	r0, r7
   11958:	ldr	r5, [r3]
   1195c:	bl	13af8 <__assert_fail@plt+0x2530>
   11960:	subs	r4, r0, #0
   11964:	blt	119bc <__assert_fail@plt+0x3f4>
   11968:	mov	r2, r5
   1196c:	add	r3, sp, #72	; 0x48
   11970:	mov	r1, r6
   11974:	mov	r0, r4
   11978:	bl	12abc <__assert_fail@plt+0x14f4>
   1197c:	str	r0, [sp, #36]	; 0x24
   11980:	mov	r0, r4
   11984:	bl	115bc <close@plt>
   11988:	subs	r5, r0, #0
   1198c:	bne	11a58 <__assert_fail@plt+0x490>
   11990:	ldr	r3, [sp, #36]	; 0x24
   11994:	cmp	r3, #0
   11998:	beq	119a8 <__assert_fail@plt+0x3e0>
   1199c:	ldr	r3, [sp, #88]	; 0x58
   119a0:	cmp	r3, #0
   119a4:	bne	11aec <__assert_fail@plt+0x524>
   119a8:	ldr	r2, [sp, #28]
   119ac:	ldr	r3, [sp, #36]	; 0x24
   119b0:	and	r3, r3, r2
   119b4:	str	r3, [sp, #28]
   119b8:	b	118f8 <__assert_fail@plt+0x330>
   119bc:	bl	11448 <__errno_location@plt>
   119c0:	ldr	r4, [r0]
   119c4:	mov	r9, r0
   119c8:	cmp	r4, #13
   119cc:	beq	11ac4 <__assert_fail@plt+0x4fc>
   119d0:	mov	r2, #5
   119d4:	ldr	r1, [pc, #1308]	; 11ef8 <__assert_fail@plt+0x930>
   119d8:	mov	r0, #0
   119dc:	bl	112d4 <dcgettext@plt>
   119e0:	mov	r3, r6
   119e4:	mov	r1, r4
   119e8:	mov	r2, r0
   119ec:	mov	r0, #0
   119f0:	bl	113a0 <error@plt>
   119f4:	mov	r3, #0
   119f8:	str	r3, [sp, #36]	; 0x24
   119fc:	b	119a8 <__assert_fail@plt+0x3e0>
   11a00:	mov	r2, #5
   11a04:	ldr	r1, [pc, #1264]	; 11efc <__assert_fail@plt+0x934>
   11a08:	mov	r0, r4
   11a0c:	bl	112d4 <dcgettext@plt>
   11a10:	mov	r3, r6
   11a14:	mov	r1, r4
   11a18:	mov	r2, r0
   11a1c:	mov	r0, r4
   11a20:	bl	113a0 <error@plt>
   11a24:	mov	r0, r4
   11a28:	b	118ec <__assert_fail@plt+0x324>
   11a2c:	mov	r3, #1
   11a30:	str	r3, [sp, #28]
   11a34:	ldr	r3, [pc, #1112]	; 11e94 <__assert_fail@plt+0x8cc>
   11a38:	ldr	r2, [sp, #100]	; 0x64
   11a3c:	ldr	r1, [sp, #28]
   11a40:	ldr	r3, [r3]
   11a44:	eor	r0, r1, #1
   11a48:	cmp	r2, r3
   11a4c:	bne	11e70 <__assert_fail@plt+0x8a8>
   11a50:	add	sp, sp, #108	; 0x6c
   11a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a58:	bl	11448 <__errno_location@plt>
   11a5c:	mov	r3, #0
   11a60:	mov	r2, #5
   11a64:	ldr	r1, [pc, #1172]	; 11f00 <__assert_fail@plt+0x938>
   11a68:	str	r3, [sp, #36]	; 0x24
   11a6c:	ldr	r4, [r0]
   11a70:	mov	r0, r3
   11a74:	bl	112d4 <dcgettext@plt>
   11a78:	mov	r3, r6
   11a7c:	mov	r1, r4
   11a80:	mov	r2, r0
   11a84:	mov	r0, #0
   11a88:	bl	113a0 <error@plt>
   11a8c:	b	119a8 <__assert_fail@plt+0x3e0>
   11a90:	bl	11448 <__errno_location@plt>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #1124]	; 11f04 <__assert_fail@plt+0x93c>
   11a9c:	ldr	r5, [r0]
   11aa0:	mov	r0, r4
   11aa4:	bl	112d4 <dcgettext@plt>
   11aa8:	mov	r3, r6
   11aac:	mov	r1, r5
   11ab0:	mov	r2, r0
   11ab4:	mov	r0, r4
   11ab8:	bl	113a0 <error@plt>
   11abc:	mov	r0, r4
   11ac0:	b	118ec <__assert_fail@plt+0x324>
   11ac4:	ldrb	r3, [sp, #72]	; 0x48
   11ac8:	cmp	r3, #0
   11acc:	beq	119d0 <__assert_fail@plt+0x408>
   11ad0:	mov	r1, #128	; 0x80
   11ad4:	mov	r0, r7
   11ad8:	bl	11580 <chmod@plt>
   11adc:	cmp	r0, #0
   11ae0:	beq	11d5c <__assert_fail@plt+0x794>
   11ae4:	ldr	r4, [r9]
   11ae8:	b	119d0 <__assert_fail@plt+0x408>
   11aec:	mov	r0, r7
   11af0:	bl	17ec0 <__assert_fail@plt+0x68f8>
   11af4:	mov	r9, r0
   11af8:	str	r0, [sp, #44]	; 0x2c
   11afc:	bl	13a58 <__assert_fail@plt+0x2490>
   11b00:	mov	r4, r0
   11b04:	mov	r0, r9
   11b08:	bl	13984 <__assert_fail@plt+0x23bc>
   11b0c:	mov	r1, #3
   11b10:	mov	r2, r0
   11b14:	str	r0, [sp, #64]	; 0x40
   11b18:	mov	r0, r5
   11b1c:	bl	1680c <__assert_fail@plt+0x5244>
   11b20:	bl	17ec0 <__assert_fail@plt+0x68f8>
   11b24:	ldr	r3, [sp, #88]	; 0x58
   11b28:	cmp	r3, #3
   11b2c:	mvnne	r3, #0
   11b30:	strne	r3, [sp, #48]	; 0x30
   11b34:	str	r0, [sp, #52]	; 0x34
   11b38:	beq	11cc0 <__assert_fail@plt+0x6f8>
   11b3c:	ldrb	r3, [sp, #92]	; 0x5c
   11b40:	cmp	r3, #0
   11b44:	bne	11c60 <__assert_fail@plt+0x698>
   11b48:	ldr	r3, [sp, #88]	; 0x58
   11b4c:	cmp	r3, #1
   11b50:	beq	11c1c <__assert_fail@plt+0x654>
   11b54:	mov	r0, r4
   11b58:	bl	13aa8 <__assert_fail@plt+0x24e0>
   11b5c:	ldr	r2, [sp, #36]	; 0x24
   11b60:	str	sl, [sp, #68]	; 0x44
   11b64:	str	r2, [sp, #56]	; 0x38
   11b68:	str	r6, [sp, #60]	; 0x3c
   11b6c:	add	r3, r4, r0
   11b70:	sub	r9, r0, #1
   11b74:	mov	sl, r3
   11b78:	cmn	r9, #1
   11b7c:	add	r2, r9, #1
   11b80:	beq	11c14 <__assert_fail@plt+0x64c>
   11b84:	mov	r1, #48	; 0x30
   11b88:	mov	r0, r4
   11b8c:	mov	r5, r1
   11b90:	bl	11484 <memset@plt>
   11b94:	mov	r3, #0
   11b98:	strb	r3, [sl], #-1
   11b9c:	mov	r3, #1
   11ba0:	mvn	r2, #99	; 0x63
   11ba4:	str	r3, [sp]
   11ba8:	mov	r0, r2
   11bac:	ldr	r3, [sp, #44]	; 0x2c
   11bb0:	mov	r1, r7
   11bb4:	bl	174e8 <__assert_fail@plt+0x5f20>
   11bb8:	cmp	r0, #0
   11bbc:	beq	11cd4 <__assert_fail@plt+0x70c>
   11bc0:	bl	11448 <__errno_location@plt>
   11bc4:	ldr	r3, [r0]
   11bc8:	cmp	r3, #17
   11bcc:	bne	11d54 <__assert_fail@plt+0x78c>
   11bd0:	mov	fp, sl
   11bd4:	b	11be8 <__assert_fail@plt+0x620>
   11bd8:	cmp	r4, fp
   11bdc:	strb	r5, [r6, #1]
   11be0:	beq	11d54 <__assert_fail@plt+0x78c>
   11be4:	mov	fp, r6
   11be8:	mov	r6, fp
   11bec:	mov	r0, r8
   11bf0:	ldrb	r1, [r6], #-1
   11bf4:	bl	11430 <strchr@plt>
   11bf8:	cmp	r0, #0
   11bfc:	beq	11e30 <__assert_fail@plt+0x868>
   11c00:	ldrb	r3, [r0, #1]
   11c04:	cmp	r3, #0
   11c08:	beq	11bd8 <__assert_fail@plt+0x610>
   11c0c:	strb	r3, [fp]
   11c10:	b	11b9c <__assert_fail@plt+0x5d4>
   11c14:	ldr	r6, [sp, #60]	; 0x3c
   11c18:	ldr	sl, [sp, #68]	; 0x44
   11c1c:	mov	r0, r7
   11c20:	bl	112ec <unlink@plt>
   11c24:	subs	r4, r0, #0
   11c28:	bne	11c88 <__assert_fail@plt+0x6c0>
   11c2c:	ldrb	r3, [sp, #92]	; 0x5c
   11c30:	cmp	r3, #0
   11c34:	bne	11dd8 <__assert_fail@plt+0x810>
   11c38:	ldr	r4, [sp, #48]	; 0x30
   11c3c:	cmp	r4, #0
   11c40:	bge	11d74 <__assert_fail@plt+0x7ac>
   11c44:	ldr	r0, [sp, #44]	; 0x2c
   11c48:	bl	11274 <free@plt>
   11c4c:	ldr	r0, [sp, #64]	; 0x40
   11c50:	bl	11274 <free@plt>
   11c54:	ldr	r0, [sp, #52]	; 0x34
   11c58:	bl	11274 <free@plt>
   11c5c:	b	119a8 <__assert_fail@plt+0x3e0>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #668]	; 11f08 <__assert_fail@plt+0x940>
   11c68:	mov	r0, #0
   11c6c:	bl	112d4 <dcgettext@plt>
   11c70:	mov	r1, #0
   11c74:	mov	r3, r6
   11c78:	mov	r2, r0
   11c7c:	mov	r0, r1
   11c80:	bl	113a0 <error@plt>
   11c84:	b	11b48 <__assert_fail@plt+0x580>
   11c88:	bl	11448 <__errno_location@plt>
   11c8c:	mov	r3, #0
   11c90:	mov	r2, #5
   11c94:	ldr	r1, [pc, #624]	; 11f0c <__assert_fail@plt+0x944>
   11c98:	str	r3, [sp, #36]	; 0x24
   11c9c:	ldr	r4, [r0]
   11ca0:	mov	r0, r3
   11ca4:	bl	112d4 <dcgettext@plt>
   11ca8:	mov	r3, r6
   11cac:	mov	r1, r4
   11cb0:	mov	r2, r0
   11cb4:	mov	r0, #0
   11cb8:	bl	113a0 <error@plt>
   11cbc:	b	11c38 <__assert_fail@plt+0x670>
   11cc0:	mov	r1, #18688	; 0x4900
   11cc4:	ldr	r0, [sp, #64]	; 0x40
   11cc8:	bl	13af8 <__assert_fail@plt+0x2530>
   11ccc:	str	r0, [sp, #48]	; 0x30
   11cd0:	b	11b3c <__assert_fail@plt+0x574>
   11cd4:	ldr	r3, [sp, #48]	; 0x30
   11cd8:	cmp	r3, #0
   11cdc:	blt	11cf8 <__assert_fail@plt+0x730>
   11ce0:	ldrd	r0, [sp, #48]	; 0x30
   11ce4:	bl	12078 <__assert_fail@plt+0xab0>
   11ce8:	ldr	r3, [sp, #36]	; 0x24
   11cec:	cmp	r0, #0
   11cf0:	movne	r3, #0
   11cf4:	str	r3, [sp, #36]	; 0x24
   11cf8:	ldrb	r3, [sp, #92]	; 0x5c
   11cfc:	cmp	r3, #0
   11d00:	beq	11d3c <__assert_fail@plt+0x774>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #512]	; 11f10 <__assert_fail@plt+0x948>
   11d0c:	mov	r0, #0
   11d10:	bl	112d4 <dcgettext@plt>
   11d14:	ldrd	r2, [sp, #56]	; 0x38
   11d18:	mov	r1, #0
   11d1c:	str	r1, [sp, #56]	; 0x38
   11d20:	cmp	r2, #0
   11d24:	ldr	r2, [sp, #44]	; 0x2c
   11d28:	moveq	r3, r7
   11d2c:	str	r2, [sp]
   11d30:	mov	r2, r0
   11d34:	mov	r0, r1
   11d38:	bl	113a0 <error@plt>
   11d3c:	ldr	r3, [sp, #44]	; 0x2c
   11d40:	add	r2, r9, #2
   11d44:	sub	r0, r4, r3
   11d48:	add	r0, r7, r0
   11d4c:	mov	r1, r4
   11d50:	bl	1128c <memcpy@plt>
   11d54:	sub	r9, r9, #1
   11d58:	b	11b78 <__assert_fail@plt+0x5b0>
   11d5c:	ldr	r1, [pc, #400]	; 11ef4 <__assert_fail@plt+0x92c>
   11d60:	mov	r0, r7
   11d64:	bl	13af8 <__assert_fail@plt+0x2530>
   11d68:	subs	r4, r0, #0
   11d6c:	bge	11968 <__assert_fail@plt+0x3a0>
   11d70:	b	11ae4 <__assert_fail@plt+0x51c>
   11d74:	ldr	r1, [sp, #52]	; 0x34
   11d78:	mov	r0, r4
   11d7c:	bl	12078 <__assert_fail@plt+0xab0>
   11d80:	ldr	r3, [sp, #36]	; 0x24
   11d84:	cmp	r0, #0
   11d88:	movne	r3, #0
   11d8c:	mov	r0, r4
   11d90:	str	r3, [sp, #36]	; 0x24
   11d94:	bl	115bc <close@plt>
   11d98:	cmp	r0, #0
   11d9c:	beq	11c44 <__assert_fail@plt+0x67c>
   11da0:	bl	11448 <__errno_location@plt>
   11da4:	mov	r3, #0
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #332]	; 11f00 <__assert_fail@plt+0x938>
   11db0:	str	r3, [sp, #36]	; 0x24
   11db4:	ldr	r4, [r0]
   11db8:	mov	r0, r3
   11dbc:	bl	112d4 <dcgettext@plt>
   11dc0:	ldr	r3, [sp, #52]	; 0x34
   11dc4:	mov	r1, r4
   11dc8:	mov	r2, r0
   11dcc:	mov	r0, #0
   11dd0:	bl	113a0 <error@plt>
   11dd4:	b	11c44 <__assert_fail@plt+0x67c>
   11dd8:	mov	r2, #5
   11ddc:	ldr	r1, [pc, #304]	; 11f14 <__assert_fail@plt+0x94c>
   11de0:	bl	112d4 <dcgettext@plt>
   11de4:	mov	r3, r6
   11de8:	mov	r1, r4
   11dec:	mov	r2, r0
   11df0:	mov	r0, r4
   11df4:	bl	113a0 <error@plt>
   11df8:	b	11c38 <__assert_fail@plt+0x670>
   11dfc:	mov	r2, #5
   11e00:	ldr	r1, [pc, #272]	; 11f18 <__assert_fail@plt+0x950>
   11e04:	mov	r0, r3
   11e08:	mov	r4, r3
   11e0c:	bl	112d4 <dcgettext@plt>
   11e10:	mov	r1, r4
   11e14:	mov	r2, r0
   11e18:	mov	r0, r4
   11e1c:	bl	113a0 <error@plt>
   11e20:	mov	r0, #1
   11e24:	bl	13168 <__assert_fail@plt+0x1ba0>
   11e28:	mov	r0, r4
   11e2c:	bl	13168 <__assert_fail@plt+0x1ba0>
   11e30:	ldr	r3, [pc, #228]	; 11f1c <__assert_fail@plt+0x954>
   11e34:	ldr	r2, [pc, #228]	; 11f20 <__assert_fail@plt+0x958>
   11e38:	ldr	r1, [pc, #228]	; 11f24 <__assert_fail@plt+0x95c>
   11e3c:	ldr	r0, [pc, #228]	; 11f28 <__assert_fail@plt+0x960>
   11e40:	bl	115c8 <__assert_fail@plt>
   11e44:	bl	11448 <__errno_location@plt>
   11e48:	mov	r2, r5
   11e4c:	mov	r1, #3
   11e50:	ldr	r4, [r0]
   11e54:	mov	r0, r7
   11e58:	bl	1680c <__assert_fail@plt+0x5244>
   11e5c:	mov	r1, r4
   11e60:	ldr	r2, [pc, #196]	; 11f2c <__assert_fail@plt+0x964>
   11e64:	mov	r3, r0
   11e68:	mov	r0, #1
   11e6c:	bl	113a0 <error@plt>
   11e70:	bl	112e0 <__stack_chk_fail@plt>
   11e74:	mov	r2, #5
   11e78:	ldr	r1, [pc, #176]	; 11f30 <__assert_fail@plt+0x968>
   11e7c:	mov	r0, r4
   11e80:	bl	112d4 <dcgettext@plt>
   11e84:	mov	r1, r4
   11e88:	mov	r2, r0
   11e8c:	mov	r0, #1
   11e90:	bl	113a0 <error@plt>
   11e94:	andeq	fp, r2, r8, lsl #30
   11e98:	andeq	sl, r1, r4, lsl #10
   11e9c:	andeq	sl, r1, r8, ror r8
   11ea0:	andeq	sl, r1, ip, asr #15
   11ea4:	andeq	r3, r1, ip, lsr #17
   11ea8:	andeq	sl, r1, r8, lsl #18
   11eac:	andeq	r9, r1, r0, ror #16
   11eb0:	andeq	ip, r2, r8, asr #3
   11eb4:	andeq	ip, r2, r4, ror #2
   11eb8:	andeq	r9, r1, r4, ror r9
   11ebc:	andeq	sl, r1, ip, asr #17
   11ec0:	andeq	sl, r1, ip, lsl #17
   11ec4:	andeq	ip, r2, r4, asr #3
   11ec8:	andeq	ip, r2, r0, ror #2
   11ecc:	strdeq	sl, [r1], -ip
   11ed0:	andeq	r9, r1, r8, ror #23
   11ed4:	andeq	sl, r1, r8, asr #15
   11ed8:	ldrdeq	sl, [r1], -r8
   11edc:	andeq	sl, r1, ip, ror #17
   11ee0:			; <UNDEFINED> instruction: 0x0002c1b8
   11ee4:	ldrdeq	ip, [r2], -r0
   11ee8:	andeq	r2, r1, r8, lsr #32
   11eec:	andeq	r9, r1, r0, asr #20
   11ef0:	andeq	sl, r1, ip, lsr #18
   11ef4:	andeq	r0, r0, r1, lsl #2
   11ef8:	andeq	sl, r1, r4, ror r9
   11efc:	andeq	sl, r1, r4, asr #18
   11f00:	muleq	r1, r4, r9
   11f04:	andeq	sl, r1, r0, lsr r9
   11f08:	andeq	sl, r1, r8, lsr #19
   11f0c:	ldrdeq	sl, [r1], -ip
   11f10:	andeq	sl, r1, r8, asr #19
   11f14:	strdeq	sl, [r1], -r4
   11f18:	andeq	sl, r1, r4, lsl r9
   11f1c:	andeq	r9, r1, r4, lsl #21
   11f20:	andeq	r0, r0, sl, lsl #8
   11f24:			; <UNDEFINED> instruction: 0x0001a9b8
   11f28:	andeq	sl, r1, r4, asr #19
   11f2c:	andeq	sl, r1, r0, ror #22
   11f30:	andeq	sl, r1, r8, lsr #17
   11f34:	mov	fp, #0
   11f38:	mov	lr, #0
   11f3c:	pop	{r1}		; (ldr r1, [sp], #4)
   11f40:	mov	r2, sp
   11f44:	push	{r2}		; (str r2, [sp, #-4]!)
   11f48:	push	{r0}		; (str r0, [sp, #-4]!)
   11f4c:	ldr	ip, [pc, #16]	; 11f64 <__assert_fail@plt+0x99c>
   11f50:	push	{ip}		; (str ip, [sp, #-4]!)
   11f54:	ldr	r0, [pc, #12]	; 11f68 <__assert_fail@plt+0x9a0>
   11f58:	ldr	r3, [pc, #12]	; 11f6c <__assert_fail@plt+0x9a4>
   11f5c:	bl	113d0 <__libc_start_main@plt>
   11f60:	bl	115b0 <abort@plt>
   11f64:	andeq	r9, r1, r8, lsr r8
   11f68:	ldrdeq	r1, [r1], -r8
   11f6c:	ldrdeq	r9, [r1], -r8
   11f70:	ldr	r3, [pc, #20]	; 11f8c <__assert_fail@plt+0x9c4>
   11f74:	ldr	r2, [pc, #20]	; 11f90 <__assert_fail@plt+0x9c8>
   11f78:	add	r3, pc, r3
   11f7c:	ldr	r2, [r3, r2]
   11f80:	cmp	r2, #0
   11f84:	bxeq	lr
   11f88:	b	113e8 <__gmon_start__@plt>
   11f8c:	andeq	sl, r1, r0, lsl #1
   11f90:	andeq	r0, r0, r4, asr r1
   11f94:	ldr	r0, [pc, #24]	; 11fb4 <__assert_fail@plt+0x9ec>
   11f98:	ldr	r3, [pc, #24]	; 11fb8 <__assert_fail@plt+0x9f0>
   11f9c:	cmp	r3, r0
   11fa0:	bxeq	lr
   11fa4:	ldr	r3, [pc, #16]	; 11fbc <__assert_fail@plt+0x9f4>
   11fa8:	cmp	r3, #0
   11fac:	bxeq	lr
   11fb0:	bx	r3
   11fb4:	andeq	ip, r2, ip, lsr #3
   11fb8:	andeq	ip, r2, ip, lsr #3
   11fbc:	andeq	r0, r0, r0
   11fc0:	ldr	r0, [pc, #36]	; 11fec <__assert_fail@plt+0xa24>
   11fc4:	ldr	r1, [pc, #36]	; 11ff0 <__assert_fail@plt+0xa28>
   11fc8:	sub	r1, r1, r0
   11fcc:	asr	r1, r1, #2
   11fd0:	add	r1, r1, r1, lsr #31
   11fd4:	asrs	r1, r1, #1
   11fd8:	bxeq	lr
   11fdc:	ldr	r3, [pc, #16]	; 11ff4 <__assert_fail@plt+0xa2c>
   11fe0:	cmp	r3, #0
   11fe4:	bxeq	lr
   11fe8:	bx	r3
   11fec:	andeq	ip, r2, ip, lsr #3
   11ff0:	andeq	ip, r2, ip, lsr #3
   11ff4:	andeq	r0, r0, r0
   11ff8:	push	{r4, lr}
   11ffc:	ldr	r4, [pc, #24]	; 1201c <__assert_fail@plt+0xa54>
   12000:	ldrb	r3, [r4]
   12004:	cmp	r3, #0
   12008:	popne	{r4, pc}
   1200c:	bl	11f94 <__assert_fail@plt+0x9cc>
   12010:	mov	r3, #1
   12014:	strb	r3, [r4]
   12018:	pop	{r4, pc}
   1201c:	andeq	ip, r2, ip, asr #3
   12020:	b	11fc0 <__assert_fail@plt+0x9f8>
   12024:	andeq	r0, r0, r0
   12028:	ldr	r3, [pc, #4]	; 12034 <__assert_fail@plt+0xa6c>
   1202c:	ldr	r0, [r3]
   12030:	b	16c44 <__assert_fail@plt+0x567c>
   12034:	ldrdeq	ip, [r2], -r0
   12038:	push	{r4, r5, r6, lr}
   1203c:	mov	r4, r1
   12040:	mov	r1, #3
   12044:	mov	r5, r0
   12048:	bl	18b1c <__assert_fail@plt+0x7554>
   1204c:	cmp	r0, #0
   12050:	pople	{r4, r5, r6, pc}
   12054:	cmp	r4, #0
   12058:	orrne	r2, r0, #65536	; 0x10000
   1205c:	biceq	r2, r0, #65536	; 0x10000
   12060:	cmp	r2, r0
   12064:	popeq	{r4, r5, r6, pc}
   12068:	mov	r0, r5
   1206c:	mov	r1, #4
   12070:	pop	{r4, r5, r6, lr}
   12074:	b	18b1c <__assert_fail@plt+0x7554>
   12078:	push	{r4, r5, r6, r7, r8, lr}
   1207c:	mov	r7, r1
   12080:	mov	r8, r0
   12084:	bl	115a4 <fdatasync@plt>
   12088:	cmp	r0, #0
   1208c:	beq	120e4 <__assert_fail@plt+0xb1c>
   12090:	bl	11448 <__errno_location@plt>
   12094:	ldr	r4, [r0]
   12098:	mov	r6, r0
   1209c:	sub	r0, r4, #21
   120a0:	cmp	r4, #9
   120a4:	cmpne	r0, #1
   120a8:	movls	r5, #1
   120ac:	movhi	r5, #0
   120b0:	bhi	120ec <__assert_fail@plt+0xb24>
   120b4:	mov	r0, r8
   120b8:	bl	1122c <fsync@plt>
   120bc:	cmp	r0, #0
   120c0:	beq	120e4 <__assert_fail@plt+0xb1c>
   120c4:	ldr	r4, [r6]
   120c8:	sub	r3, r4, #21
   120cc:	cmp	r4, #9
   120d0:	cmpne	r3, #1
   120d4:	movls	r5, #1
   120d8:	movhi	r5, #0
   120dc:	bhi	1211c <__assert_fail@plt+0xb54>
   120e0:	bl	11574 <sync@plt>
   120e4:	mov	r0, #0
   120e8:	pop	{r4, r5, r6, r7, r8, pc}
   120ec:	ldr	r1, [pc, #52]	; 12128 <__assert_fail@plt+0xb60>
   120f0:	mov	r2, #5
   120f4:	mov	r0, r5
   120f8:	bl	112d4 <dcgettext@plt>
   120fc:	mov	r3, r7
   12100:	mov	r1, r4
   12104:	mov	r2, r0
   12108:	mov	r0, r5
   1210c:	bl	113a0 <error@plt>
   12110:	str	r4, [r6]
   12114:	mvn	r0, #0
   12118:	pop	{r4, r5, r6, r7, r8, pc}
   1211c:	mov	r2, #5
   12120:	ldr	r1, [pc, #4]	; 1212c <__assert_fail@plt+0xb64>
   12124:	b	120f4 <__assert_fail@plt+0xb2c>
   12128:	andeq	r9, r1, r0, lsr #21
   1212c:	andeq	r9, r1, ip, lsl #21
   12130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12134:	sub	sp, sp, #2080	; 0x820
   12138:	sub	sp, sp, #12
   1213c:	mov	r4, r3
   12140:	str	r3, [sp, #80]	; 0x50
   12144:	ldr	r3, [pc, #2356]	; 12a80 <__assert_fail@plt+0x14b8>
   12148:	str	r2, [sp, #44]	; 0x2c
   1214c:	mov	r8, r0
   12150:	ldr	r3, [r3]
   12154:	mov	r6, r1
   12158:	str	r3, [sp, #2084]	; 0x824
   1215c:	bl	1143c <getpagesize@plt>
   12160:	ldr	r3, [sp, #2128]	; 0x850
   12164:	cmp	r3, #0
   12168:	ldrd	r2, [r4]
   1216c:	strd	r2, [sp, #32]
   12170:	ldr	r3, [sp, #2132]	; 0x854
   12174:	str	r3, [sp, #76]	; 0x4c
   12178:	mov	r7, r0
   1217c:	ble	12718 <__assert_fail@plt+0x1150>
   12180:	ldr	r3, [sp, #2128]	; 0x850
   12184:	lsl	r3, r3, #20
   12188:	lsr	r3, r3, #20
   1218c:	orr	r2, r3, r3, lsl #12
   12190:	lsr	r3, r3, #4
   12194:	lsr	r1, r2, #8
   12198:	uxtb	r2, r2
   1219c:	uxtb	r1, r1
   121a0:	cmp	r2, r3
   121a4:	cmpeq	r1, r3
   121a8:	beq	12718 <__assert_fail@plt+0x1150>
   121ac:	mov	r4, #61440	; 0xf000
   121b0:	str	r4, [sp, #56]	; 0x38
   121b4:	sub	r5, r7, #1
   121b8:	add	r0, r5, r4
   121bc:	bl	17c94 <__assert_fail@plt+0x66cc>
   121c0:	mov	r1, r7
   121c4:	add	r5, r0, r5
   121c8:	str	r0, [sp, #72]	; 0x48
   121cc:	mov	r0, r5
   121d0:	bl	1916c <__assert_fail@plt+0x7ba4>
   121d4:	ldrd	sl, [sp, #32]
   121d8:	cmp	sl, #1
   121dc:	sbcs	r3, fp, #0
   121e0:	sub	r5, r5, r1
   121e4:	blt	121fc <__assert_fail@plt+0xc34>
   121e8:	ldr	r2, [sp, #56]	; 0x38
   121ec:	mov	r3, #0
   121f0:	cmp	sl, r2
   121f4:	sbcs	r3, fp, r3
   121f8:	blt	122a4 <__assert_fail@plt+0xcdc>
   121fc:	mov	r1, #1
   12200:	mov	r0, r8
   12204:	bl	12038 <__assert_fail@plt+0xa70>
   12208:	mov	r3, #0
   1220c:	str	r3, [sp, #48]	; 0x30
   12210:	ldr	r3, [r6, #16]
   12214:	and	r3, r3, #61440	; 0xf000
   12218:	cmp	r3, #8192	; 0x2000
   1221c:	beq	122bc <__assert_fail@plt+0xcf4>
   12220:	mov	r3, #0
   12224:	str	r3, [sp]
   12228:	mov	r2, #0
   1222c:	mov	r3, #0
   12230:	mov	r0, r8
   12234:	bl	11358 <lseek64@plt>
   12238:	cmp	r0, #1
   1223c:	sbcs	r3, r1, #0
   12240:	blt	122f0 <__assert_fail@plt+0xd28>
   12244:	bl	11448 <__errno_location@plt>
   12248:	mov	r3, #22
   1224c:	mov	r4, r3
   12250:	str	r3, [r0]
   12254:	ldr	r1, [pc, #2088]	; 12a84 <__assert_fail@plt+0x14bc>
   12258:	mov	r2, #5
   1225c:	mov	r0, #0
   12260:	bl	112d4 <dcgettext@plt>
   12264:	ldr	r3, [sp, #44]	; 0x2c
   12268:	mov	r1, r4
   1226c:	mov	r2, r0
   12270:	mov	r0, #0
   12274:	bl	113a0 <error@plt>
   12278:	ldr	r0, [sp, #72]	; 0x48
   1227c:	bl	11274 <free@plt>
   12280:	mvn	r0, #0
   12284:	ldr	r3, [pc, #2036]	; 12a80 <__assert_fail@plt+0x14b8>
   12288:	ldr	r2, [sp, #2084]	; 0x824
   1228c:	ldr	r3, [r3]
   12290:	cmp	r2, r3
   12294:	bne	12a64 <__assert_fail@plt+0x149c>
   12298:	add	sp, sp, #2080	; 0x820
   1229c:	add	sp, sp, #12
   122a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a4:	mov	r3, #1
   122a8:	str	r3, [sp, #48]	; 0x30
   122ac:	ldr	r3, [r6, #16]
   122b0:	and	r3, r3, #61440	; 0xf000
   122b4:	cmp	r3, #8192	; 0x2000
   122b8:	bne	12220 <__assert_fail@plt+0xc58>
   122bc:	mov	r0, #6
   122c0:	add	ip, sp, #120	; 0x78
   122c4:	mov	r3, #1
   122c8:	strh	r0, [sp, #112]	; 0x70
   122cc:	add	r2, sp, #112	; 0x70
   122d0:	ldr	r1, [pc, #1968]	; 12a88 <__assert_fail@plt+0x14c0>
   122d4:	mov	r0, r8
   122d8:	str	ip, [sp, #60]	; 0x3c
   122dc:	str	r3, [sp, #116]	; 0x74
   122e0:	bl	1134c <ioctl@plt>
   122e4:	cmp	r0, #0
   122e8:	bne	12220 <__assert_fail@plt+0xc58>
   122ec:	b	12300 <__assert_fail@plt+0xd38>
   122f0:	orrs	r3, r0, r1
   122f4:	bne	12a68 <__assert_fail@plt+0x14a0>
   122f8:	add	r3, sp, #120	; 0x78
   122fc:	str	r3, [sp, #60]	; 0x3c
   12300:	ldr	r3, [sp, #2128]	; 0x850
   12304:	cmp	r3, #0
   12308:	blt	12778 <__assert_fail@plt+0x11b0>
   1230c:	ldr	r2, [sp, #2128]	; 0x850
   12310:	ldr	r1, [sp, #2128]	; 0x850
   12314:	ldr	r3, [pc, #1904]	; 12a8c <__assert_fail@plt+0x14c4>
   12318:	lsl	r2, r2, #20
   1231c:	ldrd	sl, [sp, #32]
   12320:	and	r3, r3, r1, lsl #12
   12324:	lsr	r2, r2, #20
   12328:	orr	r3, r3, r2
   1232c:	mov	r1, #0
   12330:	lsr	ip, r3, #8
   12334:	cmp	r1, fp
   12338:	cmpeq	r4, sl
   1233c:	mov	r7, fp
   12340:	lsr	r2, r2, #4
   12344:	uxtb	r1, ip
   12348:	uxtb	r3, r3
   1234c:	bhi	127c4 <__assert_fail@plt+0x11fc>
   12350:	lsr	r6, r4, #1
   12354:	strb	r2, [r5]
   12358:	strb	r1, [r5, #1]
   1235c:	strb	r3, [r5, #2]
   12360:	mov	r7, #3
   12364:	mov	r2, r7
   12368:	add	r0, r5, r7
   1236c:	mov	r1, r5
   12370:	lsl	r7, r7, #1
   12374:	bl	1128c <memcpy@plt>
   12378:	cmp	r7, r6
   1237c:	bls	12364 <__assert_fail@plt+0xd9c>
   12380:	ldr	r3, [sp, #2128]	; 0x850
   12384:	cmp	r4, r7
   12388:	and	r6, r3, #4096	; 0x1000
   1238c:	bhi	127e8 <__assert_fail@plt+0x1220>
   12390:	cmp	r6, #0
   12394:	bne	12798 <__assert_fail@plt+0x11d0>
   12398:	ldrb	r1, [r5, #2]
   1239c:	ldrb	r2, [r5, #1]
   123a0:	ldrb	r3, [r5]
   123a4:	ldr	r0, [sp, #60]	; 0x3c
   123a8:	str	r1, [sp, #8]
   123ac:	str	r2, [sp, #4]
   123b0:	str	r3, [sp]
   123b4:	mov	r2, #7
   123b8:	ldr	r3, [pc, #1744]	; 12a90 <__assert_fail@plt+0x14c8>
   123bc:	mov	r1, #1
   123c0:	bl	11454 <__sprintf_chk@plt>
   123c4:	ldr	r3, [sp, #2140]	; 0x85c
   123c8:	cmp	r3, #0
   123cc:	bne	12728 <__assert_fail@plt+0x1160>
   123d0:	ldr	r2, [pc, #1724]	; 12a94 <__assert_fail@plt+0x14cc>
   123d4:	mov	sl, #0
   123d8:	mov	fp, #0
   123dc:	mov	r7, r5
   123e0:	mov	r3, #0
   123e4:	str	r3, [sp, #52]	; 0x34
   123e8:	str	r2, [sp, #84]	; 0x54
   123ec:	str	r3, [sp, #96]	; 0x60
   123f0:	ldrd	r0, [sp, #32]
   123f4:	cmp	r0, #0
   123f8:	sbcs	r3, r1, #0
   123fc:	blt	126e4 <__assert_fail@plt+0x111c>
   12400:	subs	r3, r0, sl
   12404:	str	r3, [sp, #64]	; 0x40
   12408:	sbc	r3, r1, fp
   1240c:	str	r3, [sp, #68]	; 0x44
   12410:	ldrd	r4, [sp, #64]	; 0x40
   12414:	ldr	r2, [sp, #56]	; 0x38
   12418:	mov	r3, #0
   1241c:	cmp	r4, r2
   12420:	sbcs	r3, r5, r3
   12424:	bge	126e4 <__assert_fail@plt+0x111c>
   12428:	cmp	r0, sl
   1242c:	sbcs	r3, r1, fp
   12430:	blt	129f4 <__assert_fail@plt+0x142c>
   12434:	subs	r5, r0, sl
   12438:	beq	129f4 <__assert_fail@plt+0x142c>
   1243c:	ldr	r3, [sp, #2128]	; 0x850
   12440:	cmp	r3, #0
   12444:	blt	126f4 <__assert_fail@plt+0x112c>
   12448:	mov	r4, #0
   1244c:	strd	sl, [sp, #24]
   12450:	b	1245c <__assert_fail@plt+0xe94>
   12454:	cmp	r4, r5
   12458:	bcs	1254c <__assert_fail@plt+0xf84>
   1245c:	sub	r2, r5, r4
   12460:	add	r1, r7, r4
   12464:	mov	r0, r8
   12468:	bl	114a8 <write@plt>
   1246c:	cmp	r0, #0
   12470:	addgt	r4, r4, r0
   12474:	bgt	12454 <__assert_fail@plt+0xe8c>
   12478:	ldrd	r2, [sp, #32]
   1247c:	cmp	r2, #0
   12480:	sbcs	r3, r3, #0
   12484:	blt	12698 <__assert_fail@plt+0x10d0>
   12488:	bl	11448 <__errno_location@plt>
   1248c:	ldr	r3, [sp, #48]	; 0x30
   12490:	eor	r6, r3, #1
   12494:	ldr	r9, [r0]
   12498:	mov	sl, r0
   1249c:	cmp	r9, #22
   124a0:	movne	r6, #0
   124a4:	andeq	r6, r6, #1
   124a8:	cmp	r6, #0
   124ac:	bne	126cc <__assert_fail@plt+0x1104>
   124b0:	mov	r2, #5
   124b4:	ldr	r1, [pc, #1500]	; 12a98 <__assert_fail@plt+0x14d0>
   124b8:	mov	r0, r6
   124bc:	bl	112d4 <dcgettext@plt>
   124c0:	add	r2, sp, #1424	; 0x590
   124c4:	add	r2, r2, #8
   124c8:	mov	fp, r0
   124cc:	ldrd	r0, [sp, #24]
   124d0:	adds	r0, r0, r4
   124d4:	adc	r1, r1, #0
   124d8:	bl	14710 <__assert_fail@plt+0x3148>
   124dc:	mov	r2, fp
   124e0:	ldr	r3, [sp, #44]	; 0x2c
   124e4:	mov	r1, r9
   124e8:	str	r0, [sp]
   124ec:	mov	r0, r6
   124f0:	bl	113a0 <error@plt>
   124f4:	cmp	r9, #5
   124f8:	bne	12278 <__assert_fail@plt+0xcb0>
   124fc:	mvn	r4, r4, lsr #9
   12500:	mvn	r4, r4, lsl #9
   12504:	cmp	r4, r5
   12508:	bcs	12278 <__assert_fail@plt+0xcb0>
   1250c:	ldrd	r2, [sp, #24]
   12510:	add	r4, r4, #1
   12514:	str	r6, [sp]
   12518:	adds	r2, r2, r4
   1251c:	adc	r3, r3, #0
   12520:	mov	r0, r8
   12524:	bl	11358 <lseek64@plt>
   12528:	mvn	r3, #0
   1252c:	mvn	r2, #0
   12530:	cmp	r1, r3
   12534:	cmpeq	r0, r2
   12538:	beq	12708 <__assert_fail@plt+0x1140>
   1253c:	mov	r3, #1
   12540:	cmp	r4, r5
   12544:	str	r3, [sp, #52]	; 0x34
   12548:	bcc	1245c <__assert_fail@plt+0xe94>
   1254c:	ldrd	sl, [sp, #24]
   12550:	mvn	r3, #0
   12554:	mov	r5, #0
   12558:	subs	r3, r3, sl
   1255c:	str	r3, [sp, #88]	; 0x58
   12560:	mvn	r3, #-2147483648	; 0x80000000
   12564:	sbc	r3, r3, fp
   12568:	str	r3, [sp, #92]	; 0x5c
   1256c:	ldrd	r2, [sp, #88]	; 0x58
   12570:	cmp	r2, r4
   12574:	sbcs	r3, r3, r5
   12578:	blt	129c8 <__assert_fail@plt+0x1400>
   1257c:	ldr	r3, [sp, #2140]	; 0x85c
   12580:	adds	sl, sl, r4
   12584:	adc	fp, fp, r5
   12588:	cmp	r3, #0
   1258c:	beq	123f0 <__assert_fail@plt+0xe28>
   12590:	ldrd	r2, [sp, #32]
   12594:	cmp	r3, fp
   12598:	cmpeq	r2, sl
   1259c:	beq	1289c <__assert_fail@plt+0x12d4>
   125a0:	mov	r0, #0
   125a4:	bl	112b0 <time@plt>
   125a8:	ldr	r2, [sp, #100]	; 0x64
   125ac:	cmp	r2, r0
   125b0:	str	r0, [sp, #96]	; 0x60
   125b4:	bgt	123f0 <__assert_fail@plt+0xe28>
   125b8:	mov	r0, #1
   125bc:	mov	r1, #0
   125c0:	ldr	r3, [pc, #1236]	; 12a9c <__assert_fail@plt+0x14d4>
   125c4:	strd	r0, [sp, #8]
   125c8:	strd	r0, [sp]
   125cc:	add	r2, sp, #780	; 0x30c
   125d0:	mov	r1, fp
   125d4:	mov	r0, sl
   125d8:	bl	13b58 <__assert_fail@plt+0x2590>
   125dc:	mov	r1, r0
   125e0:	mov	r4, r0
   125e4:	ldr	r0, [sp, #84]	; 0x54
   125e8:	bl	11238 <strcmp@plt>
   125ec:	cmp	r0, #0
   125f0:	beq	123f0 <__assert_fail@plt+0xe28>
   125f4:	ldrd	r2, [sp, #32]
   125f8:	cmp	r2, #0
   125fc:	sbcs	r3, r3, #0
   12600:	bge	128e8 <__assert_fail@plt+0x1320>
   12604:	mov	r2, #5
   12608:	ldr	r1, [pc, #1168]	; 12aa0 <__assert_fail@plt+0x14d8>
   1260c:	mov	r0, #0
   12610:	bl	112d4 <dcgettext@plt>
   12614:	ldr	r3, [sp, #60]	; 0x3c
   12618:	mov	r1, #0
   1261c:	str	r3, [sp, #8]
   12620:	ldr	r3, [sp, #2140]	; 0x85c
   12624:	str	r4, [sp, #12]
   12628:	str	r3, [sp, #4]
   1262c:	ldr	r3, [sp, #2136]	; 0x858
   12630:	str	r3, [sp]
   12634:	ldr	r3, [sp, #44]	; 0x2c
   12638:	mov	r2, r0
   1263c:	mov	r0, r1
   12640:	bl	113a0 <error@plt>
   12644:	mov	r1, r4
   12648:	mov	r2, #652	; 0x28c
   1264c:	add	r0, sp, #128	; 0x80
   12650:	bl	1137c <__strcpy_chk@plt>
   12654:	ldr	r1, [sp, #44]	; 0x2c
   12658:	mov	r0, r8
   1265c:	bl	12078 <__assert_fail@plt+0xab0>
   12660:	ldr	r3, [sp, #96]	; 0x60
   12664:	add	r3, r3, #5
   12668:	str	r3, [sp, #100]	; 0x64
   1266c:	cmp	r0, #0
   12670:	beq	129e8 <__assert_fail@plt+0x1420>
   12674:	bl	11448 <__errno_location@plt>
   12678:	ldr	r3, [r0]
   1267c:	cmp	r3, #5
   12680:	bne	12278 <__assert_fail@plt+0xcb0>
   12684:	add	r3, sp, #128	; 0x80
   12688:	str	r3, [sp, #84]	; 0x54
   1268c:	mov	r3, #1
   12690:	str	r3, [sp, #52]	; 0x34
   12694:	b	123f0 <__assert_fail@plt+0xe28>
   12698:	cmp	r0, #0
   1269c:	beq	1284c <__assert_fail@plt+0x1284>
   126a0:	bl	11448 <__errno_location@plt>
   126a4:	ldr	r9, [r0]
   126a8:	cmp	r9, #28
   126ac:	beq	1284c <__assert_fail@plt+0x1284>
   126b0:	ldr	r3, [sp, #48]	; 0x30
   126b4:	eor	r6, r3, #1
   126b8:	cmp	r9, #22
   126bc:	movne	r6, #0
   126c0:	andeq	r6, r6, #1
   126c4:	cmp	r6, #0
   126c8:	beq	12804 <__assert_fail@plt+0x123c>
   126cc:	mov	r1, #0
   126d0:	mov	r0, r8
   126d4:	bl	12038 <__assert_fail@plt+0xa70>
   126d8:	mov	r3, #1
   126dc:	str	r3, [sp, #48]	; 0x30
   126e0:	b	12454 <__assert_fail@plt+0xe8c>
   126e4:	ldr	r3, [sp, #2128]	; 0x850
   126e8:	ldr	r5, [sp, #56]	; 0x38
   126ec:	cmp	r3, #0
   126f0:	bge	12448 <__assert_fail@plt+0xe80>
   126f4:	mov	r2, r5
   126f8:	mov	r1, r7
   126fc:	ldr	r0, [sp, #76]	; 0x4c
   12700:	bl	16f6c <__assert_fail@plt+0x59a4>
   12704:	b	12448 <__assert_fail@plt+0xe80>
   12708:	ldr	r4, [sl]
   1270c:	mov	r2, r9
   12710:	ldr	r1, [pc, #908]	; 12aa4 <__assert_fail@plt+0x14dc>
   12714:	b	1225c <__assert_fail@plt+0xc94>
   12718:	mov	r3, #65536	; 0x10000
   1271c:	ldr	r4, [pc, #900]	; 12aa8 <__assert_fail@plt+0x14e0>
   12720:	str	r3, [sp, #56]	; 0x38
   12724:	b	121b4 <__assert_fail@plt+0xbec>
   12728:	mov	r2, #5
   1272c:	ldr	r1, [pc, #888]	; 12aac <__assert_fail@plt+0x14e4>
   12730:	mov	r0, #0
   12734:	bl	112d4 <dcgettext@plt>
   12738:	ldr	r3, [sp, #60]	; 0x3c
   1273c:	mov	r1, #0
   12740:	str	r3, [sp, #8]
   12744:	ldr	r3, [sp, #2140]	; 0x85c
   12748:	str	r3, [sp, #4]
   1274c:	ldr	r3, [sp, #2136]	; 0x858
   12750:	str	r3, [sp]
   12754:	ldr	r3, [sp, #44]	; 0x2c
   12758:	mov	r2, r0
   1275c:	mov	r0, r1
   12760:	bl	113a0 <error@plt>
   12764:	mov	r0, #0
   12768:	bl	112b0 <time@plt>
   1276c:	add	r3, r0, #5
   12770:	str	r3, [sp, #100]	; 0x64
   12774:	b	123d0 <__assert_fail@plt+0xe08>
   12778:	ldr	r3, [pc, #816]	; 12ab0 <__assert_fail@plt+0x14e8>
   1277c:	ldr	r2, [sp, #60]	; 0x3c
   12780:	ldm	r3, {r0, r1}
   12784:	lsr	r3, r1, #16
   12788:	str	r0, [sp, #120]	; 0x78
   1278c:	strh	r1, [r2, #4]
   12790:	strb	r3, [r2, #6]
   12794:	b	123c4 <__assert_fail@plt+0xdfc>
   12798:	cmp	r4, #0
   1279c:	beq	12398 <__assert_fail@plt+0xdd0>
   127a0:	mov	r3, #0
   127a4:	mvn	r1, #127	; 0x7f
   127a8:	ldrb	r2, [r5, r3]
   127ac:	eor	r2, r2, r1
   127b0:	strb	r2, [r5, r3]
   127b4:	add	r3, r3, #512	; 0x200
   127b8:	cmp	r3, r4
   127bc:	bcc	127a8 <__assert_fail@plt+0x11e0>
   127c0:	b	12398 <__assert_fail@plt+0xdd0>
   127c4:	lsr	r6, sl, #1
   127c8:	cmp	r6, #2
   127cc:	strb	r2, [r5]
   127d0:	strb	r1, [r5, #1]
   127d4:	strb	r3, [r5, #2]
   127d8:	mov	r4, sl
   127dc:	movls	r7, #3
   127e0:	bhi	12360 <__assert_fail@plt+0xd98>
   127e4:	b	12380 <__assert_fail@plt+0xdb8>
   127e8:	sub	r2, r4, r7
   127ec:	add	r0, r5, r7
   127f0:	mov	r1, r5
   127f4:	bl	1128c <memcpy@plt>
   127f8:	cmp	r6, #0
   127fc:	bne	127a0 <__assert_fail@plt+0x11d8>
   12800:	b	12398 <__assert_fail@plt+0xdd0>
   12804:	mov	r2, #5
   12808:	ldr	r1, [pc, #648]	; 12a98 <__assert_fail@plt+0x14d0>
   1280c:	mov	r0, r6
   12810:	ldrd	sl, [sp, #24]
   12814:	bl	112d4 <dcgettext@plt>
   12818:	add	r2, sp, #1424	; 0x590
   1281c:	add	r2, r2, #8
   12820:	mov	r5, r0
   12824:	adds	r0, sl, r4
   12828:	adc	r1, fp, #0
   1282c:	bl	14710 <__assert_fail@plt+0x3148>
   12830:	mov	r2, r5
   12834:	ldr	r3, [sp, #44]	; 0x2c
   12838:	mov	r1, r9
   1283c:	str	r0, [sp]
   12840:	mov	r0, r6
   12844:	bl	113a0 <error@plt>
   12848:	b	12278 <__assert_fail@plt+0xcb0>
   1284c:	ldrd	sl, [sp, #24]
   12850:	mvn	r3, #0
   12854:	mov	r5, #0
   12858:	subs	r3, r3, sl
   1285c:	str	r3, [sp, #104]	; 0x68
   12860:	mvn	r3, #-2147483648	; 0x80000000
   12864:	sbc	r3, r3, fp
   12868:	str	r3, [sp, #108]	; 0x6c
   1286c:	ldrd	r2, [sp, #104]	; 0x68
   12870:	cmp	r2, r4
   12874:	sbcs	r3, r3, r5
   12878:	blt	129c8 <__assert_fail@plt+0x1400>
   1287c:	ldr	r3, [sp, #2140]	; 0x85c
   12880:	adds	sl, sl, r4
   12884:	adc	fp, fp, r5
   12888:	cmp	r3, #0
   1288c:	ldr	r3, [sp, #80]	; 0x50
   12890:	strd	sl, [sp, #32]
   12894:	strd	sl, [r3]
   12898:	beq	123f0 <__assert_fail@plt+0xe28>
   1289c:	ldr	r3, [sp, #84]	; 0x54
   128a0:	ldrb	r0, [r3]
   128a4:	cmp	r0, #0
   128a8:	bne	128c0 <__assert_fail@plt+0x12f8>
   128ac:	bl	112b0 <time@plt>
   128b0:	ldr	r2, [sp, #100]	; 0x64
   128b4:	cmp	r2, r0
   128b8:	str	r0, [sp, #96]	; 0x60
   128bc:	bgt	123f0 <__assert_fail@plt+0xe28>
   128c0:	mov	r0, #1
   128c4:	mov	r1, #0
   128c8:	ldr	r3, [pc, #460]	; 12a9c <__assert_fail@plt+0x14d4>
   128cc:	strd	r0, [sp, #8]
   128d0:	strd	r0, [sp]
   128d4:	add	r2, sp, #780	; 0x30c
   128d8:	mov	r0, sl
   128dc:	mov	r1, fp
   128e0:	bl	13b58 <__assert_fail@plt+0x2590>
   128e4:	mov	r4, r0
   128e8:	ldrd	r2, [sp, #32]
   128ec:	orrs	r3, r2, r3
   128f0:	moveq	r5, #100	; 0x64
   128f4:	beq	12944 <__assert_fail@plt+0x137c>
   128f8:	add	r1, pc, #376	; 0x178
   128fc:	ldrd	r0, [r1]
   12900:	cmp	r0, sl
   12904:	sbcs	r3, r1, fp
   12908:	blt	12a28 <__assert_fail@plt+0x1460>
   1290c:	adds	r3, sl, sl
   12910:	adc	r2, fp, fp
   12914:	adds	r3, r3, sl
   12918:	adc	r2, r2, fp
   1291c:	lsl	r0, r3, #5
   12920:	lsl	r1, r2, #5
   12924:	adds	r0, r3, r0
   12928:	orr	r1, r1, r3, lsr #27
   1292c:	adc	r1, r2, r1
   12930:	adds	r0, r0, sl
   12934:	adc	r1, r1, fp
   12938:	ldrd	r2, [sp, #32]
   1293c:	bl	19620 <__assert_fail@plt+0x8058>
   12940:	mov	r5, r0
   12944:	mov	r0, #1
   12948:	mov	r1, #0
   1294c:	add	r2, sp, #1424	; 0x590
   12950:	strd	r0, [sp, #8]
   12954:	strd	r0, [sp]
   12958:	mov	r3, #432	; 0x1b0
   1295c:	ldrd	r0, [sp, #32]
   12960:	add	r2, r2, #8
   12964:	bl	13b58 <__assert_fail@plt+0x2590>
   12968:	ldrd	r2, [sp, #32]
   1296c:	ldr	r1, [pc, #320]	; 12ab4 <__assert_fail@plt+0x14ec>
   12970:	cmp	r3, fp
   12974:	cmpeq	r2, sl
   12978:	mov	r2, #5
   1297c:	mov	r6, r0
   12980:	mov	r0, #0
   12984:	moveq	r4, r6
   12988:	bl	112d4 <dcgettext@plt>
   1298c:	ldr	r3, [sp, #60]	; 0x3c
   12990:	mov	r1, #0
   12994:	str	r3, [sp, #8]
   12998:	ldr	r3, [sp, #2140]	; 0x85c
   1299c:	str	r6, [sp, #16]
   129a0:	str	r3, [sp, #4]
   129a4:	ldr	r3, [sp, #2136]	; 0x858
   129a8:	str	r4, [sp, #12]
   129ac:	str	r3, [sp]
   129b0:	str	r5, [sp, #20]
   129b4:	ldr	r3, [sp, #44]	; 0x2c
   129b8:	mov	r2, r0
   129bc:	mov	r0, r1
   129c0:	bl	113a0 <error@plt>
   129c4:	b	12644 <__assert_fail@plt+0x107c>
   129c8:	mov	r2, #5
   129cc:	ldr	r1, [pc, #228]	; 12ab8 <__assert_fail@plt+0x14f0>
   129d0:	mov	r0, #0
   129d4:	bl	112d4 <dcgettext@plt>
   129d8:	ldr	r3, [sp, #44]	; 0x2c
   129dc:	mov	r1, #0
   129e0:	mov	r2, r0
   129e4:	b	12270 <__assert_fail@plt+0xca8>
   129e8:	add	r3, sp, #128	; 0x80
   129ec:	str	r3, [sp, #84]	; 0x54
   129f0:	b	123f0 <__assert_fail@plt+0xe28>
   129f4:	ldr	r1, [sp, #44]	; 0x2c
   129f8:	mov	r0, r8
   129fc:	bl	12078 <__assert_fail@plt+0xab0>
   12a00:	cmp	r0, #0
   12a04:	beq	12a54 <__assert_fail@plt+0x148c>
   12a08:	bl	11448 <__errno_location@plt>
   12a0c:	ldr	r3, [r0]
   12a10:	ldr	r0, [sp, #72]	; 0x48
   12a14:	cmp	r3, #5
   12a18:	bne	1227c <__assert_fail@plt+0xcb4>
   12a1c:	bl	11274 <free@plt>
   12a20:	mov	r0, #1
   12a24:	b	12284 <__assert_fail@plt+0xcbc>
   12a28:	mov	r2, #100	; 0x64
   12a2c:	mov	r3, #0
   12a30:	ldrd	r0, [sp, #32]
   12a34:	bl	1954c <__assert_fail@plt+0x7f84>
   12a38:	mov	r2, r0
   12a3c:	mov	r3, r1
   12a40:	mov	r0, sl
   12a44:	mov	r1, fp
   12a48:	bl	19620 <__assert_fail@plt+0x8058>
   12a4c:	mov	r5, r0
   12a50:	b	12944 <__assert_fail@plt+0x137c>
   12a54:	ldr	r0, [sp, #72]	; 0x48
   12a58:	bl	11274 <free@plt>
   12a5c:	ldr	r0, [sp, #52]	; 0x34
   12a60:	b	12284 <__assert_fail@plt+0xcbc>
   12a64:	bl	112e0 <__stack_chk_fail@plt>
   12a68:	bl	11448 <__errno_location@plt>
   12a6c:	ldr	r4, [r0]
   12a70:	b	12254 <__assert_fail@plt+0xc8c>
   12a74:	nop			; (mov r0, r0)
   12a78:			; <UNDEFINED> instruction: 0xf5c28f5c
   12a7c:	addeq	r5, pc, #40, 24	; 0x2800
   12a80:	andeq	fp, r2, r8, lsl #30
   12a84:			; <UNDEFINED> instruction: 0x00019ab8
   12a88:	andmi	r6, r8, r1, lsl #26
   12a8c:	rscseq	pc, pc, r0
   12a90:	andeq	r9, r1, r0, ror fp
   12a94:	andeq	sl, r1, r4, lsl #10
   12a98:	strdeq	r9, [r1], -ip
   12a9c:			; <UNDEFINED> instruction: 0x000001b2
   12aa0:	andeq	r9, r1, r0, lsr fp
   12aa4:	andeq	r9, r1, ip, lsl fp
   12aa8:	andeq	r0, r1, r2
   12aac:	andeq	r9, r1, ip, asr #21
   12ab0:	andeq	r9, r1, r0, lsl #23
   12ab4:	andeq	r9, r1, ip, asr #22
   12ab8:	andeq	r9, r1, r8, ror #21
   12abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac0:	mov	r4, r3
   12ac4:	ldrb	r3, [r3, #20]
   12ac8:	sub	sp, sp, #196	; 0xc4
   12acc:	mov	r5, r0
   12ad0:	cmp	r3, #0
   12ad4:	ldr	r0, [pc, #1648]	; 1314c <__assert_fail@plt+0x1b84>
   12ad8:	str	r2, [sp, #36]	; 0x24
   12adc:	ldrbne	r2, [r4, #22]
   12ae0:	ldrne	r3, [r4, #4]
   12ae4:	ldr	r0, [r0]
   12ae8:	addne	r3, r2, r3
   12aec:	str	r1, [sp, #20]
   12af0:	str	r0, [sp, #188]	; 0xbc
   12af4:	add	r2, sp, #80	; 0x50
   12af8:	mov	r1, r5
   12afc:	mov	r0, #3
   12b00:	str	r3, [sp, #40]	; 0x28
   12b04:	bl	11328 <__fxstat64@plt>
   12b08:	cmp	r0, #0
   12b0c:	bne	12e28 <__assert_fail@plt+0x1860>
   12b10:	ldr	r3, [sp, #96]	; 0x60
   12b14:	and	r3, r3, #61440	; 0xf000
   12b18:	cmp	r3, #8192	; 0x2000
   12b1c:	beq	12f5c <__assert_fail@plt+0x1994>
   12b20:	cmp	r3, #4096	; 0x1000
   12b24:	cmpne	r3, #49152	; 0xc000
   12b28:	moveq	r2, #1
   12b2c:	movne	r2, #0
   12b30:	str	r2, [sp, #32]
   12b34:	beq	12c30 <__assert_fail@plt+0x1668>
   12b38:	cmp	r3, #32768	; 0x8000
   12b3c:	beq	12f78 <__assert_fail@plt+0x19b0>
   12b40:	ldr	r0, [r4, #4]
   12b44:	lsrs	r3, r0, #30
   12b48:	movne	r3, #1
   12b4c:	moveq	r3, #0
   12b50:	lsls	r0, r0, #2
   12b54:	bmi	13148 <__assert_fail@plt+0x1b80>
   12b58:	cmp	r3, #0
   12b5c:	bne	13148 <__assert_fail@plt+0x1b80>
   12b60:	bl	17c94 <__assert_fail@plt+0x66cc>
   12b64:	ldrd	r2, [r4, #8]
   12b68:	mov	r1, r3
   12b6c:	mvn	r3, #0
   12b70:	cmp	r1, r3
   12b74:	ldr	r3, [sp, #96]	; 0x60
   12b78:	mov	r6, r0
   12b7c:	mov	r0, r2
   12b80:	mvn	r2, #0
   12b84:	cmpeq	r0, r2
   12b88:	strd	r0, [sp, #24]
   12b8c:	beq	12f9c <__assert_fail@plt+0x19d4>
   12b90:	ldr	r2, [r4, #4]
   12b94:	and	r3, r3, #61440	; 0xf000
   12b98:	cmp	r3, #32768	; 0x8000
   12b9c:	str	r2, [sp, #44]	; 0x2c
   12ba0:	beq	12e60 <__assert_fail@plt+0x1898>
   12ba4:	ldr	r3, [sp, #44]	; 0x2c
   12ba8:	cmp	r3, #0
   12bac:	beq	12eb0 <__assert_fail@plt+0x18e8>
   12bb0:	mov	r2, #0
   12bb4:	mov	r3, #0
   12bb8:	strd	r2, [sp, #48]	; 0x30
   12bbc:	ldr	r9, [sp, #44]	; 0x2c
   12bc0:	mov	sl, r6
   12bc4:	mvn	r3, #1
   12bc8:	ldr	r7, [pc, #1408]	; 13150 <__assert_fail@plt+0x1b88>
   12bcc:	mov	r8, #0
   12bd0:	b	12bec <__assert_fail@plt+0x1624>
   12bd4:	rsb	r2, r3, #0
   12bd8:	cmp	r2, r9
   12bdc:	bcs	12c7c <__assert_fail@plt+0x16b4>
   12be0:	sub	r8, r8, r3
   12be4:	add	r9, r9, r3
   12be8:	ldr	r3, [r7]
   12bec:	cmp	r3, #0
   12bf0:	mvneq	r3, #1
   12bf4:	ldreq	r7, [pc, #1368]	; 13154 <__assert_fail@plt+0x1b8c>
   12bf8:	beq	12bd4 <__assert_fail@plt+0x160c>
   12bfc:	add	r7, r7, #4
   12c00:	blt	12bd4 <__assert_fail@plt+0x160c>
   12c04:	cmp	r3, r9
   12c08:	bhi	12ec4 <__assert_fail@plt+0x18fc>
   12c0c:	lsl	fp, r3, #2
   12c10:	mov	r1, r7
   12c14:	mov	r0, sl
   12c18:	mov	r2, fp
   12c1c:	sub	r9, r9, r3
   12c20:	add	r7, r7, fp
   12c24:	bl	1128c <memcpy@plt>
   12c28:	add	sl, sl, fp
   12c2c:	b	12be8 <__assert_fail@plt+0x1620>
   12c30:	mov	r2, #5
   12c34:	ldr	r1, [pc, #1308]	; 13158 <__assert_fail@plt+0x1b90>
   12c38:	mov	r0, #0
   12c3c:	bl	112d4 <dcgettext@plt>
   12c40:	mov	r1, #0
   12c44:	ldr	r3, [sp, #20]
   12c48:	mov	r2, r0
   12c4c:	mov	r0, r1
   12c50:	bl	113a0 <error@plt>
   12c54:	mov	r3, #0
   12c58:	str	r3, [sp, #32]
   12c5c:	ldr	r3, [pc, #1256]	; 1314c <__assert_fail@plt+0x1b84>
   12c60:	ldr	r2, [sp, #188]	; 0xbc
   12c64:	ldr	r0, [sp, #32]
   12c68:	ldr	r3, [r3]
   12c6c:	cmp	r2, r3
   12c70:	bne	13144 <__assert_fail@plt+0x1b7c>
   12c74:	add	sp, sp, #196	; 0xc4
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	add	r8, r8, r9
   12c80:	ldr	r3, [sp, #44]	; 0x2c
   12c84:	sub	sl, r8, #1
   12c88:	str	r5, [sp, #44]	; 0x2c
   12c8c:	sub	r8, r3, r8
   12c90:	mov	r9, sl
   12c94:	mov	r7, #0
   12c98:	sub	fp, r3, #1
   12c9c:	mov	r5, r3
   12ca0:	str	r4, [sp, #56]	; 0x38
   12ca4:	b	12ccc <__assert_fail@plt+0x1704>
   12ca8:	mvn	r3, #0
   12cac:	str	r4, [r6, r8, lsl #2]
   12cb0:	str	r3, [r6, r7, lsl #2]
   12cb4:	add	r7, r7, #1
   12cb8:	add	r9, r9, fp
   12cbc:	cmp	r7, r5
   12cc0:	add	r8, r8, #1
   12cc4:	sub	r9, r9, sl
   12cc8:	beq	12d10 <__assert_fail@plt+0x1748>
   12ccc:	cmp	r9, sl
   12cd0:	ldr	r4, [r6, r7, lsl #2]
   12cd4:	bls	12ca8 <__assert_fail@plt+0x16e0>
   12cd8:	sub	r2, r8, r7
   12cdc:	subs	r2, r2, #1
   12ce0:	mov	r3, #0
   12ce4:	sbc	r3, r3, #0
   12ce8:	ldr	r0, [sp, #36]	; 0x24
   12cec:	bl	16a58 <__assert_fail@plt+0x5490>
   12cf0:	sub	r9, r9, sl
   12cf4:	add	r0, r7, r0
   12cf8:	ldr	r3, [r6, r0, lsl #2]
   12cfc:	str	r3, [r6, r7, lsl #2]
   12d00:	add	r7, r7, #1
   12d04:	cmp	r7, r5
   12d08:	str	r4, [r6, r0, lsl #2]
   12d0c:	bne	12ccc <__assert_fail@plt+0x1704>
   12d10:	ldr	r5, [sp, #44]	; 0x2c
   12d14:	ldr	r4, [sp, #56]	; 0x38
   12d18:	ldr	r0, [sp, #36]	; 0x24
   12d1c:	bl	16a50 <__assert_fail@plt+0x5488>
   12d20:	ldrd	r2, [sp, #48]	; 0x30
   12d24:	orrs	r1, r2, r3
   12d28:	mov	sl, r0
   12d2c:	beq	1313c <__assert_fail@plt+0x1b74>
   12d30:	strd	r2, [sp, #72]	; 0x48
   12d34:	ldr	r2, [r4, #4]
   12d38:	mov	r9, #1
   12d3c:	mov	r8, #0
   12d40:	mov	r7, #0
   12d44:	ldr	fp, [sp, #20]
   12d48:	b	12d90 <__assert_fail@plt+0x17c8>
   12d4c:	cmp	r7, r2
   12d50:	movcs	r3, #0
   12d54:	ldrcc	r3, [r6, r7, lsl #2]
   12d58:	add	r7, r7, #1
   12d5c:	str	r7, [sp, #8]
   12d60:	stm	sp, {r3, sl}
   12d64:	str	r8, [sp, #12]
   12d68:	add	r3, sp, #72	; 0x48
   12d6c:	mov	r2, fp
   12d70:	add	r1, sp, #80	; 0x50
   12d74:	mov	r0, r5
   12d78:	bl	12130 <__assert_fail@plt+0xb68>
   12d7c:	cmp	r0, #0
   12d80:	beq	12d8c <__assert_fail@plt+0x17c4>
   12d84:	blt	12e1c <__assert_fail@plt+0x1854>
   12d88:	mov	r9, #0
   12d8c:	ldr	r2, [r4, #4]
   12d90:	ldrb	r3, [r4, #22]
   12d94:	add	r3, r3, r2
   12d98:	cmp	r3, r7
   12d9c:	bhi	12d4c <__assert_fail@plt+0x1784>
   12da0:	ldrd	r2, [sp, #24]
   12da4:	orrs	r3, r2, r3
   12da8:	beq	13114 <__assert_fail@plt+0x1b4c>
   12dac:	ldr	r2, [r4, #4]
   12db0:	ldrd	r0, [sp, #24]
   12db4:	ldr	r8, [sp, #40]	; 0x28
   12db8:	strd	r0, [sp, #72]	; 0x48
   12dbc:	mov	r0, #0
   12dc0:	mov	r1, #0
   12dc4:	strd	r0, [sp, #24]
   12dc8:	b	12d40 <__assert_fail@plt+0x1778>
   12dcc:	ldrd	r2, [sp, #24]
   12dd0:	mov	r0, r5
   12dd4:	bl	112bc <ftruncate64@plt>
   12dd8:	cmp	r0, #0
   12ddc:	beq	13120 <__assert_fail@plt+0x1b58>
   12de0:	ldr	r3, [sp, #96]	; 0x60
   12de4:	and	r3, r3, #61440	; 0xf000
   12de8:	cmp	r3, #32768	; 0x8000
   12dec:	bne	13120 <__assert_fail@plt+0x1b58>
   12df0:	bl	11448 <__errno_location@plt>
   12df4:	mov	r2, #5
   12df8:	ldr	r1, [pc, #860]	; 1315c <__assert_fail@plt+0x1b94>
   12dfc:	ldr	r4, [r0]
   12e00:	mov	r0, #0
   12e04:	bl	112d4 <dcgettext@plt>
   12e08:	ldr	r3, [sp, #20]
   12e0c:	mov	r1, r4
   12e10:	mov	r2, r0
   12e14:	mov	r0, #0
   12e18:	bl	113a0 <error@plt>
   12e1c:	mov	r0, r6
   12e20:	bl	11274 <free@plt>
   12e24:	b	12c5c <__assert_fail@plt+0x1694>
   12e28:	bl	11448 <__errno_location@plt>
   12e2c:	mov	r3, #0
   12e30:	ldr	r1, [pc, #808]	; 13160 <__assert_fail@plt+0x1b98>
   12e34:	mov	r2, #5
   12e38:	str	r3, [sp, #32]
   12e3c:	ldr	r4, [r0]
   12e40:	mov	r0, r3
   12e44:	bl	112d4 <dcgettext@plt>
   12e48:	ldr	r3, [sp, #20]
   12e4c:	mov	r1, r4
   12e50:	mov	r2, r0
   12e54:	mov	r0, #0
   12e58:	bl	113a0 <error@plt>
   12e5c:	b	12c5c <__assert_fail@plt+0x1694>
   12e60:	ldr	r2, [sp, #136]	; 0x88
   12e64:	ldrd	r0, [sp, #128]	; 0x80
   12e68:	sub	r3, r2, #1
   12e6c:	cmp	r3, #536870912	; 0x20000000
   12e70:	strd	r0, [sp, #48]	; 0x30
   12e74:	ldrd	r0, [sp, #24]
   12e78:	movcs	r2, #512	; 0x200
   12e7c:	cmp	r0, r2
   12e80:	asr	r3, r2, #31
   12e84:	sbcs	ip, r1, r3
   12e88:	movlt	r3, r1
   12e8c:	movlt	r2, r0
   12e90:	ldrd	r0, [sp, #48]	; 0x30
   12e94:	cmp	r0, r2
   12e98:	sbcs	r3, r1, r3
   12e9c:	bge	12ba4 <__assert_fail@plt+0x15dc>
   12ea0:	ldr	r3, [sp, #44]	; 0x2c
   12ea4:	cmp	r3, #0
   12ea8:	bne	12bbc <__assert_fail@plt+0x15f4>
   12eac:	b	12d18 <__assert_fail@plt+0x1750>
   12eb0:	ldr	r0, [sp, #36]	; 0x24
   12eb4:	bl	16a50 <__assert_fail@plt+0x5488>
   12eb8:	mov	r9, #1
   12ebc:	mov	sl, r0
   12ec0:	b	12da0 <__assert_fail@plt+0x17d8>
   12ec4:	cmp	r9, #1
   12ec8:	bls	12c7c <__assert_fail@plt+0x16b4>
   12ecc:	add	r2, r9, r9, lsl #1
   12ed0:	cmp	r3, r2
   12ed4:	bhi	12c7c <__assert_fail@plt+0x16b4>
   12ed8:	asr	r1, r3, #31
   12edc:	subs	fp, r3, #1
   12ee0:	sbc	r2, r1, #0
   12ee4:	sub	r3, r3, fp
   12ee8:	str	r6, [sp, #56]	; 0x38
   12eec:	str	r8, [sp, #64]	; 0x40
   12ef0:	str	r4, [sp, #68]	; 0x44
   12ef4:	mov	r8, r3
   12ef8:	ldr	r4, [sp, #36]	; 0x24
   12efc:	mov	r6, r2
   12f00:	b	12f0c <__assert_fail@plt+0x1944>
   12f04:	subs	fp, fp, #1
   12f08:	sbc	r6, r6, #0
   12f0c:	add	r3, r8, fp
   12f10:	cmp	r9, r3
   12f14:	add	r7, r7, #4
   12f18:	beq	12f3c <__assert_fail@plt+0x1974>
   12f1c:	mov	r3, r6
   12f20:	mov	r2, fp
   12f24:	mov	r0, r4
   12f28:	bl	16a58 <__assert_fail@plt+0x5490>
   12f2c:	mov	r3, #0
   12f30:	cmp	r1, r3
   12f34:	cmpeq	r0, r9
   12f38:	bcs	12f04 <__assert_fail@plt+0x193c>
   12f3c:	ldr	r3, [r7, #-4]
   12f40:	subs	r9, r9, #1
   12f44:	str	r3, [sl], #4
   12f48:	bne	12f04 <__assert_fail@plt+0x193c>
   12f4c:	ldr	r6, [sp, #56]	; 0x38
   12f50:	ldr	r8, [sp, #64]	; 0x40
   12f54:	ldr	r4, [sp, #68]	; 0x44
   12f58:	b	12c80 <__assert_fail@plt+0x16b8>
   12f5c:	mov	r0, r5
   12f60:	bl	1158c <isatty@plt>
   12f64:	cmp	r0, #0
   12f68:	bne	12c30 <__assert_fail@plt+0x1668>
   12f6c:	ldr	r3, [sp, #96]	; 0x60
   12f70:	and	r3, r3, #61440	; 0xf000
   12f74:	b	12b20 <__assert_fail@plt+0x1558>
   12f78:	ldrd	r2, [sp, #128]	; 0x80
   12f7c:	cmp	r2, #0
   12f80:	sbcs	r3, r3, #0
   12f84:	bge	12b40 <__assert_fail@plt+0x1578>
   12f88:	ldr	r4, [sp, #32]
   12f8c:	mov	r2, #5
   12f90:	ldr	r1, [pc, #460]	; 13164 <__assert_fail@plt+0x1b9c>
   12f94:	mov	r0, r4
   12f98:	b	12e44 <__assert_fail@plt+0x187c>
   12f9c:	and	r3, r3, #61440	; 0xf000
   12fa0:	cmp	r3, #32768	; 0x8000
   12fa4:	bne	13088 <__assert_fail@plt+0x1ac0>
   12fa8:	ldrb	r9, [r4, #21]
   12fac:	ldrd	r2, [sp, #128]	; 0x80
   12fb0:	ldr	r1, [r4, #4]
   12fb4:	cmp	r9, #0
   12fb8:	strd	r2, [sp, #24]
   12fbc:	str	r1, [sp, #44]	; 0x2c
   12fc0:	bne	130d8 <__assert_fail@plt+0x1b10>
   12fc4:	ldr	r8, [sp, #136]	; 0x88
   12fc8:	mov	r1, r3
   12fcc:	sub	r3, r8, #1
   12fd0:	cmp	r3, #536870912	; 0x20000000
   12fd4:	movcs	r8, #512	; 0x200
   12fd8:	mov	r0, r2
   12fdc:	asr	r9, r8, #31
   12fe0:	mov	r2, r8
   12fe4:	mov	r3, r9
   12fe8:	bl	1954c <__assert_fail@plt+0x7f84>
   12fec:	ldr	ip, [sp, #24]
   12ff0:	mov	r0, r2
   12ff4:	mov	r1, r3
   12ff8:	ldrd	r2, [sp, #24]
   12ffc:	cmp	r2, r8
   13000:	ldr	r2, [sp, #28]
   13004:	sbcs	r3, r3, r9
   13008:	movlt	r3, #1
   1300c:	movge	r3, #0
   13010:	orrs	r2, ip, r2
   13014:	moveq	r3, #0
   13018:	cmp	r3, #0
   1301c:	moveq	r2, #0
   13020:	ldrdne	r2, [sp, #24]
   13024:	moveq	r3, #0
   13028:	strd	r2, [sp, #48]	; 0x30
   1302c:	orrs	r3, r0, r1
   13030:	beq	12ea0 <__assert_fail@plt+0x18d8>
   13034:	subs	r3, r8, r0
   13038:	sbc	r2, r9, r1
   1303c:	ldrd	r0, [sp, #24]
   13040:	str	r3, [sp, #56]	; 0x38
   13044:	mvn	r3, #0
   13048:	subs	sl, r3, r0
   1304c:	str	r2, [sp, #60]	; 0x3c
   13050:	mvn	r2, #-2147483648	; 0x80000000
   13054:	sbc	fp, r2, r1
   13058:	ldrd	r2, [sp, #56]	; 0x38
   1305c:	cmp	r2, sl
   13060:	sbcs	r1, r3, fp
   13064:	movlt	fp, r3
   13068:	ldr	r3, [sp, #24]
   1306c:	movlt	sl, r2
   13070:	adds	r3, r3, sl
   13074:	str	r3, [sp, #24]
   13078:	ldr	r3, [sp, #28]
   1307c:	adc	r3, r3, fp
   13080:	str	r3, [sp, #28]
   13084:	b	12ea0 <__assert_fail@plt+0x18d8>
   13088:	mov	r3, #2
   1308c:	str	r3, [sp]
   13090:	mov	r2, #0
   13094:	mov	r3, #0
   13098:	mov	r0, r5
   1309c:	bl	11358 <lseek64@plt>
   130a0:	cmp	r0, #1
   130a4:	sbcs	r3, r1, #0
   130a8:	ldr	r3, [r4, #4]
   130ac:	mov	r8, r0
   130b0:	mov	r9, r1
   130b4:	str	r3, [sp, #44]	; 0x2c
   130b8:	blt	130f4 <__assert_fail@plt+0x1b2c>
   130bc:	cmp	r3, #0
   130c0:	beq	13128 <__assert_fail@plt+0x1b60>
   130c4:	mov	r2, #0
   130c8:	mov	r3, #0
   130cc:	strd	r8, [sp, #24]
   130d0:	strd	r2, [sp, #48]	; 0x30
   130d4:	b	12bbc <__assert_fail@plt+0x15f4>
   130d8:	ldr	r3, [sp, #44]	; 0x2c
   130dc:	cmp	r3, #0
   130e0:	bne	12bb0 <__assert_fail@plt+0x15e8>
   130e4:	ldr	r0, [sp, #36]	; 0x24
   130e8:	bl	16a50 <__assert_fail@plt+0x5488>
   130ec:	mov	sl, r0
   130f0:	b	12da0 <__assert_fail@plt+0x17d8>
   130f4:	cmp	r3, #0
   130f8:	bne	12bb0 <__assert_fail@plt+0x15e8>
   130fc:	ldr	r0, [sp, #36]	; 0x24
   13100:	bl	16a50 <__assert_fail@plt+0x5488>
   13104:	mov	sl, r0
   13108:	mov	r2, #0
   1310c:	mov	r9, #1
   13110:	b	12db0 <__assert_fail@plt+0x17e8>
   13114:	ldr	r3, [r4, #16]
   13118:	cmp	r3, #0
   1311c:	bne	12dcc <__assert_fail@plt+0x1804>
   13120:	str	r9, [sp, #32]
   13124:	b	12e1c <__assert_fail@plt+0x1854>
   13128:	ldr	r0, [sp, #36]	; 0x24
   1312c:	bl	16a50 <__assert_fail@plt+0x5488>
   13130:	strd	r8, [sp, #24]
   13134:	mov	sl, r0
   13138:	b	13108 <__assert_fail@plt+0x1b40>
   1313c:	mov	r9, #1
   13140:	b	12da0 <__assert_fail@plt+0x17d8>
   13144:	bl	112e0 <__stack_chk_fail@plt>
   13148:	bl	17edc <__assert_fail@plt+0x6914>
   1314c:	andeq	fp, r2, r8, lsl #30
   13150:	andeq	r9, r1, r0, ror #16
   13154:	andeq	r9, r1, r4, ror #16
   13158:	muleq	r1, ip, fp
   1315c:	ldrdeq	r9, [r1], -r0
   13160:	andeq	r9, r1, r8, lsl #23
   13164:			; <UNDEFINED> instruction: 0x00019bb4
   13168:	ldr	r3, [pc, #896]	; 134f0 <__assert_fail@plt+0x1f28>
   1316c:	push	{r7, lr}
   13170:	sub	sp, sp, #64	; 0x40
   13174:	ldr	r3, [r3]
   13178:	subs	r4, r0, #0
   1317c:	str	r3, [sp, #60]	; 0x3c
   13180:	beq	131bc <__assert_fail@plt+0x1bf4>
   13184:	ldr	r3, [pc, #872]	; 134f4 <__assert_fail@plt+0x1f2c>
   13188:	mov	r2, #5
   1318c:	ldr	r1, [pc, #868]	; 134f8 <__assert_fail@plt+0x1f30>
   13190:	mov	r0, #0
   13194:	ldr	r5, [r3]
   13198:	bl	112d4 <dcgettext@plt>
   1319c:	ldr	r3, [pc, #856]	; 134fc <__assert_fail@plt+0x1f34>
   131a0:	mov	r1, #1
   131a4:	ldr	r3, [r3]
   131a8:	mov	r2, r0
   131ac:	mov	r0, r5
   131b0:	bl	114c0 <__fprintf_chk@plt>
   131b4:	mov	r0, r4
   131b8:	bl	11418 <exit@plt>
   131bc:	mov	r2, #5
   131c0:	ldr	r1, [pc, #824]	; 13500 <__assert_fail@plt+0x1f38>
   131c4:	bl	112d4 <dcgettext@plt>
   131c8:	ldr	r3, [pc, #812]	; 134fc <__assert_fail@plt+0x1f34>
   131cc:	ldr	r5, [pc, #816]	; 13504 <__assert_fail@plt+0x1f3c>
   131d0:	ldr	r2, [r3]
   131d4:	mov	r1, r0
   131d8:	mov	r0, #1
   131dc:	bl	1149c <__printf_chk@plt>
   131e0:	mov	r2, #5
   131e4:	ldr	r1, [pc, #796]	; 13508 <__assert_fail@plt+0x1f40>
   131e8:	mov	r0, r4
   131ec:	bl	112d4 <dcgettext@plt>
   131f0:	ldr	r1, [r5]
   131f4:	bl	11214 <fputs_unlocked@plt>
   131f8:	mov	r2, #5
   131fc:	ldr	r1, [pc, #776]	; 1350c <__assert_fail@plt+0x1f44>
   13200:	mov	r0, r4
   13204:	bl	112d4 <dcgettext@plt>
   13208:	ldr	r1, [r5]
   1320c:	bl	11214 <fputs_unlocked@plt>
   13210:	mov	r2, #5
   13214:	ldr	r1, [pc, #756]	; 13510 <__assert_fail@plt+0x1f48>
   13218:	mov	r0, r4
   1321c:	bl	112d4 <dcgettext@plt>
   13220:	ldr	r1, [r5]
   13224:	bl	11214 <fputs_unlocked@plt>
   13228:	mov	r2, #5
   1322c:	ldr	r1, [pc, #736]	; 13514 <__assert_fail@plt+0x1f4c>
   13230:	mov	r0, r4
   13234:	bl	112d4 <dcgettext@plt>
   13238:	mov	r2, #3
   1323c:	mov	r1, r0
   13240:	mov	r0, #1
   13244:	bl	1149c <__printf_chk@plt>
   13248:	mov	r2, #5
   1324c:	ldr	r1, [pc, #708]	; 13518 <__assert_fail@plt+0x1f50>
   13250:	mov	r0, r4
   13254:	bl	112d4 <dcgettext@plt>
   13258:	ldr	r1, [r5]
   1325c:	bl	11214 <fputs_unlocked@plt>
   13260:	mov	r2, #5
   13264:	ldr	r1, [pc, #688]	; 1351c <__assert_fail@plt+0x1f54>
   13268:	mov	r0, r4
   1326c:	bl	112d4 <dcgettext@plt>
   13270:	ldr	r1, [r5]
   13274:	bl	11214 <fputs_unlocked@plt>
   13278:	mov	r2, #5
   1327c:	ldr	r1, [pc, #668]	; 13520 <__assert_fail@plt+0x1f58>
   13280:	mov	r0, r4
   13284:	bl	112d4 <dcgettext@plt>
   13288:	ldr	r1, [r5]
   1328c:	bl	11214 <fputs_unlocked@plt>
   13290:	mov	r2, #5
   13294:	ldr	r1, [pc, #648]	; 13524 <__assert_fail@plt+0x1f5c>
   13298:	mov	r0, r4
   1329c:	bl	112d4 <dcgettext@plt>
   132a0:	ldr	r1, [r5]
   132a4:	bl	11214 <fputs_unlocked@plt>
   132a8:	mov	r2, #5
   132ac:	ldr	r1, [pc, #628]	; 13528 <__assert_fail@plt+0x1f60>
   132b0:	mov	r0, r4
   132b4:	bl	112d4 <dcgettext@plt>
   132b8:	ldr	r1, [r5]
   132bc:	bl	11214 <fputs_unlocked@plt>
   132c0:	mov	r2, #5
   132c4:	ldr	r1, [pc, #608]	; 1352c <__assert_fail@plt+0x1f64>
   132c8:	mov	r0, r4
   132cc:	bl	112d4 <dcgettext@plt>
   132d0:	ldr	r1, [r5]
   132d4:	bl	11214 <fputs_unlocked@plt>
   132d8:	mov	r2, #5
   132dc:	ldr	r1, [pc, #588]	; 13530 <__assert_fail@plt+0x1f68>
   132e0:	mov	r0, r4
   132e4:	bl	112d4 <dcgettext@plt>
   132e8:	ldr	r1, [r5]
   132ec:	bl	11214 <fputs_unlocked@plt>
   132f0:	mov	r2, #5
   132f4:	ldr	r1, [pc, #568]	; 13534 <__assert_fail@plt+0x1f6c>
   132f8:	mov	r0, r4
   132fc:	bl	112d4 <dcgettext@plt>
   13300:	ldr	r1, [r5]
   13304:	bl	11214 <fputs_unlocked@plt>
   13308:	mov	r2, #5
   1330c:	ldr	r1, [pc, #548]	; 13538 <__assert_fail@plt+0x1f70>
   13310:	mov	r0, r4
   13314:	bl	112d4 <dcgettext@plt>
   13318:	ldr	r1, [r5]
   1331c:	bl	11214 <fputs_unlocked@plt>
   13320:	ldr	lr, [pc, #532]	; 1353c <__assert_fail@plt+0x1f74>
   13324:	add	ip, sp, #4
   13328:	ldm	lr!, {r0, r1, r2, r3}
   1332c:	stmia	ip!, {r0, r1, r2, r3}
   13330:	ldm	lr!, {r0, r1, r2, r3}
   13334:	ldr	r6, [sp, #4]
   13338:	stmia	ip!, {r0, r1, r2, r3}
   1333c:	cmp	r6, #0
   13340:	ldm	lr!, {r0, r1, r2, r3}
   13344:	addeq	r5, sp, #4
   13348:	stmia	ip!, {r0, r1, r2, r3}
   1334c:	ldm	lr, {r0, r1}
   13350:	stm	ip, {r0, r1}
   13354:	beq	13384 <__assert_fail@plt+0x1dbc>
   13358:	ldr	r7, [pc, #480]	; 13540 <__assert_fail@plt+0x1f78>
   1335c:	add	r5, sp, #4
   13360:	b	13370 <__assert_fail@plt+0x1da8>
   13364:	ldr	r6, [r5, #8]!
   13368:	cmp	r6, #0
   1336c:	beq	13384 <__assert_fail@plt+0x1dbc>
   13370:	mov	r1, r6
   13374:	mov	r0, r7
   13378:	bl	11238 <strcmp@plt>
   1337c:	cmp	r0, #0
   13380:	bne	13364 <__assert_fail@plt+0x1d9c>
   13384:	ldr	r5, [r5, #4]
   13388:	mov	r2, #5
   1338c:	cmp	r5, #0
   13390:	ldr	r1, [pc, #428]	; 13544 <__assert_fail@plt+0x1f7c>
   13394:	beq	1343c <__assert_fail@plt+0x1e74>
   13398:	mov	r0, #0
   1339c:	bl	112d4 <dcgettext@plt>
   133a0:	ldr	r3, [pc, #416]	; 13548 <__assert_fail@plt+0x1f80>
   133a4:	ldr	r2, [pc, #416]	; 1354c <__assert_fail@plt+0x1f84>
   133a8:	mov	r1, r0
   133ac:	mov	r0, #1
   133b0:	bl	1149c <__printf_chk@plt>
   133b4:	mov	r1, #0
   133b8:	mov	r0, #5
   133bc:	bl	114fc <setlocale@plt>
   133c0:	cmp	r0, #0
   133c4:	ldreq	r6, [pc, #372]	; 13540 <__assert_fail@plt+0x1f78>
   133c8:	beq	133e4 <__assert_fail@plt+0x1e1c>
   133cc:	mov	r2, #3
   133d0:	ldr	r1, [pc, #376]	; 13550 <__assert_fail@plt+0x1f88>
   133d4:	bl	11598 <strncmp@plt>
   133d8:	ldr	r6, [pc, #352]	; 13540 <__assert_fail@plt+0x1f78>
   133dc:	cmp	r0, #0
   133e0:	bne	134cc <__assert_fail@plt+0x1f04>
   133e4:	mov	r2, #5
   133e8:	ldr	r1, [pc, #356]	; 13554 <__assert_fail@plt+0x1f8c>
   133ec:	mov	r0, #0
   133f0:	bl	112d4 <dcgettext@plt>
   133f4:	ldr	r3, [pc, #324]	; 13540 <__assert_fail@plt+0x1f78>
   133f8:	ldr	r2, [pc, #328]	; 13548 <__assert_fail@plt+0x1f80>
   133fc:	mov	r1, r0
   13400:	mov	r0, #1
   13404:	bl	1149c <__printf_chk@plt>
   13408:	mov	r2, #5
   1340c:	ldr	r1, [pc, #324]	; 13558 <__assert_fail@plt+0x1f90>
   13410:	mov	r0, #0
   13414:	bl	112d4 <dcgettext@plt>
   13418:	ldr	r2, [pc, #316]	; 1355c <__assert_fail@plt+0x1f94>
   1341c:	cmp	r5, r6
   13420:	ldr	r3, [pc, #312]	; 13560 <__assert_fail@plt+0x1f98>
   13424:	movne	r3, r2
   13428:	mov	r1, r0
   1342c:	mov	r2, r5
   13430:	mov	r0, #1
   13434:	bl	1149c <__printf_chk@plt>
   13438:	b	131b4 <__assert_fail@plt+0x1bec>
   1343c:	mov	r0, r5
   13440:	bl	112d4 <dcgettext@plt>
   13444:	ldr	r3, [pc, #252]	; 13548 <__assert_fail@plt+0x1f80>
   13448:	ldr	r2, [pc, #252]	; 1354c <__assert_fail@plt+0x1f84>
   1344c:	mov	r1, r0
   13450:	mov	r0, #1
   13454:	bl	1149c <__printf_chk@plt>
   13458:	mov	r1, r5
   1345c:	mov	r0, #5
   13460:	bl	114fc <setlocale@plt>
   13464:	cmp	r0, #0
   13468:	beq	13480 <__assert_fail@plt+0x1eb8>
   1346c:	mov	r2, #3
   13470:	ldr	r1, [pc, #216]	; 13550 <__assert_fail@plt+0x1f88>
   13474:	bl	11598 <strncmp@plt>
   13478:	cmp	r0, #0
   1347c:	bne	134c4 <__assert_fail@plt+0x1efc>
   13480:	mov	r2, #5
   13484:	ldr	r1, [pc, #200]	; 13554 <__assert_fail@plt+0x1f8c>
   13488:	mov	r0, #0
   1348c:	bl	112d4 <dcgettext@plt>
   13490:	ldr	r3, [pc, #168]	; 13540 <__assert_fail@plt+0x1f78>
   13494:	ldr	r2, [pc, #172]	; 13548 <__assert_fail@plt+0x1f80>
   13498:	mov	r5, r3
   1349c:	mov	r1, r0
   134a0:	mov	r0, #1
   134a4:	bl	1149c <__printf_chk@plt>
   134a8:	ldr	r1, [pc, #168]	; 13558 <__assert_fail@plt+0x1f90>
   134ac:	mov	r2, #5
   134b0:	mov	r0, #0
   134b4:	bl	112d4 <dcgettext@plt>
   134b8:	ldr	r3, [pc, #160]	; 13560 <__assert_fail@plt+0x1f98>
   134bc:	mov	r1, r0
   134c0:	b	1342c <__assert_fail@plt+0x1e64>
   134c4:	ldr	r6, [pc, #116]	; 13540 <__assert_fail@plt+0x1f78>
   134c8:	mov	r5, r6
   134cc:	mov	r2, #5
   134d0:	ldr	r1, [pc, #140]	; 13564 <__assert_fail@plt+0x1f9c>
   134d4:	mov	r0, #0
   134d8:	bl	112d4 <dcgettext@plt>
   134dc:	ldr	r2, [pc, #92]	; 13540 <__assert_fail@plt+0x1f78>
   134e0:	mov	r1, r0
   134e4:	mov	r0, #1
   134e8:	bl	1149c <__printf_chk@plt>
   134ec:	b	133e4 <__assert_fail@plt+0x1e1c>
   134f0:	andeq	fp, r2, r8, lsl #30
   134f4:	andeq	ip, r2, r0, asr #3
   134f8:	strdeq	r9, [r1], -r0
   134fc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13500:	andeq	r9, r1, r8, lsl ip
   13504:	andeq	ip, r2, r4, asr #3
   13508:	andeq	r9, r1, r8, lsr ip
   1350c:	andeq	r9, r1, r0, asr #25
   13510:	andeq	r9, r1, r8, ror #25
   13514:	andeq	r9, r1, r4, lsr sp
   13518:	andeq	r9, r1, ip, lsr lr
   1351c:	andeq	r9, r1, ip, lsr #31
   13520:	ldrdeq	r9, [r1], -ip
   13524:	andeq	sl, r1, r4, lsl r0
   13528:	strdeq	sl, [r1], -r0
   1352c:	andeq	sl, r1, ip, asr r3
   13530:	muleq	r1, r8, r4
   13534:	andeq	sl, r1, r8, lsl #10
   13538:	andeq	sl, r1, r0, ror #13
   1353c:	andeq	r9, r1, ip, lsr r9
   13540:	andeq	r9, r1, r8, ror #23
   13544:	andeq	sl, r1, r8, lsl #15
   13548:	andeq	sl, r1, r0, lsr #15
   1354c:	andeq	sl, r1, r8, asr #15
   13550:	ldrdeq	sl, [r1], -r8
   13554:	andeq	sl, r1, r4, lsr #16
   13558:	andeq	sl, r1, r4, asr #16
   1355c:	andeq	sl, r1, r4, lsl #10
   13560:	andeq	sl, r1, r8, lsl #20
   13564:	ldrdeq	sl, [r1], -ip
   13568:	mov	r0, #1
   1356c:	b	13168 <__assert_fail@plt+0x1ba0>
   13570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13574:	mov	r5, r1
   13578:	sub	sp, sp, #12
   1357c:	mov	r4, r2
   13580:	str	r2, [sp]
   13584:	mov	r7, r3
   13588:	mov	sl, r0
   1358c:	bl	11424 <strlen@plt>
   13590:	ldr	fp, [r5]
   13594:	cmp	fp, #0
   13598:	beq	1365c <__assert_fail@plt+0x2094>
   1359c:	mov	r6, #0
   135a0:	mov	r8, r0
   135a4:	str	r6, [sp, #4]
   135a8:	mvn	r9, #0
   135ac:	b	135d8 <__assert_fail@plt+0x2010>
   135b0:	bl	112c8 <memcmp@plt>
   135b4:	ldr	r3, [sp, #4]
   135b8:	cmp	r0, #0
   135bc:	movne	r3, #1
   135c0:	str	r3, [sp, #4]
   135c4:	ldr	fp, [r5, #4]!
   135c8:	add	r6, r6, #1
   135cc:	cmp	fp, #0
   135d0:	add	r4, r4, r7
   135d4:	beq	13634 <__assert_fail@plt+0x206c>
   135d8:	mov	r2, r8
   135dc:	mov	r1, sl
   135e0:	mov	r0, fp
   135e4:	bl	11598 <strncmp@plt>
   135e8:	cmp	r0, #0
   135ec:	mov	r0, fp
   135f0:	bne	135c4 <__assert_fail@plt+0x1ffc>
   135f4:	bl	11424 <strlen@plt>
   135f8:	ldr	r3, [sp]
   135fc:	mov	r2, r7
   13600:	mov	r1, r4
   13604:	cmp	r0, r8
   13608:	mla	r0, r7, r9, r3
   1360c:	beq	1364c <__assert_fail@plt+0x2084>
   13610:	cmn	r9, #1
   13614:	moveq	r9, r6
   13618:	beq	135c4 <__assert_fail@plt+0x1ffc>
   1361c:	ldr	r3, [sp]
   13620:	cmp	r3, #0
   13624:	bne	135b0 <__assert_fail@plt+0x1fe8>
   13628:	mov	r3, #1
   1362c:	str	r3, [sp, #4]
   13630:	b	135c4 <__assert_fail@plt+0x1ffc>
   13634:	ldr	r3, [sp, #4]
   13638:	cmp	r3, #0
   1363c:	mvnne	r9, #1
   13640:	mov	r0, r9
   13644:	add	sp, sp, #12
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364c:	mov	r9, r6
   13650:	mov	r0, r9
   13654:	add	sp, sp, #12
   13658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1365c:	mvn	r9, #0
   13660:	b	13640 <__assert_fail@plt+0x2078>
   13664:	cmn	r2, #1
   13668:	push	{r4, r5, r6, lr}
   1366c:	mov	r2, #5
   13670:	sub	sp, sp, #8
   13674:	mov	r5, r1
   13678:	mov	r6, r0
   1367c:	ldreq	r1, [pc, #76]	; 136d0 <__assert_fail@plt+0x2108>
   13680:	ldrne	r1, [pc, #76]	; 136d4 <__assert_fail@plt+0x210c>
   13684:	mov	r0, #0
   13688:	bl	112d4 <dcgettext@plt>
   1368c:	mov	r2, r5
   13690:	mov	r1, #8
   13694:	mov	r4, r0
   13698:	mov	r0, #0
   1369c:	bl	1667c <__assert_fail@plt+0x50b4>
   136a0:	mov	r1, r6
   136a4:	mov	r5, r0
   136a8:	mov	r0, #1
   136ac:	bl	169c8 <__assert_fail@plt+0x5400>
   136b0:	mov	r1, #0
   136b4:	mov	r3, r5
   136b8:	mov	r2, r4
   136bc:	str	r0, [sp]
   136c0:	mov	r0, r1
   136c4:	bl	113a0 <error@plt>
   136c8:	add	sp, sp, #8
   136cc:	pop	{r4, r5, r6, pc}
   136d0:	andeq	sl, r1, ip, ror #21
   136d4:	andeq	sl, r1, r8, lsl #22
   136d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136dc:	mov	r6, r0
   136e0:	ldr	sl, [pc, #224]	; 137c8 <__assert_fail@plt+0x2200>
   136e4:	mov	r4, r1
   136e8:	mov	r7, r2
   136ec:	ldr	r1, [pc, #216]	; 137cc <__assert_fail@plt+0x2204>
   136f0:	mov	r2, #5
   136f4:	mov	r0, #0
   136f8:	bl	112d4 <dcgettext@plt>
   136fc:	ldr	r1, [sl]
   13700:	bl	11214 <fputs_unlocked@plt>
   13704:	ldr	fp, [r6]
   13708:	cmp	fp, #0
   1370c:	movne	r9, #0
   13710:	movne	r5, r9
   13714:	bne	13750 <__assert_fail@plt+0x2188>
   13718:	b	13794 <__assert_fail@plt+0x21cc>
   1371c:	mov	r0, fp
   13720:	bl	169d8 <__assert_fail@plt+0x5410>
   13724:	ldr	r2, [pc, #164]	; 137d0 <__assert_fail@plt+0x2208>
   13728:	mov	r1, #1
   1372c:	mov	r9, r4
   13730:	mov	r3, r0
   13734:	mov	r0, r8
   13738:	bl	114c0 <__fprintf_chk@plt>
   1373c:	ldr	fp, [r6, #4]!
   13740:	add	r5, r5, #1
   13744:	cmp	fp, #0
   13748:	add	r4, r4, r7
   1374c:	beq	13794 <__assert_fail@plt+0x21cc>
   13750:	cmp	r5, #0
   13754:	mov	r1, r4
   13758:	mov	r2, r7
   1375c:	mov	r0, r9
   13760:	ldr	r8, [sl]
   13764:	beq	1371c <__assert_fail@plt+0x2154>
   13768:	bl	112c8 <memcmp@plt>
   1376c:	cmp	r0, #0
   13770:	bne	1371c <__assert_fail@plt+0x2154>
   13774:	mov	r0, fp
   13778:	bl	169d8 <__assert_fail@plt+0x5410>
   1377c:	ldr	r2, [pc, #80]	; 137d4 <__assert_fail@plt+0x220c>
   13780:	mov	r1, #1
   13784:	mov	r3, r0
   13788:	mov	r0, r8
   1378c:	bl	114c0 <__fprintf_chk@plt>
   13790:	b	1373c <__assert_fail@plt+0x2174>
   13794:	ldr	r0, [sl]
   13798:	ldr	r3, [r0, #20]
   1379c:	ldr	r2, [r0, #24]
   137a0:	cmp	r3, r2
   137a4:	bcs	137bc <__assert_fail@plt+0x21f4>
   137a8:	add	r1, r3, #1
   137ac:	mov	r2, #10
   137b0:	str	r1, [r0, #20]
   137b4:	strb	r2, [r3]
   137b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137bc:	mov	r1, #10
   137c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137c4:	b	114f0 <__overflow@plt>
   137c8:	andeq	ip, r2, r0, asr #3
   137cc:	andeq	sl, r1, r8, lsr #22
   137d0:	andeq	sl, r1, r0, asr #22
   137d4:	andeq	sl, r1, r8, asr #22
   137d8:	push	{r4, r5, r6, r7, r8, lr}
   137dc:	mov	r6, r1
   137e0:	mov	r4, r2
   137e4:	mov	r5, r3
   137e8:	mov	r7, r0
   137ec:	ldr	r3, [sp, #24]
   137f0:	mov	r2, r5
   137f4:	mov	r1, r4
   137f8:	mov	r0, r6
   137fc:	bl	13570 <__assert_fail@plt+0x1fa8>
   13800:	cmp	r0, #0
   13804:	popge	{r4, r5, r6, r7, r8, pc}
   13808:	mov	r2, r0
   1380c:	mov	r1, r6
   13810:	mov	r0, r7
   13814:	bl	13664 <__assert_fail@plt+0x209c>
   13818:	mov	r0, r4
   1381c:	ldr	r2, [sp, #24]
   13820:	mov	r1, r5
   13824:	bl	136d8 <__assert_fail@plt+0x2110>
   13828:	ldr	r3, [sp, #28]
   1382c:	blx	r3
   13830:	mvn	r0, #0
   13834:	pop	{r4, r5, r6, r7, r8, pc}
   13838:	push	{r4, r5, r6, r7, r8, lr}
   1383c:	ldr	r7, [r1]
   13840:	cmp	r7, #0
   13844:	beq	13884 <__assert_fail@plt+0x22bc>
   13848:	mov	r6, r3
   1384c:	mov	r8, r0
   13850:	mov	r4, r2
   13854:	mov	r5, r1
   13858:	b	13868 <__assert_fail@plt+0x22a0>
   1385c:	ldr	r7, [r5, #4]!
   13860:	cmp	r7, #0
   13864:	beq	13884 <__assert_fail@plt+0x22bc>
   13868:	mov	r1, r4
   1386c:	mov	r2, r6
   13870:	mov	r0, r8
   13874:	bl	112c8 <memcmp@plt>
   13878:	add	r4, r4, r6
   1387c:	cmp	r0, #0
   13880:	bne	1385c <__assert_fail@plt+0x2294>
   13884:	mov	r0, r7
   13888:	pop	{r4, r5, r6, r7, r8, pc}
   1388c:	ldr	r3, [pc, #4]	; 13898 <__assert_fail@plt+0x22d0>
   13890:	str	r0, [r3]
   13894:	bx	lr
   13898:	ldrdeq	ip, [r2], -r4
   1389c:	ldr	r3, [pc, #4]	; 138a8 <__assert_fail@plt+0x22e0>
   138a0:	strb	r0, [r3, #4]
   138a4:	bx	lr
   138a8:	ldrdeq	ip, [r2], -r4
   138ac:	ldr	r3, [pc, #180]	; 13968 <__assert_fail@plt+0x23a0>
   138b0:	push	{r4, r5, r6, lr}
   138b4:	sub	sp, sp, #8
   138b8:	ldr	r0, [r3]
   138bc:	bl	18de8 <__assert_fail@plt+0x7820>
   138c0:	cmp	r0, #0
   138c4:	beq	138ec <__assert_fail@plt+0x2324>
   138c8:	bl	11448 <__errno_location@plt>
   138cc:	ldr	r5, [pc, #152]	; 1396c <__assert_fail@plt+0x23a4>
   138d0:	ldrb	r3, [r5, #4]
   138d4:	cmp	r3, #0
   138d8:	mov	r4, r0
   138dc:	beq	13908 <__assert_fail@plt+0x2340>
   138e0:	ldr	r3, [r0]
   138e4:	cmp	r3, #32
   138e8:	bne	13908 <__assert_fail@plt+0x2340>
   138ec:	ldr	r3, [pc, #124]	; 13970 <__assert_fail@plt+0x23a8>
   138f0:	ldr	r0, [r3]
   138f4:	bl	18de8 <__assert_fail@plt+0x7820>
   138f8:	cmp	r0, #0
   138fc:	bne	13948 <__assert_fail@plt+0x2380>
   13900:	add	sp, sp, #8
   13904:	pop	{r4, r5, r6, pc}
   13908:	mov	r2, #5
   1390c:	ldr	r1, [pc, #96]	; 13974 <__assert_fail@plt+0x23ac>
   13910:	mov	r0, #0
   13914:	bl	112d4 <dcgettext@plt>
   13918:	mov	r6, r0
   1391c:	ldr	r0, [r5]
   13920:	cmp	r0, #0
   13924:	beq	13954 <__assert_fail@plt+0x238c>
   13928:	ldr	r4, [r4]
   1392c:	bl	167f8 <__assert_fail@plt+0x5230>
   13930:	mov	r1, r4
   13934:	str	r6, [sp]
   13938:	ldr	r2, [pc, #56]	; 13978 <__assert_fail@plt+0x23b0>
   1393c:	mov	r3, r0
   13940:	mov	r0, #0
   13944:	bl	113a0 <error@plt>
   13948:	ldr	r3, [pc, #44]	; 1397c <__assert_fail@plt+0x23b4>
   1394c:	ldr	r0, [r3]
   13950:	bl	11280 <_exit@plt>
   13954:	mov	r3, r6
   13958:	ldr	r1, [r4]
   1395c:	ldr	r2, [pc, #28]	; 13980 <__assert_fail@plt+0x23b8>
   13960:	bl	113a0 <error@plt>
   13964:	b	13948 <__assert_fail@plt+0x2380>
   13968:	andeq	ip, r2, r4, asr #3
   1396c:	ldrdeq	ip, [r2], -r4
   13970:	andeq	ip, r2, r0, asr #3
   13974:	andeq	sl, r1, r0, asr fp
   13978:	andeq	sl, r1, ip, asr fp
   1397c:	andeq	ip, r2, r8, ror #2
   13980:	andeq	sl, r1, r0, ror #22
   13984:	push	{r4, lr}
   13988:	bl	13a00 <__assert_fail@plt+0x2438>
   1398c:	cmp	r0, #0
   13990:	popne	{r4, pc}
   13994:	bl	17edc <__assert_fail@plt+0x6914>
   13998:	push	{r4, r5, r6, lr}
   1399c:	mov	r4, r0
   139a0:	ldrb	ip, [r0]
   139a4:	sub	r5, ip, #47	; 0x2f
   139a8:	bl	13a58 <__assert_fail@plt+0x2490>
   139ac:	clz	r5, r5
   139b0:	lsr	r5, r5, #5
   139b4:	sub	r0, r0, r4
   139b8:	cmp	r0, r5
   139bc:	popls	{r4, r5, r6, pc}
   139c0:	add	r3, r4, r0
   139c4:	ldrb	r3, [r3, #-1]
   139c8:	cmp	r3, #47	; 0x2f
   139cc:	popne	{r4, r5, r6, pc}
   139d0:	sub	r0, r0, #2
   139d4:	sub	ip, r4, #1
   139d8:	add	r3, r4, r0
   139dc:	add	ip, ip, r5
   139e0:	rsb	r2, r4, #1
   139e4:	cmp	r3, ip
   139e8:	add	r0, r2, r3
   139ec:	popeq	{r4, r5, r6, pc}
   139f0:	ldrb	r1, [r3], #-1
   139f4:	cmp	r1, #47	; 0x2f
   139f8:	beq	139e4 <__assert_fail@plt+0x241c>
   139fc:	pop	{r4, r5, r6, pc}
   13a00:	push	{r4, r5, r6, lr}
   13a04:	mov	r6, r0
   13a08:	bl	13998 <__assert_fail@plt+0x23d0>
   13a0c:	add	r3, r0, #1
   13a10:	mov	r4, r0
   13a14:	cmp	r0, #0
   13a18:	movne	r0, r3
   13a1c:	addeq	r0, r3, #1
   13a20:	bl	113c4 <malloc@plt>
   13a24:	subs	r5, r0, #0
   13a28:	beq	13a50 <__assert_fail@plt+0x2488>
   13a2c:	mov	r2, r4
   13a30:	mov	r1, r6
   13a34:	bl	1128c <memcpy@plt>
   13a38:	cmp	r4, #0
   13a3c:	moveq	r3, #46	; 0x2e
   13a40:	moveq	r4, #1
   13a44:	strbeq	r3, [r5]
   13a48:	mov	r3, #0
   13a4c:	strb	r3, [r5, r4]
   13a50:	mov	r0, r5
   13a54:	pop	{r4, r5, r6, pc}
   13a58:	ldrb	r3, [r0]
   13a5c:	cmp	r3, #47	; 0x2f
   13a60:	bne	13a70 <__assert_fail@plt+0x24a8>
   13a64:	ldrb	r3, [r0, #1]!
   13a68:	cmp	r3, #47	; 0x2f
   13a6c:	beq	13a64 <__assert_fail@plt+0x249c>
   13a70:	cmp	r3, #0
   13a74:	bxeq	lr
   13a78:	mov	r2, r0
   13a7c:	mov	r1, #0
   13a80:	cmp	r3, #47	; 0x2f
   13a84:	moveq	r1, #1
   13a88:	beq	13a98 <__assert_fail@plt+0x24d0>
   13a8c:	cmp	r1, #0
   13a90:	movne	r0, r2
   13a94:	movne	r1, #0
   13a98:	ldrb	r3, [r2, #1]!
   13a9c:	cmp	r3, #0
   13aa0:	bne	13a80 <__assert_fail@plt+0x24b8>
   13aa4:	bx	lr
   13aa8:	push	{r4, lr}
   13aac:	mov	r4, r0
   13ab0:	bl	11424 <strlen@plt>
   13ab4:	cmp	r0, #1
   13ab8:	popls	{r4, pc}
   13abc:	add	r2, r4, r0
   13ac0:	mov	r3, r0
   13ac4:	ldrb	r2, [r2, #-1]
   13ac8:	cmp	r2, #47	; 0x2f
   13acc:	subeq	r3, r0, #2
   13ad0:	addeq	r3, r4, r3
   13ad4:	rsbeq	r1, r4, #1
   13ad8:	popne	{r4, pc}
   13adc:	cmp	r3, r4
   13ae0:	add	r0, r1, r3
   13ae4:	popeq	{r4, pc}
   13ae8:	ldrb	r2, [r3], #-1
   13aec:	cmp	r2, #47	; 0x2f
   13af0:	popne	{r4, pc}
   13af4:	b	13adc <__assert_fail@plt+0x2514>
   13af8:	push	{r1, r2, r3}
   13afc:	push	{r4, lr}
   13b00:	sub	sp, sp, #12
   13b04:	ldr	r4, [pc, #68]	; 13b50 <__assert_fail@plt+0x2588>
   13b08:	ldr	r1, [sp, #20]
   13b0c:	ldr	r3, [r4]
   13b10:	ands	r2, r1, #64	; 0x40
   13b14:	str	r3, [sp, #4]
   13b18:	ldrne	r2, [sp, #24]
   13b1c:	addne	r3, sp, #24
   13b20:	strne	r3, [sp]
   13b24:	bl	113ac <open64@plt>
   13b28:	bl	176f8 <__assert_fail@plt+0x6130>
   13b2c:	ldr	r2, [sp, #4]
   13b30:	ldr	r3, [r4]
   13b34:	cmp	r2, r3
   13b38:	bne	13b4c <__assert_fail@plt+0x2584>
   13b3c:	add	sp, sp, #12
   13b40:	pop	{r4, lr}
   13b44:	add	sp, sp, #12
   13b48:	bx	lr
   13b4c:	bl	112e0 <__stack_chk_fail@plt>
   13b50:	andeq	fp, r2, r8, lsl #30
   13b54:	andeq	r0, r0, r0
   13b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b5c:	vpush	{d8-d9}
   13b60:	mov	r8, r3
   13b64:	ands	r3, r3, #32
   13b68:	mov	r5, r2
   13b6c:	sub	sp, sp, #124	; 0x7c
   13b70:	mov	r7, r1
   13b74:	str	r3, [sp, #32]
   13b78:	ldr	r3, [pc, #1360]	; 140d0 <__assert_fail@plt+0x2b08>
   13b7c:	str	r2, [sp, #24]
   13b80:	movne	r2, #1024	; 0x400
   13b84:	ldr	r3, [r3]
   13b88:	moveq	r2, #1000	; 0x3e8
   13b8c:	str	r2, [sp, #28]
   13b90:	str	r3, [sp, #116]	; 0x74
   13b94:	mov	r6, r0
   13b98:	bl	1152c <localeconv@plt>
   13b9c:	add	r3, r5, #644	; 0x284
   13ba0:	str	r3, [sp, #48]	; 0x30
   13ba4:	add	r3, r3, #3
   13ba8:	str	r3, [sp, #12]
   13bac:	ldr	r2, [r0]
   13bb0:	mov	r4, r0
   13bb4:	mov	r0, r2
   13bb8:	mov	r5, r2
   13bbc:	bl	11424 <strlen@plt>
   13bc0:	ldr	r9, [r4, #4]
   13bc4:	ldr	r3, [pc, #1288]	; 140d4 <__assert_fail@plt+0x2b0c>
   13bc8:	sub	r2, r0, #1
   13bcc:	cmp	r2, #16
   13bd0:	movcc	r3, r5
   13bd4:	mov	fp, r0
   13bd8:	mov	r0, r9
   13bdc:	movcs	fp, #1
   13be0:	str	r3, [sp, #36]	; 0x24
   13be4:	bl	11424 <strlen@plt>
   13be8:	ldr	r3, [pc, #1256]	; 140d8 <__assert_fail@plt+0x2b10>
   13bec:	and	r2, r8, #3
   13bf0:	str	r2, [sp, #16]
   13bf4:	ldr	sl, [r4, #8]
   13bf8:	cmp	r0, #16
   13bfc:	movhi	r9, r3
   13c00:	ldrd	r0, [sp, #176]	; 0xb0
   13c04:	ldrd	r2, [sp, #184]	; 0xb8
   13c08:	cmp	r3, r1
   13c0c:	cmpeq	r2, r0
   13c10:	bhi	13ea8 <__assert_fail@plt+0x28e0>
   13c14:	bl	19620 <__assert_fail@plt+0x8058>
   13c18:	orrs	r3, r2, r3
   13c1c:	bne	13c50 <__assert_fail@plt+0x2688>
   13c20:	mul	r2, r0, r7
   13c24:	umull	r4, r5, r0, r6
   13c28:	mla	r2, r6, r1, r2
   13c2c:	mov	r3, r1
   13c30:	add	r5, r2, r5
   13c34:	mov	r1, r5
   13c38:	mov	r2, r0
   13c3c:	mov	r0, r4
   13c40:	bl	19620 <__assert_fail@plt+0x8058>
   13c44:	cmp	r1, r7
   13c48:	cmpeq	r0, r6
   13c4c:	beq	1420c <__assert_fail@plt+0x2c44>
   13c50:	ldrd	r0, [sp, #176]	; 0xb0
   13c54:	bl	194d8 <__assert_fail@plt+0x7f10>
   13c58:	vmov	d9, r0, r1
   13c5c:	ldrd	r0, [sp, #184]	; 0xb8
   13c60:	bl	194d8 <__assert_fail@plt+0x7f10>
   13c64:	vmov	d7, r0, r1
   13c68:	mov	r0, r6
   13c6c:	mov	r1, r7
   13c70:	vdiv.f64	d8, d9, d7
   13c74:	bl	194d8 <__assert_fail@plt+0x7f10>
   13c78:	tst	r8, #16
   13c7c:	vmov	d7, r0, r1
   13c80:	vmul.f64	d8, d8, d7
   13c84:	beq	13df0 <__assert_fail@plt+0x2828>
   13c88:	vldr	s15, [sp, #28]
   13c8c:	mov	r6, #0
   13c90:	vcvt.f64.s32	d6, s15
   13c94:	vmov.f64	d7, d6
   13c98:	vmov.f64	d5, d7
   13c9c:	vmul.f64	d7, d7, d6
   13ca0:	add	r6, r6, #1
   13ca4:	vcmpe.f64	d7, d8
   13ca8:	vmrs	APSR_nzcv, fpscr
   13cac:	bhi	13cb8 <__assert_fail@plt+0x26f0>
   13cb0:	cmp	r6, #8
   13cb4:	bne	13c98 <__assert_fail@plt+0x26d0>
   13cb8:	ldr	r3, [sp, #32]
   13cbc:	clz	r4, r3
   13cc0:	ldr	r3, [sp, #16]
   13cc4:	lsr	r4, r4, #5
   13cc8:	add	fp, fp, #1
   13ccc:	add	r4, r4, #1
   13cd0:	cmp	r3, #1
   13cd4:	vdiv.f64	d9, d8, d5
   13cd8:	add	r4, r4, fp
   13cdc:	beq	142c8 <__assert_fail@plt+0x2d00>
   13ce0:	vldr	d7, [pc, #984]	; 140c0 <__assert_fail@plt+0x2af8>
   13ce4:	vcmpe.f64	d9, d7
   13ce8:	vmrs	APSR_nzcv, fpscr
   13cec:	vmovpl.f64	d7, d9
   13cf0:	bpl	13d34 <__assert_fail@plt+0x276c>
   13cf4:	vmov	r0, r1, d9
   13cf8:	bl	19670 <__assert_fail@plt+0x80a8>
   13cfc:	mov	r5, r0
   13d00:	mov	r7, r1
   13d04:	bl	194d8 <__assert_fail@plt+0x7f10>
   13d08:	ldr	r3, [sp, #16]
   13d0c:	cmp	r3, #0
   13d10:	vmov	d7, r0, r1
   13d14:	bne	13d34 <__assert_fail@plt+0x276c>
   13d18:	vcmp.f64	d9, d7
   13d1c:	vmrs	APSR_nzcv, fpscr
   13d20:	beq	13d34 <__assert_fail@plt+0x276c>
   13d24:	adds	r0, r5, #1
   13d28:	adc	r1, r7, #0
   13d2c:	bl	194d8 <__assert_fail@plt+0x7f10>
   13d30:	vmov	d7, r0, r1
   13d34:	ldr	r5, [sp, #24]
   13d38:	vstr	d7, [sp]
   13d3c:	ldr	r3, [pc, #928]	; 140e4 <__assert_fail@plt+0x2b1c>
   13d40:	mvn	r2, #0
   13d44:	mov	r1, #1
   13d48:	mov	r0, r5
   13d4c:	bl	11454 <__sprintf_chk@plt>
   13d50:	mov	r0, r5
   13d54:	bl	11424 <strlen@plt>
   13d58:	cmp	r0, r4
   13d5c:	bls	141a4 <__assert_fail@plt+0x2bdc>
   13d60:	vldr	d7, [pc, #864]	; 140c8 <__assert_fail@plt+0x2b00>
   13d64:	vmul.f64	d9, d9, d7
   13d68:	vldr	d7, [pc, #848]	; 140c0 <__assert_fail@plt+0x2af8>
   13d6c:	vcmpe.f64	d9, d7
   13d70:	vmrs	APSR_nzcv, fpscr
   13d74:	bpl	13dbc <__assert_fail@plt+0x27f4>
   13d78:	vmov	r0, r1, d9
   13d7c:	bl	19670 <__assert_fail@plt+0x80a8>
   13d80:	mov	r4, r0
   13d84:	mov	r5, r1
   13d88:	bl	194d8 <__assert_fail@plt+0x7f10>
   13d8c:	ldr	r3, [sp, #16]
   13d90:	cmp	r3, #0
   13d94:	vmov	d7, r0, r1
   13d98:	bne	13db8 <__assert_fail@plt+0x27f0>
   13d9c:	vcmp.f64	d9, d7
   13da0:	vmrs	APSR_nzcv, fpscr
   13da4:	beq	13db8 <__assert_fail@plt+0x27f0>
   13da8:	adds	r0, r4, #1
   13dac:	adc	r1, r5, #0
   13db0:	bl	194d8 <__assert_fail@plt+0x7f10>
   13db4:	vmov	d7, r0, r1
   13db8:	vmov.f64	d9, d7
   13dbc:	vldr	d6, [pc, #772]	; 140c8 <__assert_fail@plt+0x2b00>
   13dc0:	ldr	r4, [sp, #24]
   13dc4:	ldr	r3, [pc, #784]	; 140dc <__assert_fail@plt+0x2b14>
   13dc8:	mvn	r2, #0
   13dcc:	vdiv.f64	d7, d9, d6
   13dd0:	mov	r1, #1
   13dd4:	mov	r0, r4
   13dd8:	vstr	d7, [sp]
   13ddc:	bl	11454 <__sprintf_chk@plt>
   13de0:	mov	r0, r4
   13de4:	bl	11424 <strlen@plt>
   13de8:	mov	r7, r0
   13dec:	b	13e38 <__assert_fail@plt+0x2870>
   13df0:	and	r6, r8, #3
   13df4:	cmp	r6, #1
   13df8:	beq	13e0c <__assert_fail@plt+0x2844>
   13dfc:	vldr	d7, [pc, #700]	; 140c0 <__assert_fail@plt+0x2af8>
   13e00:	vcmpe.f64	d8, d7
   13e04:	vmrs	APSR_nzcv, fpscr
   13e08:	bmi	141c8 <__assert_fail@plt+0x2c00>
   13e0c:	ldr	r4, [sp, #24]
   13e10:	ldr	r3, [pc, #708]	; 140dc <__assert_fail@plt+0x2b14>
   13e14:	mvn	r2, #0
   13e18:	mov	r1, #1
   13e1c:	vstr	d8, [sp]
   13e20:	mov	r0, r4
   13e24:	bl	11454 <__sprintf_chk@plt>
   13e28:	mov	r0, r4
   13e2c:	bl	11424 <strlen@plt>
   13e30:	mvn	r6, #0
   13e34:	mov	r7, r0
   13e38:	ldr	r3, [sp, #12]
   13e3c:	mov	r2, r0
   13e40:	sub	fp, r3, r0
   13e44:	mov	r0, fp
   13e48:	ldr	r1, [sp, #24]
   13e4c:	add	r7, fp, r7
   13e50:	bl	11268 <memmove@plt>
   13e54:	tst	r8, #4
   13e58:	bne	14018 <__assert_fail@plt+0x2a50>
   13e5c:	tst	r8, #128	; 0x80
   13e60:	beq	13e78 <__assert_fail@plt+0x28b0>
   13e64:	cmn	r6, #1
   13e68:	beq	140e8 <__assert_fail@plt+0x2b20>
   13e6c:	and	r3, r8, #256	; 0x100
   13e70:	orrs	r2, r3, r6
   13e74:	bne	14350 <__assert_fail@plt+0x2d88>
   13e78:	ldr	r2, [sp, #12]
   13e7c:	mov	r3, #0
   13e80:	mov	r0, fp
   13e84:	strb	r3, [r2]
   13e88:	ldr	r3, [pc, #576]	; 140d0 <__assert_fail@plt+0x2b08>
   13e8c:	ldr	r2, [sp, #116]	; 0x74
   13e90:	ldr	r3, [r3]
   13e94:	cmp	r2, r3
   13e98:	bne	1451c <__assert_fail@plt+0x2f54>
   13e9c:	add	sp, sp, #124	; 0x7c
   13ea0:	vpop	{d8-d9}
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea8:	ldrd	r2, [sp, #176]	; 0xb0
   13eac:	orrs	r3, r2, r3
   13eb0:	beq	13c50 <__assert_fail@plt+0x2688>
   13eb4:	ldrd	r2, [sp, #176]	; 0xb0
   13eb8:	ldrd	r0, [sp, #184]	; 0xb8
   13ebc:	bl	19620 <__assert_fail@plt+0x8058>
   13ec0:	orrs	r3, r2, r3
   13ec4:	mov	r4, r0
   13ec8:	mov	r5, r1
   13ecc:	bne	13c50 <__assert_fail@plt+0x2688>
   13ed0:	mov	r0, r6
   13ed4:	mov	r1, r7
   13ed8:	mov	r2, r4
   13edc:	mov	r3, r5
   13ee0:	bl	19620 <__assert_fail@plt+0x8058>
   13ee4:	strd	r0, [sp, #52]	; 0x34
   13ee8:	lsl	r0, r2, #2
   13eec:	lsl	r1, r3, #2
   13ef0:	adds	r0, r0, r2
   13ef4:	orr	r1, r1, r2, lsr #30
   13ef8:	adc	r1, r1, r3
   13efc:	adds	r0, r0, r0
   13f00:	adc	r1, r1, r1
   13f04:	mov	r2, r4
   13f08:	mov	r3, r5
   13f0c:	bl	19620 <__assert_fail@plt+0x8058>
   13f10:	adds	r1, r2, r2
   13f14:	adc	r3, r3, r3
   13f18:	str	r3, [sp, #44]	; 0x2c
   13f1c:	str	r1, [sp, #40]	; 0x28
   13f20:	ldrd	r6, [sp, #40]	; 0x28
   13f24:	mov	r3, r5
   13f28:	mov	lr, r0
   13f2c:	cmp	r5, r7
   13f30:	cmpeq	r4, r6
   13f34:	ldrd	r4, [sp, #52]	; 0x34
   13f38:	bls	1433c <__assert_fail@plt+0x2d74>
   13f3c:	mov	r3, r6
   13f40:	orrs	r3, r3, r7
   13f44:	movne	r3, #1
   13f48:	moveq	r3, #0
   13f4c:	mov	ip, r3
   13f50:	ands	r3, r8, #16
   13f54:	str	r3, [sp, #52]	; 0x34
   13f58:	beq	14224 <__assert_fail@plt+0x2c5c>
   13f5c:	ldr	r1, [sp, #28]
   13f60:	mov	r3, #0
   13f64:	mov	r2, r1
   13f68:	cmp	r3, r5
   13f6c:	cmpeq	r1, r4
   13f70:	strd	r2, [sp, #40]	; 0x28
   13f74:	mov	r6, #0
   13f78:	bhi	14228 <__assert_fail@plt+0x2c60>
   13f7c:	str	r9, [sp, #56]	; 0x38
   13f80:	str	r8, [sp, #68]	; 0x44
   13f84:	mov	r7, ip
   13f88:	str	fp, [sp, #60]	; 0x3c
   13f8c:	mov	r9, r1
   13f90:	str	sl, [sp, #64]	; 0x40
   13f94:	mov	r8, lr
   13f98:	b	13fc0 <__assert_fail@plt+0x29f8>
   13f9c:	adds	r7, r7, #0
   13fa0:	movne	r7, #1
   13fa4:	ldrd	r2, [sp, #40]	; 0x28
   13fa8:	add	r6, r6, #1
   13fac:	cmp	r3, fp
   13fb0:	cmpeq	r2, sl
   13fb4:	bhi	143c0 <__assert_fail@plt+0x2df8>
   13fb8:	cmp	r6, #8
   13fbc:	beq	14388 <__assert_fail@plt+0x2dc0>
   13fc0:	mov	r0, r4
   13fc4:	mov	r1, r5
   13fc8:	ldrd	r2, [sp, #40]	; 0x28
   13fcc:	bl	19620 <__assert_fail@plt+0x8058>
   13fd0:	add	r2, r2, r2, lsl #2
   13fd4:	mov	sl, r0
   13fd8:	mov	fp, r1
   13fdc:	add	r0, r8, r2, lsl #1
   13fe0:	mov	r1, r9
   13fe4:	bl	1916c <__assert_fail@plt+0x7ba4>
   13fe8:	asr	r3, r7, #1
   13fec:	mov	r4, sl
   13ff0:	mov	r5, fp
   13ff4:	add	r1, r3, r1, lsl #1
   13ff8:	cmp	r9, r1
   13ffc:	mov	r8, r0
   14000:	add	r7, r7, r1
   14004:	bhi	13f9c <__assert_fail@plt+0x29d4>
   14008:	cmp	r9, r7
   1400c:	movcc	r7, #3
   14010:	movcs	r7, #2
   14014:	b	13fa4 <__assert_fail@plt+0x29dc>
   14018:	mov	r0, r9
   1401c:	bl	11424 <strlen@plt>
   14020:	sub	r4, r7, fp
   14024:	add	r3, sp, #72	; 0x48
   14028:	mov	r1, fp
   1402c:	mov	r2, r4
   14030:	mvn	r5, #0
   14034:	str	r0, [sp, #16]
   14038:	mov	r0, r3
   1403c:	mov	r3, #41	; 0x29
   14040:	bl	11334 <__memcpy_chk@plt>
   14044:	ldr	fp, [sp, #16]
   14048:	ldrb	r3, [sl]
   1404c:	cmp	r3, #0
   14050:	beq	14064 <__assert_fail@plt+0x2a9c>
   14054:	cmp	r3, #255	; 0xff
   14058:	movne	r5, r3
   1405c:	moveq	r5, r4
   14060:	add	sl, sl, #1
   14064:	cmp	r5, r4
   14068:	bls	14084 <__assert_fail@plt+0x2abc>
   1406c:	sub	fp, r7, r4
   14070:	mov	r2, r4
   14074:	add	r1, sp, #72	; 0x48
   14078:	mov	r0, fp
   1407c:	bl	1128c <memcpy@plt>
   14080:	b	13e5c <__assert_fail@plt+0x2894>
   14084:	sub	r4, r4, r5
   14088:	add	r3, sp, #72	; 0x48
   1408c:	sub	r7, r7, r5
   14090:	add	r1, r3, r4
   14094:	mov	r0, r7
   14098:	mov	r2, r5
   1409c:	bl	1128c <memcpy@plt>
   140a0:	cmp	r4, #0
   140a4:	beq	14520 <__assert_fail@plt+0x2f58>
   140a8:	sub	r7, r7, fp
   140ac:	mov	r0, r7
   140b0:	mov	r2, fp
   140b4:	mov	r1, r9
   140b8:	bl	1128c <memcpy@plt>
   140bc:	b	14048 <__assert_fail@plt+0x2a80>
   140c0:	andeq	r0, r0, r0
   140c4:	mvnsmi	r0, #0
   140c8:	andeq	r0, r0, r0
   140cc:	eormi	r0, r4, r0
   140d0:	andeq	fp, r2, r8, lsl #30
   140d4:	andeq	sl, r1, r4, lsl #23
   140d8:	andeq	sl, r1, r4, lsl #10
   140dc:	andeq	sl, r1, r8, lsl #23
   140e0:	andeq	sl, r1, r4, ror #22
   140e4:	muleq	r1, r0, fp
   140e8:	ldrd	r2, [sp, #184]	; 0xb8
   140ec:	cmp	r3, #0
   140f0:	cmpeq	r2, #1
   140f4:	bls	14380 <__assert_fail@plt+0x2db8>
   140f8:	ldr	r1, [sp, #28]
   140fc:	ldrd	r4, [sp, #184]	; 0xb8
   14100:	mov	r6, #1
   14104:	mov	r2, #1
   14108:	mov	r3, #0
   1410c:	mul	r0, r1, r3
   14110:	umull	r2, r3, r2, r1
   14114:	add	r3, r0, r3
   14118:	cmp	r5, r3
   1411c:	cmpeq	r4, r2
   14120:	bls	14130 <__assert_fail@plt+0x2b68>
   14124:	add	r6, r6, #1
   14128:	cmp	r6, #8
   1412c:	bne	1410c <__assert_fail@plt+0x2b44>
   14130:	tst	r8, #64	; 0x40
   14134:	and	r3, r8, #256	; 0x100
   14138:	beq	14158 <__assert_fail@plt+0x2b90>
   1413c:	ldr	r1, [sp, #24]
   14140:	add	r2, r1, #648	; 0x288
   14144:	str	r2, [sp, #12]
   14148:	mov	r2, #32
   1414c:	strb	r2, [r1, #647]	; 0x287
   14150:	cmp	r6, #0
   14154:	beq	14528 <__assert_fail@plt+0x2f60>
   14158:	ldr	r0, [sp, #32]
   1415c:	cmp	r6, #1
   14160:	cmpeq	r0, #0
   14164:	beq	143a4 <__assert_fail@plt+0x2ddc>
   14168:	ldr	r1, [pc, #-144]	; 140e0 <__assert_fail@plt+0x2b18>
   1416c:	cmp	r3, #0
   14170:	ldr	r2, [sp, #12]
   14174:	ldrb	r3, [r1, r6]
   14178:	strb	r3, [r2], #1
   1417c:	beq	143b8 <__assert_fail@plt+0x2df0>
   14180:	cmp	r0, #0
   14184:	movne	r3, #105	; 0x69
   14188:	ldrne	r2, [sp, #12]
   1418c:	strbne	r3, [r2, #1]
   14190:	addne	r2, r2, #2
   14194:	mov	r3, #66	; 0x42
   14198:	strb	r3, [r2], #1
   1419c:	str	r2, [sp, #12]
   141a0:	b	13e78 <__assert_fail@plt+0x28b0>
   141a4:	tst	r8, #8
   141a8:	beq	141c0 <__assert_fail@plt+0x2bf8>
   141ac:	ldr	r3, [sp, #24]
   141b0:	add	r3, r3, r0
   141b4:	ldrb	r3, [r3, #-1]
   141b8:	cmp	r3, #48	; 0x30
   141bc:	beq	14478 <__assert_fail@plt+0x2eb0>
   141c0:	sub	r7, r0, fp
   141c4:	b	13e38 <__assert_fail@plt+0x2870>
   141c8:	vmov	r0, r1, d8
   141cc:	bl	19670 <__assert_fail@plt+0x80a8>
   141d0:	mov	r4, r0
   141d4:	mov	r5, r1
   141d8:	bl	194d8 <__assert_fail@plt+0x7f10>
   141dc:	cmp	r6, #0
   141e0:	vmov	d7, r0, r1
   141e4:	bne	14204 <__assert_fail@plt+0x2c3c>
   141e8:	vcmp.f64	d8, d7
   141ec:	vmrs	APSR_nzcv, fpscr
   141f0:	beq	14204 <__assert_fail@plt+0x2c3c>
   141f4:	adds	r0, r4, #1
   141f8:	adc	r1, r5, #0
   141fc:	bl	194d8 <__assert_fail@plt+0x7f10>
   14200:	vmov	d7, r0, r1
   14204:	vmov.f64	d8, d7
   14208:	b	13e0c <__assert_fail@plt+0x2844>
   1420c:	mov	r3, #0
   14210:	mov	ip, r3
   14214:	mov	lr, r3
   14218:	ands	r3, r8, #16
   1421c:	str	r3, [sp, #52]	; 0x34
   14220:	bne	13f5c <__assert_fail@plt+0x2994>
   14224:	mvn	r6, #0
   14228:	ldr	r3, [sp, #16]
   1422c:	cmp	r3, #1
   14230:	ldrne	r7, [sp, #12]
   14234:	beq	14300 <__assert_fail@plt+0x2d38>
   14238:	ldr	r3, [sp, #16]
   1423c:	cmp	r3, #0
   14240:	bne	14278 <__assert_fail@plt+0x2cb0>
   14244:	add	r3, lr, ip
   14248:	cmp	r3, #0
   1424c:	ble	14278 <__assert_fail@plt+0x2cb0>
   14250:	ldr	r3, [sp, #52]	; 0x34
   14254:	adds	r4, r4, #1
   14258:	adc	r5, r5, #0
   1425c:	cmp	r3, #0
   14260:	beq	14278 <__assert_fail@plt+0x2cb0>
   14264:	ldr	r2, [sp, #28]
   14268:	mov	r3, #0
   1426c:	cmp	r3, r5
   14270:	cmpeq	r2, r4
   14274:	beq	1435c <__assert_fail@plt+0x2d94>
   14278:	mov	fp, r7
   1427c:	b	14288 <__assert_fail@plt+0x2cc0>
   14280:	mov	r4, r0
   14284:	mov	r5, r1
   14288:	mov	r2, #10
   1428c:	mov	r3, #0
   14290:	mov	r0, r4
   14294:	mov	r1, r5
   14298:	bl	19620 <__assert_fail@plt+0x8058>
   1429c:	mov	r0, r4
   142a0:	mov	r1, r5
   142a4:	mov	r3, #0
   142a8:	add	r2, r2, #48	; 0x30
   142ac:	strb	r2, [fp, #-1]!
   142b0:	mov	r2, #10
   142b4:	bl	19620 <__assert_fail@plt+0x8058>
   142b8:	cmp	r5, #0
   142bc:	cmpeq	r4, #9
   142c0:	bhi	14280 <__assert_fail@plt+0x2cb8>
   142c4:	b	13e54 <__assert_fail@plt+0x288c>
   142c8:	ldr	r5, [sp, #24]
   142cc:	ldr	r3, [pc, #-496]	; 140e4 <__assert_fail@plt+0x2b1c>
   142d0:	mvn	r2, #0
   142d4:	ldr	r1, [sp, #16]
   142d8:	vstr	d9, [sp]
   142dc:	mov	r0, r5
   142e0:	bl	11454 <__sprintf_chk@plt>
   142e4:	mov	r0, r5
   142e8:	bl	11424 <strlen@plt>
   142ec:	cmp	r0, r4
   142f0:	bls	141a4 <__assert_fail@plt+0x2bdc>
   142f4:	vldr	d7, [pc, #572]	; 14538 <__assert_fail@plt+0x2f70>
   142f8:	vmul.f64	d9, d9, d7
   142fc:	b	13dbc <__assert_fail@plt+0x27f4>
   14300:	and	r3, r4, #1
   14304:	str	r3, [sp, #16]
   14308:	mov	r3, #0
   1430c:	str	r3, [sp, #20]
   14310:	ldrd	r2, [sp, #16]
   14314:	ldr	r7, [sp, #12]
   14318:	adds	r2, r2, ip
   1431c:	adc	r3, r3, ip, asr #31
   14320:	orr	r2, r2, r3
   14324:	mov	r3, lr
   14328:	cmp	r2, #0
   1432c:	addne	r3, r3, #1
   14330:	cmp	r3, #5
   14334:	bgt	14250 <__assert_fail@plt+0x2c88>
   14338:	b	14278 <__assert_fail@plt+0x2cb0>
   1433c:	movcs	r3, #2
   14340:	movcs	ip, r3
   14344:	movcc	r3, #3
   14348:	movcc	ip, r3
   1434c:	b	13f50 <__assert_fail@plt+0x2988>
   14350:	tst	r8, #64	; 0x40
   14354:	beq	14150 <__assert_fail@plt+0x2b88>
   14358:	b	1413c <__assert_fail@plt+0x2b74>
   1435c:	cmp	r6, #8
   14360:	beq	14278 <__assert_fail@plt+0x2cb0>
   14364:	tst	r8, #8
   14368:	add	r6, r6, #1
   1436c:	beq	144e8 <__assert_fail@plt+0x2f20>
   14370:	mov	r3, #49	; 0x31
   14374:	strb	r3, [r7, #-1]
   14378:	sub	fp, r7, #1
   1437c:	b	13e54 <__assert_fail@plt+0x288c>
   14380:	mov	r6, #0
   14384:	b	13e6c <__assert_fail@plt+0x28a4>
   14388:	mov	lr, r8
   1438c:	ldr	r9, [sp, #56]	; 0x38
   14390:	mov	ip, r7
   14394:	ldr	fp, [sp, #60]	; 0x3c
   14398:	ldr	sl, [sp, #64]	; 0x40
   1439c:	ldr	r8, [sp, #68]	; 0x44
   143a0:	b	14228 <__assert_fail@plt+0x2c60>
   143a4:	ldr	r2, [sp, #12]
   143a8:	cmp	r3, #0
   143ac:	mov	r3, #107	; 0x6b
   143b0:	strb	r3, [r2], #1
   143b4:	bne	14194 <__assert_fail@plt+0x2bcc>
   143b8:	str	r2, [sp, #12]
   143bc:	b	13e78 <__assert_fail@plt+0x28b0>
   143c0:	mov	r3, fp
   143c4:	mov	r2, sl
   143c8:	cmp	r3, #0
   143cc:	cmpeq	r2, #9
   143d0:	mov	lr, r8
   143d4:	ldr	r9, [sp, #56]	; 0x38
   143d8:	mov	ip, r7
   143dc:	strd	r2, [sp, #40]	; 0x28
   143e0:	ldr	fp, [sp, #60]	; 0x3c
   143e4:	ldr	sl, [sp, #64]	; 0x40
   143e8:	ldr	r8, [sp, #68]	; 0x44
   143ec:	bhi	14228 <__assert_fail@plt+0x2c60>
   143f0:	ldr	r3, [sp, #16]
   143f4:	cmp	r3, #1
   143f8:	beq	144a4 <__assert_fail@plt+0x2edc>
   143fc:	ldr	r2, [sp, #16]
   14400:	adds	r3, r7, #0
   14404:	movne	r3, #1
   14408:	cmp	r2, #0
   1440c:	movne	r3, #0
   14410:	cmp	r3, #0
   14414:	bne	14490 <__assert_fail@plt+0x2ec8>
   14418:	cmp	r0, #0
   1441c:	addne	r3, r0, #48	; 0x30
   14420:	uxtbne	r3, r3
   14424:	bne	14434 <__assert_fail@plt+0x2e6c>
   14428:	tst	r8, #8
   1442c:	bne	144bc <__assert_fail@plt+0x2ef4>
   14430:	mov	r3, #48	; 0x30
   14434:	ldr	r2, [sp, #48]	; 0x30
   14438:	ldr	r1, [sp, #36]	; 0x24
   1443c:	add	r7, r2, #2
   14440:	ldr	r2, [sp, #24]
   14444:	sub	r7, r7, fp
   14448:	mov	r0, r7
   1444c:	strb	r3, [r2, #646]	; 0x286
   14450:	mov	r2, fp
   14454:	bl	1128c <memcpy@plt>
   14458:	mov	r3, #0
   1445c:	mov	ip, r3
   14460:	ldr	r3, [sp, #16]
   14464:	cmp	r3, #1
   14468:	beq	14278 <__assert_fail@plt+0x2cb0>
   1446c:	mov	r3, #0
   14470:	mov	lr, r3
   14474:	b	14238 <__assert_fail@plt+0x2c70>
   14478:	vldr	d7, [pc, #184]	; 14538 <__assert_fail@plt+0x2f70>
   1447c:	ldr	r3, [sp, #16]
   14480:	cmp	r3, #1
   14484:	vmul.f64	d9, d9, d7
   14488:	bne	13d68 <__assert_fail@plt+0x27a0>
   1448c:	b	13dbc <__assert_fail@plt+0x27f4>
   14490:	cmp	r0, #9
   14494:	beq	144c4 <__assert_fail@plt+0x2efc>
   14498:	add	r3, r0, #49	; 0x31
   1449c:	uxtb	r3, r3
   144a0:	b	14434 <__assert_fail@plt+0x2e6c>
   144a4:	and	r3, r0, #1
   144a8:	add	r3, r3, r7
   144ac:	cmp	r3, #2
   144b0:	movle	r3, #0
   144b4:	movgt	r3, #1
   144b8:	b	14410 <__assert_fail@plt+0x2e48>
   144bc:	ldr	r7, [sp, #12]
   144c0:	b	14460 <__assert_fail@plt+0x2e98>
   144c4:	ldrd	r2, [sp, #40]	; 0x28
   144c8:	adds	r4, r2, #1
   144cc:	adc	r5, r3, #0
   144d0:	cmp	r5, #0
   144d4:	cmpeq	r4, #10
   144d8:	beq	1450c <__assert_fail@plt+0x2f44>
   144dc:	mov	r3, #0
   144e0:	mov	ip, r3
   144e4:	b	14428 <__assert_fail@plt+0x2e60>
   144e8:	mov	r2, #48	; 0x30
   144ec:	mvn	r3, fp
   144f0:	strb	r2, [r7, #-1]
   144f4:	add	r7, r7, r3
   144f8:	ldr	r1, [sp, #36]	; 0x24
   144fc:	mov	r2, fp
   14500:	mov	r0, r7
   14504:	bl	1128c <memcpy@plt>
   14508:	b	14370 <__assert_fail@plt+0x2da8>
   1450c:	mov	r3, #0
   14510:	ldr	r7, [sp, #12]
   14514:	mov	ip, r3
   14518:	b	14460 <__assert_fail@plt+0x2e98>
   1451c:	bl	112e0 <__stack_chk_fail@plt>
   14520:	mov	fp, r7
   14524:	b	13e5c <__assert_fail@plt+0x2894>
   14528:	cmp	r3, #0
   1452c:	ldrne	r2, [sp, #12]
   14530:	bne	14194 <__assert_fail@plt+0x2bcc>
   14534:	b	13e78 <__assert_fail@plt+0x28b0>
   14538:	andeq	r0, r0, r0
   1453c:	eormi	r0, r4, r0
   14540:	push	{r4, r5, r6, r7, r8, r9, lr}
   14544:	sub	sp, sp, #20
   14548:	ldr	r6, [pc, #424]	; 146f8 <__assert_fail@plt+0x3130>
   1454c:	subs	r4, r0, #0
   14550:	mov	r9, r1
   14554:	ldr	r3, [r6]
   14558:	mov	r7, r2
   1455c:	str	r3, [sp, #12]
   14560:	beq	14670 <__assert_fail@plt+0x30a8>
   14564:	ldrb	r3, [r4]
   14568:	ldr	r5, [pc, #396]	; 146fc <__assert_fail@plt+0x3134>
   1456c:	cmp	r3, #39	; 0x27
   14570:	addeq	r4, r4, #1
   14574:	mov	r3, #4
   14578:	add	r2, r5, #12
   1457c:	add	r1, r5, #20
   14580:	mov	r0, r4
   14584:	moveq	r8, #4
   14588:	movne	r8, #0
   1458c:	bl	13570 <__assert_fail@plt+0x1fa8>
   14590:	cmp	r0, #0
   14594:	blt	145d0 <__assert_fail@plt+0x3008>
   14598:	add	r5, r5, r0, lsl #2
   1459c:	mov	r2, #1
   145a0:	ldr	r1, [r5, #12]
   145a4:	mov	r3, #0
   145a8:	mov	r0, #0
   145ac:	orr	r8, r8, r1
   145b0:	strd	r2, [r7]
   145b4:	str	r8, [r9]
   145b8:	ldr	r2, [sp, #12]
   145bc:	ldr	r3, [r6]
   145c0:	cmp	r2, r3
   145c4:	bne	146f4 <__assert_fail@plt+0x312c>
   145c8:	add	sp, sp, #20
   145cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   145d0:	ldr	r2, [pc, #296]	; 14700 <__assert_fail@plt+0x3138>
   145d4:	mov	r3, r7
   145d8:	str	r2, [sp]
   145dc:	add	r1, sp, #8
   145e0:	mov	r2, #0
   145e4:	mov	r0, r4
   145e8:	bl	18074 <__assert_fail@plt+0x6aac>
   145ec:	cmp	r0, #0
   145f0:	bne	14638 <__assert_fail@plt+0x3070>
   145f4:	ldrb	r3, [r4]
   145f8:	sub	r3, r3, #48	; 0x30
   145fc:	cmp	r3, #9
   14600:	bls	1462c <__assert_fail@plt+0x3064>
   14604:	ldr	r2, [sp, #8]
   14608:	cmp	r4, r2
   1460c:	bne	1461c <__assert_fail@plt+0x3054>
   14610:	b	146c8 <__assert_fail@plt+0x3100>
   14614:	cmp	r2, r4
   14618:	beq	146c8 <__assert_fail@plt+0x3100>
   1461c:	ldrb	r3, [r4, #1]!
   14620:	sub	r3, r3, #48	; 0x30
   14624:	cmp	r3, #9
   14628:	bhi	14614 <__assert_fail@plt+0x304c>
   1462c:	ldrd	r2, [r7]
   14630:	str	r8, [r9]
   14634:	b	14644 <__assert_fail@plt+0x307c>
   14638:	mov	r3, #0
   1463c:	str	r3, [r9]
   14640:	ldrd	r2, [r7]
   14644:	orrs	r3, r2, r3
   14648:	bne	145b8 <__assert_fail@plt+0x2ff0>
   1464c:	ldr	r0, [pc, #176]	; 14704 <__assert_fail@plt+0x313c>
   14650:	bl	113b8 <getenv@plt>
   14654:	mov	r3, #0
   14658:	cmp	r0, #0
   1465c:	moveq	r2, #1024	; 0x400
   14660:	movne	r2, #512	; 0x200
   14664:	mov	r0, #4
   14668:	strd	r2, [r7]
   1466c:	b	145b8 <__assert_fail@plt+0x2ff0>
   14670:	ldr	r0, [pc, #144]	; 14708 <__assert_fail@plt+0x3140>
   14674:	bl	113b8 <getenv@plt>
   14678:	subs	r4, r0, #0
   1467c:	bne	14564 <__assert_fail@plt+0x2f9c>
   14680:	ldr	r0, [pc, #132]	; 1470c <__assert_fail@plt+0x3144>
   14684:	bl	113b8 <getenv@plt>
   14688:	subs	r4, r0, #0
   1468c:	bne	14564 <__assert_fail@plt+0x2f9c>
   14690:	ldr	r0, [pc, #108]	; 14704 <__assert_fail@plt+0x313c>
   14694:	bl	113b8 <getenv@plt>
   14698:	subs	r3, r0, #0
   1469c:	moveq	r4, #1024	; 0x400
   146a0:	moveq	r5, #0
   146a4:	movne	r2, #512	; 0x200
   146a8:	movne	r3, #0
   146ac:	strdeq	r4, [r7]
   146b0:	strdne	r2, [r7]
   146b4:	moveq	r0, r3
   146b8:	streq	r3, [r9]
   146bc:	movne	r0, r4
   146c0:	strne	r4, [r9]
   146c4:	b	145b8 <__assert_fail@plt+0x2ff0>
   146c8:	ldrb	r3, [r2, #-1]
   146cc:	cmp	r3, #66	; 0x42
   146d0:	orrne	r8, r8, #128	; 0x80
   146d4:	beq	146e0 <__assert_fail@plt+0x3118>
   146d8:	orr	r8, r8, #32
   146dc:	b	1462c <__assert_fail@plt+0x3064>
   146e0:	ldrb	r3, [r2, #-2]
   146e4:	orr	r8, r8, #384	; 0x180
   146e8:	cmp	r3, #105	; 0x69
   146ec:	bne	1462c <__assert_fail@plt+0x3064>
   146f0:	b	146d8 <__assert_fail@plt+0x3110>
   146f4:	bl	112e0 <__stack_chk_fail@plt>
   146f8:	andeq	fp, r2, r8, lsl #30
   146fc:	andeq	sl, r1, r4, ror #22
   14700:	andeq	sl, r1, r0, asr #23
   14704:			; <UNDEFINED> instruction: 0x0001abb0
   14708:	muleq	r1, r8, fp
   1470c:	andeq	sl, r1, r4, lsr #23
   14710:	push	{r4, r5, r6, lr}
   14714:	mov	r4, r0
   14718:	mov	r5, r1
   1471c:	add	r6, r2, #20
   14720:	mov	r3, #0
   14724:	strb	r3, [r2, #20]
   14728:	mov	r0, r4
   1472c:	mov	r1, r5
   14730:	mov	r2, #10
   14734:	mov	r3, #0
   14738:	bl	19620 <__assert_fail@plt+0x8058>
   1473c:	mov	r0, r4
   14740:	mov	r1, r5
   14744:	mov	r3, #0
   14748:	add	r2, r2, #48	; 0x30
   1474c:	strb	r2, [r6, #-1]!
   14750:	mov	r2, #10
   14754:	bl	19620 <__assert_fail@plt+0x8058>
   14758:	cmp	r5, #0
   1475c:	cmpeq	r4, #9
   14760:	mov	r5, r1
   14764:	mov	r4, r0
   14768:	bhi	14728 <__assert_fail@plt+0x3160>
   1476c:	mov	r0, r6
   14770:	pop	{r4, r5, r6, pc}
   14774:	push	{r4, r5, r6, lr}
   14778:	subs	r4, r0, #0
   1477c:	beq	147f0 <__assert_fail@plt+0x3228>
   14780:	mov	r1, #47	; 0x2f
   14784:	bl	11514 <strrchr@plt>
   14788:	subs	r5, r0, #0
   1478c:	beq	147dc <__assert_fail@plt+0x3214>
   14790:	add	r6, r5, #1
   14794:	sub	r3, r6, r4
   14798:	cmp	r3, #6
   1479c:	ble	147dc <__assert_fail@plt+0x3214>
   147a0:	mov	r2, #7
   147a4:	ldr	r1, [pc, #96]	; 1480c <__assert_fail@plt+0x3244>
   147a8:	sub	r0, r5, #6
   147ac:	bl	11598 <strncmp@plt>
   147b0:	cmp	r0, #0
   147b4:	bne	147dc <__assert_fail@plt+0x3214>
   147b8:	mov	r2, #3
   147bc:	ldr	r1, [pc, #76]	; 14810 <__assert_fail@plt+0x3248>
   147c0:	mov	r0, r6
   147c4:	bl	11598 <strncmp@plt>
   147c8:	cmp	r0, #0
   147cc:	movne	r4, r6
   147d0:	ldreq	r3, [pc, #60]	; 14814 <__assert_fail@plt+0x324c>
   147d4:	addeq	r4, r5, #4
   147d8:	streq	r4, [r3]
   147dc:	ldr	r2, [pc, #52]	; 14818 <__assert_fail@plt+0x3250>
   147e0:	ldr	r3, [pc, #52]	; 1481c <__assert_fail@plt+0x3254>
   147e4:	str	r4, [r2]
   147e8:	str	r4, [r3]
   147ec:	pop	{r4, r5, r6, pc}
   147f0:	ldr	r3, [pc, #40]	; 14820 <__assert_fail@plt+0x3258>
   147f4:	mov	r2, #55	; 0x37
   147f8:	mov	r1, #1
   147fc:	ldr	r3, [r3]
   14800:	ldr	r0, [pc, #28]	; 14824 <__assert_fail@plt+0x325c>
   14804:	bl	11340 <fwrite@plt>
   14808:	bl	115b0 <abort@plt>
   1480c:	andeq	sl, r1, r0, lsr #24
   14810:	andeq	sl, r1, r8, lsr #24
   14814:			; <UNDEFINED> instruction: 0x0002c1b0
   14818:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1481c:			; <UNDEFINED> instruction: 0x0002c1b4
   14820:	andeq	ip, r2, r0, asr #3
   14824:	andeq	sl, r1, r8, ror #23
   14828:	push	{r4, lr}
   1482c:	mov	r2, #48	; 0x30
   14830:	mov	r4, r1
   14834:	mov	r1, #0
   14838:	bl	11484 <memset@plt>
   1483c:	cmp	r4, #10
   14840:	beq	1484c <__assert_fail@plt+0x3284>
   14844:	str	r4, [r0]
   14848:	pop	{r4, pc}
   1484c:	bl	115b0 <abort@plt>
   14850:	push	{r4, r5, r6, lr}
   14854:	mov	r2, #5
   14858:	mov	r5, r0
   1485c:	mov	r6, r1
   14860:	mov	r1, r0
   14864:	mov	r0, #0
   14868:	bl	112d4 <dcgettext@plt>
   1486c:	cmp	r5, r0
   14870:	mov	r4, r0
   14874:	beq	14880 <__assert_fail@plt+0x32b8>
   14878:	mov	r0, r4
   1487c:	pop	{r4, r5, r6, pc}
   14880:	bl	18f40 <__assert_fail@plt+0x7978>
   14884:	ldrb	r3, [r0]
   14888:	bic	r3, r3, #32
   1488c:	cmp	r3, #85	; 0x55
   14890:	bne	148f0 <__assert_fail@plt+0x3328>
   14894:	ldrb	r3, [r0, #1]
   14898:	bic	r3, r3, #32
   1489c:	cmp	r3, #84	; 0x54
   148a0:	bne	14968 <__assert_fail@plt+0x33a0>
   148a4:	ldrb	r3, [r0, #2]
   148a8:	bic	r3, r3, #32
   148ac:	cmp	r3, #70	; 0x46
   148b0:	bne	14968 <__assert_fail@plt+0x33a0>
   148b4:	ldrb	r3, [r0, #3]
   148b8:	cmp	r3, #45	; 0x2d
   148bc:	bne	14968 <__assert_fail@plt+0x33a0>
   148c0:	ldrb	r3, [r0, #4]
   148c4:	cmp	r3, #56	; 0x38
   148c8:	bne	14968 <__assert_fail@plt+0x33a0>
   148cc:	ldrb	r3, [r0, #5]
   148d0:	cmp	r3, #0
   148d4:	bne	14968 <__assert_fail@plt+0x33a0>
   148d8:	ldrb	r2, [r4]
   148dc:	ldr	r3, [pc, #156]	; 14980 <__assert_fail@plt+0x33b8>
   148e0:	ldr	r4, [pc, #156]	; 14984 <__assert_fail@plt+0x33bc>
   148e4:	cmp	r2, #96	; 0x60
   148e8:	movne	r4, r3
   148ec:	b	14878 <__assert_fail@plt+0x32b0>
   148f0:	cmp	r3, #71	; 0x47
   148f4:	bne	14968 <__assert_fail@plt+0x33a0>
   148f8:	ldrb	r3, [r0, #1]
   148fc:	bic	r3, r3, #32
   14900:	cmp	r3, #66	; 0x42
   14904:	bne	14968 <__assert_fail@plt+0x33a0>
   14908:	ldrb	r3, [r0, #2]
   1490c:	cmp	r3, #49	; 0x31
   14910:	bne	14968 <__assert_fail@plt+0x33a0>
   14914:	ldrb	r3, [r0, #3]
   14918:	cmp	r3, #56	; 0x38
   1491c:	bne	14968 <__assert_fail@plt+0x33a0>
   14920:	ldrb	r3, [r0, #4]
   14924:	cmp	r3, #48	; 0x30
   14928:	bne	14968 <__assert_fail@plt+0x33a0>
   1492c:	ldrb	r3, [r0, #5]
   14930:	cmp	r3, #51	; 0x33
   14934:	bne	14968 <__assert_fail@plt+0x33a0>
   14938:	ldrb	r3, [r0, #6]
   1493c:	cmp	r3, #48	; 0x30
   14940:	bne	14968 <__assert_fail@plt+0x33a0>
   14944:	ldrb	r3, [r0, #7]
   14948:	cmp	r3, #0
   1494c:	bne	14968 <__assert_fail@plt+0x33a0>
   14950:	ldrb	r2, [r4]
   14954:	ldr	r3, [pc, #44]	; 14988 <__assert_fail@plt+0x33c0>
   14958:	ldr	r4, [pc, #44]	; 1498c <__assert_fail@plt+0x33c4>
   1495c:	cmp	r2, #96	; 0x60
   14960:	movne	r4, r3
   14964:	b	14878 <__assert_fail@plt+0x32b0>
   14968:	ldr	r3, [pc, #32]	; 14990 <__assert_fail@plt+0x33c8>
   1496c:	ldr	r4, [pc, #32]	; 14994 <__assert_fail@plt+0x33cc>
   14970:	cmp	r6, #9
   14974:	movne	r4, r3
   14978:	mov	r0, r4
   1497c:	pop	{r4, r5, r6, pc}
   14980:	andeq	sl, r1, r4, lsl #25
   14984:	muleq	r1, r0, ip
   14988:	andeq	sl, r1, r8, lsl #25
   1498c:	andeq	sl, r1, ip, lsl #25
   14990:	muleq	r1, r4, ip
   14994:	andeq	sl, r1, r0, lsl #25
   14998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	sub	sp, sp, #124	; 0x7c
   149a0:	ldr	ip, [pc, #3576]	; 157a0 <__assert_fail@plt+0x41d8>
   149a4:	str	r3, [sp, #24]
   149a8:	ldr	r3, [sp, #168]	; 0xa8
   149ac:	ldr	ip, [ip]
   149b0:	str	r3, [sp, #56]	; 0x38
   149b4:	ldr	r3, [sp, #172]	; 0xac
   149b8:	ldr	r8, [sp, #160]	; 0xa0
   149bc:	str	r3, [sp, #80]	; 0x50
   149c0:	ldr	r3, [sp, #176]	; 0xb0
   149c4:	mov	fp, r0
   149c8:	str	r3, [sp, #76]	; 0x4c
   149cc:	mov	sl, r1
   149d0:	str	r2, [sp, #36]	; 0x24
   149d4:	str	ip, [sp, #116]	; 0x74
   149d8:	bl	11364 <__ctype_get_mb_cur_max@plt>
   149dc:	ldr	r3, [sp, #164]	; 0xa4
   149e0:	ands	r4, r3, #2
   149e4:	movne	r3, #1
   149e8:	moveq	r3, #0
   149ec:	str	r3, [sp, #32]
   149f0:	str	r0, [sp, #64]	; 0x40
   149f4:	cmp	r8, #10
   149f8:	ldrls	pc, [pc, r8, lsl #2]
   149fc:	b	161ac <__assert_fail@plt+0x4be4>
   14a00:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a04:	andeq	r4, r1, ip, lsl #29
   14a08:	andeq	r5, r1, ip, lsl #9
   14a0c:	andeq	r4, r1, ip, lsr #29
   14a10:	andeq	r4, r1, r0, ror #26
   14a14:	andeq	r4, r1, r8, lsr #27
   14a18:	andeq	r4, r1, r4, lsr #28
   14a1c:	andeq	r4, r1, ip, asr lr
   14a20:	andeq	r4, r1, ip, lsr #20
   14a24:	andeq	r4, r1, ip, lsr #20
   14a28:	andeq	r4, r1, ip, lsr #20
   14a2c:	cmp	r8, #10
   14a30:	beq	14a54 <__assert_fail@plt+0x348c>
   14a34:	mov	r1, r8
   14a38:	ldr	r0, [pc, #3428]	; 157a4 <__assert_fail@plt+0x41dc>
   14a3c:	bl	14850 <__assert_fail@plt+0x3288>
   14a40:	mov	r1, r8
   14a44:	str	r0, [sp, #80]	; 0x50
   14a48:	ldr	r0, [pc, #3420]	; 157ac <__assert_fail@plt+0x41e4>
   14a4c:	bl	14850 <__assert_fail@plt+0x3288>
   14a50:	str	r0, [sp, #76]	; 0x4c
   14a54:	cmp	r4, #0
   14a58:	movne	r4, #0
   14a5c:	beq	15e6c <__assert_fail@plt+0x48a4>
   14a60:	ldr	r7, [sp, #76]	; 0x4c
   14a64:	mov	r5, #0
   14a68:	mov	r6, #1
   14a6c:	mov	r0, r7
   14a70:	str	r6, [sp, #40]	; 0x28
   14a74:	str	r5, [sp, #68]	; 0x44
   14a78:	bl	11424 <strlen@plt>
   14a7c:	str	r6, [sp, #28]
   14a80:	str	r5, [sp, #44]	; 0x2c
   14a84:	str	r5, [sp, #72]	; 0x48
   14a88:	str	r7, [sp, #60]	; 0x3c
   14a8c:	str	r0, [sp, #52]	; 0x34
   14a90:	str	r8, [sp, #160]	; 0xa0
   14a94:	mov	r8, fp
   14a98:	ldr	fp, [sp, #160]	; 0xa0
   14a9c:	mov	r9, #0
   14aa0:	ldr	r3, [sp, #24]
   14aa4:	cmn	r3, #1
   14aa8:	beq	15010 <__assert_fail@plt+0x3a48>
   14aac:	ldr	r3, [sp, #24]
   14ab0:	subs	r6, r3, r9
   14ab4:	movne	r6, #1
   14ab8:	cmp	r6, #0
   14abc:	beq	15028 <__assert_fail@plt+0x3a60>
   14ac0:	ldr	r7, [sp, #28]
   14ac4:	ldr	r0, [sp, #36]	; 0x24
   14ac8:	cmp	fp, #2
   14acc:	moveq	r7, #0
   14ad0:	andne	r7, r7, #1
   14ad4:	add	r3, r0, r9
   14ad8:	cmp	r7, #0
   14adc:	str	r3, [sp, #48]	; 0x30
   14ae0:	beq	154cc <__assert_fail@plt+0x3f04>
   14ae4:	ldr	r2, [sp, #52]	; 0x34
   14ae8:	cmp	r2, #0
   14aec:	beq	157b0 <__assert_fail@plt+0x41e8>
   14af0:	ldr	r1, [sp, #24]
   14af4:	cmp	r2, #1
   14af8:	mov	r3, r2
   14afc:	movls	r3, #0
   14b00:	movhi	r3, #1
   14b04:	cmn	r1, #1
   14b08:	movne	r3, #0
   14b0c:	cmp	r3, #0
   14b10:	add	r5, r9, r2
   14b14:	beq	14b20 <__assert_fail@plt+0x3558>
   14b18:	bl	11424 <strlen@plt>
   14b1c:	str	r0, [sp, #24]
   14b20:	ldr	r3, [sp, #24]
   14b24:	cmp	r5, r3
   14b28:	bhi	157b0 <__assert_fail@plt+0x41e8>
   14b2c:	ldr	r2, [sp, #52]	; 0x34
   14b30:	ldr	r1, [sp, #60]	; 0x3c
   14b34:	ldr	r0, [sp, #48]	; 0x30
   14b38:	bl	112c8 <memcmp@plt>
   14b3c:	cmp	r0, #0
   14b40:	bne	157b0 <__assert_fail@plt+0x41e8>
   14b44:	ldr	r3, [sp, #32]
   14b48:	cmp	r3, #0
   14b4c:	bne	1606c <__assert_fail@plt+0x4aa4>
   14b50:	ldr	r3, [sp, #48]	; 0x30
   14b54:	ldrb	r5, [r3]
   14b58:	cmp	r5, #126	; 0x7e
   14b5c:	ldrls	pc, [pc, r5, lsl #2]
   14b60:	b	15430 <__assert_fail@plt+0x3e68>
   14b64:	andeq	r5, r1, ip, lsl r3
   14b68:	andeq	r5, r1, r0, lsr r4
   14b6c:	andeq	r5, r1, r0, lsr r4
   14b70:	andeq	r5, r1, r0, lsr r4
   14b74:	andeq	r5, r1, r0, lsr r4
   14b78:	andeq	r5, r1, r0, lsr r4
   14b7c:	andeq	r5, r1, r0, lsr r4
   14b80:	andeq	r5, r1, r8, ror #7
   14b84:	ldrdeq	r5, [r1], -r8
   14b88:	ldrdeq	r5, [r1], -r8
   14b8c:	andeq	r5, r1, r0, lsr #5
   14b90:	strdeq	r5, [r1], -r8
   14b94:	andeq	r5, r1, r0, ror #5
   14b98:	andeq	r5, r1, r0, lsl r2
   14b9c:	andeq	r5, r1, r0, lsr r4
   14ba0:	andeq	r5, r1, r0, lsr r4
   14ba4:	andeq	r5, r1, r0, lsr r4
   14ba8:	andeq	r5, r1, r0, lsr r4
   14bac:	andeq	r5, r1, r0, lsr r4
   14bb0:	andeq	r5, r1, r0, lsr r4
   14bb4:	andeq	r5, r1, r0, lsr r4
   14bb8:	andeq	r5, r1, r0, lsr r4
   14bbc:	andeq	r5, r1, r0, lsr r4
   14bc0:	andeq	r5, r1, r0, lsr r4
   14bc4:	andeq	r5, r1, r0, lsr r4
   14bc8:	andeq	r5, r1, r0, lsr r4
   14bcc:	andeq	r5, r1, r0, lsr r4
   14bd0:	andeq	r5, r1, r0, lsr r4
   14bd4:	andeq	r5, r1, r0, lsr r4
   14bd8:	andeq	r5, r1, r0, lsr r4
   14bdc:	andeq	r5, r1, r0, lsr r4
   14be0:	andeq	r5, r1, r0, lsr r4
   14be4:	strdeq	r5, [r1], -r0
   14be8:	andeq	r5, r1, r4, lsl #6
   14bec:	andeq	r5, r1, r4, lsl #6
   14bf0:	andeq	r5, r1, r8, lsl #8
   14bf4:	andeq	r5, r1, r4, lsl #6
   14bf8:	andeq	r5, r1, r4, lsr #8
   14bfc:	andeq	r5, r1, r4, lsl #6
   14c00:	andeq	r5, r1, r4, asr #2
   14c04:	andeq	r5, r1, r4, lsl #6
   14c08:	andeq	r5, r1, r4, lsl #6
   14c0c:	andeq	r5, r1, r4, lsl #6
   14c10:	andeq	r5, r1, r4, lsr #8
   14c14:	andeq	r5, r1, r4, lsr #8
   14c18:	andeq	r5, r1, r4, lsr #8
   14c1c:	andeq	r5, r1, r4, lsr #8
   14c20:	andeq	r5, r1, r4, lsr #8
   14c24:	andeq	r5, r1, r4, lsr #8
   14c28:	andeq	r5, r1, r4, lsr #8
   14c2c:	andeq	r5, r1, r4, lsr #8
   14c30:	andeq	r5, r1, r4, lsr #8
   14c34:	andeq	r5, r1, r4, lsr #8
   14c38:	andeq	r5, r1, r4, lsr #8
   14c3c:	andeq	r5, r1, r4, lsr #8
   14c40:	andeq	r5, r1, r4, lsr #8
   14c44:	andeq	r5, r1, r4, lsr #8
   14c48:	andeq	r5, r1, r4, lsr #8
   14c4c:	andeq	r5, r1, r4, lsr #8
   14c50:	andeq	r5, r1, r4, lsl #6
   14c54:	andeq	r5, r1, r4, lsl #6
   14c58:	andeq	r5, r1, r4, lsl #6
   14c5c:	andeq	r5, r1, r4, lsl #6
   14c60:	andeq	r5, r1, r8, lsl r1
   14c64:	andeq	r5, r1, r0, lsr r4
   14c68:	andeq	r5, r1, r4, lsr #8
   14c6c:	andeq	r5, r1, r4, lsr #8
   14c70:	andeq	r5, r1, r4, lsr #8
   14c74:	andeq	r5, r1, r4, lsr #8
   14c78:	andeq	r5, r1, r4, lsr #8
   14c7c:	andeq	r5, r1, r4, lsr #8
   14c80:	andeq	r5, r1, r4, lsr #8
   14c84:	andeq	r5, r1, r4, lsr #8
   14c88:	andeq	r5, r1, r4, lsr #8
   14c8c:	andeq	r5, r1, r4, lsr #8
   14c90:	andeq	r5, r1, r4, lsr #8
   14c94:	andeq	r5, r1, r4, lsr #8
   14c98:	andeq	r5, r1, r4, lsr #8
   14c9c:	andeq	r5, r1, r4, lsr #8
   14ca0:	andeq	r5, r1, r4, lsr #8
   14ca4:	andeq	r5, r1, r4, lsr #8
   14ca8:	andeq	r5, r1, r4, lsr #8
   14cac:	andeq	r5, r1, r4, lsr #8
   14cb0:	andeq	r5, r1, r4, lsr #8
   14cb4:	andeq	r5, r1, r4, lsr #8
   14cb8:	andeq	r5, r1, r4, lsr #8
   14cbc:	andeq	r5, r1, r4, lsr #8
   14cc0:	andeq	r5, r1, r4, lsr #8
   14cc4:	andeq	r5, r1, r4, lsr #8
   14cc8:	andeq	r5, r1, r4, lsr #8
   14ccc:	andeq	r5, r1, r4, lsr #8
   14cd0:	andeq	r5, r1, r4, lsl #6
   14cd4:	ldrdeq	r5, [r1], -r0
   14cd8:	andeq	r5, r1, r4, lsr #8
   14cdc:	andeq	r5, r1, r4, lsl #6
   14ce0:	andeq	r5, r1, r4, lsr #8
   14ce4:	andeq	r5, r1, r4, lsl #6
   14ce8:	andeq	r5, r1, r4, lsr #8
   14cec:	andeq	r5, r1, r4, lsr #8
   14cf0:	andeq	r5, r1, r4, lsr #8
   14cf4:	andeq	r5, r1, r4, lsr #8
   14cf8:	andeq	r5, r1, r4, lsr #8
   14cfc:	andeq	r5, r1, r4, lsr #8
   14d00:	andeq	r5, r1, r4, lsr #8
   14d04:	andeq	r5, r1, r4, lsr #8
   14d08:	andeq	r5, r1, r4, lsr #8
   14d0c:	andeq	r5, r1, r4, lsr #8
   14d10:	andeq	r5, r1, r4, lsr #8
   14d14:	andeq	r5, r1, r4, lsr #8
   14d18:	andeq	r5, r1, r4, lsr #8
   14d1c:	andeq	r5, r1, r4, lsr #8
   14d20:	andeq	r5, r1, r4, lsr #8
   14d24:	andeq	r5, r1, r4, lsr #8
   14d28:	andeq	r5, r1, r4, lsr #8
   14d2c:	andeq	r5, r1, r4, lsr #8
   14d30:	andeq	r5, r1, r4, lsr #8
   14d34:	andeq	r5, r1, r4, lsr #8
   14d38:	andeq	r5, r1, r4, lsr #8
   14d3c:	andeq	r5, r1, r4, lsr #8
   14d40:	andeq	r5, r1, r4, lsr #8
   14d44:	andeq	r5, r1, r4, lsr #8
   14d48:	andeq	r5, r1, r4, lsr #8
   14d4c:	andeq	r5, r1, r4, lsr #8
   14d50:	andeq	r4, r1, r8, ror #29
   14d54:	andeq	r5, r1, r4, lsl #6
   14d58:	andeq	r4, r1, r8, ror #29
   14d5c:	andeq	r5, r1, r8, lsl #8
   14d60:	cmp	r4, #0
   14d64:	moveq	r3, #1
   14d68:	streq	r3, [sp, #28]
   14d6c:	beq	15498 <__assert_fail@plt+0x3ed0>
   14d70:	mov	r3, #0
   14d74:	mov	r4, r3
   14d78:	mov	r2, #1
   14d7c:	str	r2, [sp, #40]	; 0x28
   14d80:	str	r3, [sp, #68]	; 0x44
   14d84:	str	r2, [sp, #32]
   14d88:	str	r2, [sp, #52]	; 0x34
   14d8c:	ldr	r3, [pc, #2584]	; 157ac <__assert_fail@plt+0x41e4>
   14d90:	str	r4, [sp, #44]	; 0x2c
   14d94:	str	r4, [sp, #72]	; 0x48
   14d98:	str	r4, [sp, #28]
   14d9c:	str	r3, [sp, #60]	; 0x3c
   14da0:	mov	r8, #2
   14da4:	b	14a90 <__assert_fail@plt+0x34c8>
   14da8:	cmp	r4, #0
   14dac:	bne	16038 <__assert_fail@plt+0x4a70>
   14db0:	cmp	sl, #0
   14db4:	beq	15df8 <__assert_fail@plt+0x4830>
   14db8:	mov	r3, #34	; 0x22
   14dbc:	strb	r3, [fp]
   14dc0:	ldr	r3, [pc, #2528]	; 157a8 <__assert_fail@plt+0x41e0>
   14dc4:	mov	r1, r4
   14dc8:	mov	r2, #1
   14dcc:	str	r4, [sp, #68]	; 0x44
   14dd0:	str	r2, [sp, #40]	; 0x28
   14dd4:	mov	r4, r2
   14dd8:	str	r1, [sp, #44]	; 0x2c
   14ddc:	str	r1, [sp, #72]	; 0x48
   14de0:	str	r1, [sp, #32]
   14de4:	str	r2, [sp, #28]
   14de8:	str	r2, [sp, #52]	; 0x34
   14dec:	str	r3, [sp, #60]	; 0x3c
   14df0:	b	14a90 <__assert_fail@plt+0x34c8>
   14df4:	mov	r3, #0
   14df8:	str	r3, [sp, #68]	; 0x44
   14dfc:	str	r3, [sp, #44]	; 0x2c
   14e00:	str	r3, [sp, #32]
   14e04:	str	r3, [sp, #28]
   14e08:	str	r3, [sp, #60]	; 0x3c
   14e0c:	mov	r3, #1
   14e10:	str	r8, [sp, #72]	; 0x48
   14e14:	str	r8, [sp, #52]	; 0x34
   14e18:	mov	r4, r8
   14e1c:	str	r3, [sp, #40]	; 0x28
   14e20:	b	14a90 <__assert_fail@plt+0x34c8>
   14e24:	mov	r3, #1
   14e28:	str	r3, [sp, #40]	; 0x28
   14e2c:	str	r3, [sp, #32]
   14e30:	str	r3, [sp, #28]
   14e34:	str	r3, [sp, #52]	; 0x34
   14e38:	ldr	r3, [pc, #2408]	; 157a8 <__assert_fail@plt+0x41e0>
   14e3c:	mov	r2, #0
   14e40:	mov	r4, r2
   14e44:	str	r2, [sp, #68]	; 0x44
   14e48:	str	r2, [sp, #44]	; 0x2c
   14e4c:	str	r2, [sp, #72]	; 0x48
   14e50:	str	r3, [sp, #60]	; 0x3c
   14e54:	mov	r8, #5
   14e58:	b	14a90 <__assert_fail@plt+0x34c8>
   14e5c:	mov	r3, #0
   14e60:	mov	r2, #1
   14e64:	str	r2, [sp, #40]	; 0x28
   14e68:	mov	r4, r3
   14e6c:	str	r3, [sp, #68]	; 0x44
   14e70:	str	r2, [sp, #28]
   14e74:	str	r3, [sp, #44]	; 0x2c
   14e78:	str	r3, [sp, #72]	; 0x48
   14e7c:	str	r3, [sp, #32]
   14e80:	str	r3, [sp, #52]	; 0x34
   14e84:	str	r3, [sp, #60]	; 0x3c
   14e88:	b	14a90 <__assert_fail@plt+0x34c8>
   14e8c:	mov	r2, #1
   14e90:	mov	r3, #0
   14e94:	str	r2, [sp, #40]	; 0x28
   14e98:	mov	r4, r3
   14e9c:	str	r3, [sp, #68]	; 0x44
   14ea0:	str	r8, [sp, #52]	; 0x34
   14ea4:	str	r2, [sp, #32]
   14ea8:	b	14d8c <__assert_fail@plt+0x37c4>
   14eac:	mov	r3, #1
   14eb0:	str	r3, [sp, #40]	; 0x28
   14eb4:	str	r3, [sp, #32]
   14eb8:	str	r3, [sp, #28]
   14ebc:	str	r3, [sp, #52]	; 0x34
   14ec0:	ldr	r3, [pc, #2276]	; 157ac <__assert_fail@plt+0x41e4>
   14ec4:	mov	r2, #0
   14ec8:	mov	r4, r2
   14ecc:	str	r2, [sp, #68]	; 0x44
   14ed0:	str	r2, [sp, #44]	; 0x2c
   14ed4:	str	r2, [sp, #72]	; 0x48
   14ed8:	str	r3, [sp, #60]	; 0x3c
   14edc:	mov	r8, #2
   14ee0:	b	14a90 <__assert_fail@plt+0x34c8>
   14ee4:	mov	r7, #0
   14ee8:	ldr	r3, [sp, #24]
   14eec:	cmn	r3, #1
   14ef0:	beq	15a2c <__assert_fail@plt+0x4464>
   14ef4:	ldr	r3, [sp, #24]
   14ef8:	subs	r3, r3, #1
   14efc:	movne	r3, #1
   14f00:	cmp	r3, #0
   14f04:	sub	r2, fp, #2
   14f08:	clz	r2, r2
   14f0c:	lsr	r2, r2, #5
   14f10:	bne	1510c <__assert_fail@plt+0x3b44>
   14f14:	cmp	r9, #0
   14f18:	bne	1510c <__assert_fail@plt+0x3b44>
   14f1c:	ldr	r3, [sp, #32]
   14f20:	tst	r3, r2
   14f24:	bne	1522c <__assert_fail@plt+0x3c64>
   14f28:	ldr	r3, [sp, #28]
   14f2c:	eor	r3, r3, #1
   14f30:	orr	r3, r2, r3
   14f34:	ldr	r2, [sp, #32]
   14f38:	eor	r3, r3, #1
   14f3c:	orrs	r3, r2, r3
   14f40:	beq	14f70 <__assert_fail@plt+0x39a8>
   14f44:	mov	r3, #0
   14f48:	ldr	r1, [sp, #56]	; 0x38
   14f4c:	cmp	r1, #0
   14f50:	beq	14f70 <__assert_fail@plt+0x39a8>
   14f54:	lsr	r2, r5, #5
   14f58:	and	r0, r5, #31
   14f5c:	uxtb	r2, r2
   14f60:	ldr	r1, [r1, r2, lsl #2]
   14f64:	lsr	r2, r1, r0
   14f68:	tst	r2, #1
   14f6c:	bne	14f78 <__assert_fail@plt+0x39b0>
   14f70:	cmp	r7, #0
   14f74:	beq	151c8 <__assert_fail@plt+0x3c00>
   14f78:	sub	r2, fp, #2
   14f7c:	clz	r2, r2
   14f80:	lsr	r2, r2, #5
   14f84:	ldr	r3, [sp, #32]
   14f88:	cmp	r3, #0
   14f8c:	bne	152b8 <__assert_fail@plt+0x3cf0>
   14f90:	ldr	r3, [sp, #44]	; 0x2c
   14f94:	eor	r3, r3, #1
   14f98:	ands	r3, r2, r3
   14f9c:	beq	14fd4 <__assert_fail@plt+0x3a0c>
   14fa0:	cmp	sl, r4
   14fa4:	movhi	r2, #39	; 0x27
   14fa8:	strbhi	r2, [r8, r4]
   14fac:	add	r2, r4, #1
   14fb0:	cmp	r2, sl
   14fb4:	movcc	r1, #36	; 0x24
   14fb8:	strbcc	r1, [r8, r2]
   14fbc:	add	r2, r4, #2
   14fc0:	cmp	r2, sl
   14fc4:	add	r4, r4, #3
   14fc8:	movcc	r1, #39	; 0x27
   14fcc:	strbcc	r1, [r8, r2]
   14fd0:	str	r3, [sp, #44]	; 0x2c
   14fd4:	cmp	r4, sl
   14fd8:	movcc	r3, #92	; 0x5c
   14fdc:	strbcc	r3, [r8, r4]
   14fe0:	add	r9, r9, #1
   14fe4:	add	r4, r4, #1
   14fe8:	cmp	r4, sl
   14fec:	ldr	r3, [sp, #40]	; 0x28
   14ff0:	strbcc	r5, [r8, r4]
   14ff4:	cmp	r6, #0
   14ff8:	moveq	r3, #0
   14ffc:	str	r3, [sp, #40]	; 0x28
   15000:	ldr	r3, [sp, #24]
   15004:	add	r4, r4, #1
   15008:	cmn	r3, #1
   1500c:	bne	14aac <__assert_fail@plt+0x34e4>
   15010:	ldr	r3, [sp, #36]	; 0x24
   15014:	ldrb	r6, [r3, r9]
   15018:	adds	r6, r6, #0
   1501c:	movne	r6, #1
   15020:	cmp	r6, #0
   15024:	bne	14ac0 <__assert_fail@plt+0x34f8>
   15028:	str	fp, [sp, #160]	; 0xa0
   1502c:	mov	fp, r8
   15030:	ldr	r8, [sp, #160]	; 0xa0
   15034:	ldr	r1, [sp, #32]
   15038:	cmp	r4, #0
   1503c:	sub	r2, r8, #2
   15040:	clz	r2, r2
   15044:	lsr	r2, r2, #5
   15048:	andeq	r3, r2, r1
   1504c:	movne	r3, #0
   15050:	cmp	r3, #0
   15054:	bne	16140 <__assert_fail@plt+0x4b78>
   15058:	eor	r3, r1, #1
   1505c:	ands	r2, r2, r3
   15060:	beq	1607c <__assert_fail@plt+0x4ab4>
   15064:	ldr	r3, [sp, #68]	; 0x44
   15068:	cmp	r3, #0
   1506c:	beq	16080 <__assert_fail@plt+0x4ab8>
   15070:	ldr	r3, [sp, #40]	; 0x28
   15074:	cmp	r3, #0
   15078:	bne	160fc <__assert_fail@plt+0x4b34>
   1507c:	ldr	r3, [sp, #72]	; 0x48
   15080:	adds	r3, r3, #0
   15084:	movne	r3, #1
   15088:	cmp	sl, #0
   1508c:	movne	r3, #0
   15090:	cmp	r3, #0
   15094:	ldreq	r2, [sp, #68]	; 0x44
   15098:	beq	16080 <__assert_fail@plt+0x4ab8>
   1509c:	ldr	sl, [sp, #72]	; 0x48
   150a0:	str	r3, [sp, #68]	; 0x44
   150a4:	ldr	r3, [pc, #1792]	; 157ac <__assert_fail@plt+0x41e4>
   150a8:	mov	r2, #39	; 0x27
   150ac:	mov	r4, #1
   150b0:	str	r3, [sp, #60]	; 0x3c
   150b4:	mov	r3, #0
   150b8:	strb	r2, [fp]
   150bc:	str	r4, [sp, #52]	; 0x34
   150c0:	mov	r8, #2
   150c4:	str	r3, [sp, #32]
   150c8:	b	14a90 <__assert_fail@plt+0x34c8>
   150cc:	mov	r7, #0
   150d0:	cmp	fp, #2
   150d4:	beq	15a0c <__assert_fail@plt+0x4444>
   150d8:	ldr	r3, [sp, #52]	; 0x34
   150dc:	ldr	r2, [sp, #28]
   150e0:	ldr	r1, [sp, #32]
   150e4:	cmp	r3, #0
   150e8:	andne	r2, r2, r1
   150ec:	moveq	r2, #0
   150f0:	cmp	r2, #0
   150f4:	moveq	r5, #92	; 0x5c
   150f8:	moveq	r3, r5
   150fc:	bne	15a18 <__assert_fail@plt+0x4450>
   15100:	ldr	r1, [sp, #28]
   15104:	cmp	r1, #0
   15108:	bne	16188 <__assert_fail@plt+0x4bc0>
   1510c:	mov	r6, #0
   15110:	b	14f28 <__assert_fail@plt+0x3960>
   15114:	mov	r7, #0
   15118:	cmp	fp, #2
   1511c:	beq	15a7c <__assert_fail@plt+0x44b4>
   15120:	cmp	fp, #5
   15124:	beq	15a40 <__assert_fail@plt+0x4478>
   15128:	sub	r2, fp, #2
   1512c:	mov	r6, #0
   15130:	clz	r2, r2
   15134:	mov	r5, #63	; 0x3f
   15138:	lsr	r2, r2, #5
   1513c:	b	14f28 <__assert_fail@plt+0x3960>
   15140:	mov	r7, #0
   15144:	cmp	fp, #2
   15148:	strne	r6, [sp, #68]	; 0x44
   1514c:	movne	r2, #0
   15150:	movne	r5, #39	; 0x27
   15154:	bne	14f28 <__assert_fail@plt+0x3960>
   15158:	ldr	r3, [sp, #32]
   1515c:	cmp	r3, #0
   15160:	bne	15e5c <__assert_fail@plt+0x4894>
   15164:	cmp	sl, #0
   15168:	ldr	r3, [sp, #72]	; 0x48
   1516c:	clz	r3, r3
   15170:	lsr	r3, r3, #5
   15174:	moveq	r3, #0
   15178:	cmp	r3, #0
   1517c:	bne	15d90 <__assert_fail@plt+0x47c8>
   15180:	cmp	sl, r4
   15184:	movhi	r3, #39	; 0x27
   15188:	strbhi	r3, [r8, r4]
   1518c:	add	r3, r4, #1
   15190:	cmp	sl, r3
   15194:	movhi	r2, #92	; 0x5c
   15198:	strbhi	r2, [r8, r3]
   1519c:	add	r3, r4, #2
   151a0:	cmp	sl, r3
   151a4:	movhi	r2, #39	; 0x27
   151a8:	strbhi	r2, [r8, r3]
   151ac:	mov	r3, #0
   151b0:	cmp	r7, #0
   151b4:	add	r4, r4, #3
   151b8:	str	r3, [sp, #44]	; 0x2c
   151bc:	str	r6, [sp, #68]	; 0x44
   151c0:	mov	r5, #39	; 0x27
   151c4:	bne	14f78 <__assert_fail@plt+0x39b0>
   151c8:	ldr	r2, [sp, #44]	; 0x2c
   151cc:	eor	r3, r3, #1
   151d0:	and	r3, r3, r2
   151d4:	add	r9, r9, #1
   151d8:	uxtb	r3, r3
   151dc:	cmp	r3, #0
   151e0:	beq	14fe8 <__assert_fail@plt+0x3a20>
   151e4:	cmp	sl, r4
   151e8:	movhi	r3, #39	; 0x27
   151ec:	strbhi	r3, [r8, r4]
   151f0:	add	r3, r4, #1
   151f4:	cmp	sl, r3
   151f8:	movhi	r2, #39	; 0x27
   151fc:	strbhi	r2, [r8, r3]
   15200:	mov	r3, #0
   15204:	add	r4, r4, #2
   15208:	str	r3, [sp, #44]	; 0x2c
   1520c:	b	14fe8 <__assert_fail@plt+0x3a20>
   15210:	mov	r3, #114	; 0x72
   15214:	ldr	r1, [sp, #32]
   15218:	sub	r2, fp, #2
   1521c:	clz	r2, r2
   15220:	lsr	r2, r2, #5
   15224:	tst	r2, r1
   15228:	beq	15100 <__assert_fail@plt+0x3b38>
   1522c:	mov	fp, r8
   15230:	mov	r8, #2
   15234:	ldr	r3, [sp, #28]
   15238:	cmp	r3, #0
   1523c:	movne	r8, #4
   15240:	ldr	r3, [sp, #164]	; 0xa4
   15244:	mov	ip, #0
   15248:	bic	r3, r3, #2
   1524c:	str	r3, [sp, #4]
   15250:	ldr	r3, [sp, #76]	; 0x4c
   15254:	str	r8, [sp]
   15258:	str	r3, [sp, #16]
   1525c:	ldr	r3, [sp, #80]	; 0x50
   15260:	ldr	r2, [sp, #36]	; 0x24
   15264:	str	r3, [sp, #12]
   15268:	mov	r1, sl
   1526c:	ldr	r3, [sp, #24]
   15270:	mov	r0, fp
   15274:	str	ip, [sp, #8]
   15278:	bl	14998 <__assert_fail@plt+0x33d0>
   1527c:	mov	r4, r0
   15280:	ldr	r3, [pc, #1304]	; 157a0 <__assert_fail@plt+0x41d8>
   15284:	ldr	r2, [sp, #116]	; 0x74
   15288:	mov	r0, r4
   1528c:	ldr	r3, [r3]
   15290:	cmp	r2, r3
   15294:	bne	16184 <__assert_fail@plt+0x4bbc>
   15298:	add	sp, sp, #124	; 0x7c
   1529c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152a0:	mov	r5, #110	; 0x6e
   152a4:	ldr	r3, [sp, #32]
   152a8:	mov	r2, #0
   152ac:	cmp	r3, #0
   152b0:	mov	r6, r2
   152b4:	beq	14f90 <__assert_fail@plt+0x39c8>
   152b8:	str	fp, [sp, #160]	; 0xa0
   152bc:	mov	fp, r8
   152c0:	ldr	r8, [sp, #160]	; 0xa0
   152c4:	mov	r3, r2
   152c8:	ldr	r2, [sp, #28]
   152cc:	and	r2, r2, r3
   152d0:	str	r2, [sp, #28]
   152d4:	b	15234 <__assert_fail@plt+0x3c6c>
   152d8:	mov	r5, #116	; 0x74
   152dc:	b	152a4 <__assert_fail@plt+0x3cdc>
   152e0:	mov	r5, #102	; 0x66
   152e4:	ldr	r3, [sp, #32]
   152e8:	cmp	r3, #0
   152ec:	bne	15e98 <__assert_fail@plt+0x48d0>
   152f0:	mov	r6, #0
   152f4:	b	14fd4 <__assert_fail@plt+0x3a0c>
   152f8:	mov	r5, #118	; 0x76
   152fc:	b	152e4 <__assert_fail@plt+0x3d1c>
   15300:	mov	r7, #0
   15304:	mov	r6, #0
   15308:	b	14f44 <__assert_fail@plt+0x397c>
   1530c:	ldr	r3, [sp, #32]
   15310:	cmp	r3, #0
   15314:	bne	160dc <__assert_fail@plt+0x4b14>
   15318:	mov	r7, r3
   1531c:	ldr	r3, [sp, #44]	; 0x2c
   15320:	sub	r2, fp, #2
   15324:	eor	r3, r3, #1
   15328:	clz	r2, r2
   1532c:	lsr	r2, r2, #5
   15330:	ands	r3, r2, r3
   15334:	beq	15d7c <__assert_fail@plt+0x47b4>
   15338:	cmp	sl, r4
   1533c:	movhi	r1, #39	; 0x27
   15340:	strbhi	r1, [r8, r4]
   15344:	add	r1, r4, #1
   15348:	cmp	sl, r1
   1534c:	movhi	r0, #36	; 0x24
   15350:	strbhi	r0, [r8, r1]
   15354:	add	r1, r4, #2
   15358:	cmp	sl, r1
   1535c:	movhi	r0, #39	; 0x27
   15360:	strbhi	r0, [r8, r1]
   15364:	add	r1, r4, #3
   15368:	cmp	sl, r1
   1536c:	bls	15ddc <__assert_fail@plt+0x4814>
   15370:	mov	r4, r1
   15374:	mov	r1, #92	; 0x5c
   15378:	strb	r1, [r8, r4]
   1537c:	mov	r1, r4
   15380:	str	r3, [sp, #44]	; 0x2c
   15384:	cmp	fp, #2
   15388:	add	r4, r4, #1
   1538c:	beq	15e24 <__assert_fail@plt+0x485c>
   15390:	ldr	r0, [sp, #24]
   15394:	add	r3, r9, #1
   15398:	cmp	r3, r0
   1539c:	bcs	153b4 <__assert_fail@plt+0x3dec>
   153a0:	ldr	r0, [sp, #36]	; 0x24
   153a4:	ldrb	r3, [r0, r3]
   153a8:	sub	r3, r3, #48	; 0x30
   153ac:	cmp	r3, #9
   153b0:	bls	15e34 <__assert_fail@plt+0x486c>
   153b4:	mov	r5, #48	; 0x30
   153b8:	ldr	r3, [sp, #28]
   153bc:	eor	r3, r3, #1
   153c0:	orrs	r2, r2, r3
   153c4:	mov	r3, r6
   153c8:	moveq	r6, r2
   153cc:	beq	14f48 <__assert_fail@plt+0x3980>
   153d0:	mov	r6, #0
   153d4:	b	14f70 <__assert_fail@plt+0x39a8>
   153d8:	mov	r2, #0
   153dc:	mov	r6, r2
   153e0:	mov	r5, #98	; 0x62
   153e4:	b	14f90 <__assert_fail@plt+0x39c8>
   153e8:	mov	r5, #97	; 0x61
   153ec:	b	152f0 <__assert_fail@plt+0x3d28>
   153f0:	mov	r3, r7
   153f4:	mov	r6, r7
   153f8:	mov	r2, #0
   153fc:	mov	r7, r3
   15400:	mov	r5, #32
   15404:	b	14f28 <__assert_fail@plt+0x3960>
   15408:	cmp	r9, #0
   1540c:	mov	r3, r7
   15410:	bne	159d8 <__assert_fail@plt+0x4410>
   15414:	mov	r6, r7
   15418:	mov	r2, r9
   1541c:	mov	r7, r3
   15420:	b	14f28 <__assert_fail@plt+0x3960>
   15424:	mov	r6, r7
   15428:	b	14f44 <__assert_fail@plt+0x397c>
   1542c:	mov	r7, #0
   15430:	ldr	r3, [sp, #64]	; 0x40
   15434:	cmp	r3, #1
   15438:	bne	15a94 <__assert_fail@plt+0x44cc>
   1543c:	bl	11400 <__ctype_b_loc@plt>
   15440:	ldr	r2, [sp, #64]	; 0x40
   15444:	sxth	r3, r5
   15448:	mov	ip, r2
   1544c:	lsl	r3, r3, #1
   15450:	ldr	r2, [r0]
   15454:	ldrh	r3, [r2, r3]
   15458:	and	r3, r3, #16384	; 0x4000
   1545c:	cmp	r3, #0
   15460:	ldr	r3, [sp, #28]
   15464:	movne	r6, #1
   15468:	moveq	r6, #0
   1546c:	movne	r2, #0
   15470:	andeq	r2, r3, #1
   15474:	cmp	r2, #0
   15478:	bne	15da4 <__assert_fail@plt+0x47dc>
   1547c:	sub	r2, fp, #2
   15480:	clz	r2, r2
   15484:	lsr	r2, r2, #5
   15488:	b	14f28 <__assert_fail@plt+0x3960>
   1548c:	cmp	r4, #0
   15490:	bne	16150 <__assert_fail@plt+0x4b88>
   15494:	str	r4, [sp, #28]
   15498:	cmp	sl, #0
   1549c:	bne	16194 <__assert_fail@plt+0x4bcc>
   154a0:	ldr	r3, [pc, #772]	; 157ac <__assert_fail@plt+0x41e4>
   154a4:	mov	r4, #1
   154a8:	str	r4, [sp, #40]	; 0x28
   154ac:	str	r3, [sp, #60]	; 0x3c
   154b0:	str	r4, [sp, #52]	; 0x34
   154b4:	str	sl, [sp, #72]	; 0x48
   154b8:	str	sl, [sp, #68]	; 0x44
   154bc:	str	sl, [sp, #44]	; 0x2c
   154c0:	str	sl, [sp, #32]
   154c4:	mov	r8, #2
   154c8:	b	14a90 <__assert_fail@plt+0x34c8>
   154cc:	ldr	r3, [sp, #36]	; 0x24
   154d0:	ldrb	r5, [r3, r9]
   154d4:	cmp	r5, #126	; 0x7e
   154d8:	ldrls	pc, [pc, r5, lsl #2]
   154dc:	b	15430 <__assert_fail@plt+0x3e68>
   154e0:	andeq	r5, r1, r4, lsl r7
   154e4:	andeq	r5, r1, r0, lsr r4
   154e8:	andeq	r5, r1, r0, lsr r4
   154ec:	andeq	r5, r1, r0, lsr r4
   154f0:	andeq	r5, r1, r0, lsr r4
   154f4:	andeq	r5, r1, r0, lsr r4
   154f8:	andeq	r5, r1, r0, lsr r4
   154fc:	andeq	r5, r1, r0, lsl #14
   15500:	andeq	r5, r1, ip, ror #13
   15504:	andeq	r5, r1, r4, ror #13
   15508:	ldrdeq	r5, [r1], -ip
   1550c:	andeq	r5, r1, ip, lsl #15
   15510:	andeq	r5, r1, r8, ror r7
   15514:	andeq	r5, r1, r0, lsl r2
   15518:	andeq	r5, r1, r0, lsr r4
   1551c:	andeq	r5, r1, r0, lsr r4
   15520:	andeq	r5, r1, r0, lsr r4
   15524:	andeq	r5, r1, r0, lsr r4
   15528:	andeq	r5, r1, r0, lsr r4
   1552c:	andeq	r5, r1, r0, lsr r4
   15530:	andeq	r5, r1, r0, lsr r4
   15534:	andeq	r5, r1, r0, lsr r4
   15538:	andeq	r5, r1, r0, lsr r4
   1553c:	andeq	r5, r1, r0, lsr r4
   15540:	andeq	r5, r1, r0, lsr r4
   15544:	andeq	r5, r1, r0, lsr r4
   15548:	andeq	r5, r1, r0, lsr r4
   1554c:	andeq	r5, r1, r0, lsr r4
   15550:	andeq	r5, r1, r0, lsr r4
   15554:	andeq	r5, r1, r0, lsr r4
   15558:	andeq	r5, r1, r0, lsr r4
   1555c:	andeq	r5, r1, r0, lsr r4
   15560:	andeq	r5, r1, r8, ror #14
   15564:	andeq	r5, r1, r4, asr r7
   15568:	andeq	r5, r1, r4, asr r7
   1556c:	andeq	r5, r1, r4, asr #14
   15570:	andeq	r5, r1, r4, asr r7
   15574:	andeq	r5, r1, ip, ror r4
   15578:	andeq	r5, r1, r4, asr r7
   1557c:	andeq	r5, r1, r4, asr #2
   15580:	andeq	r5, r1, r4, asr r7
   15584:	andeq	r5, r1, r4, asr r7
   15588:	andeq	r5, r1, r4, asr r7
   1558c:	andeq	r5, r1, ip, ror r4
   15590:	andeq	r5, r1, ip, ror r4
   15594:	andeq	r5, r1, ip, ror r4
   15598:	andeq	r5, r1, ip, ror r4
   1559c:	andeq	r5, r1, ip, ror r4
   155a0:	andeq	r5, r1, ip, ror r4
   155a4:	andeq	r5, r1, ip, ror r4
   155a8:	andeq	r5, r1, ip, ror r4
   155ac:	andeq	r5, r1, ip, ror r4
   155b0:	andeq	r5, r1, ip, ror r4
   155b4:	andeq	r5, r1, ip, ror r4
   155b8:	andeq	r5, r1, ip, ror r4
   155bc:	andeq	r5, r1, ip, ror r4
   155c0:	andeq	r5, r1, ip, ror r4
   155c4:	andeq	r5, r1, ip, ror r4
   155c8:	andeq	r5, r1, ip, ror r4
   155cc:	andeq	r5, r1, r4, asr r7
   155d0:	andeq	r5, r1, r4, asr r7
   155d4:	andeq	r5, r1, r4, asr r7
   155d8:	andeq	r5, r1, r4, asr r7
   155dc:	andeq	r5, r1, r8, lsl r1
   155e0:	andeq	r5, r1, r0, lsr r4
   155e4:	andeq	r5, r1, ip, ror r4
   155e8:	andeq	r5, r1, ip, ror r4
   155ec:	andeq	r5, r1, ip, ror r4
   155f0:	andeq	r5, r1, ip, ror r4
   155f4:	andeq	r5, r1, ip, ror r4
   155f8:	andeq	r5, r1, ip, ror r4
   155fc:	andeq	r5, r1, ip, ror r4
   15600:	andeq	r5, r1, ip, ror r4
   15604:	andeq	r5, r1, ip, ror r4
   15608:	andeq	r5, r1, ip, ror r4
   1560c:	andeq	r5, r1, ip, ror r4
   15610:	andeq	r5, r1, ip, ror r4
   15614:	andeq	r5, r1, ip, ror r4
   15618:	andeq	r5, r1, ip, ror r4
   1561c:	andeq	r5, r1, ip, ror r4
   15620:	andeq	r5, r1, ip, ror r4
   15624:	andeq	r5, r1, ip, ror r4
   15628:	andeq	r5, r1, ip, ror r4
   1562c:	andeq	r5, r1, ip, ror r4
   15630:	andeq	r5, r1, ip, ror r4
   15634:	andeq	r5, r1, ip, ror r4
   15638:	andeq	r5, r1, ip, ror r4
   1563c:	andeq	r5, r1, ip, ror r4
   15640:	andeq	r5, r1, ip, ror r4
   15644:	andeq	r5, r1, ip, ror r4
   15648:	andeq	r5, r1, ip, ror r4
   1564c:	andeq	r5, r1, r4, asr r7
   15650:	ldrdeq	r5, [r1], -r0
   15654:	andeq	r5, r1, ip, ror r4
   15658:	andeq	r5, r1, r4, asr r7
   1565c:	andeq	r5, r1, ip, ror r4
   15660:	andeq	r5, r1, r4, asr r7
   15664:	andeq	r5, r1, ip, ror r4
   15668:	andeq	r5, r1, ip, ror r4
   1566c:	andeq	r5, r1, ip, ror r4
   15670:	andeq	r5, r1, ip, ror r4
   15674:	andeq	r5, r1, ip, ror r4
   15678:	andeq	r5, r1, ip, ror r4
   1567c:	andeq	r5, r1, ip, ror r4
   15680:	andeq	r5, r1, ip, ror r4
   15684:	andeq	r5, r1, ip, ror r4
   15688:	andeq	r5, r1, ip, ror r4
   1568c:	andeq	r5, r1, ip, ror r4
   15690:	andeq	r5, r1, ip, ror r4
   15694:	andeq	r5, r1, ip, ror r4
   15698:	andeq	r5, r1, ip, ror r4
   1569c:	andeq	r5, r1, ip, ror r4
   156a0:	andeq	r5, r1, ip, ror r4
   156a4:	andeq	r5, r1, ip, ror r4
   156a8:	andeq	r5, r1, ip, ror r4
   156ac:	andeq	r5, r1, ip, ror r4
   156b0:	andeq	r5, r1, ip, ror r4
   156b4:	andeq	r5, r1, ip, ror r4
   156b8:	andeq	r5, r1, ip, ror r4
   156bc:	andeq	r5, r1, ip, ror r4
   156c0:	andeq	r5, r1, ip, ror r4
   156c4:	andeq	r5, r1, ip, ror r4
   156c8:	andeq	r5, r1, ip, ror r4
   156cc:	andeq	r4, r1, r8, ror #29
   156d0:	andeq	r5, r1, r4, asr r7
   156d4:	andeq	r4, r1, r8, ror #29
   156d8:	andeq	r5, r1, r4, asr #14
   156dc:	mov	r3, #110	; 0x6e
   156e0:	b	15214 <__assert_fail@plt+0x3c4c>
   156e4:	mov	r3, #116	; 0x74
   156e8:	b	15214 <__assert_fail@plt+0x3c4c>
   156ec:	sub	r2, fp, #2
   156f0:	mov	r3, #98	; 0x62
   156f4:	clz	r2, r2
   156f8:	lsr	r2, r2, #5
   156fc:	b	15100 <__assert_fail@plt+0x3b38>
   15700:	sub	r2, fp, #2
   15704:	mov	r3, #97	; 0x61
   15708:	clz	r2, r2
   1570c:	lsr	r2, r2, #5
   15710:	b	15100 <__assert_fail@plt+0x3b38>
   15714:	ldr	r3, [sp, #28]
   15718:	cmp	r3, #0
   1571c:	bne	1530c <__assert_fail@plt+0x3d44>
   15720:	ldr	r3, [sp, #164]	; 0xa4
   15724:	tst	r3, #1
   15728:	bne	15d9c <__assert_fail@plt+0x47d4>
   1572c:	ldr	r6, [sp, #28]
   15730:	sub	r2, fp, #2
   15734:	mov	r7, r6
   15738:	clz	r2, r2
   1573c:	lsr	r2, r2, #5
   15740:	b	14f28 <__assert_fail@plt+0x3960>
   15744:	sub	r2, fp, #2
   15748:	clz	r2, r2
   1574c:	lsr	r2, r2, #5
   15750:	b	14f14 <__assert_fail@plt+0x394c>
   15754:	sub	r2, fp, #2
   15758:	mov	r6, #0
   1575c:	clz	r2, r2
   15760:	lsr	r2, r2, #5
   15764:	b	14f1c <__assert_fail@plt+0x3954>
   15768:	sub	r2, fp, #2
   1576c:	clz	r2, r2
   15770:	lsr	r2, r2, #5
   15774:	b	14f1c <__assert_fail@plt+0x3954>
   15778:	sub	r2, fp, #2
   1577c:	mov	r3, #102	; 0x66
   15780:	clz	r2, r2
   15784:	lsr	r2, r2, #5
   15788:	b	15100 <__assert_fail@plt+0x3b38>
   1578c:	sub	r2, fp, #2
   15790:	mov	r3, #118	; 0x76
   15794:	clz	r2, r2
   15798:	lsr	r2, r2, #5
   1579c:	b	15100 <__assert_fail@plt+0x3b38>
   157a0:	andeq	fp, r2, r8, lsl #30
   157a4:	muleq	r1, r8, ip
   157a8:	andeq	sl, r1, r0, lsl #25
   157ac:	muleq	r1, r4, ip
   157b0:	ldr	r3, [sp, #48]	; 0x30
   157b4:	ldrb	r5, [r3]
   157b8:	cmp	r5, #126	; 0x7e
   157bc:	ldrls	pc, [pc, r5, lsl #2]
   157c0:	b	1542c <__assert_fail@plt+0x3e64>
   157c4:	andeq	r5, r1, ip, lsl #6
   157c8:	andeq	r5, r1, ip, lsr #8
   157cc:	andeq	r5, r1, ip, lsr #8
   157d0:	andeq	r5, r1, ip, lsr #8
   157d4:	andeq	r5, r1, ip, lsr #8
   157d8:	andeq	r5, r1, ip, lsr #8
   157dc:	andeq	r5, r1, ip, lsr #8
   157e0:	andeq	r5, r1, r4, lsl #20
   157e4:	strdeq	r5, [r1], -ip
   157e8:	ldrdeq	r5, [r1], -r8
   157ec:	andeq	r5, r1, r0, lsr #5
   157f0:	strdeq	r5, [r1], -r8
   157f4:	andeq	r5, r1, r0, ror #5
   157f8:	strdeq	r5, [r1], -r0
   157fc:	andeq	r5, r1, ip, lsr #8
   15800:	andeq	r5, r1, ip, lsr #8
   15804:	andeq	r5, r1, ip, lsr #8
   15808:	andeq	r5, r1, ip, lsr #8
   1580c:	andeq	r5, r1, ip, lsr #8
   15810:	andeq	r5, r1, ip, lsr #8
   15814:	andeq	r5, r1, ip, lsr #8
   15818:	andeq	r5, r1, ip, lsr #8
   1581c:	andeq	r5, r1, ip, lsr #8
   15820:	andeq	r5, r1, ip, lsr #8
   15824:	andeq	r5, r1, ip, lsr #8
   15828:	andeq	r5, r1, ip, lsr #8
   1582c:	andeq	r5, r1, ip, lsr #8
   15830:	andeq	r5, r1, ip, lsr #8
   15834:	andeq	r5, r1, ip, lsr #8
   15838:	andeq	r5, r1, ip, lsr #8
   1583c:	andeq	r5, r1, ip, lsr #8
   15840:	andeq	r5, r1, ip, lsr #8
   15844:	andeq	r5, r1, r8, ror #19
   15848:	andeq	r5, r1, r0, lsl #6
   1584c:	andeq	r5, r1, r0, lsl #6
   15850:	andeq	r5, r1, ip, asr #19
   15854:	andeq	r5, r1, r0, lsl #6
   15858:	andeq	r5, r1, r0, asr #19
   1585c:	andeq	r5, r1, r0, lsl #6
   15860:	andeq	r5, r1, r0, asr #2
   15864:	andeq	r5, r1, r0, lsl #6
   15868:	andeq	r5, r1, r0, lsl #6
   1586c:	andeq	r5, r1, r0, lsl #6
   15870:	andeq	r5, r1, r0, asr #19
   15874:	andeq	r5, r1, r0, asr #19
   15878:	andeq	r5, r1, r0, asr #19
   1587c:	andeq	r5, r1, r0, asr #19
   15880:	andeq	r5, r1, r0, asr #19
   15884:	andeq	r5, r1, r0, asr #19
   15888:	andeq	r5, r1, r0, asr #19
   1588c:	andeq	r5, r1, r0, asr #19
   15890:	andeq	r5, r1, r0, asr #19
   15894:	andeq	r5, r1, r0, asr #19
   15898:	andeq	r5, r1, r0, asr #19
   1589c:	andeq	r5, r1, r0, asr #19
   158a0:	andeq	r5, r1, r0, asr #19
   158a4:	andeq	r5, r1, r0, asr #19
   158a8:	andeq	r5, r1, r0, asr #19
   158ac:	andeq	r5, r1, r0, asr #19
   158b0:	andeq	r5, r1, r0, lsl #6
   158b4:	andeq	r5, r1, r0, lsl #6
   158b8:	andeq	r5, r1, r0, lsl #6
   158bc:	andeq	r5, r1, r0, lsl #6
   158c0:	andeq	r5, r1, r4, lsl r1
   158c4:	andeq	r5, r1, ip, lsr #8
   158c8:	andeq	r5, r1, r0, asr #19
   158cc:	andeq	r5, r1, r0, asr #19
   158d0:	andeq	r5, r1, r0, asr #19
   158d4:	andeq	r5, r1, r0, asr #19
   158d8:	andeq	r5, r1, r0, asr #19
   158dc:	andeq	r5, r1, r0, asr #19
   158e0:	andeq	r5, r1, r0, asr #19
   158e4:	andeq	r5, r1, r0, asr #19
   158e8:	andeq	r5, r1, r0, asr #19
   158ec:	andeq	r5, r1, r0, asr #19
   158f0:	andeq	r5, r1, r0, asr #19
   158f4:	andeq	r5, r1, r0, asr #19
   158f8:	andeq	r5, r1, r0, asr #19
   158fc:	andeq	r5, r1, r0, asr #19
   15900:	andeq	r5, r1, r0, asr #19
   15904:	andeq	r5, r1, r0, asr #19
   15908:	andeq	r5, r1, r0, asr #19
   1590c:	andeq	r5, r1, r0, asr #19
   15910:	andeq	r5, r1, r0, asr #19
   15914:	andeq	r5, r1, r0, asr #19
   15918:	andeq	r5, r1, r0, asr #19
   1591c:	andeq	r5, r1, r0, asr #19
   15920:	andeq	r5, r1, r0, asr #19
   15924:	andeq	r5, r1, r0, asr #19
   15928:	andeq	r5, r1, r0, asr #19
   1592c:	andeq	r5, r1, r0, asr #19
   15930:	andeq	r5, r1, r0, lsl #6
   15934:	andeq	r5, r1, ip, asr #1
   15938:	andeq	r5, r1, r0, asr #19
   1593c:	andeq	r5, r1, r0, lsl #6
   15940:	andeq	r5, r1, r0, asr #19
   15944:	andeq	r5, r1, r0, lsl #6
   15948:	andeq	r5, r1, r0, asr #19
   1594c:	andeq	r5, r1, r0, asr #19
   15950:	andeq	r5, r1, r0, asr #19
   15954:	andeq	r5, r1, r0, asr #19
   15958:	andeq	r5, r1, r0, asr #19
   1595c:	andeq	r5, r1, r0, asr #19
   15960:	andeq	r5, r1, r0, asr #19
   15964:	andeq	r5, r1, r0, asr #19
   15968:	andeq	r5, r1, r0, asr #19
   1596c:	andeq	r5, r1, r0, asr #19
   15970:	andeq	r5, r1, r0, asr #19
   15974:	andeq	r5, r1, r0, asr #19
   15978:	andeq	r5, r1, r0, asr #19
   1597c:	andeq	r5, r1, r0, asr #19
   15980:	andeq	r5, r1, r0, asr #19
   15984:	andeq	r5, r1, r0, asr #19
   15988:	andeq	r5, r1, r0, asr #19
   1598c:	andeq	r5, r1, r0, asr #19
   15990:	andeq	r5, r1, r0, asr #19
   15994:	andeq	r5, r1, r0, asr #19
   15998:	andeq	r5, r1, r0, asr #19
   1599c:	andeq	r5, r1, r0, asr #19
   159a0:	andeq	r5, r1, r0, asr #19
   159a4:	andeq	r5, r1, r0, asr #19
   159a8:	andeq	r5, r1, r0, asr #19
   159ac:	andeq	r5, r1, r0, asr #19
   159b0:	andeq	r4, r1, r4, ror #29
   159b4:	andeq	r5, r1, r0, lsl #6
   159b8:	andeq	r4, r1, r4, ror #29
   159bc:	andeq	r5, r1, ip, asr #19
   159c0:	mov	r6, r7
   159c4:	mov	r7, #0
   159c8:	b	14f44 <__assert_fail@plt+0x397c>
   159cc:	cmp	r9, #0
   159d0:	mov	r3, #0
   159d4:	beq	15414 <__assert_fail@plt+0x3e4c>
   159d8:	mov	r6, #0
   159dc:	mov	r7, r3
   159e0:	mov	r3, r6
   159e4:	b	14f48 <__assert_fail@plt+0x3980>
   159e8:	mov	r3, #0
   159ec:	b	153f4 <__assert_fail@plt+0x3e2c>
   159f0:	mov	r7, #0
   159f4:	mov	r3, #114	; 0x72
   159f8:	b	15214 <__assert_fail@plt+0x3c4c>
   159fc:	mov	r5, #98	; 0x62
   15a00:	b	152a4 <__assert_fail@plt+0x3cdc>
   15a04:	mov	r5, #97	; 0x61
   15a08:	b	152e4 <__assert_fail@plt+0x3d1c>
   15a0c:	ldr	r3, [sp, #32]
   15a10:	cmp	r3, #0
   15a14:	bne	15e5c <__assert_fail@plt+0x4894>
   15a18:	add	r9, r9, #1
   15a1c:	ldr	r3, [sp, #44]	; 0x2c
   15a20:	mov	r6, #0
   15a24:	mov	r5, #92	; 0x5c
   15a28:	b	151dc <__assert_fail@plt+0x3c14>
   15a2c:	ldr	r3, [sp, #36]	; 0x24
   15a30:	ldrb	r3, [r3, #1]
   15a34:	adds	r3, r3, #0
   15a38:	movne	r3, #1
   15a3c:	b	14f00 <__assert_fail@plt+0x3938>
   15a40:	ldr	r3, [sp, #164]	; 0xa4
   15a44:	ands	r3, r3, #4
   15a48:	beq	15a6c <__assert_fail@plt+0x44a4>
   15a4c:	ldr	r2, [sp, #24]
   15a50:	add	r3, r9, #2
   15a54:	cmp	r3, r2
   15a58:	bcs	15a6c <__assert_fail@plt+0x44a4>
   15a5c:	ldr	r2, [sp, #48]	; 0x30
   15a60:	ldrb	r5, [r2, #1]
   15a64:	cmp	r5, #63	; 0x3f
   15a68:	beq	15ed0 <__assert_fail@plt+0x4908>
   15a6c:	mov	r2, #0
   15a70:	mov	r6, r2
   15a74:	mov	r5, #63	; 0x3f
   15a78:	b	14f28 <__assert_fail@plt+0x3960>
   15a7c:	ldr	r3, [sp, #32]
   15a80:	cmp	r3, #0
   15a84:	bne	15e5c <__assert_fail@plt+0x4894>
   15a88:	mov	r6, r3
   15a8c:	mov	r5, #63	; 0x3f
   15a90:	b	14f70 <__assert_fail@plt+0x39a8>
   15a94:	ldr	r3, [sp, #24]
   15a98:	cmn	r3, #1
   15a9c:	mov	r3, #0
   15aa0:	str	r3, [sp, #108]	; 0x6c
   15aa4:	str	r3, [sp, #112]	; 0x70
   15aa8:	bne	15ab8 <__assert_fail@plt+0x44f0>
   15aac:	ldr	r0, [sp, #36]	; 0x24
   15ab0:	bl	11424 <strlen@plt>
   15ab4:	str	r0, [sp, #24]
   15ab8:	mov	r3, #0
   15abc:	str	sl, [sp, #88]	; 0x58
   15ac0:	ldr	sl, [sp, #36]	; 0x24
   15ac4:	str	r5, [sp, #92]	; 0x5c
   15ac8:	mov	r5, r3
   15acc:	str	r7, [sp, #96]	; 0x60
   15ad0:	str	r4, [sp, #100]	; 0x64
   15ad4:	str	r8, [sp, #84]	; 0x54
   15ad8:	ldr	r3, [sp, #24]
   15adc:	add	r4, r9, r5
   15ae0:	add	r7, sl, r4
   15ae4:	sub	r2, r3, r4
   15ae8:	mov	r1, r7
   15aec:	add	r3, sp, #108	; 0x6c
   15af0:	add	r0, sp, #104	; 0x68
   15af4:	bl	18d68 <__assert_fail@plt+0x77a0>
   15af8:	subs	r8, r0, #0
   15afc:	beq	15b4c <__assert_fail@plt+0x4584>
   15b00:	cmn	r8, #1
   15b04:	beq	15eac <__assert_fail@plt+0x48e4>
   15b08:	cmn	r8, #2
   15b0c:	beq	15fcc <__assert_fail@plt+0x4a04>
   15b10:	ldr	r3, [sp, #32]
   15b14:	cmp	fp, #2
   15b18:	movne	r3, #0
   15b1c:	andeq	r3, r3, #1
   15b20:	cmp	r3, #0
   15b24:	bne	15cac <__assert_fail@plt+0x46e4>
   15b28:	ldr	r0, [sp, #104]	; 0x68
   15b2c:	bl	1131c <iswprint@plt>
   15b30:	add	r5, r5, r8
   15b34:	cmp	r0, #0
   15b38:	add	r0, sp, #108	; 0x6c
   15b3c:	moveq	r6, #0
   15b40:	bl	112a4 <mbsinit@plt>
   15b44:	cmp	r0, #0
   15b48:	beq	15ad8 <__assert_fail@plt+0x4510>
   15b4c:	ldr	r3, [sp, #28]
   15b50:	mov	ip, r5
   15b54:	eor	r2, r6, #1
   15b58:	ldr	r5, [sp, #92]	; 0x5c
   15b5c:	ldr	r7, [sp, #96]	; 0x60
   15b60:	ldr	r4, [sp, #100]	; 0x64
   15b64:	ldr	r8, [sp, #84]	; 0x54
   15b68:	ldr	sl, [sp, #88]	; 0x58
   15b6c:	and	r2, r2, r3
   15b70:	cmp	ip, #1
   15b74:	bls	15474 <__assert_fail@plt+0x3eac>
   15b78:	add	r1, ip, r9
   15b7c:	ldr	lr, [sp, #48]	; 0x30
   15b80:	mov	r0, #0
   15b84:	str	r6, [sp, #48]	; 0x30
   15b88:	mov	ip, #39	; 0x27
   15b8c:	ldr	r6, [sp, #44]	; 0x2c
   15b90:	b	15c48 <__assert_fail@plt+0x4680>
   15b94:	ldr	r0, [sp, #32]
   15b98:	sub	r3, fp, #2
   15b9c:	cmp	r0, #0
   15ba0:	clz	r3, r3
   15ba4:	lsr	r3, r3, #5
   15ba8:	bne	15db0 <__assert_fail@plt+0x47e8>
   15bac:	eor	r0, r6, #1
   15bb0:	ands	r3, r3, r0
   15bb4:	beq	15be4 <__assert_fail@plt+0x461c>
   15bb8:	add	r0, r4, #1
   15bbc:	cmp	sl, r4
   15bc0:	strbhi	ip, [r8, r4]
   15bc4:	cmp	sl, r0
   15bc8:	movhi	r6, #36	; 0x24
   15bcc:	strbhi	r6, [r8, r0]
   15bd0:	add	r0, r4, #2
   15bd4:	mov	r6, r3
   15bd8:	add	r4, r4, #3
   15bdc:	cmp	sl, r0
   15be0:	strbhi	ip, [r8, r0]
   15be4:	cmp	sl, r4
   15be8:	movhi	r3, #92	; 0x5c
   15bec:	strbhi	r3, [r8, r4]
   15bf0:	add	r3, r4, #1
   15bf4:	cmp	sl, r3
   15bf8:	lsrhi	r0, r5, #6
   15bfc:	addhi	r0, r0, #48	; 0x30
   15c00:	strbhi	r0, [r8, r3]
   15c04:	add	r0, r4, #2
   15c08:	cmp	sl, r0
   15c0c:	lsrhi	r3, r5, #3
   15c10:	andhi	r3, r3, #7
   15c14:	addhi	r3, r3, #48	; 0x30
   15c18:	add	r9, r9, #1
   15c1c:	strbhi	r3, [r8, r0]
   15c20:	and	r5, r5, #7
   15c24:	cmp	r9, r1
   15c28:	add	r5, r5, #48	; 0x30
   15c2c:	add	r4, r4, #3
   15c30:	bcs	15dd0 <__assert_fail@plt+0x4808>
   15c34:	mov	r0, r2
   15c38:	cmp	sl, r4
   15c3c:	strbhi	r5, [r8, r4]
   15c40:	ldrb	r5, [lr, #1]!
   15c44:	add	r4, r4, #1
   15c48:	cmp	r2, #0
   15c4c:	bne	15b94 <__assert_fail@plt+0x45cc>
   15c50:	eor	r3, r0, #1
   15c54:	and	r3, r3, r6
   15c58:	cmp	r7, #0
   15c5c:	uxtb	r3, r3
   15c60:	beq	15c74 <__assert_fail@plt+0x46ac>
   15c64:	cmp	sl, r4
   15c68:	movhi	r7, #92	; 0x5c
   15c6c:	strbhi	r7, [r8, r4]
   15c70:	add	r4, r4, #1
   15c74:	add	r9, r9, #1
   15c78:	cmp	r9, r1
   15c7c:	bcs	15dc4 <__assert_fail@plt+0x47fc>
   15c80:	cmp	r3, #0
   15c84:	beq	15df0 <__assert_fail@plt+0x4828>
   15c88:	cmp	sl, r4
   15c8c:	add	r3, r4, #1
   15c90:	strbhi	ip, [r8, r4]
   15c94:	mov	r7, #0
   15c98:	cmp	sl, r3
   15c9c:	strbhi	ip, [r8, r3]
   15ca0:	add	r4, r4, #2
   15ca4:	mov	r6, r7
   15ca8:	b	15c38 <__assert_fail@plt+0x4670>
   15cac:	cmp	r8, #1
   15cb0:	beq	15b28 <__assert_fail@plt+0x4560>
   15cb4:	add	r1, r4, #1
   15cb8:	add	r3, sl, r8
   15cbc:	add	r1, sl, r1
   15cc0:	add	r4, r3, r4
   15cc4:	ldrb	r3, [r1], #1
   15cc8:	sub	r3, r3, #91	; 0x5b
   15ccc:	cmp	r3, #33	; 0x21
   15cd0:	ldrls	pc, [pc, r3, lsl #2]
   15cd4:	b	15d60 <__assert_fail@plt+0x4798>
   15cd8:	andeq	r5, r1, ip, ror #26
   15cdc:	andeq	r5, r1, ip, ror #26
   15ce0:	andeq	r5, r1, r0, ror #26
   15ce4:	andeq	r5, r1, ip, ror #26
   15ce8:	andeq	r5, r1, r0, ror #26
   15cec:	andeq	r5, r1, ip, ror #26
   15cf0:	andeq	r5, r1, r0, ror #26
   15cf4:	andeq	r5, r1, r0, ror #26
   15cf8:	andeq	r5, r1, r0, ror #26
   15cfc:	andeq	r5, r1, r0, ror #26
   15d00:	andeq	r5, r1, r0, ror #26
   15d04:	andeq	r5, r1, r0, ror #26
   15d08:	andeq	r5, r1, r0, ror #26
   15d0c:	andeq	r5, r1, r0, ror #26
   15d10:	andeq	r5, r1, r0, ror #26
   15d14:	andeq	r5, r1, r0, ror #26
   15d18:	andeq	r5, r1, r0, ror #26
   15d1c:	andeq	r5, r1, r0, ror #26
   15d20:	andeq	r5, r1, r0, ror #26
   15d24:	andeq	r5, r1, r0, ror #26
   15d28:	andeq	r5, r1, r0, ror #26
   15d2c:	andeq	r5, r1, r0, ror #26
   15d30:	andeq	r5, r1, r0, ror #26
   15d34:	andeq	r5, r1, r0, ror #26
   15d38:	andeq	r5, r1, r0, ror #26
   15d3c:	andeq	r5, r1, r0, ror #26
   15d40:	andeq	r5, r1, r0, ror #26
   15d44:	andeq	r5, r1, r0, ror #26
   15d48:	andeq	r5, r1, r0, ror #26
   15d4c:	andeq	r5, r1, r0, ror #26
   15d50:	andeq	r5, r1, r0, ror #26
   15d54:	andeq	r5, r1, r0, ror #26
   15d58:	andeq	r5, r1, r0, ror #26
   15d5c:	andeq	r5, r1, ip, ror #26
   15d60:	cmp	r4, r1
   15d64:	bne	15cc4 <__assert_fail@plt+0x46fc>
   15d68:	b	15b28 <__assert_fail@plt+0x4560>
   15d6c:	ldr	fp, [sp, #84]	; 0x54
   15d70:	ldr	sl, [sp, #88]	; 0x58
   15d74:	mov	r8, #2
   15d78:	b	15234 <__assert_fail@plt+0x3c6c>
   15d7c:	cmp	sl, r4
   15d80:	movls	r1, r4
   15d84:	bls	15384 <__assert_fail@plt+0x3dbc>
   15d88:	ldr	r3, [sp, #44]	; 0x2c
   15d8c:	b	15374 <__assert_fail@plt+0x3dac>
   15d90:	str	sl, [sp, #72]	; 0x48
   15d94:	ldr	sl, [sp, #32]
   15d98:	b	151ac <__assert_fail@plt+0x3be4>
   15d9c:	add	r9, r9, #1
   15da0:	b	14aa0 <__assert_fail@plt+0x34d8>
   15da4:	ldr	r2, [sp, #28]
   15da8:	mov	r6, #0
   15dac:	b	15b78 <__assert_fail@plt+0x45b0>
   15db0:	str	fp, [sp, #160]	; 0xa0
   15db4:	str	r3, [sp, #28]
   15db8:	mov	fp, r8
   15dbc:	ldr	r8, [sp, #160]	; 0xa0
   15dc0:	b	15234 <__assert_fail@plt+0x3c6c>
   15dc4:	str	r6, [sp, #44]	; 0x2c
   15dc8:	ldr	r6, [sp, #48]	; 0x30
   15dcc:	b	151dc <__assert_fail@plt+0x3c14>
   15dd0:	str	r6, [sp, #44]	; 0x2c
   15dd4:	ldr	r6, [sp, #48]	; 0x30
   15dd8:	b	14fe8 <__assert_fail@plt+0x3a20>
   15ddc:	add	r4, r4, #4
   15de0:	str	r3, [sp, #44]	; 0x2c
   15de4:	mov	r6, #0
   15de8:	mov	r5, #48	; 0x30
   15dec:	b	14f70 <__assert_fail@plt+0x39a8>
   15df0:	mov	r7, r3
   15df4:	b	15c38 <__assert_fail@plt+0x4670>
   15df8:	ldr	r3, [pc, #-1624]	; 157a8 <__assert_fail@plt+0x41e0>
   15dfc:	mov	r4, #1
   15e00:	str	r4, [sp, #40]	; 0x28
   15e04:	str	r4, [sp, #28]
   15e08:	str	r4, [sp, #52]	; 0x34
   15e0c:	str	sl, [sp, #72]	; 0x48
   15e10:	str	sl, [sp, #68]	; 0x44
   15e14:	str	sl, [sp, #44]	; 0x2c
   15e18:	str	sl, [sp, #32]
   15e1c:	str	r3, [sp, #60]	; 0x3c
   15e20:	b	14a90 <__assert_fail@plt+0x34c8>
   15e24:	mov	r3, r6
   15e28:	mov	r5, #48	; 0x30
   15e2c:	mov	r6, #0
   15e30:	b	14f70 <__assert_fail@plt+0x39a8>
   15e34:	cmp	sl, r4
   15e38:	movhi	r3, #48	; 0x30
   15e3c:	strbhi	r3, [r8, r4]
   15e40:	add	r3, r1, #2
   15e44:	cmp	sl, r3
   15e48:	movhi	r0, #48	; 0x30
   15e4c:	strbhi	r0, [r8, r3]
   15e50:	add	r4, r1, #3
   15e54:	mov	r5, #48	; 0x30
   15e58:	b	153b8 <__assert_fail@plt+0x3df0>
   15e5c:	str	fp, [sp, #160]	; 0xa0
   15e60:	mov	fp, r8
   15e64:	ldr	r8, [sp, #160]	; 0xa0
   15e68:	b	15234 <__assert_fail@plt+0x3c6c>
   15e6c:	ldr	r2, [sp, #80]	; 0x50
   15e70:	ldrb	r3, [r2]
   15e74:	cmp	r3, #0
   15e78:	beq	14a60 <__assert_fail@plt+0x3498>
   15e7c:	cmp	sl, r4
   15e80:	strbhi	r3, [fp, r4]
   15e84:	ldrb	r3, [r2, #1]!
   15e88:	add	r4, r4, #1
   15e8c:	cmp	r3, #0
   15e90:	bne	15e7c <__assert_fail@plt+0x48b4>
   15e94:	b	14a60 <__assert_fail@plt+0x3498>
   15e98:	str	fp, [sp, #160]	; 0xa0
   15e9c:	mov	r3, #0
   15ea0:	mov	fp, r8
   15ea4:	ldr	r8, [sp, #160]	; 0xa0
   15ea8:	b	152c8 <__assert_fail@plt+0x3d00>
   15eac:	mov	ip, r5
   15eb0:	ldr	r7, [sp, #96]	; 0x60
   15eb4:	ldr	r5, [sp, #92]	; 0x5c
   15eb8:	ldr	r4, [sp, #100]	; 0x64
   15ebc:	ldr	r8, [sp, #84]	; 0x54
   15ec0:	ldr	sl, [sp, #88]	; 0x58
   15ec4:	ldr	r2, [sp, #28]
   15ec8:	mov	r6, #0
   15ecc:	b	15b70 <__assert_fail@plt+0x45a8>
   15ed0:	ldr	r2, [sp, #36]	; 0x24
   15ed4:	ldrb	r1, [r2, r3]
   15ed8:	sub	r2, r1, #33	; 0x21
   15edc:	cmp	r2, #29
   15ee0:	ldrls	pc, [pc, r2, lsl #2]
   15ee4:	b	15fc0 <__assert_fail@plt+0x49f8>
   15ee8:	andeq	r5, r1, r0, ror #30
   15eec:	andeq	r5, r1, r0, asr #31
   15ef0:	andeq	r5, r1, r0, asr #31
   15ef4:	andeq	r5, r1, r0, asr #31
   15ef8:	andeq	r5, r1, r0, asr #31
   15efc:	andeq	r5, r1, r0, asr #31
   15f00:	andeq	r5, r1, r0, ror #30
   15f04:	andeq	r5, r1, r0, ror #30
   15f08:	andeq	r5, r1, r0, ror #30
   15f0c:	andeq	r5, r1, r0, asr #31
   15f10:	andeq	r5, r1, r0, asr #31
   15f14:	andeq	r5, r1, r0, asr #31
   15f18:	andeq	r5, r1, r0, ror #30
   15f1c:	andeq	r5, r1, r0, asr #31
   15f20:	andeq	r5, r1, r0, ror #30
   15f24:	andeq	r5, r1, r0, asr #31
   15f28:	andeq	r5, r1, r0, asr #31
   15f2c:	andeq	r5, r1, r0, asr #31
   15f30:	andeq	r5, r1, r0, asr #31
   15f34:	andeq	r5, r1, r0, asr #31
   15f38:	andeq	r5, r1, r0, asr #31
   15f3c:	andeq	r5, r1, r0, asr #31
   15f40:	andeq	r5, r1, r0, asr #31
   15f44:	andeq	r5, r1, r0, asr #31
   15f48:	andeq	r5, r1, r0, asr #31
   15f4c:	andeq	r5, r1, r0, asr #31
   15f50:	andeq	r5, r1, r0, asr #31
   15f54:	andeq	r5, r1, r0, ror #30
   15f58:	andeq	r5, r1, r0, ror #30
   15f5c:	andeq	r5, r1, r0, ror #30
   15f60:	ldr	r2, [sp, #32]
   15f64:	cmp	r2, #0
   15f68:	bne	1606c <__assert_fail@plt+0x4aa4>
   15f6c:	cmp	sl, r4
   15f70:	movhi	r2, #63	; 0x3f
   15f74:	strbhi	r2, [r8, r4]
   15f78:	add	r2, r4, #1
   15f7c:	cmp	sl, r2
   15f80:	movhi	r0, #34	; 0x22
   15f84:	strbhi	r0, [r8, r2]
   15f88:	add	r2, r4, #2
   15f8c:	cmp	sl, r2
   15f90:	movhi	r0, #34	; 0x22
   15f94:	strbhi	r0, [r8, r2]
   15f98:	add	r2, r4, #3
   15f9c:	cmp	sl, r2
   15fa0:	movhi	r0, #63	; 0x3f
   15fa4:	strbhi	r0, [r8, r2]
   15fa8:	mov	r2, #0
   15fac:	add	r4, r4, #4
   15fb0:	mov	r5, r1
   15fb4:	mov	r9, r3
   15fb8:	mov	r6, r2
   15fbc:	b	153b8 <__assert_fail@plt+0x3df0>
   15fc0:	mov	r2, #0
   15fc4:	mov	r6, r2
   15fc8:	b	14f28 <__assert_fail@plt+0x3960>
   15fcc:	ldr	r0, [sp, #24]
   15fd0:	mov	r1, r4
   15fd4:	cmp	r1, r0
   15fd8:	mov	r2, r7
   15fdc:	mov	r3, r5
   15fe0:	mov	ip, r5
   15fe4:	ldr	r7, [sp, #96]	; 0x60
   15fe8:	ldr	r5, [sp, #92]	; 0x5c
   15fec:	ldr	r4, [sp, #100]	; 0x64
   15ff0:	ldr	r8, [sp, #84]	; 0x54
   15ff4:	ldr	sl, [sp, #88]	; 0x58
   15ff8:	bcs	1602c <__assert_fail@plt+0x4a64>
   15ffc:	ldrb	r6, [r2]
   16000:	cmp	r6, #0
   16004:	bne	16018 <__assert_fail@plt+0x4a50>
   16008:	b	16148 <__assert_fail@plt+0x4b80>
   1600c:	ldrb	r6, [r2, #1]!
   16010:	cmp	r6, #0
   16014:	beq	160d0 <__assert_fail@plt+0x4b08>
   16018:	add	r3, r3, #1
   1601c:	add	r1, r9, r3
   16020:	cmp	r1, r0
   16024:	bcc	1600c <__assert_fail@plt+0x4a44>
   16028:	mov	ip, r3
   1602c:	ldr	r2, [sp, #28]
   16030:	mov	r6, #0
   16034:	b	15b70 <__assert_fail@plt+0x45a8>
   16038:	mov	r3, #1
   1603c:	str	r3, [sp, #40]	; 0x28
   16040:	str	r3, [sp, #32]
   16044:	str	r3, [sp, #28]
   16048:	str	r3, [sp, #52]	; 0x34
   1604c:	ldr	r3, [pc, #-2220]	; 157a8 <__assert_fail@plt+0x41e0>
   16050:	mov	r2, #0
   16054:	str	r2, [sp, #68]	; 0x44
   16058:	str	r2, [sp, #44]	; 0x2c
   1605c:	str	r2, [sp, #72]	; 0x48
   16060:	mov	r4, r2
   16064:	str	r3, [sp, #60]	; 0x3c
   16068:	b	14a90 <__assert_fail@plt+0x34c8>
   1606c:	str	fp, [sp, #160]	; 0xa0
   16070:	mov	fp, r8
   16074:	ldr	r8, [sp, #160]	; 0xa0
   16078:	b	15240 <__assert_fail@plt+0x3c78>
   1607c:	mov	r2, r3
   16080:	ldr	r3, [sp, #60]	; 0x3c
   16084:	cmp	r3, #0
   16088:	moveq	r2, #0
   1608c:	andne	r2, r2, #1
   16090:	cmp	r2, #0
   16094:	beq	160c0 <__assert_fail@plt+0x4af8>
   16098:	mov	r2, r3
   1609c:	ldrb	r3, [r3]
   160a0:	cmp	r3, #0
   160a4:	beq	160c0 <__assert_fail@plt+0x4af8>
   160a8:	cmp	sl, r4
   160ac:	strbhi	r3, [fp, r4]
   160b0:	ldrb	r3, [r2, #1]!
   160b4:	add	r4, r4, #1
   160b8:	cmp	r3, #0
   160bc:	bne	160a8 <__assert_fail@plt+0x4ae0>
   160c0:	cmp	sl, r4
   160c4:	movhi	r3, #0
   160c8:	strbhi	r3, [fp, r4]
   160cc:	b	15280 <__assert_fail@plt+0x3cb8>
   160d0:	mov	ip, r3
   160d4:	ldr	r2, [sp, #28]
   160d8:	b	15b70 <__assert_fail@plt+0x45a8>
   160dc:	str	fp, [sp, #160]	; 0xa0
   160e0:	mov	fp, r8
   160e4:	ldr	r8, [sp, #160]	; 0xa0
   160e8:	sub	r3, r8, #2
   160ec:	clz	r3, r3
   160f0:	lsr	r3, r3, #5
   160f4:	str	r3, [sp, #28]
   160f8:	b	15234 <__assert_fail@plt+0x3c6c>
   160fc:	ldr	r3, [sp, #76]	; 0x4c
   16100:	mov	ip, #5
   16104:	str	r3, [sp, #16]
   16108:	ldr	r3, [sp, #80]	; 0x50
   1610c:	ldr	r2, [sp, #36]	; 0x24
   16110:	str	r3, [sp, #12]
   16114:	ldr	r3, [sp, #56]	; 0x38
   16118:	ldr	r1, [sp, #72]	; 0x48
   1611c:	str	r3, [sp, #8]
   16120:	ldr	r3, [sp, #164]	; 0xa4
   16124:	mov	r0, fp
   16128:	str	r3, [sp, #4]
   1612c:	str	ip, [sp]
   16130:	ldr	r3, [sp, #24]
   16134:	bl	14998 <__assert_fail@plt+0x33d0>
   16138:	mov	r4, r0
   1613c:	b	15280 <__assert_fail@plt+0x3cb8>
   16140:	mov	r8, #2
   16144:	b	15234 <__assert_fail@plt+0x3c6c>
   16148:	ldr	r2, [sp, #28]
   1614c:	b	15b70 <__assert_fail@plt+0x45a8>
   16150:	mov	r3, #0
   16154:	str	r3, [sp, #68]	; 0x44
   16158:	str	r3, [sp, #44]	; 0x2c
   1615c:	str	r3, [sp, #72]	; 0x48
   16160:	str	r3, [sp, #28]
   16164:	mov	r4, r3
   16168:	ldr	r3, [pc, #-2500]	; 157ac <__assert_fail@plt+0x41e4>
   1616c:	mov	r2, #1
   16170:	str	r2, [sp, #40]	; 0x28
   16174:	str	r2, [sp, #32]
   16178:	str	r2, [sp, #52]	; 0x34
   1617c:	str	r3, [sp, #60]	; 0x3c
   16180:	b	14a90 <__assert_fail@plt+0x34c8>
   16184:	bl	112e0 <__stack_chk_fail@plt>
   16188:	mov	r5, r3
   1618c:	mov	r6, #0
   16190:	b	14f84 <__assert_fail@plt+0x39bc>
   16194:	mov	r3, #0
   16198:	mov	r2, #1
   1619c:	str	r3, [sp, #44]	; 0x2c
   161a0:	str	r3, [sp, #72]	; 0x48
   161a4:	str	r2, [sp, #40]	; 0x28
   161a8:	b	150a0 <__assert_fail@plt+0x3ad8>
   161ac:	bl	115b0 <abort@plt>
   161b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161b4:	sub	sp, sp, #44	; 0x2c
   161b8:	mov	r6, r0
   161bc:	mov	r4, r3
   161c0:	mov	sl, r1
   161c4:	mov	fp, r2
   161c8:	bl	11448 <__errno_location@plt>
   161cc:	ldr	r7, [pc, #364]	; 16340 <__assert_fail@plt+0x4d78>
   161d0:	cmp	r6, #0
   161d4:	ldr	r5, [r7]
   161d8:	ldr	r3, [r0]
   161dc:	str	r3, [sp, #24]
   161e0:	blt	1633c <__assert_fail@plt+0x4d74>
   161e4:	ldr	r3, [r7, #4]
   161e8:	mov	r8, r0
   161ec:	cmp	r3, r6
   161f0:	bgt	1623c <__assert_fail@plt+0x4c74>
   161f4:	cmn	r6, #-268435454	; 0xf0000002
   161f8:	bgt	16338 <__assert_fail@plt+0x4d70>
   161fc:	add	r9, r6, #1
   16200:	add	r3, r7, #8
   16204:	cmp	r5, r3
   16208:	lsl	r1, r9, #3
   1620c:	beq	16318 <__assert_fail@plt+0x4d50>
   16210:	mov	r0, r5
   16214:	bl	17cf0 <__assert_fail@plt+0x6728>
   16218:	mov	r5, r0
   1621c:	str	r0, [r7]
   16220:	ldr	r0, [r7, #4]
   16224:	mov	r1, #0
   16228:	sub	r2, r9, r0
   1622c:	add	r0, r5, r0, lsl #3
   16230:	lsl	r2, r2, #3
   16234:	bl	11484 <memset@plt>
   16238:	str	r9, [r7, #4]
   1623c:	add	r3, r5, r6, lsl #3
   16240:	ldr	r1, [r4, #4]
   16244:	ldr	r7, [r3, #4]
   16248:	ldr	r9, [r5, r6, lsl #3]
   1624c:	ldr	r2, [r4, #40]	; 0x28
   16250:	ldr	ip, [r4, #44]	; 0x2c
   16254:	str	r3, [sp, #28]
   16258:	ldr	r3, [r4]
   1625c:	orr	r1, r1, #1
   16260:	add	lr, r4, #8
   16264:	str	r1, [sp, #36]	; 0x24
   16268:	str	r1, [sp, #4]
   1626c:	str	r2, [sp, #12]
   16270:	str	r3, [sp]
   16274:	mov	r0, r7
   16278:	mov	r1, r9
   1627c:	str	ip, [sp, #16]
   16280:	str	lr, [sp, #8]
   16284:	mov	r3, fp
   16288:	mov	r2, sl
   1628c:	str	lr, [sp, #32]
   16290:	bl	14998 <__assert_fail@plt+0x33d0>
   16294:	cmp	r9, r0
   16298:	bhi	16304 <__assert_fail@plt+0x4d3c>
   1629c:	ldr	r3, [pc, #160]	; 16344 <__assert_fail@plt+0x4d7c>
   162a0:	add	r9, r0, #1
   162a4:	cmp	r7, r3
   162a8:	str	r9, [r5, r6, lsl #3]
   162ac:	beq	162b8 <__assert_fail@plt+0x4cf0>
   162b0:	mov	r0, r7
   162b4:	bl	11274 <free@plt>
   162b8:	mov	r0, r9
   162bc:	bl	17c94 <__assert_fail@plt+0x66cc>
   162c0:	ldr	lr, [sp, #28]
   162c4:	ldr	ip, [r4, #44]	; 0x2c
   162c8:	ldr	r5, [r4, #40]	; 0x28
   162cc:	mov	r3, fp
   162d0:	mov	r2, sl
   162d4:	mov	r1, r9
   162d8:	str	r0, [lr, #4]
   162dc:	ldr	lr, [r4]
   162e0:	ldr	r4, [sp, #32]
   162e4:	str	ip, [sp, #16]
   162e8:	str	r4, [sp, #8]
   162ec:	ldr	r4, [sp, #36]	; 0x24
   162f0:	str	r5, [sp, #12]
   162f4:	str	r4, [sp, #4]
   162f8:	str	lr, [sp]
   162fc:	mov	r7, r0
   16300:	bl	14998 <__assert_fail@plt+0x33d0>
   16304:	ldr	r3, [sp, #24]
   16308:	mov	r0, r7
   1630c:	str	r3, [r8]
   16310:	add	sp, sp, #44	; 0x2c
   16314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16318:	mov	r0, #0
   1631c:	bl	17cf0 <__assert_fail@plt+0x6728>
   16320:	ldr	r3, [pc, #32]	; 16348 <__assert_fail@plt+0x4d80>
   16324:	mov	r5, r0
   16328:	ldm	r3, {r0, r1}
   1632c:	str	r5, [r7]
   16330:	stm	r5, {r0, r1}
   16334:	b	16220 <__assert_fail@plt+0x4c58>
   16338:	bl	17edc <__assert_fail@plt+0x6914>
   1633c:	bl	115b0 <abort@plt>
   16340:	andeq	ip, r2, ip, ror #2
   16344:	andeq	ip, r2, r0, ror #3
   16348:	andeq	ip, r2, r4, ror r1
   1634c:	push	{r4, r5, r6, lr}
   16350:	mov	r5, r0
   16354:	bl	11448 <__errno_location@plt>
   16358:	cmp	r5, #0
   1635c:	mov	r1, #48	; 0x30
   16360:	mov	r4, r0
   16364:	ldr	r0, [pc, #16]	; 1637c <__assert_fail@plt+0x4db4>
   16368:	ldr	r6, [r4]
   1636c:	movne	r0, r5
   16370:	bl	17e9c <__assert_fail@plt+0x68d4>
   16374:	str	r6, [r4]
   16378:	pop	{r4, r5, r6, pc}
   1637c:	andeq	ip, r2, r0, ror #5
   16380:	ldr	r3, [pc, #12]	; 16394 <__assert_fail@plt+0x4dcc>
   16384:	cmp	r0, #0
   16388:	moveq	r0, r3
   1638c:	ldr	r0, [r0]
   16390:	bx	lr
   16394:	andeq	ip, r2, r0, ror #5
   16398:	ldr	r3, [pc, #12]	; 163ac <__assert_fail@plt+0x4de4>
   1639c:	cmp	r0, #0
   163a0:	moveq	r0, r3
   163a4:	str	r1, [r0]
   163a8:	bx	lr
   163ac:	andeq	ip, r2, r0, ror #5
   163b0:	ldr	r3, [pc, #52]	; 163ec <__assert_fail@plt+0x4e24>
   163b4:	cmp	r0, #0
   163b8:	moveq	r0, r3
   163bc:	add	r3, r0, #8
   163c0:	push	{lr}		; (str lr, [sp, #-4]!)
   163c4:	lsr	lr, r1, #5
   163c8:	and	r1, r1, #31
   163cc:	ldr	ip, [r3, lr, lsl #2]
   163d0:	lsr	r0, ip, r1
   163d4:	eor	r2, r2, r0
   163d8:	and	r2, r2, #1
   163dc:	and	r0, r0, #1
   163e0:	eor	r1, ip, r2, lsl r1
   163e4:	str	r1, [r3, lr, lsl #2]
   163e8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ec:	andeq	ip, r2, r0, ror #5
   163f0:	ldr	r3, [pc, #16]	; 16408 <__assert_fail@plt+0x4e40>
   163f4:	cmp	r0, #0
   163f8:	movne	r3, r0
   163fc:	ldr	r0, [r3, #4]
   16400:	str	r1, [r3, #4]
   16404:	bx	lr
   16408:	andeq	ip, r2, r0, ror #5
   1640c:	ldr	r3, [pc, #44]	; 16440 <__assert_fail@plt+0x4e78>
   16410:	cmp	r0, #0
   16414:	moveq	r0, r3
   16418:	mov	ip, #10
   1641c:	cmp	r2, #0
   16420:	cmpne	r1, #0
   16424:	str	ip, [r0]
   16428:	beq	16438 <__assert_fail@plt+0x4e70>
   1642c:	str	r1, [r0, #40]	; 0x28
   16430:	str	r2, [r0, #44]	; 0x2c
   16434:	bx	lr
   16438:	push	{r4, lr}
   1643c:	bl	115b0 <abort@plt>
   16440:	andeq	ip, r2, r0, ror #5
   16444:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16448:	sub	sp, sp, #24
   1644c:	ldr	ip, [pc, #108]	; 164c0 <__assert_fail@plt+0x4ef8>
   16450:	ldr	r4, [sp, #56]	; 0x38
   16454:	mov	r9, r2
   16458:	cmp	r4, #0
   1645c:	moveq	r4, ip
   16460:	mov	sl, r3
   16464:	mov	r7, r0
   16468:	mov	r8, r1
   1646c:	bl	11448 <__errno_location@plt>
   16470:	ldr	r3, [r4, #44]	; 0x2c
   16474:	mov	r1, r8
   16478:	ldr	r6, [r0]
   1647c:	str	r3, [sp, #16]
   16480:	ldr	r2, [r4, #40]	; 0x28
   16484:	add	r3, r4, #8
   16488:	str	r3, [sp, #8]
   1648c:	str	r2, [sp, #12]
   16490:	ldr	r2, [r4, #4]
   16494:	mov	r5, r0
   16498:	str	r2, [sp, #4]
   1649c:	ldr	ip, [r4]
   164a0:	mov	r3, sl
   164a4:	mov	r2, r9
   164a8:	mov	r0, r7
   164ac:	str	ip, [sp]
   164b0:	bl	14998 <__assert_fail@plt+0x33d0>
   164b4:	str	r6, [r5]
   164b8:	add	sp, sp, #24
   164bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164c0:	andeq	ip, r2, r0, ror #5
   164c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c8:	cmp	r3, #0
   164cc:	sub	sp, sp, #44	; 0x2c
   164d0:	ldr	r4, [pc, #192]	; 16598 <__assert_fail@plt+0x4fd0>
   164d4:	mov	r6, r2
   164d8:	movne	r4, r3
   164dc:	mov	r9, r1
   164e0:	mov	r8, r0
   164e4:	bl	11448 <__errno_location@plt>
   164e8:	ldr	r3, [r4, #44]	; 0x2c
   164ec:	ldr	r5, [r4, #4]
   164f0:	add	sl, r4, #8
   164f4:	cmp	r6, #0
   164f8:	orreq	r5, r5, #1
   164fc:	mov	r1, #0
   16500:	ldr	r2, [r0]
   16504:	str	r3, [sp, #16]
   16508:	ldr	r3, [r4, #40]	; 0x28
   1650c:	stmib	sp, {r5, sl}
   16510:	str	r3, [sp, #12]
   16514:	ldr	r3, [r4]
   16518:	mov	r7, r0
   1651c:	str	r2, [sp, #28]
   16520:	str	r3, [sp]
   16524:	mov	r2, r8
   16528:	mov	r3, r9
   1652c:	mov	r0, r1
   16530:	bl	14998 <__assert_fail@plt+0x33d0>
   16534:	add	r1, r0, #1
   16538:	mov	fp, r0
   1653c:	mov	r0, r1
   16540:	str	r1, [sp, #36]	; 0x24
   16544:	bl	17c94 <__assert_fail@plt+0x66cc>
   16548:	ldr	r3, [r4, #44]	; 0x2c
   1654c:	mov	r2, r8
   16550:	str	r3, [sp, #16]
   16554:	ldr	r3, [r4, #40]	; 0x28
   16558:	str	r5, [sp, #4]
   1655c:	str	r3, [sp, #12]
   16560:	str	sl, [sp, #8]
   16564:	ldr	ip, [r4]
   16568:	ldr	r1, [sp, #36]	; 0x24
   1656c:	mov	r3, r9
   16570:	str	ip, [sp]
   16574:	str	r0, [sp, #32]
   16578:	bl	14998 <__assert_fail@plt+0x33d0>
   1657c:	ldr	r2, [sp, #28]
   16580:	cmp	r6, #0
   16584:	str	r2, [r7]
   16588:	ldr	r0, [sp, #32]
   1658c:	strne	fp, [r6]
   16590:	add	sp, sp, #44	; 0x2c
   16594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16598:	andeq	ip, r2, r0, ror #5
   1659c:	mov	r3, r2
   165a0:	mov	r2, #0
   165a4:	b	164c4 <__assert_fail@plt+0x4efc>
   165a8:	push	{r4, r5, r6, r7, r8, lr}
   165ac:	ldr	r6, [pc, #112]	; 16624 <__assert_fail@plt+0x505c>
   165b0:	ldr	r3, [r6, #4]
   165b4:	ldr	r7, [r6]
   165b8:	cmp	r3, #1
   165bc:	ble	165e0 <__assert_fail@plt+0x5018>
   165c0:	sub	r5, r7, #8
   165c4:	add	r5, r5, r3, lsl #3
   165c8:	mov	r4, r7
   165cc:	ldr	r0, [r4, #12]
   165d0:	add	r4, r4, #8
   165d4:	bl	11274 <free@plt>
   165d8:	cmp	r4, r5
   165dc:	bne	165cc <__assert_fail@plt+0x5004>
   165e0:	ldr	r0, [r7, #4]
   165e4:	ldr	r4, [pc, #60]	; 16628 <__assert_fail@plt+0x5060>
   165e8:	cmp	r0, r4
   165ec:	beq	16600 <__assert_fail@plt+0x5038>
   165f0:	bl	11274 <free@plt>
   165f4:	mov	r3, #256	; 0x100
   165f8:	str	r4, [r6, #12]
   165fc:	str	r3, [r6, #8]
   16600:	ldr	r4, [pc, #36]	; 1662c <__assert_fail@plt+0x5064>
   16604:	cmp	r7, r4
   16608:	beq	16618 <__assert_fail@plt+0x5050>
   1660c:	mov	r0, r7
   16610:	bl	11274 <free@plt>
   16614:	str	r4, [r6]
   16618:	mov	r3, #1
   1661c:	str	r3, [r6, #4]
   16620:	pop	{r4, r5, r6, r7, r8, pc}
   16624:	andeq	ip, r2, ip, ror #2
   16628:	andeq	ip, r2, r0, ror #3
   1662c:	andeq	ip, r2, r4, ror r1
   16630:	ldr	r3, [pc, #4]	; 1663c <__assert_fail@plt+0x5074>
   16634:	mvn	r2, #0
   16638:	b	161b0 <__assert_fail@plt+0x4be8>
   1663c:	andeq	ip, r2, r0, ror #5
   16640:	ldr	r3, [pc]	; 16648 <__assert_fail@plt+0x5080>
   16644:	b	161b0 <__assert_fail@plt+0x4be8>
   16648:	andeq	ip, r2, r0, ror #5
   1664c:	mov	r1, r0
   16650:	ldr	r3, [pc, #8]	; 16660 <__assert_fail@plt+0x5098>
   16654:	mvn	r2, #0
   16658:	mov	r0, #0
   1665c:	b	161b0 <__assert_fail@plt+0x4be8>
   16660:	andeq	ip, r2, r0, ror #5
   16664:	mov	r2, r1
   16668:	ldr	r3, [pc, #8]	; 16678 <__assert_fail@plt+0x50b0>
   1666c:	mov	r1, r0
   16670:	mov	r0, #0
   16674:	b	161b0 <__assert_fail@plt+0x4be8>
   16678:	andeq	ip, r2, r0, ror #5
   1667c:	push	{r4, r5, r6, lr}
   16680:	sub	sp, sp, #56	; 0x38
   16684:	ldr	r4, [pc, #68]	; 166d0 <__assert_fail@plt+0x5108>
   16688:	mov	r6, r2
   1668c:	mov	r5, r0
   16690:	ldr	r3, [r4]
   16694:	add	r0, sp, #4
   16698:	str	r3, [sp, #52]	; 0x34
   1669c:	bl	14828 <__assert_fail@plt+0x3260>
   166a0:	add	r3, sp, #4
   166a4:	mvn	r2, #0
   166a8:	mov	r1, r6
   166ac:	mov	r0, r5
   166b0:	bl	161b0 <__assert_fail@plt+0x4be8>
   166b4:	ldr	r2, [sp, #52]	; 0x34
   166b8:	ldr	r3, [r4]
   166bc:	cmp	r2, r3
   166c0:	bne	166cc <__assert_fail@plt+0x5104>
   166c4:	add	sp, sp, #56	; 0x38
   166c8:	pop	{r4, r5, r6, pc}
   166cc:	bl	112e0 <__stack_chk_fail@plt>
   166d0:	andeq	fp, r2, r8, lsl #30
   166d4:	push	{r4, r5, r6, r7, lr}
   166d8:	sub	sp, sp, #60	; 0x3c
   166dc:	ldr	r4, [pc, #72]	; 1672c <__assert_fail@plt+0x5164>
   166e0:	mov	r6, r2
   166e4:	mov	r7, r3
   166e8:	ldr	ip, [r4]
   166ec:	mov	r5, r0
   166f0:	add	r0, sp, #4
   166f4:	str	ip, [sp, #52]	; 0x34
   166f8:	bl	14828 <__assert_fail@plt+0x3260>
   166fc:	add	r3, sp, #4
   16700:	mov	r2, r7
   16704:	mov	r1, r6
   16708:	mov	r0, r5
   1670c:	bl	161b0 <__assert_fail@plt+0x4be8>
   16710:	ldr	r2, [sp, #52]	; 0x34
   16714:	ldr	r3, [r4]
   16718:	cmp	r2, r3
   1671c:	bne	16728 <__assert_fail@plt+0x5160>
   16720:	add	sp, sp, #60	; 0x3c
   16724:	pop	{r4, r5, r6, r7, pc}
   16728:	bl	112e0 <__stack_chk_fail@plt>
   1672c:	andeq	fp, r2, r8, lsl #30
   16730:	mov	r2, r1
   16734:	mov	r1, r0
   16738:	mov	r0, #0
   1673c:	b	1667c <__assert_fail@plt+0x50b4>
   16740:	mov	r3, r2
   16744:	mov	r2, r1
   16748:	mov	r1, r0
   1674c:	mov	r0, #0
   16750:	b	166d4 <__assert_fail@plt+0x510c>
   16754:	push	{r4, r5, r6, r7, r8, r9, lr}
   16758:	mov	r4, r2
   1675c:	ldr	lr, [pc, #128]	; 167e4 <__assert_fail@plt+0x521c>
   16760:	mov	r8, r0
   16764:	mov	r9, r1
   16768:	ldm	lr!, {r0, r1, r2, r3}
   1676c:	sub	sp, sp, #60	; 0x3c
   16770:	add	ip, sp, #4
   16774:	lsr	r6, r4, #5
   16778:	stmia	ip!, {r0, r1, r2, r3}
   1677c:	add	r7, sp, #12
   16780:	ldm	lr!, {r0, r1, r2, r3}
   16784:	and	r4, r4, #31
   16788:	ldr	r5, [pc, #88]	; 167e8 <__assert_fail@plt+0x5220>
   1678c:	stmia	ip!, {r0, r1, r2, r3}
   16790:	ldm	lr, {r0, r1, r2, r3}
   16794:	stm	ip, {r0, r1, r2, r3}
   16798:	mov	r2, r9
   1679c:	ldr	r3, [r7, r6, lsl #2]
   167a0:	ldr	ip, [r5]
   167a4:	mov	r1, r8
   167a8:	mvn	r0, r3, lsr r4
   167ac:	and	r0, r0, #1
   167b0:	str	ip, [sp, #52]	; 0x34
   167b4:	eor	r4, r3, r0, lsl r4
   167b8:	add	r3, sp, #4
   167bc:	mov	r0, #0
   167c0:	str	r4, [r7, r6, lsl #2]
   167c4:	bl	161b0 <__assert_fail@plt+0x4be8>
   167c8:	ldr	r2, [sp, #52]	; 0x34
   167cc:	ldr	r3, [r5]
   167d0:	cmp	r2, r3
   167d4:	bne	167e0 <__assert_fail@plt+0x5218>
   167d8:	add	sp, sp, #60	; 0x3c
   167dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   167e0:	bl	112e0 <__stack_chk_fail@plt>
   167e4:	andeq	ip, r2, r0, ror #5
   167e8:	andeq	fp, r2, r8, lsl #30
   167ec:	mov	r2, r1
   167f0:	mvn	r1, #0
   167f4:	b	16754 <__assert_fail@plt+0x518c>
   167f8:	mov	r2, #58	; 0x3a
   167fc:	mvn	r1, #0
   16800:	b	16754 <__assert_fail@plt+0x518c>
   16804:	mov	r2, #58	; 0x3a
   16808:	b	16754 <__assert_fail@plt+0x518c>
   1680c:	push	{r4, r5, r6, r7, r8, lr}
   16810:	sub	sp, sp, #104	; 0x68
   16814:	ldr	r5, [pc, #120]	; 16894 <__assert_fail@plt+0x52cc>
   16818:	mov	r6, r0
   1681c:	mov	r0, sp
   16820:	ldr	r3, [r5]
   16824:	mov	r7, r2
   16828:	str	r3, [sp, #100]	; 0x64
   1682c:	bl	14828 <__assert_fail@plt+0x3260>
   16830:	mov	ip, sp
   16834:	add	lr, sp, #52	; 0x34
   16838:	ldm	ip!, {r0, r1, r2, r3}
   1683c:	stmia	lr!, {r0, r1, r2, r3}
   16840:	ldm	ip!, {r0, r1, r2, r3}
   16844:	ldr	r8, [sp, #64]	; 0x40
   16848:	stmia	lr!, {r0, r1, r2, r3}
   1684c:	mvn	r4, r8
   16850:	ldm	ip, {r0, r1, r2, r3}
   16854:	and	ip, r4, #67108864	; 0x4000000
   16858:	eor	ip, ip, r8
   1685c:	str	ip, [sp, #64]	; 0x40
   16860:	stm	lr, {r0, r1, r2, r3}
   16864:	add	r3, sp, #52	; 0x34
   16868:	mvn	r2, #0
   1686c:	mov	r1, r7
   16870:	mov	r0, r6
   16874:	bl	161b0 <__assert_fail@plt+0x4be8>
   16878:	ldr	r2, [sp, #100]	; 0x64
   1687c:	ldr	r3, [r5]
   16880:	cmp	r2, r3
   16884:	bne	16890 <__assert_fail@plt+0x52c8>
   16888:	add	sp, sp, #104	; 0x68
   1688c:	pop	{r4, r5, r6, r7, r8, pc}
   16890:	bl	112e0 <__stack_chk_fail@plt>
   16894:	andeq	fp, r2, r8, lsl #30
   16898:	push	{r4, r5, r6, r7, r8, r9, lr}
   1689c:	mov	r6, r1
   168a0:	ldr	lr, [pc, #132]	; 1692c <__assert_fail@plt+0x5364>
   168a4:	mov	r5, r2
   168a8:	mov	r8, r0
   168ac:	mov	r9, r3
   168b0:	ldm	lr!, {r0, r1, r2, r3}
   168b4:	sub	sp, sp, #60	; 0x3c
   168b8:	add	ip, sp, #4
   168bc:	ldr	r4, [pc, #108]	; 16930 <__assert_fail@plt+0x5368>
   168c0:	stmia	ip!, {r0, r1, r2, r3}
   168c4:	mov	r7, #10
   168c8:	ldm	lr!, {r0, r1, r2, r3}
   168cc:	cmp	r5, #0
   168d0:	cmpne	r6, #0
   168d4:	str	r7, [sp, #4]
   168d8:	stmia	ip!, {r0, r1, r2, r3}
   168dc:	ldm	lr, {r0, r1, r2, r3}
   168e0:	ldr	lr, [r4]
   168e4:	stm	ip, {r0, r1, r2, r3}
   168e8:	str	lr, [sp, #52]	; 0x34
   168ec:	beq	16928 <__assert_fail@plt+0x5360>
   168f0:	add	r3, sp, #4
   168f4:	ldr	r2, [sp, #88]	; 0x58
   168f8:	mov	r1, r9
   168fc:	mov	r0, r8
   16900:	str	r6, [sp, #44]	; 0x2c
   16904:	str	r5, [sp, #48]	; 0x30
   16908:	bl	161b0 <__assert_fail@plt+0x4be8>
   1690c:	ldr	r2, [sp, #52]	; 0x34
   16910:	ldr	r3, [r4]
   16914:	cmp	r2, r3
   16918:	bne	16924 <__assert_fail@plt+0x535c>
   1691c:	add	sp, sp, #60	; 0x3c
   16920:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16924:	bl	112e0 <__stack_chk_fail@plt>
   16928:	bl	115b0 <abort@plt>
   1692c:	andeq	ip, r2, r0, ror #5
   16930:	andeq	fp, r2, r8, lsl #30
   16934:	push	{lr}		; (str lr, [sp, #-4]!)
   16938:	sub	sp, sp, #12
   1693c:	mvn	ip, #0
   16940:	str	ip, [sp]
   16944:	bl	16898 <__assert_fail@plt+0x52d0>
   16948:	add	sp, sp, #12
   1694c:	pop	{pc}		; (ldr pc, [sp], #4)
   16950:	push	{lr}		; (str lr, [sp, #-4]!)
   16954:	sub	sp, sp, #12
   16958:	mvn	ip, #0
   1695c:	mov	r3, r2
   16960:	str	ip, [sp]
   16964:	mov	r2, r1
   16968:	mov	r1, r0
   1696c:	mov	r0, #0
   16970:	bl	16898 <__assert_fail@plt+0x52d0>
   16974:	add	sp, sp, #12
   16978:	pop	{pc}		; (ldr pc, [sp], #4)
   1697c:	push	{lr}		; (str lr, [sp, #-4]!)
   16980:	sub	sp, sp, #12
   16984:	str	r3, [sp]
   16988:	mov	r3, r2
   1698c:	mov	r2, r1
   16990:	mov	r1, r0
   16994:	mov	r0, #0
   16998:	bl	16898 <__assert_fail@plt+0x52d0>
   1699c:	add	sp, sp, #12
   169a0:	pop	{pc}		; (ldr pc, [sp], #4)
   169a4:	ldr	r3, [pc]	; 169ac <__assert_fail@plt+0x53e4>
   169a8:	b	161b0 <__assert_fail@plt+0x4be8>
   169ac:	andeq	ip, r2, ip, ror r1
   169b0:	mov	r2, r1
   169b4:	ldr	r3, [pc, #8]	; 169c4 <__assert_fail@plt+0x53fc>
   169b8:	mov	r1, r0
   169bc:	mov	r0, #0
   169c0:	b	161b0 <__assert_fail@plt+0x4be8>
   169c4:	andeq	ip, r2, ip, ror r1
   169c8:	ldr	r3, [pc, #4]	; 169d4 <__assert_fail@plt+0x540c>
   169cc:	mvn	r2, #0
   169d0:	b	161b0 <__assert_fail@plt+0x4be8>
   169d4:	andeq	ip, r2, ip, ror r1
   169d8:	mov	r1, r0
   169dc:	ldr	r3, [pc, #8]	; 169ec <__assert_fail@plt+0x5424>
   169e0:	mvn	r2, #0
   169e4:	mov	r0, #0
   169e8:	b	161b0 <__assert_fail@plt+0x4be8>
   169ec:	andeq	ip, r2, ip, ror r1
   169f0:	push	{r4, r5, r6, lr}
   169f4:	mov	r6, r0
   169f8:	mov	r0, #24
   169fc:	bl	17c94 <__assert_fail@plt+0x66cc>
   16a00:	mov	r4, #0
   16a04:	mov	r5, #0
   16a08:	str	r6, [r0]
   16a0c:	strd	r4, [r0, #16]
   16a10:	strd	r4, [r0, #8]
   16a14:	pop	{r4, r5, r6, pc}
   16a18:	push	{r4, lr}
   16a1c:	bl	16cf0 <__assert_fail@plt+0x5728>
   16a20:	subs	r4, r0, #0
   16a24:	beq	16a48 <__assert_fail@plt+0x5480>
   16a28:	mov	r0, #24
   16a2c:	bl	17c94 <__assert_fail@plt+0x66cc>
   16a30:	mov	r2, #0
   16a34:	mov	r3, #0
   16a38:	str	r4, [r0]
   16a3c:	strd	r2, [r0, #16]
   16a40:	strd	r2, [r0, #8]
   16a44:	pop	{r4, pc}
   16a48:	mov	r0, r4
   16a4c:	pop	{r4, pc}
   16a50:	ldr	r0, [r0]
   16a54:	bx	lr
   16a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a5c:	sub	sp, sp, #60	; 0x3c
   16a60:	mov	r9, r3
   16a64:	adds	r3, r2, #1
   16a68:	str	r3, [sp, #16]
   16a6c:	adc	r3, r9, #0
   16a70:	str	r3, [sp, #20]
   16a74:	ldr	r3, [pc, #420]	; 16c20 <__assert_fail@plt+0x5658>
   16a78:	mov	r8, r2
   16a7c:	ldr	r2, [r0]
   16a80:	ldr	r3, [r3]
   16a84:	str	r0, [sp, #36]	; 0x24
   16a88:	str	r2, [sp, #32]
   16a8c:	ldrd	r6, [r0, #8]
   16a90:	ldrd	r4, [r0, #16]
   16a94:	str	r3, [sp, #52]	; 0x34
   16a98:	strd	r8, [sp]
   16a9c:	b	16b20 <__assert_fail@plt+0x5558>
   16aa0:	ldrd	r2, [sp]
   16aa4:	cmp	r5, r3
   16aa8:	cmpeq	r4, r2
   16aac:	beq	16bc4 <__assert_fail@plt+0x55fc>
   16ab0:	ldrd	r2, [sp]
   16ab4:	ldr	r9, [sp, #16]
   16ab8:	ldr	r8, [sp, #20]
   16abc:	subs	r0, r4, r2
   16ac0:	sbc	r1, r5, r3
   16ac4:	mov	r2, r9
   16ac8:	mov	r3, r8
   16acc:	bl	19620 <__assert_fail@plt+0x8058>
   16ad0:	mov	fp, r3
   16ad4:	subs	r3, r4, r2
   16ad8:	str	r3, [sp, #8]
   16adc:	sbc	r3, r5, fp
   16ae0:	strd	r0, [sp, #24]
   16ae4:	str	r3, [sp, #12]
   16ae8:	mov	sl, r2
   16aec:	mov	r3, r8
   16af0:	mov	r2, r9
   16af4:	mov	r0, r6
   16af8:	mov	r1, r7
   16afc:	bl	19620 <__assert_fail@plt+0x8058>
   16b00:	ldrd	r8, [sp, #8]
   16b04:	cmp	r7, r9
   16b08:	cmpeq	r6, r8
   16b0c:	bls	16bfc <__assert_fail@plt+0x5634>
   16b10:	subs	r4, sl, #1
   16b14:	mov	r6, r2
   16b18:	sbc	r5, fp, #0
   16b1c:	mov	r7, r3
   16b20:	ldrd	r2, [sp]
   16b24:	cmp	r5, r3
   16b28:	cmpeq	r4, r2
   16b2c:	bcs	16aa0 <__assert_fail@plt+0x54d8>
   16b30:	ldrd	r8, [sp]
   16b34:	mov	r0, r4
   16b38:	mov	r1, r5
   16b3c:	mov	r2, #0
   16b40:	lsl	r3, r1, #8
   16b44:	lsl	ip, r0, #8
   16b48:	orr	r3, r3, r0, lsr #24
   16b4c:	adds	r0, ip, #255	; 0xff
   16b50:	adc	r1, r3, #0
   16b54:	cmp	r9, r1
   16b58:	cmpeq	r8, r0
   16b5c:	add	r2, r2, #1
   16b60:	bhi	16b40 <__assert_fail@plt+0x5578>
   16b64:	add	r1, sp, #44	; 0x2c
   16b68:	ldr	r0, [sp, #32]
   16b6c:	bl	16f6c <__assert_fail@plt+0x59a4>
   16b70:	add	ip, sp, #44	; 0x2c
   16b74:	ldrb	sl, [ip], #1
   16b78:	lsl	r0, r7, #8
   16b7c:	lsl	r1, r6, #8
   16b80:	orr	r0, r0, r6, lsr #24
   16b84:	lsl	r2, r5, #8
   16b88:	adds	r6, sl, r1
   16b8c:	mov	fp, #0
   16b90:	lsl	r1, r4, #8
   16b94:	orr	r2, r2, r4, lsr #24
   16b98:	adc	r7, fp, r0
   16b9c:	adds	r4, r1, #255	; 0xff
   16ba0:	adc	r5, r2, #0
   16ba4:	cmp	r9, r5
   16ba8:	cmpeq	r8, r4
   16bac:	bhi	16b74 <__assert_fail@plt+0x55ac>
   16bb0:	strd	r8, [sp]
   16bb4:	ldrd	r2, [sp]
   16bb8:	cmp	r5, r3
   16bbc:	cmpeq	r4, r2
   16bc0:	bne	16ab0 <__assert_fail@plt+0x54e8>
   16bc4:	ldr	r1, [sp, #36]	; 0x24
   16bc8:	mov	r2, #0
   16bcc:	mov	r3, #0
   16bd0:	strd	r2, [r1, #16]
   16bd4:	strd	r2, [r1, #8]
   16bd8:	ldr	r3, [pc, #64]	; 16c20 <__assert_fail@plt+0x5658>
   16bdc:	ldr	r2, [sp, #52]	; 0x34
   16be0:	mov	r0, r6
   16be4:	ldr	r3, [r3]
   16be8:	mov	r1, r7
   16bec:	cmp	r2, r3
   16bf0:	bne	16c1c <__assert_fail@plt+0x5654>
   16bf4:	add	sp, sp, #60	; 0x3c
   16bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bfc:	mov	r7, r3
   16c00:	ldr	r3, [sp, #36]	; 0x24
   16c04:	mov	r6, r2
   16c08:	strd	r0, [r3, #8]
   16c0c:	mov	r1, r3
   16c10:	ldrd	r2, [sp, #24]
   16c14:	strd	r2, [r1, #16]
   16c18:	b	16bd8 <__assert_fail@plt+0x5610>
   16c1c:	bl	112e0 <__stack_chk_fail@plt>
   16c20:	andeq	fp, r2, r8, lsl #30
   16c24:	push	{r4, lr}
   16c28:	mvn	r2, #0
   16c2c:	mov	r4, r0
   16c30:	mov	r1, #24
   16c34:	bl	11508 <__explicit_bzero_chk@plt>
   16c38:	mov	r0, r4
   16c3c:	pop	{r4, lr}
   16c40:	b	11274 <free@plt>
   16c44:	push	{r4, r5, r6, r7, r8, lr}
   16c48:	mov	r4, r0
   16c4c:	ldr	r0, [r0]
   16c50:	bl	170a4 <__assert_fail@plt+0x5adc>
   16c54:	mov	r6, r0
   16c58:	bl	11448 <__errno_location@plt>
   16c5c:	mvn	r2, #0
   16c60:	mov	r1, #24
   16c64:	ldr	r7, [r0]
   16c68:	mov	r5, r0
   16c6c:	mov	r0, r4
   16c70:	bl	11508 <__explicit_bzero_chk@plt>
   16c74:	mov	r0, r4
   16c78:	bl	11274 <free@plt>
   16c7c:	str	r7, [r5]
   16c80:	mov	r0, r6
   16c84:	pop	{r4, r5, r6, r7, r8, pc}
   16c88:	subs	r5, r0, #0
   16c8c:	push	{r7, lr}
   16c90:	beq	16ce0 <__assert_fail@plt+0x5718>
   16c94:	ldr	r3, [pc, #72]	; 16ce4 <__assert_fail@plt+0x571c>
   16c98:	ldr	r6, [r3]
   16c9c:	bl	11448 <__errno_location@plt>
   16ca0:	mov	r2, #5
   16ca4:	ldr	r4, [r0]
   16ca8:	cmp	r4, #0
   16cac:	moveq	r0, r4
   16cb0:	ldreq	r1, [pc, #48]	; 16ce8 <__assert_fail@plt+0x5720>
   16cb4:	ldrne	r1, [pc, #48]	; 16cec <__assert_fail@plt+0x5724>
   16cb8:	movne	r0, #0
   16cbc:	bl	112d4 <dcgettext@plt>
   16cc0:	mov	r7, r0
   16cc4:	mov	r0, r5
   16cc8:	bl	169d8 <__assert_fail@plt+0x5410>
   16ccc:	mov	r2, r7
   16cd0:	mov	r1, r4
   16cd4:	mov	r3, r0
   16cd8:	mov	r0, r6
   16cdc:	bl	113a0 <error@plt>
   16ce0:	bl	115b0 <abort@plt>
   16ce4:	andeq	ip, r2, r8, ror #2
   16ce8:	andeq	sl, r1, r0, lsl #26
   16cec:	andeq	sl, r1, r0, lsl sp
   16cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf4:	sub	sp, sp, #20
   16cf8:	ldr	r6, [pc, #576]	; 16f40 <__assert_fail@plt+0x5978>
   16cfc:	subs	r7, r1, #0
   16d00:	ldr	r3, [r6]
   16d04:	str	r3, [sp, #12]
   16d08:	beq	16df4 <__assert_fail@plt+0x582c>
   16d0c:	cmp	r0, #0
   16d10:	mov	r5, r0
   16d14:	beq	16d80 <__assert_fail@plt+0x57b8>
   16d18:	ldr	r1, [pc, #548]	; 16f44 <__assert_fail@plt+0x597c>
   16d1c:	bl	18e5c <__assert_fail@plt+0x7894>
   16d20:	subs	r8, r0, #0
   16d24:	moveq	r4, r8
   16d28:	beq	16d64 <__assert_fail@plt+0x579c>
   16d2c:	ldr	r0, [pc, #532]	; 16f48 <__assert_fail@plt+0x5980>
   16d30:	bl	17c94 <__assert_fail@plt+0x66cc>
   16d34:	ldr	r2, [pc, #528]	; 16f4c <__assert_fail@plt+0x5984>
   16d38:	cmp	r7, #2048	; 0x800
   16d3c:	movcc	r3, r7
   16d40:	movcs	r3, #2048	; 0x800
   16d44:	mov	r4, r0
   16d48:	str	r8, [r0]
   16d4c:	str	r5, [r0, #8]
   16d50:	add	r1, r4, #12
   16d54:	str	r2, [r4, #4]
   16d58:	mov	r0, r8
   16d5c:	mov	r2, #0
   16d60:	bl	1146c <setvbuf@plt>
   16d64:	ldr	r2, [sp, #12]
   16d68:	ldr	r3, [r6]
   16d6c:	mov	r0, r4
   16d70:	cmp	r2, r3
   16d74:	bne	16ec8 <__assert_fail@plt+0x5900>
   16d78:	add	sp, sp, #20
   16d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d80:	ldr	r0, [pc, #448]	; 16f48 <__assert_fail@plt+0x5980>
   16d84:	bl	17c94 <__assert_fail@plt+0x66cc>
   16d88:	ldr	r3, [pc, #444]	; 16f4c <__assert_fail@plt+0x5984>
   16d8c:	mov	r1, r5
   16d90:	mov	r4, r0
   16d94:	str	r5, [r0]
   16d98:	str	r5, [r0, #8]
   16d9c:	str	r5, [r0, #12]
   16da0:	str	r3, [r0, #4]
   16da4:	ldr	r0, [pc, #420]	; 16f50 <__assert_fail@plt+0x5988>
   16da8:	bl	113ac <open64@plt>
   16dac:	add	r8, r4, #16
   16db0:	subs	r9, r0, #0
   16db4:	blt	16e10 <__assert_fail@plt+0x5848>
   16db8:	cmp	r7, #1024	; 0x400
   16dbc:	movcc	r2, r7
   16dc0:	movcs	r2, #1024	; 0x400
   16dc4:	ldr	r3, [pc, #392]	; 16f54 <__assert_fail@plt+0x598c>
   16dc8:	mov	r1, r8
   16dcc:	bl	11244 <__read_chk@plt>
   16dd0:	ldr	sl, [pc, #384]	; 16f58 <__assert_fail@plt+0x5990>
   16dd4:	mov	r7, r0
   16dd8:	mov	r0, r9
   16ddc:	bl	115bc <close@plt>
   16de0:	cmp	r7, sl
   16de4:	ble	16ecc <__assert_fail@plt+0x5904>
   16de8:	mov	r0, r8
   16dec:	bl	172f4 <__assert_fail@plt+0x5d2c>
   16df0:	b	16d64 <__assert_fail@plt+0x579c>
   16df4:	ldr	r0, [pc, #332]	; 16f48 <__assert_fail@plt+0x5980>
   16df8:	bl	17c94 <__assert_fail@plt+0x66cc>
   16dfc:	ldr	r3, [pc, #328]	; 16f4c <__assert_fail@plt+0x5984>
   16e00:	mov	r4, r0
   16e04:	str	r7, [r0]
   16e08:	stmib	r0, {r3, r7}
   16e0c:	b	16d64 <__assert_fail@plt+0x579c>
   16e10:	add	r7, sp, #4
   16e14:	mov	r1, r5
   16e18:	mov	r0, r7
   16e1c:	bl	11370 <gettimeofday@plt>
   16e20:	mov	r3, r7
   16e24:	mov	fp, #12
   16e28:	ldm	r3!, {r0, r1}
   16e2c:	str	r0, [r4, #16]
   16e30:	str	r1, [r8, #4]
   16e34:	bl	1140c <getpid@plt>
   16e38:	str	r0, [sp, #4]
   16e3c:	str	r0, [r4, #24]
   16e40:	rsb	r5, fp, #1024	; 0x400
   16e44:	cmp	r5, #4
   16e48:	movcs	r5, #4
   16e4c:	bl	11538 <getppid@plt>
   16e50:	ldr	sl, [pc, #256]	; 16f58 <__assert_fail@plt+0x5990>
   16e54:	mov	r2, r5
   16e58:	add	r9, r5, fp
   16e5c:	mov	r1, r7
   16e60:	str	r0, [sp, #4]
   16e64:	add	r0, r8, fp
   16e68:	bl	1128c <memcpy@plt>
   16e6c:	cmp	r9, sl
   16e70:	bhi	16de8 <__assert_fail@plt+0x5820>
   16e74:	rsb	r5, r9, #1024	; 0x400
   16e78:	cmp	r5, #4
   16e7c:	movcs	r5, #4
   16e80:	bl	1125c <getuid@plt>
   16e84:	add	fp, r9, r5
   16e88:	mov	r2, r5
   16e8c:	mov	r1, r7
   16e90:	str	r0, [sp, #4]
   16e94:	add	r0, r8, r9
   16e98:	bl	1128c <memcpy@plt>
   16e9c:	cmp	fp, sl
   16ea0:	bhi	16de8 <__assert_fail@plt+0x5820>
   16ea4:	bl	11478 <getgid@plt>
   16ea8:	rsb	r2, fp, #1024	; 0x400
   16eac:	cmp	r2, #4
   16eb0:	mov	r1, r7
   16eb4:	movcs	r2, #4
   16eb8:	str	r0, [sp, #4]
   16ebc:	add	r0, r8, fp
   16ec0:	bl	1128c <memcpy@plt>
   16ec4:	b	16de8 <__assert_fail@plt+0x5820>
   16ec8:	bl	112e0 <__stack_chk_fail@plt>
   16ecc:	bic	r3, r7, r7, asr #31
   16ed0:	rsb	r9, r3, #1024	; 0x400
   16ed4:	cmp	r9, #8
   16ed8:	add	r7, sp, #4
   16edc:	movcs	r9, #8
   16ee0:	mov	r1, r5
   16ee4:	add	fp, r8, r3
   16ee8:	mov	r0, r7
   16eec:	add	r5, r9, r3
   16ef0:	bl	11370 <gettimeofday@plt>
   16ef4:	mov	r2, r9
   16ef8:	mov	r1, r7
   16efc:	mov	r0, fp
   16f00:	bl	1128c <memcpy@plt>
   16f04:	cmp	r5, sl
   16f08:	bgt	16de8 <__assert_fail@plt+0x5820>
   16f0c:	rsb	r9, r5, #1024	; 0x400
   16f10:	cmp	r9, #4
   16f14:	movcs	r9, #4
   16f18:	bl	1140c <getpid@plt>
   16f1c:	add	fp, r9, r5
   16f20:	mov	r2, r9
   16f24:	mov	r1, r7
   16f28:	str	r0, [sp, #4]
   16f2c:	add	r0, r8, r5
   16f30:	bl	1128c <memcpy@plt>
   16f34:	cmp	fp, sl
   16f38:	bls	16e40 <__assert_fail@plt+0x5878>
   16f3c:	b	16de8 <__assert_fail@plt+0x5820>
   16f40:	andeq	fp, r2, r8, lsl #30
   16f44:	andeq	sl, r1, r0, lsr sp
   16f48:	andeq	r0, r0, ip, lsl r8
   16f4c:	andeq	r6, r1, r8, lsl #25
   16f50:	andeq	sl, r1, r0, lsr #26
   16f54:	andeq	r0, r0, ip, lsl #16
   16f58:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16f5c:	str	r1, [r0, #4]
   16f60:	bx	lr
   16f64:	str	r1, [r0, #8]
   16f68:	bx	lr
   16f6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f70:	mov	r6, r0
   16f74:	ldr	r7, [r0]
   16f78:	mov	r5, r1
   16f7c:	cmp	r7, #0
   16f80:	mov	r4, r2
   16f84:	beq	16fd8 <__assert_fail@plt+0x5a10>
   16f88:	bl	11448 <__errno_location@plt>
   16f8c:	mov	r8, r0
   16f90:	mov	r3, r7
   16f94:	mov	r2, r4
   16f98:	mov	r0, r5
   16f9c:	mov	r1, #1
   16fa0:	bl	11568 <fread_unlocked@plt>
   16fa4:	ldr	r3, [r8]
   16fa8:	subs	r4, r4, r0
   16fac:	add	r5, r5, r0
   16fb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fb4:	ldm	r6, {r1, r2}
   16fb8:	ldr	r0, [r6, #8]
   16fbc:	ldr	r1, [r1]
   16fc0:	tst	r1, #32
   16fc4:	moveq	r3, #0
   16fc8:	str	r3, [r8]
   16fcc:	blx	r2
   16fd0:	ldr	r7, [r6]
   16fd4:	b	16f90 <__assert_fail@plt+0x59c8>
   16fd8:	mov	r8, r0
   16fdc:	ldr	r7, [r8, #12]!
   16fe0:	cmp	r2, r7
   16fe4:	add	r8, r8, #1040	; 0x410
   16fe8:	addhi	r9, r0, #16
   16fec:	bls	17094 <__assert_fail@plt+0x5acc>
   16ff0:	rsb	r1, r7, #1024	; 0x400
   16ff4:	add	r1, r8, r1
   16ff8:	mov	r0, r5
   16ffc:	mov	r2, r7
   17000:	add	r5, r5, r7
   17004:	bl	1128c <memcpy@plt>
   17008:	tst	r5, #3
   1700c:	mov	r1, r8
   17010:	mov	r0, r9
   17014:	sub	r4, r4, r7
   17018:	beq	17030 <__assert_fail@plt+0x5a68>
   1701c:	bl	170d8 <__assert_fail@plt+0x5b10>
   17020:	cmp	r4, #1024	; 0x400
   17024:	mov	r7, #1024	; 0x400
   17028:	bhi	16ff0 <__assert_fail@plt+0x5a28>
   1702c:	b	17074 <__assert_fail@plt+0x5aac>
   17030:	ldr	r7, [pc, #104]	; 170a0 <__assert_fail@plt+0x5ad8>
   17034:	cmp	r4, r7
   17038:	bhi	17048 <__assert_fail@plt+0x5a80>
   1703c:	b	17068 <__assert_fail@plt+0x5aa0>
   17040:	cmp	r4, r7
   17044:	bls	17068 <__assert_fail@plt+0x5aa0>
   17048:	mov	r1, r5
   1704c:	mov	r0, r9
   17050:	bl	170d8 <__assert_fail@plt+0x5b10>
   17054:	subs	r4, r4, #1024	; 0x400
   17058:	add	r5, r5, #1024	; 0x400
   1705c:	bne	17040 <__assert_fail@plt+0x5a78>
   17060:	str	r4, [r6, #12]
   17064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17068:	mov	r0, r9
   1706c:	mov	r1, r8
   17070:	bl	170d8 <__assert_fail@plt+0x5b10>
   17074:	mov	r7, #1024	; 0x400
   17078:	mov	r2, r4
   1707c:	mov	r1, r8
   17080:	mov	r0, r5
   17084:	sub	r4, r7, r4
   17088:	bl	1128c <memcpy@plt>
   1708c:	str	r4, [r6, #12]
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17094:	rsb	r3, r7, #1024	; 0x400
   17098:	add	r8, r8, r3
   1709c:	b	17078 <__assert_fail@plt+0x5ab0>
   170a0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   170a4:	push	{r4, r5, r6, lr}
   170a8:	mvn	r2, #0
   170ac:	ldr	r5, [r0]
   170b0:	mov	r4, r0
   170b4:	ldr	r1, [pc, #24]	; 170d4 <__assert_fail@plt+0x5b0c>
   170b8:	bl	11508 <__explicit_bzero_chk@plt>
   170bc:	mov	r0, r4
   170c0:	bl	11274 <free@plt>
   170c4:	subs	r0, r5, #0
   170c8:	popeq	{r4, r5, r6, pc}
   170cc:	pop	{r4, r5, r6, lr}
   170d0:	b	18a7c <__assert_fail@plt+0x74b4>
   170d4:	andeq	r0, r0, ip, lsl r8
   170d8:	push	{r4, r5, r6, r7, lr}
   170dc:	add	ip, r1, #16
   170e0:	ldr	r5, [r0, #1032]	; 0x408
   170e4:	ldr	r4, [r0, #1028]	; 0x404
   170e8:	add	r5, r5, #1
   170ec:	ldr	r3, [r0, #1024]	; 0x400
   170f0:	add	r6, r4, r5
   170f4:	add	r2, r0, #16
   170f8:	add	lr, r1, #528	; 0x210
   170fc:	str	r5, [r0, #1032]	; 0x408
   17100:	ldr	r5, [r2, #-16]
   17104:	ldr	r7, [r2, #496]	; 0x1f0
   17108:	and	r4, r5, #1020	; 0x3fc
   1710c:	eor	r3, r3, r3, lsl #13
   17110:	ldr	r4, [r0, r4]
   17114:	add	r3, r3, r7
   17118:	add	r4, r3, r4
   1711c:	add	r4, r4, r6
   17120:	str	r4, [r2, #-16]
   17124:	lsr	r4, r4, #8
   17128:	and	r4, r4, #1020	; 0x3fc
   1712c:	eor	r3, r3, r3, lsr #6
   17130:	ldr	r4, [r0, r4]
   17134:	add	ip, ip, #16
   17138:	add	r5, r5, r4
   1713c:	str	r5, [ip, #-32]	; 0xffffffe0
   17140:	ldr	r6, [r2, #-12]
   17144:	ldr	r7, [r2, #500]	; 0x1f4
   17148:	and	r4, r6, #1020	; 0x3fc
   1714c:	add	r3, r3, r7
   17150:	ldr	r7, [r0, r4]
   17154:	eor	r4, r3, r3, lsl #2
   17158:	add	r3, r3, r7
   1715c:	add	r3, r3, r5
   17160:	str	r3, [r2, #-12]
   17164:	lsr	r3, r3, #8
   17168:	and	r3, r3, #1020	; 0x3fc
   1716c:	add	r2, r2, #16
   17170:	ldr	r3, [r0, r3]
   17174:	add	r6, r6, r3
   17178:	str	r6, [ip, #-28]	; 0xffffffe4
   1717c:	ldr	r5, [r2, #-24]	; 0xffffffe8
   17180:	ldr	r7, [r2, #488]	; 0x1e8
   17184:	and	r3, r5, #1020	; 0x3fc
   17188:	add	r4, r4, r7
   1718c:	ldr	r7, [r0, r3]
   17190:	eor	r3, r4, r4, lsr #16
   17194:	add	r4, r4, r7
   17198:	add	r4, r4, r6
   1719c:	str	r4, [r2, #-24]	; 0xffffffe8
   171a0:	lsr	r4, r4, #8
   171a4:	and	r4, r4, #1020	; 0x3fc
   171a8:	ldr	r4, [r0, r4]
   171ac:	add	r5, r5, r4
   171b0:	str	r5, [ip, #-24]	; 0xffffffe8
   171b4:	ldr	r6, [r2, #-20]	; 0xffffffec
   171b8:	ldr	r7, [r2, #492]	; 0x1ec
   171bc:	and	r4, r6, #1020	; 0x3fc
   171c0:	add	r3, r3, r7
   171c4:	ldr	r4, [r0, r4]
   171c8:	add	r4, r3, r4
   171cc:	add	r4, r4, r5
   171d0:	str	r4, [r2, #-20]	; 0xffffffec
   171d4:	lsr	r4, r4, #8
   171d8:	and	r4, r4, #1020	; 0x3fc
   171dc:	ldr	r4, [r0, r4]
   171e0:	add	r6, r6, r4
   171e4:	str	r6, [ip, #-20]	; 0xffffffec
   171e8:	cmp	ip, lr
   171ec:	bne	17100 <__assert_fail@plt+0x5b38>
   171f0:	add	r1, r1, #1040	; 0x410
   171f4:	add	r2, r0, #528	; 0x210
   171f8:	ldr	lr, [r2, #-16]
   171fc:	ldr	r5, [r2, #-528]	; 0xfffffdf0
   17200:	and	r4, lr, #1020	; 0x3fc
   17204:	eor	r3, r3, r3, lsl #13
   17208:	ldr	r4, [r0, r4]
   1720c:	add	r3, r3, r5
   17210:	add	r4, r3, r4
   17214:	add	r4, r4, r6
   17218:	str	r4, [r2, #-16]
   1721c:	lsr	r4, r4, #8
   17220:	and	r4, r4, #1020	; 0x3fc
   17224:	eor	r3, r3, r3, lsr #6
   17228:	ldr	r5, [r0, r4]
   1722c:	add	ip, ip, #16
   17230:	add	r5, lr, r5
   17234:	str	r5, [ip, #-32]	; 0xffffffe0
   17238:	ldr	r4, [r2, #-12]
   1723c:	ldr	r6, [r2, #-524]	; 0xfffffdf4
   17240:	and	lr, r4, #1020	; 0x3fc
   17244:	add	r3, r3, r6
   17248:	ldr	r6, [r0, lr]
   1724c:	eor	lr, r3, r3, lsl #2
   17250:	add	r3, r3, r6
   17254:	add	r3, r3, r5
   17258:	str	r3, [r2, #-12]
   1725c:	lsr	r3, r3, #8
   17260:	and	r3, r3, #1020	; 0x3fc
   17264:	add	r2, r2, #16
   17268:	ldr	r3, [r0, r3]
   1726c:	add	r4, r4, r3
   17270:	str	r4, [ip, #-28]	; 0xffffffe4
   17274:	ldr	r5, [r2, #-24]	; 0xffffffe8
   17278:	ldr	r6, [r2, #-536]	; 0xfffffde8
   1727c:	and	r3, r5, #1020	; 0x3fc
   17280:	add	lr, lr, r6
   17284:	ldr	r6, [r0, r3]
   17288:	eor	r3, lr, lr, lsr #16
   1728c:	add	lr, lr, r6
   17290:	add	lr, lr, r4
   17294:	str	lr, [r2, #-24]	; 0xffffffe8
   17298:	lsr	lr, lr, #8
   1729c:	and	lr, lr, #1020	; 0x3fc
   172a0:	ldr	lr, [r0, lr]
   172a4:	add	r5, r5, lr
   172a8:	str	r5, [ip, #-24]	; 0xffffffe8
   172ac:	ldr	r4, [r2, #-20]	; 0xffffffec
   172b0:	ldr	r6, [r2, #-532]	; 0xfffffdec
   172b4:	and	lr, r4, #1020	; 0x3fc
   172b8:	add	r3, r3, r6
   172bc:	ldr	lr, [r0, lr]
   172c0:	add	lr, r3, lr
   172c4:	add	lr, lr, r5
   172c8:	str	lr, [r2, #-20]	; 0xffffffec
   172cc:	lsr	lr, lr, #8
   172d0:	and	lr, lr, #1020	; 0x3fc
   172d4:	ldr	r6, [r0, lr]
   172d8:	add	r6, r4, r6
   172dc:	str	r6, [ip, #-20]	; 0xffffffec
   172e0:	cmp	r1, ip
   172e4:	bne	171f8 <__assert_fail@plt+0x5c30>
   172e8:	str	r3, [r0, #1024]	; 0x400
   172ec:	str	r6, [r0, #1028]	; 0x404
   172f0:	pop	{r4, r5, r6, r7, pc}
   172f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172f8:	mov	r2, r0
   172fc:	ldr	r8, [pc, #452]	; 174c8 <__assert_fail@plt+0x5f00>
   17300:	ldr	r7, [pc, #452]	; 174cc <__assert_fail@plt+0x5f04>
   17304:	ldr	r6, [pc, #452]	; 174d0 <__assert_fail@plt+0x5f08>
   17308:	ldr	r4, [pc, #452]	; 174d4 <__assert_fail@plt+0x5f0c>
   1730c:	ldr	lr, [pc, #452]	; 174d8 <__assert_fail@plt+0x5f10>
   17310:	ldr	ip, [pc, #452]	; 174dc <__assert_fail@plt+0x5f14>
   17314:	ldr	r1, [pc, #452]	; 174e0 <__assert_fail@plt+0x5f18>
   17318:	ldr	r9, [pc, #452]	; 174e4 <__assert_fail@plt+0x5f1c>
   1731c:	add	fp, r0, #1024	; 0x400
   17320:	mov	r3, r0
   17324:	ldm	r3, {r5, sl}
   17328:	add	r3, r3, #32
   1732c:	add	r1, r1, sl
   17330:	add	r9, r9, r5
   17334:	ldr	sl, [r3, #-24]	; 0xffffffe8
   17338:	ldr	r5, [r3, #-20]	; 0xffffffec
   1733c:	eor	r9, r9, r1, lsl #11
   17340:	add	ip, ip, sl
   17344:	add	r5, r9, r5
   17348:	ldr	sl, [r3, #-16]
   1734c:	add	lr, r5, lr
   17350:	add	r1, r1, ip
   17354:	ldr	r5, [r3, #-12]
   17358:	eor	r1, r1, ip, lsr #2
   1735c:	add	ip, ip, lr
   17360:	add	sl, r1, sl
   17364:	eor	ip, ip, lr, lsl #8
   17368:	add	r4, sl, r4
   1736c:	add	r5, ip, r5
   17370:	add	r6, r5, r6
   17374:	add	lr, lr, r4
   17378:	ldr	r5, [r3, #-8]
   1737c:	eor	lr, lr, r4, lsr #16
   17380:	ldr	sl, [r3, #-4]
   17384:	add	r4, r4, r6
   17388:	add	r5, lr, r5
   1738c:	eor	r4, r4, r6, lsl #10
   17390:	add	r7, r5, r7
   17394:	add	r6, r6, r7
   17398:	add	sl, r4, sl
   1739c:	add	r8, sl, r8
   173a0:	eor	r6, r6, r7, lsr #4
   173a4:	add	r9, r9, r6
   173a8:	add	r7, r7, r8
   173ac:	eor	r7, r7, r8, lsl #8
   173b0:	add	r8, r8, r9
   173b4:	eor	r8, r8, r9, lsr #9
   173b8:	add	r1, r1, r7
   173bc:	add	r9, r9, r1
   173c0:	add	ip, ip, r8
   173c4:	str	r4, [r3, #-16]
   173c8:	str	lr, [r3, #-20]	; 0xffffffec
   173cc:	str	r1, [r3, #-28]	; 0xffffffe4
   173d0:	str	r9, [r3, #-32]	; 0xffffffe0
   173d4:	str	ip, [r3, #-24]	; 0xffffffe8
   173d8:	str	r7, [r3, #-8]
   173dc:	str	r8, [r3, #-4]
   173e0:	str	r6, [r3, #-12]
   173e4:	cmp	fp, r3
   173e8:	bne	17324 <__assert_fail@plt+0x5d5c>
   173ec:	ldm	r2, {r3, r5}
   173f0:	ldr	sl, [r2, #24]
   173f4:	add	r2, r2, #32
   173f8:	add	r1, r1, r5
   173fc:	ldr	r5, [r2, #-24]	; 0xffffffe8
   17400:	add	r9, r9, r3
   17404:	ldr	r3, [r2, #-20]	; 0xffffffec
   17408:	add	ip, ip, r5
   1740c:	eor	r9, r9, r1, lsl #11
   17410:	ldr	r5, [r2, #-16]
   17414:	add	r3, r9, r3
   17418:	add	r1, r1, ip
   1741c:	add	lr, r3, lr
   17420:	eor	r1, r1, ip, lsr #2
   17424:	ldr	r3, [r2, #-12]
   17428:	add	ip, ip, lr
   1742c:	add	r5, r1, r5
   17430:	eor	ip, ip, lr, lsl #8
   17434:	add	r4, r5, r4
   17438:	add	r3, ip, r3
   1743c:	add	lr, lr, r4
   17440:	add	r6, r3, r6
   17444:	eor	lr, lr, r4, lsr #16
   17448:	ldr	r3, [r2, #-4]
   1744c:	add	r4, r4, r6
   17450:	add	sl, lr, sl
   17454:	eor	r4, r4, r6, lsl #10
   17458:	add	r7, sl, r7
   1745c:	add	r6, r6, r7
   17460:	add	r3, r4, r3
   17464:	add	r8, r3, r8
   17468:	eor	r6, r6, r7, lsr #4
   1746c:	add	r9, r9, r6
   17470:	add	r7, r7, r8
   17474:	eor	r7, r7, r8, lsl #8
   17478:	add	r8, r8, r9
   1747c:	eor	r8, r8, r9, lsr #9
   17480:	add	r1, r1, r7
   17484:	add	r9, r9, r1
   17488:	add	ip, ip, r8
   1748c:	str	r4, [r2, #-16]
   17490:	str	lr, [r2, #-20]	; 0xffffffec
   17494:	str	r1, [r2, #-28]	; 0xffffffe4
   17498:	str	r9, [r2, #-32]	; 0xffffffe0
   1749c:	str	ip, [r2, #-24]	; 0xffffffe8
   174a0:	str	r7, [r2, #-8]
   174a4:	str	r8, [r2, #-4]
   174a8:	str	r6, [r2, #-12]
   174ac:	cmp	fp, r2
   174b0:	bne	173ec <__assert_fail@plt+0x5e24>
   174b4:	mov	r3, #0
   174b8:	str	r3, [r0, #1032]	; 0x408
   174bc:	str	r3, [r0, #1028]	; 0x404
   174c0:	str	r3, [r0, #1024]	; 0x400
   174c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c8:	rsbcc	r9, r0, r9, lsl r1
   174cc:	strbtgt	lr, [pc], #2587	; 174d4 <__assert_fail@plt+0x5f0c>
   174d0:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   174d4:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   174d8:	svceq	0x00421ad8
   174dc:	tstgt	r6, #1200	; 0x4b0
   174e0:	ldrbls	r0, [r9, #89]	; 0x59
   174e4:	cmnne	r7, #360	; 0x168
   174e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174ec:	sub	sp, sp, #228	; 0xe4
   174f0:	ldr	r4, [pc, #508]	; 176f4 <__assert_fail@plt+0x612c>
   174f4:	ldr	lr, [sp, #264]	; 0x108
   174f8:	mov	fp, r0
   174fc:	ldr	ip, [r4]
   17500:	str	lr, [sp]
   17504:	str	ip, [sp, #220]	; 0xdc
   17508:	mov	r8, r1
   1750c:	mov	sl, r2
   17510:	mov	r7, r3
   17514:	bl	11490 <renameat2@plt>
   17518:	subs	r6, r0, #0
   1751c:	bge	17568 <__assert_fail@plt+0x5fa0>
   17520:	bl	11448 <__errno_location@plt>
   17524:	ldr	r5, [r0]
   17528:	mov	r9, r0
   1752c:	sub	r3, r5, #22
   17530:	bic	r3, r3, #16
   17534:	cmp	r5, #95	; 0x5f
   17538:	cmpne	r3, #0
   1753c:	movne	r5, #1
   17540:	moveq	r5, #0
   17544:	bne	17568 <__assert_fail@plt+0x5fa0>
   17548:	ldr	r3, [sp, #264]	; 0x108
   1754c:	cmp	r3, #0
   17550:	beq	175c0 <__assert_fail@plt+0x5ff8>
   17554:	bics	r3, r3, #1
   17558:	beq	17584 <__assert_fail@plt+0x5fbc>
   1755c:	mvn	r6, #0
   17560:	mov	r3, #95	; 0x5f
   17564:	str	r3, [r0]
   17568:	ldr	r1, [sp, #220]	; 0xdc
   1756c:	ldr	r3, [r4]
   17570:	mov	r0, r6
   17574:	cmp	r1, r3
   17578:	bne	176f0 <__assert_fail@plt+0x6128>
   1757c:	add	sp, sp, #228	; 0xe4
   17580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17584:	mov	r3, #256	; 0x100
   17588:	str	r3, [sp]
   1758c:	mov	r2, r7
   17590:	add	r3, sp, #112	; 0x70
   17594:	mov	r1, sl
   17598:	mov	r0, #3
   1759c:	bl	11310 <__fxstatat64@plt>
   175a0:	cmp	r0, #0
   175a4:	beq	176c0 <__assert_fail@plt+0x60f8>
   175a8:	ldr	r3, [r9]
   175ac:	cmp	r3, #75	; 0x4b
   175b0:	beq	176c0 <__assert_fail@plt+0x60f8>
   175b4:	cmp	r3, #2
   175b8:	bne	176b8 <__assert_fail@plt+0x60f0>
   175bc:	mov	r5, #1
   175c0:	mov	r0, r8
   175c4:	bl	11424 <strlen@plt>
   175c8:	mov	r6, r0
   175cc:	mov	r0, r7
   175d0:	bl	11424 <strlen@plt>
   175d4:	cmp	r0, #0
   175d8:	cmpne	r6, #0
   175dc:	beq	17684 <__assert_fail@plt+0x60bc>
   175e0:	add	r6, r8, r6
   175e4:	add	r0, r7, r0
   175e8:	ldrb	r2, [r6, #-1]
   175ec:	ldrb	r3, [r0, #-1]
   175f0:	cmp	r2, #47	; 0x2f
   175f4:	cmpne	r3, #47	; 0x2f
   175f8:	bne	17684 <__assert_fail@plt+0x60bc>
   175fc:	mov	r6, #256	; 0x100
   17600:	str	r6, [sp]
   17604:	add	r3, sp, #8
   17608:	mov	r2, r8
   1760c:	mov	r1, fp
   17610:	mov	r0, #3
   17614:	bl	11310 <__fxstatat64@plt>
   17618:	cmp	r0, #0
   1761c:	bne	176b8 <__assert_fail@plt+0x60f0>
   17620:	cmp	r5, #0
   17624:	beq	17648 <__assert_fail@plt+0x6080>
   17628:	ldr	r3, [sp, #24]
   1762c:	and	r3, r3, #61440	; 0xf000
   17630:	cmp	r3, #16384	; 0x4000
   17634:	beq	17684 <__assert_fail@plt+0x60bc>
   17638:	mov	r3, #2
   1763c:	str	r3, [r9]
   17640:	mvn	r6, #0
   17644:	b	17568 <__assert_fail@plt+0x5fa0>
   17648:	str	r6, [sp]
   1764c:	add	r3, sp, #112	; 0x70
   17650:	mov	r2, r7
   17654:	mov	r1, sl
   17658:	mov	r0, #3
   1765c:	bl	11310 <__fxstatat64@plt>
   17660:	cmp	r0, #0
   17664:	beq	176a0 <__assert_fail@plt+0x60d8>
   17668:	ldr	r3, [r9]
   1766c:	cmp	r3, #2
   17670:	bne	176b8 <__assert_fail@plt+0x60f0>
   17674:	ldr	r3, [sp, #24]
   17678:	and	r3, r3, #61440	; 0xf000
   1767c:	cmp	r3, #16384	; 0x4000
   17680:	bne	176b8 <__assert_fail@plt+0x60f0>
   17684:	mov	r3, r7
   17688:	mov	r2, sl
   1768c:	mov	r1, r8
   17690:	mov	r0, fp
   17694:	bl	11550 <renameat@plt>
   17698:	mov	r6, r0
   1769c:	b	17568 <__assert_fail@plt+0x5fa0>
   176a0:	ldr	r3, [sp, #128]	; 0x80
   176a4:	and	r3, r3, #61440	; 0xf000
   176a8:	cmp	r3, #16384	; 0x4000
   176ac:	beq	176d0 <__assert_fail@plt+0x6108>
   176b0:	mov	r3, #20
   176b4:	str	r3, [r9]
   176b8:	mvn	r6, #0
   176bc:	b	17568 <__assert_fail@plt+0x5fa0>
   176c0:	mov	r3, #17
   176c4:	str	r3, [r9]
   176c8:	mvn	r6, #0
   176cc:	b	17568 <__assert_fail@plt+0x5fa0>
   176d0:	ldr	r3, [sp, #24]
   176d4:	and	r3, r3, #61440	; 0xf000
   176d8:	cmp	r3, #16384	; 0x4000
   176dc:	beq	17684 <__assert_fail@plt+0x60bc>
   176e0:	mov	r3, #21
   176e4:	str	r3, [r9]
   176e8:	mvn	r6, #0
   176ec:	b	17568 <__assert_fail@plt+0x5fa0>
   176f0:	bl	112e0 <__stack_chk_fail@plt>
   176f4:	andeq	fp, r2, r8, lsl #30
   176f8:	cmp	r0, #2
   176fc:	push	{r4, r5, r6, r7, r8, lr}
   17700:	mov	r4, r0
   17704:	bls	17710 <__assert_fail@plt+0x6148>
   17708:	mov	r0, r4
   1770c:	pop	{r4, r5, r6, r7, r8, pc}
   17710:	bl	18f74 <__assert_fail@plt+0x79ac>
   17714:	mov	r7, r0
   17718:	bl	11448 <__errno_location@plt>
   1771c:	mov	r5, r0
   17720:	mov	r0, r4
   17724:	ldr	r6, [r5]
   17728:	mov	r4, r7
   1772c:	bl	115bc <close@plt>
   17730:	str	r6, [r5]
   17734:	mov	r0, r4
   17738:	pop	{r4, r5, r6, r7, r8, pc}
   1773c:	push	{r4, r5, r6, lr}
   17740:	sub	sp, sp, #32
   17744:	cmp	r1, #0
   17748:	mov	r5, r0
   1774c:	ldr	r4, [sp, #48]	; 0x30
   17750:	ldr	r6, [sp, #52]	; 0x34
   17754:	beq	177e4 <__assert_fail@plt+0x621c>
   17758:	strd	r2, [sp]
   1775c:	mov	r3, r1
   17760:	ldr	r2, [pc, #828]	; 17aa4 <__assert_fail@plt+0x64dc>
   17764:	mov	r1, #1
   17768:	bl	114c0 <__fprintf_chk@plt>
   1776c:	mov	r2, #5
   17770:	ldr	r1, [pc, #816]	; 17aa8 <__assert_fail@plt+0x64e0>
   17774:	mov	r0, #0
   17778:	bl	112d4 <dcgettext@plt>
   1777c:	ldr	r3, [pc, #808]	; 17aac <__assert_fail@plt+0x64e4>
   17780:	ldr	r2, [pc, #808]	; 17ab0 <__assert_fail@plt+0x64e8>
   17784:	str	r3, [sp]
   17788:	mov	r1, #1
   1778c:	mov	r3, r0
   17790:	mov	r0, r5
   17794:	bl	114c0 <__fprintf_chk@plt>
   17798:	ldr	r1, [pc, #788]	; 17ab4 <__assert_fail@plt+0x64ec>
   1779c:	mov	r2, #5
   177a0:	mov	r0, #0
   177a4:	bl	112d4 <dcgettext@plt>
   177a8:	mov	r1, r5
   177ac:	bl	11214 <fputs_unlocked@plt>
   177b0:	cmp	r6, #9
   177b4:	ldrls	pc, [pc, r6, lsl #2]
   177b8:	b	17a94 <__assert_fail@plt+0x64cc>
   177bc:	andeq	r7, r1, r0, lsr #21
   177c0:	andeq	r7, r1, r8, ror #16
   177c4:	muleq	r1, r4, r8
   177c8:	andeq	r7, r1, r8, asr #17
   177cc:	andeq	r7, r1, r4, lsl #18
   177d0:	andeq	r7, r1, r4, asr #18
   177d4:	andeq	r7, r1, ip, lsl #19
   177d8:	ldrdeq	r7, [r1], -ip
   177dc:	andeq	r7, r1, r4, lsr sl
   177e0:	strdeq	r7, [r1], -ip
   177e4:	str	r3, [sp]
   177e8:	mov	r1, #1
   177ec:	mov	r3, r2
   177f0:	ldr	r2, [pc, #704]	; 17ab8 <__assert_fail@plt+0x64f0>
   177f4:	bl	114c0 <__fprintf_chk@plt>
   177f8:	b	1776c <__assert_fail@plt+0x61a4>
   177fc:	ldr	r1, [pc, #696]	; 17abc <__assert_fail@plt+0x64f4>
   17800:	mov	r2, #5
   17804:	mov	r0, #0
   17808:	bl	112d4 <dcgettext@plt>
   1780c:	ldr	r2, [r4, #32]
   17810:	ldr	r3, [r4, #28]
   17814:	ldr	r1, [r4, #24]
   17818:	str	r2, [sp, #28]
   1781c:	ldr	r2, [r4, #20]
   17820:	str	r3, [sp, #24]
   17824:	ldr	r3, [r4, #16]
   17828:	str	r1, [sp, #20]
   1782c:	ldr	r1, [r4, #12]
   17830:	str	r2, [sp, #16]
   17834:	ldr	r2, [r4, #8]
   17838:	str	r3, [sp, #12]
   1783c:	ldr	r3, [r4, #4]
   17840:	str	r1, [sp, #8]
   17844:	str	r2, [sp, #4]
   17848:	str	r3, [sp]
   1784c:	mov	r1, #1
   17850:	ldr	r3, [r4]
   17854:	mov	r2, r0
   17858:	mov	r0, r5
   1785c:	bl	114c0 <__fprintf_chk@plt>
   17860:	add	sp, sp, #32
   17864:	pop	{r4, r5, r6, pc}
   17868:	mov	r2, #5
   1786c:	ldr	r1, [pc, #588]	; 17ac0 <__assert_fail@plt+0x64f8>
   17870:	mov	r0, #0
   17874:	bl	112d4 <dcgettext@plt>
   17878:	ldr	r3, [r4]
   1787c:	mov	r1, #1
   17880:	mov	r2, r0
   17884:	mov	r0, r5
   17888:	add	sp, sp, #32
   1788c:	pop	{r4, r5, r6, lr}
   17890:	b	114c0 <__fprintf_chk@plt>
   17894:	mov	r2, #5
   17898:	ldr	r1, [pc, #548]	; 17ac4 <__assert_fail@plt+0x64fc>
   1789c:	mov	r0, #0
   178a0:	bl	112d4 <dcgettext@plt>
   178a4:	ldr	r2, [r4, #4]
   178a8:	ldr	r3, [r4]
   178ac:	mov	r1, #1
   178b0:	str	r2, [sp, #48]	; 0x30
   178b4:	mov	r2, r0
   178b8:	mov	r0, r5
   178bc:	add	sp, sp, #32
   178c0:	pop	{r4, r5, r6, lr}
   178c4:	b	114c0 <__fprintf_chk@plt>
   178c8:	mov	r2, #5
   178cc:	ldr	r1, [pc, #500]	; 17ac8 <__assert_fail@plt+0x6500>
   178d0:	mov	r0, #0
   178d4:	bl	112d4 <dcgettext@plt>
   178d8:	ldr	r2, [r4, #8]
   178dc:	ldr	r3, [r4, #4]
   178e0:	mov	r1, #1
   178e4:	str	r2, [sp, #52]	; 0x34
   178e8:	str	r3, [sp, #48]	; 0x30
   178ec:	ldr	r3, [r4]
   178f0:	mov	r2, r0
   178f4:	mov	r0, r5
   178f8:	add	sp, sp, #32
   178fc:	pop	{r4, r5, r6, lr}
   17900:	b	114c0 <__fprintf_chk@plt>
   17904:	mov	r2, #5
   17908:	ldr	r1, [pc, #444]	; 17acc <__assert_fail@plt+0x6504>
   1790c:	mov	r0, #0
   17910:	bl	112d4 <dcgettext@plt>
   17914:	ldr	r1, [r4, #12]
   17918:	ldr	r2, [r4, #8]
   1791c:	ldr	r3, [r4, #4]
   17920:	str	r1, [sp, #8]
   17924:	str	r2, [sp, #4]
   17928:	str	r3, [sp]
   1792c:	mov	r1, #1
   17930:	ldr	r3, [r4]
   17934:	mov	r2, r0
   17938:	mov	r0, r5
   1793c:	bl	114c0 <__fprintf_chk@plt>
   17940:	b	17860 <__assert_fail@plt+0x6298>
   17944:	mov	r2, #5
   17948:	ldr	r1, [pc, #384]	; 17ad0 <__assert_fail@plt+0x6508>
   1794c:	mov	r0, #0
   17950:	bl	112d4 <dcgettext@plt>
   17954:	ldr	r3, [r4, #16]
   17958:	ldr	r1, [r4, #12]
   1795c:	ldr	r2, [r4, #8]
   17960:	str	r3, [sp, #12]
   17964:	ldr	r3, [r4, #4]
   17968:	str	r1, [sp, #8]
   1796c:	str	r2, [sp, #4]
   17970:	str	r3, [sp]
   17974:	mov	r1, #1
   17978:	ldr	r3, [r4]
   1797c:	mov	r2, r0
   17980:	mov	r0, r5
   17984:	bl	114c0 <__fprintf_chk@plt>
   17988:	b	17860 <__assert_fail@plt+0x6298>
   1798c:	mov	r2, #5
   17990:	ldr	r1, [pc, #316]	; 17ad4 <__assert_fail@plt+0x650c>
   17994:	mov	r0, #0
   17998:	bl	112d4 <dcgettext@plt>
   1799c:	ldr	r2, [r4, #20]
   179a0:	ldr	r3, [r4, #16]
   179a4:	ldr	r1, [r4, #12]
   179a8:	str	r2, [sp, #16]
   179ac:	ldr	r2, [r4, #8]
   179b0:	str	r3, [sp, #12]
   179b4:	ldr	r3, [r4, #4]
   179b8:	str	r1, [sp, #8]
   179bc:	str	r2, [sp, #4]
   179c0:	str	r3, [sp]
   179c4:	mov	r1, #1
   179c8:	ldr	r3, [r4]
   179cc:	mov	r2, r0
   179d0:	mov	r0, r5
   179d4:	bl	114c0 <__fprintf_chk@plt>
   179d8:	b	17860 <__assert_fail@plt+0x6298>
   179dc:	mov	r2, #5
   179e0:	ldr	r1, [pc, #240]	; 17ad8 <__assert_fail@plt+0x6510>
   179e4:	mov	r0, #0
   179e8:	bl	112d4 <dcgettext@plt>
   179ec:	ldr	r1, [r4, #24]
   179f0:	ldr	r2, [r4, #20]
   179f4:	ldr	r3, [r4, #16]
   179f8:	str	r1, [sp, #20]
   179fc:	ldr	r1, [r4, #12]
   17a00:	str	r2, [sp, #16]
   17a04:	ldr	r2, [r4, #8]
   17a08:	str	r3, [sp, #12]
   17a0c:	ldr	r3, [r4, #4]
   17a10:	str	r1, [sp, #8]
   17a14:	str	r2, [sp, #4]
   17a18:	str	r3, [sp]
   17a1c:	mov	r1, #1
   17a20:	ldr	r3, [r4]
   17a24:	mov	r2, r0
   17a28:	mov	r0, r5
   17a2c:	bl	114c0 <__fprintf_chk@plt>
   17a30:	b	17860 <__assert_fail@plt+0x6298>
   17a34:	mov	r2, #5
   17a38:	ldr	r1, [pc, #156]	; 17adc <__assert_fail@plt+0x6514>
   17a3c:	mov	r0, #0
   17a40:	bl	112d4 <dcgettext@plt>
   17a44:	ldr	r3, [r4, #28]
   17a48:	ldr	r1, [r4, #24]
   17a4c:	ldr	r2, [r4, #20]
   17a50:	str	r3, [sp, #24]
   17a54:	ldr	r3, [r4, #16]
   17a58:	str	r1, [sp, #20]
   17a5c:	ldr	r1, [r4, #12]
   17a60:	str	r2, [sp, #16]
   17a64:	ldr	r2, [r4, #8]
   17a68:	str	r3, [sp, #12]
   17a6c:	ldr	r3, [r4, #4]
   17a70:	str	r1, [sp, #8]
   17a74:	str	r2, [sp, #4]
   17a78:	str	r3, [sp]
   17a7c:	mov	r1, #1
   17a80:	ldr	r3, [r4]
   17a84:	mov	r2, r0
   17a88:	mov	r0, r5
   17a8c:	bl	114c0 <__fprintf_chk@plt>
   17a90:	b	17860 <__assert_fail@plt+0x6298>
   17a94:	mov	r2, #5
   17a98:	ldr	r1, [pc, #64]	; 17ae0 <__assert_fail@plt+0x6518>
   17a9c:	b	17804 <__assert_fail@plt+0x623c>
   17aa0:	bl	115b0 <abort@plt>
   17aa4:	andeq	sl, r1, r4, lsr sp
   17aa8:	andeq	sl, r1, r8, asr #26
   17aac:	andeq	r0, r0, r2, ror #15
   17ab0:	andeq	fp, r1, ip, lsl r0
   17ab4:	andeq	sl, r1, ip, asr #26
   17ab8:	andeq	sl, r1, r0, asr #26
   17abc:	andeq	sl, r1, r4, lsr #30
   17ac0:	andeq	sl, r1, r8, lsl lr
   17ac4:	andeq	sl, r1, r8, lsr #28
   17ac8:	andeq	sl, r1, r0, asr #28
   17acc:	andeq	sl, r1, ip, asr lr
   17ad0:	andeq	sl, r1, ip, ror lr
   17ad4:	andeq	sl, r1, r0, lsr #29
   17ad8:	andeq	sl, r1, r8, asr #29
   17adc:	strdeq	sl, [r1], -r4
   17ae0:	andeq	sl, r1, r8, asr pc
   17ae4:	push	{r4, r5, lr}
   17ae8:	sub	sp, sp, #12
   17aec:	ldr	r5, [sp, #24]
   17af0:	ldr	ip, [r5]
   17af4:	cmp	ip, #0
   17af8:	beq	17b14 <__assert_fail@plt+0x654c>
   17afc:	mov	lr, r5
   17b00:	mov	ip, #0
   17b04:	ldr	r4, [lr, #4]!
   17b08:	add	ip, ip, #1
   17b0c:	cmp	r4, #0
   17b10:	bne	17b04 <__assert_fail@plt+0x653c>
   17b14:	stm	sp, {r5, ip}
   17b18:	bl	1773c <__assert_fail@plt+0x6174>
   17b1c:	add	sp, sp, #12
   17b20:	pop	{r4, r5, pc}
   17b24:	push	{r4, r5, r6, lr}
   17b28:	sub	sp, sp, #56	; 0x38
   17b2c:	ldr	r6, [pc, #88]	; 17b8c <__assert_fail@plt+0x65c4>
   17b30:	ldr	r5, [sp, #72]	; 0x48
   17b34:	add	r4, sp, #8
   17b38:	ldr	ip, [r6]
   17b3c:	str	ip, [sp, #52]	; 0x34
   17b40:	mov	ip, #0
   17b44:	ldr	lr, [r5], #4
   17b48:	cmp	lr, #0
   17b4c:	str	lr, [r4, #4]!
   17b50:	beq	17b60 <__assert_fail@plt+0x6598>
   17b54:	add	ip, ip, #1
   17b58:	cmp	ip, #10
   17b5c:	bne	17b44 <__assert_fail@plt+0x657c>
   17b60:	add	lr, sp, #12
   17b64:	str	ip, [sp, #4]
   17b68:	str	lr, [sp]
   17b6c:	bl	1773c <__assert_fail@plt+0x6174>
   17b70:	ldr	r2, [sp, #52]	; 0x34
   17b74:	ldr	r3, [r6]
   17b78:	cmp	r2, r3
   17b7c:	bne	17b88 <__assert_fail@plt+0x65c0>
   17b80:	add	sp, sp, #56	; 0x38
   17b84:	pop	{r4, r5, r6, pc}
   17b88:	bl	112e0 <__stack_chk_fail@plt>
   17b8c:	andeq	fp, r2, r8, lsl #30
   17b90:	push	{r3}		; (str r3, [sp, #-4]!)
   17b94:	mov	ip, #0
   17b98:	push	{r4, r5, r6, lr}
   17b9c:	sub	sp, sp, #60	; 0x3c
   17ba0:	ldr	r6, [pc, #100]	; 17c0c <__assert_fail@plt+0x6644>
   17ba4:	add	r5, sp, #8
   17ba8:	add	r4, sp, #80	; 0x50
   17bac:	ldr	r3, [r6]
   17bb0:	str	r4, [sp, #8]
   17bb4:	str	r3, [sp, #52]	; 0x34
   17bb8:	ldr	r3, [sp, #76]	; 0x4c
   17bbc:	ldr	lr, [r4], #4
   17bc0:	cmp	lr, #0
   17bc4:	str	lr, [r5, #4]!
   17bc8:	beq	17bd8 <__assert_fail@plt+0x6610>
   17bcc:	add	ip, ip, #1
   17bd0:	cmp	ip, #10
   17bd4:	bne	17bbc <__assert_fail@plt+0x65f4>
   17bd8:	add	lr, sp, #12
   17bdc:	str	ip, [sp, #4]
   17be0:	str	lr, [sp]
   17be4:	bl	1773c <__assert_fail@plt+0x6174>
   17be8:	ldr	r2, [sp, #52]	; 0x34
   17bec:	ldr	r3, [r6]
   17bf0:	cmp	r2, r3
   17bf4:	bne	17c08 <__assert_fail@plt+0x6640>
   17bf8:	add	sp, sp, #60	; 0x3c
   17bfc:	pop	{r4, r5, r6, lr}
   17c00:	add	sp, sp, #4
   17c04:	bx	lr
   17c08:	bl	112e0 <__stack_chk_fail@plt>
   17c0c:	andeq	fp, r2, r8, lsl #30
   17c10:	push	{r4, lr}
   17c14:	mov	r2, #5
   17c18:	ldr	r1, [pc, #88]	; 17c78 <__assert_fail@plt+0x66b0>
   17c1c:	mov	r0, #0
   17c20:	bl	112d4 <dcgettext@plt>
   17c24:	ldr	r2, [pc, #80]	; 17c7c <__assert_fail@plt+0x66b4>
   17c28:	mov	r1, r0
   17c2c:	mov	r0, #1
   17c30:	bl	1149c <__printf_chk@plt>
   17c34:	mov	r2, #5
   17c38:	ldr	r1, [pc, #64]	; 17c80 <__assert_fail@plt+0x66b8>
   17c3c:	mov	r0, #0
   17c40:	bl	112d4 <dcgettext@plt>
   17c44:	ldr	r3, [pc, #56]	; 17c84 <__assert_fail@plt+0x66bc>
   17c48:	ldr	r2, [pc, #56]	; 17c88 <__assert_fail@plt+0x66c0>
   17c4c:	mov	r1, r0
   17c50:	mov	r0, #1
   17c54:	bl	1149c <__printf_chk@plt>
   17c58:	ldr	r1, [pc, #44]	; 17c8c <__assert_fail@plt+0x66c4>
   17c5c:	mov	r2, #5
   17c60:	mov	r0, #0
   17c64:	bl	112d4 <dcgettext@plt>
   17c68:	ldr	r3, [pc, #32]	; 17c90 <__assert_fail@plt+0x66c8>
   17c6c:	pop	{r4, lr}
   17c70:	ldr	r1, [r3]
   17c74:	b	11214 <fputs_unlocked@plt>
   17c78:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   17c7c:	andeq	sl, r1, ip, lsr #31
   17c80:	andeq	sl, r1, r4, asr #31
   17c84:	andeq	sl, r1, r0, lsr #15
   17c88:	andeq	sl, r1, r8, asr #15
   17c8c:	ldrdeq	sl, [r1], -r8
   17c90:	andeq	ip, r2, r4, asr #3
   17c94:	push	{r4, lr}
   17c98:	mov	r4, r0
   17c9c:	bl	113c4 <malloc@plt>
   17ca0:	adds	r4, r4, #0
   17ca4:	movne	r4, #1
   17ca8:	cmp	r0, #0
   17cac:	movne	r4, #0
   17cb0:	cmp	r4, #0
   17cb4:	popeq	{r4, pc}
   17cb8:	bl	17edc <__assert_fail@plt+0x6914>
   17cbc:	push	{r4, r5, r6, lr}
   17cc0:	umull	r4, r5, r0, r1
   17cc4:	adds	r3, r5, #0
   17cc8:	movne	r3, #1
   17ccc:	cmp	r4, #0
   17cd0:	blt	17ce8 <__assert_fail@plt+0x6720>
   17cd4:	cmp	r3, #0
   17cd8:	bne	17ce8 <__assert_fail@plt+0x6720>
   17cdc:	mul	r0, r1, r0
   17ce0:	pop	{r4, r5, r6, lr}
   17ce4:	b	17c94 <__assert_fail@plt+0x66cc>
   17ce8:	bl	17edc <__assert_fail@plt+0x6914>
   17cec:	b	17c94 <__assert_fail@plt+0x66cc>
   17cf0:	adds	r3, r0, #0
   17cf4:	movne	r3, #1
   17cf8:	cmp	r1, #0
   17cfc:	movne	r3, #0
   17d00:	cmp	r3, #0
   17d04:	push	{r4, lr}
   17d08:	bne	17d30 <__assert_fail@plt+0x6768>
   17d0c:	mov	r4, r1
   17d10:	bl	112f8 <realloc@plt>
   17d14:	adds	r4, r4, #0
   17d18:	movne	r4, #1
   17d1c:	cmp	r0, #0
   17d20:	movne	r4, #0
   17d24:	cmp	r4, #0
   17d28:	popeq	{r4, pc}
   17d2c:	bl	17edc <__assert_fail@plt+0x6914>
   17d30:	bl	11274 <free@plt>
   17d34:	mov	r0, #0
   17d38:	pop	{r4, pc}
   17d3c:	push	{r4, r5, r6, lr}
   17d40:	umull	r4, r5, r1, r2
   17d44:	adds	r3, r5, #0
   17d48:	movne	r3, #1
   17d4c:	cmp	r4, #0
   17d50:	blt	17d68 <__assert_fail@plt+0x67a0>
   17d54:	cmp	r3, #0
   17d58:	bne	17d68 <__assert_fail@plt+0x67a0>
   17d5c:	mul	r1, r2, r1
   17d60:	pop	{r4, r5, r6, lr}
   17d64:	b	17cf0 <__assert_fail@plt+0x6728>
   17d68:	bl	17edc <__assert_fail@plt+0x6914>
   17d6c:	push	{r4, r5, r6, r7, r8, lr}
   17d70:	subs	r7, r0, #0
   17d74:	mov	r6, r1
   17d78:	mov	r5, r2
   17d7c:	ldr	r4, [r1]
   17d80:	beq	17db4 <__assert_fail@plt+0x67ec>
   17d84:	mov	r1, r2
   17d88:	ldr	r0, [pc, #104]	; 17df8 <__assert_fail@plt+0x6830>
   17d8c:	bl	18f80 <__assert_fail@plt+0x79b8>
   17d90:	cmp	r0, r4
   17d94:	bls	17dd8 <__assert_fail@plt+0x6810>
   17d98:	add	r3, r4, #1
   17d9c:	add	r4, r3, r4, lsr #1
   17da0:	str	r4, [r6]
   17da4:	mul	r1, r5, r4
   17da8:	mov	r0, r7
   17dac:	pop	{r4, r5, r6, r7, r8, lr}
   17db0:	b	17cf0 <__assert_fail@plt+0x6728>
   17db4:	cmp	r4, #0
   17db8:	beq	17ddc <__assert_fail@plt+0x6814>
   17dbc:	umull	r0, r1, r4, r5
   17dc0:	adds	r3, r1, #0
   17dc4:	movne	r3, #1
   17dc8:	cmp	r0, #0
   17dcc:	blt	17dd8 <__assert_fail@plt+0x6810>
   17dd0:	cmp	r3, #0
   17dd4:	beq	17da0 <__assert_fail@plt+0x67d8>
   17dd8:	bl	17edc <__assert_fail@plt+0x6914>
   17ddc:	mov	r1, r2
   17de0:	mov	r0, #64	; 0x40
   17de4:	bl	18f80 <__assert_fail@plt+0x79b8>
   17de8:	cmp	r5, #64	; 0x40
   17dec:	movls	r4, r0
   17df0:	addhi	r4, r0, #1
   17df4:	b	17dbc <__assert_fail@plt+0x67f4>
   17df8:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   17dfc:	cmp	r0, #0
   17e00:	ldr	r3, [r1]
   17e04:	beq	17e28 <__assert_fail@plt+0x6860>
   17e08:	ldr	r2, [pc, #60]	; 17e4c <__assert_fail@plt+0x6884>
   17e0c:	cmp	r3, r2
   17e10:	bhi	17e44 <__assert_fail@plt+0x687c>
   17e14:	add	r2, r3, #1
   17e18:	add	r3, r2, r3, lsr #1
   17e1c:	str	r3, [r1]
   17e20:	mov	r1, r3
   17e24:	b	17cf0 <__assert_fail@plt+0x6728>
   17e28:	cmp	r3, #0
   17e2c:	bne	17e40 <__assert_fail@plt+0x6878>
   17e30:	mov	r3, #64	; 0x40
   17e34:	str	r3, [r1]
   17e38:	mov	r1, r3
   17e3c:	b	17cf0 <__assert_fail@plt+0x6728>
   17e40:	bge	17e1c <__assert_fail@plt+0x6854>
   17e44:	push	{r4, lr}
   17e48:	bl	17edc <__assert_fail@plt+0x6914>
   17e4c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   17e50:	push	{r4, lr}
   17e54:	mov	r4, r0
   17e58:	bl	17c94 <__assert_fail@plt+0x66cc>
   17e5c:	mov	r2, r4
   17e60:	mov	r1, #0
   17e64:	pop	{r4, lr}
   17e68:	b	11484 <memset@plt>
   17e6c:	push	{r4, r5, r6, lr}
   17e70:	umull	r4, r5, r0, r1
   17e74:	adds	r3, r5, #0
   17e78:	movne	r3, #1
   17e7c:	cmp	r4, #0
   17e80:	blt	17e98 <__assert_fail@plt+0x68d0>
   17e84:	cmp	r3, #0
   17e88:	bne	17e98 <__assert_fail@plt+0x68d0>
   17e8c:	bl	11208 <calloc@plt>
   17e90:	cmp	r0, #0
   17e94:	popne	{r4, r5, r6, pc}
   17e98:	bl	17edc <__assert_fail@plt+0x6914>
   17e9c:	push	{r4, r5, r6, lr}
   17ea0:	mov	r4, r1
   17ea4:	mov	r5, r0
   17ea8:	mov	r0, r1
   17eac:	bl	17c94 <__assert_fail@plt+0x66cc>
   17eb0:	mov	r2, r4
   17eb4:	mov	r1, r5
   17eb8:	pop	{r4, r5, r6, lr}
   17ebc:	b	1128c <memcpy@plt>
   17ec0:	push	{r4, lr}
   17ec4:	mov	r4, r0
   17ec8:	bl	11424 <strlen@plt>
   17ecc:	add	r1, r0, #1
   17ed0:	mov	r0, r4
   17ed4:	pop	{r4, lr}
   17ed8:	b	17e9c <__assert_fail@plt+0x68d4>
   17edc:	ldr	r3, [pc, #44]	; 17f10 <__assert_fail@plt+0x6948>
   17ee0:	push	{r4, lr}
   17ee4:	mov	r2, #5
   17ee8:	ldr	r1, [pc, #36]	; 17f14 <__assert_fail@plt+0x694c>
   17eec:	mov	r0, #0
   17ef0:	ldr	r4, [r3]
   17ef4:	bl	112d4 <dcgettext@plt>
   17ef8:	ldr	r2, [pc, #24]	; 17f18 <__assert_fail@plt+0x6950>
   17efc:	mov	r1, #0
   17f00:	mov	r3, r0
   17f04:	mov	r0, r4
   17f08:	bl	113a0 <error@plt>
   17f0c:	bl	115b0 <abort@plt>
   17f10:	andeq	ip, r2, r8, ror #2
   17f14:	andeq	fp, r1, ip, asr #32
   17f18:	andeq	sl, r1, r0, ror #22
   17f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f20:	sub	sp, sp, #36	; 0x24
   17f24:	ldr	r6, [pc, #312]	; 18064 <__assert_fail@plt+0x6a9c>
   17f28:	ldr	lr, [sp, #80]	; 0x50
   17f2c:	mov	r8, r2
   17f30:	ldr	ip, [r6]
   17f34:	mov	r2, r1
   17f38:	mov	r9, r3
   17f3c:	str	lr, [sp]
   17f40:	add	r3, sp, #16
   17f44:	mov	r1, #0
   17f48:	str	ip, [sp, #28]
   17f4c:	mov	r7, r0
   17f50:	ldr	sl, [sp, #84]	; 0x54
   17f54:	ldr	r5, [sp, #88]	; 0x58
   17f58:	bl	18074 <__assert_fail@plt+0x6aac>
   17f5c:	subs	fp, r0, #0
   17f60:	bne	18020 <__assert_fail@plt+0x6a58>
   17f64:	ldrd	r2, [sp, #16]
   17f68:	cmp	r3, r9
   17f6c:	cmpeq	r2, r8
   17f70:	ldrd	r8, [sp, #72]	; 0x48
   17f74:	movcc	r1, #1
   17f78:	movcs	r1, #0
   17f7c:	cmp	r3, r9
   17f80:	cmpeq	r2, r8
   17f84:	orrhi	r1, r1, #1
   17f88:	cmp	r1, #0
   17f8c:	beq	17fe4 <__assert_fail@plt+0x6a1c>
   17f90:	strd	r2, [sp, #8]
   17f94:	bl	11448 <__errno_location@plt>
   17f98:	ldrd	r2, [sp, #8]
   17f9c:	mov	r9, #0
   17fa0:	mvn	r8, #-1073741824	; 0xc0000000
   17fa4:	cmp	r3, r9
   17fa8:	cmpeq	r2, r8
   17fac:	bls	1804c <__assert_fail@plt+0x6a84>
   17fb0:	mov	r4, #75	; 0x4b
   17fb4:	cmp	r5, #0
   17fb8:	str	r4, [r0]
   17fbc:	beq	18018 <__assert_fail@plt+0x6a50>
   17fc0:	mov	r0, r7
   17fc4:	bl	169d8 <__assert_fail@plt+0x5410>
   17fc8:	mov	r3, sl
   17fcc:	ldr	r2, [pc, #148]	; 18068 <__assert_fail@plt+0x6aa0>
   17fd0:	mov	r1, r4
   17fd4:	str	r0, [sp]
   17fd8:	mov	r0, r5
   17fdc:	bl	113a0 <error@plt>
   17fe0:	ldrd	r2, [sp, #16]
   17fe4:	ldr	lr, [sp, #28]
   17fe8:	ldr	ip, [r6]
   17fec:	mov	r0, r2
   17ff0:	cmp	lr, ip
   17ff4:	mov	r1, r3
   17ff8:	bne	18060 <__assert_fail@plt+0x6a98>
   17ffc:	add	sp, sp, #36	; 0x24
   18000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18004:	mov	r4, #0
   18008:	cmp	r5, #0
   1800c:	str	r4, [r0]
   18010:	bne	17fc0 <__assert_fail@plt+0x69f8>
   18014:	mov	r4, r5
   18018:	mov	r5, #1
   1801c:	b	17fc0 <__assert_fail@plt+0x69f8>
   18020:	bl	11448 <__errno_location@plt>
   18024:	cmp	fp, #1
   18028:	beq	17fb0 <__assert_fail@plt+0x69e8>
   1802c:	cmp	fp, #3
   18030:	beq	18004 <__assert_fail@plt+0x6a3c>
   18034:	ldr	r4, [r0]
   18038:	cmp	r5, #0
   1803c:	moveq	r5, #1
   18040:	cmp	r4, #22
   18044:	moveq	r4, #0
   18048:	b	17fc0 <__assert_fail@plt+0x69f8>
   1804c:	mov	r4, #34	; 0x22
   18050:	cmp	r5, #0
   18054:	str	r4, [r0]
   18058:	bne	17fc0 <__assert_fail@plt+0x69f8>
   1805c:	b	18018 <__assert_fail@plt+0x6a50>
   18060:	bl	112e0 <__stack_chk_fail@plt>
   18064:	andeq	fp, r2, r8, lsl #30
   18068:	andeq	sl, r1, ip, asr fp
   1806c:	mov	r1, #10
   18070:	b	17f1c <__assert_fail@plt+0x6954>
   18074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18078:	sub	sp, sp, #36	; 0x24
   1807c:	ldr	r5, [pc, #2536]	; 18a6c <__assert_fail@plt+0x74a4>
   18080:	mov	r9, r2
   18084:	cmp	r2, #36	; 0x24
   18088:	str	r3, [sp, #12]
   1808c:	ldr	r2, [r5]
   18090:	ldr	r3, [sp, #72]	; 0x48
   18094:	str	r2, [sp, #28]
   18098:	str	r3, [sp]
   1809c:	bhi	18a58 <__assert_fail@plt+0x7490>
   180a0:	cmp	r1, #0
   180a4:	mov	r4, r1
   180a8:	mov	r6, r0
   180ac:	addeq	r4, sp, #24
   180b0:	bl	11448 <__errno_location@plt>
   180b4:	mov	r3, #0
   180b8:	str	r3, [r0]
   180bc:	mov	r7, r0
   180c0:	bl	11400 <__ctype_b_loc@plt>
   180c4:	ldrb	r3, [r6]
   180c8:	mov	r1, r6
   180cc:	ldr	r0, [r0]
   180d0:	b	180d8 <__assert_fail@plt+0x6b10>
   180d4:	ldrb	r3, [r1, #1]!
   180d8:	lsl	r2, r3, #1
   180dc:	ldrh	r8, [r0, r2]
   180e0:	ands	r8, r8, #8192	; 0x2000
   180e4:	bne	180d4 <__assert_fail@plt+0x6b0c>
   180e8:	cmp	r3, #45	; 0x2d
   180ec:	beq	18188 <__assert_fail@plt+0x6bc0>
   180f0:	mov	r2, r9
   180f4:	mov	r3, r8
   180f8:	mov	r1, r4
   180fc:	mov	r0, r6
   18100:	bl	11298 <__strtoull_internal@plt>
   18104:	ldr	r9, [r4]
   18108:	cmp	r9, r6
   1810c:	mov	sl, r0
   18110:	mov	fp, r1
   18114:	beq	18170 <__assert_fail@plt+0x6ba8>
   18118:	ldr	r8, [r7]
   1811c:	cmp	r8, #0
   18120:	bne	18160 <__assert_fail@plt+0x6b98>
   18124:	ldr	r3, [sp]
   18128:	cmp	r3, #0
   1812c:	beq	1813c <__assert_fail@plt+0x6b74>
   18130:	ldrb	r6, [r9]
   18134:	cmp	r6, #0
   18138:	bne	18510 <__assert_fail@plt+0x6f48>
   1813c:	ldr	r3, [sp, #12]
   18140:	strd	sl, [r3]
   18144:	ldr	r2, [sp, #28]
   18148:	ldr	r3, [r5]
   1814c:	mov	r0, r8
   18150:	cmp	r2, r3
   18154:	bne	18a54 <__assert_fail@plt+0x748c>
   18158:	add	sp, sp, #36	; 0x24
   1815c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18160:	cmp	r8, #34	; 0x22
   18164:	bne	18188 <__assert_fail@plt+0x6bc0>
   18168:	mov	r8, #1
   1816c:	b	18124 <__assert_fail@plt+0x6b5c>
   18170:	ldr	r0, [sp]
   18174:	cmp	r0, #0
   18178:	beq	18188 <__assert_fail@plt+0x6bc0>
   1817c:	ldrb	r6, [r6]
   18180:	cmp	r6, #0
   18184:	bne	18190 <__assert_fail@plt+0x6bc8>
   18188:	mov	r8, #4
   1818c:	b	18144 <__assert_fail@plt+0x6b7c>
   18190:	mov	r1, r6
   18194:	bl	11430 <strchr@plt>
   18198:	cmp	r0, #0
   1819c:	movne	sl, #1
   181a0:	movne	fp, #0
   181a4:	beq	18188 <__assert_fail@plt+0x6bc0>
   181a8:	sub	r7, r6, #69	; 0x45
   181ac:	cmp	r7, #47	; 0x2f
   181b0:	ldrls	pc, [pc, r7, lsl #2]
   181b4:	b	18374 <__assert_fail@plt+0x6dac>
   181b8:	andeq	r8, r1, r8, ror r2
   181bc:	andeq	r8, r1, r4, ror r3
   181c0:	andeq	r8, r1, r8, ror r2
   181c4:	andeq	r8, r1, r4, ror r3
   181c8:	andeq	r8, r1, r4, ror r3
   181cc:	andeq	r8, r1, r4, ror r3
   181d0:	andeq	r8, r1, r8, ror r2
   181d4:	andeq	r8, r1, r4, ror r3
   181d8:	andeq	r8, r1, r8, ror r2
   181dc:	andeq	r8, r1, r4, ror r3
   181e0:	andeq	r8, r1, r4, ror r3
   181e4:	andeq	r8, r1, r8, ror r2
   181e8:	andeq	r8, r1, r4, ror r3
   181ec:	andeq	r8, r1, r4, ror r3
   181f0:	andeq	r8, r1, r4, ror r3
   181f4:	andeq	r8, r1, r8, ror r2
   181f8:	andeq	r8, r1, r4, ror r3
   181fc:	andeq	r8, r1, r4, ror r3
   18200:	andeq	r8, r1, r4, ror r3
   18204:	andeq	r8, r1, r4, ror r3
   18208:	andeq	r8, r1, r8, ror r2
   1820c:	andeq	r8, r1, r8, ror r2
   18210:	andeq	r8, r1, r4, ror r3
   18214:	andeq	r8, r1, r4, ror r3
   18218:	andeq	r8, r1, r4, ror r3
   1821c:	andeq	r8, r1, r4, ror r3
   18220:	andeq	r8, r1, r4, ror r3
   18224:	andeq	r8, r1, r4, ror r3
   18228:	andeq	r8, r1, r4, ror r3
   1822c:	andeq	r8, r1, r4, ror r3
   18230:	andeq	r8, r1, r4, ror r3
   18234:	andeq	r8, r1, r4, ror r3
   18238:	andeq	r8, r1, r4, ror r3
   1823c:	andeq	r8, r1, r4, ror r3
   18240:	andeq	r8, r1, r8, ror r2
   18244:	andeq	r8, r1, r4, ror r3
   18248:	andeq	r8, r1, r4, ror r3
   1824c:	andeq	r8, r1, r4, ror r3
   18250:	andeq	r8, r1, r8, ror r2
   18254:	andeq	r8, r1, r4, ror r3
   18258:	andeq	r8, r1, r8, ror r2
   1825c:	andeq	r8, r1, r4, ror r3
   18260:	andeq	r8, r1, r4, ror r3
   18264:	andeq	r8, r1, r4, ror r3
   18268:	andeq	r8, r1, r4, ror r3
   1826c:	andeq	r8, r1, r4, ror r3
   18270:	andeq	r8, r1, r4, ror r3
   18274:	andeq	r8, r1, r8, ror r2
   18278:	ldr	r0, [sp]
   1827c:	mov	r1, #48	; 0x30
   18280:	bl	11430 <strchr@plt>
   18284:	cmp	r0, #0
   18288:	beq	18374 <__assert_fail@plt+0x6dac>
   1828c:	ldrb	r3, [r9, #1]
   18290:	cmp	r3, #68	; 0x44
   18294:	beq	18954 <__assert_fail@plt+0x738c>
   18298:	cmp	r3, #105	; 0x69
   1829c:	beq	18534 <__assert_fail@plt+0x6f6c>
   182a0:	cmp	r3, #66	; 0x42
   182a4:	beq	18954 <__assert_fail@plt+0x738c>
   182a8:	cmp	r7, #47	; 0x2f
   182ac:	ldrls	pc, [pc, r7, lsl #2]
   182b0:	b	18524 <__assert_fail@plt+0x6f5c>
   182b4:	andeq	r8, r1, r8, lsr r9
   182b8:	andeq	r8, r1, r4, lsr #10
   182bc:	andeq	r8, r1, r8, lsr #18
   182c0:	andeq	r8, r1, r4, lsr #10
   182c4:	andeq	r8, r1, r4, lsr #10
   182c8:	andeq	r8, r1, r4, lsr #10
   182cc:	andeq	r8, r1, r8, lsl r9
   182d0:	andeq	r8, r1, r4, lsr #10
   182d4:	andeq	r8, r1, r8, lsl #18
   182d8:	andeq	r8, r1, r4, lsr #10
   182dc:	andeq	r8, r1, r4, lsr #10
   182e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e4:	andeq	r8, r1, r4, lsr #10
   182e8:	andeq	r8, r1, r4, lsr #10
   182ec:	andeq	r8, r1, r4, lsr #10
   182f0:	andeq	r8, r1, r8, ror #17
   182f4:	andeq	r8, r1, r4, lsr #10
   182f8:	andeq	r8, r1, r4, lsr #10
   182fc:	andeq	r8, r1, r4, lsr #10
   18300:	andeq	r8, r1, r4, lsr #10
   18304:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18308:	andeq	r8, r1, r8, asr #17
   1830c:	andeq	r8, r1, r4, lsr #10
   18310:	andeq	r8, r1, r4, lsr #10
   18314:	andeq	r8, r1, r4, lsr #10
   18318:	andeq	r8, r1, r4, lsr #10
   1831c:	andeq	r8, r1, r4, lsr #10
   18320:	andeq	r8, r1, r4, lsr #10
   18324:	andeq	r8, r1, r4, lsr #10
   18328:	andeq	r8, r1, r0, ror r5
   1832c:	andeq	r8, r1, r0, asr #17
   18330:	andeq	r8, r1, r4, lsr #10
   18334:	andeq	r8, r1, r4, lsr #10
   18338:	andeq	r8, r1, r4, lsr #10
   1833c:	andeq	r8, r1, r8, lsr #18
   18340:	andeq	r8, r1, r4, lsr #10
   18344:	andeq	r8, r1, r4, lsr #10
   18348:	andeq	r8, r1, r4, lsr #10
   1834c:	andeq	r8, r1, r8, lsl r9
   18350:	andeq	r8, r1, r4, lsr #10
   18354:	andeq	r8, r1, r8, lsl #18
   18358:	andeq	r8, r1, r4, lsr #10
   1835c:	andeq	r8, r1, r4, lsr #10
   18360:	andeq	r8, r1, r4, lsr #10
   18364:	andeq	r8, r1, r4, lsr #10
   18368:	andeq	r8, r1, r4, lsr #10
   1836c:	andeq	r8, r1, r4, lsr #10
   18370:	andeq	r8, r1, r8, ror #17
   18374:	mov	lr, #1
   18378:	mov	r0, #1024	; 0x400
   1837c:	sub	r6, r6, #66	; 0x42
   18380:	cmp	r6, #53	; 0x35
   18384:	ldrls	pc, [pc, r6, lsl #2]
   18388:	b	18524 <__assert_fail@plt+0x6f5c>
   1838c:	muleq	r1, r8, r5
   18390:	andeq	r8, r1, r4, lsr #10
   18394:	andeq	r8, r1, r4, lsr #10
   18398:			; <UNDEFINED> instruction: 0x000185bc
   1839c:	andeq	r8, r1, r4, lsr #10
   183a0:	andeq	r8, r1, r4, ror #8
   183a4:	andeq	r8, r1, r4, lsr #10
   183a8:	andeq	r8, r1, r4, lsr #10
   183ac:	andeq	r8, r1, r4, lsr #10
   183b0:			; <UNDEFINED> instruction: 0x000186b4
   183b4:	andeq	r8, r1, r4, lsr #10
   183b8:	andeq	r8, r1, r8, asr r8
   183bc:	andeq	r8, r1, r4, lsr #10
   183c0:	andeq	r8, r1, r4, lsr #10
   183c4:	ldrdeq	r8, [r1], -ip
   183c8:	andeq	r8, r1, r4, lsr #10
   183cc:	andeq	r8, r1, r4, lsr #10
   183d0:	andeq	r8, r1, r4, lsr #10
   183d4:	andeq	r8, r1, r0, ror #14
   183d8:	andeq	r8, r1, r4, lsr #10
   183dc:	andeq	r8, r1, r4, lsr #10
   183e0:	andeq	r8, r1, r4, lsr #10
   183e4:	andeq	r8, r1, r4, lsr #10
   183e8:	andeq	r8, r1, r4, ror #13
   183ec:	andeq	r8, r1, r8, lsr r6
   183f0:	andeq	r8, r1, r4, lsr #10
   183f4:	andeq	r8, r1, r4, lsr #10
   183f8:	andeq	r8, r1, r4, lsr #10
   183fc:	andeq	r8, r1, r4, lsr #10
   18400:	andeq	r8, r1, r4, lsr #10
   18404:	andeq	r8, r1, r4, lsr #10
   18408:	andeq	r8, r1, r4, lsr #10
   1840c:	andeq	r8, r1, r4, ror r5
   18410:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18414:	andeq	r8, r1, r4, lsr #10
   18418:	andeq	r8, r1, r4, lsr #10
   1841c:	andeq	r8, r1, r4, lsr #10
   18420:	andeq	r8, r1, r4, ror #8
   18424:	andeq	r8, r1, r4, lsr #10
   18428:	andeq	r8, r1, r4, lsr #10
   1842c:	andeq	r8, r1, r4, lsr #10
   18430:			; <UNDEFINED> instruction: 0x000186b4
   18434:	andeq	r8, r1, r4, lsr #10
   18438:	andeq	r8, r1, r8, asr r8
   1843c:	andeq	r8, r1, r4, lsr #10
   18440:	andeq	r8, r1, r4, lsr #10
   18444:	andeq	r8, r1, r4, lsr #10
   18448:	andeq	r8, r1, r4, lsr #10
   1844c:	andeq	r8, r1, r4, lsr #10
   18450:	andeq	r8, r1, r4, lsr #10
   18454:	andeq	r8, r1, r0, ror #14
   18458:	andeq	r8, r1, r4, lsr #10
   1845c:	andeq	r8, r1, r4, lsr #10
   18460:	andeq	r8, r1, ip, asr #10
   18464:	asr	r1, r0, #31
   18468:	mov	r2, #0
   1846c:	mov	r3, #0
   18470:	cmp	fp, #0
   18474:	strd	r2, [sp]
   18478:	bne	18998 <__assert_fail@plt+0x73d0>
   1847c:	ldrd	r2, [sp]
   18480:	orrs	r3, r2, r3
   18484:	bne	18988 <__assert_fail@plt+0x73c0>
   18488:	mul	r3, sl, r1
   1848c:	umull	r6, r7, sl, r0
   18490:	mla	r3, r0, fp, r3
   18494:	ldrd	sl, [sp]
   18498:	add	ip, r3, r7
   1849c:	cmp	ip, #0
   184a0:	mov	r7, ip
   184a4:	bne	18a2c <__assert_fail@plt+0x7464>
   184a8:	orrs	r3, sl, fp
   184ac:	bne	18988 <__assert_fail@plt+0x73c0>
   184b0:	umull	r2, r3, r6, r0
   184b4:	mul	ip, r6, r1
   184b8:	strd	r2, [sp]
   184bc:	mla	r3, r0, r7, ip
   184c0:	ldr	r2, [sp, #4]
   184c4:	add	ip, r3, r2
   184c8:	cmp	ip, #0
   184cc:	str	ip, [sp, #4]
   184d0:	bne	18a08 <__assert_fail@plt+0x7440>
   184d4:	orrs	r3, sl, fp
   184d8:	bne	18988 <__assert_fail@plt+0x73c0>
   184dc:	ldrd	r6, [sp]
   184e0:	mov	r3, #0
   184e4:	mul	r2, r6, r1
   184e8:	umull	sl, fp, r6, r0
   184ec:	mla	r2, r0, r7, r2
   184f0:	add	fp, r2, fp
   184f4:	orr	r8, r8, r3
   184f8:	add	r3, r9, lr
   184fc:	str	r3, [r4]
   18500:	ldrb	r3, [r9, lr]
   18504:	cmp	r3, #0
   18508:	orrne	r8, r8, #2
   1850c:	b	1813c <__assert_fail@plt+0x6b74>
   18510:	mov	r1, r6
   18514:	ldr	r0, [sp]
   18518:	bl	11430 <strchr@plt>
   1851c:	cmp	r0, #0
   18520:	bne	181a8 <__assert_fail@plt+0x6be0>
   18524:	ldr	r3, [sp, #12]
   18528:	orr	r8, r8, #2
   1852c:	strd	sl, [r3]
   18530:	b	18144 <__assert_fail@plt+0x6b7c>
   18534:	ldrb	r3, [r9, #2]
   18538:	mov	r0, #1024	; 0x400
   1853c:	cmp	r3, #66	; 0x42
   18540:	movne	lr, #1
   18544:	moveq	lr, #3
   18548:	b	1837c <__assert_fail@plt+0x6db4>
   1854c:	lsr	r3, fp, #31
   18550:	adds	sl, sl, sl
   18554:	adc	fp, fp, fp
   18558:	cmp	r3, #0
   1855c:	beq	184f8 <__assert_fail@plt+0x6f30>
   18560:	mov	r8, #1
   18564:	mvn	sl, #0
   18568:	mvn	fp, #0
   1856c:	b	184f8 <__assert_fail@plt+0x6f30>
   18570:	mov	lr, #1
   18574:	lsr	r3, fp, #23
   18578:	cmp	r3, #0
   1857c:	bne	18560 <__assert_fail@plt+0x6f98>
   18580:	lsl	r3, fp, #9
   18584:	orr	r3, r3, sl, lsr #23
   18588:	lsl	r2, sl, #9
   1858c:	mov	sl, r2
   18590:	mov	fp, r3
   18594:	b	184f8 <__assert_fail@plt+0x6f30>
   18598:	lsr	r3, fp, #22
   1859c:	cmp	r3, #0
   185a0:	bne	18560 <__assert_fail@plt+0x6f98>
   185a4:	lsl	r3, fp, #10
   185a8:	orr	r3, r3, sl, lsr #22
   185ac:	lsl	r2, sl, #10
   185b0:	mov	sl, r2
   185b4:	mov	fp, r3
   185b8:	b	184f8 <__assert_fail@plt+0x6f30>
   185bc:	mov	r6, r0
   185c0:	asr	r7, r0, #31
   185c4:	mov	r3, #0
   185c8:	mov	ip, #6
   185cc:	str	r3, [sp]
   185d0:	strd	r4, [sp, #16]
   185d4:	b	18604 <__assert_fail@plt+0x703c>
   185d8:	orrs	r3, r2, r3
   185dc:	movne	r3, #1
   185e0:	muleq	r3, sl, r7
   185e4:	strne	r3, [sp]
   185e8:	mlaeq	r3, r6, fp, r3
   185ec:	umulleq	sl, fp, sl, r6
   185f0:	mvnne	sl, #0
   185f4:	addeq	fp, r3, fp
   185f8:	mvnne	fp, #0
   185fc:	subs	ip, ip, #1
   18600:	beq	18948 <__assert_fail@plt+0x7380>
   18604:	cmp	fp, #0
   18608:	mov	r2, #0
   1860c:	mov	r3, #0
   18610:	beq	185d8 <__assert_fail@plt+0x7010>
   18614:	umull	r0, r1, sl, r6
   18618:	mov	r5, #0
   1861c:	mov	r0, r1
   18620:	mov	r1, r5
   18624:	umlal	r0, r1, fp, r6
   18628:	cmp	r1, r5
   1862c:	movne	r2, #1
   18630:	movne	r3, #0
   18634:	b	185d8 <__assert_fail@plt+0x7010>
   18638:	mov	r6, r0
   1863c:	asr	r7, r0, #31
   18640:	mov	r3, #0
   18644:	mov	ip, #7
   18648:	str	r3, [sp]
   1864c:	strd	r4, [sp, #16]
   18650:	b	18680 <__assert_fail@plt+0x70b8>
   18654:	orrs	r3, r2, r3
   18658:	movne	r3, #1
   1865c:	muleq	r3, sl, r7
   18660:	strne	r3, [sp]
   18664:	mlaeq	r3, r6, fp, r3
   18668:	umulleq	sl, fp, sl, r6
   1866c:	mvnne	sl, #0
   18670:	addeq	fp, r3, fp
   18674:	mvnne	fp, #0
   18678:	subs	ip, ip, #1
   1867c:	beq	18948 <__assert_fail@plt+0x7380>
   18680:	cmp	fp, #0
   18684:	mov	r2, #0
   18688:	mov	r3, #0
   1868c:	beq	18654 <__assert_fail@plt+0x708c>
   18690:	umull	r0, r1, sl, r6
   18694:	mov	r5, #0
   18698:	mov	r0, r1
   1869c:	mov	r1, r5
   186a0:	umlal	r0, r1, fp, r6
   186a4:	cmp	r1, r5
   186a8:	movne	r2, #1
   186ac:	movne	r3, #0
   186b0:	b	18654 <__assert_fail@plt+0x708c>
   186b4:	asr	r1, r0, #31
   186b8:	cmp	fp, #0
   186bc:	mov	r6, #0
   186c0:	mov	r7, #0
   186c4:	bne	18960 <__assert_fail@plt+0x7398>
   186c8:	orrs	r3, r6, r7
   186cc:	bne	18560 <__assert_fail@plt+0x6f98>
   186d0:	mul	r3, sl, r1
   186d4:	mla	r3, r0, fp, r3
   186d8:	umull	sl, fp, sl, r0
   186dc:	add	fp, r3, fp
   186e0:	b	184f8 <__assert_fail@plt+0x6f30>
   186e4:	mov	r6, r0
   186e8:	asr	r7, r0, #31
   186ec:	mov	r3, #0
   186f0:	mov	ip, #8
   186f4:	str	r3, [sp]
   186f8:	strd	r4, [sp, #16]
   186fc:	b	1872c <__assert_fail@plt+0x7164>
   18700:	orrs	r3, r2, r3
   18704:	movne	r3, #1
   18708:	muleq	r3, sl, r7
   1870c:	strne	r3, [sp]
   18710:	mlaeq	r3, r6, fp, r3
   18714:	umulleq	sl, fp, sl, r6
   18718:	mvnne	sl, #0
   1871c:	addeq	fp, r3, fp
   18720:	mvnne	fp, #0
   18724:	subs	ip, ip, #1
   18728:	beq	18948 <__assert_fail@plt+0x7380>
   1872c:	cmp	fp, #0
   18730:	mov	r2, #0
   18734:	mov	r3, #0
   18738:	beq	18700 <__assert_fail@plt+0x7138>
   1873c:	umull	r0, r1, sl, r6
   18740:	mov	r5, #0
   18744:	mov	r0, r1
   18748:	mov	r1, r5
   1874c:	umlal	r0, r1, fp, r6
   18750:	cmp	r1, r5
   18754:	movne	r2, #1
   18758:	movne	r3, #0
   1875c:	b	18700 <__assert_fail@plt+0x7138>
   18760:	mov	r6, r0
   18764:	asr	r7, r0, #31
   18768:	mov	r3, #0
   1876c:	mov	ip, #4
   18770:	str	r3, [sp]
   18774:	strd	r4, [sp, #16]
   18778:	b	187a8 <__assert_fail@plt+0x71e0>
   1877c:	orrs	r3, r2, r3
   18780:	movne	r3, #1
   18784:	muleq	r3, sl, r7
   18788:	strne	r3, [sp]
   1878c:	mlaeq	r3, r6, fp, r3
   18790:	umulleq	sl, fp, sl, r6
   18794:	mvnne	sl, #0
   18798:	addeq	fp, r3, fp
   1879c:	mvnne	fp, #0
   187a0:	subs	ip, ip, #1
   187a4:	beq	18948 <__assert_fail@plt+0x7380>
   187a8:	cmp	fp, #0
   187ac:	mov	r2, #0
   187b0:	mov	r3, #0
   187b4:	beq	1877c <__assert_fail@plt+0x71b4>
   187b8:	umull	r0, r1, sl, r6
   187bc:	mov	r5, #0
   187c0:	mov	r0, r1
   187c4:	mov	r1, r5
   187c8:	umlal	r0, r1, fp, r6
   187cc:	cmp	r1, r5
   187d0:	movne	r2, #1
   187d4:	movne	r3, #0
   187d8:	b	1877c <__assert_fail@plt+0x71b4>
   187dc:	mov	r6, r0
   187e0:	asr	r7, r0, #31
   187e4:	mov	r3, #0
   187e8:	mov	ip, #5
   187ec:	str	r3, [sp]
   187f0:	strd	r4, [sp, #16]
   187f4:	b	18824 <__assert_fail@plt+0x725c>
   187f8:	orrs	r3, r2, r3
   187fc:	movne	r3, #1
   18800:	muleq	r3, sl, r7
   18804:	strne	r3, [sp]
   18808:	mlaeq	r3, r6, fp, r3
   1880c:	umulleq	sl, fp, sl, r6
   18810:	mvnne	sl, #0
   18814:	addeq	fp, r3, fp
   18818:	mvnne	fp, #0
   1881c:	subs	ip, ip, #1
   18820:	beq	18948 <__assert_fail@plt+0x7380>
   18824:	cmp	fp, #0
   18828:	mov	r2, #0
   1882c:	mov	r3, #0
   18830:	beq	187f8 <__assert_fail@plt+0x7230>
   18834:	umull	r0, r1, sl, r6
   18838:	mov	r5, #0
   1883c:	mov	r0, r1
   18840:	mov	r1, r5
   18844:	umlal	r0, r1, fp, r6
   18848:	cmp	r1, r5
   1884c:	movne	r2, #1
   18850:	movne	r3, #0
   18854:	b	187f8 <__assert_fail@plt+0x7230>
   18858:	asr	r1, r0, #31
   1885c:	cmp	fp, #0
   18860:	mov	r6, #0
   18864:	mov	r7, #0
   18868:	bne	189bc <__assert_fail@plt+0x73f4>
   1886c:	orrs	r3, r6, r7
   18870:	bne	18560 <__assert_fail@plt+0x6f98>
   18874:	umull	r2, r3, sl, r0
   18878:	mul	ip, sl, r1
   1887c:	strd	r2, [sp]
   18880:	mla	r3, r0, fp, ip
   18884:	ldr	r2, [sp, #4]
   18888:	mov	sl, r6
   1888c:	add	ip, r3, r2
   18890:	cmp	ip, #0
   18894:	mov	fp, r7
   18898:	str	ip, [sp, #4]
   1889c:	bne	189e4 <__assert_fail@plt+0x741c>
   188a0:	orrs	r3, sl, fp
   188a4:	bne	18560 <__assert_fail@plt+0x6f98>
   188a8:	ldrd	r6, [sp]
   188ac:	mul	r3, r6, r1
   188b0:	umull	sl, fp, r6, r0
   188b4:	mla	r0, r0, r7, r3
   188b8:	add	fp, r0, fp
   188bc:	b	184f8 <__assert_fail@plt+0x6f30>
   188c0:	mov	lr, #1
   188c4:	b	184f8 <__assert_fail@plt+0x6f30>
   188c8:	mov	lr, #1
   188cc:	mov	r6, #1024	; 0x400
   188d0:	mov	r7, #0
   188d4:	b	18640 <__assert_fail@plt+0x7078>
   188d8:	mov	lr, #1
   188dc:	mov	r6, #1024	; 0x400
   188e0:	mov	r7, #0
   188e4:	b	186ec <__assert_fail@plt+0x7124>
   188e8:	mov	lr, #1
   188ec:	mov	r6, #1024	; 0x400
   188f0:	mov	r7, #0
   188f4:	b	18768 <__assert_fail@plt+0x71a0>
   188f8:	mov	lr, #1
   188fc:	mov	r6, #1024	; 0x400
   18900:	mov	r7, #0
   18904:	b	187e4 <__assert_fail@plt+0x721c>
   18908:	mov	lr, #1
   1890c:	mov	r0, #1024	; 0x400
   18910:	mov	r1, #0
   18914:	b	1885c <__assert_fail@plt+0x7294>
   18918:	mov	lr, #1
   1891c:	mov	r0, #1024	; 0x400
   18920:	mov	r1, #0
   18924:	b	186b8 <__assert_fail@plt+0x70f0>
   18928:	mov	lr, #1
   1892c:	mov	r0, #1024	; 0x400
   18930:	mov	r1, #0
   18934:	b	18468 <__assert_fail@plt+0x6ea0>
   18938:	mov	lr, #1
   1893c:	mov	r6, #1024	; 0x400
   18940:	mov	r7, #0
   18944:	b	185c4 <__assert_fail@plt+0x6ffc>
   18948:	ldrd	r4, [sp, #16]
   1894c:	ldr	r3, [sp]
   18950:	b	184f4 <__assert_fail@plt+0x6f2c>
   18954:	mov	lr, #2
   18958:	mov	r0, #1000	; 0x3e8
   1895c:	b	1837c <__assert_fail@plt+0x6db4>
   18960:	umull	r2, r3, sl, r0
   18964:	str	r3, [sp]
   18968:	mov	r3, #0
   1896c:	str	r3, [sp, #4]
   18970:	ldrd	r2, [sp]
   18974:	umlal	r2, r3, fp, r0
   18978:	cmp	r3, #0
   1897c:	movne	r6, #1
   18980:	movne	r7, #0
   18984:	b	186c8 <__assert_fail@plt+0x7100>
   18988:	mov	r3, #1
   1898c:	mvn	sl, #0
   18990:	mvn	fp, #0
   18994:	b	184f4 <__assert_fail@plt+0x6f2c>
   18998:	umull	r2, r3, sl, r0
   1899c:	mov	r7, #0
   189a0:	mov	r6, r3
   189a4:	umlal	r6, r7, fp, r0
   189a8:	cmp	r7, #0
   189ac:	movne	r2, #1
   189b0:	movne	r3, #0
   189b4:	strdne	r2, [sp]
   189b8:	b	1847c <__assert_fail@plt+0x6eb4>
   189bc:	umull	r2, r3, sl, r0
   189c0:	str	r3, [sp]
   189c4:	mov	r3, #0
   189c8:	str	r3, [sp, #4]
   189cc:	ldrd	r2, [sp]
   189d0:	umlal	r2, r3, fp, r0
   189d4:	cmp	r3, #0
   189d8:	movne	r6, #1
   189dc:	movne	r7, #0
   189e0:	b	1886c <__assert_fail@plt+0x72a4>
   189e4:	ldr	r3, [sp]
   189e8:	mov	r7, #0
   189ec:	umull	r2, r3, r3, r0
   189f0:	mov	r6, r3
   189f4:	umlal	r6, r7, ip, r0
   189f8:	cmp	r7, #0
   189fc:	movne	sl, #1
   18a00:	movne	fp, #0
   18a04:	b	188a0 <__assert_fail@plt+0x72d8>
   18a08:	ldr	r3, [sp]
   18a0c:	mov	r7, #0
   18a10:	umull	r2, r3, r3, r0
   18a14:	mov	r6, r3
   18a18:	umlal	r6, r7, ip, r0
   18a1c:	cmp	r7, #0
   18a20:	movne	sl, #1
   18a24:	movne	fp, #0
   18a28:	b	184d4 <__assert_fail@plt+0x6f0c>
   18a2c:	umull	r2, r3, r6, r0
   18a30:	str	r3, [sp]
   18a34:	mov	r3, #0
   18a38:	str	r3, [sp, #4]
   18a3c:	ldrd	r2, [sp]
   18a40:	umlal	r2, r3, ip, r0
   18a44:	cmp	r3, #0
   18a48:	movne	sl, #1
   18a4c:	movne	fp, #0
   18a50:	b	184a8 <__assert_fail@plt+0x6ee0>
   18a54:	bl	112e0 <__stack_chk_fail@plt>
   18a58:	ldr	r3, [pc, #16]	; 18a70 <__assert_fail@plt+0x74a8>
   18a5c:	mov	r2, #96	; 0x60
   18a60:	ldr	r1, [pc, #12]	; 18a74 <__assert_fail@plt+0x74ac>
   18a64:	ldr	r0, [pc, #12]	; 18a78 <__assert_fail@plt+0x74b0>
   18a68:	bl	115c8 <__assert_fail@plt>
   18a6c:	andeq	fp, r2, r8, lsl #30
   18a70:	andeq	fp, r1, r0, rrx
   18a74:	andeq	fp, r1, ip, rrx
   18a78:	andeq	fp, r1, ip, ror r0
   18a7c:	push	{r4, r5, lr}
   18a80:	sub	sp, sp, #12
   18a84:	mov	r4, r0
   18a88:	bl	114b4 <fileno@plt>
   18a8c:	cmp	r0, #0
   18a90:	mov	r0, r4
   18a94:	blt	18b10 <__assert_fail@plt+0x7548>
   18a98:	bl	113dc <__freading@plt>
   18a9c:	cmp	r0, #0
   18aa0:	bne	18adc <__assert_fail@plt+0x7514>
   18aa4:	mov	r0, r4
   18aa8:	bl	18c68 <__assert_fail@plt+0x76a0>
   18aac:	cmp	r0, #0
   18ab0:	beq	18b0c <__assert_fail@plt+0x7544>
   18ab4:	bl	11448 <__errno_location@plt>
   18ab8:	mov	r5, r0
   18abc:	mov	r0, r4
   18ac0:	ldr	r4, [r5]
   18ac4:	bl	114cc <fclose@plt>
   18ac8:	cmp	r4, #0
   18acc:	mvnne	r0, #0
   18ad0:	strne	r4, [r5]
   18ad4:	add	sp, sp, #12
   18ad8:	pop	{r4, r5, pc}
   18adc:	mov	r0, r4
   18ae0:	bl	114b4 <fileno@plt>
   18ae4:	mov	r3, #1
   18ae8:	str	r3, [sp]
   18aec:	mov	r2, #0
   18af0:	mov	r3, #0
   18af4:	bl	11358 <lseek64@plt>
   18af8:	mvn	r3, #0
   18afc:	mvn	r2, #0
   18b00:	cmp	r1, r3
   18b04:	cmpeq	r0, r2
   18b08:	bne	18aa4 <__assert_fail@plt+0x74dc>
   18b0c:	mov	r0, r4
   18b10:	add	sp, sp, #12
   18b14:	pop	{r4, r5, lr}
   18b18:	b	114cc <fclose@plt>
   18b1c:	push	{r1, r2, r3}
   18b20:	push	{r4, r5, r6, r7, r8, lr}
   18b24:	sub	sp, sp, #12
   18b28:	ldr	r4, [pc, #300]	; 18c5c <__assert_fail@plt+0x7694>
   18b2c:	ldr	r3, [pc, #300]	; 18c60 <__assert_fail@plt+0x7698>
   18b30:	ldr	r1, [sp, #36]	; 0x24
   18b34:	ldr	r2, [r4]
   18b38:	cmp	r1, r3
   18b3c:	add	r3, sp, #40	; 0x28
   18b40:	str	r2, [sp, #4]
   18b44:	str	r3, [sp]
   18b48:	bne	18c14 <__assert_fail@plt+0x764c>
   18b4c:	ldr	r6, [pc, #272]	; 18c64 <__assert_fail@plt+0x769c>
   18b50:	add	r3, sp, #44	; 0x2c
   18b54:	str	r3, [sp]
   18b58:	ldr	r3, [r6]
   18b5c:	ldr	r7, [sp, #40]	; 0x28
   18b60:	cmp	r3, #0
   18b64:	blt	18ba8 <__assert_fail@plt+0x75e0>
   18b68:	mov	r2, r7
   18b6c:	mov	r8, r0
   18b70:	bl	114e4 <fcntl64@plt>
   18b74:	subs	r5, r0, #0
   18b78:	blt	18c24 <__assert_fail@plt+0x765c>
   18b7c:	mov	r3, #1
   18b80:	str	r3, [r6]
   18b84:	ldr	r2, [sp, #4]
   18b88:	ldr	r3, [r4]
   18b8c:	mov	r0, r5
   18b90:	cmp	r2, r3
   18b94:	bne	18c58 <__assert_fail@plt+0x7690>
   18b98:	add	sp, sp, #12
   18b9c:	pop	{r4, r5, r6, r7, r8, lr}
   18ba0:	add	sp, sp, #12
   18ba4:	bx	lr
   18ba8:	mov	r2, r7
   18bac:	mov	r1, #0
   18bb0:	bl	18b1c <__assert_fail@plt+0x7554>
   18bb4:	subs	r5, r0, #0
   18bb8:	blt	18b84 <__assert_fail@plt+0x75bc>
   18bbc:	ldr	r3, [r6]
   18bc0:	cmn	r3, #1
   18bc4:	bne	18b84 <__assert_fail@plt+0x75bc>
   18bc8:	mov	r1, #1
   18bcc:	mov	r0, r5
   18bd0:	bl	114e4 <fcntl64@plt>
   18bd4:	subs	r2, r0, #0
   18bd8:	blt	18bf4 <__assert_fail@plt+0x762c>
   18bdc:	orr	r2, r2, #1
   18be0:	mov	r1, #2
   18be4:	mov	r0, r5
   18be8:	bl	114e4 <fcntl64@plt>
   18bec:	cmn	r0, #1
   18bf0:	bne	18b84 <__assert_fail@plt+0x75bc>
   18bf4:	bl	11448 <__errno_location@plt>
   18bf8:	mov	r6, r0
   18bfc:	mov	r0, r5
   18c00:	ldr	r7, [r6]
   18c04:	mvn	r5, #0
   18c08:	bl	115bc <close@plt>
   18c0c:	str	r7, [r6]
   18c10:	b	18b84 <__assert_fail@plt+0x75bc>
   18c14:	ldr	r2, [sp, #40]	; 0x28
   18c18:	bl	114e4 <fcntl64@plt>
   18c1c:	mov	r5, r0
   18c20:	b	18b84 <__assert_fail@plt+0x75bc>
   18c24:	bl	11448 <__errno_location@plt>
   18c28:	ldr	r3, [r0]
   18c2c:	cmp	r3, #22
   18c30:	bne	18b7c <__assert_fail@plt+0x75b4>
   18c34:	mov	r2, r7
   18c38:	mov	r0, r8
   18c3c:	mov	r1, #0
   18c40:	bl	18b1c <__assert_fail@plt+0x7554>
   18c44:	subs	r5, r0, #0
   18c48:	mvnge	r3, #0
   18c4c:	strge	r3, [r6]
   18c50:	bge	18bc8 <__assert_fail@plt+0x7600>
   18c54:	b	18b84 <__assert_fail@plt+0x75bc>
   18c58:	bl	112e0 <__stack_chk_fail@plt>
   18c5c:	andeq	fp, r2, r8, lsl #30
   18c60:	andeq	r0, r0, r6, lsl #8
   18c64:	andeq	ip, r2, r0, lsl r3
   18c68:	push	{r4, lr}
   18c6c:	subs	r4, r0, #0
   18c70:	sub	sp, sp, #8
   18c74:	beq	18c90 <__assert_fail@plt+0x76c8>
   18c78:	bl	113dc <__freading@plt>
   18c7c:	cmp	r0, #0
   18c80:	beq	18c90 <__assert_fail@plt+0x76c8>
   18c84:	ldr	r3, [r4]
   18c88:	tst	r3, #256	; 0x100
   18c8c:	bne	18ca0 <__assert_fail@plt+0x76d8>
   18c90:	mov	r0, r4
   18c94:	add	sp, sp, #8
   18c98:	pop	{r4, lr}
   18c9c:	b	11250 <fflush@plt>
   18ca0:	mov	r3, #1
   18ca4:	str	r3, [sp]
   18ca8:	mov	r2, #0
   18cac:	mov	r3, #0
   18cb0:	mov	r0, r4
   18cb4:	bl	18cc8 <__assert_fail@plt+0x7700>
   18cb8:	mov	r0, r4
   18cbc:	add	sp, sp, #8
   18cc0:	pop	{r4, lr}
   18cc4:	b	11250 <fflush@plt>
   18cc8:	push	{r4, r5, r6, r7, r8, lr}
   18ccc:	sub	sp, sp, #8
   18cd0:	ldmib	r0, {ip, lr}
   18cd4:	mov	r4, r0
   18cd8:	ldr	r5, [sp, #32]
   18cdc:	cmp	lr, ip
   18ce0:	beq	18cf8 <__assert_fail@plt+0x7730>
   18ce4:	str	r5, [sp, #32]
   18ce8:	mov	r0, r4
   18cec:	add	sp, sp, #8
   18cf0:	pop	{r4, r5, r6, r7, r8, lr}
   18cf4:	b	114d8 <fseeko64@plt>
   18cf8:	ldr	lr, [r0, #20]
   18cfc:	ldr	ip, [r0, #16]
   18d00:	cmp	lr, ip
   18d04:	bne	18ce4 <__assert_fail@plt+0x771c>
   18d08:	ldr	r8, [r0, #36]	; 0x24
   18d0c:	cmp	r8, #0
   18d10:	bne	18ce4 <__assert_fail@plt+0x771c>
   18d14:	mov	r6, r2
   18d18:	mov	r7, r3
   18d1c:	bl	114b4 <fileno@plt>
   18d20:	mov	r2, r6
   18d24:	mov	r3, r7
   18d28:	str	r5, [sp]
   18d2c:	bl	11358 <lseek64@plt>
   18d30:	mvn	r3, #0
   18d34:	mvn	r2, #0
   18d38:	cmp	r1, r3
   18d3c:	cmpeq	r0, r2
   18d40:	beq	18d60 <__assert_fail@plt+0x7798>
   18d44:	ldr	r3, [r4]
   18d48:	strd	r0, [r4, #80]	; 0x50
   18d4c:	mov	r0, r8
   18d50:	bic	r3, r3, #16
   18d54:	str	r3, [r4]
   18d58:	add	sp, sp, #8
   18d5c:	pop	{r4, r5, r6, r7, r8, pc}
   18d60:	mvn	r0, #0
   18d64:	b	18d58 <__assert_fail@plt+0x7790>
   18d68:	push	{r4, r5, r6, r7, r8, lr}
   18d6c:	subs	r7, r0, #0
   18d70:	ldr	r5, [pc, #108]	; 18de4 <__assert_fail@plt+0x781c>
   18d74:	sub	sp, sp, #8
   18d78:	mov	r8, r1
   18d7c:	ldr	r1, [r5]
   18d80:	moveq	r7, sp
   18d84:	str	r1, [sp, #4]
   18d88:	mov	r0, r7
   18d8c:	mov	r1, r8
   18d90:	mov	r6, r2
   18d94:	bl	11394 <mbrtowc@plt>
   18d98:	cmp	r6, #0
   18d9c:	cmnne	r0, #3
   18da0:	mov	r4, r0
   18da4:	bhi	18dc4 <__assert_fail@plt+0x77fc>
   18da8:	ldr	r2, [sp, #4]
   18dac:	ldr	r3, [r5]
   18db0:	mov	r0, r4
   18db4:	cmp	r2, r3
   18db8:	bne	18de0 <__assert_fail@plt+0x7818>
   18dbc:	add	sp, sp, #8
   18dc0:	pop	{r4, r5, r6, r7, r8, pc}
   18dc4:	mov	r0, #0
   18dc8:	bl	18ef4 <__assert_fail@plt+0x792c>
   18dcc:	cmp	r0, #0
   18dd0:	moveq	r4, #1
   18dd4:	ldrbeq	r3, [r8]
   18dd8:	streq	r3, [r7]
   18ddc:	b	18da8 <__assert_fail@plt+0x77e0>
   18de0:	bl	112e0 <__stack_chk_fail@plt>
   18de4:	andeq	fp, r2, r8, lsl #30
   18de8:	push	{r4, r5, r6, lr}
   18dec:	mov	r4, r0
   18df0:	bl	11388 <__fpending@plt>
   18df4:	ldr	r5, [r4]
   18df8:	and	r5, r5, #32
   18dfc:	mov	r6, r0
   18e00:	mov	r0, r4
   18e04:	bl	18a7c <__assert_fail@plt+0x74b4>
   18e08:	cmp	r5, #0
   18e0c:	mov	r4, r0
   18e10:	bne	18e3c <__assert_fail@plt+0x7874>
   18e14:	cmp	r0, #0
   18e18:	beq	18e34 <__assert_fail@plt+0x786c>
   18e1c:	cmp	r6, #0
   18e20:	bne	18e54 <__assert_fail@plt+0x788c>
   18e24:	bl	11448 <__errno_location@plt>
   18e28:	ldr	r4, [r0]
   18e2c:	subs	r4, r4, #9
   18e30:	mvnne	r4, #0
   18e34:	mov	r0, r4
   18e38:	pop	{r4, r5, r6, pc}
   18e3c:	cmp	r0, #0
   18e40:	bne	18e54 <__assert_fail@plt+0x788c>
   18e44:	bl	11448 <__errno_location@plt>
   18e48:	str	r4, [r0]
   18e4c:	mvn	r4, #0
   18e50:	b	18e34 <__assert_fail@plt+0x786c>
   18e54:	mvn	r4, #0
   18e58:	b	18e34 <__assert_fail@plt+0x786c>
   18e5c:	push	{r4, r5, r6, lr}
   18e60:	mov	r5, r1
   18e64:	bl	11544 <fopen64@plt>
   18e68:	subs	r4, r0, #0
   18e6c:	beq	18e7c <__assert_fail@plt+0x78b4>
   18e70:	bl	114b4 <fileno@plt>
   18e74:	cmp	r0, #2
   18e78:	bls	18e84 <__assert_fail@plt+0x78bc>
   18e7c:	mov	r0, r4
   18e80:	pop	{r4, r5, r6, pc}
   18e84:	bl	18f74 <__assert_fail@plt+0x79ac>
   18e88:	subs	r6, r0, #0
   18e8c:	blt	18ed4 <__assert_fail@plt+0x790c>
   18e90:	mov	r0, r4
   18e94:	bl	18a7c <__assert_fail@plt+0x74b4>
   18e98:	cmp	r0, #0
   18e9c:	bne	18eb4 <__assert_fail@plt+0x78ec>
   18ea0:	mov	r1, r5
   18ea4:	mov	r0, r6
   18ea8:	bl	111fc <fdopen@plt>
   18eac:	subs	r4, r0, #0
   18eb0:	bne	18e7c <__assert_fail@plt+0x78b4>
   18eb4:	bl	11448 <__errno_location@plt>
   18eb8:	mov	r4, #0
   18ebc:	mov	r5, r0
   18ec0:	mov	r0, r6
   18ec4:	ldr	r6, [r5]
   18ec8:	bl	115bc <close@plt>
   18ecc:	str	r6, [r5]
   18ed0:	b	18e7c <__assert_fail@plt+0x78b4>
   18ed4:	bl	11448 <__errno_location@plt>
   18ed8:	mov	r5, r0
   18edc:	mov	r0, r4
   18ee0:	ldr	r6, [r5]
   18ee4:	mov	r4, #0
   18ee8:	bl	18a7c <__assert_fail@plt+0x74b4>
   18eec:	str	r6, [r5]
   18ef0:	b	18e7c <__assert_fail@plt+0x78b4>
   18ef4:	push	{r4, lr}
   18ef8:	mov	r1, #0
   18efc:	bl	114fc <setlocale@plt>
   18f00:	subs	r4, r0, #0
   18f04:	beq	18f30 <__assert_fail@plt+0x7968>
   18f08:	ldr	r1, [pc, #40]	; 18f38 <__assert_fail@plt+0x7970>
   18f0c:	bl	11238 <strcmp@plt>
   18f10:	cmp	r0, #0
   18f14:	popeq	{r4, pc}
   18f18:	mov	r0, r4
   18f1c:	ldr	r1, [pc, #24]	; 18f3c <__assert_fail@plt+0x7974>
   18f20:	bl	11238 <strcmp@plt>
   18f24:	adds	r0, r0, #0
   18f28:	movne	r0, #1
   18f2c:	pop	{r4, pc}
   18f30:	mov	r0, #1
   18f34:	pop	{r4, pc}
   18f38:	andeq	fp, r1, r4, lsr #1
   18f3c:	andeq	fp, r1, r8, lsr #1
   18f40:	push	{r4, lr}
   18f44:	mov	r0, #14
   18f48:	bl	11520 <nl_langinfo@plt>
   18f4c:	cmp	r0, #0
   18f50:	beq	18f68 <__assert_fail@plt+0x79a0>
   18f54:	ldrb	r2, [r0]
   18f58:	ldr	r3, [pc, #16]	; 18f70 <__assert_fail@plt+0x79a8>
   18f5c:	cmp	r2, #0
   18f60:	moveq	r0, r3
   18f64:	pop	{r4, pc}
   18f68:	ldr	r0, [pc]	; 18f70 <__assert_fail@plt+0x79a8>
   18f6c:	pop	{r4, pc}
   18f70:	strheq	fp, [r1], -r0
   18f74:	mov	r2, #3
   18f78:	mov	r1, #0
   18f7c:	b	18b1c <__assert_fail@plt+0x7554>
   18f80:	subs	r2, r1, #1
   18f84:	bxeq	lr
   18f88:	bcc	19160 <__assert_fail@plt+0x7b98>
   18f8c:	cmp	r0, r1
   18f90:	bls	19144 <__assert_fail@plt+0x7b7c>
   18f94:	tst	r1, r2
   18f98:	beq	19150 <__assert_fail@plt+0x7b88>
   18f9c:	clz	r3, r0
   18fa0:	clz	r2, r1
   18fa4:	sub	r3, r2, r3
   18fa8:	rsbs	r3, r3, #31
   18fac:	addne	r3, r3, r3, lsl #1
   18fb0:	mov	r2, #0
   18fb4:	addne	pc, pc, r3, lsl #2
   18fb8:	nop			; (mov r0, r0)
   18fbc:	cmp	r0, r1, lsl #31
   18fc0:	adc	r2, r2, r2
   18fc4:	subcs	r0, r0, r1, lsl #31
   18fc8:	cmp	r0, r1, lsl #30
   18fcc:	adc	r2, r2, r2
   18fd0:	subcs	r0, r0, r1, lsl #30
   18fd4:	cmp	r0, r1, lsl #29
   18fd8:	adc	r2, r2, r2
   18fdc:	subcs	r0, r0, r1, lsl #29
   18fe0:	cmp	r0, r1, lsl #28
   18fe4:	adc	r2, r2, r2
   18fe8:	subcs	r0, r0, r1, lsl #28
   18fec:	cmp	r0, r1, lsl #27
   18ff0:	adc	r2, r2, r2
   18ff4:	subcs	r0, r0, r1, lsl #27
   18ff8:	cmp	r0, r1, lsl #26
   18ffc:	adc	r2, r2, r2
   19000:	subcs	r0, r0, r1, lsl #26
   19004:	cmp	r0, r1, lsl #25
   19008:	adc	r2, r2, r2
   1900c:	subcs	r0, r0, r1, lsl #25
   19010:	cmp	r0, r1, lsl #24
   19014:	adc	r2, r2, r2
   19018:	subcs	r0, r0, r1, lsl #24
   1901c:	cmp	r0, r1, lsl #23
   19020:	adc	r2, r2, r2
   19024:	subcs	r0, r0, r1, lsl #23
   19028:	cmp	r0, r1, lsl #22
   1902c:	adc	r2, r2, r2
   19030:	subcs	r0, r0, r1, lsl #22
   19034:	cmp	r0, r1, lsl #21
   19038:	adc	r2, r2, r2
   1903c:	subcs	r0, r0, r1, lsl #21
   19040:	cmp	r0, r1, lsl #20
   19044:	adc	r2, r2, r2
   19048:	subcs	r0, r0, r1, lsl #20
   1904c:	cmp	r0, r1, lsl #19
   19050:	adc	r2, r2, r2
   19054:	subcs	r0, r0, r1, lsl #19
   19058:	cmp	r0, r1, lsl #18
   1905c:	adc	r2, r2, r2
   19060:	subcs	r0, r0, r1, lsl #18
   19064:	cmp	r0, r1, lsl #17
   19068:	adc	r2, r2, r2
   1906c:	subcs	r0, r0, r1, lsl #17
   19070:	cmp	r0, r1, lsl #16
   19074:	adc	r2, r2, r2
   19078:	subcs	r0, r0, r1, lsl #16
   1907c:	cmp	r0, r1, lsl #15
   19080:	adc	r2, r2, r2
   19084:	subcs	r0, r0, r1, lsl #15
   19088:	cmp	r0, r1, lsl #14
   1908c:	adc	r2, r2, r2
   19090:	subcs	r0, r0, r1, lsl #14
   19094:	cmp	r0, r1, lsl #13
   19098:	adc	r2, r2, r2
   1909c:	subcs	r0, r0, r1, lsl #13
   190a0:	cmp	r0, r1, lsl #12
   190a4:	adc	r2, r2, r2
   190a8:	subcs	r0, r0, r1, lsl #12
   190ac:	cmp	r0, r1, lsl #11
   190b0:	adc	r2, r2, r2
   190b4:	subcs	r0, r0, r1, lsl #11
   190b8:	cmp	r0, r1, lsl #10
   190bc:	adc	r2, r2, r2
   190c0:	subcs	r0, r0, r1, lsl #10
   190c4:	cmp	r0, r1, lsl #9
   190c8:	adc	r2, r2, r2
   190cc:	subcs	r0, r0, r1, lsl #9
   190d0:	cmp	r0, r1, lsl #8
   190d4:	adc	r2, r2, r2
   190d8:	subcs	r0, r0, r1, lsl #8
   190dc:	cmp	r0, r1, lsl #7
   190e0:	adc	r2, r2, r2
   190e4:	subcs	r0, r0, r1, lsl #7
   190e8:	cmp	r0, r1, lsl #6
   190ec:	adc	r2, r2, r2
   190f0:	subcs	r0, r0, r1, lsl #6
   190f4:	cmp	r0, r1, lsl #5
   190f8:	adc	r2, r2, r2
   190fc:	subcs	r0, r0, r1, lsl #5
   19100:	cmp	r0, r1, lsl #4
   19104:	adc	r2, r2, r2
   19108:	subcs	r0, r0, r1, lsl #4
   1910c:	cmp	r0, r1, lsl #3
   19110:	adc	r2, r2, r2
   19114:	subcs	r0, r0, r1, lsl #3
   19118:	cmp	r0, r1, lsl #2
   1911c:	adc	r2, r2, r2
   19120:	subcs	r0, r0, r1, lsl #2
   19124:	cmp	r0, r1, lsl #1
   19128:	adc	r2, r2, r2
   1912c:	subcs	r0, r0, r1, lsl #1
   19130:	cmp	r0, r1
   19134:	adc	r2, r2, r2
   19138:	subcs	r0, r0, r1
   1913c:	mov	r0, r2
   19140:	bx	lr
   19144:	moveq	r0, #1
   19148:	movne	r0, #0
   1914c:	bx	lr
   19150:	clz	r2, r1
   19154:	rsb	r2, r2, #31
   19158:	lsr	r0, r0, r2
   1915c:	bx	lr
   19160:	cmp	r0, #0
   19164:	mvnne	r0, #0
   19168:	b	1965c <__assert_fail@plt+0x8094>
   1916c:	cmp	r1, #0
   19170:	beq	19160 <__assert_fail@plt+0x7b98>
   19174:	push	{r0, r1, lr}
   19178:	bl	18f80 <__assert_fail@plt+0x79b8>
   1917c:	pop	{r1, r2, lr}
   19180:	mul	r3, r2, r0
   19184:	sub	r1, r1, r3
   19188:	bx	lr
   1918c:	eor	r1, r1, #-2147483648	; 0x80000000
   19190:	b	19198 <__assert_fail@plt+0x7bd0>
   19194:	eor	r3, r3, #-2147483648	; 0x80000000
   19198:	push	{r4, r5, lr}
   1919c:	lsl	r4, r1, #1
   191a0:	lsl	r5, r3, #1
   191a4:	teq	r4, r5
   191a8:	teqeq	r0, r2
   191ac:	orrsne	ip, r4, r0
   191b0:	orrsne	ip, r5, r2
   191b4:	mvnsne	ip, r4, asr #21
   191b8:	mvnsne	ip, r5, asr #21
   191bc:	beq	193a8 <__assert_fail@plt+0x7de0>
   191c0:	lsr	r4, r4, #21
   191c4:	rsbs	r5, r4, r5, lsr #21
   191c8:	rsblt	r5, r5, #0
   191cc:	ble	191ec <__assert_fail@plt+0x7c24>
   191d0:	add	r4, r4, r5
   191d4:	eor	r2, r0, r2
   191d8:	eor	r3, r1, r3
   191dc:	eor	r0, r2, r0
   191e0:	eor	r1, r3, r1
   191e4:	eor	r2, r0, r2
   191e8:	eor	r3, r1, r3
   191ec:	cmp	r5, #54	; 0x36
   191f0:	pophi	{r4, r5, pc}
   191f4:	tst	r1, #-2147483648	; 0x80000000
   191f8:	lsl	r1, r1, #12
   191fc:	mov	ip, #1048576	; 0x100000
   19200:	orr	r1, ip, r1, lsr #12
   19204:	beq	19210 <__assert_fail@plt+0x7c48>
   19208:	rsbs	r0, r0, #0
   1920c:	rsc	r1, r1, #0
   19210:	tst	r3, #-2147483648	; 0x80000000
   19214:	lsl	r3, r3, #12
   19218:	orr	r3, ip, r3, lsr #12
   1921c:	beq	19228 <__assert_fail@plt+0x7c60>
   19220:	rsbs	r2, r2, #0
   19224:	rsc	r3, r3, #0
   19228:	teq	r4, r5
   1922c:	beq	19390 <__assert_fail@plt+0x7dc8>
   19230:	sub	r4, r4, #1
   19234:	rsbs	lr, r5, #32
   19238:	blt	19254 <__assert_fail@plt+0x7c8c>
   1923c:	lsl	ip, r2, lr
   19240:	adds	r0, r0, r2, lsr r5
   19244:	adc	r1, r1, #0
   19248:	adds	r0, r0, r3, lsl lr
   1924c:	adcs	r1, r1, r3, asr r5
   19250:	b	19270 <__assert_fail@plt+0x7ca8>
   19254:	sub	r5, r5, #32
   19258:	add	lr, lr, #32
   1925c:	cmp	r2, #1
   19260:	lsl	ip, r3, lr
   19264:	orrcs	ip, ip, #2
   19268:	adds	r0, r0, r3, asr r5
   1926c:	adcs	r1, r1, r3, asr #31
   19270:	and	r5, r1, #-2147483648	; 0x80000000
   19274:	bpl	19284 <__assert_fail@plt+0x7cbc>
   19278:	rsbs	ip, ip, #0
   1927c:	rscs	r0, r0, #0
   19280:	rsc	r1, r1, #0
   19284:	cmp	r1, #1048576	; 0x100000
   19288:	bcc	192c8 <__assert_fail@plt+0x7d00>
   1928c:	cmp	r1, #2097152	; 0x200000
   19290:	bcc	192b0 <__assert_fail@plt+0x7ce8>
   19294:	lsrs	r1, r1, #1
   19298:	rrxs	r0, r0
   1929c:	rrx	ip, ip
   192a0:	add	r4, r4, #1
   192a4:	lsl	r2, r4, #21
   192a8:	cmn	r2, #4194304	; 0x400000
   192ac:	bcs	19408 <__assert_fail@plt+0x7e40>
   192b0:	cmp	ip, #-2147483648	; 0x80000000
   192b4:	lsrseq	ip, r0, #1
   192b8:	adcs	r0, r0, #0
   192bc:	adc	r1, r1, r4, lsl #20
   192c0:	orr	r1, r1, r5
   192c4:	pop	{r4, r5, pc}
   192c8:	lsls	ip, ip, #1
   192cc:	adcs	r0, r0, r0
   192d0:	adc	r1, r1, r1
   192d4:	tst	r1, #1048576	; 0x100000
   192d8:	sub	r4, r4, #1
   192dc:	bne	192b0 <__assert_fail@plt+0x7ce8>
   192e0:	teq	r1, #0
   192e4:	moveq	r1, r0
   192e8:	moveq	r0, #0
   192ec:	clz	r3, r1
   192f0:	addeq	r3, r3, #32
   192f4:	sub	r3, r3, #11
   192f8:	subs	r2, r3, #32
   192fc:	bge	19320 <__assert_fail@plt+0x7d58>
   19300:	adds	r2, r2, #12
   19304:	ble	1931c <__assert_fail@plt+0x7d54>
   19308:	add	ip, r2, #20
   1930c:	rsb	r2, r2, #12
   19310:	lsl	r0, r1, ip
   19314:	lsr	r1, r1, r2
   19318:	b	19330 <__assert_fail@plt+0x7d68>
   1931c:	add	r2, r2, #20
   19320:	rsble	ip, r2, #32
   19324:	lsl	r1, r1, r2
   19328:	orrle	r1, r1, r0, lsr ip
   1932c:	lslle	r0, r0, r2
   19330:	subs	r4, r4, r3
   19334:	addge	r1, r1, r4, lsl #20
   19338:	orrge	r1, r1, r5
   1933c:	popge	{r4, r5, pc}
   19340:	mvn	r4, r4
   19344:	subs	r4, r4, #31
   19348:	bge	19384 <__assert_fail@plt+0x7dbc>
   1934c:	adds	r4, r4, #12
   19350:	bgt	1936c <__assert_fail@plt+0x7da4>
   19354:	add	r4, r4, #20
   19358:	rsb	r2, r4, #32
   1935c:	lsr	r0, r0, r4
   19360:	orr	r0, r0, r1, lsl r2
   19364:	orr	r1, r5, r1, lsr r4
   19368:	pop	{r4, r5, pc}
   1936c:	rsb	r4, r4, #12
   19370:	rsb	r2, r4, #32
   19374:	lsr	r0, r0, r2
   19378:	orr	r0, r0, r1, lsl r4
   1937c:	mov	r1, r5
   19380:	pop	{r4, r5, pc}
   19384:	lsr	r0, r1, r4
   19388:	mov	r1, r5
   1938c:	pop	{r4, r5, pc}
   19390:	teq	r4, #0
   19394:	eor	r3, r3, #1048576	; 0x100000
   19398:	eoreq	r1, r1, #1048576	; 0x100000
   1939c:	addeq	r4, r4, #1
   193a0:	subne	r5, r5, #1
   193a4:	b	19230 <__assert_fail@plt+0x7c68>
   193a8:	mvns	ip, r4, asr #21
   193ac:	mvnsne	ip, r5, asr #21
   193b0:	beq	19418 <__assert_fail@plt+0x7e50>
   193b4:	teq	r4, r5
   193b8:	teqeq	r0, r2
   193bc:	beq	193d0 <__assert_fail@plt+0x7e08>
   193c0:	orrs	ip, r4, r0
   193c4:	moveq	r1, r3
   193c8:	moveq	r0, r2
   193cc:	pop	{r4, r5, pc}
   193d0:	teq	r1, r3
   193d4:	movne	r1, #0
   193d8:	movne	r0, #0
   193dc:	popne	{r4, r5, pc}
   193e0:	lsrs	ip, r4, #21
   193e4:	bne	193f8 <__assert_fail@plt+0x7e30>
   193e8:	lsls	r0, r0, #1
   193ec:	adcs	r1, r1, r1
   193f0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   193f4:	pop	{r4, r5, pc}
   193f8:	adds	r4, r4, #4194304	; 0x400000
   193fc:	addcc	r1, r1, #1048576	; 0x100000
   19400:	popcc	{r4, r5, pc}
   19404:	and	r5, r1, #-2147483648	; 0x80000000
   19408:	orr	r1, r5, #2130706432	; 0x7f000000
   1940c:	orr	r1, r1, #15728640	; 0xf00000
   19410:	mov	r0, #0
   19414:	pop	{r4, r5, pc}
   19418:	mvns	ip, r4, asr #21
   1941c:	movne	r1, r3
   19420:	movne	r0, r2
   19424:	mvnseq	ip, r5, asr #21
   19428:	movne	r3, r1
   1942c:	movne	r2, r0
   19430:	orrs	r4, r0, r1, lsl #12
   19434:	orrseq	r5, r2, r3, lsl #12
   19438:	teqeq	r1, r3
   1943c:	orrne	r1, r1, #524288	; 0x80000
   19440:	pop	{r4, r5, pc}
   19444:	teq	r0, #0
   19448:	moveq	r1, #0
   1944c:	bxeq	lr
   19450:	push	{r4, r5, lr}
   19454:	mov	r4, #1024	; 0x400
   19458:	add	r4, r4, #50	; 0x32
   1945c:	mov	r5, #0
   19460:	mov	r1, #0
   19464:	b	192e0 <__assert_fail@plt+0x7d18>
   19468:	teq	r0, #0
   1946c:	moveq	r1, #0
   19470:	bxeq	lr
   19474:	push	{r4, r5, lr}
   19478:	mov	r4, #1024	; 0x400
   1947c:	add	r4, r4, #50	; 0x32
   19480:	ands	r5, r0, #-2147483648	; 0x80000000
   19484:	rsbmi	r0, r0, #0
   19488:	mov	r1, #0
   1948c:	b	192e0 <__assert_fail@plt+0x7d18>
   19490:	lsls	r2, r0, #1
   19494:	asr	r1, r2, #3
   19498:	rrx	r1, r1
   1949c:	lsl	r0, r2, #28
   194a0:	andsne	r3, r2, #-16777216	; 0xff000000
   194a4:	teqne	r3, #-16777216	; 0xff000000
   194a8:	eorne	r1, r1, #939524096	; 0x38000000
   194ac:	bxne	lr
   194b0:	bics	r2, r2, #-16777216	; 0xff000000
   194b4:	bxeq	lr
   194b8:	teq	r3, #-16777216	; 0xff000000
   194bc:	orreq	r1, r1, #524288	; 0x80000
   194c0:	bxeq	lr
   194c4:	push	{r4, r5, lr}
   194c8:	mov	r4, #896	; 0x380
   194cc:	and	r5, r1, #-2147483648	; 0x80000000
   194d0:	bic	r1, r1, #-2147483648	; 0x80000000
   194d4:	b	192e0 <__assert_fail@plt+0x7d18>
   194d8:	orrs	r2, r0, r1
   194dc:	bxeq	lr
   194e0:	push	{r4, r5, lr}
   194e4:	mov	r5, #0
   194e8:	b	19508 <__assert_fail@plt+0x7f40>
   194ec:	orrs	r2, r0, r1
   194f0:	bxeq	lr
   194f4:	push	{r4, r5, lr}
   194f8:	ands	r5, r1, #-2147483648	; 0x80000000
   194fc:	bpl	19508 <__assert_fail@plt+0x7f40>
   19500:	rsbs	r0, r0, #0
   19504:	rsc	r1, r1, #0
   19508:	mov	r4, #1024	; 0x400
   1950c:	add	r4, r4, #50	; 0x32
   19510:	lsrs	ip, r1, #22
   19514:	beq	19284 <__assert_fail@plt+0x7cbc>
   19518:	mov	r2, #3
   1951c:	lsrs	ip, ip, #3
   19520:	addne	r2, r2, #3
   19524:	lsrs	ip, ip, #3
   19528:	addne	r2, r2, #3
   1952c:	add	r2, r2, ip, lsr #3
   19530:	rsb	r3, r2, #32
   19534:	lsl	ip, r0, r3
   19538:	lsr	r0, r0, r2
   1953c:	orr	r0, r0, r1, lsl r3
   19540:	lsr	r1, r1, r2
   19544:	add	r4, r4, r2
   19548:	b	19284 <__assert_fail@plt+0x7cbc>
   1954c:	cmp	r3, #0
   19550:	cmpeq	r2, #0
   19554:	bne	19578 <__assert_fail@plt+0x7fb0>
   19558:	cmp	r1, #0
   1955c:	movlt	r1, #-2147483648	; 0x80000000
   19560:	movlt	r0, #0
   19564:	blt	19574 <__assert_fail@plt+0x7fac>
   19568:	cmpeq	r0, #0
   1956c:	mvnne	r1, #-2147483648	; 0x80000000
   19570:	mvnne	r0, #0
   19574:	b	1965c <__assert_fail@plt+0x8094>
   19578:	sub	sp, sp, #8
   1957c:	push	{sp, lr}
   19580:	cmp	r1, #0
   19584:	blt	195a4 <__assert_fail@plt+0x7fdc>
   19588:	cmp	r3, #0
   1958c:	blt	195d8 <__assert_fail@plt+0x8010>
   19590:	bl	196b0 <__assert_fail@plt+0x80e8>
   19594:	ldr	lr, [sp, #4]
   19598:	add	sp, sp, #8
   1959c:	pop	{r2, r3}
   195a0:	bx	lr
   195a4:	rsbs	r0, r0, #0
   195a8:	sbc	r1, r1, r1, lsl #1
   195ac:	cmp	r3, #0
   195b0:	blt	195fc <__assert_fail@plt+0x8034>
   195b4:	bl	196b0 <__assert_fail@plt+0x80e8>
   195b8:	ldr	lr, [sp, #4]
   195bc:	add	sp, sp, #8
   195c0:	pop	{r2, r3}
   195c4:	rsbs	r0, r0, #0
   195c8:	sbc	r1, r1, r1, lsl #1
   195cc:	rsbs	r2, r2, #0
   195d0:	sbc	r3, r3, r3, lsl #1
   195d4:	bx	lr
   195d8:	rsbs	r2, r2, #0
   195dc:	sbc	r3, r3, r3, lsl #1
   195e0:	bl	196b0 <__assert_fail@plt+0x80e8>
   195e4:	ldr	lr, [sp, #4]
   195e8:	add	sp, sp, #8
   195ec:	pop	{r2, r3}
   195f0:	rsbs	r0, r0, #0
   195f4:	sbc	r1, r1, r1, lsl #1
   195f8:	bx	lr
   195fc:	rsbs	r2, r2, #0
   19600:	sbc	r3, r3, r3, lsl #1
   19604:	bl	196b0 <__assert_fail@plt+0x80e8>
   19608:	ldr	lr, [sp, #4]
   1960c:	add	sp, sp, #8
   19610:	pop	{r2, r3}
   19614:	rsbs	r2, r2, #0
   19618:	sbc	r3, r3, r3, lsl #1
   1961c:	bx	lr
   19620:	cmp	r3, #0
   19624:	cmpeq	r2, #0
   19628:	bne	19640 <__assert_fail@plt+0x8078>
   1962c:	cmp	r1, #0
   19630:	cmpeq	r0, #0
   19634:	mvnne	r1, #0
   19638:	mvnne	r0, #0
   1963c:	b	1965c <__assert_fail@plt+0x8094>
   19640:	sub	sp, sp, #8
   19644:	push	{sp, lr}
   19648:	bl	196b0 <__assert_fail@plt+0x80e8>
   1964c:	ldr	lr, [sp, #4]
   19650:	add	sp, sp, #8
   19654:	pop	{r2, r3}
   19658:	bx	lr
   1965c:	push	{r1, lr}
   19660:	mov	r0, #8
   19664:	bl	11220 <raise@plt>
   19668:	pop	{r1, pc}
   1966c:	andeq	r0, r0, r0
   19670:	vmov	d6, r0, r1
   19674:	vldr	d7, [pc, #36]	; 196a0 <__assert_fail@plt+0x80d8>
   19678:	vldr	d5, [pc, #40]	; 196a8 <__assert_fail@plt+0x80e0>
   1967c:	vmul.f64	d7, d6, d7
   19680:	vcvt.u32.f64	s14, d7
   19684:	vcvt.f64.u32	d4, s14
   19688:	vmov	r1, s14
   1968c:	vmls.f64	d6, d4, d5
   19690:	vcvt.u32.f64	s15, d6
   19694:	vmov	r0, s15
   19698:	bx	lr
   1969c:	nop			; (mov r0, r0)
   196a0:	andeq	r0, r0, r0
   196a4:	ldclcc	0, cr0, [r0]
   196a8:	andeq	r0, r0, r0
   196ac:	mvnsmi	r0, r0
   196b0:	cmp	r1, r3
   196b4:	cmpeq	r0, r2
   196b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196bc:	mov	r4, r0
   196c0:	movcc	r0, #0
   196c4:	mov	r5, r1
   196c8:	ldr	lr, [sp, #36]	; 0x24
   196cc:	movcc	r1, r0
   196d0:	bcc	197cc <__assert_fail@plt+0x8204>
   196d4:	cmp	r3, #0
   196d8:	clzeq	ip, r2
   196dc:	clzne	ip, r3
   196e0:	addeq	ip, ip, #32
   196e4:	cmp	r5, #0
   196e8:	clzeq	r1, r4
   196ec:	addeq	r1, r1, #32
   196f0:	clzne	r1, r5
   196f4:	sub	ip, ip, r1
   196f8:	sub	sl, ip, #32
   196fc:	lsl	r9, r3, ip
   19700:	rsb	fp, ip, #32
   19704:	orr	r9, r9, r2, lsl sl
   19708:	orr	r9, r9, r2, lsr fp
   1970c:	lsl	r8, r2, ip
   19710:	cmp	r5, r9
   19714:	cmpeq	r4, r8
   19718:	movcc	r0, #0
   1971c:	movcc	r1, r0
   19720:	bcc	1973c <__assert_fail@plt+0x8174>
   19724:	mov	r0, #1
   19728:	subs	r4, r4, r8
   1972c:	lsl	r1, r0, sl
   19730:	orr	r1, r1, r0, lsr fp
   19734:	lsl	r0, r0, ip
   19738:	sbc	r5, r5, r9
   1973c:	cmp	ip, #0
   19740:	beq	197cc <__assert_fail@plt+0x8204>
   19744:	lsr	r6, r8, #1
   19748:	orr	r6, r6, r9, lsl #31
   1974c:	lsr	r7, r9, #1
   19750:	mov	r2, ip
   19754:	b	19778 <__assert_fail@plt+0x81b0>
   19758:	subs	r3, r4, r6
   1975c:	sbc	r8, r5, r7
   19760:	adds	r3, r3, r3
   19764:	adc	r8, r8, r8
   19768:	adds	r4, r3, #1
   1976c:	adc	r5, r8, #0
   19770:	subs	r2, r2, #1
   19774:	beq	19794 <__assert_fail@plt+0x81cc>
   19778:	cmp	r5, r7
   1977c:	cmpeq	r4, r6
   19780:	bcs	19758 <__assert_fail@plt+0x8190>
   19784:	adds	r4, r4, r4
   19788:	adc	r5, r5, r5
   1978c:	subs	r2, r2, #1
   19790:	bne	19778 <__assert_fail@plt+0x81b0>
   19794:	lsr	r3, r4, ip
   19798:	orr	r3, r3, r5, lsl fp
   1979c:	lsr	r2, r5, ip
   197a0:	orr	r3, r3, r5, lsr sl
   197a4:	adds	r0, r0, r4
   197a8:	mov	r4, r3
   197ac:	lsl	r3, r2, ip
   197b0:	orr	r3, r3, r4, lsl sl
   197b4:	lsl	ip, r4, ip
   197b8:	orr	r3, r3, r4, lsr fp
   197bc:	adc	r1, r1, r5
   197c0:	subs	r0, r0, ip
   197c4:	mov	r5, r2
   197c8:	sbc	r1, r1, r3
   197cc:	cmp	lr, #0
   197d0:	strdne	r4, [lr]
   197d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197dc:	mov	r7, r0
   197e0:	ldr	r6, [pc, #72]	; 19830 <__assert_fail@plt+0x8268>
   197e4:	ldr	r5, [pc, #72]	; 19834 <__assert_fail@plt+0x826c>
   197e8:	add	r6, pc, r6
   197ec:	add	r5, pc, r5
   197f0:	sub	r6, r6, r5
   197f4:	mov	r8, r1
   197f8:	mov	r9, r2
   197fc:	bl	111dc <fdopen@plt-0x20>
   19800:	asrs	r6, r6, #2
   19804:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19808:	mov	r4, #0
   1980c:	add	r4, r4, #1
   19810:	ldr	r3, [r5], #4
   19814:	mov	r2, r9
   19818:	mov	r1, r8
   1981c:	mov	r0, r7
   19820:	blx	r3
   19824:	cmp	r6, r4
   19828:	bne	1980c <__assert_fail@plt+0x8244>
   1982c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19830:	andeq	r2, r1, r4, lsl r7
   19834:	andeq	r2, r1, ip, lsl #14
   19838:	bx	lr
   1983c:	ldr	r3, [pc, #12]	; 19850 <__assert_fail@plt+0x8288>
   19840:	mov	r1, #0
   19844:	add	r3, pc, r3
   19848:	ldr	r2, [r3]
   1984c:	b	11460 <__cxa_atexit@plt>
   19850:	andeq	r2, r1, r0, lsl r9

Disassembly of section .fini:

00019854 <.fini>:
   19854:	push	{r3, lr}
   19858:	pop	{r3, pc}
