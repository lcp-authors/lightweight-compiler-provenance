
raspbian-preinstalled/sane-find-scanner:     file format elf32-littlearm


Disassembly of section .init:

00011794 <.init>:
   11794:	push	{r3, lr}
   11798:	bl	12fcc <__assert_fail@plt+0x1344>
   1179c:	pop	{r3, pc}

Disassembly of section .plt:

000117a0 <calloc@plt-0x14>:
   117a0:	push	{lr}		; (str lr, [sp, #-4]!)
   117a4:	ldr	lr, [pc, #4]	; 117b0 <calloc@plt-0x4>
   117a8:	add	lr, pc, lr
   117ac:	ldr	pc, [lr, #8]!
   117b0:	andeq	r6, r2, ip, ror r6

000117b4 <calloc@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #155648	; 0x26000
   117bc:	ldr	pc, [ip, #1660]!	; 0x67c

000117c0 <strstr@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #155648	; 0x26000
   117c8:	ldr	pc, [ip, #1652]!	; 0x674

000117cc <raise@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #155648	; 0x26000
   117d4:	ldr	pc, [ip, #1644]!	; 0x66c

000117d8 <ieee1284_release@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #155648	; 0x26000
   117e0:	ldr	pc, [ip, #1636]!	; 0x664

000117e4 <strcmp@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #155648	; 0x26000
   117ec:	ldr	pc, [ip, #1628]!	; 0x65c

000117f0 <libusb_open@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #155648	; 0x26000
   117f8:	ldr	pc, [ip, #1620]!	; 0x654

000117fc <strtol@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #155648	; 0x26000
   11804:	ldr	pc, [ip, #1612]!	; 0x64c

00011808 <ieee1284_epp_read_data@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #155648	; 0x26000
   11810:	ldr	pc, [ip, #1604]!	; 0x644

00011814 <fopen@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #155648	; 0x26000
   1181c:	ldr	pc, [ip, #1596]!	; 0x63c

00011820 <libusb_interrupt_transfer@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #155648	; 0x26000
   11828:	ldr	pc, [ip, #1588]!	; 0x634

0001182c <read@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #155648	; 0x26000
   11834:	ldr	pc, [ip, #1580]!	; 0x62c

00011838 <getuid@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #155648	; 0x26000
   11840:	ldr	pc, [ip, #1572]!	; 0x624

00011844 <sigprocmask@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #155648	; 0x26000
   1184c:	ldr	pc, [ip, #1564]!	; 0x61c

00011850 <free@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #155648	; 0x26000
   11858:	ldr	pc, [ip, #1556]!	; 0x614

0001185c <fgets@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #155648	; 0x26000
   11864:	ldr	pc, [ip, #1548]!	; 0x60c

00011868 <ferror@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #155648	; 0x26000
   11870:	ldr	pc, [ip, #1540]!	; 0x604

00011874 <strndup@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #155648	; 0x26000
   1187c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011880 <memcpy@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #155648	; 0x26000
   11888:	ldr	pc, [ip, #1524]!	; 0x5f4

0001188c <ieee1284_claim@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #155648	; 0x26000
   11894:	ldr	pc, [ip, #1516]!	; 0x5ec

00011898 <ieee1284_find_ports@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #155648	; 0x26000
   118a0:	ldr	pc, [ip, #1508]!	; 0x5e4

000118a4 <ieee1284_open@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #155648	; 0x26000
   118ac:	ldr	pc, [ip, #1500]!	; 0x5dc

000118b0 <libusb_set_interface_alt_setting@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #155648	; 0x26000
   118b8:	ldr	pc, [ip, #1492]!	; 0x5d4

000118bc <select@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #155648	; 0x26000
   118c4:	ldr	pc, [ip, #1484]!	; 0x5cc

000118c8 <strdup@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #155648	; 0x26000
   118d0:	ldr	pc, [ip, #1476]!	; 0x5c4

000118d4 <libusb_release_interface@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #155648	; 0x26000
   118dc:	ldr	pc, [ip, #1468]!	; 0x5bc

000118e0 <__stack_chk_fail@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #155648	; 0x26000
   118e8:	ldr	pc, [ip, #1460]!	; 0x5b4

000118ec <isfdtype@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #155648	; 0x26000
   118f4:	ldr	pc, [ip, #1452]!	; 0x5ac

000118f8 <libusb_set_debug@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #155648	; 0x26000
   11900:	ldr	pc, [ip, #1444]!	; 0x5a4

00011904 <sysconf@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #155648	; 0x26000
   1190c:	ldr	pc, [ip, #1436]!	; 0x59c

00011910 <realloc@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #155648	; 0x26000
   11918:	ldr	pc, [ip, #1428]!	; 0x594

0001191c <libusb_close@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #155648	; 0x26000
   11924:	ldr	pc, [ip, #1420]!	; 0x58c

00011928 <__fdelt_chk@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #155648	; 0x26000
   11930:	ldr	pc, [ip, #1412]!	; 0x584

00011934 <ieee1284_free_ports@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #155648	; 0x26000
   1193c:	ldr	pc, [ip, #1404]!	; 0x57c

00011940 <ieee1284_read_control@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #155648	; 0x26000
   11948:	ldr	pc, [ip, #1396]!	; 0x574

0001194c <__xstat@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #155648	; 0x26000
   11954:	ldr	pc, [ip, #1388]!	; 0x56c

00011958 <libusb_free_config_descriptor@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #155648	; 0x26000
   11960:	ldr	pc, [ip, #1380]!	; 0x564

00011964 <fwrite@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #155648	; 0x26000
   1196c:	ldr	pc, [ip, #1372]!	; 0x55c

00011970 <ioctl@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #155648	; 0x26000
   11978:	ldr	pc, [ip, #1364]!	; 0x554

0001197c <libusb_get_config_descriptor@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #155648	; 0x26000
   11984:	ldr	pc, [ip, #1356]!	; 0x54c

00011988 <usleep@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #155648	; 0x26000
   11990:	ldr	pc, [ip, #1348]!	; 0x544

00011994 <__vsyslog_chk@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #155648	; 0x26000
   1199c:	ldr	pc, [ip, #1340]!	; 0x53c

000119a0 <strcpy@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #155648	; 0x26000
   119a8:	ldr	pc, [ip, #1332]!	; 0x534

000119ac <fread@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #155648	; 0x26000
   119b4:	ldr	pc, [ip, #1324]!	; 0x52c

000119b8 <libusb_get_configuration@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #155648	; 0x26000
   119c0:	ldr	pc, [ip, #1316]!	; 0x524

000119c4 <ieee1284_write_control@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #155648	; 0x26000
   119cc:	ldr	pc, [ip, #1308]!	; 0x51c

000119d0 <opendir@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #155648	; 0x26000
   119d8:	ldr	pc, [ip, #1300]!	; 0x514

000119dc <libusb_clear_halt@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #155648	; 0x26000
   119e4:	ldr	pc, [ip, #1292]!	; 0x50c

000119e8 <getenv@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #155648	; 0x26000
   119f0:	ldr	pc, [ip, #1284]!	; 0x504

000119f4 <puts@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #155648	; 0x26000
   119fc:	ldr	pc, [ip, #1276]!	; 0x4fc

00011a00 <malloc@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #155648	; 0x26000
   11a08:	ldr	pc, [ip, #1268]!	; 0x4f4

00011a0c <__libc_start_main@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #155648	; 0x26000
   11a14:	ldr	pc, [ip, #1260]!	; 0x4ec

00011a18 <strerror@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #155648	; 0x26000
   11a20:	ldr	pc, [ip, #1252]!	; 0x4e4

00011a24 <system@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #155648	; 0x26000
   11a2c:	ldr	pc, [ip, #1244]!	; 0x4dc

00011a30 <__vfprintf_chk@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #155648	; 0x26000
   11a38:	ldr	pc, [ip, #1236]!	; 0x4d4

00011a3c <ieee1284_close@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #155648	; 0x26000
   11a44:	ldr	pc, [ip, #1228]!	; 0x4cc

00011a48 <strsep@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #155648	; 0x26000
   11a50:	ldr	pc, [ip, #1220]!	; 0x4c4

00011a54 <__gmon_start__@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #155648	; 0x26000
   11a5c:	ldr	pc, [ip, #1212]!	; 0x4bc

00011a60 <open@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #155648	; 0x26000
   11a68:	ldr	pc, [ip, #1204]!	; 0x4b4

00011a6c <__ctype_b_loc@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #155648	; 0x26000
   11a74:	ldr	pc, [ip, #1196]!	; 0x4ac

00011a78 <libusb_get_bus_number@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #155648	; 0x26000
   11a80:	ldr	pc, [ip, #1188]!	; 0x4a4

00011a84 <exit@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #155648	; 0x26000
   11a8c:	ldr	pc, [ip, #1180]!	; 0x49c

00011a90 <feof@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #155648	; 0x26000
   11a98:	ldr	pc, [ip, #1172]!	; 0x494

00011a9c <ieee1284_write_data@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #155648	; 0x26000
   11aa4:	ldr	pc, [ip, #1164]!	; 0x48c

00011aa8 <strlen@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #155648	; 0x26000
   11ab0:	ldr	pc, [ip, #1156]!	; 0x484

00011ab4 <libusb_get_device_list@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #155648	; 0x26000
   11abc:	ldr	pc, [ip, #1148]!	; 0x47c

00011ac0 <sigfillset@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #155648	; 0x26000
   11ac8:	ldr	pc, [ip, #1140]!	; 0x474

00011acc <__errno_location@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #155648	; 0x26000
   11ad4:	ldr	pc, [ip, #1132]!	; 0x46c

00011ad8 <strncasecmp@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #155648	; 0x26000
   11ae0:	ldr	pc, [ip, #1124]!	; 0x464

00011ae4 <__sprintf_chk@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #155648	; 0x26000
   11aec:	ldr	pc, [ip, #1116]!	; 0x45c

00011af0 <libusb_bulk_transfer@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #155648	; 0x26000
   11af8:	ldr	pc, [ip, #1108]!	; 0x454

00011afc <fcntl@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #155648	; 0x26000
   11b04:	ldr	pc, [ip, #1100]!	; 0x44c

00011b08 <memset@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #155648	; 0x26000
   11b10:	ldr	pc, [ip, #1092]!	; 0x444

00011b14 <putchar@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #155648	; 0x26000
   11b1c:	ldr	pc, [ip, #1084]!	; 0x43c

00011b20 <strncpy@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #155648	; 0x26000
   11b28:	ldr	pc, [ip, #1076]!	; 0x434

00011b2c <__printf_chk@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #155648	; 0x26000
   11b34:	ldr	pc, [ip, #1068]!	; 0x42c

00011b38 <strtod@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #155648	; 0x26000
   11b40:	ldr	pc, [ip, #1060]!	; 0x424

00011b44 <write@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #155648	; 0x26000
   11b4c:	ldr	pc, [ip, #1052]!	; 0x41c

00011b50 <fileno@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #155648	; 0x26000
   11b58:	ldr	pc, [ip, #1044]!	; 0x414

00011b5c <libusb_set_configuration@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #155648	; 0x26000
   11b64:	ldr	pc, [ip, #1036]!	; 0x40c

00011b68 <__fprintf_chk@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #155648	; 0x26000
   11b70:	ldr	pc, [ip, #1028]!	; 0x404

00011b74 <fclose@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #155648	; 0x26000
   11b7c:	ldr	pc, [ip, #1020]!	; 0x3fc

00011b80 <libusb_reset_device@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #155648	; 0x26000
   11b88:	ldr	pc, [ip, #1012]!	; 0x3f4

00011b8c <__syslog_chk@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #155648	; 0x26000
   11b94:	ldr	pc, [ip, #1004]!	; 0x3ec

00011b98 <libusb_exit@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #155648	; 0x26000
   11ba0:	ldr	pc, [ip, #996]!	; 0x3e4

00011ba4 <libusb_init@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #155648	; 0x26000
   11bac:	ldr	pc, [ip, #988]!	; 0x3dc

00011bb0 <readdir@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #155648	; 0x26000
   11bb8:	ldr	pc, [ip, #980]!	; 0x3d4

00011bbc <libusb_get_device_descriptor@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #155648	; 0x26000
   11bc4:	ldr	pc, [ip, #972]!	; 0x3cc

00011bc8 <strrchr@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #155648	; 0x26000
   11bd0:	ldr	pc, [ip, #964]!	; 0x3c4

00011bd4 <libusb_free_device_list@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #155648	; 0x26000
   11bdc:	ldr	pc, [ip, #956]!	; 0x3bc

00011be0 <readdir_r@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #155648	; 0x26000
   11be8:	ldr	pc, [ip, #948]!	; 0x3b4

00011bec <libusb_claim_interface@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #155648	; 0x26000
   11bf4:	ldr	pc, [ip, #940]!	; 0x3ac

00011bf8 <ieee1284_epp_write_addr@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #155648	; 0x26000
   11c00:	ldr	pc, [ip, #932]!	; 0x3a4

00011c04 <ieee1284_read_status@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #155648	; 0x26000
   11c0c:	ldr	pc, [ip, #924]!	; 0x39c

00011c10 <sscanf@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #155648	; 0x26000
   11c18:	ldr	pc, [ip, #916]!	; 0x394

00011c1c <libusb_control_transfer@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #155648	; 0x26000
   11c24:	ldr	pc, [ip, #908]!	; 0x38c

00011c28 <libusb_ref_device@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #155648	; 0x26000
   11c30:	ldr	pc, [ip, #900]!	; 0x384

00011c34 <ieee1284_read_data@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #155648	; 0x26000
   11c3c:	ldr	pc, [ip, #892]!	; 0x37c

00011c40 <strncmp@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #155648	; 0x26000
   11c48:	ldr	pc, [ip, #884]!	; 0x374

00011c4c <abort@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #155648	; 0x26000
   11c54:	ldr	pc, [ip, #876]!	; 0x36c

00011c58 <close@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #155648	; 0x26000
   11c60:	ldr	pc, [ip, #868]!	; 0x364

00011c64 <libusb_get_device_address@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #155648	; 0x26000
   11c6c:	ldr	pc, [ip, #860]!	; 0x35c

00011c70 <closedir@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #155648	; 0x26000
   11c78:	ldr	pc, [ip, #852]!	; 0x354

00011c7c <__snprintf_chk@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #155648	; 0x26000
   11c84:	ldr	pc, [ip, #844]!	; 0x34c

00011c88 <__assert_fail@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #155648	; 0x26000
   11c90:	ldr	pc, [ip, #836]!	; 0x344

Disassembly of section .text:

00011c98 <.text>:
   11c98:	ldr	r3, [pc, #3284]	; 12974 <__assert_fail@plt+0xcec>
   11c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ca0:	sub	sp, sp, #124	; 0x7c
   11ca4:	ldr	r6, [r1]
   11ca8:	ldr	r3, [r3]
   11cac:	mov	r5, r1
   11cb0:	mov	r4, r0
   11cb4:	mov	r1, #47	; 0x2f
   11cb8:	mov	r0, r6
   11cbc:	str	r3, [sp, #116]	; 0x74
   11cc0:	bl	11bc8 <strrchr@plt>
   11cc4:	ldr	fp, [pc, #3244]	; 12978 <__assert_fail@plt+0xcf0>
   11cc8:	add	r4, r5, r4, lsl #2
   11ccc:	add	r9, r5, #4
   11cd0:	ldr	r1, [fp]
   11cd4:	cmp	r0, #0
   11cd8:	addne	r6, r0, #1
   11cdc:	ldr	r0, [pc, #3224]	; 1297c <__assert_fail@plt+0xcf4>
   11ce0:	cmp	r9, r4
   11ce4:	str	r6, [r0, #12]
   11ce8:	bcs	12504 <__assert_fail@plt+0x87c>
   11cec:	ldr	r2, [r5, #4]
   11cf0:	ldrb	r3, [r2]
   11cf4:	cmp	r3, #45	; 0x2d
   11cf8:	mov	r3, #0
   11cfc:	bne	12510 <__assert_fail@plt+0x888>
   11d00:	ldr	lr, [r0]
   11d04:	add	r5, r5, #8
   11d08:	mov	ip, r3
   11d0c:	str	r3, [sp, #24]
   11d10:	ldrb	r2, [r2, #1]
   11d14:	sub	r0, r2, #63	; 0x3f
   11d18:	cmp	r0, #55	; 0x37
   11d1c:	ldrls	pc, [pc, r0, lsl #2]
   11d20:	b	11f74 <__assert_fail@plt+0x2ec>
   11d24:			; <UNDEFINED> instruction: 0x00011eb8
   11d28:	andeq	r1, r1, r4, ror pc
   11d2c:	andeq	r1, r1, r4, ror pc
   11d30:	andeq	r1, r1, r4, ror pc
   11d34:	andeq	r1, r1, r4, ror pc
   11d38:	andeq	r1, r1, r4, ror pc
   11d3c:	andeq	r1, r1, r4, ror pc
   11d40:	muleq	r1, r4, lr
   11d44:	andeq	r1, r1, r4, ror pc
   11d48:	andeq	r1, r1, r4, ror pc
   11d4c:	andeq	r1, r1, r4, ror pc
   11d50:	andeq	r1, r1, r4, ror pc
   11d54:	andeq	r1, r1, r4, ror pc
   11d58:	andeq	r1, r1, r4, ror pc
   11d5c:	andeq	r1, r1, r4, ror pc
   11d60:	andeq	r1, r1, r4, ror pc
   11d64:	andeq	r1, r1, r4, ror pc
   11d68:	andeq	r1, r1, r4, ror pc
   11d6c:	andeq	r1, r1, r4, ror pc
   11d70:	andeq	r1, r1, r4, ror pc
   11d74:	andeq	r1, r1, r4, ror pc
   11d78:	andeq	r1, r1, r4, ror pc
   11d7c:	andeq	r1, r1, r4, ror pc
   11d80:	andeq	r1, r1, r4, ror pc
   11d84:	andeq	r1, r1, r4, ror pc
   11d88:	andeq	r1, r1, r4, ror pc
   11d8c:	andeq	r1, r1, r4, ror pc
   11d90:	andeq	r1, r1, r4, ror pc
   11d94:	andeq	r1, r1, r4, ror pc
   11d98:	andeq	r1, r1, r4, ror pc
   11d9c:	andeq	r1, r1, r4, ror pc
   11da0:	andeq	r1, r1, r4, ror pc
   11da4:	andeq	r1, r1, r4, ror pc
   11da8:	andeq	r1, r1, r4, ror pc
   11dac:	andeq	r1, r1, r4, ror pc
   11db0:	andeq	r1, r1, r4, ror pc
   11db4:	andeq	r1, r1, r4, ror pc
   11db8:	andeq	r1, r1, r4, ror pc
   11dbc:	andeq	r1, r1, r4, ror pc
   11dc0:	andeq	r1, r1, r8, ror #30
   11dc4:	andeq	r1, r1, r4, ror pc
   11dc8:			; <UNDEFINED> instruction: 0x00011eb8
   11dcc:	andeq	r1, r1, r4, ror pc
   11dd0:	andeq	r1, r1, r4, ror pc
   11dd4:	andeq	r1, r1, r4, ror pc
   11dd8:	andeq	r1, r1, r4, ror pc
   11ddc:	andeq	r1, r1, r4, ror pc
   11de0:	andeq	r1, r1, r4, ror pc
   11de4:	andeq	r1, r1, r4, ror pc
   11de8:	andeq	r1, r1, r4, lsl #28
   11dec:	andeq	r1, r1, ip, asr pc
   11df0:	andeq	r1, r1, r4, ror pc
   11df4:	andeq	r1, r1, r4, ror pc
   11df8:	andeq	r1, r1, r4, ror pc
   11dfc:	andeq	r1, r1, r4, ror pc
   11e00:	andeq	r1, r1, r0, asr pc
   11e04:	mov	r2, #1
   11e08:	str	r2, [sp, #24]
   11e0c:	cmp	r5, r4
   11e10:	mov	r9, r5
   11e14:	bcs	12464 <__assert_fail@plt+0x7dc>
   11e18:	ldr	r2, [r5]
   11e1c:	add	r5, r9, #4
   11e20:	ldrb	r0, [r2]
   11e24:	cmp	r0, #45	; 0x2d
   11e28:	beq	11d10 <__assert_fail@plt+0x88>
   11e2c:	cmp	ip, #0
   11e30:	strne	r1, [fp]
   11e34:	cmp	r3, #0
   11e38:	ldrne	r3, [pc, #2876]	; 1297c <__assert_fail@plt+0xcf4>
   11e3c:	strne	lr, [r3]
   11e40:	mov	r7, r9
   11e44:	mov	r6, r9
   11e48:	ldr	r3, [fp]
   11e4c:	cmp	r3, #1
   11e50:	bgt	1230c <__assert_fail@plt+0x684>
   11e54:	beq	12328 <__assert_fail@plt+0x6a0>
   11e58:	ldr	r5, [r9], #4
   11e5c:	cmp	r5, #0
   11e60:	beq	11fc8 <__assert_fail@plt+0x340>
   11e64:	ldrb	r3, [r5]
   11e68:	cmp	r3, #0
   11e6c:	beq	11e58 <__assert_fail@plt+0x1d0>
   11e70:	mov	r0, r5
   11e74:	bl	11aa8 <strlen@plt>
   11e78:	add	r0, r5, r0
   11e7c:	ldrb	r3, [r0, #-1]
   11e80:	mov	r0, r5
   11e84:	cmp	r3, #47	; 0x2f
   11e88:	beq	11f9c <__assert_fail@plt+0x314>
   11e8c:	bl	136d4 <__assert_fail@plt+0x1a4c>
   11e90:	b	11e58 <__assert_fail@plt+0x1d0>
   11e94:	cmp	ip, #0
   11e98:	strne	r1, [fp]
   11e9c:	cmp	r3, #0
   11ea0:	ldr	r0, [pc, #2776]	; 12980 <__assert_fail@plt+0xcf8>
   11ea4:	ldrne	r3, [pc, #2768]	; 1297c <__assert_fail@plt+0xcf4>
   11ea8:	strne	lr, [r3]
   11eac:	bl	119f4 <puts@plt>
   11eb0:	mov	r0, #0
   11eb4:	bl	11a84 <exit@plt>
   11eb8:	cmp	ip, #0
   11ebc:	strne	r1, [fp]
   11ec0:	cmp	r3, #0
   11ec4:	ldr	r4, [pc, #2744]	; 12984 <__assert_fail@plt+0xcfc>
   11ec8:	ldrne	r3, [pc, #2732]	; 1297c <__assert_fail@plt+0xcf4>
   11ecc:	ldr	r2, [pc, #2740]	; 12988 <__assert_fail@plt+0xd00>
   11ed0:	mov	r1, #1
   11ed4:	strne	lr, [r3]
   11ed8:	ldr	r0, [r4]
   11edc:	mov	r3, r6
   11ee0:	bl	11b68 <__fprintf_chk@plt>
   11ee4:	ldr	r3, [r4]
   11ee8:	mov	r2, #29
   11eec:	mov	r1, #1
   11ef0:	ldr	r0, [pc, #2708]	; 1298c <__assert_fail@plt+0xd04>
   11ef4:	bl	11964 <fwrite@plt>
   11ef8:	ldr	r3, [r4]
   11efc:	mov	r2, #50	; 0x32
   11f00:	mov	r1, #1
   11f04:	ldr	r0, [pc, #2692]	; 12990 <__assert_fail@plt+0xd08>
   11f08:	bl	11964 <fwrite@plt>
   11f0c:	ldr	r3, [r4]
   11f10:	mov	r2, #48	; 0x30
   11f14:	mov	r1, #1
   11f18:	ldr	r0, [pc, #2676]	; 12994 <__assert_fail@plt+0xd0c>
   11f1c:	bl	11964 <fwrite@plt>
   11f20:	ldr	r3, [r4]
   11f24:	mov	r2, #61	; 0x3d
   11f28:	mov	r1, #1
   11f2c:	ldr	r0, [pc, #2660]	; 12998 <__assert_fail@plt+0xd10>
   11f30:	bl	11964 <fwrite@plt>
   11f34:	ldr	r3, [r4]
   11f38:	mov	r2, #47	; 0x2f
   11f3c:	mov	r1, #1
   11f40:	ldr	r0, [pc, #2644]	; 1299c <__assert_fail@plt+0xd14>
   11f44:	bl	11964 <fwrite@plt>
   11f48:	mov	r0, #0
   11f4c:	bl	11a84 <exit@plt>
   11f50:	add	r1, r1, #1
   11f54:	mov	ip, #1
   11f58:	b	11e0c <__assert_fail@plt+0x184>
   11f5c:	sub	r1, r1, #1
   11f60:	mov	ip, #1
   11f64:	b	11e0c <__assert_fail@plt+0x184>
   11f68:	mov	r3, #1
   11f6c:	mov	lr, r3
   11f70:	b	11e0c <__assert_fail@plt+0x184>
   11f74:	cmp	ip, #0
   11f78:	strne	r1, [fp]
   11f7c:	cmp	r3, #0
   11f80:	ldr	r1, [pc, #2584]	; 129a0 <__assert_fail@plt+0xd18>
   11f84:	ldrne	r3, [pc, #2544]	; 1297c <__assert_fail@plt+0xcf4>
   11f88:	mov	r0, #1
   11f8c:	strne	lr, [r3]
   11f90:	bl	11b2c <__printf_chk@plt>
   11f94:	mov	r0, #0
   11f98:	bl	11a84 <exit@plt>
   11f9c:	bl	1315c <__assert_fail@plt+0x14d4>
   11fa0:	subs	r8, r0, #0
   11fa4:	bne	11fb0 <__assert_fail@plt+0x328>
   11fa8:	b	11e58 <__assert_fail@plt+0x1d0>
   11fac:	bl	136d4 <__assert_fail@plt+0x1a4c>
   11fb0:	mov	r1, r8
   11fb4:	mov	r0, r5
   11fb8:	bl	135f4 <__assert_fail@plt+0x196c>
   11fbc:	cmp	r0, #0
   11fc0:	bne	11fac <__assert_fail@plt+0x324>
   11fc4:	b	11e58 <__assert_fail@plt+0x1d0>
   11fc8:	ldr	r3, [pc, #2476]	; 1297c <__assert_fail@plt+0xcf4>
   11fcc:	ldr	r2, [fp]
   11fd0:	ldr	r3, [r3, #8]
   11fd4:	cmp	r3, #0
   11fd8:	beq	122c4 <__assert_fail@plt+0x63c>
   11fdc:	cmp	r2, #0
   11fe0:	bgt	12518 <__assert_fail@plt+0x890>
   11fe4:	ldr	r2, [pc, #2448]	; 1297c <__assert_fail@plt+0xcf4>
   11fe8:	mov	r3, #0
   11fec:	str	r3, [r2, #8]
   11ff0:	bl	1c7b8 <__assert_fail@plt+0xab30>
   11ff4:	ldr	r3, [fp]
   11ff8:	cmp	r3, #1
   11ffc:	ble	12008 <__assert_fail@plt+0x380>
   12000:	ldr	r0, [pc, #2460]	; 129a4 <__assert_fail@plt+0xd1c>
   12004:	bl	119f4 <puts@plt>
   12008:	ldr	r5, [r6], #4
   1200c:	cmp	r5, #0
   12010:	beq	12070 <__assert_fail@plt+0x3e8>
   12014:	ldrb	r3, [r5]
   12018:	cmp	r3, #0
   1201c:	beq	12008 <__assert_fail@plt+0x380>
   12020:	mov	r0, r5
   12024:	bl	11aa8 <strlen@plt>
   12028:	add	r0, r5, r0
   1202c:	ldrb	r3, [r0, #-1]
   12030:	mov	r0, r5
   12034:	cmp	r3, #47	; 0x2f
   12038:	beq	12044 <__assert_fail@plt+0x3bc>
   1203c:	bl	13290 <__assert_fail@plt+0x1608>
   12040:	b	12008 <__assert_fail@plt+0x380>
   12044:	bl	1315c <__assert_fail@plt+0x14d4>
   12048:	subs	r8, r0, #0
   1204c:	bne	12058 <__assert_fail@plt+0x3d0>
   12050:	b	12008 <__assert_fail@plt+0x380>
   12054:	bl	13290 <__assert_fail@plt+0x1608>
   12058:	mov	r1, r8
   1205c:	mov	r0, r5
   12060:	bl	135f4 <__assert_fail@plt+0x196c>
   12064:	cmp	r0, #0
   12068:	bne	12054 <__assert_fail@plt+0x3cc>
   1206c:	b	12008 <__assert_fail@plt+0x380>
   12070:	cmp	r7, r4
   12074:	ldr	r3, [fp]
   12078:	bcs	12134 <__assert_fail@plt+0x4ac>
   1207c:	cmp	r3, #1
   12080:	ble	1208c <__assert_fail@plt+0x404>
   12084:	ldr	r0, [pc, #2332]	; 129a8 <__assert_fail@plt+0xd20>
   12088:	bl	119f4 <puts@plt>
   1208c:	ldr	r1, [pc, #2280]	; 1297c <__assert_fail@plt+0xcf4>
   12090:	ldr	r2, [fp]
   12094:	ldr	r3, [r1, #8]
   12098:	cmp	r3, #0
   1209c:	beq	12120 <__assert_fail@plt+0x498>
   120a0:	ldr	r3, [r1, #16]
   120a4:	cmp	r3, #0
   120a8:	beq	124cc <__assert_fail@plt+0x844>
   120ac:	cmp	r2, #0
   120b0:	bgt	12eb0 <__assert_fail@plt+0x1228>
   120b4:	ldr	r3, [sp, #24]
   120b8:	cmp	r3, #1
   120bc:	ldr	r3, [fp]
   120c0:	beq	12524 <__assert_fail@plt+0x89c>
   120c4:	cmp	r3, #0
   120c8:	bgt	12444 <__assert_fail@plt+0x7bc>
   120cc:	bl	11838 <getuid@plt>
   120d0:	cmp	r0, #0
   120d4:	beq	120ec <__assert_fail@plt+0x464>
   120d8:	ldr	r3, [fp]
   120dc:	cmp	r3, #0
   120e0:	ble	120ec <__assert_fail@plt+0x464>
   120e4:	ldr	r0, [pc, #2240]	; 129ac <__assert_fail@plt+0xd24>
   120e8:	bl	119f4 <puts@plt>
   120ec:	ldr	r3, [fp]
   120f0:	cmp	r3, #1
   120f4:	ble	12100 <__assert_fail@plt+0x478>
   120f8:	ldr	r0, [pc, #2224]	; 129b0 <__assert_fail@plt+0xd28>
   120fc:	bl	119f4 <puts@plt>
   12100:	ldr	r3, [pc, #2156]	; 12974 <__assert_fail@plt+0xcec>
   12104:	ldr	r2, [sp, #116]	; 0x74
   12108:	mov	r0, #0
   1210c:	ldr	r3, [r3]
   12110:	cmp	r2, r3
   12114:	bne	12f8c <__assert_fail@plt+0x1304>
   12118:	add	sp, sp, #124	; 0x7c
   1211c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12120:	cmp	r2, #0
   12124:	ble	120b4 <__assert_fail@plt+0x42c>
   12128:	ldr	r0, [pc, #2180]	; 129b4 <__assert_fail@plt+0xd2c>
   1212c:	bl	119f4 <puts@plt>
   12130:	b	120b4 <__assert_fail@plt+0x42c>
   12134:	cmp	r3, #2
   12138:	bgt	12690 <__assert_fail@plt+0xa08>
   1213c:	ldr	r0, [pc, #2164]	; 129b8 <__assert_fail@plt+0xd30>
   12140:	bl	11ba4 <libusb_init@plt>
   12144:	subs	r4, r0, #0
   12148:	blt	12f14 <__assert_fail@plt+0x128c>
   1214c:	ldr	r3, [fp]
   12150:	cmp	r3, #3
   12154:	bgt	127a0 <__assert_fail@plt+0xb18>
   12158:	ldr	r3, [pc, #2136]	; 129b8 <__assert_fail@plt+0xd30>
   1215c:	add	r1, sp, #80	; 0x50
   12160:	ldr	r0, [r3]
   12164:	bl	11ab4 <libusb_get_device_list@plt>
   12168:	subs	r3, r0, #0
   1216c:	str	r3, [sp, #52]	; 0x34
   12170:	movge	r3, #0
   12174:	strge	r3, [sp, #28]
   12178:	bge	12204 <__assert_fail@plt+0x57c>
   1217c:	b	12f30 <__assert_fail@plt+0x12a8>
   12180:	ldrh	r3, [sp, #104]	; 0x68
   12184:	add	r1, sp, #84	; 0x54
   12188:	ldr	r0, [sp, #36]	; 0x24
   1218c:	str	r3, [sp, #60]	; 0x3c
   12190:	ldrh	r3, [sp, #106]	; 0x6a
   12194:	str	r3, [sp, #64]	; 0x40
   12198:	bl	117f0 <libusb_open@plt>
   1219c:	cmp	r0, #0
   121a0:	blt	12288 <__assert_fail@plt+0x600>
   121a4:	add	r1, sp, #88	; 0x58
   121a8:	ldr	r0, [sp, #84]	; 0x54
   121ac:	bl	119b8 <libusb_get_configuration@plt>
   121b0:	cmp	r0, #0
   121b4:	blt	12488 <__assert_fail@plt+0x800>
   121b8:	ldr	r3, [sp, #88]	; 0x58
   121bc:	cmp	r3, #0
   121c0:	bne	12360 <__assert_fail@plt+0x6d8>
   121c4:	ldr	r3, [fp]
   121c8:	cmp	r3, #1
   121cc:	ble	121f0 <__assert_fail@plt+0x568>
   121d0:	ldr	r3, [sp, #44]	; 0x2c
   121d4:	ldr	r1, [pc, #2016]	; 129bc <__assert_fail@plt+0xd34>
   121d8:	str	r3, [sp, #4]
   121dc:	ldr	r3, [sp, #40]	; 0x28
   121e0:	mov	r0, #1
   121e4:	str	r3, [sp]
   121e8:	ldrd	r2, [sp, #60]	; 0x3c
   121ec:	bl	11b2c <__printf_chk@plt>
   121f0:	ldr	r0, [sp, #84]	; 0x54
   121f4:	bl	1191c <libusb_close@plt>
   121f8:	ldr	r3, [sp, #28]
   121fc:	add	r3, r3, #1
   12200:	str	r3, [sp, #28]
   12204:	ldr	r3, [sp, #28]
   12208:	ldr	r2, [sp, #52]	; 0x34
   1220c:	ldr	r0, [sp, #80]	; 0x50
   12210:	cmp	r3, r2
   12214:	beq	12348 <__assert_fail@plt+0x6c0>
   12218:	ldr	r3, [sp, #28]
   1221c:	add	r5, sp, #96	; 0x60
   12220:	str	r5, [sp, #56]	; 0x38
   12224:	ldr	r3, [r0, r3, lsl #2]
   12228:	mov	r0, r3
   1222c:	mov	r4, r3
   12230:	str	r3, [sp, #36]	; 0x24
   12234:	bl	11a78 <libusb_get_bus_number@plt>
   12238:	str	r0, [sp, #40]	; 0x28
   1223c:	mov	r0, r4
   12240:	bl	11c64 <libusb_get_device_address@plt>
   12244:	mov	r1, r5
   12248:	str	r0, [sp, #44]	; 0x2c
   1224c:	mov	r0, r4
   12250:	bl	11bbc <libusb_get_device_descriptor@plt>
   12254:	cmp	r0, #0
   12258:	bge	12180 <__assert_fail@plt+0x4f8>
   1225c:	add	r0, r0, #99	; 0x63
   12260:	cmp	r0, #99	; 0x63
   12264:	ldr	r1, [pc, #1876]	; 129c0 <__assert_fail@plt+0xd38>
   12268:	ldrls	r3, [pc, #2196]	; 12b04 <__assert_fail@plt+0xe7c>
   1226c:	ldrhi	r3, [pc, #2196]	; 12b08 <__assert_fail@plt+0xe80>
   12270:	ldrls	r3, [r3, r0, lsl #2]
   12274:	mov	r0, #1
   12278:	str	r3, [sp]
   1227c:	ldrd	r2, [sp, #40]	; 0x28
   12280:	bl	11b2c <__printf_chk@plt>
   12284:	b	121f8 <__assert_fail@plt+0x570>
   12288:	add	r0, r0, #99	; 0x63
   1228c:	cmp	r0, #99	; 0x63
   12290:	ldr	r1, [pc, #1836]	; 129c4 <__assert_fail@plt+0xd3c>
   12294:	ldrls	r3, [pc, #2152]	; 12b04 <__assert_fail@plt+0xe7c>
   12298:	ldrhi	r3, [pc, #2152]	; 12b08 <__assert_fail@plt+0xe80>
   1229c:	ldrls	r3, [r3, r0, lsl #2]
   122a0:	mov	r0, #1
   122a4:	str	r3, [sp, #8]
   122a8:	ldr	r3, [sp, #44]	; 0x2c
   122ac:	str	r3, [sp, #4]
   122b0:	ldr	r3, [sp, #40]	; 0x28
   122b4:	str	r3, [sp]
   122b8:	ldrd	r2, [sp, #60]	; 0x3c
   122bc:	bl	11b2c <__printf_chk@plt>
   122c0:	b	121f8 <__assert_fail@plt+0x570>
   122c4:	cmp	r2, #0
   122c8:	ble	122d4 <__assert_fail@plt+0x64c>
   122cc:	ldr	r0, [pc, #1780]	; 129c8 <__assert_fail@plt+0xd40>
   122d0:	bl	119f4 <puts@plt>
   122d4:	bl	13080 <__assert_fail@plt+0x13f8>
   122d8:	cmp	r0, #0
   122dc:	bne	122f4 <__assert_fail@plt+0x66c>
   122e0:	ldr	r3, [fp]
   122e4:	cmp	r3, #0
   122e8:	ble	11fe4 <__assert_fail@plt+0x35c>
   122ec:	ldr	r0, [pc, #1752]	; 129cc <__assert_fail@plt+0xd44>
   122f0:	bl	119f4 <puts@plt>
   122f4:	ldr	r3, [fp]
   122f8:	cmp	r3, #0
   122fc:	ble	11fe4 <__assert_fail@plt+0x35c>
   12300:	mov	r0, #10
   12304:	bl	11b14 <putchar@plt>
   12308:	b	11fe4 <__assert_fail@plt+0x35c>
   1230c:	ldr	r2, [pc, #1724]	; 129d0 <__assert_fail@plt+0xd48>
   12310:	ldr	r1, [pc, #1724]	; 129d4 <__assert_fail@plt+0xd4c>
   12314:	mov	r0, #1
   12318:	bl	11b2c <__printf_chk@plt>
   1231c:	ldr	r3, [fp]
   12320:	cmp	r3, #0
   12324:	ble	12330 <__assert_fail@plt+0x6a8>
   12328:	ldr	r0, [pc, #1704]	; 129d8 <__assert_fail@plt+0xd50>
   1232c:	bl	119f4 <puts@plt>
   12330:	ldr	r3, [fp]
   12334:	cmp	r3, #1
   12338:	ble	11e58 <__assert_fail@plt+0x1d0>
   1233c:	ldr	r0, [pc, #1688]	; 129dc <__assert_fail@plt+0xd54>
   12340:	bl	119f4 <puts@plt>
   12344:	b	11e58 <__assert_fail@plt+0x1d0>
   12348:	mov	r1, #1
   1234c:	bl	11bd4 <libusb_free_device_list@plt>
   12350:	ldr	r3, [pc, #1632]	; 129b8 <__assert_fail@plt+0xd30>
   12354:	ldr	r0, [r3]
   12358:	bl	11b98 <libusb_exit@plt>
   1235c:	b	1208c <__assert_fail@plt+0x404>
   12360:	ldrb	r1, [sp, #110]	; 0x6e
   12364:	ldr	r0, [sp, #84]	; 0x54
   12368:	bl	1345c <__assert_fail@plt+0x17d4>
   1236c:	ldrb	r1, [sp, #111]	; 0x6f
   12370:	str	r0, [sp, #72]	; 0x48
   12374:	ldr	r0, [sp, #84]	; 0x54
   12378:	bl	1345c <__assert_fail@plt+0x17d4>
   1237c:	ldr	r3, [fp]
   12380:	cmp	r3, #2
   12384:	str	r0, [sp, #76]	; 0x4c
   12388:	bgt	127b4 <__assert_fail@plt+0xb2c>
   1238c:	add	r3, sp, #92	; 0x5c
   12390:	str	r3, [sp, #68]	; 0x44
   12394:	ldrh	r3, [sp, #106]	; 0x6a
   12398:	ldrh	r4, [sp, #104]	; 0x68
   1239c:	clz	r4, r4
   123a0:	cmp	r3, #0
   123a4:	lsr	r4, r4, #5
   123a8:	rsbne	r4, r4, #0
   123ac:	mvneq	r4, r4
   123b0:	ldr	r2, [sp, #68]	; 0x44
   123b4:	ldr	r0, [sp, #36]	; 0x24
   123b8:	mov	r1, #0
   123bc:	bl	1197c <libusb_get_config_descriptor@plt>
   123c0:	cmp	r0, #0
   123c4:	blt	12ebc <__assert_fail@plt+0x1234>
   123c8:	ldr	ip, [sp, #92]	; 0x5c
   123cc:	ldrb	r2, [sp, #100]	; 0x64
   123d0:	mov	r3, #0
   123d4:	ldrb	r1, [ip, #4]
   123d8:	b	123ec <__assert_fail@plt+0x764>
   123dc:	cmp	r2, #255	; 0xff
   123e0:	bne	123e8 <__assert_fail@plt+0x760>
   123e4:	add	r4, r4, #1
   123e8:	add	r3, r3, #1
   123ec:	cmp	r3, r1
   123f0:	bge	1269c <__assert_fail@plt+0xa14>
   123f4:	cmp	r4, #1
   123f8:	beq	126a4 <__assert_fail@plt+0xa1c>
   123fc:	cmp	r2, #0
   12400:	bne	123dc <__assert_fail@plt+0x754>
   12404:	ldr	r0, [ip, #12]
   12408:	add	lr, r0, r3, lsl #3
   1240c:	ldr	lr, [lr, #4]
   12410:	cmp	lr, #0
   12414:	beq	123e8 <__assert_fail@plt+0x760>
   12418:	ldr	r0, [r0, r3, lsl #3]
   1241c:	cmp	r0, #0
   12420:	beq	123e8 <__assert_fail@plt+0x760>
   12424:	ldrb	r0, [r0, #5]
   12428:	cmp	r0, #16
   1242c:	beq	123e4 <__assert_fail@plt+0x75c>
   12430:	cmp	r0, #255	; 0xff
   12434:	beq	123e4 <__assert_fail@plt+0x75c>
   12438:	cmp	r0, #0
   1243c:	bne	123e8 <__assert_fail@plt+0x760>
   12440:	b	123e4 <__assert_fail@plt+0x75c>
   12444:	ldr	r0, [pc, #1428]	; 129e0 <__assert_fail@plt+0xd58>
   12448:	bl	119f4 <puts@plt>
   1244c:	ldr	r3, [fp]
   12450:	cmp	r3, #0
   12454:	ble	120cc <__assert_fail@plt+0x444>
   12458:	ldr	r0, [pc, #1412]	; 129e4 <__assert_fail@plt+0xd5c>
   1245c:	bl	119f4 <puts@plt>
   12460:	b	120cc <__assert_fail@plt+0x444>
   12464:	cmp	ip, #0
   12468:	strne	r1, [fp]
   1246c:	cmp	r3, #0
   12470:	ldrne	r3, [pc, #1284]	; 1297c <__assert_fail@plt+0xcf4>
   12474:	strne	lr, [r3]
   12478:	ldr	r6, [pc, #1384]	; 129e8 <__assert_fail@plt+0xd60>
   1247c:	mov	r7, r9
   12480:	add	r9, r6, #140	; 0x8c
   12484:	b	11e48 <__assert_fail@plt+0x1c0>
   12488:	add	r0, r0, #99	; 0x63
   1248c:	cmp	r0, #99	; 0x63
   12490:	ldr	r1, [pc, #1364]	; 129ec <__assert_fail@plt+0xd64>
   12494:	ldrls	r3, [pc, #1640]	; 12b04 <__assert_fail@plt+0xe7c>
   12498:	ldrhi	r3, [pc, #1640]	; 12b08 <__assert_fail@plt+0xe80>
   1249c:	ldrls	r3, [r3, r0, lsl #2]
   124a0:	mov	r0, #1
   124a4:	str	r3, [sp, #8]
   124a8:	ldr	r3, [sp, #44]	; 0x2c
   124ac:	str	r3, [sp, #4]
   124b0:	ldr	r3, [sp, #40]	; 0x28
   124b4:	str	r3, [sp]
   124b8:	ldrd	r2, [sp, #60]	; 0x3c
   124bc:	bl	11b2c <__printf_chk@plt>
   124c0:	ldr	r0, [sp, #84]	; 0x54
   124c4:	bl	1191c <libusb_close@plt>
   124c8:	b	121f8 <__assert_fail@plt+0x570>
   124cc:	cmp	r2, #0
   124d0:	ble	120b4 <__assert_fail@plt+0x42c>
   124d4:	ldr	r0, [pc, #1300]	; 129f0 <__assert_fail@plt+0xd68>
   124d8:	bl	119f4 <puts@plt>
   124dc:	ldr	r3, [pc, #1176]	; 1297c <__assert_fail@plt+0xcf4>
   124e0:	ldr	r3, [r3, #4]
   124e4:	cmp	r3, #0
   124e8:	beq	120b4 <__assert_fail@plt+0x42c>
   124ec:	ldr	r3, [fp]
   124f0:	cmp	r3, #0
   124f4:	ble	120b4 <__assert_fail@plt+0x42c>
   124f8:	ldr	r0, [pc, #1268]	; 129f4 <__assert_fail@plt+0xd6c>
   124fc:	bl	119f4 <puts@plt>
   12500:	b	120b4 <__assert_fail@plt+0x42c>
   12504:	mov	r3, #0
   12508:	str	r3, [sp, #24]
   1250c:	b	12478 <__assert_fail@plt+0x7f0>
   12510:	str	r3, [sp, #24]
   12514:	b	11e40 <__assert_fail@plt+0x1b8>
   12518:	ldr	r0, [pc, #1240]	; 129f8 <__assert_fail@plt+0xd70>
   1251c:	bl	119f4 <puts@plt>
   12520:	b	122f4 <__assert_fail@plt+0x66c>
   12524:	cmp	r3, #1
   12528:	ble	12534 <__assert_fail@plt+0x8ac>
   1252c:	ldr	r0, [pc, #1224]	; 129fc <__assert_fail@plt+0xd74>
   12530:	bl	119f4 <puts@plt>
   12534:	bl	1951c <__assert_fail@plt+0x7894>
   12538:	mov	r6, #0
   1253c:	ldr	r9, [pc, #1212]	; 12a00 <__assert_fail@plt+0xd78>
   12540:	ldr	r8, [pc, #1212]	; 12a04 <__assert_fail@plt+0xd7c>
   12544:	ldr	sl, [pc, #1212]	; 12a08 <__assert_fail@plt+0xd80>
   12548:	mov	r7, r6
   1254c:	sub	r4, r0, #4
   12550:	str	r0, [sp, #16]
   12554:	ldr	r2, [r4, #4]!
   12558:	ldr	r5, [fp]
   1255c:	cmp	r2, #0
   12560:	beq	1266c <__assert_fail@plt+0x9e4>
   12564:	cmp	r5, #1
   12568:	ble	12578 <__assert_fail@plt+0x8f0>
   1256c:	mov	r1, r9
   12570:	mov	r0, #1
   12574:	bl	11b2c <__printf_chk@plt>
   12578:	add	r5, sp, #96	; 0x60
   1257c:	mov	r1, r5
   12580:	ldr	r0, [r4]
   12584:	bl	1af94 <__assert_fail@plt+0x930c>
   12588:	ldr	r2, [fp]
   1258c:	cmp	r2, #1
   12590:	ble	12604 <__assert_fail@plt+0x97c>
   12594:	cmp	r0, #0
   12598:	beq	12660 <__assert_fail@plt+0x9d8>
   1259c:	bl	14f00 <__assert_fail@plt+0x3278>
   125a0:	ldr	r1, [pc, #1124]	; 12a0c <__assert_fail@plt+0xd84>
   125a4:	mov	r2, r0
   125a8:	mov	r0, #1
   125ac:	bl	11b2c <__printf_chk@plt>
   125b0:	ldr	r3, [fp]
   125b4:	cmp	r3, #1
   125b8:	ble	125cc <__assert_fail@plt+0x944>
   125bc:	ldr	r2, [r4]
   125c0:	mov	r1, r8
   125c4:	mov	r0, #1
   125c8:	bl	11b2c <__printf_chk@plt>
   125cc:	mov	r1, r5
   125d0:	ldr	r0, [r4]
   125d4:	bl	1a15c <__assert_fail@plt+0x84d4>
   125d8:	ldr	r2, [fp]
   125dc:	cmp	r2, #1
   125e0:	ble	1262c <__assert_fail@plt+0x9a4>
   125e4:	cmp	r0, #0
   125e8:	beq	12654 <__assert_fail@plt+0x9cc>
   125ec:	bl	14f00 <__assert_fail@plt+0x3278>
   125f0:	ldr	r1, [pc, #1044]	; 12a0c <__assert_fail@plt+0xd84>
   125f4:	mov	r2, r0
   125f8:	mov	r0, #1
   125fc:	bl	11b2c <__printf_chk@plt>
   12600:	b	12554 <__assert_fail@plt+0x8cc>
   12604:	cmp	r0, #0
   12608:	bne	125cc <__assert_fail@plt+0x944>
   1260c:	ldr	r2, [r4]
   12610:	mov	r1, sl
   12614:	mov	r0, #1
   12618:	bl	11b2c <__printf_chk@plt>
   1261c:	ldr	r0, [sp, #96]	; 0x60
   12620:	add	r7, r7, #1
   12624:	bl	19ab4 <__assert_fail@plt+0x7e2c>
   12628:	b	125b0 <__assert_fail@plt+0x928>
   1262c:	cmp	r0, #0
   12630:	bne	12554 <__assert_fail@plt+0x8cc>
   12634:	ldr	r2, [r4]
   12638:	ldr	r1, [pc, #976]	; 12a10 <__assert_fail@plt+0xd88>
   1263c:	mov	r0, #1
   12640:	bl	11b2c <__printf_chk@plt>
   12644:	ldr	r0, [sp, #96]	; 0x60
   12648:	add	r6, r6, #1
   1264c:	bl	19ab4 <__assert_fail@plt+0x7e2c>
   12650:	b	12554 <__assert_fail@plt+0x8cc>
   12654:	ldr	r0, [pc, #952]	; 12a14 <__assert_fail@plt+0xd8c>
   12658:	bl	119f4 <puts@plt>
   1265c:	b	12634 <__assert_fail@plt+0x9ac>
   12660:	ldr	r0, [pc, #940]	; 12a14 <__assert_fail@plt+0xd8c>
   12664:	bl	119f4 <puts@plt>
   12668:	b	1260c <__assert_fail@plt+0x984>
   1266c:	ldr	r0, [sp, #16]
   12670:	bl	11850 <free@plt>
   12674:	cmp	r7, #0
   12678:	beq	12ee0 <__assert_fail@plt+0x1258>
   1267c:	cmp	r5, #0
   12680:	bgt	12f44 <__assert_fail@plt+0x12bc>
   12684:	cmp	r6, #0
   12688:	beq	1244c <__assert_fail@plt+0x7c4>
   1268c:	b	120cc <__assert_fail@plt+0x444>
   12690:	ldr	r0, [pc, #896]	; 12a18 <__assert_fail@plt+0xd90>
   12694:	bl	119f4 <puts@plt>
   12698:	b	1213c <__assert_fail@plt+0x4b4>
   1269c:	cmp	r4, #1
   126a0:	bne	12764 <__assert_fail@plt+0xadc>
   126a4:	add	r3, sp, #108	; 0x6c
   126a8:	ldr	r2, [sp, #84]	; 0x54
   126ac:	ldm	r3, {r0, r1}
   126b0:	ldr	r3, [sp, #56]	; 0x38
   126b4:	str	ip, [sp, #12]
   126b8:	str	r0, [sp]
   126bc:	str	r2, [sp, #8]
   126c0:	strh	r1, [sp, #4]
   126c4:	ldr	r0, [fp]
   126c8:	ldm	r3, {r1, r2, r3}
   126cc:	bl	13df8 <__assert_fail@plt+0x2170>
   126d0:	ldr	r2, [sp, #60]	; 0x3c
   126d4:	ldr	r1, [pc, #832]	; 12a1c <__assert_fail@plt+0xd94>
   126d8:	mov	r4, r0
   126dc:	mov	r0, #1
   126e0:	bl	11b2c <__printf_chk@plt>
   126e4:	ldr	r3, [sp, #72]	; 0x48
   126e8:	cmp	r3, #0
   126ec:	beq	12700 <__assert_fail@plt+0xa78>
   126f0:	mov	r2, r3
   126f4:	ldr	r1, [pc, #804]	; 12a20 <__assert_fail@plt+0xd98>
   126f8:	mov	r0, #1
   126fc:	bl	11b2c <__printf_chk@plt>
   12700:	ldr	r2, [sp, #64]	; 0x40
   12704:	ldr	r1, [pc, #792]	; 12a24 <__assert_fail@plt+0xd9c>
   12708:	mov	r0, #1
   1270c:	bl	11b2c <__printf_chk@plt>
   12710:	ldr	r3, [sp, #76]	; 0x4c
   12714:	cmp	r3, #0
   12718:	beq	1272c <__assert_fail@plt+0xaa4>
   1271c:	mov	r2, r3
   12720:	ldr	r1, [pc, #760]	; 12a20 <__assert_fail@plt+0xd98>
   12724:	mov	r0, #1
   12728:	bl	11b2c <__printf_chk@plt>
   1272c:	cmp	r4, #0
   12730:	beq	12744 <__assert_fail@plt+0xabc>
   12734:	mov	r2, r4
   12738:	ldr	r1, [pc, #744]	; 12a28 <__assert_fail@plt+0xda0>
   1273c:	mov	r0, #1
   12740:	bl	11b2c <__printf_chk@plt>
   12744:	ldrd	r2, [sp, #40]	; 0x28
   12748:	ldr	r1, [pc, #732]	; 12a2c <__assert_fail@plt+0xda4>
   1274c:	mov	r0, #1
   12750:	bl	11b2c <__printf_chk@plt>
   12754:	ldr	r2, [pc, #544]	; 1297c <__assert_fail@plt+0xcf4>
   12758:	mov	r3, #1
   1275c:	str	r3, [r2, #16]
   12760:	str	r3, [r2, #8]
   12764:	ldr	r0, [sp, #92]	; 0x5c
   12768:	bl	11958 <libusb_free_config_descriptor@plt>
   1276c:	ldr	r0, [sp, #84]	; 0x54
   12770:	bl	1191c <libusb_close@plt>
   12774:	ldr	r3, [sp, #72]	; 0x48
   12778:	cmp	r3, #0
   1277c:	beq	12788 <__assert_fail@plt+0xb00>
   12780:	mov	r0, r3
   12784:	bl	11850 <free@plt>
   12788:	ldr	r3, [sp, #76]	; 0x4c
   1278c:	cmp	r3, #0
   12790:	beq	121f8 <__assert_fail@plt+0x570>
   12794:	mov	r0, r3
   12798:	bl	11850 <free@plt>
   1279c:	b	121f8 <__assert_fail@plt+0x570>
   127a0:	ldr	r3, [pc, #528]	; 129b8 <__assert_fail@plt+0xd30>
   127a4:	mov	r1, #3
   127a8:	ldr	r0, [r3]
   127ac:	bl	118f8 <libusb_set_debug@plt>
   127b0:	b	12158 <__assert_fail@plt+0x4d0>
   127b4:	mov	r0, #10
   127b8:	bl	11b14 <putchar@plt>
   127bc:	ldr	r3, [sp, #44]	; 0x2c
   127c0:	ldr	r1, [pc, #616]	; 12a30 <__assert_fail@plt+0xda8>
   127c4:	str	r3, [sp, #4]
   127c8:	ldr	r3, [sp, #40]	; 0x28
   127cc:	mov	r0, #1
   127d0:	str	r3, [sp]
   127d4:	ldrd	r2, [sp, #60]	; 0x3c
   127d8:	bl	11b2c <__printf_chk@plt>
   127dc:	ldr	r2, [sp, #72]	; 0x48
   127e0:	ldr	r1, [sp, #76]	; 0x4c
   127e4:	orrs	r3, r2, r1
   127e8:	beq	12810 <__assert_fail@plt+0xb88>
   127ec:	cmp	r2, #0
   127f0:	beq	12f6c <__assert_fail@plt+0x12e4>
   127f4:	cmp	r1, #0
   127f8:	beq	12f7c <__assert_fail@plt+0x12f4>
   127fc:	ldr	r3, [pc, #560]	; 12a34 <__assert_fail@plt+0xdac>
   12800:	str	r1, [sp]
   12804:	mov	r0, #1
   12808:	ldr	r1, [pc, #552]	; 12a38 <__assert_fail@plt+0xdb0>
   1280c:	bl	11b2c <__printf_chk@plt>
   12810:	ldr	r0, [pc, #548]	; 12a3c <__assert_fail@plt+0xdb4>
   12814:	bl	119f4 <puts@plt>
   12818:	ldrb	r2, [sp, #96]	; 0x60
   1281c:	ldr	r1, [pc, #540]	; 12a40 <__assert_fail@plt+0xdb8>
   12820:	mov	r0, #1
   12824:	bl	11b2c <__printf_chk@plt>
   12828:	ldrb	r2, [sp, #97]	; 0x61
   1282c:	ldr	r1, [pc, #528]	; 12a44 <__assert_fail@plt+0xdbc>
   12830:	mov	r0, #1
   12834:	bl	11b2c <__printf_chk@plt>
   12838:	ldrh	r2, [sp, #98]	; 0x62
   1283c:	ldr	r1, [pc, #516]	; 12a48 <__assert_fail@plt+0xdc0>
   12840:	mov	r0, #1
   12844:	and	ip, r2, #15
   12848:	lsr	r3, r2, #4
   1284c:	and	r3, r3, #15
   12850:	str	ip, [sp]
   12854:	lsr	r2, r2, #8
   12858:	bl	11b2c <__printf_chk@plt>
   1285c:	ldrb	r2, [sp, #100]	; 0x64
   12860:	ldr	r1, [pc, #484]	; 12a4c <__assert_fail@plt+0xdc4>
   12864:	mov	r0, #1
   12868:	bl	11b2c <__printf_chk@plt>
   1286c:	ldrb	r2, [sp, #101]	; 0x65
   12870:	ldr	r1, [pc, #472]	; 12a50 <__assert_fail@plt+0xdc8>
   12874:	mov	r0, #1
   12878:	bl	11b2c <__printf_chk@plt>
   1287c:	ldrb	r2, [sp, #102]	; 0x66
   12880:	ldr	r1, [pc, #460]	; 12a54 <__assert_fail@plt+0xdcc>
   12884:	mov	r0, #1
   12888:	bl	11b2c <__printf_chk@plt>
   1288c:	ldrb	r2, [sp, #103]	; 0x67
   12890:	ldr	r1, [pc, #448]	; 12a58 <__assert_fail@plt+0xdd0>
   12894:	mov	r0, #1
   12898:	bl	11b2c <__printf_chk@plt>
   1289c:	ldrh	r2, [sp, #104]	; 0x68
   128a0:	ldr	r1, [pc, #436]	; 12a5c <__assert_fail@plt+0xdd4>
   128a4:	mov	r0, #1
   128a8:	bl	11b2c <__printf_chk@plt>
   128ac:	ldrh	r2, [sp, #106]	; 0x6a
   128b0:	ldr	r1, [pc, #424]	; 12a60 <__assert_fail@plt+0xdd8>
   128b4:	mov	r0, #1
   128b8:	bl	11b2c <__printf_chk@plt>
   128bc:	ldrh	r2, [sp, #108]	; 0x6c
   128c0:	ldr	r1, [pc, #412]	; 12a64 <__assert_fail@plt+0xddc>
   128c4:	mov	r0, #1
   128c8:	and	ip, r2, #15
   128cc:	lsr	r3, r2, #4
   128d0:	str	ip, [sp]
   128d4:	and	r3, r3, #15
   128d8:	lsr	r2, r2, #8
   128dc:	bl	11b2c <__printf_chk@plt>
   128e0:	ldr	r2, [sp, #72]	; 0x48
   128e4:	ldr	r4, [pc, #568]	; 12b24 <__assert_fail@plt+0xe9c>
   128e8:	cmp	r2, #0
   128ec:	mov	r3, r2
   128f0:	ldr	r1, [pc, #368]	; 12a68 <__assert_fail@plt+0xde0>
   128f4:	moveq	r3, r4
   128f8:	ldrb	r2, [sp, #110]	; 0x6e
   128fc:	mov	r0, #1
   12900:	bl	11b2c <__printf_chk@plt>
   12904:	ldr	r2, [sp, #76]	; 0x4c
   12908:	ldr	r1, [pc, #348]	; 12a6c <__assert_fail@plt+0xde4>
   1290c:	subs	r3, r2, #0
   12910:	moveq	r3, r4
   12914:	ldrb	r2, [sp, #111]	; 0x6f
   12918:	mov	r0, #1
   1291c:	bl	11b2c <__printf_chk@plt>
   12920:	ldrb	r1, [sp, #112]	; 0x70
   12924:	ldr	r0, [sp, #84]	; 0x54
   12928:	bl	1345c <__assert_fail@plt+0x17d4>
   1292c:	ldrb	r2, [sp, #112]	; 0x70
   12930:	subs	r4, r0, #0
   12934:	beq	12f58 <__assert_fail@plt+0x12d0>
   12938:	mov	r3, r4
   1293c:	ldr	r1, [pc, #476]	; 12b20 <__assert_fail@plt+0xe98>
   12940:	mov	r0, #1
   12944:	bl	11b2c <__printf_chk@plt>
   12948:	mov	r0, r4
   1294c:	bl	11850 <free@plt>
   12950:	ldrb	r2, [sp, #113]	; 0x71
   12954:	ldr	r1, [pc, #276]	; 12a70 <__assert_fail@plt+0xde8>
   12958:	mov	r0, #1
   1295c:	bl	11b2c <__printf_chk@plt>
   12960:	mov	r3, #0
   12964:	str	r3, [sp, #48]	; 0x30
   12968:	add	r3, sp, #92	; 0x5c
   1296c:	str	r3, [sp, #68]	; 0x44
   12970:	b	12b58 <__assert_fail@plt+0xed0>
   12974:	andeq	r7, r3, r8, lsl sp
   12978:	andeq	r8, r3, r8
   1297c:	strdeq	r8, [r3], -r0
   12980:	andeq	pc, r1, ip, lsr #31
   12984:	andeq	r8, r3, r8, ror #3
   12988:	muleq	r1, r0, lr
   1298c:			; <UNDEFINED> instruction: 0x0001feb4
   12990:	ldrdeq	pc, [r1], -r4
   12994:	andeq	pc, r1, r8, lsl #30
   12998:	andeq	pc, r1, ip, lsr pc	; <UNPREDICTABLE>
   1299c:	andeq	pc, r1, ip, ror pc	; <UNPREDICTABLE>
   129a0:	ldrdeq	pc, [r1], -r8
   129a4:			; <UNDEFINED> instruction: 0x000202b4
   129a8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   129ac:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   129b0:	andeq	r1, r2, r4, ror r0
   129b4:	andeq	r0, r2, ip, lsr #24
   129b8:	ldrdeq	fp, [r3], -r4
   129bc:	andeq	r5, r2, r0, lsr #21
   129c0:	andeq	r0, r2, ip, ror #6
   129c4:	andeq	r0, r2, ip, lsr #7
   129c8:			; <UNDEFINED> instruction: 0x000201b0
   129cc:	andeq	r0, r2, r0, asr #4
   129d0:	andeq	r0, r2, r0
   129d4:	andeq	r0, r2, r8, lsl r0
   129d8:	andeq	r0, r2, ip, lsr r0
   129dc:	andeq	r0, r2, ip, lsl #2
   129e0:	andeq	r0, r2, ip, lsr #30
   129e4:	andeq	r0, r2, ip, asr pc
   129e8:	andeq	r8, r3, r4, lsl r0
   129ec:	andeq	r0, r2, r8, ror #7
   129f0:	andeq	r0, r2, ip, ror sl
   129f4:	strdeq	r0, [r2], -ip
   129f8:	andeq	r0, r2, ip, lsr #2
   129fc:	andeq	r0, r2, r8, lsl #26
   12a00:	ldrdeq	pc, [r1], -r0
   12a04:	andeq	r0, r2, r0, ror sp
   12a08:	andeq	r0, r2, r8, lsr sp
   12a0c:	andeq	pc, r1, r0, ror #23
   12a10:	muleq	r2, r0, sp
   12a14:	andeq	pc, r1, r0, ror #27
   12a18:	andeq	r0, r2, r8, ror #5
   12a1c:	andeq	r0, r2, ip, lsl #19
   12a20:			; <UNDEFINED> instruction: 0x000209b0
   12a24:			; <UNDEFINED> instruction: 0x000209b8
   12a28:	andeq	r0, r2, ip, asr #19
   12a2c:	ldrdeq	r0, [r2], -r8
   12a30:	andeq	r0, r2, r0, lsr r4
   12a34:	andeq	r3, r2, r8, ror r2
   12a38:	andeq	r0, r2, r4, ror #8
   12a3c:	andeq	r0, r2, r0, ror r4
   12a40:	andeq	r0, r2, r4, ror r4
   12a44:	muleq	r2, r0, r4
   12a48:	andeq	r0, r2, ip, lsr #9
   12a4c:	andeq	r0, r2, ip, asr #9
   12a50:	andeq	r0, r2, r8, ror #9
   12a54:	andeq	r0, r2, r4, lsl #10
   12a58:	andeq	r0, r2, r0, lsr #10
   12a5c:	andeq	r0, r2, ip, lsr r5
   12a60:	andeq	r0, r2, ip, asr r5
   12a64:	andeq	r0, r2, ip, ror r5
   12a68:	muleq	r2, ip, r5
   12a6c:			; <UNDEFINED> instruction: 0x000205bc
   12a70:	ldrdeq	r0, [r2], -ip
   12a74:	strdeq	r0, [r2], -r8
   12a78:	andeq	r0, r2, r8, lsr #12
   12a7c:	andeq	r0, r2, r0, asr #12
   12a80:	andeq	r0, r2, ip, asr r6
   12a84:	andeq	r0, r2, r8, ror r6
   12a88:	muleq	r2, r4, r6
   12a8c:			; <UNDEFINED> instruction: 0x000206b0
   12a90:	andeq	r0, r2, ip, asr #13
   12a94:	andeq	pc, r1, ip, ror #28
   12a98:	andeq	pc, r1, ip, ror lr	; <UNPREDICTABLE>
   12a9c:	andeq	r0, r2, ip, ror #13
   12aa0:	andeq	r0, r2, r0, lsl r7
   12aa4:	andeq	r0, r2, r0, lsr r7
   12aa8:	andeq	r0, r2, r4, asr #14
   12aac:	andeq	r0, r2, r8, asr r7
   12ab0:	andeq	r0, r2, r4, ror r7
   12ab4:	muleq	r2, r0, r7
   12ab8:	andeq	r0, r2, ip, lsr #15
   12abc:	andeq	r0, r2, r8, asr #15
   12ac0:	andeq	r0, r2, r4, ror #15
   12ac4:	andeq	r0, r2, r0, lsl #16
   12ac8:	andeq	r0, r2, ip, lsl r8
   12acc:	andeq	r0, r2, r8, lsr r8
   12ad0:	andeq	r0, r2, r8, asr r8
   12ad4:	andeq	r0, r2, ip, ror #16
   12ad8:	andeq	r0, r2, r8, lsl #17
   12adc:	andeq	r1, r2, r8, ror r1
   12ae0:	andeq	pc, r1, ip, lsl #29
   12ae4:	andeq	r0, r2, r4, lsr #17
   12ae8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   12aec:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   12af0:	andeq	r0, r2, ip, lsl #18
   12af4:	andeq	r0, r2, ip, lsr #18
   12af8:	andeq	r0, r2, r8, asr #18
   12afc:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   12b00:	andeq	r0, r2, r4, ror #18
   12b04:	andeq	pc, r1, r4, lsl #18
   12b08:	andeq	pc, r1, r4, ror #25
   12b0c:	andeq	r0, r2, ip, ror #28
   12b10:	strdeq	r0, [r2], -r8
   12b14:	andeq	r0, r2, r8, lsr #6
   12b18:	andeq	r0, r2, r4, asr #6
   12b1c:	andeq	r0, r2, r4, asr #27
   12b20:	andeq	r1, r2, ip, ror r0
   12b24:	andeq	r2, r2, ip, lsr #4
   12b28:	add	r0, r0, #99	; 0x63
   12b2c:	cmp	r0, #99	; 0x63
   12b30:	ldr	r2, [sp, #48]	; 0x30
   12b34:	ldrls	r3, [pc, #-56]	; 12b04 <__assert_fail@plt+0xe7c>
   12b38:	ldrhi	r3, [pc, #-56]	; 12b08 <__assert_fail@plt+0xe80>
   12b3c:	ldr	r1, [pc, #-208]	; 12a74 <__assert_fail@plt+0xdec>
   12b40:	ldrls	r3, [r3, r0, lsl #2]
   12b44:	mov	r0, #1
   12b48:	bl	11b2c <__printf_chk@plt>
   12b4c:	ldr	r3, [sp, #48]	; 0x30
   12b50:	add	r3, r3, #1
   12b54:	str	r3, [sp, #48]	; 0x30
   12b58:	ldrb	r3, [sp, #113]	; 0x71
   12b5c:	ldr	r2, [sp, #48]	; 0x30
   12b60:	cmp	r2, r3
   12b64:	bge	12394 <__assert_fail@plt+0x70c>
   12b68:	ldr	r2, [sp, #68]	; 0x44
   12b6c:	ldrb	r1, [sp, #48]	; 0x30
   12b70:	ldr	r0, [sp, #36]	; 0x24
   12b74:	bl	1197c <libusb_get_config_descriptor@plt>
   12b78:	cmp	r0, #0
   12b7c:	blt	12b28 <__assert_fail@plt+0xea0>
   12b80:	ldr	r2, [sp, #48]	; 0x30
   12b84:	ldr	r1, [pc, #-276]	; 12a78 <__assert_fail@plt+0xdf0>
   12b88:	mov	r0, #1
   12b8c:	bl	11b2c <__printf_chk@plt>
   12b90:	ldr	r3, [sp, #92]	; 0x5c
   12b94:	ldr	r1, [pc, #-288]	; 12a7c <__assert_fail@plt+0xdf4>
   12b98:	mov	r0, #1
   12b9c:	ldrb	r2, [r3]
   12ba0:	bl	11b2c <__printf_chk@plt>
   12ba4:	ldr	r3, [sp, #92]	; 0x5c
   12ba8:	ldr	r1, [pc, #-304]	; 12a80 <__assert_fail@plt+0xdf8>
   12bac:	mov	r0, #1
   12bb0:	ldrb	r2, [r3, #1]
   12bb4:	bl	11b2c <__printf_chk@plt>
   12bb8:	ldr	r3, [sp, #92]	; 0x5c
   12bbc:	ldr	r1, [pc, #-320]	; 12a84 <__assert_fail@plt+0xdfc>
   12bc0:	mov	r0, #1
   12bc4:	ldrh	r2, [r3, #2]
   12bc8:	bl	11b2c <__printf_chk@plt>
   12bcc:	ldr	r3, [sp, #92]	; 0x5c
   12bd0:	ldr	r1, [pc, #-336]	; 12a88 <__assert_fail@plt+0xe00>
   12bd4:	mov	r0, #1
   12bd8:	ldrb	r2, [r3, #4]
   12bdc:	bl	11b2c <__printf_chk@plt>
   12be0:	ldr	r3, [sp, #92]	; 0x5c
   12be4:	ldr	r1, [pc, #-352]	; 12a8c <__assert_fail@plt+0xe04>
   12be8:	mov	r0, #1
   12bec:	ldrb	r2, [r3, #5]
   12bf0:	bl	11b2c <__printf_chk@plt>
   12bf4:	ldr	r3, [sp, #92]	; 0x5c
   12bf8:	mov	r2, #0
   12bfc:	ldr	r0, [sp, #84]	; 0x54
   12c00:	ldrb	r1, [r3, #6]
   12c04:	str	r2, [sp, #32]
   12c08:	bl	1345c <__assert_fail@plt+0x17d4>
   12c0c:	ldr	r3, [sp, #92]	; 0x5c
   12c10:	ldr	r5, [pc, #-244]	; 12b24 <__assert_fail@plt+0xe9c>
   12c14:	ldr	r1, [pc, #-396]	; 12a90 <__assert_fail@plt+0xe08>
   12c18:	ldrb	r2, [r3, #6]
   12c1c:	subs	r4, r0, #0
   12c20:	movne	r3, r4
   12c24:	moveq	r3, r5
   12c28:	mov	r0, #1
   12c2c:	bl	11b2c <__printf_chk@plt>
   12c30:	mov	r0, r4
   12c34:	bl	11850 <free@plt>
   12c38:	ldr	r2, [sp, #92]	; 0x5c
   12c3c:	ldr	r3, [pc, #-432]	; 12a94 <__assert_fail@plt+0xe0c>
   12c40:	ldr	r0, [pc, #-432]	; 12a98 <__assert_fail@plt+0xe10>
   12c44:	ldrb	r2, [r2, #7]
   12c48:	ldr	r1, [pc, #-436]	; 12a9c <__assert_fail@plt+0xe14>
   12c4c:	tst	r2, #64	; 0x40
   12c50:	moveq	r3, r5
   12c54:	tst	r2, #32
   12c58:	moveq	r0, r5
   12c5c:	str	r0, [sp]
   12c60:	mov	r0, #1
   12c64:	bl	11b2c <__printf_chk@plt>
   12c68:	ldr	r3, [sp, #92]	; 0x5c
   12c6c:	mov	r0, #1
   12c70:	ldr	r1, [pc, #-472]	; 12aa0 <__assert_fail@plt+0xe18>
   12c74:	ldrb	r2, [r3, #8]
   12c78:	lsl	r2, r2, r0
   12c7c:	bl	11b2c <__printf_chk@plt>
   12c80:	ldr	r3, [sp, #92]	; 0x5c
   12c84:	ldr	r1, [sp, #32]
   12c88:	ldrb	r2, [r3, #4]
   12c8c:	cmp	r1, r2
   12c90:	bge	12b4c <__assert_fail@plt+0xec4>
   12c94:	ldr	r1, [sp, #32]
   12c98:	ldr	r3, [r3, #12]
   12c9c:	mov	r2, r1
   12ca0:	add	sl, r3, r1, lsl #3
   12ca4:	mov	r0, #1
   12ca8:	ldr	r1, [pc, #-524]	; 12aa4 <__assert_fail@plt+0xe1c>
   12cac:	bl	11b2c <__printf_chk@plt>
   12cb0:	ldr	r3, [sl, #4]
   12cb4:	cmp	r3, #0
   12cb8:	movgt	r8, #0
   12cbc:	movgt	r9, r8
   12cc0:	ble	12ea0 <__assert_fail@plt+0x1218>
   12cc4:	ldr	r5, [sl]
   12cc8:	mov	r2, r9
   12ccc:	add	r4, r5, r8
   12cd0:	ldr	r1, [pc, #-560]	; 12aa8 <__assert_fail@plt+0xe20>
   12cd4:	mov	r0, #1
   12cd8:	bl	11b2c <__printf_chk@plt>
   12cdc:	ldrb	r2, [r5, r8]
   12ce0:	ldr	r1, [pc, #-572]	; 12aac <__assert_fail@plt+0xe24>
   12ce4:	mov	r0, #1
   12ce8:	bl	11b2c <__printf_chk@plt>
   12cec:	ldrb	r2, [r4, #1]
   12cf0:	ldr	r1, [pc, #-584]	; 12ab0 <__assert_fail@plt+0xe28>
   12cf4:	mov	r0, #1
   12cf8:	bl	11b2c <__printf_chk@plt>
   12cfc:	ldrb	r2, [r4, #2]
   12d00:	ldr	r1, [pc, #-596]	; 12ab4 <__assert_fail@plt+0xe2c>
   12d04:	mov	r0, #1
   12d08:	bl	11b2c <__printf_chk@plt>
   12d0c:	ldrb	r2, [r4, #3]
   12d10:	ldr	r1, [pc, #-608]	; 12ab8 <__assert_fail@plt+0xe30>
   12d14:	mov	r0, #1
   12d18:	bl	11b2c <__printf_chk@plt>
   12d1c:	ldrb	r2, [r4, #4]
   12d20:	ldr	r1, [pc, #-620]	; 12abc <__assert_fail@plt+0xe34>
   12d24:	mov	r0, #1
   12d28:	bl	11b2c <__printf_chk@plt>
   12d2c:	ldrb	r2, [r4, #5]
   12d30:	ldr	r1, [pc, #-632]	; 12ac0 <__assert_fail@plt+0xe38>
   12d34:	mov	r0, #1
   12d38:	bl	11b2c <__printf_chk@plt>
   12d3c:	ldrb	r2, [r4, #6]
   12d40:	ldr	r1, [pc, #-644]	; 12ac4 <__assert_fail@plt+0xe3c>
   12d44:	mov	r0, #1
   12d48:	bl	11b2c <__printf_chk@plt>
   12d4c:	ldrb	r2, [r4, #7]
   12d50:	ldr	r1, [pc, #-656]	; 12ac8 <__assert_fail@plt+0xe40>
   12d54:	mov	r0, #1
   12d58:	bl	11b2c <__printf_chk@plt>
   12d5c:	ldrb	r1, [r4, #8]
   12d60:	ldr	r0, [sp, #84]	; 0x54
   12d64:	bl	1345c <__assert_fail@plt+0x17d4>
   12d68:	ldr	r3, [pc, #-588]	; 12b24 <__assert_fail@plt+0xe9c>
   12d6c:	ldrb	r2, [r4, #8]
   12d70:	ldr	r1, [pc, #-684]	; 12acc <__assert_fail@plt+0xe44>
   12d74:	subs	r5, r0, #0
   12d78:	movne	r3, r5
   12d7c:	mov	r0, #1
   12d80:	bl	11b2c <__printf_chk@plt>
   12d84:	mov	r0, r5
   12d88:	bl	11850 <free@plt>
   12d8c:	ldrb	r3, [r4, #4]
   12d90:	cmp	r3, #0
   12d94:	beq	12e8c <__assert_fail@plt+0x1204>
   12d98:	mov	r6, #0
   12d9c:	str	r8, [sp, #20]
   12da0:	mov	r8, r6
   12da4:	str	r9, [sp, #16]
   12da8:	ldr	r9, [r4, #12]
   12dac:	ldr	r3, [pc, #-688]	; 12b04 <__assert_fail@plt+0xe7c>
   12db0:	add	r5, r9, r6
   12db4:	mov	r2, r8
   12db8:	ldrb	ip, [r5, #3]
   12dbc:	ldr	r1, [pc, #-756]	; 12ad0 <__assert_fail@plt+0xe48>
   12dc0:	mov	r0, #1
   12dc4:	and	ip, ip, #3
   12dc8:	add	r8, r8, r0
   12dcc:	add	ip, r3, ip, lsl #2
   12dd0:	ldr	r7, [ip, #440]	; 0x1b8
   12dd4:	bl	11b2c <__printf_chk@plt>
   12dd8:	ldrb	r2, [r9, r6]
   12ddc:	ldr	r1, [pc, #-784]	; 12ad4 <__assert_fail@plt+0xe4c>
   12de0:	mov	r0, #1
   12de4:	bl	11b2c <__printf_chk@plt>
   12de8:	ldrb	r2, [r5, #1]
   12dec:	ldr	r1, [pc, #-796]	; 12ad8 <__assert_fail@plt+0xe50>
   12df0:	mov	r0, #1
   12df4:	bl	11b2c <__printf_chk@plt>
   12df8:	ldrb	r2, [r5, #2]
   12dfc:	ldr	ip, [pc, #-808]	; 12adc <__assert_fail@plt+0xe54>
   12e00:	ldr	r3, [pc, #-808]	; 12ae0 <__assert_fail@plt+0xe58>
   12e04:	tst	r2, #128	; 0x80
   12e08:	and	r0, r2, #15
   12e0c:	moveq	r3, ip
   12e10:	ldr	r1, [pc, #-820]	; 12ae4 <__assert_fail@plt+0xe5c>
   12e14:	str	r0, [sp]
   12e18:	mov	r0, #1
   12e1c:	bl	11b2c <__printf_chk@plt>
   12e20:	mov	r3, r7
   12e24:	ldrb	r2, [r5, #3]
   12e28:	ldr	r1, [pc, #-840]	; 12ae8 <__assert_fail@plt+0xe60>
   12e2c:	mov	r0, #1
   12e30:	bl	11b2c <__printf_chk@plt>
   12e34:	ldrh	r2, [r5, #4]
   12e38:	ldr	r1, [pc, #-852]	; 12aec <__assert_fail@plt+0xe64>
   12e3c:	mov	r0, #1
   12e40:	bl	11b2c <__printf_chk@plt>
   12e44:	ldrb	r2, [r5, #6]
   12e48:	ldr	r1, [pc, #-864]	; 12af0 <__assert_fail@plt+0xe68>
   12e4c:	mov	r0, #1
   12e50:	bl	11b2c <__printf_chk@plt>
   12e54:	ldrb	r2, [r5, #7]
   12e58:	ldr	r1, [pc, #-876]	; 12af4 <__assert_fail@plt+0xe6c>
   12e5c:	mov	r0, #1
   12e60:	bl	11b2c <__printf_chk@plt>
   12e64:	ldrb	r2, [r5, #8]
   12e68:	ldr	r1, [pc, #-888]	; 12af8 <__assert_fail@plt+0xe70>
   12e6c:	mov	r0, #1
   12e70:	bl	11b2c <__printf_chk@plt>
   12e74:	ldrb	r3, [r4, #4]
   12e78:	add	r6, r6, #20
   12e7c:	cmp	r8, r3
   12e80:	blt	12da8 <__assert_fail@plt+0x1120>
   12e84:	ldr	r9, [sp, #16]
   12e88:	ldr	r8, [sp, #20]
   12e8c:	ldr	r3, [sl, #4]
   12e90:	add	r9, r9, #1
   12e94:	cmp	r9, r3
   12e98:	add	r8, r8, #24
   12e9c:	blt	12cc4 <__assert_fail@plt+0x103c>
   12ea0:	ldr	r3, [sp, #32]
   12ea4:	add	r3, r3, #1
   12ea8:	str	r3, [sp, #32]
   12eac:	b	12c80 <__assert_fail@plt+0xff8>
   12eb0:	ldr	r0, [pc, #-956]	; 12afc <__assert_fail@plt+0xe74>
   12eb4:	bl	119f4 <puts@plt>
   12eb8:	b	124dc <__assert_fail@plt+0x854>
   12ebc:	add	r0, r0, #99	; 0x63
   12ec0:	cmp	r0, #99	; 0x63
   12ec4:	ldr	r1, [pc, #-972]	; 12b00 <__assert_fail@plt+0xe78>
   12ec8:	ldrls	r3, [pc, #-972]	; 12b04 <__assert_fail@plt+0xe7c>
   12ecc:	ldrhi	r2, [pc, #-972]	; 12b08 <__assert_fail@plt+0xe80>
   12ed0:	ldrls	r2, [r3, r0, lsl #2]
   12ed4:	mov	r0, #1
   12ed8:	bl	11b2c <__printf_chk@plt>
   12edc:	b	1276c <__assert_fail@plt+0xae4>
   12ee0:	cmp	r6, #0
   12ee4:	beq	12f00 <__assert_fail@plt+0x1278>
   12ee8:	ldr	r3, [fp]
   12eec:	cmp	r3, #0
   12ef0:	ble	120cc <__assert_fail@plt+0x444>
   12ef4:	ldr	r0, [pc, #-992]	; 12b1c <__assert_fail@plt+0xe94>
   12ef8:	bl	119f4 <puts@plt>
   12efc:	b	1244c <__assert_fail@plt+0x7c4>
   12f00:	cmp	r5, #0
   12f04:	ble	120cc <__assert_fail@plt+0x444>
   12f08:	ldr	r0, [pc, #-1028]	; 12b0c <__assert_fail@plt+0xe84>
   12f0c:	bl	119f4 <puts@plt>
   12f10:	b	1244c <__assert_fail@plt+0x7c4>
   12f14:	mov	r2, r4
   12f18:	ldr	r1, [pc, #-1040]	; 12b10 <__assert_fail@plt+0xe88>
   12f1c:	mov	r0, #1
   12f20:	bl	11b2c <__printf_chk@plt>
   12f24:	ldr	r0, [pc, #-1048]	; 12b14 <__assert_fail@plt+0xe8c>
   12f28:	bl	119f4 <puts@plt>
   12f2c:	b	1208c <__assert_fail@plt+0x404>
   12f30:	mov	r2, r4
   12f34:	ldr	r1, [pc, #-1060]	; 12b18 <__assert_fail@plt+0xe90>
   12f38:	mov	r0, #1
   12f3c:	bl	11b2c <__printf_chk@plt>
   12f40:	b	12350 <__assert_fail@plt+0x6c8>
   12f44:	ldr	r0, [pc, #-1072]	; 12b1c <__assert_fail@plt+0xe94>
   12f48:	bl	119f4 <puts@plt>
   12f4c:	cmp	r6, #0
   12f50:	bne	12ee8 <__assert_fail@plt+0x1260>
   12f54:	b	1244c <__assert_fail@plt+0x7c4>
   12f58:	ldr	r3, [pc, #-1084]	; 12b24 <__assert_fail@plt+0xe9c>
   12f5c:	ldr	r1, [pc, #-1092]	; 12b20 <__assert_fail@plt+0xe98>
   12f60:	mov	r0, #1
   12f64:	bl	11b2c <__printf_chk@plt>
   12f68:	b	12950 <__assert_fail@plt+0xcc8>
   12f6c:	ldr	r3, [pc, #-1104]	; 12b24 <__assert_fail@plt+0xe9c>
   12f70:	ldr	r1, [sp, #76]	; 0x4c
   12f74:	mov	r2, r3
   12f78:	b	12800 <__assert_fail@plt+0xb78>
   12f7c:	ldr	r3, [pc, #-1120]	; 12b24 <__assert_fail@plt+0xe9c>
   12f80:	ldr	r2, [sp, #72]	; 0x48
   12f84:	mov	r1, r3
   12f88:	b	12800 <__assert_fail@plt+0xb78>
   12f8c:	bl	118e0 <__stack_chk_fail@plt>
   12f90:	mov	fp, #0
   12f94:	mov	lr, #0
   12f98:	pop	{r1}		; (ldr r1, [sp], #4)
   12f9c:	mov	r2, sp
   12fa0:	push	{r2}		; (str r2, [sp, #-4]!)
   12fa4:	push	{r0}		; (str r0, [sp, #-4]!)
   12fa8:	ldr	ip, [pc, #16]	; 12fc0 <__assert_fail@plt+0x1338>
   12fac:	push	{ip}		; (str ip, [sp, #-4]!)
   12fb0:	ldr	r0, [pc, #12]	; 12fc4 <__assert_fail@plt+0x133c>
   12fb4:	ldr	r3, [pc, #12]	; 12fc8 <__assert_fail@plt+0x1340>
   12fb8:	bl	11a0c <__libc_start_main@plt>
   12fbc:	bl	11c4c <abort@plt>
   12fc0:	strdeq	pc, [r1], -r4
   12fc4:	muleq	r1, r8, ip
   12fc8:	muleq	r1, r4, r8
   12fcc:	ldr	r3, [pc, #20]	; 12fe8 <__assert_fail@plt+0x1360>
   12fd0:	ldr	r2, [pc, #20]	; 12fec <__assert_fail@plt+0x1364>
   12fd4:	add	r3, pc, r3
   12fd8:	ldr	r2, [r3, r2]
   12fdc:	cmp	r2, #0
   12fe0:	bxeq	lr
   12fe4:	b	11a54 <__gmon_start__@plt>
   12fe8:	andeq	r4, r2, r0, asr lr
   12fec:			; <UNDEFINED> instruction: 0x000001bc
   12ff0:	ldr	r0, [pc, #24]	; 13010 <__assert_fail@plt+0x1388>
   12ff4:	ldr	r3, [pc, #24]	; 13014 <__assert_fail@plt+0x138c>
   12ff8:	cmp	r3, r0
   12ffc:	bxeq	lr
   13000:	ldr	r3, [pc, #16]	; 13018 <__assert_fail@plt+0x1390>
   13004:	cmp	r3, #0
   13008:	bxeq	lr
   1300c:	bx	r3
   13010:	andeq	r8, r3, r8, ror #3
   13014:	andeq	r8, r3, r8, ror #3
   13018:	andeq	r0, r0, r0
   1301c:	ldr	r0, [pc, #36]	; 13048 <__assert_fail@plt+0x13c0>
   13020:	ldr	r1, [pc, #36]	; 1304c <__assert_fail@plt+0x13c4>
   13024:	sub	r1, r1, r0
   13028:	asr	r1, r1, #2
   1302c:	add	r1, r1, r1, lsr #31
   13030:	asrs	r1, r1, #1
   13034:	bxeq	lr
   13038:	ldr	r3, [pc, #16]	; 13050 <__assert_fail@plt+0x13c8>
   1303c:	cmp	r3, #0
   13040:	bxeq	lr
   13044:	bx	r3
   13048:	andeq	r8, r3, r8, ror #3
   1304c:	andeq	r8, r3, r8, ror #3
   13050:	andeq	r0, r0, r0
   13054:	push	{r4, lr}
   13058:	ldr	r4, [pc, #24]	; 13078 <__assert_fail@plt+0x13f0>
   1305c:	ldrb	r3, [r4]
   13060:	cmp	r3, #0
   13064:	popne	{r4, pc}
   13068:	bl	12ff0 <__assert_fail@plt+0x1368>
   1306c:	mov	r3, #1
   13070:	strb	r3, [r4]
   13074:	pop	{r4, pc}
   13078:	andeq	r8, r3, ip, ror #3
   1307c:	b	1301c <__assert_fail@plt+0x1394>
   13080:	push	{r4, r5, r6, r7, lr}
   13084:	mov	r3, #0
   13088:	ldr	r7, [pc, #184]	; 13148 <__assert_fail@plt+0x14c0>
   1308c:	sub	sp, sp, #524	; 0x20c
   13090:	mov	r1, r3
   13094:	ldr	ip, [r7]
   13098:	mov	r2, #252	; 0xfc
   1309c:	add	r0, sp, #264	; 0x108
   130a0:	str	ip, [sp, #516]	; 0x204
   130a4:	str	r3, [sp, #260]	; 0x104
   130a8:	bl	11b08 <memset@plt>
   130ac:	ldr	r1, [pc, #152]	; 1314c <__assert_fail@plt+0x14c4>
   130b0:	ldr	r0, [pc, #152]	; 13150 <__assert_fail@plt+0x14c8>
   130b4:	bl	11814 <fopen@plt>
   130b8:	subs	r4, r0, #0
   130bc:	moveq	r0, r4
   130c0:	beq	1312c <__assert_fail@plt+0x14a4>
   130c4:	ldr	r5, [pc, #136]	; 13154 <__assert_fail@plt+0x14cc>
   130c8:	ldr	r6, [pc, #136]	; 13158 <__assert_fail@plt+0x14d0>
   130cc:	mov	r2, r4
   130d0:	mov	r1, #255	; 0xff
   130d4:	add	r0, sp, #4
   130d8:	bl	1185c <fgets@plt>
   130dc:	cmp	r0, #0
   130e0:	beq	13110 <__assert_fail@plt+0x1488>
   130e4:	add	r2, sp, #260	; 0x104
   130e8:	mov	r1, r5
   130ec:	add	r0, sp, #4
   130f0:	bl	11c10 <sscanf@plt>
   130f4:	cmp	r0, #0
   130f8:	ble	130cc <__assert_fail@plt+0x1444>
   130fc:	mov	r1, r6
   13100:	add	r0, sp, #260	; 0x104
   13104:	bl	117e4 <strcmp@plt>
   13108:	cmp	r0, #0
   1310c:	bne	130cc <__assert_fail@plt+0x1444>
   13110:	mov	r0, r4
   13114:	bl	11b74 <fclose@plt>
   13118:	add	r0, sp, #260	; 0x104
   1311c:	ldr	r1, [pc, #52]	; 13158 <__assert_fail@plt+0x14d0>
   13120:	bl	117e4 <strcmp@plt>
   13124:	clz	r0, r0
   13128:	lsr	r0, r0, #5
   1312c:	ldr	r2, [sp, #516]	; 0x204
   13130:	ldr	r3, [r7]
   13134:	cmp	r2, r3
   13138:	bne	13144 <__assert_fail@plt+0x14bc>
   1313c:	add	sp, sp, #524	; 0x20c
   13140:	pop	{r4, r5, r6, r7, pc}
   13144:	bl	118e0 <__stack_chk_fail@plt>
   13148:	andeq	r7, r3, r8, lsl sp
   1314c:	andeq	r3, r2, r8, asr #5
   13150:	andeq	pc, r1, ip, asr #21
   13154:	ldrdeq	pc, [r1], -ip
   13158:	andeq	pc, r1, r8, ror #21
   1315c:	push	{r4, r5, r6, r7, lr}
   13160:	sub	sp, sp, #100	; 0x64
   13164:	ldr	r6, [pc, #268]	; 13278 <__assert_fail@plt+0x15f0>
   13168:	ldr	r5, [pc, #268]	; 1327c <__assert_fail@plt+0x15f4>
   1316c:	mov	r4, r0
   13170:	ldr	r2, [r6]
   13174:	ldr	r3, [r5]
   13178:	cmp	r2, #2
   1317c:	str	r3, [sp, #92]	; 0x5c
   13180:	bgt	131fc <__assert_fail@plt+0x1574>
   13184:	mov	r2, sp
   13188:	mov	r1, r4
   1318c:	mov	r0, #3
   13190:	bl	1194c <__xstat@plt>
   13194:	cmp	r0, #0
   13198:	blt	13210 <__assert_fail@plt+0x1588>
   1319c:	ldr	r3, [sp, #16]
   131a0:	and	r3, r3, #61440	; 0xf000
   131a4:	cmp	r3, #16384	; 0x4000
   131a8:	bne	131d8 <__assert_fail@plt+0x1550>
   131ac:	mov	r0, r4
   131b0:	bl	119d0 <opendir@plt>
   131b4:	subs	r7, r0, #0
   131b8:	beq	13244 <__assert_fail@plt+0x15bc>
   131bc:	ldr	r2, [sp, #92]	; 0x5c
   131c0:	ldr	r3, [r5]
   131c4:	mov	r0, r7
   131c8:	cmp	r2, r3
   131cc:	bne	13274 <__assert_fail@plt+0x15ec>
   131d0:	add	sp, sp, #100	; 0x64
   131d4:	pop	{r4, r5, r6, r7, pc}
   131d8:	ldr	r3, [r6]
   131dc:	cmp	r3, #1
   131e0:	ble	131f4 <__assert_fail@plt+0x156c>
   131e4:	mov	r2, r4
   131e8:	ldr	r1, [pc, #144]	; 13280 <__assert_fail@plt+0x15f8>
   131ec:	mov	r0, #1
   131f0:	bl	11b2c <__printf_chk@plt>
   131f4:	mov	r7, #0
   131f8:	b	131bc <__assert_fail@plt+0x1534>
   131fc:	mov	r2, r0
   13200:	ldr	r1, [pc, #124]	; 13284 <__assert_fail@plt+0x15fc>
   13204:	mov	r0, #1
   13208:	bl	11b2c <__printf_chk@plt>
   1320c:	b	13184 <__assert_fail@plt+0x14fc>
   13210:	ldr	r3, [r6]
   13214:	cmp	r3, #1
   13218:	ble	131f4 <__assert_fail@plt+0x156c>
   1321c:	bl	11acc <__errno_location@plt>
   13220:	mov	r7, #0
   13224:	ldr	r0, [r0]
   13228:	bl	11a18 <strerror@plt>
   1322c:	mov	r2, r4
   13230:	ldr	r1, [pc, #80]	; 13288 <__assert_fail@plt+0x1600>
   13234:	mov	r3, r0
   13238:	mov	r0, #1
   1323c:	bl	11b2c <__printf_chk@plt>
   13240:	b	131bc <__assert_fail@plt+0x1534>
   13244:	ldr	r3, [r6]
   13248:	cmp	r3, #1
   1324c:	ble	131f4 <__assert_fail@plt+0x156c>
   13250:	bl	11acc <__errno_location@plt>
   13254:	ldr	r0, [r0]
   13258:	bl	11a18 <strerror@plt>
   1325c:	mov	r2, r4
   13260:	ldr	r1, [pc, #36]	; 1328c <__assert_fail@plt+0x1604>
   13264:	mov	r3, r0
   13268:	mov	r0, #1
   1326c:	bl	11b2c <__printf_chk@plt>
   13270:	b	131bc <__assert_fail@plt+0x1534>
   13274:	bl	118e0 <__stack_chk_fail@plt>
   13278:	andeq	r8, r3, r8
   1327c:	andeq	r7, r3, r8, lsl sp
   13280:	andeq	pc, r1, ip, lsl fp	; <UNPREDICTABLE>
   13284:	andeq	pc, r1, ip, ror #21
   13288:	andeq	pc, r1, r4, lsl #22
   1328c:	andeq	pc, r1, r8, lsr fp	; <UNPREDICTABLE>
   13290:	push	{r4, r5, r6, r7, lr}
   13294:	sub	sp, sp, #28
   13298:	ldr	r5, [pc, #388]	; 13424 <__assert_fail@plt+0x179c>
   1329c:	ldr	r1, [pc, #388]	; 13428 <__assert_fail@plt+0x17a0>
   132a0:	mov	r4, r0
   132a4:	ldr	r3, [r5]
   132a8:	ldr	r6, [pc, #380]	; 1342c <__assert_fail@plt+0x17a4>
   132ac:	str	r3, [sp, #20]
   132b0:	bl	117c0 <strstr@plt>
   132b4:	ldr	r7, [r6]
   132b8:	cmp	r0, #0
   132bc:	beq	13384 <__assert_fail@plt+0x16fc>
   132c0:	cmp	r7, #1
   132c4:	ble	132d8 <__assert_fail@plt+0x1650>
   132c8:	mov	r2, r4
   132cc:	ldr	r1, [pc, #348]	; 13430 <__assert_fail@plt+0x17a8>
   132d0:	mov	r0, #1
   132d4:	bl	11b2c <__printf_chk@plt>
   132d8:	add	r1, sp, #16
   132dc:	mov	r0, r4
   132e0:	bl	1d054 <__assert_fail@plt+0xb3cc>
   132e4:	cmp	r0, #0
   132e8:	beq	13328 <__assert_fail@plt+0x16a0>
   132ec:	ldr	r3, [r6]
   132f0:	cmp	r3, #1
   132f4:	bgt	13310 <__assert_fail@plt+0x1688>
   132f8:	ldr	r2, [sp, #20]
   132fc:	ldr	r3, [r5]
   13300:	cmp	r2, r3
   13304:	bne	13420 <__assert_fail@plt+0x1798>
   13308:	add	sp, sp, #28
   1330c:	pop	{r4, r5, r6, r7, pc}
   13310:	bl	14f00 <__assert_fail@plt+0x3278>
   13314:	ldr	r1, [pc, #280]	; 13434 <__assert_fail@plt+0x17ac>
   13318:	mov	r2, r0
   1331c:	mov	r0, #1
   13320:	bl	11b2c <__printf_chk@plt>
   13324:	b	132f8 <__assert_fail@plt+0x1670>
   13328:	add	r2, sp, #12
   1332c:	add	r1, sp, #8
   13330:	ldr	r0, [sp, #16]
   13334:	bl	1c9fc <__assert_fail@plt+0xad74>
   13338:	ldr	r3, [r6]
   1333c:	cmp	r0, #0
   13340:	beq	133d8 <__assert_fail@plt+0x1750>
   13344:	cmp	r3, #1
   13348:	ble	13354 <__assert_fail@plt+0x16cc>
   1334c:	ldr	r0, [pc, #228]	; 13438 <__assert_fail@plt+0x17b0>
   13350:	bl	119f4 <puts@plt>
   13354:	mov	r2, r4
   13358:	ldr	r1, [pc, #220]	; 1343c <__assert_fail@plt+0x17b4>
   1335c:	mov	r0, #1
   13360:	bl	11b2c <__printf_chk@plt>
   13364:	ldr	r3, [pc, #212]	; 13440 <__assert_fail@plt+0x17b8>
   13368:	mov	r2, #1
   1336c:	str	r2, [r3, #4]
   13370:	mov	r2, #1
   13374:	ldr	r0, [sp, #16]
   13378:	str	r2, [r3, #8]
   1337c:	bl	1eb08 <__assert_fail@plt+0xce80>
   13380:	b	132f8 <__assert_fail@plt+0x1670>
   13384:	ldr	r1, [pc, #184]	; 13444 <__assert_fail@plt+0x17bc>
   13388:	mov	r0, r4
   1338c:	bl	117c0 <strstr@plt>
   13390:	cmp	r0, #0
   13394:	bne	132c0 <__assert_fail@plt+0x1638>
   13398:	ldr	r1, [pc, #168]	; 13448 <__assert_fail@plt+0x17c0>
   1339c:	mov	r0, r4
   133a0:	bl	117c0 <strstr@plt>
   133a4:	cmp	r0, #0
   133a8:	bne	132c0 <__assert_fail@plt+0x1638>
   133ac:	ldr	r3, [pc, #140]	; 13440 <__assert_fail@plt+0x17b8>
   133b0:	ldr	r3, [r3]
   133b4:	cmp	r3, #0
   133b8:	beq	13404 <__assert_fail@plt+0x177c>
   133bc:	cmp	r7, #1
   133c0:	ble	132d8 <__assert_fail@plt+0x1650>
   133c4:	mov	r2, r4
   133c8:	ldr	r1, [pc, #124]	; 1344c <__assert_fail@plt+0x17c4>
   133cc:	mov	r0, #1
   133d0:	bl	11b2c <__printf_chk@plt>
   133d4:	b	132d8 <__assert_fail@plt+0x1650>
   133d8:	cmp	r3, #1
   133dc:	ble	133e8 <__assert_fail@plt+0x1760>
   133e0:	ldr	r0, [pc, #104]	; 13450 <__assert_fail@plt+0x17c8>
   133e4:	bl	119f4 <puts@plt>
   133e8:	ldrd	r2, [sp, #8]
   133ec:	str	r4, [sp]
   133f0:	ldr	r1, [pc, #92]	; 13454 <__assert_fail@plt+0x17cc>
   133f4:	mov	r0, #1
   133f8:	bl	11b2c <__printf_chk@plt>
   133fc:	ldr	r3, [pc, #60]	; 13440 <__assert_fail@plt+0x17b8>
   13400:	b	13370 <__assert_fail@plt+0x16e8>
   13404:	cmp	r7, #1
   13408:	ble	132f8 <__assert_fail@plt+0x1670>
   1340c:	mov	r2, r4
   13410:	ldr	r1, [pc, #64]	; 13458 <__assert_fail@plt+0x17d0>
   13414:	mov	r0, #1
   13418:	bl	11b2c <__printf_chk@plt>
   1341c:	b	132f8 <__assert_fail@plt+0x1670>
   13420:	bl	118e0 <__stack_chk_fail@plt>
   13424:	andeq	r7, r3, r8, lsl sp
   13428:	andeq	pc, r1, ip, asr fp	; <UNPREDICTABLE>
   1342c:	andeq	r8, r3, r8
   13430:	ldrdeq	pc, [r1], -r0
   13434:	andeq	pc, r1, r0, ror #23
   13438:	andeq	pc, r1, r8, ror #24
   1343c:	andeq	pc, r1, r4, lsr #25
   13440:	strdeq	r8, [r3], -r0
   13444:	andeq	pc, r1, r0, ror #22
   13448:	andeq	pc, r1, ip, ror #22
   1344c:	andeq	pc, r1, r4, ror fp	; <UNPREDICTABLE>
   13450:	strdeq	pc, [r1], -r8
   13454:	andeq	pc, r1, ip, lsr #24
   13458:			; <UNDEFINED> instruction: 0x0001fbb0
   1345c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13460:	sub	sp, sp, #24
   13464:	ldr	r6, [pc, #372]	; 135e0 <__assert_fail@plt+0x1958>
   13468:	cmp	r1, #0
   1346c:	ldr	r3, [r6]
   13470:	str	r3, [sp, #20]
   13474:	beq	1358c <__assert_fail@plt+0x1904>
   13478:	orr	r1, r1, #768	; 0x300
   1347c:	add	r2, sp, #16
   13480:	uxth	r4, r1
   13484:	mov	sl, #1000	; 0x3e8
   13488:	mov	r1, #2
   1348c:	mov	r9, #0
   13490:	str	r1, [sp, #8]
   13494:	str	r2, [sp, #4]
   13498:	mov	r3, r4
   1349c:	str	sl, [sp, #12]
   134a0:	str	r9, [sp]
   134a4:	mov	r2, #6
   134a8:	mov	r1, #128	; 0x80
   134ac:	mov	r8, r0
   134b0:	bl	11c1c <libusb_control_transfer@plt>
   134b4:	cmp	r0, #0
   134b8:	blt	135ac <__assert_fail@plt+0x1924>
   134bc:	ldrb	r7, [sp, #16]
   134c0:	cmp	r7, #1
   134c4:	bls	1358c <__assert_fail@plt+0x1904>
   134c8:	ldrb	r3, [sp, #17]
   134cc:	cmp	r3, #3
   134d0:	bne	1358c <__assert_fail@plt+0x1904>
   134d4:	add	r1, r7, #1
   134d8:	mov	r0, #1
   134dc:	bl	117b4 <calloc@plt>
   134e0:	subs	r5, r0, #0
   134e4:	beq	1358c <__assert_fail@plt+0x1904>
   134e8:	stmib	sp, {r5, r7, sl}
   134ec:	mov	r3, r4
   134f0:	str	r9, [sp]
   134f4:	mov	r0, r8
   134f8:	mov	r2, #6
   134fc:	mov	r1, #128	; 0x80
   13500:	bl	11c1c <libusb_control_transfer@plt>
   13504:	cmp	r0, #0
   13508:	blt	13564 <__assert_fail@plt+0x18dc>
   1350c:	ldrb	r3, [r5]
   13510:	cmp	r3, #1
   13514:	bls	13584 <__assert_fail@plt+0x18fc>
   13518:	cmp	r7, r3
   1351c:	bcc	13584 <__assert_fail@plt+0x18fc>
   13520:	ldrb	r2, [r5, #1]
   13524:	cmp	r2, #3
   13528:	bne	13584 <__assert_fail@plt+0x18fc>
   1352c:	sub	r3, r3, #2
   13530:	asrs	r1, r3, #1
   13534:	beq	135d4 <__assert_fail@plt+0x194c>
   13538:	sub	r3, r5, #1
   1353c:	add	ip, r3, r1
   13540:	rsb	r0, r5, #4
   13544:	ldrb	r2, [r0, r3, lsl #1]
   13548:	strb	r2, [r3, #1]!
   1354c:	cmp	r3, ip
   13550:	bne	13544 <__assert_fail@plt+0x18bc>
   13554:	add	r3, r5, r1
   13558:	mov	r2, #0
   1355c:	strb	r2, [r3]
   13560:	b	13590 <__assert_fail@plt+0x1908>
   13564:	add	r0, r0, #99	; 0x63
   13568:	cmp	r0, #99	; 0x63
   1356c:	ldr	r1, [pc, #112]	; 135e4 <__assert_fail@plt+0x195c>
   13570:	ldrls	r3, [pc, #112]	; 135e8 <__assert_fail@plt+0x1960>
   13574:	ldrhi	r2, [pc, #112]	; 135ec <__assert_fail@plt+0x1964>
   13578:	ldrls	r2, [r3, r0, lsl #2]
   1357c:	mov	r0, #1
   13580:	bl	11b2c <__printf_chk@plt>
   13584:	mov	r0, r5
   13588:	bl	11850 <free@plt>
   1358c:	mov	r5, #0
   13590:	ldr	r2, [sp, #20]
   13594:	ldr	r3, [r6]
   13598:	mov	r0, r5
   1359c:	cmp	r2, r3
   135a0:	bne	135dc <__assert_fail@plt+0x1954>
   135a4:	add	sp, sp, #24
   135a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   135ac:	add	r0, r0, #99	; 0x63
   135b0:	cmp	r0, #99	; 0x63
   135b4:	ldr	r1, [pc, #52]	; 135f0 <__assert_fail@plt+0x1968>
   135b8:	ldrls	r3, [pc, #40]	; 135e8 <__assert_fail@plt+0x1960>
   135bc:	ldrhi	r2, [pc, #40]	; 135ec <__assert_fail@plt+0x1964>
   135c0:	mov	r5, #0
   135c4:	ldrls	r2, [r3, r0, lsl #2]
   135c8:	mov	r0, #1
   135cc:	bl	11b2c <__printf_chk@plt>
   135d0:	b	13590 <__assert_fail@plt+0x1908>
   135d4:	mov	r3, r5
   135d8:	b	13558 <__assert_fail@plt+0x18d0>
   135dc:	bl	118e0 <__stack_chk_fail@plt>
   135e0:	andeq	r7, r3, r8, lsl sp
   135e4:	andeq	pc, r1, ip, lsr #26
   135e8:	andeq	pc, r1, r4, lsl #18
   135ec:	andeq	pc, r1, r4, ror #25
   135f0:	andeq	pc, r1, r4, lsl #26
   135f4:	push	{r4, r5, r6, r7, r8, lr}
   135f8:	mov	r8, r0
   135fc:	ldr	r6, [pc, #184]	; 136bc <__assert_fail@plt+0x1a34>
   13600:	ldr	r7, [pc, #184]	; 136c0 <__assert_fail@plt+0x1a38>
   13604:	sub	sp, sp, #8
   13608:	mov	r5, r1
   1360c:	mov	r0, r5
   13610:	bl	11bb0 <readdir@plt>
   13614:	mov	r1, r6
   13618:	subs	r3, r0, #0
   1361c:	add	r4, r3, #11
   13620:	mov	r0, r4
   13624:	beq	1368c <__assert_fail@plt+0x1a04>
   13628:	bl	117e4 <strcmp@plt>
   1362c:	mov	r1, r7
   13630:	cmp	r0, #0
   13634:	mov	r0, r4
   13638:	beq	1360c <__assert_fail@plt+0x1984>
   1363c:	bl	117e4 <strcmp@plt>
   13640:	cmp	r0, #0
   13644:	beq	1360c <__assert_fail@plt+0x1984>
   13648:	mov	r0, r8
   1364c:	bl	11aa8 <strlen@plt>
   13650:	mov	r5, r0
   13654:	mov	r0, r4
   13658:	bl	11aa8 <strlen@plt>
   1365c:	add	r0, r5, r0
   13660:	add	r0, r0, #1
   13664:	cmp	r0, #4096	; 0x1000
   13668:	bhi	13698 <__assert_fail@plt+0x1a10>
   1366c:	ldr	r3, [pc, #80]	; 136c4 <__assert_fail@plt+0x1a3c>
   13670:	str	r4, [sp, #4]
   13674:	str	r8, [sp]
   13678:	mov	r2, #4096	; 0x1000
   1367c:	mov	r1, #1
   13680:	ldr	r0, [pc, #64]	; 136c8 <__assert_fail@plt+0x1a40>
   13684:	bl	11ae4 <__sprintf_chk@plt>
   13688:	ldr	r3, [pc, #56]	; 136c8 <__assert_fail@plt+0x1a40>
   1368c:	mov	r0, r3
   13690:	add	sp, sp, #8
   13694:	pop	{r4, r5, r6, r7, r8, pc}
   13698:	ldr	r3, [pc, #44]	; 136cc <__assert_fail@plt+0x1a44>
   1369c:	ldr	r3, [r3]
   136a0:	cmp	r3, #1
   136a4:	movle	r3, #0
   136a8:	ble	1368c <__assert_fail@plt+0x1a04>
   136ac:	ldr	r0, [pc, #28]	; 136d0 <__assert_fail@plt+0x1a48>
   136b0:	bl	119f4 <puts@plt>
   136b4:	mov	r3, #0
   136b8:	b	1368c <__assert_fail@plt+0x1a04>
   136bc:	andeq	r1, r2, ip, lsl #16
   136c0:			; <UNDEFINED> instruction: 0x00021dbc
   136c4:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   136c8:	andeq	r8, r3, r4, lsl #4
   136cc:	andeq	r8, r3, r8
   136d0:	andeq	pc, r1, ip, asr sp	; <UNPREDICTABLE>
   136d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d8:	sub	sp, sp, #16384	; 0x4000
   136dc:	ldr	r7, [pc, #1148]	; 13b60 <__assert_fail@plt+0x1ed8>
   136e0:	sub	sp, sp, #204	; 0xcc
   136e4:	add	r2, sp, #16384	; 0x4000
   136e8:	ldr	r3, [r7]
   136ec:	add	r2, r2, #196	; 0xc4
   136f0:	ldr	r1, [pc, #1132]	; 13b64 <__assert_fail@plt+0x1edc>
   136f4:	mov	r8, r0
   136f8:	str	r3, [r2]
   136fc:	bl	117c0 <strstr@plt>
   13700:	ldr	r6, [pc, #1120]	; 13b68 <__assert_fail@plt+0x1ee0>
   13704:	ldr	r4, [r6]
   13708:	cmp	r0, #0
   1370c:	beq	137c4 <__assert_fail@plt+0x1b3c>
   13710:	ldr	r3, [pc, #1108]	; 13b6c <__assert_fail@plt+0x1ee4>
   13714:	ldr	r3, [r3]
   13718:	cmp	r3, #0
   1371c:	beq	137a8 <__assert_fail@plt+0x1b20>
   13720:	cmp	r4, #1
   13724:	bgt	13794 <__assert_fail@plt+0x1b0c>
   13728:	mov	r3, #0
   1372c:	mov	r2, r3
   13730:	add	r1, sp, #32
   13734:	mov	r0, r8
   13738:	bl	17efc <__assert_fail@plt+0x6274>
   1373c:	ldr	r3, [r6]
   13740:	cmp	r3, #1
   13744:	ble	13768 <__assert_fail@plt+0x1ae0>
   13748:	cmp	r0, #0
   1374c:	beq	13808 <__assert_fail@plt+0x1b80>
   13750:	bl	14f00 <__assert_fail@plt+0x3278>
   13754:	ldr	r1, [pc, #1044]	; 13b70 <__assert_fail@plt+0x1ee8>
   13758:	mov	r2, r0
   1375c:	mov	r0, #1
   13760:	bl	11b2c <__printf_chk@plt>
   13764:	b	13770 <__assert_fail@plt+0x1ae8>
   13768:	cmp	r0, #0
   1376c:	beq	13810 <__assert_fail@plt+0x1b88>
   13770:	add	r3, sp, #16384	; 0x4000
   13774:	add	r3, r3, #196	; 0xc4
   13778:	ldr	r2, [r3]
   1377c:	ldr	r3, [r7]
   13780:	cmp	r2, r3
   13784:	bne	13b5c <__assert_fail@plt+0x1ed4>
   13788:	add	sp, sp, #16384	; 0x4000
   1378c:	add	sp, sp, #204	; 0xcc
   13790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13794:	mov	r2, r8
   13798:	ldr	r1, [pc, #980]	; 13b74 <__assert_fail@plt+0x1eec>
   1379c:	mov	r0, #1
   137a0:	bl	11b2c <__printf_chk@plt>
   137a4:	b	13728 <__assert_fail@plt+0x1aa0>
   137a8:	cmp	r4, #1
   137ac:	ble	13770 <__assert_fail@plt+0x1ae8>
   137b0:	mov	r2, r8
   137b4:	ldr	r1, [pc, #956]	; 13b78 <__assert_fail@plt+0x1ef0>
   137b8:	mov	r0, #1
   137bc:	bl	11b2c <__printf_chk@plt>
   137c0:	b	13770 <__assert_fail@plt+0x1ae8>
   137c4:	ldr	r1, [pc, #944]	; 13b7c <__assert_fail@plt+0x1ef4>
   137c8:	mov	r0, r8
   137cc:	bl	117c0 <strstr@plt>
   137d0:	cmp	r0, #0
   137d4:	bne	13710 <__assert_fail@plt+0x1a88>
   137d8:	ldr	r1, [pc, #928]	; 13b80 <__assert_fail@plt+0x1ef8>
   137dc:	mov	r0, r8
   137e0:	bl	117c0 <strstr@plt>
   137e4:	cmp	r0, #0
   137e8:	bne	13710 <__assert_fail@plt+0x1a88>
   137ec:	cmp	r4, #1
   137f0:	ble	13728 <__assert_fail@plt+0x1aa0>
   137f4:	mov	r2, r8
   137f8:	ldr	r1, [pc, #900]	; 13b84 <__assert_fail@plt+0x1efc>
   137fc:	mov	r0, #1
   13800:	bl	11b2c <__printf_chk@plt>
   13804:	b	13728 <__assert_fail@plt+0x1aa0>
   13808:	ldr	r0, [pc, #888]	; 13b88 <__assert_fail@plt+0x1f00>
   1380c:	bl	119f4 <puts@plt>
   13810:	ldr	r9, [sp, #32]
   13814:	mov	r2, #256	; 0x100
   13818:	mov	r1, #0
   1381c:	add	r5, sp, #200	; 0xc8
   13820:	add	r0, sp, #196	; 0xc4
   13824:	bl	11b08 <memset@plt>
   13828:	mov	ip, #5
   1382c:	str	ip, [r5, #-164]!	; 0xffffff5c
   13830:	add	r3, sp, #196	; 0xc4
   13834:	str	r5, [sp]
   13838:	mov	r0, r9
   1383c:	mov	r2, #6
   13840:	ldr	r1, [pc, #836]	; 13b8c <__assert_fail@plt+0x1f04>
   13844:	strb	ip, [r6, #8]
   13848:	bl	18110 <__assert_fail@plt+0x6488>
   1384c:	subs	r4, r0, #0
   13850:	beq	1386c <__assert_fail@plt+0x1be4>
   13854:	ldr	r3, [r6]
   13858:	cmp	r3, #1
   1385c:	bgt	13a1c <__assert_fail@plt+0x1d94>
   13860:	ldr	r0, [sp, #32]
   13864:	bl	15d84 <__assert_fail@plt+0x40fc>
   13868:	b	13770 <__assert_fail@plt+0x1ae8>
   1386c:	ldrb	ip, [sp, #200]	; 0xc8
   13870:	str	r5, [sp]
   13874:	mov	r0, r9
   13878:	add	ip, ip, #5
   1387c:	add	r3, sp, #196	; 0xc4
   13880:	mov	r2, #6
   13884:	ldr	r1, [pc, #768]	; 13b8c <__assert_fail@plt+0x1f04>
   13888:	str	ip, [sp, #36]	; 0x24
   1388c:	strb	ip, [r6, #8]
   13890:	bl	18110 <__assert_fail@plt+0x6488>
   13894:	subs	r4, r0, #0
   13898:	bne	13854 <__assert_fail@plt+0x1bcc>
   1389c:	ldr	r3, [r6]
   138a0:	cmp	r3, #2
   138a4:	bgt	13a3c <__assert_fail@plt+0x1db4>
   138a8:	ldrb	r4, [sp, #196]	; 0xc4
   138ac:	cmp	r3, #1
   138b0:	and	r4, r4, #31
   138b4:	bgt	138c4 <__assert_fail@plt+0x1c3c>
   138b8:	cmp	r4, #6
   138bc:	cmpne	r4, #3
   138c0:	bne	13860 <__assert_fail@plt+0x1bd8>
   138c4:	add	r3, sp, #200	; 0xc8
   138c8:	add	fp, sp, #48	; 0x30
   138cc:	add	r1, r3, #4
   138d0:	mov	r2, #8
   138d4:	mov	r0, fp
   138d8:	sub	sl, r3, #132	; 0x84
   138dc:	bl	11b20 <strncpy@plt>
   138e0:	add	r3, sp, #200	; 0xc8
   138e4:	add	r1, r3, #12
   138e8:	mov	r2, #16
   138ec:	add	r5, sp, #40	; 0x28
   138f0:	mov	r0, sl
   138f4:	bl	11b20 <strncpy@plt>
   138f8:	mov	r0, r5
   138fc:	mov	r2, #4
   13900:	add	r1, sp, #228	; 0xe4
   13904:	bl	11b20 <strncpy@plt>
   13908:	add	r3, sp, #200	; 0xc8
   1390c:	mov	r0, #0
   13910:	strb	r0, [r3, #-144]!	; 0xffffff70
   13914:	ldrb	r1, [r3, #-1]!
   13918:	cmp	r1, #126	; 0x7e
   1391c:	movls	r2, #0
   13920:	movhi	r2, #1
   13924:	cmp	r1, #32
   13928:	orreq	r2, r2, #1
   1392c:	cmp	r2, #0
   13930:	beq	13940 <__assert_fail@plt+0x1cb8>
   13934:	cmp	r3, fp
   13938:	strb	r0, [r3]
   1393c:	bne	13914 <__assert_fail@plt+0x1c8c>
   13940:	mov	ip, #0
   13944:	strb	ip, [sp, #84]	; 0x54
   13948:	add	r0, sp, #83	; 0x53
   1394c:	b	13954 <__assert_fail@plt+0x1ccc>
   13950:	mov	r0, r3
   13954:	mov	r3, r0
   13958:	ldrb	r1, [r3], #-1
   1395c:	cmp	r1, #126	; 0x7e
   13960:	movls	r2, #0
   13964:	movhi	r2, #1
   13968:	cmp	r1, #32
   1396c:	orreq	r2, r2, #1
   13970:	cmp	r2, #0
   13974:	beq	13984 <__assert_fail@plt+0x1cfc>
   13978:	cmp	r0, sl
   1397c:	strb	ip, [r3, #1]
   13980:	bne	13950 <__assert_fail@plt+0x1cc8>
   13984:	add	r2, sp, #43	; 0x2b
   13988:	mov	r3, r2
   1398c:	mov	r1, #0
   13990:	strb	r1, [sp, #44]	; 0x2c
   13994:	ldrb	r0, [r3], #-1
   13998:	cmp	r0, #32
   1399c:	beq	139ac <__assert_fail@plt+0x1d24>
   139a0:	ldrb	r0, [r2, #-1]
   139a4:	cmp	r0, #126	; 0x7e
   139a8:	bls	139d0 <__assert_fail@plt+0x1d48>
   139ac:	cmp	r5, r2
   139b0:	strb	r1, [r3, #1]
   139b4:	beq	139d0 <__assert_fail@plt+0x1d48>
   139b8:	mov	r2, r3
   139bc:	mov	r3, r2
   139c0:	ldrb	r0, [r3], #-1
   139c4:	cmp	r0, #32
   139c8:	bne	139a0 <__assert_fail@plt+0x1d18>
   139cc:	b	139ac <__assert_fail@plt+0x1d24>
   139d0:	ldr	r3, [pc, #404]	; 13b6c <__assert_fail@plt+0x1ee4>
   139d4:	mov	r2, #1
   139d8:	cmp	r4, #9
   139dc:	str	r2, [r3, #8]
   139e0:	bls	13a0c <__assert_fail@plt+0x1d84>
   139e4:	ldr	r2, [pc, #420]	; 13b90 <__assert_fail@plt+0x1f08>
   139e8:	stmib	sp, {r5, r8}
   139ec:	str	sl, [sp]
   139f0:	mov	r3, fp
   139f4:	ldr	r1, [pc, #408]	; 13b94 <__assert_fail@plt+0x1f0c>
   139f8:	mov	r0, #1
   139fc:	bl	11b2c <__printf_chk@plt>
   13a00:	ldr	r0, [sp, #32]
   13a04:	bl	15d84 <__assert_fail@plt+0x40fc>
   13a08:	b	13770 <__assert_fail@plt+0x1ae8>
   13a0c:	ldr	r3, [pc, #388]	; 13b98 <__assert_fail@plt+0x1f10>
   13a10:	add	r4, r3, r4, lsl #2
   13a14:	ldr	r2, [r4, #400]	; 0x190
   13a18:	b	139e8 <__assert_fail@plt+0x1d60>
   13a1c:	mov	r0, r4
   13a20:	bl	14f00 <__assert_fail@plt+0x3278>
   13a24:	mov	r2, r8
   13a28:	ldr	r1, [pc, #364]	; 13b9c <__assert_fail@plt+0x1f14>
   13a2c:	mov	r3, r0
   13a30:	mov	r0, #1
   13a34:	bl	11b2c <__printf_chk@plt>
   13a38:	b	13860 <__assert_fail@plt+0x1bd8>
   13a3c:	ldrb	r9, [sp, #200]	; 0xc8
   13a40:	ldr	r2, [pc, #344]	; 13ba0 <__assert_fail@plt+0x1f18>
   13a44:	ldr	r1, [pc, #344]	; 13ba4 <__assert_fail@plt+0x1f1c>
   13a48:	mov	r0, #1
   13a4c:	bl	11b2c <__printf_chk@plt>
   13a50:	add	r3, r9, #20
   13a54:	add	fp, sp, #48	; 0x30
   13a58:	add	sl, sp, #68	; 0x44
   13a5c:	bic	r3, r3, #15
   13a60:	add	r2, r9, #5
   13a64:	str	fp, [sp, #20]
   13a68:	str	sl, [sp, #24]
   13a6c:	add	r5, sp, #196	; 0xc4
   13a70:	mov	fp, r2
   13a74:	mov	sl, r3
   13a78:	str	r8, [sp, #28]
   13a7c:	mov	ip, #0
   13a80:	str	r4, [sp]
   13a84:	ldr	r3, [pc, #284]	; 13ba8 <__assert_fail@plt+0x1f20>
   13a88:	mov	r2, #128	; 0x80
   13a8c:	mov	r1, #1
   13a90:	ldr	r0, [sp, #24]
   13a94:	strb	ip, [sp, #68]	; 0x44
   13a98:	strb	ip, [sp, #48]	; 0x30
   13a9c:	add	r8, sp, #74	; 0x4a
   13aa0:	bl	11ae4 <__sprintf_chk@plt>
   13aa4:	ldr	r9, [sp, #20]
   13aa8:	b	13b08 <__assert_fail@plt+0x1e80>
   13aac:	ldrb	r1, [r5]
   13ab0:	ldr	r3, [pc, #244]	; 13bac <__assert_fail@plt+0x1f24>
   13ab4:	mvn	r2, #0
   13ab8:	str	r1, [sp]
   13abc:	mov	r0, r8
   13ac0:	mov	r1, #1
   13ac4:	bl	11ae4 <__sprintf_chk@plt>
   13ac8:	ldrb	r3, [r5]
   13acc:	add	r8, r8, #3
   13ad0:	sub	r2, r3, #32
   13ad4:	cmp	r2, #95	; 0x5f
   13ad8:	bhi	13b28 <__assert_fail@plt+0x1ea0>
   13adc:	str	r3, [sp]
   13ae0:	mov	r0, r9
   13ae4:	ldr	r3, [pc, #196]	; 13bb0 <__assert_fail@plt+0x1f28>
   13ae8:	mvn	r2, #0
   13aec:	mov	r1, #1
   13af0:	bl	11ae4 <__sprintf_chk@plt>
   13af4:	add	r9, r9, #1
   13af8:	add	r4, r4, #1
   13afc:	tst	r4, #15
   13b00:	add	r5, r5, #1
   13b04:	beq	13b44 <__assert_fail@plt+0x1ebc>
   13b08:	cmp	r4, sl
   13b0c:	bge	13b38 <__assert_fail@plt+0x1eb0>
   13b10:	cmp	fp, r4
   13b14:	bgt	13aac <__assert_fail@plt+0x1e24>
   13b18:	ldr	r3, [pc, #148]	; 13bb4 <__assert_fail@plt+0x1f2c>
   13b1c:	ldr	r0, [r3]
   13b20:	str	r0, [r8], #3
   13b24:	b	13af8 <__assert_fail@plt+0x1e70>
   13b28:	ldr	r3, [pc, #136]	; 13bb8 <__assert_fail@plt+0x1f30>
   13b2c:	ldrh	r3, [r3]
   13b30:	strh	r3, [r9], #1
   13b34:	b	13af8 <__assert_fail@plt+0x1e70>
   13b38:	ldr	r8, [sp, #28]
   13b3c:	ldr	r3, [r6]
   13b40:	b	138a8 <__assert_fail@plt+0x1c20>
   13b44:	ldr	r3, [sp, #20]
   13b48:	ldr	r2, [sp, #24]
   13b4c:	ldr	r1, [pc, #104]	; 13bbc <__assert_fail@plt+0x1f34>
   13b50:	mov	r0, #1
   13b54:	bl	11b2c <__printf_chk@plt>
   13b58:	b	13a7c <__assert_fail@plt+0x1df4>
   13b5c:	bl	118e0 <__stack_chk_fail@plt>
   13b60:	andeq	r7, r3, r8, lsl sp
   13b64:	andeq	pc, r1, ip, asr fp	; <UNPREDICTABLE>
   13b68:	andeq	r8, r3, r8
   13b6c:	strdeq	r8, [r3], -r0
   13b70:	andeq	pc, r1, r0, ror #23
   13b74:	andeq	pc, r1, r8, lsl #27
   13b78:	andeq	pc, r1, r0, asr #27
   13b7c:	andeq	pc, r1, r0, ror #22
   13b80:	andeq	pc, r1, ip, ror #22
   13b84:	ldrdeq	pc, [r1], -r0
   13b88:	andeq	pc, r1, r0, ror #27
   13b8c:	andeq	r8, r3, ip
   13b90:	andeq	pc, r1, r8, ror sp	; <UNPREDICTABLE>
   13b94:	andeq	pc, r1, ip, asr #28
   13b98:	andeq	pc, r1, r4, lsl #18
   13b9c:	andeq	pc, r1, ip, ror #27
   13ba0:	andeq	pc, r1, r0, lsl lr	; <UNPREDICTABLE>
   13ba4:	andeq	r3, r2, r8, ror #6
   13ba8:	andeq	pc, r1, r0, asr #28
   13bac:	andeq	pc, r1, r4, lsr #28
   13bb0:	andeq	pc, r1, ip, lsr #28
   13bb4:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   13bb8:	andeq	r1, r2, ip, lsl #16
   13bbc:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   13bc0:	push	{r4, r5, lr}
   13bc4:	sub	sp, sp, #28
   13bc8:	ldr	r5, [pc, #108]	; 13c3c <__assert_fail@plt+0x1fb4>
   13bcc:	mov	ip, #1000	; 0x3e8
   13bd0:	add	r3, sp, #8
   13bd4:	ldr	lr, [r5]
   13bd8:	stm	sp, {r3, ip}
   13bdc:	mov	r4, #0
   13be0:	strb	r1, [sp, #13]
   13be4:	strb	r2, [sp, #16]
   13be8:	mov	ip, #256	; 0x100
   13bec:	mov	r3, #5
   13bf0:	add	r2, sp, #12
   13bf4:	mov	r1, #3
   13bf8:	str	lr, [sp, #20]
   13bfc:	strb	r4, [sp, #12]
   13c00:	strh	ip, [sp, #14]
   13c04:	bl	11af0 <libusb_bulk_transfer@plt>
   13c08:	ldr	r2, [sp, #20]
   13c0c:	ldr	r3, [r5]
   13c10:	cmp	r0, r4
   13c14:	movlt	r0, r4
   13c18:	ldrge	r0, [sp, #8]
   13c1c:	subge	r0, r0, #5
   13c20:	clzge	r0, r0
   13c24:	lsrge	r0, r0, #5
   13c28:	cmp	r2, r3
   13c2c:	bne	13c38 <__assert_fail@plt+0x1fb0>
   13c30:	add	sp, sp, #28
   13c34:	pop	{r4, r5, pc}
   13c38:	bl	118e0 <__stack_chk_fail@plt>
   13c3c:	andeq	r7, r3, r8, lsl sp
   13c40:	push	{r4, r5, r6, r7, r8, lr}
   13c44:	sub	sp, sp, #24
   13c48:	ldr	r4, [pc, #176]	; 13d00 <__assert_fail@plt+0x2078>
   13c4c:	add	r3, sp, #8
   13c50:	mov	r6, #1000	; 0x3e8
   13c54:	ldr	lr, [r4]
   13c58:	strb	r1, [sp, #13]
   13c5c:	str	r3, [sp]
   13c60:	mov	ip, #256	; 0x100
   13c64:	mov	r8, r2
   13c68:	str	r6, [sp, #4]
   13c6c:	mov	r5, #1
   13c70:	mov	r3, #4
   13c74:	add	r2, sp, #12
   13c78:	mov	r1, #3
   13c7c:	str	lr, [sp, #20]
   13c80:	strb	r5, [sp, #12]
   13c84:	strh	ip, [sp, #14]
   13c88:	mov	r7, r0
   13c8c:	bl	11af0 <libusb_bulk_transfer@plt>
   13c90:	cmp	r0, #0
   13c94:	blt	13ca4 <__assert_fail@plt+0x201c>
   13c98:	ldr	r3, [sp, #8]
   13c9c:	cmp	r3, #4
   13ca0:	beq	13cc0 <__assert_fail@plt+0x2038>
   13ca4:	mov	r0, #0
   13ca8:	ldr	r2, [sp, #20]
   13cac:	ldr	r3, [r4]
   13cb0:	cmp	r2, r3
   13cb4:	bne	13cfc <__assert_fail@plt+0x2074>
   13cb8:	add	sp, sp, #24
   13cbc:	pop	{r4, r5, r6, r7, r8, pc}
   13cc0:	add	r3, sp, #8
   13cc4:	str	r3, [sp]
   13cc8:	str	r6, [sp, #4]
   13ccc:	mov	r3, r5
   13cd0:	mov	r2, r8
   13cd4:	mov	r0, r7
   13cd8:	mov	r1, #130	; 0x82
   13cdc:	bl	11af0 <libusb_bulk_transfer@plt>
   13ce0:	cmp	r0, #0
   13ce4:	blt	13ca4 <__assert_fail@plt+0x201c>
   13ce8:	ldr	r0, [sp, #8]
   13cec:	sub	r0, r0, #1
   13cf0:	clz	r0, r0
   13cf4:	lsr	r0, r0, #5
   13cf8:	b	13ca8 <__assert_fail@plt+0x2020>
   13cfc:	bl	118e0 <__stack_chk_fail@plt>
   13d00:	andeq	r7, r3, r8, lsl sp
   13d04:	push	{r4, r5, r6, r7, r8, lr}
   13d08:	sub	sp, sp, #24
   13d0c:	add	r3, sp, #23
   13d10:	mov	r6, #1000	; 0x3e8
   13d14:	mov	r5, #1
   13d18:	mov	r4, #0
   13d1c:	strb	r1, [sp, #23]
   13d20:	stmib	sp, {r3, r5, r6}
   13d24:	mov	r8, r2
   13d28:	str	r4, [sp]
   13d2c:	mov	r3, #131	; 0x83
   13d30:	mov	r2, #12
   13d34:	mov	r1, #64	; 0x40
   13d38:	mov	r7, r0
   13d3c:	bl	11c1c <libusb_control_transfer@plt>
   13d40:	cmp	r0, r4
   13d44:	movlt	r0, r4
   13d48:	blt	13d78 <__assert_fail@plt+0x20f0>
   13d4c:	str	r6, [sp, #12]
   13d50:	str	r5, [sp, #8]
   13d54:	stm	sp, {r4, r8}
   13d58:	mov	r0, r7
   13d5c:	mov	r3, #132	; 0x84
   13d60:	mov	r2, #12
   13d64:	mov	r1, #192	; 0xc0
   13d68:	bl	11c1c <libusb_control_transfer@plt>
   13d6c:	cmp	r0, r4
   13d70:	movlt	r0, #0
   13d74:	movge	r0, #1
   13d78:	add	sp, sp, #24
   13d7c:	pop	{r4, r5, r6, r7, r8, pc}
   13d80:	push	{r4, lr}
   13d84:	sub	sp, sp, #24
   13d88:	ldr	r4, [pc, #96]	; 13df0 <__assert_fail@plt+0x2168>
   13d8c:	mov	r2, #1000	; 0x3e8
   13d90:	mov	r3, #2
   13d94:	ldr	r1, [r4]
   13d98:	ldr	ip, [pc, #84]	; 13df4 <__assert_fail@plt+0x216c>
   13d9c:	str	r2, [sp, #12]
   13da0:	str	r3, [sp, #8]
   13da4:	add	r2, sp, #16
   13da8:	mov	r3, #0
   13dac:	str	r2, [sp, #4]
   13db0:	str	r3, [sp]
   13db4:	mov	r2, #4
   13db8:	mov	r3, #131	; 0x83
   13dbc:	str	r1, [sp, #20]
   13dc0:	mov	r1, #64	; 0x40
   13dc4:	strh	ip, [sp, #16]
   13dc8:	bl	11c1c <libusb_control_transfer@plt>
   13dcc:	ldr	r2, [sp, #20]
   13dd0:	ldr	r3, [r4]
   13dd4:	cmp	r2, r3
   13dd8:	bne	13dec <__assert_fail@plt+0x2164>
   13ddc:	mvn	r0, r0
   13de0:	lsr	r0, r0, #31
   13de4:	add	sp, sp, #24
   13de8:	pop	{r4, pc}
   13dec:	bl	118e0 <__stack_chk_fail@plt>
   13df0:	andeq	r7, r3, r8, lsl sp
   13df4:	andeq	r1, r0, r8, lsr r5
   13df8:	sub	sp, sp, #16
   13dfc:	cmp	r0, #2
   13e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e04:	sub	sp, sp, #108	; 0x6c
   13e08:	add	ip, sp, #148	; 0x94
   13e0c:	ldr	r6, [pc, #4004]	; 14db8 <__assert_fail@plt+0x3130>
   13e10:	stm	ip, {r1, r2, r3}
   13e14:	ldrb	r3, [sp, #154]	; 0x9a
   13e18:	ldr	r4, [pc, #3996]	; 14dbc <__assert_fail@plt+0x3134>
   13e1c:	ldr	lr, [r6]
   13e20:	str	r3, [sp, #20]
   13e24:	ldrh	r3, [sp, #160]	; 0xa0
   13e28:	str	r0, [r4]
   13e2c:	str	lr, [sp, #100]	; 0x64
   13e30:	ldr	r5, [sp, #168]	; 0xa8
   13e34:	ldrh	r9, [sp, #150]	; 0x96
   13e38:	ldrb	r8, [sp, #152]	; 0x98
   13e3c:	ldrb	fp, [sp, #153]	; 0x99
   13e40:	ldr	r7, [sp, #172]	; 0xac
   13e44:	str	r3, [sp, #24]
   13e48:	bgt	14154 <__assert_fail@plt+0x24cc>
   13e4c:	ldrb	r3, [sp, #165]	; 0xa5
   13e50:	cmp	r3, #1
   13e54:	bls	13e6c <__assert_fail@plt+0x21e4>
   13e58:	ldrb	r1, [r7, #5]
   13e5c:	mov	r0, r5
   13e60:	bl	11b5c <libusb_set_configuration@plt>
   13e64:	cmp	r0, #0
   13e68:	blt	1460c <__assert_fail@plt+0x2984>
   13e6c:	mov	r1, #0
   13e70:	mov	r0, r5
   13e74:	bl	11bec <libusb_claim_interface@plt>
   13e78:	cmp	r0, #0
   13e7c:	blt	14160 <__assert_fail@plt+0x24d8>
   13e80:	ldr	r2, [r4]
   13e84:	sub	r3, r8, #1
   13e88:	cmp	r2, #2
   13e8c:	uxtb	sl, r3
   13e90:	bgt	13f94 <__assert_fail@plt+0x230c>
   13e94:	cmp	sl, #253	; 0xfd
   13e98:	bls	141b8 <__assert_fail@plt+0x2530>
   13e9c:	ldr	r3, [r7, #12]
   13ea0:	ldr	r3, [r3]
   13ea4:	ldrb	r2, [r3, #5]
   13ea8:	cmp	r2, #255	; 0xff
   13eac:	bne	141b8 <__assert_fail@plt+0x2530>
   13eb0:	sub	r2, r9, #256	; 0x100
   13eb4:	cmp	r9, #272	; 0x110
   13eb8:	cmpne	r2, #1
   13ebc:	bhi	14650 <__assert_fail@plt+0x29c8>
   13ec0:	cmp	fp, #0
   13ec4:	bne	14630 <__assert_fail@plt+0x29a8>
   13ec8:	ldr	r2, [sp, #20]
   13ecc:	sub	r2, r2, #1
   13ed0:	uxtb	r2, r2
   13ed4:	cmp	r2, #253	; 0xfd
   13ed8:	bls	14670 <__assert_fail@plt+0x29e8>
   13edc:	ldrb	r2, [r3, #4]
   13ee0:	cmp	r2, #3
   13ee4:	bne	141ac <__assert_fail@plt+0x2524>
   13ee8:	ldr	r1, [r3, #12]
   13eec:	ldr	r3, [pc, #3788]	; 14dc0 <__assert_fail@plt+0x3138>
   13ef0:	ldrh	r2, [r1, #2]
   13ef4:	cmp	r2, r3
   13ef8:	bne	142f4 <__assert_fail@plt+0x266c>
   13efc:	ldr	r3, [r1, #4]
   13f00:	ldr	r2, [pc, #3772]	; 14dc4 <__assert_fail@plt+0x313c>
   13f04:	bic	r3, r3, #-16777216	; 0xff000000
   13f08:	cmp	r3, r2
   13f0c:	bne	142f4 <__assert_fail@plt+0x266c>
   13f10:	ldrh	r2, [r1, #22]
   13f14:	ldr	r3, [pc, #3756]	; 14dc8 <__assert_fail@plt+0x3140>
   13f18:	cmp	r2, r3
   13f1c:	bne	146a0 <__assert_fail@plt+0x2a18>
   13f20:	ldrh	r3, [r1, #24]
   13f24:	cmp	r3, #64	; 0x40
   13f28:	bne	146a0 <__assert_fail@plt+0x2a18>
   13f2c:	ldrh	r2, [r1, #42]	; 0x2a
   13f30:	ldr	r3, [pc, #3732]	; 14dcc <__assert_fail@plt+0x3144>
   13f34:	cmp	r2, r3
   13f38:	bne	147f8 <__assert_fail@plt+0x2b70>
   13f3c:	ldrh	r3, [r1, #44]	; 0x2c
   13f40:	cmp	r3, #64	; 0x40
   13f44:	bne	147f8 <__assert_fail@plt+0x2b70>
   13f48:	mov	r2, #0
   13f4c:	mov	r1, #7
   13f50:	mov	r0, r5
   13f54:	bl	13bc0 <__assert_fail@plt+0x1f38>
   13f58:	cmp	r0, #1
   13f5c:	beq	14a34 <__assert_fail@plt+0x2dac>
   13f60:	cmp	r0, #0
   13f64:	ldr	r1, [r4]
   13f68:	beq	14ab4 <__assert_fail@plt+0x2e2c>
   13f6c:	ldrb	r3, [sp, #35]	; 0x23
   13f70:	sub	r3, r3, #2
   13f74:	uxtb	r3, r3
   13f78:	cmp	r3, #2
   13f7c:	bhi	149d4 <__assert_fail@plt+0x2d4c>
   13f80:	ldr	r2, [pc, #3656]	; 14dd0 <__assert_fail@plt+0x3148>
   13f84:	ldr	sl, [r2, r3, lsl #2]
   13f88:	cmp	sl, #0
   13f8c:	bne	142c8 <__assert_fail@plt+0x2640>
   13f90:	b	13fcc <__assert_fail@plt+0x2344>
   13f94:	ldr	r0, [pc, #3640]	; 14dd4 <__assert_fail@plt+0x314c>
   13f98:	bl	119f4 <puts@plt>
   13f9c:	cmp	sl, #253	; 0xfd
   13fa0:	bhi	14194 <__assert_fail@plt+0x250c>
   13fa4:	ldr	r3, [r4]
   13fa8:	cmp	r3, #2
   13fac:	ble	141b8 <__assert_fail@plt+0x2530>
   13fb0:	ldr	r3, [r7, #12]
   13fb4:	mov	r2, r8
   13fb8:	ldr	r1, [pc, #3608]	; 14dd8 <__assert_fail@plt+0x3150>
   13fbc:	ldr	r3, [r3]
   13fc0:	mov	r0, #1
   13fc4:	ldrb	r3, [r3, #5]
   13fc8:	bl	11b2c <__printf_chk@plt>
   13fcc:	ldr	r3, [r4]
   13fd0:	cmp	r3, #2
   13fd4:	ble	141b8 <__assert_fail@plt+0x2530>
   13fd8:	ldr	r0, [pc, #3580]	; 14ddc <__assert_fail@plt+0x3154>
   13fdc:	bl	119f4 <puts@plt>
   13fe0:	cmp	r8, #255	; 0xff
   13fe4:	beq	141c0 <__assert_fail@plt+0x2538>
   13fe8:	ldr	r3, [r4]
   13fec:	cmp	r3, #2
   13ff0:	ble	14328 <__assert_fail@plt+0x26a0>
   13ff4:	mov	r2, r8
   13ff8:	ldr	r1, [pc, #3552]	; 14de0 <__assert_fail@plt+0x3158>
   13ffc:	mov	r0, #1
   14000:	bl	11b2c <__printf_chk@plt>
   14004:	ldr	r3, [r4]
   14008:	cmp	r3, #2
   1400c:	ble	14328 <__assert_fail@plt+0x26a0>
   14010:	ldr	r0, [pc, #3532]	; 14de4 <__assert_fail@plt+0x315c>
   14014:	bl	119f4 <puts@plt>
   14018:	cmp	r8, #0
   1401c:	beq	14330 <__assert_fail@plt+0x26a8>
   14020:	ldr	r3, [r4]
   14024:	cmp	r3, #2
   14028:	bgt	14754 <__assert_fail@plt+0x2acc>
   1402c:	cmp	r8, #0
   14030:	bne	14490 <__assert_fail@plt+0x2808>
   14034:	ldr	r3, [r7, #12]
   14038:	ldr	r3, [r3]
   1403c:	ldrb	r2, [r3, #5]
   14040:	cmp	r2, #16
   14044:	bne	14490 <__assert_fail@plt+0x2808>
   14048:	cmp	r9, #272	; 0x110
   1404c:	bne	14ac8 <__assert_fail@plt+0x2e40>
   14050:	cmp	fp, #0
   14054:	bne	14b68 <__assert_fail@plt+0x2ee0>
   14058:	ldr	r2, [sp, #20]
   1405c:	cmp	r2, #0
   14060:	bne	14c3c <__assert_fail@plt+0x2fb4>
   14064:	ldrb	r2, [r3, #4]
   14068:	cmp	r2, #3
   1406c:	bne	14b54 <__assert_fail@plt+0x2ecc>
   14070:	ldr	r1, [r3, #12]
   14074:	ldr	r3, [pc, #3436]	; 14de8 <__assert_fail@plt+0x3160>
   14078:	ldrh	r2, [r1, #2]
   1407c:	cmp	r2, r3
   14080:	bne	14b28 <__assert_fail@plt+0x2ea0>
   14084:	ldr	r3, [r1, #4]
   14088:	bic	r3, r3, #-16777216	; 0xff000000
   1408c:	cmp	r3, #64	; 0x40
   14090:	bne	14b28 <__assert_fail@plt+0x2ea0>
   14094:	ldrh	r2, [r1, #22]
   14098:	ldr	r3, [pc, #3404]	; 14dec <__assert_fail@plt+0x3164>
   1409c:	cmp	r2, r3
   140a0:	bne	14c50 <__assert_fail@plt+0x2fc8>
   140a4:	ldr	r3, [r1, #24]
   140a8:	bic	r3, r3, #-16777216	; 0xff000000
   140ac:	cmp	r3, #64	; 0x40
   140b0:	bne	14c50 <__assert_fail@plt+0x2fc8>
   140b4:	ldrh	r2, [r1, #42]	; 0x2a
   140b8:	ldr	r3, [pc, #3376]	; 14df0 <__assert_fail@plt+0x3168>
   140bc:	cmp	r2, r3
   140c0:	bne	14ca4 <__assert_fail@plt+0x301c>
   140c4:	ldr	r3, [r1, #44]	; 0x2c
   140c8:	ldr	r2, [pc, #3364]	; 14df4 <__assert_fail@plt+0x316c>
   140cc:	bic	r3, r3, #-16777216	; 0xff000000
   140d0:	cmp	r3, r2
   140d4:	bne	14ca4 <__assert_fail@plt+0x301c>
   140d8:	mov	r0, r5
   140dc:	bl	13d80 <__assert_fail@plt+0x20f8>
   140e0:	cmp	r0, #0
   140e4:	beq	14d30 <__assert_fail@plt+0x30a8>
   140e8:	add	r2, sp, #35	; 0x23
   140ec:	mov	r1, #78	; 0x4e
   140f0:	mov	r0, r5
   140f4:	bl	13d04 <__assert_fail@plt+0x207c>
   140f8:	cmp	r0, #0
   140fc:	beq	14d6c <__assert_fail@plt+0x30e4>
   14100:	ldrb	r3, [sp, #35]	; 0x23
   14104:	cmp	r3, #21
   14108:	ldreq	sl, [pc, #3304]	; 14df8 <__assert_fail@plt+0x3170>
   1410c:	beq	145fc <__assert_fail@plt+0x2974>
   14110:	ldr	r3, [r4]
   14114:	cmp	r3, #2
   14118:	ble	14140 <__assert_fail@plt+0x24b8>
   1411c:	ldr	r0, [pc, #3288]	; 14dfc <__assert_fail@plt+0x3174>
   14120:	bl	119f4 <puts@plt>
   14124:	ldr	r3, [r4]
   14128:	cmp	r3, #2
   1412c:	ble	14140 <__assert_fail@plt+0x24b8>
   14130:	ldr	r2, [pc, #3272]	; 14e00 <__assert_fail@plt+0x3178>
   14134:	ldr	r1, [pc, #3272]	; 14e04 <__assert_fail@plt+0x317c>
   14138:	mov	r0, #1
   1413c:	bl	11b2c <__printf_chk@plt>
   14140:	mov	sl, #0
   14144:	mov	r0, r5
   14148:	mov	r1, #0
   1414c:	bl	118d4 <libusb_release_interface@plt>
   14150:	b	14170 <__assert_fail@plt+0x24e8>
   14154:	ldr	r0, [pc, #3244]	; 14e08 <__assert_fail@plt+0x3180>
   14158:	bl	119f4 <puts@plt>
   1415c:	b	13e4c <__assert_fail@plt+0x21c4>
   14160:	ldr	r3, [r4]
   14164:	cmp	r3, #2
   14168:	bgt	142e8 <__assert_fail@plt+0x2660>
   1416c:	mov	sl, #0
   14170:	ldr	r2, [sp, #100]	; 0x64
   14174:	ldr	r3, [r6]
   14178:	mov	r0, sl
   1417c:	cmp	r2, r3
   14180:	bne	14ca0 <__assert_fail@plt+0x3018>
   14184:	add	sp, sp, #108	; 0x6c
   14188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1418c:	add	sp, sp, #16
   14190:	bx	lr
   14194:	ldr	r3, [r7, #12]
   14198:	ldr	r3, [r3]
   1419c:	ldrb	r2, [r3, #5]
   141a0:	cmp	r2, #255	; 0xff
   141a4:	bne	13fa4 <__assert_fail@plt+0x231c>
   141a8:	b	13eb0 <__assert_fail@plt+0x2228>
   141ac:	ldr	r3, [r4]
   141b0:	cmp	r3, #2
   141b4:	bgt	14690 <__assert_fail@plt+0x2a08>
   141b8:	cmp	r8, #255	; 0xff
   141bc:	bne	14328 <__assert_fail@plt+0x26a0>
   141c0:	cmp	r9, #272	; 0x110
   141c4:	bne	1482c <__assert_fail@plt+0x2ba4>
   141c8:	cmp	fp, #255	; 0xff
   141cc:	bne	146d4 <__assert_fail@plt+0x2a4c>
   141d0:	ldr	r3, [sp, #20]
   141d4:	cmp	r3, #255	; 0xff
   141d8:	bne	148a0 <__assert_fail@plt+0x2c18>
   141dc:	ldr	r3, [r7, #12]
   141e0:	ldr	r3, [r3]
   141e4:	ldrb	sl, [r3, #4]
   141e8:	cmp	sl, #1
   141ec:	bne	14934 <__assert_fail@plt+0x2cac>
   141f0:	ldr	r1, [r3, #12]
   141f4:	ldr	r3, [pc, #3052]	; 14de8 <__assert_fail@plt+0x3160>
   141f8:	ldrh	r2, [r1, #2]
   141fc:	cmp	r2, r3
   14200:	bne	1486c <__assert_fail@plt+0x2be4>
   14204:	ldr	r3, [r1, #4]
   14208:	bic	r3, r3, #-16777216	; 0xff000000
   1420c:	cmp	r3, #64	; 0x40
   14210:	str	r3, [sp, #28]
   14214:	bne	1486c <__assert_fail@plt+0x2be4>
   14218:	mov	r2, #62	; 0x3e
   1421c:	mov	r1, #0
   14220:	add	r0, sp, #38	; 0x26
   14224:	bl	11b08 <memset@plt>
   14228:	ldr	r1, [sp, #28]
   1422c:	add	r2, sp, #36	; 0x24
   14230:	ldr	ip, [pc, #3028]	; 14e0c <__assert_fail@plt+0x3184>
   14234:	mov	r3, #16192	; 0x3f40
   14238:	str	r2, [sp, #4]
   1423c:	mov	r2, #1000	; 0x3e8
   14240:	str	r2, [sp, #12]
   14244:	str	r3, [sp]
   14248:	str	r1, [sp, #8]
   1424c:	ldr	r3, [pc, #3004]	; 14e10 <__assert_fail@plt+0x3188>
   14250:	mov	r2, sl
   14254:	mov	r0, r5
   14258:	strh	ip, [sp, #36]	; 0x24
   1425c:	bl	11c1c <libusb_control_transfer@plt>
   14260:	cmp	r0, #0
   14264:	ble	14ae0 <__assert_fail@plt+0x2e58>
   14268:	mov	r2, #1000	; 0x3e8
   1426c:	str	r2, [sp, #12]
   14270:	ldr	r2, [sp, #28]
   14274:	mov	r3, #16128	; 0x3f00
   14278:	str	r2, [sp, #8]
   1427c:	add	r2, sp, #36	; 0x24
   14280:	str	r2, [sp, #4]
   14284:	str	r3, [sp]
   14288:	mov	r2, sl
   1428c:	ldr	r3, [pc, #2944]	; 14e14 <__assert_fail@plt+0x318c>
   14290:	mov	r1, #192	; 0xc0
   14294:	mov	r0, r5
   14298:	bl	11c1c <libusb_control_transfer@plt>
   1429c:	cmp	r0, #0
   142a0:	ble	14b80 <__assert_fail@plt+0x2ef8>
   142a4:	ldrb	r2, [sp, #36]	; 0x24
   142a8:	ldr	r1, [r4]
   142ac:	cmp	r2, #0
   142b0:	bne	14b0c <__assert_fail@plt+0x2e84>
   142b4:	ldrb	r3, [sp, #37]	; 0x25
   142b8:	cmp	r3, #46	; 0x2e
   142bc:	cmpne	r3, #0
   142c0:	ldreq	sl, [pc, #2896]	; 14e18 <__assert_fail@plt+0x3190>
   142c4:	bne	14b0c <__assert_fail@plt+0x2e84>
   142c8:	cmp	r1, #2
   142cc:	ble	14144 <__assert_fail@plt+0x24bc>
   142d0:	ldr	r3, [pc, #2856]	; 14e00 <__assert_fail@plt+0x3178>
   142d4:	mov	r2, sl
   142d8:	ldr	r1, [pc, #2876]	; 14e1c <__assert_fail@plt+0x3194>
   142dc:	mov	r0, #1
   142e0:	bl	11b2c <__printf_chk@plt>
   142e4:	b	14144 <__assert_fail@plt+0x24bc>
   142e8:	ldr	r0, [pc, #2864]	; 14e20 <__assert_fail@plt+0x3198>
   142ec:	bl	119f4 <puts@plt>
   142f0:	b	1416c <__assert_fail@plt+0x24e4>
   142f4:	ldr	r3, [r4]
   142f8:	cmp	r3, #2
   142fc:	ble	141b8 <__assert_fail@plt+0x2530>
   14300:	ldrb	r0, [r1, #6]
   14304:	ldrb	r3, [r1, #3]
   14308:	ldrb	r2, [r1, #2]
   1430c:	str	r0, [sp, #4]
   14310:	ldrh	r1, [r1, #4]
   14314:	mov	r0, #1
   14318:	str	r1, [sp]
   1431c:	ldr	r1, [pc, #2816]	; 14e24 <__assert_fail@plt+0x319c>
   14320:	bl	11b2c <__printf_chk@plt>
   14324:	b	13fcc <__assert_fail@plt+0x2344>
   14328:	cmp	r8, #0
   1432c:	bne	14490 <__assert_fail@plt+0x2808>
   14330:	ldr	r3, [r7, #12]
   14334:	ldr	r1, [r3]
   14338:	ldrb	r2, [r1, #5]
   1433c:	cmp	r2, #255	; 0xff
   14340:	bne	14020 <__assert_fail@plt+0x2398>
   14344:	cmp	r9, #272	; 0x110
   14348:	bne	1484c <__assert_fail@plt+0x2bc4>
   1434c:	cmp	fp, #0
   14350:	bne	14720 <__assert_fail@plt+0x2a98>
   14354:	ldr	r2, [sp, #20]
   14358:	cmp	r2, #0
   1435c:	bne	1499c <__assert_fail@plt+0x2d14>
   14360:	ldrb	r0, [r7, #4]
   14364:	cmp	r0, #1
   14368:	bne	14914 <__assert_fail@plt+0x2c8c>
   1436c:	ldrb	r2, [r1, #4]
   14370:	cmp	r2, #2
   14374:	bne	149bc <__assert_fail@plt+0x2d34>
   14378:	ldr	r1, [r1, #12]
   1437c:	ldr	r2, [pc, #2660]	; 14de8 <__assert_fail@plt+0x3160>
   14380:	ldrh	r0, [r1, #2]
   14384:	cmp	r0, r2
   14388:	bne	14954 <__assert_fail@plt+0x2ccc>
   1438c:	ldr	r2, [r1, #4]
   14390:	bic	r2, r2, #-16777216	; 0xff000000
   14394:	cmp	r2, #64	; 0x40
   14398:	bne	14954 <__assert_fail@plt+0x2ccc>
   1439c:	ldrh	r0, [r1, #22]
   143a0:	ldr	r2, [pc, #2628]	; 14dec <__assert_fail@plt+0x3164>
   143a4:	cmp	r0, r2
   143a8:	bne	149dc <__assert_fail@plt+0x2d54>
   143ac:	ldr	r2, [r1, #24]
   143b0:	bic	r2, r2, #-16777216	; 0xff000000
   143b4:	cmp	r2, #64	; 0x40
   143b8:	bne	149dc <__assert_fail@plt+0x2d54>
   143bc:	add	sl, sp, #36	; 0x24
   143c0:	mov	r2, #64	; 0x40
   143c4:	mov	r1, #0
   143c8:	mov	r0, sl
   143cc:	bl	11b08 <memset@plt>
   143d0:	mov	r3, sl
   143d4:	add	r0, sp, #100	; 0x64
   143d8:	mov	r1, #115	; 0x73
   143dc:	mov	r2, #1
   143e0:	strb	r1, [r3]
   143e4:	strb	r2, [r3, #1]
   143e8:	add	r3, r3, #8
   143ec:	cmp	r0, r3
   143f0:	bne	143e0 <__assert_fail@plt+0x2758>
   143f4:	mov	r2, #1000	; 0x3e8
   143f8:	mov	r3, #16192	; 0x3f40
   143fc:	str	r2, [sp, #12]
   14400:	mov	r2, #64	; 0x40
   14404:	str	r2, [sp, #8]
   14408:	mov	r1, r2
   1440c:	str	r3, [sp]
   14410:	str	sl, [sp, #4]
   14414:	ldr	r3, [pc, #2572]	; 14e28 <__assert_fail@plt+0x31a0>
   14418:	mov	r2, #4
   1441c:	mov	r0, r5
   14420:	bl	11c1c <libusb_control_transfer@plt>
   14424:	cmp	r0, #0
   14428:	ble	14bac <__assert_fail@plt+0x2f24>
   1442c:	mov	r0, #64	; 0x40
   14430:	mov	r1, #1000	; 0x3e8
   14434:	mov	r3, #16128	; 0x3f00
   14438:	strd	r0, [sp, #8]
   1443c:	str	r3, [sp]
   14440:	str	sl, [sp, #4]
   14444:	ldr	r3, [pc, #2528]	; 14e2c <__assert_fail@plt+0x31a4>
   14448:	mov	r2, #1
   1444c:	mov	r1, #192	; 0xc0
   14450:	mov	r0, r5
   14454:	bl	11c1c <libusb_control_transfer@plt>
   14458:	cmp	r0, #0
   1445c:	ble	14bd8 <__assert_fail@plt+0x2f50>
   14460:	ldrb	r2, [sp, #36]	; 0x24
   14464:	ldr	r1, [r4]
   14468:	cmp	r2, #0
   1446c:	ldreq	sl, [pc, #2492]	; 14e30 <__assert_fail@plt+0x31a8>
   14470:	beq	142c8 <__assert_fail@plt+0x2640>
   14474:	cmp	r1, #2
   14478:	ble	14034 <__assert_fail@plt+0x23ac>
   1447c:	ldrb	r3, [sp, #37]	; 0x25
   14480:	ldr	r1, [pc, #2476]	; 14e34 <__assert_fail@plt+0x31ac>
   14484:	mov	r0, #1
   14488:	bl	11b2c <__printf_chk@plt>
   1448c:	b	1473c <__assert_fail@plt+0x2ab4>
   14490:	ldr	r3, [r4]
   14494:	cmp	r3, #2
   14498:	bgt	14788 <__assert_fail@plt+0x2b00>
   1449c:	cmp	r8, #255	; 0xff
   144a0:	bne	14140 <__assert_fail@plt+0x24b8>
   144a4:	ldr	r3, [r7, #12]
   144a8:	ldr	r3, [r3]
   144ac:	ldrb	r2, [r3, #5]
   144b0:	cmp	r2, #255	; 0xff
   144b4:	bne	14140 <__assert_fail@plt+0x24b8>
   144b8:	cmp	fp, #255	; 0xff
   144bc:	bne	146f4 <__assert_fail@plt+0x2a6c>
   144c0:	ldr	r2, [sp, #20]
   144c4:	cmp	r2, #255	; 0xff
   144c8:	bne	148c0 <__assert_fail@plt+0x2c38>
   144cc:	ldrb	r2, [r3, #4]
   144d0:	cmp	r2, #3
   144d4:	bne	14988 <__assert_fail@plt+0x2d00>
   144d8:	ldr	r1, [r3, #12]
   144dc:	ldr	r3, [pc, #2308]	; 14de8 <__assert_fail@plt+0x3160>
   144e0:	ldrh	r2, [r1, #2]
   144e4:	cmp	r2, r3
   144e8:	bne	148d4 <__assert_fail@plt+0x2c4c>
   144ec:	ldrh	r3, [r1, #4]
   144f0:	cmp	r3, #64	; 0x40
   144f4:	cmpne	r3, #512	; 0x200
   144f8:	bne	148d4 <__assert_fail@plt+0x2c4c>
   144fc:	ldrb	r3, [r1, #6]
   14500:	cmp	r3, #0
   14504:	bne	148d4 <__assert_fail@plt+0x2c4c>
   14508:	ldrh	r2, [r1, #22]
   1450c:	ldr	r3, [pc, #2264]	; 14dec <__assert_fail@plt+0x3164>
   14510:	cmp	r2, r3
   14514:	bne	14a10 <__assert_fail@plt+0x2d88>
   14518:	ldrh	r3, [r1, #24]
   1451c:	cmp	r3, #64	; 0x40
   14520:	cmpne	r3, #512	; 0x200
   14524:	bne	14a10 <__assert_fail@plt+0x2d88>
   14528:	ldrb	r3, [r1, #26]
   1452c:	cmp	r3, #0
   14530:	bne	14a10 <__assert_fail@plt+0x2d88>
   14534:	ldrh	r2, [r1, #42]	; 0x2a
   14538:	ldr	r3, [pc, #2224]	; 14df0 <__assert_fail@plt+0x3168>
   1453c:	cmp	r2, r3
   14540:	bne	14a90 <__assert_fail@plt+0x2e08>
   14544:	ldrh	r3, [r1, #44]	; 0x2c
   14548:	cmp	r3, #1
   1454c:	bne	14a90 <__assert_fail@plt+0x2e08>
   14550:	ldrb	r3, [r1, #46]	; 0x2e
   14554:	sub	r3, r3, #8
   14558:	tst	r3, #247	; 0xf7
   1455c:	bne	14a90 <__assert_fail@plt+0x2e08>
   14560:	mov	r0, r5
   14564:	bl	13d80 <__assert_fail@plt+0x20f8>
   14568:	cmp	r0, #0
   1456c:	beq	14c7c <__assert_fail@plt+0x2ff4>
   14570:	add	r2, sp, #35	; 0x23
   14574:	mov	r1, #56	; 0x38
   14578:	mov	r0, r5
   1457c:	bl	13d04 <__assert_fail@plt+0x207c>
   14580:	cmp	r0, #0
   14584:	beq	14cf4 <__assert_fail@plt+0x306c>
   14588:	ldrb	r3, [sp, #35]	; 0x23
   1458c:	cmp	r3, #21
   14590:	bne	14cd0 <__assert_fail@plt+0x3048>
   14594:	ldr	r3, [pc, #2204]	; 14e38 <__assert_fail@plt+0x31b0>
   14598:	ldr	r1, [sp, #24]
   1459c:	cmp	r1, r3
   145a0:	beq	14d20 <__assert_fail@plt+0x3098>
   145a4:	sub	r3, r3, #1
   145a8:	cmp	r1, r3
   145ac:	beq	14d28 <__assert_fail@plt+0x30a0>
   145b0:	cmp	r1, #1792	; 0x700
   145b4:	bcs	14d18 <__assert_fail@plt+0x3090>
   145b8:	sub	r3, r3, #253	; 0xfd
   145bc:	cmp	r1, r3
   145c0:	bhi	14d54 <__assert_fail@plt+0x30cc>
   145c4:	sub	r3, r3, #2
   145c8:	cmp	r1, r3
   145cc:	bhi	14d5c <__assert_fail@plt+0x30d4>
   145d0:	cmp	r1, #1536	; 0x600
   145d4:	bcs	14d64 <__assert_fail@plt+0x30dc>
   145d8:	cmp	r1, #1280	; 0x500
   145dc:	bcs	14db0 <__assert_fail@plt+0x3128>
   145e0:	cmp	r1, #768	; 0x300
   145e4:	bcs	14da8 <__assert_fail@plt+0x3120>
   145e8:	ldr	r2, [pc, #2124]	; 14e3c <__assert_fail@plt+0x31b4>
   145ec:	ldr	r3, [pc, #2124]	; 14e40 <__assert_fail@plt+0x31b8>
   145f0:	cmp	r1, r2
   145f4:	ldr	sl, [pc, #2120]	; 14e44 <__assert_fail@plt+0x31bc>
   145f8:	movhi	sl, r3
   145fc:	ldr	r3, [r4]
   14600:	cmp	r3, #2
   14604:	ble	14144 <__assert_fail@plt+0x24bc>
   14608:	b	142d0 <__assert_fail@plt+0x2648>
   1460c:	ldr	r3, [r4]
   14610:	cmp	r3, #2
   14614:	ble	1416c <__assert_fail@plt+0x24e4>
   14618:	ldrb	r2, [r7, #5]
   1461c:	ldr	r1, [pc, #2084]	; 14e48 <__assert_fail@plt+0x31c0>
   14620:	mov	r0, #1
   14624:	bl	11b2c <__printf_chk@plt>
   14628:	mov	sl, #0
   1462c:	b	14170 <__assert_fail@plt+0x24e8>
   14630:	ldr	r3, [r4]
   14634:	cmp	r3, #2
   14638:	ble	141b8 <__assert_fail@plt+0x2530>
   1463c:	mov	r2, fp
   14640:	ldr	r1, [pc, #2052]	; 14e4c <__assert_fail@plt+0x31c4>
   14644:	mov	r0, #1
   14648:	bl	11b2c <__printf_chk@plt>
   1464c:	b	13fcc <__assert_fail@plt+0x2344>
   14650:	ldr	r3, [r4]
   14654:	cmp	r3, #2
   14658:	ble	141b8 <__assert_fail@plt+0x2530>
   1465c:	mov	r2, r9
   14660:	ldr	r1, [pc, #2024]	; 14e50 <__assert_fail@plt+0x31c8>
   14664:	mov	r0, #1
   14668:	bl	11b2c <__printf_chk@plt>
   1466c:	b	13fcc <__assert_fail@plt+0x2344>
   14670:	ldr	r3, [r4]
   14674:	cmp	r3, #2
   14678:	ble	141b8 <__assert_fail@plt+0x2530>
   1467c:	ldr	r2, [sp, #20]
   14680:	ldr	r1, [pc, #1996]	; 14e54 <__assert_fail@plt+0x31cc>
   14684:	mov	r0, #1
   14688:	bl	11b2c <__printf_chk@plt>
   1468c:	b	13fcc <__assert_fail@plt+0x2344>
   14690:	ldr	r1, [pc, #1984]	; 14e58 <__assert_fail@plt+0x31d0>
   14694:	mov	r0, #1
   14698:	bl	11b2c <__printf_chk@plt>
   1469c:	b	13fcc <__assert_fail@plt+0x2344>
   146a0:	ldr	r3, [r4]
   146a4:	cmp	r3, #2
   146a8:	ble	141b8 <__assert_fail@plt+0x2530>
   146ac:	ldrb	r0, [r1, #26]
   146b0:	ldrb	r3, [r1, #23]
   146b4:	ldrb	r2, [r1, #22]
   146b8:	str	r0, [sp, #4]
   146bc:	ldrh	r1, [r1, #24]
   146c0:	mov	r0, #1
   146c4:	str	r1, [sp]
   146c8:	ldr	r1, [pc, #1876]	; 14e24 <__assert_fail@plt+0x319c>
   146cc:	bl	11b2c <__printf_chk@plt>
   146d0:	b	13fcc <__assert_fail@plt+0x2344>
   146d4:	ldr	r3, [r4]
   146d8:	cmp	r3, #2
   146dc:	ble	14490 <__assert_fail@plt+0x2808>
   146e0:	mov	r2, fp
   146e4:	ldr	r1, [pc, #1904]	; 14e5c <__assert_fail@plt+0x31d4>
   146e8:	mov	r0, #1
   146ec:	bl	11b2c <__printf_chk@plt>
   146f0:	b	14004 <__assert_fail@plt+0x237c>
   146f4:	ldr	r3, [r4]
   146f8:	cmp	r3, #2
   146fc:	ble	14140 <__assert_fail@plt+0x24b8>
   14700:	ldr	r1, [pc, #1880]	; 14e60 <__assert_fail@plt+0x31d8>
   14704:	mov	r2, fp
   14708:	mov	r0, #1
   1470c:	bl	11b2c <__printf_chk@plt>
   14710:	ldr	r3, [r4]
   14714:	cmp	r3, #2
   14718:	bgt	14130 <__assert_fail@plt+0x24a8>
   1471c:	b	14140 <__assert_fail@plt+0x24b8>
   14720:	ldr	r2, [r4]
   14724:	cmp	r2, #2
   14728:	ble	14038 <__assert_fail@plt+0x23b0>
   1472c:	mov	r2, fp
   14730:	ldr	r1, [pc, #1836]	; 14e64 <__assert_fail@plt+0x31dc>
   14734:	mov	r0, #1
   14738:	bl	11b2c <__printf_chk@plt>
   1473c:	ldr	r3, [r4]
   14740:	cmp	r3, #2
   14744:	ble	14d90 <__assert_fail@plt+0x3108>
   14748:	ldr	r0, [pc, #1816]	; 14e68 <__assert_fail@plt+0x31e0>
   1474c:	bl	119f4 <puts@plt>
   14750:	b	1402c <__assert_fail@plt+0x23a4>
   14754:	ldr	r3, [r7, #12]
   14758:	mov	r2, r8
   1475c:	ldr	r1, [pc, #1800]	; 14e6c <__assert_fail@plt+0x31e4>
   14760:	ldr	r3, [r3]
   14764:	mov	r0, #1
   14768:	ldrb	r3, [r3, #5]
   1476c:	bl	11b2c <__printf_chk@plt>
   14770:	ldr	r3, [r4]
   14774:	cmp	r3, #2
   14778:	bgt	14748 <__assert_fail@plt+0x2ac0>
   1477c:	cmp	r8, #0
   14780:	bne	1449c <__assert_fail@plt+0x2814>
   14784:	b	14034 <__assert_fail@plt+0x23ac>
   14788:	ldr	r3, [r7, #12]
   1478c:	mov	r2, r8
   14790:	ldr	r1, [pc, #1752]	; 14e70 <__assert_fail@plt+0x31e8>
   14794:	ldr	r3, [r3]
   14798:	mov	r0, #1
   1479c:	ldrb	r3, [r3, #5]
   147a0:	bl	11b2c <__printf_chk@plt>
   147a4:	cmp	r8, #255	; 0xff
   147a8:	bne	147c0 <__assert_fail@plt+0x2b38>
   147ac:	ldr	r3, [r7, #12]
   147b0:	ldr	r3, [r3]
   147b4:	ldrb	r2, [r3, #5]
   147b8:	cmp	r2, #255	; 0xff
   147bc:	beq	144b8 <__assert_fail@plt+0x2830>
   147c0:	ldr	r3, [r4]
   147c4:	cmp	r3, #2
   147c8:	ble	14140 <__assert_fail@plt+0x24b8>
   147cc:	ldr	r3, [r7, #12]
   147d0:	mov	r2, r8
   147d4:	ldr	r1, [pc, #1688]	; 14e74 <__assert_fail@plt+0x31ec>
   147d8:	ldr	r3, [r3]
   147dc:	mov	r0, #1
   147e0:	ldrb	r3, [r3, #5]
   147e4:	bl	11b2c <__printf_chk@plt>
   147e8:	ldr	r3, [r4]
   147ec:	cmp	r3, #2
   147f0:	bgt	14130 <__assert_fail@plt+0x24a8>
   147f4:	b	14140 <__assert_fail@plt+0x24b8>
   147f8:	ldr	r3, [r4]
   147fc:	cmp	r3, #2
   14800:	ble	141b8 <__assert_fail@plt+0x2530>
   14804:	ldrb	r0, [r1, #46]	; 0x2e
   14808:	ldrb	r3, [r1, #43]	; 0x2b
   1480c:	ldrb	r2, [r1, #42]	; 0x2a
   14810:	str	r0, [sp, #4]
   14814:	ldrh	r1, [r1, #44]	; 0x2c
   14818:	mov	r0, #1
   1481c:	str	r1, [sp]
   14820:	ldr	r1, [pc, #1532]	; 14e24 <__assert_fail@plt+0x319c>
   14824:	bl	11b2c <__printf_chk@plt>
   14828:	b	13fcc <__assert_fail@plt+0x2344>
   1482c:	ldr	r3, [r4]
   14830:	cmp	r3, #2
   14834:	ble	14490 <__assert_fail@plt+0x2808>
   14838:	mov	r2, r9
   1483c:	ldr	r1, [pc, #1588]	; 14e78 <__assert_fail@plt+0x31f0>
   14840:	mov	r0, #1
   14844:	bl	11b2c <__printf_chk@plt>
   14848:	b	14004 <__assert_fail@plt+0x237c>
   1484c:	ldr	r2, [r4]
   14850:	cmp	r2, #2
   14854:	ble	14038 <__assert_fail@plt+0x23b0>
   14858:	mov	r2, r9
   1485c:	ldr	r1, [pc, #1560]	; 14e7c <__assert_fail@plt+0x31f4>
   14860:	mov	r0, #1
   14864:	bl	11b2c <__printf_chk@plt>
   14868:	b	1473c <__assert_fail@plt+0x2ab4>
   1486c:	ldr	r3, [r4]
   14870:	cmp	r3, #2
   14874:	ble	14490 <__assert_fail@plt+0x2808>
   14878:	ldrb	r0, [r1, #6]
   1487c:	ldrb	r3, [r1, #3]
   14880:	ldrb	r2, [r1, #2]
   14884:	str	r0, [sp, #4]
   14888:	ldrh	r1, [r1, #4]
   1488c:	mov	r0, #1
   14890:	str	r1, [sp]
   14894:	ldr	r1, [pc, #1508]	; 14e80 <__assert_fail@plt+0x31f8>
   14898:	bl	11b2c <__printf_chk@plt>
   1489c:	b	14004 <__assert_fail@plt+0x237c>
   148a0:	ldr	r3, [r4]
   148a4:	cmp	r3, #2
   148a8:	ble	14490 <__assert_fail@plt+0x2808>
   148ac:	ldr	r2, [sp, #20]
   148b0:	ldr	r1, [pc, #1484]	; 14e84 <__assert_fail@plt+0x31fc>
   148b4:	mov	r0, #1
   148b8:	bl	11b2c <__printf_chk@plt>
   148bc:	b	14004 <__assert_fail@plt+0x237c>
   148c0:	ldr	r3, [r4]
   148c4:	cmp	r3, #2
   148c8:	ldrgt	r1, [pc, #1464]	; 14e88 <__assert_fail@plt+0x3200>
   148cc:	ble	14140 <__assert_fail@plt+0x24b8>
   148d0:	b	14708 <__assert_fail@plt+0x2a80>
   148d4:	ldr	r3, [r4]
   148d8:	cmp	r3, #2
   148dc:	ble	14140 <__assert_fail@plt+0x24b8>
   148e0:	ldrb	r0, [r1, #6]
   148e4:	ldrb	r3, [r1, #3]
   148e8:	ldrb	r2, [r1, #2]
   148ec:	str	r0, [sp, #4]
   148f0:	ldrh	r1, [r1, #4]
   148f4:	str	r1, [sp]
   148f8:	ldr	r1, [pc, #1420]	; 14e8c <__assert_fail@plt+0x3204>
   148fc:	mov	r0, #1
   14900:	bl	11b2c <__printf_chk@plt>
   14904:	ldr	r3, [r4]
   14908:	cmp	r3, #2
   1490c:	bgt	14130 <__assert_fail@plt+0x24a8>
   14910:	b	14140 <__assert_fail@plt+0x24b8>
   14914:	ldr	r2, [r4]
   14918:	cmp	r2, #2
   1491c:	ble	14038 <__assert_fail@plt+0x23b0>
   14920:	mov	r2, r0
   14924:	ldr	r1, [pc, #1380]	; 14e90 <__assert_fail@plt+0x3208>
   14928:	mov	r0, #1
   1492c:	bl	11b2c <__printf_chk@plt>
   14930:	b	1473c <__assert_fail@plt+0x2ab4>
   14934:	ldr	r3, [r4]
   14938:	cmp	r3, #2
   1493c:	ble	14490 <__assert_fail@plt+0x2808>
   14940:	mov	r2, sl
   14944:	ldr	r1, [pc, #1352]	; 14e94 <__assert_fail@plt+0x320c>
   14948:	mov	r0, #1
   1494c:	bl	11b2c <__printf_chk@plt>
   14950:	b	14004 <__assert_fail@plt+0x237c>
   14954:	ldr	r2, [r4]
   14958:	cmp	r2, #2
   1495c:	ble	14038 <__assert_fail@plt+0x23b0>
   14960:	ldrb	r0, [r1, #6]
   14964:	ldrb	r3, [r1, #3]
   14968:	ldrb	r2, [r1, #2]
   1496c:	str	r0, [sp, #4]
   14970:	ldrh	r1, [r1, #4]
   14974:	mov	r0, #1
   14978:	str	r1, [sp]
   1497c:	ldr	r1, [pc, #1300]	; 14e98 <__assert_fail@plt+0x3210>
   14980:	bl	11b2c <__printf_chk@plt>
   14984:	b	1473c <__assert_fail@plt+0x2ab4>
   14988:	ldr	r3, [r4]
   1498c:	cmp	r3, #2
   14990:	ldrgt	r1, [pc, #1284]	; 14e9c <__assert_fail@plt+0x3214>
   14994:	ble	14140 <__assert_fail@plt+0x24b8>
   14998:	b	14708 <__assert_fail@plt+0x2a80>
   1499c:	ldr	r2, [r4]
   149a0:	cmp	r2, #2
   149a4:	ble	14038 <__assert_fail@plt+0x23b0>
   149a8:	ldr	r2, [sp, #20]
   149ac:	ldr	r1, [pc, #1260]	; 14ea0 <__assert_fail@plt+0x3218>
   149b0:	mov	r0, #1
   149b4:	bl	11b2c <__printf_chk@plt>
   149b8:	b	1473c <__assert_fail@plt+0x2ab4>
   149bc:	ldr	r1, [r4]
   149c0:	cmp	r1, #2
   149c4:	ble	14038 <__assert_fail@plt+0x23b0>
   149c8:	ldr	r1, [pc, #1236]	; 14ea4 <__assert_fail@plt+0x321c>
   149cc:	bl	11b2c <__printf_chk@plt>
   149d0:	b	1473c <__assert_fail@plt+0x2ab4>
   149d4:	ldr	sl, [pc, #1228]	; 14ea8 <__assert_fail@plt+0x3220>
   149d8:	b	142c8 <__assert_fail@plt+0x2640>
   149dc:	ldr	r2, [r4]
   149e0:	cmp	r2, #2
   149e4:	ble	14038 <__assert_fail@plt+0x23b0>
   149e8:	ldrb	r0, [r1, #26]
   149ec:	ldrb	r3, [r1, #23]
   149f0:	ldrb	r2, [r1, #22]
   149f4:	str	r0, [sp, #4]
   149f8:	ldrh	r1, [r1, #24]
   149fc:	mov	r0, #1
   14a00:	str	r1, [sp]
   14a04:	ldr	r1, [pc, #1164]	; 14e98 <__assert_fail@plt+0x3210>
   14a08:	bl	11b2c <__printf_chk@plt>
   14a0c:	b	1473c <__assert_fail@plt+0x2ab4>
   14a10:	ldr	r3, [r4]
   14a14:	cmp	r3, #2
   14a18:	ble	14140 <__assert_fail@plt+0x24b8>
   14a1c:	ldrb	r0, [r1, #26]
   14a20:	ldrb	r3, [r1, #23]
   14a24:	ldrb	r2, [r1, #22]
   14a28:	str	r0, [sp, #4]
   14a2c:	ldrh	r1, [r1, #24]
   14a30:	b	148f4 <__assert_fail@plt+0x2c6c>
   14a34:	mov	r2, #2
   14a38:	mov	r1, #8
   14a3c:	mov	r0, r5
   14a40:	bl	13bc0 <__assert_fail@plt+0x1f38>
   14a44:	cmp	r0, #1
   14a48:	bne	13f60 <__assert_fail@plt+0x22d8>
   14a4c:	add	r2, sp, #35	; 0x23
   14a50:	mov	r1, #7
   14a54:	mov	r0, r5
   14a58:	bl	13c40 <__assert_fail@plt+0x1fb8>
   14a5c:	cmp	r0, #1
   14a60:	bne	13f60 <__assert_fail@plt+0x22d8>
   14a64:	add	r2, sp, #35	; 0x23
   14a68:	mov	r1, #8
   14a6c:	mov	r0, r5
   14a70:	bl	13c40 <__assert_fail@plt+0x1fb8>
   14a74:	cmp	r0, #1
   14a78:	bne	13f60 <__assert_fail@plt+0x22d8>
   14a7c:	add	r2, sp, #35	; 0x23
   14a80:	mov	r1, #105	; 0x69
   14a84:	mov	r0, r5
   14a88:	bl	13c40 <__assert_fail@plt+0x1fb8>
   14a8c:	b	13f60 <__assert_fail@plt+0x22d8>
   14a90:	ldr	r3, [r4]
   14a94:	cmp	r3, #2
   14a98:	ble	14140 <__assert_fail@plt+0x24b8>
   14a9c:	ldrb	r0, [r1, #46]	; 0x2e
   14aa0:	ldrb	r3, [r1, #43]	; 0x2b
   14aa4:	ldrb	r2, [r1, #42]	; 0x2a
   14aa8:	str	r0, [sp, #4]
   14aac:	ldrh	r1, [r1, #44]	; 0x2c
   14ab0:	b	148f4 <__assert_fail@plt+0x2c6c>
   14ab4:	cmp	r1, #2
   14ab8:	ble	141b8 <__assert_fail@plt+0x2530>
   14abc:	ldr	r0, [pc, #1000]	; 14eac <__assert_fail@plt+0x3224>
   14ac0:	bl	119f4 <puts@plt>
   14ac4:	b	13fcc <__assert_fail@plt+0x2344>
   14ac8:	ldr	r3, [r4]
   14acc:	cmp	r3, #2
   14ad0:	ble	14140 <__assert_fail@plt+0x24b8>
   14ad4:	mov	r2, r9
   14ad8:	ldr	r1, [pc, #976]	; 14eb0 <__assert_fail@plt+0x3228>
   14adc:	b	14708 <__assert_fail@plt+0x2a80>
   14ae0:	ldr	r3, [r4]
   14ae4:	cmp	r3, #2
   14ae8:	ble	14490 <__assert_fail@plt+0x2808>
   14aec:	bl	11acc <__errno_location@plt>
   14af0:	ldr	r0, [r0]
   14af4:	bl	11a18 <strerror@plt>
   14af8:	ldr	r1, [pc, #948]	; 14eb4 <__assert_fail@plt+0x322c>
   14afc:	mov	r2, r0
   14b00:	mov	r0, sl
   14b04:	bl	11b2c <__printf_chk@plt>
   14b08:	b	14004 <__assert_fail@plt+0x237c>
   14b0c:	cmp	r1, #2
   14b10:	ble	14490 <__assert_fail@plt+0x2808>
   14b14:	ldrb	r3, [sp, #37]	; 0x25
   14b18:	ldr	r1, [pc, #788]	; 14e34 <__assert_fail@plt+0x31ac>
   14b1c:	mov	r0, #1
   14b20:	bl	11b2c <__printf_chk@plt>
   14b24:	b	14004 <__assert_fail@plt+0x237c>
   14b28:	ldr	r3, [r4]
   14b2c:	cmp	r3, #2
   14b30:	ble	14140 <__assert_fail@plt+0x24b8>
   14b34:	ldrb	r0, [r1, #6]
   14b38:	ldrb	r3, [r1, #3]
   14b3c:	ldrb	r2, [r1, #2]
   14b40:	str	r0, [sp, #4]
   14b44:	ldrh	r1, [r1, #4]
   14b48:	str	r1, [sp]
   14b4c:	ldr	r1, [pc, #868]	; 14eb8 <__assert_fail@plt+0x3230>
   14b50:	b	148fc <__assert_fail@plt+0x2c74>
   14b54:	ldr	r3, [r4]
   14b58:	cmp	r3, #2
   14b5c:	ldrgt	r1, [pc, #856]	; 14ebc <__assert_fail@plt+0x3234>
   14b60:	ble	14140 <__assert_fail@plt+0x24b8>
   14b64:	b	14708 <__assert_fail@plt+0x2a80>
   14b68:	ldr	r3, [r4]
   14b6c:	cmp	r3, #2
   14b70:	movgt	r2, fp
   14b74:	ldrgt	r1, [pc, #836]	; 14ec0 <__assert_fail@plt+0x3238>
   14b78:	ble	14140 <__assert_fail@plt+0x24b8>
   14b7c:	b	14708 <__assert_fail@plt+0x2a80>
   14b80:	ldr	r3, [r4]
   14b84:	cmp	r3, #2
   14b88:	ble	14490 <__assert_fail@plt+0x2808>
   14b8c:	bl	11acc <__errno_location@plt>
   14b90:	ldr	r0, [r0]
   14b94:	bl	11a18 <strerror@plt>
   14b98:	ldr	r1, [pc, #804]	; 14ec4 <__assert_fail@plt+0x323c>
   14b9c:	mov	r2, r0
   14ba0:	mov	r0, sl
   14ba4:	bl	11b2c <__printf_chk@plt>
   14ba8:	b	14004 <__assert_fail@plt+0x237c>
   14bac:	ldr	r3, [r4]
   14bb0:	cmp	r3, #2
   14bb4:	ble	14034 <__assert_fail@plt+0x23ac>
   14bb8:	bl	11acc <__errno_location@plt>
   14bbc:	ldr	r0, [r0]
   14bc0:	bl	11a18 <strerror@plt>
   14bc4:	ldr	r1, [pc, #744]	; 14eb4 <__assert_fail@plt+0x322c>
   14bc8:	mov	r2, r0
   14bcc:	mov	r0, #1
   14bd0:	bl	11b2c <__printf_chk@plt>
   14bd4:	b	1473c <__assert_fail@plt+0x2ab4>
   14bd8:	mov	r2, #1000	; 0x3e8
   14bdc:	mov	r3, #8
   14be0:	str	r2, [sp, #12]
   14be4:	mov	r2, #16128	; 0x3f00
   14be8:	str	r2, [sp]
   14bec:	str	r3, [sp, #8]
   14bf0:	str	sl, [sp, #4]
   14bf4:	ldr	r3, [pc, #560]	; 14e2c <__assert_fail@plt+0x31a4>
   14bf8:	mov	r2, #1
   14bfc:	mov	r1, #192	; 0xc0
   14c00:	mov	r0, r5
   14c04:	bl	11c1c <libusb_control_transfer@plt>
   14c08:	cmp	r0, #0
   14c0c:	bgt	14460 <__assert_fail@plt+0x27d8>
   14c10:	ldr	r3, [r4]
   14c14:	cmp	r3, #2
   14c18:	ble	14034 <__assert_fail@plt+0x23ac>
   14c1c:	bl	11acc <__errno_location@plt>
   14c20:	ldr	r0, [r0]
   14c24:	bl	11a18 <strerror@plt>
   14c28:	ldr	r1, [pc, #660]	; 14ec4 <__assert_fail@plt+0x323c>
   14c2c:	mov	r2, r0
   14c30:	mov	r0, #1
   14c34:	bl	11b2c <__printf_chk@plt>
   14c38:	b	1473c <__assert_fail@plt+0x2ab4>
   14c3c:	ldr	r3, [r4]
   14c40:	cmp	r3, #2
   14c44:	ldrgt	r1, [pc, #636]	; 14ec8 <__assert_fail@plt+0x3240>
   14c48:	ble	14140 <__assert_fail@plt+0x24b8>
   14c4c:	b	14708 <__assert_fail@plt+0x2a80>
   14c50:	ldr	r3, [r4]
   14c54:	cmp	r3, #2
   14c58:	ble	14140 <__assert_fail@plt+0x24b8>
   14c5c:	ldrb	r0, [r1, #26]
   14c60:	ldrb	r3, [r1, #23]
   14c64:	ldrb	r2, [r1, #22]
   14c68:	str	r0, [sp, #4]
   14c6c:	ldrh	r1, [r1, #24]
   14c70:	str	r1, [sp]
   14c74:	ldr	r1, [pc, #572]	; 14eb8 <__assert_fail@plt+0x3230>
   14c78:	b	148fc <__assert_fail@plt+0x2c74>
   14c7c:	ldr	r3, [r4]
   14c80:	cmp	r3, #2
   14c84:	ble	14140 <__assert_fail@plt+0x24b8>
   14c88:	ldr	r0, [pc, #572]	; 14ecc <__assert_fail@plt+0x3244>
   14c8c:	bl	119f4 <puts@plt>
   14c90:	ldr	r3, [r4]
   14c94:	cmp	r3, #2
   14c98:	bgt	14130 <__assert_fail@plt+0x24a8>
   14c9c:	b	14140 <__assert_fail@plt+0x24b8>
   14ca0:	bl	118e0 <__stack_chk_fail@plt>
   14ca4:	ldr	r3, [r4]
   14ca8:	cmp	r3, #2
   14cac:	ble	14140 <__assert_fail@plt+0x24b8>
   14cb0:	ldrb	r0, [r1, #46]	; 0x2e
   14cb4:	ldrb	r3, [r1, #43]	; 0x2b
   14cb8:	ldrb	r2, [r1, #42]	; 0x2a
   14cbc:	str	r0, [sp, #4]
   14cc0:	ldrh	r1, [r1, #44]	; 0x2c
   14cc4:	str	r1, [sp]
   14cc8:	ldr	r1, [pc, #488]	; 14eb8 <__assert_fail@plt+0x3230>
   14ccc:	b	148fc <__assert_fail@plt+0x2c74>
   14cd0:	ldr	r3, [r4]
   14cd4:	cmp	r3, #2
   14cd8:	ble	14140 <__assert_fail@plt+0x24b8>
   14cdc:	ldr	r0, [pc, #492]	; 14ed0 <__assert_fail@plt+0x3248>
   14ce0:	bl	119f4 <puts@plt>
   14ce4:	ldr	r3, [r4]
   14ce8:	cmp	r3, #2
   14cec:	bgt	14130 <__assert_fail@plt+0x24a8>
   14cf0:	b	14140 <__assert_fail@plt+0x24b8>
   14cf4:	ldr	r3, [r4]
   14cf8:	cmp	r3, #2
   14cfc:	ble	14140 <__assert_fail@plt+0x24b8>
   14d00:	ldr	r0, [pc, #460]	; 14ed4 <__assert_fail@plt+0x324c>
   14d04:	bl	119f4 <puts@plt>
   14d08:	ldr	r3, [r4]
   14d0c:	cmp	r3, #2
   14d10:	bgt	14130 <__assert_fail@plt+0x24a8>
   14d14:	b	14140 <__assert_fail@plt+0x24b8>
   14d18:	ldr	sl, [pc, #440]	; 14ed8 <__assert_fail@plt+0x3250>
   14d1c:	b	145fc <__assert_fail@plt+0x2974>
   14d20:	ldr	sl, [pc, #436]	; 14edc <__assert_fail@plt+0x3254>
   14d24:	b	145fc <__assert_fail@plt+0x2974>
   14d28:	ldr	sl, [pc, #432]	; 14ee0 <__assert_fail@plt+0x3258>
   14d2c:	b	145fc <__assert_fail@plt+0x2974>
   14d30:	ldr	r3, [r4]
   14d34:	cmp	r3, #2
   14d38:	ble	14140 <__assert_fail@plt+0x24b8>
   14d3c:	ldr	r0, [pc, #416]	; 14ee4 <__assert_fail@plt+0x325c>
   14d40:	bl	119f4 <puts@plt>
   14d44:	ldr	r3, [r4]
   14d48:	cmp	r3, #2
   14d4c:	bgt	14130 <__assert_fail@plt+0x24a8>
   14d50:	b	14140 <__assert_fail@plt+0x24b8>
   14d54:	ldr	sl, [pc, #396]	; 14ee8 <__assert_fail@plt+0x3260>
   14d58:	b	145fc <__assert_fail@plt+0x2974>
   14d5c:	ldr	sl, [pc, #392]	; 14eec <__assert_fail@plt+0x3264>
   14d60:	b	145fc <__assert_fail@plt+0x2974>
   14d64:	ldr	sl, [pc, #388]	; 14ef0 <__assert_fail@plt+0x3268>
   14d68:	b	145fc <__assert_fail@plt+0x2974>
   14d6c:	ldr	r3, [r4]
   14d70:	cmp	r3, #2
   14d74:	ble	14140 <__assert_fail@plt+0x24b8>
   14d78:	ldr	r0, [pc, #372]	; 14ef4 <__assert_fail@plt+0x326c>
   14d7c:	bl	119f4 <puts@plt>
   14d80:	ldr	r3, [r4]
   14d84:	cmp	r3, #2
   14d88:	bgt	14130 <__assert_fail@plt+0x24a8>
   14d8c:	b	14140 <__assert_fail@plt+0x24b8>
   14d90:	ldr	r3, [r7, #12]
   14d94:	ldr	r3, [r3]
   14d98:	ldrb	r2, [r3, #5]
   14d9c:	cmp	r2, #16
   14da0:	bne	14140 <__assert_fail@plt+0x24b8>
   14da4:	b	14048 <__assert_fail@plt+0x23c0>
   14da8:	ldr	sl, [pc, #328]	; 14ef8 <__assert_fail@plt+0x3270>
   14dac:	b	145fc <__assert_fail@plt+0x2974>
   14db0:	ldr	sl, [pc, #324]	; 14efc <__assert_fail@plt+0x3274>
   14db4:	b	145fc <__assert_fail@plt+0x2974>
   14db8:	andeq	r7, r3, r8, lsl sp
   14dbc:	andeq	r9, r3, r4, lsl #4
   14dc0:	andeq	r0, r0, r1, lsl #7
   14dc4:	andseq	r0, r0, r1
   14dc8:	andeq	r0, r0, r2, lsl #5
   14dcc:	andeq	r0, r0, r3, lsl #4
   14dd0:	andeq	r1, r2, ip, ror #13
   14dd4:	andeq	r1, r2, ip, ror #15
   14dd8:	andeq	r1, r2, r0, lsl r8
   14ddc:			; <UNDEFINED> instruction: 0x000219b0
   14de0:	ldrdeq	r1, [r2], -r0
   14de4:	ldrdeq	r1, [r2], -r0
   14de8:	andeq	r0, r0, r1, lsl #5
   14dec:	andeq	r0, r0, r2, lsl #4
   14df0:	andeq	r0, r0, r3, lsl #7
   14df4:	andeq	r0, r8, r1
   14df8:	strdeq	r1, [r2], -r8
   14dfc:	andeq	r1, r2, r0, ror #30
   14e00:	andeq	r0, r2, r0
   14e04:	andeq	r2, r2, ip, ror #3
   14e08:	andeq	r1, r2, ip, ror #14
   14e0c:	andeq	r0, r0, lr, lsr #2
   14e10:	andeq	r2, r0, r0, lsl r0
   14e14:	andeq	r2, r0, r1, lsl r0
   14e18:	andeq	r1, r2, r4, asr r7
   14e1c:			; <UNDEFINED> instruction: 0x000221b8
   14e20:	andeq	r1, r2, r4, asr #15
   14e24:	andeq	r1, r2, r8, lsl r9
   14e28:	andeq	r2, r0, r2, lsl r0
   14e2c:	andeq	r2, r0, r3, lsl r0
   14e30:	andeq	r1, r2, ip, asr r7
   14e34:	muleq	r2, r8, fp
   14e38:	andeq	r0, r0, r2, lsl #14
   14e3c:	andeq	r0, r0, r1, lsl #2
   14e40:	andeq	r1, r2, ip, asr #14
   14e44:	andeq	r1, r2, r0, lsr #14
   14e48:	muleq	r2, ip, r7
   14e4c:	andeq	r1, r2, r0, lsl #17
   14e50:	andeq	r1, r2, r4, asr r8
   14e54:			; <UNDEFINED> instruction: 0x000218b4
   14e58:	andeq	r1, r2, r8, ror #17
   14e5c:	andeq	r1, r2, ip, lsr #20
   14e60:	andeq	r2, r2, r8, lsl r0
   14e64:	andeq	r1, r2, r4, ror #24
   14e68:	andeq	r1, r2, r4, lsr #27
   14e6c:	strdeq	r1, [r2], -r0
   14e70:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   14e74:	ldrdeq	r1, [r2], -r4
   14e78:	andeq	r1, r2, r0, lsl #20
   14e7c:	andeq	r1, r2, r8, lsr ip
   14e80:	andeq	r1, r2, r4, asr #21
   14e84:	andeq	r1, r2, r0, ror #20
   14e88:	andeq	r2, r2, ip, asr #32
   14e8c:	strheq	r2, [r2], -r0
   14e90:	andeq	r1, r2, ip, asr #25
   14e94:	muleq	r2, r4, sl
   14e98:	andeq	r1, r2, r0, lsr sp
   14e9c:	andeq	r2, r2, r0, lsl #1
   14ea0:	muleq	r2, r8, ip
   14ea4:	andeq	r1, r2, r0, lsl #26
   14ea8:	andeq	r1, r2, r4, ror #14
   14eac:	andeq	r1, r2, ip, lsl #19
   14eb0:	andeq	r1, r2, r0, asr #27
   14eb4:	andeq	r1, r2, r8, lsr fp
   14eb8:	andeq	r1, r2, r4, lsl #29
   14ebc:	andeq	r1, r2, r4, asr lr
   14ec0:	andeq	r1, r2, ip, ror #27
   14ec4:	andeq	r1, r2, r8, ror #22
   14ec8:	andeq	r1, r2, r0, lsr #28
   14ecc:	andeq	r2, r2, r4, lsr #2
   14ed0:	andeq	r2, r2, ip, lsl #3
   14ed4:	andeq	r2, r2, r8, asr r1
   14ed8:	andeq	r1, r2, ip, lsr r7
   14edc:	andeq	r1, r2, ip, lsr #14
   14ee0:	andeq	r1, r2, r4, lsr r7
   14ee4:	strdeq	r1, [r2], -r8
   14ee8:	andeq	r1, r2, r4, asr #14
   14eec:	andeq	r1, r2, r8, lsl #14
   14ef0:	andeq	r1, r2, r0, lsl #14
   14ef4:	andeq	r1, r2, ip, lsr #30
   14ef8:	andeq	r1, r2, r8, lsl r7
   14efc:	andeq	r1, r2, r0, lsl r7
   14f00:	cmp	r0, #11
   14f04:	addls	pc, pc, r0, lsl #2
   14f08:	b	14fcc <__assert_fail@plt+0x3344>
   14f0c:	b	14f3c <__assert_fail@plt+0x32b4>
   14f10:	b	14f48 <__assert_fail@plt+0x32c0>
   14f14:	b	14f54 <__assert_fail@plt+0x32cc>
   14f18:	b	14f60 <__assert_fail@plt+0x32d8>
   14f1c:	b	14f6c <__assert_fail@plt+0x32e4>
   14f20:	b	14f78 <__assert_fail@plt+0x32f0>
   14f24:	b	14f84 <__assert_fail@plt+0x32fc>
   14f28:	b	14f90 <__assert_fail@plt+0x3308>
   14f2c:	b	14f9c <__assert_fail@plt+0x3314>
   14f30:	b	14fa8 <__assert_fail@plt+0x3320>
   14f34:	b	14fb4 <__assert_fail@plt+0x332c>
   14f38:	b	14fc0 <__assert_fail@plt+0x3338>
   14f3c:	ldr	r0, [pc, #192]	; 15004 <__assert_fail@plt+0x337c>
   14f40:	add	r0, pc, r0
   14f44:	bx	lr
   14f48:	ldr	r0, [pc, #184]	; 15008 <__assert_fail@plt+0x3380>
   14f4c:	add	r0, pc, r0
   14f50:	bx	lr
   14f54:	ldr	r0, [pc, #176]	; 1500c <__assert_fail@plt+0x3384>
   14f58:	add	r0, pc, r0
   14f5c:	bx	lr
   14f60:	ldr	r0, [pc, #168]	; 15010 <__assert_fail@plt+0x3388>
   14f64:	add	r0, pc, r0
   14f68:	bx	lr
   14f6c:	ldr	r0, [pc, #160]	; 15014 <__assert_fail@plt+0x338c>
   14f70:	add	r0, pc, r0
   14f74:	bx	lr
   14f78:	ldr	r0, [pc, #152]	; 15018 <__assert_fail@plt+0x3390>
   14f7c:	add	r0, pc, r0
   14f80:	bx	lr
   14f84:	ldr	r0, [pc, #144]	; 1501c <__assert_fail@plt+0x3394>
   14f88:	add	r0, pc, r0
   14f8c:	bx	lr
   14f90:	ldr	r0, [pc, #136]	; 15020 <__assert_fail@plt+0x3398>
   14f94:	add	r0, pc, r0
   14f98:	bx	lr
   14f9c:	ldr	r0, [pc, #128]	; 15024 <__assert_fail@plt+0x339c>
   14fa0:	add	r0, pc, r0
   14fa4:	bx	lr
   14fa8:	ldr	r0, [pc, #120]	; 15028 <__assert_fail@plt+0x33a0>
   14fac:	add	r0, pc, r0
   14fb0:	bx	lr
   14fb4:	ldr	r0, [pc, #112]	; 1502c <__assert_fail@plt+0x33a4>
   14fb8:	add	r0, pc, r0
   14fbc:	bx	lr
   14fc0:	ldr	r0, [pc, #104]	; 15030 <__assert_fail@plt+0x33a8>
   14fc4:	add	r0, pc, r0
   14fc8:	bx	lr
   14fcc:	push	{r4, lr}
   14fd0:	sub	sp, sp, #8
   14fd4:	ldr	r4, [pc, #88]	; 15034 <__assert_fail@plt+0x33ac>
   14fd8:	ldr	r3, [pc, #88]	; 15038 <__assert_fail@plt+0x33b0>
   14fdc:	add	r4, pc, r4
   14fe0:	str	r0, [sp]
   14fe4:	add	r3, pc, r3
   14fe8:	mov	r0, r4
   14fec:	mov	r2, #80	; 0x50
   14ff0:	mov	r1, #1
   14ff4:	bl	11ae4 <__sprintf_chk@plt>
   14ff8:	mov	r0, r4
   14ffc:	add	sp, sp, #8
   15000:	pop	{r4, pc}
   15004:	andeq	sp, r0, r4, lsl #6
   15008:	andeq	sp, r0, ip, ror #7
   1500c:	strdeq	sp, [r0], -r4
   15010:	andeq	sp, r0, r0, lsl #6
   15014:	andeq	sp, r0, r0, lsl #6
   15018:	andeq	sp, r0, r8, lsl #6
   1501c:	andeq	sp, r0, r0, lsl r3
   15020:	andeq	sp, r0, ip, lsl r3
   15024:	andeq	sp, r0, r4, lsr r3
   15028:	andeq	sp, r0, r0, asr #6
   1502c:	andeq	sp, r0, ip, asr #6
   15030:	andeq	sp, r0, r0, asr r3
   15034:	andeq	r4, r2, r4, lsr #4
   15038:	andeq	sp, r0, ip, ror #6
   1503c:	push	{r1, r2, r3}
   15040:	ldr	r3, [pc, #100]	; 150ac <__assert_fail@plt+0x3424>
   15044:	ldr	r1, [pc, #100]	; 150b0 <__assert_fail@plt+0x3428>
   15048:	add	r3, pc, r3
   1504c:	push	{r4, lr}
   15050:	sub	sp, sp, #20
   15054:	ldr	r4, [r3, r1]
   15058:	ldr	r2, [pc, #84]	; 150b4 <__assert_fail@plt+0x342c>
   1505c:	add	ip, sp, #32
   15060:	ldr	r1, [r4]
   15064:	str	ip, [sp, #8]
   15068:	str	r1, [sp, #12]
   1506c:	ldr	r2, [r3, r2]
   15070:	str	ip, [sp]
   15074:	ldr	r3, [sp, #28]
   15078:	ldr	r1, [r2]
   1507c:	ldr	r2, [pc, #52]	; 150b8 <__assert_fail@plt+0x3430>
   15080:	add	r2, pc, r2
   15084:	bl	1f39c <__assert_fail@plt+0xd714>
   15088:	ldr	r2, [sp, #12]
   1508c:	ldr	r3, [r4]
   15090:	cmp	r2, r3
   15094:	bne	150a8 <__assert_fail@plt+0x3420>
   15098:	add	sp, sp, #20
   1509c:	pop	{r4, lr}
   150a0:	add	sp, sp, #12
   150a4:	bx	lr
   150a8:	bl	118e0 <__stack_chk_fail@plt>
   150ac:	ldrdeq	r2, [r2], -ip
   150b0:			; <UNDEFINED> instruction: 0x000001b0
   150b4:	andeq	r0, r0, ip, asr #3
   150b8:	andeq	sp, r0, ip, asr #6
   150bc:	push	{r4, r5, r6, r7, r8, lr}
   150c0:	sub	sp, sp, #48	; 0x30
   150c4:	ldr	r4, [pc, #388]	; 15250 <__assert_fail@plt+0x35c8>
   150c8:	ldr	r3, [pc, #388]	; 15254 <__assert_fail@plt+0x35cc>
   150cc:	add	r4, pc, r4
   150d0:	mov	r2, #131072	; 0x20000
   150d4:	ldr	r5, [r4, r3]
   150d8:	mov	r1, #2
   150dc:	str	r2, [sp, #4]
   150e0:	ldr	r3, [r5]
   150e4:	mov	r8, r0
   150e8:	str	r3, [sp, #44]	; 0x2c
   150ec:	bl	11a60 <open@plt>
   150f0:	subs	r6, r0, #0
   150f4:	movle	r0, #0
   150f8:	ble	151a0 <__assert_fail@plt+0x3518>
   150fc:	ldr	r0, [pc, #340]	; 15258 <__assert_fail@plt+0x35d0>
   15100:	add	r0, pc, r0
   15104:	bl	119e8 <getenv@plt>
   15108:	subs	r7, r0, #0
   1510c:	beq	15138 <__assert_fail@plt+0x34b0>
   15110:	mov	r2, #10
   15114:	add	r1, sp, #8
   15118:	bl	117fc <strtol@plt>
   1511c:	ldr	r2, [sp, #8]
   15120:	subs	r3, r2, r7
   15124:	movne	r3, #1
   15128:	cmp	r0, #32768	; 0x8000
   1512c:	movlt	r3, #0
   15130:	cmp	r3, #0
   15134:	strne	r0, [sp, #4]
   15138:	add	r7, sp, #4
   1513c:	mov	r2, r7
   15140:	ldr	r1, [pc, #276]	; 1525c <__assert_fail@plt+0x35d4>
   15144:	mov	r0, r6
   15148:	bl	11970 <ioctl@plt>
   1514c:	mov	r2, r7
   15150:	ldr	r1, [pc, #264]	; 15260 <__assert_fail@plt+0x35d8>
   15154:	mov	r0, r6
   15158:	bl	11970 <ioctl@plt>
   1515c:	cmp	r0, #0
   15160:	bne	151b8 <__assert_fail@plt+0x3530>
   15164:	ldr	r3, [pc, #248]	; 15264 <__assert_fail@plt+0x35dc>
   15168:	ldr	r2, [sp, #4]
   1516c:	mov	r0, r6
   15170:	ldr	r4, [r4, r3]
   15174:	ldr	r3, [r4]
   15178:	cmp	r2, r3
   1517c:	strlt	r2, [r4]
   15180:	bl	11c58 <close@plt>
   15184:	ldr	r1, [pc, #220]	; 15268 <__assert_fail@plt+0x35e0>
   15188:	mov	r0, #4
   1518c:	ldr	r3, [r4]
   15190:	mov	r2, r8
   15194:	add	r1, pc, r1
   15198:	bl	1503c <__assert_fail@plt+0x33b4>
   1519c:	mov	r0, #0
   151a0:	ldr	r2, [sp, #44]	; 0x2c
   151a4:	ldr	r3, [r5]
   151a8:	cmp	r2, r3
   151ac:	bne	1524c <__assert_fail@plt+0x35c4>
   151b0:	add	sp, sp, #48	; 0x30
   151b4:	pop	{r4, r5, r6, r7, r8, pc}
   151b8:	mov	r0, r6
   151bc:	bl	11c58 <close@plt>
   151c0:	ldr	r0, [pc, #164]	; 1526c <__assert_fail@plt+0x35e4>
   151c4:	mov	r1, #0
   151c8:	add	r0, pc, r0
   151cc:	bl	11a60 <open@plt>
   151d0:	subs	r6, r0, #0
   151d4:	bgt	151f8 <__assert_fail@plt+0x3570>
   151d8:	ldr	r2, [pc, #132]	; 15264 <__assert_fail@plt+0x35dc>
   151dc:	ldr	r3, [sp, #4]
   151e0:	mov	r0, #9
   151e4:	ldr	r2, [r4, r2]
   151e8:	cmp	r3, #32768	; 0x8000
   151ec:	movge	r3, #32768	; 0x8000
   151f0:	str	r3, [r2]
   151f4:	b	151a0 <__assert_fail@plt+0x3518>
   151f8:	add	r7, sp, #12
   151fc:	mov	r1, r7
   15200:	mov	r2, #31
   15204:	bl	1182c <read@plt>
   15208:	cmp	r0, #0
   1520c:	beq	151d8 <__assert_fail@plt+0x3550>
   15210:	add	r3, sp, #48	; 0x30
   15214:	add	r3, r3, r0
   15218:	mov	r2, #0
   1521c:	mov	r1, r2
   15220:	strb	r2, [r3, #-36]	; 0xffffffdc
   15224:	mov	r0, r7
   15228:	mov	r2, #10
   1522c:	bl	117fc <strtol@plt>
   15230:	ldr	r3, [pc, #44]	; 15264 <__assert_fail@plt+0x35dc>
   15234:	ldr	r3, [r4, r3]
   15238:	str	r0, [r3]
   1523c:	mov	r0, r6
   15240:	bl	11c58 <close@plt>
   15244:	mov	r0, #9
   15248:	b	151a0 <__assert_fail@plt+0x3518>
   1524c:	bl	118e0 <__stack_chk_fail@plt>
   15250:	andeq	r2, r2, r8, asr sp
   15254:			; <UNDEFINED> instruction: 0x000001b0
   15258:	ldrdeq	sp, [r0], -r8
   1525c:	andeq	r2, r0, r5, ror r2
   15260:	andeq	r2, r0, r2, ror r2
   15264:			; <UNDEFINED> instruction: 0x000001b8
   15268:	andeq	sp, r0, r8, asr r2
   1526c:	andeq	sp, r0, r4, asr #4
   15270:	ldr	ip, [pc, #300]	; 153a4 <__assert_fail@plt+0x371c>
   15274:	push	{r4, r5, r6, r7, r8, lr}
   15278:	add	ip, pc, ip
   1527c:	ldr	lr, [pc, #292]	; 153a8 <__assert_fail@plt+0x3720>
   15280:	sub	sp, sp, #72	; 0x48
   15284:	mov	r5, r1
   15288:	ldr	r4, [ip, lr]
   1528c:	mov	r6, r2
   15290:	ldr	r1, [pc, #276]	; 153ac <__assert_fail@plt+0x3724>
   15294:	ldr	lr, [r4]
   15298:	add	r2, sp, #36	; 0x24
   1529c:	mov	r7, r3
   152a0:	str	lr, [sp, #68]	; 0x44
   152a4:	mov	r8, r0
   152a8:	bl	11970 <ioctl@plt>
   152ac:	cmp	r0, #0
   152b0:	blt	1534c <__assert_fail@plt+0x36c4>
   152b4:	ldr	r1, [sp, #48]	; 0x30
   152b8:	ldr	r2, [sp, #44]	; 0x2c
   152bc:	ldr	r3, [sp, #40]	; 0x28
   152c0:	ldr	r0, [sp, #96]	; 0x60
   152c4:	str	r1, [sp, #20]
   152c8:	ldr	r1, [pc, #224]	; 153b0 <__assert_fail@plt+0x3728>
   152cc:	str	r0, [sp, #16]
   152d0:	str	r2, [sp, #12]
   152d4:	str	r3, [sp, #4]
   152d8:	str	r7, [sp, #8]
   152dc:	ldr	r3, [sp, #36]	; 0x24
   152e0:	str	r6, [sp]
   152e4:	mov	r2, r5
   152e8:	add	r1, pc, r1
   152ec:	mov	r0, #2
   152f0:	bl	1503c <__assert_fail@plt+0x33b4>
   152f4:	ldr	r3, [sp, #36]	; 0x24
   152f8:	cmp	r3, r5
   152fc:	beq	1531c <__assert_fail@plt+0x3694>
   15300:	mov	r0, #0
   15304:	ldr	r2, [sp, #68]	; 0x44
   15308:	ldr	r3, [r4]
   1530c:	cmp	r2, r3
   15310:	bne	153a0 <__assert_fail@plt+0x3718>
   15314:	add	sp, sp, #72	; 0x48
   15318:	pop	{r4, r5, r6, r7, r8, pc}
   1531c:	ldr	r3, [sp, #40]	; 0x28
   15320:	cmp	r3, r6
   15324:	bne	15300 <__assert_fail@plt+0x3678>
   15328:	ldr	r3, [sp, #44]	; 0x2c
   1532c:	cmp	r3, r7
   15330:	bne	15300 <__assert_fail@plt+0x3678>
   15334:	ldr	r0, [sp, #48]	; 0x30
   15338:	ldr	r3, [sp, #96]	; 0x60
   1533c:	sub	r0, r0, r3
   15340:	clz	r0, r0
   15344:	lsr	r0, r0, #5
   15348:	b	15304 <__assert_fail@plt+0x367c>
   1534c:	mov	r0, r8
   15350:	add	r2, sp, #28
   15354:	ldr	r1, [pc, #88]	; 153b4 <__assert_fail@plt+0x372c>
   15358:	bl	11970 <ioctl@plt>
   1535c:	cmp	r0, #0
   15360:	blt	15300 <__assert_fail@plt+0x3678>
   15364:	ldr	r3, [sp, #28]
   15368:	uxtb	r2, r3
   1536c:	cmp	r2, r7
   15370:	bne	15300 <__assert_fail@plt+0x3678>
   15374:	asr	r2, r3, #8
   15378:	ldr	r1, [sp, #96]	; 0x60
   1537c:	uxtb	r2, r2
   15380:	cmp	r2, r1
   15384:	bne	15300 <__assert_fail@plt+0x3678>
   15388:	asr	r3, r3, #16
   1538c:	uxtb	r3, r3
   15390:	cmp	r3, r6
   15394:	moveq	r0, #1
   15398:	bne	15300 <__assert_fail@plt+0x3678>
   1539c:	b	15304 <__assert_fail@plt+0x367c>
   153a0:	bl	118e0 <__stack_chk_fail@plt>
   153a4:	andeq	r2, r2, ip, lsr #23
   153a8:			; <UNDEFINED> instruction: 0x000001b0
   153ac:	andeq	r2, r0, r6, ror r2
   153b0:	andeq	sp, r0, r4, asr #2
   153b4:	andeq	r5, r0, r2, lsl #7
   153b8:	ldr	r2, [pc, #1068]	; 157ec <__assert_fail@plt+0x3b64>
   153bc:	ldr	r3, [pc, #1068]	; 157f0 <__assert_fail@plt+0x3b68>
   153c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c4:	add	r2, pc, r2
   153c8:	sub	sp, sp, #180	; 0xb4
   153cc:	cmp	r0, #0
   153d0:	str	r2, [sp, #16]
   153d4:	str	r0, [sp, #32]
   153d8:	ldr	r3, [r2, r3]
   153dc:	str	r3, [sp, #36]	; 0x24
   153e0:	ldr	r3, [r3]
   153e4:	str	r3, [sp, #172]	; 0xac
   153e8:	beq	15660 <__assert_fail@plt+0x39d8>
   153ec:	ldr	r1, [pc, #1024]	; 157f4 <__assert_fail@plt+0x3b6c>
   153f0:	ldr	r3, [r0, #4]
   153f4:	add	r1, pc, r1
   153f8:	mov	r2, r0
   153fc:	rsb	r3, r3, r3, lsl #3
   15400:	ldr	r0, [r1]
   15404:	ldr	r1, [pc, #1004]	; 157f8 <__assert_fail@plt+0x3b70>
   15408:	add	r3, r0, r3, lsl #2
   1540c:	add	r1, pc, r1
   15410:	ldr	r6, [r3, #24]
   15414:	mov	r0, #4
   15418:	bl	1503c <__assert_fail@plt+0x33b4>
   1541c:	ldr	r4, [r6, #12]
   15420:	cmp	r4, #0
   15424:	bne	15438 <__assert_fail@plt+0x37b0>
   15428:	b	15660 <__assert_fail@plt+0x39d8>
   1542c:	ldr	r4, [r4]
   15430:	cmp	r4, #0
   15434:	beq	15660 <__assert_fail@plt+0x39d8>
   15438:	ldrb	r3, [r4, #8]
   1543c:	tst	r3, #1
   15440:	bne	1542c <__assert_fail@plt+0x37a4>
   15444:	ldrd	r2, [r6]
   15448:	cmp	r2, r3
   1544c:	bge	15660 <__assert_fail@plt+0x39d8>
   15450:	bl	11acc <__errno_location@plt>
   15454:	ldr	sl, [pc, #928]	; 157fc <__assert_fail@plt+0x3b74>
   15458:	ldr	r3, [pc, #928]	; 15800 <__assert_fail@plt+0x3b78>
   1545c:	add	sl, pc, sl
   15460:	add	r3, pc, r3
   15464:	add	r2, sl, #8
   15468:	add	r3, r3, #8
   1546c:	ldr	r8, [pc, #912]	; 15804 <__assert_fail@plt+0x3b7c>
   15470:	str	r2, [sp, #24]
   15474:	str	r3, [sp, #20]
   15478:	add	r9, sp, #44	; 0x2c
   1547c:	mov	r5, r0
   15480:	b	15558 <__assert_fail@plt+0x38d0>
   15484:	cmp	r2, r3
   15488:	bne	156ac <__assert_fail@plt+0x3a24>
   1548c:	ldr	r1, [pc, #884]	; 15808 <__assert_fail@plt+0x3b80>
   15490:	mov	r2, r9
   15494:	add	r1, pc, r1
   15498:	add	r1, r1, #8
   1549c:	mov	r0, #0
   154a0:	bl	11844 <sigprocmask@plt>
   154a4:	ldrb	r3, [r4, #8]
   154a8:	ldr	r2, [r4, #24]
   154ac:	ldr	r1, [sp, #8]
   154b0:	orr	r3, r3, #1
   154b4:	strb	r3, [r4, #8]
   154b8:	ldr	r0, [r4, #4]
   154bc:	bl	11b44 <write@plt>
   154c0:	ldr	r2, [r4, #24]
   154c4:	cmp	r2, r0
   154c8:	mov	fp, r0
   154cc:	beq	154e4 <__assert_fail@plt+0x385c>
   154d0:	ldr	r2, [r5]
   154d4:	cmp	r2, #11
   154d8:	beq	156d8 <__assert_fail@plt+0x3a50>
   154dc:	cmp	r2, #12
   154e0:	beq	156cc <__assert_fail@plt+0x3a44>
   154e4:	mov	r2, #0
   154e8:	mov	r1, r9
   154ec:	mov	r0, #2
   154f0:	bl	11844 <sigprocmask@plt>
   154f4:	mov	r3, #0
   154f8:	str	r3, [sp, #12]
   154fc:	ldr	r2, [r6, #12]
   15500:	cmp	r2, r4
   15504:	beq	15610 <__assert_fail@plt+0x3988>
   15508:	ldr	r2, [pc, #764]	; 1580c <__assert_fail@plt+0x3b84>
   1550c:	add	r2, pc, r2
   15510:	ldr	r2, [r2, #4]
   15514:	cmp	r2, r8
   15518:	bgt	15704 <__assert_fail@plt+0x3a7c>
   1551c:	ldr	r2, [r4, #24]
   15520:	cmp	r2, fp
   15524:	bne	15638 <__assert_fail@plt+0x39b0>
   15528:	ldr	r2, [sp, #32]
   1552c:	mov	r3, #9
   15530:	str	r3, [r2, #12]
   15534:	ldr	r4, [r4]
   15538:	ldr	r3, [r6]
   1553c:	cmp	r4, #0
   15540:	add	r3, r3, #1
   15544:	str	r3, [r6]
   15548:	beq	15660 <__assert_fail@plt+0x39d8>
   1554c:	ldr	r2, [r6, #4]
   15550:	cmp	r3, r2
   15554:	bge	15660 <__assert_fail@plt+0x39d8>
   15558:	ldr	r7, [pc, #688]	; 15810 <__assert_fail@plt+0x3b88>
   1555c:	mov	r3, #20
   15560:	add	r7, pc, r7
   15564:	str	r3, [sp, #28]
   15568:	add	r3, r4, #24
   1556c:	str	r3, [sp, #8]
   15570:	mov	r3, #0
   15574:	str	r3, [r5]
   15578:	ldr	r1, [sl, #4]
   1557c:	ldr	r2, [r7]
   15580:	cmp	r1, r8
   15584:	ble	15484 <__assert_fail@plt+0x37fc>
   15588:	cmp	r2, #0
   1558c:	bne	156bc <__assert_fail@plt+0x3a34>
   15590:	mov	r2, r9
   15594:	ldr	r1, [sp, #20]
   15598:	mov	r0, #0
   1559c:	bl	11844 <sigprocmask@plt>
   155a0:	ldrb	r3, [r4, #8]
   155a4:	ldr	r2, [sp, #8]
   155a8:	ldr	r1, [pc, #612]	; 15814 <__assert_fail@plt+0x3b8c>
   155ac:	orr	r3, r3, #1
   155b0:	strb	r3, [r4, #8]
   155b4:	ldr	r0, [r4, #4]
   155b8:	bl	11970 <ioctl@plt>
   155bc:	subs	r3, r0, #0
   155c0:	str	r3, [sp, #12]
   155c4:	blt	1567c <__assert_fail@plt+0x39f4>
   155c8:	mov	r2, #0
   155cc:	mov	r1, r9
   155d0:	mov	r0, #2
   155d4:	bl	11844 <sigprocmask@plt>
   155d8:	ldr	r3, [pc, #568]	; 15818 <__assert_fail@plt+0x3b90>
   155dc:	ldr	r2, [sp, #16]
   155e0:	ldr	r3, [r2, r3]
   155e4:	ldr	r3, [r3]
   155e8:	cmp	r3, #254	; 0xfe
   155ec:	movle	fp, #0
   155f0:	ble	154fc <__assert_fail@plt+0x3874>
   155f4:	ldr	r0, [pc, #544]	; 1581c <__assert_fail@plt+0x3b94>
   155f8:	mov	fp, #0
   155fc:	add	r0, pc, r0
   15600:	bl	11a24 <system@plt>
   15604:	ldr	r2, [r6, #12]
   15608:	cmp	r2, r4
   1560c:	bne	15508 <__assert_fail@plt+0x3880>
   15610:	ldr	r2, [r5]
   15614:	cmp	r2, #11
   15618:	bne	15508 <__assert_fail@plt+0x3880>
   1561c:	ldr	r0, [pc, #508]	; 15820 <__assert_fail@plt+0x3b98>
   15620:	bl	11988 <usleep@plt>
   15624:	ldr	r3, [sp, #28]
   15628:	subs	r3, r3, #1
   1562c:	str	r3, [sp, #28]
   15630:	bne	15570 <__assert_fail@plt+0x38e8>
   15634:	b	15508 <__assert_fail@plt+0x3880>
   15638:	ldrb	r2, [r4, #8]
   1563c:	ldr	r6, [r5]
   15640:	tst	r2, #1
   15644:	bne	157c0 <__assert_fail@plt+0x3b38>
   15648:	cmp	r6, #12
   1564c:	beq	157ac <__assert_fail@plt+0x3b24>
   15650:	ldr	r1, [pc, #460]	; 15824 <__assert_fail@plt+0x3b9c>
   15654:	mov	r0, #1
   15658:	add	r1, pc, r1
   1565c:	bl	1503c <__assert_fail@plt+0x33b4>
   15660:	ldr	r3, [sp, #36]	; 0x24
   15664:	ldr	r2, [sp, #172]	; 0xac
   15668:	ldr	r3, [r3]
   1566c:	cmp	r2, r3
   15670:	bne	157e8 <__assert_fail@plt+0x3b60>
   15674:	add	sp, sp, #180	; 0xb4
   15678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1567c:	ldr	r3, [r5]
   15680:	cmp	r3, #11
   15684:	beq	156f4 <__assert_fail@plt+0x3a6c>
   15688:	cmp	r3, #12
   1568c:	beq	156e8 <__assert_fail@plt+0x3a60>
   15690:	ldrb	r3, [r4, #8]
   15694:	mov	r2, #9
   15698:	str	r2, [r4, #12]
   1569c:	bic	r3, r3, #3
   156a0:	orr	r3, r3, #2
   156a4:	strb	r3, [r4, #8]
   156a8:	b	155c8 <__assert_fail@plt+0x3940>
   156ac:	ldr	r0, [sp, #24]
   156b0:	str	r3, [r7]
   156b4:	bl	11ac0 <sigfillset@plt>
   156b8:	b	1548c <__assert_fail@plt+0x3804>
   156bc:	ldr	r0, [sp, #24]
   156c0:	str	r3, [r7]
   156c4:	bl	11ac0 <sigfillset@plt>
   156c8:	b	15590 <__assert_fail@plt+0x3908>
   156cc:	ldr	r2, [r6, #12]
   156d0:	cmp	r2, r4
   156d4:	beq	154e4 <__assert_fail@plt+0x385c>
   156d8:	ldrb	r2, [r4, #8]
   156dc:	bic	r2, r2, #1
   156e0:	strb	r2, [r4, #8]
   156e4:	b	154e4 <__assert_fail@plt+0x385c>
   156e8:	ldr	r3, [r6, #12]
   156ec:	cmp	r3, r4
   156f0:	beq	15690 <__assert_fail@plt+0x3a08>
   156f4:	ldrb	r3, [r4, #8]
   156f8:	bic	r3, r3, #1
   156fc:	strb	r3, [r4, #8]
   15700:	b	155c8 <__assert_fail@plt+0x3940>
   15704:	ldr	r3, [sp, #12]
   15708:	cmp	r3, #0
   1570c:	blt	15728 <__assert_fail@plt+0x3aa0>
   15710:	ldr	r3, [pc, #272]	; 15828 <__assert_fail@plt+0x3ba0>
   15714:	cmp	r2, r3
   15718:	movne	r3, #0
   1571c:	ldrne	r2, [sp, #32]
   15720:	strne	r3, [r2, #12]
   15724:	b	15534 <__assert_fail@plt+0x38ac>
   15728:	ldrb	r3, [r4, #8]
   1572c:	tst	r3, #1
   15730:	ldreq	r6, [r5]
   15734:	beq	15648 <__assert_fail@plt+0x39c0>
   15738:	ldr	r3, [pc, #232]	; 15828 <__assert_fail@plt+0x3ba0>
   1573c:	cmp	r2, r3
   15740:	bne	15780 <__assert_fail@plt+0x3af8>
   15744:	ldrb	r3, [r4, #8]
   15748:	orr	r3, r3, #2
   1574c:	strb	r3, [r4, #8]
   15750:	ldr	r3, [r5]
   15754:	cmp	r3, #12
   15758:	movne	r3, #9
   1575c:	strne	r3, [r4, #12]
   15760:	bne	15660 <__assert_fail@plt+0x39d8>
   15764:	ldr	r1, [pc, #192]	; 1582c <__assert_fail@plt+0x3ba4>
   15768:	mov	r0, #1
   1576c:	add	r1, pc, r1
   15770:	bl	1503c <__assert_fail@plt+0x33b4>
   15774:	mov	r3, #10
   15778:	str	r3, [r4, #12]
   1577c:	b	15660 <__assert_fail@plt+0x39d8>
   15780:	ldr	r6, [r5]
   15784:	mov	r0, r6
   15788:	bl	11a18 <strerror@plt>
   1578c:	ldr	r1, [pc, #156]	; 15830 <__assert_fail@plt+0x3ba8>
   15790:	mov	r2, r6
   15794:	ldr	r3, [sp, #12]
   15798:	add	r1, pc, r1
   1579c:	str	r0, [sp]
   157a0:	mov	r0, #1
   157a4:	bl	1503c <__assert_fail@plt+0x33b4>
   157a8:	b	15744 <__assert_fail@plt+0x3abc>
   157ac:	ldr	r1, [pc, #128]	; 15834 <__assert_fail@plt+0x3bac>
   157b0:	mov	r0, #1
   157b4:	add	r1, pc, r1
   157b8:	bl	1503c <__assert_fail@plt+0x33b4>
   157bc:	b	15660 <__assert_fail@plt+0x39d8>
   157c0:	mov	r0, r6
   157c4:	bl	11a18 <strerror@plt>
   157c8:	ldr	r1, [pc, #104]	; 15838 <__assert_fail@plt+0x3bb0>
   157cc:	str	fp, [sp]
   157d0:	mov	r2, r6
   157d4:	add	r1, pc, r1
   157d8:	mov	r3, r0
   157dc:	mov	r0, #1
   157e0:	bl	1503c <__assert_fail@plt+0x33b4>
   157e4:	b	15744 <__assert_fail@plt+0x3abc>
   157e8:	bl	118e0 <__stack_chk_fail@plt>
   157ec:	andeq	r2, r2, r0, ror #20
   157f0:			; <UNDEFINED> instruction: 0x000001b0
   157f4:	andeq	r3, r2, ip, asr lr
   157f8:	andeq	sp, r0, r8, asr #32
   157fc:	strdeq	r3, [r2], -r4
   15800:	strdeq	r3, [r2], -r0
   15804:	andeq	r7, r0, pc, lsr #10
   15808:			; <UNDEFINED> instruction: 0x00023dbc
   1580c:	andeq	r3, r2, r4, asr #26
   15810:	ldrdeq	r2, [r2], -r0
   15814:	andeq	r2, r0, r5, lsl #5
   15818:	andeq	r0, r0, ip, asr #3
   1581c:	andeq	ip, r0, r0, ror lr
   15820:	andeq	r2, r0, r0, lsl r7
   15824:	andeq	ip, r0, r4, lsr #30
   15828:	andeq	r7, r0, r0, lsr r5
   1582c:	andeq	ip, r0, ip, lsl #27
   15830:	andeq	ip, r0, r4, lsr #26
   15834:	andeq	ip, r0, r8, lsl #27
   15838:			; <UNDEFINED> instruction: 0x0000ccb8
   1583c:	ldr	r3, [pc, #300]	; 15970 <__assert_fail@plt+0x3ce8>
   15840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15844:	add	r3, pc, r3
   15848:	sub	sp, sp, #20
   1584c:	ldr	r4, [r3, #4]
   15850:	cmn	r4, #1
   15854:	beq	15940 <__assert_fail@plt+0x3cb8>
   15858:	cmp	r4, #3
   1585c:	bgt	15934 <__assert_fail@plt+0x3cac>
   15860:	ldr	r3, [pc, #268]	; 15974 <__assert_fail@plt+0x3cec>
   15864:	lsl	r2, r4, #3
   15868:	add	r3, pc, r3
   1586c:	add	ip, r3, r2
   15870:	ldr	lr, [r3, r4, lsl #3]
   15874:	ldrb	ip, [ip, #4]
   15878:	ldr	r5, [pc, #248]	; 15978 <__assert_fail@plt+0x3cf0>
   1587c:	ldr	sl, [pc, #248]	; 1597c <__assert_fail@plt+0x3cf4>
   15880:	ldr	r9, [pc, #248]	; 15980 <__assert_fail@plt+0x3cf8>
   15884:	add	r5, pc, r5
   15888:	mov	r6, r1
   1588c:	mov	r7, r0
   15890:	add	sl, pc, sl
   15894:	add	r9, pc, r9
   15898:	ldr	r8, [pc, #228]	; 15984 <__assert_fail@plt+0x3cfc>
   1589c:	add	r5, r5, r2
   158a0:	b	158e0 <__assert_fail@plt+0x3c58>
   158a4:	bl	11acc <__errno_location@plt>
   158a8:	ldr	r2, [pc, #216]	; 15988 <__assert_fail@plt+0x3d00>
   158ac:	add	r2, pc, r2
   158b0:	ldr	r3, [r0]
   158b4:	cmp	r3, #16
   158b8:	cmpne	r3, #13
   158bc:	beq	15958 <__assert_fail@plt+0x3cd0>
   158c0:	ldr	r3, [r2, #4]
   158c4:	add	r4, r4, #1
   158c8:	cmn	r3, #1
   158cc:	bne	15934 <__assert_fail@plt+0x3cac>
   158d0:	cmp	r4, #4
   158d4:	beq	15934 <__assert_fail@plt+0x3cac>
   158d8:	ldrb	ip, [r5, #12]
   158dc:	ldr	lr, [r5, #8]!
   158e0:	cmp	ip, #0
   158e4:	add	fp, ip, r7
   158e8:	strne	fp, [sp, #8]
   158ec:	stmne	sp, {r9, lr}
   158f0:	streq	r7, [sp, #8]
   158f4:	stmeq	sp, {sl, lr}
   158f8:	mvn	r3, #0
   158fc:	mov	r2, #1
   15900:	mov	r1, #128	; 0x80
   15904:	mov	r0, r6
   15908:	bl	11c7c <__snprintf_chk@plt>
   1590c:	mov	r1, r8
   15910:	mov	r0, r6
   15914:	bl	11a60 <open@plt>
   15918:	cmp	r0, #0
   1591c:	blt	158a4 <__assert_fail@plt+0x3c1c>
   15920:	ldr	r3, [pc, #100]	; 1598c <__assert_fail@plt+0x3d04>
   15924:	add	r3, pc, r3
   15928:	str	r4, [r3, #4]
   1592c:	add	sp, sp, #20
   15930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15934:	mvn	r0, #1
   15938:	add	sp, sp, #20
   1593c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15940:	ldr	lr, [pc, #72]	; 15990 <__assert_fail@plt+0x3d08>
   15944:	mov	ip, #0
   15948:	add	lr, pc, lr
   1594c:	mov	r4, ip
   15950:	mov	r2, ip
   15954:	b	15878 <__assert_fail@plt+0x3bf0>
   15958:	ldr	r3, [pc, #52]	; 15994 <__assert_fail@plt+0x3d0c>
   1595c:	mvn	r0, #0
   15960:	add	r3, pc, r3
   15964:	str	r4, [r3, #4]
   15968:	add	sp, sp, #20
   1596c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15970:	andeq	r2, r2, ip, ror #17
   15974:	andeq	r2, r2, r8, lsr r4
   15978:	andeq	r2, r2, ip, lsl r4
   1597c:	andeq	ip, r0, ip, lsr sp
   15980:	andeq	ip, r0, r0, lsr sp
   15984:	andeq	r0, r0, r2, lsl #16
   15988:	andeq	r2, r2, r4, lsl #17
   1598c:	andeq	r2, r2, ip, lsl #16
   15990:	andeq	ip, r0, r4, ror ip
   15994:	ldrdeq	r2, [r2], -r0
   15998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1599c:	subs	r8, r2, #0
   159a0:	sub	sp, sp, #28
   159a4:	blt	15b48 <__assert_fail@plt+0x3ec0>
   159a8:	mov	r9, r3
   159ac:	ldr	r3, [pc, #616]	; 15c1c <__assert_fail@plt+0x3f94>
   159b0:	mov	r7, r0
   159b4:	add	r3, pc, r3
   159b8:	mov	r6, r1
   159bc:	ldr	r3, [r3, #8]
   159c0:	cmp	r3, #0
   159c4:	beq	15a28 <__assert_fail@plt+0x3da0>
   159c8:	cmn	r3, #1
   159cc:	beq	15be8 <__assert_fail@plt+0x3f60>
   159d0:	ldr	r2, [sp, #68]	; 0x44
   159d4:	ldr	r3, [pc, #580]	; 15c20 <__assert_fail@plt+0x3f98>
   159d8:	str	r2, [sp, #16]
   159dc:	ldr	r2, [sp, #64]	; 0x40
   159e0:	add	r3, pc, r3
   159e4:	str	r2, [sp, #12]
   159e8:	str	r3, [sp]
   159ec:	mov	r2, #1
   159f0:	mvn	r3, #0
   159f4:	mov	r1, #128	; 0x80
   159f8:	strd	r8, [sp, #4]
   159fc:	mov	r0, r6
   15a00:	bl	11c7c <__snprintf_chk@plt>
   15a04:	ldr	r1, [pc, #536]	; 15c24 <__assert_fail@plt+0x3f9c>
   15a08:	mov	r0, r6
   15a0c:	bl	11a60 <open@plt>
   15a10:	cmp	r0, #0
   15a14:	bge	15b90 <__assert_fail@plt+0x3f08>
   15a18:	bl	11acc <__errno_location@plt>
   15a1c:	ldr	r3, [r0]
   15a20:	cmp	r3, #2
   15a24:	beq	15b7c <__assert_fail@plt+0x3ef4>
   15a28:	mov	r1, r6
   15a2c:	mov	r0, r7
   15a30:	bl	1583c <__assert_fail@plt+0x3bb4>
   15a34:	cmn	r0, #1
   15a38:	mov	r4, r0
   15a3c:	blt	15b18 <__assert_fail@plt+0x3e90>
   15a40:	cmn	r4, #1
   15a44:	beq	15a74 <__assert_fail@plt+0x3dec>
   15a48:	ldr	r3, [sp, #68]	; 0x44
   15a4c:	mov	r2, r9
   15a50:	str	r3, [sp]
   15a54:	mov	r1, r8
   15a58:	ldr	r3, [sp, #64]	; 0x40
   15a5c:	mov	r0, r4
   15a60:	bl	15270 <__assert_fail@plt+0x35e8>
   15a64:	cmp	r0, #0
   15a68:	mov	r0, r4
   15a6c:	bne	15bc4 <__assert_fail@plt+0x3f3c>
   15a70:	bl	11c58 <close@plt>
   15a74:	ldr	r3, [pc, #428]	; 15c28 <__assert_fail@plt+0x3fa0>
   15a78:	add	r3, pc, r3
   15a7c:	ldr	r3, [r3, #4]
   15a80:	cmn	r3, #1
   15a84:	beq	15b48 <__assert_fail@plt+0x3ec0>
   15a88:	ldr	fp, [pc, #412]	; 15c2c <__assert_fail@plt+0x3fa4>
   15a8c:	mov	r4, #0
   15a90:	add	fp, pc, fp
   15a94:	mov	r5, r4
   15a98:	b	15ae4 <__assert_fail@plt+0x3e5c>
   15a9c:	bl	1583c <__assert_fail@plt+0x3bb4>
   15aa0:	ldr	r3, [sp, #64]	; 0x40
   15aa4:	mov	r2, r9
   15aa8:	mov	r1, r8
   15aac:	subs	sl, r0, #0
   15ab0:	bge	15b54 <__assert_fail@plt+0x3ecc>
   15ab4:	cmn	sl, #1
   15ab8:	add	r4, r4, #1
   15abc:	beq	15b0c <__assert_fail@plt+0x3e84>
   15ac0:	cmp	r4, #4
   15ac4:	movgt	r3, #0
   15ac8:	movle	r3, #1
   15acc:	add	r5, r5, #1
   15ad0:	cmp	r5, #254	; 0xfe
   15ad4:	movgt	r3, #0
   15ad8:	andle	r3, r3, #1
   15adc:	cmp	r3, #0
   15ae0:	beq	15b48 <__assert_fail@plt+0x3ec0>
   15ae4:	mov	r1, fp
   15ae8:	mov	r0, #2
   15aec:	str	r4, [sp]
   15af0:	mov	r3, r7
   15af4:	mov	r2, r5
   15af8:	bl	1503c <__assert_fail@plt+0x33b4>
   15afc:	cmp	r7, r5
   15b00:	mov	r1, r6
   15b04:	mov	r0, r5
   15b08:	bne	15a9c <__assert_fail@plt+0x3e14>
   15b0c:	mov	r3, #1
   15b10:	mov	r4, r3
   15b14:	b	15acc <__assert_fail@plt+0x3e44>
   15b18:	mov	r1, r6
   15b1c:	mov	r0, #0
   15b20:	bl	1583c <__assert_fail@plt+0x3bb4>
   15b24:	cmn	r0, #1
   15b28:	mov	r4, r0
   15b2c:	bge	15a40 <__assert_fail@plt+0x3db8>
   15b30:	mov	r1, r6
   15b34:	mov	r0, #1
   15b38:	bl	1583c <__assert_fail@plt+0x3bb4>
   15b3c:	cmn	r0, #1
   15b40:	mov	r4, r0
   15b44:	bge	15a40 <__assert_fail@plt+0x3db8>
   15b48:	mov	r0, #0
   15b4c:	add	sp, sp, #28
   15b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b54:	ldr	ip, [sp, #68]	; 0x44
   15b58:	mov	r4, #1
   15b5c:	str	ip, [sp]
   15b60:	bl	15270 <__assert_fail@plt+0x35e8>
   15b64:	cmp	r0, #0
   15b68:	mov	r0, sl
   15b6c:	bne	15bfc <__assert_fail@plt+0x3f74>
   15b70:	bl	11c58 <close@plt>
   15b74:	mov	r3, r4
   15b78:	b	15acc <__assert_fail@plt+0x3e44>
   15b7c:	ldr	r3, [pc, #172]	; 15c30 <__assert_fail@plt+0x3fa8>
   15b80:	mov	r2, #0
   15b84:	add	r3, pc, r3
   15b88:	str	r2, [r3, #8]
   15b8c:	b	15a28 <__assert_fail@plt+0x3da0>
   15b90:	bl	11c58 <close@plt>
   15b94:	ldr	r3, [pc, #152]	; 15c34 <__assert_fail@plt+0x3fac>
   15b98:	ldr	r1, [pc, #152]	; 15c38 <__assert_fail@plt+0x3fb0>
   15b9c:	mov	r4, #1
   15ba0:	add	r3, pc, r3
   15ba4:	mov	r0, r4
   15ba8:	mov	r2, r6
   15bac:	add	r1, pc, r1
   15bb0:	str	r4, [r3, #8]
   15bb4:	bl	1503c <__assert_fail@plt+0x33b4>
   15bb8:	mov	r0, r4
   15bbc:	add	sp, sp, #28
   15bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc4:	bl	11c58 <close@plt>
   15bc8:	ldr	r1, [pc, #108]	; 15c3c <__assert_fail@plt+0x3fb4>
   15bcc:	mov	r2, r6
   15bd0:	add	r1, pc, r1
   15bd4:	mov	r0, #1
   15bd8:	bl	1503c <__assert_fail@plt+0x33b4>
   15bdc:	mov	r0, #1
   15be0:	add	sp, sp, #28
   15be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15be8:	bl	1583c <__assert_fail@plt+0x3bb4>
   15bec:	cmp	r0, #0
   15bf0:	blt	159d0 <__assert_fail@plt+0x3d48>
   15bf4:	bl	11c58 <close@plt>
   15bf8:	b	159d0 <__assert_fail@plt+0x3d48>
   15bfc:	bl	11c58 <close@plt>
   15c00:	ldr	r1, [pc, #56]	; 15c40 <__assert_fail@plt+0x3fb8>
   15c04:	mov	r0, r4
   15c08:	mov	r2, r6
   15c0c:	add	r1, pc, r1
   15c10:	bl	1503c <__assert_fail@plt+0x33b4>
   15c14:	mov	r0, r4
   15c18:	b	15b4c <__assert_fail@plt+0x3ec4>
   15c1c:	andeq	r2, r2, ip, ror r7
   15c20:	strdeq	ip, [r0], -r4
   15c24:	andeq	r0, r0, r2, lsl #16
   15c28:			; <UNDEFINED> instruction: 0x000226b8
   15c2c:	ldrdeq	ip, [r0], -r4
   15c30:	andeq	r2, r2, ip, lsr #11
   15c34:	muleq	r2, r0, r5
   15c38:	andeq	ip, r0, r8, asr sl
   15c3c:	andeq	ip, r0, r4, ror #20
   15c40:	andeq	ip, r0, r4, lsl #21
   15c44:	ldr	r3, [pc, #288]	; 15d6c <__assert_fail@plt+0x40e4>
   15c48:	rsb	r2, r0, r0, lsl #3
   15c4c:	add	r3, pc, r3
   15c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c54:	sub	sp, sp, #12
   15c58:	ldr	r3, [r3]
   15c5c:	add	r3, r3, r2, lsl #2
   15c60:	ldr	r7, [r3, #24]
   15c64:	ldr	sl, [r7, #12]
   15c68:	cmp	sl, #0
   15c6c:	beq	15d58 <__assert_fail@plt+0x40d0>
   15c70:	ldr	r3, [pc, #248]	; 15d70 <__assert_fail@plt+0x40e8>
   15c74:	ldr	fp, [pc, #248]	; 15d74 <__assert_fail@plt+0x40ec>
   15c78:	add	r3, pc, r3
   15c7c:	mov	r6, r0
   15c80:	str	r3, [sp, #4]
   15c84:	add	fp, pc, fp
   15c88:	b	15ca4 <__assert_fail@plt+0x401c>
   15c8c:	ldr	r2, [sl]
   15c90:	ldr	r1, [r7, #20]
   15c94:	str	r1, [sl]
   15c98:	str	sl, [r7, #20]
   15c9c:	subs	sl, r2, #0
   15ca0:	beq	15d58 <__assert_fail@plt+0x40d0>
   15ca4:	ldrb	r2, [sl, #8]
   15ca8:	and	r2, r2, #3
   15cac:	cmp	r2, #1
   15cb0:	bne	15c8c <__assert_fail@plt+0x4004>
   15cb4:	ldr	r3, [sp, #4]
   15cb8:	ldr	r4, [r3, #12]
   15cbc:	add	r4, r4, r4, lsl #2
   15cc0:	lsls	r4, r4, #1
   15cc4:	beq	15d2c <__assert_fail@plt+0x40a4>
   15cc8:	bl	11acc <__errno_location@plt>
   15ccc:	ldr	r9, [pc, #164]	; 15d78 <__assert_fail@plt+0x40f0>
   15cd0:	add	r8, sl, #24
   15cd4:	mov	r5, r0
   15cd8:	b	15cf4 <__assert_fail@plt+0x406c>
   15cdc:	ldr	r3, [r5]
   15ce0:	cmp	r3, #11
   15ce4:	bne	15d2c <__assert_fail@plt+0x40a4>
   15ce8:	bl	11988 <usleep@plt>
   15cec:	subs	r4, r4, #1
   15cf0:	beq	15d2c <__assert_fail@plt+0x40a4>
   15cf4:	mov	r3, #0
   15cf8:	str	r3, [r5]
   15cfc:	ldr	r3, [fp, #4]
   15d00:	ldr	ip, [pc, #116]	; 15d7c <__assert_fail@plt+0x40f4>
   15d04:	mov	r2, #64	; 0x40
   15d08:	cmp	r3, ip
   15d0c:	mov	r1, r8
   15d10:	ldrle	r2, [sl, #28]
   15d14:	mov	r0, r6
   15d18:	bl	1182c <read@plt>
   15d1c:	mov	r3, r0
   15d20:	cmp	r3, #0
   15d24:	mov	r0, r9
   15d28:	blt	15cdc <__assert_fail@plt+0x4054>
   15d2c:	ldr	r1, [pc, #76]	; 15d80 <__assert_fail@plt+0x40f8>
   15d30:	ldr	r2, [sl, #4]
   15d34:	add	r1, pc, r1
   15d38:	rsb	r2, r2, r2, lsl #3
   15d3c:	ldr	r1, [r1]
   15d40:	add	r2, r1, r2, lsl #2
   15d44:	ldr	r1, [r2, #24]
   15d48:	ldr	r2, [r1]
   15d4c:	sub	r2, r2, #1
   15d50:	str	r2, [r1]
   15d54:	b	15c8c <__assert_fail@plt+0x4004>
   15d58:	mov	r3, #0
   15d5c:	str	r3, [r7, #16]
   15d60:	str	r3, [r7, #12]
   15d64:	add	sp, sp, #12
   15d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d6c:	andeq	r3, r2, r4, lsl #12
   15d70:			; <UNDEFINED> instruction: 0x000224b8
   15d74:	andeq	r3, r2, ip, asr #11
   15d78:	andeq	r8, r1, r0, lsr #13
   15d7c:	andeq	r7, r0, pc, lsr #10
   15d80:	andeq	r3, r2, ip, lsl r5
   15d84:	push	{r4, r5, r6, r7, r8, lr}
   15d88:	rsb	r4, r0, r0, lsl #3
   15d8c:	ldr	r7, [pc, #128]	; 15e14 <__assert_fail@plt+0x418c>
   15d90:	lsl	r4, r4, #2
   15d94:	add	r7, pc, r7
   15d98:	mov	r6, r0
   15d9c:	ldr	r5, [r7]
   15da0:	add	r5, r5, r4
   15da4:	ldr	r3, [r5, #24]
   15da8:	cmp	r3, #0
   15dac:	beq	15de8 <__assert_fail@plt+0x4160>
   15db0:	bl	15c44 <__assert_fail@plt+0x3fbc>
   15db4:	ldr	r5, [r7]
   15db8:	add	r5, r5, r4
   15dbc:	ldr	r3, [r5, #24]
   15dc0:	ldr	r0, [r3, #20]
   15dc4:	cmp	r0, #0
   15dc8:	beq	15de0 <__assert_fail@plt+0x4158>
   15dcc:	ldr	r4, [r0]
   15dd0:	bl	11850 <free@plt>
   15dd4:	subs	r0, r4, #0
   15dd8:	bne	15dcc <__assert_fail@plt+0x4144>
   15ddc:	ldr	r3, [r5, #24]
   15de0:	mov	r0, r3
   15de4:	bl	11850 <free@plt>
   15de8:	ldrb	r3, [r5]
   15dec:	mov	r2, #0
   15df0:	str	r2, [r5, #16]
   15df4:	bic	r3, r3, #1
   15df8:	tst	r3, #2
   15dfc:	strb	r3, [r5]
   15e00:	str	r2, [r5, #20]
   15e04:	popne	{r4, r5, r6, r7, r8, pc}
   15e08:	mov	r0, r6
   15e0c:	pop	{r4, r5, r6, r7, r8, lr}
   15e10:	b	11c58 <close@plt>
   15e14:			; <UNDEFINED> instruction: 0x000234bc
   15e18:	ldr	r3, [pc, #120]	; 15e98 <__assert_fail@plt+0x4210>
   15e1c:	add	r3, pc, r3
   15e20:	ldr	ip, [r3, #136]	; 0x88
   15e24:	cmp	ip, #0
   15e28:	bxle	lr
   15e2c:	push	{r4, lr}
   15e30:	mov	lr, #0
   15e34:	ldr	r2, [r3]
   15e38:	mov	r0, ip
   15e3c:	mov	r3, lr
   15e40:	ldrb	r1, [r2]
   15e44:	add	r2, r2, #28
   15e48:	tst	r1, #1
   15e4c:	movne	r0, r3
   15e50:	add	r3, r3, #1
   15e54:	addne	lr, lr, #1
   15e58:	cmp	ip, r3
   15e5c:	bne	15e40 <__assert_fail@plt+0x41b8>
   15e60:	cmp	lr, #1
   15e64:	bgt	15e78 <__assert_fail@plt+0x41f0>
   15e68:	cmp	r0, ip
   15e6c:	popge	{r4, pc}
   15e70:	pop	{r4, lr}
   15e74:	b	15c44 <__assert_fail@plt+0x3fbc>
   15e78:	ldr	r3, [pc, #28]	; 15e9c <__assert_fail@plt+0x4214>
   15e7c:	ldr	r1, [pc, #28]	; 15ea0 <__assert_fail@plt+0x4218>
   15e80:	ldr	r0, [pc, #28]	; 15ea4 <__assert_fail@plt+0x421c>
   15e84:	add	r3, pc, r3
   15e88:	ldr	r2, [pc, #24]	; 15ea8 <__assert_fail@plt+0x4220>
   15e8c:	add	r1, pc, r1
   15e90:	add	r0, pc, r0
   15e94:	bl	11c88 <__assert_fail@plt>
   15e98:	andeq	r3, r2, r4, lsr r4
   15e9c:	andeq	ip, r0, r8, ror #9
   15ea0:	andeq	ip, r0, r4, lsr r8
   15ea4:	andeq	ip, r0, r0, asr #16
   15ea8:	andeq	r0, r0, r9, lsl r8
   15eac:	ldr	ip, [pc, #1112]	; 1630c <__assert_fail@plt+0x4684>
   15eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eb4:	add	ip, pc, ip
   15eb8:	rsb	r6, r0, r0, lsl #3
   15ebc:	ldr	lr, [ip]
   15ec0:	ldr	r4, [pc, #1096]	; 16310 <__assert_fail@plt+0x4688>
   15ec4:	lsl	r6, r6, #2
   15ec8:	mov	r7, r0
   15ecc:	add	lr, lr, r6
   15ed0:	ldr	r0, [pc, #1084]	; 16314 <__assert_fail@plt+0x468c>
   15ed4:	sub	sp, sp, #156	; 0x9c
   15ed8:	add	r4, pc, r4
   15edc:	ldr	r5, [lr, #24]
   15ee0:	str	r2, [sp, #12]
   15ee4:	ldr	r0, [r4, r0]
   15ee8:	mov	r2, r4
   15eec:	ldr	r4, [r5, #20]
   15ef0:	str	r0, [sp]
   15ef4:	mov	fp, r3
   15ef8:	ldr	r0, [r0]
   15efc:	add	r3, sp, #196	; 0xc4
   15f00:	cmp	r4, #0
   15f04:	mov	r9, r1
   15f08:	ldr	r1, [ip, #4]
   15f0c:	str	r0, [sp, #148]	; 0x94
   15f10:	ldm	r3, {r3, r8, sl}
   15f14:	beq	160cc <__assert_fail@plt+0x4444>
   15f18:	ldrb	r2, [r4, #8]
   15f1c:	ldr	ip, [pc, #1012]	; 16318 <__assert_fail@plt+0x4690>
   15f20:	ldr	r0, [r4]
   15f24:	bic	r2, r2, #3
   15f28:	cmp	r1, ip
   15f2c:	mov	r1, #0
   15f30:	str	r0, [r5, #20]
   15f34:	strb	r2, [r4, #8]
   15f38:	str	r7, [r4, #4]
   15f3c:	str	r3, [r4, #20]
   15f40:	str	r8, [r4, #16]
   15f44:	str	r1, [r4]
   15f48:	str	r1, [r4, #12]
   15f4c:	bgt	1611c <__assert_fail@plt+0x4494>
   15f50:	mov	r2, #32
   15f54:	mov	r1, #0
   15f58:	add	r0, r4, #28
   15f5c:	bl	11b08 <memset@plt>
   15f60:	ldr	r0, [pc, #948]	; 1631c <__assert_fail@plt+0x4694>
   15f64:	ldr	r3, [sp, #12]
   15f68:	add	r0, pc, r0
   15f6c:	ldr	ip, [sp, #192]	; 0xc0
   15f70:	ldr	r2, [r0, #140]	; 0x8c
   15f74:	cmp	r8, #0
   15f78:	add	r1, r3, #36	; 0x24
   15f7c:	add	r1, r1, ip
   15f80:	str	r2, [r4, #32]
   15f84:	add	r2, r2, #1
   15f88:	str	r2, [r0, #140]	; 0x8c
   15f8c:	str	r1, [r4, #24]
   15f90:	ldrne	r2, [r8]
   15f94:	moveq	r2, #36	; 0x24
   15f98:	addne	r2, r2, #36	; 0x24
   15f9c:	str	r2, [r4, #28]
   15fa0:	mov	r1, r9
   15fa4:	mov	r2, r3
   15fa8:	add	r0, r4, #60	; 0x3c
   15fac:	str	r3, [sp, #4]
   15fb0:	bl	11880 <memcpy@plt>
   15fb4:	ldr	r3, [sp, #4]
   15fb8:	ldr	r2, [sp, #192]	; 0xc0
   15fbc:	add	r0, r3, #60	; 0x3c
   15fc0:	mov	r1, fp
   15fc4:	add	r0, r4, r0
   15fc8:	bl	11880 <memcpy@plt>
   15fcc:	ldrb	r1, [r9]
   15fd0:	ldr	r3, [pc, #840]	; 16320 <__assert_fail@plt+0x4698>
   15fd4:	ldr	r2, [sp, #12]
   15fd8:	add	r3, pc, r3
   15fdc:	add	r3, r3, r1, lsr #5
   15fe0:	ldrb	r3, [r3, #28]
   15fe4:	cmp	r3, r2
   15fe8:	beq	16004 <__assert_fail@plt+0x437c>
   15fec:	mov	r0, r7
   15ff0:	add	r2, sp, #12
   15ff4:	ldr	r1, [pc, #808]	; 16324 <__assert_fail@plt+0x469c>
   15ff8:	bl	11970 <ioctl@plt>
   15ffc:	cmp	r0, #0
   16000:	bne	162b8 <__assert_fail@plt+0x4630>
   16004:	ldr	r3, [pc, #796]	; 16328 <__assert_fail@plt+0x46a0>
   16008:	mov	r2, #0
   1600c:	add	r3, pc, r3
   16010:	str	r2, [r4]
   16014:	ldr	r1, [r3]
   16018:	cmp	r1, r2
   1601c:	bne	16260 <__assert_fail@plt+0x45d8>
   16020:	ldr	r1, [pc, #772]	; 1632c <__assert_fail@plt+0x46a4>
   16024:	add	r7, sp, #20
   16028:	add	r1, pc, r1
   1602c:	add	r1, r1, #8
   16030:	mov	r2, r7
   16034:	mov	r0, #0
   16038:	bl	11844 <sigprocmask@plt>
   1603c:	ldr	r3, [r5, #16]
   16040:	mov	r1, r7
   16044:	cmp	r3, #0
   16048:	strne	r4, [r3]
   1604c:	streq	r4, [r5, #16]
   16050:	strne	r4, [r5, #16]
   16054:	streq	r4, [r5, #12]
   16058:	mov	r2, #0
   1605c:	mov	r0, #2
   16060:	bl	11844 <sigprocmask@plt>
   16064:	ldr	r1, [pc, #708]	; 16330 <__assert_fail@plt+0x46a8>
   16068:	mov	r2, r4
   1606c:	add	r1, pc, r1
   16070:	mov	r0, #4
   16074:	bl	1503c <__assert_fail@plt+0x33b4>
   16078:	mov	r0, r4
   1607c:	str	r4, [sl]
   16080:	bl	153b8 <__assert_fail@plt+0x3730>
   16084:	ldr	r3, [pc, #680]	; 16334 <__assert_fail@plt+0x46ac>
   16088:	ldr	r1, [pc, #680]	; 16338 <__assert_fail@plt+0x46b0>
   1608c:	add	r3, pc, r3
   16090:	mov	r0, #10
   16094:	ldr	r3, [r3]
   16098:	add	r1, pc, r1
   1609c:	add	r6, r3, r6
   160a0:	ldr	r2, [r6, #24]
   160a4:	ldrd	r2, [r2]
   160a8:	bl	1503c <__assert_fail@plt+0x33b4>
   160ac:	mov	r0, #0
   160b0:	ldr	r3, [sp]
   160b4:	ldr	r2, [sp, #148]	; 0x94
   160b8:	ldr	r3, [r3]
   160bc:	cmp	r2, r3
   160c0:	bne	16308 <__assert_fail@plt+0x4680>
   160c4:	add	sp, sp, #156	; 0x9c
   160c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160cc:	ldr	r0, [pc, #580]	; 16318 <__assert_fail@plt+0x4690>
   160d0:	ldr	r2, [r5, #8]
   160d4:	cmp	r1, r0
   160d8:	str	r3, [sp, #8]
   160dc:	ble	16278 <__assert_fail@plt+0x45f0>
   160e0:	add	r2, r2, #167	; 0xa7
   160e4:	mov	r0, r2
   160e8:	str	r2, [sp, #4]
   160ec:	bl	11a00 <malloc@plt>
   160f0:	ldrd	r2, [sp, #4]
   160f4:	subs	r4, r0, #0
   160f8:	beq	162f0 <__assert_fail@plt+0x4668>
   160fc:	ldrb	r2, [r4, #8]
   16100:	mov	r1, #0
   16104:	str	r7, [r4, #4]
   16108:	bic	r2, r2, #3
   1610c:	str	r3, [r4, #20]
   16110:	str	r8, [r4, #16]
   16114:	strb	r2, [r4, #8]
   16118:	str	r1, [r4, #12]
   1611c:	mov	r2, #60	; 0x3c
   16120:	mov	r1, #0
   16124:	add	r0, r4, #28
   16128:	str	r3, [sp, #4]
   1612c:	bl	11b08 <memset@plt>
   16130:	ldr	r7, [sp, #12]
   16134:	mov	r0, #83	; 0x53
   16138:	mov	r1, #0
   1613c:	mov	r2, #64	; 0x40
   16140:	cmp	r8, #0
   16144:	strb	r7, [r4, #32]
   16148:	str	r0, [r4, #24]
   1614c:	strh	r1, [r4, #34]	; 0x22
   16150:	strb	r2, [r4, #33]	; 0x21
   16154:	beq	161e8 <__assert_fail@plt+0x4560>
   16158:	ldr	r2, [r8]
   1615c:	cmp	r2, r1
   16160:	beq	161e8 <__assert_fail@plt+0x4560>
   16164:	mvn	r2, #2
   16168:	str	r2, [r4, #28]
   1616c:	ldr	r3, [sp, #4]
   16170:	ldr	r2, [r8]
   16174:	strd	r2, [r4, #36]	; 0x24
   16178:	cmp	r7, #12
   1617c:	bhi	16238 <__assert_fail@plt+0x45b0>
   16180:	add	r3, r4, #152	; 0x98
   16184:	mov	r2, r7
   16188:	mov	r1, r9
   1618c:	mov	r0, r3
   16190:	mov	r7, r3
   16194:	bl	11880 <memcpy@plt>
   16198:	ldr	r3, [pc, #412]	; 1633c <__assert_fail@plt+0x46b4>
   1619c:	ldr	r1, [pc, #412]	; 16340 <__assert_fail@plt+0x46b8>
   161a0:	add	r3, pc, r3
   161a4:	add	r1, pc, r1
   161a8:	ldr	r3, [r3, #12]
   161ac:	ldr	r2, [r1, #140]	; 0x8c
   161b0:	add	r0, r4, #88	; 0x58
   161b4:	rsb	ip, r3, r3, lsl #5
   161b8:	str	r2, [r4, #60]	; 0x3c
   161bc:	add	r3, r3, ip, lsl #2
   161c0:	add	r2, r2, #1
   161c4:	mov	ip, #0
   161c8:	lsl	r3, r3, #3
   161cc:	str	r7, [r4, #44]	; 0x2c
   161d0:	str	r3, [r4, #52]	; 0x34
   161d4:	str	r2, [r1, #140]	; 0x8c
   161d8:	str	r0, [r4, #48]	; 0x30
   161dc:	str	ip, [r4, #56]	; 0x38
   161e0:	str	ip, [r4, #64]	; 0x40
   161e4:	b	16004 <__assert_fail@plt+0x437c>
   161e8:	ldr	r3, [sp, #192]	; 0xc0
   161ec:	cmp	r3, #0
   161f0:	mvneq	r3, #0
   161f4:	streq	r3, [r4, #28]
   161f8:	beq	16178 <__assert_fail@plt+0x44f0>
   161fc:	ldr	r3, [r5, #8]
   16200:	ldr	r1, [sp, #192]	; 0xc0
   16204:	mvn	r2, #1
   16208:	cmp	r3, r1
   1620c:	str	r2, [r4, #28]
   16210:	bcc	162cc <__assert_fail@plt+0x4644>
   16214:	ldr	r2, [sp, #192]	; 0xc0
   16218:	add	r3, r4, #164	; 0xa4
   1621c:	str	r2, [r4, #36]	; 0x24
   16220:	mov	r1, fp
   16224:	mov	r0, r3
   16228:	bl	11880 <memcpy@plt>
   1622c:	cmp	r7, #12
   16230:	str	r0, [r4, #40]	; 0x28
   16234:	bls	16180 <__assert_fail@plt+0x44f8>
   16238:	ldr	r1, [pc, #260]	; 16344 <__assert_fail@plt+0x46bc>
   1623c:	mov	r2, r7
   16240:	mov	r3, #12
   16244:	add	r1, pc, r1
   16248:	mov	r0, #1
   1624c:	bl	1503c <__assert_fail@plt+0x33b4>
   16250:	mov	r3, #12
   16254:	mov	r7, r3
   16258:	str	r3, [sp, #12]
   1625c:	b	16180 <__assert_fail@plt+0x44f8>
   16260:	ldr	r0, [pc, #224]	; 16348 <__assert_fail@plt+0x46c0>
   16264:	str	r2, [r3]
   16268:	add	r0, pc, r0
   1626c:	add	r0, r0, #8
   16270:	bl	11ac0 <sigfillset@plt>
   16274:	b	16020 <__assert_fail@plt+0x4398>
   16278:	add	r2, r2, #155	; 0x9b
   1627c:	mov	r0, r2
   16280:	str	r2, [sp, #4]
   16284:	bl	11a00 <malloc@plt>
   16288:	ldrd	r2, [sp, #4]
   1628c:	subs	r4, r0, #0
   16290:	beq	162f0 <__assert_fail@plt+0x4668>
   16294:	ldrb	r2, [r4, #8]
   16298:	str	r3, [r4, #20]
   1629c:	str	r7, [r4, #4]
   162a0:	bic	r3, r2, #3
   162a4:	mov	r2, #0
   162a8:	str	r8, [r4, #16]
   162ac:	strb	r3, [r4, #8]
   162b0:	str	r2, [r4, #12]
   162b4:	b	15f50 <__assert_fail@plt+0x42c8>
   162b8:	ldr	r1, [pc, #140]	; 1634c <__assert_fail@plt+0x46c4>
   162bc:	mov	r0, #1
   162c0:	add	r1, pc, r1
   162c4:	bl	1503c <__assert_fail@plt+0x33b4>
   162c8:	b	16004 <__assert_fail@plt+0x437c>
   162cc:	mov	r2, r1
   162d0:	ldr	r1, [pc, #120]	; 16350 <__assert_fail@plt+0x46c8>
   162d4:	mov	r0, #1
   162d8:	add	r1, pc, r1
   162dc:	bl	1503c <__assert_fail@plt+0x33b4>
   162e0:	ldr	r3, [r5, #8]
   162e4:	ldr	r7, [sp, #12]
   162e8:	str	r3, [sp, #192]	; 0xc0
   162ec:	b	16214 <__assert_fail@plt+0x458c>
   162f0:	ldr	r1, [pc, #92]	; 16354 <__assert_fail@plt+0x46cc>
   162f4:	mov	r0, #1
   162f8:	add	r1, pc, r1
   162fc:	bl	1503c <__assert_fail@plt+0x33b4>
   16300:	mov	r0, #10
   16304:	b	160b0 <__assert_fail@plt+0x4428>
   16308:	bl	118e0 <__stack_chk_fail@plt>
   1630c:	muleq	r2, ip, r3
   16310:	andeq	r1, r2, ip, asr #30
   16314:			; <UNDEFINED> instruction: 0x000001b0
   16318:	andeq	r7, r0, pc, lsr #10
   1631c:	andeq	r3, r2, r8, ror #5
   16320:	muleq	r0, r4, r3
   16324:	andeq	r2, r0, r3, lsl #5
   16328:	andeq	r2, r2, r4, lsr #2
   1632c:	andeq	r3, r2, r8, lsr #4
   16330:	andeq	ip, r0, r4, lsr #15
   16334:	andeq	r3, r2, r4, asr #3
   16338:	muleq	r0, r4, r7
   1633c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   16340:	andeq	r3, r2, ip, lsr #1
   16344:	andeq	ip, r0, r8, ror #10
   16348:	andeq	r2, r2, r8, ror #31
   1634c:	andeq	ip, r0, ip, asr #8
   16350:	andeq	ip, r0, r0, ror r4
   16354:	andeq	ip, r0, r0, ror #7
   16358:	push	{r4, r5, r6, r7, r8, r9, lr}
   1635c:	sub	sp, sp, #324	; 0x144
   16360:	ldr	r8, [pc, #1744]	; 16a38 <__assert_fail@plt+0x4db0>
   16364:	ldr	r3, [r0, #4]
   16368:	add	r8, pc, r8
   1636c:	ldr	r7, [pc, #1736]	; 16a3c <__assert_fail@plt+0x4db4>
   16370:	ldr	r1, [r8]
   16374:	rsb	r3, r3, r3, lsl #3
   16378:	ldr	r2, [pc, #1728]	; 16a40 <__assert_fail@plt+0x4db8>
   1637c:	add	r3, r1, r3, lsl #2
   16380:	add	r7, pc, r7
   16384:	ldr	r1, [r3, #24]
   16388:	ldr	r6, [r7, r2]
   1638c:	ldr	r2, [r1, #12]
   16390:	ldr	r3, [r6]
   16394:	cmp	r2, r0
   16398:	str	r3, [sp, #316]	; 0x13c
   1639c:	bne	16a10 <__assert_fail@plt+0x4d88>
   163a0:	ldr	r1, [pc, #1692]	; 16a44 <__assert_fail@plt+0x4dbc>
   163a4:	mov	r4, r0
   163a8:	mov	r2, r0
   163ac:	add	r1, pc, r1
   163b0:	mov	r0, #4
   163b4:	bl	1503c <__assert_fail@plt+0x33b4>
   163b8:	mov	r0, r4
   163bc:	bl	153b8 <__assert_fail@plt+0x3730>
   163c0:	ldrb	r5, [r4, #8]
   163c4:	ands	r5, r5, #2
   163c8:	bne	165a8 <__assert_fail@plt+0x4920>
   163cc:	ldr	r2, [r8, #4]
   163d0:	ldr	r3, [pc, #1648]	; 16a48 <__assert_fail@plt+0x4dc0>
   163d4:	cmp	r2, r3
   163d8:	ble	164c4 <__assert_fail@plt+0x483c>
   163dc:	ldr	r3, [pc, #1640]	; 16a4c <__assert_fail@plt+0x4dc4>
   163e0:	ldr	r3, [r7, r3]
   163e4:	ldr	r3, [r3]
   163e8:	cmp	r3, #254	; 0xfe
   163ec:	bgt	1697c <__assert_fail@plt+0x4cf4>
   163f0:	ldr	r2, [pc, #1624]	; 16a50 <__assert_fail@plt+0x4dc8>
   163f4:	ldr	r3, [r4, #4]
   163f8:	add	r2, pc, r2
   163fc:	ldrb	r1, [r4, #8]
   16400:	ldr	r2, [r2]
   16404:	rsb	r3, r3, r3, lsl #3
   16408:	orr	r1, r1, #2
   1640c:	add	r3, r2, r3, lsl #2
   16410:	strb	r1, [r4, #8]
   16414:	ldr	r8, [r3, #24]
   16418:	ldr	r0, [r4]
   1641c:	cmp	r8, #0
   16420:	beq	169b0 <__assert_fail@plt+0x4d28>
   16424:	mov	r5, #0
   16428:	add	r7, sp, #188	; 0xbc
   1642c:	ldr	r3, [r8]
   16430:	sub	r3, r3, #1
   16434:	str	r3, [r8]
   16438:	bl	153b8 <__assert_fail@plt+0x3730>
   1643c:	ldr	r1, [pc, #1552]	; 16a54 <__assert_fail@plt+0x4dcc>
   16440:	mov	r2, r5
   16444:	add	r1, pc, r1
   16448:	mov	r0, #4
   1644c:	bl	1503c <__assert_fail@plt+0x33b4>
   16450:	cmp	r5, #0
   16454:	blt	1698c <__assert_fail@plt+0x4d04>
   16458:	ldr	r3, [pc, #1528]	; 16a58 <__assert_fail@plt+0x4dd0>
   1645c:	ldr	r2, [pc, #1508]	; 16a48 <__assert_fail@plt+0x4dc0>
   16460:	add	r3, pc, r3
   16464:	ldr	r3, [r3, #4]
   16468:	cmp	r3, r2
   1646c:	bgt	16660 <__assert_fail@plt+0x49d8>
   16470:	ldr	r0, [r4, #36]	; 0x24
   16474:	cmp	r0, #0
   16478:	bne	166b8 <__assert_fail@plt+0x4a30>
   1647c:	ldrb	r3, [r4, #44]	; 0x2c
   16480:	tst	r3, #127	; 0x7f
   16484:	beq	16494 <__assert_fail@plt+0x480c>
   16488:	ldr	r3, [r4, #40]	; 0x28
   1648c:	tst	r3, #131072	; 0x20000
   16490:	bne	166b8 <__assert_fail@plt+0x4a30>
   16494:	ldr	r0, [r4, #20]
   16498:	sub	r5, r5, #36	; 0x24
   1649c:	cmp	r0, #0
   164a0:	beq	164b0 <__assert_fail@plt+0x4828>
   164a4:	mov	r2, r5
   164a8:	add	r1, r4, #60	; 0x3c
   164ac:	bl	11880 <memcpy@plt>
   164b0:	ldr	r8, [r4, #16]
   164b4:	cmp	r8, #0
   164b8:	strne	r5, [r8]
   164bc:	movne	r8, #0
   164c0:	b	165b8 <__assert_fail@plt+0x4930>
   164c4:	add	r3, sp, #56	; 0x38
   164c8:	add	r2, sp, #184	; 0xb8
   164cc:	str	r5, [r3, #4]!
   164d0:	cmp	r2, r3
   164d4:	bne	164cc <__assert_fail@plt+0x4844>
   164d8:	ldr	r0, [r4, #4]
   164dc:	bl	11928 <__fdelt_chk@plt>
   164e0:	ldr	ip, [r4, #4]
   164e4:	add	r7, sp, #320	; 0x140
   164e8:	rsbs	r3, ip, #0
   164ec:	and	r3, r3, #31
   164f0:	mov	r8, #1
   164f4:	and	lr, ip, #31
   164f8:	str	r5, [sp]
   164fc:	rsbpl	lr, r3, #0
   16500:	mov	r3, #0
   16504:	mov	r2, r3
   16508:	add	r1, sp, #60	; 0x3c
   1650c:	add	r7, r7, r0, lsl #2
   16510:	add	r0, ip, r8
   16514:	ldr	ip, [r7, #-260]	; 0xfffffefc
   16518:	orr	ip, ip, r8, lsl lr
   1651c:	str	ip, [r7, #-260]	; 0xfffffefc
   16520:	bl	118bc <select@plt>
   16524:	ldr	r3, [pc, #1328]	; 16a5c <__assert_fail@plt+0x4dd4>
   16528:	add	r3, pc, r3
   1652c:	ldr	r2, [r3]
   16530:	cmp	r2, #0
   16534:	bne	16964 <__assert_fail@plt+0x4cdc>
   16538:	ldr	r8, [pc, #1312]	; 16a60 <__assert_fail@plt+0x4dd8>
   1653c:	add	r7, sp, #188	; 0xbc
   16540:	add	r8, pc, r8
   16544:	add	r1, r8, #8
   16548:	mov	r2, r7
   1654c:	mov	r0, #0
   16550:	bl	11844 <sigprocmask@plt>
   16554:	ldr	r2, [r4, #28]
   16558:	add	r1, r4, #24
   1655c:	ldr	r0, [r4, #4]
   16560:	bl	1182c <read@plt>
   16564:	ldrb	r3, [r4, #8]
   16568:	mov	r2, #0
   1656c:	mov	r1, r7
   16570:	orr	r3, r3, #2
   16574:	strb	r3, [r4, #8]
   16578:	mov	r5, r0
   1657c:	mov	r0, #2
   16580:	bl	11844 <sigprocmask@plt>
   16584:	ldr	r3, [r4, #4]
   16588:	ldr	r2, [r8]
   1658c:	ldr	r0, [r4]
   16590:	rsb	r3, r3, r3, lsl #3
   16594:	add	r3, r2, r3, lsl #2
   16598:	ldr	r8, [r3, #24]
   1659c:	cmp	r8, #0
   165a0:	bne	1642c <__assert_fail@plt+0x47a4>
   165a4:	b	16438 <__assert_fail@plt+0x47b0>
   165a8:	ldr	r0, [r4]
   165ac:	bl	153b8 <__assert_fail@plt+0x3730>
   165b0:	ldr	r8, [r4, #12]
   165b4:	add	r7, sp, #188	; 0xbc
   165b8:	ldr	r3, [pc, #1188]	; 16a64 <__assert_fail@plt+0x4ddc>
   165bc:	add	r3, pc, r3
   165c0:	ldr	r2, [r3]
   165c4:	cmp	r2, #0
   165c8:	bne	16644 <__assert_fail@plt+0x49bc>
   165cc:	ldr	r5, [pc, #1172]	; 16a68 <__assert_fail@plt+0x4de0>
   165d0:	mov	r2, r7
   165d4:	add	r5, pc, r5
   165d8:	add	r1, r5, #8
   165dc:	mov	r0, #0
   165e0:	bl	11844 <sigprocmask@plt>
   165e4:	ldr	r3, [r4, #4]
   165e8:	ldr	r2, [r5]
   165ec:	mov	r1, r7
   165f0:	rsb	r3, r3, r3, lsl #3
   165f4:	mov	r0, #2
   165f8:	add	r3, r2, r3, lsl #2
   165fc:	ldr	r3, [r3, #24]
   16600:	ldr	r2, [r3, #12]
   16604:	ldr	r2, [r2]
   16608:	cmp	r2, #0
   1660c:	streq	r2, [r3, #16]
   16610:	str	r2, [r3, #12]
   16614:	ldr	r2, [r3, #20]
   16618:	str	r2, [r4]
   1661c:	mov	r2, #0
   16620:	str	r4, [r3, #20]
   16624:	bl	11844 <sigprocmask@plt>
   16628:	ldr	r2, [sp, #316]	; 0x13c
   1662c:	ldr	r3, [r6]
   16630:	mov	r0, r8
   16634:	cmp	r2, r3
   16638:	bne	16a34 <__assert_fail@plt+0x4dac>
   1663c:	add	sp, sp, #324	; 0x144
   16640:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16644:	ldr	r0, [pc, #1056]	; 16a6c <__assert_fail@plt+0x4de4>
   16648:	mov	r2, #0
   1664c:	add	r0, pc, r0
   16650:	add	r0, r0, #8
   16654:	str	r2, [r3]
   16658:	bl	11ac0 <sigfillset@plt>
   1665c:	b	165cc <__assert_fail@plt+0x4944>
   16660:	ldr	r3, [r4, #84]	; 0x54
   16664:	tst	r3, #1
   16668:	bne	16818 <__assert_fail@plt+0x4b90>
   1666c:	ldrb	r3, [r4, #71]	; 0x47
   16670:	cmp	r3, #0
   16674:	beq	16684 <__assert_fail@plt+0x49fc>
   16678:	ldrb	r3, [r4, #88]	; 0x58
   1667c:	tst	r3, #127	; 0x7f
   16680:	bne	1680c <__assert_fail@plt+0x4b84>
   16684:	mov	r8, #0
   16688:	ldr	r2, [r4, #76]	; 0x4c
   1668c:	cmp	r2, #0
   16690:	beq	165b8 <__assert_fail@plt+0x4930>
   16694:	ldr	r1, [pc, #980]	; 16a70 <__assert_fail@plt+0x4de8>
   16698:	mov	r0, #1
   1669c:	add	r1, pc, r1
   166a0:	bl	1503c <__assert_fail@plt+0x33b4>
   166a4:	ldr	r1, [pc, #968]	; 16a74 <__assert_fail@plt+0x4dec>
   166a8:	mov	r0, #1
   166ac:	add	r1, pc, r1
   166b0:	bl	1503c <__assert_fail@plt+0x33b4>
   166b4:	b	165b8 <__assert_fail@plt+0x4930>
   166b8:	ldr	r3, [pc, #952]	; 16a78 <__assert_fail@plt+0x4df0>
   166bc:	ldr	r2, [r4, #4]
   166c0:	add	r3, pc, r3
   166c4:	rsb	r2, r2, r2, lsl #3
   166c8:	ldr	r3, [r3]
   166cc:	add	r3, r3, r2, lsl #2
   166d0:	ldrd	r8, [r3, #16]
   166d4:	bl	11a18 <strerror@plt>
   166d8:	ldr	r1, [pc, #924]	; 16a7c <__assert_fail@plt+0x4df4>
   166dc:	add	r1, pc, r1
   166e0:	mov	r2, r0
   166e4:	mov	r0, #1
   166e8:	bl	1503c <__assert_fail@plt+0x33b4>
   166ec:	ldrb	r1, [r4, #47]	; 0x2f
   166f0:	ldrb	r0, [r4, #46]	; 0x2e
   166f4:	ldrb	lr, [r4, #59]	; 0x3b
   166f8:	ldrb	r3, [r4, #58]	; 0x3a
   166fc:	ldrb	r2, [r4, #57]	; 0x39
   16700:	str	r1, [sp, #4]
   16704:	ldrb	r1, [r4, #56]	; 0x38
   16708:	str	r0, [sp]
   1670c:	ldrb	r0, [r4, #55]	; 0x37
   16710:	ldrb	ip, [r4, #54]	; 0x36
   16714:	str	lr, [sp, #52]	; 0x34
   16718:	ldrb	lr, [r4, #53]	; 0x35
   1671c:	str	r3, [sp, #48]	; 0x30
   16720:	ldrb	r3, [r4, #52]	; 0x34
   16724:	str	r2, [sp, #44]	; 0x2c
   16728:	ldrb	r2, [r4, #51]	; 0x33
   1672c:	str	r1, [sp, #40]	; 0x28
   16730:	ldrb	r1, [r4, #50]	; 0x32
   16734:	str	r0, [sp, #36]	; 0x24
   16738:	ldrb	r0, [r4, #49]	; 0x31
   1673c:	str	ip, [sp, #32]
   16740:	ldrb	ip, [r4, #48]	; 0x30
   16744:	str	lr, [sp, #28]
   16748:	str	r3, [sp, #24]
   1674c:	ldrb	r3, [r4, #45]	; 0x2d
   16750:	str	r2, [sp, #20]
   16754:	ldrb	r2, [r4, #44]	; 0x2c
   16758:	str	r1, [sp, #16]
   1675c:	ldr	r1, [pc, #796]	; 16a80 <__assert_fail@plt+0x4df8>
   16760:	str	r0, [sp, #12]
   16764:	add	r1, pc, r1
   16768:	mov	r0, #10
   1676c:	str	ip, [sp, #8]
   16770:	bl	1503c <__assert_fail@plt+0x33b4>
   16774:	ldr	r0, [r4, #40]	; 0x28
   16778:	ldrh	r3, [r4, #40]	; 0x28
   1677c:	ldrb	r2, [r4, #40]	; 0x28
   16780:	lsr	r0, r0, #14
   16784:	ldr	r1, [pc, #760]	; 16a84 <__assert_fail@plt+0x4dfc>
   16788:	lsr	r3, r3, #6
   1678c:	uxtb	r0, r0
   16790:	lsr	r2, r2, #1
   16794:	str	r0, [sp]
   16798:	uxtb	r3, r3
   1679c:	and	r2, r2, #31
   167a0:	add	r1, pc, r1
   167a4:	mov	r0, #10
   167a8:	bl	1503c <__assert_fail@plt+0x33b4>
   167ac:	ldrh	r3, [r4, #40]	; 0x28
   167b0:	and	r2, r3, #16320	; 0x3fc0
   167b4:	and	r3, r3, #16192	; 0x3f40
   167b8:	cmp	r3, #64	; 0x40
   167bc:	cmpne	r2, #128	; 0x80
   167c0:	beq	1695c <__assert_fail@plt+0x4cd4>
   167c4:	ldr	r3, [r4, #40]	; 0x28
   167c8:	and	r3, r3, #4177920	; 0x3fc000
   167cc:	cmp	r3, #16384	; 0x4000
   167d0:	beq	1695c <__assert_fail@plt+0x4cd4>
   167d4:	ldrb	r3, [r4, #40]	; 0x28
   167d8:	and	r3, r3, #62	; 0x3e
   167dc:	cmp	r3, #8
   167e0:	beq	1695c <__assert_fail@plt+0x4cd4>
   167e4:	cmp	r8, #0
   167e8:	moveq	r8, #9
   167ec:	beq	165b8 <__assert_fail@plt+0x4930>
   167f0:	mov	r2, r9
   167f4:	add	r1, r4, #44	; 0x2c
   167f8:	ldr	r0, [r4, #4]
   167fc:	blx	r8
   16800:	subs	r8, r0, #0
   16804:	beq	16494 <__assert_fail@plt+0x480c>
   16808:	b	165b8 <__assert_fail@plt+0x4930>
   1680c:	ldrh	r3, [r4, #74]	; 0x4a
   16810:	tst	r3, #8
   16814:	beq	16684 <__assert_fail@plt+0x49fc>
   16818:	ldr	r3, [pc, #616]	; 16a88 <__assert_fail@plt+0x4e00>
   1681c:	ldr	r2, [r4, #4]
   16820:	add	r3, pc, r3
   16824:	rsb	r2, r2, r2, lsl #3
   16828:	ldr	r3, [r3]
   1682c:	add	r3, r3, r2, lsl #2
   16830:	ldr	r5, [r3, #16]
   16834:	ldr	r8, [r3, #20]
   16838:	bl	11acc <__errno_location@plt>
   1683c:	ldr	r0, [r0]
   16840:	bl	11a18 <strerror@plt>
   16844:	ldr	r1, [pc, #576]	; 16a8c <__assert_fail@plt+0x4e04>
   16848:	add	r1, pc, r1
   1684c:	mov	r2, r0
   16850:	mov	r0, #1
   16854:	bl	1503c <__assert_fail@plt+0x33b4>
   16858:	ldrb	r1, [r4, #91]	; 0x5b
   1685c:	ldrb	r0, [r4, #90]	; 0x5a
   16860:	ldrb	lr, [r4, #103]	; 0x67
   16864:	ldrb	r3, [r4, #102]	; 0x66
   16868:	ldrb	r2, [r4, #101]	; 0x65
   1686c:	str	r1, [sp, #4]
   16870:	ldrb	r1, [r4, #100]	; 0x64
   16874:	str	r0, [sp]
   16878:	ldrb	r0, [r4, #99]	; 0x63
   1687c:	ldrb	ip, [r4, #98]	; 0x62
   16880:	str	lr, [sp, #52]	; 0x34
   16884:	ldrb	lr, [r4, #97]	; 0x61
   16888:	str	r3, [sp, #48]	; 0x30
   1688c:	ldrb	r3, [r4, #96]	; 0x60
   16890:	str	r2, [sp, #44]	; 0x2c
   16894:	ldrb	r2, [r4, #95]	; 0x5f
   16898:	str	r1, [sp, #40]	; 0x28
   1689c:	ldrb	r1, [r4, #94]	; 0x5e
   168a0:	str	r0, [sp, #36]	; 0x24
   168a4:	ldrb	r0, [r4, #93]	; 0x5d
   168a8:	str	ip, [sp, #32]
   168ac:	ldrb	ip, [r4, #92]	; 0x5c
   168b0:	str	lr, [sp, #28]
   168b4:	str	r3, [sp, #24]
   168b8:	ldrb	r3, [r4, #89]	; 0x59
   168bc:	str	r2, [sp, #20]
   168c0:	ldrb	r2, [r4, #88]	; 0x58
   168c4:	str	r1, [sp, #16]
   168c8:	ldr	r1, [pc, #448]	; 16a90 <__assert_fail@plt+0x4e08>
   168cc:	str	r0, [sp, #12]
   168d0:	add	r1, pc, r1
   168d4:	mov	r0, #10
   168d8:	str	ip, [sp, #8]
   168dc:	bl	1503c <__assert_fail@plt+0x33b4>
   168e0:	ldrh	r1, [r4, #74]	; 0x4a
   168e4:	ldrh	r3, [r4, #72]	; 0x48
   168e8:	ldrb	r2, [r4, #68]	; 0x44
   168ec:	str	r1, [sp]
   168f0:	ldr	r1, [pc, #412]	; 16a94 <__assert_fail@plt+0x4e0c>
   168f4:	mov	r0, #10
   168f8:	add	r1, pc, r1
   168fc:	bl	1503c <__assert_fail@plt+0x33b4>
   16900:	ldrh	r3, [r4, #72]	; 0x48
   16904:	sub	r2, r3, #1
   16908:	cmp	r2, #2
   1690c:	bls	16954 <__assert_fail@plt+0x4ccc>
   16910:	ldrh	r2, [r4, #74]	; 0x4a
   16914:	cmp	r2, #1
   16918:	beq	16954 <__assert_fail@plt+0x4ccc>
   1691c:	ldrb	r1, [r4, #69]	; 0x45
   16920:	cmp	r1, #4
   16924:	beq	16954 <__assert_fail@plt+0x4ccc>
   16928:	cmp	r5, #0
   1692c:	beq	169d4 <__assert_fail@plt+0x4d4c>
   16930:	ldrb	r1, [r4, #71]	; 0x47
   16934:	cmp	r1, #0
   16938:	beq	169d4 <__assert_fail@plt+0x4d4c>
   1693c:	mov	r2, r8
   16940:	add	r1, r4, #88	; 0x58
   16944:	ldr	r0, [r4, #4]
   16948:	blx	r5
   1694c:	mov	r8, r0
   16950:	b	16688 <__assert_fail@plt+0x4a00>
   16954:	mov	r8, #3
   16958:	b	16688 <__assert_fail@plt+0x4a00>
   1695c:	mov	r8, #3
   16960:	b	165b8 <__assert_fail@plt+0x4930>
   16964:	ldr	r0, [pc, #300]	; 16a98 <__assert_fail@plt+0x4e10>
   16968:	str	r5, [r3]
   1696c:	add	r0, pc, r0
   16970:	add	r0, r0, #8
   16974:	bl	11ac0 <sigfillset@plt>
   16978:	b	16538 <__assert_fail@plt+0x48b0>
   1697c:	ldr	r0, [pc, #280]	; 16a9c <__assert_fail@plt+0x4e14>
   16980:	add	r0, pc, r0
   16984:	bl	11a24 <system@plt>
   16988:	b	163f0 <__assert_fail@plt+0x4768>
   1698c:	bl	11acc <__errno_location@plt>
   16990:	ldr	r1, [pc, #264]	; 16aa0 <__assert_fail@plt+0x4e18>
   16994:	mov	r2, r5
   16998:	add	r1, pc, r1
   1699c:	mov	r8, #9
   169a0:	ldr	r3, [r0]
   169a4:	mov	r0, #1
   169a8:	bl	1503c <__assert_fail@plt+0x33b4>
   169ac:	b	165b8 <__assert_fail@plt+0x4930>
   169b0:	bl	153b8 <__assert_fail@plt+0x3730>
   169b4:	ldr	r1, [pc, #232]	; 16aa4 <__assert_fail@plt+0x4e1c>
   169b8:	mov	r2, r8
   169bc:	add	r1, pc, r1
   169c0:	mov	r0, #4
   169c4:	mov	r5, r8
   169c8:	bl	1503c <__assert_fail@plt+0x33b4>
   169cc:	add	r7, sp, #188	; 0xbc
   169d0:	b	16458 <__assert_fail@plt+0x47d0>
   169d4:	ldrb	r1, [r4, #68]	; 0x44
   169d8:	tst	r1, #42	; 0x2a
   169dc:	moveq	r1, #1
   169e0:	movne	r1, #0
   169e4:	cmp	r3, #0
   169e8:	moveq	r3, r1
   169ec:	movne	r3, #0
   169f0:	cmp	r3, #0
   169f4:	bne	16a00 <__assert_fail@plt+0x4d78>
   169f8:	mov	r8, #9
   169fc:	b	16688 <__assert_fail@plt+0x4a00>
   16a00:	bic	r2, r2, #8
   16a04:	cmp	r2, #0
   16a08:	beq	16684 <__assert_fail@plt+0x49fc>
   16a0c:	b	169f8 <__assert_fail@plt+0x4d70>
   16a10:	ldr	r3, [pc, #144]	; 16aa8 <__assert_fail@plt+0x4e20>
   16a14:	ldr	r1, [pc, #144]	; 16aac <__assert_fail@plt+0x4e24>
   16a18:	ldr	r0, [pc, #144]	; 16ab0 <__assert_fail@plt+0x4e28>
   16a1c:	add	r3, pc, r3
   16a20:	ldr	r2, [pc, #140]	; 16ab4 <__assert_fail@plt+0x4e2c>
   16a24:	add	r3, r3, #36	; 0x24
   16a28:	add	r1, pc, r1
   16a2c:	add	r0, pc, r0
   16a30:	bl	11c88 <__assert_fail@plt>
   16a34:	bl	118e0 <__stack_chk_fail@plt>
   16a38:	andeq	r2, r2, r8, ror #29
   16a3c:	andeq	r1, r2, r4, lsr #21
   16a40:			; <UNDEFINED> instruction: 0x000001b0
   16a44:	andeq	ip, r0, r8, ror #9
   16a48:	andeq	r7, r0, pc, lsr #10
   16a4c:	andeq	r0, r0, ip, asr #3
   16a50:	andeq	r2, r2, r8, asr lr
   16a54:	andeq	ip, r0, r8, ror r4
   16a58:	strdeq	r2, [r2], -r0
   16a5c:	andeq	r1, r2, r8, lsl #24
   16a60:	andeq	r2, r2, r0, lsl sp
   16a64:	andeq	r1, r2, r4, ror fp
   16a68:	andeq	r2, r2, ip, ror ip
   16a6c:	andeq	r2, r2, r4, lsl #24
   16a70:	andeq	ip, r0, r8, lsl #7
   16a74:	andeq	ip, r0, ip, lsr #7
   16a78:	muleq	r2, r0, fp
   16a7c:	andeq	ip, r0, ip, lsr r2
   16a80:	andeq	ip, r0, r8, ror #3
   16a84:	andeq	ip, r0, ip, lsl #4
   16a88:	andeq	r2, r2, r0, lsr sl
   16a8c:	ldrdeq	ip, [r0], -r0
   16a90:	andeq	ip, r0, ip, ror r0
   16a94:	strdeq	ip, [r0], -r0
   16a98:	andeq	r2, r2, r4, ror #17
   16a9c:	andeq	fp, r0, ip, ror #21
   16aa0:	andeq	fp, r0, ip, asr #30
   16aa4:	andeq	fp, r0, r0, lsl #30
   16aa8:	andeq	fp, r0, r0, asr r9
   16aac:	muleq	r0, r8, ip
   16ab0:	andeq	fp, r0, r0, lsr lr
   16ab4:			; <UNDEFINED> instruction: 0x000008b6
   16ab8:	ldr	ip, [pc, #104]	; 16b28 <__assert_fail@plt+0x4ea0>
   16abc:	push	{r4, r5, lr}
   16ac0:	add	ip, pc, ip
   16ac4:	ldr	lr, [pc, #96]	; 16b2c <__assert_fail@plt+0x4ea4>
   16ac8:	sub	sp, sp, #28
   16acc:	ldr	r4, [ip, lr]
   16ad0:	ldr	r5, [sp, #40]	; 0x28
   16ad4:	ldr	ip, [sp, #44]	; 0x2c
   16ad8:	str	r5, [sp]
   16adc:	ldr	lr, [r4]
   16ae0:	str	ip, [sp, #4]
   16ae4:	ldr	ip, [sp, #48]	; 0x30
   16ae8:	str	lr, [sp, #20]
   16aec:	str	ip, [sp, #8]
   16af0:	add	ip, sp, #16
   16af4:	str	ip, [sp, #12]
   16af8:	bl	15eac <__assert_fail@plt+0x4224>
   16afc:	cmp	r0, #0
   16b00:	bne	16b0c <__assert_fail@plt+0x4e84>
   16b04:	ldr	r0, [sp, #16]
   16b08:	bl	16358 <__assert_fail@plt+0x46d0>
   16b0c:	ldr	r2, [sp, #20]
   16b10:	ldr	r3, [r4]
   16b14:	cmp	r2, r3
   16b18:	bne	16b24 <__assert_fail@plt+0x4e9c>
   16b1c:	add	sp, sp, #28
   16b20:	pop	{r4, r5, pc}
   16b24:	bl	118e0 <__stack_chk_fail@plt>
   16b28:	andeq	r1, r2, r4, ror #6
   16b2c:			; <UNDEFINED> instruction: 0x000001b0
   16b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b34:	sub	sp, sp, #4864	; 0x1300
   16b38:	ldr	ip, [pc, #3216]	; 177d0 <__assert_fail@plt+0x5b48>
   16b3c:	ldr	r6, [pc, #3216]	; 177d4 <__assert_fail@plt+0x5b4c>
   16b40:	sub	sp, sp, #36	; 0x24
   16b44:	ldr	lr, [pc, #3212]	; 177d8 <__assert_fail@plt+0x5b50>
   16b48:	add	ip, pc, ip
   16b4c:	add	r6, pc, r6
   16b50:	str	r0, [sp, #60]	; 0x3c
   16b54:	add	r0, r6, #16
   16b58:	ldr	r4, [ip, lr]
   16b5c:	mov	sl, r2
   16b60:	str	r1, [sp, #64]	; 0x40
   16b64:	str	r2, [sp, #84]	; 0x54
   16b68:	ldm	r0, {r0, r1, r2}
   16b6c:	add	r7, sp, #4864	; 0x1300
   16b70:	ldr	lr, [pc, #3172]	; 177dc <__assert_fail@plt+0x5b54>
   16b74:	add	fp, sp, #800	; 0x320
   16b78:	ldr	r5, [r4]
   16b7c:	str	r4, [sp, #96]	; 0x60
   16b80:	add	r7, r7, #28
   16b84:	sub	r4, fp, #656	; 0x290
   16b88:	str	r5, [r7]
   16b8c:	stm	r4, {r0, r1, r2}
   16b90:	mov	r9, r3
   16b94:	str	r3, [sp, #100]	; 0x64
   16b98:	ldr	r5, [ip, lr]
   16b9c:	add	ip, sp, #4928	; 0x1340
   16ba0:	ldr	r4, [pc, #3128]	; 177e0 <__assert_fail@plt+0x5b58>
   16ba4:	add	ip, ip, #20
   16ba8:	add	r4, pc, r4
   16bac:	ldr	ip, [ip]
   16bb0:	mov	r1, r5
   16bb4:	mov	r0, r4
   16bb8:	str	ip, [sp, #112]	; 0x70
   16bbc:	bl	1f554 <__assert_fail@plt+0xd8cc>
   16bc0:	add	ip, sp, #4928	; 0x1340
   16bc4:	add	ip, ip, #16
   16bc8:	ldr	r7, [pc, #3092]	; 177e4 <__assert_fail@plt+0x5b5c>
   16bcc:	ldr	ip, [ip]
   16bd0:	ldr	r2, [sp, #64]	; 0x40
   16bd4:	str	ip, [sp, #20]
   16bd8:	add	ip, sp, #4928	; 0x1340
   16bdc:	add	ip, ip, #12
   16be0:	ldr	r8, [pc, #3072]	; 177e8 <__assert_fail@plt+0x5b60>
   16be4:	ldr	ip, [ip]
   16be8:	ldr	r1, [pc, #3068]	; 177ec <__assert_fail@plt+0x5b64>
   16bec:	str	ip, [sp, #16]
   16bf0:	add	ip, sp, #4928	; 0x1340
   16bf4:	add	ip, ip, #8
   16bf8:	add	r7, pc, r7
   16bfc:	ldr	ip, [ip]
   16c00:	ldr	r3, [sp, #60]	; 0x3c
   16c04:	str	ip, [sp, #12]
   16c08:	str	r2, [sp]
   16c0c:	add	r1, pc, r1
   16c10:	mov	r2, r7
   16c14:	mov	r0, #2
   16c18:	add	r8, pc, r8
   16c1c:	str	r9, [sp, #8]
   16c20:	str	sl, [sp, #4]
   16c24:	bl	1503c <__assert_fail@plt+0x33b4>
   16c28:	mov	r0, r8
   16c2c:	bl	119d0 <opendir@plt>
   16c30:	subs	r3, r0, #0
   16c34:	str	r3, [sp, #36]	; 0x24
   16c38:	beq	172b0 <__assert_fail@plt+0x5628>
   16c3c:	ldr	r0, [sp, #60]	; 0x3c
   16c40:	cmp	r0, #0
   16c44:	beq	1725c <__assert_fail@plt+0x55d4>
   16c48:	bl	11aa8 <strlen@plt>
   16c4c:	str	r0, [sp, #104]	; 0x68
   16c50:	ldr	r0, [sp, #64]	; 0x40
   16c54:	cmp	r0, #0
   16c58:	beq	17250 <__assert_fail@plt+0x55c8>
   16c5c:	bl	11aa8 <strlen@plt>
   16c60:	str	r0, [sp, #108]	; 0x6c
   16c64:	ldr	r0, [sp, #84]	; 0x54
   16c68:	cmp	r0, #0
   16c6c:	beq	17244 <__assert_fail@plt+0x55bc>
   16c70:	bl	11aa8 <strlen@plt>
   16c74:	str	r0, [sp, #116]	; 0x74
   16c78:	mvn	r3, #0
   16c7c:	str	r3, [sp, #76]	; 0x4c
   16c80:	str	r3, [sp, #56]	; 0x38
   16c84:	add	r3, sp, #172	; 0xac
   16c88:	str	r3, [sp, #80]	; 0x50
   16c8c:	add	r3, sp, #160	; 0xa0
   16c90:	str	r3, [sp, #52]	; 0x34
   16c94:	add	r8, sp, #272	; 0x110
   16c98:	add	r3, sp, #136	; 0x88
   16c9c:	str	r3, [sp, #40]	; 0x28
   16ca0:	mov	sl, r8
   16ca4:	add	r3, sp, #288	; 0x120
   16ca8:	add	r2, sp, #224	; 0xe0
   16cac:	str	r3, [sp, #44]	; 0x2c
   16cb0:	add	r3, sp, #140	; 0x8c
   16cb4:	str	r2, [sp, #88]	; 0x58
   16cb8:	str	r3, [sp, #48]	; 0x30
   16cbc:	ldr	r2, [sp, #40]	; 0x28
   16cc0:	mov	r1, sl
   16cc4:	ldr	r0, [sp, #36]	; 0x24
   16cc8:	bl	11be0 <readdir_r@plt>
   16ccc:	subs	r4, r0, #0
   16cd0:	bne	170c4 <__assert_fail@plt+0x543c>
   16cd4:	ldr	r3, [fp, #-664]	; 0xfffffd68
   16cd8:	cmp	r3, #0
   16cdc:	beq	170f4 <__assert_fail@plt+0x546c>
   16ce0:	ldrb	r3, [fp, #-517]	; 0xfffffdfb
   16ce4:	cmp	r3, #46	; 0x2e
   16ce8:	beq	16cbc <__assert_fail@plt+0x5034>
   16cec:	bl	11acc <__errno_location@plt>
   16cf0:	ldr	r3, [sp, #52]	; 0x34
   16cf4:	mov	r9, r4
   16cf8:	sub	r7, r3, #4
   16cfc:	ldr	r3, [sp, #44]	; 0x2c
   16d00:	mov	r8, r4
   16d04:	sub	r6, r3, #5
   16d08:	mov	r5, r0
   16d0c:	str	r8, [r5]
   16d10:	mov	r2, #10
   16d14:	ldr	r1, [sp, #48]	; 0x30
   16d18:	mov	r0, r6
   16d1c:	bl	117fc <strtol@plt>
   16d20:	ldr	r3, [r5]
   16d24:	cmp	r3, #34	; 0x22
   16d28:	beq	17084 <__assert_fail@plt+0x53fc>
   16d2c:	cmp	r3, #0
   16d30:	bne	17090 <__assert_fail@plt+0x5408>
   16d34:	ldr	r3, [fp, #-660]	; 0xfffffd6c
   16d38:	cmp	r3, r6
   16d3c:	beq	171e8 <__assert_fail@plt+0x5560>
   16d40:	ldrb	r2, [r3]
   16d44:	cmp	r2, #0
   16d48:	cmpne	r2, #58	; 0x3a
   16d4c:	bne	17124 <__assert_fail@plt+0x549c>
   16d50:	add	r9, r9, #1
   16d54:	cmp	r9, #4
   16d58:	str	r0, [r7], #4
   16d5c:	add	r6, r3, #1
   16d60:	bne	16d0c <__assert_fail@plt+0x5084>
   16d64:	ldr	r3, [fp, #-644]	; 0xfffffd7c
   16d68:	ldr	r2, [sp, #56]	; 0x38
   16d6c:	str	r3, [sp, #72]	; 0x48
   16d70:	cmp	r3, r2
   16d74:	ldr	r6, [sp, #80]	; 0x50
   16d78:	ldrne	r3, [sp, #76]	; 0x4c
   16d7c:	add	r8, sp, #796	; 0x31c
   16d80:	addne	r3, r3, #1
   16d84:	strne	r3, [sp, #76]	; 0x4c
   16d88:	ldr	r3, [pc, #2656]	; 177f0 <__assert_fail@plt+0x5b68>
   16d8c:	str	r5, [sp, #92]	; 0x5c
   16d90:	add	r3, pc, r3
   16d94:	str	r3, [sp, #56]	; 0x38
   16d98:	ldr	r3, [pc, #2644]	; 177f4 <__assert_fail@plt+0x5b6c>
   16d9c:	add	r3, pc, r3
   16da0:	str	r3, [sp, #68]	; 0x44
   16da4:	ldr	r3, [sp, #52]	; 0x34
   16da8:	sub	r7, r3, #16
   16dac:	ldr	r2, [sp, #56]	; 0x38
   16db0:	ldr	r3, [sp, #44]	; 0x2c
   16db4:	ldr	r5, [r7], #4
   16db8:	str	r2, [sp, #4]
   16dbc:	ldr	r2, [sp, #68]	; 0x44
   16dc0:	sub	r9, r3, #5
   16dc4:	mov	r3, #4096	; 0x1000
   16dc8:	str	r2, [sp]
   16dcc:	mov	r1, r3
   16dd0:	str	r5, [sp, #12]
   16dd4:	str	r9, [sp, #8]
   16dd8:	mov	r2, #1
   16ddc:	mov	r0, r8
   16de0:	bl	11c7c <__snprintf_chk@plt>
   16de4:	ldr	r3, [pc, #2572]	; 177f8 <__assert_fail@plt+0x5b70>
   16de8:	cmp	r0, r3
   16dec:	bhi	1714c <__assert_fail@plt+0x54c4>
   16df0:	mov	r2, #33	; 0x21
   16df4:	mov	r1, #0
   16df8:	mov	r0, r6
   16dfc:	bl	11b08 <memset@plt>
   16e00:	ldr	r1, [pc, #2548]	; 177fc <__assert_fail@plt+0x5b74>
   16e04:	mov	r0, r8
   16e08:	add	r1, pc, r1
   16e0c:	bl	11814 <fopen@plt>
   16e10:	subs	r5, r0, #0
   16e14:	beq	1728c <__assert_fail@plt+0x5604>
   16e18:	mov	r3, r5
   16e1c:	mov	r2, #32
   16e20:	mov	r1, #1
   16e24:	mov	r0, r6
   16e28:	bl	119ac <fread@plt>
   16e2c:	subs	r9, r0, #0
   16e30:	ble	1720c <__assert_fail@plt+0x5584>
   16e34:	add	r3, r4, r4, lsl #5
   16e38:	sub	r9, r9, #1
   16e3c:	add	r3, fp, r3
   16e40:	add	r3, r3, r9
   16e44:	mov	r0, r5
   16e48:	ldrb	r2, [r3, #-628]	; 0xfffffd8c
   16e4c:	add	r4, r4, #1
   16e50:	add	r6, r6, #33	; 0x21
   16e54:	cmp	r2, #10
   16e58:	moveq	r2, #0
   16e5c:	strbeq	r2, [r3, #-628]	; 0xfffffd8c
   16e60:	bl	11b74 <fclose@plt>
   16e64:	cmp	r4, #3
   16e68:	bne	16dac <__assert_fail@plt+0x5124>
   16e6c:	ldr	r5, [sp, #92]	; 0x5c
   16e70:	mov	r3, #0
   16e74:	mov	r2, #10
   16e78:	str	r3, [r5]
   16e7c:	ldr	r3, [sp, #88]	; 0x58
   16e80:	ldr	r1, [sp, #48]	; 0x30
   16e84:	add	r0, r3, #14
   16e88:	bl	117fc <strtol@plt>
   16e8c:	mov	r3, r0
   16e90:	ldr	r0, [r5]
   16e94:	cmp	r0, #34	; 0x22
   16e98:	beq	1717c <__assert_fail@plt+0x54f4>
   16e9c:	cmp	r0, #0
   16ea0:	bne	17188 <__assert_fail@plt+0x5500>
   16ea4:	ldr	r1, [sp, #88]	; 0x58
   16ea8:	ldr	r2, [fp, #-660]	; 0xfffffd6c
   16eac:	add	r0, r1, #14
   16eb0:	cmp	r2, r0
   16eb4:	beq	17740 <__assert_fail@plt+0x5ab8>
   16eb8:	cmp	r3, #18
   16ebc:	bhi	17268 <__assert_fail@plt+0x55e0>
   16ec0:	ldr	r2, [pc, #2360]	; 17800 <__assert_fail@plt+0x5b78>
   16ec4:	add	r2, pc, r2
   16ec8:	add	r3, r2, r3, lsl #2
   16ecc:	mov	r2, #32
   16ed0:	ldr	r1, [r3, #32]
   16ed4:	bl	11b20 <strncpy@plt>
   16ed8:	ldr	r3, [sp, #60]	; 0x3c
   16edc:	cmp	r3, #0
   16ee0:	beq	16efc <__assert_fail@plt+0x5274>
   16ee4:	ldr	r2, [sp, #104]	; 0x68
   16ee8:	mov	r1, r3
   16eec:	ldr	r0, [sp, #80]	; 0x50
   16ef0:	bl	11c40 <strncmp@plt>
   16ef4:	cmp	r0, #0
   16ef8:	bne	171c4 <__assert_fail@plt+0x553c>
   16efc:	ldr	r3, [sp, #64]	; 0x40
   16f00:	cmp	r3, #0
   16f04:	beq	16f24 <__assert_fail@plt+0x529c>
   16f08:	mov	r1, r3
   16f0c:	ldr	r3, [sp, #88]	; 0x58
   16f10:	ldr	r2, [sp, #108]	; 0x6c
   16f14:	sub	r0, r3, #19
   16f18:	bl	11c40 <strncmp@plt>
   16f1c:	cmp	r0, #0
   16f20:	bne	171c4 <__assert_fail@plt+0x553c>
   16f24:	ldr	r3, [sp, #84]	; 0x54
   16f28:	cmp	r3, #0
   16f2c:	beq	16f4c <__assert_fail@plt+0x52c4>
   16f30:	mov	r1, r3
   16f34:	ldr	r3, [sp, #88]	; 0x58
   16f38:	ldr	r2, [sp, #116]	; 0x74
   16f3c:	add	r0, r3, #14
   16f40:	bl	11c40 <strncmp@plt>
   16f44:	cmp	r0, #0
   16f48:	bne	171c4 <__assert_fail@plt+0x553c>
   16f4c:	ldr	r3, [sp, #72]	; 0x48
   16f50:	ldr	r2, [sp, #100]	; 0x64
   16f54:	cmn	r2, #1
   16f58:	cmpne	r3, r2
   16f5c:	bne	171c4 <__assert_fail@plt+0x553c>
   16f60:	add	r3, sp, #4928	; 0x1340
   16f64:	add	r3, r3, #8
   16f68:	ldr	r3, [r3]
   16f6c:	cmn	r3, #1
   16f70:	beq	16f8c <__assert_fail@plt+0x5304>
   16f74:	add	r2, sp, #4928	; 0x1340
   16f78:	add	r2, r2, #8
   16f7c:	ldr	r3, [fp, #-640]	; 0xfffffd80
   16f80:	ldr	r2, [r2]
   16f84:	cmp	r3, r2
   16f88:	bne	171c4 <__assert_fail@plt+0x553c>
   16f8c:	add	r3, sp, #4928	; 0x1340
   16f90:	add	r3, r3, #12
   16f94:	ldr	r3, [r3]
   16f98:	cmn	r3, #1
   16f9c:	beq	16fb8 <__assert_fail@plt+0x5330>
   16fa0:	add	r2, sp, #4928	; 0x1340
   16fa4:	add	r2, r2, #12
   16fa8:	ldr	r3, [fp, #-636]	; 0xfffffd84
   16fac:	ldr	r2, [r2]
   16fb0:	cmp	r3, r2
   16fb4:	bne	171c4 <__assert_fail@plt+0x553c>
   16fb8:	add	r3, sp, #4928	; 0x1340
   16fbc:	add	r3, r3, #16
   16fc0:	ldr	r4, [fp, #-632]	; 0xfffffd88
   16fc4:	ldr	r3, [r3]
   16fc8:	cmn	r3, #1
   16fcc:	beq	16fe4 <__assert_fail@plt+0x535c>
   16fd0:	add	r3, sp, #4928	; 0x1340
   16fd4:	add	r3, r3, #16
   16fd8:	ldr	r3, [r3]
   16fdc:	cmp	r3, r4
   16fe0:	bne	171c4 <__assert_fail@plt+0x553c>
   16fe4:	ldr	r3, [sp, #88]	; 0x58
   16fe8:	ldr	r5, [pc, #2068]	; 17804 <__assert_fail@plt+0x5b7c>
   16fec:	add	r1, r3, #14
   16ff0:	ldr	r7, [fp, #-640]	; 0xfffffd80
   16ff4:	ldr	r8, [fp, #-636]	; 0xfffffd84
   16ff8:	ldr	r9, [sp, #76]	; 0x4c
   16ffc:	ldr	r2, [sp, #72]	; 0x48
   17000:	str	r1, [sp, #4]
   17004:	ldr	r1, [pc, #2044]	; 17808 <__assert_fail@plt+0x5b80>
   17008:	sub	r3, r3, #19
   1700c:	add	r5, pc, r5
   17010:	str	r2, [sp, #8]
   17014:	str	r3, [sp]
   17018:	mov	r2, r5
   1701c:	ldr	r3, [sp, #80]	; 0x50
   17020:	add	r1, pc, r1
   17024:	mov	r0, #2
   17028:	str	r9, [sp, #24]
   1702c:	str	r4, [sp, #20]
   17030:	str	r7, [sp, #12]
   17034:	str	r8, [sp, #16]
   17038:	add	r6, sp, #668	; 0x29c
   1703c:	bl	1503c <__assert_fail@plt+0x33b4>
   17040:	str	r8, [sp]
   17044:	mov	r3, r7
   17048:	str	r4, [sp, #4]
   1704c:	mov	r1, r6
   17050:	ldr	r2, [sp, #72]	; 0x48
   17054:	mov	r0, r9
   17058:	bl	15998 <__assert_fail@plt+0x3d10>
   1705c:	cmp	r0, #0
   17060:	beq	17078 <__assert_fail@plt+0x53f0>
   17064:	mov	r0, r6
   17068:	ldr	r3, [sp, #112]	; 0x70
   1706c:	blx	r3
   17070:	cmp	r0, #0
   17074:	bne	177ac <__assert_fail@plt+0x5b24>
   17078:	ldr	r3, [sp, #72]	; 0x48
   1707c:	str	r3, [sp, #56]	; 0x38
   17080:	b	16cbc <__assert_fail@plt+0x5034>
   17084:	sub	r2, r0, #-2147483647	; 0x80000001
   17088:	cmn	r2, #3
   1708c:	bhi	17098 <__assert_fail@plt+0x5410>
   17090:	cmp	r0, #0
   17094:	bne	16d34 <__assert_fail@plt+0x50ac>
   17098:	mov	r0, r3
   1709c:	bl	11a18 <strerror@plt>
   170a0:	ldr	r2, [pc, #1892]	; 1780c <__assert_fail@plt+0x5b84>
   170a4:	ldr	r1, [pc, #1892]	; 17810 <__assert_fail@plt+0x5b88>
   170a8:	mov	r3, r6
   170ac:	add	r2, pc, r2
   170b0:	add	r1, pc, r1
   170b4:	str	r0, [sp]
   170b8:	mov	r0, #1
   170bc:	bl	1503c <__assert_fail@plt+0x33b4>
   170c0:	b	16cbc <__assert_fail@plt+0x5034>
   170c4:	bl	11acc <__errno_location@plt>
   170c8:	ldr	r0, [r0]
   170cc:	bl	11a18 <strerror@plt>
   170d0:	ldr	r3, [pc, #1852]	; 17814 <__assert_fail@plt+0x5b8c>
   170d4:	ldr	r2, [pc, #1852]	; 17818 <__assert_fail@plt+0x5b90>
   170d8:	ldr	r1, [pc, #1852]	; 1781c <__assert_fail@plt+0x5b94>
   170dc:	add	r3, pc, r3
   170e0:	add	r2, pc, r2
   170e4:	add	r1, pc, r1
   170e8:	str	r0, [sp]
   170ec:	mov	r0, #1
   170f0:	bl	1503c <__assert_fail@plt+0x33b4>
   170f4:	ldr	r0, [sp, #36]	; 0x24
   170f8:	bl	11c70 <closedir@plt>
   170fc:	add	r3, sp, #4864	; 0x1300
   17100:	add	r3, r3, #28
   17104:	ldr	r2, [r3]
   17108:	ldr	r3, [sp, #96]	; 0x60
   1710c:	ldr	r3, [r3]
   17110:	cmp	r2, r3
   17114:	bne	177cc <__assert_fail@plt+0x5b44>
   17118:	add	sp, sp, #4864	; 0x1300
   1711c:	add	sp, sp, #36	; 0x24
   17120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17124:	ldr	r3, [sp, #44]	; 0x2c
   17128:	ldr	r2, [pc, #1776]	; 17820 <__assert_fail@plt+0x5b98>
   1712c:	ldr	r1, [pc, #1776]	; 17824 <__assert_fail@plt+0x5b9c>
   17130:	str	r9, [sp]
   17134:	sub	r3, r3, #5
   17138:	add	r2, pc, r2
   1713c:	add	r1, pc, r1
   17140:	mov	r0, #1
   17144:	bl	1503c <__assert_fail@plt+0x33b4>
   17148:	b	16cbc <__assert_fail@plt+0x5034>
   1714c:	ldr	r2, [pc, #1748]	; 17828 <__assert_fail@plt+0x5ba0>
   17150:	ldr	r1, [pc, #1748]	; 1782c <__assert_fail@plt+0x5ba4>
   17154:	ldr	ip, [sp, #72]	; 0x48
   17158:	ldr	r3, [sp, #56]	; 0x38
   1715c:	str	r5, [sp, #4]
   17160:	str	r9, [sp]
   17164:	add	r2, pc, r2
   17168:	add	r1, pc, r1
   1716c:	mov	r0, #1
   17170:	str	ip, [sp, #56]	; 0x38
   17174:	bl	1503c <__assert_fail@plt+0x33b4>
   17178:	b	16cbc <__assert_fail@plt+0x5034>
   1717c:	sub	r2, r3, #-2147483647	; 0x80000001
   17180:	cmn	r2, #3
   17184:	bhi	17190 <__assert_fail@plt+0x5508>
   17188:	cmp	r3, #0
   1718c:	bne	16ea4 <__assert_fail@plt+0x521c>
   17190:	bl	11a18 <strerror@plt>
   17194:	ldr	r3, [sp, #88]	; 0x58
   17198:	ldr	r2, [pc, #1680]	; 17830 <__assert_fail@plt+0x5ba8>
   1719c:	ldr	r1, [pc, #1680]	; 17834 <__assert_fail@plt+0x5bac>
   171a0:	add	r3, r3, #14
   171a4:	add	r2, pc, r2
   171a8:	add	r1, pc, r1
   171ac:	ldr	ip, [sp, #72]	; 0x48
   171b0:	str	r0, [sp]
   171b4:	mov	r0, #1
   171b8:	str	ip, [sp, #56]	; 0x38
   171bc:	bl	1503c <__assert_fail@plt+0x33b4>
   171c0:	b	16cbc <__assert_fail@plt+0x5034>
   171c4:	ldr	r2, [pc, #1644]	; 17838 <__assert_fail@plt+0x5bb0>
   171c8:	ldr	r1, [pc, #1644]	; 1783c <__assert_fail@plt+0x5bb4>
   171cc:	ldr	r3, [sp, #72]	; 0x48
   171d0:	add	r2, pc, r2
   171d4:	add	r1, pc, r1
   171d8:	mov	r0, #2
   171dc:	str	r3, [sp, #56]	; 0x38
   171e0:	bl	1503c <__assert_fail@plt+0x33b4>
   171e4:	b	16cbc <__assert_fail@plt+0x5034>
   171e8:	ldr	r2, [pc, #1616]	; 17840 <__assert_fail@plt+0x5bb8>
   171ec:	ldr	r1, [pc, #1616]	; 17844 <__assert_fail@plt+0x5bbc>
   171f0:	str	r9, [sp]
   171f4:	mov	r3, r6
   171f8:	add	r2, pc, r2
   171fc:	add	r1, pc, r1
   17200:	mov	r0, #1
   17204:	bl	1503c <__assert_fail@plt+0x33b4>
   17208:	b	16cbc <__assert_fail@plt+0x5034>
   1720c:	mov	r0, r5
   17210:	bl	11868 <ferror@plt>
   17214:	cmp	r0, #0
   17218:	beq	16e34 <__assert_fail@plt+0x51ac>
   1721c:	ldr	r2, [pc, #1572]	; 17848 <__assert_fail@plt+0x5bc0>
   17220:	ldr	r1, [pc, #1572]	; 1784c <__assert_fail@plt+0x5bc4>
   17224:	ldr	ip, [sp, #72]	; 0x48
   17228:	mov	r3, r8
   1722c:	add	r2, pc, r2
   17230:	add	r1, pc, r1
   17234:	mov	r0, #1
   17238:	str	ip, [sp, #56]	; 0x38
   1723c:	bl	1503c <__assert_fail@plt+0x33b4>
   17240:	b	16cbc <__assert_fail@plt+0x5034>
   17244:	ldr	r3, [sp, #84]	; 0x54
   17248:	str	r3, [sp, #116]	; 0x74
   1724c:	b	16c78 <__assert_fail@plt+0x4ff0>
   17250:	ldr	r3, [sp, #64]	; 0x40
   17254:	str	r3, [sp, #108]	; 0x6c
   17258:	b	16c64 <__assert_fail@plt+0x4fdc>
   1725c:	ldr	r3, [sp, #60]	; 0x3c
   17260:	str	r3, [sp, #104]	; 0x68
   17264:	b	16c50 <__assert_fail@plt+0x4fc8>
   17268:	ldr	r2, [pc, #1504]	; 17850 <__assert_fail@plt+0x5bc8>
   1726c:	ldr	r1, [pc, #1504]	; 17854 <__assert_fail@plt+0x5bcc>
   17270:	ldr	ip, [sp, #72]	; 0x48
   17274:	add	r2, pc, r2
   17278:	add	r1, pc, r1
   1727c:	mov	r0, #1
   17280:	str	ip, [sp, #56]	; 0x38
   17284:	bl	1503c <__assert_fail@plt+0x33b4>
   17288:	b	16cbc <__assert_fail@plt+0x5034>
   1728c:	ldr	r5, [sp, #92]	; 0x5c
   17290:	ldr	r0, [r5]
   17294:	bl	11a18 <strerror@plt>
   17298:	ldr	r2, [pc, #1464]	; 17858 <__assert_fail@plt+0x5bd0>
   1729c:	ldr	r1, [pc, #1464]	; 1785c <__assert_fail@plt+0x5bd4>
   172a0:	mov	r3, r8
   172a4:	add	r2, pc, r2
   172a8:	add	r1, pc, r1
   172ac:	b	171ac <__assert_fail@plt+0x5524>
   172b0:	ldr	r1, [pc, #1448]	; 17860 <__assert_fail@plt+0x5bd8>
   172b4:	mov	r3, r8
   172b8:	mov	r2, r7
   172bc:	add	r1, pc, r1
   172c0:	mov	r0, #1
   172c4:	bl	1503c <__assert_fail@plt+0x33b4>
   172c8:	add	r1, r6, #28
   172cc:	mov	r2, #128	; 0x80
   172d0:	sub	r0, fp, #528	; 0x210
   172d4:	bl	11880 <memcpy@plt>
   172d8:	add	r2, sp, #672	; 0x2a0
   172dc:	str	r2, [sp, #92]	; 0x5c
   172e0:	add	r2, sp, #636	; 0x27c
   172e4:	add	r3, sp, #128	; 0x80
   172e8:	str	r2, [fp, #-468]	; 0xfffffe2c
   172ec:	add	r2, sp, #132	; 0x84
   172f0:	add	lr, sp, #572	; 0x23c
   172f4:	add	ip, sp, #160	; 0xa0
   172f8:	mov	r1, r5
   172fc:	mov	r0, r4
   17300:	add	r5, sp, #124	; 0x7c
   17304:	add	r4, sp, #604	; 0x25c
   17308:	str	r3, [fp, #-436]	; 0xfffffe4c
   1730c:	str	r2, [fp, #-420]	; 0xfffffe5c
   17310:	add	r3, sp, #136	; 0x88
   17314:	add	r2, sp, #540	; 0x21c
   17318:	ldr	r6, [pc, #1348]	; 17864 <__assert_fail@plt+0x5bdc>
   1731c:	str	r3, [fp, #-404]	; 0xfffffe6c
   17320:	str	ip, [sp, #52]	; 0x34
   17324:	str	lr, [sp, #72]	; 0x48
   17328:	str	lr, [fp, #-500]	; 0xfffffe0c
   1732c:	str	r2, [sp, #56]	; 0x38
   17330:	str	r2, [fp, #-516]	; 0xfffffdfc
   17334:	str	r4, [sp, #80]	; 0x50
   17338:	str	r5, [sp, #40]	; 0x28
   1733c:	str	r4, [fp, #-484]	; 0xfffffe1c
   17340:	str	r5, [fp, #-452]	; 0xfffffe3c
   17344:	bl	1f554 <__assert_fail@plt+0xd8cc>
   17348:	ldr	r1, [pc, #1304]	; 17868 <__assert_fail@plt+0x5be0>
   1734c:	add	r6, pc, r6
   17350:	mov	r0, r6
   17354:	add	r1, pc, r1
   17358:	bl	11814 <fopen@plt>
   1735c:	subs	r3, r0, #0
   17360:	str	r3, [sp, #44]	; 0x2c
   17364:	beq	1778c <__assert_fail@plt+0x5b04>
   17368:	ldr	r0, [sp, #60]	; 0x3c
   1736c:	ldr	r2, [sp, #36]	; 0x24
   17370:	mvn	r3, #0
   17374:	cmp	r0, #0
   17378:	strb	r2, [fp, #-196]	; 0xffffff3c
   1737c:	strb	r2, [fp, #-228]	; 0xffffff1c
   17380:	strb	r2, [fp, #-260]	; 0xfffffefc
   17384:	str	r3, [fp, #-664]	; 0xfffffd68
   17388:	str	r3, [fp, #-668]	; 0xfffffd64
   1738c:	str	r3, [fp, #-672]	; 0xfffffd60
   17390:	str	r3, [fp, #-676]	; 0xfffffd5c
   17394:	beq	17780 <__assert_fail@plt+0x5af8>
   17398:	bl	11aa8 <strlen@plt>
   1739c:	str	r0, [sp, #68]	; 0x44
   173a0:	ldr	r0, [sp, #64]	; 0x40
   173a4:	cmp	r0, #0
   173a8:	beq	17774 <__assert_fail@plt+0x5aec>
   173ac:	bl	11aa8 <strlen@plt>
   173b0:	str	r0, [sp, #76]	; 0x4c
   173b4:	ldr	r0, [sp, #84]	; 0x54
   173b8:	cmp	r0, #0
   173bc:	beq	17768 <__assert_fail@plt+0x5ae0>
   173c0:	bl	11aa8 <strlen@plt>
   173c4:	str	r0, [sp, #88]	; 0x58
   173c8:	mov	r9, #0
   173cc:	add	r6, sp, #272	; 0x110
   173d0:	mvn	r3, #0
   173d4:	str	r3, [sp, #48]	; 0x30
   173d8:	ldr	r0, [sp, #44]	; 0x2c
   173dc:	bl	11a90 <feof@plt>
   173e0:	subs	sl, r0, #0
   173e4:	bne	17734 <__assert_fail@plt+0x5aac>
   173e8:	sub	r4, fp, #4
   173ec:	mov	r0, r4
   173f0:	ldr	r2, [sp, #44]	; 0x2c
   173f4:	mov	r1, #256	; 0x100
   173f8:	bl	1185c <fgets@plt>
   173fc:	mov	r0, r4
   17400:	bl	18520 <__assert_fail@plt+0x6898>
   17404:	ldrb	r7, [r0]
   17408:	mov	r4, r0
   1740c:	cmp	r7, #0
   17410:	beq	17454 <__assert_fail@plt+0x57cc>
   17414:	mov	r8, r6
   17418:	mov	r5, #0
   1741c:	ldm	r8, {r1, r7}
   17420:	mov	r0, r4
   17424:	mov	r2, r7
   17428:	bl	11c40 <strncmp@plt>
   1742c:	cmp	r0, #0
   17430:	beq	17524 <__assert_fail@plt+0x589c>
   17434:	add	r5, r5, #1
   17438:	cmp	r5, #8
   1743c:	add	r8, r8, #16
   17440:	bne	1741c <__assert_fail@plt+0x5794>
   17444:	ldrb	r7, [r4, #1]
   17448:	add	r4, r4, #1
   1744c:	cmp	r7, #0
   17450:	bne	17414 <__assert_fail@plt+0x578c>
   17454:	cmp	r9, #255	; 0xff
   17458:	bne	173d8 <__assert_fail@plt+0x5750>
   1745c:	ldr	r3, [sp, #60]	; 0x3c
   17460:	cmp	r3, #0
   17464:	beq	17480 <__assert_fail@plt+0x57f8>
   17468:	ldr	r2, [sp, #68]	; 0x44
   1746c:	mov	r1, r3
   17470:	ldr	r0, [sp, #56]	; 0x38
   17474:	bl	11c40 <strncmp@plt>
   17478:	cmp	r0, #0
   1747c:	bne	174e0 <__assert_fail@plt+0x5858>
   17480:	ldr	r3, [sp, #64]	; 0x40
   17484:	cmp	r3, #0
   17488:	beq	174a4 <__assert_fail@plt+0x581c>
   1748c:	ldr	r2, [sp, #76]	; 0x4c
   17490:	mov	r1, r3
   17494:	ldr	r0, [sp, #72]	; 0x48
   17498:	bl	11c40 <strncmp@plt>
   1749c:	cmp	r0, #0
   174a0:	bne	174e0 <__assert_fail@plt+0x5858>
   174a4:	ldr	r3, [sp, #84]	; 0x54
   174a8:	cmp	r3, #0
   174ac:	beq	174c8 <__assert_fail@plt+0x5840>
   174b0:	ldr	r2, [sp, #88]	; 0x58
   174b4:	mov	r1, r3
   174b8:	ldr	r0, [sp, #80]	; 0x50
   174bc:	bl	11c40 <strncmp@plt>
   174c0:	cmp	r0, #0
   174c4:	bne	174e0 <__assert_fail@plt+0x5858>
   174c8:	ldr	r2, [sp, #100]	; 0x64
   174cc:	cmn	r2, #1
   174d0:	beq	175e0 <__assert_fail@plt+0x5958>
   174d4:	ldr	r3, [fp, #-676]	; 0xfffffd5c
   174d8:	cmp	r2, r3
   174dc:	beq	175e0 <__assert_fail@plt+0x5958>
   174e0:	ldr	r2, [pc, #900]	; 1786c <__assert_fail@plt+0x5be4>
   174e4:	ldr	r1, [pc, #900]	; 17870 <__assert_fail@plt+0x5be8>
   174e8:	add	r2, pc, r2
   174ec:	add	r1, pc, r1
   174f0:	mov	r0, #2
   174f4:	bl	1503c <__assert_fail@plt+0x33b4>
   174f8:	mov	r2, #0
   174fc:	mvn	r3, #0
   17500:	mov	r9, r2
   17504:	strb	r2, [fp, #-196]	; 0xffffff3c
   17508:	strb	r2, [fp, #-228]	; 0xffffff1c
   1750c:	strb	r2, [fp, #-260]	; 0xfffffefc
   17510:	str	r3, [fp, #-664]	; 0xfffffd68
   17514:	str	r3, [fp, #-668]	; 0xfffffd64
   17518:	str	r3, [fp, #-672]	; 0xfffffd60
   1751c:	str	r3, [fp, #-676]	; 0xfffffd5c
   17520:	b	173d8 <__assert_fail@plt+0x5750>
   17524:	add	r7, r4, r7
   17528:	mov	r0, r7
   1752c:	bl	11aa8 <strlen@plt>
   17530:	mov	r8, #1
   17534:	add	r4, r7, r0
   17538:	add	r3, r6, r8, lsl #4
   1753c:	mov	r0, r7
   17540:	ldr	r1, [r3, #-16]
   17544:	bl	117c0 <strstr@plt>
   17548:	sub	r2, r8, #1
   1754c:	add	r8, r8, #1
   17550:	cmp	r0, r4
   17554:	movcs	r3, #0
   17558:	movcc	r3, #1
   1755c:	cmp	r0, #0
   17560:	moveq	r3, #0
   17564:	cmp	r2, r5
   17568:	moveq	r3, #0
   1756c:	andne	r3, r3, #1
   17570:	cmp	r3, #0
   17574:	movne	r4, r0
   17578:	cmp	r8, #9
   1757c:	bne	17538 <__assert_fail@plt+0x58b0>
   17580:	mov	r0, r7
   17584:	ldrb	r7, [r4]
   17588:	strb	sl, [r4]
   1758c:	bl	18520 <__assert_fail@plt+0x6898>
   17590:	add	r2, fp, r5, lsl #4
   17594:	ldr	r3, [r2, #-520]	; 0xfffffdf8
   17598:	ldr	r8, [r2, #-516]	; 0xfffffdfc
   1759c:	cmp	r3, #0
   175a0:	mov	r1, r0
   175a4:	beq	17700 <__assert_fail@plt+0x5a78>
   175a8:	ldrb	r3, [r0]
   175ac:	cmp	r3, #0
   175b0:	streq	r3, [r8]
   175b4:	bne	1771c <__assert_fail@plt+0x5a94>
   175b8:	ldr	r3, [sp, #40]	; 0x28
   175bc:	strb	r7, [r4]
   175c0:	cmp	r8, r3
   175c4:	movne	r3, #1
   175c8:	orrne	r9, r9, r3, lsl r5
   175cc:	ldreq	r3, [sp, #48]	; 0x30
   175d0:	moveq	r9, #16
   175d4:	addeq	r3, r3, #1
   175d8:	streq	r3, [sp, #48]	; 0x30
   175dc:	b	1740c <__assert_fail@plt+0x5784>
   175e0:	add	r3, sp, #4928	; 0x1340
   175e4:	add	r3, r3, #8
   175e8:	ldr	r3, [r3]
   175ec:	cmn	r3, #1
   175f0:	beq	1760c <__assert_fail@plt+0x5984>
   175f4:	add	r2, sp, #4928	; 0x1340
   175f8:	add	r2, r2, #8
   175fc:	ldr	r3, [fp, #-672]	; 0xfffffd60
   17600:	ldr	r2, [r2]
   17604:	cmp	r2, r3
   17608:	bne	174e0 <__assert_fail@plt+0x5858>
   1760c:	add	r3, sp, #4928	; 0x1340
   17610:	add	r3, r3, #12
   17614:	ldr	r3, [r3]
   17618:	cmn	r3, #1
   1761c:	beq	17638 <__assert_fail@plt+0x59b0>
   17620:	add	r2, sp, #4928	; 0x1340
   17624:	add	r2, r2, #12
   17628:	ldr	r3, [fp, #-668]	; 0xfffffd64
   1762c:	ldr	r2, [r2]
   17630:	cmp	r2, r3
   17634:	bne	174e0 <__assert_fail@plt+0x5858>
   17638:	add	r3, sp, #4928	; 0x1340
   1763c:	add	r3, r3, #16
   17640:	ldr	r4, [fp, #-664]	; 0xfffffd68
   17644:	ldr	r3, [r3]
   17648:	cmn	r3, #1
   1764c:	beq	17664 <__assert_fail@plt+0x59dc>
   17650:	add	r3, sp, #4928	; 0x1340
   17654:	add	r3, r3, #16
   17658:	ldr	r3, [r3]
   1765c:	cmp	r4, r3
   17660:	bne	174e0 <__assert_fail@plt+0x5858>
   17664:	sub	r7, fp, #676	; 0x2a4
   17668:	ldr	r3, [sp, #84]	; 0x54
   1766c:	ldm	r7, {r7, r8, r9}
   17670:	mov	r0, #2
   17674:	ldr	sl, [sp, #48]	; 0x30
   17678:	ldr	ip, [sp, #92]	; 0x5c
   1767c:	str	r3, [sp, #4]
   17680:	ldr	r2, [pc, #492]	; 17874 <__assert_fail@plt+0x5bec>
   17684:	ldr	r3, [sp, #64]	; 0x40
   17688:	ldr	r1, [pc, #488]	; 17878 <__assert_fail@plt+0x5bf0>
   1768c:	sub	r5, ip, #4
   17690:	str	r3, [sp]
   17694:	add	r2, pc, r2
   17698:	ldr	r3, [sp, #60]	; 0x3c
   1769c:	add	r1, pc, r1
   176a0:	str	sl, [sp, #24]
   176a4:	str	r4, [sp, #20]
   176a8:	str	r7, [sp, #8]
   176ac:	strd	r8, [sp, #12]
   176b0:	bl	1503c <__assert_fail@plt+0x33b4>
   176b4:	str	r9, [sp]
   176b8:	mov	r3, r8
   176bc:	mov	r2, r7
   176c0:	str	r4, [sp, #4]
   176c4:	mov	r1, r5
   176c8:	mov	r0, sl
   176cc:	bl	15998 <__assert_fail@plt+0x3d10>
   176d0:	cmp	r0, #0
   176d4:	beq	174f8 <__assert_fail@plt+0x5870>
   176d8:	mov	r0, r5
   176dc:	ldr	r3, [sp, #112]	; 0x70
   176e0:	blx	r3
   176e4:	cmp	r0, #0
   176e8:	beq	174f8 <__assert_fail@plt+0x5870>
   176ec:	ldr	r1, [pc, #392]	; 1787c <__assert_fail@plt+0x5bf4>
   176f0:	mov	r0, #1
   176f4:	add	r1, pc, r1
   176f8:	bl	1503c <__assert_fail@plt+0x33b4>
   176fc:	b	174f8 <__assert_fail@plt+0x5870>
   17700:	mov	r2, #32
   17704:	mov	r0, r8
   17708:	str	r3, [sp, #36]	; 0x24
   1770c:	bl	11b20 <strncpy@plt>
   17710:	ldr	r3, [sp, #36]	; 0x24
   17714:	strb	r3, [r8, #31]
   17718:	b	175b8 <__assert_fail@plt+0x5930>
   1771c:	ldr	r3, [sp, #52]	; 0x34
   17720:	mov	r2, #10
   17724:	sub	r1, r3, #20
   17728:	bl	117fc <strtol@plt>
   1772c:	str	r0, [r8]
   17730:	b	175b8 <__assert_fail@plt+0x5930>
   17734:	ldr	r0, [sp, #44]	; 0x2c
   17738:	bl	11b74 <fclose@plt>
   1773c:	b	170fc <__assert_fail@plt+0x5474>
   17740:	mov	r3, r2
   17744:	ldr	r1, [pc, #308]	; 17880 <__assert_fail@plt+0x5bf8>
   17748:	ldr	r2, [pc, #308]	; 17884 <__assert_fail@plt+0x5bfc>
   1774c:	ldr	ip, [sp, #72]	; 0x48
   17750:	add	r2, pc, r2
   17754:	add	r1, pc, r1
   17758:	mov	r0, #1
   1775c:	str	ip, [sp, #56]	; 0x38
   17760:	bl	1503c <__assert_fail@plt+0x33b4>
   17764:	b	16cbc <__assert_fail@plt+0x5034>
   17768:	ldr	r3, [sp, #84]	; 0x54
   1776c:	str	r3, [sp, #88]	; 0x58
   17770:	b	173c8 <__assert_fail@plt+0x5740>
   17774:	ldr	r3, [sp, #64]	; 0x40
   17778:	str	r3, [sp, #76]	; 0x4c
   1777c:	b	173b4 <__assert_fail@plt+0x572c>
   17780:	ldr	r3, [sp, #60]	; 0x3c
   17784:	str	r3, [sp, #68]	; 0x44
   17788:	b	173a0 <__assert_fail@plt+0x5718>
   1778c:	ldr	r2, [pc, #244]	; 17888 <__assert_fail@plt+0x5c00>
   17790:	ldr	r1, [pc, #244]	; 1788c <__assert_fail@plt+0x5c04>
   17794:	mov	r3, r6
   17798:	add	r2, pc, r2
   1779c:	add	r1, pc, r1
   177a0:	mov	r0, #1
   177a4:	bl	1503c <__assert_fail@plt+0x33b4>
   177a8:	b	170fc <__assert_fail@plt+0x5474>
   177ac:	ldr	r1, [pc, #220]	; 17890 <__assert_fail@plt+0x5c08>
   177b0:	ldr	r3, [sp, #72]	; 0x48
   177b4:	mov	r2, r5
   177b8:	add	r1, pc, r1
   177bc:	mov	r0, #1
   177c0:	str	r3, [sp, #56]	; 0x38
   177c4:	bl	1503c <__assert_fail@plt+0x33b4>
   177c8:	b	16cbc <__assert_fail@plt+0x5034>
   177cc:	bl	118e0 <__stack_chk_fail@plt>
   177d0:	ldrdeq	r1, [r2], -ip
   177d4:	andeq	r1, r2, r4, ror #11
   177d8:			; <UNDEFINED> instruction: 0x000001b0
   177dc:	andeq	r0, r0, ip, asr #3
   177e0:	andeq	fp, r0, r4, lsr #16
   177e4:	muleq	r0, r4, lr
   177e8:	andeq	fp, r0, r4, asr #29
   177ec:	muleq	r0, r8, lr
   177f0:	andeq	fp, r0, ip, asr #26
   177f4:	andeq	fp, r0, r0, lsl #30
   177f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   177fc:			; <UNDEFINED> instruction: 0x0000c4b8
   17800:	ldrdeq	r0, [r2], -ip
   17804:	andeq	fp, r0, r0, lsl #21
   17808:	andeq	fp, r0, r8, asr fp
   1780c:	andeq	fp, r0, r0, ror #19
   17810:	andeq	fp, r0, r4, ror fp
   17814:	andeq	fp, r0, r0, lsl #20
   17818:	andeq	fp, r0, ip, lsr #19
   1781c:	andeq	fp, r0, r8, lsl fp
   17820:	andeq	fp, r0, r4, asr r9
   17824:	andeq	fp, r0, ip, lsr fp
   17828:	andeq	fp, r0, r8, lsr #18
   1782c:	andeq	fp, r0, r0, asr #22
   17830:	andeq	fp, r0, r8, ror #17
   17834:	andeq	fp, r0, r4, ror #22
   17838:			; <UNDEFINED> instruction: 0x0000b8bc
   1783c:	andeq	fp, r0, r8, lsl sl
   17840:	muleq	r0, r4, r8
   17844:	andeq	fp, r0, r0, asr sl
   17848:	andeq	fp, r0, r0, ror #16
   1784c:	andeq	fp, r0, r4, asr #21
   17850:	andeq	fp, r0, r8, lsl r8
   17854:	strdeq	fp, [r0], -r0
   17858:	andeq	fp, r0, r8, ror #15
   1785c:	andeq	fp, r0, r0, lsr sl
   17860:	andeq	fp, r0, r8, lsr r8
   17864:	ldrdeq	fp, [r0], -r8
   17868:	andeq	fp, r0, ip, ror #30
   1786c:	andeq	fp, r0, ip, asr #12
   17870:	andeq	fp, r0, r0, lsl #14
   17874:	andeq	fp, r0, r0, lsr #9
   17878:	ldrdeq	fp, [r0], -ip
   1787c:	ldrdeq	fp, [r0], -r0
   17880:	andeq	fp, r0, r8, ror #11
   17884:	andeq	fp, r0, ip, lsr r3
   17888:	muleq	r0, ip, r3
   1788c:			; <UNDEFINED> instruction: 0x0000b3b8
   17890:	andeq	fp, r0, r8, asr #11
   17894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17898:	sub	sp, sp, #116	; 0x74
   1789c:	ldr	r4, [pc, #1452]	; 17e50 <__assert_fail@plt+0x61c8>
   178a0:	ldr	ip, [pc, #1452]	; 17e54 <__assert_fail@plt+0x61cc>
   178a4:	add	r4, pc, r4
   178a8:	mov	r6, r0
   178ac:	ldr	ip, [r4, ip]
   178b0:	ldr	r0, [pc, #1440]	; 17e58 <__assert_fail@plt+0x61d0>
   178b4:	str	r2, [sp, #20]
   178b8:	ldr	r2, [ip]
   178bc:	add	r0, pc, r0
   178c0:	str	ip, [sp, #16]
   178c4:	mov	r8, r1
   178c8:	str	r3, [sp, #24]
   178cc:	str	r2, [sp, #108]	; 0x6c
   178d0:	ldr	fp, [sp, #152]	; 0x98
   178d4:	bl	119e8 <getenv@plt>
   178d8:	subs	r5, r0, #0
   178dc:	beq	17910 <__assert_fail@plt+0x5c88>
   178e0:	mov	r2, #10
   178e4:	add	r1, sp, #32
   178e8:	bl	117fc <strtol@plt>
   178ec:	ldr	r3, [sp, #32]
   178f0:	cmp	r3, r5
   178f4:	beq	17a9c <__assert_fail@plt+0x5e14>
   178f8:	sub	r3, r0, #1
   178fc:	cmp	r3, #1200	; 0x4b0
   17900:	bcs	17a9c <__assert_fail@plt+0x5e14>
   17904:	ldr	r3, [pc, #1360]	; 17e5c <__assert_fail@plt+0x61d4>
   17908:	add	r3, pc, r3
   1790c:	str	r0, [r3, #12]
   17910:	ldr	r3, [pc, #1352]	; 17e60 <__assert_fail@plt+0x61d8>
   17914:	ldr	r0, [pc, #1352]	; 17e64 <__assert_fail@plt+0x61dc>
   17918:	ldr	r1, [r4, r3]
   1791c:	add	r0, pc, r0
   17920:	bl	1f554 <__assert_fail@plt+0xd8cc>
   17924:	ldr	r3, [pc, #1340]	; 17e68 <__assert_fail@plt+0x61e0>
   17928:	add	r3, pc, r3
   1792c:	ldr	r2, [r3, #156]	; 0x9c
   17930:	cmp	r2, #0
   17934:	bne	17b0c <__assert_fail@plt+0x5e84>
   17938:	ldr	r1, [pc, #1324]	; 17e6c <__assert_fail@plt+0x61e4>
   1793c:	mov	r0, r6
   17940:	bl	11a60 <open@plt>
   17944:	subs	r5, r0, #0
   17948:	blt	17ab0 <__assert_fail@plt+0x5e28>
   1794c:	mov	r0, #2
   17950:	bl	11904 <sysconf@plt>
   17954:	ldr	r3, [pc, #1300]	; 17e70 <__assert_fail@plt+0x61e8>
   17958:	add	r9, sp, #76	; 0x4c
   1795c:	add	r3, pc, r3
   17960:	mov	r2, r9
   17964:	ldr	r3, [r3, #12]
   17968:	ldr	r1, [pc, #1284]	; 17e74 <__assert_fail@plt+0x61ec>
   1796c:	mul	r3, r0, r3
   17970:	mov	r0, r5
   17974:	str	r3, [sp, #76]	; 0x4c
   17978:	bl	11970 <ioctl@plt>
   1797c:	mov	r1, #1
   17980:	mov	r0, #24
   17984:	bl	117b4 <calloc@plt>
   17988:	subs	r7, r0, #0
   1798c:	beq	17d2c <__assert_fail@plt+0x60a4>
   17990:	ldr	r3, [pc, #1248]	; 17e78 <__assert_fail@plt+0x61f0>
   17994:	mov	sl, #1
   17998:	add	r3, pc, r3
   1799c:	add	r2, r3, #4
   179a0:	str	sl, [r7, #4]
   179a4:	ldr	r1, [pc, #1232]	; 17e7c <__assert_fail@plt+0x61f4>
   179a8:	mov	r0, r5
   179ac:	str	r3, [sp, #28]
   179b0:	bl	11970 <ioctl@plt>
   179b4:	cmp	r0, #0
   179b8:	bne	17bd4 <__assert_fail@plt+0x5f4c>
   179bc:	ldr	r3, [sp, #28]
   179c0:	ldr	r1, [pc, #1208]	; 17e80 <__assert_fail@plt+0x61f8>
   179c4:	mov	r0, sl
   179c8:	ldr	r2, [r3, #4]
   179cc:	add	r1, pc, r1
   179d0:	bl	1503c <__assert_fail@plt+0x33b4>
   179d4:	mov	r2, r9
   179d8:	ldr	r1, [pc, #1188]	; 17e84 <__assert_fail@plt+0x61fc>
   179dc:	mov	r0, r5
   179e0:	bl	11970 <ioctl@plt>
   179e4:	cmp	r0, #25
   179e8:	cmpne	r0, #22
   179ec:	str	r0, [sp, #36]	; 0x24
   179f0:	beq	17d60 <__assert_fail@plt+0x60d8>
   179f4:	ldr	r3, [sp, #92]	; 0x5c
   179f8:	cmp	r3, #6
   179fc:	cmpne	r3, #3
   17a00:	bne	17d3c <__assert_fail@plt+0x60b4>
   17a04:	mov	r2, fp
   17a08:	ldr	r1, [pc, #1144]	; 17e88 <__assert_fail@plt+0x6200>
   17a0c:	mov	r0, r5
   17a10:	bl	11970 <ioctl@plt>
   17a14:	add	r2, sp, #40	; 0x28
   17a18:	ldr	r1, [pc, #1132]	; 17e8c <__assert_fail@plt+0x6204>
   17a1c:	mov	r0, r5
   17a20:	bl	11970 <ioctl@plt>
   17a24:	cmp	r0, #0
   17a28:	bne	17dd0 <__assert_fail@plt+0x6148>
   17a2c:	ldr	r2, [fp]
   17a30:	ldr	r3, [sp, #40]	; 0x28
   17a34:	ldr	r4, [pc, #1108]	; 17e90 <__assert_fail@plt+0x6208>
   17a38:	cmp	r2, r3
   17a3c:	ldr	r1, [pc, #1104]	; 17e94 <__assert_fail@plt+0x620c>
   17a40:	movgt	r2, r3
   17a44:	add	r4, pc, r4
   17a48:	strgt	r3, [fp]
   17a4c:	str	r2, [r7, #8]
   17a50:	add	r1, pc, r1
   17a54:	mov	r0, #1
   17a58:	bl	1503c <__assert_fail@plt+0x33b4>
   17a5c:	ldr	r3, [r4, #4]
   17a60:	ldr	r2, [pc, #1072]	; 17e98 <__assert_fail@plt+0x6210>
   17a64:	cmp	r3, r2
   17a68:	ble	17c18 <__assert_fail@plt+0x5f90>
   17a6c:	ldr	r1, [pc, #1064]	; 17e9c <__assert_fail@plt+0x6214>
   17a70:	mov	r0, #1
   17a74:	add	r1, pc, r1
   17a78:	bl	1503c <__assert_fail@plt+0x33b4>
   17a7c:	add	r2, sp, #44	; 0x2c
   17a80:	ldr	r1, [pc, #1020]	; 17e84 <__assert_fail@plt+0x61fc>
   17a84:	mov	r0, r5
   17a88:	bl	11970 <ioctl@plt>
   17a8c:	cmp	r0, #0
   17a90:	beq	17e00 <__assert_fail@plt+0x6178>
   17a94:	ldr	r3, [r4, #4]
   17a98:	b	17c18 <__assert_fail@plt+0x5f90>
   17a9c:	ldr	r1, [pc, #1020]	; 17ea0 <__assert_fail@plt+0x6218>
   17aa0:	mov	r0, #1
   17aa4:	add	r1, pc, r1
   17aa8:	bl	1503c <__assert_fail@plt+0x33b4>
   17aac:	b	17910 <__assert_fail@plt+0x5c88>
   17ab0:	bl	11acc <__errno_location@plt>
   17ab4:	ldr	r0, [r0]
   17ab8:	cmp	r0, #13
   17abc:	moveq	r8, #11
   17ac0:	beq	17ad0 <__assert_fail@plt+0x5e48>
   17ac4:	cmp	r0, #16
   17ac8:	movne	r8, #4
   17acc:	moveq	r8, #3
   17ad0:	bl	11a18 <strerror@plt>
   17ad4:	ldr	r1, [pc, #968]	; 17ea4 <__assert_fail@plt+0x621c>
   17ad8:	mov	r2, r6
   17adc:	add	r1, pc, r1
   17ae0:	mov	r3, r0
   17ae4:	mov	r0, #1
   17ae8:	bl	1503c <__assert_fail@plt+0x33b4>
   17aec:	ldr	r3, [sp, #16]
   17af0:	ldr	r2, [sp, #108]	; 0x6c
   17af4:	mov	r0, r8
   17af8:	ldr	r3, [r3]
   17afc:	cmp	r2, r3
   17b00:	bne	17e4c <__assert_fail@plt+0x61c4>
   17b04:	add	sp, sp, #116	; 0x74
   17b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b0c:	ldr	r2, [pc, #916]	; 17ea8 <__assert_fail@plt+0x6220>
   17b10:	mov	r1, #0
   17b14:	str	r1, [r3, #156]	; 0x9c
   17b18:	ldr	r0, [pc, #908]	; 17eac <__assert_fail@plt+0x6224>
   17b1c:	ldr	r9, [r4, r2]
   17b20:	mov	r3, #131072	; 0x20000
   17b24:	add	r0, pc, r0
   17b28:	str	r3, [r9]
   17b2c:	bl	119e8 <getenv@plt>
   17b30:	subs	r5, r0, #0
   17b34:	beq	17b60 <__assert_fail@plt+0x5ed8>
   17b38:	mov	r2, #10
   17b3c:	add	r1, sp, #32
   17b40:	bl	117fc <strtol@plt>
   17b44:	ldr	r2, [sp, #32]
   17b48:	subs	r3, r2, r5
   17b4c:	movne	r3, #1
   17b50:	cmp	r0, #32768	; 0x8000
   17b54:	movlt	r3, #0
   17b58:	cmp	r3, #0
   17b5c:	strne	r0, [r9]
   17b60:	ldr	r7, [pc, #840]	; 17eb0 <__assert_fail@plt+0x6228>
   17b64:	ldr	r2, [pc, #840]	; 17eb4 <__assert_fail@plt+0x622c>
   17b68:	mvn	r5, #0
   17b6c:	add	r7, pc, r7
   17b70:	mov	r1, #0
   17b74:	mov	r3, r5
   17b78:	mov	r0, r1
   17b7c:	str	r7, [sp, #12]
   17b80:	str	r5, [sp, #8]
   17b84:	str	r5, [sp, #4]
   17b88:	str	r5, [sp]
   17b8c:	add	r2, pc, r2
   17b90:	bl	16b30 <__assert_fail@plt+0x4ea8>
   17b94:	ldr	r2, [pc, #796]	; 17eb8 <__assert_fail@plt+0x6230>
   17b98:	mov	r1, #0
   17b9c:	mov	r0, r1
   17ba0:	str	r7, [sp, #12]
   17ba4:	str	r5, [sp, #8]
   17ba8:	str	r5, [sp, #4]
   17bac:	str	r5, [sp]
   17bb0:	mov	r3, r5
   17bb4:	add	r2, pc, r2
   17bb8:	bl	16b30 <__assert_fail@plt+0x4ea8>
   17bbc:	ldr	r1, [pc, #760]	; 17ebc <__assert_fail@plt+0x6234>
   17bc0:	ldr	r2, [r9]
   17bc4:	add	r1, pc, r1
   17bc8:	mov	r0, #4
   17bcc:	bl	1503c <__assert_fail@plt+0x33b4>
   17bd0:	b	17938 <__assert_fail@plt+0x5cb0>
   17bd4:	add	r2, sp, #36	; 0x24
   17bd8:	ldr	r1, [pc, #736]	; 17ec0 <__assert_fail@plt+0x6238>
   17bdc:	mov	r0, r5
   17be0:	bl	11970 <ioctl@plt>
   17be4:	cmp	r0, #0
   17be8:	blt	17dac <__assert_fail@plt+0x6124>
   17bec:	ldr	r3, [pc, #692]	; 17ea8 <__assert_fail@plt+0x6220>
   17bf0:	ldr	r2, [fp]
   17bf4:	ldr	r3, [r4, r3]
   17bf8:	ldr	r3, [r3]
   17bfc:	cmp	r2, r3
   17c00:	movgt	r2, r3
   17c04:	strgt	r3, [fp]
   17c08:	ldr	r3, [pc, #692]	; 17ec4 <__assert_fail@plt+0x623c>
   17c0c:	str	r2, [r7, #8]
   17c10:	add	r3, pc, r3
   17c14:	ldr	r3, [r3, #4]
   17c18:	cmp	r3, #0
   17c1c:	beq	17d18 <__assert_fail@plt+0x6090>
   17c20:	ldr	r1, [pc, #672]	; 17ec8 <__assert_fail@plt+0x6240>
   17c24:	mov	r0, #1
   17c28:	add	r1, pc, r1
   17c2c:	bl	1503c <__assert_fail@plt+0x33b4>
   17c30:	ldr	r3, [r7, #4]
   17c34:	cmp	r3, #1
   17c38:	ble	17c4c <__assert_fail@plt+0x5fc4>
   17c3c:	ldr	r1, [pc, #648]	; 17ecc <__assert_fail@plt+0x6244>
   17c40:	mov	r0, #1
   17c44:	add	r1, pc, r1
   17c48:	bl	1503c <__assert_fail@plt+0x33b4>
   17c4c:	ldr	r3, [pc, #636]	; 17ed0 <__assert_fail@plt+0x6248>
   17c50:	ldr	r2, [pc, #636]	; 17ed4 <__assert_fail@plt+0x624c>
   17c54:	add	r3, pc, r3
   17c58:	ldr	r3, [r3, #4]
   17c5c:	cmp	r3, r2
   17c60:	bgt	17d84 <__assert_fail@plt+0x60fc>
   17c64:	ldr	r9, [pc, #620]	; 17ed8 <__assert_fail@plt+0x6250>
   17c68:	add	r9, pc, r9
   17c6c:	ldr	r3, [r9, #136]	; 0x88
   17c70:	ldr	r4, [r9]
   17c74:	cmp	r3, r5
   17c78:	bgt	17cc8 <__assert_fail@plt+0x6040>
   17c7c:	add	r2, r5, #8
   17c80:	rsb	r3, r3, r3, lsl #3
   17c84:	rsb	sl, r2, r2, lsl #3
   17c88:	cmp	r4, #0
   17c8c:	lsl	r6, r3, #2
   17c90:	str	r2, [r9, #136]	; 0x88
   17c94:	lsl	sl, sl, #2
   17c98:	beq	17d98 <__assert_fail@plt+0x6110>
   17c9c:	mov	r0, r4
   17ca0:	mov	r1, sl
   17ca4:	bl	11910 <realloc@plt>
   17ca8:	mov	r4, r0
   17cac:	str	r0, [r9]
   17cb0:	sub	r2, sl, r6
   17cb4:	add	r0, r4, r6
   17cb8:	mov	r1, #0
   17cbc:	bl	11b08 <memset@plt>
   17cc0:	cmp	r4, #0
   17cc4:	beq	17d2c <__assert_fail@plt+0x60a4>
   17cc8:	rsb	r2, r5, r5, lsl #3
   17ccc:	ldr	r0, [sp, #20]
   17cd0:	lsl	r2, r2, #2
   17cd4:	add	r1, r4, r2
   17cd8:	mov	r3, #0
   17cdc:	str	r0, [r1, #16]
   17ce0:	ldr	r0, [sp, #24]
   17ce4:	cmp	r8, #0
   17ce8:	str	r0, [r1, #20]
   17cec:	ldrb	r0, [r4, r2]
   17cf0:	bic	r0, r0, #3
   17cf4:	orr	r0, r0, #1
   17cf8:	strb	r0, [r4, r2]
   17cfc:	str	r7, [r1, #24]
   17d00:	str	r3, [r1, #4]
   17d04:	str	r3, [r1, #8]
   17d08:	str	r3, [r1, #12]
   17d0c:	strne	r5, [r8]
   17d10:	movne	r8, r3
   17d14:	b	17aec <__assert_fail@plt+0x5e64>
   17d18:	ldr	r1, [pc, #444]	; 17edc <__assert_fail@plt+0x6254>
   17d1c:	mov	r0, #1
   17d20:	add	r1, pc, r1
   17d24:	bl	1503c <__assert_fail@plt+0x33b4>
   17d28:	b	17c64 <__assert_fail@plt+0x5fdc>
   17d2c:	mov	r0, r5
   17d30:	bl	11c58 <close@plt>
   17d34:	mov	r8, #10
   17d38:	b	17aec <__assert_fail@plt+0x5e64>
   17d3c:	ldr	r1, [pc, #412]	; 17ee0 <__assert_fail@plt+0x6258>
   17d40:	mov	r2, r6
   17d44:	mov	r0, sl
   17d48:	add	r1, pc, r1
   17d4c:	bl	1503c <__assert_fail@plt+0x33b4>
   17d50:	mov	r0, r5
   17d54:	bl	11c58 <close@plt>
   17d58:	mov	r8, #4
   17d5c:	b	17aec <__assert_fail@plt+0x5e64>
   17d60:	ldr	r1, [pc, #380]	; 17ee4 <__assert_fail@plt+0x625c>
   17d64:	mov	r2, r6
   17d68:	mov	r0, sl
   17d6c:	add	r1, pc, r1
   17d70:	bl	1503c <__assert_fail@plt+0x33b4>
   17d74:	mov	r0, r5
   17d78:	bl	11c58 <close@plt>
   17d7c:	mov	r8, #4
   17d80:	b	17aec <__assert_fail@plt+0x5e64>
   17d84:	ldr	r1, [pc, #348]	; 17ee8 <__assert_fail@plt+0x6260>
   17d88:	mov	r0, #1
   17d8c:	add	r1, pc, r1
   17d90:	bl	1503c <__assert_fail@plt+0x33b4>
   17d94:	b	17c64 <__assert_fail@plt+0x5fdc>
   17d98:	mov	r0, sl
   17d9c:	bl	11a00 <malloc@plt>
   17da0:	mov	r4, r0
   17da4:	str	r0, [r9]
   17da8:	b	17cb0 <__assert_fail@plt+0x6028>
   17dac:	ldr	r1, [pc, #312]	; 17eec <__assert_fail@plt+0x6264>
   17db0:	mov	r2, r6
   17db4:	mov	r0, sl
   17db8:	add	r1, pc, r1
   17dbc:	bl	1503c <__assert_fail@plt+0x33b4>
   17dc0:	mov	r0, r5
   17dc4:	bl	11c58 <close@plt>
   17dc8:	mov	r8, #4
   17dcc:	b	17aec <__assert_fail@plt+0x5e64>
   17dd0:	bl	11acc <__errno_location@plt>
   17dd4:	mov	r8, #10
   17dd8:	ldr	r0, [r0]
   17ddc:	bl	11a18 <strerror@plt>
   17de0:	ldr	r1, [pc, #264]	; 17ef0 <__assert_fail@plt+0x6268>
   17de4:	add	r1, pc, r1
   17de8:	mov	r2, r0
   17dec:	mov	r0, sl
   17df0:	bl	1503c <__assert_fail@plt+0x33b4>
   17df4:	mov	r0, r5
   17df8:	bl	11c58 <close@plt>
   17dfc:	b	17aec <__assert_fail@plt+0x5e64>
   17e00:	ldr	r1, [pc, #236]	; 17ef4 <__assert_fail@plt+0x626c>
   17e04:	ldrsh	r2, [sp, #66]	; 0x42
   17e08:	add	r1, pc, r1
   17e0c:	mov	r0, #1
   17e10:	bl	1503c <__assert_fail@plt+0x33b4>
   17e14:	mov	r6, #1
   17e18:	add	r2, sp, #36	; 0x24
   17e1c:	ldr	r1, [pc, #212]	; 17ef8 <__assert_fail@plt+0x6270>
   17e20:	mov	r0, r5
   17e24:	str	r6, [sp, #36]	; 0x24
   17e28:	bl	11970 <ioctl@plt>
   17e2c:	cmp	r0, #0
   17e30:	bne	17a94 <__assert_fail@plt+0x5e0c>
   17e34:	ldrsh	r2, [sp, #66]	; 0x42
   17e38:	ldr	r3, [r4, #4]
   17e3c:	cmp	r2, #0
   17e40:	movle	r2, r6
   17e44:	str	r2, [r7, #4]
   17e48:	b	17c18 <__assert_fail@plt+0x5f90>
   17e4c:	bl	118e0 <__stack_chk_fail@plt>
   17e50:	andeq	r0, r2, r0, lsl #11
   17e54:			; <UNDEFINED> instruction: 0x000001b0
   17e58:	ldrdeq	fp, [r0], -r4
   17e5c:	andeq	r0, r2, r8, lsr #16
   17e60:	andeq	r0, r0, ip, asr #3
   17e64:			; <UNDEFINED> instruction: 0x0000aab0
   17e68:	andeq	r0, r2, r8, lsl #16
   17e6c:	andeq	r0, r0, r2, lsl #17
   17e70:	ldrdeq	r0, [r2], -r4
   17e74:	andeq	r2, r0, r1, lsl #4
   17e78:			; <UNDEFINED> instruction: 0x000218b8
   17e7c:	andeq	r2, r0, r2, lsl #5
   17e80:	muleq	r0, r8, r4
   17e84:	andeq	r2, r0, r6, ror r2
   17e88:	andeq	r2, r0, r5, ror r2
   17e8c:	andeq	r2, r0, r2, ror r2
   17e90:	andeq	r1, r2, ip, lsl #16
   17e94:			; <UNDEFINED> instruction: 0x0000b4bc
   17e98:	andeq	r4, r0, r6, lsr #29
   17e9c:	andeq	fp, r0, r8, lsl #10
   17ea0:	andeq	fp, r0, r4, lsl #6
   17ea4:	andeq	fp, r0, ip, asr r3
   17ea8:			; <UNDEFINED> instruction: 0x000001b8
   17eac:			; <UNDEFINED> instruction: 0x0000a8b4
   17eb0:			; <UNDEFINED> instruction: 0xffffd548
   17eb4:	andeq	fp, r0, r0, ror #4
   17eb8:	andeq	fp, r0, r0, asr #4
   17ebc:	andeq	fp, r0, ip, lsr r2
   17ec0:	andeq	r2, r0, r2, lsl #4
   17ec4:	andeq	r1, r2, r0, asr #12
   17ec8:	andeq	fp, r0, r0, ror #7
   17ecc:	andeq	fp, r0, r4, lsl #8
   17ed0:	strdeq	r1, [r2], -ip
   17ed4:	andeq	r7, r0, pc, lsr #10
   17ed8:	andeq	r1, r2, r8, ror #11
   17edc:			; <UNDEFINED> instruction: 0x0000b2bc
   17ee0:	andeq	fp, r0, ip, ror r1
   17ee4:	andeq	fp, r0, r0, lsr #2
   17ee8:	strdeq	fp, [r0], -r4
   17eec:	ldrdeq	fp, [r0], -r4
   17ef0:	andeq	fp, r0, r4, ror #2
   17ef4:	andeq	fp, r0, r4, lsr #3
   17ef8:	andeq	r2, r0, r1, ror r2
   17efc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f00:	mov	r6, r0
   17f04:	ldr	r4, [pc, #280]	; 18024 <__assert_fail@plt+0x639c>
   17f08:	ldr	lr, [pc, #280]	; 18028 <__assert_fail@plt+0x63a0>
   17f0c:	add	r4, pc, r4
   17f10:	ldr	ip, [pc, #276]	; 1802c <__assert_fail@plt+0x63a4>
   17f14:	ldr	r5, [r4, lr]
   17f18:	add	ip, pc, ip
   17f1c:	sub	sp, sp, #24
   17f20:	ldr	r0, [ip, #160]	; 0xa0
   17f24:	mov	r7, r1
   17f28:	ldr	r1, [r5]
   17f2c:	cmp	r0, #0
   17f30:	mov	r8, r2
   17f34:	mov	r9, r3
   17f38:	str	r1, [sp, #20]
   17f3c:	bne	17fb4 <__assert_fail@plt+0x632c>
   17f40:	ldr	r3, [pc, #232]	; 18030 <__assert_fail@plt+0x63a8>
   17f44:	ldr	r3, [r4, r3]
   17f48:	ldr	r4, [r3]
   17f4c:	add	r1, sp, #12
   17f50:	mov	r3, r9
   17f54:	str	r1, [sp]
   17f58:	mov	r2, r8
   17f5c:	mov	r0, r6
   17f60:	mov	r1, r7
   17f64:	str	r4, [sp, #12]
   17f68:	bl	17894 <__assert_fail@plt+0x5c0c>
   17f6c:	ldr	r3, [pc, #192]	; 18034 <__assert_fail@plt+0x63ac>
   17f70:	add	r3, pc, r3
   17f74:	ldr	r3, [r3, #160]	; 0xa0
   17f78:	cmp	r3, #0
   17f7c:	bne	17f8c <__assert_fail@plt+0x6304>
   17f80:	ldr	r3, [sp, #12]
   17f84:	cmp	r3, r4
   17f88:	bne	17ffc <__assert_fail@plt+0x6374>
   17f8c:	ldr	r3, [pc, #164]	; 18038 <__assert_fail@plt+0x63b0>
   17f90:	mov	r2, #0
   17f94:	add	r3, pc, r3
   17f98:	str	r2, [r3, #160]	; 0xa0
   17f9c:	ldr	r2, [sp, #20]
   17fa0:	ldr	r3, [r5]
   17fa4:	cmp	r2, r3
   17fa8:	bne	18020 <__assert_fail@plt+0x6398>
   17fac:	add	sp, sp, #24
   17fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fb4:	ldr	r0, [pc, #128]	; 1803c <__assert_fail@plt+0x63b4>
   17fb8:	add	r0, pc, r0
   17fbc:	bl	119e8 <getenv@plt>
   17fc0:	subs	sl, r0, #0
   17fc4:	beq	17ff4 <__assert_fail@plt+0x636c>
   17fc8:	mov	r2, #10
   17fcc:	add	r1, sp, #16
   17fd0:	bl	117fc <strtol@plt>
   17fd4:	ldr	r2, [sp, #16]
   17fd8:	subs	r3, r2, sl
   17fdc:	movne	r3, #1
   17fe0:	cmp	r0, #32768	; 0x8000
   17fe4:	movlt	r3, #0
   17fe8:	cmp	r3, #0
   17fec:	mov	r4, r0
   17ff0:	bne	17f4c <__assert_fail@plt+0x62c4>
   17ff4:	mov	r4, #131072	; 0x20000
   17ff8:	b	17f4c <__assert_fail@plt+0x62c4>
   17ffc:	ldr	r1, [pc, #60]	; 18040 <__assert_fail@plt+0x63b8>
   18000:	mov	r2, r4
   18004:	add	r1, pc, r1
   18008:	mov	r0, #1
   1800c:	bl	1503c <__assert_fail@plt+0x33b4>
   18010:	ldr	r0, [r7]
   18014:	bl	15d84 <__assert_fail@plt+0x40fc>
   18018:	mov	r0, #10
   1801c:	b	17f9c <__assert_fail@plt+0x6314>
   18020:	bl	118e0 <__stack_chk_fail@plt>
   18024:	andeq	pc, r1, r8, lsl pc	; <UNPREDICTABLE>
   18028:			; <UNDEFINED> instruction: 0x000001b0
   1802c:	andeq	r0, r2, r8, lsl r2
   18030:			; <UNDEFINED> instruction: 0x000001b8
   18034:	andeq	r0, r2, r0, asr #3
   18038:	muleq	r2, ip, r1
   1803c:	andeq	sl, r0, r0, lsr #8
   18040:	andeq	fp, r0, ip, lsr #1
   18044:	push	{r4, r5, lr}
   18048:	sub	sp, sp, #20
   1804c:	ldrb	ip, [r1]
   18050:	ldr	r4, [pc, #152]	; 180f0 <__assert_fail@plt+0x6468>
   18054:	ldr	lr, [sp, #32]
   18058:	add	r4, pc, r4
   1805c:	add	ip, r4, ip, lsr #5
   18060:	cmp	lr, #0
   18064:	ldrb	ip, [ip, #28]
   18068:	beq	18078 <__assert_fail@plt+0x63f0>
   1806c:	ldr	r5, [lr]
   18070:	cmp	r5, #0
   18074:	bne	180a8 <__assert_fail@plt+0x6420>
   18078:	cmp	ip, r2
   1807c:	bhi	180cc <__assert_fail@plt+0x6444>
   18080:	sub	r2, r2, ip
   18084:	str	r2, [sp]
   18088:	ldr	r2, [sp, #36]	; 0x24
   1808c:	stmib	sp, {r3, lr}
   18090:	str	r2, [sp, #12]
   18094:	add	r3, r1, ip
   18098:	mov	r2, ip
   1809c:	bl	15eac <__assert_fail@plt+0x4224>
   180a0:	add	sp, sp, #20
   180a4:	pop	{r4, r5, pc}
   180a8:	cmp	ip, r2
   180ac:	beq	18080 <__assert_fail@plt+0x63f8>
   180b0:	ldr	r1, [pc, #60]	; 180f4 <__assert_fail@plt+0x646c>
   180b4:	ldr	r0, [pc, #60]	; 180f8 <__assert_fail@plt+0x6470>
   180b8:	add	r3, r4, #56	; 0x38
   180bc:	ldr	r2, [pc, #56]	; 180fc <__assert_fail@plt+0x6474>
   180c0:	add	r1, pc, r1
   180c4:	add	r0, pc, r0
   180c8:	bl	11c88 <__assert_fail@plt>
   180cc:	ldr	r3, [pc, #44]	; 18100 <__assert_fail@plt+0x6478>
   180d0:	ldr	r1, [pc, #44]	; 18104 <__assert_fail@plt+0x647c>
   180d4:	ldr	r0, [pc, #44]	; 18108 <__assert_fail@plt+0x6480>
   180d8:	add	r3, pc, r3
   180dc:	ldr	r2, [pc, #40]	; 1810c <__assert_fail@plt+0x6484>
   180e0:	add	r3, r3, #56	; 0x38
   180e4:	add	r1, pc, r1
   180e8:	add	r0, pc, r0
   180ec:	bl	11c88 <__assert_fail@plt>
   180f0:	andeq	sl, r0, r4, lsl r3
   180f4:	andeq	sl, r0, r0, lsl #12
   180f8:	andeq	fp, r0, r8, lsr r0
   180fc:	andeq	r1, r0, r3, lsl #16
   18100:	muleq	r0, r4, r2
   18104:	ldrdeq	sl, [r0], -ip
   18108:	andeq	fp, r0, ip, lsr #32
   1810c:	andeq	r1, r0, r5, lsl #16
   18110:	push	{r4, r5, lr}
   18114:	sub	sp, sp, #20
   18118:	ldrb	ip, [r1]
   1811c:	ldr	r4, [pc, #140]	; 181b0 <__assert_fail@plt+0x6528>
   18120:	ldr	lr, [sp, #32]
   18124:	add	r4, pc, r4
   18128:	add	ip, r4, ip, lsr #5
   1812c:	cmp	lr, #0
   18130:	ldrb	ip, [ip, #28]
   18134:	beq	18144 <__assert_fail@plt+0x64bc>
   18138:	ldr	r5, [lr]
   1813c:	cmp	r5, #0
   18140:	bne	18168 <__assert_fail@plt+0x64e0>
   18144:	cmp	ip, r2
   18148:	bhi	1818c <__assert_fail@plt+0x6504>
   1814c:	sub	r2, r2, ip
   18150:	stm	sp, {r2, r3, lr}
   18154:	add	r3, r1, ip
   18158:	mov	r2, ip
   1815c:	bl	16ab8 <__assert_fail@plt+0x4e30>
   18160:	add	sp, sp, #20
   18164:	pop	{r4, r5, pc}
   18168:	cmp	ip, r2
   1816c:	beq	1814c <__assert_fail@plt+0x64c4>
   18170:	ldr	r1, [pc, #60]	; 181b4 <__assert_fail@plt+0x652c>
   18174:	ldr	r0, [pc, #60]	; 181b8 <__assert_fail@plt+0x6530>
   18178:	add	r3, r4, #80	; 0x50
   1817c:	ldr	r2, [pc, #56]	; 181bc <__assert_fail@plt+0x6534>
   18180:	add	r1, pc, r1
   18184:	add	r0, pc, r0
   18188:	bl	11c88 <__assert_fail@plt>
   1818c:	ldr	r3, [pc, #44]	; 181c0 <__assert_fail@plt+0x6538>
   18190:	ldr	r1, [pc, #44]	; 181c4 <__assert_fail@plt+0x653c>
   18194:	ldr	r0, [pc, #44]	; 181c8 <__assert_fail@plt+0x6540>
   18198:	add	r3, pc, r3
   1819c:	ldr	r2, [pc, #40]	; 181cc <__assert_fail@plt+0x6544>
   181a0:	add	r3, r3, #80	; 0x50
   181a4:	add	r1, pc, r1
   181a8:	add	r0, pc, r0
   181ac:	bl	11c88 <__assert_fail@plt>
   181b0:	andeq	sl, r0, r8, asr #4
   181b4:	andeq	sl, r0, r0, asr #10
   181b8:	andeq	sl, r0, r8, ror pc
   181bc:	andeq	r1, r0, r3, lsl r8
   181c0:	ldrdeq	sl, [r0], -r4
   181c4:	andeq	sl, r0, ip, lsl r5
   181c8:	andeq	sl, r0, ip, ror #30
   181cc:	andeq	r1, r0, r5, lsl r8
   181d0:	push	{r1, r2, r3}
   181d4:	ldr	r3, [pc, #100]	; 18240 <__assert_fail@plt+0x65b8>
   181d8:	ldr	r1, [pc, #100]	; 18244 <__assert_fail@plt+0x65bc>
   181dc:	add	r3, pc, r3
   181e0:	push	{r4, lr}
   181e4:	sub	sp, sp, #20
   181e8:	ldr	r4, [r3, r1]
   181ec:	ldr	r2, [pc, #84]	; 18248 <__assert_fail@plt+0x65c0>
   181f0:	add	ip, sp, #32
   181f4:	ldr	r1, [r4]
   181f8:	str	ip, [sp, #8]
   181fc:	str	r1, [sp, #12]
   18200:	ldr	r2, [r3, r2]
   18204:	str	ip, [sp]
   18208:	ldr	r3, [sp, #28]
   1820c:	ldr	r1, [r2]
   18210:	ldr	r2, [pc, #52]	; 1824c <__assert_fail@plt+0x65c4>
   18214:	add	r2, pc, r2
   18218:	bl	1f39c <__assert_fail@plt+0xd714>
   1821c:	ldr	r2, [sp, #12]
   18220:	ldr	r3, [r4]
   18224:	cmp	r2, r3
   18228:	bne	1823c <__assert_fail@plt+0x65b4>
   1822c:	add	sp, sp, #20
   18230:	pop	{r4, lr}
   18234:	add	sp, sp, #12
   18238:	bx	lr
   1823c:	bl	118e0 <__stack_chk_fail@plt>
   18240:	andeq	pc, r1, r8, asr #24
   18244:			; <UNDEFINED> instruction: 0x000001b0
   18248:	andeq	r0, r0, r4, asr #3
   1824c:	andeq	fp, r0, ip, ror #1
   18250:	push	{r4, r5, r6, lr}
   18254:	ldr	r5, [pc, #272]	; 1836c <__assert_fail@plt+0x66e4>
   18258:	ldr	r3, [pc, #272]	; 18370 <__assert_fail@plt+0x66e8>
   1825c:	add	r5, pc, r5
   18260:	add	r3, pc, r3
   18264:	ldr	r4, [r5]
   18268:	cmp	r4, #0
   1826c:	beq	18290 <__assert_fail@plt+0x6608>
   18270:	ldr	r1, [pc, #252]	; 18374 <__assert_fail@plt+0x66ec>
   18274:	mov	r2, r4
   18278:	add	r1, pc, r1
   1827c:	mov	r0, #5
   18280:	bl	181d0 <__assert_fail@plt+0x6548>
   18284:	ldr	r3, [pc, #236]	; 18378 <__assert_fail@plt+0x66f0>
   18288:	ldr	r0, [pc, r3]
   1828c:	pop	{r4, r5, r6, pc}
   18290:	ldr	r2, [pc, #228]	; 1837c <__assert_fail@plt+0x66f4>
   18294:	ldr	r0, [pc, #228]	; 18380 <__assert_fail@plt+0x66f8>
   18298:	ldr	r1, [r3, r2]
   1829c:	add	r0, pc, r0
   182a0:	bl	1f554 <__assert_fail@plt+0xd8cc>
   182a4:	ldr	r0, [pc, #216]	; 18384 <__assert_fail@plt+0x66fc>
   182a8:	add	r0, pc, r0
   182ac:	bl	119e8 <getenv@plt>
   182b0:	cmp	r0, #0
   182b4:	beq	18344 <__assert_fail@plt+0x66bc>
   182b8:	bl	118c8 <strdup@plt>
   182bc:	mov	r4, r0
   182c0:	str	r0, [r5]
   182c4:	cmp	r4, #0
   182c8:	beq	1834c <__assert_fail@plt+0x66c4>
   182cc:	mov	r0, r4
   182d0:	bl	11aa8 <strlen@plt>
   182d4:	subs	r5, r0, #0
   182d8:	beq	18270 <__assert_fail@plt+0x65e8>
   182dc:	add	r3, r4, r5
   182e0:	ldrb	r3, [r3, #-1]
   182e4:	cmp	r3, #58	; 0x3a
   182e8:	bne	18270 <__assert_fail@plt+0x65e8>
   182ec:	add	r0, r5, #14
   182f0:	bl	11a00 <malloc@plt>
   182f4:	mov	r1, r4
   182f8:	mov	r2, r5
   182fc:	mov	r6, r0
   18300:	bl	11880 <memcpy@plt>
   18304:	ldr	r3, [pc, #124]	; 18388 <__assert_fail@plt+0x6700>
   18308:	add	ip, r6, r5
   1830c:	add	r3, pc, r3
   18310:	ldm	r3!, {r0, r1, r2}
   18314:	ldrh	r3, [r3]
   18318:	str	r0, [r6, r5]
   1831c:	mov	r0, r4
   18320:	strh	r3, [ip, #12]
   18324:	str	r1, [ip, #4]
   18328:	str	r2, [ip, #8]
   1832c:	bl	11850 <free@plt>
   18330:	ldr	r3, [pc, #84]	; 1838c <__assert_fail@plt+0x6704>
   18334:	mov	r4, r6
   18338:	add	r3, pc, r3
   1833c:	str	r6, [r3]
   18340:	b	18270 <__assert_fail@plt+0x65e8>
   18344:	ldr	r4, [r5]
   18348:	b	182c4 <__assert_fail@plt+0x663c>
   1834c:	ldr	r0, [pc, #60]	; 18390 <__assert_fail@plt+0x6708>
   18350:	add	r0, pc, r0
   18354:	bl	118c8 <strdup@plt>
   18358:	ldr	r3, [pc, #52]	; 18394 <__assert_fail@plt+0x670c>
   1835c:	add	r3, pc, r3
   18360:	mov	r4, r0
   18364:	str	r0, [r3]
   18368:	b	18270 <__assert_fail@plt+0x65e8>
   1836c:	andeq	r1, r2, r8, lsl #1
   18370:	andeq	pc, r1, r4, asr #23
   18374:	strheq	fp, [r0], -r8
   18378:	andeq	r1, r2, ip, asr r0
   1837c:	andeq	r0, r0, r4, asr #3
   18380:	andeq	fp, r0, r4, rrx
   18384:	andeq	fp, r0, r8, rrx
   18388:	andeq	fp, r0, r4, lsl r0
   1838c:	andeq	r0, r2, ip, lsr #31
   18390:	ldrdeq	sl, [r0], -r0
   18394:	andeq	r0, r2, r8, lsl #31
   18398:	ldr	r3, [pc, #348]	; 184fc <__assert_fail@plt+0x6874>
   1839c:	ldr	r2, [pc, #348]	; 18500 <__assert_fail@plt+0x6878>
   183a0:	add	r3, pc, r3
   183a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183a8:	sub	sp, sp, #4096	; 0x1000
   183ac:	ldr	r3, [r3, r2]
   183b0:	sub	sp, sp, #36	; 0x24
   183b4:	add	r2, sp, #4096	; 0x1000
   183b8:	str	r3, [sp, #16]
   183bc:	add	r2, r2, #28
   183c0:	ldr	r3, [r3]
   183c4:	mov	r7, r0
   183c8:	str	r3, [r2]
   183cc:	bl	18250 <__assert_fail@plt+0x65c8>
   183d0:	subs	r5, r0, #0
   183d4:	beq	184e0 <__assert_fail@plt+0x6858>
   183d8:	bl	118c8 <strdup@plt>
   183dc:	add	r6, sp, #32
   183e0:	ldr	r8, [pc, #284]	; 18504 <__assert_fail@plt+0x687c>
   183e4:	ldr	fp, [pc, #284]	; 18508 <__assert_fail@plt+0x6880>
   183e8:	ldr	sl, [pc, #284]	; 1850c <__assert_fail@plt+0x6884>
   183ec:	add	r9, sp, #24
   183f0:	add	r8, pc, r8
   183f4:	add	fp, pc, fp
   183f8:	add	sl, pc, sl
   183fc:	str	r0, [sp, #20]
   18400:	str	r0, [r6, #-8]
   18404:	b	1845c <__assert_fail@plt+0x67d4>
   18408:	mov	r3, #4096	; 0x1000
   1840c:	sub	r4, r6, #4
   18410:	mov	r2, #47	; 0x2f
   18414:	mov	r1, r3
   18418:	str	r0, [sp, #4]
   1841c:	str	r2, [sp, #8]
   18420:	str	r7, [sp, #12]
   18424:	mov	r2, #1
   18428:	str	fp, [sp]
   1842c:	mov	r0, r4
   18430:	bl	11c7c <__snprintf_chk@plt>
   18434:	mov	r2, r4
   18438:	mov	r1, sl
   1843c:	mov	r0, #4
   18440:	bl	181d0 <__assert_fail@plt+0x6548>
   18444:	ldr	r1, [pc, #196]	; 18510 <__assert_fail@plt+0x6888>
   18448:	mov	r0, r4
   1844c:	add	r1, pc, r1
   18450:	bl	11814 <fopen@plt>
   18454:	cmp	r0, #0
   18458:	bne	184bc <__assert_fail@plt+0x6834>
   1845c:	mov	r1, r8
   18460:	mov	r0, r9
   18464:	bl	11a48 <strsep@plt>
   18468:	cmp	r0, #0
   1846c:	bne	18408 <__assert_fail@plt+0x6780>
   18470:	mov	r5, r0
   18474:	ldr	r0, [sp, #20]
   18478:	bl	11850 <free@plt>
   1847c:	ldr	r1, [pc, #144]	; 18514 <__assert_fail@plt+0x688c>
   18480:	mov	r2, r7
   18484:	add	r1, pc, r1
   18488:	mov	r0, #2
   1848c:	bl	181d0 <__assert_fail@plt+0x6548>
   18490:	add	r3, sp, #4096	; 0x1000
   18494:	add	r3, r3, #28
   18498:	ldr	r2, [r3]
   1849c:	ldr	r3, [sp, #16]
   184a0:	mov	r0, r5
   184a4:	ldr	r3, [r3]
   184a8:	cmp	r2, r3
   184ac:	bne	184f8 <__assert_fail@plt+0x6870>
   184b0:	add	sp, sp, #4096	; 0x1000
   184b4:	add	sp, sp, #36	; 0x24
   184b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184bc:	ldr	r1, [pc, #84]	; 18518 <__assert_fail@plt+0x6890>
   184c0:	mov	r5, r0
   184c4:	mov	r2, r4
   184c8:	add	r1, pc, r1
   184cc:	mov	r0, #3
   184d0:	bl	181d0 <__assert_fail@plt+0x6548>
   184d4:	ldr	r0, [sp, #20]
   184d8:	bl	11850 <free@plt>
   184dc:	b	18490 <__assert_fail@plt+0x6808>
   184e0:	ldr	r1, [pc, #52]	; 1851c <__assert_fail@plt+0x6894>
   184e4:	mov	r2, r7
   184e8:	add	r1, pc, r1
   184ec:	mov	r0, #2
   184f0:	bl	181d0 <__assert_fail@plt+0x6548>
   184f4:	b	18490 <__assert_fail@plt+0x6808>
   184f8:	bl	118e0 <__stack_chk_fail@plt>
   184fc:	andeq	pc, r1, r4, lsl #21
   18500:			; <UNDEFINED> instruction: 0x000001b0
   18504:	andeq	sl, r0, r0, asr sp
   18508:	andeq	sl, r0, r8, lsr #31
   1850c:	andeq	sl, r0, ip, lsr #31
   18510:	andeq	sl, r0, r4, ror lr
   18514:	andeq	sl, r0, r4, ror #29
   18518:	andeq	sl, r0, r8, lsl #30
   1851c:	andeq	sl, r0, r0, lsl #29
   18520:	push	{r4, r5, r6, lr}
   18524:	subs	r5, r0, #0
   18528:	beq	18568 <__assert_fail@plt+0x68e0>
   1852c:	ldrb	r4, [r5]
   18530:	cmp	r4, #0
   18534:	beq	18568 <__assert_fail@plt+0x68e0>
   18538:	bl	11a6c <__ctype_b_loc@plt>
   1853c:	ldr	r1, [r0]
   18540:	b	18558 <__assert_fail@plt+0x68d0>
   18544:	adds	r5, r5, #1
   18548:	beq	18568 <__assert_fail@plt+0x68e0>
   1854c:	ldrb	r4, [r5]
   18550:	cmp	r4, #0
   18554:	beq	18568 <__assert_fail@plt+0x68e0>
   18558:	lsl	r4, r4, #1
   1855c:	ldrh	r2, [r1, r4]
   18560:	tst	r2, #8192	; 0x2000
   18564:	bne	18544 <__assert_fail@plt+0x68bc>
   18568:	mov	r0, r5
   1856c:	pop	{r4, r5, r6, pc}
   18570:	push	{r4, r5, r6, r7, r8, lr}
   18574:	mov	r6, r1
   18578:	bl	18520 <__assert_fail@plt+0x6898>
   1857c:	ldrb	r4, [r0]
   18580:	mov	r7, r0
   18584:	cmp	r4, #34	; 0x22
   18588:	beq	185d8 <__assert_fail@plt+0x6950>
   1858c:	cmp	r4, #0
   18590:	beq	18628 <__assert_fail@plt+0x69a0>
   18594:	bl	11a6c <__ctype_b_loc@plt>
   18598:	mov	r5, r7
   1859c:	ldr	r2, [r0]
   185a0:	b	185b0 <__assert_fail@plt+0x6928>
   185a4:	ldrb	r4, [r5, #1]!
   185a8:	cmp	r4, #0
   185ac:	beq	185c0 <__assert_fail@plt+0x6938>
   185b0:	lsl	r4, r4, #1
   185b4:	ldrh	r3, [r2, r4]
   185b8:	tst	r3, #8192	; 0x2000
   185bc:	beq	185a4 <__assert_fail@plt+0x691c>
   185c0:	sub	r1, r5, r7
   185c4:	mov	r0, r7
   185c8:	bl	11874 <strndup@plt>
   185cc:	str	r0, [r6]
   185d0:	mov	r0, r5
   185d4:	pop	{r4, r5, r6, r7, r8, pc}
   185d8:	ldrb	r3, [r0, #1]
   185dc:	add	r7, r0, #1
   185e0:	mov	r5, r7
   185e4:	cmp	r3, #34	; 0x22
   185e8:	cmpne	r3, #0
   185ec:	movne	r1, #1
   185f0:	moveq	r1, #0
   185f4:	beq	1860c <__assert_fail@plt+0x6984>
   185f8:	ldrb	r3, [r5, #1]!
   185fc:	cmp	r3, #0
   18600:	cmpne	r3, #34	; 0x22
   18604:	bne	185f8 <__assert_fail@plt+0x6970>
   18608:	sub	r1, r5, r7
   1860c:	cmp	r3, #34	; 0x22
   18610:	addeq	r5, r5, #1
   18614:	beq	185c4 <__assert_fail@plt+0x693c>
   18618:	mov	r3, #0
   1861c:	str	r3, [r6]
   18620:	mov	r0, r5
   18624:	pop	{r4, r5, r6, r7, r8, pc}
   18628:	mov	r1, r4
   1862c:	mov	r5, r0
   18630:	b	185c4 <__assert_fail@plt+0x693c>
   18634:	push	{r4, r5, r6, lr}
   18638:	mov	r5, r0
   1863c:	bl	1185c <fgets@plt>
   18640:	subs	r6, r0, #0
   18644:	beq	186e0 <__assert_fail@plt+0x6a58>
   18648:	mov	r0, r5
   1864c:	bl	11aa8 <strlen@plt>
   18650:	mov	r4, r0
   18654:	bl	11a6c <__ctype_b_loc@plt>
   18658:	cmp	r4, #0
   1865c:	ldr	ip, [r0]
   18660:	beq	1869c <__assert_fail@plt+0x6a14>
   18664:	sub	r3, r4, #1
   18668:	add	r3, r5, r3
   1866c:	mov	lr, #0
   18670:	rsb	r1, r5, #1
   18674:	b	18688 <__assert_fail@plt+0x6a00>
   18678:	cmn	r1, r3
   1867c:	strb	lr, [r3, #1]
   18680:	ldr	ip, [r0]
   18684:	beq	1869c <__assert_fail@plt+0x6a14>
   18688:	ldrb	r2, [r3], #-1
   1868c:	lsl	r2, r2, #1
   18690:	ldrh	r2, [ip, r2]
   18694:	tst	r2, #8192	; 0x2000
   18698:	bne	18678 <__assert_fail@plt+0x69f0>
   1869c:	mov	r2, r5
   186a0:	b	186a8 <__assert_fail@plt+0x6a20>
   186a4:	mov	r2, r3
   186a8:	mov	r3, r2
   186ac:	ldrb	r1, [r3], #1
   186b0:	lsl	r0, r1, #1
   186b4:	ldrh	r0, [ip, r0]
   186b8:	tst	r0, #8192	; 0x2000
   186bc:	bne	186a4 <__assert_fail@plt+0x6a1c>
   186c0:	cmp	r2, r5
   186c4:	bne	186d0 <__assert_fail@plt+0x6a48>
   186c8:	b	186e0 <__assert_fail@plt+0x6a58>
   186cc:	ldrb	r1, [r2, #1]!
   186d0:	strb	r1, [r5], #1
   186d4:	ldrb	r3, [r5]
   186d8:	cmp	r3, #0
   186dc:	bne	186cc <__assert_fail@plt+0x6a44>
   186e0:	mov	r0, r6
   186e4:	pop	{r4, r5, r6, pc}
   186e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186ec:	vpush	{d8}
   186f0:	ldr	r3, [pc, #1096]	; 18b40 <__assert_fail@plt+0x6eb8>
   186f4:	ldr	ip, [pc, #1096]	; 18b44 <__assert_fail@plt+0x6ebc>
   186f8:	add	r3, pc, r3
   186fc:	sub	sp, sp, #4160	; 0x1040
   18700:	sub	sp, sp, #12
   18704:	mov	r4, r0
   18708:	str	r1, [sp]
   1870c:	ldr	r1, [r3, ip]
   18710:	str	r2, [sp, #44]	; 0x2c
   18714:	mov	ip, r1
   18718:	str	r1, [sp, #36]	; 0x24
   1871c:	add	r2, sp, #4160	; 0x1040
   18720:	ldr	r1, [pc, #1056]	; 18b48 <__assert_fail@plt+0x6ec0>
   18724:	ldr	r3, [ip]
   18728:	add	r2, r2, #4
   1872c:	add	r1, pc, r1
   18730:	mov	r0, #3
   18734:	str	r3, [r2]
   18738:	bl	181d0 <__assert_fail@plt+0x6548>
   1873c:	mov	r0, r4
   18740:	bl	18398 <__assert_fail@plt+0x6710>
   18744:	subs	r3, r0, #0
   18748:	str	r3, [sp, #20]
   1874c:	beq	18d2c <__assert_fail@plt+0x70a4>
   18750:	ldr	r3, [pc, #1012]	; 18b4c <__assert_fail@plt+0x6ec4>
   18754:	vldr	d8, [pc, #988]	; 18b38 <__assert_fail@plt+0x6eb0>
   18758:	add	r3, pc, r3
   1875c:	add	sl, sp, #72	; 0x48
   18760:	mov	r7, #0
   18764:	str	r3, [sp, #40]	; 0x28
   18768:	add	r3, sp, #68	; 0x44
   1876c:	str	r7, [sp, #24]
   18770:	str	r3, [sp, #4]
   18774:	ldr	r2, [sp, #20]
   18778:	mov	r1, #4096	; 0x1000
   1877c:	ldr	r0, [sp, #4]
   18780:	bl	18634 <__assert_fail@plt+0x69ac>
   18784:	adds	r0, r0, #0
   18788:	movne	r0, #1
   1878c:	cmp	r7, #0
   18790:	movne	r0, #0
   18794:	cmp	r0, #0
   18798:	beq	18cfc <__assert_fail@plt+0x7074>
   1879c:	ldr	r4, [sp, #4]
   187a0:	mov	r0, r4
   187a4:	bl	18520 <__assert_fail@plt+0x6898>
   187a8:	ldrb	r7, [r0]
   187ac:	str	r0, [sp, #16]
   187b0:	cmp	r7, #0
   187b4:	beq	18774 <__assert_fail@plt+0x6aec>
   187b8:	ldrb	r3, [sl, #-4]
   187bc:	cmp	r3, #35	; 0x23
   187c0:	beq	18c6c <__assert_fail@plt+0x6fe4>
   187c4:	mov	r0, r4
   187c8:	bl	11aa8 <strlen@plt>
   187cc:	sub	r4, sl, #12
   187d0:	mov	r1, r4
   187d4:	sub	r0, r0, #1
   187d8:	add	r0, sl, r0
   187dc:	ldrb	r3, [r0, #-4]
   187e0:	cmp	r3, #10
   187e4:	moveq	r3, #0
   187e8:	strbeq	r3, [r0, #-4]
   187ec:	ldr	r0, [sp, #16]
   187f0:	bl	18570 <__assert_fail@plt+0x68e8>
   187f4:	ldr	r9, [sl, #-12]
   187f8:	ldr	r1, [pc, #848]	; 18b50 <__assert_fail@plt+0x6ec8>
   187fc:	mov	r2, #6
   18800:	add	r1, pc, r1
   18804:	mov	r5, r0
   18808:	mov	r0, r9
   1880c:	bl	11c40 <strncmp@plt>
   18810:	cmp	r0, #0
   18814:	beq	18cd4 <__assert_fail@plt+0x704c>
   18818:	ldr	r3, [sp]
   1881c:	cmp	r3, #0
   18820:	beq	18d5c <__assert_fail@plt+0x70d4>
   18824:	ldr	r3, [r3]
   18828:	cmp	r3, #0
   1882c:	str	r3, [sp, #12]
   18830:	ble	18d5c <__assert_fail@plt+0x70d4>
   18834:	ldr	r3, [pc, #792]	; 18b54 <__assert_fail@plt+0x6ecc>
   18838:	mov	r6, #0
   1883c:	add	r3, pc, r3
   18840:	str	r3, [sp, #28]
   18844:	ldr	r3, [pc, #780]	; 18b58 <__assert_fail@plt+0x6ed0>
   18848:	mov	r8, r6
   1884c:	add	r3, pc, r3
   18850:	str	r3, [sp, #48]	; 0x30
   18854:	ldr	r3, [sp]
   18858:	lsl	r2, r6, #2
   1885c:	mov	r1, r9
   18860:	ldr	r3, [r3, #4]
   18864:	str	r2, [sp, #8]
   18868:	ldr	r7, [r3, r6, lsl #2]
   1886c:	ldr	fp, [r7]
   18870:	mov	r0, fp
   18874:	bl	117e4 <strcmp@plt>
   18878:	subs	r4, r0, #0
   1887c:	bne	18c40 <__assert_fail@plt+0x6fb8>
   18880:	ldr	r2, [r7, #12]
   18884:	cmp	r2, #3
   18888:	addls	pc, pc, r2, lsl #2
   1888c:	b	18b84 <__assert_fail@plt+0x6efc>
   18890:	b	18a54 <__assert_fail@plt+0x6dcc>
   18894:	b	189e4 <__assert_fail@plt+0x6d5c>
   18898:	b	18928 <__assert_fail@plt+0x6ca0>
   1889c:	b	188a0 <__assert_fail@plt+0x6c18>
   188a0:	sub	r1, sl, #8
   188a4:	mov	r0, r5
   188a8:	bl	18570 <__assert_fail@plt+0x68e8>
   188ac:	ldr	r9, [sl, #-8]
   188b0:	cmp	r9, #0
   188b4:	beq	18d84 <__assert_fail@plt+0x70fc>
   188b8:	mov	r0, r9
   188bc:	bl	11aa8 <strlen@plt>
   188c0:	ldr	ip, [sp]
   188c4:	ldr	lr, [sp, #8]
   188c8:	ldr	r3, [ip, #4]
   188cc:	ldr	r3, [r3, lr]
   188d0:	ldr	r2, [r3, #20]
   188d4:	add	r1, r0, #1
   188d8:	cmp	r2, r1
   188dc:	str	r1, [sp, #24]
   188e0:	bge	18900 <__assert_fail@plt+0x6c78>
   188e4:	sub	r3, r2, #1
   188e8:	mov	r2, r3
   188ec:	str	r3, [sp, #24]
   188f0:	mov	r3, #0
   188f4:	strb	r3, [r9, r2]
   188f8:	ldr	r3, [ip, #4]
   188fc:	ldr	r3, [r3, lr]
   18900:	mov	r0, r3
   18904:	mov	r1, r9
   18908:	bl	1ef1c <__assert_fail@plt+0xd294>
   1890c:	subs	r8, r0, #0
   18910:	beq	18bb8 <__assert_fail@plt+0x6f30>
   18914:	mov	r0, r9
   18918:	bl	11850 <free@plt>
   1891c:	mov	r4, #1
   18920:	ldr	r9, [sl, #-12]
   18924:	b	18cac <__assert_fail@plt+0x7024>
   18928:	ldr	r3, [r7, #20]
   1892c:	mov	r0, r3
   18930:	mov	r8, r3
   18934:	str	r3, [sp, #24]
   18938:	bl	11a00 <malloc@plt>
   1893c:	lsrs	fp, r8, #2
   18940:	mov	r9, r0
   18944:	beq	18c88 <__assert_fail@plt+0x7000>
   18948:	sub	r8, r0, #4
   1894c:	add	r7, sp, #64	; 0x40
   18950:	b	18980 <__assert_fail@plt+0x6cf8>
   18954:	mov	r1, #0
   18958:	bl	11b38 <strtod@plt>
   1895c:	add	r4, r4, #1
   18960:	ldr	r0, [sl, #-8]
   18964:	vmul.f64	d0, d0, d8
   18968:	vcvt.s32.f64	s0, d0
   1896c:	vmov	r3, s0
   18970:	str	r3, [r8, #4]!
   18974:	bl	11850 <free@plt>
   18978:	cmp	fp, r4
   1897c:	beq	18c78 <__assert_fail@plt+0x6ff0>
   18980:	mov	r0, r5
   18984:	mov	r1, r7
   18988:	bl	18570 <__assert_fail@plt+0x68e8>
   1898c:	mov	r5, r0
   18990:	ldr	r0, [sl, #-8]
   18994:	cmp	r0, #0
   18998:	bne	18954 <__assert_fail@plt+0x6ccc>
   1899c:	ldr	r1, [pc, #440]	; 18b5c <__assert_fail@plt+0x6ed4>
   189a0:	mov	r0, #2
   189a4:	add	r1, pc, r1
   189a8:	bl	181d0 <__assert_fail@plt+0x6548>
   189ac:	mov	r3, #4
   189b0:	mov	r4, r3
   189b4:	add	r3, sp, #4160	; 0x1040
   189b8:	add	r3, r3, #4
   189bc:	ldr	r2, [r3]
   189c0:	ldr	r3, [sp, #36]	; 0x24
   189c4:	mov	r0, r4
   189c8:	ldr	r3, [r3]
   189cc:	cmp	r2, r3
   189d0:	bne	18da0 <__assert_fail@plt+0x7118>
   189d4:	add	sp, sp, #4160	; 0x1040
   189d8:	add	sp, sp, #12
   189dc:	vpop	{d8}
   189e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189e4:	ldr	r3, [r7, #20]
   189e8:	mov	r0, r3
   189ec:	mov	r8, r3
   189f0:	str	r3, [sp, #24]
   189f4:	bl	11a00 <malloc@plt>
   189f8:	lsrs	fp, r8, #2
   189fc:	mov	r9, r0
   18a00:	beq	18c88 <__assert_fail@plt+0x7000>
   18a04:	sub	r8, r0, #4
   18a08:	add	r7, sp, #64	; 0x40
   18a0c:	b	18a34 <__assert_fail@plt+0x6dac>
   18a10:	mov	r2, #0
   18a14:	mov	r1, r2
   18a18:	bl	117fc <strtol@plt>
   18a1c:	add	r4, r4, #1
   18a20:	str	r0, [r8, #4]!
   18a24:	ldr	r0, [sl, #-8]
   18a28:	bl	11850 <free@plt>
   18a2c:	cmp	fp, r4
   18a30:	beq	18c78 <__assert_fail@plt+0x6ff0>
   18a34:	mov	r0, r5
   18a38:	mov	r1, r7
   18a3c:	bl	18570 <__assert_fail@plt+0x68e8>
   18a40:	mov	r5, r0
   18a44:	ldr	r0, [sl, #-8]
   18a48:	cmp	r0, #0
   18a4c:	bne	18a10 <__assert_fail@plt+0x6d88>
   18a50:	b	1899c <__assert_fail@plt+0x6d14>
   18a54:	ldr	r3, [r7, #20]
   18a58:	mov	r0, r3
   18a5c:	mov	r8, r3
   18a60:	str	r3, [sp, #24]
   18a64:	bl	11a00 <malloc@plt>
   18a68:	lsrs	r8, r8, #2
   18a6c:	mov	r9, r0
   18a70:	beq	18c88 <__assert_fail@plt+0x7000>
   18a74:	ldr	r3, [pc, #228]	; 18b60 <__assert_fail@plt+0x6ed8>
   18a78:	str	r6, [sp, #52]	; 0x34
   18a7c:	add	r3, pc, r3
   18a80:	str	r3, [sp, #12]
   18a84:	ldr	r3, [pc, #216]	; 18b64 <__assert_fail@plt+0x6edc>
   18a88:	add	r7, sp, #64	; 0x40
   18a8c:	add	r3, pc, r3
   18a90:	str	r3, [sp, #32]
   18a94:	ldr	r6, [sp, #40]	; 0x28
   18a98:	b	18af8 <__assert_fail@plt+0x6e70>
   18a9c:	ldr	r1, [sp, #12]
   18aa0:	mov	r0, fp
   18aa4:	bl	117e4 <strcmp@plt>
   18aa8:	cmp	r0, #0
   18aac:	beq	18b28 <__assert_fail@plt+0x6ea0>
   18ab0:	ldr	r1, [sp, #32]
   18ab4:	mov	r0, fp
   18ab8:	bl	117e4 <strcmp@plt>
   18abc:	cmp	r0, #0
   18ac0:	beq	18adc <__assert_fail@plt+0x6e54>
   18ac4:	ldr	r1, [pc, #156]	; 18b68 <__assert_fail@plt+0x6ee0>
   18ac8:	mov	r0, fp
   18acc:	add	r1, pc, r1
   18ad0:	bl	117e4 <strcmp@plt>
   18ad4:	cmp	r0, #0
   18ad8:	bne	18d68 <__assert_fail@plt+0x70e0>
   18adc:	mov	r2, #0
   18ae0:	str	r2, [r9, r4, lsl #2]
   18ae4:	mov	r0, fp
   18ae8:	add	r4, r4, #1
   18aec:	bl	11850 <free@plt>
   18af0:	cmp	r8, r4
   18af4:	beq	18c74 <__assert_fail@plt+0x6fec>
   18af8:	mov	r0, r5
   18afc:	mov	r1, r7
   18b00:	bl	18570 <__assert_fail@plt+0x68e8>
   18b04:	ldr	fp, [sl, #-8]
   18b08:	cmp	fp, #0
   18b0c:	mov	r5, r0
   18b10:	beq	1899c <__assert_fail@plt+0x6d14>
   18b14:	mov	r1, r6
   18b18:	mov	r0, fp
   18b1c:	bl	117e4 <strcmp@plt>
   18b20:	cmp	r0, #0
   18b24:	bne	18a9c <__assert_fail@plt+0x6e14>
   18b28:	mov	r2, #1
   18b2c:	str	r2, [r9, r4, lsl #2]
   18b30:	b	18ae4 <__assert_fail@plt+0x6e5c>
   18b34:	nop			; (mov r0, r0)
   18b38:	andeq	r0, r0, r0
   18b3c:	rscsmi	r0, r0, r0
   18b40:	andeq	pc, r1, ip, lsr #14
   18b44:			; <UNDEFINED> instruction: 0x000001b0
   18b48:	andeq	sl, r0, r8, asr #25
   18b4c:	andeq	r8, r0, r8, ror sp
   18b50:	andeq	sl, r0, r0, ror #24
   18b54:	andeq	sl, r0, r0, asr #26
   18b58:	andeq	sl, r0, r0, ror #25
   18b5c:	andeq	sl, r0, r4, asr #21
   18b60:	andeq	sl, r0, r4, lsr #20
   18b64:	andeq	r7, r0, r0, asr #10
   18b68:	ldrdeq	sl, [r0], -ip
   18b6c:	andeq	sl, r0, r8, lsr #19
   18b70:	andeq	sl, r0, r4, lsr r7
   18b74:	andeq	sl, r0, r0, ror #13
   18b78:	strdeq	sl, [r0], -r8
   18b7c:	andeq	sl, r0, r0, asr #14
   18b80:	andeq	sl, r0, r0, ror #14
   18b84:	mov	r3, fp
   18b88:	ldr	r1, [sp, #48]	; 0x30
   18b8c:	mov	r0, #1
   18b90:	bl	181d0 <__assert_fail@plt+0x6548>
   18b94:	ldr	r3, [sp]
   18b98:	ldr	r2, [sp, #8]
   18b9c:	mov	r1, #0
   18ba0:	ldr	r3, [r3, #4]
   18ba4:	ldr	r0, [r3, r2]
   18ba8:	bl	1ef1c <__assert_fail@plt+0xd294>
   18bac:	subs	r8, r0, #0
   18bb0:	bne	18ca4 <__assert_fail@plt+0x701c>
   18bb4:	mov	r9, r8
   18bb8:	ldr	r4, [sp]
   18bbc:	ldr	r0, [sp, #8]
   18bc0:	mov	r1, r9
   18bc4:	ldr	r3, [r4, #8]
   18bc8:	ldr	r2, [sp, #24]
   18bcc:	add	r6, r6, #1
   18bd0:	ldr	r0, [r3, r0]
   18bd4:	bl	11880 <memcpy@plt>
   18bd8:	mov	r0, r9
   18bdc:	bl	11850 <free@plt>
   18be0:	ldr	r3, [r4]
   18be4:	ldr	r9, [sl, #-12]
   18be8:	cmp	r6, r3
   18bec:	blt	18d1c <__assert_fail@plt+0x7094>
   18bf0:	mov	r4, #1
   18bf4:	mov	r7, #0
   18bf8:	mov	r0, r9
   18bfc:	bl	11850 <free@plt>
   18c00:	orrs	r3, r7, r4
   18c04:	bne	18774 <__assert_fail@plt+0x6aec>
   18c08:	ldr	r4, [sp, #16]
   18c0c:	ldr	r1, [pc, #-168]	; 18b6c <__assert_fail@plt+0x6ee4>
   18c10:	mov	r2, r4
   18c14:	add	r1, pc, r1
   18c18:	mov	r0, #3
   18c1c:	bl	181d0 <__assert_fail@plt+0x6548>
   18c20:	ldr	r3, [sp, #44]	; 0x2c
   18c24:	cmp	r3, #0
   18c28:	beq	18c6c <__assert_fail@plt+0x6fe4>
   18c2c:	mov	r1, r4
   18c30:	ldr	r0, [sp]
   18c34:	blx	r3
   18c38:	mov	r7, #0
   18c3c:	b	18774 <__assert_fail@plt+0x6aec>
   18c40:	cmp	r8, #0
   18c44:	moveq	r4, r8
   18c48:	bne	18cf4 <__assert_fail@plt+0x706c>
   18c4c:	ldr	r3, [sp, #12]
   18c50:	add	r6, r6, #1
   18c54:	cmp	r3, r6
   18c58:	ble	18da4 <__assert_fail@plt+0x711c>
   18c5c:	cmp	r4, #0
   18c60:	beq	18854 <__assert_fail@plt+0x6bcc>
   18c64:	mov	r7, r8
   18c68:	b	18d20 <__assert_fail@plt+0x7098>
   18c6c:	mov	r7, #0
   18c70:	b	18774 <__assert_fail@plt+0x6aec>
   18c74:	ldr	r6, [sp, #52]	; 0x34
   18c78:	ldr	r3, [sp]
   18c7c:	ldr	r2, [sp, #8]
   18c80:	ldr	r3, [r3, #4]
   18c84:	ldr	r7, [r3, r2]
   18c88:	mov	r0, r7
   18c8c:	mov	r1, r9
   18c90:	bl	1ef1c <__assert_fail@plt+0xd294>
   18c94:	subs	r8, r0, #0
   18c98:	beq	18bb8 <__assert_fail@plt+0x6f30>
   18c9c:	cmp	r9, #0
   18ca0:	bne	18914 <__assert_fail@plt+0x6c8c>
   18ca4:	ldr	r9, [sl, #-12]
   18ca8:	mov	r4, #1
   18cac:	mov	r2, r9
   18cb0:	ldr	r3, [sp, #4]
   18cb4:	ldr	r1, [sp, #28]
   18cb8:	mov	r0, #1
   18cbc:	bl	181d0 <__assert_fail@plt+0x6548>
   18cc0:	ldr	r3, [sp]
   18cc4:	ldr	r9, [sl, #-12]
   18cc8:	ldr	r3, [r3]
   18ccc:	str	r3, [sp, #12]
   18cd0:	b	18c4c <__assert_fail@plt+0x6fc4>
   18cd4:	mov	r0, r9
   18cd8:	bl	11850 <free@plt>
   18cdc:	mov	r0, r5
   18ce0:	mov	r1, r4
   18ce4:	bl	18570 <__assert_fail@plt+0x68e8>
   18ce8:	ldr	r9, [sl, #-12]
   18cec:	mov	r5, r0
   18cf0:	b	18818 <__assert_fail@plt+0x6b90>
   18cf4:	mov	r4, #0
   18cf8:	b	18cac <__assert_fail@plt+0x7024>
   18cfc:	ldr	r0, [sp, #20]
   18d00:	bl	11b74 <fclose@plt>
   18d04:	ldr	r1, [pc, #-412]	; 18b70 <__assert_fail@plt+0x6ee8>
   18d08:	mov	r0, #3
   18d0c:	add	r1, pc, r1
   18d10:	mov	r4, r7
   18d14:	bl	181d0 <__assert_fail@plt+0x6548>
   18d18:	b	189b4 <__assert_fail@plt+0x6d2c>
   18d1c:	mov	r7, #0
   18d20:	mov	r0, r9
   18d24:	bl	11850 <free@plt>
   18d28:	b	18774 <__assert_fail@plt+0x6aec>
   18d2c:	ldr	r1, [pc, #-448]	; 18b74 <__assert_fail@plt+0x6eec>
   18d30:	mov	r2, r4
   18d34:	add	r1, pc, r1
   18d38:	mov	r0, #2
   18d3c:	bl	181d0 <__assert_fail@plt+0x6548>
   18d40:	ldr	r1, [pc, #-464]	; 18b78 <__assert_fail@plt+0x6ef0>
   18d44:	mov	r0, #3
   18d48:	add	r1, pc, r1
   18d4c:	bl	181d0 <__assert_fail@plt+0x6548>
   18d50:	mov	r3, #11
   18d54:	mov	r4, r3
   18d58:	b	189b4 <__assert_fail@plt+0x6d2c>
   18d5c:	mov	r0, r9
   18d60:	bl	11850 <free@plt>
   18d64:	b	18c08 <__assert_fail@plt+0x6f80>
   18d68:	ldr	r1, [pc, #-500]	; 18b7c <__assert_fail@plt+0x6ef4>
   18d6c:	mov	r0, #2
   18d70:	add	r1, pc, r1
   18d74:	bl	181d0 <__assert_fail@plt+0x6548>
   18d78:	mov	r3, #4
   18d7c:	mov	r4, r3
   18d80:	b	189b4 <__assert_fail@plt+0x6d2c>
   18d84:	ldr	r1, [pc, #-524]	; 18b80 <__assert_fail@plt+0x6ef8>
   18d88:	mov	r0, #2
   18d8c:	add	r1, pc, r1
   18d90:	bl	181d0 <__assert_fail@plt+0x6548>
   18d94:	mov	r3, #4
   18d98:	mov	r4, r3
   18d9c:	b	189b4 <__assert_fail@plt+0x6d2c>
   18da0:	bl	118e0 <__stack_chk_fail@plt>
   18da4:	mov	r7, r8
   18da8:	b	18bf8 <__assert_fail@plt+0x6f70>
   18dac:	add	r0, r0, #10
   18db0:	cmp	r0, #10
   18db4:	addls	pc, pc, r0, lsl #2
   18db8:	b	18e6c <__assert_fail@plt+0x71e4>
   18dbc:	b	18df4 <__assert_fail@plt+0x716c>
   18dc0:	b	18e00 <__assert_fail@plt+0x7178>
   18dc4:	b	18e0c <__assert_fail@plt+0x7184>
   18dc8:	b	18e18 <__assert_fail@plt+0x7190>
   18dcc:	b	18e24 <__assert_fail@plt+0x719c>
   18dd0:	b	18e30 <__assert_fail@plt+0x71a8>
   18dd4:	b	18e3c <__assert_fail@plt+0x71b4>
   18dd8:	b	18e48 <__assert_fail@plt+0x71c0>
   18ddc:	b	18e54 <__assert_fail@plt+0x71cc>
   18de0:	b	18e60 <__assert_fail@plt+0x71d8>
   18de4:	b	18de8 <__assert_fail@plt+0x7160>
   18de8:	ldr	r0, [pc, #136]	; 18e78 <__assert_fail@plt+0x71f0>
   18dec:	add	r0, pc, r0
   18df0:	bx	lr
   18df4:	ldr	r0, [pc, #128]	; 18e7c <__assert_fail@plt+0x71f4>
   18df8:	add	r0, pc, r0
   18dfc:	bx	lr
   18e00:	ldr	r0, [pc, #120]	; 18e80 <__assert_fail@plt+0x71f8>
   18e04:	add	r0, pc, r0
   18e08:	bx	lr
   18e0c:	ldr	r0, [pc, #112]	; 18e84 <__assert_fail@plt+0x71fc>
   18e10:	add	r0, pc, r0
   18e14:	bx	lr
   18e18:	ldr	r0, [pc, #104]	; 18e88 <__assert_fail@plt+0x7200>
   18e1c:	add	r0, pc, r0
   18e20:	bx	lr
   18e24:	ldr	r0, [pc, #96]	; 18e8c <__assert_fail@plt+0x7204>
   18e28:	add	r0, pc, r0
   18e2c:	bx	lr
   18e30:	ldr	r0, [pc, #88]	; 18e90 <__assert_fail@plt+0x7208>
   18e34:	add	r0, pc, r0
   18e38:	bx	lr
   18e3c:	ldr	r0, [pc, #80]	; 18e94 <__assert_fail@plt+0x720c>
   18e40:	add	r0, pc, r0
   18e44:	bx	lr
   18e48:	ldr	r0, [pc, #72]	; 18e98 <__assert_fail@plt+0x7210>
   18e4c:	add	r0, pc, r0
   18e50:	bx	lr
   18e54:	ldr	r0, [pc, #64]	; 18e9c <__assert_fail@plt+0x7214>
   18e58:	add	r0, pc, r0
   18e5c:	bx	lr
   18e60:	ldr	r0, [pc, #56]	; 18ea0 <__assert_fail@plt+0x7218>
   18e64:	add	r0, pc, r0
   18e68:	bx	lr
   18e6c:	ldr	r0, [pc, #48]	; 18ea4 <__assert_fail@plt+0x721c>
   18e70:	add	r0, pc, r0
   18e74:	bx	lr
   18e78:	andeq	sl, r0, r4, lsl r8
   18e7c:	ldrdeq	sl, [r0], -r8
   18e80:			; <UNDEFINED> instruction: 0x0000a8b0
   18e84:	andeq	sl, r0, r8, lsl #17
   18e88:	andeq	sl, r0, r4, ror #16
   18e8c:	andeq	sl, r0, r8, asr #16
   18e90:	andeq	sl, r0, r4, lsr #16
   18e94:	strdeq	sl, [r0], -r8
   18e98:	andeq	r8, r0, r4, lsl r3
   18e9c:	andeq	sl, r0, r0, asr #15
   18ea0:	andeq	sl, r0, ip, ror r8
   18ea4:	andeq	sl, r0, r0, lsl #15
   18ea8:	push	{r1, r2, r3}
   18eac:	ldr	r3, [pc, #100]	; 18f18 <__assert_fail@plt+0x7290>
   18eb0:	ldr	r1, [pc, #100]	; 18f1c <__assert_fail@plt+0x7294>
   18eb4:	add	r3, pc, r3
   18eb8:	push	{r4, lr}
   18ebc:	sub	sp, sp, #20
   18ec0:	ldr	r4, [r3, r1]
   18ec4:	ldr	r2, [pc, #84]	; 18f20 <__assert_fail@plt+0x7298>
   18ec8:	add	ip, sp, #32
   18ecc:	ldr	r1, [r4]
   18ed0:	str	ip, [sp, #8]
   18ed4:	str	r1, [sp, #12]
   18ed8:	ldr	r2, [r3, r2]
   18edc:	str	ip, [sp]
   18ee0:	ldr	r3, [sp, #28]
   18ee4:	ldr	r1, [r2]
   18ee8:	ldr	r2, [pc, #52]	; 18f24 <__assert_fail@plt+0x729c>
   18eec:	add	r2, pc, r2
   18ef0:	bl	1f39c <__assert_fail@plt+0xd714>
   18ef4:	ldr	r2, [sp, #12]
   18ef8:	ldr	r3, [r4]
   18efc:	cmp	r2, r3
   18f00:	bne	18f14 <__assert_fail@plt+0x728c>
   18f04:	add	sp, sp, #20
   18f08:	pop	{r4, lr}
   18f0c:	add	sp, sp, #12
   18f10:	bx	lr
   18f14:	bl	118e0 <__stack_chk_fail@plt>
   18f18:	andeq	lr, r1, r0, ror pc
   18f1c:			; <UNDEFINED> instruction: 0x000001b0
   18f20:	andeq	r0, r0, r8, asr #3
   18f24:	andeq	sl, r0, r4, lsl r8
   18f28:	push	{r4, r5, r6, lr}
   18f2c:	mov	r4, r0
   18f30:	ldr	r5, [pc, #364]	; 190a4 <__assert_fail@plt+0x741c>
   18f34:	mov	r6, r1
   18f38:	add	r5, pc, r5
   18f3c:	ldr	r3, [r5]
   18f40:	tst	r3, #2
   18f44:	bne	19050 <__assert_fail@plt+0x73c8>
   18f48:	ldr	r5, [pc, #344]	; 190a8 <__assert_fail@plt+0x7420>
   18f4c:	ldrb	r1, [r6, #2]
   18f50:	add	r5, pc, r5
   18f54:	ldr	r3, [r5, #8]
   18f58:	and	r1, r1, #15
   18f5c:	eor	r1, r1, #11
   18f60:	ldr	r0, [r3, r4, lsl #2]
   18f64:	bl	119c4 <ieee1284_write_control@plt>
   18f68:	ldr	r3, [r5, #8]
   18f6c:	mov	r1, #21
   18f70:	ldr	r0, [r3, r4, lsl #2]
   18f74:	bl	11a9c <ieee1284_write_data@plt>
   18f78:	ldr	r3, [r5, #8]
   18f7c:	mov	r1, #149	; 0x95
   18f80:	ldr	r0, [r3, r4, lsl #2]
   18f84:	bl	11a9c <ieee1284_write_data@plt>
   18f88:	ldr	r3, [r5, #8]
   18f8c:	mov	r1, #53	; 0x35
   18f90:	ldr	r0, [r3, r4, lsl #2]
   18f94:	bl	11a9c <ieee1284_write_data@plt>
   18f98:	ldr	r3, [r5, #8]
   18f9c:	mov	r1, #181	; 0xb5
   18fa0:	ldr	r0, [r3, r4, lsl #2]
   18fa4:	bl	11a9c <ieee1284_write_data@plt>
   18fa8:	ldr	r3, [r5, #8]
   18fac:	mov	r1, #85	; 0x55
   18fb0:	ldr	r0, [r3, r4, lsl #2]
   18fb4:	bl	11a9c <ieee1284_write_data@plt>
   18fb8:	ldr	r3, [r5, #8]
   18fbc:	mov	r1, #213	; 0xd5
   18fc0:	ldr	r0, [r3, r4, lsl #2]
   18fc4:	bl	11a9c <ieee1284_write_data@plt>
   18fc8:	ldr	r3, [r5, #8]
   18fcc:	mov	r1, #117	; 0x75
   18fd0:	ldr	r0, [r3, r4, lsl #2]
   18fd4:	bl	11a9c <ieee1284_write_data@plt>
   18fd8:	ldr	r3, [r5, #8]
   18fdc:	mov	r1, #245	; 0xf5
   18fe0:	ldr	r0, [r3, r4, lsl #2]
   18fe4:	bl	11a9c <ieee1284_write_data@plt>
   18fe8:	ldr	r3, [r5, #8]
   18fec:	mov	r1, #0
   18ff0:	ldr	r0, [r3, r4, lsl #2]
   18ff4:	bl	11a9c <ieee1284_write_data@plt>
   18ff8:	ldr	r3, [r5, #8]
   18ffc:	mov	r1, #128	; 0x80
   19000:	ldr	r0, [r3, r4, lsl #2]
   19004:	bl	11a9c <ieee1284_write_data@plt>
   19008:	ldr	r3, [r5, #8]
   1900c:	ldrb	r1, [r6]
   19010:	ldr	r0, [r3, r4, lsl #2]
   19014:	bl	11a9c <ieee1284_write_data@plt>
   19018:	ldr	r3, [r5, #8]
   1901c:	ldrb	r1, [r6, #2]
   19020:	ldr	r0, [r3, r4, lsl #2]
   19024:	eor	r1, r1, #11
   19028:	bl	119c4 <ieee1284_write_control@plt>
   1902c:	ldr	r3, [r5, #8]
   19030:	ldr	r0, [r3, r4, lsl #2]
   19034:	bl	117d8 <ieee1284_release@plt>
   19038:	ldr	r1, [pc, #108]	; 190ac <__assert_fail@plt+0x7424>
   1903c:	mov	r0, #6
   19040:	add	r1, pc, r1
   19044:	bl	18ea8 <__assert_fail@plt+0x7220>
   19048:	mov	r0, #0
   1904c:	pop	{r4, r5, r6, pc}
   19050:	ldr	r1, [pc, #88]	; 190b0 <__assert_fail@plt+0x7428>
   19054:	mov	r0, #6
   19058:	add	r1, pc, r1
   1905c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19060:	ldr	r3, [r5, #8]
   19064:	mov	r1, #0
   19068:	ldr	r0, [r3, r4, lsl #2]
   1906c:	bl	11a9c <ieee1284_write_data@plt>
   19070:	ldr	r3, [r5, #8]
   19074:	mov	r1, #15
   19078:	ldr	r0, [r3, r4, lsl #2]
   1907c:	bl	119c4 <ieee1284_write_control@plt>
   19080:	ldr	r3, [r5, #8]
   19084:	mov	r1, #13
   19088:	ldr	r0, [r3, r4, lsl #2]
   1908c:	bl	119c4 <ieee1284_write_control@plt>
   19090:	ldr	r3, [r5, #8]
   19094:	mov	r1, #15
   19098:	ldr	r0, [r3, r4, lsl #2]
   1909c:	bl	119c4 <ieee1284_write_control@plt>
   190a0:	b	18f48 <__assert_fail@plt+0x72c0>
   190a4:			; <UNDEFINED> instruction: 0x000203b4
   190a8:	muleq	r2, ip, r3
   190ac:	strdeq	sl, [r0], -ip
   190b0:			; <UNDEFINED> instruction: 0x0000a6b4
   190b4:	push	{r4, r5, r6, r7, r8, lr}
   190b8:	mov	r8, r0
   190bc:	ldr	r4, [pc, #396]	; 19250 <__assert_fail@plt+0x75c8>
   190c0:	ldr	r1, [pc, #396]	; 19254 <__assert_fail@plt+0x75cc>
   190c4:	add	r4, pc, r4
   190c8:	add	r1, pc, r1
   190cc:	ldr	r2, [r4]
   190d0:	mov	r0, #6
   190d4:	bl	18ea8 <__assert_fail@plt+0x7220>
   190d8:	ldr	r7, [r4]
   190dc:	cmp	r7, #0
   190e0:	beq	191d0 <__assert_fail@plt+0x7548>
   190e4:	ldr	r1, [pc, #364]	; 19258 <__assert_fail@plt+0x75d0>
   190e8:	mov	r0, #5
   190ec:	add	r1, pc, r1
   190f0:	bl	18ea8 <__assert_fail@plt+0x7220>
   190f4:	ldr	r5, [pc, #352]	; 1925c <__assert_fail@plt+0x75d4>
   190f8:	ldr	r1, [pc, #352]	; 19260 <__assert_fail@plt+0x75d8>
   190fc:	mov	r6, #0
   19100:	add	r1, pc, r1
   19104:	mov	r0, #4
   19108:	add	r5, pc, r5
   1910c:	str	r6, [r4]
   19110:	bl	18ea8 <__assert_fail@plt+0x7220>
   19114:	mov	r1, r6
   19118:	add	r0, r5, #4
   1911c:	bl	11898 <ieee1284_find_ports@plt>
   19120:	subs	r7, r0, #0
   19124:	bne	191e8 <__assert_fail@plt+0x7560>
   19128:	ldr	r1, [pc, #308]	; 19264 <__assert_fail@plt+0x75dc>
   1912c:	ldr	r2, [r5, #4]
   19130:	add	r1, pc, r1
   19134:	mov	r0, #3
   19138:	bl	18ea8 <__assert_fail@plt+0x7220>
   1913c:	ldr	r3, [r5, #4]
   19140:	cmp	r3, #0
   19144:	ble	19180 <__assert_fail@plt+0x74f8>
   19148:	ldr	r6, [pc, #280]	; 19268 <__assert_fail@plt+0x75e0>
   1914c:	mov	r4, r7
   19150:	add	r6, pc, r6
   19154:	ldr	r3, [r5, #8]
   19158:	mov	r2, r4
   1915c:	mov	r1, r6
   19160:	ldr	r3, [r3, r4, lsl #2]
   19164:	mov	r0, #6
   19168:	add	r4, r4, #1
   1916c:	ldr	r3, [r3]
   19170:	bl	18ea8 <__assert_fail@plt+0x7220>
   19174:	ldr	r3, [r5, #4]
   19178:	cmp	r4, r3
   1917c:	blt	19154 <__assert_fail@plt+0x74cc>
   19180:	ldr	r4, [pc, #228]	; 1926c <__assert_fail@plt+0x75e4>
   19184:	ldr	r1, [pc, #228]	; 19270 <__assert_fail@plt+0x75e8>
   19188:	add	r4, pc, r4
   1918c:	add	r1, pc, r1
   19190:	mov	r0, #6
   19194:	bl	18ea8 <__assert_fail@plt+0x7220>
   19198:	ldr	r0, [r4, #4]
   1919c:	mov	r1, #20
   191a0:	bl	117b4 <calloc@plt>
   191a4:	cmp	r0, #0
   191a8:	str	r0, [r4, #12]
   191ac:	beq	19218 <__assert_fail@plt+0x7590>
   191b0:	ldr	r1, [pc, #188]	; 19274 <__assert_fail@plt+0x75ec>
   191b4:	mov	r0, #5
   191b8:	add	r1, pc, r1
   191bc:	bl	18ea8 <__assert_fail@plt+0x7220>
   191c0:	mov	r3, #0
   191c4:	str	r3, [r8]
   191c8:	mov	r0, r7
   191cc:	pop	{r4, r5, r6, r7, r8, pc}
   191d0:	ldr	r1, [pc, #160]	; 19278 <__assert_fail@plt+0x75f0>
   191d4:	mov	r0, #5
   191d8:	add	r1, pc, r1
   191dc:	bl	18ea8 <__assert_fail@plt+0x7220>
   191e0:	mov	r0, r7
   191e4:	pop	{r4, r5, r6, r7, r8, pc}
   191e8:	bl	18dac <__assert_fail@plt+0x7124>
   191ec:	ldr	r1, [pc, #136]	; 1927c <__assert_fail@plt+0x75f4>
   191f0:	mvn	r7, #0
   191f4:	add	r1, pc, r1
   191f8:	mov	r2, r0
   191fc:	mov	r0, #1
   19200:	bl	18ea8 <__assert_fail@plt+0x7220>
   19204:	mov	r2, #1
   19208:	mov	r3, #4
   1920c:	str	r2, [r4]
   19210:	str	r3, [r8]
   19214:	b	191c8 <__assert_fail@plt+0x7540>
   19218:	ldr	r1, [pc, #96]	; 19280 <__assert_fail@plt+0x75f8>
   1921c:	mov	r0, #1
   19220:	add	r1, pc, r1
   19224:	bl	18ea8 <__assert_fail@plt+0x7220>
   19228:	add	r0, r4, #4
   1922c:	bl	11934 <ieee1284_free_ports@plt>
   19230:	ldr	r3, [pc, #76]	; 19284 <__assert_fail@plt+0x75fc>
   19234:	mov	r1, #1
   19238:	add	r3, pc, r3
   1923c:	mov	r2, #10
   19240:	str	r1, [r3]
   19244:	str	r2, [r8]
   19248:	mvn	r7, #0
   1924c:	b	191c8 <__assert_fail@plt+0x7540>
   19250:	andeq	pc, r1, r4, lsl r1	; <UNPREDICTABLE>
   19254:	muleq	r0, r4, r6
   19258:	andeq	sl, r0, r0, asr #13
   1925c:	andeq	r0, r2, r4, ror #3
   19260:	ldrdeq	sl, [r0], -r4
   19264:	strdeq	sl, [r0], -ip
   19268:	andeq	sl, r0, r0, lsl r7
   1926c:	andeq	r0, r2, r4, ror #2
   19270:	strdeq	sl, [r0], -r4
   19274:	andeq	sl, r0, r0, lsl r7
   19278:	andeq	sl, r0, ip, lsr #11
   1927c:	andeq	sl, r0, r8, lsl #12
   19280:	andeq	sl, r0, r4, lsl #13
   19284:	andeq	lr, r1, r0, lsr #31
   19288:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1928c:	mov	r9, r1
   19290:	ldr	r1, [pc, #568]	; 194d0 <__assert_fail@plt+0x7848>
   19294:	mov	r2, r0
   19298:	add	r1, pc, r1
   1929c:	mov	r6, r0
   192a0:	mov	r0, #4
   192a4:	bl	18ea8 <__assert_fail@plt+0x7220>
   192a8:	mov	r0, r9
   192ac:	bl	190b4 <__assert_fail@plt+0x742c>
   192b0:	subs	r4, r0, #0
   192b4:	bne	1940c <__assert_fail@plt+0x7784>
   192b8:	ldr	r1, [pc, #532]	; 194d4 <__assert_fail@plt+0x784c>
   192bc:	mov	r0, #5
   192c0:	add	r1, pc, r1
   192c4:	bl	18ea8 <__assert_fail@plt+0x7220>
   192c8:	ldr	r3, [pc, #520]	; 194d8 <__assert_fail@plt+0x7850>
   192cc:	add	r3, pc, r3
   192d0:	ldr	r8, [r3, #4]
   192d4:	cmp	r8, #0
   192d8:	ble	1946c <__assert_fail@plt+0x77e4>
   192dc:	ldr	r5, [r3, #8]
   192e0:	sub	r5, r5, #4
   192e4:	b	192f4 <__assert_fail@plt+0x766c>
   192e8:	add	r4, r4, #1
   192ec:	cmp	r4, r8
   192f0:	beq	1946c <__assert_fail@plt+0x77e4>
   192f4:	ldr	r3, [r5, #4]!
   192f8:	mov	r1, r6
   192fc:	lsl	sl, r4, #2
   19300:	ldr	r0, [r3]
   19304:	bl	117e4 <strcmp@plt>
   19308:	subs	r7, r0, #0
   1930c:	bne	192e8 <__assert_fail@plt+0x7660>
   19310:	ldr	r8, [pc, #452]	; 194dc <__assert_fail@plt+0x7854>
   19314:	ldr	r1, [pc, #452]	; 194e0 <__assert_fail@plt+0x7858>
   19318:	add	r8, pc, r8
   1931c:	mov	r0, #6
   19320:	mov	r2, r4
   19324:	add	r1, pc, r1
   19328:	add	r5, sl, r4
   1932c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19330:	ldr	r3, [r8, #12]
   19334:	lsl	r5, r5, #2
   19338:	ldr	r0, [r3, r5]
   1933c:	cmp	r0, #1
   19340:	beq	194a0 <__assert_fail@plt+0x7818>
   19344:	ldr	r1, [pc, #408]	; 194e4 <__assert_fail@plt+0x785c>
   19348:	mov	r0, #5
   1934c:	add	r1, pc, r1
   19350:	bl	18ea8 <__assert_fail@plt+0x7220>
   19354:	ldr	r1, [pc, #396]	; 194e8 <__assert_fail@plt+0x7860>
   19358:	mov	r2, r6
   1935c:	add	r1, pc, r1
   19360:	mov	r0, #6
   19364:	bl	18ea8 <__assert_fail@plt+0x7220>
   19368:	ldr	r1, [pc, #380]	; 194ec <__assert_fail@plt+0x7864>
   1936c:	mov	r0, #6
   19370:	add	r1, pc, r1
   19374:	bl	18ea8 <__assert_fail@plt+0x7220>
   19378:	ldr	r2, [r8, #12]
   1937c:	ldr	r1, [pc, #364]	; 194f0 <__assert_fail@plt+0x7868>
   19380:	add	r3, r2, r5
   19384:	mov	fp, #1
   19388:	str	fp, [r2, r5]
   1938c:	add	r1, pc, r1
   19390:	str	r7, [r3, #4]
   19394:	str	r7, [r3, #8]
   19398:	mov	r0, #5
   1939c:	bl	18ea8 <__assert_fail@plt+0x7220>
   193a0:	ldr	r2, [r8, #12]
   193a4:	ldr	r3, [r8, #8]
   193a8:	add	r2, r2, r5
   193ac:	add	r2, r2, #16
   193b0:	ldr	r0, [r3, sl]
   193b4:	mov	r1, r7
   193b8:	bl	118a4 <ieee1284_open@plt>
   193bc:	subs	sl, r0, #0
   193c0:	bne	19424 <__assert_fail@plt+0x779c>
   193c4:	ldr	r1, [pc, #296]	; 194f4 <__assert_fail@plt+0x786c>
   193c8:	mov	r2, r6
   193cc:	add	r1, pc, r1
   193d0:	mov	r0, #3
   193d4:	bl	18ea8 <__assert_fail@plt+0x7220>
   193d8:	ldr	r1, [pc, #280]	; 194f8 <__assert_fail@plt+0x7870>
   193dc:	mov	r0, #5
   193e0:	add	r1, pc, r1
   193e4:	bl	18ea8 <__assert_fail@plt+0x7220>
   193e8:	ldr	r1, [pc, #268]	; 194fc <__assert_fail@plt+0x7874>
   193ec:	str	sl, [r9]
   193f0:	mov	r2, r6
   193f4:	mov	r3, r4
   193f8:	add	r1, pc, r1
   193fc:	mov	r0, #4
   19400:	bl	18ea8 <__assert_fail@plt+0x7220>
   19404:	mov	r0, r4
   19408:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1940c:	ldr	r1, [pc, #236]	; 19500 <__assert_fail@plt+0x7878>
   19410:	mov	r0, #1
   19414:	add	r1, pc, r1
   19418:	bl	18ea8 <__assert_fail@plt+0x7220>
   1941c:	mov	r0, r4
   19420:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19424:	bl	18dac <__assert_fail@plt+0x7124>
   19428:	ldr	r1, [pc, #212]	; 19504 <__assert_fail@plt+0x787c>
   1942c:	mov	r2, r6
   19430:	add	r1, pc, r1
   19434:	mov	r3, r0
   19438:	mov	r0, fp
   1943c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19440:	ldr	r3, [r8, #12]
   19444:	ldr	r1, [pc, #188]	; 19508 <__assert_fail@plt+0x7880>
   19448:	mov	r2, r4
   1944c:	str	r7, [r3, r5]
   19450:	add	r1, pc, r1
   19454:	mov	r0, #6
   19458:	bl	18ea8 <__assert_fail@plt+0x7220>
   1945c:	mov	r3, #11
   19460:	str	r3, [r9]
   19464:	mvn	r4, #0
   19468:	b	19404 <__assert_fail@plt+0x777c>
   1946c:	ldr	r1, [pc, #152]	; 1950c <__assert_fail@plt+0x7884>
   19470:	mov	r2, r6
   19474:	add	r1, pc, r1
   19478:	mov	r0, #1
   1947c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19480:	ldr	r1, [pc, #136]	; 19510 <__assert_fail@plt+0x7888>
   19484:	mov	r0, #5
   19488:	add	r1, pc, r1
   1948c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19490:	mov	r3, #4
   19494:	str	r3, [r9]
   19498:	mvn	r4, #0
   1949c:	b	19404 <__assert_fail@plt+0x777c>
   194a0:	ldr	r1, [pc, #108]	; 19514 <__assert_fail@plt+0x788c>
   194a4:	mov	r2, r6
   194a8:	add	r1, pc, r1
   194ac:	bl	18ea8 <__assert_fail@plt+0x7220>
   194b0:	ldr	r1, [pc, #96]	; 19518 <__assert_fail@plt+0x7890>
   194b4:	mov	r0, #5
   194b8:	add	r1, pc, r1
   194bc:	bl	18ea8 <__assert_fail@plt+0x7220>
   194c0:	mov	r3, #3
   194c4:	str	r3, [r9]
   194c8:	mvn	r4, #0
   194cc:	b	19404 <__assert_fail@plt+0x777c>
   194d0:	andeq	sl, r0, r8, asr r6
   194d4:	andeq	sl, r0, ip, ror r6
   194d8:	andeq	r0, r2, r0, lsr #32
   194dc:	ldrdeq	pc, [r1], -r4
   194e0:	andeq	sl, r0, ip, asr r8
   194e4:	andeq	sl, r0, r4, ror r6
   194e8:	andeq	sl, r0, r8, lsl #13
   194ec:	muleq	r0, ip, r6
   194f0:			; <UNDEFINED> instruction: 0x0000a6b4
   194f4:	andeq	sl, r0, r8, ror #13
   194f8:	strdeq	sl, [r0], -r8
   194fc:	andeq	sl, r0, r8, lsl #14
   19500:	andeq	sl, r0, r4, lsl #10
   19504:	andeq	sl, r0, ip, lsr #12
   19508:	andeq	sl, r0, ip, lsr r6
   1950c:			; <UNDEFINED> instruction: 0x0000a6b0
   19510:	andeq	sl, r0, ip, asr #13
   19514:			; <UNDEFINED> instruction: 0x0000a4bc
   19518:	ldrdeq	sl, [r0], -r8
   1951c:	ldr	r2, [pc, #324]	; 19668 <__assert_fail@plt+0x79e0>
   19520:	ldr	r3, [pc, #324]	; 1966c <__assert_fail@plt+0x79e4>
   19524:	push	{r4, r5, r6, lr}
   19528:	add	r2, pc, r2
   1952c:	ldr	r4, [pc, #316]	; 19670 <__assert_fail@plt+0x79e8>
   19530:	ldr	r5, [r2, r3]
   19534:	add	r4, pc, r4
   19538:	sub	sp, sp, #8
   1953c:	ldr	r1, [r4, #16]
   19540:	ldr	r3, [r5]
   19544:	cmp	r1, #0
   19548:	str	r3, [sp, #4]
   1954c:	beq	19614 <__assert_fail@plt+0x798c>
   19550:	ldr	r1, [pc, #284]	; 19674 <__assert_fail@plt+0x79ec>
   19554:	mov	r0, #4
   19558:	add	r1, pc, r1
   1955c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19560:	mov	r0, sp
   19564:	bl	190b4 <__assert_fail@plt+0x742c>
   19568:	cmp	r0, #0
   1956c:	bne	195d4 <__assert_fail@plt+0x794c>
   19570:	ldr	r6, [pc, #256]	; 19678 <__assert_fail@plt+0x79f0>
   19574:	mov	r1, #4
   19578:	add	r6, pc, r6
   1957c:	ldr	r4, [r6, #4]
   19580:	add	r0, r4, #1
   19584:	bl	117b4 <calloc@plt>
   19588:	cmp	r0, #0
   1958c:	beq	19644 <__assert_fail@plt+0x79bc>
   19590:	cmp	r4, #0
   19594:	ble	195bc <__assert_fail@plt+0x7934>
   19598:	ldr	r3, [r6, #8]
   1959c:	sub	r2, r0, #4
   195a0:	sub	r3, r3, #4
   195a4:	add	ip, r3, r4, lsl #2
   195a8:	ldr	r1, [r3, #4]!
   195ac:	cmp	r3, ip
   195b0:	ldr	r1, [r1]
   195b4:	str	r1, [r2, #4]!
   195b8:	bne	195a8 <__assert_fail@plt+0x7920>
   195bc:	ldr	r2, [sp, #4]
   195c0:	ldr	r3, [r5]
   195c4:	cmp	r2, r3
   195c8:	bne	19664 <__assert_fail@plt+0x79dc>
   195cc:	add	sp, sp, #8
   195d0:	pop	{r4, r5, r6, pc}
   195d4:	ldr	r0, [sp]
   195d8:	bl	14f00 <__assert_fail@plt+0x3278>
   195dc:	ldr	r1, [pc, #152]	; 1967c <__assert_fail@plt+0x79f4>
   195e0:	add	r1, pc, r1
   195e4:	mov	r2, r0
   195e8:	mov	r0, #1
   195ec:	bl	18ea8 <__assert_fail@plt+0x7220>
   195f0:	ldr	r2, [sp, #4]
   195f4:	ldr	r3, [r5]
   195f8:	cmp	r2, r3
   195fc:	bne	19664 <__assert_fail@plt+0x79dc>
   19600:	mov	r1, #4
   19604:	mov	r0, #1
   19608:	add	sp, sp, #8
   1960c:	pop	{r4, r5, r6, lr}
   19610:	b	117b4 <calloc@plt>
   19614:	ldr	r3, [pc, #100]	; 19680 <__assert_fail@plt+0x79f8>
   19618:	ldr	r0, [pc, #100]	; 19684 <__assert_fail@plt+0x79fc>
   1961c:	ldr	r1, [r2, r3]
   19620:	add	r0, pc, r0
   19624:	bl	1f554 <__assert_fail@plt+0xd8cc>
   19628:	ldr	r1, [pc, #88]	; 19688 <__assert_fail@plt+0x7a00>
   1962c:	mov	r0, #6
   19630:	add	r1, pc, r1
   19634:	bl	18ea8 <__assert_fail@plt+0x7220>
   19638:	mov	r3, #1
   1963c:	str	r3, [r4, #16]
   19640:	b	19550 <__assert_fail@plt+0x78c8>
   19644:	ldr	r1, [pc, #64]	; 1968c <__assert_fail@plt+0x7a04>
   19648:	mov	r0, #2
   1964c:	add	r1, pc, r1
   19650:	bl	18ea8 <__assert_fail@plt+0x7220>
   19654:	ldr	r2, [sp, #4]
   19658:	ldr	r3, [r5]
   1965c:	cmp	r2, r3
   19660:	beq	19600 <__assert_fail@plt+0x7978>
   19664:	bl	118e0 <__stack_chk_fail@plt>
   19668:	strdeq	lr, [r1], -ip
   1966c:			; <UNDEFINED> instruction: 0x000001b0
   19670:			; <UNDEFINED> instruction: 0x0001fdb8
   19674:	andeq	sl, r0, r8, lsl #13
   19678:	andeq	pc, r1, r4, ror sp	; <UNPREDICTABLE>
   1967c:	andeq	sl, r0, r0, lsr #12
   19680:	andeq	r0, r0, r8, asr #3
   19684:	andeq	sl, r0, r0, ror #1
   19688:	andeq	sl, r0, ip, ror r5
   1968c:	andeq	sl, r0, r4, ror #11
   19690:	push	{r4, r5, r6, lr}
   19694:	mov	r4, r0
   19698:	ldr	r6, [pc, #456]	; 19868 <__assert_fail@plt+0x7be0>
   1969c:	ldr	r3, [pc, #456]	; 1986c <__assert_fail@plt+0x7be4>
   196a0:	add	r6, pc, r6
   196a4:	mov	r5, r1
   196a8:	ldr	r2, [r6, #16]
   196ac:	add	r3, pc, r3
   196b0:	cmp	r2, #0
   196b4:	beq	19784 <__assert_fail@plt+0x7afc>
   196b8:	ldr	r1, [pc, #432]	; 19870 <__assert_fail@plt+0x7be8>
   196bc:	mov	r2, r4
   196c0:	add	r1, pc, r1
   196c4:	mov	r0, #6
   196c8:	bl	18ea8 <__assert_fail@plt+0x7220>
   196cc:	cmp	r4, #0
   196d0:	blt	197b4 <__assert_fail@plt+0x7b2c>
   196d4:	ldr	r6, [pc, #408]	; 19874 <__assert_fail@plt+0x7bec>
   196d8:	add	r6, pc, r6
   196dc:	ldr	r3, [r6, #4]
   196e0:	cmp	r3, r4
   196e4:	ble	197b4 <__assert_fail@plt+0x7b2c>
   196e8:	add	r3, r4, r4, lsl #2
   196ec:	ldr	r2, [r6, #12]
   196f0:	lsl	r3, r3, #2
   196f4:	add	r1, r2, r3
   196f8:	ldr	r3, [r2, r3]
   196fc:	cmp	r3, #0
   19700:	beq	19824 <__assert_fail@plt+0x7b9c>
   19704:	ldr	r3, [r1, #4]
   19708:	cmp	r3, #0
   1970c:	beq	197e0 <__assert_fail@plt+0x7b58>
   19710:	ldr	r3, [r6, #8]
   19714:	mov	r1, #15
   19718:	ldr	r0, [r3, r4, lsl #2]
   1971c:	bl	119c4 <ieee1284_write_control@plt>
   19720:	ldr	r3, [r6, #8]
   19724:	ldr	r0, [r3, r4, lsl #2]
   19728:	bl	11c04 <ieee1284_read_status@plt>
   1972c:	lsl	r3, r0, #2
   19730:	lsl	r1, r0, #1
   19734:	and	r1, r1, #384	; 0x180
   19738:	and	r3, r3, #64	; 0x40
   1973c:	orr	r3, r3, r1
   19740:	and	r2, r0, #47	; 0x2f
   19744:	asr	r0, r0, #3
   19748:	orr	r2, r3, r2
   1974c:	and	r0, r0, #16
   19750:	orr	r2, r2, r0
   19754:	ldr	r1, [pc, #284]	; 19878 <__assert_fail@plt+0x7bf0>
   19758:	uxtb	r2, r2
   1975c:	strb	r2, [r5]
   19760:	add	r1, pc, r1
   19764:	mov	r0, #5
   19768:	bl	18ea8 <__assert_fail@plt+0x7220>
   1976c:	ldr	r1, [pc, #264]	; 1987c <__assert_fail@plt+0x7bf4>
   19770:	mov	r0, #6
   19774:	add	r1, pc, r1
   19778:	bl	18ea8 <__assert_fail@plt+0x7220>
   1977c:	mov	r0, #0
   19780:	pop	{r4, r5, r6, pc}
   19784:	ldr	r2, [pc, #244]	; 19880 <__assert_fail@plt+0x7bf8>
   19788:	ldr	r0, [pc, #244]	; 19884 <__assert_fail@plt+0x7bfc>
   1978c:	ldr	r1, [r3, r2]
   19790:	add	r0, pc, r0
   19794:	bl	1f554 <__assert_fail@plt+0xd8cc>
   19798:	ldr	r1, [pc, #232]	; 19888 <__assert_fail@plt+0x7c00>
   1979c:	mov	r0, #6
   197a0:	add	r1, pc, r1
   197a4:	bl	18ea8 <__assert_fail@plt+0x7220>
   197a8:	mov	r3, #1
   197ac:	str	r3, [r6, #16]
   197b0:	b	196b8 <__assert_fail@plt+0x7a30>
   197b4:	ldr	r1, [pc, #208]	; 1988c <__assert_fail@plt+0x7c04>
   197b8:	mov	r2, r4
   197bc:	add	r1, pc, r1
   197c0:	mov	r0, #2
   197c4:	bl	18ea8 <__assert_fail@plt+0x7220>
   197c8:	ldr	r1, [pc, #192]	; 19890 <__assert_fail@plt+0x7c08>
   197cc:	mov	r0, #6
   197d0:	add	r1, pc, r1
   197d4:	bl	18ea8 <__assert_fail@plt+0x7220>
   197d8:	mov	r0, #4
   197dc:	pop	{r4, r5, r6, pc}
   197e0:	ldr	r1, [pc, #172]	; 19894 <__assert_fail@plt+0x7c0c>
   197e4:	mov	r0, #2
   197e8:	add	r1, pc, r1
   197ec:	bl	18ea8 <__assert_fail@plt+0x7220>
   197f0:	ldr	r3, [r6, #8]
   197f4:	ldr	r1, [pc, #156]	; 19898 <__assert_fail@plt+0x7c10>
   197f8:	mov	r0, #4
   197fc:	ldr	r3, [r3, r4, lsl #2]
   19800:	add	r1, pc, r1
   19804:	ldr	r2, [r3]
   19808:	bl	18ea8 <__assert_fail@plt+0x7220>
   1980c:	ldr	r1, [pc, #136]	; 1989c <__assert_fail@plt+0x7c14>
   19810:	mov	r0, #5
   19814:	add	r1, pc, r1
   19818:	bl	18ea8 <__assert_fail@plt+0x7220>
   1981c:	mov	r0, #4
   19820:	pop	{r4, r5, r6, pc}
   19824:	ldr	r1, [pc, #116]	; 198a0 <__assert_fail@plt+0x7c18>
   19828:	mov	r0, #2
   1982c:	add	r1, pc, r1
   19830:	bl	18ea8 <__assert_fail@plt+0x7220>
   19834:	ldr	r3, [r6, #8]
   19838:	ldr	r1, [pc, #100]	; 198a4 <__assert_fail@plt+0x7c1c>
   1983c:	mov	r0, #4
   19840:	ldr	r3, [r3, r4, lsl #2]
   19844:	add	r1, pc, r1
   19848:	ldr	r2, [r3]
   1984c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19850:	ldr	r1, [pc, #80]	; 198a8 <__assert_fail@plt+0x7c20>
   19854:	mov	r0, #5
   19858:	add	r1, pc, r1
   1985c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19860:	mov	r0, #4
   19864:	pop	{r4, r5, r6, pc}
   19868:	andeq	pc, r1, ip, asr #24
   1986c:	andeq	lr, r1, r8, ror r7
   19870:	andeq	sl, r0, r0, lsr #11
   19874:	andeq	pc, r1, r4, lsl ip	; <UNPREDICTABLE>
   19878:	andeq	sl, r0, r0, asr #12
   1987c:	andeq	sl, r0, ip, asr r6
   19880:	andeq	r0, r0, r8, asr #3
   19884:	andeq	r9, r0, r0, ror pc
   19888:	andeq	sl, r0, ip, lsl #8
   1988c:	ldrdeq	sl, [r0], -r8
   19890:	strdeq	sl, [r0], -r4
   19894:	andeq	sl, r0, r0, lsl #11
   19898:	andeq	sl, r0, r8, lsr r5
   1989c:			; <UNDEFINED> instruction: 0x0000a4b0
   198a0:	ldrdeq	sl, [r0], -r8
   198a4:	strdeq	sl, [r0], -r4
   198a8:	andeq	sl, r0, ip, ror #8
   198ac:	push	{r4, r5, r6, lr}
   198b0:	mov	r4, r0
   198b4:	ldr	r5, [pc, #444]	; 19a78 <__assert_fail@plt+0x7df0>
   198b8:	ldr	r3, [pc, #444]	; 19a7c <__assert_fail@plt+0x7df4>
   198bc:	add	r5, pc, r5
   198c0:	mov	r6, r1
   198c4:	ldr	r2, [r5, #16]
   198c8:	add	r3, pc, r3
   198cc:	cmp	r2, #0
   198d0:	beq	19994 <__assert_fail@plt+0x7d0c>
   198d4:	cmp	r4, #0
   198d8:	blt	199c4 <__assert_fail@plt+0x7d3c>
   198dc:	ldr	r5, [pc, #412]	; 19a80 <__assert_fail@plt+0x7df8>
   198e0:	add	r5, pc, r5
   198e4:	ldr	r3, [r5, #4]
   198e8:	cmp	r3, r4
   198ec:	ble	199c4 <__assert_fail@plt+0x7d3c>
   198f0:	add	r3, r4, r4, lsl #2
   198f4:	ldr	r2, [r5, #12]
   198f8:	lsl	r3, r3, #2
   198fc:	add	r1, r2, r3
   19900:	ldr	r3, [r2, r3]
   19904:	cmp	r3, #0
   19908:	beq	19a34 <__assert_fail@plt+0x7dac>
   1990c:	ldr	r3, [r1, #4]
   19910:	cmp	r3, #0
   19914:	beq	199f0 <__assert_fail@plt+0x7d68>
   19918:	ldr	r3, [r5, #8]
   1991c:	ldr	r1, [pc, #352]	; 19a84 <__assert_fail@plt+0x7dfc>
   19920:	mov	r2, r6
   19924:	ldr	r3, [r3, r4, lsl #2]
   19928:	add	r1, pc, r1
   1992c:	mov	r0, #6
   19930:	ldr	r3, [r3]
   19934:	bl	18ea8 <__assert_fail@plt+0x7220>
   19938:	ldr	r3, [r5, #8]
   1993c:	orr	r1, r6, #88	; 0x58
   19940:	ldr	r0, [r3, r4, lsl #2]
   19944:	uxtb	r1, r1
   19948:	bl	11a9c <ieee1284_write_data@plt>
   1994c:	ldr	r3, [r5, #8]
   19950:	mov	r1, #15
   19954:	ldr	r0, [r3, r4, lsl #2]
   19958:	bl	119c4 <ieee1284_write_control@plt>
   1995c:	ldr	r3, [r5, #8]
   19960:	mov	r1, #13
   19964:	ldr	r0, [r3, r4, lsl #2]
   19968:	bl	119c4 <ieee1284_write_control@plt>
   1996c:	ldr	r3, [r5, #8]
   19970:	mov	r1, #15
   19974:	ldr	r0, [r3, r4, lsl #2]
   19978:	bl	119c4 <ieee1284_write_control@plt>
   1997c:	ldr	r3, [r5, #8]
   19980:	mov	r1, #15
   19984:	ldr	r0, [r3, r4, lsl #2]
   19988:	bl	119c4 <ieee1284_write_control@plt>
   1998c:	mov	r0, #0
   19990:	pop	{r4, r5, r6, pc}
   19994:	ldr	r2, [pc, #236]	; 19a88 <__assert_fail@plt+0x7e00>
   19998:	ldr	r0, [pc, #236]	; 19a8c <__assert_fail@plt+0x7e04>
   1999c:	ldr	r1, [r3, r2]
   199a0:	add	r0, pc, r0
   199a4:	bl	1f554 <__assert_fail@plt+0xd8cc>
   199a8:	ldr	r1, [pc, #224]	; 19a90 <__assert_fail@plt+0x7e08>
   199ac:	mov	r0, #6
   199b0:	add	r1, pc, r1
   199b4:	bl	18ea8 <__assert_fail@plt+0x7220>
   199b8:	mov	r3, #1
   199bc:	str	r3, [r5, #16]
   199c0:	b	198d4 <__assert_fail@plt+0x7c4c>
   199c4:	ldr	r1, [pc, #200]	; 19a94 <__assert_fail@plt+0x7e0c>
   199c8:	mov	r2, r4
   199cc:	add	r1, pc, r1
   199d0:	mov	r0, #2
   199d4:	bl	18ea8 <__assert_fail@plt+0x7220>
   199d8:	ldr	r1, [pc, #184]	; 19a98 <__assert_fail@plt+0x7e10>
   199dc:	mov	r0, #6
   199e0:	add	r1, pc, r1
   199e4:	bl	18ea8 <__assert_fail@plt+0x7220>
   199e8:	mov	r0, #4
   199ec:	pop	{r4, r5, r6, pc}
   199f0:	ldr	r1, [pc, #164]	; 19a9c <__assert_fail@plt+0x7e14>
   199f4:	mov	r0, #2
   199f8:	add	r1, pc, r1
   199fc:	bl	18ea8 <__assert_fail@plt+0x7220>
   19a00:	ldr	r3, [r5, #8]
   19a04:	ldr	r1, [pc, #148]	; 19aa0 <__assert_fail@plt+0x7e18>
   19a08:	mov	r0, #4
   19a0c:	ldr	r3, [r3, r4, lsl #2]
   19a10:	add	r1, pc, r1
   19a14:	ldr	r2, [r3]
   19a18:	bl	18ea8 <__assert_fail@plt+0x7220>
   19a1c:	ldr	r1, [pc, #128]	; 19aa4 <__assert_fail@plt+0x7e1c>
   19a20:	mov	r0, #5
   19a24:	add	r1, pc, r1
   19a28:	bl	18ea8 <__assert_fail@plt+0x7220>
   19a2c:	mov	r0, #4
   19a30:	pop	{r4, r5, r6, pc}
   19a34:	ldr	r1, [pc, #108]	; 19aa8 <__assert_fail@plt+0x7e20>
   19a38:	mov	r0, #2
   19a3c:	add	r1, pc, r1
   19a40:	bl	18ea8 <__assert_fail@plt+0x7220>
   19a44:	ldr	r3, [r5, #8]
   19a48:	ldr	r1, [pc, #92]	; 19aac <__assert_fail@plt+0x7e24>
   19a4c:	mov	r0, #4
   19a50:	ldr	r3, [r3, r4, lsl #2]
   19a54:	add	r1, pc, r1
   19a58:	ldr	r2, [r3]
   19a5c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19a60:	ldr	r1, [pc, #72]	; 19ab0 <__assert_fail@plt+0x7e28>
   19a64:	mov	r0, #5
   19a68:	add	r1, pc, r1
   19a6c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19a70:	mov	r0, #4
   19a74:	pop	{r4, r5, r6, pc}
   19a78:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   19a7c:	andeq	lr, r1, ip, asr r5
   19a80:	andeq	pc, r1, ip, lsl #20
   19a84:	andeq	sl, r0, r0, asr #11
   19a88:	andeq	r0, r0, r8, asr #3
   19a8c:	andeq	r9, r0, r0, ror #26
   19a90:	strdeq	sl, [r0], -ip
   19a94:	andeq	sl, r0, r0, asr #8
   19a98:	andeq	sl, r0, ip, asr r4
   19a9c:			; <UNDEFINED> instruction: 0x0000a4b8
   19aa0:	andeq	sl, r0, r8, lsr #6
   19aa4:	andeq	sl, r0, r8, lsl r4
   19aa8:	andeq	sl, r0, r0, asr #8
   19aac:	andeq	sl, r0, r4, ror #5
   19ab0:	ldrdeq	sl, [r0], -r4
   19ab4:	push	{r4, r5, r6, lr}
   19ab8:	mov	r4, r0
   19abc:	ldr	r5, [pc, #580]	; 19d08 <__assert_fail@plt+0x8080>
   19ac0:	ldr	r3, [pc, #580]	; 19d0c <__assert_fail@plt+0x8084>
   19ac4:	add	r5, pc, r5
   19ac8:	add	r3, pc, r3
   19acc:	ldr	r2, [r5, #16]
   19ad0:	cmp	r2, #0
   19ad4:	beq	19c18 <__assert_fail@plt+0x7f90>
   19ad8:	ldr	r1, [pc, #560]	; 19d10 <__assert_fail@plt+0x8088>
   19adc:	mov	r2, r4
   19ae0:	add	r1, pc, r1
   19ae4:	mov	r0, #4
   19ae8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19aec:	cmp	r4, #0
   19af0:	blt	19bf0 <__assert_fail@plt+0x7f68>
   19af4:	ldr	r6, [pc, #536]	; 19d14 <__assert_fail@plt+0x808c>
   19af8:	add	r6, pc, r6
   19afc:	ldr	r3, [r6, #4]
   19b00:	cmp	r3, r4
   19b04:	ble	19bf0 <__assert_fail@plt+0x7f68>
   19b08:	add	r5, r4, r4, lsl #2
   19b0c:	ldr	r3, [r6, #12]
   19b10:	lsl	r5, r5, #2
   19b14:	ldr	r3, [r3, r5]
   19b18:	cmp	r3, #0
   19b1c:	beq	19c48 <__assert_fail@plt+0x7fc0>
   19b20:	ldr	r1, [pc, #496]	; 19d18 <__assert_fail@plt+0x8090>
   19b24:	mov	r0, #5
   19b28:	add	r1, pc, r1
   19b2c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19b30:	ldr	r1, [pc, #484]	; 19d1c <__assert_fail@plt+0x8094>
   19b34:	mov	r2, r4
   19b38:	add	r1, pc, r1
   19b3c:	mov	r0, #4
   19b40:	bl	18ea8 <__assert_fail@plt+0x7220>
   19b44:	ldr	r3, [r6, #8]
   19b48:	ldr	r1, [pc, #464]	; 19d20 <__assert_fail@plt+0x8098>
   19b4c:	mov	r0, #6
   19b50:	ldr	r3, [r3, r4, lsl #2]
   19b54:	add	r1, pc, r1
   19b58:	ldr	r2, [r3]
   19b5c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19b60:	ldr	r1, [pc, #444]	; 19d24 <__assert_fail@plt+0x809c>
   19b64:	mov	r0, #5
   19b68:	add	r1, pc, r1
   19b6c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19b70:	ldr	r3, [r6, #12]
   19b74:	add	r3, r3, r5
   19b78:	ldr	r3, [r3, #4]
   19b7c:	cmp	r3, #1
   19b80:	beq	19ce0 <__assert_fail@plt+0x8058>
   19b84:	ldr	r6, [pc, #412]	; 19d28 <__assert_fail@plt+0x80a0>
   19b88:	ldr	r1, [pc, #412]	; 19d2c <__assert_fail@plt+0x80a4>
   19b8c:	add	r6, pc, r6
   19b90:	add	r1, pc, r1
   19b94:	mov	r0, #5
   19b98:	bl	18ea8 <__assert_fail@plt+0x7220>
   19b9c:	ldr	r3, [r6, #8]
   19ba0:	ldr	r0, [r3, r4, lsl #2]
   19ba4:	bl	11a3c <ieee1284_close@plt>
   19ba8:	cmp	r0, #0
   19bac:	blt	19c88 <__assert_fail@plt+0x8000>
   19bb0:	ldr	r1, [pc, #376]	; 19d30 <__assert_fail@plt+0x80a8>
   19bb4:	mov	r0, #5
   19bb8:	add	r1, pc, r1
   19bbc:	bl	18ea8 <__assert_fail@plt+0x7220>
   19bc0:	ldr	r3, [r6, #12]
   19bc4:	ldr	r1, [pc, #360]	; 19d34 <__assert_fail@plt+0x80ac>
   19bc8:	mov	r2, #0
   19bcc:	add	r1, pc, r1
   19bd0:	str	r2, [r3, r5]
   19bd4:	mov	r0, #5
   19bd8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19bdc:	ldr	r1, [pc, #340]	; 19d38 <__assert_fail@plt+0x80b0>
   19be0:	mov	r0, #5
   19be4:	add	r1, pc, r1
   19be8:	pop	{r4, r5, r6, lr}
   19bec:	b	18ea8 <__assert_fail@plt+0x7220>
   19bf0:	ldr	r1, [pc, #324]	; 19d3c <__assert_fail@plt+0x80b4>
   19bf4:	mov	r2, r4
   19bf8:	add	r1, pc, r1
   19bfc:	mov	r0, #2
   19c00:	bl	18ea8 <__assert_fail@plt+0x7220>
   19c04:	ldr	r1, [pc, #308]	; 19d40 <__assert_fail@plt+0x80b8>
   19c08:	mov	r0, #5
   19c0c:	add	r1, pc, r1
   19c10:	pop	{r4, r5, r6, lr}
   19c14:	b	18ea8 <__assert_fail@plt+0x7220>
   19c18:	ldr	r2, [pc, #292]	; 19d44 <__assert_fail@plt+0x80bc>
   19c1c:	ldr	r0, [pc, #292]	; 19d48 <__assert_fail@plt+0x80c0>
   19c20:	ldr	r1, [r3, r2]
   19c24:	add	r0, pc, r0
   19c28:	bl	1f554 <__assert_fail@plt+0xd8cc>
   19c2c:	ldr	r1, [pc, #280]	; 19d4c <__assert_fail@plt+0x80c4>
   19c30:	mov	r0, #6
   19c34:	add	r1, pc, r1
   19c38:	bl	18ea8 <__assert_fail@plt+0x7220>
   19c3c:	mov	r3, #1
   19c40:	str	r3, [r5, #16]
   19c44:	b	19ad8 <__assert_fail@plt+0x7e50>
   19c48:	ldr	r1, [pc, #256]	; 19d50 <__assert_fail@plt+0x80c8>
   19c4c:	mov	r0, #2
   19c50:	add	r1, pc, r1
   19c54:	bl	18ea8 <__assert_fail@plt+0x7220>
   19c58:	ldr	r3, [r6, #8]
   19c5c:	ldr	r1, [pc, #240]	; 19d54 <__assert_fail@plt+0x80cc>
   19c60:	mov	r0, #6
   19c64:	ldr	r3, [r3, r4, lsl #2]
   19c68:	add	r1, pc, r1
   19c6c:	ldr	r2, [r3]
   19c70:	bl	18ea8 <__assert_fail@plt+0x7220>
   19c74:	ldr	r1, [pc, #220]	; 19d58 <__assert_fail@plt+0x80d0>
   19c78:	mov	r0, #5
   19c7c:	add	r1, pc, r1
   19c80:	pop	{r4, r5, r6, lr}
   19c84:	b	18ea8 <__assert_fail@plt+0x7220>
   19c88:	bl	18dac <__assert_fail@plt+0x7124>
   19c8c:	ldr	r3, [r6, #8]
   19c90:	ldr	r1, [pc, #196]	; 19d5c <__assert_fail@plt+0x80d4>
   19c94:	ldr	r3, [r3, r4, lsl #2]
   19c98:	add	r1, pc, r1
   19c9c:	ldr	r2, [r3]
   19ca0:	mov	r3, r0
   19ca4:	mov	r0, #1
   19ca8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19cac:	ldr	r1, [pc, #172]	; 19d60 <__assert_fail@plt+0x80d8>
   19cb0:	mov	r0, #5
   19cb4:	add	r1, pc, r1
   19cb8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19cbc:	ldr	r1, [pc, #160]	; 19d64 <__assert_fail@plt+0x80dc>
   19cc0:	mov	r0, #2
   19cc4:	add	r1, pc, r1
   19cc8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19ccc:	ldr	r1, [pc, #148]	; 19d68 <__assert_fail@plt+0x80e0>
   19cd0:	mov	r0, #5
   19cd4:	add	r1, pc, r1
   19cd8:	pop	{r4, r5, r6, lr}
   19cdc:	b	18ea8 <__assert_fail@plt+0x7220>
   19ce0:	ldr	r1, [pc, #132]	; 19d6c <__assert_fail@plt+0x80e4>
   19ce4:	mov	r0, #6
   19ce8:	add	r1, pc, r1
   19cec:	bl	18ea8 <__assert_fail@plt+0x7220>
   19cf0:	ldr	r1, [r6, #12]
   19cf4:	mov	r0, r4
   19cf8:	add	r1, r1, r5
   19cfc:	add	r1, r1, #12
   19d00:	bl	18f28 <__assert_fail@plt+0x72a0>
   19d04:	b	19b84 <__assert_fail@plt+0x7efc>
   19d08:	andeq	pc, r1, r8, lsr #16
   19d0c:	andeq	lr, r1, ip, asr r3
   19d10:	andeq	sl, r0, ip, asr #8
   19d14:	strdeq	pc, [r1], -r4
   19d18:			; <UNDEFINED> instruction: 0x0000a4b0
   19d1c:	andeq	sl, r0, r8, asr #9
   19d20:	andeq	sl, r0, r0, asr #9
   19d24:	andeq	sl, r0, ip, asr #9
   19d28:	andeq	pc, r1, r0, ror #14
   19d2c:	strdeq	sl, [r0], -r4
   19d30:	andeq	sl, r0, r8, ror r5
   19d34:	andeq	sl, r0, ip, lsl #11
   19d38:	andeq	sl, r0, r0, lsr #11
   19d3c:	andeq	sl, r0, r0, asr r3
   19d40:	andeq	sl, r0, r4, ror #6
   19d44:	andeq	r0, r0, r8, asr #3
   19d48:	ldrdeq	r9, [r0], -ip
   19d4c:	andeq	r9, r0, r8, ror pc
   19d50:	andeq	sl, r0, ip, lsr r3
   19d54:	andeq	sl, r0, ip, asr #6
   19d58:	strdeq	sl, [r0], -r4
   19d5c:	andeq	sl, r0, r4, lsl r4
   19d60:	andeq	sl, r0, r0, lsr #8
   19d64:	andeq	sl, r0, r0, asr #8
   19d68:	muleq	r0, ip, r2
   19d6c:	andeq	sl, r0, ip, ror r3
   19d70:	push	{r4, r5, r6, r7, r8, lr}
   19d74:	mov	r4, r0
   19d78:	ldr	r5, [pc, #888]	; 1a0f8 <__assert_fail@plt+0x8470>
   19d7c:	ldr	r3, [pc, #888]	; 1a0fc <__assert_fail@plt+0x8474>
   19d80:	add	r5, pc, r5
   19d84:	sub	sp, sp, #8
   19d88:	ldr	r2, [r5, #16]
   19d8c:	mov	r7, r1
   19d90:	cmp	r2, #0
   19d94:	add	r3, pc, r3
   19d98:	beq	19e68 <__assert_fail@plt+0x81e0>
   19d9c:	ldr	r1, [pc, #860]	; 1a100 <__assert_fail@plt+0x8478>
   19da0:	mov	r3, r7
   19da4:	mov	r2, r4
   19da8:	add	r1, pc, r1
   19dac:	mov	r0, #4
   19db0:	bl	18ea8 <__assert_fail@plt+0x7220>
   19db4:	cmp	r4, #0
   19db8:	blt	19e98 <__assert_fail@plt+0x8210>
   19dbc:	ldr	r6, [pc, #832]	; 1a104 <__assert_fail@plt+0x847c>
   19dc0:	add	r6, pc, r6
   19dc4:	ldr	r3, [r6, #4]
   19dc8:	cmp	r3, r4
   19dcc:	ble	19e98 <__assert_fail@plt+0x8210>
   19dd0:	add	r5, r4, r4, lsl #2
   19dd4:	ldr	r3, [r6, #12]
   19dd8:	lsl	r5, r5, #2
   19ddc:	add	r2, r3, r5
   19de0:	ldr	r3, [r3, r5]
   19de4:	cmp	r3, #0
   19de8:	beq	1a074 <__assert_fail@plt+0x83ec>
   19dec:	cmp	r7, #1
   19df0:	bhi	1a044 <__assert_fail@plt+0x83bc>
   19df4:	ldr	r3, [r2, #4]
   19df8:	cmp	r7, r3
   19dfc:	beq	19ec8 <__assert_fail@plt+0x8240>
   19e00:	ldr	r3, [r6, #8]
   19e04:	cmp	r7, #1
   19e08:	ldr	r3, [r3, r4, lsl #2]
   19e0c:	ldr	r2, [r3]
   19e10:	beq	19f00 <__assert_fail@plt+0x8278>
   19e14:	ldr	r1, [pc, #748]	; 1a108 <__assert_fail@plt+0x8480>
   19e18:	mov	r0, #4
   19e1c:	add	r1, pc, r1
   19e20:	bl	18ea8 <__assert_fail@plt+0x7220>
   19e24:	ldr	r1, [r6, #12]
   19e28:	mov	r0, r4
   19e2c:	add	r1, r1, r5
   19e30:	add	r1, r1, #12
   19e34:	bl	18f28 <__assert_fail@plt+0x72a0>
   19e38:	ldr	r3, [pc, #716]	; 1a10c <__assert_fail@plt+0x8484>
   19e3c:	ldr	r1, [pc, #716]	; 1a110 <__assert_fail@plt+0x8488>
   19e40:	add	r3, pc, r3
   19e44:	mov	r0, #5
   19e48:	ldr	r3, [r3, #12]
   19e4c:	add	r1, pc, r1
   19e50:	add	r5, r3, r5
   19e54:	str	r7, [r5, #4]
   19e58:	bl	18ea8 <__assert_fail@plt+0x7220>
   19e5c:	mov	r0, #0
   19e60:	add	sp, sp, #8
   19e64:	pop	{r4, r5, r6, r7, r8, pc}
   19e68:	ldr	r2, [pc, #676]	; 1a114 <__assert_fail@plt+0x848c>
   19e6c:	ldr	r0, [pc, #676]	; 1a118 <__assert_fail@plt+0x8490>
   19e70:	ldr	r1, [r3, r2]
   19e74:	add	r0, pc, r0
   19e78:	bl	1f554 <__assert_fail@plt+0xd8cc>
   19e7c:	ldr	r1, [pc, #664]	; 1a11c <__assert_fail@plt+0x8494>
   19e80:	mov	r0, #6
   19e84:	add	r1, pc, r1
   19e88:	bl	18ea8 <__assert_fail@plt+0x7220>
   19e8c:	mov	r3, #1
   19e90:	str	r3, [r5, #16]
   19e94:	b	19d9c <__assert_fail@plt+0x8114>
   19e98:	ldr	r1, [pc, #640]	; 1a120 <__assert_fail@plt+0x8498>
   19e9c:	mov	r2, r4
   19ea0:	add	r1, pc, r1
   19ea4:	mov	r0, #2
   19ea8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19eac:	ldr	r1, [pc, #624]	; 1a124 <__assert_fail@plt+0x849c>
   19eb0:	mov	r0, #5
   19eb4:	add	r1, pc, r1
   19eb8:	bl	18ea8 <__assert_fail@plt+0x7220>
   19ebc:	mov	r0, #4
   19ec0:	add	sp, sp, #8
   19ec4:	pop	{r4, r5, r6, r7, r8, pc}
   19ec8:	ldr	r1, [pc, #600]	; 1a128 <__assert_fail@plt+0x84a0>
   19ecc:	mov	r0, #3
   19ed0:	add	r1, pc, r1
   19ed4:	bl	18ea8 <__assert_fail@plt+0x7220>
   19ed8:	ldr	r1, [pc, #588]	; 1a12c <__assert_fail@plt+0x84a4>
   19edc:	mov	r0, #4
   19ee0:	add	r1, pc, r1
   19ee4:	bl	18ea8 <__assert_fail@plt+0x7220>
   19ee8:	ldr	r1, [pc, #576]	; 1a130 <__assert_fail@plt+0x84a8>
   19eec:	mov	r0, #5
   19ef0:	add	r1, pc, r1
   19ef4:	bl	18ea8 <__assert_fail@plt+0x7220>
   19ef8:	mov	r0, #0
   19efc:	b	19e60 <__assert_fail@plt+0x81d8>
   19f00:	ldr	r1, [pc, #556]	; 1a134 <__assert_fail@plt+0x84ac>
   19f04:	mov	r0, #4
   19f08:	add	r1, pc, r1
   19f0c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19f10:	ldr	r3, [r6, #8]
   19f14:	ldr	r8, [r6, #12]
   19f18:	ldr	r0, [r3, r4, lsl #2]
   19f1c:	bl	1188c <ieee1284_claim@plt>
   19f20:	add	r8, r8, r5
   19f24:	cmp	r0, #0
   19f28:	bne	1a0b8 <__assert_fail@plt+0x8430>
   19f2c:	ldr	r3, [r6, #8]
   19f30:	ldr	r0, [r3, r4, lsl #2]
   19f34:	bl	11c34 <ieee1284_read_data@plt>
   19f38:	ldr	r3, [r6, #8]
   19f3c:	strb	r0, [r8, #12]
   19f40:	ldr	r0, [r3, r4, lsl #2]
   19f44:	bl	11c04 <ieee1284_read_status@plt>
   19f48:	ldr	r3, [r6, #8]
   19f4c:	eor	r0, r0, #127	; 0x7f
   19f50:	mvn	r0, r0
   19f54:	strb	r0, [r8, #13]
   19f58:	ldr	r0, [r3, r4, lsl #2]
   19f5c:	bl	11940 <ieee1284_read_control@plt>
   19f60:	ldr	r3, [r6, #8]
   19f64:	sxtb	r0, r0
   19f68:	eor	r2, r0, #11
   19f6c:	and	r1, r0, #15
   19f70:	strb	r2, [r8, #14]
   19f74:	orr	r1, r1, #4
   19f78:	ldr	r0, [r3, r4, lsl #2]
   19f7c:	bl	119c4 <ieee1284_write_control@plt>
   19f80:	ldrb	r1, [r8, #14]
   19f84:	ldrb	r2, [r8, #12]
   19f88:	ldrb	r3, [r8, #13]
   19f8c:	str	r1, [sp]
   19f90:	ldr	r1, [pc, #416]	; 1a138 <__assert_fail@plt+0x84b0>
   19f94:	mov	r0, #6
   19f98:	add	r1, pc, r1
   19f9c:	bl	18ea8 <__assert_fail@plt+0x7220>
   19fa0:	ldr	r3, [r6, #8]
   19fa4:	mov	r1, #21
   19fa8:	ldr	r0, [r3, r4, lsl #2]
   19fac:	bl	11a9c <ieee1284_write_data@plt>
   19fb0:	ldr	r3, [r6, #8]
   19fb4:	mov	r1, #149	; 0x95
   19fb8:	ldr	r0, [r3, r4, lsl #2]
   19fbc:	bl	11a9c <ieee1284_write_data@plt>
   19fc0:	ldr	r3, [r6, #8]
   19fc4:	mov	r1, #53	; 0x35
   19fc8:	ldr	r0, [r3, r4, lsl #2]
   19fcc:	bl	11a9c <ieee1284_write_data@plt>
   19fd0:	ldr	r3, [r6, #8]
   19fd4:	mov	r1, #181	; 0xb5
   19fd8:	ldr	r0, [r3, r4, lsl #2]
   19fdc:	bl	11a9c <ieee1284_write_data@plt>
   19fe0:	ldr	r3, [r6, #8]
   19fe4:	mov	r1, #85	; 0x55
   19fe8:	ldr	r0, [r3, r4, lsl #2]
   19fec:	bl	11a9c <ieee1284_write_data@plt>
   19ff0:	ldr	r3, [r6, #8]
   19ff4:	mov	r1, #213	; 0xd5
   19ff8:	ldr	r0, [r3, r4, lsl #2]
   19ffc:	bl	11a9c <ieee1284_write_data@plt>
   1a000:	ldr	r3, [r6, #8]
   1a004:	mov	r1, #117	; 0x75
   1a008:	ldr	r0, [r3, r4, lsl #2]
   1a00c:	bl	11a9c <ieee1284_write_data@plt>
   1a010:	ldr	r3, [r6, #8]
   1a014:	mov	r1, #245	; 0xf5
   1a018:	ldr	r0, [r3, r4, lsl #2]
   1a01c:	bl	11a9c <ieee1284_write_data@plt>
   1a020:	ldr	r3, [r6, #8]
   1a024:	mov	r1, r7
   1a028:	ldr	r0, [r3, r4, lsl #2]
   1a02c:	bl	11a9c <ieee1284_write_data@plt>
   1a030:	ldr	r3, [r6, #8]
   1a034:	mov	r1, #129	; 0x81
   1a038:	ldr	r0, [r3, r4, lsl #2]
   1a03c:	bl	11a9c <ieee1284_write_data@plt>
   1a040:	b	19e38 <__assert_fail@plt+0x81b0>
   1a044:	ldr	r1, [pc, #240]	; 1a13c <__assert_fail@plt+0x84b4>
   1a048:	mov	r2, r7
   1a04c:	add	r1, pc, r1
   1a050:	mov	r0, #2
   1a054:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a058:	ldr	r1, [pc, #224]	; 1a140 <__assert_fail@plt+0x84b8>
   1a05c:	mov	r0, #5
   1a060:	add	r1, pc, r1
   1a064:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a068:	mov	r0, #4
   1a06c:	add	sp, sp, #8
   1a070:	pop	{r4, r5, r6, r7, r8, pc}
   1a074:	ldr	r1, [pc, #200]	; 1a144 <__assert_fail@plt+0x84bc>
   1a078:	mov	r0, #2
   1a07c:	add	r1, pc, r1
   1a080:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a084:	ldr	r3, [r6, #8]
   1a088:	ldr	r1, [pc, #184]	; 1a148 <__assert_fail@plt+0x84c0>
   1a08c:	mov	r0, #6
   1a090:	ldr	r3, [r3, r4, lsl #2]
   1a094:	add	r1, pc, r1
   1a098:	ldr	r2, [r3]
   1a09c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a0a0:	ldr	r1, [pc, #164]	; 1a14c <__assert_fail@plt+0x84c4>
   1a0a4:	mov	r0, #5
   1a0a8:	add	r1, pc, r1
   1a0ac:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a0b0:	mov	r0, #4
   1a0b4:	b	19e60 <__assert_fail@plt+0x81d8>
   1a0b8:	bl	18dac <__assert_fail@plt+0x7124>
   1a0bc:	ldr	r1, [pc, #140]	; 1a150 <__assert_fail@plt+0x84c8>
   1a0c0:	add	r1, pc, r1
   1a0c4:	mov	r2, r0
   1a0c8:	mov	r0, r7
   1a0cc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a0d0:	ldr	r1, [pc, #124]	; 1a154 <__assert_fail@plt+0x84cc>
   1a0d4:	mov	r0, r7
   1a0d8:	add	r1, pc, r1
   1a0dc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a0e0:	ldr	r1, [pc, #112]	; 1a158 <__assert_fail@plt+0x84d0>
   1a0e4:	mov	r0, #5
   1a0e8:	add	r1, pc, r1
   1a0ec:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a0f0:	mov	r0, #9
   1a0f4:	b	19e60 <__assert_fail@plt+0x81d8>
   1a0f8:	andeq	pc, r1, ip, ror #10
   1a0fc:	muleq	r1, r0, r0
   1a100:	strdeq	sl, [r0], -ip
   1a104:	andeq	pc, r1, ip, lsr #10
   1a108:	andeq	sl, r0, ip, asr #11
   1a10c:	andeq	pc, r1, ip, lsr #9
   1a110:	andeq	sl, r0, r0, lsl #9
   1a114:	andeq	r0, r0, r8, asr #3
   1a118:	andeq	r9, r0, ip, lsl #17
   1a11c:	andeq	r9, r0, r8, lsr #26
   1a120:	andeq	sl, r0, r8, lsr r3
   1a124:	andeq	sl, r0, ip, asr #6
   1a128:			; <UNDEFINED> instruction: 0x0000a3b4
   1a12c:	andeq	sl, r0, ip, asr #7
   1a130:	ldrdeq	sl, [r0], -ip
   1a134:	strdeq	sl, [r0], -r4
   1a138:	andeq	sl, r0, ip, lsl r4
   1a13c:	andeq	sl, r0, r0, lsl r2
   1a140:	andeq	sl, r0, r0, lsr #3
   1a144:			; <UNDEFINED> instruction: 0x0000a1b8
   1a148:	andeq	r9, r0, r0, lsr #30
   1a14c:	andeq	sl, r0, r8, asr r1
   1a150:	andeq	sl, r0, r4, ror #4
   1a154:	andeq	sl, r0, ip, ror r2
   1a158:	muleq	r0, r8, r2
   1a15c:	ldr	r2, [pc, #476]	; 1a340 <__assert_fail@plt+0x86b8>
   1a160:	ldr	r3, [pc, #476]	; 1a344 <__assert_fail@plt+0x86bc>
   1a164:	push	{r4, r5, r6, r7, lr}
   1a168:	add	r2, pc, r2
   1a16c:	ldr	r7, [pc, #468]	; 1a348 <__assert_fail@plt+0x86c0>
   1a170:	ldr	r5, [r2, r3]
   1a174:	add	r7, pc, r7
   1a178:	mov	r6, r0
   1a17c:	ldr	r0, [r7, #16]
   1a180:	sub	sp, sp, #20
   1a184:	ldr	r3, [r5]
   1a188:	cmp	r0, #0
   1a18c:	mov	r4, r1
   1a190:	str	r3, [sp, #12]
   1a194:	beq	1a2a0 <__assert_fail@plt+0x8618>
   1a198:	ldr	r1, [pc, #428]	; 1a34c <__assert_fail@plt+0x86c4>
   1a19c:	mov	r2, r6
   1a1a0:	add	r1, pc, r1
   1a1a4:	mov	r0, #4
   1a1a8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a1ac:	ldr	r1, [pc, #412]	; 1a350 <__assert_fail@plt+0x86c8>
   1a1b0:	mov	r0, #5
   1a1b4:	add	r1, pc, r1
   1a1b8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a1bc:	mov	r0, r6
   1a1c0:	add	r1, sp, #8
   1a1c4:	bl	19288 <__assert_fail@plt+0x7600>
   1a1c8:	cmn	r0, #1
   1a1cc:	str	r0, [r4]
   1a1d0:	beq	1a2d0 <__assert_fail@plt+0x8648>
   1a1d4:	ldr	r1, [pc, #376]	; 1a354 <__assert_fail@plt+0x86cc>
   1a1d8:	mov	r2, r0
   1a1dc:	add	r1, pc, r1
   1a1e0:	mov	r0, #6
   1a1e4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a1e8:	ldr	r1, [pc, #360]	; 1a358 <__assert_fail@plt+0x86d0>
   1a1ec:	mov	r0, #5
   1a1f0:	add	r1, pc, r1
   1a1f4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a1f8:	mov	r1, #1
   1a1fc:	ldr	r0, [r4]
   1a200:	bl	19d70 <__assert_fail@plt+0x80e8>
   1a204:	subs	r6, r0, #0
   1a208:	bne	1a300 <__assert_fail@plt+0x8678>
   1a20c:	add	r1, sp, #7
   1a210:	ldr	r0, [r4]
   1a214:	bl	19690 <__assert_fail@plt+0x7a08>
   1a218:	subs	r1, r0, #0
   1a21c:	bne	1a318 <__assert_fail@plt+0x8690>
   1a220:	ldrb	r3, [sp, #7]
   1a224:	and	r2, r3, #240	; 0xf0
   1a228:	cmp	r2, #240	; 0xf0
   1a22c:	strb	r2, [sp, #7]
   1a230:	beq	1a240 <__assert_fail@plt+0x85b8>
   1a234:	and	r3, r3, #96	; 0x60
   1a238:	cmp	r3, #32
   1a23c:	beq	1a27c <__assert_fail@plt+0x85f4>
   1a240:	ldr	r1, [pc, #276]	; 1a35c <__assert_fail@plt+0x86d4>
   1a244:	mov	r0, #3
   1a248:	add	r1, pc, r1
   1a24c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a250:	ldr	r0, [r4]
   1a254:	mov	r1, #0
   1a258:	bl	19d70 <__assert_fail@plt+0x80e8>
   1a25c:	mov	r4, #3
   1a260:	ldr	r2, [sp, #12]
   1a264:	ldr	r3, [r5]
   1a268:	mov	r0, r4
   1a26c:	cmp	r2, r3
   1a270:	bne	1a33c <__assert_fail@plt+0x86b4>
   1a274:	add	sp, sp, #20
   1a278:	pop	{r4, r5, r6, r7, pc}
   1a27c:	ldr	r0, [r4]
   1a280:	bl	19d70 <__assert_fail@plt+0x80e8>
   1a284:	subs	r4, r0, #0
   1a288:	bne	1a2e8 <__assert_fail@plt+0x8660>
   1a28c:	ldr	r1, [pc, #204]	; 1a360 <__assert_fail@plt+0x86d8>
   1a290:	mov	r0, #4
   1a294:	add	r1, pc, r1
   1a298:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a29c:	b	1a260 <__assert_fail@plt+0x85d8>
   1a2a0:	ldr	r3, [pc, #188]	; 1a364 <__assert_fail@plt+0x86dc>
   1a2a4:	ldr	r0, [pc, #188]	; 1a368 <__assert_fail@plt+0x86e0>
   1a2a8:	ldr	r1, [r2, r3]
   1a2ac:	add	r0, pc, r0
   1a2b0:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1a2b4:	ldr	r1, [pc, #176]	; 1a36c <__assert_fail@plt+0x86e4>
   1a2b8:	mov	r0, #6
   1a2bc:	add	r1, pc, r1
   1a2c0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a2c4:	mov	r3, #1
   1a2c8:	str	r3, [r7, #16]
   1a2cc:	b	1a198 <__assert_fail@plt+0x8510>
   1a2d0:	ldr	r1, [pc, #152]	; 1a370 <__assert_fail@plt+0x86e8>
   1a2d4:	mov	r0, #5
   1a2d8:	add	r1, pc, r1
   1a2dc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a2e0:	ldr	r4, [sp, #8]
   1a2e4:	b	1a260 <__assert_fail@plt+0x85d8>
   1a2e8:	ldr	r1, [pc, #132]	; 1a374 <__assert_fail@plt+0x86ec>
   1a2ec:	mov	r0, #3
   1a2f0:	add	r1, pc, r1
   1a2f4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a2f8:	mov	r4, #9
   1a2fc:	b	1a260 <__assert_fail@plt+0x85d8>
   1a300:	ldr	r1, [pc, #112]	; 1a378 <__assert_fail@plt+0x86f0>
   1a304:	mov	r0, #3
   1a308:	add	r1, pc, r1
   1a30c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a310:	mov	r4, #9
   1a314:	b	1a260 <__assert_fail@plt+0x85d8>
   1a318:	ldr	r1, [pc, #92]	; 1a37c <__assert_fail@plt+0x86f4>
   1a31c:	mov	r0, #3
   1a320:	add	r1, pc, r1
   1a324:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a328:	ldr	r0, [r4]
   1a32c:	mov	r1, r6
   1a330:	bl	19d70 <__assert_fail@plt+0x80e8>
   1a334:	mov	r4, #9
   1a338:	b	1a260 <__assert_fail@plt+0x85d8>
   1a33c:	bl	118e0 <__stack_chk_fail@plt>
   1a340:			; <UNDEFINED> instruction: 0x0001dcbc
   1a344:			; <UNDEFINED> instruction: 0x000001b0
   1a348:	andeq	pc, r1, r8, ror r1	; <UNPREDICTABLE>
   1a34c:	andeq	sl, r0, r0, ror r2
   1a350:	muleq	r0, r0, r2
   1a354:	ldrdeq	sl, [r0], -r0
   1a358:	strdeq	sl, [r0], -r8
   1a35c:	andeq	sl, r0, ip, lsr r3
   1a360:	andeq	sl, r0, r0, ror #6
   1a364:	andeq	r0, r0, r8, asr #3
   1a368:	andeq	r9, r0, r4, asr r4
   1a36c:	strdeq	r9, [r0], -r0
   1a370:	andeq	sl, r0, r4, lsr #3
   1a374:	ldrdeq	sl, [r0], -r0
   1a378:	andeq	sl, r0, r0, lsl r2
   1a37c:	andeq	sl, r0, ip, lsr #4
   1a380:	ldr	r2, [pc, #868]	; 1a6ec <__assert_fail@plt+0x8a64>
   1a384:	ldr	r3, [pc, #868]	; 1a6f0 <__assert_fail@plt+0x8a68>
   1a388:	push	{r4, r5, r6, r7, lr}
   1a38c:	add	r2, pc, r2
   1a390:	ldr	r5, [pc, #860]	; 1a6f4 <__assert_fail@plt+0x8a6c>
   1a394:	ldr	r7, [r2, r3]
   1a398:	add	r5, pc, r5
   1a39c:	mov	r4, r0
   1a3a0:	ldr	r0, [r5, #16]
   1a3a4:	sub	sp, sp, #12
   1a3a8:	ldr	r3, [r7]
   1a3ac:	cmp	r0, #0
   1a3b0:	mov	r6, r1
   1a3b4:	str	r3, [sp, #4]
   1a3b8:	beq	1a4dc <__assert_fail@plt+0x8854>
   1a3bc:	ldr	r1, [pc, #820]	; 1a6f8 <__assert_fail@plt+0x8a70>
   1a3c0:	mov	r3, r6
   1a3c4:	mov	r2, r4
   1a3c8:	add	r1, pc, r1
   1a3cc:	mov	r0, #4
   1a3d0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a3d4:	cmp	r4, #0
   1a3d8:	blt	1a50c <__assert_fail@plt+0x8884>
   1a3dc:	ldr	r5, [pc, #792]	; 1a6fc <__assert_fail@plt+0x8a74>
   1a3e0:	add	r5, pc, r5
   1a3e4:	ldr	r3, [r5, #4]
   1a3e8:	cmp	r3, r4
   1a3ec:	ble	1a50c <__assert_fail@plt+0x8884>
   1a3f0:	add	r3, r4, r4, lsl #2
   1a3f4:	ldr	r2, [r5, #12]
   1a3f8:	lsl	r3, r3, #2
   1a3fc:	add	r1, r2, r3
   1a400:	ldr	r3, [r2, r3]
   1a404:	cmp	r3, #0
   1a408:	beq	1a660 <__assert_fail@plt+0x89d8>
   1a40c:	ldr	r3, [r1, #4]
   1a410:	cmp	r3, #0
   1a414:	beq	1a6a4 <__assert_fail@plt+0x8a1c>
   1a418:	ldr	r3, [r1, #8]
   1a41c:	cmp	r3, #1
   1a420:	beq	1a624 <__assert_fail@plt+0x899c>
   1a424:	cmp	r3, #0
   1a428:	beq	1a5a0 <__assert_fail@plt+0x8918>
   1a42c:	cmp	r3, #2
   1a430:	bne	1a54c <__assert_fail@plt+0x88c4>
   1a434:	ldr	r1, [pc, #708]	; 1a700 <__assert_fail@plt+0x8a78>
   1a438:	mov	r0, #5
   1a43c:	add	r1, pc, r1
   1a440:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a444:	ldr	r3, [r5, #8]
   1a448:	ldr	r1, [pc, #692]	; 1a704 <__assert_fail@plt+0x8a7c>
   1a44c:	mov	r2, r6
   1a450:	ldr	r3, [r3, r4, lsl #2]
   1a454:	add	r1, pc, r1
   1a458:	mov	r0, #6
   1a45c:	ldr	r3, [r3]
   1a460:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a464:	ldr	r3, [r5, #8]
   1a468:	mov	r1, #32
   1a46c:	add	r6, r6, #24
   1a470:	ldr	r0, [r3, r4, lsl #2]
   1a474:	bl	11a9c <ieee1284_write_data@plt>
   1a478:	ldr	r3, [r5, #8]
   1a47c:	mov	r1, #15
   1a480:	ldr	r0, [r3, r4, lsl #2]
   1a484:	bl	119c4 <ieee1284_write_control@plt>
   1a488:	ldr	r3, [r5, #8]
   1a48c:	mov	r1, #13
   1a490:	ldr	r0, [r3, r4, lsl #2]
   1a494:	bl	119c4 <ieee1284_write_control@plt>
   1a498:	ldr	r3, [r5, #8]
   1a49c:	mov	r1, #15
   1a4a0:	ldr	r0, [r3, r4, lsl #2]
   1a4a4:	bl	119c4 <ieee1284_write_control@plt>
   1a4a8:	ldr	r2, [r5, #8]
   1a4ac:	strb	r6, [sp, #3]
   1a4b0:	mov	r3, #1
   1a4b4:	ldr	r0, [r2, r4, lsl #2]
   1a4b8:	mov	r1, #0
   1a4bc:	add	r2, sp, #3
   1a4c0:	bl	11bf8 <ieee1284_epp_write_addr@plt>
   1a4c4:	ldr	r1, [pc, #572]	; 1a708 <__assert_fail@plt+0x8a80>
   1a4c8:	mov	r0, #5
   1a4cc:	add	r1, pc, r1
   1a4d0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a4d4:	mov	r0, #0
   1a4d8:	b	1a534 <__assert_fail@plt+0x88ac>
   1a4dc:	ldr	r3, [pc, #552]	; 1a70c <__assert_fail@plt+0x8a84>
   1a4e0:	ldr	r0, [pc, #552]	; 1a710 <__assert_fail@plt+0x8a88>
   1a4e4:	ldr	r1, [r2, r3]
   1a4e8:	add	r0, pc, r0
   1a4ec:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1a4f0:	ldr	r1, [pc, #540]	; 1a714 <__assert_fail@plt+0x8a8c>
   1a4f4:	mov	r0, #6
   1a4f8:	add	r1, pc, r1
   1a4fc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a500:	mov	r3, #1
   1a504:	str	r3, [r5, #16]
   1a508:	b	1a3bc <__assert_fail@plt+0x8734>
   1a50c:	ldr	r1, [pc, #516]	; 1a718 <__assert_fail@plt+0x8a90>
   1a510:	mov	r2, r4
   1a514:	add	r1, pc, r1
   1a518:	mov	r0, #2
   1a51c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a520:	ldr	r1, [pc, #500]	; 1a71c <__assert_fail@plt+0x8a94>
   1a524:	mov	r0, #5
   1a528:	add	r1, pc, r1
   1a52c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a530:	mov	r0, #4
   1a534:	ldr	r2, [sp, #4]
   1a538:	ldr	r3, [r7]
   1a53c:	cmp	r2, r3
   1a540:	bne	1a6e8 <__assert_fail@plt+0x8a60>
   1a544:	add	sp, sp, #12
   1a548:	pop	{r4, r5, r6, r7, pc}
   1a54c:	ldr	r1, [pc, #460]	; 1a720 <__assert_fail@plt+0x8a98>
   1a550:	mov	r0, #1
   1a554:	add	r1, pc, r1
   1a558:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a55c:	ldr	r1, [pc, #448]	; 1a724 <__assert_fail@plt+0x8a9c>
   1a560:	mov	r0, #3
   1a564:	add	r1, pc, r1
   1a568:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a56c:	ldr	r3, [r5, #8]
   1a570:	ldr	r1, [pc, #432]	; 1a728 <__assert_fail@plt+0x8aa0>
   1a574:	mov	r0, #6
   1a578:	ldr	r3, [r3, r4, lsl #2]
   1a57c:	add	r1, pc, r1
   1a580:	ldr	r2, [r3]
   1a584:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a588:	ldr	r1, [pc, #412]	; 1a72c <__assert_fail@plt+0x8aa4>
   1a58c:	mov	r0, #5
   1a590:	add	r1, pc, r1
   1a594:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a598:	mov	r0, #4
   1a59c:	b	1a534 <__assert_fail@plt+0x88ac>
   1a5a0:	ldr	r1, [pc, #392]	; 1a730 <__assert_fail@plt+0x8aa8>
   1a5a4:	mov	r0, #5
   1a5a8:	add	r1, pc, r1
   1a5ac:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a5b0:	ldr	r3, [r5, #8]
   1a5b4:	ldr	r1, [pc, #376]	; 1a734 <__assert_fail@plt+0x8aac>
   1a5b8:	mov	r2, r6
   1a5bc:	ldr	r3, [r3, r4, lsl #2]
   1a5c0:	add	r1, pc, r1
   1a5c4:	mov	r0, #6
   1a5c8:	ldr	r3, [r3]
   1a5cc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a5d0:	ldr	r3, [r5, #8]
   1a5d4:	orr	r1, r6, #24
   1a5d8:	ldr	r0, [r3, r4, lsl #2]
   1a5dc:	bl	11a9c <ieee1284_write_data@plt>
   1a5e0:	ldr	r3, [r5, #8]
   1a5e4:	mov	r1, #15
   1a5e8:	ldr	r0, [r3, r4, lsl #2]
   1a5ec:	bl	119c4 <ieee1284_write_control@plt>
   1a5f0:	ldr	r3, [r5, #8]
   1a5f4:	mov	r1, #13
   1a5f8:	ldr	r0, [r3, r4, lsl #2]
   1a5fc:	bl	119c4 <ieee1284_write_control@plt>
   1a600:	ldr	r3, [r5, #8]
   1a604:	mov	r1, #15
   1a608:	ldr	r0, [r3, r4, lsl #2]
   1a60c:	bl	119c4 <ieee1284_write_control@plt>
   1a610:	ldr	r3, [r5, #8]
   1a614:	mov	r1, #15
   1a618:	ldr	r0, [r3, r4, lsl #2]
   1a61c:	bl	119c4 <ieee1284_write_control@plt>
   1a620:	b	1a4c4 <__assert_fail@plt+0x883c>
   1a624:	ldr	r1, [pc, #268]	; 1a738 <__assert_fail@plt+0x8ab0>
   1a628:	mov	r0, #5
   1a62c:	add	r1, pc, r1
   1a630:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a634:	ldr	r3, [r5, #8]
   1a638:	ldr	r1, [pc, #252]	; 1a73c <__assert_fail@plt+0x8ab4>
   1a63c:	mov	r2, r6
   1a640:	ldr	r3, [r3, r4, lsl #2]
   1a644:	add	r1, pc, r1
   1a648:	mov	r0, #6
   1a64c:	ldr	r3, [r3]
   1a650:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a654:	ldr	r3, [r5, #8]
   1a658:	orr	r1, r6, #88	; 0x58
   1a65c:	b	1a5d8 <__assert_fail@plt+0x8950>
   1a660:	ldr	r1, [pc, #216]	; 1a740 <__assert_fail@plt+0x8ab8>
   1a664:	mov	r0, #2
   1a668:	add	r1, pc, r1
   1a66c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a670:	ldr	r3, [r5, #8]
   1a674:	ldr	r1, [pc, #200]	; 1a744 <__assert_fail@plt+0x8abc>
   1a678:	mov	r0, #6
   1a67c:	ldr	r3, [r3, r4, lsl #2]
   1a680:	add	r1, pc, r1
   1a684:	ldr	r2, [r3]
   1a688:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a68c:	ldr	r1, [pc, #180]	; 1a748 <__assert_fail@plt+0x8ac0>
   1a690:	mov	r0, #5
   1a694:	add	r1, pc, r1
   1a698:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a69c:	mov	r0, #4
   1a6a0:	b	1a534 <__assert_fail@plt+0x88ac>
   1a6a4:	ldr	r1, [pc, #160]	; 1a74c <__assert_fail@plt+0x8ac4>
   1a6a8:	mov	r0, #2
   1a6ac:	add	r1, pc, r1
   1a6b0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a6b4:	ldr	r3, [r5, #8]
   1a6b8:	ldr	r1, [pc, #144]	; 1a750 <__assert_fail@plt+0x8ac8>
   1a6bc:	mov	r0, #6
   1a6c0:	ldr	r3, [r3, r4, lsl #2]
   1a6c4:	add	r1, pc, r1
   1a6c8:	ldr	r2, [r3]
   1a6cc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a6d0:	ldr	r1, [pc, #124]	; 1a754 <__assert_fail@plt+0x8acc>
   1a6d4:	mov	r0, #5
   1a6d8:	add	r1, pc, r1
   1a6dc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a6e0:	mov	r0, #4
   1a6e4:	b	1a534 <__assert_fail@plt+0x88ac>
   1a6e8:	bl	118e0 <__stack_chk_fail@plt>
   1a6ec:	muleq	r1, r8, sl
   1a6f0:			; <UNDEFINED> instruction: 0x000001b0
   1a6f4:	andeq	lr, r1, r4, asr pc
   1a6f8:	andeq	sl, r0, r4, ror #4
   1a6fc:	andeq	lr, r1, ip, lsl #30
   1a700:	andeq	sl, r0, r0, ror #5
   1a704:	strdeq	sl, [r0], -r0
   1a708:	strdeq	sl, [r0], -r4
   1a70c:	andeq	r0, r0, r8, asr #3
   1a710:	andeq	r9, r0, r8, lsl r2
   1a714:			; <UNDEFINED> instruction: 0x000096b4
   1a718:	andeq	sl, r0, r4, asr r1
   1a71c:	andeq	sl, r0, r8, ror #2
   1a720:	andeq	sl, r0, r0, ror #5
   1a724:	strdeq	sl, [r0], -ip
   1a728:	andeq	r9, r0, r8, lsr sl
   1a72c:	strdeq	sl, [r0], -ip
   1a730:	andeq	sl, r0, r0, lsr r2
   1a734:	andeq	sl, r0, r0, asr #4
   1a738:	andeq	sl, r0, ip, asr #2
   1a73c:	andeq	sl, r0, ip, asr r1
   1a740:	andeq	sl, r0, ip, asr r0
   1a744:	andeq	r9, r0, r4, lsr r9
   1a748:	strdeq	r9, [r0], -ip
   1a74c:	andeq	sl, r0, r4, asr #32
   1a750:	strdeq	r9, [r0], -r0
   1a754:			; <UNDEFINED> instruction: 0x00009fb8
   1a758:	ldr	r2, [pc, #1076]	; 1ab94 <__assert_fail@plt+0x8f0c>
   1a75c:	ldr	r3, [pc, #1076]	; 1ab98 <__assert_fail@plt+0x8f10>
   1a760:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a764:	add	r2, pc, r2
   1a768:	ldr	r5, [pc, #1068]	; 1ab9c <__assert_fail@plt+0x8f14>
   1a76c:	ldr	r7, [r2, r3]
   1a770:	add	r5, pc, r5
   1a774:	mov	r4, r0
   1a778:	ldr	r0, [r5, #16]
   1a77c:	sub	sp, sp, #12
   1a780:	ldr	r3, [r7]
   1a784:	cmp	r0, #0
   1a788:	mov	r8, r1
   1a78c:	str	r3, [sp, #4]
   1a790:	beq	1a8f8 <__assert_fail@plt+0x8c70>
   1a794:	ldr	r1, [pc, #1028]	; 1aba0 <__assert_fail@plt+0x8f18>
   1a798:	mov	r2, r4
   1a79c:	add	r1, pc, r1
   1a7a0:	mov	r0, #4
   1a7a4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a7a8:	cmp	r8, #0
   1a7ac:	beq	1ab78 <__assert_fail@plt+0x8ef0>
   1a7b0:	cmp	r4, #0
   1a7b4:	blt	1a928 <__assert_fail@plt+0x8ca0>
   1a7b8:	ldr	r6, [pc, #996]	; 1aba4 <__assert_fail@plt+0x8f1c>
   1a7bc:	add	r6, pc, r6
   1a7c0:	ldr	r3, [r6, #4]
   1a7c4:	cmp	r3, r4
   1a7c8:	ble	1a928 <__assert_fail@plt+0x8ca0>
   1a7cc:	add	r5, r4, r4, lsl #2
   1a7d0:	ldr	r3, [r6, #12]
   1a7d4:	lsl	r5, r5, #2
   1a7d8:	add	r2, r3, r5
   1a7dc:	ldr	r3, [r3, r5]
   1a7e0:	cmp	r3, #0
   1a7e4:	beq	1ab34 <__assert_fail@plt+0x8eac>
   1a7e8:	ldr	r3, [r2, #4]
   1a7ec:	cmp	r3, #0
   1a7f0:	beq	1a954 <__assert_fail@plt+0x8ccc>
   1a7f4:	ldr	r1, [pc, #940]	; 1aba8 <__assert_fail@plt+0x8f20>
   1a7f8:	mov	r0, #4
   1a7fc:	add	r1, pc, r1
   1a800:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a804:	ldr	r1, [pc, #928]	; 1abac <__assert_fail@plt+0x8f24>
   1a808:	mov	r0, #4
   1a80c:	add	r1, pc, r1
   1a810:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a814:	ldr	r1, [pc, #916]	; 1abb0 <__assert_fail@plt+0x8f28>
   1a818:	mov	r0, #6
   1a81c:	add	r1, pc, r1
   1a820:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a824:	ldr	r1, [pc, #904]	; 1abb4 <__assert_fail@plt+0x8f2c>
   1a828:	mov	r0, #6
   1a82c:	add	r1, pc, r1
   1a830:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a834:	ldr	r3, [r6, #12]
   1a838:	add	r3, r3, r5
   1a83c:	ldr	r9, [r3, #8]
   1a840:	cmp	r9, #1
   1a844:	beq	1aa44 <__assert_fail@plt+0x8dbc>
   1a848:	cmp	r9, #0
   1a84c:	beq	1a998 <__assert_fail@plt+0x8d10>
   1a850:	cmp	r9, #2
   1a854:	bne	1aac0 <__assert_fail@plt+0x8e38>
   1a858:	ldr	r1, [pc, #856]	; 1abb8 <__assert_fail@plt+0x8f30>
   1a85c:	mov	r0, #5
   1a860:	add	r1, pc, r1
   1a864:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a868:	ldr	r1, [r6, #8]
   1a86c:	mov	r3, #1
   1a870:	add	r2, sp, #3
   1a874:	ldr	r0, [r1, r4, lsl #2]
   1a878:	mov	r1, #0
   1a87c:	bl	11808 <ieee1284_epp_read_data@plt>
   1a880:	ldr	r3, [r6, #8]
   1a884:	ldrb	r5, [sp, #3]
   1a888:	ldr	r1, [pc, #812]	; 1abbc <__assert_fail@plt+0x8f34>
   1a88c:	ldr	r3, [r3, r4, lsl #2]
   1a890:	add	r1, pc, r1
   1a894:	mov	r2, r5
   1a898:	mov	r0, #6
   1a89c:	ldr	r3, [r3]
   1a8a0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a8a4:	strb	r5, [r8]
   1a8a8:	ldr	r1, [pc, #784]	; 1abc0 <__assert_fail@plt+0x8f38>
   1a8ac:	mov	r0, #5
   1a8b0:	add	r1, pc, r1
   1a8b4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a8b8:	ldr	r1, [pc, #772]	; 1abc4 <__assert_fail@plt+0x8f3c>
   1a8bc:	ldrb	r2, [r8]
   1a8c0:	add	r1, pc, r1
   1a8c4:	mov	r0, #6
   1a8c8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a8cc:	ldr	r1, [pc, #756]	; 1abc8 <__assert_fail@plt+0x8f40>
   1a8d0:	mov	r0, #5
   1a8d4:	add	r1, pc, r1
   1a8d8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a8dc:	mov	r0, #0
   1a8e0:	ldr	r2, [sp, #4]
   1a8e4:	ldr	r3, [r7]
   1a8e8:	cmp	r2, r3
   1a8ec:	bne	1ab90 <__assert_fail@plt+0x8f08>
   1a8f0:	add	sp, sp, #12
   1a8f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a8f8:	ldr	r3, [pc, #716]	; 1abcc <__assert_fail@plt+0x8f44>
   1a8fc:	ldr	r0, [pc, #716]	; 1abd0 <__assert_fail@plt+0x8f48>
   1a900:	ldr	r1, [r2, r3]
   1a904:	add	r0, pc, r0
   1a908:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1a90c:	ldr	r1, [pc, #704]	; 1abd4 <__assert_fail@plt+0x8f4c>
   1a910:	mov	r0, #6
   1a914:	add	r1, pc, r1
   1a918:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a91c:	mov	r3, #1
   1a920:	str	r3, [r5, #16]
   1a924:	b	1a794 <__assert_fail@plt+0x8b0c>
   1a928:	ldr	r1, [pc, #680]	; 1abd8 <__assert_fail@plt+0x8f50>
   1a92c:	mov	r2, r4
   1a930:	add	r1, pc, r1
   1a934:	mov	r0, #2
   1a938:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a93c:	ldr	r1, [pc, #664]	; 1abdc <__assert_fail@plt+0x8f54>
   1a940:	mov	r0, #5
   1a944:	add	r1, pc, r1
   1a948:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a94c:	mov	r0, #4
   1a950:	b	1a8e0 <__assert_fail@plt+0x8c58>
   1a954:	ldr	r1, [pc, #644]	; 1abe0 <__assert_fail@plt+0x8f58>
   1a958:	mov	r0, #2
   1a95c:	add	r1, pc, r1
   1a960:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a964:	ldr	r3, [r6, #8]
   1a968:	ldr	r1, [pc, #628]	; 1abe4 <__assert_fail@plt+0x8f5c>
   1a96c:	mov	r0, #6
   1a970:	ldr	r3, [r3, r4, lsl #2]
   1a974:	add	r1, pc, r1
   1a978:	ldr	r2, [r3]
   1a97c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a980:	ldr	r1, [pc, #608]	; 1abe8 <__assert_fail@plt+0x8f60>
   1a984:	mov	r0, #5
   1a988:	add	r1, pc, r1
   1a98c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a990:	mov	r0, #4
   1a994:	b	1a8e0 <__assert_fail@plt+0x8c58>
   1a998:	ldr	r1, [pc, #588]	; 1abec <__assert_fail@plt+0x8f64>
   1a99c:	mov	r0, #5
   1a9a0:	add	r1, pc, r1
   1a9a4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1a9a8:	ldr	r3, [r6, #8]
   1a9ac:	mov	r1, #14
   1a9b0:	ldr	r0, [r3, r4, lsl #2]
   1a9b4:	bl	119c4 <ieee1284_write_control@plt>
   1a9b8:	ldr	r3, [r6, #8]
   1a9bc:	ldr	r0, [r3, r4, lsl #2]
   1a9c0:	bl	11c04 <ieee1284_read_status@plt>
   1a9c4:	ldr	r3, [r6, #8]
   1a9c8:	mov	r1, #88	; 0x58
   1a9cc:	mov	r5, r0
   1a9d0:	ldr	r0, [r3, r4, lsl #2]
   1a9d4:	bl	11a9c <ieee1284_write_data@plt>
   1a9d8:	ldr	r3, [r6, #8]
   1a9dc:	uxtb	r5, r5
   1a9e0:	ldr	r0, [r3, r4, lsl #2]
   1a9e4:	bl	11c04 <ieee1284_read_status@plt>
   1a9e8:	ldr	r2, [r6, #8]
   1a9ec:	eor	r3, r5, #128	; 0x80
   1a9f0:	mov	r1, r9
   1a9f4:	eor	r5, r0, #128	; 0x80
   1a9f8:	and	r5, r5, #240	; 0xf0
   1a9fc:	ldr	r0, [r2, r4, lsl #2]
   1aa00:	orr	r5, r5, r3, lsr #4
   1aa04:	bl	11a9c <ieee1284_write_data@plt>
   1aa08:	ldr	r3, [r6, #8]
   1aa0c:	mov	r1, #15
   1aa10:	eor	r5, r5, #136	; 0x88
   1aa14:	ldr	r0, [r3, r4, lsl #2]
   1aa18:	bl	119c4 <ieee1284_write_control@plt>
   1aa1c:	ldr	r1, [pc, #460]	; 1abf0 <__assert_fail@plt+0x8f68>
   1aa20:	ldr	r3, [r6, #8]
   1aa24:	mov	r2, r5
   1aa28:	add	r1, pc, r1
   1aa2c:	ldr	r3, [r3, r4, lsl #2]
   1aa30:	mov	r0, #6
   1aa34:	ldr	r3, [r3]
   1aa38:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aa3c:	strb	r5, [r8]
   1aa40:	b	1a8a8 <__assert_fail@plt+0x8c20>
   1aa44:	ldr	r1, [pc, #424]	; 1abf4 <__assert_fail@plt+0x8f6c>
   1aa48:	mov	r0, #5
   1aa4c:	add	r1, pc, r1
   1aa50:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aa54:	ldr	r3, [r6, #8]
   1aa58:	mov	r1, #14
   1aa5c:	mvn	r5, #79	; 0x4f
   1aa60:	ldr	r0, [r3, r4, lsl #2]
   1aa64:	bl	119c4 <ieee1284_write_control@plt>
   1aa68:	ldr	r3, [r6, #8]
   1aa6c:	ldr	r0, [r3, r4, lsl #2]
   1aa70:	bl	11940 <ieee1284_read_control@plt>
   1aa74:	ldr	r3, [r6, #8]
   1aa78:	eor	r5, r5, r0, lsl #4
   1aa7c:	ldr	r0, [r3, r4, lsl #2]
   1aa80:	bl	11c04 <ieee1284_read_status@plt>
   1aa84:	uxtb	r5, r5
   1aa88:	ldr	r2, [r6, #8]
   1aa8c:	bic	r3, r5, #31
   1aa90:	mov	r1, #15
   1aa94:	asr	r5, r0, #3
   1aa98:	eor	r5, r5, #16
   1aa9c:	orr	r5, r5, r3
   1aaa0:	ldr	r0, [r2, r4, lsl #2]
   1aaa4:	bl	119c4 <ieee1284_write_control@plt>
   1aaa8:	ldr	r1, [pc, #328]	; 1abf8 <__assert_fail@plt+0x8f70>
   1aaac:	uxtb	r5, r5
   1aab0:	ldr	r3, [r6, #8]
   1aab4:	mov	r2, r5
   1aab8:	add	r1, pc, r1
   1aabc:	b	1aa2c <__assert_fail@plt+0x8da4>
   1aac0:	ldr	r1, [pc, #308]	; 1abfc <__assert_fail@plt+0x8f74>
   1aac4:	mov	r0, #1
   1aac8:	add	r1, pc, r1
   1aacc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aad0:	ldr	r1, [pc, #296]	; 1ac00 <__assert_fail@plt+0x8f78>
   1aad4:	mov	r0, #2
   1aad8:	add	r1, pc, r1
   1aadc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aae0:	ldr	r1, [pc, #284]	; 1ac04 <__assert_fail@plt+0x8f7c>
   1aae4:	mov	r0, #3
   1aae8:	add	r1, pc, r1
   1aaec:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aaf0:	ldr	r3, [r6, #12]
   1aaf4:	ldr	r1, [pc, #268]	; 1ac08 <__assert_fail@plt+0x8f80>
   1aaf8:	add	r5, r3, r5
   1aafc:	add	r1, pc, r1
   1ab00:	ldr	r2, [r5, #8]
   1ab04:	mov	r0, #6
   1ab08:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab0c:	ldr	r1, [pc, #248]	; 1ac0c <__assert_fail@plt+0x8f84>
   1ab10:	mov	r0, #6
   1ab14:	add	r1, pc, r1
   1ab18:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab1c:	ldr	r1, [pc, #236]	; 1ac10 <__assert_fail@plt+0x8f88>
   1ab20:	mov	r0, #5
   1ab24:	add	r1, pc, r1
   1ab28:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab2c:	mov	r0, #4
   1ab30:	b	1a8e0 <__assert_fail@plt+0x8c58>
   1ab34:	ldr	r1, [pc, #216]	; 1ac14 <__assert_fail@plt+0x8f8c>
   1ab38:	mov	r0, #2
   1ab3c:	add	r1, pc, r1
   1ab40:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab44:	ldr	r3, [r6, #8]
   1ab48:	ldr	r1, [pc, #200]	; 1ac18 <__assert_fail@plt+0x8f90>
   1ab4c:	mov	r0, #6
   1ab50:	ldr	r3, [r3, r4, lsl #2]
   1ab54:	add	r1, pc, r1
   1ab58:	ldr	r2, [r3]
   1ab5c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab60:	ldr	r1, [pc, #180]	; 1ac1c <__assert_fail@plt+0x8f94>
   1ab64:	mov	r0, #5
   1ab68:	add	r1, pc, r1
   1ab6c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab70:	mov	r0, #4
   1ab74:	b	1a8e0 <__assert_fail@plt+0x8c58>
   1ab78:	ldr	r1, [pc, #160]	; 1ac20 <__assert_fail@plt+0x8f98>
   1ab7c:	mov	r0, #1
   1ab80:	add	r1, pc, r1
   1ab84:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ab88:	mov	r0, #4
   1ab8c:	b	1a8e0 <__assert_fail@plt+0x8c58>
   1ab90:	bl	118e0 <__stack_chk_fail@plt>
   1ab94:	andeq	sp, r1, r0, asr #13
   1ab98:			; <UNDEFINED> instruction: 0x000001b0
   1ab9c:	andeq	lr, r1, ip, ror fp
   1aba0:	andeq	sl, r0, r8, asr r1
   1aba4:	andeq	lr, r1, r0, lsr fp
   1aba8:	andeq	sl, r0, r4, lsl r2
   1abac:	andeq	sl, r0, r8, lsr r2
   1abb0:	andeq	sl, r0, r0, ror #4
   1abb4:	muleq	r0, r0, r2
   1abb8:	muleq	r0, r8, r2
   1abbc:	muleq	r0, r0, r2
   1abc0:	andeq	sl, r0, r4, ror r4
   1abc4:	andeq	sl, r0, ip, lsl #9
   1abc8:	andeq	sl, r0, r0, lsr #9
   1abcc:	andeq	r0, r0, r8, asr #3
   1abd0:	strdeq	r8, [r0], -ip
   1abd4:	muleq	r0, r8, r2
   1abd8:	andeq	sl, r0, ip, lsr #32
   1abdc:	andeq	sl, r0, r0, asr #32
   1abe0:	andeq	sl, r0, r8, lsl #1
   1abe4:	andeq	r9, r0, r0, asr #12
   1abe8:	strdeq	r9, [r0], -ip
   1abec:	andeq	sl, r0, r0, lsl r2
   1abf0:			; <UNDEFINED> instruction: 0x0000a1b0
   1abf4:	andeq	sl, r0, r8, lsl #2
   1abf8:	andeq	sl, r0, r4, asr #1
   1abfc:	andeq	sl, r0, r4, asr #2
   1ac00:	andeq	sl, r0, ip, asr r1
   1ac04:	muleq	r0, r4, r1
   1ac08:	andeq	sl, r0, ip, lsr #3
   1ac0c:			; <UNDEFINED> instruction: 0x0000a1b8
   1ac10:	ldrdeq	sl, [r0], -r0
   1ac14:	andeq	r9, r0, ip, ror lr
   1ac18:	andeq	r9, r0, r0, ror #8
   1ac1c:	andeq	r9, r0, ip, lsl lr
   1ac20:	andeq	r9, r0, r0, lsr #27
   1ac24:	push	{r4, r5, r6, lr}
   1ac28:	mov	r4, r0
   1ac2c:	ldr	r5, [pc, #736]	; 1af14 <__assert_fail@plt+0x928c>
   1ac30:	ldr	r3, [pc, #736]	; 1af18 <__assert_fail@plt+0x9290>
   1ac34:	add	r5, pc, r5
   1ac38:	add	r3, pc, r3
   1ac3c:	ldr	r2, [r5, #16]
   1ac40:	cmp	r2, #0
   1ac44:	beq	1ad6c <__assert_fail@plt+0x90e4>
   1ac48:	ldr	r1, [pc, #716]	; 1af1c <__assert_fail@plt+0x9294>
   1ac4c:	mov	r2, r4
   1ac50:	add	r1, pc, r1
   1ac54:	mov	r0, #4
   1ac58:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ac5c:	cmp	r4, #0
   1ac60:	blt	1ad9c <__assert_fail@plt+0x9114>
   1ac64:	ldr	r6, [pc, #692]	; 1af20 <__assert_fail@plt+0x9298>
   1ac68:	add	r6, pc, r6
   1ac6c:	ldr	r3, [r6, #4]
   1ac70:	cmp	r3, r4
   1ac74:	ble	1ad9c <__assert_fail@plt+0x9114>
   1ac78:	add	r5, r4, r4, lsl #2
   1ac7c:	ldr	r3, [r6, #12]
   1ac80:	lsl	r5, r5, #2
   1ac84:	add	r2, r3, r5
   1ac88:	ldr	r3, [r3, r5]
   1ac8c:	cmp	r3, #0
   1ac90:	beq	1aed0 <__assert_fail@plt+0x9248>
   1ac94:	ldr	r3, [r2, #4]
   1ac98:	cmp	r3, #0
   1ac9c:	beq	1adc8 <__assert_fail@plt+0x9140>
   1aca0:	ldr	r1, [pc, #636]	; 1af24 <__assert_fail@plt+0x929c>
   1aca4:	mov	r0, #4
   1aca8:	add	r1, pc, r1
   1acac:	bl	18ea8 <__assert_fail@plt+0x7220>
   1acb0:	ldr	r1, [pc, #624]	; 1af28 <__assert_fail@plt+0x92a0>
   1acb4:	mov	r0, #4
   1acb8:	add	r1, pc, r1
   1acbc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1acc0:	ldr	r1, [pc, #612]	; 1af2c <__assert_fail@plt+0x92a4>
   1acc4:	mov	r0, #6
   1acc8:	add	r1, pc, r1
   1accc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1acd0:	ldr	r1, [pc, #600]	; 1af30 <__assert_fail@plt+0x92a8>
   1acd4:	mov	r0, #6
   1acd8:	add	r1, pc, r1
   1acdc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ace0:	ldr	r3, [r6, #12]
   1ace4:	add	r3, r3, r5
   1ace8:	ldr	r3, [r3, #8]
   1acec:	cmp	r3, #1
   1acf0:	beq	1ae34 <__assert_fail@plt+0x91ac>
   1acf4:	cmp	r3, #0
   1acf8:	beq	1ae0c <__assert_fail@plt+0x9184>
   1acfc:	cmp	r3, #2
   1ad00:	bne	1ae5c <__assert_fail@plt+0x91d4>
   1ad04:	ldr	r1, [pc, #552]	; 1af34 <__assert_fail@plt+0x92ac>
   1ad08:	mov	r0, #5
   1ad0c:	add	r1, pc, r1
   1ad10:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ad14:	ldr	r1, [pc, #540]	; 1af38 <__assert_fail@plt+0x92b0>
   1ad18:	mov	r0, #6
   1ad1c:	add	r1, pc, r1
   1ad20:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ad24:	ldr	r3, [r6, #8]
   1ad28:	mov	r1, #15
   1ad2c:	ldr	r0, [r3, r4, lsl #2]
   1ad30:	bl	119c4 <ieee1284_write_control@plt>
   1ad34:	ldr	r3, [r6, #8]
   1ad38:	mov	r1, #11
   1ad3c:	ldr	r0, [r3, r4, lsl #2]
   1ad40:	bl	119c4 <ieee1284_write_control@plt>
   1ad44:	ldr	r3, [r6, #8]
   1ad48:	mov	r1, #15
   1ad4c:	ldr	r0, [r3, r4, lsl #2]
   1ad50:	bl	119c4 <ieee1284_write_control@plt>
   1ad54:	ldr	r1, [pc, #480]	; 1af3c <__assert_fail@plt+0x92b4>
   1ad58:	mov	r0, #5
   1ad5c:	add	r1, pc, r1
   1ad60:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ad64:	mov	r0, #0
   1ad68:	pop	{r4, r5, r6, pc}
   1ad6c:	ldr	r2, [pc, #460]	; 1af40 <__assert_fail@plt+0x92b8>
   1ad70:	ldr	r0, [pc, #460]	; 1af44 <__assert_fail@plt+0x92bc>
   1ad74:	ldr	r1, [r3, r2]
   1ad78:	add	r0, pc, r0
   1ad7c:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1ad80:	ldr	r1, [pc, #448]	; 1af48 <__assert_fail@plt+0x92c0>
   1ad84:	mov	r0, #6
   1ad88:	add	r1, pc, r1
   1ad8c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ad90:	mov	r3, #1
   1ad94:	str	r3, [r5, #16]
   1ad98:	b	1ac48 <__assert_fail@plt+0x8fc0>
   1ad9c:	ldr	r1, [pc, #424]	; 1af4c <__assert_fail@plt+0x92c4>
   1ada0:	mov	r2, r4
   1ada4:	add	r1, pc, r1
   1ada8:	mov	r0, #2
   1adac:	bl	18ea8 <__assert_fail@plt+0x7220>
   1adb0:	ldr	r1, [pc, #408]	; 1af50 <__assert_fail@plt+0x92c8>
   1adb4:	mov	r0, #5
   1adb8:	add	r1, pc, r1
   1adbc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1adc0:	mov	r0, #4
   1adc4:	pop	{r4, r5, r6, pc}
   1adc8:	ldr	r1, [pc, #388]	; 1af54 <__assert_fail@plt+0x92cc>
   1adcc:	mov	r0, #2
   1add0:	add	r1, pc, r1
   1add4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1add8:	ldr	r3, [r6, #8]
   1addc:	ldr	r1, [pc, #372]	; 1af58 <__assert_fail@plt+0x92d0>
   1ade0:	mov	r0, #6
   1ade4:	ldr	r3, [r3, r4, lsl #2]
   1ade8:	add	r1, pc, r1
   1adec:	ldr	r2, [r3]
   1adf0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1adf4:	ldr	r1, [pc, #352]	; 1af5c <__assert_fail@plt+0x92d4>
   1adf8:	mov	r0, #5
   1adfc:	add	r1, pc, r1
   1ae00:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae04:	mov	r0, #4
   1ae08:	pop	{r4, r5, r6, pc}
   1ae0c:	ldr	r1, [pc, #332]	; 1af60 <__assert_fail@plt+0x92d8>
   1ae10:	mov	r0, #5
   1ae14:	add	r1, pc, r1
   1ae18:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae1c:	ldr	r1, [pc, #320]	; 1af64 <__assert_fail@plt+0x92dc>
   1ae20:	mov	r2, r4
   1ae24:	add	r1, pc, r1
   1ae28:	mov	r0, #6
   1ae2c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae30:	b	1ad54 <__assert_fail@plt+0x90cc>
   1ae34:	ldr	r1, [pc, #300]	; 1af68 <__assert_fail@plt+0x92e0>
   1ae38:	mov	r0, #5
   1ae3c:	add	r1, pc, r1
   1ae40:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae44:	ldr	r1, [pc, #288]	; 1af6c <__assert_fail@plt+0x92e4>
   1ae48:	mov	r2, r4
   1ae4c:	add	r1, pc, r1
   1ae50:	mov	r0, #6
   1ae54:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae58:	b	1ad54 <__assert_fail@plt+0x90cc>
   1ae5c:	ldr	r1, [pc, #268]	; 1af70 <__assert_fail@plt+0x92e8>
   1ae60:	mov	r0, #1
   1ae64:	add	r1, pc, r1
   1ae68:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae6c:	ldr	r1, [pc, #256]	; 1af74 <__assert_fail@plt+0x92ec>
   1ae70:	mov	r0, #2
   1ae74:	add	r1, pc, r1
   1ae78:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae7c:	ldr	r1, [pc, #244]	; 1af78 <__assert_fail@plt+0x92f0>
   1ae80:	mov	r0, #3
   1ae84:	add	r1, pc, r1
   1ae88:	bl	18ea8 <__assert_fail@plt+0x7220>
   1ae8c:	ldr	r3, [r6, #12]
   1ae90:	ldr	r1, [pc, #228]	; 1af7c <__assert_fail@plt+0x92f4>
   1ae94:	add	r5, r3, r5
   1ae98:	add	r1, pc, r1
   1ae9c:	ldr	r2, [r5, #8]
   1aea0:	mov	r0, #6
   1aea4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aea8:	ldr	r1, [pc, #208]	; 1af80 <__assert_fail@plt+0x92f8>
   1aeac:	mov	r0, #6
   1aeb0:	add	r1, pc, r1
   1aeb4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aeb8:	ldr	r1, [pc, #196]	; 1af84 <__assert_fail@plt+0x92fc>
   1aebc:	mov	r0, #5
   1aec0:	add	r1, pc, r1
   1aec4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aec8:	mov	r0, #4
   1aecc:	pop	{r4, r5, r6, pc}
   1aed0:	ldr	r1, [pc, #176]	; 1af88 <__assert_fail@plt+0x9300>
   1aed4:	mov	r0, #2
   1aed8:	add	r1, pc, r1
   1aedc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aee0:	ldr	r3, [r6, #8]
   1aee4:	ldr	r1, [pc, #160]	; 1af8c <__assert_fail@plt+0x9304>
   1aee8:	mov	r0, #6
   1aeec:	ldr	r3, [r3, r4, lsl #2]
   1aef0:	add	r1, pc, r1
   1aef4:	ldr	r2, [r3]
   1aef8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aefc:	ldr	r1, [pc, #140]	; 1af90 <__assert_fail@plt+0x9308>
   1af00:	mov	r0, #5
   1af04:	add	r1, pc, r1
   1af08:	bl	18ea8 <__assert_fail@plt+0x7220>
   1af0c:	mov	r0, #4
   1af10:	pop	{r4, r5, r6, pc}
   1af14:			; <UNDEFINED> instruction: 0x0001e6b8
   1af18:	andeq	sp, r1, ip, ror #3
   1af1c:	andeq	sl, r0, r8, asr r1
   1af20:	andeq	lr, r1, r4, lsl #13
   1af24:	ldrdeq	sl, [r0], -r8
   1af28:	strdeq	sl, [r0], -ip
   1af2c:	andeq	sl, r0, r4, lsr #4
   1af30:	andeq	sl, r0, r0, asr r2
   1af34:	andeq	sl, r0, r8, asr r2
   1af38:	andeq	sl, r0, r0, ror r2
   1af3c:	andeq	sl, r0, ip, lsr #8
   1af40:	andeq	r0, r0, r8, asr #3
   1af44:	andeq	r8, r0, r8, lsl #19
   1af48:	andeq	r8, r0, r4, lsr #28
   1af4c:	andeq	sl, r0, ip, lsr #32
   1af50:	andeq	sl, r0, ip, lsr r0
   1af54:	andeq	sl, r0, r4, lsl #1
   1af58:	andeq	r9, r0, ip, asr #3
   1af5c:	strdeq	r9, [r0], -r8
   1af60:	andeq	sl, r0, r4, lsl #4
   1af64:	andeq	sl, r0, ip, lsl r2
   1af68:	andeq	sl, r0, ip, ror r1
   1af6c:	muleq	r0, r4, r1
   1af70:	andeq	sl, r0, r4, lsl r2
   1af74:	andeq	sl, r0, ip, lsr #4
   1af78:	andeq	sl, r0, r4, ror #4
   1af7c:	andeq	sl, r0, r8, ror r2
   1af80:	andeq	sl, r0, r4, lsl #5
   1af84:	muleq	r0, r8, r2
   1af88:	andeq	r9, r0, r0, asr pc
   1af8c:	andeq	r9, r0, r4, asr #1
   1af90:	strdeq	r9, [r0], -r0
   1af94:	ldr	r2, [pc, #1012]	; 1b390 <__assert_fail@plt+0x9708>
   1af98:	ldr	r3, [pc, #1012]	; 1b394 <__assert_fail@plt+0x970c>
   1af9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1afa0:	add	r2, pc, r2
   1afa4:	ldr	r7, [pc, #1004]	; 1b398 <__assert_fail@plt+0x9710>
   1afa8:	ldr	r5, [r2, r3]
   1afac:	add	r7, pc, r7
   1afb0:	mov	r6, r0
   1afb4:	ldr	r0, [r7, #16]
   1afb8:	sub	sp, sp, #20
   1afbc:	ldr	r3, [r5]
   1afc0:	cmp	r0, #0
   1afc4:	mov	r4, r1
   1afc8:	str	r3, [sp, #12]
   1afcc:	beq	1b0fc <__assert_fail@plt+0x9474>
   1afd0:	ldr	r1, [pc, #964]	; 1b39c <__assert_fail@plt+0x9714>
   1afd4:	mov	r2, r6
   1afd8:	add	r1, pc, r1
   1afdc:	mov	r0, #4
   1afe0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1afe4:	ldr	r1, [pc, #948]	; 1b3a0 <__assert_fail@plt+0x9718>
   1afe8:	mov	r0, #5
   1afec:	add	r1, pc, r1
   1aff0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1aff4:	mov	r0, r6
   1aff8:	add	r1, sp, #8
   1affc:	bl	19288 <__assert_fail@plt+0x7600>
   1b000:	cmn	r0, #1
   1b004:	str	r0, [r4]
   1b008:	beq	1b12c <__assert_fail@plt+0x94a4>
   1b00c:	ldr	r1, [pc, #912]	; 1b3a4 <__assert_fail@plt+0x971c>
   1b010:	mov	r2, r0
   1b014:	add	r1, pc, r1
   1b018:	mov	r0, #6
   1b01c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b020:	ldr	r1, [pc, #896]	; 1b3a8 <__assert_fail@plt+0x9720>
   1b024:	mov	r0, #5
   1b028:	add	r1, pc, r1
   1b02c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b030:	mov	r1, #1
   1b034:	ldr	r0, [r4]
   1b038:	bl	19d70 <__assert_fail@plt+0x80e8>
   1b03c:	ldr	r1, [pc, #872]	; 1b3ac <__assert_fail@plt+0x9724>
   1b040:	mov	r0, #6
   1b044:	add	r1, pc, r1
   1b048:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b04c:	mov	r1, #0
   1b050:	ldr	r0, [r4]
   1b054:	bl	1a380 <__assert_fail@plt+0x86f8>
   1b058:	add	r1, sp, #6
   1b05c:	ldr	r0, [r4]
   1b060:	bl	1a758 <__assert_fail@plt+0x8ad0>
   1b064:	ldr	r0, [r4]
   1b068:	bl	1ac24 <__assert_fail@plt+0x8f9c>
   1b06c:	ldrb	r3, [sp, #6]
   1b070:	cmp	r3, #165	; 0xa5
   1b074:	beq	1b144 <__assert_fail@plt+0x94bc>
   1b078:	cmp	r3, #168	; 0xa8
   1b07c:	beq	1b364 <__assert_fail@plt+0x96dc>
   1b080:	cmp	r3, #162	; 0xa2
   1b084:	beq	1b378 <__assert_fail@plt+0x96f0>
   1b088:	ldr	r1, [pc, #800]	; 1b3b0 <__assert_fail@plt+0x9728>
   1b08c:	mov	r0, #1
   1b090:	add	r1, pc, r1
   1b094:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b098:	ldr	r1, [pc, #788]	; 1b3b4 <__assert_fail@plt+0x972c>
   1b09c:	ldrb	r2, [sp, #6]
   1b0a0:	add	r1, pc, r1
   1b0a4:	mov	r0, #3
   1b0a8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b0ac:	mov	r1, #0
   1b0b0:	ldr	r0, [r4]
   1b0b4:	bl	19d70 <__assert_fail@plt+0x80e8>
   1b0b8:	ldr	r1, [pc, #760]	; 1b3b8 <__assert_fail@plt+0x9730>
   1b0bc:	mov	r0, #5
   1b0c0:	add	r1, pc, r1
   1b0c4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b0c8:	ldr	r0, [r4]
   1b0cc:	bl	19ab4 <__assert_fail@plt+0x7e2c>
   1b0d0:	ldr	r1, [pc, #740]	; 1b3bc <__assert_fail@plt+0x9734>
   1b0d4:	mov	r0, #5
   1b0d8:	add	r1, pc, r1
   1b0dc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b0e0:	mov	r0, #4
   1b0e4:	ldr	r2, [sp, #12]
   1b0e8:	ldr	r3, [r5]
   1b0ec:	cmp	r2, r3
   1b0f0:	bne	1b38c <__assert_fail@plt+0x9704>
   1b0f4:	add	sp, sp, #20
   1b0f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b0fc:	ldr	r3, [pc, #700]	; 1b3c0 <__assert_fail@plt+0x9738>
   1b100:	ldr	r0, [pc, #700]	; 1b3c4 <__assert_fail@plt+0x973c>
   1b104:	ldr	r1, [r2, r3]
   1b108:	add	r0, pc, r0
   1b10c:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1b110:	ldr	r1, [pc, #688]	; 1b3c8 <__assert_fail@plt+0x9740>
   1b114:	mov	r0, #6
   1b118:	add	r1, pc, r1
   1b11c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b120:	mov	r3, #1
   1b124:	str	r3, [r7, #16]
   1b128:	b	1afd0 <__assert_fail@plt+0x9348>
   1b12c:	ldr	r1, [pc, #664]	; 1b3cc <__assert_fail@plt+0x9744>
   1b130:	mov	r0, #5
   1b134:	add	r1, pc, r1
   1b138:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b13c:	ldr	r0, [sp, #8]
   1b140:	b	1b0e4 <__assert_fail@plt+0x945c>
   1b144:	ldr	r1, [pc, #644]	; 1b3d0 <__assert_fail@plt+0x9748>
   1b148:	mov	r0, #3
   1b14c:	add	r1, pc, r1
   1b150:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b154:	mov	r1, #0
   1b158:	ldr	r0, [r4]
   1b15c:	bl	19d70 <__assert_fail@plt+0x80e8>
   1b160:	ldr	r1, [pc, #620]	; 1b3d4 <__assert_fail@plt+0x974c>
   1b164:	mov	r0, #4
   1b168:	add	r1, pc, r1
   1b16c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b170:	ldr	r3, [pc, #608]	; 1b3d8 <__assert_fail@plt+0x9750>
   1b174:	ldr	r6, [pc, #608]	; 1b3dc <__assert_fail@plt+0x9754>
   1b178:	add	r3, pc, r3
   1b17c:	ldr	r8, [pc, #604]	; 1b3e0 <__assert_fail@plt+0x9758>
   1b180:	ldr	r7, [pc, #604]	; 1b3e4 <__assert_fail@plt+0x975c>
   1b184:	add	r6, pc, r6
   1b188:	add	r8, pc, r8
   1b18c:	ldr	r1, [r3, #12]
   1b190:	add	r7, pc, r7
   1b194:	b	1b230 <__assert_fail@plt+0x95a8>
   1b198:	cmp	r2, #2
   1b19c:	bne	1b1b4 <__assert_fail@plt+0x952c>
   1b1a0:	ldr	r9, [pc, #576]	; 1b3e8 <__assert_fail@plt+0x9760>
   1b1a4:	add	r9, pc, r9
   1b1a8:	ldr	r3, [r9]
   1b1ac:	tst	r3, #4
   1b1b0:	bne	1b280 <__assert_fail@plt+0x95f8>
   1b1b4:	mov	r1, r6
   1b1b8:	mov	r0, #5
   1b1bc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b1c0:	mov	r1, #1
   1b1c4:	ldr	r0, [r4]
   1b1c8:	bl	19d70 <__assert_fail@plt+0x80e8>
   1b1cc:	mov	r1, #0
   1b1d0:	ldr	r0, [r4]
   1b1d4:	bl	1a380 <__assert_fail@plt+0x86f8>
   1b1d8:	add	r1, sp, #7
   1b1dc:	ldr	r0, [r4]
   1b1e0:	bl	1a758 <__assert_fail@plt+0x8ad0>
   1b1e4:	ldrb	r2, [sp, #7]
   1b1e8:	ldrb	r3, [sp, #6]
   1b1ec:	ldr	r0, [r4]
   1b1f0:	cmp	r2, r3
   1b1f4:	bne	1b310 <__assert_fail@plt+0x9688>
   1b1f8:	bl	1ac24 <__assert_fail@plt+0x8f9c>
   1b1fc:	mov	r1, #0
   1b200:	ldr	r0, [r4]
   1b204:	bl	19d70 <__assert_fail@plt+0x80e8>
   1b208:	mov	r1, r8
   1b20c:	mov	r0, #5
   1b210:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b214:	ldr	r3, [r4]
   1b218:	ldr	r1, [r7, #12]
   1b21c:	add	r3, r3, r3, lsl #2
   1b220:	add	r3, r1, r3, lsl #2
   1b224:	ldr	r2, [r3, #8]
   1b228:	add	r2, r2, #1
   1b22c:	str	r2, [r3, #8]
   1b230:	ldr	r3, [r4]
   1b234:	add	r3, r3, r3, lsl #2
   1b238:	add	r3, r1, r3, lsl #2
   1b23c:	ldr	r2, [r3, #8]
   1b240:	cmp	r2, #2
   1b244:	bhi	1b2a4 <__assert_fail@plt+0x961c>
   1b248:	cmp	r2, #1
   1b24c:	bne	1b198 <__assert_fail@plt+0x9510>
   1b250:	ldr	r9, [pc, #404]	; 1b3ec <__assert_fail@plt+0x9764>
   1b254:	add	r9, pc, r9
   1b258:	ldr	r3, [r9]
   1b25c:	tst	r3, #1
   1b260:	bne	1b1b4 <__assert_fail@plt+0x952c>
   1b264:	ldr	r1, [pc, #388]	; 1b3f0 <__assert_fail@plt+0x9768>
   1b268:	mov	r0, #3
   1b26c:	add	r1, pc, r1
   1b270:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b274:	ldr	r3, [r4]
   1b278:	ldr	r1, [r9, #12]
   1b27c:	b	1b21c <__assert_fail@plt+0x9594>
   1b280:	ldr	r1, [pc, #364]	; 1b3f4 <__assert_fail@plt+0x976c>
   1b284:	mov	r0, #3
   1b288:	add	r1, pc, r1
   1b28c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b290:	ldr	r3, [r4]
   1b294:	ldr	r1, [r9, #12]
   1b298:	add	r3, r3, r3, lsl #2
   1b29c:	add	r3, r1, r3, lsl #2
   1b2a0:	ldr	r2, [r3, #8]
   1b2a4:	sub	r2, r2, #1
   1b2a8:	str	r2, [r3, #8]
   1b2ac:	ldr	r3, [r4]
   1b2b0:	add	r3, r3, r3, lsl #2
   1b2b4:	add	r3, r1, r3, lsl #2
   1b2b8:	ldr	r2, [r3, #8]
   1b2bc:	cmp	r2, #1
   1b2c0:	bne	1b2e8 <__assert_fail@plt+0x9660>
   1b2c4:	ldr	r2, [pc, #300]	; 1b3f8 <__assert_fail@plt+0x9770>
   1b2c8:	add	r2, pc, r2
   1b2cc:	ldr	r2, [r2]
   1b2d0:	ands	r2, r2, #1
   1b2d4:	streq	r2, [r3, #8]
   1b2d8:	ldreq	r3, [r4]
   1b2dc:	addeq	r3, r3, r3, lsl #2
   1b2e0:	addeq	r1, r1, r3, lsl #2
   1b2e4:	ldreq	r2, [r1, #8]
   1b2e8:	ldr	r1, [pc, #268]	; 1b3fc <__assert_fail@plt+0x9774>
   1b2ec:	mov	r0, #5
   1b2f0:	add	r1, pc, r1
   1b2f4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b2f8:	ldr	r1, [pc, #256]	; 1b400 <__assert_fail@plt+0x9778>
   1b2fc:	mov	r0, #4
   1b300:	add	r1, pc, r1
   1b304:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b308:	mov	r0, #0
   1b30c:	b	1b0e4 <__assert_fail@plt+0x945c>
   1b310:	bl	1ac24 <__assert_fail@plt+0x8f9c>
   1b314:	mov	r1, #0
   1b318:	ldr	r0, [r4]
   1b31c:	bl	19d70 <__assert_fail@plt+0x80e8>
   1b320:	ldr	r1, [pc, #220]	; 1b404 <__assert_fail@plt+0x977c>
   1b324:	mov	r0, #5
   1b328:	add	r1, pc, r1
   1b32c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b330:	ldr	r1, [pc, #208]	; 1b408 <__assert_fail@plt+0x9780>
   1b334:	ldrb	r2, [sp, #7]
   1b338:	add	r1, pc, r1
   1b33c:	mov	r0, #6
   1b340:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b344:	ldr	r2, [pc, #192]	; 1b40c <__assert_fail@plt+0x9784>
   1b348:	ldr	r3, [r4]
   1b34c:	add	r2, pc, r2
   1b350:	add	r3, r3, r3, lsl #2
   1b354:	ldr	r1, [r2, #12]
   1b358:	add	r3, r1, r3, lsl #2
   1b35c:	ldr	r2, [r3, #8]
   1b360:	b	1b2a4 <__assert_fail@plt+0x961c>
   1b364:	ldr	r1, [pc, #164]	; 1b410 <__assert_fail@plt+0x9788>
   1b368:	mov	r0, #3
   1b36c:	add	r1, pc, r1
   1b370:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b374:	b	1b154 <__assert_fail@plt+0x94cc>
   1b378:	ldr	r1, [pc, #148]	; 1b414 <__assert_fail@plt+0x978c>
   1b37c:	mov	r0, #3
   1b380:	add	r1, pc, r1
   1b384:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b388:	b	1b154 <__assert_fail@plt+0x94cc>
   1b38c:	bl	118e0 <__stack_chk_fail@plt>
   1b390:	andeq	ip, r1, r4, lsl #29
   1b394:			; <UNDEFINED> instruction: 0x000001b0
   1b398:	andeq	lr, r1, r0, asr #6
   1b39c:	andeq	sl, r0, r4, ror #3
   1b3a0:	strdeq	sl, [r0], -ip
   1b3a4:	andeq	sl, r0, ip, lsr #4
   1b3a8:	andeq	sl, r0, ip, asr #4
   1b3ac:	andeq	sl, r0, r8, asr r2
   1b3b0:			; <UNDEFINED> instruction: 0x0000a2b4
   1b3b4:	ldrdeq	sl, [r0], -r0
   1b3b8:	ldrdeq	sl, [r0], -ip
   1b3bc:	andeq	sl, r0, r4, ror #5
   1b3c0:	andeq	r0, r0, r8, asr #3
   1b3c4:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1b3c8:	muleq	r0, r4, sl
   1b3cc:	andeq	sl, r0, r4, ror #1
   1b3d0:	andeq	sl, r0, r0, lsr #3
   1b3d4:	andeq	sl, r0, r4, lsl #5
   1b3d8:	andeq	lr, r1, r4, ror r1
   1b3dc:	andeq	sl, r0, r0, ror #5
   1b3e0:	andeq	sl, r0, ip, asr #6
   1b3e4:	andeq	lr, r1, ip, asr r1
   1b3e8:	andeq	lr, r1, r8, asr #2
   1b3ec:	muleq	r1, r8, r0
   1b3f0:	andeq	sl, r0, r8, lsr #3
   1b3f4:			; <UNDEFINED> instruction: 0x0000a1b4
   1b3f8:	andeq	lr, r1, r4, lsr #32
   1b3fc:	andeq	sl, r0, r4, lsl #4
   1b400:	andeq	sl, r0, r8, lsl r2
   1b404:	andeq	sl, r0, r0, ror #2
   1b408:	andeq	sl, r0, r0, ror r1
   1b40c:	andeq	sp, r1, r0, lsr #31
   1b410:	andeq	r9, r0, r4, asr pc
   1b414:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   1b418:	push	{r4, r5, r6, r7, r8, lr}
   1b41c:	mov	r4, r0
   1b420:	ldr	r5, [pc, #800]	; 1b748 <__assert_fail@plt+0x9ac0>
   1b424:	sub	sp, sp, #8
   1b428:	add	r5, pc, r5
   1b42c:	mov	r8, r1
   1b430:	ldr	r3, [r5, #16]
   1b434:	mov	r7, r2
   1b438:	cmp	r3, #0
   1b43c:	ldr	r3, [pc, #776]	; 1b74c <__assert_fail@plt+0x9ac4>
   1b440:	add	r3, pc, r3
   1b444:	beq	1b608 <__assert_fail@plt+0x9980>
   1b448:	ldr	r1, [pc, #768]	; 1b750 <__assert_fail@plt+0x9ac8>
   1b44c:	str	r7, [sp]
   1b450:	mov	r3, r8
   1b454:	mov	r2, r4
   1b458:	add	r1, pc, r1
   1b45c:	mov	r0, #4
   1b460:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b464:	cmp	r4, #0
   1b468:	blt	1b638 <__assert_fail@plt+0x99b0>
   1b46c:	ldr	r5, [pc, #736]	; 1b754 <__assert_fail@plt+0x9acc>
   1b470:	add	r5, pc, r5
   1b474:	ldr	r3, [r5, #4]
   1b478:	cmp	r3, r4
   1b47c:	ble	1b638 <__assert_fail@plt+0x99b0>
   1b480:	add	r6, r4, r4, lsl #2
   1b484:	ldr	r3, [r5, #12]
   1b488:	lsl	r6, r6, #2
   1b48c:	add	r2, r3, r6
   1b490:	ldr	r3, [r3, r6]
   1b494:	cmp	r3, #0
   1b498:	beq	1b6c0 <__assert_fail@plt+0x9a38>
   1b49c:	ldr	r3, [r2, #4]
   1b4a0:	cmp	r3, #0
   1b4a4:	beq	1b704 <__assert_fail@plt+0x9a7c>
   1b4a8:	ldr	r3, [r2, #8]
   1b4ac:	cmp	r3, #2
   1b4b0:	bhi	1b668 <__assert_fail@plt+0x99e0>
   1b4b4:	ldr	r1, [pc, #668]	; 1b758 <__assert_fail@plt+0x9ad0>
   1b4b8:	mov	r0, #5
   1b4bc:	add	r1, pc, r1
   1b4c0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b4c4:	ldr	r1, [r5, #8]
   1b4c8:	mov	r2, r7
   1b4cc:	mov	r3, r8
   1b4d0:	ldr	ip, [r1, r4, lsl #2]
   1b4d4:	ldr	r1, [pc, #640]	; 1b75c <__assert_fail@plt+0x9ad4>
   1b4d8:	mov	r0, #6
   1b4dc:	ldr	ip, [ip]
   1b4e0:	add	r1, pc, r1
   1b4e4:	str	ip, [sp]
   1b4e8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b4ec:	ldr	r3, [r5, #8]
   1b4f0:	orr	r1, r8, #16
   1b4f4:	ldr	r0, [r3, r4, lsl #2]
   1b4f8:	bl	11a9c <ieee1284_write_data@plt>
   1b4fc:	ldr	r3, [r5, #8]
   1b500:	mov	r1, #15
   1b504:	ldr	r0, [r3, r4, lsl #2]
   1b508:	bl	119c4 <ieee1284_write_control@plt>
   1b50c:	ldr	r3, [r5, #8]
   1b510:	mov	r1, #13
   1b514:	ldr	r0, [r3, r4, lsl #2]
   1b518:	bl	119c4 <ieee1284_write_control@plt>
   1b51c:	ldr	r3, [r5, #8]
   1b520:	mov	r1, #13
   1b524:	ldr	r0, [r3, r4, lsl #2]
   1b528:	bl	119c4 <ieee1284_write_control@plt>
   1b52c:	ldr	r3, [r5, #8]
   1b530:	mov	r1, #13
   1b534:	ldr	r0, [r3, r4, lsl #2]
   1b538:	bl	119c4 <ieee1284_write_control@plt>
   1b53c:	ldr	r3, [r5, #8]
   1b540:	mov	r1, #13
   1b544:	ldr	r0, [r3, r4, lsl #2]
   1b548:	bl	119c4 <ieee1284_write_control@plt>
   1b54c:	ldr	r3, [r5, #8]
   1b550:	mov	r1, #15
   1b554:	ldr	r0, [r3, r4, lsl #2]
   1b558:	bl	119c4 <ieee1284_write_control@plt>
   1b55c:	ldr	r3, [r5, #8]
   1b560:	mov	r1, #15
   1b564:	ldr	r0, [r3, r4, lsl #2]
   1b568:	bl	119c4 <ieee1284_write_control@plt>
   1b56c:	ldr	r3, [r5, #8]
   1b570:	mov	r1, r7
   1b574:	ldr	r0, [r3, r4, lsl #2]
   1b578:	bl	11a9c <ieee1284_write_data@plt>
   1b57c:	ldr	r3, [r5, #8]
   1b580:	mov	r1, #14
   1b584:	ldr	r0, [r3, r4, lsl #2]
   1b588:	bl	119c4 <ieee1284_write_control@plt>
   1b58c:	ldr	r3, [r5, #8]
   1b590:	mov	r1, #14
   1b594:	ldr	r0, [r3, r4, lsl #2]
   1b598:	bl	119c4 <ieee1284_write_control@plt>
   1b59c:	ldr	r3, [r5, #8]
   1b5a0:	mov	r1, #14
   1b5a4:	ldr	r0, [r3, r4, lsl #2]
   1b5a8:	bl	119c4 <ieee1284_write_control@plt>
   1b5ac:	ldr	r3, [r5, #8]
   1b5b0:	mov	r1, #15
   1b5b4:	ldr	r0, [r3, r4, lsl #2]
   1b5b8:	bl	119c4 <ieee1284_write_control@plt>
   1b5bc:	ldr	r3, [r5, #8]
   1b5c0:	mov	r1, #15
   1b5c4:	ldr	r0, [r3, r4, lsl #2]
   1b5c8:	bl	119c4 <ieee1284_write_control@plt>
   1b5cc:	ldr	r3, [r5, #8]
   1b5d0:	mov	r1, #15
   1b5d4:	ldr	r0, [r3, r4, lsl #2]
   1b5d8:	bl	119c4 <ieee1284_write_control@plt>
   1b5dc:	ldr	r3, [r5, #8]
   1b5e0:	mov	r1, #15
   1b5e4:	ldr	r0, [r3, r4, lsl #2]
   1b5e8:	bl	119c4 <ieee1284_write_control@plt>
   1b5ec:	ldr	r1, [pc, #364]	; 1b760 <__assert_fail@plt+0x9ad8>
   1b5f0:	mov	r0, #5
   1b5f4:	add	r1, pc, r1
   1b5f8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b5fc:	mov	r0, #0
   1b600:	add	sp, sp, #8
   1b604:	pop	{r4, r5, r6, r7, r8, pc}
   1b608:	ldr	r2, [pc, #340]	; 1b764 <__assert_fail@plt+0x9adc>
   1b60c:	ldr	r0, [pc, #340]	; 1b768 <__assert_fail@plt+0x9ae0>
   1b610:	ldr	r1, [r3, r2]
   1b614:	add	r0, pc, r0
   1b618:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1b61c:	ldr	r1, [pc, #328]	; 1b76c <__assert_fail@plt+0x9ae4>
   1b620:	mov	r0, #6
   1b624:	add	r1, pc, r1
   1b628:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b62c:	mov	r3, #1
   1b630:	str	r3, [r5, #16]
   1b634:	b	1b448 <__assert_fail@plt+0x97c0>
   1b638:	ldr	r1, [pc, #304]	; 1b770 <__assert_fail@plt+0x9ae8>
   1b63c:	mov	r2, r4
   1b640:	add	r1, pc, r1
   1b644:	mov	r0, #2
   1b648:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b64c:	ldr	r1, [pc, #288]	; 1b774 <__assert_fail@plt+0x9aec>
   1b650:	mov	r0, #5
   1b654:	add	r1, pc, r1
   1b658:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b65c:	mov	r0, #4
   1b660:	add	sp, sp, #8
   1b664:	pop	{r4, r5, r6, r7, r8, pc}
   1b668:	ldr	r1, [pc, #264]	; 1b778 <__assert_fail@plt+0x9af0>
   1b66c:	mov	r0, #1
   1b670:	add	r1, pc, r1
   1b674:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b678:	ldr	r1, [pc, #252]	; 1b77c <__assert_fail@plt+0x9af4>
   1b67c:	mov	r0, #3
   1b680:	add	r1, pc, r1
   1b684:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b688:	ldr	r3, [r5, #12]
   1b68c:	ldr	r1, [pc, #236]	; 1b780 <__assert_fail@plt+0x9af8>
   1b690:	add	r6, r3, r6
   1b694:	add	r1, pc, r1
   1b698:	ldr	r2, [r6, #8]
   1b69c:	mov	r0, #6
   1b6a0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b6a4:	ldr	r1, [pc, #216]	; 1b784 <__assert_fail@plt+0x9afc>
   1b6a8:	mov	r0, #5
   1b6ac:	add	r1, pc, r1
   1b6b0:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b6b4:	mov	r0, #4
   1b6b8:	add	sp, sp, #8
   1b6bc:	pop	{r4, r5, r6, r7, r8, pc}
   1b6c0:	ldr	r1, [pc, #192]	; 1b788 <__assert_fail@plt+0x9b00>
   1b6c4:	mov	r0, #2
   1b6c8:	add	r1, pc, r1
   1b6cc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b6d0:	ldr	r3, [r5, #8]
   1b6d4:	ldr	r1, [pc, #176]	; 1b78c <__assert_fail@plt+0x9b04>
   1b6d8:	mov	r0, #6
   1b6dc:	ldr	r3, [r3, r4, lsl #2]
   1b6e0:	add	r1, pc, r1
   1b6e4:	ldr	r2, [r3]
   1b6e8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b6ec:	ldr	r1, [pc, #156]	; 1b790 <__assert_fail@plt+0x9b08>
   1b6f0:	mov	r0, #5
   1b6f4:	add	r1, pc, r1
   1b6f8:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b6fc:	mov	r0, #4
   1b700:	b	1b600 <__assert_fail@plt+0x9978>
   1b704:	ldr	r1, [pc, #136]	; 1b794 <__assert_fail@plt+0x9b0c>
   1b708:	mov	r0, #2
   1b70c:	add	r1, pc, r1
   1b710:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b714:	ldr	r3, [r5, #8]
   1b718:	ldr	r1, [pc, #120]	; 1b798 <__assert_fail@plt+0x9b10>
   1b71c:	mov	r0, #6
   1b720:	ldr	r3, [r3, r4, lsl #2]
   1b724:	add	r1, pc, r1
   1b728:	ldr	r2, [r3]
   1b72c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b730:	ldr	r1, [pc, #100]	; 1b79c <__assert_fail@plt+0x9b14>
   1b734:	mov	r0, #5
   1b738:	add	r1, pc, r1
   1b73c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b740:	mov	r0, #4
   1b744:	b	1b600 <__assert_fail@plt+0x9978>
   1b748:	andeq	sp, r1, r4, asr #29
   1b74c:	andeq	ip, r1, r4, ror #19
   1b750:	strdeq	sl, [r0], -r0
   1b754:	andeq	sp, r1, ip, ror lr
   1b758:	andeq	sl, r0, ip, ror r1
   1b75c:	andeq	sl, r0, r4, lsl #3
   1b760:	strheq	sl, [r0], -r0
   1b764:	andeq	r0, r0, r8, asr #3
   1b768:	andeq	r8, r0, ip, ror #1
   1b76c:	andeq	r8, r0, r8, lsl #11
   1b770:	andeq	r9, r0, r4, asr #30
   1b774:	andeq	r9, r0, r8, asr pc
   1b778:	andeq	sl, r0, r8, rrx
   1b77c:	andeq	sl, r0, r4, lsl #1
   1b780:	muleq	r0, ip, r0
   1b784:	andeq	sl, r0, ip, lsr #1
   1b788:	andeq	r9, r0, r8, lsl pc
   1b78c:	ldrdeq	r8, [r0], -r4
   1b790:			; <UNDEFINED> instruction: 0x00009eb8
   1b794:	andeq	r9, r0, r0, lsl #30
   1b798:	muleq	r0, r0, r8
   1b79c:	andeq	r8, r0, r8, asr pc
   1b7a0:	push	{r4, r5, r6, lr}
   1b7a4:	mov	r4, r0
   1b7a8:	ldr	r6, [pc, #256]	; 1b8b0 <__assert_fail@plt+0x9c28>
   1b7ac:	ldr	r3, [pc, #256]	; 1b8b4 <__assert_fail@plt+0x9c2c>
   1b7b0:	add	r6, pc, r6
   1b7b4:	mov	r5, r1
   1b7b8:	ldr	r2, [r6, #16]
   1b7bc:	add	r3, pc, r3
   1b7c0:	cmp	r2, #0
   1b7c4:	beq	1b868 <__assert_fail@plt+0x9be0>
   1b7c8:	ldr	r1, [pc, #232]	; 1b8b8 <__assert_fail@plt+0x9c30>
   1b7cc:	mov	r3, r5
   1b7d0:	ldr	r2, [r4]
   1b7d4:	add	r1, pc, r1
   1b7d8:	mov	r0, #4
   1b7dc:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b7e0:	cmp	r5, #1
   1b7e4:	bhi	1b81c <__assert_fail@plt+0x9b94>
   1b7e8:	bne	1b82c <__assert_fail@plt+0x9ba4>
   1b7ec:	ldr	r2, [r4]
   1b7f0:	cmp	r2, #7
   1b7f4:	bhi	1b898 <__assert_fail@plt+0x9c10>
   1b7f8:	ldr	r1, [pc, #188]	; 1b8bc <__assert_fail@plt+0x9c34>
   1b7fc:	mov	r0, #5
   1b800:	add	r1, pc, r1
   1b804:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b808:	ldr	r3, [pc, #176]	; 1b8c0 <__assert_fail@plt+0x9c38>
   1b80c:	ldr	r2, [r4]
   1b810:	add	r3, pc, r3
   1b814:	str	r2, [r3]
   1b818:	b	1b850 <__assert_fail@plt+0x9bc8>
   1b81c:	ldr	r1, [pc, #160]	; 1b8c4 <__assert_fail@plt+0x9c3c>
   1b820:	mov	r0, #2
   1b824:	add	r1, pc, r1
   1b828:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b82c:	ldr	r5, [pc, #148]	; 1b8c8 <__assert_fail@plt+0x9c40>
   1b830:	ldr	r1, [pc, #148]	; 1b8cc <__assert_fail@plt+0x9c44>
   1b834:	add	r5, pc, r5
   1b838:	add	r1, pc, r1
   1b83c:	mov	r0, #5
   1b840:	ldr	r2, [r5]
   1b844:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b848:	ldr	r3, [r5]
   1b84c:	str	r3, [r4]
   1b850:	ldr	r1, [pc, #120]	; 1b8d0 <__assert_fail@plt+0x9c48>
   1b854:	mov	r0, #5
   1b858:	add	r1, pc, r1
   1b85c:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b860:	mov	r0, #0
   1b864:	pop	{r4, r5, r6, pc}
   1b868:	ldr	r2, [pc, #100]	; 1b8d4 <__assert_fail@plt+0x9c4c>
   1b86c:	ldr	r0, [pc, #100]	; 1b8d8 <__assert_fail@plt+0x9c50>
   1b870:	ldr	r1, [r3, r2]
   1b874:	add	r0, pc, r0
   1b878:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1b87c:	ldr	r1, [pc, #88]	; 1b8dc <__assert_fail@plt+0x9c54>
   1b880:	mov	r0, #6
   1b884:	add	r1, pc, r1
   1b888:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b88c:	mov	r3, #1
   1b890:	str	r3, [r6, #16]
   1b894:	b	1b7c8 <__assert_fail@plt+0x9b40>
   1b898:	ldr	r1, [pc, #64]	; 1b8e0 <__assert_fail@plt+0x9c58>
   1b89c:	mov	r0, #2
   1b8a0:	add	r1, pc, r1
   1b8a4:	bl	18ea8 <__assert_fail@plt+0x7220>
   1b8a8:	ldr	r2, [r4]
   1b8ac:	b	1b7f8 <__assert_fail@plt+0x9b70>
   1b8b0:	andeq	sp, r1, ip, lsr fp
   1b8b4:	andeq	ip, r1, r8, ror #12
   1b8b8:			; <UNDEFINED> instruction: 0x00009fb8
   1b8bc:	andeq	sl, r0, r0, rrx
   1b8c0:	ldrdeq	sp, [r1], -ip
   1b8c4:	andeq	r9, r0, r4, lsr #31
   1b8c8:			; <UNDEFINED> instruction: 0x0001dab8
   1b8cc:	andeq	sl, r0, r4, asr r0
   1b8d0:	ldrdeq	r9, [r0], -r4
   1b8d4:	andeq	r0, r0, r8, asr #3
   1b8d8:	andeq	r7, r0, ip, lsl #29
   1b8dc:	andeq	r8, r0, r8, lsr #6
   1b8e0:	andeq	r9, r0, r8, asr pc
   1b8e4:	add	r0, r0, #99	; 0x63
   1b8e8:	cmp	r0, #99	; 0x63
   1b8ec:	addls	pc, pc, r0, lsl #2
   1b8f0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b8f4:	b	1ba90 <__assert_fail@plt+0x9e08>
   1b8f8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b8fc:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b900:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b904:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b908:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b90c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b910:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b914:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b918:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b91c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b920:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b924:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b928:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b92c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b930:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b934:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b938:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b93c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b940:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b944:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b948:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b94c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b950:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b954:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b958:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b95c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b960:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b964:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b968:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b96c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b970:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b974:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b978:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b97c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b980:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b984:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b988:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b98c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b990:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b994:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b998:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b99c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9a0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9a4:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9a8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9ac:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9b0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9b4:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9b8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9bc:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9c0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9c4:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9c8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9cc:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9d0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9d4:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9d8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9dc:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9e0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9e4:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9e8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9ec:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9f0:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9f4:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9f8:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1b9fc:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba00:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba04:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba08:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba0c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba10:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba14:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba18:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba1c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba20:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba24:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba28:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba2c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba30:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba34:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba38:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba3c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba40:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba44:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba48:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba4c:	b	1bb2c <__assert_fail@plt+0x9ea4>
   1ba50:	b	1ba9c <__assert_fail@plt+0x9e14>
   1ba54:	b	1baa8 <__assert_fail@plt+0x9e20>
   1ba58:	b	1bab4 <__assert_fail@plt+0x9e2c>
   1ba5c:	b	1bac0 <__assert_fail@plt+0x9e38>
   1ba60:	b	1bacc <__assert_fail@plt+0x9e44>
   1ba64:	b	1bad8 <__assert_fail@plt+0x9e50>
   1ba68:	b	1bae4 <__assert_fail@plt+0x9e5c>
   1ba6c:	b	1baf0 <__assert_fail@plt+0x9e68>
   1ba70:	b	1bafc <__assert_fail@plt+0x9e74>
   1ba74:	b	1bb08 <__assert_fail@plt+0x9e80>
   1ba78:	b	1bb14 <__assert_fail@plt+0x9e8c>
   1ba7c:	b	1bb20 <__assert_fail@plt+0x9e98>
   1ba80:	b	1ba84 <__assert_fail@plt+0x9dfc>
   1ba84:	ldr	r0, [pc, #172]	; 1bb38 <__assert_fail@plt+0x9eb0>
   1ba88:	add	r0, pc, r0
   1ba8c:	bx	lr
   1ba90:	ldr	r0, [pc, #164]	; 1bb3c <__assert_fail@plt+0x9eb4>
   1ba94:	add	r0, pc, r0
   1ba98:	bx	lr
   1ba9c:	ldr	r0, [pc, #156]	; 1bb40 <__assert_fail@plt+0x9eb8>
   1baa0:	add	r0, pc, r0
   1baa4:	bx	lr
   1baa8:	ldr	r0, [pc, #148]	; 1bb44 <__assert_fail@plt+0x9ebc>
   1baac:	add	r0, pc, r0
   1bab0:	bx	lr
   1bab4:	ldr	r0, [pc, #140]	; 1bb48 <__assert_fail@plt+0x9ec0>
   1bab8:	add	r0, pc, r0
   1babc:	bx	lr
   1bac0:	ldr	r0, [pc, #132]	; 1bb4c <__assert_fail@plt+0x9ec4>
   1bac4:	add	r0, pc, r0
   1bac8:	bx	lr
   1bacc:	ldr	r0, [pc, #124]	; 1bb50 <__assert_fail@plt+0x9ec8>
   1bad0:	add	r0, pc, r0
   1bad4:	bx	lr
   1bad8:	ldr	r0, [pc, #116]	; 1bb54 <__assert_fail@plt+0x9ecc>
   1badc:	add	r0, pc, r0
   1bae0:	bx	lr
   1bae4:	ldr	r0, [pc, #108]	; 1bb58 <__assert_fail@plt+0x9ed0>
   1bae8:	add	r0, pc, r0
   1baec:	bx	lr
   1baf0:	ldr	r0, [pc, #100]	; 1bb5c <__assert_fail@plt+0x9ed4>
   1baf4:	add	r0, pc, r0
   1baf8:	bx	lr
   1bafc:	ldr	r0, [pc, #92]	; 1bb60 <__assert_fail@plt+0x9ed8>
   1bb00:	add	r0, pc, r0
   1bb04:	bx	lr
   1bb08:	ldr	r0, [pc, #84]	; 1bb64 <__assert_fail@plt+0x9edc>
   1bb0c:	add	r0, pc, r0
   1bb10:	bx	lr
   1bb14:	ldr	r0, [pc, #76]	; 1bb68 <__assert_fail@plt+0x9ee0>
   1bb18:	add	r0, pc, r0
   1bb1c:	bx	lr
   1bb20:	ldr	r0, [pc, #68]	; 1bb6c <__assert_fail@plt+0x9ee4>
   1bb24:	add	r0, pc, r0
   1bb28:	bx	lr
   1bb2c:	ldr	r0, [pc, #60]	; 1bb70 <__assert_fail@plt+0x9ee8>
   1bb30:	add	r0, pc, r0
   1bb34:	bx	lr
   1bb38:	muleq	r0, r4, r7
   1bb3c:	andeq	r5, r0, r8, lsr #12
   1bb40:	andeq	r5, r0, r8, lsr #12
   1bb44:	andeq	r5, r0, r8, asr r6
   1bb48:	andeq	r5, r0, r0, ror #12
   1bb4c:	andeq	r5, r0, r4, lsl #13
   1bb50:	andeq	r5, r0, r4, lsl #13
   1bb54:	andeq	r5, r0, r4, lsl #13
   1bb58:	andeq	r5, r0, ip, lsl #13
   1bb5c:	muleq	r0, r0, r6
   1bb60:	muleq	r0, r8, r6
   1bb64:			; <UNDEFINED> instruction: 0x000056bc
   1bb68:	ldrdeq	r5, [r0], -ip
   1bb6c:	andeq	r5, r0, r4, ror #13
   1bb70:	andeq	r4, r0, ip, lsr #3
   1bb74:	push	{r1, r2, r3}
   1bb78:	ldr	r3, [pc, #100]	; 1bbe4 <__assert_fail@plt+0x9f5c>
   1bb7c:	ldr	r1, [pc, #100]	; 1bbe8 <__assert_fail@plt+0x9f60>
   1bb80:	add	r3, pc, r3
   1bb84:	push	{r4, lr}
   1bb88:	sub	sp, sp, #20
   1bb8c:	ldr	r4, [r3, r1]
   1bb90:	ldr	r2, [pc, #84]	; 1bbec <__assert_fail@plt+0x9f64>
   1bb94:	add	ip, sp, #32
   1bb98:	ldr	r1, [r4]
   1bb9c:	str	ip, [sp, #8]
   1bba0:	str	r1, [sp, #12]
   1bba4:	ldr	r2, [r3, r2]
   1bba8:	str	ip, [sp]
   1bbac:	ldr	r3, [sp, #28]
   1bbb0:	ldr	r1, [r2]
   1bbb4:	ldr	r2, [pc, #52]	; 1bbf0 <__assert_fail@plt+0x9f68>
   1bbb8:	add	r2, pc, r2
   1bbbc:	bl	1f39c <__assert_fail@plt+0xd714>
   1bbc0:	ldr	r2, [sp, #12]
   1bbc4:	ldr	r3, [r4]
   1bbc8:	cmp	r2, r3
   1bbcc:	bne	1bbe0 <__assert_fail@plt+0x9f58>
   1bbd0:	add	sp, sp, #20
   1bbd4:	pop	{r4, lr}
   1bbd8:	add	sp, sp, #12
   1bbdc:	bx	lr
   1bbe0:	bl	118e0 <__stack_chk_fail@plt>
   1bbe4:	andeq	ip, r1, r4, lsr #5
   1bbe8:			; <UNDEFINED> instruction: 0x000001b0
   1bbec:	andeq	r0, r0, r0, asr #3
   1bbf0:	andeq	r9, r0, ip, asr #26
   1bbf4:	ldr	r3, [pc, #476]	; 1bdd8 <__assert_fail@plt+0xa150>
   1bbf8:	ldr	r2, [pc, #476]	; 1bddc <__assert_fail@plt+0xa154>
   1bbfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc00:	add	r3, pc, r3
   1bc04:	sub	sp, sp, #124	; 0x7c
   1bc08:	add	ip, sp, #44	; 0x2c
   1bc0c:	str	ip, [sp, #12]
   1bc10:	ldr	r2, [r3, r2]
   1bc14:	mov	r7, r0
   1bc18:	mov	r0, ip
   1bc1c:	ldr	ip, [r2]
   1bc20:	mov	r6, r1
   1bc24:	str	r2, [sp, #36]	; 0x24
   1bc28:	mov	r1, #0
   1bc2c:	mov	r2, #70	; 0x46
   1bc30:	str	ip, [sp, #116]	; 0x74
   1bc34:	bl	11b08 <memset@plt>
   1bc38:	adds	r3, r6, #15
   1bc3c:	addmi	r3, r6, #30
   1bc40:	cmp	r6, #0
   1bc44:	asr	r3, r3, #4
   1bc48:	str	r3, [sp, #20]
   1bc4c:	ble	1bdb8 <__assert_fail@plt+0xa130>
   1bc50:	ldr	r3, [pc, #392]	; 1bde0 <__assert_fail@plt+0xa158>
   1bc54:	ldr	fp, [pc, #392]	; 1bde4 <__assert_fail@plt+0xa15c>
   1bc58:	add	r3, pc, r3
   1bc5c:	str	r3, [sp, #24]
   1bc60:	ldr	r3, [pc, #384]	; 1bde8 <__assert_fail@plt+0xa160>
   1bc64:	add	fp, pc, fp
   1bc68:	add	r3, pc, r3
   1bc6c:	str	r3, [sp, #32]
   1bc70:	add	r8, sp, #96	; 0x60
   1bc74:	mov	r3, #0
   1bc78:	add	r9, sp, #112	; 0x70
   1bc7c:	str	r3, [sp, #8]
   1bc80:	add	r3, sp, #48	; 0x30
   1bc84:	str	r3, [sp, #28]
   1bc88:	ldr	r3, [sp, #8]
   1bc8c:	mov	r2, #70	; 0x46
   1bc90:	mov	r1, #1
   1bc94:	lsl	r5, r3, #4
   1bc98:	str	r5, [sp]
   1bc9c:	ldr	r3, [sp, #24]
   1bca0:	ldr	r0, [sp, #12]
   1bca4:	bl	11ae4 <__sprintf_chk@plt>
   1bca8:	mov	sl, r5
   1bcac:	str	r5, [sp, #16]
   1bcb0:	ldr	r4, [sp, #28]
   1bcb4:	ldr	r5, [sp, #32]
   1bcb8:	b	1bce8 <__assert_fail@plt+0xa060>
   1bcbc:	ldrb	r1, [r7, sl]
   1bcc0:	mov	r0, r4
   1bcc4:	mov	r3, fp
   1bcc8:	str	r1, [sp]
   1bccc:	mov	r2, #66	; 0x42
   1bcd0:	mov	r1, #1
   1bcd4:	add	r4, r4, #3
   1bcd8:	bl	11ae4 <__sprintf_chk@plt>
   1bcdc:	cmp	r4, r8
   1bce0:	add	sl, sl, #1
   1bce4:	beq	1bd08 <__assert_fail@plt+0xa080>
   1bce8:	cmp	r6, sl
   1bcec:	bgt	1bcbc <__assert_fail@plt+0xa034>
   1bcf0:	ldr	r0, [r5]
   1bcf4:	add	r4, r4, #3
   1bcf8:	str	r0, [r4, #-3]
   1bcfc:	cmp	r4, r8
   1bd00:	add	sl, sl, #1
   1bd04:	bne	1bce8 <__assert_fail@plt+0xa060>
   1bd08:	ldr	r3, [pc, #220]	; 1bdec <__assert_fail@plt+0xa164>
   1bd0c:	ldr	sl, [pc, #220]	; 1bdf0 <__assert_fail@plt+0xa168>
   1bd10:	add	r3, pc, r3
   1bd14:	ldr	r5, [sp, #16]
   1bd18:	mov	r4, r8
   1bd1c:	str	r8, [sp, #16]
   1bd20:	add	sl, pc, sl
   1bd24:	mov	r8, r3
   1bd28:	b	1bd64 <__assert_fail@plt+0xa0dc>
   1bd2c:	ldrb	r1, [r7, r5]
   1bd30:	mov	r3, sl
   1bd34:	mov	r2, #66	; 0x42
   1bd38:	sub	r0, r1, #32
   1bd3c:	cmp	r0, #94	; 0x5e
   1bd40:	movhi	r1, #46	; 0x2e
   1bd44:	str	r1, [sp]
   1bd48:	mov	r0, r4
   1bd4c:	mov	r1, #1
   1bd50:	add	r4, r4, #1
   1bd54:	bl	11ae4 <__sprintf_chk@plt>
   1bd58:	cmp	r4, r9
   1bd5c:	add	r5, r5, #1
   1bd60:	beq	1bd84 <__assert_fail@plt+0xa0fc>
   1bd64:	cmp	r5, r6
   1bd68:	blt	1bd2c <__assert_fail@plt+0xa0a4>
   1bd6c:	ldrh	r3, [r8]
   1bd70:	add	r4, r4, #1
   1bd74:	add	r5, r5, #1
   1bd78:	strh	r3, [r4, #-1]
   1bd7c:	cmp	r4, r9
   1bd80:	bne	1bd64 <__assert_fail@plt+0xa0dc>
   1bd84:	ldr	r3, [sp, #8]
   1bd88:	ldr	r1, [pc, #100]	; 1bdf4 <__assert_fail@plt+0xa16c>
   1bd8c:	add	r3, r3, #1
   1bd90:	ldr	r2, [sp, #12]
   1bd94:	add	r1, pc, r1
   1bd98:	mov	r0, #11
   1bd9c:	mov	r4, r3
   1bda0:	ldr	r8, [sp, #16]
   1bda4:	str	r3, [sp, #8]
   1bda8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1bdac:	ldr	r2, [sp, #20]
   1bdb0:	cmp	r4, r2
   1bdb4:	blt	1bc88 <__assert_fail@plt+0xa000>
   1bdb8:	ldr	r3, [sp, #36]	; 0x24
   1bdbc:	ldr	r2, [sp, #116]	; 0x74
   1bdc0:	ldr	r3, [r3]
   1bdc4:	cmp	r2, r3
   1bdc8:	bne	1bdd4 <__assert_fail@plt+0xa14c>
   1bdcc:	add	sp, sp, #124	; 0x7c
   1bdd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdd4:	bl	118e0 <__stack_chk_fail@plt>
   1bdd8:	andeq	ip, r1, r4, lsr #4
   1bddc:			; <UNDEFINED> instruction: 0x000001b0
   1bde0:			; <UNDEFINED> instruction: 0x00009cb8
   1bde4:			; <UNDEFINED> instruction: 0x00009cb4
   1bde8:	andeq	r4, r0, r0, asr #3
   1bdec:	andeq	r7, r0, r0, ror #10
   1bdf0:	andeq	r4, r0, r4, lsl #2
   1bdf4:	andeq	r4, r0, r0, lsr #1
   1bdf8:	ldr	r3, [pc, #1580]	; 1c42c <__assert_fail@plt+0xa7a4>
   1bdfc:	ldr	r2, [pc, #1580]	; 1c430 <__assert_fail@plt+0xa7a8>
   1be00:	add	r3, pc, r3
   1be04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be08:	sub	sp, sp, #1264	; 0x4f0
   1be0c:	ldr	r2, [r3, r2]
   1be10:	ldr	r4, [pc, #1564]	; 1c434 <__assert_fail@plt+0xa7ac>
   1be14:	mov	ip, r2
   1be18:	sub	sp, sp, #12
   1be1c:	ldr	r1, [pc, #1556]	; 1c438 <__assert_fail@plt+0xa7b0>
   1be20:	add	r4, pc, r4
   1be24:	ldr	r3, [ip]
   1be28:	add	r1, pc, r1
   1be2c:	str	r2, [sp, #40]	; 0x28
   1be30:	mov	r0, #4
   1be34:	mov	r2, r4
   1be38:	str	r3, [sp, #1268]	; 0x4f4
   1be3c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1be40:	ldr	r3, [pc, #1524]	; 1c43c <__assert_fail@plt+0xa7b4>
   1be44:	add	r1, sp, #56	; 0x38
   1be48:	add	r3, pc, r3
   1be4c:	ldr	r0, [r3]
   1be50:	bl	11ab4 <libusb_get_device_list@plt>
   1be54:	subs	r3, r0, #0
   1be58:	str	r3, [sp, #16]
   1be5c:	blt	1c40c <__assert_fail@plt+0xa784>
   1be60:	beq	1c190 <__assert_fail@plt+0xa508>
   1be64:	ldr	r3, [pc, #1492]	; 1c440 <__assert_fail@plt+0xa7b8>
   1be68:	mov	r8, #0
   1be6c:	add	r3, pc, r3
   1be70:	str	r3, [sp, #48]	; 0x30
   1be74:	ldr	r3, [pc, #1480]	; 1c444 <__assert_fail@plt+0xa7bc>
   1be78:	add	fp, sp, #72	; 0x48
   1be7c:	add	r3, pc, r3
   1be80:	str	r3, [sp, #52]	; 0x34
   1be84:	ldr	r3, [pc, #1468]	; 1c448 <__assert_fail@plt+0xa7c0>
   1be88:	add	r3, pc, r3
   1be8c:	str	r3, [sp, #24]
   1be90:	ldr	r3, [pc, #1460]	; 1c44c <__assert_fail@plt+0xa7c4>
   1be94:	add	r3, pc, r3
   1be98:	str	r3, [sp, #28]
   1be9c:	ldr	r3, [sp, #56]	; 0x38
   1bea0:	ldr	r5, [r3, r8, lsl #2]
   1bea4:	mov	r0, r5
   1bea8:	bl	11a78 <libusb_get_bus_number@plt>
   1beac:	mov	r9, r0
   1beb0:	mov	r0, r5
   1beb4:	bl	11c64 <libusb_get_device_address@plt>
   1beb8:	mov	r1, fp
   1bebc:	mov	sl, r0
   1bec0:	mov	r0, r5
   1bec4:	bl	11bbc <libusb_get_device_descriptor@plt>
   1bec8:	cmp	r0, #0
   1becc:	blt	1c294 <__assert_fail@plt+0xa60c>
   1bed0:	ldrh	r6, [fp, #8]
   1bed4:	ldrh	r7, [fp, #10]
   1bed8:	clz	r4, r7
   1bedc:	cmp	r6, #0
   1bee0:	lsr	r4, r4, #5
   1bee4:	moveq	r4, #1
   1bee8:	cmp	r4, #0
   1beec:	bne	1c20c <__assert_fail@plt+0xa584>
   1bef0:	sub	r1, fp, #12
   1bef4:	mov	r0, r5
   1bef8:	bl	117f0 <libusb_open@plt>
   1befc:	cmp	r0, #0
   1bf00:	blt	1c268 <__assert_fail@plt+0xa5e0>
   1bf04:	sub	r1, fp, #4
   1bf08:	ldr	r0, [sp, #60]	; 0x3c
   1bf0c:	bl	119b8 <libusb_get_configuration@plt>
   1bf10:	str	r0, [sp, #20]
   1bf14:	ldr	r0, [sp, #60]	; 0x3c
   1bf18:	bl	1191c <libusb_close@plt>
   1bf1c:	ldr	r3, [sp, #20]
   1bf20:	cmp	r3, #0
   1bf24:	blt	1c380 <__assert_fail@plt+0xa6f8>
   1bf28:	ldr	r3, [sp, #68]	; 0x44
   1bf2c:	cmp	r3, #0
   1bf30:	beq	1c2bc <__assert_fail@plt+0xa634>
   1bf34:	sub	r2, fp, #8
   1bf38:	mov	r1, r4
   1bf3c:	mov	r0, r5
   1bf40:	bl	1197c <libusb_get_config_descriptor@plt>
   1bf44:	cmp	r0, #0
   1bf48:	blt	1c358 <__assert_fail@plt+0xa6d0>
   1bf4c:	ldr	r0, [sp, #64]	; 0x40
   1bf50:	ldrb	r3, [r0, #4]
   1bf54:	cmp	r3, #0
   1bf58:	beq	1c164 <__assert_fail@plt+0xa4dc>
   1bf5c:	ldr	r3, [pc, #1260]	; 1c450 <__assert_fail@plt+0xa7c8>
   1bf60:	add	r3, pc, r3
   1bf64:	str	r3, [sp, #20]
   1bf68:	ldrb	r3, [sp, #76]	; 0x4c
   1bf6c:	cmp	r3, #0
   1bf70:	beq	1c1bc <__assert_fail@plt+0xa534>
   1bf74:	cmp	r3, #255	; 0xff
   1bf78:	bne	1c110 <__assert_fail@plt+0xa488>
   1bf7c:	add	r3, sp, #92	; 0x5c
   1bf80:	str	r3, [sp, #20]
   1bf84:	bl	11958 <libusb_free_config_descriptor@plt>
   1bf88:	mov	r2, #76	; 0x4c
   1bf8c:	mov	r1, #0
   1bf90:	ldr	r0, [sp, #20]
   1bf94:	bl	11b08 <memset@plt>
   1bf98:	mov	r0, r5
   1bf9c:	bl	11c28 <libusb_ref_device@plt>
   1bfa0:	ldr	r2, [pc, #1196]	; 1c454 <__assert_fail@plt+0xa7cc>
   1bfa4:	mov	r3, #1024	; 0x400
   1bfa8:	add	r2, pc, r2
   1bfac:	add	r5, sp, #244	; 0xf4
   1bfb0:	stm	sp, {r2, r9, sl}
   1bfb4:	mov	r1, r3
   1bfb8:	mov	r2, #1
   1bfbc:	mov	ip, r0
   1bfc0:	str	r0, [sp, #44]	; 0x2c
   1bfc4:	mov	r0, r5
   1bfc8:	str	ip, [sp, #160]	; 0xa0
   1bfcc:	bl	11c7c <__snprintf_chk@plt>
   1bfd0:	mov	r0, r5
   1bfd4:	bl	118c8 <strdup@plt>
   1bfd8:	cmp	r0, #0
   1bfdc:	str	r0, [sp, #32]
   1bfe0:	str	r0, [sp, #104]	; 0x68
   1bfe4:	beq	1c19c <__assert_fail@plt+0xa514>
   1bfe8:	mov	ip, #1
   1bfec:	ldr	r2, [pc, #1124]	; 1c458 <__assert_fail@plt+0xa7d0>
   1bff0:	ldr	r1, [pc, #1124]	; 1c45c <__assert_fail@plt+0xa7d4>
   1bff4:	str	ip, [sp, #96]	; 0x60
   1bff8:	add	ip, sp, #168	; 0xa8
   1bffc:	mov	r3, r6
   1c000:	strd	r4, [sp, #4]
   1c004:	add	r2, pc, r2
   1c008:	add	r1, pc, r1
   1c00c:	str	r4, [sp, #148]	; 0x94
   1c010:	mov	r0, #4
   1c014:	mov	r4, ip
   1c018:	str	r7, [sp]
   1c01c:	str	ip, [sp, #36]	; 0x24
   1c020:	strd	r6, [sp, #108]	; 0x6c
   1c024:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c028:	ldr	r1, [sp, #20]
   1c02c:	mov	r0, r4
   1c030:	mov	r2, #76	; 0x4c
   1c034:	bl	11880 <memcpy@plt>
   1c038:	ldr	r3, [pc, #1056]	; 1c460 <__assert_fail@plt+0xa7d8>
   1c03c:	add	r3, pc, r3
   1c040:	ldr	sl, [r3, #4]
   1c044:	cmp	sl, #0
   1c048:	ble	1c2f8 <__assert_fail@plt+0xa670>
   1c04c:	ldr	r9, [pc, #1040]	; 1c464 <__assert_fail@plt+0xa7dc>
   1c050:	str	r8, [sp, #20]
   1c054:	add	r9, pc, r9
   1c058:	mov	r8, sl
   1c05c:	mvn	r4, #0
   1c060:	mov	sl, r7
   1c064:	mov	r5, #0
   1c068:	mov	r7, r6
   1c06c:	ldr	r6, [sp, #32]
   1c070:	b	1c090 <__assert_fail@plt+0xa408>
   1c074:	ldr	r3, [r9, #64]	; 0x40
   1c078:	add	r9, r9, #76	; 0x4c
   1c07c:	cmp	r3, #1
   1c080:	movgt	r4, r5
   1c084:	add	r5, r5, #1
   1c088:	cmp	r5, r8
   1c08c:	beq	1c2e0 <__assert_fail@plt+0xa658>
   1c090:	ldr	r3, [r9, #4]
   1c094:	cmp	r3, #1
   1c098:	bne	1c074 <__assert_fail@plt+0xa3ec>
   1c09c:	mov	r1, r6
   1c0a0:	ldr	r0, [r9, #12]
   1c0a4:	bl	117e4 <strcmp@plt>
   1c0a8:	cmp	r0, #0
   1c0ac:	bne	1c074 <__assert_fail@plt+0xa3ec>
   1c0b0:	ldr	r3, [r9, #16]
   1c0b4:	cmp	r7, r3
   1c0b8:	bne	1c074 <__assert_fail@plt+0xa3ec>
   1c0bc:	ldr	r3, [r9, #20]
   1c0c0:	cmp	sl, r3
   1c0c4:	bne	1c074 <__assert_fail@plt+0xa3ec>
   1c0c8:	add	r1, r5, r5, lsl #3
   1c0cc:	ldr	r3, [pc, #916]	; 1c468 <__assert_fail@plt+0xa7e0>
   1c0d0:	add	r1, r5, r1, lsl #1
   1c0d4:	add	r3, pc, r3
   1c0d8:	add	r3, r3, r1, lsl #2
   1c0dc:	ldr	r4, [sp, #32]
   1c0e0:	ldr	ip, [sp, #44]	; 0x2c
   1c0e4:	ldr	r1, [pc, #896]	; 1c46c <__assert_fail@plt+0xa7e4>
   1c0e8:	str	r0, [r3, #64]	; 0x40
   1c0ec:	mov	r2, r4
   1c0f0:	add	r1, pc, r1
   1c0f4:	str	ip, [r3, #68]	; 0x44
   1c0f8:	mov	r0, #3
   1c0fc:	ldr	r8, [sp, #20]
   1c100:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c104:	mov	r0, r4
   1c108:	bl	11850 <free@plt>
   1c10c:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c110:	ldr	r2, [r0, #12]
   1c114:	add	r2, r2, r4, lsl #3
   1c118:	ldr	r1, [r2, #4]
   1c11c:	cmp	r1, #0
   1c120:	mvneq	r2, #0
   1c124:	ldrne	r2, [r2]
   1c128:	mov	r0, #5
   1c12c:	ldr	r1, [sp, #28]
   1c130:	ldrbne	r2, [r2, #5]
   1c134:	str	r3, [sp, #8]
   1c138:	str	r4, [sp, #4]
   1c13c:	str	r2, [sp, #12]
   1c140:	mov	r3, r6
   1c144:	str	r7, [sp]
   1c148:	ldr	r2, [sp, #24]
   1c14c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c150:	ldr	r0, [sp, #64]	; 0x40
   1c154:	add	r4, r4, #1
   1c158:	ldrb	r3, [r0, #4]
   1c15c:	cmp	r3, r4
   1c160:	bgt	1bf68 <__assert_fail@plt+0xa2e0>
   1c164:	bl	11958 <libusb_free_config_descriptor@plt>
   1c168:	stm	sp, {r7, r9, sl}
   1c16c:	mov	r3, r6
   1c170:	ldr	r2, [sp, #48]	; 0x30
   1c174:	ldr	r1, [sp, #52]	; 0x34
   1c178:	mov	r0, #5
   1c17c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c180:	ldr	r3, [sp, #16]
   1c184:	add	r8, r8, #1
   1c188:	cmp	r3, r8
   1c18c:	bne	1be9c <__assert_fail@plt+0xa214>
   1c190:	mov	r1, #1
   1c194:	ldr	r0, [sp, #56]	; 0x38
   1c198:	bl	11bd4 <libusb_free_device_list@plt>
   1c19c:	ldr	r3, [sp, #40]	; 0x28
   1c1a0:	ldr	r2, [sp, #1268]	; 0x4f4
   1c1a4:	ldr	r3, [r3]
   1c1a8:	cmp	r2, r3
   1c1ac:	bne	1c428 <__assert_fail@plt+0xa7a0>
   1c1b0:	add	sp, sp, #1264	; 0x4f0
   1c1b4:	add	sp, sp, #12
   1c1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1bc:	ldr	ip, [r0, #12]
   1c1c0:	add	r2, ip, r4, lsl #3
   1c1c4:	ldr	r1, [r2, #4]
   1c1c8:	cmp	r1, #0
   1c1cc:	beq	1c230 <__assert_fail@plt+0xa5a8>
   1c1d0:	ldr	ip, [ip, r4, lsl #3]
   1c1d4:	cmp	ip, #0
   1c1d8:	beq	1c230 <__assert_fail@plt+0xa5a8>
   1c1dc:	ldrb	ip, [ip, #5]
   1c1e0:	cmp	ip, #6
   1c1e4:	beq	1bf7c <__assert_fail@plt+0xa2f4>
   1c1e8:	bls	1c200 <__assert_fail@plt+0xa578>
   1c1ec:	cmp	ip, #16
   1c1f0:	beq	1bf7c <__assert_fail@plt+0xa2f4>
   1c1f4:	cmp	ip, #255	; 0xff
   1c1f8:	bne	1c11c <__assert_fail@plt+0xa494>
   1c1fc:	b	1bf7c <__assert_fail@plt+0xa2f4>
   1c200:	cmp	ip, #0
   1c204:	bne	1c11c <__assert_fail@plt+0xa494>
   1c208:	b	1bf7c <__assert_fail@plt+0xa2f4>
   1c20c:	ldr	r2, [pc, #604]	; 1c470 <__assert_fail@plt+0xa7e8>
   1c210:	ldr	r1, [pc, #604]	; 1c474 <__assert_fail@plt+0xa7ec>
   1c214:	stm	sp, {r7, r9, sl}
   1c218:	mov	r3, r6
   1c21c:	add	r2, pc, r2
   1c220:	add	r1, pc, r1
   1c224:	mov	r0, #5
   1c228:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c22c:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c230:	ldr	r1, [pc, #576]	; 1c478 <__assert_fail@plt+0xa7f0>
   1c234:	str	r4, [sp, #4]
   1c238:	mov	r3, r6
   1c23c:	mov	r0, #1
   1c240:	str	r7, [sp]
   1c244:	ldr	r2, [sp, #20]
   1c248:	add	r1, pc, r1
   1c24c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c250:	ldr	r0, [sp, #64]	; 0x40
   1c254:	add	r4, r4, #1
   1c258:	ldrb	r3, [r0, #4]
   1c25c:	cmp	r4, r3
   1c260:	blt	1bf68 <__assert_fail@plt+0xa2e0>
   1c264:	b	1c164 <__assert_fail@plt+0xa4dc>
   1c268:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1c26c:	ldr	r2, [pc, #520]	; 1c47c <__assert_fail@plt+0xa7f4>
   1c270:	ldr	r1, [pc, #520]	; 1c480 <__assert_fail@plt+0xa7f8>
   1c274:	stm	sp, {r7, r9, sl}
   1c278:	mov	r3, r6
   1c27c:	add	r2, pc, r2
   1c280:	add	r1, pc, r1
   1c284:	str	r0, [sp, #12]
   1c288:	mov	r0, #1
   1c28c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c290:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c294:	ldr	r2, [pc, #488]	; 1c484 <__assert_fail@plt+0xa7fc>
   1c298:	ldr	r1, [pc, #488]	; 1c488 <__assert_fail@plt+0xa800>
   1c29c:	str	r0, [sp, #4]
   1c2a0:	str	sl, [sp]
   1c2a4:	mov	r3, r9
   1c2a8:	add	r2, pc, r2
   1c2ac:	add	r1, pc, r1
   1c2b0:	mov	r0, #1
   1c2b4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c2b8:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c2bc:	ldr	r2, [pc, #456]	; 1c48c <__assert_fail@plt+0xa804>
   1c2c0:	ldr	r1, [pc, #456]	; 1c490 <__assert_fail@plt+0xa808>
   1c2c4:	stm	sp, {r7, r9, sl}
   1c2c8:	mov	r3, r6
   1c2cc:	add	r2, pc, r2
   1c2d0:	add	r1, pc, r1
   1c2d4:	mov	r0, #1
   1c2d8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c2dc:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c2e0:	cmn	r4, #1
   1c2e4:	mov	sl, r8
   1c2e8:	ldr	r8, [sp, #20]
   1c2ec:	bne	1c3a8 <__assert_fail@plt+0xa720>
   1c2f0:	cmp	r5, #100	; 0x64
   1c2f4:	beq	1c3f4 <__assert_fail@plt+0xa76c>
   1c2f8:	ldr	r0, [pc, #404]	; 1c494 <__assert_fail@plt+0xa80c>
   1c2fc:	ldr	r1, [pc, #404]	; 1c498 <__assert_fail@plt+0xa810>
   1c300:	add	r0, pc, r0
   1c304:	add	ip, sl, #1
   1c308:	str	ip, [r0, #4]
   1c30c:	ldr	r3, [sp, #32]
   1c310:	mov	r2, sl
   1c314:	add	r1, pc, r1
   1c318:	mov	r0, #3
   1c31c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c320:	mov	r4, sl
   1c324:	lsl	r6, sl, #3
   1c328:	add	r6, r6, r4
   1c32c:	ldr	r3, [pc, #360]	; 1c49c <__assert_fail@plt+0xa814>
   1c330:	add	r4, r4, r6, lsl #1
   1c334:	add	r3, pc, r3
   1c338:	mov	r5, r3
   1c33c:	add	r0, r3, r4, lsl #2
   1c340:	ldr	r1, [sp, #36]	; 0x24
   1c344:	mov	r2, #76	; 0x4c
   1c348:	bl	11880 <memcpy@plt>
   1c34c:	mov	r3, #0
   1c350:	str	r3, [r5, r4, lsl #2]
   1c354:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c358:	ldr	r2, [pc, #320]	; 1c4a0 <__assert_fail@plt+0xa818>
   1c35c:	ldr	r1, [pc, #320]	; 1c4a4 <__assert_fail@plt+0xa81c>
   1c360:	str	r0, [sp, #12]
   1c364:	stm	sp, {r7, r9, sl}
   1c368:	mov	r3, r6
   1c36c:	add	r2, pc, r2
   1c370:	add	r1, pc, r1
   1c374:	mov	r0, #1
   1c378:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c37c:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c380:	ldr	r2, [pc, #288]	; 1c4a8 <__assert_fail@plt+0xa820>
   1c384:	ldr	r1, [pc, #288]	; 1c4ac <__assert_fail@plt+0xa824>
   1c388:	str	r3, [sp, #12]
   1c38c:	stm	sp, {r7, r9, sl}
   1c390:	mov	r3, r6
   1c394:	add	r2, pc, r2
   1c398:	add	r1, pc, r1
   1c39c:	mov	r0, #1
   1c3a0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c3a4:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c3a8:	mov	r0, #3
   1c3ac:	ldr	r1, [pc, #252]	; 1c4b0 <__assert_fail@plt+0xa828>
   1c3b0:	lsl	r6, r4, r0
   1c3b4:	ldr	r3, [sp, #32]
   1c3b8:	mov	r2, r4
   1c3bc:	add	r1, pc, r1
   1c3c0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c3c4:	add	r3, r6, r4
   1c3c8:	ldr	r7, [pc, #228]	; 1c4b4 <__assert_fail@plt+0xa82c>
   1c3cc:	add	r3, r4, r3, lsl #1
   1c3d0:	add	r7, pc, r7
   1c3d4:	add	r7, r7, r3, lsl #2
   1c3d8:	ldr	r0, [r7, #12]
   1c3dc:	cmp	r0, #0
   1c3e0:	beq	1c328 <__assert_fail@plt+0xa6a0>
   1c3e4:	bl	11850 <free@plt>
   1c3e8:	mov	r3, #0
   1c3ec:	str	r3, [r7, #12]
   1c3f0:	b	1c328 <__assert_fail@plt+0xa6a0>
   1c3f4:	ldr	r1, [pc, #188]	; 1c4b8 <__assert_fail@plt+0xa830>
   1c3f8:	ldr	r2, [sp, #32]
   1c3fc:	add	r1, pc, r1
   1c400:	mov	r0, #3
   1c404:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c408:	b	1c180 <__assert_fail@plt+0xa4f8>
   1c40c:	ldr	r1, [pc, #168]	; 1c4bc <__assert_fail@plt+0xa834>
   1c410:	ldr	r3, [sp, #16]
   1c414:	mov	r2, r4
   1c418:	add	r1, pc, r1
   1c41c:	mov	r0, #1
   1c420:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c424:	b	1c19c <__assert_fail@plt+0xa514>
   1c428:	bl	118e0 <__stack_chk_fail@plt>
   1c42c:	andeq	ip, r1, r4, lsr #32
   1c430:			; <UNDEFINED> instruction: 0x000001b0
   1c434:	muleq	r0, r8, sl
   1c438:	strdeq	r9, [r0], -r8
   1c43c:			; <UNDEFINED> instruction: 0x0001d4bc
   1c440:	andeq	r9, r0, ip, asr #20
   1c444:	andeq	r9, r0, r4, lsl lr
   1c448:	andeq	r9, r0, r0, lsr sl
   1c44c:	ldrdeq	r9, [r0], -ip
   1c450:	andeq	r9, r0, r8, asr r9
   1c454:	andeq	r9, r0, r8, lsr #26
   1c458:			; <UNDEFINED> instruction: 0x000098b4
   1c45c:			; <UNDEFINED> instruction: 0x00009bb4
   1c460:	andeq	sp, r1, r8, asr #5
   1c464:	andeq	sp, r1, r0, asr #5
   1c468:	andeq	sp, r1, r0, asr #4
   1c46c:	andeq	r9, r0, ip, lsl #22
   1c470:	muleq	r0, ip, r6
   1c474:	andeq	r9, r0, r0, lsr #15
   1c478:	andeq	r9, r0, r0, ror #17
   1c47c:	andeq	r9, r0, ip, lsr r6
   1c480:	andeq	r9, r0, r0, lsl #15
   1c484:	andeq	r9, r0, r0, lsl r6
   1c488:	andeq	r9, r0, ip, asr #13
   1c48c:	andeq	r9, r0, ip, ror #11
   1c490:	andeq	r9, r0, r4, asr #15
   1c494:	andeq	sp, r1, r4
   1c498:	andeq	r9, r0, r8, asr r9
   1c49c:	andeq	ip, r1, r0, ror #31
   1c4a0:	andeq	r9, r0, ip, asr #10
   1c4a4:	andeq	r9, r0, r0, ror #14
   1c4a8:	andeq	r9, r0, r4, lsr #10
   1c4ac:	andeq	r9, r0, ip, lsr #13
   1c4b0:	andeq	r9, r0, r8, ror #16
   1c4b4:	andeq	ip, r1, r4, asr #30
   1c4b8:	andeq	r9, r0, r0, asr r8
   1c4bc:	andeq	r9, r0, ip, lsr #10
   1c4c0:	push	{r4, r5, r6, r7, r8, lr}
   1c4c4:	ldr	r5, [pc, #292]	; 1c5f0 <__assert_fail@plt+0xa968>
   1c4c8:	add	r5, pc, r5
   1c4cc:	ldr	r4, [r5, #8]
   1c4d0:	cmp	r4, #0
   1c4d4:	beq	1c5d0 <__assert_fail@plt+0xa948>
   1c4d8:	sub	r4, r4, #1
   1c4dc:	cmp	r4, #0
   1c4e0:	str	r4, [r5, #8]
   1c4e4:	bne	1c5ac <__assert_fail@plt+0xa924>
   1c4e8:	ldr	r2, [pc, #260]	; 1c5f4 <__assert_fail@plt+0xa96c>
   1c4ec:	ldr	r1, [pc, #260]	; 1c5f8 <__assert_fail@plt+0xa970>
   1c4f0:	add	r2, pc, r2
   1c4f4:	add	r1, pc, r1
   1c4f8:	add	r2, r2, #20
   1c4fc:	mov	r0, #4
   1c500:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c504:	ldr	r3, [r5, #4]
   1c508:	cmp	r3, #0
   1c50c:	ble	1c578 <__assert_fail@plt+0xa8f0>
   1c510:	ldr	r6, [pc, #228]	; 1c5fc <__assert_fail@plt+0xa974>
   1c514:	ldr	r5, [pc, #228]	; 1c600 <__assert_fail@plt+0xa978>
   1c518:	ldr	r7, [pc, #228]	; 1c604 <__assert_fail@plt+0xa97c>
   1c51c:	add	r6, pc, r6
   1c520:	add	r5, pc, r5
   1c524:	add	r7, pc, r7
   1c528:	add	r6, r6, #20
   1c52c:	ldr	ip, [r5, #12]
   1c530:	mov	r3, r4
   1c534:	cmp	ip, #0
   1c538:	mov	r2, r6
   1c53c:	mov	r1, r7
   1c540:	mov	r0, #5
   1c544:	add	r4, r4, #1
   1c548:	beq	1c560 <__assert_fail@plt+0xa8d8>
   1c54c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c550:	ldr	r0, [r5, #12]
   1c554:	bl	11850 <free@plt>
   1c558:	mov	r3, #0
   1c55c:	str	r3, [r5, #12]
   1c560:	ldr	r3, [pc, #160]	; 1c608 <__assert_fail@plt+0xa980>
   1c564:	add	r5, r5, #76	; 0x4c
   1c568:	add	r3, pc, r3
   1c56c:	ldr	r3, [r3, #4]
   1c570:	cmp	r3, r4
   1c574:	bgt	1c52c <__assert_fail@plt+0xa8a4>
   1c578:	ldr	r4, [pc, #140]	; 1c60c <__assert_fail@plt+0xa984>
   1c57c:	add	r4, pc, r4
   1c580:	ldr	r0, [r4]
   1c584:	cmp	r0, #0
   1c588:	beq	1c598 <__assert_fail@plt+0xa910>
   1c58c:	bl	11b98 <libusb_exit@plt>
   1c590:	mov	r3, #0
   1c594:	str	r3, [r4]
   1c598:	ldr	r3, [pc, #112]	; 1c610 <__assert_fail@plt+0xa988>
   1c59c:	mov	r2, #0
   1c5a0:	add	r3, pc, r3
   1c5a4:	str	r2, [r3, #4]
   1c5a8:	pop	{r4, r5, r6, r7, r8, pc}
   1c5ac:	ldr	r2, [pc, #96]	; 1c614 <__assert_fail@plt+0xa98c>
   1c5b0:	ldr	r1, [pc, #96]	; 1c618 <__assert_fail@plt+0xa990>
   1c5b4:	add	r2, pc, r2
   1c5b8:	mov	r3, r4
   1c5bc:	add	r2, r2, #20
   1c5c0:	add	r1, pc, r1
   1c5c4:	mov	r0, #4
   1c5c8:	pop	{r4, r5, r6, r7, r8, lr}
   1c5cc:	b	1bb74 <__assert_fail@plt+0x9eec>
   1c5d0:	ldr	r2, [pc, #68]	; 1c61c <__assert_fail@plt+0xa994>
   1c5d4:	ldr	r1, [pc, #68]	; 1c620 <__assert_fail@plt+0xa998>
   1c5d8:	add	r2, pc, r2
   1c5dc:	add	r1, pc, r1
   1c5e0:	add	r2, r2, #20
   1c5e4:	mov	r0, #1
   1c5e8:	pop	{r4, r5, r6, r7, r8, lr}
   1c5ec:	b	1bb74 <__assert_fail@plt+0x9eec>
   1c5f0:	andeq	ip, r1, ip, lsr lr
   1c5f4:	andeq	r9, r0, r8, asr #7
   1c5f8:	andeq	r9, r0, r4, lsl r8
   1c5fc:	muleq	r0, ip, r3
   1c600:	strdeq	ip, [r1], -r4
   1c604:	strdeq	r9, [r0], -ip
   1c608:	muleq	r1, ip, sp
   1c60c:	andeq	ip, r1, r8, lsl #27
   1c610:	andeq	ip, r1, r4, ror #26
   1c614:	andeq	r9, r0, r4, lsl #6
   1c618:	andeq	r9, r0, ip, ror r7
   1c61c:	andeq	r9, r0, r0, ror #5
   1c620:	andeq	r9, r0, r8, lsl #14
   1c624:	push	{r4, r5, r6, r7, r8, lr}
   1c628:	sub	sp, sp, #8
   1c62c:	ldr	r4, [pc, #336]	; 1c784 <__assert_fail@plt+0xaafc>
   1c630:	add	r4, pc, r4
   1c634:	ldr	r3, [r4, #8]
   1c638:	cmp	r3, #0
   1c63c:	beq	1c734 <__assert_fail@plt+0xaaac>
   1c640:	ldr	r2, [pc, #320]	; 1c788 <__assert_fail@plt+0xab00>
   1c644:	ldr	r1, [pc, #320]	; 1c78c <__assert_fail@plt+0xab04>
   1c648:	add	r2, pc, r2
   1c64c:	add	r1, pc, r1
   1c650:	add	r2, r2, #36	; 0x24
   1c654:	mov	r0, #4
   1c658:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c65c:	ldr	r1, [r4, #4]
   1c660:	cmp	r1, #0
   1c664:	ble	1c694 <__assert_fail@plt+0xaa0c>
   1c668:	add	r2, r1, r1, lsl #3
   1c66c:	ldr	r3, [pc, #284]	; 1c790 <__assert_fail@plt+0xab08>
   1c670:	add	r1, r1, r2, lsl #1
   1c674:	add	r3, pc, r3
   1c678:	add	r1, r3, r1, lsl #2
   1c67c:	ldr	r2, [r3, #64]	; 0x40
   1c680:	add	r3, r3, #76	; 0x4c
   1c684:	add	r2, r2, #1
   1c688:	str	r2, [r3, #-12]
   1c68c:	cmp	r3, r1
   1c690:	bne	1c67c <__assert_fail@plt+0xa9f4>
   1c694:	bl	1bdf8 <__assert_fail@plt+0xa170>
   1c698:	ldr	r3, [pc, #244]	; 1c794 <__assert_fail@plt+0xab0c>
   1c69c:	add	r3, pc, r3
   1c6a0:	ldr	r2, [r3, #12]
   1c6a4:	cmp	r2, #5
   1c6a8:	ble	1c72c <__assert_fail@plt+0xaaa4>
   1c6ac:	ldr	r3, [r3, #4]
   1c6b0:	cmp	r3, #0
   1c6b4:	ble	1c758 <__assert_fail@plt+0xaad0>
   1c6b8:	ldr	r7, [pc, #216]	; 1c798 <__assert_fail@plt+0xab10>
   1c6bc:	ldr	r5, [pc, #216]	; 1c79c <__assert_fail@plt+0xab14>
   1c6c0:	ldr	r8, [pc, #216]	; 1c7a0 <__assert_fail@plt+0xab18>
   1c6c4:	add	r7, pc, r7
   1c6c8:	mov	r6, #0
   1c6cc:	add	r5, pc, r5
   1c6d0:	add	r8, pc, r8
   1c6d4:	add	r7, r7, #36	; 0x24
   1c6d8:	mov	r4, r6
   1c6dc:	b	1c6fc <__assert_fail@plt+0xaa74>
   1c6e0:	ldr	r3, [pc, #188]	; 1c7a4 <__assert_fail@plt+0xab1c>
   1c6e4:	add	r4, r4, #1
   1c6e8:	add	r3, pc, r3
   1c6ec:	add	r5, r5, #76	; 0x4c
   1c6f0:	ldr	r3, [r3, #4]
   1c6f4:	cmp	r4, r3
   1c6f8:	bge	1c75c <__assert_fail@plt+0xaad4>
   1c6fc:	ldr	r3, [r5, #64]	; 0x40
   1c700:	cmp	r3, #0
   1c704:	bne	1c6e0 <__assert_fail@plt+0xaa58>
   1c708:	ldr	r2, [r5, #12]
   1c70c:	mov	r3, r4
   1c710:	str	r2, [sp]
   1c714:	mov	r1, r8
   1c718:	mov	r2, r7
   1c71c:	mov	r0, #6
   1c720:	add	r6, r6, #1
   1c724:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c728:	b	1c6e0 <__assert_fail@plt+0xaa58>
   1c72c:	add	sp, sp, #8
   1c730:	pop	{r4, r5, r6, r7, r8, pc}
   1c734:	ldr	r2, [pc, #108]	; 1c7a8 <__assert_fail@plt+0xab20>
   1c738:	ldr	r1, [pc, #108]	; 1c7ac <__assert_fail@plt+0xab24>
   1c73c:	add	r2, pc, r2
   1c740:	add	r1, pc, r1
   1c744:	add	r2, r2, #36	; 0x24
   1c748:	mov	r0, #1
   1c74c:	add	sp, sp, #8
   1c750:	pop	{r4, r5, r6, r7, r8, lr}
   1c754:	b	1bb74 <__assert_fail@plt+0x9eec>
   1c758:	mov	r6, #0
   1c75c:	ldr	r2, [pc, #76]	; 1c7b0 <__assert_fail@plt+0xab28>
   1c760:	ldr	r1, [pc, #76]	; 1c7b4 <__assert_fail@plt+0xab2c>
   1c764:	add	r2, pc, r2
   1c768:	mov	r3, r6
   1c76c:	add	r2, r2, #36	; 0x24
   1c770:	add	r1, pc, r1
   1c774:	mov	r0, #5
   1c778:	add	sp, sp, #8
   1c77c:	pop	{r4, r5, r6, r7, r8, lr}
   1c780:	b	1bb74 <__assert_fail@plt+0x9eec>
   1c784:	ldrdeq	ip, [r1], -r4
   1c788:	andeq	r9, r0, r0, ror r2
   1c78c:	andeq	r9, r0, r8, asr #14
   1c790:	andeq	ip, r1, r0, lsr #25
   1c794:	andeq	ip, r1, r8, ror #24
   1c798:	strdeq	r9, [r0], -r4
   1c79c:	andeq	ip, r1, r8, asr #24
   1c7a0:	andeq	r9, r0, r4, ror #13
   1c7a4:	andeq	ip, r1, ip, lsl ip
   1c7a8:	andeq	r9, r0, ip, ror r1
   1c7ac:	andeq	r9, r0, r0, lsr r6
   1c7b0:	andeq	r9, r0, r4, asr r1
   1c7b4:	andeq	r9, r0, ip, asr r6
   1c7b8:	ldr	r3, [pc, #224]	; 1c8a0 <__assert_fail@plt+0xac18>
   1c7bc:	ldr	r2, [pc, #224]	; 1c8a4 <__assert_fail@plt+0xac1c>
   1c7c0:	add	r3, pc, r3
   1c7c4:	push	{r4, r5, r6, lr}
   1c7c8:	ldr	r4, [r3, r2]
   1c7cc:	ldr	r0, [pc, #212]	; 1c8a8 <__assert_fail@plt+0xac20>
   1c7d0:	mov	r1, r4
   1c7d4:	add	r0, pc, r0
   1c7d8:	bl	1f554 <__assert_fail@plt+0xd8cc>
   1c7dc:	ldr	r3, [pc, #200]	; 1c8ac <__assert_fail@plt+0xac24>
   1c7e0:	ldr	r2, [r4]
   1c7e4:	add	r3, pc, r3
   1c7e8:	ldr	r1, [r3, #4]
   1c7ec:	str	r2, [r3, #12]
   1c7f0:	cmp	r1, #0
   1c7f4:	beq	1c828 <__assert_fail@plt+0xaba0>
   1c7f8:	ldr	r5, [pc, #176]	; 1c8b0 <__assert_fail@plt+0xac28>
   1c7fc:	add	r5, pc, r5
   1c800:	ldr	r3, [r5]
   1c804:	cmp	r3, #0
   1c808:	beq	1c83c <__assert_fail@plt+0xabb4>
   1c80c:	ldr	r2, [pc, #160]	; 1c8b4 <__assert_fail@plt+0xac2c>
   1c810:	pop	{r4, r5, r6, lr}
   1c814:	add	r2, pc, r2
   1c818:	ldr	r3, [r2, #8]
   1c81c:	add	r3, r3, #1
   1c820:	str	r3, [r2, #8]
   1c824:	b	1c624 <__assert_fail@plt+0xa99c>
   1c828:	ldr	r0, [pc, #136]	; 1c8b8 <__assert_fail@plt+0xac30>
   1c82c:	ldr	r2, [pc, #136]	; 1c8bc <__assert_fail@plt+0xac34>
   1c830:	add	r0, pc, r0
   1c834:	bl	11b08 <memset@plt>
   1c838:	b	1c7f8 <__assert_fail@plt+0xab70>
   1c83c:	ldr	r6, [pc, #124]	; 1c8c0 <__assert_fail@plt+0xac38>
   1c840:	ldr	r1, [pc, #124]	; 1c8c4 <__assert_fail@plt+0xac3c>
   1c844:	add	r6, pc, r6
   1c848:	add	r6, r6, #60	; 0x3c
   1c84c:	add	r1, pc, r1
   1c850:	mov	r2, r6
   1c854:	mov	r0, #4
   1c858:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c85c:	mov	r0, r5
   1c860:	bl	11ba4 <libusb_init@plt>
   1c864:	subs	r3, r0, #0
   1c868:	blt	1c888 <__assert_fail@plt+0xac00>
   1c86c:	ldr	r3, [r4]
   1c870:	cmp	r3, #4
   1c874:	ble	1c80c <__assert_fail@plt+0xab84>
   1c878:	ldr	r0, [r5]
   1c87c:	mov	r1, #3
   1c880:	bl	118f8 <libusb_set_debug@plt>
   1c884:	b	1c80c <__assert_fail@plt+0xab84>
   1c888:	ldr	r1, [pc, #56]	; 1c8c8 <__assert_fail@plt+0xac40>
   1c88c:	mov	r2, r6
   1c890:	add	r1, pc, r1
   1c894:	mov	r0, #1
   1c898:	pop	{r4, r5, r6, lr}
   1c89c:	b	1bb74 <__assert_fail@plt+0x9eec>
   1c8a0:	andeq	fp, r1, r4, ror #12
   1c8a4:	andeq	r0, r0, r0, asr #3
   1c8a8:	andeq	r9, r0, r0, lsr r1
   1c8ac:	andeq	ip, r1, r0, lsr #22
   1c8b0:	andeq	ip, r1, r8, lsl #22
   1c8b4:	strdeq	ip, [r1], -r0
   1c8b8:	andeq	ip, r1, r4, ror #21
   1c8bc:			; <UNDEFINED> instruction: 0x00001db0
   1c8c0:	andeq	r9, r0, r4, ror r0
   1c8c4:	muleq	r0, r8, r5
   1c8c8:	andeq	r9, r0, r4, ror r5
   1c8cc:	ldr	r3, [pc, #272]	; 1c9e4 <__assert_fail@plt+0xad5c>
   1c8d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c8d4:	add	r3, pc, r3
   1c8d8:	mov	r9, r0
   1c8dc:	ldr	r6, [r3, #4]
   1c8e0:	cmp	r6, #0
   1c8e4:	ble	1c944 <__assert_fail@plt+0xacbc>
   1c8e8:	ldr	r4, [pc, #248]	; 1c9e8 <__assert_fail@plt+0xad60>
   1c8ec:	add	r4, pc, r4
   1c8f0:	ldr	r0, [r4, #12]
   1c8f4:	cmp	r0, #0
   1c8f8:	beq	1c944 <__assert_fail@plt+0xacbc>
   1c8fc:	mov	r8, r1
   1c900:	mov	r7, r2
   1c904:	mov	r5, #0
   1c908:	b	1c918 <__assert_fail@plt+0xac90>
   1c90c:	ldr	r0, [r4, #12]
   1c910:	cmp	r0, #0
   1c914:	beq	1c944 <__assert_fail@plt+0xacbc>
   1c918:	ldr	r3, [r4, #64]	; 0x40
   1c91c:	mov	r1, r9
   1c920:	cmp	r3, #0
   1c924:	add	r4, r4, #76	; 0x4c
   1c928:	bne	1c938 <__assert_fail@plt+0xacb0>
   1c92c:	bl	117e4 <strcmp@plt>
   1c930:	cmp	r0, #0
   1c934:	beq	1c960 <__assert_fail@plt+0xacd8>
   1c938:	add	r5, r5, #1
   1c93c:	cmp	r5, r6
   1c940:	bne	1c90c <__assert_fail@plt+0xac84>
   1c944:	ldr	r1, [pc, #160]	; 1c9ec <__assert_fail@plt+0xad64>
   1c948:	mov	r2, r9
   1c94c:	add	r1, pc, r1
   1c950:	mov	r0, #1
   1c954:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c958:	mov	r0, #4
   1c95c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c960:	lsl	r2, r5, #3
   1c964:	add	r1, r2, r5
   1c968:	ldr	r3, [pc, #128]	; 1c9f0 <__assert_fail@plt+0xad68>
   1c96c:	add	r1, r5, r1, lsl #1
   1c970:	add	r3, pc, r3
   1c974:	add	r3, r3, r1, lsl #2
   1c978:	ldr	r1, [r3, #16]
   1c97c:	cmp	r1, #0
   1c980:	beq	1c9b8 <__assert_fail@plt+0xad30>
   1c984:	cmp	r8, #0
   1c988:	strne	r1, [r8]
   1c98c:	cmp	r7, #0
   1c990:	beq	1c9dc <__assert_fail@plt+0xad54>
   1c994:	add	r2, r2, r5
   1c998:	ldr	r3, [pc, #84]	; 1c9f4 <__assert_fail@plt+0xad6c>
   1c99c:	add	r5, r5, r2, lsl #1
   1c9a0:	add	r3, pc, r3
   1c9a4:	add	r5, r3, r5, lsl #2
   1c9a8:	mov	r0, #0
   1c9ac:	ldr	r3, [r5, #20]
   1c9b0:	str	r3, [r7]
   1c9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9b8:	ldr	r3, [r3, #20]
   1c9bc:	cmp	r3, #0
   1c9c0:	bne	1c984 <__assert_fail@plt+0xacfc>
   1c9c4:	ldr	r1, [pc, #44]	; 1c9f8 <__assert_fail@plt+0xad70>
   1c9c8:	mov	r0, #1
   1c9cc:	add	r1, pc, r1
   1c9d0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1c9d4:	mov	r0, #1
   1c9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9dc:	mov	r0, r7
   1c9e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9e4:	andeq	ip, r1, r0, lsr sl
   1c9e8:	andeq	ip, r1, r8, lsr #20
   1c9ec:	andeq	r9, r0, ip, lsr #10
   1c9f0:	andeq	ip, r1, r4, lsr #19
   1c9f4:	andeq	ip, r1, r4, ror r9
   1c9f8:	andeq	r9, r0, r8, ror #8
   1c9fc:	ldr	r3, [pc, #244]	; 1caf8 <__assert_fail@plt+0xae70>
   1ca00:	push	{r4, lr}
   1ca04:	add	r3, pc, r3
   1ca08:	sub	sp, sp, #8
   1ca0c:	ldr	r3, [r3, #4]
   1ca10:	cmp	r3, r0
   1ca14:	movgt	r3, #0
   1ca18:	movle	r3, #1
   1ca1c:	orrs	r3, r3, r0, lsr #31
   1ca20:	bne	1cabc <__assert_fail@plt+0xae34>
   1ca24:	add	r3, r0, r0, lsl #3
   1ca28:	ldr	ip, [pc, #204]	; 1cafc <__assert_fail@plt+0xae74>
   1ca2c:	add	r3, r0, r3, lsl #1
   1ca30:	add	ip, pc, ip
   1ca34:	add	ip, ip, r3, lsl #2
   1ca38:	ldr	r3, [ip, #64]	; 0x40
   1ca3c:	cmp	r3, #0
   1ca40:	bgt	1cad8 <__assert_fail@plt+0xae50>
   1ca44:	ldr	r3, [ip, #16]
   1ca48:	cmp	r1, #0
   1ca4c:	ldr	ip, [ip, #20]
   1ca50:	strne	r3, [r1]
   1ca54:	cmp	r2, #0
   1ca58:	strne	ip, [r2]
   1ca5c:	cmp	r3, #0
   1ca60:	clz	r2, ip
   1ca64:	lsr	r2, r2, #5
   1ca68:	movne	r4, r2
   1ca6c:	moveq	r4, #1
   1ca70:	cmp	r4, #0
   1ca74:	bne	1ca9c <__assert_fail@plt+0xae14>
   1ca78:	ldr	r1, [pc, #128]	; 1cb00 <__assert_fail@plt+0xae78>
   1ca7c:	mov	r2, r0
   1ca80:	str	ip, [sp]
   1ca84:	add	r1, pc, r1
   1ca88:	mov	r0, #3
   1ca8c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ca90:	mov	r0, r4
   1ca94:	add	sp, sp, #8
   1ca98:	pop	{r4, pc}
   1ca9c:	ldr	r1, [pc, #96]	; 1cb04 <__assert_fail@plt+0xae7c>
   1caa0:	mov	r2, r0
   1caa4:	add	r1, pc, r1
   1caa8:	mov	r0, #3
   1caac:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1cab0:	mov	r0, #1
   1cab4:	add	sp, sp, #8
   1cab8:	pop	{r4, pc}
   1cabc:	ldr	r1, [pc, #68]	; 1cb08 <__assert_fail@plt+0xae80>
   1cac0:	mov	r0, #1
   1cac4:	add	r1, pc, r1
   1cac8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1cacc:	mov	r0, #4
   1cad0:	add	sp, sp, #8
   1cad4:	pop	{r4, pc}
   1cad8:	ldr	r1, [pc, #44]	; 1cb0c <__assert_fail@plt+0xae84>
   1cadc:	mov	r2, r0
   1cae0:	add	r1, pc, r1
   1cae4:	mov	r0, #1
   1cae8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1caec:	mov	r0, #4
   1caf0:	add	sp, sp, #8
   1caf4:	pop	{r4, pc}
   1caf8:	andeq	ip, r1, r0, lsl #18
   1cafc:	andeq	ip, r1, r4, ror #17
   1cb00:	andeq	r9, r0, ip, lsl r5
   1cb04:	muleq	r0, r0, r4
   1cb08:	strdeq	r9, [r0], -ip
   1cb0c:	andeq	r9, r0, r0, lsr #8
   1cb10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cb14:	mov	r3, r1
   1cb18:	ldr	r4, [pc, #192]	; 1cbe0 <__assert_fail@plt+0xaf58>
   1cb1c:	mov	r7, r1
   1cb20:	ldr	r1, [pc, #188]	; 1cbe4 <__assert_fail@plt+0xaf5c>
   1cb24:	add	r4, pc, r4
   1cb28:	mov	r6, r0
   1cb2c:	mov	r8, r2
   1cb30:	add	r1, pc, r1
   1cb34:	mov	r2, r0
   1cb38:	mov	r0, #3
   1cb3c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1cb40:	ldr	r0, [r4, #12]
   1cb44:	cmp	r0, #0
   1cb48:	beq	1cbd8 <__assert_fail@plt+0xaf50>
   1cb4c:	ldr	r3, [pc, #148]	; 1cbe8 <__assert_fail@plt+0xaf60>
   1cb50:	add	r3, pc, r3
   1cb54:	ldr	r3, [r3, #4]
   1cb58:	cmp	r3, #0
   1cb5c:	ble	1cbd8 <__assert_fail@plt+0xaf50>
   1cb60:	ldr	r9, [pc, #132]	; 1cbec <__assert_fail@plt+0xaf64>
   1cb64:	mov	r5, #0
   1cb68:	add	r9, pc, r9
   1cb6c:	b	1cb8c <__assert_fail@plt+0xaf04>
   1cb70:	ldr	r0, [r4, #88]	; 0x58
   1cb74:	add	r4, r4, #76	; 0x4c
   1cb78:	cmp	r0, #0
   1cb7c:	beq	1cbd8 <__assert_fail@plt+0xaf50>
   1cb80:	ldr	r3, [r9, #4]
   1cb84:	cmp	r3, r5
   1cb88:	ble	1cbd8 <__assert_fail@plt+0xaf50>
   1cb8c:	ldr	r3, [r4, #16]
   1cb90:	add	r5, r5, #1
   1cb94:	cmp	r3, r6
   1cb98:	bne	1cb70 <__assert_fail@plt+0xaee8>
   1cb9c:	ldr	r3, [r4, #20]
   1cba0:	cmp	r3, r7
   1cba4:	bne	1cb70 <__assert_fail@plt+0xaee8>
   1cba8:	ldr	r2, [r4, #64]	; 0x40
   1cbac:	adds	r3, r8, #0
   1cbb0:	movne	r3, #1
   1cbb4:	cmp	r2, #0
   1cbb8:	movne	r3, #0
   1cbbc:	cmp	r3, #0
   1cbc0:	beq	1cb70 <__assert_fail@plt+0xaee8>
   1cbc4:	blx	r8
   1cbc8:	ldr	r0, [r4, #88]	; 0x58
   1cbcc:	add	r4, r4, #76	; 0x4c
   1cbd0:	cmp	r0, #0
   1cbd4:	bne	1cb80 <__assert_fail@plt+0xaef8>
   1cbd8:	mov	r0, #0
   1cbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cbe0:	strdeq	ip, [r1], -r0
   1cbe4:	andeq	r9, r0, r0, asr #9
   1cbe8:			; <UNDEFINED> instruction: 0x0001c7b4
   1cbec:	muleq	r1, ip, r7
   1cbf0:	ldr	r3, [pc, #276]	; 1cd0c <__assert_fail@plt+0xb084>
   1cbf4:	ldr	ip, [pc, #276]	; 1cd10 <__assert_fail@plt+0xb088>
   1cbf8:	add	r3, pc, r3
   1cbfc:	push	{r4, r5, r6, r7, r8, lr}
   1cc00:	mov	r5, r1
   1cc04:	ldr	r4, [r3, ip]
   1cc08:	ldr	r1, [pc, #260]	; 1cd14 <__assert_fail@plt+0xb08c>
   1cc0c:	sub	sp, sp, #16
   1cc10:	ldr	r3, [r4]
   1cc14:	mov	r2, #3
   1cc18:	add	r1, pc, r1
   1cc1c:	mov	r6, r0
   1cc20:	str	r3, [sp, #12]
   1cc24:	bl	11c40 <strncmp@plt>
   1cc28:	subs	r7, r0, #0
   1cc2c:	beq	1cc50 <__assert_fail@plt+0xafc8>
   1cc30:	mov	r0, r6
   1cc34:	blx	r5
   1cc38:	ldr	r2, [sp, #12]
   1cc3c:	ldr	r3, [r4]
   1cc40:	cmp	r2, r3
   1cc44:	bne	1cd08 <__assert_fail@plt+0xb080>
   1cc48:	add	sp, sp, #16
   1cc4c:	pop	{r4, r5, r6, r7, r8, pc}
   1cc50:	add	r0, r6, #3
   1cc54:	bl	18520 <__assert_fail@plt+0x6898>
   1cc58:	ldrb	r2, [r0]
   1cc5c:	mov	r3, r0
   1cc60:	cmp	r2, #0
   1cc64:	moveq	r6, r7
   1cc68:	bne	1cc94 <__assert_fail@plt+0xb00c>
   1cc6c:	mov	r0, r3
   1cc70:	bl	18520 <__assert_fail@plt+0x6898>
   1cc74:	ldrb	r3, [r0]
   1cc78:	cmp	r3, #0
   1cc7c:	bne	1ccd8 <__assert_fail@plt+0xb050>
   1cc80:	mov	r2, r5
   1cc84:	mov	r1, r7
   1cc88:	mov	r0, r6
   1cc8c:	bl	1cb10 <__assert_fail@plt+0xae88>
   1cc90:	b	1cc38 <__assert_fail@plt+0xafb0>
   1cc94:	add	r1, sp, #4
   1cc98:	bl	18570 <__assert_fail@plt+0x68e8>
   1cc9c:	mov	r8, r0
   1cca0:	ldr	r0, [sp, #4]
   1cca4:	cmp	r0, #0
   1cca8:	moveq	r6, r7
   1ccac:	beq	1ccc8 <__assert_fail@plt+0xb040>
   1ccb0:	mov	r2, r7
   1ccb4:	mov	r1, r7
   1ccb8:	bl	117fc <strtol@plt>
   1ccbc:	mov	r6, r0
   1ccc0:	ldr	r0, [sp, #4]
   1ccc4:	bl	11850 <free@plt>
   1ccc8:	mov	r0, r8
   1cccc:	bl	18520 <__assert_fail@plt+0x6898>
   1ccd0:	mov	r3, r0
   1ccd4:	b	1cc6c <__assert_fail@plt+0xafe4>
   1ccd8:	add	r1, sp, #8
   1ccdc:	bl	18570 <__assert_fail@plt+0x68e8>
   1cce0:	ldr	r0, [sp, #8]
   1cce4:	cmp	r0, #0
   1cce8:	beq	1cc80 <__assert_fail@plt+0xaff8>
   1ccec:	mov	r2, #0
   1ccf0:	mov	r1, r2
   1ccf4:	bl	117fc <strtol@plt>
   1ccf8:	mov	r7, r0
   1ccfc:	ldr	r0, [sp, #8]
   1cd00:	bl	11850 <free@plt>
   1cd04:	b	1cc80 <__assert_fail@plt+0xaff8>
   1cd08:	bl	118e0 <__stack_chk_fail@plt>
   1cd0c:	andeq	fp, r1, ip, lsr #4
   1cd10:			; <UNDEFINED> instruction: 0x000001b0
   1cd14:	andeq	r2, r0, ip, lsr pc
   1cd18:	ldr	r3, [pc, #376]	; 1ce98 <__assert_fail@plt+0xb210>
   1cd1c:	add	r3, pc, r3
   1cd20:	ldr	ip, [r3, #4]
   1cd24:	cmp	ip, r0
   1cd28:	movgt	ip, #0
   1cd2c:	movle	ip, #1
   1cd30:	orrs	r3, ip, r0, lsr #31
   1cd34:	beq	1cd48 <__assert_fail@plt+0xb0c0>
   1cd38:	ldr	r1, [pc, #348]	; 1ce9c <__assert_fail@plt+0xb214>
   1cd3c:	mov	r0, #1
   1cd40:	add	r1, pc, r1
   1cd44:	b	1bb74 <__assert_fail@plt+0x9eec>
   1cd48:	push	{r4, r5, r6, lr}
   1cd4c:	mov	r3, r2
   1cd50:	mov	r4, r1
   1cd54:	mov	r6, r2
   1cd58:	mov	r2, r1
   1cd5c:	ldr	r1, [pc, #316]	; 1cea0 <__assert_fail@plt+0xb218>
   1cd60:	mov	r5, r0
   1cd64:	add	r1, pc, r1
   1cd68:	mov	r0, #5
   1cd6c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1cd70:	cmp	r4, #3
   1cd74:	beq	1ce0c <__assert_fail@plt+0xb184>
   1cd78:	ble	1cdb4 <__assert_fail@plt+0xb12c>
   1cd7c:	cmp	r4, #129	; 0x81
   1cd80:	beq	1ce7c <__assert_fail@plt+0xb1f4>
   1cd84:	ble	1cde8 <__assert_fail@plt+0xb160>
   1cd88:	cmp	r4, #130	; 0x82
   1cd8c:	beq	1ce28 <__assert_fail@plt+0xb1a0>
   1cd90:	cmp	r4, #131	; 0x83
   1cd94:	popne	{r4, r5, r6, pc}
   1cd98:	add	r3, r5, r5, lsl #3
   1cd9c:	ldr	r0, [pc, #256]	; 1cea4 <__assert_fail@plt+0xb21c>
   1cda0:	add	r5, r5, r3, lsl #1
   1cda4:	add	r0, pc, r0
   1cda8:	add	r0, r0, r5, lsl #2
   1cdac:	str	r6, [r0, #40]	; 0x28
   1cdb0:	pop	{r4, r5, r6, pc}
   1cdb4:	cmp	r4, #1
   1cdb8:	beq	1ce60 <__assert_fail@plt+0xb1d8>
   1cdbc:	bgt	1ce44 <__assert_fail@plt+0xb1bc>
   1cdc0:	cmp	r4, #0
   1cdc4:	popne	{r4, r5, r6, pc}
   1cdc8:	add	r0, r5, r5, lsl #3
   1cdcc:	ldr	r3, [pc, #212]	; 1cea8 <__assert_fail@plt+0xb220>
   1cdd0:	add	r0, r5, r0, lsl #1
   1cdd4:	add	r3, pc, r3
   1cdd8:	add	r0, r3, r0, lsl #2
   1cddc:	mov	r5, r3
   1cde0:	str	r6, [r0, #52]	; 0x34
   1cde4:	pop	{r4, r5, r6, pc}
   1cde8:	cmp	r4, #128	; 0x80
   1cdec:	popne	{r4, r5, r6, pc}
   1cdf0:	add	r3, r5, r5, lsl #3
   1cdf4:	ldr	r0, [pc, #176]	; 1ceac <__assert_fail@plt+0xb224>
   1cdf8:	add	r5, r5, r3, lsl #1
   1cdfc:	add	r0, pc, r0
   1ce00:	add	r0, r0, r5, lsl #2
   1ce04:	str	r6, [r0, #48]	; 0x30
   1ce08:	pop	{r4, r5, r6, pc}
   1ce0c:	add	r3, r5, r5, lsl #3
   1ce10:	ldr	r0, [pc, #152]	; 1ceb0 <__assert_fail@plt+0xb228>
   1ce14:	add	r5, r5, r3, lsl #1
   1ce18:	add	r0, pc, r0
   1ce1c:	add	r0, r0, r5, lsl #2
   1ce20:	str	r6, [r0, #44]	; 0x2c
   1ce24:	pop	{r4, r5, r6, pc}
   1ce28:	add	r3, r5, r5, lsl #3
   1ce2c:	ldr	r0, [pc, #128]	; 1ceb4 <__assert_fail@plt+0xb22c>
   1ce30:	add	r5, r5, r3, lsl #1
   1ce34:	add	r0, pc, r0
   1ce38:	add	r0, r0, r5, lsl #2
   1ce3c:	str	r6, [r0, #24]
   1ce40:	pop	{r4, r5, r6, pc}
   1ce44:	add	r3, r5, r5, lsl #3
   1ce48:	ldr	r0, [pc, #104]	; 1ceb8 <__assert_fail@plt+0xb230>
   1ce4c:	add	r5, r5, r3, lsl #1
   1ce50:	add	r0, pc, r0
   1ce54:	add	r0, r0, r5, lsl #2
   1ce58:	str	r6, [r0, #28]
   1ce5c:	pop	{r4, r5, r6, pc}
   1ce60:	add	r3, r5, r5, lsl #3
   1ce64:	ldr	r0, [pc, #80]	; 1cebc <__assert_fail@plt+0xb234>
   1ce68:	add	r5, r5, r3, lsl #1
   1ce6c:	add	r0, pc, r0
   1ce70:	add	r0, r0, r5, lsl #2
   1ce74:	str	r6, [r0, #36]	; 0x24
   1ce78:	pop	{r4, r5, r6, pc}
   1ce7c:	add	r3, r5, r5, lsl #3
   1ce80:	ldr	r0, [pc, #56]	; 1cec0 <__assert_fail@plt+0xb238>
   1ce84:	add	r5, r5, r3, lsl #1
   1ce88:	add	r0, pc, r0
   1ce8c:	add	r0, r0, r5, lsl #2
   1ce90:	str	r6, [r0, #32]
   1ce94:	pop	{r4, r5, r6, pc}
   1ce98:	andeq	ip, r1, r8, ror #11
   1ce9c:	andeq	r9, r0, r8, ror #5
   1cea0:	strdeq	r9, [r0], -ip
   1cea4:	andeq	ip, r1, r0, ror r5
   1cea8:	andeq	ip, r1, r0, asr #10
   1ceac:	andeq	ip, r1, r8, lsl r5
   1ceb0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ceb4:	andeq	ip, r1, r0, ror #9
   1ceb8:	andeq	ip, r1, r4, asr #9
   1cebc:	andeq	ip, r1, r8, lsr #9
   1cec0:	andeq	ip, r1, ip, lsl #9
   1cec4:	ldr	r3, [pc, #352]	; 1d02c <__assert_fail@plt+0xb3a4>
   1cec8:	add	r3, pc, r3
   1cecc:	ldr	r2, [r3, #4]
   1ced0:	lsr	r3, r0, #31
   1ced4:	cmp	r2, r0
   1ced8:	orrle	r3, r3, #1
   1cedc:	cmp	r3, #0
   1cee0:	bne	1cf84 <__assert_fail@plt+0xb2fc>
   1cee4:	cmp	r1, #3
   1cee8:	beq	1d010 <__assert_fail@plt+0xb388>
   1ceec:	ble	1cf28 <__assert_fail@plt+0xb2a0>
   1cef0:	cmp	r1, #129	; 0x81
   1cef4:	beq	1cff4 <__assert_fail@plt+0xb36c>
   1cef8:	ble	1cf58 <__assert_fail@plt+0xb2d0>
   1cefc:	cmp	r1, #130	; 0x82
   1cf00:	beq	1cfa0 <__assert_fail@plt+0xb318>
   1cf04:	cmp	r1, #131	; 0x83
   1cf08:	bne	1cf7c <__assert_fail@plt+0xb2f4>
   1cf0c:	add	r2, r0, r0, lsl #3
   1cf10:	ldr	r3, [pc, #280]	; 1d030 <__assert_fail@plt+0xb3a8>
   1cf14:	add	r0, r0, r2, lsl #1
   1cf18:	add	r3, pc, r3
   1cf1c:	add	r3, r3, r0, lsl #2
   1cf20:	ldr	r0, [r3, #40]	; 0x28
   1cf24:	bx	lr
   1cf28:	cmp	r1, #1
   1cf2c:	beq	1cfd8 <__assert_fail@plt+0xb350>
   1cf30:	bgt	1cfbc <__assert_fail@plt+0xb334>
   1cf34:	cmp	r1, #0
   1cf38:	bne	1cf7c <__assert_fail@plt+0xb2f4>
   1cf3c:	add	r2, r0, r0, lsl #3
   1cf40:	ldr	r3, [pc, #236]	; 1d034 <__assert_fail@plt+0xb3ac>
   1cf44:	add	r0, r0, r2, lsl #1
   1cf48:	add	r3, pc, r3
   1cf4c:	add	r0, r3, r0, lsl #2
   1cf50:	ldr	r0, [r0, #52]	; 0x34
   1cf54:	bx	lr
   1cf58:	cmp	r1, #128	; 0x80
   1cf5c:	bne	1cf7c <__assert_fail@plt+0xb2f4>
   1cf60:	add	r2, r0, r0, lsl #3
   1cf64:	ldr	r3, [pc, #204]	; 1d038 <__assert_fail@plt+0xb3b0>
   1cf68:	add	r0, r0, r2, lsl #1
   1cf6c:	add	r3, pc, r3
   1cf70:	add	r3, r3, r0, lsl #2
   1cf74:	ldr	r0, [r3, #48]	; 0x30
   1cf78:	bx	lr
   1cf7c:	mov	r0, r3
   1cf80:	bx	lr
   1cf84:	ldr	r1, [pc, #176]	; 1d03c <__assert_fail@plt+0xb3b4>
   1cf88:	push	{r4, lr}
   1cf8c:	add	r1, pc, r1
   1cf90:	mov	r0, #1
   1cf94:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1cf98:	mov	r0, #0
   1cf9c:	pop	{r4, pc}
   1cfa0:	add	r2, r0, r0, lsl #3
   1cfa4:	ldr	r3, [pc, #148]	; 1d040 <__assert_fail@plt+0xb3b8>
   1cfa8:	add	r0, r0, r2, lsl #1
   1cfac:	add	r3, pc, r3
   1cfb0:	add	r3, r3, r0, lsl #2
   1cfb4:	ldr	r0, [r3, #24]
   1cfb8:	bx	lr
   1cfbc:	add	r2, r0, r0, lsl #3
   1cfc0:	ldr	r3, [pc, #124]	; 1d044 <__assert_fail@plt+0xb3bc>
   1cfc4:	add	r0, r0, r2, lsl #1
   1cfc8:	add	r3, pc, r3
   1cfcc:	add	r3, r3, r0, lsl #2
   1cfd0:	ldr	r0, [r3, #28]
   1cfd4:	bx	lr
   1cfd8:	add	r2, r0, r0, lsl #3
   1cfdc:	ldr	r3, [pc, #100]	; 1d048 <__assert_fail@plt+0xb3c0>
   1cfe0:	add	r0, r0, r2, lsl #1
   1cfe4:	add	r3, pc, r3
   1cfe8:	add	r3, r3, r0, lsl #2
   1cfec:	ldr	r0, [r3, #36]	; 0x24
   1cff0:	bx	lr
   1cff4:	add	r2, r0, r0, lsl #3
   1cff8:	ldr	r3, [pc, #76]	; 1d04c <__assert_fail@plt+0xb3c4>
   1cffc:	add	r0, r0, r2, lsl #1
   1d000:	add	r3, pc, r3
   1d004:	add	r3, r3, r0, lsl #2
   1d008:	ldr	r0, [r3, #32]
   1d00c:	bx	lr
   1d010:	add	r2, r0, r0, lsl #3
   1d014:	ldr	r3, [pc, #52]	; 1d050 <__assert_fail@plt+0xb3c8>
   1d018:	add	r0, r0, r2, lsl #1
   1d01c:	add	r3, pc, r3
   1d020:	add	r3, r3, r0, lsl #2
   1d024:	ldr	r0, [r3, #44]	; 0x2c
   1d028:	bx	lr
   1d02c:	andeq	ip, r1, ip, lsr r4
   1d030:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d034:	andeq	ip, r1, ip, asr #7
   1d038:	andeq	ip, r1, r8, lsr #7
   1d03c:	andeq	r9, r0, r8, lsl r1
   1d040:	andeq	ip, r1, r8, ror #6
   1d044:	andeq	ip, r1, ip, asr #6
   1d048:	andeq	ip, r1, r0, lsr r3
   1d04c:	andeq	ip, r1, r4, lsl r3
   1d050:	strdeq	ip, [r1], -r8
   1d054:	ldr	r3, [pc, #2744]	; 1db14 <__assert_fail@plt+0xbe8c>
   1d058:	ldr	r2, [pc, #2744]	; 1db18 <__assert_fail@plt+0xbe90>
   1d05c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d060:	add	r3, pc, r3
   1d064:	sub	sp, sp, #108	; 0x6c
   1d068:	mov	r4, r1
   1d06c:	str	r0, [sp, #24]
   1d070:	str	r1, [sp, #44]	; 0x2c
   1d074:	ldr	ip, [r3, r2]
   1d078:	ldr	r1, [pc, #2716]	; 1db1c <__assert_fail@plt+0xbe94>
   1d07c:	str	ip, [sp, #40]	; 0x28
   1d080:	ldr	ip, [ip]
   1d084:	mov	r2, r0
   1d088:	add	r1, pc, r1
   1d08c:	mov	r0, #5
   1d090:	str	ip, [sp, #100]	; 0x64
   1d094:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d098:	cmp	r4, #0
   1d09c:	beq	1d1a8 <__assert_fail@plt+0xb520>
   1d0a0:	ldr	r3, [pc, #2680]	; 1db20 <__assert_fail@plt+0xbe98>
   1d0a4:	add	r3, pc, r3
   1d0a8:	ldr	r5, [r3, #4]
   1d0ac:	cmp	r5, #0
   1d0b0:	ble	1d10c <__assert_fail@plt+0xb484>
   1d0b4:	ldr	r4, [pc, #2664]	; 1db24 <__assert_fail@plt+0xbe9c>
   1d0b8:	add	r4, pc, r4
   1d0bc:	ldr	r0, [r4, #12]
   1d0c0:	cmp	r0, #0
   1d0c4:	movne	fp, #0
   1d0c8:	ldrne	r6, [sp, #24]
   1d0cc:	bne	1d0e4 <__assert_fail@plt+0xb45c>
   1d0d0:	b	1d10c <__assert_fail@plt+0xb484>
   1d0d4:	add	r4, r4, #76	; 0x4c
   1d0d8:	ldr	r0, [r4, #12]
   1d0dc:	cmp	r0, #0
   1d0e0:	beq	1d10c <__assert_fail@plt+0xb484>
   1d0e4:	ldr	r3, [r4, #64]	; 0x40
   1d0e8:	cmp	r3, #0
   1d0ec:	bne	1d100 <__assert_fail@plt+0xb478>
   1d0f0:	mov	r1, r6
   1d0f4:	bl	117e4 <strcmp@plt>
   1d0f8:	cmp	r0, #0
   1d0fc:	beq	1d144 <__assert_fail@plt+0xb4bc>
   1d100:	add	fp, fp, #1
   1d104:	cmp	fp, r5
   1d108:	bne	1d0d4 <__assert_fail@plt+0xb44c>
   1d10c:	ldr	r1, [pc, #2580]	; 1db28 <__assert_fail@plt+0xbea0>
   1d110:	ldr	r2, [sp, #24]
   1d114:	add	r1, pc, r1
   1d118:	mov	r0, #1
   1d11c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d120:	mov	r4, #4
   1d124:	ldr	r3, [sp, #40]	; 0x28
   1d128:	ldr	r2, [sp, #100]	; 0x64
   1d12c:	mov	r0, r4
   1d130:	ldr	r3, [r3]
   1d134:	cmp	r2, r3
   1d138:	bne	1da94 <__assert_fail@plt+0xbe0c>
   1d13c:	add	sp, sp, #108	; 0x6c
   1d140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d144:	lsl	r3, fp, #3
   1d148:	str	r3, [sp, #48]	; 0x30
   1d14c:	add	r3, r3, fp
   1d150:	ldr	r1, [pc, #2516]	; 1db2c <__assert_fail@plt+0xbea4>
   1d154:	add	r3, fp, r3, lsl #1
   1d158:	add	r1, pc, r1
   1d15c:	lsl	r3, r3, #2
   1d160:	add	r6, r1, r3
   1d164:	ldr	r7, [r1, r3]
   1d168:	cmp	r7, #0
   1d16c:	bne	1d880 <__assert_fail@plt+0xbbf8>
   1d170:	ldr	r4, [r6, #4]
   1d174:	cmp	r4, #1
   1d178:	beq	1d23c <__assert_fail@plt+0xb5b4>
   1d17c:	cmp	r4, #0
   1d180:	beq	1d1e0 <__assert_fail@plt+0xb558>
   1d184:	cmp	r4, #2
   1d188:	beq	1d1c4 <__assert_fail@plt+0xb53c>
   1d18c:	ldr	r1, [pc, #2460]	; 1db30 <__assert_fail@plt+0xbea8>
   1d190:	mov	r2, r4
   1d194:	add	r1, pc, r1
   1d198:	mov	r0, #1
   1d19c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d1a0:	mov	r4, #4
   1d1a4:	b	1d124 <__assert_fail@plt+0xb49c>
   1d1a8:	ldr	r1, [pc, #2436]	; 1db34 <__assert_fail@plt+0xbeac>
   1d1ac:	ldr	r2, [sp, #24]
   1d1b0:	add	r1, pc, r1
   1d1b4:	mov	r0, #1
   1d1b8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d1bc:	mov	r4, #4
   1d1c0:	b	1d124 <__assert_fail@plt+0xb49c>
   1d1c4:	ldr	r1, [pc, #2412]	; 1db38 <__assert_fail@plt+0xbeb0>
   1d1c8:	ldr	r2, [sp, #24]
   1d1cc:	add	r1, pc, r1
   1d1d0:	mov	r0, #1
   1d1d4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d1d8:	mov	r4, #1
   1d1dc:	b	1d124 <__assert_fail@plt+0xb49c>
   1d1e0:	mvn	r3, #0
   1d1e4:	str	r3, [r6, #8]
   1d1e8:	mov	r1, #2
   1d1ec:	ldr	r0, [sp, #24]
   1d1f0:	bl	11a60 <open@plt>
   1d1f4:	cmp	r0, #0
   1d1f8:	str	r0, [r6, #8]
   1d1fc:	bge	1d8bc <__assert_fail@plt+0xbc34>
   1d200:	bl	11acc <__errno_location@plt>
   1d204:	ldr	r0, [r0]
   1d208:	cmp	r0, #13
   1d20c:	beq	1d99c <__assert_fail@plt+0xbd14>
   1d210:	cmp	r0, #2
   1d214:	movne	r4, #4
   1d218:	beq	1d9a4 <__assert_fail@plt+0xbd1c>
   1d21c:	bl	11a18 <strerror@plt>
   1d220:	ldr	r1, [pc, #2324]	; 1db3c <__assert_fail@plt+0xbeb4>
   1d224:	ldr	r2, [sp, #24]
   1d228:	add	r1, pc, r1
   1d22c:	mov	r3, r0
   1d230:	mov	r0, #1
   1d234:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d238:	b	1d124 <__assert_fail@plt+0xb49c>
   1d23c:	ldr	r0, [r6, #68]	; 0x44
   1d240:	add	r3, r3, #72	; 0x48
   1d244:	add	r1, r1, r3
   1d248:	str	r0, [sp, #52]	; 0x34
   1d24c:	bl	117f0 <libusb_open@plt>
   1d250:	subs	r5, r0, #0
   1d254:	blt	1d90c <__assert_fail@plt+0xbc84>
   1d258:	ldr	r0, [r6, #72]	; 0x48
   1d25c:	add	r1, sp, #68	; 0x44
   1d260:	bl	119b8 <libusb_get_configuration@plt>
   1d264:	subs	r3, r0, #0
   1d268:	blt	1d964 <__assert_fail@plt+0xbcdc>
   1d26c:	ldr	r3, [sp, #68]	; 0x44
   1d270:	cmp	r3, #0
   1d274:	beq	1d948 <__assert_fail@plt+0xbcc0>
   1d278:	add	r1, sp, #80	; 0x50
   1d27c:	ldr	r0, [sp, #52]	; 0x34
   1d280:	bl	11bbc <libusb_get_device_descriptor@plt>
   1d284:	subs	r3, r0, #0
   1d288:	blt	1d980 <__assert_fail@plt+0xbcf8>
   1d28c:	mov	r1, r7
   1d290:	add	r2, sp, #72	; 0x48
   1d294:	ldr	r0, [sp, #52]	; 0x34
   1d298:	bl	1197c <libusb_get_config_descriptor@plt>
   1d29c:	subs	r3, r0, #0
   1d2a0:	blt	1da18 <__assert_fail@plt+0xbd90>
   1d2a4:	ldrb	r2, [sp, #97]	; 0x61
   1d2a8:	ldr	r0, [sp, #72]	; 0x48
   1d2ac:	cmp	r2, #1
   1d2b0:	bls	1d308 <__assert_fail@plt+0xb680>
   1d2b4:	ldr	r1, [pc, #2180]	; 1db40 <__assert_fail@plt+0xbeb8>
   1d2b8:	ldrb	r3, [r0, #5]
   1d2bc:	add	r1, pc, r1
   1d2c0:	mov	r0, #3
   1d2c4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d2c8:	ldr	r0, [sp, #72]	; 0x48
   1d2cc:	ldr	r3, [sp, #68]	; 0x44
   1d2d0:	ldrb	r1, [r0, #5]
   1d2d4:	cmp	r1, r3
   1d2d8:	beq	1d308 <__assert_fail@plt+0xb680>
   1d2dc:	ldr	r3, [sp, #48]	; 0x30
   1d2e0:	add	r2, r3, fp
   1d2e4:	ldr	r3, [pc, #2136]	; 1db44 <__assert_fail@plt+0xbebc>
   1d2e8:	add	r2, fp, r2, lsl #1
   1d2ec:	add	r3, pc, r3
   1d2f0:	add	r3, r3, r2, lsl #2
   1d2f4:	ldr	r0, [r3, #72]	; 0x48
   1d2f8:	bl	11b5c <libusb_set_configuration@plt>
   1d2fc:	subs	r4, r0, #0
   1d300:	blt	1da98 <__assert_fail@plt+0xbe10>
   1d304:	ldr	r0, [sp, #72]	; 0x48
   1d308:	bl	11958 <libusb_free_config_descriptor@plt>
   1d30c:	ldr	r3, [sp, #48]	; 0x30
   1d310:	add	r4, r3, fp
   1d314:	ldr	r3, [pc, #2092]	; 1db48 <__assert_fail@plt+0xbec0>
   1d318:	add	r4, fp, r4, lsl #1
   1d31c:	add	r3, pc, r3
   1d320:	lsl	r4, r4, #2
   1d324:	add	r3, r3, r4
   1d328:	ldr	r1, [r3, #56]	; 0x38
   1d32c:	ldr	r0, [r3, #72]	; 0x48
   1d330:	bl	11bec <libusb_claim_interface@plt>
   1d334:	subs	r5, r0, #0
   1d338:	blt	1d9c8 <__assert_fail@plt+0xbd40>
   1d33c:	ldrb	r3, [sp, #97]	; 0x61
   1d340:	cmp	r3, #0
   1d344:	beq	1d75c <__assert_fail@plt+0xbad4>
   1d348:	ldr	r3, [pc, #2044]	; 1db4c <__assert_fail@plt+0xbec4>
   1d34c:	str	r4, [sp, #20]
   1d350:	add	r3, pc, r3
   1d354:	add	r3, r3, r4
   1d358:	str	r3, [sp, #28]
   1d35c:	mov	r3, #0
   1d360:	str	r3, [sp, #32]
   1d364:	add	r3, sp, #76	; 0x4c
   1d368:	str	r3, [sp, #56]	; 0x38
   1d36c:	str	fp, [sp, #60]	; 0x3c
   1d370:	ldr	r2, [sp, #56]	; 0x38
   1d374:	ldrb	r1, [sp, #32]
   1d378:	ldr	r0, [sp, #52]	; 0x34
   1d37c:	bl	1197c <libusb_get_config_descriptor@plt>
   1d380:	cmp	r0, #0
   1d384:	blt	1d89c <__assert_fail@plt+0xbc14>
   1d388:	ldr	r0, [sp, #76]	; 0x4c
   1d38c:	ldrb	r3, [r0, #4]
   1d390:	cmp	r3, #0
   1d394:	movne	r3, #0
   1d398:	strne	r3, [sp, #16]
   1d39c:	beq	1d73c <__assert_fail@plt+0xbab4>
   1d3a0:	ldr	r2, [sp, #16]
   1d3a4:	ldr	r3, [r0, #12]
   1d3a8:	lsl	r2, r2, #3
   1d3ac:	add	r3, r3, r2
   1d3b0:	str	r2, [sp, #12]
   1d3b4:	ldr	r3, [r3, #4]
   1d3b8:	cmp	r3, #0
   1d3bc:	movgt	fp, #0
   1d3c0:	bgt	1d3fc <__assert_fail@plt+0xb774>
   1d3c4:	b	1d724 <__assert_fail@plt+0xba9c>
   1d3c8:	ldr	r1, [pc, #1920]	; 1db50 <__assert_fail@plt+0xbec8>
   1d3cc:	mov	r2, r4
   1d3d0:	mov	r0, #5
   1d3d4:	add	r1, pc, r1
   1d3d8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d3dc:	ldr	r0, [sp, #76]	; 0x4c
   1d3e0:	ldr	r2, [sp, #12]
   1d3e4:	ldr	r3, [r0, #12]
   1d3e8:	add	r3, r3, r2
   1d3ec:	ldr	r3, [r3, #4]
   1d3f0:	add	fp, fp, #1
   1d3f4:	cmp	r3, fp
   1d3f8:	ble	1d724 <__assert_fail@plt+0xba9c>
   1d3fc:	ldr	r5, [sp, #32]
   1d400:	ldr	r1, [pc, #1868]	; 1db54 <__assert_fail@plt+0xbecc>
   1d404:	mov	r2, r5
   1d408:	add	r1, pc, r1
   1d40c:	mov	r0, #5
   1d410:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d414:	ldr	r4, [sp, #16]
   1d418:	ldr	r1, [pc, #1848]	; 1db58 <__assert_fail@plt+0xbed0>
   1d41c:	mov	r2, r4
   1d420:	add	r1, pc, r1
   1d424:	mov	r0, #5
   1d428:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d42c:	ldr	r1, [pc, #1832]	; 1db5c <__assert_fail@plt+0xbed4>
   1d430:	mov	r2, fp
   1d434:	add	r1, pc, r1
   1d438:	mov	r0, #5
   1d43c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d440:	cmp	r5, #0
   1d444:	bne	1d464 <__assert_fail@plt+0xb7dc>
   1d448:	ldr	r3, [pc, #1808]	; 1db60 <__assert_fail@plt+0xbed8>
   1d44c:	ldr	r2, [sp, #20]
   1d450:	add	r3, pc, r3
   1d454:	add	r3, r3, r2
   1d458:	ldr	r3, [r3, #56]	; 0x38
   1d45c:	cmp	r3, r4
   1d460:	bne	1d3c8 <__assert_fail@plt+0xb740>
   1d464:	ldr	r0, [sp, #76]	; 0x4c
   1d468:	ldr	r1, [sp, #12]
   1d46c:	add	sl, fp, fp, lsl #1
   1d470:	ldr	r2, [r0, #12]
   1d474:	add	r3, r2, r1
   1d478:	ldr	r2, [r2, r1]
   1d47c:	add	sl, r2, sl, lsl #3
   1d480:	ldrb	r2, [sl, #4]
   1d484:	cmp	r2, #0
   1d488:	beq	1d3ec <__assert_fail@plt+0xb764>
   1d48c:	mov	r7, #0
   1d490:	str	fp, [sp, #36]	; 0x24
   1d494:	mov	r8, r7
   1d498:	ldr	fp, [sp, #20]
   1d49c:	b	1d508 <__assert_fail@plt+0xb880>
   1d4a0:	cmp	r4, #2
   1d4a4:	sxtb	r6, r6
   1d4a8:	beq	1d5b0 <__assert_fail@plt+0xb928>
   1d4ac:	cmp	r4, #1
   1d4b0:	beq	1d638 <__assert_fail@plt+0xb9b0>
   1d4b4:	cmp	r6, #0
   1d4b8:	bge	1d680 <__assert_fail@plt+0xb9f8>
   1d4bc:	ldr	r2, [pc, #1696]	; 1db64 <__assert_fail@plt+0xbedc>
   1d4c0:	ldr	r1, [pc, #1696]	; 1db68 <__assert_fail@plt+0xbee0>
   1d4c4:	mov	r3, r9
   1d4c8:	add	r2, pc, r2
   1d4cc:	add	r1, pc, r1
   1d4d0:	mov	r0, #5
   1d4d4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d4d8:	ldr	r3, [sp, #28]
   1d4dc:	ldr	r2, [r3, #48]	; 0x30
   1d4e0:	cmp	r2, #0
   1d4e4:	bne	1d81c <__assert_fail@plt+0xbb94>
   1d4e8:	ldrb	r3, [r5, #2]
   1d4ec:	ldr	r2, [sp, #28]
   1d4f0:	str	r3, [r2, #48]	; 0x30
   1d4f4:	ldrb	r3, [sl, #4]
   1d4f8:	add	r7, r7, #1
   1d4fc:	add	r8, r8, #20
   1d500:	cmp	r3, r7
   1d504:	ble	1d700 <__assert_fail@plt+0xba78>
   1d508:	ldr	r5, [sl, #12]
   1d50c:	ldr	r1, [pc, #1624]	; 1db6c <__assert_fail@plt+0xbee4>
   1d510:	add	r5, r5, r8
   1d514:	mov	r2, r7
   1d518:	add	r1, pc, r1
   1d51c:	mov	r0, #5
   1d520:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d524:	ldrb	r6, [r5, #2]
   1d528:	ldr	r1, [pc, #1600]	; 1db70 <__assert_fail@plt+0xbee8>
   1d52c:	ldrb	r4, [r5, #3]
   1d530:	add	r1, pc, r1
   1d534:	and	r2, r6, #128	; 0x80
   1d538:	mov	r0, #5
   1d53c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d540:	ldr	r1, [pc, #1580]	; 1db74 <__assert_fail@plt+0xbeec>
   1d544:	and	r4, r4, #3
   1d548:	and	r9, r6, #15
   1d54c:	mov	r3, r4
   1d550:	mov	r2, r9
   1d554:	add	r1, pc, r1
   1d558:	mov	r0, #5
   1d55c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d560:	cmp	r4, #3
   1d564:	bne	1d4a0 <__assert_fail@plt+0xb818>
   1d568:	tst	r6, #128	; 0x80
   1d56c:	beq	1d5f8 <__assert_fail@plt+0xb970>
   1d570:	ldr	r2, [pc, #1536]	; 1db78 <__assert_fail@plt+0xbef0>
   1d574:	ldr	r1, [pc, #1536]	; 1db7c <__assert_fail@plt+0xbef4>
   1d578:	mov	r3, r9
   1d57c:	add	r2, pc, r2
   1d580:	add	r1, pc, r1
   1d584:	mov	r0, #5
   1d588:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d58c:	ldr	r3, [pc, #1516]	; 1db80 <__assert_fail@plt+0xbef8>
   1d590:	add	r3, pc, r3
   1d594:	add	r3, r3, fp
   1d598:	ldr	r2, [r3, #40]	; 0x28
   1d59c:	cmp	r2, #0
   1d5a0:	bne	1d7e0 <__assert_fail@plt+0xbb58>
   1d5a4:	ldrb	r2, [r5, #2]
   1d5a8:	str	r2, [r3, #40]	; 0x28
   1d5ac:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d5b0:	cmp	r6, #0
   1d5b4:	bge	1d6c0 <__assert_fail@plt+0xba38>
   1d5b8:	ldr	r2, [pc, #1476]	; 1db84 <__assert_fail@plt+0xbefc>
   1d5bc:	ldr	r1, [pc, #1476]	; 1db88 <__assert_fail@plt+0xbf00>
   1d5c0:	mov	r3, r9
   1d5c4:	add	r2, pc, r2
   1d5c8:	add	r1, pc, r1
   1d5cc:	mov	r0, #5
   1d5d0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d5d4:	ldr	r3, [pc, #1456]	; 1db8c <__assert_fail@plt+0xbf04>
   1d5d8:	add	r3, pc, r3
   1d5dc:	add	r3, r3, fp
   1d5e0:	ldr	r2, [r3, #24]
   1d5e4:	cmp	r2, #0
   1d5e8:	bne	1d830 <__assert_fail@plt+0xbba8>
   1d5ec:	ldrb	r2, [r5, #2]
   1d5f0:	str	r2, [r3, #24]
   1d5f4:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d5f8:	ldr	r2, [pc, #1424]	; 1db90 <__assert_fail@plt+0xbf08>
   1d5fc:	ldr	r1, [pc, #1424]	; 1db94 <__assert_fail@plt+0xbf0c>
   1d600:	mov	r3, r9
   1d604:	add	r2, pc, r2
   1d608:	add	r1, pc, r1
   1d60c:	mov	r0, #5
   1d610:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d614:	ldr	r3, [pc, #1404]	; 1db98 <__assert_fail@plt+0xbf10>
   1d618:	add	r3, pc, r3
   1d61c:	add	r3, r3, fp
   1d620:	ldr	r2, [r3, #44]	; 0x2c
   1d624:	cmp	r2, #0
   1d628:	bne	1d7f4 <__assert_fail@plt+0xbb6c>
   1d62c:	ldrb	r2, [r5, #2]
   1d630:	str	r2, [r3, #44]	; 0x2c
   1d634:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d638:	cmp	r6, #0
   1d63c:	bge	1d7a0 <__assert_fail@plt+0xbb18>
   1d640:	ldr	r2, [pc, #1364]	; 1db9c <__assert_fail@plt+0xbf14>
   1d644:	ldr	r1, [pc, #1364]	; 1dba0 <__assert_fail@plt+0xbf18>
   1d648:	mov	r3, r9
   1d64c:	add	r2, pc, r2
   1d650:	add	r1, pc, r1
   1d654:	mov	r0, #5
   1d658:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d65c:	ldr	r3, [pc, #1344]	; 1dba4 <__assert_fail@plt+0xbf1c>
   1d660:	add	r3, pc, r3
   1d664:	add	r3, r3, fp
   1d668:	ldr	r2, [r3, #32]
   1d66c:	cmp	r2, #0
   1d670:	bne	1d86c <__assert_fail@plt+0xbbe4>
   1d674:	ldrb	r2, [r5, #2]
   1d678:	str	r2, [r3, #32]
   1d67c:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d680:	ldr	r2, [pc, #1312]	; 1dba8 <__assert_fail@plt+0xbf20>
   1d684:	ldr	r1, [pc, #1312]	; 1dbac <__assert_fail@plt+0xbf24>
   1d688:	mov	r3, r9
   1d68c:	add	r2, pc, r2
   1d690:	add	r1, pc, r1
   1d694:	mov	r0, #5
   1d698:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d69c:	ldr	r3, [pc, #1292]	; 1dbb0 <__assert_fail@plt+0xbf28>
   1d6a0:	add	r3, pc, r3
   1d6a4:	add	r3, r3, fp
   1d6a8:	ldr	r2, [r3, #52]	; 0x34
   1d6ac:	cmp	r2, #0
   1d6b0:	bne	1d808 <__assert_fail@plt+0xbb80>
   1d6b4:	ldrb	r2, [r5, #2]
   1d6b8:	str	r2, [r3, #52]	; 0x34
   1d6bc:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d6c0:	ldr	r2, [pc, #1260]	; 1dbb4 <__assert_fail@plt+0xbf2c>
   1d6c4:	ldr	r1, [pc, #1260]	; 1dbb8 <__assert_fail@plt+0xbf30>
   1d6c8:	mov	r3, r9
   1d6cc:	add	r2, pc, r2
   1d6d0:	add	r1, pc, r1
   1d6d4:	mov	r0, #5
   1d6d8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d6dc:	ldr	r3, [pc, #1240]	; 1dbbc <__assert_fail@plt+0xbf34>
   1d6e0:	add	r3, pc, r3
   1d6e4:	add	r3, r3, fp
   1d6e8:	ldr	r2, [r3, #28]
   1d6ec:	cmp	r2, #0
   1d6f0:	bne	1d844 <__assert_fail@plt+0xbbbc>
   1d6f4:	ldrb	r2, [r5, #2]
   1d6f8:	str	r2, [r3, #28]
   1d6fc:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d700:	ldr	r0, [sp, #76]	; 0x4c
   1d704:	ldr	r2, [sp, #12]
   1d708:	ldr	fp, [sp, #36]	; 0x24
   1d70c:	ldr	r3, [r0, #12]
   1d710:	add	fp, fp, #1
   1d714:	add	r3, r3, r2
   1d718:	ldr	r3, [r3, #4]
   1d71c:	cmp	r3, fp
   1d720:	bgt	1d3fc <__assert_fail@plt+0xb774>
   1d724:	ldr	r2, [sp, #16]
   1d728:	ldrb	r3, [r0, #4]
   1d72c:	add	r2, r2, #1
   1d730:	str	r2, [sp, #16]
   1d734:	cmp	r3, r2
   1d738:	bgt	1d3a0 <__assert_fail@plt+0xb718>
   1d73c:	bl	11958 <libusb_free_config_descriptor@plt>
   1d740:	ldr	r2, [sp, #32]
   1d744:	ldrb	r3, [sp, #97]	; 0x61
   1d748:	add	r2, r2, #1
   1d74c:	str	r2, [sp, #32]
   1d750:	cmp	r3, r2
   1d754:	bgt	1d370 <__assert_fail@plt+0xb6e8>
   1d758:	ldr	fp, [sp, #60]	; 0x3c
   1d75c:	ldr	r3, [sp, #48]	; 0x30
   1d760:	ldr	r1, [pc, #1112]	; 1dbc0 <__assert_fail@plt+0xbf38>
   1d764:	add	r3, r3, fp
   1d768:	add	r1, pc, r1
   1d76c:	add	r3, fp, r3, lsl #1
   1d770:	mov	r0, #1
   1d774:	str	r0, [r1, r3, lsl #2]
   1d778:	ldr	r1, [sp, #44]	; 0x2c
   1d77c:	ldr	r2, [sp, #24]
   1d780:	mov	r3, fp
   1d784:	str	fp, [r1]
   1d788:	ldr	r1, [pc, #1076]	; 1dbc4 <__assert_fail@plt+0xbf3c>
   1d78c:	mov	r0, #3
   1d790:	add	r1, pc, r1
   1d794:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d798:	mov	r4, #0
   1d79c:	b	1d124 <__assert_fail@plt+0xb49c>
   1d7a0:	ldr	r2, [pc, #1056]	; 1dbc8 <__assert_fail@plt+0xbf40>
   1d7a4:	ldr	r1, [pc, #1056]	; 1dbcc <__assert_fail@plt+0xbf44>
   1d7a8:	mov	r3, r9
   1d7ac:	add	r2, pc, r2
   1d7b0:	add	r1, pc, r1
   1d7b4:	mov	r0, #5
   1d7b8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d7bc:	ldr	r3, [pc, #1036]	; 1dbd0 <__assert_fail@plt+0xbf48>
   1d7c0:	add	r3, pc, r3
   1d7c4:	add	r3, r3, fp
   1d7c8:	ldr	r2, [r3, #36]	; 0x24
   1d7cc:	cmp	r2, #0
   1d7d0:	bne	1d858 <__assert_fail@plt+0xbbd0>
   1d7d4:	ldrb	r2, [r5, #2]
   1d7d8:	str	r2, [r3, #36]	; 0x24
   1d7dc:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d7e0:	ldr	r1, [pc, #1004]	; 1dbd4 <__assert_fail@plt+0xbf4c>
   1d7e4:	mov	r0, r4
   1d7e8:	add	r1, pc, r1
   1d7ec:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d7f0:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d7f4:	ldr	r1, [pc, #988]	; 1dbd8 <__assert_fail@plt+0xbf50>
   1d7f8:	mov	r0, r4
   1d7fc:	add	r1, pc, r1
   1d800:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d804:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d808:	ldr	r1, [pc, #972]	; 1dbdc <__assert_fail@plt+0xbf54>
   1d80c:	mov	r0, #3
   1d810:	add	r1, pc, r1
   1d814:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d818:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d81c:	ldr	r1, [pc, #956]	; 1dbe0 <__assert_fail@plt+0xbf58>
   1d820:	mov	r0, #3
   1d824:	add	r1, pc, r1
   1d828:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d82c:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d830:	ldr	r1, [pc, #940]	; 1dbe4 <__assert_fail@plt+0xbf5c>
   1d834:	mov	r0, #3
   1d838:	add	r1, pc, r1
   1d83c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d840:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d844:	ldr	r1, [pc, #924]	; 1dbe8 <__assert_fail@plt+0xbf60>
   1d848:	mov	r0, #3
   1d84c:	add	r1, pc, r1
   1d850:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d854:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d858:	ldr	r1, [pc, #908]	; 1dbec <__assert_fail@plt+0xbf64>
   1d85c:	mov	r0, #3
   1d860:	add	r1, pc, r1
   1d864:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d868:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d86c:	ldr	r1, [pc, #892]	; 1dbf0 <__assert_fail@plt+0xbf68>
   1d870:	mov	r0, #3
   1d874:	add	r1, pc, r1
   1d878:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d87c:	b	1d4f4 <__assert_fail@plt+0xb86c>
   1d880:	ldr	r1, [pc, #876]	; 1dbf4 <__assert_fail@plt+0xbf6c>
   1d884:	ldr	r2, [sp, #24]
   1d888:	add	r1, pc, r1
   1d88c:	mov	r0, #1
   1d890:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d894:	mov	r4, #4
   1d898:	b	1d124 <__assert_fail@plt+0xb49c>
   1d89c:	ldr	r1, [pc, #852]	; 1dbf8 <__assert_fail@plt+0xbf70>
   1d8a0:	str	r0, [sp]
   1d8a4:	ldr	r3, [sp, #24]
   1d8a8:	ldr	r2, [sp, #32]
   1d8ac:	add	r1, pc, r1
   1d8b0:	mov	r0, #1
   1d8b4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d8b8:	b	1d740 <__assert_fail@plt+0xbab8>
   1d8bc:	mov	r1, #1
   1d8c0:	bl	11afc <fcntl@plt>
   1d8c4:	subs	r2, r0, #0
   1d8c8:	blt	1d75c <__assert_fail@plt+0xbad4>
   1d8cc:	orr	r2, r2, #1
   1d8d0:	ldr	r0, [r6, #8]
   1d8d4:	mov	r1, #2
   1d8d8:	bl	11afc <fcntl@plt>
   1d8dc:	cmp	r0, #0
   1d8e0:	bge	1d75c <__assert_fail@plt+0xbad4>
   1d8e4:	bl	11acc <__errno_location@plt>
   1d8e8:	ldr	r0, [r0]
   1d8ec:	bl	11a18 <strerror@plt>
   1d8f0:	ldr	r1, [pc, #772]	; 1dbfc <__assert_fail@plt+0xbf74>
   1d8f4:	ldr	r2, [sp, #24]
   1d8f8:	add	r1, pc, r1
   1d8fc:	mov	r3, r0
   1d900:	mov	r0, #1
   1d904:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d908:	b	1d75c <__assert_fail@plt+0xbad4>
   1d90c:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1d910:	ldr	r1, [pc, #744]	; 1dc00 <__assert_fail@plt+0xbf78>
   1d914:	ldr	r2, [sp, #24]
   1d918:	add	r1, pc, r1
   1d91c:	mov	r3, r0
   1d920:	mov	r0, r4
   1d924:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d928:	cmn	r5, #3
   1d92c:	beq	1da4c <__assert_fail@plt+0xbdc4>
   1d930:	cmn	r5, #6
   1d934:	beq	1da34 <__assert_fail@plt+0xbdac>
   1d938:	cmn	r5, #11
   1d93c:	movne	r4, #4
   1d940:	moveq	r4, #10
   1d944:	b	1d124 <__assert_fail@plt+0xb49c>
   1d948:	ldr	r1, [pc, #692]	; 1dc04 <__assert_fail@plt+0xbf7c>
   1d94c:	mov	r0, r4
   1d950:	ldr	r2, [sp, #24]
   1d954:	add	r1, pc, r1
   1d958:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d95c:	mov	r4, #4
   1d960:	b	1d124 <__assert_fail@plt+0xb49c>
   1d964:	ldr	r1, [pc, #668]	; 1dc08 <__assert_fail@plt+0xbf80>
   1d968:	mov	r0, r4
   1d96c:	ldr	r2, [sp, #24]
   1d970:	add	r1, pc, r1
   1d974:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d978:	mov	r4, #4
   1d97c:	b	1d124 <__assert_fail@plt+0xb49c>
   1d980:	ldr	r1, [pc, #644]	; 1dc0c <__assert_fail@plt+0xbf84>
   1d984:	mov	r0, r4
   1d988:	ldr	r2, [sp, #24]
   1d98c:	add	r1, pc, r1
   1d990:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d994:	mov	r4, #4
   1d998:	b	1d124 <__assert_fail@plt+0xb49c>
   1d99c:	mov	r4, #11
   1d9a0:	b	1d21c <__assert_fail@plt+0xb594>
   1d9a4:	bl	11a18 <strerror@plt>
   1d9a8:	ldr	r1, [pc, #608]	; 1dc10 <__assert_fail@plt+0xbf88>
   1d9ac:	ldr	r2, [sp, #24]
   1d9b0:	add	r1, pc, r1
   1d9b4:	mov	r4, #4
   1d9b8:	mov	r3, r0
   1d9bc:	mov	r0, #5
   1d9c0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d9c4:	b	1d124 <__assert_fail@plt+0xb49c>
   1d9c8:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1d9cc:	ldr	r1, [pc, #576]	; 1dc14 <__assert_fail@plt+0xbf8c>
   1d9d0:	add	r1, pc, r1
   1d9d4:	mov	r2, r0
   1d9d8:	mov	r0, #1
   1d9dc:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1d9e0:	cmn	r5, #3
   1d9e4:	beq	1da7c <__assert_fail@plt+0xbdf4>
   1d9e8:	cmn	r5, #6
   1d9ec:	movne	r4, #4
   1d9f0:	beq	1da64 <__assert_fail@plt+0xbddc>
   1d9f4:	ldr	r3, [sp, #48]	; 0x30
   1d9f8:	add	r2, r3, fp
   1d9fc:	ldr	r3, [pc, #532]	; 1dc18 <__assert_fail@plt+0xbf90>
   1da00:	add	r2, fp, r2, lsl #1
   1da04:	add	r3, pc, r3
   1da08:	add	r3, r3, r2, lsl #2
   1da0c:	ldr	r0, [r3, #72]	; 0x48
   1da10:	bl	1191c <libusb_close@plt>
   1da14:	b	1d124 <__assert_fail@plt+0xb49c>
   1da18:	ldr	r1, [pc, #508]	; 1dc1c <__assert_fail@plt+0xbf94>
   1da1c:	mov	r0, r4
   1da20:	ldr	r2, [sp, #24]
   1da24:	add	r1, pc, r1
   1da28:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1da2c:	mov	r4, #4
   1da30:	b	1d124 <__assert_fail@plt+0xb49c>
   1da34:	ldr	r1, [pc, #484]	; 1dc20 <__assert_fail@plt+0xbf98>
   1da38:	mov	r0, r4
   1da3c:	add	r1, pc, r1
   1da40:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1da44:	mov	r4, #3
   1da48:	b	1d124 <__assert_fail@plt+0xb49c>
   1da4c:	ldr	r1, [pc, #464]	; 1dc24 <__assert_fail@plt+0xbf9c>
   1da50:	mov	r0, r4
   1da54:	add	r1, pc, r1
   1da58:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1da5c:	mov	r4, #11
   1da60:	b	1d124 <__assert_fail@plt+0xb49c>
   1da64:	ldr	r1, [pc, #444]	; 1dc28 <__assert_fail@plt+0xbfa0>
   1da68:	mov	r0, #1
   1da6c:	add	r1, pc, r1
   1da70:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1da74:	mov	r4, #3
   1da78:	b	1d9f4 <__assert_fail@plt+0xbd6c>
   1da7c:	ldr	r1, [pc, #424]	; 1dc2c <__assert_fail@plt+0xbfa4>
   1da80:	mov	r0, #1
   1da84:	add	r1, pc, r1
   1da88:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1da8c:	mov	r4, #11
   1da90:	b	1d9f4 <__assert_fail@plt+0xbd6c>
   1da94:	bl	118e0 <__stack_chk_fail@plt>
   1da98:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1da9c:	ldr	r1, [pc, #396]	; 1dc30 <__assert_fail@plt+0xbfa8>
   1daa0:	add	r1, pc, r1
   1daa4:	mov	r2, r0
   1daa8:	mov	r0, #1
   1daac:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dab0:	cmn	r4, #3
   1dab4:	beq	1dae8 <__assert_fail@plt+0xbe60>
   1dab8:	cmn	r4, #6
   1dabc:	movne	r4, #4
   1dac0:	beq	1db00 <__assert_fail@plt+0xbe78>
   1dac4:	ldr	r2, [pc, #360]	; 1dc34 <__assert_fail@plt+0xbfac>
   1dac8:	mov	r3, #76	; 0x4c
   1dacc:	add	r2, pc, r2
   1dad0:	mla	r3, r3, fp, r2
   1dad4:	ldr	r0, [r3, #72]	; 0x48
   1dad8:	bl	1191c <libusb_close@plt>
   1dadc:	ldr	r0, [sp, #72]	; 0x48
   1dae0:	bl	11958 <libusb_free_config_descriptor@plt>
   1dae4:	b	1d124 <__assert_fail@plt+0xb49c>
   1dae8:	ldr	r1, [pc, #328]	; 1dc38 <__assert_fail@plt+0xbfb0>
   1daec:	mov	r0, #1
   1daf0:	add	r1, pc, r1
   1daf4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1daf8:	mov	r4, #11
   1dafc:	b	1dac4 <__assert_fail@plt+0xbe3c>
   1db00:	ldr	r1, [pc, #308]	; 1dc3c <__assert_fail@plt+0xbfb4>
   1db04:	mov	r0, #3
   1db08:	add	r1, pc, r1
   1db0c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1db10:	b	1d304 <__assert_fail@plt+0xb67c>
   1db14:	andeq	sl, r1, r4, asr #27
   1db18:			; <UNDEFINED> instruction: 0x000001b0
   1db1c:	andeq	r9, r0, r4, asr r0
   1db20:	andeq	ip, r1, r0, ror #4
   1db24:	andeq	ip, r1, ip, asr r2
   1db28:	andeq	r9, r0, r0, asr r0
   1db2c:			; <UNDEFINED> instruction: 0x0001c1bc
   1db30:			; <UNDEFINED> instruction: 0x000097bc
   1db34:	andeq	r8, r0, r8, asr pc
   1db38:	andeq	r9, r0, r0, asr #14
   1db3c:	andeq	r9, r0, ip, lsl #13
   1db40:	muleq	r0, r8, r0
   1db44:	andeq	ip, r1, r8, lsr #32
   1db48:	strdeq	fp, [r1], -r8
   1db4c:	andeq	fp, r1, r4, asr #31
   1db50:	andeq	r9, r0, r8, lsl r1
   1db54:	andeq	r9, r0, ip, rrx
   1db58:	andeq	r9, r0, ip, ror r0
   1db5c:	muleq	r0, r0, r0
   1db60:	andeq	fp, r1, r4, asr #29
   1db64:			; <UNDEFINED> instruction: 0x000029bc
   1db68:	andeq	r9, r0, r8, lsr #11
   1db6c:	andeq	r9, r0, ip, lsr #32
   1db70:	andeq	r9, r0, r8, lsr r0
   1db74:	andeq	r9, r0, r4, lsr r0
   1db78:	andeq	r2, r0, r8, lsl #18
   1db7c:	andeq	r9, r0, r8, lsr r4
   1db80:	andeq	fp, r1, r4, lsl #27
   1db84:	andeq	r2, r0, r0, asr #17
   1db88:	andeq	r9, r0, r0, lsr r4
   1db8c:	andeq	fp, r1, ip, lsr sp
   1db90:	andeq	r3, r0, ip, ror #22
   1db94:			; <UNDEFINED> instruction: 0x000093b0
   1db98:	strdeq	fp, [r1], -ip
   1db9c:	andeq	r2, r0, r8, lsr r8
   1dba0:	andeq	r9, r0, r4, ror #7
   1dba4:			; <UNDEFINED> instruction: 0x0001bcb4
   1dba8:	andeq	r3, r0, r4, ror #21
   1dbac:	andeq	r9, r0, r4, ror #7
   1dbb0:	andeq	fp, r1, r4, ror ip
   1dbb4:	andeq	r3, r0, r4, lsr #21
   1dbb8:	andeq	r9, r0, r8, lsr #6
   1dbbc:	andeq	fp, r1, r4, lsr ip
   1dbc0:	andeq	fp, r1, ip, lsr #23
   1dbc4:	strdeq	r9, [r0], -r4
   1dbc8:	andeq	r3, r0, r4, asr #19
   1dbcc:	andeq	r9, r0, r4, lsl #5
   1dbd0:	andeq	fp, r1, r4, asr fp
   1dbd4:	ldrdeq	r8, [r0], -r0
   1dbd8:	andeq	r8, r0, r8, lsl lr
   1dbdc:	andeq	r9, r0, r4, asr #32
   1dbe0:	ldrdeq	r8, [r0], -r0
   1dbe4:	andeq	r8, r0, r8, lsr lr
   1dbe8:	andeq	r8, r0, r0, lsl #29
   1dbec:	andeq	r8, r0, r0, lsr pc
   1dbf0:			; <UNDEFINED> instruction: 0x00008eb8
   1dbf4:			; <UNDEFINED> instruction: 0x000088b0
   1dbf8:	andeq	r8, r0, r8, ror fp
   1dbfc:	andeq	r8, r0, r8, ror #31
   1dc00:	andeq	r8, r0, ip, ror r8
   1dc04:	andeq	r8, r0, r4, lsr r9
   1dc08:	ldrdeq	r8, [r0], -r0
   1dc0c:	andeq	r8, r0, ip, lsr #18
   1dc10:	andeq	r8, r0, r4, lsl #30
   1dc14:	ldrdeq	r8, [r0], -r4
   1dc18:	andeq	fp, r1, r0, lsl r9
   1dc1c:	andeq	r8, r0, r0, ror #17
   1dc20:	andeq	r8, r0, r0, asr #15
   1dc24:	andeq	r8, r0, ip, ror #14
   1dc28:	muleq	r0, r0, r7
   1dc2c:	andeq	r8, r0, ip, lsr r7
   1dc30:	andeq	r8, r0, r4, lsl #18
   1dc34:	andeq	fp, r1, r8, asr #16
   1dc38:	ldrdeq	r8, [r0], -r0
   1dc3c:	andeq	r8, r0, r4, asr #17
   1dc40:	ldr	r3, [pc, #8]	; 1dc50 <__assert_fail@plt+0xbfc8>
   1dc44:	add	r3, pc, r3
   1dc48:	str	r0, [r3]
   1dc4c:	bx	lr
   1dc50:	muleq	r1, r8, r5
   1dc54:	add	r2, r0, r0, lsl #3
   1dc58:	ldr	r3, [pc, #56]	; 1dc98 <__assert_fail@plt+0xc010>
   1dc5c:	add	r0, r0, r2, lsl #1
   1dc60:	add	r3, pc, r3
   1dc64:	add	r3, r3, r0, lsl #2
   1dc68:	push	{r4, lr}
   1dc6c:	ldr	r0, [r3, #72]	; 0x48
   1dc70:	bl	11b80 <libusb_reset_device@plt>
   1dc74:	cmp	r0, #0
   1dc78:	popeq	{r4, pc}
   1dc7c:	ldr	r1, [pc, #24]	; 1dc9c <__assert_fail@plt+0xc014>
   1dc80:	mov	r2, r0
   1dc84:	add	r1, pc, r1
   1dc88:	mov	r0, #1
   1dc8c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dc90:	mov	r0, #4
   1dc94:	pop	{r4, pc}
   1dc98:			; <UNDEFINED> instruction: 0x0001b6b4
   1dc9c:	andeq	r8, r0, ip, lsr #28
   1dca0:	ldr	r3, [pc, #628]	; 1df1c <__assert_fail@plt+0xc294>
   1dca4:	ldr	ip, [pc, #628]	; 1df20 <__assert_fail@plt+0xc298>
   1dca8:	add	r3, pc, r3
   1dcac:	push	{r4, r5, r6, r7, r8, r9, lr}
   1dcb0:	sub	sp, sp, #20
   1dcb4:	ldr	r6, [r3, ip]
   1dcb8:	subs	r5, r2, #0
   1dcbc:	ldr	r3, [r6]
   1dcc0:	str	r3, [sp, #12]
   1dcc4:	beq	1dea0 <__assert_fail@plt+0xc218>
   1dcc8:	ldr	r3, [pc, #596]	; 1df24 <__assert_fail@plt+0xc29c>
   1dccc:	mov	r4, r0
   1dcd0:	add	r3, pc, r3
   1dcd4:	ldr	r3, [r3, #4]
   1dcd8:	cmp	r3, r0
   1dcdc:	movgt	r3, #0
   1dce0:	movle	r3, #1
   1dce4:	orrs	r3, r3, r0, lsr #31
   1dce8:	bne	1ddbc <__assert_fail@plt+0xc134>
   1dcec:	mov	r7, r1
   1dcf0:	ldr	r1, [pc, #560]	; 1df28 <__assert_fail@plt+0xc2a0>
   1dcf4:	ldr	r2, [r5]
   1dcf8:	add	r1, pc, r1
   1dcfc:	mov	r0, #5
   1dd00:	lsl	r8, r4, #3
   1dd04:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dd08:	add	r2, r8, r4
   1dd0c:	ldr	r3, [pc, #536]	; 1df2c <__assert_fail@plt+0xc2a4>
   1dd10:	add	r2, r4, r2, lsl #1
   1dd14:	add	r3, pc, r3
   1dd18:	add	r3, r3, r2, lsl #2
   1dd1c:	ldr	r9, [r3, #4]
   1dd20:	cmp	r9, #0
   1dd24:	bne	1dd94 <__assert_fail@plt+0xc10c>
   1dd28:	ldr	r0, [r3, #8]
   1dd2c:	ldr	r2, [r5]
   1dd30:	mov	r1, r7
   1dd34:	bl	1182c <read@plt>
   1dd38:	subs	r9, r0, #0
   1dd3c:	blt	1de50 <__assert_fail@plt+0xc1c8>
   1dd40:	cmp	r9, #0
   1dd44:	beq	1deb8 <__assert_fail@plt+0xc230>
   1dd48:	ldr	r3, [pc, #480]	; 1df30 <__assert_fail@plt+0xc2a8>
   1dd4c:	add	r3, pc, r3
   1dd50:	ldr	r3, [r3, #12]
   1dd54:	cmp	r3, #10
   1dd58:	bgt	1de24 <__assert_fail@plt+0xc19c>
   1dd5c:	ldr	r1, [pc, #464]	; 1df34 <__assert_fail@plt+0xc2ac>
   1dd60:	mov	r0, #5
   1dd64:	mov	r3, r9
   1dd68:	ldr	r2, [r5]
   1dd6c:	add	r1, pc, r1
   1dd70:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dd74:	mov	r0, #0
   1dd78:	str	r9, [r5]
   1dd7c:	ldr	r2, [sp, #12]
   1dd80:	ldr	r3, [r6]
   1dd84:	cmp	r2, r3
   1dd88:	bne	1df18 <__assert_fail@plt+0xc290>
   1dd8c:	add	sp, sp, #20
   1dd90:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dd94:	cmp	r9, #1
   1dd98:	beq	1ddd4 <__assert_fail@plt+0xc14c>
   1dd9c:	cmp	r9, #2
   1dda0:	bne	1de34 <__assert_fail@plt+0xc1ac>
   1dda4:	ldr	r1, [pc, #396]	; 1df38 <__assert_fail@plt+0xc2b0>
   1dda8:	mov	r0, #1
   1ddac:	add	r1, pc, r1
   1ddb0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ddb4:	mov	r0, #1
   1ddb8:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1ddbc:	ldr	r1, [pc, #376]	; 1df3c <__assert_fail@plt+0xc2b4>
   1ddc0:	mov	r0, #1
   1ddc4:	add	r1, pc, r1
   1ddc8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ddcc:	mov	r0, #4
   1ddd0:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1ddd4:	ldr	r1, [r3, #24]
   1ddd8:	cmp	r1, #0
   1dddc:	beq	1ded4 <__assert_fail@plt+0xc24c>
   1dde0:	ldr	r2, [pc, #344]	; 1df40 <__assert_fail@plt+0xc2b8>
   1dde4:	ldr	r0, [r3, #72]	; 0x48
   1dde8:	add	r2, pc, r2
   1ddec:	uxtb	r1, r1
   1ddf0:	ldr	r3, [r2]
   1ddf4:	mov	r2, r7
   1ddf8:	str	r3, [sp, #4]
   1ddfc:	add	r3, sp, #8
   1de00:	str	r3, [sp]
   1de04:	ldr	r3, [r5]
   1de08:	bl	11af0 <libusb_bulk_transfer@plt>
   1de0c:	cmp	r0, #0
   1de10:	blt	1defc <__assert_fail@plt+0xc274>
   1de14:	ldr	r9, [sp, #8]
   1de18:	cmp	r9, #0
   1de1c:	bge	1dd40 <__assert_fail@plt+0xc0b8>
   1de20:	b	1de70 <__assert_fail@plt+0xc1e8>
   1de24:	mov	r0, r7
   1de28:	mov	r1, r9
   1de2c:	bl	1bbf4 <__assert_fail@plt+0x9f6c>
   1de30:	b	1dd5c <__assert_fail@plt+0xc0d4>
   1de34:	ldr	r1, [pc, #264]	; 1df44 <__assert_fail@plt+0xc2bc>
   1de38:	mov	r0, #1
   1de3c:	mov	r2, r9
   1de40:	add	r1, pc, r1
   1de44:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1de48:	mov	r0, #4
   1de4c:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1de50:	bl	11acc <__errno_location@plt>
   1de54:	ldr	r0, [r0]
   1de58:	bl	11a18 <strerror@plt>
   1de5c:	ldr	r1, [pc, #228]	; 1df48 <__assert_fail@plt+0xc2c0>
   1de60:	add	r1, pc, r1
   1de64:	mov	r2, r0
   1de68:	mov	r0, #1
   1de6c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1de70:	add	r8, r8, r4
   1de74:	ldr	r3, [pc, #208]	; 1df4c <__assert_fail@plt+0xc2c4>
   1de78:	add	r4, r4, r8, lsl #1
   1de7c:	add	r3, pc, r3
   1de80:	add	r4, r3, r4, lsl #2
   1de84:	ldr	r3, [r4, #4]
   1de88:	cmp	r3, #1
   1de8c:	beq	1deec <__assert_fail@plt+0xc264>
   1de90:	mov	r3, #0
   1de94:	str	r3, [r5]
   1de98:	mov	r0, #9
   1de9c:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1dea0:	ldr	r1, [pc, #168]	; 1df50 <__assert_fail@plt+0xc2c8>
   1dea4:	mov	r0, #1
   1dea8:	add	r1, pc, r1
   1deac:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1deb0:	mov	r0, #4
   1deb4:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1deb8:	ldr	r1, [pc, #148]	; 1df54 <__assert_fail@plt+0xc2cc>
   1debc:	mov	r0, #3
   1dec0:	add	r1, pc, r1
   1dec4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dec8:	str	r9, [r5]
   1decc:	mov	r0, #5
   1ded0:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1ded4:	ldr	r1, [pc, #124]	; 1df58 <__assert_fail@plt+0xc2d0>
   1ded8:	mov	r0, r9
   1dedc:	add	r1, pc, r1
   1dee0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dee4:	mov	r0, #4
   1dee8:	b	1dd7c <__assert_fail@plt+0xc0f4>
   1deec:	ldrb	r1, [r4, #24]
   1def0:	ldr	r0, [r4, #72]	; 0x48
   1def4:	bl	119dc <libusb_clear_halt@plt>
   1def8:	b	1de90 <__assert_fail@plt+0xc208>
   1defc:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1df00:	ldr	r1, [pc, #84]	; 1df5c <__assert_fail@plt+0xc2d4>
   1df04:	add	r1, pc, r1
   1df08:	mov	r2, r0
   1df0c:	mov	r0, r9
   1df10:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1df14:	b	1de70 <__assert_fail@plt+0xc1e8>
   1df18:	bl	118e0 <__stack_chk_fail@plt>
   1df1c:	andeq	sl, r1, ip, ror r1
   1df20:			; <UNDEFINED> instruction: 0x000001b0
   1df24:	andeq	fp, r1, r4, lsr r6
   1df28:	andeq	r8, r0, ip, lsr #28
   1df2c:	andeq	fp, r1, r0, lsl #12
   1df30:			; <UNDEFINED> instruction: 0x0001b5b8
   1df34:	ldrdeq	r8, [r0], -ip
   1df38:	andeq	r8, r0, ip, lsl #28
   1df3c:	andeq	r8, r0, ip, lsr #26
   1df40:	strdeq	sl, [r1], -r4
   1df44:	andeq	r8, r0, r8, lsr #27
   1df48:	strdeq	r8, [r0], -r4
   1df4c:	muleq	r1, r8, r4
   1df50:	andeq	r8, r0, r4, lsr #24
   1df54:	andeq	r8, r0, r0, ror #26
   1df58:	andeq	r8, r0, r0, lsr #25
   1df5c:	andeq	r8, r0, r0, asr ip
   1df60:	ldr	r3, [pc, #584]	; 1e1b0 <__assert_fail@plt+0xc528>
   1df64:	ldr	ip, [pc, #584]	; 1e1b4 <__assert_fail@plt+0xc52c>
   1df68:	add	r3, pc, r3
   1df6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1df70:	sub	sp, sp, #20
   1df74:	ldr	r6, [r3, ip]
   1df78:	subs	r5, r2, #0
   1df7c:	ldr	r3, [r6]
   1df80:	str	r3, [sp, #12]
   1df84:	beq	1e13c <__assert_fail@plt+0xc4b4>
   1df88:	ldr	r8, [pc, #552]	; 1e1b8 <__assert_fail@plt+0xc530>
   1df8c:	mov	r4, r0
   1df90:	add	r8, pc, r8
   1df94:	ldr	r3, [r8, #4]
   1df98:	cmp	r3, r0
   1df9c:	movgt	r3, #0
   1dfa0:	movle	r3, #1
   1dfa4:	orrs	r3, r3, r0, lsr #31
   1dfa8:	bne	1e020 <__assert_fail@plt+0xc398>
   1dfac:	mov	r7, r1
   1dfb0:	ldr	r1, [pc, #516]	; 1e1bc <__assert_fail@plt+0xc534>
   1dfb4:	ldr	r2, [r5]
   1dfb8:	add	r1, pc, r1
   1dfbc:	mov	r0, #5
   1dfc0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1dfc4:	ldr	r3, [r8, #12]
   1dfc8:	cmp	r3, #10
   1dfcc:	bgt	1e088 <__assert_fail@plt+0xc400>
   1dfd0:	lsl	r8, r4, #3
   1dfd4:	add	r2, r8, r4
   1dfd8:	ldr	r3, [pc, #480]	; 1e1c0 <__assert_fail@plt+0xc538>
   1dfdc:	add	r2, r4, r2, lsl #1
   1dfe0:	add	r3, pc, r3
   1dfe4:	add	r3, r3, r2, lsl #2
   1dfe8:	ldr	r9, [r3, #4]
   1dfec:	cmp	r9, #0
   1dff0:	beq	1e04c <__assert_fail@plt+0xc3c4>
   1dff4:	cmp	r9, #1
   1dff8:	beq	1e0b0 <__assert_fail@plt+0xc428>
   1dffc:	cmp	r9, #2
   1e000:	beq	1e098 <__assert_fail@plt+0xc410>
   1e004:	ldr	r1, [pc, #440]	; 1e1c4 <__assert_fail@plt+0xc53c>
   1e008:	mov	r0, #1
   1e00c:	mov	r2, r9
   1e010:	add	r1, pc, r1
   1e014:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e018:	mov	r0, #4
   1e01c:	b	1e034 <__assert_fail@plt+0xc3ac>
   1e020:	ldr	r1, [pc, #416]	; 1e1c8 <__assert_fail@plt+0xc540>
   1e024:	mov	r0, #1
   1e028:	add	r1, pc, r1
   1e02c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e030:	mov	r0, #4
   1e034:	ldr	r2, [sp, #12]
   1e038:	ldr	r3, [r6]
   1e03c:	cmp	r2, r3
   1e040:	bne	1e1ac <__assert_fail@plt+0xc524>
   1e044:	add	sp, sp, #20
   1e048:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e04c:	mov	r1, r7
   1e050:	ldr	r0, [r3, #8]
   1e054:	ldr	r2, [r5]
   1e058:	bl	11b44 <write@plt>
   1e05c:	subs	r7, r0, #0
   1e060:	blt	1e154 <__assert_fail@plt+0xc4cc>
   1e064:	ldr	r1, [pc, #352]	; 1e1cc <__assert_fail@plt+0xc544>
   1e068:	mov	r0, #5
   1e06c:	mov	r3, r7
   1e070:	ldr	r2, [r5]
   1e074:	add	r1, pc, r1
   1e078:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e07c:	str	r7, [r5]
   1e080:	mov	r0, #0
   1e084:	b	1e034 <__assert_fail@plt+0xc3ac>
   1e088:	ldr	r1, [r5]
   1e08c:	mov	r0, r7
   1e090:	bl	1bbf4 <__assert_fail@plt+0x9f6c>
   1e094:	b	1dfd0 <__assert_fail@plt+0xc348>
   1e098:	ldr	r1, [pc, #304]	; 1e1d0 <__assert_fail@plt+0xc548>
   1e09c:	mov	r0, #1
   1e0a0:	add	r1, pc, r1
   1e0a4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e0a8:	mov	r0, #1
   1e0ac:	b	1e034 <__assert_fail@plt+0xc3ac>
   1e0b0:	ldr	r1, [r3, #28]
   1e0b4:	cmp	r1, #0
   1e0b8:	beq	1e178 <__assert_fail@plt+0xc4f0>
   1e0bc:	ldr	ip, [pc, #272]	; 1e1d4 <__assert_fail@plt+0xc54c>
   1e0c0:	ldr	r0, [r3, #72]	; 0x48
   1e0c4:	add	ip, pc, ip
   1e0c8:	mov	r2, r7
   1e0cc:	ldr	r3, [ip]
   1e0d0:	uxtb	r1, r1
   1e0d4:	str	r3, [sp, #4]
   1e0d8:	add	r3, sp, #8
   1e0dc:	str	r3, [sp]
   1e0e0:	ldr	r3, [r5]
   1e0e4:	bl	11af0 <libusb_bulk_transfer@plt>
   1e0e8:	cmp	r0, #0
   1e0ec:	blt	1e190 <__assert_fail@plt+0xc508>
   1e0f0:	ldr	r7, [sp, #8]
   1e0f4:	cmp	r7, #0
   1e0f8:	bge	1e064 <__assert_fail@plt+0xc3dc>
   1e0fc:	add	r8, r8, r4
   1e100:	ldr	r3, [pc, #208]	; 1e1d8 <__assert_fail@plt+0xc550>
   1e104:	add	r4, r4, r8, lsl #1
   1e108:	add	r3, pc, r3
   1e10c:	add	r4, r3, r4, lsl #2
   1e110:	mov	r2, #0
   1e114:	ldr	r3, [r4, #4]
   1e118:	str	r2, [r5]
   1e11c:	cmp	r3, #1
   1e120:	movne	r0, #9
   1e124:	bne	1e034 <__assert_fail@plt+0xc3ac>
   1e128:	ldrb	r1, [r4, #28]
   1e12c:	ldr	r0, [r4, #72]	; 0x48
   1e130:	bl	119dc <libusb_clear_halt@plt>
   1e134:	mov	r0, #9
   1e138:	b	1e034 <__assert_fail@plt+0xc3ac>
   1e13c:	ldr	r1, [pc, #152]	; 1e1dc <__assert_fail@plt+0xc554>
   1e140:	mov	r0, #1
   1e144:	add	r1, pc, r1
   1e148:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e14c:	mov	r0, #4
   1e150:	b	1e034 <__assert_fail@plt+0xc3ac>
   1e154:	bl	11acc <__errno_location@plt>
   1e158:	ldr	r0, [r0]
   1e15c:	bl	11a18 <strerror@plt>
   1e160:	ldr	r1, [pc, #120]	; 1e1e0 <__assert_fail@plt+0xc558>
   1e164:	add	r1, pc, r1
   1e168:	mov	r2, r0
   1e16c:	mov	r0, #1
   1e170:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e174:	b	1e0fc <__assert_fail@plt+0xc474>
   1e178:	ldr	r1, [pc, #100]	; 1e1e4 <__assert_fail@plt+0xc55c>
   1e17c:	mov	r0, r9
   1e180:	add	r1, pc, r1
   1e184:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e188:	mov	r0, #4
   1e18c:	b	1e034 <__assert_fail@plt+0xc3ac>
   1e190:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1e194:	ldr	r1, [pc, #76]	; 1e1e8 <__assert_fail@plt+0xc560>
   1e198:	add	r1, pc, r1
   1e19c:	mov	r2, r0
   1e1a0:	mov	r0, r9
   1e1a4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e1a8:	b	1e0fc <__assert_fail@plt+0xc474>
   1e1ac:	bl	118e0 <__stack_chk_fail@plt>
   1e1b0:			; <UNDEFINED> instruction: 0x00019ebc
   1e1b4:			; <UNDEFINED> instruction: 0x000001b0
   1e1b8:	andeq	fp, r1, r4, ror r3
   1e1bc:	andeq	r8, r0, r4, lsr #26
   1e1c0:	andeq	fp, r1, r4, lsr r3
   1e1c4:	muleq	r0, r8, sp
   1e1c8:	andeq	r8, r0, ip, ror ip
   1e1cc:	andeq	r8, r0, ip, ror #26
   1e1d0:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1e1d4:	andeq	sl, r1, r8, lsl r1
   1e1d8:	andeq	fp, r1, ip, lsl #4
   1e1dc:	andeq	r8, r0, ip, lsr fp
   1e1e0:	andeq	r8, r0, ip, lsr #23
   1e1e4:			; <UNDEFINED> instruction: 0x00008bb8
   1e1e8:	andeq	r8, r0, r8, ror fp
   1e1ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1f0:	mov	r4, r0
   1e1f4:	ldr	lr, [pc, #600]	; 1e454 <__assert_fail@plt+0xc7cc>
   1e1f8:	ldr	fp, [pc, #600]	; 1e458 <__assert_fail@plt+0xc7d0>
   1e1fc:	ldr	ip, [pc, #600]	; 1e45c <__assert_fail@plt+0xc7d4>
   1e200:	add	lr, pc, lr
   1e204:	add	fp, pc, fp
   1e208:	ldr	r6, [lr, ip]
   1e20c:	ldr	ip, [fp, #4]
   1e210:	sub	sp, sp, #36	; 0x24
   1e214:	cmp	ip, r4
   1e218:	movgt	ip, #0
   1e21c:	movle	ip, #1
   1e220:	mov	r5, r1
   1e224:	orrs	r1, ip, r4, lsr #31
   1e228:	ldr	r1, [r6]
   1e22c:	mov	r0, lr
   1e230:	str	r1, [sp, #28]
   1e234:	ldr	r9, [sp, #80]	; 0x50
   1e238:	bne	1e34c <__assert_fail@plt+0xc6c4>
   1e23c:	mov	r8, r3
   1e240:	ldr	r3, [sp, #76]	; 0x4c
   1e244:	ldr	r1, [pc, #532]	; 1e460 <__assert_fail@plt+0xc7d8>
   1e248:	str	r3, [sp, #8]
   1e24c:	ldr	r3, [sp, #72]	; 0x48
   1e250:	mov	r7, r2
   1e254:	str	r3, [sp, #4]
   1e258:	str	r8, [sp]
   1e25c:	mov	r3, r2
   1e260:	add	r1, pc, r1
   1e264:	mov	r2, r5
   1e268:	mov	r0, #5
   1e26c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e270:	ands	sl, r5, #128	; 0x80
   1e274:	bne	1e284 <__assert_fail@plt+0xc5fc>
   1e278:	ldr	r3, [fp, #12]
   1e27c:	cmp	r3, #10
   1e280:	bgt	1e368 <__assert_fail@plt+0xc6e0>
   1e284:	add	r2, r4, r4, lsl #3
   1e288:	ldr	r3, [pc, #468]	; 1e464 <__assert_fail@plt+0xc7dc>
   1e28c:	add	r4, r4, r2, lsl #1
   1e290:	add	r3, pc, r3
   1e294:	add	r4, r3, r4, lsl #2
   1e298:	ldr	fp, [r4, #4]
   1e29c:	cmp	fp, #0
   1e2a0:	beq	1e2e8 <__assert_fail@plt+0xc660>
   1e2a4:	cmp	fp, #1
   1e2a8:	beq	1e3b8 <__assert_fail@plt+0xc730>
   1e2ac:	cmp	fp, #2
   1e2b0:	beq	1e3a0 <__assert_fail@plt+0xc718>
   1e2b4:	ldr	r1, [pc, #428]	; 1e468 <__assert_fail@plt+0xc7e0>
   1e2b8:	mov	r2, fp
   1e2bc:	add	r1, pc, r1
   1e2c0:	mov	r0, #1
   1e2c4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e2c8:	mov	fp, #1
   1e2cc:	ldr	r2, [sp, #28]
   1e2d0:	ldr	r3, [r6]
   1e2d4:	mov	r0, fp
   1e2d8:	cmp	r2, r3
   1e2dc:	bne	1e450 <__assert_fail@plt+0xc7c8>
   1e2e0:	add	sp, sp, #36	; 0x24
   1e2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2e8:	ldr	r3, [sp, #72]	; 0x48
   1e2ec:	ldr	r0, [r4, #8]
   1e2f0:	strh	r3, [sp, #20]
   1e2f4:	ldr	r3, [sp, #76]	; 0x4c
   1e2f8:	add	r2, sp, #16
   1e2fc:	ldr	r1, [pc, #360]	; 1e46c <__assert_fail@plt+0xc7e4>
   1e300:	strb	r5, [sp, #16]
   1e304:	strb	r7, [sp, #17]
   1e308:	strh	r8, [sp, #18]
   1e30c:	strh	r3, [sp, #22]
   1e310:	str	r9, [sp, #24]
   1e314:	bl	11970 <ioctl@plt>
   1e318:	cmp	r0, #0
   1e31c:	blt	1e378 <__assert_fail@plt+0xc6f0>
   1e320:	cmp	sl, #0
   1e324:	beq	1e2cc <__assert_fail@plt+0xc644>
   1e328:	ldr	r3, [pc, #320]	; 1e470 <__assert_fail@plt+0xc7e8>
   1e32c:	add	r3, pc, r3
   1e330:	ldr	r3, [r3, #12]
   1e334:	cmp	r3, #10
   1e338:	ble	1e2cc <__assert_fail@plt+0xc644>
   1e33c:	mov	r0, r9
   1e340:	ldr	r1, [sp, #76]	; 0x4c
   1e344:	bl	1bbf4 <__assert_fail@plt+0x9f6c>
   1e348:	b	1e2cc <__assert_fail@plt+0xc644>
   1e34c:	ldr	r1, [pc, #288]	; 1e474 <__assert_fail@plt+0xc7ec>
   1e350:	mov	r2, r4
   1e354:	add	r1, pc, r1
   1e358:	mov	r0, #1
   1e35c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e360:	mov	fp, #4
   1e364:	b	1e2cc <__assert_fail@plt+0xc644>
   1e368:	ldr	r1, [sp, #76]	; 0x4c
   1e36c:	mov	r0, r9
   1e370:	bl	1bbf4 <__assert_fail@plt+0x9f6c>
   1e374:	b	1e284 <__assert_fail@plt+0xc5fc>
   1e378:	bl	11acc <__errno_location@plt>
   1e37c:	mov	fp, #9
   1e380:	ldr	r0, [r0]
   1e384:	bl	11a18 <strerror@plt>
   1e388:	ldr	r1, [pc, #232]	; 1e478 <__assert_fail@plt+0xc7f0>
   1e38c:	add	r1, pc, r1
   1e390:	mov	r2, r0
   1e394:	mov	r0, #5
   1e398:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e39c:	b	1e2cc <__assert_fail@plt+0xc644>
   1e3a0:	ldr	r1, [pc, #212]	; 1e47c <__assert_fail@plt+0xc7f4>
   1e3a4:	mov	r0, #1
   1e3a8:	add	r1, pc, r1
   1e3ac:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e3b0:	mov	fp, #1
   1e3b4:	b	1e2cc <__assert_fail@plt+0xc644>
   1e3b8:	ldr	r2, [pc, #192]	; 1e480 <__assert_fail@plt+0xc7f8>
   1e3bc:	ldr	r0, [r4, #72]	; 0x48
   1e3c0:	add	r2, pc, r2
   1e3c4:	uxth	r3, r8
   1e3c8:	ldr	ip, [r2]
   1e3cc:	ldr	r2, [sp, #76]	; 0x4c
   1e3d0:	str	ip, [sp, #12]
   1e3d4:	ldr	ip, [sp, #72]	; 0x48
   1e3d8:	uxth	lr, r2
   1e3dc:	str	r9, [sp, #4]
   1e3e0:	uxth	ip, ip
   1e3e4:	uxtb	r2, r7
   1e3e8:	uxtb	r1, r5
   1e3ec:	str	lr, [sp, #8]
   1e3f0:	str	ip, [sp]
   1e3f4:	bl	11c1c <libusb_control_transfer@plt>
   1e3f8:	cmp	r0, #0
   1e3fc:	blt	1e430 <__assert_fail@plt+0xc7a8>
   1e400:	cmp	sl, #0
   1e404:	beq	1e428 <__assert_fail@plt+0xc7a0>
   1e408:	ldr	r3, [pc, #116]	; 1e484 <__assert_fail@plt+0xc7fc>
   1e40c:	add	r3, pc, r3
   1e410:	ldr	r3, [r3, #12]
   1e414:	cmp	r3, #10
   1e418:	ble	1e428 <__assert_fail@plt+0xc7a0>
   1e41c:	mov	r0, r9
   1e420:	ldr	r1, [sp, #76]	; 0x4c
   1e424:	bl	1bbf4 <__assert_fail@plt+0x9f6c>
   1e428:	mov	fp, #0
   1e42c:	b	1e2cc <__assert_fail@plt+0xc644>
   1e430:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1e434:	ldr	r1, [pc, #76]	; 1e488 <__assert_fail@plt+0xc800>
   1e438:	add	r1, pc, r1
   1e43c:	mov	r2, r0
   1e440:	mov	r0, fp
   1e444:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e448:	mov	fp, #4
   1e44c:	b	1e2cc <__assert_fail@plt+0xc644>
   1e450:	bl	118e0 <__stack_chk_fail@plt>
   1e454:	andeq	r9, r1, r4, lsr #24
   1e458:	andeq	fp, r1, r0, lsl #2
   1e45c:			; <UNDEFINED> instruction: 0x000001b0
   1e460:	strdeq	r8, [r0], -ip
   1e464:	andeq	fp, r1, r4, lsl #1
   1e468:	muleq	r0, r4, ip
   1e46c:	andgt	r5, r8, r2, lsr #10
   1e470:	ldrdeq	sl, [r1], -r8
   1e474:	andeq	r8, r0, r8, asr #21
   1e478:	andeq	r8, r0, r4, lsr #22
   1e47c:	andeq	r8, r0, r4, ror fp
   1e480:	andeq	r9, r1, ip, lsl lr
   1e484:	strdeq	sl, [r1], -r8
   1e488:			; <UNDEFINED> instruction: 0x00008ab4
   1e48c:	ldr	ip, [pc, #532]	; 1e6a8 <__assert_fail@plt+0xca20>
   1e490:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e494:	add	ip, pc, ip
   1e498:	ldr	lr, [pc, #524]	; 1e6ac <__assert_fail@plt+0xca24>
   1e49c:	sub	sp, sp, #20
   1e4a0:	subs	r6, r2, #0
   1e4a4:	ldr	r7, [ip, lr]
   1e4a8:	mov	r2, ip
   1e4ac:	ldr	r3, [r7]
   1e4b0:	str	r3, [sp, #12]
   1e4b4:	beq	1e62c <__assert_fail@plt+0xc9a4>
   1e4b8:	ldr	r9, [pc, #496]	; 1e6b0 <__assert_fail@plt+0xca28>
   1e4bc:	mov	r5, r0
   1e4c0:	add	r9, pc, r9
   1e4c4:	lsr	r0, r0, #31
   1e4c8:	ldr	r4, [r9, #4]
   1e4cc:	cmp	r4, r5
   1e4d0:	movgt	r4, r0
   1e4d4:	orrle	r4, r0, #1
   1e4d8:	cmp	r4, #0
   1e4dc:	bne	1e540 <__assert_fail@plt+0xc8b8>
   1e4e0:	mov	r8, r1
   1e4e4:	ldr	r1, [pc, #456]	; 1e6b4 <__assert_fail@plt+0xca2c>
   1e4e8:	ldr	r2, [r6]
   1e4ec:	add	r1, pc, r1
   1e4f0:	mov	r0, #5
   1e4f4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e4f8:	add	r3, r5, r5, lsl #3
   1e4fc:	ldr	r2, [pc, #436]	; 1e6b8 <__assert_fail@plt+0xca30>
   1e500:	add	r3, r5, r3, lsl #1
   1e504:	add	r2, pc, r2
   1e508:	add	r5, r2, r3, lsl #2
   1e50c:	ldr	r2, [r5, #4]
   1e510:	cmp	r2, #0
   1e514:	beq	1e614 <__assert_fail@plt+0xc98c>
   1e518:	cmp	r2, #1
   1e51c:	beq	1e56c <__assert_fail@plt+0xc8e4>
   1e520:	cmp	r2, #2
   1e524:	beq	1e5fc <__assert_fail@plt+0xc974>
   1e528:	ldr	r1, [pc, #396]	; 1e6bc <__assert_fail@plt+0xca34>
   1e52c:	mov	r0, #1
   1e530:	add	r1, pc, r1
   1e534:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e538:	mov	r0, #4
   1e53c:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e540:	ldr	r1, [pc, #376]	; 1e6c0 <__assert_fail@plt+0xca38>
   1e544:	mov	r0, #1
   1e548:	add	r1, pc, r1
   1e54c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e550:	mov	r0, #4
   1e554:	ldr	r2, [sp, #12]
   1e558:	ldr	r3, [r7]
   1e55c:	cmp	r2, r3
   1e560:	bne	1e6a4 <__assert_fail@plt+0xca1c>
   1e564:	add	sp, sp, #20
   1e568:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e56c:	ldr	r1, [r5, #40]	; 0x28
   1e570:	cmp	r1, #0
   1e574:	beq	1e670 <__assert_fail@plt+0xc9e8>
   1e578:	ldr	r3, [pc, #324]	; 1e6c4 <__assert_fail@plt+0xca3c>
   1e57c:	ldr	r0, [r5, #72]	; 0x48
   1e580:	add	r3, pc, r3
   1e584:	uxtb	r1, r1
   1e588:	ldr	r3, [r3]
   1e58c:	mov	r2, r8
   1e590:	str	r3, [sp, #4]
   1e594:	add	r3, sp, #8
   1e598:	str	r3, [sp]
   1e59c:	ldr	r3, [r6]
   1e5a0:	bl	11820 <libusb_interrupt_transfer@plt>
   1e5a4:	cmp	r0, #0
   1e5a8:	blt	1e644 <__assert_fail@plt+0xc9bc>
   1e5ac:	ldr	r5, [sp, #8]
   1e5b0:	cmp	r5, #0
   1e5b4:	blt	1e660 <__assert_fail@plt+0xc9d8>
   1e5b8:	beq	1e688 <__assert_fail@plt+0xca00>
   1e5bc:	ldr	r1, [pc, #260]	; 1e6c8 <__assert_fail@plt+0xca40>
   1e5c0:	mov	r3, r5
   1e5c4:	mov	r0, #5
   1e5c8:	ldr	r2, [r6]
   1e5cc:	add	r1, pc, r1
   1e5d0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e5d4:	ldr	r3, [r9, #12]
   1e5d8:	str	r5, [r6]
   1e5dc:	cmp	r3, #10
   1e5e0:	movle	r0, r4
   1e5e4:	ble	1e554 <__assert_fail@plt+0xc8cc>
   1e5e8:	mov	r0, r8
   1e5ec:	mov	r1, r5
   1e5f0:	bl	1bbf4 <__assert_fail@plt+0x9f6c>
   1e5f4:	mov	r0, r4
   1e5f8:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e5fc:	ldr	r1, [pc, #200]	; 1e6cc <__assert_fail@plt+0xca44>
   1e600:	mov	r0, #1
   1e604:	add	r1, pc, r1
   1e608:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e60c:	mov	r0, #1
   1e610:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e614:	ldr	r1, [pc, #180]	; 1e6d0 <__assert_fail@plt+0xca48>
   1e618:	mov	r0, #1
   1e61c:	add	r1, pc, r1
   1e620:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e624:	mov	r0, #4
   1e628:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e62c:	ldr	r1, [pc, #160]	; 1e6d4 <__assert_fail@plt+0xca4c>
   1e630:	mov	r0, #1
   1e634:	add	r1, pc, r1
   1e638:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e63c:	mov	r0, #4
   1e640:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e644:	ldr	r3, [r5, #4]
   1e648:	cmp	r3, #1
   1e64c:	cmneq	r0, #9
   1e650:	bne	1e660 <__assert_fail@plt+0xc9d8>
   1e654:	ldrb	r1, [r5, #40]	; 0x28
   1e658:	ldr	r0, [r5, #72]	; 0x48
   1e65c:	bl	119dc <libusb_clear_halt@plt>
   1e660:	mov	r3, #0
   1e664:	str	r3, [r6]
   1e668:	mov	r0, #9
   1e66c:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e670:	ldr	r1, [pc, #96]	; 1e6d8 <__assert_fail@plt+0xca50>
   1e674:	mov	r0, r2
   1e678:	add	r1, pc, r1
   1e67c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e680:	mov	r0, #4
   1e684:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e688:	ldr	r1, [pc, #76]	; 1e6dc <__assert_fail@plt+0xca54>
   1e68c:	mov	r0, #3
   1e690:	add	r1, pc, r1
   1e694:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e698:	str	r5, [r6]
   1e69c:	mov	r0, #5
   1e6a0:	b	1e554 <__assert_fail@plt+0xc8cc>
   1e6a4:	bl	118e0 <__stack_chk_fail@plt>
   1e6a8:	muleq	r1, r0, r9
   1e6ac:			; <UNDEFINED> instruction: 0x000001b0
   1e6b0:	andeq	sl, r1, r4, asr #28
   1e6b4:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1e6b8:	andeq	sl, r1, r0, lsl lr
   1e6bc:	andeq	r8, r0, r4, ror #21
   1e6c0:	andeq	r8, r0, r8, ror #20
   1e6c4:	andeq	r9, r1, ip, asr ip
   1e6c8:	andeq	r8, r0, r0, lsl fp
   1e6cc:	andeq	r8, r0, r0, lsl #21
   1e6d0:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1e6d4:	andeq	r8, r0, r8, asr r9
   1e6d8:	ldrdeq	r8, [r0], -r4
   1e6dc:	andeq	r8, r0, r4, lsr #20
   1e6e0:	ldr	r3, [pc, #212]	; 1e7bc <__assert_fail@plt+0xcb34>
   1e6e4:	push	{r4, r5, r6, lr}
   1e6e8:	add	r3, pc, r3
   1e6ec:	mov	r4, r0
   1e6f0:	ldr	r3, [r3, #4]
   1e6f4:	cmp	r3, r0
   1e6f8:	movgt	r3, #0
   1e6fc:	movle	r3, #1
   1e700:	orrs	r3, r3, r0, lsr #31
   1e704:	bne	1e764 <__assert_fail@plt+0xcadc>
   1e708:	mov	r2, r1
   1e70c:	mov	r5, r1
   1e710:	ldr	r1, [pc, #168]	; 1e7c0 <__assert_fail@plt+0xcb38>
   1e714:	mov	r0, #5
   1e718:	add	r1, pc, r1
   1e71c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e720:	add	r2, r4, r4, lsl #3
   1e724:	ldr	r3, [pc, #152]	; 1e7c4 <__assert_fail@plt+0xcb3c>
   1e728:	add	r4, r4, r2, lsl #1
   1e72c:	add	r3, pc, r3
   1e730:	add	r4, r3, r4, lsl #2
   1e734:	ldr	r6, [r4, #4]
   1e738:	cmp	r6, #0
   1e73c:	beq	1e75c <__assert_fail@plt+0xcad4>
   1e740:	cmp	r6, #1
   1e744:	bne	1e780 <__assert_fail@plt+0xcaf8>
   1e748:	mov	r1, r5
   1e74c:	ldr	r0, [r4, #72]	; 0x48
   1e750:	bl	11b5c <libusb_set_configuration@plt>
   1e754:	cmp	r0, #0
   1e758:	blt	1e79c <__assert_fail@plt+0xcb14>
   1e75c:	mov	r0, #0
   1e760:	pop	{r4, r5, r6, pc}
   1e764:	ldr	r1, [pc, #92]	; 1e7c8 <__assert_fail@plt+0xcb40>
   1e768:	mov	r2, r0
   1e76c:	add	r1, pc, r1
   1e770:	mov	r0, #1
   1e774:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e778:	mov	r0, #4
   1e77c:	pop	{r4, r5, r6, pc}
   1e780:	ldr	r1, [pc, #68]	; 1e7cc <__assert_fail@plt+0xcb44>
   1e784:	mov	r2, r6
   1e788:	add	r1, pc, r1
   1e78c:	mov	r0, #1
   1e790:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e794:	mov	r0, #1
   1e798:	pop	{r4, r5, r6, pc}
   1e79c:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1e7a0:	ldr	r1, [pc, #40]	; 1e7d0 <__assert_fail@plt+0xcb48>
   1e7a4:	add	r1, pc, r1
   1e7a8:	mov	r2, r0
   1e7ac:	mov	r0, r6
   1e7b0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e7b4:	mov	r0, #4
   1e7b8:	pop	{r4, r5, r6, pc}
   1e7bc:	andeq	sl, r1, ip, lsl ip
   1e7c0:	andeq	r8, r0, r0, asr #20
   1e7c4:	andeq	sl, r1, r8, ror #23
   1e7c8:	andeq	r8, r0, r8, lsr #19
   1e7cc:	andeq	r8, r0, r8, lsr sl
   1e7d0:	andeq	r8, r0, r8, ror #19
   1e7d4:	ldr	r3, [pc, #248]	; 1e8d4 <__assert_fail@plt+0xcc4c>
   1e7d8:	push	{r4, r5, r6, lr}
   1e7dc:	add	r3, pc, r3
   1e7e0:	ldr	r3, [r3, #4]
   1e7e4:	cmp	r3, r0
   1e7e8:	movgt	r3, #0
   1e7ec:	movle	r3, #1
   1e7f0:	orrs	r3, r3, r0, lsr #31
   1e7f4:	bne	1e860 <__assert_fail@plt+0xcbd8>
   1e7f8:	add	r3, r0, r0, lsl #3
   1e7fc:	ldr	r4, [pc, #212]	; 1e8d8 <__assert_fail@plt+0xcc50>
   1e800:	add	r3, r0, r3, lsl #1
   1e804:	add	r4, pc, r4
   1e808:	add	r4, r4, r3, lsl #2
   1e80c:	ldr	r3, [r4, #64]	; 0x40
   1e810:	cmp	r3, #0
   1e814:	bne	1e898 <__assert_fail@plt+0xcc10>
   1e818:	mov	r2, r1
   1e81c:	mov	r5, r1
   1e820:	ldr	r1, [pc, #180]	; 1e8dc <__assert_fail@plt+0xcc54>
   1e824:	mov	r0, #5
   1e828:	add	r1, pc, r1
   1e82c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e830:	ldr	r6, [r4, #4]
   1e834:	cmp	r6, #0
   1e838:	beq	1e858 <__assert_fail@plt+0xcbd0>
   1e83c:	cmp	r6, #1
   1e840:	bne	1e87c <__assert_fail@plt+0xcbf4>
   1e844:	mov	r1, r5
   1e848:	ldr	r0, [r4, #72]	; 0x48
   1e84c:	bl	11bec <libusb_claim_interface@plt>
   1e850:	cmp	r0, #0
   1e854:	blt	1e8b4 <__assert_fail@plt+0xcc2c>
   1e858:	mov	r0, #0
   1e85c:	pop	{r4, r5, r6, pc}
   1e860:	ldr	r1, [pc, #120]	; 1e8e0 <__assert_fail@plt+0xcc58>
   1e864:	mov	r2, r0
   1e868:	add	r1, pc, r1
   1e86c:	mov	r0, #1
   1e870:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e874:	mov	r0, #4
   1e878:	pop	{r4, r5, r6, pc}
   1e87c:	ldr	r1, [pc, #96]	; 1e8e4 <__assert_fail@plt+0xcc5c>
   1e880:	mov	r2, r6
   1e884:	add	r1, pc, r1
   1e888:	mov	r0, #1
   1e88c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e890:	mov	r0, #1
   1e894:	pop	{r4, r5, r6, pc}
   1e898:	ldr	r1, [pc, #72]	; 1e8e8 <__assert_fail@plt+0xcc60>
   1e89c:	mov	r2, r0
   1e8a0:	add	r1, pc, r1
   1e8a4:	mov	r0, #1
   1e8a8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e8ac:	mov	r0, #4
   1e8b0:	pop	{r4, r5, r6, pc}
   1e8b4:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1e8b8:	ldr	r1, [pc, #44]	; 1e8ec <__assert_fail@plt+0xcc64>
   1e8bc:	add	r1, pc, r1
   1e8c0:	mov	r2, r0
   1e8c4:	mov	r0, r6
   1e8c8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e8cc:	mov	r0, #4
   1e8d0:	pop	{r4, r5, r6, pc}
   1e8d4:	andeq	sl, r1, r8, lsr #22
   1e8d8:	andeq	sl, r1, r0, lsl fp
   1e8dc:	andeq	r8, r0, r0, asr sl
   1e8e0:	muleq	r0, r8, r9
   1e8e4:	andeq	r8, r0, ip, asr sl
   1e8e8:	andeq	r8, r0, r4, lsr #19
   1e8ec:	strdeq	r8, [r0], -r0
   1e8f0:	ldr	r3, [pc, #248]	; 1e9f0 <__assert_fail@plt+0xcd68>
   1e8f4:	push	{r4, r5, r6, lr}
   1e8f8:	add	r3, pc, r3
   1e8fc:	ldr	r3, [r3, #4]
   1e900:	cmp	r3, r0
   1e904:	movgt	r3, #0
   1e908:	movle	r3, #1
   1e90c:	orrs	r3, r3, r0, lsr #31
   1e910:	bne	1e97c <__assert_fail@plt+0xccf4>
   1e914:	add	r3, r0, r0, lsl #3
   1e918:	ldr	r4, [pc, #212]	; 1e9f4 <__assert_fail@plt+0xcd6c>
   1e91c:	add	r3, r0, r3, lsl #1
   1e920:	add	r4, pc, r4
   1e924:	add	r4, r4, r3, lsl #2
   1e928:	ldr	r3, [r4, #64]	; 0x40
   1e92c:	cmp	r3, #0
   1e930:	bne	1e9b4 <__assert_fail@plt+0xcd2c>
   1e934:	mov	r2, r1
   1e938:	mov	r5, r1
   1e93c:	ldr	r1, [pc, #180]	; 1e9f8 <__assert_fail@plt+0xcd70>
   1e940:	mov	r0, #5
   1e944:	add	r1, pc, r1
   1e948:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e94c:	ldr	r6, [r4, #4]
   1e950:	cmp	r6, #0
   1e954:	beq	1e974 <__assert_fail@plt+0xccec>
   1e958:	cmp	r6, #1
   1e95c:	bne	1e998 <__assert_fail@plt+0xcd10>
   1e960:	mov	r1, r5
   1e964:	ldr	r0, [r4, #72]	; 0x48
   1e968:	bl	118d4 <libusb_release_interface@plt>
   1e96c:	cmp	r0, #0
   1e970:	blt	1e9d0 <__assert_fail@plt+0xcd48>
   1e974:	mov	r0, #0
   1e978:	pop	{r4, r5, r6, pc}
   1e97c:	ldr	r1, [pc, #120]	; 1e9fc <__assert_fail@plt+0xcd74>
   1e980:	mov	r2, r0
   1e984:	add	r1, pc, r1
   1e988:	mov	r0, #1
   1e98c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e990:	mov	r0, #4
   1e994:	pop	{r4, r5, r6, pc}
   1e998:	ldr	r1, [pc, #96]	; 1ea00 <__assert_fail@plt+0xcd78>
   1e99c:	mov	r2, r6
   1e9a0:	add	r1, pc, r1
   1e9a4:	mov	r0, #1
   1e9a8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e9ac:	mov	r0, #1
   1e9b0:	pop	{r4, r5, r6, pc}
   1e9b4:	ldr	r1, [pc, #72]	; 1ea04 <__assert_fail@plt+0xcd7c>
   1e9b8:	mov	r2, r0
   1e9bc:	add	r1, pc, r1
   1e9c0:	mov	r0, #1
   1e9c4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e9c8:	mov	r0, #4
   1e9cc:	pop	{r4, r5, r6, pc}
   1e9d0:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1e9d4:	ldr	r1, [pc, #44]	; 1ea08 <__assert_fail@plt+0xcd80>
   1e9d8:	add	r1, pc, r1
   1e9dc:	mov	r2, r0
   1e9e0:	mov	r0, r6
   1e9e4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1e9e8:	mov	r0, #4
   1e9ec:	pop	{r4, r5, r6, pc}
   1e9f0:	andeq	sl, r1, ip, lsl #20
   1e9f4:	strdeq	sl, [r1], -r4
   1e9f8:	andeq	r8, r0, r8, asr sl
   1e9fc:	muleq	r0, ip, r9
   1ea00:	andeq	r8, r0, r4, ror #20
   1ea04:	andeq	r8, r0, r8, lsr #19
   1ea08:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1ea0c:	ldr	r3, [pc, #220]	; 1eaf0 <__assert_fail@plt+0xce68>
   1ea10:	push	{r4, r5, r6, lr}
   1ea14:	add	r3, pc, r3
   1ea18:	mov	r4, r0
   1ea1c:	ldr	r3, [r3, #4]
   1ea20:	cmp	r3, r0
   1ea24:	movgt	r3, #0
   1ea28:	movle	r3, #1
   1ea2c:	orrs	r3, r3, r0, lsr #31
   1ea30:	bne	1ea98 <__assert_fail@plt+0xce10>
   1ea34:	mov	r2, r1
   1ea38:	mov	r5, r1
   1ea3c:	ldr	r1, [pc, #176]	; 1eaf4 <__assert_fail@plt+0xce6c>
   1ea40:	mov	r0, #5
   1ea44:	add	r1, pc, r1
   1ea48:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ea4c:	add	r2, r4, r4, lsl #3
   1ea50:	ldr	r3, [pc, #160]	; 1eaf8 <__assert_fail@plt+0xce70>
   1ea54:	add	r4, r4, r2, lsl #1
   1ea58:	add	r3, pc, r3
   1ea5c:	add	r4, r3, r4, lsl #2
   1ea60:	ldr	r6, [r4, #4]
   1ea64:	str	r5, [r4, #60]	; 0x3c
   1ea68:	cmp	r6, #0
   1ea6c:	beq	1ea90 <__assert_fail@plt+0xce08>
   1ea70:	cmp	r6, #1
   1ea74:	bne	1eab4 <__assert_fail@plt+0xce2c>
   1ea78:	mov	r2, r5
   1ea7c:	ldr	r1, [r4, #56]	; 0x38
   1ea80:	ldr	r0, [r4, #72]	; 0x48
   1ea84:	bl	118b0 <libusb_set_interface_alt_setting@plt>
   1ea88:	cmp	r0, #0
   1ea8c:	blt	1ead0 <__assert_fail@plt+0xce48>
   1ea90:	mov	r0, #0
   1ea94:	pop	{r4, r5, r6, pc}
   1ea98:	ldr	r1, [pc, #92]	; 1eafc <__assert_fail@plt+0xce74>
   1ea9c:	mov	r2, r0
   1eaa0:	add	r1, pc, r1
   1eaa4:	mov	r0, #1
   1eaa8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eaac:	mov	r0, #4
   1eab0:	pop	{r4, r5, r6, pc}
   1eab4:	ldr	r1, [pc, #68]	; 1eb00 <__assert_fail@plt+0xce78>
   1eab8:	mov	r2, r6
   1eabc:	add	r1, pc, r1
   1eac0:	mov	r0, #1
   1eac4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eac8:	mov	r0, #1
   1eacc:	pop	{r4, r5, r6, pc}
   1ead0:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1ead4:	ldr	r1, [pc, #40]	; 1eb04 <__assert_fail@plt+0xce7c>
   1ead8:	add	r1, pc, r1
   1eadc:	mov	r2, r0
   1eae0:	mov	r0, r6
   1eae4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eae8:	mov	r0, #4
   1eaec:	pop	{r4, r5, r6, pc}
   1eaf0:	strdeq	sl, [r1], -r0
   1eaf4:	andeq	r8, r0, r4, asr #20
   1eaf8:			; <UNDEFINED> instruction: 0x0001a8bc
   1eafc:	andeq	r8, r0, r4, lsr #19
   1eb00:	andeq	r8, r0, ip, lsr #20
   1eb04:	ldrdeq	r8, [r0], -ip
   1eb08:	ldr	r1, [pc, #356]	; 1ec74 <__assert_fail@plt+0xcfec>
   1eb0c:	push	{r4, r5, r6, lr}
   1eb10:	add	r1, pc, r1
   1eb14:	mov	r4, r0
   1eb18:	mov	r0, #5
   1eb1c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eb20:	ldr	r0, [pc, #336]	; 1ec78 <__assert_fail@plt+0xcff0>
   1eb24:	add	r0, pc, r0
   1eb28:	bl	119e8 <getenv@plt>
   1eb2c:	subs	r5, r0, #0
   1eb30:	beq	1eb58 <__assert_fail@plt+0xced0>
   1eb34:	mov	r2, #10
   1eb38:	mov	r1, #0
   1eb3c:	bl	117fc <strtol@plt>
   1eb40:	ldr	r1, [pc, #308]	; 1ec7c <__assert_fail@plt+0xcff4>
   1eb44:	add	r1, pc, r1
   1eb48:	mov	r5, r0
   1eb4c:	mov	r2, r0
   1eb50:	mov	r0, #5
   1eb54:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eb58:	ldr	r1, [pc, #288]	; 1ec80 <__assert_fail@plt+0xcff8>
   1eb5c:	mov	r2, r4
   1eb60:	add	r1, pc, r1
   1eb64:	mov	r0, #5
   1eb68:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eb6c:	ldr	r3, [pc, #272]	; 1ec84 <__assert_fail@plt+0xcffc>
   1eb70:	add	r3, pc, r3
   1eb74:	ldr	r3, [r3, #4]
   1eb78:	cmp	r3, r4
   1eb7c:	movgt	r3, #0
   1eb80:	movle	r3, #1
   1eb84:	orrs	r3, r3, r4, lsr #31
   1eb88:	bne	1ec18 <__assert_fail@plt+0xcf90>
   1eb8c:	lsl	r6, r4, #3
   1eb90:	add	r3, r6, r4
   1eb94:	ldr	r2, [pc, #236]	; 1ec88 <__assert_fail@plt+0xd000>
   1eb98:	add	r3, r4, r3, lsl #1
   1eb9c:	add	r2, pc, r2
   1eba0:	lsl	r3, r3, #2
   1eba4:	add	r1, r2, r3
   1eba8:	ldr	r3, [r2, r3]
   1ebac:	cmp	r3, #0
   1ebb0:	beq	1ec2c <__assert_fail@plt+0xcfa4>
   1ebb4:	ldr	r3, [r1, #4]
   1ebb8:	cmp	r3, #0
   1ebbc:	beq	1ec54 <__assert_fail@plt+0xcfcc>
   1ebc0:	cmp	r3, #2
   1ebc4:	beq	1ec60 <__assert_fail@plt+0xcfd8>
   1ebc8:	cmp	r5, #0
   1ebcc:	bne	1ec44 <__assert_fail@plt+0xcfbc>
   1ebd0:	add	r3, r6, r4
   1ebd4:	ldr	r5, [pc, #176]	; 1ec8c <__assert_fail@plt+0xd004>
   1ebd8:	add	r3, r4, r3, lsl #1
   1ebdc:	add	r5, pc, r5
   1ebe0:	add	r5, r5, r3, lsl #2
   1ebe4:	ldr	r1, [r5, #56]	; 0x38
   1ebe8:	ldr	r0, [r5, #72]	; 0x48
   1ebec:	bl	118d4 <libusb_release_interface@plt>
   1ebf0:	ldr	r0, [r5, #72]	; 0x48
   1ebf4:	bl	1191c <libusb_close@plt>
   1ebf8:	add	r6, r6, r4
   1ebfc:	ldr	r3, [pc, #140]	; 1ec90 <__assert_fail@plt+0xd008>
   1ec00:	add	r4, r4, r6, lsl #1
   1ec04:	add	r3, pc, r3
   1ec08:	lsl	r4, r4, #2
   1ec0c:	mov	r2, #0
   1ec10:	str	r2, [r3, r4]
   1ec14:	pop	{r4, r5, r6, pc}
   1ec18:	ldr	r1, [pc, #116]	; 1ec94 <__assert_fail@plt+0xd00c>
   1ec1c:	mov	r0, #1
   1ec20:	add	r1, pc, r1
   1ec24:	pop	{r4, r5, r6, lr}
   1ec28:	b	1bb74 <__assert_fail@plt+0x9eec>
   1ec2c:	ldr	r1, [pc, #100]	; 1ec98 <__assert_fail@plt+0xd010>
   1ec30:	mov	r2, r4
   1ec34:	add	r1, pc, r1
   1ec38:	mov	r0, #1
   1ec3c:	pop	{r4, r5, r6, lr}
   1ec40:	b	1bb74 <__assert_fail@plt+0x9eec>
   1ec44:	ldr	r1, [r1, #60]	; 0x3c
   1ec48:	mov	r0, r4
   1ec4c:	bl	1ea0c <__assert_fail@plt+0xcd84>
   1ec50:	b	1ebd0 <__assert_fail@plt+0xcf48>
   1ec54:	ldr	r0, [r1, #8]
   1ec58:	bl	11c58 <close@plt>
   1ec5c:	b	1ebf8 <__assert_fail@plt+0xcf70>
   1ec60:	ldr	r1, [pc, #52]	; 1ec9c <__assert_fail@plt+0xd014>
   1ec64:	mov	r0, #1
   1ec68:	add	r1, pc, r1
   1ec6c:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ec70:	b	1ebf8 <__assert_fail@plt+0xcf70>
   1ec74:	andeq	r8, r0, r8, lsl sl
   1ec78:	andeq	r8, r0, ip, asr #20
   1ec7c:	andeq	r8, r0, r0, asr #20
   1ec80:	andeq	r8, r0, r8, asr #20
   1ec84:	muleq	r1, r4, r7
   1ec88:	andeq	sl, r1, r8, ror r7
   1ec8c:	andeq	sl, r1, r8, lsr r7
   1ec90:	andeq	sl, r1, r0, lsl r7
   1ec94:	andeq	r8, r0, ip, lsr #19
   1ec98:	andeq	r8, r0, r8, asr #19
   1ec9c:	ldrdeq	r8, [r0], -r0
   1eca0:	ldr	r1, [pc, #316]	; 1ede4 <__assert_fail@plt+0xd15c>
   1eca4:	push	{r4, r5, r6, lr}
   1eca8:	add	r1, pc, r1
   1ecac:	mov	r4, r0
   1ecb0:	mov	r0, #5
   1ecb4:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ecb8:	ldr	r0, [pc, #296]	; 1ede8 <__assert_fail@plt+0xd160>
   1ecbc:	lsr	r5, r4, #31
   1ecc0:	add	r0, pc, r0
   1ecc4:	bl	119e8 <getenv@plt>
   1ecc8:	cmp	r0, #0
   1eccc:	beq	1ed94 <__assert_fail@plt+0xd10c>
   1ecd0:	mov	r2, #10
   1ecd4:	mov	r1, #0
   1ecd8:	bl	117fc <strtol@plt>
   1ecdc:	ldr	r1, [pc, #264]	; 1edec <__assert_fail@plt+0xd164>
   1ece0:	add	r1, pc, r1
   1ece4:	mov	r2, r0
   1ece8:	mov	r6, r0
   1ecec:	mov	r0, #5
   1ecf0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ecf4:	ldr	r3, [pc, #244]	; 1edf0 <__assert_fail@plt+0xd168>
   1ecf8:	add	r3, pc, r3
   1ecfc:	ldr	r3, [r3, #4]
   1ed00:	cmp	r3, r4
   1ed04:	orrle	r5, r5, #1
   1ed08:	cmp	r5, #0
   1ed0c:	bne	1edb4 <__assert_fail@plt+0xd12c>
   1ed10:	cmp	r6, #0
   1ed14:	lsl	r5, r4, #3
   1ed18:	beq	1ed3c <__assert_fail@plt+0xd0b4>
   1ed1c:	add	r2, r5, r4
   1ed20:	ldr	r3, [pc, #204]	; 1edf4 <__assert_fail@plt+0xd16c>
   1ed24:	add	r2, r4, r2, lsl #1
   1ed28:	add	r3, pc, r3
   1ed2c:	add	r3, r3, r2, lsl #2
   1ed30:	mov	r0, r4
   1ed34:	ldr	r1, [r3, #60]	; 0x3c
   1ed38:	bl	1ea0c <__assert_fail@plt+0xcd84>
   1ed3c:	add	r5, r5, r4
   1ed40:	ldr	r3, [pc, #176]	; 1edf8 <__assert_fail@plt+0xd170>
   1ed44:	add	r4, r4, r5, lsl #1
   1ed48:	add	r3, pc, r3
   1ed4c:	add	r4, r3, r4, lsl #2
   1ed50:	ldrb	r1, [r4, #24]
   1ed54:	ldr	r0, [r4, #72]	; 0x48
   1ed58:	bl	119dc <libusb_clear_halt@plt>
   1ed5c:	subs	r2, r0, #0
   1ed60:	bne	1edcc <__assert_fail@plt+0xd144>
   1ed64:	ldrb	r1, [r4, #28]
   1ed68:	ldr	r0, [r4, #72]	; 0x48
   1ed6c:	bl	119dc <libusb_clear_halt@plt>
   1ed70:	cmp	r0, #0
   1ed74:	popeq	{r4, r5, r6, pc}
   1ed78:	ldr	r1, [pc, #124]	; 1edfc <__assert_fail@plt+0xd174>
   1ed7c:	mov	r2, r0
   1ed80:	add	r1, pc, r1
   1ed84:	mov	r0, #1
   1ed88:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ed8c:	mov	r0, #4
   1ed90:	pop	{r4, r5, r6, pc}
   1ed94:	ldr	r3, [pc, #100]	; 1ee00 <__assert_fail@plt+0xd178>
   1ed98:	add	r3, pc, r3
   1ed9c:	ldr	r3, [r3, #4]
   1eda0:	cmp	r4, r3
   1eda4:	orrge	r5, r5, #1
   1eda8:	cmp	r5, #0
   1edac:	lsleq	r5, r4, #3
   1edb0:	beq	1ed3c <__assert_fail@plt+0xd0b4>
   1edb4:	ldr	r1, [pc, #72]	; 1ee04 <__assert_fail@plt+0xd17c>
   1edb8:	mov	r0, #1
   1edbc:	add	r1, pc, r1
   1edc0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1edc4:	mov	r0, #4
   1edc8:	pop	{r4, r5, r6, pc}
   1edcc:	ldr	r1, [pc, #52]	; 1ee08 <__assert_fail@plt+0xd180>
   1edd0:	mov	r0, #1
   1edd4:	add	r1, pc, r1
   1edd8:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eddc:	mov	r0, #4
   1ede0:	pop	{r4, r5, r6, pc}
   1ede4:			; <UNDEFINED> instruction: 0x000089bc
   1ede8:			; <UNDEFINED> instruction: 0x000088b0
   1edec:	andeq	r8, r0, r8, lsl #20
   1edf0:	andeq	sl, r1, ip, lsl #12
   1edf4:	andeq	sl, r1, ip, ror #11
   1edf8:	andeq	sl, r1, ip, asr #11
   1edfc:			; <UNDEFINED> instruction: 0x000089b8
   1ee00:	andeq	sl, r1, ip, ror #10
   1ee04:	strdeq	r8, [r0], -r4
   1ee08:	andeq	r8, r0, ip, lsr r9
   1ee0c:	ldr	r3, [pc, #236]	; 1ef00 <__assert_fail@plt+0xd278>
   1ee10:	ldr	ip, [pc, #236]	; 1ef04 <__assert_fail@plt+0xd27c>
   1ee14:	ldr	r2, [pc, #236]	; 1ef08 <__assert_fail@plt+0xd280>
   1ee18:	add	r3, pc, r3
   1ee1c:	add	r2, pc, r2
   1ee20:	push	{r4, r5, r6, r7, lr}
   1ee24:	mov	r5, r0
   1ee28:	ldr	r6, [r3, ip]
   1ee2c:	ldr	r0, [r2, #4]
   1ee30:	lsr	r4, r5, #31
   1ee34:	sub	sp, sp, #28
   1ee38:	cmp	r0, r5
   1ee3c:	orrle	r4, r4, #1
   1ee40:	ldr	r2, [r6]
   1ee44:	cmp	r4, #0
   1ee48:	str	r2, [sp, #20]
   1ee4c:	bne	1eec0 <__assert_fail@plt+0xd238>
   1ee50:	mov	r7, r1
   1ee54:	ldr	r1, [pc, #176]	; 1ef0c <__assert_fail@plt+0xd284>
   1ee58:	mov	r0, #5
   1ee5c:	add	r1, pc, r1
   1ee60:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1ee64:	add	r2, r5, r5, lsl #3
   1ee68:	ldr	r3, [pc, #160]	; 1ef10 <__assert_fail@plt+0xd288>
   1ee6c:	add	r2, r5, r2, lsl #1
   1ee70:	add	r3, pc, r3
   1ee74:	add	r2, r3, r2, lsl #2
   1ee78:	mov	r1, sp
   1ee7c:	ldr	r0, [r2, #68]	; 0x44
   1ee80:	bl	11bbc <libusb_get_device_descriptor@plt>
   1ee84:	cmp	r0, #0
   1ee88:	blt	1eedc <__assert_fail@plt+0xd254>
   1ee8c:	ldrb	r3, [sp, #1]
   1ee90:	ldrh	r1, [sp, #2]
   1ee94:	ldrh	r2, [sp, #12]
   1ee98:	strb	r3, [r7]
   1ee9c:	ldr	r3, [sp, #4]
   1eea0:	mov	r0, r4
   1eea4:	stmib	r7, {r1, r2, r3}
   1eea8:	ldr	r2, [sp, #20]
   1eeac:	ldr	r3, [r6]
   1eeb0:	cmp	r2, r3
   1eeb4:	bne	1eefc <__assert_fail@plt+0xd274>
   1eeb8:	add	sp, sp, #28
   1eebc:	pop	{r4, r5, r6, r7, pc}
   1eec0:	ldr	r1, [pc, #76]	; 1ef14 <__assert_fail@plt+0xd28c>
   1eec4:	mov	r0, #1
   1eec8:	mov	r2, r5
   1eecc:	add	r1, pc, r1
   1eed0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eed4:	mov	r0, #4
   1eed8:	b	1eea8 <__assert_fail@plt+0xd220>
   1eedc:	bl	1b8e4 <__assert_fail@plt+0x9c5c>
   1eee0:	ldr	r1, [pc, #48]	; 1ef18 <__assert_fail@plt+0xd290>
   1eee4:	add	r1, pc, r1
   1eee8:	mov	r2, r0
   1eeec:	mov	r0, #1
   1eef0:	bl	1bb74 <__assert_fail@plt+0x9eec>
   1eef4:	mov	r0, #4
   1eef8:	b	1eea8 <__assert_fail@plt+0xd220>
   1eefc:	bl	118e0 <__stack_chk_fail@plt>
   1ef00:	andeq	r9, r1, ip
   1ef04:			; <UNDEFINED> instruction: 0x000001b0
   1ef08:	andeq	sl, r1, r8, ror #9
   1ef0c:	andeq	r8, r0, r4, asr #18
   1ef10:	andeq	sl, r1, r4, lsr #9
   1ef14:	muleq	r0, r4, r8
   1ef18:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1ef1c:	mov	r2, r0
   1ef20:	ldr	r0, [r0, #28]
   1ef24:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef28:	mov	r4, r1
   1ef2c:	cmp	r0, #3
   1ef30:	addls	pc, pc, r0, lsl #2
   1ef34:	b	1efe4 <__assert_fail@plt+0xd35c>
   1ef38:	b	1f084 <__assert_fail@plt+0xd3fc>
   1ef3c:	b	1efec <__assert_fail@plt+0xd364>
   1ef40:	b	1efa0 <__assert_fail@plt+0xd318>
   1ef44:	b	1ef48 <__assert_fail@plt+0xd2c0>
   1ef48:	mov	r0, r1
   1ef4c:	ldr	r7, [r2, #32]
   1ef50:	bl	11aa8 <strlen@plt>
   1ef54:	ldr	r5, [r7]
   1ef58:	cmp	r5, #0
   1ef5c:	mov	r8, r0
   1ef60:	beq	1ef98 <__assert_fail@plt+0xd310>
   1ef64:	mov	r2, r8
   1ef68:	mov	r1, r5
   1ef6c:	mov	r0, r4
   1ef70:	bl	11c40 <strncmp@plt>
   1ef74:	subs	r6, r0, #0
   1ef78:	mov	r0, r5
   1ef7c:	bne	1ef8c <__assert_fail@plt+0xd304>
   1ef80:	bl	11aa8 <strlen@plt>
   1ef84:	cmp	r0, r8
   1ef88:	beq	1efe4 <__assert_fail@plt+0xd35c>
   1ef8c:	ldr	r5, [r7, #4]!
   1ef90:	cmp	r5, #0
   1ef94:	bne	1ef64 <__assert_fail@plt+0xd2dc>
   1ef98:	mov	r0, #4
   1ef9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efa0:	ldr	r2, [r2, #32]
   1efa4:	ldr	r0, [r1]
   1efa8:	ldr	r3, [r2, #4]
   1efac:	cmp	r0, r3
   1efb0:	beq	1efe4 <__assert_fail@plt+0xd35c>
   1efb4:	ldr	ip, [r2]
   1efb8:	cmp	ip, #1
   1efbc:	ble	1ef98 <__assert_fail@plt+0xd310>
   1efc0:	add	r2, r2, #4
   1efc4:	mov	r3, #1
   1efc8:	b	1efd4 <__assert_fail@plt+0xd34c>
   1efcc:	cmp	r3, ip
   1efd0:	beq	1ef98 <__assert_fail@plt+0xd310>
   1efd4:	ldr	r1, [r2, #4]!
   1efd8:	add	r3, r3, #1
   1efdc:	cmp	r1, r0
   1efe0:	bne	1efcc <__assert_fail@plt+0xd344>
   1efe4:	mov	r0, #0
   1efe8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efec:	ldr	r3, [r2, #20]
   1eff0:	ldr	r2, [r2, #32]
   1eff4:	cmp	r3, #0
   1eff8:	ble	1f0dc <__assert_fail@plt+0xd454>
   1effc:	lsr	r0, r3, #2
   1f000:	cmp	r0, #0
   1f004:	mov	r9, r0
   1f008:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f00c:	ldr	r5, [r4]
   1f010:	ldr	r8, [r2]
   1f014:	cmp	r8, r5
   1f018:	bgt	1ef98 <__assert_fail@plt+0xd310>
   1f01c:	ldr	sl, [r2, #4]
   1f020:	cmp	r5, sl
   1f024:	bgt	1ef98 <__assert_fail@plt+0xd310>
   1f028:	ldr	r7, [r2, #8]
   1f02c:	mov	r6, #0
   1f030:	add	fp, r7, r7, lsr #31
   1f034:	asr	fp, fp, #1
   1f038:	b	1f050 <__assert_fail@plt+0xd3c8>
   1f03c:	ldr	r5, [r4, #4]!
   1f040:	cmp	r5, r8
   1f044:	blt	1ef98 <__assert_fail@plt+0xd310>
   1f048:	cmp	r5, sl
   1f04c:	bgt	1ef98 <__assert_fail@plt+0xd310>
   1f050:	sub	r0, r5, r8
   1f054:	cmp	r7, #0
   1f058:	mov	r1, r7
   1f05c:	add	r0, r0, fp
   1f060:	add	r6, r6, #1
   1f064:	beq	1f078 <__assert_fail@plt+0xd3f0>
   1f068:	bl	1f678 <__assert_fail@plt+0xd9f0>
   1f06c:	mla	r0, r7, r0, r8
   1f070:	cmp	r0, r5
   1f074:	bne	1ef98 <__assert_fail@plt+0xd310>
   1f078:	cmp	r6, r9
   1f07c:	blt	1f03c <__assert_fail@plt+0xd3b4>
   1f080:	b	1efe4 <__assert_fail@plt+0xd35c>
   1f084:	ldr	r3, [r2, #12]
   1f088:	cmp	r3, #0
   1f08c:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f090:	ldr	r0, [r2, #20]
   1f094:	cmp	r0, #0
   1f098:	ble	1f0e4 <__assert_fail@plt+0xd45c>
   1f09c:	lsr	r0, r0, #2
   1f0a0:	cmp	r0, #0
   1f0a4:	mov	r1, r0
   1f0a8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0ac:	ldr	r3, [r4]
   1f0b0:	cmp	r3, #1
   1f0b4:	bhi	1ef98 <__assert_fail@plt+0xd310>
   1f0b8:	mov	r3, #0
   1f0bc:	b	1f0cc <__assert_fail@plt+0xd444>
   1f0c0:	ldr	r2, [r4, #4]!
   1f0c4:	cmp	r2, #1
   1f0c8:	bhi	1ef98 <__assert_fail@plt+0xd310>
   1f0cc:	add	r3, r3, #1
   1f0d0:	cmp	r1, r3
   1f0d4:	bgt	1f0c0 <__assert_fail@plt+0xd438>
   1f0d8:	b	1efe4 <__assert_fail@plt+0xd35c>
   1f0dc:	mov	r9, #1
   1f0e0:	b	1f00c <__assert_fail@plt+0xd384>
   1f0e4:	mov	r1, #1
   1f0e8:	b	1f0ac <__assert_fail@plt+0xd424>
   1f0ec:	ldr	r3, [r0, #28]
   1f0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0f4:	mov	r4, r1
   1f0f8:	sub	sp, sp, #12
   1f0fc:	mov	r6, r2
   1f100:	cmp	r3, #3
   1f104:	addls	pc, pc, r3, lsl #2
   1f108:	b	1f134 <__assert_fail@plt+0xd4ac>
   1f10c:	b	1f11c <__assert_fail@plt+0xd494>
   1f110:	b	1f250 <__assert_fail@plt+0xd5c8>
   1f114:	b	1f1c4 <__assert_fail@plt+0xd53c>
   1f118:	b	1f140 <__assert_fail@plt+0xd4b8>
   1f11c:	ldr	r3, [r0, #12]
   1f120:	cmp	r3, #0
   1f124:	bne	1f134 <__assert_fail@plt+0xd4ac>
   1f128:	ldr	r3, [r1]
   1f12c:	cmp	r3, #1
   1f130:	bhi	1f1b8 <__assert_fail@plt+0xd530>
   1f134:	mov	r0, #0
   1f138:	add	sp, sp, #12
   1f13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f140:	ldr	r6, [r0, #32]
   1f144:	mov	r0, r1
   1f148:	str	r6, [sp, #4]
   1f14c:	bl	11aa8 <strlen@plt>
   1f150:	ldr	fp, [r6]
   1f154:	cmp	fp, #0
   1f158:	mov	r7, r0
   1f15c:	beq	1f1b8 <__assert_fail@plt+0xd530>
   1f160:	mov	r9, #0
   1f164:	mov	r5, r9
   1f168:	mvn	sl, #0
   1f16c:	mov	r2, r7
   1f170:	mov	r1, fp
   1f174:	mov	r0, r4
   1f178:	bl	11ad8 <strncasecmp@plt>
   1f17c:	subs	r8, r0, #0
   1f180:	mov	r0, fp
   1f184:	bne	1f1a0 <__assert_fail@plt+0xd518>
   1f188:	bl	11aa8 <strlen@plt>
   1f18c:	cmp	r0, r7
   1f190:	bcc	1f1a0 <__assert_fail@plt+0xd518>
   1f194:	mov	sl, r5
   1f198:	add	r9, r9, #1
   1f19c:	beq	1f358 <__assert_fail@plt+0xd6d0>
   1f1a0:	ldr	fp, [r6, #4]!
   1f1a4:	add	r5, r5, #1
   1f1a8:	cmp	fp, #0
   1f1ac:	bne	1f16c <__assert_fail@plt+0xd4e4>
   1f1b0:	cmp	r9, #1
   1f1b4:	beq	1f384 <__assert_fail@plt+0xd6fc>
   1f1b8:	mov	r0, #4
   1f1bc:	add	sp, sp, #12
   1f1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1c4:	ldr	r5, [r0, #32]
   1f1c8:	ldr	lr, [r1]
   1f1cc:	ldr	r1, [r5, #4]
   1f1d0:	ldr	r7, [r5]
   1f1d4:	sub	r1, lr, r1
   1f1d8:	cmp	r1, #0
   1f1dc:	rsblt	r1, r1, #0
   1f1e0:	cmp	r7, #0
   1f1e4:	ble	1f350 <__assert_fail@plt+0xd6c8>
   1f1e8:	mov	r0, #1
   1f1ec:	add	r7, r7, r0
   1f1f0:	mov	r2, r0
   1f1f4:	mov	ip, r5
   1f1f8:	ldr	r3, [ip, #4]!
   1f1fc:	sub	r3, lr, r3
   1f200:	cmp	r3, #0
   1f204:	rsblt	r3, r3, #0
   1f208:	cmp	r3, r1
   1f20c:	movlt	r0, r2
   1f210:	add	r2, r2, #1
   1f214:	movlt	r1, r3
   1f218:	cmp	r2, r7
   1f21c:	bne	1f1f8 <__assert_fail@plt+0xd570>
   1f220:	lsl	r0, r0, #2
   1f224:	ldr	r3, [r5, r0]
   1f228:	cmp	r3, lr
   1f22c:	beq	1f134 <__assert_fail@plt+0xd4ac>
   1f230:	cmp	r6, #0
   1f234:	str	r3, [r4]
   1f238:	beq	1f134 <__assert_fail@plt+0xd4ac>
   1f23c:	ldr	r3, [r6]
   1f240:	mov	r0, #0
   1f244:	orr	r3, r3, #1
   1f248:	str	r3, [r6]
   1f24c:	b	1f138 <__assert_fail@plt+0xd4b0>
   1f250:	ldr	r9, [r0, #20]
   1f254:	cmp	r9, #0
   1f258:	ble	1f338 <__assert_fail@plt+0xd6b0>
   1f25c:	lsrs	r9, r9, #2
   1f260:	beq	1f134 <__assert_fail@plt+0xd4ac>
   1f264:	ldr	r7, [r0, #32]
   1f268:	sub	r4, r4, #4
   1f26c:	mov	r8, #0
   1f270:	b	1f30c <__assert_fail@plt+0xd684>
   1f274:	cmp	r6, #0
   1f278:	str	r3, [r4]
   1f27c:	beq	1f340 <__assert_fail@plt+0xd6b8>
   1f280:	ldr	r3, [r6]
   1f284:	orr	r3, r3, #1
   1f288:	str	r3, [r6]
   1f28c:	ldr	r3, [r7, #4]
   1f290:	ldr	r2, [r4]
   1f294:	cmp	r2, r3
   1f298:	ble	1f2ac <__assert_fail@plt+0xd624>
   1f29c:	str	r3, [r4]
   1f2a0:	ldr	r3, [r6]
   1f2a4:	orr	r3, r3, #1
   1f2a8:	str	r3, [r6]
   1f2ac:	ldr	r5, [r7, #8]
   1f2b0:	cmp	r5, #0
   1f2b4:	beq	1f300 <__assert_fail@plt+0xd678>
   1f2b8:	ldr	sl, [r4]
   1f2bc:	ldr	fp, [r7]
   1f2c0:	add	r0, r5, r5, lsr #31
   1f2c4:	sub	r3, sl, fp
   1f2c8:	add	r0, r3, r0, asr #1
   1f2cc:	mov	r1, r5
   1f2d0:	bl	1f678 <__assert_fail@plt+0xd9f0>
   1f2d4:	ldr	r3, [r7, #4]
   1f2d8:	mla	r0, r5, r0, fp
   1f2dc:	cmp	r0, r3
   1f2e0:	movge	r0, r3
   1f2e4:	cmp	sl, r0
   1f2e8:	beq	1f300 <__assert_fail@plt+0xd678>
   1f2ec:	cmp	r6, #0
   1f2f0:	str	r0, [r4]
   1f2f4:	ldrne	r3, [r6]
   1f2f8:	orrne	r3, r3, #1
   1f2fc:	strne	r3, [r6]
   1f300:	add	r8, r8, #1
   1f304:	cmp	r9, r8
   1f308:	ble	1f134 <__assert_fail@plt+0xd4ac>
   1f30c:	ldr	r2, [r4, #4]!
   1f310:	ldr	r3, [r7]
   1f314:	cmp	r2, r3
   1f318:	blt	1f274 <__assert_fail@plt+0xd5ec>
   1f31c:	ldr	r3, [r7, #4]
   1f320:	cmp	r2, r3
   1f324:	ble	1f2ac <__assert_fail@plt+0xd624>
   1f328:	cmp	r6, #0
   1f32c:	str	r3, [r4]
   1f330:	bne	1f2a0 <__assert_fail@plt+0xd618>
   1f334:	b	1f2ac <__assert_fail@plt+0xd624>
   1f338:	mov	r9, #1
   1f33c:	b	1f264 <__assert_fail@plt+0xd5dc>
   1f340:	ldr	r2, [r7, #4]
   1f344:	cmp	r3, r2
   1f348:	strgt	r2, [r4]
   1f34c:	b	1f2ac <__assert_fail@plt+0xd624>
   1f350:	mov	r0, #4
   1f354:	b	1f224 <__assert_fail@plt+0xd59c>
   1f358:	mov	r1, fp
   1f35c:	mov	r0, r4
   1f360:	bl	117e4 <strcmp@plt>
   1f364:	cmp	r0, #0
   1f368:	beq	1f134 <__assert_fail@plt+0xd4ac>
   1f36c:	add	r2, r7, #1
   1f370:	mov	r1, fp
   1f374:	mov	r0, r4
   1f378:	bl	11880 <memcpy@plt>
   1f37c:	mov	r0, r8
   1f380:	b	1f138 <__assert_fail@plt+0xd4b0>
   1f384:	ldr	r3, [sp, #4]
   1f388:	mov	r0, r4
   1f38c:	ldr	r1, [r3, sl, lsl #2]
   1f390:	bl	119a0 <strcpy@plt>
   1f394:	mov	r0, fp
   1f398:	b	1f138 <__assert_fail@plt+0xd4b0>
   1f39c:	push	{r4, r5, r6, r7, r8, lr}
   1f3a0:	cmp	r1, r0
   1f3a4:	sub	sp, sp, #8
   1f3a8:	ldr	r1, [pc, #260]	; 1f4b4 <__assert_fail@plt+0xd82c>
   1f3ac:	ldr	r6, [sp, #32]
   1f3b0:	add	r1, pc, r1
   1f3b4:	bge	1f3c0 <__assert_fail@plt+0xd738>
   1f3b8:	add	sp, sp, #8
   1f3bc:	pop	{r4, r5, r6, r7, r8, pc}
   1f3c0:	mov	r5, r3
   1f3c4:	ldr	r3, [pc, #236]	; 1f4b8 <__assert_fail@plt+0xd830>
   1f3c8:	mov	r4, r2
   1f3cc:	ldr	r7, [r1, r3]
   1f3d0:	ldr	r0, [r7]
   1f3d4:	bl	11b50 <fileno@plt>
   1f3d8:	mov	r1, #49152	; 0xc000
   1f3dc:	bl	118ec <isfdtype@plt>
   1f3e0:	cmp	r0, #1
   1f3e4:	mov	r8, r0
   1f3e8:	beq	1f420 <__assert_fail@plt+0xd798>
   1f3ec:	ldr	r2, [pc, #200]	; 1f4bc <__assert_fail@plt+0xd834>
   1f3f0:	mov	r3, r4
   1f3f4:	add	r2, pc, r2
   1f3f8:	mov	r1, #1
   1f3fc:	ldr	r0, [r7]
   1f400:	bl	11b68 <__fprintf_chk@plt>
   1f404:	mov	r3, r6
   1f408:	mov	r2, r5
   1f40c:	ldr	r0, [r7]
   1f410:	mov	r1, #1
   1f414:	add	sp, sp, #8
   1f418:	pop	{r4, r5, r6, r7, r8, lr}
   1f41c:	b	11a30 <__vfprintf_chk@plt>
   1f420:	mov	r0, r4
   1f424:	bl	11aa8 <strlen@plt>
   1f428:	mov	r7, r0
   1f42c:	mov	r0, r5
   1f430:	bl	11aa8 <strlen@plt>
   1f434:	add	r0, r7, r0
   1f438:	add	r0, r0, #4
   1f43c:	bl	11a00 <malloc@plt>
   1f440:	subs	r7, r0, #0
   1f444:	beq	1f484 <__assert_fail@plt+0xd7fc>
   1f448:	ldr	r3, [pc, #112]	; 1f4c0 <__assert_fail@plt+0xd838>
   1f44c:	mov	r1, r8
   1f450:	strd	r4, [sp]
   1f454:	add	r3, pc, r3
   1f458:	mvn	r2, #0
   1f45c:	bl	11ae4 <__sprintf_chk@plt>
   1f460:	mov	r3, r6
   1f464:	mov	r2, r7
   1f468:	mov	r1, r8
   1f46c:	mov	r0, #7
   1f470:	bl	11994 <__vsyslog_chk@plt>
   1f474:	mov	r0, r7
   1f478:	add	sp, sp, #8
   1f47c:	pop	{r4, r5, r6, r7, r8, lr}
   1f480:	b	11850 <free@plt>
   1f484:	ldr	r2, [pc, #56]	; 1f4c4 <__assert_fail@plt+0xd83c>
   1f488:	mov	r1, r8
   1f48c:	add	r2, pc, r2
   1f490:	mov	r0, #7
   1f494:	bl	11b8c <__syslog_chk@plt>
   1f498:	mov	r3, r6
   1f49c:	mov	r2, r5
   1f4a0:	mov	r1, r8
   1f4a4:	mov	r0, #7
   1f4a8:	add	sp, sp, #8
   1f4ac:	pop	{r4, r5, r6, r7, r8, lr}
   1f4b0:	b	11994 <__vsyslog_chk@plt>
   1f4b4:	andeq	r8, r1, r4, ror sl
   1f4b8:			; <UNDEFINED> instruction: 0x000001b4
   1f4bc:	andeq	r8, r0, ip, lsl r5
   1f4c0:			; <UNDEFINED> instruction: 0x000084b4
   1f4c4:	andeq	r8, r0, ip, asr r4
   1f4c8:	push	{r1, r2, r3}
   1f4cc:	ldr	r2, [pc, #108]	; 1f540 <__assert_fail@plt+0xd8b8>
   1f4d0:	ldr	r3, [pc, #108]	; 1f544 <__assert_fail@plt+0xd8bc>
   1f4d4:	add	r2, pc, r2
   1f4d8:	push	{r4, lr}
   1f4dc:	sub	sp, sp, #20
   1f4e0:	ldr	r4, [r2, r3]
   1f4e4:	ldr	r1, [pc, #92]	; 1f548 <__assert_fail@plt+0xd8c0>
   1f4e8:	add	r0, sp, #32
   1f4ec:	ldr	ip, [r4]
   1f4f0:	str	r0, [sp, #8]
   1f4f4:	str	ip, [sp, #12]
   1f4f8:	ldr	r1, [r2, r1]
   1f4fc:	ldr	r3, [pc, #72]	; 1f54c <__assert_fail@plt+0xd8c4>
   1f500:	ldr	r2, [pc, #72]	; 1f550 <__assert_fail@plt+0xd8c8>
   1f504:	str	r0, [sp]
   1f508:	add	r3, pc, r3
   1f50c:	add	r2, pc, r2
   1f510:	ldr	r1, [r1]
   1f514:	mov	r0, #0
   1f518:	bl	1f39c <__assert_fail@plt+0xd714>
   1f51c:	ldr	r2, [sp, #12]
   1f520:	ldr	r3, [r4]
   1f524:	cmp	r2, r3
   1f528:	bne	1f53c <__assert_fail@plt+0xd8b4>
   1f52c:	add	sp, sp, #20
   1f530:	pop	{r4, lr}
   1f534:	add	sp, sp, #12
   1f538:	bx	lr
   1f53c:	bl	118e0 <__stack_chk_fail@plt>
   1f540:	andeq	r8, r1, r0, asr r9
   1f544:			; <UNDEFINED> instruction: 0x000001b0
   1f548:	andeq	r0, r0, ip, lsr #3
   1f54c:	andeq	r8, r0, r0, lsl r4
   1f550:	andeq	r8, r0, r0, lsr r4
   1f554:	ldr	ip, [pc, #268]	; 1f668 <__assert_fail@plt+0xd9e0>
   1f558:	ldr	r3, [pc, #268]	; 1f66c <__assert_fail@plt+0xd9e4>
   1f55c:	ldr	r2, [pc, #268]	; 1f670 <__assert_fail@plt+0xd9e8>
   1f560:	add	ip, pc, ip
   1f564:	add	r3, pc, r3
   1f568:	push	{r4, r5, r6, r7, lr}
   1f56c:	mov	r4, r0
   1f570:	ldr	r5, [ip, r2]
   1f574:	mov	r6, r1
   1f578:	ldm	r3, {r0, r1, r2}
   1f57c:	sub	sp, sp, #268	; 0x10c
   1f580:	add	r7, sp, #4
   1f584:	ldr	r3, [r5]
   1f588:	stm	r7, {r0, r1, r2}
   1f58c:	mov	r2, #244	; 0xf4
   1f590:	mov	r1, #0
   1f594:	add	r0, sp, #16
   1f598:	str	r3, [sp, #260]	; 0x104
   1f59c:	bl	11b08 <memset@plt>
   1f5a0:	mov	r3, #0
   1f5a4:	str	r3, [r6]
   1f5a8:	ldrb	r3, [r4]
   1f5ac:	cmp	r3, #0
   1f5b0:	beq	1f65c <__assert_fail@plt+0xd9d4>
   1f5b4:	add	r1, sp, #14
   1f5b8:	add	lr, r4, #244	; 0xf4
   1f5bc:	mov	r2, r4
   1f5c0:	rsb	ip, r4, #12
   1f5c4:	b	1f5d0 <__assert_fail@plt+0xd948>
   1f5c8:	cmp	r2, lr
   1f5cc:	beq	1f654 <__assert_fail@plt+0xd9cc>
   1f5d0:	sub	r0, r3, #97	; 0x61
   1f5d4:	cmp	r0, #25
   1f5d8:	subls	r3, r3, #32
   1f5dc:	add	r0, ip, r2
   1f5e0:	uxtbls	r3, r3
   1f5e4:	strb	r3, [r1, #1]!
   1f5e8:	ldrb	r3, [r2, #1]!
   1f5ec:	cmp	r3, #0
   1f5f0:	bne	1f5c8 <__assert_fail@plt+0xd940>
   1f5f4:	add	r3, sp, #264	; 0x108
   1f5f8:	add	r3, r3, r0
   1f5fc:	mov	r0, r7
   1f600:	mov	r7, #0
   1f604:	strb	r7, [r3, #-260]	; 0xfffffefc
   1f608:	bl	119e8 <getenv@plt>
   1f60c:	cmp	r0, r7
   1f610:	beq	1f63c <__assert_fail@plt+0xd9b4>
   1f614:	mov	r2, #10
   1f618:	mov	r1, r7
   1f61c:	bl	117fc <strtol@plt>
   1f620:	ldr	r1, [pc, #76]	; 1f674 <__assert_fail@plt+0xd9ec>
   1f624:	mov	r2, r4
   1f628:	add	r1, pc, r1
   1f62c:	mov	r3, r0
   1f630:	str	r0, [r6]
   1f634:	mov	r0, r7
   1f638:	bl	1f4c8 <__assert_fail@plt+0xd840>
   1f63c:	ldr	r2, [sp, #260]	; 0x104
   1f640:	ldr	r3, [r5]
   1f644:	cmp	r2, r3
   1f648:	bne	1f664 <__assert_fail@plt+0xd9dc>
   1f64c:	add	sp, sp, #268	; 0x10c
   1f650:	pop	{r4, r5, r6, r7, pc}
   1f654:	mov	r0, #255	; 0xff
   1f658:	b	1f5f4 <__assert_fail@plt+0xd96c>
   1f65c:	mov	r0, #11
   1f660:	b	1f5f4 <__assert_fail@plt+0xd96c>
   1f664:	bl	118e0 <__stack_chk_fail@plt>
   1f668:	andeq	r8, r1, r4, asr #17
   1f66c:	andeq	r8, r0, r4, lsl #5
   1f670:			; <UNDEFINED> instruction: 0x000001b0
   1f674:	strdeq	r8, [r0], -r0
   1f678:	subs	r2, r1, #1
   1f67c:	bxeq	lr
   1f680:	bcc	1f858 <__assert_fail@plt+0xdbd0>
   1f684:	cmp	r0, r1
   1f688:	bls	1f83c <__assert_fail@plt+0xdbb4>
   1f68c:	tst	r1, r2
   1f690:	beq	1f848 <__assert_fail@plt+0xdbc0>
   1f694:	clz	r3, r0
   1f698:	clz	r2, r1
   1f69c:	sub	r3, r2, r3
   1f6a0:	rsbs	r3, r3, #31
   1f6a4:	addne	r3, r3, r3, lsl #1
   1f6a8:	mov	r2, #0
   1f6ac:	addne	pc, pc, r3, lsl #2
   1f6b0:	nop			; (mov r0, r0)
   1f6b4:	cmp	r0, r1, lsl #31
   1f6b8:	adc	r2, r2, r2
   1f6bc:	subcs	r0, r0, r1, lsl #31
   1f6c0:	cmp	r0, r1, lsl #30
   1f6c4:	adc	r2, r2, r2
   1f6c8:	subcs	r0, r0, r1, lsl #30
   1f6cc:	cmp	r0, r1, lsl #29
   1f6d0:	adc	r2, r2, r2
   1f6d4:	subcs	r0, r0, r1, lsl #29
   1f6d8:	cmp	r0, r1, lsl #28
   1f6dc:	adc	r2, r2, r2
   1f6e0:	subcs	r0, r0, r1, lsl #28
   1f6e4:	cmp	r0, r1, lsl #27
   1f6e8:	adc	r2, r2, r2
   1f6ec:	subcs	r0, r0, r1, lsl #27
   1f6f0:	cmp	r0, r1, lsl #26
   1f6f4:	adc	r2, r2, r2
   1f6f8:	subcs	r0, r0, r1, lsl #26
   1f6fc:	cmp	r0, r1, lsl #25
   1f700:	adc	r2, r2, r2
   1f704:	subcs	r0, r0, r1, lsl #25
   1f708:	cmp	r0, r1, lsl #24
   1f70c:	adc	r2, r2, r2
   1f710:	subcs	r0, r0, r1, lsl #24
   1f714:	cmp	r0, r1, lsl #23
   1f718:	adc	r2, r2, r2
   1f71c:	subcs	r0, r0, r1, lsl #23
   1f720:	cmp	r0, r1, lsl #22
   1f724:	adc	r2, r2, r2
   1f728:	subcs	r0, r0, r1, lsl #22
   1f72c:	cmp	r0, r1, lsl #21
   1f730:	adc	r2, r2, r2
   1f734:	subcs	r0, r0, r1, lsl #21
   1f738:	cmp	r0, r1, lsl #20
   1f73c:	adc	r2, r2, r2
   1f740:	subcs	r0, r0, r1, lsl #20
   1f744:	cmp	r0, r1, lsl #19
   1f748:	adc	r2, r2, r2
   1f74c:	subcs	r0, r0, r1, lsl #19
   1f750:	cmp	r0, r1, lsl #18
   1f754:	adc	r2, r2, r2
   1f758:	subcs	r0, r0, r1, lsl #18
   1f75c:	cmp	r0, r1, lsl #17
   1f760:	adc	r2, r2, r2
   1f764:	subcs	r0, r0, r1, lsl #17
   1f768:	cmp	r0, r1, lsl #16
   1f76c:	adc	r2, r2, r2
   1f770:	subcs	r0, r0, r1, lsl #16
   1f774:	cmp	r0, r1, lsl #15
   1f778:	adc	r2, r2, r2
   1f77c:	subcs	r0, r0, r1, lsl #15
   1f780:	cmp	r0, r1, lsl #14
   1f784:	adc	r2, r2, r2
   1f788:	subcs	r0, r0, r1, lsl #14
   1f78c:	cmp	r0, r1, lsl #13
   1f790:	adc	r2, r2, r2
   1f794:	subcs	r0, r0, r1, lsl #13
   1f798:	cmp	r0, r1, lsl #12
   1f79c:	adc	r2, r2, r2
   1f7a0:	subcs	r0, r0, r1, lsl #12
   1f7a4:	cmp	r0, r1, lsl #11
   1f7a8:	adc	r2, r2, r2
   1f7ac:	subcs	r0, r0, r1, lsl #11
   1f7b0:	cmp	r0, r1, lsl #10
   1f7b4:	adc	r2, r2, r2
   1f7b8:	subcs	r0, r0, r1, lsl #10
   1f7bc:	cmp	r0, r1, lsl #9
   1f7c0:	adc	r2, r2, r2
   1f7c4:	subcs	r0, r0, r1, lsl #9
   1f7c8:	cmp	r0, r1, lsl #8
   1f7cc:	adc	r2, r2, r2
   1f7d0:	subcs	r0, r0, r1, lsl #8
   1f7d4:	cmp	r0, r1, lsl #7
   1f7d8:	adc	r2, r2, r2
   1f7dc:	subcs	r0, r0, r1, lsl #7
   1f7e0:	cmp	r0, r1, lsl #6
   1f7e4:	adc	r2, r2, r2
   1f7e8:	subcs	r0, r0, r1, lsl #6
   1f7ec:	cmp	r0, r1, lsl #5
   1f7f0:	adc	r2, r2, r2
   1f7f4:	subcs	r0, r0, r1, lsl #5
   1f7f8:	cmp	r0, r1, lsl #4
   1f7fc:	adc	r2, r2, r2
   1f800:	subcs	r0, r0, r1, lsl #4
   1f804:	cmp	r0, r1, lsl #3
   1f808:	adc	r2, r2, r2
   1f80c:	subcs	r0, r0, r1, lsl #3
   1f810:	cmp	r0, r1, lsl #2
   1f814:	adc	r2, r2, r2
   1f818:	subcs	r0, r0, r1, lsl #2
   1f81c:	cmp	r0, r1, lsl #1
   1f820:	adc	r2, r2, r2
   1f824:	subcs	r0, r0, r1, lsl #1
   1f828:	cmp	r0, r1
   1f82c:	adc	r2, r2, r2
   1f830:	subcs	r0, r0, r1
   1f834:	mov	r0, r2
   1f838:	bx	lr
   1f83c:	moveq	r0, #1
   1f840:	movne	r0, #0
   1f844:	bx	lr
   1f848:	clz	r2, r1
   1f84c:	rsb	r2, r2, #31
   1f850:	lsr	r0, r0, r2
   1f854:	bx	lr
   1f858:	cmp	r0, #0
   1f85c:	mvnne	r0, #0
   1f860:	b	1f884 <__assert_fail@plt+0xdbfc>
   1f864:	cmp	r1, #0
   1f868:	beq	1f858 <__assert_fail@plt+0xdbd0>
   1f86c:	push	{r0, r1, lr}
   1f870:	bl	1f678 <__assert_fail@plt+0xd9f0>
   1f874:	pop	{r1, r2, lr}
   1f878:	mul	r3, r2, r0
   1f87c:	sub	r1, r1, r3
   1f880:	bx	lr
   1f884:	push	{r1, lr}
   1f888:	mov	r0, #8
   1f88c:	bl	117cc <raise@plt>
   1f890:	pop	{r1, pc}
   1f894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f898:	mov	r7, r0
   1f89c:	ldr	r6, [pc, #72]	; 1f8ec <__assert_fail@plt+0xdc64>
   1f8a0:	ldr	r5, [pc, #72]	; 1f8f0 <__assert_fail@plt+0xdc68>
   1f8a4:	add	r6, pc, r6
   1f8a8:	add	r5, pc, r5
   1f8ac:	sub	r6, r6, r5
   1f8b0:	mov	r8, r1
   1f8b4:	mov	r9, r2
   1f8b8:	bl	11794 <calloc@plt-0x20>
   1f8bc:	asrs	r6, r6, #2
   1f8c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f8c4:	mov	r4, #0
   1f8c8:	add	r4, r4, #1
   1f8cc:	ldr	r3, [r5], #4
   1f8d0:	mov	r2, r9
   1f8d4:	mov	r1, r8
   1f8d8:	mov	r0, r7
   1f8dc:	blx	r3
   1f8e0:	cmp	r6, r4
   1f8e4:	bne	1f8c8 <__assert_fail@plt+0xdc40>
   1f8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f8ec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1f8f0:	strdeq	r8, [r1], -r0
   1f8f4:	bx	lr

Disassembly of section .fini:

0001f8f8 <.fini>:
   1f8f8:	push	{r3, lr}
   1f8fc:	pop	{r3, pc}
