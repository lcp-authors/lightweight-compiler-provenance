
raspbian-preinstalled/expand:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	1133c <__assert_fail@plt+0x41c>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r6, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <fflush@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <free@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <strndup@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <mbsinit@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <memcmp@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <dcgettext@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <__stack_chk_fail@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <realloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <textdomain@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <iswprint@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <fwrite@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <lseek64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <__ctype_get_mb_cur_max@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <__fpending@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <mbrtowc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <error@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <malloc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <__libc_start_main@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <__freading@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <__gmon_start__@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <getopt_long@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__ctype_b_loc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <exit@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <strlen@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <__errno_location@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <__cxa_atexit@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <memset@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <__printf_chk@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <fileno@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <__fprintf_chk@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <fclose@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <fseeko64@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__uflow@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <__overflow@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <setlocale@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <strrchr@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <nl_langinfo@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <clearerr_unlocked@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <fopen64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <bindtextdomain@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <strncmp@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <abort@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <strspn@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <__assert_fail@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

Disassembly of section .text:

00010f30 <.text>:
   10f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f34:	sub	sp, sp, #28
   10f38:	ldr	r9, [pc, #888]	; 112b8 <__assert_fail@plt+0x398>
   10f3c:	mov	r6, r0
   10f40:	ldr	r0, [r1]
   10f44:	ldr	r3, [r9]
   10f48:	mov	r5, r1
   10f4c:	str	r3, [sp, #20]
   10f50:	bl	122a0 <__assert_fail@plt+0x1380>
   10f54:	ldr	r1, [pc, #864]	; 112bc <__assert_fail@plt+0x39c>
   10f58:	mov	r0, #6
   10f5c:	bl	10eb4 <setlocale@plt>
   10f60:	ldr	r1, [pc, #856]	; 112c0 <__assert_fail@plt+0x3a0>
   10f64:	ldr	r0, [pc, #856]	; 112c4 <__assert_fail@plt+0x3a4>
   10f68:	bl	10ef0 <bindtextdomain@plt>
   10f6c:	ldr	r8, [pc, #852]	; 112c8 <__assert_fail@plt+0x3a8>
   10f70:	ldr	r0, [pc, #844]	; 112c4 <__assert_fail@plt+0x3a4>
   10f74:	ldr	r7, [pc, #848]	; 112cc <__assert_fail@plt+0x3ac>
   10f78:	ldr	sl, [pc, #848]	; 112d0 <__assert_fail@plt+0x3b0>
   10f7c:	bl	10d7c <textdomain@plt>
   10f80:	mov	r4, #0
   10f84:	ldr	r0, [pc, #840]	; 112d4 <__assert_fail@plt+0x3b4>
   10f88:	bl	15408 <__assert_fail@plt+0x44e8>
   10f8c:	mov	r3, #1
   10f90:	strb	r3, [r8]
   10f94:	mov	r3, r7
   10f98:	str	r4, [sp]
   10f9c:	ldr	r2, [pc, #820]	; 112d8 <__assert_fail@plt+0x3b8>
   10fa0:	mov	r1, r5
   10fa4:	mov	r0, r6
   10fa8:	bl	10e0c <getopt_long@plt>
   10fac:	cmn	r0, #1
   10fb0:	mov	r3, r0
   10fb4:	beq	11054 <__assert_fail@plt+0x134>
   10fb8:	cmp	r3, #57	; 0x39
   10fbc:	bgt	11000 <__assert_fail@plt+0xe0>
   10fc0:	cmp	r3, #48	; 0x30
   10fc4:	bge	11034 <__assert_fail@plt+0x114>
   10fc8:	cmn	r3, #3
   10fcc:	bne	11010 <__assert_fail@plt+0xf0>
   10fd0:	ldr	r1, [pc, #772]	; 112dc <__assert_fail@plt+0x3bc>
   10fd4:	ldr	r3, [pc, #772]	; 112e0 <__assert_fail@plt+0x3c0>
   10fd8:	ldr	r2, [pc, #772]	; 112e4 <__assert_fail@plt+0x3c4>
   10fdc:	str	r4, [sp, #4]
   10fe0:	ldr	r0, [r1]
   10fe4:	ldr	r3, [r3]
   10fe8:	ldr	r1, [pc, #760]	; 112e8 <__assert_fail@plt+0x3c8>
   10fec:	str	r2, [sp]
   10ff0:	ldr	r2, [pc, #756]	; 112ec <__assert_fail@plt+0x3cc>
   10ff4:	bl	14970 <__assert_fail@plt+0x3a50>
   10ff8:	mov	r0, #0
   10ffc:	bl	10e24 <exit@plt>
   11000:	cmp	r3, #105	; 0x69
   11004:	bne	11020 <__assert_fail@plt+0x100>
   11008:	strb	r4, [r8]
   1100c:	b	10f94 <__assert_fail@plt+0x74>
   11010:	cmn	r3, #2
   11014:	bne	112ac <__assert_fail@plt+0x38c>
   11018:	mov	r0, #0
   1101c:	bl	113f0 <__assert_fail@plt+0x4d0>
   11020:	cmp	r3, #116	; 0x74
   11024:	bne	112ac <__assert_fail@plt+0x38c>
   11028:	ldr	r0, [sl]
   1102c:	bl	11938 <__assert_fail@plt+0xa18>
   11030:	b	10f94 <__assert_fail@plt+0x74>
   11034:	ldr	r2, [sl]
   11038:	cmp	r2, #0
   1103c:	subne	r0, r2, #1
   11040:	addeq	r0, sp, #16
   11044:	strbeq	r3, [sp, #16]
   11048:	strbeq	r2, [sp, #17]
   1104c:	bl	11938 <__assert_fail@plt+0xa18>
   11050:	b	10f94 <__assert_fail@plt+0x74>
   11054:	bl	11c6c <__assert_fail@plt+0xd4c>
   11058:	ldr	r3, [pc, #656]	; 112f0 <__assert_fail@plt+0x3d0>
   1105c:	ldr	r0, [r3]
   11060:	cmp	r0, r6
   11064:	addlt	r0, r5, r0, lsl #2
   11068:	movge	r0, #0
   1106c:	bl	11ee4 <__assert_fail@plt+0xfc4>
   11070:	mov	r0, #0
   11074:	bl	11f0c <__assert_fail@plt+0xfec>
   11078:	subs	r6, r0, #0
   1107c:	beq	11148 <__assert_fail@plt+0x228>
   11080:	ldr	r7, [pc, #596]	; 112dc <__assert_fail@plt+0x3bc>
   11084:	mov	r3, #0
   11088:	mov	r4, #0
   1108c:	mov	r5, #0
   11090:	mov	fp, #1
   11094:	str	r3, [sp, #12]
   11098:	b	110c4 <__assert_fail@plt+0x1a4>
   1109c:	ldr	r0, [r7]
   110a0:	ldr	r3, [r0, #20]
   110a4:	ldr	r2, [r0, #24]
   110a8:	cmp	r3, r2
   110ac:	addcc	r2, r3, #1
   110b0:	strcc	r2, [r0, #20]
   110b4:	strbcc	sl, [r3]
   110b8:	bcs	111c4 <__assert_fail@plt+0x2a4>
   110bc:	cmp	sl, #10
   110c0:	beq	11084 <__assert_fail@plt+0x164>
   110c4:	ldr	r3, [r6, #4]
   110c8:	ldr	r2, [r6, #8]
   110cc:	cmp	r3, r2
   110d0:	bcs	1116c <__assert_fail@plt+0x24c>
   110d4:	add	r2, r3, #1
   110d8:	str	r2, [r6, #4]
   110dc:	ldrb	sl, [r3]
   110e0:	cmp	fp, #0
   110e4:	beq	1109c <__assert_fail@plt+0x17c>
   110e8:	cmp	sl, #9
   110ec:	beq	111fc <__assert_fail@plt+0x2dc>
   110f0:	cmp	sl, #8
   110f4:	bne	11194 <__assert_fail@plt+0x274>
   110f8:	orrs	r3, r4, r5
   110fc:	movne	r2, #1
   11100:	moveq	r2, #0
   11104:	ldr	r3, [sp, #12]
   11108:	subs	r4, r4, r2
   1110c:	mov	r2, #0
   11110:	sbc	r5, r5, r2
   11114:	cmp	r3, r2
   11118:	subne	r3, r3, #1
   1111c:	str	r3, [sp, #12]
   11120:	ldrb	fp, [r8]
   11124:	cmp	fp, #0
   11128:	bne	11140 <__assert_fail@plt+0x220>
   1112c:	bl	10e18 <__ctype_b_loc@plt>
   11130:	lsl	r3, sl, #1
   11134:	ldr	r2, [r0]
   11138:	ldrh	fp, [r2, r3]
   1113c:	and	fp, fp, #1
   11140:	cmp	sl, #0
   11144:	bge	1109c <__assert_fail@plt+0x17c>
   11148:	bl	120e0 <__assert_fail@plt+0x11c0>
   1114c:	ldr	r1, [sp, #20]
   11150:	ldr	r3, [pc, #412]	; 112f4 <__assert_fail@plt+0x3d4>
   11154:	ldr	r2, [r9]
   11158:	cmp	r1, r2
   1115c:	ldr	r0, [r3]
   11160:	bne	112b4 <__assert_fail@plt+0x394>
   11164:	add	sp, sp, #28
   11168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1116c:	mov	r0, r6
   11170:	bl	10e9c <__uflow@plt>
   11174:	subs	sl, r0, #0
   11178:	bge	110e0 <__assert_fail@plt+0x1c0>
   1117c:	mov	r0, r6
   11180:	bl	11f0c <__assert_fail@plt+0xfec>
   11184:	subs	r6, r0, #0
   11188:	bne	110c4 <__assert_fail@plt+0x1a4>
   1118c:	cmp	fp, #0
   11190:	beq	11148 <__assert_fail@plt+0x228>
   11194:	adds	r4, r4, #1
   11198:	adc	r5, r5, #0
   1119c:	orrs	r3, r4, r5
   111a0:	bne	11120 <__assert_fail@plt+0x200>
   111a4:	mov	r2, #5
   111a8:	ldr	r1, [pc, #328]	; 112f8 <__assert_fail@plt+0x3d8>
   111ac:	mov	r0, #0
   111b0:	bl	10d58 <dcgettext@plt>
   111b4:	mov	r1, #0
   111b8:	mov	r2, r0
   111bc:	mov	r0, #1
   111c0:	bl	10dd0 <error@plt>
   111c4:	uxtb	r1, sl
   111c8:	bl	10ea8 <__overflow@plt>
   111cc:	cmp	r0, #0
   111d0:	bge	110bc <__assert_fail@plt+0x19c>
   111d4:	bl	10e3c <__errno_location@plt>
   111d8:	mov	r2, #5
   111dc:	ldr	r1, [pc, #280]	; 112fc <__assert_fail@plt+0x3dc>
   111e0:	ldr	r4, [r0]
   111e4:	mov	r0, #0
   111e8:	bl	10d58 <dcgettext@plt>
   111ec:	mov	r1, r4
   111f0:	mov	r2, r0
   111f4:	mov	r0, #1
   111f8:	bl	10dd0 <error@plt>
   111fc:	add	r3, sp, #11
   11200:	add	r2, sp, #12
   11204:	mov	r0, r4
   11208:	mov	r1, r5
   1120c:	bl	11db0 <__assert_fail@plt+0xe90>
   11210:	ldrb	r3, [sp, #11]
   11214:	cmp	r3, #0
   11218:	mov	sl, r0
   1121c:	mov	fp, r1
   11220:	beq	11250 <__assert_fail@plt+0x330>
   11224:	adds	r2, r4, #1
   11228:	mvn	r1, #0
   1122c:	adc	r3, r5, #0
   11230:	mvn	r0, #0
   11234:	cmp	r5, r1
   11238:	cmpeq	r4, r0
   1123c:	beq	111a4 <__assert_fail@plt+0x284>
   11240:	mov	r4, r2
   11244:	mov	r5, r3
   11248:	mov	sl, #32
   1124c:	b	11120 <__assert_fail@plt+0x200>
   11250:	cmp	r5, r1
   11254:	cmpeq	r4, r0
   11258:	bhi	111a4 <__assert_fail@plt+0x284>
   1125c:	mov	r2, #32
   11260:	adds	r4, r4, #1
   11264:	adc	r5, r5, #0
   11268:	cmp	fp, r5
   1126c:	cmpeq	sl, r4
   11270:	bls	11248 <__assert_fail@plt+0x328>
   11274:	ldr	r0, [r7]
   11278:	ldr	r3, [r0, #20]
   1127c:	ldr	r1, [r0, #24]
   11280:	cmp	r3, r1
   11284:	addcc	r1, r3, #1
   11288:	strcc	r1, [r0, #20]
   1128c:	strbcc	r2, [r3]
   11290:	bcc	11260 <__assert_fail@plt+0x340>
   11294:	mov	r1, #32
   11298:	bl	10ea8 <__overflow@plt>
   1129c:	mov	r2, #32
   112a0:	cmp	r0, #0
   112a4:	bge	11260 <__assert_fail@plt+0x340>
   112a8:	b	111d4 <__assert_fail@plt+0x2b4>
   112ac:	mov	r0, #1
   112b0:	bl	113f0 <__assert_fail@plt+0x4d0>
   112b4:	bl	10d64 <__stack_chk_fail@plt>
   112b8:	andeq	r6, r2, r8, lsl #30
   112bc:	andeq	r5, r1, r8, lsr #10
   112c0:			; <UNDEFINED> instruction: 0x000157bc
   112c4:	andeq	r5, r1, r0, lsl r7
   112c8:	muleq	r2, r8, r1
   112cc:	andeq	r5, r1, r4, ror #8
   112d0:	andeq	r7, r2, r8, asr r1
   112d4:	muleq	r1, r0, r1
   112d8:			; <UNDEFINED> instruction: 0x000154b4
   112dc:	andeq	r7, r2, r4, asr r1
   112e0:	andeq	r7, r2, ip, ror #1
   112e4:	ldrdeq	r5, [r1], -r0
   112e8:	ldrdeq	r5, [r1], -r8
   112ec:	andeq	r5, r1, ip, lsl #14
   112f0:	andeq	r7, r2, r0, asr #2
   112f4:	muleq	r2, r4, r1
   112f8:	andeq	r5, r1, r0, ror #15
   112fc:	strdeq	r5, [r1], -r8
   11300:	mov	fp, #0
   11304:	mov	lr, #0
   11308:	pop	{r1}		; (ldr r1, [sp], #4)
   1130c:	mov	r2, sp
   11310:	push	{r2}		; (str r2, [sp, #-4]!)
   11314:	push	{r0}		; (str r0, [sp, #-4]!)
   11318:	ldr	ip, [pc, #16]	; 11330 <__assert_fail@plt+0x410>
   1131c:	push	{ip}		; (str ip, [sp, #-4]!)
   11320:	ldr	r0, [pc, #12]	; 11334 <__assert_fail@plt+0x414>
   11324:	ldr	r3, [pc, #12]	; 11338 <__assert_fail@plt+0x418>
   11328:	bl	10de8 <__libc_start_main@plt>
   1132c:	bl	10f08 <abort@plt>
   11330:	andeq	r5, r1, r4, lsl #8
   11334:	andeq	r0, r1, r0, lsr pc
   11338:	andeq	r5, r1, r4, lsr #7
   1133c:	ldr	r3, [pc, #20]	; 11358 <__assert_fail@plt+0x438>
   11340:	ldr	r2, [pc, #20]	; 1135c <__assert_fail@plt+0x43c>
   11344:	add	r3, pc, r3
   11348:	ldr	r2, [r3, r2]
   1134c:	cmp	r2, #0
   11350:	bxeq	lr
   11354:	b	10e00 <__gmon_start__@plt>
   11358:			; <UNDEFINED> instruction: 0x00015cb4
   1135c:	ldrdeq	r0, [r0], -r8
   11360:	ldr	r0, [pc, #24]	; 11380 <__assert_fail@plt+0x460>
   11364:	ldr	r3, [pc, #24]	; 11384 <__assert_fail@plt+0x464>
   11368:	cmp	r3, r0
   1136c:	bxeq	lr
   11370:	ldr	r3, [pc, #16]	; 11388 <__assert_fail@plt+0x468>
   11374:	cmp	r3, #0
   11378:	bxeq	lr
   1137c:	bx	r3
   11380:	andeq	r7, r2, r4, lsr r1
   11384:	andeq	r7, r2, r4, lsr r1
   11388:	andeq	r0, r0, r0
   1138c:	ldr	r0, [pc, #36]	; 113b8 <__assert_fail@plt+0x498>
   11390:	ldr	r1, [pc, #36]	; 113bc <__assert_fail@plt+0x49c>
   11394:	sub	r1, r1, r0
   11398:	asr	r1, r1, #2
   1139c:	add	r1, r1, r1, lsr #31
   113a0:	asrs	r1, r1, #1
   113a4:	bxeq	lr
   113a8:	ldr	r3, [pc, #16]	; 113c0 <__assert_fail@plt+0x4a0>
   113ac:	cmp	r3, #0
   113b0:	bxeq	lr
   113b4:	bx	r3
   113b8:	andeq	r7, r2, r4, lsr r1
   113bc:	andeq	r7, r2, r4, lsr r1
   113c0:	andeq	r0, r0, r0
   113c4:	push	{r4, lr}
   113c8:	ldr	r4, [pc, #24]	; 113e8 <__assert_fail@plt+0x4c8>
   113cc:	ldrb	r3, [r4]
   113d0:	cmp	r3, #0
   113d4:	popne	{r4, pc}
   113d8:	bl	11360 <__assert_fail@plt+0x440>
   113dc:	mov	r3, #1
   113e0:	strb	r3, [r4]
   113e4:	pop	{r4, pc}
   113e8:	andeq	r7, r2, ip, asr r1
   113ec:	b	1138c <__assert_fail@plt+0x46c>
   113f0:	ldr	r3, [pc, #724]	; 116cc <__assert_fail@plt+0x7ac>
   113f4:	push	{r7, lr}
   113f8:	sub	sp, sp, #64	; 0x40
   113fc:	ldr	r3, [r3]
   11400:	subs	r4, r0, #0
   11404:	str	r3, [sp, #60]	; 0x3c
   11408:	beq	11444 <__assert_fail@plt+0x524>
   1140c:	ldr	r3, [pc, #700]	; 116d0 <__assert_fail@plt+0x7b0>
   11410:	mov	r2, #5
   11414:	ldr	r1, [pc, #696]	; 116d4 <__assert_fail@plt+0x7b4>
   11418:	mov	r0, #0
   1141c:	ldr	r5, [r3]
   11420:	bl	10d58 <dcgettext@plt>
   11424:	ldr	r3, [pc, #684]	; 116d8 <__assert_fail@plt+0x7b8>
   11428:	mov	r1, #1
   1142c:	ldr	r3, [r3]
   11430:	mov	r2, r0
   11434:	mov	r0, r5
   11438:	bl	10e78 <__fprintf_chk@plt>
   1143c:	mov	r0, r4
   11440:	bl	10e24 <exit@plt>
   11444:	mov	r2, #5
   11448:	ldr	r1, [pc, #652]	; 116dc <__assert_fail@plt+0x7bc>
   1144c:	bl	10d58 <dcgettext@plt>
   11450:	ldr	r3, [pc, #640]	; 116d8 <__assert_fail@plt+0x7b8>
   11454:	ldr	r5, [pc, #644]	; 116e0 <__assert_fail@plt+0x7c0>
   11458:	ldr	r2, [r3]
   1145c:	mov	r1, r0
   11460:	mov	r0, #1
   11464:	bl	10e60 <__printf_chk@plt>
   11468:	mov	r2, #5
   1146c:	ldr	r1, [pc, #624]	; 116e4 <__assert_fail@plt+0x7c4>
   11470:	mov	r0, r4
   11474:	bl	10d58 <dcgettext@plt>
   11478:	ldr	r1, [r5]
   1147c:	bl	10cd4 <fputs_unlocked@plt>
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #604]	; 116e8 <__assert_fail@plt+0x7c8>
   11488:	mov	r0, r4
   1148c:	bl	10d58 <dcgettext@plt>
   11490:	ldr	r1, [r5]
   11494:	bl	10cd4 <fputs_unlocked@plt>
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #584]	; 116ec <__assert_fail@plt+0x7cc>
   114a0:	mov	r0, r4
   114a4:	bl	10d58 <dcgettext@plt>
   114a8:	ldr	r1, [r5]
   114ac:	bl	10cd4 <fputs_unlocked@plt>
   114b0:	mov	r2, #5
   114b4:	ldr	r1, [pc, #564]	; 116f0 <__assert_fail@plt+0x7d0>
   114b8:	mov	r0, r4
   114bc:	bl	10d58 <dcgettext@plt>
   114c0:	ldr	r1, [r5]
   114c4:	bl	10cd4 <fputs_unlocked@plt>
   114c8:	bl	12128 <__assert_fail@plt+0x1208>
   114cc:	mov	r2, #5
   114d0:	ldr	r1, [pc, #540]	; 116f4 <__assert_fail@plt+0x7d4>
   114d4:	mov	r0, r4
   114d8:	bl	10d58 <dcgettext@plt>
   114dc:	ldr	r1, [r5]
   114e0:	bl	10cd4 <fputs_unlocked@plt>
   114e4:	mov	r2, #5
   114e8:	ldr	r1, [pc, #520]	; 116f8 <__assert_fail@plt+0x7d8>
   114ec:	mov	r0, r4
   114f0:	bl	10d58 <dcgettext@plt>
   114f4:	ldr	r1, [r5]
   114f8:	bl	10cd4 <fputs_unlocked@plt>
   114fc:	ldr	lr, [pc, #504]	; 116fc <__assert_fail@plt+0x7dc>
   11500:	add	ip, sp, #4
   11504:	ldm	lr!, {r0, r1, r2, r3}
   11508:	stmia	ip!, {r0, r1, r2, r3}
   1150c:	ldm	lr!, {r0, r1, r2, r3}
   11510:	ldr	r6, [sp, #4]
   11514:	stmia	ip!, {r0, r1, r2, r3}
   11518:	cmp	r6, #0
   1151c:	ldm	lr!, {r0, r1, r2, r3}
   11520:	addeq	r5, sp, #4
   11524:	stmia	ip!, {r0, r1, r2, r3}
   11528:	ldm	lr, {r0, r1}
   1152c:	stm	ip, {r0, r1}
   11530:	beq	11560 <__assert_fail@plt+0x640>
   11534:	ldr	r7, [pc, #452]	; 11700 <__assert_fail@plt+0x7e0>
   11538:	add	r5, sp, #4
   1153c:	b	1154c <__assert_fail@plt+0x62c>
   11540:	ldr	r6, [r5, #8]!
   11544:	cmp	r6, #0
   11548:	beq	11560 <__assert_fail@plt+0x640>
   1154c:	mov	r1, r6
   11550:	mov	r0, r7
   11554:	bl	10cec <strcmp@plt>
   11558:	cmp	r0, #0
   1155c:	bne	11540 <__assert_fail@plt+0x620>
   11560:	ldr	r5, [r5, #4]
   11564:	mov	r2, #5
   11568:	cmp	r5, #0
   1156c:	ldr	r1, [pc, #400]	; 11704 <__assert_fail@plt+0x7e4>
   11570:	beq	11618 <__assert_fail@plt+0x6f8>
   11574:	mov	r0, #0
   11578:	bl	10d58 <dcgettext@plt>
   1157c:	ldr	r3, [pc, #388]	; 11708 <__assert_fail@plt+0x7e8>
   11580:	ldr	r2, [pc, #388]	; 1170c <__assert_fail@plt+0x7ec>
   11584:	mov	r1, r0
   11588:	mov	r0, #1
   1158c:	bl	10e60 <__printf_chk@plt>
   11590:	mov	r1, #0
   11594:	mov	r0, #5
   11598:	bl	10eb4 <setlocale@plt>
   1159c:	cmp	r0, #0
   115a0:	ldreq	r6, [pc, #344]	; 11700 <__assert_fail@plt+0x7e0>
   115a4:	beq	115c0 <__assert_fail@plt+0x6a0>
   115a8:	mov	r2, #3
   115ac:	ldr	r1, [pc, #348]	; 11710 <__assert_fail@plt+0x7f0>
   115b0:	bl	10efc <strncmp@plt>
   115b4:	ldr	r6, [pc, #324]	; 11700 <__assert_fail@plt+0x7e0>
   115b8:	cmp	r0, #0
   115bc:	bne	116a8 <__assert_fail@plt+0x788>
   115c0:	mov	r2, #5
   115c4:	ldr	r1, [pc, #328]	; 11714 <__assert_fail@plt+0x7f4>
   115c8:	mov	r0, #0
   115cc:	bl	10d58 <dcgettext@plt>
   115d0:	ldr	r3, [pc, #296]	; 11700 <__assert_fail@plt+0x7e0>
   115d4:	ldr	r2, [pc, #300]	; 11708 <__assert_fail@plt+0x7e8>
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	bl	10e60 <__printf_chk@plt>
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #296]	; 11718 <__assert_fail@plt+0x7f8>
   115ec:	mov	r0, #0
   115f0:	bl	10d58 <dcgettext@plt>
   115f4:	ldr	r2, [pc, #288]	; 1171c <__assert_fail@plt+0x7fc>
   115f8:	cmp	r5, r6
   115fc:	ldr	r3, [pc, #284]	; 11720 <__assert_fail@plt+0x800>
   11600:	movne	r3, r2
   11604:	mov	r1, r0
   11608:	mov	r2, r5
   1160c:	mov	r0, #1
   11610:	bl	10e60 <__printf_chk@plt>
   11614:	b	1143c <__assert_fail@plt+0x51c>
   11618:	mov	r0, r5
   1161c:	bl	10d58 <dcgettext@plt>
   11620:	ldr	r3, [pc, #224]	; 11708 <__assert_fail@plt+0x7e8>
   11624:	ldr	r2, [pc, #224]	; 1170c <__assert_fail@plt+0x7ec>
   11628:	mov	r1, r0
   1162c:	mov	r0, #1
   11630:	bl	10e60 <__printf_chk@plt>
   11634:	mov	r1, r5
   11638:	mov	r0, #5
   1163c:	bl	10eb4 <setlocale@plt>
   11640:	cmp	r0, #0
   11644:	beq	1165c <__assert_fail@plt+0x73c>
   11648:	mov	r2, #3
   1164c:	ldr	r1, [pc, #188]	; 11710 <__assert_fail@plt+0x7f0>
   11650:	bl	10efc <strncmp@plt>
   11654:	cmp	r0, #0
   11658:	bne	116a0 <__assert_fail@plt+0x780>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #172]	; 11714 <__assert_fail@plt+0x7f4>
   11664:	mov	r0, #0
   11668:	bl	10d58 <dcgettext@plt>
   1166c:	ldr	r3, [pc, #140]	; 11700 <__assert_fail@plt+0x7e0>
   11670:	ldr	r2, [pc, #144]	; 11708 <__assert_fail@plt+0x7e8>
   11674:	mov	r5, r3
   11678:	mov	r1, r0
   1167c:	mov	r0, #1
   11680:	bl	10e60 <__printf_chk@plt>
   11684:	ldr	r1, [pc, #140]	; 11718 <__assert_fail@plt+0x7f8>
   11688:	mov	r2, #5
   1168c:	mov	r0, #0
   11690:	bl	10d58 <dcgettext@plt>
   11694:	ldr	r3, [pc, #132]	; 11720 <__assert_fail@plt+0x800>
   11698:	mov	r1, r0
   1169c:	b	11608 <__assert_fail@plt+0x6e8>
   116a0:	ldr	r6, [pc, #88]	; 11700 <__assert_fail@plt+0x7e0>
   116a4:	mov	r5, r6
   116a8:	mov	r2, #5
   116ac:	ldr	r1, [pc, #112]	; 11724 <__assert_fail@plt+0x804>
   116b0:	mov	r0, #0
   116b4:	bl	10d58 <dcgettext@plt>
   116b8:	ldr	r2, [pc, #64]	; 11700 <__assert_fail@plt+0x7e0>
   116bc:	mov	r1, r0
   116c0:	mov	r0, #1
   116c4:	bl	10e60 <__printf_chk@plt>
   116c8:	b	115c0 <__assert_fail@plt+0x6a0>
   116cc:	andeq	r6, r2, r8, lsl #30
   116d0:	andeq	r7, r2, r8, asr #2
   116d4:	andeq	r5, r1, r0, ror #9
   116d8:	andeq	r7, r2, r4, lsr #3
   116dc:	andeq	r5, r1, r8, lsl #10
   116e0:	andeq	r7, r2, r4, asr r1
   116e4:	andeq	r5, r1, ip, lsr #10
   116e8:	andeq	r5, r1, r0, ror r5
   116ec:	andeq	r5, r1, r8, lsr #11
   116f0:	strdeq	r5, [r1], -r4
   116f4:	andeq	r5, r1, r4, ror #12
   116f8:	muleq	r1, r4, r6
   116fc:	andeq	r5, r1, ip, lsr #8
   11700:	ldrdeq	r5, [r1], -r8
   11704:	andeq	r5, r1, ip, asr #13
   11708:	andeq	r5, r1, r4, ror #13
   1170c:	andeq	r5, r1, ip, lsl #14
   11710:	andeq	r5, r1, ip, lsl r7
   11714:	andeq	r5, r1, r8, ror #14
   11718:	andeq	r5, r1, r8, lsl #15
   1171c:	andeq	r5, r1, r8, lsr #10
   11720:	andeq	r5, r1, ip, lsl #16
   11724:	andeq	r5, r1, r0, lsr #14
   11728:	push	{r4, r6, r7, lr}
   1172c:	mov	r6, r0
   11730:	ldr	r4, [pc, #68]	; 1177c <__assert_fail@plt+0x85c>
   11734:	mov	r7, r1
   11738:	ldrd	r2, [r4]
   1173c:	orrs	r3, r2, r3
   11740:	moveq	r0, #1
   11744:	bne	11750 <__assert_fail@plt+0x830>
   11748:	strd	r6, [r4]
   1174c:	pop	{r4, r6, r7, pc}
   11750:	mov	r2, #5
   11754:	ldr	r1, [pc, #36]	; 11780 <__assert_fail@plt+0x860>
   11758:	mov	r0, #0
   1175c:	bl	10d58 <dcgettext@plt>
   11760:	mov	r1, #0
   11764:	mov	r2, r0
   11768:	mov	r0, r1
   1176c:	bl	10dd0 <error@plt>
   11770:	mov	r0, #0
   11774:	strd	r6, [r4]
   11778:	pop	{r4, r6, r7, pc}
   1177c:	andeq	r7, r2, r0, ror #2
   11780:	muleq	r1, ip, r8
   11784:	push	{r4, r6, r7, lr}
   11788:	mov	r6, r0
   1178c:	ldr	r4, [pc, #68]	; 117d8 <__assert_fail@plt+0x8b8>
   11790:	mov	r7, r1
   11794:	ldrd	r2, [r4, #8]
   11798:	orrs	r3, r2, r3
   1179c:	moveq	r0, #1
   117a0:	bne	117ac <__assert_fail@plt+0x88c>
   117a4:	strd	r6, [r4, #8]
   117a8:	pop	{r4, r6, r7, pc}
   117ac:	mov	r2, #5
   117b0:	ldr	r1, [pc, #36]	; 117dc <__assert_fail@plt+0x8bc>
   117b4:	mov	r0, #0
   117b8:	bl	10d58 <dcgettext@plt>
   117bc:	mov	r1, #0
   117c0:	mov	r2, r0
   117c4:	mov	r0, r1
   117c8:	bl	10dd0 <error@plt>
   117cc:	mov	r0, #0
   117d0:	strd	r6, [r4, #8]
   117d4:	pop	{r4, r6, r7, pc}
   117d8:	andeq	r7, r2, r0, ror #2
   117dc:	andeq	r5, r1, ip, asr #17
   117e0:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   117e4:	mov	r6, r0
   117e8:	ldr	r4, [pc, #312]	; 11928 <__assert_fail@plt+0xa08>
   117ec:	mov	r7, r1
   117f0:	ldr	r3, [r4, #16]
   117f4:	ldr	r0, [r4, #20]
   117f8:	cmp	r3, #0
   117fc:	ldr	ip, [r4, #24]
   11800:	beq	11838 <__assert_fail@plt+0x918>
   11804:	sub	r2, r3, #-536870911	; 0xe0000001
   11808:	lsl	r2, r2, #3
   1180c:	ldrd	sl, [r0, r2]
   11810:	cmp	fp, r1
   11814:	cmpeq	sl, r6
   11818:	bls	1191c <__assert_fail@plt+0x9fc>
   1181c:	cmp	r3, ip
   11820:	beq	1188c <__assert_fail@plt+0x96c>
   11824:	add	r0, r0, r2
   11828:	add	r3, r3, #1
   1182c:	strd	r6, [r0, #8]
   11830:	str	r3, [r4, #16]
   11834:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   11838:	mov	r8, r6
   1183c:	mov	r9, r1
   11840:	cmp	r3, ip
   11844:	beq	11894 <__assert_fail@plt+0x974>
   11848:	ldr	r1, [pc, #220]	; 1192c <__assert_fail@plt+0xa0c>
   1184c:	lsl	lr, r3, #3
   11850:	add	ip, r3, #1
   11854:	ldr	r2, [r1]
   11858:	mov	r3, #0
   1185c:	cmp	r3, r9
   11860:	cmpeq	r2, r8
   11864:	strd	r6, [r0, lr]
   11868:	str	ip, [r4, #16]
   1186c:	popcs	{r4, r6, r7, r8, r9, sl, fp, pc}
   11870:	mov	r3, #0
   11874:	mvn	r2, #0
   11878:	cmp	r9, r3
   1187c:	cmpeq	r8, r2
   11880:	bhi	118fc <__assert_fail@plt+0x9dc>
   11884:	str	r8, [r1]
   11888:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   1188c:	mov	r8, #0
   11890:	mov	r9, #0
   11894:	cmp	r0, #0
   11898:	beq	118c8 <__assert_fail@plt+0x9a8>
   1189c:	ldr	r3, [pc, #140]	; 11930 <__assert_fail@plt+0xa10>
   118a0:	cmp	ip, r3
   118a4:	bhi	118ec <__assert_fail@plt+0x9cc>
   118a8:	add	r3, ip, #1
   118ac:	add	ip, r3, ip, lsr #1
   118b0:	lsl	r1, ip, #3
   118b4:	str	ip, [r4, #24]
   118b8:	bl	14ad0 <__assert_fail@plt+0x3bb0>
   118bc:	ldr	r3, [r4, #16]
   118c0:	str	r0, [r4, #20]
   118c4:	b	11848 <__assert_fail@plt+0x928>
   118c8:	cmp	ip, #0
   118cc:	beq	118f0 <__assert_fail@plt+0x9d0>
   118d0:	lsrs	r3, ip, #29
   118d4:	movne	r3, #1
   118d8:	moveq	r3, #0
   118dc:	lsls	r1, ip, #3
   118e0:	bmi	118ec <__assert_fail@plt+0x9cc>
   118e4:	cmp	r3, #0
   118e8:	beq	118b4 <__assert_fail@plt+0x994>
   118ec:	bl	14cbc <__assert_fail@plt+0x3d9c>
   118f0:	mov	r1, #64	; 0x40
   118f4:	mov	ip, #8
   118f8:	b	118b4 <__assert_fail@plt+0x994>
   118fc:	mov	r2, #5
   11900:	ldr	r1, [pc, #44]	; 11934 <__assert_fail@plt+0xa14>
   11904:	mov	r0, #0
   11908:	bl	10d58 <dcgettext@plt>
   1190c:	mov	r1, #0
   11910:	mov	r2, r0
   11914:	mov	r0, #1
   11918:	bl	10dd0 <error@plt>
   1191c:	subs	r8, r6, sl
   11920:	sbc	r9, r1, fp
   11924:	b	11840 <__assert_fail@plt+0x920>
   11928:	andeq	r7, r2, r0, ror #2
   1192c:	ldrdeq	r7, [r2], -r8
   11930:	beq	feabc3dc <optarg@@GLIBC_2.4+0xfea95284>
   11934:	strdeq	r5, [r1], -ip
   11938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1193c:	sub	sp, sp, #20
   11940:	ldrb	r9, [r0]
   11944:	cmp	r9, #0
   11948:	beq	11a54 <__assert_fail@plt+0xb34>
   1194c:	mov	r3, #0
   11950:	mov	r6, r3
   11954:	str	r3, [sp]
   11958:	mov	r8, r3
   1195c:	mov	r7, r3
   11960:	mov	r3, #1
   11964:	mov	r4, r0
   11968:	mov	sl, #0
   1196c:	mov	fp, #0
   11970:	str	r3, [sp, #4]
   11974:	b	119d4 <__assert_fail@plt+0xab4>
   11978:	bl	10e18 <__ctype_b_loc@plt>
   1197c:	lsl	r2, r9, #1
   11980:	ldr	r1, [r0]
   11984:	ldrh	r5, [r1, r2]
   11988:	ands	r5, r5, #1
   1198c:	bne	119dc <__assert_fail@plt+0xabc>
   11990:	cmp	r9, #47	; 0x2f
   11994:	beq	11a5c <__assert_fail@plt+0xb3c>
   11998:	cmp	r9, #43	; 0x2b
   1199c:	beq	11acc <__assert_fail@plt+0xbac>
   119a0:	sub	r3, r9, #48	; 0x30
   119a4:	cmp	r3, #9
   119a8:	bhi	11c14 <__assert_fail@plt+0xcf4>
   119ac:	cmp	r6, #0
   119b0:	bne	11b1c <__assert_fail@plt+0xbfc>
   119b4:	mov	sl, r3
   119b8:	asr	fp, r3, #31
   119bc:	mov	r6, #1
   119c0:	str	r4, [sp]
   119c4:	ldrb	r9, [r4, #1]
   119c8:	add	r4, r4, #1
   119cc:	cmp	r9, #0
   119d0:	beq	11a1c <__assert_fail@plt+0xafc>
   119d4:	cmp	r9, #44	; 0x2c
   119d8:	bne	11978 <__assert_fail@plt+0xa58>
   119dc:	cmp	r6, #0
   119e0:	beq	119c4 <__assert_fail@plt+0xaa4>
   119e4:	cmp	r7, #0
   119e8:	mov	r0, sl
   119ec:	mov	r1, fp
   119f0:	bne	11abc <__assert_fail@plt+0xb9c>
   119f4:	cmp	r8, #0
   119f8:	beq	11aac <__assert_fail@plt+0xb8c>
   119fc:	bl	11784 <__assert_fail@plt+0x864>
   11a00:	subs	r8, r0, #0
   11a04:	beq	11c44 <__assert_fail@plt+0xd24>
   11a08:	ldrb	r9, [r4, #1]
   11a0c:	mov	r6, #0
   11a10:	add	r4, r4, #1
   11a14:	cmp	r9, #0
   11a18:	bne	119d4 <__assert_fail@plt+0xab4>
   11a1c:	ldr	r3, [sp, #4]
   11a20:	tst	r6, r3
   11a24:	beq	11a48 <__assert_fail@plt+0xb28>
   11a28:	cmp	r7, #0
   11a2c:	mov	r0, sl
   11a30:	mov	r1, fp
   11a34:	bne	11bfc <__assert_fail@plt+0xcdc>
   11a38:	cmp	r8, #0
   11a3c:	beq	11bf0 <__assert_fail@plt+0xcd0>
   11a40:	bl	11784 <__assert_fail@plt+0x864>
   11a44:	str	r0, [sp, #4]
   11a48:	ldr	r3, [sp, #4]
   11a4c:	cmp	r3, #0
   11a50:	beq	11c44 <__assert_fail@plt+0xd24>
   11a54:	add	sp, sp, #20
   11a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a5c:	cmp	r6, #0
   11a60:	moveq	r8, r6
   11a64:	moveq	r7, #1
   11a68:	beq	119c4 <__assert_fail@plt+0xaa4>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #480]	; 11c58 <__assert_fail@plt+0xd38>
   11a74:	mov	r0, r5
   11a78:	bl	10d58 <dcgettext@plt>
   11a7c:	mov	r8, r5
   11a80:	mov	r7, r0
   11a84:	mov	r0, r4
   11a88:	bl	14504 <__assert_fail@plt+0x35e4>
   11a8c:	mov	r2, r7
   11a90:	mov	r1, r5
   11a94:	str	r5, [sp, #4]
   11a98:	mov	r7, r6
   11a9c:	mov	r3, r0
   11aa0:	mov	r0, r5
   11aa4:	bl	10dd0 <error@plt>
   11aa8:	b	119c4 <__assert_fail@plt+0xaa4>
   11aac:	bl	117e0 <__assert_fail@plt+0x8c0>
   11ab0:	mov	r7, r8
   11ab4:	mov	r6, r8
   11ab8:	b	119c4 <__assert_fail@plt+0xaa4>
   11abc:	bl	11728 <__assert_fail@plt+0x808>
   11ac0:	subs	r7, r0, #0
   11ac4:	bne	11a08 <__assert_fail@plt+0xae8>
   11ac8:	b	11c44 <__assert_fail@plt+0xd24>
   11acc:	cmp	r6, #0
   11ad0:	moveq	r7, r6
   11ad4:	moveq	r8, #1
   11ad8:	beq	119c4 <__assert_fail@plt+0xaa4>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #372]	; 11c5c <__assert_fail@plt+0xd3c>
   11ae4:	mov	r0, r5
   11ae8:	bl	10d58 <dcgettext@plt>
   11aec:	mov	r8, r6
   11af0:	mov	r7, r0
   11af4:	mov	r0, r4
   11af8:	bl	14504 <__assert_fail@plt+0x35e4>
   11afc:	mov	r2, r7
   11b00:	mov	r1, r5
   11b04:	str	r5, [sp, #4]
   11b08:	mov	r7, r5
   11b0c:	mov	r3, r0
   11b10:	mov	r0, r5
   11b14:	bl	10dd0 <error@plt>
   11b18:	b	119c4 <__assert_fail@plt+0xaa4>
   11b1c:	add	r1, pc, #300	; 0x12c
   11b20:	ldrd	r0, [r1]
   11b24:	cmp	fp, r1
   11b28:	cmpeq	sl, r0
   11b2c:	bls	11ba8 <__assert_fail@plt+0xc88>
   11b30:	ldr	r5, [sp]
   11b34:	ldr	r1, [pc, #292]	; 11c60 <__assert_fail@plt+0xd40>
   11b38:	mov	r0, r5
   11b3c:	bl	10f14 <strspn@plt>
   11b40:	str	r5, [sp]
   11b44:	mov	r1, r0
   11b48:	mov	r4, r0
   11b4c:	mov	r0, r5
   11b50:	bl	14cfc <__assert_fail@plt+0x3ddc>
   11b54:	mov	r2, #5
   11b58:	ldr	r1, [pc, #260]	; 11c64 <__assert_fail@plt+0xd44>
   11b5c:	sub	r4, r4, #1
   11b60:	mov	r5, r0
   11b64:	mov	r0, #0
   11b68:	bl	10d58 <dcgettext@plt>
   11b6c:	mov	r9, r0
   11b70:	mov	r0, r5
   11b74:	bl	14504 <__assert_fail@plt+0x35e4>
   11b78:	mov	r1, #0
   11b7c:	mov	r2, r9
   11b80:	mov	r3, r0
   11b84:	mov	r0, r1
   11b88:	bl	10dd0 <error@plt>
   11b8c:	mov	r0, r5
   11b90:	bl	10d10 <free@plt>
   11b94:	ldr	r3, [sp]
   11b98:	add	r4, r3, r4
   11b9c:	mov	r3, #0
   11ba0:	str	r3, [sp, #4]
   11ba4:	b	119c4 <__assert_fail@plt+0xaa4>
   11ba8:	lsl	r1, fp, #2
   11bac:	lsl	r2, sl, #2
   11bb0:	adds	r2, r2, sl
   11bb4:	orr	r1, r1, sl, lsr #30
   11bb8:	adc	r1, r1, fp
   11bbc:	adds	r2, r2, r2
   11bc0:	str	r2, [sp, #8]
   11bc4:	adc	r2, r1, r1
   11bc8:	str	r2, [sp, #12]
   11bcc:	ldrd	r0, [sp, #8]
   11bd0:	adds	r0, r0, r3
   11bd4:	adc	r1, r1, r3, asr #31
   11bd8:	cmp	r1, fp
   11bdc:	cmpeq	r0, sl
   11be0:	bcc	11b30 <__assert_fail@plt+0xc10>
   11be4:	mov	sl, r0
   11be8:	mov	fp, r1
   11bec:	b	119c4 <__assert_fail@plt+0xaa4>
   11bf0:	add	sp, sp, #20
   11bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bf8:	b	117e0 <__assert_fail@plt+0x8c0>
   11bfc:	bl	11728 <__assert_fail@plt+0x808>
   11c00:	str	r0, [sp, #4]
   11c04:	ldr	r3, [sp, #4]
   11c08:	cmp	r3, #0
   11c0c:	bne	11a54 <__assert_fail@plt+0xb34>
   11c10:	b	11c44 <__assert_fail@plt+0xd24>
   11c14:	mov	r2, #5
   11c18:	ldr	r1, [pc, #72]	; 11c68 <__assert_fail@plt+0xd48>
   11c1c:	mov	r0, r5
   11c20:	bl	10d58 <dcgettext@plt>
   11c24:	mov	r6, r0
   11c28:	mov	r0, r4
   11c2c:	bl	14504 <__assert_fail@plt+0x35e4>
   11c30:	mov	r2, r6
   11c34:	mov	r1, r5
   11c38:	mov	r3, r0
   11c3c:	mov	r0, r5
   11c40:	bl	10dd0 <error@plt>
   11c44:	mov	r0, #1
   11c48:	bl	10e24 <exit@plt>
   11c4c:	nop			; (mov r0, r0)
   11c50:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c54:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c58:	andeq	r5, r1, r4, lsl r9
   11c5c:	andeq	r5, r1, r0, asr #18
   11c60:	andeq	r5, r1, ip, ror #18
   11c64:	andeq	r5, r1, r8, ror r9
   11c68:	muleq	r1, r4, r9
   11c6c:	ldr	r3, [pc, #296]	; 11d9c <__assert_fail@plt+0xe7c>
   11c70:	push	{r4, r5, r6, r7, r8, lr}
   11c74:	ldr	ip, [r3, #16]
   11c78:	ldr	r2, [r3, #20]
   11c7c:	cmp	ip, #0
   11c80:	beq	11d4c <__assert_fail@plt+0xe2c>
   11c84:	ldrd	r4, [r2]
   11c88:	orrs	r1, r4, r5
   11c8c:	mov	r0, r4
   11c90:	mov	r1, r5
   11c94:	movne	lr, #0
   11c98:	bne	11cc0 <__assert_fail@plt+0xda0>
   11c9c:	b	11d90 <__assert_fail@plt+0xe70>
   11ca0:	ldrd	r6, [r2, #8]!
   11ca4:	orrs	r8, r6, r7
   11ca8:	beq	11d90 <__assert_fail@plt+0xe70>
   11cac:	cmp	r1, r7
   11cb0:	cmpeq	r0, r6
   11cb4:	bcs	11d84 <__assert_fail@plt+0xe64>
   11cb8:	mov	r0, r6
   11cbc:	mov	r1, r7
   11cc0:	add	lr, lr, #1
   11cc4:	cmp	ip, lr
   11cc8:	bne	11ca0 <__assert_fail@plt+0xd80>
   11ccc:	ldrd	r6, [r3, #8]
   11cd0:	orrs	r2, r6, r7
   11cd4:	beq	11ce4 <__assert_fail@plt+0xdc4>
   11cd8:	ldrd	r0, [r3]
   11cdc:	orrs	r2, r0, r1
   11ce0:	bne	11d2c <__assert_fail@plt+0xe0c>
   11ce4:	cmp	ip, #1
   11ce8:	beq	11cfc <__assert_fail@plt+0xddc>
   11cec:	mov	r0, #0
   11cf0:	mov	r1, #0
   11cf4:	strd	r0, [r3, #32]
   11cf8:	pop	{r4, r5, r6, r7, r8, pc}
   11cfc:	ldr	r2, [r3, #4]
   11d00:	ldr	ip, [r3]
   11d04:	orr	r1, r7, r2
   11d08:	orr	r0, r6, ip
   11d0c:	orrs	r2, r0, r1
   11d10:	bne	11cec <__assert_fail@plt+0xdcc>
   11d14:	strd	r4, [r3, #32]
   11d18:	pop	{r4, r5, r6, r7, r8, pc}
   11d1c:	orrs	r2, r0, r1
   11d20:	moveq	lr, r4
   11d24:	moveq	r0, r4
   11d28:	beq	11d68 <__assert_fail@plt+0xe48>
   11d2c:	ldr	r1, [pc, #108]	; 11da0 <__assert_fail@plt+0xe80>
   11d30:	mov	r2, #5
   11d34:	mov	r0, #0
   11d38:	bl	10d58 <dcgettext@plt>
   11d3c:	mov	r1, #0
   11d40:	mov	r2, r0
   11d44:	mov	r0, #1
   11d48:	bl	10dd0 <error@plt>
   11d4c:	ldrd	r4, [r3, #8]
   11d50:	ldrd	r0, [r3]
   11d54:	orrs	r2, r4, r5
   11d58:	bne	11d1c <__assert_fail@plt+0xdfc>
   11d5c:	orrs	r2, r0, r1
   11d60:	beq	11d7c <__assert_fail@plt+0xe5c>
   11d64:	mov	lr, r0
   11d68:	ldr	r2, [pc, #52]	; 11da4 <__assert_fail@plt+0xe84>
   11d6c:	str	r0, [r3, #32]
   11d70:	str	ip, [r3, #36]	; 0x24
   11d74:	str	lr, [r2]
   11d78:	pop	{r4, r5, r6, r7, r8, pc}
   11d7c:	mov	r0, #8
   11d80:	b	11d64 <__assert_fail@plt+0xe44>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [pc, #24]	; 11da8 <__assert_fail@plt+0xe88>
   11d8c:	b	11d34 <__assert_fail@plt+0xe14>
   11d90:	mov	r2, #5
   11d94:	ldr	r1, [pc, #16]	; 11dac <__assert_fail@plt+0xe8c>
   11d98:	b	11d34 <__assert_fail@plt+0xe14>
   11d9c:	andeq	r7, r2, r0, ror #2
   11da0:	strdeq	r5, [r1], -r4
   11da4:	ldrdeq	r7, [r2], -r8
   11da8:	ldrdeq	r5, [r1], -r8
   11dac:	andeq	r5, r1, r0, asr #19
   11db0:	ldr	ip, [pc, #296]	; 11ee0 <__assert_fail@plt+0xfc0>
   11db4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db8:	mov	lr, #0
   11dbc:	ldrd	r8, [ip, #32]
   11dc0:	strb	lr, [r3]
   11dc4:	mov	sl, r0
   11dc8:	orrs	lr, r8, r9
   11dcc:	mov	fp, r1
   11dd0:	bne	11e5c <__assert_fail@plt+0xf3c>
   11dd4:	ldr	r1, [r2]
   11dd8:	ldr	lr, [ip, #16]
   11ddc:	cmp	lr, r1
   11de0:	bls	11e30 <__assert_fail@plt+0xf10>
   11de4:	ldr	r5, [ip, #20]
   11de8:	lsl	r4, r1, #3
   11dec:	add	r0, r5, r4
   11df0:	add	r4, r5, r4
   11df4:	ldrd	r4, [r4]
   11df8:	cmp	fp, r5
   11dfc:	cmpeq	sl, r4
   11e00:	addcs	r1, r1, #1
   11e04:	bcs	11e24 <__assert_fail@plt+0xf04>
   11e08:	b	11e50 <__assert_fail@plt+0xf30>
   11e0c:	ldrd	r4, [r0, #8]!
   11e10:	add	r8, r1, #1
   11e14:	cmp	fp, r5
   11e18:	cmpeq	sl, r4
   11e1c:	bcc	11e7c <__assert_fail@plt+0xf5c>
   11e20:	mov	r1, r8
   11e24:	cmp	lr, r1
   11e28:	bne	11e0c <__assert_fail@plt+0xeec>
   11e2c:	str	lr, [r2]
   11e30:	ldrd	r0, [ip]
   11e34:	orrs	r2, r0, r1
   11e38:	bne	11eb8 <__assert_fail@plt+0xf98>
   11e3c:	ldrd	r4, [ip, #8]
   11e40:	orrs	r2, r4, r5
   11e44:	moveq	r2, #1
   11e48:	strbeq	r2, [r3]
   11e4c:	bne	11e84 <__assert_fail@plt+0xf64>
   11e50:	mov	r0, r4
   11e54:	mov	r1, r5
   11e58:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e5c:	adds	r6, r8, r0
   11e60:	mov	r2, r8
   11e64:	mov	r3, r9
   11e68:	adc	r7, r9, r1
   11e6c:	bl	15230 <__assert_fail@plt+0x4310>
   11e70:	subs	r4, r6, r2
   11e74:	sbc	r5, r7, r3
   11e78:	b	11e50 <__assert_fail@plt+0xf30>
   11e7c:	str	r1, [r2]
   11e80:	b	11e50 <__assert_fail@plt+0xf30>
   11e84:	ldr	r3, [ip, #20]
   11e88:	adds	r8, r4, sl
   11e8c:	add	lr, r3, lr, lsl #3
   11e90:	adc	r9, r5, fp
   11e94:	ldrd	r0, [lr, #-8]
   11e98:	mov	r2, r4
   11e9c:	mov	r3, r5
   11ea0:	subs	r0, sl, r0
   11ea4:	sbc	r1, fp, r1
   11ea8:	bl	15230 <__assert_fail@plt+0x4310>
   11eac:	subs	r4, r8, r2
   11eb0:	sbc	r5, r9, r3
   11eb4:	b	11e50 <__assert_fail@plt+0xf30>
   11eb8:	adds	r8, r0, sl
   11ebc:	adc	r9, r1, fp
   11ec0:	mov	r2, r0
   11ec4:	mov	r3, r1
   11ec8:	mov	r0, sl
   11ecc:	mov	r1, fp
   11ed0:	bl	15230 <__assert_fail@plt+0x4310>
   11ed4:	subs	r4, r8, r2
   11ed8:	sbc	r5, r9, r3
   11edc:	b	11e50 <__assert_fail@plt+0xf30>
   11ee0:	andeq	r7, r2, r0, ror #2
   11ee4:	ldr	r3, [pc, #24]	; 11f04 <__assert_fail@plt+0xfe4>
   11ee8:	ldr	r2, [pc, #24]	; 11f08 <__assert_fail@plt+0xfe8>
   11eec:	cmp	r0, #0
   11ef0:	moveq	r0, r3
   11ef4:	mov	r3, #0
   11ef8:	str	r0, [r2, #44]	; 0x2c
   11efc:	strb	r3, [r2, #40]	; 0x28
   11f00:	bx	lr
   11f04:	andeq	r7, r2, r4, ror #1
   11f08:	andeq	r7, r2, r0, ror #2
   11f0c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f10:	subs	r5, r0, #0
   11f14:	ldr	r6, [pc, #416]	; 120bc <__assert_fail@plt+0x119c>
   11f18:	beq	11f50 <__assert_fail@plt+0x1030>
   11f1c:	ldr	r4, [r6, #48]	; 0x30
   11f20:	cmp	r4, #0
   11f24:	beq	120a8 <__assert_fail@plt+0x1188>
   11f28:	ldr	r3, [r5]
   11f2c:	tst	r3, #32
   11f30:	bne	1206c <__assert_fail@plt+0x114c>
   11f34:	mov	r0, r4
   11f38:	ldr	r1, [pc, #384]	; 120c0 <__assert_fail@plt+0x11a0>
   11f3c:	bl	10cec <strcmp@plt>
   11f40:	cmp	r0, #0
   11f44:	mov	r0, r5
   11f48:	bne	12028 <__assert_fail@plt+0x1108>
   11f4c:	bl	10ed8 <clearerr_unlocked@plt>
   11f50:	ldr	r3, [r6, #44]	; 0x2c
   11f54:	add	r2, r3, #4
   11f58:	ldr	r4, [r3]
   11f5c:	str	r2, [r6, #44]	; 0x2c
   11f60:	cmp	r4, #0
   11f64:	beq	1201c <__assert_fail@plt+0x10fc>
   11f68:	ldr	r8, [pc, #336]	; 120c0 <__assert_fail@plt+0x11a0>
   11f6c:	ldr	fp, [pc, #336]	; 120c4 <__assert_fail@plt+0x11a4>
   11f70:	mov	r7, #1
   11f74:	ldr	sl, [pc, #332]	; 120c8 <__assert_fail@plt+0x11a8>
   11f78:	ldr	r9, [pc, #332]	; 120cc <__assert_fail@plt+0x11ac>
   11f7c:	b	11fd8 <__assert_fail@plt+0x10b8>
   11f80:	ldr	r5, [sl]
   11f84:	strb	r7, [r6, #40]	; 0x28
   11f88:	cmp	r5, #0
   11f8c:	bne	12004 <__assert_fail@plt+0x10e4>
   11f90:	bl	10e3c <__errno_location@plt>
   11f94:	mov	r2, r4
   11f98:	mov	r1, #3
   11f9c:	ldr	r4, [r0]
   11fa0:	mov	r0, r5
   11fa4:	bl	14338 <__assert_fail@plt+0x3418>
   11fa8:	mov	r2, r9
   11fac:	mov	r1, r4
   11fb0:	mov	r3, r0
   11fb4:	mov	r0, r5
   11fb8:	bl	10dd0 <error@plt>
   11fbc:	ldr	r3, [r6, #44]	; 0x2c
   11fc0:	str	r7, [r6, #52]	; 0x34
   11fc4:	add	r2, r3, #4
   11fc8:	ldr	r4, [r3]
   11fcc:	str	r2, [r6, #44]	; 0x2c
   11fd0:	cmp	r4, #0
   11fd4:	beq	1201c <__assert_fail@plt+0x10fc>
   11fd8:	mov	r1, r8
   11fdc:	mov	r0, r4
   11fe0:	bl	10cec <strcmp@plt>
   11fe4:	cmp	r0, #0
   11fe8:	beq	11f80 <__assert_fail@plt+0x1060>
   11fec:	mov	r1, fp
   11ff0:	mov	r0, r4
   11ff4:	bl	10ee4 <fopen64@plt>
   11ff8:	mov	r5, r0
   11ffc:	cmp	r5, #0
   12000:	beq	11f90 <__assert_fail@plt+0x1070>
   12004:	mov	r0, r5
   12008:	mov	r1, #2
   1200c:	str	r4, [r6, #48]	; 0x30
   12010:	bl	1226c <__assert_fail@plt+0x134c>
   12014:	mov	r0, r5
   12018:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	mov	r5, #0
   12020:	mov	r0, r5
   12024:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12028:	bl	14d10 <__assert_fail@plt+0x3df0>
   1202c:	cmp	r0, #0
   12030:	beq	11f50 <__assert_fail@plt+0x1030>
   12034:	bl	10e3c <__errno_location@plt>
   12038:	ldr	r2, [r6, #48]	; 0x30
   1203c:	mov	r1, #3
   12040:	ldr	r4, [r0]
   12044:	mov	r0, #0
   12048:	bl	14338 <__assert_fail@plt+0x3418>
   1204c:	mov	r1, r4
   12050:	ldr	r2, [pc, #116]	; 120cc <__assert_fail@plt+0x11ac>
   12054:	mov	r3, r0
   12058:	mov	r0, #0
   1205c:	bl	10dd0 <error@plt>
   12060:	mov	r3, #1
   12064:	str	r3, [r6, #52]	; 0x34
   12068:	b	11f50 <__assert_fail@plt+0x1030>
   1206c:	bl	10e3c <__errno_location@plt>
   12070:	mov	r2, r4
   12074:	mov	r1, #3
   12078:	ldr	r4, [r0]
   1207c:	mov	r0, #0
   12080:	bl	14338 <__assert_fail@plt+0x3418>
   12084:	mov	r1, r4
   12088:	ldr	r2, [pc, #60]	; 120cc <__assert_fail@plt+0x11ac>
   1208c:	mov	r3, r0
   12090:	mov	r0, #0
   12094:	bl	10dd0 <error@plt>
   12098:	mov	r3, #1
   1209c:	ldr	r4, [r6, #48]	; 0x30
   120a0:	str	r3, [r6, #52]	; 0x34
   120a4:	b	11f34 <__assert_fail@plt+0x1014>
   120a8:	ldr	r3, [pc, #32]	; 120d0 <__assert_fail@plt+0x11b0>
   120ac:	ldr	r2, [pc, #32]	; 120d4 <__assert_fail@plt+0x11b4>
   120b0:	ldr	r1, [pc, #32]	; 120d8 <__assert_fail@plt+0x11b8>
   120b4:	ldr	r0, [pc, #32]	; 120dc <__assert_fail@plt+0x11bc>
   120b8:	bl	10f20 <__assert_fail@plt>
   120bc:	andeq	r7, r2, r0, ror #2
   120c0:	andeq	r5, r1, r4, asr #20
   120c4:	andeq	r5, r1, r8, asr #20
   120c8:	andeq	r7, r2, r0, asr r1
   120cc:			; <UNDEFINED> instruction: 0x000159bc
   120d0:	muleq	r1, r0, r8
   120d4:	andeq	r0, r0, r5, asr r1
   120d8:	andeq	r5, r1, r4, lsr #20
   120dc:	andeq	r5, r1, r8, lsr sl
   120e0:	ldr	r3, [pc, #52]	; 1211c <__assert_fail@plt+0x11fc>
   120e4:	ldrb	r3, [r3, #40]	; 0x28
   120e8:	cmp	r3, #0
   120ec:	bxeq	lr
   120f0:	ldr	r3, [pc, #40]	; 12120 <__assert_fail@plt+0x1200>
   120f4:	push	{r4, lr}
   120f8:	ldr	r0, [r3]
   120fc:	bl	14d10 <__assert_fail@plt+0x3df0>
   12100:	cmp	r0, #0
   12104:	popeq	{r4, pc}
   12108:	bl	10e3c <__errno_location@plt>
   1210c:	ldr	r2, [pc, #16]	; 12124 <__assert_fail@plt+0x1204>
   12110:	ldr	r1, [r0]
   12114:	mov	r0, #1
   12118:	bl	10dd0 <error@plt>
   1211c:	andeq	r7, r2, r0, ror #2
   12120:	andeq	r7, r2, r0, asr r1
   12124:	andeq	r5, r1, r4, asr #20
   12128:	push	{r4, lr}
   1212c:	mov	r2, #5
   12130:	ldr	r4, [pc, #44]	; 12164 <__assert_fail@plt+0x1244>
   12134:	ldr	r1, [pc, #44]	; 12168 <__assert_fail@plt+0x1248>
   12138:	mov	r0, #0
   1213c:	bl	10d58 <dcgettext@plt>
   12140:	ldr	r1, [r4]
   12144:	bl	10cd4 <fputs_unlocked@plt>
   12148:	ldr	r1, [pc, #28]	; 1216c <__assert_fail@plt+0x124c>
   1214c:	mov	r2, #5
   12150:	mov	r0, #0
   12154:	bl	10d58 <dcgettext@plt>
   12158:	ldr	r1, [r4]
   1215c:	pop	{r4, lr}
   12160:	b	10cd4 <fputs_unlocked@plt>
   12164:	andeq	r7, r2, r4, asr r1
   12168:	andeq	r5, r1, ip, asr #20
   1216c:	andeq	r5, r1, ip, lsl #21
   12170:	ldr	r3, [pc, #4]	; 1217c <__assert_fail@plt+0x125c>
   12174:	str	r0, [r3]
   12178:	bx	lr
   1217c:	muleq	r2, ip, r1
   12180:	ldr	r3, [pc, #4]	; 1218c <__assert_fail@plt+0x126c>
   12184:	strb	r0, [r3, #4]
   12188:	bx	lr
   1218c:	muleq	r2, ip, r1
   12190:	ldr	r3, [pc, #180]	; 1224c <__assert_fail@plt+0x132c>
   12194:	push	{r4, r5, r6, lr}
   12198:	sub	sp, sp, #8
   1219c:	ldr	r0, [r3]
   121a0:	bl	14f30 <__assert_fail@plt+0x4010>
   121a4:	cmp	r0, #0
   121a8:	beq	121d0 <__assert_fail@plt+0x12b0>
   121ac:	bl	10e3c <__errno_location@plt>
   121b0:	ldr	r5, [pc, #152]	; 12250 <__assert_fail@plt+0x1330>
   121b4:	ldrb	r3, [r5, #4]
   121b8:	cmp	r3, #0
   121bc:	mov	r4, r0
   121c0:	beq	121ec <__assert_fail@plt+0x12cc>
   121c4:	ldr	r3, [r0]
   121c8:	cmp	r3, #32
   121cc:	bne	121ec <__assert_fail@plt+0x12cc>
   121d0:	ldr	r3, [pc, #124]	; 12254 <__assert_fail@plt+0x1334>
   121d4:	ldr	r0, [r3]
   121d8:	bl	14f30 <__assert_fail@plt+0x4010>
   121dc:	cmp	r0, #0
   121e0:	bne	1222c <__assert_fail@plt+0x130c>
   121e4:	add	sp, sp, #8
   121e8:	pop	{r4, r5, r6, pc}
   121ec:	mov	r2, #5
   121f0:	ldr	r1, [pc, #96]	; 12258 <__assert_fail@plt+0x1338>
   121f4:	mov	r0, #0
   121f8:	bl	10d58 <dcgettext@plt>
   121fc:	mov	r6, r0
   12200:	ldr	r0, [r5]
   12204:	cmp	r0, #0
   12208:	beq	12238 <__assert_fail@plt+0x1318>
   1220c:	ldr	r4, [r4]
   12210:	bl	14324 <__assert_fail@plt+0x3404>
   12214:	mov	r1, r4
   12218:	str	r6, [sp]
   1221c:	ldr	r2, [pc, #56]	; 1225c <__assert_fail@plt+0x133c>
   12220:	mov	r3, r0
   12224:	mov	r0, #0
   12228:	bl	10dd0 <error@plt>
   1222c:	ldr	r3, [pc, #44]	; 12260 <__assert_fail@plt+0x1340>
   12230:	ldr	r0, [r3]
   12234:	bl	10d28 <_exit@plt>
   12238:	mov	r3, r6
   1223c:	ldr	r1, [r4]
   12240:	ldr	r2, [pc, #28]	; 12264 <__assert_fail@plt+0x1344>
   12244:	bl	10dd0 <error@plt>
   12248:	b	1222c <__assert_fail@plt+0x130c>
   1224c:	andeq	r7, r2, r4, asr r1
   12250:	muleq	r2, ip, r1
   12254:	andeq	r7, r2, r8, asr #2
   12258:	strdeq	r5, [r1], -r8
   1225c:	andeq	r5, r1, r4, lsl #24
   12260:	strdeq	r7, [r2], -r0
   12264:			; <UNDEFINED> instruction: 0x000159bc
   12268:	b	10cf8 <posix_fadvise64@plt>
   1226c:	cmp	r0, #0
   12270:	bxeq	lr
   12274:	push	{r4, lr}
   12278:	sub	sp, sp, #16
   1227c:	mov	r4, r1
   12280:	bl	10e6c <fileno@plt>
   12284:	mov	r2, #0
   12288:	mov	r3, #0
   1228c:	str	r4, [sp, #8]
   12290:	strd	r2, [sp]
   12294:	bl	10cf8 <posix_fadvise64@plt>
   12298:	add	sp, sp, #16
   1229c:	pop	{r4, pc}
   122a0:	push	{r4, r5, r6, lr}
   122a4:	subs	r4, r0, #0
   122a8:	beq	1231c <__assert_fail@plt+0x13fc>
   122ac:	mov	r1, #47	; 0x2f
   122b0:	bl	10ec0 <strrchr@plt>
   122b4:	subs	r5, r0, #0
   122b8:	beq	12308 <__assert_fail@plt+0x13e8>
   122bc:	add	r6, r5, #1
   122c0:	sub	r3, r6, r4
   122c4:	cmp	r3, #6
   122c8:	ble	12308 <__assert_fail@plt+0x13e8>
   122cc:	mov	r2, #7
   122d0:	ldr	r1, [pc, #96]	; 12338 <__assert_fail@plt+0x1418>
   122d4:	sub	r0, r5, #6
   122d8:	bl	10efc <strncmp@plt>
   122dc:	cmp	r0, #0
   122e0:	bne	12308 <__assert_fail@plt+0x13e8>
   122e4:	mov	r2, #3
   122e8:	ldr	r1, [pc, #76]	; 1233c <__assert_fail@plt+0x141c>
   122ec:	mov	r0, r6
   122f0:	bl	10efc <strncmp@plt>
   122f4:	cmp	r0, #0
   122f8:	movne	r4, r6
   122fc:	ldreq	r3, [pc, #60]	; 12340 <__assert_fail@plt+0x1420>
   12300:	addeq	r4, r5, #4
   12304:	streq	r4, [r3]
   12308:	ldr	r2, [pc, #52]	; 12344 <__assert_fail@plt+0x1424>
   1230c:	ldr	r3, [pc, #52]	; 12348 <__assert_fail@plt+0x1428>
   12310:	str	r4, [r2]
   12314:	str	r4, [r3]
   12318:	pop	{r4, r5, r6, pc}
   1231c:	ldr	r3, [pc, #40]	; 1234c <__assert_fail@plt+0x142c>
   12320:	mov	r2, #55	; 0x37
   12324:	mov	r1, #1
   12328:	ldr	r3, [r3]
   1232c:	ldr	r0, [pc, #28]	; 12350 <__assert_fail@plt+0x1430>
   12330:	bl	10d94 <fwrite@plt>
   12334:	bl	10f08 <abort@plt>
   12338:	andeq	r5, r1, r4, asr #24
   1233c:	andeq	r5, r1, ip, asr #24
   12340:	andeq	r7, r2, r8, lsr r1
   12344:	andeq	r7, r2, r4, lsr #3
   12348:	andeq	r7, r2, ip, lsr r1
   1234c:	andeq	r7, r2, r8, asr #2
   12350:	andeq	r5, r1, ip, lsl #24
   12354:	push	{r4, lr}
   12358:	mov	r2, #48	; 0x30
   1235c:	mov	r4, r1
   12360:	mov	r1, #0
   12364:	bl	10e54 <memset@plt>
   12368:	cmp	r4, #10
   1236c:	beq	12378 <__assert_fail@plt+0x1458>
   12370:	str	r4, [r0]
   12374:	pop	{r4, pc}
   12378:	bl	10f08 <abort@plt>
   1237c:	push	{r4, r5, r6, lr}
   12380:	mov	r2, #5
   12384:	mov	r5, r0
   12388:	mov	r6, r1
   1238c:	mov	r1, r0
   12390:	mov	r0, #0
   12394:	bl	10d58 <dcgettext@plt>
   12398:	cmp	r5, r0
   1239c:	mov	r4, r0
   123a0:	beq	123ac <__assert_fail@plt+0x148c>
   123a4:	mov	r0, r4
   123a8:	pop	{r4, r5, r6, pc}
   123ac:	bl	14ff0 <__assert_fail@plt+0x40d0>
   123b0:	ldrb	r3, [r0]
   123b4:	bic	r3, r3, #32
   123b8:	cmp	r3, #85	; 0x55
   123bc:	bne	1241c <__assert_fail@plt+0x14fc>
   123c0:	ldrb	r3, [r0, #1]
   123c4:	bic	r3, r3, #32
   123c8:	cmp	r3, #84	; 0x54
   123cc:	bne	12494 <__assert_fail@plt+0x1574>
   123d0:	ldrb	r3, [r0, #2]
   123d4:	bic	r3, r3, #32
   123d8:	cmp	r3, #70	; 0x46
   123dc:	bne	12494 <__assert_fail@plt+0x1574>
   123e0:	ldrb	r3, [r0, #3]
   123e4:	cmp	r3, #45	; 0x2d
   123e8:	bne	12494 <__assert_fail@plt+0x1574>
   123ec:	ldrb	r3, [r0, #4]
   123f0:	cmp	r3, #56	; 0x38
   123f4:	bne	12494 <__assert_fail@plt+0x1574>
   123f8:	ldrb	r3, [r0, #5]
   123fc:	cmp	r3, #0
   12400:	bne	12494 <__assert_fail@plt+0x1574>
   12404:	ldrb	r2, [r4]
   12408:	ldr	r3, [pc, #156]	; 124ac <__assert_fail@plt+0x158c>
   1240c:	ldr	r4, [pc, #156]	; 124b0 <__assert_fail@plt+0x1590>
   12410:	cmp	r2, #96	; 0x60
   12414:	movne	r4, r3
   12418:	b	123a4 <__assert_fail@plt+0x1484>
   1241c:	cmp	r3, #71	; 0x47
   12420:	bne	12494 <__assert_fail@plt+0x1574>
   12424:	ldrb	r3, [r0, #1]
   12428:	bic	r3, r3, #32
   1242c:	cmp	r3, #66	; 0x42
   12430:	bne	12494 <__assert_fail@plt+0x1574>
   12434:	ldrb	r3, [r0, #2]
   12438:	cmp	r3, #49	; 0x31
   1243c:	bne	12494 <__assert_fail@plt+0x1574>
   12440:	ldrb	r3, [r0, #3]
   12444:	cmp	r3, #56	; 0x38
   12448:	bne	12494 <__assert_fail@plt+0x1574>
   1244c:	ldrb	r3, [r0, #4]
   12450:	cmp	r3, #48	; 0x30
   12454:	bne	12494 <__assert_fail@plt+0x1574>
   12458:	ldrb	r3, [r0, #5]
   1245c:	cmp	r3, #51	; 0x33
   12460:	bne	12494 <__assert_fail@plt+0x1574>
   12464:	ldrb	r3, [r0, #6]
   12468:	cmp	r3, #48	; 0x30
   1246c:	bne	12494 <__assert_fail@plt+0x1574>
   12470:	ldrb	r3, [r0, #7]
   12474:	cmp	r3, #0
   12478:	bne	12494 <__assert_fail@plt+0x1574>
   1247c:	ldrb	r2, [r4]
   12480:	ldr	r3, [pc, #44]	; 124b4 <__assert_fail@plt+0x1594>
   12484:	ldr	r4, [pc, #44]	; 124b8 <__assert_fail@plt+0x1598>
   12488:	cmp	r2, #96	; 0x60
   1248c:	movne	r4, r3
   12490:	b	123a4 <__assert_fail@plt+0x1484>
   12494:	ldr	r3, [pc, #32]	; 124bc <__assert_fail@plt+0x159c>
   12498:	ldr	r4, [pc, #32]	; 124c0 <__assert_fail@plt+0x15a0>
   1249c:	cmp	r6, #9
   124a0:	movne	r4, r3
   124a4:	mov	r0, r4
   124a8:	pop	{r4, r5, r6, pc}
   124ac:	andeq	r5, r1, r8, lsr #25
   124b0:			; <UNDEFINED> instruction: 0x00015cb4
   124b4:	andeq	r5, r1, ip, lsr #25
   124b8:			; <UNDEFINED> instruction: 0x00015cb0
   124bc:			; <UNDEFINED> instruction: 0x00015cb8
   124c0:	andeq	r5, r1, r4, lsr #25
   124c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c8:	sub	sp, sp, #124	; 0x7c
   124cc:	ldr	ip, [pc, #3576]	; 132cc <__assert_fail@plt+0x23ac>
   124d0:	str	r3, [sp, #24]
   124d4:	ldr	r3, [sp, #168]	; 0xa8
   124d8:	ldr	ip, [ip]
   124dc:	str	r3, [sp, #56]	; 0x38
   124e0:	ldr	r3, [sp, #172]	; 0xac
   124e4:	ldr	r8, [sp, #160]	; 0xa0
   124e8:	str	r3, [sp, #80]	; 0x50
   124ec:	ldr	r3, [sp, #176]	; 0xb0
   124f0:	mov	fp, r0
   124f4:	str	r3, [sp, #76]	; 0x4c
   124f8:	mov	sl, r1
   124fc:	str	r2, [sp, #36]	; 0x24
   12500:	str	ip, [sp, #116]	; 0x74
   12504:	bl	10dac <__ctype_get_mb_cur_max@plt>
   12508:	ldr	r3, [sp, #164]	; 0xa4
   1250c:	ands	r4, r3, #2
   12510:	movne	r3, #1
   12514:	moveq	r3, #0
   12518:	str	r3, [sp, #32]
   1251c:	str	r0, [sp, #64]	; 0x40
   12520:	cmp	r8, #10
   12524:	ldrls	pc, [pc, r8, lsl #2]
   12528:	b	13cd8 <__assert_fail@plt+0x2db8>
   1252c:	andeq	r2, r1, r0, lsr #18
   12530:			; <UNDEFINED> instruction: 0x000129b8
   12534:			; <UNDEFINED> instruction: 0x00012fb8
   12538:	ldrdeq	r2, [r1], -r8
   1253c:	andeq	r2, r1, ip, lsl #17
   12540:	ldrdeq	r2, [r1], -r4
   12544:	andeq	r2, r1, r0, asr r9
   12548:	andeq	r2, r1, r8, lsl #19
   1254c:	andeq	r2, r1, r8, asr r5
   12550:	andeq	r2, r1, r8, asr r5
   12554:	andeq	r2, r1, r8, asr r5
   12558:	cmp	r8, #10
   1255c:	beq	12580 <__assert_fail@plt+0x1660>
   12560:	mov	r1, r8
   12564:	ldr	r0, [pc, #3428]	; 132d0 <__assert_fail@plt+0x23b0>
   12568:	bl	1237c <__assert_fail@plt+0x145c>
   1256c:	mov	r1, r8
   12570:	str	r0, [sp, #80]	; 0x50
   12574:	ldr	r0, [pc, #3420]	; 132d8 <__assert_fail@plt+0x23b8>
   12578:	bl	1237c <__assert_fail@plt+0x145c>
   1257c:	str	r0, [sp, #76]	; 0x4c
   12580:	cmp	r4, #0
   12584:	movne	r4, #0
   12588:	beq	13998 <__assert_fail@plt+0x2a78>
   1258c:	ldr	r7, [sp, #76]	; 0x4c
   12590:	mov	r5, #0
   12594:	mov	r6, #1
   12598:	mov	r0, r7
   1259c:	str	r6, [sp, #40]	; 0x28
   125a0:	str	r5, [sp, #68]	; 0x44
   125a4:	bl	10e30 <strlen@plt>
   125a8:	str	r6, [sp, #28]
   125ac:	str	r5, [sp, #44]	; 0x2c
   125b0:	str	r5, [sp, #72]	; 0x48
   125b4:	str	r7, [sp, #60]	; 0x3c
   125b8:	str	r0, [sp, #52]	; 0x34
   125bc:	str	r8, [sp, #160]	; 0xa0
   125c0:	mov	r8, fp
   125c4:	ldr	fp, [sp, #160]	; 0xa0
   125c8:	mov	r9, #0
   125cc:	ldr	r3, [sp, #24]
   125d0:	cmn	r3, #1
   125d4:	beq	12b3c <__assert_fail@plt+0x1c1c>
   125d8:	ldr	r3, [sp, #24]
   125dc:	subs	r6, r3, r9
   125e0:	movne	r6, #1
   125e4:	cmp	r6, #0
   125e8:	beq	12b54 <__assert_fail@plt+0x1c34>
   125ec:	ldr	r7, [sp, #28]
   125f0:	ldr	r0, [sp, #36]	; 0x24
   125f4:	cmp	fp, #2
   125f8:	moveq	r7, #0
   125fc:	andne	r7, r7, #1
   12600:	add	r3, r0, r9
   12604:	cmp	r7, #0
   12608:	str	r3, [sp, #48]	; 0x30
   1260c:	beq	12ff8 <__assert_fail@plt+0x20d8>
   12610:	ldr	r2, [sp, #52]	; 0x34
   12614:	cmp	r2, #0
   12618:	beq	132dc <__assert_fail@plt+0x23bc>
   1261c:	ldr	r1, [sp, #24]
   12620:	cmp	r2, #1
   12624:	mov	r3, r2
   12628:	movls	r3, #0
   1262c:	movhi	r3, #1
   12630:	cmn	r1, #1
   12634:	movne	r3, #0
   12638:	cmp	r3, #0
   1263c:	add	r5, r9, r2
   12640:	beq	1264c <__assert_fail@plt+0x172c>
   12644:	bl	10e30 <strlen@plt>
   12648:	str	r0, [sp, #24]
   1264c:	ldr	r3, [sp, #24]
   12650:	cmp	r5, r3
   12654:	bhi	132dc <__assert_fail@plt+0x23bc>
   12658:	ldr	r2, [sp, #52]	; 0x34
   1265c:	ldr	r1, [sp, #60]	; 0x3c
   12660:	ldr	r0, [sp, #48]	; 0x30
   12664:	bl	10d4c <memcmp@plt>
   12668:	cmp	r0, #0
   1266c:	bne	132dc <__assert_fail@plt+0x23bc>
   12670:	ldr	r3, [sp, #32]
   12674:	cmp	r3, #0
   12678:	bne	13b98 <__assert_fail@plt+0x2c78>
   1267c:	ldr	r3, [sp, #48]	; 0x30
   12680:	ldrb	r5, [r3]
   12684:	cmp	r5, #126	; 0x7e
   12688:	ldrls	pc, [pc, r5, lsl #2]
   1268c:	b	12f5c <__assert_fail@plt+0x203c>
   12690:	andeq	r2, r1, r8, asr #28
   12694:	andeq	r2, r1, ip, asr pc
   12698:	andeq	r2, r1, ip, asr pc
   1269c:	andeq	r2, r1, ip, asr pc
   126a0:	andeq	r2, r1, ip, asr pc
   126a4:	andeq	r2, r1, ip, asr pc
   126a8:	andeq	r2, r1, ip, asr pc
   126ac:	andeq	r2, r1, r4, lsl pc
   126b0:	andeq	r2, r1, r4, lsl #30
   126b4:	andeq	r2, r1, r4, lsl #28
   126b8:	andeq	r2, r1, ip, asr #27
   126bc:	andeq	r2, r1, r4, lsr #28
   126c0:	andeq	r2, r1, ip, lsl #28
   126c4:	andeq	r2, r1, ip, lsr sp
   126c8:	andeq	r2, r1, ip, asr pc
   126cc:	andeq	r2, r1, ip, asr pc
   126d0:	andeq	r2, r1, ip, asr pc
   126d4:	andeq	r2, r1, ip, asr pc
   126d8:	andeq	r2, r1, ip, asr pc
   126dc:	andeq	r2, r1, ip, asr pc
   126e0:	andeq	r2, r1, ip, asr pc
   126e4:	andeq	r2, r1, ip, asr pc
   126e8:	andeq	r2, r1, ip, asr pc
   126ec:	andeq	r2, r1, ip, asr pc
   126f0:	andeq	r2, r1, ip, asr pc
   126f4:	andeq	r2, r1, ip, asr pc
   126f8:	andeq	r2, r1, ip, asr pc
   126fc:	andeq	r2, r1, ip, asr pc
   12700:	andeq	r2, r1, ip, asr pc
   12704:	andeq	r2, r1, ip, asr pc
   12708:	andeq	r2, r1, ip, asr pc
   1270c:	andeq	r2, r1, ip, asr pc
   12710:	andeq	r2, r1, ip, lsl pc
   12714:	andeq	r2, r1, r0, lsr lr
   12718:	andeq	r2, r1, r0, lsr lr
   1271c:	andeq	r2, r1, r4, lsr pc
   12720:	andeq	r2, r1, r0, lsr lr
   12724:	andeq	r2, r1, r0, asr pc
   12728:	andeq	r2, r1, r0, lsr lr
   1272c:	andeq	r2, r1, r0, ror ip
   12730:	andeq	r2, r1, r0, lsr lr
   12734:	andeq	r2, r1, r0, lsr lr
   12738:	andeq	r2, r1, r0, lsr lr
   1273c:	andeq	r2, r1, r0, asr pc
   12740:	andeq	r2, r1, r0, asr pc
   12744:	andeq	r2, r1, r0, asr pc
   12748:	andeq	r2, r1, r0, asr pc
   1274c:	andeq	r2, r1, r0, asr pc
   12750:	andeq	r2, r1, r0, asr pc
   12754:	andeq	r2, r1, r0, asr pc
   12758:	andeq	r2, r1, r0, asr pc
   1275c:	andeq	r2, r1, r0, asr pc
   12760:	andeq	r2, r1, r0, asr pc
   12764:	andeq	r2, r1, r0, asr pc
   12768:	andeq	r2, r1, r0, asr pc
   1276c:	andeq	r2, r1, r0, asr pc
   12770:	andeq	r2, r1, r0, asr pc
   12774:	andeq	r2, r1, r0, asr pc
   12778:	andeq	r2, r1, r0, asr pc
   1277c:	andeq	r2, r1, r0, lsr lr
   12780:	andeq	r2, r1, r0, lsr lr
   12784:	andeq	r2, r1, r0, lsr lr
   12788:	andeq	r2, r1, r0, lsr lr
   1278c:	andeq	r2, r1, r4, asr #24
   12790:	andeq	r2, r1, ip, asr pc
   12794:	andeq	r2, r1, r0, asr pc
   12798:	andeq	r2, r1, r0, asr pc
   1279c:	andeq	r2, r1, r0, asr pc
   127a0:	andeq	r2, r1, r0, asr pc
   127a4:	andeq	r2, r1, r0, asr pc
   127a8:	andeq	r2, r1, r0, asr pc
   127ac:	andeq	r2, r1, r0, asr pc
   127b0:	andeq	r2, r1, r0, asr pc
   127b4:	andeq	r2, r1, r0, asr pc
   127b8:	andeq	r2, r1, r0, asr pc
   127bc:	andeq	r2, r1, r0, asr pc
   127c0:	andeq	r2, r1, r0, asr pc
   127c4:	andeq	r2, r1, r0, asr pc
   127c8:	andeq	r2, r1, r0, asr pc
   127cc:	andeq	r2, r1, r0, asr pc
   127d0:	andeq	r2, r1, r0, asr pc
   127d4:	andeq	r2, r1, r0, asr pc
   127d8:	andeq	r2, r1, r0, asr pc
   127dc:	andeq	r2, r1, r0, asr pc
   127e0:	andeq	r2, r1, r0, asr pc
   127e4:	andeq	r2, r1, r0, asr pc
   127e8:	andeq	r2, r1, r0, asr pc
   127ec:	andeq	r2, r1, r0, asr pc
   127f0:	andeq	r2, r1, r0, asr pc
   127f4:	andeq	r2, r1, r0, asr pc
   127f8:	andeq	r2, r1, r0, asr pc
   127fc:	andeq	r2, r1, r0, lsr lr
   12800:	strdeq	r2, [r1], -ip
   12804:	andeq	r2, r1, r0, asr pc
   12808:	andeq	r2, r1, r0, lsr lr
   1280c:	andeq	r2, r1, r0, asr pc
   12810:	andeq	r2, r1, r0, lsr lr
   12814:	andeq	r2, r1, r0, asr pc
   12818:	andeq	r2, r1, r0, asr pc
   1281c:	andeq	r2, r1, r0, asr pc
   12820:	andeq	r2, r1, r0, asr pc
   12824:	andeq	r2, r1, r0, asr pc
   12828:	andeq	r2, r1, r0, asr pc
   1282c:	andeq	r2, r1, r0, asr pc
   12830:	andeq	r2, r1, r0, asr pc
   12834:	andeq	r2, r1, r0, asr pc
   12838:	andeq	r2, r1, r0, asr pc
   1283c:	andeq	r2, r1, r0, asr pc
   12840:	andeq	r2, r1, r0, asr pc
   12844:	andeq	r2, r1, r0, asr pc
   12848:	andeq	r2, r1, r0, asr pc
   1284c:	andeq	r2, r1, r0, asr pc
   12850:	andeq	r2, r1, r0, asr pc
   12854:	andeq	r2, r1, r0, asr pc
   12858:	andeq	r2, r1, r0, asr pc
   1285c:	andeq	r2, r1, r0, asr pc
   12860:	andeq	r2, r1, r0, asr pc
   12864:	andeq	r2, r1, r0, asr pc
   12868:	andeq	r2, r1, r0, asr pc
   1286c:	andeq	r2, r1, r0, asr pc
   12870:	andeq	r2, r1, r0, asr pc
   12874:	andeq	r2, r1, r0, asr pc
   12878:	andeq	r2, r1, r0, asr pc
   1287c:	andeq	r2, r1, r4, lsl sl
   12880:	andeq	r2, r1, r0, lsr lr
   12884:	andeq	r2, r1, r4, lsl sl
   12888:	andeq	r2, r1, r4, lsr pc
   1288c:	cmp	r4, #0
   12890:	moveq	r3, #1
   12894:	streq	r3, [sp, #28]
   12898:	beq	12fc4 <__assert_fail@plt+0x20a4>
   1289c:	mov	r3, #0
   128a0:	mov	r4, r3
   128a4:	mov	r2, #1
   128a8:	str	r2, [sp, #40]	; 0x28
   128ac:	str	r3, [sp, #68]	; 0x44
   128b0:	str	r2, [sp, #32]
   128b4:	str	r2, [sp, #52]	; 0x34
   128b8:	ldr	r3, [pc, #2584]	; 132d8 <__assert_fail@plt+0x23b8>
   128bc:	str	r4, [sp, #44]	; 0x2c
   128c0:	str	r4, [sp, #72]	; 0x48
   128c4:	str	r4, [sp, #28]
   128c8:	str	r3, [sp, #60]	; 0x3c
   128cc:	mov	r8, #2
   128d0:	b	125bc <__assert_fail@plt+0x169c>
   128d4:	cmp	r4, #0
   128d8:	bne	13b64 <__assert_fail@plt+0x2c44>
   128dc:	cmp	sl, #0
   128e0:	beq	13924 <__assert_fail@plt+0x2a04>
   128e4:	mov	r3, #34	; 0x22
   128e8:	strb	r3, [fp]
   128ec:	ldr	r3, [pc, #2528]	; 132d4 <__assert_fail@plt+0x23b4>
   128f0:	mov	r1, r4
   128f4:	mov	r2, #1
   128f8:	str	r4, [sp, #68]	; 0x44
   128fc:	str	r2, [sp, #40]	; 0x28
   12900:	mov	r4, r2
   12904:	str	r1, [sp, #44]	; 0x2c
   12908:	str	r1, [sp, #72]	; 0x48
   1290c:	str	r1, [sp, #32]
   12910:	str	r2, [sp, #28]
   12914:	str	r2, [sp, #52]	; 0x34
   12918:	str	r3, [sp, #60]	; 0x3c
   1291c:	b	125bc <__assert_fail@plt+0x169c>
   12920:	mov	r3, #0
   12924:	str	r3, [sp, #68]	; 0x44
   12928:	str	r3, [sp, #44]	; 0x2c
   1292c:	str	r3, [sp, #32]
   12930:	str	r3, [sp, #28]
   12934:	str	r3, [sp, #60]	; 0x3c
   12938:	mov	r3, #1
   1293c:	str	r8, [sp, #72]	; 0x48
   12940:	str	r8, [sp, #52]	; 0x34
   12944:	mov	r4, r8
   12948:	str	r3, [sp, #40]	; 0x28
   1294c:	b	125bc <__assert_fail@plt+0x169c>
   12950:	mov	r3, #1
   12954:	str	r3, [sp, #40]	; 0x28
   12958:	str	r3, [sp, #32]
   1295c:	str	r3, [sp, #28]
   12960:	str	r3, [sp, #52]	; 0x34
   12964:	ldr	r3, [pc, #2408]	; 132d4 <__assert_fail@plt+0x23b4>
   12968:	mov	r2, #0
   1296c:	mov	r4, r2
   12970:	str	r2, [sp, #68]	; 0x44
   12974:	str	r2, [sp, #44]	; 0x2c
   12978:	str	r2, [sp, #72]	; 0x48
   1297c:	str	r3, [sp, #60]	; 0x3c
   12980:	mov	r8, #5
   12984:	b	125bc <__assert_fail@plt+0x169c>
   12988:	mov	r3, #0
   1298c:	mov	r2, #1
   12990:	str	r2, [sp, #40]	; 0x28
   12994:	mov	r4, r3
   12998:	str	r3, [sp, #68]	; 0x44
   1299c:	str	r2, [sp, #28]
   129a0:	str	r3, [sp, #44]	; 0x2c
   129a4:	str	r3, [sp, #72]	; 0x48
   129a8:	str	r3, [sp, #32]
   129ac:	str	r3, [sp, #52]	; 0x34
   129b0:	str	r3, [sp, #60]	; 0x3c
   129b4:	b	125bc <__assert_fail@plt+0x169c>
   129b8:	mov	r2, #1
   129bc:	mov	r3, #0
   129c0:	str	r2, [sp, #40]	; 0x28
   129c4:	mov	r4, r3
   129c8:	str	r3, [sp, #68]	; 0x44
   129cc:	str	r8, [sp, #52]	; 0x34
   129d0:	str	r2, [sp, #32]
   129d4:	b	128b8 <__assert_fail@plt+0x1998>
   129d8:	mov	r3, #1
   129dc:	str	r3, [sp, #40]	; 0x28
   129e0:	str	r3, [sp, #32]
   129e4:	str	r3, [sp, #28]
   129e8:	str	r3, [sp, #52]	; 0x34
   129ec:	ldr	r3, [pc, #2276]	; 132d8 <__assert_fail@plt+0x23b8>
   129f0:	mov	r2, #0
   129f4:	mov	r4, r2
   129f8:	str	r2, [sp, #68]	; 0x44
   129fc:	str	r2, [sp, #44]	; 0x2c
   12a00:	str	r2, [sp, #72]	; 0x48
   12a04:	str	r3, [sp, #60]	; 0x3c
   12a08:	mov	r8, #2
   12a0c:	b	125bc <__assert_fail@plt+0x169c>
   12a10:	mov	r7, #0
   12a14:	ldr	r3, [sp, #24]
   12a18:	cmn	r3, #1
   12a1c:	beq	13558 <__assert_fail@plt+0x2638>
   12a20:	ldr	r3, [sp, #24]
   12a24:	subs	r3, r3, #1
   12a28:	movne	r3, #1
   12a2c:	cmp	r3, #0
   12a30:	sub	r2, fp, #2
   12a34:	clz	r2, r2
   12a38:	lsr	r2, r2, #5
   12a3c:	bne	12c38 <__assert_fail@plt+0x1d18>
   12a40:	cmp	r9, #0
   12a44:	bne	12c38 <__assert_fail@plt+0x1d18>
   12a48:	ldr	r3, [sp, #32]
   12a4c:	tst	r3, r2
   12a50:	bne	12d58 <__assert_fail@plt+0x1e38>
   12a54:	ldr	r3, [sp, #28]
   12a58:	eor	r3, r3, #1
   12a5c:	orr	r3, r2, r3
   12a60:	ldr	r2, [sp, #32]
   12a64:	eor	r3, r3, #1
   12a68:	orrs	r3, r2, r3
   12a6c:	beq	12a9c <__assert_fail@plt+0x1b7c>
   12a70:	mov	r3, #0
   12a74:	ldr	r1, [sp, #56]	; 0x38
   12a78:	cmp	r1, #0
   12a7c:	beq	12a9c <__assert_fail@plt+0x1b7c>
   12a80:	lsr	r2, r5, #5
   12a84:	and	r0, r5, #31
   12a88:	uxtb	r2, r2
   12a8c:	ldr	r1, [r1, r2, lsl #2]
   12a90:	lsr	r2, r1, r0
   12a94:	tst	r2, #1
   12a98:	bne	12aa4 <__assert_fail@plt+0x1b84>
   12a9c:	cmp	r7, #0
   12aa0:	beq	12cf4 <__assert_fail@plt+0x1dd4>
   12aa4:	sub	r2, fp, #2
   12aa8:	clz	r2, r2
   12aac:	lsr	r2, r2, #5
   12ab0:	ldr	r3, [sp, #32]
   12ab4:	cmp	r3, #0
   12ab8:	bne	12de4 <__assert_fail@plt+0x1ec4>
   12abc:	ldr	r3, [sp, #44]	; 0x2c
   12ac0:	eor	r3, r3, #1
   12ac4:	ands	r3, r2, r3
   12ac8:	beq	12b00 <__assert_fail@plt+0x1be0>
   12acc:	cmp	sl, r4
   12ad0:	movhi	r2, #39	; 0x27
   12ad4:	strbhi	r2, [r8, r4]
   12ad8:	add	r2, r4, #1
   12adc:	cmp	r2, sl
   12ae0:	movcc	r1, #36	; 0x24
   12ae4:	strbcc	r1, [r8, r2]
   12ae8:	add	r2, r4, #2
   12aec:	cmp	r2, sl
   12af0:	add	r4, r4, #3
   12af4:	movcc	r1, #39	; 0x27
   12af8:	strbcc	r1, [r8, r2]
   12afc:	str	r3, [sp, #44]	; 0x2c
   12b00:	cmp	r4, sl
   12b04:	movcc	r3, #92	; 0x5c
   12b08:	strbcc	r3, [r8, r4]
   12b0c:	add	r9, r9, #1
   12b10:	add	r4, r4, #1
   12b14:	cmp	r4, sl
   12b18:	ldr	r3, [sp, #40]	; 0x28
   12b1c:	strbcc	r5, [r8, r4]
   12b20:	cmp	r6, #0
   12b24:	moveq	r3, #0
   12b28:	str	r3, [sp, #40]	; 0x28
   12b2c:	ldr	r3, [sp, #24]
   12b30:	add	r4, r4, #1
   12b34:	cmn	r3, #1
   12b38:	bne	125d8 <__assert_fail@plt+0x16b8>
   12b3c:	ldr	r3, [sp, #36]	; 0x24
   12b40:	ldrb	r6, [r3, r9]
   12b44:	adds	r6, r6, #0
   12b48:	movne	r6, #1
   12b4c:	cmp	r6, #0
   12b50:	bne	125ec <__assert_fail@plt+0x16cc>
   12b54:	str	fp, [sp, #160]	; 0xa0
   12b58:	mov	fp, r8
   12b5c:	ldr	r8, [sp, #160]	; 0xa0
   12b60:	ldr	r1, [sp, #32]
   12b64:	cmp	r4, #0
   12b68:	sub	r2, r8, #2
   12b6c:	clz	r2, r2
   12b70:	lsr	r2, r2, #5
   12b74:	andeq	r3, r2, r1
   12b78:	movne	r3, #0
   12b7c:	cmp	r3, #0
   12b80:	bne	13c6c <__assert_fail@plt+0x2d4c>
   12b84:	eor	r3, r1, #1
   12b88:	ands	r2, r2, r3
   12b8c:	beq	13ba8 <__assert_fail@plt+0x2c88>
   12b90:	ldr	r3, [sp, #68]	; 0x44
   12b94:	cmp	r3, #0
   12b98:	beq	13bac <__assert_fail@plt+0x2c8c>
   12b9c:	ldr	r3, [sp, #40]	; 0x28
   12ba0:	cmp	r3, #0
   12ba4:	bne	13c28 <__assert_fail@plt+0x2d08>
   12ba8:	ldr	r3, [sp, #72]	; 0x48
   12bac:	adds	r3, r3, #0
   12bb0:	movne	r3, #1
   12bb4:	cmp	sl, #0
   12bb8:	movne	r3, #0
   12bbc:	cmp	r3, #0
   12bc0:	ldreq	r2, [sp, #68]	; 0x44
   12bc4:	beq	13bac <__assert_fail@plt+0x2c8c>
   12bc8:	ldr	sl, [sp, #72]	; 0x48
   12bcc:	str	r3, [sp, #68]	; 0x44
   12bd0:	ldr	r3, [pc, #1792]	; 132d8 <__assert_fail@plt+0x23b8>
   12bd4:	mov	r2, #39	; 0x27
   12bd8:	mov	r4, #1
   12bdc:	str	r3, [sp, #60]	; 0x3c
   12be0:	mov	r3, #0
   12be4:	strb	r2, [fp]
   12be8:	str	r4, [sp, #52]	; 0x34
   12bec:	mov	r8, #2
   12bf0:	str	r3, [sp, #32]
   12bf4:	b	125bc <__assert_fail@plt+0x169c>
   12bf8:	mov	r7, #0
   12bfc:	cmp	fp, #2
   12c00:	beq	13538 <__assert_fail@plt+0x2618>
   12c04:	ldr	r3, [sp, #52]	; 0x34
   12c08:	ldr	r2, [sp, #28]
   12c0c:	ldr	r1, [sp, #32]
   12c10:	cmp	r3, #0
   12c14:	andne	r2, r2, r1
   12c18:	moveq	r2, #0
   12c1c:	cmp	r2, #0
   12c20:	moveq	r5, #92	; 0x5c
   12c24:	moveq	r3, r5
   12c28:	bne	13544 <__assert_fail@plt+0x2624>
   12c2c:	ldr	r1, [sp, #28]
   12c30:	cmp	r1, #0
   12c34:	bne	13cb4 <__assert_fail@plt+0x2d94>
   12c38:	mov	r6, #0
   12c3c:	b	12a54 <__assert_fail@plt+0x1b34>
   12c40:	mov	r7, #0
   12c44:	cmp	fp, #2
   12c48:	beq	135a8 <__assert_fail@plt+0x2688>
   12c4c:	cmp	fp, #5
   12c50:	beq	1356c <__assert_fail@plt+0x264c>
   12c54:	sub	r2, fp, #2
   12c58:	mov	r6, #0
   12c5c:	clz	r2, r2
   12c60:	mov	r5, #63	; 0x3f
   12c64:	lsr	r2, r2, #5
   12c68:	b	12a54 <__assert_fail@plt+0x1b34>
   12c6c:	mov	r7, #0
   12c70:	cmp	fp, #2
   12c74:	strne	r6, [sp, #68]	; 0x44
   12c78:	movne	r2, #0
   12c7c:	movne	r5, #39	; 0x27
   12c80:	bne	12a54 <__assert_fail@plt+0x1b34>
   12c84:	ldr	r3, [sp, #32]
   12c88:	cmp	r3, #0
   12c8c:	bne	13988 <__assert_fail@plt+0x2a68>
   12c90:	cmp	sl, #0
   12c94:	ldr	r3, [sp, #72]	; 0x48
   12c98:	clz	r3, r3
   12c9c:	lsr	r3, r3, #5
   12ca0:	moveq	r3, #0
   12ca4:	cmp	r3, #0
   12ca8:	bne	138bc <__assert_fail@plt+0x299c>
   12cac:	cmp	sl, r4
   12cb0:	movhi	r3, #39	; 0x27
   12cb4:	strbhi	r3, [r8, r4]
   12cb8:	add	r3, r4, #1
   12cbc:	cmp	sl, r3
   12cc0:	movhi	r2, #92	; 0x5c
   12cc4:	strbhi	r2, [r8, r3]
   12cc8:	add	r3, r4, #2
   12ccc:	cmp	sl, r3
   12cd0:	movhi	r2, #39	; 0x27
   12cd4:	strbhi	r2, [r8, r3]
   12cd8:	mov	r3, #0
   12cdc:	cmp	r7, #0
   12ce0:	add	r4, r4, #3
   12ce4:	str	r3, [sp, #44]	; 0x2c
   12ce8:	str	r6, [sp, #68]	; 0x44
   12cec:	mov	r5, #39	; 0x27
   12cf0:	bne	12aa4 <__assert_fail@plt+0x1b84>
   12cf4:	ldr	r2, [sp, #44]	; 0x2c
   12cf8:	eor	r3, r3, #1
   12cfc:	and	r3, r3, r2
   12d00:	add	r9, r9, #1
   12d04:	uxtb	r3, r3
   12d08:	cmp	r3, #0
   12d0c:	beq	12b14 <__assert_fail@plt+0x1bf4>
   12d10:	cmp	sl, r4
   12d14:	movhi	r3, #39	; 0x27
   12d18:	strbhi	r3, [r8, r4]
   12d1c:	add	r3, r4, #1
   12d20:	cmp	sl, r3
   12d24:	movhi	r2, #39	; 0x27
   12d28:	strbhi	r2, [r8, r3]
   12d2c:	mov	r3, #0
   12d30:	add	r4, r4, #2
   12d34:	str	r3, [sp, #44]	; 0x2c
   12d38:	b	12b14 <__assert_fail@plt+0x1bf4>
   12d3c:	mov	r3, #114	; 0x72
   12d40:	ldr	r1, [sp, #32]
   12d44:	sub	r2, fp, #2
   12d48:	clz	r2, r2
   12d4c:	lsr	r2, r2, #5
   12d50:	tst	r2, r1
   12d54:	beq	12c2c <__assert_fail@plt+0x1d0c>
   12d58:	mov	fp, r8
   12d5c:	mov	r8, #2
   12d60:	ldr	r3, [sp, #28]
   12d64:	cmp	r3, #0
   12d68:	movne	r8, #4
   12d6c:	ldr	r3, [sp, #164]	; 0xa4
   12d70:	mov	ip, #0
   12d74:	bic	r3, r3, #2
   12d78:	str	r3, [sp, #4]
   12d7c:	ldr	r3, [sp, #76]	; 0x4c
   12d80:	str	r8, [sp]
   12d84:	str	r3, [sp, #16]
   12d88:	ldr	r3, [sp, #80]	; 0x50
   12d8c:	ldr	r2, [sp, #36]	; 0x24
   12d90:	str	r3, [sp, #12]
   12d94:	mov	r1, sl
   12d98:	ldr	r3, [sp, #24]
   12d9c:	mov	r0, fp
   12da0:	str	ip, [sp, #8]
   12da4:	bl	124c4 <__assert_fail@plt+0x15a4>
   12da8:	mov	r4, r0
   12dac:	ldr	r3, [pc, #1304]	; 132cc <__assert_fail@plt+0x23ac>
   12db0:	ldr	r2, [sp, #116]	; 0x74
   12db4:	mov	r0, r4
   12db8:	ldr	r3, [r3]
   12dbc:	cmp	r2, r3
   12dc0:	bne	13cb0 <__assert_fail@plt+0x2d90>
   12dc4:	add	sp, sp, #124	; 0x7c
   12dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dcc:	mov	r5, #110	; 0x6e
   12dd0:	ldr	r3, [sp, #32]
   12dd4:	mov	r2, #0
   12dd8:	cmp	r3, #0
   12ddc:	mov	r6, r2
   12de0:	beq	12abc <__assert_fail@plt+0x1b9c>
   12de4:	str	fp, [sp, #160]	; 0xa0
   12de8:	mov	fp, r8
   12dec:	ldr	r8, [sp, #160]	; 0xa0
   12df0:	mov	r3, r2
   12df4:	ldr	r2, [sp, #28]
   12df8:	and	r2, r2, r3
   12dfc:	str	r2, [sp, #28]
   12e00:	b	12d60 <__assert_fail@plt+0x1e40>
   12e04:	mov	r5, #116	; 0x74
   12e08:	b	12dd0 <__assert_fail@plt+0x1eb0>
   12e0c:	mov	r5, #102	; 0x66
   12e10:	ldr	r3, [sp, #32]
   12e14:	cmp	r3, #0
   12e18:	bne	139c4 <__assert_fail@plt+0x2aa4>
   12e1c:	mov	r6, #0
   12e20:	b	12b00 <__assert_fail@plt+0x1be0>
   12e24:	mov	r5, #118	; 0x76
   12e28:	b	12e10 <__assert_fail@plt+0x1ef0>
   12e2c:	mov	r7, #0
   12e30:	mov	r6, #0
   12e34:	b	12a70 <__assert_fail@plt+0x1b50>
   12e38:	ldr	r3, [sp, #32]
   12e3c:	cmp	r3, #0
   12e40:	bne	13c08 <__assert_fail@plt+0x2ce8>
   12e44:	mov	r7, r3
   12e48:	ldr	r3, [sp, #44]	; 0x2c
   12e4c:	sub	r2, fp, #2
   12e50:	eor	r3, r3, #1
   12e54:	clz	r2, r2
   12e58:	lsr	r2, r2, #5
   12e5c:	ands	r3, r2, r3
   12e60:	beq	138a8 <__assert_fail@plt+0x2988>
   12e64:	cmp	sl, r4
   12e68:	movhi	r1, #39	; 0x27
   12e6c:	strbhi	r1, [r8, r4]
   12e70:	add	r1, r4, #1
   12e74:	cmp	sl, r1
   12e78:	movhi	r0, #36	; 0x24
   12e7c:	strbhi	r0, [r8, r1]
   12e80:	add	r1, r4, #2
   12e84:	cmp	sl, r1
   12e88:	movhi	r0, #39	; 0x27
   12e8c:	strbhi	r0, [r8, r1]
   12e90:	add	r1, r4, #3
   12e94:	cmp	sl, r1
   12e98:	bls	13908 <__assert_fail@plt+0x29e8>
   12e9c:	mov	r4, r1
   12ea0:	mov	r1, #92	; 0x5c
   12ea4:	strb	r1, [r8, r4]
   12ea8:	mov	r1, r4
   12eac:	str	r3, [sp, #44]	; 0x2c
   12eb0:	cmp	fp, #2
   12eb4:	add	r4, r4, #1
   12eb8:	beq	13950 <__assert_fail@plt+0x2a30>
   12ebc:	ldr	r0, [sp, #24]
   12ec0:	add	r3, r9, #1
   12ec4:	cmp	r3, r0
   12ec8:	bcs	12ee0 <__assert_fail@plt+0x1fc0>
   12ecc:	ldr	r0, [sp, #36]	; 0x24
   12ed0:	ldrb	r3, [r0, r3]
   12ed4:	sub	r3, r3, #48	; 0x30
   12ed8:	cmp	r3, #9
   12edc:	bls	13960 <__assert_fail@plt+0x2a40>
   12ee0:	mov	r5, #48	; 0x30
   12ee4:	ldr	r3, [sp, #28]
   12ee8:	eor	r3, r3, #1
   12eec:	orrs	r2, r2, r3
   12ef0:	mov	r3, r6
   12ef4:	moveq	r6, r2
   12ef8:	beq	12a74 <__assert_fail@plt+0x1b54>
   12efc:	mov	r6, #0
   12f00:	b	12a9c <__assert_fail@plt+0x1b7c>
   12f04:	mov	r2, #0
   12f08:	mov	r6, r2
   12f0c:	mov	r5, #98	; 0x62
   12f10:	b	12abc <__assert_fail@plt+0x1b9c>
   12f14:	mov	r5, #97	; 0x61
   12f18:	b	12e1c <__assert_fail@plt+0x1efc>
   12f1c:	mov	r3, r7
   12f20:	mov	r6, r7
   12f24:	mov	r2, #0
   12f28:	mov	r7, r3
   12f2c:	mov	r5, #32
   12f30:	b	12a54 <__assert_fail@plt+0x1b34>
   12f34:	cmp	r9, #0
   12f38:	mov	r3, r7
   12f3c:	bne	13504 <__assert_fail@plt+0x25e4>
   12f40:	mov	r6, r7
   12f44:	mov	r2, r9
   12f48:	mov	r7, r3
   12f4c:	b	12a54 <__assert_fail@plt+0x1b34>
   12f50:	mov	r6, r7
   12f54:	b	12a70 <__assert_fail@plt+0x1b50>
   12f58:	mov	r7, #0
   12f5c:	ldr	r3, [sp, #64]	; 0x40
   12f60:	cmp	r3, #1
   12f64:	bne	135c0 <__assert_fail@plt+0x26a0>
   12f68:	bl	10e18 <__ctype_b_loc@plt>
   12f6c:	ldr	r2, [sp, #64]	; 0x40
   12f70:	sxth	r3, r5
   12f74:	mov	ip, r2
   12f78:	lsl	r3, r3, #1
   12f7c:	ldr	r2, [r0]
   12f80:	ldrh	r3, [r2, r3]
   12f84:	and	r3, r3, #16384	; 0x4000
   12f88:	cmp	r3, #0
   12f8c:	ldr	r3, [sp, #28]
   12f90:	movne	r6, #1
   12f94:	moveq	r6, #0
   12f98:	movne	r2, #0
   12f9c:	andeq	r2, r3, #1
   12fa0:	cmp	r2, #0
   12fa4:	bne	138d0 <__assert_fail@plt+0x29b0>
   12fa8:	sub	r2, fp, #2
   12fac:	clz	r2, r2
   12fb0:	lsr	r2, r2, #5
   12fb4:	b	12a54 <__assert_fail@plt+0x1b34>
   12fb8:	cmp	r4, #0
   12fbc:	bne	13c7c <__assert_fail@plt+0x2d5c>
   12fc0:	str	r4, [sp, #28]
   12fc4:	cmp	sl, #0
   12fc8:	bne	13cc0 <__assert_fail@plt+0x2da0>
   12fcc:	ldr	r3, [pc, #772]	; 132d8 <__assert_fail@plt+0x23b8>
   12fd0:	mov	r4, #1
   12fd4:	str	r4, [sp, #40]	; 0x28
   12fd8:	str	r3, [sp, #60]	; 0x3c
   12fdc:	str	r4, [sp, #52]	; 0x34
   12fe0:	str	sl, [sp, #72]	; 0x48
   12fe4:	str	sl, [sp, #68]	; 0x44
   12fe8:	str	sl, [sp, #44]	; 0x2c
   12fec:	str	sl, [sp, #32]
   12ff0:	mov	r8, #2
   12ff4:	b	125bc <__assert_fail@plt+0x169c>
   12ff8:	ldr	r3, [sp, #36]	; 0x24
   12ffc:	ldrb	r5, [r3, r9]
   13000:	cmp	r5, #126	; 0x7e
   13004:	ldrls	pc, [pc, r5, lsl #2]
   13008:	b	12f5c <__assert_fail@plt+0x203c>
   1300c:	andeq	r3, r1, r0, asr #4
   13010:	andeq	r2, r1, ip, asr pc
   13014:	andeq	r2, r1, ip, asr pc
   13018:	andeq	r2, r1, ip, asr pc
   1301c:	andeq	r2, r1, ip, asr pc
   13020:	andeq	r2, r1, ip, asr pc
   13024:	andeq	r2, r1, ip, asr pc
   13028:	andeq	r3, r1, ip, lsr #4
   1302c:	andeq	r3, r1, r8, lsl r2
   13030:	andeq	r3, r1, r0, lsl r2
   13034:	andeq	r3, r1, r8, lsl #4
   13038:			; <UNDEFINED> instruction: 0x000132b8
   1303c:	andeq	r3, r1, r4, lsr #5
   13040:	andeq	r2, r1, ip, lsr sp
   13044:	andeq	r2, r1, ip, asr pc
   13048:	andeq	r2, r1, ip, asr pc
   1304c:	andeq	r2, r1, ip, asr pc
   13050:	andeq	r2, r1, ip, asr pc
   13054:	andeq	r2, r1, ip, asr pc
   13058:	andeq	r2, r1, ip, asr pc
   1305c:	andeq	r2, r1, ip, asr pc
   13060:	andeq	r2, r1, ip, asr pc
   13064:	andeq	r2, r1, ip, asr pc
   13068:	andeq	r2, r1, ip, asr pc
   1306c:	andeq	r2, r1, ip, asr pc
   13070:	andeq	r2, r1, ip, asr pc
   13074:	andeq	r2, r1, ip, asr pc
   13078:	andeq	r2, r1, ip, asr pc
   1307c:	andeq	r2, r1, ip, asr pc
   13080:	andeq	r2, r1, ip, asr pc
   13084:	andeq	r2, r1, ip, asr pc
   13088:	andeq	r2, r1, ip, asr pc
   1308c:	muleq	r1, r4, r2
   13090:	andeq	r3, r1, r0, lsl #5
   13094:	andeq	r3, r1, r0, lsl #5
   13098:	andeq	r3, r1, r0, ror r2
   1309c:	andeq	r3, r1, r0, lsl #5
   130a0:	andeq	r2, r1, r8, lsr #31
   130a4:	andeq	r3, r1, r0, lsl #5
   130a8:	andeq	r2, r1, r0, ror ip
   130ac:	andeq	r3, r1, r0, lsl #5
   130b0:	andeq	r3, r1, r0, lsl #5
   130b4:	andeq	r3, r1, r0, lsl #5
   130b8:	andeq	r2, r1, r8, lsr #31
   130bc:	andeq	r2, r1, r8, lsr #31
   130c0:	andeq	r2, r1, r8, lsr #31
   130c4:	andeq	r2, r1, r8, lsr #31
   130c8:	andeq	r2, r1, r8, lsr #31
   130cc:	andeq	r2, r1, r8, lsr #31
   130d0:	andeq	r2, r1, r8, lsr #31
   130d4:	andeq	r2, r1, r8, lsr #31
   130d8:	andeq	r2, r1, r8, lsr #31
   130dc:	andeq	r2, r1, r8, lsr #31
   130e0:	andeq	r2, r1, r8, lsr #31
   130e4:	andeq	r2, r1, r8, lsr #31
   130e8:	andeq	r2, r1, r8, lsr #31
   130ec:	andeq	r2, r1, r8, lsr #31
   130f0:	andeq	r2, r1, r8, lsr #31
   130f4:	andeq	r2, r1, r8, lsr #31
   130f8:	andeq	r3, r1, r0, lsl #5
   130fc:	andeq	r3, r1, r0, lsl #5
   13100:	andeq	r3, r1, r0, lsl #5
   13104:	andeq	r3, r1, r0, lsl #5
   13108:	andeq	r2, r1, r4, asr #24
   1310c:	andeq	r2, r1, ip, asr pc
   13110:	andeq	r2, r1, r8, lsr #31
   13114:	andeq	r2, r1, r8, lsr #31
   13118:	andeq	r2, r1, r8, lsr #31
   1311c:	andeq	r2, r1, r8, lsr #31
   13120:	andeq	r2, r1, r8, lsr #31
   13124:	andeq	r2, r1, r8, lsr #31
   13128:	andeq	r2, r1, r8, lsr #31
   1312c:	andeq	r2, r1, r8, lsr #31
   13130:	andeq	r2, r1, r8, lsr #31
   13134:	andeq	r2, r1, r8, lsr #31
   13138:	andeq	r2, r1, r8, lsr #31
   1313c:	andeq	r2, r1, r8, lsr #31
   13140:	andeq	r2, r1, r8, lsr #31
   13144:	andeq	r2, r1, r8, lsr #31
   13148:	andeq	r2, r1, r8, lsr #31
   1314c:	andeq	r2, r1, r8, lsr #31
   13150:	andeq	r2, r1, r8, lsr #31
   13154:	andeq	r2, r1, r8, lsr #31
   13158:	andeq	r2, r1, r8, lsr #31
   1315c:	andeq	r2, r1, r8, lsr #31
   13160:	andeq	r2, r1, r8, lsr #31
   13164:	andeq	r2, r1, r8, lsr #31
   13168:	andeq	r2, r1, r8, lsr #31
   1316c:	andeq	r2, r1, r8, lsr #31
   13170:	andeq	r2, r1, r8, lsr #31
   13174:	andeq	r2, r1, r8, lsr #31
   13178:	andeq	r3, r1, r0, lsl #5
   1317c:	strdeq	r2, [r1], -ip
   13180:	andeq	r2, r1, r8, lsr #31
   13184:	andeq	r3, r1, r0, lsl #5
   13188:	andeq	r2, r1, r8, lsr #31
   1318c:	andeq	r3, r1, r0, lsl #5
   13190:	andeq	r2, r1, r8, lsr #31
   13194:	andeq	r2, r1, r8, lsr #31
   13198:	andeq	r2, r1, r8, lsr #31
   1319c:	andeq	r2, r1, r8, lsr #31
   131a0:	andeq	r2, r1, r8, lsr #31
   131a4:	andeq	r2, r1, r8, lsr #31
   131a8:	andeq	r2, r1, r8, lsr #31
   131ac:	andeq	r2, r1, r8, lsr #31
   131b0:	andeq	r2, r1, r8, lsr #31
   131b4:	andeq	r2, r1, r8, lsr #31
   131b8:	andeq	r2, r1, r8, lsr #31
   131bc:	andeq	r2, r1, r8, lsr #31
   131c0:	andeq	r2, r1, r8, lsr #31
   131c4:	andeq	r2, r1, r8, lsr #31
   131c8:	andeq	r2, r1, r8, lsr #31
   131cc:	andeq	r2, r1, r8, lsr #31
   131d0:	andeq	r2, r1, r8, lsr #31
   131d4:	andeq	r2, r1, r8, lsr #31
   131d8:	andeq	r2, r1, r8, lsr #31
   131dc:	andeq	r2, r1, r8, lsr #31
   131e0:	andeq	r2, r1, r8, lsr #31
   131e4:	andeq	r2, r1, r8, lsr #31
   131e8:	andeq	r2, r1, r8, lsr #31
   131ec:	andeq	r2, r1, r8, lsr #31
   131f0:	andeq	r2, r1, r8, lsr #31
   131f4:	andeq	r2, r1, r8, lsr #31
   131f8:	andeq	r2, r1, r4, lsl sl
   131fc:	andeq	r3, r1, r0, lsl #5
   13200:	andeq	r2, r1, r4, lsl sl
   13204:	andeq	r3, r1, r0, ror r2
   13208:	mov	r3, #110	; 0x6e
   1320c:	b	12d40 <__assert_fail@plt+0x1e20>
   13210:	mov	r3, #116	; 0x74
   13214:	b	12d40 <__assert_fail@plt+0x1e20>
   13218:	sub	r2, fp, #2
   1321c:	mov	r3, #98	; 0x62
   13220:	clz	r2, r2
   13224:	lsr	r2, r2, #5
   13228:	b	12c2c <__assert_fail@plt+0x1d0c>
   1322c:	sub	r2, fp, #2
   13230:	mov	r3, #97	; 0x61
   13234:	clz	r2, r2
   13238:	lsr	r2, r2, #5
   1323c:	b	12c2c <__assert_fail@plt+0x1d0c>
   13240:	ldr	r3, [sp, #28]
   13244:	cmp	r3, #0
   13248:	bne	12e38 <__assert_fail@plt+0x1f18>
   1324c:	ldr	r3, [sp, #164]	; 0xa4
   13250:	tst	r3, #1
   13254:	bne	138c8 <__assert_fail@plt+0x29a8>
   13258:	ldr	r6, [sp, #28]
   1325c:	sub	r2, fp, #2
   13260:	mov	r7, r6
   13264:	clz	r2, r2
   13268:	lsr	r2, r2, #5
   1326c:	b	12a54 <__assert_fail@plt+0x1b34>
   13270:	sub	r2, fp, #2
   13274:	clz	r2, r2
   13278:	lsr	r2, r2, #5
   1327c:	b	12a40 <__assert_fail@plt+0x1b20>
   13280:	sub	r2, fp, #2
   13284:	mov	r6, #0
   13288:	clz	r2, r2
   1328c:	lsr	r2, r2, #5
   13290:	b	12a48 <__assert_fail@plt+0x1b28>
   13294:	sub	r2, fp, #2
   13298:	clz	r2, r2
   1329c:	lsr	r2, r2, #5
   132a0:	b	12a48 <__assert_fail@plt+0x1b28>
   132a4:	sub	r2, fp, #2
   132a8:	mov	r3, #102	; 0x66
   132ac:	clz	r2, r2
   132b0:	lsr	r2, r2, #5
   132b4:	b	12c2c <__assert_fail@plt+0x1d0c>
   132b8:	sub	r2, fp, #2
   132bc:	mov	r3, #118	; 0x76
   132c0:	clz	r2, r2
   132c4:	lsr	r2, r2, #5
   132c8:	b	12c2c <__assert_fail@plt+0x1d0c>
   132cc:	andeq	r6, r2, r8, lsl #30
   132d0:			; <UNDEFINED> instruction: 0x00015cbc
   132d4:	andeq	r5, r1, r4, lsr #25
   132d8:			; <UNDEFINED> instruction: 0x00015cb8
   132dc:	ldr	r3, [sp, #48]	; 0x30
   132e0:	ldrb	r5, [r3]
   132e4:	cmp	r5, #126	; 0x7e
   132e8:	ldrls	pc, [pc, r5, lsl #2]
   132ec:	b	12f58 <__assert_fail@plt+0x2038>
   132f0:	andeq	r2, r1, r8, lsr lr
   132f4:	andeq	r2, r1, r8, asr pc
   132f8:	andeq	r2, r1, r8, asr pc
   132fc:	andeq	r2, r1, r8, asr pc
   13300:	andeq	r2, r1, r8, asr pc
   13304:	andeq	r2, r1, r8, asr pc
   13308:	andeq	r2, r1, r8, asr pc
   1330c:	andeq	r3, r1, r0, lsr r5
   13310:	andeq	r3, r1, r8, lsr #10
   13314:	andeq	r2, r1, r4, lsl #28
   13318:	andeq	r2, r1, ip, asr #27
   1331c:	andeq	r2, r1, r4, lsr #28
   13320:	andeq	r2, r1, ip, lsl #28
   13324:	andeq	r3, r1, ip, lsl r5
   13328:	andeq	r2, r1, r8, asr pc
   1332c:	andeq	r2, r1, r8, asr pc
   13330:	andeq	r2, r1, r8, asr pc
   13334:	andeq	r2, r1, r8, asr pc
   13338:	andeq	r2, r1, r8, asr pc
   1333c:	andeq	r2, r1, r8, asr pc
   13340:	andeq	r2, r1, r8, asr pc
   13344:	andeq	r2, r1, r8, asr pc
   13348:	andeq	r2, r1, r8, asr pc
   1334c:	andeq	r2, r1, r8, asr pc
   13350:	andeq	r2, r1, r8, asr pc
   13354:	andeq	r2, r1, r8, asr pc
   13358:	andeq	r2, r1, r8, asr pc
   1335c:	andeq	r2, r1, r8, asr pc
   13360:	andeq	r2, r1, r8, asr pc
   13364:	andeq	r2, r1, r8, asr pc
   13368:	andeq	r2, r1, r8, asr pc
   1336c:	andeq	r2, r1, r8, asr pc
   13370:	andeq	r3, r1, r4, lsl r5
   13374:	andeq	r2, r1, ip, lsr #28
   13378:	andeq	r2, r1, ip, lsr #28
   1337c:	strdeq	r3, [r1], -r8
   13380:	andeq	r2, r1, ip, lsr #28
   13384:	andeq	r3, r1, ip, ror #9
   13388:	andeq	r2, r1, ip, lsr #28
   1338c:	andeq	r2, r1, ip, ror #24
   13390:	andeq	r2, r1, ip, lsr #28
   13394:	andeq	r2, r1, ip, lsr #28
   13398:	andeq	r2, r1, ip, lsr #28
   1339c:	andeq	r3, r1, ip, ror #9
   133a0:	andeq	r3, r1, ip, ror #9
   133a4:	andeq	r3, r1, ip, ror #9
   133a8:	andeq	r3, r1, ip, ror #9
   133ac:	andeq	r3, r1, ip, ror #9
   133b0:	andeq	r3, r1, ip, ror #9
   133b4:	andeq	r3, r1, ip, ror #9
   133b8:	andeq	r3, r1, ip, ror #9
   133bc:	andeq	r3, r1, ip, ror #9
   133c0:	andeq	r3, r1, ip, ror #9
   133c4:	andeq	r3, r1, ip, ror #9
   133c8:	andeq	r3, r1, ip, ror #9
   133cc:	andeq	r3, r1, ip, ror #9
   133d0:	andeq	r3, r1, ip, ror #9
   133d4:	andeq	r3, r1, ip, ror #9
   133d8:	andeq	r3, r1, ip, ror #9
   133dc:	andeq	r2, r1, ip, lsr #28
   133e0:	andeq	r2, r1, ip, lsr #28
   133e4:	andeq	r2, r1, ip, lsr #28
   133e8:	andeq	r2, r1, ip, lsr #28
   133ec:	andeq	r2, r1, r0, asr #24
   133f0:	andeq	r2, r1, r8, asr pc
   133f4:	andeq	r3, r1, ip, ror #9
   133f8:	andeq	r3, r1, ip, ror #9
   133fc:	andeq	r3, r1, ip, ror #9
   13400:	andeq	r3, r1, ip, ror #9
   13404:	andeq	r3, r1, ip, ror #9
   13408:	andeq	r3, r1, ip, ror #9
   1340c:	andeq	r3, r1, ip, ror #9
   13410:	andeq	r3, r1, ip, ror #9
   13414:	andeq	r3, r1, ip, ror #9
   13418:	andeq	r3, r1, ip, ror #9
   1341c:	andeq	r3, r1, ip, ror #9
   13420:	andeq	r3, r1, ip, ror #9
   13424:	andeq	r3, r1, ip, ror #9
   13428:	andeq	r3, r1, ip, ror #9
   1342c:	andeq	r3, r1, ip, ror #9
   13430:	andeq	r3, r1, ip, ror #9
   13434:	andeq	r3, r1, ip, ror #9
   13438:	andeq	r3, r1, ip, ror #9
   1343c:	andeq	r3, r1, ip, ror #9
   13440:	andeq	r3, r1, ip, ror #9
   13444:	andeq	r3, r1, ip, ror #9
   13448:	andeq	r3, r1, ip, ror #9
   1344c:	andeq	r3, r1, ip, ror #9
   13450:	andeq	r3, r1, ip, ror #9
   13454:	andeq	r3, r1, ip, ror #9
   13458:	andeq	r3, r1, ip, ror #9
   1345c:	andeq	r2, r1, ip, lsr #28
   13460:	strdeq	r2, [r1], -r8
   13464:	andeq	r3, r1, ip, ror #9
   13468:	andeq	r2, r1, ip, lsr #28
   1346c:	andeq	r3, r1, ip, ror #9
   13470:	andeq	r2, r1, ip, lsr #28
   13474:	andeq	r3, r1, ip, ror #9
   13478:	andeq	r3, r1, ip, ror #9
   1347c:	andeq	r3, r1, ip, ror #9
   13480:	andeq	r3, r1, ip, ror #9
   13484:	andeq	r3, r1, ip, ror #9
   13488:	andeq	r3, r1, ip, ror #9
   1348c:	andeq	r3, r1, ip, ror #9
   13490:	andeq	r3, r1, ip, ror #9
   13494:	andeq	r3, r1, ip, ror #9
   13498:	andeq	r3, r1, ip, ror #9
   1349c:	andeq	r3, r1, ip, ror #9
   134a0:	andeq	r3, r1, ip, ror #9
   134a4:	andeq	r3, r1, ip, ror #9
   134a8:	andeq	r3, r1, ip, ror #9
   134ac:	andeq	r3, r1, ip, ror #9
   134b0:	andeq	r3, r1, ip, ror #9
   134b4:	andeq	r3, r1, ip, ror #9
   134b8:	andeq	r3, r1, ip, ror #9
   134bc:	andeq	r3, r1, ip, ror #9
   134c0:	andeq	r3, r1, ip, ror #9
   134c4:	andeq	r3, r1, ip, ror #9
   134c8:	andeq	r3, r1, ip, ror #9
   134cc:	andeq	r3, r1, ip, ror #9
   134d0:	andeq	r3, r1, ip, ror #9
   134d4:	andeq	r3, r1, ip, ror #9
   134d8:	andeq	r3, r1, ip, ror #9
   134dc:	andeq	r2, r1, r0, lsl sl
   134e0:	andeq	r2, r1, ip, lsr #28
   134e4:	andeq	r2, r1, r0, lsl sl
   134e8:	strdeq	r3, [r1], -r8
   134ec:	mov	r6, r7
   134f0:	mov	r7, #0
   134f4:	b	12a70 <__assert_fail@plt+0x1b50>
   134f8:	cmp	r9, #0
   134fc:	mov	r3, #0
   13500:	beq	12f40 <__assert_fail@plt+0x2020>
   13504:	mov	r6, #0
   13508:	mov	r7, r3
   1350c:	mov	r3, r6
   13510:	b	12a74 <__assert_fail@plt+0x1b54>
   13514:	mov	r3, #0
   13518:	b	12f20 <__assert_fail@plt+0x2000>
   1351c:	mov	r7, #0
   13520:	mov	r3, #114	; 0x72
   13524:	b	12d40 <__assert_fail@plt+0x1e20>
   13528:	mov	r5, #98	; 0x62
   1352c:	b	12dd0 <__assert_fail@plt+0x1eb0>
   13530:	mov	r5, #97	; 0x61
   13534:	b	12e10 <__assert_fail@plt+0x1ef0>
   13538:	ldr	r3, [sp, #32]
   1353c:	cmp	r3, #0
   13540:	bne	13988 <__assert_fail@plt+0x2a68>
   13544:	add	r9, r9, #1
   13548:	ldr	r3, [sp, #44]	; 0x2c
   1354c:	mov	r6, #0
   13550:	mov	r5, #92	; 0x5c
   13554:	b	12d08 <__assert_fail@plt+0x1de8>
   13558:	ldr	r3, [sp, #36]	; 0x24
   1355c:	ldrb	r3, [r3, #1]
   13560:	adds	r3, r3, #0
   13564:	movne	r3, #1
   13568:	b	12a2c <__assert_fail@plt+0x1b0c>
   1356c:	ldr	r3, [sp, #164]	; 0xa4
   13570:	ands	r3, r3, #4
   13574:	beq	13598 <__assert_fail@plt+0x2678>
   13578:	ldr	r2, [sp, #24]
   1357c:	add	r3, r9, #2
   13580:	cmp	r3, r2
   13584:	bcs	13598 <__assert_fail@plt+0x2678>
   13588:	ldr	r2, [sp, #48]	; 0x30
   1358c:	ldrb	r5, [r2, #1]
   13590:	cmp	r5, #63	; 0x3f
   13594:	beq	139fc <__assert_fail@plt+0x2adc>
   13598:	mov	r2, #0
   1359c:	mov	r6, r2
   135a0:	mov	r5, #63	; 0x3f
   135a4:	b	12a54 <__assert_fail@plt+0x1b34>
   135a8:	ldr	r3, [sp, #32]
   135ac:	cmp	r3, #0
   135b0:	bne	13988 <__assert_fail@plt+0x2a68>
   135b4:	mov	r6, r3
   135b8:	mov	r5, #63	; 0x3f
   135bc:	b	12a9c <__assert_fail@plt+0x1b7c>
   135c0:	ldr	r3, [sp, #24]
   135c4:	cmn	r3, #1
   135c8:	mov	r3, #0
   135cc:	str	r3, [sp, #108]	; 0x6c
   135d0:	str	r3, [sp, #112]	; 0x70
   135d4:	bne	135e4 <__assert_fail@plt+0x26c4>
   135d8:	ldr	r0, [sp, #36]	; 0x24
   135dc:	bl	10e30 <strlen@plt>
   135e0:	str	r0, [sp, #24]
   135e4:	mov	r3, #0
   135e8:	str	sl, [sp, #88]	; 0x58
   135ec:	ldr	sl, [sp, #36]	; 0x24
   135f0:	str	r5, [sp, #92]	; 0x5c
   135f4:	mov	r5, r3
   135f8:	str	r7, [sp, #96]	; 0x60
   135fc:	str	r4, [sp, #100]	; 0x64
   13600:	str	r8, [sp, #84]	; 0x54
   13604:	ldr	r3, [sp, #24]
   13608:	add	r4, r9, r5
   1360c:	add	r7, sl, r4
   13610:	sub	r2, r3, r4
   13614:	mov	r1, r7
   13618:	add	r3, sp, #108	; 0x6c
   1361c:	add	r0, sp, #104	; 0x68
   13620:	bl	14eb0 <__assert_fail@plt+0x3f90>
   13624:	subs	r8, r0, #0
   13628:	beq	13678 <__assert_fail@plt+0x2758>
   1362c:	cmn	r8, #1
   13630:	beq	139d8 <__assert_fail@plt+0x2ab8>
   13634:	cmn	r8, #2
   13638:	beq	13af8 <__assert_fail@plt+0x2bd8>
   1363c:	ldr	r3, [sp, #32]
   13640:	cmp	fp, #2
   13644:	movne	r3, #0
   13648:	andeq	r3, r3, #1
   1364c:	cmp	r3, #0
   13650:	bne	137d8 <__assert_fail@plt+0x28b8>
   13654:	ldr	r0, [sp, #104]	; 0x68
   13658:	bl	10d88 <iswprint@plt>
   1365c:	add	r5, r5, r8
   13660:	cmp	r0, #0
   13664:	add	r0, sp, #108	; 0x6c
   13668:	moveq	r6, #0
   1366c:	bl	10d40 <mbsinit@plt>
   13670:	cmp	r0, #0
   13674:	beq	13604 <__assert_fail@plt+0x26e4>
   13678:	ldr	r3, [sp, #28]
   1367c:	mov	ip, r5
   13680:	eor	r2, r6, #1
   13684:	ldr	r5, [sp, #92]	; 0x5c
   13688:	ldr	r7, [sp, #96]	; 0x60
   1368c:	ldr	r4, [sp, #100]	; 0x64
   13690:	ldr	r8, [sp, #84]	; 0x54
   13694:	ldr	sl, [sp, #88]	; 0x58
   13698:	and	r2, r2, r3
   1369c:	cmp	ip, #1
   136a0:	bls	12fa0 <__assert_fail@plt+0x2080>
   136a4:	add	r1, ip, r9
   136a8:	ldr	lr, [sp, #48]	; 0x30
   136ac:	mov	r0, #0
   136b0:	str	r6, [sp, #48]	; 0x30
   136b4:	mov	ip, #39	; 0x27
   136b8:	ldr	r6, [sp, #44]	; 0x2c
   136bc:	b	13774 <__assert_fail@plt+0x2854>
   136c0:	ldr	r0, [sp, #32]
   136c4:	sub	r3, fp, #2
   136c8:	cmp	r0, #0
   136cc:	clz	r3, r3
   136d0:	lsr	r3, r3, #5
   136d4:	bne	138dc <__assert_fail@plt+0x29bc>
   136d8:	eor	r0, r6, #1
   136dc:	ands	r3, r3, r0
   136e0:	beq	13710 <__assert_fail@plt+0x27f0>
   136e4:	add	r0, r4, #1
   136e8:	cmp	sl, r4
   136ec:	strbhi	ip, [r8, r4]
   136f0:	cmp	sl, r0
   136f4:	movhi	r6, #36	; 0x24
   136f8:	strbhi	r6, [r8, r0]
   136fc:	add	r0, r4, #2
   13700:	mov	r6, r3
   13704:	add	r4, r4, #3
   13708:	cmp	sl, r0
   1370c:	strbhi	ip, [r8, r0]
   13710:	cmp	sl, r4
   13714:	movhi	r3, #92	; 0x5c
   13718:	strbhi	r3, [r8, r4]
   1371c:	add	r3, r4, #1
   13720:	cmp	sl, r3
   13724:	lsrhi	r0, r5, #6
   13728:	addhi	r0, r0, #48	; 0x30
   1372c:	strbhi	r0, [r8, r3]
   13730:	add	r0, r4, #2
   13734:	cmp	sl, r0
   13738:	lsrhi	r3, r5, #3
   1373c:	andhi	r3, r3, #7
   13740:	addhi	r3, r3, #48	; 0x30
   13744:	add	r9, r9, #1
   13748:	strbhi	r3, [r8, r0]
   1374c:	and	r5, r5, #7
   13750:	cmp	r9, r1
   13754:	add	r5, r5, #48	; 0x30
   13758:	add	r4, r4, #3
   1375c:	bcs	138fc <__assert_fail@plt+0x29dc>
   13760:	mov	r0, r2
   13764:	cmp	sl, r4
   13768:	strbhi	r5, [r8, r4]
   1376c:	ldrb	r5, [lr, #1]!
   13770:	add	r4, r4, #1
   13774:	cmp	r2, #0
   13778:	bne	136c0 <__assert_fail@plt+0x27a0>
   1377c:	eor	r3, r0, #1
   13780:	and	r3, r3, r6
   13784:	cmp	r7, #0
   13788:	uxtb	r3, r3
   1378c:	beq	137a0 <__assert_fail@plt+0x2880>
   13790:	cmp	sl, r4
   13794:	movhi	r7, #92	; 0x5c
   13798:	strbhi	r7, [r8, r4]
   1379c:	add	r4, r4, #1
   137a0:	add	r9, r9, #1
   137a4:	cmp	r9, r1
   137a8:	bcs	138f0 <__assert_fail@plt+0x29d0>
   137ac:	cmp	r3, #0
   137b0:	beq	1391c <__assert_fail@plt+0x29fc>
   137b4:	cmp	sl, r4
   137b8:	add	r3, r4, #1
   137bc:	strbhi	ip, [r8, r4]
   137c0:	mov	r7, #0
   137c4:	cmp	sl, r3
   137c8:	strbhi	ip, [r8, r3]
   137cc:	add	r4, r4, #2
   137d0:	mov	r6, r7
   137d4:	b	13764 <__assert_fail@plt+0x2844>
   137d8:	cmp	r8, #1
   137dc:	beq	13654 <__assert_fail@plt+0x2734>
   137e0:	add	r1, r4, #1
   137e4:	add	r3, sl, r8
   137e8:	add	r1, sl, r1
   137ec:	add	r4, r3, r4
   137f0:	ldrb	r3, [r1], #1
   137f4:	sub	r3, r3, #91	; 0x5b
   137f8:	cmp	r3, #33	; 0x21
   137fc:	ldrls	pc, [pc, r3, lsl #2]
   13800:	b	1388c <__assert_fail@plt+0x296c>
   13804:	muleq	r1, r8, r8
   13808:	muleq	r1, r8, r8
   1380c:	andeq	r3, r1, ip, lsl #17
   13810:	muleq	r1, r8, r8
   13814:	andeq	r3, r1, ip, lsl #17
   13818:	muleq	r1, r8, r8
   1381c:	andeq	r3, r1, ip, lsl #17
   13820:	andeq	r3, r1, ip, lsl #17
   13824:	andeq	r3, r1, ip, lsl #17
   13828:	andeq	r3, r1, ip, lsl #17
   1382c:	andeq	r3, r1, ip, lsl #17
   13830:	andeq	r3, r1, ip, lsl #17
   13834:	andeq	r3, r1, ip, lsl #17
   13838:	andeq	r3, r1, ip, lsl #17
   1383c:	andeq	r3, r1, ip, lsl #17
   13840:	andeq	r3, r1, ip, lsl #17
   13844:	andeq	r3, r1, ip, lsl #17
   13848:	andeq	r3, r1, ip, lsl #17
   1384c:	andeq	r3, r1, ip, lsl #17
   13850:	andeq	r3, r1, ip, lsl #17
   13854:	andeq	r3, r1, ip, lsl #17
   13858:	andeq	r3, r1, ip, lsl #17
   1385c:	andeq	r3, r1, ip, lsl #17
   13860:	andeq	r3, r1, ip, lsl #17
   13864:	andeq	r3, r1, ip, lsl #17
   13868:	andeq	r3, r1, ip, lsl #17
   1386c:	andeq	r3, r1, ip, lsl #17
   13870:	andeq	r3, r1, ip, lsl #17
   13874:	andeq	r3, r1, ip, lsl #17
   13878:	andeq	r3, r1, ip, lsl #17
   1387c:	andeq	r3, r1, ip, lsl #17
   13880:	andeq	r3, r1, ip, lsl #17
   13884:	andeq	r3, r1, ip, lsl #17
   13888:	muleq	r1, r8, r8
   1388c:	cmp	r4, r1
   13890:	bne	137f0 <__assert_fail@plt+0x28d0>
   13894:	b	13654 <__assert_fail@plt+0x2734>
   13898:	ldr	fp, [sp, #84]	; 0x54
   1389c:	ldr	sl, [sp, #88]	; 0x58
   138a0:	mov	r8, #2
   138a4:	b	12d60 <__assert_fail@plt+0x1e40>
   138a8:	cmp	sl, r4
   138ac:	movls	r1, r4
   138b0:	bls	12eb0 <__assert_fail@plt+0x1f90>
   138b4:	ldr	r3, [sp, #44]	; 0x2c
   138b8:	b	12ea0 <__assert_fail@plt+0x1f80>
   138bc:	str	sl, [sp, #72]	; 0x48
   138c0:	ldr	sl, [sp, #32]
   138c4:	b	12cd8 <__assert_fail@plt+0x1db8>
   138c8:	add	r9, r9, #1
   138cc:	b	125cc <__assert_fail@plt+0x16ac>
   138d0:	ldr	r2, [sp, #28]
   138d4:	mov	r6, #0
   138d8:	b	136a4 <__assert_fail@plt+0x2784>
   138dc:	str	fp, [sp, #160]	; 0xa0
   138e0:	str	r3, [sp, #28]
   138e4:	mov	fp, r8
   138e8:	ldr	r8, [sp, #160]	; 0xa0
   138ec:	b	12d60 <__assert_fail@plt+0x1e40>
   138f0:	str	r6, [sp, #44]	; 0x2c
   138f4:	ldr	r6, [sp, #48]	; 0x30
   138f8:	b	12d08 <__assert_fail@plt+0x1de8>
   138fc:	str	r6, [sp, #44]	; 0x2c
   13900:	ldr	r6, [sp, #48]	; 0x30
   13904:	b	12b14 <__assert_fail@plt+0x1bf4>
   13908:	add	r4, r4, #4
   1390c:	str	r3, [sp, #44]	; 0x2c
   13910:	mov	r6, #0
   13914:	mov	r5, #48	; 0x30
   13918:	b	12a9c <__assert_fail@plt+0x1b7c>
   1391c:	mov	r7, r3
   13920:	b	13764 <__assert_fail@plt+0x2844>
   13924:	ldr	r3, [pc, #-1624]	; 132d4 <__assert_fail@plt+0x23b4>
   13928:	mov	r4, #1
   1392c:	str	r4, [sp, #40]	; 0x28
   13930:	str	r4, [sp, #28]
   13934:	str	r4, [sp, #52]	; 0x34
   13938:	str	sl, [sp, #72]	; 0x48
   1393c:	str	sl, [sp, #68]	; 0x44
   13940:	str	sl, [sp, #44]	; 0x2c
   13944:	str	sl, [sp, #32]
   13948:	str	r3, [sp, #60]	; 0x3c
   1394c:	b	125bc <__assert_fail@plt+0x169c>
   13950:	mov	r3, r6
   13954:	mov	r5, #48	; 0x30
   13958:	mov	r6, #0
   1395c:	b	12a9c <__assert_fail@plt+0x1b7c>
   13960:	cmp	sl, r4
   13964:	movhi	r3, #48	; 0x30
   13968:	strbhi	r3, [r8, r4]
   1396c:	add	r3, r1, #2
   13970:	cmp	sl, r3
   13974:	movhi	r0, #48	; 0x30
   13978:	strbhi	r0, [r8, r3]
   1397c:	add	r4, r1, #3
   13980:	mov	r5, #48	; 0x30
   13984:	b	12ee4 <__assert_fail@plt+0x1fc4>
   13988:	str	fp, [sp, #160]	; 0xa0
   1398c:	mov	fp, r8
   13990:	ldr	r8, [sp, #160]	; 0xa0
   13994:	b	12d60 <__assert_fail@plt+0x1e40>
   13998:	ldr	r2, [sp, #80]	; 0x50
   1399c:	ldrb	r3, [r2]
   139a0:	cmp	r3, #0
   139a4:	beq	1258c <__assert_fail@plt+0x166c>
   139a8:	cmp	sl, r4
   139ac:	strbhi	r3, [fp, r4]
   139b0:	ldrb	r3, [r2, #1]!
   139b4:	add	r4, r4, #1
   139b8:	cmp	r3, #0
   139bc:	bne	139a8 <__assert_fail@plt+0x2a88>
   139c0:	b	1258c <__assert_fail@plt+0x166c>
   139c4:	str	fp, [sp, #160]	; 0xa0
   139c8:	mov	r3, #0
   139cc:	mov	fp, r8
   139d0:	ldr	r8, [sp, #160]	; 0xa0
   139d4:	b	12df4 <__assert_fail@plt+0x1ed4>
   139d8:	mov	ip, r5
   139dc:	ldr	r7, [sp, #96]	; 0x60
   139e0:	ldr	r5, [sp, #92]	; 0x5c
   139e4:	ldr	r4, [sp, #100]	; 0x64
   139e8:	ldr	r8, [sp, #84]	; 0x54
   139ec:	ldr	sl, [sp, #88]	; 0x58
   139f0:	ldr	r2, [sp, #28]
   139f4:	mov	r6, #0
   139f8:	b	1369c <__assert_fail@plt+0x277c>
   139fc:	ldr	r2, [sp, #36]	; 0x24
   13a00:	ldrb	r1, [r2, r3]
   13a04:	sub	r2, r1, #33	; 0x21
   13a08:	cmp	r2, #29
   13a0c:	ldrls	pc, [pc, r2, lsl #2]
   13a10:	b	13aec <__assert_fail@plt+0x2bcc>
   13a14:	andeq	r3, r1, ip, lsl #21
   13a18:	andeq	r3, r1, ip, ror #21
   13a1c:	andeq	r3, r1, ip, ror #21
   13a20:	andeq	r3, r1, ip, ror #21
   13a24:	andeq	r3, r1, ip, ror #21
   13a28:	andeq	r3, r1, ip, ror #21
   13a2c:	andeq	r3, r1, ip, lsl #21
   13a30:	andeq	r3, r1, ip, lsl #21
   13a34:	andeq	r3, r1, ip, lsl #21
   13a38:	andeq	r3, r1, ip, ror #21
   13a3c:	andeq	r3, r1, ip, ror #21
   13a40:	andeq	r3, r1, ip, ror #21
   13a44:	andeq	r3, r1, ip, lsl #21
   13a48:	andeq	r3, r1, ip, ror #21
   13a4c:	andeq	r3, r1, ip, lsl #21
   13a50:	andeq	r3, r1, ip, ror #21
   13a54:	andeq	r3, r1, ip, ror #21
   13a58:	andeq	r3, r1, ip, ror #21
   13a5c:	andeq	r3, r1, ip, ror #21
   13a60:	andeq	r3, r1, ip, ror #21
   13a64:	andeq	r3, r1, ip, ror #21
   13a68:	andeq	r3, r1, ip, ror #21
   13a6c:	andeq	r3, r1, ip, ror #21
   13a70:	andeq	r3, r1, ip, ror #21
   13a74:	andeq	r3, r1, ip, ror #21
   13a78:	andeq	r3, r1, ip, ror #21
   13a7c:	andeq	r3, r1, ip, ror #21
   13a80:	andeq	r3, r1, ip, lsl #21
   13a84:	andeq	r3, r1, ip, lsl #21
   13a88:	andeq	r3, r1, ip, lsl #21
   13a8c:	ldr	r2, [sp, #32]
   13a90:	cmp	r2, #0
   13a94:	bne	13b98 <__assert_fail@plt+0x2c78>
   13a98:	cmp	sl, r4
   13a9c:	movhi	r2, #63	; 0x3f
   13aa0:	strbhi	r2, [r8, r4]
   13aa4:	add	r2, r4, #1
   13aa8:	cmp	sl, r2
   13aac:	movhi	r0, #34	; 0x22
   13ab0:	strbhi	r0, [r8, r2]
   13ab4:	add	r2, r4, #2
   13ab8:	cmp	sl, r2
   13abc:	movhi	r0, #34	; 0x22
   13ac0:	strbhi	r0, [r8, r2]
   13ac4:	add	r2, r4, #3
   13ac8:	cmp	sl, r2
   13acc:	movhi	r0, #63	; 0x3f
   13ad0:	strbhi	r0, [r8, r2]
   13ad4:	mov	r2, #0
   13ad8:	add	r4, r4, #4
   13adc:	mov	r5, r1
   13ae0:	mov	r9, r3
   13ae4:	mov	r6, r2
   13ae8:	b	12ee4 <__assert_fail@plt+0x1fc4>
   13aec:	mov	r2, #0
   13af0:	mov	r6, r2
   13af4:	b	12a54 <__assert_fail@plt+0x1b34>
   13af8:	ldr	r0, [sp, #24]
   13afc:	mov	r1, r4
   13b00:	cmp	r1, r0
   13b04:	mov	r2, r7
   13b08:	mov	r3, r5
   13b0c:	mov	ip, r5
   13b10:	ldr	r7, [sp, #96]	; 0x60
   13b14:	ldr	r5, [sp, #92]	; 0x5c
   13b18:	ldr	r4, [sp, #100]	; 0x64
   13b1c:	ldr	r8, [sp, #84]	; 0x54
   13b20:	ldr	sl, [sp, #88]	; 0x58
   13b24:	bcs	13b58 <__assert_fail@plt+0x2c38>
   13b28:	ldrb	r6, [r2]
   13b2c:	cmp	r6, #0
   13b30:	bne	13b44 <__assert_fail@plt+0x2c24>
   13b34:	b	13c74 <__assert_fail@plt+0x2d54>
   13b38:	ldrb	r6, [r2, #1]!
   13b3c:	cmp	r6, #0
   13b40:	beq	13bfc <__assert_fail@plt+0x2cdc>
   13b44:	add	r3, r3, #1
   13b48:	add	r1, r9, r3
   13b4c:	cmp	r1, r0
   13b50:	bcc	13b38 <__assert_fail@plt+0x2c18>
   13b54:	mov	ip, r3
   13b58:	ldr	r2, [sp, #28]
   13b5c:	mov	r6, #0
   13b60:	b	1369c <__assert_fail@plt+0x277c>
   13b64:	mov	r3, #1
   13b68:	str	r3, [sp, #40]	; 0x28
   13b6c:	str	r3, [sp, #32]
   13b70:	str	r3, [sp, #28]
   13b74:	str	r3, [sp, #52]	; 0x34
   13b78:	ldr	r3, [pc, #-2220]	; 132d4 <__assert_fail@plt+0x23b4>
   13b7c:	mov	r2, #0
   13b80:	str	r2, [sp, #68]	; 0x44
   13b84:	str	r2, [sp, #44]	; 0x2c
   13b88:	str	r2, [sp, #72]	; 0x48
   13b8c:	mov	r4, r2
   13b90:	str	r3, [sp, #60]	; 0x3c
   13b94:	b	125bc <__assert_fail@plt+0x169c>
   13b98:	str	fp, [sp, #160]	; 0xa0
   13b9c:	mov	fp, r8
   13ba0:	ldr	r8, [sp, #160]	; 0xa0
   13ba4:	b	12d6c <__assert_fail@plt+0x1e4c>
   13ba8:	mov	r2, r3
   13bac:	ldr	r3, [sp, #60]	; 0x3c
   13bb0:	cmp	r3, #0
   13bb4:	moveq	r2, #0
   13bb8:	andne	r2, r2, #1
   13bbc:	cmp	r2, #0
   13bc0:	beq	13bec <__assert_fail@plt+0x2ccc>
   13bc4:	mov	r2, r3
   13bc8:	ldrb	r3, [r3]
   13bcc:	cmp	r3, #0
   13bd0:	beq	13bec <__assert_fail@plt+0x2ccc>
   13bd4:	cmp	sl, r4
   13bd8:	strbhi	r3, [fp, r4]
   13bdc:	ldrb	r3, [r2, #1]!
   13be0:	add	r4, r4, #1
   13be4:	cmp	r3, #0
   13be8:	bne	13bd4 <__assert_fail@plt+0x2cb4>
   13bec:	cmp	sl, r4
   13bf0:	movhi	r3, #0
   13bf4:	strbhi	r3, [fp, r4]
   13bf8:	b	12dac <__assert_fail@plt+0x1e8c>
   13bfc:	mov	ip, r3
   13c00:	ldr	r2, [sp, #28]
   13c04:	b	1369c <__assert_fail@plt+0x277c>
   13c08:	str	fp, [sp, #160]	; 0xa0
   13c0c:	mov	fp, r8
   13c10:	ldr	r8, [sp, #160]	; 0xa0
   13c14:	sub	r3, r8, #2
   13c18:	clz	r3, r3
   13c1c:	lsr	r3, r3, #5
   13c20:	str	r3, [sp, #28]
   13c24:	b	12d60 <__assert_fail@plt+0x1e40>
   13c28:	ldr	r3, [sp, #76]	; 0x4c
   13c2c:	mov	ip, #5
   13c30:	str	r3, [sp, #16]
   13c34:	ldr	r3, [sp, #80]	; 0x50
   13c38:	ldr	r2, [sp, #36]	; 0x24
   13c3c:	str	r3, [sp, #12]
   13c40:	ldr	r3, [sp, #56]	; 0x38
   13c44:	ldr	r1, [sp, #72]	; 0x48
   13c48:	str	r3, [sp, #8]
   13c4c:	ldr	r3, [sp, #164]	; 0xa4
   13c50:	mov	r0, fp
   13c54:	str	r3, [sp, #4]
   13c58:	str	ip, [sp]
   13c5c:	ldr	r3, [sp, #24]
   13c60:	bl	124c4 <__assert_fail@plt+0x15a4>
   13c64:	mov	r4, r0
   13c68:	b	12dac <__assert_fail@plt+0x1e8c>
   13c6c:	mov	r8, #2
   13c70:	b	12d60 <__assert_fail@plt+0x1e40>
   13c74:	ldr	r2, [sp, #28]
   13c78:	b	1369c <__assert_fail@plt+0x277c>
   13c7c:	mov	r3, #0
   13c80:	str	r3, [sp, #68]	; 0x44
   13c84:	str	r3, [sp, #44]	; 0x2c
   13c88:	str	r3, [sp, #72]	; 0x48
   13c8c:	str	r3, [sp, #28]
   13c90:	mov	r4, r3
   13c94:	ldr	r3, [pc, #-2500]	; 132d8 <__assert_fail@plt+0x23b8>
   13c98:	mov	r2, #1
   13c9c:	str	r2, [sp, #40]	; 0x28
   13ca0:	str	r2, [sp, #32]
   13ca4:	str	r2, [sp, #52]	; 0x34
   13ca8:	str	r3, [sp, #60]	; 0x3c
   13cac:	b	125bc <__assert_fail@plt+0x169c>
   13cb0:	bl	10d64 <__stack_chk_fail@plt>
   13cb4:	mov	r5, r3
   13cb8:	mov	r6, #0
   13cbc:	b	12ab0 <__assert_fail@plt+0x1b90>
   13cc0:	mov	r3, #0
   13cc4:	mov	r2, #1
   13cc8:	str	r3, [sp, #44]	; 0x2c
   13ccc:	str	r3, [sp, #72]	; 0x48
   13cd0:	str	r2, [sp, #40]	; 0x28
   13cd4:	b	12bcc <__assert_fail@plt+0x1cac>
   13cd8:	bl	10f08 <abort@plt>
   13cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce0:	sub	sp, sp, #44	; 0x2c
   13ce4:	mov	r6, r0
   13ce8:	mov	r4, r3
   13cec:	mov	sl, r1
   13cf0:	mov	fp, r2
   13cf4:	bl	10e3c <__errno_location@plt>
   13cf8:	ldr	r7, [pc, #364]	; 13e6c <__assert_fail@plt+0x2f4c>
   13cfc:	cmp	r6, #0
   13d00:	ldr	r5, [r7]
   13d04:	ldr	r3, [r0]
   13d08:	str	r3, [sp, #24]
   13d0c:	blt	13e68 <__assert_fail@plt+0x2f48>
   13d10:	ldr	r3, [r7, #4]
   13d14:	mov	r8, r0
   13d18:	cmp	r3, r6
   13d1c:	bgt	13d68 <__assert_fail@plt+0x2e48>
   13d20:	cmn	r6, #-268435454	; 0xf0000002
   13d24:	bgt	13e64 <__assert_fail@plt+0x2f44>
   13d28:	add	r9, r6, #1
   13d2c:	add	r3, r7, #8
   13d30:	cmp	r5, r3
   13d34:	lsl	r1, r9, #3
   13d38:	beq	13e44 <__assert_fail@plt+0x2f24>
   13d3c:	mov	r0, r5
   13d40:	bl	14ad0 <__assert_fail@plt+0x3bb0>
   13d44:	mov	r5, r0
   13d48:	str	r0, [r7]
   13d4c:	ldr	r0, [r7, #4]
   13d50:	mov	r1, #0
   13d54:	sub	r2, r9, r0
   13d58:	add	r0, r5, r0, lsl #3
   13d5c:	lsl	r2, r2, #3
   13d60:	bl	10e54 <memset@plt>
   13d64:	str	r9, [r7, #4]
   13d68:	add	r3, r5, r6, lsl #3
   13d6c:	ldr	r1, [r4, #4]
   13d70:	ldr	r7, [r3, #4]
   13d74:	ldr	r9, [r5, r6, lsl #3]
   13d78:	ldr	r2, [r4, #40]	; 0x28
   13d7c:	ldr	ip, [r4, #44]	; 0x2c
   13d80:	str	r3, [sp, #28]
   13d84:	ldr	r3, [r4]
   13d88:	orr	r1, r1, #1
   13d8c:	add	lr, r4, #8
   13d90:	str	r1, [sp, #36]	; 0x24
   13d94:	str	r1, [sp, #4]
   13d98:	str	r2, [sp, #12]
   13d9c:	str	r3, [sp]
   13da0:	mov	r0, r7
   13da4:	mov	r1, r9
   13da8:	str	ip, [sp, #16]
   13dac:	str	lr, [sp, #8]
   13db0:	mov	r3, fp
   13db4:	mov	r2, sl
   13db8:	str	lr, [sp, #32]
   13dbc:	bl	124c4 <__assert_fail@plt+0x15a4>
   13dc0:	cmp	r9, r0
   13dc4:	bhi	13e30 <__assert_fail@plt+0x2f10>
   13dc8:	ldr	r3, [pc, #160]	; 13e70 <__assert_fail@plt+0x2f50>
   13dcc:	add	r9, r0, #1
   13dd0:	cmp	r7, r3
   13dd4:	str	r9, [r5, r6, lsl #3]
   13dd8:	beq	13de4 <__assert_fail@plt+0x2ec4>
   13ddc:	mov	r0, r7
   13de0:	bl	10d10 <free@plt>
   13de4:	mov	r0, r9
   13de8:	bl	14a74 <__assert_fail@plt+0x3b54>
   13dec:	ldr	lr, [sp, #28]
   13df0:	ldr	ip, [r4, #44]	; 0x2c
   13df4:	ldr	r5, [r4, #40]	; 0x28
   13df8:	mov	r3, fp
   13dfc:	mov	r2, sl
   13e00:	mov	r1, r9
   13e04:	str	r0, [lr, #4]
   13e08:	ldr	lr, [r4]
   13e0c:	ldr	r4, [sp, #32]
   13e10:	str	ip, [sp, #16]
   13e14:	str	r4, [sp, #8]
   13e18:	ldr	r4, [sp, #36]	; 0x24
   13e1c:	str	r5, [sp, #12]
   13e20:	str	r4, [sp, #4]
   13e24:	str	lr, [sp]
   13e28:	mov	r7, r0
   13e2c:	bl	124c4 <__assert_fail@plt+0x15a4>
   13e30:	ldr	r3, [sp, #24]
   13e34:	mov	r0, r7
   13e38:	str	r3, [r8]
   13e3c:	add	sp, sp, #44	; 0x2c
   13e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e44:	mov	r0, #0
   13e48:	bl	14ad0 <__assert_fail@plt+0x3bb0>
   13e4c:	ldr	r3, [pc, #32]	; 13e74 <__assert_fail@plt+0x2f54>
   13e50:	mov	r5, r0
   13e54:	ldm	r3, {r0, r1}
   13e58:	str	r5, [r7]
   13e5c:	stm	r5, {r0, r1}
   13e60:	b	13d4c <__assert_fail@plt+0x2e2c>
   13e64:	bl	14cbc <__assert_fail@plt+0x3d9c>
   13e68:	bl	10f08 <abort@plt>
   13e6c:	strdeq	r7, [r2], -r4
   13e70:	andeq	r7, r2, r8, lsr #3
   13e74:	strdeq	r7, [r2], -ip
   13e78:	push	{r4, r5, r6, lr}
   13e7c:	mov	r5, r0
   13e80:	bl	10e3c <__errno_location@plt>
   13e84:	cmp	r5, #0
   13e88:	mov	r1, #48	; 0x30
   13e8c:	mov	r4, r0
   13e90:	ldr	r0, [pc, #16]	; 13ea8 <__assert_fail@plt+0x2f88>
   13e94:	ldr	r6, [r4]
   13e98:	movne	r0, r5
   13e9c:	bl	14c7c <__assert_fail@plt+0x3d5c>
   13ea0:	str	r6, [r4]
   13ea4:	pop	{r4, r5, r6, pc}
   13ea8:	andeq	r7, r2, r8, lsr #5
   13eac:	ldr	r3, [pc, #12]	; 13ec0 <__assert_fail@plt+0x2fa0>
   13eb0:	cmp	r0, #0
   13eb4:	moveq	r0, r3
   13eb8:	ldr	r0, [r0]
   13ebc:	bx	lr
   13ec0:	andeq	r7, r2, r8, lsr #5
   13ec4:	ldr	r3, [pc, #12]	; 13ed8 <__assert_fail@plt+0x2fb8>
   13ec8:	cmp	r0, #0
   13ecc:	moveq	r0, r3
   13ed0:	str	r1, [r0]
   13ed4:	bx	lr
   13ed8:	andeq	r7, r2, r8, lsr #5
   13edc:	ldr	r3, [pc, #52]	; 13f18 <__assert_fail@plt+0x2ff8>
   13ee0:	cmp	r0, #0
   13ee4:	moveq	r0, r3
   13ee8:	add	r3, r0, #8
   13eec:	push	{lr}		; (str lr, [sp, #-4]!)
   13ef0:	lsr	lr, r1, #5
   13ef4:	and	r1, r1, #31
   13ef8:	ldr	ip, [r3, lr, lsl #2]
   13efc:	lsr	r0, ip, r1
   13f00:	eor	r2, r2, r0
   13f04:	and	r2, r2, #1
   13f08:	and	r0, r0, #1
   13f0c:	eor	r1, ip, r2, lsl r1
   13f10:	str	r1, [r3, lr, lsl #2]
   13f14:	pop	{pc}		; (ldr pc, [sp], #4)
   13f18:	andeq	r7, r2, r8, lsr #5
   13f1c:	ldr	r3, [pc, #16]	; 13f34 <__assert_fail@plt+0x3014>
   13f20:	cmp	r0, #0
   13f24:	movne	r3, r0
   13f28:	ldr	r0, [r3, #4]
   13f2c:	str	r1, [r3, #4]
   13f30:	bx	lr
   13f34:	andeq	r7, r2, r8, lsr #5
   13f38:	ldr	r3, [pc, #44]	; 13f6c <__assert_fail@plt+0x304c>
   13f3c:	cmp	r0, #0
   13f40:	moveq	r0, r3
   13f44:	mov	ip, #10
   13f48:	cmp	r2, #0
   13f4c:	cmpne	r1, #0
   13f50:	str	ip, [r0]
   13f54:	beq	13f64 <__assert_fail@plt+0x3044>
   13f58:	str	r1, [r0, #40]	; 0x28
   13f5c:	str	r2, [r0, #44]	; 0x2c
   13f60:	bx	lr
   13f64:	push	{r4, lr}
   13f68:	bl	10f08 <abort@plt>
   13f6c:	andeq	r7, r2, r8, lsr #5
   13f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f74:	sub	sp, sp, #24
   13f78:	ldr	ip, [pc, #108]	; 13fec <__assert_fail@plt+0x30cc>
   13f7c:	ldr	r4, [sp, #56]	; 0x38
   13f80:	mov	r9, r2
   13f84:	cmp	r4, #0
   13f88:	moveq	r4, ip
   13f8c:	mov	sl, r3
   13f90:	mov	r7, r0
   13f94:	mov	r8, r1
   13f98:	bl	10e3c <__errno_location@plt>
   13f9c:	ldr	r3, [r4, #44]	; 0x2c
   13fa0:	mov	r1, r8
   13fa4:	ldr	r6, [r0]
   13fa8:	str	r3, [sp, #16]
   13fac:	ldr	r2, [r4, #40]	; 0x28
   13fb0:	add	r3, r4, #8
   13fb4:	str	r3, [sp, #8]
   13fb8:	str	r2, [sp, #12]
   13fbc:	ldr	r2, [r4, #4]
   13fc0:	mov	r5, r0
   13fc4:	str	r2, [sp, #4]
   13fc8:	ldr	ip, [r4]
   13fcc:	mov	r3, sl
   13fd0:	mov	r2, r9
   13fd4:	mov	r0, r7
   13fd8:	str	ip, [sp]
   13fdc:	bl	124c4 <__assert_fail@plt+0x15a4>
   13fe0:	str	r6, [r5]
   13fe4:	add	sp, sp, #24
   13fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fec:	andeq	r7, r2, r8, lsr #5
   13ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff4:	cmp	r3, #0
   13ff8:	sub	sp, sp, #44	; 0x2c
   13ffc:	ldr	r4, [pc, #192]	; 140c4 <__assert_fail@plt+0x31a4>
   14000:	mov	r6, r2
   14004:	movne	r4, r3
   14008:	mov	r9, r1
   1400c:	mov	r8, r0
   14010:	bl	10e3c <__errno_location@plt>
   14014:	ldr	r3, [r4, #44]	; 0x2c
   14018:	ldr	r5, [r4, #4]
   1401c:	add	sl, r4, #8
   14020:	cmp	r6, #0
   14024:	orreq	r5, r5, #1
   14028:	mov	r1, #0
   1402c:	ldr	r2, [r0]
   14030:	str	r3, [sp, #16]
   14034:	ldr	r3, [r4, #40]	; 0x28
   14038:	stmib	sp, {r5, sl}
   1403c:	str	r3, [sp, #12]
   14040:	ldr	r3, [r4]
   14044:	mov	r7, r0
   14048:	str	r2, [sp, #28]
   1404c:	str	r3, [sp]
   14050:	mov	r2, r8
   14054:	mov	r3, r9
   14058:	mov	r0, r1
   1405c:	bl	124c4 <__assert_fail@plt+0x15a4>
   14060:	add	r1, r0, #1
   14064:	mov	fp, r0
   14068:	mov	r0, r1
   1406c:	str	r1, [sp, #36]	; 0x24
   14070:	bl	14a74 <__assert_fail@plt+0x3b54>
   14074:	ldr	r3, [r4, #44]	; 0x2c
   14078:	mov	r2, r8
   1407c:	str	r3, [sp, #16]
   14080:	ldr	r3, [r4, #40]	; 0x28
   14084:	str	r5, [sp, #4]
   14088:	str	r3, [sp, #12]
   1408c:	str	sl, [sp, #8]
   14090:	ldr	ip, [r4]
   14094:	ldr	r1, [sp, #36]	; 0x24
   14098:	mov	r3, r9
   1409c:	str	ip, [sp]
   140a0:	str	r0, [sp, #32]
   140a4:	bl	124c4 <__assert_fail@plt+0x15a4>
   140a8:	ldr	r2, [sp, #28]
   140ac:	cmp	r6, #0
   140b0:	str	r2, [r7]
   140b4:	ldr	r0, [sp, #32]
   140b8:	strne	fp, [r6]
   140bc:	add	sp, sp, #44	; 0x2c
   140c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140c4:	andeq	r7, r2, r8, lsr #5
   140c8:	mov	r3, r2
   140cc:	mov	r2, #0
   140d0:	b	13ff0 <__assert_fail@plt+0x30d0>
   140d4:	push	{r4, r5, r6, r7, r8, lr}
   140d8:	ldr	r6, [pc, #112]	; 14150 <__assert_fail@plt+0x3230>
   140dc:	ldr	r3, [r6, #4]
   140e0:	ldr	r7, [r6]
   140e4:	cmp	r3, #1
   140e8:	ble	1410c <__assert_fail@plt+0x31ec>
   140ec:	sub	r5, r7, #8
   140f0:	add	r5, r5, r3, lsl #3
   140f4:	mov	r4, r7
   140f8:	ldr	r0, [r4, #12]
   140fc:	add	r4, r4, #8
   14100:	bl	10d10 <free@plt>
   14104:	cmp	r4, r5
   14108:	bne	140f8 <__assert_fail@plt+0x31d8>
   1410c:	ldr	r0, [r7, #4]
   14110:	ldr	r4, [pc, #60]	; 14154 <__assert_fail@plt+0x3234>
   14114:	cmp	r0, r4
   14118:	beq	1412c <__assert_fail@plt+0x320c>
   1411c:	bl	10d10 <free@plt>
   14120:	mov	r3, #256	; 0x100
   14124:	str	r4, [r6, #12]
   14128:	str	r3, [r6, #8]
   1412c:	ldr	r4, [pc, #36]	; 14158 <__assert_fail@plt+0x3238>
   14130:	cmp	r7, r4
   14134:	beq	14144 <__assert_fail@plt+0x3224>
   14138:	mov	r0, r7
   1413c:	bl	10d10 <free@plt>
   14140:	str	r4, [r6]
   14144:	mov	r3, #1
   14148:	str	r3, [r6, #4]
   1414c:	pop	{r4, r5, r6, r7, r8, pc}
   14150:	strdeq	r7, [r2], -r4
   14154:	andeq	r7, r2, r8, lsr #3
   14158:	strdeq	r7, [r2], -ip
   1415c:	ldr	r3, [pc, #4]	; 14168 <__assert_fail@plt+0x3248>
   14160:	mvn	r2, #0
   14164:	b	13cdc <__assert_fail@plt+0x2dbc>
   14168:	andeq	r7, r2, r8, lsr #5
   1416c:	ldr	r3, [pc]	; 14174 <__assert_fail@plt+0x3254>
   14170:	b	13cdc <__assert_fail@plt+0x2dbc>
   14174:	andeq	r7, r2, r8, lsr #5
   14178:	mov	r1, r0
   1417c:	ldr	r3, [pc, #8]	; 1418c <__assert_fail@plt+0x326c>
   14180:	mvn	r2, #0
   14184:	mov	r0, #0
   14188:	b	13cdc <__assert_fail@plt+0x2dbc>
   1418c:	andeq	r7, r2, r8, lsr #5
   14190:	mov	r2, r1
   14194:	ldr	r3, [pc, #8]	; 141a4 <__assert_fail@plt+0x3284>
   14198:	mov	r1, r0
   1419c:	mov	r0, #0
   141a0:	b	13cdc <__assert_fail@plt+0x2dbc>
   141a4:	andeq	r7, r2, r8, lsr #5
   141a8:	push	{r4, r5, r6, lr}
   141ac:	sub	sp, sp, #56	; 0x38
   141b0:	ldr	r4, [pc, #68]	; 141fc <__assert_fail@plt+0x32dc>
   141b4:	mov	r6, r2
   141b8:	mov	r5, r0
   141bc:	ldr	r3, [r4]
   141c0:	add	r0, sp, #4
   141c4:	str	r3, [sp, #52]	; 0x34
   141c8:	bl	12354 <__assert_fail@plt+0x1434>
   141cc:	add	r3, sp, #4
   141d0:	mvn	r2, #0
   141d4:	mov	r1, r6
   141d8:	mov	r0, r5
   141dc:	bl	13cdc <__assert_fail@plt+0x2dbc>
   141e0:	ldr	r2, [sp, #52]	; 0x34
   141e4:	ldr	r3, [r4]
   141e8:	cmp	r2, r3
   141ec:	bne	141f8 <__assert_fail@plt+0x32d8>
   141f0:	add	sp, sp, #56	; 0x38
   141f4:	pop	{r4, r5, r6, pc}
   141f8:	bl	10d64 <__stack_chk_fail@plt>
   141fc:	andeq	r6, r2, r8, lsl #30
   14200:	push	{r4, r5, r6, r7, lr}
   14204:	sub	sp, sp, #60	; 0x3c
   14208:	ldr	r4, [pc, #72]	; 14258 <__assert_fail@plt+0x3338>
   1420c:	mov	r6, r2
   14210:	mov	r7, r3
   14214:	ldr	ip, [r4]
   14218:	mov	r5, r0
   1421c:	add	r0, sp, #4
   14220:	str	ip, [sp, #52]	; 0x34
   14224:	bl	12354 <__assert_fail@plt+0x1434>
   14228:	add	r3, sp, #4
   1422c:	mov	r2, r7
   14230:	mov	r1, r6
   14234:	mov	r0, r5
   14238:	bl	13cdc <__assert_fail@plt+0x2dbc>
   1423c:	ldr	r2, [sp, #52]	; 0x34
   14240:	ldr	r3, [r4]
   14244:	cmp	r2, r3
   14248:	bne	14254 <__assert_fail@plt+0x3334>
   1424c:	add	sp, sp, #60	; 0x3c
   14250:	pop	{r4, r5, r6, r7, pc}
   14254:	bl	10d64 <__stack_chk_fail@plt>
   14258:	andeq	r6, r2, r8, lsl #30
   1425c:	mov	r2, r1
   14260:	mov	r1, r0
   14264:	mov	r0, #0
   14268:	b	141a8 <__assert_fail@plt+0x3288>
   1426c:	mov	r3, r2
   14270:	mov	r2, r1
   14274:	mov	r1, r0
   14278:	mov	r0, #0
   1427c:	b	14200 <__assert_fail@plt+0x32e0>
   14280:	push	{r4, r5, r6, r7, r8, r9, lr}
   14284:	mov	r4, r2
   14288:	ldr	lr, [pc, #128]	; 14310 <__assert_fail@plt+0x33f0>
   1428c:	mov	r8, r0
   14290:	mov	r9, r1
   14294:	ldm	lr!, {r0, r1, r2, r3}
   14298:	sub	sp, sp, #60	; 0x3c
   1429c:	add	ip, sp, #4
   142a0:	lsr	r6, r4, #5
   142a4:	stmia	ip!, {r0, r1, r2, r3}
   142a8:	add	r7, sp, #12
   142ac:	ldm	lr!, {r0, r1, r2, r3}
   142b0:	and	r4, r4, #31
   142b4:	ldr	r5, [pc, #88]	; 14314 <__assert_fail@plt+0x33f4>
   142b8:	stmia	ip!, {r0, r1, r2, r3}
   142bc:	ldm	lr, {r0, r1, r2, r3}
   142c0:	stm	ip, {r0, r1, r2, r3}
   142c4:	mov	r2, r9
   142c8:	ldr	r3, [r7, r6, lsl #2]
   142cc:	ldr	ip, [r5]
   142d0:	mov	r1, r8
   142d4:	mvn	r0, r3, lsr r4
   142d8:	and	r0, r0, #1
   142dc:	str	ip, [sp, #52]	; 0x34
   142e0:	eor	r4, r3, r0, lsl r4
   142e4:	add	r3, sp, #4
   142e8:	mov	r0, #0
   142ec:	str	r4, [r7, r6, lsl #2]
   142f0:	bl	13cdc <__assert_fail@plt+0x2dbc>
   142f4:	ldr	r2, [sp, #52]	; 0x34
   142f8:	ldr	r3, [r5]
   142fc:	cmp	r2, r3
   14300:	bne	1430c <__assert_fail@plt+0x33ec>
   14304:	add	sp, sp, #60	; 0x3c
   14308:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1430c:	bl	10d64 <__stack_chk_fail@plt>
   14310:	andeq	r7, r2, r8, lsr #5
   14314:	andeq	r6, r2, r8, lsl #30
   14318:	mov	r2, r1
   1431c:	mvn	r1, #0
   14320:	b	14280 <__assert_fail@plt+0x3360>
   14324:	mov	r2, #58	; 0x3a
   14328:	mvn	r1, #0
   1432c:	b	14280 <__assert_fail@plt+0x3360>
   14330:	mov	r2, #58	; 0x3a
   14334:	b	14280 <__assert_fail@plt+0x3360>
   14338:	push	{r4, r5, r6, r7, r8, lr}
   1433c:	sub	sp, sp, #104	; 0x68
   14340:	ldr	r5, [pc, #120]	; 143c0 <__assert_fail@plt+0x34a0>
   14344:	mov	r6, r0
   14348:	mov	r0, sp
   1434c:	ldr	r3, [r5]
   14350:	mov	r7, r2
   14354:	str	r3, [sp, #100]	; 0x64
   14358:	bl	12354 <__assert_fail@plt+0x1434>
   1435c:	mov	ip, sp
   14360:	add	lr, sp, #52	; 0x34
   14364:	ldm	ip!, {r0, r1, r2, r3}
   14368:	stmia	lr!, {r0, r1, r2, r3}
   1436c:	ldm	ip!, {r0, r1, r2, r3}
   14370:	ldr	r8, [sp, #64]	; 0x40
   14374:	stmia	lr!, {r0, r1, r2, r3}
   14378:	mvn	r4, r8
   1437c:	ldm	ip, {r0, r1, r2, r3}
   14380:	and	ip, r4, #67108864	; 0x4000000
   14384:	eor	ip, ip, r8
   14388:	str	ip, [sp, #64]	; 0x40
   1438c:	stm	lr, {r0, r1, r2, r3}
   14390:	add	r3, sp, #52	; 0x34
   14394:	mvn	r2, #0
   14398:	mov	r1, r7
   1439c:	mov	r0, r6
   143a0:	bl	13cdc <__assert_fail@plt+0x2dbc>
   143a4:	ldr	r2, [sp, #100]	; 0x64
   143a8:	ldr	r3, [r5]
   143ac:	cmp	r2, r3
   143b0:	bne	143bc <__assert_fail@plt+0x349c>
   143b4:	add	sp, sp, #104	; 0x68
   143b8:	pop	{r4, r5, r6, r7, r8, pc}
   143bc:	bl	10d64 <__stack_chk_fail@plt>
   143c0:	andeq	r6, r2, r8, lsl #30
   143c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   143c8:	mov	r6, r1
   143cc:	ldr	lr, [pc, #132]	; 14458 <__assert_fail@plt+0x3538>
   143d0:	mov	r5, r2
   143d4:	mov	r8, r0
   143d8:	mov	r9, r3
   143dc:	ldm	lr!, {r0, r1, r2, r3}
   143e0:	sub	sp, sp, #60	; 0x3c
   143e4:	add	ip, sp, #4
   143e8:	ldr	r4, [pc, #108]	; 1445c <__assert_fail@plt+0x353c>
   143ec:	stmia	ip!, {r0, r1, r2, r3}
   143f0:	mov	r7, #10
   143f4:	ldm	lr!, {r0, r1, r2, r3}
   143f8:	cmp	r5, #0
   143fc:	cmpne	r6, #0
   14400:	str	r7, [sp, #4]
   14404:	stmia	ip!, {r0, r1, r2, r3}
   14408:	ldm	lr, {r0, r1, r2, r3}
   1440c:	ldr	lr, [r4]
   14410:	stm	ip, {r0, r1, r2, r3}
   14414:	str	lr, [sp, #52]	; 0x34
   14418:	beq	14454 <__assert_fail@plt+0x3534>
   1441c:	add	r3, sp, #4
   14420:	ldr	r2, [sp, #88]	; 0x58
   14424:	mov	r1, r9
   14428:	mov	r0, r8
   1442c:	str	r6, [sp, #44]	; 0x2c
   14430:	str	r5, [sp, #48]	; 0x30
   14434:	bl	13cdc <__assert_fail@plt+0x2dbc>
   14438:	ldr	r2, [sp, #52]	; 0x34
   1443c:	ldr	r3, [r4]
   14440:	cmp	r2, r3
   14444:	bne	14450 <__assert_fail@plt+0x3530>
   14448:	add	sp, sp, #60	; 0x3c
   1444c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14450:	bl	10d64 <__stack_chk_fail@plt>
   14454:	bl	10f08 <abort@plt>
   14458:	andeq	r7, r2, r8, lsr #5
   1445c:	andeq	r6, r2, r8, lsl #30
   14460:	push	{lr}		; (str lr, [sp, #-4]!)
   14464:	sub	sp, sp, #12
   14468:	mvn	ip, #0
   1446c:	str	ip, [sp]
   14470:	bl	143c4 <__assert_fail@plt+0x34a4>
   14474:	add	sp, sp, #12
   14478:	pop	{pc}		; (ldr pc, [sp], #4)
   1447c:	push	{lr}		; (str lr, [sp, #-4]!)
   14480:	sub	sp, sp, #12
   14484:	mvn	ip, #0
   14488:	mov	r3, r2
   1448c:	str	ip, [sp]
   14490:	mov	r2, r1
   14494:	mov	r1, r0
   14498:	mov	r0, #0
   1449c:	bl	143c4 <__assert_fail@plt+0x34a4>
   144a0:	add	sp, sp, #12
   144a4:	pop	{pc}		; (ldr pc, [sp], #4)
   144a8:	push	{lr}		; (str lr, [sp, #-4]!)
   144ac:	sub	sp, sp, #12
   144b0:	str	r3, [sp]
   144b4:	mov	r3, r2
   144b8:	mov	r2, r1
   144bc:	mov	r1, r0
   144c0:	mov	r0, #0
   144c4:	bl	143c4 <__assert_fail@plt+0x34a4>
   144c8:	add	sp, sp, #12
   144cc:	pop	{pc}		; (ldr pc, [sp], #4)
   144d0:	ldr	r3, [pc]	; 144d8 <__assert_fail@plt+0x35b8>
   144d4:	b	13cdc <__assert_fail@plt+0x2dbc>
   144d8:	andeq	r7, r2, r4, lsl #2
   144dc:	mov	r2, r1
   144e0:	ldr	r3, [pc, #8]	; 144f0 <__assert_fail@plt+0x35d0>
   144e4:	mov	r1, r0
   144e8:	mov	r0, #0
   144ec:	b	13cdc <__assert_fail@plt+0x2dbc>
   144f0:	andeq	r7, r2, r4, lsl #2
   144f4:	ldr	r3, [pc, #4]	; 14500 <__assert_fail@plt+0x35e0>
   144f8:	mvn	r2, #0
   144fc:	b	13cdc <__assert_fail@plt+0x2dbc>
   14500:	andeq	r7, r2, r4, lsl #2
   14504:	mov	r1, r0
   14508:	ldr	r3, [pc, #8]	; 14518 <__assert_fail@plt+0x35f8>
   1450c:	mvn	r2, #0
   14510:	mov	r0, #0
   14514:	b	13cdc <__assert_fail@plt+0x2dbc>
   14518:	andeq	r7, r2, r4, lsl #2
   1451c:	push	{r4, r5, r6, lr}
   14520:	sub	sp, sp, #32
   14524:	cmp	r1, #0
   14528:	mov	r5, r0
   1452c:	ldr	r4, [sp, #48]	; 0x30
   14530:	ldr	r6, [sp, #52]	; 0x34
   14534:	beq	145c4 <__assert_fail@plt+0x36a4>
   14538:	strd	r2, [sp]
   1453c:	mov	r3, r1
   14540:	ldr	r2, [pc, #828]	; 14884 <__assert_fail@plt+0x3964>
   14544:	mov	r1, #1
   14548:	bl	10e78 <__fprintf_chk@plt>
   1454c:	mov	r2, #5
   14550:	ldr	r1, [pc, #816]	; 14888 <__assert_fail@plt+0x3968>
   14554:	mov	r0, #0
   14558:	bl	10d58 <dcgettext@plt>
   1455c:	ldr	r3, [pc, #808]	; 1488c <__assert_fail@plt+0x396c>
   14560:	ldr	r2, [pc, #808]	; 14890 <__assert_fail@plt+0x3970>
   14564:	str	r3, [sp]
   14568:	mov	r1, #1
   1456c:	mov	r3, r0
   14570:	mov	r0, r5
   14574:	bl	10e78 <__fprintf_chk@plt>
   14578:	ldr	r1, [pc, #788]	; 14894 <__assert_fail@plt+0x3974>
   1457c:	mov	r2, #5
   14580:	mov	r0, #0
   14584:	bl	10d58 <dcgettext@plt>
   14588:	mov	r1, r5
   1458c:	bl	10cd4 <fputs_unlocked@plt>
   14590:	cmp	r6, #9
   14594:	ldrls	pc, [pc, r6, lsl #2]
   14598:	b	14874 <__assert_fail@plt+0x3954>
   1459c:	andeq	r4, r1, r0, lsl #17
   145a0:	andeq	r4, r1, r8, asr #12
   145a4:	andeq	r4, r1, r4, ror r6
   145a8:	andeq	r4, r1, r8, lsr #13
   145ac:	andeq	r4, r1, r4, ror #13
   145b0:	andeq	r4, r1, r4, lsr #14
   145b4:	andeq	r4, r1, ip, ror #14
   145b8:			; <UNDEFINED> instruction: 0x000147bc
   145bc:	andeq	r4, r1, r4, lsl r8
   145c0:	ldrdeq	r4, [r1], -ip
   145c4:	str	r3, [sp]
   145c8:	mov	r1, #1
   145cc:	mov	r3, r2
   145d0:	ldr	r2, [pc, #704]	; 14898 <__assert_fail@plt+0x3978>
   145d4:	bl	10e78 <__fprintf_chk@plt>
   145d8:	b	1454c <__assert_fail@plt+0x362c>
   145dc:	ldr	r1, [pc, #696]	; 1489c <__assert_fail@plt+0x397c>
   145e0:	mov	r2, #5
   145e4:	mov	r0, #0
   145e8:	bl	10d58 <dcgettext@plt>
   145ec:	ldr	r2, [r4, #32]
   145f0:	ldr	r3, [r4, #28]
   145f4:	ldr	r1, [r4, #24]
   145f8:	str	r2, [sp, #28]
   145fc:	ldr	r2, [r4, #20]
   14600:	str	r3, [sp, #24]
   14604:	ldr	r3, [r4, #16]
   14608:	str	r1, [sp, #20]
   1460c:	ldr	r1, [r4, #12]
   14610:	str	r2, [sp, #16]
   14614:	ldr	r2, [r4, #8]
   14618:	str	r3, [sp, #12]
   1461c:	ldr	r3, [r4, #4]
   14620:	str	r1, [sp, #8]
   14624:	str	r2, [sp, #4]
   14628:	str	r3, [sp]
   1462c:	mov	r1, #1
   14630:	ldr	r3, [r4]
   14634:	mov	r2, r0
   14638:	mov	r0, r5
   1463c:	bl	10e78 <__fprintf_chk@plt>
   14640:	add	sp, sp, #32
   14644:	pop	{r4, r5, r6, pc}
   14648:	mov	r2, #5
   1464c:	ldr	r1, [pc, #588]	; 148a0 <__assert_fail@plt+0x3980>
   14650:	mov	r0, #0
   14654:	bl	10d58 <dcgettext@plt>
   14658:	ldr	r3, [r4]
   1465c:	mov	r1, #1
   14660:	mov	r2, r0
   14664:	mov	r0, r5
   14668:	add	sp, sp, #32
   1466c:	pop	{r4, r5, r6, lr}
   14670:	b	10e78 <__fprintf_chk@plt>
   14674:	mov	r2, #5
   14678:	ldr	r1, [pc, #548]	; 148a4 <__assert_fail@plt+0x3984>
   1467c:	mov	r0, #0
   14680:	bl	10d58 <dcgettext@plt>
   14684:	ldr	r2, [r4, #4]
   14688:	ldr	r3, [r4]
   1468c:	mov	r1, #1
   14690:	str	r2, [sp, #48]	; 0x30
   14694:	mov	r2, r0
   14698:	mov	r0, r5
   1469c:	add	sp, sp, #32
   146a0:	pop	{r4, r5, r6, lr}
   146a4:	b	10e78 <__fprintf_chk@plt>
   146a8:	mov	r2, #5
   146ac:	ldr	r1, [pc, #500]	; 148a8 <__assert_fail@plt+0x3988>
   146b0:	mov	r0, #0
   146b4:	bl	10d58 <dcgettext@plt>
   146b8:	ldr	r2, [r4, #8]
   146bc:	ldr	r3, [r4, #4]
   146c0:	mov	r1, #1
   146c4:	str	r2, [sp, #52]	; 0x34
   146c8:	str	r3, [sp, #48]	; 0x30
   146cc:	ldr	r3, [r4]
   146d0:	mov	r2, r0
   146d4:	mov	r0, r5
   146d8:	add	sp, sp, #32
   146dc:	pop	{r4, r5, r6, lr}
   146e0:	b	10e78 <__fprintf_chk@plt>
   146e4:	mov	r2, #5
   146e8:	ldr	r1, [pc, #444]	; 148ac <__assert_fail@plt+0x398c>
   146ec:	mov	r0, #0
   146f0:	bl	10d58 <dcgettext@plt>
   146f4:	ldr	r1, [r4, #12]
   146f8:	ldr	r2, [r4, #8]
   146fc:	ldr	r3, [r4, #4]
   14700:	str	r1, [sp, #8]
   14704:	str	r2, [sp, #4]
   14708:	str	r3, [sp]
   1470c:	mov	r1, #1
   14710:	ldr	r3, [r4]
   14714:	mov	r2, r0
   14718:	mov	r0, r5
   1471c:	bl	10e78 <__fprintf_chk@plt>
   14720:	b	14640 <__assert_fail@plt+0x3720>
   14724:	mov	r2, #5
   14728:	ldr	r1, [pc, #384]	; 148b0 <__assert_fail@plt+0x3990>
   1472c:	mov	r0, #0
   14730:	bl	10d58 <dcgettext@plt>
   14734:	ldr	r3, [r4, #16]
   14738:	ldr	r1, [r4, #12]
   1473c:	ldr	r2, [r4, #8]
   14740:	str	r3, [sp, #12]
   14744:	ldr	r3, [r4, #4]
   14748:	str	r1, [sp, #8]
   1474c:	str	r2, [sp, #4]
   14750:	str	r3, [sp]
   14754:	mov	r1, #1
   14758:	ldr	r3, [r4]
   1475c:	mov	r2, r0
   14760:	mov	r0, r5
   14764:	bl	10e78 <__fprintf_chk@plt>
   14768:	b	14640 <__assert_fail@plt+0x3720>
   1476c:	mov	r2, #5
   14770:	ldr	r1, [pc, #316]	; 148b4 <__assert_fail@plt+0x3994>
   14774:	mov	r0, #0
   14778:	bl	10d58 <dcgettext@plt>
   1477c:	ldr	r2, [r4, #20]
   14780:	ldr	r3, [r4, #16]
   14784:	ldr	r1, [r4, #12]
   14788:	str	r2, [sp, #16]
   1478c:	ldr	r2, [r4, #8]
   14790:	str	r3, [sp, #12]
   14794:	ldr	r3, [r4, #4]
   14798:	str	r1, [sp, #8]
   1479c:	str	r2, [sp, #4]
   147a0:	str	r3, [sp]
   147a4:	mov	r1, #1
   147a8:	ldr	r3, [r4]
   147ac:	mov	r2, r0
   147b0:	mov	r0, r5
   147b4:	bl	10e78 <__fprintf_chk@plt>
   147b8:	b	14640 <__assert_fail@plt+0x3720>
   147bc:	mov	r2, #5
   147c0:	ldr	r1, [pc, #240]	; 148b8 <__assert_fail@plt+0x3998>
   147c4:	mov	r0, #0
   147c8:	bl	10d58 <dcgettext@plt>
   147cc:	ldr	r1, [r4, #24]
   147d0:	ldr	r2, [r4, #20]
   147d4:	ldr	r3, [r4, #16]
   147d8:	str	r1, [sp, #20]
   147dc:	ldr	r1, [r4, #12]
   147e0:	str	r2, [sp, #16]
   147e4:	ldr	r2, [r4, #8]
   147e8:	str	r3, [sp, #12]
   147ec:	ldr	r3, [r4, #4]
   147f0:	str	r1, [sp, #8]
   147f4:	str	r2, [sp, #4]
   147f8:	str	r3, [sp]
   147fc:	mov	r1, #1
   14800:	ldr	r3, [r4]
   14804:	mov	r2, r0
   14808:	mov	r0, r5
   1480c:	bl	10e78 <__fprintf_chk@plt>
   14810:	b	14640 <__assert_fail@plt+0x3720>
   14814:	mov	r2, #5
   14818:	ldr	r1, [pc, #156]	; 148bc <__assert_fail@plt+0x399c>
   1481c:	mov	r0, #0
   14820:	bl	10d58 <dcgettext@plt>
   14824:	ldr	r3, [r4, #28]
   14828:	ldr	r1, [r4, #24]
   1482c:	ldr	r2, [r4, #20]
   14830:	str	r3, [sp, #24]
   14834:	ldr	r3, [r4, #16]
   14838:	str	r1, [sp, #20]
   1483c:	ldr	r1, [r4, #12]
   14840:	str	r2, [sp, #16]
   14844:	ldr	r2, [r4, #8]
   14848:	str	r3, [sp, #12]
   1484c:	ldr	r3, [r4, #4]
   14850:	str	r1, [sp, #8]
   14854:	str	r2, [sp, #4]
   14858:	str	r3, [sp]
   1485c:	mov	r1, #1
   14860:	ldr	r3, [r4]
   14864:	mov	r2, r0
   14868:	mov	r0, r5
   1486c:	bl	10e78 <__fprintf_chk@plt>
   14870:	b	14640 <__assert_fail@plt+0x3720>
   14874:	mov	r2, #5
   14878:	ldr	r1, [pc, #64]	; 148c0 <__assert_fail@plt+0x39a0>
   1487c:	b	145e4 <__assert_fail@plt+0x36c4>
   14880:	bl	10f08 <abort@plt>
   14884:	andeq	r5, r1, r8, lsr #26
   14888:	andeq	r5, r1, ip, lsr sp
   1488c:	andeq	r0, r0, r2, ror #15
   14890:	andeq	r6, r1, r0, lsl r0
   14894:	andeq	r5, r1, r0, asr #26
   14898:	andeq	r5, r1, r4, lsr sp
   1489c:	andeq	r5, r1, r8, lsl pc
   148a0:	andeq	r5, r1, ip, lsl #28
   148a4:	andeq	r5, r1, ip, lsl lr
   148a8:	andeq	r5, r1, r4, lsr lr
   148ac:	andeq	r5, r1, r0, asr lr
   148b0:	andeq	r5, r1, r0, ror lr
   148b4:	muleq	r1, r4, lr
   148b8:			; <UNDEFINED> instruction: 0x00015ebc
   148bc:	andeq	r5, r1, r8, ror #29
   148c0:	andeq	r5, r1, ip, asr #30
   148c4:	push	{r4, r5, lr}
   148c8:	sub	sp, sp, #12
   148cc:	ldr	r5, [sp, #24]
   148d0:	ldr	ip, [r5]
   148d4:	cmp	ip, #0
   148d8:	beq	148f4 <__assert_fail@plt+0x39d4>
   148dc:	mov	lr, r5
   148e0:	mov	ip, #0
   148e4:	ldr	r4, [lr, #4]!
   148e8:	add	ip, ip, #1
   148ec:	cmp	r4, #0
   148f0:	bne	148e4 <__assert_fail@plt+0x39c4>
   148f4:	stm	sp, {r5, ip}
   148f8:	bl	1451c <__assert_fail@plt+0x35fc>
   148fc:	add	sp, sp, #12
   14900:	pop	{r4, r5, pc}
   14904:	push	{r4, r5, r6, lr}
   14908:	sub	sp, sp, #56	; 0x38
   1490c:	ldr	r6, [pc, #88]	; 1496c <__assert_fail@plt+0x3a4c>
   14910:	ldr	r5, [sp, #72]	; 0x48
   14914:	add	r4, sp, #8
   14918:	ldr	ip, [r6]
   1491c:	str	ip, [sp, #52]	; 0x34
   14920:	mov	ip, #0
   14924:	ldr	lr, [r5], #4
   14928:	cmp	lr, #0
   1492c:	str	lr, [r4, #4]!
   14930:	beq	14940 <__assert_fail@plt+0x3a20>
   14934:	add	ip, ip, #1
   14938:	cmp	ip, #10
   1493c:	bne	14924 <__assert_fail@plt+0x3a04>
   14940:	add	lr, sp, #12
   14944:	str	ip, [sp, #4]
   14948:	str	lr, [sp]
   1494c:	bl	1451c <__assert_fail@plt+0x35fc>
   14950:	ldr	r2, [sp, #52]	; 0x34
   14954:	ldr	r3, [r6]
   14958:	cmp	r2, r3
   1495c:	bne	14968 <__assert_fail@plt+0x3a48>
   14960:	add	sp, sp, #56	; 0x38
   14964:	pop	{r4, r5, r6, pc}
   14968:	bl	10d64 <__stack_chk_fail@plt>
   1496c:	andeq	r6, r2, r8, lsl #30
   14970:	push	{r3}		; (str r3, [sp, #-4]!)
   14974:	mov	ip, #0
   14978:	push	{r4, r5, r6, lr}
   1497c:	sub	sp, sp, #60	; 0x3c
   14980:	ldr	r6, [pc, #100]	; 149ec <__assert_fail@plt+0x3acc>
   14984:	add	r5, sp, #8
   14988:	add	r4, sp, #80	; 0x50
   1498c:	ldr	r3, [r6]
   14990:	str	r4, [sp, #8]
   14994:	str	r3, [sp, #52]	; 0x34
   14998:	ldr	r3, [sp, #76]	; 0x4c
   1499c:	ldr	lr, [r4], #4
   149a0:	cmp	lr, #0
   149a4:	str	lr, [r5, #4]!
   149a8:	beq	149b8 <__assert_fail@plt+0x3a98>
   149ac:	add	ip, ip, #1
   149b0:	cmp	ip, #10
   149b4:	bne	1499c <__assert_fail@plt+0x3a7c>
   149b8:	add	lr, sp, #12
   149bc:	str	ip, [sp, #4]
   149c0:	str	lr, [sp]
   149c4:	bl	1451c <__assert_fail@plt+0x35fc>
   149c8:	ldr	r2, [sp, #52]	; 0x34
   149cc:	ldr	r3, [r6]
   149d0:	cmp	r2, r3
   149d4:	bne	149e8 <__assert_fail@plt+0x3ac8>
   149d8:	add	sp, sp, #60	; 0x3c
   149dc:	pop	{r4, r5, r6, lr}
   149e0:	add	sp, sp, #4
   149e4:	bx	lr
   149e8:	bl	10d64 <__stack_chk_fail@plt>
   149ec:	andeq	r6, r2, r8, lsl #30
   149f0:	push	{r4, lr}
   149f4:	mov	r2, #5
   149f8:	ldr	r1, [pc, #88]	; 14a58 <__assert_fail@plt+0x3b38>
   149fc:	mov	r0, #0
   14a00:	bl	10d58 <dcgettext@plt>
   14a04:	ldr	r2, [pc, #80]	; 14a5c <__assert_fail@plt+0x3b3c>
   14a08:	mov	r1, r0
   14a0c:	mov	r0, #1
   14a10:	bl	10e60 <__printf_chk@plt>
   14a14:	mov	r2, #5
   14a18:	ldr	r1, [pc, #64]	; 14a60 <__assert_fail@plt+0x3b40>
   14a1c:	mov	r0, #0
   14a20:	bl	10d58 <dcgettext@plt>
   14a24:	ldr	r3, [pc, #56]	; 14a64 <__assert_fail@plt+0x3b44>
   14a28:	ldr	r2, [pc, #56]	; 14a68 <__assert_fail@plt+0x3b48>
   14a2c:	mov	r1, r0
   14a30:	mov	r0, #1
   14a34:	bl	10e60 <__printf_chk@plt>
   14a38:	ldr	r1, [pc, #44]	; 14a6c <__assert_fail@plt+0x3b4c>
   14a3c:	mov	r2, #5
   14a40:	mov	r0, #0
   14a44:	bl	10d58 <dcgettext@plt>
   14a48:	ldr	r3, [pc, #32]	; 14a70 <__assert_fail@plt+0x3b50>
   14a4c:	pop	{r4, lr}
   14a50:	ldr	r1, [r3]
   14a54:	b	10cd4 <fputs_unlocked@plt>
   14a58:	andeq	r5, r1, r8, lsl #31
   14a5c:	andeq	r5, r1, r0, lsr #31
   14a60:			; <UNDEFINED> instruction: 0x00015fb8
   14a64:	andeq	r5, r1, r4, ror #13
   14a68:	andeq	r5, r1, ip, lsl #14
   14a6c:	andeq	r5, r1, ip, asr #31
   14a70:	andeq	r7, r2, r4, asr r1
   14a74:	push	{r4, lr}
   14a78:	mov	r4, r0
   14a7c:	bl	10ddc <malloc@plt>
   14a80:	adds	r4, r4, #0
   14a84:	movne	r4, #1
   14a88:	cmp	r0, #0
   14a8c:	movne	r4, #0
   14a90:	cmp	r4, #0
   14a94:	popeq	{r4, pc}
   14a98:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14a9c:	push	{r4, r5, r6, lr}
   14aa0:	umull	r4, r5, r0, r1
   14aa4:	adds	r3, r5, #0
   14aa8:	movne	r3, #1
   14aac:	cmp	r4, #0
   14ab0:	blt	14ac8 <__assert_fail@plt+0x3ba8>
   14ab4:	cmp	r3, #0
   14ab8:	bne	14ac8 <__assert_fail@plt+0x3ba8>
   14abc:	mul	r0, r1, r0
   14ac0:	pop	{r4, r5, r6, lr}
   14ac4:	b	14a74 <__assert_fail@plt+0x3b54>
   14ac8:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14acc:	b	14a74 <__assert_fail@plt+0x3b54>
   14ad0:	adds	r3, r0, #0
   14ad4:	movne	r3, #1
   14ad8:	cmp	r1, #0
   14adc:	movne	r3, #0
   14ae0:	cmp	r3, #0
   14ae4:	push	{r4, lr}
   14ae8:	bne	14b10 <__assert_fail@plt+0x3bf0>
   14aec:	mov	r4, r1
   14af0:	bl	10d70 <realloc@plt>
   14af4:	adds	r4, r4, #0
   14af8:	movne	r4, #1
   14afc:	cmp	r0, #0
   14b00:	movne	r4, #0
   14b04:	cmp	r4, #0
   14b08:	popeq	{r4, pc}
   14b0c:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14b10:	bl	10d10 <free@plt>
   14b14:	mov	r0, #0
   14b18:	pop	{r4, pc}
   14b1c:	push	{r4, r5, r6, lr}
   14b20:	umull	r4, r5, r1, r2
   14b24:	adds	r3, r5, #0
   14b28:	movne	r3, #1
   14b2c:	cmp	r4, #0
   14b30:	blt	14b48 <__assert_fail@plt+0x3c28>
   14b34:	cmp	r3, #0
   14b38:	bne	14b48 <__assert_fail@plt+0x3c28>
   14b3c:	mul	r1, r2, r1
   14b40:	pop	{r4, r5, r6, lr}
   14b44:	b	14ad0 <__assert_fail@plt+0x3bb0>
   14b48:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14b4c:	push	{r4, r5, r6, r7, r8, lr}
   14b50:	subs	r7, r0, #0
   14b54:	mov	r6, r1
   14b58:	mov	r5, r2
   14b5c:	ldr	r4, [r1]
   14b60:	beq	14b94 <__assert_fail@plt+0x3c74>
   14b64:	mov	r1, r2
   14b68:	ldr	r0, [pc, #104]	; 14bd8 <__assert_fail@plt+0x3cb8>
   14b6c:	bl	15024 <__assert_fail@plt+0x4104>
   14b70:	cmp	r0, r4
   14b74:	bls	14bb8 <__assert_fail@plt+0x3c98>
   14b78:	add	r3, r4, #1
   14b7c:	add	r4, r3, r4, lsr #1
   14b80:	str	r4, [r6]
   14b84:	mul	r1, r5, r4
   14b88:	mov	r0, r7
   14b8c:	pop	{r4, r5, r6, r7, r8, lr}
   14b90:	b	14ad0 <__assert_fail@plt+0x3bb0>
   14b94:	cmp	r4, #0
   14b98:	beq	14bbc <__assert_fail@plt+0x3c9c>
   14b9c:	umull	r0, r1, r4, r5
   14ba0:	adds	r3, r1, #0
   14ba4:	movne	r3, #1
   14ba8:	cmp	r0, #0
   14bac:	blt	14bb8 <__assert_fail@plt+0x3c98>
   14bb0:	cmp	r3, #0
   14bb4:	beq	14b80 <__assert_fail@plt+0x3c60>
   14bb8:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14bbc:	mov	r1, r2
   14bc0:	mov	r0, #64	; 0x40
   14bc4:	bl	15024 <__assert_fail@plt+0x4104>
   14bc8:	cmp	r5, #64	; 0x40
   14bcc:	movls	r4, r0
   14bd0:	addhi	r4, r0, #1
   14bd4:	b	14b9c <__assert_fail@plt+0x3c7c>
   14bd8:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14bdc:	cmp	r0, #0
   14be0:	ldr	r3, [r1]
   14be4:	beq	14c08 <__assert_fail@plt+0x3ce8>
   14be8:	ldr	r2, [pc, #60]	; 14c2c <__assert_fail@plt+0x3d0c>
   14bec:	cmp	r3, r2
   14bf0:	bhi	14c24 <__assert_fail@plt+0x3d04>
   14bf4:	add	r2, r3, #1
   14bf8:	add	r3, r2, r3, lsr #1
   14bfc:	str	r3, [r1]
   14c00:	mov	r1, r3
   14c04:	b	14ad0 <__assert_fail@plt+0x3bb0>
   14c08:	cmp	r3, #0
   14c0c:	bne	14c20 <__assert_fail@plt+0x3d00>
   14c10:	mov	r3, #64	; 0x40
   14c14:	str	r3, [r1]
   14c18:	mov	r1, r3
   14c1c:	b	14ad0 <__assert_fail@plt+0x3bb0>
   14c20:	bge	14bfc <__assert_fail@plt+0x3cdc>
   14c24:	push	{r4, lr}
   14c28:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14c2c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14c30:	push	{r4, lr}
   14c34:	mov	r4, r0
   14c38:	bl	14a74 <__assert_fail@plt+0x3b54>
   14c3c:	mov	r2, r4
   14c40:	mov	r1, #0
   14c44:	pop	{r4, lr}
   14c48:	b	10e54 <memset@plt>
   14c4c:	push	{r4, r5, r6, lr}
   14c50:	umull	r4, r5, r0, r1
   14c54:	adds	r3, r5, #0
   14c58:	movne	r3, #1
   14c5c:	cmp	r4, #0
   14c60:	blt	14c78 <__assert_fail@plt+0x3d58>
   14c64:	cmp	r3, #0
   14c68:	bne	14c78 <__assert_fail@plt+0x3d58>
   14c6c:	bl	10cc8 <calloc@plt>
   14c70:	cmp	r0, #0
   14c74:	popne	{r4, r5, r6, pc}
   14c78:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14c7c:	push	{r4, r5, r6, lr}
   14c80:	mov	r4, r1
   14c84:	mov	r5, r0
   14c88:	mov	r0, r1
   14c8c:	bl	14a74 <__assert_fail@plt+0x3b54>
   14c90:	mov	r2, r4
   14c94:	mov	r1, r5
   14c98:	pop	{r4, r5, r6, lr}
   14c9c:	b	10d34 <memcpy@plt>
   14ca0:	push	{r4, lr}
   14ca4:	mov	r4, r0
   14ca8:	bl	10e30 <strlen@plt>
   14cac:	add	r1, r0, #1
   14cb0:	mov	r0, r4
   14cb4:	pop	{r4, lr}
   14cb8:	b	14c7c <__assert_fail@plt+0x3d5c>
   14cbc:	ldr	r3, [pc, #44]	; 14cf0 <__assert_fail@plt+0x3dd0>
   14cc0:	push	{r4, lr}
   14cc4:	mov	r2, #5
   14cc8:	ldr	r1, [pc, #36]	; 14cf4 <__assert_fail@plt+0x3dd4>
   14ccc:	mov	r0, #0
   14cd0:	ldr	r4, [r3]
   14cd4:	bl	10d58 <dcgettext@plt>
   14cd8:	ldr	r2, [pc, #24]	; 14cf8 <__assert_fail@plt+0x3dd8>
   14cdc:	mov	r1, #0
   14ce0:	mov	r3, r0
   14ce4:	mov	r0, r4
   14ce8:	bl	10dd0 <error@plt>
   14cec:	bl	10f08 <abort@plt>
   14cf0:	strdeq	r7, [r2], -r0
   14cf4:	andeq	r6, r1, r0, asr #32
   14cf8:			; <UNDEFINED> instruction: 0x000159bc
   14cfc:	push	{r4, lr}
   14d00:	bl	10d1c <strndup@plt>
   14d04:	cmp	r0, #0
   14d08:	popne	{r4, pc}
   14d0c:	bl	14cbc <__assert_fail@plt+0x3d9c>
   14d10:	push	{r4, r5, lr}
   14d14:	sub	sp, sp, #12
   14d18:	mov	r4, r0
   14d1c:	bl	10e6c <fileno@plt>
   14d20:	cmp	r0, #0
   14d24:	mov	r0, r4
   14d28:	blt	14da4 <__assert_fail@plt+0x3e84>
   14d2c:	bl	10df4 <__freading@plt>
   14d30:	cmp	r0, #0
   14d34:	bne	14d70 <__assert_fail@plt+0x3e50>
   14d38:	mov	r0, r4
   14d3c:	bl	14db0 <__assert_fail@plt+0x3e90>
   14d40:	cmp	r0, #0
   14d44:	beq	14da0 <__assert_fail@plt+0x3e80>
   14d48:	bl	10e3c <__errno_location@plt>
   14d4c:	mov	r5, r0
   14d50:	mov	r0, r4
   14d54:	ldr	r4, [r5]
   14d58:	bl	10e84 <fclose@plt>
   14d5c:	cmp	r4, #0
   14d60:	mvnne	r0, #0
   14d64:	strne	r4, [r5]
   14d68:	add	sp, sp, #12
   14d6c:	pop	{r4, r5, pc}
   14d70:	mov	r0, r4
   14d74:	bl	10e6c <fileno@plt>
   14d78:	mov	r3, #1
   14d7c:	str	r3, [sp]
   14d80:	mov	r2, #0
   14d84:	mov	r3, #0
   14d88:	bl	10da0 <lseek64@plt>
   14d8c:	mvn	r3, #0
   14d90:	mvn	r2, #0
   14d94:	cmp	r1, r3
   14d98:	cmpeq	r0, r2
   14d9c:	bne	14d38 <__assert_fail@plt+0x3e18>
   14da0:	mov	r0, r4
   14da4:	add	sp, sp, #12
   14da8:	pop	{r4, r5, lr}
   14dac:	b	10e84 <fclose@plt>
   14db0:	push	{r4, lr}
   14db4:	subs	r4, r0, #0
   14db8:	sub	sp, sp, #8
   14dbc:	beq	14dd8 <__assert_fail@plt+0x3eb8>
   14dc0:	bl	10df4 <__freading@plt>
   14dc4:	cmp	r0, #0
   14dc8:	beq	14dd8 <__assert_fail@plt+0x3eb8>
   14dcc:	ldr	r3, [r4]
   14dd0:	tst	r3, #256	; 0x100
   14dd4:	bne	14de8 <__assert_fail@plt+0x3ec8>
   14dd8:	mov	r0, r4
   14ddc:	add	sp, sp, #8
   14de0:	pop	{r4, lr}
   14de4:	b	10d04 <fflush@plt>
   14de8:	mov	r3, #1
   14dec:	str	r3, [sp]
   14df0:	mov	r2, #0
   14df4:	mov	r3, #0
   14df8:	mov	r0, r4
   14dfc:	bl	14e10 <__assert_fail@plt+0x3ef0>
   14e00:	mov	r0, r4
   14e04:	add	sp, sp, #8
   14e08:	pop	{r4, lr}
   14e0c:	b	10d04 <fflush@plt>
   14e10:	push	{r4, r5, r6, r7, r8, lr}
   14e14:	sub	sp, sp, #8
   14e18:	ldmib	r0, {ip, lr}
   14e1c:	mov	r4, r0
   14e20:	ldr	r5, [sp, #32]
   14e24:	cmp	lr, ip
   14e28:	beq	14e40 <__assert_fail@plt+0x3f20>
   14e2c:	str	r5, [sp, #32]
   14e30:	mov	r0, r4
   14e34:	add	sp, sp, #8
   14e38:	pop	{r4, r5, r6, r7, r8, lr}
   14e3c:	b	10e90 <fseeko64@plt>
   14e40:	ldr	lr, [r0, #20]
   14e44:	ldr	ip, [r0, #16]
   14e48:	cmp	lr, ip
   14e4c:	bne	14e2c <__assert_fail@plt+0x3f0c>
   14e50:	ldr	r8, [r0, #36]	; 0x24
   14e54:	cmp	r8, #0
   14e58:	bne	14e2c <__assert_fail@plt+0x3f0c>
   14e5c:	mov	r6, r2
   14e60:	mov	r7, r3
   14e64:	bl	10e6c <fileno@plt>
   14e68:	mov	r2, r6
   14e6c:	mov	r3, r7
   14e70:	str	r5, [sp]
   14e74:	bl	10da0 <lseek64@plt>
   14e78:	mvn	r3, #0
   14e7c:	mvn	r2, #0
   14e80:	cmp	r1, r3
   14e84:	cmpeq	r0, r2
   14e88:	beq	14ea8 <__assert_fail@plt+0x3f88>
   14e8c:	ldr	r3, [r4]
   14e90:	strd	r0, [r4, #80]	; 0x50
   14e94:	mov	r0, r8
   14e98:	bic	r3, r3, #16
   14e9c:	str	r3, [r4]
   14ea0:	add	sp, sp, #8
   14ea4:	pop	{r4, r5, r6, r7, r8, pc}
   14ea8:	mvn	r0, #0
   14eac:	b	14ea0 <__assert_fail@plt+0x3f80>
   14eb0:	push	{r4, r5, r6, r7, r8, lr}
   14eb4:	subs	r7, r0, #0
   14eb8:	ldr	r5, [pc, #108]	; 14f2c <__assert_fail@plt+0x400c>
   14ebc:	sub	sp, sp, #8
   14ec0:	mov	r8, r1
   14ec4:	ldr	r1, [r5]
   14ec8:	moveq	r7, sp
   14ecc:	str	r1, [sp, #4]
   14ed0:	mov	r0, r7
   14ed4:	mov	r1, r8
   14ed8:	mov	r6, r2
   14edc:	bl	10dc4 <mbrtowc@plt>
   14ee0:	cmp	r6, #0
   14ee4:	cmnne	r0, #3
   14ee8:	mov	r4, r0
   14eec:	bhi	14f0c <__assert_fail@plt+0x3fec>
   14ef0:	ldr	r2, [sp, #4]
   14ef4:	ldr	r3, [r5]
   14ef8:	mov	r0, r4
   14efc:	cmp	r2, r3
   14f00:	bne	14f28 <__assert_fail@plt+0x4008>
   14f04:	add	sp, sp, #8
   14f08:	pop	{r4, r5, r6, r7, r8, pc}
   14f0c:	mov	r0, #0
   14f10:	bl	14fa4 <__assert_fail@plt+0x4084>
   14f14:	cmp	r0, #0
   14f18:	moveq	r4, #1
   14f1c:	ldrbeq	r3, [r8]
   14f20:	streq	r3, [r7]
   14f24:	b	14ef0 <__assert_fail@plt+0x3fd0>
   14f28:	bl	10d64 <__stack_chk_fail@plt>
   14f2c:	andeq	r6, r2, r8, lsl #30
   14f30:	push	{r4, r5, r6, lr}
   14f34:	mov	r4, r0
   14f38:	bl	10db8 <__fpending@plt>
   14f3c:	ldr	r5, [r4]
   14f40:	and	r5, r5, #32
   14f44:	mov	r6, r0
   14f48:	mov	r0, r4
   14f4c:	bl	14d10 <__assert_fail@plt+0x3df0>
   14f50:	cmp	r5, #0
   14f54:	mov	r4, r0
   14f58:	bne	14f84 <__assert_fail@plt+0x4064>
   14f5c:	cmp	r0, #0
   14f60:	beq	14f7c <__assert_fail@plt+0x405c>
   14f64:	cmp	r6, #0
   14f68:	bne	14f9c <__assert_fail@plt+0x407c>
   14f6c:	bl	10e3c <__errno_location@plt>
   14f70:	ldr	r4, [r0]
   14f74:	subs	r4, r4, #9
   14f78:	mvnne	r4, #0
   14f7c:	mov	r0, r4
   14f80:	pop	{r4, r5, r6, pc}
   14f84:	cmp	r0, #0
   14f88:	bne	14f9c <__assert_fail@plt+0x407c>
   14f8c:	bl	10e3c <__errno_location@plt>
   14f90:	str	r4, [r0]
   14f94:	mvn	r4, #0
   14f98:	b	14f7c <__assert_fail@plt+0x405c>
   14f9c:	mvn	r4, #0
   14fa0:	b	14f7c <__assert_fail@plt+0x405c>
   14fa4:	push	{r4, lr}
   14fa8:	mov	r1, #0
   14fac:	bl	10eb4 <setlocale@plt>
   14fb0:	subs	r4, r0, #0
   14fb4:	beq	14fe0 <__assert_fail@plt+0x40c0>
   14fb8:	ldr	r1, [pc, #40]	; 14fe8 <__assert_fail@plt+0x40c8>
   14fbc:	bl	10cec <strcmp@plt>
   14fc0:	cmp	r0, #0
   14fc4:	popeq	{r4, pc}
   14fc8:	mov	r0, r4
   14fcc:	ldr	r1, [pc, #24]	; 14fec <__assert_fail@plt+0x40cc>
   14fd0:	bl	10cec <strcmp@plt>
   14fd4:	adds	r0, r0, #0
   14fd8:	movne	r0, #1
   14fdc:	pop	{r4, pc}
   14fe0:	mov	r0, #1
   14fe4:	pop	{r4, pc}
   14fe8:	andeq	r6, r1, r4, asr r0
   14fec:	andeq	r6, r1, r8, asr r0
   14ff0:	push	{r4, lr}
   14ff4:	mov	r0, #14
   14ff8:	bl	10ecc <nl_langinfo@plt>
   14ffc:	cmp	r0, #0
   15000:	beq	15018 <__assert_fail@plt+0x40f8>
   15004:	ldrb	r2, [r0]
   15008:	ldr	r3, [pc, #16]	; 15020 <__assert_fail@plt+0x4100>
   1500c:	cmp	r2, #0
   15010:	moveq	r0, r3
   15014:	pop	{r4, pc}
   15018:	ldr	r0, [pc]	; 15020 <__assert_fail@plt+0x4100>
   1501c:	pop	{r4, pc}
   15020:	andeq	r6, r1, r0, rrx
   15024:	subs	r2, r1, #1
   15028:	bxeq	lr
   1502c:	bcc	15204 <__assert_fail@plt+0x42e4>
   15030:	cmp	r0, r1
   15034:	bls	151e8 <__assert_fail@plt+0x42c8>
   15038:	tst	r1, r2
   1503c:	beq	151f4 <__assert_fail@plt+0x42d4>
   15040:	clz	r3, r0
   15044:	clz	r2, r1
   15048:	sub	r3, r2, r3
   1504c:	rsbs	r3, r3, #31
   15050:	addne	r3, r3, r3, lsl #1
   15054:	mov	r2, #0
   15058:	addne	pc, pc, r3, lsl #2
   1505c:	nop			; (mov r0, r0)
   15060:	cmp	r0, r1, lsl #31
   15064:	adc	r2, r2, r2
   15068:	subcs	r0, r0, r1, lsl #31
   1506c:	cmp	r0, r1, lsl #30
   15070:	adc	r2, r2, r2
   15074:	subcs	r0, r0, r1, lsl #30
   15078:	cmp	r0, r1, lsl #29
   1507c:	adc	r2, r2, r2
   15080:	subcs	r0, r0, r1, lsl #29
   15084:	cmp	r0, r1, lsl #28
   15088:	adc	r2, r2, r2
   1508c:	subcs	r0, r0, r1, lsl #28
   15090:	cmp	r0, r1, lsl #27
   15094:	adc	r2, r2, r2
   15098:	subcs	r0, r0, r1, lsl #27
   1509c:	cmp	r0, r1, lsl #26
   150a0:	adc	r2, r2, r2
   150a4:	subcs	r0, r0, r1, lsl #26
   150a8:	cmp	r0, r1, lsl #25
   150ac:	adc	r2, r2, r2
   150b0:	subcs	r0, r0, r1, lsl #25
   150b4:	cmp	r0, r1, lsl #24
   150b8:	adc	r2, r2, r2
   150bc:	subcs	r0, r0, r1, lsl #24
   150c0:	cmp	r0, r1, lsl #23
   150c4:	adc	r2, r2, r2
   150c8:	subcs	r0, r0, r1, lsl #23
   150cc:	cmp	r0, r1, lsl #22
   150d0:	adc	r2, r2, r2
   150d4:	subcs	r0, r0, r1, lsl #22
   150d8:	cmp	r0, r1, lsl #21
   150dc:	adc	r2, r2, r2
   150e0:	subcs	r0, r0, r1, lsl #21
   150e4:	cmp	r0, r1, lsl #20
   150e8:	adc	r2, r2, r2
   150ec:	subcs	r0, r0, r1, lsl #20
   150f0:	cmp	r0, r1, lsl #19
   150f4:	adc	r2, r2, r2
   150f8:	subcs	r0, r0, r1, lsl #19
   150fc:	cmp	r0, r1, lsl #18
   15100:	adc	r2, r2, r2
   15104:	subcs	r0, r0, r1, lsl #18
   15108:	cmp	r0, r1, lsl #17
   1510c:	adc	r2, r2, r2
   15110:	subcs	r0, r0, r1, lsl #17
   15114:	cmp	r0, r1, lsl #16
   15118:	adc	r2, r2, r2
   1511c:	subcs	r0, r0, r1, lsl #16
   15120:	cmp	r0, r1, lsl #15
   15124:	adc	r2, r2, r2
   15128:	subcs	r0, r0, r1, lsl #15
   1512c:	cmp	r0, r1, lsl #14
   15130:	adc	r2, r2, r2
   15134:	subcs	r0, r0, r1, lsl #14
   15138:	cmp	r0, r1, lsl #13
   1513c:	adc	r2, r2, r2
   15140:	subcs	r0, r0, r1, lsl #13
   15144:	cmp	r0, r1, lsl #12
   15148:	adc	r2, r2, r2
   1514c:	subcs	r0, r0, r1, lsl #12
   15150:	cmp	r0, r1, lsl #11
   15154:	adc	r2, r2, r2
   15158:	subcs	r0, r0, r1, lsl #11
   1515c:	cmp	r0, r1, lsl #10
   15160:	adc	r2, r2, r2
   15164:	subcs	r0, r0, r1, lsl #10
   15168:	cmp	r0, r1, lsl #9
   1516c:	adc	r2, r2, r2
   15170:	subcs	r0, r0, r1, lsl #9
   15174:	cmp	r0, r1, lsl #8
   15178:	adc	r2, r2, r2
   1517c:	subcs	r0, r0, r1, lsl #8
   15180:	cmp	r0, r1, lsl #7
   15184:	adc	r2, r2, r2
   15188:	subcs	r0, r0, r1, lsl #7
   1518c:	cmp	r0, r1, lsl #6
   15190:	adc	r2, r2, r2
   15194:	subcs	r0, r0, r1, lsl #6
   15198:	cmp	r0, r1, lsl #5
   1519c:	adc	r2, r2, r2
   151a0:	subcs	r0, r0, r1, lsl #5
   151a4:	cmp	r0, r1, lsl #4
   151a8:	adc	r2, r2, r2
   151ac:	subcs	r0, r0, r1, lsl #4
   151b0:	cmp	r0, r1, lsl #3
   151b4:	adc	r2, r2, r2
   151b8:	subcs	r0, r0, r1, lsl #3
   151bc:	cmp	r0, r1, lsl #2
   151c0:	adc	r2, r2, r2
   151c4:	subcs	r0, r0, r1, lsl #2
   151c8:	cmp	r0, r1, lsl #1
   151cc:	adc	r2, r2, r2
   151d0:	subcs	r0, r0, r1, lsl #1
   151d4:	cmp	r0, r1
   151d8:	adc	r2, r2, r2
   151dc:	subcs	r0, r0, r1
   151e0:	mov	r0, r2
   151e4:	bx	lr
   151e8:	moveq	r0, #1
   151ec:	movne	r0, #0
   151f0:	bx	lr
   151f4:	clz	r2, r1
   151f8:	rsb	r2, r2, #31
   151fc:	lsr	r0, r0, r2
   15200:	bx	lr
   15204:	cmp	r0, #0
   15208:	mvnne	r0, #0
   1520c:	b	1526c <__assert_fail@plt+0x434c>
   15210:	cmp	r1, #0
   15214:	beq	15204 <__assert_fail@plt+0x42e4>
   15218:	push	{r0, r1, lr}
   1521c:	bl	15024 <__assert_fail@plt+0x4104>
   15220:	pop	{r1, r2, lr}
   15224:	mul	r3, r2, r0
   15228:	sub	r1, r1, r3
   1522c:	bx	lr
   15230:	cmp	r3, #0
   15234:	cmpeq	r2, #0
   15238:	bne	15250 <__assert_fail@plt+0x4330>
   1523c:	cmp	r1, #0
   15240:	cmpeq	r0, #0
   15244:	mvnne	r1, #0
   15248:	mvnne	r0, #0
   1524c:	b	1526c <__assert_fail@plt+0x434c>
   15250:	sub	sp, sp, #8
   15254:	push	{sp, lr}
   15258:	bl	1527c <__assert_fail@plt+0x435c>
   1525c:	ldr	lr, [sp, #4]
   15260:	add	sp, sp, #8
   15264:	pop	{r2, r3}
   15268:	bx	lr
   1526c:	push	{r1, lr}
   15270:	mov	r0, #8
   15274:	bl	10ce0 <raise@plt>
   15278:	pop	{r1, pc}
   1527c:	cmp	r1, r3
   15280:	cmpeq	r0, r2
   15284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15288:	mov	r4, r0
   1528c:	movcc	r0, #0
   15290:	mov	r5, r1
   15294:	ldr	lr, [sp, #36]	; 0x24
   15298:	movcc	r1, r0
   1529c:	bcc	15398 <__assert_fail@plt+0x4478>
   152a0:	cmp	r3, #0
   152a4:	clzeq	ip, r2
   152a8:	clzne	ip, r3
   152ac:	addeq	ip, ip, #32
   152b0:	cmp	r5, #0
   152b4:	clzeq	r1, r4
   152b8:	addeq	r1, r1, #32
   152bc:	clzne	r1, r5
   152c0:	sub	ip, ip, r1
   152c4:	sub	sl, ip, #32
   152c8:	lsl	r9, r3, ip
   152cc:	rsb	fp, ip, #32
   152d0:	orr	r9, r9, r2, lsl sl
   152d4:	orr	r9, r9, r2, lsr fp
   152d8:	lsl	r8, r2, ip
   152dc:	cmp	r5, r9
   152e0:	cmpeq	r4, r8
   152e4:	movcc	r0, #0
   152e8:	movcc	r1, r0
   152ec:	bcc	15308 <__assert_fail@plt+0x43e8>
   152f0:	mov	r0, #1
   152f4:	subs	r4, r4, r8
   152f8:	lsl	r1, r0, sl
   152fc:	orr	r1, r1, r0, lsr fp
   15300:	lsl	r0, r0, ip
   15304:	sbc	r5, r5, r9
   15308:	cmp	ip, #0
   1530c:	beq	15398 <__assert_fail@plt+0x4478>
   15310:	lsr	r6, r8, #1
   15314:	orr	r6, r6, r9, lsl #31
   15318:	lsr	r7, r9, #1
   1531c:	mov	r2, ip
   15320:	b	15344 <__assert_fail@plt+0x4424>
   15324:	subs	r3, r4, r6
   15328:	sbc	r8, r5, r7
   1532c:	adds	r3, r3, r3
   15330:	adc	r8, r8, r8
   15334:	adds	r4, r3, #1
   15338:	adc	r5, r8, #0
   1533c:	subs	r2, r2, #1
   15340:	beq	15360 <__assert_fail@plt+0x4440>
   15344:	cmp	r5, r7
   15348:	cmpeq	r4, r6
   1534c:	bcs	15324 <__assert_fail@plt+0x4404>
   15350:	adds	r4, r4, r4
   15354:	adc	r5, r5, r5
   15358:	subs	r2, r2, #1
   1535c:	bne	15344 <__assert_fail@plt+0x4424>
   15360:	lsr	r3, r4, ip
   15364:	orr	r3, r3, r5, lsl fp
   15368:	lsr	r2, r5, ip
   1536c:	orr	r3, r3, r5, lsr sl
   15370:	adds	r0, r0, r4
   15374:	mov	r4, r3
   15378:	lsl	r3, r2, ip
   1537c:	orr	r3, r3, r4, lsl sl
   15380:	lsl	ip, r4, ip
   15384:	orr	r3, r3, r4, lsr fp
   15388:	adc	r1, r1, r5
   1538c:	subs	r0, r0, ip
   15390:	mov	r5, r2
   15394:	sbc	r1, r1, r3
   15398:	cmp	lr, #0
   1539c:	strdne	r4, [lr]
   153a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153a8:	mov	r7, r0
   153ac:	ldr	r6, [pc, #72]	; 153fc <__assert_fail@plt+0x44dc>
   153b0:	ldr	r5, [pc, #72]	; 15400 <__assert_fail@plt+0x44e0>
   153b4:	add	r6, pc, r6
   153b8:	add	r5, pc, r5
   153bc:	sub	r6, r6, r5
   153c0:	mov	r8, r1
   153c4:	mov	r9, r2
   153c8:	bl	10ca8 <calloc@plt-0x20>
   153cc:	asrs	r6, r6, #2
   153d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   153d4:	mov	r4, #0
   153d8:	add	r4, r4, #1
   153dc:	ldr	r3, [r5], #4
   153e0:	mov	r2, r9
   153e4:	mov	r1, r8
   153e8:	mov	r0, r7
   153ec:	blx	r3
   153f0:	cmp	r6, r4
   153f4:	bne	153d8 <__assert_fail@plt+0x44b8>
   153f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153fc:	andeq	r1, r1, r8, asr #22
   15400:	andeq	r1, r1, r0, asr #22
   15404:	bx	lr
   15408:	ldr	r3, [pc, #12]	; 1541c <__assert_fail@plt+0x44fc>
   1540c:	mov	r1, #0
   15410:	add	r3, pc, r3
   15414:	ldr	r2, [r3]
   15418:	b	10e48 <__cxa_atexit@plt>
   1541c:	andeq	r1, r1, r8, asr #25

Disassembly of section .fini:

00015420 <.fini>:
   15420:	push	{r3, lr}
   15424:	pop	{r3, pc}
