
raspbian-preinstalled/base64:     file format elf32-littlearm


Disassembly of section .init:

00010d04 <.init>:
   10d04:	push	{r3, lr}
   10d08:	bl	112ec <__assert_fail@plt+0x358>
   10d0c:	pop	{r3, pc}

Disassembly of section .plt:

00010d10 <calloc@plt-0x14>:
   10d10:	push	{lr}		; (str lr, [sp, #-4]!)
   10d14:	ldr	lr, [pc, #4]	; 10d20 <calloc@plt-0x4>
   10d18:	add	lr, pc, lr
   10d1c:	ldr	pc, [lr, #8]!
   10d20:	andeq	r6, r1, r0, ror #5

00010d24 <calloc@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d30 <fputs_unlocked@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #728]!	; 0x2d8

00010d3c <raise@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #720]!	; 0x2d0

00010d48 <strcmp@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #712]!	; 0x2c8

00010d54 <posix_fadvise64@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d60 <fflush@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #696]!	; 0x2b8

00010d6c <memmove@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #688]!	; 0x2b0

00010d78 <free@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #680]!	; 0x2a8

00010d84 <_exit@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #672]!	; 0x2a0

00010d90 <memcpy@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #664]!	; 0x298

00010d9c <__strtoull_internal@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #656]!	; 0x290

00010da8 <mbsinit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #648]!	; 0x288

00010db4 <fwrite_unlocked@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #640]!	; 0x280

00010dc0 <memcmp@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #632]!	; 0x278

00010dcc <dcgettext@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #624]!	; 0x270

00010dd8 <__stack_chk_fail@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #616]!	; 0x268

00010de4 <realloc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #608]!	; 0x260

00010df0 <textdomain@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #600]!	; 0x258

00010dfc <iswprint@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #592]!	; 0x250

00010e08 <fwrite@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #584]!	; 0x248

00010e14 <lseek64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #576]!	; 0x240

00010e20 <__ctype_get_mb_cur_max@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #568]!	; 0x238

00010e2c <__fpending@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #560]!	; 0x230

00010e38 <mbrtowc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #552]!	; 0x228

00010e44 <error@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #544]!	; 0x220

00010e50 <malloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #536]!	; 0x218

00010e5c <__libc_start_main@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #528]!	; 0x210

00010e68 <__freading@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #520]!	; 0x208

00010e74 <__gmon_start__@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #512]!	; 0x200

00010e80 <getopt_long@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #504]!	; 0x1f8

00010e8c <__ctype_b_loc@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #496]!	; 0x1f0

00010e98 <exit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ea4 <strlen@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #480]!	; 0x1e0

00010eb0 <strchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #472]!	; 0x1d8

00010ebc <__errno_location@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ec8 <__cxa_atexit@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ed4 <memset@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #448]!	; 0x1c0

00010ee0 <__printf_chk@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #440]!	; 0x1b8

00010eec <fileno@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #432]!	; 0x1b0

00010ef8 <__fprintf_chk@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #424]!	; 0x1a8

00010f04 <memchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f10 <fclose@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #408]!	; 0x198

00010f1c <fseeko64@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #400]!	; 0x190

00010f28 <__overflow@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #392]!	; 0x188

00010f34 <setlocale@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #384]!	; 0x180

00010f40 <strrchr@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #376]!	; 0x178

00010f4c <nl_langinfo@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #368]!	; 0x170

00010f58 <fopen64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #360]!	; 0x168

00010f64 <bindtextdomain@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #352]!	; 0x160

00010f70 <fread_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #344]!	; 0x158

00010f7c <strncmp@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #336]!	; 0x150

00010f88 <abort@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #328]!	; 0x148

00010f94 <__assert_fail@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #320]!	; 0x140

Disassembly of section .text:

00010fa0 <.text>:
   10fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fa4:	mov	r6, r0
   10fa8:	sub	sp, sp, #36	; 0x24
   10fac:	ldr	r0, [r1]
   10fb0:	mov	r5, r1
   10fb4:	bl	12398 <__assert_fail@plt+0x1404>
   10fb8:	ldr	r1, [pc, #672]	; 11260 <__assert_fail@plt+0x2cc>
   10fbc:	mov	r0, #6
   10fc0:	bl	10f34 <setlocale@plt>
   10fc4:	ldr	r1, [pc, #664]	; 11264 <__assert_fail@plt+0x2d0>
   10fc8:	ldr	r0, [pc, #664]	; 11268 <__assert_fail@plt+0x2d4>
   10fcc:	bl	10f64 <bindtextdomain@plt>
   10fd0:	ldr	r0, [pc, #656]	; 11268 <__assert_fail@plt+0x2d4>
   10fd4:	bl	10df0 <textdomain@plt>
   10fd8:	mov	r9, #0
   10fdc:	ldr	r0, [pc, #648]	; 1126c <__assert_fail@plt+0x2d8>
   10fe0:	ldr	r8, [pc, #648]	; 11270 <__assert_fail@plt+0x2dc>
   10fe4:	ldr	r7, [pc, #648]	; 11274 <__assert_fail@plt+0x2e0>
   10fe8:	ldr	fp, [pc, #624]	; 11260 <__assert_fail@plt+0x2cc>
   10fec:	bl	15ee8 <__assert_fail@plt+0x4f54>
   10ff0:	mov	sl, r9
   10ff4:	mov	r2, #76	; 0x4c
   10ff8:	mov	r3, #0
   10ffc:	strd	r2, [sp, #24]
   11000:	mov	r4, #0
   11004:	str	r4, [sp]
   11008:	mov	r3, r8
   1100c:	mov	r2, r7
   11010:	mov	r1, r5
   11014:	mov	r0, r6
   11018:	bl	10e80 <getopt_long@plt>
   1101c:	cmn	r0, #1
   11020:	beq	110e4 <__assert_fail@plt+0x150>
   11024:	cmp	r0, #100	; 0x64
   11028:	beq	110dc <__assert_fail@plt+0x148>
   1102c:	ble	11040 <__assert_fail@plt+0xac>
   11030:	cmp	r0, #105	; 0x69
   11034:	bne	11078 <__assert_fail@plt+0xe4>
   11038:	mov	r9, #1
   1103c:	b	11000 <__assert_fail@plt+0x6c>
   11040:	cmn	r0, #3
   11044:	bne	110cc <__assert_fail@plt+0x138>
   11048:	ldr	r1, [pc, #552]	; 11278 <__assert_fail@plt+0x2e4>
   1104c:	ldr	r3, [pc, #552]	; 1127c <__assert_fail@plt+0x2e8>
   11050:	ldr	r2, [pc, #552]	; 11280 <__assert_fail@plt+0x2ec>
   11054:	str	r4, [sp, #4]
   11058:	ldr	r0, [r1]
   1105c:	ldr	r3, [r3]
   11060:	ldr	r1, [pc, #540]	; 11284 <__assert_fail@plt+0x2f0>
   11064:	str	r2, [sp]
   11068:	ldr	r2, [pc, #536]	; 11288 <__assert_fail@plt+0x2f4>
   1106c:	bl	14a68 <__assert_fail@plt+0x3ad4>
   11070:	mov	r0, r4
   11074:	bl	10e98 <exit@plt>
   11078:	cmp	r0, #119	; 0x77
   1107c:	bne	11258 <__assert_fail@plt+0x2c4>
   11080:	ldr	r3, [pc, #516]	; 1128c <__assert_fail@plt+0x2f8>
   11084:	mov	r2, #5
   11088:	ldr	r1, [pc, #512]	; 11290 <__assert_fail@plt+0x2fc>
   1108c:	ldr	r3, [r3]
   11090:	mov	r0, r4
   11094:	str	r3, [sp, #24]
   11098:	bl	10dcc <dcgettext@plt>
   1109c:	mvn	r2, #0
   110a0:	mvn	r3, #0
   110a4:	str	r4, [sp, #16]
   110a8:	strd	r2, [sp]
   110ac:	str	fp, [sp, #8]
   110b0:	mov	r2, #0
   110b4:	mov	r3, #0
   110b8:	str	r0, [sp, #12]
   110bc:	ldr	r0, [sp, #24]
   110c0:	bl	14f44 <__assert_fail@plt+0x3fb0>
   110c4:	strd	r0, [sp, #24]
   110c8:	b	11000 <__assert_fail@plt+0x6c>
   110cc:	cmn	r0, #2
   110d0:	bne	11258 <__assert_fail@plt+0x2c4>
   110d4:	mov	r0, r4
   110d8:	bl	11888 <__assert_fail@plt+0x8f4>
   110dc:	mov	sl, #1
   110e0:	b	11000 <__assert_fail@plt+0x6c>
   110e4:	ldr	r7, [pc, #424]	; 11294 <__assert_fail@plt+0x300>
   110e8:	ldr	r3, [r7]
   110ec:	sub	r2, r6, r3
   110f0:	cmp	r2, #1
   110f4:	bgt	11224 <__assert_fail@plt+0x290>
   110f8:	cmp	r3, r6
   110fc:	bge	11158 <__assert_fail@plt+0x1c4>
   11100:	ldr	r5, [r5, r3, lsl #2]
   11104:	ldr	r1, [pc, #396]	; 11298 <__assert_fail@plt+0x304>
   11108:	mov	r0, r5
   1110c:	bl	10d48 <strcmp@plt>
   11110:	cmp	r0, #0
   11114:	beq	1115c <__assert_fail@plt+0x1c8>
   11118:	ldr	r1, [pc, #380]	; 1129c <__assert_fail@plt+0x308>
   1111c:	mov	r0, r5
   11120:	bl	10f58 <fopen64@plt>
   11124:	subs	r4, r0, #0
   11128:	bne	11164 <__assert_fail@plt+0x1d0>
   1112c:	bl	10ebc <__errno_location@plt>
   11130:	mov	r2, r5
   11134:	mov	r1, #3
   11138:	ldr	r5, [r0]
   1113c:	mov	r0, r4
   11140:	bl	14430 <__assert_fail@plt+0x349c>
   11144:	mov	r1, r5
   11148:	ldr	r2, [pc, #336]	; 112a0 <__assert_fail@plt+0x30c>
   1114c:	mov	r3, r0
   11150:	mov	r0, #1
   11154:	bl	10e44 <error@plt>
   11158:	ldr	r5, [pc, #312]	; 11298 <__assert_fail@plt+0x304>
   1115c:	ldr	r3, [pc, #320]	; 112a4 <__assert_fail@plt+0x310>
   11160:	ldr	r4, [r3]
   11164:	mov	r1, #2
   11168:	mov	r0, r4
   1116c:	bl	12364 <__assert_fail@plt+0x13d0>
   11170:	cmp	sl, #0
   11174:	beq	111a8 <__assert_fail@plt+0x214>
   11178:	ldr	r3, [pc, #248]	; 11278 <__assert_fail@plt+0x2e4>
   1117c:	mov	r2, r9
   11180:	mov	r0, r4
   11184:	ldr	r1, [r3]
   11188:	bl	113a0 <__assert_fail@plt+0x40c>
   1118c:	mov	r0, r4
   11190:	bl	15954 <__assert_fail@plt+0x49c0>
   11194:	cmn	r0, #1
   11198:	beq	111c0 <__assert_fail@plt+0x22c>
   1119c:	mov	r0, #0
   111a0:	add	sp, sp, #36	; 0x24
   111a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111a8:	ldr	r1, [pc, #200]	; 11278 <__assert_fail@plt+0x2e4>
   111ac:	ldrd	r2, [sp, #24]
   111b0:	mov	r0, r4
   111b4:	ldr	r1, [r1]
   111b8:	bl	115d4 <__assert_fail@plt+0x640>
   111bc:	b	1118c <__assert_fail@plt+0x1f8>
   111c0:	ldr	r1, [pc, #208]	; 11298 <__assert_fail@plt+0x304>
   111c4:	mov	r0, r5
   111c8:	bl	10d48 <strcmp@plt>
   111cc:	mov	r4, r0
   111d0:	bl	10ebc <__errno_location@plt>
   111d4:	cmp	r4, #0
   111d8:	ldr	r6, [r0]
   111dc:	bne	11200 <__assert_fail@plt+0x26c>
   111e0:	mov	r2, #5
   111e4:	ldr	r1, [pc, #188]	; 112a8 <__assert_fail@plt+0x314>
   111e8:	mov	r0, r4
   111ec:	bl	10dcc <dcgettext@plt>
   111f0:	mov	r1, r6
   111f4:	mov	r2, r0
   111f8:	mov	r0, #1
   111fc:	bl	10e44 <error@plt>
   11200:	mov	r2, r5
   11204:	mov	r1, #3
   11208:	mov	r0, #0
   1120c:	bl	14430 <__assert_fail@plt+0x349c>
   11210:	mov	r1, r6
   11214:	ldr	r2, [pc, #132]	; 112a0 <__assert_fail@plt+0x30c>
   11218:	mov	r3, r0
   1121c:	mov	r0, #1
   11220:	bl	10e44 <error@plt>
   11224:	mov	r2, #5
   11228:	ldr	r1, [pc, #124]	; 112ac <__assert_fail@plt+0x318>
   1122c:	mov	r0, r4
   11230:	bl	10dcc <dcgettext@plt>
   11234:	ldr	r3, [r7]
   11238:	mov	r6, r0
   1123c:	ldr	r0, [r5, r3, lsl #2]
   11240:	bl	145fc <__assert_fail@plt+0x3668>
   11244:	mov	r2, r6
   11248:	mov	r1, r4
   1124c:	mov	r3, r0
   11250:	mov	r0, r4
   11254:	bl	10e44 <error@plt>
   11258:	mov	r0, #1
   1125c:	bl	11888 <__assert_fail@plt+0x8f4>
   11260:	muleq	r1, r8, sl
   11264:	andeq	r6, r1, r0, asr #8
   11268:	muleq	r1, r0, r3
   1126c:	andeq	r2, r1, r8, lsl #5
   11270:	andeq	r5, r1, r4, asr #30
   11274:	andeq	r6, r1, r8, ror r4
   11278:	andeq	r7, r2, r4, asr r1
   1127c:	andeq	r7, r2, ip, ror #1
   11280:	andeq	r6, r1, r8, ror #8
   11284:	andeq	r5, r1, ip, asr #31
   11288:	andeq	r6, r1, ip, lsl #7
   1128c:	andeq	r7, r2, r8, asr r1
   11290:	andeq	r6, r1, r4, asr r4
   11294:	andeq	r7, r2, r0, asr #2
   11298:	andeq	r6, r1, ip, lsr r4
   1129c:	muleq	r1, r4, r4
   112a0:	muleq	r1, r8, r6
   112a4:	andeq	r7, r2, r0, asr r1
   112a8:	muleq	r1, r8, r4
   112ac:	andeq	r6, r1, r0, lsl #9
   112b0:	mov	fp, #0
   112b4:	mov	lr, #0
   112b8:	pop	{r1}		; (ldr r1, [sp], #4)
   112bc:	mov	r2, sp
   112c0:	push	{r2}		; (str r2, [sp, #-4]!)
   112c4:	push	{r0}		; (str r0, [sp, #-4]!)
   112c8:	ldr	ip, [pc, #16]	; 112e0 <__assert_fail@plt+0x34c>
   112cc:	push	{ip}		; (str ip, [sp, #-4]!)
   112d0:	ldr	r0, [pc, #12]	; 112e4 <__assert_fail@plt+0x350>
   112d4:	ldr	r3, [pc, #12]	; 112e8 <__assert_fail@plt+0x354>
   112d8:	bl	10e5c <__libc_start_main@plt>
   112dc:	bl	10f88 <abort@plt>
   112e0:	andeq	r5, r1, r4, ror #29
   112e4:	andeq	r0, r1, r0, lsr #31
   112e8:	andeq	r5, r1, r4, lsl #29
   112ec:	ldr	r3, [pc, #20]	; 11308 <__assert_fail@plt+0x374>
   112f0:	ldr	r2, [pc, #20]	; 1130c <__assert_fail@plt+0x378>
   112f4:	add	r3, pc, r3
   112f8:	ldr	r2, [r3, r2]
   112fc:	cmp	r2, #0
   11300:	bxeq	lr
   11304:	b	10e74 <__gmon_start__@plt>
   11308:	andeq	r5, r1, r4, lsl #26
   1130c:	andeq	r0, r0, r0, ror #1
   11310:	ldr	r0, [pc, #24]	; 11330 <__assert_fail@plt+0x39c>
   11314:	ldr	r3, [pc, #24]	; 11334 <__assert_fail@plt+0x3a0>
   11318:	cmp	r3, r0
   1131c:	bxeq	lr
   11320:	ldr	r3, [pc, #16]	; 11338 <__assert_fail@plt+0x3a4>
   11324:	cmp	r3, #0
   11328:	bxeq	lr
   1132c:	bx	r3
   11330:	andeq	r7, r2, r4, lsr r1
   11334:	andeq	r7, r2, r4, lsr r1
   11338:	andeq	r0, r0, r0
   1133c:	ldr	r0, [pc, #36]	; 11368 <__assert_fail@plt+0x3d4>
   11340:	ldr	r1, [pc, #36]	; 1136c <__assert_fail@plt+0x3d8>
   11344:	sub	r1, r1, r0
   11348:	asr	r1, r1, #2
   1134c:	add	r1, r1, r1, lsr #31
   11350:	asrs	r1, r1, #1
   11354:	bxeq	lr
   11358:	ldr	r3, [pc, #16]	; 11370 <__assert_fail@plt+0x3dc>
   1135c:	cmp	r3, #0
   11360:	bxeq	lr
   11364:	bx	r3
   11368:	andeq	r7, r2, r4, lsr r1
   1136c:	andeq	r7, r2, r4, lsr r1
   11370:	andeq	r0, r0, r0
   11374:	push	{r4, lr}
   11378:	ldr	r4, [pc, #24]	; 11398 <__assert_fail@plt+0x404>
   1137c:	ldrb	r3, [r4]
   11380:	cmp	r3, #0
   11384:	popne	{r4, pc}
   11388:	bl	11310 <__assert_fail@plt+0x37c>
   1138c:	mov	r3, #1
   11390:	strb	r3, [r4]
   11394:	pop	{r4, pc}
   11398:	andeq	r7, r2, ip, asr r1
   1139c:	b	1133c <__assert_fail@plt+0x3a8>
   113a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113a4:	sub	sp, sp, #7168	; 0x1c00
   113a8:	ldr	r3, [pc, #528]	; 115c0 <__assert_fail@plt+0x62c>
   113ac:	sub	sp, sp, #28
   113b0:	mov	fp, r2
   113b4:	add	r2, sp, #7168	; 0x1c00
   113b8:	ldr	r3, [r3]
   113bc:	add	r2, r2, #20
   113c0:	mov	r6, r0
   113c4:	add	r0, sp, #12
   113c8:	mov	r9, r1
   113cc:	str	r3, [r2]
   113d0:	bl	11f48 <__assert_fail@plt+0xfb4>
   113d4:	mov	r5, #0
   113d8:	b	11404 <__assert_fail@plt+0x470>
   113dc:	ldr	r3, [r6]
   113e0:	add	r5, r5, r7
   113e4:	ands	r4, r3, #32
   113e8:	bne	115ac <__assert_fail@plt+0x618>
   113ec:	ldr	r2, [pc, #464]	; 115c4 <__assert_fail@plt+0x630>
   113f0:	and	r3, r3, #16
   113f4:	cmp	r5, r2
   113f8:	bhi	11498 <__assert_fail@plt+0x504>
   113fc:	cmp	r3, #0
   11400:	bne	11498 <__assert_fail@plt+0x504>
   11404:	add	r0, sp, #3088	; 0xc10
   11408:	add	r0, r0, #4
   1140c:	mov	r3, r6
   11410:	rsb	r2, r5, #4096	; 0x1000
   11414:	mov	r1, #1
   11418:	add	r0, r0, r5
   1141c:	bl	10f70 <fread_unlocked@plt>
   11420:	cmp	fp, #0
   11424:	mov	r7, r0
   11428:	str	r0, [sp, #8]
   1142c:	beq	113dc <__assert_fail@plt+0x448>
   11430:	mov	r8, #0
   11434:	cmp	r7, #0
   11438:	cmpne	r8, r7
   1143c:	bcs	113dc <__assert_fail@plt+0x448>
   11440:	add	r3, sp, #3088	; 0xc10
   11444:	add	sl, r5, r8
   11448:	add	r3, r3, #8
   1144c:	add	r3, r3, sl
   11450:	ldrb	r4, [r3, #-4]
   11454:	mov	r0, r4
   11458:	bl	11f30 <__assert_fail@plt+0xf9c>
   1145c:	cmp	r4, #61	; 0x3d
   11460:	orreq	r0, r0, #1
   11464:	tst	r0, #255	; 0xff
   11468:	addne	r8, r8, #1
   1146c:	bne	11434 <__assert_fail@plt+0x4a0>
   11470:	add	r3, sp, #3088	; 0xc10
   11474:	sub	r7, r7, #1
   11478:	add	r3, r3, #4
   1147c:	add	r1, sl, #1
   11480:	sub	r2, r7, r8
   11484:	add	r1, r3, r1
   11488:	add	r0, r3, sl
   1148c:	str	r7, [sp, #8]
   11490:	bl	10d6c <memmove@plt>
   11494:	b	11434 <__assert_fail@plt+0x4a0>
   11498:	mov	r8, #3072	; 0xc00
   1149c:	b	11504 <__assert_fail@plt+0x570>
   114a0:	cmp	r4, #0
   114a4:	bne	113d4 <__assert_fail@plt+0x440>
   114a8:	mov	r2, r5
   114ac:	str	r8, [sp, #8]
   114b0:	add	r1, sp, #8
   114b4:	str	r1, [sp]
   114b8:	add	r1, sp, #3088	; 0xc10
   114bc:	add	r3, sp, #20
   114c0:	add	r1, r1, #4
   114c4:	add	r0, sp, #12
   114c8:	bl	11f54 <__assert_fail@plt+0xfc0>
   114cc:	mov	r3, r9
   114d0:	ldr	r2, [sp, #8]
   114d4:	mov	r1, #1
   114d8:	mov	r7, r0
   114dc:	add	r0, sp, #20
   114e0:	bl	10db4 <fwrite_unlocked@plt>
   114e4:	ldr	r3, [sp, #8]
   114e8:	cmp	r3, r0
   114ec:	bhi	11564 <__assert_fail@plt+0x5d0>
   114f0:	cmp	r7, #0
   114f4:	beq	1158c <__assert_fail@plt+0x5f8>
   114f8:	ldr	r3, [r6]
   114fc:	add	r4, r4, #1
   11500:	and	r3, r3, #16
   11504:	cmp	r3, #0
   11508:	beq	114a0 <__assert_fail@plt+0x50c>
   1150c:	cmp	r4, #1
   11510:	bhi	1153c <__assert_fail@plt+0x5a8>
   11514:	bne	11530 <__assert_fail@plt+0x59c>
   11518:	ldr	r3, [sp, #12]
   1151c:	cmp	r3, #0
   11520:	beq	1153c <__assert_fail@plt+0x5a8>
   11524:	str	r8, [sp, #8]
   11528:	mov	r2, #0
   1152c:	b	114b0 <__assert_fail@plt+0x51c>
   11530:	mov	r2, r5
   11534:	str	r8, [sp, #8]
   11538:	b	114b0 <__assert_fail@plt+0x51c>
   1153c:	add	r3, sp, #7168	; 0x1c00
   11540:	add	r3, r3, #20
   11544:	ldr	r2, [r3]
   11548:	ldr	r3, [pc, #112]	; 115c0 <__assert_fail@plt+0x62c>
   1154c:	ldr	r3, [r3]
   11550:	cmp	r2, r3
   11554:	bne	115bc <__assert_fail@plt+0x628>
   11558:	add	sp, sp, #7168	; 0x1c00
   1155c:	add	sp, sp, #28
   11560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11564:	bl	10ebc <__errno_location@plt>
   11568:	ldr	r1, [pc, #88]	; 115c8 <__assert_fail@plt+0x634>
   1156c:	mov	r2, #5
   11570:	ldr	r4, [r0]
   11574:	mov	r0, #0
   11578:	bl	10dcc <dcgettext@plt>
   1157c:	mov	r1, r4
   11580:	mov	r2, r0
   11584:	mov	r0, #1
   11588:	bl	10e44 <error@plt>
   1158c:	mov	r2, #5
   11590:	ldr	r1, [pc, #52]	; 115cc <__assert_fail@plt+0x638>
   11594:	mov	r0, r7
   11598:	bl	10dcc <dcgettext@plt>
   1159c:	mov	r1, r7
   115a0:	mov	r2, r0
   115a4:	mov	r0, #1
   115a8:	bl	10e44 <error@plt>
   115ac:	bl	10ebc <__errno_location@plt>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #20]	; 115d0 <__assert_fail@plt+0x63c>
   115b8:	b	11570 <__assert_fail@plt+0x5dc>
   115bc:	bl	10dd8 <__stack_chk_fail@plt>
   115c0:	andeq	r6, r2, r8, lsl #30
   115c4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   115c8:			; <UNDEFINED> instruction: 0x00015fb0
   115cc:			; <UNDEFINED> instruction: 0x00015fbc
   115d0:	andeq	r5, r1, r4, lsr #31
   115d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115d8:	sub	sp, sp, #71680	; 0x11800
   115dc:	sub	sp, sp, #28
   115e0:	ldr	sl, [pc, #648]	; 11870 <__assert_fail@plt+0x8dc>
   115e4:	strd	r2, [sp]
   115e8:	ldr	r3, [pc, #644]	; 11874 <__assert_fail@plt+0x8e0>
   115ec:	add	r2, sp, #71680	; 0x11800
   115f0:	add	r2, r2, #20
   115f4:	ldr	r3, [r3]
   115f8:	mov	r6, r0
   115fc:	mov	fp, r1
   11600:	mov	r9, #0
   11604:	str	r3, [r2]
   11608:	mov	r4, #0
   1160c:	b	11618 <__assert_fail@plt+0x684>
   11610:	cmp	r4, sl
   11614:	bhi	116a0 <__assert_fail@plt+0x70c>
   11618:	add	r0, sp, #20
   1161c:	mov	r3, r6
   11620:	rsb	r2, r4, #30720	; 0x7800
   11624:	add	r0, r0, r4
   11628:	mov	r1, #1
   1162c:	bl	10f70 <fread_unlocked@plt>
   11630:	ldr	r3, [r6]
   11634:	tst	r3, #48	; 0x30
   11638:	add	r4, r4, r0
   1163c:	beq	11610 <__assert_fail@plt+0x67c>
   11640:	cmp	r4, #0
   11644:	bne	116a0 <__assert_fail@plt+0x70c>
   11648:	ldrd	r0, [sp]
   1164c:	mov	r2, r0
   11650:	orrs	r2, r2, r1
   11654:	movne	r2, #1
   11658:	moveq	r2, #0
   1165c:	cmp	r9, #0
   11660:	movne	r9, r2
   11664:	moveq	r9, #0
   11668:	cmp	r9, #0
   1166c:	bne	117f8 <__assert_fail@plt+0x864>
   11670:	tst	r3, #32
   11674:	bne	11860 <__assert_fail@plt+0x8cc>
   11678:	add	r3, sp, #71680	; 0x11800
   1167c:	add	r3, r3, #20
   11680:	ldr	r2, [r3]
   11684:	ldr	r3, [pc, #488]	; 11874 <__assert_fail@plt+0x8e0>
   11688:	ldr	r3, [r3]
   1168c:	cmp	r2, r3
   11690:	bne	1185c <__assert_fail@plt+0x8c8>
   11694:	add	sp, sp, #71680	; 0x11800
   11698:	add	sp, sp, #28
   1169c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116a0:	ldr	r3, [pc, #464]	; 11878 <__assert_fail@plt+0x8e4>
   116a4:	add	r8, r4, #2
   116a8:	add	r2, sp, #30720	; 0x7800
   116ac:	umull	r3, r8, r3, r8
   116b0:	add	r2, r2, #20
   116b4:	lsr	r8, r8, #1
   116b8:	mov	r1, r4
   116bc:	lsl	r8, r8, #2
   116c0:	mov	r3, r8
   116c4:	add	r0, sp, #20
   116c8:	bl	11cec <__assert_fail@plt+0xd58>
   116cc:	ldrd	r2, [sp]
   116d0:	orrs	r3, r2, r3
   116d4:	bne	11714 <__assert_fail@plt+0x780>
   116d8:	ldr	r3, [pc, #412]	; 1187c <__assert_fail@plt+0x8e8>
   116dc:	add	r0, sp, #30720	; 0x7800
   116e0:	add	r0, r0, #20
   116e4:	ldr	r3, [r3]
   116e8:	mov	r2, r8
   116ec:	mov	r1, #1
   116f0:	bl	10db4 <fwrite_unlocked@plt>
   116f4:	cmp	r8, r0
   116f8:	bhi	11834 <__assert_fail@plt+0x8a0>
   116fc:	ldr	r3, [r6]
   11700:	and	r2, r3, #48	; 0x30
   11704:	cmp	r4, #30720	; 0x7800
   11708:	cmpeq	r2, #0
   1170c:	beq	11608 <__assert_fail@plt+0x674>
   11710:	b	11648 <__assert_fail@plt+0x6b4>
   11714:	cmp	r8, #0
   11718:	beq	116fc <__assert_fail@plt+0x768>
   1171c:	str	r4, [sp, #8]
   11720:	str	r6, [sp, #12]
   11724:	mov	r4, r9
   11728:	mov	r6, r8
   1172c:	mov	r7, #0
   11730:	ldrd	r8, [sp]
   11734:	b	11764 <__assert_fail@plt+0x7d0>
   11738:	ldr	r3, [fp, #20]
   1173c:	ldr	r2, [fp, #24]
   11740:	cmp	r3, r2
   11744:	bcs	117dc <__assert_fail@plt+0x848>
   11748:	mov	r4, r5
   1174c:	add	r1, r3, #1
   11750:	mov	r2, #10
   11754:	str	r1, [fp, #20]
   11758:	strb	r2, [r3]
   1175c:	cmp	r6, r7
   11760:	bls	117cc <__assert_fail@plt+0x838>
   11764:	subs	r2, r8, r4
   11768:	sbc	r3, r9, #0
   1176c:	mov	r1, #0
   11770:	cmp	r3, r1
   11774:	mvn	r0, #0
   11778:	cmpeq	r2, r0
   1177c:	sub	r5, r6, r7
   11780:	movhi	r2, r0
   11784:	cmp	r5, r2
   11788:	movcs	r5, r2
   1178c:	cmp	r5, #0
   11790:	beq	11738 <__assert_fail@plt+0x7a4>
   11794:	ldr	r3, [pc, #224]	; 1187c <__assert_fail@plt+0x8e8>
   11798:	add	r0, sp, #30720	; 0x7800
   1179c:	add	r0, r0, #20
   117a0:	ldr	r3, [r3]
   117a4:	mov	r2, r5
   117a8:	mov	r1, #1
   117ac:	add	r0, r0, r7
   117b0:	bl	10db4 <fwrite_unlocked@plt>
   117b4:	cmp	r5, r0
   117b8:	bhi	11834 <__assert_fail@plt+0x8a0>
   117bc:	add	r7, r7, r5
   117c0:	cmp	r6, r7
   117c4:	add	r4, r4, r5
   117c8:	bhi	11764 <__assert_fail@plt+0x7d0>
   117cc:	mov	r9, r4
   117d0:	ldr	r6, [sp, #12]
   117d4:	ldr	r4, [sp, #8]
   117d8:	b	116fc <__assert_fail@plt+0x768>
   117dc:	mov	r1, #10
   117e0:	mov	r0, fp
   117e4:	bl	10f28 <__overflow@plt>
   117e8:	cmn	r0, #1
   117ec:	beq	11834 <__assert_fail@plt+0x8a0>
   117f0:	mov	r4, r5
   117f4:	b	1175c <__assert_fail@plt+0x7c8>
   117f8:	ldr	r3, [fp, #20]
   117fc:	ldr	r2, [fp, #24]
   11800:	cmp	r3, r2
   11804:	addcc	r1, r3, #1
   11808:	movcc	r2, #10
   1180c:	strcc	r1, [fp, #20]
   11810:	strbcc	r2, [r3]
   11814:	bcs	11820 <__assert_fail@plt+0x88c>
   11818:	ldr	r3, [r6]
   1181c:	b	11670 <__assert_fail@plt+0x6dc>
   11820:	mov	r0, fp
   11824:	mov	r1, #10
   11828:	bl	10f28 <__overflow@plt>
   1182c:	cmn	r0, #1
   11830:	bne	11818 <__assert_fail@plt+0x884>
   11834:	bl	10ebc <__errno_location@plt>
   11838:	ldr	r1, [pc, #64]	; 11880 <__assert_fail@plt+0x8ec>
   1183c:	mov	r2, #5
   11840:	ldr	r4, [r0]
   11844:	mov	r0, #0
   11848:	bl	10dcc <dcgettext@plt>
   1184c:	mov	r1, r4
   11850:	mov	r2, r0
   11854:	mov	r0, #1
   11858:	bl	10e44 <error@plt>
   1185c:	bl	10dd8 <__stack_chk_fail@plt>
   11860:	bl	10ebc <__errno_location@plt>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #20]	; 11884 <__assert_fail@plt+0x8f0>
   1186c:	b	11840 <__assert_fail@plt+0x8ac>
   11870:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   11874:	andeq	r6, r2, r8, lsl #30
   11878:	bge	feabc32c <optarg@@GLIBC_2.4+0xfea951d4>
   1187c:	andeq	r7, r2, r4, asr r1
   11880:			; <UNDEFINED> instruction: 0x00015fb0
   11884:	andeq	r5, r1, r4, lsr #31
   11888:	ldr	r3, [pc, #736]	; 11b70 <__assert_fail@plt+0xbdc>
   1188c:	push	{r7, lr}
   11890:	sub	sp, sp, #64	; 0x40
   11894:	ldr	r3, [r3]
   11898:	subs	r4, r0, #0
   1189c:	str	r3, [sp, #60]	; 0x3c
   118a0:	beq	118dc <__assert_fail@plt+0x948>
   118a4:	ldr	r3, [pc, #712]	; 11b74 <__assert_fail@plt+0xbe0>
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #708]	; 11b78 <__assert_fail@plt+0xbe4>
   118b0:	mov	r0, #0
   118b4:	ldr	r5, [r3]
   118b8:	bl	10dcc <dcgettext@plt>
   118bc:	ldr	r3, [pc, #696]	; 11b7c <__assert_fail@plt+0xbe8>
   118c0:	mov	r1, #1
   118c4:	ldr	r3, [r3]
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	bl	10ef8 <__fprintf_chk@plt>
   118d4:	mov	r0, r4
   118d8:	bl	10e98 <exit@plt>
   118dc:	mov	r2, #5
   118e0:	ldr	r1, [pc, #664]	; 11b80 <__assert_fail@plt+0xbec>
   118e4:	bl	10dcc <dcgettext@plt>
   118e8:	ldr	r2, [pc, #652]	; 11b7c <__assert_fail@plt+0xbe8>
   118ec:	ldr	r5, [pc, #656]	; 11b84 <__assert_fail@plt+0xbf0>
   118f0:	mov	r3, #64	; 0x40
   118f4:	ldr	r2, [r2]
   118f8:	mov	r1, r0
   118fc:	mov	r0, #1
   11900:	bl	10ee0 <__printf_chk@plt>
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #632]	; 11b88 <__assert_fail@plt+0xbf4>
   1190c:	mov	r0, r4
   11910:	bl	10dcc <dcgettext@plt>
   11914:	ldr	r1, [r5]
   11918:	bl	10d30 <fputs_unlocked@plt>
   1191c:	mov	r2, #5
   11920:	ldr	r1, [pc, #612]	; 11b8c <__assert_fail@plt+0xbf8>
   11924:	mov	r0, r4
   11928:	bl	10dcc <dcgettext@plt>
   1192c:	ldr	r1, [r5]
   11930:	bl	10d30 <fputs_unlocked@plt>
   11934:	mov	r2, #5
   11938:	ldr	r1, [pc, #592]	; 11b90 <__assert_fail@plt+0xbfc>
   1193c:	mov	r0, r4
   11940:	bl	10dcc <dcgettext@plt>
   11944:	ldr	r1, [r5]
   11948:	bl	10d30 <fputs_unlocked@plt>
   1194c:	mov	r2, #5
   11950:	ldr	r1, [pc, #572]	; 11b94 <__assert_fail@plt+0xc00>
   11954:	mov	r0, r4
   11958:	bl	10dcc <dcgettext@plt>
   1195c:	ldr	r1, [r5]
   11960:	bl	10d30 <fputs_unlocked@plt>
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #552]	; 11b98 <__assert_fail@plt+0xc04>
   1196c:	mov	r0, r4
   11970:	bl	10dcc <dcgettext@plt>
   11974:	ldr	r1, [r5]
   11978:	bl	10d30 <fputs_unlocked@plt>
   1197c:	mov	r2, #5
   11980:	ldr	r1, [pc, #532]	; 11b9c <__assert_fail@plt+0xc08>
   11984:	mov	r0, r4
   11988:	bl	10dcc <dcgettext@plt>
   1198c:	ldr	r3, [pc, #524]	; 11ba0 <__assert_fail@plt+0xc0c>
   11990:	mov	r2, r3
   11994:	mov	r1, r0
   11998:	mov	r0, #1
   1199c:	bl	10ee0 <__printf_chk@plt>
   119a0:	ldr	lr, [pc, #508]	; 11ba4 <__assert_fail@plt+0xc10>
   119a4:	add	ip, sp, #4
   119a8:	ldm	lr!, {r0, r1, r2, r3}
   119ac:	stmia	ip!, {r0, r1, r2, r3}
   119b0:	ldm	lr!, {r0, r1, r2, r3}
   119b4:	ldr	r6, [sp, #4]
   119b8:	stmia	ip!, {r0, r1, r2, r3}
   119bc:	cmp	r6, #0
   119c0:	ldm	lr!, {r0, r1, r2, r3}
   119c4:	addeq	r5, sp, #4
   119c8:	stmia	ip!, {r0, r1, r2, r3}
   119cc:	ldm	lr, {r0, r1}
   119d0:	stm	ip, {r0, r1}
   119d4:	beq	11a04 <__assert_fail@plt+0xa70>
   119d8:	ldr	r7, [pc, #448]	; 11ba0 <__assert_fail@plt+0xc0c>
   119dc:	add	r5, sp, #4
   119e0:	b	119f0 <__assert_fail@plt+0xa5c>
   119e4:	ldr	r6, [r5, #8]!
   119e8:	cmp	r6, #0
   119ec:	beq	11a04 <__assert_fail@plt+0xa70>
   119f0:	mov	r1, r6
   119f4:	mov	r0, r7
   119f8:	bl	10d48 <strcmp@plt>
   119fc:	cmp	r0, #0
   11a00:	bne	119e4 <__assert_fail@plt+0xa50>
   11a04:	ldr	r5, [r5, #4]
   11a08:	mov	r2, #5
   11a0c:	cmp	r5, #0
   11a10:	ldr	r1, [pc, #400]	; 11ba8 <__assert_fail@plt+0xc14>
   11a14:	beq	11abc <__assert_fail@plt+0xb28>
   11a18:	mov	r0, #0
   11a1c:	bl	10dcc <dcgettext@plt>
   11a20:	ldr	r3, [pc, #388]	; 11bac <__assert_fail@plt+0xc18>
   11a24:	ldr	r2, [pc, #388]	; 11bb0 <__assert_fail@plt+0xc1c>
   11a28:	mov	r1, r0
   11a2c:	mov	r0, #1
   11a30:	bl	10ee0 <__printf_chk@plt>
   11a34:	mov	r1, #0
   11a38:	mov	r0, #5
   11a3c:	bl	10f34 <setlocale@plt>
   11a40:	cmp	r0, #0
   11a44:	ldreq	r6, [pc, #340]	; 11ba0 <__assert_fail@plt+0xc0c>
   11a48:	beq	11a64 <__assert_fail@plt+0xad0>
   11a4c:	mov	r2, #3
   11a50:	ldr	r1, [pc, #348]	; 11bb4 <__assert_fail@plt+0xc20>
   11a54:	bl	10f7c <strncmp@plt>
   11a58:	ldr	r6, [pc, #320]	; 11ba0 <__assert_fail@plt+0xc0c>
   11a5c:	cmp	r0, #0
   11a60:	bne	11b4c <__assert_fail@plt+0xbb8>
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #328]	; 11bb8 <__assert_fail@plt+0xc24>
   11a6c:	mov	r0, #0
   11a70:	bl	10dcc <dcgettext@plt>
   11a74:	ldr	r3, [pc, #292]	; 11ba0 <__assert_fail@plt+0xc0c>
   11a78:	ldr	r2, [pc, #300]	; 11bac <__assert_fail@plt+0xc18>
   11a7c:	mov	r1, r0
   11a80:	mov	r0, #1
   11a84:	bl	10ee0 <__printf_chk@plt>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #296]	; 11bbc <__assert_fail@plt+0xc28>
   11a90:	mov	r0, #0
   11a94:	bl	10dcc <dcgettext@plt>
   11a98:	ldr	r2, [pc, #288]	; 11bc0 <__assert_fail@plt+0xc2c>
   11a9c:	cmp	r5, r6
   11aa0:	ldr	r3, [pc, #284]	; 11bc4 <__assert_fail@plt+0xc30>
   11aa4:	movne	r3, r2
   11aa8:	mov	r1, r0
   11aac:	mov	r2, r5
   11ab0:	mov	r0, #1
   11ab4:	bl	10ee0 <__printf_chk@plt>
   11ab8:	b	118d4 <__assert_fail@plt+0x940>
   11abc:	mov	r0, r5
   11ac0:	bl	10dcc <dcgettext@plt>
   11ac4:	ldr	r3, [pc, #224]	; 11bac <__assert_fail@plt+0xc18>
   11ac8:	ldr	r2, [pc, #224]	; 11bb0 <__assert_fail@plt+0xc1c>
   11acc:	mov	r1, r0
   11ad0:	mov	r0, #1
   11ad4:	bl	10ee0 <__printf_chk@plt>
   11ad8:	mov	r1, r5
   11adc:	mov	r0, #5
   11ae0:	bl	10f34 <setlocale@plt>
   11ae4:	cmp	r0, #0
   11ae8:	beq	11b00 <__assert_fail@plt+0xb6c>
   11aec:	mov	r2, #3
   11af0:	ldr	r1, [pc, #188]	; 11bb4 <__assert_fail@plt+0xc20>
   11af4:	bl	10f7c <strncmp@plt>
   11af8:	cmp	r0, #0
   11afc:	bne	11b44 <__assert_fail@plt+0xbb0>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #172]	; 11bb8 <__assert_fail@plt+0xc24>
   11b08:	mov	r0, #0
   11b0c:	bl	10dcc <dcgettext@plt>
   11b10:	ldr	r3, [pc, #136]	; 11ba0 <__assert_fail@plt+0xc0c>
   11b14:	ldr	r2, [pc, #144]	; 11bac <__assert_fail@plt+0xc18>
   11b18:	mov	r5, r3
   11b1c:	mov	r1, r0
   11b20:	mov	r0, #1
   11b24:	bl	10ee0 <__printf_chk@plt>
   11b28:	ldr	r1, [pc, #140]	; 11bbc <__assert_fail@plt+0xc28>
   11b2c:	mov	r2, #5
   11b30:	mov	r0, #0
   11b34:	bl	10dcc <dcgettext@plt>
   11b38:	ldr	r3, [pc, #132]	; 11bc4 <__assert_fail@plt+0xc30>
   11b3c:	mov	r1, r0
   11b40:	b	11aac <__assert_fail@plt+0xb18>
   11b44:	ldr	r6, [pc, #84]	; 11ba0 <__assert_fail@plt+0xc0c>
   11b48:	mov	r5, r6
   11b4c:	mov	r2, #5
   11b50:	ldr	r1, [pc, #112]	; 11bc8 <__assert_fail@plt+0xc34>
   11b54:	mov	r0, #0
   11b58:	bl	10dcc <dcgettext@plt>
   11b5c:	ldr	r2, [pc, #60]	; 11ba0 <__assert_fail@plt+0xc0c>
   11b60:	mov	r1, r0
   11b64:	mov	r0, #1
   11b68:	bl	10ee0 <__printf_chk@plt>
   11b6c:	b	11a64 <__assert_fail@plt+0xad0>
   11b70:	andeq	r6, r2, r8, lsl #30
   11b74:	andeq	r7, r2, r8, asr #2
   11b78:	ldrdeq	r5, [r1], -r4
   11b7c:	andeq	r7, r2, r8, ror #2
   11b80:	strdeq	r5, [r1], -ip
   11b84:	andeq	r7, r2, r4, asr r1
   11b88:	andeq	r6, r1, r0, rrx
   11b8c:	muleq	r1, r8, r0
   11b90:	andeq	r6, r1, r4, ror #1
   11b94:	ldrdeq	r6, [r1], -r8
   11b98:	andeq	r6, r1, r8, lsl #4
   11b9c:	andeq	r6, r1, r0, asr #4
   11ba0:	andeq	r5, r1, ip, asr #31
   11ba4:	andeq	r5, r1, ip, lsl #30
   11ba8:	andeq	r6, r1, ip, asr #6
   11bac:	andeq	r6, r1, r4, ror #6
   11bb0:	andeq	r6, r1, ip, lsl #7
   11bb4:	muleq	r1, ip, r3
   11bb8:	andeq	r6, r1, r8, ror #7
   11bbc:	andeq	r6, r1, r8, lsl #8
   11bc0:	muleq	r1, r8, sl
   11bc4:			; <UNDEFINED> instruction: 0x000164b8
   11bc8:	andeq	r6, r1, r0, lsr #7
   11bcc:	cmp	r1, #1
   11bd0:	bls	11cb8 <__assert_fail@plt+0xd24>
   11bd4:	push	{r4, r5, r6, lr}
   11bd8:	ldrb	ip, [r0]
   11bdc:	ldr	r4, [pc, #260]	; 11ce8 <__assert_fail@plt+0xd54>
   11be0:	ldrsb	lr, [r4, ip]
   11be4:	cmp	lr, #0
   11be8:	blt	11c90 <__assert_fail@plt+0xcfc>
   11bec:	ldrb	ip, [r0, #1]
   11bf0:	ldrsb	r6, [r4, ip]
   11bf4:	cmp	r6, #0
   11bf8:	blt	11c90 <__assert_fail@plt+0xcfc>
   11bfc:	ldr	r5, [r3]
   11c00:	ldr	ip, [r2]
   11c04:	cmp	r5, #0
   11c08:	bne	11cc0 <__assert_fail@plt+0xd2c>
   11c0c:	cmp	r1, #2
   11c10:	beq	11cac <__assert_fail@plt+0xd18>
   11c14:	ldrb	lr, [r0, #2]
   11c18:	cmp	lr, #61	; 0x3d
   11c1c:	beq	11c98 <__assert_fail@plt+0xd04>
   11c20:	ldrsb	lr, [r4, lr]
   11c24:	cmp	lr, #0
   11c28:	blt	11cac <__assert_fail@plt+0xd18>
   11c2c:	cmp	r5, #0
   11c30:	beq	11c4c <__assert_fail@plt+0xcb8>
   11c34:	asr	r5, lr, #2
   11c38:	orr	r6, r5, r6, lsl #4
   11c3c:	strb	r6, [ip], #1
   11c40:	ldr	r5, [r3]
   11c44:	sub	r5, r5, #1
   11c48:	str	r5, [r3]
   11c4c:	cmp	r1, #3
   11c50:	beq	11cac <__assert_fail@plt+0xd18>
   11c54:	ldrb	r0, [r0, #3]
   11c58:	cmp	r0, #61	; 0x3d
   11c5c:	beq	11cdc <__assert_fail@plt+0xd48>
   11c60:	ldrsb	r1, [r4, r0]
   11c64:	cmp	r1, #0
   11c68:	blt	11cac <__assert_fail@plt+0xd18>
   11c6c:	cmp	r5, #0
   11c70:	orrne	lr, r1, lr, lsl #6
   11c74:	strbne	lr, [ip], #1
   11c78:	ldrne	r1, [r3]
   11c7c:	subne	r1, r1, #1
   11c80:	strne	r1, [r3]
   11c84:	str	ip, [r2]
   11c88:	mov	r0, #1
   11c8c:	pop	{r4, r5, r6, pc}
   11c90:	mov	r0, #0
   11c94:	pop	{r4, r5, r6, pc}
   11c98:	cmp	r1, #4
   11c9c:	bne	11cac <__assert_fail@plt+0xd18>
   11ca0:	ldrb	r3, [r0, #3]
   11ca4:	cmp	r3, #61	; 0x3d
   11ca8:	beq	11c84 <__assert_fail@plt+0xcf0>
   11cac:	str	ip, [r2]
   11cb0:	mov	r0, #0
   11cb4:	pop	{r4, r5, r6, pc}
   11cb8:	mov	r0, #0
   11cbc:	bx	lr
   11cc0:	asr	r5, r6, #4
   11cc4:	orr	lr, r5, lr, lsl #2
   11cc8:	strb	lr, [ip], #1
   11ccc:	ldr	r5, [r3]
   11cd0:	sub	r5, r5, #1
   11cd4:	str	r5, [r3]
   11cd8:	b	11c0c <__assert_fail@plt+0xc78>
   11cdc:	cmp	r1, #4
   11ce0:	beq	11c84 <__assert_fail@plt+0xcf0>
   11ce4:	b	11cac <__assert_fail@plt+0xd18>
   11ce8:	andeq	r6, r1, r4, asr r5
   11cec:	tst	r3, #3
   11cf0:	push	{r4, r5, r6, lr}
   11cf4:	bne	11d08 <__assert_fail@plt+0xd74>
   11cf8:	lsr	ip, r3, #2
   11cfc:	add	ip, ip, ip, lsl #1
   11d00:	cmp	ip, r1
   11d04:	beq	11e2c <__assert_fail@plt+0xe98>
   11d08:	add	r2, r2, #4
   11d0c:	ldr	r4, [pc, #416]	; 11eb4 <__assert_fail@plt+0xf20>
   11d10:	mov	r5, #61	; 0x3d
   11d14:	b	11d8c <__assert_fail@plt+0xdf8>
   11d18:	ldrb	lr, [r0, #1]
   11d1c:	cmp	r3, #2
   11d20:	add	ip, ip, lr, lsr #4
   11d24:	and	ip, ip, #63	; 0x3f
   11d28:	add	ip, r4, ip
   11d2c:	ldrb	ip, [ip, #256]	; 0x100
   11d30:	strb	ip, [r2, #-3]
   11d34:	popeq	{r4, r5, r6, pc}
   11d38:	cmp	r1, #2
   11d3c:	lsl	lr, lr, #2
   11d40:	beq	11e04 <__assert_fail@plt+0xe70>
   11d44:	ldrb	ip, [r0, #2]
   11d48:	cmp	r3, #3
   11d4c:	add	lr, lr, ip, lsr #6
   11d50:	and	lr, lr, #63	; 0x3f
   11d54:	add	lr, r4, lr
   11d58:	ldrb	lr, [lr, #256]	; 0x100
   11d5c:	strb	lr, [r2, #-2]
   11d60:	popeq	{r4, r5, r6, pc}
   11d64:	and	ip, ip, #63	; 0x3f
   11d68:	add	ip, r4, ip
   11d6c:	cmp	r3, #4
   11d70:	ldrb	ip, [ip, #256]	; 0x100
   11d74:	strb	ip, [r2, #-1]
   11d78:	popeq	{r4, r5, r6, pc}
   11d7c:	subs	r1, r1, #3
   11d80:	addne	r0, r0, #3
   11d84:	sub	r3, r3, #4
   11d88:	add	r2, r2, #4
   11d8c:	adds	ip, r3, #0
   11d90:	movne	ip, #1
   11d94:	cmp	r1, #0
   11d98:	moveq	ip, #0
   11d9c:	cmp	ip, #0
   11da0:	sub	lr, r2, #4
   11da4:	beq	11e20 <__assert_fail@plt+0xe8c>
   11da8:	ldrb	ip, [r0]
   11dac:	cmp	r3, #1
   11db0:	add	lr, r4, ip, lsr #2
   11db4:	ldrb	lr, [lr, #256]	; 0x100
   11db8:	strb	lr, [r2, #-4]
   11dbc:	popeq	{r4, r5, r6, pc}
   11dc0:	cmp	r1, #1
   11dc4:	lsl	ip, ip, #4
   11dc8:	bne	11d18 <__assert_fail@plt+0xd84>
   11dcc:	and	ip, ip, #63	; 0x3f
   11dd0:	add	ip, r4, ip
   11dd4:	cmp	r3, #2
   11dd8:	ldrb	r1, [ip, #256]	; 0x100
   11ddc:	strb	r1, [r2, #-3]
   11de0:	popeq	{r4, r5, r6, pc}
   11de4:	cmp	r3, #3
   11de8:	strb	r5, [r2, #-2]
   11dec:	popeq	{r4, r5, r6, pc}
   11df0:	cmp	r3, #4
   11df4:	strb	r5, [r2, #-1]
   11df8:	popeq	{r4, r5, r6, pc}
   11dfc:	mov	r1, #0
   11e00:	b	11d84 <__assert_fail@plt+0xdf0>
   11e04:	and	lr, lr, #63	; 0x3f
   11e08:	add	lr, r4, lr
   11e0c:	cmp	r3, #3
   11e10:	ldrb	r1, [lr, #256]	; 0x100
   11e14:	strb	r1, [r2, #-2]
   11e18:	popeq	{r4, r5, r6, pc}
   11e1c:	b	11df0 <__assert_fail@plt+0xe5c>
   11e20:	cmp	r3, #0
   11e24:	strbne	ip, [r2, #-4]
   11e28:	pop	{r4, r5, r6, pc}
   11e2c:	cmp	ip, #0
   11e30:	popeq	{r4, r5, r6, pc}
   11e34:	add	ip, ip, #3
   11e38:	ldr	r4, [pc, #116]	; 11eb4 <__assert_fail@plt+0xf20>
   11e3c:	add	lr, r0, ip
   11e40:	add	r3, r2, #4
   11e44:	add	r0, r0, #3
   11e48:	ldrb	r6, [r0, #-2]
   11e4c:	ldrb	ip, [r0, #-1]
   11e50:	ldrb	r5, [r0, #-3]
   11e54:	add	r0, r0, #3
   11e58:	lsr	r2, r6, #4
   11e5c:	lsr	r1, ip, #6
   11e60:	add	r1, r1, r6, lsl #2
   11e64:	add	r2, r2, r5, lsl #4
   11e68:	and	r1, r1, #63	; 0x3f
   11e6c:	and	ip, ip, #63	; 0x3f
   11e70:	and	r2, r2, #63	; 0x3f
   11e74:	add	r1, r4, r1
   11e78:	add	r2, r4, r2
   11e7c:	add	ip, r4, ip
   11e80:	add	r5, r4, r5, lsr #2
   11e84:	ldrb	r6, [r1, #256]	; 0x100
   11e88:	ldrb	ip, [ip, #256]	; 0x100
   11e8c:	ldrb	r1, [r2, #256]	; 0x100
   11e90:	ldrb	r2, [r5, #256]	; 0x100
   11e94:	cmp	lr, r0
   11e98:	strb	r6, [r3, #-2]
   11e9c:	strb	ip, [r3, #-1]
   11ea0:	strb	r1, [r3, #-3]
   11ea4:	strb	r2, [r3, #-4]
   11ea8:	add	r3, r3, #4
   11eac:	bne	11e48 <__assert_fail@plt+0xeb4>
   11eb0:	pop	{r4, r5, r6, pc}
   11eb4:	andeq	r6, r1, r4, asr r5
   11eb8:	ldr	r3, [pc, #108]	; 11f2c <__assert_fail@plt+0xf98>
   11ebc:	push	{r4, r5, r6, r7, r8, lr}
   11ec0:	add	r4, r1, #2
   11ec4:	umull	r3, r4, r3, r4
   11ec8:	lsr	r4, r4, #1
   11ecc:	lsl	r4, r4, #2
   11ed0:	add	r6, r4, #1
   11ed4:	cmp	r1, r6
   11ed8:	movhi	r4, #0
   11edc:	strhi	r4, [r2]
   11ee0:	bls	11eec <__assert_fail@plt+0xf58>
   11ee4:	mov	r0, r4
   11ee8:	pop	{r4, r5, r6, r7, r8, pc}
   11eec:	mov	r8, r0
   11ef0:	mov	r0, r6
   11ef4:	mov	r7, r2
   11ef8:	mov	r5, r1
   11efc:	bl	10e50 <malloc@plt>
   11f00:	cmp	r0, #0
   11f04:	str	r0, [r7]
   11f08:	moveq	r4, r6
   11f0c:	beq	11ee4 <__assert_fail@plt+0xf50>
   11f10:	mov	r2, r0
   11f14:	mov	r3, r6
   11f18:	mov	r0, r8
   11f1c:	mov	r1, r5
   11f20:	bl	11cec <__assert_fail@plt+0xd58>
   11f24:	mov	r0, r4
   11f28:	pop	{r4, r5, r6, r7, r8, pc}
   11f2c:	bge	feabc9e0 <optarg@@GLIBC_2.4+0xfea95888>
   11f30:	ldr	r3, [pc, #12]	; 11f44 <__assert_fail@plt+0xfb0>
   11f34:	ldrb	r0, [r3, r0]
   11f38:	eor	r0, r0, #128	; 0x80
   11f3c:	lsr	r0, r0, #7
   11f40:	bx	lr
   11f44:	andeq	r6, r1, r4, asr r5
   11f48:	mov	r3, #0
   11f4c:	str	r3, [r0]
   11f50:	bx	lr
   11f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f58:	sub	sp, sp, #20
   11f5c:	subs	r8, r0, #0
   11f60:	ldr	fp, [sp, #56]	; 0x38
   11f64:	ldr	r0, [pc, #572]	; 121a8 <__assert_fail@plt+0x1214>
   11f68:	mov	r4, r1
   11f6c:	ldr	r7, [fp]
   11f70:	ldr	r0, [r0]
   11f74:	mov	r1, r2
   11f78:	stmib	sp, {r3, r7}
   11f7c:	str	r0, [sp, #12]
   11f80:	movne	r3, #1
   11f84:	moveq	r3, #0
   11f88:	beq	12184 <__assert_fail@plt+0x11f0>
   11f8c:	ldr	sl, [r8]
   11f90:	adds	r9, r2, #0
   11f94:	movne	r9, #1
   11f98:	cmp	sl, #0
   11f9c:	moveq	sl, r9
   11fa0:	movne	sl, #0
   11fa4:	and	r3, r9, r3
   11fa8:	str	r3, [sp]
   11fac:	b	11ff8 <__assert_fail@plt+0x1064>
   11fb0:	ldrb	r2, [r4]
   11fb4:	cmp	r2, #10
   11fb8:	beq	12154 <__assert_fail@plt+0x11c0>
   11fbc:	ldr	r2, [sp, #4]
   11fc0:	sub	r3, r3, r7
   11fc4:	add	r3, r2, r3
   11fc8:	cmp	r8, #0
   11fcc:	stmib	sp, {r3, r7}
   11fd0:	add	r5, r4, r1
   11fd4:	bne	1203c <__assert_fail@plt+0x10a8>
   11fd8:	mov	r0, r4
   11fdc:	add	r3, sp, #8
   11fe0:	add	r2, sp, #4
   11fe4:	bl	11bcc <__assert_fail@plt+0xc38>
   11fe8:	cmp	r0, #0
   11fec:	beq	1219c <__assert_fail@plt+0x1208>
   11ff0:	ldr	r7, [sp, #8]
   11ff4:	sub	r1, r5, r4
   11ff8:	cmp	sl, #0
   11ffc:	moveq	r3, r7
   12000:	bne	120e4 <__assert_fail@plt+0x1150>
   12004:	cmp	r1, #0
   12008:	moveq	r0, r9
   1200c:	movne	r0, #0
   12010:	cmp	r0, #0
   12014:	bne	120bc <__assert_fail@plt+0x1128>
   12018:	cmp	r1, #0
   1201c:	bne	11fb0 <__assert_fail@plt+0x101c>
   12020:	ldr	r2, [sp, #4]
   12024:	sub	r3, r3, r7
   12028:	add	r3, r2, r3
   1202c:	cmp	r8, #0
   12030:	stmib	sp, {r3, r7}
   12034:	beq	12190 <__assert_fail@plt+0x11fc>
   12038:	mov	r5, r4
   1203c:	ldr	r3, [r8]
   12040:	cmp	r3, #4
   12044:	moveq	r3, #0
   12048:	streq	r3, [r8]
   1204c:	beq	12120 <__assert_fail@plt+0x118c>
   12050:	cmp	r3, #0
   12054:	movne	r1, r3
   12058:	beq	12120 <__assert_fail@plt+0x118c>
   1205c:	cmp	r4, r5
   12060:	bcs	12094 <__assert_fail@plt+0x1100>
   12064:	ldrb	r0, [r4], #1
   12068:	cmp	r0, #10
   1206c:	beq	1208c <__assert_fail@plt+0x10f8>
   12070:	add	r3, r1, #1
   12074:	mov	r2, r8
   12078:	cmp	r3, #4
   1207c:	str	r3, [r2], r1
   12080:	mov	r1, r3
   12084:	strb	r0, [r2, #4]
   12088:	beq	12094 <__assert_fail@plt+0x1100>
   1208c:	cmp	r4, r5
   12090:	bne	12064 <__assert_fail@plt+0x10d0>
   12094:	cmp	r1, #0
   12098:	add	r0, r8, #4
   1209c:	beq	120b4 <__assert_fail@plt+0x1120>
   120a0:	cmp	r1, #3
   120a4:	bhi	11fdc <__assert_fail@plt+0x1048>
   120a8:	ldr	r3, [sp]
   120ac:	cmp	r3, #0
   120b0:	beq	11fdc <__assert_fail@plt+0x1048>
   120b4:	ldr	r3, [sp, #8]
   120b8:	mov	r0, #1
   120bc:	ldr	r1, [pc, #228]	; 121a8 <__assert_fail@plt+0x1214>
   120c0:	ldr	r2, [fp]
   120c4:	ldr	ip, [sp, #12]
   120c8:	ldr	r1, [r1]
   120cc:	sub	r3, r2, r3
   120d0:	cmp	ip, r1
   120d4:	str	r3, [fp]
   120d8:	bne	121a4 <__assert_fail@plt+0x1210>
   120dc:	add	sp, sp, #20
   120e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e4:	add	r6, r4, r1
   120e8:	b	120f4 <__assert_fail@plt+0x1160>
   120ec:	ldr	r7, [sp, #8]
   120f0:	add	r4, r4, #4
   120f4:	sub	r5, r6, r4
   120f8:	mov	r1, r5
   120fc:	add	r3, sp, #8
   12100:	add	r2, sp, #4
   12104:	mov	r0, r4
   12108:	bl	11bcc <__assert_fail@plt+0xc38>
   1210c:	cmp	r0, #0
   12110:	bne	120ec <__assert_fail@plt+0x1158>
   12114:	mov	r1, r5
   12118:	ldr	r3, [sp, #8]
   1211c:	b	12004 <__assert_fail@plt+0x1070>
   12120:	cmp	r1, #3
   12124:	ble	1214c <__assert_fail@plt+0x11b8>
   12128:	mov	r1, #10
   1212c:	mov	r0, r4
   12130:	mov	r2, #4
   12134:	bl	10f04 <memchr@plt>
   12138:	cmp	r0, #0
   1213c:	moveq	r1, #4
   12140:	moveq	r0, r4
   12144:	addeq	r4, r4, r1
   12148:	beq	11fdc <__assert_fail@plt+0x1048>
   1214c:	ldr	r1, [r8]
   12150:	b	1205c <__assert_fail@plt+0x10c8>
   12154:	cmp	r8, #0
   12158:	addne	r4, r4, #1
   1215c:	subne	r1, r1, #1
   12160:	movne	r7, r3
   12164:	bne	11ff8 <__assert_fail@plt+0x1064>
   12168:	ldr	r2, [sp, #4]
   1216c:	sub	r3, r3, r7
   12170:	add	r3, r2, r3
   12174:	add	r5, r4, r1
   12178:	stmib	sp, {r3, r7}
   1217c:	mov	r0, r4
   12180:	b	120a0 <__assert_fail@plt+0x110c>
   12184:	mov	sl, #1
   12188:	mov	r9, sl
   1218c:	b	11fa4 <__assert_fail@plt+0x1010>
   12190:	mov	r3, r7
   12194:	mov	r0, #1
   12198:	b	120bc <__assert_fail@plt+0x1128>
   1219c:	ldr	r3, [sp, #8]
   121a0:	b	120bc <__assert_fail@plt+0x1128>
   121a4:	bl	10dd8 <__stack_chk_fail@plt>
   121a8:	andeq	r6, r2, r8, lsl #30
   121ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   121b0:	lsr	ip, r2, #2
   121b4:	ldr	r4, [pc, #168]	; 12264 <__assert_fail@plt+0x12d0>
   121b8:	add	ip, ip, #1
   121bc:	sub	sp, sp, #20
   121c0:	add	ip, ip, ip, lsl #1
   121c4:	mov	r5, r2
   121c8:	ldr	r2, [r4]
   121cc:	mov	r8, r0
   121d0:	mov	r0, ip
   121d4:	mov	r6, r3
   121d8:	mov	r9, r1
   121dc:	str	ip, [sp, #8]
   121e0:	str	r2, [sp, #12]
   121e4:	ldr	r7, [sp, #48]	; 0x30
   121e8:	bl	10e50 <malloc@plt>
   121ec:	cmp	r0, #0
   121f0:	str	r0, [r6]
   121f4:	beq	12248 <__assert_fail@plt+0x12b4>
   121f8:	add	ip, sp, #8
   121fc:	mov	r3, r0
   12200:	mov	r2, r5
   12204:	mov	r1, r9
   12208:	mov	r0, r8
   1220c:	str	ip, [sp]
   12210:	bl	11f54 <__assert_fail@plt+0xfc0>
   12214:	subs	r5, r0, #0
   12218:	beq	12250 <__assert_fail@plt+0x12bc>
   1221c:	cmp	r7, #0
   12220:	beq	12248 <__assert_fail@plt+0x12b4>
   12224:	ldr	r3, [sp, #8]
   12228:	str	r3, [r7]
   1222c:	ldr	r2, [sp, #12]
   12230:	ldr	r3, [r4]
   12234:	mov	r0, r5
   12238:	cmp	r2, r3
   1223c:	bne	12260 <__assert_fail@plt+0x12cc>
   12240:	add	sp, sp, #20
   12244:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12248:	mov	r5, #1
   1224c:	b	1222c <__assert_fail@plt+0x1298>
   12250:	ldr	r0, [r6]
   12254:	bl	10d78 <free@plt>
   12258:	str	r5, [r6]
   1225c:	b	1222c <__assert_fail@plt+0x1298>
   12260:	bl	10dd8 <__stack_chk_fail@plt>
   12264:	andeq	r6, r2, r8, lsl #30
   12268:	ldr	r3, [pc, #4]	; 12274 <__assert_fail@plt+0x12e0>
   1226c:	str	r0, [r3]
   12270:	bx	lr
   12274:	andeq	r7, r2, r0, ror #2
   12278:	ldr	r3, [pc, #4]	; 12284 <__assert_fail@plt+0x12f0>
   1227c:	strb	r0, [r3, #4]
   12280:	bx	lr
   12284:	andeq	r7, r2, r0, ror #2
   12288:	ldr	r3, [pc, #180]	; 12344 <__assert_fail@plt+0x13b0>
   1228c:	push	{r4, r5, r6, lr}
   12290:	sub	sp, sp, #8
   12294:	ldr	r0, [r3]
   12298:	bl	15b74 <__assert_fail@plt+0x4be0>
   1229c:	cmp	r0, #0
   122a0:	beq	122c8 <__assert_fail@plt+0x1334>
   122a4:	bl	10ebc <__errno_location@plt>
   122a8:	ldr	r5, [pc, #152]	; 12348 <__assert_fail@plt+0x13b4>
   122ac:	ldrb	r3, [r5, #4]
   122b0:	cmp	r3, #0
   122b4:	mov	r4, r0
   122b8:	beq	122e4 <__assert_fail@plt+0x1350>
   122bc:	ldr	r3, [r0]
   122c0:	cmp	r3, #32
   122c4:	bne	122e4 <__assert_fail@plt+0x1350>
   122c8:	ldr	r3, [pc, #124]	; 1234c <__assert_fail@plt+0x13b8>
   122cc:	ldr	r0, [r3]
   122d0:	bl	15b74 <__assert_fail@plt+0x4be0>
   122d4:	cmp	r0, #0
   122d8:	bne	12324 <__assert_fail@plt+0x1390>
   122dc:	add	sp, sp, #8
   122e0:	pop	{r4, r5, r6, pc}
   122e4:	mov	r2, #5
   122e8:	ldr	r1, [pc, #96]	; 12350 <__assert_fail@plt+0x13bc>
   122ec:	mov	r0, #0
   122f0:	bl	10dcc <dcgettext@plt>
   122f4:	mov	r6, r0
   122f8:	ldr	r0, [r5]
   122fc:	cmp	r0, #0
   12300:	beq	12330 <__assert_fail@plt+0x139c>
   12304:	ldr	r4, [r4]
   12308:	bl	1441c <__assert_fail@plt+0x3488>
   1230c:	mov	r1, r4
   12310:	str	r6, [sp]
   12314:	ldr	r2, [pc, #56]	; 12354 <__assert_fail@plt+0x13c0>
   12318:	mov	r3, r0
   1231c:	mov	r0, #0
   12320:	bl	10e44 <error@plt>
   12324:	ldr	r3, [pc, #44]	; 12358 <__assert_fail@plt+0x13c4>
   12328:	ldr	r0, [r3]
   1232c:	bl	10d84 <_exit@plt>
   12330:	mov	r3, r6
   12334:	ldr	r1, [r4]
   12338:	ldr	r2, [pc, #28]	; 1235c <__assert_fail@plt+0x13c8>
   1233c:	bl	10e44 <error@plt>
   12340:	b	12324 <__assert_fail@plt+0x1390>
   12344:	andeq	r7, r2, r4, asr r1
   12348:	andeq	r7, r2, r0, ror #2
   1234c:	andeq	r7, r2, r8, asr #2
   12350:			; <UNDEFINED> instruction: 0x00015fb0
   12354:	muleq	r1, r4, r6
   12358:	strdeq	r7, [r2], -r0
   1235c:	muleq	r1, r8, r6
   12360:	b	10d54 <posix_fadvise64@plt>
   12364:	cmp	r0, #0
   12368:	bxeq	lr
   1236c:	push	{r4, lr}
   12370:	sub	sp, sp, #16
   12374:	mov	r4, r1
   12378:	bl	10eec <fileno@plt>
   1237c:	mov	r2, #0
   12380:	mov	r3, #0
   12384:	str	r4, [sp, #8]
   12388:	strd	r2, [sp]
   1238c:	bl	10d54 <posix_fadvise64@plt>
   12390:	add	sp, sp, #16
   12394:	pop	{r4, pc}
   12398:	push	{r4, r5, r6, lr}
   1239c:	subs	r4, r0, #0
   123a0:	beq	12414 <__assert_fail@plt+0x1480>
   123a4:	mov	r1, #47	; 0x2f
   123a8:	bl	10f40 <strrchr@plt>
   123ac:	subs	r5, r0, #0
   123b0:	beq	12400 <__assert_fail@plt+0x146c>
   123b4:	add	r6, r5, #1
   123b8:	sub	r3, r6, r4
   123bc:	cmp	r3, #6
   123c0:	ble	12400 <__assert_fail@plt+0x146c>
   123c4:	mov	r2, #7
   123c8:	ldr	r1, [pc, #96]	; 12430 <__assert_fail@plt+0x149c>
   123cc:	sub	r0, r5, #6
   123d0:	bl	10f7c <strncmp@plt>
   123d4:	cmp	r0, #0
   123d8:	bne	12400 <__assert_fail@plt+0x146c>
   123dc:	mov	r2, #3
   123e0:	ldr	r1, [pc, #76]	; 12434 <__assert_fail@plt+0x14a0>
   123e4:	mov	r0, r6
   123e8:	bl	10f7c <strncmp@plt>
   123ec:	cmp	r0, #0
   123f0:	movne	r4, r6
   123f4:	ldreq	r3, [pc, #60]	; 12438 <__assert_fail@plt+0x14a4>
   123f8:	addeq	r4, r5, #4
   123fc:	streq	r4, [r3]
   12400:	ldr	r2, [pc, #52]	; 1243c <__assert_fail@plt+0x14a8>
   12404:	ldr	r3, [pc, #52]	; 12440 <__assert_fail@plt+0x14ac>
   12408:	str	r4, [r2]
   1240c:	str	r4, [r3]
   12410:	pop	{r4, r5, r6, pc}
   12414:	ldr	r3, [pc, #40]	; 12444 <__assert_fail@plt+0x14b0>
   12418:	mov	r2, #55	; 0x37
   1241c:	mov	r1, #1
   12420:	ldr	r3, [r3]
   12424:	ldr	r0, [pc, #28]	; 12448 <__assert_fail@plt+0x14b4>
   12428:	bl	10e08 <fwrite@plt>
   1242c:	bl	10f88 <abort@plt>
   12430:	ldrdeq	r6, [r1], -r4
   12434:	ldrdeq	r6, [r1], -ip
   12438:	andeq	r7, r2, r8, lsr r1
   1243c:	andeq	r7, r2, r8, ror #2
   12440:	andeq	r7, r2, ip, lsr r1
   12444:	andeq	r7, r2, r8, asr #2
   12448:	muleq	r1, ip, r6
   1244c:	push	{r4, lr}
   12450:	mov	r2, #48	; 0x30
   12454:	mov	r4, r1
   12458:	mov	r1, #0
   1245c:	bl	10ed4 <memset@plt>
   12460:	cmp	r4, #10
   12464:	beq	12470 <__assert_fail@plt+0x14dc>
   12468:	str	r4, [r0]
   1246c:	pop	{r4, pc}
   12470:	bl	10f88 <abort@plt>
   12474:	push	{r4, r5, r6, lr}
   12478:	mov	r2, #5
   1247c:	mov	r5, r0
   12480:	mov	r6, r1
   12484:	mov	r1, r0
   12488:	mov	r0, #0
   1248c:	bl	10dcc <dcgettext@plt>
   12490:	cmp	r5, r0
   12494:	mov	r4, r0
   12498:	beq	124a4 <__assert_fail@plt+0x1510>
   1249c:	mov	r0, r4
   124a0:	pop	{r4, r5, r6, pc}
   124a4:	bl	15c34 <__assert_fail@plt+0x4ca0>
   124a8:	ldrb	r3, [r0]
   124ac:	bic	r3, r3, #32
   124b0:	cmp	r3, #85	; 0x55
   124b4:	bne	12514 <__assert_fail@plt+0x1580>
   124b8:	ldrb	r3, [r0, #1]
   124bc:	bic	r3, r3, #32
   124c0:	cmp	r3, #84	; 0x54
   124c4:	bne	1258c <__assert_fail@plt+0x15f8>
   124c8:	ldrb	r3, [r0, #2]
   124cc:	bic	r3, r3, #32
   124d0:	cmp	r3, #70	; 0x46
   124d4:	bne	1258c <__assert_fail@plt+0x15f8>
   124d8:	ldrb	r3, [r0, #3]
   124dc:	cmp	r3, #45	; 0x2d
   124e0:	bne	1258c <__assert_fail@plt+0x15f8>
   124e4:	ldrb	r3, [r0, #4]
   124e8:	cmp	r3, #56	; 0x38
   124ec:	bne	1258c <__assert_fail@plt+0x15f8>
   124f0:	ldrb	r3, [r0, #5]
   124f4:	cmp	r3, #0
   124f8:	bne	1258c <__assert_fail@plt+0x15f8>
   124fc:	ldrb	r2, [r4]
   12500:	ldr	r3, [pc, #156]	; 125a4 <__assert_fail@plt+0x1610>
   12504:	ldr	r4, [pc, #156]	; 125a8 <__assert_fail@plt+0x1614>
   12508:	cmp	r2, #96	; 0x60
   1250c:	movne	r4, r3
   12510:	b	1249c <__assert_fail@plt+0x1508>
   12514:	cmp	r3, #71	; 0x47
   12518:	bne	1258c <__assert_fail@plt+0x15f8>
   1251c:	ldrb	r3, [r0, #1]
   12520:	bic	r3, r3, #32
   12524:	cmp	r3, #66	; 0x42
   12528:	bne	1258c <__assert_fail@plt+0x15f8>
   1252c:	ldrb	r3, [r0, #2]
   12530:	cmp	r3, #49	; 0x31
   12534:	bne	1258c <__assert_fail@plt+0x15f8>
   12538:	ldrb	r3, [r0, #3]
   1253c:	cmp	r3, #56	; 0x38
   12540:	bne	1258c <__assert_fail@plt+0x15f8>
   12544:	ldrb	r3, [r0, #4]
   12548:	cmp	r3, #48	; 0x30
   1254c:	bne	1258c <__assert_fail@plt+0x15f8>
   12550:	ldrb	r3, [r0, #5]
   12554:	cmp	r3, #51	; 0x33
   12558:	bne	1258c <__assert_fail@plt+0x15f8>
   1255c:	ldrb	r3, [r0, #6]
   12560:	cmp	r3, #48	; 0x30
   12564:	bne	1258c <__assert_fail@plt+0x15f8>
   12568:	ldrb	r3, [r0, #7]
   1256c:	cmp	r3, #0
   12570:	bne	1258c <__assert_fail@plt+0x15f8>
   12574:	ldrb	r2, [r4]
   12578:	ldr	r3, [pc, #44]	; 125ac <__assert_fail@plt+0x1618>
   1257c:	ldr	r4, [pc, #44]	; 125b0 <__assert_fail@plt+0x161c>
   12580:	cmp	r2, #96	; 0x60
   12584:	movne	r4, r3
   12588:	b	1249c <__assert_fail@plt+0x1508>
   1258c:	ldr	r3, [pc, #32]	; 125b4 <__assert_fail@plt+0x1620>
   12590:	ldr	r4, [pc, #32]	; 125b8 <__assert_fail@plt+0x1624>
   12594:	cmp	r6, #9
   12598:	movne	r4, r3
   1259c:	mov	r0, r4
   125a0:	pop	{r4, r5, r6, pc}
   125a4:	andeq	r6, r1, r8, lsr r7
   125a8:	andeq	r6, r1, r4, asr #14
   125ac:	andeq	r6, r1, ip, lsr r7
   125b0:	andeq	r6, r1, r0, asr #14
   125b4:	andeq	r6, r1, r8, asr #14
   125b8:	andeq	r6, r1, r4, lsr r7
   125bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c0:	sub	sp, sp, #124	; 0x7c
   125c4:	ldr	ip, [pc, #3576]	; 133c4 <__assert_fail@plt+0x2430>
   125c8:	str	r3, [sp, #24]
   125cc:	ldr	r3, [sp, #168]	; 0xa8
   125d0:	ldr	ip, [ip]
   125d4:	str	r3, [sp, #56]	; 0x38
   125d8:	ldr	r3, [sp, #172]	; 0xac
   125dc:	ldr	r8, [sp, #160]	; 0xa0
   125e0:	str	r3, [sp, #80]	; 0x50
   125e4:	ldr	r3, [sp, #176]	; 0xb0
   125e8:	mov	fp, r0
   125ec:	str	r3, [sp, #76]	; 0x4c
   125f0:	mov	sl, r1
   125f4:	str	r2, [sp, #36]	; 0x24
   125f8:	str	ip, [sp, #116]	; 0x74
   125fc:	bl	10e20 <__ctype_get_mb_cur_max@plt>
   12600:	ldr	r3, [sp, #164]	; 0xa4
   12604:	ands	r4, r3, #2
   12608:	movne	r3, #1
   1260c:	moveq	r3, #0
   12610:	str	r3, [sp, #32]
   12614:	str	r0, [sp, #64]	; 0x40
   12618:	cmp	r8, #10
   1261c:	ldrls	pc, [pc, r8, lsl #2]
   12620:	b	13dd0 <__assert_fail@plt+0x2e3c>
   12624:	andeq	r2, r1, r8, lsl sl
   12628:			; <UNDEFINED> instruction: 0x00012ab0
   1262c:	strheq	r3, [r1], -r0
   12630:	ldrdeq	r2, [r1], -r0
   12634:	andeq	r2, r1, r4, lsl #19
   12638:	andeq	r2, r1, ip, asr #19
   1263c:	andeq	r2, r1, r8, asr #20
   12640:	andeq	r2, r1, r0, lsl #21
   12644:	andeq	r2, r1, r0, asr r6
   12648:	andeq	r2, r1, r0, asr r6
   1264c:	andeq	r2, r1, r0, asr r6
   12650:	cmp	r8, #10
   12654:	beq	12678 <__assert_fail@plt+0x16e4>
   12658:	mov	r1, r8
   1265c:	ldr	r0, [pc, #3428]	; 133c8 <__assert_fail@plt+0x2434>
   12660:	bl	12474 <__assert_fail@plt+0x14e0>
   12664:	mov	r1, r8
   12668:	str	r0, [sp, #80]	; 0x50
   1266c:	ldr	r0, [pc, #3420]	; 133d0 <__assert_fail@plt+0x243c>
   12670:	bl	12474 <__assert_fail@plt+0x14e0>
   12674:	str	r0, [sp, #76]	; 0x4c
   12678:	cmp	r4, #0
   1267c:	movne	r4, #0
   12680:	beq	13a90 <__assert_fail@plt+0x2afc>
   12684:	ldr	r7, [sp, #76]	; 0x4c
   12688:	mov	r5, #0
   1268c:	mov	r6, #1
   12690:	mov	r0, r7
   12694:	str	r6, [sp, #40]	; 0x28
   12698:	str	r5, [sp, #68]	; 0x44
   1269c:	bl	10ea4 <strlen@plt>
   126a0:	str	r6, [sp, #28]
   126a4:	str	r5, [sp, #44]	; 0x2c
   126a8:	str	r5, [sp, #72]	; 0x48
   126ac:	str	r7, [sp, #60]	; 0x3c
   126b0:	str	r0, [sp, #52]	; 0x34
   126b4:	str	r8, [sp, #160]	; 0xa0
   126b8:	mov	r8, fp
   126bc:	ldr	fp, [sp, #160]	; 0xa0
   126c0:	mov	r9, #0
   126c4:	ldr	r3, [sp, #24]
   126c8:	cmn	r3, #1
   126cc:	beq	12c34 <__assert_fail@plt+0x1ca0>
   126d0:	ldr	r3, [sp, #24]
   126d4:	subs	r6, r3, r9
   126d8:	movne	r6, #1
   126dc:	cmp	r6, #0
   126e0:	beq	12c4c <__assert_fail@plt+0x1cb8>
   126e4:	ldr	r7, [sp, #28]
   126e8:	ldr	r0, [sp, #36]	; 0x24
   126ec:	cmp	fp, #2
   126f0:	moveq	r7, #0
   126f4:	andne	r7, r7, #1
   126f8:	add	r3, r0, r9
   126fc:	cmp	r7, #0
   12700:	str	r3, [sp, #48]	; 0x30
   12704:	beq	130f0 <__assert_fail@plt+0x215c>
   12708:	ldr	r2, [sp, #52]	; 0x34
   1270c:	cmp	r2, #0
   12710:	beq	133d4 <__assert_fail@plt+0x2440>
   12714:	ldr	r1, [sp, #24]
   12718:	cmp	r2, #1
   1271c:	mov	r3, r2
   12720:	movls	r3, #0
   12724:	movhi	r3, #1
   12728:	cmn	r1, #1
   1272c:	movne	r3, #0
   12730:	cmp	r3, #0
   12734:	add	r5, r9, r2
   12738:	beq	12744 <__assert_fail@plt+0x17b0>
   1273c:	bl	10ea4 <strlen@plt>
   12740:	str	r0, [sp, #24]
   12744:	ldr	r3, [sp, #24]
   12748:	cmp	r5, r3
   1274c:	bhi	133d4 <__assert_fail@plt+0x2440>
   12750:	ldr	r2, [sp, #52]	; 0x34
   12754:	ldr	r1, [sp, #60]	; 0x3c
   12758:	ldr	r0, [sp, #48]	; 0x30
   1275c:	bl	10dc0 <memcmp@plt>
   12760:	cmp	r0, #0
   12764:	bne	133d4 <__assert_fail@plt+0x2440>
   12768:	ldr	r3, [sp, #32]
   1276c:	cmp	r3, #0
   12770:	bne	13c90 <__assert_fail@plt+0x2cfc>
   12774:	ldr	r3, [sp, #48]	; 0x30
   12778:	ldrb	r5, [r3]
   1277c:	cmp	r5, #126	; 0x7e
   12780:	ldrls	pc, [pc, r5, lsl #2]
   12784:	b	13054 <__assert_fail@plt+0x20c0>
   12788:	andeq	r2, r1, r0, asr #30
   1278c:	andeq	r3, r1, r4, asr r0
   12790:	andeq	r3, r1, r4, asr r0
   12794:	andeq	r3, r1, r4, asr r0
   12798:	andeq	r3, r1, r4, asr r0
   1279c:	andeq	r3, r1, r4, asr r0
   127a0:	andeq	r3, r1, r4, asr r0
   127a4:	andeq	r3, r1, ip
   127a8:	strdeq	r2, [r1], -ip
   127ac:	strdeq	r2, [r1], -ip
   127b0:	andeq	r2, r1, r4, asr #29
   127b4:	andeq	r2, r1, ip, lsl pc
   127b8:	andeq	r2, r1, r4, lsl #30
   127bc:	andeq	r2, r1, r4, lsr lr
   127c0:	andeq	r3, r1, r4, asr r0
   127c4:	andeq	r3, r1, r4, asr r0
   127c8:	andeq	r3, r1, r4, asr r0
   127cc:	andeq	r3, r1, r4, asr r0
   127d0:	andeq	r3, r1, r4, asr r0
   127d4:	andeq	r3, r1, r4, asr r0
   127d8:	andeq	r3, r1, r4, asr r0
   127dc:	andeq	r3, r1, r4, asr r0
   127e0:	andeq	r3, r1, r4, asr r0
   127e4:	andeq	r3, r1, r4, asr r0
   127e8:	andeq	r3, r1, r4, asr r0
   127ec:	andeq	r3, r1, r4, asr r0
   127f0:	andeq	r3, r1, r4, asr r0
   127f4:	andeq	r3, r1, r4, asr r0
   127f8:	andeq	r3, r1, r4, asr r0
   127fc:	andeq	r3, r1, r4, asr r0
   12800:	andeq	r3, r1, r4, asr r0
   12804:	andeq	r3, r1, r4, asr r0
   12808:	andeq	r3, r1, r4, lsl r0
   1280c:	andeq	r2, r1, r8, lsr #30
   12810:	andeq	r2, r1, r8, lsr #30
   12814:	andeq	r3, r1, ip, lsr #32
   12818:	andeq	r2, r1, r8, lsr #30
   1281c:	andeq	r3, r1, r8, asr #32
   12820:	andeq	r2, r1, r8, lsr #30
   12824:	andeq	r2, r1, r8, ror #26
   12828:	andeq	r2, r1, r8, lsr #30
   1282c:	andeq	r2, r1, r8, lsr #30
   12830:	andeq	r2, r1, r8, lsr #30
   12834:	andeq	r3, r1, r8, asr #32
   12838:	andeq	r3, r1, r8, asr #32
   1283c:	andeq	r3, r1, r8, asr #32
   12840:	andeq	r3, r1, r8, asr #32
   12844:	andeq	r3, r1, r8, asr #32
   12848:	andeq	r3, r1, r8, asr #32
   1284c:	andeq	r3, r1, r8, asr #32
   12850:	andeq	r3, r1, r8, asr #32
   12854:	andeq	r3, r1, r8, asr #32
   12858:	andeq	r3, r1, r8, asr #32
   1285c:	andeq	r3, r1, r8, asr #32
   12860:	andeq	r3, r1, r8, asr #32
   12864:	andeq	r3, r1, r8, asr #32
   12868:	andeq	r3, r1, r8, asr #32
   1286c:	andeq	r3, r1, r8, asr #32
   12870:	andeq	r3, r1, r8, asr #32
   12874:	andeq	r2, r1, r8, lsr #30
   12878:	andeq	r2, r1, r8, lsr #30
   1287c:	andeq	r2, r1, r8, lsr #30
   12880:	andeq	r2, r1, r8, lsr #30
   12884:	andeq	r2, r1, ip, lsr sp
   12888:	andeq	r3, r1, r4, asr r0
   1288c:	andeq	r3, r1, r8, asr #32
   12890:	andeq	r3, r1, r8, asr #32
   12894:	andeq	r3, r1, r8, asr #32
   12898:	andeq	r3, r1, r8, asr #32
   1289c:	andeq	r3, r1, r8, asr #32
   128a0:	andeq	r3, r1, r8, asr #32
   128a4:	andeq	r3, r1, r8, asr #32
   128a8:	andeq	r3, r1, r8, asr #32
   128ac:	andeq	r3, r1, r8, asr #32
   128b0:	andeq	r3, r1, r8, asr #32
   128b4:	andeq	r3, r1, r8, asr #32
   128b8:	andeq	r3, r1, r8, asr #32
   128bc:	andeq	r3, r1, r8, asr #32
   128c0:	andeq	r3, r1, r8, asr #32
   128c4:	andeq	r3, r1, r8, asr #32
   128c8:	andeq	r3, r1, r8, asr #32
   128cc:	andeq	r3, r1, r8, asr #32
   128d0:	andeq	r3, r1, r8, asr #32
   128d4:	andeq	r3, r1, r8, asr #32
   128d8:	andeq	r3, r1, r8, asr #32
   128dc:	andeq	r3, r1, r8, asr #32
   128e0:	andeq	r3, r1, r8, asr #32
   128e4:	andeq	r3, r1, r8, asr #32
   128e8:	andeq	r3, r1, r8, asr #32
   128ec:	andeq	r3, r1, r8, asr #32
   128f0:	andeq	r3, r1, r8, asr #32
   128f4:	andeq	r2, r1, r8, lsr #30
   128f8:	strdeq	r2, [r1], -r4
   128fc:	andeq	r3, r1, r8, asr #32
   12900:	andeq	r2, r1, r8, lsr #30
   12904:	andeq	r3, r1, r8, asr #32
   12908:	andeq	r2, r1, r8, lsr #30
   1290c:	andeq	r3, r1, r8, asr #32
   12910:	andeq	r3, r1, r8, asr #32
   12914:	andeq	r3, r1, r8, asr #32
   12918:	andeq	r3, r1, r8, asr #32
   1291c:	andeq	r3, r1, r8, asr #32
   12920:	andeq	r3, r1, r8, asr #32
   12924:	andeq	r3, r1, r8, asr #32
   12928:	andeq	r3, r1, r8, asr #32
   1292c:	andeq	r3, r1, r8, asr #32
   12930:	andeq	r3, r1, r8, asr #32
   12934:	andeq	r3, r1, r8, asr #32
   12938:	andeq	r3, r1, r8, asr #32
   1293c:	andeq	r3, r1, r8, asr #32
   12940:	andeq	r3, r1, r8, asr #32
   12944:	andeq	r3, r1, r8, asr #32
   12948:	andeq	r3, r1, r8, asr #32
   1294c:	andeq	r3, r1, r8, asr #32
   12950:	andeq	r3, r1, r8, asr #32
   12954:	andeq	r3, r1, r8, asr #32
   12958:	andeq	r3, r1, r8, asr #32
   1295c:	andeq	r3, r1, r8, asr #32
   12960:	andeq	r3, r1, r8, asr #32
   12964:	andeq	r3, r1, r8, asr #32
   12968:	andeq	r3, r1, r8, asr #32
   1296c:	andeq	r3, r1, r8, asr #32
   12970:	andeq	r3, r1, r8, asr #32
   12974:	andeq	r2, r1, ip, lsl #22
   12978:	andeq	r2, r1, r8, lsr #30
   1297c:	andeq	r2, r1, ip, lsl #22
   12980:	andeq	r3, r1, ip, lsr #32
   12984:	cmp	r4, #0
   12988:	moveq	r3, #1
   1298c:	streq	r3, [sp, #28]
   12990:	beq	130bc <__assert_fail@plt+0x2128>
   12994:	mov	r3, #0
   12998:	mov	r4, r3
   1299c:	mov	r2, #1
   129a0:	str	r2, [sp, #40]	; 0x28
   129a4:	str	r3, [sp, #68]	; 0x44
   129a8:	str	r2, [sp, #32]
   129ac:	str	r2, [sp, #52]	; 0x34
   129b0:	ldr	r3, [pc, #2584]	; 133d0 <__assert_fail@plt+0x243c>
   129b4:	str	r4, [sp, #44]	; 0x2c
   129b8:	str	r4, [sp, #72]	; 0x48
   129bc:	str	r4, [sp, #28]
   129c0:	str	r3, [sp, #60]	; 0x3c
   129c4:	mov	r8, #2
   129c8:	b	126b4 <__assert_fail@plt+0x1720>
   129cc:	cmp	r4, #0
   129d0:	bne	13c5c <__assert_fail@plt+0x2cc8>
   129d4:	cmp	sl, #0
   129d8:	beq	13a1c <__assert_fail@plt+0x2a88>
   129dc:	mov	r3, #34	; 0x22
   129e0:	strb	r3, [fp]
   129e4:	ldr	r3, [pc, #2528]	; 133cc <__assert_fail@plt+0x2438>
   129e8:	mov	r1, r4
   129ec:	mov	r2, #1
   129f0:	str	r4, [sp, #68]	; 0x44
   129f4:	str	r2, [sp, #40]	; 0x28
   129f8:	mov	r4, r2
   129fc:	str	r1, [sp, #44]	; 0x2c
   12a00:	str	r1, [sp, #72]	; 0x48
   12a04:	str	r1, [sp, #32]
   12a08:	str	r2, [sp, #28]
   12a0c:	str	r2, [sp, #52]	; 0x34
   12a10:	str	r3, [sp, #60]	; 0x3c
   12a14:	b	126b4 <__assert_fail@plt+0x1720>
   12a18:	mov	r3, #0
   12a1c:	str	r3, [sp, #68]	; 0x44
   12a20:	str	r3, [sp, #44]	; 0x2c
   12a24:	str	r3, [sp, #32]
   12a28:	str	r3, [sp, #28]
   12a2c:	str	r3, [sp, #60]	; 0x3c
   12a30:	mov	r3, #1
   12a34:	str	r8, [sp, #72]	; 0x48
   12a38:	str	r8, [sp, #52]	; 0x34
   12a3c:	mov	r4, r8
   12a40:	str	r3, [sp, #40]	; 0x28
   12a44:	b	126b4 <__assert_fail@plt+0x1720>
   12a48:	mov	r3, #1
   12a4c:	str	r3, [sp, #40]	; 0x28
   12a50:	str	r3, [sp, #32]
   12a54:	str	r3, [sp, #28]
   12a58:	str	r3, [sp, #52]	; 0x34
   12a5c:	ldr	r3, [pc, #2408]	; 133cc <__assert_fail@plt+0x2438>
   12a60:	mov	r2, #0
   12a64:	mov	r4, r2
   12a68:	str	r2, [sp, #68]	; 0x44
   12a6c:	str	r2, [sp, #44]	; 0x2c
   12a70:	str	r2, [sp, #72]	; 0x48
   12a74:	str	r3, [sp, #60]	; 0x3c
   12a78:	mov	r8, #5
   12a7c:	b	126b4 <__assert_fail@plt+0x1720>
   12a80:	mov	r3, #0
   12a84:	mov	r2, #1
   12a88:	str	r2, [sp, #40]	; 0x28
   12a8c:	mov	r4, r3
   12a90:	str	r3, [sp, #68]	; 0x44
   12a94:	str	r2, [sp, #28]
   12a98:	str	r3, [sp, #44]	; 0x2c
   12a9c:	str	r3, [sp, #72]	; 0x48
   12aa0:	str	r3, [sp, #32]
   12aa4:	str	r3, [sp, #52]	; 0x34
   12aa8:	str	r3, [sp, #60]	; 0x3c
   12aac:	b	126b4 <__assert_fail@plt+0x1720>
   12ab0:	mov	r2, #1
   12ab4:	mov	r3, #0
   12ab8:	str	r2, [sp, #40]	; 0x28
   12abc:	mov	r4, r3
   12ac0:	str	r3, [sp, #68]	; 0x44
   12ac4:	str	r8, [sp, #52]	; 0x34
   12ac8:	str	r2, [sp, #32]
   12acc:	b	129b0 <__assert_fail@plt+0x1a1c>
   12ad0:	mov	r3, #1
   12ad4:	str	r3, [sp, #40]	; 0x28
   12ad8:	str	r3, [sp, #32]
   12adc:	str	r3, [sp, #28]
   12ae0:	str	r3, [sp, #52]	; 0x34
   12ae4:	ldr	r3, [pc, #2276]	; 133d0 <__assert_fail@plt+0x243c>
   12ae8:	mov	r2, #0
   12aec:	mov	r4, r2
   12af0:	str	r2, [sp, #68]	; 0x44
   12af4:	str	r2, [sp, #44]	; 0x2c
   12af8:	str	r2, [sp, #72]	; 0x48
   12afc:	str	r3, [sp, #60]	; 0x3c
   12b00:	mov	r8, #2
   12b04:	b	126b4 <__assert_fail@plt+0x1720>
   12b08:	mov	r7, #0
   12b0c:	ldr	r3, [sp, #24]
   12b10:	cmn	r3, #1
   12b14:	beq	13650 <__assert_fail@plt+0x26bc>
   12b18:	ldr	r3, [sp, #24]
   12b1c:	subs	r3, r3, #1
   12b20:	movne	r3, #1
   12b24:	cmp	r3, #0
   12b28:	sub	r2, fp, #2
   12b2c:	clz	r2, r2
   12b30:	lsr	r2, r2, #5
   12b34:	bne	12d30 <__assert_fail@plt+0x1d9c>
   12b38:	cmp	r9, #0
   12b3c:	bne	12d30 <__assert_fail@plt+0x1d9c>
   12b40:	ldr	r3, [sp, #32]
   12b44:	tst	r3, r2
   12b48:	bne	12e50 <__assert_fail@plt+0x1ebc>
   12b4c:	ldr	r3, [sp, #28]
   12b50:	eor	r3, r3, #1
   12b54:	orr	r3, r2, r3
   12b58:	ldr	r2, [sp, #32]
   12b5c:	eor	r3, r3, #1
   12b60:	orrs	r3, r2, r3
   12b64:	beq	12b94 <__assert_fail@plt+0x1c00>
   12b68:	mov	r3, #0
   12b6c:	ldr	r1, [sp, #56]	; 0x38
   12b70:	cmp	r1, #0
   12b74:	beq	12b94 <__assert_fail@plt+0x1c00>
   12b78:	lsr	r2, r5, #5
   12b7c:	and	r0, r5, #31
   12b80:	uxtb	r2, r2
   12b84:	ldr	r1, [r1, r2, lsl #2]
   12b88:	lsr	r2, r1, r0
   12b8c:	tst	r2, #1
   12b90:	bne	12b9c <__assert_fail@plt+0x1c08>
   12b94:	cmp	r7, #0
   12b98:	beq	12dec <__assert_fail@plt+0x1e58>
   12b9c:	sub	r2, fp, #2
   12ba0:	clz	r2, r2
   12ba4:	lsr	r2, r2, #5
   12ba8:	ldr	r3, [sp, #32]
   12bac:	cmp	r3, #0
   12bb0:	bne	12edc <__assert_fail@plt+0x1f48>
   12bb4:	ldr	r3, [sp, #44]	; 0x2c
   12bb8:	eor	r3, r3, #1
   12bbc:	ands	r3, r2, r3
   12bc0:	beq	12bf8 <__assert_fail@plt+0x1c64>
   12bc4:	cmp	sl, r4
   12bc8:	movhi	r2, #39	; 0x27
   12bcc:	strbhi	r2, [r8, r4]
   12bd0:	add	r2, r4, #1
   12bd4:	cmp	r2, sl
   12bd8:	movcc	r1, #36	; 0x24
   12bdc:	strbcc	r1, [r8, r2]
   12be0:	add	r2, r4, #2
   12be4:	cmp	r2, sl
   12be8:	add	r4, r4, #3
   12bec:	movcc	r1, #39	; 0x27
   12bf0:	strbcc	r1, [r8, r2]
   12bf4:	str	r3, [sp, #44]	; 0x2c
   12bf8:	cmp	r4, sl
   12bfc:	movcc	r3, #92	; 0x5c
   12c00:	strbcc	r3, [r8, r4]
   12c04:	add	r9, r9, #1
   12c08:	add	r4, r4, #1
   12c0c:	cmp	r4, sl
   12c10:	ldr	r3, [sp, #40]	; 0x28
   12c14:	strbcc	r5, [r8, r4]
   12c18:	cmp	r6, #0
   12c1c:	moveq	r3, #0
   12c20:	str	r3, [sp, #40]	; 0x28
   12c24:	ldr	r3, [sp, #24]
   12c28:	add	r4, r4, #1
   12c2c:	cmn	r3, #1
   12c30:	bne	126d0 <__assert_fail@plt+0x173c>
   12c34:	ldr	r3, [sp, #36]	; 0x24
   12c38:	ldrb	r6, [r3, r9]
   12c3c:	adds	r6, r6, #0
   12c40:	movne	r6, #1
   12c44:	cmp	r6, #0
   12c48:	bne	126e4 <__assert_fail@plt+0x1750>
   12c4c:	str	fp, [sp, #160]	; 0xa0
   12c50:	mov	fp, r8
   12c54:	ldr	r8, [sp, #160]	; 0xa0
   12c58:	ldr	r1, [sp, #32]
   12c5c:	cmp	r4, #0
   12c60:	sub	r2, r8, #2
   12c64:	clz	r2, r2
   12c68:	lsr	r2, r2, #5
   12c6c:	andeq	r3, r2, r1
   12c70:	movne	r3, #0
   12c74:	cmp	r3, #0
   12c78:	bne	13d64 <__assert_fail@plt+0x2dd0>
   12c7c:	eor	r3, r1, #1
   12c80:	ands	r2, r2, r3
   12c84:	beq	13ca0 <__assert_fail@plt+0x2d0c>
   12c88:	ldr	r3, [sp, #68]	; 0x44
   12c8c:	cmp	r3, #0
   12c90:	beq	13ca4 <__assert_fail@plt+0x2d10>
   12c94:	ldr	r3, [sp, #40]	; 0x28
   12c98:	cmp	r3, #0
   12c9c:	bne	13d20 <__assert_fail@plt+0x2d8c>
   12ca0:	ldr	r3, [sp, #72]	; 0x48
   12ca4:	adds	r3, r3, #0
   12ca8:	movne	r3, #1
   12cac:	cmp	sl, #0
   12cb0:	movne	r3, #0
   12cb4:	cmp	r3, #0
   12cb8:	ldreq	r2, [sp, #68]	; 0x44
   12cbc:	beq	13ca4 <__assert_fail@plt+0x2d10>
   12cc0:	ldr	sl, [sp, #72]	; 0x48
   12cc4:	str	r3, [sp, #68]	; 0x44
   12cc8:	ldr	r3, [pc, #1792]	; 133d0 <__assert_fail@plt+0x243c>
   12ccc:	mov	r2, #39	; 0x27
   12cd0:	mov	r4, #1
   12cd4:	str	r3, [sp, #60]	; 0x3c
   12cd8:	mov	r3, #0
   12cdc:	strb	r2, [fp]
   12ce0:	str	r4, [sp, #52]	; 0x34
   12ce4:	mov	r8, #2
   12ce8:	str	r3, [sp, #32]
   12cec:	b	126b4 <__assert_fail@plt+0x1720>
   12cf0:	mov	r7, #0
   12cf4:	cmp	fp, #2
   12cf8:	beq	13630 <__assert_fail@plt+0x269c>
   12cfc:	ldr	r3, [sp, #52]	; 0x34
   12d00:	ldr	r2, [sp, #28]
   12d04:	ldr	r1, [sp, #32]
   12d08:	cmp	r3, #0
   12d0c:	andne	r2, r2, r1
   12d10:	moveq	r2, #0
   12d14:	cmp	r2, #0
   12d18:	moveq	r5, #92	; 0x5c
   12d1c:	moveq	r3, r5
   12d20:	bne	1363c <__assert_fail@plt+0x26a8>
   12d24:	ldr	r1, [sp, #28]
   12d28:	cmp	r1, #0
   12d2c:	bne	13dac <__assert_fail@plt+0x2e18>
   12d30:	mov	r6, #0
   12d34:	b	12b4c <__assert_fail@plt+0x1bb8>
   12d38:	mov	r7, #0
   12d3c:	cmp	fp, #2
   12d40:	beq	136a0 <__assert_fail@plt+0x270c>
   12d44:	cmp	fp, #5
   12d48:	beq	13664 <__assert_fail@plt+0x26d0>
   12d4c:	sub	r2, fp, #2
   12d50:	mov	r6, #0
   12d54:	clz	r2, r2
   12d58:	mov	r5, #63	; 0x3f
   12d5c:	lsr	r2, r2, #5
   12d60:	b	12b4c <__assert_fail@plt+0x1bb8>
   12d64:	mov	r7, #0
   12d68:	cmp	fp, #2
   12d6c:	strne	r6, [sp, #68]	; 0x44
   12d70:	movne	r2, #0
   12d74:	movne	r5, #39	; 0x27
   12d78:	bne	12b4c <__assert_fail@plt+0x1bb8>
   12d7c:	ldr	r3, [sp, #32]
   12d80:	cmp	r3, #0
   12d84:	bne	13a80 <__assert_fail@plt+0x2aec>
   12d88:	cmp	sl, #0
   12d8c:	ldr	r3, [sp, #72]	; 0x48
   12d90:	clz	r3, r3
   12d94:	lsr	r3, r3, #5
   12d98:	moveq	r3, #0
   12d9c:	cmp	r3, #0
   12da0:	bne	139b4 <__assert_fail@plt+0x2a20>
   12da4:	cmp	sl, r4
   12da8:	movhi	r3, #39	; 0x27
   12dac:	strbhi	r3, [r8, r4]
   12db0:	add	r3, r4, #1
   12db4:	cmp	sl, r3
   12db8:	movhi	r2, #92	; 0x5c
   12dbc:	strbhi	r2, [r8, r3]
   12dc0:	add	r3, r4, #2
   12dc4:	cmp	sl, r3
   12dc8:	movhi	r2, #39	; 0x27
   12dcc:	strbhi	r2, [r8, r3]
   12dd0:	mov	r3, #0
   12dd4:	cmp	r7, #0
   12dd8:	add	r4, r4, #3
   12ddc:	str	r3, [sp, #44]	; 0x2c
   12de0:	str	r6, [sp, #68]	; 0x44
   12de4:	mov	r5, #39	; 0x27
   12de8:	bne	12b9c <__assert_fail@plt+0x1c08>
   12dec:	ldr	r2, [sp, #44]	; 0x2c
   12df0:	eor	r3, r3, #1
   12df4:	and	r3, r3, r2
   12df8:	add	r9, r9, #1
   12dfc:	uxtb	r3, r3
   12e00:	cmp	r3, #0
   12e04:	beq	12c0c <__assert_fail@plt+0x1c78>
   12e08:	cmp	sl, r4
   12e0c:	movhi	r3, #39	; 0x27
   12e10:	strbhi	r3, [r8, r4]
   12e14:	add	r3, r4, #1
   12e18:	cmp	sl, r3
   12e1c:	movhi	r2, #39	; 0x27
   12e20:	strbhi	r2, [r8, r3]
   12e24:	mov	r3, #0
   12e28:	add	r4, r4, #2
   12e2c:	str	r3, [sp, #44]	; 0x2c
   12e30:	b	12c0c <__assert_fail@plt+0x1c78>
   12e34:	mov	r3, #114	; 0x72
   12e38:	ldr	r1, [sp, #32]
   12e3c:	sub	r2, fp, #2
   12e40:	clz	r2, r2
   12e44:	lsr	r2, r2, #5
   12e48:	tst	r2, r1
   12e4c:	beq	12d24 <__assert_fail@plt+0x1d90>
   12e50:	mov	fp, r8
   12e54:	mov	r8, #2
   12e58:	ldr	r3, [sp, #28]
   12e5c:	cmp	r3, #0
   12e60:	movne	r8, #4
   12e64:	ldr	r3, [sp, #164]	; 0xa4
   12e68:	mov	ip, #0
   12e6c:	bic	r3, r3, #2
   12e70:	str	r3, [sp, #4]
   12e74:	ldr	r3, [sp, #76]	; 0x4c
   12e78:	str	r8, [sp]
   12e7c:	str	r3, [sp, #16]
   12e80:	ldr	r3, [sp, #80]	; 0x50
   12e84:	ldr	r2, [sp, #36]	; 0x24
   12e88:	str	r3, [sp, #12]
   12e8c:	mov	r1, sl
   12e90:	ldr	r3, [sp, #24]
   12e94:	mov	r0, fp
   12e98:	str	ip, [sp, #8]
   12e9c:	bl	125bc <__assert_fail@plt+0x1628>
   12ea0:	mov	r4, r0
   12ea4:	ldr	r3, [pc, #1304]	; 133c4 <__assert_fail@plt+0x2430>
   12ea8:	ldr	r2, [sp, #116]	; 0x74
   12eac:	mov	r0, r4
   12eb0:	ldr	r3, [r3]
   12eb4:	cmp	r2, r3
   12eb8:	bne	13da8 <__assert_fail@plt+0x2e14>
   12ebc:	add	sp, sp, #124	; 0x7c
   12ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ec4:	mov	r5, #110	; 0x6e
   12ec8:	ldr	r3, [sp, #32]
   12ecc:	mov	r2, #0
   12ed0:	cmp	r3, #0
   12ed4:	mov	r6, r2
   12ed8:	beq	12bb4 <__assert_fail@plt+0x1c20>
   12edc:	str	fp, [sp, #160]	; 0xa0
   12ee0:	mov	fp, r8
   12ee4:	ldr	r8, [sp, #160]	; 0xa0
   12ee8:	mov	r3, r2
   12eec:	ldr	r2, [sp, #28]
   12ef0:	and	r2, r2, r3
   12ef4:	str	r2, [sp, #28]
   12ef8:	b	12e58 <__assert_fail@plt+0x1ec4>
   12efc:	mov	r5, #116	; 0x74
   12f00:	b	12ec8 <__assert_fail@plt+0x1f34>
   12f04:	mov	r5, #102	; 0x66
   12f08:	ldr	r3, [sp, #32]
   12f0c:	cmp	r3, #0
   12f10:	bne	13abc <__assert_fail@plt+0x2b28>
   12f14:	mov	r6, #0
   12f18:	b	12bf8 <__assert_fail@plt+0x1c64>
   12f1c:	mov	r5, #118	; 0x76
   12f20:	b	12f08 <__assert_fail@plt+0x1f74>
   12f24:	mov	r7, #0
   12f28:	mov	r6, #0
   12f2c:	b	12b68 <__assert_fail@plt+0x1bd4>
   12f30:	ldr	r3, [sp, #32]
   12f34:	cmp	r3, #0
   12f38:	bne	13d00 <__assert_fail@plt+0x2d6c>
   12f3c:	mov	r7, r3
   12f40:	ldr	r3, [sp, #44]	; 0x2c
   12f44:	sub	r2, fp, #2
   12f48:	eor	r3, r3, #1
   12f4c:	clz	r2, r2
   12f50:	lsr	r2, r2, #5
   12f54:	ands	r3, r2, r3
   12f58:	beq	139a0 <__assert_fail@plt+0x2a0c>
   12f5c:	cmp	sl, r4
   12f60:	movhi	r1, #39	; 0x27
   12f64:	strbhi	r1, [r8, r4]
   12f68:	add	r1, r4, #1
   12f6c:	cmp	sl, r1
   12f70:	movhi	r0, #36	; 0x24
   12f74:	strbhi	r0, [r8, r1]
   12f78:	add	r1, r4, #2
   12f7c:	cmp	sl, r1
   12f80:	movhi	r0, #39	; 0x27
   12f84:	strbhi	r0, [r8, r1]
   12f88:	add	r1, r4, #3
   12f8c:	cmp	sl, r1
   12f90:	bls	13a00 <__assert_fail@plt+0x2a6c>
   12f94:	mov	r4, r1
   12f98:	mov	r1, #92	; 0x5c
   12f9c:	strb	r1, [r8, r4]
   12fa0:	mov	r1, r4
   12fa4:	str	r3, [sp, #44]	; 0x2c
   12fa8:	cmp	fp, #2
   12fac:	add	r4, r4, #1
   12fb0:	beq	13a48 <__assert_fail@plt+0x2ab4>
   12fb4:	ldr	r0, [sp, #24]
   12fb8:	add	r3, r9, #1
   12fbc:	cmp	r3, r0
   12fc0:	bcs	12fd8 <__assert_fail@plt+0x2044>
   12fc4:	ldr	r0, [sp, #36]	; 0x24
   12fc8:	ldrb	r3, [r0, r3]
   12fcc:	sub	r3, r3, #48	; 0x30
   12fd0:	cmp	r3, #9
   12fd4:	bls	13a58 <__assert_fail@plt+0x2ac4>
   12fd8:	mov	r5, #48	; 0x30
   12fdc:	ldr	r3, [sp, #28]
   12fe0:	eor	r3, r3, #1
   12fe4:	orrs	r2, r2, r3
   12fe8:	mov	r3, r6
   12fec:	moveq	r6, r2
   12ff0:	beq	12b6c <__assert_fail@plt+0x1bd8>
   12ff4:	mov	r6, #0
   12ff8:	b	12b94 <__assert_fail@plt+0x1c00>
   12ffc:	mov	r2, #0
   13000:	mov	r6, r2
   13004:	mov	r5, #98	; 0x62
   13008:	b	12bb4 <__assert_fail@plt+0x1c20>
   1300c:	mov	r5, #97	; 0x61
   13010:	b	12f14 <__assert_fail@plt+0x1f80>
   13014:	mov	r3, r7
   13018:	mov	r6, r7
   1301c:	mov	r2, #0
   13020:	mov	r7, r3
   13024:	mov	r5, #32
   13028:	b	12b4c <__assert_fail@plt+0x1bb8>
   1302c:	cmp	r9, #0
   13030:	mov	r3, r7
   13034:	bne	135fc <__assert_fail@plt+0x2668>
   13038:	mov	r6, r7
   1303c:	mov	r2, r9
   13040:	mov	r7, r3
   13044:	b	12b4c <__assert_fail@plt+0x1bb8>
   13048:	mov	r6, r7
   1304c:	b	12b68 <__assert_fail@plt+0x1bd4>
   13050:	mov	r7, #0
   13054:	ldr	r3, [sp, #64]	; 0x40
   13058:	cmp	r3, #1
   1305c:	bne	136b8 <__assert_fail@plt+0x2724>
   13060:	bl	10e8c <__ctype_b_loc@plt>
   13064:	ldr	r2, [sp, #64]	; 0x40
   13068:	sxth	r3, r5
   1306c:	mov	ip, r2
   13070:	lsl	r3, r3, #1
   13074:	ldr	r2, [r0]
   13078:	ldrh	r3, [r2, r3]
   1307c:	and	r3, r3, #16384	; 0x4000
   13080:	cmp	r3, #0
   13084:	ldr	r3, [sp, #28]
   13088:	movne	r6, #1
   1308c:	moveq	r6, #0
   13090:	movne	r2, #0
   13094:	andeq	r2, r3, #1
   13098:	cmp	r2, #0
   1309c:	bne	139c8 <__assert_fail@plt+0x2a34>
   130a0:	sub	r2, fp, #2
   130a4:	clz	r2, r2
   130a8:	lsr	r2, r2, #5
   130ac:	b	12b4c <__assert_fail@plt+0x1bb8>
   130b0:	cmp	r4, #0
   130b4:	bne	13d74 <__assert_fail@plt+0x2de0>
   130b8:	str	r4, [sp, #28]
   130bc:	cmp	sl, #0
   130c0:	bne	13db8 <__assert_fail@plt+0x2e24>
   130c4:	ldr	r3, [pc, #772]	; 133d0 <__assert_fail@plt+0x243c>
   130c8:	mov	r4, #1
   130cc:	str	r4, [sp, #40]	; 0x28
   130d0:	str	r3, [sp, #60]	; 0x3c
   130d4:	str	r4, [sp, #52]	; 0x34
   130d8:	str	sl, [sp, #72]	; 0x48
   130dc:	str	sl, [sp, #68]	; 0x44
   130e0:	str	sl, [sp, #44]	; 0x2c
   130e4:	str	sl, [sp, #32]
   130e8:	mov	r8, #2
   130ec:	b	126b4 <__assert_fail@plt+0x1720>
   130f0:	ldr	r3, [sp, #36]	; 0x24
   130f4:	ldrb	r5, [r3, r9]
   130f8:	cmp	r5, #126	; 0x7e
   130fc:	ldrls	pc, [pc, r5, lsl #2]
   13100:	b	13054 <__assert_fail@plt+0x20c0>
   13104:	andeq	r3, r1, r8, lsr r3
   13108:	andeq	r3, r1, r4, asr r0
   1310c:	andeq	r3, r1, r4, asr r0
   13110:	andeq	r3, r1, r4, asr r0
   13114:	andeq	r3, r1, r4, asr r0
   13118:	andeq	r3, r1, r4, asr r0
   1311c:	andeq	r3, r1, r4, asr r0
   13120:	andeq	r3, r1, r4, lsr #6
   13124:	andeq	r3, r1, r0, lsl r3
   13128:	andeq	r3, r1, r8, lsl #6
   1312c:	andeq	r3, r1, r0, lsl #6
   13130:			; <UNDEFINED> instruction: 0x000133b0
   13134:	muleq	r1, ip, r3
   13138:	andeq	r2, r1, r4, lsr lr
   1313c:	andeq	r3, r1, r4, asr r0
   13140:	andeq	r3, r1, r4, asr r0
   13144:	andeq	r3, r1, r4, asr r0
   13148:	andeq	r3, r1, r4, asr r0
   1314c:	andeq	r3, r1, r4, asr r0
   13150:	andeq	r3, r1, r4, asr r0
   13154:	andeq	r3, r1, r4, asr r0
   13158:	andeq	r3, r1, r4, asr r0
   1315c:	andeq	r3, r1, r4, asr r0
   13160:	andeq	r3, r1, r4, asr r0
   13164:	andeq	r3, r1, r4, asr r0
   13168:	andeq	r3, r1, r4, asr r0
   1316c:	andeq	r3, r1, r4, asr r0
   13170:	andeq	r3, r1, r4, asr r0
   13174:	andeq	r3, r1, r4, asr r0
   13178:	andeq	r3, r1, r4, asr r0
   1317c:	andeq	r3, r1, r4, asr r0
   13180:	andeq	r3, r1, r4, asr r0
   13184:	andeq	r3, r1, ip, lsl #7
   13188:	andeq	r3, r1, r8, ror r3
   1318c:	andeq	r3, r1, r8, ror r3
   13190:	andeq	r3, r1, r8, ror #6
   13194:	andeq	r3, r1, r8, ror r3
   13198:	andeq	r3, r1, r0, lsr #1
   1319c:	andeq	r3, r1, r8, ror r3
   131a0:	andeq	r2, r1, r8, ror #26
   131a4:	andeq	r3, r1, r8, ror r3
   131a8:	andeq	r3, r1, r8, ror r3
   131ac:	andeq	r3, r1, r8, ror r3
   131b0:	andeq	r3, r1, r0, lsr #1
   131b4:	andeq	r3, r1, r0, lsr #1
   131b8:	andeq	r3, r1, r0, lsr #1
   131bc:	andeq	r3, r1, r0, lsr #1
   131c0:	andeq	r3, r1, r0, lsr #1
   131c4:	andeq	r3, r1, r0, lsr #1
   131c8:	andeq	r3, r1, r0, lsr #1
   131cc:	andeq	r3, r1, r0, lsr #1
   131d0:	andeq	r3, r1, r0, lsr #1
   131d4:	andeq	r3, r1, r0, lsr #1
   131d8:	andeq	r3, r1, r0, lsr #1
   131dc:	andeq	r3, r1, r0, lsr #1
   131e0:	andeq	r3, r1, r0, lsr #1
   131e4:	andeq	r3, r1, r0, lsr #1
   131e8:	andeq	r3, r1, r0, lsr #1
   131ec:	andeq	r3, r1, r0, lsr #1
   131f0:	andeq	r3, r1, r8, ror r3
   131f4:	andeq	r3, r1, r8, ror r3
   131f8:	andeq	r3, r1, r8, ror r3
   131fc:	andeq	r3, r1, r8, ror r3
   13200:	andeq	r2, r1, ip, lsr sp
   13204:	andeq	r3, r1, r4, asr r0
   13208:	andeq	r3, r1, r0, lsr #1
   1320c:	andeq	r3, r1, r0, lsr #1
   13210:	andeq	r3, r1, r0, lsr #1
   13214:	andeq	r3, r1, r0, lsr #1
   13218:	andeq	r3, r1, r0, lsr #1
   1321c:	andeq	r3, r1, r0, lsr #1
   13220:	andeq	r3, r1, r0, lsr #1
   13224:	andeq	r3, r1, r0, lsr #1
   13228:	andeq	r3, r1, r0, lsr #1
   1322c:	andeq	r3, r1, r0, lsr #1
   13230:	andeq	r3, r1, r0, lsr #1
   13234:	andeq	r3, r1, r0, lsr #1
   13238:	andeq	r3, r1, r0, lsr #1
   1323c:	andeq	r3, r1, r0, lsr #1
   13240:	andeq	r3, r1, r0, lsr #1
   13244:	andeq	r3, r1, r0, lsr #1
   13248:	andeq	r3, r1, r0, lsr #1
   1324c:	andeq	r3, r1, r0, lsr #1
   13250:	andeq	r3, r1, r0, lsr #1
   13254:	andeq	r3, r1, r0, lsr #1
   13258:	andeq	r3, r1, r0, lsr #1
   1325c:	andeq	r3, r1, r0, lsr #1
   13260:	andeq	r3, r1, r0, lsr #1
   13264:	andeq	r3, r1, r0, lsr #1
   13268:	andeq	r3, r1, r0, lsr #1
   1326c:	andeq	r3, r1, r0, lsr #1
   13270:	andeq	r3, r1, r8, ror r3
   13274:	strdeq	r2, [r1], -r4
   13278:	andeq	r3, r1, r0, lsr #1
   1327c:	andeq	r3, r1, r8, ror r3
   13280:	andeq	r3, r1, r0, lsr #1
   13284:	andeq	r3, r1, r8, ror r3
   13288:	andeq	r3, r1, r0, lsr #1
   1328c:	andeq	r3, r1, r0, lsr #1
   13290:	andeq	r3, r1, r0, lsr #1
   13294:	andeq	r3, r1, r0, lsr #1
   13298:	andeq	r3, r1, r0, lsr #1
   1329c:	andeq	r3, r1, r0, lsr #1
   132a0:	andeq	r3, r1, r0, lsr #1
   132a4:	andeq	r3, r1, r0, lsr #1
   132a8:	andeq	r3, r1, r0, lsr #1
   132ac:	andeq	r3, r1, r0, lsr #1
   132b0:	andeq	r3, r1, r0, lsr #1
   132b4:	andeq	r3, r1, r0, lsr #1
   132b8:	andeq	r3, r1, r0, lsr #1
   132bc:	andeq	r3, r1, r0, lsr #1
   132c0:	andeq	r3, r1, r0, lsr #1
   132c4:	andeq	r3, r1, r0, lsr #1
   132c8:	andeq	r3, r1, r0, lsr #1
   132cc:	andeq	r3, r1, r0, lsr #1
   132d0:	andeq	r3, r1, r0, lsr #1
   132d4:	andeq	r3, r1, r0, lsr #1
   132d8:	andeq	r3, r1, r0, lsr #1
   132dc:	andeq	r3, r1, r0, lsr #1
   132e0:	andeq	r3, r1, r0, lsr #1
   132e4:	andeq	r3, r1, r0, lsr #1
   132e8:	andeq	r3, r1, r0, lsr #1
   132ec:	andeq	r3, r1, r0, lsr #1
   132f0:	andeq	r2, r1, ip, lsl #22
   132f4:	andeq	r3, r1, r8, ror r3
   132f8:	andeq	r2, r1, ip, lsl #22
   132fc:	andeq	r3, r1, r8, ror #6
   13300:	mov	r3, #110	; 0x6e
   13304:	b	12e38 <__assert_fail@plt+0x1ea4>
   13308:	mov	r3, #116	; 0x74
   1330c:	b	12e38 <__assert_fail@plt+0x1ea4>
   13310:	sub	r2, fp, #2
   13314:	mov	r3, #98	; 0x62
   13318:	clz	r2, r2
   1331c:	lsr	r2, r2, #5
   13320:	b	12d24 <__assert_fail@plt+0x1d90>
   13324:	sub	r2, fp, #2
   13328:	mov	r3, #97	; 0x61
   1332c:	clz	r2, r2
   13330:	lsr	r2, r2, #5
   13334:	b	12d24 <__assert_fail@plt+0x1d90>
   13338:	ldr	r3, [sp, #28]
   1333c:	cmp	r3, #0
   13340:	bne	12f30 <__assert_fail@plt+0x1f9c>
   13344:	ldr	r3, [sp, #164]	; 0xa4
   13348:	tst	r3, #1
   1334c:	bne	139c0 <__assert_fail@plt+0x2a2c>
   13350:	ldr	r6, [sp, #28]
   13354:	sub	r2, fp, #2
   13358:	mov	r7, r6
   1335c:	clz	r2, r2
   13360:	lsr	r2, r2, #5
   13364:	b	12b4c <__assert_fail@plt+0x1bb8>
   13368:	sub	r2, fp, #2
   1336c:	clz	r2, r2
   13370:	lsr	r2, r2, #5
   13374:	b	12b38 <__assert_fail@plt+0x1ba4>
   13378:	sub	r2, fp, #2
   1337c:	mov	r6, #0
   13380:	clz	r2, r2
   13384:	lsr	r2, r2, #5
   13388:	b	12b40 <__assert_fail@plt+0x1bac>
   1338c:	sub	r2, fp, #2
   13390:	clz	r2, r2
   13394:	lsr	r2, r2, #5
   13398:	b	12b40 <__assert_fail@plt+0x1bac>
   1339c:	sub	r2, fp, #2
   133a0:	mov	r3, #102	; 0x66
   133a4:	clz	r2, r2
   133a8:	lsr	r2, r2, #5
   133ac:	b	12d24 <__assert_fail@plt+0x1d90>
   133b0:	sub	r2, fp, #2
   133b4:	mov	r3, #118	; 0x76
   133b8:	clz	r2, r2
   133bc:	lsr	r2, r2, #5
   133c0:	b	12d24 <__assert_fail@plt+0x1d90>
   133c4:	andeq	r6, r2, r8, lsl #30
   133c8:	andeq	r6, r1, ip, asr #14
   133cc:	andeq	r6, r1, r4, lsr r7
   133d0:	andeq	r6, r1, r8, asr #14
   133d4:	ldr	r3, [sp, #48]	; 0x30
   133d8:	ldrb	r5, [r3]
   133dc:	cmp	r5, #126	; 0x7e
   133e0:	ldrls	pc, [pc, r5, lsl #2]
   133e4:	b	13050 <__assert_fail@plt+0x20bc>
   133e8:	andeq	r2, r1, r0, lsr pc
   133ec:	andeq	r3, r1, r0, asr r0
   133f0:	andeq	r3, r1, r0, asr r0
   133f4:	andeq	r3, r1, r0, asr r0
   133f8:	andeq	r3, r1, r0, asr r0
   133fc:	andeq	r3, r1, r0, asr r0
   13400:	andeq	r3, r1, r0, asr r0
   13404:	andeq	r3, r1, r8, lsr #12
   13408:	andeq	r3, r1, r0, lsr #12
   1340c:	strdeq	r2, [r1], -ip
   13410:	andeq	r2, r1, r4, asr #29
   13414:	andeq	r2, r1, ip, lsl pc
   13418:	andeq	r2, r1, r4, lsl #30
   1341c:	andeq	r3, r1, r4, lsl r6
   13420:	andeq	r3, r1, r0, asr r0
   13424:	andeq	r3, r1, r0, asr r0
   13428:	andeq	r3, r1, r0, asr r0
   1342c:	andeq	r3, r1, r0, asr r0
   13430:	andeq	r3, r1, r0, asr r0
   13434:	andeq	r3, r1, r0, asr r0
   13438:	andeq	r3, r1, r0, asr r0
   1343c:	andeq	r3, r1, r0, asr r0
   13440:	andeq	r3, r1, r0, asr r0
   13444:	andeq	r3, r1, r0, asr r0
   13448:	andeq	r3, r1, r0, asr r0
   1344c:	andeq	r3, r1, r0, asr r0
   13450:	andeq	r3, r1, r0, asr r0
   13454:	andeq	r3, r1, r0, asr r0
   13458:	andeq	r3, r1, r0, asr r0
   1345c:	andeq	r3, r1, r0, asr r0
   13460:	andeq	r3, r1, r0, asr r0
   13464:	andeq	r3, r1, r0, asr r0
   13468:	andeq	r3, r1, ip, lsl #12
   1346c:	andeq	r2, r1, r4, lsr #30
   13470:	andeq	r2, r1, r4, lsr #30
   13474:	strdeq	r3, [r1], -r0
   13478:	andeq	r2, r1, r4, lsr #30
   1347c:	andeq	r3, r1, r4, ror #11
   13480:	andeq	r2, r1, r4, lsr #30
   13484:	andeq	r2, r1, r4, ror #26
   13488:	andeq	r2, r1, r4, lsr #30
   1348c:	andeq	r2, r1, r4, lsr #30
   13490:	andeq	r2, r1, r4, lsr #30
   13494:	andeq	r3, r1, r4, ror #11
   13498:	andeq	r3, r1, r4, ror #11
   1349c:	andeq	r3, r1, r4, ror #11
   134a0:	andeq	r3, r1, r4, ror #11
   134a4:	andeq	r3, r1, r4, ror #11
   134a8:	andeq	r3, r1, r4, ror #11
   134ac:	andeq	r3, r1, r4, ror #11
   134b0:	andeq	r3, r1, r4, ror #11
   134b4:	andeq	r3, r1, r4, ror #11
   134b8:	andeq	r3, r1, r4, ror #11
   134bc:	andeq	r3, r1, r4, ror #11
   134c0:	andeq	r3, r1, r4, ror #11
   134c4:	andeq	r3, r1, r4, ror #11
   134c8:	andeq	r3, r1, r4, ror #11
   134cc:	andeq	r3, r1, r4, ror #11
   134d0:	andeq	r3, r1, r4, ror #11
   134d4:	andeq	r2, r1, r4, lsr #30
   134d8:	andeq	r2, r1, r4, lsr #30
   134dc:	andeq	r2, r1, r4, lsr #30
   134e0:	andeq	r2, r1, r4, lsr #30
   134e4:	andeq	r2, r1, r8, lsr sp
   134e8:	andeq	r3, r1, r0, asr r0
   134ec:	andeq	r3, r1, r4, ror #11
   134f0:	andeq	r3, r1, r4, ror #11
   134f4:	andeq	r3, r1, r4, ror #11
   134f8:	andeq	r3, r1, r4, ror #11
   134fc:	andeq	r3, r1, r4, ror #11
   13500:	andeq	r3, r1, r4, ror #11
   13504:	andeq	r3, r1, r4, ror #11
   13508:	andeq	r3, r1, r4, ror #11
   1350c:	andeq	r3, r1, r4, ror #11
   13510:	andeq	r3, r1, r4, ror #11
   13514:	andeq	r3, r1, r4, ror #11
   13518:	andeq	r3, r1, r4, ror #11
   1351c:	andeq	r3, r1, r4, ror #11
   13520:	andeq	r3, r1, r4, ror #11
   13524:	andeq	r3, r1, r4, ror #11
   13528:	andeq	r3, r1, r4, ror #11
   1352c:	andeq	r3, r1, r4, ror #11
   13530:	andeq	r3, r1, r4, ror #11
   13534:	andeq	r3, r1, r4, ror #11
   13538:	andeq	r3, r1, r4, ror #11
   1353c:	andeq	r3, r1, r4, ror #11
   13540:	andeq	r3, r1, r4, ror #11
   13544:	andeq	r3, r1, r4, ror #11
   13548:	andeq	r3, r1, r4, ror #11
   1354c:	andeq	r3, r1, r4, ror #11
   13550:	andeq	r3, r1, r4, ror #11
   13554:	andeq	r2, r1, r4, lsr #30
   13558:	strdeq	r2, [r1], -r0
   1355c:	andeq	r3, r1, r4, ror #11
   13560:	andeq	r2, r1, r4, lsr #30
   13564:	andeq	r3, r1, r4, ror #11
   13568:	andeq	r2, r1, r4, lsr #30
   1356c:	andeq	r3, r1, r4, ror #11
   13570:	andeq	r3, r1, r4, ror #11
   13574:	andeq	r3, r1, r4, ror #11
   13578:	andeq	r3, r1, r4, ror #11
   1357c:	andeq	r3, r1, r4, ror #11
   13580:	andeq	r3, r1, r4, ror #11
   13584:	andeq	r3, r1, r4, ror #11
   13588:	andeq	r3, r1, r4, ror #11
   1358c:	andeq	r3, r1, r4, ror #11
   13590:	andeq	r3, r1, r4, ror #11
   13594:	andeq	r3, r1, r4, ror #11
   13598:	andeq	r3, r1, r4, ror #11
   1359c:	andeq	r3, r1, r4, ror #11
   135a0:	andeq	r3, r1, r4, ror #11
   135a4:	andeq	r3, r1, r4, ror #11
   135a8:	andeq	r3, r1, r4, ror #11
   135ac:	andeq	r3, r1, r4, ror #11
   135b0:	andeq	r3, r1, r4, ror #11
   135b4:	andeq	r3, r1, r4, ror #11
   135b8:	andeq	r3, r1, r4, ror #11
   135bc:	andeq	r3, r1, r4, ror #11
   135c0:	andeq	r3, r1, r4, ror #11
   135c4:	andeq	r3, r1, r4, ror #11
   135c8:	andeq	r3, r1, r4, ror #11
   135cc:	andeq	r3, r1, r4, ror #11
   135d0:	andeq	r3, r1, r4, ror #11
   135d4:	andeq	r2, r1, r8, lsl #22
   135d8:	andeq	r2, r1, r4, lsr #30
   135dc:	andeq	r2, r1, r8, lsl #22
   135e0:	strdeq	r3, [r1], -r0
   135e4:	mov	r6, r7
   135e8:	mov	r7, #0
   135ec:	b	12b68 <__assert_fail@plt+0x1bd4>
   135f0:	cmp	r9, #0
   135f4:	mov	r3, #0
   135f8:	beq	13038 <__assert_fail@plt+0x20a4>
   135fc:	mov	r6, #0
   13600:	mov	r7, r3
   13604:	mov	r3, r6
   13608:	b	12b6c <__assert_fail@plt+0x1bd8>
   1360c:	mov	r3, #0
   13610:	b	13018 <__assert_fail@plt+0x2084>
   13614:	mov	r7, #0
   13618:	mov	r3, #114	; 0x72
   1361c:	b	12e38 <__assert_fail@plt+0x1ea4>
   13620:	mov	r5, #98	; 0x62
   13624:	b	12ec8 <__assert_fail@plt+0x1f34>
   13628:	mov	r5, #97	; 0x61
   1362c:	b	12f08 <__assert_fail@plt+0x1f74>
   13630:	ldr	r3, [sp, #32]
   13634:	cmp	r3, #0
   13638:	bne	13a80 <__assert_fail@plt+0x2aec>
   1363c:	add	r9, r9, #1
   13640:	ldr	r3, [sp, #44]	; 0x2c
   13644:	mov	r6, #0
   13648:	mov	r5, #92	; 0x5c
   1364c:	b	12e00 <__assert_fail@plt+0x1e6c>
   13650:	ldr	r3, [sp, #36]	; 0x24
   13654:	ldrb	r3, [r3, #1]
   13658:	adds	r3, r3, #0
   1365c:	movne	r3, #1
   13660:	b	12b24 <__assert_fail@plt+0x1b90>
   13664:	ldr	r3, [sp, #164]	; 0xa4
   13668:	ands	r3, r3, #4
   1366c:	beq	13690 <__assert_fail@plt+0x26fc>
   13670:	ldr	r2, [sp, #24]
   13674:	add	r3, r9, #2
   13678:	cmp	r3, r2
   1367c:	bcs	13690 <__assert_fail@plt+0x26fc>
   13680:	ldr	r2, [sp, #48]	; 0x30
   13684:	ldrb	r5, [r2, #1]
   13688:	cmp	r5, #63	; 0x3f
   1368c:	beq	13af4 <__assert_fail@plt+0x2b60>
   13690:	mov	r2, #0
   13694:	mov	r6, r2
   13698:	mov	r5, #63	; 0x3f
   1369c:	b	12b4c <__assert_fail@plt+0x1bb8>
   136a0:	ldr	r3, [sp, #32]
   136a4:	cmp	r3, #0
   136a8:	bne	13a80 <__assert_fail@plt+0x2aec>
   136ac:	mov	r6, r3
   136b0:	mov	r5, #63	; 0x3f
   136b4:	b	12b94 <__assert_fail@plt+0x1c00>
   136b8:	ldr	r3, [sp, #24]
   136bc:	cmn	r3, #1
   136c0:	mov	r3, #0
   136c4:	str	r3, [sp, #108]	; 0x6c
   136c8:	str	r3, [sp, #112]	; 0x70
   136cc:	bne	136dc <__assert_fail@plt+0x2748>
   136d0:	ldr	r0, [sp, #36]	; 0x24
   136d4:	bl	10ea4 <strlen@plt>
   136d8:	str	r0, [sp, #24]
   136dc:	mov	r3, #0
   136e0:	str	sl, [sp, #88]	; 0x58
   136e4:	ldr	sl, [sp, #36]	; 0x24
   136e8:	str	r5, [sp, #92]	; 0x5c
   136ec:	mov	r5, r3
   136f0:	str	r7, [sp, #96]	; 0x60
   136f4:	str	r4, [sp, #100]	; 0x64
   136f8:	str	r8, [sp, #84]	; 0x54
   136fc:	ldr	r3, [sp, #24]
   13700:	add	r4, r9, r5
   13704:	add	r7, sl, r4
   13708:	sub	r2, r3, r4
   1370c:	mov	r1, r7
   13710:	add	r3, sp, #108	; 0x6c
   13714:	add	r0, sp, #104	; 0x68
   13718:	bl	15af4 <__assert_fail@plt+0x4b60>
   1371c:	subs	r8, r0, #0
   13720:	beq	13770 <__assert_fail@plt+0x27dc>
   13724:	cmn	r8, #1
   13728:	beq	13ad0 <__assert_fail@plt+0x2b3c>
   1372c:	cmn	r8, #2
   13730:	beq	13bf0 <__assert_fail@plt+0x2c5c>
   13734:	ldr	r3, [sp, #32]
   13738:	cmp	fp, #2
   1373c:	movne	r3, #0
   13740:	andeq	r3, r3, #1
   13744:	cmp	r3, #0
   13748:	bne	138d0 <__assert_fail@plt+0x293c>
   1374c:	ldr	r0, [sp, #104]	; 0x68
   13750:	bl	10dfc <iswprint@plt>
   13754:	add	r5, r5, r8
   13758:	cmp	r0, #0
   1375c:	add	r0, sp, #108	; 0x6c
   13760:	moveq	r6, #0
   13764:	bl	10da8 <mbsinit@plt>
   13768:	cmp	r0, #0
   1376c:	beq	136fc <__assert_fail@plt+0x2768>
   13770:	ldr	r3, [sp, #28]
   13774:	mov	ip, r5
   13778:	eor	r2, r6, #1
   1377c:	ldr	r5, [sp, #92]	; 0x5c
   13780:	ldr	r7, [sp, #96]	; 0x60
   13784:	ldr	r4, [sp, #100]	; 0x64
   13788:	ldr	r8, [sp, #84]	; 0x54
   1378c:	ldr	sl, [sp, #88]	; 0x58
   13790:	and	r2, r2, r3
   13794:	cmp	ip, #1
   13798:	bls	13098 <__assert_fail@plt+0x2104>
   1379c:	add	r1, ip, r9
   137a0:	ldr	lr, [sp, #48]	; 0x30
   137a4:	mov	r0, #0
   137a8:	str	r6, [sp, #48]	; 0x30
   137ac:	mov	ip, #39	; 0x27
   137b0:	ldr	r6, [sp, #44]	; 0x2c
   137b4:	b	1386c <__assert_fail@plt+0x28d8>
   137b8:	ldr	r0, [sp, #32]
   137bc:	sub	r3, fp, #2
   137c0:	cmp	r0, #0
   137c4:	clz	r3, r3
   137c8:	lsr	r3, r3, #5
   137cc:	bne	139d4 <__assert_fail@plt+0x2a40>
   137d0:	eor	r0, r6, #1
   137d4:	ands	r3, r3, r0
   137d8:	beq	13808 <__assert_fail@plt+0x2874>
   137dc:	add	r0, r4, #1
   137e0:	cmp	sl, r4
   137e4:	strbhi	ip, [r8, r4]
   137e8:	cmp	sl, r0
   137ec:	movhi	r6, #36	; 0x24
   137f0:	strbhi	r6, [r8, r0]
   137f4:	add	r0, r4, #2
   137f8:	mov	r6, r3
   137fc:	add	r4, r4, #3
   13800:	cmp	sl, r0
   13804:	strbhi	ip, [r8, r0]
   13808:	cmp	sl, r4
   1380c:	movhi	r3, #92	; 0x5c
   13810:	strbhi	r3, [r8, r4]
   13814:	add	r3, r4, #1
   13818:	cmp	sl, r3
   1381c:	lsrhi	r0, r5, #6
   13820:	addhi	r0, r0, #48	; 0x30
   13824:	strbhi	r0, [r8, r3]
   13828:	add	r0, r4, #2
   1382c:	cmp	sl, r0
   13830:	lsrhi	r3, r5, #3
   13834:	andhi	r3, r3, #7
   13838:	addhi	r3, r3, #48	; 0x30
   1383c:	add	r9, r9, #1
   13840:	strbhi	r3, [r8, r0]
   13844:	and	r5, r5, #7
   13848:	cmp	r9, r1
   1384c:	add	r5, r5, #48	; 0x30
   13850:	add	r4, r4, #3
   13854:	bcs	139f4 <__assert_fail@plt+0x2a60>
   13858:	mov	r0, r2
   1385c:	cmp	sl, r4
   13860:	strbhi	r5, [r8, r4]
   13864:	ldrb	r5, [lr, #1]!
   13868:	add	r4, r4, #1
   1386c:	cmp	r2, #0
   13870:	bne	137b8 <__assert_fail@plt+0x2824>
   13874:	eor	r3, r0, #1
   13878:	and	r3, r3, r6
   1387c:	cmp	r7, #0
   13880:	uxtb	r3, r3
   13884:	beq	13898 <__assert_fail@plt+0x2904>
   13888:	cmp	sl, r4
   1388c:	movhi	r7, #92	; 0x5c
   13890:	strbhi	r7, [r8, r4]
   13894:	add	r4, r4, #1
   13898:	add	r9, r9, #1
   1389c:	cmp	r9, r1
   138a0:	bcs	139e8 <__assert_fail@plt+0x2a54>
   138a4:	cmp	r3, #0
   138a8:	beq	13a14 <__assert_fail@plt+0x2a80>
   138ac:	cmp	sl, r4
   138b0:	add	r3, r4, #1
   138b4:	strbhi	ip, [r8, r4]
   138b8:	mov	r7, #0
   138bc:	cmp	sl, r3
   138c0:	strbhi	ip, [r8, r3]
   138c4:	add	r4, r4, #2
   138c8:	mov	r6, r7
   138cc:	b	1385c <__assert_fail@plt+0x28c8>
   138d0:	cmp	r8, #1
   138d4:	beq	1374c <__assert_fail@plt+0x27b8>
   138d8:	add	r1, r4, #1
   138dc:	add	r3, sl, r8
   138e0:	add	r1, sl, r1
   138e4:	add	r4, r3, r4
   138e8:	ldrb	r3, [r1], #1
   138ec:	sub	r3, r3, #91	; 0x5b
   138f0:	cmp	r3, #33	; 0x21
   138f4:	ldrls	pc, [pc, r3, lsl #2]
   138f8:	b	13984 <__assert_fail@plt+0x29f0>
   138fc:	muleq	r1, r0, r9
   13900:	muleq	r1, r0, r9
   13904:	andeq	r3, r1, r4, lsl #19
   13908:	muleq	r1, r0, r9
   1390c:	andeq	r3, r1, r4, lsl #19
   13910:	muleq	r1, r0, r9
   13914:	andeq	r3, r1, r4, lsl #19
   13918:	andeq	r3, r1, r4, lsl #19
   1391c:	andeq	r3, r1, r4, lsl #19
   13920:	andeq	r3, r1, r4, lsl #19
   13924:	andeq	r3, r1, r4, lsl #19
   13928:	andeq	r3, r1, r4, lsl #19
   1392c:	andeq	r3, r1, r4, lsl #19
   13930:	andeq	r3, r1, r4, lsl #19
   13934:	andeq	r3, r1, r4, lsl #19
   13938:	andeq	r3, r1, r4, lsl #19
   1393c:	andeq	r3, r1, r4, lsl #19
   13940:	andeq	r3, r1, r4, lsl #19
   13944:	andeq	r3, r1, r4, lsl #19
   13948:	andeq	r3, r1, r4, lsl #19
   1394c:	andeq	r3, r1, r4, lsl #19
   13950:	andeq	r3, r1, r4, lsl #19
   13954:	andeq	r3, r1, r4, lsl #19
   13958:	andeq	r3, r1, r4, lsl #19
   1395c:	andeq	r3, r1, r4, lsl #19
   13960:	andeq	r3, r1, r4, lsl #19
   13964:	andeq	r3, r1, r4, lsl #19
   13968:	andeq	r3, r1, r4, lsl #19
   1396c:	andeq	r3, r1, r4, lsl #19
   13970:	andeq	r3, r1, r4, lsl #19
   13974:	andeq	r3, r1, r4, lsl #19
   13978:	andeq	r3, r1, r4, lsl #19
   1397c:	andeq	r3, r1, r4, lsl #19
   13980:	muleq	r1, r0, r9
   13984:	cmp	r4, r1
   13988:	bne	138e8 <__assert_fail@plt+0x2954>
   1398c:	b	1374c <__assert_fail@plt+0x27b8>
   13990:	ldr	fp, [sp, #84]	; 0x54
   13994:	ldr	sl, [sp, #88]	; 0x58
   13998:	mov	r8, #2
   1399c:	b	12e58 <__assert_fail@plt+0x1ec4>
   139a0:	cmp	sl, r4
   139a4:	movls	r1, r4
   139a8:	bls	12fa8 <__assert_fail@plt+0x2014>
   139ac:	ldr	r3, [sp, #44]	; 0x2c
   139b0:	b	12f98 <__assert_fail@plt+0x2004>
   139b4:	str	sl, [sp, #72]	; 0x48
   139b8:	ldr	sl, [sp, #32]
   139bc:	b	12dd0 <__assert_fail@plt+0x1e3c>
   139c0:	add	r9, r9, #1
   139c4:	b	126c4 <__assert_fail@plt+0x1730>
   139c8:	ldr	r2, [sp, #28]
   139cc:	mov	r6, #0
   139d0:	b	1379c <__assert_fail@plt+0x2808>
   139d4:	str	fp, [sp, #160]	; 0xa0
   139d8:	str	r3, [sp, #28]
   139dc:	mov	fp, r8
   139e0:	ldr	r8, [sp, #160]	; 0xa0
   139e4:	b	12e58 <__assert_fail@plt+0x1ec4>
   139e8:	str	r6, [sp, #44]	; 0x2c
   139ec:	ldr	r6, [sp, #48]	; 0x30
   139f0:	b	12e00 <__assert_fail@plt+0x1e6c>
   139f4:	str	r6, [sp, #44]	; 0x2c
   139f8:	ldr	r6, [sp, #48]	; 0x30
   139fc:	b	12c0c <__assert_fail@plt+0x1c78>
   13a00:	add	r4, r4, #4
   13a04:	str	r3, [sp, #44]	; 0x2c
   13a08:	mov	r6, #0
   13a0c:	mov	r5, #48	; 0x30
   13a10:	b	12b94 <__assert_fail@plt+0x1c00>
   13a14:	mov	r7, r3
   13a18:	b	1385c <__assert_fail@plt+0x28c8>
   13a1c:	ldr	r3, [pc, #-1624]	; 133cc <__assert_fail@plt+0x2438>
   13a20:	mov	r4, #1
   13a24:	str	r4, [sp, #40]	; 0x28
   13a28:	str	r4, [sp, #28]
   13a2c:	str	r4, [sp, #52]	; 0x34
   13a30:	str	sl, [sp, #72]	; 0x48
   13a34:	str	sl, [sp, #68]	; 0x44
   13a38:	str	sl, [sp, #44]	; 0x2c
   13a3c:	str	sl, [sp, #32]
   13a40:	str	r3, [sp, #60]	; 0x3c
   13a44:	b	126b4 <__assert_fail@plt+0x1720>
   13a48:	mov	r3, r6
   13a4c:	mov	r5, #48	; 0x30
   13a50:	mov	r6, #0
   13a54:	b	12b94 <__assert_fail@plt+0x1c00>
   13a58:	cmp	sl, r4
   13a5c:	movhi	r3, #48	; 0x30
   13a60:	strbhi	r3, [r8, r4]
   13a64:	add	r3, r1, #2
   13a68:	cmp	sl, r3
   13a6c:	movhi	r0, #48	; 0x30
   13a70:	strbhi	r0, [r8, r3]
   13a74:	add	r4, r1, #3
   13a78:	mov	r5, #48	; 0x30
   13a7c:	b	12fdc <__assert_fail@plt+0x2048>
   13a80:	str	fp, [sp, #160]	; 0xa0
   13a84:	mov	fp, r8
   13a88:	ldr	r8, [sp, #160]	; 0xa0
   13a8c:	b	12e58 <__assert_fail@plt+0x1ec4>
   13a90:	ldr	r2, [sp, #80]	; 0x50
   13a94:	ldrb	r3, [r2]
   13a98:	cmp	r3, #0
   13a9c:	beq	12684 <__assert_fail@plt+0x16f0>
   13aa0:	cmp	sl, r4
   13aa4:	strbhi	r3, [fp, r4]
   13aa8:	ldrb	r3, [r2, #1]!
   13aac:	add	r4, r4, #1
   13ab0:	cmp	r3, #0
   13ab4:	bne	13aa0 <__assert_fail@plt+0x2b0c>
   13ab8:	b	12684 <__assert_fail@plt+0x16f0>
   13abc:	str	fp, [sp, #160]	; 0xa0
   13ac0:	mov	r3, #0
   13ac4:	mov	fp, r8
   13ac8:	ldr	r8, [sp, #160]	; 0xa0
   13acc:	b	12eec <__assert_fail@plt+0x1f58>
   13ad0:	mov	ip, r5
   13ad4:	ldr	r7, [sp, #96]	; 0x60
   13ad8:	ldr	r5, [sp, #92]	; 0x5c
   13adc:	ldr	r4, [sp, #100]	; 0x64
   13ae0:	ldr	r8, [sp, #84]	; 0x54
   13ae4:	ldr	sl, [sp, #88]	; 0x58
   13ae8:	ldr	r2, [sp, #28]
   13aec:	mov	r6, #0
   13af0:	b	13794 <__assert_fail@plt+0x2800>
   13af4:	ldr	r2, [sp, #36]	; 0x24
   13af8:	ldrb	r1, [r2, r3]
   13afc:	sub	r2, r1, #33	; 0x21
   13b00:	cmp	r2, #29
   13b04:	ldrls	pc, [pc, r2, lsl #2]
   13b08:	b	13be4 <__assert_fail@plt+0x2c50>
   13b0c:	andeq	r3, r1, r4, lsl #23
   13b10:	andeq	r3, r1, r4, ror #23
   13b14:	andeq	r3, r1, r4, ror #23
   13b18:	andeq	r3, r1, r4, ror #23
   13b1c:	andeq	r3, r1, r4, ror #23
   13b20:	andeq	r3, r1, r4, ror #23
   13b24:	andeq	r3, r1, r4, lsl #23
   13b28:	andeq	r3, r1, r4, lsl #23
   13b2c:	andeq	r3, r1, r4, lsl #23
   13b30:	andeq	r3, r1, r4, ror #23
   13b34:	andeq	r3, r1, r4, ror #23
   13b38:	andeq	r3, r1, r4, ror #23
   13b3c:	andeq	r3, r1, r4, lsl #23
   13b40:	andeq	r3, r1, r4, ror #23
   13b44:	andeq	r3, r1, r4, lsl #23
   13b48:	andeq	r3, r1, r4, ror #23
   13b4c:	andeq	r3, r1, r4, ror #23
   13b50:	andeq	r3, r1, r4, ror #23
   13b54:	andeq	r3, r1, r4, ror #23
   13b58:	andeq	r3, r1, r4, ror #23
   13b5c:	andeq	r3, r1, r4, ror #23
   13b60:	andeq	r3, r1, r4, ror #23
   13b64:	andeq	r3, r1, r4, ror #23
   13b68:	andeq	r3, r1, r4, ror #23
   13b6c:	andeq	r3, r1, r4, ror #23
   13b70:	andeq	r3, r1, r4, ror #23
   13b74:	andeq	r3, r1, r4, ror #23
   13b78:	andeq	r3, r1, r4, lsl #23
   13b7c:	andeq	r3, r1, r4, lsl #23
   13b80:	andeq	r3, r1, r4, lsl #23
   13b84:	ldr	r2, [sp, #32]
   13b88:	cmp	r2, #0
   13b8c:	bne	13c90 <__assert_fail@plt+0x2cfc>
   13b90:	cmp	sl, r4
   13b94:	movhi	r2, #63	; 0x3f
   13b98:	strbhi	r2, [r8, r4]
   13b9c:	add	r2, r4, #1
   13ba0:	cmp	sl, r2
   13ba4:	movhi	r0, #34	; 0x22
   13ba8:	strbhi	r0, [r8, r2]
   13bac:	add	r2, r4, #2
   13bb0:	cmp	sl, r2
   13bb4:	movhi	r0, #34	; 0x22
   13bb8:	strbhi	r0, [r8, r2]
   13bbc:	add	r2, r4, #3
   13bc0:	cmp	sl, r2
   13bc4:	movhi	r0, #63	; 0x3f
   13bc8:	strbhi	r0, [r8, r2]
   13bcc:	mov	r2, #0
   13bd0:	add	r4, r4, #4
   13bd4:	mov	r5, r1
   13bd8:	mov	r9, r3
   13bdc:	mov	r6, r2
   13be0:	b	12fdc <__assert_fail@plt+0x2048>
   13be4:	mov	r2, #0
   13be8:	mov	r6, r2
   13bec:	b	12b4c <__assert_fail@plt+0x1bb8>
   13bf0:	ldr	r0, [sp, #24]
   13bf4:	mov	r1, r4
   13bf8:	cmp	r1, r0
   13bfc:	mov	r2, r7
   13c00:	mov	r3, r5
   13c04:	mov	ip, r5
   13c08:	ldr	r7, [sp, #96]	; 0x60
   13c0c:	ldr	r5, [sp, #92]	; 0x5c
   13c10:	ldr	r4, [sp, #100]	; 0x64
   13c14:	ldr	r8, [sp, #84]	; 0x54
   13c18:	ldr	sl, [sp, #88]	; 0x58
   13c1c:	bcs	13c50 <__assert_fail@plt+0x2cbc>
   13c20:	ldrb	r6, [r2]
   13c24:	cmp	r6, #0
   13c28:	bne	13c3c <__assert_fail@plt+0x2ca8>
   13c2c:	b	13d6c <__assert_fail@plt+0x2dd8>
   13c30:	ldrb	r6, [r2, #1]!
   13c34:	cmp	r6, #0
   13c38:	beq	13cf4 <__assert_fail@plt+0x2d60>
   13c3c:	add	r3, r3, #1
   13c40:	add	r1, r9, r3
   13c44:	cmp	r1, r0
   13c48:	bcc	13c30 <__assert_fail@plt+0x2c9c>
   13c4c:	mov	ip, r3
   13c50:	ldr	r2, [sp, #28]
   13c54:	mov	r6, #0
   13c58:	b	13794 <__assert_fail@plt+0x2800>
   13c5c:	mov	r3, #1
   13c60:	str	r3, [sp, #40]	; 0x28
   13c64:	str	r3, [sp, #32]
   13c68:	str	r3, [sp, #28]
   13c6c:	str	r3, [sp, #52]	; 0x34
   13c70:	ldr	r3, [pc, #-2220]	; 133cc <__assert_fail@plt+0x2438>
   13c74:	mov	r2, #0
   13c78:	str	r2, [sp, #68]	; 0x44
   13c7c:	str	r2, [sp, #44]	; 0x2c
   13c80:	str	r2, [sp, #72]	; 0x48
   13c84:	mov	r4, r2
   13c88:	str	r3, [sp, #60]	; 0x3c
   13c8c:	b	126b4 <__assert_fail@plt+0x1720>
   13c90:	str	fp, [sp, #160]	; 0xa0
   13c94:	mov	fp, r8
   13c98:	ldr	r8, [sp, #160]	; 0xa0
   13c9c:	b	12e64 <__assert_fail@plt+0x1ed0>
   13ca0:	mov	r2, r3
   13ca4:	ldr	r3, [sp, #60]	; 0x3c
   13ca8:	cmp	r3, #0
   13cac:	moveq	r2, #0
   13cb0:	andne	r2, r2, #1
   13cb4:	cmp	r2, #0
   13cb8:	beq	13ce4 <__assert_fail@plt+0x2d50>
   13cbc:	mov	r2, r3
   13cc0:	ldrb	r3, [r3]
   13cc4:	cmp	r3, #0
   13cc8:	beq	13ce4 <__assert_fail@plt+0x2d50>
   13ccc:	cmp	sl, r4
   13cd0:	strbhi	r3, [fp, r4]
   13cd4:	ldrb	r3, [r2, #1]!
   13cd8:	add	r4, r4, #1
   13cdc:	cmp	r3, #0
   13ce0:	bne	13ccc <__assert_fail@plt+0x2d38>
   13ce4:	cmp	sl, r4
   13ce8:	movhi	r3, #0
   13cec:	strbhi	r3, [fp, r4]
   13cf0:	b	12ea4 <__assert_fail@plt+0x1f10>
   13cf4:	mov	ip, r3
   13cf8:	ldr	r2, [sp, #28]
   13cfc:	b	13794 <__assert_fail@plt+0x2800>
   13d00:	str	fp, [sp, #160]	; 0xa0
   13d04:	mov	fp, r8
   13d08:	ldr	r8, [sp, #160]	; 0xa0
   13d0c:	sub	r3, r8, #2
   13d10:	clz	r3, r3
   13d14:	lsr	r3, r3, #5
   13d18:	str	r3, [sp, #28]
   13d1c:	b	12e58 <__assert_fail@plt+0x1ec4>
   13d20:	ldr	r3, [sp, #76]	; 0x4c
   13d24:	mov	ip, #5
   13d28:	str	r3, [sp, #16]
   13d2c:	ldr	r3, [sp, #80]	; 0x50
   13d30:	ldr	r2, [sp, #36]	; 0x24
   13d34:	str	r3, [sp, #12]
   13d38:	ldr	r3, [sp, #56]	; 0x38
   13d3c:	ldr	r1, [sp, #72]	; 0x48
   13d40:	str	r3, [sp, #8]
   13d44:	ldr	r3, [sp, #164]	; 0xa4
   13d48:	mov	r0, fp
   13d4c:	str	r3, [sp, #4]
   13d50:	str	ip, [sp]
   13d54:	ldr	r3, [sp, #24]
   13d58:	bl	125bc <__assert_fail@plt+0x1628>
   13d5c:	mov	r4, r0
   13d60:	b	12ea4 <__assert_fail@plt+0x1f10>
   13d64:	mov	r8, #2
   13d68:	b	12e58 <__assert_fail@plt+0x1ec4>
   13d6c:	ldr	r2, [sp, #28]
   13d70:	b	13794 <__assert_fail@plt+0x2800>
   13d74:	mov	r3, #0
   13d78:	str	r3, [sp, #68]	; 0x44
   13d7c:	str	r3, [sp, #44]	; 0x2c
   13d80:	str	r3, [sp, #72]	; 0x48
   13d84:	str	r3, [sp, #28]
   13d88:	mov	r4, r3
   13d8c:	ldr	r3, [pc, #-2500]	; 133d0 <__assert_fail@plt+0x243c>
   13d90:	mov	r2, #1
   13d94:	str	r2, [sp, #40]	; 0x28
   13d98:	str	r2, [sp, #32]
   13d9c:	str	r2, [sp, #52]	; 0x34
   13da0:	str	r3, [sp, #60]	; 0x3c
   13da4:	b	126b4 <__assert_fail@plt+0x1720>
   13da8:	bl	10dd8 <__stack_chk_fail@plt>
   13dac:	mov	r5, r3
   13db0:	mov	r6, #0
   13db4:	b	12ba8 <__assert_fail@plt+0x1c14>
   13db8:	mov	r3, #0
   13dbc:	mov	r2, #1
   13dc0:	str	r3, [sp, #44]	; 0x2c
   13dc4:	str	r3, [sp, #72]	; 0x48
   13dc8:	str	r2, [sp, #40]	; 0x28
   13dcc:	b	12cc4 <__assert_fail@plt+0x1d30>
   13dd0:	bl	10f88 <abort@plt>
   13dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd8:	sub	sp, sp, #44	; 0x2c
   13ddc:	mov	r6, r0
   13de0:	mov	r4, r3
   13de4:	mov	sl, r1
   13de8:	mov	fp, r2
   13dec:	bl	10ebc <__errno_location@plt>
   13df0:	ldr	r7, [pc, #364]	; 13f64 <__assert_fail@plt+0x2fd0>
   13df4:	cmp	r6, #0
   13df8:	ldr	r5, [r7]
   13dfc:	ldr	r3, [r0]
   13e00:	str	r3, [sp, #24]
   13e04:	blt	13f60 <__assert_fail@plt+0x2fcc>
   13e08:	ldr	r3, [r7, #4]
   13e0c:	mov	r8, r0
   13e10:	cmp	r3, r6
   13e14:	bgt	13e60 <__assert_fail@plt+0x2ecc>
   13e18:	cmn	r6, #-268435454	; 0xf0000002
   13e1c:	bgt	13f5c <__assert_fail@plt+0x2fc8>
   13e20:	add	r9, r6, #1
   13e24:	add	r3, r7, #8
   13e28:	cmp	r5, r3
   13e2c:	lsl	r1, r9, #3
   13e30:	beq	13f3c <__assert_fail@plt+0x2fa8>
   13e34:	mov	r0, r5
   13e38:	bl	14bc8 <__assert_fail@plt+0x3c34>
   13e3c:	mov	r5, r0
   13e40:	str	r0, [r7]
   13e44:	ldr	r0, [r7, #4]
   13e48:	mov	r1, #0
   13e4c:	sub	r2, r9, r0
   13e50:	add	r0, r5, r0, lsl #3
   13e54:	lsl	r2, r2, #3
   13e58:	bl	10ed4 <memset@plt>
   13e5c:	str	r9, [r7, #4]
   13e60:	add	r3, r5, r6, lsl #3
   13e64:	ldr	r1, [r4, #4]
   13e68:	ldr	r7, [r3, #4]
   13e6c:	ldr	r9, [r5, r6, lsl #3]
   13e70:	ldr	r2, [r4, #40]	; 0x28
   13e74:	ldr	ip, [r4, #44]	; 0x2c
   13e78:	str	r3, [sp, #28]
   13e7c:	ldr	r3, [r4]
   13e80:	orr	r1, r1, #1
   13e84:	add	lr, r4, #8
   13e88:	str	r1, [sp, #36]	; 0x24
   13e8c:	str	r1, [sp, #4]
   13e90:	str	r2, [sp, #12]
   13e94:	str	r3, [sp]
   13e98:	mov	r0, r7
   13e9c:	mov	r1, r9
   13ea0:	str	ip, [sp, #16]
   13ea4:	str	lr, [sp, #8]
   13ea8:	mov	r3, fp
   13eac:	mov	r2, sl
   13eb0:	str	lr, [sp, #32]
   13eb4:	bl	125bc <__assert_fail@plt+0x1628>
   13eb8:	cmp	r9, r0
   13ebc:	bhi	13f28 <__assert_fail@plt+0x2f94>
   13ec0:	ldr	r3, [pc, #160]	; 13f68 <__assert_fail@plt+0x2fd4>
   13ec4:	add	r9, r0, #1
   13ec8:	cmp	r7, r3
   13ecc:	str	r9, [r5, r6, lsl #3]
   13ed0:	beq	13edc <__assert_fail@plt+0x2f48>
   13ed4:	mov	r0, r7
   13ed8:	bl	10d78 <free@plt>
   13edc:	mov	r0, r9
   13ee0:	bl	14b6c <__assert_fail@plt+0x3bd8>
   13ee4:	ldr	lr, [sp, #28]
   13ee8:	ldr	ip, [r4, #44]	; 0x2c
   13eec:	ldr	r5, [r4, #40]	; 0x28
   13ef0:	mov	r3, fp
   13ef4:	mov	r2, sl
   13ef8:	mov	r1, r9
   13efc:	str	r0, [lr, #4]
   13f00:	ldr	lr, [r4]
   13f04:	ldr	r4, [sp, #32]
   13f08:	str	ip, [sp, #16]
   13f0c:	str	r4, [sp, #8]
   13f10:	ldr	r4, [sp, #36]	; 0x24
   13f14:	str	r5, [sp, #12]
   13f18:	str	r4, [sp, #4]
   13f1c:	str	lr, [sp]
   13f20:	mov	r7, r0
   13f24:	bl	125bc <__assert_fail@plt+0x1628>
   13f28:	ldr	r3, [sp, #24]
   13f2c:	mov	r0, r7
   13f30:	str	r3, [r8]
   13f34:	add	sp, sp, #44	; 0x2c
   13f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f3c:	mov	r0, #0
   13f40:	bl	14bc8 <__assert_fail@plt+0x3c34>
   13f44:	ldr	r3, [pc, #32]	; 13f6c <__assert_fail@plt+0x2fd8>
   13f48:	mov	r5, r0
   13f4c:	ldm	r3, {r0, r1}
   13f50:	str	r5, [r7]
   13f54:	stm	r5, {r0, r1}
   13f58:	b	13e44 <__assert_fail@plt+0x2eb0>
   13f5c:	bl	14db4 <__assert_fail@plt+0x3e20>
   13f60:	bl	10f88 <abort@plt>
   13f64:	strdeq	r7, [r2], -r4
   13f68:	andeq	r7, r2, ip, ror #2
   13f6c:	strdeq	r7, [r2], -ip
   13f70:	push	{r4, r5, r6, lr}
   13f74:	mov	r5, r0
   13f78:	bl	10ebc <__errno_location@plt>
   13f7c:	cmp	r5, #0
   13f80:	mov	r1, #48	; 0x30
   13f84:	mov	r4, r0
   13f88:	ldr	r0, [pc, #16]	; 13fa0 <__assert_fail@plt+0x300c>
   13f8c:	ldr	r6, [r4]
   13f90:	movne	r0, r5
   13f94:	bl	14d74 <__assert_fail@plt+0x3de0>
   13f98:	str	r6, [r4]
   13f9c:	pop	{r4, r5, r6, pc}
   13fa0:	andeq	r7, r2, ip, ror #4
   13fa4:	ldr	r3, [pc, #12]	; 13fb8 <__assert_fail@plt+0x3024>
   13fa8:	cmp	r0, #0
   13fac:	moveq	r0, r3
   13fb0:	ldr	r0, [r0]
   13fb4:	bx	lr
   13fb8:	andeq	r7, r2, ip, ror #4
   13fbc:	ldr	r3, [pc, #12]	; 13fd0 <__assert_fail@plt+0x303c>
   13fc0:	cmp	r0, #0
   13fc4:	moveq	r0, r3
   13fc8:	str	r1, [r0]
   13fcc:	bx	lr
   13fd0:	andeq	r7, r2, ip, ror #4
   13fd4:	ldr	r3, [pc, #52]	; 14010 <__assert_fail@plt+0x307c>
   13fd8:	cmp	r0, #0
   13fdc:	moveq	r0, r3
   13fe0:	add	r3, r0, #8
   13fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   13fe8:	lsr	lr, r1, #5
   13fec:	and	r1, r1, #31
   13ff0:	ldr	ip, [r3, lr, lsl #2]
   13ff4:	lsr	r0, ip, r1
   13ff8:	eor	r2, r2, r0
   13ffc:	and	r2, r2, #1
   14000:	and	r0, r0, #1
   14004:	eor	r1, ip, r2, lsl r1
   14008:	str	r1, [r3, lr, lsl #2]
   1400c:	pop	{pc}		; (ldr pc, [sp], #4)
   14010:	andeq	r7, r2, ip, ror #4
   14014:	ldr	r3, [pc, #16]	; 1402c <__assert_fail@plt+0x3098>
   14018:	cmp	r0, #0
   1401c:	movne	r3, r0
   14020:	ldr	r0, [r3, #4]
   14024:	str	r1, [r3, #4]
   14028:	bx	lr
   1402c:	andeq	r7, r2, ip, ror #4
   14030:	ldr	r3, [pc, #44]	; 14064 <__assert_fail@plt+0x30d0>
   14034:	cmp	r0, #0
   14038:	moveq	r0, r3
   1403c:	mov	ip, #10
   14040:	cmp	r2, #0
   14044:	cmpne	r1, #0
   14048:	str	ip, [r0]
   1404c:	beq	1405c <__assert_fail@plt+0x30c8>
   14050:	str	r1, [r0, #40]	; 0x28
   14054:	str	r2, [r0, #44]	; 0x2c
   14058:	bx	lr
   1405c:	push	{r4, lr}
   14060:	bl	10f88 <abort@plt>
   14064:	andeq	r7, r2, ip, ror #4
   14068:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1406c:	sub	sp, sp, #24
   14070:	ldr	ip, [pc, #108]	; 140e4 <__assert_fail@plt+0x3150>
   14074:	ldr	r4, [sp, #56]	; 0x38
   14078:	mov	r9, r2
   1407c:	cmp	r4, #0
   14080:	moveq	r4, ip
   14084:	mov	sl, r3
   14088:	mov	r7, r0
   1408c:	mov	r8, r1
   14090:	bl	10ebc <__errno_location@plt>
   14094:	ldr	r3, [r4, #44]	; 0x2c
   14098:	mov	r1, r8
   1409c:	ldr	r6, [r0]
   140a0:	str	r3, [sp, #16]
   140a4:	ldr	r2, [r4, #40]	; 0x28
   140a8:	add	r3, r4, #8
   140ac:	str	r3, [sp, #8]
   140b0:	str	r2, [sp, #12]
   140b4:	ldr	r2, [r4, #4]
   140b8:	mov	r5, r0
   140bc:	str	r2, [sp, #4]
   140c0:	ldr	ip, [r4]
   140c4:	mov	r3, sl
   140c8:	mov	r2, r9
   140cc:	mov	r0, r7
   140d0:	str	ip, [sp]
   140d4:	bl	125bc <__assert_fail@plt+0x1628>
   140d8:	str	r6, [r5]
   140dc:	add	sp, sp, #24
   140e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140e4:	andeq	r7, r2, ip, ror #4
   140e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ec:	cmp	r3, #0
   140f0:	sub	sp, sp, #44	; 0x2c
   140f4:	ldr	r4, [pc, #192]	; 141bc <__assert_fail@plt+0x3228>
   140f8:	mov	r6, r2
   140fc:	movne	r4, r3
   14100:	mov	r9, r1
   14104:	mov	r8, r0
   14108:	bl	10ebc <__errno_location@plt>
   1410c:	ldr	r3, [r4, #44]	; 0x2c
   14110:	ldr	r5, [r4, #4]
   14114:	add	sl, r4, #8
   14118:	cmp	r6, #0
   1411c:	orreq	r5, r5, #1
   14120:	mov	r1, #0
   14124:	ldr	r2, [r0]
   14128:	str	r3, [sp, #16]
   1412c:	ldr	r3, [r4, #40]	; 0x28
   14130:	stmib	sp, {r5, sl}
   14134:	str	r3, [sp, #12]
   14138:	ldr	r3, [r4]
   1413c:	mov	r7, r0
   14140:	str	r2, [sp, #28]
   14144:	str	r3, [sp]
   14148:	mov	r2, r8
   1414c:	mov	r3, r9
   14150:	mov	r0, r1
   14154:	bl	125bc <__assert_fail@plt+0x1628>
   14158:	add	r1, r0, #1
   1415c:	mov	fp, r0
   14160:	mov	r0, r1
   14164:	str	r1, [sp, #36]	; 0x24
   14168:	bl	14b6c <__assert_fail@plt+0x3bd8>
   1416c:	ldr	r3, [r4, #44]	; 0x2c
   14170:	mov	r2, r8
   14174:	str	r3, [sp, #16]
   14178:	ldr	r3, [r4, #40]	; 0x28
   1417c:	str	r5, [sp, #4]
   14180:	str	r3, [sp, #12]
   14184:	str	sl, [sp, #8]
   14188:	ldr	ip, [r4]
   1418c:	ldr	r1, [sp, #36]	; 0x24
   14190:	mov	r3, r9
   14194:	str	ip, [sp]
   14198:	str	r0, [sp, #32]
   1419c:	bl	125bc <__assert_fail@plt+0x1628>
   141a0:	ldr	r2, [sp, #28]
   141a4:	cmp	r6, #0
   141a8:	str	r2, [r7]
   141ac:	ldr	r0, [sp, #32]
   141b0:	strne	fp, [r6]
   141b4:	add	sp, sp, #44	; 0x2c
   141b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141bc:	andeq	r7, r2, ip, ror #4
   141c0:	mov	r3, r2
   141c4:	mov	r2, #0
   141c8:	b	140e8 <__assert_fail@plt+0x3154>
   141cc:	push	{r4, r5, r6, r7, r8, lr}
   141d0:	ldr	r6, [pc, #112]	; 14248 <__assert_fail@plt+0x32b4>
   141d4:	ldr	r3, [r6, #4]
   141d8:	ldr	r7, [r6]
   141dc:	cmp	r3, #1
   141e0:	ble	14204 <__assert_fail@plt+0x3270>
   141e4:	sub	r5, r7, #8
   141e8:	add	r5, r5, r3, lsl #3
   141ec:	mov	r4, r7
   141f0:	ldr	r0, [r4, #12]
   141f4:	add	r4, r4, #8
   141f8:	bl	10d78 <free@plt>
   141fc:	cmp	r4, r5
   14200:	bne	141f0 <__assert_fail@plt+0x325c>
   14204:	ldr	r0, [r7, #4]
   14208:	ldr	r4, [pc, #60]	; 1424c <__assert_fail@plt+0x32b8>
   1420c:	cmp	r0, r4
   14210:	beq	14224 <__assert_fail@plt+0x3290>
   14214:	bl	10d78 <free@plt>
   14218:	mov	r3, #256	; 0x100
   1421c:	str	r4, [r6, #12]
   14220:	str	r3, [r6, #8]
   14224:	ldr	r4, [pc, #36]	; 14250 <__assert_fail@plt+0x32bc>
   14228:	cmp	r7, r4
   1422c:	beq	1423c <__assert_fail@plt+0x32a8>
   14230:	mov	r0, r7
   14234:	bl	10d78 <free@plt>
   14238:	str	r4, [r6]
   1423c:	mov	r3, #1
   14240:	str	r3, [r6, #4]
   14244:	pop	{r4, r5, r6, r7, r8, pc}
   14248:	strdeq	r7, [r2], -r4
   1424c:	andeq	r7, r2, ip, ror #2
   14250:	strdeq	r7, [r2], -ip
   14254:	ldr	r3, [pc, #4]	; 14260 <__assert_fail@plt+0x32cc>
   14258:	mvn	r2, #0
   1425c:	b	13dd4 <__assert_fail@plt+0x2e40>
   14260:	andeq	r7, r2, ip, ror #4
   14264:	ldr	r3, [pc]	; 1426c <__assert_fail@plt+0x32d8>
   14268:	b	13dd4 <__assert_fail@plt+0x2e40>
   1426c:	andeq	r7, r2, ip, ror #4
   14270:	mov	r1, r0
   14274:	ldr	r3, [pc, #8]	; 14284 <__assert_fail@plt+0x32f0>
   14278:	mvn	r2, #0
   1427c:	mov	r0, #0
   14280:	b	13dd4 <__assert_fail@plt+0x2e40>
   14284:	andeq	r7, r2, ip, ror #4
   14288:	mov	r2, r1
   1428c:	ldr	r3, [pc, #8]	; 1429c <__assert_fail@plt+0x3308>
   14290:	mov	r1, r0
   14294:	mov	r0, #0
   14298:	b	13dd4 <__assert_fail@plt+0x2e40>
   1429c:	andeq	r7, r2, ip, ror #4
   142a0:	push	{r4, r5, r6, lr}
   142a4:	sub	sp, sp, #56	; 0x38
   142a8:	ldr	r4, [pc, #68]	; 142f4 <__assert_fail@plt+0x3360>
   142ac:	mov	r6, r2
   142b0:	mov	r5, r0
   142b4:	ldr	r3, [r4]
   142b8:	add	r0, sp, #4
   142bc:	str	r3, [sp, #52]	; 0x34
   142c0:	bl	1244c <__assert_fail@plt+0x14b8>
   142c4:	add	r3, sp, #4
   142c8:	mvn	r2, #0
   142cc:	mov	r1, r6
   142d0:	mov	r0, r5
   142d4:	bl	13dd4 <__assert_fail@plt+0x2e40>
   142d8:	ldr	r2, [sp, #52]	; 0x34
   142dc:	ldr	r3, [r4]
   142e0:	cmp	r2, r3
   142e4:	bne	142f0 <__assert_fail@plt+0x335c>
   142e8:	add	sp, sp, #56	; 0x38
   142ec:	pop	{r4, r5, r6, pc}
   142f0:	bl	10dd8 <__stack_chk_fail@plt>
   142f4:	andeq	r6, r2, r8, lsl #30
   142f8:	push	{r4, r5, r6, r7, lr}
   142fc:	sub	sp, sp, #60	; 0x3c
   14300:	ldr	r4, [pc, #72]	; 14350 <__assert_fail@plt+0x33bc>
   14304:	mov	r6, r2
   14308:	mov	r7, r3
   1430c:	ldr	ip, [r4]
   14310:	mov	r5, r0
   14314:	add	r0, sp, #4
   14318:	str	ip, [sp, #52]	; 0x34
   1431c:	bl	1244c <__assert_fail@plt+0x14b8>
   14320:	add	r3, sp, #4
   14324:	mov	r2, r7
   14328:	mov	r1, r6
   1432c:	mov	r0, r5
   14330:	bl	13dd4 <__assert_fail@plt+0x2e40>
   14334:	ldr	r2, [sp, #52]	; 0x34
   14338:	ldr	r3, [r4]
   1433c:	cmp	r2, r3
   14340:	bne	1434c <__assert_fail@plt+0x33b8>
   14344:	add	sp, sp, #60	; 0x3c
   14348:	pop	{r4, r5, r6, r7, pc}
   1434c:	bl	10dd8 <__stack_chk_fail@plt>
   14350:	andeq	r6, r2, r8, lsl #30
   14354:	mov	r2, r1
   14358:	mov	r1, r0
   1435c:	mov	r0, #0
   14360:	b	142a0 <__assert_fail@plt+0x330c>
   14364:	mov	r3, r2
   14368:	mov	r2, r1
   1436c:	mov	r1, r0
   14370:	mov	r0, #0
   14374:	b	142f8 <__assert_fail@plt+0x3364>
   14378:	push	{r4, r5, r6, r7, r8, r9, lr}
   1437c:	mov	r4, r2
   14380:	ldr	lr, [pc, #128]	; 14408 <__assert_fail@plt+0x3474>
   14384:	mov	r8, r0
   14388:	mov	r9, r1
   1438c:	ldm	lr!, {r0, r1, r2, r3}
   14390:	sub	sp, sp, #60	; 0x3c
   14394:	add	ip, sp, #4
   14398:	lsr	r6, r4, #5
   1439c:	stmia	ip!, {r0, r1, r2, r3}
   143a0:	add	r7, sp, #12
   143a4:	ldm	lr!, {r0, r1, r2, r3}
   143a8:	and	r4, r4, #31
   143ac:	ldr	r5, [pc, #88]	; 1440c <__assert_fail@plt+0x3478>
   143b0:	stmia	ip!, {r0, r1, r2, r3}
   143b4:	ldm	lr, {r0, r1, r2, r3}
   143b8:	stm	ip, {r0, r1, r2, r3}
   143bc:	mov	r2, r9
   143c0:	ldr	r3, [r7, r6, lsl #2]
   143c4:	ldr	ip, [r5]
   143c8:	mov	r1, r8
   143cc:	mvn	r0, r3, lsr r4
   143d0:	and	r0, r0, #1
   143d4:	str	ip, [sp, #52]	; 0x34
   143d8:	eor	r4, r3, r0, lsl r4
   143dc:	add	r3, sp, #4
   143e0:	mov	r0, #0
   143e4:	str	r4, [r7, r6, lsl #2]
   143e8:	bl	13dd4 <__assert_fail@plt+0x2e40>
   143ec:	ldr	r2, [sp, #52]	; 0x34
   143f0:	ldr	r3, [r5]
   143f4:	cmp	r2, r3
   143f8:	bne	14404 <__assert_fail@plt+0x3470>
   143fc:	add	sp, sp, #60	; 0x3c
   14400:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14404:	bl	10dd8 <__stack_chk_fail@plt>
   14408:	andeq	r7, r2, ip, ror #4
   1440c:	andeq	r6, r2, r8, lsl #30
   14410:	mov	r2, r1
   14414:	mvn	r1, #0
   14418:	b	14378 <__assert_fail@plt+0x33e4>
   1441c:	mov	r2, #58	; 0x3a
   14420:	mvn	r1, #0
   14424:	b	14378 <__assert_fail@plt+0x33e4>
   14428:	mov	r2, #58	; 0x3a
   1442c:	b	14378 <__assert_fail@plt+0x33e4>
   14430:	push	{r4, r5, r6, r7, r8, lr}
   14434:	sub	sp, sp, #104	; 0x68
   14438:	ldr	r5, [pc, #120]	; 144b8 <__assert_fail@plt+0x3524>
   1443c:	mov	r6, r0
   14440:	mov	r0, sp
   14444:	ldr	r3, [r5]
   14448:	mov	r7, r2
   1444c:	str	r3, [sp, #100]	; 0x64
   14450:	bl	1244c <__assert_fail@plt+0x14b8>
   14454:	mov	ip, sp
   14458:	add	lr, sp, #52	; 0x34
   1445c:	ldm	ip!, {r0, r1, r2, r3}
   14460:	stmia	lr!, {r0, r1, r2, r3}
   14464:	ldm	ip!, {r0, r1, r2, r3}
   14468:	ldr	r8, [sp, #64]	; 0x40
   1446c:	stmia	lr!, {r0, r1, r2, r3}
   14470:	mvn	r4, r8
   14474:	ldm	ip, {r0, r1, r2, r3}
   14478:	and	ip, r4, #67108864	; 0x4000000
   1447c:	eor	ip, ip, r8
   14480:	str	ip, [sp, #64]	; 0x40
   14484:	stm	lr, {r0, r1, r2, r3}
   14488:	add	r3, sp, #52	; 0x34
   1448c:	mvn	r2, #0
   14490:	mov	r1, r7
   14494:	mov	r0, r6
   14498:	bl	13dd4 <__assert_fail@plt+0x2e40>
   1449c:	ldr	r2, [sp, #100]	; 0x64
   144a0:	ldr	r3, [r5]
   144a4:	cmp	r2, r3
   144a8:	bne	144b4 <__assert_fail@plt+0x3520>
   144ac:	add	sp, sp, #104	; 0x68
   144b0:	pop	{r4, r5, r6, r7, r8, pc}
   144b4:	bl	10dd8 <__stack_chk_fail@plt>
   144b8:	andeq	r6, r2, r8, lsl #30
   144bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   144c0:	mov	r6, r1
   144c4:	ldr	lr, [pc, #132]	; 14550 <__assert_fail@plt+0x35bc>
   144c8:	mov	r5, r2
   144cc:	mov	r8, r0
   144d0:	mov	r9, r3
   144d4:	ldm	lr!, {r0, r1, r2, r3}
   144d8:	sub	sp, sp, #60	; 0x3c
   144dc:	add	ip, sp, #4
   144e0:	ldr	r4, [pc, #108]	; 14554 <__assert_fail@plt+0x35c0>
   144e4:	stmia	ip!, {r0, r1, r2, r3}
   144e8:	mov	r7, #10
   144ec:	ldm	lr!, {r0, r1, r2, r3}
   144f0:	cmp	r5, #0
   144f4:	cmpne	r6, #0
   144f8:	str	r7, [sp, #4]
   144fc:	stmia	ip!, {r0, r1, r2, r3}
   14500:	ldm	lr, {r0, r1, r2, r3}
   14504:	ldr	lr, [r4]
   14508:	stm	ip, {r0, r1, r2, r3}
   1450c:	str	lr, [sp, #52]	; 0x34
   14510:	beq	1454c <__assert_fail@plt+0x35b8>
   14514:	add	r3, sp, #4
   14518:	ldr	r2, [sp, #88]	; 0x58
   1451c:	mov	r1, r9
   14520:	mov	r0, r8
   14524:	str	r6, [sp, #44]	; 0x2c
   14528:	str	r5, [sp, #48]	; 0x30
   1452c:	bl	13dd4 <__assert_fail@plt+0x2e40>
   14530:	ldr	r2, [sp, #52]	; 0x34
   14534:	ldr	r3, [r4]
   14538:	cmp	r2, r3
   1453c:	bne	14548 <__assert_fail@plt+0x35b4>
   14540:	add	sp, sp, #60	; 0x3c
   14544:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14548:	bl	10dd8 <__stack_chk_fail@plt>
   1454c:	bl	10f88 <abort@plt>
   14550:	andeq	r7, r2, ip, ror #4
   14554:	andeq	r6, r2, r8, lsl #30
   14558:	push	{lr}		; (str lr, [sp, #-4]!)
   1455c:	sub	sp, sp, #12
   14560:	mvn	ip, #0
   14564:	str	ip, [sp]
   14568:	bl	144bc <__assert_fail@plt+0x3528>
   1456c:	add	sp, sp, #12
   14570:	pop	{pc}		; (ldr pc, [sp], #4)
   14574:	push	{lr}		; (str lr, [sp, #-4]!)
   14578:	sub	sp, sp, #12
   1457c:	mvn	ip, #0
   14580:	mov	r3, r2
   14584:	str	ip, [sp]
   14588:	mov	r2, r1
   1458c:	mov	r1, r0
   14590:	mov	r0, #0
   14594:	bl	144bc <__assert_fail@plt+0x3528>
   14598:	add	sp, sp, #12
   1459c:	pop	{pc}		; (ldr pc, [sp], #4)
   145a0:	push	{lr}		; (str lr, [sp, #-4]!)
   145a4:	sub	sp, sp, #12
   145a8:	str	r3, [sp]
   145ac:	mov	r3, r2
   145b0:	mov	r2, r1
   145b4:	mov	r1, r0
   145b8:	mov	r0, #0
   145bc:	bl	144bc <__assert_fail@plt+0x3528>
   145c0:	add	sp, sp, #12
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	ldr	r3, [pc]	; 145d0 <__assert_fail@plt+0x363c>
   145cc:	b	13dd4 <__assert_fail@plt+0x2e40>
   145d0:	andeq	r7, r2, r4, lsl #2
   145d4:	mov	r2, r1
   145d8:	ldr	r3, [pc, #8]	; 145e8 <__assert_fail@plt+0x3654>
   145dc:	mov	r1, r0
   145e0:	mov	r0, #0
   145e4:	b	13dd4 <__assert_fail@plt+0x2e40>
   145e8:	andeq	r7, r2, r4, lsl #2
   145ec:	ldr	r3, [pc, #4]	; 145f8 <__assert_fail@plt+0x3664>
   145f0:	mvn	r2, #0
   145f4:	b	13dd4 <__assert_fail@plt+0x2e40>
   145f8:	andeq	r7, r2, r4, lsl #2
   145fc:	mov	r1, r0
   14600:	ldr	r3, [pc, #8]	; 14610 <__assert_fail@plt+0x367c>
   14604:	mvn	r2, #0
   14608:	mov	r0, #0
   1460c:	b	13dd4 <__assert_fail@plt+0x2e40>
   14610:	andeq	r7, r2, r4, lsl #2
   14614:	push	{r4, r5, r6, lr}
   14618:	sub	sp, sp, #32
   1461c:	cmp	r1, #0
   14620:	mov	r5, r0
   14624:	ldr	r4, [sp, #48]	; 0x30
   14628:	ldr	r6, [sp, #52]	; 0x34
   1462c:	beq	146bc <__assert_fail@plt+0x3728>
   14630:	strd	r2, [sp]
   14634:	mov	r3, r1
   14638:	ldr	r2, [pc, #828]	; 1497c <__assert_fail@plt+0x39e8>
   1463c:	mov	r1, #1
   14640:	bl	10ef8 <__fprintf_chk@plt>
   14644:	mov	r2, #5
   14648:	ldr	r1, [pc, #816]	; 14980 <__assert_fail@plt+0x39ec>
   1464c:	mov	r0, #0
   14650:	bl	10dcc <dcgettext@plt>
   14654:	ldr	r3, [pc, #808]	; 14984 <__assert_fail@plt+0x39f0>
   14658:	ldr	r2, [pc, #808]	; 14988 <__assert_fail@plt+0x39f4>
   1465c:	str	r3, [sp]
   14660:	mov	r1, #1
   14664:	mov	r3, r0
   14668:	mov	r0, r5
   1466c:	bl	10ef8 <__fprintf_chk@plt>
   14670:	ldr	r1, [pc, #788]	; 1498c <__assert_fail@plt+0x39f8>
   14674:	mov	r2, #5
   14678:	mov	r0, #0
   1467c:	bl	10dcc <dcgettext@plt>
   14680:	mov	r1, r5
   14684:	bl	10d30 <fputs_unlocked@plt>
   14688:	cmp	r6, #9
   1468c:	ldrls	pc, [pc, r6, lsl #2]
   14690:	b	1496c <__assert_fail@plt+0x39d8>
   14694:	andeq	r4, r1, r8, ror r9
   14698:	andeq	r4, r1, r0, asr #14
   1469c:	andeq	r4, r1, ip, ror #14
   146a0:	andeq	r4, r1, r0, lsr #15
   146a4:	ldrdeq	r4, [r1], -ip
   146a8:	andeq	r4, r1, ip, lsl r8
   146ac:	andeq	r4, r1, r4, ror #16
   146b0:			; <UNDEFINED> instruction: 0x000148b4
   146b4:	andeq	r4, r1, ip, lsl #18
   146b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146bc:	str	r3, [sp]
   146c0:	mov	r1, #1
   146c4:	mov	r3, r2
   146c8:	ldr	r2, [pc, #704]	; 14990 <__assert_fail@plt+0x39fc>
   146cc:	bl	10ef8 <__fprintf_chk@plt>
   146d0:	b	14644 <__assert_fail@plt+0x36b0>
   146d4:	ldr	r1, [pc, #696]	; 14994 <__assert_fail@plt+0x3a00>
   146d8:	mov	r2, #5
   146dc:	mov	r0, #0
   146e0:	bl	10dcc <dcgettext@plt>
   146e4:	ldr	r2, [r4, #32]
   146e8:	ldr	r3, [r4, #28]
   146ec:	ldr	r1, [r4, #24]
   146f0:	str	r2, [sp, #28]
   146f4:	ldr	r2, [r4, #20]
   146f8:	str	r3, [sp, #24]
   146fc:	ldr	r3, [r4, #16]
   14700:	str	r1, [sp, #20]
   14704:	ldr	r1, [r4, #12]
   14708:	str	r2, [sp, #16]
   1470c:	ldr	r2, [r4, #8]
   14710:	str	r3, [sp, #12]
   14714:	ldr	r3, [r4, #4]
   14718:	str	r1, [sp, #8]
   1471c:	str	r2, [sp, #4]
   14720:	str	r3, [sp]
   14724:	mov	r1, #1
   14728:	ldr	r3, [r4]
   1472c:	mov	r2, r0
   14730:	mov	r0, r5
   14734:	bl	10ef8 <__fprintf_chk@plt>
   14738:	add	sp, sp, #32
   1473c:	pop	{r4, r5, r6, pc}
   14740:	mov	r2, #5
   14744:	ldr	r1, [pc, #588]	; 14998 <__assert_fail@plt+0x3a04>
   14748:	mov	r0, #0
   1474c:	bl	10dcc <dcgettext@plt>
   14750:	ldr	r3, [r4]
   14754:	mov	r1, #1
   14758:	mov	r2, r0
   1475c:	mov	r0, r5
   14760:	add	sp, sp, #32
   14764:	pop	{r4, r5, r6, lr}
   14768:	b	10ef8 <__fprintf_chk@plt>
   1476c:	mov	r2, #5
   14770:	ldr	r1, [pc, #548]	; 1499c <__assert_fail@plt+0x3a08>
   14774:	mov	r0, #0
   14778:	bl	10dcc <dcgettext@plt>
   1477c:	ldr	r2, [r4, #4]
   14780:	ldr	r3, [r4]
   14784:	mov	r1, #1
   14788:	str	r2, [sp, #48]	; 0x30
   1478c:	mov	r2, r0
   14790:	mov	r0, r5
   14794:	add	sp, sp, #32
   14798:	pop	{r4, r5, r6, lr}
   1479c:	b	10ef8 <__fprintf_chk@plt>
   147a0:	mov	r2, #5
   147a4:	ldr	r1, [pc, #500]	; 149a0 <__assert_fail@plt+0x3a0c>
   147a8:	mov	r0, #0
   147ac:	bl	10dcc <dcgettext@plt>
   147b0:	ldr	r2, [r4, #8]
   147b4:	ldr	r3, [r4, #4]
   147b8:	mov	r1, #1
   147bc:	str	r2, [sp, #52]	; 0x34
   147c0:	str	r3, [sp, #48]	; 0x30
   147c4:	ldr	r3, [r4]
   147c8:	mov	r2, r0
   147cc:	mov	r0, r5
   147d0:	add	sp, sp, #32
   147d4:	pop	{r4, r5, r6, lr}
   147d8:	b	10ef8 <__fprintf_chk@plt>
   147dc:	mov	r2, #5
   147e0:	ldr	r1, [pc, #444]	; 149a4 <__assert_fail@plt+0x3a10>
   147e4:	mov	r0, #0
   147e8:	bl	10dcc <dcgettext@plt>
   147ec:	ldr	r1, [r4, #12]
   147f0:	ldr	r2, [r4, #8]
   147f4:	ldr	r3, [r4, #4]
   147f8:	str	r1, [sp, #8]
   147fc:	str	r2, [sp, #4]
   14800:	str	r3, [sp]
   14804:	mov	r1, #1
   14808:	ldr	r3, [r4]
   1480c:	mov	r2, r0
   14810:	mov	r0, r5
   14814:	bl	10ef8 <__fprintf_chk@plt>
   14818:	b	14738 <__assert_fail@plt+0x37a4>
   1481c:	mov	r2, #5
   14820:	ldr	r1, [pc, #384]	; 149a8 <__assert_fail@plt+0x3a14>
   14824:	mov	r0, #0
   14828:	bl	10dcc <dcgettext@plt>
   1482c:	ldr	r3, [r4, #16]
   14830:	ldr	r1, [r4, #12]
   14834:	ldr	r2, [r4, #8]
   14838:	str	r3, [sp, #12]
   1483c:	ldr	r3, [r4, #4]
   14840:	str	r1, [sp, #8]
   14844:	str	r2, [sp, #4]
   14848:	str	r3, [sp]
   1484c:	mov	r1, #1
   14850:	ldr	r3, [r4]
   14854:	mov	r2, r0
   14858:	mov	r0, r5
   1485c:	bl	10ef8 <__fprintf_chk@plt>
   14860:	b	14738 <__assert_fail@plt+0x37a4>
   14864:	mov	r2, #5
   14868:	ldr	r1, [pc, #316]	; 149ac <__assert_fail@plt+0x3a18>
   1486c:	mov	r0, #0
   14870:	bl	10dcc <dcgettext@plt>
   14874:	ldr	r2, [r4, #20]
   14878:	ldr	r3, [r4, #16]
   1487c:	ldr	r1, [r4, #12]
   14880:	str	r2, [sp, #16]
   14884:	ldr	r2, [r4, #8]
   14888:	str	r3, [sp, #12]
   1488c:	ldr	r3, [r4, #4]
   14890:	str	r1, [sp, #8]
   14894:	str	r2, [sp, #4]
   14898:	str	r3, [sp]
   1489c:	mov	r1, #1
   148a0:	ldr	r3, [r4]
   148a4:	mov	r2, r0
   148a8:	mov	r0, r5
   148ac:	bl	10ef8 <__fprintf_chk@plt>
   148b0:	b	14738 <__assert_fail@plt+0x37a4>
   148b4:	mov	r2, #5
   148b8:	ldr	r1, [pc, #240]	; 149b0 <__assert_fail@plt+0x3a1c>
   148bc:	mov	r0, #0
   148c0:	bl	10dcc <dcgettext@plt>
   148c4:	ldr	r1, [r4, #24]
   148c8:	ldr	r2, [r4, #20]
   148cc:	ldr	r3, [r4, #16]
   148d0:	str	r1, [sp, #20]
   148d4:	ldr	r1, [r4, #12]
   148d8:	str	r2, [sp, #16]
   148dc:	ldr	r2, [r4, #8]
   148e0:	str	r3, [sp, #12]
   148e4:	ldr	r3, [r4, #4]
   148e8:	str	r1, [sp, #8]
   148ec:	str	r2, [sp, #4]
   148f0:	str	r3, [sp]
   148f4:	mov	r1, #1
   148f8:	ldr	r3, [r4]
   148fc:	mov	r2, r0
   14900:	mov	r0, r5
   14904:	bl	10ef8 <__fprintf_chk@plt>
   14908:	b	14738 <__assert_fail@plt+0x37a4>
   1490c:	mov	r2, #5
   14910:	ldr	r1, [pc, #156]	; 149b4 <__assert_fail@plt+0x3a20>
   14914:	mov	r0, #0
   14918:	bl	10dcc <dcgettext@plt>
   1491c:	ldr	r3, [r4, #28]
   14920:	ldr	r1, [r4, #24]
   14924:	ldr	r2, [r4, #20]
   14928:	str	r3, [sp, #24]
   1492c:	ldr	r3, [r4, #16]
   14930:	str	r1, [sp, #20]
   14934:	ldr	r1, [r4, #12]
   14938:	str	r2, [sp, #16]
   1493c:	ldr	r2, [r4, #8]
   14940:	str	r3, [sp, #12]
   14944:	ldr	r3, [r4, #4]
   14948:	str	r1, [sp, #8]
   1494c:	str	r2, [sp, #4]
   14950:	str	r3, [sp]
   14954:	mov	r1, #1
   14958:	ldr	r3, [r4]
   1495c:	mov	r2, r0
   14960:	mov	r0, r5
   14964:	bl	10ef8 <__fprintf_chk@plt>
   14968:	b	14738 <__assert_fail@plt+0x37a4>
   1496c:	mov	r2, #5
   14970:	ldr	r1, [pc, #64]	; 149b8 <__assert_fail@plt+0x3a24>
   14974:	b	146dc <__assert_fail@plt+0x3748>
   14978:	bl	10f88 <abort@plt>
   1497c:			; <UNDEFINED> instruction: 0x000167b4
   14980:	andeq	r6, r1, r8, asr #15
   14984:	andeq	r0, r0, r2, ror #15
   14988:	muleq	r1, ip, sl
   1498c:	andeq	r6, r1, ip, asr #15
   14990:	andeq	r6, r1, r0, asr #15
   14994:	andeq	r6, r1, r4, lsr #19
   14998:	muleq	r1, r8, r8
   1499c:	andeq	r6, r1, r8, lsr #17
   149a0:	andeq	r6, r1, r0, asr #17
   149a4:	ldrdeq	r6, [r1], -ip
   149a8:	strdeq	r6, [r1], -ip
   149ac:	andeq	r6, r1, r0, lsr #18
   149b0:	andeq	r6, r1, r8, asr #18
   149b4:	andeq	r6, r1, r4, ror r9
   149b8:	ldrdeq	r6, [r1], -r8
   149bc:	push	{r4, r5, lr}
   149c0:	sub	sp, sp, #12
   149c4:	ldr	r5, [sp, #24]
   149c8:	ldr	ip, [r5]
   149cc:	cmp	ip, #0
   149d0:	beq	149ec <__assert_fail@plt+0x3a58>
   149d4:	mov	lr, r5
   149d8:	mov	ip, #0
   149dc:	ldr	r4, [lr, #4]!
   149e0:	add	ip, ip, #1
   149e4:	cmp	r4, #0
   149e8:	bne	149dc <__assert_fail@plt+0x3a48>
   149ec:	stm	sp, {r5, ip}
   149f0:	bl	14614 <__assert_fail@plt+0x3680>
   149f4:	add	sp, sp, #12
   149f8:	pop	{r4, r5, pc}
   149fc:	push	{r4, r5, r6, lr}
   14a00:	sub	sp, sp, #56	; 0x38
   14a04:	ldr	r6, [pc, #88]	; 14a64 <__assert_fail@plt+0x3ad0>
   14a08:	ldr	r5, [sp, #72]	; 0x48
   14a0c:	add	r4, sp, #8
   14a10:	ldr	ip, [r6]
   14a14:	str	ip, [sp, #52]	; 0x34
   14a18:	mov	ip, #0
   14a1c:	ldr	lr, [r5], #4
   14a20:	cmp	lr, #0
   14a24:	str	lr, [r4, #4]!
   14a28:	beq	14a38 <__assert_fail@plt+0x3aa4>
   14a2c:	add	ip, ip, #1
   14a30:	cmp	ip, #10
   14a34:	bne	14a1c <__assert_fail@plt+0x3a88>
   14a38:	add	lr, sp, #12
   14a3c:	str	ip, [sp, #4]
   14a40:	str	lr, [sp]
   14a44:	bl	14614 <__assert_fail@plt+0x3680>
   14a48:	ldr	r2, [sp, #52]	; 0x34
   14a4c:	ldr	r3, [r6]
   14a50:	cmp	r2, r3
   14a54:	bne	14a60 <__assert_fail@plt+0x3acc>
   14a58:	add	sp, sp, #56	; 0x38
   14a5c:	pop	{r4, r5, r6, pc}
   14a60:	bl	10dd8 <__stack_chk_fail@plt>
   14a64:	andeq	r6, r2, r8, lsl #30
   14a68:	push	{r3}		; (str r3, [sp, #-4]!)
   14a6c:	mov	ip, #0
   14a70:	push	{r4, r5, r6, lr}
   14a74:	sub	sp, sp, #60	; 0x3c
   14a78:	ldr	r6, [pc, #100]	; 14ae4 <__assert_fail@plt+0x3b50>
   14a7c:	add	r5, sp, #8
   14a80:	add	r4, sp, #80	; 0x50
   14a84:	ldr	r3, [r6]
   14a88:	str	r4, [sp, #8]
   14a8c:	str	r3, [sp, #52]	; 0x34
   14a90:	ldr	r3, [sp, #76]	; 0x4c
   14a94:	ldr	lr, [r4], #4
   14a98:	cmp	lr, #0
   14a9c:	str	lr, [r5, #4]!
   14aa0:	beq	14ab0 <__assert_fail@plt+0x3b1c>
   14aa4:	add	ip, ip, #1
   14aa8:	cmp	ip, #10
   14aac:	bne	14a94 <__assert_fail@plt+0x3b00>
   14ab0:	add	lr, sp, #12
   14ab4:	str	ip, [sp, #4]
   14ab8:	str	lr, [sp]
   14abc:	bl	14614 <__assert_fail@plt+0x3680>
   14ac0:	ldr	r2, [sp, #52]	; 0x34
   14ac4:	ldr	r3, [r6]
   14ac8:	cmp	r2, r3
   14acc:	bne	14ae0 <__assert_fail@plt+0x3b4c>
   14ad0:	add	sp, sp, #60	; 0x3c
   14ad4:	pop	{r4, r5, r6, lr}
   14ad8:	add	sp, sp, #4
   14adc:	bx	lr
   14ae0:	bl	10dd8 <__stack_chk_fail@plt>
   14ae4:	andeq	r6, r2, r8, lsl #30
   14ae8:	push	{r4, lr}
   14aec:	mov	r2, #5
   14af0:	ldr	r1, [pc, #88]	; 14b50 <__assert_fail@plt+0x3bbc>
   14af4:	mov	r0, #0
   14af8:	bl	10dcc <dcgettext@plt>
   14afc:	ldr	r2, [pc, #80]	; 14b54 <__assert_fail@plt+0x3bc0>
   14b00:	mov	r1, r0
   14b04:	mov	r0, #1
   14b08:	bl	10ee0 <__printf_chk@plt>
   14b0c:	mov	r2, #5
   14b10:	ldr	r1, [pc, #64]	; 14b58 <__assert_fail@plt+0x3bc4>
   14b14:	mov	r0, #0
   14b18:	bl	10dcc <dcgettext@plt>
   14b1c:	ldr	r3, [pc, #56]	; 14b5c <__assert_fail@plt+0x3bc8>
   14b20:	ldr	r2, [pc, #56]	; 14b60 <__assert_fail@plt+0x3bcc>
   14b24:	mov	r1, r0
   14b28:	mov	r0, #1
   14b2c:	bl	10ee0 <__printf_chk@plt>
   14b30:	ldr	r1, [pc, #44]	; 14b64 <__assert_fail@plt+0x3bd0>
   14b34:	mov	r2, #5
   14b38:	mov	r0, #0
   14b3c:	bl	10dcc <dcgettext@plt>
   14b40:	ldr	r3, [pc, #32]	; 14b68 <__assert_fail@plt+0x3bd4>
   14b44:	pop	{r4, lr}
   14b48:	ldr	r1, [r3]
   14b4c:	b	10d30 <fputs_unlocked@plt>
   14b50:	andeq	r6, r1, r4, lsl sl
   14b54:	andeq	r6, r1, ip, lsr #20
   14b58:	andeq	r6, r1, r4, asr #20
   14b5c:	andeq	r6, r1, r4, ror #6
   14b60:	andeq	r6, r1, ip, lsl #7
   14b64:	andeq	r6, r1, r8, asr sl
   14b68:	andeq	r7, r2, r4, asr r1
   14b6c:	push	{r4, lr}
   14b70:	mov	r4, r0
   14b74:	bl	10e50 <malloc@plt>
   14b78:	adds	r4, r4, #0
   14b7c:	movne	r4, #1
   14b80:	cmp	r0, #0
   14b84:	movne	r4, #0
   14b88:	cmp	r4, #0
   14b8c:	popeq	{r4, pc}
   14b90:	bl	14db4 <__assert_fail@plt+0x3e20>
   14b94:	push	{r4, r5, r6, lr}
   14b98:	umull	r4, r5, r0, r1
   14b9c:	adds	r3, r5, #0
   14ba0:	movne	r3, #1
   14ba4:	cmp	r4, #0
   14ba8:	blt	14bc0 <__assert_fail@plt+0x3c2c>
   14bac:	cmp	r3, #0
   14bb0:	bne	14bc0 <__assert_fail@plt+0x3c2c>
   14bb4:	mul	r0, r1, r0
   14bb8:	pop	{r4, r5, r6, lr}
   14bbc:	b	14b6c <__assert_fail@plt+0x3bd8>
   14bc0:	bl	14db4 <__assert_fail@plt+0x3e20>
   14bc4:	b	14b6c <__assert_fail@plt+0x3bd8>
   14bc8:	adds	r3, r0, #0
   14bcc:	movne	r3, #1
   14bd0:	cmp	r1, #0
   14bd4:	movne	r3, #0
   14bd8:	cmp	r3, #0
   14bdc:	push	{r4, lr}
   14be0:	bne	14c08 <__assert_fail@plt+0x3c74>
   14be4:	mov	r4, r1
   14be8:	bl	10de4 <realloc@plt>
   14bec:	adds	r4, r4, #0
   14bf0:	movne	r4, #1
   14bf4:	cmp	r0, #0
   14bf8:	movne	r4, #0
   14bfc:	cmp	r4, #0
   14c00:	popeq	{r4, pc}
   14c04:	bl	14db4 <__assert_fail@plt+0x3e20>
   14c08:	bl	10d78 <free@plt>
   14c0c:	mov	r0, #0
   14c10:	pop	{r4, pc}
   14c14:	push	{r4, r5, r6, lr}
   14c18:	umull	r4, r5, r1, r2
   14c1c:	adds	r3, r5, #0
   14c20:	movne	r3, #1
   14c24:	cmp	r4, #0
   14c28:	blt	14c40 <__assert_fail@plt+0x3cac>
   14c2c:	cmp	r3, #0
   14c30:	bne	14c40 <__assert_fail@plt+0x3cac>
   14c34:	mul	r1, r2, r1
   14c38:	pop	{r4, r5, r6, lr}
   14c3c:	b	14bc8 <__assert_fail@plt+0x3c34>
   14c40:	bl	14db4 <__assert_fail@plt+0x3e20>
   14c44:	push	{r4, r5, r6, r7, r8, lr}
   14c48:	subs	r7, r0, #0
   14c4c:	mov	r6, r1
   14c50:	mov	r5, r2
   14c54:	ldr	r4, [r1]
   14c58:	beq	14c8c <__assert_fail@plt+0x3cf8>
   14c5c:	mov	r1, r2
   14c60:	ldr	r0, [pc, #104]	; 14cd0 <__assert_fail@plt+0x3d3c>
   14c64:	bl	15c68 <__assert_fail@plt+0x4cd4>
   14c68:	cmp	r0, r4
   14c6c:	bls	14cb0 <__assert_fail@plt+0x3d1c>
   14c70:	add	r3, r4, #1
   14c74:	add	r4, r3, r4, lsr #1
   14c78:	str	r4, [r6]
   14c7c:	mul	r1, r5, r4
   14c80:	mov	r0, r7
   14c84:	pop	{r4, r5, r6, r7, r8, lr}
   14c88:	b	14bc8 <__assert_fail@plt+0x3c34>
   14c8c:	cmp	r4, #0
   14c90:	beq	14cb4 <__assert_fail@plt+0x3d20>
   14c94:	umull	r0, r1, r4, r5
   14c98:	adds	r3, r1, #0
   14c9c:	movne	r3, #1
   14ca0:	cmp	r0, #0
   14ca4:	blt	14cb0 <__assert_fail@plt+0x3d1c>
   14ca8:	cmp	r3, #0
   14cac:	beq	14c78 <__assert_fail@plt+0x3ce4>
   14cb0:	bl	14db4 <__assert_fail@plt+0x3e20>
   14cb4:	mov	r1, r2
   14cb8:	mov	r0, #64	; 0x40
   14cbc:	bl	15c68 <__assert_fail@plt+0x4cd4>
   14cc0:	cmp	r5, #64	; 0x40
   14cc4:	movls	r4, r0
   14cc8:	addhi	r4, r0, #1
   14ccc:	b	14c94 <__assert_fail@plt+0x3d00>
   14cd0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14cd4:	cmp	r0, #0
   14cd8:	ldr	r3, [r1]
   14cdc:	beq	14d00 <__assert_fail@plt+0x3d6c>
   14ce0:	ldr	r2, [pc, #60]	; 14d24 <__assert_fail@plt+0x3d90>
   14ce4:	cmp	r3, r2
   14ce8:	bhi	14d1c <__assert_fail@plt+0x3d88>
   14cec:	add	r2, r3, #1
   14cf0:	add	r3, r2, r3, lsr #1
   14cf4:	str	r3, [r1]
   14cf8:	mov	r1, r3
   14cfc:	b	14bc8 <__assert_fail@plt+0x3c34>
   14d00:	cmp	r3, #0
   14d04:	bne	14d18 <__assert_fail@plt+0x3d84>
   14d08:	mov	r3, #64	; 0x40
   14d0c:	str	r3, [r1]
   14d10:	mov	r1, r3
   14d14:	b	14bc8 <__assert_fail@plt+0x3c34>
   14d18:	bge	14cf4 <__assert_fail@plt+0x3d60>
   14d1c:	push	{r4, lr}
   14d20:	bl	14db4 <__assert_fail@plt+0x3e20>
   14d24:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14d28:	push	{r4, lr}
   14d2c:	mov	r4, r0
   14d30:	bl	14b6c <__assert_fail@plt+0x3bd8>
   14d34:	mov	r2, r4
   14d38:	mov	r1, #0
   14d3c:	pop	{r4, lr}
   14d40:	b	10ed4 <memset@plt>
   14d44:	push	{r4, r5, r6, lr}
   14d48:	umull	r4, r5, r0, r1
   14d4c:	adds	r3, r5, #0
   14d50:	movne	r3, #1
   14d54:	cmp	r4, #0
   14d58:	blt	14d70 <__assert_fail@plt+0x3ddc>
   14d5c:	cmp	r3, #0
   14d60:	bne	14d70 <__assert_fail@plt+0x3ddc>
   14d64:	bl	10d24 <calloc@plt>
   14d68:	cmp	r0, #0
   14d6c:	popne	{r4, r5, r6, pc}
   14d70:	bl	14db4 <__assert_fail@plt+0x3e20>
   14d74:	push	{r4, r5, r6, lr}
   14d78:	mov	r4, r1
   14d7c:	mov	r5, r0
   14d80:	mov	r0, r1
   14d84:	bl	14b6c <__assert_fail@plt+0x3bd8>
   14d88:	mov	r2, r4
   14d8c:	mov	r1, r5
   14d90:	pop	{r4, r5, r6, lr}
   14d94:	b	10d90 <memcpy@plt>
   14d98:	push	{r4, lr}
   14d9c:	mov	r4, r0
   14da0:	bl	10ea4 <strlen@plt>
   14da4:	add	r1, r0, #1
   14da8:	mov	r0, r4
   14dac:	pop	{r4, lr}
   14db0:	b	14d74 <__assert_fail@plt+0x3de0>
   14db4:	ldr	r3, [pc, #44]	; 14de8 <__assert_fail@plt+0x3e54>
   14db8:	push	{r4, lr}
   14dbc:	mov	r2, #5
   14dc0:	ldr	r1, [pc, #36]	; 14dec <__assert_fail@plt+0x3e58>
   14dc4:	mov	r0, #0
   14dc8:	ldr	r4, [r3]
   14dcc:	bl	10dcc <dcgettext@plt>
   14dd0:	ldr	r2, [pc, #24]	; 14df0 <__assert_fail@plt+0x3e5c>
   14dd4:	mov	r1, #0
   14dd8:	mov	r3, r0
   14ddc:	mov	r0, r4
   14de0:	bl	10e44 <error@plt>
   14de4:	bl	10f88 <abort@plt>
   14de8:	strdeq	r7, [r2], -r0
   14dec:	andeq	r6, r1, ip, asr #21
   14df0:	muleq	r1, r8, r6
   14df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df8:	sub	sp, sp, #36	; 0x24
   14dfc:	ldr	r6, [pc, #312]	; 14f3c <__assert_fail@plt+0x3fa8>
   14e00:	ldr	lr, [sp, #80]	; 0x50
   14e04:	mov	r8, r2
   14e08:	ldr	ip, [r6]
   14e0c:	mov	r2, r1
   14e10:	mov	r9, r3
   14e14:	str	lr, [sp]
   14e18:	add	r3, sp, #16
   14e1c:	mov	r1, #0
   14e20:	str	ip, [sp, #28]
   14e24:	mov	r7, r0
   14e28:	ldr	sl, [sp, #84]	; 0x54
   14e2c:	ldr	r5, [sp, #88]	; 0x58
   14e30:	bl	14f4c <__assert_fail@plt+0x3fb8>
   14e34:	subs	fp, r0, #0
   14e38:	bne	14ef8 <__assert_fail@plt+0x3f64>
   14e3c:	ldrd	r2, [sp, #16]
   14e40:	cmp	r3, r9
   14e44:	cmpeq	r2, r8
   14e48:	ldrd	r8, [sp, #72]	; 0x48
   14e4c:	movcc	r1, #1
   14e50:	movcs	r1, #0
   14e54:	cmp	r3, r9
   14e58:	cmpeq	r2, r8
   14e5c:	orrhi	r1, r1, #1
   14e60:	cmp	r1, #0
   14e64:	beq	14ebc <__assert_fail@plt+0x3f28>
   14e68:	strd	r2, [sp, #8]
   14e6c:	bl	10ebc <__errno_location@plt>
   14e70:	ldrd	r2, [sp, #8]
   14e74:	mov	r9, #0
   14e78:	mvn	r8, #-1073741824	; 0xc0000000
   14e7c:	cmp	r3, r9
   14e80:	cmpeq	r2, r8
   14e84:	bls	14f24 <__assert_fail@plt+0x3f90>
   14e88:	mov	r4, #75	; 0x4b
   14e8c:	cmp	r5, #0
   14e90:	str	r4, [r0]
   14e94:	beq	14ef0 <__assert_fail@plt+0x3f5c>
   14e98:	mov	r0, r7
   14e9c:	bl	145fc <__assert_fail@plt+0x3668>
   14ea0:	mov	r3, sl
   14ea4:	ldr	r2, [pc, #148]	; 14f40 <__assert_fail@plt+0x3fac>
   14ea8:	mov	r1, r4
   14eac:	str	r0, [sp]
   14eb0:	mov	r0, r5
   14eb4:	bl	10e44 <error@plt>
   14eb8:	ldrd	r2, [sp, #16]
   14ebc:	ldr	lr, [sp, #28]
   14ec0:	ldr	ip, [r6]
   14ec4:	mov	r0, r2
   14ec8:	cmp	lr, ip
   14ecc:	mov	r1, r3
   14ed0:	bne	14f38 <__assert_fail@plt+0x3fa4>
   14ed4:	add	sp, sp, #36	; 0x24
   14ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14edc:	mov	r4, #0
   14ee0:	cmp	r5, #0
   14ee4:	str	r4, [r0]
   14ee8:	bne	14e98 <__assert_fail@plt+0x3f04>
   14eec:	mov	r4, r5
   14ef0:	mov	r5, #1
   14ef4:	b	14e98 <__assert_fail@plt+0x3f04>
   14ef8:	bl	10ebc <__errno_location@plt>
   14efc:	cmp	fp, #1
   14f00:	beq	14e88 <__assert_fail@plt+0x3ef4>
   14f04:	cmp	fp, #3
   14f08:	beq	14edc <__assert_fail@plt+0x3f48>
   14f0c:	ldr	r4, [r0]
   14f10:	cmp	r5, #0
   14f14:	moveq	r5, #1
   14f18:	cmp	r4, #22
   14f1c:	moveq	r4, #0
   14f20:	b	14e98 <__assert_fail@plt+0x3f04>
   14f24:	mov	r4, #34	; 0x22
   14f28:	cmp	r5, #0
   14f2c:	str	r4, [r0]
   14f30:	bne	14e98 <__assert_fail@plt+0x3f04>
   14f34:	b	14ef0 <__assert_fail@plt+0x3f5c>
   14f38:	bl	10dd8 <__stack_chk_fail@plt>
   14f3c:	andeq	r6, r2, r8, lsl #30
   14f40:	muleq	r1, r4, r6
   14f44:	mov	r1, #10
   14f48:	b	14df4 <__assert_fail@plt+0x3e60>
   14f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f50:	sub	sp, sp, #36	; 0x24
   14f54:	ldr	r5, [pc, #2536]	; 15944 <__assert_fail@plt+0x49b0>
   14f58:	mov	r9, r2
   14f5c:	cmp	r2, #36	; 0x24
   14f60:	str	r3, [sp, #12]
   14f64:	ldr	r2, [r5]
   14f68:	ldr	r3, [sp, #72]	; 0x48
   14f6c:	str	r2, [sp, #28]
   14f70:	str	r3, [sp]
   14f74:	bhi	15930 <__assert_fail@plt+0x499c>
   14f78:	cmp	r1, #0
   14f7c:	mov	r4, r1
   14f80:	mov	r6, r0
   14f84:	addeq	r4, sp, #24
   14f88:	bl	10ebc <__errno_location@plt>
   14f8c:	mov	r3, #0
   14f90:	str	r3, [r0]
   14f94:	mov	r7, r0
   14f98:	bl	10e8c <__ctype_b_loc@plt>
   14f9c:	ldrb	r3, [r6]
   14fa0:	mov	r1, r6
   14fa4:	ldr	r0, [r0]
   14fa8:	b	14fb0 <__assert_fail@plt+0x401c>
   14fac:	ldrb	r3, [r1, #1]!
   14fb0:	lsl	r2, r3, #1
   14fb4:	ldrh	r8, [r0, r2]
   14fb8:	ands	r8, r8, #8192	; 0x2000
   14fbc:	bne	14fac <__assert_fail@plt+0x4018>
   14fc0:	cmp	r3, #45	; 0x2d
   14fc4:	beq	15060 <__assert_fail@plt+0x40cc>
   14fc8:	mov	r2, r9
   14fcc:	mov	r3, r8
   14fd0:	mov	r1, r4
   14fd4:	mov	r0, r6
   14fd8:	bl	10d9c <__strtoull_internal@plt>
   14fdc:	ldr	r9, [r4]
   14fe0:	cmp	r9, r6
   14fe4:	mov	sl, r0
   14fe8:	mov	fp, r1
   14fec:	beq	15048 <__assert_fail@plt+0x40b4>
   14ff0:	ldr	r8, [r7]
   14ff4:	cmp	r8, #0
   14ff8:	bne	15038 <__assert_fail@plt+0x40a4>
   14ffc:	ldr	r3, [sp]
   15000:	cmp	r3, #0
   15004:	beq	15014 <__assert_fail@plt+0x4080>
   15008:	ldrb	r6, [r9]
   1500c:	cmp	r6, #0
   15010:	bne	153e8 <__assert_fail@plt+0x4454>
   15014:	ldr	r3, [sp, #12]
   15018:	strd	sl, [r3]
   1501c:	ldr	r2, [sp, #28]
   15020:	ldr	r3, [r5]
   15024:	mov	r0, r8
   15028:	cmp	r2, r3
   1502c:	bne	1592c <__assert_fail@plt+0x4998>
   15030:	add	sp, sp, #36	; 0x24
   15034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15038:	cmp	r8, #34	; 0x22
   1503c:	bne	15060 <__assert_fail@plt+0x40cc>
   15040:	mov	r8, #1
   15044:	b	14ffc <__assert_fail@plt+0x4068>
   15048:	ldr	r0, [sp]
   1504c:	cmp	r0, #0
   15050:	beq	15060 <__assert_fail@plt+0x40cc>
   15054:	ldrb	r6, [r6]
   15058:	cmp	r6, #0
   1505c:	bne	15068 <__assert_fail@plt+0x40d4>
   15060:	mov	r8, #4
   15064:	b	1501c <__assert_fail@plt+0x4088>
   15068:	mov	r1, r6
   1506c:	bl	10eb0 <strchr@plt>
   15070:	cmp	r0, #0
   15074:	movne	sl, #1
   15078:	movne	fp, #0
   1507c:	beq	15060 <__assert_fail@plt+0x40cc>
   15080:	sub	r7, r6, #69	; 0x45
   15084:	cmp	r7, #47	; 0x2f
   15088:	ldrls	pc, [pc, r7, lsl #2]
   1508c:	b	1524c <__assert_fail@plt+0x42b8>
   15090:	andeq	r5, r1, r0, asr r1
   15094:	andeq	r5, r1, ip, asr #4
   15098:	andeq	r5, r1, r0, asr r1
   1509c:	andeq	r5, r1, ip, asr #4
   150a0:	andeq	r5, r1, ip, asr #4
   150a4:	andeq	r5, r1, ip, asr #4
   150a8:	andeq	r5, r1, r0, asr r1
   150ac:	andeq	r5, r1, ip, asr #4
   150b0:	andeq	r5, r1, r0, asr r1
   150b4:	andeq	r5, r1, ip, asr #4
   150b8:	andeq	r5, r1, ip, asr #4
   150bc:	andeq	r5, r1, r0, asr r1
   150c0:	andeq	r5, r1, ip, asr #4
   150c4:	andeq	r5, r1, ip, asr #4
   150c8:	andeq	r5, r1, ip, asr #4
   150cc:	andeq	r5, r1, r0, asr r1
   150d0:	andeq	r5, r1, ip, asr #4
   150d4:	andeq	r5, r1, ip, asr #4
   150d8:	andeq	r5, r1, ip, asr #4
   150dc:	andeq	r5, r1, ip, asr #4
   150e0:	andeq	r5, r1, r0, asr r1
   150e4:	andeq	r5, r1, r0, asr r1
   150e8:	andeq	r5, r1, ip, asr #4
   150ec:	andeq	r5, r1, ip, asr #4
   150f0:	andeq	r5, r1, ip, asr #4
   150f4:	andeq	r5, r1, ip, asr #4
   150f8:	andeq	r5, r1, ip, asr #4
   150fc:	andeq	r5, r1, ip, asr #4
   15100:	andeq	r5, r1, ip, asr #4
   15104:	andeq	r5, r1, ip, asr #4
   15108:	andeq	r5, r1, ip, asr #4
   1510c:	andeq	r5, r1, ip, asr #4
   15110:	andeq	r5, r1, ip, asr #4
   15114:	andeq	r5, r1, ip, asr #4
   15118:	andeq	r5, r1, r0, asr r1
   1511c:	andeq	r5, r1, ip, asr #4
   15120:	andeq	r5, r1, ip, asr #4
   15124:	andeq	r5, r1, ip, asr #4
   15128:	andeq	r5, r1, r0, asr r1
   1512c:	andeq	r5, r1, ip, asr #4
   15130:	andeq	r5, r1, r0, asr r1
   15134:	andeq	r5, r1, ip, asr #4
   15138:	andeq	r5, r1, ip, asr #4
   1513c:	andeq	r5, r1, ip, asr #4
   15140:	andeq	r5, r1, ip, asr #4
   15144:	andeq	r5, r1, ip, asr #4
   15148:	andeq	r5, r1, ip, asr #4
   1514c:	andeq	r5, r1, r0, asr r1
   15150:	ldr	r0, [sp]
   15154:	mov	r1, #48	; 0x30
   15158:	bl	10eb0 <strchr@plt>
   1515c:	cmp	r0, #0
   15160:	beq	1524c <__assert_fail@plt+0x42b8>
   15164:	ldrb	r3, [r9, #1]
   15168:	cmp	r3, #68	; 0x44
   1516c:	beq	1582c <__assert_fail@plt+0x4898>
   15170:	cmp	r3, #105	; 0x69
   15174:	beq	1540c <__assert_fail@plt+0x4478>
   15178:	cmp	r3, #66	; 0x42
   1517c:	beq	1582c <__assert_fail@plt+0x4898>
   15180:	cmp	r7, #47	; 0x2f
   15184:	ldrls	pc, [pc, r7, lsl #2]
   15188:	b	153fc <__assert_fail@plt+0x4468>
   1518c:	andeq	r5, r1, r0, lsl r8
   15190:	strdeq	r5, [r1], -ip
   15194:	andeq	r5, r1, r0, lsl #16
   15198:	strdeq	r5, [r1], -ip
   1519c:	strdeq	r5, [r1], -ip
   151a0:	strdeq	r5, [r1], -ip
   151a4:	strdeq	r5, [r1], -r0
   151a8:	strdeq	r5, [r1], -ip
   151ac:	andeq	r5, r1, r0, ror #15
   151b0:	strdeq	r5, [r1], -ip
   151b4:	strdeq	r5, [r1], -ip
   151b8:	ldrdeq	r5, [r1], -r0
   151bc:	strdeq	r5, [r1], -ip
   151c0:	strdeq	r5, [r1], -ip
   151c4:	strdeq	r5, [r1], -ip
   151c8:	andeq	r5, r1, r0, asr #15
   151cc:	strdeq	r5, [r1], -ip
   151d0:	strdeq	r5, [r1], -ip
   151d4:	strdeq	r5, [r1], -ip
   151d8:	strdeq	r5, [r1], -ip
   151dc:			; <UNDEFINED> instruction: 0x000157b0
   151e0:	andeq	r5, r1, r0, lsr #15
   151e4:	strdeq	r5, [r1], -ip
   151e8:	strdeq	r5, [r1], -ip
   151ec:	strdeq	r5, [r1], -ip
   151f0:	strdeq	r5, [r1], -ip
   151f4:	strdeq	r5, [r1], -ip
   151f8:	strdeq	r5, [r1], -ip
   151fc:	strdeq	r5, [r1], -ip
   15200:	andeq	r5, r1, r8, asr #8
   15204:	muleq	r1, r8, r7
   15208:	strdeq	r5, [r1], -ip
   1520c:	strdeq	r5, [r1], -ip
   15210:	strdeq	r5, [r1], -ip
   15214:	andeq	r5, r1, r0, lsl #16
   15218:	strdeq	r5, [r1], -ip
   1521c:	strdeq	r5, [r1], -ip
   15220:	strdeq	r5, [r1], -ip
   15224:	strdeq	r5, [r1], -r0
   15228:	strdeq	r5, [r1], -ip
   1522c:	andeq	r5, r1, r0, ror #15
   15230:	strdeq	r5, [r1], -ip
   15234:	strdeq	r5, [r1], -ip
   15238:	strdeq	r5, [r1], -ip
   1523c:	strdeq	r5, [r1], -ip
   15240:	strdeq	r5, [r1], -ip
   15244:	strdeq	r5, [r1], -ip
   15248:	andeq	r5, r1, r0, asr #15
   1524c:	mov	lr, #1
   15250:	mov	r0, #1024	; 0x400
   15254:	sub	r6, r6, #66	; 0x42
   15258:	cmp	r6, #53	; 0x35
   1525c:	ldrls	pc, [pc, r6, lsl #2]
   15260:	b	153fc <__assert_fail@plt+0x4468>
   15264:	andeq	r5, r1, r0, ror r4
   15268:	strdeq	r5, [r1], -ip
   1526c:	strdeq	r5, [r1], -ip
   15270:	muleq	r1, r4, r4
   15274:	strdeq	r5, [r1], -ip
   15278:	andeq	r5, r1, ip, lsr r3
   1527c:	strdeq	r5, [r1], -ip
   15280:	strdeq	r5, [r1], -ip
   15284:	strdeq	r5, [r1], -ip
   15288:	andeq	r5, r1, ip, lsl #11
   1528c:	strdeq	r5, [r1], -ip
   15290:	andeq	r5, r1, r0, lsr r7
   15294:	strdeq	r5, [r1], -ip
   15298:	strdeq	r5, [r1], -ip
   1529c:			; <UNDEFINED> instruction: 0x000156b4
   152a0:	strdeq	r5, [r1], -ip
   152a4:	strdeq	r5, [r1], -ip
   152a8:	strdeq	r5, [r1], -ip
   152ac:	andeq	r5, r1, r8, lsr r6
   152b0:	strdeq	r5, [r1], -ip
   152b4:	strdeq	r5, [r1], -ip
   152b8:	strdeq	r5, [r1], -ip
   152bc:	strdeq	r5, [r1], -ip
   152c0:			; <UNDEFINED> instruction: 0x000155bc
   152c4:	andeq	r5, r1, r0, lsl r5
   152c8:	strdeq	r5, [r1], -ip
   152cc:	strdeq	r5, [r1], -ip
   152d0:	strdeq	r5, [r1], -ip
   152d4:	strdeq	r5, [r1], -ip
   152d8:	strdeq	r5, [r1], -ip
   152dc:	strdeq	r5, [r1], -ip
   152e0:	strdeq	r5, [r1], -ip
   152e4:	andeq	r5, r1, ip, asr #8
   152e8:	ldrdeq	r5, [r1], -r0
   152ec:	strdeq	r5, [r1], -ip
   152f0:	strdeq	r5, [r1], -ip
   152f4:	strdeq	r5, [r1], -ip
   152f8:	andeq	r5, r1, ip, lsr r3
   152fc:	strdeq	r5, [r1], -ip
   15300:	strdeq	r5, [r1], -ip
   15304:	strdeq	r5, [r1], -ip
   15308:	andeq	r5, r1, ip, lsl #11
   1530c:	strdeq	r5, [r1], -ip
   15310:	andeq	r5, r1, r0, lsr r7
   15314:	strdeq	r5, [r1], -ip
   15318:	strdeq	r5, [r1], -ip
   1531c:	strdeq	r5, [r1], -ip
   15320:	strdeq	r5, [r1], -ip
   15324:	strdeq	r5, [r1], -ip
   15328:	strdeq	r5, [r1], -ip
   1532c:	andeq	r5, r1, r8, lsr r6
   15330:	strdeq	r5, [r1], -ip
   15334:	strdeq	r5, [r1], -ip
   15338:	andeq	r5, r1, r4, lsr #8
   1533c:	asr	r1, r0, #31
   15340:	mov	r2, #0
   15344:	mov	r3, #0
   15348:	cmp	fp, #0
   1534c:	strd	r2, [sp]
   15350:	bne	15870 <__assert_fail@plt+0x48dc>
   15354:	ldrd	r2, [sp]
   15358:	orrs	r3, r2, r3
   1535c:	bne	15860 <__assert_fail@plt+0x48cc>
   15360:	mul	r3, sl, r1
   15364:	umull	r6, r7, sl, r0
   15368:	mla	r3, r0, fp, r3
   1536c:	ldrd	sl, [sp]
   15370:	add	ip, r3, r7
   15374:	cmp	ip, #0
   15378:	mov	r7, ip
   1537c:	bne	15904 <__assert_fail@plt+0x4970>
   15380:	orrs	r3, sl, fp
   15384:	bne	15860 <__assert_fail@plt+0x48cc>
   15388:	umull	r2, r3, r6, r0
   1538c:	mul	ip, r6, r1
   15390:	strd	r2, [sp]
   15394:	mla	r3, r0, r7, ip
   15398:	ldr	r2, [sp, #4]
   1539c:	add	ip, r3, r2
   153a0:	cmp	ip, #0
   153a4:	str	ip, [sp, #4]
   153a8:	bne	158e0 <__assert_fail@plt+0x494c>
   153ac:	orrs	r3, sl, fp
   153b0:	bne	15860 <__assert_fail@plt+0x48cc>
   153b4:	ldrd	r6, [sp]
   153b8:	mov	r3, #0
   153bc:	mul	r2, r6, r1
   153c0:	umull	sl, fp, r6, r0
   153c4:	mla	r2, r0, r7, r2
   153c8:	add	fp, r2, fp
   153cc:	orr	r8, r8, r3
   153d0:	add	r3, r9, lr
   153d4:	str	r3, [r4]
   153d8:	ldrb	r3, [r9, lr]
   153dc:	cmp	r3, #0
   153e0:	orrne	r8, r8, #2
   153e4:	b	15014 <__assert_fail@plt+0x4080>
   153e8:	mov	r1, r6
   153ec:	ldr	r0, [sp]
   153f0:	bl	10eb0 <strchr@plt>
   153f4:	cmp	r0, #0
   153f8:	bne	15080 <__assert_fail@plt+0x40ec>
   153fc:	ldr	r3, [sp, #12]
   15400:	orr	r8, r8, #2
   15404:	strd	sl, [r3]
   15408:	b	1501c <__assert_fail@plt+0x4088>
   1540c:	ldrb	r3, [r9, #2]
   15410:	mov	r0, #1024	; 0x400
   15414:	cmp	r3, #66	; 0x42
   15418:	movne	lr, #1
   1541c:	moveq	lr, #3
   15420:	b	15254 <__assert_fail@plt+0x42c0>
   15424:	lsr	r3, fp, #31
   15428:	adds	sl, sl, sl
   1542c:	adc	fp, fp, fp
   15430:	cmp	r3, #0
   15434:	beq	153d0 <__assert_fail@plt+0x443c>
   15438:	mov	r8, #1
   1543c:	mvn	sl, #0
   15440:	mvn	fp, #0
   15444:	b	153d0 <__assert_fail@plt+0x443c>
   15448:	mov	lr, #1
   1544c:	lsr	r3, fp, #23
   15450:	cmp	r3, #0
   15454:	bne	15438 <__assert_fail@plt+0x44a4>
   15458:	lsl	r3, fp, #9
   1545c:	orr	r3, r3, sl, lsr #23
   15460:	lsl	r2, sl, #9
   15464:	mov	sl, r2
   15468:	mov	fp, r3
   1546c:	b	153d0 <__assert_fail@plt+0x443c>
   15470:	lsr	r3, fp, #22
   15474:	cmp	r3, #0
   15478:	bne	15438 <__assert_fail@plt+0x44a4>
   1547c:	lsl	r3, fp, #10
   15480:	orr	r3, r3, sl, lsr #22
   15484:	lsl	r2, sl, #10
   15488:	mov	sl, r2
   1548c:	mov	fp, r3
   15490:	b	153d0 <__assert_fail@plt+0x443c>
   15494:	mov	r6, r0
   15498:	asr	r7, r0, #31
   1549c:	mov	r3, #0
   154a0:	mov	ip, #6
   154a4:	str	r3, [sp]
   154a8:	strd	r4, [sp, #16]
   154ac:	b	154dc <__assert_fail@plt+0x4548>
   154b0:	orrs	r3, r2, r3
   154b4:	movne	r3, #1
   154b8:	muleq	r3, sl, r7
   154bc:	strne	r3, [sp]
   154c0:	mlaeq	r3, r6, fp, r3
   154c4:	umulleq	sl, fp, sl, r6
   154c8:	mvnne	sl, #0
   154cc:	addeq	fp, r3, fp
   154d0:	mvnne	fp, #0
   154d4:	subs	ip, ip, #1
   154d8:	beq	15820 <__assert_fail@plt+0x488c>
   154dc:	cmp	fp, #0
   154e0:	mov	r2, #0
   154e4:	mov	r3, #0
   154e8:	beq	154b0 <__assert_fail@plt+0x451c>
   154ec:	umull	r0, r1, sl, r6
   154f0:	mov	r5, #0
   154f4:	mov	r0, r1
   154f8:	mov	r1, r5
   154fc:	umlal	r0, r1, fp, r6
   15500:	cmp	r1, r5
   15504:	movne	r2, #1
   15508:	movne	r3, #0
   1550c:	b	154b0 <__assert_fail@plt+0x451c>
   15510:	mov	r6, r0
   15514:	asr	r7, r0, #31
   15518:	mov	r3, #0
   1551c:	mov	ip, #7
   15520:	str	r3, [sp]
   15524:	strd	r4, [sp, #16]
   15528:	b	15558 <__assert_fail@plt+0x45c4>
   1552c:	orrs	r3, r2, r3
   15530:	movne	r3, #1
   15534:	muleq	r3, sl, r7
   15538:	strne	r3, [sp]
   1553c:	mlaeq	r3, r6, fp, r3
   15540:	umulleq	sl, fp, sl, r6
   15544:	mvnne	sl, #0
   15548:	addeq	fp, r3, fp
   1554c:	mvnne	fp, #0
   15550:	subs	ip, ip, #1
   15554:	beq	15820 <__assert_fail@plt+0x488c>
   15558:	cmp	fp, #0
   1555c:	mov	r2, #0
   15560:	mov	r3, #0
   15564:	beq	1552c <__assert_fail@plt+0x4598>
   15568:	umull	r0, r1, sl, r6
   1556c:	mov	r5, #0
   15570:	mov	r0, r1
   15574:	mov	r1, r5
   15578:	umlal	r0, r1, fp, r6
   1557c:	cmp	r1, r5
   15580:	movne	r2, #1
   15584:	movne	r3, #0
   15588:	b	1552c <__assert_fail@plt+0x4598>
   1558c:	asr	r1, r0, #31
   15590:	cmp	fp, #0
   15594:	mov	r6, #0
   15598:	mov	r7, #0
   1559c:	bne	15838 <__assert_fail@plt+0x48a4>
   155a0:	orrs	r3, r6, r7
   155a4:	bne	15438 <__assert_fail@plt+0x44a4>
   155a8:	mul	r3, sl, r1
   155ac:	mla	r3, r0, fp, r3
   155b0:	umull	sl, fp, sl, r0
   155b4:	add	fp, r3, fp
   155b8:	b	153d0 <__assert_fail@plt+0x443c>
   155bc:	mov	r6, r0
   155c0:	asr	r7, r0, #31
   155c4:	mov	r3, #0
   155c8:	mov	ip, #8
   155cc:	str	r3, [sp]
   155d0:	strd	r4, [sp, #16]
   155d4:	b	15604 <__assert_fail@plt+0x4670>
   155d8:	orrs	r3, r2, r3
   155dc:	movne	r3, #1
   155e0:	muleq	r3, sl, r7
   155e4:	strne	r3, [sp]
   155e8:	mlaeq	r3, r6, fp, r3
   155ec:	umulleq	sl, fp, sl, r6
   155f0:	mvnne	sl, #0
   155f4:	addeq	fp, r3, fp
   155f8:	mvnne	fp, #0
   155fc:	subs	ip, ip, #1
   15600:	beq	15820 <__assert_fail@plt+0x488c>
   15604:	cmp	fp, #0
   15608:	mov	r2, #0
   1560c:	mov	r3, #0
   15610:	beq	155d8 <__assert_fail@plt+0x4644>
   15614:	umull	r0, r1, sl, r6
   15618:	mov	r5, #0
   1561c:	mov	r0, r1
   15620:	mov	r1, r5
   15624:	umlal	r0, r1, fp, r6
   15628:	cmp	r1, r5
   1562c:	movne	r2, #1
   15630:	movne	r3, #0
   15634:	b	155d8 <__assert_fail@plt+0x4644>
   15638:	mov	r6, r0
   1563c:	asr	r7, r0, #31
   15640:	mov	r3, #0
   15644:	mov	ip, #4
   15648:	str	r3, [sp]
   1564c:	strd	r4, [sp, #16]
   15650:	b	15680 <__assert_fail@plt+0x46ec>
   15654:	orrs	r3, r2, r3
   15658:	movne	r3, #1
   1565c:	muleq	r3, sl, r7
   15660:	strne	r3, [sp]
   15664:	mlaeq	r3, r6, fp, r3
   15668:	umulleq	sl, fp, sl, r6
   1566c:	mvnne	sl, #0
   15670:	addeq	fp, r3, fp
   15674:	mvnne	fp, #0
   15678:	subs	ip, ip, #1
   1567c:	beq	15820 <__assert_fail@plt+0x488c>
   15680:	cmp	fp, #0
   15684:	mov	r2, #0
   15688:	mov	r3, #0
   1568c:	beq	15654 <__assert_fail@plt+0x46c0>
   15690:	umull	r0, r1, sl, r6
   15694:	mov	r5, #0
   15698:	mov	r0, r1
   1569c:	mov	r1, r5
   156a0:	umlal	r0, r1, fp, r6
   156a4:	cmp	r1, r5
   156a8:	movne	r2, #1
   156ac:	movne	r3, #0
   156b0:	b	15654 <__assert_fail@plt+0x46c0>
   156b4:	mov	r6, r0
   156b8:	asr	r7, r0, #31
   156bc:	mov	r3, #0
   156c0:	mov	ip, #5
   156c4:	str	r3, [sp]
   156c8:	strd	r4, [sp, #16]
   156cc:	b	156fc <__assert_fail@plt+0x4768>
   156d0:	orrs	r3, r2, r3
   156d4:	movne	r3, #1
   156d8:	muleq	r3, sl, r7
   156dc:	strne	r3, [sp]
   156e0:	mlaeq	r3, r6, fp, r3
   156e4:	umulleq	sl, fp, sl, r6
   156e8:	mvnne	sl, #0
   156ec:	addeq	fp, r3, fp
   156f0:	mvnne	fp, #0
   156f4:	subs	ip, ip, #1
   156f8:	beq	15820 <__assert_fail@plt+0x488c>
   156fc:	cmp	fp, #0
   15700:	mov	r2, #0
   15704:	mov	r3, #0
   15708:	beq	156d0 <__assert_fail@plt+0x473c>
   1570c:	umull	r0, r1, sl, r6
   15710:	mov	r5, #0
   15714:	mov	r0, r1
   15718:	mov	r1, r5
   1571c:	umlal	r0, r1, fp, r6
   15720:	cmp	r1, r5
   15724:	movne	r2, #1
   15728:	movne	r3, #0
   1572c:	b	156d0 <__assert_fail@plt+0x473c>
   15730:	asr	r1, r0, #31
   15734:	cmp	fp, #0
   15738:	mov	r6, #0
   1573c:	mov	r7, #0
   15740:	bne	15894 <__assert_fail@plt+0x4900>
   15744:	orrs	r3, r6, r7
   15748:	bne	15438 <__assert_fail@plt+0x44a4>
   1574c:	umull	r2, r3, sl, r0
   15750:	mul	ip, sl, r1
   15754:	strd	r2, [sp]
   15758:	mla	r3, r0, fp, ip
   1575c:	ldr	r2, [sp, #4]
   15760:	mov	sl, r6
   15764:	add	ip, r3, r2
   15768:	cmp	ip, #0
   1576c:	mov	fp, r7
   15770:	str	ip, [sp, #4]
   15774:	bne	158bc <__assert_fail@plt+0x4928>
   15778:	orrs	r3, sl, fp
   1577c:	bne	15438 <__assert_fail@plt+0x44a4>
   15780:	ldrd	r6, [sp]
   15784:	mul	r3, r6, r1
   15788:	umull	sl, fp, r6, r0
   1578c:	mla	r0, r0, r7, r3
   15790:	add	fp, r0, fp
   15794:	b	153d0 <__assert_fail@plt+0x443c>
   15798:	mov	lr, #1
   1579c:	b	153d0 <__assert_fail@plt+0x443c>
   157a0:	mov	lr, #1
   157a4:	mov	r6, #1024	; 0x400
   157a8:	mov	r7, #0
   157ac:	b	15518 <__assert_fail@plt+0x4584>
   157b0:	mov	lr, #1
   157b4:	mov	r6, #1024	; 0x400
   157b8:	mov	r7, #0
   157bc:	b	155c4 <__assert_fail@plt+0x4630>
   157c0:	mov	lr, #1
   157c4:	mov	r6, #1024	; 0x400
   157c8:	mov	r7, #0
   157cc:	b	15640 <__assert_fail@plt+0x46ac>
   157d0:	mov	lr, #1
   157d4:	mov	r6, #1024	; 0x400
   157d8:	mov	r7, #0
   157dc:	b	156bc <__assert_fail@plt+0x4728>
   157e0:	mov	lr, #1
   157e4:	mov	r0, #1024	; 0x400
   157e8:	mov	r1, #0
   157ec:	b	15734 <__assert_fail@plt+0x47a0>
   157f0:	mov	lr, #1
   157f4:	mov	r0, #1024	; 0x400
   157f8:	mov	r1, #0
   157fc:	b	15590 <__assert_fail@plt+0x45fc>
   15800:	mov	lr, #1
   15804:	mov	r0, #1024	; 0x400
   15808:	mov	r1, #0
   1580c:	b	15340 <__assert_fail@plt+0x43ac>
   15810:	mov	lr, #1
   15814:	mov	r6, #1024	; 0x400
   15818:	mov	r7, #0
   1581c:	b	1549c <__assert_fail@plt+0x4508>
   15820:	ldrd	r4, [sp, #16]
   15824:	ldr	r3, [sp]
   15828:	b	153cc <__assert_fail@plt+0x4438>
   1582c:	mov	lr, #2
   15830:	mov	r0, #1000	; 0x3e8
   15834:	b	15254 <__assert_fail@plt+0x42c0>
   15838:	umull	r2, r3, sl, r0
   1583c:	str	r3, [sp]
   15840:	mov	r3, #0
   15844:	str	r3, [sp, #4]
   15848:	ldrd	r2, [sp]
   1584c:	umlal	r2, r3, fp, r0
   15850:	cmp	r3, #0
   15854:	movne	r6, #1
   15858:	movne	r7, #0
   1585c:	b	155a0 <__assert_fail@plt+0x460c>
   15860:	mov	r3, #1
   15864:	mvn	sl, #0
   15868:	mvn	fp, #0
   1586c:	b	153cc <__assert_fail@plt+0x4438>
   15870:	umull	r2, r3, sl, r0
   15874:	mov	r7, #0
   15878:	mov	r6, r3
   1587c:	umlal	r6, r7, fp, r0
   15880:	cmp	r7, #0
   15884:	movne	r2, #1
   15888:	movne	r3, #0
   1588c:	strdne	r2, [sp]
   15890:	b	15354 <__assert_fail@plt+0x43c0>
   15894:	umull	r2, r3, sl, r0
   15898:	str	r3, [sp]
   1589c:	mov	r3, #0
   158a0:	str	r3, [sp, #4]
   158a4:	ldrd	r2, [sp]
   158a8:	umlal	r2, r3, fp, r0
   158ac:	cmp	r3, #0
   158b0:	movne	r6, #1
   158b4:	movne	r7, #0
   158b8:	b	15744 <__assert_fail@plt+0x47b0>
   158bc:	ldr	r3, [sp]
   158c0:	mov	r7, #0
   158c4:	umull	r2, r3, r3, r0
   158c8:	mov	r6, r3
   158cc:	umlal	r6, r7, ip, r0
   158d0:	cmp	r7, #0
   158d4:	movne	sl, #1
   158d8:	movne	fp, #0
   158dc:	b	15778 <__assert_fail@plt+0x47e4>
   158e0:	ldr	r3, [sp]
   158e4:	mov	r7, #0
   158e8:	umull	r2, r3, r3, r0
   158ec:	mov	r6, r3
   158f0:	umlal	r6, r7, ip, r0
   158f4:	cmp	r7, #0
   158f8:	movne	sl, #1
   158fc:	movne	fp, #0
   15900:	b	153ac <__assert_fail@plt+0x4418>
   15904:	umull	r2, r3, r6, r0
   15908:	str	r3, [sp]
   1590c:	mov	r3, #0
   15910:	str	r3, [sp, #4]
   15914:	ldrd	r2, [sp]
   15918:	umlal	r2, r3, ip, r0
   1591c:	cmp	r3, #0
   15920:	movne	sl, #1
   15924:	movne	fp, #0
   15928:	b	15380 <__assert_fail@plt+0x43ec>
   1592c:	bl	10dd8 <__stack_chk_fail@plt>
   15930:	ldr	r3, [pc, #16]	; 15948 <__assert_fail@plt+0x49b4>
   15934:	mov	r2, #96	; 0x60
   15938:	ldr	r1, [pc, #12]	; 1594c <__assert_fail@plt+0x49b8>
   1593c:	ldr	r0, [pc, #12]	; 15950 <__assert_fail@plt+0x49bc>
   15940:	bl	10f94 <__assert_fail@plt>
   15944:	andeq	r6, r2, r8, lsl #30
   15948:	andeq	r6, r1, r0, ror #21
   1594c:	andeq	r6, r1, ip, ror #21
   15950:	strdeq	r6, [r1], -ip
   15954:	push	{r4, r5, lr}
   15958:	sub	sp, sp, #12
   1595c:	mov	r4, r0
   15960:	bl	10eec <fileno@plt>
   15964:	cmp	r0, #0
   15968:	mov	r0, r4
   1596c:	blt	159e8 <__assert_fail@plt+0x4a54>
   15970:	bl	10e68 <__freading@plt>
   15974:	cmp	r0, #0
   15978:	bne	159b4 <__assert_fail@plt+0x4a20>
   1597c:	mov	r0, r4
   15980:	bl	159f4 <__assert_fail@plt+0x4a60>
   15984:	cmp	r0, #0
   15988:	beq	159e4 <__assert_fail@plt+0x4a50>
   1598c:	bl	10ebc <__errno_location@plt>
   15990:	mov	r5, r0
   15994:	mov	r0, r4
   15998:	ldr	r4, [r5]
   1599c:	bl	10f10 <fclose@plt>
   159a0:	cmp	r4, #0
   159a4:	mvnne	r0, #0
   159a8:	strne	r4, [r5]
   159ac:	add	sp, sp, #12
   159b0:	pop	{r4, r5, pc}
   159b4:	mov	r0, r4
   159b8:	bl	10eec <fileno@plt>
   159bc:	mov	r3, #1
   159c0:	str	r3, [sp]
   159c4:	mov	r2, #0
   159c8:	mov	r3, #0
   159cc:	bl	10e14 <lseek64@plt>
   159d0:	mvn	r3, #0
   159d4:	mvn	r2, #0
   159d8:	cmp	r1, r3
   159dc:	cmpeq	r0, r2
   159e0:	bne	1597c <__assert_fail@plt+0x49e8>
   159e4:	mov	r0, r4
   159e8:	add	sp, sp, #12
   159ec:	pop	{r4, r5, lr}
   159f0:	b	10f10 <fclose@plt>
   159f4:	push	{r4, lr}
   159f8:	subs	r4, r0, #0
   159fc:	sub	sp, sp, #8
   15a00:	beq	15a1c <__assert_fail@plt+0x4a88>
   15a04:	bl	10e68 <__freading@plt>
   15a08:	cmp	r0, #0
   15a0c:	beq	15a1c <__assert_fail@plt+0x4a88>
   15a10:	ldr	r3, [r4]
   15a14:	tst	r3, #256	; 0x100
   15a18:	bne	15a2c <__assert_fail@plt+0x4a98>
   15a1c:	mov	r0, r4
   15a20:	add	sp, sp, #8
   15a24:	pop	{r4, lr}
   15a28:	b	10d60 <fflush@plt>
   15a2c:	mov	r3, #1
   15a30:	str	r3, [sp]
   15a34:	mov	r2, #0
   15a38:	mov	r3, #0
   15a3c:	mov	r0, r4
   15a40:	bl	15a54 <__assert_fail@plt+0x4ac0>
   15a44:	mov	r0, r4
   15a48:	add	sp, sp, #8
   15a4c:	pop	{r4, lr}
   15a50:	b	10d60 <fflush@plt>
   15a54:	push	{r4, r5, r6, r7, r8, lr}
   15a58:	sub	sp, sp, #8
   15a5c:	ldmib	r0, {ip, lr}
   15a60:	mov	r4, r0
   15a64:	ldr	r5, [sp, #32]
   15a68:	cmp	lr, ip
   15a6c:	beq	15a84 <__assert_fail@plt+0x4af0>
   15a70:	str	r5, [sp, #32]
   15a74:	mov	r0, r4
   15a78:	add	sp, sp, #8
   15a7c:	pop	{r4, r5, r6, r7, r8, lr}
   15a80:	b	10f1c <fseeko64@plt>
   15a84:	ldr	lr, [r0, #20]
   15a88:	ldr	ip, [r0, #16]
   15a8c:	cmp	lr, ip
   15a90:	bne	15a70 <__assert_fail@plt+0x4adc>
   15a94:	ldr	r8, [r0, #36]	; 0x24
   15a98:	cmp	r8, #0
   15a9c:	bne	15a70 <__assert_fail@plt+0x4adc>
   15aa0:	mov	r6, r2
   15aa4:	mov	r7, r3
   15aa8:	bl	10eec <fileno@plt>
   15aac:	mov	r2, r6
   15ab0:	mov	r3, r7
   15ab4:	str	r5, [sp]
   15ab8:	bl	10e14 <lseek64@plt>
   15abc:	mvn	r3, #0
   15ac0:	mvn	r2, #0
   15ac4:	cmp	r1, r3
   15ac8:	cmpeq	r0, r2
   15acc:	beq	15aec <__assert_fail@plt+0x4b58>
   15ad0:	ldr	r3, [r4]
   15ad4:	strd	r0, [r4, #80]	; 0x50
   15ad8:	mov	r0, r8
   15adc:	bic	r3, r3, #16
   15ae0:	str	r3, [r4]
   15ae4:	add	sp, sp, #8
   15ae8:	pop	{r4, r5, r6, r7, r8, pc}
   15aec:	mvn	r0, #0
   15af0:	b	15ae4 <__assert_fail@plt+0x4b50>
   15af4:	push	{r4, r5, r6, r7, r8, lr}
   15af8:	subs	r7, r0, #0
   15afc:	ldr	r5, [pc, #108]	; 15b70 <__assert_fail@plt+0x4bdc>
   15b00:	sub	sp, sp, #8
   15b04:	mov	r8, r1
   15b08:	ldr	r1, [r5]
   15b0c:	moveq	r7, sp
   15b10:	str	r1, [sp, #4]
   15b14:	mov	r0, r7
   15b18:	mov	r1, r8
   15b1c:	mov	r6, r2
   15b20:	bl	10e38 <mbrtowc@plt>
   15b24:	cmp	r6, #0
   15b28:	cmnne	r0, #3
   15b2c:	mov	r4, r0
   15b30:	bhi	15b50 <__assert_fail@plt+0x4bbc>
   15b34:	ldr	r2, [sp, #4]
   15b38:	ldr	r3, [r5]
   15b3c:	mov	r0, r4
   15b40:	cmp	r2, r3
   15b44:	bne	15b6c <__assert_fail@plt+0x4bd8>
   15b48:	add	sp, sp, #8
   15b4c:	pop	{r4, r5, r6, r7, r8, pc}
   15b50:	mov	r0, #0
   15b54:	bl	15be8 <__assert_fail@plt+0x4c54>
   15b58:	cmp	r0, #0
   15b5c:	moveq	r4, #1
   15b60:	ldrbeq	r3, [r8]
   15b64:	streq	r3, [r7]
   15b68:	b	15b34 <__assert_fail@plt+0x4ba0>
   15b6c:	bl	10dd8 <__stack_chk_fail@plt>
   15b70:	andeq	r6, r2, r8, lsl #30
   15b74:	push	{r4, r5, r6, lr}
   15b78:	mov	r4, r0
   15b7c:	bl	10e2c <__fpending@plt>
   15b80:	ldr	r5, [r4]
   15b84:	and	r5, r5, #32
   15b88:	mov	r6, r0
   15b8c:	mov	r0, r4
   15b90:	bl	15954 <__assert_fail@plt+0x49c0>
   15b94:	cmp	r5, #0
   15b98:	mov	r4, r0
   15b9c:	bne	15bc8 <__assert_fail@plt+0x4c34>
   15ba0:	cmp	r0, #0
   15ba4:	beq	15bc0 <__assert_fail@plt+0x4c2c>
   15ba8:	cmp	r6, #0
   15bac:	bne	15be0 <__assert_fail@plt+0x4c4c>
   15bb0:	bl	10ebc <__errno_location@plt>
   15bb4:	ldr	r4, [r0]
   15bb8:	subs	r4, r4, #9
   15bbc:	mvnne	r4, #0
   15bc0:	mov	r0, r4
   15bc4:	pop	{r4, r5, r6, pc}
   15bc8:	cmp	r0, #0
   15bcc:	bne	15be0 <__assert_fail@plt+0x4c4c>
   15bd0:	bl	10ebc <__errno_location@plt>
   15bd4:	str	r4, [r0]
   15bd8:	mvn	r4, #0
   15bdc:	b	15bc0 <__assert_fail@plt+0x4c2c>
   15be0:	mvn	r4, #0
   15be4:	b	15bc0 <__assert_fail@plt+0x4c2c>
   15be8:	push	{r4, lr}
   15bec:	mov	r1, #0
   15bf0:	bl	10f34 <setlocale@plt>
   15bf4:	subs	r4, r0, #0
   15bf8:	beq	15c24 <__assert_fail@plt+0x4c90>
   15bfc:	ldr	r1, [pc, #40]	; 15c2c <__assert_fail@plt+0x4c98>
   15c00:	bl	10d48 <strcmp@plt>
   15c04:	cmp	r0, #0
   15c08:	popeq	{r4, pc}
   15c0c:	mov	r0, r4
   15c10:	ldr	r1, [pc, #24]	; 15c30 <__assert_fail@plt+0x4c9c>
   15c14:	bl	10d48 <strcmp@plt>
   15c18:	adds	r0, r0, #0
   15c1c:	movne	r0, #1
   15c20:	pop	{r4, pc}
   15c24:	mov	r0, #1
   15c28:	pop	{r4, pc}
   15c2c:	andeq	r6, r1, r4, lsr #22
   15c30:	andeq	r6, r1, r8, lsr #22
   15c34:	push	{r4, lr}
   15c38:	mov	r0, #14
   15c3c:	bl	10f4c <nl_langinfo@plt>
   15c40:	cmp	r0, #0
   15c44:	beq	15c5c <__assert_fail@plt+0x4cc8>
   15c48:	ldrb	r2, [r0]
   15c4c:	ldr	r3, [pc, #16]	; 15c64 <__assert_fail@plt+0x4cd0>
   15c50:	cmp	r2, #0
   15c54:	moveq	r0, r3
   15c58:	pop	{r4, pc}
   15c5c:	ldr	r0, [pc]	; 15c64 <__assert_fail@plt+0x4cd0>
   15c60:	pop	{r4, pc}
   15c64:	andeq	r6, r1, r0, lsr fp
   15c68:	subs	r2, r1, #1
   15c6c:	bxeq	lr
   15c70:	bcc	15e48 <__assert_fail@plt+0x4eb4>
   15c74:	cmp	r0, r1
   15c78:	bls	15e2c <__assert_fail@plt+0x4e98>
   15c7c:	tst	r1, r2
   15c80:	beq	15e38 <__assert_fail@plt+0x4ea4>
   15c84:	clz	r3, r0
   15c88:	clz	r2, r1
   15c8c:	sub	r3, r2, r3
   15c90:	rsbs	r3, r3, #31
   15c94:	addne	r3, r3, r3, lsl #1
   15c98:	mov	r2, #0
   15c9c:	addne	pc, pc, r3, lsl #2
   15ca0:	nop			; (mov r0, r0)
   15ca4:	cmp	r0, r1, lsl #31
   15ca8:	adc	r2, r2, r2
   15cac:	subcs	r0, r0, r1, lsl #31
   15cb0:	cmp	r0, r1, lsl #30
   15cb4:	adc	r2, r2, r2
   15cb8:	subcs	r0, r0, r1, lsl #30
   15cbc:	cmp	r0, r1, lsl #29
   15cc0:	adc	r2, r2, r2
   15cc4:	subcs	r0, r0, r1, lsl #29
   15cc8:	cmp	r0, r1, lsl #28
   15ccc:	adc	r2, r2, r2
   15cd0:	subcs	r0, r0, r1, lsl #28
   15cd4:	cmp	r0, r1, lsl #27
   15cd8:	adc	r2, r2, r2
   15cdc:	subcs	r0, r0, r1, lsl #27
   15ce0:	cmp	r0, r1, lsl #26
   15ce4:	adc	r2, r2, r2
   15ce8:	subcs	r0, r0, r1, lsl #26
   15cec:	cmp	r0, r1, lsl #25
   15cf0:	adc	r2, r2, r2
   15cf4:	subcs	r0, r0, r1, lsl #25
   15cf8:	cmp	r0, r1, lsl #24
   15cfc:	adc	r2, r2, r2
   15d00:	subcs	r0, r0, r1, lsl #24
   15d04:	cmp	r0, r1, lsl #23
   15d08:	adc	r2, r2, r2
   15d0c:	subcs	r0, r0, r1, lsl #23
   15d10:	cmp	r0, r1, lsl #22
   15d14:	adc	r2, r2, r2
   15d18:	subcs	r0, r0, r1, lsl #22
   15d1c:	cmp	r0, r1, lsl #21
   15d20:	adc	r2, r2, r2
   15d24:	subcs	r0, r0, r1, lsl #21
   15d28:	cmp	r0, r1, lsl #20
   15d2c:	adc	r2, r2, r2
   15d30:	subcs	r0, r0, r1, lsl #20
   15d34:	cmp	r0, r1, lsl #19
   15d38:	adc	r2, r2, r2
   15d3c:	subcs	r0, r0, r1, lsl #19
   15d40:	cmp	r0, r1, lsl #18
   15d44:	adc	r2, r2, r2
   15d48:	subcs	r0, r0, r1, lsl #18
   15d4c:	cmp	r0, r1, lsl #17
   15d50:	adc	r2, r2, r2
   15d54:	subcs	r0, r0, r1, lsl #17
   15d58:	cmp	r0, r1, lsl #16
   15d5c:	adc	r2, r2, r2
   15d60:	subcs	r0, r0, r1, lsl #16
   15d64:	cmp	r0, r1, lsl #15
   15d68:	adc	r2, r2, r2
   15d6c:	subcs	r0, r0, r1, lsl #15
   15d70:	cmp	r0, r1, lsl #14
   15d74:	adc	r2, r2, r2
   15d78:	subcs	r0, r0, r1, lsl #14
   15d7c:	cmp	r0, r1, lsl #13
   15d80:	adc	r2, r2, r2
   15d84:	subcs	r0, r0, r1, lsl #13
   15d88:	cmp	r0, r1, lsl #12
   15d8c:	adc	r2, r2, r2
   15d90:	subcs	r0, r0, r1, lsl #12
   15d94:	cmp	r0, r1, lsl #11
   15d98:	adc	r2, r2, r2
   15d9c:	subcs	r0, r0, r1, lsl #11
   15da0:	cmp	r0, r1, lsl #10
   15da4:	adc	r2, r2, r2
   15da8:	subcs	r0, r0, r1, lsl #10
   15dac:	cmp	r0, r1, lsl #9
   15db0:	adc	r2, r2, r2
   15db4:	subcs	r0, r0, r1, lsl #9
   15db8:	cmp	r0, r1, lsl #8
   15dbc:	adc	r2, r2, r2
   15dc0:	subcs	r0, r0, r1, lsl #8
   15dc4:	cmp	r0, r1, lsl #7
   15dc8:	adc	r2, r2, r2
   15dcc:	subcs	r0, r0, r1, lsl #7
   15dd0:	cmp	r0, r1, lsl #6
   15dd4:	adc	r2, r2, r2
   15dd8:	subcs	r0, r0, r1, lsl #6
   15ddc:	cmp	r0, r1, lsl #5
   15de0:	adc	r2, r2, r2
   15de4:	subcs	r0, r0, r1, lsl #5
   15de8:	cmp	r0, r1, lsl #4
   15dec:	adc	r2, r2, r2
   15df0:	subcs	r0, r0, r1, lsl #4
   15df4:	cmp	r0, r1, lsl #3
   15df8:	adc	r2, r2, r2
   15dfc:	subcs	r0, r0, r1, lsl #3
   15e00:	cmp	r0, r1, lsl #2
   15e04:	adc	r2, r2, r2
   15e08:	subcs	r0, r0, r1, lsl #2
   15e0c:	cmp	r0, r1, lsl #1
   15e10:	adc	r2, r2, r2
   15e14:	subcs	r0, r0, r1, lsl #1
   15e18:	cmp	r0, r1
   15e1c:	adc	r2, r2, r2
   15e20:	subcs	r0, r0, r1
   15e24:	mov	r0, r2
   15e28:	bx	lr
   15e2c:	moveq	r0, #1
   15e30:	movne	r0, #0
   15e34:	bx	lr
   15e38:	clz	r2, r1
   15e3c:	rsb	r2, r2, #31
   15e40:	lsr	r0, r0, r2
   15e44:	bx	lr
   15e48:	cmp	r0, #0
   15e4c:	mvnne	r0, #0
   15e50:	b	15e74 <__assert_fail@plt+0x4ee0>
   15e54:	cmp	r1, #0
   15e58:	beq	15e48 <__assert_fail@plt+0x4eb4>
   15e5c:	push	{r0, r1, lr}
   15e60:	bl	15c68 <__assert_fail@plt+0x4cd4>
   15e64:	pop	{r1, r2, lr}
   15e68:	mul	r3, r2, r0
   15e6c:	sub	r1, r1, r3
   15e70:	bx	lr
   15e74:	push	{r1, lr}
   15e78:	mov	r0, #8
   15e7c:	bl	10d3c <raise@plt>
   15e80:	pop	{r1, pc}
   15e84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e88:	mov	r7, r0
   15e8c:	ldr	r6, [pc, #72]	; 15edc <__assert_fail@plt+0x4f48>
   15e90:	ldr	r5, [pc, #72]	; 15ee0 <__assert_fail@plt+0x4f4c>
   15e94:	add	r6, pc, r6
   15e98:	add	r5, pc, r5
   15e9c:	sub	r6, r6, r5
   15ea0:	mov	r8, r1
   15ea4:	mov	r9, r2
   15ea8:	bl	10d04 <calloc@plt-0x20>
   15eac:	asrs	r6, r6, #2
   15eb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15eb4:	mov	r4, #0
   15eb8:	add	r4, r4, #1
   15ebc:	ldr	r3, [r5], #4
   15ec0:	mov	r2, r9
   15ec4:	mov	r1, r8
   15ec8:	mov	r0, r7
   15ecc:	blx	r3
   15ed0:	cmp	r6, r4
   15ed4:	bne	15eb8 <__assert_fail@plt+0x4f24>
   15ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15edc:	andeq	r1, r1, r8, rrx
   15ee0:	andeq	r1, r1, r0, rrx
   15ee4:	bx	lr
   15ee8:	ldr	r3, [pc, #12]	; 15efc <__assert_fail@plt+0x4f68>
   15eec:	mov	r1, #0
   15ef0:	add	r3, pc, r3
   15ef4:	ldr	r2, [r3]
   15ef8:	b	10ec8 <__cxa_atexit@plt>
   15efc:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

00015f00 <.fini>:
   15f00:	push	{r3, lr}
   15f04:	pop	{r3, pc}
