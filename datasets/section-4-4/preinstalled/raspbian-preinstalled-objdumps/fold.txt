
raspbian-preinstalled/fold:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	11230 <__assert_fail@plt+0x2d4>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <calloc@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <calloc@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r6, r1, ip, lsl #6

00010cf8 <calloc@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <fputs_unlocked@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <posix_fadvise64@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <fflush@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <memmove@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <free@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <_exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <memcpy@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <__strtoull_internal@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <mbsinit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <fwrite_unlocked@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <memcmp@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <dcgettext@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <__stack_chk_fail@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <realloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <textdomain@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <iswprint@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <fwrite@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <lseek64@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <__ctype_get_mb_cur_max@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <__fpending@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <mbrtowc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <error@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <malloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__libc_start_main@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__freading@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <__gmon_start__@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <getopt_long@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <__ctype_b_loc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <exit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <strlen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <strchr@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <__errno_location@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <__uflow@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <__overflow@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <setlocale@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <strrchr@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <nl_langinfo@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <fopen64@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <bindtextdomain@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <strncmp@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <abort@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <__assert_fail@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

Disassembly of section .text:

00010f68 <.text>:
   10f68:	ldr	r3, [pc, #572]	; 111ac <__assert_fail@plt+0x250>
   10f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f70:	sub	sp, sp, #36	; 0x24
   10f74:	ldr	r3, [r3]
   10f78:	mov	r6, r0
   10f7c:	ldr	r0, [r1]
   10f80:	str	r3, [sp, #28]
   10f84:	mov	r5, r1
   10f88:	bl	11b44 <__assert_fail@plt+0xbe8>
   10f8c:	ldr	r1, [pc, #540]	; 111b0 <__assert_fail@plt+0x254>
   10f90:	mov	r0, #6
   10f94:	bl	10f08 <setlocale@plt>
   10f98:	ldr	r7, [pc, #532]	; 111b4 <__assert_fail@plt+0x258>
   10f9c:	ldr	r1, [pc, #532]	; 111b8 <__assert_fail@plt+0x25c>
   10fa0:	ldr	r0, [pc, #532]	; 111bc <__assert_fail@plt+0x260>
   10fa4:	ldr	r8, [pc, #532]	; 111c0 <__assert_fail@plt+0x264>
   10fa8:	ldr	fp, [pc, #532]	; 111c4 <__assert_fail@plt+0x268>
   10fac:	ldr	r9, [pc, #532]	; 111c8 <__assert_fail@plt+0x26c>
   10fb0:	bl	10f38 <bindtextdomain@plt>
   10fb4:	mov	sl, #80	; 0x50
   10fb8:	ldr	r0, [pc, #508]	; 111bc <__assert_fail@plt+0x260>
   10fbc:	mov	r4, #0
   10fc0:	bl	10dc4 <textdomain@plt>
   10fc4:	ldr	r0, [pc, #512]	; 111cc <__assert_fail@plt+0x270>
   10fc8:	bl	15694 <__assert_fail@plt+0x4738>
   10fcc:	strb	r4, [r7, #1]
   10fd0:	strb	r4, [r7]
   10fd4:	strb	r4, [r7, #12]
   10fd8:	str	r4, [sp]
   10fdc:	mov	r3, r8
   10fe0:	ldr	r2, [pc, #488]	; 111d0 <__assert_fail@plt+0x274>
   10fe4:	mov	r1, r5
   10fe8:	mov	r0, r6
   10fec:	bl	10e54 <getopt_long@plt>
   10ff0:	cmn	r0, #1
   10ff4:	beq	110f4 <__assert_fail@plt+0x198>
   10ff8:	cmp	r0, #57	; 0x39
   10ffc:	ble	11058 <__assert_fail@plt+0xfc>
   11000:	cmp	r0, #115	; 0x73
   11004:	beq	110b8 <__assert_fail@plt+0x15c>
   11008:	cmp	r0, #119	; 0x77
   1100c:	bne	11098 <__assert_fail@plt+0x13c>
   11010:	mov	r2, #5
   11014:	mov	r1, fp
   11018:	mov	r0, #0
   1101c:	ldr	sl, [r9]
   11020:	bl	10da0 <dcgettext@plt>
   11024:	ldr	r3, [pc, #388]	; 111b0 <__assert_fail@plt+0x254>
   11028:	mvn	r2, #9
   1102c:	str	r3, [sp, #8]
   11030:	mov	r3, #0
   11034:	str	r4, [sp, #16]
   11038:	strd	r2, [sp]
   1103c:	mov	r2, #1
   11040:	mov	r3, #0
   11044:	str	r0, [sp, #12]
   11048:	mov	r0, sl
   1104c:	bl	146f0 <__assert_fail@plt+0x3794>
   11050:	mov	sl, r0
   11054:	b	10fd8 <__assert_fail@plt+0x7c>
   11058:	cmp	r0, #48	; 0x30
   1105c:	bge	110c4 <__assert_fail@plt+0x168>
   11060:	cmn	r0, #3
   11064:	bne	110a8 <__assert_fail@plt+0x14c>
   11068:	ldr	r1, [pc, #356]	; 111d4 <__assert_fail@plt+0x278>
   1106c:	ldr	r3, [pc, #356]	; 111d8 <__assert_fail@plt+0x27c>
   11070:	ldr	r2, [pc, #356]	; 111dc <__assert_fail@plt+0x280>
   11074:	str	r4, [sp, #4]
   11078:	ldr	r0, [r1]
   1107c:	ldr	r3, [r3]
   11080:	ldr	r1, [pc, #344]	; 111e0 <__assert_fail@plt+0x284>
   11084:	str	r2, [sp]
   11088:	ldr	r2, [pc, #340]	; 111e4 <__assert_fail@plt+0x288>
   1108c:	bl	14214 <__assert_fail@plt+0x32b8>
   11090:	mov	r0, #0
   11094:	bl	10e6c <exit@plt>
   11098:	cmp	r0, #98	; 0x62
   1109c:	beq	110e8 <__assert_fail@plt+0x18c>
   110a0:	mov	r0, #1
   110a4:	bl	116e0 <__assert_fail@plt+0x784>
   110a8:	cmn	r0, #2
   110ac:	bne	110a0 <__assert_fail@plt+0x144>
   110b0:	mov	r0, #0
   110b4:	bl	116e0 <__assert_fail@plt+0x784>
   110b8:	mov	r3, #1
   110bc:	strb	r3, [r7, #12]
   110c0:	b	10fd8 <__assert_fail@plt+0x7c>
   110c4:	ldr	r3, [r9]
   110c8:	cmp	r3, #0
   110cc:	subne	r3, r3, #1
   110d0:	addeq	r2, sp, #24
   110d4:	strne	r3, [r9]
   110d8:	strbeq	r0, [sp, #24]
   110dc:	strbeq	r3, [sp, #25]
   110e0:	streq	r2, [r9]
   110e4:	b	11010 <__assert_fail@plt+0xb4>
   110e8:	mov	r3, #1
   110ec:	strb	r3, [r7]
   110f0:	b	10fd8 <__assert_fail@plt+0x7c>
   110f4:	ldr	r3, [pc, #236]	; 111e8 <__assert_fail@plt+0x28c>
   110f8:	ldr	r3, [r3]
   110fc:	cmp	r3, r6
   11100:	beq	11194 <__assert_fail@plt+0x238>
   11104:	movge	r4, #1
   11108:	bge	1113c <__assert_fail@plt+0x1e0>
   1110c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11110:	add	r6, r5, r6, lsl #2
   11114:	sub	r6, r6, #4
   11118:	add	r5, r5, r3, lsl #2
   1111c:	mov	r4, #1
   11120:	ldr	r0, [r5, #4]!
   11124:	mov	r1, sl
   11128:	bl	11338 <__assert_fail@plt+0x3dc>
   1112c:	cmp	r5, r6
   11130:	and	r4, r4, r0
   11134:	uxtb	r4, r4
   11138:	bne	11120 <__assert_fail@plt+0x1c4>
   1113c:	ldrb	r3, [r7, #1]
   11140:	cmp	r3, #0
   11144:	bne	1116c <__assert_fail@plt+0x210>
   11148:	ldr	r3, [pc, #92]	; 111ac <__assert_fail@plt+0x250>
   1114c:	ldr	r2, [sp, #28]
   11150:	eor	r0, r4, #1
   11154:	ldr	r3, [r3]
   11158:	uxtb	r0, r0
   1115c:	cmp	r2, r3
   11160:	bne	111a8 <__assert_fail@plt+0x24c>
   11164:	add	sp, sp, #36	; 0x24
   11168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1116c:	ldr	r3, [pc, #120]	; 111ec <__assert_fail@plt+0x290>
   11170:	ldr	r0, [r3]
   11174:	bl	15100 <__assert_fail@plt+0x41a4>
   11178:	cmn	r0, #1
   1117c:	bne	11148 <__assert_fail@plt+0x1ec>
   11180:	bl	10e90 <__errno_location@plt>
   11184:	ldr	r2, [pc, #100]	; 111f0 <__assert_fail@plt+0x294>
   11188:	ldr	r1, [r0]
   1118c:	mov	r0, #1
   11190:	bl	10e18 <error@plt>
   11194:	mov	r1, sl
   11198:	ldr	r0, [pc, #80]	; 111f0 <__assert_fail@plt+0x294>
   1119c:	bl	11338 <__assert_fail@plt+0x3dc>
   111a0:	mov	r4, r0
   111a4:	b	1113c <__assert_fail@plt+0x1e0>
   111a8:	bl	10dac <__stack_chk_fail@plt>
   111ac:	andeq	r6, r2, r8, lsl #30
   111b0:	andeq	r5, r1, ip, asr #15
   111b4:	andeq	r7, r2, r8, asr r1
   111b8:	andeq	r5, r1, ip, ror sl
   111bc:	ldrdeq	r5, [r1], -r0
   111c0:	strdeq	r5, [r1], -r0
   111c4:	muleq	r1, r0, sl
   111c8:	andeq	r7, r2, r0, asr r1
   111cc:	andeq	r1, r1, r4, lsr sl
   111d0:	andeq	r5, r1, r0, asr r7
   111d4:	andeq	r7, r2, ip, asr #2
   111d8:	andeq	r7, r2, r8, ror #1
   111dc:	andeq	r5, r1, ip, lsr #21
   111e0:	andeq	r5, r1, ip, ror r7
   111e4:	andeq	r5, r1, ip, asr #19
   111e8:	andeq	r7, r2, r8, lsr r1
   111ec:	andeq	r7, r2, r8, asr #2
   111f0:	andeq	r5, r1, r4, ror r7
   111f4:	mov	fp, #0
   111f8:	mov	lr, #0
   111fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11200:	mov	r2, sp
   11204:	push	{r2}		; (str r2, [sp, #-4]!)
   11208:	push	{r0}		; (str r0, [sp, #-4]!)
   1120c:	ldr	ip, [pc, #16]	; 11224 <__assert_fail@plt+0x2c8>
   11210:	push	{ip}		; (str ip, [sp, #-4]!)
   11214:	ldr	r0, [pc, #12]	; 11228 <__assert_fail@plt+0x2cc>
   11218:	ldr	r3, [pc, #12]	; 1122c <__assert_fail@plt+0x2d0>
   1121c:	bl	10e30 <__libc_start_main@plt>
   11220:	bl	10f50 <abort@plt>
   11224:	muleq	r1, r0, r6
   11228:	andeq	r0, r1, r8, ror #30
   1122c:	andeq	r5, r1, r0, lsr r6
   11230:	ldr	r3, [pc, #20]	; 1124c <__assert_fail@plt+0x2f0>
   11234:	ldr	r2, [pc, #20]	; 11250 <__assert_fail@plt+0x2f4>
   11238:	add	r3, pc, r3
   1123c:	ldr	r2, [r3, r2]
   11240:	cmp	r2, #0
   11244:	bxeq	lr
   11248:	b	10e48 <__gmon_start__@plt>
   1124c:	andeq	r5, r1, r0, asr #27
   11250:	ldrdeq	r0, [r0], -ip
   11254:	ldr	r0, [pc, #24]	; 11274 <__assert_fail@plt+0x318>
   11258:	ldr	r3, [pc, #24]	; 11278 <__assert_fail@plt+0x31c>
   1125c:	cmp	r3, r0
   11260:	bxeq	lr
   11264:	ldr	r3, [pc, #16]	; 1127c <__assert_fail@plt+0x320>
   11268:	cmp	r3, #0
   1126c:	bxeq	lr
   11270:	bx	r3
   11274:	andeq	r7, r2, r0, lsr r1
   11278:	andeq	r7, r2, r0, lsr r1
   1127c:	andeq	r0, r0, r0
   11280:	ldr	r0, [pc, #36]	; 112ac <__assert_fail@plt+0x350>
   11284:	ldr	r1, [pc, #36]	; 112b0 <__assert_fail@plt+0x354>
   11288:	sub	r1, r1, r0
   1128c:	asr	r1, r1, #2
   11290:	add	r1, r1, r1, lsr #31
   11294:	asrs	r1, r1, #1
   11298:	bxeq	lr
   1129c:	ldr	r3, [pc, #16]	; 112b4 <__assert_fail@plt+0x358>
   112a0:	cmp	r3, #0
   112a4:	bxeq	lr
   112a8:	bx	r3
   112ac:	andeq	r7, r2, r0, lsr r1
   112b0:	andeq	r7, r2, r0, lsr r1
   112b4:	andeq	r0, r0, r0
   112b8:	push	{r4, lr}
   112bc:	ldr	r4, [pc, #24]	; 112dc <__assert_fail@plt+0x380>
   112c0:	ldrb	r3, [r4]
   112c4:	cmp	r3, #0
   112c8:	popne	{r4, pc}
   112cc:	bl	11254 <__assert_fail@plt+0x2f8>
   112d0:	mov	r3, #1
   112d4:	strb	r3, [r4]
   112d8:	pop	{r4, pc}
   112dc:	andeq	r7, r2, r4, asr r1
   112e0:	b	11280 <__assert_fail@plt+0x324>
   112e4:	ldr	r3, [pc, #72]	; 11334 <__assert_fail@plt+0x3d8>
   112e8:	ldrb	r3, [r3]
   112ec:	cmp	r3, #0
   112f0:	bne	1130c <__assert_fail@plt+0x3b0>
   112f4:	cmp	r1, #8
   112f8:	beq	11314 <__assert_fail@plt+0x3b8>
   112fc:	cmp	r1, #13
   11300:	beq	1132c <__assert_fail@plt+0x3d0>
   11304:	cmp	r1, #9
   11308:	beq	11320 <__assert_fail@plt+0x3c4>
   1130c:	add	r0, r0, #1
   11310:	bx	lr
   11314:	cmp	r0, #0
   11318:	subne	r0, r0, #1
   1131c:	bx	lr
   11320:	bic	r0, r0, #7
   11324:	add	r0, r0, #8
   11328:	bx	lr
   1132c:	mov	r0, r3
   11330:	bx	lr
   11334:	andeq	r7, r2, r8, asr r1
   11338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1133c:	sub	sp, sp, #20
   11340:	mov	sl, r1
   11344:	ldr	r1, [pc, #888]	; 116c4 <__assert_fail@plt+0x768>
   11348:	str	r0, [sp, #8]
   1134c:	bl	10d1c <strcmp@plt>
   11350:	cmp	r0, #0
   11354:	bne	1165c <__assert_fail@plt+0x700>
   11358:	ldr	r1, [pc, #872]	; 116c8 <__assert_fail@plt+0x76c>
   1135c:	ldr	r3, [pc, #872]	; 116cc <__assert_fail@plt+0x770>
   11360:	mov	r2, #1
   11364:	ldr	r8, [r1]
   11368:	strb	r2, [r3, #1]
   1136c:	bl	10e90 <__errno_location@plt>
   11370:	cmp	r8, #0
   11374:	str	r0, [sp, #12]
   11378:	beq	1167c <__assert_fail@plt+0x720>
   1137c:	mov	r1, #2
   11380:	mov	r0, r8
   11384:	bl	11b10 <__assert_fail@plt+0xbb4>
   11388:	mov	r4, #0
   1138c:	ldr	r9, [pc, #824]	; 116cc <__assert_fail@plt+0x770>
   11390:	ldr	fp, [pc, #824]	; 116d0 <__assert_fail@plt+0x774>
   11394:	mov	r5, r4
   11398:	ldr	r3, [r8, #4]
   1139c:	ldr	r2, [r8, #8]
   113a0:	cmp	r3, r2
   113a4:	bcs	11418 <__assert_fail@plt+0x4bc>
   113a8:	add	r2, r3, #1
   113ac:	str	r2, [r8, #4]
   113b0:	ldrb	r6, [r3]
   113b4:	ldr	r3, [r9, #8]
   113b8:	add	r2, r4, #1
   113bc:	cmp	r2, r3
   113c0:	ldr	r7, [r9, #4]
   113c4:	bcs	114d0 <__assert_fail@plt+0x574>
   113c8:	cmp	r6, #10
   113cc:	uxtbne	r6, r6
   113d0:	movne	r0, r5
   113d4:	beq	114b0 <__assert_fail@plt+0x554>
   113d8:	mov	r1, r6
   113dc:	bl	112e4 <__assert_fail@plt+0x388>
   113e0:	cmp	r0, sl
   113e4:	bls	114a0 <__assert_fail@plt+0x544>
   113e8:	ldrb	r3, [r9, #12]
   113ec:	cmp	r3, #0
   113f0:	bne	114f0 <__assert_fail@plt+0x594>
   113f4:	cmp	r4, #0
   113f8:	bne	11468 <__assert_fail@plt+0x50c>
   113fc:	strb	r6, [r7]
   11400:	ldr	r3, [r8, #4]
   11404:	ldr	r2, [r8, #8]
   11408:	mov	r5, r0
   1140c:	cmp	r3, r2
   11410:	mov	r4, #1
   11414:	bcc	113a8 <__assert_fail@plt+0x44c>
   11418:	mov	r0, r8
   1141c:	bl	10ef0 <__uflow@plt>
   11420:	cmn	r0, #1
   11424:	mov	r6, r0
   11428:	bne	113b4 <__assert_fail@plt+0x458>
   1142c:	ldr	r3, [sp, #12]
   11430:	cmp	r4, #0
   11434:	ldr	r5, [r3]
   11438:	bne	115a4 <__assert_fail@plt+0x648>
   1143c:	ldr	r0, [r8]
   11440:	ands	r4, r0, #32
   11444:	bne	115cc <__assert_fail@plt+0x670>
   11448:	ldr	r1, [pc, #628]	; 116c4 <__assert_fail@plt+0x768>
   1144c:	ldr	r0, [sp, #8]
   11450:	bl	10d1c <strcmp@plt>
   11454:	cmp	r0, #0
   11458:	bne	11618 <__assert_fail@plt+0x6bc>
   1145c:	mov	r0, #1
   11460:	add	sp, sp, #20
   11464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11468:	mov	r3, #10
   1146c:	strb	r3, [r7, r4]
   11470:	add	r2, r4, #1
   11474:	mov	r0, r7
   11478:	ldr	r3, [fp]
   1147c:	mov	r1, #1
   11480:	mov	r4, #0
   11484:	bl	10d88 <fwrite_unlocked@plt>
   11488:	mov	r0, r4
   1148c:	mov	r1, r6
   11490:	bl	112e4 <__assert_fail@plt+0x388>
   11494:	ldr	r7, [r9, #4]
   11498:	cmp	r0, sl
   1149c:	bhi	113e8 <__assert_fail@plt+0x48c>
   114a0:	strb	r6, [r7, r4]
   114a4:	mov	r5, r0
   114a8:	add	r4, r4, #1
   114ac:	b	11398 <__assert_fail@plt+0x43c>
   114b0:	strb	r6, [r7, r4]
   114b4:	mov	r0, r7
   114b8:	ldr	r3, [fp]
   114bc:	mov	r1, #1
   114c0:	mov	r4, #0
   114c4:	bl	10d88 <fwrite_unlocked@plt>
   114c8:	mov	r5, r4
   114cc:	b	11398 <__assert_fail@plt+0x43c>
   114d0:	mov	r0, r7
   114d4:	ldr	r1, [pc, #504]	; 116d4 <__assert_fail@plt+0x778>
   114d8:	str	r2, [sp, #4]
   114dc:	bl	14480 <__assert_fail@plt+0x3524>
   114e0:	ldr	r2, [sp, #4]
   114e4:	mov	r7, r0
   114e8:	str	r0, [r9, #4]
   114ec:	b	113c8 <__assert_fail@plt+0x46c>
   114f0:	cmp	r4, #0
   114f4:	beq	113fc <__assert_fail@plt+0x4a0>
   114f8:	bl	10e60 <__ctype_b_loc@plt>
   114fc:	mov	r5, r4
   11500:	add	r1, r7, r4
   11504:	ldr	r0, [r0]
   11508:	b	11514 <__assert_fail@plt+0x5b8>
   1150c:	subs	r5, r2, #0
   11510:	beq	11468 <__assert_fail@plt+0x50c>
   11514:	ldrb	r3, [r1, #-1]!
   11518:	sub	r2, r5, #1
   1151c:	lsl	r3, r3, #1
   11520:	ldrh	r3, [r0, r3]
   11524:	tst	r3, #1
   11528:	beq	1150c <__assert_fail@plt+0x5b0>
   1152c:	ldr	r3, [fp]
   11530:	mov	r2, r5
   11534:	mov	r0, r7
   11538:	mov	r1, #1
   1153c:	bl	10d88 <fwrite_unlocked@plt>
   11540:	ldr	r0, [fp]
   11544:	ldr	r2, [r0, #24]
   11548:	ldr	r3, [r0, #20]
   1154c:	cmp	r3, r2
   11550:	addcc	r2, r3, #1
   11554:	strcc	r2, [r0, #20]
   11558:	movcc	r2, #10
   1155c:	strbcc	r2, [r3]
   11560:	bcs	116b8 <__assert_fail@plt+0x75c>
   11564:	ldr	r7, [r9, #4]
   11568:	sub	r4, r4, r5
   1156c:	mov	r2, r4
   11570:	add	r1, r7, r5
   11574:	mov	r0, r7
   11578:	bl	10d40 <memmove@plt>
   1157c:	cmp	r4, #0
   11580:	beq	116b0 <__assert_fail@plt+0x754>
   11584:	sub	r5, r7, #1
   11588:	add	r2, r5, r4
   1158c:	mov	r0, #0
   11590:	ldrb	r1, [r5, #1]!
   11594:	bl	112e4 <__assert_fail@plt+0x388>
   11598:	cmp	r2, r5
   1159c:	bne	11590 <__assert_fail@plt+0x634>
   115a0:	b	113d8 <__assert_fail@plt+0x47c>
   115a4:	ldr	r1, [pc, #288]	; 116cc <__assert_fail@plt+0x770>
   115a8:	ldr	r3, [pc, #288]	; 116d0 <__assert_fail@plt+0x774>
   115ac:	mov	r2, r4
   115b0:	ldr	r0, [r1, #4]
   115b4:	ldr	r3, [r3]
   115b8:	mov	r1, #1
   115bc:	bl	10d88 <fwrite_unlocked@plt>
   115c0:	ldr	r0, [r8]
   115c4:	ands	r4, r0, #32
   115c8:	beq	11448 <__assert_fail@plt+0x4ec>
   115cc:	ldr	r4, [sp, #8]
   115d0:	mov	r1, #3
   115d4:	mov	r2, r4
   115d8:	mov	r0, #0
   115dc:	bl	13bdc <__assert_fail@plt+0x2c80>
   115e0:	mov	r1, r5
   115e4:	ldr	r2, [pc, #236]	; 116d8 <__assert_fail@plt+0x77c>
   115e8:	mov	r3, r0
   115ec:	mov	r0, #0
   115f0:	bl	10e18 <error@plt>
   115f4:	mov	r0, r4
   115f8:	ldr	r1, [pc, #196]	; 116c4 <__assert_fail@plt+0x768>
   115fc:	bl	10d1c <strcmp@plt>
   11600:	cmp	r0, #0
   11604:	beq	11460 <__assert_fail@plt+0x504>
   11608:	mov	r0, r8
   1160c:	bl	15100 <__assert_fail@plt+0x41a4>
   11610:	mov	r0, #0
   11614:	b	11460 <__assert_fail@plt+0x504>
   11618:	mov	r0, r8
   1161c:	bl	15100 <__assert_fail@plt+0x41a4>
   11620:	cmn	r0, #1
   11624:	bne	1145c <__assert_fail@plt+0x500>
   11628:	ldr	r3, [sp, #12]
   1162c:	ldr	r2, [sp, #8]
   11630:	mov	r1, #3
   11634:	mov	r0, r4
   11638:	ldr	r5, [r3]
   1163c:	bl	13bdc <__assert_fail@plt+0x2c80>
   11640:	mov	r1, r5
   11644:	ldr	r2, [pc, #140]	; 116d8 <__assert_fail@plt+0x77c>
   11648:	mov	r3, r0
   1164c:	mov	r0, r4
   11650:	bl	10e18 <error@plt>
   11654:	mov	r0, r4
   11658:	b	11460 <__assert_fail@plt+0x504>
   1165c:	ldr	r1, [pc, #120]	; 116dc <__assert_fail@plt+0x780>
   11660:	ldr	r0, [sp, #8]
   11664:	bl	10f2c <fopen64@plt>
   11668:	mov	r8, r0
   1166c:	bl	10e90 <__errno_location@plt>
   11670:	cmp	r8, #0
   11674:	str	r0, [sp, #12]
   11678:	bne	1137c <__assert_fail@plt+0x420>
   1167c:	ldr	r4, [r0]
   11680:	ldr	r2, [sp, #8]
   11684:	mov	r1, #3
   11688:	mov	r0, r8
   1168c:	bl	13bdc <__assert_fail@plt+0x2c80>
   11690:	mov	r1, r4
   11694:	ldr	r2, [pc, #60]	; 116d8 <__assert_fail@plt+0x77c>
   11698:	mov	r3, r0
   1169c:	mov	r0, r8
   116a0:	bl	10e18 <error@plt>
   116a4:	mov	r0, r8
   116a8:	add	sp, sp, #20
   116ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116b0:	mov	r0, r4
   116b4:	b	113d8 <__assert_fail@plt+0x47c>
   116b8:	mov	r1, #10
   116bc:	bl	10efc <__overflow@plt>
   116c0:	b	11564 <__assert_fail@plt+0x608>
   116c4:	andeq	r5, r1, r4, ror r7
   116c8:	andeq	r7, r2, r8, asr #2
   116cc:	andeq	r7, r2, r8, asr r1
   116d0:	andeq	r7, r2, ip, asr #2
   116d4:	andeq	r7, r2, r0, ror #2
   116d8:	andeq	r5, r1, r8, ror #22
   116dc:	andeq	r5, r1, r8, ror r7
   116e0:	ldr	r3, [pc, #720]	; 119b8 <__assert_fail@plt+0xa5c>
   116e4:	push	{r7, lr}
   116e8:	sub	sp, sp, #64	; 0x40
   116ec:	ldr	r3, [r3]
   116f0:	subs	r4, r0, #0
   116f4:	str	r3, [sp, #60]	; 0x3c
   116f8:	beq	11734 <__assert_fail@plt+0x7d8>
   116fc:	ldr	r3, [pc, #696]	; 119bc <__assert_fail@plt+0xa60>
   11700:	mov	r2, #5
   11704:	ldr	r1, [pc, #692]	; 119c0 <__assert_fail@plt+0xa64>
   11708:	mov	r0, #0
   1170c:	ldr	r5, [r3]
   11710:	bl	10da0 <dcgettext@plt>
   11714:	ldr	r3, [pc, #680]	; 119c4 <__assert_fail@plt+0xa68>
   11718:	mov	r1, #1
   1171c:	ldr	r3, [r3]
   11720:	mov	r2, r0
   11724:	mov	r0, r5
   11728:	bl	10ecc <__fprintf_chk@plt>
   1172c:	mov	r0, r4
   11730:	bl	10e6c <exit@plt>
   11734:	mov	r2, #5
   11738:	ldr	r1, [pc, #648]	; 119c8 <__assert_fail@plt+0xa6c>
   1173c:	bl	10da0 <dcgettext@plt>
   11740:	ldr	r3, [pc, #636]	; 119c4 <__assert_fail@plt+0xa68>
   11744:	ldr	r5, [pc, #640]	; 119cc <__assert_fail@plt+0xa70>
   11748:	ldr	r2, [r3]
   1174c:	mov	r1, r0
   11750:	mov	r0, #1
   11754:	bl	10eb4 <__printf_chk@plt>
   11758:	mov	r2, #5
   1175c:	ldr	r1, [pc, #620]	; 119d0 <__assert_fail@plt+0xa74>
   11760:	mov	r0, r4
   11764:	bl	10da0 <dcgettext@plt>
   11768:	ldr	r1, [r5]
   1176c:	bl	10d04 <fputs_unlocked@plt>
   11770:	mov	r2, #5
   11774:	ldr	r1, [pc, #600]	; 119d4 <__assert_fail@plt+0xa78>
   11778:	mov	r0, r4
   1177c:	bl	10da0 <dcgettext@plt>
   11780:	ldr	r1, [r5]
   11784:	bl	10d04 <fputs_unlocked@plt>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #580]	; 119d8 <__assert_fail@plt+0xa7c>
   11790:	mov	r0, r4
   11794:	bl	10da0 <dcgettext@plt>
   11798:	ldr	r1, [r5]
   1179c:	bl	10d04 <fputs_unlocked@plt>
   117a0:	mov	r2, #5
   117a4:	ldr	r1, [pc, #560]	; 119dc <__assert_fail@plt+0xa80>
   117a8:	mov	r0, r4
   117ac:	bl	10da0 <dcgettext@plt>
   117b0:	ldr	r1, [r5]
   117b4:	bl	10d04 <fputs_unlocked@plt>
   117b8:	mov	r2, #5
   117bc:	ldr	r1, [pc, #540]	; 119e0 <__assert_fail@plt+0xa84>
   117c0:	mov	r0, r4
   117c4:	bl	10da0 <dcgettext@plt>
   117c8:	ldr	r1, [r5]
   117cc:	bl	10d04 <fputs_unlocked@plt>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #520]	; 119e4 <__assert_fail@plt+0xa88>
   117d8:	mov	r0, r4
   117dc:	bl	10da0 <dcgettext@plt>
   117e0:	ldr	r1, [r5]
   117e4:	bl	10d04 <fputs_unlocked@plt>
   117e8:	ldr	lr, [pc, #504]	; 119e8 <__assert_fail@plt+0xa8c>
   117ec:	add	ip, sp, #4
   117f0:	ldm	lr!, {r0, r1, r2, r3}
   117f4:	stmia	ip!, {r0, r1, r2, r3}
   117f8:	ldm	lr!, {r0, r1, r2, r3}
   117fc:	ldr	r6, [sp, #4]
   11800:	stmia	ip!, {r0, r1, r2, r3}
   11804:	cmp	r6, #0
   11808:	ldm	lr!, {r0, r1, r2, r3}
   1180c:	addeq	r5, sp, #4
   11810:	stmia	ip!, {r0, r1, r2, r3}
   11814:	ldm	lr, {r0, r1}
   11818:	stm	ip, {r0, r1}
   1181c:	beq	1184c <__assert_fail@plt+0x8f0>
   11820:	ldr	r7, [pc, #452]	; 119ec <__assert_fail@plt+0xa90>
   11824:	add	r5, sp, #4
   11828:	b	11838 <__assert_fail@plt+0x8dc>
   1182c:	ldr	r6, [r5, #8]!
   11830:	cmp	r6, #0
   11834:	beq	1184c <__assert_fail@plt+0x8f0>
   11838:	mov	r1, r6
   1183c:	mov	r0, r7
   11840:	bl	10d1c <strcmp@plt>
   11844:	cmp	r0, #0
   11848:	bne	1182c <__assert_fail@plt+0x8d0>
   1184c:	ldr	r5, [r5, #4]
   11850:	mov	r2, #5
   11854:	cmp	r5, #0
   11858:	ldr	r1, [pc, #400]	; 119f0 <__assert_fail@plt+0xa94>
   1185c:	beq	11904 <__assert_fail@plt+0x9a8>
   11860:	mov	r0, #0
   11864:	bl	10da0 <dcgettext@plt>
   11868:	ldr	r3, [pc, #388]	; 119f4 <__assert_fail@plt+0xa98>
   1186c:	ldr	r2, [pc, #388]	; 119f8 <__assert_fail@plt+0xa9c>
   11870:	mov	r1, r0
   11874:	mov	r0, #1
   11878:	bl	10eb4 <__printf_chk@plt>
   1187c:	mov	r1, #0
   11880:	mov	r0, #5
   11884:	bl	10f08 <setlocale@plt>
   11888:	cmp	r0, #0
   1188c:	ldreq	r6, [pc, #344]	; 119ec <__assert_fail@plt+0xa90>
   11890:	beq	118ac <__assert_fail@plt+0x950>
   11894:	mov	r2, #3
   11898:	ldr	r1, [pc, #348]	; 119fc <__assert_fail@plt+0xaa0>
   1189c:	bl	10f44 <strncmp@plt>
   118a0:	ldr	r6, [pc, #324]	; 119ec <__assert_fail@plt+0xa90>
   118a4:	cmp	r0, #0
   118a8:	bne	11994 <__assert_fail@plt+0xa38>
   118ac:	mov	r2, #5
   118b0:	ldr	r1, [pc, #328]	; 11a00 <__assert_fail@plt+0xaa4>
   118b4:	mov	r0, #0
   118b8:	bl	10da0 <dcgettext@plt>
   118bc:	ldr	r3, [pc, #296]	; 119ec <__assert_fail@plt+0xa90>
   118c0:	ldr	r2, [pc, #300]	; 119f4 <__assert_fail@plt+0xa98>
   118c4:	mov	r1, r0
   118c8:	mov	r0, #1
   118cc:	bl	10eb4 <__printf_chk@plt>
   118d0:	mov	r2, #5
   118d4:	ldr	r1, [pc, #296]	; 11a04 <__assert_fail@plt+0xaa8>
   118d8:	mov	r0, #0
   118dc:	bl	10da0 <dcgettext@plt>
   118e0:	ldr	r2, [pc, #288]	; 11a08 <__assert_fail@plt+0xaac>
   118e4:	cmp	r5, r6
   118e8:	ldr	r3, [pc, #284]	; 11a0c <__assert_fail@plt+0xab0>
   118ec:	movne	r3, r2
   118f0:	mov	r1, r0
   118f4:	mov	r2, r5
   118f8:	mov	r0, #1
   118fc:	bl	10eb4 <__printf_chk@plt>
   11900:	b	1172c <__assert_fail@plt+0x7d0>
   11904:	mov	r0, r5
   11908:	bl	10da0 <dcgettext@plt>
   1190c:	ldr	r3, [pc, #224]	; 119f4 <__assert_fail@plt+0xa98>
   11910:	ldr	r2, [pc, #224]	; 119f8 <__assert_fail@plt+0xa9c>
   11914:	mov	r1, r0
   11918:	mov	r0, #1
   1191c:	bl	10eb4 <__printf_chk@plt>
   11920:	mov	r1, r5
   11924:	mov	r0, #5
   11928:	bl	10f08 <setlocale@plt>
   1192c:	cmp	r0, #0
   11930:	beq	11948 <__assert_fail@plt+0x9ec>
   11934:	mov	r2, #3
   11938:	ldr	r1, [pc, #188]	; 119fc <__assert_fail@plt+0xaa0>
   1193c:	bl	10f44 <strncmp@plt>
   11940:	cmp	r0, #0
   11944:	bne	1198c <__assert_fail@plt+0xa30>
   11948:	mov	r2, #5
   1194c:	ldr	r1, [pc, #172]	; 11a00 <__assert_fail@plt+0xaa4>
   11950:	mov	r0, #0
   11954:	bl	10da0 <dcgettext@plt>
   11958:	ldr	r3, [pc, #140]	; 119ec <__assert_fail@plt+0xa90>
   1195c:	ldr	r2, [pc, #144]	; 119f4 <__assert_fail@plt+0xa98>
   11960:	mov	r5, r3
   11964:	mov	r1, r0
   11968:	mov	r0, #1
   1196c:	bl	10eb4 <__printf_chk@plt>
   11970:	ldr	r1, [pc, #140]	; 11a04 <__assert_fail@plt+0xaa8>
   11974:	mov	r2, #5
   11978:	mov	r0, #0
   1197c:	bl	10da0 <dcgettext@plt>
   11980:	ldr	r3, [pc, #132]	; 11a0c <__assert_fail@plt+0xab0>
   11984:	mov	r1, r0
   11988:	b	118f4 <__assert_fail@plt+0x998>
   1198c:	ldr	r6, [pc, #88]	; 119ec <__assert_fail@plt+0xa90>
   11990:	mov	r5, r6
   11994:	mov	r2, #5
   11998:	ldr	r1, [pc, #112]	; 11a10 <__assert_fail@plt+0xab4>
   1199c:	mov	r0, #0
   119a0:	bl	10da0 <dcgettext@plt>
   119a4:	ldr	r2, [pc, #64]	; 119ec <__assert_fail@plt+0xa90>
   119a8:	mov	r1, r0
   119ac:	mov	r0, #1
   119b0:	bl	10eb4 <__printf_chk@plt>
   119b4:	b	118ac <__assert_fail@plt+0x950>
   119b8:	andeq	r6, r2, r8, lsl #30
   119bc:	andeq	r7, r2, r0, asr #2
   119c0:	andeq	r5, r1, r4, lsl #15
   119c4:	andeq	r7, r2, r0, ror r1
   119c8:	andeq	r5, r1, ip, lsr #15
   119cc:	andeq	r7, r2, ip, asr #2
   119d0:	ldrdeq	r5, [r1], -r0
   119d4:	andeq	r5, r1, ip, lsl #16
   119d8:	andeq	r5, r1, r4, asr #16
   119dc:	muleq	r1, r0, r8
   119e0:	andeq	r5, r1, r4, lsr #18
   119e4:	andeq	r5, r1, r4, asr r9
   119e8:			; <UNDEFINED> instruction: 0x000156b8
   119ec:	andeq	r5, r1, ip, ror r7
   119f0:	andeq	r5, r1, ip, lsl #19
   119f4:	andeq	r5, r1, r4, lsr #19
   119f8:	andeq	r5, r1, ip, asr #19
   119fc:	ldrdeq	r5, [r1], -ip
   11a00:	andeq	r5, r1, r8, lsr #20
   11a04:	andeq	r5, r1, r8, asr #20
   11a08:	andeq	r5, r1, ip, asr #15
   11a0c:	andeq	r5, r1, r4, asr #21
   11a10:	andeq	r5, r1, r0, ror #19
   11a14:	ldr	r3, [pc, #4]	; 11a20 <__assert_fail@plt+0xac4>
   11a18:	str	r0, [r3]
   11a1c:	bx	lr
   11a20:	andeq	r7, r2, r8, ror #2
   11a24:	ldr	r3, [pc, #4]	; 11a30 <__assert_fail@plt+0xad4>
   11a28:	strb	r0, [r3, #4]
   11a2c:	bx	lr
   11a30:	andeq	r7, r2, r8, ror #2
   11a34:	ldr	r3, [pc, #180]	; 11af0 <__assert_fail@plt+0xb94>
   11a38:	push	{r4, r5, r6, lr}
   11a3c:	sub	sp, sp, #8
   11a40:	ldr	r0, [r3]
   11a44:	bl	15320 <__assert_fail@plt+0x43c4>
   11a48:	cmp	r0, #0
   11a4c:	beq	11a74 <__assert_fail@plt+0xb18>
   11a50:	bl	10e90 <__errno_location@plt>
   11a54:	ldr	r5, [pc, #152]	; 11af4 <__assert_fail@plt+0xb98>
   11a58:	ldrb	r3, [r5, #4]
   11a5c:	cmp	r3, #0
   11a60:	mov	r4, r0
   11a64:	beq	11a90 <__assert_fail@plt+0xb34>
   11a68:	ldr	r3, [r0]
   11a6c:	cmp	r3, #32
   11a70:	bne	11a90 <__assert_fail@plt+0xb34>
   11a74:	ldr	r3, [pc, #124]	; 11af8 <__assert_fail@plt+0xb9c>
   11a78:	ldr	r0, [r3]
   11a7c:	bl	15320 <__assert_fail@plt+0x43c4>
   11a80:	cmp	r0, #0
   11a84:	bne	11ad0 <__assert_fail@plt+0xb74>
   11a88:	add	sp, sp, #8
   11a8c:	pop	{r4, r5, r6, pc}
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #96]	; 11afc <__assert_fail@plt+0xba0>
   11a98:	mov	r0, #0
   11a9c:	bl	10da0 <dcgettext@plt>
   11aa0:	mov	r6, r0
   11aa4:	ldr	r0, [r5]
   11aa8:	cmp	r0, #0
   11aac:	beq	11adc <__assert_fail@plt+0xb80>
   11ab0:	ldr	r4, [r4]
   11ab4:	bl	13bc8 <__assert_fail@plt+0x2c6c>
   11ab8:	mov	r1, r4
   11abc:	str	r6, [sp]
   11ac0:	ldr	r2, [pc, #56]	; 11b00 <__assert_fail@plt+0xba4>
   11ac4:	mov	r3, r0
   11ac8:	mov	r0, #0
   11acc:	bl	10e18 <error@plt>
   11ad0:	ldr	r3, [pc, #44]	; 11b04 <__assert_fail@plt+0xba8>
   11ad4:	ldr	r0, [r3]
   11ad8:	bl	10d58 <_exit@plt>
   11adc:	mov	r3, r6
   11ae0:	ldr	r1, [r4]
   11ae4:	ldr	r2, [pc, #28]	; 11b08 <__assert_fail@plt+0xbac>
   11ae8:	bl	10e18 <error@plt>
   11aec:	b	11ad0 <__assert_fail@plt+0xb74>
   11af0:	andeq	r7, r2, ip, asr #2
   11af4:	andeq	r7, r2, r8, ror #2
   11af8:	andeq	r7, r2, r0, asr #2
   11afc:	andeq	r5, r1, r8, asr fp
   11b00:	andeq	r5, r1, r4, ror #22
   11b04:	andeq	r7, r2, ip, ror #1
   11b08:	andeq	r5, r1, r8, ror #22
   11b0c:	b	10d28 <posix_fadvise64@plt>
   11b10:	cmp	r0, #0
   11b14:	bxeq	lr
   11b18:	push	{r4, lr}
   11b1c:	sub	sp, sp, #16
   11b20:	mov	r4, r1
   11b24:	bl	10ec0 <fileno@plt>
   11b28:	mov	r2, #0
   11b2c:	mov	r3, #0
   11b30:	str	r4, [sp, #8]
   11b34:	strd	r2, [sp]
   11b38:	bl	10d28 <posix_fadvise64@plt>
   11b3c:	add	sp, sp, #16
   11b40:	pop	{r4, pc}
   11b44:	push	{r4, r5, r6, lr}
   11b48:	subs	r4, r0, #0
   11b4c:	beq	11bc0 <__assert_fail@plt+0xc64>
   11b50:	mov	r1, #47	; 0x2f
   11b54:	bl	10f14 <strrchr@plt>
   11b58:	subs	r5, r0, #0
   11b5c:	beq	11bac <__assert_fail@plt+0xc50>
   11b60:	add	r6, r5, #1
   11b64:	sub	r3, r6, r4
   11b68:	cmp	r3, #6
   11b6c:	ble	11bac <__assert_fail@plt+0xc50>
   11b70:	mov	r2, #7
   11b74:	ldr	r1, [pc, #96]	; 11bdc <__assert_fail@plt+0xc80>
   11b78:	sub	r0, r5, #6
   11b7c:	bl	10f44 <strncmp@plt>
   11b80:	cmp	r0, #0
   11b84:	bne	11bac <__assert_fail@plt+0xc50>
   11b88:	mov	r2, #3
   11b8c:	ldr	r1, [pc, #76]	; 11be0 <__assert_fail@plt+0xc84>
   11b90:	mov	r0, r6
   11b94:	bl	10f44 <strncmp@plt>
   11b98:	cmp	r0, #0
   11b9c:	movne	r4, r6
   11ba0:	ldreq	r3, [pc, #60]	; 11be4 <__assert_fail@plt+0xc88>
   11ba4:	addeq	r4, r5, #4
   11ba8:	streq	r4, [r3]
   11bac:	ldr	r2, [pc, #52]	; 11be8 <__assert_fail@plt+0xc8c>
   11bb0:	ldr	r3, [pc, #52]	; 11bec <__assert_fail@plt+0xc90>
   11bb4:	str	r4, [r2]
   11bb8:	str	r4, [r3]
   11bbc:	pop	{r4, r5, r6, pc}
   11bc0:	ldr	r3, [pc, #40]	; 11bf0 <__assert_fail@plt+0xc94>
   11bc4:	mov	r2, #55	; 0x37
   11bc8:	mov	r1, #1
   11bcc:	ldr	r3, [r3]
   11bd0:	ldr	r0, [pc, #28]	; 11bf4 <__assert_fail@plt+0xc98>
   11bd4:	bl	10ddc <fwrite@plt>
   11bd8:	bl	10f50 <abort@plt>
   11bdc:	andeq	r5, r1, r4, lsr #23
   11be0:	andeq	r5, r1, ip, lsr #23
   11be4:	andeq	r7, r2, r0, lsr r1
   11be8:	andeq	r7, r2, r0, ror r1
   11bec:	andeq	r7, r2, r4, lsr r1
   11bf0:	andeq	r7, r2, r0, asr #2
   11bf4:	andeq	r5, r1, ip, ror #22
   11bf8:	push	{r4, lr}
   11bfc:	mov	r2, #48	; 0x30
   11c00:	mov	r4, r1
   11c04:	mov	r1, #0
   11c08:	bl	10ea8 <memset@plt>
   11c0c:	cmp	r4, #10
   11c10:	beq	11c1c <__assert_fail@plt+0xcc0>
   11c14:	str	r4, [r0]
   11c18:	pop	{r4, pc}
   11c1c:	bl	10f50 <abort@plt>
   11c20:	push	{r4, r5, r6, lr}
   11c24:	mov	r2, #5
   11c28:	mov	r5, r0
   11c2c:	mov	r6, r1
   11c30:	mov	r1, r0
   11c34:	mov	r0, #0
   11c38:	bl	10da0 <dcgettext@plt>
   11c3c:	cmp	r5, r0
   11c40:	mov	r4, r0
   11c44:	beq	11c50 <__assert_fail@plt+0xcf4>
   11c48:	mov	r0, r4
   11c4c:	pop	{r4, r5, r6, pc}
   11c50:	bl	153e0 <__assert_fail@plt+0x4484>
   11c54:	ldrb	r3, [r0]
   11c58:	bic	r3, r3, #32
   11c5c:	cmp	r3, #85	; 0x55
   11c60:	bne	11cc0 <__assert_fail@plt+0xd64>
   11c64:	ldrb	r3, [r0, #1]
   11c68:	bic	r3, r3, #32
   11c6c:	cmp	r3, #84	; 0x54
   11c70:	bne	11d38 <__assert_fail@plt+0xddc>
   11c74:	ldrb	r3, [r0, #2]
   11c78:	bic	r3, r3, #32
   11c7c:	cmp	r3, #70	; 0x46
   11c80:	bne	11d38 <__assert_fail@plt+0xddc>
   11c84:	ldrb	r3, [r0, #3]
   11c88:	cmp	r3, #45	; 0x2d
   11c8c:	bne	11d38 <__assert_fail@plt+0xddc>
   11c90:	ldrb	r3, [r0, #4]
   11c94:	cmp	r3, #56	; 0x38
   11c98:	bne	11d38 <__assert_fail@plt+0xddc>
   11c9c:	ldrb	r3, [r0, #5]
   11ca0:	cmp	r3, #0
   11ca4:	bne	11d38 <__assert_fail@plt+0xddc>
   11ca8:	ldrb	r2, [r4]
   11cac:	ldr	r3, [pc, #156]	; 11d50 <__assert_fail@plt+0xdf4>
   11cb0:	ldr	r4, [pc, #156]	; 11d54 <__assert_fail@plt+0xdf8>
   11cb4:	cmp	r2, #96	; 0x60
   11cb8:	movne	r4, r3
   11cbc:	b	11c48 <__assert_fail@plt+0xcec>
   11cc0:	cmp	r3, #71	; 0x47
   11cc4:	bne	11d38 <__assert_fail@plt+0xddc>
   11cc8:	ldrb	r3, [r0, #1]
   11ccc:	bic	r3, r3, #32
   11cd0:	cmp	r3, #66	; 0x42
   11cd4:	bne	11d38 <__assert_fail@plt+0xddc>
   11cd8:	ldrb	r3, [r0, #2]
   11cdc:	cmp	r3, #49	; 0x31
   11ce0:	bne	11d38 <__assert_fail@plt+0xddc>
   11ce4:	ldrb	r3, [r0, #3]
   11ce8:	cmp	r3, #56	; 0x38
   11cec:	bne	11d38 <__assert_fail@plt+0xddc>
   11cf0:	ldrb	r3, [r0, #4]
   11cf4:	cmp	r3, #48	; 0x30
   11cf8:	bne	11d38 <__assert_fail@plt+0xddc>
   11cfc:	ldrb	r3, [r0, #5]
   11d00:	cmp	r3, #51	; 0x33
   11d04:	bne	11d38 <__assert_fail@plt+0xddc>
   11d08:	ldrb	r3, [r0, #6]
   11d0c:	cmp	r3, #48	; 0x30
   11d10:	bne	11d38 <__assert_fail@plt+0xddc>
   11d14:	ldrb	r3, [r0, #7]
   11d18:	cmp	r3, #0
   11d1c:	bne	11d38 <__assert_fail@plt+0xddc>
   11d20:	ldrb	r2, [r4]
   11d24:	ldr	r3, [pc, #44]	; 11d58 <__assert_fail@plt+0xdfc>
   11d28:	ldr	r4, [pc, #44]	; 11d5c <__assert_fail@plt+0xe00>
   11d2c:	cmp	r2, #96	; 0x60
   11d30:	movne	r4, r3
   11d34:	b	11c48 <__assert_fail@plt+0xcec>
   11d38:	ldr	r3, [pc, #32]	; 11d60 <__assert_fail@plt+0xe04>
   11d3c:	ldr	r4, [pc, #32]	; 11d64 <__assert_fail@plt+0xe08>
   11d40:	cmp	r6, #9
   11d44:	movne	r4, r3
   11d48:	mov	r0, r4
   11d4c:	pop	{r4, r5, r6, pc}
   11d50:	andeq	r5, r1, r8, lsl #24
   11d54:	andeq	r5, r1, r4, lsl ip
   11d58:	andeq	r5, r1, ip, lsl #24
   11d5c:	andeq	r5, r1, r0, lsl ip
   11d60:	andeq	r5, r1, r8, lsl ip
   11d64:	andeq	r5, r1, r4, lsl #24
   11d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d6c:	sub	sp, sp, #124	; 0x7c
   11d70:	ldr	ip, [pc, #3576]	; 12b70 <__assert_fail@plt+0x1c14>
   11d74:	str	r3, [sp, #24]
   11d78:	ldr	r3, [sp, #168]	; 0xa8
   11d7c:	ldr	ip, [ip]
   11d80:	str	r3, [sp, #56]	; 0x38
   11d84:	ldr	r3, [sp, #172]	; 0xac
   11d88:	ldr	r8, [sp, #160]	; 0xa0
   11d8c:	str	r3, [sp, #80]	; 0x50
   11d90:	ldr	r3, [sp, #176]	; 0xb0
   11d94:	mov	fp, r0
   11d98:	str	r3, [sp, #76]	; 0x4c
   11d9c:	mov	sl, r1
   11da0:	str	r2, [sp, #36]	; 0x24
   11da4:	str	ip, [sp, #116]	; 0x74
   11da8:	bl	10df4 <__ctype_get_mb_cur_max@plt>
   11dac:	ldr	r3, [sp, #164]	; 0xa4
   11db0:	ands	r4, r3, #2
   11db4:	movne	r3, #1
   11db8:	moveq	r3, #0
   11dbc:	str	r3, [sp, #32]
   11dc0:	str	r0, [sp, #64]	; 0x40
   11dc4:	cmp	r8, #10
   11dc8:	ldrls	pc, [pc, r8, lsl #2]
   11dcc:	b	1357c <__assert_fail@plt+0x2620>
   11dd0:	andeq	r2, r1, r4, asr #3
   11dd4:	andeq	r2, r1, ip, asr r2
   11dd8:	andeq	r2, r1, ip, asr r8
   11ddc:	andeq	r2, r1, ip, ror r2
   11de0:	andeq	r2, r1, r0, lsr r1
   11de4:	andeq	r2, r1, r8, ror r1
   11de8:	strdeq	r2, [r1], -r4
   11dec:	andeq	r2, r1, ip, lsr #4
   11df0:	strdeq	r1, [r1], -ip
   11df4:	strdeq	r1, [r1], -ip
   11df8:	strdeq	r1, [r1], -ip
   11dfc:	cmp	r8, #10
   11e00:	beq	11e24 <__assert_fail@plt+0xec8>
   11e04:	mov	r1, r8
   11e08:	ldr	r0, [pc, #3428]	; 12b74 <__assert_fail@plt+0x1c18>
   11e0c:	bl	11c20 <__assert_fail@plt+0xcc4>
   11e10:	mov	r1, r8
   11e14:	str	r0, [sp, #80]	; 0x50
   11e18:	ldr	r0, [pc, #3420]	; 12b7c <__assert_fail@plt+0x1c20>
   11e1c:	bl	11c20 <__assert_fail@plt+0xcc4>
   11e20:	str	r0, [sp, #76]	; 0x4c
   11e24:	cmp	r4, #0
   11e28:	movne	r4, #0
   11e2c:	beq	1323c <__assert_fail@plt+0x22e0>
   11e30:	ldr	r7, [sp, #76]	; 0x4c
   11e34:	mov	r5, #0
   11e38:	mov	r6, #1
   11e3c:	mov	r0, r7
   11e40:	str	r6, [sp, #40]	; 0x28
   11e44:	str	r5, [sp, #68]	; 0x44
   11e48:	bl	10e78 <strlen@plt>
   11e4c:	str	r6, [sp, #28]
   11e50:	str	r5, [sp, #44]	; 0x2c
   11e54:	str	r5, [sp, #72]	; 0x48
   11e58:	str	r7, [sp, #60]	; 0x3c
   11e5c:	str	r0, [sp, #52]	; 0x34
   11e60:	str	r8, [sp, #160]	; 0xa0
   11e64:	mov	r8, fp
   11e68:	ldr	fp, [sp, #160]	; 0xa0
   11e6c:	mov	r9, #0
   11e70:	ldr	r3, [sp, #24]
   11e74:	cmn	r3, #1
   11e78:	beq	123e0 <__assert_fail@plt+0x1484>
   11e7c:	ldr	r3, [sp, #24]
   11e80:	subs	r6, r3, r9
   11e84:	movne	r6, #1
   11e88:	cmp	r6, #0
   11e8c:	beq	123f8 <__assert_fail@plt+0x149c>
   11e90:	ldr	r7, [sp, #28]
   11e94:	ldr	r0, [sp, #36]	; 0x24
   11e98:	cmp	fp, #2
   11e9c:	moveq	r7, #0
   11ea0:	andne	r7, r7, #1
   11ea4:	add	r3, r0, r9
   11ea8:	cmp	r7, #0
   11eac:	str	r3, [sp, #48]	; 0x30
   11eb0:	beq	1289c <__assert_fail@plt+0x1940>
   11eb4:	ldr	r2, [sp, #52]	; 0x34
   11eb8:	cmp	r2, #0
   11ebc:	beq	12b80 <__assert_fail@plt+0x1c24>
   11ec0:	ldr	r1, [sp, #24]
   11ec4:	cmp	r2, #1
   11ec8:	mov	r3, r2
   11ecc:	movls	r3, #0
   11ed0:	movhi	r3, #1
   11ed4:	cmn	r1, #1
   11ed8:	movne	r3, #0
   11edc:	cmp	r3, #0
   11ee0:	add	r5, r9, r2
   11ee4:	beq	11ef0 <__assert_fail@plt+0xf94>
   11ee8:	bl	10e78 <strlen@plt>
   11eec:	str	r0, [sp, #24]
   11ef0:	ldr	r3, [sp, #24]
   11ef4:	cmp	r5, r3
   11ef8:	bhi	12b80 <__assert_fail@plt+0x1c24>
   11efc:	ldr	r2, [sp, #52]	; 0x34
   11f00:	ldr	r1, [sp, #60]	; 0x3c
   11f04:	ldr	r0, [sp, #48]	; 0x30
   11f08:	bl	10d94 <memcmp@plt>
   11f0c:	cmp	r0, #0
   11f10:	bne	12b80 <__assert_fail@plt+0x1c24>
   11f14:	ldr	r3, [sp, #32]
   11f18:	cmp	r3, #0
   11f1c:	bne	1343c <__assert_fail@plt+0x24e0>
   11f20:	ldr	r3, [sp, #48]	; 0x30
   11f24:	ldrb	r5, [r3]
   11f28:	cmp	r5, #126	; 0x7e
   11f2c:	ldrls	pc, [pc, r5, lsl #2]
   11f30:	b	12800 <__assert_fail@plt+0x18a4>
   11f34:	andeq	r2, r1, ip, ror #13
   11f38:	andeq	r2, r1, r0, lsl #16
   11f3c:	andeq	r2, r1, r0, lsl #16
   11f40:	andeq	r2, r1, r0, lsl #16
   11f44:	andeq	r2, r1, r0, lsl #16
   11f48:	andeq	r2, r1, r0, lsl #16
   11f4c:	andeq	r2, r1, r0, lsl #16
   11f50:			; <UNDEFINED> instruction: 0x000127b8
   11f54:	andeq	r2, r1, r8, lsr #15
   11f58:	andeq	r2, r1, r8, lsr #13
   11f5c:	andeq	r2, r1, r0, ror r6
   11f60:	andeq	r2, r1, r8, asr #13
   11f64:			; <UNDEFINED> instruction: 0x000126b0
   11f68:	andeq	r2, r1, r0, ror #11
   11f6c:	andeq	r2, r1, r0, lsl #16
   11f70:	andeq	r2, r1, r0, lsl #16
   11f74:	andeq	r2, r1, r0, lsl #16
   11f78:	andeq	r2, r1, r0, lsl #16
   11f7c:	andeq	r2, r1, r0, lsl #16
   11f80:	andeq	r2, r1, r0, lsl #16
   11f84:	andeq	r2, r1, r0, lsl #16
   11f88:	andeq	r2, r1, r0, lsl #16
   11f8c:	andeq	r2, r1, r0, lsl #16
   11f90:	andeq	r2, r1, r0, lsl #16
   11f94:	andeq	r2, r1, r0, lsl #16
   11f98:	andeq	r2, r1, r0, lsl #16
   11f9c:	andeq	r2, r1, r0, lsl #16
   11fa0:	andeq	r2, r1, r0, lsl #16
   11fa4:	andeq	r2, r1, r0, lsl #16
   11fa8:	andeq	r2, r1, r0, lsl #16
   11fac:	andeq	r2, r1, r0, lsl #16
   11fb0:	andeq	r2, r1, r0, lsl #16
   11fb4:	andeq	r2, r1, r0, asr #15
   11fb8:	ldrdeq	r2, [r1], -r4
   11fbc:	ldrdeq	r2, [r1], -r4
   11fc0:	ldrdeq	r2, [r1], -r8
   11fc4:	ldrdeq	r2, [r1], -r4
   11fc8:	strdeq	r2, [r1], -r4
   11fcc:	ldrdeq	r2, [r1], -r4
   11fd0:	andeq	r2, r1, r4, lsl r5
   11fd4:	ldrdeq	r2, [r1], -r4
   11fd8:	ldrdeq	r2, [r1], -r4
   11fdc:	ldrdeq	r2, [r1], -r4
   11fe0:	strdeq	r2, [r1], -r4
   11fe4:	strdeq	r2, [r1], -r4
   11fe8:	strdeq	r2, [r1], -r4
   11fec:	strdeq	r2, [r1], -r4
   11ff0:	strdeq	r2, [r1], -r4
   11ff4:	strdeq	r2, [r1], -r4
   11ff8:	strdeq	r2, [r1], -r4
   11ffc:	strdeq	r2, [r1], -r4
   12000:	strdeq	r2, [r1], -r4
   12004:	strdeq	r2, [r1], -r4
   12008:	strdeq	r2, [r1], -r4
   1200c:	strdeq	r2, [r1], -r4
   12010:	strdeq	r2, [r1], -r4
   12014:	strdeq	r2, [r1], -r4
   12018:	strdeq	r2, [r1], -r4
   1201c:	strdeq	r2, [r1], -r4
   12020:	ldrdeq	r2, [r1], -r4
   12024:	ldrdeq	r2, [r1], -r4
   12028:	ldrdeq	r2, [r1], -r4
   1202c:	ldrdeq	r2, [r1], -r4
   12030:	andeq	r2, r1, r8, ror #9
   12034:	andeq	r2, r1, r0, lsl #16
   12038:	strdeq	r2, [r1], -r4
   1203c:	strdeq	r2, [r1], -r4
   12040:	strdeq	r2, [r1], -r4
   12044:	strdeq	r2, [r1], -r4
   12048:	strdeq	r2, [r1], -r4
   1204c:	strdeq	r2, [r1], -r4
   12050:	strdeq	r2, [r1], -r4
   12054:	strdeq	r2, [r1], -r4
   12058:	strdeq	r2, [r1], -r4
   1205c:	strdeq	r2, [r1], -r4
   12060:	strdeq	r2, [r1], -r4
   12064:	strdeq	r2, [r1], -r4
   12068:	strdeq	r2, [r1], -r4
   1206c:	strdeq	r2, [r1], -r4
   12070:	strdeq	r2, [r1], -r4
   12074:	strdeq	r2, [r1], -r4
   12078:	strdeq	r2, [r1], -r4
   1207c:	strdeq	r2, [r1], -r4
   12080:	strdeq	r2, [r1], -r4
   12084:	strdeq	r2, [r1], -r4
   12088:	strdeq	r2, [r1], -r4
   1208c:	strdeq	r2, [r1], -r4
   12090:	strdeq	r2, [r1], -r4
   12094:	strdeq	r2, [r1], -r4
   12098:	strdeq	r2, [r1], -r4
   1209c:	strdeq	r2, [r1], -r4
   120a0:	ldrdeq	r2, [r1], -r4
   120a4:	andeq	r2, r1, r0, lsr #9
   120a8:	strdeq	r2, [r1], -r4
   120ac:	ldrdeq	r2, [r1], -r4
   120b0:	strdeq	r2, [r1], -r4
   120b4:	ldrdeq	r2, [r1], -r4
   120b8:	strdeq	r2, [r1], -r4
   120bc:	strdeq	r2, [r1], -r4
   120c0:	strdeq	r2, [r1], -r4
   120c4:	strdeq	r2, [r1], -r4
   120c8:	strdeq	r2, [r1], -r4
   120cc:	strdeq	r2, [r1], -r4
   120d0:	strdeq	r2, [r1], -r4
   120d4:	strdeq	r2, [r1], -r4
   120d8:	strdeq	r2, [r1], -r4
   120dc:	strdeq	r2, [r1], -r4
   120e0:	strdeq	r2, [r1], -r4
   120e4:	strdeq	r2, [r1], -r4
   120e8:	strdeq	r2, [r1], -r4
   120ec:	strdeq	r2, [r1], -r4
   120f0:	strdeq	r2, [r1], -r4
   120f4:	strdeq	r2, [r1], -r4
   120f8:	strdeq	r2, [r1], -r4
   120fc:	strdeq	r2, [r1], -r4
   12100:	strdeq	r2, [r1], -r4
   12104:	strdeq	r2, [r1], -r4
   12108:	strdeq	r2, [r1], -r4
   1210c:	strdeq	r2, [r1], -r4
   12110:	strdeq	r2, [r1], -r4
   12114:	strdeq	r2, [r1], -r4
   12118:	strdeq	r2, [r1], -r4
   1211c:	strdeq	r2, [r1], -r4
   12120:			; <UNDEFINED> instruction: 0x000122b8
   12124:	ldrdeq	r2, [r1], -r4
   12128:			; <UNDEFINED> instruction: 0x000122b8
   1212c:	ldrdeq	r2, [r1], -r8
   12130:	cmp	r4, #0
   12134:	moveq	r3, #1
   12138:	streq	r3, [sp, #28]
   1213c:	beq	12868 <__assert_fail@plt+0x190c>
   12140:	mov	r3, #0
   12144:	mov	r4, r3
   12148:	mov	r2, #1
   1214c:	str	r2, [sp, #40]	; 0x28
   12150:	str	r3, [sp, #68]	; 0x44
   12154:	str	r2, [sp, #32]
   12158:	str	r2, [sp, #52]	; 0x34
   1215c:	ldr	r3, [pc, #2584]	; 12b7c <__assert_fail@plt+0x1c20>
   12160:	str	r4, [sp, #44]	; 0x2c
   12164:	str	r4, [sp, #72]	; 0x48
   12168:	str	r4, [sp, #28]
   1216c:	str	r3, [sp, #60]	; 0x3c
   12170:	mov	r8, #2
   12174:	b	11e60 <__assert_fail@plt+0xf04>
   12178:	cmp	r4, #0
   1217c:	bne	13408 <__assert_fail@plt+0x24ac>
   12180:	cmp	sl, #0
   12184:	beq	131c8 <__assert_fail@plt+0x226c>
   12188:	mov	r3, #34	; 0x22
   1218c:	strb	r3, [fp]
   12190:	ldr	r3, [pc, #2528]	; 12b78 <__assert_fail@plt+0x1c1c>
   12194:	mov	r1, r4
   12198:	mov	r2, #1
   1219c:	str	r4, [sp, #68]	; 0x44
   121a0:	str	r2, [sp, #40]	; 0x28
   121a4:	mov	r4, r2
   121a8:	str	r1, [sp, #44]	; 0x2c
   121ac:	str	r1, [sp, #72]	; 0x48
   121b0:	str	r1, [sp, #32]
   121b4:	str	r2, [sp, #28]
   121b8:	str	r2, [sp, #52]	; 0x34
   121bc:	str	r3, [sp, #60]	; 0x3c
   121c0:	b	11e60 <__assert_fail@plt+0xf04>
   121c4:	mov	r3, #0
   121c8:	str	r3, [sp, #68]	; 0x44
   121cc:	str	r3, [sp, #44]	; 0x2c
   121d0:	str	r3, [sp, #32]
   121d4:	str	r3, [sp, #28]
   121d8:	str	r3, [sp, #60]	; 0x3c
   121dc:	mov	r3, #1
   121e0:	str	r8, [sp, #72]	; 0x48
   121e4:	str	r8, [sp, #52]	; 0x34
   121e8:	mov	r4, r8
   121ec:	str	r3, [sp, #40]	; 0x28
   121f0:	b	11e60 <__assert_fail@plt+0xf04>
   121f4:	mov	r3, #1
   121f8:	str	r3, [sp, #40]	; 0x28
   121fc:	str	r3, [sp, #32]
   12200:	str	r3, [sp, #28]
   12204:	str	r3, [sp, #52]	; 0x34
   12208:	ldr	r3, [pc, #2408]	; 12b78 <__assert_fail@plt+0x1c1c>
   1220c:	mov	r2, #0
   12210:	mov	r4, r2
   12214:	str	r2, [sp, #68]	; 0x44
   12218:	str	r2, [sp, #44]	; 0x2c
   1221c:	str	r2, [sp, #72]	; 0x48
   12220:	str	r3, [sp, #60]	; 0x3c
   12224:	mov	r8, #5
   12228:	b	11e60 <__assert_fail@plt+0xf04>
   1222c:	mov	r3, #0
   12230:	mov	r2, #1
   12234:	str	r2, [sp, #40]	; 0x28
   12238:	mov	r4, r3
   1223c:	str	r3, [sp, #68]	; 0x44
   12240:	str	r2, [sp, #28]
   12244:	str	r3, [sp, #44]	; 0x2c
   12248:	str	r3, [sp, #72]	; 0x48
   1224c:	str	r3, [sp, #32]
   12250:	str	r3, [sp, #52]	; 0x34
   12254:	str	r3, [sp, #60]	; 0x3c
   12258:	b	11e60 <__assert_fail@plt+0xf04>
   1225c:	mov	r2, #1
   12260:	mov	r3, #0
   12264:	str	r2, [sp, #40]	; 0x28
   12268:	mov	r4, r3
   1226c:	str	r3, [sp, #68]	; 0x44
   12270:	str	r8, [sp, #52]	; 0x34
   12274:	str	r2, [sp, #32]
   12278:	b	1215c <__assert_fail@plt+0x1200>
   1227c:	mov	r3, #1
   12280:	str	r3, [sp, #40]	; 0x28
   12284:	str	r3, [sp, #32]
   12288:	str	r3, [sp, #28]
   1228c:	str	r3, [sp, #52]	; 0x34
   12290:	ldr	r3, [pc, #2276]	; 12b7c <__assert_fail@plt+0x1c20>
   12294:	mov	r2, #0
   12298:	mov	r4, r2
   1229c:	str	r2, [sp, #68]	; 0x44
   122a0:	str	r2, [sp, #44]	; 0x2c
   122a4:	str	r2, [sp, #72]	; 0x48
   122a8:	str	r3, [sp, #60]	; 0x3c
   122ac:	mov	r8, #2
   122b0:	b	11e60 <__assert_fail@plt+0xf04>
   122b4:	mov	r7, #0
   122b8:	ldr	r3, [sp, #24]
   122bc:	cmn	r3, #1
   122c0:	beq	12dfc <__assert_fail@plt+0x1ea0>
   122c4:	ldr	r3, [sp, #24]
   122c8:	subs	r3, r3, #1
   122cc:	movne	r3, #1
   122d0:	cmp	r3, #0
   122d4:	sub	r2, fp, #2
   122d8:	clz	r2, r2
   122dc:	lsr	r2, r2, #5
   122e0:	bne	124dc <__assert_fail@plt+0x1580>
   122e4:	cmp	r9, #0
   122e8:	bne	124dc <__assert_fail@plt+0x1580>
   122ec:	ldr	r3, [sp, #32]
   122f0:	tst	r3, r2
   122f4:	bne	125fc <__assert_fail@plt+0x16a0>
   122f8:	ldr	r3, [sp, #28]
   122fc:	eor	r3, r3, #1
   12300:	orr	r3, r2, r3
   12304:	ldr	r2, [sp, #32]
   12308:	eor	r3, r3, #1
   1230c:	orrs	r3, r2, r3
   12310:	beq	12340 <__assert_fail@plt+0x13e4>
   12314:	mov	r3, #0
   12318:	ldr	r1, [sp, #56]	; 0x38
   1231c:	cmp	r1, #0
   12320:	beq	12340 <__assert_fail@plt+0x13e4>
   12324:	lsr	r2, r5, #5
   12328:	and	r0, r5, #31
   1232c:	uxtb	r2, r2
   12330:	ldr	r1, [r1, r2, lsl #2]
   12334:	lsr	r2, r1, r0
   12338:	tst	r2, #1
   1233c:	bne	12348 <__assert_fail@plt+0x13ec>
   12340:	cmp	r7, #0
   12344:	beq	12598 <__assert_fail@plt+0x163c>
   12348:	sub	r2, fp, #2
   1234c:	clz	r2, r2
   12350:	lsr	r2, r2, #5
   12354:	ldr	r3, [sp, #32]
   12358:	cmp	r3, #0
   1235c:	bne	12688 <__assert_fail@plt+0x172c>
   12360:	ldr	r3, [sp, #44]	; 0x2c
   12364:	eor	r3, r3, #1
   12368:	ands	r3, r2, r3
   1236c:	beq	123a4 <__assert_fail@plt+0x1448>
   12370:	cmp	sl, r4
   12374:	movhi	r2, #39	; 0x27
   12378:	strbhi	r2, [r8, r4]
   1237c:	add	r2, r4, #1
   12380:	cmp	r2, sl
   12384:	movcc	r1, #36	; 0x24
   12388:	strbcc	r1, [r8, r2]
   1238c:	add	r2, r4, #2
   12390:	cmp	r2, sl
   12394:	add	r4, r4, #3
   12398:	movcc	r1, #39	; 0x27
   1239c:	strbcc	r1, [r8, r2]
   123a0:	str	r3, [sp, #44]	; 0x2c
   123a4:	cmp	r4, sl
   123a8:	movcc	r3, #92	; 0x5c
   123ac:	strbcc	r3, [r8, r4]
   123b0:	add	r9, r9, #1
   123b4:	add	r4, r4, #1
   123b8:	cmp	r4, sl
   123bc:	ldr	r3, [sp, #40]	; 0x28
   123c0:	strbcc	r5, [r8, r4]
   123c4:	cmp	r6, #0
   123c8:	moveq	r3, #0
   123cc:	str	r3, [sp, #40]	; 0x28
   123d0:	ldr	r3, [sp, #24]
   123d4:	add	r4, r4, #1
   123d8:	cmn	r3, #1
   123dc:	bne	11e7c <__assert_fail@plt+0xf20>
   123e0:	ldr	r3, [sp, #36]	; 0x24
   123e4:	ldrb	r6, [r3, r9]
   123e8:	adds	r6, r6, #0
   123ec:	movne	r6, #1
   123f0:	cmp	r6, #0
   123f4:	bne	11e90 <__assert_fail@plt+0xf34>
   123f8:	str	fp, [sp, #160]	; 0xa0
   123fc:	mov	fp, r8
   12400:	ldr	r8, [sp, #160]	; 0xa0
   12404:	ldr	r1, [sp, #32]
   12408:	cmp	r4, #0
   1240c:	sub	r2, r8, #2
   12410:	clz	r2, r2
   12414:	lsr	r2, r2, #5
   12418:	andeq	r3, r2, r1
   1241c:	movne	r3, #0
   12420:	cmp	r3, #0
   12424:	bne	13510 <__assert_fail@plt+0x25b4>
   12428:	eor	r3, r1, #1
   1242c:	ands	r2, r2, r3
   12430:	beq	1344c <__assert_fail@plt+0x24f0>
   12434:	ldr	r3, [sp, #68]	; 0x44
   12438:	cmp	r3, #0
   1243c:	beq	13450 <__assert_fail@plt+0x24f4>
   12440:	ldr	r3, [sp, #40]	; 0x28
   12444:	cmp	r3, #0
   12448:	bne	134cc <__assert_fail@plt+0x2570>
   1244c:	ldr	r3, [sp, #72]	; 0x48
   12450:	adds	r3, r3, #0
   12454:	movne	r3, #1
   12458:	cmp	sl, #0
   1245c:	movne	r3, #0
   12460:	cmp	r3, #0
   12464:	ldreq	r2, [sp, #68]	; 0x44
   12468:	beq	13450 <__assert_fail@plt+0x24f4>
   1246c:	ldr	sl, [sp, #72]	; 0x48
   12470:	str	r3, [sp, #68]	; 0x44
   12474:	ldr	r3, [pc, #1792]	; 12b7c <__assert_fail@plt+0x1c20>
   12478:	mov	r2, #39	; 0x27
   1247c:	mov	r4, #1
   12480:	str	r3, [sp, #60]	; 0x3c
   12484:	mov	r3, #0
   12488:	strb	r2, [fp]
   1248c:	str	r4, [sp, #52]	; 0x34
   12490:	mov	r8, #2
   12494:	str	r3, [sp, #32]
   12498:	b	11e60 <__assert_fail@plt+0xf04>
   1249c:	mov	r7, #0
   124a0:	cmp	fp, #2
   124a4:	beq	12ddc <__assert_fail@plt+0x1e80>
   124a8:	ldr	r3, [sp, #52]	; 0x34
   124ac:	ldr	r2, [sp, #28]
   124b0:	ldr	r1, [sp, #32]
   124b4:	cmp	r3, #0
   124b8:	andne	r2, r2, r1
   124bc:	moveq	r2, #0
   124c0:	cmp	r2, #0
   124c4:	moveq	r5, #92	; 0x5c
   124c8:	moveq	r3, r5
   124cc:	bne	12de8 <__assert_fail@plt+0x1e8c>
   124d0:	ldr	r1, [sp, #28]
   124d4:	cmp	r1, #0
   124d8:	bne	13558 <__assert_fail@plt+0x25fc>
   124dc:	mov	r6, #0
   124e0:	b	122f8 <__assert_fail@plt+0x139c>
   124e4:	mov	r7, #0
   124e8:	cmp	fp, #2
   124ec:	beq	12e4c <__assert_fail@plt+0x1ef0>
   124f0:	cmp	fp, #5
   124f4:	beq	12e10 <__assert_fail@plt+0x1eb4>
   124f8:	sub	r2, fp, #2
   124fc:	mov	r6, #0
   12500:	clz	r2, r2
   12504:	mov	r5, #63	; 0x3f
   12508:	lsr	r2, r2, #5
   1250c:	b	122f8 <__assert_fail@plt+0x139c>
   12510:	mov	r7, #0
   12514:	cmp	fp, #2
   12518:	strne	r6, [sp, #68]	; 0x44
   1251c:	movne	r2, #0
   12520:	movne	r5, #39	; 0x27
   12524:	bne	122f8 <__assert_fail@plt+0x139c>
   12528:	ldr	r3, [sp, #32]
   1252c:	cmp	r3, #0
   12530:	bne	1322c <__assert_fail@plt+0x22d0>
   12534:	cmp	sl, #0
   12538:	ldr	r3, [sp, #72]	; 0x48
   1253c:	clz	r3, r3
   12540:	lsr	r3, r3, #5
   12544:	moveq	r3, #0
   12548:	cmp	r3, #0
   1254c:	bne	13160 <__assert_fail@plt+0x2204>
   12550:	cmp	sl, r4
   12554:	movhi	r3, #39	; 0x27
   12558:	strbhi	r3, [r8, r4]
   1255c:	add	r3, r4, #1
   12560:	cmp	sl, r3
   12564:	movhi	r2, #92	; 0x5c
   12568:	strbhi	r2, [r8, r3]
   1256c:	add	r3, r4, #2
   12570:	cmp	sl, r3
   12574:	movhi	r2, #39	; 0x27
   12578:	strbhi	r2, [r8, r3]
   1257c:	mov	r3, #0
   12580:	cmp	r7, #0
   12584:	add	r4, r4, #3
   12588:	str	r3, [sp, #44]	; 0x2c
   1258c:	str	r6, [sp, #68]	; 0x44
   12590:	mov	r5, #39	; 0x27
   12594:	bne	12348 <__assert_fail@plt+0x13ec>
   12598:	ldr	r2, [sp, #44]	; 0x2c
   1259c:	eor	r3, r3, #1
   125a0:	and	r3, r3, r2
   125a4:	add	r9, r9, #1
   125a8:	uxtb	r3, r3
   125ac:	cmp	r3, #0
   125b0:	beq	123b8 <__assert_fail@plt+0x145c>
   125b4:	cmp	sl, r4
   125b8:	movhi	r3, #39	; 0x27
   125bc:	strbhi	r3, [r8, r4]
   125c0:	add	r3, r4, #1
   125c4:	cmp	sl, r3
   125c8:	movhi	r2, #39	; 0x27
   125cc:	strbhi	r2, [r8, r3]
   125d0:	mov	r3, #0
   125d4:	add	r4, r4, #2
   125d8:	str	r3, [sp, #44]	; 0x2c
   125dc:	b	123b8 <__assert_fail@plt+0x145c>
   125e0:	mov	r3, #114	; 0x72
   125e4:	ldr	r1, [sp, #32]
   125e8:	sub	r2, fp, #2
   125ec:	clz	r2, r2
   125f0:	lsr	r2, r2, #5
   125f4:	tst	r2, r1
   125f8:	beq	124d0 <__assert_fail@plt+0x1574>
   125fc:	mov	fp, r8
   12600:	mov	r8, #2
   12604:	ldr	r3, [sp, #28]
   12608:	cmp	r3, #0
   1260c:	movne	r8, #4
   12610:	ldr	r3, [sp, #164]	; 0xa4
   12614:	mov	ip, #0
   12618:	bic	r3, r3, #2
   1261c:	str	r3, [sp, #4]
   12620:	ldr	r3, [sp, #76]	; 0x4c
   12624:	str	r8, [sp]
   12628:	str	r3, [sp, #16]
   1262c:	ldr	r3, [sp, #80]	; 0x50
   12630:	ldr	r2, [sp, #36]	; 0x24
   12634:	str	r3, [sp, #12]
   12638:	mov	r1, sl
   1263c:	ldr	r3, [sp, #24]
   12640:	mov	r0, fp
   12644:	str	ip, [sp, #8]
   12648:	bl	11d68 <__assert_fail@plt+0xe0c>
   1264c:	mov	r4, r0
   12650:	ldr	r3, [pc, #1304]	; 12b70 <__assert_fail@plt+0x1c14>
   12654:	ldr	r2, [sp, #116]	; 0x74
   12658:	mov	r0, r4
   1265c:	ldr	r3, [r3]
   12660:	cmp	r2, r3
   12664:	bne	13554 <__assert_fail@plt+0x25f8>
   12668:	add	sp, sp, #124	; 0x7c
   1266c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12670:	mov	r5, #110	; 0x6e
   12674:	ldr	r3, [sp, #32]
   12678:	mov	r2, #0
   1267c:	cmp	r3, #0
   12680:	mov	r6, r2
   12684:	beq	12360 <__assert_fail@plt+0x1404>
   12688:	str	fp, [sp, #160]	; 0xa0
   1268c:	mov	fp, r8
   12690:	ldr	r8, [sp, #160]	; 0xa0
   12694:	mov	r3, r2
   12698:	ldr	r2, [sp, #28]
   1269c:	and	r2, r2, r3
   126a0:	str	r2, [sp, #28]
   126a4:	b	12604 <__assert_fail@plt+0x16a8>
   126a8:	mov	r5, #116	; 0x74
   126ac:	b	12674 <__assert_fail@plt+0x1718>
   126b0:	mov	r5, #102	; 0x66
   126b4:	ldr	r3, [sp, #32]
   126b8:	cmp	r3, #0
   126bc:	bne	13268 <__assert_fail@plt+0x230c>
   126c0:	mov	r6, #0
   126c4:	b	123a4 <__assert_fail@plt+0x1448>
   126c8:	mov	r5, #118	; 0x76
   126cc:	b	126b4 <__assert_fail@plt+0x1758>
   126d0:	mov	r7, #0
   126d4:	mov	r6, #0
   126d8:	b	12314 <__assert_fail@plt+0x13b8>
   126dc:	ldr	r3, [sp, #32]
   126e0:	cmp	r3, #0
   126e4:	bne	134ac <__assert_fail@plt+0x2550>
   126e8:	mov	r7, r3
   126ec:	ldr	r3, [sp, #44]	; 0x2c
   126f0:	sub	r2, fp, #2
   126f4:	eor	r3, r3, #1
   126f8:	clz	r2, r2
   126fc:	lsr	r2, r2, #5
   12700:	ands	r3, r2, r3
   12704:	beq	1314c <__assert_fail@plt+0x21f0>
   12708:	cmp	sl, r4
   1270c:	movhi	r1, #39	; 0x27
   12710:	strbhi	r1, [r8, r4]
   12714:	add	r1, r4, #1
   12718:	cmp	sl, r1
   1271c:	movhi	r0, #36	; 0x24
   12720:	strbhi	r0, [r8, r1]
   12724:	add	r1, r4, #2
   12728:	cmp	sl, r1
   1272c:	movhi	r0, #39	; 0x27
   12730:	strbhi	r0, [r8, r1]
   12734:	add	r1, r4, #3
   12738:	cmp	sl, r1
   1273c:	bls	131ac <__assert_fail@plt+0x2250>
   12740:	mov	r4, r1
   12744:	mov	r1, #92	; 0x5c
   12748:	strb	r1, [r8, r4]
   1274c:	mov	r1, r4
   12750:	str	r3, [sp, #44]	; 0x2c
   12754:	cmp	fp, #2
   12758:	add	r4, r4, #1
   1275c:	beq	131f4 <__assert_fail@plt+0x2298>
   12760:	ldr	r0, [sp, #24]
   12764:	add	r3, r9, #1
   12768:	cmp	r3, r0
   1276c:	bcs	12784 <__assert_fail@plt+0x1828>
   12770:	ldr	r0, [sp, #36]	; 0x24
   12774:	ldrb	r3, [r0, r3]
   12778:	sub	r3, r3, #48	; 0x30
   1277c:	cmp	r3, #9
   12780:	bls	13204 <__assert_fail@plt+0x22a8>
   12784:	mov	r5, #48	; 0x30
   12788:	ldr	r3, [sp, #28]
   1278c:	eor	r3, r3, #1
   12790:	orrs	r2, r2, r3
   12794:	mov	r3, r6
   12798:	moveq	r6, r2
   1279c:	beq	12318 <__assert_fail@plt+0x13bc>
   127a0:	mov	r6, #0
   127a4:	b	12340 <__assert_fail@plt+0x13e4>
   127a8:	mov	r2, #0
   127ac:	mov	r6, r2
   127b0:	mov	r5, #98	; 0x62
   127b4:	b	12360 <__assert_fail@plt+0x1404>
   127b8:	mov	r5, #97	; 0x61
   127bc:	b	126c0 <__assert_fail@plt+0x1764>
   127c0:	mov	r3, r7
   127c4:	mov	r6, r7
   127c8:	mov	r2, #0
   127cc:	mov	r7, r3
   127d0:	mov	r5, #32
   127d4:	b	122f8 <__assert_fail@plt+0x139c>
   127d8:	cmp	r9, #0
   127dc:	mov	r3, r7
   127e0:	bne	12da8 <__assert_fail@plt+0x1e4c>
   127e4:	mov	r6, r7
   127e8:	mov	r2, r9
   127ec:	mov	r7, r3
   127f0:	b	122f8 <__assert_fail@plt+0x139c>
   127f4:	mov	r6, r7
   127f8:	b	12314 <__assert_fail@plt+0x13b8>
   127fc:	mov	r7, #0
   12800:	ldr	r3, [sp, #64]	; 0x40
   12804:	cmp	r3, #1
   12808:	bne	12e64 <__assert_fail@plt+0x1f08>
   1280c:	bl	10e60 <__ctype_b_loc@plt>
   12810:	ldr	r2, [sp, #64]	; 0x40
   12814:	sxth	r3, r5
   12818:	mov	ip, r2
   1281c:	lsl	r3, r3, #1
   12820:	ldr	r2, [r0]
   12824:	ldrh	r3, [r2, r3]
   12828:	and	r3, r3, #16384	; 0x4000
   1282c:	cmp	r3, #0
   12830:	ldr	r3, [sp, #28]
   12834:	movne	r6, #1
   12838:	moveq	r6, #0
   1283c:	movne	r2, #0
   12840:	andeq	r2, r3, #1
   12844:	cmp	r2, #0
   12848:	bne	13174 <__assert_fail@plt+0x2218>
   1284c:	sub	r2, fp, #2
   12850:	clz	r2, r2
   12854:	lsr	r2, r2, #5
   12858:	b	122f8 <__assert_fail@plt+0x139c>
   1285c:	cmp	r4, #0
   12860:	bne	13520 <__assert_fail@plt+0x25c4>
   12864:	str	r4, [sp, #28]
   12868:	cmp	sl, #0
   1286c:	bne	13564 <__assert_fail@plt+0x2608>
   12870:	ldr	r3, [pc, #772]	; 12b7c <__assert_fail@plt+0x1c20>
   12874:	mov	r4, #1
   12878:	str	r4, [sp, #40]	; 0x28
   1287c:	str	r3, [sp, #60]	; 0x3c
   12880:	str	r4, [sp, #52]	; 0x34
   12884:	str	sl, [sp, #72]	; 0x48
   12888:	str	sl, [sp, #68]	; 0x44
   1288c:	str	sl, [sp, #44]	; 0x2c
   12890:	str	sl, [sp, #32]
   12894:	mov	r8, #2
   12898:	b	11e60 <__assert_fail@plt+0xf04>
   1289c:	ldr	r3, [sp, #36]	; 0x24
   128a0:	ldrb	r5, [r3, r9]
   128a4:	cmp	r5, #126	; 0x7e
   128a8:	ldrls	pc, [pc, r5, lsl #2]
   128ac:	b	12800 <__assert_fail@plt+0x18a4>
   128b0:	andeq	r2, r1, r4, ror #21
   128b4:	andeq	r2, r1, r0, lsl #16
   128b8:	andeq	r2, r1, r0, lsl #16
   128bc:	andeq	r2, r1, r0, lsl #16
   128c0:	andeq	r2, r1, r0, lsl #16
   128c4:	andeq	r2, r1, r0, lsl #16
   128c8:	andeq	r2, r1, r0, lsl #16
   128cc:	ldrdeq	r2, [r1], -r0
   128d0:			; <UNDEFINED> instruction: 0x00012abc
   128d4:			; <UNDEFINED> instruction: 0x00012ab4
   128d8:	andeq	r2, r1, ip, lsr #21
   128dc:	andeq	r2, r1, ip, asr fp
   128e0:	andeq	r2, r1, r8, asr #22
   128e4:	andeq	r2, r1, r0, ror #11
   128e8:	andeq	r2, r1, r0, lsl #16
   128ec:	andeq	r2, r1, r0, lsl #16
   128f0:	andeq	r2, r1, r0, lsl #16
   128f4:	andeq	r2, r1, r0, lsl #16
   128f8:	andeq	r2, r1, r0, lsl #16
   128fc:	andeq	r2, r1, r0, lsl #16
   12900:	andeq	r2, r1, r0, lsl #16
   12904:	andeq	r2, r1, r0, lsl #16
   12908:	andeq	r2, r1, r0, lsl #16
   1290c:	andeq	r2, r1, r0, lsl #16
   12910:	andeq	r2, r1, r0, lsl #16
   12914:	andeq	r2, r1, r0, lsl #16
   12918:	andeq	r2, r1, r0, lsl #16
   1291c:	andeq	r2, r1, r0, lsl #16
   12920:	andeq	r2, r1, r0, lsl #16
   12924:	andeq	r2, r1, r0, lsl #16
   12928:	andeq	r2, r1, r0, lsl #16
   1292c:	andeq	r2, r1, r0, lsl #16
   12930:	andeq	r2, r1, r8, lsr fp
   12934:	andeq	r2, r1, r4, lsr #22
   12938:	andeq	r2, r1, r4, lsr #22
   1293c:	andeq	r2, r1, r4, lsl fp
   12940:	andeq	r2, r1, r4, lsr #22
   12944:	andeq	r2, r1, ip, asr #16
   12948:	andeq	r2, r1, r4, lsr #22
   1294c:	andeq	r2, r1, r4, lsl r5
   12950:	andeq	r2, r1, r4, lsr #22
   12954:	andeq	r2, r1, r4, lsr #22
   12958:	andeq	r2, r1, r4, lsr #22
   1295c:	andeq	r2, r1, ip, asr #16
   12960:	andeq	r2, r1, ip, asr #16
   12964:	andeq	r2, r1, ip, asr #16
   12968:	andeq	r2, r1, ip, asr #16
   1296c:	andeq	r2, r1, ip, asr #16
   12970:	andeq	r2, r1, ip, asr #16
   12974:	andeq	r2, r1, ip, asr #16
   12978:	andeq	r2, r1, ip, asr #16
   1297c:	andeq	r2, r1, ip, asr #16
   12980:	andeq	r2, r1, ip, asr #16
   12984:	andeq	r2, r1, ip, asr #16
   12988:	andeq	r2, r1, ip, asr #16
   1298c:	andeq	r2, r1, ip, asr #16
   12990:	andeq	r2, r1, ip, asr #16
   12994:	andeq	r2, r1, ip, asr #16
   12998:	andeq	r2, r1, ip, asr #16
   1299c:	andeq	r2, r1, r4, lsr #22
   129a0:	andeq	r2, r1, r4, lsr #22
   129a4:	andeq	r2, r1, r4, lsr #22
   129a8:	andeq	r2, r1, r4, lsr #22
   129ac:	andeq	r2, r1, r8, ror #9
   129b0:	andeq	r2, r1, r0, lsl #16
   129b4:	andeq	r2, r1, ip, asr #16
   129b8:	andeq	r2, r1, ip, asr #16
   129bc:	andeq	r2, r1, ip, asr #16
   129c0:	andeq	r2, r1, ip, asr #16
   129c4:	andeq	r2, r1, ip, asr #16
   129c8:	andeq	r2, r1, ip, asr #16
   129cc:	andeq	r2, r1, ip, asr #16
   129d0:	andeq	r2, r1, ip, asr #16
   129d4:	andeq	r2, r1, ip, asr #16
   129d8:	andeq	r2, r1, ip, asr #16
   129dc:	andeq	r2, r1, ip, asr #16
   129e0:	andeq	r2, r1, ip, asr #16
   129e4:	andeq	r2, r1, ip, asr #16
   129e8:	andeq	r2, r1, ip, asr #16
   129ec:	andeq	r2, r1, ip, asr #16
   129f0:	andeq	r2, r1, ip, asr #16
   129f4:	andeq	r2, r1, ip, asr #16
   129f8:	andeq	r2, r1, ip, asr #16
   129fc:	andeq	r2, r1, ip, asr #16
   12a00:	andeq	r2, r1, ip, asr #16
   12a04:	andeq	r2, r1, ip, asr #16
   12a08:	andeq	r2, r1, ip, asr #16
   12a0c:	andeq	r2, r1, ip, asr #16
   12a10:	andeq	r2, r1, ip, asr #16
   12a14:	andeq	r2, r1, ip, asr #16
   12a18:	andeq	r2, r1, ip, asr #16
   12a1c:	andeq	r2, r1, r4, lsr #22
   12a20:	andeq	r2, r1, r0, lsr #9
   12a24:	andeq	r2, r1, ip, asr #16
   12a28:	andeq	r2, r1, r4, lsr #22
   12a2c:	andeq	r2, r1, ip, asr #16
   12a30:	andeq	r2, r1, r4, lsr #22
   12a34:	andeq	r2, r1, ip, asr #16
   12a38:	andeq	r2, r1, ip, asr #16
   12a3c:	andeq	r2, r1, ip, asr #16
   12a40:	andeq	r2, r1, ip, asr #16
   12a44:	andeq	r2, r1, ip, asr #16
   12a48:	andeq	r2, r1, ip, asr #16
   12a4c:	andeq	r2, r1, ip, asr #16
   12a50:	andeq	r2, r1, ip, asr #16
   12a54:	andeq	r2, r1, ip, asr #16
   12a58:	andeq	r2, r1, ip, asr #16
   12a5c:	andeq	r2, r1, ip, asr #16
   12a60:	andeq	r2, r1, ip, asr #16
   12a64:	andeq	r2, r1, ip, asr #16
   12a68:	andeq	r2, r1, ip, asr #16
   12a6c:	andeq	r2, r1, ip, asr #16
   12a70:	andeq	r2, r1, ip, asr #16
   12a74:	andeq	r2, r1, ip, asr #16
   12a78:	andeq	r2, r1, ip, asr #16
   12a7c:	andeq	r2, r1, ip, asr #16
   12a80:	andeq	r2, r1, ip, asr #16
   12a84:	andeq	r2, r1, ip, asr #16
   12a88:	andeq	r2, r1, ip, asr #16
   12a8c:	andeq	r2, r1, ip, asr #16
   12a90:	andeq	r2, r1, ip, asr #16
   12a94:	andeq	r2, r1, ip, asr #16
   12a98:	andeq	r2, r1, ip, asr #16
   12a9c:			; <UNDEFINED> instruction: 0x000122b8
   12aa0:	andeq	r2, r1, r4, lsr #22
   12aa4:			; <UNDEFINED> instruction: 0x000122b8
   12aa8:	andeq	r2, r1, r4, lsl fp
   12aac:	mov	r3, #110	; 0x6e
   12ab0:	b	125e4 <__assert_fail@plt+0x1688>
   12ab4:	mov	r3, #116	; 0x74
   12ab8:	b	125e4 <__assert_fail@plt+0x1688>
   12abc:	sub	r2, fp, #2
   12ac0:	mov	r3, #98	; 0x62
   12ac4:	clz	r2, r2
   12ac8:	lsr	r2, r2, #5
   12acc:	b	124d0 <__assert_fail@plt+0x1574>
   12ad0:	sub	r2, fp, #2
   12ad4:	mov	r3, #97	; 0x61
   12ad8:	clz	r2, r2
   12adc:	lsr	r2, r2, #5
   12ae0:	b	124d0 <__assert_fail@plt+0x1574>
   12ae4:	ldr	r3, [sp, #28]
   12ae8:	cmp	r3, #0
   12aec:	bne	126dc <__assert_fail@plt+0x1780>
   12af0:	ldr	r3, [sp, #164]	; 0xa4
   12af4:	tst	r3, #1
   12af8:	bne	1316c <__assert_fail@plt+0x2210>
   12afc:	ldr	r6, [sp, #28]
   12b00:	sub	r2, fp, #2
   12b04:	mov	r7, r6
   12b08:	clz	r2, r2
   12b0c:	lsr	r2, r2, #5
   12b10:	b	122f8 <__assert_fail@plt+0x139c>
   12b14:	sub	r2, fp, #2
   12b18:	clz	r2, r2
   12b1c:	lsr	r2, r2, #5
   12b20:	b	122e4 <__assert_fail@plt+0x1388>
   12b24:	sub	r2, fp, #2
   12b28:	mov	r6, #0
   12b2c:	clz	r2, r2
   12b30:	lsr	r2, r2, #5
   12b34:	b	122ec <__assert_fail@plt+0x1390>
   12b38:	sub	r2, fp, #2
   12b3c:	clz	r2, r2
   12b40:	lsr	r2, r2, #5
   12b44:	b	122ec <__assert_fail@plt+0x1390>
   12b48:	sub	r2, fp, #2
   12b4c:	mov	r3, #102	; 0x66
   12b50:	clz	r2, r2
   12b54:	lsr	r2, r2, #5
   12b58:	b	124d0 <__assert_fail@plt+0x1574>
   12b5c:	sub	r2, fp, #2
   12b60:	mov	r3, #118	; 0x76
   12b64:	clz	r2, r2
   12b68:	lsr	r2, r2, #5
   12b6c:	b	124d0 <__assert_fail@plt+0x1574>
   12b70:	andeq	r6, r2, r8, lsl #30
   12b74:	andeq	r5, r1, ip, lsl ip
   12b78:	andeq	r5, r1, r4, lsl #24
   12b7c:	andeq	r5, r1, r8, lsl ip
   12b80:	ldr	r3, [sp, #48]	; 0x30
   12b84:	ldrb	r5, [r3]
   12b88:	cmp	r5, #126	; 0x7e
   12b8c:	ldrls	pc, [pc, r5, lsl #2]
   12b90:	b	127fc <__assert_fail@plt+0x18a0>
   12b94:	ldrdeq	r2, [r1], -ip
   12b98:	strdeq	r2, [r1], -ip
   12b9c:	strdeq	r2, [r1], -ip
   12ba0:	strdeq	r2, [r1], -ip
   12ba4:	strdeq	r2, [r1], -ip
   12ba8:	strdeq	r2, [r1], -ip
   12bac:	strdeq	r2, [r1], -ip
   12bb0:	ldrdeq	r2, [r1], -r4
   12bb4:	andeq	r2, r1, ip, asr #27
   12bb8:	andeq	r2, r1, r8, lsr #13
   12bbc:	andeq	r2, r1, r0, ror r6
   12bc0:	andeq	r2, r1, r8, asr #13
   12bc4:			; <UNDEFINED> instruction: 0x000126b0
   12bc8:	andeq	r2, r1, r0, asr #27
   12bcc:	strdeq	r2, [r1], -ip
   12bd0:	strdeq	r2, [r1], -ip
   12bd4:	strdeq	r2, [r1], -ip
   12bd8:	strdeq	r2, [r1], -ip
   12bdc:	strdeq	r2, [r1], -ip
   12be0:	strdeq	r2, [r1], -ip
   12be4:	strdeq	r2, [r1], -ip
   12be8:	strdeq	r2, [r1], -ip
   12bec:	strdeq	r2, [r1], -ip
   12bf0:	strdeq	r2, [r1], -ip
   12bf4:	strdeq	r2, [r1], -ip
   12bf8:	strdeq	r2, [r1], -ip
   12bfc:	strdeq	r2, [r1], -ip
   12c00:	strdeq	r2, [r1], -ip
   12c04:	strdeq	r2, [r1], -ip
   12c08:	strdeq	r2, [r1], -ip
   12c0c:	strdeq	r2, [r1], -ip
   12c10:	strdeq	r2, [r1], -ip
   12c14:			; <UNDEFINED> instruction: 0x00012db8
   12c18:	ldrdeq	r2, [r1], -r0
   12c1c:	ldrdeq	r2, [r1], -r0
   12c20:	muleq	r1, ip, sp
   12c24:	ldrdeq	r2, [r1], -r0
   12c28:	muleq	r1, r0, sp
   12c2c:	ldrdeq	r2, [r1], -r0
   12c30:	andeq	r2, r1, r0, lsl r5
   12c34:	ldrdeq	r2, [r1], -r0
   12c38:	ldrdeq	r2, [r1], -r0
   12c3c:	ldrdeq	r2, [r1], -r0
   12c40:	muleq	r1, r0, sp
   12c44:	muleq	r1, r0, sp
   12c48:	muleq	r1, r0, sp
   12c4c:	muleq	r1, r0, sp
   12c50:	muleq	r1, r0, sp
   12c54:	muleq	r1, r0, sp
   12c58:	muleq	r1, r0, sp
   12c5c:	muleq	r1, r0, sp
   12c60:	muleq	r1, r0, sp
   12c64:	muleq	r1, r0, sp
   12c68:	muleq	r1, r0, sp
   12c6c:	muleq	r1, r0, sp
   12c70:	muleq	r1, r0, sp
   12c74:	muleq	r1, r0, sp
   12c78:	muleq	r1, r0, sp
   12c7c:	muleq	r1, r0, sp
   12c80:	ldrdeq	r2, [r1], -r0
   12c84:	ldrdeq	r2, [r1], -r0
   12c88:	ldrdeq	r2, [r1], -r0
   12c8c:	ldrdeq	r2, [r1], -r0
   12c90:	andeq	r2, r1, r4, ror #9
   12c94:	strdeq	r2, [r1], -ip
   12c98:	muleq	r1, r0, sp
   12c9c:	muleq	r1, r0, sp
   12ca0:	muleq	r1, r0, sp
   12ca4:	muleq	r1, r0, sp
   12ca8:	muleq	r1, r0, sp
   12cac:	muleq	r1, r0, sp
   12cb0:	muleq	r1, r0, sp
   12cb4:	muleq	r1, r0, sp
   12cb8:	muleq	r1, r0, sp
   12cbc:	muleq	r1, r0, sp
   12cc0:	muleq	r1, r0, sp
   12cc4:	muleq	r1, r0, sp
   12cc8:	muleq	r1, r0, sp
   12ccc:	muleq	r1, r0, sp
   12cd0:	muleq	r1, r0, sp
   12cd4:	muleq	r1, r0, sp
   12cd8:	muleq	r1, r0, sp
   12cdc:	muleq	r1, r0, sp
   12ce0:	muleq	r1, r0, sp
   12ce4:	muleq	r1, r0, sp
   12ce8:	muleq	r1, r0, sp
   12cec:	muleq	r1, r0, sp
   12cf0:	muleq	r1, r0, sp
   12cf4:	muleq	r1, r0, sp
   12cf8:	muleq	r1, r0, sp
   12cfc:	muleq	r1, r0, sp
   12d00:	ldrdeq	r2, [r1], -r0
   12d04:	muleq	r1, ip, r4
   12d08:	muleq	r1, r0, sp
   12d0c:	ldrdeq	r2, [r1], -r0
   12d10:	muleq	r1, r0, sp
   12d14:	ldrdeq	r2, [r1], -r0
   12d18:	muleq	r1, r0, sp
   12d1c:	muleq	r1, r0, sp
   12d20:	muleq	r1, r0, sp
   12d24:	muleq	r1, r0, sp
   12d28:	muleq	r1, r0, sp
   12d2c:	muleq	r1, r0, sp
   12d30:	muleq	r1, r0, sp
   12d34:	muleq	r1, r0, sp
   12d38:	muleq	r1, r0, sp
   12d3c:	muleq	r1, r0, sp
   12d40:	muleq	r1, r0, sp
   12d44:	muleq	r1, r0, sp
   12d48:	muleq	r1, r0, sp
   12d4c:	muleq	r1, r0, sp
   12d50:	muleq	r1, r0, sp
   12d54:	muleq	r1, r0, sp
   12d58:	muleq	r1, r0, sp
   12d5c:	muleq	r1, r0, sp
   12d60:	muleq	r1, r0, sp
   12d64:	muleq	r1, r0, sp
   12d68:	muleq	r1, r0, sp
   12d6c:	muleq	r1, r0, sp
   12d70:	muleq	r1, r0, sp
   12d74:	muleq	r1, r0, sp
   12d78:	muleq	r1, r0, sp
   12d7c:	muleq	r1, r0, sp
   12d80:			; <UNDEFINED> instruction: 0x000122b4
   12d84:	ldrdeq	r2, [r1], -r0
   12d88:			; <UNDEFINED> instruction: 0x000122b4
   12d8c:	muleq	r1, ip, sp
   12d90:	mov	r6, r7
   12d94:	mov	r7, #0
   12d98:	b	12314 <__assert_fail@plt+0x13b8>
   12d9c:	cmp	r9, #0
   12da0:	mov	r3, #0
   12da4:	beq	127e4 <__assert_fail@plt+0x1888>
   12da8:	mov	r6, #0
   12dac:	mov	r7, r3
   12db0:	mov	r3, r6
   12db4:	b	12318 <__assert_fail@plt+0x13bc>
   12db8:	mov	r3, #0
   12dbc:	b	127c4 <__assert_fail@plt+0x1868>
   12dc0:	mov	r7, #0
   12dc4:	mov	r3, #114	; 0x72
   12dc8:	b	125e4 <__assert_fail@plt+0x1688>
   12dcc:	mov	r5, #98	; 0x62
   12dd0:	b	12674 <__assert_fail@plt+0x1718>
   12dd4:	mov	r5, #97	; 0x61
   12dd8:	b	126b4 <__assert_fail@plt+0x1758>
   12ddc:	ldr	r3, [sp, #32]
   12de0:	cmp	r3, #0
   12de4:	bne	1322c <__assert_fail@plt+0x22d0>
   12de8:	add	r9, r9, #1
   12dec:	ldr	r3, [sp, #44]	; 0x2c
   12df0:	mov	r6, #0
   12df4:	mov	r5, #92	; 0x5c
   12df8:	b	125ac <__assert_fail@plt+0x1650>
   12dfc:	ldr	r3, [sp, #36]	; 0x24
   12e00:	ldrb	r3, [r3, #1]
   12e04:	adds	r3, r3, #0
   12e08:	movne	r3, #1
   12e0c:	b	122d0 <__assert_fail@plt+0x1374>
   12e10:	ldr	r3, [sp, #164]	; 0xa4
   12e14:	ands	r3, r3, #4
   12e18:	beq	12e3c <__assert_fail@plt+0x1ee0>
   12e1c:	ldr	r2, [sp, #24]
   12e20:	add	r3, r9, #2
   12e24:	cmp	r3, r2
   12e28:	bcs	12e3c <__assert_fail@plt+0x1ee0>
   12e2c:	ldr	r2, [sp, #48]	; 0x30
   12e30:	ldrb	r5, [r2, #1]
   12e34:	cmp	r5, #63	; 0x3f
   12e38:	beq	132a0 <__assert_fail@plt+0x2344>
   12e3c:	mov	r2, #0
   12e40:	mov	r6, r2
   12e44:	mov	r5, #63	; 0x3f
   12e48:	b	122f8 <__assert_fail@plt+0x139c>
   12e4c:	ldr	r3, [sp, #32]
   12e50:	cmp	r3, #0
   12e54:	bne	1322c <__assert_fail@plt+0x22d0>
   12e58:	mov	r6, r3
   12e5c:	mov	r5, #63	; 0x3f
   12e60:	b	12340 <__assert_fail@plt+0x13e4>
   12e64:	ldr	r3, [sp, #24]
   12e68:	cmn	r3, #1
   12e6c:	mov	r3, #0
   12e70:	str	r3, [sp, #108]	; 0x6c
   12e74:	str	r3, [sp, #112]	; 0x70
   12e78:	bne	12e88 <__assert_fail@plt+0x1f2c>
   12e7c:	ldr	r0, [sp, #36]	; 0x24
   12e80:	bl	10e78 <strlen@plt>
   12e84:	str	r0, [sp, #24]
   12e88:	mov	r3, #0
   12e8c:	str	sl, [sp, #88]	; 0x58
   12e90:	ldr	sl, [sp, #36]	; 0x24
   12e94:	str	r5, [sp, #92]	; 0x5c
   12e98:	mov	r5, r3
   12e9c:	str	r7, [sp, #96]	; 0x60
   12ea0:	str	r4, [sp, #100]	; 0x64
   12ea4:	str	r8, [sp, #84]	; 0x54
   12ea8:	ldr	r3, [sp, #24]
   12eac:	add	r4, r9, r5
   12eb0:	add	r7, sl, r4
   12eb4:	sub	r2, r3, r4
   12eb8:	mov	r1, r7
   12ebc:	add	r3, sp, #108	; 0x6c
   12ec0:	add	r0, sp, #104	; 0x68
   12ec4:	bl	152a0 <__assert_fail@plt+0x4344>
   12ec8:	subs	r8, r0, #0
   12ecc:	beq	12f1c <__assert_fail@plt+0x1fc0>
   12ed0:	cmn	r8, #1
   12ed4:	beq	1327c <__assert_fail@plt+0x2320>
   12ed8:	cmn	r8, #2
   12edc:	beq	1339c <__assert_fail@plt+0x2440>
   12ee0:	ldr	r3, [sp, #32]
   12ee4:	cmp	fp, #2
   12ee8:	movne	r3, #0
   12eec:	andeq	r3, r3, #1
   12ef0:	cmp	r3, #0
   12ef4:	bne	1307c <__assert_fail@plt+0x2120>
   12ef8:	ldr	r0, [sp, #104]	; 0x68
   12efc:	bl	10dd0 <iswprint@plt>
   12f00:	add	r5, r5, r8
   12f04:	cmp	r0, #0
   12f08:	add	r0, sp, #108	; 0x6c
   12f0c:	moveq	r6, #0
   12f10:	bl	10d7c <mbsinit@plt>
   12f14:	cmp	r0, #0
   12f18:	beq	12ea8 <__assert_fail@plt+0x1f4c>
   12f1c:	ldr	r3, [sp, #28]
   12f20:	mov	ip, r5
   12f24:	eor	r2, r6, #1
   12f28:	ldr	r5, [sp, #92]	; 0x5c
   12f2c:	ldr	r7, [sp, #96]	; 0x60
   12f30:	ldr	r4, [sp, #100]	; 0x64
   12f34:	ldr	r8, [sp, #84]	; 0x54
   12f38:	ldr	sl, [sp, #88]	; 0x58
   12f3c:	and	r2, r2, r3
   12f40:	cmp	ip, #1
   12f44:	bls	12844 <__assert_fail@plt+0x18e8>
   12f48:	add	r1, ip, r9
   12f4c:	ldr	lr, [sp, #48]	; 0x30
   12f50:	mov	r0, #0
   12f54:	str	r6, [sp, #48]	; 0x30
   12f58:	mov	ip, #39	; 0x27
   12f5c:	ldr	r6, [sp, #44]	; 0x2c
   12f60:	b	13018 <__assert_fail@plt+0x20bc>
   12f64:	ldr	r0, [sp, #32]
   12f68:	sub	r3, fp, #2
   12f6c:	cmp	r0, #0
   12f70:	clz	r3, r3
   12f74:	lsr	r3, r3, #5
   12f78:	bne	13180 <__assert_fail@plt+0x2224>
   12f7c:	eor	r0, r6, #1
   12f80:	ands	r3, r3, r0
   12f84:	beq	12fb4 <__assert_fail@plt+0x2058>
   12f88:	add	r0, r4, #1
   12f8c:	cmp	sl, r4
   12f90:	strbhi	ip, [r8, r4]
   12f94:	cmp	sl, r0
   12f98:	movhi	r6, #36	; 0x24
   12f9c:	strbhi	r6, [r8, r0]
   12fa0:	add	r0, r4, #2
   12fa4:	mov	r6, r3
   12fa8:	add	r4, r4, #3
   12fac:	cmp	sl, r0
   12fb0:	strbhi	ip, [r8, r0]
   12fb4:	cmp	sl, r4
   12fb8:	movhi	r3, #92	; 0x5c
   12fbc:	strbhi	r3, [r8, r4]
   12fc0:	add	r3, r4, #1
   12fc4:	cmp	sl, r3
   12fc8:	lsrhi	r0, r5, #6
   12fcc:	addhi	r0, r0, #48	; 0x30
   12fd0:	strbhi	r0, [r8, r3]
   12fd4:	add	r0, r4, #2
   12fd8:	cmp	sl, r0
   12fdc:	lsrhi	r3, r5, #3
   12fe0:	andhi	r3, r3, #7
   12fe4:	addhi	r3, r3, #48	; 0x30
   12fe8:	add	r9, r9, #1
   12fec:	strbhi	r3, [r8, r0]
   12ff0:	and	r5, r5, #7
   12ff4:	cmp	r9, r1
   12ff8:	add	r5, r5, #48	; 0x30
   12ffc:	add	r4, r4, #3
   13000:	bcs	131a0 <__assert_fail@plt+0x2244>
   13004:	mov	r0, r2
   13008:	cmp	sl, r4
   1300c:	strbhi	r5, [r8, r4]
   13010:	ldrb	r5, [lr, #1]!
   13014:	add	r4, r4, #1
   13018:	cmp	r2, #0
   1301c:	bne	12f64 <__assert_fail@plt+0x2008>
   13020:	eor	r3, r0, #1
   13024:	and	r3, r3, r6
   13028:	cmp	r7, #0
   1302c:	uxtb	r3, r3
   13030:	beq	13044 <__assert_fail@plt+0x20e8>
   13034:	cmp	sl, r4
   13038:	movhi	r7, #92	; 0x5c
   1303c:	strbhi	r7, [r8, r4]
   13040:	add	r4, r4, #1
   13044:	add	r9, r9, #1
   13048:	cmp	r9, r1
   1304c:	bcs	13194 <__assert_fail@plt+0x2238>
   13050:	cmp	r3, #0
   13054:	beq	131c0 <__assert_fail@plt+0x2264>
   13058:	cmp	sl, r4
   1305c:	add	r3, r4, #1
   13060:	strbhi	ip, [r8, r4]
   13064:	mov	r7, #0
   13068:	cmp	sl, r3
   1306c:	strbhi	ip, [r8, r3]
   13070:	add	r4, r4, #2
   13074:	mov	r6, r7
   13078:	b	13008 <__assert_fail@plt+0x20ac>
   1307c:	cmp	r8, #1
   13080:	beq	12ef8 <__assert_fail@plt+0x1f9c>
   13084:	add	r1, r4, #1
   13088:	add	r3, sl, r8
   1308c:	add	r1, sl, r1
   13090:	add	r4, r3, r4
   13094:	ldrb	r3, [r1], #1
   13098:	sub	r3, r3, #91	; 0x5b
   1309c:	cmp	r3, #33	; 0x21
   130a0:	ldrls	pc, [pc, r3, lsl #2]
   130a4:	b	13130 <__assert_fail@plt+0x21d4>
   130a8:	andeq	r3, r1, ip, lsr r1
   130ac:	andeq	r3, r1, ip, lsr r1
   130b0:	andeq	r3, r1, r0, lsr r1
   130b4:	andeq	r3, r1, ip, lsr r1
   130b8:	andeq	r3, r1, r0, lsr r1
   130bc:	andeq	r3, r1, ip, lsr r1
   130c0:	andeq	r3, r1, r0, lsr r1
   130c4:	andeq	r3, r1, r0, lsr r1
   130c8:	andeq	r3, r1, r0, lsr r1
   130cc:	andeq	r3, r1, r0, lsr r1
   130d0:	andeq	r3, r1, r0, lsr r1
   130d4:	andeq	r3, r1, r0, lsr r1
   130d8:	andeq	r3, r1, r0, lsr r1
   130dc:	andeq	r3, r1, r0, lsr r1
   130e0:	andeq	r3, r1, r0, lsr r1
   130e4:	andeq	r3, r1, r0, lsr r1
   130e8:	andeq	r3, r1, r0, lsr r1
   130ec:	andeq	r3, r1, r0, lsr r1
   130f0:	andeq	r3, r1, r0, lsr r1
   130f4:	andeq	r3, r1, r0, lsr r1
   130f8:	andeq	r3, r1, r0, lsr r1
   130fc:	andeq	r3, r1, r0, lsr r1
   13100:	andeq	r3, r1, r0, lsr r1
   13104:	andeq	r3, r1, r0, lsr r1
   13108:	andeq	r3, r1, r0, lsr r1
   1310c:	andeq	r3, r1, r0, lsr r1
   13110:	andeq	r3, r1, r0, lsr r1
   13114:	andeq	r3, r1, r0, lsr r1
   13118:	andeq	r3, r1, r0, lsr r1
   1311c:	andeq	r3, r1, r0, lsr r1
   13120:	andeq	r3, r1, r0, lsr r1
   13124:	andeq	r3, r1, r0, lsr r1
   13128:	andeq	r3, r1, r0, lsr r1
   1312c:	andeq	r3, r1, ip, lsr r1
   13130:	cmp	r4, r1
   13134:	bne	13094 <__assert_fail@plt+0x2138>
   13138:	b	12ef8 <__assert_fail@plt+0x1f9c>
   1313c:	ldr	fp, [sp, #84]	; 0x54
   13140:	ldr	sl, [sp, #88]	; 0x58
   13144:	mov	r8, #2
   13148:	b	12604 <__assert_fail@plt+0x16a8>
   1314c:	cmp	sl, r4
   13150:	movls	r1, r4
   13154:	bls	12754 <__assert_fail@plt+0x17f8>
   13158:	ldr	r3, [sp, #44]	; 0x2c
   1315c:	b	12744 <__assert_fail@plt+0x17e8>
   13160:	str	sl, [sp, #72]	; 0x48
   13164:	ldr	sl, [sp, #32]
   13168:	b	1257c <__assert_fail@plt+0x1620>
   1316c:	add	r9, r9, #1
   13170:	b	11e70 <__assert_fail@plt+0xf14>
   13174:	ldr	r2, [sp, #28]
   13178:	mov	r6, #0
   1317c:	b	12f48 <__assert_fail@plt+0x1fec>
   13180:	str	fp, [sp, #160]	; 0xa0
   13184:	str	r3, [sp, #28]
   13188:	mov	fp, r8
   1318c:	ldr	r8, [sp, #160]	; 0xa0
   13190:	b	12604 <__assert_fail@plt+0x16a8>
   13194:	str	r6, [sp, #44]	; 0x2c
   13198:	ldr	r6, [sp, #48]	; 0x30
   1319c:	b	125ac <__assert_fail@plt+0x1650>
   131a0:	str	r6, [sp, #44]	; 0x2c
   131a4:	ldr	r6, [sp, #48]	; 0x30
   131a8:	b	123b8 <__assert_fail@plt+0x145c>
   131ac:	add	r4, r4, #4
   131b0:	str	r3, [sp, #44]	; 0x2c
   131b4:	mov	r6, #0
   131b8:	mov	r5, #48	; 0x30
   131bc:	b	12340 <__assert_fail@plt+0x13e4>
   131c0:	mov	r7, r3
   131c4:	b	13008 <__assert_fail@plt+0x20ac>
   131c8:	ldr	r3, [pc, #-1624]	; 12b78 <__assert_fail@plt+0x1c1c>
   131cc:	mov	r4, #1
   131d0:	str	r4, [sp, #40]	; 0x28
   131d4:	str	r4, [sp, #28]
   131d8:	str	r4, [sp, #52]	; 0x34
   131dc:	str	sl, [sp, #72]	; 0x48
   131e0:	str	sl, [sp, #68]	; 0x44
   131e4:	str	sl, [sp, #44]	; 0x2c
   131e8:	str	sl, [sp, #32]
   131ec:	str	r3, [sp, #60]	; 0x3c
   131f0:	b	11e60 <__assert_fail@plt+0xf04>
   131f4:	mov	r3, r6
   131f8:	mov	r5, #48	; 0x30
   131fc:	mov	r6, #0
   13200:	b	12340 <__assert_fail@plt+0x13e4>
   13204:	cmp	sl, r4
   13208:	movhi	r3, #48	; 0x30
   1320c:	strbhi	r3, [r8, r4]
   13210:	add	r3, r1, #2
   13214:	cmp	sl, r3
   13218:	movhi	r0, #48	; 0x30
   1321c:	strbhi	r0, [r8, r3]
   13220:	add	r4, r1, #3
   13224:	mov	r5, #48	; 0x30
   13228:	b	12788 <__assert_fail@plt+0x182c>
   1322c:	str	fp, [sp, #160]	; 0xa0
   13230:	mov	fp, r8
   13234:	ldr	r8, [sp, #160]	; 0xa0
   13238:	b	12604 <__assert_fail@plt+0x16a8>
   1323c:	ldr	r2, [sp, #80]	; 0x50
   13240:	ldrb	r3, [r2]
   13244:	cmp	r3, #0
   13248:	beq	11e30 <__assert_fail@plt+0xed4>
   1324c:	cmp	sl, r4
   13250:	strbhi	r3, [fp, r4]
   13254:	ldrb	r3, [r2, #1]!
   13258:	add	r4, r4, #1
   1325c:	cmp	r3, #0
   13260:	bne	1324c <__assert_fail@plt+0x22f0>
   13264:	b	11e30 <__assert_fail@plt+0xed4>
   13268:	str	fp, [sp, #160]	; 0xa0
   1326c:	mov	r3, #0
   13270:	mov	fp, r8
   13274:	ldr	r8, [sp, #160]	; 0xa0
   13278:	b	12698 <__assert_fail@plt+0x173c>
   1327c:	mov	ip, r5
   13280:	ldr	r7, [sp, #96]	; 0x60
   13284:	ldr	r5, [sp, #92]	; 0x5c
   13288:	ldr	r4, [sp, #100]	; 0x64
   1328c:	ldr	r8, [sp, #84]	; 0x54
   13290:	ldr	sl, [sp, #88]	; 0x58
   13294:	ldr	r2, [sp, #28]
   13298:	mov	r6, #0
   1329c:	b	12f40 <__assert_fail@plt+0x1fe4>
   132a0:	ldr	r2, [sp, #36]	; 0x24
   132a4:	ldrb	r1, [r2, r3]
   132a8:	sub	r2, r1, #33	; 0x21
   132ac:	cmp	r2, #29
   132b0:	ldrls	pc, [pc, r2, lsl #2]
   132b4:	b	13390 <__assert_fail@plt+0x2434>
   132b8:	andeq	r3, r1, r0, lsr r3
   132bc:	muleq	r1, r0, r3
   132c0:	muleq	r1, r0, r3
   132c4:	muleq	r1, r0, r3
   132c8:	muleq	r1, r0, r3
   132cc:	muleq	r1, r0, r3
   132d0:	andeq	r3, r1, r0, lsr r3
   132d4:	andeq	r3, r1, r0, lsr r3
   132d8:	andeq	r3, r1, r0, lsr r3
   132dc:	muleq	r1, r0, r3
   132e0:	muleq	r1, r0, r3
   132e4:	muleq	r1, r0, r3
   132e8:	andeq	r3, r1, r0, lsr r3
   132ec:	muleq	r1, r0, r3
   132f0:	andeq	r3, r1, r0, lsr r3
   132f4:	muleq	r1, r0, r3
   132f8:	muleq	r1, r0, r3
   132fc:	muleq	r1, r0, r3
   13300:	muleq	r1, r0, r3
   13304:	muleq	r1, r0, r3
   13308:	muleq	r1, r0, r3
   1330c:	muleq	r1, r0, r3
   13310:	muleq	r1, r0, r3
   13314:	muleq	r1, r0, r3
   13318:	muleq	r1, r0, r3
   1331c:	muleq	r1, r0, r3
   13320:	muleq	r1, r0, r3
   13324:	andeq	r3, r1, r0, lsr r3
   13328:	andeq	r3, r1, r0, lsr r3
   1332c:	andeq	r3, r1, r0, lsr r3
   13330:	ldr	r2, [sp, #32]
   13334:	cmp	r2, #0
   13338:	bne	1343c <__assert_fail@plt+0x24e0>
   1333c:	cmp	sl, r4
   13340:	movhi	r2, #63	; 0x3f
   13344:	strbhi	r2, [r8, r4]
   13348:	add	r2, r4, #1
   1334c:	cmp	sl, r2
   13350:	movhi	r0, #34	; 0x22
   13354:	strbhi	r0, [r8, r2]
   13358:	add	r2, r4, #2
   1335c:	cmp	sl, r2
   13360:	movhi	r0, #34	; 0x22
   13364:	strbhi	r0, [r8, r2]
   13368:	add	r2, r4, #3
   1336c:	cmp	sl, r2
   13370:	movhi	r0, #63	; 0x3f
   13374:	strbhi	r0, [r8, r2]
   13378:	mov	r2, #0
   1337c:	add	r4, r4, #4
   13380:	mov	r5, r1
   13384:	mov	r9, r3
   13388:	mov	r6, r2
   1338c:	b	12788 <__assert_fail@plt+0x182c>
   13390:	mov	r2, #0
   13394:	mov	r6, r2
   13398:	b	122f8 <__assert_fail@plt+0x139c>
   1339c:	ldr	r0, [sp, #24]
   133a0:	mov	r1, r4
   133a4:	cmp	r1, r0
   133a8:	mov	r2, r7
   133ac:	mov	r3, r5
   133b0:	mov	ip, r5
   133b4:	ldr	r7, [sp, #96]	; 0x60
   133b8:	ldr	r5, [sp, #92]	; 0x5c
   133bc:	ldr	r4, [sp, #100]	; 0x64
   133c0:	ldr	r8, [sp, #84]	; 0x54
   133c4:	ldr	sl, [sp, #88]	; 0x58
   133c8:	bcs	133fc <__assert_fail@plt+0x24a0>
   133cc:	ldrb	r6, [r2]
   133d0:	cmp	r6, #0
   133d4:	bne	133e8 <__assert_fail@plt+0x248c>
   133d8:	b	13518 <__assert_fail@plt+0x25bc>
   133dc:	ldrb	r6, [r2, #1]!
   133e0:	cmp	r6, #0
   133e4:	beq	134a0 <__assert_fail@plt+0x2544>
   133e8:	add	r3, r3, #1
   133ec:	add	r1, r9, r3
   133f0:	cmp	r1, r0
   133f4:	bcc	133dc <__assert_fail@plt+0x2480>
   133f8:	mov	ip, r3
   133fc:	ldr	r2, [sp, #28]
   13400:	mov	r6, #0
   13404:	b	12f40 <__assert_fail@plt+0x1fe4>
   13408:	mov	r3, #1
   1340c:	str	r3, [sp, #40]	; 0x28
   13410:	str	r3, [sp, #32]
   13414:	str	r3, [sp, #28]
   13418:	str	r3, [sp, #52]	; 0x34
   1341c:	ldr	r3, [pc, #-2220]	; 12b78 <__assert_fail@plt+0x1c1c>
   13420:	mov	r2, #0
   13424:	str	r2, [sp, #68]	; 0x44
   13428:	str	r2, [sp, #44]	; 0x2c
   1342c:	str	r2, [sp, #72]	; 0x48
   13430:	mov	r4, r2
   13434:	str	r3, [sp, #60]	; 0x3c
   13438:	b	11e60 <__assert_fail@plt+0xf04>
   1343c:	str	fp, [sp, #160]	; 0xa0
   13440:	mov	fp, r8
   13444:	ldr	r8, [sp, #160]	; 0xa0
   13448:	b	12610 <__assert_fail@plt+0x16b4>
   1344c:	mov	r2, r3
   13450:	ldr	r3, [sp, #60]	; 0x3c
   13454:	cmp	r3, #0
   13458:	moveq	r2, #0
   1345c:	andne	r2, r2, #1
   13460:	cmp	r2, #0
   13464:	beq	13490 <__assert_fail@plt+0x2534>
   13468:	mov	r2, r3
   1346c:	ldrb	r3, [r3]
   13470:	cmp	r3, #0
   13474:	beq	13490 <__assert_fail@plt+0x2534>
   13478:	cmp	sl, r4
   1347c:	strbhi	r3, [fp, r4]
   13480:	ldrb	r3, [r2, #1]!
   13484:	add	r4, r4, #1
   13488:	cmp	r3, #0
   1348c:	bne	13478 <__assert_fail@plt+0x251c>
   13490:	cmp	sl, r4
   13494:	movhi	r3, #0
   13498:	strbhi	r3, [fp, r4]
   1349c:	b	12650 <__assert_fail@plt+0x16f4>
   134a0:	mov	ip, r3
   134a4:	ldr	r2, [sp, #28]
   134a8:	b	12f40 <__assert_fail@plt+0x1fe4>
   134ac:	str	fp, [sp, #160]	; 0xa0
   134b0:	mov	fp, r8
   134b4:	ldr	r8, [sp, #160]	; 0xa0
   134b8:	sub	r3, r8, #2
   134bc:	clz	r3, r3
   134c0:	lsr	r3, r3, #5
   134c4:	str	r3, [sp, #28]
   134c8:	b	12604 <__assert_fail@plt+0x16a8>
   134cc:	ldr	r3, [sp, #76]	; 0x4c
   134d0:	mov	ip, #5
   134d4:	str	r3, [sp, #16]
   134d8:	ldr	r3, [sp, #80]	; 0x50
   134dc:	ldr	r2, [sp, #36]	; 0x24
   134e0:	str	r3, [sp, #12]
   134e4:	ldr	r3, [sp, #56]	; 0x38
   134e8:	ldr	r1, [sp, #72]	; 0x48
   134ec:	str	r3, [sp, #8]
   134f0:	ldr	r3, [sp, #164]	; 0xa4
   134f4:	mov	r0, fp
   134f8:	str	r3, [sp, #4]
   134fc:	str	ip, [sp]
   13500:	ldr	r3, [sp, #24]
   13504:	bl	11d68 <__assert_fail@plt+0xe0c>
   13508:	mov	r4, r0
   1350c:	b	12650 <__assert_fail@plt+0x16f4>
   13510:	mov	r8, #2
   13514:	b	12604 <__assert_fail@plt+0x16a8>
   13518:	ldr	r2, [sp, #28]
   1351c:	b	12f40 <__assert_fail@plt+0x1fe4>
   13520:	mov	r3, #0
   13524:	str	r3, [sp, #68]	; 0x44
   13528:	str	r3, [sp, #44]	; 0x2c
   1352c:	str	r3, [sp, #72]	; 0x48
   13530:	str	r3, [sp, #28]
   13534:	mov	r4, r3
   13538:	ldr	r3, [pc, #-2500]	; 12b7c <__assert_fail@plt+0x1c20>
   1353c:	mov	r2, #1
   13540:	str	r2, [sp, #40]	; 0x28
   13544:	str	r2, [sp, #32]
   13548:	str	r2, [sp, #52]	; 0x34
   1354c:	str	r3, [sp, #60]	; 0x3c
   13550:	b	11e60 <__assert_fail@plt+0xf04>
   13554:	bl	10dac <__stack_chk_fail@plt>
   13558:	mov	r5, r3
   1355c:	mov	r6, #0
   13560:	b	12354 <__assert_fail@plt+0x13f8>
   13564:	mov	r3, #0
   13568:	mov	r2, #1
   1356c:	str	r3, [sp, #44]	; 0x2c
   13570:	str	r3, [sp, #72]	; 0x48
   13574:	str	r2, [sp, #40]	; 0x28
   13578:	b	12470 <__assert_fail@plt+0x1514>
   1357c:	bl	10f50 <abort@plt>
   13580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13584:	sub	sp, sp, #44	; 0x2c
   13588:	mov	r6, r0
   1358c:	mov	r4, r3
   13590:	mov	sl, r1
   13594:	mov	fp, r2
   13598:	bl	10e90 <__errno_location@plt>
   1359c:	ldr	r7, [pc, #364]	; 13710 <__assert_fail@plt+0x27b4>
   135a0:	cmp	r6, #0
   135a4:	ldr	r5, [r7]
   135a8:	ldr	r3, [r0]
   135ac:	str	r3, [sp, #24]
   135b0:	blt	1370c <__assert_fail@plt+0x27b0>
   135b4:	ldr	r3, [r7, #4]
   135b8:	mov	r8, r0
   135bc:	cmp	r3, r6
   135c0:	bgt	1360c <__assert_fail@plt+0x26b0>
   135c4:	cmn	r6, #-268435454	; 0xf0000002
   135c8:	bgt	13708 <__assert_fail@plt+0x27ac>
   135cc:	add	r9, r6, #1
   135d0:	add	r3, r7, #8
   135d4:	cmp	r5, r3
   135d8:	lsl	r1, r9, #3
   135dc:	beq	136e8 <__assert_fail@plt+0x278c>
   135e0:	mov	r0, r5
   135e4:	bl	14374 <__assert_fail@plt+0x3418>
   135e8:	mov	r5, r0
   135ec:	str	r0, [r7]
   135f0:	ldr	r0, [r7, #4]
   135f4:	mov	r1, #0
   135f8:	sub	r2, r9, r0
   135fc:	add	r0, r5, r0, lsl #3
   13600:	lsl	r2, r2, #3
   13604:	bl	10ea8 <memset@plt>
   13608:	str	r9, [r7, #4]
   1360c:	add	r3, r5, r6, lsl #3
   13610:	ldr	r1, [r4, #4]
   13614:	ldr	r7, [r3, #4]
   13618:	ldr	r9, [r5, r6, lsl #3]
   1361c:	ldr	r2, [r4, #40]	; 0x28
   13620:	ldr	ip, [r4, #44]	; 0x2c
   13624:	str	r3, [sp, #28]
   13628:	ldr	r3, [r4]
   1362c:	orr	r1, r1, #1
   13630:	add	lr, r4, #8
   13634:	str	r1, [sp, #36]	; 0x24
   13638:	str	r1, [sp, #4]
   1363c:	str	r2, [sp, #12]
   13640:	str	r3, [sp]
   13644:	mov	r0, r7
   13648:	mov	r1, r9
   1364c:	str	ip, [sp, #16]
   13650:	str	lr, [sp, #8]
   13654:	mov	r3, fp
   13658:	mov	r2, sl
   1365c:	str	lr, [sp, #32]
   13660:	bl	11d68 <__assert_fail@plt+0xe0c>
   13664:	cmp	r9, r0
   13668:	bhi	136d4 <__assert_fail@plt+0x2778>
   1366c:	ldr	r3, [pc, #160]	; 13714 <__assert_fail@plt+0x27b8>
   13670:	add	r9, r0, #1
   13674:	cmp	r7, r3
   13678:	str	r9, [r5, r6, lsl #3]
   1367c:	beq	13688 <__assert_fail@plt+0x272c>
   13680:	mov	r0, r7
   13684:	bl	10d4c <free@plt>
   13688:	mov	r0, r9
   1368c:	bl	14318 <__assert_fail@plt+0x33bc>
   13690:	ldr	lr, [sp, #28]
   13694:	ldr	ip, [r4, #44]	; 0x2c
   13698:	ldr	r5, [r4, #40]	; 0x28
   1369c:	mov	r3, fp
   136a0:	mov	r2, sl
   136a4:	mov	r1, r9
   136a8:	str	r0, [lr, #4]
   136ac:	ldr	lr, [r4]
   136b0:	ldr	r4, [sp, #32]
   136b4:	str	ip, [sp, #16]
   136b8:	str	r4, [sp, #8]
   136bc:	ldr	r4, [sp, #36]	; 0x24
   136c0:	str	r5, [sp, #12]
   136c4:	str	r4, [sp, #4]
   136c8:	str	lr, [sp]
   136cc:	mov	r7, r0
   136d0:	bl	11d68 <__assert_fail@plt+0xe0c>
   136d4:	ldr	r3, [sp, #24]
   136d8:	mov	r0, r7
   136dc:	str	r3, [r8]
   136e0:	add	sp, sp, #44	; 0x2c
   136e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e8:	mov	r0, #0
   136ec:	bl	14374 <__assert_fail@plt+0x3418>
   136f0:	ldr	r3, [pc, #32]	; 13718 <__assert_fail@plt+0x27bc>
   136f4:	mov	r5, r0
   136f8:	ldm	r3, {r0, r1}
   136fc:	str	r5, [r7]
   13700:	stm	r5, {r0, r1}
   13704:	b	135f0 <__assert_fail@plt+0x2694>
   13708:	bl	14560 <__assert_fail@plt+0x3604>
   1370c:	bl	10f50 <abort@plt>
   13710:	strdeq	r7, [r2], -r0
   13714:	andeq	r7, r2, r4, ror r1
   13718:	strdeq	r7, [r2], -r8
   1371c:	push	{r4, r5, r6, lr}
   13720:	mov	r5, r0
   13724:	bl	10e90 <__errno_location@plt>
   13728:	cmp	r5, #0
   1372c:	mov	r1, #48	; 0x30
   13730:	mov	r4, r0
   13734:	ldr	r0, [pc, #16]	; 1374c <__assert_fail@plt+0x27f0>
   13738:	ldr	r6, [r4]
   1373c:	movne	r0, r5
   13740:	bl	14520 <__assert_fail@plt+0x35c4>
   13744:	str	r6, [r4]
   13748:	pop	{r4, r5, r6, pc}
   1374c:	andeq	r7, r2, r4, ror r2
   13750:	ldr	r3, [pc, #12]	; 13764 <__assert_fail@plt+0x2808>
   13754:	cmp	r0, #0
   13758:	moveq	r0, r3
   1375c:	ldr	r0, [r0]
   13760:	bx	lr
   13764:	andeq	r7, r2, r4, ror r2
   13768:	ldr	r3, [pc, #12]	; 1377c <__assert_fail@plt+0x2820>
   1376c:	cmp	r0, #0
   13770:	moveq	r0, r3
   13774:	str	r1, [r0]
   13778:	bx	lr
   1377c:	andeq	r7, r2, r4, ror r2
   13780:	ldr	r3, [pc, #52]	; 137bc <__assert_fail@plt+0x2860>
   13784:	cmp	r0, #0
   13788:	moveq	r0, r3
   1378c:	add	r3, r0, #8
   13790:	push	{lr}		; (str lr, [sp, #-4]!)
   13794:	lsr	lr, r1, #5
   13798:	and	r1, r1, #31
   1379c:	ldr	ip, [r3, lr, lsl #2]
   137a0:	lsr	r0, ip, r1
   137a4:	eor	r2, r2, r0
   137a8:	and	r2, r2, #1
   137ac:	and	r0, r0, #1
   137b0:	eor	r1, ip, r2, lsl r1
   137b4:	str	r1, [r3, lr, lsl #2]
   137b8:	pop	{pc}		; (ldr pc, [sp], #4)
   137bc:	andeq	r7, r2, r4, ror r2
   137c0:	ldr	r3, [pc, #16]	; 137d8 <__assert_fail@plt+0x287c>
   137c4:	cmp	r0, #0
   137c8:	movne	r3, r0
   137cc:	ldr	r0, [r3, #4]
   137d0:	str	r1, [r3, #4]
   137d4:	bx	lr
   137d8:	andeq	r7, r2, r4, ror r2
   137dc:	ldr	r3, [pc, #44]	; 13810 <__assert_fail@plt+0x28b4>
   137e0:	cmp	r0, #0
   137e4:	moveq	r0, r3
   137e8:	mov	ip, #10
   137ec:	cmp	r2, #0
   137f0:	cmpne	r1, #0
   137f4:	str	ip, [r0]
   137f8:	beq	13808 <__assert_fail@plt+0x28ac>
   137fc:	str	r1, [r0, #40]	; 0x28
   13800:	str	r2, [r0, #44]	; 0x2c
   13804:	bx	lr
   13808:	push	{r4, lr}
   1380c:	bl	10f50 <abort@plt>
   13810:	andeq	r7, r2, r4, ror r2
   13814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13818:	sub	sp, sp, #24
   1381c:	ldr	ip, [pc, #108]	; 13890 <__assert_fail@plt+0x2934>
   13820:	ldr	r4, [sp, #56]	; 0x38
   13824:	mov	r9, r2
   13828:	cmp	r4, #0
   1382c:	moveq	r4, ip
   13830:	mov	sl, r3
   13834:	mov	r7, r0
   13838:	mov	r8, r1
   1383c:	bl	10e90 <__errno_location@plt>
   13840:	ldr	r3, [r4, #44]	; 0x2c
   13844:	mov	r1, r8
   13848:	ldr	r6, [r0]
   1384c:	str	r3, [sp, #16]
   13850:	ldr	r2, [r4, #40]	; 0x28
   13854:	add	r3, r4, #8
   13858:	str	r3, [sp, #8]
   1385c:	str	r2, [sp, #12]
   13860:	ldr	r2, [r4, #4]
   13864:	mov	r5, r0
   13868:	str	r2, [sp, #4]
   1386c:	ldr	ip, [r4]
   13870:	mov	r3, sl
   13874:	mov	r2, r9
   13878:	mov	r0, r7
   1387c:	str	ip, [sp]
   13880:	bl	11d68 <__assert_fail@plt+0xe0c>
   13884:	str	r6, [r5]
   13888:	add	sp, sp, #24
   1388c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13890:	andeq	r7, r2, r4, ror r2
   13894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13898:	cmp	r3, #0
   1389c:	sub	sp, sp, #44	; 0x2c
   138a0:	ldr	r4, [pc, #192]	; 13968 <__assert_fail@plt+0x2a0c>
   138a4:	mov	r6, r2
   138a8:	movne	r4, r3
   138ac:	mov	r9, r1
   138b0:	mov	r8, r0
   138b4:	bl	10e90 <__errno_location@plt>
   138b8:	ldr	r3, [r4, #44]	; 0x2c
   138bc:	ldr	r5, [r4, #4]
   138c0:	add	sl, r4, #8
   138c4:	cmp	r6, #0
   138c8:	orreq	r5, r5, #1
   138cc:	mov	r1, #0
   138d0:	ldr	r2, [r0]
   138d4:	str	r3, [sp, #16]
   138d8:	ldr	r3, [r4, #40]	; 0x28
   138dc:	stmib	sp, {r5, sl}
   138e0:	str	r3, [sp, #12]
   138e4:	ldr	r3, [r4]
   138e8:	mov	r7, r0
   138ec:	str	r2, [sp, #28]
   138f0:	str	r3, [sp]
   138f4:	mov	r2, r8
   138f8:	mov	r3, r9
   138fc:	mov	r0, r1
   13900:	bl	11d68 <__assert_fail@plt+0xe0c>
   13904:	add	r1, r0, #1
   13908:	mov	fp, r0
   1390c:	mov	r0, r1
   13910:	str	r1, [sp, #36]	; 0x24
   13914:	bl	14318 <__assert_fail@plt+0x33bc>
   13918:	ldr	r3, [r4, #44]	; 0x2c
   1391c:	mov	r2, r8
   13920:	str	r3, [sp, #16]
   13924:	ldr	r3, [r4, #40]	; 0x28
   13928:	str	r5, [sp, #4]
   1392c:	str	r3, [sp, #12]
   13930:	str	sl, [sp, #8]
   13934:	ldr	ip, [r4]
   13938:	ldr	r1, [sp, #36]	; 0x24
   1393c:	mov	r3, r9
   13940:	str	ip, [sp]
   13944:	str	r0, [sp, #32]
   13948:	bl	11d68 <__assert_fail@plt+0xe0c>
   1394c:	ldr	r2, [sp, #28]
   13950:	cmp	r6, #0
   13954:	str	r2, [r7]
   13958:	ldr	r0, [sp, #32]
   1395c:	strne	fp, [r6]
   13960:	add	sp, sp, #44	; 0x2c
   13964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13968:	andeq	r7, r2, r4, ror r2
   1396c:	mov	r3, r2
   13970:	mov	r2, #0
   13974:	b	13894 <__assert_fail@plt+0x2938>
   13978:	push	{r4, r5, r6, r7, r8, lr}
   1397c:	ldr	r6, [pc, #112]	; 139f4 <__assert_fail@plt+0x2a98>
   13980:	ldr	r3, [r6, #4]
   13984:	ldr	r7, [r6]
   13988:	cmp	r3, #1
   1398c:	ble	139b0 <__assert_fail@plt+0x2a54>
   13990:	sub	r5, r7, #8
   13994:	add	r5, r5, r3, lsl #3
   13998:	mov	r4, r7
   1399c:	ldr	r0, [r4, #12]
   139a0:	add	r4, r4, #8
   139a4:	bl	10d4c <free@plt>
   139a8:	cmp	r4, r5
   139ac:	bne	1399c <__assert_fail@plt+0x2a40>
   139b0:	ldr	r0, [r7, #4]
   139b4:	ldr	r4, [pc, #60]	; 139f8 <__assert_fail@plt+0x2a9c>
   139b8:	cmp	r0, r4
   139bc:	beq	139d0 <__assert_fail@plt+0x2a74>
   139c0:	bl	10d4c <free@plt>
   139c4:	mov	r3, #256	; 0x100
   139c8:	str	r4, [r6, #12]
   139cc:	str	r3, [r6, #8]
   139d0:	ldr	r4, [pc, #36]	; 139fc <__assert_fail@plt+0x2aa0>
   139d4:	cmp	r7, r4
   139d8:	beq	139e8 <__assert_fail@plt+0x2a8c>
   139dc:	mov	r0, r7
   139e0:	bl	10d4c <free@plt>
   139e4:	str	r4, [r6]
   139e8:	mov	r3, #1
   139ec:	str	r3, [r6, #4]
   139f0:	pop	{r4, r5, r6, r7, r8, pc}
   139f4:	strdeq	r7, [r2], -r0
   139f8:	andeq	r7, r2, r4, ror r1
   139fc:	strdeq	r7, [r2], -r8
   13a00:	ldr	r3, [pc, #4]	; 13a0c <__assert_fail@plt+0x2ab0>
   13a04:	mvn	r2, #0
   13a08:	b	13580 <__assert_fail@plt+0x2624>
   13a0c:	andeq	r7, r2, r4, ror r2
   13a10:	ldr	r3, [pc]	; 13a18 <__assert_fail@plt+0x2abc>
   13a14:	b	13580 <__assert_fail@plt+0x2624>
   13a18:	andeq	r7, r2, r4, ror r2
   13a1c:	mov	r1, r0
   13a20:	ldr	r3, [pc, #8]	; 13a30 <__assert_fail@plt+0x2ad4>
   13a24:	mvn	r2, #0
   13a28:	mov	r0, #0
   13a2c:	b	13580 <__assert_fail@plt+0x2624>
   13a30:	andeq	r7, r2, r4, ror r2
   13a34:	mov	r2, r1
   13a38:	ldr	r3, [pc, #8]	; 13a48 <__assert_fail@plt+0x2aec>
   13a3c:	mov	r1, r0
   13a40:	mov	r0, #0
   13a44:	b	13580 <__assert_fail@plt+0x2624>
   13a48:	andeq	r7, r2, r4, ror r2
   13a4c:	push	{r4, r5, r6, lr}
   13a50:	sub	sp, sp, #56	; 0x38
   13a54:	ldr	r4, [pc, #68]	; 13aa0 <__assert_fail@plt+0x2b44>
   13a58:	mov	r6, r2
   13a5c:	mov	r5, r0
   13a60:	ldr	r3, [r4]
   13a64:	add	r0, sp, #4
   13a68:	str	r3, [sp, #52]	; 0x34
   13a6c:	bl	11bf8 <__assert_fail@plt+0xc9c>
   13a70:	add	r3, sp, #4
   13a74:	mvn	r2, #0
   13a78:	mov	r1, r6
   13a7c:	mov	r0, r5
   13a80:	bl	13580 <__assert_fail@plt+0x2624>
   13a84:	ldr	r2, [sp, #52]	; 0x34
   13a88:	ldr	r3, [r4]
   13a8c:	cmp	r2, r3
   13a90:	bne	13a9c <__assert_fail@plt+0x2b40>
   13a94:	add	sp, sp, #56	; 0x38
   13a98:	pop	{r4, r5, r6, pc}
   13a9c:	bl	10dac <__stack_chk_fail@plt>
   13aa0:	andeq	r6, r2, r8, lsl #30
   13aa4:	push	{r4, r5, r6, r7, lr}
   13aa8:	sub	sp, sp, #60	; 0x3c
   13aac:	ldr	r4, [pc, #72]	; 13afc <__assert_fail@plt+0x2ba0>
   13ab0:	mov	r6, r2
   13ab4:	mov	r7, r3
   13ab8:	ldr	ip, [r4]
   13abc:	mov	r5, r0
   13ac0:	add	r0, sp, #4
   13ac4:	str	ip, [sp, #52]	; 0x34
   13ac8:	bl	11bf8 <__assert_fail@plt+0xc9c>
   13acc:	add	r3, sp, #4
   13ad0:	mov	r2, r7
   13ad4:	mov	r1, r6
   13ad8:	mov	r0, r5
   13adc:	bl	13580 <__assert_fail@plt+0x2624>
   13ae0:	ldr	r2, [sp, #52]	; 0x34
   13ae4:	ldr	r3, [r4]
   13ae8:	cmp	r2, r3
   13aec:	bne	13af8 <__assert_fail@plt+0x2b9c>
   13af0:	add	sp, sp, #60	; 0x3c
   13af4:	pop	{r4, r5, r6, r7, pc}
   13af8:	bl	10dac <__stack_chk_fail@plt>
   13afc:	andeq	r6, r2, r8, lsl #30
   13b00:	mov	r2, r1
   13b04:	mov	r1, r0
   13b08:	mov	r0, #0
   13b0c:	b	13a4c <__assert_fail@plt+0x2af0>
   13b10:	mov	r3, r2
   13b14:	mov	r2, r1
   13b18:	mov	r1, r0
   13b1c:	mov	r0, #0
   13b20:	b	13aa4 <__assert_fail@plt+0x2b48>
   13b24:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b28:	mov	r4, r2
   13b2c:	ldr	lr, [pc, #128]	; 13bb4 <__assert_fail@plt+0x2c58>
   13b30:	mov	r8, r0
   13b34:	mov	r9, r1
   13b38:	ldm	lr!, {r0, r1, r2, r3}
   13b3c:	sub	sp, sp, #60	; 0x3c
   13b40:	add	ip, sp, #4
   13b44:	lsr	r6, r4, #5
   13b48:	stmia	ip!, {r0, r1, r2, r3}
   13b4c:	add	r7, sp, #12
   13b50:	ldm	lr!, {r0, r1, r2, r3}
   13b54:	and	r4, r4, #31
   13b58:	ldr	r5, [pc, #88]	; 13bb8 <__assert_fail@plt+0x2c5c>
   13b5c:	stmia	ip!, {r0, r1, r2, r3}
   13b60:	ldm	lr, {r0, r1, r2, r3}
   13b64:	stm	ip, {r0, r1, r2, r3}
   13b68:	mov	r2, r9
   13b6c:	ldr	r3, [r7, r6, lsl #2]
   13b70:	ldr	ip, [r5]
   13b74:	mov	r1, r8
   13b78:	mvn	r0, r3, lsr r4
   13b7c:	and	r0, r0, #1
   13b80:	str	ip, [sp, #52]	; 0x34
   13b84:	eor	r4, r3, r0, lsl r4
   13b88:	add	r3, sp, #4
   13b8c:	mov	r0, #0
   13b90:	str	r4, [r7, r6, lsl #2]
   13b94:	bl	13580 <__assert_fail@plt+0x2624>
   13b98:	ldr	r2, [sp, #52]	; 0x34
   13b9c:	ldr	r3, [r5]
   13ba0:	cmp	r2, r3
   13ba4:	bne	13bb0 <__assert_fail@plt+0x2c54>
   13ba8:	add	sp, sp, #60	; 0x3c
   13bac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13bb0:	bl	10dac <__stack_chk_fail@plt>
   13bb4:	andeq	r7, r2, r4, ror r2
   13bb8:	andeq	r6, r2, r8, lsl #30
   13bbc:	mov	r2, r1
   13bc0:	mvn	r1, #0
   13bc4:	b	13b24 <__assert_fail@plt+0x2bc8>
   13bc8:	mov	r2, #58	; 0x3a
   13bcc:	mvn	r1, #0
   13bd0:	b	13b24 <__assert_fail@plt+0x2bc8>
   13bd4:	mov	r2, #58	; 0x3a
   13bd8:	b	13b24 <__assert_fail@plt+0x2bc8>
   13bdc:	push	{r4, r5, r6, r7, r8, lr}
   13be0:	sub	sp, sp, #104	; 0x68
   13be4:	ldr	r5, [pc, #120]	; 13c64 <__assert_fail@plt+0x2d08>
   13be8:	mov	r6, r0
   13bec:	mov	r0, sp
   13bf0:	ldr	r3, [r5]
   13bf4:	mov	r7, r2
   13bf8:	str	r3, [sp, #100]	; 0x64
   13bfc:	bl	11bf8 <__assert_fail@plt+0xc9c>
   13c00:	mov	ip, sp
   13c04:	add	lr, sp, #52	; 0x34
   13c08:	ldm	ip!, {r0, r1, r2, r3}
   13c0c:	stmia	lr!, {r0, r1, r2, r3}
   13c10:	ldm	ip!, {r0, r1, r2, r3}
   13c14:	ldr	r8, [sp, #64]	; 0x40
   13c18:	stmia	lr!, {r0, r1, r2, r3}
   13c1c:	mvn	r4, r8
   13c20:	ldm	ip, {r0, r1, r2, r3}
   13c24:	and	ip, r4, #67108864	; 0x4000000
   13c28:	eor	ip, ip, r8
   13c2c:	str	ip, [sp, #64]	; 0x40
   13c30:	stm	lr, {r0, r1, r2, r3}
   13c34:	add	r3, sp, #52	; 0x34
   13c38:	mvn	r2, #0
   13c3c:	mov	r1, r7
   13c40:	mov	r0, r6
   13c44:	bl	13580 <__assert_fail@plt+0x2624>
   13c48:	ldr	r2, [sp, #100]	; 0x64
   13c4c:	ldr	r3, [r5]
   13c50:	cmp	r2, r3
   13c54:	bne	13c60 <__assert_fail@plt+0x2d04>
   13c58:	add	sp, sp, #104	; 0x68
   13c5c:	pop	{r4, r5, r6, r7, r8, pc}
   13c60:	bl	10dac <__stack_chk_fail@plt>
   13c64:	andeq	r6, r2, r8, lsl #30
   13c68:	push	{r4, r5, r6, r7, r8, r9, lr}
   13c6c:	mov	r6, r1
   13c70:	ldr	lr, [pc, #132]	; 13cfc <__assert_fail@plt+0x2da0>
   13c74:	mov	r5, r2
   13c78:	mov	r8, r0
   13c7c:	mov	r9, r3
   13c80:	ldm	lr!, {r0, r1, r2, r3}
   13c84:	sub	sp, sp, #60	; 0x3c
   13c88:	add	ip, sp, #4
   13c8c:	ldr	r4, [pc, #108]	; 13d00 <__assert_fail@plt+0x2da4>
   13c90:	stmia	ip!, {r0, r1, r2, r3}
   13c94:	mov	r7, #10
   13c98:	ldm	lr!, {r0, r1, r2, r3}
   13c9c:	cmp	r5, #0
   13ca0:	cmpne	r6, #0
   13ca4:	str	r7, [sp, #4]
   13ca8:	stmia	ip!, {r0, r1, r2, r3}
   13cac:	ldm	lr, {r0, r1, r2, r3}
   13cb0:	ldr	lr, [r4]
   13cb4:	stm	ip, {r0, r1, r2, r3}
   13cb8:	str	lr, [sp, #52]	; 0x34
   13cbc:	beq	13cf8 <__assert_fail@plt+0x2d9c>
   13cc0:	add	r3, sp, #4
   13cc4:	ldr	r2, [sp, #88]	; 0x58
   13cc8:	mov	r1, r9
   13ccc:	mov	r0, r8
   13cd0:	str	r6, [sp, #44]	; 0x2c
   13cd4:	str	r5, [sp, #48]	; 0x30
   13cd8:	bl	13580 <__assert_fail@plt+0x2624>
   13cdc:	ldr	r2, [sp, #52]	; 0x34
   13ce0:	ldr	r3, [r4]
   13ce4:	cmp	r2, r3
   13ce8:	bne	13cf4 <__assert_fail@plt+0x2d98>
   13cec:	add	sp, sp, #60	; 0x3c
   13cf0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13cf4:	bl	10dac <__stack_chk_fail@plt>
   13cf8:	bl	10f50 <abort@plt>
   13cfc:	andeq	r7, r2, r4, ror r2
   13d00:	andeq	r6, r2, r8, lsl #30
   13d04:	push	{lr}		; (str lr, [sp, #-4]!)
   13d08:	sub	sp, sp, #12
   13d0c:	mvn	ip, #0
   13d10:	str	ip, [sp]
   13d14:	bl	13c68 <__assert_fail@plt+0x2d0c>
   13d18:	add	sp, sp, #12
   13d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d20:	push	{lr}		; (str lr, [sp, #-4]!)
   13d24:	sub	sp, sp, #12
   13d28:	mvn	ip, #0
   13d2c:	mov	r3, r2
   13d30:	str	ip, [sp]
   13d34:	mov	r2, r1
   13d38:	mov	r1, r0
   13d3c:	mov	r0, #0
   13d40:	bl	13c68 <__assert_fail@plt+0x2d0c>
   13d44:	add	sp, sp, #12
   13d48:	pop	{pc}		; (ldr pc, [sp], #4)
   13d4c:	push	{lr}		; (str lr, [sp, #-4]!)
   13d50:	sub	sp, sp, #12
   13d54:	str	r3, [sp]
   13d58:	mov	r3, r2
   13d5c:	mov	r2, r1
   13d60:	mov	r1, r0
   13d64:	mov	r0, #0
   13d68:	bl	13c68 <__assert_fail@plt+0x2d0c>
   13d6c:	add	sp, sp, #12
   13d70:	pop	{pc}		; (ldr pc, [sp], #4)
   13d74:	ldr	r3, [pc]	; 13d7c <__assert_fail@plt+0x2e20>
   13d78:	b	13580 <__assert_fail@plt+0x2624>
   13d7c:	andeq	r7, r2, r0, lsl #2
   13d80:	mov	r2, r1
   13d84:	ldr	r3, [pc, #8]	; 13d94 <__assert_fail@plt+0x2e38>
   13d88:	mov	r1, r0
   13d8c:	mov	r0, #0
   13d90:	b	13580 <__assert_fail@plt+0x2624>
   13d94:	andeq	r7, r2, r0, lsl #2
   13d98:	ldr	r3, [pc, #4]	; 13da4 <__assert_fail@plt+0x2e48>
   13d9c:	mvn	r2, #0
   13da0:	b	13580 <__assert_fail@plt+0x2624>
   13da4:	andeq	r7, r2, r0, lsl #2
   13da8:	mov	r1, r0
   13dac:	ldr	r3, [pc, #8]	; 13dbc <__assert_fail@plt+0x2e60>
   13db0:	mvn	r2, #0
   13db4:	mov	r0, #0
   13db8:	b	13580 <__assert_fail@plt+0x2624>
   13dbc:	andeq	r7, r2, r0, lsl #2
   13dc0:	push	{r4, r5, r6, lr}
   13dc4:	sub	sp, sp, #32
   13dc8:	cmp	r1, #0
   13dcc:	mov	r5, r0
   13dd0:	ldr	r4, [sp, #48]	; 0x30
   13dd4:	ldr	r6, [sp, #52]	; 0x34
   13dd8:	beq	13e68 <__assert_fail@plt+0x2f0c>
   13ddc:	strd	r2, [sp]
   13de0:	mov	r3, r1
   13de4:	ldr	r2, [pc, #828]	; 14128 <__assert_fail@plt+0x31cc>
   13de8:	mov	r1, #1
   13dec:	bl	10ecc <__fprintf_chk@plt>
   13df0:	mov	r2, #5
   13df4:	ldr	r1, [pc, #816]	; 1412c <__assert_fail@plt+0x31d0>
   13df8:	mov	r0, #0
   13dfc:	bl	10da0 <dcgettext@plt>
   13e00:	ldr	r3, [pc, #808]	; 14130 <__assert_fail@plt+0x31d4>
   13e04:	ldr	r2, [pc, #808]	; 14134 <__assert_fail@plt+0x31d8>
   13e08:	str	r3, [sp]
   13e0c:	mov	r1, #1
   13e10:	mov	r3, r0
   13e14:	mov	r0, r5
   13e18:	bl	10ecc <__fprintf_chk@plt>
   13e1c:	ldr	r1, [pc, #788]	; 14138 <__assert_fail@plt+0x31dc>
   13e20:	mov	r2, #5
   13e24:	mov	r0, #0
   13e28:	bl	10da0 <dcgettext@plt>
   13e2c:	mov	r1, r5
   13e30:	bl	10d04 <fputs_unlocked@plt>
   13e34:	cmp	r6, #9
   13e38:	ldrls	pc, [pc, r6, lsl #2]
   13e3c:	b	14118 <__assert_fail@plt+0x31bc>
   13e40:	andeq	r4, r1, r4, lsr #2
   13e44:	andeq	r3, r1, ip, ror #29
   13e48:	andeq	r3, r1, r8, lsl pc
   13e4c:	andeq	r3, r1, ip, asr #30
   13e50:	andeq	r3, r1, r8, lsl #31
   13e54:	andeq	r3, r1, r8, asr #31
   13e58:	andeq	r4, r1, r0, lsl r0
   13e5c:	andeq	r4, r1, r0, rrx
   13e60:	strheq	r4, [r1], -r8
   13e64:	andeq	r3, r1, r0, lsl #29
   13e68:	str	r3, [sp]
   13e6c:	mov	r1, #1
   13e70:	mov	r3, r2
   13e74:	ldr	r2, [pc, #704]	; 1413c <__assert_fail@plt+0x31e0>
   13e78:	bl	10ecc <__fprintf_chk@plt>
   13e7c:	b	13df0 <__assert_fail@plt+0x2e94>
   13e80:	ldr	r1, [pc, #696]	; 14140 <__assert_fail@plt+0x31e4>
   13e84:	mov	r2, #5
   13e88:	mov	r0, #0
   13e8c:	bl	10da0 <dcgettext@plt>
   13e90:	ldr	r2, [r4, #32]
   13e94:	ldr	r3, [r4, #28]
   13e98:	ldr	r1, [r4, #24]
   13e9c:	str	r2, [sp, #28]
   13ea0:	ldr	r2, [r4, #20]
   13ea4:	str	r3, [sp, #24]
   13ea8:	ldr	r3, [r4, #16]
   13eac:	str	r1, [sp, #20]
   13eb0:	ldr	r1, [r4, #12]
   13eb4:	str	r2, [sp, #16]
   13eb8:	ldr	r2, [r4, #8]
   13ebc:	str	r3, [sp, #12]
   13ec0:	ldr	r3, [r4, #4]
   13ec4:	str	r1, [sp, #8]
   13ec8:	str	r2, [sp, #4]
   13ecc:	str	r3, [sp]
   13ed0:	mov	r1, #1
   13ed4:	ldr	r3, [r4]
   13ed8:	mov	r2, r0
   13edc:	mov	r0, r5
   13ee0:	bl	10ecc <__fprintf_chk@plt>
   13ee4:	add	sp, sp, #32
   13ee8:	pop	{r4, r5, r6, pc}
   13eec:	mov	r2, #5
   13ef0:	ldr	r1, [pc, #588]	; 14144 <__assert_fail@plt+0x31e8>
   13ef4:	mov	r0, #0
   13ef8:	bl	10da0 <dcgettext@plt>
   13efc:	ldr	r3, [r4]
   13f00:	mov	r1, #1
   13f04:	mov	r2, r0
   13f08:	mov	r0, r5
   13f0c:	add	sp, sp, #32
   13f10:	pop	{r4, r5, r6, lr}
   13f14:	b	10ecc <__fprintf_chk@plt>
   13f18:	mov	r2, #5
   13f1c:	ldr	r1, [pc, #548]	; 14148 <__assert_fail@plt+0x31ec>
   13f20:	mov	r0, #0
   13f24:	bl	10da0 <dcgettext@plt>
   13f28:	ldr	r2, [r4, #4]
   13f2c:	ldr	r3, [r4]
   13f30:	mov	r1, #1
   13f34:	str	r2, [sp, #48]	; 0x30
   13f38:	mov	r2, r0
   13f3c:	mov	r0, r5
   13f40:	add	sp, sp, #32
   13f44:	pop	{r4, r5, r6, lr}
   13f48:	b	10ecc <__fprintf_chk@plt>
   13f4c:	mov	r2, #5
   13f50:	ldr	r1, [pc, #500]	; 1414c <__assert_fail@plt+0x31f0>
   13f54:	mov	r0, #0
   13f58:	bl	10da0 <dcgettext@plt>
   13f5c:	ldr	r2, [r4, #8]
   13f60:	ldr	r3, [r4, #4]
   13f64:	mov	r1, #1
   13f68:	str	r2, [sp, #52]	; 0x34
   13f6c:	str	r3, [sp, #48]	; 0x30
   13f70:	ldr	r3, [r4]
   13f74:	mov	r2, r0
   13f78:	mov	r0, r5
   13f7c:	add	sp, sp, #32
   13f80:	pop	{r4, r5, r6, lr}
   13f84:	b	10ecc <__fprintf_chk@plt>
   13f88:	mov	r2, #5
   13f8c:	ldr	r1, [pc, #444]	; 14150 <__assert_fail@plt+0x31f4>
   13f90:	mov	r0, #0
   13f94:	bl	10da0 <dcgettext@plt>
   13f98:	ldr	r1, [r4, #12]
   13f9c:	ldr	r2, [r4, #8]
   13fa0:	ldr	r3, [r4, #4]
   13fa4:	str	r1, [sp, #8]
   13fa8:	str	r2, [sp, #4]
   13fac:	str	r3, [sp]
   13fb0:	mov	r1, #1
   13fb4:	ldr	r3, [r4]
   13fb8:	mov	r2, r0
   13fbc:	mov	r0, r5
   13fc0:	bl	10ecc <__fprintf_chk@plt>
   13fc4:	b	13ee4 <__assert_fail@plt+0x2f88>
   13fc8:	mov	r2, #5
   13fcc:	ldr	r1, [pc, #384]	; 14154 <__assert_fail@plt+0x31f8>
   13fd0:	mov	r0, #0
   13fd4:	bl	10da0 <dcgettext@plt>
   13fd8:	ldr	r3, [r4, #16]
   13fdc:	ldr	r1, [r4, #12]
   13fe0:	ldr	r2, [r4, #8]
   13fe4:	str	r3, [sp, #12]
   13fe8:	ldr	r3, [r4, #4]
   13fec:	str	r1, [sp, #8]
   13ff0:	str	r2, [sp, #4]
   13ff4:	str	r3, [sp]
   13ff8:	mov	r1, #1
   13ffc:	ldr	r3, [r4]
   14000:	mov	r2, r0
   14004:	mov	r0, r5
   14008:	bl	10ecc <__fprintf_chk@plt>
   1400c:	b	13ee4 <__assert_fail@plt+0x2f88>
   14010:	mov	r2, #5
   14014:	ldr	r1, [pc, #316]	; 14158 <__assert_fail@plt+0x31fc>
   14018:	mov	r0, #0
   1401c:	bl	10da0 <dcgettext@plt>
   14020:	ldr	r2, [r4, #20]
   14024:	ldr	r3, [r4, #16]
   14028:	ldr	r1, [r4, #12]
   1402c:	str	r2, [sp, #16]
   14030:	ldr	r2, [r4, #8]
   14034:	str	r3, [sp, #12]
   14038:	ldr	r3, [r4, #4]
   1403c:	str	r1, [sp, #8]
   14040:	str	r2, [sp, #4]
   14044:	str	r3, [sp]
   14048:	mov	r1, #1
   1404c:	ldr	r3, [r4]
   14050:	mov	r2, r0
   14054:	mov	r0, r5
   14058:	bl	10ecc <__fprintf_chk@plt>
   1405c:	b	13ee4 <__assert_fail@plt+0x2f88>
   14060:	mov	r2, #5
   14064:	ldr	r1, [pc, #240]	; 1415c <__assert_fail@plt+0x3200>
   14068:	mov	r0, #0
   1406c:	bl	10da0 <dcgettext@plt>
   14070:	ldr	r1, [r4, #24]
   14074:	ldr	r2, [r4, #20]
   14078:	ldr	r3, [r4, #16]
   1407c:	str	r1, [sp, #20]
   14080:	ldr	r1, [r4, #12]
   14084:	str	r2, [sp, #16]
   14088:	ldr	r2, [r4, #8]
   1408c:	str	r3, [sp, #12]
   14090:	ldr	r3, [r4, #4]
   14094:	str	r1, [sp, #8]
   14098:	str	r2, [sp, #4]
   1409c:	str	r3, [sp]
   140a0:	mov	r1, #1
   140a4:	ldr	r3, [r4]
   140a8:	mov	r2, r0
   140ac:	mov	r0, r5
   140b0:	bl	10ecc <__fprintf_chk@plt>
   140b4:	b	13ee4 <__assert_fail@plt+0x2f88>
   140b8:	mov	r2, #5
   140bc:	ldr	r1, [pc, #156]	; 14160 <__assert_fail@plt+0x3204>
   140c0:	mov	r0, #0
   140c4:	bl	10da0 <dcgettext@plt>
   140c8:	ldr	r3, [r4, #28]
   140cc:	ldr	r1, [r4, #24]
   140d0:	ldr	r2, [r4, #20]
   140d4:	str	r3, [sp, #24]
   140d8:	ldr	r3, [r4, #16]
   140dc:	str	r1, [sp, #20]
   140e0:	ldr	r1, [r4, #12]
   140e4:	str	r2, [sp, #16]
   140e8:	ldr	r2, [r4, #8]
   140ec:	str	r3, [sp, #12]
   140f0:	ldr	r3, [r4, #4]
   140f4:	str	r1, [sp, #8]
   140f8:	str	r2, [sp, #4]
   140fc:	str	r3, [sp]
   14100:	mov	r1, #1
   14104:	ldr	r3, [r4]
   14108:	mov	r2, r0
   1410c:	mov	r0, r5
   14110:	bl	10ecc <__fprintf_chk@plt>
   14114:	b	13ee4 <__assert_fail@plt+0x2f88>
   14118:	mov	r2, #5
   1411c:	ldr	r1, [pc, #64]	; 14164 <__assert_fail@plt+0x3208>
   14120:	b	13e88 <__assert_fail@plt+0x2f2c>
   14124:	bl	10f50 <abort@plt>
   14128:	andeq	r5, r1, r4, lsl #25
   1412c:	muleq	r1, r8, ip
   14130:	andeq	r0, r0, r2, ror #15
   14134:	andeq	r5, r1, ip, ror #30
   14138:	muleq	r1, ip, ip
   1413c:	muleq	r1, r0, ip
   14140:	andeq	r5, r1, r4, ror lr
   14144:	andeq	r5, r1, r8, ror #26
   14148:	andeq	r5, r1, r8, ror sp
   1414c:	muleq	r1, r0, sp
   14150:	andeq	r5, r1, ip, lsr #27
   14154:	andeq	r5, r1, ip, asr #27
   14158:	strdeq	r5, [r1], -r0
   1415c:	andeq	r5, r1, r8, lsl lr
   14160:	andeq	r5, r1, r4, asr #28
   14164:	andeq	r5, r1, r8, lsr #29
   14168:	push	{r4, r5, lr}
   1416c:	sub	sp, sp, #12
   14170:	ldr	r5, [sp, #24]
   14174:	ldr	ip, [r5]
   14178:	cmp	ip, #0
   1417c:	beq	14198 <__assert_fail@plt+0x323c>
   14180:	mov	lr, r5
   14184:	mov	ip, #0
   14188:	ldr	r4, [lr, #4]!
   1418c:	add	ip, ip, #1
   14190:	cmp	r4, #0
   14194:	bne	14188 <__assert_fail@plt+0x322c>
   14198:	stm	sp, {r5, ip}
   1419c:	bl	13dc0 <__assert_fail@plt+0x2e64>
   141a0:	add	sp, sp, #12
   141a4:	pop	{r4, r5, pc}
   141a8:	push	{r4, r5, r6, lr}
   141ac:	sub	sp, sp, #56	; 0x38
   141b0:	ldr	r6, [pc, #88]	; 14210 <__assert_fail@plt+0x32b4>
   141b4:	ldr	r5, [sp, #72]	; 0x48
   141b8:	add	r4, sp, #8
   141bc:	ldr	ip, [r6]
   141c0:	str	ip, [sp, #52]	; 0x34
   141c4:	mov	ip, #0
   141c8:	ldr	lr, [r5], #4
   141cc:	cmp	lr, #0
   141d0:	str	lr, [r4, #4]!
   141d4:	beq	141e4 <__assert_fail@plt+0x3288>
   141d8:	add	ip, ip, #1
   141dc:	cmp	ip, #10
   141e0:	bne	141c8 <__assert_fail@plt+0x326c>
   141e4:	add	lr, sp, #12
   141e8:	str	ip, [sp, #4]
   141ec:	str	lr, [sp]
   141f0:	bl	13dc0 <__assert_fail@plt+0x2e64>
   141f4:	ldr	r2, [sp, #52]	; 0x34
   141f8:	ldr	r3, [r6]
   141fc:	cmp	r2, r3
   14200:	bne	1420c <__assert_fail@plt+0x32b0>
   14204:	add	sp, sp, #56	; 0x38
   14208:	pop	{r4, r5, r6, pc}
   1420c:	bl	10dac <__stack_chk_fail@plt>
   14210:	andeq	r6, r2, r8, lsl #30
   14214:	push	{r3}		; (str r3, [sp, #-4]!)
   14218:	mov	ip, #0
   1421c:	push	{r4, r5, r6, lr}
   14220:	sub	sp, sp, #60	; 0x3c
   14224:	ldr	r6, [pc, #100]	; 14290 <__assert_fail@plt+0x3334>
   14228:	add	r5, sp, #8
   1422c:	add	r4, sp, #80	; 0x50
   14230:	ldr	r3, [r6]
   14234:	str	r4, [sp, #8]
   14238:	str	r3, [sp, #52]	; 0x34
   1423c:	ldr	r3, [sp, #76]	; 0x4c
   14240:	ldr	lr, [r4], #4
   14244:	cmp	lr, #0
   14248:	str	lr, [r5, #4]!
   1424c:	beq	1425c <__assert_fail@plt+0x3300>
   14250:	add	ip, ip, #1
   14254:	cmp	ip, #10
   14258:	bne	14240 <__assert_fail@plt+0x32e4>
   1425c:	add	lr, sp, #12
   14260:	str	ip, [sp, #4]
   14264:	str	lr, [sp]
   14268:	bl	13dc0 <__assert_fail@plt+0x2e64>
   1426c:	ldr	r2, [sp, #52]	; 0x34
   14270:	ldr	r3, [r6]
   14274:	cmp	r2, r3
   14278:	bne	1428c <__assert_fail@plt+0x3330>
   1427c:	add	sp, sp, #60	; 0x3c
   14280:	pop	{r4, r5, r6, lr}
   14284:	add	sp, sp, #4
   14288:	bx	lr
   1428c:	bl	10dac <__stack_chk_fail@plt>
   14290:	andeq	r6, r2, r8, lsl #30
   14294:	push	{r4, lr}
   14298:	mov	r2, #5
   1429c:	ldr	r1, [pc, #88]	; 142fc <__assert_fail@plt+0x33a0>
   142a0:	mov	r0, #0
   142a4:	bl	10da0 <dcgettext@plt>
   142a8:	ldr	r2, [pc, #80]	; 14300 <__assert_fail@plt+0x33a4>
   142ac:	mov	r1, r0
   142b0:	mov	r0, #1
   142b4:	bl	10eb4 <__printf_chk@plt>
   142b8:	mov	r2, #5
   142bc:	ldr	r1, [pc, #64]	; 14304 <__assert_fail@plt+0x33a8>
   142c0:	mov	r0, #0
   142c4:	bl	10da0 <dcgettext@plt>
   142c8:	ldr	r3, [pc, #56]	; 14308 <__assert_fail@plt+0x33ac>
   142cc:	ldr	r2, [pc, #56]	; 1430c <__assert_fail@plt+0x33b0>
   142d0:	mov	r1, r0
   142d4:	mov	r0, #1
   142d8:	bl	10eb4 <__printf_chk@plt>
   142dc:	ldr	r1, [pc, #44]	; 14310 <__assert_fail@plt+0x33b4>
   142e0:	mov	r2, #5
   142e4:	mov	r0, #0
   142e8:	bl	10da0 <dcgettext@plt>
   142ec:	ldr	r3, [pc, #32]	; 14314 <__assert_fail@plt+0x33b8>
   142f0:	pop	{r4, lr}
   142f4:	ldr	r1, [r3]
   142f8:	b	10d04 <fputs_unlocked@plt>
   142fc:	andeq	r5, r1, r4, ror #29
   14300:	strdeq	r5, [r1], -ip
   14304:	andeq	r5, r1, r4, lsl pc
   14308:	andeq	r5, r1, r4, lsr #19
   1430c:	andeq	r5, r1, ip, asr #19
   14310:	andeq	r5, r1, r8, lsr #30
   14314:	andeq	r7, r2, ip, asr #2
   14318:	push	{r4, lr}
   1431c:	mov	r4, r0
   14320:	bl	10e24 <malloc@plt>
   14324:	adds	r4, r4, #0
   14328:	movne	r4, #1
   1432c:	cmp	r0, #0
   14330:	movne	r4, #0
   14334:	cmp	r4, #0
   14338:	popeq	{r4, pc}
   1433c:	bl	14560 <__assert_fail@plt+0x3604>
   14340:	push	{r4, r5, r6, lr}
   14344:	umull	r4, r5, r0, r1
   14348:	adds	r3, r5, #0
   1434c:	movne	r3, #1
   14350:	cmp	r4, #0
   14354:	blt	1436c <__assert_fail@plt+0x3410>
   14358:	cmp	r3, #0
   1435c:	bne	1436c <__assert_fail@plt+0x3410>
   14360:	mul	r0, r1, r0
   14364:	pop	{r4, r5, r6, lr}
   14368:	b	14318 <__assert_fail@plt+0x33bc>
   1436c:	bl	14560 <__assert_fail@plt+0x3604>
   14370:	b	14318 <__assert_fail@plt+0x33bc>
   14374:	adds	r3, r0, #0
   14378:	movne	r3, #1
   1437c:	cmp	r1, #0
   14380:	movne	r3, #0
   14384:	cmp	r3, #0
   14388:	push	{r4, lr}
   1438c:	bne	143b4 <__assert_fail@plt+0x3458>
   14390:	mov	r4, r1
   14394:	bl	10db8 <realloc@plt>
   14398:	adds	r4, r4, #0
   1439c:	movne	r4, #1
   143a0:	cmp	r0, #0
   143a4:	movne	r4, #0
   143a8:	cmp	r4, #0
   143ac:	popeq	{r4, pc}
   143b0:	bl	14560 <__assert_fail@plt+0x3604>
   143b4:	bl	10d4c <free@plt>
   143b8:	mov	r0, #0
   143bc:	pop	{r4, pc}
   143c0:	push	{r4, r5, r6, lr}
   143c4:	umull	r4, r5, r1, r2
   143c8:	adds	r3, r5, #0
   143cc:	movne	r3, #1
   143d0:	cmp	r4, #0
   143d4:	blt	143ec <__assert_fail@plt+0x3490>
   143d8:	cmp	r3, #0
   143dc:	bne	143ec <__assert_fail@plt+0x3490>
   143e0:	mul	r1, r2, r1
   143e4:	pop	{r4, r5, r6, lr}
   143e8:	b	14374 <__assert_fail@plt+0x3418>
   143ec:	bl	14560 <__assert_fail@plt+0x3604>
   143f0:	push	{r4, r5, r6, r7, r8, lr}
   143f4:	subs	r7, r0, #0
   143f8:	mov	r6, r1
   143fc:	mov	r5, r2
   14400:	ldr	r4, [r1]
   14404:	beq	14438 <__assert_fail@plt+0x34dc>
   14408:	mov	r1, r2
   1440c:	ldr	r0, [pc, #104]	; 1447c <__assert_fail@plt+0x3520>
   14410:	bl	15414 <__assert_fail@plt+0x44b8>
   14414:	cmp	r0, r4
   14418:	bls	1445c <__assert_fail@plt+0x3500>
   1441c:	add	r3, r4, #1
   14420:	add	r4, r3, r4, lsr #1
   14424:	str	r4, [r6]
   14428:	mul	r1, r5, r4
   1442c:	mov	r0, r7
   14430:	pop	{r4, r5, r6, r7, r8, lr}
   14434:	b	14374 <__assert_fail@plt+0x3418>
   14438:	cmp	r4, #0
   1443c:	beq	14460 <__assert_fail@plt+0x3504>
   14440:	umull	r0, r1, r4, r5
   14444:	adds	r3, r1, #0
   14448:	movne	r3, #1
   1444c:	cmp	r0, #0
   14450:	blt	1445c <__assert_fail@plt+0x3500>
   14454:	cmp	r3, #0
   14458:	beq	14424 <__assert_fail@plt+0x34c8>
   1445c:	bl	14560 <__assert_fail@plt+0x3604>
   14460:	mov	r1, r2
   14464:	mov	r0, #64	; 0x40
   14468:	bl	15414 <__assert_fail@plt+0x44b8>
   1446c:	cmp	r5, #64	; 0x40
   14470:	movls	r4, r0
   14474:	addhi	r4, r0, #1
   14478:	b	14440 <__assert_fail@plt+0x34e4>
   1447c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14480:	cmp	r0, #0
   14484:	ldr	r3, [r1]
   14488:	beq	144ac <__assert_fail@plt+0x3550>
   1448c:	ldr	r2, [pc, #60]	; 144d0 <__assert_fail@plt+0x3574>
   14490:	cmp	r3, r2
   14494:	bhi	144c8 <__assert_fail@plt+0x356c>
   14498:	add	r2, r3, #1
   1449c:	add	r3, r2, r3, lsr #1
   144a0:	str	r3, [r1]
   144a4:	mov	r1, r3
   144a8:	b	14374 <__assert_fail@plt+0x3418>
   144ac:	cmp	r3, #0
   144b0:	bne	144c4 <__assert_fail@plt+0x3568>
   144b4:	mov	r3, #64	; 0x40
   144b8:	str	r3, [r1]
   144bc:	mov	r1, r3
   144c0:	b	14374 <__assert_fail@plt+0x3418>
   144c4:	bge	144a0 <__assert_fail@plt+0x3544>
   144c8:	push	{r4, lr}
   144cc:	bl	14560 <__assert_fail@plt+0x3604>
   144d0:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   144d4:	push	{r4, lr}
   144d8:	mov	r4, r0
   144dc:	bl	14318 <__assert_fail@plt+0x33bc>
   144e0:	mov	r2, r4
   144e4:	mov	r1, #0
   144e8:	pop	{r4, lr}
   144ec:	b	10ea8 <memset@plt>
   144f0:	push	{r4, r5, r6, lr}
   144f4:	umull	r4, r5, r0, r1
   144f8:	adds	r3, r5, #0
   144fc:	movne	r3, #1
   14500:	cmp	r4, #0
   14504:	blt	1451c <__assert_fail@plt+0x35c0>
   14508:	cmp	r3, #0
   1450c:	bne	1451c <__assert_fail@plt+0x35c0>
   14510:	bl	10cf8 <calloc@plt>
   14514:	cmp	r0, #0
   14518:	popne	{r4, r5, r6, pc}
   1451c:	bl	14560 <__assert_fail@plt+0x3604>
   14520:	push	{r4, r5, r6, lr}
   14524:	mov	r4, r1
   14528:	mov	r5, r0
   1452c:	mov	r0, r1
   14530:	bl	14318 <__assert_fail@plt+0x33bc>
   14534:	mov	r2, r4
   14538:	mov	r1, r5
   1453c:	pop	{r4, r5, r6, lr}
   14540:	b	10d64 <memcpy@plt>
   14544:	push	{r4, lr}
   14548:	mov	r4, r0
   1454c:	bl	10e78 <strlen@plt>
   14550:	add	r1, r0, #1
   14554:	mov	r0, r4
   14558:	pop	{r4, lr}
   1455c:	b	14520 <__assert_fail@plt+0x35c4>
   14560:	ldr	r3, [pc, #44]	; 14594 <__assert_fail@plt+0x3638>
   14564:	push	{r4, lr}
   14568:	mov	r2, #5
   1456c:	ldr	r1, [pc, #36]	; 14598 <__assert_fail@plt+0x363c>
   14570:	mov	r0, #0
   14574:	ldr	r4, [r3]
   14578:	bl	10da0 <dcgettext@plt>
   1457c:	ldr	r2, [pc, #24]	; 1459c <__assert_fail@plt+0x3640>
   14580:	mov	r1, #0
   14584:	mov	r3, r0
   14588:	mov	r0, r4
   1458c:	bl	10e18 <error@plt>
   14590:	bl	10f50 <abort@plt>
   14594:	andeq	r7, r2, ip, ror #1
   14598:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1459c:	andeq	r5, r1, r8, ror #22
   145a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a4:	sub	sp, sp, #36	; 0x24
   145a8:	ldr	r6, [pc, #312]	; 146e8 <__assert_fail@plt+0x378c>
   145ac:	ldr	lr, [sp, #80]	; 0x50
   145b0:	mov	r8, r2
   145b4:	ldr	ip, [r6]
   145b8:	mov	r2, r1
   145bc:	mov	r9, r3
   145c0:	str	lr, [sp]
   145c4:	add	r3, sp, #16
   145c8:	mov	r1, #0
   145cc:	str	ip, [sp, #28]
   145d0:	mov	r7, r0
   145d4:	ldr	sl, [sp, #84]	; 0x54
   145d8:	ldr	r5, [sp, #88]	; 0x58
   145dc:	bl	146f8 <__assert_fail@plt+0x379c>
   145e0:	subs	fp, r0, #0
   145e4:	bne	146a4 <__assert_fail@plt+0x3748>
   145e8:	ldrd	r2, [sp, #16]
   145ec:	cmp	r3, r9
   145f0:	cmpeq	r2, r8
   145f4:	ldrd	r8, [sp, #72]	; 0x48
   145f8:	movcc	r1, #1
   145fc:	movcs	r1, #0
   14600:	cmp	r3, r9
   14604:	cmpeq	r2, r8
   14608:	orrhi	r1, r1, #1
   1460c:	cmp	r1, #0
   14610:	beq	14668 <__assert_fail@plt+0x370c>
   14614:	strd	r2, [sp, #8]
   14618:	bl	10e90 <__errno_location@plt>
   1461c:	ldrd	r2, [sp, #8]
   14620:	mov	r9, #0
   14624:	mvn	r8, #-1073741824	; 0xc0000000
   14628:	cmp	r3, r9
   1462c:	cmpeq	r2, r8
   14630:	bls	146d0 <__assert_fail@plt+0x3774>
   14634:	mov	r4, #75	; 0x4b
   14638:	cmp	r5, #0
   1463c:	str	r4, [r0]
   14640:	beq	1469c <__assert_fail@plt+0x3740>
   14644:	mov	r0, r7
   14648:	bl	13da8 <__assert_fail@plt+0x2e4c>
   1464c:	mov	r3, sl
   14650:	ldr	r2, [pc, #148]	; 146ec <__assert_fail@plt+0x3790>
   14654:	mov	r1, r4
   14658:	str	r0, [sp]
   1465c:	mov	r0, r5
   14660:	bl	10e18 <error@plt>
   14664:	ldrd	r2, [sp, #16]
   14668:	ldr	lr, [sp, #28]
   1466c:	ldr	ip, [r6]
   14670:	mov	r0, r2
   14674:	cmp	lr, ip
   14678:	mov	r1, r3
   1467c:	bne	146e4 <__assert_fail@plt+0x3788>
   14680:	add	sp, sp, #36	; 0x24
   14684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14688:	mov	r4, #0
   1468c:	cmp	r5, #0
   14690:	str	r4, [r0]
   14694:	bne	14644 <__assert_fail@plt+0x36e8>
   14698:	mov	r4, r5
   1469c:	mov	r5, #1
   146a0:	b	14644 <__assert_fail@plt+0x36e8>
   146a4:	bl	10e90 <__errno_location@plt>
   146a8:	cmp	fp, #1
   146ac:	beq	14634 <__assert_fail@plt+0x36d8>
   146b0:	cmp	fp, #3
   146b4:	beq	14688 <__assert_fail@plt+0x372c>
   146b8:	ldr	r4, [r0]
   146bc:	cmp	r5, #0
   146c0:	moveq	r5, #1
   146c4:	cmp	r4, #22
   146c8:	moveq	r4, #0
   146cc:	b	14644 <__assert_fail@plt+0x36e8>
   146d0:	mov	r4, #34	; 0x22
   146d4:	cmp	r5, #0
   146d8:	str	r4, [r0]
   146dc:	bne	14644 <__assert_fail@plt+0x36e8>
   146e0:	b	1469c <__assert_fail@plt+0x3740>
   146e4:	bl	10dac <__stack_chk_fail@plt>
   146e8:	andeq	r6, r2, r8, lsl #30
   146ec:	andeq	r5, r1, r4, ror #22
   146f0:	mov	r1, #10
   146f4:	b	145a0 <__assert_fail@plt+0x3644>
   146f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146fc:	sub	sp, sp, #36	; 0x24
   14700:	ldr	r5, [pc, #2536]	; 150f0 <__assert_fail@plt+0x4194>
   14704:	mov	r9, r2
   14708:	cmp	r2, #36	; 0x24
   1470c:	str	r3, [sp, #12]
   14710:	ldr	r2, [r5]
   14714:	ldr	r3, [sp, #72]	; 0x48
   14718:	str	r2, [sp, #28]
   1471c:	str	r3, [sp]
   14720:	bhi	150dc <__assert_fail@plt+0x4180>
   14724:	cmp	r1, #0
   14728:	mov	r4, r1
   1472c:	mov	r6, r0
   14730:	addeq	r4, sp, #24
   14734:	bl	10e90 <__errno_location@plt>
   14738:	mov	r3, #0
   1473c:	str	r3, [r0]
   14740:	mov	r7, r0
   14744:	bl	10e60 <__ctype_b_loc@plt>
   14748:	ldrb	r3, [r6]
   1474c:	mov	r1, r6
   14750:	ldr	r0, [r0]
   14754:	b	1475c <__assert_fail@plt+0x3800>
   14758:	ldrb	r3, [r1, #1]!
   1475c:	lsl	r2, r3, #1
   14760:	ldrh	r8, [r0, r2]
   14764:	ands	r8, r8, #8192	; 0x2000
   14768:	bne	14758 <__assert_fail@plt+0x37fc>
   1476c:	cmp	r3, #45	; 0x2d
   14770:	beq	1480c <__assert_fail@plt+0x38b0>
   14774:	mov	r2, r9
   14778:	mov	r3, r8
   1477c:	mov	r1, r4
   14780:	mov	r0, r6
   14784:	bl	10d70 <__strtoull_internal@plt>
   14788:	ldr	r9, [r4]
   1478c:	cmp	r9, r6
   14790:	mov	sl, r0
   14794:	mov	fp, r1
   14798:	beq	147f4 <__assert_fail@plt+0x3898>
   1479c:	ldr	r8, [r7]
   147a0:	cmp	r8, #0
   147a4:	bne	147e4 <__assert_fail@plt+0x3888>
   147a8:	ldr	r3, [sp]
   147ac:	cmp	r3, #0
   147b0:	beq	147c0 <__assert_fail@plt+0x3864>
   147b4:	ldrb	r6, [r9]
   147b8:	cmp	r6, #0
   147bc:	bne	14b94 <__assert_fail@plt+0x3c38>
   147c0:	ldr	r3, [sp, #12]
   147c4:	strd	sl, [r3]
   147c8:	ldr	r2, [sp, #28]
   147cc:	ldr	r3, [r5]
   147d0:	mov	r0, r8
   147d4:	cmp	r2, r3
   147d8:	bne	150d8 <__assert_fail@plt+0x417c>
   147dc:	add	sp, sp, #36	; 0x24
   147e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e4:	cmp	r8, #34	; 0x22
   147e8:	bne	1480c <__assert_fail@plt+0x38b0>
   147ec:	mov	r8, #1
   147f0:	b	147a8 <__assert_fail@plt+0x384c>
   147f4:	ldr	r0, [sp]
   147f8:	cmp	r0, #0
   147fc:	beq	1480c <__assert_fail@plt+0x38b0>
   14800:	ldrb	r6, [r6]
   14804:	cmp	r6, #0
   14808:	bne	14814 <__assert_fail@plt+0x38b8>
   1480c:	mov	r8, #4
   14810:	b	147c8 <__assert_fail@plt+0x386c>
   14814:	mov	r1, r6
   14818:	bl	10e84 <strchr@plt>
   1481c:	cmp	r0, #0
   14820:	movne	sl, #1
   14824:	movne	fp, #0
   14828:	beq	1480c <__assert_fail@plt+0x38b0>
   1482c:	sub	r7, r6, #69	; 0x45
   14830:	cmp	r7, #47	; 0x2f
   14834:	ldrls	pc, [pc, r7, lsl #2]
   14838:	b	149f8 <__assert_fail@plt+0x3a9c>
   1483c:	strdeq	r4, [r1], -ip
   14840:	strdeq	r4, [r1], -r8
   14844:	strdeq	r4, [r1], -ip
   14848:	strdeq	r4, [r1], -r8
   1484c:	strdeq	r4, [r1], -r8
   14850:	strdeq	r4, [r1], -r8
   14854:	strdeq	r4, [r1], -ip
   14858:	strdeq	r4, [r1], -r8
   1485c:	strdeq	r4, [r1], -ip
   14860:	strdeq	r4, [r1], -r8
   14864:	strdeq	r4, [r1], -r8
   14868:	strdeq	r4, [r1], -ip
   1486c:	strdeq	r4, [r1], -r8
   14870:	strdeq	r4, [r1], -r8
   14874:	strdeq	r4, [r1], -r8
   14878:	strdeq	r4, [r1], -ip
   1487c:	strdeq	r4, [r1], -r8
   14880:	strdeq	r4, [r1], -r8
   14884:	strdeq	r4, [r1], -r8
   14888:	strdeq	r4, [r1], -r8
   1488c:	strdeq	r4, [r1], -ip
   14890:	strdeq	r4, [r1], -ip
   14894:	strdeq	r4, [r1], -r8
   14898:	strdeq	r4, [r1], -r8
   1489c:	strdeq	r4, [r1], -r8
   148a0:	strdeq	r4, [r1], -r8
   148a4:	strdeq	r4, [r1], -r8
   148a8:	strdeq	r4, [r1], -r8
   148ac:	strdeq	r4, [r1], -r8
   148b0:	strdeq	r4, [r1], -r8
   148b4:	strdeq	r4, [r1], -r8
   148b8:	strdeq	r4, [r1], -r8
   148bc:	strdeq	r4, [r1], -r8
   148c0:	strdeq	r4, [r1], -r8
   148c4:	strdeq	r4, [r1], -ip
   148c8:	strdeq	r4, [r1], -r8
   148cc:	strdeq	r4, [r1], -r8
   148d0:	strdeq	r4, [r1], -r8
   148d4:	strdeq	r4, [r1], -ip
   148d8:	strdeq	r4, [r1], -r8
   148dc:	strdeq	r4, [r1], -ip
   148e0:	strdeq	r4, [r1], -r8
   148e4:	strdeq	r4, [r1], -r8
   148e8:	strdeq	r4, [r1], -r8
   148ec:	strdeq	r4, [r1], -r8
   148f0:	strdeq	r4, [r1], -r8
   148f4:	strdeq	r4, [r1], -r8
   148f8:	strdeq	r4, [r1], -ip
   148fc:	ldr	r0, [sp]
   14900:	mov	r1, #48	; 0x30
   14904:	bl	10e84 <strchr@plt>
   14908:	cmp	r0, #0
   1490c:	beq	149f8 <__assert_fail@plt+0x3a9c>
   14910:	ldrb	r3, [r9, #1]
   14914:	cmp	r3, #68	; 0x44
   14918:	beq	14fd8 <__assert_fail@plt+0x407c>
   1491c:	cmp	r3, #105	; 0x69
   14920:	beq	14bb8 <__assert_fail@plt+0x3c5c>
   14924:	cmp	r3, #66	; 0x42
   14928:	beq	14fd8 <__assert_fail@plt+0x407c>
   1492c:	cmp	r7, #47	; 0x2f
   14930:	ldrls	pc, [pc, r7, lsl #2]
   14934:	b	14ba8 <__assert_fail@plt+0x3c4c>
   14938:			; <UNDEFINED> instruction: 0x00014fbc
   1493c:	andeq	r4, r1, r8, lsr #23
   14940:	andeq	r4, r1, ip, lsr #31
   14944:	andeq	r4, r1, r8, lsr #23
   14948:	andeq	r4, r1, r8, lsr #23
   1494c:	andeq	r4, r1, r8, lsr #23
   14950:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14954:	andeq	r4, r1, r8, lsr #23
   14958:	andeq	r4, r1, ip, lsl #31
   1495c:	andeq	r4, r1, r8, lsr #23
   14960:	andeq	r4, r1, r8, lsr #23
   14964:	andeq	r4, r1, ip, ror pc
   14968:	andeq	r4, r1, r8, lsr #23
   1496c:	andeq	r4, r1, r8, lsr #23
   14970:	andeq	r4, r1, r8, lsr #23
   14974:	andeq	r4, r1, ip, ror #30
   14978:	andeq	r4, r1, r8, lsr #23
   1497c:	andeq	r4, r1, r8, lsr #23
   14980:	andeq	r4, r1, r8, lsr #23
   14984:	andeq	r4, r1, r8, lsr #23
   14988:	andeq	r4, r1, ip, asr pc
   1498c:	andeq	r4, r1, ip, asr #30
   14990:	andeq	r4, r1, r8, lsr #23
   14994:	andeq	r4, r1, r8, lsr #23
   14998:	andeq	r4, r1, r8, lsr #23
   1499c:	andeq	r4, r1, r8, lsr #23
   149a0:	andeq	r4, r1, r8, lsr #23
   149a4:	andeq	r4, r1, r8, lsr #23
   149a8:	andeq	r4, r1, r8, lsr #23
   149ac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149b0:	andeq	r4, r1, r4, asr #30
   149b4:	andeq	r4, r1, r8, lsr #23
   149b8:	andeq	r4, r1, r8, lsr #23
   149bc:	andeq	r4, r1, r8, lsr #23
   149c0:	andeq	r4, r1, ip, lsr #31
   149c4:	andeq	r4, r1, r8, lsr #23
   149c8:	andeq	r4, r1, r8, lsr #23
   149cc:	andeq	r4, r1, r8, lsr #23
   149d0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   149d4:	andeq	r4, r1, r8, lsr #23
   149d8:	andeq	r4, r1, ip, lsl #31
   149dc:	andeq	r4, r1, r8, lsr #23
   149e0:	andeq	r4, r1, r8, lsr #23
   149e4:	andeq	r4, r1, r8, lsr #23
   149e8:	andeq	r4, r1, r8, lsr #23
   149ec:	andeq	r4, r1, r8, lsr #23
   149f0:	andeq	r4, r1, r8, lsr #23
   149f4:	andeq	r4, r1, ip, ror #30
   149f8:	mov	lr, #1
   149fc:	mov	r0, #1024	; 0x400
   14a00:	sub	r6, r6, #66	; 0x42
   14a04:	cmp	r6, #53	; 0x35
   14a08:	ldrls	pc, [pc, r6, lsl #2]
   14a0c:	b	14ba8 <__assert_fail@plt+0x3c4c>
   14a10:	andeq	r4, r1, ip, lsl ip
   14a14:	andeq	r4, r1, r8, lsr #23
   14a18:	andeq	r4, r1, r8, lsr #23
   14a1c:	andeq	r4, r1, r0, asr #24
   14a20:	andeq	r4, r1, r8, lsr #23
   14a24:	andeq	r4, r1, r8, ror #21
   14a28:	andeq	r4, r1, r8, lsr #23
   14a2c:	andeq	r4, r1, r8, lsr #23
   14a30:	andeq	r4, r1, r8, lsr #23
   14a34:	andeq	r4, r1, r8, lsr sp
   14a38:	andeq	r4, r1, r8, lsr #23
   14a3c:	ldrdeq	r4, [r1], -ip
   14a40:	andeq	r4, r1, r8, lsr #23
   14a44:	andeq	r4, r1, r8, lsr #23
   14a48:	andeq	r4, r1, r0, ror #28
   14a4c:	andeq	r4, r1, r8, lsr #23
   14a50:	andeq	r4, r1, r8, lsr #23
   14a54:	andeq	r4, r1, r8, lsr #23
   14a58:	andeq	r4, r1, r4, ror #27
   14a5c:	andeq	r4, r1, r8, lsr #23
   14a60:	andeq	r4, r1, r8, lsr #23
   14a64:	andeq	r4, r1, r8, lsr #23
   14a68:	andeq	r4, r1, r8, lsr #23
   14a6c:	andeq	r4, r1, r8, ror #26
   14a70:			; <UNDEFINED> instruction: 0x00014cbc
   14a74:	andeq	r4, r1, r8, lsr #23
   14a78:	andeq	r4, r1, r8, lsr #23
   14a7c:	andeq	r4, r1, r8, lsr #23
   14a80:	andeq	r4, r1, r8, lsr #23
   14a84:	andeq	r4, r1, r8, lsr #23
   14a88:	andeq	r4, r1, r8, lsr #23
   14a8c:	andeq	r4, r1, r8, lsr #23
   14a90:	strdeq	r4, [r1], -r8
   14a94:	andeq	r4, r1, ip, ror fp
   14a98:	andeq	r4, r1, r8, lsr #23
   14a9c:	andeq	r4, r1, r8, lsr #23
   14aa0:	andeq	r4, r1, r8, lsr #23
   14aa4:	andeq	r4, r1, r8, ror #21
   14aa8:	andeq	r4, r1, r8, lsr #23
   14aac:	andeq	r4, r1, r8, lsr #23
   14ab0:	andeq	r4, r1, r8, lsr #23
   14ab4:	andeq	r4, r1, r8, lsr sp
   14ab8:	andeq	r4, r1, r8, lsr #23
   14abc:	ldrdeq	r4, [r1], -ip
   14ac0:	andeq	r4, r1, r8, lsr #23
   14ac4:	andeq	r4, r1, r8, lsr #23
   14ac8:	andeq	r4, r1, r8, lsr #23
   14acc:	andeq	r4, r1, r8, lsr #23
   14ad0:	andeq	r4, r1, r8, lsr #23
   14ad4:	andeq	r4, r1, r8, lsr #23
   14ad8:	andeq	r4, r1, r4, ror #27
   14adc:	andeq	r4, r1, r8, lsr #23
   14ae0:	andeq	r4, r1, r8, lsr #23
   14ae4:	ldrdeq	r4, [r1], -r0
   14ae8:	asr	r1, r0, #31
   14aec:	mov	r2, #0
   14af0:	mov	r3, #0
   14af4:	cmp	fp, #0
   14af8:	strd	r2, [sp]
   14afc:	bne	1501c <__assert_fail@plt+0x40c0>
   14b00:	ldrd	r2, [sp]
   14b04:	orrs	r3, r2, r3
   14b08:	bne	1500c <__assert_fail@plt+0x40b0>
   14b0c:	mul	r3, sl, r1
   14b10:	umull	r6, r7, sl, r0
   14b14:	mla	r3, r0, fp, r3
   14b18:	ldrd	sl, [sp]
   14b1c:	add	ip, r3, r7
   14b20:	cmp	ip, #0
   14b24:	mov	r7, ip
   14b28:	bne	150b0 <__assert_fail@plt+0x4154>
   14b2c:	orrs	r3, sl, fp
   14b30:	bne	1500c <__assert_fail@plt+0x40b0>
   14b34:	umull	r2, r3, r6, r0
   14b38:	mul	ip, r6, r1
   14b3c:	strd	r2, [sp]
   14b40:	mla	r3, r0, r7, ip
   14b44:	ldr	r2, [sp, #4]
   14b48:	add	ip, r3, r2
   14b4c:	cmp	ip, #0
   14b50:	str	ip, [sp, #4]
   14b54:	bne	1508c <__assert_fail@plt+0x4130>
   14b58:	orrs	r3, sl, fp
   14b5c:	bne	1500c <__assert_fail@plt+0x40b0>
   14b60:	ldrd	r6, [sp]
   14b64:	mov	r3, #0
   14b68:	mul	r2, r6, r1
   14b6c:	umull	sl, fp, r6, r0
   14b70:	mla	r2, r0, r7, r2
   14b74:	add	fp, r2, fp
   14b78:	orr	r8, r8, r3
   14b7c:	add	r3, r9, lr
   14b80:	str	r3, [r4]
   14b84:	ldrb	r3, [r9, lr]
   14b88:	cmp	r3, #0
   14b8c:	orrne	r8, r8, #2
   14b90:	b	147c0 <__assert_fail@plt+0x3864>
   14b94:	mov	r1, r6
   14b98:	ldr	r0, [sp]
   14b9c:	bl	10e84 <strchr@plt>
   14ba0:	cmp	r0, #0
   14ba4:	bne	1482c <__assert_fail@plt+0x38d0>
   14ba8:	ldr	r3, [sp, #12]
   14bac:	orr	r8, r8, #2
   14bb0:	strd	sl, [r3]
   14bb4:	b	147c8 <__assert_fail@plt+0x386c>
   14bb8:	ldrb	r3, [r9, #2]
   14bbc:	mov	r0, #1024	; 0x400
   14bc0:	cmp	r3, #66	; 0x42
   14bc4:	movne	lr, #1
   14bc8:	moveq	lr, #3
   14bcc:	b	14a00 <__assert_fail@plt+0x3aa4>
   14bd0:	lsr	r3, fp, #31
   14bd4:	adds	sl, sl, sl
   14bd8:	adc	fp, fp, fp
   14bdc:	cmp	r3, #0
   14be0:	beq	14b7c <__assert_fail@plt+0x3c20>
   14be4:	mov	r8, #1
   14be8:	mvn	sl, #0
   14bec:	mvn	fp, #0
   14bf0:	b	14b7c <__assert_fail@plt+0x3c20>
   14bf4:	mov	lr, #1
   14bf8:	lsr	r3, fp, #23
   14bfc:	cmp	r3, #0
   14c00:	bne	14be4 <__assert_fail@plt+0x3c88>
   14c04:	lsl	r3, fp, #9
   14c08:	orr	r3, r3, sl, lsr #23
   14c0c:	lsl	r2, sl, #9
   14c10:	mov	sl, r2
   14c14:	mov	fp, r3
   14c18:	b	14b7c <__assert_fail@plt+0x3c20>
   14c1c:	lsr	r3, fp, #22
   14c20:	cmp	r3, #0
   14c24:	bne	14be4 <__assert_fail@plt+0x3c88>
   14c28:	lsl	r3, fp, #10
   14c2c:	orr	r3, r3, sl, lsr #22
   14c30:	lsl	r2, sl, #10
   14c34:	mov	sl, r2
   14c38:	mov	fp, r3
   14c3c:	b	14b7c <__assert_fail@plt+0x3c20>
   14c40:	mov	r6, r0
   14c44:	asr	r7, r0, #31
   14c48:	mov	r3, #0
   14c4c:	mov	ip, #6
   14c50:	str	r3, [sp]
   14c54:	strd	r4, [sp, #16]
   14c58:	b	14c88 <__assert_fail@plt+0x3d2c>
   14c5c:	orrs	r3, r2, r3
   14c60:	movne	r3, #1
   14c64:	muleq	r3, sl, r7
   14c68:	strne	r3, [sp]
   14c6c:	mlaeq	r3, r6, fp, r3
   14c70:	umulleq	sl, fp, sl, r6
   14c74:	mvnne	sl, #0
   14c78:	addeq	fp, r3, fp
   14c7c:	mvnne	fp, #0
   14c80:	subs	ip, ip, #1
   14c84:	beq	14fcc <__assert_fail@plt+0x4070>
   14c88:	cmp	fp, #0
   14c8c:	mov	r2, #0
   14c90:	mov	r3, #0
   14c94:	beq	14c5c <__assert_fail@plt+0x3d00>
   14c98:	umull	r0, r1, sl, r6
   14c9c:	mov	r5, #0
   14ca0:	mov	r0, r1
   14ca4:	mov	r1, r5
   14ca8:	umlal	r0, r1, fp, r6
   14cac:	cmp	r1, r5
   14cb0:	movne	r2, #1
   14cb4:	movne	r3, #0
   14cb8:	b	14c5c <__assert_fail@plt+0x3d00>
   14cbc:	mov	r6, r0
   14cc0:	asr	r7, r0, #31
   14cc4:	mov	r3, #0
   14cc8:	mov	ip, #7
   14ccc:	str	r3, [sp]
   14cd0:	strd	r4, [sp, #16]
   14cd4:	b	14d04 <__assert_fail@plt+0x3da8>
   14cd8:	orrs	r3, r2, r3
   14cdc:	movne	r3, #1
   14ce0:	muleq	r3, sl, r7
   14ce4:	strne	r3, [sp]
   14ce8:	mlaeq	r3, r6, fp, r3
   14cec:	umulleq	sl, fp, sl, r6
   14cf0:	mvnne	sl, #0
   14cf4:	addeq	fp, r3, fp
   14cf8:	mvnne	fp, #0
   14cfc:	subs	ip, ip, #1
   14d00:	beq	14fcc <__assert_fail@plt+0x4070>
   14d04:	cmp	fp, #0
   14d08:	mov	r2, #0
   14d0c:	mov	r3, #0
   14d10:	beq	14cd8 <__assert_fail@plt+0x3d7c>
   14d14:	umull	r0, r1, sl, r6
   14d18:	mov	r5, #0
   14d1c:	mov	r0, r1
   14d20:	mov	r1, r5
   14d24:	umlal	r0, r1, fp, r6
   14d28:	cmp	r1, r5
   14d2c:	movne	r2, #1
   14d30:	movne	r3, #0
   14d34:	b	14cd8 <__assert_fail@plt+0x3d7c>
   14d38:	asr	r1, r0, #31
   14d3c:	cmp	fp, #0
   14d40:	mov	r6, #0
   14d44:	mov	r7, #0
   14d48:	bne	14fe4 <__assert_fail@plt+0x4088>
   14d4c:	orrs	r3, r6, r7
   14d50:	bne	14be4 <__assert_fail@plt+0x3c88>
   14d54:	mul	r3, sl, r1
   14d58:	mla	r3, r0, fp, r3
   14d5c:	umull	sl, fp, sl, r0
   14d60:	add	fp, r3, fp
   14d64:	b	14b7c <__assert_fail@plt+0x3c20>
   14d68:	mov	r6, r0
   14d6c:	asr	r7, r0, #31
   14d70:	mov	r3, #0
   14d74:	mov	ip, #8
   14d78:	str	r3, [sp]
   14d7c:	strd	r4, [sp, #16]
   14d80:	b	14db0 <__assert_fail@plt+0x3e54>
   14d84:	orrs	r3, r2, r3
   14d88:	movne	r3, #1
   14d8c:	muleq	r3, sl, r7
   14d90:	strne	r3, [sp]
   14d94:	mlaeq	r3, r6, fp, r3
   14d98:	umulleq	sl, fp, sl, r6
   14d9c:	mvnne	sl, #0
   14da0:	addeq	fp, r3, fp
   14da4:	mvnne	fp, #0
   14da8:	subs	ip, ip, #1
   14dac:	beq	14fcc <__assert_fail@plt+0x4070>
   14db0:	cmp	fp, #0
   14db4:	mov	r2, #0
   14db8:	mov	r3, #0
   14dbc:	beq	14d84 <__assert_fail@plt+0x3e28>
   14dc0:	umull	r0, r1, sl, r6
   14dc4:	mov	r5, #0
   14dc8:	mov	r0, r1
   14dcc:	mov	r1, r5
   14dd0:	umlal	r0, r1, fp, r6
   14dd4:	cmp	r1, r5
   14dd8:	movne	r2, #1
   14ddc:	movne	r3, #0
   14de0:	b	14d84 <__assert_fail@plt+0x3e28>
   14de4:	mov	r6, r0
   14de8:	asr	r7, r0, #31
   14dec:	mov	r3, #0
   14df0:	mov	ip, #4
   14df4:	str	r3, [sp]
   14df8:	strd	r4, [sp, #16]
   14dfc:	b	14e2c <__assert_fail@plt+0x3ed0>
   14e00:	orrs	r3, r2, r3
   14e04:	movne	r3, #1
   14e08:	muleq	r3, sl, r7
   14e0c:	strne	r3, [sp]
   14e10:	mlaeq	r3, r6, fp, r3
   14e14:	umulleq	sl, fp, sl, r6
   14e18:	mvnne	sl, #0
   14e1c:	addeq	fp, r3, fp
   14e20:	mvnne	fp, #0
   14e24:	subs	ip, ip, #1
   14e28:	beq	14fcc <__assert_fail@plt+0x4070>
   14e2c:	cmp	fp, #0
   14e30:	mov	r2, #0
   14e34:	mov	r3, #0
   14e38:	beq	14e00 <__assert_fail@plt+0x3ea4>
   14e3c:	umull	r0, r1, sl, r6
   14e40:	mov	r5, #0
   14e44:	mov	r0, r1
   14e48:	mov	r1, r5
   14e4c:	umlal	r0, r1, fp, r6
   14e50:	cmp	r1, r5
   14e54:	movne	r2, #1
   14e58:	movne	r3, #0
   14e5c:	b	14e00 <__assert_fail@plt+0x3ea4>
   14e60:	mov	r6, r0
   14e64:	asr	r7, r0, #31
   14e68:	mov	r3, #0
   14e6c:	mov	ip, #5
   14e70:	str	r3, [sp]
   14e74:	strd	r4, [sp, #16]
   14e78:	b	14ea8 <__assert_fail@plt+0x3f4c>
   14e7c:	orrs	r3, r2, r3
   14e80:	movne	r3, #1
   14e84:	muleq	r3, sl, r7
   14e88:	strne	r3, [sp]
   14e8c:	mlaeq	r3, r6, fp, r3
   14e90:	umulleq	sl, fp, sl, r6
   14e94:	mvnne	sl, #0
   14e98:	addeq	fp, r3, fp
   14e9c:	mvnne	fp, #0
   14ea0:	subs	ip, ip, #1
   14ea4:	beq	14fcc <__assert_fail@plt+0x4070>
   14ea8:	cmp	fp, #0
   14eac:	mov	r2, #0
   14eb0:	mov	r3, #0
   14eb4:	beq	14e7c <__assert_fail@plt+0x3f20>
   14eb8:	umull	r0, r1, sl, r6
   14ebc:	mov	r5, #0
   14ec0:	mov	r0, r1
   14ec4:	mov	r1, r5
   14ec8:	umlal	r0, r1, fp, r6
   14ecc:	cmp	r1, r5
   14ed0:	movne	r2, #1
   14ed4:	movne	r3, #0
   14ed8:	b	14e7c <__assert_fail@plt+0x3f20>
   14edc:	asr	r1, r0, #31
   14ee0:	cmp	fp, #0
   14ee4:	mov	r6, #0
   14ee8:	mov	r7, #0
   14eec:	bne	15040 <__assert_fail@plt+0x40e4>
   14ef0:	orrs	r3, r6, r7
   14ef4:	bne	14be4 <__assert_fail@plt+0x3c88>
   14ef8:	umull	r2, r3, sl, r0
   14efc:	mul	ip, sl, r1
   14f00:	strd	r2, [sp]
   14f04:	mla	r3, r0, fp, ip
   14f08:	ldr	r2, [sp, #4]
   14f0c:	mov	sl, r6
   14f10:	add	ip, r3, r2
   14f14:	cmp	ip, #0
   14f18:	mov	fp, r7
   14f1c:	str	ip, [sp, #4]
   14f20:	bne	15068 <__assert_fail@plt+0x410c>
   14f24:	orrs	r3, sl, fp
   14f28:	bne	14be4 <__assert_fail@plt+0x3c88>
   14f2c:	ldrd	r6, [sp]
   14f30:	mul	r3, r6, r1
   14f34:	umull	sl, fp, r6, r0
   14f38:	mla	r0, r0, r7, r3
   14f3c:	add	fp, r0, fp
   14f40:	b	14b7c <__assert_fail@plt+0x3c20>
   14f44:	mov	lr, #1
   14f48:	b	14b7c <__assert_fail@plt+0x3c20>
   14f4c:	mov	lr, #1
   14f50:	mov	r6, #1024	; 0x400
   14f54:	mov	r7, #0
   14f58:	b	14cc4 <__assert_fail@plt+0x3d68>
   14f5c:	mov	lr, #1
   14f60:	mov	r6, #1024	; 0x400
   14f64:	mov	r7, #0
   14f68:	b	14d70 <__assert_fail@plt+0x3e14>
   14f6c:	mov	lr, #1
   14f70:	mov	r6, #1024	; 0x400
   14f74:	mov	r7, #0
   14f78:	b	14dec <__assert_fail@plt+0x3e90>
   14f7c:	mov	lr, #1
   14f80:	mov	r6, #1024	; 0x400
   14f84:	mov	r7, #0
   14f88:	b	14e68 <__assert_fail@plt+0x3f0c>
   14f8c:	mov	lr, #1
   14f90:	mov	r0, #1024	; 0x400
   14f94:	mov	r1, #0
   14f98:	b	14ee0 <__assert_fail@plt+0x3f84>
   14f9c:	mov	lr, #1
   14fa0:	mov	r0, #1024	; 0x400
   14fa4:	mov	r1, #0
   14fa8:	b	14d3c <__assert_fail@plt+0x3de0>
   14fac:	mov	lr, #1
   14fb0:	mov	r0, #1024	; 0x400
   14fb4:	mov	r1, #0
   14fb8:	b	14aec <__assert_fail@plt+0x3b90>
   14fbc:	mov	lr, #1
   14fc0:	mov	r6, #1024	; 0x400
   14fc4:	mov	r7, #0
   14fc8:	b	14c48 <__assert_fail@plt+0x3cec>
   14fcc:	ldrd	r4, [sp, #16]
   14fd0:	ldr	r3, [sp]
   14fd4:	b	14b78 <__assert_fail@plt+0x3c1c>
   14fd8:	mov	lr, #2
   14fdc:	mov	r0, #1000	; 0x3e8
   14fe0:	b	14a00 <__assert_fail@plt+0x3aa4>
   14fe4:	umull	r2, r3, sl, r0
   14fe8:	str	r3, [sp]
   14fec:	mov	r3, #0
   14ff0:	str	r3, [sp, #4]
   14ff4:	ldrd	r2, [sp]
   14ff8:	umlal	r2, r3, fp, r0
   14ffc:	cmp	r3, #0
   15000:	movne	r6, #1
   15004:	movne	r7, #0
   15008:	b	14d4c <__assert_fail@plt+0x3df0>
   1500c:	mov	r3, #1
   15010:	mvn	sl, #0
   15014:	mvn	fp, #0
   15018:	b	14b78 <__assert_fail@plt+0x3c1c>
   1501c:	umull	r2, r3, sl, r0
   15020:	mov	r7, #0
   15024:	mov	r6, r3
   15028:	umlal	r6, r7, fp, r0
   1502c:	cmp	r7, #0
   15030:	movne	r2, #1
   15034:	movne	r3, #0
   15038:	strdne	r2, [sp]
   1503c:	b	14b00 <__assert_fail@plt+0x3ba4>
   15040:	umull	r2, r3, sl, r0
   15044:	str	r3, [sp]
   15048:	mov	r3, #0
   1504c:	str	r3, [sp, #4]
   15050:	ldrd	r2, [sp]
   15054:	umlal	r2, r3, fp, r0
   15058:	cmp	r3, #0
   1505c:	movne	r6, #1
   15060:	movne	r7, #0
   15064:	b	14ef0 <__assert_fail@plt+0x3f94>
   15068:	ldr	r3, [sp]
   1506c:	mov	r7, #0
   15070:	umull	r2, r3, r3, r0
   15074:	mov	r6, r3
   15078:	umlal	r6, r7, ip, r0
   1507c:	cmp	r7, #0
   15080:	movne	sl, #1
   15084:	movne	fp, #0
   15088:	b	14f24 <__assert_fail@plt+0x3fc8>
   1508c:	ldr	r3, [sp]
   15090:	mov	r7, #0
   15094:	umull	r2, r3, r3, r0
   15098:	mov	r6, r3
   1509c:	umlal	r6, r7, ip, r0
   150a0:	cmp	r7, #0
   150a4:	movne	sl, #1
   150a8:	movne	fp, #0
   150ac:	b	14b58 <__assert_fail@plt+0x3bfc>
   150b0:	umull	r2, r3, r6, r0
   150b4:	str	r3, [sp]
   150b8:	mov	r3, #0
   150bc:	str	r3, [sp, #4]
   150c0:	ldrd	r2, [sp]
   150c4:	umlal	r2, r3, ip, r0
   150c8:	cmp	r3, #0
   150cc:	movne	sl, #1
   150d0:	movne	fp, #0
   150d4:	b	14b2c <__assert_fail@plt+0x3bd0>
   150d8:	bl	10dac <__stack_chk_fail@plt>
   150dc:	ldr	r3, [pc, #16]	; 150f4 <__assert_fail@plt+0x4198>
   150e0:	mov	r2, #96	; 0x60
   150e4:	ldr	r1, [pc, #12]	; 150f8 <__assert_fail@plt+0x419c>
   150e8:	ldr	r0, [pc, #12]	; 150fc <__assert_fail@plt+0x41a0>
   150ec:	bl	10f5c <__assert_fail@plt>
   150f0:	andeq	r6, r2, r8, lsl #30
   150f4:			; <UNDEFINED> instruction: 0x00015fb0
   150f8:			; <UNDEFINED> instruction: 0x00015fbc
   150fc:	andeq	r5, r1, ip, asr #31
   15100:	push	{r4, r5, lr}
   15104:	sub	sp, sp, #12
   15108:	mov	r4, r0
   1510c:	bl	10ec0 <fileno@plt>
   15110:	cmp	r0, #0
   15114:	mov	r0, r4
   15118:	blt	15194 <__assert_fail@plt+0x4238>
   1511c:	bl	10e3c <__freading@plt>
   15120:	cmp	r0, #0
   15124:	bne	15160 <__assert_fail@plt+0x4204>
   15128:	mov	r0, r4
   1512c:	bl	151a0 <__assert_fail@plt+0x4244>
   15130:	cmp	r0, #0
   15134:	beq	15190 <__assert_fail@plt+0x4234>
   15138:	bl	10e90 <__errno_location@plt>
   1513c:	mov	r5, r0
   15140:	mov	r0, r4
   15144:	ldr	r4, [r5]
   15148:	bl	10ed8 <fclose@plt>
   1514c:	cmp	r4, #0
   15150:	mvnne	r0, #0
   15154:	strne	r4, [r5]
   15158:	add	sp, sp, #12
   1515c:	pop	{r4, r5, pc}
   15160:	mov	r0, r4
   15164:	bl	10ec0 <fileno@plt>
   15168:	mov	r3, #1
   1516c:	str	r3, [sp]
   15170:	mov	r2, #0
   15174:	mov	r3, #0
   15178:	bl	10de8 <lseek64@plt>
   1517c:	mvn	r3, #0
   15180:	mvn	r2, #0
   15184:	cmp	r1, r3
   15188:	cmpeq	r0, r2
   1518c:	bne	15128 <__assert_fail@plt+0x41cc>
   15190:	mov	r0, r4
   15194:	add	sp, sp, #12
   15198:	pop	{r4, r5, lr}
   1519c:	b	10ed8 <fclose@plt>
   151a0:	push	{r4, lr}
   151a4:	subs	r4, r0, #0
   151a8:	sub	sp, sp, #8
   151ac:	beq	151c8 <__assert_fail@plt+0x426c>
   151b0:	bl	10e3c <__freading@plt>
   151b4:	cmp	r0, #0
   151b8:	beq	151c8 <__assert_fail@plt+0x426c>
   151bc:	ldr	r3, [r4]
   151c0:	tst	r3, #256	; 0x100
   151c4:	bne	151d8 <__assert_fail@plt+0x427c>
   151c8:	mov	r0, r4
   151cc:	add	sp, sp, #8
   151d0:	pop	{r4, lr}
   151d4:	b	10d34 <fflush@plt>
   151d8:	mov	r3, #1
   151dc:	str	r3, [sp]
   151e0:	mov	r2, #0
   151e4:	mov	r3, #0
   151e8:	mov	r0, r4
   151ec:	bl	15200 <__assert_fail@plt+0x42a4>
   151f0:	mov	r0, r4
   151f4:	add	sp, sp, #8
   151f8:	pop	{r4, lr}
   151fc:	b	10d34 <fflush@plt>
   15200:	push	{r4, r5, r6, r7, r8, lr}
   15204:	sub	sp, sp, #8
   15208:	ldmib	r0, {ip, lr}
   1520c:	mov	r4, r0
   15210:	ldr	r5, [sp, #32]
   15214:	cmp	lr, ip
   15218:	beq	15230 <__assert_fail@plt+0x42d4>
   1521c:	str	r5, [sp, #32]
   15220:	mov	r0, r4
   15224:	add	sp, sp, #8
   15228:	pop	{r4, r5, r6, r7, r8, lr}
   1522c:	b	10ee4 <fseeko64@plt>
   15230:	ldr	lr, [r0, #20]
   15234:	ldr	ip, [r0, #16]
   15238:	cmp	lr, ip
   1523c:	bne	1521c <__assert_fail@plt+0x42c0>
   15240:	ldr	r8, [r0, #36]	; 0x24
   15244:	cmp	r8, #0
   15248:	bne	1521c <__assert_fail@plt+0x42c0>
   1524c:	mov	r6, r2
   15250:	mov	r7, r3
   15254:	bl	10ec0 <fileno@plt>
   15258:	mov	r2, r6
   1525c:	mov	r3, r7
   15260:	str	r5, [sp]
   15264:	bl	10de8 <lseek64@plt>
   15268:	mvn	r3, #0
   1526c:	mvn	r2, #0
   15270:	cmp	r1, r3
   15274:	cmpeq	r0, r2
   15278:	beq	15298 <__assert_fail@plt+0x433c>
   1527c:	ldr	r3, [r4]
   15280:	strd	r0, [r4, #80]	; 0x50
   15284:	mov	r0, r8
   15288:	bic	r3, r3, #16
   1528c:	str	r3, [r4]
   15290:	add	sp, sp, #8
   15294:	pop	{r4, r5, r6, r7, r8, pc}
   15298:	mvn	r0, #0
   1529c:	b	15290 <__assert_fail@plt+0x4334>
   152a0:	push	{r4, r5, r6, r7, r8, lr}
   152a4:	subs	r7, r0, #0
   152a8:	ldr	r5, [pc, #108]	; 1531c <__assert_fail@plt+0x43c0>
   152ac:	sub	sp, sp, #8
   152b0:	mov	r8, r1
   152b4:	ldr	r1, [r5]
   152b8:	moveq	r7, sp
   152bc:	str	r1, [sp, #4]
   152c0:	mov	r0, r7
   152c4:	mov	r1, r8
   152c8:	mov	r6, r2
   152cc:	bl	10e0c <mbrtowc@plt>
   152d0:	cmp	r6, #0
   152d4:	cmnne	r0, #3
   152d8:	mov	r4, r0
   152dc:	bhi	152fc <__assert_fail@plt+0x43a0>
   152e0:	ldr	r2, [sp, #4]
   152e4:	ldr	r3, [r5]
   152e8:	mov	r0, r4
   152ec:	cmp	r2, r3
   152f0:	bne	15318 <__assert_fail@plt+0x43bc>
   152f4:	add	sp, sp, #8
   152f8:	pop	{r4, r5, r6, r7, r8, pc}
   152fc:	mov	r0, #0
   15300:	bl	15394 <__assert_fail@plt+0x4438>
   15304:	cmp	r0, #0
   15308:	moveq	r4, #1
   1530c:	ldrbeq	r3, [r8]
   15310:	streq	r3, [r7]
   15314:	b	152e0 <__assert_fail@plt+0x4384>
   15318:	bl	10dac <__stack_chk_fail@plt>
   1531c:	andeq	r6, r2, r8, lsl #30
   15320:	push	{r4, r5, r6, lr}
   15324:	mov	r4, r0
   15328:	bl	10e00 <__fpending@plt>
   1532c:	ldr	r5, [r4]
   15330:	and	r5, r5, #32
   15334:	mov	r6, r0
   15338:	mov	r0, r4
   1533c:	bl	15100 <__assert_fail@plt+0x41a4>
   15340:	cmp	r5, #0
   15344:	mov	r4, r0
   15348:	bne	15374 <__assert_fail@plt+0x4418>
   1534c:	cmp	r0, #0
   15350:	beq	1536c <__assert_fail@plt+0x4410>
   15354:	cmp	r6, #0
   15358:	bne	1538c <__assert_fail@plt+0x4430>
   1535c:	bl	10e90 <__errno_location@plt>
   15360:	ldr	r4, [r0]
   15364:	subs	r4, r4, #9
   15368:	mvnne	r4, #0
   1536c:	mov	r0, r4
   15370:	pop	{r4, r5, r6, pc}
   15374:	cmp	r0, #0
   15378:	bne	1538c <__assert_fail@plt+0x4430>
   1537c:	bl	10e90 <__errno_location@plt>
   15380:	str	r4, [r0]
   15384:	mvn	r4, #0
   15388:	b	1536c <__assert_fail@plt+0x4410>
   1538c:	mvn	r4, #0
   15390:	b	1536c <__assert_fail@plt+0x4410>
   15394:	push	{r4, lr}
   15398:	mov	r1, #0
   1539c:	bl	10f08 <setlocale@plt>
   153a0:	subs	r4, r0, #0
   153a4:	beq	153d0 <__assert_fail@plt+0x4474>
   153a8:	ldr	r1, [pc, #40]	; 153d8 <__assert_fail@plt+0x447c>
   153ac:	bl	10d1c <strcmp@plt>
   153b0:	cmp	r0, #0
   153b4:	popeq	{r4, pc}
   153b8:	mov	r0, r4
   153bc:	ldr	r1, [pc, #24]	; 153dc <__assert_fail@plt+0x4480>
   153c0:	bl	10d1c <strcmp@plt>
   153c4:	adds	r0, r0, #0
   153c8:	movne	r0, #1
   153cc:	pop	{r4, pc}
   153d0:	mov	r0, #1
   153d4:	pop	{r4, pc}
   153d8:	strdeq	r5, [r1], -r4
   153dc:	strdeq	r5, [r1], -r8
   153e0:	push	{r4, lr}
   153e4:	mov	r0, #14
   153e8:	bl	10f20 <nl_langinfo@plt>
   153ec:	cmp	r0, #0
   153f0:	beq	15408 <__assert_fail@plt+0x44ac>
   153f4:	ldrb	r2, [r0]
   153f8:	ldr	r3, [pc, #16]	; 15410 <__assert_fail@plt+0x44b4>
   153fc:	cmp	r2, #0
   15400:	moveq	r0, r3
   15404:	pop	{r4, pc}
   15408:	ldr	r0, [pc]	; 15410 <__assert_fail@plt+0x44b4>
   1540c:	pop	{r4, pc}
   15410:	andeq	r6, r1, r0
   15414:	subs	r2, r1, #1
   15418:	bxeq	lr
   1541c:	bcc	155f4 <__assert_fail@plt+0x4698>
   15420:	cmp	r0, r1
   15424:	bls	155d8 <__assert_fail@plt+0x467c>
   15428:	tst	r1, r2
   1542c:	beq	155e4 <__assert_fail@plt+0x4688>
   15430:	clz	r3, r0
   15434:	clz	r2, r1
   15438:	sub	r3, r2, r3
   1543c:	rsbs	r3, r3, #31
   15440:	addne	r3, r3, r3, lsl #1
   15444:	mov	r2, #0
   15448:	addne	pc, pc, r3, lsl #2
   1544c:	nop			; (mov r0, r0)
   15450:	cmp	r0, r1, lsl #31
   15454:	adc	r2, r2, r2
   15458:	subcs	r0, r0, r1, lsl #31
   1545c:	cmp	r0, r1, lsl #30
   15460:	adc	r2, r2, r2
   15464:	subcs	r0, r0, r1, lsl #30
   15468:	cmp	r0, r1, lsl #29
   1546c:	adc	r2, r2, r2
   15470:	subcs	r0, r0, r1, lsl #29
   15474:	cmp	r0, r1, lsl #28
   15478:	adc	r2, r2, r2
   1547c:	subcs	r0, r0, r1, lsl #28
   15480:	cmp	r0, r1, lsl #27
   15484:	adc	r2, r2, r2
   15488:	subcs	r0, r0, r1, lsl #27
   1548c:	cmp	r0, r1, lsl #26
   15490:	adc	r2, r2, r2
   15494:	subcs	r0, r0, r1, lsl #26
   15498:	cmp	r0, r1, lsl #25
   1549c:	adc	r2, r2, r2
   154a0:	subcs	r0, r0, r1, lsl #25
   154a4:	cmp	r0, r1, lsl #24
   154a8:	adc	r2, r2, r2
   154ac:	subcs	r0, r0, r1, lsl #24
   154b0:	cmp	r0, r1, lsl #23
   154b4:	adc	r2, r2, r2
   154b8:	subcs	r0, r0, r1, lsl #23
   154bc:	cmp	r0, r1, lsl #22
   154c0:	adc	r2, r2, r2
   154c4:	subcs	r0, r0, r1, lsl #22
   154c8:	cmp	r0, r1, lsl #21
   154cc:	adc	r2, r2, r2
   154d0:	subcs	r0, r0, r1, lsl #21
   154d4:	cmp	r0, r1, lsl #20
   154d8:	adc	r2, r2, r2
   154dc:	subcs	r0, r0, r1, lsl #20
   154e0:	cmp	r0, r1, lsl #19
   154e4:	adc	r2, r2, r2
   154e8:	subcs	r0, r0, r1, lsl #19
   154ec:	cmp	r0, r1, lsl #18
   154f0:	adc	r2, r2, r2
   154f4:	subcs	r0, r0, r1, lsl #18
   154f8:	cmp	r0, r1, lsl #17
   154fc:	adc	r2, r2, r2
   15500:	subcs	r0, r0, r1, lsl #17
   15504:	cmp	r0, r1, lsl #16
   15508:	adc	r2, r2, r2
   1550c:	subcs	r0, r0, r1, lsl #16
   15510:	cmp	r0, r1, lsl #15
   15514:	adc	r2, r2, r2
   15518:	subcs	r0, r0, r1, lsl #15
   1551c:	cmp	r0, r1, lsl #14
   15520:	adc	r2, r2, r2
   15524:	subcs	r0, r0, r1, lsl #14
   15528:	cmp	r0, r1, lsl #13
   1552c:	adc	r2, r2, r2
   15530:	subcs	r0, r0, r1, lsl #13
   15534:	cmp	r0, r1, lsl #12
   15538:	adc	r2, r2, r2
   1553c:	subcs	r0, r0, r1, lsl #12
   15540:	cmp	r0, r1, lsl #11
   15544:	adc	r2, r2, r2
   15548:	subcs	r0, r0, r1, lsl #11
   1554c:	cmp	r0, r1, lsl #10
   15550:	adc	r2, r2, r2
   15554:	subcs	r0, r0, r1, lsl #10
   15558:	cmp	r0, r1, lsl #9
   1555c:	adc	r2, r2, r2
   15560:	subcs	r0, r0, r1, lsl #9
   15564:	cmp	r0, r1, lsl #8
   15568:	adc	r2, r2, r2
   1556c:	subcs	r0, r0, r1, lsl #8
   15570:	cmp	r0, r1, lsl #7
   15574:	adc	r2, r2, r2
   15578:	subcs	r0, r0, r1, lsl #7
   1557c:	cmp	r0, r1, lsl #6
   15580:	adc	r2, r2, r2
   15584:	subcs	r0, r0, r1, lsl #6
   15588:	cmp	r0, r1, lsl #5
   1558c:	adc	r2, r2, r2
   15590:	subcs	r0, r0, r1, lsl #5
   15594:	cmp	r0, r1, lsl #4
   15598:	adc	r2, r2, r2
   1559c:	subcs	r0, r0, r1, lsl #4
   155a0:	cmp	r0, r1, lsl #3
   155a4:	adc	r2, r2, r2
   155a8:	subcs	r0, r0, r1, lsl #3
   155ac:	cmp	r0, r1, lsl #2
   155b0:	adc	r2, r2, r2
   155b4:	subcs	r0, r0, r1, lsl #2
   155b8:	cmp	r0, r1, lsl #1
   155bc:	adc	r2, r2, r2
   155c0:	subcs	r0, r0, r1, lsl #1
   155c4:	cmp	r0, r1
   155c8:	adc	r2, r2, r2
   155cc:	subcs	r0, r0, r1
   155d0:	mov	r0, r2
   155d4:	bx	lr
   155d8:	moveq	r0, #1
   155dc:	movne	r0, #0
   155e0:	bx	lr
   155e4:	clz	r2, r1
   155e8:	rsb	r2, r2, #31
   155ec:	lsr	r0, r0, r2
   155f0:	bx	lr
   155f4:	cmp	r0, #0
   155f8:	mvnne	r0, #0
   155fc:	b	15620 <__assert_fail@plt+0x46c4>
   15600:	cmp	r1, #0
   15604:	beq	155f4 <__assert_fail@plt+0x4698>
   15608:	push	{r0, r1, lr}
   1560c:	bl	15414 <__assert_fail@plt+0x44b8>
   15610:	pop	{r1, r2, lr}
   15614:	mul	r3, r2, r0
   15618:	sub	r1, r1, r3
   1561c:	bx	lr
   15620:	push	{r1, lr}
   15624:	mov	r0, #8
   15628:	bl	10d10 <raise@plt>
   1562c:	pop	{r1, pc}
   15630:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15634:	mov	r7, r0
   15638:	ldr	r6, [pc, #72]	; 15688 <__assert_fail@plt+0x472c>
   1563c:	ldr	r5, [pc, #72]	; 1568c <__assert_fail@plt+0x4730>
   15640:	add	r6, pc, r6
   15644:	add	r5, pc, r5
   15648:	sub	r6, r6, r5
   1564c:	mov	r8, r1
   15650:	mov	r9, r2
   15654:	bl	10cd8 <calloc@plt-0x20>
   15658:	asrs	r6, r6, #2
   1565c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15660:	mov	r4, #0
   15664:	add	r4, r4, #1
   15668:	ldr	r3, [r5], #4
   1566c:	mov	r2, r9
   15670:	mov	r1, r8
   15674:	mov	r0, r7
   15678:	blx	r3
   1567c:	cmp	r6, r4
   15680:	bne	15664 <__assert_fail@plt+0x4708>
   15684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15688:			; <UNDEFINED> instruction: 0x000118bc
   1568c:			; <UNDEFINED> instruction: 0x000118b4
   15690:	bx	lr
   15694:	ldr	r3, [pc, #12]	; 156a8 <__assert_fail@plt+0x474c>
   15698:	mov	r1, #0
   1569c:	add	r3, pc, r3
   156a0:	ldr	r2, [r3]
   156a4:	b	10e9c <__cxa_atexit@plt>
   156a8:	andeq	r1, r1, r0, asr #20

Disassembly of section .fini:

000156ac <.fini>:
   156ac:	push	{r3, lr}
   156b0:	pop	{r3, pc}
