
raspbian-preinstalled/whereis:     file format elf32-littlearm


Disassembly of section .init:

00010d68 <.init>:
   10d68:	push	{r3, lr}
   10d6c:	bl	117ec <__assert_fail@plt+0x788>
   10d70:	pop	{r3, pc}

Disassembly of section .plt:

00010d74 <calloc@plt-0x14>:
   10d74:	push	{lr}		; (str lr, [sp, #-4]!)
   10d78:	ldr	lr, [pc, #4]	; 10d84 <calloc@plt-0x4>
   10d7c:	add	lr, pc, lr
   10d80:	ldr	pc, [lr, #8]!
   10d84:	andeq	r3, r1, r0, ror r1

00010d88 <calloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #77824	; 0x13000
   10d90:	ldr	pc, [ip, #368]!	; 0x170

00010d94 <strcmp@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #77824	; 0x13000
   10d9c:	ldr	pc, [ip, #360]!	; 0x168

00010da0 <getuid@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #77824	; 0x13000
   10da8:	ldr	pc, [ip, #352]!	; 0x160

00010dac <free@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #77824	; 0x13000
   10db4:	ldr	pc, [ip, #344]!	; 0x158

00010db8 <fgets@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #77824	; 0x13000
   10dc0:	ldr	pc, [ip, #336]!	; 0x150

00010dc4 <ferror@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #77824	; 0x13000
   10dcc:	ldr	pc, [ip, #328]!	; 0x148

00010dd0 <_exit@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #77824	; 0x13000
   10dd8:	ldr	pc, [ip, #320]!	; 0x140

00010ddc <memcpy@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #77824	; 0x13000
   10de4:	ldr	pc, [ip, #312]!	; 0x138

00010de8 <dcgettext@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #77824	; 0x13000
   10df0:	ldr	pc, [ip, #304]!	; 0x130

00010df4 <strdup@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #77824	; 0x13000
   10dfc:	ldr	pc, [ip, #296]!	; 0x128

00010e00 <__stack_chk_fail@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #77824	; 0x13000
   10e08:	ldr	pc, [ip, #288]!	; 0x120

00010e0c <textdomain@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #77824	; 0x13000
   10e14:	ldr	pc, [ip, #280]!	; 0x118

00010e18 <err@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #77824	; 0x13000
   10e20:	ldr	pc, [ip, #272]!	; 0x110

00010e24 <geteuid@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #77824	; 0x13000
   10e2c:	ldr	pc, [ip, #264]!	; 0x108

00010e30 <seteuid@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #77824	; 0x13000
   10e38:	ldr	pc, [ip, #256]!	; 0x100

00010e3c <getegid@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #77824	; 0x13000
   10e44:	ldr	pc, [ip, #248]!	; 0xf8

00010e48 <__fpending@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #77824	; 0x13000
   10e50:	ldr	pc, [ip, #240]!	; 0xf0

00010e54 <strtok_r@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #77824	; 0x13000
   10e5c:	ldr	pc, [ip, #232]!	; 0xe8

00010e60 <opendir@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #77824	; 0x13000
   10e68:	ldr	pc, [ip, #224]!	; 0xe0

00010e6c <getenv@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #77824	; 0x13000
   10e74:	ldr	pc, [ip, #216]!	; 0xd8

00010e78 <puts@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #77824	; 0x13000
   10e80:	ldr	pc, [ip, #208]!	; 0xd0

00010e84 <malloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #77824	; 0x13000
   10e8c:	ldr	pc, [ip, #200]!	; 0xc8

00010e90 <__libc_start_main@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #77824	; 0x13000
   10e98:	ldr	pc, [ip, #192]!	; 0xc0

00010e9c <__vfprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #77824	; 0x13000
   10ea4:	ldr	pc, [ip, #184]!	; 0xb8

00010ea8 <__gmon_start__@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #77824	; 0x13000
   10eb0:	ldr	pc, [ip, #176]!	; 0xb0

00010eb4 <__ctype_b_loc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #77824	; 0x13000
   10ebc:	ldr	pc, [ip, #168]!	; 0xa8

00010ec0 <getcwd@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #77824	; 0x13000
   10ec8:	ldr	pc, [ip, #160]!	; 0xa0

00010ecc <getpid@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #77824	; 0x13000
   10ed4:	ldr	pc, [ip, #152]!	; 0x98

00010ed8 <exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #77824	; 0x13000
   10ee0:	ldr	pc, [ip, #144]!	; 0x90

00010ee4 <strtoul@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #77824	; 0x13000
   10eec:	ldr	pc, [ip, #136]!	; 0x88

00010ef0 <strlen@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #77824	; 0x13000
   10ef8:	ldr	pc, [ip, #128]!	; 0x80

00010efc <strchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #77824	; 0x13000
   10f04:	ldr	pc, [ip, #120]!	; 0x78

00010f08 <warnx@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #77824	; 0x13000
   10f10:	ldr	pc, [ip, #112]!	; 0x70

00010f14 <__errno_location@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #77824	; 0x13000
   10f1c:	ldr	pc, [ip, #104]!	; 0x68

00010f20 <__strcat_chk@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #77824	; 0x13000
   10f28:	ldr	pc, [ip, #96]!	; 0x60

00010f2c <snprintf@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #77824	; 0x13000
   10f34:	ldr	pc, [ip, #88]!	; 0x58

00010f38 <__cxa_atexit@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #77824	; 0x13000
   10f40:	ldr	pc, [ip, #80]!	; 0x50

00010f44 <__vasprintf_chk@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #77824	; 0x13000
   10f4c:	ldr	pc, [ip, #72]!	; 0x48

00010f50 <getgid@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #77824	; 0x13000
   10f58:	ldr	pc, [ip, #64]!	; 0x40

00010f5c <strncpy@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #77824	; 0x13000
   10f64:	ldr	pc, [ip, #56]!	; 0x38

00010f68 <__printf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #77824	; 0x13000
   10f70:	ldr	pc, [ip, #48]!	; 0x30

00010f74 <__fprintf_chk@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #77824	; 0x13000
   10f7c:	ldr	pc, [ip, #40]!	; 0x28

00010f80 <access@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #77824	; 0x13000
   10f88:	ldr	pc, [ip, #32]!

00010f8c <setegid@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #77824	; 0x13000
   10f94:	ldr	pc, [ip, #24]!

00010f98 <fclose@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #77824	; 0x13000
   10fa0:	ldr	pc, [ip, #16]!

00010fa4 <setlocale@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #77824	; 0x13000
   10fac:	ldr	pc, [ip, #8]!

00010fb0 <errx@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #77824	; 0x13000
   10fb8:	ldr	pc, [ip, #0]!

00010fbc <strrchr@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #73728	; 0x12000
   10fc4:	ldr	pc, [ip, #4088]!	; 0xff8

00010fc8 <warn@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #73728	; 0x12000
   10fd0:	ldr	pc, [ip, #4080]!	; 0xff0

00010fd4 <fputc@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #73728	; 0x12000
   10fdc:	ldr	pc, [ip, #4072]!	; 0xfe8

00010fe0 <readdir64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #73728	; 0x12000
   10fe8:	ldr	pc, [ip, #4064]!	; 0xfe0

00010fec <putc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #73728	; 0x12000
   10ff4:	ldr	pc, [ip, #4056]!	; 0xfd8

00010ff8 <fopen64@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #73728	; 0x12000
   11000:	ldr	pc, [ip, #4048]!	; 0xfd0

00011004 <bindtextdomain@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #73728	; 0x12000
   1100c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011010 <__xstat64@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #73728	; 0x12000
   11018:	ldr	pc, [ip, #4032]!	; 0xfc0

0001101c <fputs@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #73728	; 0x12000
   11024:	ldr	pc, [ip, #4024]!	; 0xfb8

00011028 <strncmp@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #73728	; 0x12000
   11030:	ldr	pc, [ip, #4016]!	; 0xfb0

00011034 <abort@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #73728	; 0x12000
   1103c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011040 <realpath@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #73728	; 0x12000
   11048:	ldr	pc, [ip, #4000]!	; 0xfa0

0001104c <closedir@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #73728	; 0x12000
   11054:	ldr	pc, [ip, #3992]!	; 0xf98

00011058 <__snprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #73728	; 0x12000
   11060:	ldr	pc, [ip, #3984]!	; 0xf90

00011064 <__assert_fail@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #73728	; 0x12000
   1106c:	ldr	pc, [ip, #3976]!	; 0xf88

Disassembly of section .text:

00011070 <.text>:
   11070:	ldr	r3, [pc, #1716]	; 1172c <__assert_fail@plt+0x6c8>
   11074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	sub	sp, sp, #36	; 0x24
   1107c:	ldr	r3, [r3]
   11080:	mov	r5, r0
   11084:	str	r0, [sp, #8]
   11088:	mov	fp, r1
   1108c:	mov	r4, #0
   11090:	ldr	r1, [pc, #1688]	; 11730 <__assert_fail@plt+0x6cc>
   11094:	mov	r0, #6
   11098:	str	r3, [sp, #28]
   1109c:	str	r4, [sp, #20]
   110a0:	bl	10fa4 <setlocale@plt>
   110a4:	ldr	r1, [pc, #1672]	; 11734 <__assert_fail@plt+0x6d0>
   110a8:	ldr	r0, [pc, #1672]	; 11738 <__assert_fail@plt+0x6d4>
   110ac:	bl	11004 <bindtextdomain@plt>
   110b0:	ldr	r0, [pc, #1664]	; 11738 <__assert_fail@plt+0x6d4>
   110b4:	bl	10e0c <textdomain@plt>
   110b8:	ldr	r0, [pc, #1660]	; 1173c <__assert_fail@plt+0x6d8>
   110bc:	bl	13178 <__assert_fail@plt+0x2114>
   110c0:	cmp	r5, #1
   110c4:	ble	11700 <__assert_fail@plt+0x69c>
   110c8:	ldr	r4, [fp, #4]
   110cc:	ldr	r1, [pc, #1644]	; 11740 <__assert_fail@plt+0x6dc>
   110d0:	mov	r0, r4
   110d4:	bl	10d94 <strcmp@plt>
   110d8:	cmp	r0, #0
   110dc:	beq	116a0 <__assert_fail@plt+0x63c>
   110e0:	mov	r0, r4
   110e4:	ldr	r1, [pc, #1624]	; 11744 <__assert_fail@plt+0x6e0>
   110e8:	bl	10d94 <strcmp@plt>
   110ec:	subs	r4, r0, #0
   110f0:	beq	1124c <__assert_fail@plt+0x1e8>
   110f4:	ldr	r6, [pc, #1612]	; 11748 <__assert_fail@plt+0x6e4>
   110f8:	ldr	r0, [pc, #1612]	; 1174c <__assert_fail@plt+0x6e8>
   110fc:	bl	10e6c <getenv@plt>
   11100:	ldr	r2, [r6]
   11104:	ands	r2, r2, #2
   11108:	bne	11148 <__assert_fail@plt+0xe4>
   1110c:	cmp	r0, #0
   11110:	streq	r0, [r6]
   11114:	beq	11154 <__assert_fail@plt+0xf0>
   11118:	add	r1, sp, #24
   1111c:	bl	10ee4 <strtoul@plt>
   11120:	mov	r4, r0
   11124:	ldr	r0, [sp, #24]
   11128:	cmp	r0, #0
   1112c:	beq	11144 <__assert_fail@plt+0xe0>
   11130:	ldr	r1, [pc, #1560]	; 11750 <__assert_fail@plt+0x6ec>
   11134:	bl	10d94 <strcmp@plt>
   11138:	ldr	r3, [pc, #1556]	; 11754 <__assert_fail@plt+0x6f0>
   1113c:	cmp	r0, #0
   11140:	moveq	r4, r3
   11144:	str	r4, [r6]
   11148:	ldr	r4, [r6]
   1114c:	cmp	r4, #0
   11150:	bne	11640 <__assert_fail@plt+0x5dc>
   11154:	ldr	r3, [r6]
   11158:	add	r0, sp, #20
   1115c:	orr	r3, r3, #2
   11160:	ldr	r2, [pc, #1520]	; 11758 <__assert_fail@plt+0x6f4>
   11164:	mov	r1, #2
   11168:	str	r3, [r6]
   1116c:	bl	12994 <__assert_fail@plt+0x1930>
   11170:	add	r1, sp, #20
   11174:	mov	r2, #2
   11178:	ldr	r0, [pc, #1500]	; 1175c <__assert_fail@plt+0x6f8>
   1117c:	bl	1253c <__assert_fail@plt+0x14d8>
   11180:	add	r0, sp, #20
   11184:	ldr	r2, [pc, #1492]	; 11760 <__assert_fail@plt+0x6fc>
   11188:	mov	r1, #4
   1118c:	bl	12994 <__assert_fail@plt+0x1930>
   11190:	add	r1, sp, #20
   11194:	mov	r2, #4
   11198:	ldr	r0, [pc, #1476]	; 11764 <__assert_fail@plt+0x700>
   1119c:	bl	1253c <__assert_fail@plt+0x14d8>
   111a0:	ldr	r2, [pc, #1472]	; 11768 <__assert_fail@plt+0x704>
   111a4:	add	r0, sp, #20
   111a8:	mov	r1, #8
   111ac:	bl	12994 <__assert_fail@plt+0x1930>
   111b0:	mov	r8, #0
   111b4:	mov	r3, #1
   111b8:	mov	r2, #14
   111bc:	str	fp, [sp, #12]
   111c0:	mov	r5, r3
   111c4:	mov	sl, r8
   111c8:	mov	fp, r2
   111cc:	str	r3, [sp, #24]
   111d0:	ldr	r3, [r6]
   111d4:	ldr	r2, [sp, #12]
   111d8:	tst	r3, #16
   111dc:	ldr	r7, [r2, r5, lsl #2]
   111e0:	bne	115fc <__assert_fail@plt+0x598>
   111e4:	ldrsb	r3, [r7]
   111e8:	cmp	r3, #45	; 0x2d
   111ec:	beq	11278 <__assert_fail@plt+0x214>
   111f0:	mov	r0, r7
   111f4:	mov	r2, fp
   111f8:	ldr	r1, [sp, #20]
   111fc:	bl	12010 <__assert_fail@plt+0xfac>
   11200:	ldr	r3, [sp, #24]
   11204:	mov	sl, #1
   11208:	add	r5, r3, #1
   1120c:	ldr	r3, [sp, #8]
   11210:	str	r5, [sp, #24]
   11214:	cmp	r5, r3
   11218:	blt	111d0 <__assert_fail@plt+0x16c>
   1121c:	add	r0, sp, #20
   11220:	mov	r1, #14
   11224:	bl	119bc <__assert_fail@plt+0x958>
   11228:	cmp	r8, #0
   1122c:	beq	11514 <__assert_fail@plt+0x4b0>
   11230:	ldr	r1, [pc, #1332]	; 1176c <__assert_fail@plt+0x708>
   11234:	mov	r2, #5
   11238:	mov	r0, #0
   1123c:	bl	10de8 <dcgettext@plt>
   11240:	mov	r1, r0
   11244:	mov	r0, #1
   11248:	bl	10fb0 <errx@plt>
   1124c:	mov	r2, #5
   11250:	ldr	r1, [pc, #1304]	; 11770 <__assert_fail@plt+0x70c>
   11254:	bl	10de8 <dcgettext@plt>
   11258:	ldr	r2, [pc, #1300]	; 11774 <__assert_fail@plt+0x710>
   1125c:	ldr	r3, [pc, #1300]	; 11778 <__assert_fail@plt+0x714>
   11260:	ldr	r2, [r2]
   11264:	mov	r1, r0
   11268:	mov	r0, #1
   1126c:	bl	10f68 <__printf_chk@plt>
   11270:	mov	r0, r4
   11274:	bl	10ed8 <exit@plt>
   11278:	adds	r4, r7, #1
   1127c:	beq	116f0 <__assert_fail@plt+0x68c>
   11280:	ldrsb	r3, [r7, #1]
   11284:	cmp	r3, #0
   11288:	beq	116f0 <__assert_fail@plt+0x68c>
   1128c:	ldr	r3, [r6]
   11290:	mov	r7, r4
   11294:	tst	r3, #16
   11298:	bne	113c0 <__assert_fail@plt+0x35c>
   1129c:	ldrsb	r3, [r7]
   112a0:	add	r4, r4, #1
   112a4:	sub	r3, r3, #66	; 0x42
   112a8:	cmp	r3, #51	; 0x33
   112ac:	ldrls	pc, [pc, r3, lsl #2]
   112b0:	b	116a4 <__assert_fail@plt+0x640>
   112b4:			; <UNDEFINED> instruction: 0x000115b0
   112b8:	andeq	r1, r1, r4, lsr #13
   112bc:	andeq	r1, r1, r4, lsr #13
   112c0:	andeq	r1, r1, r4, lsr #13
   112c4:	andeq	r1, r1, r4, lsr #13
   112c8:	andeq	r1, r1, r4, lsr #13
   112cc:	andeq	r1, r1, r4, lsr #13
   112d0:	andeq	r1, r1, r4, lsr #13
   112d4:	andeq	r1, r1, r4, lsr #13
   112d8:	andeq	r1, r1, r4, lsr #13
   112dc:	andeq	r1, r1, r4, lsr #13
   112e0:	andeq	r1, r1, r4, lsl #11
   112e4:	andeq	r1, r1, r4, lsr #13
   112e8:	andeq	r1, r1, r4, lsr #13
   112ec:	andeq	r1, r1, r4, lsr #13
   112f0:	andeq	r1, r1, r4, lsr #13
   112f4:	andeq	r1, r1, r4, lsr #13
   112f8:	andeq	r1, r1, r4, lsr r5
   112fc:	andeq	r1, r1, r4, lsr #13
   11300:	andeq	r1, r1, r4, lsr #13
   11304:	andeq	r1, r1, ip, ror #9
   11308:	andeq	r1, r1, r4, lsr #13
   1130c:	andeq	r1, r1, r4, lsr #13
   11310:	andeq	r1, r1, r4, lsr #13
   11314:	andeq	r1, r1, r4, lsr #13
   11318:	andeq	r1, r1, r4, lsr #13
   1131c:	andeq	r1, r1, r4, lsr #13
   11320:	andeq	r1, r1, r4, lsr #13
   11324:	andeq	r1, r1, r4, lsr #13
   11328:	andeq	r1, r1, r4, lsr #13
   1132c:	andeq	r1, r1, r4, lsr #13
   11330:	andeq	r1, r1, r4, lsr #13
   11334:			; <UNDEFINED> instruction: 0x000114b8
   11338:	andeq	r1, r1, r4, lsr #13
   1133c:	andeq	r1, r1, r4, lsr #13
   11340:	andeq	r1, r1, r4, lsr #13
   11344:	andeq	r1, r1, r4, ror #9
   11348:	andeq	r1, r1, r4, lsr #13
   1134c:	andeq	r1, r1, r0, lsr #13
   11350:	andeq	r1, r1, r4, lsr #13
   11354:	andeq	r1, r1, r4, lsr #13
   11358:	andeq	r1, r1, r4, lsr #13
   1135c:	andeq	r1, r1, r8, asr r4
   11360:	andeq	r1, r1, ip, lsr #8
   11364:	andeq	r1, r1, r4, lsr #13
   11368:	andeq	r1, r1, r4, lsr #13
   1136c:	andeq	r1, r1, r4, lsr #13
   11370:	andeq	r1, r1, r4, lsr #13
   11374:	andeq	r1, r1, r4, lsr #13
   11378:	andeq	r1, r1, r0, lsl #8
   1137c:	andeq	r1, r1, r4, lsr #13
   11380:	andeq	r1, r1, r4, lsl #7
   11384:	mov	r8, #0
   11388:	mov	r3, #1
   1138c:	strb	r3, [r6, #4]
   11390:	ldr	r3, [sp, #24]
   11394:	cmp	r3, r5
   11398:	bgt	11208 <__assert_fail@plt+0x1a4>
   1139c:	cmp	r4, #0
   113a0:	beq	11208 <__assert_fail@plt+0x1a4>
   113a4:	ldrsb	r2, [r4]
   113a8:	cmp	r2, #0
   113ac:	beq	11208 <__assert_fail@plt+0x1a4>
   113b0:	ldr	r3, [r6]
   113b4:	mov	r7, r4
   113b8:	tst	r3, #16
   113bc:	beq	1129c <__assert_fail@plt+0x238>
   113c0:	ldr	r3, [pc, #948]	; 1177c <__assert_fail@plt+0x718>
   113c4:	ldr	r9, [r3]
   113c8:	bl	10ecc <getpid@plt>
   113cc:	ldr	r3, [pc, #940]	; 11780 <__assert_fail@plt+0x71c>
   113d0:	ldr	r2, [pc, #940]	; 11784 <__assert_fail@plt+0x720>
   113d4:	str	r3, [sp, #4]
   113d8:	ldr	r3, [pc, #936]	; 11788 <__assert_fail@plt+0x724>
   113dc:	mov	r1, #1
   113e0:	str	r3, [sp]
   113e4:	mov	r3, r0
   113e8:	mov	r0, r9
   113ec:	bl	10f74 <__fprintf_chk@plt>
   113f0:	mov	r1, r4
   113f4:	ldr	r0, [pc, #912]	; 1178c <__assert_fail@plt+0x728>
   113f8:	bl	118a0 <__assert_fail@plt+0x83c>
   113fc:	b	1129c <__assert_fail@plt+0x238>
   11400:	eor	sl, sl, #1
   11404:	cmp	fp, #14
   11408:	moveq	sl, #0
   1140c:	andne	sl, sl, #1
   11410:	cmp	sl, #0
   11414:	movne	sl, #0
   11418:	orrne	fp, fp, #8
   1141c:	movne	r8, sl
   11420:	moveq	r8, sl
   11424:	moveq	fp, #8
   11428:	b	11390 <__assert_fail@plt+0x32c>
   1142c:	eor	sl, sl, #1
   11430:	cmp	fp, #14
   11434:	moveq	sl, #0
   11438:	andne	sl, sl, #1
   1143c:	cmp	sl, #0
   11440:	movne	sl, #0
   11444:	orrne	fp, fp, #4
   11448:	movne	r8, sl
   1144c:	moveq	r8, sl
   11450:	moveq	fp, #4
   11454:	b	11390 <__assert_fail@plt+0x32c>
   11458:	ldr	r7, [sp, #20]
   1145c:	cmp	r7, #0
   11460:	beq	11390 <__assert_fail@plt+0x32c>
   11464:	ldr	r9, [pc, #804]	; 11790 <__assert_fail@plt+0x72c>
   11468:	b	1148c <__assert_fail@plt+0x428>
   1146c:	mov	r1, r9
   11470:	mov	r0, #1
   11474:	bl	10f68 <__printf_chk@plt>
   11478:	ldr	r0, [r7, #24]
   1147c:	bl	10e78 <puts@plt>
   11480:	ldr	r7, [r7, #28]
   11484:	cmp	r7, #0
   11488:	beq	11390 <__assert_fail@plt+0x32c>
   1148c:	ldr	r3, [r7, #24]
   11490:	cmp	r3, #0
   11494:	beq	11480 <__assert_fail@plt+0x41c>
   11498:	ldr	r3, [r7]
   1149c:	cmp	r3, #4
   114a0:	beq	115dc <__assert_fail@plt+0x578>
   114a4:	cmp	r3, #8
   114a8:	beq	1146c <__assert_fail@plt+0x408>
   114ac:	cmp	r3, #2
   114b0:	beq	115ec <__assert_fail@plt+0x588>
   114b4:	bl	11034 <abort@plt>
   114b8:	eor	sl, sl, #1
   114bc:	cmp	fp, #14
   114c0:	moveq	sl, #0
   114c4:	andne	sl, sl, #1
   114c8:	cmp	sl, #0
   114cc:	movne	sl, #0
   114d0:	orrne	fp, fp, #2
   114d4:	movne	r8, sl
   114d8:	moveq	r8, sl
   114dc:	moveq	fp, #2
   114e0:	b	11390 <__assert_fail@plt+0x32c>
   114e4:	mov	r8, #0
   114e8:	b	11390 <__assert_fail@plt+0x32c>
   114ec:	mov	r2, #5
   114f0:	ldr	r1, [pc, #632]	; 11770 <__assert_fail@plt+0x70c>
   114f4:	mov	r0, #0
   114f8:	bl	10de8 <dcgettext@plt>
   114fc:	ldr	r2, [pc, #624]	; 11774 <__assert_fail@plt+0x710>
   11500:	ldr	r3, [pc, #624]	; 11778 <__assert_fail@plt+0x714>
   11504:	ldr	r2, [r2]
   11508:	mov	r1, r0
   1150c:	mov	r0, #1
   11510:	bl	10f68 <__printf_chk@plt>
   11514:	ldr	r3, [pc, #528]	; 1172c <__assert_fail@plt+0x6c8>
   11518:	ldr	r2, [sp, #28]
   1151c:	mov	r0, #0
   11520:	ldr	r3, [r3]
   11524:	cmp	r2, r3
   11528:	bne	11728 <__assert_fail@plt+0x6c4>
   1152c:	add	sp, sp, #36	; 0x24
   11530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11534:	ldrsb	r3, [r4]
   11538:	cmp	r3, #0
   1153c:	bne	116a4 <__assert_fail@plt+0x640>
   11540:	ldr	r3, [sp, #24]
   11544:	mov	r1, #8
   11548:	add	r3, r3, #1
   1154c:	add	r0, sp, #20
   11550:	str	r3, [sp, #24]
   11554:	bl	119bc <__assert_fail@plt+0x958>
   11558:	mov	r3, #8
   1155c:	str	r3, [sp]
   11560:	add	r1, sp, #24
   11564:	ldrd	r2, [sp, #8]
   11568:	add	r0, sp, #20
   1156c:	bl	12688 <__assert_fail@plt+0x1624>
   11570:	ldr	r3, [sp, #24]
   11574:	cmp	r3, r5
   11578:	bgt	116f8 <__assert_fail@plt+0x694>
   1157c:	mov	r8, #1
   11580:	b	113a4 <__assert_fail@plt+0x340>
   11584:	ldrsb	r3, [r4]
   11588:	cmp	r3, #0
   1158c:	bne	116a4 <__assert_fail@plt+0x640>
   11590:	ldr	r3, [sp, #24]
   11594:	mov	r1, #4
   11598:	add	r3, r3, #1
   1159c:	add	r0, sp, #20
   115a0:	str	r3, [sp, #24]
   115a4:	bl	119bc <__assert_fail@plt+0x958>
   115a8:	mov	r3, #4
   115ac:	b	1155c <__assert_fail@plt+0x4f8>
   115b0:	ldrsb	r3, [r4]
   115b4:	cmp	r3, #0
   115b8:	bne	116a4 <__assert_fail@plt+0x640>
   115bc:	ldr	r3, [sp, #24]
   115c0:	mov	r1, #2
   115c4:	add	r3, r3, #1
   115c8:	add	r0, sp, #20
   115cc:	str	r3, [sp, #24]
   115d0:	bl	119bc <__assert_fail@plt+0x958>
   115d4:	mov	r3, #2
   115d8:	b	1155c <__assert_fail@plt+0x4f8>
   115dc:	ldr	r1, [pc, #432]	; 11794 <__assert_fail@plt+0x730>
   115e0:	mov	r0, #1
   115e4:	bl	10f68 <__printf_chk@plt>
   115e8:	b	11478 <__assert_fail@plt+0x414>
   115ec:	ldr	r1, [pc, #420]	; 11798 <__assert_fail@plt+0x734>
   115f0:	mov	r0, #1
   115f4:	bl	10f68 <__printf_chk@plt>
   115f8:	b	11478 <__assert_fail@plt+0x414>
   115fc:	ldr	r3, [pc, #376]	; 1177c <__assert_fail@plt+0x718>
   11600:	ldr	r4, [r3]
   11604:	bl	10ecc <getpid@plt>
   11608:	ldr	r3, [pc, #376]	; 11788 <__assert_fail@plt+0x724>
   1160c:	ldr	r2, [pc, #364]	; 11780 <__assert_fail@plt+0x71c>
   11610:	str	r3, [sp]
   11614:	str	r2, [sp, #4]
   11618:	mov	r1, #1
   1161c:	ldr	r2, [pc, #352]	; 11784 <__assert_fail@plt+0x720>
   11620:	mov	r3, r0
   11624:	mov	r0, r4
   11628:	bl	10f74 <__fprintf_chk@plt>
   1162c:	mov	r2, r7
   11630:	ldr	r1, [sp, #24]
   11634:	ldr	r0, [pc, #352]	; 1179c <__assert_fail@plt+0x738>
   11638:	bl	118a0 <__assert_fail@plt+0x83c>
   1163c:	b	111e4 <__assert_fail@plt+0x180>
   11640:	bl	10da0 <getuid@plt>
   11644:	mov	r5, r0
   11648:	bl	10e24 <geteuid@plt>
   1164c:	cmp	r5, r0
   11650:	beq	11688 <__assert_fail@plt+0x624>
   11654:	ldr	r3, [pc, #288]	; 1177c <__assert_fail@plt+0x718>
   11658:	orr	r4, r4, #16777216	; 0x1000000
   1165c:	str	r4, [r6]
   11660:	ldr	r4, [r3]
   11664:	bl	10ecc <getpid@plt>
   11668:	ldr	r3, [pc, #280]	; 11788 <__assert_fail@plt+0x724>
   1166c:	ldr	r2, [pc, #300]	; 117a0 <__assert_fail@plt+0x73c>
   11670:	str	r3, [sp]
   11674:	mov	r1, #1
   11678:	mov	r3, r0
   1167c:	mov	r0, r4
   11680:	bl	10f74 <__fprintf_chk@plt>
   11684:	b	11154 <__assert_fail@plt+0xf0>
   11688:	bl	10f50 <getgid@plt>
   1168c:	mov	r5, r0
   11690:	bl	10e3c <getegid@plt>
   11694:	cmp	r5, r0
   11698:	bne	11654 <__assert_fail@plt+0x5f0>
   1169c:	b	11154 <__assert_fail@plt+0xf0>
   116a0:	bl	11d68 <__assert_fail@plt+0xd04>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #244]	; 117a4 <__assert_fail@plt+0x740>
   116ac:	mov	r0, #0
   116b0:	bl	10de8 <dcgettext@plt>
   116b4:	bl	10f08 <warnx@plt>
   116b8:	ldr	r3, [pc, #188]	; 1177c <__assert_fail@plt+0x718>
   116bc:	ldr	r1, [pc, #228]	; 117a8 <__assert_fail@plt+0x744>
   116c0:	mov	r2, #5
   116c4:	mov	r0, #0
   116c8:	ldr	r4, [r3]
   116cc:	bl	10de8 <dcgettext@plt>
   116d0:	ldr	r3, [pc, #156]	; 11774 <__assert_fail@plt+0x710>
   116d4:	mov	r1, #1
   116d8:	ldr	r3, [r3]
   116dc:	mov	r2, r0
   116e0:	mov	r0, r4
   116e4:	bl	10f74 <__fprintf_chk@plt>
   116e8:	mov	r0, #1
   116ec:	bl	10ed8 <exit@plt>
   116f0:	ldr	r3, [sp, #24]
   116f4:	b	11208 <__assert_fail@plt+0x1a4>
   116f8:	mov	r8, #1
   116fc:	b	11208 <__assert_fail@plt+0x1a4>
   11700:	mov	r2, #5
   11704:	ldr	r1, [pc, #160]	; 117ac <__assert_fail@plt+0x748>
   11708:	mov	r0, r4
   1170c:	bl	10de8 <dcgettext@plt>
   11710:	bl	10f08 <warnx@plt>
   11714:	ldr	r3, [pc, #96]	; 1177c <__assert_fail@plt+0x718>
   11718:	mov	r0, r4
   1171c:	mov	r2, #5
   11720:	ldr	r1, [pc, #128]	; 117a8 <__assert_fail@plt+0x744>
   11724:	b	116c8 <__assert_fail@plt+0x664>
   11728:	bl	10e00 <__stack_chk_fail@plt>
   1172c:	strdeq	r3, [r2], -r0
   11730:	andeq	r3, r1, ip, ror r7
   11734:	muleq	r1, ip, r6
   11738:			; <UNDEFINED> instruction: 0x000136b0
   1173c:	andeq	r2, r1, r8, ror sl
   11740:	strdeq	r3, [r1], -ip
   11744:	andeq	r3, r1, r4, lsl #14
   11748:	andeq	r4, r2, ip, lsl r1
   1174c:	andeq	r3, r1, r0, lsr r7
   11750:	andeq	r3, r1, r0, asr #14
   11754:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11758:	andeq	r4, r2, r8
   1175c:	andeq	r3, r1, r0, lsl #15
   11760:	andeq	r4, r2, r8, asr #1
   11764:	andeq	r3, r1, r8, lsl #15
   11768:	andeq	r4, r2, r8, ror #1
   1176c:	andeq	r3, r1, r0, asr #15
   11770:	andeq	r3, r1, r0, lsl r7
   11774:	andeq	r4, r2, r8, lsl #2
   11778:	andeq	r3, r1, ip, lsl r7
   1177c:	andeq	r4, r2, r0, lsl r1
   11780:	strdeq	r3, [r1], -r8
   11784:	ldrdeq	r3, [r1], -r0
   11788:	andeq	r3, r1, r8, ror #3
   1178c:	muleq	r1, r0, r7
   11790:			; <UNDEFINED> instruction: 0x000137b8
   11794:			; <UNDEFINED> instruction: 0x000137b0
   11798:	andeq	r3, r1, r8, lsr #15
   1179c:	andeq	r3, r1, r0, lsr r6
   117a0:	andeq	r3, r1, r4, asr #14
   117a4:	muleq	r1, ip, r7
   117a8:	ldrdeq	r3, [r1], -r4
   117ac:			; <UNDEFINED> instruction: 0x000136bc
   117b0:	mov	fp, #0
   117b4:	mov	lr, #0
   117b8:	pop	{r1}		; (ldr r1, [sp], #4)
   117bc:	mov	r2, sp
   117c0:	push	{r2}		; (str r2, [sp, #-4]!)
   117c4:	push	{r0}		; (str r0, [sp, #-4]!)
   117c8:	ldr	ip, [pc, #16]	; 117e0 <__assert_fail@plt+0x77c>
   117cc:	push	{ip}		; (str ip, [sp, #-4]!)
   117d0:	ldr	r0, [pc, #12]	; 117e4 <__assert_fail@plt+0x780>
   117d4:	ldr	r3, [pc, #12]	; 117e8 <__assert_fail@plt+0x784>
   117d8:	bl	10e90 <__libc_start_main@plt>
   117dc:	bl	11034 <abort@plt>
   117e0:	andeq	r3, r1, r4, ror r1
   117e4:	andeq	r1, r1, r0, ror r0
   117e8:	andeq	r3, r1, r4, lsl r1
   117ec:	ldr	r3, [pc, #20]	; 11808 <__assert_fail@plt+0x7a4>
   117f0:	ldr	r2, [pc, #20]	; 1180c <__assert_fail@plt+0x7a8>
   117f4:	add	r3, pc, r3
   117f8:	ldr	r2, [r3, r2]
   117fc:	cmp	r2, #0
   11800:	bxeq	lr
   11804:	b	10ea8 <__gmon_start__@plt>
   11808:	strdeq	r2, [r1], -r8
   1180c:	andeq	r0, r0, r8, lsl #2
   11810:	ldr	r0, [pc, #24]	; 11830 <__assert_fail@plt+0x7cc>
   11814:	ldr	r3, [pc, #24]	; 11834 <__assert_fail@plt+0x7d0>
   11818:	cmp	r3, r0
   1181c:	bxeq	lr
   11820:	ldr	r3, [pc, #16]	; 11838 <__assert_fail@plt+0x7d4>
   11824:	cmp	r3, #0
   11828:	bxeq	lr
   1182c:	bx	r3
   11830:	andeq	r4, r2, r4, lsl #2
   11834:	andeq	r4, r2, r4, lsl #2
   11838:	andeq	r0, r0, r0
   1183c:	ldr	r0, [pc, #36]	; 11868 <__assert_fail@plt+0x804>
   11840:	ldr	r1, [pc, #36]	; 1186c <__assert_fail@plt+0x808>
   11844:	sub	r1, r1, r0
   11848:	asr	r1, r1, #2
   1184c:	add	r1, r1, r1, lsr #31
   11850:	asrs	r1, r1, #1
   11854:	bxeq	lr
   11858:	ldr	r3, [pc, #16]	; 11870 <__assert_fail@plt+0x80c>
   1185c:	cmp	r3, #0
   11860:	bxeq	lr
   11864:	bx	r3
   11868:	andeq	r4, r2, r4, lsl #2
   1186c:	andeq	r4, r2, r4, lsl #2
   11870:	andeq	r0, r0, r0
   11874:	push	{r4, lr}
   11878:	ldr	r4, [pc, #24]	; 11898 <__assert_fail@plt+0x834>
   1187c:	ldrb	r3, [r4]
   11880:	cmp	r3, #0
   11884:	popne	{r4, pc}
   11888:	bl	11810 <__assert_fail@plt+0x7ac>
   1188c:	mov	r3, #1
   11890:	strb	r3, [r4]
   11894:	pop	{r4, pc}
   11898:	andeq	r4, r2, r8, lsl r1
   1189c:	b	1183c <__assert_fail@plt+0x7d8>
   118a0:	push	{r0, r1, r2, r3}
   118a4:	push	{r4, r5, lr}
   118a8:	sub	sp, sp, #12
   118ac:	ldr	r4, [pc, #84]	; 11908 <__assert_fail@plt+0x8a4>
   118b0:	ldr	r5, [pc, #84]	; 1190c <__assert_fail@plt+0x8a8>
   118b4:	add	ip, sp, #28
   118b8:	ldr	r1, [r4]
   118bc:	mov	r3, ip
   118c0:	ldr	r2, [sp, #24]
   118c4:	str	r1, [sp, #4]
   118c8:	ldr	r0, [r5]
   118cc:	mov	r1, #1
   118d0:	str	ip, [sp]
   118d4:	bl	10e9c <__vfprintf_chk@plt>
   118d8:	ldr	r1, [r5]
   118dc:	mov	r0, #10
   118e0:	bl	10fd4 <fputc@plt>
   118e4:	ldr	r2, [sp, #4]
   118e8:	ldr	r3, [r4]
   118ec:	cmp	r2, r3
   118f0:	bne	11904 <__assert_fail@plt+0x8a0>
   118f4:	add	sp, sp, #12
   118f8:	pop	{r4, r5, lr}
   118fc:	add	sp, sp, #16
   11900:	bx	lr
   11904:	bl	10e00 <__stack_chk_fail@plt>
   11908:	strdeq	r3, [r2], -r0
   1190c:	andeq	r4, r2, r0, lsl r1
   11910:	push	{r1, r2, r3}
   11914:	subs	r3, r0, #0
   11918:	push	{r4, r5, r6, lr}
   1191c:	sub	sp, sp, #12
   11920:	ldr	r5, [pc, #132]	; 119ac <__assert_fail@plt+0x948>
   11924:	ldr	r6, [sp, #28]
   11928:	ldreq	r4, [pc, #128]	; 119b0 <__assert_fail@plt+0x94c>
   1192c:	ldr	r2, [r5]
   11930:	str	r2, [sp, #4]
   11934:	beq	1194c <__assert_fail@plt+0x8e8>
   11938:	ldr	r2, [pc, #116]	; 119b4 <__assert_fail@plt+0x950>
   1193c:	ldr	r4, [pc, #108]	; 119b0 <__assert_fail@plt+0x94c>
   11940:	ldr	r2, [r2]
   11944:	tst	r2, #16777216	; 0x1000000
   11948:	beq	11994 <__assert_fail@plt+0x930>
   1194c:	add	ip, sp, #32
   11950:	mov	r2, r6
   11954:	mov	r3, ip
   11958:	mov	r1, #1
   1195c:	ldr	r0, [r4]
   11960:	str	ip, [sp]
   11964:	bl	10e9c <__vfprintf_chk@plt>
   11968:	ldr	r1, [r4]
   1196c:	mov	r0, #10
   11970:	bl	10fd4 <fputc@plt>
   11974:	ldr	r2, [sp, #4]
   11978:	ldr	r3, [r5]
   1197c:	cmp	r2, r3
   11980:	bne	119a8 <__assert_fail@plt+0x944>
   11984:	add	sp, sp, #12
   11988:	pop	{r4, r5, r6, lr}
   1198c:	add	sp, sp, #12
   11990:	bx	lr
   11994:	ldr	r2, [pc, #28]	; 119b8 <__assert_fail@plt+0x954>
   11998:	ldr	r0, [r4]
   1199c:	mov	r1, #1
   119a0:	bl	10f74 <__fprintf_chk@plt>
   119a4:	b	1194c <__assert_fail@plt+0x8e8>
   119a8:	bl	10e00 <__stack_chk_fail@plt>
   119ac:	strdeq	r3, [r2], -r0
   119b0:	andeq	r4, r2, r0, lsl r1
   119b4:	andeq	r4, r2, ip, lsl r1
   119b8:	andeq	r3, r1, r8, asr #3
   119bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119c0:	mov	r3, #0
   119c4:	ldr	r8, [pc, #276]	; 11ae0 <__assert_fail@plt+0xa7c>
   119c8:	ldr	r4, [r0]
   119cc:	sub	sp, sp, #12
   119d0:	ldr	r2, [r8]
   119d4:	mov	r9, r0
   119d8:	tst	r2, #128	; 0x80
   119dc:	mov	r7, r1
   119e0:	str	r3, [r0]
   119e4:	bne	11aa0 <__assert_fail@plt+0xa3c>
   119e8:	cmp	r4, #0
   119ec:	beq	11a58 <__assert_fail@plt+0x9f4>
   119f0:	ldr	fp, [pc, #236]	; 11ae4 <__assert_fail@plt+0xa80>
   119f4:	mov	r5, #0
   119f8:	b	11a34 <__assert_fail@plt+0x9d0>
   119fc:	ldr	r3, [r8]
   11a00:	ldr	r6, [r4, #28]
   11a04:	tst	r3, #128	; 0x80
   11a08:	bne	11a60 <__assert_fail@plt+0x9fc>
   11a0c:	ldr	r0, [r4, #24]
   11a10:	bl	10dac <free@plt>
   11a14:	mov	r0, r4
   11a18:	bl	10dac <free@plt>
   11a1c:	cmp	r5, #0
   11a20:	moveq	r4, r6
   11a24:	movne	r4, r6
   11a28:	strne	r6, [r5, #28]
   11a2c:	cmp	r4, #0
   11a30:	beq	11a58 <__assert_fail@plt+0x9f4>
   11a34:	ldr	r3, [r4]
   11a38:	tst	r7, r3
   11a3c:	bne	119fc <__assert_fail@plt+0x998>
   11a40:	cmp	r5, #0
   11a44:	streq	r4, [r9]
   11a48:	mov	r5, r4
   11a4c:	ldr	r4, [r4, #28]
   11a50:	cmp	r4, #0
   11a54:	bne	11a34 <__assert_fail@plt+0x9d0>
   11a58:	add	sp, sp, #12
   11a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a60:	ldr	sl, [fp]
   11a64:	bl	10ecc <getpid@plt>
   11a68:	ldr	r3, [pc, #120]	; 11ae8 <__assert_fail@plt+0xa84>
   11a6c:	ldr	r2, [pc, #120]	; 11aec <__assert_fail@plt+0xa88>
   11a70:	str	r3, [sp, #4]
   11a74:	ldr	r3, [pc, #116]	; 11af0 <__assert_fail@plt+0xa8c>
   11a78:	mov	r1, #1
   11a7c:	str	r3, [sp]
   11a80:	mov	r3, r0
   11a84:	mov	r0, sl
   11a88:	bl	10f74 <__fprintf_chk@plt>
   11a8c:	ldr	r2, [r4, #24]
   11a90:	ldr	r1, [pc, #92]	; 11af4 <__assert_fail@plt+0xa90>
   11a94:	ldr	r0, [r9]
   11a98:	bl	11910 <__assert_fail@plt+0x8ac>
   11a9c:	b	11a0c <__assert_fail@plt+0x9a8>
   11aa0:	ldr	r3, [pc, #60]	; 11ae4 <__assert_fail@plt+0xa80>
   11aa4:	ldr	r5, [r3]
   11aa8:	bl	10ecc <getpid@plt>
   11aac:	ldr	r2, [pc, #52]	; 11ae8 <__assert_fail@plt+0xa84>
   11ab0:	ldr	r3, [pc, #56]	; 11af0 <__assert_fail@plt+0xa8c>
   11ab4:	str	r2, [sp, #4]
   11ab8:	str	r3, [sp]
   11abc:	ldr	r2, [pc, #40]	; 11aec <__assert_fail@plt+0xa88>
   11ac0:	mov	r1, #1
   11ac4:	mov	r3, r0
   11ac8:	mov	r0, r5
   11acc:	bl	10f74 <__fprintf_chk@plt>
   11ad0:	ldr	r1, [pc, #32]	; 11af8 <__assert_fail@plt+0xa94>
   11ad4:	ldr	r0, [r9]
   11ad8:	bl	11910 <__assert_fail@plt+0x8ac>
   11adc:	b	119e8 <__assert_fail@plt+0x984>
   11ae0:	andeq	r4, r2, ip, lsl r1
   11ae4:	andeq	r4, r2, r0, lsl r1
   11ae8:	andeq	r3, r1, r0, ror #3
   11aec:	ldrdeq	r3, [r1], -r0
   11af0:	andeq	r3, r1, r8, ror #3
   11af4:	andeq	r3, r1, r0, lsl #4
   11af8:	strdeq	r3, [r1], -r0
   11afc:	push	{r4, r5, r6, r7, r8, r9, lr}
   11b00:	mov	r7, r0
   11b04:	sub	sp, sp, #12
   11b08:	mov	r0, r1
   11b0c:	mov	r5, r1
   11b10:	bl	10ef0 <strlen@plt>
   11b14:	ldr	r3, [pc, #548]	; 11d40 <__assert_fail@plt+0xcdc>
   11b18:	ldr	r3, [r3]
   11b1c:	tst	r3, #32
   11b20:	mov	r8, r0
   11b24:	bne	11ce0 <__assert_fail@plt+0xc7c>
   11b28:	ldrsb	r4, [r5]
   11b2c:	cmp	r4, #115	; 0x73
   11b30:	beq	11cb8 <__assert_fail@plt+0xc54>
   11b34:	sub	r6, r8, #2
   11b38:	add	r0, r5, r6
   11b3c:	ldr	r1, [pc, #512]	; 11d44 <__assert_fail@plt+0xce0>
   11b40:	bl	10d94 <strcmp@plt>
   11b44:	cmp	r0, #0
   11b48:	bne	11bf0 <__assert_fail@plt+0xb8c>
   11b4c:	mov	r2, r6
   11b50:	ldrsb	r6, [r7]
   11b54:	cmp	r6, #0
   11b58:	beq	11ca0 <__assert_fail@plt+0xc3c>
   11b5c:	cmp	r4, #0
   11b60:	sub	r3, r6, r4
   11b64:	clz	r3, r3
   11b68:	lsr	r3, r3, #5
   11b6c:	moveq	r3, #0
   11b70:	cmp	r3, #0
   11b74:	moveq	r7, r2
   11b78:	beq	11bbc <__assert_fail@plt+0xb58>
   11b7c:	mov	r0, r7
   11b80:	add	r2, r5, r2
   11b84:	add	r3, r5, #1
   11b88:	ldrsb	r6, [r0, #1]!
   11b8c:	mov	r5, r3
   11b90:	sub	r7, r2, r3
   11b94:	cmp	r6, #0
   11b98:	ldrsb	r4, [r3], #1
   11b9c:	beq	11ca4 <__assert_fail@plt+0xc40>
   11ba0:	cmp	r4, #0
   11ba4:	sub	ip, r6, r4
   11ba8:	clz	ip, ip
   11bac:	lsr	ip, ip, #5
   11bb0:	moveq	ip, #0
   11bb4:	cmp	ip, #0
   11bb8:	bne	11b88 <__assert_fail@plt+0xb24>
   11bbc:	bl	10eb4 <__ctype_b_loc@plt>
   11bc0:	ldr	r1, [r0]
   11bc4:	b	11bcc <__assert_fail@plt+0xb68>
   11bc8:	ldrsb	r4, [r5, #1]!
   11bcc:	lsl	r3, r4, #1
   11bd0:	ldrh	r2, [r1, r3]
   11bd4:	ands	r2, r2, #2048	; 0x800
   11bd8:	bne	11bc8 <__assert_fail@plt+0xb64>
   11bdc:	cmp	r6, #0
   11be0:	beq	11c40 <__assert_fail@plt+0xbdc>
   11be4:	mov	r0, #0
   11be8:	add	sp, sp, #12
   11bec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11bf0:	sub	r6, r8, #3
   11bf4:	add	r9, r5, r6
   11bf8:	mov	r0, r9
   11bfc:	ldr	r1, [pc, #324]	; 11d48 <__assert_fail@plt+0xce4>
   11c00:	bl	10d94 <strcmp@plt>
   11c04:	cmp	r0, #0
   11c08:	beq	11b4c <__assert_fail@plt+0xae8>
   11c0c:	mov	r0, r9
   11c10:	ldr	r1, [pc, #308]	; 11d4c <__assert_fail@plt+0xce8>
   11c14:	bl	10d94 <strcmp@plt>
   11c18:	cmp	r0, #0
   11c1c:	beq	11b4c <__assert_fail@plt+0xae8>
   11c20:	sub	r6, r8, #4
   11c24:	add	r0, r5, r6
   11c28:	ldr	r1, [pc, #288]	; 11d50 <__assert_fail@plt+0xcec>
   11c2c:	bl	10d94 <strcmp@plt>
   11c30:	cmp	r0, #0
   11c34:	movne	r2, r8
   11c38:	moveq	r2, r6
   11c3c:	b	11b50 <__assert_fail@plt+0xaec>
   11c40:	cmp	r4, #46	; 0x2e
   11c44:	bne	11be4 <__assert_fail@plt+0xb80>
   11c48:	cmp	r7, #1
   11c4c:	ble	11c94 <__assert_fail@plt+0xc30>
   11c50:	ldrsb	r3, [r5, #1]
   11c54:	cmp	r3, #0
   11c58:	beq	11c94 <__assert_fail@plt+0xc30>
   11c5c:	cmp	r3, #46	; 0x2e
   11c60:	add	r2, r5, #2
   11c64:	movne	r3, r2
   11c68:	addne	r5, r5, r7
   11c6c:	bne	11c8c <__assert_fail@plt+0xc28>
   11c70:	b	11d24 <__assert_fail@plt+0xcc0>
   11c74:	ldrsb	r2, [r3], #1
   11c78:	cmp	r2, #0
   11c7c:	beq	11c94 <__assert_fail@plt+0xc30>
   11c80:	cmp	r2, #46	; 0x2e
   11c84:	mov	r2, r3
   11c88:	beq	11d24 <__assert_fail@plt+0xcc0>
   11c8c:	cmp	r5, r3
   11c90:	bne	11c74 <__assert_fail@plt+0xc10>
   11c94:	mov	r0, #1
   11c98:	add	sp, sp, #12
   11c9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ca0:	mov	r7, r2
   11ca4:	cmp	r4, #0
   11ca8:	movne	r6, #0
   11cac:	bne	11bbc <__assert_fail@plt+0xb58>
   11cb0:	mov	r0, #1
   11cb4:	b	11c98 <__assert_fail@plt+0xc34>
   11cb8:	ldrsb	r3, [r5, #1]
   11cbc:	cmp	r3, #46	; 0x2e
   11cc0:	bne	11b34 <__assert_fail@plt+0xad0>
   11cc4:	add	r1, r5, #2
   11cc8:	mov	r0, r7
   11ccc:	bl	11afc <__assert_fail@plt+0xa98>
   11cd0:	cmp	r0, #0
   11cd4:	ldrsbeq	r4, [r5]
   11cd8:	beq	11b34 <__assert_fail@plt+0xad0>
   11cdc:	b	11c94 <__assert_fail@plt+0xc30>
   11ce0:	ldr	r3, [pc, #108]	; 11d54 <__assert_fail@plt+0xcf0>
   11ce4:	ldr	r4, [r3]
   11ce8:	bl	10ecc <getpid@plt>
   11cec:	ldr	r2, [pc, #100]	; 11d58 <__assert_fail@plt+0xcf4>
   11cf0:	ldr	r3, [pc, #100]	; 11d5c <__assert_fail@plt+0xcf8>
   11cf4:	str	r2, [sp, #4]
   11cf8:	str	r3, [sp]
   11cfc:	ldr	r2, [pc, #92]	; 11d60 <__assert_fail@plt+0xcfc>
   11d00:	mov	r1, #1
   11d04:	mov	r3, r0
   11d08:	mov	r0, r4
   11d0c:	bl	10f74 <__fprintf_chk@plt>
   11d10:	mov	r2, r5
   11d14:	mov	r1, r7
   11d18:	ldr	r0, [pc, #68]	; 11d64 <__assert_fail@plt+0xd00>
   11d1c:	bl	118a0 <__assert_fail@plt+0x83c>
   11d20:	b	11b28 <__assert_fail@plt+0xac4>
   11d24:	ldrsb	r3, [r2]
   11d28:	cmp	r3, #67	; 0x43
   11d2c:	bne	11be4 <__assert_fail@plt+0xb80>
   11d30:	ldrsb	r3, [r2, #1]
   11d34:	cmp	r3, #0
   11d38:	beq	11c94 <__assert_fail@plt+0xc30>
   11d3c:	b	11be4 <__assert_fail@plt+0xb80>
   11d40:	andeq	r4, r2, ip, lsl r1
   11d44:	andeq	r3, r1, ip, lsr #4
   11d48:	andeq	r3, r1, r0, lsr r2
   11d4c:	andeq	r3, r1, r4, lsr r2
   11d50:	andeq	r3, r1, r8, lsr r2
   11d54:	andeq	r4, r2, r0, lsl r1
   11d58:	andeq	r3, r1, ip, lsl #4
   11d5c:	andeq	r3, r1, r8, ror #3
   11d60:	ldrdeq	r3, [r1], -r0
   11d64:	andeq	r3, r1, r4, lsl r2
   11d68:	ldr	r3, [pc, #468]	; 11f44 <__assert_fail@plt+0xee0>
   11d6c:	push	{lr}		; (str lr, [sp, #-4]!)
   11d70:	mov	r2, #5
   11d74:	ldr	r4, [r3]
   11d78:	sub	sp, sp, #12
   11d7c:	ldr	r1, [pc, #452]	; 11f48 <__assert_fail@plt+0xee4>
   11d80:	mov	r0, #0
   11d84:	bl	10de8 <dcgettext@plt>
   11d88:	mov	r1, r4
   11d8c:	bl	1101c <fputs@plt>
   11d90:	mov	r2, #5
   11d94:	ldr	r1, [pc, #432]	; 11f4c <__assert_fail@plt+0xee8>
   11d98:	mov	r0, #0
   11d9c:	bl	10de8 <dcgettext@plt>
   11da0:	ldr	r3, [pc, #424]	; 11f50 <__assert_fail@plt+0xeec>
   11da4:	mov	r1, #1
   11da8:	ldr	r3, [r3]
   11dac:	mov	r2, r0
   11db0:	mov	r0, r4
   11db4:	bl	10f74 <__fprintf_chk@plt>
   11db8:	mov	r1, r4
   11dbc:	mov	r0, #10
   11dc0:	bl	10fd4 <fputc@plt>
   11dc4:	mov	r2, #5
   11dc8:	ldr	r1, [pc, #388]	; 11f54 <__assert_fail@plt+0xef0>
   11dcc:	mov	r0, #0
   11dd0:	bl	10de8 <dcgettext@plt>
   11dd4:	mov	r1, r4
   11dd8:	bl	1101c <fputs@plt>
   11ddc:	mov	r2, #5
   11de0:	ldr	r1, [pc, #368]	; 11f58 <__assert_fail@plt+0xef4>
   11de4:	mov	r0, #0
   11de8:	bl	10de8 <dcgettext@plt>
   11dec:	mov	r1, r4
   11df0:	bl	1101c <fputs@plt>
   11df4:	mov	r2, #5
   11df8:	ldr	r1, [pc, #348]	; 11f5c <__assert_fail@plt+0xef8>
   11dfc:	mov	r0, #0
   11e00:	bl	10de8 <dcgettext@plt>
   11e04:	mov	r1, r4
   11e08:	bl	1101c <fputs@plt>
   11e0c:	mov	r2, #5
   11e10:	ldr	r1, [pc, #328]	; 11f60 <__assert_fail@plt+0xefc>
   11e14:	mov	r0, #0
   11e18:	bl	10de8 <dcgettext@plt>
   11e1c:	mov	r1, r4
   11e20:	bl	1101c <fputs@plt>
   11e24:	mov	r2, #5
   11e28:	ldr	r1, [pc, #308]	; 11f64 <__assert_fail@plt+0xf00>
   11e2c:	mov	r0, #0
   11e30:	bl	10de8 <dcgettext@plt>
   11e34:	mov	r1, r4
   11e38:	bl	1101c <fputs@plt>
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #288]	; 11f68 <__assert_fail@plt+0xf04>
   11e44:	mov	r0, #0
   11e48:	bl	10de8 <dcgettext@plt>
   11e4c:	mov	r1, r4
   11e50:	bl	1101c <fputs@plt>
   11e54:	mov	r2, #5
   11e58:	ldr	r1, [pc, #268]	; 11f6c <__assert_fail@plt+0xf08>
   11e5c:	mov	r0, #0
   11e60:	bl	10de8 <dcgettext@plt>
   11e64:	mov	r1, r4
   11e68:	bl	1101c <fputs@plt>
   11e6c:	mov	r2, #5
   11e70:	ldr	r1, [pc, #248]	; 11f70 <__assert_fail@plt+0xf0c>
   11e74:	mov	r0, #0
   11e78:	bl	10de8 <dcgettext@plt>
   11e7c:	mov	r1, r4
   11e80:	bl	1101c <fputs@plt>
   11e84:	mov	r2, #5
   11e88:	ldr	r1, [pc, #228]	; 11f74 <__assert_fail@plt+0xf10>
   11e8c:	mov	r0, #0
   11e90:	bl	10de8 <dcgettext@plt>
   11e94:	mov	r1, r4
   11e98:	bl	1101c <fputs@plt>
   11e9c:	mov	r2, #5
   11ea0:	ldr	r1, [pc, #208]	; 11f78 <__assert_fail@plt+0xf14>
   11ea4:	mov	r0, #0
   11ea8:	bl	10de8 <dcgettext@plt>
   11eac:	mov	r1, r4
   11eb0:	bl	1101c <fputs@plt>
   11eb4:	mov	r2, #5
   11eb8:	ldr	r1, [pc, #188]	; 11f7c <__assert_fail@plt+0xf18>
   11ebc:	mov	r0, #0
   11ec0:	bl	10de8 <dcgettext@plt>
   11ec4:	mov	r1, r4
   11ec8:	bl	1101c <fputs@plt>
   11ecc:	mov	r1, r4
   11ed0:	mov	r0, #10
   11ed4:	bl	10fd4 <fputc@plt>
   11ed8:	mov	r2, #5
   11edc:	ldr	r1, [pc, #156]	; 11f80 <__assert_fail@plt+0xf1c>
   11ee0:	mov	r0, #0
   11ee4:	bl	10de8 <dcgettext@plt>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #144]	; 11f84 <__assert_fail@plt+0xf20>
   11ef0:	mov	r4, r0
   11ef4:	mov	r0, #0
   11ef8:	bl	10de8 <dcgettext@plt>
   11efc:	ldr	r2, [pc, #132]	; 11f88 <__assert_fail@plt+0xf24>
   11f00:	mov	r3, r4
   11f04:	str	r2, [sp]
   11f08:	ldr	r1, [pc, #124]	; 11f8c <__assert_fail@plt+0xf28>
   11f0c:	ldr	r2, [pc, #124]	; 11f90 <__assert_fail@plt+0xf2c>
   11f10:	str	r0, [sp, #4]
   11f14:	mov	r0, #1
   11f18:	bl	10f68 <__printf_chk@plt>
   11f1c:	mov	r2, #5
   11f20:	ldr	r1, [pc, #108]	; 11f94 <__assert_fail@plt+0xf30>
   11f24:	mov	r0, #0
   11f28:	bl	10de8 <dcgettext@plt>
   11f2c:	ldr	r2, [pc, #100]	; 11f98 <__assert_fail@plt+0xf34>
   11f30:	mov	r1, r0
   11f34:	mov	r0, #1
   11f38:	bl	10f68 <__printf_chk@plt>
   11f3c:	mov	r0, #0
   11f40:	bl	10ed8 <exit@plt>
   11f44:	andeq	r4, r2, r4, lsl r1
   11f48:	andeq	r3, r1, r0, asr #4
   11f4c:	andeq	r3, r1, ip, asr #4
   11f50:	andeq	r4, r2, r8, lsl #2
   11f54:	andeq	r3, r1, r8, ror r2
   11f58:			; <UNDEFINED> instruction: 0x000132bc
   11f5c:	andeq	r3, r1, r8, asr #5
   11f60:	strdeq	r3, [r1], -r0
   11f64:	andeq	r3, r1, ip, lsl r3
   11f68:	andeq	r3, r1, ip, asr #6
   11f6c:	andeq	r3, r1, ip, ror r3
   11f70:	andeq	r3, r1, r4, lsr #7
   11f74:	andeq	r3, r1, ip, asr #7
   11f78:	strdeq	r3, [r1], -r8
   11f7c:	andeq	r3, r1, r0, lsr #8
   11f80:	andeq	r3, r1, ip, asr #8
   11f84:	andeq	r3, r1, r0, ror #8
   11f88:	muleq	r1, r0, r4
   11f8c:	andeq	r3, r1, ip, ror r4
   11f90:	andeq	r3, r1, r0, ror r4
   11f94:	andeq	r3, r1, r0, lsr #9
   11f98:			; <UNDEFINED> instruction: 0x000134bc
   11f9c:	push	{r1, r2, r3}
   11fa0:	push	{r4, lr}
   11fa4:	sub	sp, sp, #12
   11fa8:	ldr	r4, [pc, #84]	; 12004 <__assert_fail@plt+0xfa0>
   11fac:	add	ip, sp, #24
   11fb0:	mov	r3, ip
   11fb4:	ldr	r1, [r4]
   11fb8:	ldr	r2, [pc, #72]	; 12008 <__assert_fail@plt+0xfa4>
   11fbc:	str	r1, [sp, #4]
   11fc0:	mov	r1, #1
   11fc4:	str	ip, [sp]
   11fc8:	bl	10f44 <__vasprintf_chk@plt>
   11fcc:	cmp	r0, #0
   11fd0:	blt	11ff4 <__assert_fail@plt+0xf90>
   11fd4:	ldr	r2, [sp, #4]
   11fd8:	ldr	r3, [r4]
   11fdc:	cmp	r2, r3
   11fe0:	bne	12000 <__assert_fail@plt+0xf9c>
   11fe4:	add	sp, sp, #12
   11fe8:	pop	{r4, lr}
   11fec:	add	sp, sp, #12
   11ff0:	bx	lr
   11ff4:	ldr	r1, [pc, #16]	; 1200c <__assert_fail@plt+0xfa8>
   11ff8:	mov	r0, #1
   11ffc:	bl	10e18 <err@plt>
   12000:	bl	10e00 <__stack_chk_fail@plt>
   12004:	strdeq	r3, [r2], -r0
   12008:	andeq	r3, r1, r8, asr #9
   1200c:	ldrdeq	r3, [r1], -r0
   12010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12014:	sub	sp, sp, #4096	; 0x1000
   12018:	ldr	r3, [pc, #704]	; 122e0 <__assert_fail@plt+0x127c>
   1201c:	sub	sp, sp, #20
   12020:	mov	sl, r2
   12024:	add	r2, sp, #4096	; 0x1000
   12028:	ldr	ip, [r3]
   1202c:	add	r2, r2, #12
   12030:	add	r9, sp, #16
   12034:	mov	r3, #0
   12038:	mov	r4, r1
   1203c:	mov	r1, #47	; 0x2f
   12040:	str	ip, [r2]
   12044:	str	r3, [r9, #-8]
   12048:	mov	r5, r0
   1204c:	bl	10fbc <strrchr@plt>
   12050:	ldr	r7, [pc, #652]	; 122e4 <__assert_fail@plt+0x1280>
   12054:	mov	r2, #4096	; 0x1000
   12058:	cmp	r0, #0
   1205c:	addne	r1, r0, #1
   12060:	moveq	r1, r5
   12064:	add	r0, sp, #12
   12068:	bl	10f5c <strncpy@plt>
   1206c:	ldr	r2, [r7]
   12070:	mov	r3, #0
   12074:	tst	r2, #32
   12078:	strb	r3, [r9, #4091]	; 0xffb
   1207c:	bne	12258 <__assert_fail@plt+0x11f4>
   12080:	mov	r1, #46	; 0x2e
   12084:	add	r0, sp, #12
   12088:	bl	10fbc <strrchr@plt>
   1208c:	cmp	r0, #0
   12090:	movne	r3, #0
   12094:	strbne	r3, [r0]
   12098:	ldrsb	r3, [r7, #4]
   1209c:	cmp	r3, #0
   120a0:	beq	122c8 <__assert_fail@plt+0x1264>
   120a4:	cmp	r4, #0
   120a8:	beq	12170 <__assert_fail@plt+0x110c>
   120ac:	mov	r5, #0
   120b0:	ldr	r3, [r4]
   120b4:	tst	sl, r3
   120b8:	beq	12158 <__assert_fail@plt+0x10f4>
   120bc:	ldr	r8, [r4, #24]
   120c0:	cmp	r8, #0
   120c4:	beq	12158 <__assert_fail@plt+0x10f4>
   120c8:	mov	r0, r8
   120cc:	bl	10e60 <opendir@plt>
   120d0:	subs	fp, r0, #0
   120d4:	beq	12158 <__assert_fail@plt+0x10f4>
   120d8:	ldr	r3, [r7]
   120dc:	tst	r3, #32
   120e0:	bne	12214 <__assert_fail@plt+0x11b0>
   120e4:	mov	r0, fp
   120e8:	bl	10fe0 <readdir64@plt>
   120ec:	cmp	r0, #0
   120f0:	beq	12150 <__assert_fail@plt+0x10ec>
   120f4:	add	r6, r0, #19
   120f8:	mov	r1, r6
   120fc:	add	r0, sp, #12
   12100:	bl	11afc <__assert_fail@plt+0xa98>
   12104:	cmp	r0, #0
   12108:	beq	120e4 <__assert_fail@plt+0x1080>
   1210c:	ldrsb	r3, [r7, #4]
   12110:	cmp	r3, #0
   12114:	beq	12128 <__assert_fail@plt+0x10c4>
   12118:	cmp	r5, #0
   1211c:	beq	121fc <__assert_fail@plt+0x1198>
   12120:	cmp	r5, #1
   12124:	beq	121c4 <__assert_fail@plt+0x1160>
   12128:	mov	r3, r6
   1212c:	mov	r2, r8
   12130:	ldr	r1, [pc, #432]	; 122e8 <__assert_fail@plt+0x1284>
   12134:	mov	r0, #1
   12138:	bl	10f68 <__printf_chk@plt>
   1213c:	mov	r0, fp
   12140:	bl	10fe0 <readdir64@plt>
   12144:	add	r5, r5, #1
   12148:	cmp	r0, #0
   1214c:	bne	120f4 <__assert_fail@plt+0x1090>
   12150:	mov	r0, fp
   12154:	bl	1104c <closedir@plt>
   12158:	ldr	r4, [r4, #28]
   1215c:	cmp	r4, #0
   12160:	bne	120b0 <__assert_fail@plt+0x104c>
   12164:	cmp	r5, #1
   12168:	movle	r4, #0
   1216c:	movgt	r4, #1
   12170:	ldr	r0, [r9, #-8]
   12174:	bl	10dac <free@plt>
   12178:	ldrsb	r5, [r7, #4]
   1217c:	cmp	r5, #0
   12180:	moveq	r4, #1
   12184:	cmp	r4, #0
   12188:	beq	1219c <__assert_fail@plt+0x1138>
   1218c:	ldr	r3, [pc, #344]	; 122ec <__assert_fail@plt+0x1288>
   12190:	mov	r0, #10
   12194:	ldr	r1, [r3]
   12198:	bl	10fec <putc@plt>
   1219c:	add	r3, sp, #4096	; 0x1000
   121a0:	add	r3, r3, #12
   121a4:	ldr	r2, [r3]
   121a8:	ldr	r3, [pc, #304]	; 122e0 <__assert_fail@plt+0x127c>
   121ac:	ldr	r3, [r3]
   121b0:	cmp	r2, r3
   121b4:	bne	122dc <__assert_fail@plt+0x1278>
   121b8:	add	sp, sp, #4096	; 0x1000
   121bc:	add	sp, sp, #20
   121c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c4:	ldr	r3, [r9, #-8]
   121c8:	cmp	r3, #0
   121cc:	beq	12128 <__assert_fail@plt+0x10c4>
   121d0:	add	r2, sp, #12
   121d4:	ldr	r1, [pc, #276]	; 122f0 <__assert_fail@plt+0x128c>
   121d8:	str	r6, [sp, #4]
   121dc:	str	r8, [sp]
   121e0:	mov	r0, r5
   121e4:	bl	10f68 <__printf_chk@plt>
   121e8:	ldr	r0, [r9, #-8]
   121ec:	bl	10dac <free@plt>
   121f0:	mov	r3, #0
   121f4:	str	r3, [r9, #-8]
   121f8:	b	1213c <__assert_fail@plt+0x10d8>
   121fc:	mov	r3, r6
   12200:	mov	r2, r8
   12204:	ldr	r1, [pc, #232]	; 122f4 <__assert_fail@plt+0x1290>
   12208:	sub	r0, r9, #8
   1220c:	bl	11f9c <__assert_fail@plt+0xf38>
   12210:	b	1213c <__assert_fail@plt+0x10d8>
   12214:	ldr	r3, [pc, #220]	; 122f8 <__assert_fail@plt+0x1294>
   12218:	ldr	r6, [r3]
   1221c:	bl	10ecc <getpid@plt>
   12220:	ldr	r3, [pc, #212]	; 122fc <__assert_fail@plt+0x1298>
   12224:	ldr	r2, [pc, #212]	; 12300 <__assert_fail@plt+0x129c>
   12228:	str	r3, [sp, #4]
   1222c:	ldr	r3, [pc, #208]	; 12304 <__assert_fail@plt+0x12a0>
   12230:	mov	r1, #1
   12234:	str	r3, [sp]
   12238:	mov	r3, r0
   1223c:	mov	r0, r6
   12240:	bl	10f74 <__fprintf_chk@plt>
   12244:	mov	r2, r8
   12248:	add	r1, sp, #12
   1224c:	ldr	r0, [pc, #180]	; 12308 <__assert_fail@plt+0x12a4>
   12250:	bl	118a0 <__assert_fail@plt+0x83c>
   12254:	b	120e4 <__assert_fail@plt+0x1080>
   12258:	ldr	r3, [pc, #152]	; 122f8 <__assert_fail@plt+0x1294>
   1225c:	ldr	r6, [r3]
   12260:	bl	10ecc <getpid@plt>
   12264:	ldr	r2, [pc, #144]	; 122fc <__assert_fail@plt+0x1298>
   12268:	ldr	r3, [pc, #148]	; 12304 <__assert_fail@plt+0x12a0>
   1226c:	str	r2, [sp, #4]
   12270:	str	r3, [sp]
   12274:	ldr	r2, [pc, #132]	; 12300 <__assert_fail@plt+0x129c>
   12278:	mov	r1, #1
   1227c:	mov	r3, r0
   12280:	mov	r0, r6
   12284:	bl	10f74 <__fprintf_chk@plt>
   12288:	ldr	r2, [pc, #124]	; 1230c <__assert_fail@plt+0x12a8>
   1228c:	tst	sl, #2
   12290:	ldr	r3, [pc, #120]	; 12310 <__assert_fail@plt+0x12ac>
   12294:	moveq	r3, r2
   12298:	tst	sl, #4
   1229c:	ldr	r0, [pc, #112]	; 12314 <__assert_fail@plt+0x12b0>
   122a0:	ldr	r1, [pc, #112]	; 12318 <__assert_fail@plt+0x12b4>
   122a4:	moveq	r0, r2
   122a8:	tst	sl, #8
   122ac:	moveq	r1, r2
   122b0:	mov	r2, r5
   122b4:	strd	r0, [sp]
   122b8:	add	r1, sp, #12
   122bc:	ldr	r0, [pc, #88]	; 1231c <__assert_fail@plt+0x12b8>
   122c0:	bl	118a0 <__assert_fail@plt+0x83c>
   122c4:	b	12080 <__assert_fail@plt+0x101c>
   122c8:	add	r2, sp, #12
   122cc:	ldr	r1, [pc, #76]	; 12320 <__assert_fail@plt+0x12bc>
   122d0:	mov	r0, #1
   122d4:	bl	10f68 <__printf_chk@plt>
   122d8:	b	120a4 <__assert_fail@plt+0x1040>
   122dc:	bl	10e00 <__stack_chk_fail@plt>
   122e0:	strdeq	r3, [r2], -r0
   122e4:	andeq	r4, r2, ip, lsl r1
   122e8:	andeq	r3, r1, r4, asr #10
   122ec:	andeq	r4, r2, r4, lsl r1
   122f0:	andeq	r3, r1, r4, lsr r5
   122f4:	andeq	r3, r1, r8, asr #9
   122f8:	andeq	r4, r2, r0, lsl r1
   122fc:	andeq	r3, r1, ip, lsl #4
   12300:	ldrdeq	r3, [r1], -r0
   12304:	andeq	r3, r1, r8, ror #3
   12308:	andeq	r3, r1, r0, lsr #10
   1230c:	andeq	r3, r1, ip, ror r7
   12310:	andeq	r3, r1, r0, asr sl
   12314:	andeq	r3, r1, r8, ror #9
   12318:	andeq	r3, r1, ip, ror #9
   1231c:	strdeq	r3, [r1], -r0
   12320:	andeq	r3, r1, ip, lsl r5
   12324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12328:	mov	r7, r0
   1232c:	ldr	r4, [pc, #472]	; 1250c <__assert_fail@plt+0x14a8>
   12330:	sub	sp, sp, #124	; 0x7c
   12334:	mov	r8, r1
   12338:	ldr	r3, [r4]
   1233c:	mov	r0, r2
   12340:	mov	r1, #4
   12344:	mov	r5, r2
   12348:	str	r3, [sp, #116]	; 0x74
   1234c:	ldr	r6, [r7]
   12350:	bl	10f80 <access@plt>
   12354:	cmp	r0, #0
   12358:	beq	12374 <__assert_fail@plt+0x1310>
   1235c:	ldr	r2, [sp, #116]	; 0x74
   12360:	ldr	r3, [r4]
   12364:	cmp	r2, r3
   12368:	bne	124f4 <__assert_fail@plt+0x1490>
   1236c:	add	sp, sp, #124	; 0x7c
   12370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12374:	add	r2, sp, #8
   12378:	mov	r1, r5
   1237c:	mov	r0, #3
   12380:	bl	11010 <__xstat64@plt>
   12384:	cmp	r0, #0
   12388:	bne	1235c <__assert_fail@plt+0x12f8>
   1238c:	ldr	r3, [sp, #24]
   12390:	and	r3, r3, #61440	; 0xf000
   12394:	cmp	r3, #16384	; 0x4000
   12398:	bne	1235c <__assert_fail@plt+0x12f8>
   1239c:	cmp	r6, #0
   123a0:	beq	12440 <__assert_fail@plt+0x13dc>
   123a4:	ldrd	r0, [sp, #104]	; 0x68
   123a8:	ldrd	sl, [sp, #8]
   123ac:	b	123c0 <__assert_fail@plt+0x135c>
   123b0:	ldr	r3, [r6, #28]
   123b4:	cmp	r3, #0
   123b8:	beq	12440 <__assert_fail@plt+0x13dc>
   123bc:	mov	r6, r3
   123c0:	ldrd	r2, [r6, #16]
   123c4:	cmp	r3, r1
   123c8:	cmpeq	r2, r0
   123cc:	bne	123b0 <__assert_fail@plt+0x134c>
   123d0:	ldrd	r2, [r6, #8]
   123d4:	cmp	r3, fp
   123d8:	cmpeq	r2, sl
   123dc:	bne	123b0 <__assert_fail@plt+0x134c>
   123e0:	ldr	r3, [r6]
   123e4:	cmp	r3, r8
   123e8:	bne	123b0 <__assert_fail@plt+0x134c>
   123ec:	ldr	r3, [pc, #284]	; 12510 <__assert_fail@plt+0x14ac>
   123f0:	ldr	r3, [r3]
   123f4:	tst	r3, #128	; 0x80
   123f8:	beq	1235c <__assert_fail@plt+0x12f8>
   123fc:	ldr	r3, [pc, #272]	; 12514 <__assert_fail@plt+0x14b0>
   12400:	ldr	r6, [r3]
   12404:	bl	10ecc <getpid@plt>
   12408:	ldr	r2, [pc, #264]	; 12518 <__assert_fail@plt+0x14b4>
   1240c:	ldr	r3, [pc, #264]	; 1251c <__assert_fail@plt+0x14b8>
   12410:	str	r2, [sp, #4]
   12414:	str	r3, [sp]
   12418:	ldr	r2, [pc, #256]	; 12520 <__assert_fail@plt+0x14bc>
   1241c:	mov	r1, #1
   12420:	mov	r3, r0
   12424:	mov	r0, r6
   12428:	bl	10f74 <__fprintf_chk@plt>
   1242c:	mov	r2, r5
   12430:	ldr	r0, [r7]
   12434:	ldr	r1, [pc, #232]	; 12524 <__assert_fail@plt+0x14c0>
   12438:	bl	11910 <__assert_fail@plt+0x8ac>
   1243c:	b	1235c <__assert_fail@plt+0x12f8>
   12440:	mov	r1, #32
   12444:	mov	r0, #1
   12448:	bl	10d88 <calloc@plt>
   1244c:	subs	r9, r0, #0
   12450:	bne	12464 <__assert_fail@plt+0x1400>
   12454:	mov	r2, #32
   12458:	ldr	r1, [pc, #200]	; 12528 <__assert_fail@plt+0x14c4>
   1245c:	mov	r0, #1
   12460:	bl	10e18 <err@plt>
   12464:	ldrd	r2, [sp, #104]	; 0x68
   12468:	ldrd	sl, [sp, #8]
   1246c:	str	r8, [r9]
   12470:	strd	r2, [r9, #16]
   12474:	mov	r0, r5
   12478:	strd	sl, [r9, #8]
   1247c:	bl	12f34 <__assert_fail@plt+0x1ed0>
   12480:	ldr	r3, [r7]
   12484:	cmp	r3, #0
   12488:	streq	r9, [r7]
   1248c:	str	r0, [r9, #24]
   12490:	beq	124a0 <__assert_fail@plt+0x143c>
   12494:	cmp	r6, #0
   12498:	strne	r9, [r6, #28]
   1249c:	beq	124f8 <__assert_fail@plt+0x1494>
   124a0:	ldr	r3, [pc, #104]	; 12510 <__assert_fail@plt+0x14ac>
   124a4:	ldr	r3, [r3]
   124a8:	tst	r3, #128	; 0x80
   124ac:	beq	1235c <__assert_fail@plt+0x12f8>
   124b0:	ldr	r3, [pc, #92]	; 12514 <__assert_fail@plt+0x14b0>
   124b4:	ldr	r5, [r3]
   124b8:	bl	10ecc <getpid@plt>
   124bc:	ldr	r2, [pc, #84]	; 12518 <__assert_fail@plt+0x14b4>
   124c0:	ldr	r3, [pc, #84]	; 1251c <__assert_fail@plt+0x14b8>
   124c4:	str	r2, [sp, #4]
   124c8:	str	r3, [sp]
   124cc:	ldr	r2, [pc, #76]	; 12520 <__assert_fail@plt+0x14bc>
   124d0:	mov	r1, #1
   124d4:	mov	r3, r0
   124d8:	mov	r0, r5
   124dc:	bl	10f74 <__fprintf_chk@plt>
   124e0:	ldr	r2, [r9, #24]
   124e4:	ldr	r0, [r7]
   124e8:	ldr	r1, [pc, #60]	; 1252c <__assert_fail@plt+0x14c8>
   124ec:	bl	11910 <__assert_fail@plt+0x8ac>
   124f0:	b	1235c <__assert_fail@plt+0x12f8>
   124f4:	bl	10e00 <__stack_chk_fail@plt>
   124f8:	ldr	r3, [pc, #48]	; 12530 <__assert_fail@plt+0x14cc>
   124fc:	mov	r2, #252	; 0xfc
   12500:	ldr	r1, [pc, #44]	; 12534 <__assert_fail@plt+0x14d0>
   12504:	ldr	r0, [pc, #44]	; 12538 <__assert_fail@plt+0x14d4>
   12508:	bl	11064 <__assert_fail@plt>
   1250c:	strdeq	r3, [r2], -r0
   12510:	andeq	r4, r2, ip, lsl r1
   12514:	andeq	r4, r2, r0, lsl r1
   12518:	andeq	r3, r1, r0, ror #3
   1251c:	andeq	r3, r1, r8, ror #3
   12520:	ldrdeq	r3, [r1], -r0
   12524:	andeq	r3, r1, ip, asr #10
   12528:	andeq	r3, r1, ip, ror #10
   1252c:	andeq	r3, r1, r8, lsr #11
   12530:	muleq	r1, ip, r1
   12534:	andeq	r3, r1, r8, lsl #11
   12538:	andeq	r3, r1, r0, lsr #11
   1253c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12540:	mov	r4, r1
   12544:	ldr	r7, [pc, #276]	; 12660 <__assert_fail@plt+0x15fc>
   12548:	sub	sp, sp, #20
   1254c:	mov	r3, #0
   12550:	ldr	r1, [r7]
   12554:	mov	r5, r2
   12558:	str	r1, [sp, #12]
   1255c:	str	r3, [sp, #8]
   12560:	bl	10e6c <getenv@plt>
   12564:	subs	r6, r0, #0
   12568:	beq	12638 <__assert_fail@plt+0x15d4>
   1256c:	bl	10df4 <strdup@plt>
   12570:	subs	r8, r0, #0
   12574:	beq	12654 <__assert_fail@plt+0x15f0>
   12578:	ldr	r3, [pc, #228]	; 12664 <__assert_fail@plt+0x1600>
   1257c:	ldr	r3, [r3]
   12580:	tst	r3, #8
   12584:	bne	125e8 <__assert_fail@plt+0x1584>
   12588:	add	r2, sp, #8
   1258c:	ldr	r1, [pc, #212]	; 12668 <__assert_fail@plt+0x1604>
   12590:	mov	r0, r8
   12594:	bl	10e54 <strtok_r@plt>
   12598:	subs	r2, r0, #0
   1259c:	beq	125c8 <__assert_fail@plt+0x1564>
   125a0:	ldr	r6, [pc, #192]	; 12668 <__assert_fail@plt+0x1604>
   125a4:	mov	r1, r5
   125a8:	mov	r0, r4
   125ac:	bl	12324 <__assert_fail@plt+0x12c0>
   125b0:	add	r2, sp, #8
   125b4:	mov	r1, r6
   125b8:	mov	r0, #0
   125bc:	bl	10e54 <strtok_r@plt>
   125c0:	subs	r2, r0, #0
   125c4:	bne	125a4 <__assert_fail@plt+0x1540>
   125c8:	ldr	r2, [sp, #12]
   125cc:	ldr	r3, [r7]
   125d0:	cmp	r2, r3
   125d4:	bne	12650 <__assert_fail@plt+0x15ec>
   125d8:	mov	r0, r8
   125dc:	add	sp, sp, #20
   125e0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   125e4:	b	10dac <free@plt>
   125e8:	ldr	r3, [pc, #124]	; 1266c <__assert_fail@plt+0x1608>
   125ec:	ldr	r9, [r3]
   125f0:	bl	10ecc <getpid@plt>
   125f4:	ldr	r2, [pc, #116]	; 12670 <__assert_fail@plt+0x160c>
   125f8:	ldr	r3, [pc, #116]	; 12674 <__assert_fail@plt+0x1610>
   125fc:	str	r2, [sp, #4]
   12600:	str	r3, [sp]
   12604:	ldr	r2, [pc, #108]	; 12678 <__assert_fail@plt+0x1614>
   12608:	mov	r1, #1
   1260c:	mov	r3, r0
   12610:	mov	r0, r9
   12614:	bl	10f74 <__fprintf_chk@plt>
   12618:	ldr	r2, [pc, #92]	; 1267c <__assert_fail@plt+0x1618>
   1261c:	mov	r3, r6
   12620:	add	r2, r2, r5, lsl #2
   12624:	ldr	r1, [pc, #84]	; 12680 <__assert_fail@plt+0x161c>
   12628:	ldr	r2, [r2, #8]
   1262c:	ldr	r0, [r4]
   12630:	bl	11910 <__assert_fail@plt+0x8ac>
   12634:	b	12588 <__assert_fail@plt+0x1524>
   12638:	ldr	r2, [sp, #12]
   1263c:	ldr	r3, [r7]
   12640:	cmp	r2, r3
   12644:	bne	12650 <__assert_fail@plt+0x15ec>
   12648:	add	sp, sp, #20
   1264c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12650:	bl	10e00 <__stack_chk_fail@plt>
   12654:	ldr	r1, [pc, #40]	; 12684 <__assert_fail@plt+0x1620>
   12658:	mov	r0, #1
   1265c:	bl	10e18 <err@plt>
   12660:	strdeq	r3, [r2], -r0
   12664:	andeq	r4, r2, ip, lsl r1
   12668:	strdeq	r3, [r1], -r4
   1266c:	andeq	r4, r2, r0, lsl r1
   12670:	ldrdeq	r3, [r1], -r0
   12674:	andeq	r3, r1, r8, ror #3
   12678:	ldrdeq	r3, [r1], -r0
   1267c:	muleq	r1, ip, r1
   12680:	ldrdeq	r3, [r1], -r4
   12684:			; <UNDEFINED> instruction: 0x000135b8
   12688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1268c:	mov	r7, r1
   12690:	ldr	sl, [pc, #296]	; 127c0 <__assert_fail@plt+0x175c>
   12694:	sub	sp, sp, #20
   12698:	mov	r8, r0
   1269c:	ldr	r1, [sl]
   126a0:	mov	r9, r2
   126a4:	tst	r1, #16
   126a8:	mov	r6, r3
   126ac:	ldr	fp, [sp, #56]	; 0x38
   126b0:	bne	12770 <__assert_fail@plt+0x170c>
   126b4:	ldr	r4, [r7]
   126b8:	cmp	r4, r9
   126bc:	bge	12768 <__assert_fail@plt+0x1704>
   126c0:	ldr	r3, [r6, r4, lsl #2]
   126c4:	add	r5, r6, r4, lsl #2
   126c8:	ldrsb	r3, [r3]
   126cc:	cmp	r3, #45	; 0x2d
   126d0:	beq	12768 <__assert_fail@plt+0x1704>
   126d4:	sub	r5, r5, #4
   126d8:	b	1270c <__assert_fail@plt+0x16a8>
   126dc:	ldr	r2, [r5, #4]!
   126e0:	mov	r1, fp
   126e4:	mov	r0, r8
   126e8:	bl	12324 <__assert_fail@plt+0x12c0>
   126ec:	str	r4, [r7]
   126f0:	add	r4, r4, #1
   126f4:	cmp	r9, r4
   126f8:	beq	12768 <__assert_fail@plt+0x1704>
   126fc:	ldr	r3, [r6, r4, lsl #2]
   12700:	ldrsb	r3, [r3]
   12704:	cmp	r3, #45	; 0x2d
   12708:	beq	12768 <__assert_fail@plt+0x1704>
   1270c:	ldr	r3, [sl]
   12710:	tst	r3, #16
   12714:	beq	126dc <__assert_fail@plt+0x1678>
   12718:	ldr	r3, [pc, #164]	; 127c4 <__assert_fail@plt+0x1760>
   1271c:	ldr	r3, [r3]
   12720:	str	r3, [sp, #12]
   12724:	bl	10ecc <getpid@plt>
   12728:	ldr	r2, [pc, #152]	; 127c8 <__assert_fail@plt+0x1764>
   1272c:	mov	r1, #1
   12730:	str	r2, [sp, #4]
   12734:	ldr	r2, [pc, #144]	; 127cc <__assert_fail@plt+0x1768>
   12738:	str	r2, [sp]
   1273c:	ldr	r2, [pc, #140]	; 127d0 <__assert_fail@plt+0x176c>
   12740:	mov	r3, r0
   12744:	ldr	r0, [sp, #12]
   12748:	bl	10f74 <__fprintf_chk@plt>
   1274c:	ldr	r3, [r7]
   12750:	ldr	r1, [pc, #124]	; 127d4 <__assert_fail@plt+0x1770>
   12754:	mov	r2, r3
   12758:	ldr	r0, [r8]
   1275c:	ldr	r3, [r6, r3, lsl #2]
   12760:	bl	11910 <__assert_fail@plt+0x8ac>
   12764:	b	126dc <__assert_fail@plt+0x1678>
   12768:	add	sp, sp, #20
   1276c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12770:	ldr	r3, [pc, #76]	; 127c4 <__assert_fail@plt+0x1760>
   12774:	ldr	r4, [r3]
   12778:	bl	10ecc <getpid@plt>
   1277c:	ldr	r2, [pc, #68]	; 127c8 <__assert_fail@plt+0x1764>
   12780:	ldr	r3, [pc, #68]	; 127cc <__assert_fail@plt+0x1768>
   12784:	str	r2, [sp, #4]
   12788:	str	r3, [sp]
   1278c:	ldr	r2, [pc, #60]	; 127d0 <__assert_fail@plt+0x176c>
   12790:	mov	r1, #1
   12794:	mov	r3, r0
   12798:	mov	r0, r4
   1279c:	bl	10f74 <__fprintf_chk@plt>
   127a0:	ldr	r2, [pc, #48]	; 127d8 <__assert_fail@plt+0x1774>
   127a4:	ldr	r3, [r7]
   127a8:	add	r2, r2, fp, lsl #2
   127ac:	ldr	r1, [pc, #40]	; 127dc <__assert_fail@plt+0x1778>
   127b0:	ldr	r2, [r2, #8]
   127b4:	ldr	r0, [r8]
   127b8:	bl	11910 <__assert_fail@plt+0x8ac>
   127bc:	b	126b4 <__assert_fail@plt+0x1650>
   127c0:	andeq	r4, r2, ip, lsl r1
   127c4:	andeq	r4, r2, r0, lsl r1
   127c8:	strdeq	r3, [r1], -r8
   127cc:	andeq	r3, r1, r8, ror #3
   127d0:	ldrdeq	r3, [r1], -r0
   127d4:	andeq	r3, r1, r8, lsr #12
   127d8:	muleq	r1, ip, r1
   127dc:	andeq	r3, r1, r0, lsl #12
   127e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e4:	sub	sp, sp, #4096	; 0x1000
   127e8:	ldr	fp, [pc, #380]	; 1296c <__assert_fail@plt+0x1908>
   127ec:	sub	sp, sp, #28
   127f0:	add	ip, sp, #4096	; 0x1000
   127f4:	ldr	r3, [fp]
   127f8:	add	ip, ip, #20
   127fc:	add	r5, sp, #20
   12800:	strd	r0, [sp, #8]
   12804:	add	r4, sp, #24
   12808:	mov	r1, r2
   1280c:	mov	r9, r2
   12810:	mov	r0, r5
   12814:	mov	r2, #4096	; 0x1000
   12818:	str	r3, [ip]
   1281c:	mov	r6, #0
   12820:	bl	10f5c <strncpy@plt>
   12824:	mov	r0, r5
   12828:	mov	r1, #42	; 0x2a
   1282c:	strb	r6, [r4, #4091]	; 0xffb
   12830:	bl	10efc <strchr@plt>
   12834:	subs	r8, r0, #0
   12838:	beq	128fc <__assert_fail@plt+0x1898>
   1283c:	strb	r6, [r8]
   12840:	mov	r0, r5
   12844:	bl	10e60 <opendir@plt>
   12848:	subs	r6, r0, #0
   1284c:	beq	128fc <__assert_fail@plt+0x1898>
   12850:	ldr	r3, [pc, #280]	; 12970 <__assert_fail@plt+0x190c>
   12854:	ldr	r3, [r3]
   12858:	tst	r3, #128	; 0x80
   1285c:	bne	12920 <__assert_fail@plt+0x18bc>
   12860:	ldr	r7, [pc, #268]	; 12974 <__assert_fail@plt+0x1910>
   12864:	ldr	sl, [pc, #268]	; 12978 <__assert_fail@plt+0x1914>
   12868:	mov	r0, r6
   1286c:	bl	10fe0 <readdir64@plt>
   12870:	cmp	r0, #0
   12874:	beq	128f4 <__assert_fail@plt+0x1890>
   12878:	add	r4, r0, #19
   1287c:	mov	r0, r4
   12880:	mov	r1, r7
   12884:	bl	10d94 <strcmp@plt>
   12888:	cmp	r0, #0
   1288c:	beq	12868 <__assert_fail@plt+0x1804>
   12890:	mov	r1, sl
   12894:	mov	r0, r4
   12898:	bl	10d94 <strcmp@plt>
   1289c:	cmp	r0, #0
   128a0:	beq	12868 <__assert_fail@plt+0x1804>
   128a4:	sub	r1, r8, r5
   128a8:	mov	r3, r4
   128ac:	ldr	r2, [pc, #200]	; 1297c <__assert_fail@plt+0x1918>
   128b0:	rsb	r1, r1, #4096	; 0x1000
   128b4:	mov	r0, r8
   128b8:	bl	10f2c <snprintf@plt>
   128bc:	mov	r1, #42	; 0x2a
   128c0:	mov	r0, r9
   128c4:	bl	10efc <strchr@plt>
   128c8:	mov	r2, #4096	; 0x1000
   128cc:	add	r1, r0, #1
   128d0:	mov	r0, r5
   128d4:	bl	10f20 <__strcat_chk@plt>
   128d8:	ldrd	r0, [sp, #8]
   128dc:	mov	r2, r5
   128e0:	bl	12324 <__assert_fail@plt+0x12c0>
   128e4:	mov	r0, r6
   128e8:	bl	10fe0 <readdir64@plt>
   128ec:	cmp	r0, #0
   128f0:	bne	12878 <__assert_fail@plt+0x1814>
   128f4:	mov	r0, r6
   128f8:	bl	1104c <closedir@plt>
   128fc:	add	r3, sp, #4096	; 0x1000
   12900:	add	r3, r3, #20
   12904:	ldr	r2, [r3]
   12908:	ldr	r3, [fp]
   1290c:	cmp	r2, r3
   12910:	bne	12968 <__assert_fail@plt+0x1904>
   12914:	add	sp, sp, #4096	; 0x1000
   12918:	add	sp, sp, #28
   1291c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12920:	ldr	r3, [pc, #88]	; 12980 <__assert_fail@plt+0x191c>
   12924:	ldr	r4, [r3]
   12928:	bl	10ecc <getpid@plt>
   1292c:	ldr	r2, [pc, #80]	; 12984 <__assert_fail@plt+0x1920>
   12930:	ldr	r3, [pc, #80]	; 12988 <__assert_fail@plt+0x1924>
   12934:	str	r2, [sp, #4]
   12938:	str	r3, [sp]
   1293c:	ldr	r2, [pc, #72]	; 1298c <__assert_fail@plt+0x1928>
   12940:	mov	r1, #1
   12944:	mov	r3, r0
   12948:	mov	r0, r4
   1294c:	bl	10f74 <__fprintf_chk@plt>
   12950:	ldr	r3, [sp, #8]
   12954:	mov	r2, r9
   12958:	ldr	r1, [pc, #48]	; 12990 <__assert_fail@plt+0x192c>
   1295c:	ldr	r0, [r3]
   12960:	bl	11910 <__assert_fail@plt+0x8ac>
   12964:	b	12860 <__assert_fail@plt+0x17fc>
   12968:	bl	10e00 <__stack_chk_fail@plt>
   1296c:	strdeq	r3, [r2], -r0
   12970:	andeq	r4, r2, ip, lsl r1
   12974:	andeq	r3, r1, r8, asr r6
   12978:	andeq	r3, r1, ip, asr r6
   1297c:	andeq	r3, r1, r8, ror #10
   12980:	andeq	r4, r2, r0, lsl r1
   12984:	andeq	r3, r1, r0, ror #3
   12988:	andeq	r3, r1, r8, ror #3
   1298c:	ldrdeq	r3, [r1], -r0
   12990:	andeq	r3, r1, r0, asr #12
   12994:	ldr	r3, [pc, #192]	; 12a5c <__assert_fail@plt+0x19f8>
   12998:	push	{r4, r5, r6, r7, lr}
   1299c:	mov	r6, r0
   129a0:	ldr	r3, [r3]
   129a4:	sub	sp, sp, #12
   129a8:	tst	r3, #64	; 0x40
   129ac:	mov	r7, r1
   129b0:	mov	r5, r2
   129b4:	bne	12a10 <__assert_fail@plt+0x19ac>
   129b8:	ldr	r4, [r5]
   129bc:	cmp	r4, #0
   129c0:	bne	129d8 <__assert_fail@plt+0x1974>
   129c4:	b	12a08 <__assert_fail@plt+0x19a4>
   129c8:	bl	127e0 <__assert_fail@plt+0x177c>
   129cc:	ldr	r4, [r5, #4]!
   129d0:	cmp	r4, #0
   129d4:	beq	12a08 <__assert_fail@plt+0x19a4>
   129d8:	mov	r1, #42	; 0x2a
   129dc:	mov	r0, r4
   129e0:	bl	10efc <strchr@plt>
   129e4:	mov	r2, r4
   129e8:	mov	r1, r7
   129ec:	cmp	r0, #0
   129f0:	mov	r0, r6
   129f4:	bne	129c8 <__assert_fail@plt+0x1964>
   129f8:	bl	12324 <__assert_fail@plt+0x12c0>
   129fc:	ldr	r4, [r5, #4]!
   12a00:	cmp	r4, #0
   12a04:	bne	129d8 <__assert_fail@plt+0x1974>
   12a08:	add	sp, sp, #12
   12a0c:	pop	{r4, r5, r6, r7, pc}
   12a10:	ldr	r3, [pc, #72]	; 12a60 <__assert_fail@plt+0x19fc>
   12a14:	ldr	r4, [r3]
   12a18:	bl	10ecc <getpid@plt>
   12a1c:	ldr	r2, [pc, #64]	; 12a64 <__assert_fail@plt+0x1a00>
   12a20:	ldr	r3, [pc, #64]	; 12a68 <__assert_fail@plt+0x1a04>
   12a24:	str	r2, [sp, #4]
   12a28:	str	r3, [sp]
   12a2c:	ldr	r2, [pc, #56]	; 12a6c <__assert_fail@plt+0x1a08>
   12a30:	mov	r1, #1
   12a34:	mov	r3, r0
   12a38:	mov	r0, r4
   12a3c:	bl	10f74 <__fprintf_chk@plt>
   12a40:	ldr	r3, [pc, #40]	; 12a70 <__assert_fail@plt+0x1a0c>
   12a44:	ldr	r1, [pc, #40]	; 12a74 <__assert_fail@plt+0x1a10>
   12a48:	add	r3, r3, r7, lsl #2
   12a4c:	ldr	r0, [r6]
   12a50:	ldr	r2, [r3, #8]
   12a54:	bl	11910 <__assert_fail@plt+0x8ac>
   12a58:	b	129b8 <__assert_fail@plt+0x1954>
   12a5c:	andeq	r4, r2, ip, lsl r1
   12a60:	andeq	r4, r2, r0, lsl r1
   12a64:	andeq	r3, r1, r0, ror #12
   12a68:	andeq	r3, r1, r8, ror #3
   12a6c:	ldrdeq	r3, [r1], -r0
   12a70:	muleq	r1, ip, r1
   12a74:	andeq	r3, r1, r8, ror #12
   12a78:	ldr	r3, [pc, #292]	; 12ba4 <__assert_fail@plt+0x1b40>
   12a7c:	push	{r4, r5, r6, lr}
   12a80:	ldr	r4, [r3]
   12a84:	mov	r0, r4
   12a88:	bl	10e48 <__fpending@plt>
   12a8c:	mov	r6, r0
   12a90:	mov	r0, r4
   12a94:	bl	10dc4 <ferror@plt>
   12a98:	mov	r5, r0
   12a9c:	mov	r0, r4
   12aa0:	bl	10f98 <fclose@plt>
   12aa4:	cmp	r5, #0
   12aa8:	mov	r4, r0
   12aac:	bne	12b54 <__assert_fail@plt+0x1af0>
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ad0 <__assert_fail@plt+0x1a6c>
   12ab8:	bl	10f14 <__errno_location@plt>
   12abc:	cmp	r6, #0
   12ac0:	ldr	r3, [r0]
   12ac4:	bne	12b2c <__assert_fail@plt+0x1ac8>
   12ac8:	cmp	r3, #9
   12acc:	bne	12b2c <__assert_fail@plt+0x1ac8>
   12ad0:	ldr	r3, [pc, #208]	; 12ba8 <__assert_fail@plt+0x1b44>
   12ad4:	ldr	r4, [r3]
   12ad8:	mov	r0, r4
   12adc:	bl	10e48 <__fpending@plt>
   12ae0:	mov	r6, r0
   12ae4:	mov	r0, r4
   12ae8:	bl	10dc4 <ferror@plt>
   12aec:	mov	r5, r0
   12af0:	mov	r0, r4
   12af4:	bl	10f98 <fclose@plt>
   12af8:	cmp	r5, #0
   12afc:	mov	r4, r0
   12b00:	bne	12b88 <__assert_fail@plt+0x1b24>
   12b04:	cmp	r0, #0
   12b08:	popeq	{r4, r5, r6, pc}
   12b0c:	cmp	r6, #0
   12b10:	bne	12b24 <__assert_fail@plt+0x1ac0>
   12b14:	bl	10f14 <__errno_location@plt>
   12b18:	ldr	r3, [r0]
   12b1c:	cmp	r3, #9
   12b20:	popeq	{r4, r5, r6, pc}
   12b24:	mov	r0, #1
   12b28:	bl	10dd0 <_exit@plt>
   12b2c:	cmp	r3, #32
   12b30:	beq	12ad0 <__assert_fail@plt+0x1a6c>
   12b34:	cmp	r3, #0
   12b38:	beq	12b70 <__assert_fail@plt+0x1b0c>
   12b3c:	mov	r2, #5
   12b40:	ldr	r1, [pc, #100]	; 12bac <__assert_fail@plt+0x1b48>
   12b44:	mov	r0, #0
   12b48:	bl	10de8 <dcgettext@plt>
   12b4c:	bl	10fc8 <warn@plt>
   12b50:	b	12b24 <__assert_fail@plt+0x1ac0>
   12b54:	bl	10f14 <__errno_location@plt>
   12b58:	cmp	r4, #0
   12b5c:	ldr	r3, [r0]
   12b60:	bne	12b2c <__assert_fail@plt+0x1ac8>
   12b64:	cmp	r3, #32
   12b68:	strne	r4, [r0]
   12b6c:	beq	12ad0 <__assert_fail@plt+0x1a6c>
   12b70:	mov	r2, #5
   12b74:	ldr	r1, [pc, #48]	; 12bac <__assert_fail@plt+0x1b48>
   12b78:	mov	r0, #0
   12b7c:	bl	10de8 <dcgettext@plt>
   12b80:	bl	10f08 <warnx@plt>
   12b84:	b	12b24 <__assert_fail@plt+0x1ac0>
   12b88:	cmp	r0, #0
   12b8c:	bne	12b24 <__assert_fail@plt+0x1ac0>
   12b90:	bl	10f14 <__errno_location@plt>
   12b94:	ldr	r3, [r0]
   12b98:	cmp	r3, #32
   12b9c:	strne	r4, [r0]
   12ba0:	b	12b24 <__assert_fail@plt+0x1ac0>
   12ba4:	andeq	r4, r2, r4, lsl r1
   12ba8:	andeq	r4, r2, r0, lsl r1
   12bac:	muleq	r1, r0, r6
   12bb0:	ldr	r3, [pc, #196]	; 12c7c <__assert_fail@plt+0x1c18>
   12bb4:	ldr	r2, [pc, #196]	; 12c80 <__assert_fail@plt+0x1c1c>
   12bb8:	add	r3, pc, r3
   12bbc:	push	{r4, r5, r6, r7, lr}
   12bc0:	sub	sp, sp, #116	; 0x74
   12bc4:	ldr	r4, [r3, r2]
   12bc8:	mov	r5, r1
   12bcc:	mov	r1, #47	; 0x2f
   12bd0:	ldr	r3, [r4]
   12bd4:	mov	r7, r0
   12bd8:	str	r3, [sp, #108]	; 0x6c
   12bdc:	bl	10fbc <strrchr@plt>
   12be0:	mov	r3, #0
   12be4:	str	r3, [r5]
   12be8:	subs	r6, r0, #0
   12bec:	beq	12c24 <__assert_fail@plt+0x1bc0>
   12bf0:	ldr	r1, [pc, #140]	; 12c84 <__assert_fail@plt+0x1c20>
   12bf4:	mov	r2, #4
   12bf8:	add	r1, pc, r1
   12bfc:	bl	11028 <strncmp@plt>
   12c00:	cmp	r0, #0
   12c04:	bne	12c24 <__assert_fail@plt+0x1bc0>
   12c08:	bl	10eb4 <__ctype_b_loc@plt>
   12c0c:	ldrsb	r3, [r6, #4]
   12c10:	lsl	r3, r3, #1
   12c14:	ldr	r2, [r0]
   12c18:	ldrh	r3, [r2, r3]
   12c1c:	tst	r3, #2048	; 0x800
   12c20:	bne	12c40 <__assert_fail@plt+0x1bdc>
   12c24:	mov	r0, #0
   12c28:	ldr	r2, [sp, #108]	; 0x6c
   12c2c:	ldr	r3, [r4]
   12c30:	cmp	r2, r3
   12c34:	bne	12c78 <__assert_fail@plt+0x1c14>
   12c38:	add	sp, sp, #116	; 0x74
   12c3c:	pop	{r4, r5, r6, r7, pc}
   12c40:	mov	r1, r7
   12c44:	mov	r2, sp
   12c48:	mov	r0, #3
   12c4c:	bl	11010 <__xstat64@plt>
   12c50:	cmp	r0, #0
   12c54:	bne	12c24 <__assert_fail@plt+0x1bc0>
   12c58:	ldr	r3, [sp, #16]
   12c5c:	and	r3, r3, #61440	; 0xf000
   12c60:	cmp	r3, #24576	; 0x6000
   12c64:	bne	12c24 <__assert_fail@plt+0x1bc0>
   12c68:	mov	r0, #1
   12c6c:	add	r6, r6, r0
   12c70:	str	r6, [r5]
   12c74:	b	12c28 <__assert_fail@plt+0x1bc4>
   12c78:	bl	10e00 <__stack_chk_fail@plt>
   12c7c:	andeq	r1, r1, r4, lsr r3
   12c80:	andeq	r0, r0, r4, lsl #2
   12c84:	andeq	r0, r0, ip, lsl #31
   12c88:	ldr	r3, [pc, #292]	; 12db4 <__assert_fail@plt+0x1d50>
   12c8c:	ldr	r2, [pc, #292]	; 12db8 <__assert_fail@plt+0x1d54>
   12c90:	add	r3, pc, r3
   12c94:	push	{r4, r5, r6, r7, r8, lr}
   12c98:	sub	sp, sp, #520	; 0x208
   12c9c:	ldr	r4, [r3, r2]
   12ca0:	cmp	r1, #0
   12ca4:	ldr	r3, [r4]
   12ca8:	str	r3, [sp, #516]	; 0x204
   12cac:	beq	12d58 <__assert_fail@plt+0x1cf4>
   12cb0:	ldrsb	r3, [r1]
   12cb4:	cmp	r3, #0
   12cb8:	beq	12d58 <__assert_fail@plt+0x1cf4>
   12cbc:	cmp	r0, #0
   12cc0:	beq	12d60 <__assert_fail@plt+0x1cfc>
   12cc4:	ldr	r2, [pc, #240]	; 12dbc <__assert_fail@plt+0x1d58>
   12cc8:	mov	r3, #256	; 0x100
   12ccc:	add	r2, pc, r2
   12cd0:	add	r5, sp, #260	; 0x104
   12cd4:	strd	r0, [sp, #4]
   12cd8:	str	r2, [sp]
   12cdc:	mov	r1, r3
   12ce0:	mov	r2, #1
   12ce4:	mov	r0, r5
   12ce8:	bl	11058 <__snprintf_chk@plt>
   12cec:	ldr	r1, [pc, #204]	; 12dc0 <__assert_fail@plt+0x1d5c>
   12cf0:	mov	r0, r5
   12cf4:	add	r1, pc, r1
   12cf8:	bl	10ff8 <fopen64@plt>
   12cfc:	subs	r7, r0, #0
   12d00:	beq	12d58 <__assert_fail@plt+0x1cf4>
   12d04:	add	r8, sp, #16
   12d08:	mov	r0, r8
   12d0c:	mov	r2, r7
   12d10:	mov	r1, #244	; 0xf4
   12d14:	bl	10db8 <fgets@plt>
   12d18:	subs	r6, r0, #0
   12d1c:	beq	12d34 <__assert_fail@plt+0x1cd0>
   12d20:	mov	r0, r8
   12d24:	bl	10ef0 <strlen@plt>
   12d28:	cmp	r0, #1
   12d2c:	movls	r6, #0
   12d30:	bhi	12d6c <__assert_fail@plt+0x1d08>
   12d34:	mov	r0, r7
   12d38:	bl	10f98 <fclose@plt>
   12d3c:	ldr	r2, [sp, #516]	; 0x204
   12d40:	ldr	r3, [r4]
   12d44:	mov	r0, r6
   12d48:	cmp	r2, r3
   12d4c:	bne	12db0 <__assert_fail@plt+0x1d4c>
   12d50:	add	sp, sp, #520	; 0x208
   12d54:	pop	{r4, r5, r6, r7, r8, pc}
   12d58:	mov	r6, #0
   12d5c:	b	12d3c <__assert_fail@plt+0x1cd8>
   12d60:	ldr	r0, [pc, #92]	; 12dc4 <__assert_fail@plt+0x1d60>
   12d64:	add	r0, pc, r0
   12d68:	b	12cc4 <__assert_fail@plt+0x1c60>
   12d6c:	add	r3, sp, #520	; 0x208
   12d70:	ldr	r2, [pc, #80]	; 12dc8 <__assert_fail@plt+0x1d64>
   12d74:	add	r0, r3, r0
   12d78:	mov	ip, #0
   12d7c:	mov	r3, #256	; 0x100
   12d80:	add	r2, pc, r2
   12d84:	str	r2, [sp]
   12d88:	str	r8, [sp, #4]
   12d8c:	mov	r1, r3
   12d90:	strb	ip, [r0, #-505]	; 0xfffffe07
   12d94:	mov	r2, #1
   12d98:	mov	r0, r5
   12d9c:	bl	11058 <__snprintf_chk@plt>
   12da0:	mov	r0, r5
   12da4:	bl	10df4 <strdup@plt>
   12da8:	mov	r6, r0
   12dac:	b	12d34 <__assert_fail@plt+0x1cd0>
   12db0:	bl	10e00 <__stack_chk_fail@plt>
   12db4:	andeq	r1, r1, ip, asr r2
   12db8:	andeq	r0, r0, r4, lsl #2
   12dbc:	andeq	r0, r0, r0, asr #29
   12dc0:	andeq	r0, r0, r0, lsl #29
   12dc4:	andeq	r0, r0, r0, lsl sl
   12dc8:	andeq	r0, r0, r4, lsr #28
   12dcc:	mov	r1, r0
   12dd0:	mov	r0, #0
   12dd4:	b	12c88 <__assert_fail@plt+0x1c24>
   12dd8:	ldr	r3, [pc, #324]	; 12f24 <__assert_fail@plt+0x1ec0>
   12ddc:	ldr	r2, [pc, #324]	; 12f28 <__assert_fail@plt+0x1ec4>
   12de0:	add	r3, pc, r3
   12de4:	push	{r4, r5, r6, r7, r8, r9, lr}
   12de8:	sub	sp, sp, #4096	; 0x1000
   12dec:	ldr	r5, [r3, r2]
   12df0:	sub	sp, sp, #12
   12df4:	add	r2, sp, #4096	; 0x1000
   12df8:	add	r2, r2, #4
   12dfc:	ldr	r3, [r5]
   12e00:	subs	r4, r0, #0
   12e04:	str	r3, [r2]
   12e08:	beq	12eec <__assert_fail@plt+0x1e88>
   12e0c:	ldrsb	r3, [r4]
   12e10:	cmp	r3, #47	; 0x2f
   12e14:	beq	12eec <__assert_fail@plt+0x1e88>
   12e18:	add	r7, sp, #4
   12e1c:	mov	r0, r7
   12e20:	mov	r1, #4096	; 0x1000
   12e24:	bl	10ec0 <getcwd@plt>
   12e28:	subs	r6, r0, #0
   12e2c:	beq	12eb4 <__assert_fail@plt+0x1e50>
   12e30:	ldr	r1, [pc, #244]	; 12f2c <__assert_fail@plt+0x1ec8>
   12e34:	mov	r2, #2
   12e38:	add	r1, pc, r1
   12e3c:	mov	r0, r4
   12e40:	bl	11028 <strncmp@plt>
   12e44:	cmp	r0, #0
   12e48:	bne	12f00 <__assert_fail@plt+0x1e9c>
   12e4c:	adds	r8, r4, #2
   12e50:	beq	12f00 <__assert_fail@plt+0x1e9c>
   12e54:	ldrsb	r3, [r8]
   12e58:	cmp	r3, #0
   12e5c:	beq	12edc <__assert_fail@plt+0x1e78>
   12e60:	mov	r0, r7
   12e64:	bl	10ef0 <strlen@plt>
   12e68:	mov	r4, r0
   12e6c:	mov	r0, r8
   12e70:	bl	10ef0 <strlen@plt>
   12e74:	mov	r9, r0
   12e78:	add	r0, r4, r0
   12e7c:	add	r0, r0, #2
   12e80:	bl	10e84 <malloc@plt>
   12e84:	subs	r6, r0, #0
   12e88:	beq	12eb4 <__assert_fail@plt+0x1e50>
   12e8c:	mov	r1, r7
   12e90:	mov	r2, r4
   12e94:	bl	10ddc <memcpy@plt>
   12e98:	add	r0, r6, r4
   12e9c:	mov	r3, #47	; 0x2f
   12ea0:	add	r2, r9, #1
   12ea4:	mov	r1, r8
   12ea8:	add	r0, r0, #1
   12eac:	strb	r3, [r6, r4]
   12eb0:	bl	10ddc <memcpy@plt>
   12eb4:	add	r3, sp, #4096	; 0x1000
   12eb8:	add	r3, r3, #4
   12ebc:	ldr	r2, [r3]
   12ec0:	ldr	r3, [r5]
   12ec4:	mov	r0, r6
   12ec8:	cmp	r2, r3
   12ecc:	bne	12f20 <__assert_fail@plt+0x1ebc>
   12ed0:	add	sp, sp, #4096	; 0x1000
   12ed4:	add	sp, sp, #12
   12ed8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12edc:	mov	r0, r7
   12ee0:	bl	10df4 <strdup@plt>
   12ee4:	mov	r6, r0
   12ee8:	b	12eb4 <__assert_fail@plt+0x1e50>
   12eec:	bl	10f14 <__errno_location@plt>
   12ef0:	mov	r3, #22
   12ef4:	mov	r6, #0
   12ef8:	str	r3, [r0]
   12efc:	b	12eb4 <__assert_fail@plt+0x1e50>
   12f00:	ldr	r1, [pc, #40]	; 12f30 <__assert_fail@plt+0x1ecc>
   12f04:	mov	r0, r4
   12f08:	add	r1, pc, r1
   12f0c:	bl	10d94 <strcmp@plt>
   12f10:	cmp	r0, #0
   12f14:	beq	12edc <__assert_fail@plt+0x1e78>
   12f18:	mov	r8, r4
   12f1c:	b	12e54 <__assert_fail@plt+0x1df0>
   12f20:	bl	10e00 <__stack_chk_fail@plt>
   12f24:	andeq	r1, r1, ip, lsl #2
   12f28:	andeq	r0, r0, r4, lsl #2
   12f2c:	andeq	r0, r0, ip, ror sp
   12f30:	andeq	r0, r0, r8, asr #14
   12f34:	ldr	r3, [pc, #180]	; 12ff0 <__assert_fail@plt+0x1f8c>
   12f38:	ldr	r2, [pc, #180]	; 12ff4 <__assert_fail@plt+0x1f90>
   12f3c:	add	r3, pc, r3
   12f40:	push	{r4, r5, r6, lr}
   12f44:	sub	sp, sp, #8
   12f48:	ldr	r5, [r3, r2]
   12f4c:	subs	r6, r0, #0
   12f50:	ldr	r3, [r5]
   12f54:	str	r3, [sp, #4]
   12f58:	beq	12fe4 <__assert_fail@plt+0x1f80>
   12f5c:	ldrsb	r4, [r6]
   12f60:	cmp	r4, #0
   12f64:	beq	12f88 <__assert_fail@plt+0x1f24>
   12f68:	mov	r1, #0
   12f6c:	bl	11040 <realpath@plt>
   12f70:	subs	r4, r0, #0
   12f74:	beq	12fc4 <__assert_fail@plt+0x1f60>
   12f78:	mov	r1, sp
   12f7c:	bl	12bb0 <__assert_fail@plt+0x1b4c>
   12f80:	cmp	r0, #0
   12f84:	bne	12fa4 <__assert_fail@plt+0x1f40>
   12f88:	ldr	r2, [sp, #4]
   12f8c:	ldr	r3, [r5]
   12f90:	mov	r0, r4
   12f94:	cmp	r2, r3
   12f98:	bne	12fec <__assert_fail@plt+0x1f88>
   12f9c:	add	sp, sp, #8
   12fa0:	pop	{r4, r5, r6, pc}
   12fa4:	ldr	r0, [sp]
   12fa8:	bl	12dcc <__assert_fail@plt+0x1d68>
   12fac:	subs	r6, r0, #0
   12fb0:	beq	12f88 <__assert_fail@plt+0x1f24>
   12fb4:	mov	r0, r4
   12fb8:	bl	10dac <free@plt>
   12fbc:	mov	r4, r6
   12fc0:	b	12f88 <__assert_fail@plt+0x1f24>
   12fc4:	ldr	r2, [sp, #4]
   12fc8:	ldr	r3, [r5]
   12fcc:	cmp	r2, r3
   12fd0:	bne	12fec <__assert_fail@plt+0x1f88>
   12fd4:	mov	r0, r6
   12fd8:	add	sp, sp, #8
   12fdc:	pop	{r4, r5, r6, lr}
   12fe0:	b	10df4 <strdup@plt>
   12fe4:	mov	r4, r6
   12fe8:	b	12f88 <__assert_fail@plt+0x1f24>
   12fec:	bl	10e00 <__stack_chk_fail@plt>
   12ff0:			; <UNDEFINED> instruction: 0x00010fb0
   12ff4:	andeq	r0, r0, r4, lsl #2
   12ff8:	ldr	r3, [pc, #268]	; 1310c <__assert_fail@plt+0x20a8>
   12ffc:	ldr	r2, [pc, #268]	; 13110 <__assert_fail@plt+0x20ac>
   13000:	add	r3, pc, r3
   13004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13008:	sub	sp, sp, #8
   1300c:	ldr	r4, [r3, r2]
   13010:	subs	r5, r0, #0
   13014:	ldr	r3, [r4]
   13018:	str	r3, [sp, #4]
   1301c:	beq	130bc <__assert_fail@plt+0x2058>
   13020:	ldrsb	r3, [r5]
   13024:	cmp	r3, #0
   13028:	beq	130bc <__assert_fail@plt+0x2058>
   1302c:	bl	10e24 <geteuid@plt>
   13030:	mov	r9, r0
   13034:	bl	10e3c <getegid@plt>
   13038:	mov	r8, r0
   1303c:	bl	10f50 <getgid@plt>
   13040:	bl	10f8c <setegid@plt>
   13044:	cmp	r0, #0
   13048:	blt	130bc <__assert_fail@plt+0x2058>
   1304c:	bl	10da0 <getuid@plt>
   13050:	bl	10e30 <seteuid@plt>
   13054:	cmp	r0, #0
   13058:	blt	130bc <__assert_fail@plt+0x2058>
   1305c:	bl	10f14 <__errno_location@plt>
   13060:	mov	r7, #0
   13064:	mov	r1, r7
   13068:	mov	r6, r0
   1306c:	mov	r0, r5
   13070:	str	r7, [r6]
   13074:	bl	11040 <realpath@plt>
   13078:	subs	r5, r0, #0
   1307c:	beq	130dc <__assert_fail@plt+0x2078>
   13080:	mov	r1, sp
   13084:	bl	12bb0 <__assert_fail@plt+0x1b4c>
   13088:	subs	sl, r0, #0
   1308c:	bne	130e4 <__assert_fail@plt+0x2080>
   13090:	mov	r0, r8
   13094:	bl	10f8c <setegid@plt>
   13098:	cmp	r0, #0
   1309c:	blt	130b4 <__assert_fail@plt+0x2050>
   130a0:	mov	r0, r9
   130a4:	bl	10e30 <seteuid@plt>
   130a8:	cmp	r0, #0
   130ac:	strge	sl, [r6]
   130b0:	bge	130c0 <__assert_fail@plt+0x205c>
   130b4:	mov	r0, r5
   130b8:	bl	10dac <free@plt>
   130bc:	mov	r5, #0
   130c0:	ldr	r2, [sp, #4]
   130c4:	ldr	r3, [r4]
   130c8:	mov	r0, r5
   130cc:	cmp	r2, r3
   130d0:	bne	13108 <__assert_fail@plt+0x20a4>
   130d4:	add	sp, sp, #8
   130d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130dc:	ldr	sl, [r6]
   130e0:	b	13090 <__assert_fail@plt+0x202c>
   130e4:	ldr	r0, [sp]
   130e8:	bl	12dcc <__assert_fail@plt+0x1d68>
   130ec:	subs	sl, r0, #0
   130f0:	beq	13090 <__assert_fail@plt+0x202c>
   130f4:	mov	r0, r5
   130f8:	bl	10dac <free@plt>
   130fc:	mov	r5, sl
   13100:	mov	sl, r7
   13104:	b	13090 <__assert_fail@plt+0x202c>
   13108:	bl	10e00 <__stack_chk_fail@plt>
   1310c:	andeq	r0, r1, ip, ror #29
   13110:	andeq	r0, r0, r4, lsl #2
   13114:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13118:	mov	r7, r0
   1311c:	ldr	r6, [pc, #72]	; 1316c <__assert_fail@plt+0x2108>
   13120:	ldr	r5, [pc, #72]	; 13170 <__assert_fail@plt+0x210c>
   13124:	add	r6, pc, r6
   13128:	add	r5, pc, r5
   1312c:	sub	r6, r6, r5
   13130:	mov	r8, r1
   13134:	mov	r9, r2
   13138:	bl	10d68 <calloc@plt-0x20>
   1313c:	asrs	r6, r6, #2
   13140:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13144:	mov	r4, #0
   13148:	add	r4, r4, #1
   1314c:	ldr	r3, [r5], #4
   13150:	mov	r2, r9
   13154:	mov	r1, r8
   13158:	mov	r0, r7
   1315c:	blx	r3
   13160:	cmp	r6, r4
   13164:	bne	13148 <__assert_fail@plt+0x20e4>
   13168:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1316c:	andeq	r0, r1, r0, asr #25
   13170:			; <UNDEFINED> instruction: 0x00010cb8
   13174:	bx	lr
   13178:	ldr	r3, [pc, #12]	; 1318c <__assert_fail@plt+0x2128>
   1317c:	mov	r1, #0
   13180:	add	r3, pc, r3
   13184:	ldr	r2, [r3]
   13188:	b	10f38 <__cxa_atexit@plt>
   1318c:	andeq	r0, r1, ip, ror lr

Disassembly of section .fini:

00013190 <.fini>:
   13190:	push	{r3, lr}
   13194:	pop	{r3, pc}
