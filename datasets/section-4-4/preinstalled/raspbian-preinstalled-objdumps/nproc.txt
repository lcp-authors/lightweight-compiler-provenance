
raspbian-preinstalled/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	11150 <__assert_fail@plt+0x230>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r5, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <fflush@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <free@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <_exit@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <memcpy@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <__strtoull_internal@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <mbsinit@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__sched_cpucount@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <memcmp@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <dcgettext@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <__stack_chk_fail@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <sysconf@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <realloc@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <textdomain@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <iswprint@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <fwrite@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <lseek64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <__ctype_get_mb_cur_max@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <__fpending@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <mbrtowc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <error@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <getenv@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <malloc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <__libc_start_main@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__freading@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__gmon_start__@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <getopt_long@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_b_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <exit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <strtoul@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <strlen@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <strchr@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <__errno_location@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <__cxa_atexit@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <memset@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <__printf_chk@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <fileno@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <__fprintf_chk@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <fclose@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <fseeko64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <setlocale@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <strrchr@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <nl_langinfo@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <sched_getaffinity@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <bindtextdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <strncmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <abort@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <__assert_fail@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

Disassembly of section .text:

00010f2c <.text>:
   10f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f30:	mov	r6, r0
   10f34:	sub	sp, sp, #36	; 0x24
   10f38:	ldr	r0, [r1]
   10f3c:	mov	r5, r1
   10f40:	bl	11834 <__assert_fail@plt+0x914>
   10f44:	ldr	r1, [pc, #392]	; 110d4 <__assert_fail@plt+0x1b4>
   10f48:	mov	r0, #6
   10f4c:	bl	10ecc <setlocale@plt>
   10f50:	ldr	sl, [pc, #380]	; 110d4 <__assert_fail@plt+0x1b4>
   10f54:	ldr	r1, [pc, #380]	; 110d8 <__assert_fail@plt+0x1b8>
   10f58:	ldr	r0, [pc, #380]	; 110dc <__assert_fail@plt+0x1bc>
   10f5c:	bl	10efc <bindtextdomain@plt>
   10f60:	ldr	r8, [pc, #376]	; 110e0 <__assert_fail@plt+0x1c0>
   10f64:	ldr	r0, [pc, #368]	; 110dc <__assert_fail@plt+0x1bc>
   10f68:	ldr	r9, [pc, #372]	; 110e4 <__assert_fail@plt+0x1c4>
   10f6c:	bl	10d88 <textdomain@plt>
   10f70:	mov	r7, sl
   10f74:	ldr	r0, [pc, #364]	; 110e8 <__assert_fail@plt+0x1c8>
   10f78:	mov	fp, #0
   10f7c:	bl	15384 <__assert_fail@plt+0x4464>
   10f80:	mov	r3, #2
   10f84:	str	r3, [sp, #28]
   10f88:	mov	r4, #0
   10f8c:	str	r4, [sp]
   10f90:	mov	r3, r8
   10f94:	mov	r2, r7
   10f98:	mov	r1, r5
   10f9c:	mov	r0, r6
   10fa0:	bl	10e24 <getopt_long@plt>
   10fa4:	cmn	r0, #1
   10fa8:	beq	11054 <__assert_fail@plt+0x134>
   10fac:	cmn	r0, #2
   10fb0:	beq	11090 <__assert_fail@plt+0x170>
   10fb4:	ble	10fcc <__assert_fail@plt+0xac>
   10fb8:	cmp	r0, #256	; 0x100
   10fbc:	bne	11004 <__assert_fail@plt+0xe4>
   10fc0:	mov	r3, #0
   10fc4:	str	r3, [sp, #28]
   10fc8:	b	10f8c <__assert_fail@plt+0x6c>
   10fcc:	cmn	r0, #3
   10fd0:	bne	110cc <__assert_fail@plt+0x1ac>
   10fd4:	ldr	r1, [pc, #272]	; 110ec <__assert_fail@plt+0x1cc>
   10fd8:	ldr	r3, [pc, #272]	; 110f0 <__assert_fail@plt+0x1d0>
   10fdc:	ldr	r2, [pc, #272]	; 110f4 <__assert_fail@plt+0x1d4>
   10fe0:	str	r4, [sp, #4]
   10fe4:	ldr	r0, [r1]
   10fe8:	ldr	r3, [r3]
   10fec:	ldr	r1, [pc, #260]	; 110f8 <__assert_fail@plt+0x1d8>
   10ff0:	str	r2, [sp]
   10ff4:	ldr	r2, [pc, #256]	; 110fc <__assert_fail@plt+0x1dc>
   10ff8:	bl	13f04 <__assert_fail@plt+0x2fe4>
   10ffc:	mov	r0, #0
   11000:	bl	10e3c <exit@plt>
   11004:	cmp	r0, r9
   11008:	bne	110cc <__assert_fail@plt+0x1ac>
   1100c:	ldr	r3, [pc, #236]	; 11100 <__assert_fail@plt+0x1e0>
   11010:	mov	r2, #5
   11014:	ldr	r1, [pc, #232]	; 11104 <__assert_fail@plt+0x1e4>
   11018:	mov	r0, #0
   1101c:	ldr	fp, [r3]
   11020:	bl	10d58 <dcgettext@plt>
   11024:	mvn	r2, #0
   11028:	mov	r3, #0
   1102c:	str	r4, [sp, #16]
   11030:	strd	r2, [sp]
   11034:	str	sl, [sp, #8]
   11038:	mov	r2, #0
   1103c:	mov	r3, #0
   11040:	str	r0, [sp, #12]
   11044:	mov	r0, fp
   11048:	bl	143e0 <__assert_fail@plt+0x34c0>
   1104c:	mov	fp, r0
   11050:	b	10f88 <__assert_fail@plt+0x68>
   11054:	ldr	r4, [pc, #172]	; 11108 <__assert_fail@plt+0x1e8>
   11058:	ldr	r3, [r4]
   1105c:	cmp	r3, r6
   11060:	bne	11098 <__assert_fail@plt+0x178>
   11064:	ldr	r0, [sp, #28]
   11068:	bl	1173c <__assert_fail@plt+0x81c>
   1106c:	ldr	r1, [pc, #152]	; 1110c <__assert_fail@plt+0x1ec>
   11070:	cmp	fp, r0
   11074:	subcc	r2, r0, fp
   11078:	movcs	r2, #1
   1107c:	mov	r0, #1
   11080:	bl	10e90 <__printf_chk@plt>
   11084:	mov	r0, #0
   11088:	add	sp, sp, #36	; 0x24
   1108c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11090:	mov	r0, #0
   11094:	bl	11204 <__assert_fail@plt+0x2e4>
   11098:	mov	r2, #5
   1109c:	ldr	r1, [pc, #108]	; 11110 <__assert_fail@plt+0x1f0>
   110a0:	mov	r0, #0
   110a4:	bl	10d58 <dcgettext@plt>
   110a8:	ldr	r3, [r4]
   110ac:	mov	r6, r0
   110b0:	ldr	r0, [r5, r3, lsl #2]
   110b4:	bl	13a98 <__assert_fail@plt+0x2b78>
   110b8:	mov	r1, #0
   110bc:	mov	r2, r6
   110c0:	mov	r3, r0
   110c4:	mov	r0, r1
   110c8:	bl	10ddc <error@plt>
   110cc:	mov	r0, #1
   110d0:	bl	11204 <__assert_fail@plt+0x2e4>
   110d4:	andeq	r5, r1, r0, ror #23
   110d8:	andeq	r5, r1, r8, asr #13
   110dc:	andeq	r5, r1, ip, lsl r6
   110e0:	andeq	r5, r1, r0, ror #7
   110e4:	andeq	r0, r0, r1, lsl #2
   110e8:	andeq	r1, r1, r0, lsr #10
   110ec:	andeq	r6, r2, r4, asr #2
   110f0:	andeq	r6, r2, r4, ror #1
   110f4:	ldrdeq	r5, [r1], -ip
   110f8:	andeq	r5, r1, r0, lsr r4
   110fc:	andeq	r5, r1, r8, lsl r6
   11100:	andeq	r6, r2, r8, asr #2
   11104:	strdeq	r5, [r1], -r0
   11108:	andeq	r6, r2, r8, lsr r1
   1110c:	andeq	r5, r1, r4, lsl r7
   11110:	andeq	r5, r1, r0, lsl #14
   11114:	mov	fp, #0
   11118:	mov	lr, #0
   1111c:	pop	{r1}		; (ldr r1, [sp], #4)
   11120:	mov	r2, sp
   11124:	push	{r2}		; (str r2, [sp, #-4]!)
   11128:	push	{r0}		; (str r0, [sp, #-4]!)
   1112c:	ldr	ip, [pc, #16]	; 11144 <__assert_fail@plt+0x224>
   11130:	push	{ip}		; (str ip, [sp, #-4]!)
   11134:	ldr	r0, [pc, #12]	; 11148 <__assert_fail@plt+0x228>
   11138:	ldr	r3, [pc, #12]	; 1114c <__assert_fail@plt+0x22c>
   1113c:	bl	10e00 <__libc_start_main@plt>
   11140:	bl	10f14 <abort@plt>
   11144:	andeq	r5, r1, r0, lsl #7
   11148:	andeq	r0, r1, ip, lsr #30
   1114c:	andeq	r5, r1, r0, lsr #6
   11150:	ldr	r3, [pc, #20]	; 1116c <__assert_fail@plt+0x24c>
   11154:	ldr	r2, [pc, #20]	; 11170 <__assert_fail@plt+0x250>
   11158:	add	r3, pc, r3
   1115c:	ldr	r2, [r3, r2]
   11160:	cmp	r2, #0
   11164:	bxeq	lr
   11168:	b	10e18 <__gmon_start__@plt>
   1116c:	andeq	r4, r1, r0, lsr #29
   11170:	ldrdeq	r0, [r0], -r8
   11174:	ldr	r0, [pc, #24]	; 11194 <__assert_fail@plt+0x274>
   11178:	ldr	r3, [pc, #24]	; 11198 <__assert_fail@plt+0x278>
   1117c:	cmp	r3, r0
   11180:	bxeq	lr
   11184:	ldr	r3, [pc, #16]	; 1119c <__assert_fail@plt+0x27c>
   11188:	cmp	r3, #0
   1118c:	bxeq	lr
   11190:	bx	r3
   11194:	andeq	r6, r2, ip, lsr #2
   11198:	andeq	r6, r2, ip, lsr #2
   1119c:	andeq	r0, r0, r0
   111a0:	ldr	r0, [pc, #36]	; 111cc <__assert_fail@plt+0x2ac>
   111a4:	ldr	r1, [pc, #36]	; 111d0 <__assert_fail@plt+0x2b0>
   111a8:	sub	r1, r1, r0
   111ac:	asr	r1, r1, #2
   111b0:	add	r1, r1, r1, lsr #31
   111b4:	asrs	r1, r1, #1
   111b8:	bxeq	lr
   111bc:	ldr	r3, [pc, #16]	; 111d4 <__assert_fail@plt+0x2b4>
   111c0:	cmp	r3, #0
   111c4:	bxeq	lr
   111c8:	bx	r3
   111cc:	andeq	r6, r2, ip, lsr #2
   111d0:	andeq	r6, r2, ip, lsr #2
   111d4:	andeq	r0, r0, r0
   111d8:	push	{r4, lr}
   111dc:	ldr	r4, [pc, #24]	; 111fc <__assert_fail@plt+0x2dc>
   111e0:	ldrb	r3, [r4]
   111e4:	cmp	r3, #0
   111e8:	popne	{r4, pc}
   111ec:	bl	11174 <__assert_fail@plt+0x254>
   111f0:	mov	r3, #1
   111f4:	strb	r3, [r4]
   111f8:	pop	{r4, pc}
   111fc:	andeq	r6, r2, ip, asr #2
   11200:	b	111a0 <__assert_fail@plt+0x280>
   11204:	ldr	r3, [pc, #672]	; 114ac <__assert_fail@plt+0x58c>
   11208:	push	{r7, lr}
   1120c:	sub	sp, sp, #64	; 0x40
   11210:	ldr	r3, [r3]
   11214:	subs	r5, r0, #0
   11218:	str	r3, [sp, #60]	; 0x3c
   1121c:	beq	11258 <__assert_fail@plt+0x338>
   11220:	ldr	r3, [pc, #648]	; 114b0 <__assert_fail@plt+0x590>
   11224:	mov	r2, #5
   11228:	ldr	r1, [pc, #644]	; 114b4 <__assert_fail@plt+0x594>
   1122c:	mov	r0, #0
   11230:	ldr	r4, [r3]
   11234:	bl	10d58 <dcgettext@plt>
   11238:	ldr	r3, [pc, #632]	; 114b8 <__assert_fail@plt+0x598>
   1123c:	mov	r1, #1
   11240:	ldr	r3, [r3]
   11244:	mov	r2, r0
   11248:	mov	r0, r4
   1124c:	bl	10ea8 <__fprintf_chk@plt>
   11250:	mov	r0, r5
   11254:	bl	10e3c <exit@plt>
   11258:	mov	r2, #5
   1125c:	ldr	r1, [pc, #600]	; 114bc <__assert_fail@plt+0x59c>
   11260:	bl	10d58 <dcgettext@plt>
   11264:	ldr	r3, [pc, #588]	; 114b8 <__assert_fail@plt+0x598>
   11268:	ldr	r4, [pc, #592]	; 114c0 <__assert_fail@plt+0x5a0>
   1126c:	ldr	r2, [r3]
   11270:	mov	r1, r0
   11274:	mov	r0, #1
   11278:	bl	10e90 <__printf_chk@plt>
   1127c:	mov	r2, #5
   11280:	ldr	r1, [pc, #572]	; 114c4 <__assert_fail@plt+0x5a4>
   11284:	mov	r0, r5
   11288:	bl	10d58 <dcgettext@plt>
   1128c:	ldr	r1, [r4]
   11290:	bl	10cd4 <fputs_unlocked@plt>
   11294:	mov	r2, #5
   11298:	ldr	r1, [pc, #552]	; 114c8 <__assert_fail@plt+0x5a8>
   1129c:	mov	r0, r5
   112a0:	bl	10d58 <dcgettext@plt>
   112a4:	ldr	r1, [r4]
   112a8:	bl	10cd4 <fputs_unlocked@plt>
   112ac:	mov	r2, #5
   112b0:	ldr	r1, [pc, #532]	; 114cc <__assert_fail@plt+0x5ac>
   112b4:	mov	r0, r5
   112b8:	bl	10d58 <dcgettext@plt>
   112bc:	ldr	r1, [r4]
   112c0:	bl	10cd4 <fputs_unlocked@plt>
   112c4:	mov	r2, #5
   112c8:	ldr	r1, [pc, #512]	; 114d0 <__assert_fail@plt+0x5b0>
   112cc:	mov	r0, r5
   112d0:	bl	10d58 <dcgettext@plt>
   112d4:	ldr	r1, [r4]
   112d8:	bl	10cd4 <fputs_unlocked@plt>
   112dc:	ldr	lr, [pc, #496]	; 114d4 <__assert_fail@plt+0x5b4>
   112e0:	add	ip, sp, #4
   112e4:	ldm	lr!, {r0, r1, r2, r3}
   112e8:	stmia	ip!, {r0, r1, r2, r3}
   112ec:	ldm	lr!, {r0, r1, r2, r3}
   112f0:	ldr	r6, [sp, #4]
   112f4:	stmia	ip!, {r0, r1, r2, r3}
   112f8:	cmp	r6, #0
   112fc:	ldm	lr!, {r0, r1, r2, r3}
   11300:	addeq	r4, sp, #4
   11304:	stmia	ip!, {r0, r1, r2, r3}
   11308:	ldm	lr, {r0, r1}
   1130c:	stm	ip, {r0, r1}
   11310:	beq	11340 <__assert_fail@plt+0x420>
   11314:	ldr	r7, [pc, #444]	; 114d8 <__assert_fail@plt+0x5b8>
   11318:	add	r4, sp, #4
   1131c:	b	1132c <__assert_fail@plt+0x40c>
   11320:	ldr	r6, [r4, #8]!
   11324:	cmp	r6, #0
   11328:	beq	11340 <__assert_fail@plt+0x420>
   1132c:	mov	r1, r6
   11330:	mov	r0, r7
   11334:	bl	10cec <strcmp@plt>
   11338:	cmp	r0, #0
   1133c:	bne	11320 <__assert_fail@plt+0x400>
   11340:	ldr	r4, [r4, #4]
   11344:	mov	r2, #5
   11348:	cmp	r4, #0
   1134c:	ldr	r1, [pc, #392]	; 114dc <__assert_fail@plt+0x5bc>
   11350:	beq	113f8 <__assert_fail@plt+0x4d8>
   11354:	mov	r0, #0
   11358:	bl	10d58 <dcgettext@plt>
   1135c:	ldr	r3, [pc, #380]	; 114e0 <__assert_fail@plt+0x5c0>
   11360:	ldr	r2, [pc, #380]	; 114e4 <__assert_fail@plt+0x5c4>
   11364:	mov	r1, r0
   11368:	mov	r0, #1
   1136c:	bl	10e90 <__printf_chk@plt>
   11370:	mov	r1, #0
   11374:	mov	r0, #5
   11378:	bl	10ecc <setlocale@plt>
   1137c:	cmp	r0, #0
   11380:	ldreq	r6, [pc, #336]	; 114d8 <__assert_fail@plt+0x5b8>
   11384:	beq	113a0 <__assert_fail@plt+0x480>
   11388:	mov	r2, #3
   1138c:	ldr	r1, [pc, #340]	; 114e8 <__assert_fail@plt+0x5c8>
   11390:	bl	10f08 <strncmp@plt>
   11394:	ldr	r6, [pc, #316]	; 114d8 <__assert_fail@plt+0x5b8>
   11398:	cmp	r0, #0
   1139c:	bne	11488 <__assert_fail@plt+0x568>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #320]	; 114ec <__assert_fail@plt+0x5cc>
   113a8:	mov	r0, #0
   113ac:	bl	10d58 <dcgettext@plt>
   113b0:	ldr	r3, [pc, #288]	; 114d8 <__assert_fail@plt+0x5b8>
   113b4:	ldr	r2, [pc, #292]	; 114e0 <__assert_fail@plt+0x5c0>
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	bl	10e90 <__printf_chk@plt>
   113c4:	mov	r2, #5
   113c8:	ldr	r1, [pc, #288]	; 114f0 <__assert_fail@plt+0x5d0>
   113cc:	mov	r0, #0
   113d0:	bl	10d58 <dcgettext@plt>
   113d4:	ldr	r2, [pc, #280]	; 114f4 <__assert_fail@plt+0x5d4>
   113d8:	cmp	r4, r6
   113dc:	ldr	r3, [pc, #276]	; 114f8 <__assert_fail@plt+0x5d8>
   113e0:	movne	r3, r2
   113e4:	mov	r1, r0
   113e8:	mov	r2, r4
   113ec:	mov	r0, #1
   113f0:	bl	10e90 <__printf_chk@plt>
   113f4:	b	11250 <__assert_fail@plt+0x330>
   113f8:	mov	r0, r4
   113fc:	bl	10d58 <dcgettext@plt>
   11400:	ldr	r3, [pc, #216]	; 114e0 <__assert_fail@plt+0x5c0>
   11404:	ldr	r2, [pc, #216]	; 114e4 <__assert_fail@plt+0x5c4>
   11408:	mov	r1, r0
   1140c:	mov	r0, #1
   11410:	bl	10e90 <__printf_chk@plt>
   11414:	mov	r1, r4
   11418:	mov	r0, #5
   1141c:	bl	10ecc <setlocale@plt>
   11420:	cmp	r0, #0
   11424:	beq	1143c <__assert_fail@plt+0x51c>
   11428:	mov	r2, #3
   1142c:	ldr	r1, [pc, #180]	; 114e8 <__assert_fail@plt+0x5c8>
   11430:	bl	10f08 <strncmp@plt>
   11434:	cmp	r0, #0
   11438:	bne	11480 <__assert_fail@plt+0x560>
   1143c:	mov	r2, #5
   11440:	ldr	r1, [pc, #164]	; 114ec <__assert_fail@plt+0x5cc>
   11444:	mov	r0, #0
   11448:	bl	10d58 <dcgettext@plt>
   1144c:	ldr	r3, [pc, #132]	; 114d8 <__assert_fail@plt+0x5b8>
   11450:	ldr	r2, [pc, #136]	; 114e0 <__assert_fail@plt+0x5c0>
   11454:	mov	r4, r3
   11458:	mov	r1, r0
   1145c:	mov	r0, #1
   11460:	bl	10e90 <__printf_chk@plt>
   11464:	ldr	r1, [pc, #132]	; 114f0 <__assert_fail@plt+0x5d0>
   11468:	mov	r2, #5
   1146c:	mov	r0, #0
   11470:	bl	10d58 <dcgettext@plt>
   11474:	ldr	r3, [pc, #124]	; 114f8 <__assert_fail@plt+0x5d8>
   11478:	mov	r1, r0
   1147c:	b	113e8 <__assert_fail@plt+0x4c8>
   11480:	ldr	r6, [pc, #80]	; 114d8 <__assert_fail@plt+0x5b8>
   11484:	mov	r4, r6
   11488:	mov	r2, #5
   1148c:	ldr	r1, [pc, #104]	; 114fc <__assert_fail@plt+0x5dc>
   11490:	mov	r0, #0
   11494:	bl	10d58 <dcgettext@plt>
   11498:	ldr	r2, [pc, #56]	; 114d8 <__assert_fail@plt+0x5b8>
   1149c:	mov	r1, r0
   114a0:	mov	r0, #1
   114a4:	bl	10e90 <__printf_chk@plt>
   114a8:	b	113a0 <__assert_fail@plt+0x480>
   114ac:	andeq	r5, r2, r8, lsl #30
   114b0:	andeq	r6, r2, r0, asr #2
   114b4:	andeq	r5, r1, r8, lsr r4
   114b8:	andeq	r6, r2, r8, asr r1
   114bc:	andeq	r5, r1, r0, ror #8
   114c0:	andeq	r6, r2, r4, asr #2
   114c4:	andeq	r5, r1, r8, ror r4
   114c8:	strdeq	r5, [r1], -r8
   114cc:	andeq	r5, r1, r0, ror r5
   114d0:	andeq	r5, r1, r0, lsr #11
   114d4:	andeq	r5, r1, r8, lsr #7
   114d8:	andeq	r5, r1, r0, lsr r4
   114dc:	ldrdeq	r5, [r1], -r8
   114e0:	strdeq	r5, [r1], -r0
   114e4:	andeq	r5, r1, r8, lsl r6
   114e8:	andeq	r5, r1, r8, lsr #12
   114ec:	andeq	r5, r1, r4, ror r6
   114f0:	muleq	r1, r4, r6
   114f4:	andeq	r5, r1, r0, ror #23
   114f8:	andeq	r5, r1, r4, lsr #14
   114fc:	andeq	r5, r1, ip, lsr #12
   11500:	ldr	r3, [pc, #4]	; 1150c <__assert_fail@plt+0x5ec>
   11504:	str	r0, [r3]
   11508:	bx	lr
   1150c:	andeq	r6, r2, r0, asr r1
   11510:	ldr	r3, [pc, #4]	; 1151c <__assert_fail@plt+0x5fc>
   11514:	strb	r0, [r3, #4]
   11518:	bx	lr
   1151c:	andeq	r6, r2, r0, asr r1
   11520:	ldr	r3, [pc, #180]	; 115dc <__assert_fail@plt+0x6bc>
   11524:	push	{r4, r5, r6, lr}
   11528:	sub	sp, sp, #8
   1152c:	ldr	r0, [r3]
   11530:	bl	14e70 <__assert_fail@plt+0x3f50>
   11534:	cmp	r0, #0
   11538:	beq	11560 <__assert_fail@plt+0x640>
   1153c:	bl	10e6c <__errno_location@plt>
   11540:	ldr	r5, [pc, #152]	; 115e0 <__assert_fail@plt+0x6c0>
   11544:	ldrb	r3, [r5, #4]
   11548:	cmp	r3, #0
   1154c:	mov	r4, r0
   11550:	beq	1157c <__assert_fail@plt+0x65c>
   11554:	ldr	r3, [r0]
   11558:	cmp	r3, #32
   1155c:	bne	1157c <__assert_fail@plt+0x65c>
   11560:	ldr	r3, [pc, #124]	; 115e4 <__assert_fail@plt+0x6c4>
   11564:	ldr	r0, [r3]
   11568:	bl	14e70 <__assert_fail@plt+0x3f50>
   1156c:	cmp	r0, #0
   11570:	bne	115bc <__assert_fail@plt+0x69c>
   11574:	add	sp, sp, #8
   11578:	pop	{r4, r5, r6, pc}
   1157c:	mov	r2, #5
   11580:	ldr	r1, [pc, #96]	; 115e8 <__assert_fail@plt+0x6c8>
   11584:	mov	r0, #0
   11588:	bl	10d58 <dcgettext@plt>
   1158c:	mov	r6, r0
   11590:	ldr	r0, [r5]
   11594:	cmp	r0, #0
   11598:	beq	115c8 <__assert_fail@plt+0x6a8>
   1159c:	ldr	r4, [r4]
   115a0:	bl	138b8 <__assert_fail@plt+0x2998>
   115a4:	mov	r1, r4
   115a8:	str	r6, [sp]
   115ac:	ldr	r2, [pc, #56]	; 115ec <__assert_fail@plt+0x6cc>
   115b0:	mov	r3, r0
   115b4:	mov	r0, #0
   115b8:	bl	10ddc <error@plt>
   115bc:	ldr	r3, [pc, #44]	; 115f0 <__assert_fail@plt+0x6d0>
   115c0:	ldr	r0, [r3]
   115c4:	bl	10d10 <_exit@plt>
   115c8:	mov	r3, r6
   115cc:	ldr	r1, [r4]
   115d0:	ldr	r2, [pc, #28]	; 115f4 <__assert_fail@plt+0x6d4>
   115d4:	bl	10ddc <error@plt>
   115d8:	b	115bc <__assert_fail@plt+0x69c>
   115dc:	andeq	r6, r2, r4, asr #2
   115e0:	andeq	r6, r2, r0, asr r1
   115e4:	andeq	r6, r2, r0, asr #2
   115e8:	andeq	r5, r1, ip, lsr #15
   115ec:			; <UNDEFINED> instruction: 0x000157b8
   115f0:	andeq	r6, r2, r8, ror #1
   115f4:			; <UNDEFINED> instruction: 0x000157bc
   115f8:	push	{r4, lr}
   115fc:	sub	sp, sp, #136	; 0x88
   11600:	ldr	r4, [pc, #84]	; 1165c <__assert_fail@plt+0x73c>
   11604:	add	r2, sp, #4
   11608:	mov	r1, #128	; 0x80
   1160c:	ldr	r3, [r4]
   11610:	mov	r0, #0
   11614:	str	r3, [sp, #132]	; 0x84
   11618:	bl	10ef0 <sched_getaffinity@plt>
   1161c:	cmp	r0, #0
   11620:	beq	11640 <__assert_fail@plt+0x720>
   11624:	mov	r0, #0
   11628:	ldr	r2, [sp, #132]	; 0x84
   1162c:	ldr	r3, [r4]
   11630:	cmp	r2, r3
   11634:	bne	11658 <__assert_fail@plt+0x738>
   11638:	add	sp, sp, #136	; 0x88
   1163c:	pop	{r4, pc}
   11640:	add	r1, sp, #4
   11644:	mov	r0, #128	; 0x80
   11648:	bl	10d40 <__sched_cpucount@plt>
   1164c:	cmp	r0, #0
   11650:	beq	11624 <__assert_fail@plt+0x704>
   11654:	b	11628 <__assert_fail@plt+0x708>
   11658:	bl	10d64 <__stack_chk_fail@plt>
   1165c:	andeq	r5, r2, r8, lsl #30
   11660:	push	{r4, lr}
   11664:	sub	sp, sp, #8
   11668:	ldr	r4, [pc, #200]	; 11738 <__assert_fail@plt+0x818>
   1166c:	ldrb	r3, [r0]
   11670:	ldr	r2, [r4]
   11674:	cmp	r3, #0
   11678:	str	r2, [sp, #4]
   1167c:	beq	116a4 <__assert_fail@plt+0x784>
   11680:	cmp	r3, #9
   11684:	bcc	116c0 <__assert_fail@plt+0x7a0>
   11688:	cmp	r3, #13
   1168c:	bls	11698 <__assert_fail@plt+0x778>
   11690:	cmp	r3, #32
   11694:	bne	116c0 <__assert_fail@plt+0x7a0>
   11698:	ldrb	r3, [r0, #1]!
   1169c:	cmp	r3, #0
   116a0:	bne	11680 <__assert_fail@plt+0x760>
   116a4:	mov	r0, #0
   116a8:	ldr	r2, [sp, #4]
   116ac:	ldr	r3, [r4]
   116b0:	cmp	r2, r3
   116b4:	bne	11734 <__assert_fail@plt+0x814>
   116b8:	add	sp, sp, #8
   116bc:	pop	{r4, pc}
   116c0:	sub	r3, r3, #48	; 0x30
   116c4:	cmp	r3, #9
   116c8:	bhi	116a4 <__assert_fail@plt+0x784>
   116cc:	mov	r3, #0
   116d0:	mov	r2, #10
   116d4:	mov	r1, sp
   116d8:	str	r3, [sp]
   116dc:	bl	10e48 <strtoul@plt>
   116e0:	ldr	r2, [sp]
   116e4:	cmp	r2, #0
   116e8:	beq	116a4 <__assert_fail@plt+0x784>
   116ec:	ldrb	r3, [r2]
   116f0:	cmp	r3, #0
   116f4:	beq	116a8 <__assert_fail@plt+0x788>
   116f8:	cmp	r3, #9
   116fc:	bcc	11710 <__assert_fail@plt+0x7f0>
   11700:	cmp	r3, #13
   11704:	bls	1171c <__assert_fail@plt+0x7fc>
   11708:	cmp	r3, #32
   1170c:	beq	1171c <__assert_fail@plt+0x7fc>
   11710:	cmp	r3, #44	; 0x2c
   11714:	bne	116a4 <__assert_fail@plt+0x784>
   11718:	b	116a8 <__assert_fail@plt+0x788>
   1171c:	add	r2, r2, #1
   11720:	str	r2, [sp]
   11724:	ldrb	r3, [r2]
   11728:	cmp	r3, #0
   1172c:	bne	116f8 <__assert_fail@plt+0x7d8>
   11730:	b	116a8 <__assert_fail@plt+0x788>
   11734:	bl	10d64 <__stack_chk_fail@plt>
   11738:	andeq	r5, r2, r8, lsl #30
   1173c:	cmp	r0, #2
   11740:	push	{r4, r5, r6, lr}
   11744:	beq	11774 <__assert_fail@plt+0x854>
   11748:	cmp	r0, #1
   1174c:	beq	11824 <__assert_fail@plt+0x904>
   11750:	mov	r0, #83	; 0x53
   11754:	bl	10d70 <sysconf@plt>
   11758:	cmp	r0, #1
   1175c:	mov	r4, r0
   11760:	beq	117e4 <__assert_fail@plt+0x8c4>
   11764:	cmp	r4, #1
   11768:	movge	r0, r4
   1176c:	movlt	r0, #1
   11770:	pop	{r4, r5, r6, pc}
   11774:	ldr	r0, [pc, #176]	; 1182c <__assert_fail@plt+0x90c>
   11778:	bl	10de8 <getenv@plt>
   1177c:	cmp	r0, #0
   11780:	beq	11808 <__assert_fail@plt+0x8e8>
   11784:	bl	11660 <__assert_fail@plt+0x740>
   11788:	mov	r5, r0
   1178c:	ldr	r0, [pc, #156]	; 11830 <__assert_fail@plt+0x910>
   11790:	bl	10de8 <getenv@plt>
   11794:	cmp	r0, #0
   11798:	mvneq	r4, #0
   1179c:	beq	117ac <__assert_fail@plt+0x88c>
   117a0:	bl	11660 <__assert_fail@plt+0x740>
   117a4:	subs	r4, r0, #0
   117a8:	mvneq	r4, #0
   117ac:	cmp	r5, #0
   117b0:	bne	117f8 <__assert_fail@plt+0x8d8>
   117b4:	bl	115f8 <__assert_fail@plt+0x6d8>
   117b8:	cmp	r0, #0
   117bc:	beq	117cc <__assert_fail@plt+0x8ac>
   117c0:	cmp	r0, r4
   117c4:	movcs	r0, r4
   117c8:	pop	{r4, r5, r6, pc}
   117cc:	mov	r0, #84	; 0x54
   117d0:	bl	10d70 <sysconf@plt>
   117d4:	cmp	r0, #0
   117d8:	bgt	117c0 <__assert_fail@plt+0x8a0>
   117dc:	mov	r0, #1
   117e0:	pop	{r4, r5, r6, pc}
   117e4:	bl	115f8 <__assert_fail@plt+0x6d8>
   117e8:	cmp	r0, #0
   117ec:	beq	117dc <__assert_fail@plt+0x8bc>
   117f0:	mov	r4, r0
   117f4:	b	11764 <__assert_fail@plt+0x844>
   117f8:	cmp	r4, r5
   117fc:	movcc	r0, r4
   11800:	movcs	r0, r5
   11804:	pop	{r4, r5, r6, pc}
   11808:	ldr	r0, [pc, #32]	; 11830 <__assert_fail@plt+0x910>
   1180c:	bl	10de8 <getenv@plt>
   11810:	cmp	r0, #0
   11814:	beq	11824 <__assert_fail@plt+0x904>
   11818:	bl	11660 <__assert_fail@plt+0x740>
   1181c:	subs	r4, r0, #0
   11820:	bne	117b4 <__assert_fail@plt+0x894>
   11824:	mvn	r4, #0
   11828:	b	117b4 <__assert_fail@plt+0x894>
   1182c:	andeq	r5, r1, r0, asr #15
   11830:	ldrdeq	r5, [r1], -r0
   11834:	push	{r4, r5, r6, lr}
   11838:	subs	r4, r0, #0
   1183c:	beq	118b0 <__assert_fail@plt+0x990>
   11840:	mov	r1, #47	; 0x2f
   11844:	bl	10ed8 <strrchr@plt>
   11848:	subs	r5, r0, #0
   1184c:	beq	1189c <__assert_fail@plt+0x97c>
   11850:	add	r6, r5, #1
   11854:	sub	r3, r6, r4
   11858:	cmp	r3, #6
   1185c:	ble	1189c <__assert_fail@plt+0x97c>
   11860:	mov	r2, #7
   11864:	ldr	r1, [pc, #96]	; 118cc <__assert_fail@plt+0x9ac>
   11868:	sub	r0, r5, #6
   1186c:	bl	10f08 <strncmp@plt>
   11870:	cmp	r0, #0
   11874:	bne	1189c <__assert_fail@plt+0x97c>
   11878:	mov	r2, #3
   1187c:	ldr	r1, [pc, #76]	; 118d0 <__assert_fail@plt+0x9b0>
   11880:	mov	r0, r6
   11884:	bl	10f08 <strncmp@plt>
   11888:	cmp	r0, #0
   1188c:	movne	r4, r6
   11890:	ldreq	r3, [pc, #60]	; 118d4 <__assert_fail@plt+0x9b4>
   11894:	addeq	r4, r5, #4
   11898:	streq	r4, [r3]
   1189c:	ldr	r2, [pc, #52]	; 118d8 <__assert_fail@plt+0x9b8>
   118a0:	ldr	r3, [pc, #52]	; 118dc <__assert_fail@plt+0x9bc>
   118a4:	str	r4, [r2]
   118a8:	str	r4, [r3]
   118ac:	pop	{r4, r5, r6, pc}
   118b0:	ldr	r3, [pc, #40]	; 118e0 <__assert_fail@plt+0x9c0>
   118b4:	mov	r2, #55	; 0x37
   118b8:	mov	r1, #1
   118bc:	ldr	r3, [r3]
   118c0:	ldr	r0, [pc, #28]	; 118e4 <__assert_fail@plt+0x9c4>
   118c4:	bl	10da0 <fwrite@plt>
   118c8:	bl	10f14 <abort@plt>
   118cc:	andeq	r5, r1, ip, lsl r8
   118d0:	andeq	r5, r1, r4, lsr #16
   118d4:	andeq	r6, r2, r0, lsr r1
   118d8:	andeq	r6, r2, r8, asr r1
   118dc:	andeq	r6, r2, r4, lsr r1
   118e0:	andeq	r6, r2, r0, asr #2
   118e4:	andeq	r5, r1, r4, ror #15
   118e8:	push	{r4, lr}
   118ec:	mov	r2, #48	; 0x30
   118f0:	mov	r4, r1
   118f4:	mov	r1, #0
   118f8:	bl	10e84 <memset@plt>
   118fc:	cmp	r4, #10
   11900:	beq	1190c <__assert_fail@plt+0x9ec>
   11904:	str	r4, [r0]
   11908:	pop	{r4, pc}
   1190c:	bl	10f14 <abort@plt>
   11910:	push	{r4, r5, r6, lr}
   11914:	mov	r2, #5
   11918:	mov	r5, r0
   1191c:	mov	r6, r1
   11920:	mov	r1, r0
   11924:	mov	r0, #0
   11928:	bl	10d58 <dcgettext@plt>
   1192c:	cmp	r5, r0
   11930:	mov	r4, r0
   11934:	beq	11940 <__assert_fail@plt+0xa20>
   11938:	mov	r0, r4
   1193c:	pop	{r4, r5, r6, pc}
   11940:	bl	14f30 <__assert_fail@plt+0x4010>
   11944:	ldrb	r3, [r0]
   11948:	bic	r3, r3, #32
   1194c:	cmp	r3, #85	; 0x55
   11950:	bne	119b0 <__assert_fail@plt+0xa90>
   11954:	ldrb	r3, [r0, #1]
   11958:	bic	r3, r3, #32
   1195c:	cmp	r3, #84	; 0x54
   11960:	bne	11a28 <__assert_fail@plt+0xb08>
   11964:	ldrb	r3, [r0, #2]
   11968:	bic	r3, r3, #32
   1196c:	cmp	r3, #70	; 0x46
   11970:	bne	11a28 <__assert_fail@plt+0xb08>
   11974:	ldrb	r3, [r0, #3]
   11978:	cmp	r3, #45	; 0x2d
   1197c:	bne	11a28 <__assert_fail@plt+0xb08>
   11980:	ldrb	r3, [r0, #4]
   11984:	cmp	r3, #56	; 0x38
   11988:	bne	11a28 <__assert_fail@plt+0xb08>
   1198c:	ldrb	r3, [r0, #5]
   11990:	cmp	r3, #0
   11994:	bne	11a28 <__assert_fail@plt+0xb08>
   11998:	ldrb	r2, [r4]
   1199c:	ldr	r3, [pc, #156]	; 11a40 <__assert_fail@plt+0xb20>
   119a0:	ldr	r4, [pc, #156]	; 11a44 <__assert_fail@plt+0xb24>
   119a4:	cmp	r2, #96	; 0x60
   119a8:	movne	r4, r3
   119ac:	b	11938 <__assert_fail@plt+0xa18>
   119b0:	cmp	r3, #71	; 0x47
   119b4:	bne	11a28 <__assert_fail@plt+0xb08>
   119b8:	ldrb	r3, [r0, #1]
   119bc:	bic	r3, r3, #32
   119c0:	cmp	r3, #66	; 0x42
   119c4:	bne	11a28 <__assert_fail@plt+0xb08>
   119c8:	ldrb	r3, [r0, #2]
   119cc:	cmp	r3, #49	; 0x31
   119d0:	bne	11a28 <__assert_fail@plt+0xb08>
   119d4:	ldrb	r3, [r0, #3]
   119d8:	cmp	r3, #56	; 0x38
   119dc:	bne	11a28 <__assert_fail@plt+0xb08>
   119e0:	ldrb	r3, [r0, #4]
   119e4:	cmp	r3, #48	; 0x30
   119e8:	bne	11a28 <__assert_fail@plt+0xb08>
   119ec:	ldrb	r3, [r0, #5]
   119f0:	cmp	r3, #51	; 0x33
   119f4:	bne	11a28 <__assert_fail@plt+0xb08>
   119f8:	ldrb	r3, [r0, #6]
   119fc:	cmp	r3, #48	; 0x30
   11a00:	bne	11a28 <__assert_fail@plt+0xb08>
   11a04:	ldrb	r3, [r0, #7]
   11a08:	cmp	r3, #0
   11a0c:	bne	11a28 <__assert_fail@plt+0xb08>
   11a10:	ldrb	r2, [r4]
   11a14:	ldr	r3, [pc, #44]	; 11a48 <__assert_fail@plt+0xb28>
   11a18:	ldr	r4, [pc, #44]	; 11a4c <__assert_fail@plt+0xb2c>
   11a1c:	cmp	r2, #96	; 0x60
   11a20:	movne	r4, r3
   11a24:	b	11938 <__assert_fail@plt+0xa18>
   11a28:	ldr	r3, [pc, #32]	; 11a50 <__assert_fail@plt+0xb30>
   11a2c:	ldr	r4, [pc, #32]	; 11a54 <__assert_fail@plt+0xb34>
   11a30:	cmp	r6, #9
   11a34:	movne	r4, r3
   11a38:	mov	r0, r4
   11a3c:	pop	{r4, r5, r6, pc}
   11a40:	andeq	r5, r1, r0, lsl #17
   11a44:	andeq	r5, r1, ip, lsl #17
   11a48:	andeq	r5, r1, r4, lsl #17
   11a4c:	andeq	r5, r1, r8, lsl #17
   11a50:	muleq	r1, r0, r8
   11a54:	andeq	r5, r1, ip, ror r8
   11a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	sub	sp, sp, #124	; 0x7c
   11a60:	ldr	ip, [pc, #3576]	; 12860 <__assert_fail@plt+0x1940>
   11a64:	str	r3, [sp, #24]
   11a68:	ldr	r3, [sp, #168]	; 0xa8
   11a6c:	ldr	ip, [ip]
   11a70:	str	r3, [sp, #56]	; 0x38
   11a74:	ldr	r3, [sp, #172]	; 0xac
   11a78:	ldr	r8, [sp, #160]	; 0xa0
   11a7c:	str	r3, [sp, #80]	; 0x50
   11a80:	ldr	r3, [sp, #176]	; 0xb0
   11a84:	mov	fp, r0
   11a88:	str	r3, [sp, #76]	; 0x4c
   11a8c:	mov	sl, r1
   11a90:	str	r2, [sp, #36]	; 0x24
   11a94:	str	ip, [sp, #116]	; 0x74
   11a98:	bl	10db8 <__ctype_get_mb_cur_max@plt>
   11a9c:	ldr	r3, [sp, #164]	; 0xa4
   11aa0:	ands	r4, r3, #2
   11aa4:	movne	r3, #1
   11aa8:	moveq	r3, #0
   11aac:	str	r3, [sp, #32]
   11ab0:	str	r0, [sp, #64]	; 0x40
   11ab4:	cmp	r8, #10
   11ab8:	ldrls	pc, [pc, r8, lsl #2]
   11abc:	b	1326c <__assert_fail@plt+0x234c>
   11ac0:			; <UNDEFINED> instruction: 0x00011eb4
   11ac4:	andeq	r1, r1, ip, asr #30
   11ac8:	andeq	r2, r1, ip, asr #10
   11acc:	andeq	r1, r1, ip, ror #30
   11ad0:	andeq	r1, r1, r0, lsr #28
   11ad4:	andeq	r1, r1, r8, ror #28
   11ad8:	andeq	r1, r1, r4, ror #29
   11adc:	andeq	r1, r1, ip, lsl pc
   11ae0:	andeq	r1, r1, ip, ror #21
   11ae4:	andeq	r1, r1, ip, ror #21
   11ae8:	andeq	r1, r1, ip, ror #21
   11aec:	cmp	r8, #10
   11af0:	beq	11b14 <__assert_fail@plt+0xbf4>
   11af4:	mov	r1, r8
   11af8:	ldr	r0, [pc, #3428]	; 12864 <__assert_fail@plt+0x1944>
   11afc:	bl	11910 <__assert_fail@plt+0x9f0>
   11b00:	mov	r1, r8
   11b04:	str	r0, [sp, #80]	; 0x50
   11b08:	ldr	r0, [pc, #3420]	; 1286c <__assert_fail@plt+0x194c>
   11b0c:	bl	11910 <__assert_fail@plt+0x9f0>
   11b10:	str	r0, [sp, #76]	; 0x4c
   11b14:	cmp	r4, #0
   11b18:	movne	r4, #0
   11b1c:	beq	12f2c <__assert_fail@plt+0x200c>
   11b20:	ldr	r7, [sp, #76]	; 0x4c
   11b24:	mov	r5, #0
   11b28:	mov	r6, #1
   11b2c:	mov	r0, r7
   11b30:	str	r6, [sp, #40]	; 0x28
   11b34:	str	r5, [sp, #68]	; 0x44
   11b38:	bl	10e54 <strlen@plt>
   11b3c:	str	r6, [sp, #28]
   11b40:	str	r5, [sp, #44]	; 0x2c
   11b44:	str	r5, [sp, #72]	; 0x48
   11b48:	str	r7, [sp, #60]	; 0x3c
   11b4c:	str	r0, [sp, #52]	; 0x34
   11b50:	str	r8, [sp, #160]	; 0xa0
   11b54:	mov	r8, fp
   11b58:	ldr	fp, [sp, #160]	; 0xa0
   11b5c:	mov	r9, #0
   11b60:	ldr	r3, [sp, #24]
   11b64:	cmn	r3, #1
   11b68:	beq	120d0 <__assert_fail@plt+0x11b0>
   11b6c:	ldr	r3, [sp, #24]
   11b70:	subs	r6, r3, r9
   11b74:	movne	r6, #1
   11b78:	cmp	r6, #0
   11b7c:	beq	120e8 <__assert_fail@plt+0x11c8>
   11b80:	ldr	r7, [sp, #28]
   11b84:	ldr	r0, [sp, #36]	; 0x24
   11b88:	cmp	fp, #2
   11b8c:	moveq	r7, #0
   11b90:	andne	r7, r7, #1
   11b94:	add	r3, r0, r9
   11b98:	cmp	r7, #0
   11b9c:	str	r3, [sp, #48]	; 0x30
   11ba0:	beq	1258c <__assert_fail@plt+0x166c>
   11ba4:	ldr	r2, [sp, #52]	; 0x34
   11ba8:	cmp	r2, #0
   11bac:	beq	12870 <__assert_fail@plt+0x1950>
   11bb0:	ldr	r1, [sp, #24]
   11bb4:	cmp	r2, #1
   11bb8:	mov	r3, r2
   11bbc:	movls	r3, #0
   11bc0:	movhi	r3, #1
   11bc4:	cmn	r1, #1
   11bc8:	movne	r3, #0
   11bcc:	cmp	r3, #0
   11bd0:	add	r5, r9, r2
   11bd4:	beq	11be0 <__assert_fail@plt+0xcc0>
   11bd8:	bl	10e54 <strlen@plt>
   11bdc:	str	r0, [sp, #24]
   11be0:	ldr	r3, [sp, #24]
   11be4:	cmp	r5, r3
   11be8:	bhi	12870 <__assert_fail@plt+0x1950>
   11bec:	ldr	r2, [sp, #52]	; 0x34
   11bf0:	ldr	r1, [sp, #60]	; 0x3c
   11bf4:	ldr	r0, [sp, #48]	; 0x30
   11bf8:	bl	10d4c <memcmp@plt>
   11bfc:	cmp	r0, #0
   11c00:	bne	12870 <__assert_fail@plt+0x1950>
   11c04:	ldr	r3, [sp, #32]
   11c08:	cmp	r3, #0
   11c0c:	bne	1312c <__assert_fail@plt+0x220c>
   11c10:	ldr	r3, [sp, #48]	; 0x30
   11c14:	ldrb	r5, [r3]
   11c18:	cmp	r5, #126	; 0x7e
   11c1c:	ldrls	pc, [pc, r5, lsl #2]
   11c20:	b	124f0 <__assert_fail@plt+0x15d0>
   11c24:	ldrdeq	r2, [r1], -ip
   11c28:	strdeq	r2, [r1], -r0
   11c2c:	strdeq	r2, [r1], -r0
   11c30:	strdeq	r2, [r1], -r0
   11c34:	strdeq	r2, [r1], -r0
   11c38:	strdeq	r2, [r1], -r0
   11c3c:	strdeq	r2, [r1], -r0
   11c40:	andeq	r2, r1, r8, lsr #9
   11c44:	muleq	r1, r8, r4
   11c48:	muleq	r1, r8, r3
   11c4c:	andeq	r2, r1, r0, ror #6
   11c50:			; <UNDEFINED> instruction: 0x000123b8
   11c54:	andeq	r2, r1, r0, lsr #7
   11c58:	ldrdeq	r2, [r1], -r0
   11c5c:	strdeq	r2, [r1], -r0
   11c60:	strdeq	r2, [r1], -r0
   11c64:	strdeq	r2, [r1], -r0
   11c68:	strdeq	r2, [r1], -r0
   11c6c:	strdeq	r2, [r1], -r0
   11c70:	strdeq	r2, [r1], -r0
   11c74:	strdeq	r2, [r1], -r0
   11c78:	strdeq	r2, [r1], -r0
   11c7c:	strdeq	r2, [r1], -r0
   11c80:	strdeq	r2, [r1], -r0
   11c84:	strdeq	r2, [r1], -r0
   11c88:	strdeq	r2, [r1], -r0
   11c8c:	strdeq	r2, [r1], -r0
   11c90:	strdeq	r2, [r1], -r0
   11c94:	strdeq	r2, [r1], -r0
   11c98:	strdeq	r2, [r1], -r0
   11c9c:	strdeq	r2, [r1], -r0
   11ca0:	strdeq	r2, [r1], -r0
   11ca4:			; <UNDEFINED> instruction: 0x000124b0
   11ca8:	andeq	r2, r1, r4, asr #7
   11cac:	andeq	r2, r1, r4, asr #7
   11cb0:	andeq	r2, r1, r8, asr #9
   11cb4:	andeq	r2, r1, r4, asr #7
   11cb8:	andeq	r2, r1, r4, ror #9
   11cbc:	andeq	r2, r1, r4, asr #7
   11cc0:	andeq	r2, r1, r4, lsl #4
   11cc4:	andeq	r2, r1, r4, asr #7
   11cc8:	andeq	r2, r1, r4, asr #7
   11ccc:	andeq	r2, r1, r4, asr #7
   11cd0:	andeq	r2, r1, r4, ror #9
   11cd4:	andeq	r2, r1, r4, ror #9
   11cd8:	andeq	r2, r1, r4, ror #9
   11cdc:	andeq	r2, r1, r4, ror #9
   11ce0:	andeq	r2, r1, r4, ror #9
   11ce4:	andeq	r2, r1, r4, ror #9
   11ce8:	andeq	r2, r1, r4, ror #9
   11cec:	andeq	r2, r1, r4, ror #9
   11cf0:	andeq	r2, r1, r4, ror #9
   11cf4:	andeq	r2, r1, r4, ror #9
   11cf8:	andeq	r2, r1, r4, ror #9
   11cfc:	andeq	r2, r1, r4, ror #9
   11d00:	andeq	r2, r1, r4, ror #9
   11d04:	andeq	r2, r1, r4, ror #9
   11d08:	andeq	r2, r1, r4, ror #9
   11d0c:	andeq	r2, r1, r4, ror #9
   11d10:	andeq	r2, r1, r4, asr #7
   11d14:	andeq	r2, r1, r4, asr #7
   11d18:	andeq	r2, r1, r4, asr #7
   11d1c:	andeq	r2, r1, r4, asr #7
   11d20:	ldrdeq	r2, [r1], -r8
   11d24:	strdeq	r2, [r1], -r0
   11d28:	andeq	r2, r1, r4, ror #9
   11d2c:	andeq	r2, r1, r4, ror #9
   11d30:	andeq	r2, r1, r4, ror #9
   11d34:	andeq	r2, r1, r4, ror #9
   11d38:	andeq	r2, r1, r4, ror #9
   11d3c:	andeq	r2, r1, r4, ror #9
   11d40:	andeq	r2, r1, r4, ror #9
   11d44:	andeq	r2, r1, r4, ror #9
   11d48:	andeq	r2, r1, r4, ror #9
   11d4c:	andeq	r2, r1, r4, ror #9
   11d50:	andeq	r2, r1, r4, ror #9
   11d54:	andeq	r2, r1, r4, ror #9
   11d58:	andeq	r2, r1, r4, ror #9
   11d5c:	andeq	r2, r1, r4, ror #9
   11d60:	andeq	r2, r1, r4, ror #9
   11d64:	andeq	r2, r1, r4, ror #9
   11d68:	andeq	r2, r1, r4, ror #9
   11d6c:	andeq	r2, r1, r4, ror #9
   11d70:	andeq	r2, r1, r4, ror #9
   11d74:	andeq	r2, r1, r4, ror #9
   11d78:	andeq	r2, r1, r4, ror #9
   11d7c:	andeq	r2, r1, r4, ror #9
   11d80:	andeq	r2, r1, r4, ror #9
   11d84:	andeq	r2, r1, r4, ror #9
   11d88:	andeq	r2, r1, r4, ror #9
   11d8c:	andeq	r2, r1, r4, ror #9
   11d90:	andeq	r2, r1, r4, asr #7
   11d94:	muleq	r1, r0, r1
   11d98:	andeq	r2, r1, r4, ror #9
   11d9c:	andeq	r2, r1, r4, asr #7
   11da0:	andeq	r2, r1, r4, ror #9
   11da4:	andeq	r2, r1, r4, asr #7
   11da8:	andeq	r2, r1, r4, ror #9
   11dac:	andeq	r2, r1, r4, ror #9
   11db0:	andeq	r2, r1, r4, ror #9
   11db4:	andeq	r2, r1, r4, ror #9
   11db8:	andeq	r2, r1, r4, ror #9
   11dbc:	andeq	r2, r1, r4, ror #9
   11dc0:	andeq	r2, r1, r4, ror #9
   11dc4:	andeq	r2, r1, r4, ror #9
   11dc8:	andeq	r2, r1, r4, ror #9
   11dcc:	andeq	r2, r1, r4, ror #9
   11dd0:	andeq	r2, r1, r4, ror #9
   11dd4:	andeq	r2, r1, r4, ror #9
   11dd8:	andeq	r2, r1, r4, ror #9
   11ddc:	andeq	r2, r1, r4, ror #9
   11de0:	andeq	r2, r1, r4, ror #9
   11de4:	andeq	r2, r1, r4, ror #9
   11de8:	andeq	r2, r1, r4, ror #9
   11dec:	andeq	r2, r1, r4, ror #9
   11df0:	andeq	r2, r1, r4, ror #9
   11df4:	andeq	r2, r1, r4, ror #9
   11df8:	andeq	r2, r1, r4, ror #9
   11dfc:	andeq	r2, r1, r4, ror #9
   11e00:	andeq	r2, r1, r4, ror #9
   11e04:	andeq	r2, r1, r4, ror #9
   11e08:	andeq	r2, r1, r4, ror #9
   11e0c:	andeq	r2, r1, r4, ror #9
   11e10:	andeq	r1, r1, r8, lsr #31
   11e14:	andeq	r2, r1, r4, asr #7
   11e18:	andeq	r1, r1, r8, lsr #31
   11e1c:	andeq	r2, r1, r8, asr #9
   11e20:	cmp	r4, #0
   11e24:	moveq	r3, #1
   11e28:	streq	r3, [sp, #28]
   11e2c:	beq	12558 <__assert_fail@plt+0x1638>
   11e30:	mov	r3, #0
   11e34:	mov	r4, r3
   11e38:	mov	r2, #1
   11e3c:	str	r2, [sp, #40]	; 0x28
   11e40:	str	r3, [sp, #68]	; 0x44
   11e44:	str	r2, [sp, #32]
   11e48:	str	r2, [sp, #52]	; 0x34
   11e4c:	ldr	r3, [pc, #2584]	; 1286c <__assert_fail@plt+0x194c>
   11e50:	str	r4, [sp, #44]	; 0x2c
   11e54:	str	r4, [sp, #72]	; 0x48
   11e58:	str	r4, [sp, #28]
   11e5c:	str	r3, [sp, #60]	; 0x3c
   11e60:	mov	r8, #2
   11e64:	b	11b50 <__assert_fail@plt+0xc30>
   11e68:	cmp	r4, #0
   11e6c:	bne	130f8 <__assert_fail@plt+0x21d8>
   11e70:	cmp	sl, #0
   11e74:	beq	12eb8 <__assert_fail@plt+0x1f98>
   11e78:	mov	r3, #34	; 0x22
   11e7c:	strb	r3, [fp]
   11e80:	ldr	r3, [pc, #2528]	; 12868 <__assert_fail@plt+0x1948>
   11e84:	mov	r1, r4
   11e88:	mov	r2, #1
   11e8c:	str	r4, [sp, #68]	; 0x44
   11e90:	str	r2, [sp, #40]	; 0x28
   11e94:	mov	r4, r2
   11e98:	str	r1, [sp, #44]	; 0x2c
   11e9c:	str	r1, [sp, #72]	; 0x48
   11ea0:	str	r1, [sp, #32]
   11ea4:	str	r2, [sp, #28]
   11ea8:	str	r2, [sp, #52]	; 0x34
   11eac:	str	r3, [sp, #60]	; 0x3c
   11eb0:	b	11b50 <__assert_fail@plt+0xc30>
   11eb4:	mov	r3, #0
   11eb8:	str	r3, [sp, #68]	; 0x44
   11ebc:	str	r3, [sp, #44]	; 0x2c
   11ec0:	str	r3, [sp, #32]
   11ec4:	str	r3, [sp, #28]
   11ec8:	str	r3, [sp, #60]	; 0x3c
   11ecc:	mov	r3, #1
   11ed0:	str	r8, [sp, #72]	; 0x48
   11ed4:	str	r8, [sp, #52]	; 0x34
   11ed8:	mov	r4, r8
   11edc:	str	r3, [sp, #40]	; 0x28
   11ee0:	b	11b50 <__assert_fail@plt+0xc30>
   11ee4:	mov	r3, #1
   11ee8:	str	r3, [sp, #40]	; 0x28
   11eec:	str	r3, [sp, #32]
   11ef0:	str	r3, [sp, #28]
   11ef4:	str	r3, [sp, #52]	; 0x34
   11ef8:	ldr	r3, [pc, #2408]	; 12868 <__assert_fail@plt+0x1948>
   11efc:	mov	r2, #0
   11f00:	mov	r4, r2
   11f04:	str	r2, [sp, #68]	; 0x44
   11f08:	str	r2, [sp, #44]	; 0x2c
   11f0c:	str	r2, [sp, #72]	; 0x48
   11f10:	str	r3, [sp, #60]	; 0x3c
   11f14:	mov	r8, #5
   11f18:	b	11b50 <__assert_fail@plt+0xc30>
   11f1c:	mov	r3, #0
   11f20:	mov	r2, #1
   11f24:	str	r2, [sp, #40]	; 0x28
   11f28:	mov	r4, r3
   11f2c:	str	r3, [sp, #68]	; 0x44
   11f30:	str	r2, [sp, #28]
   11f34:	str	r3, [sp, #44]	; 0x2c
   11f38:	str	r3, [sp, #72]	; 0x48
   11f3c:	str	r3, [sp, #32]
   11f40:	str	r3, [sp, #52]	; 0x34
   11f44:	str	r3, [sp, #60]	; 0x3c
   11f48:	b	11b50 <__assert_fail@plt+0xc30>
   11f4c:	mov	r2, #1
   11f50:	mov	r3, #0
   11f54:	str	r2, [sp, #40]	; 0x28
   11f58:	mov	r4, r3
   11f5c:	str	r3, [sp, #68]	; 0x44
   11f60:	str	r8, [sp, #52]	; 0x34
   11f64:	str	r2, [sp, #32]
   11f68:	b	11e4c <__assert_fail@plt+0xf2c>
   11f6c:	mov	r3, #1
   11f70:	str	r3, [sp, #40]	; 0x28
   11f74:	str	r3, [sp, #32]
   11f78:	str	r3, [sp, #28]
   11f7c:	str	r3, [sp, #52]	; 0x34
   11f80:	ldr	r3, [pc, #2276]	; 1286c <__assert_fail@plt+0x194c>
   11f84:	mov	r2, #0
   11f88:	mov	r4, r2
   11f8c:	str	r2, [sp, #68]	; 0x44
   11f90:	str	r2, [sp, #44]	; 0x2c
   11f94:	str	r2, [sp, #72]	; 0x48
   11f98:	str	r3, [sp, #60]	; 0x3c
   11f9c:	mov	r8, #2
   11fa0:	b	11b50 <__assert_fail@plt+0xc30>
   11fa4:	mov	r7, #0
   11fa8:	ldr	r3, [sp, #24]
   11fac:	cmn	r3, #1
   11fb0:	beq	12aec <__assert_fail@plt+0x1bcc>
   11fb4:	ldr	r3, [sp, #24]
   11fb8:	subs	r3, r3, #1
   11fbc:	movne	r3, #1
   11fc0:	cmp	r3, #0
   11fc4:	sub	r2, fp, #2
   11fc8:	clz	r2, r2
   11fcc:	lsr	r2, r2, #5
   11fd0:	bne	121cc <__assert_fail@plt+0x12ac>
   11fd4:	cmp	r9, #0
   11fd8:	bne	121cc <__assert_fail@plt+0x12ac>
   11fdc:	ldr	r3, [sp, #32]
   11fe0:	tst	r3, r2
   11fe4:	bne	122ec <__assert_fail@plt+0x13cc>
   11fe8:	ldr	r3, [sp, #28]
   11fec:	eor	r3, r3, #1
   11ff0:	orr	r3, r2, r3
   11ff4:	ldr	r2, [sp, #32]
   11ff8:	eor	r3, r3, #1
   11ffc:	orrs	r3, r2, r3
   12000:	beq	12030 <__assert_fail@plt+0x1110>
   12004:	mov	r3, #0
   12008:	ldr	r1, [sp, #56]	; 0x38
   1200c:	cmp	r1, #0
   12010:	beq	12030 <__assert_fail@plt+0x1110>
   12014:	lsr	r2, r5, #5
   12018:	and	r0, r5, #31
   1201c:	uxtb	r2, r2
   12020:	ldr	r1, [r1, r2, lsl #2]
   12024:	lsr	r2, r1, r0
   12028:	tst	r2, #1
   1202c:	bne	12038 <__assert_fail@plt+0x1118>
   12030:	cmp	r7, #0
   12034:	beq	12288 <__assert_fail@plt+0x1368>
   12038:	sub	r2, fp, #2
   1203c:	clz	r2, r2
   12040:	lsr	r2, r2, #5
   12044:	ldr	r3, [sp, #32]
   12048:	cmp	r3, #0
   1204c:	bne	12378 <__assert_fail@plt+0x1458>
   12050:	ldr	r3, [sp, #44]	; 0x2c
   12054:	eor	r3, r3, #1
   12058:	ands	r3, r2, r3
   1205c:	beq	12094 <__assert_fail@plt+0x1174>
   12060:	cmp	sl, r4
   12064:	movhi	r2, #39	; 0x27
   12068:	strbhi	r2, [r8, r4]
   1206c:	add	r2, r4, #1
   12070:	cmp	r2, sl
   12074:	movcc	r1, #36	; 0x24
   12078:	strbcc	r1, [r8, r2]
   1207c:	add	r2, r4, #2
   12080:	cmp	r2, sl
   12084:	add	r4, r4, #3
   12088:	movcc	r1, #39	; 0x27
   1208c:	strbcc	r1, [r8, r2]
   12090:	str	r3, [sp, #44]	; 0x2c
   12094:	cmp	r4, sl
   12098:	movcc	r3, #92	; 0x5c
   1209c:	strbcc	r3, [r8, r4]
   120a0:	add	r9, r9, #1
   120a4:	add	r4, r4, #1
   120a8:	cmp	r4, sl
   120ac:	ldr	r3, [sp, #40]	; 0x28
   120b0:	strbcc	r5, [r8, r4]
   120b4:	cmp	r6, #0
   120b8:	moveq	r3, #0
   120bc:	str	r3, [sp, #40]	; 0x28
   120c0:	ldr	r3, [sp, #24]
   120c4:	add	r4, r4, #1
   120c8:	cmn	r3, #1
   120cc:	bne	11b6c <__assert_fail@plt+0xc4c>
   120d0:	ldr	r3, [sp, #36]	; 0x24
   120d4:	ldrb	r6, [r3, r9]
   120d8:	adds	r6, r6, #0
   120dc:	movne	r6, #1
   120e0:	cmp	r6, #0
   120e4:	bne	11b80 <__assert_fail@plt+0xc60>
   120e8:	str	fp, [sp, #160]	; 0xa0
   120ec:	mov	fp, r8
   120f0:	ldr	r8, [sp, #160]	; 0xa0
   120f4:	ldr	r1, [sp, #32]
   120f8:	cmp	r4, #0
   120fc:	sub	r2, r8, #2
   12100:	clz	r2, r2
   12104:	lsr	r2, r2, #5
   12108:	andeq	r3, r2, r1
   1210c:	movne	r3, #0
   12110:	cmp	r3, #0
   12114:	bne	13200 <__assert_fail@plt+0x22e0>
   12118:	eor	r3, r1, #1
   1211c:	ands	r2, r2, r3
   12120:	beq	1313c <__assert_fail@plt+0x221c>
   12124:	ldr	r3, [sp, #68]	; 0x44
   12128:	cmp	r3, #0
   1212c:	beq	13140 <__assert_fail@plt+0x2220>
   12130:	ldr	r3, [sp, #40]	; 0x28
   12134:	cmp	r3, #0
   12138:	bne	131bc <__assert_fail@plt+0x229c>
   1213c:	ldr	r3, [sp, #72]	; 0x48
   12140:	adds	r3, r3, #0
   12144:	movne	r3, #1
   12148:	cmp	sl, #0
   1214c:	movne	r3, #0
   12150:	cmp	r3, #0
   12154:	ldreq	r2, [sp, #68]	; 0x44
   12158:	beq	13140 <__assert_fail@plt+0x2220>
   1215c:	ldr	sl, [sp, #72]	; 0x48
   12160:	str	r3, [sp, #68]	; 0x44
   12164:	ldr	r3, [pc, #1792]	; 1286c <__assert_fail@plt+0x194c>
   12168:	mov	r2, #39	; 0x27
   1216c:	mov	r4, #1
   12170:	str	r3, [sp, #60]	; 0x3c
   12174:	mov	r3, #0
   12178:	strb	r2, [fp]
   1217c:	str	r4, [sp, #52]	; 0x34
   12180:	mov	r8, #2
   12184:	str	r3, [sp, #32]
   12188:	b	11b50 <__assert_fail@plt+0xc30>
   1218c:	mov	r7, #0
   12190:	cmp	fp, #2
   12194:	beq	12acc <__assert_fail@plt+0x1bac>
   12198:	ldr	r3, [sp, #52]	; 0x34
   1219c:	ldr	r2, [sp, #28]
   121a0:	ldr	r1, [sp, #32]
   121a4:	cmp	r3, #0
   121a8:	andne	r2, r2, r1
   121ac:	moveq	r2, #0
   121b0:	cmp	r2, #0
   121b4:	moveq	r5, #92	; 0x5c
   121b8:	moveq	r3, r5
   121bc:	bne	12ad8 <__assert_fail@plt+0x1bb8>
   121c0:	ldr	r1, [sp, #28]
   121c4:	cmp	r1, #0
   121c8:	bne	13248 <__assert_fail@plt+0x2328>
   121cc:	mov	r6, #0
   121d0:	b	11fe8 <__assert_fail@plt+0x10c8>
   121d4:	mov	r7, #0
   121d8:	cmp	fp, #2
   121dc:	beq	12b3c <__assert_fail@plt+0x1c1c>
   121e0:	cmp	fp, #5
   121e4:	beq	12b00 <__assert_fail@plt+0x1be0>
   121e8:	sub	r2, fp, #2
   121ec:	mov	r6, #0
   121f0:	clz	r2, r2
   121f4:	mov	r5, #63	; 0x3f
   121f8:	lsr	r2, r2, #5
   121fc:	b	11fe8 <__assert_fail@plt+0x10c8>
   12200:	mov	r7, #0
   12204:	cmp	fp, #2
   12208:	strne	r6, [sp, #68]	; 0x44
   1220c:	movne	r2, #0
   12210:	movne	r5, #39	; 0x27
   12214:	bne	11fe8 <__assert_fail@plt+0x10c8>
   12218:	ldr	r3, [sp, #32]
   1221c:	cmp	r3, #0
   12220:	bne	12f1c <__assert_fail@plt+0x1ffc>
   12224:	cmp	sl, #0
   12228:	ldr	r3, [sp, #72]	; 0x48
   1222c:	clz	r3, r3
   12230:	lsr	r3, r3, #5
   12234:	moveq	r3, #0
   12238:	cmp	r3, #0
   1223c:	bne	12e50 <__assert_fail@plt+0x1f30>
   12240:	cmp	sl, r4
   12244:	movhi	r3, #39	; 0x27
   12248:	strbhi	r3, [r8, r4]
   1224c:	add	r3, r4, #1
   12250:	cmp	sl, r3
   12254:	movhi	r2, #92	; 0x5c
   12258:	strbhi	r2, [r8, r3]
   1225c:	add	r3, r4, #2
   12260:	cmp	sl, r3
   12264:	movhi	r2, #39	; 0x27
   12268:	strbhi	r2, [r8, r3]
   1226c:	mov	r3, #0
   12270:	cmp	r7, #0
   12274:	add	r4, r4, #3
   12278:	str	r3, [sp, #44]	; 0x2c
   1227c:	str	r6, [sp, #68]	; 0x44
   12280:	mov	r5, #39	; 0x27
   12284:	bne	12038 <__assert_fail@plt+0x1118>
   12288:	ldr	r2, [sp, #44]	; 0x2c
   1228c:	eor	r3, r3, #1
   12290:	and	r3, r3, r2
   12294:	add	r9, r9, #1
   12298:	uxtb	r3, r3
   1229c:	cmp	r3, #0
   122a0:	beq	120a8 <__assert_fail@plt+0x1188>
   122a4:	cmp	sl, r4
   122a8:	movhi	r3, #39	; 0x27
   122ac:	strbhi	r3, [r8, r4]
   122b0:	add	r3, r4, #1
   122b4:	cmp	sl, r3
   122b8:	movhi	r2, #39	; 0x27
   122bc:	strbhi	r2, [r8, r3]
   122c0:	mov	r3, #0
   122c4:	add	r4, r4, #2
   122c8:	str	r3, [sp, #44]	; 0x2c
   122cc:	b	120a8 <__assert_fail@plt+0x1188>
   122d0:	mov	r3, #114	; 0x72
   122d4:	ldr	r1, [sp, #32]
   122d8:	sub	r2, fp, #2
   122dc:	clz	r2, r2
   122e0:	lsr	r2, r2, #5
   122e4:	tst	r2, r1
   122e8:	beq	121c0 <__assert_fail@plt+0x12a0>
   122ec:	mov	fp, r8
   122f0:	mov	r8, #2
   122f4:	ldr	r3, [sp, #28]
   122f8:	cmp	r3, #0
   122fc:	movne	r8, #4
   12300:	ldr	r3, [sp, #164]	; 0xa4
   12304:	mov	ip, #0
   12308:	bic	r3, r3, #2
   1230c:	str	r3, [sp, #4]
   12310:	ldr	r3, [sp, #76]	; 0x4c
   12314:	str	r8, [sp]
   12318:	str	r3, [sp, #16]
   1231c:	ldr	r3, [sp, #80]	; 0x50
   12320:	ldr	r2, [sp, #36]	; 0x24
   12324:	str	r3, [sp, #12]
   12328:	mov	r1, sl
   1232c:	ldr	r3, [sp, #24]
   12330:	mov	r0, fp
   12334:	str	ip, [sp, #8]
   12338:	bl	11a58 <__assert_fail@plt+0xb38>
   1233c:	mov	r4, r0
   12340:	ldr	r3, [pc, #1304]	; 12860 <__assert_fail@plt+0x1940>
   12344:	ldr	r2, [sp, #116]	; 0x74
   12348:	mov	r0, r4
   1234c:	ldr	r3, [r3]
   12350:	cmp	r2, r3
   12354:	bne	13244 <__assert_fail@plt+0x2324>
   12358:	add	sp, sp, #124	; 0x7c
   1235c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12360:	mov	r5, #110	; 0x6e
   12364:	ldr	r3, [sp, #32]
   12368:	mov	r2, #0
   1236c:	cmp	r3, #0
   12370:	mov	r6, r2
   12374:	beq	12050 <__assert_fail@plt+0x1130>
   12378:	str	fp, [sp, #160]	; 0xa0
   1237c:	mov	fp, r8
   12380:	ldr	r8, [sp, #160]	; 0xa0
   12384:	mov	r3, r2
   12388:	ldr	r2, [sp, #28]
   1238c:	and	r2, r2, r3
   12390:	str	r2, [sp, #28]
   12394:	b	122f4 <__assert_fail@plt+0x13d4>
   12398:	mov	r5, #116	; 0x74
   1239c:	b	12364 <__assert_fail@plt+0x1444>
   123a0:	mov	r5, #102	; 0x66
   123a4:	ldr	r3, [sp, #32]
   123a8:	cmp	r3, #0
   123ac:	bne	12f58 <__assert_fail@plt+0x2038>
   123b0:	mov	r6, #0
   123b4:	b	12094 <__assert_fail@plt+0x1174>
   123b8:	mov	r5, #118	; 0x76
   123bc:	b	123a4 <__assert_fail@plt+0x1484>
   123c0:	mov	r7, #0
   123c4:	mov	r6, #0
   123c8:	b	12004 <__assert_fail@plt+0x10e4>
   123cc:	ldr	r3, [sp, #32]
   123d0:	cmp	r3, #0
   123d4:	bne	1319c <__assert_fail@plt+0x227c>
   123d8:	mov	r7, r3
   123dc:	ldr	r3, [sp, #44]	; 0x2c
   123e0:	sub	r2, fp, #2
   123e4:	eor	r3, r3, #1
   123e8:	clz	r2, r2
   123ec:	lsr	r2, r2, #5
   123f0:	ands	r3, r2, r3
   123f4:	beq	12e3c <__assert_fail@plt+0x1f1c>
   123f8:	cmp	sl, r4
   123fc:	movhi	r1, #39	; 0x27
   12400:	strbhi	r1, [r8, r4]
   12404:	add	r1, r4, #1
   12408:	cmp	sl, r1
   1240c:	movhi	r0, #36	; 0x24
   12410:	strbhi	r0, [r8, r1]
   12414:	add	r1, r4, #2
   12418:	cmp	sl, r1
   1241c:	movhi	r0, #39	; 0x27
   12420:	strbhi	r0, [r8, r1]
   12424:	add	r1, r4, #3
   12428:	cmp	sl, r1
   1242c:	bls	12e9c <__assert_fail@plt+0x1f7c>
   12430:	mov	r4, r1
   12434:	mov	r1, #92	; 0x5c
   12438:	strb	r1, [r8, r4]
   1243c:	mov	r1, r4
   12440:	str	r3, [sp, #44]	; 0x2c
   12444:	cmp	fp, #2
   12448:	add	r4, r4, #1
   1244c:	beq	12ee4 <__assert_fail@plt+0x1fc4>
   12450:	ldr	r0, [sp, #24]
   12454:	add	r3, r9, #1
   12458:	cmp	r3, r0
   1245c:	bcs	12474 <__assert_fail@plt+0x1554>
   12460:	ldr	r0, [sp, #36]	; 0x24
   12464:	ldrb	r3, [r0, r3]
   12468:	sub	r3, r3, #48	; 0x30
   1246c:	cmp	r3, #9
   12470:	bls	12ef4 <__assert_fail@plt+0x1fd4>
   12474:	mov	r5, #48	; 0x30
   12478:	ldr	r3, [sp, #28]
   1247c:	eor	r3, r3, #1
   12480:	orrs	r2, r2, r3
   12484:	mov	r3, r6
   12488:	moveq	r6, r2
   1248c:	beq	12008 <__assert_fail@plt+0x10e8>
   12490:	mov	r6, #0
   12494:	b	12030 <__assert_fail@plt+0x1110>
   12498:	mov	r2, #0
   1249c:	mov	r6, r2
   124a0:	mov	r5, #98	; 0x62
   124a4:	b	12050 <__assert_fail@plt+0x1130>
   124a8:	mov	r5, #97	; 0x61
   124ac:	b	123b0 <__assert_fail@plt+0x1490>
   124b0:	mov	r3, r7
   124b4:	mov	r6, r7
   124b8:	mov	r2, #0
   124bc:	mov	r7, r3
   124c0:	mov	r5, #32
   124c4:	b	11fe8 <__assert_fail@plt+0x10c8>
   124c8:	cmp	r9, #0
   124cc:	mov	r3, r7
   124d0:	bne	12a98 <__assert_fail@plt+0x1b78>
   124d4:	mov	r6, r7
   124d8:	mov	r2, r9
   124dc:	mov	r7, r3
   124e0:	b	11fe8 <__assert_fail@plt+0x10c8>
   124e4:	mov	r6, r7
   124e8:	b	12004 <__assert_fail@plt+0x10e4>
   124ec:	mov	r7, #0
   124f0:	ldr	r3, [sp, #64]	; 0x40
   124f4:	cmp	r3, #1
   124f8:	bne	12b54 <__assert_fail@plt+0x1c34>
   124fc:	bl	10e30 <__ctype_b_loc@plt>
   12500:	ldr	r2, [sp, #64]	; 0x40
   12504:	sxth	r3, r5
   12508:	mov	ip, r2
   1250c:	lsl	r3, r3, #1
   12510:	ldr	r2, [r0]
   12514:	ldrh	r3, [r2, r3]
   12518:	and	r3, r3, #16384	; 0x4000
   1251c:	cmp	r3, #0
   12520:	ldr	r3, [sp, #28]
   12524:	movne	r6, #1
   12528:	moveq	r6, #0
   1252c:	movne	r2, #0
   12530:	andeq	r2, r3, #1
   12534:	cmp	r2, #0
   12538:	bne	12e64 <__assert_fail@plt+0x1f44>
   1253c:	sub	r2, fp, #2
   12540:	clz	r2, r2
   12544:	lsr	r2, r2, #5
   12548:	b	11fe8 <__assert_fail@plt+0x10c8>
   1254c:	cmp	r4, #0
   12550:	bne	13210 <__assert_fail@plt+0x22f0>
   12554:	str	r4, [sp, #28]
   12558:	cmp	sl, #0
   1255c:	bne	13254 <__assert_fail@plt+0x2334>
   12560:	ldr	r3, [pc, #772]	; 1286c <__assert_fail@plt+0x194c>
   12564:	mov	r4, #1
   12568:	str	r4, [sp, #40]	; 0x28
   1256c:	str	r3, [sp, #60]	; 0x3c
   12570:	str	r4, [sp, #52]	; 0x34
   12574:	str	sl, [sp, #72]	; 0x48
   12578:	str	sl, [sp, #68]	; 0x44
   1257c:	str	sl, [sp, #44]	; 0x2c
   12580:	str	sl, [sp, #32]
   12584:	mov	r8, #2
   12588:	b	11b50 <__assert_fail@plt+0xc30>
   1258c:	ldr	r3, [sp, #36]	; 0x24
   12590:	ldrb	r5, [r3, r9]
   12594:	cmp	r5, #126	; 0x7e
   12598:	ldrls	pc, [pc, r5, lsl #2]
   1259c:	b	124f0 <__assert_fail@plt+0x15d0>
   125a0:	ldrdeq	r2, [r1], -r4
   125a4:	strdeq	r2, [r1], -r0
   125a8:	strdeq	r2, [r1], -r0
   125ac:	strdeq	r2, [r1], -r0
   125b0:	strdeq	r2, [r1], -r0
   125b4:	strdeq	r2, [r1], -r0
   125b8:	strdeq	r2, [r1], -r0
   125bc:	andeq	r2, r1, r0, asr #15
   125c0:	andeq	r2, r1, ip, lsr #15
   125c4:	andeq	r2, r1, r4, lsr #15
   125c8:	muleq	r1, ip, r7
   125cc:	andeq	r2, r1, ip, asr #16
   125d0:	andeq	r2, r1, r8, lsr r8
   125d4:	ldrdeq	r2, [r1], -r0
   125d8:	strdeq	r2, [r1], -r0
   125dc:	strdeq	r2, [r1], -r0
   125e0:	strdeq	r2, [r1], -r0
   125e4:	strdeq	r2, [r1], -r0
   125e8:	strdeq	r2, [r1], -r0
   125ec:	strdeq	r2, [r1], -r0
   125f0:	strdeq	r2, [r1], -r0
   125f4:	strdeq	r2, [r1], -r0
   125f8:	strdeq	r2, [r1], -r0
   125fc:	strdeq	r2, [r1], -r0
   12600:	strdeq	r2, [r1], -r0
   12604:	strdeq	r2, [r1], -r0
   12608:	strdeq	r2, [r1], -r0
   1260c:	strdeq	r2, [r1], -r0
   12610:	strdeq	r2, [r1], -r0
   12614:	strdeq	r2, [r1], -r0
   12618:	strdeq	r2, [r1], -r0
   1261c:	strdeq	r2, [r1], -r0
   12620:	andeq	r2, r1, r8, lsr #16
   12624:	andeq	r2, r1, r4, lsl r8
   12628:	andeq	r2, r1, r4, lsl r8
   1262c:	andeq	r2, r1, r4, lsl #16
   12630:	andeq	r2, r1, r4, lsl r8
   12634:	andeq	r2, r1, ip, lsr r5
   12638:	andeq	r2, r1, r4, lsl r8
   1263c:	andeq	r2, r1, r4, lsl #4
   12640:	andeq	r2, r1, r4, lsl r8
   12644:	andeq	r2, r1, r4, lsl r8
   12648:	andeq	r2, r1, r4, lsl r8
   1264c:	andeq	r2, r1, ip, lsr r5
   12650:	andeq	r2, r1, ip, lsr r5
   12654:	andeq	r2, r1, ip, lsr r5
   12658:	andeq	r2, r1, ip, lsr r5
   1265c:	andeq	r2, r1, ip, lsr r5
   12660:	andeq	r2, r1, ip, lsr r5
   12664:	andeq	r2, r1, ip, lsr r5
   12668:	andeq	r2, r1, ip, lsr r5
   1266c:	andeq	r2, r1, ip, lsr r5
   12670:	andeq	r2, r1, ip, lsr r5
   12674:	andeq	r2, r1, ip, lsr r5
   12678:	andeq	r2, r1, ip, lsr r5
   1267c:	andeq	r2, r1, ip, lsr r5
   12680:	andeq	r2, r1, ip, lsr r5
   12684:	andeq	r2, r1, ip, lsr r5
   12688:	andeq	r2, r1, ip, lsr r5
   1268c:	andeq	r2, r1, r4, lsl r8
   12690:	andeq	r2, r1, r4, lsl r8
   12694:	andeq	r2, r1, r4, lsl r8
   12698:	andeq	r2, r1, r4, lsl r8
   1269c:	ldrdeq	r2, [r1], -r8
   126a0:	strdeq	r2, [r1], -r0
   126a4:	andeq	r2, r1, ip, lsr r5
   126a8:	andeq	r2, r1, ip, lsr r5
   126ac:	andeq	r2, r1, ip, lsr r5
   126b0:	andeq	r2, r1, ip, lsr r5
   126b4:	andeq	r2, r1, ip, lsr r5
   126b8:	andeq	r2, r1, ip, lsr r5
   126bc:	andeq	r2, r1, ip, lsr r5
   126c0:	andeq	r2, r1, ip, lsr r5
   126c4:	andeq	r2, r1, ip, lsr r5
   126c8:	andeq	r2, r1, ip, lsr r5
   126cc:	andeq	r2, r1, ip, lsr r5
   126d0:	andeq	r2, r1, ip, lsr r5
   126d4:	andeq	r2, r1, ip, lsr r5
   126d8:	andeq	r2, r1, ip, lsr r5
   126dc:	andeq	r2, r1, ip, lsr r5
   126e0:	andeq	r2, r1, ip, lsr r5
   126e4:	andeq	r2, r1, ip, lsr r5
   126e8:	andeq	r2, r1, ip, lsr r5
   126ec:	andeq	r2, r1, ip, lsr r5
   126f0:	andeq	r2, r1, ip, lsr r5
   126f4:	andeq	r2, r1, ip, lsr r5
   126f8:	andeq	r2, r1, ip, lsr r5
   126fc:	andeq	r2, r1, ip, lsr r5
   12700:	andeq	r2, r1, ip, lsr r5
   12704:	andeq	r2, r1, ip, lsr r5
   12708:	andeq	r2, r1, ip, lsr r5
   1270c:	andeq	r2, r1, r4, lsl r8
   12710:	muleq	r1, r0, r1
   12714:	andeq	r2, r1, ip, lsr r5
   12718:	andeq	r2, r1, r4, lsl r8
   1271c:	andeq	r2, r1, ip, lsr r5
   12720:	andeq	r2, r1, r4, lsl r8
   12724:	andeq	r2, r1, ip, lsr r5
   12728:	andeq	r2, r1, ip, lsr r5
   1272c:	andeq	r2, r1, ip, lsr r5
   12730:	andeq	r2, r1, ip, lsr r5
   12734:	andeq	r2, r1, ip, lsr r5
   12738:	andeq	r2, r1, ip, lsr r5
   1273c:	andeq	r2, r1, ip, lsr r5
   12740:	andeq	r2, r1, ip, lsr r5
   12744:	andeq	r2, r1, ip, lsr r5
   12748:	andeq	r2, r1, ip, lsr r5
   1274c:	andeq	r2, r1, ip, lsr r5
   12750:	andeq	r2, r1, ip, lsr r5
   12754:	andeq	r2, r1, ip, lsr r5
   12758:	andeq	r2, r1, ip, lsr r5
   1275c:	andeq	r2, r1, ip, lsr r5
   12760:	andeq	r2, r1, ip, lsr r5
   12764:	andeq	r2, r1, ip, lsr r5
   12768:	andeq	r2, r1, ip, lsr r5
   1276c:	andeq	r2, r1, ip, lsr r5
   12770:	andeq	r2, r1, ip, lsr r5
   12774:	andeq	r2, r1, ip, lsr r5
   12778:	andeq	r2, r1, ip, lsr r5
   1277c:	andeq	r2, r1, ip, lsr r5
   12780:	andeq	r2, r1, ip, lsr r5
   12784:	andeq	r2, r1, ip, lsr r5
   12788:	andeq	r2, r1, ip, lsr r5
   1278c:	andeq	r1, r1, r8, lsr #31
   12790:	andeq	r2, r1, r4, lsl r8
   12794:	andeq	r1, r1, r8, lsr #31
   12798:	andeq	r2, r1, r4, lsl #16
   1279c:	mov	r3, #110	; 0x6e
   127a0:	b	122d4 <__assert_fail@plt+0x13b4>
   127a4:	mov	r3, #116	; 0x74
   127a8:	b	122d4 <__assert_fail@plt+0x13b4>
   127ac:	sub	r2, fp, #2
   127b0:	mov	r3, #98	; 0x62
   127b4:	clz	r2, r2
   127b8:	lsr	r2, r2, #5
   127bc:	b	121c0 <__assert_fail@plt+0x12a0>
   127c0:	sub	r2, fp, #2
   127c4:	mov	r3, #97	; 0x61
   127c8:	clz	r2, r2
   127cc:	lsr	r2, r2, #5
   127d0:	b	121c0 <__assert_fail@plt+0x12a0>
   127d4:	ldr	r3, [sp, #28]
   127d8:	cmp	r3, #0
   127dc:	bne	123cc <__assert_fail@plt+0x14ac>
   127e0:	ldr	r3, [sp, #164]	; 0xa4
   127e4:	tst	r3, #1
   127e8:	bne	12e5c <__assert_fail@plt+0x1f3c>
   127ec:	ldr	r6, [sp, #28]
   127f0:	sub	r2, fp, #2
   127f4:	mov	r7, r6
   127f8:	clz	r2, r2
   127fc:	lsr	r2, r2, #5
   12800:	b	11fe8 <__assert_fail@plt+0x10c8>
   12804:	sub	r2, fp, #2
   12808:	clz	r2, r2
   1280c:	lsr	r2, r2, #5
   12810:	b	11fd4 <__assert_fail@plt+0x10b4>
   12814:	sub	r2, fp, #2
   12818:	mov	r6, #0
   1281c:	clz	r2, r2
   12820:	lsr	r2, r2, #5
   12824:	b	11fdc <__assert_fail@plt+0x10bc>
   12828:	sub	r2, fp, #2
   1282c:	clz	r2, r2
   12830:	lsr	r2, r2, #5
   12834:	b	11fdc <__assert_fail@plt+0x10bc>
   12838:	sub	r2, fp, #2
   1283c:	mov	r3, #102	; 0x66
   12840:	clz	r2, r2
   12844:	lsr	r2, r2, #5
   12848:	b	121c0 <__assert_fail@plt+0x12a0>
   1284c:	sub	r2, fp, #2
   12850:	mov	r3, #118	; 0x76
   12854:	clz	r2, r2
   12858:	lsr	r2, r2, #5
   1285c:	b	121c0 <__assert_fail@plt+0x12a0>
   12860:	andeq	r5, r2, r8, lsl #30
   12864:	muleq	r1, r4, r8
   12868:	andeq	r5, r1, ip, ror r8
   1286c:	muleq	r1, r0, r8
   12870:	ldr	r3, [sp, #48]	; 0x30
   12874:	ldrb	r5, [r3]
   12878:	cmp	r5, #126	; 0x7e
   1287c:	ldrls	pc, [pc, r5, lsl #2]
   12880:	b	124ec <__assert_fail@plt+0x15cc>
   12884:	andeq	r2, r1, ip, asr #7
   12888:	andeq	r2, r1, ip, ror #9
   1288c:	andeq	r2, r1, ip, ror #9
   12890:	andeq	r2, r1, ip, ror #9
   12894:	andeq	r2, r1, ip, ror #9
   12898:	andeq	r2, r1, ip, ror #9
   1289c:	andeq	r2, r1, ip, ror #9
   128a0:	andeq	r2, r1, r4, asr #21
   128a4:			; <UNDEFINED> instruction: 0x00012abc
   128a8:	muleq	r1, r8, r3
   128ac:	andeq	r2, r1, r0, ror #6
   128b0:			; <UNDEFINED> instruction: 0x000123b8
   128b4:	andeq	r2, r1, r0, lsr #7
   128b8:			; <UNDEFINED> instruction: 0x00012ab0
   128bc:	andeq	r2, r1, ip, ror #9
   128c0:	andeq	r2, r1, ip, ror #9
   128c4:	andeq	r2, r1, ip, ror #9
   128c8:	andeq	r2, r1, ip, ror #9
   128cc:	andeq	r2, r1, ip, ror #9
   128d0:	andeq	r2, r1, ip, ror #9
   128d4:	andeq	r2, r1, ip, ror #9
   128d8:	andeq	r2, r1, ip, ror #9
   128dc:	andeq	r2, r1, ip, ror #9
   128e0:	andeq	r2, r1, ip, ror #9
   128e4:	andeq	r2, r1, ip, ror #9
   128e8:	andeq	r2, r1, ip, ror #9
   128ec:	andeq	r2, r1, ip, ror #9
   128f0:	andeq	r2, r1, ip, ror #9
   128f4:	andeq	r2, r1, ip, ror #9
   128f8:	andeq	r2, r1, ip, ror #9
   128fc:	andeq	r2, r1, ip, ror #9
   12900:	andeq	r2, r1, ip, ror #9
   12904:	andeq	r2, r1, r8, lsr #21
   12908:	andeq	r2, r1, r0, asr #7
   1290c:	andeq	r2, r1, r0, asr #7
   12910:	andeq	r2, r1, ip, lsl #21
   12914:	andeq	r2, r1, r0, asr #7
   12918:	andeq	r2, r1, r0, lsl #21
   1291c:	andeq	r2, r1, r0, asr #7
   12920:	andeq	r2, r1, r0, lsl #4
   12924:	andeq	r2, r1, r0, asr #7
   12928:	andeq	r2, r1, r0, asr #7
   1292c:	andeq	r2, r1, r0, asr #7
   12930:	andeq	r2, r1, r0, lsl #21
   12934:	andeq	r2, r1, r0, lsl #21
   12938:	andeq	r2, r1, r0, lsl #21
   1293c:	andeq	r2, r1, r0, lsl #21
   12940:	andeq	r2, r1, r0, lsl #21
   12944:	andeq	r2, r1, r0, lsl #21
   12948:	andeq	r2, r1, r0, lsl #21
   1294c:	andeq	r2, r1, r0, lsl #21
   12950:	andeq	r2, r1, r0, lsl #21
   12954:	andeq	r2, r1, r0, lsl #21
   12958:	andeq	r2, r1, r0, lsl #21
   1295c:	andeq	r2, r1, r0, lsl #21
   12960:	andeq	r2, r1, r0, lsl #21
   12964:	andeq	r2, r1, r0, lsl #21
   12968:	andeq	r2, r1, r0, lsl #21
   1296c:	andeq	r2, r1, r0, lsl #21
   12970:	andeq	r2, r1, r0, asr #7
   12974:	andeq	r2, r1, r0, asr #7
   12978:	andeq	r2, r1, r0, asr #7
   1297c:	andeq	r2, r1, r0, asr #7
   12980:	ldrdeq	r2, [r1], -r4
   12984:	andeq	r2, r1, ip, ror #9
   12988:	andeq	r2, r1, r0, lsl #21
   1298c:	andeq	r2, r1, r0, lsl #21
   12990:	andeq	r2, r1, r0, lsl #21
   12994:	andeq	r2, r1, r0, lsl #21
   12998:	andeq	r2, r1, r0, lsl #21
   1299c:	andeq	r2, r1, r0, lsl #21
   129a0:	andeq	r2, r1, r0, lsl #21
   129a4:	andeq	r2, r1, r0, lsl #21
   129a8:	andeq	r2, r1, r0, lsl #21
   129ac:	andeq	r2, r1, r0, lsl #21
   129b0:	andeq	r2, r1, r0, lsl #21
   129b4:	andeq	r2, r1, r0, lsl #21
   129b8:	andeq	r2, r1, r0, lsl #21
   129bc:	andeq	r2, r1, r0, lsl #21
   129c0:	andeq	r2, r1, r0, lsl #21
   129c4:	andeq	r2, r1, r0, lsl #21
   129c8:	andeq	r2, r1, r0, lsl #21
   129cc:	andeq	r2, r1, r0, lsl #21
   129d0:	andeq	r2, r1, r0, lsl #21
   129d4:	andeq	r2, r1, r0, lsl #21
   129d8:	andeq	r2, r1, r0, lsl #21
   129dc:	andeq	r2, r1, r0, lsl #21
   129e0:	andeq	r2, r1, r0, lsl #21
   129e4:	andeq	r2, r1, r0, lsl #21
   129e8:	andeq	r2, r1, r0, lsl #21
   129ec:	andeq	r2, r1, r0, lsl #21
   129f0:	andeq	r2, r1, r0, asr #7
   129f4:	andeq	r2, r1, ip, lsl #3
   129f8:	andeq	r2, r1, r0, lsl #21
   129fc:	andeq	r2, r1, r0, asr #7
   12a00:	andeq	r2, r1, r0, lsl #21
   12a04:	andeq	r2, r1, r0, asr #7
   12a08:	andeq	r2, r1, r0, lsl #21
   12a0c:	andeq	r2, r1, r0, lsl #21
   12a10:	andeq	r2, r1, r0, lsl #21
   12a14:	andeq	r2, r1, r0, lsl #21
   12a18:	andeq	r2, r1, r0, lsl #21
   12a1c:	andeq	r2, r1, r0, lsl #21
   12a20:	andeq	r2, r1, r0, lsl #21
   12a24:	andeq	r2, r1, r0, lsl #21
   12a28:	andeq	r2, r1, r0, lsl #21
   12a2c:	andeq	r2, r1, r0, lsl #21
   12a30:	andeq	r2, r1, r0, lsl #21
   12a34:	andeq	r2, r1, r0, lsl #21
   12a38:	andeq	r2, r1, r0, lsl #21
   12a3c:	andeq	r2, r1, r0, lsl #21
   12a40:	andeq	r2, r1, r0, lsl #21
   12a44:	andeq	r2, r1, r0, lsl #21
   12a48:	andeq	r2, r1, r0, lsl #21
   12a4c:	andeq	r2, r1, r0, lsl #21
   12a50:	andeq	r2, r1, r0, lsl #21
   12a54:	andeq	r2, r1, r0, lsl #21
   12a58:	andeq	r2, r1, r0, lsl #21
   12a5c:	andeq	r2, r1, r0, lsl #21
   12a60:	andeq	r2, r1, r0, lsl #21
   12a64:	andeq	r2, r1, r0, lsl #21
   12a68:	andeq	r2, r1, r0, lsl #21
   12a6c:	andeq	r2, r1, r0, lsl #21
   12a70:	andeq	r1, r1, r4, lsr #31
   12a74:	andeq	r2, r1, r0, asr #7
   12a78:	andeq	r1, r1, r4, lsr #31
   12a7c:	andeq	r2, r1, ip, lsl #21
   12a80:	mov	r6, r7
   12a84:	mov	r7, #0
   12a88:	b	12004 <__assert_fail@plt+0x10e4>
   12a8c:	cmp	r9, #0
   12a90:	mov	r3, #0
   12a94:	beq	124d4 <__assert_fail@plt+0x15b4>
   12a98:	mov	r6, #0
   12a9c:	mov	r7, r3
   12aa0:	mov	r3, r6
   12aa4:	b	12008 <__assert_fail@plt+0x10e8>
   12aa8:	mov	r3, #0
   12aac:	b	124b4 <__assert_fail@plt+0x1594>
   12ab0:	mov	r7, #0
   12ab4:	mov	r3, #114	; 0x72
   12ab8:	b	122d4 <__assert_fail@plt+0x13b4>
   12abc:	mov	r5, #98	; 0x62
   12ac0:	b	12364 <__assert_fail@plt+0x1444>
   12ac4:	mov	r5, #97	; 0x61
   12ac8:	b	123a4 <__assert_fail@plt+0x1484>
   12acc:	ldr	r3, [sp, #32]
   12ad0:	cmp	r3, #0
   12ad4:	bne	12f1c <__assert_fail@plt+0x1ffc>
   12ad8:	add	r9, r9, #1
   12adc:	ldr	r3, [sp, #44]	; 0x2c
   12ae0:	mov	r6, #0
   12ae4:	mov	r5, #92	; 0x5c
   12ae8:	b	1229c <__assert_fail@plt+0x137c>
   12aec:	ldr	r3, [sp, #36]	; 0x24
   12af0:	ldrb	r3, [r3, #1]
   12af4:	adds	r3, r3, #0
   12af8:	movne	r3, #1
   12afc:	b	11fc0 <__assert_fail@plt+0x10a0>
   12b00:	ldr	r3, [sp, #164]	; 0xa4
   12b04:	ands	r3, r3, #4
   12b08:	beq	12b2c <__assert_fail@plt+0x1c0c>
   12b0c:	ldr	r2, [sp, #24]
   12b10:	add	r3, r9, #2
   12b14:	cmp	r3, r2
   12b18:	bcs	12b2c <__assert_fail@plt+0x1c0c>
   12b1c:	ldr	r2, [sp, #48]	; 0x30
   12b20:	ldrb	r5, [r2, #1]
   12b24:	cmp	r5, #63	; 0x3f
   12b28:	beq	12f90 <__assert_fail@plt+0x2070>
   12b2c:	mov	r2, #0
   12b30:	mov	r6, r2
   12b34:	mov	r5, #63	; 0x3f
   12b38:	b	11fe8 <__assert_fail@plt+0x10c8>
   12b3c:	ldr	r3, [sp, #32]
   12b40:	cmp	r3, #0
   12b44:	bne	12f1c <__assert_fail@plt+0x1ffc>
   12b48:	mov	r6, r3
   12b4c:	mov	r5, #63	; 0x3f
   12b50:	b	12030 <__assert_fail@plt+0x1110>
   12b54:	ldr	r3, [sp, #24]
   12b58:	cmn	r3, #1
   12b5c:	mov	r3, #0
   12b60:	str	r3, [sp, #108]	; 0x6c
   12b64:	str	r3, [sp, #112]	; 0x70
   12b68:	bne	12b78 <__assert_fail@plt+0x1c58>
   12b6c:	ldr	r0, [sp, #36]	; 0x24
   12b70:	bl	10e54 <strlen@plt>
   12b74:	str	r0, [sp, #24]
   12b78:	mov	r3, #0
   12b7c:	str	sl, [sp, #88]	; 0x58
   12b80:	ldr	sl, [sp, #36]	; 0x24
   12b84:	str	r5, [sp, #92]	; 0x5c
   12b88:	mov	r5, r3
   12b8c:	str	r7, [sp, #96]	; 0x60
   12b90:	str	r4, [sp, #100]	; 0x64
   12b94:	str	r8, [sp, #84]	; 0x54
   12b98:	ldr	r3, [sp, #24]
   12b9c:	add	r4, r9, r5
   12ba0:	add	r7, sl, r4
   12ba4:	sub	r2, r3, r4
   12ba8:	mov	r1, r7
   12bac:	add	r3, sp, #108	; 0x6c
   12bb0:	add	r0, sp, #104	; 0x68
   12bb4:	bl	14df0 <__assert_fail@plt+0x3ed0>
   12bb8:	subs	r8, r0, #0
   12bbc:	beq	12c0c <__assert_fail@plt+0x1cec>
   12bc0:	cmn	r8, #1
   12bc4:	beq	12f6c <__assert_fail@plt+0x204c>
   12bc8:	cmn	r8, #2
   12bcc:	beq	1308c <__assert_fail@plt+0x216c>
   12bd0:	ldr	r3, [sp, #32]
   12bd4:	cmp	fp, #2
   12bd8:	movne	r3, #0
   12bdc:	andeq	r3, r3, #1
   12be0:	cmp	r3, #0
   12be4:	bne	12d6c <__assert_fail@plt+0x1e4c>
   12be8:	ldr	r0, [sp, #104]	; 0x68
   12bec:	bl	10d94 <iswprint@plt>
   12bf0:	add	r5, r5, r8
   12bf4:	cmp	r0, #0
   12bf8:	add	r0, sp, #108	; 0x6c
   12bfc:	moveq	r6, #0
   12c00:	bl	10d34 <mbsinit@plt>
   12c04:	cmp	r0, #0
   12c08:	beq	12b98 <__assert_fail@plt+0x1c78>
   12c0c:	ldr	r3, [sp, #28]
   12c10:	mov	ip, r5
   12c14:	eor	r2, r6, #1
   12c18:	ldr	r5, [sp, #92]	; 0x5c
   12c1c:	ldr	r7, [sp, #96]	; 0x60
   12c20:	ldr	r4, [sp, #100]	; 0x64
   12c24:	ldr	r8, [sp, #84]	; 0x54
   12c28:	ldr	sl, [sp, #88]	; 0x58
   12c2c:	and	r2, r2, r3
   12c30:	cmp	ip, #1
   12c34:	bls	12534 <__assert_fail@plt+0x1614>
   12c38:	add	r1, ip, r9
   12c3c:	ldr	lr, [sp, #48]	; 0x30
   12c40:	mov	r0, #0
   12c44:	str	r6, [sp, #48]	; 0x30
   12c48:	mov	ip, #39	; 0x27
   12c4c:	ldr	r6, [sp, #44]	; 0x2c
   12c50:	b	12d08 <__assert_fail@plt+0x1de8>
   12c54:	ldr	r0, [sp, #32]
   12c58:	sub	r3, fp, #2
   12c5c:	cmp	r0, #0
   12c60:	clz	r3, r3
   12c64:	lsr	r3, r3, #5
   12c68:	bne	12e70 <__assert_fail@plt+0x1f50>
   12c6c:	eor	r0, r6, #1
   12c70:	ands	r3, r3, r0
   12c74:	beq	12ca4 <__assert_fail@plt+0x1d84>
   12c78:	add	r0, r4, #1
   12c7c:	cmp	sl, r4
   12c80:	strbhi	ip, [r8, r4]
   12c84:	cmp	sl, r0
   12c88:	movhi	r6, #36	; 0x24
   12c8c:	strbhi	r6, [r8, r0]
   12c90:	add	r0, r4, #2
   12c94:	mov	r6, r3
   12c98:	add	r4, r4, #3
   12c9c:	cmp	sl, r0
   12ca0:	strbhi	ip, [r8, r0]
   12ca4:	cmp	sl, r4
   12ca8:	movhi	r3, #92	; 0x5c
   12cac:	strbhi	r3, [r8, r4]
   12cb0:	add	r3, r4, #1
   12cb4:	cmp	sl, r3
   12cb8:	lsrhi	r0, r5, #6
   12cbc:	addhi	r0, r0, #48	; 0x30
   12cc0:	strbhi	r0, [r8, r3]
   12cc4:	add	r0, r4, #2
   12cc8:	cmp	sl, r0
   12ccc:	lsrhi	r3, r5, #3
   12cd0:	andhi	r3, r3, #7
   12cd4:	addhi	r3, r3, #48	; 0x30
   12cd8:	add	r9, r9, #1
   12cdc:	strbhi	r3, [r8, r0]
   12ce0:	and	r5, r5, #7
   12ce4:	cmp	r9, r1
   12ce8:	add	r5, r5, #48	; 0x30
   12cec:	add	r4, r4, #3
   12cf0:	bcs	12e90 <__assert_fail@plt+0x1f70>
   12cf4:	mov	r0, r2
   12cf8:	cmp	sl, r4
   12cfc:	strbhi	r5, [r8, r4]
   12d00:	ldrb	r5, [lr, #1]!
   12d04:	add	r4, r4, #1
   12d08:	cmp	r2, #0
   12d0c:	bne	12c54 <__assert_fail@plt+0x1d34>
   12d10:	eor	r3, r0, #1
   12d14:	and	r3, r3, r6
   12d18:	cmp	r7, #0
   12d1c:	uxtb	r3, r3
   12d20:	beq	12d34 <__assert_fail@plt+0x1e14>
   12d24:	cmp	sl, r4
   12d28:	movhi	r7, #92	; 0x5c
   12d2c:	strbhi	r7, [r8, r4]
   12d30:	add	r4, r4, #1
   12d34:	add	r9, r9, #1
   12d38:	cmp	r9, r1
   12d3c:	bcs	12e84 <__assert_fail@plt+0x1f64>
   12d40:	cmp	r3, #0
   12d44:	beq	12eb0 <__assert_fail@plt+0x1f90>
   12d48:	cmp	sl, r4
   12d4c:	add	r3, r4, #1
   12d50:	strbhi	ip, [r8, r4]
   12d54:	mov	r7, #0
   12d58:	cmp	sl, r3
   12d5c:	strbhi	ip, [r8, r3]
   12d60:	add	r4, r4, #2
   12d64:	mov	r6, r7
   12d68:	b	12cf8 <__assert_fail@plt+0x1dd8>
   12d6c:	cmp	r8, #1
   12d70:	beq	12be8 <__assert_fail@plt+0x1cc8>
   12d74:	add	r1, r4, #1
   12d78:	add	r3, sl, r8
   12d7c:	add	r1, sl, r1
   12d80:	add	r4, r3, r4
   12d84:	ldrb	r3, [r1], #1
   12d88:	sub	r3, r3, #91	; 0x5b
   12d8c:	cmp	r3, #33	; 0x21
   12d90:	ldrls	pc, [pc, r3, lsl #2]
   12d94:	b	12e20 <__assert_fail@plt+0x1f00>
   12d98:	andeq	r2, r1, ip, lsr #28
   12d9c:	andeq	r2, r1, ip, lsr #28
   12da0:	andeq	r2, r1, r0, lsr #28
   12da4:	andeq	r2, r1, ip, lsr #28
   12da8:	andeq	r2, r1, r0, lsr #28
   12dac:	andeq	r2, r1, ip, lsr #28
   12db0:	andeq	r2, r1, r0, lsr #28
   12db4:	andeq	r2, r1, r0, lsr #28
   12db8:	andeq	r2, r1, r0, lsr #28
   12dbc:	andeq	r2, r1, r0, lsr #28
   12dc0:	andeq	r2, r1, r0, lsr #28
   12dc4:	andeq	r2, r1, r0, lsr #28
   12dc8:	andeq	r2, r1, r0, lsr #28
   12dcc:	andeq	r2, r1, r0, lsr #28
   12dd0:	andeq	r2, r1, r0, lsr #28
   12dd4:	andeq	r2, r1, r0, lsr #28
   12dd8:	andeq	r2, r1, r0, lsr #28
   12ddc:	andeq	r2, r1, r0, lsr #28
   12de0:	andeq	r2, r1, r0, lsr #28
   12de4:	andeq	r2, r1, r0, lsr #28
   12de8:	andeq	r2, r1, r0, lsr #28
   12dec:	andeq	r2, r1, r0, lsr #28
   12df0:	andeq	r2, r1, r0, lsr #28
   12df4:	andeq	r2, r1, r0, lsr #28
   12df8:	andeq	r2, r1, r0, lsr #28
   12dfc:	andeq	r2, r1, r0, lsr #28
   12e00:	andeq	r2, r1, r0, lsr #28
   12e04:	andeq	r2, r1, r0, lsr #28
   12e08:	andeq	r2, r1, r0, lsr #28
   12e0c:	andeq	r2, r1, r0, lsr #28
   12e10:	andeq	r2, r1, r0, lsr #28
   12e14:	andeq	r2, r1, r0, lsr #28
   12e18:	andeq	r2, r1, r0, lsr #28
   12e1c:	andeq	r2, r1, ip, lsr #28
   12e20:	cmp	r4, r1
   12e24:	bne	12d84 <__assert_fail@plt+0x1e64>
   12e28:	b	12be8 <__assert_fail@plt+0x1cc8>
   12e2c:	ldr	fp, [sp, #84]	; 0x54
   12e30:	ldr	sl, [sp, #88]	; 0x58
   12e34:	mov	r8, #2
   12e38:	b	122f4 <__assert_fail@plt+0x13d4>
   12e3c:	cmp	sl, r4
   12e40:	movls	r1, r4
   12e44:	bls	12444 <__assert_fail@plt+0x1524>
   12e48:	ldr	r3, [sp, #44]	; 0x2c
   12e4c:	b	12434 <__assert_fail@plt+0x1514>
   12e50:	str	sl, [sp, #72]	; 0x48
   12e54:	ldr	sl, [sp, #32]
   12e58:	b	1226c <__assert_fail@plt+0x134c>
   12e5c:	add	r9, r9, #1
   12e60:	b	11b60 <__assert_fail@plt+0xc40>
   12e64:	ldr	r2, [sp, #28]
   12e68:	mov	r6, #0
   12e6c:	b	12c38 <__assert_fail@plt+0x1d18>
   12e70:	str	fp, [sp, #160]	; 0xa0
   12e74:	str	r3, [sp, #28]
   12e78:	mov	fp, r8
   12e7c:	ldr	r8, [sp, #160]	; 0xa0
   12e80:	b	122f4 <__assert_fail@plt+0x13d4>
   12e84:	str	r6, [sp, #44]	; 0x2c
   12e88:	ldr	r6, [sp, #48]	; 0x30
   12e8c:	b	1229c <__assert_fail@plt+0x137c>
   12e90:	str	r6, [sp, #44]	; 0x2c
   12e94:	ldr	r6, [sp, #48]	; 0x30
   12e98:	b	120a8 <__assert_fail@plt+0x1188>
   12e9c:	add	r4, r4, #4
   12ea0:	str	r3, [sp, #44]	; 0x2c
   12ea4:	mov	r6, #0
   12ea8:	mov	r5, #48	; 0x30
   12eac:	b	12030 <__assert_fail@plt+0x1110>
   12eb0:	mov	r7, r3
   12eb4:	b	12cf8 <__assert_fail@plt+0x1dd8>
   12eb8:	ldr	r3, [pc, #-1624]	; 12868 <__assert_fail@plt+0x1948>
   12ebc:	mov	r4, #1
   12ec0:	str	r4, [sp, #40]	; 0x28
   12ec4:	str	r4, [sp, #28]
   12ec8:	str	r4, [sp, #52]	; 0x34
   12ecc:	str	sl, [sp, #72]	; 0x48
   12ed0:	str	sl, [sp, #68]	; 0x44
   12ed4:	str	sl, [sp, #44]	; 0x2c
   12ed8:	str	sl, [sp, #32]
   12edc:	str	r3, [sp, #60]	; 0x3c
   12ee0:	b	11b50 <__assert_fail@plt+0xc30>
   12ee4:	mov	r3, r6
   12ee8:	mov	r5, #48	; 0x30
   12eec:	mov	r6, #0
   12ef0:	b	12030 <__assert_fail@plt+0x1110>
   12ef4:	cmp	sl, r4
   12ef8:	movhi	r3, #48	; 0x30
   12efc:	strbhi	r3, [r8, r4]
   12f00:	add	r3, r1, #2
   12f04:	cmp	sl, r3
   12f08:	movhi	r0, #48	; 0x30
   12f0c:	strbhi	r0, [r8, r3]
   12f10:	add	r4, r1, #3
   12f14:	mov	r5, #48	; 0x30
   12f18:	b	12478 <__assert_fail@plt+0x1558>
   12f1c:	str	fp, [sp, #160]	; 0xa0
   12f20:	mov	fp, r8
   12f24:	ldr	r8, [sp, #160]	; 0xa0
   12f28:	b	122f4 <__assert_fail@plt+0x13d4>
   12f2c:	ldr	r2, [sp, #80]	; 0x50
   12f30:	ldrb	r3, [r2]
   12f34:	cmp	r3, #0
   12f38:	beq	11b20 <__assert_fail@plt+0xc00>
   12f3c:	cmp	sl, r4
   12f40:	strbhi	r3, [fp, r4]
   12f44:	ldrb	r3, [r2, #1]!
   12f48:	add	r4, r4, #1
   12f4c:	cmp	r3, #0
   12f50:	bne	12f3c <__assert_fail@plt+0x201c>
   12f54:	b	11b20 <__assert_fail@plt+0xc00>
   12f58:	str	fp, [sp, #160]	; 0xa0
   12f5c:	mov	r3, #0
   12f60:	mov	fp, r8
   12f64:	ldr	r8, [sp, #160]	; 0xa0
   12f68:	b	12388 <__assert_fail@plt+0x1468>
   12f6c:	mov	ip, r5
   12f70:	ldr	r7, [sp, #96]	; 0x60
   12f74:	ldr	r5, [sp, #92]	; 0x5c
   12f78:	ldr	r4, [sp, #100]	; 0x64
   12f7c:	ldr	r8, [sp, #84]	; 0x54
   12f80:	ldr	sl, [sp, #88]	; 0x58
   12f84:	ldr	r2, [sp, #28]
   12f88:	mov	r6, #0
   12f8c:	b	12c30 <__assert_fail@plt+0x1d10>
   12f90:	ldr	r2, [sp, #36]	; 0x24
   12f94:	ldrb	r1, [r2, r3]
   12f98:	sub	r2, r1, #33	; 0x21
   12f9c:	cmp	r2, #29
   12fa0:	ldrls	pc, [pc, r2, lsl #2]
   12fa4:	b	13080 <__assert_fail@plt+0x2160>
   12fa8:	andeq	r3, r1, r0, lsr #32
   12fac:	andeq	r3, r1, r0, lsl #1
   12fb0:	andeq	r3, r1, r0, lsl #1
   12fb4:	andeq	r3, r1, r0, lsl #1
   12fb8:	andeq	r3, r1, r0, lsl #1
   12fbc:	andeq	r3, r1, r0, lsl #1
   12fc0:	andeq	r3, r1, r0, lsr #32
   12fc4:	andeq	r3, r1, r0, lsr #32
   12fc8:	andeq	r3, r1, r0, lsr #32
   12fcc:	andeq	r3, r1, r0, lsl #1
   12fd0:	andeq	r3, r1, r0, lsl #1
   12fd4:	andeq	r3, r1, r0, lsl #1
   12fd8:	andeq	r3, r1, r0, lsr #32
   12fdc:	andeq	r3, r1, r0, lsl #1
   12fe0:	andeq	r3, r1, r0, lsr #32
   12fe4:	andeq	r3, r1, r0, lsl #1
   12fe8:	andeq	r3, r1, r0, lsl #1
   12fec:	andeq	r3, r1, r0, lsl #1
   12ff0:	andeq	r3, r1, r0, lsl #1
   12ff4:	andeq	r3, r1, r0, lsl #1
   12ff8:	andeq	r3, r1, r0, lsl #1
   12ffc:	andeq	r3, r1, r0, lsl #1
   13000:	andeq	r3, r1, r0, lsl #1
   13004:	andeq	r3, r1, r0, lsl #1
   13008:	andeq	r3, r1, r0, lsl #1
   1300c:	andeq	r3, r1, r0, lsl #1
   13010:	andeq	r3, r1, r0, lsl #1
   13014:	andeq	r3, r1, r0, lsr #32
   13018:	andeq	r3, r1, r0, lsr #32
   1301c:	andeq	r3, r1, r0, lsr #32
   13020:	ldr	r2, [sp, #32]
   13024:	cmp	r2, #0
   13028:	bne	1312c <__assert_fail@plt+0x220c>
   1302c:	cmp	sl, r4
   13030:	movhi	r2, #63	; 0x3f
   13034:	strbhi	r2, [r8, r4]
   13038:	add	r2, r4, #1
   1303c:	cmp	sl, r2
   13040:	movhi	r0, #34	; 0x22
   13044:	strbhi	r0, [r8, r2]
   13048:	add	r2, r4, #2
   1304c:	cmp	sl, r2
   13050:	movhi	r0, #34	; 0x22
   13054:	strbhi	r0, [r8, r2]
   13058:	add	r2, r4, #3
   1305c:	cmp	sl, r2
   13060:	movhi	r0, #63	; 0x3f
   13064:	strbhi	r0, [r8, r2]
   13068:	mov	r2, #0
   1306c:	add	r4, r4, #4
   13070:	mov	r5, r1
   13074:	mov	r9, r3
   13078:	mov	r6, r2
   1307c:	b	12478 <__assert_fail@plt+0x1558>
   13080:	mov	r2, #0
   13084:	mov	r6, r2
   13088:	b	11fe8 <__assert_fail@plt+0x10c8>
   1308c:	ldr	r0, [sp, #24]
   13090:	mov	r1, r4
   13094:	cmp	r1, r0
   13098:	mov	r2, r7
   1309c:	mov	r3, r5
   130a0:	mov	ip, r5
   130a4:	ldr	r7, [sp, #96]	; 0x60
   130a8:	ldr	r5, [sp, #92]	; 0x5c
   130ac:	ldr	r4, [sp, #100]	; 0x64
   130b0:	ldr	r8, [sp, #84]	; 0x54
   130b4:	ldr	sl, [sp, #88]	; 0x58
   130b8:	bcs	130ec <__assert_fail@plt+0x21cc>
   130bc:	ldrb	r6, [r2]
   130c0:	cmp	r6, #0
   130c4:	bne	130d8 <__assert_fail@plt+0x21b8>
   130c8:	b	13208 <__assert_fail@plt+0x22e8>
   130cc:	ldrb	r6, [r2, #1]!
   130d0:	cmp	r6, #0
   130d4:	beq	13190 <__assert_fail@plt+0x2270>
   130d8:	add	r3, r3, #1
   130dc:	add	r1, r9, r3
   130e0:	cmp	r1, r0
   130e4:	bcc	130cc <__assert_fail@plt+0x21ac>
   130e8:	mov	ip, r3
   130ec:	ldr	r2, [sp, #28]
   130f0:	mov	r6, #0
   130f4:	b	12c30 <__assert_fail@plt+0x1d10>
   130f8:	mov	r3, #1
   130fc:	str	r3, [sp, #40]	; 0x28
   13100:	str	r3, [sp, #32]
   13104:	str	r3, [sp, #28]
   13108:	str	r3, [sp, #52]	; 0x34
   1310c:	ldr	r3, [pc, #-2220]	; 12868 <__assert_fail@plt+0x1948>
   13110:	mov	r2, #0
   13114:	str	r2, [sp, #68]	; 0x44
   13118:	str	r2, [sp, #44]	; 0x2c
   1311c:	str	r2, [sp, #72]	; 0x48
   13120:	mov	r4, r2
   13124:	str	r3, [sp, #60]	; 0x3c
   13128:	b	11b50 <__assert_fail@plt+0xc30>
   1312c:	str	fp, [sp, #160]	; 0xa0
   13130:	mov	fp, r8
   13134:	ldr	r8, [sp, #160]	; 0xa0
   13138:	b	12300 <__assert_fail@plt+0x13e0>
   1313c:	mov	r2, r3
   13140:	ldr	r3, [sp, #60]	; 0x3c
   13144:	cmp	r3, #0
   13148:	moveq	r2, #0
   1314c:	andne	r2, r2, #1
   13150:	cmp	r2, #0
   13154:	beq	13180 <__assert_fail@plt+0x2260>
   13158:	mov	r2, r3
   1315c:	ldrb	r3, [r3]
   13160:	cmp	r3, #0
   13164:	beq	13180 <__assert_fail@plt+0x2260>
   13168:	cmp	sl, r4
   1316c:	strbhi	r3, [fp, r4]
   13170:	ldrb	r3, [r2, #1]!
   13174:	add	r4, r4, #1
   13178:	cmp	r3, #0
   1317c:	bne	13168 <__assert_fail@plt+0x2248>
   13180:	cmp	sl, r4
   13184:	movhi	r3, #0
   13188:	strbhi	r3, [fp, r4]
   1318c:	b	12340 <__assert_fail@plt+0x1420>
   13190:	mov	ip, r3
   13194:	ldr	r2, [sp, #28]
   13198:	b	12c30 <__assert_fail@plt+0x1d10>
   1319c:	str	fp, [sp, #160]	; 0xa0
   131a0:	mov	fp, r8
   131a4:	ldr	r8, [sp, #160]	; 0xa0
   131a8:	sub	r3, r8, #2
   131ac:	clz	r3, r3
   131b0:	lsr	r3, r3, #5
   131b4:	str	r3, [sp, #28]
   131b8:	b	122f4 <__assert_fail@plt+0x13d4>
   131bc:	ldr	r3, [sp, #76]	; 0x4c
   131c0:	mov	ip, #5
   131c4:	str	r3, [sp, #16]
   131c8:	ldr	r3, [sp, #80]	; 0x50
   131cc:	ldr	r2, [sp, #36]	; 0x24
   131d0:	str	r3, [sp, #12]
   131d4:	ldr	r3, [sp, #56]	; 0x38
   131d8:	ldr	r1, [sp, #72]	; 0x48
   131dc:	str	r3, [sp, #8]
   131e0:	ldr	r3, [sp, #164]	; 0xa4
   131e4:	mov	r0, fp
   131e8:	str	r3, [sp, #4]
   131ec:	str	ip, [sp]
   131f0:	ldr	r3, [sp, #24]
   131f4:	bl	11a58 <__assert_fail@plt+0xb38>
   131f8:	mov	r4, r0
   131fc:	b	12340 <__assert_fail@plt+0x1420>
   13200:	mov	r8, #2
   13204:	b	122f4 <__assert_fail@plt+0x13d4>
   13208:	ldr	r2, [sp, #28]
   1320c:	b	12c30 <__assert_fail@plt+0x1d10>
   13210:	mov	r3, #0
   13214:	str	r3, [sp, #68]	; 0x44
   13218:	str	r3, [sp, #44]	; 0x2c
   1321c:	str	r3, [sp, #72]	; 0x48
   13220:	str	r3, [sp, #28]
   13224:	mov	r4, r3
   13228:	ldr	r3, [pc, #-2500]	; 1286c <__assert_fail@plt+0x194c>
   1322c:	mov	r2, #1
   13230:	str	r2, [sp, #40]	; 0x28
   13234:	str	r2, [sp, #32]
   13238:	str	r2, [sp, #52]	; 0x34
   1323c:	str	r3, [sp, #60]	; 0x3c
   13240:	b	11b50 <__assert_fail@plt+0xc30>
   13244:	bl	10d64 <__stack_chk_fail@plt>
   13248:	mov	r5, r3
   1324c:	mov	r6, #0
   13250:	b	12044 <__assert_fail@plt+0x1124>
   13254:	mov	r3, #0
   13258:	mov	r2, #1
   1325c:	str	r3, [sp, #44]	; 0x2c
   13260:	str	r3, [sp, #72]	; 0x48
   13264:	str	r2, [sp, #40]	; 0x28
   13268:	b	12160 <__assert_fail@plt+0x1240>
   1326c:	bl	10f14 <abort@plt>
   13270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13274:	sub	sp, sp, #44	; 0x2c
   13278:	mov	r6, r0
   1327c:	mov	r4, r3
   13280:	mov	sl, r1
   13284:	mov	fp, r2
   13288:	bl	10e6c <__errno_location@plt>
   1328c:	ldr	r7, [pc, #364]	; 13400 <__assert_fail@plt+0x24e0>
   13290:	cmp	r6, #0
   13294:	ldr	r5, [r7]
   13298:	ldr	r3, [r0]
   1329c:	str	r3, [sp, #24]
   132a0:	blt	133fc <__assert_fail@plt+0x24dc>
   132a4:	ldr	r3, [r7, #4]
   132a8:	mov	r8, r0
   132ac:	cmp	r3, r6
   132b0:	bgt	132fc <__assert_fail@plt+0x23dc>
   132b4:	cmn	r6, #-268435454	; 0xf0000002
   132b8:	bgt	133f8 <__assert_fail@plt+0x24d8>
   132bc:	add	r9, r6, #1
   132c0:	add	r3, r7, #8
   132c4:	cmp	r5, r3
   132c8:	lsl	r1, r9, #3
   132cc:	beq	133d8 <__assert_fail@plt+0x24b8>
   132d0:	mov	r0, r5
   132d4:	bl	14064 <__assert_fail@plt+0x3144>
   132d8:	mov	r5, r0
   132dc:	str	r0, [r7]
   132e0:	ldr	r0, [r7, #4]
   132e4:	mov	r1, #0
   132e8:	sub	r2, r9, r0
   132ec:	add	r0, r5, r0, lsl #3
   132f0:	lsl	r2, r2, #3
   132f4:	bl	10e84 <memset@plt>
   132f8:	str	r9, [r7, #4]
   132fc:	add	r3, r5, r6, lsl #3
   13300:	ldr	r1, [r4, #4]
   13304:	ldr	r7, [r3, #4]
   13308:	ldr	r9, [r5, r6, lsl #3]
   1330c:	ldr	r2, [r4, #40]	; 0x28
   13310:	ldr	ip, [r4, #44]	; 0x2c
   13314:	str	r3, [sp, #28]
   13318:	ldr	r3, [r4]
   1331c:	orr	r1, r1, #1
   13320:	add	lr, r4, #8
   13324:	str	r1, [sp, #36]	; 0x24
   13328:	str	r1, [sp, #4]
   1332c:	str	r2, [sp, #12]
   13330:	str	r3, [sp]
   13334:	mov	r0, r7
   13338:	mov	r1, r9
   1333c:	str	ip, [sp, #16]
   13340:	str	lr, [sp, #8]
   13344:	mov	r3, fp
   13348:	mov	r2, sl
   1334c:	str	lr, [sp, #32]
   13350:	bl	11a58 <__assert_fail@plt+0xb38>
   13354:	cmp	r9, r0
   13358:	bhi	133c4 <__assert_fail@plt+0x24a4>
   1335c:	ldr	r3, [pc, #160]	; 13404 <__assert_fail@plt+0x24e4>
   13360:	add	r9, r0, #1
   13364:	cmp	r7, r3
   13368:	str	r9, [r5, r6, lsl #3]
   1336c:	beq	13378 <__assert_fail@plt+0x2458>
   13370:	mov	r0, r7
   13374:	bl	10d04 <free@plt>
   13378:	mov	r0, r9
   1337c:	bl	14008 <__assert_fail@plt+0x30e8>
   13380:	ldr	lr, [sp, #28]
   13384:	ldr	ip, [r4, #44]	; 0x2c
   13388:	ldr	r5, [r4, #40]	; 0x28
   1338c:	mov	r3, fp
   13390:	mov	r2, sl
   13394:	mov	r1, r9
   13398:	str	r0, [lr, #4]
   1339c:	ldr	lr, [r4]
   133a0:	ldr	r4, [sp, #32]
   133a4:	str	ip, [sp, #16]
   133a8:	str	r4, [sp, #8]
   133ac:	ldr	r4, [sp, #36]	; 0x24
   133b0:	str	r5, [sp, #12]
   133b4:	str	r4, [sp, #4]
   133b8:	str	lr, [sp]
   133bc:	mov	r7, r0
   133c0:	bl	11a58 <__assert_fail@plt+0xb38>
   133c4:	ldr	r3, [sp, #24]
   133c8:	mov	r0, r7
   133cc:	str	r3, [r8]
   133d0:	add	sp, sp, #44	; 0x2c
   133d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d8:	mov	r0, #0
   133dc:	bl	14064 <__assert_fail@plt+0x3144>
   133e0:	ldr	r3, [pc, #32]	; 13408 <__assert_fail@plt+0x24e8>
   133e4:	mov	r5, r0
   133e8:	ldm	r3, {r0, r1}
   133ec:	str	r5, [r7]
   133f0:	stm	r5, {r0, r1}
   133f4:	b	132e0 <__assert_fail@plt+0x23c0>
   133f8:	bl	14250 <__assert_fail@plt+0x3330>
   133fc:	bl	10f14 <abort@plt>
   13400:	andeq	r6, r2, ip, ror #1
   13404:	andeq	r6, r2, ip, asr r1
   13408:	strdeq	r6, [r2], -r4
   1340c:	push	{r4, r5, r6, lr}
   13410:	mov	r5, r0
   13414:	bl	10e6c <__errno_location@plt>
   13418:	cmp	r5, #0
   1341c:	mov	r1, #48	; 0x30
   13420:	mov	r4, r0
   13424:	ldr	r0, [pc, #16]	; 1343c <__assert_fail@plt+0x251c>
   13428:	ldr	r6, [r4]
   1342c:	movne	r0, r5
   13430:	bl	14210 <__assert_fail@plt+0x32f0>
   13434:	str	r6, [r4]
   13438:	pop	{r4, r5, r6, pc}
   1343c:	andeq	r6, r2, ip, asr r2
   13440:	ldr	r3, [pc, #12]	; 13454 <__assert_fail@plt+0x2534>
   13444:	cmp	r0, #0
   13448:	moveq	r0, r3
   1344c:	ldr	r0, [r0]
   13450:	bx	lr
   13454:	andeq	r6, r2, ip, asr r2
   13458:	ldr	r3, [pc, #12]	; 1346c <__assert_fail@plt+0x254c>
   1345c:	cmp	r0, #0
   13460:	moveq	r0, r3
   13464:	str	r1, [r0]
   13468:	bx	lr
   1346c:	andeq	r6, r2, ip, asr r2
   13470:	ldr	r3, [pc, #52]	; 134ac <__assert_fail@plt+0x258c>
   13474:	cmp	r0, #0
   13478:	moveq	r0, r3
   1347c:	add	r3, r0, #8
   13480:	push	{lr}		; (str lr, [sp, #-4]!)
   13484:	lsr	lr, r1, #5
   13488:	and	r1, r1, #31
   1348c:	ldr	ip, [r3, lr, lsl #2]
   13490:	lsr	r0, ip, r1
   13494:	eor	r2, r2, r0
   13498:	and	r2, r2, #1
   1349c:	and	r0, r0, #1
   134a0:	eor	r1, ip, r2, lsl r1
   134a4:	str	r1, [r3, lr, lsl #2]
   134a8:	pop	{pc}		; (ldr pc, [sp], #4)
   134ac:	andeq	r6, r2, ip, asr r2
   134b0:	ldr	r3, [pc, #16]	; 134c8 <__assert_fail@plt+0x25a8>
   134b4:	cmp	r0, #0
   134b8:	movne	r3, r0
   134bc:	ldr	r0, [r3, #4]
   134c0:	str	r1, [r3, #4]
   134c4:	bx	lr
   134c8:	andeq	r6, r2, ip, asr r2
   134cc:	ldr	r3, [pc, #44]	; 13500 <__assert_fail@plt+0x25e0>
   134d0:	cmp	r0, #0
   134d4:	moveq	r0, r3
   134d8:	mov	ip, #10
   134dc:	cmp	r2, #0
   134e0:	cmpne	r1, #0
   134e4:	str	ip, [r0]
   134e8:	beq	134f8 <__assert_fail@plt+0x25d8>
   134ec:	str	r1, [r0, #40]	; 0x28
   134f0:	str	r2, [r0, #44]	; 0x2c
   134f4:	bx	lr
   134f8:	push	{r4, lr}
   134fc:	bl	10f14 <abort@plt>
   13500:	andeq	r6, r2, ip, asr r2
   13504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13508:	sub	sp, sp, #24
   1350c:	ldr	ip, [pc, #108]	; 13580 <__assert_fail@plt+0x2660>
   13510:	ldr	r4, [sp, #56]	; 0x38
   13514:	mov	r9, r2
   13518:	cmp	r4, #0
   1351c:	moveq	r4, ip
   13520:	mov	sl, r3
   13524:	mov	r7, r0
   13528:	mov	r8, r1
   1352c:	bl	10e6c <__errno_location@plt>
   13530:	ldr	r3, [r4, #44]	; 0x2c
   13534:	mov	r1, r8
   13538:	ldr	r6, [r0]
   1353c:	str	r3, [sp, #16]
   13540:	ldr	r2, [r4, #40]	; 0x28
   13544:	add	r3, r4, #8
   13548:	str	r3, [sp, #8]
   1354c:	str	r2, [sp, #12]
   13550:	ldr	r2, [r4, #4]
   13554:	mov	r5, r0
   13558:	str	r2, [sp, #4]
   1355c:	ldr	ip, [r4]
   13560:	mov	r3, sl
   13564:	mov	r2, r9
   13568:	mov	r0, r7
   1356c:	str	ip, [sp]
   13570:	bl	11a58 <__assert_fail@plt+0xb38>
   13574:	str	r6, [r5]
   13578:	add	sp, sp, #24
   1357c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13580:	andeq	r6, r2, ip, asr r2
   13584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13588:	cmp	r3, #0
   1358c:	sub	sp, sp, #44	; 0x2c
   13590:	ldr	r4, [pc, #192]	; 13658 <__assert_fail@plt+0x2738>
   13594:	mov	r6, r2
   13598:	movne	r4, r3
   1359c:	mov	r9, r1
   135a0:	mov	r8, r0
   135a4:	bl	10e6c <__errno_location@plt>
   135a8:	ldr	r3, [r4, #44]	; 0x2c
   135ac:	ldr	r5, [r4, #4]
   135b0:	add	sl, r4, #8
   135b4:	cmp	r6, #0
   135b8:	orreq	r5, r5, #1
   135bc:	mov	r1, #0
   135c0:	ldr	r2, [r0]
   135c4:	str	r3, [sp, #16]
   135c8:	ldr	r3, [r4, #40]	; 0x28
   135cc:	stmib	sp, {r5, sl}
   135d0:	str	r3, [sp, #12]
   135d4:	ldr	r3, [r4]
   135d8:	mov	r7, r0
   135dc:	str	r2, [sp, #28]
   135e0:	str	r3, [sp]
   135e4:	mov	r2, r8
   135e8:	mov	r3, r9
   135ec:	mov	r0, r1
   135f0:	bl	11a58 <__assert_fail@plt+0xb38>
   135f4:	add	r1, r0, #1
   135f8:	mov	fp, r0
   135fc:	mov	r0, r1
   13600:	str	r1, [sp, #36]	; 0x24
   13604:	bl	14008 <__assert_fail@plt+0x30e8>
   13608:	ldr	r3, [r4, #44]	; 0x2c
   1360c:	mov	r2, r8
   13610:	str	r3, [sp, #16]
   13614:	ldr	r3, [r4, #40]	; 0x28
   13618:	str	r5, [sp, #4]
   1361c:	str	r3, [sp, #12]
   13620:	str	sl, [sp, #8]
   13624:	ldr	ip, [r4]
   13628:	ldr	r1, [sp, #36]	; 0x24
   1362c:	mov	r3, r9
   13630:	str	ip, [sp]
   13634:	str	r0, [sp, #32]
   13638:	bl	11a58 <__assert_fail@plt+0xb38>
   1363c:	ldr	r2, [sp, #28]
   13640:	cmp	r6, #0
   13644:	str	r2, [r7]
   13648:	ldr	r0, [sp, #32]
   1364c:	strne	fp, [r6]
   13650:	add	sp, sp, #44	; 0x2c
   13654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13658:	andeq	r6, r2, ip, asr r2
   1365c:	mov	r3, r2
   13660:	mov	r2, #0
   13664:	b	13584 <__assert_fail@plt+0x2664>
   13668:	push	{r4, r5, r6, r7, r8, lr}
   1366c:	ldr	r6, [pc, #112]	; 136e4 <__assert_fail@plt+0x27c4>
   13670:	ldr	r3, [r6, #4]
   13674:	ldr	r7, [r6]
   13678:	cmp	r3, #1
   1367c:	ble	136a0 <__assert_fail@plt+0x2780>
   13680:	sub	r5, r7, #8
   13684:	add	r5, r5, r3, lsl #3
   13688:	mov	r4, r7
   1368c:	ldr	r0, [r4, #12]
   13690:	add	r4, r4, #8
   13694:	bl	10d04 <free@plt>
   13698:	cmp	r4, r5
   1369c:	bne	1368c <__assert_fail@plt+0x276c>
   136a0:	ldr	r0, [r7, #4]
   136a4:	ldr	r4, [pc, #60]	; 136e8 <__assert_fail@plt+0x27c8>
   136a8:	cmp	r0, r4
   136ac:	beq	136c0 <__assert_fail@plt+0x27a0>
   136b0:	bl	10d04 <free@plt>
   136b4:	mov	r3, #256	; 0x100
   136b8:	str	r4, [r6, #12]
   136bc:	str	r3, [r6, #8]
   136c0:	ldr	r4, [pc, #36]	; 136ec <__assert_fail@plt+0x27cc>
   136c4:	cmp	r7, r4
   136c8:	beq	136d8 <__assert_fail@plt+0x27b8>
   136cc:	mov	r0, r7
   136d0:	bl	10d04 <free@plt>
   136d4:	str	r4, [r6]
   136d8:	mov	r3, #1
   136dc:	str	r3, [r6, #4]
   136e0:	pop	{r4, r5, r6, r7, r8, pc}
   136e4:	andeq	r6, r2, ip, ror #1
   136e8:	andeq	r6, r2, ip, asr r1
   136ec:	strdeq	r6, [r2], -r4
   136f0:	ldr	r3, [pc, #4]	; 136fc <__assert_fail@plt+0x27dc>
   136f4:	mvn	r2, #0
   136f8:	b	13270 <__assert_fail@plt+0x2350>
   136fc:	andeq	r6, r2, ip, asr r2
   13700:	ldr	r3, [pc]	; 13708 <__assert_fail@plt+0x27e8>
   13704:	b	13270 <__assert_fail@plt+0x2350>
   13708:	andeq	r6, r2, ip, asr r2
   1370c:	mov	r1, r0
   13710:	ldr	r3, [pc, #8]	; 13720 <__assert_fail@plt+0x2800>
   13714:	mvn	r2, #0
   13718:	mov	r0, #0
   1371c:	b	13270 <__assert_fail@plt+0x2350>
   13720:	andeq	r6, r2, ip, asr r2
   13724:	mov	r2, r1
   13728:	ldr	r3, [pc, #8]	; 13738 <__assert_fail@plt+0x2818>
   1372c:	mov	r1, r0
   13730:	mov	r0, #0
   13734:	b	13270 <__assert_fail@plt+0x2350>
   13738:	andeq	r6, r2, ip, asr r2
   1373c:	push	{r4, r5, r6, lr}
   13740:	sub	sp, sp, #56	; 0x38
   13744:	ldr	r4, [pc, #68]	; 13790 <__assert_fail@plt+0x2870>
   13748:	mov	r6, r2
   1374c:	mov	r5, r0
   13750:	ldr	r3, [r4]
   13754:	add	r0, sp, #4
   13758:	str	r3, [sp, #52]	; 0x34
   1375c:	bl	118e8 <__assert_fail@plt+0x9c8>
   13760:	add	r3, sp, #4
   13764:	mvn	r2, #0
   13768:	mov	r1, r6
   1376c:	mov	r0, r5
   13770:	bl	13270 <__assert_fail@plt+0x2350>
   13774:	ldr	r2, [sp, #52]	; 0x34
   13778:	ldr	r3, [r4]
   1377c:	cmp	r2, r3
   13780:	bne	1378c <__assert_fail@plt+0x286c>
   13784:	add	sp, sp, #56	; 0x38
   13788:	pop	{r4, r5, r6, pc}
   1378c:	bl	10d64 <__stack_chk_fail@plt>
   13790:	andeq	r5, r2, r8, lsl #30
   13794:	push	{r4, r5, r6, r7, lr}
   13798:	sub	sp, sp, #60	; 0x3c
   1379c:	ldr	r4, [pc, #72]	; 137ec <__assert_fail@plt+0x28cc>
   137a0:	mov	r6, r2
   137a4:	mov	r7, r3
   137a8:	ldr	ip, [r4]
   137ac:	mov	r5, r0
   137b0:	add	r0, sp, #4
   137b4:	str	ip, [sp, #52]	; 0x34
   137b8:	bl	118e8 <__assert_fail@plt+0x9c8>
   137bc:	add	r3, sp, #4
   137c0:	mov	r2, r7
   137c4:	mov	r1, r6
   137c8:	mov	r0, r5
   137cc:	bl	13270 <__assert_fail@plt+0x2350>
   137d0:	ldr	r2, [sp, #52]	; 0x34
   137d4:	ldr	r3, [r4]
   137d8:	cmp	r2, r3
   137dc:	bne	137e8 <__assert_fail@plt+0x28c8>
   137e0:	add	sp, sp, #60	; 0x3c
   137e4:	pop	{r4, r5, r6, r7, pc}
   137e8:	bl	10d64 <__stack_chk_fail@plt>
   137ec:	andeq	r5, r2, r8, lsl #30
   137f0:	mov	r2, r1
   137f4:	mov	r1, r0
   137f8:	mov	r0, #0
   137fc:	b	1373c <__assert_fail@plt+0x281c>
   13800:	mov	r3, r2
   13804:	mov	r2, r1
   13808:	mov	r1, r0
   1380c:	mov	r0, #0
   13810:	b	13794 <__assert_fail@plt+0x2874>
   13814:	push	{r4, r5, r6, r7, r8, r9, lr}
   13818:	mov	r4, r2
   1381c:	ldr	lr, [pc, #128]	; 138a4 <__assert_fail@plt+0x2984>
   13820:	mov	r8, r0
   13824:	mov	r9, r1
   13828:	ldm	lr!, {r0, r1, r2, r3}
   1382c:	sub	sp, sp, #60	; 0x3c
   13830:	add	ip, sp, #4
   13834:	lsr	r6, r4, #5
   13838:	stmia	ip!, {r0, r1, r2, r3}
   1383c:	add	r7, sp, #12
   13840:	ldm	lr!, {r0, r1, r2, r3}
   13844:	and	r4, r4, #31
   13848:	ldr	r5, [pc, #88]	; 138a8 <__assert_fail@plt+0x2988>
   1384c:	stmia	ip!, {r0, r1, r2, r3}
   13850:	ldm	lr, {r0, r1, r2, r3}
   13854:	stm	ip, {r0, r1, r2, r3}
   13858:	mov	r2, r9
   1385c:	ldr	r3, [r7, r6, lsl #2]
   13860:	ldr	ip, [r5]
   13864:	mov	r1, r8
   13868:	mvn	r0, r3, lsr r4
   1386c:	and	r0, r0, #1
   13870:	str	ip, [sp, #52]	; 0x34
   13874:	eor	r4, r3, r0, lsl r4
   13878:	add	r3, sp, #4
   1387c:	mov	r0, #0
   13880:	str	r4, [r7, r6, lsl #2]
   13884:	bl	13270 <__assert_fail@plt+0x2350>
   13888:	ldr	r2, [sp, #52]	; 0x34
   1388c:	ldr	r3, [r5]
   13890:	cmp	r2, r3
   13894:	bne	138a0 <__assert_fail@plt+0x2980>
   13898:	add	sp, sp, #60	; 0x3c
   1389c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138a0:	bl	10d64 <__stack_chk_fail@plt>
   138a4:	andeq	r6, r2, ip, asr r2
   138a8:	andeq	r5, r2, r8, lsl #30
   138ac:	mov	r2, r1
   138b0:	mvn	r1, #0
   138b4:	b	13814 <__assert_fail@plt+0x28f4>
   138b8:	mov	r2, #58	; 0x3a
   138bc:	mvn	r1, #0
   138c0:	b	13814 <__assert_fail@plt+0x28f4>
   138c4:	mov	r2, #58	; 0x3a
   138c8:	b	13814 <__assert_fail@plt+0x28f4>
   138cc:	push	{r4, r5, r6, r7, r8, lr}
   138d0:	sub	sp, sp, #104	; 0x68
   138d4:	ldr	r5, [pc, #120]	; 13954 <__assert_fail@plt+0x2a34>
   138d8:	mov	r6, r0
   138dc:	mov	r0, sp
   138e0:	ldr	r3, [r5]
   138e4:	mov	r7, r2
   138e8:	str	r3, [sp, #100]	; 0x64
   138ec:	bl	118e8 <__assert_fail@plt+0x9c8>
   138f0:	mov	ip, sp
   138f4:	add	lr, sp, #52	; 0x34
   138f8:	ldm	ip!, {r0, r1, r2, r3}
   138fc:	stmia	lr!, {r0, r1, r2, r3}
   13900:	ldm	ip!, {r0, r1, r2, r3}
   13904:	ldr	r8, [sp, #64]	; 0x40
   13908:	stmia	lr!, {r0, r1, r2, r3}
   1390c:	mvn	r4, r8
   13910:	ldm	ip, {r0, r1, r2, r3}
   13914:	and	ip, r4, #67108864	; 0x4000000
   13918:	eor	ip, ip, r8
   1391c:	str	ip, [sp, #64]	; 0x40
   13920:	stm	lr, {r0, r1, r2, r3}
   13924:	add	r3, sp, #52	; 0x34
   13928:	mvn	r2, #0
   1392c:	mov	r1, r7
   13930:	mov	r0, r6
   13934:	bl	13270 <__assert_fail@plt+0x2350>
   13938:	ldr	r2, [sp, #100]	; 0x64
   1393c:	ldr	r3, [r5]
   13940:	cmp	r2, r3
   13944:	bne	13950 <__assert_fail@plt+0x2a30>
   13948:	add	sp, sp, #104	; 0x68
   1394c:	pop	{r4, r5, r6, r7, r8, pc}
   13950:	bl	10d64 <__stack_chk_fail@plt>
   13954:	andeq	r5, r2, r8, lsl #30
   13958:	push	{r4, r5, r6, r7, r8, r9, lr}
   1395c:	mov	r6, r1
   13960:	ldr	lr, [pc, #132]	; 139ec <__assert_fail@plt+0x2acc>
   13964:	mov	r5, r2
   13968:	mov	r8, r0
   1396c:	mov	r9, r3
   13970:	ldm	lr!, {r0, r1, r2, r3}
   13974:	sub	sp, sp, #60	; 0x3c
   13978:	add	ip, sp, #4
   1397c:	ldr	r4, [pc, #108]	; 139f0 <__assert_fail@plt+0x2ad0>
   13980:	stmia	ip!, {r0, r1, r2, r3}
   13984:	mov	r7, #10
   13988:	ldm	lr!, {r0, r1, r2, r3}
   1398c:	cmp	r5, #0
   13990:	cmpne	r6, #0
   13994:	str	r7, [sp, #4]
   13998:	stmia	ip!, {r0, r1, r2, r3}
   1399c:	ldm	lr, {r0, r1, r2, r3}
   139a0:	ldr	lr, [r4]
   139a4:	stm	ip, {r0, r1, r2, r3}
   139a8:	str	lr, [sp, #52]	; 0x34
   139ac:	beq	139e8 <__assert_fail@plt+0x2ac8>
   139b0:	add	r3, sp, #4
   139b4:	ldr	r2, [sp, #88]	; 0x58
   139b8:	mov	r1, r9
   139bc:	mov	r0, r8
   139c0:	str	r6, [sp, #44]	; 0x2c
   139c4:	str	r5, [sp, #48]	; 0x30
   139c8:	bl	13270 <__assert_fail@plt+0x2350>
   139cc:	ldr	r2, [sp, #52]	; 0x34
   139d0:	ldr	r3, [r4]
   139d4:	cmp	r2, r3
   139d8:	bne	139e4 <__assert_fail@plt+0x2ac4>
   139dc:	add	sp, sp, #60	; 0x3c
   139e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   139e4:	bl	10d64 <__stack_chk_fail@plt>
   139e8:	bl	10f14 <abort@plt>
   139ec:	andeq	r6, r2, ip, asr r2
   139f0:	andeq	r5, r2, r8, lsl #30
   139f4:	push	{lr}		; (str lr, [sp, #-4]!)
   139f8:	sub	sp, sp, #12
   139fc:	mvn	ip, #0
   13a00:	str	ip, [sp]
   13a04:	bl	13958 <__assert_fail@plt+0x2a38>
   13a08:	add	sp, sp, #12
   13a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a10:	push	{lr}		; (str lr, [sp, #-4]!)
   13a14:	sub	sp, sp, #12
   13a18:	mvn	ip, #0
   13a1c:	mov	r3, r2
   13a20:	str	ip, [sp]
   13a24:	mov	r2, r1
   13a28:	mov	r1, r0
   13a2c:	mov	r0, #0
   13a30:	bl	13958 <__assert_fail@plt+0x2a38>
   13a34:	add	sp, sp, #12
   13a38:	pop	{pc}		; (ldr pc, [sp], #4)
   13a3c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a40:	sub	sp, sp, #12
   13a44:	str	r3, [sp]
   13a48:	mov	r3, r2
   13a4c:	mov	r2, r1
   13a50:	mov	r1, r0
   13a54:	mov	r0, #0
   13a58:	bl	13958 <__assert_fail@plt+0x2a38>
   13a5c:	add	sp, sp, #12
   13a60:	pop	{pc}		; (ldr pc, [sp], #4)
   13a64:	ldr	r3, [pc]	; 13a6c <__assert_fail@plt+0x2b4c>
   13a68:	b	13270 <__assert_fail@plt+0x2350>
   13a6c:	strdeq	r6, [r2], -ip
   13a70:	mov	r2, r1
   13a74:	ldr	r3, [pc, #8]	; 13a84 <__assert_fail@plt+0x2b64>
   13a78:	mov	r1, r0
   13a7c:	mov	r0, #0
   13a80:	b	13270 <__assert_fail@plt+0x2350>
   13a84:	strdeq	r6, [r2], -ip
   13a88:	ldr	r3, [pc, #4]	; 13a94 <__assert_fail@plt+0x2b74>
   13a8c:	mvn	r2, #0
   13a90:	b	13270 <__assert_fail@plt+0x2350>
   13a94:	strdeq	r6, [r2], -ip
   13a98:	mov	r1, r0
   13a9c:	ldr	r3, [pc, #8]	; 13aac <__assert_fail@plt+0x2b8c>
   13aa0:	mvn	r2, #0
   13aa4:	mov	r0, #0
   13aa8:	b	13270 <__assert_fail@plt+0x2350>
   13aac:	strdeq	r6, [r2], -ip
   13ab0:	push	{r4, r5, r6, lr}
   13ab4:	sub	sp, sp, #32
   13ab8:	cmp	r1, #0
   13abc:	mov	r5, r0
   13ac0:	ldr	r4, [sp, #48]	; 0x30
   13ac4:	ldr	r6, [sp, #52]	; 0x34
   13ac8:	beq	13b58 <__assert_fail@plt+0x2c38>
   13acc:	strd	r2, [sp]
   13ad0:	mov	r3, r1
   13ad4:	ldr	r2, [pc, #828]	; 13e18 <__assert_fail@plt+0x2ef8>
   13ad8:	mov	r1, #1
   13adc:	bl	10ea8 <__fprintf_chk@plt>
   13ae0:	mov	r2, #5
   13ae4:	ldr	r1, [pc, #816]	; 13e1c <__assert_fail@plt+0x2efc>
   13ae8:	mov	r0, #0
   13aec:	bl	10d58 <dcgettext@plt>
   13af0:	ldr	r3, [pc, #808]	; 13e20 <__assert_fail@plt+0x2f00>
   13af4:	ldr	r2, [pc, #808]	; 13e24 <__assert_fail@plt+0x2f04>
   13af8:	str	r3, [sp]
   13afc:	mov	r1, #1
   13b00:	mov	r3, r0
   13b04:	mov	r0, r5
   13b08:	bl	10ea8 <__fprintf_chk@plt>
   13b0c:	ldr	r1, [pc, #788]	; 13e28 <__assert_fail@plt+0x2f08>
   13b10:	mov	r2, #5
   13b14:	mov	r0, #0
   13b18:	bl	10d58 <dcgettext@plt>
   13b1c:	mov	r1, r5
   13b20:	bl	10cd4 <fputs_unlocked@plt>
   13b24:	cmp	r6, #9
   13b28:	ldrls	pc, [pc, r6, lsl #2]
   13b2c:	b	13e08 <__assert_fail@plt+0x2ee8>
   13b30:	andeq	r3, r1, r4, lsl lr
   13b34:	ldrdeq	r3, [r1], -ip
   13b38:	andeq	r3, r1, r8, lsl #24
   13b3c:	andeq	r3, r1, ip, lsr ip
   13b40:	andeq	r3, r1, r8, ror ip
   13b44:			; <UNDEFINED> instruction: 0x00013cb8
   13b48:	andeq	r3, r1, r0, lsl #26
   13b4c:	andeq	r3, r1, r0, asr sp
   13b50:	andeq	r3, r1, r8, lsr #27
   13b54:	andeq	r3, r1, r0, ror fp
   13b58:	str	r3, [sp]
   13b5c:	mov	r1, #1
   13b60:	mov	r3, r2
   13b64:	ldr	r2, [pc, #704]	; 13e2c <__assert_fail@plt+0x2f0c>
   13b68:	bl	10ea8 <__fprintf_chk@plt>
   13b6c:	b	13ae0 <__assert_fail@plt+0x2bc0>
   13b70:	ldr	r1, [pc, #696]	; 13e30 <__assert_fail@plt+0x2f10>
   13b74:	mov	r2, #5
   13b78:	mov	r0, #0
   13b7c:	bl	10d58 <dcgettext@plt>
   13b80:	ldr	r2, [r4, #32]
   13b84:	ldr	r3, [r4, #28]
   13b88:	ldr	r1, [r4, #24]
   13b8c:	str	r2, [sp, #28]
   13b90:	ldr	r2, [r4, #20]
   13b94:	str	r3, [sp, #24]
   13b98:	ldr	r3, [r4, #16]
   13b9c:	str	r1, [sp, #20]
   13ba0:	ldr	r1, [r4, #12]
   13ba4:	str	r2, [sp, #16]
   13ba8:	ldr	r2, [r4, #8]
   13bac:	str	r3, [sp, #12]
   13bb0:	ldr	r3, [r4, #4]
   13bb4:	str	r1, [sp, #8]
   13bb8:	str	r2, [sp, #4]
   13bbc:	str	r3, [sp]
   13bc0:	mov	r1, #1
   13bc4:	ldr	r3, [r4]
   13bc8:	mov	r2, r0
   13bcc:	mov	r0, r5
   13bd0:	bl	10ea8 <__fprintf_chk@plt>
   13bd4:	add	sp, sp, #32
   13bd8:	pop	{r4, r5, r6, pc}
   13bdc:	mov	r2, #5
   13be0:	ldr	r1, [pc, #588]	; 13e34 <__assert_fail@plt+0x2f14>
   13be4:	mov	r0, #0
   13be8:	bl	10d58 <dcgettext@plt>
   13bec:	ldr	r3, [r4]
   13bf0:	mov	r1, #1
   13bf4:	mov	r2, r0
   13bf8:	mov	r0, r5
   13bfc:	add	sp, sp, #32
   13c00:	pop	{r4, r5, r6, lr}
   13c04:	b	10ea8 <__fprintf_chk@plt>
   13c08:	mov	r2, #5
   13c0c:	ldr	r1, [pc, #548]	; 13e38 <__assert_fail@plt+0x2f18>
   13c10:	mov	r0, #0
   13c14:	bl	10d58 <dcgettext@plt>
   13c18:	ldr	r2, [r4, #4]
   13c1c:	ldr	r3, [r4]
   13c20:	mov	r1, #1
   13c24:	str	r2, [sp, #48]	; 0x30
   13c28:	mov	r2, r0
   13c2c:	mov	r0, r5
   13c30:	add	sp, sp, #32
   13c34:	pop	{r4, r5, r6, lr}
   13c38:	b	10ea8 <__fprintf_chk@plt>
   13c3c:	mov	r2, #5
   13c40:	ldr	r1, [pc, #500]	; 13e3c <__assert_fail@plt+0x2f1c>
   13c44:	mov	r0, #0
   13c48:	bl	10d58 <dcgettext@plt>
   13c4c:	ldr	r2, [r4, #8]
   13c50:	ldr	r3, [r4, #4]
   13c54:	mov	r1, #1
   13c58:	str	r2, [sp, #52]	; 0x34
   13c5c:	str	r3, [sp, #48]	; 0x30
   13c60:	ldr	r3, [r4]
   13c64:	mov	r2, r0
   13c68:	mov	r0, r5
   13c6c:	add	sp, sp, #32
   13c70:	pop	{r4, r5, r6, lr}
   13c74:	b	10ea8 <__fprintf_chk@plt>
   13c78:	mov	r2, #5
   13c7c:	ldr	r1, [pc, #444]	; 13e40 <__assert_fail@plt+0x2f20>
   13c80:	mov	r0, #0
   13c84:	bl	10d58 <dcgettext@plt>
   13c88:	ldr	r1, [r4, #12]
   13c8c:	ldr	r2, [r4, #8]
   13c90:	ldr	r3, [r4, #4]
   13c94:	str	r1, [sp, #8]
   13c98:	str	r2, [sp, #4]
   13c9c:	str	r3, [sp]
   13ca0:	mov	r1, #1
   13ca4:	ldr	r3, [r4]
   13ca8:	mov	r2, r0
   13cac:	mov	r0, r5
   13cb0:	bl	10ea8 <__fprintf_chk@plt>
   13cb4:	b	13bd4 <__assert_fail@plt+0x2cb4>
   13cb8:	mov	r2, #5
   13cbc:	ldr	r1, [pc, #384]	; 13e44 <__assert_fail@plt+0x2f24>
   13cc0:	mov	r0, #0
   13cc4:	bl	10d58 <dcgettext@plt>
   13cc8:	ldr	r3, [r4, #16]
   13ccc:	ldr	r1, [r4, #12]
   13cd0:	ldr	r2, [r4, #8]
   13cd4:	str	r3, [sp, #12]
   13cd8:	ldr	r3, [r4, #4]
   13cdc:	str	r1, [sp, #8]
   13ce0:	str	r2, [sp, #4]
   13ce4:	str	r3, [sp]
   13ce8:	mov	r1, #1
   13cec:	ldr	r3, [r4]
   13cf0:	mov	r2, r0
   13cf4:	mov	r0, r5
   13cf8:	bl	10ea8 <__fprintf_chk@plt>
   13cfc:	b	13bd4 <__assert_fail@plt+0x2cb4>
   13d00:	mov	r2, #5
   13d04:	ldr	r1, [pc, #316]	; 13e48 <__assert_fail@plt+0x2f28>
   13d08:	mov	r0, #0
   13d0c:	bl	10d58 <dcgettext@plt>
   13d10:	ldr	r2, [r4, #20]
   13d14:	ldr	r3, [r4, #16]
   13d18:	ldr	r1, [r4, #12]
   13d1c:	str	r2, [sp, #16]
   13d20:	ldr	r2, [r4, #8]
   13d24:	str	r3, [sp, #12]
   13d28:	ldr	r3, [r4, #4]
   13d2c:	str	r1, [sp, #8]
   13d30:	str	r2, [sp, #4]
   13d34:	str	r3, [sp]
   13d38:	mov	r1, #1
   13d3c:	ldr	r3, [r4]
   13d40:	mov	r2, r0
   13d44:	mov	r0, r5
   13d48:	bl	10ea8 <__fprintf_chk@plt>
   13d4c:	b	13bd4 <__assert_fail@plt+0x2cb4>
   13d50:	mov	r2, #5
   13d54:	ldr	r1, [pc, #240]	; 13e4c <__assert_fail@plt+0x2f2c>
   13d58:	mov	r0, #0
   13d5c:	bl	10d58 <dcgettext@plt>
   13d60:	ldr	r1, [r4, #24]
   13d64:	ldr	r2, [r4, #20]
   13d68:	ldr	r3, [r4, #16]
   13d6c:	str	r1, [sp, #20]
   13d70:	ldr	r1, [r4, #12]
   13d74:	str	r2, [sp, #16]
   13d78:	ldr	r2, [r4, #8]
   13d7c:	str	r3, [sp, #12]
   13d80:	ldr	r3, [r4, #4]
   13d84:	str	r1, [sp, #8]
   13d88:	str	r2, [sp, #4]
   13d8c:	str	r3, [sp]
   13d90:	mov	r1, #1
   13d94:	ldr	r3, [r4]
   13d98:	mov	r2, r0
   13d9c:	mov	r0, r5
   13da0:	bl	10ea8 <__fprintf_chk@plt>
   13da4:	b	13bd4 <__assert_fail@plt+0x2cb4>
   13da8:	mov	r2, #5
   13dac:	ldr	r1, [pc, #156]	; 13e50 <__assert_fail@plt+0x2f30>
   13db0:	mov	r0, #0
   13db4:	bl	10d58 <dcgettext@plt>
   13db8:	ldr	r3, [r4, #28]
   13dbc:	ldr	r1, [r4, #24]
   13dc0:	ldr	r2, [r4, #20]
   13dc4:	str	r3, [sp, #24]
   13dc8:	ldr	r3, [r4, #16]
   13dcc:	str	r1, [sp, #20]
   13dd0:	ldr	r1, [r4, #12]
   13dd4:	str	r2, [sp, #16]
   13dd8:	ldr	r2, [r4, #8]
   13ddc:	str	r3, [sp, #12]
   13de0:	ldr	r3, [r4, #4]
   13de4:	str	r1, [sp, #8]
   13de8:	str	r2, [sp, #4]
   13dec:	str	r3, [sp]
   13df0:	mov	r1, #1
   13df4:	ldr	r3, [r4]
   13df8:	mov	r2, r0
   13dfc:	mov	r0, r5
   13e00:	bl	10ea8 <__fprintf_chk@plt>
   13e04:	b	13bd4 <__assert_fail@plt+0x2cb4>
   13e08:	mov	r2, #5
   13e0c:	ldr	r1, [pc, #64]	; 13e54 <__assert_fail@plt+0x2f34>
   13e10:	b	13b78 <__assert_fail@plt+0x2c58>
   13e14:	bl	10f14 <abort@plt>
   13e18:	strdeq	r5, [r1], -ip
   13e1c:	andeq	r5, r1, r0, lsl r9
   13e20:	andeq	r0, r0, r2, ror #15
   13e24:	andeq	r5, r1, r4, ror #23
   13e28:	andeq	r5, r1, r4, lsl r9
   13e2c:	andeq	r5, r1, r8, lsl #18
   13e30:	andeq	r5, r1, ip, ror #21
   13e34:	andeq	r5, r1, r0, ror #19
   13e38:	strdeq	r5, [r1], -r0
   13e3c:	andeq	r5, r1, r8, lsl #20
   13e40:	andeq	r5, r1, r4, lsr #20
   13e44:	andeq	r5, r1, r4, asr #20
   13e48:	andeq	r5, r1, r8, ror #20
   13e4c:	muleq	r1, r0, sl
   13e50:			; <UNDEFINED> instruction: 0x00015abc
   13e54:	andeq	r5, r1, r0, lsr #22
   13e58:	push	{r4, r5, lr}
   13e5c:	sub	sp, sp, #12
   13e60:	ldr	r5, [sp, #24]
   13e64:	ldr	ip, [r5]
   13e68:	cmp	ip, #0
   13e6c:	beq	13e88 <__assert_fail@plt+0x2f68>
   13e70:	mov	lr, r5
   13e74:	mov	ip, #0
   13e78:	ldr	r4, [lr, #4]!
   13e7c:	add	ip, ip, #1
   13e80:	cmp	r4, #0
   13e84:	bne	13e78 <__assert_fail@plt+0x2f58>
   13e88:	stm	sp, {r5, ip}
   13e8c:	bl	13ab0 <__assert_fail@plt+0x2b90>
   13e90:	add	sp, sp, #12
   13e94:	pop	{r4, r5, pc}
   13e98:	push	{r4, r5, r6, lr}
   13e9c:	sub	sp, sp, #56	; 0x38
   13ea0:	ldr	r6, [pc, #88]	; 13f00 <__assert_fail@plt+0x2fe0>
   13ea4:	ldr	r5, [sp, #72]	; 0x48
   13ea8:	add	r4, sp, #8
   13eac:	ldr	ip, [r6]
   13eb0:	str	ip, [sp, #52]	; 0x34
   13eb4:	mov	ip, #0
   13eb8:	ldr	lr, [r5], #4
   13ebc:	cmp	lr, #0
   13ec0:	str	lr, [r4, #4]!
   13ec4:	beq	13ed4 <__assert_fail@plt+0x2fb4>
   13ec8:	add	ip, ip, #1
   13ecc:	cmp	ip, #10
   13ed0:	bne	13eb8 <__assert_fail@plt+0x2f98>
   13ed4:	add	lr, sp, #12
   13ed8:	str	ip, [sp, #4]
   13edc:	str	lr, [sp]
   13ee0:	bl	13ab0 <__assert_fail@plt+0x2b90>
   13ee4:	ldr	r2, [sp, #52]	; 0x34
   13ee8:	ldr	r3, [r6]
   13eec:	cmp	r2, r3
   13ef0:	bne	13efc <__assert_fail@plt+0x2fdc>
   13ef4:	add	sp, sp, #56	; 0x38
   13ef8:	pop	{r4, r5, r6, pc}
   13efc:	bl	10d64 <__stack_chk_fail@plt>
   13f00:	andeq	r5, r2, r8, lsl #30
   13f04:	push	{r3}		; (str r3, [sp, #-4]!)
   13f08:	mov	ip, #0
   13f0c:	push	{r4, r5, r6, lr}
   13f10:	sub	sp, sp, #60	; 0x3c
   13f14:	ldr	r6, [pc, #100]	; 13f80 <__assert_fail@plt+0x3060>
   13f18:	add	r5, sp, #8
   13f1c:	add	r4, sp, #80	; 0x50
   13f20:	ldr	r3, [r6]
   13f24:	str	r4, [sp, #8]
   13f28:	str	r3, [sp, #52]	; 0x34
   13f2c:	ldr	r3, [sp, #76]	; 0x4c
   13f30:	ldr	lr, [r4], #4
   13f34:	cmp	lr, #0
   13f38:	str	lr, [r5, #4]!
   13f3c:	beq	13f4c <__assert_fail@plt+0x302c>
   13f40:	add	ip, ip, #1
   13f44:	cmp	ip, #10
   13f48:	bne	13f30 <__assert_fail@plt+0x3010>
   13f4c:	add	lr, sp, #12
   13f50:	str	ip, [sp, #4]
   13f54:	str	lr, [sp]
   13f58:	bl	13ab0 <__assert_fail@plt+0x2b90>
   13f5c:	ldr	r2, [sp, #52]	; 0x34
   13f60:	ldr	r3, [r6]
   13f64:	cmp	r2, r3
   13f68:	bne	13f7c <__assert_fail@plt+0x305c>
   13f6c:	add	sp, sp, #60	; 0x3c
   13f70:	pop	{r4, r5, r6, lr}
   13f74:	add	sp, sp, #4
   13f78:	bx	lr
   13f7c:	bl	10d64 <__stack_chk_fail@plt>
   13f80:	andeq	r5, r2, r8, lsl #30
   13f84:	push	{r4, lr}
   13f88:	mov	r2, #5
   13f8c:	ldr	r1, [pc, #88]	; 13fec <__assert_fail@plt+0x30cc>
   13f90:	mov	r0, #0
   13f94:	bl	10d58 <dcgettext@plt>
   13f98:	ldr	r2, [pc, #80]	; 13ff0 <__assert_fail@plt+0x30d0>
   13f9c:	mov	r1, r0
   13fa0:	mov	r0, #1
   13fa4:	bl	10e90 <__printf_chk@plt>
   13fa8:	mov	r2, #5
   13fac:	ldr	r1, [pc, #64]	; 13ff4 <__assert_fail@plt+0x30d4>
   13fb0:	mov	r0, #0
   13fb4:	bl	10d58 <dcgettext@plt>
   13fb8:	ldr	r3, [pc, #56]	; 13ff8 <__assert_fail@plt+0x30d8>
   13fbc:	ldr	r2, [pc, #56]	; 13ffc <__assert_fail@plt+0x30dc>
   13fc0:	mov	r1, r0
   13fc4:	mov	r0, #1
   13fc8:	bl	10e90 <__printf_chk@plt>
   13fcc:	ldr	r1, [pc, #44]	; 14000 <__assert_fail@plt+0x30e0>
   13fd0:	mov	r2, #5
   13fd4:	mov	r0, #0
   13fd8:	bl	10d58 <dcgettext@plt>
   13fdc:	ldr	r3, [pc, #32]	; 14004 <__assert_fail@plt+0x30e4>
   13fe0:	pop	{r4, lr}
   13fe4:	ldr	r1, [r3]
   13fe8:	b	10cd4 <fputs_unlocked@plt>
   13fec:	andeq	r5, r1, ip, asr fp
   13ff0:	andeq	r5, r1, r4, ror fp
   13ff4:	andeq	r5, r1, ip, lsl #23
   13ff8:	strdeq	r5, [r1], -r0
   13ffc:	andeq	r5, r1, r8, lsl r6
   14000:	andeq	r5, r1, r0, lsr #23
   14004:	andeq	r6, r2, r4, asr #2
   14008:	push	{r4, lr}
   1400c:	mov	r4, r0
   14010:	bl	10df4 <malloc@plt>
   14014:	adds	r4, r4, #0
   14018:	movne	r4, #1
   1401c:	cmp	r0, #0
   14020:	movne	r4, #0
   14024:	cmp	r4, #0
   14028:	popeq	{r4, pc}
   1402c:	bl	14250 <__assert_fail@plt+0x3330>
   14030:	push	{r4, r5, r6, lr}
   14034:	umull	r4, r5, r0, r1
   14038:	adds	r3, r5, #0
   1403c:	movne	r3, #1
   14040:	cmp	r4, #0
   14044:	blt	1405c <__assert_fail@plt+0x313c>
   14048:	cmp	r3, #0
   1404c:	bne	1405c <__assert_fail@plt+0x313c>
   14050:	mul	r0, r1, r0
   14054:	pop	{r4, r5, r6, lr}
   14058:	b	14008 <__assert_fail@plt+0x30e8>
   1405c:	bl	14250 <__assert_fail@plt+0x3330>
   14060:	b	14008 <__assert_fail@plt+0x30e8>
   14064:	adds	r3, r0, #0
   14068:	movne	r3, #1
   1406c:	cmp	r1, #0
   14070:	movne	r3, #0
   14074:	cmp	r3, #0
   14078:	push	{r4, lr}
   1407c:	bne	140a4 <__assert_fail@plt+0x3184>
   14080:	mov	r4, r1
   14084:	bl	10d7c <realloc@plt>
   14088:	adds	r4, r4, #0
   1408c:	movne	r4, #1
   14090:	cmp	r0, #0
   14094:	movne	r4, #0
   14098:	cmp	r4, #0
   1409c:	popeq	{r4, pc}
   140a0:	bl	14250 <__assert_fail@plt+0x3330>
   140a4:	bl	10d04 <free@plt>
   140a8:	mov	r0, #0
   140ac:	pop	{r4, pc}
   140b0:	push	{r4, r5, r6, lr}
   140b4:	umull	r4, r5, r1, r2
   140b8:	adds	r3, r5, #0
   140bc:	movne	r3, #1
   140c0:	cmp	r4, #0
   140c4:	blt	140dc <__assert_fail@plt+0x31bc>
   140c8:	cmp	r3, #0
   140cc:	bne	140dc <__assert_fail@plt+0x31bc>
   140d0:	mul	r1, r2, r1
   140d4:	pop	{r4, r5, r6, lr}
   140d8:	b	14064 <__assert_fail@plt+0x3144>
   140dc:	bl	14250 <__assert_fail@plt+0x3330>
   140e0:	push	{r4, r5, r6, r7, r8, lr}
   140e4:	subs	r7, r0, #0
   140e8:	mov	r6, r1
   140ec:	mov	r5, r2
   140f0:	ldr	r4, [r1]
   140f4:	beq	14128 <__assert_fail@plt+0x3208>
   140f8:	mov	r1, r2
   140fc:	ldr	r0, [pc, #104]	; 1416c <__assert_fail@plt+0x324c>
   14100:	bl	15104 <__assert_fail@plt+0x41e4>
   14104:	cmp	r0, r4
   14108:	bls	1414c <__assert_fail@plt+0x322c>
   1410c:	add	r3, r4, #1
   14110:	add	r4, r3, r4, lsr #1
   14114:	str	r4, [r6]
   14118:	mul	r1, r5, r4
   1411c:	mov	r0, r7
   14120:	pop	{r4, r5, r6, r7, r8, lr}
   14124:	b	14064 <__assert_fail@plt+0x3144>
   14128:	cmp	r4, #0
   1412c:	beq	14150 <__assert_fail@plt+0x3230>
   14130:	umull	r0, r1, r4, r5
   14134:	adds	r3, r1, #0
   14138:	movne	r3, #1
   1413c:	cmp	r0, #0
   14140:	blt	1414c <__assert_fail@plt+0x322c>
   14144:	cmp	r3, #0
   14148:	beq	14114 <__assert_fail@plt+0x31f4>
   1414c:	bl	14250 <__assert_fail@plt+0x3330>
   14150:	mov	r1, r2
   14154:	mov	r0, #64	; 0x40
   14158:	bl	15104 <__assert_fail@plt+0x41e4>
   1415c:	cmp	r5, #64	; 0x40
   14160:	movls	r4, r0
   14164:	addhi	r4, r0, #1
   14168:	b	14130 <__assert_fail@plt+0x3210>
   1416c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14170:	cmp	r0, #0
   14174:	ldr	r3, [r1]
   14178:	beq	1419c <__assert_fail@plt+0x327c>
   1417c:	ldr	r2, [pc, #60]	; 141c0 <__assert_fail@plt+0x32a0>
   14180:	cmp	r3, r2
   14184:	bhi	141b8 <__assert_fail@plt+0x3298>
   14188:	add	r2, r3, #1
   1418c:	add	r3, r2, r3, lsr #1
   14190:	str	r3, [r1]
   14194:	mov	r1, r3
   14198:	b	14064 <__assert_fail@plt+0x3144>
   1419c:	cmp	r3, #0
   141a0:	bne	141b4 <__assert_fail@plt+0x3294>
   141a4:	mov	r3, #64	; 0x40
   141a8:	str	r3, [r1]
   141ac:	mov	r1, r3
   141b0:	b	14064 <__assert_fail@plt+0x3144>
   141b4:	bge	14190 <__assert_fail@plt+0x3270>
   141b8:	push	{r4, lr}
   141bc:	bl	14250 <__assert_fail@plt+0x3330>
   141c0:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   141c4:	push	{r4, lr}
   141c8:	mov	r4, r0
   141cc:	bl	14008 <__assert_fail@plt+0x30e8>
   141d0:	mov	r2, r4
   141d4:	mov	r1, #0
   141d8:	pop	{r4, lr}
   141dc:	b	10e84 <memset@plt>
   141e0:	push	{r4, r5, r6, lr}
   141e4:	umull	r4, r5, r0, r1
   141e8:	adds	r3, r5, #0
   141ec:	movne	r3, #1
   141f0:	cmp	r4, #0
   141f4:	blt	1420c <__assert_fail@plt+0x32ec>
   141f8:	cmp	r3, #0
   141fc:	bne	1420c <__assert_fail@plt+0x32ec>
   14200:	bl	10cc8 <calloc@plt>
   14204:	cmp	r0, #0
   14208:	popne	{r4, r5, r6, pc}
   1420c:	bl	14250 <__assert_fail@plt+0x3330>
   14210:	push	{r4, r5, r6, lr}
   14214:	mov	r4, r1
   14218:	mov	r5, r0
   1421c:	mov	r0, r1
   14220:	bl	14008 <__assert_fail@plt+0x30e8>
   14224:	mov	r2, r4
   14228:	mov	r1, r5
   1422c:	pop	{r4, r5, r6, lr}
   14230:	b	10d1c <memcpy@plt>
   14234:	push	{r4, lr}
   14238:	mov	r4, r0
   1423c:	bl	10e54 <strlen@plt>
   14240:	add	r1, r0, #1
   14244:	mov	r0, r4
   14248:	pop	{r4, lr}
   1424c:	b	14210 <__assert_fail@plt+0x32f0>
   14250:	ldr	r3, [pc, #44]	; 14284 <__assert_fail@plt+0x3364>
   14254:	push	{r4, lr}
   14258:	mov	r2, #5
   1425c:	ldr	r1, [pc, #36]	; 14288 <__assert_fail@plt+0x3368>
   14260:	mov	r0, #0
   14264:	ldr	r4, [r3]
   14268:	bl	10d58 <dcgettext@plt>
   1426c:	ldr	r2, [pc, #24]	; 1428c <__assert_fail@plt+0x336c>
   14270:	mov	r1, #0
   14274:	mov	r3, r0
   14278:	mov	r0, r4
   1427c:	bl	10ddc <error@plt>
   14280:	bl	10f14 <abort@plt>
   14284:	andeq	r6, r2, r8, ror #1
   14288:	andeq	r5, r1, r4, lsl ip
   1428c:			; <UNDEFINED> instruction: 0x000157bc
   14290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14294:	sub	sp, sp, #36	; 0x24
   14298:	ldr	r6, [pc, #312]	; 143d8 <__assert_fail@plt+0x34b8>
   1429c:	ldr	lr, [sp, #80]	; 0x50
   142a0:	mov	r8, r2
   142a4:	ldr	ip, [r6]
   142a8:	mov	r2, r1
   142ac:	mov	r9, r3
   142b0:	str	lr, [sp]
   142b4:	add	r3, sp, #16
   142b8:	mov	r1, #0
   142bc:	str	ip, [sp, #28]
   142c0:	mov	r7, r0
   142c4:	ldr	sl, [sp, #84]	; 0x54
   142c8:	ldr	r5, [sp, #88]	; 0x58
   142cc:	bl	143e8 <__assert_fail@plt+0x34c8>
   142d0:	subs	fp, r0, #0
   142d4:	bne	14394 <__assert_fail@plt+0x3474>
   142d8:	ldrd	r2, [sp, #16]
   142dc:	cmp	r3, r9
   142e0:	cmpeq	r2, r8
   142e4:	ldrd	r8, [sp, #72]	; 0x48
   142e8:	movcc	r1, #1
   142ec:	movcs	r1, #0
   142f0:	cmp	r3, r9
   142f4:	cmpeq	r2, r8
   142f8:	orrhi	r1, r1, #1
   142fc:	cmp	r1, #0
   14300:	beq	14358 <__assert_fail@plt+0x3438>
   14304:	strd	r2, [sp, #8]
   14308:	bl	10e6c <__errno_location@plt>
   1430c:	ldrd	r2, [sp, #8]
   14310:	mov	r9, #0
   14314:	mvn	r8, #-1073741824	; 0xc0000000
   14318:	cmp	r3, r9
   1431c:	cmpeq	r2, r8
   14320:	bls	143c0 <__assert_fail@plt+0x34a0>
   14324:	mov	r4, #75	; 0x4b
   14328:	cmp	r5, #0
   1432c:	str	r4, [r0]
   14330:	beq	1438c <__assert_fail@plt+0x346c>
   14334:	mov	r0, r7
   14338:	bl	13a98 <__assert_fail@plt+0x2b78>
   1433c:	mov	r3, sl
   14340:	ldr	r2, [pc, #148]	; 143dc <__assert_fail@plt+0x34bc>
   14344:	mov	r1, r4
   14348:	str	r0, [sp]
   1434c:	mov	r0, r5
   14350:	bl	10ddc <error@plt>
   14354:	ldrd	r2, [sp, #16]
   14358:	ldr	lr, [sp, #28]
   1435c:	ldr	ip, [r6]
   14360:	mov	r0, r2
   14364:	cmp	lr, ip
   14368:	mov	r1, r3
   1436c:	bne	143d4 <__assert_fail@plt+0x34b4>
   14370:	add	sp, sp, #36	; 0x24
   14374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14378:	mov	r4, #0
   1437c:	cmp	r5, #0
   14380:	str	r4, [r0]
   14384:	bne	14334 <__assert_fail@plt+0x3414>
   14388:	mov	r4, r5
   1438c:	mov	r5, #1
   14390:	b	14334 <__assert_fail@plt+0x3414>
   14394:	bl	10e6c <__errno_location@plt>
   14398:	cmp	fp, #1
   1439c:	beq	14324 <__assert_fail@plt+0x3404>
   143a0:	cmp	fp, #3
   143a4:	beq	14378 <__assert_fail@plt+0x3458>
   143a8:	ldr	r4, [r0]
   143ac:	cmp	r5, #0
   143b0:	moveq	r5, #1
   143b4:	cmp	r4, #22
   143b8:	moveq	r4, #0
   143bc:	b	14334 <__assert_fail@plt+0x3414>
   143c0:	mov	r4, #34	; 0x22
   143c4:	cmp	r5, #0
   143c8:	str	r4, [r0]
   143cc:	bne	14334 <__assert_fail@plt+0x3414>
   143d0:	b	1438c <__assert_fail@plt+0x346c>
   143d4:	bl	10d64 <__stack_chk_fail@plt>
   143d8:	andeq	r5, r2, r8, lsl #30
   143dc:			; <UNDEFINED> instruction: 0x000157b8
   143e0:	mov	r1, #10
   143e4:	b	14290 <__assert_fail@plt+0x3370>
   143e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ec:	sub	sp, sp, #36	; 0x24
   143f0:	ldr	r5, [pc, #2536]	; 14de0 <__assert_fail@plt+0x3ec0>
   143f4:	mov	r9, r2
   143f8:	cmp	r2, #36	; 0x24
   143fc:	str	r3, [sp, #12]
   14400:	ldr	r2, [r5]
   14404:	ldr	r3, [sp, #72]	; 0x48
   14408:	str	r2, [sp, #28]
   1440c:	str	r3, [sp]
   14410:	bhi	14dcc <__assert_fail@plt+0x3eac>
   14414:	cmp	r1, #0
   14418:	mov	r4, r1
   1441c:	mov	r6, r0
   14420:	addeq	r4, sp, #24
   14424:	bl	10e6c <__errno_location@plt>
   14428:	mov	r3, #0
   1442c:	str	r3, [r0]
   14430:	mov	r7, r0
   14434:	bl	10e30 <__ctype_b_loc@plt>
   14438:	ldrb	r3, [r6]
   1443c:	mov	r1, r6
   14440:	ldr	r0, [r0]
   14444:	b	1444c <__assert_fail@plt+0x352c>
   14448:	ldrb	r3, [r1, #1]!
   1444c:	lsl	r2, r3, #1
   14450:	ldrh	r8, [r0, r2]
   14454:	ands	r8, r8, #8192	; 0x2000
   14458:	bne	14448 <__assert_fail@plt+0x3528>
   1445c:	cmp	r3, #45	; 0x2d
   14460:	beq	144fc <__assert_fail@plt+0x35dc>
   14464:	mov	r2, r9
   14468:	mov	r3, r8
   1446c:	mov	r1, r4
   14470:	mov	r0, r6
   14474:	bl	10d28 <__strtoull_internal@plt>
   14478:	ldr	r9, [r4]
   1447c:	cmp	r9, r6
   14480:	mov	sl, r0
   14484:	mov	fp, r1
   14488:	beq	144e4 <__assert_fail@plt+0x35c4>
   1448c:	ldr	r8, [r7]
   14490:	cmp	r8, #0
   14494:	bne	144d4 <__assert_fail@plt+0x35b4>
   14498:	ldr	r3, [sp]
   1449c:	cmp	r3, #0
   144a0:	beq	144b0 <__assert_fail@plt+0x3590>
   144a4:	ldrb	r6, [r9]
   144a8:	cmp	r6, #0
   144ac:	bne	14884 <__assert_fail@plt+0x3964>
   144b0:	ldr	r3, [sp, #12]
   144b4:	strd	sl, [r3]
   144b8:	ldr	r2, [sp, #28]
   144bc:	ldr	r3, [r5]
   144c0:	mov	r0, r8
   144c4:	cmp	r2, r3
   144c8:	bne	14dc8 <__assert_fail@plt+0x3ea8>
   144cc:	add	sp, sp, #36	; 0x24
   144d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d4:	cmp	r8, #34	; 0x22
   144d8:	bne	144fc <__assert_fail@plt+0x35dc>
   144dc:	mov	r8, #1
   144e0:	b	14498 <__assert_fail@plt+0x3578>
   144e4:	ldr	r0, [sp]
   144e8:	cmp	r0, #0
   144ec:	beq	144fc <__assert_fail@plt+0x35dc>
   144f0:	ldrb	r6, [r6]
   144f4:	cmp	r6, #0
   144f8:	bne	14504 <__assert_fail@plt+0x35e4>
   144fc:	mov	r8, #4
   14500:	b	144b8 <__assert_fail@plt+0x3598>
   14504:	mov	r1, r6
   14508:	bl	10e60 <strchr@plt>
   1450c:	cmp	r0, #0
   14510:	movne	sl, #1
   14514:	movne	fp, #0
   14518:	beq	144fc <__assert_fail@plt+0x35dc>
   1451c:	sub	r7, r6, #69	; 0x45
   14520:	cmp	r7, #47	; 0x2f
   14524:	ldrls	pc, [pc, r7, lsl #2]
   14528:	b	146e8 <__assert_fail@plt+0x37c8>
   1452c:	andeq	r4, r1, ip, ror #11
   14530:	andeq	r4, r1, r8, ror #13
   14534:	andeq	r4, r1, ip, ror #11
   14538:	andeq	r4, r1, r8, ror #13
   1453c:	andeq	r4, r1, r8, ror #13
   14540:	andeq	r4, r1, r8, ror #13
   14544:	andeq	r4, r1, ip, ror #11
   14548:	andeq	r4, r1, r8, ror #13
   1454c:	andeq	r4, r1, ip, ror #11
   14550:	andeq	r4, r1, r8, ror #13
   14554:	andeq	r4, r1, r8, ror #13
   14558:	andeq	r4, r1, ip, ror #11
   1455c:	andeq	r4, r1, r8, ror #13
   14560:	andeq	r4, r1, r8, ror #13
   14564:	andeq	r4, r1, r8, ror #13
   14568:	andeq	r4, r1, ip, ror #11
   1456c:	andeq	r4, r1, r8, ror #13
   14570:	andeq	r4, r1, r8, ror #13
   14574:	andeq	r4, r1, r8, ror #13
   14578:	andeq	r4, r1, r8, ror #13
   1457c:	andeq	r4, r1, ip, ror #11
   14580:	andeq	r4, r1, ip, ror #11
   14584:	andeq	r4, r1, r8, ror #13
   14588:	andeq	r4, r1, r8, ror #13
   1458c:	andeq	r4, r1, r8, ror #13
   14590:	andeq	r4, r1, r8, ror #13
   14594:	andeq	r4, r1, r8, ror #13
   14598:	andeq	r4, r1, r8, ror #13
   1459c:	andeq	r4, r1, r8, ror #13
   145a0:	andeq	r4, r1, r8, ror #13
   145a4:	andeq	r4, r1, r8, ror #13
   145a8:	andeq	r4, r1, r8, ror #13
   145ac:	andeq	r4, r1, r8, ror #13
   145b0:	andeq	r4, r1, r8, ror #13
   145b4:	andeq	r4, r1, ip, ror #11
   145b8:	andeq	r4, r1, r8, ror #13
   145bc:	andeq	r4, r1, r8, ror #13
   145c0:	andeq	r4, r1, r8, ror #13
   145c4:	andeq	r4, r1, ip, ror #11
   145c8:	andeq	r4, r1, r8, ror #13
   145cc:	andeq	r4, r1, ip, ror #11
   145d0:	andeq	r4, r1, r8, ror #13
   145d4:	andeq	r4, r1, r8, ror #13
   145d8:	andeq	r4, r1, r8, ror #13
   145dc:	andeq	r4, r1, r8, ror #13
   145e0:	andeq	r4, r1, r8, ror #13
   145e4:	andeq	r4, r1, r8, ror #13
   145e8:	andeq	r4, r1, ip, ror #11
   145ec:	ldr	r0, [sp]
   145f0:	mov	r1, #48	; 0x30
   145f4:	bl	10e60 <strchr@plt>
   145f8:	cmp	r0, #0
   145fc:	beq	146e8 <__assert_fail@plt+0x37c8>
   14600:	ldrb	r3, [r9, #1]
   14604:	cmp	r3, #68	; 0x44
   14608:	beq	14cc8 <__assert_fail@plt+0x3da8>
   1460c:	cmp	r3, #105	; 0x69
   14610:	beq	148a8 <__assert_fail@plt+0x3988>
   14614:	cmp	r3, #66	; 0x42
   14618:	beq	14cc8 <__assert_fail@plt+0x3da8>
   1461c:	cmp	r7, #47	; 0x2f
   14620:	ldrls	pc, [pc, r7, lsl #2]
   14624:	b	14898 <__assert_fail@plt+0x3978>
   14628:	andeq	r4, r1, ip, lsr #25
   1462c:	muleq	r1, r8, r8
   14630:	muleq	r1, ip, ip
   14634:	muleq	r1, r8, r8
   14638:	muleq	r1, r8, r8
   1463c:	muleq	r1, r8, r8
   14640:	andeq	r4, r1, ip, lsl #25
   14644:	muleq	r1, r8, r8
   14648:	andeq	r4, r1, ip, ror ip
   1464c:	muleq	r1, r8, r8
   14650:	muleq	r1, r8, r8
   14654:	andeq	r4, r1, ip, ror #24
   14658:	muleq	r1, r8, r8
   1465c:	muleq	r1, r8, r8
   14660:	muleq	r1, r8, r8
   14664:	andeq	r4, r1, ip, asr ip
   14668:	muleq	r1, r8, r8
   1466c:	muleq	r1, r8, r8
   14670:	muleq	r1, r8, r8
   14674:	muleq	r1, r8, r8
   14678:	andeq	r4, r1, ip, asr #24
   1467c:	andeq	r4, r1, ip, lsr ip
   14680:	muleq	r1, r8, r8
   14684:	muleq	r1, r8, r8
   14688:	muleq	r1, r8, r8
   1468c:	muleq	r1, r8, r8
   14690:	muleq	r1, r8, r8
   14694:	muleq	r1, r8, r8
   14698:	muleq	r1, r8, r8
   1469c:	andeq	r4, r1, r4, ror #17
   146a0:	andeq	r4, r1, r4, lsr ip
   146a4:	muleq	r1, r8, r8
   146a8:	muleq	r1, r8, r8
   146ac:	muleq	r1, r8, r8
   146b0:	muleq	r1, ip, ip
   146b4:	muleq	r1, r8, r8
   146b8:	muleq	r1, r8, r8
   146bc:	muleq	r1, r8, r8
   146c0:	andeq	r4, r1, ip, lsl #25
   146c4:	muleq	r1, r8, r8
   146c8:	andeq	r4, r1, ip, ror ip
   146cc:	muleq	r1, r8, r8
   146d0:	muleq	r1, r8, r8
   146d4:	muleq	r1, r8, r8
   146d8:	muleq	r1, r8, r8
   146dc:	muleq	r1, r8, r8
   146e0:	muleq	r1, r8, r8
   146e4:	andeq	r4, r1, ip, asr ip
   146e8:	mov	lr, #1
   146ec:	mov	r0, #1024	; 0x400
   146f0:	sub	r6, r6, #66	; 0x42
   146f4:	cmp	r6, #53	; 0x35
   146f8:	ldrls	pc, [pc, r6, lsl #2]
   146fc:	b	14898 <__assert_fail@plt+0x3978>
   14700:	andeq	r4, r1, ip, lsl #18
   14704:	muleq	r1, r8, r8
   14708:	muleq	r1, r8, r8
   1470c:	andeq	r4, r1, r0, lsr r9
   14710:	muleq	r1, r8, r8
   14714:	ldrdeq	r4, [r1], -r8
   14718:	muleq	r1, r8, r8
   1471c:	muleq	r1, r8, r8
   14720:	muleq	r1, r8, r8
   14724:	andeq	r4, r1, r8, lsr #20
   14728:	muleq	r1, r8, r8
   1472c:	andeq	r4, r1, ip, asr #23
   14730:	muleq	r1, r8, r8
   14734:	muleq	r1, r8, r8
   14738:	andeq	r4, r1, r0, asr fp
   1473c:	muleq	r1, r8, r8
   14740:	muleq	r1, r8, r8
   14744:	muleq	r1, r8, r8
   14748:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1474c:	muleq	r1, r8, r8
   14750:	muleq	r1, r8, r8
   14754:	muleq	r1, r8, r8
   14758:	muleq	r1, r8, r8
   1475c:	andeq	r4, r1, r8, asr sl
   14760:	andeq	r4, r1, ip, lsr #19
   14764:	muleq	r1, r8, r8
   14768:	muleq	r1, r8, r8
   1476c:	muleq	r1, r8, r8
   14770:	muleq	r1, r8, r8
   14774:	muleq	r1, r8, r8
   14778:	muleq	r1, r8, r8
   1477c:	muleq	r1, r8, r8
   14780:	andeq	r4, r1, r8, ror #17
   14784:	andeq	r4, r1, ip, ror #16
   14788:	muleq	r1, r8, r8
   1478c:	muleq	r1, r8, r8
   14790:	muleq	r1, r8, r8
   14794:	ldrdeq	r4, [r1], -r8
   14798:	muleq	r1, r8, r8
   1479c:	muleq	r1, r8, r8
   147a0:	muleq	r1, r8, r8
   147a4:	andeq	r4, r1, r8, lsr #20
   147a8:	muleq	r1, r8, r8
   147ac:	andeq	r4, r1, ip, asr #23
   147b0:	muleq	r1, r8, r8
   147b4:	muleq	r1, r8, r8
   147b8:	muleq	r1, r8, r8
   147bc:	muleq	r1, r8, r8
   147c0:	muleq	r1, r8, r8
   147c4:	muleq	r1, r8, r8
   147c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147cc:	muleq	r1, r8, r8
   147d0:	muleq	r1, r8, r8
   147d4:	andeq	r4, r1, r0, asr #17
   147d8:	asr	r1, r0, #31
   147dc:	mov	r2, #0
   147e0:	mov	r3, #0
   147e4:	cmp	fp, #0
   147e8:	strd	r2, [sp]
   147ec:	bne	14d0c <__assert_fail@plt+0x3dec>
   147f0:	ldrd	r2, [sp]
   147f4:	orrs	r3, r2, r3
   147f8:	bne	14cfc <__assert_fail@plt+0x3ddc>
   147fc:	mul	r3, sl, r1
   14800:	umull	r6, r7, sl, r0
   14804:	mla	r3, r0, fp, r3
   14808:	ldrd	sl, [sp]
   1480c:	add	ip, r3, r7
   14810:	cmp	ip, #0
   14814:	mov	r7, ip
   14818:	bne	14da0 <__assert_fail@plt+0x3e80>
   1481c:	orrs	r3, sl, fp
   14820:	bne	14cfc <__assert_fail@plt+0x3ddc>
   14824:	umull	r2, r3, r6, r0
   14828:	mul	ip, r6, r1
   1482c:	strd	r2, [sp]
   14830:	mla	r3, r0, r7, ip
   14834:	ldr	r2, [sp, #4]
   14838:	add	ip, r3, r2
   1483c:	cmp	ip, #0
   14840:	str	ip, [sp, #4]
   14844:	bne	14d7c <__assert_fail@plt+0x3e5c>
   14848:	orrs	r3, sl, fp
   1484c:	bne	14cfc <__assert_fail@plt+0x3ddc>
   14850:	ldrd	r6, [sp]
   14854:	mov	r3, #0
   14858:	mul	r2, r6, r1
   1485c:	umull	sl, fp, r6, r0
   14860:	mla	r2, r0, r7, r2
   14864:	add	fp, r2, fp
   14868:	orr	r8, r8, r3
   1486c:	add	r3, r9, lr
   14870:	str	r3, [r4]
   14874:	ldrb	r3, [r9, lr]
   14878:	cmp	r3, #0
   1487c:	orrne	r8, r8, #2
   14880:	b	144b0 <__assert_fail@plt+0x3590>
   14884:	mov	r1, r6
   14888:	ldr	r0, [sp]
   1488c:	bl	10e60 <strchr@plt>
   14890:	cmp	r0, #0
   14894:	bne	1451c <__assert_fail@plt+0x35fc>
   14898:	ldr	r3, [sp, #12]
   1489c:	orr	r8, r8, #2
   148a0:	strd	sl, [r3]
   148a4:	b	144b8 <__assert_fail@plt+0x3598>
   148a8:	ldrb	r3, [r9, #2]
   148ac:	mov	r0, #1024	; 0x400
   148b0:	cmp	r3, #66	; 0x42
   148b4:	movne	lr, #1
   148b8:	moveq	lr, #3
   148bc:	b	146f0 <__assert_fail@plt+0x37d0>
   148c0:	lsr	r3, fp, #31
   148c4:	adds	sl, sl, sl
   148c8:	adc	fp, fp, fp
   148cc:	cmp	r3, #0
   148d0:	beq	1486c <__assert_fail@plt+0x394c>
   148d4:	mov	r8, #1
   148d8:	mvn	sl, #0
   148dc:	mvn	fp, #0
   148e0:	b	1486c <__assert_fail@plt+0x394c>
   148e4:	mov	lr, #1
   148e8:	lsr	r3, fp, #23
   148ec:	cmp	r3, #0
   148f0:	bne	148d4 <__assert_fail@plt+0x39b4>
   148f4:	lsl	r3, fp, #9
   148f8:	orr	r3, r3, sl, lsr #23
   148fc:	lsl	r2, sl, #9
   14900:	mov	sl, r2
   14904:	mov	fp, r3
   14908:	b	1486c <__assert_fail@plt+0x394c>
   1490c:	lsr	r3, fp, #22
   14910:	cmp	r3, #0
   14914:	bne	148d4 <__assert_fail@plt+0x39b4>
   14918:	lsl	r3, fp, #10
   1491c:	orr	r3, r3, sl, lsr #22
   14920:	lsl	r2, sl, #10
   14924:	mov	sl, r2
   14928:	mov	fp, r3
   1492c:	b	1486c <__assert_fail@plt+0x394c>
   14930:	mov	r6, r0
   14934:	asr	r7, r0, #31
   14938:	mov	r3, #0
   1493c:	mov	ip, #6
   14940:	str	r3, [sp]
   14944:	strd	r4, [sp, #16]
   14948:	b	14978 <__assert_fail@plt+0x3a58>
   1494c:	orrs	r3, r2, r3
   14950:	movne	r3, #1
   14954:	muleq	r3, sl, r7
   14958:	strne	r3, [sp]
   1495c:	mlaeq	r3, r6, fp, r3
   14960:	umulleq	sl, fp, sl, r6
   14964:	mvnne	sl, #0
   14968:	addeq	fp, r3, fp
   1496c:	mvnne	fp, #0
   14970:	subs	ip, ip, #1
   14974:	beq	14cbc <__assert_fail@plt+0x3d9c>
   14978:	cmp	fp, #0
   1497c:	mov	r2, #0
   14980:	mov	r3, #0
   14984:	beq	1494c <__assert_fail@plt+0x3a2c>
   14988:	umull	r0, r1, sl, r6
   1498c:	mov	r5, #0
   14990:	mov	r0, r1
   14994:	mov	r1, r5
   14998:	umlal	r0, r1, fp, r6
   1499c:	cmp	r1, r5
   149a0:	movne	r2, #1
   149a4:	movne	r3, #0
   149a8:	b	1494c <__assert_fail@plt+0x3a2c>
   149ac:	mov	r6, r0
   149b0:	asr	r7, r0, #31
   149b4:	mov	r3, #0
   149b8:	mov	ip, #7
   149bc:	str	r3, [sp]
   149c0:	strd	r4, [sp, #16]
   149c4:	b	149f4 <__assert_fail@plt+0x3ad4>
   149c8:	orrs	r3, r2, r3
   149cc:	movne	r3, #1
   149d0:	muleq	r3, sl, r7
   149d4:	strne	r3, [sp]
   149d8:	mlaeq	r3, r6, fp, r3
   149dc:	umulleq	sl, fp, sl, r6
   149e0:	mvnne	sl, #0
   149e4:	addeq	fp, r3, fp
   149e8:	mvnne	fp, #0
   149ec:	subs	ip, ip, #1
   149f0:	beq	14cbc <__assert_fail@plt+0x3d9c>
   149f4:	cmp	fp, #0
   149f8:	mov	r2, #0
   149fc:	mov	r3, #0
   14a00:	beq	149c8 <__assert_fail@plt+0x3aa8>
   14a04:	umull	r0, r1, sl, r6
   14a08:	mov	r5, #0
   14a0c:	mov	r0, r1
   14a10:	mov	r1, r5
   14a14:	umlal	r0, r1, fp, r6
   14a18:	cmp	r1, r5
   14a1c:	movne	r2, #1
   14a20:	movne	r3, #0
   14a24:	b	149c8 <__assert_fail@plt+0x3aa8>
   14a28:	asr	r1, r0, #31
   14a2c:	cmp	fp, #0
   14a30:	mov	r6, #0
   14a34:	mov	r7, #0
   14a38:	bne	14cd4 <__assert_fail@plt+0x3db4>
   14a3c:	orrs	r3, r6, r7
   14a40:	bne	148d4 <__assert_fail@plt+0x39b4>
   14a44:	mul	r3, sl, r1
   14a48:	mla	r3, r0, fp, r3
   14a4c:	umull	sl, fp, sl, r0
   14a50:	add	fp, r3, fp
   14a54:	b	1486c <__assert_fail@plt+0x394c>
   14a58:	mov	r6, r0
   14a5c:	asr	r7, r0, #31
   14a60:	mov	r3, #0
   14a64:	mov	ip, #8
   14a68:	str	r3, [sp]
   14a6c:	strd	r4, [sp, #16]
   14a70:	b	14aa0 <__assert_fail@plt+0x3b80>
   14a74:	orrs	r3, r2, r3
   14a78:	movne	r3, #1
   14a7c:	muleq	r3, sl, r7
   14a80:	strne	r3, [sp]
   14a84:	mlaeq	r3, r6, fp, r3
   14a88:	umulleq	sl, fp, sl, r6
   14a8c:	mvnne	sl, #0
   14a90:	addeq	fp, r3, fp
   14a94:	mvnne	fp, #0
   14a98:	subs	ip, ip, #1
   14a9c:	beq	14cbc <__assert_fail@plt+0x3d9c>
   14aa0:	cmp	fp, #0
   14aa4:	mov	r2, #0
   14aa8:	mov	r3, #0
   14aac:	beq	14a74 <__assert_fail@plt+0x3b54>
   14ab0:	umull	r0, r1, sl, r6
   14ab4:	mov	r5, #0
   14ab8:	mov	r0, r1
   14abc:	mov	r1, r5
   14ac0:	umlal	r0, r1, fp, r6
   14ac4:	cmp	r1, r5
   14ac8:	movne	r2, #1
   14acc:	movne	r3, #0
   14ad0:	b	14a74 <__assert_fail@plt+0x3b54>
   14ad4:	mov	r6, r0
   14ad8:	asr	r7, r0, #31
   14adc:	mov	r3, #0
   14ae0:	mov	ip, #4
   14ae4:	str	r3, [sp]
   14ae8:	strd	r4, [sp, #16]
   14aec:	b	14b1c <__assert_fail@plt+0x3bfc>
   14af0:	orrs	r3, r2, r3
   14af4:	movne	r3, #1
   14af8:	muleq	r3, sl, r7
   14afc:	strne	r3, [sp]
   14b00:	mlaeq	r3, r6, fp, r3
   14b04:	umulleq	sl, fp, sl, r6
   14b08:	mvnne	sl, #0
   14b0c:	addeq	fp, r3, fp
   14b10:	mvnne	fp, #0
   14b14:	subs	ip, ip, #1
   14b18:	beq	14cbc <__assert_fail@plt+0x3d9c>
   14b1c:	cmp	fp, #0
   14b20:	mov	r2, #0
   14b24:	mov	r3, #0
   14b28:	beq	14af0 <__assert_fail@plt+0x3bd0>
   14b2c:	umull	r0, r1, sl, r6
   14b30:	mov	r5, #0
   14b34:	mov	r0, r1
   14b38:	mov	r1, r5
   14b3c:	umlal	r0, r1, fp, r6
   14b40:	cmp	r1, r5
   14b44:	movne	r2, #1
   14b48:	movne	r3, #0
   14b4c:	b	14af0 <__assert_fail@plt+0x3bd0>
   14b50:	mov	r6, r0
   14b54:	asr	r7, r0, #31
   14b58:	mov	r3, #0
   14b5c:	mov	ip, #5
   14b60:	str	r3, [sp]
   14b64:	strd	r4, [sp, #16]
   14b68:	b	14b98 <__assert_fail@plt+0x3c78>
   14b6c:	orrs	r3, r2, r3
   14b70:	movne	r3, #1
   14b74:	muleq	r3, sl, r7
   14b78:	strne	r3, [sp]
   14b7c:	mlaeq	r3, r6, fp, r3
   14b80:	umulleq	sl, fp, sl, r6
   14b84:	mvnne	sl, #0
   14b88:	addeq	fp, r3, fp
   14b8c:	mvnne	fp, #0
   14b90:	subs	ip, ip, #1
   14b94:	beq	14cbc <__assert_fail@plt+0x3d9c>
   14b98:	cmp	fp, #0
   14b9c:	mov	r2, #0
   14ba0:	mov	r3, #0
   14ba4:	beq	14b6c <__assert_fail@plt+0x3c4c>
   14ba8:	umull	r0, r1, sl, r6
   14bac:	mov	r5, #0
   14bb0:	mov	r0, r1
   14bb4:	mov	r1, r5
   14bb8:	umlal	r0, r1, fp, r6
   14bbc:	cmp	r1, r5
   14bc0:	movne	r2, #1
   14bc4:	movne	r3, #0
   14bc8:	b	14b6c <__assert_fail@plt+0x3c4c>
   14bcc:	asr	r1, r0, #31
   14bd0:	cmp	fp, #0
   14bd4:	mov	r6, #0
   14bd8:	mov	r7, #0
   14bdc:	bne	14d30 <__assert_fail@plt+0x3e10>
   14be0:	orrs	r3, r6, r7
   14be4:	bne	148d4 <__assert_fail@plt+0x39b4>
   14be8:	umull	r2, r3, sl, r0
   14bec:	mul	ip, sl, r1
   14bf0:	strd	r2, [sp]
   14bf4:	mla	r3, r0, fp, ip
   14bf8:	ldr	r2, [sp, #4]
   14bfc:	mov	sl, r6
   14c00:	add	ip, r3, r2
   14c04:	cmp	ip, #0
   14c08:	mov	fp, r7
   14c0c:	str	ip, [sp, #4]
   14c10:	bne	14d58 <__assert_fail@plt+0x3e38>
   14c14:	orrs	r3, sl, fp
   14c18:	bne	148d4 <__assert_fail@plt+0x39b4>
   14c1c:	ldrd	r6, [sp]
   14c20:	mul	r3, r6, r1
   14c24:	umull	sl, fp, r6, r0
   14c28:	mla	r0, r0, r7, r3
   14c2c:	add	fp, r0, fp
   14c30:	b	1486c <__assert_fail@plt+0x394c>
   14c34:	mov	lr, #1
   14c38:	b	1486c <__assert_fail@plt+0x394c>
   14c3c:	mov	lr, #1
   14c40:	mov	r6, #1024	; 0x400
   14c44:	mov	r7, #0
   14c48:	b	149b4 <__assert_fail@plt+0x3a94>
   14c4c:	mov	lr, #1
   14c50:	mov	r6, #1024	; 0x400
   14c54:	mov	r7, #0
   14c58:	b	14a60 <__assert_fail@plt+0x3b40>
   14c5c:	mov	lr, #1
   14c60:	mov	r6, #1024	; 0x400
   14c64:	mov	r7, #0
   14c68:	b	14adc <__assert_fail@plt+0x3bbc>
   14c6c:	mov	lr, #1
   14c70:	mov	r6, #1024	; 0x400
   14c74:	mov	r7, #0
   14c78:	b	14b58 <__assert_fail@plt+0x3c38>
   14c7c:	mov	lr, #1
   14c80:	mov	r0, #1024	; 0x400
   14c84:	mov	r1, #0
   14c88:	b	14bd0 <__assert_fail@plt+0x3cb0>
   14c8c:	mov	lr, #1
   14c90:	mov	r0, #1024	; 0x400
   14c94:	mov	r1, #0
   14c98:	b	14a2c <__assert_fail@plt+0x3b0c>
   14c9c:	mov	lr, #1
   14ca0:	mov	r0, #1024	; 0x400
   14ca4:	mov	r1, #0
   14ca8:	b	147dc <__assert_fail@plt+0x38bc>
   14cac:	mov	lr, #1
   14cb0:	mov	r6, #1024	; 0x400
   14cb4:	mov	r7, #0
   14cb8:	b	14938 <__assert_fail@plt+0x3a18>
   14cbc:	ldrd	r4, [sp, #16]
   14cc0:	ldr	r3, [sp]
   14cc4:	b	14868 <__assert_fail@plt+0x3948>
   14cc8:	mov	lr, #2
   14ccc:	mov	r0, #1000	; 0x3e8
   14cd0:	b	146f0 <__assert_fail@plt+0x37d0>
   14cd4:	umull	r2, r3, sl, r0
   14cd8:	str	r3, [sp]
   14cdc:	mov	r3, #0
   14ce0:	str	r3, [sp, #4]
   14ce4:	ldrd	r2, [sp]
   14ce8:	umlal	r2, r3, fp, r0
   14cec:	cmp	r3, #0
   14cf0:	movne	r6, #1
   14cf4:	movne	r7, #0
   14cf8:	b	14a3c <__assert_fail@plt+0x3b1c>
   14cfc:	mov	r3, #1
   14d00:	mvn	sl, #0
   14d04:	mvn	fp, #0
   14d08:	b	14868 <__assert_fail@plt+0x3948>
   14d0c:	umull	r2, r3, sl, r0
   14d10:	mov	r7, #0
   14d14:	mov	r6, r3
   14d18:	umlal	r6, r7, fp, r0
   14d1c:	cmp	r7, #0
   14d20:	movne	r2, #1
   14d24:	movne	r3, #0
   14d28:	strdne	r2, [sp]
   14d2c:	b	147f0 <__assert_fail@plt+0x38d0>
   14d30:	umull	r2, r3, sl, r0
   14d34:	str	r3, [sp]
   14d38:	mov	r3, #0
   14d3c:	str	r3, [sp, #4]
   14d40:	ldrd	r2, [sp]
   14d44:	umlal	r2, r3, fp, r0
   14d48:	cmp	r3, #0
   14d4c:	movne	r6, #1
   14d50:	movne	r7, #0
   14d54:	b	14be0 <__assert_fail@plt+0x3cc0>
   14d58:	ldr	r3, [sp]
   14d5c:	mov	r7, #0
   14d60:	umull	r2, r3, r3, r0
   14d64:	mov	r6, r3
   14d68:	umlal	r6, r7, ip, r0
   14d6c:	cmp	r7, #0
   14d70:	movne	sl, #1
   14d74:	movne	fp, #0
   14d78:	b	14c14 <__assert_fail@plt+0x3cf4>
   14d7c:	ldr	r3, [sp]
   14d80:	mov	r7, #0
   14d84:	umull	r2, r3, r3, r0
   14d88:	mov	r6, r3
   14d8c:	umlal	r6, r7, ip, r0
   14d90:	cmp	r7, #0
   14d94:	movne	sl, #1
   14d98:	movne	fp, #0
   14d9c:	b	14848 <__assert_fail@plt+0x3928>
   14da0:	umull	r2, r3, r6, r0
   14da4:	str	r3, [sp]
   14da8:	mov	r3, #0
   14dac:	str	r3, [sp, #4]
   14db0:	ldrd	r2, [sp]
   14db4:	umlal	r2, r3, ip, r0
   14db8:	cmp	r3, #0
   14dbc:	movne	sl, #1
   14dc0:	movne	fp, #0
   14dc4:	b	1481c <__assert_fail@plt+0x38fc>
   14dc8:	bl	10d64 <__stack_chk_fail@plt>
   14dcc:	ldr	r3, [pc, #16]	; 14de4 <__assert_fail@plt+0x3ec4>
   14dd0:	mov	r2, #96	; 0x60
   14dd4:	ldr	r1, [pc, #12]	; 14de8 <__assert_fail@plt+0x3ec8>
   14dd8:	ldr	r0, [pc, #12]	; 14dec <__assert_fail@plt+0x3ecc>
   14ddc:	bl	10f20 <__assert_fail@plt>
   14de0:	andeq	r5, r2, r8, lsl #30
   14de4:	andeq	r5, r1, r8, lsr #24
   14de8:	andeq	r5, r1, r4, lsr ip
   14dec:	andeq	r5, r1, r4, asr #24
   14df0:	push	{r4, r5, r6, r7, r8, lr}
   14df4:	subs	r7, r0, #0
   14df8:	ldr	r5, [pc, #108]	; 14e6c <__assert_fail@plt+0x3f4c>
   14dfc:	sub	sp, sp, #8
   14e00:	mov	r8, r1
   14e04:	ldr	r1, [r5]
   14e08:	moveq	r7, sp
   14e0c:	str	r1, [sp, #4]
   14e10:	mov	r0, r7
   14e14:	mov	r1, r8
   14e18:	mov	r6, r2
   14e1c:	bl	10dd0 <mbrtowc@plt>
   14e20:	cmp	r6, #0
   14e24:	cmnne	r0, #3
   14e28:	mov	r4, r0
   14e2c:	bhi	14e4c <__assert_fail@plt+0x3f2c>
   14e30:	ldr	r2, [sp, #4]
   14e34:	ldr	r3, [r5]
   14e38:	mov	r0, r4
   14e3c:	cmp	r2, r3
   14e40:	bne	14e68 <__assert_fail@plt+0x3f48>
   14e44:	add	sp, sp, #8
   14e48:	pop	{r4, r5, r6, r7, r8, pc}
   14e4c:	mov	r0, #0
   14e50:	bl	14ee4 <__assert_fail@plt+0x3fc4>
   14e54:	cmp	r0, #0
   14e58:	moveq	r4, #1
   14e5c:	ldrbeq	r3, [r8]
   14e60:	streq	r3, [r7]
   14e64:	b	14e30 <__assert_fail@plt+0x3f10>
   14e68:	bl	10d64 <__stack_chk_fail@plt>
   14e6c:	andeq	r5, r2, r8, lsl #30
   14e70:	push	{r4, r5, r6, lr}
   14e74:	mov	r4, r0
   14e78:	bl	10dc4 <__fpending@plt>
   14e7c:	ldr	r5, [r4]
   14e80:	and	r5, r5, #32
   14e84:	mov	r6, r0
   14e88:	mov	r0, r4
   14e8c:	bl	14f64 <__assert_fail@plt+0x4044>
   14e90:	cmp	r5, #0
   14e94:	mov	r4, r0
   14e98:	bne	14ec4 <__assert_fail@plt+0x3fa4>
   14e9c:	cmp	r0, #0
   14ea0:	beq	14ebc <__assert_fail@plt+0x3f9c>
   14ea4:	cmp	r6, #0
   14ea8:	bne	14edc <__assert_fail@plt+0x3fbc>
   14eac:	bl	10e6c <__errno_location@plt>
   14eb0:	ldr	r4, [r0]
   14eb4:	subs	r4, r4, #9
   14eb8:	mvnne	r4, #0
   14ebc:	mov	r0, r4
   14ec0:	pop	{r4, r5, r6, pc}
   14ec4:	cmp	r0, #0
   14ec8:	bne	14edc <__assert_fail@plt+0x3fbc>
   14ecc:	bl	10e6c <__errno_location@plt>
   14ed0:	str	r4, [r0]
   14ed4:	mvn	r4, #0
   14ed8:	b	14ebc <__assert_fail@plt+0x3f9c>
   14edc:	mvn	r4, #0
   14ee0:	b	14ebc <__assert_fail@plt+0x3f9c>
   14ee4:	push	{r4, lr}
   14ee8:	mov	r1, #0
   14eec:	bl	10ecc <setlocale@plt>
   14ef0:	subs	r4, r0, #0
   14ef4:	beq	14f20 <__assert_fail@plt+0x4000>
   14ef8:	ldr	r1, [pc, #40]	; 14f28 <__assert_fail@plt+0x4008>
   14efc:	bl	10cec <strcmp@plt>
   14f00:	cmp	r0, #0
   14f04:	popeq	{r4, pc}
   14f08:	mov	r0, r4
   14f0c:	ldr	r1, [pc, #24]	; 14f2c <__assert_fail@plt+0x400c>
   14f10:	bl	10cec <strcmp@plt>
   14f14:	adds	r0, r0, #0
   14f18:	movne	r0, #1
   14f1c:	pop	{r4, pc}
   14f20:	mov	r0, #1
   14f24:	pop	{r4, pc}
   14f28:	andeq	r5, r1, ip, ror #24
   14f2c:	andeq	r5, r1, r0, ror ip
   14f30:	push	{r4, lr}
   14f34:	mov	r0, #14
   14f38:	bl	10ee4 <nl_langinfo@plt>
   14f3c:	cmp	r0, #0
   14f40:	beq	14f58 <__assert_fail@plt+0x4038>
   14f44:	ldrb	r2, [r0]
   14f48:	ldr	r3, [pc, #16]	; 14f60 <__assert_fail@plt+0x4040>
   14f4c:	cmp	r2, #0
   14f50:	moveq	r0, r3
   14f54:	pop	{r4, pc}
   14f58:	ldr	r0, [pc]	; 14f60 <__assert_fail@plt+0x4040>
   14f5c:	pop	{r4, pc}
   14f60:	andeq	r5, r1, r8, ror ip
   14f64:	push	{r4, r5, lr}
   14f68:	sub	sp, sp, #12
   14f6c:	mov	r4, r0
   14f70:	bl	10e9c <fileno@plt>
   14f74:	cmp	r0, #0
   14f78:	mov	r0, r4
   14f7c:	blt	14ff8 <__assert_fail@plt+0x40d8>
   14f80:	bl	10e0c <__freading@plt>
   14f84:	cmp	r0, #0
   14f88:	bne	14fc4 <__assert_fail@plt+0x40a4>
   14f8c:	mov	r0, r4
   14f90:	bl	15004 <__assert_fail@plt+0x40e4>
   14f94:	cmp	r0, #0
   14f98:	beq	14ff4 <__assert_fail@plt+0x40d4>
   14f9c:	bl	10e6c <__errno_location@plt>
   14fa0:	mov	r5, r0
   14fa4:	mov	r0, r4
   14fa8:	ldr	r4, [r5]
   14fac:	bl	10eb4 <fclose@plt>
   14fb0:	cmp	r4, #0
   14fb4:	mvnne	r0, #0
   14fb8:	strne	r4, [r5]
   14fbc:	add	sp, sp, #12
   14fc0:	pop	{r4, r5, pc}
   14fc4:	mov	r0, r4
   14fc8:	bl	10e9c <fileno@plt>
   14fcc:	mov	r3, #1
   14fd0:	str	r3, [sp]
   14fd4:	mov	r2, #0
   14fd8:	mov	r3, #0
   14fdc:	bl	10dac <lseek64@plt>
   14fe0:	mvn	r3, #0
   14fe4:	mvn	r2, #0
   14fe8:	cmp	r1, r3
   14fec:	cmpeq	r0, r2
   14ff0:	bne	14f8c <__assert_fail@plt+0x406c>
   14ff4:	mov	r0, r4
   14ff8:	add	sp, sp, #12
   14ffc:	pop	{r4, r5, lr}
   15000:	b	10eb4 <fclose@plt>
   15004:	push	{r4, lr}
   15008:	subs	r4, r0, #0
   1500c:	sub	sp, sp, #8
   15010:	beq	1502c <__assert_fail@plt+0x410c>
   15014:	bl	10e0c <__freading@plt>
   15018:	cmp	r0, #0
   1501c:	beq	1502c <__assert_fail@plt+0x410c>
   15020:	ldr	r3, [r4]
   15024:	tst	r3, #256	; 0x100
   15028:	bne	1503c <__assert_fail@plt+0x411c>
   1502c:	mov	r0, r4
   15030:	add	sp, sp, #8
   15034:	pop	{r4, lr}
   15038:	b	10cf8 <fflush@plt>
   1503c:	mov	r3, #1
   15040:	str	r3, [sp]
   15044:	mov	r2, #0
   15048:	mov	r3, #0
   1504c:	mov	r0, r4
   15050:	bl	15064 <__assert_fail@plt+0x4144>
   15054:	mov	r0, r4
   15058:	add	sp, sp, #8
   1505c:	pop	{r4, lr}
   15060:	b	10cf8 <fflush@plt>
   15064:	push	{r4, r5, r6, r7, r8, lr}
   15068:	sub	sp, sp, #8
   1506c:	ldmib	r0, {ip, lr}
   15070:	mov	r4, r0
   15074:	ldr	r5, [sp, #32]
   15078:	cmp	lr, ip
   1507c:	beq	15094 <__assert_fail@plt+0x4174>
   15080:	str	r5, [sp, #32]
   15084:	mov	r0, r4
   15088:	add	sp, sp, #8
   1508c:	pop	{r4, r5, r6, r7, r8, lr}
   15090:	b	10ec0 <fseeko64@plt>
   15094:	ldr	lr, [r0, #20]
   15098:	ldr	ip, [r0, #16]
   1509c:	cmp	lr, ip
   150a0:	bne	15080 <__assert_fail@plt+0x4160>
   150a4:	ldr	r8, [r0, #36]	; 0x24
   150a8:	cmp	r8, #0
   150ac:	bne	15080 <__assert_fail@plt+0x4160>
   150b0:	mov	r6, r2
   150b4:	mov	r7, r3
   150b8:	bl	10e9c <fileno@plt>
   150bc:	mov	r2, r6
   150c0:	mov	r3, r7
   150c4:	str	r5, [sp]
   150c8:	bl	10dac <lseek64@plt>
   150cc:	mvn	r3, #0
   150d0:	mvn	r2, #0
   150d4:	cmp	r1, r3
   150d8:	cmpeq	r0, r2
   150dc:	beq	150fc <__assert_fail@plt+0x41dc>
   150e0:	ldr	r3, [r4]
   150e4:	strd	r0, [r4, #80]	; 0x50
   150e8:	mov	r0, r8
   150ec:	bic	r3, r3, #16
   150f0:	str	r3, [r4]
   150f4:	add	sp, sp, #8
   150f8:	pop	{r4, r5, r6, r7, r8, pc}
   150fc:	mvn	r0, #0
   15100:	b	150f4 <__assert_fail@plt+0x41d4>
   15104:	subs	r2, r1, #1
   15108:	bxeq	lr
   1510c:	bcc	152e4 <__assert_fail@plt+0x43c4>
   15110:	cmp	r0, r1
   15114:	bls	152c8 <__assert_fail@plt+0x43a8>
   15118:	tst	r1, r2
   1511c:	beq	152d4 <__assert_fail@plt+0x43b4>
   15120:	clz	r3, r0
   15124:	clz	r2, r1
   15128:	sub	r3, r2, r3
   1512c:	rsbs	r3, r3, #31
   15130:	addne	r3, r3, r3, lsl #1
   15134:	mov	r2, #0
   15138:	addne	pc, pc, r3, lsl #2
   1513c:	nop			; (mov r0, r0)
   15140:	cmp	r0, r1, lsl #31
   15144:	adc	r2, r2, r2
   15148:	subcs	r0, r0, r1, lsl #31
   1514c:	cmp	r0, r1, lsl #30
   15150:	adc	r2, r2, r2
   15154:	subcs	r0, r0, r1, lsl #30
   15158:	cmp	r0, r1, lsl #29
   1515c:	adc	r2, r2, r2
   15160:	subcs	r0, r0, r1, lsl #29
   15164:	cmp	r0, r1, lsl #28
   15168:	adc	r2, r2, r2
   1516c:	subcs	r0, r0, r1, lsl #28
   15170:	cmp	r0, r1, lsl #27
   15174:	adc	r2, r2, r2
   15178:	subcs	r0, r0, r1, lsl #27
   1517c:	cmp	r0, r1, lsl #26
   15180:	adc	r2, r2, r2
   15184:	subcs	r0, r0, r1, lsl #26
   15188:	cmp	r0, r1, lsl #25
   1518c:	adc	r2, r2, r2
   15190:	subcs	r0, r0, r1, lsl #25
   15194:	cmp	r0, r1, lsl #24
   15198:	adc	r2, r2, r2
   1519c:	subcs	r0, r0, r1, lsl #24
   151a0:	cmp	r0, r1, lsl #23
   151a4:	adc	r2, r2, r2
   151a8:	subcs	r0, r0, r1, lsl #23
   151ac:	cmp	r0, r1, lsl #22
   151b0:	adc	r2, r2, r2
   151b4:	subcs	r0, r0, r1, lsl #22
   151b8:	cmp	r0, r1, lsl #21
   151bc:	adc	r2, r2, r2
   151c0:	subcs	r0, r0, r1, lsl #21
   151c4:	cmp	r0, r1, lsl #20
   151c8:	adc	r2, r2, r2
   151cc:	subcs	r0, r0, r1, lsl #20
   151d0:	cmp	r0, r1, lsl #19
   151d4:	adc	r2, r2, r2
   151d8:	subcs	r0, r0, r1, lsl #19
   151dc:	cmp	r0, r1, lsl #18
   151e0:	adc	r2, r2, r2
   151e4:	subcs	r0, r0, r1, lsl #18
   151e8:	cmp	r0, r1, lsl #17
   151ec:	adc	r2, r2, r2
   151f0:	subcs	r0, r0, r1, lsl #17
   151f4:	cmp	r0, r1, lsl #16
   151f8:	adc	r2, r2, r2
   151fc:	subcs	r0, r0, r1, lsl #16
   15200:	cmp	r0, r1, lsl #15
   15204:	adc	r2, r2, r2
   15208:	subcs	r0, r0, r1, lsl #15
   1520c:	cmp	r0, r1, lsl #14
   15210:	adc	r2, r2, r2
   15214:	subcs	r0, r0, r1, lsl #14
   15218:	cmp	r0, r1, lsl #13
   1521c:	adc	r2, r2, r2
   15220:	subcs	r0, r0, r1, lsl #13
   15224:	cmp	r0, r1, lsl #12
   15228:	adc	r2, r2, r2
   1522c:	subcs	r0, r0, r1, lsl #12
   15230:	cmp	r0, r1, lsl #11
   15234:	adc	r2, r2, r2
   15238:	subcs	r0, r0, r1, lsl #11
   1523c:	cmp	r0, r1, lsl #10
   15240:	adc	r2, r2, r2
   15244:	subcs	r0, r0, r1, lsl #10
   15248:	cmp	r0, r1, lsl #9
   1524c:	adc	r2, r2, r2
   15250:	subcs	r0, r0, r1, lsl #9
   15254:	cmp	r0, r1, lsl #8
   15258:	adc	r2, r2, r2
   1525c:	subcs	r0, r0, r1, lsl #8
   15260:	cmp	r0, r1, lsl #7
   15264:	adc	r2, r2, r2
   15268:	subcs	r0, r0, r1, lsl #7
   1526c:	cmp	r0, r1, lsl #6
   15270:	adc	r2, r2, r2
   15274:	subcs	r0, r0, r1, lsl #6
   15278:	cmp	r0, r1, lsl #5
   1527c:	adc	r2, r2, r2
   15280:	subcs	r0, r0, r1, lsl #5
   15284:	cmp	r0, r1, lsl #4
   15288:	adc	r2, r2, r2
   1528c:	subcs	r0, r0, r1, lsl #4
   15290:	cmp	r0, r1, lsl #3
   15294:	adc	r2, r2, r2
   15298:	subcs	r0, r0, r1, lsl #3
   1529c:	cmp	r0, r1, lsl #2
   152a0:	adc	r2, r2, r2
   152a4:	subcs	r0, r0, r1, lsl #2
   152a8:	cmp	r0, r1, lsl #1
   152ac:	adc	r2, r2, r2
   152b0:	subcs	r0, r0, r1, lsl #1
   152b4:	cmp	r0, r1
   152b8:	adc	r2, r2, r2
   152bc:	subcs	r0, r0, r1
   152c0:	mov	r0, r2
   152c4:	bx	lr
   152c8:	moveq	r0, #1
   152cc:	movne	r0, #0
   152d0:	bx	lr
   152d4:	clz	r2, r1
   152d8:	rsb	r2, r2, #31
   152dc:	lsr	r0, r0, r2
   152e0:	bx	lr
   152e4:	cmp	r0, #0
   152e8:	mvnne	r0, #0
   152ec:	b	15310 <__assert_fail@plt+0x43f0>
   152f0:	cmp	r1, #0
   152f4:	beq	152e4 <__assert_fail@plt+0x43c4>
   152f8:	push	{r0, r1, lr}
   152fc:	bl	15104 <__assert_fail@plt+0x41e4>
   15300:	pop	{r1, r2, lr}
   15304:	mul	r3, r2, r0
   15308:	sub	r1, r1, r3
   1530c:	bx	lr
   15310:	push	{r1, lr}
   15314:	mov	r0, #8
   15318:	bl	10ce0 <raise@plt>
   1531c:	pop	{r1, pc}
   15320:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15324:	mov	r7, r0
   15328:	ldr	r6, [pc, #72]	; 15378 <__assert_fail@plt+0x4458>
   1532c:	ldr	r5, [pc, #72]	; 1537c <__assert_fail@plt+0x445c>
   15330:	add	r6, pc, r6
   15334:	add	r5, pc, r5
   15338:	sub	r6, r6, r5
   1533c:	mov	r8, r1
   15340:	mov	r9, r2
   15344:	bl	10ca8 <calloc@plt-0x20>
   15348:	asrs	r6, r6, #2
   1534c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15350:	mov	r4, #0
   15354:	add	r4, r4, #1
   15358:	ldr	r3, [r5], #4
   1535c:	mov	r2, r9
   15360:	mov	r1, r8
   15364:	mov	r0, r7
   15368:	blx	r3
   1536c:	cmp	r6, r4
   15370:	bne	15354 <__assert_fail@plt+0x4434>
   15374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15378:	andeq	r0, r1, ip, asr #23
   1537c:	andeq	r0, r1, r4, asr #23
   15380:	bx	lr
   15384:	ldr	r3, [pc, #12]	; 15398 <__assert_fail@plt+0x4478>
   15388:	mov	r1, #0
   1538c:	add	r3, pc, r3
   15390:	ldr	r2, [r3]
   15394:	b	10e78 <__cxa_atexit@plt>
   15398:	andeq	r0, r1, ip, asr #26

Disassembly of section .fini:

0001539c <.fini>:
   1539c:	push	{r3, lr}
   153a0:	pop	{r3, pc}
