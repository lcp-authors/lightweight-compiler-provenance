
raspbian-preinstalled/arm-linux-gnueabihf-c++filt:     file format elf32-littlearm


Disassembly of section .init:

00010f70 <.init>:
   10f70:	push	{r3, lr}
   10f74:	bl	116dc <__assert_fail@plt+0x458>
   10f78:	pop	{r3, pc}

Disassembly of section .plt:

00010f7c <cplus_demangle_name_to_style@plt-0x14>:
   10f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f80:	ldr	lr, [pc, #4]	; 10f8c <cplus_demangle_name_to_style@plt-0x4>
   10f84:	add	lr, pc, lr
   10f88:	ldr	pc, [lr, #8]!
   10f8c:	andeq	r4, r1, r4, ror r0

00010f90 <cplus_demangle_name_to_style@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #116]!	; 0x74

00010f9c <bfd_scan_vma@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #108]!	; 0x6c

00010fa8 <strcmp@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #100]!	; 0x64

00010fb4 <strtol@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #92]!	; 0x5c

00010fc0 <printf@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #84]!	; 0x54

00010fcc <fflush@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #76]!	; 0x4c

00010fd8 <bfd_arch_list@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #68]!	; 0x44

00010fe4 <memmove@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #60]!	; 0x3c

00010ff0 <bfd_set_default_target@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #52]!	; 0x34

00010ffc <free@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #44]!	; 0x2c

00011008 <ferror@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #36]!	; 0x24

00011014 <cplus_demangle_set_style@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #28]!

00011020 <memcpy@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #20]!

0001102c <ftell@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #12]!

00011038 <ctime@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #4]!

00011044 <dcgettext@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #77824	; 0x13000
   1104c:	ldr	pc, [ip, #4092]!	; 0xffc

00011050 <unlink@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #77824	; 0x13000
   11058:	ldr	pc, [ip, #4084]!	; 0xff4

0001105c <xrealloc@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #77824	; 0x13000
   11064:	ldr	pc, [ip, #4076]!	; 0xfec

00011068 <bfd_target_list@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #77824	; 0x13000
   11070:	ldr	pc, [ip, #4068]!	; 0xfe4

00011074 <bfd_get_error@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #77824	; 0x13000
   1107c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011080 <fwrite@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #77824	; 0x13000
   11088:	ldr	pc, [ip, #4052]!	; 0xfd4

0001108c <xmalloc@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #77824	; 0x13000
   11094:	ldr	pc, [ip, #4044]!	; 0xfcc

00011098 <xmalloc_set_program_name@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #77824	; 0x13000
   110a0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110a4 <xstrdup@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #77824	; 0x13000
   110ac:	ldr	pc, [ip, #4028]!	; 0xfbc

000110b0 <strcpy@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #77824	; 0x13000
   110b8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110bc <fread@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #77824	; 0x13000
   110c4:	ldr	pc, [ip, #4012]!	; 0xfac

000110c8 <mkstemps64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #77824	; 0x13000
   110d0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110d4 <getenv@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #3996]!	; 0xf9c

000110e0 <mkstemp64@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #3988]!	; 0xf94

000110ec <__libc_start_main@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #77824	; 0x13000
   110f4:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f8 <strerror@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #77824	; 0x13000
   11100:	ldr	pc, [ip, #3972]!	; 0xf84

00011104 <__gmon_start__@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #77824	; 0x13000
   1110c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011110 <bfd_set_format@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #77824	; 0x13000
   11118:	ldr	pc, [ip, #3956]!	; 0xf74

0001111c <getopt_long@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #77824	; 0x13000
   11124:	ldr	pc, [ip, #3948]!	; 0xf6c

00011128 <exit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #77824	; 0x13000
   11130:	ldr	pc, [ip, #3940]!	; 0xf64

00011134 <strlen@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #77824	; 0x13000
   1113c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011140 <bfd_close_all_done@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #77824	; 0x13000
   11148:	ldr	pc, [ip, #3924]!	; 0xf54

0001114c <strchr@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #77824	; 0x13000
   11154:	ldr	pc, [ip, #3916]!	; 0xf4c

00011158 <fprintf@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #77824	; 0x13000
   11160:	ldr	pc, [ip, #3908]!	; 0xf44

00011164 <bfd_printable_arch_mach@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #77824	; 0x13000
   1116c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011170 <__errno_location@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #77824	; 0x13000
   11178:	ldr	pc, [ip, #3892]!	; 0xf34

0001117c <bfd_iterate_over_targets@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #77824	; 0x13000
   11184:	ldr	pc, [ip, #3884]!	; 0xf2c

00011188 <memset@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #77824	; 0x13000
   11190:	ldr	pc, [ip, #3876]!	; 0xf24

00011194 <access@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #77824	; 0x13000
   1119c:	ldr	pc, [ip, #3868]!	; 0xf1c

000111a0 <fclose@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #77824	; 0x13000
   111a8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ac <bfd_openw@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #77824	; 0x13000
   111b4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b8 <cplus_demangle@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #77824	; 0x13000
   111c0:	ldr	pc, [ip, #3844]!	; 0xf04

000111c4 <bfd_set_error_program_name@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #77824	; 0x13000
   111cc:	ldr	pc, [ip, #3836]!	; 0xefc

000111d0 <strrchr@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #77824	; 0x13000
   111d8:	ldr	pc, [ip, #3828]!	; 0xef4

000111dc <vfprintf@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #77824	; 0x13000
   111e4:	ldr	pc, [ip, #3820]!	; 0xeec

000111e8 <fputc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #77824	; 0x13000
   111f0:	ldr	pc, [ip, #3812]!	; 0xee4

000111f4 <xexit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #77824	; 0x13000
   111fc:	ldr	pc, [ip, #3804]!	; 0xedc

00011200 <sprintf@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #77824	; 0x13000
   11208:	ldr	pc, [ip, #3796]!	; 0xed4

0001120c <mkdtemp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #77824	; 0x13000
   11214:	ldr	pc, [ip, #3788]!	; 0xecc

00011218 <putc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #77824	; 0x13000
   11220:	ldr	pc, [ip, #3780]!	; 0xec4

00011224 <fopen64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #77824	; 0x13000
   1122c:	ldr	pc, [ip, #3772]!	; 0xebc

00011230 <bfd_errmsg@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #77824	; 0x13000
   11238:	ldr	pc, [ip, #3764]!	; 0xeb4

0001123c <fseek@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #77824	; 0x13000
   11244:	ldr	pc, [ip, #3756]!	; 0xeac

00011248 <__xstat64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #77824	; 0x13000
   11250:	ldr	pc, [ip, #3748]!	; 0xea4

00011254 <fputs@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #77824	; 0x13000
   1125c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011260 <abort@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #77824	; 0x13000
   11268:	ldr	pc, [ip, #3732]!	; 0xe94

0001126c <getc@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #77824	; 0x13000
   11274:	ldr	pc, [ip, #3724]!	; 0xe8c

00011278 <close@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #77824	; 0x13000
   11280:	ldr	pc, [ip, #3716]!	; 0xe84

00011284 <__assert_fail@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #77824	; 0x13000
   1128c:	ldr	pc, [ip, #3708]!	; 0xe7c

Disassembly of section .text:

00011290 <.text>:
   11290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11294:	sub	sp, sp, #20
   11298:	ldr	r3, [r1]
   1129c:	ldr	r8, [pc, #940]	; 11650 <__assert_fail@plt+0x3cc>
   112a0:	str	r0, [sp, #12]
   112a4:	mov	r0, r3
   112a8:	str	r1, [sp, #8]
   112ac:	str	r3, [r8]
   112b0:	bl	11098 <xmalloc_set_program_name@plt>
   112b4:	ldr	r0, [r8]
   112b8:	bl	111c4 <bfd_set_error_program_name@plt>
   112bc:	add	r1, sp, #8
   112c0:	add	r0, sp, #12
   112c4:	bl	12cb4 <__assert_fail@plt+0x1a30>
   112c8:	ldr	r6, [pc, #900]	; 11654 <__assert_fail@plt+0x3d0>
   112cc:	ldr	r5, [pc, #900]	; 11658 <__assert_fail@plt+0x3d4>
   112d0:	ldr	sl, [pc, #900]	; 1165c <__assert_fail@plt+0x3d8>
   112d4:	ldr	r9, [pc, #900]	; 11660 <__assert_fail@plt+0x3dc>
   112d8:	ldr	r7, [pc, #900]	; 11664 <__assert_fail@plt+0x3e0>
   112dc:	mov	r4, #0
   112e0:	str	r4, [sp]
   112e4:	mov	r3, r6
   112e8:	mov	r2, r5
   112ec:	ldr	r1, [sp, #8]
   112f0:	ldr	r0, [sp, #12]
   112f4:	bl	1111c <getopt_long@plt>
   112f8:	cmn	r0, #1
   112fc:	beq	11460 <__assert_fail@plt+0x1dc>
   11300:	sub	r0, r0, #63	; 0x3f
   11304:	cmp	r0, #55	; 0x37
   11308:	ldrls	pc, [pc, r0, lsl #2]
   1130c:	b	112e0 <__assert_fail@plt+0x5c>
   11310:	ldrdeq	r1, [r1], -r8
   11314:	andeq	r1, r1, r0, ror #5
   11318:	andeq	r1, r1, r0, ror #5
   1131c:	andeq	r1, r1, r0, ror #5
   11320:	andeq	r1, r1, r0, ror #5
   11324:	andeq	r1, r1, r0, ror #5
   11328:	andeq	r1, r1, r0, ror #5
   1132c:	andeq	r1, r1, r0, ror #5
   11330:	andeq	r1, r1, r0, ror #5
   11334:	andeq	r1, r1, r0, ror #5
   11338:	andeq	r1, r1, r0, ror #5
   1133c:	andeq	r1, r1, r0, ror #5
   11340:	andeq	r1, r1, r0, ror #5
   11344:	andeq	r1, r1, r0, ror #5
   11348:	andeq	r1, r1, r0, ror #5
   1134c:	andeq	r1, r1, r0, ror #5
   11350:	andeq	r1, r1, r0, ror #5
   11354:	andeq	r1, r1, r0, ror #5
   11358:	andeq	r1, r1, r0, ror #5
   1135c:	andeq	r1, r1, r0, ror #5
   11360:	andeq	r1, r1, r0, ror #5
   11364:	andeq	r1, r1, r0, ror #5
   11368:	andeq	r1, r1, r0, ror #5
   1136c:	andeq	r1, r1, r0, ror #5
   11370:	andeq	r1, r1, r0, ror #5
   11374:	andeq	r1, r1, r0, ror #5
   11378:	andeq	r1, r1, r0, ror #5
   1137c:	andeq	r1, r1, r0, ror #5
   11380:	andeq	r1, r1, r0, ror #5
   11384:	andeq	r1, r1, r0, ror #5
   11388:	andeq	r1, r1, r0, ror #5
   1138c:	andeq	r1, r1, r0, ror #5
   11390:	andeq	r1, r1, r4, asr r4
   11394:	andeq	r1, r1, r0, ror #5
   11398:	andeq	r1, r1, r0, ror #5
   1139c:	andeq	r1, r1, r0, ror #5
   113a0:	andeq	r1, r1, r0, ror #5
   113a4:	andeq	r1, r1, r0, ror #5
   113a8:	andeq	r1, r1, r0, ror #5
   113ac:	andeq	r1, r1, r0, ror #5
   113b0:	andeq	r1, r1, r0, ror #5
   113b4:	andeq	r1, r1, r8, ror #11
   113b8:	andeq	r1, r1, r4, asr #8
   113bc:	andeq	r1, r1, r0, ror #5
   113c0:	andeq	r1, r1, r0, ror #5
   113c4:	andeq	r1, r1, r0, ror #5
   113c8:	andeq	r1, r1, r0, ror #5
   113cc:	andeq	r1, r1, ip, lsr r4
   113d0:	andeq	r1, r1, r0, ror #5
   113d4:	andeq	r1, r1, ip, lsr #8
   113d8:	andeq	r1, r1, r0, ror #5
   113dc:	andeq	r1, r1, r0, ror #5
   113e0:	andeq	r1, r1, r4, lsl r4
   113e4:	andeq	r1, r1, r4, lsl #8
   113e8:	andeq	r1, r1, r0, ror #5
   113ec:	strdeq	r1, [r1], -r0
   113f0:	ldr	r0, [pc, #624]	; 11668 <__assert_fail@plt+0x3e4>
   113f4:	bl	12760 <__assert_fail@plt+0x14dc>
   113f8:	mov	r0, #0
   113fc:	add	sp, sp, #20
   11400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11404:	ldr	r3, [r7]
   11408:	orr	r3, r3, #16
   1140c:	str	r3, [r7]
   11410:	b	112e0 <__assert_fail@plt+0x5c>
   11414:	ldr	r0, [sl]
   11418:	bl	10f90 <cplus_demangle_name_to_style@plt>
   1141c:	cmp	r0, #0
   11420:	beq	11630 <__assert_fail@plt+0x3ac>
   11424:	bl	11014 <cplus_demangle_set_style@plt>
   11428:	b	112e0 <__assert_fail@plt+0x5c>
   1142c:	ldr	r3, [r7]
   11430:	bic	r3, r3, #1
   11434:	str	r3, [r7]
   11438:	b	112e0 <__assert_fail@plt+0x5c>
   1143c:	str	r4, [r9]
   11440:	b	112e0 <__assert_fail@plt+0x5c>
   11444:	ldr	r3, [r7]
   11448:	bic	r3, r3, #8
   1144c:	str	r3, [r7]
   11450:	b	112e0 <__assert_fail@plt+0x5c>
   11454:	mov	r3, #1
   11458:	str	r3, [r9]
   1145c:	b	112e0 <__assert_fail@plt+0x5c>
   11460:	ldr	r4, [pc, #516]	; 1166c <__assert_fail@plt+0x3e8>
   11464:	ldr	r2, [sp, #12]
   11468:	ldr	r3, [r4]
   1146c:	cmp	r3, r2
   11470:	blt	115f8 <__assert_fail@plt+0x374>
   11474:	ldr	r3, [pc, #500]	; 11670 <__assert_fail@plt+0x3ec>
   11478:	ldr	r3, [r3]
   1147c:	cmp	r3, #4096	; 0x1000
   11480:	beq	115d0 <__assert_fail@plt+0x34c>
   11484:	bgt	11544 <__assert_fail@plt+0x2c0>
   11488:	cmp	r3, #512	; 0x200
   1148c:	beq	114a4 <__assert_fail@plt+0x220>
   11490:	bgt	1157c <__assert_fail@plt+0x2f8>
   11494:	cmp	r3, #4
   11498:	beq	114a4 <__assert_fail@plt+0x220>
   1149c:	cmp	r3, #256	; 0x100
   114a0:	bne	11560 <__assert_fail@plt+0x2dc>
   114a4:	ldr	r9, [pc, #456]	; 11674 <__assert_fail@plt+0x3f0>
   114a8:	ldr	sl, [pc, #456]	; 11678 <__assert_fail@plt+0x3f4>
   114ac:	ldr	r6, [pc, #456]	; 1167c <__assert_fail@plt+0x3f8>
   114b0:	ldr	r7, [pc, #456]	; 11680 <__assert_fail@plt+0x3fc>
   114b4:	ldr	r8, [pc, #456]	; 11684 <__assert_fail@plt+0x400>
   114b8:	ldr	r0, [r6]
   114bc:	bl	1126c <getc@plt>
   114c0:	cmn	r0, #1
   114c4:	mov	r4, r0
   114c8:	beq	11534 <__assert_fail@plt+0x2b0>
   114cc:	ldr	r5, [pc, #436]	; 11688 <__assert_fail@plt+0x404>
   114d0:	mov	fp, #0
   114d4:	uxtb	r3, r4
   114d8:	lsl	r3, r3, #1
   114dc:	ldrh	r3, [r7, r3]
   114e0:	tst	r3, #140	; 0x8c
   114e4:	bne	114fc <__assert_fail@plt+0x278>
   114e8:	mov	r1, r4
   114ec:	mov	r0, r9
   114f0:	bl	1114c <strchr@plt>
   114f4:	cmp	r0, #0
   114f8:	beq	11590 <__assert_fail@plt+0x30c>
   114fc:	cmp	fp, r8
   11500:	beq	115b8 <__assert_fail@plt+0x334>
   11504:	strb	r4, [r5, #1]!
   11508:	ldr	r0, [r6]
   1150c:	bl	1126c <getc@plt>
   11510:	add	fp, fp, #1
   11514:	cmn	r0, #1
   11518:	mov	r4, r0
   1151c:	bne	114d4 <__assert_fail@plt+0x250>
   11520:	ldr	r3, [pc, #356]	; 1168c <__assert_fail@plt+0x408>
   11524:	mov	r2, #0
   11528:	mov	r0, r3
   1152c:	strb	r2, [r3, fp]
   11530:	bl	118c8 <__assert_fail@plt+0x644>
   11534:	ldr	r0, [sl]
   11538:	bl	10fcc <fflush@plt>
   1153c:	mov	r0, #0
   11540:	b	113fc <__assert_fail@plt+0x178>
   11544:	cmp	r3, #32768	; 0x8000
   11548:	beq	114a4 <__assert_fail@plt+0x220>
   1154c:	bgt	11568 <__assert_fail@plt+0x2e4>
   11550:	cmp	r3, #8192	; 0x2000
   11554:	beq	114a4 <__assert_fail@plt+0x220>
   11558:	cmp	r3, #16384	; 0x4000
   1155c:	beq	114a4 <__assert_fail@plt+0x220>
   11560:	ldr	r0, [pc, #296]	; 11690 <__assert_fail@plt+0x40c>
   11564:	bl	11cd8 <__assert_fail@plt+0xa54>
   11568:	cmp	r3, #65536	; 0x10000
   1156c:	beq	114a4 <__assert_fail@plt+0x220>
   11570:	cmp	r3, #131072	; 0x20000
   11574:	beq	114a4 <__assert_fail@plt+0x220>
   11578:	b	11560 <__assert_fail@plt+0x2dc>
   1157c:	cmp	r3, #1024	; 0x400
   11580:	beq	114a4 <__assert_fail@plt+0x220>
   11584:	cmp	r3, #2048	; 0x800
   11588:	beq	114a4 <__assert_fail@plt+0x220>
   1158c:	b	11560 <__assert_fail@plt+0x2dc>
   11590:	cmp	fp, #0
   11594:	bne	115b8 <__assert_fail@plt+0x334>
   11598:	ldr	r1, [sl]
   1159c:	mov	r0, r4
   115a0:	bl	11218 <putc@plt>
   115a4:	cmp	r4, #10
   115a8:	bne	114b8 <__assert_fail@plt+0x234>
   115ac:	ldr	r0, [sl]
   115b0:	bl	10fcc <fflush@plt>
   115b4:	b	114b8 <__assert_fail@plt+0x234>
   115b8:	ldr	r3, [pc, #204]	; 1168c <__assert_fail@plt+0x408>
   115bc:	mov	r2, #0
   115c0:	mov	r0, r3
   115c4:	strb	r2, [r3, fp]
   115c8:	bl	118c8 <__assert_fail@plt+0x644>
   115cc:	b	11598 <__assert_fail@plt+0x314>
   115d0:	ldr	r9, [pc, #188]	; 11694 <__assert_fail@plt+0x410>
   115d4:	b	114a8 <__assert_fail@plt+0x224>
   115d8:	ldr	r3, [pc, #184]	; 11698 <__assert_fail@plt+0x414>
   115dc:	mov	r1, #1
   115e0:	ldr	r0, [r3]
   115e4:	bl	11790 <__assert_fail@plt+0x50c>
   115e8:	ldr	r3, [pc, #136]	; 11678 <__assert_fail@plt+0x3f4>
   115ec:	mov	r1, #0
   115f0:	ldr	r0, [r3]
   115f4:	bl	11790 <__assert_fail@plt+0x50c>
   115f8:	ldr	sl, [pc, #120]	; 11678 <__assert_fail@plt+0x3f4>
   115fc:	ldr	r2, [sp, #8]
   11600:	ldr	r0, [r2, r3, lsl #2]
   11604:	bl	118c8 <__assert_fail@plt+0x644>
   11608:	ldr	r1, [sl]
   1160c:	mov	r0, #10
   11610:	bl	11218 <putc@plt>
   11614:	ldr	r3, [r4]
   11618:	ldr	r2, [sp, #12]
   1161c:	add	r3, r3, #1
   11620:	cmp	r3, r2
   11624:	str	r3, [r4]
   11628:	blt	115fc <__assert_fail@plt+0x378>
   1162c:	b	1153c <__assert_fail@plt+0x2b8>
   11630:	ldr	r1, [pc, #96]	; 11698 <__assert_fail@plt+0x414>
   11634:	ldr	r3, [sl]
   11638:	ldr	r2, [r8]
   1163c:	ldr	r0, [r1]
   11640:	ldr	r1, [pc, #84]	; 1169c <__assert_fail@plt+0x418>
   11644:	bl	11158 <fprintf@plt>
   11648:	mov	r0, #1
   1164c:	b	113fc <__assert_fail@plt+0x178>
   11650:	andeq	sp, r2, r0, ror #2
   11654:	ldrdeq	r3, [r1], -r0
   11658:	andeq	r3, r1, r8, ror #15
   1165c:	andeq	r5, r2, r8, asr #2
   11660:	andeq	r5, r2, r0, asr r1
   11664:	andeq	r5, r2, r0, lsr #2
   11668:			; <UNDEFINED> instruction: 0x000137bc
   1166c:	andeq	r5, r2, r0, lsr r1
   11670:	andeq	r5, r2, r8, lsr #2
   11674:	andeq	r3, r1, r4, lsr #15
   11678:	andeq	r5, r2, r4, asr #2
   1167c:	andeq	r5, r2, r0, asr #2
   11680:	andeq	r4, r2, r4, ror #24
   11684:	strdeq	r7, [r0], -lr
   11688:	andeq	r5, r2, r3, asr r1
   1168c:	andeq	r5, r2, r4, asr r1
   11690:	strdeq	r3, [r1], -r4
   11694:	andeq	r3, r1, r8, lsr #15
   11698:	andeq	r5, r2, r8, lsr r1
   1169c:	andeq	r3, r1, r4, asr #15
   116a0:	mov	fp, #0
   116a4:	mov	lr, #0
   116a8:	pop	{r1}		; (ldr r1, [sp], #4)
   116ac:	mov	r2, sp
   116b0:	push	{r2}		; (str r2, [sp, #-4]!)
   116b4:	push	{r0}		; (str r0, [sp, #-4]!)
   116b8:	ldr	ip, [pc, #16]	; 116d0 <__assert_fail@plt+0x44c>
   116bc:	push	{ip}		; (str ip, [sp, #-4]!)
   116c0:	ldr	r0, [pc, #12]	; 116d4 <__assert_fail@plt+0x450>
   116c4:	ldr	r3, [pc, #12]	; 116d8 <__assert_fail@plt+0x454>
   116c8:	bl	110ec <__libc_start_main@plt>
   116cc:	bl	11260 <abort@plt>
   116d0:	andeq	r3, r1, r0, asr #7
   116d4:	muleq	r1, r0, r2
   116d8:	andeq	r3, r1, r0, ror #6
   116dc:	ldr	r3, [pc, #20]	; 116f8 <__assert_fail@plt+0x474>
   116e0:	ldr	r2, [pc, #20]	; 116fc <__assert_fail@plt+0x478>
   116e4:	add	r3, pc, r3
   116e8:	ldr	r2, [r3, r2]
   116ec:	cmp	r2, #0
   116f0:	bxeq	lr
   116f4:	b	11104 <__gmon_start__@plt>
   116f8:	andeq	r3, r1, r4, lsl r9
   116fc:	andeq	r0, r0, r4, lsl r1
   11700:	ldr	r0, [pc, #24]	; 11720 <__assert_fail@plt+0x49c>
   11704:	ldr	r3, [pc, #24]	; 11724 <__assert_fail@plt+0x4a0>
   11708:	cmp	r3, r0
   1170c:	bxeq	lr
   11710:	ldr	r3, [pc, #16]	; 11728 <__assert_fail@plt+0x4a4>
   11714:	cmp	r3, #0
   11718:	bxeq	lr
   1171c:	bx	r3
   11720:	andeq	r5, r2, r4, lsr #2
   11724:	andeq	r5, r2, r4, lsr #2
   11728:	andeq	r0, r0, r0
   1172c:	ldr	r0, [pc, #36]	; 11758 <__assert_fail@plt+0x4d4>
   11730:	ldr	r1, [pc, #36]	; 1175c <__assert_fail@plt+0x4d8>
   11734:	sub	r1, r1, r0
   11738:	asr	r1, r1, #2
   1173c:	add	r1, r1, r1, lsr #31
   11740:	asrs	r1, r1, #1
   11744:	bxeq	lr
   11748:	ldr	r3, [pc, #16]	; 11760 <__assert_fail@plt+0x4dc>
   1174c:	cmp	r3, #0
   11750:	bxeq	lr
   11754:	bx	r3
   11758:	andeq	r5, r2, r4, lsr #2
   1175c:	andeq	r5, r2, r4, lsr #2
   11760:	andeq	r0, r0, r0
   11764:	push	{r4, lr}
   11768:	ldr	r4, [pc, #24]	; 11788 <__assert_fail@plt+0x504>
   1176c:	ldrb	r3, [r4]
   11770:	cmp	r3, #0
   11774:	popne	{r4, pc}
   11778:	bl	11700 <__assert_fail@plt+0x47c>
   1177c:	mov	r3, #1
   11780:	strb	r3, [r4]
   11784:	pop	{r4, pc}
   11788:	andeq	r5, r2, ip, asr #2
   1178c:	b	1172c <__assert_fail@plt+0x4a8>
   11790:	ldr	r3, [pc, #248]	; 11890 <__assert_fail@plt+0x60c>
   11794:	push	{r7, lr}
   11798:	mov	r4, r0
   1179c:	ldr	r2, [r3]
   117a0:	mov	r6, r1
   117a4:	ldr	r1, [pc, #232]	; 11894 <__assert_fail@plt+0x610>
   117a8:	bl	11158 <fprintf@plt>
   117ac:	ldr	r5, [pc, #228]	; 11898 <__assert_fail@plt+0x614>
   117b0:	ldr	r2, [pc, #228]	; 1189c <__assert_fail@plt+0x618>
   117b4:	ldr	r1, [pc, #228]	; 118a0 <__assert_fail@plt+0x61c>
   117b8:	mov	r0, r4
   117bc:	bl	11158 <fprintf@plt>
   117c0:	ldr	r2, [pc, #220]	; 118a4 <__assert_fail@plt+0x620>
   117c4:	ldr	r1, [pc, #220]	; 118a8 <__assert_fail@plt+0x624>
   117c8:	mov	r0, r4
   117cc:	bl	11158 <fprintf@plt>
   117d0:	mov	r3, r4
   117d4:	mov	r2, #223	; 0xdf
   117d8:	mov	r1, #1
   117dc:	ldr	r0, [pc, #200]	; 118ac <__assert_fail@plt+0x628>
   117e0:	bl	11080 <fwrite@plt>
   117e4:	mov	r0, r4
   117e8:	ldr	r2, [r5]
   117ec:	ldr	r1, [pc, #188]	; 118b0 <__assert_fail@plt+0x62c>
   117f0:	bl	11158 <fprintf@plt>
   117f4:	ldr	r3, [r5, #16]
   117f8:	cmp	r3, #0
   117fc:	beq	11828 <__assert_fail@plt+0x5a4>
   11800:	ldr	r7, [pc, #172]	; 118b4 <__assert_fail@plt+0x630>
   11804:	add	r5, r5, #24
   11808:	ldr	r2, [r5, #-12]
   1180c:	add	r5, r5, #12
   11810:	mov	r1, r7
   11814:	mov	r0, r4
   11818:	bl	11158 <fprintf@plt>
   1181c:	ldr	r3, [r5, #-8]
   11820:	cmp	r3, #0
   11824:	bne	11808 <__assert_fail@plt+0x584>
   11828:	mov	r1, r4
   1182c:	mov	r0, #125	; 0x7d
   11830:	bl	111e8 <fputc@plt>
   11834:	mov	r3, r4
   11838:	mov	r2, #2
   1183c:	mov	r1, #1
   11840:	ldr	r0, [pc, #112]	; 118b8 <__assert_fail@plt+0x634>
   11844:	bl	11080 <fwrite@plt>
   11848:	mov	r3, r4
   1184c:	mov	r2, #336	; 0x150
   11850:	mov	r1, #1
   11854:	ldr	r0, [pc, #96]	; 118bc <__assert_fail@plt+0x638>
   11858:	bl	11080 <fwrite@plt>
   1185c:	cmp	r6, #0
   11860:	beq	1186c <__assert_fail@plt+0x5e8>
   11864:	mov	r0, r6
   11868:	bl	11128 <exit@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #72]	; 118c0 <__assert_fail@plt+0x63c>
   11874:	mov	r0, r6
   11878:	bl	11044 <dcgettext@plt>
   1187c:	ldr	r2, [pc, #64]	; 118c4 <__assert_fail@plt+0x640>
   11880:	mov	r1, r0
   11884:	mov	r0, r4
   11888:	bl	11158 <fprintf@plt>
   1188c:	b	11864 <__assert_fail@plt+0x5e0>
   11890:	andeq	sp, r2, r0, ror #2
   11894:	andeq	r3, r1, r0, ror #8
   11898:	andeq	r4, r2, r4, ror #28
   1189c:	andeq	r3, r1, r4, ror #14
   118a0:	andeq	r3, r1, r8, lsl #9
   118a4:	ldrdeq	r3, [r1], -r8
   118a8:	andeq	r3, r1, r4, ror #9
   118ac:	andeq	r3, r1, r8, lsr #10
   118b0:	andeq	r3, r1, r8, lsl #12
   118b4:	andeq	r3, r1, ip, lsl #12
   118b8:	andeq	r3, r1, r0, lsl r6
   118bc:	andeq	r3, r1, r4, lsl r6
   118c0:	andeq	r3, r1, r8, ror #14
   118c4:	andeq	r3, r1, ip, ror r7
   118c8:	ldr	r3, [pc, #144]	; 11960 <__assert_fail@plt+0x6dc>
   118cc:	push	{r4, r5, r6, lr}
   118d0:	mov	r4, r0
   118d4:	ldrb	r0, [r0]
   118d8:	ldr	r2, [r3]
   118dc:	cmp	r0, #36	; 0x24
   118e0:	cmpne	r0, #46	; 0x2e
   118e4:	moveq	r3, #1
   118e8:	movne	r3, #0
   118ec:	cmp	r2, #0
   118f0:	add	r0, r4, r3
   118f4:	beq	11908 <__assert_fail@plt+0x684>
   118f8:	ldrb	r2, [r4, r3]
   118fc:	cmp	r2, #95	; 0x5f
   11900:	addeq	r0, r3, #1
   11904:	addeq	r0, r4, r0
   11908:	ldr	r3, [pc, #84]	; 11964 <__assert_fail@plt+0x6e0>
   1190c:	ldr	r1, [r3]
   11910:	bl	111b8 <cplus_demangle@plt>
   11914:	subs	r5, r0, #0
   11918:	beq	11940 <__assert_fail@plt+0x6bc>
   1191c:	ldrb	r0, [r4]
   11920:	cmp	r0, #46	; 0x2e
   11924:	beq	11950 <__assert_fail@plt+0x6cc>
   11928:	mov	r1, r5
   1192c:	ldr	r0, [pc, #52]	; 11968 <__assert_fail@plt+0x6e4>
   11930:	bl	10fc0 <printf@plt>
   11934:	mov	r0, r5
   11938:	pop	{r4, r5, r6, lr}
   1193c:	b	10ffc <free@plt>
   11940:	mov	r1, r4
   11944:	ldr	r0, [pc, #28]	; 11968 <__assert_fail@plt+0x6e4>
   11948:	pop	{r4, r5, r6, lr}
   1194c:	b	10fc0 <printf@plt>
   11950:	ldr	r3, [pc, #20]	; 1196c <__assert_fail@plt+0x6e8>
   11954:	ldr	r1, [r3]
   11958:	bl	11218 <putc@plt>
   1195c:	b	11928 <__assert_fail@plt+0x6a4>
   11960:	andeq	r5, r2, r0, asr r1
   11964:	andeq	r5, r2, r0, lsr #2
   11968:	muleq	r1, ip, sl
   1196c:	andeq	r5, r2, r4, asr #2
   11970:	push	{r4, r5, r6, lr}
   11974:	mov	r1, #47	; 0x2f
   11978:	mov	r6, r0
   1197c:	bl	111d0 <strrchr@plt>
   11980:	cmp	r0, #0
   11984:	beq	119d4 <__assert_fail@plt+0x750>
   11988:	sub	r4, r0, r6
   1198c:	add	r0, r4, #11
   11990:	bl	1108c <xmalloc@plt>
   11994:	mov	r2, r4
   11998:	mov	r1, r6
   1199c:	mov	r5, r0
   119a0:	bl	11020 <memcpy@plt>
   119a4:	add	r2, r4, #1
   119a8:	add	r2, r5, r2
   119ac:	mov	r3, #47	; 0x2f
   119b0:	strb	r3, [r5, r4]
   119b4:	ldr	r3, [pc, #44]	; 119e8 <__assert_fail@plt+0x764>
   119b8:	ldm	r3!, {r0, r1}
   119bc:	ldrb	r3, [r3]
   119c0:	str	r0, [r2]
   119c4:	str	r1, [r2, #4]
   119c8:	strb	r3, [r2, #8]
   119cc:	mov	r0, r5
   119d0:	pop	{r4, r5, r6, pc}
   119d4:	mov	r0, #9
   119d8:	bl	1108c <xmalloc@plt>
   119dc:	mov	r5, r0
   119e0:	mov	r2, r0
   119e4:	b	119b4 <__assert_fail@plt+0x730>
   119e8:	andeq	r3, r1, ip, lsr #17
   119ec:	subs	r3, r0, #0
   119f0:	beq	11a0c <__assert_fail@plt+0x788>
   119f4:	cmp	r3, #1
   119f8:	beq	11a18 <__assert_fail@plt+0x794>
   119fc:	mov	r2, #5
   11a00:	ldr	r1, [pc, #32]	; 11a28 <__assert_fail@plt+0x7a4>
   11a04:	mov	r0, #0
   11a08:	b	11044 <dcgettext@plt>
   11a0c:	mov	r2, #5
   11a10:	ldr	r1, [pc, #20]	; 11a2c <__assert_fail@plt+0x7a8>
   11a14:	b	11044 <dcgettext@plt>
   11a18:	mov	r2, #5
   11a1c:	ldr	r1, [pc, #12]	; 11a30 <__assert_fail@plt+0x7ac>
   11a20:	mov	r0, #0
   11a24:	b	11044 <dcgettext@plt>
   11a28:	ldrdeq	r3, [r1], -r4
   11a2c:			; <UNDEFINED> instruction: 0x000138b8
   11a30:	andeq	r3, r1, r4, asr #17
   11a34:	push	{r4, r5, lr}
   11a38:	sub	sp, sp, #12
   11a3c:	mov	r4, r0
   11a40:	bl	11074 <bfd_get_error@plt>
   11a44:	bl	11230 <bfd_errmsg@plt>
   11a48:	ldr	r3, [pc, #84]	; 11aa4 <__assert_fail@plt+0x820>
   11a4c:	mov	r5, r0
   11a50:	ldr	r0, [r3]
   11a54:	bl	10fcc <fflush@plt>
   11a58:	cmp	r4, #0
   11a5c:	ldr	r2, [pc, #68]	; 11aa8 <__assert_fail@plt+0x824>
   11a60:	ldr	r1, [pc, #68]	; 11aac <__assert_fail@plt+0x828>
   11a64:	beq	11a88 <__assert_fail@plt+0x804>
   11a68:	str	r5, [sp]
   11a6c:	mov	r3, r4
   11a70:	ldr	r2, [r2]
   11a74:	ldr	r0, [r1]
   11a78:	ldr	r1, [pc, #48]	; 11ab0 <__assert_fail@plt+0x82c>
   11a7c:	bl	11158 <fprintf@plt>
   11a80:	add	sp, sp, #12
   11a84:	pop	{r4, r5, pc}
   11a88:	ldr	r0, [r1]
   11a8c:	mov	r3, r5
   11a90:	ldr	r2, [r2]
   11a94:	ldr	r1, [pc, #24]	; 11ab4 <__assert_fail@plt+0x830>
   11a98:	add	sp, sp, #12
   11a9c:	pop	{r4, r5, lr}
   11aa0:	b	11158 <fprintf@plt>
   11aa4:	andeq	r5, r2, r4, asr #2
   11aa8:	andeq	sp, r2, r0, ror #2
   11aac:	andeq	r5, r2, r8, lsr r1
   11ab0:	andeq	r3, r1, r8, ror #17
   11ab4:	andeq	r3, r1, ip, ror #17
   11ab8:	ldr	r3, [r1, #8]
   11abc:	push	{r4, r5, r6, r7, r8, lr}
   11ac0:	add	r3, r3, #1
   11ac4:	mov	r6, r1
   11ac8:	mov	r4, r0
   11acc:	str	r3, [r1, #8]
   11ad0:	ldr	r0, [r1, #12]
   11ad4:	add	r1, r3, r3, lsl #1
   11ad8:	rsb	r1, r3, r1, lsl #3
   11adc:	lsl	r2, r1, #2
   11ae0:	cmp	r0, r2
   11ae4:	bcs	11b2c <__assert_fail@plt+0x8a8>
   11ae8:	cmp	r3, #63	; 0x3f
   11aec:	lslgt	r5, r1, #3
   11af0:	movle	r5, #11776	; 0x2e00
   11af4:	mov	r1, r5
   11af8:	ldr	r0, [r6, #16]
   11afc:	bl	1105c <xrealloc@plt>
   11b00:	ldr	r2, [r6, #12]
   11b04:	mov	r1, #0
   11b08:	str	r0, [r6, #16]
   11b0c:	add	r0, r0, r2
   11b10:	sub	r2, r5, r2
   11b14:	bl	11188 <memset@plt>
   11b18:	ldr	r3, [r6, #8]
   11b1c:	str	r5, [r6, #12]
   11b20:	add	r2, r3, r3, lsl #1
   11b24:	rsb	r3, r3, r2, lsl #3
   11b28:	lsl	r2, r3, #2
   11b2c:	ldr	r3, [r6, #16]
   11b30:	ldr	r1, [r4]
   11b34:	add	r3, r3, r2
   11b38:	mov	r0, #0
   11b3c:	str	r1, [r3, #-92]	; 0xffffffa4
   11b40:	mov	r2, #5
   11b44:	ldr	r1, [pc, #276]	; 11c60 <__assert_fail@plt+0x9dc>
   11b48:	bl	11044 <dcgettext@plt>
   11b4c:	ldr	r7, [r4]
   11b50:	mov	r5, r0
   11b54:	ldr	r0, [r4, #12]
   11b58:	bl	119ec <__assert_fail@plt+0x768>
   11b5c:	mov	r8, r0
   11b60:	ldr	r0, [r4, #8]
   11b64:	bl	119ec <__assert_fail@plt+0x768>
   11b68:	mov	r2, r8
   11b6c:	mov	r1, r7
   11b70:	mov	r3, r0
   11b74:	mov	r0, r5
   11b78:	bl	10fc0 <printf@plt>
   11b7c:	ldr	r1, [r4]
   11b80:	ldr	r0, [r6]
   11b84:	bl	111ac <bfd_openw@plt>
   11b88:	subs	r5, r0, #0
   11b8c:	beq	11c4c <__assert_fail@plt+0x9c8>
   11b90:	mov	r1, #1
   11b94:	bl	11110 <bfd_set_format@plt>
   11b98:	cmp	r0, #0
   11b9c:	beq	11c2c <__assert_fail@plt+0x9a8>
   11ba0:	ldr	r8, [pc, #188]	; 11c64 <__assert_fail@plt+0x9e0>
   11ba4:	mov	r4, #2
   11ba8:	mov	r7, #1
   11bac:	b	11bbc <__assert_fail@plt+0x938>
   11bb0:	add	r4, r4, #1
   11bb4:	cmp	r4, #89	; 0x59
   11bb8:	beq	11c1c <__assert_fail@plt+0x998>
   11bbc:	ldr	r3, [r5, #4]
   11bc0:	mov	r2, #0
   11bc4:	mov	r1, r4
   11bc8:	ldr	r3, [r3, #340]	; 0x154
   11bcc:	mov	r0, r5
   11bd0:	blx	r3
   11bd4:	cmp	r0, #0
   11bd8:	beq	11bb0 <__assert_fail@plt+0x92c>
   11bdc:	mov	r1, #0
   11be0:	mov	r0, r4
   11be4:	bl	11164 <bfd_printable_arch_mach@plt>
   11be8:	mov	r1, r0
   11bec:	mov	r0, r8
   11bf0:	bl	10fc0 <printf@plt>
   11bf4:	ldr	r2, [r6, #8]
   11bf8:	ldr	r3, [r6, #16]
   11bfc:	add	r1, r2, r2, lsl #1
   11c00:	rsb	r2, r2, r1, lsl #3
   11c04:	add	r3, r3, r2, lsl #2
   11c08:	add	r3, r4, r3
   11c0c:	add	r4, r4, #1
   11c10:	cmp	r4, #89	; 0x59
   11c14:	strb	r7, [r3, #-90]	; 0xffffffa6
   11c18:	bne	11bbc <__assert_fail@plt+0x938>
   11c1c:	mov	r0, r5
   11c20:	bl	11140 <bfd_close_all_done@plt>
   11c24:	ldr	r0, [r6, #4]
   11c28:	pop	{r4, r5, r6, r7, r8, pc}
   11c2c:	bl	11074 <bfd_get_error@plt>
   11c30:	cmp	r0, #5
   11c34:	beq	11c1c <__assert_fail@plt+0x998>
   11c38:	ldr	r0, [r4]
   11c3c:	bl	11a34 <__assert_fail@plt+0x7b0>
   11c40:	mov	r3, #1
   11c44:	str	r3, [r6, #4]
   11c48:	b	11c1c <__assert_fail@plt+0x998>
   11c4c:	ldr	r0, [r6]
   11c50:	bl	11a34 <__assert_fail@plt+0x7b0>
   11c54:	mov	r0, #1
   11c58:	str	r0, [r6, #4]
   11c5c:	pop	{r4, r5, r6, r7, r8, pc}
   11c60:	strdeq	r3, [r1], -r4
   11c64:	andeq	r3, r1, r0, lsl r9
   11c68:	push	{r4, lr}
   11c6c:	bl	11a34 <__assert_fail@plt+0x7b0>
   11c70:	mov	r0, #1
   11c74:	bl	111f4 <xexit@plt>
   11c78:	ldr	r3, [pc, #72]	; 11cc8 <__assert_fail@plt+0xa44>
   11c7c:	push	{r4, r5, r6, lr}
   11c80:	mov	r5, r0
   11c84:	ldr	r0, [r3]
   11c88:	mov	r6, r1
   11c8c:	ldr	r4, [pc, #56]	; 11ccc <__assert_fail@plt+0xa48>
   11c90:	bl	10fcc <fflush@plt>
   11c94:	ldr	r3, [pc, #52]	; 11cd0 <__assert_fail@plt+0xa4c>
   11c98:	ldr	r1, [pc, #52]	; 11cd4 <__assert_fail@plt+0xa50>
   11c9c:	ldr	r0, [r4]
   11ca0:	ldr	r2, [r3]
   11ca4:	bl	11158 <fprintf@plt>
   11ca8:	mov	r1, r5
   11cac:	mov	r2, r6
   11cb0:	ldr	r0, [r4]
   11cb4:	bl	111dc <vfprintf@plt>
   11cb8:	ldr	r1, [r4]
   11cbc:	mov	r0, #10
   11cc0:	pop	{r4, r5, r6, lr}
   11cc4:	b	11218 <putc@plt>
   11cc8:	andeq	r5, r2, r4, asr #2
   11ccc:	andeq	r5, r2, r8, lsr r1
   11cd0:	andeq	sp, r2, r0, ror #2
   11cd4:	andeq	r3, r1, r8, lsl r9
   11cd8:	push	{r0, r1, r2, r3}
   11cdc:	push	{lr}		; (str lr, [sp, #-4]!)
   11ce0:	sub	sp, sp, #12
   11ce4:	add	r3, sp, #20
   11ce8:	ldr	r0, [sp, #16]
   11cec:	mov	r1, r3
   11cf0:	str	r3, [sp, #4]
   11cf4:	bl	11c78 <__assert_fail@plt+0x9f4>
   11cf8:	mov	r0, #1
   11cfc:	bl	111f4 <xexit@plt>
   11d00:	push	{r0, r1, r2, r3}
   11d04:	push	{lr}		; (str lr, [sp, #-4]!)
   11d08:	sub	sp, sp, #12
   11d0c:	add	r3, sp, #20
   11d10:	mov	r1, r3
   11d14:	ldr	r0, [sp, #16]
   11d18:	str	r3, [sp, #4]
   11d1c:	bl	11c78 <__assert_fail@plt+0x9f4>
   11d20:	add	sp, sp, #12
   11d24:	pop	{lr}		; (ldr lr, [sp], #4)
   11d28:	add	sp, sp, #16
   11d2c:	bx	lr
   11d30:	push	{r4, lr}
   11d34:	ldr	r0, [pc, #48]	; 11d6c <__assert_fail@plt+0xae8>
   11d38:	bl	10ff0 <bfd_set_default_target@plt>
   11d3c:	cmp	r0, #0
   11d40:	popne	{r4, pc}
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #32]	; 11d70 <__assert_fail@plt+0xaec>
   11d4c:	bl	11044 <dcgettext@plt>
   11d50:	mov	r4, r0
   11d54:	bl	11074 <bfd_get_error@plt>
   11d58:	bl	11230 <bfd_errmsg@plt>
   11d5c:	ldr	r1, [pc, #8]	; 11d6c <__assert_fail@plt+0xae8>
   11d60:	mov	r2, r0
   11d64:	mov	r0, r4
   11d68:	bl	11cd8 <__assert_fail@plt+0xa54>
   11d6c:	andeq	r3, r1, r0, lsr #18
   11d70:	andeq	r3, r1, ip, lsr r9
   11d74:	ldr	r3, [pc, #112]	; 11dec <__assert_fail@plt+0xb68>
   11d78:	push	{r4, r5, r6, lr}
   11d7c:	mov	r4, r0
   11d80:	ldr	r5, [pc, #104]	; 11df0 <__assert_fail@plt+0xb6c>
   11d84:	ldr	r0, [r3]
   11d88:	bl	10fcc <fflush@plt>
   11d8c:	mov	r2, #5
   11d90:	ldr	r1, [pc, #92]	; 11df4 <__assert_fail@plt+0xb70>
   11d94:	mov	r0, #0
   11d98:	ldr	r6, [r5]
   11d9c:	bl	11044 <dcgettext@plt>
   11da0:	ldr	r3, [pc, #80]	; 11df8 <__assert_fail@plt+0xb74>
   11da4:	ldr	r2, [r3]
   11da8:	mov	r1, r0
   11dac:	mov	r0, r6
   11db0:	bl	11158 <fprintf@plt>
   11db4:	ldr	r2, [r4]
   11db8:	cmp	r2, #0
   11dbc:	beq	11ddc <__assert_fail@plt+0xb58>
   11dc0:	ldr	r6, [pc, #52]	; 11dfc <__assert_fail@plt+0xb78>
   11dc4:	mov	r1, r6
   11dc8:	ldr	r0, [r5]
   11dcc:	bl	11158 <fprintf@plt>
   11dd0:	ldr	r2, [r4, #4]!
   11dd4:	cmp	r2, #0
   11dd8:	bne	11dc4 <__assert_fail@plt+0xb40>
   11ddc:	ldr	r1, [r5]
   11de0:	mov	r0, #10
   11de4:	pop	{r4, r5, r6, lr}
   11de8:	b	111e8 <fputc@plt>
   11dec:	andeq	r5, r2, r4, asr #2
   11df0:	andeq	r5, r2, r8, lsr r1
   11df4:	andeq	r3, r1, r8, ror #18
   11df8:	andeq	sp, r2, r0, ror #2
   11dfc:	ldrdeq	r3, [r1], -ip
   11e00:	push	{r4, r5, r6, r7, r8, lr}
   11e04:	subs	r4, r0, #0
   11e08:	mov	r2, #5
   11e0c:	mov	r5, r1
   11e10:	beq	11e7c <__assert_fail@plt+0xbf8>
   11e14:	ldr	r1, [pc, #120]	; 11e94 <__assert_fail@plt+0xc10>
   11e18:	mov	r0, #0
   11e1c:	bl	11044 <dcgettext@plt>
   11e20:	mov	r2, r4
   11e24:	mov	r1, r0
   11e28:	mov	r0, r5
   11e2c:	bl	11158 <fprintf@plt>
   11e30:	bl	11068 <bfd_target_list@plt>
   11e34:	ldr	r2, [r0]
   11e38:	mov	r7, r0
   11e3c:	cmp	r2, #0
   11e40:	beq	11e64 <__assert_fail@plt+0xbe0>
   11e44:	ldr	r6, [pc, #76]	; 11e98 <__assert_fail@plt+0xc14>
   11e48:	mov	r4, r0
   11e4c:	mov	r1, r6
   11e50:	mov	r0, r5
   11e54:	bl	11158 <fprintf@plt>
   11e58:	ldr	r2, [r4, #4]!
   11e5c:	cmp	r2, #0
   11e60:	bne	11e4c <__assert_fail@plt+0xbc8>
   11e64:	mov	r1, r5
   11e68:	mov	r0, #10
   11e6c:	bl	111e8 <fputc@plt>
   11e70:	mov	r0, r7
   11e74:	pop	{r4, r5, r6, r7, r8, lr}
   11e78:	b	10ffc <free@plt>
   11e7c:	ldr	r1, [pc, #24]	; 11e9c <__assert_fail@plt+0xc18>
   11e80:	bl	11044 <dcgettext@plt>
   11e84:	mov	r1, r0
   11e88:	mov	r0, r5
   11e8c:	bl	11158 <fprintf@plt>
   11e90:	b	11e30 <__assert_fail@plt+0xbac>
   11e94:	muleq	r1, r4, r9
   11e98:	ldrdeq	r3, [r1], -ip
   11e9c:	andeq	r3, r1, r0, lsl #19
   11ea0:	push	{r4, r5, r6, r7, r8, lr}
   11ea4:	subs	r4, r0, #0
   11ea8:	mov	r2, #5
   11eac:	mov	r5, r1
   11eb0:	beq	11f1c <__assert_fail@plt+0xc98>
   11eb4:	ldr	r1, [pc, #120]	; 11f34 <__assert_fail@plt+0xcb0>
   11eb8:	mov	r0, #0
   11ebc:	bl	11044 <dcgettext@plt>
   11ec0:	mov	r2, r4
   11ec4:	mov	r1, r0
   11ec8:	mov	r0, r5
   11ecc:	bl	11158 <fprintf@plt>
   11ed0:	bl	10fd8 <bfd_arch_list@plt>
   11ed4:	ldr	r2, [r0]
   11ed8:	mov	r7, r0
   11edc:	cmp	r2, #0
   11ee0:	beq	11f04 <__assert_fail@plt+0xc80>
   11ee4:	ldr	r6, [pc, #76]	; 11f38 <__assert_fail@plt+0xcb4>
   11ee8:	mov	r4, r0
   11eec:	mov	r1, r6
   11ef0:	mov	r0, r5
   11ef4:	bl	11158 <fprintf@plt>
   11ef8:	ldr	r2, [r4, #4]!
   11efc:	cmp	r2, #0
   11f00:	bne	11eec <__assert_fail@plt+0xc68>
   11f04:	mov	r1, r5
   11f08:	mov	r0, #10
   11f0c:	bl	111e8 <fputc@plt>
   11f10:	mov	r0, r7
   11f14:	pop	{r4, r5, r6, r7, r8, lr}
   11f18:	b	10ffc <free@plt>
   11f1c:	ldr	r1, [pc, #24]	; 11f3c <__assert_fail@plt+0xcb8>
   11f20:	bl	11044 <dcgettext@plt>
   11f24:	mov	r1, r0
   11f28:	mov	r0, r5
   11f2c:	bl	11158 <fprintf@plt>
   11f30:	b	11ed0 <__assert_fail@plt+0xc4c>
   11f34:	andeq	r3, r1, r8, asr #19
   11f38:	ldrdeq	r3, [r1], -ip
   11f3c:	andeq	r3, r1, ip, lsr #19
   11f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f44:	mov	r2, #5
   11f48:	sub	sp, sp, #44	; 0x2c
   11f4c:	ldr	r1, [pc, #668]	; 121f0 <__assert_fail@plt+0xf6c>
   11f50:	mov	r0, #0
   11f54:	bl	11044 <dcgettext@plt>
   11f58:	ldr	r1, [pc, #660]	; 121f4 <__assert_fail@plt+0xf70>
   11f5c:	bl	10fc0 <printf@plt>
   11f60:	mov	r0, #0
   11f64:	bl	13254 <__assert_fail@plt+0x1fd0>
   11f68:	mov	r3, #0
   11f6c:	add	r1, sp, #20
   11f70:	str	r3, [sp, #24]
   11f74:	str	r3, [sp, #28]
   11f78:	str	r3, [sp, #32]
   11f7c:	str	r3, [sp, #36]	; 0x24
   11f80:	str	r0, [sp, #20]
   11f84:	ldr	r0, [pc, #620]	; 121f8 <__assert_fail@plt+0xf74>
   11f88:	bl	1117c <bfd_iterate_over_targets@plt>
   11f8c:	ldr	r0, [sp, #20]
   11f90:	bl	11050 <unlink@plt>
   11f94:	ldr	r0, [sp, #20]
   11f98:	bl	10ffc <free@plt>
   11f9c:	ldr	r4, [sp, #24]
   11fa0:	cmp	r4, #0
   11fa4:	beq	11fb4 <__assert_fail@plt+0xd30>
   11fa8:	mov	r0, r4
   11fac:	add	sp, sp, #44	; 0x2c
   11fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fb4:	mov	r7, r4
   11fb8:	mov	r5, #2
   11fbc:	mov	r1, #0
   11fc0:	mov	r0, r5
   11fc4:	bl	11164 <bfd_printable_arch_mach@plt>
   11fc8:	bl	11134 <strlen@plt>
   11fcc:	add	r5, r5, #1
   11fd0:	cmp	r7, r0
   11fd4:	movlt	r7, r0
   11fd8:	cmp	r5, #89	; 0x59
   11fdc:	bne	11fbc <__assert_fail@plt+0xd38>
   11fe0:	ldr	r0, [pc, #532]	; 121fc <__assert_fail@plt+0xf78>
   11fe4:	bl	110d4 <getenv@plt>
   11fe8:	cmp	r0, #0
   11fec:	beq	12008 <__assert_fail@plt+0xd84>
   11ff0:	mov	r2, #10
   11ff4:	mov	r1, #0
   11ff8:	bl	10fb4 <strtol@plt>
   11ffc:	subs	r3, r0, #0
   12000:	str	r3, [sp, #12]
   12004:	bne	12010 <__assert_fail@plt+0xd8c>
   12008:	mov	r3, #80	; 0x50
   1200c:	str	r3, [sp, #12]
   12010:	ldr	r9, [sp, #28]
   12014:	ldr	fp, [pc, #484]	; 12200 <__assert_fail@plt+0xf7c>
   12018:	cmp	r4, r9
   1201c:	bge	120e8 <__assert_fail@plt+0xe64>
   12020:	add	r3, r4, r4, lsl #1
   12024:	ldr	r2, [sp, #12]
   12028:	rsb	r3, r4, r3, lsl #3
   1202c:	ldr	r8, [sp, #36]	; 0x24
   12030:	sub	r6, r2, r7
   12034:	lsl	sl, r3, #2
   12038:	add	r8, r8, sl
   1203c:	sub	r6, r6, #1
   12040:	mov	r5, r4
   12044:	ldr	r0, [r8]
   12048:	bl	11134 <strlen@plt>
   1204c:	sub	r6, r6, #1
   12050:	add	r8, r8, #92	; 0x5c
   12054:	subs	r6, r6, r0
   12058:	bmi	120f8 <__assert_fail@plt+0xe74>
   1205c:	add	r5, r5, #1
   12060:	cmp	r9, r5
   12064:	bne	12044 <__assert_fail@plt+0xdc0>
   12068:	ldr	r2, [pc, #404]	; 12204 <__assert_fail@plt+0xf80>
   1206c:	add	r1, r7, #1
   12070:	ldr	r0, [pc, #400]	; 12208 <__assert_fail@plt+0xf84>
   12074:	bl	10fc0 <printf@plt>
   12078:	mov	r8, sl
   1207c:	mov	r6, r4
   12080:	ldr	r3, [sp, #36]	; 0x24
   12084:	add	r6, r6, #1
   12088:	ldr	r0, [pc, #380]	; 1220c <__assert_fail@plt+0xf88>
   1208c:	ldr	r1, [r3, r8]
   12090:	bl	10fc0 <printf@plt>
   12094:	cmp	r6, r5
   12098:	add	r8, r8, #92	; 0x5c
   1209c:	bne	12080 <__assert_fail@plt+0xdfc>
   120a0:	ldr	r1, [fp]
   120a4:	mov	r0, #10
   120a8:	bl	11218 <putc@plt>
   120ac:	mov	r6, #2
   120b0:	mov	r1, #0
   120b4:	mov	r0, r6
   120b8:	bl	11164 <bfd_printable_arch_mach@plt>
   120bc:	ldr	r1, [pc, #332]	; 12210 <__assert_fail@plt+0xf8c>
   120c0:	bl	10fa8 <strcmp@plt>
   120c4:	cmp	r0, #0
   120c8:	bne	12114 <__assert_fail@plt+0xe90>
   120cc:	add	r6, r6, #1
   120d0:	cmp	r6, #89	; 0x59
   120d4:	bne	120b0 <__assert_fail@plt+0xe2c>
   120d8:	ldr	r9, [sp, #28]
   120dc:	mov	r4, r5
   120e0:	cmp	r4, r9
   120e4:	blt	12020 <__assert_fail@plt+0xd9c>
   120e8:	ldr	r4, [sp, #24]
   120ec:	mov	r0, r4
   120f0:	add	sp, sp, #44	; 0x2c
   120f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f8:	ldr	r2, [pc, #260]	; 12204 <__assert_fail@plt+0xf80>
   120fc:	add	r1, r7, #1
   12100:	ldr	r0, [pc, #256]	; 12208 <__assert_fail@plt+0xf84>
   12104:	bl	10fc0 <printf@plt>
   12108:	cmp	r4, r5
   1210c:	bne	12078 <__assert_fail@plt+0xdf4>
   12110:	b	120a0 <__assert_fail@plt+0xe1c>
   12114:	mov	r1, #0
   12118:	mov	r0, r6
   1211c:	bl	11164 <bfd_printable_arch_mach@plt>
   12120:	mov	r1, r7
   12124:	mov	r2, r0
   12128:	ldr	r0, [pc, #228]	; 12214 <__assert_fail@plt+0xf90>
   1212c:	bl	10fc0 <printf@plt>
   12130:	cmp	r4, r5
   12134:	beq	12190 <__assert_fail@plt+0xf0c>
   12138:	mov	r8, sl
   1213c:	mov	r9, r4
   12140:	sub	r3, r6, #2
   12144:	str	r3, [sp, #4]
   12148:	ldr	r2, [sp, #36]	; 0x24
   1214c:	ldr	r0, [sp, #4]
   12150:	add	r3, r2, r8
   12154:	add	r3, r3, r0
   12158:	ldr	r1, [fp]
   1215c:	ldrb	r3, [r3, #4]
   12160:	ldr	r0, [r2, r8]
   12164:	cmp	r3, #0
   12168:	beq	121a0 <__assert_fail@plt+0xf1c>
   1216c:	bl	11254 <fputs@plt>
   12170:	ldr	r1, [fp]
   12174:	add	r9, r9, #1
   12178:	cmp	r5, r9
   1217c:	add	r8, r8, #92	; 0x5c
   12180:	beq	12194 <__assert_fail@plt+0xf10>
   12184:	mov	r0, #32
   12188:	bl	11218 <putc@plt>
   1218c:	b	12148 <__assert_fail@plt+0xec4>
   12190:	ldr	r1, [fp]
   12194:	mov	r0, #10
   12198:	bl	11218 <putc@plt>
   1219c:	b	120cc <__assert_fail@plt+0xe48>
   121a0:	str	r1, [sp, #8]
   121a4:	bl	11134 <strlen@plt>
   121a8:	ldr	r1, [sp, #8]
   121ac:	cmp	r0, #0
   121b0:	sub	r3, r0, #1
   121b4:	beq	12174 <__assert_fail@plt+0xef0>
   121b8:	str	sl, [sp, #8]
   121bc:	mov	sl, r4
   121c0:	mov	r4, r3
   121c4:	b	121cc <__assert_fail@plt+0xf48>
   121c8:	ldr	r1, [fp]
   121cc:	sub	r4, r4, #1
   121d0:	mov	r0, #45	; 0x2d
   121d4:	bl	11218 <putc@plt>
   121d8:	cmn	r4, #1
   121dc:	bne	121c8 <__assert_fail@plt+0xf44>
   121e0:	mov	r4, sl
   121e4:	ldr	r1, [fp]
   121e8:	ldr	sl, [sp, #8]
   121ec:	b	12174 <__assert_fail@plt+0xef0>
   121f0:	andeq	r3, r1, r8, ror #19
   121f4:	andeq	r3, r1, r4, lsl #20
   121f8:			; <UNDEFINED> instruction: 0x00011ab8
   121fc:	andeq	r3, r1, r8, lsr #20
   12200:	andeq	r5, r2, r4, asr #2
   12204:	andeq	r3, r1, r0, lsr sl
   12208:	andeq	r3, r1, r4, lsr sl
   1220c:	andeq	r3, r1, r0, lsl #21
   12210:	andeq	r3, r1, ip, lsr sl
   12214:	andeq	r3, r1, r8, asr #20
   12218:	cmp	r2, #0
   1221c:	push	{r4, r5, r6, r7, lr}
   12220:	mov	r5, r0
   12224:	sub	sp, sp, #180	; 0xb4
   12228:	mov	r4, r1
   1222c:	mov	r6, r3
   12230:	beq	12250 <__assert_fail@plt+0xfcc>
   12234:	ldr	r3, [r1, #4]
   12238:	mov	r0, r4
   1223c:	add	r1, sp, #72	; 0x48
   12240:	ldr	r3, [r3, #252]	; 0xfc
   12244:	blx	r3
   12248:	cmp	r0, #0
   1224c:	beq	122ac <__assert_fail@plt+0x1028>
   12250:	mov	r1, r5
   12254:	ldr	r0, [r4]
   12258:	bl	11254 <fputs@plt>
   1225c:	cmp	r6, #0
   12260:	beq	1227c <__assert_fail@plt+0xff8>
   12264:	ldrb	r3, [r4, #44]	; 0x2c
   12268:	tst	r3, #1
   1226c:	beq	12290 <__assert_fail@plt+0x100c>
   12270:	ldrd	r2, [r4, #64]	; 0x40
   12274:	orrs	r1, r2, r3
   12278:	bne	1229c <__assert_fail@plt+0x1018>
   1227c:	mov	r1, r5
   12280:	mov	r0, #10
   12284:	bl	111e8 <fputc@plt>
   12288:	add	sp, sp, #180	; 0xb4
   1228c:	pop	{r4, r5, r6, r7, pc}
   12290:	ldrd	r2, [r4, #56]	; 0x38
   12294:	orrs	r1, r2, r3
   12298:	beq	1227c <__assert_fail@plt+0xff8>
   1229c:	ldr	r1, [pc, #148]	; 12338 <__assert_fail@plt+0x10b4>
   122a0:	mov	r0, r5
   122a4:	bl	11158 <fprintf@plt>
   122a8:	b	1227c <__assert_fail@plt+0xff8>
   122ac:	ldr	r3, [sp, #152]	; 0x98
   122b0:	add	r0, sp, #16
   122b4:	str	r3, [sp, #16]
   122b8:	bl	11038 <ctime@plt>
   122bc:	subs	r2, r0, #0
   122c0:	beq	12318 <__assert_fail@plt+0x1094>
   122c4:	add	r7, sp, #32
   122c8:	add	r3, r2, #20
   122cc:	mov	r0, r7
   122d0:	add	r2, r2, #4
   122d4:	ldr	r1, [pc, #96]	; 1233c <__assert_fail@plt+0x10b8>
   122d8:	bl	11200 <sprintf@plt>
   122dc:	add	r1, sp, #20
   122e0:	ldr	r0, [sp, #88]	; 0x58
   122e4:	bl	127b4 <__assert_fail@plt+0x1530>
   122e8:	ldr	r2, [sp, #120]	; 0x78
   122ec:	ldr	r3, [sp, #100]	; 0x64
   122f0:	mov	ip, #0
   122f4:	stmib	sp, {r2, r7}
   122f8:	str	r3, [sp]
   122fc:	add	r2, sp, #21
   12300:	ldr	r3, [sp, #96]	; 0x60
   12304:	ldr	r1, [pc, #52]	; 12340 <__assert_fail@plt+0x10bc>
   12308:	mov	r0, r5
   1230c:	strb	ip, [sp, #30]
   12310:	bl	11158 <fprintf@plt>
   12314:	b	12250 <__assert_fail@plt+0xfcc>
   12318:	mov	r2, #5
   1231c:	ldr	r1, [pc, #32]	; 12344 <__assert_fail@plt+0x10c0>
   12320:	bl	11044 <dcgettext@plt>
   12324:	add	r7, sp, #32
   12328:	mov	r1, r0
   1232c:	mov	r0, r7
   12330:	bl	11200 <sprintf@plt>
   12334:	b	122dc <__assert_fail@plt+0x1058>
   12338:	andeq	r3, r1, r4, lsl #21
   1233c:	andeq	r3, r1, r4, ror #20
   12340:	andeq	r3, r1, r0, ror sl
   12344:	andeq	r3, r1, r0, asr sl
   12348:	push	{r4, lr}
   1234c:	bl	11970 <__assert_fail@plt+0x6ec>
   12350:	mov	r4, r0
   12354:	bl	110e0 <mkstemp64@plt>
   12358:	cmn	r0, #1
   1235c:	beq	1236c <__assert_fail@plt+0x10e8>
   12360:	bl	11278 <close@plt>
   12364:	mov	r0, r4
   12368:	pop	{r4, pc}
   1236c:	mov	r0, r4
   12370:	bl	10ffc <free@plt>
   12374:	mov	r4, #0
   12378:	b	12364 <__assert_fail@plt+0x10e0>
   1237c:	push	{r4, lr}
   12380:	bl	11970 <__assert_fail@plt+0x6ec>
   12384:	pop	{r4, lr}
   12388:	b	1120c <mkdtemp@plt>
   1238c:	push	{r4, r5, lr}
   12390:	sub	sp, sp, #12
   12394:	mov	r4, r1
   12398:	mov	r2, #0
   1239c:	add	r1, sp, #4
   123a0:	mov	r5, r0
   123a4:	bl	10f9c <bfd_scan_vma@plt>
   123a8:	ldr	r3, [sp, #4]
   123ac:	ldrb	r3, [r3]
   123b0:	cmp	r3, #0
   123b4:	bne	123c0 <__assert_fail@plt+0x113c>
   123b8:	add	sp, sp, #12
   123bc:	pop	{r4, r5, pc}
   123c0:	mov	r2, #5
   123c4:	ldr	r1, [pc, #16]	; 123dc <__assert_fail@plt+0x1158>
   123c8:	mov	r0, #0
   123cc:	bl	11044 <dcgettext@plt>
   123d0:	mov	r2, r5
   123d4:	mov	r1, r4
   123d8:	bl	11cd8 <__assert_fail@plt+0xa54>
   123dc:	andeq	r3, r1, ip, lsl #21
   123e0:	push	{r4, r5, r6, lr}
   123e4:	subs	r4, r0, #0
   123e8:	sub	sp, sp, #104	; 0x68
   123ec:	beq	124c4 <__assert_fail@plt+0x1240>
   123f0:	mov	r2, sp
   123f4:	mov	r1, r4
   123f8:	mov	r0, #3
   123fc:	bl	11248 <__xstat64@plt>
   12400:	cmp	r0, #0
   12404:	blt	12448 <__assert_fail@plt+0x11c4>
   12408:	ldr	r3, [sp, #16]
   1240c:	and	r3, r3, #61440	; 0xf000
   12410:	cmp	r3, #16384	; 0x4000
   12414:	moveq	r2, #5
   12418:	ldreq	r1, [pc, #176]	; 124d0 <__assert_fail@plt+0x124c>
   1241c:	beq	124a4 <__assert_fail@plt+0x1220>
   12420:	cmp	r3, #32768	; 0x8000
   12424:	movne	r2, #5
   12428:	ldrne	r1, [pc, #164]	; 124d4 <__assert_fail@plt+0x1250>
   1242c:	bne	124a4 <__assert_fail@plt+0x1220>
   12430:	ldrd	r0, [sp, #48]	; 0x30
   12434:	cmp	r0, #0
   12438:	sbcs	r3, r1, #0
   1243c:	blt	1249c <__assert_fail@plt+0x1218>
   12440:	add	sp, sp, #104	; 0x68
   12444:	pop	{r4, r5, r6, pc}
   12448:	bl	11170 <__errno_location@plt>
   1244c:	mov	r2, #5
   12450:	ldr	r3, [r0]
   12454:	mov	r5, r0
   12458:	cmp	r3, #2
   1245c:	ldreq	r1, [pc, #116]	; 124d8 <__assert_fail@plt+0x1254>
   12460:	beq	124a4 <__assert_fail@plt+0x1220>
   12464:	ldr	r1, [pc, #112]	; 124dc <__assert_fail@plt+0x1258>
   12468:	mov	r0, #0
   1246c:	bl	11044 <dcgettext@plt>
   12470:	mov	r6, r0
   12474:	ldr	r0, [r5]
   12478:	bl	110f8 <strerror@plt>
   1247c:	mov	r1, r4
   12480:	mov	r2, r0
   12484:	mov	r0, r6
   12488:	bl	11d00 <__assert_fail@plt+0xa7c>
   1248c:	mvn	r0, #0
   12490:	mvn	r1, #0
   12494:	add	sp, sp, #104	; 0x68
   12498:	pop	{r4, r5, r6, pc}
   1249c:	ldr	r1, [pc, #60]	; 124e0 <__assert_fail@plt+0x125c>
   124a0:	mov	r2, #5
   124a4:	mov	r0, #0
   124a8:	bl	11044 <dcgettext@plt>
   124ac:	mov	r1, r4
   124b0:	bl	11d00 <__assert_fail@plt+0xa7c>
   124b4:	mvn	r0, #0
   124b8:	mvn	r1, #0
   124bc:	add	sp, sp, #104	; 0x68
   124c0:	pop	{r4, r5, r6, pc}
   124c4:	mvn	r0, #0
   124c8:	mvn	r1, #0
   124cc:	b	12440 <__assert_fail@plt+0x11bc>
   124d0:	andeq	r3, r1, r0, ror #21
   124d4:	andeq	r3, r1, r0, lsl #22
   124d8:	andeq	r3, r1, r0, lsr #21
   124dc:			; <UNDEFINED> instruction: 0x00013ab4
   124e0:	andeq	r3, r1, r8, lsr #22
   124e4:	push	{r4, r5, r6, r7, r8, lr}
   124e8:	subs	r6, r0, #0
   124ec:	beq	12594 <__assert_fail@plt+0x1310>
   124f0:	ldr	r3, [r6, #140]	; 0x8c
   124f4:	ldr	r5, [r6]
   124f8:	cmp	r3, #0
   124fc:	beq	12554 <__assert_fail@plt+0x12d0>
   12500:	ldrb	r2, [r3, #44]	; 0x2c
   12504:	tst	r2, #1
   12508:	bne	12554 <__assert_fail@plt+0x12d0>
   1250c:	ldr	r8, [r3]
   12510:	ldr	r7, [pc, #144]	; 125a8 <__assert_fail@plt+0x1324>
   12514:	mov	r0, r8
   12518:	bl	11134 <strlen@plt>
   1251c:	mov	r4, r0
   12520:	mov	r0, r5
   12524:	bl	11134 <strlen@plt>
   12528:	ldr	r3, [r7]
   1252c:	add	r4, r4, r0
   12530:	add	r4, r4, #3
   12534:	cmp	r3, r4
   12538:	bcc	1255c <__assert_fail@plt+0x12d8>
   1253c:	ldr	r0, [r7, #4]
   12540:	mov	r3, r5
   12544:	mov	r2, r8
   12548:	ldr	r1, [pc, #92]	; 125ac <__assert_fail@plt+0x1328>
   1254c:	bl	11200 <sprintf@plt>
   12550:	ldr	r5, [r7, #4]
   12554:	mov	r0, r5
   12558:	pop	{r4, r5, r6, r7, r8, pc}
   1255c:	cmp	r3, #0
   12560:	bne	12588 <__assert_fail@plt+0x1304>
   12564:	add	r4, r4, r4, lsr #1
   12568:	mov	r0, r4
   1256c:	str	r4, [r7]
   12570:	bl	1108c <xmalloc@plt>
   12574:	ldr	r3, [r6, #140]	; 0x8c
   12578:	ldr	r5, [r6]
   1257c:	ldr	r8, [r3]
   12580:	str	r0, [r7, #4]
   12584:	b	12540 <__assert_fail@plt+0x12bc>
   12588:	ldr	r0, [r7, #4]
   1258c:	bl	10ffc <free@plt>
   12590:	b	12564 <__assert_fail@plt+0x12e0>
   12594:	ldr	r3, [pc, #20]	; 125b0 <__assert_fail@plt+0x132c>
   12598:	ldr	r2, [pc, #20]	; 125b4 <__assert_fail@plt+0x1330>
   1259c:	ldr	r1, [pc, #20]	; 125b8 <__assert_fail@plt+0x1334>
   125a0:	ldr	r0, [pc, #20]	; 125bc <__assert_fail@plt+0x1338>
   125a4:	bl	11284 <__assert_fail@plt>
   125a8:	andeq	sp, r2, r4, asr r1
   125ac:	andeq	r3, r1, ip, lsl #23
   125b0:	muleq	r1, r0, r8
   125b4:	andeq	r0, r0, r9, ror r2
   125b8:	andeq	r3, r1, r4, ror #22
   125bc:	andeq	r3, r1, ip, ror fp
   125c0:	push	{r3}		; (str r3, [sp, #-4]!)
   125c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   125c8:	sub	sp, sp, #8
   125cc:	mov	r8, r1
   125d0:	mov	r7, r2
   125d4:	mov	r5, r0
   125d8:	ldr	r6, [sp, #36]	; 0x24
   125dc:	bl	11074 <bfd_get_error@plt>
   125e0:	bl	11230 <bfd_errmsg@plt>
   125e4:	ldr	r3, [pc, #204]	; 126b8 <__assert_fail@plt+0x1434>
   125e8:	ldr	r4, [pc, #204]	; 126bc <__assert_fail@plt+0x1438>
   125ec:	mov	r9, r0
   125f0:	ldr	r0, [r3]
   125f4:	bl	10fcc <fflush@plt>
   125f8:	ldr	r2, [pc, #192]	; 126c0 <__assert_fail@plt+0x143c>
   125fc:	add	r3, sp, #40	; 0x28
   12600:	ldr	r1, [r4]
   12604:	ldr	r0, [r2]
   12608:	str	r3, [sp, #4]
   1260c:	bl	11254 <fputs@plt>
   12610:	cmp	r8, #0
   12614:	beq	12648 <__assert_fail@plt+0x13c4>
   12618:	cmp	r5, #0
   1261c:	beq	126a8 <__assert_fail@plt+0x1424>
   12620:	cmp	r7, #0
   12624:	ldr	r0, [r4]
   12628:	beq	1264c <__assert_fail@plt+0x13c8>
   1262c:	ldr	r3, [r7]
   12630:	cmp	r3, #0
   12634:	beq	1264c <__assert_fail@plt+0x13c8>
   12638:	mov	r2, r5
   1263c:	ldr	r1, [pc, #128]	; 126c4 <__assert_fail@plt+0x1440>
   12640:	bl	11158 <fprintf@plt>
   12644:	b	12658 <__assert_fail@plt+0x13d4>
   12648:	ldr	r0, [r4]
   1264c:	mov	r2, r5
   12650:	ldr	r1, [pc, #112]	; 126c8 <__assert_fail@plt+0x1444>
   12654:	bl	11158 <fprintf@plt>
   12658:	cmp	r6, #0
   1265c:	ldr	r0, [r4]
   12660:	beq	1268c <__assert_fail@plt+0x1408>
   12664:	mov	r3, r0
   12668:	mov	r2, #2
   1266c:	mov	r1, #1
   12670:	ldr	r0, [pc, #84]	; 126cc <__assert_fail@plt+0x1448>
   12674:	bl	11080 <fwrite@plt>
   12678:	mov	r1, r6
   1267c:	ldr	r2, [sp, #4]
   12680:	ldr	r0, [r4]
   12684:	bl	111dc <vfprintf@plt>
   12688:	ldr	r0, [r4]
   1268c:	mov	r2, r9
   12690:	ldr	r1, [pc, #56]	; 126d0 <__assert_fail@plt+0x144c>
   12694:	bl	11158 <fprintf@plt>
   12698:	add	sp, sp, #8
   1269c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   126a0:	add	sp, sp, #4
   126a4:	bx	lr
   126a8:	mov	r0, r8
   126ac:	bl	124e4 <__assert_fail@plt+0x1260>
   126b0:	mov	r5, r0
   126b4:	b	12620 <__assert_fail@plt+0x139c>
   126b8:	andeq	r5, r2, r4, asr #2
   126bc:	andeq	r5, r2, r8, lsr r1
   126c0:	andeq	sp, r2, r0, ror #2
   126c4:	muleq	r1, r4, fp
   126c8:	muleq	r1, ip, fp
   126cc:	andeq	r3, r1, r0, lsr #23
   126d0:	andeq	r3, r1, r4, lsr #23
   126d4:	ldrb	r3, [r0]
   126d8:	cmp	r3, #47	; 0x2f
   126dc:	beq	12758 <__assert_fail@plt+0x14d4>
   126e0:	cmp	r3, #0
   126e4:	beq	1271c <__assert_fail@plt+0x1498>
   126e8:	cmp	r3, #46	; 0x2e
   126ec:	beq	12724 <__assert_fail@plt+0x14a0>
   126f0:	ldrb	r3, [r0, #1]!
   126f4:	cmp	r3, #0
   126f8:	cmpne	r3, #47	; 0x2f
   126fc:	bne	126f0 <__assert_fail@plt+0x146c>
   12700:	cmp	r3, #47	; 0x2f
   12704:	bne	126e0 <__assert_fail@plt+0x145c>
   12708:	ldrb	r3, [r0, #1]!
   1270c:	cmp	r3, #47	; 0x2f
   12710:	beq	12708 <__assert_fail@plt+0x1484>
   12714:	cmp	r3, #0
   12718:	bne	126e8 <__assert_fail@plt+0x1464>
   1271c:	mov	r0, #1
   12720:	bx	lr
   12724:	ldrb	r3, [r0, #1]
   12728:	cmp	r3, #46	; 0x2e
   1272c:	beq	12744 <__assert_fail@plt+0x14c0>
   12730:	cmp	r3, #0
   12734:	cmpne	r3, #47	; 0x2f
   12738:	add	r0, r0, #1
   1273c:	bne	126f0 <__assert_fail@plt+0x146c>
   12740:	b	1270c <__assert_fail@plt+0x1488>
   12744:	ldrb	r3, [r0, #2]
   12748:	add	r0, r0, #2
   1274c:	cmp	r3, #0
   12750:	cmpne	r3, #47	; 0x2f
   12754:	bne	126f0 <__assert_fail@plt+0x146c>
   12758:	mov	r0, #0
   1275c:	bx	lr
   12760:	push	{r4, lr}
   12764:	mov	r1, r0
   12768:	ldr	r2, [pc, #52]	; 127a4 <__assert_fail@plt+0x1520>
   1276c:	ldr	r0, [pc, #52]	; 127a8 <__assert_fail@plt+0x1524>
   12770:	bl	10fc0 <printf@plt>
   12774:	mov	r2, #5
   12778:	ldr	r1, [pc, #44]	; 127ac <__assert_fail@plt+0x1528>
   1277c:	mov	r0, #0
   12780:	bl	11044 <dcgettext@plt>
   12784:	bl	10fc0 <printf@plt>
   12788:	mov	r2, #5
   1278c:	ldr	r1, [pc, #28]	; 127b0 <__assert_fail@plt+0x152c>
   12790:	mov	r0, #0
   12794:	bl	11044 <dcgettext@plt>
   12798:	bl	10fc0 <printf@plt>
   1279c:	mov	r0, #0
   127a0:	bl	11128 <exit@plt>
   127a4:	andeq	r3, r1, r4, lsl #20
   127a8:	andeq	r3, r1, ip, lsr #23
   127ac:			; <UNDEFINED> instruction: 0x00013bb8
   127b0:	andeq	r3, r1, ip, ror #23
   127b4:	and	r3, r0, #61440	; 0xf000
   127b8:	cmp	r3, #16384	; 0x4000
   127bc:	push	{r4, r5, lr}
   127c0:	moveq	r2, #100	; 0x64
   127c4:	beq	12804 <__assert_fail@plt+0x1580>
   127c8:	cmp	r3, #40960	; 0xa000
   127cc:	moveq	r2, #108	; 0x6c
   127d0:	beq	12804 <__assert_fail@plt+0x1580>
   127d4:	cmp	r3, #24576	; 0x6000
   127d8:	moveq	r2, #98	; 0x62
   127dc:	beq	12804 <__assert_fail@plt+0x1580>
   127e0:	cmp	r3, #8192	; 0x2000
   127e4:	moveq	r2, #99	; 0x63
   127e8:	beq	12804 <__assert_fail@plt+0x1580>
   127ec:	cmp	r3, #49152	; 0xc000
   127f0:	moveq	r2, #115	; 0x73
   127f4:	beq	12804 <__assert_fail@plt+0x1580>
   127f8:	cmp	r3, #4096	; 0x1000
   127fc:	moveq	r2, #112	; 0x70
   12800:	movne	r2, #45	; 0x2d
   12804:	tst	r0, #256	; 0x100
   12808:	movne	r5, #114	; 0x72
   1280c:	moveq	r5, #45	; 0x2d
   12810:	tst	r0, #128	; 0x80
   12814:	movne	r3, #119	; 0x77
   12818:	moveq	r3, #45	; 0x2d
   1281c:	tst	r0, #64	; 0x40
   12820:	movne	ip, #120	; 0x78
   12824:	moveq	ip, #45	; 0x2d
   12828:	tst	r0, #32
   1282c:	movne	r4, #114	; 0x72
   12830:	moveq	r4, #45	; 0x2d
   12834:	tst	r0, #16
   12838:	movne	lr, #119	; 0x77
   1283c:	moveq	lr, #45	; 0x2d
   12840:	tst	r0, #8
   12844:	strb	r2, [r1]
   12848:	movne	r2, #120	; 0x78
   1284c:	moveq	r2, #45	; 0x2d
   12850:	tst	r0, #4
   12854:	strb	r3, [r1, #2]
   12858:	movne	r3, #114	; 0x72
   1285c:	moveq	r3, #45	; 0x2d
   12860:	tst	r0, #2
   12864:	strb	lr, [r1, #5]
   12868:	movne	lr, #119	; 0x77
   1286c:	moveq	lr, #45	; 0x2d
   12870:	tst	r0, #1
   12874:	strb	r3, [r1, #7]
   12878:	movne	r3, #120	; 0x78
   1287c:	moveq	r3, #45	; 0x2d
   12880:	tst	r0, #2048	; 0x800
   12884:	strb	r5, [r1, #1]
   12888:	strb	ip, [r1, #3]
   1288c:	strb	r4, [r1, #4]
   12890:	strb	r2, [r1, #6]
   12894:	strb	lr, [r1, #8]
   12898:	strb	r3, [r1, #9]
   1289c:	beq	128b0 <__assert_fail@plt+0x162c>
   128a0:	cmp	ip, #120	; 0x78
   128a4:	movne	ip, #83	; 0x53
   128a8:	moveq	ip, #115	; 0x73
   128ac:	strb	ip, [r1, #3]
   128b0:	tst	r0, #1024	; 0x400
   128b4:	beq	128c8 <__assert_fail@plt+0x1644>
   128b8:	cmp	r2, #120	; 0x78
   128bc:	movne	r2, #83	; 0x53
   128c0:	moveq	r2, #115	; 0x73
   128c4:	strb	r2, [r1, #6]
   128c8:	tst	r0, #512	; 0x200
   128cc:	popeq	{r4, r5, pc}
   128d0:	cmp	r3, #120	; 0x78
   128d4:	movne	r3, #84	; 0x54
   128d8:	moveq	r3, #116	; 0x74
   128dc:	strb	r3, [r1, #9]
   128e0:	pop	{r4, r5, pc}
   128e4:	push	{r4, r5, r6, lr}
   128e8:	subs	r5, r0, #0
   128ec:	beq	12984 <__assert_fail@plt+0x1700>
   128f0:	ldr	r3, [r5]
   128f4:	cmp	r3, #0
   128f8:	beq	12974 <__assert_fail@plt+0x16f0>
   128fc:	mov	r3, r5
   12900:	mov	r0, #0
   12904:	b	1290c <__assert_fail@plt+0x1688>
   12908:	mov	r0, r1
   1290c:	ldr	r2, [r3, #4]!
   12910:	add	r1, r0, #1
   12914:	cmp	r2, #0
   12918:	bne	12908 <__assert_fail@plt+0x1684>
   1291c:	add	r0, r0, #2
   12920:	lsl	r0, r0, #2
   12924:	bl	1108c <xmalloc@plt>
   12928:	ldr	r2, [r5]
   1292c:	cmp	r2, #0
   12930:	mov	r6, r0
   12934:	beq	1297c <__assert_fail@plt+0x16f8>
   12938:	sub	r4, r0, #4
   1293c:	mov	r0, r2
   12940:	bl	110a4 <xstrdup@plt>
   12944:	ldr	r2, [r5, #4]!
   12948:	add	r3, r4, #8
   1294c:	cmp	r2, #0
   12950:	sub	r3, r3, r6
   12954:	add	r4, r4, #4
   12958:	str	r0, [r4]
   1295c:	bne	1293c <__assert_fail@plt+0x16b8>
   12960:	add	r3, r6, r3
   12964:	mov	r2, #0
   12968:	str	r2, [r3]
   1296c:	mov	r0, r6
   12970:	pop	{r4, r5, r6, pc}
   12974:	mov	r0, #4
   12978:	b	12924 <__assert_fail@plt+0x16a0>
   1297c:	mov	r3, r0
   12980:	b	12964 <__assert_fail@plt+0x16e0>
   12984:	mov	r6, r5
   12988:	b	1296c <__assert_fail@plt+0x16e8>
   1298c:	push	{r4, r5, r6, lr}
   12990:	subs	r5, r0, #0
   12994:	popeq	{r4, r5, r6, pc}
   12998:	ldr	r0, [r5]
   1299c:	cmp	r0, #0
   129a0:	beq	129b8 <__assert_fail@plt+0x1734>
   129a4:	mov	r4, r5
   129a8:	bl	10ffc <free@plt>
   129ac:	ldr	r0, [r4, #4]!
   129b0:	cmp	r0, #0
   129b4:	bne	129a8 <__assert_fail@plt+0x1724>
   129b8:	mov	r0, r5
   129bc:	pop	{r4, r5, r6, lr}
   129c0:	b	10ffc <free@plt>
   129c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c8:	subs	r4, r0, #0
   129cc:	ldr	r6, [pc, #512]	; 12bd4 <__assert_fail@plt+0x1950>
   129d0:	sub	sp, sp, #12
   129d4:	add	r6, pc, r6
   129d8:	moveq	r9, r4
   129dc:	beq	12b78 <__assert_fail@plt+0x18f4>
   129e0:	bl	11134 <strlen@plt>
   129e4:	mov	r9, #0
   129e8:	mov	fp, r9
   129ec:	mov	sl, r9
   129f0:	mov	r5, r9
   129f4:	mov	r8, r9
   129f8:	mov	r7, r9
   129fc:	add	r0, r0, #1
   12a00:	bl	1108c <xmalloc@plt>
   12a04:	ldr	r2, [pc, #460]	; 12bd8 <__assert_fail@plt+0x1954>
   12a08:	str	r0, [sp]
   12a0c:	ldr	r6, [r6, r2]
   12a10:	ldrb	r2, [r4]
   12a14:	lsl	r2, r2, #1
   12a18:	ldrh	r2, [r6, r2]
   12a1c:	tst	r2, #64	; 0x40
   12a20:	beq	12a38 <__assert_fail@plt+0x17b4>
   12a24:	ldrb	r2, [r4, #1]!
   12a28:	lsl	r2, r2, #1
   12a2c:	ldrh	r2, [r6, r2]
   12a30:	tst	r2, #64	; 0x40
   12a34:	bne	12a24 <__assert_fail@plt+0x17a0>
   12a38:	cmp	fp, #0
   12a3c:	lsl	r2, sl, #2
   12a40:	beq	12a54 <__assert_fail@plt+0x17d0>
   12a44:	sub	r1, fp, #1
   12a48:	cmp	r1, sl
   12a4c:	addgt	r1, r9, r2
   12a50:	bgt	12a84 <__assert_fail@plt+0x1800>
   12a54:	cmp	r9, #0
   12a58:	str	r2, [sp, #4]
   12a5c:	beq	12bbc <__assert_fail@plt+0x1938>
   12a60:	lsl	fp, fp, #1
   12a64:	mov	r0, r9
   12a68:	lsl	r1, fp, #2
   12a6c:	bl	1105c <xrealloc@plt>
   12a70:	ldr	r2, [sp, #4]
   12a74:	mov	r9, r0
   12a78:	add	r1, r9, r2
   12a7c:	mov	r3, #0
   12a80:	str	r3, [r9, r2]
   12a84:	ldrb	r2, [r4]
   12a88:	ldr	r0, [sp]
   12a8c:	cmp	r2, #0
   12a90:	bne	12ab4 <__assert_fail@plt+0x1830>
   12a94:	b	12b18 <__assert_fail@plt+0x1894>
   12a98:	cmp	r2, #39	; 0x27
   12a9c:	moveq	r7, r5
   12aa0:	beq	12aa8 <__assert_fail@plt+0x1824>
   12aa4:	strb	r2, [r0], #1
   12aa8:	ldrb	r2, [r4, #1]!
   12aac:	cmp	r2, #0
   12ab0:	beq	12b18 <__assert_fail@plt+0x1894>
   12ab4:	lsl	ip, r2, #1
   12ab8:	ldrh	ip, [r6, ip]
   12abc:	tst	ip, #64	; 0x40
   12ac0:	beq	12ad0 <__assert_fail@plt+0x184c>
   12ac4:	orr	ip, r8, r7
   12ac8:	orrs	ip, ip, r5
   12acc:	beq	12bac <__assert_fail@plt+0x1928>
   12ad0:	cmp	r5, #0
   12ad4:	movne	r5, #0
   12ad8:	strbne	r2, [r0], #1
   12adc:	bne	12aa8 <__assert_fail@plt+0x1824>
   12ae0:	cmp	r2, #92	; 0x5c
   12ae4:	moveq	r5, #1
   12ae8:	beq	12aa8 <__assert_fail@plt+0x1824>
   12aec:	cmp	r7, #0
   12af0:	bne	12a98 <__assert_fail@plt+0x1814>
   12af4:	cmp	r8, #0
   12af8:	beq	12b84 <__assert_fail@plt+0x1900>
   12afc:	cmp	r2, #34	; 0x22
   12b00:	mov	r5, r7
   12b04:	moveq	r8, r7
   12b08:	bne	12aa4 <__assert_fail@plt+0x1820>
   12b0c:	ldrb	r2, [r4, #1]!
   12b10:	cmp	r2, #0
   12b14:	bne	12ab4 <__assert_fail@plt+0x1830>
   12b18:	mov	r3, #0
   12b1c:	strb	r3, [r0]
   12b20:	ldr	r0, [sp]
   12b24:	str	r1, [sp, #4]
   12b28:	bl	110a4 <xstrdup@plt>
   12b2c:	ldr	r1, [sp, #4]
   12b30:	mov	r3, #0
   12b34:	add	sl, sl, #1
   12b38:	str	r3, [r1, #4]
   12b3c:	str	r0, [r1]
   12b40:	ldrb	r2, [r4]
   12b44:	lsl	r1, r2, #1
   12b48:	ldrh	r1, [r6, r1]
   12b4c:	tst	r1, #64	; 0x40
   12b50:	beq	12b68 <__assert_fail@plt+0x18e4>
   12b54:	ldrb	r2, [r4, #1]!
   12b58:	lsl	r1, r2, #1
   12b5c:	ldrh	r1, [r6, r1]
   12b60:	tst	r1, #64	; 0x40
   12b64:	bne	12b54 <__assert_fail@plt+0x18d0>
   12b68:	cmp	r2, #0
   12b6c:	bne	12a10 <__assert_fail@plt+0x178c>
   12b70:	ldr	r0, [sp]
   12b74:	bl	10ffc <free@plt>
   12b78:	mov	r0, r9
   12b7c:	add	sp, sp, #12
   12b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b84:	cmp	r2, #39	; 0x27
   12b88:	mov	r5, r8
   12b8c:	moveq	r7, #1
   12b90:	beq	12aa8 <__assert_fail@plt+0x1824>
   12b94:	cmp	r2, #34	; 0x22
   12b98:	moveq	r7, r8
   12b9c:	strbne	r2, [r0], #1
   12ba0:	movne	r7, r8
   12ba4:	moveq	r8, #1
   12ba8:	b	12aa8 <__assert_fail@plt+0x1824>
   12bac:	mov	r8, ip
   12bb0:	mov	r7, ip
   12bb4:	mov	r5, ip
   12bb8:	b	12b18 <__assert_fail@plt+0x1894>
   12bbc:	mov	r0, #32
   12bc0:	bl	1108c <xmalloc@plt>
   12bc4:	mov	fp, #8
   12bc8:	ldr	r2, [sp, #4]
   12bcc:	mov	r9, r0
   12bd0:	b	12a78 <__assert_fail@plt+0x17f4>
   12bd4:	andeq	r2, r1, r4, lsr #12
   12bd8:	andeq	r0, r0, ip, lsl #2
   12bdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12be0:	subs	r6, r1, #0
   12be4:	ldr	r8, [pc, #192]	; 12cac <__assert_fail@plt+0x1a28>
   12be8:	add	r8, pc, r8
   12bec:	beq	12c7c <__assert_fail@plt+0x19f8>
   12bf0:	ldr	r5, [r0]
   12bf4:	mov	r9, r0
   12bf8:	cmp	r5, #0
   12bfc:	beq	12ca4 <__assert_fail@plt+0x1a20>
   12c00:	ldrb	r4, [r5]
   12c04:	cmp	r4, #0
   12c08:	beq	12c84 <__assert_fail@plt+0x1a00>
   12c0c:	ldr	r3, [pc, #156]	; 12cb0 <__assert_fail@plt+0x1a2c>
   12c10:	ldr	r7, [r8, r3]
   12c14:	b	12c24 <__assert_fail@plt+0x19a0>
   12c18:	ldrb	r4, [r5, #1]!
   12c1c:	cmp	r4, #0
   12c20:	beq	12c84 <__assert_fail@plt+0x1a00>
   12c24:	lsl	r3, r4, #1
   12c28:	mov	r1, r6
   12c2c:	ldrh	r3, [r7, r3]
   12c30:	mov	r0, #92	; 0x5c
   12c34:	tst	r3, #64	; 0x40
   12c38:	bne	12c5c <__assert_fail@plt+0x19d8>
   12c3c:	cmp	r4, #39	; 0x27
   12c40:	cmpne	r4, r0
   12c44:	moveq	r3, #1
   12c48:	movne	r3, #0
   12c4c:	cmp	r4, #34	; 0x22
   12c50:	orreq	r3, r3, #1
   12c54:	cmp	r3, #0
   12c58:	beq	12c68 <__assert_fail@plt+0x19e4>
   12c5c:	bl	111e8 <fputc@plt>
   12c60:	cmn	r0, #1
   12c64:	beq	12c7c <__assert_fail@plt+0x19f8>
   12c68:	mov	r0, r4
   12c6c:	mov	r1, r6
   12c70:	bl	111e8 <fputc@plt>
   12c74:	cmn	r0, #1
   12c78:	bne	12c18 <__assert_fail@plt+0x1994>
   12c7c:	mov	r0, #1
   12c80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c84:	mov	r1, r6
   12c88:	mov	r0, #10
   12c8c:	bl	111e8 <fputc@plt>
   12c90:	cmn	r0, #1
   12c94:	beq	12c7c <__assert_fail@plt+0x19f8>
   12c98:	ldr	r5, [r9, #4]!
   12c9c:	cmp	r5, #0
   12ca0:	bne	12c00 <__assert_fail@plt+0x197c>
   12ca4:	mov	r0, #0
   12ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12cac:	andeq	r2, r1, r0, lsl r4
   12cb0:	andeq	r0, r0, ip, lsl #2
   12cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb8:	mov	r7, r1
   12cbc:	sub	sp, sp, #140	; 0x8c
   12cc0:	ldr	r3, [r7]
   12cc4:	ldr	r1, [r0]
   12cc8:	str	r3, [sp, #24]
   12ccc:	ldr	r3, [pc, #824]	; 1300c <__assert_fail@plt+0x1d88>
   12cd0:	mov	sl, r0
   12cd4:	add	r3, pc, r3
   12cd8:	str	r3, [sp, #28]
   12cdc:	add	r3, sp, #32
   12ce0:	str	r3, [sp]
   12ce4:	ldr	r3, [pc, #804]	; 13010 <__assert_fail@plt+0x1d8c>
   12ce8:	mov	fp, #2000	; 0x7d0
   12cec:	mov	r5, #0
   12cf0:	add	r3, pc, r3
   12cf4:	str	r3, [sp, #4]
   12cf8:	add	r4, r5, #1
   12cfc:	cmp	r4, r1
   12d00:	bge	12dfc <__assert_fail@plt+0x1b78>
   12d04:	ldr	r3, [r7]
   12d08:	lsl	r8, r4, #2
   12d0c:	ldr	r0, [r3, r4, lsl #2]
   12d10:	ldrb	r2, [r0]
   12d14:	cmp	r2, #64	; 0x40
   12d18:	bne	12e08 <__assert_fail@plt+0x1b84>
   12d1c:	subs	fp, fp, #1
   12d20:	beq	12f9c <__assert_fail@plt+0x1d18>
   12d24:	add	r6, r0, #1
   12d28:	mov	r1, r6
   12d2c:	ldr	r2, [sp]
   12d30:	mov	r0, #3
   12d34:	bl	11248 <__xstat64@plt>
   12d38:	cmp	r0, #0
   12d3c:	blt	12e04 <__assert_fail@plt+0x1b80>
   12d40:	ldr	r3, [sp, #48]	; 0x30
   12d44:	and	r3, r3, #61440	; 0xf000
   12d48:	cmp	r3, #16384	; 0x4000
   12d4c:	beq	12fc8 <__assert_fail@plt+0x1d44>
   12d50:	mov	r0, r6
   12d54:	ldr	r1, [sp, #4]
   12d58:	bl	11224 <fopen64@plt>
   12d5c:	subs	r9, r0, #0
   12d60:	beq	12e04 <__assert_fail@plt+0x1b80>
   12d64:	mov	r2, #2
   12d68:	mov	r1, #0
   12d6c:	bl	1123c <fseek@plt>
   12d70:	cmn	r0, #1
   12d74:	beq	12de0 <__assert_fail@plt+0x1b5c>
   12d78:	mov	r0, r9
   12d7c:	bl	1102c <ftell@plt>
   12d80:	cmn	r0, #1
   12d84:	mov	r6, r0
   12d88:	beq	12de0 <__assert_fail@plt+0x1b5c>
   12d8c:	mov	r2, #0
   12d90:	mov	r1, r2
   12d94:	mov	r0, r9
   12d98:	bl	1123c <fseek@plt>
   12d9c:	cmn	r0, #1
   12da0:	beq	12de0 <__assert_fail@plt+0x1b5c>
   12da4:	add	r0, r6, #1
   12da8:	bl	1108c <xmalloc@plt>
   12dac:	mov	r3, r9
   12db0:	mov	r2, r6
   12db4:	mov	r1, #1
   12db8:	str	r0, [sp, #8]
   12dbc:	bl	110bc <fread@plt>
   12dc0:	cmp	r6, r0
   12dc4:	mov	r3, r0
   12dc8:	beq	12e14 <__assert_fail@plt+0x1b90>
   12dcc:	str	r0, [sp, #12]
   12dd0:	mov	r0, r9
   12dd4:	bl	11008 <ferror@plt>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12e10 <__assert_fail@plt+0x1b8c>
   12de0:	mov	r0, r9
   12de4:	bl	111a0 <fclose@plt>
   12de8:	mov	r5, r4
   12dec:	ldr	r1, [sl]
   12df0:	add	r4, r5, #1
   12df4:	cmp	r4, r1
   12df8:	blt	12d04 <__assert_fail@plt+0x1a80>
   12dfc:	add	sp, sp, #140	; 0x8c
   12e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e04:	ldr	r1, [sl]
   12e08:	mov	r5, r4
   12e0c:	b	12cf8 <__assert_fail@plt+0x1a74>
   12e10:	ldr	r3, [sp, #12]
   12e14:	ldr	r1, [sp, #8]
   12e18:	mov	r2, #0
   12e1c:	strb	r2, [r1, r3]
   12e20:	ldrb	r3, [r1]
   12e24:	cmp	r3, r2
   12e28:	beq	12e6c <__assert_fail@plt+0x1be8>
   12e2c:	ldr	r2, [pc, #480]	; 13014 <__assert_fail@plt+0x1d90>
   12e30:	ldr	r1, [sp, #28]
   12e34:	lsl	r3, r3, #1
   12e38:	ldr	r1, [r1, r2]
   12e3c:	ldrh	r3, [r1, r3]
   12e40:	tst	r3, #64	; 0x40
   12e44:	beq	12eac <__assert_fail@plt+0x1c28>
   12e48:	ldr	r2, [sp, #8]
   12e4c:	b	12e60 <__assert_fail@plt+0x1bdc>
   12e50:	lsl	r3, r3, #1
   12e54:	ldrh	r3, [r1, r3]
   12e58:	tst	r3, #64	; 0x40
   12e5c:	beq	12eac <__assert_fail@plt+0x1c28>
   12e60:	ldrb	r3, [r2, #1]!
   12e64:	cmp	r3, #0
   12e68:	bne	12e50 <__assert_fail@plt+0x1bcc>
   12e6c:	mov	r0, #4
   12e70:	bl	1108c <xmalloc@plt>
   12e74:	ldr	r2, [sp, #24]
   12e78:	mov	r6, #0
   12e7c:	mov	r3, r0
   12e80:	str	r0, [sp, #12]
   12e84:	ldr	r0, [r7]
   12e88:	str	r6, [r3]
   12e8c:	cmp	r2, r0
   12e90:	bne	12f90 <__assert_fail@plt+0x1d0c>
   12e94:	mov	r0, r2
   12e98:	bl	128e4 <__assert_fail@plt+0x1660>
   12e9c:	mov	r3, r6
   12ea0:	mov	r2, r8
   12ea4:	str	r0, [r7]
   12ea8:	b	12efc <__assert_fail@plt+0x1c78>
   12eac:	ldr	r0, [sp, #8]
   12eb0:	bl	129c4 <__assert_fail@plt+0x1740>
   12eb4:	ldr	r2, [sp, #24]
   12eb8:	mov	r3, r0
   12ebc:	str	r0, [sp, #12]
   12ec0:	ldr	r0, [r7]
   12ec4:	cmp	r0, r2
   12ec8:	beq	12ff4 <__assert_fail@plt+0x1d70>
   12ecc:	ldr	r6, [r3]
   12ed0:	cmp	r6, #0
   12ed4:	beq	12f90 <__assert_fail@plt+0x1d0c>
   12ed8:	ldr	r2, [sp, #12]
   12edc:	mov	r6, #0
   12ee0:	ldr	r3, [r2, #4]!
   12ee4:	add	r6, r6, #1
   12ee8:	cmp	r3, #0
   12eec:	lsl	r3, r6, #2
   12ef0:	bne	12ee0 <__assert_fail@plt+0x1c5c>
   12ef4:	add	r2, r4, r6
   12ef8:	lsl	r2, r2, #2
   12efc:	ldr	r0, [r0, r8]
   12f00:	str	r3, [sp, #16]
   12f04:	str	r2, [sp, #20]
   12f08:	bl	10ffc <free@plt>
   12f0c:	ldr	r1, [sl]
   12f10:	ldr	r0, [r7]
   12f14:	add	r1, r1, #1
   12f18:	add	r1, r1, r6
   12f1c:	lsl	r1, r1, #2
   12f20:	bl	1105c <xrealloc@plt>
   12f24:	ldr	r2, [sp, #20]
   12f28:	add	ip, r8, #4
   12f2c:	mov	r1, r0
   12f30:	ldr	r0, [sl]
   12f34:	str	r1, [r7]
   12f38:	sub	r4, r0, r4
   12f3c:	add	r0, r1, r2
   12f40:	add	r1, r1, ip
   12f44:	lsl	r2, r4, #2
   12f48:	bl	10fe4 <memmove@plt>
   12f4c:	ldr	r4, [sp, #12]
   12f50:	ldr	r3, [sp, #16]
   12f54:	ldr	r0, [r7]
   12f58:	mov	r2, r3
   12f5c:	mov	r1, r4
   12f60:	add	r0, r0, r8
   12f64:	bl	11020 <memcpy@plt>
   12f68:	ldr	r3, [sl]
   12f6c:	mov	r0, r4
   12f70:	sub	r3, r3, #1
   12f74:	add	r6, r3, r6
   12f78:	str	r6, [sl]
   12f7c:	bl	10ffc <free@plt>
   12f80:	ldr	r0, [sp, #8]
   12f84:	bl	10ffc <free@plt>
   12f88:	mov	r4, r5
   12f8c:	b	12de0 <__assert_fail@plt+0x1b5c>
   12f90:	mov	r3, r6
   12f94:	mov	r2, r8
   12f98:	b	12efc <__assert_fail@plt+0x1c78>
   12f9c:	ldr	r0, [pc, #116]	; 13018 <__assert_fail@plt+0x1d94>
   12fa0:	ldr	r2, [r3]
   12fa4:	mov	r3, r0
   12fa8:	ldr	r0, [sp, #28]
   12fac:	ldr	r1, [pc, #104]	; 1301c <__assert_fail@plt+0x1d98>
   12fb0:	ldr	r3, [r0, r3]
   12fb4:	add	r1, pc, r1
   12fb8:	ldr	r0, [r3]
   12fbc:	bl	11158 <fprintf@plt>
   12fc0:	mov	r0, #1
   12fc4:	bl	111f4 <xexit@plt>
   12fc8:	ldr	r0, [sp, #28]
   12fcc:	ldr	r3, [pc, #68]	; 13018 <__assert_fail@plt+0x1d94>
   12fd0:	ldr	r2, [r7]
   12fd4:	ldr	r1, [pc, #68]	; 13020 <__assert_fail@plt+0x1d9c>
   12fd8:	ldr	r3, [r0, r3]
   12fdc:	add	r1, pc, r1
   12fe0:	ldr	r2, [r2]
   12fe4:	ldr	r0, [r3]
   12fe8:	bl	11158 <fprintf@plt>
   12fec:	mov	r0, #1
   12ff0:	bl	111f4 <xexit@plt>
   12ff4:	ldr	r3, [sp, #12]
   12ff8:	ldr	r0, [sp, #24]
   12ffc:	ldr	r6, [r3]
   13000:	bl	128e4 <__assert_fail@plt+0x1660>
   13004:	str	r0, [r7]
   13008:	b	12ed0 <__assert_fail@plt+0x1c4c>
   1300c:	andeq	r2, r1, r4, lsr #6
   13010:	andeq	r1, r0, r0, lsl r0
   13014:	andeq	r0, r0, ip, lsl #2
   13018:	andeq	r0, r0, r0, lsl r1
   1301c:	strdeq	r0, [r0], -r4
   13020:	strdeq	r0, [r0], -r8
   13024:	subs	r3, r0, #0
   13028:	beq	13050 <__assert_fail@plt+0x1dcc>
   1302c:	ldr	r0, [r3]
   13030:	cmp	r0, #0
   13034:	bxeq	lr
   13038:	mov	r0, #0
   1303c:	ldr	r2, [r3, #4]!
   13040:	add	r0, r0, #1
   13044:	cmp	r2, #0
   13048:	bne	1303c <__assert_fail@plt+0x1db8>
   1304c:	bx	lr
   13050:	mov	r0, r3
   13054:	bx	lr
   13058:	ldr	r3, [pc, #452]	; 13224 <__assert_fail@plt+0x1fa0>
   1305c:	add	r3, pc, r3
   13060:	ldr	r3, [r3]
   13064:	cmp	r3, #0
   13068:	beq	13074 <__assert_fail@plt+0x1df0>
   1306c:	mov	r0, r3
   13070:	bx	lr
   13074:	ldr	r0, [pc, #428]	; 13228 <__assert_fail@plt+0x1fa4>
   13078:	push	{r4, r5, r6, lr}
   1307c:	add	r0, pc, r0
   13080:	bl	110d4 <getenv@plt>
   13084:	subs	r4, r0, #0
   13088:	beq	131fc <__assert_fail@plt+0x1f78>
   1308c:	mov	r1, #7
   13090:	bl	11194 <access@plt>
   13094:	cmp	r0, #0
   13098:	bne	130fc <__assert_fail@plt+0x1e78>
   1309c:	ldr	r0, [pc, #392]	; 1322c <__assert_fail@plt+0x1fa8>
   130a0:	add	r0, pc, r0
   130a4:	bl	110d4 <getenv@plt>
   130a8:	ldr	r0, [pc, #384]	; 13230 <__assert_fail@plt+0x1fac>
   130ac:	add	r0, pc, r0
   130b0:	bl	110d4 <getenv@plt>
   130b4:	mov	r0, r4
   130b8:	bl	11134 <strlen@plt>
   130bc:	mov	r5, r0
   130c0:	add	r6, r5, #1
   130c4:	add	r0, r0, #2
   130c8:	bl	1108c <xmalloc@plt>
   130cc:	mov	r1, r4
   130d0:	bl	110b0 <strcpy@plt>
   130d4:	ldr	r2, [pc, #344]	; 13234 <__assert_fail@plt+0x1fb0>
   130d8:	mov	r1, #0
   130dc:	add	r2, pc, r2
   130e0:	mov	r3, r0
   130e4:	mov	r0, #47	; 0x2f
   130e8:	strb	r0, [r3, r5]
   130ec:	str	r3, [r2]
   130f0:	strb	r1, [r3, r6]
   130f4:	mov	r0, r3
   130f8:	pop	{r4, r5, r6, pc}
   130fc:	ldr	r0, [pc, #308]	; 13238 <__assert_fail@plt+0x1fb4>
   13100:	add	r0, pc, r0
   13104:	bl	110d4 <getenv@plt>
   13108:	mov	r4, r0
   1310c:	cmp	r4, #0
   13110:	beq	13210 <__assert_fail@plt+0x1f8c>
   13114:	mov	r1, #7
   13118:	mov	r0, r4
   1311c:	bl	11194 <access@plt>
   13120:	cmp	r0, #0
   13124:	beq	130a8 <__assert_fail@plt+0x1e24>
   13128:	ldr	r0, [pc, #268]	; 1323c <__assert_fail@plt+0x1fb8>
   1312c:	add	r0, pc, r0
   13130:	bl	110d4 <getenv@plt>
   13134:	mov	r4, r0
   13138:	cmp	r4, #0
   1313c:	beq	13154 <__assert_fail@plt+0x1ed0>
   13140:	mov	r1, #7
   13144:	mov	r0, r4
   13148:	bl	11194 <access@plt>
   1314c:	cmp	r0, #0
   13150:	beq	130b4 <__assert_fail@plt+0x1e30>
   13154:	ldr	r4, [pc, #228]	; 13240 <__assert_fail@plt+0x1fbc>
   13158:	mov	r1, #7
   1315c:	add	r4, pc, r4
   13160:	mov	r0, r4
   13164:	bl	11194 <access@plt>
   13168:	cmp	r0, #0
   1316c:	moveq	r6, #5
   13170:	moveq	r0, #6
   13174:	moveq	r5, #4
   13178:	beq	130c8 <__assert_fail@plt+0x1e44>
   1317c:	ldr	r4, [pc, #192]	; 13244 <__assert_fail@plt+0x1fc0>
   13180:	mov	r1, #7
   13184:	add	r4, pc, r4
   13188:	add	r6, r4, #20
   1318c:	mov	r0, r6
   13190:	bl	11194 <access@plt>
   13194:	cmp	r0, #0
   13198:	bne	131b8 <__assert_fail@plt+0x1f34>
   1319c:	mov	r0, r6
   131a0:	bl	11134 <strlen@plt>
   131a4:	mov	r4, r6
   131a8:	mov	r5, r0
   131ac:	add	r6, r5, #1
   131b0:	add	r0, r0, #2
   131b4:	b	130c8 <__assert_fail@plt+0x1e44>
   131b8:	mov	r1, #7
   131bc:	mov	r0, r4
   131c0:	bl	11194 <access@plt>
   131c4:	cmp	r0, #0
   131c8:	beq	130b4 <__assert_fail@plt+0x1e30>
   131cc:	add	r4, r4, #12
   131d0:	mov	r0, r4
   131d4:	mov	r1, #7
   131d8:	bl	11194 <access@plt>
   131dc:	cmp	r0, #0
   131e0:	beq	130b4 <__assert_fail@plt+0x1e30>
   131e4:	ldr	r4, [pc, #92]	; 13248 <__assert_fail@plt+0x1fc4>
   131e8:	mov	r6, #2
   131ec:	mov	r0, #3
   131f0:	mov	r5, #1
   131f4:	add	r4, pc, r4
   131f8:	b	130c8 <__assert_fail@plt+0x1e44>
   131fc:	ldr	r0, [pc, #72]	; 1324c <__assert_fail@plt+0x1fc8>
   13200:	add	r0, pc, r0
   13204:	bl	110d4 <getenv@plt>
   13208:	mov	r4, r0
   1320c:	b	1310c <__assert_fail@plt+0x1e88>
   13210:	ldr	r0, [pc, #56]	; 13250 <__assert_fail@plt+0x1fcc>
   13214:	add	r0, pc, r0
   13218:	bl	110d4 <getenv@plt>
   1321c:	mov	r4, r0
   13220:	b	13138 <__assert_fail@plt+0x1eb4>
   13224:	strdeq	sl, [r1], -r8
   13228:			; <UNDEFINED> instruction: 0x00000cb4
   1322c:	muleq	r0, r8, ip
   13230:	muleq	r0, r0, ip
   13234:	andeq	sl, r1, r8, ror r0
   13238:	andeq	r0, r0, r8, lsr ip
   1323c:	andeq	r0, r0, r0, lsl ip
   13240:	andeq	r0, r0, r8, asr #23
   13244:	andeq	r0, r0, r0, lsl #23
   13248:	andeq	r0, r0, r8, lsr fp
   1324c:	andeq	r0, r0, r8, lsr fp
   13250:	andeq	r0, r0, r8, lsr #22
   13254:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13258:	mov	r6, r0
   1325c:	bl	13058 <__assert_fail@plt+0x1dd4>
   13260:	ldr	r8, [pc, #228]	; 1334c <__assert_fail@plt+0x20c8>
   13264:	cmp	r6, #0
   13268:	add	r8, pc, r8
   1326c:	mov	r7, r0
   13270:	beq	13300 <__assert_fail@plt+0x207c>
   13274:	mov	r0, r6
   13278:	bl	11134 <strlen@plt>
   1327c:	mov	r4, r0
   13280:	mov	r9, r0
   13284:	mov	r0, r7
   13288:	bl	11134 <strlen@plt>
   1328c:	mov	r5, r0
   13290:	add	r0, r0, r4
   13294:	add	r0, r0, #9
   13298:	bl	1108c <xmalloc@plt>
   1329c:	mov	r1, r7
   132a0:	mov	r4, r0
   132a4:	bl	110b0 <strcpy@plt>
   132a8:	ldr	r3, [pc, #160]	; 13350 <__assert_fail@plt+0x20cc>
   132ac:	add	r2, r4, r5
   132b0:	add	r3, pc, r3
   132b4:	add	ip, r5, #8
   132b8:	ldm	r3!, {r0, r1}
   132bc:	ldrb	r3, [r3]
   132c0:	str	r0, [r4, r5]
   132c4:	str	r1, [r2, #4]
   132c8:	add	r0, r4, ip
   132cc:	mov	r1, r6
   132d0:	strb	r3, [r2, #8]
   132d4:	bl	110b0 <strcpy@plt>
   132d8:	mov	r1, r9
   132dc:	mov	r0, r4
   132e0:	bl	110c8 <mkstemps64@plt>
   132e4:	cmn	r0, #1
   132e8:	beq	13314 <__assert_fail@plt+0x2090>
   132ec:	bl	11278 <close@plt>
   132f0:	cmp	r0, #0
   132f4:	bne	13348 <__assert_fail@plt+0x20c4>
   132f8:	mov	r0, r4
   132fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13300:	mov	r9, r6
   13304:	mov	r4, r6
   13308:	ldr	r6, [pc, #68]	; 13354 <__assert_fail@plt+0x20d0>
   1330c:	add	r6, pc, r6
   13310:	b	13284 <__assert_fail@plt+0x2000>
   13314:	ldr	r3, [pc, #60]	; 13358 <__assert_fail@plt+0x20d4>
   13318:	ldr	r3, [r8, r3]
   1331c:	ldr	r4, [r3]
   13320:	bl	11170 <__errno_location@plt>
   13324:	ldr	r0, [r0]
   13328:	bl	110f8 <strerror@plt>
   1332c:	ldr	r1, [pc, #40]	; 1335c <__assert_fail@plt+0x20d8>
   13330:	mov	r2, r7
   13334:	add	r1, pc, r1
   13338:	mov	r3, r0
   1333c:	mov	r0, r4
   13340:	bl	11158 <fprintf@plt>
   13344:	bl	11260 <abort@plt>
   13348:	bl	11260 <abort@plt>
   1334c:	muleq	r1, r0, sp
   13350:	muleq	r0, r4, sl
   13354:	andeq	r0, r0, r0, asr r4
   13358:	andeq	r0, r0, r0, lsl r1
   1335c:	andeq	r0, r0, ip, lsl sl
   13360:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13364:	mov	r7, r0
   13368:	ldr	r6, [pc, #72]	; 133b8 <__assert_fail@plt+0x2134>
   1336c:	ldr	r5, [pc, #72]	; 133bc <__assert_fail@plt+0x2138>
   13370:	add	r6, pc, r6
   13374:	add	r5, pc, r5
   13378:	sub	r6, r6, r5
   1337c:	mov	r8, r1
   13380:	mov	r9, r2
   13384:	bl	10f70 <cplus_demangle_name_to_style@plt-0x20>
   13388:	asrs	r6, r6, #2
   1338c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13390:	mov	r4, #0
   13394:	add	r4, r4, #1
   13398:	ldr	r3, [r5], #4
   1339c:	mov	r2, r9
   133a0:	mov	r1, r8
   133a4:	mov	r0, r7
   133a8:	blx	r3
   133ac:	cmp	r6, r4
   133b0:	bne	13394 <__assert_fail@plt+0x2110>
   133b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133b8:	andeq	r1, r1, r8, ror #17
   133bc:	andeq	r1, r1, r0, ror #17
   133c0:	bx	lr

Disassembly of section .fini:

000133c4 <.fini>:
   133c4:	push	{r3, lr}
   133c8:	pop	{r3, pc}
