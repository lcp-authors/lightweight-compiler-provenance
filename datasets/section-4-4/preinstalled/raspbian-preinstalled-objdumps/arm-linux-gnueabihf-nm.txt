
raspbian-preinstalled/arm-linux-gnueabihf-nm:     file format elf32-littlearm


Disassembly of section .init:

000112e8 <.init>:
   112e8:	push	{r3, lr}
   112ec:	bl	11e3c <__assert_fail@plt+0x738>
   112f0:	pop	{r3, pc}

Disassembly of section .plt:

000112f4 <strstr@plt-0x14>:
   112f4:	push	{lr}		; (str lr, [sp, #-4]!)
   112f8:	ldr	lr, [pc, #4]	; 11304 <strstr@plt-0x4>
   112fc:	add	lr, pc, lr
   11300:	ldr	pc, [lr, #8]!
   11304:	strdeq	r5, [r1], -ip

00011308 <strstr@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3324]!	; 0xcfc

00011314 <raise@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011320 <cplus_demangle_name_to_style@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3308]!	; 0xcec

0001132c <bfd_scan_vma@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3300]!	; 0xce4

00011338 <strcmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3292]!	; 0xcdc

00011344 <strtol@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011350 <printf@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3276]!	; 0xccc

0001135c <bfd_plugin_set_plugin@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3268]!	; 0xcc4

00011368 <fflush@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3260]!	; 0xcbc

00011374 <bfd_arch_list@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3252]!	; 0xcb4

00011380 <memmove@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3244]!	; 0xcac

0001138c <bfd_set_default_target@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3236]!	; 0xca4

00011398 <bfd_is_undefined_symclass@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113a4 <free@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3220]!	; 0xc94

000113b0 <ferror@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3212]!	; 0xc8c

000113bc <cplus_demangle_set_style@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3204]!	; 0xc84

000113c8 <memcpy@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3196]!	; 0xc7c

000113d4 <bfd_openr@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #86016	; 0x15000
   113dc:	ldr	pc, [ip, #3188]!	; 0xc74

000113e0 <ftell@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #86016	; 0x15000
   113e8:	ldr	pc, [ip, #3180]!	; 0xc6c

000113ec <ctime@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #86016	; 0x15000
   113f4:	ldr	pc, [ip, #3172]!	; 0xc64

000113f8 <dcgettext@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #86016	; 0x15000
   11400:	ldr	pc, [ip, #3164]!	; 0xc5c

00011404 <unlink@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #86016	; 0x15000
   1140c:	ldr	pc, [ip, #3156]!	; 0xc54

00011410 <xrealloc@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #86016	; 0x15000
   11418:	ldr	pc, [ip, #3148]!	; 0xc4c

0001141c <textdomain@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #86016	; 0x15000
   11424:	ldr	pc, [ip, #3140]!	; 0xc44

00011428 <bfd_target_list@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #86016	; 0x15000
   11430:	ldr	pc, [ip, #3132]!	; 0xc3c

00011434 <bfd_get_error@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #86016	; 0x15000
   1143c:	ldr	pc, [ip, #3124]!	; 0xc34

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #86016	; 0x15000
   11448:	ldr	pc, [ip, #3116]!	; 0xc2c

0001144c <xmalloc@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #86016	; 0x15000
   11454:	ldr	pc, [ip, #3108]!	; 0xc24

00011458 <xmalloc_set_program_name@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #86016	; 0x15000
   11460:	ldr	pc, [ip, #3100]!	; 0xc1c

00011464 <xstrdup@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #86016	; 0x15000
   1146c:	ldr	pc, [ip, #3092]!	; 0xc14

00011470 <strcpy@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #86016	; 0x15000
   11478:	ldr	pc, [ip, #3084]!	; 0xc0c

0001147c <fread@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #86016	; 0x15000
   11484:	ldr	pc, [ip, #3076]!	; 0xc04

00011488 <bfd_get_arch_size@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #86016	; 0x15000
   11490:	ldr	pc, [ip, #3068]!	; 0xbfc

00011494 <bfd_init@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #86016	; 0x15000
   1149c:	ldr	pc, [ip, #3060]!	; 0xbf4

000114a0 <mkstemps64@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #86016	; 0x15000
   114a8:	ldr	pc, [ip, #3052]!	; 0xbec

000114ac <strcoll@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #86016	; 0x15000
   114b4:	ldr	pc, [ip, #3044]!	; 0xbe4

000114b8 <getenv@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #86016	; 0x15000
   114c0:	ldr	pc, [ip, #3036]!	; 0xbdc

000114c4 <mkstemp64@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #86016	; 0x15000
   114cc:	ldr	pc, [ip, #3028]!	; 0xbd4

000114d0 <__libc_start_main@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #86016	; 0x15000
   114d8:	ldr	pc, [ip, #3020]!	; 0xbcc

000114dc <strerror@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #86016	; 0x15000
   114e4:	ldr	pc, [ip, #3012]!	; 0xbc4

000114e8 <__gmon_start__@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #86016	; 0x15000
   114f0:	ldr	pc, [ip, #3004]!	; 0xbbc

000114f4 <bfd_set_format@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #86016	; 0x15000
   114fc:	ldr	pc, [ip, #2996]!	; 0xbb4

00011500 <getopt_long@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #86016	; 0x15000
   11508:	ldr	pc, [ip, #2988]!	; 0xbac

0001150c <exit@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #86016	; 0x15000
   11514:	ldr	pc, [ip, #2980]!	; 0xba4

00011518 <strlen@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #86016	; 0x15000
   11520:	ldr	pc, [ip, #2972]!	; 0xb9c

00011524 <bfd_close_all_done@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #86016	; 0x15000
   1152c:	ldr	pc, [ip, #2964]!	; 0xb94

00011530 <bfd_plugin_set_program_name@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #86016	; 0x15000
   11538:	ldr	pc, [ip, #2956]!	; 0xb8c

0001153c <fprintf@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #86016	; 0x15000
   11544:	ldr	pc, [ip, #2948]!	; 0xb84

00011548 <bfd_printable_arch_mach@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #86016	; 0x15000
   11550:	ldr	pc, [ip, #2940]!	; 0xb7c

00011554 <__errno_location@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #86016	; 0x15000
   1155c:	ldr	pc, [ip, #2932]!	; 0xb74

00011560 <bfd_iterate_over_targets@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #86016	; 0x15000
   11568:	ldr	pc, [ip, #2924]!	; 0xb6c

0001156c <memset@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #86016	; 0x15000
   11574:	ldr	pc, [ip, #2916]!	; 0xb64

00011578 <putchar@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #86016	; 0x15000
   11580:	ldr	pc, [ip, #2908]!	; 0xb5c

00011584 <asprintf@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #86016	; 0x15000
   1158c:	ldr	pc, [ip, #2900]!	; 0xb54

00011590 <access@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #86016	; 0x15000
   11598:	ldr	pc, [ip, #2892]!	; 0xb4c

0001159c <fclose@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #86016	; 0x15000
   115a4:	ldr	pc, [ip, #2884]!	; 0xb44

000115a8 <bfd_openw@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #86016	; 0x15000
   115b0:	ldr	pc, [ip, #2876]!	; 0xb3c

000115b4 <bfd_set_error_program_name@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #86016	; 0x15000
   115bc:	ldr	pc, [ip, #2868]!	; 0xb34

000115c0 <bfd_demangle@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #86016	; 0x15000
   115c8:	ldr	pc, [ip, #2860]!	; 0xb2c

000115cc <setlocale@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #86016	; 0x15000
   115d4:	ldr	pc, [ip, #2852]!	; 0xb24

000115d8 <strrchr@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #86016	; 0x15000
   115e0:	ldr	pc, [ip, #2844]!	; 0xb1c

000115e4 <vfprintf@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #86016	; 0x15000
   115ec:	ldr	pc, [ip, #2836]!	; 0xb14

000115f0 <xstrerror@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #86016	; 0x15000
   115f8:	ldr	pc, [ip, #2828]!	; 0xb0c

000115fc <fputc@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #86016	; 0x15000
   11604:	ldr	pc, [ip, #2820]!	; 0xb04

00011608 <xexit@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #86016	; 0x15000
   11610:	ldr	pc, [ip, #2812]!	; 0xafc

00011614 <bfd_close@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #86016	; 0x15000
   1161c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011620 <sprintf@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #86016	; 0x15000
   11628:	ldr	pc, [ip, #2796]!	; 0xaec

0001162c <mkdtemp@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #86016	; 0x15000
   11634:	ldr	pc, [ip, #2788]!	; 0xae4

00011638 <putc@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #86016	; 0x15000
   11640:	ldr	pc, [ip, #2780]!	; 0xadc

00011644 <bfd_check_format_matches@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #86016	; 0x15000
   1164c:	ldr	pc, [ip, #2772]!	; 0xad4

00011650 <fopen64@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #86016	; 0x15000
   11658:	ldr	pc, [ip, #2764]!	; 0xacc

0001165c <bfd_errmsg@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #86016	; 0x15000
   11664:	ldr	pc, [ip, #2756]!	; 0xac4

00011668 <qsort@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #86016	; 0x15000
   11670:	ldr	pc, [ip, #2748]!	; 0xabc

00011674 <bfd_canonicalize_reloc@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #86016	; 0x15000
   1167c:	ldr	pc, [ip, #2740]!	; 0xab4

00011680 <bindtextdomain@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #86016	; 0x15000
   11688:	ldr	pc, [ip, #2732]!	; 0xaac

0001168c <bfd_check_format@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #86016	; 0x15000
   11694:	ldr	pc, [ip, #2724]!	; 0xaa4

00011698 <bfd_openr_next_archived_file@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #86016	; 0x15000
   116a0:	ldr	pc, [ip, #2716]!	; 0xa9c

000116a4 <bfd_get_reloc_upper_bound@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #86016	; 0x15000
   116ac:	ldr	pc, [ip, #2708]!	; 0xa94

000116b0 <bfd_map_over_sections@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #86016	; 0x15000
   116b8:	ldr	pc, [ip, #2700]!	; 0xa8c

000116bc <fseek@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #86016	; 0x15000
   116c4:	ldr	pc, [ip, #2692]!	; 0xa84

000116c8 <__xstat64@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #86016	; 0x15000
   116d0:	ldr	pc, [ip, #2684]!	; 0xa7c

000116d4 <fputs@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #86016	; 0x15000
   116dc:	ldr	pc, [ip, #2676]!	; 0xa74

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #86016	; 0x15000
   116e8:	ldr	pc, [ip, #2668]!	; 0xa6c

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #86016	; 0x15000
   116f4:	ldr	pc, [ip, #2660]!	; 0xa64

000116f8 <bfd_get_next_mapent@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #86016	; 0x15000
   11700:	ldr	pc, [ip, #2652]!	; 0xa5c

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #86016	; 0x15000
   1170c:	ldr	pc, [ip, #2644]!	; 0xa54

Disassembly of section .text:

00011710 <.text>:
   11710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11714:	sub	sp, sp, #16
   11718:	ldr	r5, [pc, #1676]	; 11dac <__assert_fail@plt+0x6a8>
   1171c:	str	r0, [sp, #12]
   11720:	str	r1, [sp, #8]
   11724:	mov	r0, #5
   11728:	ldr	r1, [pc, #1664]	; 11db0 <__assert_fail@plt+0x6ac>
   1172c:	bl	115cc <setlocale@plt>
   11730:	ldr	r1, [pc, #1656]	; 11db0 <__assert_fail@plt+0x6ac>
   11734:	mov	r0, #0
   11738:	bl	115cc <setlocale@plt>
   1173c:	ldr	r1, [pc, #1644]	; 11db0 <__assert_fail@plt+0x6ac>
   11740:	mov	r0, #3
   11744:	bl	115cc <setlocale@plt>
   11748:	ldr	r1, [pc, #1636]	; 11db4 <__assert_fail@plt+0x6b0>
   1174c:	ldr	r0, [pc, #1636]	; 11db8 <__assert_fail@plt+0x6b4>
   11750:	bl	11680 <bindtextdomain@plt>
   11754:	ldr	r0, [pc, #1628]	; 11db8 <__assert_fail@plt+0x6b4>
   11758:	bl	1141c <textdomain@plt>
   1175c:	ldr	r3, [sp, #8]
   11760:	ldr	r4, [pc, #1620]	; 11dbc <__assert_fail@plt+0x6b8>
   11764:	ldr	r7, [pc, #1620]	; 11dc0 <__assert_fail@plt+0x6bc>
   11768:	ldr	r3, [r3]
   1176c:	ldr	r6, [pc, #1616]	; 11dc4 <__assert_fail@plt+0x6c0>
   11770:	mov	r0, r3
   11774:	str	r3, [r5]
   11778:	bl	11458 <xmalloc_set_program_name@plt>
   1177c:	ldr	r0, [r5]
   11780:	bl	115b4 <bfd_set_error_program_name@plt>
   11784:	ldr	r0, [r5]
   11788:	bl	11530 <bfd_plugin_set_program_name@plt>
   1178c:	add	r1, sp, #8
   11790:	add	r0, sp, #12
   11794:	bl	1517c <__assert_fail@plt+0x3a78>
   11798:	bl	11494 <bfd_init@plt>
   1179c:	bl	141f8 <__assert_fail@plt+0x2af4>
   117a0:	ldr	r5, [pc, #1568]	; 11dc8 <__assert_fail@plt+0x6c4>
   117a4:	ldr	r9, [pc, #1568]	; 11dcc <__assert_fail@plt+0x6c8>
   117a8:	sub	r8, r4, #96	; 0x60
   117ac:	mov	r3, #0
   117b0:	str	r3, [sp]
   117b4:	mov	r2, r5
   117b8:	mov	r3, r4
   117bc:	ldr	r1, [sp, #8]
   117c0:	ldr	r0, [sp, #12]
   117c4:	bl	11500 <getopt_long@plt>
   117c8:	cmn	r0, #1
   117cc:	beq	11c9c <__assert_fail@plt+0x598>
   117d0:	cmp	r0, #202	; 0xca
   117d4:	ldrls	pc, [pc, r0, lsl #2]
   117d8:	b	11d3c <__assert_fail@plt+0x638>
   117dc:	andeq	r1, r1, ip, lsr #15
   117e0:	andeq	r1, r1, ip, lsr sp
   117e4:	andeq	r1, r1, ip, lsr sp
   117e8:	andeq	r1, r1, ip, lsr sp
   117ec:	andeq	r1, r1, ip, lsr sp
   117f0:	andeq	r1, r1, ip, lsr sp
   117f4:	andeq	r1, r1, ip, lsr sp
   117f8:	andeq	r1, r1, ip, lsr sp
   117fc:	andeq	r1, r1, ip, lsr sp
   11800:	andeq	r1, r1, ip, lsr sp
   11804:	andeq	r1, r1, ip, lsr sp
   11808:	andeq	r1, r1, ip, lsr sp
   1180c:	andeq	r1, r1, ip, lsr sp
   11810:	andeq	r1, r1, ip, lsr sp
   11814:	andeq	r1, r1, ip, lsr sp
   11818:	andeq	r1, r1, ip, lsr sp
   1181c:	andeq	r1, r1, ip, lsr sp
   11820:	andeq	r1, r1, ip, lsr sp
   11824:	andeq	r1, r1, ip, lsr sp
   11828:	andeq	r1, r1, ip, lsr sp
   1182c:	andeq	r1, r1, ip, lsr sp
   11830:	andeq	r1, r1, ip, lsr sp
   11834:	andeq	r1, r1, ip, lsr sp
   11838:	andeq	r1, r1, ip, lsr sp
   1183c:	andeq	r1, r1, ip, lsr sp
   11840:	andeq	r1, r1, ip, lsr sp
   11844:	andeq	r1, r1, ip, lsr sp
   11848:	andeq	r1, r1, ip, lsr sp
   1184c:	andeq	r1, r1, ip, lsr sp
   11850:	andeq	r1, r1, ip, lsr sp
   11854:	andeq	r1, r1, ip, lsr sp
   11858:	andeq	r1, r1, ip, lsr sp
   1185c:	andeq	r1, r1, ip, lsr sp
   11860:	andeq	r1, r1, ip, lsr sp
   11864:	andeq	r1, r1, ip, lsr sp
   11868:	andeq	r1, r1, ip, lsr sp
   1186c:	andeq	r1, r1, ip, lsr sp
   11870:	andeq	r1, r1, ip, lsr sp
   11874:	andeq	r1, r1, ip, lsr sp
   11878:	andeq	r1, r1, ip, lsr sp
   1187c:	andeq	r1, r1, ip, lsr sp
   11880:	andeq	r1, r1, ip, lsr sp
   11884:	andeq	r1, r1, ip, lsr sp
   11888:	andeq	r1, r1, ip, lsr sp
   1188c:	andeq	r1, r1, ip, lsr sp
   11890:	andeq	r1, r1, ip, lsr sp
   11894:	andeq	r1, r1, ip, lsr sp
   11898:	andeq	r1, r1, ip, lsr sp
   1189c:	andeq	r1, r1, ip, lsr sp
   118a0:	andeq	r1, r1, ip, lsr sp
   118a4:	andeq	r1, r1, ip, lsr sp
   118a8:	andeq	r1, r1, ip, lsr sp
   118ac:	andeq	r1, r1, ip, lsr sp
   118b0:	andeq	r1, r1, ip, lsr sp
   118b4:	andeq	r1, r1, ip, lsr sp
   118b8:	andeq	r1, r1, ip, lsr sp
   118bc:	andeq	r1, r1, ip, lsr sp
   118c0:	andeq	r1, r1, ip, lsr sp
   118c4:	andeq	r1, r1, ip, lsr sp
   118c8:	andeq	r1, r1, ip, lsr sp
   118cc:	andeq	r1, r1, ip, lsr sp
   118d0:	andeq	r1, r1, ip, lsr sp
   118d4:	andeq	r1, r1, ip, lsr sp
   118d8:	andeq	r1, r1, ip, lsr sp
   118dc:	andeq	r1, r1, ip, lsr sp
   118e0:	andeq	r1, r1, r4, ror #24
   118e4:	andeq	r1, r1, r8, asr ip
   118e8:	andeq	r1, r1, r0, lsr ip
   118ec:	andeq	r1, r1, r4, lsr #24
   118f0:	andeq	r1, r1, ip, lsr sp
   118f4:	andeq	r1, r1, ip, lsr sp
   118f8:	andeq	r1, r1, ip, lsr sp
   118fc:	andeq	r1, r1, ip, lsr #26
   11900:	andeq	r1, r1, ip, lsr sp
   11904:	andeq	r1, r1, ip, lsr sp
   11908:	andeq	r1, r1, ip, lsr sp
   1190c:	andeq	r1, r1, ip, lsr sp
   11910:	andeq	r1, r1, ip, lsr sp
   11914:	andeq	r1, r1, ip, lsr sp
   11918:	andeq	r1, r1, ip, lsr sp
   1191c:	andeq	r1, r1, r8, lsl ip
   11920:	andeq	r1, r1, ip, lsr sp
   11924:	andeq	r1, r1, ip, lsr sp
   11928:	andeq	r1, r1, ip, lsl #24
   1192c:	andeq	r1, r1, ip, lsr sp
   11930:	andeq	r1, r1, ip, lsr sp
   11934:	andeq	r1, r1, r0, lsl #24
   11938:	andeq	r1, r1, ip, lsr sp
   1193c:	ldrdeq	r1, [r1], -r8
   11940:	andeq	r1, r1, ip, lsr sp
   11944:	andeq	r1, r1, ip, lsr sp
   11948:	andeq	r1, r1, ip, lsr sp
   1194c:	andeq	r1, r1, ip, lsr sp
   11950:	andeq	r1, r1, ip, lsr sp
   11954:	andeq	r1, r1, ip, lsr sp
   11958:	andeq	r1, r1, ip, lsr sp
   1195c:	andeq	r1, r1, ip, lsr sp
   11960:	andeq	r1, r1, ip, asr #23
   11964:	andeq	r1, r1, ip, lsr sp
   11968:	andeq	r1, r1, ip, lsr sp
   1196c:	andeq	r1, r1, ip, lsr sp
   11970:	andeq	r1, r1, ip, lsr #15
   11974:	andeq	r1, r1, r0, asr #23
   11978:			; <UNDEFINED> instruction: 0x00011bb4
   1197c:	andeq	r1, r1, ip, lsr #26
   11980:	andeq	r1, r1, ip, lsr sp
   11984:	andeq	r1, r1, ip, lsr sp
   11988:	andeq	r1, r1, ip, lsr sp
   1198c:	andeq	r1, r1, r8, lsr #23
   11990:	andeq	r1, r1, ip, lsr sp
   11994:	muleq	r1, r0, fp
   11998:	andeq	r1, r1, r4, ror #24
   1199c:	andeq	r1, r1, ip, ror fp
   119a0:	andeq	r1, r1, ip, lsr sp
   119a4:	andeq	r1, r1, r0, ror fp
   119a8:	andeq	r1, r1, r4, ror #22
   119ac:	andeq	r1, r1, ip, lsr #22
   119b0:	andeq	r1, r1, r0, lsr #22
   119b4:	muleq	r1, r0, fp
   119b8:	andeq	r1, r1, ip, lsr sp
   119bc:	andeq	r1, r1, ip, lsr sp
   119c0:	andeq	r1, r1, ip, lsr sp
   119c4:	andeq	r1, r1, ip, lsr sp
   119c8:	andeq	r1, r1, ip, lsr sp
   119cc:	andeq	r1, r1, ip, lsr sp
   119d0:	andeq	r1, r1, ip, lsr sp
   119d4:	andeq	r1, r1, ip, lsr sp
   119d8:	andeq	r1, r1, ip, lsr sp
   119dc:	andeq	r1, r1, ip, lsr sp
   119e0:	andeq	r1, r1, ip, lsr sp
   119e4:	andeq	r1, r1, ip, lsr sp
   119e8:	andeq	r1, r1, ip, lsr sp
   119ec:	andeq	r1, r1, ip, lsr sp
   119f0:	andeq	r1, r1, ip, lsr sp
   119f4:	andeq	r1, r1, ip, lsr sp
   119f8:	andeq	r1, r1, ip, lsr sp
   119fc:	andeq	r1, r1, ip, lsr sp
   11a00:	andeq	r1, r1, ip, lsr sp
   11a04:	andeq	r1, r1, ip, lsr sp
   11a08:	andeq	r1, r1, ip, lsr sp
   11a0c:	andeq	r1, r1, ip, lsr sp
   11a10:	andeq	r1, r1, ip, lsr sp
   11a14:	andeq	r1, r1, ip, lsr sp
   11a18:	andeq	r1, r1, ip, lsr sp
   11a1c:	andeq	r1, r1, ip, lsr sp
   11a20:	andeq	r1, r1, ip, lsr sp
   11a24:	andeq	r1, r1, ip, lsr sp
   11a28:	andeq	r1, r1, ip, lsr sp
   11a2c:	andeq	r1, r1, ip, lsr sp
   11a30:	andeq	r1, r1, ip, lsr sp
   11a34:	andeq	r1, r1, ip, lsr sp
   11a38:	andeq	r1, r1, ip, lsr sp
   11a3c:	andeq	r1, r1, ip, lsr sp
   11a40:	andeq	r1, r1, ip, lsr sp
   11a44:	andeq	r1, r1, ip, lsr sp
   11a48:	andeq	r1, r1, ip, lsr sp
   11a4c:	andeq	r1, r1, ip, lsr sp
   11a50:	andeq	r1, r1, ip, lsr sp
   11a54:	andeq	r1, r1, ip, lsr sp
   11a58:	andeq	r1, r1, ip, lsr sp
   11a5c:	andeq	r1, r1, ip, lsr sp
   11a60:	andeq	r1, r1, ip, lsr sp
   11a64:	andeq	r1, r1, ip, lsr sp
   11a68:	andeq	r1, r1, ip, lsr sp
   11a6c:	andeq	r1, r1, ip, lsr sp
   11a70:	andeq	r1, r1, ip, lsr sp
   11a74:	andeq	r1, r1, ip, lsr sp
   11a78:	andeq	r1, r1, ip, lsr sp
   11a7c:	andeq	r1, r1, ip, lsr sp
   11a80:	andeq	r1, r1, ip, lsr sp
   11a84:	andeq	r1, r1, ip, lsr sp
   11a88:	andeq	r1, r1, ip, lsr sp
   11a8c:	andeq	r1, r1, ip, lsr sp
   11a90:	andeq	r1, r1, ip, lsr sp
   11a94:	andeq	r1, r1, ip, lsr sp
   11a98:	andeq	r1, r1, ip, lsr sp
   11a9c:	andeq	r1, r1, ip, lsr sp
   11aa0:	andeq	r1, r1, ip, lsr sp
   11aa4:	andeq	r1, r1, ip, lsr sp
   11aa8:	andeq	r1, r1, ip, lsr sp
   11aac:	andeq	r1, r1, ip, lsr sp
   11ab0:	andeq	r1, r1, ip, lsr sp
   11ab4:	andeq	r1, r1, ip, lsr sp
   11ab8:	andeq	r1, r1, ip, lsr sp
   11abc:	andeq	r1, r1, ip, lsr sp
   11ac0:	andeq	r1, r1, ip, lsr sp
   11ac4:	andeq	r1, r1, ip, lsr sp
   11ac8:	andeq	r1, r1, ip, lsr sp
   11acc:	andeq	r1, r1, ip, lsr sp
   11ad0:	andeq	r1, r1, ip, lsr sp
   11ad4:	andeq	r1, r1, ip, lsr sp
   11ad8:	andeq	r1, r1, ip, lsr sp
   11adc:	andeq	r1, r1, ip, lsr sp
   11ae0:	andeq	r1, r1, ip, lsr sp
   11ae4:	andeq	r1, r1, ip, lsr sp
   11ae8:	andeq	r1, r1, ip, lsr sp
   11aec:	andeq	r1, r1, ip, lsr sp
   11af0:	andeq	r1, r1, ip, lsr sp
   11af4:	andeq	r1, r1, ip, lsr sp
   11af8:	andeq	r1, r1, ip, lsr sp
   11afc:	andeq	r1, r1, r4, lsl fp
   11b00:	andeq	r1, r1, r8, lsl #22
   11b04:	andeq	r1, r1, r0, ror ip
   11b08:	ldr	r0, [r7]
   11b0c:	bl	1135c <bfd_plugin_set_plugin@plt>
   11b10:	b	117ac <__assert_fail@plt+0xa8>
   11b14:	ldr	r3, [r7]
   11b18:	str	r3, [r6, #124]	; 0x7c
   11b1c:	b	117ac <__assert_fail@plt+0xa8>
   11b20:	mov	r3, #1
   11b24:	str	r3, [r6, #72]	; 0x48
   11b28:	b	117ac <__assert_fail@plt+0xa8>
   11b2c:	ldr	sl, [r7]
   11b30:	ldrb	r3, [sl]
   11b34:	cmp	r3, #111	; 0x6f
   11b38:	beq	11c88 <__assert_fail@plt+0x584>
   11b3c:	cmp	r3, #120	; 0x78
   11b40:	beq	117ac <__assert_fail@plt+0xa8>
   11b44:	cmp	r3, #100	; 0x64
   11b48:	beq	11c88 <__assert_fail@plt+0x584>
   11b4c:	ldr	r1, [pc, #636]	; 11dd0 <__assert_fail@plt+0x6cc>
   11b50:	mov	r2, #5
   11b54:	mov	r0, #0
   11b58:	bl	113f8 <dcgettext@plt>
   11b5c:	mov	r1, sl
   11b60:	bl	141a0 <__assert_fail@plt+0x2a9c>
   11b64:	mov	r3, #1
   11b68:	str	r3, [r6, #128]	; 0x80
   11b6c:	b	117ac <__assert_fail@plt+0xa8>
   11b70:	mov	r3, #1
   11b74:	str	r3, [r6, #100]	; 0x64
   11b78:	b	117ac <__assert_fail@plt+0xa8>
   11b7c:	mov	r3, #0
   11b80:	mov	r2, #1
   11b84:	str	r3, [r6, #84]	; 0x54
   11b88:	strd	r2, [r6, #92]	; 0x5c
   11b8c:	b	117ac <__assert_fail@plt+0xa8>
   11b90:	mov	r3, #0
   11b94:	mov	r2, #1
   11b98:	str	r3, [r6, #92]	; 0x5c
   11b9c:	str	r3, [r6, #84]	; 0x54
   11ba0:	str	r2, [r6, #96]	; 0x60
   11ba4:	b	117ac <__assert_fail@plt+0xa8>
   11ba8:	mov	r3, #1
   11bac:	str	r3, [r6, #32]
   11bb0:	b	117ac <__assert_fail@plt+0xa8>
   11bb4:	mov	r3, #1
   11bb8:	str	r3, [r6, #76]	; 0x4c
   11bbc:	b	117ac <__assert_fail@plt+0xa8>
   11bc0:	ldr	r0, [r7]
   11bc4:	bl	13234 <__assert_fail@plt+0x1b30>
   11bc8:	b	117ac <__assert_fail@plt+0xa8>
   11bcc:	mov	r3, #1
   11bd0:	str	r3, [r6, #80]	; 0x50
   11bd4:	b	117ac <__assert_fail@plt+0xa8>
   11bd8:	mov	r1, r9
   11bdc:	ldr	r0, [r7]
   11be0:	bl	11338 <strcmp@plt>
   11be4:	cmp	r0, #0
   11be8:	beq	117ac <__assert_fail@plt+0xa8>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #476]	; 11dd4 <__assert_fail@plt+0x6d0>
   11bf4:	mov	r0, #0
   11bf8:	bl	113f8 <dcgettext@plt>
   11bfc:	bl	141a0 <__assert_fail@plt+0x2a9c>
   11c00:	mov	r3, #1
   11c04:	str	r3, [r6, #132]	; 0x84
   11c08:	b	117ac <__assert_fail@plt+0xa8>
   11c0c:	mov	r3, #1
   11c10:	str	r3, [r6, #112]	; 0x70
   11c14:	b	117ac <__assert_fail@plt+0xa8>
   11c18:	ldr	r0, [pc, #440]	; 11dd8 <__assert_fail@plt+0x6d4>
   11c1c:	bl	13234 <__assert_fail@plt+0x1b30>
   11c20:	b	117ac <__assert_fail@plt+0xa8>
   11c24:	mov	r3, #1
   11c28:	str	r3, [r6, #64]	; 0x40
   11c2c:	b	117ac <__assert_fail@plt+0xa8>
   11c30:	ldr	r0, [r7]
   11c34:	mov	r3, #1
   11c38:	cmp	r0, #0
   11c3c:	str	r3, [r6, #8]
   11c40:	beq	117ac <__assert_fail@plt+0xa8>
   11c44:	bl	11320 <cplus_demangle_name_to_style@plt>
   11c48:	cmp	r0, #0
   11c4c:	beq	11d98 <__assert_fail@plt+0x694>
   11c50:	bl	113bc <cplus_demangle_set_style@plt>
   11c54:	b	117ac <__assert_fail@plt+0xa8>
   11c58:	ldr	r0, [pc, #380]	; 11ddc <__assert_fail@plt+0x6d8>
   11c5c:	bl	13234 <__assert_fail@plt+0x1b30>
   11c60:	b	117ac <__assert_fail@plt+0xa8>
   11c64:	mov	r3, #1
   11c68:	str	r3, [r6]
   11c6c:	b	117ac <__assert_fail@plt+0xa8>
   11c70:	mov	r3, #0
   11c74:	mov	r2, #1
   11c78:	str	r3, [r6, #92]	; 0x5c
   11c7c:	str	r3, [r6, #96]	; 0x60
   11c80:	str	r2, [r6, #84]	; 0x54
   11c84:	b	117ac <__assert_fail@plt+0xa8>
   11c88:	strb	r3, [r8, #68]	; 0x44
   11c8c:	strb	r3, [r8, #78]	; 0x4e
   11c90:	strb	r3, [r8, #91]	; 0x5b
   11c94:	strb	r3, [r8, #83]	; 0x53
   11c98:	b	117ac <__assert_fail@plt+0xa8>
   11c9c:	ldr	r4, [pc, #288]	; 11dc4 <__assert_fail@plt+0x6c0>
   11ca0:	ldr	r3, [r4, #132]	; 0x84
   11ca4:	cmp	r3, #0
   11ca8:	bne	11d20 <__assert_fail@plt+0x61c>
   11cac:	ldr	r3, [r4, #84]	; 0x54
   11cb0:	cmp	r3, #0
   11cb4:	bne	11ce4 <__assert_fail@plt+0x5e0>
   11cb8:	ldr	r5, [pc, #288]	; 11de0 <__assert_fail@plt+0x6dc>
   11cbc:	ldr	r3, [sp, #12]
   11cc0:	ldr	r2, [r5]
   11cc4:	cmp	r2, r3
   11cc8:	bne	11d4c <__assert_fail@plt+0x648>
   11ccc:	ldr	r0, [pc, #272]	; 11de4 <__assert_fail@plt+0x6e0>
   11cd0:	bl	13b10 <__assert_fail@plt+0x240c>
   11cd4:	clz	r0, r0
   11cd8:	lsr	r0, r0, #5
   11cdc:	add	sp, sp, #16
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ce4:	ldr	r3, [r4, #72]	; 0x48
   11ce8:	cmp	r3, #0
   11cec:	beq	11cb8 <__assert_fail@plt+0x5b4>
   11cf0:	mov	r2, #5
   11cf4:	ldr	r1, [pc, #236]	; 11de8 <__assert_fail@plt+0x6e4>
   11cf8:	mov	r0, #0
   11cfc:	bl	113f8 <dcgettext@plt>
   11d00:	bl	141c8 <__assert_fail@plt+0x2ac4>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #220]	; 11dec <__assert_fail@plt+0x6e8>
   11d0c:	mov	r0, #0
   11d10:	bl	113f8 <dcgettext@plt>
   11d14:	bl	141c8 <__assert_fail@plt+0x2ac4>
   11d18:	mov	r0, #0
   11d1c:	b	11cdc <__assert_fail@plt+0x5d8>
   11d20:	ldr	r0, [pc, #200]	; 11df0 <__assert_fail@plt+0x6ec>
   11d24:	bl	14c28 <__assert_fail@plt+0x3524>
   11d28:	b	11cac <__assert_fail@plt+0x5a8>
   11d2c:	ldr	r3, [pc, #192]	; 11df4 <__assert_fail@plt+0x6f0>
   11d30:	mov	r1, #0
   11d34:	ldr	r0, [r3]
   11d38:	bl	11fc8 <__assert_fail@plt+0x8c4>
   11d3c:	ldr	r3, [pc, #180]	; 11df8 <__assert_fail@plt+0x6f4>
   11d40:	mov	r1, #1
   11d44:	ldr	r0, [r3]
   11d48:	bl	11fc8 <__assert_fail@plt+0x8c4>
   11d4c:	sub	r2, r3, r2
   11d50:	cmp	r2, #1
   11d54:	movgt	r2, #1
   11d58:	strgt	r2, [r4, #4]
   11d5c:	mov	r4, #0
   11d60:	b	11d84 <__assert_fail@plt+0x680>
   11d64:	ldr	r3, [sp, #8]
   11d68:	add	r1, r2, #1
   11d6c:	str	r1, [r5]
   11d70:	ldr	r0, [r3, r2, lsl #2]
   11d74:	bl	13b10 <__assert_fail@plt+0x240c>
   11d78:	ldr	r3, [sp, #12]
   11d7c:	cmp	r0, #0
   11d80:	addeq	r4, r4, #1
   11d84:	ldr	r2, [r5]
   11d88:	cmp	r2, r3
   11d8c:	blt	11d64 <__assert_fail@plt+0x660>
   11d90:	mov	r0, r4
   11d94:	bl	1150c <exit@plt>
   11d98:	ldr	r1, [pc, #92]	; 11dfc <__assert_fail@plt+0x6f8>
   11d9c:	mov	r2, #5
   11da0:	bl	113f8 <dcgettext@plt>
   11da4:	ldr	r1, [r7]
   11da8:	bl	141a0 <__assert_fail@plt+0x2a9c>
   11dac:	ldrdeq	r7, [r2], -ip
   11db0:	andeq	r6, r1, r0, lsr r5
   11db4:	andeq	r6, r1, ip, ror #13
   11db8:	andeq	r6, r1, r0, lsl #14
   11dbc:	ldrdeq	r7, [r2], -r8
   11dc0:	andeq	r7, r2, r0, asr #12
   11dc4:	andeq	r7, r2, r8, asr #12
   11dc8:	andeq	r6, r1, r0, ror r7
   11dcc:	andeq	r6, r1, ip, asr #14
   11dd0:	andeq	r6, r1, r8, lsr r7
   11dd4:	andeq	r6, r1, r4, asr r7
   11dd8:	andeq	r6, r1, r0, lsr r7
   11ddc:	andeq	r6, r1, ip, lsl #14
   11de0:	andeq	r7, r2, r8, lsl #7
   11de4:	andeq	r6, r1, ip, lsl #16
   11de8:	muleq	r1, r0, r7
   11dec:	andeq	r6, r1, ip, asr #15
   11df0:	andeq	r6, r1, ip, lsl #15
   11df4:	andeq	r7, r2, r8, lsr r6
   11df8:	muleq	r2, r0, r3
   11dfc:	andeq	r6, r1, r0, lsl r7
   11e00:	mov	fp, #0
   11e04:	mov	lr, #0
   11e08:	pop	{r1}		; (ldr r1, [sp], #4)
   11e0c:	mov	r2, sp
   11e10:	push	{r2}		; (str r2, [sp, #-4]!)
   11e14:	push	{r0}		; (str r0, [sp, #-4]!)
   11e18:	ldr	ip, [pc, #16]	; 11e30 <__assert_fail@plt+0x72c>
   11e1c:	push	{ip}		; (str ip, [sp, #-4]!)
   11e20:	ldr	r0, [pc, #12]	; 11e34 <__assert_fail@plt+0x730>
   11e24:	ldr	r3, [pc, #12]	; 11e38 <__assert_fail@plt+0x734>
   11e28:	bl	114d0 <__libc_start_main@plt>
   11e2c:	bl	116e0 <abort@plt>
   11e30:	andeq	r5, r1, r4, lsr #21
   11e34:	andeq	r1, r1, r0, lsl r7
   11e38:	andeq	r5, r1, r4, asr #20
   11e3c:	ldr	r3, [pc, #20]	; 11e58 <__assert_fail@plt+0x754>
   11e40:	ldr	r2, [pc, #20]	; 11e5c <__assert_fail@plt+0x758>
   11e44:	add	r3, pc, r3
   11e48:	ldr	r2, [r3, r2]
   11e4c:	cmp	r2, #0
   11e50:	bxeq	lr
   11e54:	b	114e8 <__gmon_start__@plt>
   11e58:			; <UNDEFINED> instruction: 0x000151b4
   11e5c:	andeq	r0, r0, ip, ror #2
   11e60:	ldr	r0, [pc, #24]	; 11e80 <__assert_fail@plt+0x77c>
   11e64:	ldr	r3, [pc, #24]	; 11e84 <__assert_fail@plt+0x780>
   11e68:	cmp	r3, r0
   11e6c:	bxeq	lr
   11e70:	ldr	r3, [pc, #16]	; 11e88 <__assert_fail@plt+0x784>
   11e74:	cmp	r3, #0
   11e78:	bxeq	lr
   11e7c:	bx	r3
   11e80:	andeq	r7, r2, r8, lsl #7
   11e84:	andeq	r7, r2, r8, lsl #7
   11e88:	andeq	r0, r0, r0
   11e8c:	ldr	r0, [pc, #36]	; 11eb8 <__assert_fail@plt+0x7b4>
   11e90:	ldr	r1, [pc, #36]	; 11ebc <__assert_fail@plt+0x7b8>
   11e94:	sub	r1, r1, r0
   11e98:	asr	r1, r1, #2
   11e9c:	add	r1, r1, r1, lsr #31
   11ea0:	asrs	r1, r1, #1
   11ea4:	bxeq	lr
   11ea8:	ldr	r3, [pc, #16]	; 11ec0 <__assert_fail@plt+0x7bc>
   11eac:	cmp	r3, #0
   11eb0:	bxeq	lr
   11eb4:	bx	r3
   11eb8:	andeq	r7, r2, r8, lsl #7
   11ebc:	andeq	r7, r2, r8, lsl #7
   11ec0:	andeq	r0, r0, r0
   11ec4:	push	{r4, lr}
   11ec8:	ldr	r4, [pc, #24]	; 11ee8 <__assert_fail@plt+0x7e4>
   11ecc:	ldrb	r3, [r4]
   11ed0:	cmp	r3, #0
   11ed4:	popne	{r4, pc}
   11ed8:	bl	11e60 <__assert_fail@plt+0x75c>
   11edc:	mov	r3, #1
   11ee0:	strb	r3, [r4]
   11ee4:	pop	{r4, pc}
   11ee8:	andeq	r7, r2, r4, asr #12
   11eec:	b	11e8c <__assert_fail@plt+0x788>
   11ef0:	bx	lr
   11ef4:	ldr	r3, [pc, #24]	; 11f14 <__assert_fail@plt+0x810>
   11ef8:	ldr	r3, [r3]
   11efc:	cmp	r3, #0
   11f00:	bxne	lr
   11f04:	mov	r2, r1
   11f08:	mov	r1, r0
   11f0c:	ldr	r0, [pc, #4]	; 11f18 <__assert_fail@plt+0x814>
   11f10:	b	11350 <printf@plt>
   11f14:	andeq	r7, r2, r8, asr #12
   11f18:	andeq	r5, r1, ip, ror #21
   11f1c:	ldr	r3, [pc, #16]	; 11f34 <__assert_fail@plt+0x830>
   11f20:	ldr	r3, [r3]
   11f24:	cmp	r3, #0
   11f28:	bxne	lr
   11f2c:	ldr	r0, [pc, #4]	; 11f38 <__assert_fail@plt+0x834>
   11f30:	b	11350 <printf@plt>
   11f34:	andeq	r7, r2, r8, asr #12
   11f38:	strdeq	r5, [r1], -r8
   11f3c:	ldr	r3, [pc, #20]	; 11f58 <__assert_fail@plt+0x854>
   11f40:	ldr	r3, [r3, #4]
   11f44:	cmp	r3, #0
   11f48:	bxeq	lr
   11f4c:	mov	r1, r0
   11f50:	ldr	r0, [pc, #4]	; 11f5c <__assert_fail@plt+0x858>
   11f54:	b	11350 <printf@plt>
   11f58:	andeq	r7, r2, r8, asr #12
   11f5c:	strdeq	r5, [r1], -r8
   11f60:	ldr	r3, [pc, #92]	; 11fc4 <__assert_fail@plt+0x8c0>
   11f64:	push	{r4, r5, r6, lr}
   11f68:	mov	r5, r0
   11f6c:	ldr	r3, [r3, #8]
   11f70:	mov	r4, r1
   11f74:	cmp	r3, #0
   11f78:	beq	11f88 <__assert_fail@plt+0x884>
   11f7c:	ldrb	r3, [r1]
   11f80:	cmp	r3, #0
   11f84:	bne	11f98 <__assert_fail@plt+0x894>
   11f88:	mov	r1, r4
   11f8c:	mov	r0, r5
   11f90:	pop	{r4, r5, r6, lr}
   11f94:	b	11350 <printf@plt>
   11f98:	mov	r0, r2
   11f9c:	mov	r2, #3
   11fa0:	bl	115c0 <bfd_demangle@plt>
   11fa4:	subs	r6, r0, #0
   11fa8:	beq	11f88 <__assert_fail@plt+0x884>
   11fac:	mov	r0, r5
   11fb0:	mov	r1, r6
   11fb4:	bl	11350 <printf@plt>
   11fb8:	mov	r0, r6
   11fbc:	pop	{r4, r5, r6, lr}
   11fc0:	b	113a4 <free@plt>
   11fc4:	andeq	r7, r2, r8, asr #12
   11fc8:	push	{r4, lr}
   11fcc:	mov	r5, r1
   11fd0:	mov	r4, r0
   11fd4:	mov	r2, #5
   11fd8:	ldr	r1, [pc, #200]	; 120a8 <__assert_fail@plt+0x9a4>
   11fdc:	mov	r0, #0
   11fe0:	bl	113f8 <dcgettext@plt>
   11fe4:	ldr	r6, [pc, #192]	; 120ac <__assert_fail@plt+0x9a8>
   11fe8:	ldr	r2, [r6]
   11fec:	mov	r1, r0
   11ff0:	mov	r0, r4
   11ff4:	bl	1153c <fprintf@plt>
   11ff8:	mov	r2, #5
   11ffc:	ldr	r1, [pc, #172]	; 120b0 <__assert_fail@plt+0x9ac>
   12000:	mov	r0, #0
   12004:	bl	113f8 <dcgettext@plt>
   12008:	mov	r1, r0
   1200c:	mov	r0, r4
   12010:	bl	1153c <fprintf@plt>
   12014:	mov	r2, #5
   12018:	ldr	r1, [pc, #148]	; 120b4 <__assert_fail@plt+0x9b0>
   1201c:	mov	r0, #0
   12020:	bl	113f8 <dcgettext@plt>
   12024:	mov	r1, r0
   12028:	mov	r0, r4
   1202c:	bl	1153c <fprintf@plt>
   12030:	mov	r2, #5
   12034:	ldr	r1, [pc, #124]	; 120b8 <__assert_fail@plt+0x9b4>
   12038:	mov	r0, #0
   1203c:	bl	113f8 <dcgettext@plt>
   12040:	mov	r1, r0
   12044:	mov	r0, r4
   12048:	bl	1153c <fprintf@plt>
   1204c:	mov	r2, #5
   12050:	ldr	r1, [pc, #100]	; 120bc <__assert_fail@plt+0x9b8>
   12054:	mov	r0, #0
   12058:	bl	113f8 <dcgettext@plt>
   1205c:	mov	r1, r0
   12060:	mov	r0, r4
   12064:	bl	1153c <fprintf@plt>
   12068:	mov	r1, r4
   1206c:	ldr	r0, [r6]
   12070:	bl	142c8 <__assert_fail@plt+0x2bc4>
   12074:	cmp	r5, #0
   12078:	beq	12084 <__assert_fail@plt+0x980>
   1207c:	mov	r0, r5
   12080:	bl	1150c <exit@plt>
   12084:	mov	r2, #5
   12088:	ldr	r1, [pc, #48]	; 120c0 <__assert_fail@plt+0x9bc>
   1208c:	mov	r0, r5
   12090:	bl	113f8 <dcgettext@plt>
   12094:	ldr	r2, [pc, #40]	; 120c4 <__assert_fail@plt+0x9c0>
   12098:	mov	r1, r0
   1209c:	mov	r0, r4
   120a0:	bl	1153c <fprintf@plt>
   120a4:	b	1207c <__assert_fail@plt+0x978>
   120a8:	andeq	r5, r1, r0, lsl #22
   120ac:	ldrdeq	r7, [r2], -ip
   120b0:	andeq	r5, r1, r4, lsr #22
   120b4:	andeq	r5, r1, r4, asr fp
   120b8:	andeq	r6, r1, ip, asr #32
   120bc:	andeq	r6, r1, r0, lsl #1
   120c0:	andeq	r6, r1, r4, ror r3
   120c4:	andeq	r6, r1, r8, lsl #7
   120c8:	push	{r4, r5, r6, lr}
   120cc:	mov	r6, r1
   120d0:	ldr	r4, [pc, #176]	; 12188 <__assert_fail@plt+0xa84>
   120d4:	mov	r2, r0
   120d8:	ldr	r1, [r4, #12]
   120dc:	ldr	r3, [r4, #16]
   120e0:	mov	r0, r1
   120e4:	ldr	ip, [r1, #4]
   120e8:	ldr	r1, [r4, #20]
   120ec:	ldr	r5, [ip, #316]	; 0x13c
   120f0:	blx	r5
   120f4:	ldr	r3, [r4, #12]
   120f8:	mov	r2, r6
   120fc:	ldr	r1, [r4, #20]
   12100:	ldr	ip, [r3, #4]
   12104:	ldr	r6, [ip, #316]	; 0x13c
   12108:	mov	r5, r0
   1210c:	mov	r0, r3
   12110:	ldr	r3, [r4, #24]
   12114:	blx	r6
   12118:	cmp	r0, #0
   1211c:	cmpne	r5, #0
   12120:	beq	1217c <__assert_fail@plt+0xa78>
   12124:	ldr	r1, [r0, #4]
   12128:	ldr	r0, [r5, #4]
   1212c:	cmp	r1, #0
   12130:	beq	12168 <__assert_fail@plt+0xa64>
   12134:	cmp	r0, #0
   12138:	beq	12174 <__assert_fail@plt+0xa70>
   1213c:	ldrb	r2, [r1]
   12140:	ldrb	r3, [r0]
   12144:	cmp	r2, #0
   12148:	beq	1215c <__assert_fail@plt+0xa58>
   1214c:	cmp	r3, #0
   12150:	beq	12174 <__assert_fail@plt+0xa70>
   12154:	pop	{r4, r5, r6, lr}
   12158:	b	114ac <strcoll@plt>
   1215c:	adds	r0, r3, #0
   12160:	movne	r0, #1
   12164:	pop	{r4, r5, r6, pc}
   12168:	adds	r0, r0, #0
   1216c:	movne	r0, #1
   12170:	pop	{r4, r5, r6, pc}
   12174:	mvn	r0, #0
   12178:	pop	{r4, r5, r6, pc}
   1217c:	ldr	r3, [r4, #12]
   12180:	ldr	r0, [r3]
   12184:	bl	14130 <__assert_fail@plt+0x2a2c>
   12188:	andeq	r7, r2, r8, asr #12
   1218c:	push	{r4, r5, r6, r7, r8, lr}
   12190:	mov	r6, r0
   12194:	ldr	r4, [pc, #192]	; 1225c <__assert_fail@plt+0xb58>
   12198:	mov	r7, r1
   1219c:	ldrd	r2, [r4, #12]
   121a0:	ldr	r1, [r4, #20]
   121a4:	ldr	ip, [r2, #4]
   121a8:	mov	r0, r2
   121ac:	mov	r2, r6
   121b0:	ldr	r5, [ip, #316]	; 0x13c
   121b4:	blx	r5
   121b8:	ldr	r2, [r4, #12]
   121bc:	ldr	r3, [r4, #24]
   121c0:	ldr	r1, [r4, #20]
   121c4:	ldr	ip, [r2, #4]
   121c8:	ldr	r8, [ip, #316]	; 0x13c
   121cc:	mov	r5, r0
   121d0:	mov	r0, r2
   121d4:	mov	r2, r7
   121d8:	blx	r8
   121dc:	cmp	r0, #0
   121e0:	cmpne	r5, #0
   121e4:	beq	12250 <__assert_fail@plt+0xb4c>
   121e8:	ldr	r3, [r5, #16]
   121ec:	ldr	r2, [pc, #108]	; 12260 <__assert_fail@plt+0xb5c>
   121f0:	ldr	r1, [r0, #16]
   121f4:	cmp	r3, r2
   121f8:	beq	12230 <__assert_fail@plt+0xb2c>
   121fc:	cmp	r1, r2
   12200:	beq	12248 <__assert_fail@plt+0xb44>
   12204:	ldr	r2, [r3, #28]
   12208:	ldr	ip, [r5, #8]
   1220c:	ldr	r3, [r1, #28]
   12210:	ldr	r1, [r0, #8]
   12214:	add	r2, r2, ip
   12218:	add	r3, r3, r1
   1221c:	cmp	r2, r3
   12220:	beq	12238 <__assert_fail@plt+0xb34>
   12224:	bcs	12248 <__assert_fail@plt+0xb44>
   12228:	mvn	r0, #0
   1222c:	pop	{r4, r5, r6, r7, r8, pc}
   12230:	cmp	r1, r3
   12234:	bne	12228 <__assert_fail@plt+0xb24>
   12238:	mov	r1, r7
   1223c:	mov	r0, r6
   12240:	pop	{r4, r5, r6, r7, r8, lr}
   12244:	b	120c8 <__assert_fail@plt+0x9c4>
   12248:	mov	r0, #1
   1224c:	pop	{r4, r5, r6, r7, r8, pc}
   12250:	ldr	r3, [r4, #12]
   12254:	ldr	r0, [r3]
   12258:	bl	14130 <__assert_fail@plt+0x2a2c>
   1225c:	andeq	r7, r2, r8, asr #12
   12260:	andeq	r7, r2, r0, asr #8
   12264:	push	{r4, lr}
   12268:	bl	1218c <__assert_fail@plt+0xa88>
   1226c:	rsb	r0, r0, #0
   12270:	pop	{r4, pc}
   12274:	push	{r4, lr}
   12278:	bl	120c8 <__assert_fail@plt+0x9c4>
   1227c:	rsb	r0, r0, #0
   12280:	pop	{r4, pc}
   12284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12288:	mov	r7, r0
   1228c:	ldr	r4, [pc, #560]	; 124c4 <__assert_fail@plt+0xdc0>
   12290:	sub	sp, sp, #12
   12294:	mov	r8, r1
   12298:	ldrd	r2, [r4, #12]
   1229c:	ldr	r1, [r4, #20]
   122a0:	ldr	ip, [r2, #4]
   122a4:	mov	r0, r2
   122a8:	mov	r2, r7
   122ac:	ldr	r5, [ip, #316]	; 0x13c
   122b0:	blx	r5
   122b4:	ldr	r2, [r4, #12]
   122b8:	ldr	r3, [r4, #24]
   122bc:	ldr	r1, [r4, #20]
   122c0:	ldr	ip, [r2, #4]
   122c4:	ldr	r6, [ip, #316]	; 0x13c
   122c8:	mov	r5, r0
   122cc:	mov	r0, r2
   122d0:	mov	r2, r8
   122d4:	blx	r6
   122d8:	cmp	r0, #0
   122dc:	cmpne	r5, #0
   122e0:	beq	124b4 <__assert_fail@plt+0xdb0>
   122e4:	ldr	r1, [r5, #16]
   122e8:	ldr	r3, [pc, #472]	; 124c8 <__assert_fail@plt+0xdc4>
   122ec:	mov	r6, r0
   122f0:	cmp	r1, r3
   122f4:	ldr	r2, [r0, #16]
   122f8:	beq	124c0 <__assert_fail@plt+0xdbc>
   122fc:	cmp	r2, r3
   12300:	beq	124c0 <__assert_fail@plt+0xdbc>
   12304:	ldr	r0, [r1, #28]
   12308:	ldr	r3, [r6, #8]
   1230c:	ldr	r1, [r2, #28]
   12310:	ldr	r2, [r5, #8]
   12314:	add	r3, r1, r3
   12318:	add	r2, r0, r2
   1231c:	cmp	r2, r3
   12320:	bne	123f4 <__assert_fail@plt+0xcf0>
   12324:	cmp	r0, r1
   12328:	bne	123f4 <__assert_fail@plt+0xcf0>
   1232c:	ldr	r9, [r5, #4]
   12330:	ldr	r1, [pc, #404]	; 124cc <__assert_fail@plt+0xdc8>
   12334:	mov	r0, r9
   12338:	bl	11308 <strstr@plt>
   1233c:	ldr	r4, [r6, #4]
   12340:	ldr	r1, [pc, #388]	; 124cc <__assert_fail@plt+0xdc8>
   12344:	mov	sl, r0
   12348:	mov	r0, r4
   1234c:	bl	11308 <strstr@plt>
   12350:	cmp	sl, #0
   12354:	mov	fp, r0
   12358:	beq	12404 <__assert_fail@plt+0xd00>
   1235c:	cmp	r0, #0
   12360:	beq	12470 <__assert_fail@plt+0xd6c>
   12364:	ldr	r3, [r5, #12]
   12368:	tst	r3, #16384	; 0x4000
   1236c:	bne	123a0 <__assert_fail@plt+0xc9c>
   12370:	mov	r0, r9
   12374:	bl	11518 <strlen@plt>
   12378:	cmp	r0, #2
   1237c:	bls	12428 <__assert_fail@plt+0xd24>
   12380:	add	r0, r9, r0
   12384:	ldrb	r3, [r0, #-2]
   12388:	cmp	r3, #46	; 0x2e
   1238c:	bne	12428 <__assert_fail@plt+0xd24>
   12390:	ldrb	r3, [r0, #-1]
   12394:	cmp	r3, #97	; 0x61
   12398:	cmpne	r3, #111	; 0x6f
   1239c:	bne	12428 <__assert_fail@plt+0xd24>
   123a0:	ldr	r3, [r6, #12]
   123a4:	tst	r3, #16384	; 0x4000
   123a8:	bne	1245c <__assert_fail@plt+0xd58>
   123ac:	mov	r0, r4
   123b0:	bl	11518 <strlen@plt>
   123b4:	cmp	r0, #2
   123b8:	bls	123f8 <__assert_fail@plt+0xcf4>
   123bc:	add	r4, r4, r0
   123c0:	ldrb	r3, [r4, #-2]
   123c4:	cmp	r3, #46	; 0x2e
   123c8:	moveq	r3, #1
   123cc:	bne	123f8 <__assert_fail@plt+0xcf4>
   123d0:	ldrb	r2, [r4, #-1]
   123d4:	cmp	r2, #97	; 0x61
   123d8:	cmpne	r2, #111	; 0x6f
   123dc:	bne	12488 <__assert_fail@plt+0xd84>
   123e0:	cmp	r3, #1
   123e4:	beq	1245c <__assert_fail@plt+0xd58>
   123e8:	mov	r0, #1
   123ec:	add	sp, sp, #12
   123f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f4:	bcs	123e8 <__assert_fail@plt+0xce4>
   123f8:	mvn	r0, #0
   123fc:	add	sp, sp, #12
   12400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12404:	ldr	r1, [pc, #196]	; 124d0 <__assert_fail@plt+0xdcc>
   12408:	mov	r0, r9
   1240c:	bl	11308 <strstr@plt>
   12410:	cmp	fp, #0
   12414:	mov	sl, r0
   12418:	beq	12494 <__assert_fail@plt+0xd90>
   1241c:	cmp	sl, #0
   12420:	beq	123e8 <__assert_fail@plt+0xce4>
   12424:	b	12364 <__assert_fail@plt+0xc60>
   12428:	ldr	r3, [r6, #12]
   1242c:	ands	r3, r3, #16384	; 0x4000
   12430:	bne	123e8 <__assert_fail@plt+0xce4>
   12434:	mov	r0, r4
   12438:	str	r3, [sp, #4]
   1243c:	bl	11518 <strlen@plt>
   12440:	ldr	r3, [sp, #4]
   12444:	cmp	r0, #2
   12448:	bls	1245c <__assert_fail@plt+0xd58>
   1244c:	add	r4, r4, r0
   12450:	ldrb	r2, [r4, #-2]
   12454:	cmp	r2, #46	; 0x2e
   12458:	beq	123d0 <__assert_fail@plt+0xccc>
   1245c:	mov	r1, r8
   12460:	mov	r0, r7
   12464:	add	sp, sp, #12
   12468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1246c:	b	120c8 <__assert_fail@plt+0x9c4>
   12470:	ldr	r1, [pc, #88]	; 124d0 <__assert_fail@plt+0xdcc>
   12474:	mov	r0, r4
   12478:	bl	11308 <strstr@plt>
   1247c:	cmp	r0, #0
   12480:	beq	123f8 <__assert_fail@plt+0xcf4>
   12484:	b	12364 <__assert_fail@plt+0xc60>
   12488:	cmp	r3, #0
   1248c:	beq	1245c <__assert_fail@plt+0xd58>
   12490:	b	123f8 <__assert_fail@plt+0xcf4>
   12494:	ldr	r1, [pc, #52]	; 124d0 <__assert_fail@plt+0xdcc>
   12498:	mov	r0, r4
   1249c:	bl	11308 <strstr@plt>
   124a0:	cmp	r0, #0
   124a4:	bne	1241c <__assert_fail@plt+0xd18>
   124a8:	cmp	sl, #0
   124ac:	beq	12364 <__assert_fail@plt+0xc60>
   124b0:	b	123f8 <__assert_fail@plt+0xcf4>
   124b4:	ldr	r3, [r4, #12]
   124b8:	ldr	r0, [r3]
   124bc:	bl	14130 <__assert_fail@plt+0x2a2c>
   124c0:	bl	116e0 <abort@plt>
   124c4:	andeq	r7, r2, r8, asr #12
   124c8:	andeq	r7, r2, r0, asr #8
   124cc:			; <UNDEFINED> instruction: 0x000163b0
   124d0:	andeq	r6, r1, r0, asr #7
   124d4:	push	{r4, r5, r6, r7, r8, lr}
   124d8:	mov	r4, r2
   124dc:	ldr	r3, [r1, #20]
   124e0:	ldr	r2, [r2]
   124e4:	ands	r3, r3, #4
   124e8:	str	r1, [r2]
   124ec:	bne	12514 <__assert_fail@plt+0xe10>
   124f0:	ldrd	r0, [r4, #4]
   124f4:	str	r3, [r0]
   124f8:	str	r3, [r1]
   124fc:	add	r0, r0, #4
   12500:	add	r1, r1, #4
   12504:	add	r2, r2, #4
   12508:	str	r2, [r4]
   1250c:	strd	r0, [r4, #4]
   12510:	pop	{r4, r5, r6, r7, r8, pc}
   12514:	mov	r5, r1
   12518:	mov	r6, r0
   1251c:	bl	116a4 <bfd_get_reloc_upper_bound@plt>
   12520:	cmp	r0, #0
   12524:	blt	1256c <__assert_fail@plt+0xe68>
   12528:	ldr	r7, [r4, #4]
   1252c:	bl	1144c <xmalloc@plt>
   12530:	ldr	r2, [r4, #4]
   12534:	mov	r1, r5
   12538:	ldr	r3, [r4, #12]
   1253c:	ldr	r5, [r4, #8]
   12540:	str	r0, [r7]
   12544:	mov	r0, r6
   12548:	ldr	r2, [r2]
   1254c:	bl	11674 <bfd_canonicalize_reloc@plt>
   12550:	ldr	r1, [r4, #8]
   12554:	str	r0, [r5]
   12558:	ldr	r3, [r1]
   1255c:	cmp	r3, #0
   12560:	ldrge	r2, [r4]
   12564:	ldrge	r0, [r4, #4]
   12568:	bge	124fc <__assert_fail@plt+0xdf8>
   1256c:	ldr	r0, [r6]
   12570:	bl	14130 <__assert_fail@plt+0x2a2c>
   12574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12578:	mov	r8, r0
   1257c:	ldr	r4, [pc, #1172]	; 12a18 <__assert_fail@plt+0x1314>
   12580:	sub	sp, sp, #84	; 0x54
   12584:	mov	r7, r1
   12588:	ldr	ip, [r4]
   1258c:	mov	r0, r3
   12590:	mov	r1, r8
   12594:	ldr	r3, [ip, #12]
   12598:	mov	r6, r2
   1259c:	blx	r3
   125a0:	ldr	r3, [r8, #4]
   125a4:	add	r5, sp, #60	; 0x3c
   125a8:	mov	r2, r5
   125ac:	ldr	r3, [r3, #276]	; 0x114
   125b0:	mov	r1, r7
   125b4:	mov	r0, r8
   125b8:	blx	r3
   125bc:	ldr	r2, [r7, #12]
   125c0:	ldr	r3, [pc, #1108]	; 12a1c <__assert_fail@plt+0x1318>
   125c4:	str	r6, [sp, #32]
   125c8:	ands	r3, r3, r2
   125cc:	str	r5, [sp, #28]
   125d0:	beq	127f4 <__assert_fail@plt+0x10f0>
   125d4:	mov	r3, #0
   125d8:	str	r3, [sp, #36]	; 0x24
   125dc:	str	r3, [sp, #40]	; 0x28
   125e0:	ldr	r3, [r4]
   125e4:	ldr	r5, [pc, #1076]	; 12a20 <__assert_fail@plt+0x131c>
   125e8:	mov	r1, r8
   125ec:	ldr	r3, [r3, #16]
   125f0:	add	r0, sp, #28
   125f4:	blx	r3
   125f8:	ldr	r3, [r5, #28]
   125fc:	cmp	r3, #0
   12600:	beq	1265c <__assert_fail@plt+0xf58>
   12604:	ldr	r1, [pc, #1040]	; 12a1c <__assert_fail@plt+0x1318>
   12608:	ldr	r2, [r7, #12]
   1260c:	mov	r3, #0
   12610:	tst	r1, r2
   12614:	str	r3, [sp, #44]	; 0x2c
   12618:	bne	1265c <__assert_fail@plt+0xf58>
   1261c:	ldr	r3, [r8, #4]
   12620:	add	r2, sp, #44	; 0x2c
   12624:	mov	r1, r7
   12628:	ldr	r3, [r3, #280]	; 0x118
   1262c:	mov	r0, r8
   12630:	blx	r3
   12634:	ldr	r3, [pc, #1000]	; 12a24 <__assert_fail@plt+0x1320>
   12638:	ldr	r2, [r7, #16]
   1263c:	cmp	r2, r3
   12640:	moveq	r3, #1
   12644:	streq	r3, [sp, #44]	; 0x2c
   12648:	cmp	r0, #0
   1264c:	beq	1265c <__assert_fail@plt+0xf58>
   12650:	ldrb	r3, [r0]
   12654:	cmp	r3, #0
   12658:	bne	12830 <__assert_fail@plt+0x112c>
   1265c:	ldr	r3, [r5, #32]
   12660:	cmp	r3, #0
   12664:	beq	126ec <__assert_fail@plt+0xfe8>
   12668:	ldr	r3, [r5, #40]	; 0x28
   1266c:	ldr	r0, [r5, #36]	; 0x24
   12670:	cmp	r3, r8
   12674:	beq	12704 <__assert_fail@plt+0x1000>
   12678:	cmp	r0, #0
   1267c:	beq	1268c <__assert_fail@plt+0xf88>
   12680:	bl	113a4 <free@plt>
   12684:	mov	r3, #0
   12688:	str	r3, [r5, #36]	; 0x24
   1268c:	ldr	r3, [r8, #4]
   12690:	mov	r0, r8
   12694:	ldr	r3, [r3, #260]	; 0x104
   12698:	blx	r3
   1269c:	cmp	r0, #0
   126a0:	blt	12a10 <__assert_fail@plt+0x130c>
   126a4:	bl	1144c <xmalloc@plt>
   126a8:	ldr	r2, [r8, #4]
   126ac:	ldr	r2, [r2, #264]	; 0x108
   126b0:	mov	r3, r0
   126b4:	mov	r1, r0
   126b8:	mov	r0, r8
   126bc:	str	r3, [r5, #36]	; 0x24
   126c0:	blx	r2
   126c4:	cmp	r0, #0
   126c8:	strge	r8, [r5, #40]	; 0x28
   126cc:	blt	12a10 <__assert_fail@plt+0x130c>
   126d0:	ldr	r3, [r7, #16]
   126d4:	ldr	r2, [pc, #840]	; 12a24 <__assert_fail@plt+0x1320>
   126d8:	cmp	r3, r2
   126dc:	beq	1271c <__assert_fail@plt+0x1018>
   126e0:	ldr	r3, [r3, #148]	; 0x94
   126e4:	cmp	r3, r8
   126e8:	beq	12854 <__assert_fail@plt+0x1150>
   126ec:	ldr	r3, [pc, #820]	; 12a28 <__assert_fail@plt+0x1324>
   126f0:	mov	r0, #10
   126f4:	ldr	r1, [r3]
   126f8:	bl	11638 <putc@plt>
   126fc:	add	sp, sp, #84	; 0x54
   12700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12704:	cmp	r0, #0
   12708:	beq	1268c <__assert_fail@plt+0xf88>
   1270c:	ldr	r3, [r7, #16]
   12710:	ldr	r2, [pc, #780]	; 12a24 <__assert_fail@plt+0x1320>
   12714:	cmp	r3, r2
   12718:	bne	126e0 <__assert_fail@plt+0xfdc>
   1271c:	ldr	r3, [r5, #48]	; 0x30
   12720:	ldr	r9, [r5, #44]	; 0x2c
   12724:	cmp	r3, r8
   12728:	beq	128e0 <__assert_fail@plt+0x11dc>
   1272c:	cmp	r9, #0
   12730:	beq	1278c <__assert_fail@plt+0x1088>
   12734:	ldr	r3, [r5, #52]	; 0x34
   12738:	cmp	r3, #0
   1273c:	addne	r3, r9, r3, lsl #2
   12740:	subne	r6, r3, #4
   12744:	subne	r4, r9, #4
   12748:	beq	12764 <__assert_fail@plt+0x1060>
   1274c:	ldr	r0, [r4, #4]!
   12750:	cmp	r0, #0
   12754:	beq	1275c <__assert_fail@plt+0x1058>
   12758:	bl	113a4 <free@plt>
   1275c:	cmp	r4, r6
   12760:	bne	1274c <__assert_fail@plt+0x1048>
   12764:	ldr	r0, [r5, #56]	; 0x38
   12768:	bl	113a4 <free@plt>
   1276c:	mov	r0, r9
   12770:	bl	113a4 <free@plt>
   12774:	ldr	r0, [r5, #60]	; 0x3c
   12778:	bl	113a4 <free@plt>
   1277c:	mov	r3, #0
   12780:	str	r3, [r5, #56]	; 0x38
   12784:	str	r3, [r5, #44]	; 0x2c
   12788:	str	r3, [r5, #60]	; 0x3c
   1278c:	ldr	r0, [r8, #108]	; 0x6c
   12790:	str	r0, [r5, #52]	; 0x34
   12794:	lsl	r0, r0, #2
   12798:	bl	1144c <xmalloc@plt>
   1279c:	ldr	r3, [r5, #52]	; 0x34
   127a0:	str	r0, [r5, #56]	; 0x38
   127a4:	lsl	r0, r3, #2
   127a8:	bl	1144c <xmalloc@plt>
   127ac:	ldr	r3, [r5, #52]	; 0x34
   127b0:	str	r0, [r5, #44]	; 0x2c
   127b4:	lsl	r0, r3, #2
   127b8:	bl	1144c <xmalloc@plt>
   127bc:	ldr	r1, [r5, #56]	; 0x38
   127c0:	ldr	ip, [r5, #44]	; 0x2c
   127c4:	ldr	r3, [r5, #36]	; 0x24
   127c8:	str	r1, [sp, #44]	; 0x2c
   127cc:	add	r2, sp, #44	; 0x2c
   127d0:	ldr	r1, [pc, #596]	; 12a2c <__assert_fail@plt+0x1328>
   127d4:	str	ip, [sp, #48]	; 0x30
   127d8:	str	r3, [sp, #56]	; 0x38
   127dc:	str	r0, [r5, #60]	; 0x3c
   127e0:	str	r0, [sp, #52]	; 0x34
   127e4:	mov	r0, r8
   127e8:	bl	116b0 <bfd_map_over_sections@plt>
   127ec:	str	r8, [r5, #48]	; 0x30
   127f0:	b	128e8 <__assert_fail@plt+0x11e4>
   127f4:	ldr	r1, [r7]
   127f8:	ldr	r2, [r1, #4]
   127fc:	ldr	r2, [r2, #4]
   12800:	cmp	r2, #5
   12804:	beq	129f8 <__assert_fail@plt+0x12f4>
   12808:	sub	r2, r2, #2
   1280c:	bics	r2, r2, #2
   12810:	str	r3, [sp, #36]	; 0x24
   12814:	movne	r2, r3
   12818:	bne	12828 <__assert_fail@plt+0x1124>
   1281c:	ldr	r2, [r1, #160]	; 0xa0
   12820:	cmp	r2, #0
   12824:	movne	r2, r7
   12828:	str	r2, [sp, #40]	; 0x28
   1282c:	b	125e0 <__assert_fail@plt+0xedc>
   12830:	ldr	ip, [sp, #44]	; 0x2c
   12834:	ldr	r2, [pc, #500]	; 12a30 <__assert_fail@plt+0x132c>
   12838:	ldr	r3, [pc, #500]	; 12a34 <__assert_fail@plt+0x1330>
   1283c:	cmp	ip, #0
   12840:	mov	r1, r0
   12844:	movne	r0, r2
   12848:	moveq	r0, r3
   1284c:	bl	11350 <printf@plt>
   12850:	b	1265c <__assert_fail@plt+0xf58>
   12854:	ldr	r2, [r8, #4]
   12858:	add	r4, sp, #44	; 0x2c
   1285c:	str	r4, [sp]
   12860:	add	r3, sp, #20
   12864:	ldr	r6, [r2, #300]	; 0x12c
   12868:	ldr	r1, [r5, #36]	; 0x24
   1286c:	mov	r2, r7
   12870:	mov	r0, r8
   12874:	blx	r6
   12878:	cmp	r0, #0
   1287c:	bne	128bc <__assert_fail@plt+0x11b8>
   12880:	ldr	r3, [r8, #4]
   12884:	add	r2, sp, #24
   12888:	add	r1, sp, #20
   1288c:	str	r0, [sp, #12]
   12890:	str	r4, [sp, #8]
   12894:	str	r1, [sp]
   12898:	mov	r0, r8
   1289c:	ldr	r1, [r5, #36]	; 0x24
   128a0:	str	r2, [sp, #4]
   128a4:	ldr	r4, [r3, #296]	; 0x128
   128a8:	ldr	r2, [r7, #16]
   128ac:	ldr	r3, [r7, #8]
   128b0:	blx	r4
   128b4:	cmp	r0, #0
   128b8:	beq	126ec <__assert_fail@plt+0xfe8>
   128bc:	ldr	r1, [sp, #20]
   128c0:	cmp	r1, #0
   128c4:	beq	126ec <__assert_fail@plt+0xfe8>
   128c8:	ldr	r2, [sp, #44]	; 0x2c
   128cc:	cmp	r2, #0
   128d0:	beq	126ec <__assert_fail@plt+0xfe8>
   128d4:	ldr	r0, [pc, #348]	; 12a38 <__assert_fail@plt+0x1334>
   128d8:	bl	11350 <printf@plt>
   128dc:	b	126ec <__assert_fail@plt+0xfe8>
   128e0:	cmp	r9, #0
   128e4:	beq	1278c <__assert_fail@plt+0x1088>
   128e8:	ldr	r3, [r5, #52]	; 0x34
   128ec:	ldr	sl, [r7, #4]
   128f0:	cmp	r3, #0
   128f4:	movne	r9, #0
   128f8:	beq	126ec <__assert_fail@plt+0xfe8>
   128fc:	ldr	r3, [r5, #60]	; 0x3c
   12900:	lsl	r6, r9, #2
   12904:	ldr	r3, [r3, r9, lsl #2]
   12908:	cmp	r3, #0
   1290c:	movgt	r4, #0
   12910:	bgt	1292c <__assert_fail@plt+0x1228>
   12914:	b	129e4 <__assert_fail@plt+0x12e0>
   12918:	ldr	r3, [r5, #60]	; 0x3c
   1291c:	add	r4, r4, #1
   12920:	ldr	r3, [r3, r6]
   12924:	cmp	r3, r4
   12928:	ble	129e4 <__assert_fail@plt+0x12e0>
   1292c:	ldr	r3, [r5, #44]	; 0x2c
   12930:	ldr	r3, [r3, r6]
   12934:	ldr	fp, [r3, r4, lsl #2]
   12938:	ldr	r3, [fp]
   1293c:	cmp	r3, #0
   12940:	beq	12918 <__assert_fail@plt+0x1214>
   12944:	ldr	r3, [r3]
   12948:	ldr	r2, [r7, #16]
   1294c:	ldr	r1, [r3, #16]
   12950:	cmp	r1, r2
   12954:	bne	12918 <__assert_fail@plt+0x1214>
   12958:	ldr	r1, [r3, #8]
   1295c:	ldr	r2, [r7, #8]
   12960:	cmp	r1, r2
   12964:	bne	12918 <__assert_fail@plt+0x1214>
   12968:	ldr	r1, [r3, #4]
   1296c:	mov	r0, sl
   12970:	bl	11338 <strcmp@plt>
   12974:	cmp	r0, #0
   12978:	bne	12918 <__assert_fail@plt+0x1214>
   1297c:	ldr	r2, [r5, #56]	; 0x38
   12980:	ldr	ip, [r8, #4]
   12984:	add	r1, sp, #44	; 0x2c
   12988:	ldr	r3, [fp, #4]
   1298c:	ldr	r2, [r2, r6]
   12990:	str	r1, [sp, #8]
   12994:	add	r1, sp, #24
   12998:	str	r1, [sp, #4]
   1299c:	add	r1, sp, #20
   129a0:	str	r0, [sp, #12]
   129a4:	str	r1, [sp]
   129a8:	mov	r0, r8
   129ac:	ldr	r1, [r5, #36]	; 0x24
   129b0:	ldr	fp, [ip, #296]	; 0x128
   129b4:	blx	fp
   129b8:	cmp	r0, #0
   129bc:	beq	12918 <__assert_fail@plt+0x1214>
   129c0:	ldr	r1, [sp, #20]
   129c4:	cmp	r1, #0
   129c8:	beq	12918 <__assert_fail@plt+0x1214>
   129cc:	ldr	r2, [sp, #44]	; 0x2c
   129d0:	ldr	r0, [pc, #96]	; 12a38 <__assert_fail@plt+0x1334>
   129d4:	bl	11350 <printf@plt>
   129d8:	ldr	r9, [r5, #52]	; 0x34
   129dc:	mov	r3, r9
   129e0:	b	129e8 <__assert_fail@plt+0x12e4>
   129e4:	ldr	r3, [r5, #52]	; 0x34
   129e8:	add	r9, r9, #1
   129ec:	cmp	r9, r3
   129f0:	bcc	128fc <__assert_fail@plt+0x11f8>
   129f4:	b	126ec <__assert_fail@plt+0xfe8>
   129f8:	ldr	r2, [r1, #160]	; 0xa0
   129fc:	cmp	r2, #0
   12a00:	strne	r7, [sp, #36]	; 0x24
   12a04:	movne	r2, r3
   12a08:	streq	r2, [sp, #36]	; 0x24
   12a0c:	b	12828 <__assert_fail@plt+0x1124>
   12a10:	ldr	r0, [r8]
   12a14:	bl	14130 <__assert_fail@plt+0x2a2c>
   12a18:	andeq	r7, r2, r8, ror r1
   12a1c:	eoreq	r0, r0, r0, lsl #2
   12a20:	andeq	r7, r2, r8, asr #12
   12a24:	andeq	r7, r2, r0, asr #8
   12a28:	andeq	r7, r2, r8, lsr r6
   12a2c:	ldrdeq	r2, [r1], -r4
   12a30:	ldrdeq	r6, [r1], -r0
   12a34:	ldrdeq	r6, [r1], -r4
   12a38:	ldrdeq	r6, [r1], -ip
   12a3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a40:	mov	r2, #0
   12a44:	ldr	r5, [pc, #1892]	; 131b0 <__assert_fail@plt+0x1aac>
   12a48:	sub	sp, sp, #52	; 0x34
   12a4c:	mov	r4, r0
   12a50:	ldr	r3, [r5, #64]	; 0x40
   12a54:	str	r1, [sp, #24]
   12a58:	cmp	r3, r2
   12a5c:	str	r2, [sp, #44]	; 0x2c
   12a60:	bne	12a74 <__assert_fail@plt+0x1370>
   12a64:	ldr	r0, [r0, #40]	; 0x28
   12a68:	lsr	r0, r0, #5
   12a6c:	ands	r0, r0, #16
   12a70:	beq	12c3c <__assert_fail@plt+0x1538>
   12a74:	ldr	r2, [r4, #4]
   12a78:	mov	r1, r3
   12a7c:	mov	r0, r4
   12a80:	ldr	r6, [r2, #312]	; 0x138
   12a84:	add	r3, sp, #40	; 0x28
   12a88:	add	r2, sp, #36	; 0x24
   12a8c:	blx	r6
   12a90:	subs	r6, r0, #0
   12a94:	blt	12e60 <__assert_fail@plt+0x175c>
   12a98:	beq	12c3c <__assert_fail@plt+0x1538>
   12a9c:	ldr	r3, [r5, #68]	; 0x44
   12aa0:	ldr	r8, [sp, #40]	; 0x28
   12aa4:	cmp	r3, #0
   12aa8:	ldr	r3, [r5, #64]	; 0x40
   12aac:	ldr	ip, [r4, #4]
   12ab0:	str	r3, [sp, #12]
   12ab4:	beq	12ac0 <__assert_fail@plt+0x13bc>
   12ab8:	cmp	r8, #4
   12abc:	beq	13004 <__assert_fail@plt+0x1900>
   12ac0:	ldr	sl, [sp, #36]	; 0x24
   12ac4:	ldr	r3, [ip, #268]	; 0x10c
   12ac8:	mov	r0, r4
   12acc:	blx	r3
   12ad0:	subs	r3, r0, #0
   12ad4:	str	r3, [sp, #16]
   12ad8:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12adc:	mla	r3, r8, r6, sl
   12ae0:	cmp	r3, sl
   12ae4:	str	r3, [sp, #20]
   12ae8:	bls	1316c <__assert_fail@plt+0x1a68>
   12aec:	ldr	r9, [pc, #1728]	; 131b4 <__assert_fail@plt+0x1ab0>
   12af0:	mov	r7, sl
   12af4:	mov	r6, sl
   12af8:	b	12b98 <__assert_fail@plt+0x1494>
   12afc:	ldr	r3, [fp, #16]
   12b00:	cmp	r3, r9
   12b04:	bne	12b88 <__assert_fail@plt+0x1484>
   12b08:	ldr	r3, [r5, #80]	; 0x50
   12b0c:	cmp	r3, #0
   12b10:	bne	12b20 <__assert_fail@plt+0x141c>
   12b14:	ldr	r3, [fp, #12]
   12b18:	tst	r3, #4
   12b1c:	bne	12b88 <__assert_fail@plt+0x1484>
   12b20:	ldr	r3, [r5, #84]	; 0x54
   12b24:	cmp	r3, #0
   12b28:	bne	12b88 <__assert_fail@plt+0x1484>
   12b2c:	ldr	r3, [r5, #104]	; 0x68
   12b30:	cmp	r3, #0
   12b34:	beq	12b44 <__assert_fail@plt+0x1440>
   12b38:	ldr	r3, [fp, #16]
   12b3c:	cmp	r3, r9
   12b40:	beq	12b88 <__assert_fail@plt+0x1484>
   12b44:	ldr	r3, [r4, #4]
   12b48:	mov	r1, fp
   12b4c:	mov	r0, r4
   12b50:	ldr	r3, [r3, #288]	; 0x120
   12b54:	blx	r3
   12b58:	cmp	r0, #0
   12b5c:	beq	12b6c <__assert_fail@plt+0x1468>
   12b60:	ldr	r3, [r5, #88]	; 0x58
   12b64:	cmp	r3, #0
   12b68:	beq	12b88 <__assert_fail@plt+0x1484>
   12b6c:	cmp	r6, r7
   12b70:	beq	12b84 <__assert_fail@plt+0x1480>
   12b74:	mov	r2, r8
   12b78:	mov	r1, r6
   12b7c:	mov	r0, r7
   12b80:	bl	113c8 <memcpy@plt>
   12b84:	add	r7, r7, r8
   12b88:	ldr	r3, [sp, #20]
   12b8c:	add	r6, r6, r8
   12b90:	cmp	r3, r6
   12b94:	bls	12c80 <__assert_fail@plt+0x157c>
   12b98:	ldr	r1, [r4, #4]
   12b9c:	ldr	r3, [sp, #16]
   12ba0:	mov	r2, r6
   12ba4:	ldr	fp, [r1, #316]	; 0x13c
   12ba8:	mov	r0, r4
   12bac:	ldr	r1, [sp, #12]
   12bb0:	blx	fp
   12bb4:	subs	fp, r0, #0
   12bb8:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12bbc:	ldr	r3, [fp, #4]
   12bc0:	ldrb	r2, [r3]
   12bc4:	cmp	r2, #95	; 0x5f
   12bc8:	beq	12e1c <__assert_fail@plt+0x1718>
   12bcc:	ldr	r3, [r5, #72]	; 0x48
   12bd0:	cmp	r3, #0
   12bd4:	bne	12afc <__assert_fail@plt+0x13f8>
   12bd8:	ldr	r3, [r5, #76]	; 0x4c
   12bdc:	cmp	r3, #0
   12be0:	beq	12c58 <__assert_fail@plt+0x1554>
   12be4:	ldr	r3, [fp, #12]
   12be8:	ldr	r2, [pc, #1480]	; 131b8 <__assert_fail@plt+0x1ab4>
   12bec:	tst	r3, r2
   12bf0:	bne	12c0c <__assert_fail@plt+0x1508>
   12bf4:	ldr	r2, [fp, #16]
   12bf8:	cmp	r2, r9
   12bfc:	beq	12e98 <__assert_fail@plt+0x1794>
   12c00:	ldr	r2, [r2, #20]
   12c04:	tst	r2, #4096	; 0x1000
   12c08:	beq	12b88 <__assert_fail@plt+0x1484>
   12c0c:	ldr	r2, [r5, #80]	; 0x50
   12c10:	cmp	r2, #0
   12c14:	beq	12c68 <__assert_fail@plt+0x1564>
   12c18:	ldr	r3, [r5, #84]	; 0x54
   12c1c:	cmp	r3, #0
   12c20:	beq	12b2c <__assert_fail@plt+0x1428>
   12c24:	ldr	r3, [fp, #16]
   12c28:	ldr	r2, [pc, #1420]	; 131bc <__assert_fail@plt+0x1ab8>
   12c2c:	cmp	r3, r2
   12c30:	cmpne	r3, r9
   12c34:	bne	12b44 <__assert_fail@plt+0x1440>
   12c38:	b	12b88 <__assert_fail@plt+0x1484>
   12c3c:	mov	r2, #5
   12c40:	ldr	r1, [pc, #1400]	; 131c0 <__assert_fail@plt+0x1abc>
   12c44:	bl	113f8 <dcgettext@plt>
   12c48:	ldr	r1, [r4]
   12c4c:	bl	141c8 <__assert_fail@plt+0x2ac4>
   12c50:	add	sp, sp, #52	; 0x34
   12c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c58:	ldr	r3, [r5, #80]	; 0x50
   12c5c:	cmp	r3, #0
   12c60:	bne	12c18 <__assert_fail@plt+0x1514>
   12c64:	ldr	r3, [fp, #12]
   12c68:	tst	r3, #4
   12c6c:	beq	12c18 <__assert_fail@plt+0x1514>
   12c70:	ldr	r3, [sp, #20]
   12c74:	add	r6, r6, r8
   12c78:	cmp	r3, r6
   12c7c:	bhi	12b98 <__assert_fail@plt+0x1494>
   12c80:	sub	r0, r7, sl
   12c84:	mov	r1, r8
   12c88:	bl	15828 <__assert_fail@plt+0x4124>
   12c8c:	mov	r6, r0
   12c90:	mov	r7, r0
   12c94:	ldr	r8, [r5, #92]	; 0x5c
   12c98:	ldr	r3, [r4, #4]
   12c9c:	cmp	r8, #0
   12ca0:	ldr	r9, [r5, #64]	; 0x40
   12ca4:	ldr	r3, [r3, #268]	; 0x10c
   12ca8:	bne	12ec8 <__assert_fail@plt+0x17c4>
   12cac:	mov	r0, r4
   12cb0:	str	r4, [r5, #12]
   12cb4:	str	r9, [r5, #20]
   12cb8:	blx	r3
   12cbc:	ldr	r3, [r4, #4]
   12cc0:	ldr	r3, [r3, #268]	; 0x10c
   12cc4:	str	r0, [r5, #16]
   12cc8:	mov	r0, r4
   12ccc:	blx	r3
   12cd0:	ldr	r3, [r5, #16]
   12cd4:	cmp	r0, #0
   12cd8:	cmpne	r3, #0
   12cdc:	str	r0, [r5, #24]
   12ce0:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12ce4:	ldr	sl, [r5, #84]	; 0x54
   12ce8:	ldr	r1, [sp, #40]	; 0x28
   12cec:	cmp	sl, #0
   12cf0:	ldr	r9, [sp, #36]	; 0x24
   12cf4:	str	r1, [sp, #16]
   12cf8:	beq	12fd0 <__assert_fail@plt+0x18cc>
   12cfc:	ldr	r2, [sp, #16]
   12d00:	ldr	r7, [r5, #64]	; 0x40
   12d04:	ldr	r3, [pc, #1208]	; 131c4 <__assert_fail@plt+0x1ac0>
   12d08:	mov	r1, r6
   12d0c:	mov	r0, r9
   12d10:	mla	fp, r2, r6, r9
   12d14:	str	r7, [sp, #28]
   12d18:	bl	11668 <qsort@plt>
   12d1c:	lsl	r0, r6, #3
   12d20:	bl	1144c <xmalloc@plt>
   12d24:	cmp	fp, r9
   12d28:	str	r0, [sp, #20]
   12d2c:	bls	130c8 <__assert_fail@plt+0x19c4>
   12d30:	ldr	r3, [r4, #4]
   12d34:	ldr	r1, [r5, #16]
   12d38:	mov	r2, r9
   12d3c:	ldr	r6, [r3, #316]	; 0x13c
   12d40:	str	r1, [sp, #12]
   12d44:	mov	r3, r1
   12d48:	mov	r0, r4
   12d4c:	mov	r1, r7
   12d50:	ldr	sl, [r5, #24]
   12d54:	blx	r6
   12d58:	subs	r6, r0, #0
   12d5c:	ldrne	r8, [sp, #20]
   12d60:	bne	12dec <__assert_fail@plt+0x16e8>
   12d64:	b	131a8 <__assert_fail@plt+0x1aa4>
   12d68:	ldr	r1, [r4, #4]
   12d6c:	mov	r3, sl
   12d70:	mov	r2, r7
   12d74:	ldr	r1, [r1, #316]	; 0x13c
   12d78:	mov	r0, r4
   12d7c:	mov	ip, r1
   12d80:	ldr	r1, [sp, #28]
   12d84:	blx	ip
   12d88:	cmp	r0, #0
   12d8c:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12d90:	ldr	r3, [r6, #12]
   12d94:	ldr	r1, [pc, #1068]	; 131c8 <__assert_fail@plt+0x1ac4>
   12d98:	ldr	r2, [r6, #16]
   12d9c:	tst	r1, r3
   12da0:	beq	13074 <__assert_fail@plt+0x1970>
   12da4:	ldr	r1, [r0, #16]
   12da8:	ldr	r3, [r6, #8]
   12dac:	cmp	r1, r2
   12db0:	beq	130ac <__assert_fail@plt+0x19a8>
   12db4:	ldr	r2, [r2, #36]	; 0x24
   12db8:	sub	r3, r2, r3
   12dbc:	cmp	r3, #0
   12dc0:	beq	12dd0 <__assert_fail@plt+0x16cc>
   12dc4:	str	r9, [r8]
   12dc8:	str	r3, [r8, #4]
   12dcc:	add	r8, r8, #8
   12dd0:	cmp	fp, r7
   12dd4:	bls	130bc <__assert_fail@plt+0x19b8>
   12dd8:	ldr	r3, [sp, #12]
   12ddc:	mov	r9, r7
   12de0:	str	sl, [sp, #12]
   12de4:	mov	r6, r0
   12de8:	mov	sl, r3
   12dec:	ldr	r3, [sp, #16]
   12df0:	add	r7, r9, r3
   12df4:	cmp	fp, r7
   12df8:	bhi	12d68 <__assert_fail@plt+0x1664>
   12dfc:	ldr	r0, [r6, #12]
   12e00:	ldr	r3, [pc, #960]	; 131c8 <__assert_fail@plt+0x1ac4>
   12e04:	ldr	r2, [r6, #16]
   12e08:	ands	r0, r3, r0
   12e0c:	beq	13074 <__assert_fail@plt+0x1970>
   12e10:	ldr	r3, [r6, #8]
   12e14:	mov	r0, #0
   12e18:	b	12db4 <__assert_fail@plt+0x16b0>
   12e1c:	ldrb	r2, [r3, #1]
   12e20:	cmp	r2, #95	; 0x5f
   12e24:	bne	12bcc <__assert_fail@plt+0x14c8>
   12e28:	ldrb	r0, [r3, #2]
   12e2c:	ldr	r1, [pc, #920]	; 131cc <__assert_fail@plt+0x1ac8>
   12e30:	cmp	r0, #95	; 0x5f
   12e34:	movne	r0, r3
   12e38:	addeq	r0, r3, #1
   12e3c:	bl	11338 <strcmp@plt>
   12e40:	cmp	r0, #0
   12e44:	bne	12bcc <__assert_fail@plt+0x14c8>
   12e48:	mov	r2, #5
   12e4c:	ldr	r1, [pc, #892]	; 131d0 <__assert_fail@plt+0x1acc>
   12e50:	bl	113f8 <dcgettext@plt>
   12e54:	ldr	r1, [r4]
   12e58:	bl	141c8 <__assert_fail@plt+0x2ac4>
   12e5c:	b	12bcc <__assert_fail@plt+0x14c8>
   12e60:	ldr	r3, [r5, #64]	; 0x40
   12e64:	cmp	r3, #0
   12e68:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12e6c:	bl	11434 <bfd_get_error@plt>
   12e70:	cmp	r0, #7
   12e74:	bne	131a8 <__assert_fail@plt+0x1aa4>
   12e78:	mov	r2, #5
   12e7c:	ldr	r1, [pc, #828]	; 131c0 <__assert_fail@plt+0x1abc>
   12e80:	mov	r0, #0
   12e84:	bl	113f8 <dcgettext@plt>
   12e88:	ldr	r1, [r4]
   12e8c:	bl	141c8 <__assert_fail@plt+0x2ac4>
   12e90:	add	sp, sp, #52	; 0x34
   12e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e98:	ldr	r2, [r5, #80]	; 0x50
   12e9c:	cmp	r2, #0
   12ea0:	bne	12eac <__assert_fail@plt+0x17a8>
   12ea4:	tst	r3, #4
   12ea8:	bne	12b88 <__assert_fail@plt+0x1484>
   12eac:	ldr	r3, [r5, #84]	; 0x54
   12eb0:	cmp	r3, #0
   12eb4:	bne	12b88 <__assert_fail@plt+0x1484>
   12eb8:	ldr	r3, [r5, #104]	; 0x68
   12ebc:	cmp	r3, #0
   12ec0:	bne	12b88 <__assert_fail@plt+0x1484>
   12ec4:	b	12b44 <__assert_fail@plt+0x1440>
   12ec8:	mov	r2, #0
   12ecc:	str	r2, [sp, #20]
   12ed0:	ldr	r2, [r5, #84]	; 0x54
   12ed4:	mov	r0, r4
   12ed8:	cmp	r2, #0
   12edc:	bne	12f6c <__assert_fail@plt+0x1868>
   12ee0:	ldr	r5, [sp, #36]	; 0x24
   12ee4:	ldr	r8, [sp, #40]	; 0x28
   12ee8:	blx	r3
   12eec:	subs	sl, r0, #0
   12ef0:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12ef4:	mla	r7, r8, r7, r5
   12ef8:	cmp	r5, r7
   12efc:	ldrcc	r6, [sp, #24]
   12f00:	bcs	12f44 <__assert_fail@plt+0x1840>
   12f04:	ldr	r1, [r4, #4]
   12f08:	mov	r3, sl
   12f0c:	mov	r2, r5
   12f10:	ldr	fp, [r1, #316]	; 0x13c
   12f14:	mov	r0, r4
   12f18:	mov	r1, r9
   12f1c:	blx	fp
   12f20:	subs	r1, r0, #0
   12f24:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12f28:	add	r5, r5, r8
   12f2c:	mov	r3, r6
   12f30:	mov	r2, #0
   12f34:	mov	r0, r4
   12f38:	bl	12574 <__assert_fail@plt+0xe70>
   12f3c:	cmp	r7, r5
   12f40:	bhi	12f04 <__assert_fail@plt+0x1800>
   12f44:	ldr	r0, [sp, #44]	; 0x2c
   12f48:	cmp	r0, #0
   12f4c:	beq	12f54 <__assert_fail@plt+0x1850>
   12f50:	bl	113a4 <free@plt>
   12f54:	ldr	r0, [sp, #36]	; 0x24
   12f58:	bl	113a4 <free@plt>
   12f5c:	ldr	r0, [sp, #20]
   12f60:	add	sp, sp, #52	; 0x34
   12f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f68:	b	113a4 <free@plt>
   12f6c:	blx	r3
   12f70:	subs	r6, r0, #0
   12f74:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12f78:	ldr	r5, [sp, #20]
   12f7c:	add	r7, r5, r7, lsl #3
   12f80:	cmp	r7, r5
   12f84:	bls	12f44 <__assert_fail@plt+0x1840>
   12f88:	ldr	sl, [sp, #24]
   12f8c:	ldr	r1, [r4, #4]
   12f90:	mov	r3, r6
   12f94:	ldr	r2, [r5]
   12f98:	ldr	r8, [r1, #316]	; 0x13c
   12f9c:	mov	r0, r4
   12fa0:	mov	r1, r9
   12fa4:	blx	r8
   12fa8:	subs	r1, r0, #0
   12fac:	beq	131a8 <__assert_fail@plt+0x1aa4>
   12fb0:	ldr	r2, [r5, #4]
   12fb4:	mov	r3, sl
   12fb8:	mov	r0, r4
   12fbc:	add	r5, r5, #8
   12fc0:	bl	12574 <__assert_fail@plt+0xe70>
   12fc4:	cmp	r7, r5
   12fc8:	bhi	12f8c <__assert_fail@plt+0x1888>
   12fcc:	b	12f44 <__assert_fail@plt+0x1840>
   12fd0:	ldrd	r2, [r5, #96]	; 0x60
   12fd4:	ldr	ip, [pc, #504]	; 131d4 <__assert_fail@plt+0x1ad0>
   12fd8:	mov	r0, r9
   12fdc:	add	r3, r3, r2, lsl #1
   12fe0:	mov	r2, r1
   12fe4:	ldr	r3, [ip, r3, lsl #2]
   12fe8:	mov	r1, r6
   12fec:	bl	11668 <qsort@plt>
   12ff0:	ldr	r3, [r4, #4]
   12ff4:	str	sl, [sp, #20]
   12ff8:	ldr	r9, [r5, #64]	; 0x40
   12ffc:	ldr	r3, [r3, #268]	; 0x10c
   13000:	b	12ed0 <__assert_fail@plt+0x17cc>
   13004:	ldr	r3, [sp, #12]
   13008:	cmp	r3, #0
   1300c:	bne	130f0 <__assert_fail@plt+0x19ec>
   13010:	ldr	r3, [ip, #424]	; 0x1a8
   13014:	mov	r0, r4
   13018:	blx	r3
   1301c:	ldr	r8, [sp, #36]	; 0x24
   13020:	cmp	r0, #0
   13024:	bgt	13178 <__assert_fail@plt+0x1a74>
   13028:	ldr	ip, [r4, #4]
   1302c:	ldr	r7, [sp, #12]
   13030:	mov	r1, r6
   13034:	add	r0, sp, #44	; 0x2c
   13038:	str	r0, [sp, #4]
   1303c:	str	r7, [sp]
   13040:	ldr	r3, [sp, #12]
   13044:	ldr	r7, [ip, #432]	; 0x1b0
   13048:	mov	r2, r8
   1304c:	mov	r0, r4
   13050:	blx	r7
   13054:	subs	r7, r0, #0
   13058:	bgt	13104 <__assert_fail@plt+0x1a00>
   1305c:	ldr	r3, [r5, #64]	; 0x40
   13060:	ldr	sl, [sp, #36]	; 0x24
   13064:	ldr	r8, [sp, #40]	; 0x28
   13068:	str	r3, [sp, #12]
   1306c:	ldr	ip, [r4, #4]
   13070:	b	12ac4 <__assert_fail@plt+0x13c0>
   13074:	ldr	r3, [r4, #4]
   13078:	ldr	r3, [r3, #4]
   1307c:	cmp	r3, #5
   13080:	ldreq	r3, [r6, #28]
   13084:	beq	12dbc <__assert_fail@plt+0x16b8>
   13088:	ldr	r1, [r2, #20]
   1308c:	ldr	r3, [r6, #8]
   13090:	tst	r1, #4096	; 0x1000
   13094:	bne	12dbc <__assert_fail@plt+0x16b8>
   13098:	cmp	fp, r7
   1309c:	bls	12db4 <__assert_fail@plt+0x16b0>
   130a0:	ldr	r1, [r0, #16]
   130a4:	cmp	r1, r2
   130a8:	bne	12db4 <__assert_fail@plt+0x16b0>
   130ac:	ldr	r2, [r0, #8]
   130b0:	subs	r3, r2, r3
   130b4:	bne	12dc4 <__assert_fail@plt+0x16c0>
   130b8:	b	12dd8 <__assert_fail@plt+0x16d4>
   130bc:	ldr	r3, [sp, #20]
   130c0:	sub	r8, r8, r3
   130c4:	asr	r8, r8, #3
   130c8:	ldr	r3, [pc, #264]	; 131d8 <__assert_fail@plt+0x1ad4>
   130cc:	mov	r2, #8
   130d0:	mov	r1, r8
   130d4:	ldr	r0, [sp, #20]
   130d8:	bl	11668 <qsort@plt>
   130dc:	ldr	r3, [r4, #4]
   130e0:	mov	r7, r8
   130e4:	ldr	r9, [r5, #64]	; 0x40
   130e8:	ldr	r3, [r3, #268]	; 0x10c
   130ec:	b	12ed0 <__assert_fail@plt+0x17cc>
   130f0:	mov	r1, #0
   130f4:	mov	r8, r1
   130f8:	ldr	r7, [sp, #36]	; 0x24
   130fc:	str	r6, [sp, #12]
   13100:	b	13034 <__assert_fail@plt+0x1930>
   13104:	add	r9, r6, r7
   13108:	add	r0, r9, #1
   1310c:	lsl	r6, r6, #2
   13110:	lsl	r0, r0, #2
   13114:	bl	1144c <xmalloc@plt>
   13118:	mov	r2, r6
   1311c:	ldr	r1, [sp, #36]	; 0x24
   13120:	mov	sl, r0
   13124:	bl	113c8 <memcpy@plt>
   13128:	add	r0, sl, r6
   1312c:	ldr	r2, [sp, #44]	; 0x2c
   13130:	mov	r3, r0
   13134:	add	r1, r0, r7, lsl #2
   13138:	str	r2, [r3], #4
   1313c:	cmp	r1, r3
   13140:	add	r2, r2, #24
   13144:	bne	13138 <__assert_fail@plt+0x1a34>
   13148:	ldr	r3, [r5, #64]	; 0x40
   1314c:	ldr	r8, [sp, #40]	; 0x28
   13150:	str	r3, [sp, #12]
   13154:	mov	r3, #0
   13158:	mov	r6, r9
   1315c:	str	sl, [sp, #36]	; 0x24
   13160:	str	r3, [r0, r7, lsl #2]
   13164:	ldr	ip, [r4, #4]
   13168:	b	12ac4 <__assert_fail@plt+0x13c0>
   1316c:	mov	r7, #0
   13170:	mov	r6, r7
   13174:	b	12c94 <__assert_fail@plt+0x1590>
   13178:	bl	1144c <xmalloc@plt>
   1317c:	ldr	r3, [r4, #4]
   13180:	ldr	r3, [r3, #428]	; 0x1ac
   13184:	mov	r1, r0
   13188:	mov	r7, r0
   1318c:	mov	r0, r4
   13190:	blx	r3
   13194:	subs	r3, r0, #0
   13198:	str	r3, [sp, #12]
   1319c:	ldrge	ip, [r4, #4]
   131a0:	movge	r1, r6
   131a4:	bge	13034 <__assert_fail@plt+0x1930>
   131a8:	ldr	r0, [r4]
   131ac:	bl	14130 <__assert_fail@plt+0x2a2c>
   131b0:	andeq	r7, r2, r8, asr #12
   131b4:	andeq	r7, r2, r0, asr #8
   131b8:	addeq	r0, r0, r2, lsl #1
   131bc:	andeq	r7, r2, r8, ror #9
   131c0:	andeq	r6, r1, r4, ror #7
   131c4:	andeq	r2, r1, r4, lsl #5
   131c8:	eoreq	r0, r0, r0, lsl #2
   131cc:	strdeq	r6, [r1], -r4
   131d0:	andeq	r6, r1, r4, lsl #8
   131d4:			; <UNDEFINED> instruction: 0x00015ab4
   131d8:	ldrdeq	r3, [r1], -ip
   131dc:	ldr	ip, [r0, #4]
   131e0:	ldr	r2, [r1, #4]
   131e4:	ldr	r3, [pc, #64]	; 1322c <__assert_fail@plt+0x1b28>
   131e8:	cmp	ip, r2
   131ec:	ldr	r3, [r3, #100]	; 0x64
   131f0:	bcc	1321c <__assert_fail@plt+0x1b18>
   131f4:	bls	13208 <__assert_fail@plt+0x1b04>
   131f8:	cmp	r3, #0
   131fc:	moveq	r0, #1
   13200:	mvnne	r0, #0
   13204:	bx	lr
   13208:	ldr	r2, [pc, #32]	; 13230 <__assert_fail@plt+0x1b2c>
   1320c:	ldr	r1, [r1]
   13210:	ldr	r0, [r0]
   13214:	ldr	r3, [r2, r3, lsl #2]
   13218:	bx	r3
   1321c:	cmp	r3, #0
   13220:	mvneq	r0, #0
   13224:	movne	r0, #1
   13228:	bx	lr
   1322c:	andeq	r7, r2, r8, asr #12
   13230:			; <UNDEFINED> instruction: 0x00015ab4
   13234:	ldrb	r3, [r0]
   13238:	sub	r3, r3, #66	; 0x42
   1323c:	cmp	r3, #49	; 0x31
   13240:	ldrls	pc, [pc, r3, lsl #2]
   13244:	b	13340 <__assert_fail@plt+0x1c3c>
   13248:	andeq	r3, r1, r0, lsr r3
   1324c:	andeq	r3, r1, r0, asr #6
   13250:	andeq	r3, r1, r0, asr #6
   13254:	andeq	r3, r1, r0, asr #6
   13258:	andeq	r3, r1, r0, asr #6
   1325c:	andeq	r3, r1, r0, asr #6
   13260:	andeq	r3, r1, r0, asr #6
   13264:	andeq	r3, r1, r0, asr #6
   13268:	andeq	r3, r1, r0, asr #6
   1326c:	andeq	r3, r1, r0, asr #6
   13270:	andeq	r3, r1, r0, asr #6
   13274:	andeq	r3, r1, r0, asr #6
   13278:	andeq	r3, r1, r0, asr #6
   1327c:	andeq	r3, r1, r0, asr #6
   13280:	andeq	r3, r1, r0, lsr #6
   13284:	andeq	r3, r1, r0, asr #6
   13288:	andeq	r3, r1, r0, asr #6
   1328c:	andeq	r3, r1, r0, lsl r3
   13290:	andeq	r3, r1, r0, asr #6
   13294:	andeq	r3, r1, r0, asr #6
   13298:	andeq	r3, r1, r0, asr #6
   1329c:	andeq	r3, r1, r0, asr #6
   132a0:	andeq	r3, r1, r0, asr #6
   132a4:	andeq	r3, r1, r0, asr #6
   132a8:	andeq	r3, r1, r0, asr #6
   132ac:	andeq	r3, r1, r0, asr #6
   132b0:	andeq	r3, r1, r0, asr #6
   132b4:	andeq	r3, r1, r0, asr #6
   132b8:	andeq	r3, r1, r0, asr #6
   132bc:	andeq	r3, r1, r0, asr #6
   132c0:	andeq	r3, r1, r0, asr #6
   132c4:	andeq	r3, r1, r0, asr #6
   132c8:	andeq	r3, r1, r0, lsr r3
   132cc:	andeq	r3, r1, r0, asr #6
   132d0:	andeq	r3, r1, r0, asr #6
   132d4:	andeq	r3, r1, r0, asr #6
   132d8:	andeq	r3, r1, r0, asr #6
   132dc:	andeq	r3, r1, r0, asr #6
   132e0:	andeq	r3, r1, r0, asr #6
   132e4:	andeq	r3, r1, r0, asr #6
   132e8:	andeq	r3, r1, r0, asr #6
   132ec:	andeq	r3, r1, r0, asr #6
   132f0:	andeq	r3, r1, r0, asr #6
   132f4:	andeq	r3, r1, r0, asr #6
   132f8:	andeq	r3, r1, r0, asr #6
   132fc:	andeq	r3, r1, r0, asr #6
   13300:	andeq	r3, r1, r0, lsr #6
   13304:	andeq	r3, r1, r0, asr #6
   13308:	andeq	r3, r1, r0, asr #6
   1330c:	andeq	r3, r1, r0, lsl r3
   13310:	ldr	r3, [pc, #72]	; 13360 <__assert_fail@plt+0x1c5c>
   13314:	ldr	r2, [pc, #72]	; 13364 <__assert_fail@plt+0x1c60>
   13318:	str	r2, [r3]
   1331c:	bx	lr
   13320:	ldr	r3, [pc, #56]	; 13360 <__assert_fail@plt+0x1c5c>
   13324:	ldr	r2, [pc, #60]	; 13368 <__assert_fail@plt+0x1c64>
   13328:	str	r2, [r3]
   1332c:	bx	lr
   13330:	ldr	r3, [pc, #40]	; 13360 <__assert_fail@plt+0x1c5c>
   13334:	ldr	r2, [pc, #48]	; 1336c <__assert_fail@plt+0x1c68>
   13338:	str	r2, [r3]
   1333c:	bx	lr
   13340:	push	{r4, lr}
   13344:	mov	r2, #5
   13348:	mov	r4, r0
   1334c:	ldr	r1, [pc, #28]	; 13370 <__assert_fail@plt+0x1c6c>
   13350:	mov	r0, #0
   13354:	bl	113f8 <dcgettext@plt>
   13358:	mov	r1, r4
   1335c:	bl	141a0 <__assert_fail@plt+0x2a9c>
   13360:	andeq	r7, r2, r8, ror r1
   13364:	muleq	r2, r0, r1
   13368:	andeq	r7, r2, r4, lsr #3
   1336c:	andeq	r7, r2, ip, ror r1
   13370:	andeq	r6, r1, ip, lsr #8
   13374:	ldr	r3, [pc, #76]	; 133c8 <__assert_fail@plt+0x1cc4>
   13378:	push	{r4, lr}
   1337c:	ldr	r4, [r3, #108]	; 0x6c
   13380:	cmp	r4, #32
   13384:	beq	133a0 <__assert_fail@plt+0x1c9c>
   13388:	cmp	r4, #64	; 0x40
   1338c:	bne	133b0 <__assert_fail@plt+0x1cac>
   13390:	mov	r1, r0
   13394:	pop	{r4, lr}
   13398:	ldr	r0, [pc, #44]	; 133cc <__assert_fail@plt+0x1cc8>
   1339c:	b	11350 <printf@plt>
   133a0:	mov	r1, r0
   133a4:	pop	{r4, lr}
   133a8:	ldr	r0, [pc, #32]	; 133d0 <__assert_fail@plt+0x1ccc>
   133ac:	b	11350 <printf@plt>
   133b0:	ldr	r1, [pc, #28]	; 133d4 <__assert_fail@plt+0x1cd0>
   133b4:	mov	r2, #5
   133b8:	mov	r0, #0
   133bc:	bl	113f8 <dcgettext@plt>
   133c0:	mov	r1, r4
   133c4:	bl	141a0 <__assert_fail@plt+0x2a9c>
   133c8:	andeq	r7, r2, r8, asr #12
   133cc:	andeq	r7, r2, r0, asr #3
   133d0:			; <UNDEFINED> instruction: 0x000271b8
   133d4:	andeq	r6, r1, r8, asr #8
   133d8:	ldr	r3, [r0]
   133dc:	push	{r4, r5, r6, lr}
   133e0:	mov	r4, r0
   133e4:	ldrb	r0, [r3, #4]
   133e8:	mov	r5, r1
   133ec:	bl	11398 <bfd_is_undefined_symclass@plt>
   133f0:	cmp	r0, #0
   133f4:	beq	13444 <__assert_fail@plt+0x1d40>
   133f8:	ldr	r3, [pc, #288]	; 13520 <__assert_fail@plt+0x1e1c>
   133fc:	ldr	r3, [r3, #108]	; 0x6c
   13400:	cmp	r3, #64	; 0x40
   13404:	beq	13514 <__assert_fail@plt+0x1e10>
   13408:	ldr	r0, [pc, #276]	; 13524 <__assert_fail@plt+0x1e20>
   1340c:	bl	11350 <printf@plt>
   13410:	ldr	r3, [r4]
   13414:	ldr	r0, [pc, #268]	; 13528 <__assert_fail@plt+0x1e24>
   13418:	ldrb	r1, [r3, #4]
   1341c:	bl	11350 <printf@plt>
   13420:	ldr	r3, [r4]
   13424:	ldrb	r2, [r3, #4]
   13428:	cmp	r2, #45	; 0x2d
   1342c:	beq	134b8 <__assert_fail@plt+0x1db4>
   13430:	mov	r2, r5
   13434:	ldr	r1, [r3, #8]
   13438:	ldr	r0, [pc, #236]	; 1352c <__assert_fail@plt+0x1e28>
   1343c:	pop	{r4, r5, r6, lr}
   13440:	b	11f60 <__assert_fail@plt+0x85c>
   13444:	ldr	r6, [pc, #212]	; 13520 <__assert_fail@plt+0x1e1c>
   13448:	ldr	r3, [r6, #84]	; 0x54
   1344c:	cmp	r3, #0
   13450:	beq	13460 <__assert_fail@plt+0x1d5c>
   13454:	ldr	r3, [r6, #112]	; 0x70
   13458:	cmp	r3, #0
   1345c:	beq	13500 <__assert_fail@plt+0x1dfc>
   13460:	ldr	r3, [r4]
   13464:	ldr	r0, [r3]
   13468:	bl	13374 <__assert_fail@plt+0x1c70>
   1346c:	ldr	r3, [r6, #112]	; 0x70
   13470:	cmp	r3, #0
   13474:	beq	13410 <__assert_fail@plt+0x1d0c>
   13478:	ldr	r3, [r4, #8]
   1347c:	cmp	r3, #0
   13480:	ldrne	r3, [r3, #28]
   13484:	ldreq	r3, [r4, #4]
   13488:	adds	r3, r3, #0
   1348c:	movne	r3, #1
   13490:	cmp	r3, #0
   13494:	beq	13410 <__assert_fail@plt+0x1d0c>
   13498:	mov	r0, #32
   1349c:	bl	11578 <putchar@plt>
   134a0:	ldr	r3, [r4, #8]
   134a4:	cmp	r3, #0
   134a8:	ldrne	r0, [r3, #28]
   134ac:	ldreq	r0, [r4, #4]
   134b0:	bl	13374 <__assert_fail@plt+0x1c70>
   134b4:	b	13410 <__assert_fail@plt+0x1d0c>
   134b8:	mov	r0, #32
   134bc:	bl	11578 <putchar@plt>
   134c0:	ldr	r3, [r4]
   134c4:	ldr	r0, [pc, #100]	; 13530 <__assert_fail@plt+0x1e2c>
   134c8:	ldrb	r1, [r3, #13]
   134cc:	bl	11350 <printf@plt>
   134d0:	mov	r0, #32
   134d4:	bl	11578 <putchar@plt>
   134d8:	ldr	r3, [r4]
   134dc:	ldr	r0, [pc, #80]	; 13534 <__assert_fail@plt+0x1e30>
   134e0:	ldrsh	r1, [r3, #14]
   134e4:	bl	11350 <printf@plt>
   134e8:	ldr	r3, [r4]
   134ec:	ldr	r0, [pc, #68]	; 13538 <__assert_fail@plt+0x1e34>
   134f0:	ldr	r1, [r3, #16]
   134f4:	bl	11350 <printf@plt>
   134f8:	ldr	r3, [r4]
   134fc:	b	13430 <__assert_fail@plt+0x1d2c>
   13500:	ldr	r3, [r4, #8]
   13504:	cmp	r3, #0
   13508:	ldrne	r0, [r3, #28]
   1350c:	ldreq	r0, [r4, #4]
   13510:	b	13468 <__assert_fail@plt+0x1d64>
   13514:	ldr	r0, [pc, #8]	; 13524 <__assert_fail@plt+0x1e20>
   13518:	bl	11350 <printf@plt>
   1351c:	b	13408 <__assert_fail@plt+0x1d04>
   13520:	andeq	r7, r2, r8, asr #12
   13524:	andeq	r6, r1, r4, lsl #12
   13528:	andeq	r6, r1, r4, ror r4
   1352c:	ldrdeq	r6, [r1], -r8
   13530:	andeq	r7, r2, r8, asr #3
   13534:	ldrdeq	r7, [r2], -r0
   13538:	andeq	r6, r1, r8, ror r4
   1353c:	ldr	r3, [pc, #44]	; 13570 <__assert_fail@plt+0x1e6c>
   13540:	ldr	r3, [r3]
   13544:	cmp	r3, #0
   13548:	bxeq	lr
   1354c:	cmp	r0, #0
   13550:	ldr	r2, [r1]
   13554:	beq	13564 <__assert_fail@plt+0x1e60>
   13558:	ldr	r1, [r0]
   1355c:	ldr	r0, [pc, #16]	; 13574 <__assert_fail@plt+0x1e70>
   13560:	b	11350 <printf@plt>
   13564:	mov	r1, r2
   13568:	ldr	r0, [pc, #8]	; 13578 <__assert_fail@plt+0x1e74>
   1356c:	b	11350 <printf@plt>
   13570:	andeq	r7, r2, r8, asr #12
   13574:	andeq	r6, r1, r0, lsl #9
   13578:	andeq	r6, r1, ip, lsl #9
   1357c:	ldr	r3, [pc, #32]	; 135a4 <__assert_fail@plt+0x1ea0>
   13580:	ldr	r2, [r3, #4]
   13584:	cmp	r2, #0
   13588:	bxeq	lr
   1358c:	ldr	r3, [r3]
   13590:	cmp	r3, #0
   13594:	bxne	lr
   13598:	mov	r1, r0
   1359c:	ldr	r0, [pc, #4]	; 135a8 <__assert_fail@plt+0x1ea4>
   135a0:	b	11350 <printf@plt>
   135a4:	andeq	r7, r2, r8, asr #12
   135a8:	muleq	r1, r4, r4
   135ac:	ldr	r3, [pc, #52]	; 135e8 <__assert_fail@plt+0x1ee4>
   135b0:	ldr	r3, [r3]
   135b4:	cmp	r3, #0
   135b8:	bxeq	lr
   135bc:	cmp	r0, #0
   135c0:	push	{r4, lr}
   135c4:	mov	r4, r1
   135c8:	beq	135d8 <__assert_fail@plt+0x1ed4>
   135cc:	ldr	r1, [r0]
   135d0:	ldr	r0, [pc, #20]	; 135ec <__assert_fail@plt+0x1ee8>
   135d4:	bl	11350 <printf@plt>
   135d8:	ldr	r1, [r4]
   135dc:	ldr	r0, [pc, #8]	; 135ec <__assert_fail@plt+0x1ee8>
   135e0:	pop	{r4, lr}
   135e4:	b	11350 <printf@plt>
   135e8:	andeq	r7, r2, r8, asr #12
   135ec:	muleq	r1, ip, r4
   135f0:	push	{r4, lr}
   135f4:	mov	r2, #5
   135f8:	ldr	r1, [pc, #12]	; 1360c <__assert_fail@plt+0x1f08>
   135fc:	mov	r0, #0
   13600:	bl	113f8 <dcgettext@plt>
   13604:	pop	{r4, lr}
   13608:	b	11350 <printf@plt>
   1360c:	andeq	r6, r1, r0, lsr #9
   13610:	push	{r4, r5, r6, lr}
   13614:	mov	r5, r0
   13618:	ldr	r4, [pc, #84]	; 13674 <__assert_fail@plt+0x1f70>
   1361c:	mov	r6, r1
   13620:	mov	r2, #5
   13624:	ldr	r0, [r4, #72]	; 0x48
   13628:	cmp	r0, #0
   1362c:	movne	r0, #0
   13630:	ldrne	r1, [pc, #64]	; 13678 <__assert_fail@plt+0x1f74>
   13634:	ldreq	r1, [pc, #64]	; 1367c <__assert_fail@plt+0x1f78>
   13638:	bl	113f8 <dcgettext@plt>
   1363c:	mov	r2, r6
   13640:	mov	r1, r5
   13644:	bl	11350 <printf@plt>
   13648:	ldr	r3, [r4, #108]	; 0x6c
   1364c:	cmp	r3, #32
   13650:	beq	1366c <__assert_fail@plt+0x1f68>
   13654:	mov	r2, #5
   13658:	ldr	r1, [pc, #32]	; 13680 <__assert_fail@plt+0x1f7c>
   1365c:	mov	r0, #0
   13660:	bl	113f8 <dcgettext@plt>
   13664:	pop	{r4, r5, r6, lr}
   13668:	b	11350 <printf@plt>
   1366c:	pop	{r4, r5, r6, lr}
   13670:	b	135f0 <__assert_fail@plt+0x1eec>
   13674:	andeq	r7, r2, r8, asr #12
   13678:	strdeq	r6, [r1], -r4
   1367c:	andeq	r6, r1, r8, lsl r5
   13680:	andeq	r6, r1, r4, lsr r5
   13684:	push	{r4, r5, r6, lr}
   13688:	mov	r5, r0
   1368c:	ldr	r4, [pc, #76]	; 136e0 <__assert_fail@plt+0x1fdc>
   13690:	mov	r2, #5
   13694:	ldr	r0, [r4, #72]	; 0x48
   13698:	cmp	r0, #0
   1369c:	movne	r0, #0
   136a0:	ldrne	r1, [pc, #60]	; 136e4 <__assert_fail@plt+0x1fe0>
   136a4:	ldreq	r1, [pc, #60]	; 136e8 <__assert_fail@plt+0x1fe4>
   136a8:	bl	113f8 <dcgettext@plt>
   136ac:	mov	r1, r5
   136b0:	bl	11350 <printf@plt>
   136b4:	ldr	r3, [r4, #108]	; 0x6c
   136b8:	cmp	r3, #32
   136bc:	beq	136d8 <__assert_fail@plt+0x1fd4>
   136c0:	mov	r2, #5
   136c4:	ldr	r1, [pc, #32]	; 136ec <__assert_fail@plt+0x1fe8>
   136c8:	mov	r0, #0
   136cc:	bl	113f8 <dcgettext@plt>
   136d0:	pop	{r4, r5, r6, lr}
   136d4:	b	11350 <printf@plt>
   136d8:	pop	{r4, r5, r6, lr}
   136dc:	b	135f0 <__assert_fail@plt+0x1eec>
   136e0:	andeq	r7, r2, r8, asr #12
   136e4:	muleq	r1, r8, r5
   136e8:			; <UNDEFINED> instruction: 0x000165b8
   136ec:	andeq	r6, r1, r4, lsr r5
   136f0:	ldr	r3, [pc, #32]	; 13718 <__assert_fail@plt+0x2014>
   136f4:	ldr	r2, [r3, #4]
   136f8:	cmp	r2, #0
   136fc:	bxeq	lr
   13700:	ldr	r3, [r3]
   13704:	cmp	r3, #0
   13708:	bxne	lr
   1370c:	mov	r1, r0
   13710:	ldr	r0, [pc, #4]	; 1371c <__assert_fail@plt+0x2018>
   13714:	b	11350 <printf@plt>
   13718:	andeq	r7, r2, r8, asr #12
   1371c:	strdeq	r5, [r1], -r8
   13720:	ldr	r3, [r0]
   13724:	push	{r4, lr}
   13728:	mov	r4, r0
   1372c:	mov	r2, r1
   13730:	ldr	r0, [pc, #120]	; 137b0 <__assert_fail@plt+0x20ac>
   13734:	ldr	r1, [r3, #8]
   13738:	bl	11f60 <__assert_fail@plt+0x85c>
   1373c:	ldr	r3, [r4]
   13740:	ldr	r0, [pc, #108]	; 137b4 <__assert_fail@plt+0x20b0>
   13744:	ldrb	r1, [r3, #4]
   13748:	bl	11350 <printf@plt>
   1374c:	ldr	r3, [r4]
   13750:	ldrb	r0, [r3, #4]
   13754:	bl	11398 <bfd_is_undefined_symclass@plt>
   13758:	cmp	r0, #0
   1375c:	beq	1376c <__assert_fail@plt+0x2068>
   13760:	ldr	r0, [pc, #80]	; 137b8 <__assert_fail@plt+0x20b4>
   13764:	pop	{r4, lr}
   13768:	b	11350 <printf@plt>
   1376c:	ldr	r3, [r4]
   13770:	ldr	r0, [r3]
   13774:	bl	13374 <__assert_fail@plt+0x1c70>
   13778:	mov	r0, #32
   1377c:	bl	11578 <putchar@plt>
   13780:	ldr	r3, [r4, #8]
   13784:	cmp	r3, #0
   13788:	beq	137a0 <__assert_fail@plt+0x209c>
   1378c:	ldr	r0, [r3, #28]
   13790:	cmp	r0, #0
   13794:	popeq	{r4, pc}
   13798:	pop	{r4, lr}
   1379c:	b	13374 <__assert_fail@plt+0x1c70>
   137a0:	ldr	r0, [r4, #4]
   137a4:	cmp	r0, #0
   137a8:	popeq	{r4, pc}
   137ac:	b	13798 <__assert_fail@plt+0x2094>
   137b0:	andeq	r6, r1, ip, ror fp
   137b4:	ldrdeq	r6, [r1], -r0
   137b8:	andeq	r6, r1, r4, lsl #12
   137bc:	ldr	r3, [r0]
   137c0:	push	{r4, r5, r6, r7, r8, lr}
   137c4:	mov	r4, r0
   137c8:	mov	r2, r1
   137cc:	ldr	r0, [pc, #632]	; 13a4c <__assert_fail@plt+0x2348>
   137d0:	ldr	r1, [r3, #8]
   137d4:	bl	11f60 <__assert_fail@plt+0x85c>
   137d8:	ldr	r3, [r4]
   137dc:	ldrb	r0, [r3, #4]
   137e0:	bl	11398 <bfd_is_undefined_symclass@plt>
   137e4:	cmp	r0, #0
   137e8:	beq	13934 <__assert_fail@plt+0x2230>
   137ec:	ldr	r3, [pc, #604]	; 13a50 <__assert_fail@plt+0x234c>
   137f0:	ldr	r3, [r3, #108]	; 0x6c
   137f4:	cmp	r3, #32
   137f8:	ldreq	r0, [pc, #596]	; 13a54 <__assert_fail@plt+0x2350>
   137fc:	ldrne	r0, [pc, #596]	; 13a58 <__assert_fail@plt+0x2354>
   13800:	bl	11350 <printf@plt>
   13804:	ldr	r3, [r4]
   13808:	ldr	r0, [pc, #588]	; 13a5c <__assert_fail@plt+0x2358>
   1380c:	ldrb	r1, [r3, #4]
   13810:	bl	11350 <printf@plt>
   13814:	ldr	r3, [r4]
   13818:	ldrb	r2, [r3, #4]
   1381c:	cmp	r2, #45	; 0x2d
   13820:	beq	13944 <__assert_fail@plt+0x2240>
   13824:	ldr	r5, [r4, #8]
   13828:	cmp	r5, #0
   1382c:	beq	13890 <__assert_fail@plt+0x218c>
   13830:	ldrb	r5, [r5, #36]	; 0x24
   13834:	and	r5, r5, #15
   13838:	cmp	r5, #6
   1383c:	bhi	13984 <__assert_fail@plt+0x2280>
   13840:	ldr	r3, [pc, #536]	; 13a60 <__assert_fail@plt+0x235c>
   13844:	add	r5, r3, r5, lsl #2
   13848:	ldr	r1, [r5, #16]
   1384c:	ldr	r0, [pc, #528]	; 13a64 <__assert_fail@plt+0x2360>
   13850:	bl	11350 <printf@plt>
   13854:	ldr	r3, [r4, #8]
   13858:	cmp	r3, #0
   1385c:	beq	138ec <__assert_fail@plt+0x21e8>
   13860:	ldr	r0, [r3, #28]
   13864:	cmp	r0, #0
   13868:	beq	138f8 <__assert_fail@plt+0x21f4>
   1386c:	bl	13374 <__assert_fail@plt+0x1c70>
   13870:	ldr	r3, [r4, #8]
   13874:	cmp	r3, #0
   13878:	beq	1391c <__assert_fail@plt+0x2218>
   1387c:	ldr	r3, [r3, #16]
   13880:	ldr	r0, [pc, #480]	; 13a68 <__assert_fail@plt+0x2364>
   13884:	pop	{r4, r5, r6, r7, r8, lr}
   13888:	ldr	r1, [r3]
   1388c:	b	11350 <printf@plt>
   13890:	ldr	r3, [r4, #12]
   13894:	cmp	r3, #0
   13898:	beq	139ec <__assert_fail@plt+0x22e8>
   1389c:	ldr	r6, [r3, #24]
   138a0:	ldrb	r3, [r6, #28]
   138a4:	cmp	r3, #103	; 0x67
   138a8:	beq	1397c <__assert_fail@plt+0x2278>
   138ac:	cmp	r3, #104	; 0x68
   138b0:	beq	13974 <__assert_fail@plt+0x2270>
   138b4:	cmp	r3, #100	; 0x64
   138b8:	beq	1396c <__assert_fail@plt+0x2268>
   138bc:	ldrh	r3, [r6, #26]
   138c0:	cmp	r3, #0
   138c4:	beq	139f8 <__assert_fail@plt+0x22f4>
   138c8:	asr	r3, r3, #4
   138cc:	and	r3, r3, #3
   138d0:	sub	r3, r3, #1
   138d4:	cmp	r3, #2
   138d8:	bhi	13a0c <__assert_fail@plt+0x2308>
   138dc:	ldr	r2, [pc, #380]	; 13a60 <__assert_fail@plt+0x235c>
   138e0:	add	r3, r2, r3, lsl #2
   138e4:	ldr	r1, [r3, #44]	; 0x2c
   138e8:	b	1384c <__assert_fail@plt+0x2148>
   138ec:	ldr	r0, [r4, #4]
   138f0:	cmp	r0, #0
   138f4:	bne	1386c <__assert_fail@plt+0x2168>
   138f8:	ldr	r3, [pc, #336]	; 13a50 <__assert_fail@plt+0x234c>
   138fc:	ldr	r3, [r3, #108]	; 0x6c
   13900:	cmp	r3, #32
   13904:	ldreq	r0, [pc, #328]	; 13a54 <__assert_fail@plt+0x2350>
   13908:	ldrne	r0, [pc, #328]	; 13a58 <__assert_fail@plt+0x2354>
   1390c:	bl	11350 <printf@plt>
   13910:	ldr	r3, [r4, #8]
   13914:	cmp	r3, #0
   13918:	bne	1387c <__assert_fail@plt+0x2178>
   1391c:	ldr	r3, [r4, #12]
   13920:	cmp	r3, #0
   13924:	bne	1387c <__assert_fail@plt+0x2178>
   13928:	ldr	r0, [pc, #316]	; 13a6c <__assert_fail@plt+0x2368>
   1392c:	pop	{r4, r5, r6, r7, r8, lr}
   13930:	b	11350 <printf@plt>
   13934:	ldr	r3, [r4]
   13938:	ldr	r0, [r3]
   1393c:	bl	13374 <__assert_fail@plt+0x1c70>
   13940:	b	13804 <__assert_fail@plt+0x2100>
   13944:	ldr	r1, [r3, #16]
   13948:	ldr	r0, [pc, #288]	; 13a70 <__assert_fail@plt+0x236c>
   1394c:	bl	11350 <printf@plt>
   13950:	ldr	r3, [r4]
   13954:	ldr	r0, [pc, #280]	; 13a74 <__assert_fail@plt+0x2370>
   13958:	ldrsh	r1, [r3, #14]
   1395c:	bl	11350 <printf@plt>
   13960:	ldr	r0, [pc, #260]	; 13a6c <__assert_fail@plt+0x2368>
   13964:	pop	{r4, r5, r6, r7, r8, lr}
   13968:	b	11350 <printf@plt>
   1396c:	ldr	r1, [pc, #260]	; 13a78 <__assert_fail@plt+0x2374>
   13970:	b	1384c <__assert_fail@plt+0x2148>
   13974:	ldr	r1, [pc, #256]	; 13a7c <__assert_fail@plt+0x2378>
   13978:	b	1384c <__assert_fail@plt+0x2148>
   1397c:	ldr	r1, [pc, #252]	; 13a80 <__assert_fail@plt+0x237c>
   13980:	b	1384c <__assert_fail@plt+0x2148>
   13984:	ldr	r6, [pc, #196]	; 13a50 <__assert_fail@plt+0x234c>
   13988:	ldr	r0, [r6, #116]	; 0x74
   1398c:	bl	113a4 <free@plt>
   13990:	sub	r3, r5, #13
   13994:	cmp	r3, #2
   13998:	bls	13a00 <__assert_fail@plt+0x22fc>
   1399c:	sub	r3, r5, #10
   139a0:	cmp	r3, #2
   139a4:	mov	r2, #5
   139a8:	ldrls	r1, [pc, #212]	; 13a84 <__assert_fail@plt+0x2380>
   139ac:	ldrhi	r1, [pc, #212]	; 13a88 <__assert_fail@plt+0x2384>
   139b0:	mov	r0, #0
   139b4:	bl	113f8 <dcgettext@plt>
   139b8:	mov	r2, r5
   139bc:	mov	r1, r0
   139c0:	add	r0, r6, #116	; 0x74
   139c4:	bl	11584 <asprintf@plt>
   139c8:	cmp	r0, #0
   139cc:	ldrge	r1, [r6, #116]	; 0x74
   139d0:	bge	1384c <__assert_fail@plt+0x2148>
   139d4:	bl	11554 <__errno_location@plt>
   139d8:	ldr	r0, [r0]
   139dc:	bl	115f0 <xstrerror@plt>
   139e0:	mov	r1, r0
   139e4:	ldr	r0, [pc, #160]	; 13a8c <__assert_fail@plt+0x2388>
   139e8:	bl	141a0 <__assert_fail@plt+0x2a9c>
   139ec:	ldr	r0, [pc, #156]	; 13a90 <__assert_fail@plt+0x238c>
   139f0:	bl	11350 <printf@plt>
   139f4:	b	13854 <__assert_fail@plt+0x2150>
   139f8:	ldr	r1, [pc, #148]	; 13a94 <__assert_fail@plt+0x2390>
   139fc:	b	1384c <__assert_fail@plt+0x2148>
   13a00:	mov	r2, #5
   13a04:	ldr	r1, [pc, #140]	; 13a98 <__assert_fail@plt+0x2394>
   13a08:	b	139b0 <__assert_fail@plt+0x22ac>
   13a0c:	ldr	r7, [pc, #60]	; 13a50 <__assert_fail@plt+0x234c>
   13a10:	ldr	r0, [r7, #120]	; 0x78
   13a14:	bl	113a4 <free@plt>
   13a18:	mov	r2, #5
   13a1c:	ldr	r1, [pc, #120]	; 13a9c <__assert_fail@plt+0x2398>
   13a20:	mov	r0, r5
   13a24:	bl	113f8 <dcgettext@plt>
   13a28:	ldrh	r3, [r6, #26]
   13a2c:	ldrb	r2, [r6, #28]
   13a30:	mov	r1, r0
   13a34:	add	r0, r7, #120	; 0x78
   13a38:	bl	11584 <asprintf@plt>
   13a3c:	cmp	r0, #0
   13a40:	ldrge	r1, [r7, #120]	; 0x78
   13a44:	bge	1384c <__assert_fail@plt+0x2148>
   13a48:	b	139d4 <__assert_fail@plt+0x22d0>
   13a4c:	strdeq	r6, [r1], -r4
   13a50:	andeq	r7, r2, r8, asr #12
   13a54:	andeq	r6, r1, r4, lsl #12
   13a58:	strdeq	r6, [r1], -ip
   13a5c:	andeq	r6, r1, r0, lsl r6
   13a60:			; <UNDEFINED> instruction: 0x00015ab4
   13a64:	andeq	r6, r1, ip, ror #12
   13a68:	muleq	r1, ip, r6
   13a6c:	andeq	r6, r1, r4, lsr #12
   13a70:	andeq	r6, r1, ip, lsl r6
   13a74:	ldrdeq	r7, [r2], -r0
   13a78:	andeq	r6, r1, r4, ror #11
   13a7c:	ldrdeq	r6, [r1], -ip
   13a80:	ldrdeq	r6, [r1], -r4
   13a84:	andeq	r6, r1, r8, asr #12
   13a88:	andeq	r6, r1, ip, asr r6
   13a8c:	muleq	r1, r8, fp
   13a90:	andeq	r6, r1, r8, lsl #13
   13a94:	andeq	r6, r1, ip, ror #11
   13a98:	andeq	r6, r1, ip, lsr #12
   13a9c:	andeq	r6, r1, r4, ror r6
   13aa0:	push	{r4, r5, r6, lr}
   13aa4:	mov	r5, r0
   13aa8:	bl	11488 <bfd_get_arch_size@plt>
   13aac:	ldr	r4, [pc, #80]	; 13b04 <__assert_fail@plt+0x2400>
   13ab0:	cmn	r0, #1
   13ab4:	str	r0, [r4, #108]	; 0x6c
   13ab8:	popne	{r4, r5, r6, pc}
   13abc:	ldr	r3, [r5, #4]
   13ac0:	ldr	r1, [pc, #64]	; 13b08 <__assert_fail@plt+0x2404>
   13ac4:	ldr	r5, [r3]
   13ac8:	mov	r0, r5
   13acc:	bl	11308 <strstr@plt>
   13ad0:	cmp	r0, #0
   13ad4:	beq	13ae4 <__assert_fail@plt+0x23e0>
   13ad8:	mov	r3, #64	; 0x40
   13adc:	str	r3, [r4, #108]	; 0x6c
   13ae0:	pop	{r4, r5, r6, pc}
   13ae4:	mov	r0, r5
   13ae8:	ldr	r1, [pc, #28]	; 13b0c <__assert_fail@plt+0x2408>
   13aec:	bl	11338 <strcmp@plt>
   13af0:	cmp	r0, #0
   13af4:	beq	13ad8 <__assert_fail@plt+0x23d4>
   13af8:	mov	r3, #32
   13afc:	str	r3, [r4, #108]	; 0x6c
   13b00:	pop	{r4, r5, r6, pc}
   13b04:	andeq	r7, r2, r8, asr #12
   13b08:	andeq	r6, r1, r8, lsr #13
   13b0c:	andeq	r6, r1, ip, lsr #13
   13b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b14:	sub	sp, sp, #12
   13b18:	mov	r8, r0
   13b1c:	bl	148a8 <__assert_fail@plt+0x31a4>
   13b20:	cmp	r0, #1
   13b24:	sbcs	r3, r1, #0
   13b28:	blt	13cd8 <__assert_fail@plt+0x25d4>
   13b2c:	ldr	r6, [pc, #672]	; 13dd4 <__assert_fail@plt+0x26d0>
   13b30:	ldr	r3, [pc, #672]	; 13dd8 <__assert_fail@plt+0x26d4>
   13b34:	mov	r0, r8
   13b38:	ldr	r1, [r6, #124]	; 0x7c
   13b3c:	cmp	r1, #0
   13b40:	moveq	r1, r3
   13b44:	bl	113d4 <bfd_openr@plt>
   13b48:	subs	r4, r0, #0
   13b4c:	beq	13db4 <__assert_fail@plt+0x26b0>
   13b50:	ldr	r3, [r6, #32]
   13b54:	mov	r1, #2
   13b58:	cmp	r3, #0
   13b5c:	mov	r0, r4
   13b60:	ldrne	r3, [r4, #40]	; 0x28
   13b64:	orrne	r3, r3, #1048576	; 0x100000
   13b68:	strne	r3, [r4, #40]	; 0x28
   13b6c:	bl	1168c <bfd_check_format@plt>
   13b70:	subs	r7, r0, #0
   13b74:	beq	13c40 <__assert_fail@plt+0x253c>
   13b78:	ldr	r9, [pc, #604]	; 13ddc <__assert_fail@plt+0x26d8>
   13b7c:	ldr	r0, [r4]
   13b80:	ldr	r3, [r9]
   13b84:	ldr	r3, [r3, #4]
   13b88:	blx	r3
   13b8c:	ldr	r3, [r6, #128]	; 0x80
   13b90:	cmp	r3, #0
   13b94:	bne	13d10 <__assert_fail@plt+0x260c>
   13b98:	mov	r7, #0
   13b9c:	mov	sl, r7
   13ba0:	b	13bf0 <__assert_fail@plt+0x24ec>
   13ba4:	mov	r0, r5
   13ba8:	bl	13aa0 <__assert_fail@plt+0x239c>
   13bac:	ldr	r3, [r9]
   13bb0:	ldr	r1, [r5]
   13bb4:	ldr	r0, [r4]
   13bb8:	ldr	r3, [r3, #8]
   13bbc:	blx	r3
   13bc0:	mov	r1, r4
   13bc4:	mov	r0, r5
   13bc8:	bl	12a3c <__assert_fail@plt+0x1338>
   13bcc:	cmp	r7, #0
   13bd0:	beq	13bec <__assert_fail@plt+0x24e8>
   13bd4:	mov	r0, r7
   13bd8:	bl	11614 <bfd_close@plt>
   13bdc:	cmp	r7, r5
   13be0:	str	sl, [r6, #40]	; 0x28
   13be4:	str	sl, [r6, #48]	; 0x30
   13be8:	beq	13cac <__assert_fail@plt+0x25a8>
   13bec:	mov	r7, r5
   13bf0:	mov	r1, r7
   13bf4:	mov	r0, r4
   13bf8:	bl	11698 <bfd_openr_next_archived_file@plt>
   13bfc:	subs	r5, r0, #0
   13c00:	beq	13c88 <__assert_fail@plt+0x2584>
   13c04:	add	r2, sp, #4
   13c08:	mov	r1, #1
   13c0c:	bl	11644 <bfd_check_format_matches@plt>
   13c10:	cmp	r0, #0
   13c14:	bne	13ba4 <__assert_fail@plt+0x24a0>
   13c18:	ldr	r0, [r5]
   13c1c:	bl	13efc <__assert_fail@plt+0x27f8>
   13c20:	bl	11434 <bfd_get_error@plt>
   13c24:	cmp	r0, #13
   13c28:	bne	13bcc <__assert_fail@plt+0x24c8>
   13c2c:	ldr	r0, [sp, #4]
   13c30:	bl	1423c <__assert_fail@plt+0x2b38>
   13c34:	ldr	r0, [sp, #4]
   13c38:	bl	113a4 <free@plt>
   13c3c:	b	13bcc <__assert_fail@plt+0x24c8>
   13c40:	add	r2, sp, #4
   13c44:	mov	r1, #1
   13c48:	mov	r0, r4
   13c4c:	bl	11644 <bfd_check_format_matches@plt>
   13c50:	subs	r5, r0, #0
   13c54:	beq	13ce8 <__assert_fail@plt+0x25e4>
   13c58:	mov	r0, r4
   13c5c:	bl	13aa0 <__assert_fail@plt+0x239c>
   13c60:	ldr	r3, [pc, #372]	; 13ddc <__assert_fail@plt+0x26d8>
   13c64:	mov	r0, r8
   13c68:	mov	r5, #1
   13c6c:	ldr	r3, [r3]
   13c70:	ldr	r3, [r3]
   13c74:	blx	r3
   13c78:	mov	r1, r7
   13c7c:	mov	r0, r4
   13c80:	bl	12a3c <__assert_fail@plt+0x1338>
   13c84:	b	13cb0 <__assert_fail@plt+0x25ac>
   13c88:	bl	11434 <bfd_get_error@plt>
   13c8c:	cmp	r0, #9
   13c90:	bne	13dcc <__assert_fail@plt+0x26c8>
   13c94:	cmp	r7, #0
   13c98:	beq	13cac <__assert_fail@plt+0x25a8>
   13c9c:	mov	r0, r7
   13ca0:	bl	11614 <bfd_close@plt>
   13ca4:	str	r5, [r6, #40]	; 0x28
   13ca8:	str	r5, [r6, #48]	; 0x30
   13cac:	mov	r5, #1
   13cb0:	mov	r0, r4
   13cb4:	bl	11614 <bfd_close@plt>
   13cb8:	cmp	r0, #0
   13cbc:	movne	r3, #0
   13cc0:	strne	r3, [r6, #40]	; 0x28
   13cc4:	strne	r3, [r6, #48]	; 0x30
   13cc8:	beq	13dc4 <__assert_fail@plt+0x26c0>
   13ccc:	mov	r0, r5
   13cd0:	add	sp, sp, #12
   13cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd8:	mov	r5, #0
   13cdc:	mov	r0, r5
   13ce0:	add	sp, sp, #12
   13ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce8:	mov	r0, r8
   13cec:	bl	13efc <__assert_fail@plt+0x27f8>
   13cf0:	bl	11434 <bfd_get_error@plt>
   13cf4:	cmp	r0, #13
   13cf8:	bne	13cb0 <__assert_fail@plt+0x25ac>
   13cfc:	ldr	r0, [sp, #4]
   13d00:	bl	1423c <__assert_fail@plt+0x2b38>
   13d04:	ldr	r0, [sp, #4]
   13d08:	bl	113a4 <free@plt>
   13d0c:	b	13cb0 <__assert_fail@plt+0x25ac>
   13d10:	add	r2, sp, #4
   13d14:	mvn	r1, #0
   13d18:	mov	r0, r4
   13d1c:	bl	116f8 <bfd_get_next_mapent@plt>
   13d20:	cmn	r0, #1
   13d24:	mov	r5, r0
   13d28:	beq	13b98 <__assert_fail@plt+0x2494>
   13d2c:	mov	r2, #5
   13d30:	ldr	r1, [pc, #168]	; 13de0 <__assert_fail@plt+0x26dc>
   13d34:	mov	r0, #0
   13d38:	bl	113f8 <dcgettext@plt>
   13d3c:	bl	11350 <printf@plt>
   13d40:	ldr	sl, [pc, #156]	; 13de4 <__assert_fail@plt+0x26e0>
   13d44:	ldr	r7, [pc, #156]	; 13de8 <__assert_fail@plt+0x26e4>
   13d48:	b	13d90 <__assert_fail@plt+0x268c>
   13d4c:	ldr	r3, [sp, #4]
   13d50:	ldr	r1, [r3]
   13d54:	cmp	r1, #0
   13d58:	beq	13d74 <__assert_fail@plt+0x2670>
   13d5c:	mov	r0, sl
   13d60:	mov	r2, r4
   13d64:	bl	11f60 <__assert_fail@plt+0x85c>
   13d68:	ldr	r1, [fp]
   13d6c:	mov	r0, r7
   13d70:	bl	11350 <printf@plt>
   13d74:	mov	r1, r5
   13d78:	add	r2, sp, #4
   13d7c:	mov	r0, r4
   13d80:	bl	116f8 <bfd_get_next_mapent@plt>
   13d84:	cmn	r0, #1
   13d88:	mov	r5, r0
   13d8c:	beq	13b98 <__assert_fail@plt+0x2494>
   13d90:	ldr	r3, [r4, #4]
   13d94:	mov	r1, r5
   13d98:	mov	r0, r4
   13d9c:	ldr	r3, [r3, #248]	; 0xf8
   13da0:	blx	r3
   13da4:	subs	fp, r0, #0
   13da8:	bne	13d4c <__assert_fail@plt+0x2648>
   13dac:	ldr	r0, [pc, #56]	; 13dec <__assert_fail@plt+0x26e8>
   13db0:	bl	14130 <__assert_fail@plt+0x2a2c>
   13db4:	mov	r0, r8
   13db8:	bl	13efc <__assert_fail@plt+0x27f8>
   13dbc:	mov	r5, r4
   13dc0:	b	13ccc <__assert_fail@plt+0x25c8>
   13dc4:	mov	r0, r8
   13dc8:	bl	14130 <__assert_fail@plt+0x2a2c>
   13dcc:	ldr	r0, [r4]
   13dd0:	bl	14130 <__assert_fail@plt+0x2a2c>
   13dd4:	andeq	r7, r2, r8, asr #12
   13dd8:			; <UNDEFINED> instruction: 0x000166b0
   13ddc:	andeq	r7, r2, r8, ror r1
   13de0:			; <UNDEFINED> instruction: 0x000166b8
   13de4:	muleq	r1, r8, fp
   13de8:	andeq	r6, r1, r4, ror #13
   13dec:	andeq	r6, r1, ip, asr #13
   13df0:	bx	lr
   13df4:	ldr	r3, [pc, #52]	; 13e30 <__assert_fail@plt+0x272c>
   13df8:	ldr	r3, [r3]
   13dfc:	cmp	r3, #0
   13e00:	bxeq	lr
   13e04:	cmp	r0, #0
   13e08:	push	{r4, lr}
   13e0c:	mov	r4, r1
   13e10:	beq	13e20 <__assert_fail@plt+0x271c>
   13e14:	ldr	r1, [r0]
   13e18:	ldr	r0, [pc, #20]	; 13e34 <__assert_fail@plt+0x2730>
   13e1c:	bl	11350 <printf@plt>
   13e20:	ldr	r1, [r4]
   13e24:	ldr	r0, [pc, #8]	; 13e34 <__assert_fail@plt+0x2730>
   13e28:	pop	{r4, lr}
   13e2c:	b	11350 <printf@plt>
   13e30:	andeq	r7, r2, r8, asr #12
   13e34:	muleq	r1, ip, r4
   13e38:	push	{r4, r5, r6, lr}
   13e3c:	mov	r1, #47	; 0x2f
   13e40:	mov	r6, r0
   13e44:	bl	115d8 <strrchr@plt>
   13e48:	cmp	r0, #0
   13e4c:	beq	13e9c <__assert_fail@plt+0x2798>
   13e50:	sub	r4, r0, r6
   13e54:	add	r0, r4, #11
   13e58:	bl	1144c <xmalloc@plt>
   13e5c:	mov	r2, r4
   13e60:	mov	r1, r6
   13e64:	mov	r5, r0
   13e68:	bl	113c8 <memcpy@plt>
   13e6c:	add	r2, r4, #1
   13e70:	add	r2, r5, r2
   13e74:	mov	r3, #47	; 0x2f
   13e78:	strb	r3, [r5, r4]
   13e7c:	ldr	r3, [pc, #44]	; 13eb0 <__assert_fail@plt+0x27ac>
   13e80:	ldm	r3!, {r0, r1}
   13e84:	ldrb	r3, [r3]
   13e88:	str	r0, [r2]
   13e8c:	str	r1, [r2, #4]
   13e90:	strb	r3, [r2, #8]
   13e94:	mov	r0, r5
   13e98:	pop	{r4, r5, r6, pc}
   13e9c:	mov	r0, #9
   13ea0:	bl	1144c <xmalloc@plt>
   13ea4:	mov	r5, r0
   13ea8:	mov	r2, r0
   13eac:	b	13e7c <__assert_fail@plt+0x2778>
   13eb0:			; <UNDEFINED> instruction: 0x000169b0
   13eb4:	subs	r3, r0, #0
   13eb8:	beq	13ed4 <__assert_fail@plt+0x27d0>
   13ebc:	cmp	r3, #1
   13ec0:	beq	13ee0 <__assert_fail@plt+0x27dc>
   13ec4:	mov	r2, #5
   13ec8:	ldr	r1, [pc, #32]	; 13ef0 <__assert_fail@plt+0x27ec>
   13ecc:	mov	r0, #0
   13ed0:	b	113f8 <dcgettext@plt>
   13ed4:	mov	r2, #5
   13ed8:	ldr	r1, [pc, #20]	; 13ef4 <__assert_fail@plt+0x27f0>
   13edc:	b	113f8 <dcgettext@plt>
   13ee0:	mov	r2, #5
   13ee4:	ldr	r1, [pc, #12]	; 13ef8 <__assert_fail@plt+0x27f4>
   13ee8:	mov	r0, #0
   13eec:	b	113f8 <dcgettext@plt>
   13ef0:	ldrdeq	r6, [r1], -r8
   13ef4:			; <UNDEFINED> instruction: 0x000169bc
   13ef8:	andeq	r6, r1, r8, asr #19
   13efc:	push	{r4, r5, lr}
   13f00:	sub	sp, sp, #12
   13f04:	mov	r4, r0
   13f08:	bl	11434 <bfd_get_error@plt>
   13f0c:	bl	1165c <bfd_errmsg@plt>
   13f10:	ldr	r3, [pc, #84]	; 13f6c <__assert_fail@plt+0x2868>
   13f14:	mov	r5, r0
   13f18:	ldr	r0, [r3]
   13f1c:	bl	11368 <fflush@plt>
   13f20:	cmp	r4, #0
   13f24:	ldr	r2, [pc, #68]	; 13f70 <__assert_fail@plt+0x286c>
   13f28:	ldr	r1, [pc, #68]	; 13f74 <__assert_fail@plt+0x2870>
   13f2c:	beq	13f50 <__assert_fail@plt+0x284c>
   13f30:	str	r5, [sp]
   13f34:	mov	r3, r4
   13f38:	ldr	r2, [r2]
   13f3c:	ldr	r0, [r1]
   13f40:	ldr	r1, [pc, #48]	; 13f78 <__assert_fail@plt+0x2874>
   13f44:	bl	1153c <fprintf@plt>
   13f48:	add	sp, sp, #12
   13f4c:	pop	{r4, r5, pc}
   13f50:	ldr	r0, [r1]
   13f54:	mov	r3, r5
   13f58:	ldr	r2, [r2]
   13f5c:	ldr	r1, [pc, #24]	; 13f7c <__assert_fail@plt+0x2878>
   13f60:	add	sp, sp, #12
   13f64:	pop	{r4, r5, lr}
   13f68:	b	1153c <fprintf@plt>
   13f6c:	andeq	r7, r2, r8, lsr r6
   13f70:	ldrdeq	r7, [r2], -ip
   13f74:	muleq	r2, r0, r3
   13f78:	andeq	r6, r1, ip, ror #19
   13f7c:	strdeq	r6, [r1], -r0
   13f80:	ldr	r3, [r1, #8]
   13f84:	push	{r4, r5, r6, r7, r8, lr}
   13f88:	add	r3, r3, #1
   13f8c:	mov	r6, r1
   13f90:	mov	r4, r0
   13f94:	str	r3, [r1, #8]
   13f98:	ldr	r0, [r1, #12]
   13f9c:	add	r1, r3, r3, lsl #1
   13fa0:	rsb	r1, r3, r1, lsl #3
   13fa4:	lsl	r2, r1, #2
   13fa8:	cmp	r0, r2
   13fac:	bcs	13ff4 <__assert_fail@plt+0x28f0>
   13fb0:	cmp	r3, #63	; 0x3f
   13fb4:	lslgt	r5, r1, #3
   13fb8:	movle	r5, #11776	; 0x2e00
   13fbc:	mov	r1, r5
   13fc0:	ldr	r0, [r6, #16]
   13fc4:	bl	11410 <xrealloc@plt>
   13fc8:	ldr	r2, [r6, #12]
   13fcc:	mov	r1, #0
   13fd0:	str	r0, [r6, #16]
   13fd4:	add	r0, r0, r2
   13fd8:	sub	r2, r5, r2
   13fdc:	bl	1156c <memset@plt>
   13fe0:	ldr	r3, [r6, #8]
   13fe4:	str	r5, [r6, #12]
   13fe8:	add	r2, r3, r3, lsl #1
   13fec:	rsb	r3, r3, r2, lsl #3
   13ff0:	lsl	r2, r3, #2
   13ff4:	ldr	r3, [r6, #16]
   13ff8:	ldr	r1, [r4]
   13ffc:	add	r3, r3, r2
   14000:	mov	r0, #0
   14004:	str	r1, [r3, #-92]	; 0xffffffa4
   14008:	mov	r2, #5
   1400c:	ldr	r1, [pc, #276]	; 14128 <__assert_fail@plt+0x2a24>
   14010:	bl	113f8 <dcgettext@plt>
   14014:	ldr	r7, [r4]
   14018:	mov	r5, r0
   1401c:	ldr	r0, [r4, #12]
   14020:	bl	13eb4 <__assert_fail@plt+0x27b0>
   14024:	mov	r8, r0
   14028:	ldr	r0, [r4, #8]
   1402c:	bl	13eb4 <__assert_fail@plt+0x27b0>
   14030:	mov	r2, r8
   14034:	mov	r1, r7
   14038:	mov	r3, r0
   1403c:	mov	r0, r5
   14040:	bl	11350 <printf@plt>
   14044:	ldr	r1, [r4]
   14048:	ldr	r0, [r6]
   1404c:	bl	115a8 <bfd_openw@plt>
   14050:	subs	r5, r0, #0
   14054:	beq	14114 <__assert_fail@plt+0x2a10>
   14058:	mov	r1, #1
   1405c:	bl	114f4 <bfd_set_format@plt>
   14060:	cmp	r0, #0
   14064:	beq	140f4 <__assert_fail@plt+0x29f0>
   14068:	ldr	r8, [pc, #188]	; 1412c <__assert_fail@plt+0x2a28>
   1406c:	mov	r4, #2
   14070:	mov	r7, #1
   14074:	b	14084 <__assert_fail@plt+0x2980>
   14078:	add	r4, r4, #1
   1407c:	cmp	r4, #89	; 0x59
   14080:	beq	140e4 <__assert_fail@plt+0x29e0>
   14084:	ldr	r3, [r5, #4]
   14088:	mov	r2, #0
   1408c:	mov	r1, r4
   14090:	ldr	r3, [r3, #340]	; 0x154
   14094:	mov	r0, r5
   14098:	blx	r3
   1409c:	cmp	r0, #0
   140a0:	beq	14078 <__assert_fail@plt+0x2974>
   140a4:	mov	r1, #0
   140a8:	mov	r0, r4
   140ac:	bl	11548 <bfd_printable_arch_mach@plt>
   140b0:	mov	r1, r0
   140b4:	mov	r0, r8
   140b8:	bl	11350 <printf@plt>
   140bc:	ldr	r2, [r6, #8]
   140c0:	ldr	r3, [r6, #16]
   140c4:	add	r1, r2, r2, lsl #1
   140c8:	rsb	r2, r2, r1, lsl #3
   140cc:	add	r3, r3, r2, lsl #2
   140d0:	add	r3, r4, r3
   140d4:	add	r4, r4, #1
   140d8:	cmp	r4, #89	; 0x59
   140dc:	strb	r7, [r3, #-90]	; 0xffffffa6
   140e0:	bne	14084 <__assert_fail@plt+0x2980>
   140e4:	mov	r0, r5
   140e8:	bl	11524 <bfd_close_all_done@plt>
   140ec:	ldr	r0, [r6, #4]
   140f0:	pop	{r4, r5, r6, r7, r8, pc}
   140f4:	bl	11434 <bfd_get_error@plt>
   140f8:	cmp	r0, #5
   140fc:	beq	140e4 <__assert_fail@plt+0x29e0>
   14100:	ldr	r0, [r4]
   14104:	bl	13efc <__assert_fail@plt+0x27f8>
   14108:	mov	r3, #1
   1410c:	str	r3, [r6, #4]
   14110:	b	140e4 <__assert_fail@plt+0x29e0>
   14114:	ldr	r0, [r6]
   14118:	bl	13efc <__assert_fail@plt+0x27f8>
   1411c:	mov	r0, #1
   14120:	str	r0, [r6, #4]
   14124:	pop	{r4, r5, r6, r7, r8, pc}
   14128:	strdeq	r6, [r1], -r8
   1412c:	andeq	r6, r1, r4, lsl sl
   14130:	push	{r4, lr}
   14134:	bl	13efc <__assert_fail@plt+0x27f8>
   14138:	mov	r0, #1
   1413c:	bl	11608 <xexit@plt>
   14140:	ldr	r3, [pc, #72]	; 14190 <__assert_fail@plt+0x2a8c>
   14144:	push	{r4, r5, r6, lr}
   14148:	mov	r5, r0
   1414c:	ldr	r0, [r3]
   14150:	mov	r6, r1
   14154:	ldr	r4, [pc, #56]	; 14194 <__assert_fail@plt+0x2a90>
   14158:	bl	11368 <fflush@plt>
   1415c:	ldr	r3, [pc, #52]	; 14198 <__assert_fail@plt+0x2a94>
   14160:	ldr	r1, [pc, #52]	; 1419c <__assert_fail@plt+0x2a98>
   14164:	ldr	r0, [r4]
   14168:	ldr	r2, [r3]
   1416c:	bl	1153c <fprintf@plt>
   14170:	mov	r1, r5
   14174:	mov	r2, r6
   14178:	ldr	r0, [r4]
   1417c:	bl	115e4 <vfprintf@plt>
   14180:	ldr	r1, [r4]
   14184:	mov	r0, #10
   14188:	pop	{r4, r5, r6, lr}
   1418c:	b	11638 <putc@plt>
   14190:	andeq	r7, r2, r8, lsr r6
   14194:	muleq	r2, r0, r3
   14198:	ldrdeq	r7, [r2], -ip
   1419c:	andeq	r6, r1, ip, lsl #9
   141a0:	push	{r0, r1, r2, r3}
   141a4:	push	{lr}		; (str lr, [sp, #-4]!)
   141a8:	sub	sp, sp, #12
   141ac:	add	r3, sp, #20
   141b0:	ldr	r0, [sp, #16]
   141b4:	mov	r1, r3
   141b8:	str	r3, [sp, #4]
   141bc:	bl	14140 <__assert_fail@plt+0x2a3c>
   141c0:	mov	r0, #1
   141c4:	bl	11608 <xexit@plt>
   141c8:	push	{r0, r1, r2, r3}
   141cc:	push	{lr}		; (str lr, [sp, #-4]!)
   141d0:	sub	sp, sp, #12
   141d4:	add	r3, sp, #20
   141d8:	mov	r1, r3
   141dc:	ldr	r0, [sp, #16]
   141e0:	str	r3, [sp, #4]
   141e4:	bl	14140 <__assert_fail@plt+0x2a3c>
   141e8:	add	sp, sp, #12
   141ec:	pop	{lr}		; (ldr lr, [sp], #4)
   141f0:	add	sp, sp, #16
   141f4:	bx	lr
   141f8:	push	{r4, lr}
   141fc:	ldr	r0, [pc, #48]	; 14234 <__assert_fail@plt+0x2b30>
   14200:	bl	1138c <bfd_set_default_target@plt>
   14204:	cmp	r0, #0
   14208:	popne	{r4, pc}
   1420c:	mov	r2, #5
   14210:	ldr	r1, [pc, #32]	; 14238 <__assert_fail@plt+0x2b34>
   14214:	bl	113f8 <dcgettext@plt>
   14218:	mov	r4, r0
   1421c:	bl	11434 <bfd_get_error@plt>
   14220:	bl	1165c <bfd_errmsg@plt>
   14224:	ldr	r1, [pc, #8]	; 14234 <__assert_fail@plt+0x2b30>
   14228:	mov	r2, r0
   1422c:	mov	r0, r4
   14230:	bl	141a0 <__assert_fail@plt+0x2a9c>
   14234:	andeq	r6, r1, ip, lsl sl
   14238:	andeq	r6, r1, r8, lsr sl
   1423c:	ldr	r3, [pc, #112]	; 142b4 <__assert_fail@plt+0x2bb0>
   14240:	push	{r4, r5, r6, lr}
   14244:	mov	r4, r0
   14248:	ldr	r5, [pc, #104]	; 142b8 <__assert_fail@plt+0x2bb4>
   1424c:	ldr	r0, [r3]
   14250:	bl	11368 <fflush@plt>
   14254:	mov	r2, #5
   14258:	ldr	r1, [pc, #92]	; 142bc <__assert_fail@plt+0x2bb8>
   1425c:	mov	r0, #0
   14260:	ldr	r6, [r5]
   14264:	bl	113f8 <dcgettext@plt>
   14268:	ldr	r3, [pc, #80]	; 142c0 <__assert_fail@plt+0x2bbc>
   1426c:	ldr	r2, [r3]
   14270:	mov	r1, r0
   14274:	mov	r0, r6
   14278:	bl	1153c <fprintf@plt>
   1427c:	ldr	r2, [r4]
   14280:	cmp	r2, #0
   14284:	beq	142a4 <__assert_fail@plt+0x2ba0>
   14288:	ldr	r6, [pc, #52]	; 142c4 <__assert_fail@plt+0x2bc0>
   1428c:	mov	r1, r6
   14290:	ldr	r0, [r5]
   14294:	bl	1153c <fprintf@plt>
   14298:	ldr	r2, [r4, #4]!
   1429c:	cmp	r2, #0
   142a0:	bne	1428c <__assert_fail@plt+0x2b88>
   142a4:	ldr	r1, [r5]
   142a8:	mov	r0, #10
   142ac:	pop	{r4, r5, r6, lr}
   142b0:	b	115fc <fputc@plt>
   142b4:	andeq	r7, r2, r8, lsr r6
   142b8:	muleq	r2, r0, r3
   142bc:	andeq	r6, r1, r4, ror #20
   142c0:	ldrdeq	r7, [r2], -ip
   142c4:	ldrdeq	r6, [r1], -r8
   142c8:	push	{r4, r5, r6, r7, r8, lr}
   142cc:	subs	r4, r0, #0
   142d0:	mov	r2, #5
   142d4:	mov	r5, r1
   142d8:	beq	14344 <__assert_fail@plt+0x2c40>
   142dc:	ldr	r1, [pc, #120]	; 1435c <__assert_fail@plt+0x2c58>
   142e0:	mov	r0, #0
   142e4:	bl	113f8 <dcgettext@plt>
   142e8:	mov	r2, r4
   142ec:	mov	r1, r0
   142f0:	mov	r0, r5
   142f4:	bl	1153c <fprintf@plt>
   142f8:	bl	11428 <bfd_target_list@plt>
   142fc:	ldr	r2, [r0]
   14300:	mov	r7, r0
   14304:	cmp	r2, #0
   14308:	beq	1432c <__assert_fail@plt+0x2c28>
   1430c:	ldr	r6, [pc, #76]	; 14360 <__assert_fail@plt+0x2c5c>
   14310:	mov	r4, r0
   14314:	mov	r1, r6
   14318:	mov	r0, r5
   1431c:	bl	1153c <fprintf@plt>
   14320:	ldr	r2, [r4, #4]!
   14324:	cmp	r2, #0
   14328:	bne	14314 <__assert_fail@plt+0x2c10>
   1432c:	mov	r1, r5
   14330:	mov	r0, #10
   14334:	bl	115fc <fputc@plt>
   14338:	mov	r0, r7
   1433c:	pop	{r4, r5, r6, r7, r8, lr}
   14340:	b	113a4 <free@plt>
   14344:	ldr	r1, [pc, #24]	; 14364 <__assert_fail@plt+0x2c60>
   14348:	bl	113f8 <dcgettext@plt>
   1434c:	mov	r1, r0
   14350:	mov	r0, r5
   14354:	bl	1153c <fprintf@plt>
   14358:	b	142f8 <__assert_fail@plt+0x2bf4>
   1435c:	muleq	r1, r0, sl
   14360:	ldrdeq	r6, [r1], -r8
   14364:	andeq	r6, r1, ip, ror sl
   14368:	push	{r4, r5, r6, r7, r8, lr}
   1436c:	subs	r4, r0, #0
   14370:	mov	r2, #5
   14374:	mov	r5, r1
   14378:	beq	143e4 <__assert_fail@plt+0x2ce0>
   1437c:	ldr	r1, [pc, #120]	; 143fc <__assert_fail@plt+0x2cf8>
   14380:	mov	r0, #0
   14384:	bl	113f8 <dcgettext@plt>
   14388:	mov	r2, r4
   1438c:	mov	r1, r0
   14390:	mov	r0, r5
   14394:	bl	1153c <fprintf@plt>
   14398:	bl	11374 <bfd_arch_list@plt>
   1439c:	ldr	r2, [r0]
   143a0:	mov	r7, r0
   143a4:	cmp	r2, #0
   143a8:	beq	143cc <__assert_fail@plt+0x2cc8>
   143ac:	ldr	r6, [pc, #76]	; 14400 <__assert_fail@plt+0x2cfc>
   143b0:	mov	r4, r0
   143b4:	mov	r1, r6
   143b8:	mov	r0, r5
   143bc:	bl	1153c <fprintf@plt>
   143c0:	ldr	r2, [r4, #4]!
   143c4:	cmp	r2, #0
   143c8:	bne	143b4 <__assert_fail@plt+0x2cb0>
   143cc:	mov	r1, r5
   143d0:	mov	r0, #10
   143d4:	bl	115fc <fputc@plt>
   143d8:	mov	r0, r7
   143dc:	pop	{r4, r5, r6, r7, r8, lr}
   143e0:	b	113a4 <free@plt>
   143e4:	ldr	r1, [pc, #24]	; 14404 <__assert_fail@plt+0x2d00>
   143e8:	bl	113f8 <dcgettext@plt>
   143ec:	mov	r1, r0
   143f0:	mov	r0, r5
   143f4:	bl	1153c <fprintf@plt>
   143f8:	b	14398 <__assert_fail@plt+0x2c94>
   143fc:	andeq	r6, r1, r4, asr #21
   14400:	ldrdeq	r6, [r1], -r8
   14404:	andeq	r6, r1, r8, lsr #21
   14408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1440c:	mov	r2, #5
   14410:	sub	sp, sp, #44	; 0x2c
   14414:	ldr	r1, [pc, #668]	; 146b8 <__assert_fail@plt+0x2fb4>
   14418:	mov	r0, #0
   1441c:	bl	113f8 <dcgettext@plt>
   14420:	ldr	r1, [pc, #660]	; 146bc <__assert_fail@plt+0x2fb8>
   14424:	bl	11350 <printf@plt>
   14428:	mov	r0, #0
   1442c:	bl	1571c <__assert_fail@plt+0x4018>
   14430:	mov	r3, #0
   14434:	add	r1, sp, #20
   14438:	str	r3, [sp, #24]
   1443c:	str	r3, [sp, #28]
   14440:	str	r3, [sp, #32]
   14444:	str	r3, [sp, #36]	; 0x24
   14448:	str	r0, [sp, #20]
   1444c:	ldr	r0, [pc, #620]	; 146c0 <__assert_fail@plt+0x2fbc>
   14450:	bl	11560 <bfd_iterate_over_targets@plt>
   14454:	ldr	r0, [sp, #20]
   14458:	bl	11404 <unlink@plt>
   1445c:	ldr	r0, [sp, #20]
   14460:	bl	113a4 <free@plt>
   14464:	ldr	r4, [sp, #24]
   14468:	cmp	r4, #0
   1446c:	beq	1447c <__assert_fail@plt+0x2d78>
   14470:	mov	r0, r4
   14474:	add	sp, sp, #44	; 0x2c
   14478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1447c:	mov	r7, r4
   14480:	mov	r5, #2
   14484:	mov	r1, #0
   14488:	mov	r0, r5
   1448c:	bl	11548 <bfd_printable_arch_mach@plt>
   14490:	bl	11518 <strlen@plt>
   14494:	add	r5, r5, #1
   14498:	cmp	r7, r0
   1449c:	movlt	r7, r0
   144a0:	cmp	r5, #89	; 0x59
   144a4:	bne	14484 <__assert_fail@plt+0x2d80>
   144a8:	ldr	r0, [pc, #532]	; 146c4 <__assert_fail@plt+0x2fc0>
   144ac:	bl	114b8 <getenv@plt>
   144b0:	cmp	r0, #0
   144b4:	beq	144d0 <__assert_fail@plt+0x2dcc>
   144b8:	mov	r2, #10
   144bc:	mov	r1, #0
   144c0:	bl	11344 <strtol@plt>
   144c4:	subs	r3, r0, #0
   144c8:	str	r3, [sp, #12]
   144cc:	bne	144d8 <__assert_fail@plt+0x2dd4>
   144d0:	mov	r3, #80	; 0x50
   144d4:	str	r3, [sp, #12]
   144d8:	ldr	r9, [sp, #28]
   144dc:	ldr	fp, [pc, #484]	; 146c8 <__assert_fail@plt+0x2fc4>
   144e0:	cmp	r4, r9
   144e4:	bge	145b0 <__assert_fail@plt+0x2eac>
   144e8:	add	r3, r4, r4, lsl #1
   144ec:	ldr	r2, [sp, #12]
   144f0:	rsb	r3, r4, r3, lsl #3
   144f4:	ldr	r8, [sp, #36]	; 0x24
   144f8:	sub	r6, r2, r7
   144fc:	lsl	sl, r3, #2
   14500:	add	r8, r8, sl
   14504:	sub	r6, r6, #1
   14508:	mov	r5, r4
   1450c:	ldr	r0, [r8]
   14510:	bl	11518 <strlen@plt>
   14514:	sub	r6, r6, #1
   14518:	add	r8, r8, #92	; 0x5c
   1451c:	subs	r6, r6, r0
   14520:	bmi	145c0 <__assert_fail@plt+0x2ebc>
   14524:	add	r5, r5, #1
   14528:	cmp	r9, r5
   1452c:	bne	1450c <__assert_fail@plt+0x2e08>
   14530:	ldr	r2, [pc, #404]	; 146cc <__assert_fail@plt+0x2fc8>
   14534:	add	r1, r7, #1
   14538:	ldr	r0, [pc, #400]	; 146d0 <__assert_fail@plt+0x2fcc>
   1453c:	bl	11350 <printf@plt>
   14540:	mov	r8, sl
   14544:	mov	r6, r4
   14548:	ldr	r3, [sp, #36]	; 0x24
   1454c:	add	r6, r6, #1
   14550:	ldr	r0, [pc, #380]	; 146d4 <__assert_fail@plt+0x2fd0>
   14554:	ldr	r1, [r3, r8]
   14558:	bl	11350 <printf@plt>
   1455c:	cmp	r6, r5
   14560:	add	r8, r8, #92	; 0x5c
   14564:	bne	14548 <__assert_fail@plt+0x2e44>
   14568:	ldr	r1, [fp]
   1456c:	mov	r0, #10
   14570:	bl	11638 <putc@plt>
   14574:	mov	r6, #2
   14578:	mov	r1, #0
   1457c:	mov	r0, r6
   14580:	bl	11548 <bfd_printable_arch_mach@plt>
   14584:	ldr	r1, [pc, #332]	; 146d8 <__assert_fail@plt+0x2fd4>
   14588:	bl	11338 <strcmp@plt>
   1458c:	cmp	r0, #0
   14590:	bne	145dc <__assert_fail@plt+0x2ed8>
   14594:	add	r6, r6, #1
   14598:	cmp	r6, #89	; 0x59
   1459c:	bne	14578 <__assert_fail@plt+0x2e74>
   145a0:	ldr	r9, [sp, #28]
   145a4:	mov	r4, r5
   145a8:	cmp	r4, r9
   145ac:	blt	144e8 <__assert_fail@plt+0x2de4>
   145b0:	ldr	r4, [sp, #24]
   145b4:	mov	r0, r4
   145b8:	add	sp, sp, #44	; 0x2c
   145bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c0:	ldr	r2, [pc, #260]	; 146cc <__assert_fail@plt+0x2fc8>
   145c4:	add	r1, r7, #1
   145c8:	ldr	r0, [pc, #256]	; 146d0 <__assert_fail@plt+0x2fcc>
   145cc:	bl	11350 <printf@plt>
   145d0:	cmp	r4, r5
   145d4:	bne	14540 <__assert_fail@plt+0x2e3c>
   145d8:	b	14568 <__assert_fail@plt+0x2e64>
   145dc:	mov	r1, #0
   145e0:	mov	r0, r6
   145e4:	bl	11548 <bfd_printable_arch_mach@plt>
   145e8:	mov	r1, r7
   145ec:	mov	r2, r0
   145f0:	ldr	r0, [pc, #228]	; 146dc <__assert_fail@plt+0x2fd8>
   145f4:	bl	11350 <printf@plt>
   145f8:	cmp	r4, r5
   145fc:	beq	14658 <__assert_fail@plt+0x2f54>
   14600:	mov	r8, sl
   14604:	mov	r9, r4
   14608:	sub	r3, r6, #2
   1460c:	str	r3, [sp, #4]
   14610:	ldr	r2, [sp, #36]	; 0x24
   14614:	ldr	r0, [sp, #4]
   14618:	add	r3, r2, r8
   1461c:	add	r3, r3, r0
   14620:	ldr	r1, [fp]
   14624:	ldrb	r3, [r3, #4]
   14628:	ldr	r0, [r2, r8]
   1462c:	cmp	r3, #0
   14630:	beq	14668 <__assert_fail@plt+0x2f64>
   14634:	bl	116d4 <fputs@plt>
   14638:	ldr	r1, [fp]
   1463c:	add	r9, r9, #1
   14640:	cmp	r5, r9
   14644:	add	r8, r8, #92	; 0x5c
   14648:	beq	1465c <__assert_fail@plt+0x2f58>
   1464c:	mov	r0, #32
   14650:	bl	11638 <putc@plt>
   14654:	b	14610 <__assert_fail@plt+0x2f0c>
   14658:	ldr	r1, [fp]
   1465c:	mov	r0, #10
   14660:	bl	11638 <putc@plt>
   14664:	b	14594 <__assert_fail@plt+0x2e90>
   14668:	str	r1, [sp, #8]
   1466c:	bl	11518 <strlen@plt>
   14670:	ldr	r1, [sp, #8]
   14674:	cmp	r0, #0
   14678:	sub	r3, r0, #1
   1467c:	beq	1463c <__assert_fail@plt+0x2f38>
   14680:	str	sl, [sp, #8]
   14684:	mov	sl, r4
   14688:	mov	r4, r3
   1468c:	b	14694 <__assert_fail@plt+0x2f90>
   14690:	ldr	r1, [fp]
   14694:	sub	r4, r4, #1
   14698:	mov	r0, #45	; 0x2d
   1469c:	bl	11638 <putc@plt>
   146a0:	cmn	r4, #1
   146a4:	bne	14690 <__assert_fail@plt+0x2f8c>
   146a8:	mov	r4, sl
   146ac:	ldr	r1, [fp]
   146b0:	ldr	sl, [sp, #8]
   146b4:	b	1463c <__assert_fail@plt+0x2f38>
   146b8:	andeq	r6, r1, r4, ror #21
   146bc:	andeq	r6, r1, r0, lsl #22
   146c0:	andeq	r3, r1, r0, lsl #31
   146c4:	andeq	r6, r1, r4, lsr #22
   146c8:	andeq	r7, r2, r8, lsr r6
   146cc:	andeq	r6, r1, ip, lsr #22
   146d0:	andeq	r6, r1, r0, lsr fp
   146d4:	andeq	r6, r1, ip, ror fp
   146d8:	andeq	r6, r1, r8, lsr fp
   146dc:	andeq	r6, r1, r4, asr #22
   146e0:	cmp	r2, #0
   146e4:	push	{r4, r5, r6, r7, lr}
   146e8:	mov	r5, r0
   146ec:	sub	sp, sp, #180	; 0xb4
   146f0:	mov	r4, r1
   146f4:	mov	r6, r3
   146f8:	beq	14718 <__assert_fail@plt+0x3014>
   146fc:	ldr	r3, [r1, #4]
   14700:	mov	r0, r4
   14704:	add	r1, sp, #72	; 0x48
   14708:	ldr	r3, [r3, #252]	; 0xfc
   1470c:	blx	r3
   14710:	cmp	r0, #0
   14714:	beq	14774 <__assert_fail@plt+0x3070>
   14718:	mov	r1, r5
   1471c:	ldr	r0, [r4]
   14720:	bl	116d4 <fputs@plt>
   14724:	cmp	r6, #0
   14728:	beq	14744 <__assert_fail@plt+0x3040>
   1472c:	ldrb	r3, [r4, #44]	; 0x2c
   14730:	tst	r3, #1
   14734:	beq	14758 <__assert_fail@plt+0x3054>
   14738:	ldrd	r2, [r4, #64]	; 0x40
   1473c:	orrs	r1, r2, r3
   14740:	bne	14764 <__assert_fail@plt+0x3060>
   14744:	mov	r1, r5
   14748:	mov	r0, #10
   1474c:	bl	115fc <fputc@plt>
   14750:	add	sp, sp, #180	; 0xb4
   14754:	pop	{r4, r5, r6, r7, pc}
   14758:	ldrd	r2, [r4, #56]	; 0x38
   1475c:	orrs	r1, r2, r3
   14760:	beq	14744 <__assert_fail@plt+0x3040>
   14764:	ldr	r1, [pc, #148]	; 14800 <__assert_fail@plt+0x30fc>
   14768:	mov	r0, r5
   1476c:	bl	1153c <fprintf@plt>
   14770:	b	14744 <__assert_fail@plt+0x3040>
   14774:	ldr	r3, [sp, #152]	; 0x98
   14778:	add	r0, sp, #16
   1477c:	str	r3, [sp, #16]
   14780:	bl	113ec <ctime@plt>
   14784:	subs	r2, r0, #0
   14788:	beq	147e0 <__assert_fail@plt+0x30dc>
   1478c:	add	r7, sp, #32
   14790:	add	r3, r2, #20
   14794:	mov	r0, r7
   14798:	add	r2, r2, #4
   1479c:	ldr	r1, [pc, #96]	; 14804 <__assert_fail@plt+0x3100>
   147a0:	bl	11620 <sprintf@plt>
   147a4:	add	r1, sp, #20
   147a8:	ldr	r0, [sp, #88]	; 0x58
   147ac:	bl	14c7c <__assert_fail@plt+0x3578>
   147b0:	ldr	r2, [sp, #120]	; 0x78
   147b4:	ldr	r3, [sp, #100]	; 0x64
   147b8:	mov	ip, #0
   147bc:	stmib	sp, {r2, r7}
   147c0:	str	r3, [sp]
   147c4:	add	r2, sp, #21
   147c8:	ldr	r3, [sp, #96]	; 0x60
   147cc:	ldr	r1, [pc, #52]	; 14808 <__assert_fail@plt+0x3104>
   147d0:	mov	r0, r5
   147d4:	strb	ip, [sp, #30]
   147d8:	bl	1153c <fprintf@plt>
   147dc:	b	14718 <__assert_fail@plt+0x3014>
   147e0:	mov	r2, #5
   147e4:	ldr	r1, [pc, #32]	; 1480c <__assert_fail@plt+0x3108>
   147e8:	bl	113f8 <dcgettext@plt>
   147ec:	add	r7, sp, #32
   147f0:	mov	r1, r0
   147f4:	mov	r0, r7
   147f8:	bl	11620 <sprintf@plt>
   147fc:	b	147a4 <__assert_fail@plt+0x30a0>
   14800:	andeq	r6, r1, r0, lsl #23
   14804:	andeq	r6, r1, r0, ror #22
   14808:	andeq	r6, r1, ip, ror #22
   1480c:	andeq	r6, r1, ip, asr #22
   14810:	push	{r4, lr}
   14814:	bl	13e38 <__assert_fail@plt+0x2734>
   14818:	mov	r4, r0
   1481c:	bl	114c4 <mkstemp64@plt>
   14820:	cmn	r0, #1
   14824:	beq	14834 <__assert_fail@plt+0x3130>
   14828:	bl	116ec <close@plt>
   1482c:	mov	r0, r4
   14830:	pop	{r4, pc}
   14834:	mov	r0, r4
   14838:	bl	113a4 <free@plt>
   1483c:	mov	r4, #0
   14840:	b	1482c <__assert_fail@plt+0x3128>
   14844:	push	{r4, lr}
   14848:	bl	13e38 <__assert_fail@plt+0x2734>
   1484c:	pop	{r4, lr}
   14850:	b	1162c <mkdtemp@plt>
   14854:	push	{r4, r5, lr}
   14858:	sub	sp, sp, #12
   1485c:	mov	r4, r1
   14860:	mov	r2, #0
   14864:	add	r1, sp, #4
   14868:	mov	r5, r0
   1486c:	bl	1132c <bfd_scan_vma@plt>
   14870:	ldr	r3, [sp, #4]
   14874:	ldrb	r3, [r3]
   14878:	cmp	r3, #0
   1487c:	bne	14888 <__assert_fail@plt+0x3184>
   14880:	add	sp, sp, #12
   14884:	pop	{r4, r5, pc}
   14888:	mov	r2, #5
   1488c:	ldr	r1, [pc, #16]	; 148a4 <__assert_fail@plt+0x31a0>
   14890:	mov	r0, #0
   14894:	bl	113f8 <dcgettext@plt>
   14898:	mov	r2, r5
   1489c:	mov	r1, r4
   148a0:	bl	141a0 <__assert_fail@plt+0x2a9c>
   148a4:	andeq	r6, r1, r8, lsl #23
   148a8:	push	{r4, r5, r6, lr}
   148ac:	subs	r4, r0, #0
   148b0:	sub	sp, sp, #104	; 0x68
   148b4:	beq	1498c <__assert_fail@plt+0x3288>
   148b8:	mov	r2, sp
   148bc:	mov	r1, r4
   148c0:	mov	r0, #3
   148c4:	bl	116c8 <__xstat64@plt>
   148c8:	cmp	r0, #0
   148cc:	blt	14910 <__assert_fail@plt+0x320c>
   148d0:	ldr	r3, [sp, #16]
   148d4:	and	r3, r3, #61440	; 0xf000
   148d8:	cmp	r3, #16384	; 0x4000
   148dc:	moveq	r2, #5
   148e0:	ldreq	r1, [pc, #176]	; 14998 <__assert_fail@plt+0x3294>
   148e4:	beq	1496c <__assert_fail@plt+0x3268>
   148e8:	cmp	r3, #32768	; 0x8000
   148ec:	movne	r2, #5
   148f0:	ldrne	r1, [pc, #164]	; 1499c <__assert_fail@plt+0x3298>
   148f4:	bne	1496c <__assert_fail@plt+0x3268>
   148f8:	ldrd	r0, [sp, #48]	; 0x30
   148fc:	cmp	r0, #0
   14900:	sbcs	r3, r1, #0
   14904:	blt	14964 <__assert_fail@plt+0x3260>
   14908:	add	sp, sp, #104	; 0x68
   1490c:	pop	{r4, r5, r6, pc}
   14910:	bl	11554 <__errno_location@plt>
   14914:	mov	r2, #5
   14918:	ldr	r3, [r0]
   1491c:	mov	r5, r0
   14920:	cmp	r3, #2
   14924:	ldreq	r1, [pc, #116]	; 149a0 <__assert_fail@plt+0x329c>
   14928:	beq	1496c <__assert_fail@plt+0x3268>
   1492c:	ldr	r1, [pc, #112]	; 149a4 <__assert_fail@plt+0x32a0>
   14930:	mov	r0, #0
   14934:	bl	113f8 <dcgettext@plt>
   14938:	mov	r6, r0
   1493c:	ldr	r0, [r5]
   14940:	bl	114dc <strerror@plt>
   14944:	mov	r1, r4
   14948:	mov	r2, r0
   1494c:	mov	r0, r6
   14950:	bl	141c8 <__assert_fail@plt+0x2ac4>
   14954:	mvn	r0, #0
   14958:	mvn	r1, #0
   1495c:	add	sp, sp, #104	; 0x68
   14960:	pop	{r4, r5, r6, pc}
   14964:	ldr	r1, [pc, #60]	; 149a8 <__assert_fail@plt+0x32a4>
   14968:	mov	r2, #5
   1496c:	mov	r0, #0
   14970:	bl	113f8 <dcgettext@plt>
   14974:	mov	r1, r4
   14978:	bl	141c8 <__assert_fail@plt+0x2ac4>
   1497c:	mvn	r0, #0
   14980:	mvn	r1, #0
   14984:	add	sp, sp, #104	; 0x68
   14988:	pop	{r4, r5, r6, pc}
   1498c:	mvn	r0, #0
   14990:	mvn	r1, #0
   14994:	b	14908 <__assert_fail@plt+0x3204>
   14998:	ldrdeq	r6, [r1], -ip
   1499c:	strdeq	r6, [r1], -ip
   149a0:	muleq	r1, ip, fp
   149a4:			; <UNDEFINED> instruction: 0x00016bb0
   149a8:	andeq	r6, r1, r4, lsr #24
   149ac:	push	{r4, r5, r6, r7, r8, lr}
   149b0:	subs	r6, r0, #0
   149b4:	beq	14a5c <__assert_fail@plt+0x3358>
   149b8:	ldr	r3, [r6, #140]	; 0x8c
   149bc:	ldr	r5, [r6]
   149c0:	cmp	r3, #0
   149c4:	beq	14a1c <__assert_fail@plt+0x3318>
   149c8:	ldrb	r2, [r3, #44]	; 0x2c
   149cc:	tst	r2, #1
   149d0:	bne	14a1c <__assert_fail@plt+0x3318>
   149d4:	ldr	r8, [r3]
   149d8:	ldr	r7, [pc, #144]	; 14a70 <__assert_fail@plt+0x336c>
   149dc:	mov	r0, r8
   149e0:	bl	11518 <strlen@plt>
   149e4:	mov	r4, r0
   149e8:	mov	r0, r5
   149ec:	bl	11518 <strlen@plt>
   149f0:	ldr	r3, [r7]
   149f4:	add	r4, r4, r0
   149f8:	add	r4, r4, #3
   149fc:	cmp	r3, r4
   14a00:	bcc	14a24 <__assert_fail@plt+0x3320>
   14a04:	ldr	r0, [r7, #4]
   14a08:	mov	r3, r5
   14a0c:	mov	r2, r8
   14a10:	ldr	r1, [pc, #92]	; 14a74 <__assert_fail@plt+0x3370>
   14a14:	bl	11620 <sprintf@plt>
   14a18:	ldr	r5, [r7, #4]
   14a1c:	mov	r0, r5
   14a20:	pop	{r4, r5, r6, r7, r8, pc}
   14a24:	cmp	r3, #0
   14a28:	bne	14a50 <__assert_fail@plt+0x334c>
   14a2c:	add	r4, r4, r4, lsr #1
   14a30:	mov	r0, r4
   14a34:	str	r4, [r7]
   14a38:	bl	1144c <xmalloc@plt>
   14a3c:	ldr	r3, [r6, #140]	; 0x8c
   14a40:	ldr	r5, [r6]
   14a44:	ldr	r8, [r3]
   14a48:	str	r0, [r7, #4]
   14a4c:	b	14a08 <__assert_fail@plt+0x3304>
   14a50:	ldr	r0, [r7, #4]
   14a54:	bl	113a4 <free@plt>
   14a58:	b	14a2c <__assert_fail@plt+0x3328>
   14a5c:	ldr	r3, [pc, #20]	; 14a78 <__assert_fail@plt+0x3374>
   14a60:	ldr	r2, [pc, #20]	; 14a7c <__assert_fail@plt+0x3378>
   14a64:	ldr	r1, [pc, #20]	; 14a80 <__assert_fail@plt+0x337c>
   14a68:	ldr	r0, [pc, #20]	; 14a84 <__assert_fail@plt+0x3380>
   14a6c:	bl	11704 <__assert_fail@plt>
   14a70:	ldrdeq	r7, [r2], -r0
   14a74:	andeq	r6, r1, r8, lsl #25
   14a78:	muleq	r1, r4, r9
   14a7c:	andeq	r0, r0, r9, ror r2
   14a80:	andeq	r6, r1, r0, ror #24
   14a84:	andeq	r6, r1, r8, ror ip
   14a88:	push	{r3}		; (str r3, [sp, #-4]!)
   14a8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a90:	sub	sp, sp, #8
   14a94:	mov	r8, r1
   14a98:	mov	r7, r2
   14a9c:	mov	r5, r0
   14aa0:	ldr	r6, [sp, #36]	; 0x24
   14aa4:	bl	11434 <bfd_get_error@plt>
   14aa8:	bl	1165c <bfd_errmsg@plt>
   14aac:	ldr	r3, [pc, #204]	; 14b80 <__assert_fail@plt+0x347c>
   14ab0:	ldr	r4, [pc, #204]	; 14b84 <__assert_fail@plt+0x3480>
   14ab4:	mov	r9, r0
   14ab8:	ldr	r0, [r3]
   14abc:	bl	11368 <fflush@plt>
   14ac0:	ldr	r2, [pc, #192]	; 14b88 <__assert_fail@plt+0x3484>
   14ac4:	add	r3, sp, #40	; 0x28
   14ac8:	ldr	r1, [r4]
   14acc:	ldr	r0, [r2]
   14ad0:	str	r3, [sp, #4]
   14ad4:	bl	116d4 <fputs@plt>
   14ad8:	cmp	r8, #0
   14adc:	beq	14b10 <__assert_fail@plt+0x340c>
   14ae0:	cmp	r5, #0
   14ae4:	beq	14b70 <__assert_fail@plt+0x346c>
   14ae8:	cmp	r7, #0
   14aec:	ldr	r0, [r4]
   14af0:	beq	14b14 <__assert_fail@plt+0x3410>
   14af4:	ldr	r3, [r7]
   14af8:	cmp	r3, #0
   14afc:	beq	14b14 <__assert_fail@plt+0x3410>
   14b00:	mov	r2, r5
   14b04:	ldr	r1, [pc, #128]	; 14b8c <__assert_fail@plt+0x3488>
   14b08:	bl	1153c <fprintf@plt>
   14b0c:	b	14b20 <__assert_fail@plt+0x341c>
   14b10:	ldr	r0, [r4]
   14b14:	mov	r2, r5
   14b18:	ldr	r1, [pc, #112]	; 14b90 <__assert_fail@plt+0x348c>
   14b1c:	bl	1153c <fprintf@plt>
   14b20:	cmp	r6, #0
   14b24:	ldr	r0, [r4]
   14b28:	beq	14b54 <__assert_fail@plt+0x3450>
   14b2c:	mov	r3, r0
   14b30:	mov	r2, #2
   14b34:	mov	r1, #1
   14b38:	ldr	r0, [pc, #84]	; 14b94 <__assert_fail@plt+0x3490>
   14b3c:	bl	11440 <fwrite@plt>
   14b40:	mov	r1, r6
   14b44:	ldr	r2, [sp, #4]
   14b48:	ldr	r0, [r4]
   14b4c:	bl	115e4 <vfprintf@plt>
   14b50:	ldr	r0, [r4]
   14b54:	mov	r2, r9
   14b58:	ldr	r1, [pc, #56]	; 14b98 <__assert_fail@plt+0x3494>
   14b5c:	bl	1153c <fprintf@plt>
   14b60:	add	sp, sp, #8
   14b64:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14b68:	add	sp, sp, #4
   14b6c:	bx	lr
   14b70:	mov	r0, r8
   14b74:	bl	149ac <__assert_fail@plt+0x32a8>
   14b78:	mov	r5, r0
   14b7c:	b	14ae8 <__assert_fail@plt+0x33e4>
   14b80:	andeq	r7, r2, r8, lsr r6
   14b84:	muleq	r2, r0, r3
   14b88:	ldrdeq	r7, [r2], -ip
   14b8c:	muleq	r1, r0, ip
   14b90:	muleq	r1, r8, ip
   14b94:	muleq	r1, ip, ip
   14b98:	andeq	r6, r1, r0, lsr #25
   14b9c:	ldrb	r3, [r0]
   14ba0:	cmp	r3, #47	; 0x2f
   14ba4:	beq	14c20 <__assert_fail@plt+0x351c>
   14ba8:	cmp	r3, #0
   14bac:	beq	14be4 <__assert_fail@plt+0x34e0>
   14bb0:	cmp	r3, #46	; 0x2e
   14bb4:	beq	14bec <__assert_fail@plt+0x34e8>
   14bb8:	ldrb	r3, [r0, #1]!
   14bbc:	cmp	r3, #0
   14bc0:	cmpne	r3, #47	; 0x2f
   14bc4:	bne	14bb8 <__assert_fail@plt+0x34b4>
   14bc8:	cmp	r3, #47	; 0x2f
   14bcc:	bne	14ba8 <__assert_fail@plt+0x34a4>
   14bd0:	ldrb	r3, [r0, #1]!
   14bd4:	cmp	r3, #47	; 0x2f
   14bd8:	beq	14bd0 <__assert_fail@plt+0x34cc>
   14bdc:	cmp	r3, #0
   14be0:	bne	14bb0 <__assert_fail@plt+0x34ac>
   14be4:	mov	r0, #1
   14be8:	bx	lr
   14bec:	ldrb	r3, [r0, #1]
   14bf0:	cmp	r3, #46	; 0x2e
   14bf4:	beq	14c0c <__assert_fail@plt+0x3508>
   14bf8:	cmp	r3, #0
   14bfc:	cmpne	r3, #47	; 0x2f
   14c00:	add	r0, r0, #1
   14c04:	bne	14bb8 <__assert_fail@plt+0x34b4>
   14c08:	b	14bd4 <__assert_fail@plt+0x34d0>
   14c0c:	ldrb	r3, [r0, #2]
   14c10:	add	r0, r0, #2
   14c14:	cmp	r3, #0
   14c18:	cmpne	r3, #47	; 0x2f
   14c1c:	bne	14bb8 <__assert_fail@plt+0x34b4>
   14c20:	mov	r0, #0
   14c24:	bx	lr
   14c28:	push	{r4, lr}
   14c2c:	mov	r1, r0
   14c30:	ldr	r2, [pc, #52]	; 14c6c <__assert_fail@plt+0x3568>
   14c34:	ldr	r0, [pc, #52]	; 14c70 <__assert_fail@plt+0x356c>
   14c38:	bl	11350 <printf@plt>
   14c3c:	mov	r2, #5
   14c40:	ldr	r1, [pc, #44]	; 14c74 <__assert_fail@plt+0x3570>
   14c44:	mov	r0, #0
   14c48:	bl	113f8 <dcgettext@plt>
   14c4c:	bl	11350 <printf@plt>
   14c50:	mov	r2, #5
   14c54:	ldr	r1, [pc, #28]	; 14c78 <__assert_fail@plt+0x3574>
   14c58:	mov	r0, #0
   14c5c:	bl	113f8 <dcgettext@plt>
   14c60:	bl	11350 <printf@plt>
   14c64:	mov	r0, #0
   14c68:	bl	1150c <exit@plt>
   14c6c:	andeq	r6, r1, r0, lsl #22
   14c70:	andeq	r6, r1, r8, lsr #25
   14c74:			; <UNDEFINED> instruction: 0x00016cb4
   14c78:	andeq	r6, r1, r8, ror #25
   14c7c:	and	r3, r0, #61440	; 0xf000
   14c80:	cmp	r3, #16384	; 0x4000
   14c84:	push	{r4, r5, lr}
   14c88:	moveq	r2, #100	; 0x64
   14c8c:	beq	14ccc <__assert_fail@plt+0x35c8>
   14c90:	cmp	r3, #40960	; 0xa000
   14c94:	moveq	r2, #108	; 0x6c
   14c98:	beq	14ccc <__assert_fail@plt+0x35c8>
   14c9c:	cmp	r3, #24576	; 0x6000
   14ca0:	moveq	r2, #98	; 0x62
   14ca4:	beq	14ccc <__assert_fail@plt+0x35c8>
   14ca8:	cmp	r3, #8192	; 0x2000
   14cac:	moveq	r2, #99	; 0x63
   14cb0:	beq	14ccc <__assert_fail@plt+0x35c8>
   14cb4:	cmp	r3, #49152	; 0xc000
   14cb8:	moveq	r2, #115	; 0x73
   14cbc:	beq	14ccc <__assert_fail@plt+0x35c8>
   14cc0:	cmp	r3, #4096	; 0x1000
   14cc4:	moveq	r2, #112	; 0x70
   14cc8:	movne	r2, #45	; 0x2d
   14ccc:	tst	r0, #256	; 0x100
   14cd0:	movne	r5, #114	; 0x72
   14cd4:	moveq	r5, #45	; 0x2d
   14cd8:	tst	r0, #128	; 0x80
   14cdc:	movne	r3, #119	; 0x77
   14ce0:	moveq	r3, #45	; 0x2d
   14ce4:	tst	r0, #64	; 0x40
   14ce8:	movne	ip, #120	; 0x78
   14cec:	moveq	ip, #45	; 0x2d
   14cf0:	tst	r0, #32
   14cf4:	movne	r4, #114	; 0x72
   14cf8:	moveq	r4, #45	; 0x2d
   14cfc:	tst	r0, #16
   14d00:	movne	lr, #119	; 0x77
   14d04:	moveq	lr, #45	; 0x2d
   14d08:	tst	r0, #8
   14d0c:	strb	r2, [r1]
   14d10:	movne	r2, #120	; 0x78
   14d14:	moveq	r2, #45	; 0x2d
   14d18:	tst	r0, #4
   14d1c:	strb	r3, [r1, #2]
   14d20:	movne	r3, #114	; 0x72
   14d24:	moveq	r3, #45	; 0x2d
   14d28:	tst	r0, #2
   14d2c:	strb	lr, [r1, #5]
   14d30:	movne	lr, #119	; 0x77
   14d34:	moveq	lr, #45	; 0x2d
   14d38:	tst	r0, #1
   14d3c:	strb	r3, [r1, #7]
   14d40:	movne	r3, #120	; 0x78
   14d44:	moveq	r3, #45	; 0x2d
   14d48:	tst	r0, #2048	; 0x800
   14d4c:	strb	r5, [r1, #1]
   14d50:	strb	ip, [r1, #3]
   14d54:	strb	r4, [r1, #4]
   14d58:	strb	r2, [r1, #6]
   14d5c:	strb	lr, [r1, #8]
   14d60:	strb	r3, [r1, #9]
   14d64:	beq	14d78 <__assert_fail@plt+0x3674>
   14d68:	cmp	ip, #120	; 0x78
   14d6c:	movne	ip, #83	; 0x53
   14d70:	moveq	ip, #115	; 0x73
   14d74:	strb	ip, [r1, #3]
   14d78:	tst	r0, #1024	; 0x400
   14d7c:	beq	14d90 <__assert_fail@plt+0x368c>
   14d80:	cmp	r2, #120	; 0x78
   14d84:	movne	r2, #83	; 0x53
   14d88:	moveq	r2, #115	; 0x73
   14d8c:	strb	r2, [r1, #6]
   14d90:	tst	r0, #512	; 0x200
   14d94:	popeq	{r4, r5, pc}
   14d98:	cmp	r3, #120	; 0x78
   14d9c:	movne	r3, #84	; 0x54
   14da0:	moveq	r3, #116	; 0x74
   14da4:	strb	r3, [r1, #9]
   14da8:	pop	{r4, r5, pc}
   14dac:	push	{r4, r5, r6, lr}
   14db0:	subs	r5, r0, #0
   14db4:	beq	14e4c <__assert_fail@plt+0x3748>
   14db8:	ldr	r3, [r5]
   14dbc:	cmp	r3, #0
   14dc0:	beq	14e3c <__assert_fail@plt+0x3738>
   14dc4:	mov	r3, r5
   14dc8:	mov	r0, #0
   14dcc:	b	14dd4 <__assert_fail@plt+0x36d0>
   14dd0:	mov	r0, r1
   14dd4:	ldr	r2, [r3, #4]!
   14dd8:	add	r1, r0, #1
   14ddc:	cmp	r2, #0
   14de0:	bne	14dd0 <__assert_fail@plt+0x36cc>
   14de4:	add	r0, r0, #2
   14de8:	lsl	r0, r0, #2
   14dec:	bl	1144c <xmalloc@plt>
   14df0:	ldr	r2, [r5]
   14df4:	cmp	r2, #0
   14df8:	mov	r6, r0
   14dfc:	beq	14e44 <__assert_fail@plt+0x3740>
   14e00:	sub	r4, r0, #4
   14e04:	mov	r0, r2
   14e08:	bl	11464 <xstrdup@plt>
   14e0c:	ldr	r2, [r5, #4]!
   14e10:	add	r3, r4, #8
   14e14:	cmp	r2, #0
   14e18:	sub	r3, r3, r6
   14e1c:	add	r4, r4, #4
   14e20:	str	r0, [r4]
   14e24:	bne	14e04 <__assert_fail@plt+0x3700>
   14e28:	add	r3, r6, r3
   14e2c:	mov	r2, #0
   14e30:	str	r2, [r3]
   14e34:	mov	r0, r6
   14e38:	pop	{r4, r5, r6, pc}
   14e3c:	mov	r0, #4
   14e40:	b	14dec <__assert_fail@plt+0x36e8>
   14e44:	mov	r3, r0
   14e48:	b	14e2c <__assert_fail@plt+0x3728>
   14e4c:	mov	r6, r5
   14e50:	b	14e34 <__assert_fail@plt+0x3730>
   14e54:	push	{r4, r5, r6, lr}
   14e58:	subs	r5, r0, #0
   14e5c:	popeq	{r4, r5, r6, pc}
   14e60:	ldr	r0, [r5]
   14e64:	cmp	r0, #0
   14e68:	beq	14e80 <__assert_fail@plt+0x377c>
   14e6c:	mov	r4, r5
   14e70:	bl	113a4 <free@plt>
   14e74:	ldr	r0, [r4, #4]!
   14e78:	cmp	r0, #0
   14e7c:	bne	14e70 <__assert_fail@plt+0x376c>
   14e80:	mov	r0, r5
   14e84:	pop	{r4, r5, r6, lr}
   14e88:	b	113a4 <free@plt>
   14e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e90:	subs	r4, r0, #0
   14e94:	ldr	r6, [pc, #512]	; 1509c <__assert_fail@plt+0x3998>
   14e98:	sub	sp, sp, #12
   14e9c:	add	r6, pc, r6
   14ea0:	moveq	r9, r4
   14ea4:	beq	15040 <__assert_fail@plt+0x393c>
   14ea8:	bl	11518 <strlen@plt>
   14eac:	mov	r9, #0
   14eb0:	mov	fp, r9
   14eb4:	mov	sl, r9
   14eb8:	mov	r5, r9
   14ebc:	mov	r8, r9
   14ec0:	mov	r7, r9
   14ec4:	add	r0, r0, #1
   14ec8:	bl	1144c <xmalloc@plt>
   14ecc:	ldr	r2, [pc, #460]	; 150a0 <__assert_fail@plt+0x399c>
   14ed0:	str	r0, [sp]
   14ed4:	ldr	r6, [r6, r2]
   14ed8:	ldrb	r2, [r4]
   14edc:	lsl	r2, r2, #1
   14ee0:	ldrh	r2, [r6, r2]
   14ee4:	tst	r2, #64	; 0x40
   14ee8:	beq	14f00 <__assert_fail@plt+0x37fc>
   14eec:	ldrb	r2, [r4, #1]!
   14ef0:	lsl	r2, r2, #1
   14ef4:	ldrh	r2, [r6, r2]
   14ef8:	tst	r2, #64	; 0x40
   14efc:	bne	14eec <__assert_fail@plt+0x37e8>
   14f00:	cmp	fp, #0
   14f04:	lsl	r2, sl, #2
   14f08:	beq	14f1c <__assert_fail@plt+0x3818>
   14f0c:	sub	r1, fp, #1
   14f10:	cmp	r1, sl
   14f14:	addgt	r1, r9, r2
   14f18:	bgt	14f4c <__assert_fail@plt+0x3848>
   14f1c:	cmp	r9, #0
   14f20:	str	r2, [sp, #4]
   14f24:	beq	15084 <__assert_fail@plt+0x3980>
   14f28:	lsl	fp, fp, #1
   14f2c:	mov	r0, r9
   14f30:	lsl	r1, fp, #2
   14f34:	bl	11410 <xrealloc@plt>
   14f38:	ldr	r2, [sp, #4]
   14f3c:	mov	r9, r0
   14f40:	add	r1, r9, r2
   14f44:	mov	r3, #0
   14f48:	str	r3, [r9, r2]
   14f4c:	ldrb	r2, [r4]
   14f50:	ldr	r0, [sp]
   14f54:	cmp	r2, #0
   14f58:	bne	14f7c <__assert_fail@plt+0x3878>
   14f5c:	b	14fe0 <__assert_fail@plt+0x38dc>
   14f60:	cmp	r2, #39	; 0x27
   14f64:	moveq	r7, r5
   14f68:	beq	14f70 <__assert_fail@plt+0x386c>
   14f6c:	strb	r2, [r0], #1
   14f70:	ldrb	r2, [r4, #1]!
   14f74:	cmp	r2, #0
   14f78:	beq	14fe0 <__assert_fail@plt+0x38dc>
   14f7c:	lsl	ip, r2, #1
   14f80:	ldrh	ip, [r6, ip]
   14f84:	tst	ip, #64	; 0x40
   14f88:	beq	14f98 <__assert_fail@plt+0x3894>
   14f8c:	orr	ip, r8, r7
   14f90:	orrs	ip, ip, r5
   14f94:	beq	15074 <__assert_fail@plt+0x3970>
   14f98:	cmp	r5, #0
   14f9c:	movne	r5, #0
   14fa0:	strbne	r2, [r0], #1
   14fa4:	bne	14f70 <__assert_fail@plt+0x386c>
   14fa8:	cmp	r2, #92	; 0x5c
   14fac:	moveq	r5, #1
   14fb0:	beq	14f70 <__assert_fail@plt+0x386c>
   14fb4:	cmp	r7, #0
   14fb8:	bne	14f60 <__assert_fail@plt+0x385c>
   14fbc:	cmp	r8, #0
   14fc0:	beq	1504c <__assert_fail@plt+0x3948>
   14fc4:	cmp	r2, #34	; 0x22
   14fc8:	mov	r5, r7
   14fcc:	moveq	r8, r7
   14fd0:	bne	14f6c <__assert_fail@plt+0x3868>
   14fd4:	ldrb	r2, [r4, #1]!
   14fd8:	cmp	r2, #0
   14fdc:	bne	14f7c <__assert_fail@plt+0x3878>
   14fe0:	mov	r3, #0
   14fe4:	strb	r3, [r0]
   14fe8:	ldr	r0, [sp]
   14fec:	str	r1, [sp, #4]
   14ff0:	bl	11464 <xstrdup@plt>
   14ff4:	ldr	r1, [sp, #4]
   14ff8:	mov	r3, #0
   14ffc:	add	sl, sl, #1
   15000:	str	r3, [r1, #4]
   15004:	str	r0, [r1]
   15008:	ldrb	r2, [r4]
   1500c:	lsl	r1, r2, #1
   15010:	ldrh	r1, [r6, r1]
   15014:	tst	r1, #64	; 0x40
   15018:	beq	15030 <__assert_fail@plt+0x392c>
   1501c:	ldrb	r2, [r4, #1]!
   15020:	lsl	r1, r2, #1
   15024:	ldrh	r1, [r6, r1]
   15028:	tst	r1, #64	; 0x40
   1502c:	bne	1501c <__assert_fail@plt+0x3918>
   15030:	cmp	r2, #0
   15034:	bne	14ed8 <__assert_fail@plt+0x37d4>
   15038:	ldr	r0, [sp]
   1503c:	bl	113a4 <free@plt>
   15040:	mov	r0, r9
   15044:	add	sp, sp, #12
   15048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1504c:	cmp	r2, #39	; 0x27
   15050:	mov	r5, r8
   15054:	moveq	r7, #1
   15058:	beq	14f70 <__assert_fail@plt+0x386c>
   1505c:	cmp	r2, #34	; 0x22
   15060:	moveq	r7, r8
   15064:	strbne	r2, [r0], #1
   15068:	movne	r7, r8
   1506c:	moveq	r8, #1
   15070:	b	14f70 <__assert_fail@plt+0x386c>
   15074:	mov	r8, ip
   15078:	mov	r7, ip
   1507c:	mov	r5, ip
   15080:	b	14fe0 <__assert_fail@plt+0x38dc>
   15084:	mov	r0, #32
   15088:	bl	1144c <xmalloc@plt>
   1508c:	mov	fp, #8
   15090:	ldr	r2, [sp, #4]
   15094:	mov	r9, r0
   15098:	b	14f40 <__assert_fail@plt+0x383c>
   1509c:	andeq	r2, r1, ip, asr r1
   150a0:	andeq	r0, r0, r4, ror #2
   150a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150a8:	subs	r6, r1, #0
   150ac:	ldr	r8, [pc, #192]	; 15174 <__assert_fail@plt+0x3a70>
   150b0:	add	r8, pc, r8
   150b4:	beq	15144 <__assert_fail@plt+0x3a40>
   150b8:	ldr	r5, [r0]
   150bc:	mov	r9, r0
   150c0:	cmp	r5, #0
   150c4:	beq	1516c <__assert_fail@plt+0x3a68>
   150c8:	ldrb	r4, [r5]
   150cc:	cmp	r4, #0
   150d0:	beq	1514c <__assert_fail@plt+0x3a48>
   150d4:	ldr	r3, [pc, #156]	; 15178 <__assert_fail@plt+0x3a74>
   150d8:	ldr	r7, [r8, r3]
   150dc:	b	150ec <__assert_fail@plt+0x39e8>
   150e0:	ldrb	r4, [r5, #1]!
   150e4:	cmp	r4, #0
   150e8:	beq	1514c <__assert_fail@plt+0x3a48>
   150ec:	lsl	r3, r4, #1
   150f0:	mov	r1, r6
   150f4:	ldrh	r3, [r7, r3]
   150f8:	mov	r0, #92	; 0x5c
   150fc:	tst	r3, #64	; 0x40
   15100:	bne	15124 <__assert_fail@plt+0x3a20>
   15104:	cmp	r4, #39	; 0x27
   15108:	cmpne	r4, r0
   1510c:	moveq	r3, #1
   15110:	movne	r3, #0
   15114:	cmp	r4, #34	; 0x22
   15118:	orreq	r3, r3, #1
   1511c:	cmp	r3, #0
   15120:	beq	15130 <__assert_fail@plt+0x3a2c>
   15124:	bl	115fc <fputc@plt>
   15128:	cmn	r0, #1
   1512c:	beq	15144 <__assert_fail@plt+0x3a40>
   15130:	mov	r0, r4
   15134:	mov	r1, r6
   15138:	bl	115fc <fputc@plt>
   1513c:	cmn	r0, #1
   15140:	bne	150e0 <__assert_fail@plt+0x39dc>
   15144:	mov	r0, #1
   15148:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1514c:	mov	r1, r6
   15150:	mov	r0, #10
   15154:	bl	115fc <fputc@plt>
   15158:	cmn	r0, #1
   1515c:	beq	15144 <__assert_fail@plt+0x3a40>
   15160:	ldr	r5, [r9, #4]!
   15164:	cmp	r5, #0
   15168:	bne	150c8 <__assert_fail@plt+0x39c4>
   1516c:	mov	r0, #0
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15174:	andeq	r1, r1, r8, asr #30
   15178:	andeq	r0, r0, r4, ror #2
   1517c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15180:	mov	r7, r1
   15184:	sub	sp, sp, #140	; 0x8c
   15188:	ldr	r3, [r7]
   1518c:	ldr	r1, [r0]
   15190:	str	r3, [sp, #24]
   15194:	ldr	r3, [pc, #824]	; 154d4 <__assert_fail@plt+0x3dd0>
   15198:	mov	sl, r0
   1519c:	add	r3, pc, r3
   151a0:	str	r3, [sp, #28]
   151a4:	add	r3, sp, #32
   151a8:	str	r3, [sp]
   151ac:	ldr	r3, [pc, #804]	; 154d8 <__assert_fail@plt+0x3dd4>
   151b0:	mov	fp, #2000	; 0x7d0
   151b4:	mov	r5, #0
   151b8:	add	r3, pc, r3
   151bc:	str	r3, [sp, #4]
   151c0:	add	r4, r5, #1
   151c4:	cmp	r4, r1
   151c8:	bge	152c4 <__assert_fail@plt+0x3bc0>
   151cc:	ldr	r3, [r7]
   151d0:	lsl	r8, r4, #2
   151d4:	ldr	r0, [r3, r4, lsl #2]
   151d8:	ldrb	r2, [r0]
   151dc:	cmp	r2, #64	; 0x40
   151e0:	bne	152d0 <__assert_fail@plt+0x3bcc>
   151e4:	subs	fp, fp, #1
   151e8:	beq	15464 <__assert_fail@plt+0x3d60>
   151ec:	add	r6, r0, #1
   151f0:	mov	r1, r6
   151f4:	ldr	r2, [sp]
   151f8:	mov	r0, #3
   151fc:	bl	116c8 <__xstat64@plt>
   15200:	cmp	r0, #0
   15204:	blt	152cc <__assert_fail@plt+0x3bc8>
   15208:	ldr	r3, [sp, #48]	; 0x30
   1520c:	and	r3, r3, #61440	; 0xf000
   15210:	cmp	r3, #16384	; 0x4000
   15214:	beq	15490 <__assert_fail@plt+0x3d8c>
   15218:	mov	r0, r6
   1521c:	ldr	r1, [sp, #4]
   15220:	bl	11650 <fopen64@plt>
   15224:	subs	r9, r0, #0
   15228:	beq	152cc <__assert_fail@plt+0x3bc8>
   1522c:	mov	r2, #2
   15230:	mov	r1, #0
   15234:	bl	116bc <fseek@plt>
   15238:	cmn	r0, #1
   1523c:	beq	152a8 <__assert_fail@plt+0x3ba4>
   15240:	mov	r0, r9
   15244:	bl	113e0 <ftell@plt>
   15248:	cmn	r0, #1
   1524c:	mov	r6, r0
   15250:	beq	152a8 <__assert_fail@plt+0x3ba4>
   15254:	mov	r2, #0
   15258:	mov	r1, r2
   1525c:	mov	r0, r9
   15260:	bl	116bc <fseek@plt>
   15264:	cmn	r0, #1
   15268:	beq	152a8 <__assert_fail@plt+0x3ba4>
   1526c:	add	r0, r6, #1
   15270:	bl	1144c <xmalloc@plt>
   15274:	mov	r3, r9
   15278:	mov	r2, r6
   1527c:	mov	r1, #1
   15280:	str	r0, [sp, #8]
   15284:	bl	1147c <fread@plt>
   15288:	cmp	r6, r0
   1528c:	mov	r3, r0
   15290:	beq	152dc <__assert_fail@plt+0x3bd8>
   15294:	str	r0, [sp, #12]
   15298:	mov	r0, r9
   1529c:	bl	113b0 <ferror@plt>
   152a0:	cmp	r0, #0
   152a4:	beq	152d8 <__assert_fail@plt+0x3bd4>
   152a8:	mov	r0, r9
   152ac:	bl	1159c <fclose@plt>
   152b0:	mov	r5, r4
   152b4:	ldr	r1, [sl]
   152b8:	add	r4, r5, #1
   152bc:	cmp	r4, r1
   152c0:	blt	151cc <__assert_fail@plt+0x3ac8>
   152c4:	add	sp, sp, #140	; 0x8c
   152c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152cc:	ldr	r1, [sl]
   152d0:	mov	r5, r4
   152d4:	b	151c0 <__assert_fail@plt+0x3abc>
   152d8:	ldr	r3, [sp, #12]
   152dc:	ldr	r1, [sp, #8]
   152e0:	mov	r2, #0
   152e4:	strb	r2, [r1, r3]
   152e8:	ldrb	r3, [r1]
   152ec:	cmp	r3, r2
   152f0:	beq	15334 <__assert_fail@plt+0x3c30>
   152f4:	ldr	r2, [pc, #480]	; 154dc <__assert_fail@plt+0x3dd8>
   152f8:	ldr	r1, [sp, #28]
   152fc:	lsl	r3, r3, #1
   15300:	ldr	r1, [r1, r2]
   15304:	ldrh	r3, [r1, r3]
   15308:	tst	r3, #64	; 0x40
   1530c:	beq	15374 <__assert_fail@plt+0x3c70>
   15310:	ldr	r2, [sp, #8]
   15314:	b	15328 <__assert_fail@plt+0x3c24>
   15318:	lsl	r3, r3, #1
   1531c:	ldrh	r3, [r1, r3]
   15320:	tst	r3, #64	; 0x40
   15324:	beq	15374 <__assert_fail@plt+0x3c70>
   15328:	ldrb	r3, [r2, #1]!
   1532c:	cmp	r3, #0
   15330:	bne	15318 <__assert_fail@plt+0x3c14>
   15334:	mov	r0, #4
   15338:	bl	1144c <xmalloc@plt>
   1533c:	ldr	r2, [sp, #24]
   15340:	mov	r6, #0
   15344:	mov	r3, r0
   15348:	str	r0, [sp, #12]
   1534c:	ldr	r0, [r7]
   15350:	str	r6, [r3]
   15354:	cmp	r2, r0
   15358:	bne	15458 <__assert_fail@plt+0x3d54>
   1535c:	mov	r0, r2
   15360:	bl	14dac <__assert_fail@plt+0x36a8>
   15364:	mov	r3, r6
   15368:	mov	r2, r8
   1536c:	str	r0, [r7]
   15370:	b	153c4 <__assert_fail@plt+0x3cc0>
   15374:	ldr	r0, [sp, #8]
   15378:	bl	14e8c <__assert_fail@plt+0x3788>
   1537c:	ldr	r2, [sp, #24]
   15380:	mov	r3, r0
   15384:	str	r0, [sp, #12]
   15388:	ldr	r0, [r7]
   1538c:	cmp	r0, r2
   15390:	beq	154bc <__assert_fail@plt+0x3db8>
   15394:	ldr	r6, [r3]
   15398:	cmp	r6, #0
   1539c:	beq	15458 <__assert_fail@plt+0x3d54>
   153a0:	ldr	r2, [sp, #12]
   153a4:	mov	r6, #0
   153a8:	ldr	r3, [r2, #4]!
   153ac:	add	r6, r6, #1
   153b0:	cmp	r3, #0
   153b4:	lsl	r3, r6, #2
   153b8:	bne	153a8 <__assert_fail@plt+0x3ca4>
   153bc:	add	r2, r4, r6
   153c0:	lsl	r2, r2, #2
   153c4:	ldr	r0, [r0, r8]
   153c8:	str	r3, [sp, #16]
   153cc:	str	r2, [sp, #20]
   153d0:	bl	113a4 <free@plt>
   153d4:	ldr	r1, [sl]
   153d8:	ldr	r0, [r7]
   153dc:	add	r1, r1, #1
   153e0:	add	r1, r1, r6
   153e4:	lsl	r1, r1, #2
   153e8:	bl	11410 <xrealloc@plt>
   153ec:	ldr	r2, [sp, #20]
   153f0:	add	ip, r8, #4
   153f4:	mov	r1, r0
   153f8:	ldr	r0, [sl]
   153fc:	str	r1, [r7]
   15400:	sub	r4, r0, r4
   15404:	add	r0, r1, r2
   15408:	add	r1, r1, ip
   1540c:	lsl	r2, r4, #2
   15410:	bl	11380 <memmove@plt>
   15414:	ldr	r4, [sp, #12]
   15418:	ldr	r3, [sp, #16]
   1541c:	ldr	r0, [r7]
   15420:	mov	r2, r3
   15424:	mov	r1, r4
   15428:	add	r0, r0, r8
   1542c:	bl	113c8 <memcpy@plt>
   15430:	ldr	r3, [sl]
   15434:	mov	r0, r4
   15438:	sub	r3, r3, #1
   1543c:	add	r6, r3, r6
   15440:	str	r6, [sl]
   15444:	bl	113a4 <free@plt>
   15448:	ldr	r0, [sp, #8]
   1544c:	bl	113a4 <free@plt>
   15450:	mov	r4, r5
   15454:	b	152a8 <__assert_fail@plt+0x3ba4>
   15458:	mov	r3, r6
   1545c:	mov	r2, r8
   15460:	b	153c4 <__assert_fail@plt+0x3cc0>
   15464:	ldr	r0, [pc, #116]	; 154e0 <__assert_fail@plt+0x3ddc>
   15468:	ldr	r2, [r3]
   1546c:	mov	r3, r0
   15470:	ldr	r0, [sp, #28]
   15474:	ldr	r1, [pc, #104]	; 154e4 <__assert_fail@plt+0x3de0>
   15478:	ldr	r3, [r0, r3]
   1547c:	add	r1, pc, r1
   15480:	ldr	r0, [r3]
   15484:	bl	1153c <fprintf@plt>
   15488:	mov	r0, #1
   1548c:	bl	11608 <xexit@plt>
   15490:	ldr	r0, [sp, #28]
   15494:	ldr	r3, [pc, #68]	; 154e0 <__assert_fail@plt+0x3ddc>
   15498:	ldr	r2, [r7]
   1549c:	ldr	r1, [pc, #68]	; 154e8 <__assert_fail@plt+0x3de4>
   154a0:	ldr	r3, [r0, r3]
   154a4:	add	r1, pc, r1
   154a8:	ldr	r2, [r2]
   154ac:	ldr	r0, [r3]
   154b0:	bl	1153c <fprintf@plt>
   154b4:	mov	r0, #1
   154b8:	bl	11608 <xexit@plt>
   154bc:	ldr	r3, [sp, #12]
   154c0:	ldr	r0, [sp, #24]
   154c4:	ldr	r6, [r3]
   154c8:	bl	14dac <__assert_fail@plt+0x36a8>
   154cc:	str	r0, [r7]
   154d0:	b	15398 <__assert_fail@plt+0x3c94>
   154d4:	andeq	r1, r1, ip, asr lr
   154d8:	andeq	r1, r0, r4, asr #24
   154dc:	andeq	r0, r0, r4, ror #2
   154e0:	andeq	r0, r0, r8, ror #2
   154e4:	andeq	r1, r0, r8, lsr #18
   154e8:	andeq	r1, r0, ip, lsr #18
   154ec:	subs	r3, r0, #0
   154f0:	beq	15518 <__assert_fail@plt+0x3e14>
   154f4:	ldr	r0, [r3]
   154f8:	cmp	r0, #0
   154fc:	bxeq	lr
   15500:	mov	r0, #0
   15504:	ldr	r2, [r3, #4]!
   15508:	add	r0, r0, #1
   1550c:	cmp	r2, #0
   15510:	bne	15504 <__assert_fail@plt+0x3e00>
   15514:	bx	lr
   15518:	mov	r0, r3
   1551c:	bx	lr
   15520:	ldr	r3, [pc, #452]	; 156ec <__assert_fail@plt+0x3fe8>
   15524:	add	r3, pc, r3
   15528:	ldr	r3, [r3]
   1552c:	cmp	r3, #0
   15530:	beq	1553c <__assert_fail@plt+0x3e38>
   15534:	mov	r0, r3
   15538:	bx	lr
   1553c:	ldr	r0, [pc, #428]	; 156f0 <__assert_fail@plt+0x3fec>
   15540:	push	{r4, r5, r6, lr}
   15544:	add	r0, pc, r0
   15548:	bl	114b8 <getenv@plt>
   1554c:	subs	r4, r0, #0
   15550:	beq	156c4 <__assert_fail@plt+0x3fc0>
   15554:	mov	r1, #7
   15558:	bl	11590 <access@plt>
   1555c:	cmp	r0, #0
   15560:	bne	155c4 <__assert_fail@plt+0x3ec0>
   15564:	ldr	r0, [pc, #392]	; 156f4 <__assert_fail@plt+0x3ff0>
   15568:	add	r0, pc, r0
   1556c:	bl	114b8 <getenv@plt>
   15570:	ldr	r0, [pc, #384]	; 156f8 <__assert_fail@plt+0x3ff4>
   15574:	add	r0, pc, r0
   15578:	bl	114b8 <getenv@plt>
   1557c:	mov	r0, r4
   15580:	bl	11518 <strlen@plt>
   15584:	mov	r5, r0
   15588:	add	r6, r5, #1
   1558c:	add	r0, r0, #2
   15590:	bl	1144c <xmalloc@plt>
   15594:	mov	r1, r4
   15598:	bl	11470 <strcpy@plt>
   1559c:	ldr	r2, [pc, #344]	; 156fc <__assert_fail@plt+0x3ff8>
   155a0:	mov	r1, #0
   155a4:	add	r2, pc, r2
   155a8:	mov	r3, r0
   155ac:	mov	r0, #47	; 0x2f
   155b0:	strb	r0, [r3, r5]
   155b4:	str	r3, [r2]
   155b8:	strb	r1, [r3, r6]
   155bc:	mov	r0, r3
   155c0:	pop	{r4, r5, r6, pc}
   155c4:	ldr	r0, [pc, #308]	; 15700 <__assert_fail@plt+0x3ffc>
   155c8:	add	r0, pc, r0
   155cc:	bl	114b8 <getenv@plt>
   155d0:	mov	r4, r0
   155d4:	cmp	r4, #0
   155d8:	beq	156d8 <__assert_fail@plt+0x3fd4>
   155dc:	mov	r1, #7
   155e0:	mov	r0, r4
   155e4:	bl	11590 <access@plt>
   155e8:	cmp	r0, #0
   155ec:	beq	15570 <__assert_fail@plt+0x3e6c>
   155f0:	ldr	r0, [pc, #268]	; 15704 <__assert_fail@plt+0x4000>
   155f4:	add	r0, pc, r0
   155f8:	bl	114b8 <getenv@plt>
   155fc:	mov	r4, r0
   15600:	cmp	r4, #0
   15604:	beq	1561c <__assert_fail@plt+0x3f18>
   15608:	mov	r1, #7
   1560c:	mov	r0, r4
   15610:	bl	11590 <access@plt>
   15614:	cmp	r0, #0
   15618:	beq	1557c <__assert_fail@plt+0x3e78>
   1561c:	ldr	r4, [pc, #228]	; 15708 <__assert_fail@plt+0x4004>
   15620:	mov	r1, #7
   15624:	add	r4, pc, r4
   15628:	mov	r0, r4
   1562c:	bl	11590 <access@plt>
   15630:	cmp	r0, #0
   15634:	moveq	r6, #5
   15638:	moveq	r0, #6
   1563c:	moveq	r5, #4
   15640:	beq	15590 <__assert_fail@plt+0x3e8c>
   15644:	ldr	r4, [pc, #192]	; 1570c <__assert_fail@plt+0x4008>
   15648:	mov	r1, #7
   1564c:	add	r4, pc, r4
   15650:	add	r6, r4, #20
   15654:	mov	r0, r6
   15658:	bl	11590 <access@plt>
   1565c:	cmp	r0, #0
   15660:	bne	15680 <__assert_fail@plt+0x3f7c>
   15664:	mov	r0, r6
   15668:	bl	11518 <strlen@plt>
   1566c:	mov	r4, r6
   15670:	mov	r5, r0
   15674:	add	r6, r5, #1
   15678:	add	r0, r0, #2
   1567c:	b	15590 <__assert_fail@plt+0x3e8c>
   15680:	mov	r1, #7
   15684:	mov	r0, r4
   15688:	bl	11590 <access@plt>
   1568c:	cmp	r0, #0
   15690:	beq	1557c <__assert_fail@plt+0x3e78>
   15694:	add	r4, r4, #12
   15698:	mov	r0, r4
   1569c:	mov	r1, #7
   156a0:	bl	11590 <access@plt>
   156a4:	cmp	r0, #0
   156a8:	beq	1557c <__assert_fail@plt+0x3e78>
   156ac:	ldr	r4, [pc, #92]	; 15710 <__assert_fail@plt+0x400c>
   156b0:	mov	r6, #2
   156b4:	mov	r0, #3
   156b8:	mov	r5, #1
   156bc:	add	r4, pc, r4
   156c0:	b	15590 <__assert_fail@plt+0x3e8c>
   156c4:	ldr	r0, [pc, #72]	; 15714 <__assert_fail@plt+0x4010>
   156c8:	add	r0, pc, r0
   156cc:	bl	114b8 <getenv@plt>
   156d0:	mov	r4, r0
   156d4:	b	155d4 <__assert_fail@plt+0x3ed0>
   156d8:	ldr	r0, [pc, #56]	; 15718 <__assert_fail@plt+0x4014>
   156dc:	add	r0, pc, r0
   156e0:	bl	114b8 <getenv@plt>
   156e4:	mov	r4, r0
   156e8:	b	15600 <__assert_fail@plt+0x3efc>
   156ec:	andeq	r2, r1, ip, lsr #3
   156f0:	andeq	r1, r0, r4, ror #17
   156f4:	andeq	r1, r0, r8, asr #17
   156f8:	andeq	r1, r0, r0, asr #17
   156fc:	andeq	r2, r1, ip, lsr #2
   15700:	andeq	r1, r0, r8, ror #16
   15704:	andeq	r1, r0, r0, asr #16
   15708:	strdeq	r1, [r0], -ip
   1570c:			; <UNDEFINED> instruction: 0x000017b4
   15710:	andeq	r1, r0, r4, asr #2
   15714:	andeq	r1, r0, r8, ror #14
   15718:	andeq	r1, r0, r8, asr r7
   1571c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15720:	mov	r6, r0
   15724:	bl	15520 <__assert_fail@plt+0x3e1c>
   15728:	ldr	r8, [pc, #228]	; 15814 <__assert_fail@plt+0x4110>
   1572c:	cmp	r6, #0
   15730:	add	r8, pc, r8
   15734:	mov	r7, r0
   15738:	beq	157c8 <__assert_fail@plt+0x40c4>
   1573c:	mov	r0, r6
   15740:	bl	11518 <strlen@plt>
   15744:	mov	r4, r0
   15748:	mov	r9, r0
   1574c:	mov	r0, r7
   15750:	bl	11518 <strlen@plt>
   15754:	mov	r5, r0
   15758:	add	r0, r0, r4
   1575c:	add	r0, r0, #9
   15760:	bl	1144c <xmalloc@plt>
   15764:	mov	r1, r7
   15768:	mov	r4, r0
   1576c:	bl	11470 <strcpy@plt>
   15770:	ldr	r3, [pc, #160]	; 15818 <__assert_fail@plt+0x4114>
   15774:	add	r2, r4, r5
   15778:	add	r3, pc, r3
   1577c:	add	ip, r5, #8
   15780:	ldm	r3!, {r0, r1}
   15784:	ldrb	r3, [r3]
   15788:	str	r0, [r4, r5]
   1578c:	str	r1, [r2, #4]
   15790:	add	r0, r4, ip
   15794:	mov	r1, r6
   15798:	strb	r3, [r2, #8]
   1579c:	bl	11470 <strcpy@plt>
   157a0:	mov	r1, r9
   157a4:	mov	r0, r4
   157a8:	bl	114a0 <mkstemps64@plt>
   157ac:	cmn	r0, #1
   157b0:	beq	157dc <__assert_fail@plt+0x40d8>
   157b4:	bl	116ec <close@plt>
   157b8:	cmp	r0, #0
   157bc:	bne	15810 <__assert_fail@plt+0x410c>
   157c0:	mov	r0, r4
   157c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157c8:	mov	r9, r6
   157cc:	mov	r4, r6
   157d0:	ldr	r6, [pc, #68]	; 1581c <__assert_fail@plt+0x4118>
   157d4:	add	r6, pc, r6
   157d8:	b	1574c <__assert_fail@plt+0x4048>
   157dc:	ldr	r3, [pc, #60]	; 15820 <__assert_fail@plt+0x411c>
   157e0:	ldr	r3, [r8, r3]
   157e4:	ldr	r4, [r3]
   157e8:	bl	11554 <__errno_location@plt>
   157ec:	ldr	r0, [r0]
   157f0:	bl	114dc <strerror@plt>
   157f4:	ldr	r1, [pc, #40]	; 15824 <__assert_fail@plt+0x4120>
   157f8:	mov	r2, r7
   157fc:	add	r1, pc, r1
   15800:	mov	r3, r0
   15804:	mov	r0, r4
   15808:	bl	1153c <fprintf@plt>
   1580c:	bl	116e0 <abort@plt>
   15810:	bl	116e0 <abort@plt>
   15814:	andeq	r1, r1, r8, asr #17
   15818:	andeq	r1, r0, r4, asr #13
   1581c:	andeq	r0, r0, r4, asr sp
   15820:	andeq	r0, r0, r8, ror #2
   15824:	andeq	r1, r0, ip, asr #12
   15828:	subs	r2, r1, #1
   1582c:	bxeq	lr
   15830:	bcc	15a08 <__assert_fail@plt+0x4304>
   15834:	cmp	r0, r1
   15838:	bls	159ec <__assert_fail@plt+0x42e8>
   1583c:	tst	r1, r2
   15840:	beq	159f8 <__assert_fail@plt+0x42f4>
   15844:	clz	r3, r0
   15848:	clz	r2, r1
   1584c:	sub	r3, r2, r3
   15850:	rsbs	r3, r3, #31
   15854:	addne	r3, r3, r3, lsl #1
   15858:	mov	r2, #0
   1585c:	addne	pc, pc, r3, lsl #2
   15860:	nop			; (mov r0, r0)
   15864:	cmp	r0, r1, lsl #31
   15868:	adc	r2, r2, r2
   1586c:	subcs	r0, r0, r1, lsl #31
   15870:	cmp	r0, r1, lsl #30
   15874:	adc	r2, r2, r2
   15878:	subcs	r0, r0, r1, lsl #30
   1587c:	cmp	r0, r1, lsl #29
   15880:	adc	r2, r2, r2
   15884:	subcs	r0, r0, r1, lsl #29
   15888:	cmp	r0, r1, lsl #28
   1588c:	adc	r2, r2, r2
   15890:	subcs	r0, r0, r1, lsl #28
   15894:	cmp	r0, r1, lsl #27
   15898:	adc	r2, r2, r2
   1589c:	subcs	r0, r0, r1, lsl #27
   158a0:	cmp	r0, r1, lsl #26
   158a4:	adc	r2, r2, r2
   158a8:	subcs	r0, r0, r1, lsl #26
   158ac:	cmp	r0, r1, lsl #25
   158b0:	adc	r2, r2, r2
   158b4:	subcs	r0, r0, r1, lsl #25
   158b8:	cmp	r0, r1, lsl #24
   158bc:	adc	r2, r2, r2
   158c0:	subcs	r0, r0, r1, lsl #24
   158c4:	cmp	r0, r1, lsl #23
   158c8:	adc	r2, r2, r2
   158cc:	subcs	r0, r0, r1, lsl #23
   158d0:	cmp	r0, r1, lsl #22
   158d4:	adc	r2, r2, r2
   158d8:	subcs	r0, r0, r1, lsl #22
   158dc:	cmp	r0, r1, lsl #21
   158e0:	adc	r2, r2, r2
   158e4:	subcs	r0, r0, r1, lsl #21
   158e8:	cmp	r0, r1, lsl #20
   158ec:	adc	r2, r2, r2
   158f0:	subcs	r0, r0, r1, lsl #20
   158f4:	cmp	r0, r1, lsl #19
   158f8:	adc	r2, r2, r2
   158fc:	subcs	r0, r0, r1, lsl #19
   15900:	cmp	r0, r1, lsl #18
   15904:	adc	r2, r2, r2
   15908:	subcs	r0, r0, r1, lsl #18
   1590c:	cmp	r0, r1, lsl #17
   15910:	adc	r2, r2, r2
   15914:	subcs	r0, r0, r1, lsl #17
   15918:	cmp	r0, r1, lsl #16
   1591c:	adc	r2, r2, r2
   15920:	subcs	r0, r0, r1, lsl #16
   15924:	cmp	r0, r1, lsl #15
   15928:	adc	r2, r2, r2
   1592c:	subcs	r0, r0, r1, lsl #15
   15930:	cmp	r0, r1, lsl #14
   15934:	adc	r2, r2, r2
   15938:	subcs	r0, r0, r1, lsl #14
   1593c:	cmp	r0, r1, lsl #13
   15940:	adc	r2, r2, r2
   15944:	subcs	r0, r0, r1, lsl #13
   15948:	cmp	r0, r1, lsl #12
   1594c:	adc	r2, r2, r2
   15950:	subcs	r0, r0, r1, lsl #12
   15954:	cmp	r0, r1, lsl #11
   15958:	adc	r2, r2, r2
   1595c:	subcs	r0, r0, r1, lsl #11
   15960:	cmp	r0, r1, lsl #10
   15964:	adc	r2, r2, r2
   15968:	subcs	r0, r0, r1, lsl #10
   1596c:	cmp	r0, r1, lsl #9
   15970:	adc	r2, r2, r2
   15974:	subcs	r0, r0, r1, lsl #9
   15978:	cmp	r0, r1, lsl #8
   1597c:	adc	r2, r2, r2
   15980:	subcs	r0, r0, r1, lsl #8
   15984:	cmp	r0, r1, lsl #7
   15988:	adc	r2, r2, r2
   1598c:	subcs	r0, r0, r1, lsl #7
   15990:	cmp	r0, r1, lsl #6
   15994:	adc	r2, r2, r2
   15998:	subcs	r0, r0, r1, lsl #6
   1599c:	cmp	r0, r1, lsl #5
   159a0:	adc	r2, r2, r2
   159a4:	subcs	r0, r0, r1, lsl #5
   159a8:	cmp	r0, r1, lsl #4
   159ac:	adc	r2, r2, r2
   159b0:	subcs	r0, r0, r1, lsl #4
   159b4:	cmp	r0, r1, lsl #3
   159b8:	adc	r2, r2, r2
   159bc:	subcs	r0, r0, r1, lsl #3
   159c0:	cmp	r0, r1, lsl #2
   159c4:	adc	r2, r2, r2
   159c8:	subcs	r0, r0, r1, lsl #2
   159cc:	cmp	r0, r1, lsl #1
   159d0:	adc	r2, r2, r2
   159d4:	subcs	r0, r0, r1, lsl #1
   159d8:	cmp	r0, r1
   159dc:	adc	r2, r2, r2
   159e0:	subcs	r0, r0, r1
   159e4:	mov	r0, r2
   159e8:	bx	lr
   159ec:	moveq	r0, #1
   159f0:	movne	r0, #0
   159f4:	bx	lr
   159f8:	clz	r2, r1
   159fc:	rsb	r2, r2, #31
   15a00:	lsr	r0, r0, r2
   15a04:	bx	lr
   15a08:	cmp	r0, #0
   15a0c:	mvnne	r0, #0
   15a10:	b	15a34 <__assert_fail@plt+0x4330>
   15a14:	cmp	r1, #0
   15a18:	beq	15a08 <__assert_fail@plt+0x4304>
   15a1c:	push	{r0, r1, lr}
   15a20:	bl	15828 <__assert_fail@plt+0x4124>
   15a24:	pop	{r1, r2, lr}
   15a28:	mul	r3, r2, r0
   15a2c:	sub	r1, r1, r3
   15a30:	bx	lr
   15a34:	push	{r1, lr}
   15a38:	mov	r0, #8
   15a3c:	bl	11314 <raise@plt>
   15a40:	pop	{r1, pc}
   15a44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a48:	mov	r7, r0
   15a4c:	ldr	r6, [pc, #72]	; 15a9c <__assert_fail@plt+0x4398>
   15a50:	ldr	r5, [pc, #72]	; 15aa0 <__assert_fail@plt+0x439c>
   15a54:	add	r6, pc, r6
   15a58:	add	r5, pc, r5
   15a5c:	sub	r6, r6, r5
   15a60:	mov	r8, r1
   15a64:	mov	r9, r2
   15a68:	bl	112e8 <strstr@plt-0x20>
   15a6c:	asrs	r6, r6, #2
   15a70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a74:	mov	r4, #0
   15a78:	add	r4, r4, #1
   15a7c:	ldr	r3, [r5], #4
   15a80:	mov	r2, r9
   15a84:	mov	r1, r8
   15a88:	mov	r0, r7
   15a8c:	blx	r3
   15a90:	cmp	r6, r4
   15a94:	bne	15a78 <__assert_fail@plt+0x4374>
   15a98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a9c:	andeq	r1, r1, r0, lsr #9
   15aa0:	muleq	r1, r8, r4
   15aa4:	bx	lr

Disassembly of section .fini:

00015aa8 <.fini>:
   15aa8:	push	{r3, lr}
   15aac:	pop	{r3, pc}
