
raspbian-preinstalled/resizepart:     file format elf32-littlearm


Disassembly of section .init:

000114b8 <.init>:
   114b8:	push	{r3, lr}
   114bc:	bl	11e54 <__assert_fail@plt+0x4d8>
   114c0:	pop	{r3, pc}

Disassembly of section .plt:

000114c4 <fdopen@plt-0x14>:
   114c4:	push	{lr}		; (str lr, [sp, #-4]!)
   114c8:	ldr	lr, [pc, #4]	; 114d4 <fdopen@plt-0x4>
   114cc:	add	lr, pc, lr
   114d0:	ldr	pc, [lr, #8]!
   114d4:	andeq	r9, r1, r0, lsl #19

000114d8 <fdopen@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #2432]!	; 0x980

000114e4 <calloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #2424]!	; 0x978

000114f0 <strstr@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #2416]!	; 0x970

000114fc <raise@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #2408]!	; 0x968

00011508 <fsync@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #2400]!	; 0x960

00011514 <strcmp@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #2392]!	; 0x958

00011520 <rewinddir@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #2384]!	; 0x950

0001152c <strtol@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #2376]!	; 0x948

00011538 <strcspn@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #2368]!	; 0x940

00011544 <read@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #2360]!	; 0x938

00011550 <getuid@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #102400	; 0x19000
   11558:	ldr	pc, [ip, #2352]!	; 0x930

0001155c <memmove@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #102400	; 0x19000
   11564:	ldr	pc, [ip, #2344]!	; 0x928

00011568 <free@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #102400	; 0x19000
   11570:	ldr	pc, [ip, #2336]!	; 0x920

00011574 <fgets@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #102400	; 0x19000
   1157c:	ldr	pc, [ip, #2328]!	; 0x918

00011580 <nanosleep@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #102400	; 0x19000
   11588:	ldr	pc, [ip, #2320]!	; 0x910

0001158c <faccessat@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #102400	; 0x19000
   11594:	ldr	pc, [ip, #2312]!	; 0x908

00011598 <ferror@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #102400	; 0x19000
   115a0:	ldr	pc, [ip, #2304]!	; 0x900

000115a4 <strndup@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #102400	; 0x19000
   115ac:	ldr	pc, [ip, #2296]!	; 0x8f8

000115b0 <__openat64_2@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #102400	; 0x19000
   115b8:	ldr	pc, [ip, #2288]!	; 0x8f0

000115bc <_exit@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #102400	; 0x19000
   115c4:	ldr	pc, [ip, #2280]!	; 0x8e8

000115c8 <__vsnprintf_chk@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #102400	; 0x19000
   115d0:	ldr	pc, [ip, #2272]!	; 0x8e0

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #102400	; 0x19000
   115dc:	ldr	pc, [ip, #2264]!	; 0x8d8

000115e0 <__strtoull_internal@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #102400	; 0x19000
   115e8:	ldr	pc, [ip, #2256]!	; 0x8d0

000115ec <dcgettext@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #102400	; 0x19000
   115f4:	ldr	pc, [ip, #2248]!	; 0x8c8

000115f8 <strdup@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #102400	; 0x19000
   11600:	ldr	pc, [ip, #2240]!	; 0x8c0

00011604 <__stack_chk_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #102400	; 0x19000
   1160c:	ldr	pc, [ip, #2232]!	; 0x8b8

00011610 <dup@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #102400	; 0x19000
   11618:	ldr	pc, [ip, #2224]!	; 0x8b0

0001161c <textdomain@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #102400	; 0x19000
   11624:	ldr	pc, [ip, #2216]!	; 0x8a8

00011628 <err@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #102400	; 0x19000
   11630:	ldr	pc, [ip, #2208]!	; 0x8a0

00011634 <geteuid@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #102400	; 0x19000
   1163c:	ldr	pc, [ip, #2200]!	; 0x898

00011640 <vfscanf@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #102400	; 0x19000
   11648:	ldr	pc, [ip, #2192]!	; 0x890

0001164c <__fxstat64@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #102400	; 0x19000
   11654:	ldr	pc, [ip, #2184]!	; 0x888

00011658 <readlink@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #102400	; 0x19000
   11660:	ldr	pc, [ip, #2176]!	; 0x880

00011664 <getegid@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #102400	; 0x19000
   1166c:	ldr	pc, [ip, #2168]!	; 0x878

00011670 <mkostemp64@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #102400	; 0x19000
   11678:	ldr	pc, [ip, #2160]!	; 0x870

0001167c <ioctl@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #102400	; 0x19000
   11684:	ldr	pc, [ip, #2152]!	; 0x868

00011688 <__fpending@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #102400	; 0x19000
   11690:	ldr	pc, [ip, #2144]!	; 0x860

00011694 <open64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #102400	; 0x19000
   1169c:	ldr	pc, [ip, #2136]!	; 0x858

000116a0 <__asprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #102400	; 0x19000
   116a8:	ldr	pc, [ip, #2128]!	; 0x850

000116ac <getenv@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #102400	; 0x19000
   116b4:	ldr	pc, [ip, #2120]!	; 0x848

000116b8 <malloc@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #102400	; 0x19000
   116c0:	ldr	pc, [ip, #2112]!	; 0x840

000116c4 <__libc_start_main@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #102400	; 0x19000
   116cc:	ldr	pc, [ip, #2104]!	; 0x838

000116d0 <readlinkat@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #102400	; 0x19000
   116d8:	ldr	pc, [ip, #2096]!	; 0x830

000116dc <__vfprintf_chk@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #102400	; 0x19000
   116e4:	ldr	pc, [ip, #2088]!	; 0x828

000116e8 <strsep@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #102400	; 0x19000
   116f0:	ldr	pc, [ip, #2080]!	; 0x820

000116f4 <getdtablesize@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #102400	; 0x19000
   116fc:	ldr	pc, [ip, #2072]!	; 0x818

00011700 <__ctype_tolower_loc@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #102400	; 0x19000
   11708:	ldr	pc, [ip, #2064]!	; 0x810

0001170c <__gmon_start__@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #102400	; 0x19000
   11714:	ldr	pc, [ip, #2056]!	; 0x808

00011718 <getopt_long@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #102400	; 0x19000
   11720:	ldr	pc, [ip, #2048]!	; 0x800

00011724 <__ctype_b_loc@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #102400	; 0x19000
   1172c:	ldr	pc, [ip, #2040]!	; 0x7f8

00011730 <getpid@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #102400	; 0x19000
   11738:	ldr	pc, [ip, #2032]!	; 0x7f0

0001173c <exit@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #102400	; 0x19000
   11744:	ldr	pc, [ip, #2024]!	; 0x7e8

00011748 <syscall@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #102400	; 0x19000
   11750:	ldr	pc, [ip, #2016]!	; 0x7e0

00011754 <strtoul@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #102400	; 0x19000
   1175c:	ldr	pc, [ip, #2008]!	; 0x7d8

00011760 <strlen@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #102400	; 0x19000
   11768:	ldr	pc, [ip, #2000]!	; 0x7d0

0001176c <strchr@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #102400	; 0x19000
   11774:	ldr	pc, [ip, #1992]!	; 0x7c8

00011778 <warnx@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #102400	; 0x19000
   11780:	ldr	pc, [ip, #1984]!	; 0x7c0

00011784 <__open64_2@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #102400	; 0x19000
   1178c:	ldr	pc, [ip, #1976]!	; 0x7b8

00011790 <__errno_location@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #102400	; 0x19000
   11798:	ldr	pc, [ip, #1968]!	; 0x7b0

0001179c <strncasecmp@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #102400	; 0x19000
   117a4:	ldr	pc, [ip, #1960]!	; 0x7a8

000117a8 <__cxa_atexit@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #102400	; 0x19000
   117b0:	ldr	pc, [ip, #1952]!	; 0x7a0

000117b4 <__vasprintf_chk@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #102400	; 0x19000
   117bc:	ldr	pc, [ip, #1944]!	; 0x798

000117c0 <mkdir@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #102400	; 0x19000
   117c8:	ldr	pc, [ip, #1936]!	; 0x790

000117cc <getgid@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #102400	; 0x19000
   117d4:	ldr	pc, [ip, #1928]!	; 0x788

000117d8 <__sched_cpufree@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #102400	; 0x19000
   117e0:	ldr	pc, [ip, #1920]!	; 0x780

000117e4 <memset@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #102400	; 0x19000
   117ec:	ldr	pc, [ip, #1912]!	; 0x778

000117f0 <strncpy@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #102400	; 0x19000
   117f8:	ldr	pc, [ip, #1904]!	; 0x770

000117fc <__xpg_basename@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #102400	; 0x19000
   11804:	ldr	pc, [ip, #1896]!	; 0x768

00011808 <fscanf@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #102400	; 0x19000
   11810:	ldr	pc, [ip, #1888]!	; 0x760

00011814 <fgetc@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #102400	; 0x19000
   1181c:	ldr	pc, [ip, #1880]!	; 0x758

00011820 <__printf_chk@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #102400	; 0x19000
   11828:	ldr	pc, [ip, #1872]!	; 0x750

0001182c <strtod@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #102400	; 0x19000
   11834:	ldr	pc, [ip, #1864]!	; 0x748

00011838 <write@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #102400	; 0x19000
   11840:	ldr	pc, [ip, #1856]!	; 0x740

00011844 <__sched_cpualloc@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #102400	; 0x19000
   1184c:	ldr	pc, [ip, #1848]!	; 0x738

00011850 <__fprintf_chk@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #102400	; 0x19000
   11858:	ldr	pc, [ip, #1840]!	; 0x730

0001185c <fclose@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #102400	; 0x19000
   11864:	ldr	pc, [ip, #1832]!	; 0x728

00011868 <fcntl64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #102400	; 0x19000
   11870:	ldr	pc, [ip, #1824]!	; 0x720

00011874 <setlocale@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #102400	; 0x19000
   1187c:	ldr	pc, [ip, #1816]!	; 0x718

00011880 <errx@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #102400	; 0x19000
   11888:	ldr	pc, [ip, #1808]!	; 0x710

0001188c <strrchr@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #102400	; 0x19000
   11894:	ldr	pc, [ip, #1800]!	; 0x708

00011898 <warn@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #102400	; 0x19000
   118a0:	ldr	pc, [ip, #1792]!	; 0x700

000118a4 <fputc@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #102400	; 0x19000
   118ac:	ldr	pc, [ip, #1784]!	; 0x6f8

000118b0 <sscanf@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #102400	; 0x19000
   118b8:	ldr	pc, [ip, #1776]!	; 0x6f0

000118bc <localeconv@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #102400	; 0x19000
   118c4:	ldr	pc, [ip, #1768]!	; 0x6e8

000118c8 <readdir64@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #102400	; 0x19000
   118d0:	ldr	pc, [ip, #1760]!	; 0x6e0

000118d4 <fdopendir@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #102400	; 0x19000
   118dc:	ldr	pc, [ip, #1752]!	; 0x6d8

000118e0 <dirfd@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #102400	; 0x19000
   118e8:	ldr	pc, [ip, #1744]!	; 0x6d0

000118ec <__strtoll_internal@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #102400	; 0x19000
   118f4:	ldr	pc, [ip, #1736]!	; 0x6c8

000118f8 <fopen64@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #102400	; 0x19000
   11900:	ldr	pc, [ip, #1728]!	; 0x6c0

00011904 <bindtextdomain@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #102400	; 0x19000
   1190c:	ldr	pc, [ip, #1720]!	; 0x6b8

00011910 <umask@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #102400	; 0x19000
   11918:	ldr	pc, [ip, #1712]!	; 0x6b0

0001191c <__xstat64@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #102400	; 0x19000
   11924:	ldr	pc, [ip, #1704]!	; 0x6a8

00011928 <fputs@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #102400	; 0x19000
   11930:	ldr	pc, [ip, #1696]!	; 0x6a0

00011934 <strncmp@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #102400	; 0x19000
   1193c:	ldr	pc, [ip, #1688]!	; 0x698

00011940 <abort@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #102400	; 0x19000
   11948:	ldr	pc, [ip, #1680]!	; 0x690

0001194c <close@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #102400	; 0x19000
   11954:	ldr	pc, [ip, #1672]!	; 0x688

00011958 <closedir@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #102400	; 0x19000
   11960:	ldr	pc, [ip, #1664]!	; 0x680

00011964 <__snprintf_chk@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #102400	; 0x19000
   1196c:	ldr	pc, [ip, #1656]!	; 0x678

00011970 <strspn@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #102400	; 0x19000
   11978:	ldr	pc, [ip, #1648]!	; 0x670

0001197c <__assert_fail@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #102400	; 0x19000
   11984:	ldr	pc, [ip, #1640]!	; 0x668

Disassembly of section .text:

00011988 <.text>:
   11988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1198c:	sub	sp, sp, #284	; 0x11c
   11990:	ldr	r6, [pc, #1020]	; 11d94 <__assert_fail@plt+0x418>
   11994:	mov	r7, r0
   11998:	mov	r5, r1
   1199c:	ldr	r3, [r6]
   119a0:	ldr	r1, [pc, #1008]	; 11d98 <__assert_fail@plt+0x41c>
   119a4:	mov	r0, #6
   119a8:	str	r3, [sp, #276]	; 0x114
   119ac:	bl	11874 <setlocale@plt>
   119b0:	ldr	r1, [pc, #996]	; 11d9c <__assert_fail@plt+0x420>
   119b4:	ldr	r0, [pc, #996]	; 11da0 <__assert_fail@plt+0x424>
   119b8:	bl	11904 <bindtextdomain@plt>
   119bc:	ldr	r0, [pc, #988]	; 11da0 <__assert_fail@plt+0x424>
   119c0:	bl	1161c <textdomain@plt>
   119c4:	mov	r4, #0
   119c8:	ldr	r0, [pc, #980]	; 11da4 <__assert_fail@plt+0x428>
   119cc:	bl	19824 <__assert_fail@plt+0x7ea8>
   119d0:	mov	r1, r5
   119d4:	mov	r0, r7
   119d8:	str	r4, [sp]
   119dc:	ldr	r3, [pc, #964]	; 11da8 <__assert_fail@plt+0x42c>
   119e0:	ldr	r2, [pc, #964]	; 11dac <__assert_fail@plt+0x430>
   119e4:	bl	11718 <getopt_long@plt>
   119e8:	cmn	r0, #1
   119ec:	beq	11a7c <__assert_fail@plt+0x100>
   119f0:	cmp	r0, #86	; 0x56
   119f4:	bne	11a3c <__assert_fail@plt+0xc0>
   119f8:	mov	r2, #5
   119fc:	ldr	r1, [pc, #940]	; 11db0 <__assert_fail@plt+0x434>
   11a00:	mov	r0, r4
   11a04:	bl	115ec <dcgettext@plt>
   11a08:	ldr	r2, [pc, #932]	; 11db4 <__assert_fail@plt+0x438>
   11a0c:	ldr	r3, [pc, #932]	; 11db8 <__assert_fail@plt+0x43c>
   11a10:	ldr	r2, [r2]
   11a14:	mov	r1, r0
   11a18:	mov	r0, #1
   11a1c:	bl	11820 <__printf_chk@plt>
   11a20:	ldr	r2, [sp, #276]	; 0x114
   11a24:	ldr	r3, [r6]
   11a28:	mov	r0, #0
   11a2c:	cmp	r2, r3
   11a30:	bne	11d4c <__assert_fail@plt+0x3d0>
   11a34:	add	sp, sp, #284	; 0x11c
   11a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a3c:	cmp	r0, #104	; 0x68
   11a40:	beq	11c20 <__assert_fail@plt+0x2a4>
   11a44:	ldr	r3, [pc, #880]	; 11dbc <__assert_fail@plt+0x440>
   11a48:	mov	r0, r4
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #872]	; 11dc0 <__assert_fail@plt+0x444>
   11a54:	ldr	r4, [r3]
   11a58:	bl	115ec <dcgettext@plt>
   11a5c:	ldr	r3, [pc, #848]	; 11db4 <__assert_fail@plt+0x438>
   11a60:	mov	r1, #1
   11a64:	ldr	r3, [r3]
   11a68:	mov	r2, r0
   11a6c:	mov	r0, r4
   11a70:	bl	11850 <__fprintf_chk@plt>
   11a74:	mov	r0, #1
   11a78:	bl	1173c <exit@plt>
   11a7c:	cmp	r7, #4
   11a80:	bne	11d5c <__assert_fail@plt+0x3e0>
   11a84:	mov	r2, #5
   11a88:	ldr	r1, [pc, #820]	; 11dc4 <__assert_fail@plt+0x448>
   11a8c:	mov	r0, r4
   11a90:	ldr	r7, [r5, #8]
   11a94:	ldr	sl, [r5, #4]
   11a98:	bl	115ec <dcgettext@plt>
   11a9c:	mov	r1, r0
   11aa0:	mov	r0, r7
   11aa4:	bl	12c5c <__assert_fail@plt+0x12e0>
   11aa8:	mov	r1, r4
   11aac:	mov	r8, r0
   11ab0:	mov	r0, sl
   11ab4:	bl	11694 <open64@plt>
   11ab8:	subs	r7, r0, #0
   11abc:	blt	11d74 <__assert_fail@plt+0x3f8>
   11ac0:	add	r2, sp, #16
   11ac4:	mov	r1, r7
   11ac8:	mov	r0, #3
   11acc:	bl	1164c <__fxstat64@plt>
   11ad0:	subs	r4, r0, #0
   11ad4:	bne	11d10 <__assert_fail@plt+0x394>
   11ad8:	ldr	r3, [sp, #32]
   11adc:	and	r3, r3, #61440	; 0xf000
   11ae0:	cmp	r3, #24576	; 0x6000
   11ae4:	bne	11d10 <__assert_fail@plt+0x394>
   11ae8:	mov	r3, r4
   11aec:	mov	r2, r4
   11af0:	ldrd	r0, [sp, #48]	; 0x30
   11af4:	bl	17278 <__assert_fail@plt+0x58fc>
   11af8:	subs	fp, r0, #0
   11afc:	beq	11d10 <__assert_fail@plt+0x394>
   11b00:	mov	r1, r8
   11b04:	bl	1764c <__assert_fail@plt+0x5cd0>
   11b08:	orrs	r3, r0, r1
   11b0c:	beq	11d18 <__assert_fail@plt+0x39c>
   11b10:	mov	r3, r4
   11b14:	mov	r2, fp
   11b18:	bl	17278 <__assert_fail@plt+0x58fc>
   11b1c:	subs	r4, r0, #0
   11b20:	beq	11d18 <__assert_fail@plt+0x39c>
   11b24:	add	r1, sp, #8
   11b28:	ldr	r2, [pc, #664]	; 11dc8 <__assert_fail@plt+0x44c>
   11b2c:	bl	15da4 <__assert_fail@plt+0x4428>
   11b30:	subs	r9, r0, #0
   11b34:	bne	11d18 <__assert_fail@plt+0x39c>
   11b38:	mov	r0, r4
   11b3c:	bl	143c0 <__assert_fail@plt+0x2a44>
   11b40:	mov	r0, fp
   11b44:	bl	143c0 <__assert_fail@plt+0x2a44>
   11b48:	mov	r2, #5
   11b4c:	ldr	r1, [pc, #632]	; 11dcc <__assert_fail@plt+0x450>
   11b50:	mov	r0, r9
   11b54:	ldr	r5, [r5, #12]
   11b58:	ldr	r4, [sp, #12]
   11b5c:	ldr	sl, [sp, #8]
   11b60:	bl	115ec <dcgettext@plt>
   11b64:	mov	r1, r0
   11b68:	mov	r0, r5
   11b6c:	bl	12e30 <__assert_fail@plt+0x14b4>
   11b70:	mov	r2, #132	; 0x84
   11b74:	mov	fp, r1
   11b78:	mov	r5, r0
   11b7c:	mov	r1, r9
   11b80:	add	r0, sp, #140	; 0x8c
   11b84:	bl	117e4 <memset@plt>
   11b88:	lsl	ip, r4, #9
   11b8c:	lsl	r3, fp, #9
   11b90:	orr	ip, ip, sl, lsr #23
   11b94:	orr	r3, r3, r5, lsr #23
   11b98:	add	lr, sp, #120	; 0x78
   11b9c:	lsl	sl, sl, #9
   11ba0:	lsl	r5, r5, #9
   11ba4:	add	r2, sp, #16
   11ba8:	mov	fp, #3
   11bac:	mov	r4, #152	; 0x98
   11bb0:	ldr	r1, [pc, #536]	; 11dd0 <__assert_fail@plt+0x454>
   11bb4:	mov	r0, r7
   11bb8:	str	ip, [sp, #124]	; 0x7c
   11bbc:	str	r3, [sp, #132]	; 0x84
   11bc0:	str	sl, [sp, #120]	; 0x78
   11bc4:	str	r5, [sp, #128]	; 0x80
   11bc8:	str	r8, [sp, #136]	; 0x88
   11bcc:	str	r9, [sp, #20]
   11bd0:	str	fp, [sp, #16]
   11bd4:	str	r4, [sp, #24]
   11bd8:	str	lr, [sp, #28]
   11bdc:	bl	1167c <ioctl@plt>
   11be0:	cmp	r0, #0
   11be4:	bne	11d50 <__assert_fail@plt+0x3d4>
   11be8:	mov	r0, r7
   11bec:	bl	11508 <fsync@plt>
   11bf0:	mov	r4, r0
   11bf4:	mov	r0, r7
   11bf8:	bl	1194c <close@plt>
   11bfc:	orrs	r3, r4, r0
   11c00:	beq	11a20 <__assert_fail@plt+0xa4>
   11c04:	ldr	r1, [pc, #456]	; 11dd4 <__assert_fail@plt+0x458>
   11c08:	mov	r2, #5
   11c0c:	mov	r0, #0
   11c10:	bl	115ec <dcgettext@plt>
   11c14:	mov	r1, r0
   11c18:	mov	r0, #1
   11c1c:	bl	11628 <err@plt>
   11c20:	ldr	r3, [pc, #432]	; 11dd8 <__assert_fail@plt+0x45c>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #428]	; 11ddc <__assert_fail@plt+0x460>
   11c2c:	ldr	r5, [r3]
   11c30:	mov	r0, r4
   11c34:	bl	115ec <dcgettext@plt>
   11c38:	mov	r1, r5
   11c3c:	bl	11928 <fputs@plt>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #404]	; 11de0 <__assert_fail@plt+0x464>
   11c48:	mov	r0, r4
   11c4c:	bl	115ec <dcgettext@plt>
   11c50:	ldr	r3, [pc, #348]	; 11db4 <__assert_fail@plt+0x438>
   11c54:	mov	r1, #1
   11c58:	ldr	r3, [r3]
   11c5c:	mov	r2, r0
   11c60:	mov	r0, r5
   11c64:	bl	11850 <__fprintf_chk@plt>
   11c68:	mov	r1, r5
   11c6c:	mov	r0, #10
   11c70:	bl	118a4 <fputc@plt>
   11c74:	mov	r2, #5
   11c78:	ldr	r1, [pc, #356]	; 11de4 <__assert_fail@plt+0x468>
   11c7c:	mov	r0, r4
   11c80:	bl	115ec <dcgettext@plt>
   11c84:	mov	r1, r5
   11c88:	bl	11928 <fputs@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #336]	; 11de8 <__assert_fail@plt+0x46c>
   11c94:	mov	r0, r4
   11c98:	bl	115ec <dcgettext@plt>
   11c9c:	mov	r1, r5
   11ca0:	bl	11928 <fputs@plt>
   11ca4:	mov	r2, #5
   11ca8:	ldr	r1, [pc, #316]	; 11dec <__assert_fail@plt+0x470>
   11cac:	mov	r0, r4
   11cb0:	bl	115ec <dcgettext@plt>
   11cb4:	mov	r2, #5
   11cb8:	ldr	r1, [pc, #304]	; 11df0 <__assert_fail@plt+0x474>
   11cbc:	mov	r5, r0
   11cc0:	mov	r0, r4
   11cc4:	bl	115ec <dcgettext@plt>
   11cc8:	ldr	r2, [pc, #292]	; 11df4 <__assert_fail@plt+0x478>
   11ccc:	mov	r3, r5
   11cd0:	str	r2, [sp]
   11cd4:	ldr	r1, [pc, #284]	; 11df8 <__assert_fail@plt+0x47c>
   11cd8:	ldr	r2, [pc, #284]	; 11dfc <__assert_fail@plt+0x480>
   11cdc:	str	r0, [sp, #4]
   11ce0:	mov	r0, #1
   11ce4:	bl	11820 <__printf_chk@plt>
   11ce8:	mov	r2, #5
   11cec:	ldr	r1, [pc, #268]	; 11e00 <__assert_fail@plt+0x484>
   11cf0:	mov	r0, r4
   11cf4:	bl	115ec <dcgettext@plt>
   11cf8:	ldr	r2, [pc, #260]	; 11e04 <__assert_fail@plt+0x488>
   11cfc:	mov	r1, r0
   11d00:	mov	r0, #1
   11d04:	bl	11820 <__printf_chk@plt>
   11d08:	mov	r0, r4
   11d0c:	bl	1173c <exit@plt>
   11d10:	mov	r4, #0
   11d14:	mov	fp, r4
   11d18:	mov	r0, r4
   11d1c:	bl	143c0 <__assert_fail@plt+0x2a44>
   11d20:	mov	r0, fp
   11d24:	bl	143c0 <__assert_fail@plt+0x2a44>
   11d28:	mov	r2, #5
   11d2c:	ldr	r1, [pc, #212]	; 11e08 <__assert_fail@plt+0x48c>
   11d30:	mov	r0, #0
   11d34:	bl	115ec <dcgettext@plt>
   11d38:	ldr	r3, [r5, #8]
   11d3c:	mov	r2, sl
   11d40:	mov	r1, r0
   11d44:	mov	r0, #1
   11d48:	bl	11628 <err@plt>
   11d4c:	bl	11604 <__stack_chk_fail@plt>
   11d50:	mov	r2, #5
   11d54:	ldr	r1, [pc, #176]	; 11e0c <__assert_fail@plt+0x490>
   11d58:	b	11c0c <__assert_fail@plt+0x290>
   11d5c:	mov	r2, #5
   11d60:	ldr	r1, [pc, #168]	; 11e10 <__assert_fail@plt+0x494>
   11d64:	mov	r0, r4
   11d68:	bl	115ec <dcgettext@plt>
   11d6c:	bl	11778 <warnx@plt>
   11d70:	b	11a44 <__assert_fail@plt+0xc8>
   11d74:	mov	r2, #5
   11d78:	ldr	r1, [pc, #148]	; 11e14 <__assert_fail@plt+0x498>
   11d7c:	mov	r0, r4
   11d80:	bl	115ec <dcgettext@plt>
   11d84:	mov	r2, sl
   11d88:	mov	r1, r0
   11d8c:	mov	r0, #1
   11d90:	bl	11628 <err@plt>
   11d94:	andeq	sl, r2, r0, asr sp
   11d98:	andeq	r9, r1, ip, lsl #23
   11d9c:	andeq	r9, r1, r4, lsl #17
   11da0:	muleq	r1, r8, r8
   11da4:	andeq	r1, r1, r8, lsl #30
   11da8:	andeq	r9, r1, r8, asr #16
   11dac:	andeq	r9, r1, r4, lsr #17
   11db0:	andeq	r9, r1, r8, lsr #17
   11db4:	andeq	fp, r2, r0, lsl r0
   11db8:			; <UNDEFINED> instruction: 0x000198b4
   11dbc:	andeq	fp, r2, r8, lsl r0
   11dc0:	andeq	r9, r1, r4, asr #19
   11dc4:	andeq	r9, r1, r4, lsl #20
   11dc8:	andeq	r9, r1, r8, lsr sl
   11dcc:	andeq	r9, r1, r0, lsr #21
   11dd0:	andeq	r1, r0, r9, ror #4
   11dd4:	andeq	r9, r1, ip, asr sl
   11dd8:	andeq	fp, r2, ip, lsl r0
   11ddc:	andeq	r9, r1, r8, asr #17
   11de0:	ldrdeq	r9, [r1], -r4
   11de4:	andeq	r9, r1, r4, lsl #18
   11de8:	andeq	r9, r1, r8, lsr r9
   11dec:	andeq	r9, r1, r4, asr #18
   11df0:	andeq	r9, r1, r8, asr r9
   11df4:	andeq	r9, r1, r8, lsl #19
   11df8:	andeq	r9, r1, r4, ror r9
   11dfc:	andeq	r9, r1, r8, ror #18
   11e00:	muleq	r1, r8, r9
   11e04:			; <UNDEFINED> instruction: 0x000199b4
   11e08:	andeq	r9, r1, ip, ror #20
   11e0c:	andeq	r9, r1, r0, asr #20
   11e10:	andeq	r9, r1, ip, ror #19
   11e14:	andeq	r9, r1, r8, lsr #20
   11e18:	mov	fp, #0
   11e1c:	mov	lr, #0
   11e20:	pop	{r1}		; (ldr r1, [sp], #4)
   11e24:	mov	r2, sp
   11e28:	push	{r2}		; (str r2, [sp, #-4]!)
   11e2c:	push	{r0}		; (str r0, [sp, #-4]!)
   11e30:	ldr	ip, [pc, #16]	; 11e48 <__assert_fail@plt+0x4cc>
   11e34:	push	{ip}		; (str ip, [sp, #-4]!)
   11e38:	ldr	r0, [pc, #12]	; 11e4c <__assert_fail@plt+0x4d0>
   11e3c:	ldr	r3, [pc, #12]	; 11e50 <__assert_fail@plt+0x4d4>
   11e40:	bl	116c4 <__libc_start_main@plt>
   11e44:	bl	11940 <abort@plt>
   11e48:	andeq	r9, r1, r0, lsr #16
   11e4c:	andeq	r1, r1, r8, lsl #19
   11e50:	andeq	r9, r1, r0, asr #15
   11e54:	ldr	r3, [pc, #20]	; 11e70 <__assert_fail@plt+0x4f4>
   11e58:	ldr	r2, [pc, #20]	; 11e74 <__assert_fail@plt+0x4f8>
   11e5c:	add	r3, pc, r3
   11e60:	ldr	r2, [r3, r2]
   11e64:	cmp	r2, #0
   11e68:	bxeq	lr
   11e6c:	b	1170c <__gmon_start__@plt>
   11e70:	strdeq	r8, [r1], -r0
   11e74:	andeq	r0, r0, r4, lsr #3
   11e78:	ldr	r0, [pc, #24]	; 11e98 <__assert_fail@plt+0x51c>
   11e7c:	ldr	r3, [pc, #24]	; 11e9c <__assert_fail@plt+0x520>
   11e80:	cmp	r3, r0
   11e84:	bxeq	lr
   11e88:	ldr	r3, [pc, #16]	; 11ea0 <__assert_fail@plt+0x524>
   11e8c:	cmp	r3, #0
   11e90:	bxeq	lr
   11e94:	bx	r3
   11e98:	andeq	fp, r2, ip
   11e9c:	andeq	fp, r2, ip
   11ea0:	andeq	r0, r0, r0
   11ea4:	ldr	r0, [pc, #36]	; 11ed0 <__assert_fail@plt+0x554>
   11ea8:	ldr	r1, [pc, #36]	; 11ed4 <__assert_fail@plt+0x558>
   11eac:	sub	r1, r1, r0
   11eb0:	asr	r1, r1, #2
   11eb4:	add	r1, r1, r1, lsr #31
   11eb8:	asrs	r1, r1, #1
   11ebc:	bxeq	lr
   11ec0:	ldr	r3, [pc, #16]	; 11ed8 <__assert_fail@plt+0x55c>
   11ec4:	cmp	r3, #0
   11ec8:	bxeq	lr
   11ecc:	bx	r3
   11ed0:	andeq	fp, r2, ip
   11ed4:	andeq	fp, r2, ip
   11ed8:	andeq	r0, r0, r0
   11edc:	push	{r4, lr}
   11ee0:	ldr	r4, [pc, #24]	; 11f00 <__assert_fail@plt+0x584>
   11ee4:	ldrb	r3, [r4]
   11ee8:	cmp	r3, #0
   11eec:	popne	{r4, pc}
   11ef0:	bl	11e78 <__assert_fail@plt+0x4fc>
   11ef4:	mov	r3, #1
   11ef8:	strb	r3, [r4]
   11efc:	pop	{r4, pc}
   11f00:	andeq	fp, r2, r0, lsr #32
   11f04:	b	11ea4 <__assert_fail@plt+0x528>
   11f08:	ldr	r3, [pc, #292]	; 12034 <__assert_fail@plt+0x6b8>
   11f0c:	push	{r4, r5, r6, lr}
   11f10:	ldr	r4, [r3]
   11f14:	mov	r0, r4
   11f18:	bl	11688 <__fpending@plt>
   11f1c:	mov	r6, r0
   11f20:	mov	r0, r4
   11f24:	bl	11598 <ferror@plt>
   11f28:	mov	r5, r0
   11f2c:	mov	r0, r4
   11f30:	bl	1185c <fclose@plt>
   11f34:	cmp	r5, #0
   11f38:	mov	r4, r0
   11f3c:	bne	11fe4 <__assert_fail@plt+0x668>
   11f40:	cmp	r0, #0
   11f44:	beq	11f60 <__assert_fail@plt+0x5e4>
   11f48:	bl	11790 <__errno_location@plt>
   11f4c:	cmp	r6, #0
   11f50:	ldr	r3, [r0]
   11f54:	bne	11fbc <__assert_fail@plt+0x640>
   11f58:	cmp	r3, #9
   11f5c:	bne	11fbc <__assert_fail@plt+0x640>
   11f60:	ldr	r3, [pc, #208]	; 12038 <__assert_fail@plt+0x6bc>
   11f64:	ldr	r4, [r3]
   11f68:	mov	r0, r4
   11f6c:	bl	11688 <__fpending@plt>
   11f70:	mov	r6, r0
   11f74:	mov	r0, r4
   11f78:	bl	11598 <ferror@plt>
   11f7c:	mov	r5, r0
   11f80:	mov	r0, r4
   11f84:	bl	1185c <fclose@plt>
   11f88:	cmp	r5, #0
   11f8c:	mov	r4, r0
   11f90:	bne	12018 <__assert_fail@plt+0x69c>
   11f94:	cmp	r0, #0
   11f98:	popeq	{r4, r5, r6, pc}
   11f9c:	cmp	r6, #0
   11fa0:	bne	11fb4 <__assert_fail@plt+0x638>
   11fa4:	bl	11790 <__errno_location@plt>
   11fa8:	ldr	r3, [r0]
   11fac:	cmp	r3, #9
   11fb0:	popeq	{r4, r5, r6, pc}
   11fb4:	mov	r0, #1
   11fb8:	bl	115bc <_exit@plt>
   11fbc:	cmp	r3, #32
   11fc0:	beq	11f60 <__assert_fail@plt+0x5e4>
   11fc4:	cmp	r3, #0
   11fc8:	beq	12000 <__assert_fail@plt+0x684>
   11fcc:	mov	r2, #5
   11fd0:	ldr	r1, [pc, #100]	; 1203c <__assert_fail@plt+0x6c0>
   11fd4:	mov	r0, #0
   11fd8:	bl	115ec <dcgettext@plt>
   11fdc:	bl	11898 <warn@plt>
   11fe0:	b	11fb4 <__assert_fail@plt+0x638>
   11fe4:	bl	11790 <__errno_location@plt>
   11fe8:	cmp	r4, #0
   11fec:	ldr	r3, [r0]
   11ff0:	bne	11fbc <__assert_fail@plt+0x640>
   11ff4:	cmp	r3, #32
   11ff8:	strne	r4, [r0]
   11ffc:	beq	11f60 <__assert_fail@plt+0x5e4>
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #48]	; 1203c <__assert_fail@plt+0x6c0>
   12008:	mov	r0, #0
   1200c:	bl	115ec <dcgettext@plt>
   12010:	bl	11778 <warnx@plt>
   12014:	b	11fb4 <__assert_fail@plt+0x638>
   12018:	cmp	r0, #0
   1201c:	bne	11fb4 <__assert_fail@plt+0x638>
   12020:	bl	11790 <__errno_location@plt>
   12024:	ldr	r3, [r0]
   12028:	cmp	r3, #32
   1202c:	strne	r4, [r0]
   12030:	b	11fb4 <__assert_fail@plt+0x638>
   12034:	andeq	fp, r2, ip, lsl r0
   12038:	andeq	fp, r2, r8, lsl r0
   1203c:	andeq	r9, r1, r8, ror r8
   12040:	cmp	r0, #0
   12044:	mov	r3, #0
   12048:	str	r3, [r1]
   1204c:	bxeq	lr
   12050:	ldrsb	r2, [r0]
   12054:	cmp	r2, #47	; 0x2f
   12058:	bne	12094 <__assert_fail@plt+0x718>
   1205c:	ldrsb	r3, [r0, #1]
   12060:	cmp	r3, #47	; 0x2f
   12064:	bne	1209c <__assert_fail@plt+0x720>
   12068:	add	r3, r0, #1
   1206c:	b	1207c <__assert_fail@plt+0x700>
   12070:	ldrsb	r2, [r3]
   12074:	cmp	r2, #47	; 0x2f
   12078:	bne	1209c <__assert_fail@plt+0x720>
   1207c:	cmp	r3, #0
   12080:	mov	r0, r3
   12084:	bxeq	lr
   12088:	ldrsb	r2, [r3], #1
   1208c:	cmp	r2, #47	; 0x2f
   12090:	beq	12070 <__assert_fail@plt+0x6f4>
   12094:	cmp	r2, #0
   12098:	beq	120d8 <__assert_fail@plt+0x75c>
   1209c:	mov	r3, #1
   120a0:	str	r3, [r1]
   120a4:	ldrsb	r3, [r0, #1]
   120a8:	add	r2, r0, #1
   120ac:	cmp	r3, #47	; 0x2f
   120b0:	cmpne	r3, #0
   120b4:	bxeq	lr
   120b8:	rsb	r3, r0, #1
   120bc:	add	ip, r2, r3
   120c0:	str	ip, [r1]
   120c4:	ldrsb	ip, [r2, #1]!
   120c8:	cmp	ip, #0
   120cc:	cmpne	ip, #47	; 0x2f
   120d0:	bne	120bc <__assert_fail@plt+0x740>
   120d4:	bx	lr
   120d8:	mov	r0, r2
   120dc:	bx	lr
   120e0:	push	{r4, r5, r6, r7, r8, lr}
   120e4:	mov	r7, r1
   120e8:	ldrsb	r1, [r0]
   120ec:	cmp	r1, #0
   120f0:	movne	r5, r0
   120f4:	movne	r4, #0
   120f8:	beq	12164 <__assert_fail@plt+0x7e8>
   120fc:	cmp	r1, #92	; 0x5c
   12100:	addne	r6, r5, r4
   12104:	beq	12134 <__assert_fail@plt+0x7b8>
   12108:	mov	r0, r7
   1210c:	bl	1176c <strchr@plt>
   12110:	cmp	r0, #0
   12114:	bne	1215c <__assert_fail@plt+0x7e0>
   12118:	ldrsb	r1, [r6, #1]!
   1211c:	add	r4, r4, #1
   12120:	mov	r0, r4
   12124:	cmp	r1, #0
   12128:	popeq	{r4, r5, r6, r7, r8, pc}
   1212c:	cmp	r1, #92	; 0x5c
   12130:	bne	12108 <__assert_fail@plt+0x78c>
   12134:	add	r3, r5, r4
   12138:	ldrsb	r3, [r3, #1]
   1213c:	cmp	r3, #0
   12140:	beq	1215c <__assert_fail@plt+0x7e0>
   12144:	add	r4, r4, #2
   12148:	mov	r0, r4
   1214c:	ldrsb	r1, [r5, r4]
   12150:	cmp	r1, #0
   12154:	bne	120fc <__assert_fail@plt+0x780>
   12158:	pop	{r4, r5, r6, r7, r8, pc}
   1215c:	mov	r0, r4
   12160:	pop	{r4, r5, r6, r7, r8, pc}
   12164:	mov	r0, r1
   12168:	pop	{r4, r5, r6, r7, r8, pc}
   1216c:	ldr	ip, [pc, #244]	; 12268 <__assert_fail@plt+0x8ec>
   12170:	push	{r4, r5, r6, r7, r8, r9, lr}
   12174:	add	ip, pc, ip
   12178:	ldr	lr, [pc, #236]	; 1226c <__assert_fail@plt+0x8f0>
   1217c:	sub	sp, sp, #12
   12180:	mov	r5, #0
   12184:	ldr	r7, [ip, lr]
   12188:	mov	r4, r0
   1218c:	mov	r8, r1
   12190:	ldr	r3, [r7]
   12194:	mov	r0, ip
   12198:	mov	r9, r2
   1219c:	str	r5, [sp]
   121a0:	str	r3, [sp, #4]
   121a4:	bl	11790 <__errno_location@plt>
   121a8:	cmp	r4, r5
   121ac:	str	r5, [r0]
   121b0:	beq	121c0 <__assert_fail@plt+0x844>
   121b4:	ldrsb	r3, [r4]
   121b8:	cmp	r3, r5
   121bc:	bne	121e0 <__assert_fail@plt+0x864>
   121c0:	ldr	r1, [pc, #168]	; 12270 <__assert_fail@plt+0x8f4>
   121c4:	mov	r3, r4
   121c8:	add	r1, pc, r1
   121cc:	mov	r2, r8
   121d0:	ldr	r0, [r1]
   121d4:	ldr	r1, [pc, #152]	; 12274 <__assert_fail@plt+0x8f8>
   121d8:	add	r1, pc, r1
   121dc:	bl	11880 <errx@plt>
   121e0:	mov	r6, r0
   121e4:	mov	r2, r9
   121e8:	mov	r3, r5
   121ec:	mov	r1, sp
   121f0:	mov	r0, r4
   121f4:	bl	115e0 <__strtoull_internal@plt>
   121f8:	ldr	r2, [r6]
   121fc:	cmp	r2, r5
   12200:	bne	1223c <__assert_fail@plt+0x8c0>
   12204:	ldr	r3, [sp]
   12208:	cmp	r3, r4
   1220c:	beq	121c0 <__assert_fail@plt+0x844>
   12210:	cmp	r3, r5
   12214:	beq	12224 <__assert_fail@plt+0x8a8>
   12218:	ldrsb	r3, [r3]
   1221c:	cmp	r3, r5
   12220:	bne	121c0 <__assert_fail@plt+0x844>
   12224:	ldr	r2, [sp, #4]
   12228:	ldr	r3, [r7]
   1222c:	cmp	r2, r3
   12230:	bne	12264 <__assert_fail@plt+0x8e8>
   12234:	add	sp, sp, #12
   12238:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1223c:	ldr	r3, [pc, #52]	; 12278 <__assert_fail@plt+0x8fc>
   12240:	cmp	r2, #34	; 0x22
   12244:	add	r3, pc, r3
   12248:	ldr	r0, [r3]
   1224c:	bne	121c0 <__assert_fail@plt+0x844>
   12250:	ldr	r1, [pc, #36]	; 1227c <__assert_fail@plt+0x900>
   12254:	mov	r3, r4
   12258:	mov	r2, r8
   1225c:	add	r1, pc, r1
   12260:	bl	11628 <err@plt>
   12264:	bl	11604 <__stack_chk_fail@plt>
   12268:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1226c:	muleq	r0, ip, r1
   12270:	andeq	r8, r1, r8, lsr lr
   12274:	andeq	r7, r0, r0, ror #17
   12278:			; <UNDEFINED> instruction: 0x00018dbc
   1227c:	andeq	r7, r0, ip, asr r8
   12280:	push	{r4, lr}
   12284:	mov	r5, r0
   12288:	mov	r4, r1
   1228c:	bl	11790 <__errno_location@plt>
   12290:	ldr	ip, [pc, #32]	; 122b8 <__assert_fail@plt+0x93c>
   12294:	ldr	r1, [pc, #32]	; 122bc <__assert_fail@plt+0x940>
   12298:	add	ip, pc, ip
   1229c:	mov	lr, #34	; 0x22
   122a0:	mov	r3, r5
   122a4:	mov	r2, r4
   122a8:	add	r1, pc, r1
   122ac:	str	lr, [r0]
   122b0:	ldr	r0, [ip]
   122b4:	bl	11628 <err@plt>
   122b8:	andeq	r8, r1, r8, ror #26
   122bc:	andeq	r7, r0, r0, lsl r8
   122c0:	push	{r4, r5, r6, lr}
   122c4:	mov	r4, r0
   122c8:	mov	r5, r1
   122cc:	bl	1216c <__assert_fail@plt+0x7f0>
   122d0:	mov	r3, #0
   122d4:	mvn	r2, #0
   122d8:	cmp	r1, r3
   122dc:	cmpeq	r0, r2
   122e0:	popls	{r4, r5, r6, pc}
   122e4:	mov	r1, r5
   122e8:	mov	r0, r4
   122ec:	bl	12280 <__assert_fail@plt+0x904>
   122f0:	ldr	r3, [pc, #8]	; 12300 <__assert_fail@plt+0x984>
   122f4:	add	r3, pc, r3
   122f8:	str	r0, [r3]
   122fc:	bx	lr
   12300:	andeq	r8, r1, ip, lsl #26
   12304:	ldr	r3, [pc, #1648]	; 1297c <__assert_fail@plt+0x1000>
   12308:	ldr	ip, [pc, #1648]	; 12980 <__assert_fail@plt+0x1004>
   1230c:	add	r3, pc, r3
   12310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12314:	mov	r5, r1
   12318:	ldr	r1, [r3, ip]
   1231c:	sub	sp, sp, #52	; 0x34
   12320:	mov	ip, r1
   12324:	mov	r8, r0
   12328:	str	r1, [sp, #24]
   1232c:	mov	r0, #0
   12330:	mov	r1, #0
   12334:	ldr	r3, [ip]
   12338:	strd	r0, [r5]
   1233c:	mov	r9, r2
   12340:	str	r3, [sp, #44]	; 0x2c
   12344:	bl	11790 <__errno_location@plt>
   12348:	cmp	r8, #0
   1234c:	mov	r4, r0
   12350:	beq	12530 <__assert_fail@plt+0xbb4>
   12354:	ldrsb	fp, [r8]
   12358:	cmp	fp, #0
   1235c:	beq	12530 <__assert_fail@plt+0xbb4>
   12360:	bl	11724 <__ctype_b_loc@plt>
   12364:	mov	r2, r8
   12368:	ldr	r1, [r0]
   1236c:	b	12374 <__assert_fail@plt+0x9f8>
   12370:	ldrsb	fp, [r2, #1]!
   12374:	uxtb	r3, fp
   12378:	lsl	r3, r3, #1
   1237c:	ldrh	ip, [r1, r3]
   12380:	ands	ip, ip, #8192	; 0x2000
   12384:	bne	12370 <__assert_fail@plt+0x9f4>
   12388:	cmp	fp, #45	; 0x2d
   1238c:	beq	12530 <__assert_fail@plt+0xbb4>
   12390:	add	fp, sp, #40	; 0x28
   12394:	mov	r3, ip
   12398:	mov	r2, ip
   1239c:	str	ip, [r4]
   123a0:	mov	r1, fp
   123a4:	mov	r0, r8
   123a8:	str	ip, [sp, #40]	; 0x28
   123ac:	bl	115e0 <__strtoull_internal@plt>
   123b0:	ldr	sl, [sp, #40]	; 0x28
   123b4:	cmp	sl, r8
   123b8:	mov	r2, r0
   123bc:	mov	r3, r1
   123c0:	ldr	r0, [r4]
   123c4:	strd	r2, [sp, #16]
   123c8:	beq	126b0 <__assert_fail@plt+0xd34>
   123cc:	cmp	r0, #0
   123d0:	bne	12558 <__assert_fail@plt+0xbdc>
   123d4:	cmp	sl, #0
   123d8:	beq	126e4 <__assert_fail@plt+0xd68>
   123dc:	ldrsb	r0, [sl]
   123e0:	cmp	r0, #0
   123e4:	beq	126d8 <__assert_fail@plt+0xd5c>
   123e8:	mov	r8, #0
   123ec:	mov	r2, #0
   123f0:	mov	r3, #0
   123f4:	str	r9, [sp, #32]
   123f8:	mov	r6, fp
   123fc:	mov	r9, sl
   12400:	mov	r7, r8
   12404:	mov	sl, r2
   12408:	mov	fp, r3
   1240c:	str	r5, [sp, #28]
   12410:	ldrsb	r2, [r9, #1]
   12414:	cmp	r2, #105	; 0x69
   12418:	beq	1259c <__assert_fail@plt+0xc20>
   1241c:	bic	r1, r2, #32
   12420:	cmp	r1, #66	; 0x42
   12424:	bne	126bc <__assert_fail@plt+0xd40>
   12428:	ldrsb	r2, [r9, #2]
   1242c:	cmp	r2, #0
   12430:	beq	128a0 <__assert_fail@plt+0xf24>
   12434:	bl	118bc <localeconv@plt>
   12438:	cmp	r0, #0
   1243c:	beq	12530 <__assert_fail@plt+0xbb4>
   12440:	ldr	r2, [r0]
   12444:	cmp	r2, #0
   12448:	beq	12530 <__assert_fail@plt+0xbb4>
   1244c:	mov	r0, r2
   12450:	str	r2, [sp]
   12454:	bl	11760 <strlen@plt>
   12458:	orrs	r3, sl, fp
   1245c:	mov	r5, r0
   12460:	bne	12530 <__assert_fail@plt+0xbb4>
   12464:	ldrsb	r1, [r9]
   12468:	cmp	r1, #0
   1246c:	beq	12530 <__assert_fail@plt+0xbb4>
   12470:	ldr	r2, [sp]
   12474:	mov	r1, r9
   12478:	mov	r0, r2
   1247c:	mov	r2, r5
   12480:	bl	11934 <strncmp@plt>
   12484:	cmp	r0, #0
   12488:	bne	12530 <__assert_fail@plt+0xbb4>
   1248c:	ldrsb	r2, [r9, r5]
   12490:	add	r5, r9, r5
   12494:	cmp	r2, #48	; 0x30
   12498:	bne	124b8 <__assert_fail@plt+0xb3c>
   1249c:	add	r8, r8, #1
   124a0:	sub	r1, r8, r5
   124a4:	mov	r3, r5
   124a8:	add	r8, r3, r1
   124ac:	ldrsb	r2, [r3, #1]!
   124b0:	cmp	r2, #48	; 0x30
   124b4:	beq	124a8 <__assert_fail@plt+0xb2c>
   124b8:	mov	r3, #0
   124bc:	str	r7, [r4]
   124c0:	mov	r2, r3
   124c4:	mov	r1, r6
   124c8:	mov	r0, r5
   124cc:	str	r7, [sp, #40]	; 0x28
   124d0:	bl	115e0 <__strtoull_internal@plt>
   124d4:	ldr	r9, [sp, #40]	; 0x28
   124d8:	cmp	r9, r5
   124dc:	mov	sl, r0
   124e0:	mov	fp, r1
   124e4:	beq	126ac <__assert_fail@plt+0xd30>
   124e8:	ldr	ip, [r4]
   124ec:	cmp	ip, #0
   124f0:	beq	12588 <__assert_fail@plt+0xc0c>
   124f4:	subs	r3, r0, #1
   124f8:	str	r3, [sp, #8]
   124fc:	sbc	r3, r1, #0
   12500:	str	r3, [sp, #12]
   12504:	ldrd	r2, [sp, #8]
   12508:	mvn	r1, #0
   1250c:	mvn	r0, #2
   12510:	cmp	r3, r1
   12514:	cmpeq	r2, r0
   12518:	bhi	128dc <__assert_fail@plt+0xf60>
   1251c:	cmp	r9, #0
   12520:	beq	12530 <__assert_fail@plt+0xbb4>
   12524:	ldrsb	r2, [r9]
   12528:	cmp	r2, #0
   1252c:	bne	12410 <__assert_fail@plt+0xa94>
   12530:	mov	r3, #22
   12534:	mvn	r0, #21
   12538:	str	r3, [r4]
   1253c:	ldr	r3, [sp, #24]
   12540:	ldr	r2, [sp, #44]	; 0x2c
   12544:	ldr	r3, [r3]
   12548:	cmp	r2, r3
   1254c:	bne	12978 <__assert_fail@plt+0xffc>
   12550:	add	sp, sp, #52	; 0x34
   12554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12558:	subs	r6, r2, #1
   1255c:	sbc	r7, r3, #0
   12560:	mvn	r3, #0
   12564:	mvn	r2, #2
   12568:	cmp	r7, r3
   1256c:	cmpeq	r6, r2
   12570:	bls	123d4 <__assert_fail@plt+0xa58>
   12574:	rsb	r0, r0, #0
   12578:	cmp	r0, #0
   1257c:	bge	1253c <__assert_fail@plt+0xbc0>
   12580:	rsb	r3, r0, #0
   12584:	b	12538 <__assert_fail@plt+0xbbc>
   12588:	orrs	r3, sl, fp
   1258c:	bne	1251c <__assert_fail@plt+0xba0>
   12590:	ldrsb	r2, [r9, #1]
   12594:	cmp	r2, #105	; 0x69
   12598:	bne	1241c <__assert_fail@plt+0xaa0>
   1259c:	ldrsb	r2, [r9, #2]
   125a0:	bic	r2, r2, #32
   125a4:	cmp	r2, #66	; 0x42
   125a8:	bne	12434 <__assert_fail@plt+0xab8>
   125ac:	ldrsb	r2, [r9, #3]
   125b0:	cmp	r2, #0
   125b4:	bne	12434 <__assert_fail@plt+0xab8>
   125b8:	strd	sl, [sp]
   125bc:	mov	sl, r9
   125c0:	ldr	r9, [sp, #32]
   125c4:	mov	r3, #1024	; 0x400
   125c8:	ldr	r5, [sp, #28]
   125cc:	str	r3, [sp, #28]
   125d0:	ldrsb	r7, [sl]
   125d4:	ldr	r6, [pc, #936]	; 12984 <__assert_fail@plt+0x1008>
   125d8:	add	r6, pc, r6
   125dc:	mov	r1, r7
   125e0:	mov	r0, r6
   125e4:	bl	1176c <strchr@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	128bc <__assert_fail@plt+0xf40>
   125f0:	sub	ip, r0, r6
   125f4:	add	fp, ip, #1
   125f8:	cmp	fp, #0
   125fc:	beq	126c8 <__assert_fail@plt+0xd4c>
   12600:	ldr	r3, [sp, #20]
   12604:	ldr	r6, [sp, #28]
   12608:	cmp	r3, #0
   1260c:	mov	r0, #0
   12610:	asr	r7, r6, #31
   12614:	mov	r1, #0
   12618:	bne	12918 <__assert_fail@plt+0xf9c>
   1261c:	orrs	r3, r0, r1
   12620:	bne	1270c <__assert_fail@plt+0xd90>
   12624:	str	fp, [sp, #32]
   12628:	sub	ip, ip, #1
   1262c:	str	r8, [sp, #36]	; 0x24
   12630:	mov	fp, r4
   12634:	ldrd	r0, [sp, #16]
   12638:	mov	lr, r5
   1263c:	mov	sl, r9
   12640:	b	12650 <__assert_fail@plt+0xcd4>
   12644:	orrs	r3, r4, r5
   12648:	sub	ip, ip, #1
   1264c:	bne	126f4 <__assert_fail@plt+0xd78>
   12650:	mul	r2, r0, r7
   12654:	cmn	ip, #1
   12658:	mla	r2, r6, r1, r2
   1265c:	umull	r0, r1, r0, r6
   12660:	add	r2, r2, r1
   12664:	mov	r1, r2
   12668:	beq	12880 <__assert_fail@plt+0xf04>
   1266c:	cmp	r2, #0
   12670:	mov	r4, #0
   12674:	mov	r5, #0
   12678:	beq	12644 <__assert_fail@plt+0xcc8>
   1267c:	umull	r2, r3, r6, r2
   12680:	umull	r8, r9, r0, r6
   12684:	strd	r2, [sp, #8]
   12688:	mov	r8, r9
   1268c:	ldr	r3, [sp, #12]
   12690:	adds	r8, r2, r8
   12694:	mov	r2, #0
   12698:	adc	r3, r3, r2
   1269c:	cmp	r3, r2
   126a0:	movne	r4, #1
   126a4:	movne	r5, #0
   126a8:	b	12644 <__assert_fail@plt+0xcc8>
   126ac:	ldr	r0, [r4]
   126b0:	cmp	r0, #0
   126b4:	beq	12530 <__assert_fail@plt+0xbb4>
   126b8:	b	12574 <__assert_fail@plt+0xbf8>
   126bc:	cmp	r2, #0
   126c0:	bne	12434 <__assert_fail@plt+0xab8>
   126c4:	b	125b8 <__assert_fail@plt+0xc3c>
   126c8:	cmp	r9, #0
   126cc:	movne	r0, fp
   126d0:	bne	12718 <__assert_fail@plt+0xd9c>
   126d4:	mov	r0, r9
   126d8:	ldrd	r2, [sp, #16]
   126dc:	strd	r2, [r5]
   126e0:	b	1253c <__assert_fail@plt+0xbc0>
   126e4:	ldrd	r2, [sp, #16]
   126e8:	mov	r0, sl
   126ec:	strd	r2, [r5]
   126f0:	b	1253c <__assert_fail@plt+0xbc0>
   126f4:	mov	r4, fp
   126f8:	ldr	r8, [sp, #36]	; 0x24
   126fc:	ldr	fp, [sp, #32]
   12700:	mov	r5, lr
   12704:	mov	r9, sl
   12708:	strd	r0, [sp, #16]
   1270c:	mvn	r0, #33	; 0x21
   12710:	cmp	r9, #0
   12714:	beq	1271c <__assert_fail@plt+0xda0>
   12718:	str	fp, [r9]
   1271c:	ldrd	r2, [sp]
   12720:	mov	r1, r2
   12724:	orrs	r3, r1, r3
   12728:	movne	r3, #1
   1272c:	moveq	r3, #0
   12730:	cmp	fp, #0
   12734:	moveq	r3, #0
   12738:	cmp	r3, #0
   1273c:	beq	12874 <__assert_fail@plt+0xef8>
   12740:	ldr	r3, [pc, #576]	; 12988 <__assert_fail@plt+0x100c>
   12744:	ldr	r1, [pc, #576]	; 1298c <__assert_fail@plt+0x1010>
   12748:	umull	ip, r3, r3, r8
   1274c:	smull	ip, r1, r1, r8
   12750:	lsr	r3, r3, #1
   12754:	rsb	r1, r1, r8, asr #31
   12758:	add	r3, r3, r3, lsl #1
   1275c:	add	r1, r1, fp
   12760:	subs	r3, r8, r3
   12764:	sub	r6, r1, #1
   12768:	bne	128e4 <__assert_fail@plt+0xf68>
   1276c:	ldrd	r8, [sp]
   12770:	adds	r3, r8, r8
   12774:	adc	r2, r9, r9
   12778:	adds	r3, r3, r8
   1277c:	adc	r2, r2, r9
   12780:	lsl	ip, r3, #5
   12784:	lsl	lr, r2, #5
   12788:	orr	lr, lr, r3, lsr #27
   1278c:	adds	r3, r3, ip
   12790:	adc	r2, r2, lr
   12794:	adds	r3, r8, r3
   12798:	str	r3, [sp]
   1279c:	ldr	r3, [sp, #4]
   127a0:	adc	r3, r3, r2
   127a4:	str	r3, [sp, #4]
   127a8:	cmp	r6, #0
   127ac:	blt	12530 <__assert_fail@plt+0xbb4>
   127b0:	beq	12858 <__assert_fail@plt+0xedc>
   127b4:	ldr	r3, [sp, #4]
   127b8:	ldr	r8, [sp, #28]
   127bc:	cmp	r3, #0
   127c0:	mov	r6, #0
   127c4:	asr	r9, r8, #31
   127c8:	mov	r7, #0
   127cc:	bne	1294c <__assert_fail@plt+0xfd0>
   127d0:	orrs	r3, r6, r7
   127d4:	bne	12858 <__assert_fail@plt+0xedc>
   127d8:	sub	r1, r1, #3
   127dc:	ldrd	r2, [sp]
   127e0:	mov	lr, r4
   127e4:	str	r5, [sp, #8]
   127e8:	b	127f8 <__assert_fail@plt+0xe7c>
   127ec:	orrs	ip, r6, r7
   127f0:	sub	r1, r1, #1
   127f4:	bne	1284c <__assert_fail@plt+0xed0>
   127f8:	mul	ip, r2, r9
   127fc:	cmn	r1, #1
   12800:	mla	ip, r8, r3, ip
   12804:	umull	r2, r3, r2, r8
   12808:	add	ip, ip, r3
   1280c:	mov	r3, ip
   12810:	beq	1284c <__assert_fail@plt+0xed0>
   12814:	cmp	ip, #0
   12818:	mov	r6, #0
   1281c:	mov	r7, #0
   12820:	beq	127ec <__assert_fail@plt+0xe70>
   12824:	umull	sl, fp, r2, r8
   12828:	umull	r4, r5, r8, ip
   1282c:	mov	ip, fp
   12830:	adds	ip, r4, ip
   12834:	mov	ip, #0
   12838:	adc	ip, r5, ip
   1283c:	cmp	ip, #0
   12840:	movne	r6, #1
   12844:	movne	r7, #0
   12848:	b	127ec <__assert_fail@plt+0xe70>
   1284c:	ldr	r5, [sp, #8]
   12850:	mov	r4, lr
   12854:	strd	r2, [sp]
   12858:	ldrd	r2, [sp]
   1285c:	ldr	r1, [sp, #16]
   12860:	adds	r1, r1, r2
   12864:	str	r1, [sp, #16]
   12868:	ldr	r1, [sp, #20]
   1286c:	adc	r3, r1, r3
   12870:	str	r3, [sp, #20]
   12874:	ldrd	r2, [sp, #16]
   12878:	strd	r2, [r5]
   1287c:	b	12578 <__assert_fail@plt+0xbfc>
   12880:	mov	r4, fp
   12884:	strd	r0, [sp, #16]
   12888:	ldr	r8, [sp, #36]	; 0x24
   1288c:	ldr	fp, [sp, #32]
   12890:	mov	r5, lr
   12894:	mov	r9, sl
   12898:	mov	r0, #0
   1289c:	b	12710 <__assert_fail@plt+0xd94>
   128a0:	mov	r3, #1000	; 0x3e8
   128a4:	strd	sl, [sp]
   128a8:	ldr	r5, [sp, #28]
   128ac:	mov	sl, r9
   128b0:	str	r3, [sp, #28]
   128b4:	ldr	r9, [sp, #32]
   128b8:	b	125d0 <__assert_fail@plt+0xc54>
   128bc:	ldr	r6, [pc, #204]	; 12990 <__assert_fail@plt+0x1014>
   128c0:	mov	r1, r7
   128c4:	add	r6, pc, r6
   128c8:	mov	r0, r6
   128cc:	bl	1176c <strchr@plt>
   128d0:	cmp	r0, #0
   128d4:	bne	125f0 <__assert_fail@plt+0xc74>
   128d8:	b	12530 <__assert_fail@plt+0xbb4>
   128dc:	mov	r0, ip
   128e0:	b	12574 <__assert_fail@plt+0xbf8>
   128e4:	cmp	r3, #1
   128e8:	bne	127a8 <__assert_fail@plt+0xe2c>
   128ec:	ldrd	r8, [sp]
   128f0:	lsl	r2, r9, #2
   128f4:	lsl	r3, r8, #2
   128f8:	adds	r3, r3, r8
   128fc:	orr	r2, r2, r8, lsr #30
   12900:	adc	r2, r2, r9
   12904:	adds	r3, r3, r3
   12908:	str	r3, [sp]
   1290c:	adc	r3, r2, r2
   12910:	str	r3, [sp, #4]
   12914:	b	127a8 <__assert_fail@plt+0xe2c>
   12918:	ldr	lr, [sp, #28]
   1291c:	ldr	r3, [sp, #16]
   12920:	ldr	sl, [sp, #20]
   12924:	umull	r2, r3, r3, lr
   12928:	str	r3, [sp, #8]
   1292c:	mov	r3, #0
   12930:	str	r3, [sp, #12]
   12934:	ldrd	r2, [sp, #8]
   12938:	umlal	r2, r3, sl, lr
   1293c:	cmp	r3, #0
   12940:	movne	r0, #1
   12944:	movne	r1, #0
   12948:	b	1261c <__assert_fail@plt+0xca0>
   1294c:	ldr	r3, [sp]
   12950:	ldr	ip, [sp, #28]
   12954:	ldr	lr, [sp, #4]
   12958:	umull	sl, fp, r3, ip
   1295c:	mov	r3, #0
   12960:	mov	r2, fp
   12964:	umlal	r2, r3, lr, ip
   12968:	cmp	r3, #0
   1296c:	movne	r6, #1
   12970:	movne	r7, #0
   12974:	b	127d0 <__assert_fail@plt+0xe54>
   12978:	bl	11604 <__stack_chk_fail@plt>
   1297c:	andeq	r8, r1, r0, asr #22
   12980:	muleq	r0, ip, r1
   12984:	andeq	r7, r0, ip, ror #9
   12988:	bge	feabd43c <stdout@@GLIBC_2.4+0xfea92420>
   1298c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12990:	andeq	r7, r0, ip, lsl #4
   12994:	mov	r2, #0
   12998:	b	12304 <__assert_fail@plt+0x988>
   1299c:	push	{r4, r5, r6, lr}
   129a0:	subs	r5, r0, #0
   129a4:	mov	r6, r1
   129a8:	beq	12a14 <__assert_fail@plt+0x1098>
   129ac:	ldrsb	r4, [r5]
   129b0:	cmp	r4, #0
   129b4:	beq	12a28 <__assert_fail@plt+0x10ac>
   129b8:	bl	11724 <__ctype_b_loc@plt>
   129bc:	mov	r3, r5
   129c0:	ldr	r0, [r0]
   129c4:	b	129dc <__assert_fail@plt+0x1060>
   129c8:	adds	r3, r3, #1
   129cc:	beq	12a14 <__assert_fail@plt+0x1098>
   129d0:	ldrsb	r4, [r3]
   129d4:	cmp	r4, #0
   129d8:	beq	129f0 <__assert_fail@plt+0x1074>
   129dc:	uxtb	r4, r4
   129e0:	lsl	r4, r4, #1
   129e4:	ldrh	r2, [r0, r4]
   129e8:	tst	r2, #2048	; 0x800
   129ec:	bne	129c8 <__assert_fail@plt+0x104c>
   129f0:	cmp	r6, #0
   129f4:	strne	r3, [r6]
   129f8:	cmp	r5, r3
   129fc:	bcs	12a20 <__assert_fail@plt+0x10a4>
   12a00:	ldrsb	r3, [r3]
   12a04:	cmp	r3, #0
   12a08:	bne	12a20 <__assert_fail@plt+0x10a4>
   12a0c:	mov	r0, #1
   12a10:	pop	{r4, r5, r6, pc}
   12a14:	cmp	r6, #0
   12a18:	movne	r3, #0
   12a1c:	strne	r3, [r6]
   12a20:	mov	r0, #0
   12a24:	pop	{r4, r5, r6, pc}
   12a28:	cmp	r1, #0
   12a2c:	strne	r5, [r1]
   12a30:	b	12a20 <__assert_fail@plt+0x10a4>
   12a34:	push	{r4, r5, r6, lr}
   12a38:	subs	r5, r0, #0
   12a3c:	mov	r6, r1
   12a40:	beq	12aac <__assert_fail@plt+0x1130>
   12a44:	ldrsb	r4, [r5]
   12a48:	cmp	r4, #0
   12a4c:	beq	12ac0 <__assert_fail@plt+0x1144>
   12a50:	bl	11724 <__ctype_b_loc@plt>
   12a54:	mov	r3, r5
   12a58:	ldr	r0, [r0]
   12a5c:	b	12a74 <__assert_fail@plt+0x10f8>
   12a60:	adds	r3, r3, #1
   12a64:	beq	12aac <__assert_fail@plt+0x1130>
   12a68:	ldrsb	r4, [r3]
   12a6c:	cmp	r4, #0
   12a70:	beq	12a88 <__assert_fail@plt+0x110c>
   12a74:	uxtb	r4, r4
   12a78:	lsl	r4, r4, #1
   12a7c:	ldrh	r2, [r0, r4]
   12a80:	tst	r2, #4096	; 0x1000
   12a84:	bne	12a60 <__assert_fail@plt+0x10e4>
   12a88:	cmp	r6, #0
   12a8c:	strne	r3, [r6]
   12a90:	cmp	r5, r3
   12a94:	bcs	12ab8 <__assert_fail@plt+0x113c>
   12a98:	ldrsb	r3, [r3]
   12a9c:	cmp	r3, #0
   12aa0:	bne	12ab8 <__assert_fail@plt+0x113c>
   12aa4:	mov	r0, #1
   12aa8:	pop	{r4, r5, r6, pc}
   12aac:	cmp	r6, #0
   12ab0:	movne	r3, #0
   12ab4:	strne	r3, [r6]
   12ab8:	mov	r0, #0
   12abc:	pop	{r4, r5, r6, pc}
   12ac0:	cmp	r1, #0
   12ac4:	strne	r5, [r1]
   12ac8:	b	12ab8 <__assert_fail@plt+0x113c>
   12acc:	push	{r1, r2, r3}
   12ad0:	ldr	r3, [pc, #188]	; 12b94 <__assert_fail@plt+0x1218>
   12ad4:	ldr	r2, [pc, #188]	; 12b98 <__assert_fail@plt+0x121c>
   12ad8:	add	r3, pc, r3
   12adc:	push	{r4, r5, r6, r7, r8, lr}
   12ae0:	sub	sp, sp, #12
   12ae4:	ldr	r7, [r3, r2]
   12ae8:	ldr	r8, [sp, #36]	; 0x24
   12aec:	mov	r6, r0
   12af0:	ldr	r3, [r7]
   12af4:	add	r4, sp, #48	; 0x30
   12af8:	str	r3, [sp, #4]
   12afc:	b	12b18 <__assert_fail@plt+0x119c>
   12b00:	mov	r1, r5
   12b04:	mov	r0, r6
   12b08:	bl	11514 <strcmp@plt>
   12b0c:	add	r4, r4, #8
   12b10:	cmp	r0, #0
   12b14:	beq	12b50 <__assert_fail@plt+0x11d4>
   12b18:	ldr	r1, [r4, #-8]
   12b1c:	sub	r3, r4, #4
   12b20:	cmp	r1, #0
   12b24:	str	r3, [sp]
   12b28:	beq	12b70 <__assert_fail@plt+0x11f4>
   12b2c:	ldr	r5, [r4, #-4]
   12b30:	str	r4, [sp]
   12b34:	cmp	r5, #0
   12b38:	beq	12b70 <__assert_fail@plt+0x11f4>
   12b3c:	mov	r0, r6
   12b40:	bl	11514 <strcmp@plt>
   12b44:	cmp	r0, #0
   12b48:	bne	12b00 <__assert_fail@plt+0x1184>
   12b4c:	mov	r0, #1
   12b50:	ldr	r2, [sp, #4]
   12b54:	ldr	r3, [r7]
   12b58:	cmp	r2, r3
   12b5c:	bne	12b90 <__assert_fail@plt+0x1214>
   12b60:	add	sp, sp, #12
   12b64:	pop	{r4, r5, r6, r7, r8, lr}
   12b68:	add	sp, sp, #12
   12b6c:	bx	lr
   12b70:	ldr	r1, [pc, #36]	; 12b9c <__assert_fail@plt+0x1220>
   12b74:	mov	r3, r6
   12b78:	add	r1, pc, r1
   12b7c:	mov	r2, r8
   12b80:	ldr	r0, [r1]
   12b84:	ldr	r1, [pc, #20]	; 12ba0 <__assert_fail@plt+0x1224>
   12b88:	add	r1, pc, r1
   12b8c:	bl	11880 <errx@plt>
   12b90:	bl	11604 <__stack_chk_fail@plt>
   12b94:	andeq	r8, r1, r4, ror r3
   12b98:	muleq	r0, ip, r1
   12b9c:	andeq	r8, r1, r8, lsl #9
   12ba0:	andeq	r6, r0, r0, lsr pc
   12ba4:	cmp	r1, #0
   12ba8:	beq	12bf4 <__assert_fail@plt+0x1278>
   12bac:	ldrsb	r3, [r0]
   12bb0:	cmp	r3, #0
   12bb4:	beq	12bf4 <__assert_fail@plt+0x1278>
   12bb8:	sxtb	r2, r2
   12bbc:	cmp	r3, r2
   12bc0:	bxeq	lr
   12bc4:	add	r1, r0, r1
   12bc8:	add	r3, r0, #1
   12bcc:	b	12be8 <__assert_fail@plt+0x126c>
   12bd0:	ldrsb	ip, [r3]
   12bd4:	add	r3, r3, #1
   12bd8:	cmp	ip, #0
   12bdc:	beq	12bf4 <__assert_fail@plt+0x1278>
   12be0:	cmp	ip, r2
   12be4:	bxeq	lr
   12be8:	cmp	r3, r1
   12bec:	mov	r0, r3
   12bf0:	bne	12bd0 <__assert_fail@plt+0x1254>
   12bf4:	mov	r0, #0
   12bf8:	bx	lr
   12bfc:	push	{r4, r5, r6, lr}
   12c00:	mov	r2, #10
   12c04:	mov	r4, r0
   12c08:	mov	r5, r1
   12c0c:	bl	122c0 <__assert_fail@plt+0x944>
   12c10:	cmp	r0, #65536	; 0x10000
   12c14:	bcs	12c20 <__assert_fail@plt+0x12a4>
   12c18:	uxth	r0, r0
   12c1c:	pop	{r4, r5, r6, pc}
   12c20:	mov	r1, r5
   12c24:	mov	r0, r4
   12c28:	bl	12280 <__assert_fail@plt+0x904>
   12c2c:	push	{r4, r5, r6, lr}
   12c30:	mov	r2, #16
   12c34:	mov	r4, r0
   12c38:	mov	r5, r1
   12c3c:	bl	122c0 <__assert_fail@plt+0x944>
   12c40:	cmp	r0, #65536	; 0x10000
   12c44:	bcs	12c50 <__assert_fail@plt+0x12d4>
   12c48:	uxth	r0, r0
   12c4c:	pop	{r4, r5, r6, pc}
   12c50:	mov	r1, r5
   12c54:	mov	r0, r4
   12c58:	bl	12280 <__assert_fail@plt+0x904>
   12c5c:	mov	r2, #10
   12c60:	b	122c0 <__assert_fail@plt+0x944>
   12c64:	mov	r2, #16
   12c68:	b	122c0 <__assert_fail@plt+0x944>
   12c6c:	ldr	r2, [pc, #236]	; 12d60 <__assert_fail@plt+0x13e4>
   12c70:	ldr	ip, [pc, #236]	; 12d64 <__assert_fail@plt+0x13e8>
   12c74:	add	r2, pc, r2
   12c78:	push	{r4, r5, r6, r7, r8, lr}
   12c7c:	sub	sp, sp, #8
   12c80:	ldr	r7, [r2, ip]
   12c84:	mov	r5, #0
   12c88:	mov	r4, r0
   12c8c:	ldr	r3, [r7]
   12c90:	mov	r8, r1
   12c94:	str	r5, [sp]
   12c98:	str	r3, [sp, #4]
   12c9c:	bl	11790 <__errno_location@plt>
   12ca0:	cmp	r4, r5
   12ca4:	str	r5, [r0]
   12ca8:	beq	12cb8 <__assert_fail@plt+0x133c>
   12cac:	ldrsb	r3, [r4]
   12cb0:	cmp	r3, r5
   12cb4:	bne	12cd8 <__assert_fail@plt+0x135c>
   12cb8:	ldr	r1, [pc, #168]	; 12d68 <__assert_fail@plt+0x13ec>
   12cbc:	mov	r3, r4
   12cc0:	add	r1, pc, r1
   12cc4:	mov	r2, r8
   12cc8:	ldr	r0, [r1]
   12ccc:	ldr	r1, [pc, #152]	; 12d6c <__assert_fail@plt+0x13f0>
   12cd0:	add	r1, pc, r1
   12cd4:	bl	11880 <errx@plt>
   12cd8:	mov	r6, r0
   12cdc:	mov	r2, #10
   12ce0:	mov	r3, r5
   12ce4:	mov	r1, sp
   12ce8:	mov	r0, r4
   12cec:	bl	118ec <__strtoll_internal@plt>
   12cf0:	ldr	r2, [r6]
   12cf4:	cmp	r2, r5
   12cf8:	bne	12d34 <__assert_fail@plt+0x13b8>
   12cfc:	ldr	r3, [sp]
   12d00:	cmp	r3, r4
   12d04:	beq	12cb8 <__assert_fail@plt+0x133c>
   12d08:	cmp	r3, r5
   12d0c:	beq	12d1c <__assert_fail@plt+0x13a0>
   12d10:	ldrsb	r3, [r3]
   12d14:	cmp	r3, r5
   12d18:	bne	12cb8 <__assert_fail@plt+0x133c>
   12d1c:	ldr	r2, [sp, #4]
   12d20:	ldr	r3, [r7]
   12d24:	cmp	r2, r3
   12d28:	bne	12d5c <__assert_fail@plt+0x13e0>
   12d2c:	add	sp, sp, #8
   12d30:	pop	{r4, r5, r6, r7, r8, pc}
   12d34:	ldr	r3, [pc, #52]	; 12d70 <__assert_fail@plt+0x13f4>
   12d38:	cmp	r2, #34	; 0x22
   12d3c:	add	r3, pc, r3
   12d40:	ldr	r0, [r3]
   12d44:	bne	12cb8 <__assert_fail@plt+0x133c>
   12d48:	ldr	r1, [pc, #36]	; 12d74 <__assert_fail@plt+0x13f8>
   12d4c:	mov	r3, r4
   12d50:	mov	r2, r8
   12d54:	add	r1, pc, r1
   12d58:	bl	11628 <err@plt>
   12d5c:	bl	11604 <__stack_chk_fail@plt>
   12d60:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12d64:	muleq	r0, ip, r1
   12d68:	andeq	r8, r1, r0, asr #6
   12d6c:	andeq	r6, r0, r8, ror #27
   12d70:	andeq	r8, r1, r4, asr #5
   12d74:	andeq	r6, r0, r4, ror #26
   12d78:	push	{r4, r5, r6, r7, r8, lr}
   12d7c:	mov	r7, r0
   12d80:	mov	r6, r1
   12d84:	bl	12c6c <__assert_fail@plt+0x12f0>
   12d88:	mov	r3, #0
   12d8c:	mvn	r2, #0
   12d90:	adds	r4, r0, #-2147483648	; 0x80000000
   12d94:	adc	r5, r1, #0
   12d98:	cmp	r5, r3
   12d9c:	cmpeq	r4, r2
   12da0:	popls	{r4, r5, r6, r7, r8, pc}
   12da4:	bl	11790 <__errno_location@plt>
   12da8:	ldr	ip, [pc, #32]	; 12dd0 <__assert_fail@plt+0x1454>
   12dac:	ldr	r1, [pc, #32]	; 12dd4 <__assert_fail@plt+0x1458>
   12db0:	add	ip, pc, ip
   12db4:	mov	lr, #34	; 0x22
   12db8:	mov	r3, r7
   12dbc:	mov	r2, r6
   12dc0:	add	r1, pc, r1
   12dc4:	str	lr, [r0]
   12dc8:	ldr	r0, [ip]
   12dcc:	bl	11628 <err@plt>
   12dd0:	andeq	r8, r1, r0, asr r2
   12dd4:	strdeq	r6, [r0], -r8
   12dd8:	push	{r4, r5, r6, lr}
   12ddc:	mov	r5, r0
   12de0:	mov	r4, r1
   12de4:	bl	12d78 <__assert_fail@plt+0x13fc>
   12de8:	add	r3, r0, #32768	; 0x8000
   12dec:	cmp	r3, #65536	; 0x10000
   12df0:	bcs	12dfc <__assert_fail@plt+0x1480>
   12df4:	sxth	r0, r0
   12df8:	pop	{r4, r5, r6, pc}
   12dfc:	bl	11790 <__errno_location@plt>
   12e00:	ldr	ip, [pc, #32]	; 12e28 <__assert_fail@plt+0x14ac>
   12e04:	ldr	r1, [pc, #32]	; 12e2c <__assert_fail@plt+0x14b0>
   12e08:	add	ip, pc, ip
   12e0c:	mov	lr, #34	; 0x22
   12e10:	mov	r3, r5
   12e14:	mov	r2, r4
   12e18:	add	r1, pc, r1
   12e1c:	str	lr, [r0]
   12e20:	ldr	r0, [ip]
   12e24:	bl	11628 <err@plt>
   12e28:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12e2c:	andeq	r6, r0, r0, lsr #25
   12e30:	mov	r2, #10
   12e34:	b	1216c <__assert_fail@plt+0x7f0>
   12e38:	mov	r2, #16
   12e3c:	b	1216c <__assert_fail@plt+0x7f0>
   12e40:	ldr	r2, [pc, #228]	; 12f2c <__assert_fail@plt+0x15b0>
   12e44:	ldr	r3, [pc, #228]	; 12f30 <__assert_fail@plt+0x15b4>
   12e48:	add	r2, pc, r2
   12e4c:	push	{r4, r5, r6, r7, r8, lr}
   12e50:	sub	sp, sp, #8
   12e54:	ldr	r7, [r2, r3]
   12e58:	mov	r5, #0
   12e5c:	mov	r4, r0
   12e60:	ldr	r3, [r7]
   12e64:	mov	r8, r1
   12e68:	str	r5, [sp]
   12e6c:	str	r3, [sp, #4]
   12e70:	bl	11790 <__errno_location@plt>
   12e74:	cmp	r4, r5
   12e78:	str	r5, [r0]
   12e7c:	beq	12e8c <__assert_fail@plt+0x1510>
   12e80:	ldrsb	r3, [r4]
   12e84:	cmp	r3, r5
   12e88:	bne	12eac <__assert_fail@plt+0x1530>
   12e8c:	ldr	r1, [pc, #160]	; 12f34 <__assert_fail@plt+0x15b8>
   12e90:	mov	r3, r4
   12e94:	add	r1, pc, r1
   12e98:	mov	r2, r8
   12e9c:	ldr	r0, [r1]
   12ea0:	ldr	r1, [pc, #144]	; 12f38 <__assert_fail@plt+0x15bc>
   12ea4:	add	r1, pc, r1
   12ea8:	bl	11880 <errx@plt>
   12eac:	mov	r6, r0
   12eb0:	mov	r1, sp
   12eb4:	mov	r0, r4
   12eb8:	bl	1182c <strtod@plt>
   12ebc:	ldr	r2, [r6]
   12ec0:	cmp	r2, r5
   12ec4:	bne	12f00 <__assert_fail@plt+0x1584>
   12ec8:	ldr	r3, [sp]
   12ecc:	cmp	r3, r4
   12ed0:	beq	12e8c <__assert_fail@plt+0x1510>
   12ed4:	cmp	r3, r5
   12ed8:	beq	12ee8 <__assert_fail@plt+0x156c>
   12edc:	ldrsb	r3, [r3]
   12ee0:	cmp	r3, r5
   12ee4:	bne	12e8c <__assert_fail@plt+0x1510>
   12ee8:	ldr	r2, [sp, #4]
   12eec:	ldr	r3, [r7]
   12ef0:	cmp	r2, r3
   12ef4:	bne	12f28 <__assert_fail@plt+0x15ac>
   12ef8:	add	sp, sp, #8
   12efc:	pop	{r4, r5, r6, r7, r8, pc}
   12f00:	ldr	r3, [pc, #52]	; 12f3c <__assert_fail@plt+0x15c0>
   12f04:	cmp	r2, #34	; 0x22
   12f08:	add	r3, pc, r3
   12f0c:	ldr	r0, [r3]
   12f10:	bne	12e8c <__assert_fail@plt+0x1510>
   12f14:	ldr	r1, [pc, #36]	; 12f40 <__assert_fail@plt+0x15c4>
   12f18:	mov	r3, r4
   12f1c:	mov	r2, r8
   12f20:	add	r1, pc, r1
   12f24:	bl	11628 <err@plt>
   12f28:	bl	11604 <__stack_chk_fail@plt>
   12f2c:	andeq	r8, r1, r4
   12f30:	muleq	r0, ip, r1
   12f34:	andeq	r8, r1, ip, ror #2
   12f38:	andeq	r6, r0, r4, lsl ip
   12f3c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12f40:	muleq	r0, r8, fp
   12f44:	ldr	r2, [pc, #232]	; 13034 <__assert_fail@plt+0x16b8>
   12f48:	ldr	r3, [pc, #232]	; 13038 <__assert_fail@plt+0x16bc>
   12f4c:	add	r2, pc, r2
   12f50:	push	{r4, r5, r6, r7, r8, lr}
   12f54:	sub	sp, sp, #8
   12f58:	ldr	r7, [r2, r3]
   12f5c:	mov	r5, #0
   12f60:	mov	r4, r0
   12f64:	ldr	r3, [r7]
   12f68:	mov	r8, r1
   12f6c:	str	r5, [sp]
   12f70:	str	r3, [sp, #4]
   12f74:	bl	11790 <__errno_location@plt>
   12f78:	cmp	r4, r5
   12f7c:	str	r5, [r0]
   12f80:	beq	12f90 <__assert_fail@plt+0x1614>
   12f84:	ldrsb	r3, [r4]
   12f88:	cmp	r3, r5
   12f8c:	bne	12fb0 <__assert_fail@plt+0x1634>
   12f90:	ldr	r1, [pc, #164]	; 1303c <__assert_fail@plt+0x16c0>
   12f94:	mov	r3, r4
   12f98:	add	r1, pc, r1
   12f9c:	mov	r2, r8
   12fa0:	ldr	r0, [r1]
   12fa4:	ldr	r1, [pc, #148]	; 13040 <__assert_fail@plt+0x16c4>
   12fa8:	add	r1, pc, r1
   12fac:	bl	11880 <errx@plt>
   12fb0:	mov	r6, r0
   12fb4:	mov	r2, #10
   12fb8:	mov	r1, sp
   12fbc:	mov	r0, r4
   12fc0:	bl	1152c <strtol@plt>
   12fc4:	ldr	r2, [r6]
   12fc8:	cmp	r2, r5
   12fcc:	bne	13008 <__assert_fail@plt+0x168c>
   12fd0:	ldr	r3, [sp]
   12fd4:	cmp	r3, r4
   12fd8:	beq	12f90 <__assert_fail@plt+0x1614>
   12fdc:	cmp	r3, r5
   12fe0:	beq	12ff0 <__assert_fail@plt+0x1674>
   12fe4:	ldrsb	r3, [r3]
   12fe8:	cmp	r3, r5
   12fec:	bne	12f90 <__assert_fail@plt+0x1614>
   12ff0:	ldr	r2, [sp, #4]
   12ff4:	ldr	r3, [r7]
   12ff8:	cmp	r2, r3
   12ffc:	bne	13030 <__assert_fail@plt+0x16b4>
   13000:	add	sp, sp, #8
   13004:	pop	{r4, r5, r6, r7, r8, pc}
   13008:	ldr	r3, [pc, #52]	; 13044 <__assert_fail@plt+0x16c8>
   1300c:	cmp	r2, #34	; 0x22
   13010:	add	r3, pc, r3
   13014:	ldr	r0, [r3]
   13018:	bne	12f90 <__assert_fail@plt+0x1614>
   1301c:	ldr	r1, [pc, #36]	; 13048 <__assert_fail@plt+0x16cc>
   13020:	mov	r3, r4
   13024:	mov	r2, r8
   13028:	add	r1, pc, r1
   1302c:	bl	11628 <err@plt>
   13030:	bl	11604 <__stack_chk_fail@plt>
   13034:	andeq	r7, r1, r0, lsl #30
   13038:	muleq	r0, ip, r1
   1303c:	andeq	r8, r1, r8, rrx
   13040:	andeq	r6, r0, r0, lsl fp
   13044:	strdeq	r7, [r1], -r0
   13048:	muleq	r0, r0, sl
   1304c:	ldr	r2, [pc, #232]	; 1313c <__assert_fail@plt+0x17c0>
   13050:	ldr	r3, [pc, #232]	; 13140 <__assert_fail@plt+0x17c4>
   13054:	add	r2, pc, r2
   13058:	push	{r4, r5, r6, r7, r8, lr}
   1305c:	sub	sp, sp, #8
   13060:	ldr	r7, [r2, r3]
   13064:	mov	r5, #0
   13068:	mov	r4, r0
   1306c:	ldr	r3, [r7]
   13070:	mov	r8, r1
   13074:	str	r5, [sp]
   13078:	str	r3, [sp, #4]
   1307c:	bl	11790 <__errno_location@plt>
   13080:	cmp	r4, r5
   13084:	str	r5, [r0]
   13088:	beq	13098 <__assert_fail@plt+0x171c>
   1308c:	ldrsb	r3, [r4]
   13090:	cmp	r3, r5
   13094:	bne	130b8 <__assert_fail@plt+0x173c>
   13098:	ldr	r1, [pc, #164]	; 13144 <__assert_fail@plt+0x17c8>
   1309c:	mov	r3, r4
   130a0:	add	r1, pc, r1
   130a4:	mov	r2, r8
   130a8:	ldr	r0, [r1]
   130ac:	ldr	r1, [pc, #148]	; 13148 <__assert_fail@plt+0x17cc>
   130b0:	add	r1, pc, r1
   130b4:	bl	11880 <errx@plt>
   130b8:	mov	r6, r0
   130bc:	mov	r2, #10
   130c0:	mov	r1, sp
   130c4:	mov	r0, r4
   130c8:	bl	11754 <strtoul@plt>
   130cc:	ldr	r2, [r6]
   130d0:	cmp	r2, r5
   130d4:	bne	13110 <__assert_fail@plt+0x1794>
   130d8:	ldr	r3, [sp]
   130dc:	cmp	r3, r4
   130e0:	beq	13098 <__assert_fail@plt+0x171c>
   130e4:	cmp	r3, r5
   130e8:	beq	130f8 <__assert_fail@plt+0x177c>
   130ec:	ldrsb	r3, [r3]
   130f0:	cmp	r3, r5
   130f4:	bne	13098 <__assert_fail@plt+0x171c>
   130f8:	ldr	r2, [sp, #4]
   130fc:	ldr	r3, [r7]
   13100:	cmp	r2, r3
   13104:	bne	13138 <__assert_fail@plt+0x17bc>
   13108:	add	sp, sp, #8
   1310c:	pop	{r4, r5, r6, r7, r8, pc}
   13110:	ldr	r3, [pc, #52]	; 1314c <__assert_fail@plt+0x17d0>
   13114:	cmp	r2, #34	; 0x22
   13118:	add	r3, pc, r3
   1311c:	ldr	r0, [r3]
   13120:	bne	13098 <__assert_fail@plt+0x171c>
   13124:	ldr	r1, [pc, #36]	; 13150 <__assert_fail@plt+0x17d4>
   13128:	mov	r3, r4
   1312c:	mov	r2, r8
   13130:	add	r1, pc, r1
   13134:	bl	11628 <err@plt>
   13138:	bl	11604 <__stack_chk_fail@plt>
   1313c:	strdeq	r7, [r1], -r8
   13140:	muleq	r0, ip, r1
   13144:	andeq	r7, r1, r0, ror #30
   13148:	andeq	r6, r0, r8, lsl #20
   1314c:	andeq	r7, r1, r8, ror #29
   13150:	andeq	r6, r0, r8, lsl #19
   13154:	ldr	r3, [pc, #140]	; 131e8 <__assert_fail@plt+0x186c>
   13158:	ldr	r2, [pc, #140]	; 131ec <__assert_fail@plt+0x1870>
   1315c:	add	r3, pc, r3
   13160:	push	{r4, r5, r6, lr}
   13164:	sub	sp, sp, #16
   13168:	ldr	r4, [r3, r2]
   1316c:	mov	r5, r1
   13170:	mov	r1, sp
   13174:	ldr	r3, [r4]
   13178:	mov	r6, r0
   1317c:	str	r3, [sp, #12]
   13180:	bl	12994 <__assert_fail@plt+0x1018>
   13184:	cmp	r0, #0
   13188:	beq	131c8 <__assert_fail@plt+0x184c>
   1318c:	bl	11790 <__errno_location@plt>
   13190:	ldr	r3, [pc, #88]	; 131f0 <__assert_fail@plt+0x1874>
   13194:	mov	r2, r5
   13198:	ldr	r1, [pc, r3]
   1319c:	ldr	r3, [r0]
   131a0:	mov	r0, r1
   131a4:	cmp	r3, #0
   131a8:	mov	r3, r6
   131ac:	beq	131bc <__assert_fail@plt+0x1840>
   131b0:	ldr	r1, [pc, #60]	; 131f4 <__assert_fail@plt+0x1878>
   131b4:	add	r1, pc, r1
   131b8:	bl	11628 <err@plt>
   131bc:	ldr	r1, [pc, #52]	; 131f8 <__assert_fail@plt+0x187c>
   131c0:	add	r1, pc, r1
   131c4:	bl	11880 <errx@plt>
   131c8:	ldr	r2, [sp, #12]
   131cc:	ldr	r3, [r4]
   131d0:	ldrd	r0, [sp]
   131d4:	cmp	r2, r3
   131d8:	bne	131e4 <__assert_fail@plt+0x1868>
   131dc:	add	sp, sp, #16
   131e0:	pop	{r4, r5, r6, pc}
   131e4:	bl	11604 <__stack_chk_fail@plt>
   131e8:	strdeq	r7, [r1], -r0
   131ec:	muleq	r0, ip, r1
   131f0:	andeq	r7, r1, r8, ror #28
   131f4:	andeq	r6, r0, r4, lsl #18
   131f8:	strdeq	r6, [r0], -r8
   131fc:	push	{r4, lr}
   13200:	mov	r4, r1
   13204:	mov	r1, r2
   13208:	bl	12e40 <__assert_fail@plt+0x14c4>
   1320c:	vldr	d6, [pc, #28]	; 13230 <__assert_fail@plt+0x18b4>
   13210:	vcvt.s32.f64	s15, d0
   13214:	vcvt.f64.s32	d5, s15
   13218:	vstr	s15, [r4]
   1321c:	vsub.f64	d0, d0, d5
   13220:	vmul.f64	d0, d0, d6
   13224:	vcvt.s32.f64	s0, d0
   13228:	vstr	s0, [r4, #4]
   1322c:	pop	{r4, pc}
   13230:	andeq	r0, r0, r0
   13234:	smlawbmi	lr, r0, r4, r8
   13238:	and	r2, r0, #61440	; 0xf000
   1323c:	cmp	r2, #16384	; 0x4000
   13240:	moveq	r2, r1
   13244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13248:	moveq	sl, #100	; 0x64
   1324c:	mov	r3, r0
   13250:	add	r9, r1, #1
   13254:	add	r8, r1, #2
   13258:	add	r7, r1, #3
   1325c:	add	r6, r1, #4
   13260:	add	r5, r1, #5
   13264:	add	r4, r1, #6
   13268:	add	lr, r1, #7
   1326c:	add	ip, r1, #8
   13270:	add	r0, r1, #9
   13274:	strbeq	sl, [r2], #10
   13278:	beq	1331c <__assert_fail@plt+0x19a0>
   1327c:	cmp	r2, #40960	; 0xa000
   13280:	moveq	r2, r1
   13284:	moveq	sl, #108	; 0x6c
   13288:	strbeq	sl, [r2], #10
   1328c:	beq	1331c <__assert_fail@plt+0x19a0>
   13290:	cmp	r2, #8192	; 0x2000
   13294:	moveq	r2, r1
   13298:	moveq	sl, #99	; 0x63
   1329c:	strbeq	sl, [r2], #10
   132a0:	beq	1331c <__assert_fail@plt+0x19a0>
   132a4:	cmp	r2, #24576	; 0x6000
   132a8:	moveq	r2, r1
   132ac:	moveq	sl, #98	; 0x62
   132b0:	strbeq	sl, [r2], #10
   132b4:	beq	1331c <__assert_fail@plt+0x19a0>
   132b8:	cmp	r2, #49152	; 0xc000
   132bc:	moveq	r2, r1
   132c0:	moveq	sl, #115	; 0x73
   132c4:	strbeq	sl, [r2], #10
   132c8:	beq	1331c <__assert_fail@plt+0x19a0>
   132cc:	cmp	r2, #4096	; 0x1000
   132d0:	moveq	r2, r1
   132d4:	moveq	sl, #112	; 0x70
   132d8:	strbeq	sl, [r2], #10
   132dc:	beq	1331c <__assert_fail@plt+0x19a0>
   132e0:	cmp	r2, #32768	; 0x8000
   132e4:	moveq	r2, r1
   132e8:	moveq	sl, #45	; 0x2d
   132ec:	strbeq	sl, [r2], #10
   132f0:	beq	1331c <__assert_fail@plt+0x19a0>
   132f4:	mov	r2, r0
   132f8:	mov	r0, ip
   132fc:	mov	ip, lr
   13300:	mov	lr, r4
   13304:	mov	r4, r5
   13308:	mov	r5, r6
   1330c:	mov	r6, r7
   13310:	mov	r7, r8
   13314:	mov	r8, r9
   13318:	mov	r9, r1
   1331c:	tst	r3, #256	; 0x100
   13320:	movne	fp, #114	; 0x72
   13324:	moveq	fp, #45	; 0x2d
   13328:	tst	r3, #128	; 0x80
   1332c:	movne	sl, #119	; 0x77
   13330:	moveq	sl, #45	; 0x2d
   13334:	tst	r3, #2048	; 0x800
   13338:	strb	fp, [r9]
   1333c:	and	r9, r3, #64	; 0x40
   13340:	strb	sl, [r8]
   13344:	beq	133e0 <__assert_fail@plt+0x1a64>
   13348:	cmp	r9, #0
   1334c:	movne	r9, #115	; 0x73
   13350:	moveq	r9, #83	; 0x53
   13354:	tst	r3, #32
   13358:	movne	r8, #114	; 0x72
   1335c:	moveq	r8, #45	; 0x2d
   13360:	tst	r3, #16
   13364:	strb	r9, [r7]
   13368:	movne	r7, #119	; 0x77
   1336c:	moveq	r7, #45	; 0x2d
   13370:	tst	r3, #1024	; 0x400
   13374:	strb	r8, [r6]
   13378:	and	r6, r3, #8
   1337c:	strb	r7, [r5]
   13380:	beq	133f0 <__assert_fail@plt+0x1a74>
   13384:	cmp	r6, #0
   13388:	movne	r6, #115	; 0x73
   1338c:	moveq	r6, #83	; 0x53
   13390:	tst	r3, #4
   13394:	movne	r5, #114	; 0x72
   13398:	moveq	r5, #45	; 0x2d
   1339c:	tst	r3, #2
   133a0:	strb	r6, [r4]
   133a4:	movne	r4, #119	; 0x77
   133a8:	moveq	r4, #45	; 0x2d
   133ac:	tst	r3, #512	; 0x200
   133b0:	strb	r5, [lr]
   133b4:	and	r3, r3, #1
   133b8:	strb	r4, [ip]
   133bc:	beq	13400 <__assert_fail@plt+0x1a84>
   133c0:	cmp	r3, #0
   133c4:	movne	ip, #116	; 0x74
   133c8:	moveq	ip, #84	; 0x54
   133cc:	mov	r3, #0
   133d0:	strb	ip, [r0]
   133d4:	mov	r0, r1
   133d8:	strb	r3, [r2]
   133dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e0:	cmp	r9, #0
   133e4:	movne	r9, #120	; 0x78
   133e8:	moveq	r9, #45	; 0x2d
   133ec:	b	13354 <__assert_fail@plt+0x19d8>
   133f0:	cmp	r6, #0
   133f4:	movne	r6, #120	; 0x78
   133f8:	moveq	r6, #45	; 0x2d
   133fc:	b	13390 <__assert_fail@plt+0x1a14>
   13400:	cmp	r3, #0
   13404:	movne	ip, #120	; 0x78
   13408:	moveq	ip, #45	; 0x2d
   1340c:	b	133cc <__assert_fail@plt+0x1a50>
   13410:	ldr	r1, [pc, #680]	; 136c0 <__assert_fail@plt+0x1d44>
   13414:	ldr	ip, [pc, #680]	; 136c4 <__assert_fail@plt+0x1d48>
   13418:	add	r1, pc, r1
   1341c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13420:	sub	sp, sp, #108	; 0x6c
   13424:	ldr	r8, [r1, ip]
   13428:	tst	r0, #2
   1342c:	strd	r2, [sp, #32]
   13430:	ldr	r1, [r8]
   13434:	addeq	r9, sp, #60	; 0x3c
   13438:	str	r1, [sp, #100]	; 0x64
   1343c:	ldrd	r2, [sp, #32]
   13440:	movne	r1, #32
   13444:	strbne	r1, [sp, #60]	; 0x3c
   13448:	addne	ip, sp, #61	; 0x3d
   1344c:	addne	r9, sp, #60	; 0x3c
   13450:	moveq	ip, r9
   13454:	mov	r1, #10
   13458:	mov	sl, #1
   1345c:	sub	lr, r1, #32
   13460:	lsl	r4, sl, r1
   13464:	lsl	r5, sl, lr
   13468:	rsb	lr, r1, #32
   1346c:	orr	r5, r5, sl, lsr lr
   13470:	cmp	r3, r5
   13474:	cmpeq	r2, r4
   13478:	bcc	13634 <__assert_fail@plt+0x1cb8>
   1347c:	add	r1, r1, #10
   13480:	cmp	r1, #70	; 0x46
   13484:	bne	1345c <__assert_fail@plt+0x1ae0>
   13488:	mov	lr, ip
   1348c:	strd	r2, [sp, #32]
   13490:	mov	r4, r2
   13494:	tst	r0, #1
   13498:	mov	r2, #69	; 0x45
   1349c:	bic	r5, r3, #-268435456	; 0xf0000000
   134a0:	lsr	sl, r3, #28
   134a4:	strb	r2, [lr], #1
   134a8:	bne	1361c <__assert_fail@plt+0x1ca0>
   134ac:	orrs	r3, r4, r5
   134b0:	mov	r3, #0
   134b4:	strb	r3, [lr]
   134b8:	beq	1365c <__assert_fail@plt+0x1ce0>
   134bc:	sub	r2, r1, #20
   134c0:	rsb	r0, r2, #32
   134c4:	lsr	r3, r4, r2
   134c8:	sub	r1, r1, #52	; 0x34
   134cc:	orr	r3, r3, r5, lsl r0
   134d0:	orr	r3, r3, r5, lsr r1
   134d4:	lsr	r2, r5, r2
   134d8:	adds	r6, r3, #50	; 0x32
   134dc:	adc	r7, r2, #0
   134e0:	mov	r3, #0
   134e4:	mov	r2, #100	; 0x64
   134e8:	mov	r0, r6
   134ec:	mov	r1, r7
   134f0:	bl	1964c <__assert_fail@plt+0x7cd0>
   134f4:	cmp	r1, #0
   134f8:	cmpeq	r0, #10
   134fc:	mov	r2, r0
   13500:	mov	r3, r1
   13504:	addeq	sl, sl, #1
   13508:	beq	1365c <__assert_fail@plt+0x1ce0>
   1350c:	cmp	r7, #0
   13510:	cmpeq	r6, #99	; 0x63
   13514:	strd	r2, [sp, #32]
   13518:	bls	1365c <__assert_fail@plt+0x1ce0>
   1351c:	bl	118bc <localeconv@plt>
   13520:	ldrd	r2, [sp, #32]
   13524:	cmp	r0, #0
   13528:	beq	136a4 <__assert_fail@plt+0x1d28>
   1352c:	ldr	r0, [r0]
   13530:	cmp	r0, #0
   13534:	beq	136b0 <__assert_fail@plt+0x1d34>
   13538:	ldrsb	r1, [r0]
   1353c:	cmp	r1, #0
   13540:	ldreq	r0, [pc, #384]	; 136c8 <__assert_fail@plt+0x1d4c>
   13544:	addeq	r0, pc, r0
   13548:	ldr	r1, [pc, #380]	; 136cc <__assert_fail@plt+0x1d50>
   1354c:	strd	r2, [sp, #16]
   13550:	add	r1, pc, r1
   13554:	add	r4, sp, #68	; 0x44
   13558:	mov	r3, #32
   1355c:	str	r0, [sp, #8]
   13560:	str	r1, [sp]
   13564:	str	r9, [sp, #24]
   13568:	str	sl, [sp, #4]
   1356c:	mov	r0, r4
   13570:	mov	r1, r3
   13574:	mov	r2, #1
   13578:	bl	11964 <__snprintf_chk@plt>
   1357c:	b	13684 <__assert_fail@plt+0x1d08>
   13580:	ldr	r4, [pc, #328]	; 136d0 <__assert_fail@plt+0x1d54>
   13584:	mvn	sl, #0
   13588:	ldr	fp, [pc, #324]	; 136d4 <__assert_fail@plt+0x1d58>
   1358c:	umull	r2, r3, lr, r4
   13590:	sub	r4, r1, #42	; 0x2a
   13594:	strd	r2, [sp, #40]	; 0x28
   13598:	ldr	r3, [sp, #44]	; 0x2c
   1359c:	lsl	r2, sl, lr
   135a0:	lsr	r3, r3, #3
   135a4:	str	r3, [sp, #52]	; 0x34
   135a8:	ldr	r3, [sp, #32]
   135ac:	str	r4, [sp, #48]	; 0x30
   135b0:	orr	r4, r2, sl, lsl r4
   135b4:	lsr	r2, r3, lr
   135b8:	mov	r3, r2
   135bc:	ldr	r2, [sp, #52]	; 0x34
   135c0:	add	fp, pc, fp
   135c4:	str	r4, [sp, #40]	; 0x28
   135c8:	ldrsb	fp, [fp, r2]
   135cc:	mov	r2, r3
   135d0:	ldr	r3, [sp, #36]	; 0x24
   135d4:	rsb	r5, lr, #32
   135d8:	ldr	r4, [sp, #40]	; 0x28
   135dc:	orr	r2, r2, r3, lsl r5
   135e0:	orr	r4, r4, sl, lsr r5
   135e4:	ldr	r3, [sp, #32]
   135e8:	str	r4, [sp, #40]	; 0x28
   135ec:	cmp	r0, #0
   135f0:	bic	r4, r3, sl, lsl lr
   135f4:	ldr	r0, [sp, #36]	; 0x24
   135f8:	ldr	r3, [sp, #48]	; 0x30
   135fc:	mov	lr, ip
   13600:	orr	sl, r2, r0, lsr r3
   13604:	ldr	r3, [sp, #40]	; 0x28
   13608:	strb	fp, [lr], #1
   1360c:	bic	r5, r0, r3
   13610:	beq	134ac <__assert_fail@plt+0x1b30>
   13614:	cmp	fp, #66	; 0x42
   13618:	beq	134ac <__assert_fail@plt+0x1b30>
   1361c:	mov	r3, #105	; 0x69
   13620:	strb	r3, [ip, #1]
   13624:	mov	r3, #66	; 0x42
   13628:	add	lr, ip, #3
   1362c:	strb	r3, [ip, #2]
   13630:	b	134ac <__assert_fail@plt+0x1b30>
   13634:	subs	lr, r1, #10
   13638:	strd	r2, [sp, #32]
   1363c:	and	r0, r0, #1
   13640:	bne	13580 <__assert_fail@plt+0x1c04>
   13644:	ldr	sl, [sp, #32]
   13648:	cmp	r0, #0
   1364c:	movne	r0, lr
   13650:	mov	r3, #66	; 0x42
   13654:	strb	r0, [ip, #1]
   13658:	strb	r3, [ip]
   1365c:	ldr	r2, [pc, #116]	; 136d8 <__assert_fail@plt+0x1d5c>
   13660:	add	r4, sp, #68	; 0x44
   13664:	add	r2, pc, r2
   13668:	mov	r3, #32
   1366c:	stm	sp, {r2, sl}
   13670:	str	r9, [sp, #8]
   13674:	mov	r0, r4
   13678:	mov	r1, r3
   1367c:	mov	r2, #1
   13680:	bl	11964 <__snprintf_chk@plt>
   13684:	mov	r0, r4
   13688:	bl	115f8 <strdup@plt>
   1368c:	ldr	r2, [sp, #100]	; 0x64
   13690:	ldr	r3, [r8]
   13694:	cmp	r2, r3
   13698:	bne	136bc <__assert_fail@plt+0x1d40>
   1369c:	add	sp, sp, #108	; 0x6c
   136a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a4:	ldr	r0, [pc, #48]	; 136dc <__assert_fail@plt+0x1d60>
   136a8:	add	r0, pc, r0
   136ac:	b	13548 <__assert_fail@plt+0x1bcc>
   136b0:	ldr	r0, [pc, #40]	; 136e0 <__assert_fail@plt+0x1d64>
   136b4:	add	r0, pc, r0
   136b8:	b	13548 <__assert_fail@plt+0x1bcc>
   136bc:	bl	11604 <__stack_chk_fail@plt>
   136c0:	andeq	r7, r1, r4, lsr sl
   136c4:	muleq	r0, ip, r1
   136c8:	muleq	r0, r8, r5
   136cc:	muleq	r0, r8, r5
   136d0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   136d4:	andeq	r6, r0, r0, lsr #10
   136d8:	muleq	r0, r0, r4
   136dc:	andeq	r6, r0, r4, lsr r4
   136e0:	andeq	r6, r0, r8, lsr #8
   136e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136e8:	subs	r4, r0, #0
   136ec:	beq	137bc <__assert_fail@plt+0x1e40>
   136f0:	ldrsb	lr, [r4]
   136f4:	cmp	lr, #0
   136f8:	beq	137bc <__assert_fail@plt+0x1e40>
   136fc:	cmp	r1, #0
   13700:	clz	ip, r2
   13704:	lsr	ip, ip, #5
   13708:	moveq	r0, #1
   1370c:	movne	r0, ip
   13710:	cmp	r3, #0
   13714:	moveq	r0, #1
   13718:	cmp	r0, #0
   1371c:	bne	137bc <__assert_fail@plt+0x1e40>
   13720:	mov	r8, r3
   13724:	mov	r7, r2
   13728:	mov	r9, r1
   1372c:	mov	r5, r0
   13730:	b	1378c <__assert_fail@plt+0x1e10>
   13734:	cmp	r3, #0
   13738:	bne	13778 <__assert_fail@plt+0x1dfc>
   1373c:	cmn	r4, #1
   13740:	add	r6, r4, #1
   13744:	beq	137c4 <__assert_fail@plt+0x1e48>
   13748:	cmp	r0, r6
   1374c:	bcs	137bc <__assert_fail@plt+0x1e40>
   13750:	sub	r1, r6, r0
   13754:	blx	r8
   13758:	cmn	r0, #1
   1375c:	beq	137bc <__assert_fail@plt+0x1e40>
   13760:	str	r0, [r9, r5, lsl #2]
   13764:	ldrsb	r3, [r6]
   13768:	add	r5, r5, #1
   1376c:	cmp	r3, #0
   13770:	beq	137c4 <__assert_fail@plt+0x1e48>
   13774:	mov	r0, #0
   13778:	cmn	r4, #1
   1377c:	beq	137c4 <__assert_fail@plt+0x1e48>
   13780:	ldrsb	lr, [r4, #1]!
   13784:	cmp	lr, #0
   13788:	beq	137c4 <__assert_fail@plt+0x1e48>
   1378c:	cmp	r7, r5
   13790:	mov	r6, r4
   13794:	bls	137cc <__assert_fail@plt+0x1e50>
   13798:	cmp	r0, #0
   1379c:	moveq	r0, r4
   137a0:	cmp	lr, #44	; 0x2c
   137a4:	ldrsb	r3, [r4, #1]
   137a8:	bne	13734 <__assert_fail@plt+0x1db8>
   137ac:	cmp	r3, #0
   137b0:	beq	1373c <__assert_fail@plt+0x1dc0>
   137b4:	cmp	r0, r6
   137b8:	bcc	13750 <__assert_fail@plt+0x1dd4>
   137bc:	mvn	r0, #0
   137c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137c4:	mov	r0, r5
   137c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137cc:	mvn	r0, #1
   137d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137d4:	cmp	r0, #0
   137d8:	beq	13844 <__assert_fail@plt+0x1ec8>
   137dc:	push	{r4, lr}
   137e0:	mov	r4, r3
   137e4:	cmp	r4, #0
   137e8:	ldrsb	ip, [r0]
   137ec:	clz	r3, ip
   137f0:	lsr	r3, r3, #5
   137f4:	moveq	r3, #1
   137f8:	cmp	r3, #0
   137fc:	bne	1383c <__assert_fail@plt+0x1ec0>
   13800:	ldr	lr, [r4]
   13804:	cmp	lr, r2
   13808:	bhi	1383c <__assert_fail@plt+0x1ec0>
   1380c:	cmp	ip, #43	; 0x2b
   13810:	strne	r3, [r4]
   13814:	addeq	r0, r0, #1
   13818:	ldr	r3, [sp, #8]
   1381c:	addeq	r1, r1, lr, lsl #2
   13820:	subeq	r2, r2, lr
   13824:	bl	136e4 <__assert_fail@plt+0x1d68>
   13828:	cmp	r0, #0
   1382c:	ldrgt	r3, [r4]
   13830:	addgt	r3, r3, r0
   13834:	strgt	r3, [r4]
   13838:	pop	{r4, pc}
   1383c:	mvn	r0, #0
   13840:	pop	{r4, pc}
   13844:	mvn	r0, #0
   13848:	bx	lr
   1384c:	cmp	r2, #0
   13850:	clz	r3, r1
   13854:	lsr	r3, r3, #5
   13858:	moveq	r3, #1
   1385c:	cmp	r0, #0
   13860:	moveq	r3, #1
   13864:	cmp	r3, #0
   13868:	bne	13934 <__assert_fail@plt+0x1fb8>
   1386c:	push	{r4, r5, r6, r7, r8, lr}
   13870:	mov	r6, r2
   13874:	mov	r2, r3
   13878:	ldrsb	r3, [r0]
   1387c:	mov	r8, r1
   13880:	mov	r4, r0
   13884:	mov	r7, #1
   13888:	cmp	r3, #0
   1388c:	beq	138fc <__assert_fail@plt+0x1f80>
   13890:	cmp	r2, #0
   13894:	moveq	r2, r4
   13898:	cmp	r3, #44	; 0x2c
   1389c:	mov	r5, r4
   138a0:	ldrsb	r3, [r4, #1]!
   138a4:	beq	13904 <__assert_fail@plt+0x1f88>
   138a8:	cmp	r3, #0
   138ac:	bne	13924 <__assert_fail@plt+0x1fa8>
   138b0:	mov	r5, r4
   138b4:	cmp	r2, r5
   138b8:	sub	r1, r5, r2
   138bc:	mov	r0, r2
   138c0:	bcs	1391c <__assert_fail@plt+0x1fa0>
   138c4:	blx	r6
   138c8:	mov	r2, r4
   138cc:	cmp	r0, #0
   138d0:	and	r1, r0, #7
   138d4:	poplt	{r4, r5, r6, r7, r8, pc}
   138d8:	ldrb	r3, [r8, r0, asr #3]
   138dc:	orr	r3, r3, r7, lsl r1
   138e0:	strb	r3, [r8, r0, asr #3]
   138e4:	ldrsb	r3, [r5]
   138e8:	cmp	r3, #0
   138ec:	beq	138fc <__assert_fail@plt+0x1f80>
   138f0:	ldrsb	r3, [r4]
   138f4:	cmp	r3, #0
   138f8:	bne	13898 <__assert_fail@plt+0x1f1c>
   138fc:	mov	r0, #0
   13900:	pop	{r4, r5, r6, r7, r8, pc}
   13904:	cmp	r3, #0
   13908:	moveq	r5, r4
   1390c:	cmp	r2, r5
   13910:	sub	r1, r5, r2
   13914:	mov	r0, r2
   13918:	bcc	138c4 <__assert_fail@plt+0x1f48>
   1391c:	mvn	r0, #0
   13920:	pop	{r4, r5, r6, r7, r8, pc}
   13924:	adds	r4, r5, #1
   13928:	bne	13888 <__assert_fail@plt+0x1f0c>
   1392c:	mov	r0, #0
   13930:	pop	{r4, r5, r6, r7, r8, pc}
   13934:	mvn	r0, #21
   13938:	bx	lr
   1393c:	cmp	r2, #0
   13940:	clz	r3, r1
   13944:	lsr	r3, r3, #5
   13948:	moveq	r3, #1
   1394c:	cmp	r0, #0
   13950:	moveq	r3, #1
   13954:	cmp	r3, #0
   13958:	bne	13a1c <__assert_fail@plt+0x20a0>
   1395c:	push	{r4, r5, r6, r7, r8, lr}
   13960:	mov	r6, r2
   13964:	mov	r2, r3
   13968:	ldrsb	r3, [r0]
   1396c:	mov	r7, r1
   13970:	mov	r4, r0
   13974:	cmp	r3, #0
   13978:	beq	139e4 <__assert_fail@plt+0x2068>
   1397c:	cmp	r2, #0
   13980:	moveq	r2, r4
   13984:	cmp	r3, #44	; 0x2c
   13988:	mov	r5, r4
   1398c:	ldrsb	r3, [r4, #1]!
   13990:	beq	139ec <__assert_fail@plt+0x2070>
   13994:	cmp	r3, #0
   13998:	bne	13a0c <__assert_fail@plt+0x2090>
   1399c:	mov	r5, r4
   139a0:	cmp	r2, r5
   139a4:	sub	r1, r5, r2
   139a8:	mov	r0, r2
   139ac:	bcs	13a04 <__assert_fail@plt+0x2088>
   139b0:	blx	r6
   139b4:	mov	r2, r4
   139b8:	cmp	r0, #0
   139bc:	poplt	{r4, r5, r6, r7, r8, pc}
   139c0:	ldr	r3, [r7]
   139c4:	orr	r3, r3, r0
   139c8:	str	r3, [r7]
   139cc:	ldrsb	r3, [r5]
   139d0:	cmp	r3, #0
   139d4:	beq	139e4 <__assert_fail@plt+0x2068>
   139d8:	ldrsb	r3, [r4]
   139dc:	cmp	r3, #0
   139e0:	bne	13984 <__assert_fail@plt+0x2008>
   139e4:	mov	r0, #0
   139e8:	pop	{r4, r5, r6, r7, r8, pc}
   139ec:	cmp	r3, #0
   139f0:	moveq	r5, r4
   139f4:	cmp	r2, r5
   139f8:	sub	r1, r5, r2
   139fc:	mov	r0, r2
   13a00:	bcc	139b0 <__assert_fail@plt+0x2034>
   13a04:	mvn	r0, #0
   13a08:	pop	{r4, r5, r6, r7, r8, pc}
   13a0c:	adds	r4, r5, #1
   13a10:	bne	13974 <__assert_fail@plt+0x1ff8>
   13a14:	mov	r0, #0
   13a18:	pop	{r4, r5, r6, r7, r8, pc}
   13a1c:	mvn	r0, #21
   13a20:	bx	lr
   13a24:	ldr	ip, [pc, #396]	; 13bb8 <__assert_fail@plt+0x223c>
   13a28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a2c:	add	ip, pc, ip
   13a30:	ldr	lr, [pc, #388]	; 13bbc <__assert_fail@plt+0x2240>
   13a34:	sub	sp, sp, #8
   13a38:	mov	r9, r3
   13a3c:	ldr	r5, [ip, lr]
   13a40:	mov	sl, #0
   13a44:	subs	r4, r0, #0
   13a48:	ldr	r3, [r5]
   13a4c:	mov	r7, r1
   13a50:	str	sl, [sp]
   13a54:	mov	r1, ip
   13a58:	str	r3, [sp, #4]
   13a5c:	beq	13ad0 <__assert_fail@plt+0x2154>
   13a60:	str	r9, [r7]
   13a64:	str	r9, [r2]
   13a68:	mov	r6, r2
   13a6c:	bl	11790 <__errno_location@plt>
   13a70:	str	sl, [r0]
   13a74:	ldrsb	r3, [r4]
   13a78:	mov	r8, r0
   13a7c:	cmp	r3, #58	; 0x3a
   13a80:	beq	13aec <__assert_fail@plt+0x2170>
   13a84:	mov	sl, sp
   13a88:	mov	r1, sl
   13a8c:	mov	r2, #10
   13a90:	mov	r0, r4
   13a94:	bl	1152c <strtol@plt>
   13a98:	str	r0, [r7]
   13a9c:	str	r0, [r6]
   13aa0:	ldr	r0, [r8]
   13aa4:	cmp	r0, #0
   13aa8:	bne	13b3c <__assert_fail@plt+0x21c0>
   13aac:	ldr	r2, [sp]
   13ab0:	cmp	r2, #0
   13ab4:	cmpne	r2, r4
   13ab8:	beq	13b3c <__assert_fail@plt+0x21c0>
   13abc:	ldrsb	r3, [r2]
   13ac0:	cmp	r3, #58	; 0x3a
   13ac4:	beq	13b44 <__assert_fail@plt+0x21c8>
   13ac8:	cmp	r3, #45	; 0x2d
   13acc:	beq	13b54 <__assert_fail@plt+0x21d8>
   13ad0:	mov	r0, #0
   13ad4:	ldr	r2, [sp, #4]
   13ad8:	ldr	r3, [r5]
   13adc:	cmp	r2, r3
   13ae0:	bne	13bb4 <__assert_fail@plt+0x2238>
   13ae4:	add	sp, sp, #8
   13ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13aec:	add	r4, r4, #1
   13af0:	mov	r0, r4
   13af4:	mov	r2, #10
   13af8:	mov	r1, sp
   13afc:	bl	1152c <strtol@plt>
   13b00:	str	r0, [r6]
   13b04:	ldr	r3, [r8]
   13b08:	cmp	r3, #0
   13b0c:	bne	13b3c <__assert_fail@plt+0x21c0>
   13b10:	ldr	r3, [sp]
   13b14:	cmp	r3, #0
   13b18:	beq	13b3c <__assert_fail@plt+0x21c0>
   13b1c:	ldrsb	r2, [r3]
   13b20:	sub	r3, r3, r4
   13b24:	clz	r3, r3
   13b28:	cmp	r2, #0
   13b2c:	lsr	r3, r3, #5
   13b30:	movne	r3, #1
   13b34:	cmp	r3, #0
   13b38:	beq	13ad0 <__assert_fail@plt+0x2154>
   13b3c:	mvn	r0, #0
   13b40:	b	13ad4 <__assert_fail@plt+0x2158>
   13b44:	ldrsb	r3, [r2, #1]
   13b48:	cmp	r3, #0
   13b4c:	streq	r9, [r6]
   13b50:	beq	13ad4 <__assert_fail@plt+0x2158>
   13b54:	mov	r3, #0
   13b58:	add	r4, r2, #1
   13b5c:	str	r3, [r8]
   13b60:	mov	r1, sl
   13b64:	mov	r0, r4
   13b68:	mov	r2, #10
   13b6c:	str	r3, [sp]
   13b70:	bl	1152c <strtol@plt>
   13b74:	str	r0, [r6]
   13b78:	ldr	r3, [r8]
   13b7c:	cmp	r3, #0
   13b80:	bne	13b3c <__assert_fail@plt+0x21c0>
   13b84:	ldr	r2, [sp]
   13b88:	cmp	r2, #0
   13b8c:	beq	13b3c <__assert_fail@plt+0x21c0>
   13b90:	ldrsb	r3, [r2]
   13b94:	sub	r2, r2, r4
   13b98:	clz	r2, r2
   13b9c:	cmp	r3, #0
   13ba0:	lsr	r2, r2, #5
   13ba4:	movne	r2, #1
   13ba8:	cmp	r2, #0
   13bac:	beq	13ad0 <__assert_fail@plt+0x2154>
   13bb0:	b	13b3c <__assert_fail@plt+0x21c0>
   13bb4:	bl	11604 <__stack_chk_fail@plt>
   13bb8:	andeq	r7, r1, r0, lsr #8
   13bbc:	muleq	r0, ip, r1
   13bc0:	ldr	r3, [pc, #244]	; 13cbc <__assert_fail@plt+0x2340>
   13bc4:	ldr	r2, [pc, #244]	; 13cc0 <__assert_fail@plt+0x2344>
   13bc8:	add	r3, pc, r3
   13bcc:	push	{r4, r5, r6, r7, r8, r9, lr}
   13bd0:	sub	sp, sp, #20
   13bd4:	ldr	r9, [r3, r2]
   13bd8:	cmp	r0, #0
   13bdc:	cmpne	r1, #0
   13be0:	ldr	r3, [r9]
   13be4:	str	r3, [sp, #12]
   13be8:	beq	13cb0 <__assert_fail@plt+0x2334>
   13bec:	mov	r4, r1
   13bf0:	add	r8, sp, #4
   13bf4:	add	r7, sp, #8
   13bf8:	b	13c38 <__assert_fail@plt+0x22bc>
   13bfc:	cmp	r4, r3
   13c00:	bne	13cb0 <__assert_fail@plt+0x2334>
   13c04:	mov	r2, r4
   13c08:	mov	r1, r6
   13c0c:	mov	r0, r5
   13c10:	bl	11934 <strncmp@plt>
   13c14:	cmp	r0, #0
   13c18:	bne	13cb0 <__assert_fail@plt+0x2334>
   13c1c:	adds	r0, r5, r4
   13c20:	moveq	r3, #0
   13c24:	movne	r3, #1
   13c28:	adds	r4, r6, r4
   13c2c:	moveq	r3, #0
   13c30:	cmp	r3, #0
   13c34:	beq	13cb0 <__assert_fail@plt+0x2334>
   13c38:	mov	r1, r8
   13c3c:	bl	12040 <__assert_fail@plt+0x6c4>
   13c40:	mov	r1, r7
   13c44:	mov	r5, r0
   13c48:	mov	r0, r4
   13c4c:	bl	12040 <__assert_fail@plt+0x6c4>
   13c50:	ldr	r4, [sp, #4]
   13c54:	ldr	r3, [sp, #8]
   13c58:	mov	r6, r0
   13c5c:	adds	r0, r4, r3
   13c60:	beq	13c94 <__assert_fail@plt+0x2318>
   13c64:	cmp	r0, #1
   13c68:	bne	13bfc <__assert_fail@plt+0x2280>
   13c6c:	cmp	r5, #0
   13c70:	beq	13c80 <__assert_fail@plt+0x2304>
   13c74:	ldrsb	r2, [r5]
   13c78:	cmp	r2, #47	; 0x2f
   13c7c:	beq	13c98 <__assert_fail@plt+0x231c>
   13c80:	cmp	r6, #0
   13c84:	beq	13bfc <__assert_fail@plt+0x2280>
   13c88:	ldrsb	r2, [r6]
   13c8c:	cmp	r2, #47	; 0x2f
   13c90:	bne	13bfc <__assert_fail@plt+0x2280>
   13c94:	mov	r0, #1
   13c98:	ldr	r2, [sp, #12]
   13c9c:	ldr	r3, [r9]
   13ca0:	cmp	r2, r3
   13ca4:	bne	13cb8 <__assert_fail@plt+0x233c>
   13ca8:	add	sp, sp, #20
   13cac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13cb0:	mov	r0, #0
   13cb4:	b	13c98 <__assert_fail@plt+0x231c>
   13cb8:	bl	11604 <__stack_chk_fail@plt>
   13cbc:	andeq	r7, r1, r4, lsl #5
   13cc0:	muleq	r0, ip, r1
   13cc4:	orrs	r3, r0, r1
   13cc8:	beq	13d44 <__assert_fail@plt+0x23c8>
   13ccc:	cmp	r0, #0
   13cd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cd4:	mov	r4, r1
   13cd8:	mov	r5, r0
   13cdc:	beq	13d50 <__assert_fail@plt+0x23d4>
   13ce0:	cmp	r1, #0
   13ce4:	beq	13d60 <__assert_fail@plt+0x23e4>
   13ce8:	mov	r6, r2
   13cec:	bl	11760 <strlen@plt>
   13cf0:	mvn	r3, r0
   13cf4:	cmp	r6, r3
   13cf8:	mov	r7, r0
   13cfc:	movhi	r8, #0
   13d00:	bhi	13d3c <__assert_fail@plt+0x23c0>
   13d04:	add	r9, r6, r0
   13d08:	add	r0, r9, #1
   13d0c:	bl	116b8 <malloc@plt>
   13d10:	subs	r8, r0, #0
   13d14:	beq	13d3c <__assert_fail@plt+0x23c0>
   13d18:	mov	r1, r5
   13d1c:	mov	r2, r7
   13d20:	bl	115d4 <memcpy@plt>
   13d24:	mov	r2, r6
   13d28:	mov	r1, r4
   13d2c:	add	r0, r8, r7
   13d30:	bl	115d4 <memcpy@plt>
   13d34:	mov	r3, #0
   13d38:	strb	r3, [r8, r9]
   13d3c:	mov	r0, r8
   13d40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d44:	ldr	r0, [pc, #28]	; 13d68 <__assert_fail@plt+0x23ec>
   13d48:	add	r0, pc, r0
   13d4c:	b	115f8 <strdup@plt>
   13d50:	mov	r0, r4
   13d54:	mov	r1, r2
   13d58:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d5c:	b	115a4 <strndup@plt>
   13d60:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d64:	b	115f8 <strdup@plt>
   13d68:	andeq	r5, r0, ip, lsr lr
   13d6c:	push	{r4, r5, r6, lr}
   13d70:	subs	r4, r1, #0
   13d74:	mov	r5, r0
   13d78:	moveq	r2, r4
   13d7c:	beq	13d8c <__assert_fail@plt+0x2410>
   13d80:	mov	r0, r4
   13d84:	bl	11760 <strlen@plt>
   13d88:	mov	r2, r0
   13d8c:	mov	r1, r4
   13d90:	mov	r0, r5
   13d94:	pop	{r4, r5, r6, lr}
   13d98:	b	13cc4 <__assert_fail@plt+0x2348>
   13d9c:	push	{r1, r2, r3}
   13da0:	ldr	r1, [pc, #132]	; 13e2c <__assert_fail@plt+0x24b0>
   13da4:	ldr	r3, [pc, #132]	; 13e30 <__assert_fail@plt+0x24b4>
   13da8:	add	r1, pc, r1
   13dac:	push	{r4, r5, lr}
   13db0:	mov	r5, r0
   13db4:	ldr	r4, [r1, r3]
   13db8:	sub	sp, sp, #16
   13dbc:	add	ip, sp, #32
   13dc0:	ldr	r0, [r4]
   13dc4:	ldr	r2, [sp, #28]
   13dc8:	str	r0, [sp, #12]
   13dcc:	mov	r3, ip
   13dd0:	add	r0, sp, #8
   13dd4:	mov	r1, #1
   13dd8:	str	ip, [sp, #4]
   13ddc:	bl	117b4 <__vasprintf_chk@plt>
   13de0:	subs	r2, r0, #0
   13de4:	movlt	r5, #0
   13de8:	blt	13e04 <__assert_fail@plt+0x2488>
   13dec:	mov	r0, r5
   13df0:	ldr	r1, [sp, #8]
   13df4:	bl	13cc4 <__assert_fail@plt+0x2348>
   13df8:	mov	r5, r0
   13dfc:	ldr	r0, [sp, #8]
   13e00:	bl	11568 <free@plt>
   13e04:	ldr	r2, [sp, #12]
   13e08:	ldr	r3, [r4]
   13e0c:	mov	r0, r5
   13e10:	cmp	r2, r3
   13e14:	bne	13e28 <__assert_fail@plt+0x24ac>
   13e18:	add	sp, sp, #16
   13e1c:	pop	{r4, r5, lr}
   13e20:	add	sp, sp, #12
   13e24:	bx	lr
   13e28:	bl	11604 <__stack_chk_fail@plt>
   13e2c:	andeq	r7, r1, r4, lsr #1
   13e30:	muleq	r0, ip, r1
   13e34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e38:	mov	r6, r0
   13e3c:	ldr	r0, [pc, #348]	; 13fa0 <__assert_fail@plt+0x2624>
   13e40:	ldr	ip, [pc, #348]	; 13fa4 <__assert_fail@plt+0x2628>
   13e44:	add	r0, pc, r0
   13e48:	ldr	r5, [r6]
   13e4c:	ldr	r8, [r0, ip]
   13e50:	sub	sp, sp, #8
   13e54:	ldrsb	r4, [r5]
   13e58:	mov	r9, r2
   13e5c:	ldr	r2, [r8]
   13e60:	cmp	r4, #0
   13e64:	mov	r7, r1
   13e68:	str	r2, [sp, #4]
   13e6c:	mov	r1, r0
   13e70:	beq	13f20 <__assert_fail@plt+0x25a4>
   13e74:	mov	r0, r5
   13e78:	mov	r1, r9
   13e7c:	mov	sl, r3
   13e80:	bl	11970 <strspn@plt>
   13e84:	add	r4, r5, r0
   13e88:	ldrsb	r5, [r5, r0]
   13e8c:	cmp	r5, #0
   13e90:	beq	13f88 <__assert_fail@plt+0x260c>
   13e94:	cmp	sl, #0
   13e98:	beq	13f3c <__assert_fail@plt+0x25c0>
   13e9c:	ldr	r0, [pc, #260]	; 13fa8 <__assert_fail@plt+0x262c>
   13ea0:	mov	r1, r5
   13ea4:	add	r0, pc, r0
   13ea8:	bl	1176c <strchr@plt>
   13eac:	cmp	r0, #0
   13eb0:	beq	13f58 <__assert_fail@plt+0x25dc>
   13eb4:	add	sl, r4, #1
   13eb8:	mov	r3, #0
   13ebc:	mov	r0, sl
   13ec0:	mov	r1, sp
   13ec4:	strb	r5, [sp]
   13ec8:	strb	r3, [sp, #1]
   13ecc:	bl	120e0 <__assert_fail@plt+0x764>
   13ed0:	add	r3, r4, r0
   13ed4:	str	r0, [r7]
   13ed8:	ldrsb	r3, [r3, #1]
   13edc:	subs	r5, r5, r3
   13ee0:	movne	r5, #1
   13ee4:	cmp	r3, #0
   13ee8:	moveq	r5, #1
   13eec:	cmp	r5, #0
   13ef0:	bne	13f88 <__assert_fail@plt+0x260c>
   13ef4:	add	r0, r0, #2
   13ef8:	add	r5, r4, r0
   13efc:	ldrsb	r1, [r4, r0]
   13f00:	cmp	r1, #0
   13f04:	beq	13f18 <__assert_fail@plt+0x259c>
   13f08:	mov	r0, r9
   13f0c:	bl	1176c <strchr@plt>
   13f10:	cmp	r0, #0
   13f14:	beq	13f88 <__assert_fail@plt+0x260c>
   13f18:	mov	r4, sl
   13f1c:	str	r5, [r6]
   13f20:	ldr	r2, [sp, #4]
   13f24:	ldr	r3, [r8]
   13f28:	mov	r0, r4
   13f2c:	cmp	r2, r3
   13f30:	bne	13f9c <__assert_fail@plt+0x2620>
   13f34:	add	sp, sp, #8
   13f38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f3c:	mov	r1, r9
   13f40:	mov	r0, r4
   13f44:	bl	11538 <strcspn@plt>
   13f48:	add	r3, r4, r0
   13f4c:	str	r0, [r7]
   13f50:	str	r3, [r6]
   13f54:	b	13f20 <__assert_fail@plt+0x25a4>
   13f58:	mov	r1, r9
   13f5c:	mov	r0, r4
   13f60:	bl	120e0 <__assert_fail@plt+0x764>
   13f64:	str	r0, [r7]
   13f68:	ldrsb	r1, [r4, r0]
   13f6c:	add	r5, r4, r0
   13f70:	cmp	r1, #0
   13f74:	beq	13f94 <__assert_fail@plt+0x2618>
   13f78:	mov	r0, r9
   13f7c:	bl	1176c <strchr@plt>
   13f80:	cmp	r0, #0
   13f84:	bne	13f94 <__assert_fail@plt+0x2618>
   13f88:	str	r4, [r6]
   13f8c:	mov	r4, #0
   13f90:	b	13f20 <__assert_fail@plt+0x25a4>
   13f94:	str	r5, [r6]
   13f98:	b	13f20 <__assert_fail@plt+0x25a4>
   13f9c:	bl	11604 <__stack_chk_fail@plt>
   13fa0:	andeq	r7, r1, r8
   13fa4:	muleq	r0, ip, r1
   13fa8:	andeq	r5, r0, r8, asr ip
   13fac:	push	{r4, lr}
   13fb0:	mov	r4, r0
   13fb4:	b	13fc0 <__assert_fail@plt+0x2644>
   13fb8:	cmp	r0, #10
   13fbc:	beq	13fd8 <__assert_fail@plt+0x265c>
   13fc0:	mov	r0, r4
   13fc4:	bl	11814 <fgetc@plt>
   13fc8:	cmn	r0, #1
   13fcc:	bne	13fb8 <__assert_fail@plt+0x263c>
   13fd0:	mov	r0, #1
   13fd4:	pop	{r4, pc}
   13fd8:	mov	r0, #0
   13fdc:	pop	{r4, pc}
   13fe0:	push	{r1, r2, r3}
   13fe4:	subs	r3, r0, #0
   13fe8:	ldr	r1, [pc, #168]	; 14098 <__assert_fail@plt+0x271c>
   13fec:	ldr	r2, [pc, #168]	; 1409c <__assert_fail@plt+0x2720>
   13ff0:	add	r1, pc, r1
   13ff4:	push	{r4, r5, r6, lr}
   13ff8:	sub	sp, sp, #12
   13ffc:	ldr	r5, [r1, r2]
   14000:	ldr	r6, [sp, #28]
   14004:	ldr	r2, [r5]
   14008:	str	r2, [sp, #4]
   1400c:	beq	14024 <__assert_fail@plt+0x26a8>
   14010:	ldr	r2, [pc, #136]	; 140a0 <__assert_fail@plt+0x2724>
   14014:	add	r2, pc, r2
   14018:	ldr	r2, [r2]
   1401c:	tst	r2, #16777216	; 0x1000000
   14020:	beq	14074 <__assert_fail@plt+0x26f8>
   14024:	ldr	r3, [pc, #120]	; 140a4 <__assert_fail@plt+0x2728>
   14028:	ldr	r4, [r1, r3]
   1402c:	add	ip, sp, #32
   14030:	mov	r2, r6
   14034:	mov	r3, ip
   14038:	mov	r1, #1
   1403c:	ldr	r0, [r4]
   14040:	str	ip, [sp]
   14044:	bl	116dc <__vfprintf_chk@plt>
   14048:	ldr	r1, [r4]
   1404c:	mov	r0, #10
   14050:	bl	118a4 <fputc@plt>
   14054:	ldr	r2, [sp, #4]
   14058:	ldr	r3, [r5]
   1405c:	cmp	r2, r3
   14060:	bne	14094 <__assert_fail@plt+0x2718>
   14064:	add	sp, sp, #12
   14068:	pop	{r4, r5, r6, lr}
   1406c:	add	sp, sp, #12
   14070:	bx	lr
   14074:	ldr	r0, [pc, #40]	; 140a4 <__assert_fail@plt+0x2728>
   14078:	ldr	r2, [pc, #40]	; 140a8 <__assert_fail@plt+0x272c>
   1407c:	ldr	r4, [r1, r0]
   14080:	add	r2, pc, r2
   14084:	mov	r1, #1
   14088:	ldr	r0, [r4]
   1408c:	bl	11850 <__fprintf_chk@plt>
   14090:	b	1402c <__assert_fail@plt+0x26b0>
   14094:	bl	11604 <__stack_chk_fail@plt>
   14098:	andeq	r6, r1, ip, asr lr
   1409c:	muleq	r0, ip, r1
   140a0:	andeq	r7, r1, r8
   140a4:	andeq	r0, r0, r0, lsr #3
   140a8:	andeq	r5, r0, r8, lsr #21
   140ac:	push	{r0, r1, r2, r3}
   140b0:	ldr	r0, [pc, #104]	; 14120 <__assert_fail@plt+0x27a4>
   140b4:	ldr	r2, [pc, #104]	; 14124 <__assert_fail@plt+0x27a8>
   140b8:	add	r0, pc, r0
   140bc:	push	{r4, r5, lr}
   140c0:	sub	sp, sp, #12
   140c4:	ldr	r4, [r0, r2]
   140c8:	ldr	r1, [pc, #88]	; 14128 <__assert_fail@plt+0x27ac>
   140cc:	add	r3, sp, #28
   140d0:	ldr	ip, [r4]
   140d4:	str	r3, [sp]
   140d8:	str	ip, [sp, #4]
   140dc:	ldr	r5, [r0, r1]
   140e0:	ldr	r2, [sp, #24]
   140e4:	mov	r1, #1
   140e8:	ldr	r0, [r5]
   140ec:	bl	116dc <__vfprintf_chk@plt>
   140f0:	ldr	r1, [r5]
   140f4:	mov	r0, #10
   140f8:	bl	118a4 <fputc@plt>
   140fc:	ldr	r2, [sp, #4]
   14100:	ldr	r3, [r4]
   14104:	cmp	r2, r3
   14108:	bne	1411c <__assert_fail@plt+0x27a0>
   1410c:	add	sp, sp, #12
   14110:	pop	{r4, r5, lr}
   14114:	add	sp, sp, #16
   14118:	bx	lr
   1411c:	bl	11604 <__stack_chk_fail@plt>
   14120:	muleq	r1, r4, sp
   14124:	muleq	r0, ip, r1
   14128:	andeq	r0, r0, r0, lsr #3
   1412c:	ldr	r1, [r0, #12]
   14130:	ldr	r2, [r0, #4]
   14134:	cmp	r1, #0
   14138:	push	{r4, lr}
   1413c:	moveq	r4, r2
   14140:	sub	sp, sp, #16
   14144:	beq	14198 <__assert_fail@plt+0x281c>
   14148:	cmp	r2, #0
   1414c:	beq	141c0 <__assert_fail@plt+0x2844>
   14150:	ldrsb	r3, [r2]
   14154:	ldr	ip, [pc, #116]	; 141d0 <__assert_fail@plt+0x2854>
   14158:	add	r4, r0, #16
   1415c:	cmp	r3, #47	; 0x2f
   14160:	addeq	r2, r2, #1
   14164:	add	ip, pc, ip
   14168:	mov	r3, #4096	; 0x1000
   1416c:	stmib	sp, {r1, r2}
   14170:	mov	r0, r4
   14174:	str	ip, [sp]
   14178:	mov	r1, r3
   1417c:	mov	r2, #1
   14180:	bl	11964 <__snprintf_chk@plt>
   14184:	cmp	r0, #0
   14188:	movlt	r4, #0
   1418c:	blt	14198 <__assert_fail@plt+0x281c>
   14190:	cmp	r0, #4096	; 0x1000
   14194:	bge	141a4 <__assert_fail@plt+0x2828>
   14198:	mov	r0, r4
   1419c:	add	sp, sp, #16
   141a0:	pop	{r4, pc}
   141a4:	bl	11790 <__errno_location@plt>
   141a8:	mov	r4, #0
   141ac:	mov	r3, #36	; 0x24
   141b0:	str	r3, [r0]
   141b4:	mov	r0, r4
   141b8:	add	sp, sp, #16
   141bc:	pop	{r4, pc}
   141c0:	mov	r4, r1
   141c4:	mov	r0, r4
   141c8:	add	sp, sp, #16
   141cc:	pop	{r4, pc}
   141d0:	andeq	r5, r0, ip, asr #19
   141d4:	push	{r4, lr}
   141d8:	sub	sp, sp, #8
   141dc:	add	r4, r0, #16
   141e0:	mov	r3, #4096	; 0x1000
   141e4:	stm	sp, {r1, r2}
   141e8:	mov	r0, r4
   141ec:	mov	r1, r3
   141f0:	mov	r2, #1
   141f4:	bl	115c8 <__vsnprintf_chk@plt>
   141f8:	cmp	r0, #0
   141fc:	movlt	r4, #0
   14200:	blt	1420c <__assert_fail@plt+0x2890>
   14204:	cmp	r0, #4096	; 0x1000
   14208:	bge	14218 <__assert_fail@plt+0x289c>
   1420c:	mov	r0, r4
   14210:	add	sp, sp, #8
   14214:	pop	{r4, pc}
   14218:	bl	11790 <__errno_location@plt>
   1421c:	mov	r4, #0
   14220:	mov	r3, #36	; 0x24
   14224:	str	r3, [r0]
   14228:	mov	r0, r4
   1422c:	add	sp, sp, #8
   14230:	pop	{r4, pc}
   14234:	push	{r4, r5, r6, r7, lr}
   14238:	sub	sp, sp, #20
   1423c:	ldr	r4, [pc, #312]	; 1437c <__assert_fail@plt+0x2a00>
   14240:	ldr	r3, [pc, #312]	; 14380 <__assert_fail@plt+0x2a04>
   14244:	add	r4, pc, r4
   14248:	ldr	r7, [pc, #308]	; 14384 <__assert_fail@plt+0x2a08>
   1424c:	ldr	r5, [r4, r3]
   14250:	add	r7, pc, r7
   14254:	ldr	r6, [r7]
   14258:	ldr	r3, [r5]
   1425c:	cmp	r6, #0
   14260:	str	r3, [sp, #12]
   14264:	beq	14280 <__assert_fail@plt+0x2904>
   14268:	ldr	r2, [sp, #12]
   1426c:	ldr	r3, [r5]
   14270:	cmp	r2, r3
   14274:	bne	14378 <__assert_fail@plt+0x29fc>
   14278:	add	sp, sp, #20
   1427c:	pop	{r4, r5, r6, r7, pc}
   14280:	ldr	r0, [pc, #256]	; 14388 <__assert_fail@plt+0x2a0c>
   14284:	add	r0, pc, r0
   14288:	bl	116ac <getenv@plt>
   1428c:	cmp	r0, #0
   14290:	beq	142d8 <__assert_fail@plt+0x295c>
   14294:	mov	r2, r6
   14298:	add	r1, sp, #8
   1429c:	bl	11754 <strtoul@plt>
   142a0:	mov	r6, r0
   142a4:	ldr	r0, [sp, #8]
   142a8:	cmp	r0, #0
   142ac:	beq	142c4 <__assert_fail@plt+0x2948>
   142b0:	ldr	r1, [pc, #212]	; 1438c <__assert_fail@plt+0x2a10>
   142b4:	add	r1, pc, r1
   142b8:	bl	11514 <strcmp@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	142ec <__assert_fail@plt+0x2970>
   142c4:	ldr	r3, [pc, #196]	; 14390 <__assert_fail@plt+0x2a14>
   142c8:	cmp	r6, #0
   142cc:	add	r3, pc, r3
   142d0:	str	r6, [r3]
   142d4:	bne	142f8 <__assert_fail@plt+0x297c>
   142d8:	mov	r3, #2
   142dc:	ldr	r2, [pc, #176]	; 14394 <__assert_fail@plt+0x2a18>
   142e0:	add	r2, pc, r2
   142e4:	str	r3, [r2]
   142e8:	b	14268 <__assert_fail@plt+0x28ec>
   142ec:	ldr	r3, [pc, #164]	; 14398 <__assert_fail@plt+0x2a1c>
   142f0:	mov	r6, r3
   142f4:	str	r3, [r7]
   142f8:	bl	11550 <getuid@plt>
   142fc:	mov	r7, r0
   14300:	bl	11634 <geteuid@plt>
   14304:	cmp	r7, r0
   14308:	beq	1435c <__assert_fail@plt+0x29e0>
   1430c:	ldr	r7, [pc, #136]	; 1439c <__assert_fail@plt+0x2a20>
   14310:	ldr	r2, [pc, #136]	; 143a0 <__assert_fail@plt+0x2a24>
   14314:	add	r7, pc, r7
   14318:	orr	r3, r6, #16777216	; 0x1000000
   1431c:	str	r3, [r7]
   14320:	ldr	r3, [r4, r2]
   14324:	ldr	r4, [r3]
   14328:	bl	11730 <getpid@plt>
   1432c:	ldr	r3, [pc, #112]	; 143a4 <__assert_fail@plt+0x2a28>
   14330:	ldr	r2, [pc, #112]	; 143a8 <__assert_fail@plt+0x2a2c>
   14334:	add	r3, pc, r3
   14338:	str	r3, [sp]
   1433c:	add	r2, pc, r2
   14340:	mov	r1, #1
   14344:	mov	r3, r0
   14348:	mov	r0, r4
   1434c:	bl	11850 <__fprintf_chk@plt>
   14350:	ldr	r3, [r7]
   14354:	orr	r3, r3, #2
   14358:	b	142dc <__assert_fail@plt+0x2960>
   1435c:	bl	117cc <getgid@plt>
   14360:	mov	r7, r0
   14364:	bl	11664 <getegid@plt>
   14368:	cmp	r7, r0
   1436c:	orreq	r3, r6, #2
   14370:	bne	1430c <__assert_fail@plt+0x2990>
   14374:	b	142dc <__assert_fail@plt+0x2960>
   14378:	bl	11604 <__stack_chk_fail@plt>
   1437c:	andeq	r6, r1, r8, lsl #24
   14380:	muleq	r0, ip, r1
   14384:	andeq	r6, r1, ip, asr #27
   14388:			; <UNDEFINED> instruction: 0x000058b4
   1438c:	muleq	r0, r4, r8
   14390:	andeq	r6, r1, r0, asr sp
   14394:	andeq	r6, r1, ip, lsr sp
   14398:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1439c:	andeq	r6, r1, r8, lsl #26
   143a0:	andeq	r0, r0, r0, lsr #3
   143a4:	andeq	r5, r0, r4, asr r8
   143a8:	andeq	r5, r0, r0, lsl r8
   143ac:	cmp	r0, #0
   143b0:	ldrne	r3, [r0, #8]
   143b4:	addne	r3, r3, #1
   143b8:	strne	r3, [r0, #8]
   143bc:	bx	lr
   143c0:	ldr	r2, [pc, #228]	; 144ac <__assert_fail@plt+0x2b30>
   143c4:	push	{r4, r5, lr}
   143c8:	subs	r4, r0, #0
   143cc:	sub	sp, sp, #12
   143d0:	add	r2, pc, r2
   143d4:	beq	143ec <__assert_fail@plt+0x2a70>
   143d8:	ldr	r3, [r4, #8]
   143dc:	sub	r3, r3, #1
   143e0:	cmp	r3, #0
   143e4:	str	r3, [r4, #8]
   143e8:	ble	143f4 <__assert_fail@plt+0x2a78>
   143ec:	add	sp, sp, #12
   143f0:	pop	{r4, r5, pc}
   143f4:	ldr	r3, [pc, #180]	; 144b0 <__assert_fail@plt+0x2b34>
   143f8:	add	r3, pc, r3
   143fc:	ldr	r3, [r3]
   14400:	tst	r3, #4
   14404:	bne	14458 <__assert_fail@plt+0x2adc>
   14408:	add	r3, r4, #4096	; 0x1000
   1440c:	ldr	r2, [r3, #16]
   14410:	cmp	r2, #0
   14414:	beq	14424 <__assert_fail@plt+0x2aa8>
   14418:	ldr	r3, [r3, #20]
   1441c:	mov	r0, r4
   14420:	blx	r3
   14424:	ldr	r0, [r4]
   14428:	cmp	r0, #0
   1442c:	bge	14450 <__assert_fail@plt+0x2ad4>
   14430:	ldr	r0, [r4, #4]
   14434:	bl	11568 <free@plt>
   14438:	ldr	r0, [r4, #12]
   1443c:	bl	11568 <free@plt>
   14440:	mov	r0, r4
   14444:	add	sp, sp, #12
   14448:	pop	{r4, r5, lr}
   1444c:	b	11568 <free@plt>
   14450:	bl	1194c <close@plt>
   14454:	b	14430 <__assert_fail@plt+0x2ab4>
   14458:	ldr	r3, [pc, #84]	; 144b4 <__assert_fail@plt+0x2b38>
   1445c:	ldr	r3, [r2, r3]
   14460:	ldr	r5, [r3]
   14464:	bl	11730 <getpid@plt>
   14468:	ldr	r2, [pc, #72]	; 144b8 <__assert_fail@plt+0x2b3c>
   1446c:	ldr	r3, [pc, #72]	; 144bc <__assert_fail@plt+0x2b40>
   14470:	add	r2, pc, r2
   14474:	str	r2, [sp, #4]
   14478:	ldr	r2, [pc, #64]	; 144c0 <__assert_fail@plt+0x2b44>
   1447c:	add	r3, pc, r3
   14480:	str	r3, [sp]
   14484:	add	r2, pc, r2
   14488:	mov	r1, #1
   1448c:	mov	r3, r0
   14490:	mov	r0, r5
   14494:	bl	11850 <__fprintf_chk@plt>
   14498:	ldr	r1, [pc, #36]	; 144c4 <__assert_fail@plt+0x2b48>
   1449c:	mov	r0, r4
   144a0:	add	r1, pc, r1
   144a4:	bl	13fe0 <__assert_fail@plt+0x2664>
   144a8:	b	14408 <__assert_fail@plt+0x2a8c>
   144ac:	andeq	r6, r1, ip, ror sl
   144b0:	andeq	r6, r1, r4, lsr #24
   144b4:	andeq	r0, r0, r0, lsr #3
   144b8:	andeq	r5, r0, r0, lsr r7
   144bc:	andeq	r5, r0, ip, lsl #14
   144c0:	andeq	r5, r0, ip, lsl #14
   144c4:	andeq	r5, r0, r4, lsl #14
   144c8:	push	{r0, r1, r2, r3}
   144cc:	mov	r0, #1
   144d0:	push	{r4, r5, r6, r7, lr}
   144d4:	sub	sp, sp, #20
   144d8:	ldr	r5, [pc, #264]	; 145e8 <__assert_fail@plt+0x2c6c>
   144dc:	ldr	r3, [pc, #264]	; 145ec <__assert_fail@plt+0x2c70>
   144e0:	add	r5, pc, r5
   144e4:	ldr	r1, [pc, #260]	; 145f0 <__assert_fail@plt+0x2c74>
   144e8:	ldr	r6, [r5, r3]
   144ec:	ldr	r7, [sp, #40]	; 0x28
   144f0:	ldr	r3, [r6]
   144f4:	str	r3, [sp, #12]
   144f8:	bl	114e4 <calloc@plt>
   144fc:	subs	r4, r0, #0
   14500:	beq	1455c <__assert_fail@plt+0x2be0>
   14504:	ldr	r3, [pc, #232]	; 145f4 <__assert_fail@plt+0x2c78>
   14508:	add	r3, pc, r3
   1450c:	ldr	r3, [r3]
   14510:	tst	r3, #4
   14514:	bne	14580 <__assert_fail@plt+0x2c04>
   14518:	mov	r1, #1
   1451c:	mvn	r3, #0
   14520:	cmp	r7, #0
   14524:	str	r1, [r4, #8]
   14528:	str	r3, [r4]
   1452c:	beq	1455c <__assert_fail@plt+0x2be0>
   14530:	add	ip, sp, #44	; 0x2c
   14534:	mov	r2, r7
   14538:	mov	r3, ip
   1453c:	add	r0, r4, #4
   14540:	str	ip, [sp, #8]
   14544:	bl	117b4 <__vasprintf_chk@plt>
   14548:	cmp	r0, #0
   1454c:	blt	145d4 <__assert_fail@plt+0x2c58>
   14550:	ldr	r3, [r4, #4]
   14554:	cmp	r3, #0
   14558:	beq	145d4 <__assert_fail@plt+0x2c58>
   1455c:	ldr	r2, [sp, #12]
   14560:	ldr	r3, [r6]
   14564:	mov	r0, r4
   14568:	cmp	r2, r3
   1456c:	bne	145e4 <__assert_fail@plt+0x2c68>
   14570:	add	sp, sp, #20
   14574:	pop	{r4, r5, r6, r7, lr}
   14578:	add	sp, sp, #16
   1457c:	bx	lr
   14580:	ldr	r3, [pc, #112]	; 145f8 <__assert_fail@plt+0x2c7c>
   14584:	ldr	r3, [r5, r3]
   14588:	ldr	r5, [r3]
   1458c:	bl	11730 <getpid@plt>
   14590:	ldr	r2, [pc, #100]	; 145fc <__assert_fail@plt+0x2c80>
   14594:	ldr	r3, [pc, #100]	; 14600 <__assert_fail@plt+0x2c84>
   14598:	add	r2, pc, r2
   1459c:	str	r2, [sp, #4]
   145a0:	ldr	r2, [pc, #92]	; 14604 <__assert_fail@plt+0x2c88>
   145a4:	add	r3, pc, r3
   145a8:	str	r3, [sp]
   145ac:	add	r2, pc, r2
   145b0:	mov	r1, #1
   145b4:	mov	r3, r0
   145b8:	mov	r0, r5
   145bc:	bl	11850 <__fprintf_chk@plt>
   145c0:	ldr	r1, [pc, #64]	; 14608 <__assert_fail@plt+0x2c8c>
   145c4:	mov	r0, r4
   145c8:	add	r1, pc, r1
   145cc:	bl	13fe0 <__assert_fail@plt+0x2664>
   145d0:	b	14518 <__assert_fail@plt+0x2b9c>
   145d4:	mov	r0, r4
   145d8:	bl	143c0 <__assert_fail@plt+0x2a44>
   145dc:	mov	r4, #0
   145e0:	b	1455c <__assert_fail@plt+0x2be0>
   145e4:	bl	11604 <__stack_chk_fail@plt>
   145e8:	andeq	r6, r1, ip, ror #18
   145ec:	muleq	r0, ip, r1
   145f0:	andeq	r1, r0, ip, lsl r0
   145f4:	andeq	r6, r1, r4, lsl fp
   145f8:	andeq	r0, r0, r0, lsr #3
   145fc:	andeq	r5, r0, r8, lsl #12
   14600:	andeq	r5, r0, r4, ror #11
   14604:	andeq	r5, r0, r4, ror #11
   14608:	andeq	r5, r0, r4, ror #11
   1460c:	ldr	r3, [r0]
   14610:	push	{r4, r5, r6, lr}
   14614:	cmp	r3, #0
   14618:	ldr	r6, [pc, #220]	; 146fc <__assert_fail@plt+0x2d80>
   1461c:	sub	sp, sp, #8
   14620:	add	r6, pc, r6
   14624:	bge	146dc <__assert_fail@plt+0x2d60>
   14628:	cmp	r1, #0
   1462c:	mov	r5, r0
   14630:	beq	146cc <__assert_fail@plt+0x2d50>
   14634:	mov	r0, r1
   14638:	bl	115f8 <strdup@plt>
   1463c:	subs	r4, r0, #0
   14640:	beq	146d4 <__assert_fail@plt+0x2d58>
   14644:	ldr	r0, [r5, #12]
   14648:	bl	11568 <free@plt>
   1464c:	ldr	r3, [pc, #172]	; 14700 <__assert_fail@plt+0x2d84>
   14650:	str	r4, [r5, #12]
   14654:	add	r3, pc, r3
   14658:	ldr	r0, [r3]
   1465c:	ands	r0, r0, #4
   14660:	bne	1466c <__assert_fail@plt+0x2cf0>
   14664:	add	sp, sp, #8
   14668:	pop	{r4, r5, r6, pc}
   1466c:	ldr	r3, [pc, #144]	; 14704 <__assert_fail@plt+0x2d88>
   14670:	ldr	r3, [r6, r3]
   14674:	ldr	r6, [r3]
   14678:	bl	11730 <getpid@plt>
   1467c:	ldr	r2, [pc, #132]	; 14708 <__assert_fail@plt+0x2d8c>
   14680:	ldr	r3, [pc, #132]	; 1470c <__assert_fail@plt+0x2d90>
   14684:	add	r2, pc, r2
   14688:	str	r2, [sp, #4]
   1468c:	ldr	r2, [pc, #124]	; 14710 <__assert_fail@plt+0x2d94>
   14690:	add	r3, pc, r3
   14694:	str	r3, [sp]
   14698:	add	r2, pc, r2
   1469c:	mov	r1, #1
   146a0:	mov	r3, r0
   146a4:	mov	r0, r6
   146a8:	bl	11850 <__fprintf_chk@plt>
   146ac:	ldr	r1, [pc, #96]	; 14714 <__assert_fail@plt+0x2d98>
   146b0:	mov	r0, r5
   146b4:	mov	r2, r4
   146b8:	add	r1, pc, r1
   146bc:	bl	13fe0 <__assert_fail@plt+0x2664>
   146c0:	mov	r0, #0
   146c4:	add	sp, sp, #8
   146c8:	pop	{r4, r5, r6, pc}
   146cc:	mov	r4, r1
   146d0:	b	14644 <__assert_fail@plt+0x2cc8>
   146d4:	mvn	r0, #11
   146d8:	b	14664 <__assert_fail@plt+0x2ce8>
   146dc:	ldr	r3, [pc, #52]	; 14718 <__assert_fail@plt+0x2d9c>
   146e0:	ldr	r1, [pc, #52]	; 1471c <__assert_fail@plt+0x2da0>
   146e4:	ldr	r0, [pc, #52]	; 14720 <__assert_fail@plt+0x2da4>
   146e8:	add	r3, pc, r3
   146ec:	mov	r2, #109	; 0x6d
   146f0:	add	r1, pc, r1
   146f4:	add	r0, pc, r0
   146f8:	bl	1197c <__assert_fail@plt>
   146fc:	andeq	r6, r1, ip, lsr #16
   14700:	andeq	r6, r1, r8, asr #19
   14704:	andeq	r0, r0, r0, lsr #3
   14708:	andeq	r5, r0, ip, lsl r5
   1470c:	strdeq	r5, [r0], -r8
   14710:	strdeq	r5, [r0], -r8
   14714:	andeq	r5, r0, r8, lsl r5
   14718:	andeq	r5, r0, r8, lsl r4
   1471c:	andeq	r5, r0, r4, asr #9
   14720:	andeq	r5, r0, ip, asr #9
   14724:	cmp	r0, #0
   14728:	ldrne	r0, [r0, #12]
   1472c:	bx	lr
   14730:	push	{r4, r5, r6, lr}
   14734:	subs	r5, r1, #0
   14738:	ldr	r6, [pc, #196]	; 14804 <__assert_fail@plt+0x2e88>
   1473c:	sub	sp, sp, #8
   14740:	mov	r4, r0
   14744:	add	r6, pc, r6
   14748:	beq	1475c <__assert_fail@plt+0x2de0>
   1474c:	mov	r0, r5
   14750:	bl	115f8 <strdup@plt>
   14754:	subs	r5, r0, #0
   14758:	beq	147fc <__assert_fail@plt+0x2e80>
   1475c:	ldr	r0, [r4]
   14760:	cmp	r0, #0
   14764:	blt	14774 <__assert_fail@plt+0x2df8>
   14768:	bl	1194c <close@plt>
   1476c:	mvn	r3, #0
   14770:	str	r3, [r4]
   14774:	ldr	r0, [r4, #4]
   14778:	bl	11568 <free@plt>
   1477c:	ldr	r3, [pc, #132]	; 14808 <__assert_fail@plt+0x2e8c>
   14780:	str	r5, [r4, #4]
   14784:	add	r3, pc, r3
   14788:	ldr	r3, [r3]
   1478c:	ands	r0, r3, #4
   14790:	bne	1479c <__assert_fail@plt+0x2e20>
   14794:	add	sp, sp, #8
   14798:	pop	{r4, r5, r6, pc}
   1479c:	ldr	r3, [pc, #104]	; 1480c <__assert_fail@plt+0x2e90>
   147a0:	ldr	r3, [r6, r3]
   147a4:	ldr	r6, [r3]
   147a8:	bl	11730 <getpid@plt>
   147ac:	ldr	r2, [pc, #92]	; 14810 <__assert_fail@plt+0x2e94>
   147b0:	ldr	r3, [pc, #92]	; 14814 <__assert_fail@plt+0x2e98>
   147b4:	add	r2, pc, r2
   147b8:	str	r2, [sp, #4]
   147bc:	ldr	r2, [pc, #84]	; 14818 <__assert_fail@plt+0x2e9c>
   147c0:	add	r3, pc, r3
   147c4:	str	r3, [sp]
   147c8:	add	r2, pc, r2
   147cc:	mov	r1, #1
   147d0:	mov	r3, r0
   147d4:	mov	r0, r6
   147d8:	bl	11850 <__fprintf_chk@plt>
   147dc:	ldr	r1, [pc, #56]	; 1481c <__assert_fail@plt+0x2ea0>
   147e0:	mov	r0, r4
   147e4:	mov	r2, r5
   147e8:	add	r1, pc, r1
   147ec:	bl	13fe0 <__assert_fail@plt+0x2664>
   147f0:	mov	r0, #0
   147f4:	add	sp, sp, #8
   147f8:	pop	{r4, r5, r6, pc}
   147fc:	mvn	r0, #11
   14800:	b	14794 <__assert_fail@plt+0x2e18>
   14804:	andeq	r6, r1, r8, lsl #14
   14808:	muleq	r1, r8, r8
   1480c:	andeq	r0, r0, r0, lsr #3
   14810:	andeq	r5, r0, ip, ror #7
   14814:	andeq	r5, r0, r8, asr #7
   14818:	andeq	r5, r0, r8, asr #7
   1481c:	strdeq	r5, [r0], -ip
   14820:	cmp	r0, #0
   14824:	ldrne	r0, [r0, #4]
   14828:	bx	lr
   1482c:	ldr	r3, [pc, #144]	; 148c4 <__assert_fail@plt+0x2f48>
   14830:	add	ip, r0, #4096	; 0x1000
   14834:	add	r3, pc, r3
   14838:	str	r1, [ip, #16]
   1483c:	ldr	r3, [r3]
   14840:	str	r2, [ip, #20]
   14844:	tst	r3, #4
   14848:	ldr	r3, [pc, #120]	; 148c8 <__assert_fail@plt+0x2f4c>
   1484c:	add	r3, pc, r3
   14850:	bne	1485c <__assert_fail@plt+0x2ee0>
   14854:	mov	r0, #0
   14858:	bx	lr
   1485c:	ldr	r2, [pc, #104]	; 148cc <__assert_fail@plt+0x2f50>
   14860:	push	{r4, r5, lr}
   14864:	sub	sp, sp, #12
   14868:	ldr	r3, [r3, r2]
   1486c:	mov	r4, r0
   14870:	ldr	r5, [r3]
   14874:	bl	11730 <getpid@plt>
   14878:	ldr	r2, [pc, #80]	; 148d0 <__assert_fail@plt+0x2f54>
   1487c:	ldr	r3, [pc, #80]	; 148d4 <__assert_fail@plt+0x2f58>
   14880:	add	r2, pc, r2
   14884:	str	r2, [sp, #4]
   14888:	ldr	r2, [pc, #72]	; 148d8 <__assert_fail@plt+0x2f5c>
   1488c:	add	r3, pc, r3
   14890:	str	r3, [sp]
   14894:	add	r2, pc, r2
   14898:	mov	r1, #1
   1489c:	mov	r3, r0
   148a0:	mov	r0, r5
   148a4:	bl	11850 <__fprintf_chk@plt>
   148a8:	ldr	r1, [pc, #44]	; 148dc <__assert_fail@plt+0x2f60>
   148ac:	mov	r0, r4
   148b0:	add	r1, pc, r1
   148b4:	bl	13fe0 <__assert_fail@plt+0x2664>
   148b8:	mov	r0, #0
   148bc:	add	sp, sp, #12
   148c0:	pop	{r4, r5, pc}
   148c4:	andeq	r6, r1, r8, ror #15
   148c8:	andeq	r6, r1, r0, lsl #12
   148cc:	andeq	r0, r0, r0, lsr #3
   148d0:	andeq	r5, r0, r0, lsr #6
   148d4:	strdeq	r5, [r0], -ip
   148d8:	strdeq	r5, [r0], -ip
   148dc:	andeq	r5, r0, r4, asr #6
   148e0:	cmp	r0, #0
   148e4:	addne	r0, r0, #4096	; 0x1000
   148e8:	ldrne	r0, [r0, #16]
   148ec:	bx	lr
   148f0:	add	r3, r0, #4096	; 0x1000
   148f4:	mov	r0, #0
   148f8:	str	r1, [r3, #24]
   148fc:	bx	lr
   14900:	push	{r4, r5, r6, lr}
   14904:	subs	r4, r0, #0
   14908:	ldr	r5, [pc, #284]	; 14a2c <__assert_fail@plt+0x30b0>
   1490c:	sub	sp, sp, #8
   14910:	add	r5, pc, r5
   14914:	beq	14a08 <__assert_fail@plt+0x308c>
   14918:	ldr	r3, [r4, #4]
   1491c:	cmp	r3, #0
   14920:	beq	149e4 <__assert_fail@plt+0x3068>
   14924:	ldr	r3, [r4]
   14928:	cmp	r3, #0
   1492c:	blt	1493c <__assert_fail@plt+0x2fc0>
   14930:	mov	r0, r3
   14934:	add	sp, sp, #8
   14938:	pop	{r4, r5, r6, pc}
   1493c:	bl	1412c <__assert_fail@plt+0x27b0>
   14940:	subs	r6, r0, #0
   14944:	beq	149d4 <__assert_fail@plt+0x3058>
   14948:	ldr	r3, [pc, #224]	; 14a30 <__assert_fail@plt+0x30b4>
   1494c:	add	r3, pc, r3
   14950:	ldr	r3, [r3]
   14954:	tst	r3, #4
   14958:	bne	1497c <__assert_fail@plt+0x3000>
   1495c:	mov	r0, r6
   14960:	mov	r1, #524288	; 0x80000
   14964:	bl	11694 <open64@plt>
   14968:	mov	r3, r0
   1496c:	str	r0, [r4]
   14970:	mov	r0, r3
   14974:	add	sp, sp, #8
   14978:	pop	{r4, r5, r6, pc}
   1497c:	ldr	r3, [pc, #176]	; 14a34 <__assert_fail@plt+0x30b8>
   14980:	ldr	r3, [r5, r3]
   14984:	ldr	r5, [r3]
   14988:	bl	11730 <getpid@plt>
   1498c:	ldr	r2, [pc, #164]	; 14a38 <__assert_fail@plt+0x30bc>
   14990:	ldr	r3, [pc, #164]	; 14a3c <__assert_fail@plt+0x30c0>
   14994:	add	r2, pc, r2
   14998:	str	r2, [sp, #4]
   1499c:	ldr	r2, [pc, #156]	; 14a40 <__assert_fail@plt+0x30c4>
   149a0:	add	r3, pc, r3
   149a4:	str	r3, [sp]
   149a8:	add	r2, pc, r2
   149ac:	mov	r1, #1
   149b0:	mov	r3, r0
   149b4:	mov	r0, r5
   149b8:	bl	11850 <__fprintf_chk@plt>
   149bc:	ldr	r1, [pc, #128]	; 14a44 <__assert_fail@plt+0x30c8>
   149c0:	mov	r2, r6
   149c4:	add	r1, pc, r1
   149c8:	mov	r0, r4
   149cc:	bl	13fe0 <__assert_fail@plt+0x2664>
   149d0:	b	1495c <__assert_fail@plt+0x2fe0>
   149d4:	bl	11790 <__errno_location@plt>
   149d8:	ldr	r3, [r0]
   149dc:	rsb	r3, r3, #0
   149e0:	b	14930 <__assert_fail@plt+0x2fb4>
   149e4:	ldr	r3, [pc, #92]	; 14a48 <__assert_fail@plt+0x30cc>
   149e8:	ldr	r1, [pc, #92]	; 14a4c <__assert_fail@plt+0x30d0>
   149ec:	ldr	r0, [pc, #92]	; 14a50 <__assert_fail@plt+0x30d4>
   149f0:	add	r3, pc, r3
   149f4:	mov	r2, #201	; 0xc9
   149f8:	add	r3, r3, #20
   149fc:	add	r1, pc, r1
   14a00:	add	r0, pc, r0
   14a04:	bl	1197c <__assert_fail@plt>
   14a08:	ldr	r3, [pc, #68]	; 14a54 <__assert_fail@plt+0x30d8>
   14a0c:	ldr	r1, [pc, #68]	; 14a58 <__assert_fail@plt+0x30dc>
   14a10:	ldr	r0, [pc, #68]	; 14a5c <__assert_fail@plt+0x30e0>
   14a14:	add	r3, pc, r3
   14a18:	mov	r2, #200	; 0xc8
   14a1c:	add	r3, r3, #20
   14a20:	add	r1, pc, r1
   14a24:	add	r0, pc, r0
   14a28:	bl	1197c <__assert_fail@plt>
   14a2c:	andeq	r6, r1, ip, lsr r5
   14a30:	ldrdeq	r6, [r1], -r0
   14a34:	andeq	r0, r0, r0, lsr #3
   14a38:	andeq	r5, r0, ip, lsl #4
   14a3c:	andeq	r5, r0, r8, ror #3
   14a40:	andeq	r5, r0, r8, ror #3
   14a44:	andeq	r5, r0, r4, asr r2
   14a48:	andeq	r5, r0, r0, lsl r1
   14a4c:			; <UNDEFINED> instruction: 0x000051b8
   14a50:	andeq	r5, r0, r8, lsl #4
   14a54:	andeq	r5, r0, ip, ror #1
   14a58:	muleq	r0, r4, r1
   14a5c:	andeq	r5, r0, r0, ror #3
   14a60:	push	{r3}		; (str r3, [sp, #-4]!)
   14a64:	ldr	r3, [pc, #340]	; 14bc0 <__assert_fail@plt+0x3244>
   14a68:	ldr	ip, [pc, #340]	; 14bc4 <__assert_fail@plt+0x3248>
   14a6c:	add	r3, pc, r3
   14a70:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a74:	sub	sp, sp, #24
   14a78:	ldr	r8, [r3, ip]
   14a7c:	ldr	r7, [sp, #52]	; 0x34
   14a80:	mov	r6, r2
   14a84:	ldr	r2, [r8]
   14a88:	cmp	r7, #0
   14a8c:	mov	r4, r1
   14a90:	str	r2, [sp, #20]
   14a94:	beq	14b80 <__assert_fail@plt+0x3204>
   14a98:	add	r3, sp, #56	; 0x38
   14a9c:	ldr	r5, [r0, #4]
   14aa0:	mov	r1, r7
   14aa4:	mov	r2, r3
   14aa8:	mov	r9, r0
   14aac:	str	r3, [sp, #16]
   14ab0:	bl	141d4 <__assert_fail@plt+0x2858>
   14ab4:	cmp	r5, #0
   14ab8:	beq	14ac8 <__assert_fail@plt+0x314c>
   14abc:	ldrsb	r3, [r5]
   14ac0:	cmp	r3, #47	; 0x2f
   14ac4:	addeq	r5, r5, #1
   14ac8:	cmp	r0, #0
   14acc:	beq	14adc <__assert_fail@plt+0x3160>
   14ad0:	ldrsb	r3, [r0]
   14ad4:	cmp	r3, #47	; 0x2f
   14ad8:	addeq	r0, r0, #1
   14adc:	ldr	r2, [r9, #12]
   14ae0:	cmp	r2, #0
   14ae4:	beq	14b6c <__assert_fail@plt+0x31f0>
   14ae8:	cmp	r5, #0
   14aec:	beq	14b58 <__assert_fail@plt+0x31dc>
   14af0:	cmp	r0, #0
   14af4:	beq	14b4c <__assert_fail@plt+0x31d0>
   14af8:	ldr	r3, [pc, #200]	; 14bc8 <__assert_fail@plt+0x324c>
   14afc:	str	r0, [sp, #12]
   14b00:	add	r3, pc, r3
   14b04:	stmib	sp, {r2, r5}
   14b08:	str	r3, [sp]
   14b0c:	mov	r2, #1
   14b10:	mvn	r3, #0
   14b14:	mov	r1, r6
   14b18:	mov	r0, r4
   14b1c:	bl	11964 <__snprintf_chk@plt>
   14b20:	cmp	r0, r6
   14b24:	bcs	14ba8 <__assert_fail@plt+0x322c>
   14b28:	ldr	r2, [sp, #20]
   14b2c:	ldr	r3, [r8]
   14b30:	mov	r0, r4
   14b34:	cmp	r2, r3
   14b38:	bne	14bbc <__assert_fail@plt+0x3240>
   14b3c:	add	sp, sp, #24
   14b40:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14b44:	add	sp, sp, #4
   14b48:	bx	lr
   14b4c:	ldr	r0, [pc, #120]	; 14bcc <__assert_fail@plt+0x3250>
   14b50:	add	r0, pc, r0
   14b54:	b	14af8 <__assert_fail@plt+0x317c>
   14b58:	ldr	r5, [pc, #112]	; 14bd0 <__assert_fail@plt+0x3254>
   14b5c:	cmp	r0, #0
   14b60:	add	r5, pc, r5
   14b64:	bne	14af8 <__assert_fail@plt+0x317c>
   14b68:	b	14b4c <__assert_fail@plt+0x31d0>
   14b6c:	ldr	r2, [pc, #96]	; 14bd4 <__assert_fail@plt+0x3258>
   14b70:	cmp	r5, #0
   14b74:	add	r2, pc, r2
   14b78:	bne	14af0 <__assert_fail@plt+0x3174>
   14b7c:	b	14b58 <__assert_fail@plt+0x31dc>
   14b80:	bl	1412c <__assert_fail@plt+0x27b0>
   14b84:	subs	r1, r0, #0
   14b88:	moveq	r4, r1
   14b8c:	beq	14b28 <__assert_fail@plt+0x31ac>
   14b90:	mov	r2, r6
   14b94:	add	r6, r4, r6
   14b98:	mov	r0, r4
   14b9c:	bl	117f0 <strncpy@plt>
   14ba0:	strb	r7, [r6, #-1]
   14ba4:	b	14b28 <__assert_fail@plt+0x31ac>
   14ba8:	bl	11790 <__errno_location@plt>
   14bac:	mov	r3, #36	; 0x24
   14bb0:	mov	r4, #0
   14bb4:	str	r3, [r0]
   14bb8:	b	14b28 <__assert_fail@plt+0x31ac>
   14bbc:	bl	11604 <__stack_chk_fail@plt>
   14bc0:	andeq	r6, r1, r0, ror #7
   14bc4:	muleq	r0, ip, r1
   14bc8:	andeq	r5, r0, ip, lsr #2
   14bcc:	andeq	r5, r0, r4, lsr r0
   14bd0:	andeq	r5, r0, r4, lsr #32
   14bd4:	andeq	r5, r0, r0, lsl r0
   14bd8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14bdc:	sub	sp, sp, #20
   14be0:	ldr	r5, [pc, #296]	; 14d10 <__assert_fail@plt+0x3394>
   14be4:	ldr	r3, [pc, #296]	; 14d14 <__assert_fail@plt+0x3398>
   14be8:	add	r5, pc, r5
   14bec:	mov	r8, r1
   14bf0:	ldr	r6, [r5, r3]
   14bf4:	mov	r7, r2
   14bf8:	mov	r9, r0
   14bfc:	ldr	r3, [r6]
   14c00:	str	r3, [sp, #12]
   14c04:	bl	14900 <__assert_fail@plt+0x2f84>
   14c08:	subs	r4, r0, #0
   14c0c:	str	r0, [sp, #8]
   14c10:	blt	14c44 <__assert_fail@plt+0x32c8>
   14c14:	ldr	r3, [pc, #252]	; 14d18 <__assert_fail@plt+0x339c>
   14c18:	add	r3, pc, r3
   14c1c:	ldr	r3, [r3]
   14c20:	tst	r3, #4
   14c24:	bne	14cb0 <__assert_fail@plt+0x3334>
   14c28:	mov	r0, r4
   14c2c:	mov	r3, #0
   14c30:	mov	r2, r8
   14c34:	mov	r1, r7
   14c38:	bl	1158c <faccessat@plt>
   14c3c:	subs	r4, r0, #0
   14c40:	bne	14c60 <__assert_fail@plt+0x32e4>
   14c44:	ldr	r2, [sp, #12]
   14c48:	ldr	r3, [r6]
   14c4c:	mov	r0, r4
   14c50:	cmp	r2, r3
   14c54:	bne	14d0c <__assert_fail@plt+0x3390>
   14c58:	add	sp, sp, #20
   14c5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14c60:	bl	11790 <__errno_location@plt>
   14c64:	ldr	r3, [r0]
   14c68:	cmp	r3, #2
   14c6c:	bne	14c44 <__assert_fail@plt+0x32c8>
   14c70:	add	r3, r9, #4096	; 0x1000
   14c74:	ldr	r3, [r3, #24]
   14c78:	cmp	r3, #0
   14c7c:	beq	14c44 <__assert_fail@plt+0x32c8>
   14c80:	mov	r0, r9
   14c84:	add	r2, sp, #8
   14c88:	mov	r1, r7
   14c8c:	blx	r3
   14c90:	subs	r3, r0, #0
   14c94:	bne	14c44 <__assert_fail@plt+0x32c8>
   14c98:	mov	r2, r8
   14c9c:	mov	r1, r7
   14ca0:	ldr	r0, [sp, #8]
   14ca4:	bl	1158c <faccessat@plt>
   14ca8:	mov	r4, r0
   14cac:	b	14c44 <__assert_fail@plt+0x32c8>
   14cb0:	ldr	r3, [pc, #100]	; 14d1c <__assert_fail@plt+0x33a0>
   14cb4:	ldr	r3, [r5, r3]
   14cb8:	ldr	r4, [r3]
   14cbc:	bl	11730 <getpid@plt>
   14cc0:	ldr	r2, [pc, #88]	; 14d20 <__assert_fail@plt+0x33a4>
   14cc4:	ldr	r3, [pc, #88]	; 14d24 <__assert_fail@plt+0x33a8>
   14cc8:	add	r2, pc, r2
   14ccc:	str	r2, [sp, #4]
   14cd0:	ldr	r2, [pc, #80]	; 14d28 <__assert_fail@plt+0x33ac>
   14cd4:	add	r3, pc, r3
   14cd8:	str	r3, [sp]
   14cdc:	add	r2, pc, r2
   14ce0:	mov	r1, #1
   14ce4:	mov	r3, r0
   14ce8:	mov	r0, r4
   14cec:	bl	11850 <__fprintf_chk@plt>
   14cf0:	ldr	r1, [pc, #52]	; 14d2c <__assert_fail@plt+0x33b0>
   14cf4:	mov	r2, r7
   14cf8:	add	r1, pc, r1
   14cfc:	mov	r0, r9
   14d00:	bl	13fe0 <__assert_fail@plt+0x2664>
   14d04:	ldr	r4, [sp, #8]
   14d08:	b	14c28 <__assert_fail@plt+0x32ac>
   14d0c:	bl	11604 <__stack_chk_fail@plt>
   14d10:	andeq	r6, r1, r4, ror #4
   14d14:	muleq	r0, ip, r1
   14d18:	andeq	r6, r1, r4, lsl #8
   14d1c:	andeq	r0, r0, r0, lsr #3
   14d20:	ldrdeq	r4, [r0], -r8
   14d24:			; <UNDEFINED> instruction: 0x00004eb4
   14d28:			; <UNDEFINED> instruction: 0x00004eb4
   14d2c:	andeq	r4, r0, r0, asr #30
   14d30:	push	{r2, r3}
   14d34:	ldr	r3, [pc, #104]	; 14da4 <__assert_fail@plt+0x3428>
   14d38:	ldr	r2, [pc, #104]	; 14da8 <__assert_fail@plt+0x342c>
   14d3c:	add	r3, pc, r3
   14d40:	push	{r4, r5, r6, lr}
   14d44:	sub	sp, sp, #8
   14d48:	ldr	r4, [r3, r2]
   14d4c:	add	ip, sp, #28
   14d50:	mov	r2, ip
   14d54:	ldr	r3, [r4]
   14d58:	mov	r6, r1
   14d5c:	ldr	r1, [sp, #24]
   14d60:	str	r3, [sp, #4]
   14d64:	mov	r5, r0
   14d68:	str	ip, [sp]
   14d6c:	bl	141d4 <__assert_fail@plt+0x2858>
   14d70:	mov	r1, r6
   14d74:	mov	r2, r0
   14d78:	mov	r0, r5
   14d7c:	bl	14bd8 <__assert_fail@plt+0x325c>
   14d80:	ldr	r2, [sp, #4]
   14d84:	ldr	r3, [r4]
   14d88:	cmp	r2, r3
   14d8c:	bne	14da0 <__assert_fail@plt+0x3424>
   14d90:	add	sp, sp, #8
   14d94:	pop	{r4, r5, r6, lr}
   14d98:	add	sp, sp, #8
   14d9c:	bx	lr
   14da0:	bl	11604 <__stack_chk_fail@plt>
   14da4:	andeq	r6, r1, r0, lsl r1
   14da8:	muleq	r0, ip, r1
   14dac:	push	{r4, r5, r6, r7, r8, r9, lr}
   14db0:	sub	sp, sp, #20
   14db4:	ldr	r5, [pc, #536]	; 14fd4 <__assert_fail@plt+0x3658>
   14db8:	ldr	r3, [pc, #536]	; 14fd8 <__assert_fail@plt+0x365c>
   14dbc:	add	r5, pc, r5
   14dc0:	subs	r8, r0, #0
   14dc4:	ldr	r6, [r5, r3]
   14dc8:	mov	r7, r2
   14dcc:	ldr	r3, [r6]
   14dd0:	str	r3, [sp, #12]
   14dd4:	beq	14e34 <__assert_fail@plt+0x34b8>
   14dd8:	mov	r9, r1
   14ddc:	bl	14900 <__assert_fail@plt+0x2f84>
   14de0:	cmp	r0, #0
   14de4:	mov	r4, r0
   14de8:	str	r0, [sp, #8]
   14dec:	blt	14e18 <__assert_fail@plt+0x349c>
   14df0:	mov	r2, r9
   14df4:	mov	r1, r7
   14df8:	bl	115b0 <__openat64_2@plt>
   14dfc:	subs	r4, r0, #0
   14e00:	blt	14ea8 <__assert_fail@plt+0x352c>
   14e04:	ldr	r3, [pc, #464]	; 14fdc <__assert_fail@plt+0x3660>
   14e08:	add	r3, pc, r3
   14e0c:	ldr	r3, [r3]
   14e10:	tst	r3, #4
   14e14:	bne	14f60 <__assert_fail@plt+0x35e4>
   14e18:	ldr	r2, [sp, #12]
   14e1c:	ldr	r3, [r6]
   14e20:	mov	r0, r4
   14e24:	cmp	r2, r3
   14e28:	bne	14fc8 <__assert_fail@plt+0x364c>
   14e2c:	add	sp, sp, #20
   14e30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e34:	mov	r0, r2
   14e38:	bl	11784 <__open64_2@plt>
   14e3c:	ldr	r3, [pc, #412]	; 14fe0 <__assert_fail@plt+0x3664>
   14e40:	add	r3, pc, r3
   14e44:	ldr	r3, [r3]
   14e48:	tst	r3, #4
   14e4c:	mov	r4, r0
   14e50:	beq	14e18 <__assert_fail@plt+0x349c>
   14e54:	ldr	r3, [pc, #392]	; 14fe4 <__assert_fail@plt+0x3668>
   14e58:	ldr	r3, [r5, r3]
   14e5c:	ldr	r5, [r3]
   14e60:	bl	11730 <getpid@plt>
   14e64:	ldr	r2, [pc, #380]	; 14fe8 <__assert_fail@plt+0x366c>
   14e68:	ldr	r3, [pc, #380]	; 14fec <__assert_fail@plt+0x3670>
   14e6c:	add	r2, pc, r2
   14e70:	str	r2, [sp, #4]
   14e74:	ldr	r2, [pc, #372]	; 14ff0 <__assert_fail@plt+0x3674>
   14e78:	add	r3, pc, r3
   14e7c:	str	r3, [sp]
   14e80:	add	r2, pc, r2
   14e84:	mov	r1, #1
   14e88:	mov	r3, r0
   14e8c:	mov	r0, r5
   14e90:	bl	11850 <__fprintf_chk@plt>
   14e94:	ldr	r0, [pc, #344]	; 14ff4 <__assert_fail@plt+0x3678>
   14e98:	mov	r1, r7
   14e9c:	add	r0, pc, r0
   14ea0:	bl	140ac <__assert_fail@plt+0x2730>
   14ea4:	b	14e18 <__assert_fail@plt+0x349c>
   14ea8:	bl	11790 <__errno_location@plt>
   14eac:	ldr	r3, [r0]
   14eb0:	cmp	r3, #2
   14eb4:	bne	14e04 <__assert_fail@plt+0x3488>
   14eb8:	add	r3, r8, #4096	; 0x1000
   14ebc:	ldr	r3, [r3, #24]
   14ec0:	cmp	r3, #0
   14ec4:	beq	14e04 <__assert_fail@plt+0x3488>
   14ec8:	add	r2, sp, #8
   14ecc:	mov	r1, r7
   14ed0:	mov	r0, r8
   14ed4:	blx	r3
   14ed8:	cmp	r0, #0
   14edc:	bne	14e04 <__assert_fail@plt+0x3488>
   14ee0:	mov	r2, r9
   14ee4:	mov	r1, r7
   14ee8:	ldr	r0, [sp, #8]
   14eec:	bl	115b0 <__openat64_2@plt>
   14ef0:	ldr	r3, [pc, #256]	; 14ff8 <__assert_fail@plt+0x367c>
   14ef4:	add	r3, pc, r3
   14ef8:	ldr	r3, [r3]
   14efc:	tst	r3, #4
   14f00:	mov	r9, r0
   14f04:	beq	14fcc <__assert_fail@plt+0x3650>
   14f08:	ldr	r3, [pc, #212]	; 14fe4 <__assert_fail@plt+0x3668>
   14f0c:	ldr	r3, [r5, r3]
   14f10:	ldr	r5, [r3]
   14f14:	bl	11730 <getpid@plt>
   14f18:	ldr	r2, [pc, #220]	; 14ffc <__assert_fail@plt+0x3680>
   14f1c:	ldr	r3, [pc, #220]	; 15000 <__assert_fail@plt+0x3684>
   14f20:	add	r2, pc, r2
   14f24:	str	r2, [sp, #4]
   14f28:	ldr	r2, [pc, #212]	; 15004 <__assert_fail@plt+0x3688>
   14f2c:	add	r3, pc, r3
   14f30:	str	r3, [sp]
   14f34:	add	r2, pc, r2
   14f38:	mov	r1, #1
   14f3c:	mov	r3, r0
   14f40:	mov	r0, r5
   14f44:	bl	11850 <__fprintf_chk@plt>
   14f48:	ldr	r3, [pc, #184]	; 15008 <__assert_fail@plt+0x368c>
   14f4c:	cmp	r4, r9
   14f50:	add	r3, pc, r3
   14f54:	ldrne	r3, [pc, #176]	; 1500c <__assert_fail@plt+0x3690>
   14f58:	addne	r3, pc, r3
   14f5c:	b	14fac <__assert_fail@plt+0x3630>
   14f60:	ldr	r3, [pc, #124]	; 14fe4 <__assert_fail@plt+0x3668>
   14f64:	mov	r9, r4
   14f68:	ldr	r3, [r5, r3]
   14f6c:	ldr	r4, [r3]
   14f70:	bl	11730 <getpid@plt>
   14f74:	ldr	r2, [pc, #148]	; 15010 <__assert_fail@plt+0x3694>
   14f78:	ldr	r3, [pc, #148]	; 15014 <__assert_fail@plt+0x3698>
   14f7c:	add	r2, pc, r2
   14f80:	str	r2, [sp, #4]
   14f84:	ldr	r2, [pc, #140]	; 15018 <__assert_fail@plt+0x369c>
   14f88:	add	r3, pc, r3
   14f8c:	str	r3, [sp]
   14f90:	add	r2, pc, r2
   14f94:	mov	r1, #1
   14f98:	mov	r3, r0
   14f9c:	mov	r0, r4
   14fa0:	bl	11850 <__fprintf_chk@plt>
   14fa4:	ldr	r3, [pc, #112]	; 1501c <__assert_fail@plt+0x36a0>
   14fa8:	add	r3, pc, r3
   14fac:	ldr	r1, [pc, #108]	; 15020 <__assert_fail@plt+0x36a4>
   14fb0:	mov	r2, r7
   14fb4:	mov	r0, r8
   14fb8:	add	r1, pc, r1
   14fbc:	mov	r4, r9
   14fc0:	bl	13fe0 <__assert_fail@plt+0x2664>
   14fc4:	b	14e18 <__assert_fail@plt+0x349c>
   14fc8:	bl	11604 <__stack_chk_fail@plt>
   14fcc:	mov	r4, r0
   14fd0:	b	14e18 <__assert_fail@plt+0x349c>
   14fd4:	muleq	r1, r0, r0
   14fd8:	muleq	r0, ip, r1
   14fdc:	andeq	r6, r1, r4, lsl r2
   14fe0:	ldrdeq	r6, [r1], -ip
   14fe4:	andeq	r0, r0, r0, lsr #3
   14fe8:	andeq	r4, r0, r4, lsr sp
   14fec:	andeq	r4, r0, r0, lsl sp
   14ff0:	andeq	r4, r0, r0, lsl sp
   14ff4:			; <UNDEFINED> instruction: 0x00004dbc
   14ff8:	andeq	r6, r1, r8, lsr #2
   14ffc:	andeq	r4, r0, r0, lsl #25
   15000:	andeq	r4, r0, ip, asr ip
   15004:	andeq	r4, r0, ip, asr ip
   15008:	andeq	r4, r0, r4, lsr ip
   1500c:	strdeq	r4, [r0], -r0
   15010:	andeq	r4, r0, r4, lsr #24
   15014:	andeq	r4, r0, r0, lsl #24
   15018:	andeq	r4, r0, r0, lsl #24
   1501c:	ldrdeq	r4, [r0], -ip
   15020:			; <UNDEFINED> instruction: 0x00004cb0
   15024:	mov	ip, r2
   15028:	push	{r4, r5, r6, lr}
   1502c:	mov	r2, r3
   15030:	mov	r5, r1
   15034:	mov	r1, ip
   15038:	mov	r4, r0
   1503c:	bl	141d4 <__assert_fail@plt+0x2858>
   15040:	subs	r2, r0, #0
   15044:	beq	15058 <__assert_fail@plt+0x36dc>
   15048:	mov	r1, r5
   1504c:	mov	r0, r4
   15050:	pop	{r4, r5, r6, lr}
   15054:	b	14dac <__assert_fail@plt+0x3430>
   15058:	bl	11790 <__errno_location@plt>
   1505c:	ldr	r0, [r0]
   15060:	rsb	r0, r0, #0
   15064:	pop	{r4, r5, r6, pc}
   15068:	push	{r2, r3}
   1506c:	ldr	r2, [pc, #80]	; 150c4 <__assert_fail@plt+0x3748>
   15070:	ldr	ip, [pc, #80]	; 150c8 <__assert_fail@plt+0x374c>
   15074:	add	r2, pc, r2
   15078:	push	{r4, lr}
   1507c:	sub	sp, sp, #8
   15080:	ldr	r4, [r2, ip]
   15084:	add	lr, sp, #20
   15088:	mov	r3, lr
   1508c:	ldr	ip, [r4]
   15090:	ldr	r2, [sp, #16]
   15094:	str	lr, [sp]
   15098:	str	ip, [sp, #4]
   1509c:	bl	15024 <__assert_fail@plt+0x36a8>
   150a0:	ldr	r2, [sp, #4]
   150a4:	ldr	r3, [r4]
   150a8:	cmp	r2, r3
   150ac:	bne	150c0 <__assert_fail@plt+0x3744>
   150b0:	add	sp, sp, #8
   150b4:	pop	{r4, lr}
   150b8:	add	sp, sp, #8
   150bc:	bx	lr
   150c0:	bl	11604 <__stack_chk_fail@plt>
   150c4:	ldrdeq	r5, [r1], -r8
   150c8:	muleq	r0, ip, r1
   150cc:	push	{r4, r5, r6, r7, r8, lr}
   150d0:	subs	r4, r1, #0
   150d4:	beq	15190 <__assert_fail@plt+0x3814>
   150d8:	ldrsb	r3, [r4]
   150dc:	cmp	r3, #0
   150e0:	beq	15198 <__assert_fail@plt+0x381c>
   150e4:	ldr	r5, [pc, #180]	; 151a0 <__assert_fail@plt+0x3824>
   150e8:	ldr	r7, [pc, #180]	; 151a4 <__assert_fail@plt+0x3828>
   150ec:	ldr	lr, [pc, #180]	; 151a8 <__assert_fail@plt+0x382c>
   150f0:	ldr	r6, [pc, #180]	; 151ac <__assert_fail@plt+0x3830>
   150f4:	mov	ip, r4
   150f8:	mov	r1, #0
   150fc:	b	1512c <__assert_fail@plt+0x37b0>
   15100:	cmp	r3, #119	; 0x77
   15104:	beq	15160 <__assert_fail@plt+0x37e4>
   15108:	cmp	r3, #97	; 0x61
   1510c:	beq	15174 <__assert_fail@plt+0x37f8>
   15110:	cmp	r3, #101	; 0x65
   15114:	orreq	r1, r1, #524288	; 0x80000
   15118:	cmn	ip, #1
   1511c:	beq	15148 <__assert_fail@plt+0x37cc>
   15120:	ldrsb	r3, [ip, #1]!
   15124:	cmp	r3, #0
   15128:	beq	15148 <__assert_fail@plt+0x37cc>
   1512c:	cmp	r3, #114	; 0x72
   15130:	bne	15100 <__assert_fail@plt+0x3784>
   15134:	ldrsb	r3, [ip, #1]
   15138:	cmp	r3, #43	; 0x2b
   1513c:	orreq	r1, r1, #2
   15140:	cmn	ip, #1
   15144:	bne	15120 <__assert_fail@plt+0x37a4>
   15148:	bl	14dac <__assert_fail@plt+0x3430>
   1514c:	cmp	r0, #0
   15150:	blt	15188 <__assert_fail@plt+0x380c>
   15154:	mov	r1, r4
   15158:	pop	{r4, r5, r6, r7, r8, lr}
   1515c:	b	114d8 <fdopen@plt>
   15160:	ldrsb	r3, [ip, #1]
   15164:	cmp	r3, #43	; 0x2b
   15168:	orreq	r1, r1, r6
   1516c:	orrne	r1, r1, lr
   15170:	b	15118 <__assert_fail@plt+0x379c>
   15174:	ldrsb	r3, [ip, #1]
   15178:	cmp	r3, #43	; 0x2b
   1517c:	orreq	r1, r1, r7
   15180:	orrne	r1, r1, r5
   15184:	b	15118 <__assert_fail@plt+0x379c>
   15188:	mov	r0, #0
   1518c:	pop	{r4, r5, r6, r7, r8, pc}
   15190:	mov	r1, r4
   15194:	b	15148 <__assert_fail@plt+0x37cc>
   15198:	mov	r1, r3
   1519c:	b	15148 <__assert_fail@plt+0x37cc>
   151a0:	andeq	r0, r0, r1, lsl #8
   151a4:	andeq	r0, r0, r2, lsl #8
   151a8:	andeq	r0, r0, r1, lsl #4
   151ac:	andeq	r0, r0, r2, lsl #4
   151b0:	mov	ip, r2
   151b4:	push	{r4, r5, r6, lr}
   151b8:	mov	r2, r3
   151bc:	mov	r5, r1
   151c0:	mov	r1, ip
   151c4:	mov	r4, r0
   151c8:	bl	141d4 <__assert_fail@plt+0x2858>
   151cc:	subs	r2, r0, #0
   151d0:	popeq	{r4, r5, r6, pc}
   151d4:	mov	r1, r5
   151d8:	mov	r0, r4
   151dc:	pop	{r4, r5, r6, lr}
   151e0:	b	150cc <__assert_fail@plt+0x3750>
   151e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e8:	add	fp, sp, #32
   151ec:	ldr	lr, [pc, #300]	; 15320 <__assert_fail@plt+0x39a4>
   151f0:	ldr	ip, [pc, #300]	; 15324 <__assert_fail@plt+0x39a8>
   151f4:	add	lr, pc, lr
   151f8:	sub	sp, sp, #20
   151fc:	ldr	ip, [lr, ip]
   15200:	rsb	r6, r2, r2, lsl #3
   15204:	mov	r7, r1
   15208:	mov	r4, r2
   1520c:	mov	r1, lr
   15210:	add	r2, r6, #7
   15214:	ldr	r1, [pc, #268]	; 15328 <__assert_fail@plt+0x39ac>
   15218:	str	ip, [fp, #-48]	; 0xffffffd0
   1521c:	bic	r2, r2, #7
   15220:	ldr	ip, [ip]
   15224:	mov	r8, #0
   15228:	sub	sp, sp, r2
   1522c:	mov	r9, r3
   15230:	str	r8, [r7]
   15234:	ldrd	r2, [fp, #4]
   15238:	add	r1, pc, r1
   1523c:	str	ip, [fp, #-40]	; 0xffffffd8
   15240:	bl	151b0 <__assert_fail@plt+0x3834>
   15244:	subs	r5, r0, #0
   15248:	beq	15304 <__assert_fail@plt+0x3988>
   1524c:	mov	r1, r6
   15250:	mov	r2, r5
   15254:	mov	r0, sp
   15258:	bl	11574 <fgets@plt>
   1525c:	cmp	r0, #0
   15260:	beq	15304 <__assert_fail@plt+0x3988>
   15264:	mov	r0, r5
   15268:	bl	1185c <fclose@plt>
   1526c:	mov	r0, sp
   15270:	bl	11760 <strlen@plt>
   15274:	mov	r2, #0
   15278:	sub	r1, fp, #44	; 0x2c
   1527c:	mov	sl, sp
   15280:	sub	r0, r0, #1
   15284:	ldrsb	r3, [sp, r0]
   15288:	cmp	r3, #10
   1528c:	strbeq	r8, [sp, r0]
   15290:	mov	r0, r4
   15294:	bl	18e64 <__assert_fail@plt+0x74e8>
   15298:	cmp	r0, #0
   1529c:	str	r0, [r7]
   152a0:	beq	15314 <__assert_fail@plt+0x3998>
   152a4:	cmp	r9, #0
   152a8:	mov	r1, r0
   152ac:	ldr	r2, [fp, #-44]	; 0xffffffd4
   152b0:	mov	r0, sl
   152b4:	bne	152e4 <__assert_fail@plt+0x3968>
   152b8:	bl	19294 <__assert_fail@plt+0x7918>
   152bc:	cmp	r0, #0
   152c0:	bne	152f4 <__assert_fail@plt+0x3978>
   152c4:	mov	r0, #0
   152c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   152cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   152d0:	ldr	r3, [r3]
   152d4:	cmp	r2, r3
   152d8:	bne	1531c <__assert_fail@plt+0x39a0>
   152dc:	sub	sp, fp, #32
   152e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152e4:	mov	r3, #0
   152e8:	bl	193ec <__assert_fail@plt+0x7a70>
   152ec:	cmp	r0, #0
   152f0:	beq	152c4 <__assert_fail@plt+0x3948>
   152f4:	ldr	r0, [r7]
   152f8:	bl	18ea8 <__assert_fail@plt+0x752c>
   152fc:	mvn	r0, #21
   15300:	b	152c8 <__assert_fail@plt+0x394c>
   15304:	bl	11790 <__errno_location@plt>
   15308:	ldr	r0, [r0]
   1530c:	rsb	r0, r0, #0
   15310:	b	152c8 <__assert_fail@plt+0x394c>
   15314:	mvn	r0, #11
   15318:	b	152c8 <__assert_fail@plt+0x394c>
   1531c:	bl	11604 <__stack_chk_fail@plt>
   15320:	andeq	r5, r1, r8, asr ip
   15324:	muleq	r0, ip, r1
   15328:	andeq	r4, r0, r0, asr #20
   1532c:	push	{r2, r3}
   15330:	ldr	r2, [pc, #80]	; 15388 <__assert_fail@plt+0x3a0c>
   15334:	ldr	ip, [pc, #80]	; 1538c <__assert_fail@plt+0x3a10>
   15338:	add	r2, pc, r2
   1533c:	push	{r4, lr}
   15340:	sub	sp, sp, #8
   15344:	ldr	r4, [r2, ip]
   15348:	add	lr, sp, #20
   1534c:	mov	r3, lr
   15350:	ldr	ip, [r4]
   15354:	ldr	r2, [sp, #16]
   15358:	str	lr, [sp]
   1535c:	str	ip, [sp, #4]
   15360:	bl	151b0 <__assert_fail@plt+0x3834>
   15364:	ldr	r2, [sp, #4]
   15368:	ldr	r3, [r4]
   1536c:	cmp	r2, r3
   15370:	bne	15384 <__assert_fail@plt+0x3a08>
   15374:	add	sp, sp, #8
   15378:	pop	{r4, lr}
   1537c:	add	sp, sp, #8
   15380:	bx	lr
   15384:	bl	11604 <__stack_chk_fail@plt>
   15388:	andeq	r5, r1, r4, lsl fp
   1538c:	muleq	r0, ip, r1
   15390:	ldr	r3, [pc, #268]	; 154a4 <__assert_fail@plt+0x3b28>
   15394:	push	{r4, r5, r6, lr}
   15398:	subs	r5, r1, #0
   1539c:	sub	sp, sp, #8
   153a0:	add	r3, pc, r3
   153a4:	beq	153e4 <__assert_fail@plt+0x3a68>
   153a8:	mov	r2, r5
   153ac:	mov	r1, #524288	; 0x80000
   153b0:	bl	14dac <__assert_fail@plt+0x3430>
   153b4:	mov	r4, r0
   153b8:	cmp	r4, #0
   153bc:	blt	15424 <__assert_fail@plt+0x3aa8>
   153c0:	mov	r0, r4
   153c4:	bl	118d4 <fdopendir@plt>
   153c8:	subs	r6, r0, #0
   153cc:	beq	15498 <__assert_fail@plt+0x3b1c>
   153d0:	cmp	r5, #0
   153d4:	beq	15488 <__assert_fail@plt+0x3b0c>
   153d8:	mov	r0, r6
   153dc:	add	sp, sp, #8
   153e0:	pop	{r4, r5, r6, pc}
   153e4:	ldr	r2, [r0, #4]
   153e8:	mov	r4, r0
   153ec:	cmp	r2, #0
   153f0:	beq	15424 <__assert_fail@plt+0x3aa8>
   153f4:	ldr	r2, [pc, #172]	; 154a8 <__assert_fail@plt+0x3b2c>
   153f8:	add	r2, pc, r2
   153fc:	ldr	r2, [r2]
   15400:	tst	r2, #4
   15404:	bne	15434 <__assert_fail@plt+0x3ab8>
   15408:	mov	r0, r4
   1540c:	bl	14900 <__assert_fail@plt+0x2f84>
   15410:	mov	r1, #3
   15414:	bl	18ca4 <__assert_fail@plt+0x7328>
   15418:	mov	r4, r0
   1541c:	cmp	r4, #0
   15420:	bge	153c0 <__assert_fail@plt+0x3a44>
   15424:	mov	r6, #0
   15428:	mov	r0, r6
   1542c:	add	sp, sp, #8
   15430:	pop	{r4, r5, r6, pc}
   15434:	ldr	r2, [pc, #112]	; 154ac <__assert_fail@plt+0x3b30>
   15438:	ldr	r3, [r3, r2]
   1543c:	ldr	r6, [r3]
   15440:	bl	11730 <getpid@plt>
   15444:	ldr	r2, [pc, #100]	; 154b0 <__assert_fail@plt+0x3b34>
   15448:	ldr	r3, [pc, #100]	; 154b4 <__assert_fail@plt+0x3b38>
   1544c:	add	r2, pc, r2
   15450:	str	r2, [sp, #4]
   15454:	ldr	r2, [pc, #92]	; 154b8 <__assert_fail@plt+0x3b3c>
   15458:	add	r3, pc, r3
   1545c:	str	r3, [sp]
   15460:	add	r2, pc, r2
   15464:	mov	r1, #1
   15468:	mov	r3, r0
   1546c:	mov	r0, r6
   15470:	bl	11850 <__fprintf_chk@plt>
   15474:	ldr	r1, [pc, #64]	; 154bc <__assert_fail@plt+0x3b40>
   15478:	mov	r0, r4
   1547c:	add	r1, pc, r1
   15480:	bl	13fe0 <__assert_fail@plt+0x2664>
   15484:	b	15408 <__assert_fail@plt+0x3a8c>
   15488:	bl	11520 <rewinddir@plt>
   1548c:	mov	r0, r6
   15490:	add	sp, sp, #8
   15494:	pop	{r4, r5, r6, pc}
   15498:	mov	r0, r4
   1549c:	bl	1194c <close@plt>
   154a0:	b	153d8 <__assert_fail@plt+0x3a5c>
   154a4:	andeq	r5, r1, ip, lsr #21
   154a8:	andeq	r5, r1, r4, lsr #24
   154ac:	andeq	r0, r0, r0, lsr #3
   154b0:	andeq	r4, r0, r4, asr r7
   154b4:	andeq	r4, r0, r0, lsr r7
   154b8:	andeq	r4, r0, r0, lsr r7
   154bc:	andeq	r4, r0, r0, lsl #16
   154c0:	push	{r4, lr}
   154c4:	mov	r4, r0
   154c8:	bl	141d4 <__assert_fail@plt+0x2858>
   154cc:	subs	r1, r0, #0
   154d0:	popeq	{r4, pc}
   154d4:	mov	r0, r4
   154d8:	pop	{r4, lr}
   154dc:	b	15390 <__assert_fail@plt+0x3a14>
   154e0:	push	{r1, r2, r3}
   154e4:	ldr	r3, [pc, #80]	; 1553c <__assert_fail@plt+0x3bc0>
   154e8:	ldr	r1, [pc, #80]	; 15540 <__assert_fail@plt+0x3bc4>
   154ec:	add	r3, pc, r3
   154f0:	push	{r4, lr}
   154f4:	sub	sp, sp, #12
   154f8:	ldr	r4, [r3, r1]
   154fc:	add	ip, sp, #24
   15500:	mov	r2, ip
   15504:	ldr	r3, [r4]
   15508:	ldr	r1, [sp, #20]
   1550c:	str	r3, [sp, #4]
   15510:	str	ip, [sp]
   15514:	bl	154c0 <__assert_fail@plt+0x3b44>
   15518:	ldr	r2, [sp, #4]
   1551c:	ldr	r3, [r4]
   15520:	cmp	r2, r3
   15524:	bne	15538 <__assert_fail@plt+0x3bbc>
   15528:	add	sp, sp, #12
   1552c:	pop	{r4, lr}
   15530:	add	sp, sp, #12
   15534:	bx	lr
   15538:	bl	11604 <__stack_chk_fail@plt>
   1553c:	andeq	r5, r1, r0, ror #18
   15540:	muleq	r0, ip, r1
   15544:	push	{r4, r5, r6, lr}
   15548:	subs	r6, r3, #0
   1554c:	mov	r4, r1
   15550:	mov	r5, r2
   15554:	beq	15578 <__assert_fail@plt+0x3bfc>
   15558:	bl	14900 <__assert_fail@plt+0x2f84>
   1555c:	subs	r3, r0, #0
   15560:	blt	155a0 <__assert_fail@plt+0x3c24>
   15564:	mov	r3, r5
   15568:	mov	r2, r4
   1556c:	mov	r1, r6
   15570:	pop	{r4, r5, r6, lr}
   15574:	b	116d0 <readlinkat@plt>
   15578:	bl	1412c <__assert_fail@plt+0x27b0>
   1557c:	cmp	r0, #0
   15580:	beq	15594 <__assert_fail@plt+0x3c18>
   15584:	mov	r2, r5
   15588:	mov	r1, r4
   1558c:	pop	{r4, r5, r6, lr}
   15590:	b	11658 <readlink@plt>
   15594:	bl	11790 <__errno_location@plt>
   15598:	ldr	r3, [r0]
   1559c:	rsb	r3, r3, #0
   155a0:	mov	r0, r3
   155a4:	pop	{r4, r5, r6, pc}
   155a8:	push	{r3}		; (str r3, [sp, #-4]!)
   155ac:	ldr	r3, [pc, #132]	; 15638 <__assert_fail@plt+0x3cbc>
   155b0:	ldr	ip, [pc, #132]	; 1563c <__assert_fail@plt+0x3cc0>
   155b4:	add	r3, pc, r3
   155b8:	push	{r4, r5, r6, r7, lr}
   155bc:	sub	sp, sp, #8
   155c0:	ldr	r4, [r3, ip]
   155c4:	add	lr, sp, #32
   155c8:	mov	r5, r1
   155cc:	ldr	ip, [r4]
   155d0:	mov	r7, r2
   155d4:	ldr	r1, [sp, #28]
   155d8:	mov	r2, lr
   155dc:	str	ip, [sp, #4]
   155e0:	str	lr, [sp]
   155e4:	mov	r6, r0
   155e8:	bl	141d4 <__assert_fail@plt+0x2858>
   155ec:	subs	r3, r0, #0
   155f0:	beq	15624 <__assert_fail@plt+0x3ca8>
   155f4:	mov	r2, r7
   155f8:	mov	r1, r5
   155fc:	mov	r0, r6
   15600:	bl	15544 <__assert_fail@plt+0x3bc8>
   15604:	ldr	r2, [sp, #4]
   15608:	ldr	r3, [r4]
   1560c:	cmp	r2, r3
   15610:	bne	15634 <__assert_fail@plt+0x3cb8>
   15614:	add	sp, sp, #8
   15618:	pop	{r4, r5, r6, r7, lr}
   1561c:	add	sp, sp, #4
   15620:	bx	lr
   15624:	bl	11790 <__errno_location@plt>
   15628:	ldr	r0, [r0]
   1562c:	rsb	r0, r0, #0
   15630:	b	15604 <__assert_fail@plt+0x3c88>
   15634:	bl	11604 <__stack_chk_fail@plt>
   15638:	muleq	r1, r8, r8
   1563c:	muleq	r0, ip, r1
   15640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15644:	mov	r9, r3
   15648:	ldr	r4, [pc, #400]	; 157e0 <__assert_fail@plt+0x3e64>
   1564c:	ldr	ip, [pc, #400]	; 157e4 <__assert_fail@plt+0x3e68>
   15650:	add	r4, pc, r4
   15654:	sub	sp, sp, #36	; 0x24
   15658:	ldr	r3, [r4, ip]
   1565c:	mov	r6, r1
   15660:	str	r3, [sp, #12]
   15664:	ldr	r3, [r3]
   15668:	mov	r1, #524288	; 0x80000
   1566c:	mov	r5, r2
   15670:	mov	r2, r9
   15674:	str	r3, [sp, #28]
   15678:	bl	14dac <__assert_fail@plt+0x3430>
   1567c:	mov	r7, r0
   15680:	bl	11790 <__errno_location@plt>
   15684:	cmp	r7, #0
   15688:	mov	r8, r0
   1568c:	blt	157bc <__assert_fail@plt+0x3e40>
   15690:	ldr	r3, [pc, #336]	; 157e8 <__assert_fail@plt+0x3e6c>
   15694:	add	r3, pc, r3
   15698:	ldr	r3, [r3]
   1569c:	tst	r3, #4
   156a0:	bne	15748 <__assert_fail@plt+0x3dcc>
   156a4:	mov	r2, r5
   156a8:	mov	r1, #0
   156ac:	mov	r0, r6
   156b0:	bl	117e4 <memset@plt>
   156b4:	cmp	r5, #0
   156b8:	movne	r4, #0
   156bc:	movne	fp, r4
   156c0:	addne	r9, sp, #20
   156c4:	beq	157d0 <__assert_fail@plt+0x3e54>
   156c8:	mov	r2, r5
   156cc:	mov	r1, r6
   156d0:	mov	r0, r7
   156d4:	bl	11544 <read@plt>
   156d8:	cmp	r0, #0
   156dc:	ble	156f8 <__assert_fail@plt+0x3d7c>
   156e0:	subs	r5, r5, r0
   156e4:	add	r6, r6, r0
   156e8:	add	r4, r4, r0
   156ec:	beq	157c8 <__assert_fail@plt+0x3e4c>
   156f0:	mov	fp, #0
   156f4:	b	156c8 <__assert_fail@plt+0x3d4c>
   156f8:	ldr	sl, [r8]
   156fc:	beq	15714 <__assert_fail@plt+0x3d98>
   15700:	cmp	sl, #4
   15704:	cmpne	sl, #11
   15708:	bne	15714 <__assert_fail@plt+0x3d98>
   1570c:	cmp	fp, #4
   15710:	ble	1579c <__assert_fail@plt+0x3e20>
   15714:	cmp	r4, #0
   15718:	mvneq	r4, #0
   1571c:	mov	r0, r7
   15720:	bl	1194c <close@plt>
   15724:	str	sl, [r8]
   15728:	ldr	r3, [sp, #12]
   1572c:	ldr	r2, [sp, #28]
   15730:	mov	r0, r4
   15734:	ldr	r3, [r3]
   15738:	cmp	r2, r3
   1573c:	bne	157dc <__assert_fail@plt+0x3e60>
   15740:	add	sp, sp, #36	; 0x24
   15744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15748:	ldr	r3, [pc, #156]	; 157ec <__assert_fail@plt+0x3e70>
   1574c:	ldr	r3, [r4, r3]
   15750:	ldr	r4, [r3]
   15754:	bl	11730 <getpid@plt>
   15758:	ldr	r2, [pc, #144]	; 157f0 <__assert_fail@plt+0x3e74>
   1575c:	ldr	r3, [pc, #144]	; 157f4 <__assert_fail@plt+0x3e78>
   15760:	add	r2, pc, r2
   15764:	str	r2, [sp, #4]
   15768:	ldr	r2, [pc, #136]	; 157f8 <__assert_fail@plt+0x3e7c>
   1576c:	add	r3, pc, r3
   15770:	str	r3, [sp]
   15774:	add	r2, pc, r2
   15778:	mov	r1, #1
   1577c:	mov	r3, r0
   15780:	mov	r0, r4
   15784:	bl	11850 <__fprintf_chk@plt>
   15788:	ldr	r0, [pc, #108]	; 157fc <__assert_fail@plt+0x3e80>
   1578c:	mov	r1, r9
   15790:	add	r0, pc, r0
   15794:	bl	140ac <__assert_fail@plt+0x2730>
   15798:	b	156a4 <__assert_fail@plt+0x3d28>
   1579c:	ldr	r3, [pc, #92]	; 15800 <__assert_fail@plt+0x3e84>
   157a0:	mov	r1, #0
   157a4:	mov	r0, r9
   157a8:	add	fp, fp, #1
   157ac:	str	r1, [sp, #20]
   157b0:	str	r3, [sp, #24]
   157b4:	bl	11580 <nanosleep@plt>
   157b8:	b	156c8 <__assert_fail@plt+0x3d4c>
   157bc:	ldr	r4, [r0]
   157c0:	rsb	r4, r4, #0
   157c4:	b	15728 <__assert_fail@plt+0x3dac>
   157c8:	ldr	sl, [r8]
   157cc:	b	1571c <__assert_fail@plt+0x3da0>
   157d0:	ldr	sl, [r8]
   157d4:	mov	r4, r5
   157d8:	b	1571c <__assert_fail@plt+0x3da0>
   157dc:	bl	11604 <__stack_chk_fail@plt>
   157e0:	strdeq	r5, [r1], -ip
   157e4:	muleq	r0, ip, r1
   157e8:	andeq	r5, r1, r8, lsl #19
   157ec:	andeq	r0, r0, r0, lsr #3
   157f0:	andeq	r4, r0, r0, asr #8
   157f4:	andeq	r4, r0, ip, lsl r4
   157f8:	andeq	r4, r0, ip, lsl r4
   157fc:	andeq	r4, r0, r0, lsl #10
   15800:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   15804:	push	{r4, r5, r6, lr}
   15808:	mov	r5, r1
   1580c:	mov	r6, r2
   15810:	mov	r1, r3
   15814:	ldr	r2, [sp, #16]
   15818:	mov	r4, r0
   1581c:	bl	141d4 <__assert_fail@plt+0x2858>
   15820:	subs	r3, r0, #0
   15824:	beq	1583c <__assert_fail@plt+0x3ec0>
   15828:	mov	r2, r6
   1582c:	mov	r1, r5
   15830:	mov	r0, r4
   15834:	pop	{r4, r5, r6, lr}
   15838:	b	15640 <__assert_fail@plt+0x3cc4>
   1583c:	mvn	r0, #21
   15840:	pop	{r4, r5, r6, pc}
   15844:	push	{r3}		; (str r3, [sp, #-4]!)
   15848:	ldr	r3, [pc, #80]	; 158a0 <__assert_fail@plt+0x3f24>
   1584c:	ldr	ip, [pc, #80]	; 158a4 <__assert_fail@plt+0x3f28>
   15850:	add	r3, pc, r3
   15854:	push	{r4, lr}
   15858:	sub	sp, sp, #20
   1585c:	ldr	r4, [r3, ip]
   15860:	add	lr, sp, #32
   15864:	str	lr, [sp]
   15868:	ldr	ip, [r4]
   1586c:	ldr	r3, [sp, #28]
   15870:	str	lr, [sp, #8]
   15874:	str	ip, [sp, #12]
   15878:	bl	15804 <__assert_fail@plt+0x3e88>
   1587c:	ldr	r2, [sp, #12]
   15880:	ldr	r3, [r4]
   15884:	cmp	r2, r3
   15888:	bne	1589c <__assert_fail@plt+0x3f20>
   1588c:	add	sp, sp, #20
   15890:	pop	{r4, lr}
   15894:	add	sp, sp, #4
   15898:	bx	lr
   1589c:	bl	11604 <__stack_chk_fail@plt>
   158a0:	strdeq	r5, [r1], -ip
   158a4:	muleq	r0, ip, r1
   158a8:	ldr	ip, [pc, #176]	; 15960 <__assert_fail@plt+0x3fe4>
   158ac:	ldr	r3, [pc, #176]	; 15964 <__assert_fail@plt+0x3fe8>
   158b0:	add	ip, pc, ip
   158b4:	push	{r4, r5, r6, r7, r8, lr}
   158b8:	sub	sp, sp, #8192	; 0x2000
   158bc:	ldr	r7, [ip, r3]
   158c0:	sub	sp, sp, #8
   158c4:	mov	r6, r1
   158c8:	add	r5, sp, #8
   158cc:	add	ip, sp, #8192	; 0x2000
   158d0:	ldr	lr, [r7]
   158d4:	mov	r1, #0
   158d8:	add	ip, ip, #4
   158dc:	sub	r8, r5, #4
   158e0:	mov	r3, r2
   158e4:	str	r1, [r6]
   158e8:	ldr	r2, [pc, #120]	; 15968 <__assert_fail@plt+0x3fec>
   158ec:	mov	r1, r8
   158f0:	str	lr, [ip]
   158f4:	bl	15640 <__assert_fail@plt+0x3cc4>
   158f8:	subs	r4, r0, #0
   158fc:	blt	15934 <__assert_fail@plt+0x3fb8>
   15900:	beq	15914 <__assert_fail@plt+0x3f98>
   15904:	sub	r3, r5, #5
   15908:	ldrsb	r3, [r3, r4]
   1590c:	cmp	r3, #10
   15910:	subeq	r4, r4, #1
   15914:	add	r5, r5, r4
   15918:	mov	r3, #0
   1591c:	mov	r0, r8
   15920:	strb	r3, [r5, #-4]
   15924:	bl	115f8 <strdup@plt>
   15928:	cmp	r0, #0
   1592c:	mvneq	r4, #11
   15930:	str	r0, [r6]
   15934:	add	r3, sp, #8192	; 0x2000
   15938:	add	r3, r3, #4
   1593c:	ldr	r2, [r3]
   15940:	ldr	r3, [r7]
   15944:	mov	r0, r4
   15948:	cmp	r2, r3
   1594c:	bne	1595c <__assert_fail@plt+0x3fe0>
   15950:	add	sp, sp, #8192	; 0x2000
   15954:	add	sp, sp, #8
   15958:	pop	{r4, r5, r6, r7, r8, pc}
   1595c:	bl	11604 <__stack_chk_fail@plt>
   15960:	muleq	r1, ip, r5
   15964:	muleq	r0, ip, r1
   15968:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1596c:	push	{r2, r3}
   15970:	ldr	r3, [pc, #116]	; 159ec <__assert_fail@plt+0x4070>
   15974:	ldr	r2, [pc, #116]	; 159f0 <__assert_fail@plt+0x4074>
   15978:	add	r3, pc, r3
   1597c:	push	{r4, r5, r6, lr}
   15980:	sub	sp, sp, #8
   15984:	ldr	r4, [r3, r2]
   15988:	add	ip, sp, #28
   1598c:	mov	r2, ip
   15990:	ldr	r3, [r4]
   15994:	mov	r5, r1
   15998:	ldr	r1, [sp, #24]
   1599c:	str	ip, [sp]
   159a0:	str	r3, [sp, #4]
   159a4:	mov	r6, r0
   159a8:	bl	141d4 <__assert_fail@plt+0x2858>
   159ac:	subs	r2, r0, #0
   159b0:	beq	159e0 <__assert_fail@plt+0x4064>
   159b4:	mov	r1, r5
   159b8:	mov	r0, r6
   159bc:	bl	158a8 <__assert_fail@plt+0x3f2c>
   159c0:	ldr	r2, [sp, #4]
   159c4:	ldr	r3, [r4]
   159c8:	cmp	r2, r3
   159cc:	bne	159e8 <__assert_fail@plt+0x406c>
   159d0:	add	sp, sp, #8
   159d4:	pop	{r4, r5, r6, lr}
   159d8:	add	sp, sp, #8
   159dc:	bx	lr
   159e0:	mvn	r0, #21
   159e4:	b	159c0 <__assert_fail@plt+0x4044>
   159e8:	bl	11604 <__stack_chk_fail@plt>
   159ec:	ldrdeq	r5, [r1], -r4
   159f0:	muleq	r0, ip, r1
   159f4:	push	{r4, lr}
   159f8:	sub	r2, r2, #1
   159fc:	mov	r4, r1
   15a00:	bl	15640 <__assert_fail@plt+0x3cc4>
   15a04:	cmp	r0, #0
   15a08:	poplt	{r4, pc}
   15a0c:	beq	15a28 <__assert_fail@plt+0x40ac>
   15a10:	add	r3, r4, r0
   15a14:	ldrsb	r2, [r3, #-1]
   15a18:	cmp	r2, #10
   15a1c:	subeq	r0, r0, #1
   15a20:	movne	r4, r3
   15a24:	addeq	r4, r4, r0
   15a28:	mov	r3, #0
   15a2c:	strb	r3, [r4]
   15a30:	pop	{r4, pc}
   15a34:	push	{r3}		; (str r3, [sp, #-4]!)
   15a38:	ldr	r3, [pc, #124]	; 15abc <__assert_fail@plt+0x4140>
   15a3c:	ldr	ip, [pc, #124]	; 15ac0 <__assert_fail@plt+0x4144>
   15a40:	add	r3, pc, r3
   15a44:	push	{r4, r5, r6, r7, lr}
   15a48:	sub	sp, sp, #8
   15a4c:	ldr	r4, [r3, ip]
   15a50:	add	lr, sp, #32
   15a54:	mov	r5, r1
   15a58:	ldr	ip, [r4]
   15a5c:	mov	r7, r2
   15a60:	ldr	r1, [sp, #28]
   15a64:	mov	r2, lr
   15a68:	str	ip, [sp, #4]
   15a6c:	str	lr, [sp]
   15a70:	mov	r6, r0
   15a74:	bl	141d4 <__assert_fail@plt+0x2858>
   15a78:	subs	r3, r0, #0
   15a7c:	beq	15ab0 <__assert_fail@plt+0x4134>
   15a80:	mov	r2, r7
   15a84:	mov	r1, r5
   15a88:	mov	r0, r6
   15a8c:	bl	159f4 <__assert_fail@plt+0x4078>
   15a90:	ldr	r2, [sp, #4]
   15a94:	ldr	r3, [r4]
   15a98:	cmp	r2, r3
   15a9c:	bne	15ab8 <__assert_fail@plt+0x413c>
   15aa0:	add	sp, sp, #8
   15aa4:	pop	{r4, r5, r6, r7, lr}
   15aa8:	add	sp, sp, #4
   15aac:	bx	lr
   15ab0:	mvn	r0, #21
   15ab4:	b	15a90 <__assert_fail@plt+0x4114>
   15ab8:	bl	11604 <__stack_chk_fail@plt>
   15abc:	andeq	r5, r1, ip, lsl #8
   15ac0:	muleq	r0, ip, r1
   15ac4:	push	{r2, r3}
   15ac8:	mov	r2, r1
   15acc:	push	{r4, r5, r6, r7, r8, lr}
   15ad0:	mov	r7, r1
   15ad4:	ldr	r4, [pc, #236]	; 15bc8 <__assert_fail@plt+0x424c>
   15ad8:	ldr	r3, [pc, #236]	; 15bcc <__assert_fail@plt+0x4250>
   15adc:	add	r4, pc, r4
   15ae0:	ldr	r1, [pc, #232]	; 15bd0 <__assert_fail@plt+0x4254>
   15ae4:	ldr	r5, [r4, r3]
   15ae8:	sub	sp, sp, #16
   15aec:	add	r1, pc, r1
   15af0:	ldr	r3, [r5]
   15af4:	ldr	r8, [sp, #40]	; 0x28
   15af8:	str	r3, [sp, #12]
   15afc:	bl	150cc <__assert_fail@plt+0x3750>
   15b00:	subs	r6, r0, #0
   15b04:	beq	15bbc <__assert_fail@plt+0x4240>
   15b08:	ldr	r3, [pc, #196]	; 15bd4 <__assert_fail@plt+0x4258>
   15b0c:	add	r3, pc, r3
   15b10:	ldr	r3, [r3]
   15b14:	tst	r3, #4
   15b18:	bne	15b64 <__assert_fail@plt+0x41e8>
   15b1c:	add	r3, sp, #44	; 0x2c
   15b20:	mov	r1, r8
   15b24:	mov	r2, r3
   15b28:	mov	r0, r6
   15b2c:	str	r3, [sp, #8]
   15b30:	bl	11640 <vfscanf@plt>
   15b34:	mov	r4, r0
   15b38:	mov	r0, r6
   15b3c:	bl	1185c <fclose@plt>
   15b40:	ldr	r2, [sp, #12]
   15b44:	ldr	r3, [r5]
   15b48:	mov	r0, r4
   15b4c:	cmp	r2, r3
   15b50:	bne	15bc4 <__assert_fail@plt+0x4248>
   15b54:	add	sp, sp, #16
   15b58:	pop	{r4, r5, r6, r7, r8, lr}
   15b5c:	add	sp, sp, #8
   15b60:	bx	lr
   15b64:	ldr	r3, [pc, #108]	; 15bd8 <__assert_fail@plt+0x425c>
   15b68:	ldr	r3, [r4, r3]
   15b6c:	ldr	r4, [r3]
   15b70:	bl	11730 <getpid@plt>
   15b74:	ldr	r2, [pc, #96]	; 15bdc <__assert_fail@plt+0x4260>
   15b78:	ldr	r3, [pc, #96]	; 15be0 <__assert_fail@plt+0x4264>
   15b7c:	add	r2, pc, r2
   15b80:	str	r2, [sp, #4]
   15b84:	ldr	r2, [pc, #88]	; 15be4 <__assert_fail@plt+0x4268>
   15b88:	add	r3, pc, r3
   15b8c:	str	r3, [sp]
   15b90:	add	r2, pc, r2
   15b94:	mov	r1, #1
   15b98:	mov	r3, r0
   15b9c:	mov	r0, r4
   15ba0:	bl	11850 <__fprintf_chk@plt>
   15ba4:	ldr	r0, [pc, #60]	; 15be8 <__assert_fail@plt+0x426c>
   15ba8:	mov	r2, r7
   15bac:	mov	r1, r8
   15bb0:	add	r0, pc, r0
   15bb4:	bl	140ac <__assert_fail@plt+0x2730>
   15bb8:	b	15b1c <__assert_fail@plt+0x41a0>
   15bbc:	mvn	r4, #21
   15bc0:	b	15b40 <__assert_fail@plt+0x41c4>
   15bc4:	bl	11604 <__stack_chk_fail@plt>
   15bc8:	andeq	r5, r1, r0, ror r3
   15bcc:	muleq	r0, ip, r1
   15bd0:	andeq	r4, r0, ip, lsl #3
   15bd4:	andeq	r5, r1, r0, lsl r5
   15bd8:	andeq	r0, r0, r0, lsr #3
   15bdc:	andeq	r4, r0, r4, lsr #32
   15be0:	andeq	r4, r0, r0
   15be4:	andeq	r4, r0, r0
   15be8:	strdeq	r4, [r0], -r0
   15bec:	ldr	ip, [pc, #140]	; 15c80 <__assert_fail@plt+0x4304>
   15bf0:	push	{r3}		; (str r3, [sp, #-4]!)
   15bf4:	add	ip, pc, ip
   15bf8:	push	{r4, r5, r6, lr}
   15bfc:	mov	r3, r2
   15c00:	ldr	lr, [pc, #124]	; 15c84 <__assert_fail@plt+0x4308>
   15c04:	mov	r2, r1
   15c08:	ldr	r1, [pc, #120]	; 15c88 <__assert_fail@plt+0x430c>
   15c0c:	ldr	r4, [ip, lr]
   15c10:	sub	sp, sp, #12
   15c14:	add	r1, pc, r1
   15c18:	ldr	ip, [r4]
   15c1c:	ldr	r5, [sp, #28]
   15c20:	str	ip, [sp, #4]
   15c24:	bl	151b0 <__assert_fail@plt+0x3834>
   15c28:	subs	r6, r0, #0
   15c2c:	beq	15c74 <__assert_fail@plt+0x42f8>
   15c30:	add	r3, sp, #32
   15c34:	mov	r1, r5
   15c38:	mov	r2, r3
   15c3c:	str	r3, [sp]
   15c40:	bl	11640 <vfscanf@plt>
   15c44:	mov	r5, r0
   15c48:	mov	r0, r6
   15c4c:	bl	1185c <fclose@plt>
   15c50:	ldr	r2, [sp, #4]
   15c54:	ldr	r3, [r4]
   15c58:	mov	r0, r5
   15c5c:	cmp	r2, r3
   15c60:	bne	15c7c <__assert_fail@plt+0x4300>
   15c64:	add	sp, sp, #12
   15c68:	pop	{r4, r5, r6, lr}
   15c6c:	add	sp, sp, #4
   15c70:	bx	lr
   15c74:	mvn	r5, #21
   15c78:	b	15c50 <__assert_fail@plt+0x42d4>
   15c7c:	bl	11604 <__stack_chk_fail@plt>
   15c80:	andeq	r5, r1, r8, asr r2
   15c84:	muleq	r0, ip, r1
   15c88:	andeq	r4, r0, r4, rrx
   15c8c:	ldr	r3, [pc, #124]	; 15d10 <__assert_fail@plt+0x4394>
   15c90:	ldr	ip, [pc, #124]	; 15d14 <__assert_fail@plt+0x4398>
   15c94:	add	r3, pc, r3
   15c98:	push	{r4, r5, r6, r7, lr}
   15c9c:	mov	r5, r1
   15ca0:	ldr	r4, [r3, ip]
   15ca4:	mov	r1, r2
   15ca8:	ldr	r2, [pc, #104]	; 15d18 <__assert_fail@plt+0x439c>
   15cac:	sub	sp, sp, #20
   15cb0:	ldr	ip, [r4]
   15cb4:	mov	r6, #0
   15cb8:	mov	r7, #0
   15cbc:	add	r2, pc, r2
   15cc0:	mov	r3, sp
   15cc4:	strd	r6, [sp]
   15cc8:	str	ip, [sp, #12]
   15ccc:	bl	15ac4 <__assert_fail@plt+0x4148>
   15cd0:	cmp	r0, #1
   15cd4:	bne	15d04 <__assert_fail@plt+0x4388>
   15cd8:	cmp	r5, #0
   15cdc:	moveq	r0, r5
   15ce0:	ldrdne	r2, [sp]
   15ce4:	movne	r0, #0
   15ce8:	strdne	r2, [r5]
   15cec:	ldr	r2, [sp, #12]
   15cf0:	ldr	r3, [r4]
   15cf4:	cmp	r2, r3
   15cf8:	bne	15d0c <__assert_fail@plt+0x4390>
   15cfc:	add	sp, sp, #20
   15d00:	pop	{r4, r5, r6, r7, pc}
   15d04:	mvn	r0, #0
   15d08:	b	15cec <__assert_fail@plt+0x4370>
   15d0c:	bl	11604 <__stack_chk_fail@plt>
   15d10:			; <UNDEFINED> instruction: 0x000151b8
   15d14:	muleq	r0, ip, r1
   15d18:	strdeq	r3, [r0], -r8
   15d1c:	push	{r2, r3}
   15d20:	ldr	r3, [pc, #116]	; 15d9c <__assert_fail@plt+0x4420>
   15d24:	ldr	r2, [pc, #116]	; 15da0 <__assert_fail@plt+0x4424>
   15d28:	add	r3, pc, r3
   15d2c:	push	{r4, r5, r6, lr}
   15d30:	sub	sp, sp, #8
   15d34:	ldr	r4, [r3, r2]
   15d38:	add	ip, sp, #28
   15d3c:	mov	r2, ip
   15d40:	ldr	r3, [r4]
   15d44:	mov	r5, r1
   15d48:	ldr	r1, [sp, #24]
   15d4c:	str	ip, [sp]
   15d50:	str	r3, [sp, #4]
   15d54:	mov	r6, r0
   15d58:	bl	141d4 <__assert_fail@plt+0x2858>
   15d5c:	subs	r2, r0, #0
   15d60:	beq	15d90 <__assert_fail@plt+0x4414>
   15d64:	mov	r1, r5
   15d68:	mov	r0, r6
   15d6c:	bl	15c8c <__assert_fail@plt+0x4310>
   15d70:	ldr	r2, [sp, #4]
   15d74:	ldr	r3, [r4]
   15d78:	cmp	r2, r3
   15d7c:	bne	15d98 <__assert_fail@plt+0x441c>
   15d80:	add	sp, sp, #8
   15d84:	pop	{r4, r5, r6, lr}
   15d88:	add	sp, sp, #8
   15d8c:	bx	lr
   15d90:	mvn	r0, #21
   15d94:	b	15d70 <__assert_fail@plt+0x43f4>
   15d98:	bl	11604 <__stack_chk_fail@plt>
   15d9c:	andeq	r5, r1, r4, lsr #2
   15da0:	muleq	r0, ip, r1
   15da4:	ldr	r3, [pc, #124]	; 15e28 <__assert_fail@plt+0x44ac>
   15da8:	ldr	ip, [pc, #124]	; 15e2c <__assert_fail@plt+0x44b0>
   15dac:	add	r3, pc, r3
   15db0:	push	{r4, r5, r6, r7, lr}
   15db4:	mov	r5, r1
   15db8:	ldr	r4, [r3, ip]
   15dbc:	mov	r1, r2
   15dc0:	ldr	r2, [pc, #104]	; 15e30 <__assert_fail@plt+0x44b4>
   15dc4:	sub	sp, sp, #20
   15dc8:	ldr	ip, [r4]
   15dcc:	mov	r6, #0
   15dd0:	mov	r7, #0
   15dd4:	add	r2, pc, r2
   15dd8:	mov	r3, sp
   15ddc:	strd	r6, [sp]
   15de0:	str	ip, [sp, #12]
   15de4:	bl	15ac4 <__assert_fail@plt+0x4148>
   15de8:	cmp	r0, #1
   15dec:	bne	15e1c <__assert_fail@plt+0x44a0>
   15df0:	cmp	r5, #0
   15df4:	moveq	r0, r5
   15df8:	ldrdne	r2, [sp]
   15dfc:	movne	r0, #0
   15e00:	strdne	r2, [r5]
   15e04:	ldr	r2, [sp, #12]
   15e08:	ldr	r3, [r4]
   15e0c:	cmp	r2, r3
   15e10:	bne	15e24 <__assert_fail@plt+0x44a8>
   15e14:	add	sp, sp, #20
   15e18:	pop	{r4, r5, r6, r7, pc}
   15e1c:	mvn	r0, #0
   15e20:	b	15e04 <__assert_fail@plt+0x4488>
   15e24:	bl	11604 <__stack_chk_fail@plt>
   15e28:	andeq	r5, r1, r0, lsr #1
   15e2c:	muleq	r0, ip, r1
   15e30:	andeq	r3, r0, r8, ror #29
   15e34:	push	{r2, r3}
   15e38:	ldr	r3, [pc, #116]	; 15eb4 <__assert_fail@plt+0x4538>
   15e3c:	ldr	r2, [pc, #116]	; 15eb8 <__assert_fail@plt+0x453c>
   15e40:	add	r3, pc, r3
   15e44:	push	{r4, r5, r6, lr}
   15e48:	sub	sp, sp, #8
   15e4c:	ldr	r4, [r3, r2]
   15e50:	add	ip, sp, #28
   15e54:	mov	r2, ip
   15e58:	ldr	r3, [r4]
   15e5c:	mov	r5, r1
   15e60:	ldr	r1, [sp, #24]
   15e64:	str	ip, [sp]
   15e68:	str	r3, [sp, #4]
   15e6c:	mov	r6, r0
   15e70:	bl	141d4 <__assert_fail@plt+0x2858>
   15e74:	subs	r2, r0, #0
   15e78:	beq	15ea8 <__assert_fail@plt+0x452c>
   15e7c:	mov	r1, r5
   15e80:	mov	r0, r6
   15e84:	bl	15da4 <__assert_fail@plt+0x4428>
   15e88:	ldr	r2, [sp, #4]
   15e8c:	ldr	r3, [r4]
   15e90:	cmp	r2, r3
   15e94:	bne	15eb0 <__assert_fail@plt+0x4534>
   15e98:	add	sp, sp, #8
   15e9c:	pop	{r4, r5, r6, lr}
   15ea0:	add	sp, sp, #8
   15ea4:	bx	lr
   15ea8:	mvn	r0, #21
   15eac:	b	15e88 <__assert_fail@plt+0x450c>
   15eb0:	bl	11604 <__stack_chk_fail@plt>
   15eb4:	andeq	r5, r1, ip
   15eb8:	muleq	r0, ip, r1
   15ebc:	ldr	ip, [pc, #120]	; 15f3c <__assert_fail@plt+0x45c0>
   15ec0:	ldr	r3, [pc, #120]	; 15f40 <__assert_fail@plt+0x45c4>
   15ec4:	add	ip, pc, ip
   15ec8:	push	{r4, r5, r6, lr}
   15ecc:	mov	r6, r1
   15ed0:	ldr	r5, [ip, r3]
   15ed4:	mov	r1, r2
   15ed8:	ldr	r2, [pc, #100]	; 15f44 <__assert_fail@plt+0x45c8>
   15edc:	sub	sp, sp, #8
   15ee0:	ldr	lr, [r5]
   15ee4:	mov	r4, #0
   15ee8:	mov	r3, sp
   15eec:	add	r2, pc, r2
   15ef0:	str	lr, [sp, #4]
   15ef4:	str	r4, [sp]
   15ef8:	bl	15ac4 <__assert_fail@plt+0x4148>
   15efc:	cmp	r0, #1
   15f00:	bne	15f30 <__assert_fail@plt+0x45b4>
   15f04:	cmp	r6, r4
   15f08:	moveq	r0, r6
   15f0c:	ldrne	r3, [sp]
   15f10:	movne	r0, r4
   15f14:	strne	r3, [r6]
   15f18:	ldr	r2, [sp, #4]
   15f1c:	ldr	r3, [r5]
   15f20:	cmp	r2, r3
   15f24:	bne	15f38 <__assert_fail@plt+0x45bc>
   15f28:	add	sp, sp, #8
   15f2c:	pop	{r4, r5, r6, pc}
   15f30:	mvn	r0, #0
   15f34:	b	15f18 <__assert_fail@plt+0x459c>
   15f38:	bl	11604 <__stack_chk_fail@plt>
   15f3c:	andeq	r4, r1, r8, lsl #31
   15f40:	muleq	r0, ip, r1
   15f44:	ldrdeq	r3, [r0], -r8
   15f48:	push	{r2, r3}
   15f4c:	ldr	r3, [pc, #116]	; 15fc8 <__assert_fail@plt+0x464c>
   15f50:	ldr	r2, [pc, #116]	; 15fcc <__assert_fail@plt+0x4650>
   15f54:	add	r3, pc, r3
   15f58:	push	{r4, r5, r6, lr}
   15f5c:	sub	sp, sp, #8
   15f60:	ldr	r4, [r3, r2]
   15f64:	add	ip, sp, #28
   15f68:	mov	r2, ip
   15f6c:	ldr	r3, [r4]
   15f70:	mov	r5, r1
   15f74:	ldr	r1, [sp, #24]
   15f78:	str	ip, [sp]
   15f7c:	str	r3, [sp, #4]
   15f80:	mov	r6, r0
   15f84:	bl	141d4 <__assert_fail@plt+0x2858>
   15f88:	subs	r2, r0, #0
   15f8c:	beq	15fbc <__assert_fail@plt+0x4640>
   15f90:	mov	r1, r5
   15f94:	mov	r0, r6
   15f98:	bl	15ebc <__assert_fail@plt+0x4540>
   15f9c:	ldr	r2, [sp, #4]
   15fa0:	ldr	r3, [r4]
   15fa4:	cmp	r2, r3
   15fa8:	bne	15fc4 <__assert_fail@plt+0x4648>
   15fac:	add	sp, sp, #8
   15fb0:	pop	{r4, r5, r6, lr}
   15fb4:	add	sp, sp, #8
   15fb8:	bx	lr
   15fbc:	mvn	r0, #21
   15fc0:	b	15f9c <__assert_fail@plt+0x4620>
   15fc4:	bl	11604 <__stack_chk_fail@plt>
   15fc8:	strdeq	r4, [r1], -r8
   15fcc:	muleq	r0, ip, r1
   15fd0:	ldr	ip, [pc, #112]	; 16048 <__assert_fail@plt+0x46cc>
   15fd4:	ldr	r3, [pc, #112]	; 1604c <__assert_fail@plt+0x46d0>
   15fd8:	add	ip, pc, ip
   15fdc:	push	{r4, r5, lr}
   15fe0:	mov	r5, r1
   15fe4:	ldr	r4, [ip, r3]
   15fe8:	mov	r1, r2
   15fec:	ldr	r2, [pc, #92]	; 16050 <__assert_fail@plt+0x46d4>
   15ff0:	sub	sp, sp, #12
   15ff4:	ldr	lr, [r4]
   15ff8:	mov	r3, sp
   15ffc:	add	r2, pc, r2
   16000:	str	lr, [sp, #4]
   16004:	bl	15ac4 <__assert_fail@plt+0x4148>
   16008:	cmp	r0, #1
   1600c:	bne	1603c <__assert_fail@plt+0x46c0>
   16010:	cmp	r5, #0
   16014:	moveq	r0, r5
   16018:	ldrne	r3, [sp]
   1601c:	movne	r0, #0
   16020:	strne	r3, [r5]
   16024:	ldr	r2, [sp, #4]
   16028:	ldr	r3, [r4]
   1602c:	cmp	r2, r3
   16030:	bne	16044 <__assert_fail@plt+0x46c8>
   16034:	add	sp, sp, #12
   16038:	pop	{r4, r5, pc}
   1603c:	mvn	r0, #0
   16040:	b	16024 <__assert_fail@plt+0x46a8>
   16044:	bl	11604 <__stack_chk_fail@plt>
   16048:	andeq	r4, r1, r4, ror lr
   1604c:	muleq	r0, ip, r1
   16050:	andeq	r3, r0, ip, asr #25
   16054:	push	{r2, r3}
   16058:	ldr	r3, [pc, #116]	; 160d4 <__assert_fail@plt+0x4758>
   1605c:	ldr	r2, [pc, #116]	; 160d8 <__assert_fail@plt+0x475c>
   16060:	add	r3, pc, r3
   16064:	push	{r4, r5, r6, lr}
   16068:	sub	sp, sp, #8
   1606c:	ldr	r4, [r3, r2]
   16070:	add	ip, sp, #28
   16074:	mov	r2, ip
   16078:	ldr	r3, [r4]
   1607c:	mov	r5, r1
   16080:	ldr	r1, [sp, #24]
   16084:	str	ip, [sp]
   16088:	str	r3, [sp, #4]
   1608c:	mov	r6, r0
   16090:	bl	141d4 <__assert_fail@plt+0x2858>
   16094:	subs	r2, r0, #0
   16098:	beq	160c8 <__assert_fail@plt+0x474c>
   1609c:	mov	r1, r5
   160a0:	mov	r0, r6
   160a4:	bl	15fd0 <__assert_fail@plt+0x4654>
   160a8:	ldr	r2, [sp, #4]
   160ac:	ldr	r3, [r4]
   160b0:	cmp	r2, r3
   160b4:	bne	160d0 <__assert_fail@plt+0x4754>
   160b8:	add	sp, sp, #8
   160bc:	pop	{r4, r5, r6, lr}
   160c0:	add	sp, sp, #8
   160c4:	bx	lr
   160c8:	mvn	r0, #21
   160cc:	b	160a8 <__assert_fail@plt+0x472c>
   160d0:	bl	11604 <__stack_chk_fail@plt>
   160d4:	andeq	r4, r1, ip, ror #27
   160d8:	muleq	r0, ip, r1
   160dc:	ldr	ip, [pc, #168]	; 1618c <__assert_fail@plt+0x4810>
   160e0:	ldr	r3, [pc, #168]	; 16190 <__assert_fail@plt+0x4814>
   160e4:	add	ip, pc, ip
   160e8:	push	{r4, r5, lr}
   160ec:	sub	sp, sp, #28
   160f0:	ldr	r5, [ip, r3]
   160f4:	mov	r4, r1
   160f8:	add	r3, sp, #16
   160fc:	mov	r1, r2
   16100:	ldr	r2, [pc, #140]	; 16194 <__assert_fail@plt+0x4818>
   16104:	str	r3, [sp]
   16108:	ldr	lr, [r5]
   1610c:	add	r3, sp, #12
   16110:	add	r2, pc, r2
   16114:	str	lr, [sp, #20]
   16118:	bl	15ac4 <__assert_fail@plt+0x4148>
   1611c:	cmp	r0, #2
   16120:	bne	16180 <__assert_fail@plt+0x4804>
   16124:	cmp	r4, #0
   16128:	moveq	r0, r4
   1612c:	beq	16168 <__assert_fail@plt+0x47ec>
   16130:	ldr	r0, [sp, #16]
   16134:	ldr	r3, [sp, #12]
   16138:	ldr	ip, [pc, #88]	; 16198 <__assert_fail@plt+0x481c>
   1613c:	ldr	r2, [pc, #88]	; 1619c <__assert_fail@plt+0x4820>
   16140:	uxtb	r1, r0
   16144:	and	ip, ip, r3, lsl #8
   16148:	bic	r3, r3, #4080	; 0xff0
   1614c:	and	r2, r2, r0, lsl #12
   16150:	orr	r1, r1, ip
   16154:	bic	r3, r3, #15
   16158:	orr	r3, r3, r0, lsr #20
   1615c:	orr	r2, r2, r1
   16160:	mov	r0, #0
   16164:	strd	r2, [r4]
   16168:	ldr	r2, [sp, #20]
   1616c:	ldr	r3, [r5]
   16170:	cmp	r2, r3
   16174:	bne	16188 <__assert_fail@plt+0x480c>
   16178:	add	sp, sp, #28
   1617c:	pop	{r4, r5, pc}
   16180:	mvn	r0, #0
   16184:	b	16168 <__assert_fail@plt+0x47ec>
   16188:	bl	11604 <__stack_chk_fail@plt>
   1618c:	andeq	r4, r1, r8, ror #26
   16190:	muleq	r0, ip, r1
   16194:			; <UNDEFINED> instruction: 0x00003bbc
   16198:	andeq	pc, pc, r0, lsl #30
   1619c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   161a0:	push	{r2, r3}
   161a4:	ldr	r3, [pc, #116]	; 16220 <__assert_fail@plt+0x48a4>
   161a8:	ldr	r2, [pc, #116]	; 16224 <__assert_fail@plt+0x48a8>
   161ac:	add	r3, pc, r3
   161b0:	push	{r4, r5, r6, lr}
   161b4:	sub	sp, sp, #8
   161b8:	ldr	r4, [r3, r2]
   161bc:	add	ip, sp, #28
   161c0:	mov	r2, ip
   161c4:	ldr	r3, [r4]
   161c8:	mov	r5, r1
   161cc:	ldr	r1, [sp, #24]
   161d0:	str	ip, [sp]
   161d4:	str	r3, [sp, #4]
   161d8:	mov	r6, r0
   161dc:	bl	141d4 <__assert_fail@plt+0x2858>
   161e0:	subs	r2, r0, #0
   161e4:	beq	16214 <__assert_fail@plt+0x4898>
   161e8:	mov	r1, r5
   161ec:	mov	r0, r6
   161f0:	bl	160dc <__assert_fail@plt+0x4760>
   161f4:	ldr	r2, [sp, #4]
   161f8:	ldr	r3, [r4]
   161fc:	cmp	r2, r3
   16200:	bne	1621c <__assert_fail@plt+0x48a0>
   16204:	add	sp, sp, #8
   16208:	pop	{r4, r5, r6, lr}
   1620c:	add	sp, sp, #8
   16210:	bx	lr
   16214:	mvn	r0, #21
   16218:	b	161f4 <__assert_fail@plt+0x4878>
   1621c:	bl	11604 <__stack_chk_fail@plt>
   16220:	andeq	r4, r1, r0, lsr #25
   16224:	muleq	r0, ip, r1
   16228:	ldr	r3, [pc, #284]	; 1634c <__assert_fail@plt+0x49d0>
   1622c:	ldr	ip, [pc, #284]	; 16350 <__assert_fail@plt+0x49d4>
   16230:	add	r3, pc, r3
   16234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16238:	sub	sp, sp, #20
   1623c:	ldr	r8, [r3, ip]
   16240:	mov	r6, r1
   16244:	ldr	r1, [pc, #264]	; 16354 <__assert_fail@plt+0x49d8>
   16248:	ldr	r3, [r8]
   1624c:	str	r3, [sp, #12]
   16250:	bl	14dac <__assert_fail@plt+0x3430>
   16254:	mov	r7, r0
   16258:	bl	11790 <__errno_location@plt>
   1625c:	cmp	r7, #0
   16260:	mov	r5, r0
   16264:	blt	16334 <__assert_fail@plt+0x49b8>
   16268:	mov	r0, r6
   1626c:	bl	11760 <strlen@plt>
   16270:	subs	r4, r0, #0
   16274:	beq	162ec <__assert_fail@plt+0x4970>
   16278:	mov	r9, #0
   1627c:	add	sl, sp, #4
   16280:	str	r9, [r5]
   16284:	mov	r2, r4
   16288:	mov	r1, r6
   1628c:	mov	r0, r7
   16290:	bl	11838 <write@plt>
   16294:	cmp	r0, #0
   16298:	ble	16318 <__assert_fail@plt+0x499c>
   1629c:	subs	r4, r4, r0
   162a0:	ldr	fp, [r5]
   162a4:	beq	162d0 <__assert_fail@plt+0x4954>
   162a8:	cmp	fp, #11
   162ac:	add	r6, r6, r0
   162b0:	bne	16280 <__assert_fail@plt+0x4904>
   162b4:	ldr	r3, [pc, #156]	; 16358 <__assert_fail@plt+0x49dc>
   162b8:	mov	r1, #0
   162bc:	mov	r0, sl
   162c0:	str	r9, [sp, #4]
   162c4:	str	r3, [sp, #8]
   162c8:	bl	11580 <nanosleep@plt>
   162cc:	b	16280 <__assert_fail@plt+0x4904>
   162d0:	cmp	fp, #11
   162d4:	bne	162f0 <__assert_fail@plt+0x4974>
   162d8:	ldr	r3, [pc, #120]	; 16358 <__assert_fail@plt+0x49dc>
   162dc:	mov	r1, r4
   162e0:	add	r0, sp, #4
   162e4:	stmib	sp, {r1, r3}
   162e8:	bl	11580 <nanosleep@plt>
   162ec:	ldr	fp, [r5]
   162f0:	mov	r0, r7
   162f4:	bl	1194c <close@plt>
   162f8:	str	fp, [r5]
   162fc:	ldr	r2, [sp, #12]
   16300:	ldr	r3, [r8]
   16304:	mov	r0, r4
   16308:	cmp	r2, r3
   1630c:	bne	16348 <__assert_fail@plt+0x49cc>
   16310:	add	sp, sp, #20
   16314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16318:	ldr	fp, [r5]
   1631c:	cmp	fp, #4
   16320:	cmpne	fp, #11
   16324:	bne	16340 <__assert_fail@plt+0x49c4>
   16328:	cmp	fp, #11
   1632c:	bne	16280 <__assert_fail@plt+0x4904>
   16330:	b	162b4 <__assert_fail@plt+0x4938>
   16334:	ldr	r4, [r0]
   16338:	rsb	r4, r4, #0
   1633c:	b	162fc <__assert_fail@plt+0x4980>
   16340:	mvn	r4, #0
   16344:	b	162f0 <__assert_fail@plt+0x4974>
   16348:	bl	11604 <__stack_chk_fail@plt>
   1634c:	andeq	r4, r1, ip, lsl ip
   16350:	muleq	r0, ip, r1
   16354:	andeq	r0, r8, r1
   16358:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1635c:	push	{r2, r3}
   16360:	ldr	r3, [pc, #116]	; 163dc <__assert_fail@plt+0x4a60>
   16364:	ldr	r2, [pc, #116]	; 163e0 <__assert_fail@plt+0x4a64>
   16368:	add	r3, pc, r3
   1636c:	push	{r4, r5, r6, lr}
   16370:	sub	sp, sp, #8
   16374:	ldr	r4, [r3, r2]
   16378:	add	ip, sp, #28
   1637c:	mov	r2, ip
   16380:	ldr	r3, [r4]
   16384:	mov	r5, r1
   16388:	ldr	r1, [sp, #24]
   1638c:	str	ip, [sp]
   16390:	str	r3, [sp, #4]
   16394:	mov	r6, r0
   16398:	bl	141d4 <__assert_fail@plt+0x2858>
   1639c:	subs	r2, r0, #0
   163a0:	beq	163d0 <__assert_fail@plt+0x4a54>
   163a4:	mov	r1, r5
   163a8:	mov	r0, r6
   163ac:	bl	16228 <__assert_fail@plt+0x48ac>
   163b0:	ldr	r2, [sp, #4]
   163b4:	ldr	r3, [r4]
   163b8:	cmp	r2, r3
   163bc:	bne	163d8 <__assert_fail@plt+0x4a5c>
   163c0:	add	sp, sp, #8
   163c4:	pop	{r4, r5, r6, lr}
   163c8:	add	sp, sp, #8
   163cc:	bx	lr
   163d0:	mvn	r0, #21
   163d4:	b	163b0 <__assert_fail@plt+0x4a34>
   163d8:	bl	11604 <__stack_chk_fail@plt>
   163dc:	andeq	r4, r1, r4, ror #21
   163e0:	muleq	r0, ip, r1
   163e4:	ldr	ip, [pc, #328]	; 16534 <__assert_fail@plt+0x4bb8>
   163e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163ec:	add	ip, pc, ip
   163f0:	ldr	lr, [pc, #320]	; 16538 <__assert_fail@plt+0x4bbc>
   163f4:	sub	sp, sp, #60	; 0x3c
   163f8:	mov	r9, r3
   163fc:	ldr	r7, [ip, lr]
   16400:	mov	r3, ip
   16404:	ldr	r1, [pc, #304]	; 1653c <__assert_fail@plt+0x4bc0>
   16408:	ldr	r3, [r7]
   1640c:	mov	r8, r2
   16410:	ldr	r2, [sp, #96]	; 0x60
   16414:	str	r3, [sp, #52]	; 0x34
   16418:	bl	14dac <__assert_fail@plt+0x3430>
   1641c:	mov	r6, r0
   16420:	bl	11790 <__errno_location@plt>
   16424:	cmp	r6, #0
   16428:	mov	r5, r0
   1642c:	blt	1651c <__assert_fail@plt+0x4ba0>
   16430:	ldr	r2, [pc, #264]	; 16540 <__assert_fail@plt+0x4bc4>
   16434:	mov	r3, #21
   16438:	add	r2, pc, r2
   1643c:	strd	r8, [sp, #8]
   16440:	str	r2, [sp]
   16444:	add	r0, sp, #28
   16448:	mov	r1, r3
   1644c:	mov	r2, #1
   16450:	mov	r8, r0
   16454:	bl	11964 <__snprintf_chk@plt>
   16458:	mov	r9, #0
   1645c:	add	sl, sp, #20
   16460:	mov	r4, r0
   16464:	str	r9, [r5]
   16468:	mov	r2, r4
   1646c:	mov	r1, r8
   16470:	mov	r0, r6
   16474:	bl	11838 <write@plt>
   16478:	cmp	r0, #0
   1647c:	ble	164b4 <__assert_fail@plt+0x4b38>
   16480:	subs	r4, r4, r0
   16484:	ldr	fp, [r5]
   16488:	beq	164d0 <__assert_fail@plt+0x4b54>
   1648c:	cmp	fp, #11
   16490:	add	r8, r8, r0
   16494:	bne	16464 <__assert_fail@plt+0x4ae8>
   16498:	ldr	r3, [pc, #164]	; 16544 <__assert_fail@plt+0x4bc8>
   1649c:	mov	r1, #0
   164a0:	mov	r0, sl
   164a4:	str	r9, [sp, #20]
   164a8:	str	r3, [sp, #24]
   164ac:	bl	11580 <nanosleep@plt>
   164b0:	b	16464 <__assert_fail@plt+0x4ae8>
   164b4:	ldr	fp, [r5]
   164b8:	cmp	fp, #4
   164bc:	cmpne	fp, #11
   164c0:	bne	16528 <__assert_fail@plt+0x4bac>
   164c4:	cmp	fp, #11
   164c8:	bne	16464 <__assert_fail@plt+0x4ae8>
   164cc:	b	16498 <__assert_fail@plt+0x4b1c>
   164d0:	cmp	fp, #11
   164d4:	bne	164f4 <__assert_fail@plt+0x4b78>
   164d8:	ldr	r3, [pc, #100]	; 16544 <__assert_fail@plt+0x4bc8>
   164dc:	mov	r1, r4
   164e0:	add	r0, sp, #20
   164e4:	str	r4, [sp, #20]
   164e8:	str	r3, [sp, #24]
   164ec:	bl	11580 <nanosleep@plt>
   164f0:	ldr	fp, [r5]
   164f4:	mov	r0, r6
   164f8:	bl	1194c <close@plt>
   164fc:	str	fp, [r5]
   16500:	ldr	r2, [sp, #52]	; 0x34
   16504:	ldr	r3, [r7]
   16508:	mov	r0, r4
   1650c:	cmp	r2, r3
   16510:	bne	16530 <__assert_fail@plt+0x4bb4>
   16514:	add	sp, sp, #60	; 0x3c
   16518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1651c:	ldr	r4, [r0]
   16520:	rsb	r4, r4, #0
   16524:	b	16500 <__assert_fail@plt+0x4b84>
   16528:	mvn	r4, #0
   1652c:	b	164f4 <__assert_fail@plt+0x4b78>
   16530:	bl	11604 <__stack_chk_fail@plt>
   16534:	andeq	r4, r1, r0, ror #20
   16538:	muleq	r0, ip, r1
   1653c:	andeq	r0, r8, r1
   16540:	andeq	r3, r0, ip, ror r8
   16544:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   16548:	ldr	ip, [pc, #328]	; 16698 <__assert_fail@plt+0x4d1c>
   1654c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16550:	add	ip, pc, ip
   16554:	ldr	lr, [pc, #320]	; 1669c <__assert_fail@plt+0x4d20>
   16558:	sub	sp, sp, #76	; 0x4c
   1655c:	mov	r9, r3
   16560:	ldr	r7, [ip, lr]
   16564:	mov	r3, ip
   16568:	ldr	r1, [pc, #304]	; 166a0 <__assert_fail@plt+0x4d24>
   1656c:	ldr	r3, [r7]
   16570:	mov	r8, r2
   16574:	ldr	r2, [sp, #112]	; 0x70
   16578:	str	r3, [sp, #68]	; 0x44
   1657c:	bl	14dac <__assert_fail@plt+0x3430>
   16580:	mov	r6, r0
   16584:	bl	11790 <__errno_location@plt>
   16588:	cmp	r6, #0
   1658c:	mov	r5, r0
   16590:	blt	16680 <__assert_fail@plt+0x4d04>
   16594:	ldr	r2, [pc, #264]	; 166a4 <__assert_fail@plt+0x4d28>
   16598:	mov	r3, #37	; 0x25
   1659c:	add	r2, pc, r2
   165a0:	strd	r8, [sp, #8]
   165a4:	str	r2, [sp]
   165a8:	add	r0, sp, #28
   165ac:	mov	r1, r3
   165b0:	mov	r2, #1
   165b4:	mov	r8, r0
   165b8:	bl	11964 <__snprintf_chk@plt>
   165bc:	mov	r9, #0
   165c0:	add	sl, sp, #20
   165c4:	mov	r4, r0
   165c8:	str	r9, [r5]
   165cc:	mov	r2, r4
   165d0:	mov	r1, r8
   165d4:	mov	r0, r6
   165d8:	bl	11838 <write@plt>
   165dc:	cmp	r0, #0
   165e0:	ble	16618 <__assert_fail@plt+0x4c9c>
   165e4:	subs	r4, r4, r0
   165e8:	ldr	fp, [r5]
   165ec:	beq	16634 <__assert_fail@plt+0x4cb8>
   165f0:	cmp	fp, #11
   165f4:	add	r8, r8, r0
   165f8:	bne	165c8 <__assert_fail@plt+0x4c4c>
   165fc:	ldr	r3, [pc, #164]	; 166a8 <__assert_fail@plt+0x4d2c>
   16600:	mov	r1, #0
   16604:	mov	r0, sl
   16608:	str	r9, [sp, #20]
   1660c:	str	r3, [sp, #24]
   16610:	bl	11580 <nanosleep@plt>
   16614:	b	165c8 <__assert_fail@plt+0x4c4c>
   16618:	ldr	fp, [r5]
   1661c:	cmp	fp, #4
   16620:	cmpne	fp, #11
   16624:	bne	1668c <__assert_fail@plt+0x4d10>
   16628:	cmp	fp, #11
   1662c:	bne	165c8 <__assert_fail@plt+0x4c4c>
   16630:	b	165fc <__assert_fail@plt+0x4c80>
   16634:	cmp	fp, #11
   16638:	bne	16658 <__assert_fail@plt+0x4cdc>
   1663c:	ldr	r3, [pc, #100]	; 166a8 <__assert_fail@plt+0x4d2c>
   16640:	mov	r1, r4
   16644:	add	r0, sp, #20
   16648:	str	r4, [sp, #20]
   1664c:	str	r3, [sp, #24]
   16650:	bl	11580 <nanosleep@plt>
   16654:	ldr	fp, [r5]
   16658:	mov	r0, r6
   1665c:	bl	1194c <close@plt>
   16660:	str	fp, [r5]
   16664:	ldr	r2, [sp, #68]	; 0x44
   16668:	ldr	r3, [r7]
   1666c:	mov	r0, r4
   16670:	cmp	r2, r3
   16674:	bne	16694 <__assert_fail@plt+0x4d18>
   16678:	add	sp, sp, #76	; 0x4c
   1667c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16680:	ldr	r4, [r0]
   16684:	rsb	r4, r4, #0
   16688:	b	16664 <__assert_fail@plt+0x4ce8>
   1668c:	mvn	r4, #0
   16690:	b	16658 <__assert_fail@plt+0x4cdc>
   16694:	bl	11604 <__stack_chk_fail@plt>
   16698:	strdeq	r4, [r1], -ip
   1669c:	muleq	r0, ip, r1
   166a0:	andeq	r0, r8, r1
   166a4:	andeq	r3, r0, r0, lsr #14
   166a8:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   166ac:	ldr	r1, [pc, #124]	; 16730 <__assert_fail@plt+0x4db4>
   166b0:	ldr	ip, [pc, #124]	; 16734 <__assert_fail@plt+0x4db8>
   166b4:	add	r1, pc, r1
   166b8:	push	{r4, r5, r6, r7, lr}
   166bc:	sub	sp, sp, #20
   166c0:	ldr	r6, [r1, ip]
   166c4:	add	lr, sp, #44	; 0x2c
   166c8:	mov	r5, r3
   166cc:	mov	r3, r1
   166d0:	ldr	r3, [r6]
   166d4:	mov	r4, r2
   166d8:	ldr	r1, [sp, #40]	; 0x28
   166dc:	mov	r2, lr
   166e0:	str	lr, [sp, #8]
   166e4:	str	r3, [sp, #12]
   166e8:	mov	r7, r0
   166ec:	bl	141d4 <__assert_fail@plt+0x2858>
   166f0:	cmp	r0, #0
   166f4:	beq	16724 <__assert_fail@plt+0x4da8>
   166f8:	str	r0, [sp]
   166fc:	mov	r2, r4
   16700:	mov	r3, r5
   16704:	mov	r0, r7
   16708:	bl	16548 <__assert_fail@plt+0x4bcc>
   1670c:	ldr	r2, [sp, #12]
   16710:	ldr	r3, [r6]
   16714:	cmp	r2, r3
   16718:	bne	1672c <__assert_fail@plt+0x4db0>
   1671c:	add	sp, sp, #20
   16720:	pop	{r4, r5, r6, r7, pc}
   16724:	mvn	r0, #21
   16728:	b	1670c <__assert_fail@plt+0x4d90>
   1672c:	bl	11604 <__stack_chk_fail@plt>
   16730:	muleq	r1, r8, r7
   16734:	muleq	r0, ip, r1
   16738:	push	{r4, r5, r6, r7, r8, lr}
   1673c:	bl	15390 <__assert_fail@plt+0x3a14>
   16740:	subs	r6, r0, #0
   16744:	moveq	r5, r6
   16748:	beq	167a8 <__assert_fail@plt+0x4e2c>
   1674c:	ldr	r8, [pc, #92]	; 167b0 <__assert_fail@plt+0x4e34>
   16750:	ldr	r7, [pc, #92]	; 167b4 <__assert_fail@plt+0x4e38>
   16754:	mov	r5, #0
   16758:	add	r8, pc, r8
   1675c:	add	r7, pc, r7
   16760:	mov	r0, r6
   16764:	bl	118c8 <readdir64@plt>
   16768:	mov	r1, r8
   1676c:	cmp	r0, #0
   16770:	add	r4, r0, #19
   16774:	mov	r0, r4
   16778:	beq	167a0 <__assert_fail@plt+0x4e24>
   1677c:	bl	11514 <strcmp@plt>
   16780:	mov	r1, r7
   16784:	cmp	r0, #0
   16788:	mov	r0, r4
   1678c:	beq	16760 <__assert_fail@plt+0x4de4>
   16790:	bl	11514 <strcmp@plt>
   16794:	cmp	r0, #0
   16798:	addne	r5, r5, #1
   1679c:	b	16760 <__assert_fail@plt+0x4de4>
   167a0:	mov	r0, r6
   167a4:	bl	11958 <closedir@plt>
   167a8:	mov	r0, r5
   167ac:	pop	{r4, r5, r6, r7, r8, pc}
   167b0:	andeq	r3, r0, r4, lsl #7
   167b4:	andeq	r3, r0, r8, ror r5
   167b8:	push	{r1, r2, r3}
   167bc:	ldr	r3, [pc, #104]	; 1682c <__assert_fail@plt+0x4eb0>
   167c0:	ldr	r1, [pc, #104]	; 16830 <__assert_fail@plt+0x4eb4>
   167c4:	add	r3, pc, r3
   167c8:	push	{r4, r5, lr}
   167cc:	sub	sp, sp, #8
   167d0:	ldr	r4, [r3, r1]
   167d4:	add	ip, sp, #24
   167d8:	ldr	r1, [sp, #20]
   167dc:	ldr	r3, [r4]
   167e0:	mov	r2, ip
   167e4:	str	ip, [sp]
   167e8:	mov	r5, r0
   167ec:	str	r3, [sp, #4]
   167f0:	bl	141d4 <__assert_fail@plt+0x2858>
   167f4:	subs	r1, r0, #0
   167f8:	moveq	r0, r1
   167fc:	beq	16808 <__assert_fail@plt+0x4e8c>
   16800:	mov	r0, r5
   16804:	bl	16738 <__assert_fail@plt+0x4dbc>
   16808:	ldr	r2, [sp, #4]
   1680c:	ldr	r3, [r4]
   16810:	cmp	r2, r3
   16814:	bne	16828 <__assert_fail@plt+0x4eac>
   16818:	add	sp, sp, #8
   1681c:	pop	{r4, r5, lr}
   16820:	add	sp, sp, #12
   16824:	bx	lr
   16828:	bl	11604 <__stack_chk_fail@plt>
   1682c:	andeq	r4, r1, r8, lsl #13
   16830:	muleq	r0, ip, r1
   16834:	ldr	r3, [pc, #184]	; 168f4 <__assert_fail@plt+0x4f78>
   16838:	push	{r4, r5, r6, lr}
   1683c:	add	r3, pc, r3
   16840:	ldr	lr, [pc, #176]	; 168f8 <__assert_fail@plt+0x4f7c>
   16844:	sub	sp, sp, #4096	; 0x1000
   16848:	sub	sp, sp, #24
   1684c:	ldr	r5, [r3, lr]
   16850:	mov	r6, r2
   16854:	add	r2, sp, #4096	; 0x1000
   16858:	add	r2, r2, #20
   1685c:	ldr	r3, [r5]
   16860:	subs	ip, r1, #0
   16864:	str	r3, [r2]
   16868:	beq	168e8 <__assert_fail@plt+0x4f6c>
   1686c:	cmp	r0, #0
   16870:	beq	168d8 <__assert_fail@plt+0x4f5c>
   16874:	ldrsb	r3, [ip]
   16878:	ldr	r2, [pc, #124]	; 168fc <__assert_fail@plt+0x4f80>
   1687c:	add	r4, sp, #20
   16880:	cmp	r3, #47	; 0x2f
   16884:	addeq	ip, ip, #1
   16888:	add	r2, pc, r2
   1688c:	mov	r3, #4096	; 0x1000
   16890:	stmib	sp, {r0, ip}
   16894:	str	r2, [sp]
   16898:	mov	r1, r3
   1689c:	mov	r0, r4
   168a0:	mov	r2, #1
   168a4:	bl	11964 <__snprintf_chk@plt>
   168a8:	mov	r1, r6
   168ac:	mov	r0, r4
   168b0:	bl	118f8 <fopen64@plt>
   168b4:	add	r3, sp, #4096	; 0x1000
   168b8:	add	r3, r3, #20
   168bc:	ldr	r2, [r3]
   168c0:	ldr	r3, [r5]
   168c4:	cmp	r2, r3
   168c8:	bne	168f0 <__assert_fail@plt+0x4f74>
   168cc:	add	sp, sp, #4096	; 0x1000
   168d0:	add	sp, sp, #24
   168d4:	pop	{r4, r5, r6, pc}
   168d8:	mov	r1, r6
   168dc:	mov	r0, ip
   168e0:	bl	118f8 <fopen64@plt>
   168e4:	b	168b4 <__assert_fail@plt+0x4f38>
   168e8:	mov	r0, ip
   168ec:	b	168b4 <__assert_fail@plt+0x4f38>
   168f0:	bl	11604 <__stack_chk_fail@plt>
   168f4:	andeq	r4, r1, r0, lsl r6
   168f8:	muleq	r0, ip, r1
   168fc:	andeq	r3, r0, r8, lsr #5
   16900:	push	{r3}		; (str r3, [sp, #-4]!)
   16904:	ldr	r3, [pc, #88]	; 16964 <__assert_fail@plt+0x4fe8>
   16908:	ldr	ip, [pc, #88]	; 16968 <__assert_fail@plt+0x4fec>
   1690c:	add	r3, pc, r3
   16910:	push	{r4, lr}
   16914:	sub	sp, sp, #20
   16918:	ldr	r4, [r3, ip]
   1691c:	ldr	lr, [sp, #28]
   16920:	add	ip, sp, #32
   16924:	str	lr, [sp]
   16928:	ldr	r3, [r4]
   1692c:	str	ip, [sp, #4]
   16930:	str	r3, [sp, #12]
   16934:	mov	r3, #0
   16938:	str	ip, [sp, #8]
   1693c:	bl	151e4 <__assert_fail@plt+0x3868>
   16940:	ldr	r2, [sp, #12]
   16944:	ldr	r3, [r4]
   16948:	cmp	r2, r3
   1694c:	bne	16960 <__assert_fail@plt+0x4fe4>
   16950:	add	sp, sp, #20
   16954:	pop	{r4, lr}
   16958:	add	sp, sp, #4
   1695c:	bx	lr
   16960:	bl	11604 <__stack_chk_fail@plt>
   16964:	andeq	r4, r1, r0, asr #10
   16968:	muleq	r0, ip, r1
   1696c:	push	{r3}		; (str r3, [sp, #-4]!)
   16970:	ldr	r3, [pc, #88]	; 169d0 <__assert_fail@plt+0x5054>
   16974:	ldr	ip, [pc, #88]	; 169d4 <__assert_fail@plt+0x5058>
   16978:	add	r3, pc, r3
   1697c:	push	{r4, lr}
   16980:	sub	sp, sp, #20
   16984:	ldr	r4, [r3, ip]
   16988:	ldr	lr, [sp, #28]
   1698c:	add	ip, sp, #32
   16990:	str	lr, [sp]
   16994:	ldr	r3, [r4]
   16998:	str	ip, [sp, #4]
   1699c:	str	r3, [sp, #12]
   169a0:	mov	r3, #1
   169a4:	str	ip, [sp, #8]
   169a8:	bl	151e4 <__assert_fail@plt+0x3868>
   169ac:	ldr	r2, [sp, #12]
   169b0:	ldr	r3, [r4]
   169b4:	cmp	r2, r3
   169b8:	bne	169cc <__assert_fail@plt+0x5050>
   169bc:	add	sp, sp, #20
   169c0:	pop	{r4, lr}
   169c4:	add	sp, sp, #4
   169c8:	bx	lr
   169cc:	bl	11604 <__stack_chk_fail@plt>
   169d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   169d4:	muleq	r0, ip, r1
   169d8:	push	{r1, r2, r3}
   169dc:	subs	r3, r0, #0
   169e0:	ldr	r1, [pc, #168]	; 16a90 <__assert_fail@plt+0x5114>
   169e4:	ldr	r2, [pc, #168]	; 16a94 <__assert_fail@plt+0x5118>
   169e8:	add	r1, pc, r1
   169ec:	push	{r4, r5, r6, lr}
   169f0:	sub	sp, sp, #12
   169f4:	ldr	r5, [r1, r2]
   169f8:	ldr	r6, [sp, #28]
   169fc:	ldr	r2, [r5]
   16a00:	str	r2, [sp, #4]
   16a04:	beq	16a1c <__assert_fail@plt+0x50a0>
   16a08:	ldr	r2, [pc, #136]	; 16a98 <__assert_fail@plt+0x511c>
   16a0c:	add	r2, pc, r2
   16a10:	ldr	r2, [r2]
   16a14:	tst	r2, #16777216	; 0x1000000
   16a18:	beq	16a6c <__assert_fail@plt+0x50f0>
   16a1c:	ldr	r3, [pc, #120]	; 16a9c <__assert_fail@plt+0x5120>
   16a20:	ldr	r4, [r1, r3]
   16a24:	add	ip, sp, #32
   16a28:	mov	r2, r6
   16a2c:	mov	r3, ip
   16a30:	mov	r1, #1
   16a34:	ldr	r0, [r4]
   16a38:	str	ip, [sp]
   16a3c:	bl	116dc <__vfprintf_chk@plt>
   16a40:	ldr	r1, [r4]
   16a44:	mov	r0, #10
   16a48:	bl	118a4 <fputc@plt>
   16a4c:	ldr	r2, [sp, #4]
   16a50:	ldr	r3, [r5]
   16a54:	cmp	r2, r3
   16a58:	bne	16a8c <__assert_fail@plt+0x5110>
   16a5c:	add	sp, sp, #12
   16a60:	pop	{r4, r5, r6, lr}
   16a64:	add	sp, sp, #12
   16a68:	bx	lr
   16a6c:	ldr	r0, [pc, #40]	; 16a9c <__assert_fail@plt+0x5120>
   16a70:	ldr	r2, [pc, #40]	; 16aa0 <__assert_fail@plt+0x5124>
   16a74:	ldr	r4, [r1, r0]
   16a78:	add	r2, pc, r2
   16a7c:	mov	r1, #1
   16a80:	ldr	r0, [r4]
   16a84:	bl	11850 <__fprintf_chk@plt>
   16a88:	b	16a24 <__assert_fail@plt+0x50a8>
   16a8c:	bl	11604 <__stack_chk_fail@plt>
   16a90:	andeq	r4, r1, r4, ror #8
   16a94:	muleq	r0, ip, r1
   16a98:	andeq	r4, r1, r4, lsl r6
   16a9c:	andeq	r0, r0, r0, lsr #3
   16aa0:	strheq	r3, [r0], -r0
   16aa4:	ldr	r3, [pc, #184]	; 16b64 <__assert_fail@plt+0x51e8>
   16aa8:	push	{r4, r5, lr}
   16aac:	subs	r4, r0, #0
   16ab0:	sub	sp, sp, #12
   16ab4:	add	r3, pc, r3
   16ab8:	beq	16b08 <__assert_fail@plt+0x518c>
   16abc:	ldr	r2, [pc, #164]	; 16b68 <__assert_fail@plt+0x51ec>
   16ac0:	add	r2, pc, r2
   16ac4:	ldr	r2, [r2]
   16ac8:	tst	r2, #4
   16acc:	bne	16b10 <__assert_fail@plt+0x5194>
   16ad0:	mov	r0, r4
   16ad4:	bl	148e0 <__assert_fail@plt+0x2f64>
   16ad8:	subs	r5, r0, #0
   16adc:	beq	16b08 <__assert_fail@plt+0x518c>
   16ae0:	ldr	r0, [r5, #8]
   16ae4:	bl	143ac <__assert_fail@plt+0x2a30>
   16ae8:	mov	r0, r5
   16aec:	bl	11568 <free@plt>
   16af0:	mov	r2, #0
   16af4:	mov	r0, r4
   16af8:	mov	r1, r2
   16afc:	add	sp, sp, #12
   16b00:	pop	{r4, r5, lr}
   16b04:	b	1482c <__assert_fail@plt+0x2eb0>
   16b08:	add	sp, sp, #12
   16b0c:	pop	{r4, r5, pc}
   16b10:	ldr	r2, [pc, #84]	; 16b6c <__assert_fail@plt+0x51f0>
   16b14:	ldr	r3, [r3, r2]
   16b18:	ldr	r5, [r3]
   16b1c:	bl	11730 <getpid@plt>
   16b20:	ldr	r2, [pc, #72]	; 16b70 <__assert_fail@plt+0x51f4>
   16b24:	ldr	r3, [pc, #72]	; 16b74 <__assert_fail@plt+0x51f8>
   16b28:	add	r2, pc, r2
   16b2c:	str	r2, [sp, #4]
   16b30:	ldr	r2, [pc, #64]	; 16b78 <__assert_fail@plt+0x51fc>
   16b34:	add	r3, pc, r3
   16b38:	str	r3, [sp]
   16b3c:	add	r2, pc, r2
   16b40:	mov	r1, #1
   16b44:	mov	r3, r0
   16b48:	mov	r0, r5
   16b4c:	bl	11850 <__fprintf_chk@plt>
   16b50:	ldr	r1, [pc, #36]	; 16b7c <__assert_fail@plt+0x5200>
   16b54:	mov	r0, r4
   16b58:	add	r1, pc, r1
   16b5c:	bl	169d8 <__assert_fail@plt+0x505c>
   16b60:	b	16ad0 <__assert_fail@plt+0x5154>
   16b64:	muleq	r1, r8, r3
   16b68:	andeq	r4, r1, r0, ror #10
   16b6c:	andeq	r0, r0, r0, lsr #3
   16b70:	andeq	r3, r0, r8, ror r0
   16b74:	andeq	r3, r0, r0, asr #3
   16b78:	andeq	r3, r0, r4, asr r0
   16b7c:	andeq	r3, r0, r4, lsr #3
   16b80:	push	{r4, r5, r6, r7, r8, lr}
   16b84:	mov	r7, r0
   16b88:	ldr	r6, [pc, #76]	; 16bdc <__assert_fail@plt+0x5260>
   16b8c:	ldr	r8, [pc, #76]	; 16be0 <__assert_fail@plt+0x5264>
   16b90:	add	r6, pc, r6
   16b94:	add	r8, pc, r8
   16b98:	mov	r0, r7
   16b9c:	bl	118c8 <readdir64@plt>
   16ba0:	mov	r1, r6
   16ba4:	subs	r5, r0, #0
   16ba8:	add	r4, r5, #19
   16bac:	mov	r0, r4
   16bb0:	beq	16bd4 <__assert_fail@plt+0x5258>
   16bb4:	bl	11514 <strcmp@plt>
   16bb8:	mov	r1, r8
   16bbc:	cmp	r0, #0
   16bc0:	mov	r0, r4
   16bc4:	beq	16b98 <__assert_fail@plt+0x521c>
   16bc8:	bl	11514 <strcmp@plt>
   16bcc:	cmp	r0, #0
   16bd0:	beq	16b98 <__assert_fail@plt+0x521c>
   16bd4:	mov	r0, r5
   16bd8:	pop	{r4, r5, r6, r7, r8, pc}
   16bdc:	andeq	r2, r0, ip, asr #30
   16be0:	andeq	r3, r0, r0, asr #2
   16be4:	ldr	r3, [pc, #196]	; 16cb0 <__assert_fail@plt+0x5334>
   16be8:	ldr	r2, [pc, #196]	; 16cb4 <__assert_fail@plt+0x5338>
   16bec:	add	r3, pc, r3
   16bf0:	push	{r4, r5, r6, r7, lr}
   16bf4:	sub	sp, sp, #20
   16bf8:	ldr	r6, [r3, r2]
   16bfc:	ldr	r1, [pc, #180]	; 16cb8 <__assert_fail@plt+0x533c>
   16c00:	mov	r4, #0
   16c04:	ldr	r3, [r6]
   16c08:	add	r1, pc, r1
   16c0c:	str	r4, [sp, #4]
   16c10:	str	r4, [sp, #8]
   16c14:	str	r3, [sp, #12]
   16c18:	bl	118f8 <fopen64@plt>
   16c1c:	subs	r7, r0, #0
   16c20:	beq	16ca0 <__assert_fail@plt+0x5324>
   16c24:	ldr	r1, [pc, #144]	; 16cbc <__assert_fail@plt+0x5340>
   16c28:	add	r3, sp, #8
   16c2c:	add	r2, sp, #4
   16c30:	add	r1, pc, r1
   16c34:	bl	11808 <fscanf@plt>
   16c38:	cmp	r0, #2
   16c3c:	movne	r5, r4
   16c40:	beq	16c6c <__assert_fail@plt+0x52f0>
   16c44:	mov	r0, r7
   16c48:	bl	1185c <fclose@plt>
   16c4c:	ldr	r2, [sp, #12]
   16c50:	ldr	r3, [r6]
   16c54:	mov	r0, r4
   16c58:	cmp	r2, r3
   16c5c:	mov	r1, r5
   16c60:	bne	16cac <__assert_fail@plt+0x5330>
   16c64:	add	sp, sp, #20
   16c68:	pop	{r4, r5, r6, r7, pc}
   16c6c:	ldr	r1, [sp, #8]
   16c70:	ldr	r5, [sp, #4]
   16c74:	ldr	r2, [pc, #68]	; 16cc0 <__assert_fail@plt+0x5344>
   16c78:	sub	r4, r4, #1048576	; 0x100000
   16c7c:	and	r2, r2, r5, lsl #8
   16c80:	uxtb	r3, r1
   16c84:	bic	r5, r5, #4080	; 0xff0
   16c88:	orr	r3, r3, r2
   16c8c:	bic	r5, r5, #15
   16c90:	and	r4, r4, r1, lsl #12
   16c94:	orr	r5, r5, r1, lsr #20
   16c98:	orr	r4, r4, r3
   16c9c:	b	16c44 <__assert_fail@plt+0x52c8>
   16ca0:	mov	r4, r7
   16ca4:	mov	r5, r7
   16ca8:	b	16c4c <__assert_fail@plt+0x52d0>
   16cac:	bl	11604 <__stack_chk_fail@plt>
   16cb0:	andeq	r4, r1, r0, ror #4
   16cb4:	muleq	r0, ip, r1
   16cb8:	andeq	r3, r0, r0, ror r0
   16cbc:	muleq	r0, ip, r0
   16cc0:	andeq	pc, pc, r0, lsl #30
   16cc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   16cc8:	sub	sp, sp, #12
   16ccc:	mov	r6, r1
   16cd0:	mov	r7, r2
   16cd4:	mov	r8, r0
   16cd8:	bl	148e0 <__assert_fail@plt+0x2f64>
   16cdc:	ldr	r4, [pc, #188]	; 16da0 <__assert_fail@plt+0x5424>
   16ce0:	add	r4, pc, r4
   16ce4:	cmp	r0, #0
   16ce8:	beq	16d14 <__assert_fail@plt+0x5398>
   16cec:	ldr	r5, [r0, #8]
   16cf0:	cmp	r5, #0
   16cf4:	beq	16d14 <__assert_fail@plt+0x5398>
   16cf8:	ldr	r1, [pc, #164]	; 16da4 <__assert_fail@plt+0x5428>
   16cfc:	mov	r2, #6
   16d00:	add	r1, pc, r1
   16d04:	mov	r0, r6
   16d08:	bl	11934 <strncmp@plt>
   16d0c:	subs	r9, r0, #0
   16d10:	beq	16d20 <__assert_fail@plt+0x53a4>
   16d14:	mov	r0, #1
   16d18:	add	sp, sp, #12
   16d1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d20:	mov	r0, r5
   16d24:	bl	14900 <__assert_fail@plt+0x2f84>
   16d28:	cmp	r0, #0
   16d2c:	str	r0, [r7]
   16d30:	blt	16d14 <__assert_fail@plt+0x5398>
   16d34:	ldr	r3, [pc, #108]	; 16da8 <__assert_fail@plt+0x542c>
   16d38:	ldr	r0, [pc, r3]
   16d3c:	ands	r0, r0, #4
   16d40:	beq	16d18 <__assert_fail@plt+0x539c>
   16d44:	ldr	r3, [pc, #96]	; 16dac <__assert_fail@plt+0x5430>
   16d48:	ldr	r3, [r4, r3]
   16d4c:	ldr	r4, [r3]
   16d50:	bl	11730 <getpid@plt>
   16d54:	ldr	r2, [pc, #84]	; 16db0 <__assert_fail@plt+0x5434>
   16d58:	ldr	r3, [pc, #84]	; 16db4 <__assert_fail@plt+0x5438>
   16d5c:	add	r2, pc, r2
   16d60:	str	r2, [sp, #4]
   16d64:	ldr	r2, [pc, #76]	; 16db8 <__assert_fail@plt+0x543c>
   16d68:	add	r3, pc, r3
   16d6c:	str	r3, [sp]
   16d70:	add	r2, pc, r2
   16d74:	mov	r1, #1
   16d78:	mov	r3, r0
   16d7c:	mov	r0, r4
   16d80:	bl	11850 <__fprintf_chk@plt>
   16d84:	ldr	r1, [pc, #48]	; 16dbc <__assert_fail@plt+0x5440>
   16d88:	mov	r0, r8
   16d8c:	mov	r2, r6
   16d90:	add	r1, pc, r1
   16d94:	bl	169d8 <__assert_fail@plt+0x505c>
   16d98:	mov	r0, r9
   16d9c:	b	16d18 <__assert_fail@plt+0x539c>
   16da0:	andeq	r4, r1, ip, ror #2
   16da4:	andeq	r3, r0, r4
   16da8:	andeq	r4, r1, r8, ror #5
   16dac:	andeq	r0, r0, r0, lsr #3
   16db0:	andeq	r2, r0, r4, asr #28
   16db4:	andeq	r2, r0, ip, lsl #31
   16db8:	andeq	r2, r0, r0, lsr #28
   16dbc:	andeq	r2, r0, ip, ror pc
   16dc0:	push	{r4, r5, r6, r7, lr}
   16dc4:	sub	sp, sp, #20
   16dc8:	ldr	r4, [pc, #312]	; 16f08 <__assert_fail@plt+0x558c>
   16dcc:	ldr	r3, [pc, #312]	; 16f0c <__assert_fail@plt+0x5590>
   16dd0:	add	r4, pc, r4
   16dd4:	ldr	r7, [pc, #308]	; 16f10 <__assert_fail@plt+0x5594>
   16dd8:	ldr	r5, [r4, r3]
   16ddc:	add	r7, pc, r7
   16de0:	ldr	r6, [r7]
   16de4:	ldr	r3, [r5]
   16de8:	cmp	r6, #0
   16dec:	str	r3, [sp, #12]
   16df0:	beq	16e0c <__assert_fail@plt+0x5490>
   16df4:	ldr	r2, [sp, #12]
   16df8:	ldr	r3, [r5]
   16dfc:	cmp	r2, r3
   16e00:	bne	16f04 <__assert_fail@plt+0x5588>
   16e04:	add	sp, sp, #20
   16e08:	pop	{r4, r5, r6, r7, pc}
   16e0c:	ldr	r0, [pc, #256]	; 16f14 <__assert_fail@plt+0x5598>
   16e10:	add	r0, pc, r0
   16e14:	bl	116ac <getenv@plt>
   16e18:	cmp	r0, #0
   16e1c:	beq	16e64 <__assert_fail@plt+0x54e8>
   16e20:	mov	r2, r6
   16e24:	add	r1, sp, #8
   16e28:	bl	11754 <strtoul@plt>
   16e2c:	mov	r6, r0
   16e30:	ldr	r0, [sp, #8]
   16e34:	cmp	r0, #0
   16e38:	beq	16e50 <__assert_fail@plt+0x54d4>
   16e3c:	ldr	r1, [pc, #212]	; 16f18 <__assert_fail@plt+0x559c>
   16e40:	add	r1, pc, r1
   16e44:	bl	11514 <strcmp@plt>
   16e48:	cmp	r0, #0
   16e4c:	beq	16e78 <__assert_fail@plt+0x54fc>
   16e50:	ldr	r3, [pc, #196]	; 16f1c <__assert_fail@plt+0x55a0>
   16e54:	cmp	r6, #0
   16e58:	add	r3, pc, r3
   16e5c:	str	r6, [r3]
   16e60:	bne	16e84 <__assert_fail@plt+0x5508>
   16e64:	mov	r3, #2
   16e68:	ldr	r2, [pc, #176]	; 16f20 <__assert_fail@plt+0x55a4>
   16e6c:	add	r2, pc, r2
   16e70:	str	r3, [r2]
   16e74:	b	16df4 <__assert_fail@plt+0x5478>
   16e78:	ldr	r3, [pc, #164]	; 16f24 <__assert_fail@plt+0x55a8>
   16e7c:	mov	r6, r3
   16e80:	str	r3, [r7]
   16e84:	bl	11550 <getuid@plt>
   16e88:	mov	r7, r0
   16e8c:	bl	11634 <geteuid@plt>
   16e90:	cmp	r7, r0
   16e94:	beq	16ee8 <__assert_fail@plt+0x556c>
   16e98:	ldr	r7, [pc, #136]	; 16f28 <__assert_fail@plt+0x55ac>
   16e9c:	ldr	r2, [pc, #136]	; 16f2c <__assert_fail@plt+0x55b0>
   16ea0:	add	r7, pc, r7
   16ea4:	orr	r3, r6, #16777216	; 0x1000000
   16ea8:	str	r3, [r7]
   16eac:	ldr	r3, [r4, r2]
   16eb0:	ldr	r4, [r3]
   16eb4:	bl	11730 <getpid@plt>
   16eb8:	ldr	r3, [pc, #112]	; 16f30 <__assert_fail@plt+0x55b4>
   16ebc:	ldr	r2, [pc, #112]	; 16f34 <__assert_fail@plt+0x55b8>
   16ec0:	add	r3, pc, r3
   16ec4:	str	r3, [sp]
   16ec8:	add	r2, pc, r2
   16ecc:	mov	r1, #1
   16ed0:	mov	r3, r0
   16ed4:	mov	r0, r4
   16ed8:	bl	11850 <__fprintf_chk@plt>
   16edc:	ldr	r3, [r7]
   16ee0:	orr	r3, r3, #2
   16ee4:	b	16e68 <__assert_fail@plt+0x54ec>
   16ee8:	bl	117cc <getgid@plt>
   16eec:	mov	r7, r0
   16ef0:	bl	11664 <getegid@plt>
   16ef4:	cmp	r7, r0
   16ef8:	orreq	r3, r6, #2
   16efc:	bne	16e98 <__assert_fail@plt+0x551c>
   16f00:	b	16e68 <__assert_fail@plt+0x54ec>
   16f04:	bl	11604 <__stack_chk_fail@plt>
   16f08:	andeq	r4, r1, ip, ror r0
   16f0c:	muleq	r0, ip, r1
   16f10:	andeq	r4, r1, r4, asr #4
   16f14:	andeq	r2, r0, r4, lsl pc
   16f18:	andeq	r2, r0, r8, lsl #26
   16f1c:	andeq	r4, r1, r8, asr #3
   16f20:			; <UNDEFINED> instruction: 0x000141b4
   16f24:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   16f28:	andeq	r4, r1, r0, lsl #3
   16f2c:	andeq	r0, r0, r0, lsr #3
   16f30:	andeq	r2, r0, r4, lsr lr
   16f34:	andeq	r2, r0, r4, lsl #25
   16f38:	push	{r4, r5, r6, r7, r8, lr}
   16f3c:	sub	sp, sp, #8
   16f40:	mov	r7, r0
   16f44:	mov	r6, r1
   16f48:	bl	148e0 <__assert_fail@plt+0x2f64>
   16f4c:	cmp	r7, #0
   16f50:	ldr	r8, [pc, #196]	; 1701c <__assert_fail@plt+0x56a0>
   16f54:	moveq	r4, #1
   16f58:	add	r8, pc, r8
   16f5c:	clz	r3, r0
   16f60:	lsr	r3, r3, #5
   16f64:	movne	r4, r3
   16f68:	cmp	r4, #0
   16f6c:	bne	17014 <__assert_fail@plt+0x5698>
   16f70:	mov	r5, r0
   16f74:	ldr	r0, [r0, #8]
   16f78:	cmp	r0, #0
   16f7c:	beq	16f88 <__assert_fail@plt+0x560c>
   16f80:	bl	143c0 <__assert_fail@plt+0x2a44>
   16f84:	str	r4, [r5, #8]
   16f88:	cmp	r6, #0
   16f8c:	streq	r6, [r5, #8]
   16f90:	beq	16fa0 <__assert_fail@plt+0x5624>
   16f94:	mov	r0, r6
   16f98:	bl	143ac <__assert_fail@plt+0x2a30>
   16f9c:	str	r6, [r5, #8]
   16fa0:	ldr	r3, [pc, #120]	; 17020 <__assert_fail@plt+0x56a4>
   16fa4:	ldr	r0, [pc, r3]
   16fa8:	ands	r0, r0, #4
   16fac:	bne	16fb8 <__assert_fail@plt+0x563c>
   16fb0:	add	sp, sp, #8
   16fb4:	pop	{r4, r5, r6, r7, r8, pc}
   16fb8:	ldr	r3, [pc, #100]	; 17024 <__assert_fail@plt+0x56a8>
   16fbc:	ldr	r3, [r8, r3]
   16fc0:	ldr	r4, [r3]
   16fc4:	bl	11730 <getpid@plt>
   16fc8:	ldr	r2, [pc, #88]	; 17028 <__assert_fail@plt+0x56ac>
   16fcc:	ldr	r3, [pc, #88]	; 1702c <__assert_fail@plt+0x56b0>
   16fd0:	add	r2, pc, r2
   16fd4:	str	r2, [sp, #4]
   16fd8:	ldr	r2, [pc, #80]	; 17030 <__assert_fail@plt+0x56b4>
   16fdc:	add	r3, pc, r3
   16fe0:	str	r3, [sp]
   16fe4:	add	r2, pc, r2
   16fe8:	mov	r1, #1
   16fec:	mov	r3, r0
   16ff0:	mov	r0, r4
   16ff4:	bl	11850 <__fprintf_chk@plt>
   16ff8:	ldr	r1, [pc, #52]	; 17034 <__assert_fail@plt+0x56b8>
   16ffc:	mov	r0, r7
   17000:	add	r1, pc, r1
   17004:	bl	169d8 <__assert_fail@plt+0x505c>
   17008:	mov	r0, #0
   1700c:	add	sp, sp, #8
   17010:	pop	{r4, r5, r6, r7, r8, pc}
   17014:	mvn	r0, #21
   17018:	b	16fb0 <__assert_fail@plt+0x5634>
   1701c:	strdeq	r3, [r1], -r4
   17020:	andeq	r4, r1, ip, ror r0
   17024:	andeq	r0, r0, r0, lsr #3
   17028:	ldrdeq	r2, [r0], -r0
   1702c:	andeq	r2, r0, r8, lsl sp
   17030:	andeq	r2, r0, ip, lsr #23
   17034:	andeq	r2, r0, r4, lsr sp
   17038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1703c:	mov	r5, r3
   17040:	ldr	r6, [pc, #496]	; 17238 <__assert_fail@plt+0x58bc>
   17044:	ldr	r1, [pc, #496]	; 1723c <__assert_fail@plt+0x58c0>
   17048:	add	r6, pc, r6
   1704c:	lsr	r3, r2, #12
   17050:	ldr	r7, [r6, r1]
   17054:	lsl	lr, r2, #12
   17058:	orr	r3, r3, r5, lsl #20
   1705c:	bic	r1, r5, #4080	; 0xff0
   17060:	bic	r3, r3, #255	; 0xff
   17064:	mov	r4, r2
   17068:	bic	r1, r1, #15
   1706c:	uxtb	r2, r2
   17070:	sub	sp, sp, #84	; 0x54
   17074:	orr	r2, r3, r2
   17078:	orr	r1, r1, lr, lsr #20
   1707c:	ldr	ip, [pc, #444]	; 17240 <__assert_fail@plt+0x58c4>
   17080:	ldr	lr, [r7]
   17084:	add	ip, pc, ip
   17088:	mov	r3, #46	; 0x2e
   1708c:	stmib	sp, {r1, r2}
   17090:	add	r2, sp, #28
   17094:	mov	r1, r3
   17098:	mov	r8, r0
   1709c:	str	r2, [sp, #20]
   170a0:	mov	r0, r2
   170a4:	str	ip, [sp]
   170a8:	mov	r2, #1
   170ac:	str	lr, [sp, #76]	; 0x4c
   170b0:	ldr	sl, [sp, #120]	; 0x78
   170b4:	bl	11964 <__snprintf_chk@plt>
   170b8:	ldr	r1, [sp, #20]
   170bc:	mov	r0, r8
   170c0:	bl	14730 <__assert_fail@plt+0x2db4>
   170c4:	subs	r9, r0, #0
   170c8:	beq	170e8 <__assert_fail@plt+0x576c>
   170cc:	ldr	r2, [sp, #76]	; 0x4c
   170d0:	ldr	r3, [r7]
   170d4:	mov	r0, r9
   170d8:	cmp	r2, r3
   170dc:	bne	17234 <__assert_fail@plt+0x58b8>
   170e0:	add	sp, sp, #84	; 0x54
   170e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e8:	mov	r0, r8
   170ec:	bl	14900 <__assert_fail@plt+0x2f84>
   170f0:	cmp	r0, #0
   170f4:	movlt	r9, r0
   170f8:	blt	170cc <__assert_fail@plt+0x5750>
   170fc:	mov	r0, r8
   17100:	bl	148e0 <__assert_fail@plt+0x2f64>
   17104:	subs	fp, r0, #0
   17108:	beq	17188 <__assert_fail@plt+0x580c>
   1710c:	ldr	r3, [pc, #304]	; 17244 <__assert_fail@plt+0x58c8>
   17110:	add	r3, pc, r3
   17114:	ldr	r3, [r3]
   17118:	tst	r3, #4
   1711c:	bne	17134 <__assert_fail@plt+0x57b8>
   17120:	strd	r4, [fp]
   17124:	mov	r1, sl
   17128:	mov	r0, r8
   1712c:	bl	16f38 <__assert_fail@plt+0x55bc>
   17130:	b	170cc <__assert_fail@plt+0x5750>
   17134:	ldr	r3, [pc, #268]	; 17248 <__assert_fail@plt+0x58cc>
   17138:	ldr	r3, [r6, r3]
   1713c:	ldr	r6, [r3]
   17140:	bl	11730 <getpid@plt>
   17144:	ldr	r2, [pc, #256]	; 1724c <__assert_fail@plt+0x58d0>
   17148:	ldr	r3, [pc, #256]	; 17250 <__assert_fail@plt+0x58d4>
   1714c:	add	r2, pc, r2
   17150:	str	r2, [sp, #4]
   17154:	ldr	r2, [pc, #248]	; 17254 <__assert_fail@plt+0x58d8>
   17158:	add	r3, pc, r3
   1715c:	str	r3, [sp]
   17160:	add	r2, pc, r2
   17164:	mov	r1, #1
   17168:	mov	r3, r0
   1716c:	mov	r0, r6
   17170:	bl	11850 <__fprintf_chk@plt>
   17174:	ldr	r1, [pc, #220]	; 17258 <__assert_fail@plt+0x58dc>
   17178:	mov	r0, r8
   1717c:	add	r1, pc, r1
   17180:	bl	169d8 <__assert_fail@plt+0x505c>
   17184:	b	17120 <__assert_fail@plt+0x57a4>
   17188:	ldr	r3, [pc, #204]	; 1725c <__assert_fail@plt+0x58e0>
   1718c:	add	r3, pc, r3
   17190:	ldr	r3, [r3]
   17194:	tst	r3, #4
   17198:	bne	171d8 <__assert_fail@plt+0x585c>
   1719c:	mov	r1, #32
   171a0:	mov	r0, #1
   171a4:	bl	114e4 <calloc@plt>
   171a8:	subs	fp, r0, #0
   171ac:	beq	1722c <__assert_fail@plt+0x58b0>
   171b0:	ldr	r2, [pc, #168]	; 17260 <__assert_fail@plt+0x58e4>
   171b4:	mov	r1, fp
   171b8:	add	r2, pc, r2
   171bc:	mov	r0, r8
   171c0:	bl	1482c <__assert_fail@plt+0x2eb0>
   171c4:	ldr	r1, [pc, #152]	; 17264 <__assert_fail@plt+0x58e8>
   171c8:	mov	r0, r8
   171cc:	add	r1, pc, r1
   171d0:	bl	148f0 <__assert_fail@plt+0x2f74>
   171d4:	b	1710c <__assert_fail@plt+0x5790>
   171d8:	ldr	r3, [pc, #104]	; 17248 <__assert_fail@plt+0x58cc>
   171dc:	ldr	r3, [r6, r3]
   171e0:	ldr	fp, [r3]
   171e4:	bl	11730 <getpid@plt>
   171e8:	ldr	r2, [pc, #120]	; 17268 <__assert_fail@plt+0x58ec>
   171ec:	ldr	r3, [pc, #120]	; 1726c <__assert_fail@plt+0x58f0>
   171f0:	add	r2, pc, r2
   171f4:	str	r2, [sp, #4]
   171f8:	ldr	r2, [pc, #112]	; 17270 <__assert_fail@plt+0x58f4>
   171fc:	add	r3, pc, r3
   17200:	str	r3, [sp]
   17204:	add	r2, pc, r2
   17208:	mov	r1, #1
   1720c:	mov	r3, r0
   17210:	mov	r0, fp
   17214:	bl	11850 <__fprintf_chk@plt>
   17218:	ldr	r1, [pc, #84]	; 17274 <__assert_fail@plt+0x58f8>
   1721c:	mov	r0, r8
   17220:	add	r1, pc, r1
   17224:	bl	169d8 <__assert_fail@plt+0x505c>
   17228:	b	1719c <__assert_fail@plt+0x5820>
   1722c:	mvn	r9, #11
   17230:	b	170cc <__assert_fail@plt+0x5750>
   17234:	bl	11604 <__stack_chk_fail@plt>
   17238:	andeq	r3, r1, r4, lsl #28
   1723c:	muleq	r0, ip, r1
   17240:			; <UNDEFINED> instruction: 0x00002cbc
   17244:	andeq	r3, r1, r0, lsl pc
   17248:	andeq	r0, r0, r0, lsr #3
   1724c:	andeq	r2, r0, r4, asr sl
   17250:	muleq	r0, ip, fp
   17254:	andeq	r2, r0, r0, lsr sl
   17258:	strdeq	r2, [r0], -r4
   1725c:	muleq	r1, r4, lr
   17260:			; <UNDEFINED> instruction: 0xfffff8e4
   17264:			; <UNDEFINED> instruction: 0xfffffaf0
   17268:			; <UNDEFINED> instruction: 0x000029b0
   1726c:	strdeq	r2, [r0], -r8
   17270:	andeq	r2, r0, ip, lsl #19
   17274:	andeq	r2, r0, r8, lsr fp
   17278:	push	{r4, r5, r6, r7, r8, r9, lr}
   1727c:	mov	r8, r0
   17280:	sub	sp, sp, #12
   17284:	mov	r0, #0
   17288:	mov	r9, r1
   1728c:	mov	r7, r2
   17290:	mov	r5, r3
   17294:	bl	144c8 <__assert_fail@plt+0x2b4c>
   17298:	ldr	r6, [pc, #192]	; 17360 <__assert_fail@plt+0x59e4>
   1729c:	add	r6, pc, r6
   172a0:	subs	r4, r0, #0
   172a4:	beq	172e8 <__assert_fail@plt+0x596c>
   172a8:	cmp	r5, #0
   172ac:	beq	172b8 <__assert_fail@plt+0x593c>
   172b0:	mov	r1, r5
   172b4:	bl	1460c <__assert_fail@plt+0x2c90>
   172b8:	str	r7, [sp]
   172bc:	mov	r2, r8
   172c0:	mov	r3, r9
   172c4:	mov	r0, r4
   172c8:	bl	17038 <__assert_fail@plt+0x56bc>
   172cc:	cmp	r0, #0
   172d0:	bne	17350 <__assert_fail@plt+0x59d4>
   172d4:	ldr	r3, [pc, #136]	; 17364 <__assert_fail@plt+0x59e8>
   172d8:	add	r3, pc, r3
   172dc:	ldr	r3, [r3]
   172e0:	tst	r3, #4
   172e4:	bne	172f4 <__assert_fail@plt+0x5978>
   172e8:	mov	r0, r4
   172ec:	add	sp, sp, #12
   172f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   172f4:	ldr	r3, [pc, #108]	; 17368 <__assert_fail@plt+0x59ec>
   172f8:	ldr	r3, [r6, r3]
   172fc:	ldr	r5, [r3]
   17300:	bl	11730 <getpid@plt>
   17304:	ldr	r2, [pc, #96]	; 1736c <__assert_fail@plt+0x59f0>
   17308:	ldr	r3, [pc, #96]	; 17370 <__assert_fail@plt+0x59f4>
   1730c:	add	r2, pc, r2
   17310:	str	r2, [sp, #4]
   17314:	ldr	r2, [pc, #88]	; 17374 <__assert_fail@plt+0x59f8>
   17318:	add	r3, pc, r3
   1731c:	str	r3, [sp]
   17320:	add	r2, pc, r2
   17324:	mov	r1, #1
   17328:	mov	r3, r0
   1732c:	mov	r0, r5
   17330:	bl	11850 <__fprintf_chk@plt>
   17334:	ldr	r1, [pc, #60]	; 17378 <__assert_fail@plt+0x59fc>
   17338:	mov	r0, r4
   1733c:	add	r1, pc, r1
   17340:	bl	169d8 <__assert_fail@plt+0x505c>
   17344:	mov	r0, r4
   17348:	add	sp, sp, #12
   1734c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17350:	mov	r0, r4
   17354:	bl	143c0 <__assert_fail@plt+0x2a44>
   17358:	mov	r4, #0
   1735c:	b	172e8 <__assert_fail@plt+0x596c>
   17360:			; <UNDEFINED> instruction: 0x00013bb0
   17364:	andeq	r3, r1, r8, asr #26
   17368:	andeq	r0, r0, r0, lsr #3
   1736c:	muleq	r0, r4, r8
   17370:	ldrdeq	r2, [r0], -ip
   17374:	andeq	r2, r0, r0, ror r8
   17378:	andeq	r2, r0, r0, ror r8
   1737c:	push	{r4, lr}
   17380:	bl	148e0 <__assert_fail@plt+0x2f64>
   17384:	cmp	r0, #0
   17388:	ldrne	r0, [r0, #8]
   1738c:	pop	{r4, pc}
   17390:	ldr	ip, [pc, #228]	; 1747c <__assert_fail@plt+0x5b00>
   17394:	ldr	r3, [pc, #228]	; 17480 <__assert_fail@plt+0x5b04>
   17398:	add	ip, pc, ip
   1739c:	push	{r4, r5, r6, r7, r8, lr}
   173a0:	sub	sp, sp, #4096	; 0x1000
   173a4:	ldr	r7, [ip, r3]
   173a8:	sub	sp, sp, #8
   173ac:	add	r4, sp, #8
   173b0:	add	ip, sp, #4096	; 0x1000
   173b4:	ldr	lr, [r7]
   173b8:	add	ip, ip, #4
   173bc:	sub	r6, r4, #4
   173c0:	mov	r5, r1
   173c4:	mov	r8, r2
   173c8:	mov	r1, r6
   173cc:	mov	r3, #0
   173d0:	ldr	r2, [pc, #172]	; 17484 <__assert_fail@plt+0x5b08>
   173d4:	str	lr, [ip]
   173d8:	bl	15544 <__assert_fail@plt+0x3bc8>
   173dc:	cmp	r0, #0
   173e0:	blt	17470 <__assert_fail@plt+0x5af4>
   173e4:	add	r4, r4, r0
   173e8:	mov	r3, #0
   173ec:	mov	r0, r6
   173f0:	mov	r1, #47	; 0x2f
   173f4:	strb	r3, [r4, #-4]
   173f8:	bl	1188c <strrchr@plt>
   173fc:	cmp	r0, #0
   17400:	beq	17470 <__assert_fail@plt+0x5af4>
   17404:	add	r4, r0, #1
   17408:	mov	r0, r4
   1740c:	bl	11760 <strlen@plt>
   17410:	add	r2, r0, #1
   17414:	cmp	r2, r8
   17418:	bhi	17470 <__assert_fail@plt+0x5af4>
   1741c:	mov	r1, r4
   17420:	mov	r0, r5
   17424:	bl	115d4 <memcpy@plt>
   17428:	mov	r4, #47	; 0x2f
   1742c:	b	17434 <__assert_fail@plt+0x5ab8>
   17430:	strb	r4, [r0]
   17434:	mov	r1, #33	; 0x21
   17438:	mov	r0, r5
   1743c:	bl	1176c <strchr@plt>
   17440:	cmp	r0, #0
   17444:	bne	17430 <__assert_fail@plt+0x5ab4>
   17448:	add	r3, sp, #4096	; 0x1000
   1744c:	add	r3, r3, #4
   17450:	ldr	r2, [r3]
   17454:	ldr	r3, [r7]
   17458:	mov	r0, r5
   1745c:	cmp	r2, r3
   17460:	bne	17478 <__assert_fail@plt+0x5afc>
   17464:	add	sp, sp, #4096	; 0x1000
   17468:	add	sp, sp, #8
   1746c:	pop	{r4, r5, r6, r7, r8, pc}
   17470:	mov	r5, #0
   17474:	b	17448 <__assert_fail@plt+0x5acc>
   17478:	bl	11604 <__stack_chk_fail@plt>
   1747c:			; <UNDEFINED> instruction: 0x00013ab4
   17480:	muleq	r0, ip, r1
   17484:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17488:	ldr	r3, [pc, #336]	; 175e0 <__assert_fail@plt+0x5c64>
   1748c:	push	{r4, r5, r6, r7, lr}
   17490:	mov	r5, r1
   17494:	ldr	r1, [pc, #328]	; 175e4 <__assert_fail@plt+0x5c68>
   17498:	add	r3, pc, r3
   1749c:	ldrb	ip, [r5, #18]
   174a0:	ldr	r6, [r3, r1]
   174a4:	sub	sp, sp, #284	; 0x11c
   174a8:	and	r1, ip, #251	; 0xfb
   174ac:	cmp	ip, #10
   174b0:	cmpne	r1, #0
   174b4:	ldr	r1, [r6]
   174b8:	str	r1, [sp, #276]	; 0x114
   174bc:	bne	174f8 <__assert_fail@plt+0x5b7c>
   174c0:	cmp	r2, #0
   174c4:	mov	r4, r2
   174c8:	beq	1756c <__assert_fail@plt+0x5bf0>
   174cc:	ldrsb	r1, [r2]
   174d0:	cmp	r1, #47	; 0x2f
   174d4:	beq	17554 <__assert_fail@plt+0x5bd8>
   174d8:	mov	r0, r4
   174dc:	bl	11760 <strlen@plt>
   174e0:	add	r5, r5, #19
   174e4:	mov	r7, r0
   174e8:	mov	r0, r5
   174ec:	bl	11760 <strlen@plt>
   174f0:	cmp	r7, r0
   174f4:	bcc	17514 <__assert_fail@plt+0x5b98>
   174f8:	mov	r0, #0
   174fc:	ldr	r2, [sp, #276]	; 0x114
   17500:	ldr	r3, [r6]
   17504:	cmp	r2, r3
   17508:	bne	175dc <__assert_fail@plt+0x5c60>
   1750c:	add	sp, sp, #284	; 0x11c
   17510:	pop	{r4, r5, r6, r7, pc}
   17514:	mov	r0, r4
   17518:	mov	r2, r7
   1751c:	mov	r1, r5
   17520:	bl	11934 <strncmp@plt>
   17524:	cmp	r0, #0
   17528:	bne	174f8 <__assert_fail@plt+0x5b7c>
   1752c:	bl	11724 <__ctype_b_loc@plt>
   17530:	ldrsb	r3, [r5, r7]
   17534:	cmp	r3, #112	; 0x70
   17538:	ldr	r2, [r0]
   1753c:	beq	175bc <__assert_fail@plt+0x5c40>
   17540:	lsl	r3, r3, #1
   17544:	ldrh	r0, [r2, r3]
   17548:	lsr	r0, r0, #11
   1754c:	and	r0, r0, #1
   17550:	b	174fc <__assert_fail@plt+0x5b80>
   17554:	mov	r0, r2
   17558:	bl	1188c <strrchr@plt>
   1755c:	cmp	r0, #0
   17560:	beq	174fc <__assert_fail@plt+0x5b80>
   17564:	add	r4, r0, #1
   17568:	b	174d8 <__assert_fail@plt+0x5b5c>
   1756c:	ldr	r2, [pc, #116]	; 175e8 <__assert_fail@plt+0x5c6c>
   17570:	add	r5, r5, #19
   17574:	add	r2, pc, r2
   17578:	ldr	r3, [pc, #108]	; 175ec <__assert_fail@plt+0x5c70>
   1757c:	stm	sp, {r2, r5}
   17580:	add	r5, sp, #12
   17584:	mov	r1, r3
   17588:	mov	r2, #1
   1758c:	mov	r7, r0
   17590:	mov	r0, r5
   17594:	bl	11964 <__snprintf_chk@plt>
   17598:	mov	r0, r7
   1759c:	bl	118e0 <dirfd@plt>
   175a0:	mov	r3, r4
   175a4:	mov	r1, r5
   175a8:	mov	r2, #4
   175ac:	bl	1158c <faccessat@plt>
   175b0:	clz	r0, r0
   175b4:	lsr	r0, r0, #5
   175b8:	b	174fc <__assert_fail@plt+0x5b80>
   175bc:	add	r5, r5, r7
   175c0:	ldrsb	r1, [r5, #1]
   175c4:	lsl	r1, r1, #1
   175c8:	ldrh	r1, [r2, r1]
   175cc:	tst	r1, #2048	; 0x800
   175d0:	movne	r0, #1
   175d4:	bne	174fc <__assert_fail@plt+0x5b80>
   175d8:	b	17540 <__assert_fail@plt+0x5bc4>
   175dc:	bl	11604 <__stack_chk_fail@plt>
   175e0:			; <UNDEFINED> instruction: 0x000139b4
   175e4:	muleq	r0, ip, r1
   175e8:	andeq	r2, r0, r0, lsl r8
   175ec:	andeq	r0, r0, r6, lsl #2
   175f0:	push	{r4, r5, r6, lr}
   175f4:	mov	r6, r1
   175f8:	mov	r1, #0
   175fc:	bl	15390 <__assert_fail@plt+0x3a14>
   17600:	subs	r4, r0, #0
   17604:	movne	r5, #0
   17608:	bne	1761c <__assert_fail@plt+0x5ca0>
   1760c:	b	17640 <__assert_fail@plt+0x5cc4>
   17610:	bl	17488 <__assert_fail@plt+0x5b0c>
   17614:	cmp	r0, #0
   17618:	addne	r5, r5, #1
   1761c:	mov	r0, r4
   17620:	bl	16b80 <__assert_fail@plt+0x5204>
   17624:	mov	r2, r6
   17628:	subs	r1, r0, #0
   1762c:	mov	r0, r4
   17630:	bne	17610 <__assert_fail@plt+0x5c94>
   17634:	bl	11958 <closedir@plt>
   17638:	mov	r0, r5
   1763c:	pop	{r4, r5, r6, pc}
   17640:	mov	r5, r4
   17644:	mov	r0, r5
   17648:	pop	{r4, r5, r6, pc}
   1764c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17650:	mov	r7, #0
   17654:	ldr	r9, [pc, #344]	; 177b4 <__assert_fail@plt+0x5e38>
   17658:	ldr	r3, [pc, #344]	; 177b8 <__assert_fail@plt+0x5e3c>
   1765c:	add	r9, pc, r9
   17660:	sub	sp, sp, #36	; 0x24
   17664:	ldr	sl, [r9, r3]
   17668:	mov	r8, r1
   1766c:	mov	r1, r7
   17670:	ldr	r3, [sl]
   17674:	str	r7, [sp, #16]
   17678:	str	r3, [sp, #28]
   1767c:	str	r7, [sp, #20]
   17680:	mov	r6, r0
   17684:	bl	15390 <__assert_fail@plt+0x3a14>
   17688:	subs	r5, r0, #0
   1768c:	beq	177a4 <__assert_fail@plt+0x5e28>
   17690:	ldr	r7, [pc, #292]	; 177bc <__assert_fail@plt+0x5e40>
   17694:	ldr	fp, [pc, #292]	; 177c0 <__assert_fail@plt+0x5e44>
   17698:	add	r7, pc, r7
   1769c:	add	fp, pc, fp
   176a0:	mov	r0, r5
   176a4:	bl	16b80 <__assert_fail@plt+0x5204>
   176a8:	subs	r4, r0, #0
   176ac:	beq	17710 <__assert_fail@plt+0x5d94>
   176b0:	mov	r2, #0
   176b4:	mov	r1, r4
   176b8:	mov	r0, r5
   176bc:	bl	17488 <__assert_fail@plt+0x5b0c>
   176c0:	cmp	r0, #0
   176c4:	beq	176a0 <__assert_fail@plt+0x5d24>
   176c8:	add	r4, r4, #19
   176cc:	mov	r3, r4
   176d0:	mov	r2, r7
   176d4:	add	r1, sp, #12
   176d8:	mov	r0, r6
   176dc:	bl	15f48 <__assert_fail@plt+0x45cc>
   176e0:	cmp	r0, #0
   176e4:	bne	176a0 <__assert_fail@plt+0x5d24>
   176e8:	ldr	r3, [sp, #12]
   176ec:	cmp	r3, r8
   176f0:	bne	176a0 <__assert_fail@plt+0x5d24>
   176f4:	mov	r3, r4
   176f8:	mov	r2, fp
   176fc:	add	r1, sp, #16
   17700:	mov	r0, r6
   17704:	bl	161a0 <__assert_fail@plt+0x4824>
   17708:	cmp	r0, #0
   1770c:	bne	176a0 <__assert_fail@plt+0x5d24>
   17710:	mov	r0, r5
   17714:	bl	11958 <closedir@plt>
   17718:	ldr	r3, [pc, #164]	; 177c4 <__assert_fail@plt+0x5e48>
   1771c:	add	r3, pc, r3
   17720:	ldr	r3, [r3]
   17724:	tst	r3, #4
   17728:	bne	17748 <__assert_fail@plt+0x5dcc>
   1772c:	ldrd	r0, [sp, #16]
   17730:	ldr	r2, [sp, #28]
   17734:	ldr	r3, [sl]
   17738:	cmp	r2, r3
   1773c:	bne	177b0 <__assert_fail@plt+0x5e34>
   17740:	add	sp, sp, #36	; 0x24
   17744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17748:	ldr	r3, [pc, #120]	; 177c8 <__assert_fail@plt+0x5e4c>
   1774c:	ldr	r3, [r9, r3]
   17750:	ldr	r4, [r3]
   17754:	bl	11730 <getpid@plt>
   17758:	ldr	r2, [pc, #108]	; 177cc <__assert_fail@plt+0x5e50>
   1775c:	ldr	r3, [pc, #108]	; 177d0 <__assert_fail@plt+0x5e54>
   17760:	add	r2, pc, r2
   17764:	str	r2, [sp, #4]
   17768:	ldr	r2, [pc, #100]	; 177d4 <__assert_fail@plt+0x5e58>
   1776c:	add	r3, pc, r3
   17770:	str	r3, [sp]
   17774:	add	r2, pc, r2
   17778:	mov	r1, #1
   1777c:	mov	r3, r0
   17780:	mov	r0, r4
   17784:	bl	11850 <__fprintf_chk@plt>
   17788:	ldr	r1, [pc, #72]	; 177d8 <__assert_fail@plt+0x5e5c>
   1778c:	mov	r2, r8
   17790:	mov	r0, r6
   17794:	ldr	r3, [sp, #16]
   17798:	add	r1, pc, r1
   1779c:	bl	169d8 <__assert_fail@plt+0x505c>
   177a0:	b	1772c <__assert_fail@plt+0x5db0>
   177a4:	mov	r0, r7
   177a8:	mov	r1, r7
   177ac:	b	17730 <__assert_fail@plt+0x5db4>
   177b0:	bl	11604 <__stack_chk_fail@plt>
   177b4:	strdeq	r3, [r1], -r0
   177b8:	muleq	r0, ip, r1
   177bc:	strdeq	r2, [r0], -r8
   177c0:	andeq	r2, r0, r8, asr #16
   177c4:	andeq	r3, r1, r4, lsl #18
   177c8:	andeq	r0, r0, r0, lsr #3
   177cc:	andeq	r2, r0, r0, asr #8
   177d0:	andeq	r2, r0, r8, lsl #11
   177d4:	andeq	r2, r0, ip, lsl r4
   177d8:	andeq	r2, r0, r8, lsl #12
   177dc:	ldr	r1, [pc, #112]	; 17854 <__assert_fail@plt+0x5ed8>
   177e0:	push	{r4, r5, r6, lr}
   177e4:	add	r1, pc, r1
   177e8:	bl	15390 <__assert_fail@plt+0x3a14>
   177ec:	subs	r5, r0, #0
   177f0:	beq	1784c <__assert_fail@plt+0x5ed0>
   177f4:	mov	r4, #0
   177f8:	b	1780c <__assert_fail@plt+0x5e90>
   177fc:	cmp	r4, #0
   17800:	bne	17830 <__assert_fail@plt+0x5eb4>
   17804:	bl	115f8 <strdup@plt>
   17808:	mov	r4, r0
   1780c:	mov	r0, r5
   17810:	bl	16b80 <__assert_fail@plt+0x5204>
   17814:	cmp	r0, #0
   17818:	add	r0, r0, #19
   1781c:	bne	177fc <__assert_fail@plt+0x5e80>
   17820:	mov	r0, r5
   17824:	bl	11958 <closedir@plt>
   17828:	mov	r0, r4
   1782c:	pop	{r4, r5, r6, pc}
   17830:	mov	r0, r4
   17834:	bl	11568 <free@plt>
   17838:	mov	r4, #0
   1783c:	mov	r0, r5
   17840:	bl	11958 <closedir@plt>
   17844:	mov	r0, r4
   17848:	pop	{r4, r5, r6, pc}
   1784c:	mov	r4, r5
   17850:	b	17828 <__assert_fail@plt+0x5eac>
   17854:	ldrdeq	r2, [r0], -r8
   17858:	push	{r4, r5, r6, r7, r8, lr}
   1785c:	mov	r3, #0
   17860:	mov	r7, r0
   17864:	mov	r4, r1
   17868:	mov	r6, r2
   1786c:	bl	15544 <__assert_fail@plt+0x3bc8>
   17870:	subs	r5, r0, #0
   17874:	ble	17900 <__assert_fail@plt+0x5f84>
   17878:	add	r3, r5, #16
   1787c:	cmp	r3, r6
   17880:	bhi	17900 <__assert_fail@plt+0x5f84>
   17884:	mov	r3, #0
   17888:	mov	r0, r7
   1788c:	strb	r3, [r4, r5]
   17890:	bl	14724 <__assert_fail@plt+0x2da8>
   17894:	add	r6, r5, #1
   17898:	subs	r7, r0, #0
   1789c:	beq	1790c <__assert_fail@plt+0x5f90>
   178a0:	bl	11760 <strlen@plt>
   178a4:	mov	r2, r6
   178a8:	mov	r1, r4
   178ac:	mov	r5, r0
   178b0:	add	r0, r0, #15
   178b4:	add	r0, r4, r0
   178b8:	bl	1155c <memmove@plt>
   178bc:	mov	r2, r5
   178c0:	mov	r1, r7
   178c4:	mov	r0, r4
   178c8:	bl	115d4 <memcpy@plt>
   178cc:	add	r3, r4, r5
   178d0:	ldr	ip, [pc, #76]	; 17924 <__assert_fail@plt+0x5fa8>
   178d4:	add	ip, pc, ip
   178d8:	ldm	ip!, {r0, r1, r2}
   178dc:	ldrh	lr, [ip]
   178e0:	ldrb	ip, [ip, #2]
   178e4:	str	r0, [r3]
   178e8:	str	r1, [r3, #4]
   178ec:	str	r2, [r3, #8]
   178f0:	strh	lr, [r3, #12]
   178f4:	strb	ip, [r3, #14]
   178f8:	mov	r0, r4
   178fc:	pop	{r4, r5, r6, r7, r8, pc}
   17900:	mov	r4, #0
   17904:	mov	r0, r4
   17908:	pop	{r4, r5, r6, r7, r8, pc}
   1790c:	mov	r2, r6
   17910:	mov	r1, r4
   17914:	add	r0, r4, #15
   17918:	bl	1155c <memmove@plt>
   1791c:	mov	r3, r4
   17920:	b	178d0 <__assert_fail@plt+0x5f54>
   17924:	strdeq	r2, [r0], -r0
   17928:	ldr	r3, [pc, #340]	; 17a84 <__assert_fail@plt+0x6108>
   1792c:	ldr	ip, [pc, #340]	; 17a88 <__assert_fail@plt+0x610c>
   17930:	add	r3, pc, r3
   17934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17938:	sub	sp, sp, #4096	; 0x1000
   1793c:	ldr	ip, [r3, ip]
   17940:	sub	sp, sp, #20
   17944:	cmp	r2, #0
   17948:	clz	r0, r1
   1794c:	lsr	r0, r0, #5
   17950:	add	r3, sp, #4096	; 0x1000
   17954:	movne	r5, r0
   17958:	moveq	r5, #1
   1795c:	ldr	r0, [ip]
   17960:	add	r3, r3, #12
   17964:	cmp	r5, #0
   17968:	str	ip, [sp, #4]
   1796c:	str	r0, [r3]
   17970:	bne	17a78 <__assert_fail@plt+0x60fc>
   17974:	str	r5, [r2]
   17978:	ldrsb	r3, [r1]
   1797c:	mov	r7, r2
   17980:	mov	sl, r1
   17984:	cmp	r3, #0
   17988:	beq	17a70 <__assert_fail@plt+0x60f4>
   1798c:	mov	r0, r1
   17990:	bl	11760 <strlen@plt>
   17994:	add	r3, r0, #11
   17998:	cmp	r3, #4096	; 0x1000
   1799c:	mov	r4, r0
   179a0:	bhi	17a70 <__assert_fail@plt+0x60f4>
   179a4:	ldr	r9, [pc, #224]	; 17a8c <__assert_fail@plt+0x6110>
   179a8:	ldr	r8, [pc, #224]	; 17a90 <__assert_fail@plt+0x6114>
   179ac:	add	r9, pc, r9
   179b0:	add	fp, sp, #12
   179b4:	mov	r3, r9
   179b8:	add	ip, sl, r4
   179bc:	ldm	r3!, {r0, r1}
   179c0:	mov	r2, r8
   179c4:	str	r0, [sl, r4]
   179c8:	ldrh	r0, [r3]
   179cc:	ldrb	r3, [r3, #2]
   179d0:	str	r1, [ip, #4]
   179d4:	strh	r0, [ip, #8]
   179d8:	strb	r3, [ip, #10]
   179dc:	mov	r1, fp
   179e0:	mov	r0, sl
   179e4:	bl	11658 <readlink@plt>
   179e8:	strb	r5, [sl, r4]
   179ec:	mov	r1, #47	; 0x2f
   179f0:	mov	r6, r0
   179f4:	mov	r0, sl
   179f8:	bl	1188c <strrchr@plt>
   179fc:	cmp	r0, #0
   17a00:	beq	17a68 <__assert_fail@plt+0x60ec>
   17a04:	cmp	r6, #0
   17a08:	strb	r5, [r0]
   17a0c:	sub	r4, r0, sl
   17a10:	ble	179b4 <__assert_fail@plt+0x6038>
   17a14:	mov	r2, #0
   17a18:	mov	r0, fp
   17a1c:	strb	r2, [fp, r6]
   17a20:	bl	117fc <__xpg_basename@plt>
   17a24:	cmp	r0, #0
   17a28:	beq	17a70 <__assert_fail@plt+0x60f4>
   17a2c:	bl	115f8 <strdup@plt>
   17a30:	cmp	r0, #0
   17a34:	str	r0, [r7]
   17a38:	movne	r0, #0
   17a3c:	mvneq	r0, #11
   17a40:	add	r3, sp, #4096	; 0x1000
   17a44:	add	r3, r3, #12
   17a48:	ldr	r2, [r3]
   17a4c:	ldr	r3, [sp, #4]
   17a50:	ldr	r3, [r3]
   17a54:	cmp	r2, r3
   17a58:	bne	17a80 <__assert_fail@plt+0x6104>
   17a5c:	add	sp, sp, #4096	; 0x1000
   17a60:	add	sp, sp, #20
   17a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a68:	cmp	r6, #0
   17a6c:	bgt	17a14 <__assert_fail@plt+0x6098>
   17a70:	mov	r0, #1
   17a74:	b	17a40 <__assert_fail@plt+0x60c4>
   17a78:	mvn	r0, #21
   17a7c:	b	17a40 <__assert_fail@plt+0x60c4>
   17a80:	bl	11604 <__stack_chk_fail@plt>
   17a84:	andeq	r3, r1, ip, lsl r5
   17a88:	muleq	r0, ip, r1
   17a8c:	andeq	r2, r0, r8, lsr #8
   17a90:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17a94:	ldr	r3, [pc, #312]	; 17bd4 <__assert_fail@plt+0x6258>
   17a98:	ldr	r2, [pc, #312]	; 17bd8 <__assert_fail@plt+0x625c>
   17a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aa0:	add	r3, pc, r3
   17aa4:	sub	sp, sp, #4096	; 0x1000
   17aa8:	sub	sp, sp, #28
   17aac:	ldr	r2, [r3, r2]
   17ab0:	add	r6, sp, #24
   17ab4:	mov	r1, r6
   17ab8:	mov	ip, r2
   17abc:	str	r2, [sp, #4]
   17ac0:	mov	r2, #0
   17ac4:	str	r2, [r1, #-8]!
   17ac8:	ldr	r2, [pc, #268]	; 17bdc <__assert_fail@plt+0x6260>
   17acc:	add	r3, sp, #4096	; 0x1000
   17ad0:	ldr	ip, [ip]
   17ad4:	add	r3, r3, #20
   17ad8:	add	r2, pc, r2
   17adc:	str	ip, [r3]
   17ae0:	mov	r7, r0
   17ae4:	bl	15ebc <__assert_fail@plt+0x4540>
   17ae8:	cmp	r0, #0
   17aec:	bne	17afc <__assert_fail@plt+0x6180>
   17af0:	ldr	r0, [r6, #-8]
   17af4:	cmp	r0, #1
   17af8:	beq	17b94 <__assert_fail@plt+0x6218>
   17afc:	mov	r2, #4096	; 0x1000
   17b00:	sub	r1, r6, #4
   17b04:	mov	r0, r7
   17b08:	bl	17858 <__assert_fail@plt+0x5edc>
   17b0c:	subs	r9, r0, #0
   17b10:	beq	17b90 <__assert_fail@plt+0x6214>
   17b14:	ldr	r8, [pc, #196]	; 17be0 <__assert_fail@plt+0x6264>
   17b18:	ldr	r3, [pc, #196]	; 17be4 <__assert_fail@plt+0x6268>
   17b1c:	add	r8, pc, r8
   17b20:	add	sl, sp, #12
   17b24:	add	r5, r8, #20
   17b28:	add	r3, pc, r3
   17b2c:	str	r3, [sp]
   17b30:	mov	r2, sl
   17b34:	mov	r1, r9
   17b38:	mov	r0, r7
   17b3c:	bl	17928 <__assert_fail@plt+0x5fac>
   17b40:	cmp	r0, #0
   17b44:	bne	17b90 <__assert_fail@plt+0x6214>
   17b48:	ldr	r4, [r6, #-12]
   17b4c:	ldr	r1, [sp]
   17b50:	mov	r0, r4
   17b54:	bl	11514 <strcmp@plt>
   17b58:	add	fp, r8, #4
   17b5c:	cmp	r0, #0
   17b60:	beq	17b80 <__assert_fail@plt+0x6204>
   17b64:	cmp	fp, r5
   17b68:	beq	17bbc <__assert_fail@plt+0x6240>
   17b6c:	ldr	r1, [fp], #4
   17b70:	mov	r0, r4
   17b74:	bl	11514 <strcmp@plt>
   17b78:	cmp	r0, #0
   17b7c:	bne	17b64 <__assert_fail@plt+0x61e8>
   17b80:	mov	r3, #1
   17b84:	mov	r0, r4
   17b88:	str	r3, [r6, #-8]
   17b8c:	bl	11568 <free@plt>
   17b90:	ldr	r0, [r6, #-8]
   17b94:	add	r3, sp, #4096	; 0x1000
   17b98:	add	r3, r3, #20
   17b9c:	ldr	r2, [r3]
   17ba0:	ldr	r3, [sp, #4]
   17ba4:	ldr	r3, [r3]
   17ba8:	cmp	r2, r3
   17bac:	bne	17bd0 <__assert_fail@plt+0x6254>
   17bb0:	add	sp, sp, #4096	; 0x1000
   17bb4:	add	sp, sp, #28
   17bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bbc:	mov	r3, #0
   17bc0:	mov	r0, r4
   17bc4:	str	r3, [r6, #-8]
   17bc8:	bl	11568 <free@plt>
   17bcc:	b	17b30 <__assert_fail@plt+0x61b4>
   17bd0:	bl	11604 <__stack_chk_fail@plt>
   17bd4:	andeq	r3, r1, ip, lsr #7
   17bd8:	muleq	r0, ip, r1
   17bdc:	andeq	r2, r0, ip, lsl #6
   17be0:	andeq	r3, r1, r4, lsl r2
   17be4:			; <UNDEFINED> instruction: 0x000022b8
   17be8:	ldr	ip, [pc, #272]	; 17d00 <__assert_fail@plt+0x6384>
   17bec:	push	{r4, r5, r6, r7, lr}
   17bf0:	add	ip, pc, ip
   17bf4:	ldr	lr, [pc, #264]	; 17d04 <__assert_fail@plt+0x6388>
   17bf8:	sub	sp, sp, #12
   17bfc:	mov	r3, #0
   17c00:	ldr	r4, [ip, lr]
   17c04:	mov	r5, r2
   17c08:	mov	r2, ip
   17c0c:	ldr	ip, [r4]
   17c10:	mov	r2, r3
   17c14:	str	r3, [sp]
   17c18:	str	ip, [sp, #4]
   17c1c:	bl	17278 <__assert_fail@plt+0x58fc>
   17c20:	subs	r7, r0, #0
   17c24:	beq	17ca4 <__assert_fail@plt+0x6328>
   17c28:	ldr	r2, [pc, #216]	; 17d08 <__assert_fail@plt+0x638c>
   17c2c:	mov	r1, sp
   17c30:	add	r2, pc, r2
   17c34:	bl	158a8 <__assert_fail@plt+0x3f2c>
   17c38:	cmp	r0, #0
   17c3c:	ble	17ca4 <__assert_fail@plt+0x6328>
   17c40:	ldr	r6, [sp]
   17c44:	cmp	r6, #0
   17c48:	beq	17ca4 <__assert_fail@plt+0x6328>
   17c4c:	ldr	r1, [pc, #184]	; 17d0c <__assert_fail@plt+0x6390>
   17c50:	mov	r2, #4
   17c54:	add	r1, pc, r1
   17c58:	mov	r0, r6
   17c5c:	bl	11934 <strncmp@plt>
   17c60:	cmp	r0, #0
   17c64:	bne	17cdc <__assert_fail@plt+0x6360>
   17c68:	add	r0, r6, #4
   17c6c:	mov	r1, #45	; 0x2d
   17c70:	bl	1188c <strrchr@plt>
   17c74:	cmp	r0, #0
   17c78:	beq	17ca4 <__assert_fail@plt+0x6328>
   17c7c:	ldrsb	r6, [r0, #1]
   17c80:	mov	r0, r7
   17c84:	adds	r6, r6, #0
   17c88:	movne	r6, #1
   17c8c:	bl	143c0 <__assert_fail@plt+0x2a44>
   17c90:	cmp	r5, #0
   17c94:	bne	17cb8 <__assert_fail@plt+0x633c>
   17c98:	ldr	r0, [sp]
   17c9c:	bl	11568 <free@plt>
   17ca0:	b	17cc0 <__assert_fail@plt+0x6344>
   17ca4:	mov	r6, #0
   17ca8:	mov	r0, r7
   17cac:	bl	143c0 <__assert_fail@plt+0x2a44>
   17cb0:	cmp	r5, #0
   17cb4:	beq	17c98 <__assert_fail@plt+0x631c>
   17cb8:	ldr	r3, [sp]
   17cbc:	str	r3, [r5]
   17cc0:	ldr	r2, [sp, #4]
   17cc4:	ldr	r3, [r4]
   17cc8:	mov	r0, r6
   17ccc:	cmp	r2, r3
   17cd0:	bne	17cfc <__assert_fail@plt+0x6380>
   17cd4:	add	sp, sp, #12
   17cd8:	pop	{r4, r5, r6, r7, pc}
   17cdc:	ldr	r1, [pc, #44]	; 17d10 <__assert_fail@plt+0x6394>
   17ce0:	mov	r0, r6
   17ce4:	mov	r2, #17
   17ce8:	add	r1, pc, r1
   17cec:	bl	11934 <strncmp@plt>
   17cf0:	clz	r6, r0
   17cf4:	lsr	r6, r6, #5
   17cf8:	b	17ca8 <__assert_fail@plt+0x632c>
   17cfc:	bl	11604 <__stack_chk_fail@plt>
   17d00:	andeq	r3, r1, ip, asr r2
   17d04:	muleq	r0, ip, r1
   17d08:	andeq	r2, r0, r0, asr #3
   17d0c:	andeq	r2, r0, r4, lsr #3
   17d10:	andeq	r2, r0, r8, lsl r1
   17d14:	ldr	ip, [pc, #372]	; 17e90 <__assert_fail@plt+0x6514>
   17d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d1c:	add	ip, pc, ip
   17d20:	ldr	lr, [pc, #364]	; 17e94 <__assert_fail@plt+0x6518>
   17d24:	sub	sp, sp, #4096	; 0x1000
   17d28:	sub	sp, sp, #28
   17d2c:	mov	r8, r1
   17d30:	mov	r7, r2
   17d34:	ldr	r1, [ip, lr]
   17d38:	mov	r2, ip
   17d3c:	add	r2, sp, #4160	; 0x1040
   17d40:	mov	r6, r3
   17d44:	ldr	r5, [r2]
   17d48:	add	r2, sp, #4096	; 0x1000
   17d4c:	ldr	r3, [r1]
   17d50:	add	r2, r2, #20
   17d54:	str	r1, [sp, #8]
   17d58:	mov	r9, r0
   17d5c:	str	r3, [r2]
   17d60:	bl	148e0 <__assert_fail@plt+0x2f64>
   17d64:	subs	r4, r0, #0
   17d68:	beq	17e7c <__assert_fail@plt+0x6500>
   17d6c:	ldrb	r3, [r4, #28]
   17d70:	tst	r3, #2
   17d74:	bne	17e7c <__assert_fail@plt+0x6500>
   17d78:	ands	sl, r3, #1
   17d7c:	beq	17de8 <__assert_fail@plt+0x646c>
   17d80:	cmp	r8, #0
   17d84:	mov	r0, #0
   17d88:	ldrne	r3, [r4, #12]
   17d8c:	strne	r3, [r8]
   17d90:	cmp	r7, #0
   17d94:	ldrne	r3, [r4, #16]
   17d98:	strne	r3, [r7]
   17d9c:	cmp	r6, #0
   17da0:	ldrne	r3, [r4, #20]
   17da4:	strne	r3, [r6]
   17da8:	cmp	r5, #0
   17dac:	ldrne	r3, [r4, #24]
   17db0:	strne	r3, [r5]
   17db4:	ldrb	r3, [r4, #28]
   17db8:	bic	r3, r3, #2
   17dbc:	strb	r3, [r4, #28]
   17dc0:	add	r3, sp, #4096	; 0x1000
   17dc4:	add	r3, r3, #20
   17dc8:	ldr	r2, [r3]
   17dcc:	ldr	r3, [sp, #8]
   17dd0:	ldr	r3, [r3]
   17dd4:	cmp	r2, r3
   17dd8:	bne	17e8c <__assert_fail@plt+0x6510>
   17ddc:	add	sp, sp, #4096	; 0x1000
   17de0:	add	sp, sp, #28
   17de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17de8:	orr	r3, r3, #2
   17dec:	strb	r3, [r4, #28]
   17df0:	ldr	r3, [pc, #160]	; 17e98 <__assert_fail@plt+0x651c>
   17df4:	add	r2, sp, #24
   17df8:	add	fp, sp, #20
   17dfc:	str	r2, [sp, #12]
   17e00:	mov	r0, r9
   17e04:	mov	r1, fp
   17e08:	add	r3, pc, r3
   17e0c:	ldr	r2, [pc, #136]	; 17e9c <__assert_fail@plt+0x6520>
   17e10:	bl	15544 <__assert_fail@plt+0x3bc8>
   17e14:	cmp	r0, #0
   17e18:	blt	17dc0 <__assert_fail@plt+0x6444>
   17e1c:	ldr	r2, [sp, #12]
   17e20:	mov	r1, #47	; 0x2f
   17e24:	add	r3, r2, r0
   17e28:	mov	r0, fp
   17e2c:	strb	sl, [r3, #-4]
   17e30:	bl	1188c <strrchr@plt>
   17e34:	cmp	r0, #0
   17e38:	beq	17e84 <__assert_fail@plt+0x6508>
   17e3c:	ldr	r1, [pc, #92]	; 17ea0 <__assert_fail@plt+0x6524>
   17e40:	add	r2, r4, #24
   17e44:	add	r3, r4, #20
   17e48:	str	r2, [sp, #4]
   17e4c:	str	r3, [sp]
   17e50:	add	r0, r0, #1
   17e54:	add	r3, r4, #16
   17e58:	add	r2, r4, #12
   17e5c:	add	r1, pc, r1
   17e60:	bl	118b0 <sscanf@plt>
   17e64:	cmp	r0, #4
   17e68:	bne	17e84 <__assert_fail@plt+0x6508>
   17e6c:	ldrb	r3, [r4, #28]
   17e70:	orr	r3, r3, #1
   17e74:	strb	r3, [r4, #28]
   17e78:	b	17d80 <__assert_fail@plt+0x6404>
   17e7c:	mvn	r0, #21
   17e80:	b	17dc0 <__assert_fail@plt+0x6444>
   17e84:	mvn	r0, #0
   17e88:	b	17dc0 <__assert_fail@plt+0x6444>
   17e8c:	bl	11604 <__stack_chk_fail@plt>
   17e90:	andeq	r3, r1, r0, lsr r1
   17e94:	muleq	r0, ip, r1
   17e98:	andeq	r2, r0, ip
   17e9c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17ea0:	andeq	r1, r0, r0, asr #31
   17ea4:	ldr	ip, [pc, #288]	; 17fcc <__assert_fail@plt+0x6650>
   17ea8:	push	{r4, r5, r6, r7, r8, r9, lr}
   17eac:	add	ip, pc, ip
   17eb0:	ldr	lr, [pc, #280]	; 17fd0 <__assert_fail@plt+0x6654>
   17eb4:	sub	sp, sp, #36	; 0x24
   17eb8:	mov	r6, #0
   17ebc:	ldr	r5, [ip, lr]
   17ec0:	mov	r7, r1
   17ec4:	mov	r4, r2
   17ec8:	ldr	lr, [r5]
   17ecc:	mov	r2, r6
   17ed0:	str	r6, [sp]
   17ed4:	mov	r8, r3
   17ed8:	add	r1, sp, #24
   17edc:	mov	r3, r6
   17ee0:	str	lr, [sp, #28]
   17ee4:	mov	r9, r0
   17ee8:	ldr	r6, [sp, #64]	; 0x40
   17eec:	bl	17d14 <__assert_fail@plt+0x6398>
   17ef0:	cmp	r0, #0
   17ef4:	bne	17f64 <__assert_fail@plt+0x65e8>
   17ef8:	mov	r0, r9
   17efc:	bl	14724 <__assert_fail@plt+0x2da8>
   17f00:	cmp	r0, #0
   17f04:	beq	17f80 <__assert_fail@plt+0x6604>
   17f08:	cmp	r6, #0
   17f0c:	ldr	r1, [sp, #24]
   17f10:	beq	17f94 <__assert_fail@plt+0x6618>
   17f14:	ldr	r2, [pc, #184]	; 17fd4 <__assert_fail@plt+0x6658>
   17f18:	ldr	r3, [pc, #184]	; 17fd8 <__assert_fail@plt+0x665c>
   17f1c:	add	r2, pc, r2
   17f20:	add	r3, pc, r3
   17f24:	stmib	sp, {r0, r2, r7}
   17f28:	mov	r2, #1
   17f2c:	str	r1, [sp, #16]
   17f30:	str	r3, [sp]
   17f34:	str	r6, [sp, #20]
   17f38:	mvn	r3, #0
   17f3c:	mov	r1, r8
   17f40:	mov	r0, r4
   17f44:	bl	11964 <__snprintf_chk@plt>
   17f48:	mvn	r3, r0
   17f4c:	cmp	r0, r8
   17f50:	lsr	r3, r3, #31
   17f54:	movcs	r3, #0
   17f58:	cmp	r3, #0
   17f5c:	movne	r0, r4
   17f60:	bne	17f68 <__assert_fail@plt+0x65ec>
   17f64:	mov	r0, #0
   17f68:	ldr	r2, [sp, #28]
   17f6c:	ldr	r3, [r5]
   17f70:	cmp	r2, r3
   17f74:	bne	17fc8 <__assert_fail@plt+0x664c>
   17f78:	add	sp, sp, #36	; 0x24
   17f7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17f80:	ldr	r0, [pc, #84]	; 17fdc <__assert_fail@plt+0x6660>
   17f84:	cmp	r6, #0
   17f88:	add	r0, pc, r0
   17f8c:	ldr	r1, [sp, #24]
   17f90:	bne	17f14 <__assert_fail@plt+0x6598>
   17f94:	ldr	r2, [pc, #68]	; 17fe0 <__assert_fail@plt+0x6664>
   17f98:	ldr	r3, [pc, #68]	; 17fe4 <__assert_fail@plt+0x6668>
   17f9c:	add	r2, pc, r2
   17fa0:	add	r3, pc, r3
   17fa4:	stmib	sp, {r0, r2, r7}
   17fa8:	mov	r2, #1
   17fac:	str	r1, [sp, #16]
   17fb0:	str	r3, [sp]
   17fb4:	mov	r1, r8
   17fb8:	mvn	r3, #0
   17fbc:	mov	r0, r4
   17fc0:	bl	11964 <__snprintf_chk@plt>
   17fc4:	b	17f48 <__assert_fail@plt+0x65cc>
   17fc8:	bl	11604 <__stack_chk_fail@plt>
   17fcc:	andeq	r2, r1, r0, lsr #31
   17fd0:	muleq	r0, ip, r1
   17fd4:	andeq	r1, r0, ip, lsl #30
   17fd8:	andeq	r1, r0, r4, lsl pc
   17fdc:	strdeq	r1, [r0], -ip
   17fe0:	andeq	r1, r0, ip, lsl #29
   17fe4:	andeq	r1, r0, ip, lsr #29
   17fe8:	ldr	ip, [pc, #288]	; 18110 <__assert_fail@plt+0x6794>
   17fec:	ldr	r3, [pc, #288]	; 18114 <__assert_fail@plt+0x6798>
   17ff0:	add	ip, pc, ip
   17ff4:	push	{r4, r5, r6, r7, lr}
   17ff8:	sub	sp, sp, #60	; 0x3c
   17ffc:	ldr	r5, [ip, r3]
   18000:	add	r3, sp, #48	; 0x30
   18004:	str	r3, [sp]
   18008:	ldr	lr, [r5]
   1800c:	mov	r4, r1
   18010:	mov	r6, r2
   18014:	add	r3, sp, #44	; 0x2c
   18018:	add	r2, sp, #40	; 0x28
   1801c:	add	r1, sp, #36	; 0x24
   18020:	str	lr, [sp, #52]	; 0x34
   18024:	mov	r7, r0
   18028:	bl	17d14 <__assert_fail@plt+0x6398>
   1802c:	cmp	r0, #0
   18030:	bne	180a4 <__assert_fail@plt+0x6728>
   18034:	mov	r0, r7
   18038:	bl	14724 <__assert_fail@plt+0x2da8>
   1803c:	cmp	r0, #0
   18040:	beq	180c0 <__assert_fail@plt+0x6744>
   18044:	add	r1, sp, #36	; 0x24
   18048:	cmp	r6, #0
   1804c:	ldm	r1, {r1, ip, lr}
   18050:	ldr	r7, [sp, #48]	; 0x30
   18054:	beq	180cc <__assert_fail@plt+0x6750>
   18058:	ldr	r2, [pc, #184]	; 18118 <__assert_fail@plt+0x679c>
   1805c:	ldr	r3, [pc, #184]	; 1811c <__assert_fail@plt+0x67a0>
   18060:	add	r2, pc, r2
   18064:	add	r3, pc, r3
   18068:	stmib	sp, {r0, r2}
   1806c:	str	r1, [sp, #12]
   18070:	str	r3, [sp]
   18074:	str	r6, [sp, #28]
   18078:	str	r7, [sp, #24]
   1807c:	str	lr, [sp, #20]
   18080:	str	ip, [sp, #16]
   18084:	mvn	r3, #0
   18088:	mov	r2, #1
   1808c:	mov	r1, #4096	; 0x1000
   18090:	mov	r0, r4
   18094:	bl	11964 <__snprintf_chk@plt>
   18098:	cmp	r0, #4096	; 0x1000
   1809c:	movcc	r0, r4
   180a0:	bcc	180a8 <__assert_fail@plt+0x672c>
   180a4:	mov	r0, #0
   180a8:	ldr	r2, [sp, #52]	; 0x34
   180ac:	ldr	r3, [r5]
   180b0:	cmp	r2, r3
   180b4:	bne	1810c <__assert_fail@plt+0x6790>
   180b8:	add	sp, sp, #60	; 0x3c
   180bc:	pop	{r4, r5, r6, r7, pc}
   180c0:	ldr	r0, [pc, #88]	; 18120 <__assert_fail@plt+0x67a4>
   180c4:	add	r0, pc, r0
   180c8:	b	18044 <__assert_fail@plt+0x66c8>
   180cc:	ldr	r2, [pc, #80]	; 18124 <__assert_fail@plt+0x67a8>
   180d0:	ldr	r3, [pc, #80]	; 18128 <__assert_fail@plt+0x67ac>
   180d4:	add	r2, pc, r2
   180d8:	add	r3, pc, r3
   180dc:	stmib	sp, {r0, r2}
   180e0:	str	r1, [sp, #12]
   180e4:	str	r3, [sp]
   180e8:	str	r7, [sp, #24]
   180ec:	str	lr, [sp, #20]
   180f0:	str	ip, [sp, #16]
   180f4:	mvn	r3, #0
   180f8:	mov	r2, #1
   180fc:	mov	r1, #4096	; 0x1000
   18100:	mov	r0, r4
   18104:	bl	11964 <__snprintf_chk@plt>
   18108:	b	18098 <__assert_fail@plt+0x671c>
   1810c:	bl	11604 <__stack_chk_fail@plt>
   18110:	andeq	r2, r1, ip, asr lr
   18114:	muleq	r0, ip, r1
   18118:	andeq	r1, r0, r0, lsl #28
   1811c:	andeq	r1, r0, ip, lsl #28
   18120:	andeq	r1, r0, r0, asr #21
   18124:	andeq	r1, r0, ip, lsl #27
   18128:			; <UNDEFINED> instruction: 0x00001db4
   1812c:	ldr	r3, [pc, #176]	; 181e4 <__assert_fail@plt+0x6868>
   18130:	ldr	ip, [pc, #176]	; 181e8 <__assert_fail@plt+0x686c>
   18134:	add	r3, pc, r3
   18138:	push	{r4, r5, r6, r7, lr}
   1813c:	sub	sp, sp, #1040	; 0x410
   18140:	ldr	r4, [r3, ip]
   18144:	sub	sp, sp, #4
   18148:	cmp	r1, #0
   1814c:	cmpne	r2, #0
   18150:	ldr	r3, [r4]
   18154:	str	r3, [sp, #1036]	; 0x40c
   18158:	beq	181b4 <__assert_fail@plt+0x6838>
   1815c:	add	r5, sp, #12
   18160:	str	r2, [sp]
   18164:	mov	r3, #1024	; 0x400
   18168:	mov	r2, r5
   1816c:	bl	17ea4 <__assert_fail@plt+0x6528>
   18170:	cmp	r0, #0
   18174:	beq	181b4 <__assert_fail@plt+0x6838>
   18178:	ldr	r1, [pc, #108]	; 181ec <__assert_fail@plt+0x6870>
   1817c:	mov	r0, r5
   18180:	add	r1, pc, r1
   18184:	bl	118f8 <fopen64@plt>
   18188:	subs	r6, r0, #0
   1818c:	beq	181b4 <__assert_fail@plt+0x6838>
   18190:	ldr	r1, [pc, #88]	; 181f0 <__assert_fail@plt+0x6874>
   18194:	mov	r2, r5
   18198:	add	r1, pc, r1
   1819c:	bl	11808 <fscanf@plt>
   181a0:	mov	r7, r0
   181a4:	mov	r0, r6
   181a8:	bl	1185c <fclose@plt>
   181ac:	cmp	r7, #1
   181b0:	beq	181d4 <__assert_fail@plt+0x6858>
   181b4:	mov	r0, #0
   181b8:	ldr	r2, [sp, #1036]	; 0x40c
   181bc:	ldr	r3, [r4]
   181c0:	cmp	r2, r3
   181c4:	bne	181e0 <__assert_fail@plt+0x6864>
   181c8:	add	sp, sp, #1040	; 0x410
   181cc:	add	sp, sp, #4
   181d0:	pop	{r4, r5, r6, r7, pc}
   181d4:	mov	r0, r5
   181d8:	bl	115f8 <strdup@plt>
   181dc:	b	181b8 <__assert_fail@plt+0x683c>
   181e0:	bl	11604 <__stack_chk_fail@plt>
   181e4:	andeq	r2, r1, r8, lsl sp
   181e8:	muleq	r0, ip, r1
   181ec:	strdeq	r1, [r0], -r8
   181f0:	andeq	r1, r0, r0, lsl sp
   181f4:	ldr	r3, [pc, #168]	; 182a4 <__assert_fail@plt+0x6928>
   181f8:	ldr	r2, [pc, #168]	; 182a8 <__assert_fail@plt+0x692c>
   181fc:	add	r3, pc, r3
   18200:	push	{r4, r5, r6, lr}
   18204:	sub	sp, sp, #4160	; 0x1040
   18208:	ldr	r4, [r3, r2]
   1820c:	sub	sp, sp, #56	; 0x38
   18210:	add	r2, sp, #4160	; 0x1040
   18214:	add	r2, r2, #52	; 0x34
   18218:	ldr	r3, [r4]
   1821c:	cmp	r1, #0
   18220:	str	r3, [r2]
   18224:	beq	18278 <__assert_fail@plt+0x68fc>
   18228:	mov	r3, #0
   1822c:	add	r5, sp, #116	; 0x74
   18230:	str	r3, [sp]
   18234:	mov	r2, r5
   18238:	mov	r3, #4096	; 0x1000
   1823c:	bl	17ea4 <__assert_fail@plt+0x6528>
   18240:	add	r6, sp, #120	; 0x78
   18244:	cmp	r0, #0
   18248:	beq	18278 <__assert_fail@plt+0x68fc>
   1824c:	mov	r1, r5
   18250:	add	r2, sp, #8
   18254:	mov	r0, #3
   18258:	bl	1191c <__xstat64@plt>
   1825c:	cmp	r0, #0
   18260:	bne	18278 <__assert_fail@plt+0x68fc>
   18264:	ldr	r3, [r6, #-96]	; 0xffffffa0
   18268:	and	r3, r3, #61440	; 0xf000
   1826c:	cmp	r3, #16384	; 0x4000
   18270:	moveq	r0, #1
   18274:	beq	1827c <__assert_fail@plt+0x6900>
   18278:	mov	r0, #0
   1827c:	add	r3, sp, #4160	; 0x1040
   18280:	add	r3, r3, #52	; 0x34
   18284:	ldr	r2, [r3]
   18288:	ldr	r3, [r4]
   1828c:	cmp	r2, r3
   18290:	bne	182a0 <__assert_fail@plt+0x6924>
   18294:	add	sp, sp, #4160	; 0x1040
   18298:	add	sp, sp, #56	; 0x38
   1829c:	pop	{r4, r5, r6, pc}
   182a0:	bl	11604 <__stack_chk_fail@plt>
   182a4:	andeq	r2, r1, r0, asr ip
   182a8:	muleq	r0, ip, r1
   182ac:	ldr	r3, [pc, #124]	; 18330 <__assert_fail@plt+0x69b4>
   182b0:	ldr	ip, [pc, #124]	; 18334 <__assert_fail@plt+0x69b8>
   182b4:	add	r3, pc, r3
   182b8:	push	{r4, r5, lr}
   182bc:	sub	sp, sp, #4160	; 0x1040
   182c0:	ldr	r4, [r3, ip]
   182c4:	sub	sp, sp, #52	; 0x34
   182c8:	add	ip, sp, #4160	; 0x1040
   182cc:	add	ip, ip, #44	; 0x2c
   182d0:	add	r5, sp, #108	; 0x6c
   182d4:	ldr	r3, [r4]
   182d8:	mov	r2, r1
   182dc:	mov	r1, r5
   182e0:	str	r3, [ip]
   182e4:	bl	17fe8 <__assert_fail@plt+0x666c>
   182e8:	cmp	r0, #0
   182ec:	beq	18308 <__assert_fail@plt+0x698c>
   182f0:	mov	r1, r5
   182f4:	mov	r2, sp
   182f8:	mov	r0, #3
   182fc:	bl	1191c <__xstat64@plt>
   18300:	clz	r0, r0
   18304:	lsr	r0, r0, #5
   18308:	add	r3, sp, #4160	; 0x1040
   1830c:	add	r3, r3, #44	; 0x2c
   18310:	ldr	r2, [r3]
   18314:	ldr	r3, [r4]
   18318:	cmp	r2, r3
   1831c:	bne	1832c <__assert_fail@plt+0x69b0>
   18320:	add	sp, sp, #4160	; 0x1040
   18324:	add	sp, sp, #52	; 0x34
   18328:	pop	{r4, r5, pc}
   1832c:	bl	11604 <__stack_chk_fail@plt>
   18330:	muleq	r1, r8, fp
   18334:	muleq	r0, ip, r1
   18338:	ldr	r3, [pc, #200]	; 18408 <__assert_fail@plt+0x6a8c>
   1833c:	ldr	r2, [pc, #200]	; 1840c <__assert_fail@plt+0x6a90>
   18340:	add	r3, pc, r3
   18344:	push	{r4, r5, r6, r7, r8, r9, lr}
   18348:	sub	sp, sp, #8256	; 0x2040
   1834c:	ldr	r5, [r3, r2]
   18350:	sub	sp, sp, #52	; 0x34
   18354:	add	ip, sp, #8256	; 0x2040
   18358:	add	ip, ip, #44	; 0x2c
   1835c:	add	r4, sp, #108	; 0x6c
   18360:	ldr	r3, [r5]
   18364:	mov	r6, r1
   18368:	mov	r2, #0
   1836c:	mov	r1, r4
   18370:	str	r3, [ip]
   18374:	bl	17fe8 <__assert_fail@plt+0x666c>
   18378:	cmp	r0, #0
   1837c:	beq	18398 <__assert_fail@plt+0x6a1c>
   18380:	mov	r2, sp
   18384:	mov	r1, r4
   18388:	mov	r0, #3
   1838c:	bl	1191c <__xstat64@plt>
   18390:	subs	r8, r0, #0
   18394:	beq	183c0 <__assert_fail@plt+0x6a44>
   18398:	mov	r0, #0
   1839c:	add	r3, sp, #8256	; 0x2040
   183a0:	add	r3, r3, #44	; 0x2c
   183a4:	ldr	r2, [r3]
   183a8:	ldr	r3, [r5]
   183ac:	cmp	r2, r3
   183b0:	bne	18404 <__assert_fail@plt+0x6a88>
   183b4:	add	sp, sp, #8256	; 0x2040
   183b8:	add	sp, sp, #52	; 0x34
   183bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   183c0:	add	r7, sp, #4160	; 0x1040
   183c4:	add	r7, r7, #48	; 0x30
   183c8:	sub	r9, r7, #4
   183cc:	mov	r0, r4
   183d0:	mov	r1, r9
   183d4:	ldr	r2, [pc, #52]	; 18410 <__assert_fail@plt+0x6a94>
   183d8:	bl	11658 <readlink@plt>
   183dc:	cmp	r0, #0
   183e0:	blt	18398 <__assert_fail@plt+0x6a1c>
   183e4:	add	r7, r7, r0
   183e8:	mov	r1, r6
   183ec:	mov	r0, r9
   183f0:	strb	r8, [r7, #-4]
   183f4:	bl	114f0 <strstr@plt>
   183f8:	adds	r0, r0, #0
   183fc:	movne	r0, #1
   18400:	b	1839c <__assert_fail@plt+0x6a20>
   18404:	bl	11604 <__stack_chk_fail@plt>
   18408:	andeq	r2, r1, ip, lsl #22
   1840c:	muleq	r0, ip, r1
   18410:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18414:	ldr	r3, [pc, #576]	; 1865c <__assert_fail@plt+0x6ce0>
   18418:	ldr	ip, [pc, #576]	; 18660 <__assert_fail@plt+0x6ce4>
   1841c:	add	r3, pc, r3
   18420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18424:	sub	sp, sp, #4224	; 0x1080
   18428:	ldr	r6, [r3, ip]
   1842c:	mov	r8, r2
   18430:	add	r2, sp, #4160	; 0x1040
   18434:	add	r2, r2, #60	; 0x3c
   18438:	ldr	r3, [r6]
   1843c:	subs	r7, r0, #0
   18440:	mov	r4, r1
   18444:	str	r3, [r2]
   18448:	beq	18618 <__assert_fail@plt+0x6c9c>
   1844c:	cmp	r4, #0
   18450:	beq	18638 <__assert_fail@plt+0x6cbc>
   18454:	ldr	r0, [pc, #520]	; 18664 <__assert_fail@plt+0x6ce8>
   18458:	mov	r2, #5
   1845c:	mov	r1, r4
   18460:	add	r0, pc, r0
   18464:	bl	11934 <strncmp@plt>
   18468:	cmp	r0, #0
   1846c:	beq	185f4 <__assert_fail@plt+0x6c78>
   18470:	mov	r0, r4
   18474:	bl	115f8 <strdup@plt>
   18478:	subs	r5, r0, #0
   1847c:	movne	r9, #33	; 0x21
   18480:	bne	1848c <__assert_fail@plt+0x6b10>
   18484:	b	185bc <__assert_fail@plt+0x6c40>
   18488:	strb	r9, [r0]
   1848c:	mov	r1, #47	; 0x2f
   18490:	mov	r0, r5
   18494:	bl	1176c <strchr@plt>
   18498:	cmp	r0, #0
   1849c:	bne	18488 <__assert_fail@plt+0x6b0c>
   184a0:	cmp	r8, #0
   184a4:	beq	184c4 <__assert_fail@plt+0x6b48>
   184a8:	ldr	r0, [pc, #440]	; 18668 <__assert_fail@plt+0x6cec>
   184ac:	mov	r1, r4
   184b0:	mov	r2, #3
   184b4:	add	r0, pc, r0
   184b8:	bl	11934 <strncmp@plt>
   184bc:	cmp	r0, #0
   184c0:	bne	18550 <__assert_fail@plt+0x6bd4>
   184c4:	ldr	r2, [pc, #416]	; 1866c <__assert_fail@plt+0x6cf0>
   184c8:	mov	r3, #4096	; 0x1000
   184cc:	add	r2, pc, r2
   184d0:	add	r4, sp, #124	; 0x7c
   184d4:	stm	sp, {r2, r7}
   184d8:	str	r5, [sp, #8]
   184dc:	mov	r0, r4
   184e0:	mov	r1, r3
   184e4:	mov	r2, #1
   184e8:	bl	11964 <__snprintf_chk@plt>
   184ec:	ldr	sl, [pc, #380]	; 18670 <__assert_fail@plt+0x6cf4>
   184f0:	cmp	r0, sl
   184f4:	bhi	185bc <__assert_fail@plt+0x6c40>
   184f8:	mov	r0, r4
   184fc:	bl	16be4 <__assert_fail@plt+0x5268>
   18500:	mov	r8, r0
   18504:	mov	r9, r1
   18508:	orrs	r3, r8, r9
   1850c:	bne	185c4 <__assert_fail@plt+0x6c48>
   18510:	ldr	r2, [pc, #348]	; 18674 <__assert_fail@plt+0x6cf8>
   18514:	mov	r3, #4096	; 0x1000
   18518:	add	r2, pc, r2
   1851c:	str	r5, [sp, #8]
   18520:	stm	sp, {r2, r7}
   18524:	mov	r1, r3
   18528:	mov	r2, #1
   1852c:	mov	r0, r4
   18530:	bl	11964 <__snprintf_chk@plt>
   18534:	cmp	r0, sl
   18538:	bhi	185c4 <__assert_fail@plt+0x6c48>
   1853c:	mov	r0, r4
   18540:	bl	16be4 <__assert_fail@plt+0x5268>
   18544:	mov	r8, r0
   18548:	mov	r9, r1
   1854c:	b	185c4 <__assert_fail@plt+0x6c48>
   18550:	mov	r0, r8
   18554:	bl	115f8 <strdup@plt>
   18558:	subs	r4, r0, #0
   1855c:	movne	r8, #33	; 0x21
   18560:	bne	1856c <__assert_fail@plt+0x6bf0>
   18564:	b	185bc <__assert_fail@plt+0x6c40>
   18568:	strb	r8, [r0]
   1856c:	mov	r1, #47	; 0x2f
   18570:	mov	r0, r4
   18574:	bl	1176c <strchr@plt>
   18578:	cmp	r0, #0
   1857c:	bne	18568 <__assert_fail@plt+0x6bec>
   18580:	ldr	r2, [pc, #240]	; 18678 <__assert_fail@plt+0x6cfc>
   18584:	mov	r3, #4096	; 0x1000
   18588:	add	r2, pc, r2
   1858c:	add	r8, sp, #124	; 0x7c
   18590:	stm	sp, {r2, r7}
   18594:	mov	r1, r3
   18598:	mov	r2, #1
   1859c:	strd	r4, [sp, #8]
   185a0:	mov	r0, r8
   185a4:	bl	11964 <__snprintf_chk@plt>
   185a8:	mov	r7, r0
   185ac:	mov	r0, r4
   185b0:	bl	11568 <free@plt>
   185b4:	cmp	r7, #4096	; 0x1000
   185b8:	bcc	18624 <__assert_fail@plt+0x6ca8>
   185bc:	mov	r8, #0
   185c0:	mov	r9, #0
   185c4:	mov	r0, r5
   185c8:	bl	11568 <free@plt>
   185cc:	add	r3, sp, #4160	; 0x1040
   185d0:	add	r3, r3, #60	; 0x3c
   185d4:	ldr	r2, [r3]
   185d8:	ldr	r3, [r6]
   185dc:	mov	r0, r8
   185e0:	cmp	r2, r3
   185e4:	mov	r1, r9
   185e8:	bne	18658 <__assert_fail@plt+0x6cdc>
   185ec:	add	sp, sp, #4224	; 0x1080
   185f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   185f4:	mov	r1, r4
   185f8:	add	r2, sp, #16
   185fc:	mov	r0, #3
   18600:	bl	1191c <__xstat64@plt>
   18604:	subs	r5, r0, #0
   18608:	addne	r4, r4, #5
   1860c:	bne	18470 <__assert_fail@plt+0x6af4>
   18610:	ldrd	r8, [sp, #48]	; 0x30
   18614:	b	185c4 <__assert_fail@plt+0x6c48>
   18618:	ldr	r7, [pc, #92]	; 1867c <__assert_fail@plt+0x6d00>
   1861c:	add	r7, pc, r7
   18620:	b	1844c <__assert_fail@plt+0x6ad0>
   18624:	mov	r0, r8
   18628:	bl	16be4 <__assert_fail@plt+0x5268>
   1862c:	mov	r8, r0
   18630:	mov	r9, r1
   18634:	b	185c4 <__assert_fail@plt+0x6c48>
   18638:	ldr	r3, [pc, #64]	; 18680 <__assert_fail@plt+0x6d04>
   1863c:	ldr	r1, [pc, #64]	; 18684 <__assert_fail@plt+0x6d08>
   18640:	ldr	r0, [pc, #64]	; 18688 <__assert_fail@plt+0x6d0c>
   18644:	add	r3, pc, r3
   18648:	ldr	r2, [pc, #60]	; 1868c <__assert_fail@plt+0x6d10>
   1864c:	add	r1, pc, r1
   18650:	add	r0, pc, r0
   18654:	bl	1197c <__assert_fail@plt>
   18658:	bl	11604 <__stack_chk_fail@plt>
   1865c:	andeq	r2, r1, r0, lsr sl
   18660:	muleq	r0, ip, r1
   18664:	andeq	r1, r0, r8, ror #20
   18668:	andeq	r1, r0, ip, lsl sl
   1866c:	andeq	r1, r0, r0, lsr #20
   18670:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18674:	andeq	r1, r0, r8, ror #19
   18678:	andeq	r1, r0, ip, asr #18
   1867c:	andeq	r1, r0, r8, ror #10
   18680:	muleq	r0, r4, r6
   18684:	andeq	r1, r0, r8, ror #16
   18688:	andeq	r1, r0, r0, ror r8
   1868c:	andeq	r0, r0, r6, ror #6
   18690:	mov	r2, #0
   18694:	mov	r1, r0
   18698:	mov	r0, r2
   1869c:	b	18414 <__assert_fail@plt+0x6a98>
   186a0:	push	{r4, lr}
   186a4:	bl	148e0 <__assert_fail@plt+0x2f64>
   186a8:	ldrd	r0, [r0]
   186ac:	pop	{r4, pc}
   186b0:	ldr	ip, [pc, #656]	; 18948 <__assert_fail@plt+0x6fcc>
   186b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186b8:	add	ip, pc, ip
   186bc:	ldr	lr, [pc, #648]	; 1894c <__assert_fail@plt+0x6fd0>
   186c0:	sub	sp, sp, #4096	; 0x1000
   186c4:	sub	sp, sp, #28
   186c8:	ldr	r5, [ip, lr]
   186cc:	mov	r7, r2
   186d0:	add	r2, sp, #4096	; 0x1000
   186d4:	mov	r8, r3
   186d8:	add	r2, r2, #20
   186dc:	ldr	r3, [r5]
   186e0:	subs	r9, r0, #0
   186e4:	mov	r6, r1
   186e8:	str	r3, [r2]
   186ec:	mov	r1, ip
   186f0:	beq	188a8 <__assert_fail@plt+0x6f2c>
   186f4:	ldr	r2, [pc, #596]	; 18950 <__assert_fail@plt+0x6fd4>
   186f8:	mov	r1, #0
   186fc:	add	r2, pc, r2
   18700:	bl	14bd8 <__assert_fail@plt+0x325c>
   18704:	subs	r4, r0, #0
   18708:	bne	187cc <__assert_fail@plt+0x6e50>
   1870c:	add	fp, sp, #20
   18710:	mov	r1, fp
   18714:	mov	r3, r4
   18718:	ldr	r2, [pc, #564]	; 18954 <__assert_fail@plt+0x6fd8>
   1871c:	mov	r0, r9
   18720:	bl	15544 <__assert_fail@plt+0x3bc8>
   18724:	add	sl, sp, #24
   18728:	cmp	r0, #0
   1872c:	blt	188a8 <__assert_fail@plt+0x6f2c>
   18730:	add	sl, sl, r0
   18734:	mov	r0, fp
   18738:	strb	r4, [sl, #-4]
   1873c:	bl	18e38 <__assert_fail@plt+0x74bc>
   18740:	mov	r0, fp
   18744:	bl	18e38 <__assert_fail@plt+0x74bc>
   18748:	subs	sl, r0, #0
   1874c:	beq	188a8 <__assert_fail@plt+0x6f2c>
   18750:	mov	fp, #47	; 0x2f
   18754:	b	1875c <__assert_fail@plt+0x6de0>
   18758:	strb	fp, [r3]
   1875c:	mov	r1, #33	; 0x21
   18760:	mov	r0, sl
   18764:	bl	1176c <strchr@plt>
   18768:	subs	r3, r0, #0
   1876c:	bne	18758 <__assert_fail@plt+0x6ddc>
   18770:	cmp	r6, #0
   18774:	cmpne	r7, #0
   18778:	bne	188f8 <__assert_fail@plt+0x6f7c>
   1877c:	cmp	r8, #0
   18780:	beq	187a4 <__assert_fail@plt+0x6e28>
   18784:	mov	r0, r9
   18788:	bl	14724 <__assert_fail@plt+0x2da8>
   1878c:	mov	r1, sl
   18790:	mov	r2, #0
   18794:	bl	18414 <__assert_fail@plt+0x6a98>
   18798:	orrs	r3, r0, r1
   1879c:	strd	r0, [r8]
   187a0:	beq	188a8 <__assert_fail@plt+0x6f2c>
   187a4:	add	r3, sp, #4096	; 0x1000
   187a8:	add	r3, r3, #20
   187ac:	ldr	r2, [r3]
   187b0:	ldr	r3, [r5]
   187b4:	mov	r0, r4
   187b8:	cmp	r2, r3
   187bc:	bne	18944 <__assert_fail@plt+0x6fc8>
   187c0:	add	sp, sp, #4096	; 0x1000
   187c4:	add	sp, sp, #28
   187c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187cc:	add	r4, sp, #24
   187d0:	mov	r1, r4
   187d4:	ldr	r2, [pc, #380]	; 18958 <__assert_fail@plt+0x6fdc>
   187d8:	mov	r3, #0
   187dc:	str	r3, [r1, #-12]!
   187e0:	add	r2, pc, r2
   187e4:	mov	r0, r9
   187e8:	bl	158a8 <__assert_fail@plt+0x3f2c>
   187ec:	ldr	r3, [r4, #-12]
   187f0:	cmp	r3, #0
   187f4:	str	r3, [r4, #-8]
   187f8:	beq	188b0 <__assert_fail@plt+0x6f34>
   187fc:	ldr	r1, [pc, #344]	; 1895c <__assert_fail@plt+0x6fe0>
   18800:	sub	r0, r4, #8
   18804:	add	r1, pc, r1
   18808:	bl	116e8 <strsep@plt>
   1880c:	cmp	r0, #0
   18810:	ldreq	r3, [r4, #-12]
   18814:	beq	188b0 <__assert_fail@plt+0x6f34>
   18818:	ldr	r1, [pc, #320]	; 18960 <__assert_fail@plt+0x6fe4>
   1881c:	mov	r2, #4
   18820:	add	r1, pc, r1
   18824:	bl	1179c <strncasecmp@plt>
   18828:	ldr	r3, [r4, #-12]
   1882c:	subs	r4, r0, #0
   18830:	bne	188b0 <__assert_fail@plt+0x6f34>
   18834:	mov	r0, r3
   18838:	bl	11568 <free@plt>
   1883c:	mov	r0, r9
   18840:	bl	177dc <__assert_fail@plt+0x5e60>
   18844:	subs	sl, r0, #0
   18848:	beq	188b8 <__assert_fail@plt+0x6f3c>
   1884c:	cmp	r6, #0
   18850:	cmpne	r7, #0
   18854:	bne	18928 <__assert_fail@plt+0x6fac>
   18858:	cmp	r8, #0
   1885c:	beq	1891c <__assert_fail@plt+0x6fa0>
   18860:	mov	r0, r9
   18864:	bl	14724 <__assert_fail@plt+0x2da8>
   18868:	mov	r2, #0
   1886c:	mov	r1, sl
   18870:	bl	18414 <__assert_fail@plt+0x6a98>
   18874:	orrs	r3, r0, r1
   18878:	strd	r0, [r8]
   1887c:	mov	r0, sl
   18880:	bne	18920 <__assert_fail@plt+0x6fa4>
   18884:	bl	11568 <free@plt>
   18888:	cmp	r6, #0
   1888c:	beq	188e4 <__assert_fail@plt+0x6f68>
   18890:	mov	r2, r7
   18894:	mov	r1, r6
   18898:	mov	r0, r9
   1889c:	bl	17390 <__assert_fail@plt+0x5a14>
   188a0:	cmp	r0, #0
   188a4:	bne	188e4 <__assert_fail@plt+0x6f68>
   188a8:	mvn	r4, #0
   188ac:	b	187a4 <__assert_fail@plt+0x6e28>
   188b0:	mov	r0, r3
   188b4:	bl	11568 <free@plt>
   188b8:	cmp	r6, #0
   188bc:	beq	188d8 <__assert_fail@plt+0x6f5c>
   188c0:	mov	r2, r7
   188c4:	mov	r1, r6
   188c8:	mov	r0, r9
   188cc:	bl	17390 <__assert_fail@plt+0x5a14>
   188d0:	cmp	r0, #0
   188d4:	beq	188a8 <__assert_fail@plt+0x6f2c>
   188d8:	cmp	r8, #0
   188dc:	moveq	r4, r8
   188e0:	beq	187a4 <__assert_fail@plt+0x6e28>
   188e4:	mov	r0, r9
   188e8:	bl	186a0 <__assert_fail@plt+0x6d24>
   188ec:	mov	r4, #0
   188f0:	strd	r0, [r8]
   188f4:	b	187a4 <__assert_fail@plt+0x6e28>
   188f8:	mov	r0, r6
   188fc:	mov	r2, r7
   18900:	mov	r1, sl
   18904:	str	r3, [sp, #4]
   18908:	add	r6, r6, r7
   1890c:	bl	117f0 <strncpy@plt>
   18910:	ldr	r3, [sp, #4]
   18914:	strb	r3, [r6, #-1]
   18918:	b	1877c <__assert_fail@plt+0x6e00>
   1891c:	mov	r0, sl
   18920:	bl	11568 <free@plt>
   18924:	b	187a4 <__assert_fail@plt+0x6e28>
   18928:	mov	r2, r7
   1892c:	mov	r1, sl
   18930:	mov	r0, r6
   18934:	bl	117f0 <strncpy@plt>
   18938:	add	r3, r6, r7
   1893c:	strb	r4, [r3, #-1]
   18940:	b	18858 <__assert_fail@plt+0x6edc>
   18944:	bl	11604 <__stack_chk_fail@plt>
   18948:	muleq	r1, r4, r7
   1894c:	muleq	r0, ip, r1
   18950:	andeq	r1, r0, r0, lsr #16
   18954:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18958:	andeq	r1, r0, r0, lsl r6
   1895c:	andeq	r1, r0, r4, lsr #14
   18960:	andeq	r1, r0, ip, lsl #14
   18964:	orrs	ip, r0, r1
   18968:	push	{r4, r5, r6, lr}
   1896c:	beq	189b0 <__assert_fail@plt+0x7034>
   18970:	mov	r5, r3
   18974:	mov	r3, #0
   18978:	mov	r4, r2
   1897c:	mov	r2, r3
   18980:	bl	17278 <__assert_fail@plt+0x58fc>
   18984:	subs	r6, r0, #0
   18988:	beq	189b8 <__assert_fail@plt+0x703c>
   1898c:	mov	r1, r4
   18990:	mov	r2, r5
   18994:	ldr	r3, [sp, #16]
   18998:	bl	186b0 <__assert_fail@plt+0x6d34>
   1899c:	mov	r4, r0
   189a0:	mov	r0, r6
   189a4:	bl	143c0 <__assert_fail@plt+0x2a44>
   189a8:	mov	r0, r4
   189ac:	pop	{r4, r5, r6, pc}
   189b0:	mvn	r4, #21
   189b4:	b	189a8 <__assert_fail@plt+0x702c>
   189b8:	mvn	r4, #11
   189bc:	b	189a8 <__assert_fail@plt+0x702c>
   189c0:	ldr	ip, [pc, #112]	; 18a38 <__assert_fail@plt+0x70bc>
   189c4:	ldr	r2, [pc, #112]	; 18a3c <__assert_fail@plt+0x70c0>
   189c8:	add	ip, pc, ip
   189cc:	push	{r4, r6, r7, lr}
   189d0:	sub	sp, sp, #24
   189d4:	ldr	r4, [ip, r2]
   189d8:	add	lr, sp, #8
   189dc:	mov	r3, #0
   189e0:	str	lr, [sp]
   189e4:	ldr	lr, [r4]
   189e8:	mov	r2, r3
   189ec:	mov	r6, r0
   189f0:	mov	r7, r1
   189f4:	str	lr, [sp, #20]
   189f8:	bl	18964 <__assert_fail@plt+0x6fe8>
   189fc:	cmp	r0, #0
   18a00:	mvnne	r0, #0
   18a04:	bne	18a1c <__assert_fail@plt+0x70a0>
   18a08:	ldrd	r2, [sp, #8]
   18a0c:	cmp	r3, r7
   18a10:	cmpeq	r2, r6
   18a14:	moveq	r0, #1
   18a18:	movne	r0, #0
   18a1c:	ldr	r2, [sp, #20]
   18a20:	ldr	r3, [r4]
   18a24:	cmp	r2, r3
   18a28:	bne	18a34 <__assert_fail@plt+0x70b8>
   18a2c:	add	sp, sp, #24
   18a30:	pop	{r4, r6, r7, pc}
   18a34:	bl	11604 <__stack_chk_fail@plt>
   18a38:	andeq	r2, r1, r4, lsl #9
   18a3c:	muleq	r0, ip, r1
   18a40:	ldr	r3, [pc, #208]	; 18b18 <__assert_fail@plt+0x719c>
   18a44:	ldr	ip, [pc, #208]	; 18b1c <__assert_fail@plt+0x71a0>
   18a48:	add	r3, pc, r3
   18a4c:	push	{r4, r5, r6, r7, r8, lr}
   18a50:	sub	sp, sp, #112	; 0x70
   18a54:	ldr	r5, [r3, ip]
   18a58:	mov	r6, r0
   18a5c:	mov	r4, r1
   18a60:	ldr	r3, [r5]
   18a64:	mov	r7, r2
   18a68:	str	r3, [sp, #108]	; 0x6c
   18a6c:	bl	17390 <__assert_fail@plt+0x5a14>
   18a70:	subs	r8, r0, #0
   18a74:	beq	18ad8 <__assert_fail@plt+0x715c>
   18a78:	bl	11760 <strlen@plt>
   18a7c:	add	r3, r0, #6
   18a80:	cmp	r3, r7
   18a84:	bhi	18ad8 <__assert_fail@plt+0x715c>
   18a88:	add	r2, r0, #1
   18a8c:	mov	r1, r8
   18a90:	add	r0, r4, #5
   18a94:	bl	1155c <memmove@plt>
   18a98:	ldr	r3, [pc, #128]	; 18b20 <__assert_fail@plt+0x71a4>
   18a9c:	mov	r2, sp
   18aa0:	add	r3, pc, r3
   18aa4:	mov	r1, r4
   18aa8:	ldr	r0, [r3]
   18aac:	ldrb	r3, [r3, #4]
   18ab0:	str	r0, [r4]
   18ab4:	mov	r0, #3
   18ab8:	strb	r3, [r4, #4]
   18abc:	bl	1191c <__xstat64@plt>
   18ac0:	cmp	r0, #0
   18ac4:	bne	18ad8 <__assert_fail@plt+0x715c>
   18ac8:	ldr	r3, [sp, #16]
   18acc:	and	r3, r3, #61440	; 0xf000
   18ad0:	cmp	r3, #24576	; 0x6000
   18ad4:	beq	18af4 <__assert_fail@plt+0x7178>
   18ad8:	mov	r0, #0
   18adc:	ldr	r2, [sp, #108]	; 0x6c
   18ae0:	ldr	r3, [r5]
   18ae4:	cmp	r2, r3
   18ae8:	bne	18b14 <__assert_fail@plt+0x7198>
   18aec:	add	sp, sp, #112	; 0x70
   18af0:	pop	{r4, r5, r6, r7, r8, pc}
   18af4:	mov	r0, r6
   18af8:	ldrd	r6, [sp, #32]
   18afc:	bl	186a0 <__assert_fail@plt+0x6d24>
   18b00:	cmp	r7, r1
   18b04:	cmpeq	r6, r0
   18b08:	bne	18ad8 <__assert_fail@plt+0x715c>
   18b0c:	mov	r0, r4
   18b10:	b	18adc <__assert_fail@plt+0x7160>
   18b14:	bl	11604 <__stack_chk_fail@plt>
   18b18:	andeq	r2, r1, r4, lsl #8
   18b1c:	muleq	r0, ip, r1
   18b20:	andeq	r1, r0, r8, lsr #8
   18b24:	push	{r4, r5, r6, lr}
   18b28:	mov	r6, r3
   18b2c:	mov	r3, #0
   18b30:	mov	r4, r2
   18b34:	mov	r2, r3
   18b38:	bl	17278 <__assert_fail@plt+0x58fc>
   18b3c:	subs	r5, r0, #0
   18b40:	moveq	r4, r5
   18b44:	beq	18b60 <__assert_fail@plt+0x71e4>
   18b48:	mov	r1, r4
   18b4c:	mov	r2, r6
   18b50:	bl	18a40 <__assert_fail@plt+0x70c4>
   18b54:	mov	r4, r0
   18b58:	mov	r0, r5
   18b5c:	bl	143c0 <__assert_fail@plt+0x2a44>
   18b60:	mov	r0, r4
   18b64:	pop	{r4, r5, r6, pc}
   18b68:	push	{r4, r5, r6, lr}
   18b6c:	mov	r6, r3
   18b70:	mov	r3, #0
   18b74:	mov	r4, r2
   18b78:	mov	r2, r3
   18b7c:	bl	17278 <__assert_fail@plt+0x58fc>
   18b80:	subs	r5, r0, #0
   18b84:	moveq	r4, r5
   18b88:	beq	18ba4 <__assert_fail@plt+0x7228>
   18b8c:	mov	r1, r4
   18b90:	mov	r2, r6
   18b94:	bl	17390 <__assert_fail@plt+0x5a14>
   18b98:	mov	r4, r0
   18b9c:	mov	r0, r5
   18ba0:	bl	143c0 <__assert_fail@plt+0x2a44>
   18ba4:	mov	r0, r4
   18ba8:	pop	{r4, r5, r6, pc}
   18bac:	ldr	r1, [pc]	; 18bb4 <__assert_fail@plt+0x7238>
   18bb0:	b	11670 <mkostemp64@plt>
   18bb4:	andeq	r0, r8, r2, asr #1
   18bb8:	ldr	ip, [pc, #208]	; 18c90 <__assert_fail@plt+0x7314>
   18bbc:	push	{r4, r5, r6, r7, lr}
   18bc0:	add	ip, pc, ip
   18bc4:	ldr	lr, [pc, #200]	; 18c94 <__assert_fail@plt+0x7318>
   18bc8:	sub	sp, sp, #20
   18bcc:	mov	r5, r2
   18bd0:	ldr	r4, [ip, lr]
   18bd4:	subs	r3, r1, #0
   18bd8:	mov	r6, r0
   18bdc:	ldr	r2, [r4]
   18be0:	mov	r0, ip
   18be4:	str	r2, [sp, #12]
   18be8:	beq	18c58 <__assert_fail@plt+0x72dc>
   18bec:	ldr	r2, [pc, #164]	; 18c98 <__assert_fail@plt+0x731c>
   18bf0:	str	r5, [sp]
   18bf4:	add	r2, pc, r2
   18bf8:	mov	r1, #1
   18bfc:	add	r0, sp, #8
   18c00:	bl	116a0 <__asprintf_chk@plt>
   18c04:	cmp	r0, #0
   18c08:	blt	18c84 <__assert_fail@plt+0x7308>
   18c0c:	mov	r0, #63	; 0x3f
   18c10:	bl	11910 <umask@plt>
   18c14:	mov	r7, r0
   18c18:	ldr	r0, [sp, #8]
   18c1c:	bl	18bac <__assert_fail@plt+0x7230>
   18c20:	mov	r5, r0
   18c24:	mov	r0, r7
   18c28:	bl	11910 <umask@plt>
   18c2c:	cmn	r5, #1
   18c30:	beq	18c74 <__assert_fail@plt+0x72f8>
   18c34:	ldr	r3, [sp, #8]
   18c38:	str	r3, [r6]
   18c3c:	ldr	r2, [sp, #12]
   18c40:	ldr	r3, [r4]
   18c44:	mov	r0, r5
   18c48:	cmp	r2, r3
   18c4c:	bne	18c8c <__assert_fail@plt+0x7310>
   18c50:	add	sp, sp, #20
   18c54:	pop	{r4, r5, r6, r7, pc}
   18c58:	ldr	r0, [pc, #60]	; 18c9c <__assert_fail@plt+0x7320>
   18c5c:	add	r0, pc, r0
   18c60:	bl	116ac <getenv@plt>
   18c64:	subs	r3, r0, #0
   18c68:	ldreq	r3, [pc, #48]	; 18ca0 <__assert_fail@plt+0x7324>
   18c6c:	addeq	r3, pc, r3
   18c70:	b	18bec <__assert_fail@plt+0x7270>
   18c74:	ldr	r0, [sp, #8]
   18c78:	bl	11568 <free@plt>
   18c7c:	mov	r3, #0
   18c80:	b	18c38 <__assert_fail@plt+0x72bc>
   18c84:	mvn	r5, #0
   18c88:	b	18c3c <__assert_fail@plt+0x72c0>
   18c8c:	bl	11604 <__stack_chk_fail@plt>
   18c90:	andeq	r2, r1, ip, lsl #5
   18c94:	muleq	r0, ip, r1
   18c98:	andeq	r1, r0, ip, ror #6
   18c9c:	strdeq	r1, [r0], -ip
   18ca0:	andeq	r1, r0, r4, ror #5
   18ca4:	push	{r4, r5, r6, lr}
   18ca8:	mov	r2, r1
   18cac:	ldr	r1, [pc, #108]	; 18d20 <__assert_fail@plt+0x73a4>
   18cb0:	mov	r5, r0
   18cb4:	bl	11868 <fcntl64@plt>
   18cb8:	subs	r4, r0, #0
   18cbc:	blt	18cc8 <__assert_fail@plt+0x734c>
   18cc0:	mov	r0, r4
   18cc4:	pop	{r4, r5, r6, pc}
   18cc8:	mov	r0, r5
   18ccc:	bl	11610 <dup@plt>
   18cd0:	subs	r4, r0, #0
   18cd4:	blt	18cc0 <__assert_fail@plt+0x7344>
   18cd8:	mov	r1, #1
   18cdc:	bl	11868 <fcntl64@plt>
   18ce0:	subs	r2, r0, #0
   18ce4:	blt	18d00 <__assert_fail@plt+0x7384>
   18ce8:	orr	r2, r2, #1
   18cec:	mov	r1, #2
   18cf0:	mov	r0, r4
   18cf4:	bl	11868 <fcntl64@plt>
   18cf8:	cmp	r0, #0
   18cfc:	bge	18cc0 <__assert_fail@plt+0x7344>
   18d00:	bl	11790 <__errno_location@plt>
   18d04:	mov	r5, r0
   18d08:	mov	r0, r4
   18d0c:	ldr	r6, [r5]
   18d10:	mvn	r4, #0
   18d14:	bl	1194c <close@plt>
   18d18:	str	r6, [r5]
   18d1c:	b	18cc0 <__assert_fail@plt+0x7344>
   18d20:	andeq	r0, r0, r6, lsl #8
   18d24:	b	116f4 <getdtablesize@plt>
   18d28:	subs	r3, r0, #0
   18d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d30:	beq	18e28 <__assert_fail@plt+0x74ac>
   18d34:	ldrsb	r3, [r3]
   18d38:	cmp	r3, #0
   18d3c:	beq	18e28 <__assert_fail@plt+0x74ac>
   18d40:	mov	r9, r1
   18d44:	bl	115f8 <strdup@plt>
   18d48:	subs	r8, r0, #0
   18d4c:	beq	18e30 <__assert_fail@plt+0x74b4>
   18d50:	ldrsb	r3, [r8]
   18d54:	cmp	r3, #47	; 0x2f
   18d58:	addeq	r4, r8, #1
   18d5c:	ldrsbeq	r3, [r8, #1]
   18d60:	movne	r4, r8
   18d64:	cmp	r3, #0
   18d68:	beq	18df8 <__assert_fail@plt+0x747c>
   18d6c:	mov	r6, #47	; 0x2f
   18d70:	mov	r7, #0
   18d74:	b	18da4 <__assert_fail@plt+0x7428>
   18d78:	strb	r7, [r5]
   18d7c:	ldrsb	r3, [r4]
   18d80:	cmp	r3, #0
   18d84:	bne	18e00 <__assert_fail@plt+0x7484>
   18d88:	mov	r4, r5
   18d8c:	strb	r6, [r4], #1
   18d90:	cmp	r4, #0
   18d94:	beq	18df8 <__assert_fail@plt+0x747c>
   18d98:	ldrsb	r3, [r5, #1]
   18d9c:	cmp	r3, #0
   18da0:	beq	18df8 <__assert_fail@plt+0x747c>
   18da4:	mov	r1, #47	; 0x2f
   18da8:	mov	r0, r4
   18dac:	bl	1176c <strchr@plt>
   18db0:	subs	r5, r0, #0
   18db4:	bne	18d78 <__assert_fail@plt+0x73fc>
   18db8:	ldrsb	r3, [r4]
   18dbc:	cmp	r3, #0
   18dc0:	beq	18df8 <__assert_fail@plt+0x747c>
   18dc4:	mov	r1, r9
   18dc8:	mov	r0, r8
   18dcc:	bl	117c0 <mkdir@plt>
   18dd0:	subs	r4, r0, #0
   18dd4:	beq	18df8 <__assert_fail@plt+0x747c>
   18dd8:	bl	11790 <__errno_location@plt>
   18ddc:	ldr	r3, [r0]
   18de0:	cmp	r3, #17
   18de4:	beq	18df8 <__assert_fail@plt+0x747c>
   18de8:	mov	r0, r8
   18dec:	bl	11568 <free@plt>
   18df0:	mov	r0, r4
   18df4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18df8:	mov	r4, #0
   18dfc:	b	18de8 <__assert_fail@plt+0x746c>
   18e00:	mov	r1, r9
   18e04:	mov	r0, r8
   18e08:	bl	117c0 <mkdir@plt>
   18e0c:	subs	r4, r0, #0
   18e10:	beq	18d88 <__assert_fail@plt+0x740c>
   18e14:	bl	11790 <__errno_location@plt>
   18e18:	ldr	r3, [r0]
   18e1c:	cmp	r3, #17
   18e20:	beq	18d88 <__assert_fail@plt+0x740c>
   18e24:	b	18de8 <__assert_fail@plt+0x746c>
   18e28:	mvn	r4, #21
   18e2c:	b	18df0 <__assert_fail@plt+0x7474>
   18e30:	mvn	r4, #11
   18e34:	b	18df0 <__assert_fail@plt+0x7474>
   18e38:	subs	r3, r0, #0
   18e3c:	beq	18e5c <__assert_fail@plt+0x74e0>
   18e40:	push	{r4, lr}
   18e44:	mov	r1, #47	; 0x2f
   18e48:	bl	1188c <strrchr@plt>
   18e4c:	cmp	r0, #0
   18e50:	movne	r3, #0
   18e54:	strbne	r3, [r0], #1
   18e58:	pop	{r4, pc}
   18e5c:	mov	r0, r3
   18e60:	bx	lr
   18e64:	push	{r4, r5, r6, lr}
   18e68:	mov	r6, r1
   18e6c:	mov	r5, r2
   18e70:	mov	r4, r0
   18e74:	bl	11844 <__sched_cpualloc@plt>
   18e78:	cmp	r0, #0
   18e7c:	popeq	{r4, r5, r6, pc}
   18e80:	cmp	r6, #0
   18e84:	addne	r3, r4, #31
   18e88:	lsrne	r3, r3, #5
   18e8c:	lslne	r3, r3, #2
   18e90:	strne	r3, [r6]
   18e94:	cmp	r5, #0
   18e98:	addne	r4, r4, #31
   18e9c:	bicne	r4, r4, #31
   18ea0:	strne	r4, [r5]
   18ea4:	pop	{r4, r5, r6, pc}
   18ea8:	b	117d8 <__sched_cpufree@plt>
   18eac:	ldr	r3, [pc, #212]	; 18f88 <__assert_fail@plt+0x760c>
   18eb0:	ldr	r2, [pc, #212]	; 18f8c <__assert_fail@plt+0x7610>
   18eb4:	add	r3, pc, r3
   18eb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ebc:	sub	sp, sp, #12
   18ec0:	ldr	r9, [r3, r2]
   18ec4:	mov	r7, sp
   18ec8:	mov	r1, r7
   18ecc:	ldr	r3, [r9]
   18ed0:	mov	r2, #0
   18ed4:	mov	r0, #2048	; 0x800
   18ed8:	str	r3, [sp, #4]
   18edc:	bl	18e64 <__assert_fail@plt+0x74e8>
   18ee0:	subs	r4, r0, #0
   18ee4:	movne	r5, #2048	; 0x800
   18ee8:	ldrne	r8, [pc, #160]	; 18f90 <__assert_fail@plt+0x7614>
   18eec:	bne	18f18 <__assert_fail@plt+0x759c>
   18ef0:	b	18f7c <__assert_fail@plt+0x7600>
   18ef4:	mov	r0, r4
   18ef8:	lsl	r5, r5, #1
   18efc:	bl	18ea8 <__assert_fail@plt+0x752c>
   18f00:	mov	r0, r5
   18f04:	mov	r2, #0
   18f08:	mov	r1, r7
   18f0c:	bl	18e64 <__assert_fail@plt+0x74e8>
   18f10:	subs	r4, r0, #0
   18f14:	beq	18f7c <__assert_fail@plt+0x7600>
   18f18:	ldr	r2, [sp]
   18f1c:	mov	r1, #0
   18f20:	mov	r0, r4
   18f24:	bl	117e4 <memset@plt>
   18f28:	mov	r3, r4
   18f2c:	ldr	r2, [sp]
   18f30:	mov	r1, #0
   18f34:	mov	r0, #242	; 0xf2
   18f38:	bl	11748 <syscall@plt>
   18f3c:	subs	r6, r0, #0
   18f40:	bge	18f58 <__assert_fail@plt+0x75dc>
   18f44:	bl	11790 <__errno_location@plt>
   18f48:	ldr	r3, [r0]
   18f4c:	cmp	r5, r8
   18f50:	cmple	r3, #22
   18f54:	beq	18ef4 <__assert_fail@plt+0x7578>
   18f58:	mov	r0, r4
   18f5c:	bl	18ea8 <__assert_fail@plt+0x752c>
   18f60:	lsl	r0, r6, #3
   18f64:	ldr	r2, [sp, #4]
   18f68:	ldr	r3, [r9]
   18f6c:	cmp	r2, r3
   18f70:	bne	18f84 <__assert_fail@plt+0x7608>
   18f74:	add	sp, sp, #12
   18f78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18f7c:	mvn	r0, #0
   18f80:	b	18f64 <__assert_fail@plt+0x75e8>
   18f84:	bl	11604 <__stack_chk_fail@plt>
   18f88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   18f8c:	muleq	r0, ip, r1
   18f90:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   18f94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f98:	lsls	r7, r3, #3
   18f9c:	sub	sp, sp, #28
   18fa0:	mov	sl, r0
   18fa4:	beq	19140 <__assert_fail@plt+0x77c4>
   18fa8:	mov	r5, r3
   18fac:	ldr	r3, [pc, #404]	; 19148 <__assert_fail@plt+0x77cc>
   18fb0:	ldr	fp, [pc, #404]	; 1914c <__assert_fail@plt+0x77d0>
   18fb4:	add	r3, pc, r3
   18fb8:	str	r3, [sp, #16]
   18fbc:	ldr	r3, [pc, #396]	; 19150 <__assert_fail@plt+0x77d4>
   18fc0:	mov	r9, r1
   18fc4:	add	r3, pc, r3
   18fc8:	mov	r1, #0
   18fcc:	mov	r6, r2
   18fd0:	add	fp, pc, fp
   18fd4:	str	r3, [sp, #20]
   18fd8:	mov	ip, r1
   18fdc:	mov	r8, r0
   18fe0:	b	18ff0 <__assert_fail@plt+0x7674>
   18fe4:	cmp	r7, r4
   18fe8:	mov	ip, r4
   18fec:	bls	190cc <__assert_fail@plt+0x7750>
   18ff0:	cmp	r5, ip, lsr #3
   18ff4:	add	r4, ip, #1
   18ff8:	bls	18fe4 <__assert_fail@plt+0x7668>
   18ffc:	lsr	r2, ip, #5
   19000:	and	r3, ip, #31
   19004:	ldr	r2, [r6, r2, lsl #2]
   19008:	lsr	r3, r2, r3
   1900c:	tst	r3, #1
   19010:	beq	18fe4 <__assert_fail@plt+0x7668>
   19014:	cmp	r7, r4
   19018:	bls	190e4 <__assert_fail@plt+0x7768>
   1901c:	cmp	r5, r4, lsr #3
   19020:	bls	190e4 <__assert_fail@plt+0x7768>
   19024:	lsr	r2, r4, #5
   19028:	and	r3, r4, #31
   1902c:	ldr	r2, [r6, r2, lsl #2]
   19030:	lsr	r3, r2, r3
   19034:	tst	r3, #1
   19038:	beq	190e4 <__assert_fail@plt+0x7768>
   1903c:	sub	r0, r7, #1
   19040:	sub	r0, r0, ip
   19044:	mov	r2, #1
   19048:	b	1906c <__assert_fail@plt+0x76f0>
   1904c:	cmp	r5, r3, lsr #3
   19050:	bls	19080 <__assert_fail@plt+0x7704>
   19054:	ldr	r3, [r6, lr, lsl #2]
   19058:	add	lr, r2, #1
   1905c:	lsr	r3, r3, r1
   19060:	tst	r3, #1
   19064:	beq	19080 <__assert_fail@plt+0x7704>
   19068:	mov	r2, lr
   1906c:	add	r3, r2, r4
   19070:	cmp	r0, r2
   19074:	and	r1, r3, #31
   19078:	lsr	lr, r3, #5
   1907c:	bne	1904c <__assert_fail@plt+0x76d0>
   19080:	cmp	r2, #1
   19084:	beq	1911c <__assert_fail@plt+0x77a0>
   19088:	add	r4, ip, r2
   1908c:	str	r4, [sp, #8]
   19090:	stm	sp, {fp, ip}
   19094:	mvn	r3, #0
   19098:	mov	r2, #1
   1909c:	mov	r1, r9
   190a0:	mov	r0, r8
   190a4:	bl	11964 <__snprintf_chk@plt>
   190a8:	cmp	r0, r9
   190ac:	bcs	19110 <__assert_fail@plt+0x7794>
   190b0:	add	r4, r4, #1
   190b4:	cmp	r7, r4
   190b8:	add	r8, r8, r0
   190bc:	sub	r9, r9, r0
   190c0:	mov	r1, #1
   190c4:	mov	ip, r4
   190c8:	bhi	18ff0 <__assert_fail@plt+0x7674>
   190cc:	sub	r8, r8, r1
   190d0:	mov	r3, #0
   190d4:	mov	r0, sl
   190d8:	strb	r3, [r8]
   190dc:	add	sp, sp, #28
   190e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190e4:	ldr	r3, [sp, #16]
   190e8:	str	ip, [sp, #4]
   190ec:	str	r3, [sp]
   190f0:	mov	r2, #1
   190f4:	mvn	r3, #0
   190f8:	mov	r1, r9
   190fc:	mov	r0, r8
   19100:	mov	r4, ip
   19104:	bl	11964 <__snprintf_chk@plt>
   19108:	cmp	r0, r9
   1910c:	bcc	190b0 <__assert_fail@plt+0x7734>
   19110:	mov	r0, #0
   19114:	add	sp, sp, #28
   19118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1911c:	ldr	r3, [sp, #20]
   19120:	str	r4, [sp, #8]
   19124:	str	r3, [sp]
   19128:	str	ip, [sp, #4]
   1912c:	mvn	r3, #0
   19130:	mov	r1, r9
   19134:	mov	r0, r8
   19138:	bl	11964 <__snprintf_chk@plt>
   1913c:	b	190a8 <__assert_fail@plt+0x772c>
   19140:	mov	r8, r0
   19144:	b	190d0 <__assert_fail@plt+0x7754>
   19148:	andeq	r0, r0, r0, asr #31
   1914c:	andeq	r0, r0, ip, lsr #31
   19150:	andeq	r0, r0, ip, lsr #31
   19154:	lsl	ip, r3, #3
   19158:	subs	ip, ip, #4
   1915c:	push	{r4, r5, r6, r7, r8, lr}
   19160:	mov	r7, r0
   19164:	mov	r6, r0
   19168:	bmi	19284 <__assert_fail@plt+0x7908>
   1916c:	cmp	r1, #0
   19170:	beq	19284 <__assert_fail@plt+0x7908>
   19174:	mov	r0, #0
   19178:	b	191d0 <__assert_fail@plt+0x7854>
   1917c:	lsr	r8, r5, #5
   19180:	and	r5, r5, #31
   19184:	ldr	r8, [r2, r8, lsl #2]
   19188:	lsr	r5, r8, r5
   1918c:	tst	r5, #1
   19190:	beq	19248 <__assert_fail@plt+0x78cc>
   19194:	orr	r4, lr, #8
   19198:	cmp	r0, #0
   1919c:	moveq	r0, r6
   191a0:	cmp	r4, #9
   191a4:	mov	lr, r4
   191a8:	addgt	lr, r4, #87	; 0x57
   191ac:	ble	19258 <__assert_fail@plt+0x78dc>
   191b0:	mov	r4, r6
   191b4:	subs	ip, ip, #4
   191b8:	strb	lr, [r4], #1
   191bc:	bmi	1926c <__assert_fail@plt+0x78f0>
   191c0:	sub	lr, r4, r7
   191c4:	cmp	lr, r1
   191c8:	beq	1926c <__assert_fail@plt+0x78f0>
   191cc:	mov	r6, r4
   191d0:	cmp	r3, ip, lsr #3
   191d4:	lsrhi	r4, ip, #5
   191d8:	andhi	lr, ip, #31
   191dc:	ldrhi	r4, [r2, r4, lsl #2]
   191e0:	movls	lr, #0
   191e4:	lsrhi	lr, r4, lr
   191e8:	add	r4, ip, #1
   191ec:	andhi	lr, lr, #1
   191f0:	cmp	r3, r4, lsr #3
   191f4:	bls	19210 <__assert_fail@plt+0x7894>
   191f8:	lsr	r5, r4, #5
   191fc:	and	r4, r4, #31
   19200:	ldr	r5, [r2, r5, lsl #2]
   19204:	lsr	r4, r5, r4
   19208:	tst	r4, #1
   1920c:	orrne	lr, lr, #2
   19210:	add	r4, ip, #2
   19214:	cmp	r3, r4, lsr #3
   19218:	bls	19234 <__assert_fail@plt+0x78b8>
   1921c:	lsr	r5, r4, #5
   19220:	and	r4, r4, #31
   19224:	ldr	r5, [r2, r5, lsl #2]
   19228:	lsr	r4, r5, r4
   1922c:	tst	r4, #1
   19230:	orrne	lr, lr, #4
   19234:	add	r5, ip, #3
   19238:	clz	r4, r0
   1923c:	cmp	r3, r5, lsr #3
   19240:	lsr	r4, r4, #5
   19244:	bhi	1917c <__assert_fail@plt+0x7800>
   19248:	cmp	lr, #0
   1924c:	moveq	r4, #0
   19250:	cmp	r4, #0
   19254:	movne	r0, r6
   19258:	mov	r4, r6
   1925c:	add	lr, lr, #48	; 0x30
   19260:	subs	ip, ip, #4
   19264:	strb	lr, [r4], #1
   19268:	bpl	191c0 <__assert_fail@plt+0x7844>
   1926c:	cmp	r0, #0
   19270:	mov	r3, #0
   19274:	strb	r3, [r4]
   19278:	popne	{r4, r5, r6, r7, r8, pc}
   1927c:	mov	r0, r6
   19280:	pop	{r4, r5, r6, r7, r8, pc}
   19284:	mov	r3, #0
   19288:	strb	r3, [r6], #-1
   1928c:	mov	r0, r6
   19290:	pop	{r4, r5, r6, r7, r8, pc}
   19294:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19298:	mov	r7, r0
   1929c:	mov	r6, r1
   192a0:	mov	r9, r2
   192a4:	bl	11760 <strlen@plt>
   192a8:	cmp	r0, #1
   192ac:	sub	r0, r0, #1
   192b0:	add	r4, r7, r0
   192b4:	bls	192c4 <__assert_fail@plt+0x7948>
   192b8:	ldrb	r3, [r7]
   192bc:	cmp	r3, #48	; 0x30
   192c0:	beq	193d4 <__assert_fail@plt+0x7a58>
   192c4:	mov	r2, r9
   192c8:	mov	r1, #0
   192cc:	mov	r0, r6
   192d0:	bl	117e4 <memset@plt>
   192d4:	cmp	r7, r4
   192d8:	movls	r5, #0
   192dc:	movls	r8, #1
   192e0:	bls	19390 <__assert_fail@plt+0x7a14>
   192e4:	b	193cc <__assert_fail@plt+0x7a50>
   192e8:	sxtb	r0, r3
   192ec:	cmn	r0, #1
   192f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   192f4:	tst	r3, #1
   192f8:	beq	19314 <__assert_fail@plt+0x7998>
   192fc:	cmp	r9, r5, lsr #3
   19300:	lsrhi	r0, r5, #5
   19304:	andhi	r2, r5, #31
   19308:	ldrhi	r1, [r6, r0, lsl #2]
   1930c:	orrhi	r2, r1, r8, lsl r2
   19310:	strhi	r2, [r6, r0, lsl #2]
   19314:	tst	r3, #2
   19318:	beq	19338 <__assert_fail@plt+0x79bc>
   1931c:	add	r2, r5, #1
   19320:	cmp	r9, r2, lsr #3
   19324:	lsrhi	r0, r2, #5
   19328:	andhi	r2, r2, #31
   1932c:	ldrhi	r1, [r6, r0, lsl #2]
   19330:	orrhi	r2, r1, r8, lsl r2
   19334:	strhi	r2, [r6, r0, lsl #2]
   19338:	tst	r3, #4
   1933c:	beq	1935c <__assert_fail@plt+0x79e0>
   19340:	add	r2, r5, #2
   19344:	cmp	r9, r2, lsr #3
   19348:	lsrhi	r0, r2, #5
   1934c:	andhi	r2, r2, #31
   19350:	ldrhi	r1, [r6, r0, lsl #2]
   19354:	orrhi	r2, r1, r8, lsl r2
   19358:	strhi	r2, [r6, r0, lsl #2]
   1935c:	tst	r3, #8
   19360:	beq	19380 <__assert_fail@plt+0x7a04>
   19364:	add	r3, r5, #3
   19368:	cmp	r9, r3, lsr #3
   1936c:	lsrhi	r1, r3, #5
   19370:	andhi	r3, r3, #31
   19374:	ldrhi	r2, [r6, r1, lsl #2]
   19378:	orrhi	r3, r2, r8, lsl r3
   1937c:	strhi	r3, [r6, r1, lsl #2]
   19380:	sub	r4, r4, #1
   19384:	cmp	r7, r4
   19388:	add	r5, r5, #4
   1938c:	bhi	193cc <__assert_fail@plt+0x7a50>
   19390:	ldrsb	sl, [r4]
   19394:	cmp	sl, #44	; 0x2c
   19398:	ldrsbeq	sl, [r4, #-1]
   1939c:	subeq	r4, r4, #1
   193a0:	sub	r3, sl, #48	; 0x30
   193a4:	cmp	r3, #9
   193a8:	bls	192e8 <__assert_fail@plt+0x796c>
   193ac:	bl	11700 <__ctype_tolower_loc@plt>
   193b0:	ldr	r3, [r0]
   193b4:	ldr	r3, [r3, sl, lsl #2]
   193b8:	sub	r2, r3, #97	; 0x61
   193bc:	cmp	r2, #5
   193c0:	bhi	193e4 <__assert_fail@plt+0x7a68>
   193c4:	sub	r3, r3, #87	; 0x57
   193c8:	b	192f4 <__assert_fail@plt+0x7978>
   193cc:	mov	r0, #0
   193d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193d4:	ldrb	r3, [r7, #1]
   193d8:	cmp	r3, #120	; 0x78
   193dc:	addeq	r7, r7, #2
   193e0:	b	192c4 <__assert_fail@plt+0x7948>
   193e4:	mvn	r0, #0
   193e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193ec:	ldr	ip, [pc, #584]	; 1963c <__assert_fail@plt+0x7cc0>
   193f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193f4:	add	ip, pc, ip
   193f8:	ldr	lr, [pc, #576]	; 19640 <__assert_fail@plt+0x7cc4>
   193fc:	mov	r6, r1
   19400:	sub	sp, sp, #52	; 0x34
   19404:	ldr	r1, [ip, lr]
   19408:	mov	sl, r0
   1940c:	mov	lr, r1
   19410:	str	r1, [sp, #16]
   19414:	ldr	lr, [lr]
   19418:	mov	r1, #0
   1941c:	mov	r0, r6
   19420:	str	r3, [sp, #8]
   19424:	mov	r4, r2
   19428:	str	lr, [sp, #44]	; 0x2c
   1942c:	lsl	r5, r2, #3
   19430:	bl	117e4 <memset@plt>
   19434:	mov	r3, #0
   19438:	str	r3, [sp]
   1943c:	ldr	r3, [pc, #512]	; 19644 <__assert_fail@plt+0x7cc8>
   19440:	cmp	sl, #0
   19444:	add	r3, pc, r3
   19448:	str	r3, [sp, #4]
   1944c:	ldr	r3, [pc, #500]	; 19648 <__assert_fail@plt+0x7ccc>
   19450:	add	r3, pc, r3
   19454:	str	r3, [sp, #20]
   19458:	beq	1956c <__assert_fail@plt+0x7bf0>
   1945c:	mov	r1, #44	; 0x2c
   19460:	mov	r0, sl
   19464:	bl	1176c <strchr@plt>
   19468:	subs	r9, r0, #0
   1946c:	addne	r9, r9, #1
   19470:	add	r3, sp, #31
   19474:	add	r2, sp, #32
   19478:	ldr	r1, [sp, #4]
   1947c:	mov	r0, sl
   19480:	str	r3, [sp, #12]
   19484:	bl	118b0 <sscanf@plt>
   19488:	subs	r3, r0, #0
   1948c:	str	r3, [sp]
   19490:	ble	19604 <__assert_fail@plt+0x7c88>
   19494:	ldr	fp, [sp, #32]
   19498:	mov	r7, #1
   1949c:	mov	r1, #45	; 0x2d
   194a0:	mov	r0, sl
   194a4:	str	fp, [sp, #36]	; 0x24
   194a8:	str	r7, [sp, #40]	; 0x28
   194ac:	bl	1176c <strchr@plt>
   194b0:	subs	r8, r0, #0
   194b4:	beq	194f8 <__assert_fail@plt+0x7b7c>
   194b8:	mov	r0, sl
   194bc:	mov	r1, #44	; 0x2c
   194c0:	bl	1176c <strchr@plt>
   194c4:	add	r8, r8, r7
   194c8:	subs	sl, r0, #0
   194cc:	beq	195a0 <__assert_fail@plt+0x7c24>
   194d0:	cmp	r8, #0
   194d4:	add	sl, sl, r7
   194d8:	beq	194f8 <__assert_fail@plt+0x7b7c>
   194dc:	clz	r7, sl
   194e0:	lsr	r7, r7, #5
   194e4:	cmp	sl, r8
   194e8:	movls	r2, r7
   194ec:	orrhi	r2, r7, #1
   194f0:	cmp	r2, #0
   194f4:	bne	195a8 <__assert_fail@plt+0x7c2c>
   194f8:	mov	lr, fp
   194fc:	ldr	r3, [sp, #8]
   19500:	adds	ip, r3, #0
   19504:	movne	ip, #1
   19508:	cmp	r5, fp
   1950c:	movhi	r2, #0
   19510:	andls	r2, ip, #1
   19514:	cmp	r2, #0
   19518:	bne	19580 <__assert_fail@plt+0x7c04>
   1951c:	ldr	r7, [sp, #40]	; 0x28
   19520:	mov	r8, #1
   19524:	b	1953c <__assert_fail@plt+0x7bc0>
   19528:	cmp	fp, r5
   1952c:	movcc	r3, #0
   19530:	andcs	r3, ip, #1
   19534:	cmp	r3, #0
   19538:	bne	19580 <__assert_fail@plt+0x7c04>
   1953c:	cmp	r4, fp, lsr #3
   19540:	lsrhi	r1, fp, #5
   19544:	andhi	r3, fp, #31
   19548:	ldrhi	r2, [r6, r1, lsl #2]
   1954c:	add	fp, fp, r7
   19550:	orrhi	r3, r2, r8, lsl r3
   19554:	strhi	r3, [r6, r1, lsl #2]
   19558:	cmp	fp, lr
   1955c:	bls	19528 <__assert_fail@plt+0x7bac>
   19560:	mov	sl, r9
   19564:	cmp	sl, #0
   19568:	bne	1945c <__assert_fail@plt+0x7ae0>
   1956c:	ldr	r3, [sp]
   19570:	sub	r0, r3, #2
   19574:	clz	r0, r0
   19578:	lsr	r0, r0, #5
   1957c:	b	19584 <__assert_fail@plt+0x7c08>
   19580:	mov	r0, #2
   19584:	ldr	r3, [sp, #16]
   19588:	ldr	r2, [sp, #44]	; 0x2c
   1958c:	ldr	r3, [r3]
   19590:	cmp	r2, r3
   19594:	bne	19638 <__assert_fail@plt+0x7cbc>
   19598:	add	sp, sp, #52	; 0x34
   1959c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195a0:	cmp	r8, #0
   195a4:	beq	194f8 <__assert_fail@plt+0x7b7c>
   195a8:	ldr	r3, [sp, #12]
   195ac:	add	r2, sp, #36	; 0x24
   195b0:	ldr	r1, [sp, #20]
   195b4:	mov	r0, r8
   195b8:	bl	118b0 <sscanf@plt>
   195bc:	subs	r3, r0, #0
   195c0:	str	r3, [sp]
   195c4:	ble	19604 <__assert_fail@plt+0x7c88>
   195c8:	mov	r0, r8
   195cc:	mov	r1, #58	; 0x3a
   195d0:	bl	1176c <strchr@plt>
   195d4:	cmp	r0, #0
   195d8:	beq	195f4 <__assert_fail@plt+0x7c78>
   195dc:	adds	r0, r0, #1
   195e0:	beq	195f4 <__assert_fail@plt+0x7c78>
   195e4:	cmp	r0, sl
   195e8:	orrcc	r7, r7, #1
   195ec:	cmp	r7, #0
   195f0:	bne	1960c <__assert_fail@plt+0x7c90>
   195f4:	ldr	fp, [sp, #32]
   195f8:	ldr	lr, [sp, #36]	; 0x24
   195fc:	cmp	fp, lr
   19600:	bls	194fc <__assert_fail@plt+0x7b80>
   19604:	mov	r0, #1
   19608:	b	19584 <__assert_fail@plt+0x7c08>
   1960c:	ldr	r3, [sp, #12]
   19610:	add	r2, sp, #40	; 0x28
   19614:	ldr	r1, [sp, #20]
   19618:	bl	118b0 <sscanf@plt>
   1961c:	subs	r3, r0, #0
   19620:	str	r3, [sp]
   19624:	ble	19604 <__assert_fail@plt+0x7c88>
   19628:	ldr	r3, [sp, #40]	; 0x28
   1962c:	cmp	r3, #0
   19630:	bne	195f4 <__assert_fail@plt+0x7c78>
   19634:	b	19604 <__assert_fail@plt+0x7c88>
   19638:	bl	11604 <__stack_chk_fail@plt>
   1963c:	andeq	r1, r1, r8, asr sl
   19640:	muleq	r0, ip, r1
   19644:	andeq	r0, r0, r8, asr #22
   19648:	andeq	r0, r0, ip, lsr fp
   1964c:	cmp	r3, #0
   19650:	cmpeq	r2, #0
   19654:	bne	1966c <__assert_fail@plt+0x7cf0>
   19658:	cmp	r1, #0
   1965c:	cmpeq	r0, #0
   19660:	mvnne	r1, #0
   19664:	mvnne	r0, #0
   19668:	b	19688 <__assert_fail@plt+0x7d0c>
   1966c:	sub	sp, sp, #8
   19670:	push	{sp, lr}
   19674:	bl	19698 <__assert_fail@plt+0x7d1c>
   19678:	ldr	lr, [sp, #4]
   1967c:	add	sp, sp, #8
   19680:	pop	{r2, r3}
   19684:	bx	lr
   19688:	push	{r1, lr}
   1968c:	mov	r0, #8
   19690:	bl	114fc <raise@plt>
   19694:	pop	{r1, pc}
   19698:	cmp	r1, r3
   1969c:	cmpeq	r0, r2
   196a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196a4:	mov	r4, r0
   196a8:	movcc	r0, #0
   196ac:	mov	r5, r1
   196b0:	ldr	lr, [sp, #36]	; 0x24
   196b4:	movcc	r1, r0
   196b8:	bcc	197b4 <__assert_fail@plt+0x7e38>
   196bc:	cmp	r3, #0
   196c0:	clzeq	ip, r2
   196c4:	clzne	ip, r3
   196c8:	addeq	ip, ip, #32
   196cc:	cmp	r5, #0
   196d0:	clzeq	r1, r4
   196d4:	addeq	r1, r1, #32
   196d8:	clzne	r1, r5
   196dc:	sub	ip, ip, r1
   196e0:	sub	sl, ip, #32
   196e4:	lsl	r9, r3, ip
   196e8:	rsb	fp, ip, #32
   196ec:	orr	r9, r9, r2, lsl sl
   196f0:	orr	r9, r9, r2, lsr fp
   196f4:	lsl	r8, r2, ip
   196f8:	cmp	r5, r9
   196fc:	cmpeq	r4, r8
   19700:	movcc	r0, #0
   19704:	movcc	r1, r0
   19708:	bcc	19724 <__assert_fail@plt+0x7da8>
   1970c:	mov	r0, #1
   19710:	subs	r4, r4, r8
   19714:	lsl	r1, r0, sl
   19718:	orr	r1, r1, r0, lsr fp
   1971c:	lsl	r0, r0, ip
   19720:	sbc	r5, r5, r9
   19724:	cmp	ip, #0
   19728:	beq	197b4 <__assert_fail@plt+0x7e38>
   1972c:	lsr	r6, r8, #1
   19730:	orr	r6, r6, r9, lsl #31
   19734:	lsr	r7, r9, #1
   19738:	mov	r2, ip
   1973c:	b	19760 <__assert_fail@plt+0x7de4>
   19740:	subs	r3, r4, r6
   19744:	sbc	r8, r5, r7
   19748:	adds	r3, r3, r3
   1974c:	adc	r8, r8, r8
   19750:	adds	r4, r3, #1
   19754:	adc	r5, r8, #0
   19758:	subs	r2, r2, #1
   1975c:	beq	1977c <__assert_fail@plt+0x7e00>
   19760:	cmp	r5, r7
   19764:	cmpeq	r4, r6
   19768:	bcs	19740 <__assert_fail@plt+0x7dc4>
   1976c:	adds	r4, r4, r4
   19770:	adc	r5, r5, r5
   19774:	subs	r2, r2, #1
   19778:	bne	19760 <__assert_fail@plt+0x7de4>
   1977c:	lsr	r3, r4, ip
   19780:	orr	r3, r3, r5, lsl fp
   19784:	lsr	r2, r5, ip
   19788:	orr	r3, r3, r5, lsr sl
   1978c:	adds	r0, r0, r4
   19790:	mov	r4, r3
   19794:	lsl	r3, r2, ip
   19798:	orr	r3, r3, r4, lsl sl
   1979c:	lsl	ip, r4, ip
   197a0:	orr	r3, r3, r4, lsr fp
   197a4:	adc	r1, r1, r5
   197a8:	subs	r0, r0, ip
   197ac:	mov	r5, r2
   197b0:	sbc	r1, r1, r3
   197b4:	cmp	lr, #0
   197b8:	strdne	r4, [lr]
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197c4:	mov	r7, r0
   197c8:	ldr	r6, [pc, #72]	; 19818 <__assert_fail@plt+0x7e9c>
   197cc:	ldr	r5, [pc, #72]	; 1981c <__assert_fail@plt+0x7ea0>
   197d0:	add	r6, pc, r6
   197d4:	add	r5, pc, r5
   197d8:	sub	r6, r6, r5
   197dc:	mov	r8, r1
   197e0:	mov	r9, r2
   197e4:	bl	114b8 <fdopen@plt-0x20>
   197e8:	asrs	r6, r6, #2
   197ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   197f0:	mov	r4, #0
   197f4:	add	r4, r4, #1
   197f8:	ldr	r3, [r5], #4
   197fc:	mov	r2, r9
   19800:	mov	r1, r8
   19804:	mov	r0, r7
   19808:	blx	r3
   1980c:	cmp	r6, r4
   19810:	bne	197f4 <__assert_fail@plt+0x7e78>
   19814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19818:	andeq	r1, r1, ip, asr r5
   1981c:	andeq	r1, r1, r4, asr r5
   19820:	bx	lr
   19824:	ldr	r3, [pc, #12]	; 19838 <__assert_fail@plt+0x7ebc>
   19828:	mov	r1, #0
   1982c:	add	r3, pc, r3
   19830:	ldr	r2, [r3]
   19834:	b	117a8 <__cxa_atexit@plt>
   19838:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

0001983c <.fini>:
   1983c:	push	{r3, lr}
   19840:	pop	{r3, pc}
