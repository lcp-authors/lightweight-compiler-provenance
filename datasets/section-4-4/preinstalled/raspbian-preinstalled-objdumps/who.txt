
raspbian-preinstalled/who:     file format elf32-littlearm


Disassembly of section .init:

00010f14 <.init>:
   10f14:	push	{r3, lr}
   10f18:	bl	11630 <__assert_fail@plt+0x3f0>
   10f1c:	pop	{r3, pc}

Disassembly of section .plt:

00010f20 <calloc@plt-0x14>:
   10f20:	push	{lr}		; (str lr, [sp, #-4]!)
   10f24:	ldr	lr, [pc, #4]	; 10f30 <calloc@plt-0x4>
   10f28:	add	lr, pc, lr
   10f2c:	ldr	pc, [lr, #8]!
   10f30:	ldrdeq	r8, [r1], -r0

00010f34 <calloc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #208]!	; 0xd0

00010f40 <fputs_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #200]!	; 0xc8

00010f4c <raise@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #192]!	; 0xc0

00010f58 <strcmp@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #184]!	; 0xb8

00010f64 <fflush@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #176]!	; 0xb0

00010f70 <utmpxname@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #168]!	; 0xa8

00010f7c <free@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #160]!	; 0xa0

00010f88 <gai_strerror@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #152]!	; 0x98

00010f94 <_exit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #144]!	; 0x90

00010fa0 <memcpy@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #136]!	; 0x88

00010fac <mbsinit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #128]!	; 0x80

00010fb8 <time@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #120]!	; 0x78

00010fc4 <memcmp@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #112]!	; 0x70

00010fd0 <dcgettext@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #104]!	; 0x68

00010fdc <strdup@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #96]!	; 0x60

00010fe8 <setutxent@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #88]!	; 0x58

00010ff4 <__stack_chk_fail@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #80]!	; 0x50

00011000 <realloc@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #72]!	; 0x48

0001100c <textdomain@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #64]!	; 0x40

00011018 <iswprint@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #56]!	; 0x38

00011024 <fwrite@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #48]!	; 0x30

00011030 <lseek64@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #40]!	; 0x28

0001103c <__ctype_get_mb_cur_max@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #32]!

00011048 <strcpy@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #24]!

00011054 <__fpending@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #16]!

00011060 <mbrtowc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #8]!

0001106c <error@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #0]!

00011078 <puts@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #4088]!	; 0xff8

00011084 <malloc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #4080]!	; 0xff0

00011090 <__libc_start_main@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #4072]!	; 0xfe8

0001109c <strftime@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110a8 <__freading@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110b4 <localtime@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #4048]!	; 0xfd0

000110c0 <__gmon_start__@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110cc <getopt_long@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110d8 <kill@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110e4 <__ctype_b_loc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #4016]!	; 0xfb0

000110f0 <exit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110fc <ttyname@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #4000]!	; 0xfa0

00011108 <strlen@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #94208	; 0x17000
   11110:	ldr	pc, [ip, #3992]!	; 0xf98

00011114 <strchr@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #94208	; 0x17000
   1111c:	ldr	pc, [ip, #3984]!	; 0xf90

00011120 <__errno_location@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #94208	; 0x17000
   11128:	ldr	pc, [ip, #3976]!	; 0xf88

0001112c <__sprintf_chk@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #94208	; 0x17000
   11134:	ldr	pc, [ip, #3968]!	; 0xf80

00011138 <__cxa_atexit@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #94208	; 0x17000
   11140:	ldr	pc, [ip, #3960]!	; 0xf78

00011144 <memset@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #94208	; 0x17000
   1114c:	ldr	pc, [ip, #3952]!	; 0xf70

00011150 <strncpy@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #94208	; 0x17000
   11158:	ldr	pc, [ip, #3944]!	; 0xf68

0001115c <__printf_chk@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #94208	; 0x17000
   11164:	ldr	pc, [ip, #3936]!	; 0xf60

00011168 <fileno@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #94208	; 0x17000
   11170:	ldr	pc, [ip, #3928]!	; 0xf58

00011174 <__fprintf_chk@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #94208	; 0x17000
   1117c:	ldr	pc, [ip, #3920]!	; 0xf50

00011180 <fclose@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #94208	; 0x17000
   11188:	ldr	pc, [ip, #3912]!	; 0xf48

0001118c <fseeko64@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #94208	; 0x17000
   11194:	ldr	pc, [ip, #3904]!	; 0xf40

00011198 <endutxent@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #94208	; 0x17000
   111a0:	ldr	pc, [ip, #3896]!	; 0xf38

000111a4 <setlocale@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #94208	; 0x17000
   111ac:	ldr	pc, [ip, #3888]!	; 0xf30

000111b0 <getnameinfo@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #94208	; 0x17000
   111b8:	ldr	pc, [ip, #3880]!	; 0xf28

000111bc <strrchr@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #94208	; 0x17000
   111c4:	ldr	pc, [ip, #3872]!	; 0xf20

000111c8 <nl_langinfo@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #94208	; 0x17000
   111d0:	ldr	pc, [ip, #3864]!	; 0xf18

000111d4 <freeaddrinfo@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #94208	; 0x17000
   111dc:	ldr	pc, [ip, #3856]!	; 0xf10

000111e0 <getaddrinfo@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #94208	; 0x17000
   111e8:	ldr	pc, [ip, #3848]!	; 0xf08

000111ec <bindtextdomain@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #94208	; 0x17000
   111f4:	ldr	pc, [ip, #3840]!	; 0xf00

000111f8 <strncat@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #94208	; 0x17000
   11200:	ldr	pc, [ip, #3832]!	; 0xef8

00011204 <__xstat64@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #94208	; 0x17000
   1120c:	ldr	pc, [ip, #3824]!	; 0xef0

00011210 <strncmp@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #94208	; 0x17000
   11218:	ldr	pc, [ip, #3816]!	; 0xee8

0001121c <abort@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #94208	; 0x17000
   11224:	ldr	pc, [ip, #3808]!	; 0xee0

00011228 <getutxent@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #94208	; 0x17000
   11230:	ldr	pc, [ip, #3800]!	; 0xed8

00011234 <__snprintf_chk@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #94208	; 0x17000
   1123c:	ldr	pc, [ip, #3792]!	; 0xed0

00011240 <__assert_fail@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #94208	; 0x17000
   11248:	ldr	pc, [ip, #3784]!	; 0xec8

Disassembly of section .text:

0001124c <.text>:
   1124c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11250:	mov	r6, r0
   11254:	sub	sp, sp, #16
   11258:	ldr	r0, [r1]
   1125c:	mov	r7, r1
   11260:	bl	12e24 <__assert_fail@plt+0x1be4>
   11264:	ldr	r1, [pc, #824]	; 115a4 <__assert_fail@plt+0x364>
   11268:	mov	r0, #6
   1126c:	bl	111a4 <setlocale@plt>
   11270:	ldr	r1, [pc, #816]	; 115a8 <__assert_fail@plt+0x368>
   11274:	ldr	r0, [pc, #816]	; 115ac <__assert_fail@plt+0x36c>
   11278:	bl	111ec <bindtextdomain@plt>
   1127c:	ldr	r0, [pc, #808]	; 115ac <__assert_fail@plt+0x36c>
   11280:	bl	1100c <textdomain@plt>
   11284:	ldr	r0, [pc, #804]	; 115b0 <__assert_fail@plt+0x370>
   11288:	bl	17edc <__assert_fail@plt+0x6c9c>
   1128c:	ldr	r9, [pc, #800]	; 115b4 <__assert_fail@plt+0x374>
   11290:	ldr	r8, [pc, #800]	; 115b8 <__assert_fail@plt+0x378>
   11294:	ldr	r5, [pc, #800]	; 115bc <__assert_fail@plt+0x37c>
   11298:	mov	sl, #1
   1129c:	mov	r4, #0
   112a0:	str	r4, [sp]
   112a4:	mov	r3, r9
   112a8:	mov	r2, r8
   112ac:	mov	r1, r7
   112b0:	mov	r0, r6
   112b4:	bl	110cc <getopt_long@plt>
   112b8:	cmn	r0, #1
   112bc:	beq	114bc <__assert_fail@plt+0x27c>
   112c0:	cmp	r0, #109	; 0x6d
   112c4:	beq	1143c <__assert_fail@plt+0x1fc>
   112c8:	ble	11300 <__assert_fail@plt+0xc0>
   112cc:	cmp	r0, #116	; 0x74
   112d0:	beq	114ac <__assert_fail@plt+0x26c>
   112d4:	bgt	113d8 <__assert_fail@plt+0x198>
   112d8:	cmp	r0, #113	; 0x71
   112dc:	beq	11458 <__assert_fail@plt+0x218>
   112e0:	ble	113c0 <__assert_fail@plt+0x180>
   112e4:	cmp	r0, #114	; 0x72
   112e8:	bne	11338 <__assert_fail@plt+0xf8>
   112ec:	mov	r3, #1
   112f0:	mov	sl, r4
   112f4:	strb	r3, [r5, #69]	; 0x45
   112f8:	strb	r3, [r5, #1]
   112fc:	b	1129c <__assert_fail@plt+0x5c>
   11300:	cmp	r0, #84	; 0x54
   11304:	beq	114a0 <__assert_fail@plt+0x260>
   11308:	ble	113a4 <__assert_fail@plt+0x164>
   1130c:	cmp	r0, #98	; 0x62
   11310:	beq	11448 <__assert_fail@plt+0x208>
   11314:	ble	11368 <__assert_fail@plt+0x128>
   11318:	cmp	r0, #100	; 0x64
   1131c:	bne	1134c <__assert_fail@plt+0x10c>
   11320:	mov	r3, #1
   11324:	mov	sl, r4
   11328:	strb	r3, [r5, #84]	; 0x54
   1132c:	strb	r3, [r5, #1]
   11330:	strb	r3, [r5, #2]
   11334:	b	1129c <__assert_fail@plt+0x5c>
   11338:	cmp	r0, #115	; 0x73
   1133c:	bne	11400 <__assert_fail@plt+0x1c0>
   11340:	mov	r3, #1
   11344:	strb	r3, [r5]
   11348:	b	1129c <__assert_fail@plt+0x5c>
   1134c:	cmp	r0, #108	; 0x6c
   11350:	bne	11400 <__assert_fail@plt+0x1c0>
   11354:	mov	r3, #1
   11358:	mov	sl, r4
   1135c:	strb	r3, [r5, #83]	; 0x53
   11360:	strb	r3, [r5, #1]
   11364:	b	1129c <__assert_fail@plt+0x5c>
   11368:	cmp	r0, #97	; 0x61
   1136c:	bne	11400 <__assert_fail@plt+0x1c0>
   11370:	mov	r3, #1
   11374:	mov	sl, r4
   11378:	strb	r3, [r5, #80]	; 0x50
   1137c:	strb	r3, [r5, #84]	; 0x54
   11380:	strb	r3, [r5, #83]	; 0x53
   11384:	strb	r3, [r5, #82]	; 0x52
   11388:	strb	r3, [r5, #69]	; 0x45
   1138c:	strb	r3, [r5, #81]	; 0x51
   11390:	strb	r3, [r5, #68]	; 0x44
   11394:	strb	r3, [r5, #3]
   11398:	strb	r3, [r5, #1]
   1139c:	strb	r3, [r5, #2]
   113a0:	b	1129c <__assert_fail@plt+0x5c>
   113a4:	cmn	r0, #2
   113a8:	beq	11560 <__assert_fail@plt+0x320>
   113ac:	cmp	r0, #72	; 0x48
   113b0:	bne	113f8 <__assert_fail@plt+0x1b8>
   113b4:	mov	r3, #1
   113b8:	strb	r3, [r5, #66]	; 0x42
   113bc:	b	1129c <__assert_fail@plt+0x5c>
   113c0:	cmp	r0, #112	; 0x70
   113c4:	bne	11400 <__assert_fail@plt+0x1c0>
   113c8:	mov	r3, #1
   113cc:	mov	sl, r4
   113d0:	strb	r3, [r5, #82]	; 0x52
   113d4:	b	1129c <__assert_fail@plt+0x5c>
   113d8:	cmp	r0, #119	; 0x77
   113dc:	beq	114a0 <__assert_fail@plt+0x260>
   113e0:	ble	11420 <__assert_fail@plt+0x1e0>
   113e4:	cmp	r0, #256	; 0x100
   113e8:	bne	11408 <__assert_fail@plt+0x1c8>
   113ec:	mov	r3, #1
   113f0:	strb	r3, [r5, #54]	; 0x36
   113f4:	b	1129c <__assert_fail@plt+0x5c>
   113f8:	cmn	r0, #3
   113fc:	beq	11464 <__assert_fail@plt+0x224>
   11400:	mov	r0, #1
   11404:	bl	12788 <__assert_fail@plt+0x1548>
   11408:	ldr	r3, [pc, #432]	; 115c0 <__assert_fail@plt+0x380>
   1140c:	cmp	r0, r3
   11410:	bne	11400 <__assert_fail@plt+0x1c0>
   11414:	mov	r3, #1
   11418:	strb	r3, [r5, #64]	; 0x40
   1141c:	b	1129c <__assert_fail@plt+0x5c>
   11420:	cmp	r0, #117	; 0x75
   11424:	bne	11400 <__assert_fail@plt+0x1c0>
   11428:	mov	r3, #1
   1142c:	mov	sl, r4
   11430:	strb	r3, [r5, #68]	; 0x44
   11434:	strb	r3, [r5, #1]
   11438:	b	1129c <__assert_fail@plt+0x5c>
   1143c:	mov	r3, #1
   11440:	strb	r3, [r5, #67]	; 0x43
   11444:	b	1129c <__assert_fail@plt+0x5c>
   11448:	mov	r3, #1
   1144c:	mov	sl, r4
   11450:	strb	r3, [r5, #80]	; 0x50
   11454:	b	1129c <__assert_fail@plt+0x5c>
   11458:	mov	r3, #1
   1145c:	strb	r3, [r5, #65]	; 0x41
   11460:	b	1129c <__assert_fail@plt+0x5c>
   11464:	ldr	ip, [pc, #344]	; 115c4 <__assert_fail@plt+0x384>
   11468:	ldr	r1, [pc, #344]	; 115c8 <__assert_fail@plt+0x388>
   1146c:	ldr	r3, [pc, #344]	; 115cc <__assert_fail@plt+0x38c>
   11470:	ldr	r0, [pc, #344]	; 115d0 <__assert_fail@plt+0x390>
   11474:	ldr	r2, [pc, #344]	; 115d4 <__assert_fail@plt+0x394>
   11478:	str	r4, [sp, #12]
   1147c:	ldr	r0, [r0]
   11480:	ldr	r3, [r3]
   11484:	stmib	sp, {r1, ip}
   11488:	str	r2, [sp]
   1148c:	ldr	r1, [pc, #324]	; 115d8 <__assert_fail@plt+0x398>
   11490:	ldr	r2, [pc, #324]	; 115dc <__assert_fail@plt+0x39c>
   11494:	bl	154f4 <__assert_fail@plt+0x42b4>
   11498:	mov	r0, r4
   1149c:	bl	110f0 <exit@plt>
   114a0:	mov	r3, #1
   114a4:	strb	r3, [r5, #3]
   114a8:	b	1129c <__assert_fail@plt+0x5c>
   114ac:	mov	r3, #1
   114b0:	mov	sl, r4
   114b4:	strb	r3, [r5, #81]	; 0x51
   114b8:	b	1129c <__assert_fail@plt+0x5c>
   114bc:	cmp	sl, r4
   114c0:	ldr	r4, [pc, #244]	; 115bc <__assert_fail@plt+0x37c>
   114c4:	movne	r3, #1
   114c8:	mov	r0, #2
   114cc:	strbne	r3, [r4]
   114d0:	strbne	r3, [r4, #68]	; 0x44
   114d4:	ldrb	r3, [r4, #2]
   114d8:	ldr	r5, [pc, #256]	; 115e0 <__assert_fail@plt+0x3a0>
   114dc:	cmp	r3, #0
   114e0:	movne	r3, #0
   114e4:	strbne	r3, [r4]
   114e8:	bl	12d10 <__assert_fail@plt+0x1ad0>
   114ec:	cmp	r0, #0
   114f0:	movne	r3, #16
   114f4:	moveq	r3, #12
   114f8:	str	r3, [r4, #4]
   114fc:	ldr	r3, [r5]
   11500:	ldrne	r2, [pc, #220]	; 115e4 <__assert_fail@plt+0x3a4>
   11504:	ldreq	r2, [pc, #220]	; 115e8 <__assert_fail@plt+0x3a8>
   11508:	sub	r6, r6, r3
   1150c:	add	r6, r6, #1
   11510:	str	r2, [r4, #44]	; 0x2c
   11514:	cmp	r6, #3
   11518:	ldrls	pc, [pc, r6, lsl #2]
   1151c:	b	11568 <__assert_fail@plt+0x328>
   11520:	andeq	r1, r1, r8, lsr r5
   11524:	andeq	r1, r1, r8, lsr r5
   11528:	andeq	r1, r1, r0, asr r5
   1152c:	andeq	r1, r1, r0, lsr r5
   11530:	mov	r3, #1
   11534:	strb	r3, [r4, #67]	; 0x43
   11538:	mov	r1, #1
   1153c:	ldr	r0, [pc, #168]	; 115ec <__assert_fail@plt+0x3ac>
   11540:	bl	12038 <__assert_fail@plt+0xdf8>
   11544:	mov	r0, #0
   11548:	add	sp, sp, #16
   1154c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11550:	ldr	r0, [r7, r3, lsl #2]
   11554:	mov	r1, #0
   11558:	bl	12038 <__assert_fail@plt+0xdf8>
   1155c:	b	11544 <__assert_fail@plt+0x304>
   11560:	mov	r0, r4
   11564:	bl	12788 <__assert_fail@plt+0x1548>
   11568:	mov	r2, #5
   1156c:	ldr	r1, [pc, #124]	; 115f0 <__assert_fail@plt+0x3b0>
   11570:	mov	r0, #0
   11574:	bl	10fd0 <dcgettext@plt>
   11578:	ldr	r3, [r5]
   1157c:	add	r3, r3, #2
   11580:	mov	r4, r0
   11584:	ldr	r0, [r7, r3, lsl #2]
   11588:	bl	15088 <__assert_fail@plt+0x3e48>
   1158c:	mov	r1, #0
   11590:	mov	r2, r4
   11594:	mov	r3, r0
   11598:	mov	r0, r1
   1159c:	bl	1106c <error@plt>
   115a0:	b	11400 <__assert_fail@plt+0x1c0>
   115a4:	andeq	r8, r1, r4, asr r7
   115a8:	andeq	r8, r1, r8, ror #16
   115ac:			; <UNDEFINED> instruction: 0x000187bc
   115b0:	andeq	r2, r1, r8, lsr ip
   115b4:	andeq	r7, r1, r8, asr pc
   115b8:			; <UNDEFINED> instruction: 0x000188b0
   115bc:	andeq	r9, r2, ip, lsl #3
   115c0:	andeq	r0, r0, r1, lsl #2
   115c4:	andeq	r8, r1, ip, ror r8
   115c8:	andeq	r8, r1, ip, lsl #17
   115cc:	andeq	r9, r2, r8, lsr #2
   115d0:	andeq	r9, r2, r4, lsl #3
   115d4:	muleq	r1, ip, r8
   115d8:	andeq	r8, r1, ip, ror #3
   115dc:			; <UNDEFINED> instruction: 0x000187b8
   115e0:	andeq	r9, r2, r8, ror r1
   115e4:	andeq	r8, r1, r0, asr #17
   115e8:	ldrdeq	r8, [r1], -r0
   115ec:	andeq	r8, r1, r8, ror #14
   115f0:	ldrdeq	r8, [r1], -ip
   115f4:	mov	fp, #0
   115f8:	mov	lr, #0
   115fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11600:	mov	r2, sp
   11604:	push	{r2}		; (str r2, [sp, #-4]!)
   11608:	push	{r0}		; (str r0, [sp, #-4]!)
   1160c:	ldr	ip, [pc, #16]	; 11624 <__assert_fail@plt+0x3e4>
   11610:	push	{ip}		; (str ip, [sp, #-4]!)
   11614:	ldr	r0, [pc, #12]	; 11628 <__assert_fail@plt+0x3e8>
   11618:	ldr	r3, [pc, #12]	; 1162c <__assert_fail@plt+0x3ec>
   1161c:	bl	11090 <__libc_start_main@plt>
   11620:	bl	1121c <abort@plt>
   11624:	ldrdeq	r7, [r1], -r8
   11628:	andeq	r1, r1, ip, asr #4
   1162c:	andeq	r7, r1, r8, ror lr
   11630:	ldr	r3, [pc, #20]	; 1164c <__assert_fail@plt+0x40c>
   11634:	ldr	r2, [pc, #20]	; 11650 <__assert_fail@plt+0x410>
   11638:	add	r3, pc, r3
   1163c:	ldr	r2, [r3, r2]
   11640:	cmp	r2, #0
   11644:	bxeq	lr
   11648:	b	110c0 <__gmon_start__@plt>
   1164c:	andeq	r7, r1, r0, asr #19
   11650:	andeq	r0, r0, r4, lsl r1
   11654:	ldr	r0, [pc, #24]	; 11674 <__assert_fail@plt+0x434>
   11658:	ldr	r3, [pc, #24]	; 11678 <__assert_fail@plt+0x438>
   1165c:	cmp	r3, r0
   11660:	bxeq	lr
   11664:	ldr	r3, [pc, #16]	; 1167c <__assert_fail@plt+0x43c>
   11668:	cmp	r3, #0
   1166c:	bxeq	lr
   11670:	bx	r3
   11674:	andeq	r9, r2, r0, ror r1
   11678:	andeq	r9, r2, r0, ror r1
   1167c:	andeq	r0, r0, r0
   11680:	ldr	r0, [pc, #36]	; 116ac <__assert_fail@plt+0x46c>
   11684:	ldr	r1, [pc, #36]	; 116b0 <__assert_fail@plt+0x470>
   11688:	sub	r1, r1, r0
   1168c:	asr	r1, r1, #2
   11690:	add	r1, r1, r1, lsr #31
   11694:	asrs	r1, r1, #1
   11698:	bxeq	lr
   1169c:	ldr	r3, [pc, #16]	; 116b4 <__assert_fail@plt+0x474>
   116a0:	cmp	r3, #0
   116a4:	bxeq	lr
   116a8:	bx	r3
   116ac:	andeq	r9, r2, r0, ror r1
   116b0:	andeq	r9, r2, r0, ror r1
   116b4:	andeq	r0, r0, r0
   116b8:	push	{r4, lr}
   116bc:	ldr	r4, [pc, #24]	; 116dc <__assert_fail@plt+0x49c>
   116c0:	ldrb	r3, [r4]
   116c4:	cmp	r3, #0
   116c8:	popne	{r4, pc}
   116cc:	bl	11654 <__assert_fail@plt+0x414>
   116d0:	mov	r3, #1
   116d4:	strb	r3, [r4]
   116d8:	pop	{r4, pc}
   116dc:	andeq	r9, r2, r8, lsl #3
   116e0:	b	11680 <__assert_fail@plt+0x440>
   116e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e8:	sub	sp, sp, #100	; 0x64
   116ec:	ldr	r4, [pc, #528]	; 11904 <__assert_fail@plt+0x6c4>
   116f0:	ldr	ip, [pc, #528]	; 11908 <__assert_fail@plt+0x6c8>
   116f4:	ldr	r6, [pc, #528]	; 1190c <__assert_fail@plt+0x6cc>
   116f8:	ldrb	r5, [r4, #1]
   116fc:	mov	fp, r3
   11700:	strb	r2, [ip, #1]
   11704:	ldr	r3, [sp, #136]	; 0x88
   11708:	ldr	r2, [sp, #152]	; 0x98
   1170c:	ldr	lr, [r6]
   11710:	str	r3, [sp, #44]	; 0x2c
   11714:	str	r2, [sp, #52]	; 0x34
   11718:	ldr	r3, [sp, #140]	; 0x8c
   1171c:	ldr	r2, [sp, #156]	; 0x9c
   11720:	cmp	r5, #0
   11724:	str	r3, [sp, #48]	; 0x30
   11728:	mov	sl, r0
   1172c:	mov	r7, r1
   11730:	str	lr, [sp, #92]	; 0x5c
   11734:	ldrb	r8, [r4]
   11738:	ldr	r3, [sp, #144]	; 0x90
   1173c:	ldr	r5, [sp, #148]	; 0x94
   11740:	str	r2, [sp, #56]	; 0x38
   11744:	beq	11750 <__assert_fail@plt+0x510>
   11748:	cmp	r8, #0
   1174c:	beq	11888 <__assert_fail@plt+0x648>
   11750:	add	r9, sp, #68	; 0x44
   11754:	mov	r3, #0
   11758:	strb	r3, [sp, #68]	; 0x44
   1175c:	cmp	r8, #0
   11760:	add	r8, sp, #76	; 0x4c
   11764:	bne	11778 <__assert_fail@plt+0x538>
   11768:	mov	r0, r5
   1176c:	bl	11108 <strlen@plt>
   11770:	cmp	r0, #11
   11774:	bls	118e0 <__assert_fail@plt+0x6a0>
   11778:	mov	r3, #0
   1177c:	strb	r3, [sp, #76]	; 0x4c
   11780:	ldrb	r3, [r4, #2]
   11784:	cmp	r3, #0
   11788:	moveq	r0, #1
   1178c:	beq	117a4 <__assert_fail@plt+0x564>
   11790:	ldr	r0, [sp, #56]	; 0x38
   11794:	bl	11108 <strlen@plt>
   11798:	cmp	r0, #11
   1179c:	addhi	r0, r0, #2
   117a0:	movls	r0, #14
   117a4:	bl	155f8 <__assert_fail@plt+0x43b8>
   117a8:	ldrb	r3, [r4, #2]
   117ac:	cmp	r3, #0
   117b0:	mov	r5, r0
   117b4:	strbeq	r3, [r0]
   117b8:	bne	118c4 <__assert_fail@plt+0x684>
   117bc:	ldrb	r2, [r4, #3]
   117c0:	ldr	r3, [sp, #52]	; 0x34
   117c4:	ldr	r0, [r4, #4]
   117c8:	cmp	r2, #0
   117cc:	ldr	r2, [sp, #48]	; 0x30
   117d0:	str	r3, [sp, #28]
   117d4:	ldr	r3, [pc, #308]	; 11910 <__assert_fail@plt+0x6d0>
   117d8:	ldr	r1, [pc, #296]	; 11908 <__assert_fail@plt+0x6c8>
   117dc:	str	r2, [sp, #16]
   117e0:	ldr	r2, [sp, #44]	; 0x2c
   117e4:	moveq	r1, r3
   117e8:	cmp	r7, #0
   117ec:	ldr	r3, [pc, #288]	; 11914 <__assert_fail@plt+0x6d4>
   117f0:	str	r2, [sp, #8]
   117f4:	str	r0, [sp, #12]
   117f8:	str	r1, [sp]
   117fc:	movne	r3, r7
   11800:	str	r5, [sp, #32]
   11804:	str	r8, [sp, #24]
   11808:	str	r9, [sp, #20]
   1180c:	str	fp, [sp, #4]
   11810:	mov	r2, sl
   11814:	ldr	r1, [pc, #252]	; 11918 <__assert_fail@plt+0x6d8>
   11818:	add	r0, sp, #64	; 0x40
   1181c:	bl	15880 <__assert_fail@plt+0x4640>
   11820:	cmn	r0, #1
   11824:	beq	118fc <__assert_fail@plt+0x6bc>
   11828:	ldr	r4, [sp, #64]	; 0x40
   1182c:	mov	r0, r4
   11830:	bl	11108 <strlen@plt>
   11834:	add	r0, r4, r0
   11838:	b	11840 <__assert_fail@plt+0x600>
   1183c:	mov	r0, r2
   11840:	ldrb	r3, [r0, #-1]
   11844:	sub	r2, r0, #1
   11848:	cmp	r3, #32
   1184c:	beq	1183c <__assert_fail@plt+0x5fc>
   11850:	mov	r3, #0
   11854:	strb	r3, [r0]
   11858:	ldr	r0, [sp, #64]	; 0x40
   1185c:	bl	11078 <puts@plt>
   11860:	ldr	r0, [sp, #64]	; 0x40
   11864:	bl	10f7c <free@plt>
   11868:	ldr	r2, [sp, #92]	; 0x5c
   1186c:	ldr	r3, [r6]
   11870:	cmp	r2, r3
   11874:	bne	11900 <__assert_fail@plt+0x6c0>
   11878:	mov	r0, r5
   1187c:	add	sp, sp, #100	; 0x64
   11880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11884:	b	10f7c <free@plt>
   11888:	mov	r0, r3
   1188c:	str	r3, [sp, #60]	; 0x3c
   11890:	bl	11108 <strlen@plt>
   11894:	ldr	r3, [sp, #60]	; 0x3c
   11898:	cmp	r0, #6
   1189c:	bhi	11750 <__assert_fail@plt+0x510>
   118a0:	add	r9, sp, #68	; 0x44
   118a4:	str	r3, [sp]
   118a8:	mov	r0, r9
   118ac:	ldr	r3, [pc, #104]	; 1191c <__assert_fail@plt+0x6dc>
   118b0:	mov	r2, #8
   118b4:	mov	r1, #1
   118b8:	bl	1112c <__sprintf_chk@plt>
   118bc:	ldrb	r8, [r4]
   118c0:	b	1175c <__assert_fail@plt+0x51c>
   118c4:	ldr	r3, [sp, #56]	; 0x38
   118c8:	mvn	r2, #0
   118cc:	str	r3, [sp]
   118d0:	mov	r1, #1
   118d4:	ldr	r3, [pc, #68]	; 11920 <__assert_fail@plt+0x6e0>
   118d8:	bl	1112c <__sprintf_chk@plt>
   118dc:	b	117bc <__assert_fail@plt+0x57c>
   118e0:	str	r5, [sp]
   118e4:	mov	r0, r8
   118e8:	ldr	r3, [pc, #52]	; 11924 <__assert_fail@plt+0x6e4>
   118ec:	mov	r2, #13
   118f0:	mov	r1, #1
   118f4:	bl	1112c <__sprintf_chk@plt>
   118f8:	b	11780 <__assert_fail@plt+0x540>
   118fc:	bl	15840 <__assert_fail@plt+0x4600>
   11900:	bl	10ff4 <__stack_chk_fail@plt>
   11904:	andeq	r9, r2, ip, lsl #3
   11908:	andeq	r9, r2, r0, lsr #2
   1190c:	andeq	r8, r2, r8, lsl #30
   11910:	andeq	r8, r1, r4, asr r7
   11914:	andeq	r8, r1, r8, lsl #1
   11918:	andeq	r8, r1, r8, lsr #1
   1191c:	muleq	r1, r0, r0
   11920:	andeq	r8, r1, r0, lsr #1
   11924:	muleq	r1, r8, r0
   11928:	push	{r4, r5, r6, lr}
   1192c:	mov	r2, #5
   11930:	ldr	r5, [pc, #80]	; 11988 <__assert_fail@plt+0x748>
   11934:	mov	r6, r0
   11938:	mov	r1, r5
   1193c:	mov	r0, #0
   11940:	bl	10fd0 <dcgettext@plt>
   11944:	bl	11108 <strlen@plt>
   11948:	add	r0, r0, #5
   1194c:	bl	155f8 <__assert_fail@plt+0x43b8>
   11950:	mov	r1, r5
   11954:	mov	r2, #5
   11958:	mov	r4, r0
   1195c:	mov	r0, #0
   11960:	bl	10fd0 <dcgettext@plt>
   11964:	mov	r1, r0
   11968:	mov	r0, r4
   1196c:	bl	11048 <strcpy@plt>
   11970:	add	r1, r6, #40	; 0x28
   11974:	mov	r0, r4
   11978:	mov	r2, #4
   1197c:	bl	111f8 <strncat@plt>
   11980:	mov	r0, r4
   11984:	pop	{r4, r5, r6, pc}
   11988:	andeq	r8, r1, ip, asr #1
   1198c:	push	{r4, r5, lr}
   11990:	sub	sp, sp, #12
   11994:	ldr	r5, [pc, #96]	; 119fc <__assert_fail@plt+0x7bc>
   11998:	str	r0, [sp]
   1199c:	mov	r0, sp
   119a0:	ldr	r3, [r5]
   119a4:	str	r3, [sp, #4]
   119a8:	bl	110b4 <localtime@plt>
   119ac:	subs	r3, r0, #0
   119b0:	beq	119e4 <__assert_fail@plt+0x7a4>
   119b4:	ldr	r4, [pc, #68]	; 11a00 <__assert_fail@plt+0x7c0>
   119b8:	mov	r1, #33	; 0x21
   119bc:	add	r0, r4, #8
   119c0:	ldr	r2, [r4, #44]	; 0x2c
   119c4:	bl	1109c <strftime@plt>
   119c8:	add	r0, r4, #8
   119cc:	ldr	r2, [sp, #4]
   119d0:	ldr	r3, [r5]
   119d4:	cmp	r2, r3
   119d8:	bne	119f8 <__assert_fail@plt+0x7b8>
   119dc:	add	sp, sp, #12
   119e0:	pop	{r4, r5, pc}
   119e4:	ldr	r0, [sp]
   119e8:	ldr	r2, [pc, #20]	; 11a04 <__assert_fail@plt+0x7c4>
   119ec:	asr	r1, r0, #31
   119f0:	bl	12d5c <__assert_fail@plt+0x1b1c>
   119f4:	b	119cc <__assert_fail@plt+0x78c>
   119f8:	bl	10ff4 <__stack_chk_fail@plt>
   119fc:	andeq	r8, r2, r8, lsl #30
   11a00:	andeq	r9, r2, ip, lsl #3
   11a04:	muleq	r2, r4, r1
   11a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a0c:	sub	sp, sp, #524	; 0x20c
   11a10:	ldr	r6, [pc, #1480]	; 11fe0 <__assert_fail@plt+0xda0>
   11a14:	ldr	r3, [r0, #4]
   11a18:	mov	r4, r0
   11a1c:	ldr	ip, [r6]
   11a20:	add	r7, sp, #204	; 0xcc
   11a24:	str	r3, [sp]
   11a28:	mov	r5, r1
   11a2c:	ldr	r3, [pc, #1456]	; 11fe4 <__assert_fail@plt+0xda4>
   11a30:	mov	r0, r7
   11a34:	mov	r2, #12
   11a38:	mov	r1, #1
   11a3c:	str	ip, [sp, #516]	; 0x204
   11a40:	bl	1112c <__sprintf_chk@plt>
   11a44:	ldrb	r3, [r4, #8]
   11a48:	cmp	r3, #47	; 0x2f
   11a4c:	bne	11c78 <__assert_fail@plt+0xa38>
   11a50:	add	ip, sp, #216	; 0xd8
   11a54:	mov	r0, ip
   11a58:	add	r1, r4, #40	; 0x28
   11a5c:	add	r2, r4, #8
   11a60:	str	r2, [sp, #32]
   11a64:	add	r2, r4, #9
   11a68:	b	11a78 <__assert_fail@plt+0x838>
   11a6c:	ldrb	r3, [r2], #1
   11a70:	cmp	r3, #0
   11a74:	beq	11a84 <__assert_fail@plt+0x844>
   11a78:	cmp	r2, r1
   11a7c:	strb	r3, [r0], #1
   11a80:	bcc	11a6c <__assert_fail@plt+0x82c>
   11a84:	mov	r3, #0
   11a88:	strb	r3, [r0]
   11a8c:	mov	r1, ip
   11a90:	add	r2, sp, #48	; 0x30
   11a94:	mov	r0, #3
   11a98:	bl	11204 <__xstat64@plt>
   11a9c:	cmp	r0, #0
   11aa0:	bne	11ca8 <__assert_fail@plt+0xa68>
   11aa4:	ldr	r3, [sp, #64]	; 0x40
   11aa8:	ldr	r8, [sp, #120]	; 0x78
   11aac:	tst	r3, #16
   11ab0:	movne	r3, #43	; 0x2b
   11ab4:	moveq	r3, #45	; 0x2d
   11ab8:	cmp	r8, #0
   11abc:	str	r3, [sp, #28]
   11ac0:	bne	11c00 <__assert_fail@plt+0x9c0>
   11ac4:	ldr	r3, [pc, #1308]	; 11fe8 <__assert_fail@plt+0xda8>
   11ac8:	add	fp, sp, #196	; 0xc4
   11acc:	str	r3, [sp, #196]	; 0xc4
   11ad0:	ldrb	r3, [r4, #76]	; 0x4c
   11ad4:	cmp	r3, #0
   11ad8:	bne	11b7c <__assert_fail@plt+0x93c>
   11adc:	ldr	r5, [pc, #1288]	; 11fec <__assert_fail@plt+0xdac>
   11ae0:	ldr	r3, [r5, #56]	; 0x38
   11ae4:	ldr	r0, [r5, #60]	; 0x3c
   11ae8:	cmp	r3, #0
   11aec:	beq	11d34 <__assert_fail@plt+0xaf4>
   11af0:	mov	r3, #0
   11af4:	strb	r3, [r0]
   11af8:	ldrb	r3, [r5, #64]	; 0x40
   11afc:	cmp	r3, #0
   11b00:	beq	11b20 <__assert_fail@plt+0x8e0>
   11b04:	add	r8, r4, #348	; 0x15c
   11b08:	mov	r0, r8
   11b0c:	mov	r2, #16
   11b10:	ldr	r1, [pc, #1240]	; 11ff0 <__assert_fail@plt+0xdb0>
   11b14:	bl	10fc4 <memcmp@plt>
   11b18:	cmp	r0, #0
   11b1c:	bne	11d50 <__assert_fail@plt+0xb10>
   11b20:	ldr	r0, [r4, #340]	; 0x154
   11b24:	bl	1198c <__assert_fail@plt+0x74c>
   11b28:	ldr	r2, [r5, #60]	; 0x3c
   11b2c:	ldr	ip, [pc, #1216]	; 11ff4 <__assert_fail@plt+0xdb4>
   11b30:	cmp	r2, #0
   11b34:	moveq	r2, ip
   11b38:	str	r2, [sp, #16]
   11b3c:	ldr	r2, [sp, #32]
   11b40:	mov	r3, #32
   11b44:	str	r2, [sp]
   11b48:	add	r1, r4, #44	; 0x2c
   11b4c:	ldr	r2, [sp, #28]
   11b50:	str	ip, [sp, #20]
   11b54:	str	r7, [sp, #12]
   11b58:	stmib	sp, {r0, fp}
   11b5c:	mov	r0, r3
   11b60:	bl	116e4 <__assert_fail@plt+0x4a4>
   11b64:	ldr	r2, [sp, #516]	; 0x204
   11b68:	ldr	r3, [r6]
   11b6c:	cmp	r2, r3
   11b70:	bne	11fc8 <__assert_fail@plt+0xd88>
   11b74:	add	sp, sp, #524	; 0x20c
   11b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b7c:	add	r9, sp, #256	; 0x100
   11b80:	mov	ip, r9
   11b84:	add	r1, r4, #332	; 0x14c
   11b88:	add	r2, r4, #77	; 0x4d
   11b8c:	b	11b9c <__assert_fail@plt+0x95c>
   11b90:	ldrb	r3, [r2], #1
   11b94:	cmp	r3, #0
   11b98:	beq	11ba8 <__assert_fail@plt+0x968>
   11b9c:	cmp	r2, r1
   11ba0:	strb	r3, [ip], #1
   11ba4:	bcc	11b90 <__assert_fail@plt+0x950>
   11ba8:	mov	r5, #0
   11bac:	mov	r1, #58	; 0x3a
   11bb0:	mov	r0, r9
   11bb4:	strb	r5, [ip]
   11bb8:	bl	11114 <strchr@plt>
   11bbc:	subs	r8, r0, #0
   11bc0:	beq	11dc0 <__assert_fail@plt+0xb80>
   11bc4:	strb	r5, [r8], #1
   11bc8:	ldrb	r3, [sp, #256]	; 0x100
   11bcc:	cmp	r3, r5
   11bd0:	beq	11cb4 <__assert_fail@plt+0xa74>
   11bd4:	ldr	r5, [pc, #1040]	; 11fec <__assert_fail@plt+0xdac>
   11bd8:	ldrb	r3, [r5, #54]	; 0x36
   11bdc:	cmp	r3, #0
   11be0:	moveq	sl, r9
   11be4:	beq	11cbc <__assert_fail@plt+0xa7c>
   11be8:	mov	r0, r9
   11bec:	bl	12bfc <__assert_fail@plt+0x19bc>
   11bf0:	cmp	r0, #0
   11bf4:	movne	sl, r0
   11bf8:	moveq	sl, r9
   11bfc:	b	11cbc <__assert_fail@plt+0xa7c>
   11c00:	ldr	r9, [pc, #1008]	; 11ff8 <__assert_fail@plt+0xdb8>
   11c04:	ldr	r3, [r9, #4]
   11c08:	cmp	r3, #-2147483648	; 0x80000000
   11c0c:	beq	11ef4 <__assert_fail@plt+0xcb4>
   11c10:	cmp	r8, r5
   11c14:	ble	11c40 <__assert_fail@plt+0xa00>
   11c18:	ldr	r2, [r9, #4]
   11c1c:	ldr	r1, [pc, #984]	; 11ffc <__assert_fail@plt+0xdbc>
   11c20:	add	r1, r2, r1
   11c24:	cmp	r8, r1
   11c28:	movlt	r3, #0
   11c2c:	movge	r3, #1
   11c30:	cmp	r8, r2
   11c34:	movgt	r3, #0
   11c38:	cmp	r3, #0
   11c3c:	bne	11f40 <__assert_fail@plt+0xd00>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #948]	; 12000 <__assert_fail@plt+0xdc0>
   11c48:	mov	r0, #0
   11c4c:	bl	10fd0 <dcgettext@plt>
   11c50:	add	fp, sp, #196	; 0xc4
   11c54:	mov	r3, #6
   11c58:	str	r0, [sp, #4]
   11c5c:	str	r3, [sp]
   11c60:	mov	r0, fp
   11c64:	ldr	r3, [pc, #920]	; 12004 <__assert_fail@plt+0xdc4>
   11c68:	mov	r2, #7
   11c6c:	mov	r1, #1
   11c70:	bl	1112c <__sprintf_chk@plt>
   11c74:	b	11ad0 <__assert_fail@plt+0x890>
   11c78:	ldr	r2, [pc, #904]	; 12008 <__assert_fail@plt+0xdc8>
   11c7c:	add	ip, sp, #216	; 0xd8
   11c80:	cmp	r3, #0
   11c84:	ldm	r2, {r0, r1}
   11c88:	add	r2, r4, #8
   11c8c:	str	r2, [sp, #32]
   11c90:	str	r0, [sp, #216]	; 0xd8
   11c94:	strh	r1, [sp, #220]	; 0xdc
   11c98:	add	r0, ip, #5
   11c9c:	add	r1, r4, #40	; 0x28
   11ca0:	bne	11a64 <__assert_fail@plt+0x824>
   11ca4:	b	11a84 <__assert_fail@plt+0x844>
   11ca8:	mov	r3, #63	; 0x3f
   11cac:	str	r3, [sp, #28]
   11cb0:	b	11ac4 <__assert_fail@plt+0x884>
   11cb4:	ldr	r5, [pc, #816]	; 11fec <__assert_fail@plt+0xdac>
   11cb8:	mov	sl, r9
   11cbc:	mov	r0, sl
   11cc0:	bl	11108 <strlen@plt>
   11cc4:	cmp	r8, #0
   11cc8:	ldr	r1, [r5, #56]	; 0x38
   11ccc:	ldr	r2, [r5, #60]	; 0x3c
   11cd0:	str	r0, [sp, #44]	; 0x2c
   11cd4:	beq	11df0 <__assert_fail@plt+0xbb0>
   11cd8:	mov	r0, r8
   11cdc:	str	r2, [sp, #40]	; 0x28
   11ce0:	str	r1, [sp, #36]	; 0x24
   11ce4:	bl	11108 <strlen@plt>
   11ce8:	ldr	r3, [sp, #44]	; 0x2c
   11cec:	ldr	r1, [sp, #36]	; 0x24
   11cf0:	add	r3, r3, #4
   11cf4:	ldr	r2, [sp, #40]	; 0x28
   11cf8:	add	r3, r3, r0
   11cfc:	cmp	r3, r1
   11d00:	bhi	11e18 <__assert_fail@plt+0xbd8>
   11d04:	mov	r0, r2
   11d08:	str	r8, [sp, #4]
   11d0c:	str	sl, [sp]
   11d10:	ldr	r3, [pc, #756]	; 1200c <__assert_fail@plt+0xdcc>
   11d14:	mvn	r2, #0
   11d18:	mov	r1, #1
   11d1c:	bl	1112c <__sprintf_chk@plt>
   11d20:	cmp	sl, r9
   11d24:	beq	11af8 <__assert_fail@plt+0x8b8>
   11d28:	mov	r0, sl
   11d2c:	bl	10f7c <free@plt>
   11d30:	b	11af8 <__assert_fail@plt+0x8b8>
   11d34:	mov	r8, #1
   11d38:	str	r8, [r5, #56]	; 0x38
   11d3c:	bl	10f7c <free@plt>
   11d40:	mov	r0, r8
   11d44:	bl	155f8 <__assert_fail@plt+0x43b8>
   11d48:	str	r0, [r5, #60]	; 0x3c
   11d4c:	b	11af0 <__assert_fail@plt+0x8b0>
   11d50:	mov	r1, #256	; 0x100
   11d54:	ldr	r0, [r5, #60]	; 0x3c
   11d58:	bl	15654 <__assert_fail@plt+0x4414>
   11d5c:	ldrb	r9, [r5, #54]	; 0x36
   11d60:	ldr	r3, [r4, #348]	; 0x15c
   11d64:	cmp	r3, #0
   11d68:	eor	r9, r9, #1
   11d6c:	mov	ip, r0
   11d70:	str	r0, [r5, #60]	; 0x3c
   11d74:	bne	11e40 <__assert_fail@plt+0xc00>
   11d78:	ldr	r2, [r4, #352]	; 0x160
   11d7c:	cmp	r2, #0
   11d80:	beq	11f00 <__assert_fail@plt+0xcc0>
   11d84:	mov	r2, #2
   11d88:	str	r2, [sp, #152]	; 0x98
   11d8c:	mov	r8, #16
   11d90:	add	lr, sp, #152	; 0x98
   11d94:	str	r3, [sp, #156]	; 0x9c
   11d98:	mov	r3, #0
   11d9c:	str	r3, [sp, #4]
   11da0:	str	r3, [sp]
   11da4:	str	r9, [sp, #8]
   11da8:	mov	r2, ip
   11dac:	mov	r1, r8
   11db0:	mov	r0, lr
   11db4:	mov	r3, #256	; 0x100
   11db8:	bl	111b0 <getnameinfo@plt>
   11dbc:	b	11b20 <__assert_fail@plt+0x8e0>
   11dc0:	ldrb	r3, [sp, #256]	; 0x100
   11dc4:	ldr	r5, [pc, #544]	; 11fec <__assert_fail@plt+0xdac>
   11dc8:	cmp	r3, #0
   11dcc:	beq	11ddc <__assert_fail@plt+0xb9c>
   11dd0:	ldrb	r3, [r5, #54]	; 0x36
   11dd4:	cmp	r3, #0
   11dd8:	bne	11fa0 <__assert_fail@plt+0xd60>
   11ddc:	mov	r0, r9
   11de0:	bl	11108 <strlen@plt>
   11de4:	ldr	r1, [r5, #56]	; 0x38
   11de8:	ldr	r2, [r5, #60]	; 0x3c
   11dec:	mov	sl, r9
   11df0:	add	r8, r0, #3
   11df4:	cmp	r8, r1
   11df8:	bhi	11f20 <__assert_fail@plt+0xce0>
   11dfc:	str	sl, [sp]
   11e00:	mov	r0, r2
   11e04:	ldr	r3, [pc, #516]	; 12010 <__assert_fail@plt+0xdd0>
   11e08:	mvn	r2, #0
   11e0c:	mov	r1, #1
   11e10:	bl	1112c <__sprintf_chk@plt>
   11e14:	b	11d20 <__assert_fail@plt+0xae0>
   11e18:	mov	r0, r2
   11e1c:	str	r3, [r5, #56]	; 0x38
   11e20:	str	r3, [sp, #36]	; 0x24
   11e24:	bl	10f7c <free@plt>
   11e28:	ldr	r3, [sp, #36]	; 0x24
   11e2c:	mov	r0, r3
   11e30:	bl	155f8 <__assert_fail@plt+0x43b8>
   11e34:	mov	r2, r0
   11e38:	str	r0, [r5, #60]	; 0x3c
   11e3c:	b	11d04 <__assert_fail@plt+0xac4>
   11e40:	rev	r2, r3
   11e44:	lsr	r2, r2, #16
   11e48:	sub	r1, r2, #8192	; 0x2000
   11e4c:	sub	r0, r2, #64512	; 0xfc00
   11e50:	cmp	r0, #512	; 0x200
   11e54:	cmpcs	r1, #8192	; 0x2000
   11e58:	sub	r2, r2, #65024	; 0xfe00
   11e5c:	movcc	r1, #1
   11e60:	movcs	r1, #0
   11e64:	sub	r2, r2, #192	; 0xc0
   11e68:	cmp	r2, #63	; 0x3f
   11e6c:	movhi	r2, r1
   11e70:	orrls	r2, r1, #1
   11e74:	cmp	r2, #0
   11e78:	beq	11d84 <__assert_fail@plt+0xb44>
   11e7c:	ldr	r2, [r4, #352]	; 0x160
   11e80:	cmp	r2, #0
   11e84:	bne	11ea0 <__assert_fail@plt+0xc60>
   11e88:	ldr	r2, [r4, #356]	; 0x164
   11e8c:	cmp	r2, #0
   11e90:	bne	11ea0 <__assert_fail@plt+0xc60>
   11e94:	ldr	r2, [r4, #360]	; 0x168
   11e98:	cmp	r2, #0
   11e9c:	beq	11d84 <__assert_fail@plt+0xb44>
   11ea0:	add	lr, sp, #170	; 0xaa
   11ea4:	str	lr, [sp, #40]	; 0x28
   11ea8:	add	sl, sp, #176	; 0xb0
   11eac:	str	sl, [sp, #36]	; 0x24
   11eb0:	ldr	sl, [sp, #40]	; 0x28
   11eb4:	ldr	r0, [r8]
   11eb8:	ldr	r1, [r8, #4]
   11ebc:	ldr	r2, [r8, #8]
   11ec0:	ldr	r3, [r8, #12]
   11ec4:	mov	r8, #0
   11ec8:	str	r8, [sl, #4]
   11ecc:	str	r8, [sl, #20]
   11ed0:	strh	r8, [sl, #24]
   11ed4:	ldr	sl, [sp, #36]	; 0x24
   11ed8:	mov	lr, #10
   11edc:	str	r8, [sp, #170]	; 0xaa
   11ee0:	strh	lr, [sp, #168]	; 0xa8
   11ee4:	mov	r8, #28
   11ee8:	add	lr, sp, #168	; 0xa8
   11eec:	stmia	sl!, {r0, r1, r2, r3}
   11ef0:	b	11d98 <__assert_fail@plt+0xb58>
   11ef4:	add	r0, r9, #4
   11ef8:	bl	10fb8 <time@plt>
   11efc:	b	11c10 <__assert_fail@plt+0x9d0>
   11f00:	ldr	r3, [r4, #356]	; 0x164
   11f04:	cmn	r3, #65536	; 0x10000
   11f08:	movne	r3, r2
   11f0c:	bne	11d84 <__assert_fail@plt+0xb44>
   11f10:	mov	r3, #2
   11f14:	str	r3, [sp, #152]	; 0x98
   11f18:	ldr	r3, [r4, #360]	; 0x168
   11f1c:	b	11d8c <__assert_fail@plt+0xb4c>
   11f20:	mov	r0, r2
   11f24:	str	r8, [r5, #56]	; 0x38
   11f28:	bl	10f7c <free@plt>
   11f2c:	mov	r0, r8
   11f30:	bl	155f8 <__assert_fail@plt+0x43b8>
   11f34:	mov	r2, r0
   11f38:	str	r0, [r5, #60]	; 0x3c
   11f3c:	b	11dfc <__assert_fail@plt+0xbbc>
   11f40:	sub	r2, r2, r8
   11f44:	cmp	r2, #59	; 0x3b
   11f48:	ble	11fc0 <__assert_fail@plt+0xd80>
   11f4c:	ldr	r3, [pc, #192]	; 12014 <__assert_fail@plt+0xdd4>
   11f50:	cmp	r2, r3
   11f54:	bgt	11fcc <__assert_fail@plt+0xd8c>
   11f58:	ldr	r1, [pc, #184]	; 12018 <__assert_fail@plt+0xdd8>
   11f5c:	ldr	lr, [pc, #184]	; 1201c <__assert_fail@plt+0xddc>
   11f60:	ldr	r3, [pc, #184]	; 12020 <__assert_fail@plt+0xde0>
   11f64:	umull	r0, r1, r1, r2
   11f68:	ldr	r0, [pc, #180]	; 12024 <__assert_fail@plt+0xde4>
   11f6c:	lsr	r1, r1, #11
   11f70:	str	r1, [sp]
   11f74:	rsb	r1, r1, r1, lsl #4
   11f78:	rsb	r1, r1, r1, lsl #4
   11f7c:	sub	ip, r2, r1, lsl #4
   11f80:	mov	r2, #6
   11f84:	umull	r1, ip, lr, ip
   11f88:	mov	r1, #1
   11f8c:	lsr	ip, ip, #5
   11f90:	str	ip, [sp, #4]
   11f94:	bl	1112c <__sprintf_chk@plt>
   11f98:	ldr	r0, [pc, #132]	; 12024 <__assert_fail@plt+0xde4>
   11f9c:	b	11c50 <__assert_fail@plt+0xa10>
   11fa0:	mov	r0, r9
   11fa4:	bl	12bfc <__assert_fail@plt+0x19bc>
   11fa8:	subs	sl, r0, #0
   11fac:	beq	11ddc <__assert_fail@plt+0xb9c>
   11fb0:	bl	11108 <strlen@plt>
   11fb4:	ldr	r1, [r5, #56]	; 0x38
   11fb8:	ldr	r2, [r5, #60]	; 0x3c
   11fbc:	b	11df0 <__assert_fail@plt+0xbb0>
   11fc0:	ldr	r0, [pc, #96]	; 12028 <__assert_fail@plt+0xde8>
   11fc4:	b	11c50 <__assert_fail@plt+0xa10>
   11fc8:	bl	10ff4 <__stack_chk_fail@plt>
   11fcc:	ldr	r3, [pc, #88]	; 1202c <__assert_fail@plt+0xdec>
   11fd0:	mov	r2, #212	; 0xd4
   11fd4:	ldr	r1, [pc, #84]	; 12030 <__assert_fail@plt+0xdf0>
   11fd8:	ldr	r0, [pc, #84]	; 12034 <__assert_fail@plt+0xdf4>
   11fdc:	bl	11240 <__assert_fail@plt>
   11fe0:	andeq	r8, r2, r8, lsl #30
   11fe4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11fe8:	eorseq	r2, pc, r0, lsr #32
   11fec:	andeq	r9, r2, ip, lsl #3
   11ff0:	andeq	r7, r1, ip, lsl #30
   11ff4:	andeq	r8, r1, r4, asr r7
   11ff8:	andeq	r9, r2, r0, lsr #2
   11ffc:			; <UNDEFINED> instruction: 0xfffeae81
   12000:	andeq	r8, r1, ip, lsl r1
   12004:	andeq	r8, r1, r4, lsr #2
   12008:	ldrdeq	r8, [r1], -ip
   1200c:	andeq	r8, r1, ip, lsr #2
   12010:	andeq	r8, r1, r4, lsr r1
   12014:	andeq	r5, r1, pc, ror r1
   12018:			; <UNDEFINED> instruction: 0x91a2b3c5
   1201c:	stmhi	r8, {r0, r3, r7, fp, pc}
   12020:	andeq	r8, r1, r0, lsl r1
   12024:			; <UNDEFINED> instruction: 0x000291bc
   12028:	ldrdeq	r8, [r1], -r0
   1202c:	andeq	r7, r1, r0, lsl #30
   12030:	andeq	r8, r1, r4, ror #1
   12034:	strdeq	r8, [r1], -r0
   12038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1203c:	sub	sp, sp, #68	; 0x44
   12040:	ldr	fp, [pc, #1752]	; 12720 <__assert_fail@plt+0x14e0>
   12044:	mov	r3, r1
   12048:	add	r2, sp, #44	; 0x2c
   1204c:	ldr	ip, [fp]
   12050:	add	r1, sp, #40	; 0x28
   12054:	str	ip, [sp, #60]	; 0x3c
   12058:	mov	r4, r0
   1205c:	bl	159c8 <__assert_fail@plt+0x4788>
   12060:	subs	r1, r0, #0
   12064:	bne	126f0 <__assert_fail@plt+0x14b0>
   12068:	ldr	r5, [pc, #1716]	; 12724 <__assert_fail@plt+0x14e4>
   1206c:	ldr	r6, [sp, #40]	; 0x28
   12070:	ldr	r4, [sp, #44]	; 0x2c
   12074:	ldrb	r7, [r5, #65]	; 0x41
   12078:	cmp	r7, #0
   1207c:	bne	12194 <__assert_fail@plt+0xf54>
   12080:	ldrb	r2, [r5, #66]	; 0x42
   12084:	cmp	r2, #0
   12088:	bne	124b8 <__assert_fail@plt+0x1278>
   1208c:	ldrb	r3, [r5, #67]	; 0x43
   12090:	cmp	r3, #0
   12094:	bne	12484 <__assert_fail@plt+0x1244>
   12098:	cmp	r6, #0
   1209c:	addne	r4, r4, #8
   120a0:	sub	r6, r6, #1
   120a4:	movne	sl, #-2147483648	; 0x80000000
   120a8:	beq	121f8 <__assert_fail@plt+0xfb8>
   120ac:	ldrb	r3, [r5, #67]	; 0x43
   120b0:	sub	r8, r4, #8
   120b4:	ldrsh	r7, [r4, #-8]
   120b8:	cmp	r3, #0
   120bc:	beq	120d8 <__assert_fail@plt+0xe98>
   120c0:	mov	r2, #32
   120c4:	mov	r1, r4
   120c8:	ldr	r0, [sp, #24]
   120cc:	bl	11210 <strncmp@plt>
   120d0:	cmp	r0, #0
   120d4:	bne	12178 <__assert_fail@plt+0xf38>
   120d8:	ldrb	r3, [r5, #68]	; 0x44
   120dc:	cmp	r3, #0
   120e0:	beq	120f8 <__assert_fail@plt+0xeb8>
   120e4:	ldrb	r3, [r4, #36]	; 0x24
   120e8:	cmp	r3, #0
   120ec:	beq	120f8 <__assert_fail@plt+0xeb8>
   120f0:	cmp	r7, #7
   120f4:	beq	1265c <__assert_fail@plt+0x141c>
   120f8:	ldrb	r3, [r5, #69]	; 0x45
   120fc:	cmp	r3, #0
   12100:	beq	1210c <__assert_fail@plt+0xecc>
   12104:	cmp	r7, #1
   12108:	beq	122a0 <__assert_fail@plt+0x1060>
   1210c:	ldrb	r3, [r5, #80]	; 0x50
   12110:	cmp	r3, #0
   12114:	beq	12128 <__assert_fail@plt+0xee8>
   12118:	cmp	r7, #2
   1211c:	moveq	r2, #5
   12120:	ldreq	r1, [pc, #1536]	; 12728 <__assert_fail@plt+0x14e8>
   12124:	beq	12220 <__assert_fail@plt+0xfe0>
   12128:	ldrb	r3, [r5, #81]	; 0x51
   1212c:	cmp	r3, #0
   12130:	beq	1213c <__assert_fail@plt+0xefc>
   12134:	cmp	r7, #3
   12138:	beq	12218 <__assert_fail@plt+0xfd8>
   1213c:	ldrb	r3, [r5, #82]	; 0x52
   12140:	cmp	r3, #0
   12144:	beq	12150 <__assert_fail@plt+0xf10>
   12148:	cmp	r7, #5
   1214c:	beq	123a4 <__assert_fail@plt+0x1164>
   12150:	ldrb	r3, [r5, #83]	; 0x53
   12154:	cmp	r3, #0
   12158:	beq	12164 <__assert_fail@plt+0xf24>
   1215c:	cmp	r7, #6
   12160:	beq	12418 <__assert_fail@plt+0x11d8>
   12164:	ldrb	r3, [r5, #84]	; 0x54
   12168:	cmp	r3, #0
   1216c:	beq	12178 <__assert_fail@plt+0xf38>
   12170:	cmp	r7, #8
   12174:	beq	12574 <__assert_fail@plt+0x1334>
   12178:	cmp	r7, #2
   1217c:	sub	r6, r6, #1
   12180:	ldreq	sl, [r4, #332]	; 0x14c
   12184:	cmn	r6, #1
   12188:	add	r4, r4, #384	; 0x180
   1218c:	bne	120ac <__assert_fail@plt+0xe6c>
   12190:	b	121f8 <__assert_fail@plt+0xfb8>
   12194:	cmp	r6, #0
   12198:	sub	r5, r6, #1
   1219c:	beq	121d8 <__assert_fail@plt+0xf98>
   121a0:	ldr	r9, [pc, #1412]	; 1272c <__assert_fail@plt+0x14ec>
   121a4:	ldr	r8, [pc, #1412]	; 12730 <__assert_fail@plt+0x14f0>
   121a8:	ldr	r7, [pc, #1412]	; 12734 <__assert_fail@plt+0x14f4>
   121ac:	mov	r6, r1
   121b0:	ldrb	r3, [r4, #44]	; 0x2c
   121b4:	cmp	r3, #0
   121b8:	beq	121c8 <__assert_fail@plt+0xf88>
   121bc:	ldrsh	r3, [r4]
   121c0:	cmp	r3, #7
   121c4:	beq	1226c <__assert_fail@plt+0x102c>
   121c8:	sub	r5, r5, #1
   121cc:	cmn	r5, #1
   121d0:	add	r4, r4, #384	; 0x180
   121d4:	bne	121b0 <__assert_fail@plt+0xf70>
   121d8:	mov	r2, #5
   121dc:	ldr	r1, [pc, #1364]	; 12738 <__assert_fail@plt+0x14f8>
   121e0:	mov	r0, #0
   121e4:	bl	10fd0 <dcgettext@plt>
   121e8:	mov	r2, r6
   121ec:	mov	r1, r0
   121f0:	mov	r0, #1
   121f4:	bl	1115c <__printf_chk@plt>
   121f8:	ldr	r0, [sp, #44]	; 0x2c
   121fc:	bl	10f7c <free@plt>
   12200:	ldr	r2, [sp, #60]	; 0x3c
   12204:	ldr	r3, [fp]
   12208:	cmp	r2, r3
   1220c:	bne	1271c <__assert_fail@plt+0x14dc>
   12210:	add	sp, sp, #68	; 0x44
   12214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12218:	ldr	r1, [pc, #1308]	; 1273c <__assert_fail@plt+0x14fc>
   1221c:	mov	r2, #5
   12220:	mov	r0, #0
   12224:	bl	10fd0 <dcgettext@plt>
   12228:	mov	r7, r0
   1222c:	ldr	r0, [r4, #332]	; 0x14c
   12230:	bl	1198c <__assert_fail@plt+0x74c>
   12234:	ldr	r2, [pc, #1264]	; 1272c <__assert_fail@plt+0x14ec>
   12238:	mvn	r3, #0
   1223c:	str	r7, [sp]
   12240:	str	r2, [sp, #20]
   12244:	str	r2, [sp, #16]
   12248:	str	r2, [sp, #12]
   1224c:	str	r2, [sp, #8]
   12250:	mov	r1, r2
   12254:	mov	r2, #32
   12258:	str	r0, [sp, #4]
   1225c:	mov	r0, r3
   12260:	bl	116e4 <__assert_fail@plt+0x4a4>
   12264:	ldrsh	r7, [r4, #-8]
   12268:	b	12178 <__assert_fail@plt+0xf38>
   1226c:	mov	r0, r4
   12270:	bl	15954 <__assert_fail@plt+0x4714>
   12274:	mov	r2, r9
   12278:	mov	r1, r8
   1227c:	add	r6, r6, #1
   12280:	mov	r9, r7
   12284:	mov	r3, r0
   12288:	mov	sl, r0
   1228c:	mov	r0, #1
   12290:	bl	1115c <__printf_chk@plt>
   12294:	mov	r0, sl
   12298:	bl	10f7c <free@plt>
   1229c:	b	121c8 <__assert_fail@plt+0xf88>
   122a0:	ldr	r3, [r4, #-4]
   122a4:	ldr	r0, [r5, #72]	; 0x48
   122a8:	cmp	r3, #0
   122ac:	add	r7, r3, #255	; 0xff
   122b0:	movge	r7, r3
   122b4:	rsbs	r2, r3, #0
   122b8:	uxtb	r9, r3
   122bc:	asr	r7, r7, #8
   122c0:	uxtb	r3, r2
   122c4:	rsbpl	r9, r3, #0
   122c8:	cmp	r0, #0
   122cc:	uxtb	r7, r7
   122d0:	beq	12690 <__assert_fail@plt+0x1450>
   122d4:	mov	r2, #5
   122d8:	ldr	r1, [pc, #1120]	; 12740 <__assert_fail@plt+0x1500>
   122dc:	mov	r0, #0
   122e0:	ldr	r8, [r5, #72]	; 0x48
   122e4:	bl	10fd0 <dcgettext@plt>
   122e8:	uxtb	r3, r9
   122ec:	str	r3, [sp, #4]
   122f0:	mvn	r2, #0
   122f4:	ldr	r3, [pc, #1096]	; 12744 <__assert_fail@plt+0x1504>
   122f8:	mov	r1, #1
   122fc:	str	r0, [sp]
   12300:	mov	r0, r8
   12304:	bl	1112c <__sprintf_chk@plt>
   12308:	ldr	r0, [r5, #76]	; 0x4c
   1230c:	cmp	r0, #0
   12310:	beq	12670 <__assert_fail@plt+0x1430>
   12314:	mov	r2, #5
   12318:	ldr	r1, [pc, #1064]	; 12748 <__assert_fail@plt+0x1508>
   1231c:	mov	r0, #0
   12320:	ldr	r8, [r5, #76]	; 0x4c
   12324:	bl	10fd0 <dcgettext@plt>
   12328:	cmp	r7, #78	; 0x4e
   1232c:	movne	r3, r7
   12330:	moveq	r3, #83	; 0x53
   12334:	mvn	r2, #0
   12338:	mov	r1, #1
   1233c:	sub	r7, r7, #32
   12340:	str	r3, [sp, #4]
   12344:	str	r0, [sp]
   12348:	ldr	r3, [pc, #1020]	; 1274c <__assert_fail@plt+0x150c>
   1234c:	mov	r0, r8
   12350:	bl	1112c <__sprintf_chk@plt>
   12354:	ldr	r0, [r4, #332]	; 0x14c
   12358:	ldr	r8, [r5, #72]	; 0x48
   1235c:	bl	1198c <__assert_fail@plt+0x74c>
   12360:	cmp	r7, #94	; 0x5e
   12364:	mvn	r3, #0
   12368:	ldrhi	r2, [pc, #956]	; 1272c <__assert_fail@plt+0x14ec>
   1236c:	ldrls	r2, [pc, #952]	; 1272c <__assert_fail@plt+0x14ec>
   12370:	ldrls	r1, [r5, #76]	; 0x4c
   12374:	str	r8, [sp]
   12378:	movhi	r1, r2
   1237c:	stmib	sp, {r0, r2}
   12380:	str	r2, [sp, #20]
   12384:	str	r1, [sp, #16]
   12388:	str	r2, [sp, #12]
   1238c:	mov	r0, r3
   12390:	mov	r2, #32
   12394:	ldr	r1, [pc, #912]	; 1272c <__assert_fail@plt+0x14ec>
   12398:	bl	116e4 <__assert_fail@plt+0x4a4>
   1239c:	ldrsh	r7, [r4, #-8]
   123a0:	b	12178 <__assert_fail@plt+0xf38>
   123a4:	mov	r0, r8
   123a8:	bl	11928 <__assert_fail@plt+0x6e8>
   123ac:	ldr	r3, [r4, #-4]
   123b0:	add	r8, sp, #48	; 0x30
   123b4:	mov	r2, #12
   123b8:	mov	r1, #1
   123bc:	str	r3, [sp]
   123c0:	ldr	r3, [pc, #904]	; 12750 <__assert_fail@plt+0x1510>
   123c4:	mov	r7, r0
   123c8:	mov	r0, r8
   123cc:	bl	1112c <__sprintf_chk@plt>
   123d0:	ldr	r0, [r4, #332]	; 0x14c
   123d4:	bl	1198c <__assert_fail@plt+0x74c>
   123d8:	ldr	r2, [pc, #844]	; 1272c <__assert_fail@plt+0x14ec>
   123dc:	mov	r3, #32
   123e0:	mov	r1, r2
   123e4:	str	r8, [sp, #12]
   123e8:	str	r7, [sp, #16]
   123ec:	str	r4, [sp]
   123f0:	str	r2, [sp, #20]
   123f4:	str	r2, [sp, #8]
   123f8:	mov	r2, r3
   123fc:	str	r0, [sp, #4]
   12400:	mvn	r0, #0
   12404:	bl	116e4 <__assert_fail@plt+0x4a4>
   12408:	mov	r0, r7
   1240c:	bl	10f7c <free@plt>
   12410:	ldrsh	r7, [r4, #-8]
   12414:	b	12178 <__assert_fail@plt+0xf38>
   12418:	mov	r0, r8
   1241c:	bl	11928 <__assert_fail@plt+0x6e8>
   12420:	ldr	r3, [r4, #-4]
   12424:	add	r8, sp, #48	; 0x30
   12428:	str	r3, [sp]
   1242c:	mov	r2, #12
   12430:	ldr	r3, [pc, #792]	; 12750 <__assert_fail@plt+0x1510>
   12434:	mov	r1, #1
   12438:	mov	r7, r0
   1243c:	mov	r0, r8
   12440:	bl	1112c <__sprintf_chk@plt>
   12444:	mov	r2, #5
   12448:	ldr	r1, [pc, #772]	; 12754 <__assert_fail@plt+0x1514>
   1244c:	mov	r0, #0
   12450:	bl	10fd0 <dcgettext@plt>
   12454:	mov	r9, r0
   12458:	ldr	r0, [r4, #332]	; 0x14c
   1245c:	bl	1198c <__assert_fail@plt+0x74c>
   12460:	ldr	r2, [pc, #708]	; 1272c <__assert_fail@plt+0x14ec>
   12464:	mov	r3, #32
   12468:	str	r8, [sp, #12]
   1246c:	str	r7, [sp, #16]
   12470:	mov	r1, r9
   12474:	str	r4, [sp]
   12478:	str	r2, [sp, #20]
   1247c:	str	r2, [sp, #8]
   12480:	b	123f8 <__assert_fail@plt+0x11b8>
   12484:	mov	r0, #0
   12488:	bl	110fc <ttyname@plt>
   1248c:	subs	r3, r0, #0
   12490:	mov	r7, r3
   12494:	str	r3, [sp, #24]
   12498:	beq	121f8 <__assert_fail@plt+0xfb8>
   1249c:	mov	r2, #5
   124a0:	ldr	r1, [pc, #688]	; 12758 <__assert_fail@plt+0x1518>
   124a4:	bl	11210 <strncmp@plt>
   124a8:	cmp	r0, #0
   124ac:	addeq	r3, r7, #5
   124b0:	streq	r3, [sp, #24]
   124b4:	b	12098 <__assert_fail@plt+0xe58>
   124b8:	mov	r2, #5
   124bc:	ldr	r1, [pc, #664]	; 1275c <__assert_fail@plt+0x151c>
   124c0:	bl	10fd0 <dcgettext@plt>
   124c4:	mov	r2, #5
   124c8:	ldr	r1, [pc, #656]	; 12760 <__assert_fail@plt+0x1520>
   124cc:	mov	sl, r0
   124d0:	mov	r0, r7
   124d4:	bl	10fd0 <dcgettext@plt>
   124d8:	mov	r2, #5
   124dc:	ldr	r1, [pc, #640]	; 12764 <__assert_fail@plt+0x1524>
   124e0:	str	r0, [sp, #28]
   124e4:	mov	r0, r7
   124e8:	bl	10fd0 <dcgettext@plt>
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #624]	; 12768 <__assert_fail@plt+0x1528>
   124f4:	str	r0, [sp, #32]
   124f8:	mov	r0, r7
   124fc:	bl	10fd0 <dcgettext@plt>
   12500:	mov	r2, #5
   12504:	ldr	r1, [pc, #608]	; 1276c <__assert_fail@plt+0x152c>
   12508:	mov	r8, r0
   1250c:	mov	r0, r7
   12510:	bl	10fd0 <dcgettext@plt>
   12514:	mov	r2, #5
   12518:	ldr	r1, [pc, #592]	; 12770 <__assert_fail@plt+0x1530>
   1251c:	mov	r9, r0
   12520:	mov	r0, r7
   12524:	bl	10fd0 <dcgettext@plt>
   12528:	mov	r2, #5
   1252c:	ldr	r1, [pc, #576]	; 12774 <__assert_fail@plt+0x1534>
   12530:	str	r0, [sp, #36]	; 0x24
   12534:	mov	r0, r7
   12538:	bl	10fd0 <dcgettext@plt>
   1253c:	ldr	r2, [sp, #28]
   12540:	mvn	r3, #0
   12544:	str	r2, [sp]
   12548:	ldr	r2, [sp, #36]	; 0x24
   1254c:	strd	r8, [sp, #8]
   12550:	str	r2, [sp, #16]
   12554:	ldr	r2, [sp, #32]
   12558:	mov	r1, sl
   1255c:	str	r2, [sp, #4]
   12560:	mov	r2, #32
   12564:	str	r0, [sp, #20]
   12568:	mov	r0, r3
   1256c:	bl	116e4 <__assert_fail@plt+0x4a4>
   12570:	b	1208c <__assert_fail@plt+0xe4c>
   12574:	mov	r0, r8
   12578:	bl	11928 <__assert_fail@plt+0x6e8>
   1257c:	ldr	r3, [r4, #-4]
   12580:	mov	r2, #12
   12584:	str	r3, [sp]
   12588:	mov	r1, #1
   1258c:	ldr	r3, [pc, #444]	; 12750 <__assert_fail@plt+0x1510>
   12590:	mov	r9, r0
   12594:	add	r0, sp, #48	; 0x30
   12598:	bl	1112c <__sprintf_chk@plt>
   1259c:	ldr	r7, [r5, #88]	; 0x58
   125a0:	cmp	r7, #0
   125a4:	beq	126b0 <__assert_fail@plt+0x1470>
   125a8:	mov	r2, #5
   125ac:	ldr	r1, [pc, #452]	; 12778 <__assert_fail@plt+0x1538>
   125b0:	mov	r0, #0
   125b4:	ldr	r7, [r5, #88]	; 0x58
   125b8:	bl	10fd0 <dcgettext@plt>
   125bc:	add	r8, r4, #324	; 0x144
   125c0:	mov	r2, #5
   125c4:	ldrsh	r3, [r8]
   125c8:	ldr	r1, [pc, #428]	; 1277c <__assert_fail@plt+0x153c>
   125cc:	str	r3, [sp, #32]
   125d0:	str	r0, [sp, #28]
   125d4:	mov	r0, #0
   125d8:	bl	10fd0 <dcgettext@plt>
   125dc:	ldrsh	r2, [r8, #2]
   125e0:	ldr	r1, [sp, #28]
   125e4:	ldr	r3, [pc, #404]	; 12780 <__assert_fail@plt+0x1540>
   125e8:	str	r2, [sp, #12]
   125ec:	ldr	r2, [sp, #32]
   125f0:	str	r1, [sp]
   125f4:	str	r2, [sp, #4]
   125f8:	mov	r1, #1
   125fc:	mvn	r2, #0
   12600:	str	r0, [sp, #8]
   12604:	mov	r0, r7
   12608:	bl	1112c <__sprintf_chk@plt>
   1260c:	ldr	r0, [r4, #332]	; 0x14c
   12610:	bl	1198c <__assert_fail@plt+0x74c>
   12614:	ldr	ip, [r5, #88]	; 0x58
   12618:	ldr	r2, [pc, #268]	; 1272c <__assert_fail@plt+0x14ec>
   1261c:	mov	r3, #32
   12620:	add	r1, sp, #48	; 0x30
   12624:	str	r1, [sp, #12]
   12628:	str	r2, [sp, #8]
   1262c:	mov	r1, r2
   12630:	str	ip, [sp, #20]
   12634:	mov	r2, r3
   12638:	str	r9, [sp, #16]
   1263c:	str	r4, [sp]
   12640:	str	r0, [sp, #4]
   12644:	mvn	r0, #0
   12648:	bl	116e4 <__assert_fail@plt+0x4a4>
   1264c:	mov	r0, r9
   12650:	bl	10f7c <free@plt>
   12654:	ldrsh	r7, [r4, #-8]
   12658:	b	12178 <__assert_fail@plt+0xf38>
   1265c:	mov	r0, r8
   12660:	mov	r1, sl
   12664:	bl	11a08 <__assert_fail@plt+0x7c8>
   12668:	ldrsh	r7, [r4, #-8]
   1266c:	b	12178 <__assert_fail@plt+0xf38>
   12670:	mov	r2, #5
   12674:	ldr	r1, [pc, #204]	; 12748 <__assert_fail@plt+0x1508>
   12678:	bl	10fd0 <dcgettext@plt>
   1267c:	bl	11108 <strlen@plt>
   12680:	add	r0, r0, #2
   12684:	bl	155f8 <__assert_fail@plt+0x43b8>
   12688:	str	r0, [r5, #76]	; 0x4c
   1268c:	b	12314 <__assert_fail@plt+0x10d4>
   12690:	mov	r2, #5
   12694:	ldr	r1, [pc, #164]	; 12740 <__assert_fail@plt+0x1500>
   12698:	bl	10fd0 <dcgettext@plt>
   1269c:	bl	11108 <strlen@plt>
   126a0:	add	r0, r0, #3
   126a4:	bl	155f8 <__assert_fail@plt+0x43b8>
   126a8:	str	r0, [r5, #72]	; 0x48
   126ac:	b	122d4 <__assert_fail@plt+0x1094>
   126b0:	mov	r2, #5
   126b4:	ldr	r1, [pc, #188]	; 12778 <__assert_fail@plt+0x1538>
   126b8:	mov	r0, r7
   126bc:	bl	10fd0 <dcgettext@plt>
   126c0:	bl	11108 <strlen@plt>
   126c4:	mov	r2, #5
   126c8:	ldr	r1, [pc, #172]	; 1277c <__assert_fail@plt+0x153c>
   126cc:	mov	r8, r0
   126d0:	mov	r0, r7
   126d4:	bl	10fd0 <dcgettext@plt>
   126d8:	bl	11108 <strlen@plt>
   126dc:	add	r0, r8, r0
   126e0:	add	r0, r0, #14
   126e4:	bl	155f8 <__assert_fail@plt+0x43b8>
   126e8:	str	r0, [r5, #88]	; 0x58
   126ec:	b	125a8 <__assert_fail@plt+0x1368>
   126f0:	bl	11120 <__errno_location@plt>
   126f4:	mov	r2, r4
   126f8:	mov	r1, #3
   126fc:	ldr	r4, [r0]
   12700:	mov	r0, #0
   12704:	bl	14ebc <__assert_fail@plt+0x3c7c>
   12708:	mov	r1, r4
   1270c:	ldr	r2, [pc, #112]	; 12784 <__assert_fail@plt+0x1544>
   12710:	mov	r3, r0
   12714:	mov	r0, #1
   12718:	bl	1106c <error@plt>
   1271c:	bl	10ff4 <__stack_chk_fail@plt>
   12720:	andeq	r8, r2, r8, lsl #30
   12724:	andeq	r9, r2, ip, lsl #3
   12728:	andeq	r8, r1, ip, lsr #3
   1272c:	andeq	r8, r1, r4, asr r7
   12730:	andeq	r8, r1, ip, lsr r1
   12734:	ldrdeq	r8, [r1], -r4
   12738:	andeq	r8, r1, r4, asr #2
   1273c:			; <UNDEFINED> instruction: 0x000181b8
   12740:	andeq	r8, r1, r8, lsl #3
   12744:	muleq	r1, r4, r1
   12748:	muleq	r1, ip, r1
   1274c:	andeq	r8, r1, r4, lsr #3
   12750:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12754:	andeq	r8, r1, r8, asr #3
   12758:	ldrdeq	r8, [r1], -ip
   1275c:	andeq	r8, r1, r4, asr r1
   12760:	andeq	r8, r1, ip, asr r1
   12764:	andeq	r8, r1, r4, ror #2
   12768:	andeq	r8, r1, ip, ror #2
   1276c:	andeq	r8, r1, r4, ror r1
   12770:	andeq	r8, r1, r8, ror r1
   12774:	andeq	r8, r1, r0, lsl #3
   12778:	ldrdeq	r8, [r1], -r0
   1277c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12780:	andeq	r8, r1, r0, ror #3
   12784:	andeq	r8, r1, r4, lsl #20
   12788:	ldr	r3, [pc, #828]	; 12acc <__assert_fail@plt+0x188c>
   1278c:	push	{r7, lr}
   12790:	sub	sp, sp, #64	; 0x40
   12794:	ldr	r3, [r3]
   12798:	subs	r4, r0, #0
   1279c:	str	r3, [sp, #60]	; 0x3c
   127a0:	beq	127dc <__assert_fail@plt+0x159c>
   127a4:	ldr	r3, [pc, #804]	; 12ad0 <__assert_fail@plt+0x1890>
   127a8:	mov	r2, #5
   127ac:	ldr	r1, [pc, #800]	; 12ad4 <__assert_fail@plt+0x1894>
   127b0:	mov	r0, #0
   127b4:	ldr	r5, [r3]
   127b8:	bl	10fd0 <dcgettext@plt>
   127bc:	ldr	r3, [pc, #788]	; 12ad8 <__assert_fail@plt+0x1898>
   127c0:	mov	r1, #1
   127c4:	ldr	r3, [r3]
   127c8:	mov	r2, r0
   127cc:	mov	r0, r5
   127d0:	bl	11174 <__fprintf_chk@plt>
   127d4:	mov	r0, r4
   127d8:	bl	110f0 <exit@plt>
   127dc:	mov	r2, #5
   127e0:	ldr	r1, [pc, #756]	; 12adc <__assert_fail@plt+0x189c>
   127e4:	bl	10fd0 <dcgettext@plt>
   127e8:	ldr	r3, [pc, #744]	; 12ad8 <__assert_fail@plt+0x1898>
   127ec:	ldr	r5, [pc, #748]	; 12ae0 <__assert_fail@plt+0x18a0>
   127f0:	ldr	r2, [r3]
   127f4:	mov	r1, r0
   127f8:	mov	r0, #1
   127fc:	bl	1115c <__printf_chk@plt>
   12800:	mov	r2, #5
   12804:	ldr	r1, [pc, #728]	; 12ae4 <__assert_fail@plt+0x18a4>
   12808:	mov	r0, r4
   1280c:	bl	10fd0 <dcgettext@plt>
   12810:	ldr	r1, [r5]
   12814:	bl	10f40 <fputs_unlocked@plt>
   12818:	mov	r2, #5
   1281c:	ldr	r1, [pc, #708]	; 12ae8 <__assert_fail@plt+0x18a8>
   12820:	mov	r0, r4
   12824:	bl	10fd0 <dcgettext@plt>
   12828:	ldr	r1, [r5]
   1282c:	bl	10f40 <fputs_unlocked@plt>
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #688]	; 12aec <__assert_fail@plt+0x18ac>
   12838:	mov	r0, r4
   1283c:	bl	10fd0 <dcgettext@plt>
   12840:	ldr	r1, [r5]
   12844:	bl	10f40 <fputs_unlocked@plt>
   12848:	mov	r2, #5
   1284c:	ldr	r1, [pc, #668]	; 12af0 <__assert_fail@plt+0x18b0>
   12850:	mov	r0, r4
   12854:	bl	10fd0 <dcgettext@plt>
   12858:	ldr	r1, [r5]
   1285c:	bl	10f40 <fputs_unlocked@plt>
   12860:	mov	r2, #5
   12864:	ldr	r1, [pc, #648]	; 12af4 <__assert_fail@plt+0x18b4>
   12868:	mov	r0, r4
   1286c:	bl	10fd0 <dcgettext@plt>
   12870:	ldr	r1, [r5]
   12874:	bl	10f40 <fputs_unlocked@plt>
   12878:	mov	r2, #5
   1287c:	ldr	r1, [pc, #628]	; 12af8 <__assert_fail@plt+0x18b8>
   12880:	mov	r0, r4
   12884:	bl	10fd0 <dcgettext@plt>
   12888:	ldr	r1, [r5]
   1288c:	bl	10f40 <fputs_unlocked@plt>
   12890:	mov	r2, #5
   12894:	ldr	r1, [pc, #608]	; 12afc <__assert_fail@plt+0x18bc>
   12898:	mov	r0, r4
   1289c:	bl	10fd0 <dcgettext@plt>
   128a0:	ldr	r1, [r5]
   128a4:	bl	10f40 <fputs_unlocked@plt>
   128a8:	mov	r2, #5
   128ac:	ldr	r1, [pc, #588]	; 12b00 <__assert_fail@plt+0x18c0>
   128b0:	mov	r0, r4
   128b4:	bl	10fd0 <dcgettext@plt>
   128b8:	ldr	r1, [r5]
   128bc:	bl	10f40 <fputs_unlocked@plt>
   128c0:	mov	r2, #5
   128c4:	ldr	r1, [pc, #568]	; 12b04 <__assert_fail@plt+0x18c4>
   128c8:	mov	r0, r4
   128cc:	bl	10fd0 <dcgettext@plt>
   128d0:	ldr	r1, [r5]
   128d4:	bl	10f40 <fputs_unlocked@plt>
   128d8:	mov	r2, #5
   128dc:	ldr	r1, [pc, #548]	; 12b08 <__assert_fail@plt+0x18c8>
   128e0:	mov	r0, r4
   128e4:	bl	10fd0 <dcgettext@plt>
   128e8:	ldr	r3, [pc, #540]	; 12b0c <__assert_fail@plt+0x18cc>
   128ec:	ldr	r2, [pc, #540]	; 12b10 <__assert_fail@plt+0x18d0>
   128f0:	mov	r1, r0
   128f4:	mov	r0, #1
   128f8:	bl	1115c <__printf_chk@plt>
   128fc:	ldr	lr, [pc, #528]	; 12b14 <__assert_fail@plt+0x18d4>
   12900:	add	ip, sp, #4
   12904:	ldm	lr!, {r0, r1, r2, r3}
   12908:	stmia	ip!, {r0, r1, r2, r3}
   1290c:	ldm	lr!, {r0, r1, r2, r3}
   12910:	ldr	r6, [sp, #4]
   12914:	stmia	ip!, {r0, r1, r2, r3}
   12918:	cmp	r6, #0
   1291c:	ldm	lr!, {r0, r1, r2, r3}
   12920:	addeq	r5, sp, #4
   12924:	stmia	ip!, {r0, r1, r2, r3}
   12928:	ldm	lr, {r0, r1}
   1292c:	stm	ip, {r0, r1}
   12930:	beq	12960 <__assert_fail@plt+0x1720>
   12934:	ldr	r7, [pc, #476]	; 12b18 <__assert_fail@plt+0x18d8>
   12938:	add	r5, sp, #4
   1293c:	b	1294c <__assert_fail@plt+0x170c>
   12940:	ldr	r6, [r5, #8]!
   12944:	cmp	r6, #0
   12948:	beq	12960 <__assert_fail@plt+0x1720>
   1294c:	mov	r1, r6
   12950:	mov	r0, r7
   12954:	bl	10f58 <strcmp@plt>
   12958:	cmp	r0, #0
   1295c:	bne	12940 <__assert_fail@plt+0x1700>
   12960:	ldr	r5, [r5, #4]
   12964:	mov	r2, #5
   12968:	cmp	r5, #0
   1296c:	ldr	r1, [pc, #424]	; 12b1c <__assert_fail@plt+0x18dc>
   12970:	beq	12a18 <__assert_fail@plt+0x17d8>
   12974:	mov	r0, #0
   12978:	bl	10fd0 <dcgettext@plt>
   1297c:	ldr	r3, [pc, #412]	; 12b20 <__assert_fail@plt+0x18e0>
   12980:	ldr	r2, [pc, #412]	; 12b24 <__assert_fail@plt+0x18e4>
   12984:	mov	r1, r0
   12988:	mov	r0, #1
   1298c:	bl	1115c <__printf_chk@plt>
   12990:	mov	r1, #0
   12994:	mov	r0, #5
   12998:	bl	111a4 <setlocale@plt>
   1299c:	cmp	r0, #0
   129a0:	ldreq	r6, [pc, #368]	; 12b18 <__assert_fail@plt+0x18d8>
   129a4:	beq	129c0 <__assert_fail@plt+0x1780>
   129a8:	mov	r2, #3
   129ac:	ldr	r1, [pc, #372]	; 12b28 <__assert_fail@plt+0x18e8>
   129b0:	bl	11210 <strncmp@plt>
   129b4:	ldr	r6, [pc, #348]	; 12b18 <__assert_fail@plt+0x18d8>
   129b8:	cmp	r0, #0
   129bc:	bne	12aa8 <__assert_fail@plt+0x1868>
   129c0:	mov	r2, #5
   129c4:	ldr	r1, [pc, #352]	; 12b2c <__assert_fail@plt+0x18ec>
   129c8:	mov	r0, #0
   129cc:	bl	10fd0 <dcgettext@plt>
   129d0:	ldr	r3, [pc, #320]	; 12b18 <__assert_fail@plt+0x18d8>
   129d4:	ldr	r2, [pc, #324]	; 12b20 <__assert_fail@plt+0x18e0>
   129d8:	mov	r1, r0
   129dc:	mov	r0, #1
   129e0:	bl	1115c <__printf_chk@plt>
   129e4:	mov	r2, #5
   129e8:	ldr	r1, [pc, #320]	; 12b30 <__assert_fail@plt+0x18f0>
   129ec:	mov	r0, #0
   129f0:	bl	10fd0 <dcgettext@plt>
   129f4:	ldr	r2, [pc, #312]	; 12b34 <__assert_fail@plt+0x18f4>
   129f8:	cmp	r5, r6
   129fc:	ldr	r3, [pc, #308]	; 12b38 <__assert_fail@plt+0x18f8>
   12a00:	movne	r3, r2
   12a04:	mov	r1, r0
   12a08:	mov	r2, r5
   12a0c:	mov	r0, #1
   12a10:	bl	1115c <__printf_chk@plt>
   12a14:	b	127d4 <__assert_fail@plt+0x1594>
   12a18:	mov	r0, r5
   12a1c:	bl	10fd0 <dcgettext@plt>
   12a20:	ldr	r3, [pc, #248]	; 12b20 <__assert_fail@plt+0x18e0>
   12a24:	ldr	r2, [pc, #248]	; 12b24 <__assert_fail@plt+0x18e4>
   12a28:	mov	r1, r0
   12a2c:	mov	r0, #1
   12a30:	bl	1115c <__printf_chk@plt>
   12a34:	mov	r1, r5
   12a38:	mov	r0, #5
   12a3c:	bl	111a4 <setlocale@plt>
   12a40:	cmp	r0, #0
   12a44:	beq	12a5c <__assert_fail@plt+0x181c>
   12a48:	mov	r2, #3
   12a4c:	ldr	r1, [pc, #212]	; 12b28 <__assert_fail@plt+0x18e8>
   12a50:	bl	11210 <strncmp@plt>
   12a54:	cmp	r0, #0
   12a58:	bne	12aa0 <__assert_fail@plt+0x1860>
   12a5c:	mov	r2, #5
   12a60:	ldr	r1, [pc, #196]	; 12b2c <__assert_fail@plt+0x18ec>
   12a64:	mov	r0, #0
   12a68:	bl	10fd0 <dcgettext@plt>
   12a6c:	ldr	r3, [pc, #164]	; 12b18 <__assert_fail@plt+0x18d8>
   12a70:	ldr	r2, [pc, #168]	; 12b20 <__assert_fail@plt+0x18e0>
   12a74:	mov	r5, r3
   12a78:	mov	r1, r0
   12a7c:	mov	r0, #1
   12a80:	bl	1115c <__printf_chk@plt>
   12a84:	ldr	r1, [pc, #164]	; 12b30 <__assert_fail@plt+0x18f0>
   12a88:	mov	r2, #5
   12a8c:	mov	r0, #0
   12a90:	bl	10fd0 <dcgettext@plt>
   12a94:	ldr	r3, [pc, #156]	; 12b38 <__assert_fail@plt+0x18f8>
   12a98:	mov	r1, r0
   12a9c:	b	12a08 <__assert_fail@plt+0x17c8>
   12aa0:	ldr	r6, [pc, #112]	; 12b18 <__assert_fail@plt+0x18d8>
   12aa4:	mov	r5, r6
   12aa8:	mov	r2, #5
   12aac:	ldr	r1, [pc, #136]	; 12b3c <__assert_fail@plt+0x18fc>
   12ab0:	mov	r0, #0
   12ab4:	bl	10fd0 <dcgettext@plt>
   12ab8:	ldr	r2, [pc, #88]	; 12b18 <__assert_fail@plt+0x18d8>
   12abc:	mov	r1, r0
   12ac0:	mov	r0, #1
   12ac4:	bl	1115c <__printf_chk@plt>
   12ac8:	b	129c0 <__assert_fail@plt+0x1780>
   12acc:	andeq	r8, r2, r8, lsl #30
   12ad0:	andeq	r9, r2, r0, lsl #3
   12ad4:	strdeq	r8, [r1], -r0
   12ad8:	andeq	r9, r2, r4, lsl r2
   12adc:	andeq	r8, r1, r8, lsl r2
   12ae0:	andeq	r9, r2, r4, lsl #3
   12ae4:	andeq	r8, r1, r4, asr #4
   12ae8:	andeq	r8, r1, r0, lsl #5
   12aec:	andeq	r8, r1, r4, asr #6
   12af0:	strdeq	r8, [r1], -ip
   12af4:	andeq	r8, r1, r0, lsr r4
   12af8:	andeq	r8, r1, ip, ror #9
   12afc:	andeq	r8, r1, ip, asr #11
   12b00:	andeq	r8, r1, r0, ror r6
   12b04:	andeq	r8, r1, r0, lsr #13
   12b08:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12b0c:	andeq	r8, r1, r8, asr r7
   12b10:	andeq	r8, r1, r8, ror #14
   12b14:	andeq	r7, r1, r0, lsr #30
   12b18:	andeq	r8, r1, ip, ror #3
   12b1c:	andeq	r8, r1, r8, ror r7
   12b20:	muleq	r1, r0, r7
   12b24:			; <UNDEFINED> instruction: 0x000187b8
   12b28:	andeq	r8, r1, r8, asr #15
   12b2c:	andeq	r8, r1, r4, lsl r8
   12b30:	andeq	r8, r1, r4, lsr r8
   12b34:	andeq	r8, r1, r4, asr r7
   12b38:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12b3c:	andeq	r8, r1, ip, asr #15
   12b40:	push	{r4, r5, r6, r7, r8, lr}
   12b44:	sub	sp, sp, #8
   12b48:	ldr	r5, [pc, #164]	; 12bf4 <__assert_fail@plt+0x19b4>
   12b4c:	ldr	ip, [pc, #164]	; 12bf8 <__assert_fail@plt+0x19b8>
   12b50:	mov	r4, #0
   12b54:	ldr	r3, [r5]
   12b58:	mov	lr, #2
   12b5c:	str	r3, [sp, #4]
   12b60:	mov	r6, r1
   12b64:	mov	r2, ip
   12b68:	mov	r1, r4
   12b6c:	mov	r3, sp
   12b70:	str	lr, [ip]
   12b74:	str	r4, [sp]
   12b78:	mov	r8, r0
   12b7c:	bl	111e0 <getaddrinfo@plt>
   12b80:	cmp	r0, #0
   12b84:	bne	12be0 <__assert_fail@plt+0x19a0>
   12b88:	ldr	r7, [sp]
   12b8c:	ldr	r0, [r7, #24]
   12b90:	cmp	r0, r4
   12b94:	moveq	r0, r8
   12b98:	bl	10fdc <strdup@plt>
   12b9c:	adds	r3, r6, #0
   12ba0:	movne	r3, #1
   12ba4:	cmp	r0, #0
   12ba8:	movne	r3, #0
   12bac:	cmp	r3, #0
   12bb0:	mvnne	r3, #9
   12bb4:	mov	r4, r0
   12bb8:	strne	r3, [r6]
   12bbc:	mov	r0, r7
   12bc0:	bl	111d4 <freeaddrinfo@plt>
   12bc4:	ldr	r2, [sp, #4]
   12bc8:	ldr	r3, [r5]
   12bcc:	mov	r0, r4
   12bd0:	cmp	r2, r3
   12bd4:	bne	12bf0 <__assert_fail@plt+0x19b0>
   12bd8:	add	sp, sp, #8
   12bdc:	pop	{r4, r5, r6, r7, r8, pc}
   12be0:	cmp	r6, #0
   12be4:	strne	r0, [r6]
   12be8:	moveq	r4, r6
   12bec:	b	12bc4 <__assert_fail@plt+0x1984>
   12bf0:	bl	10ff4 <__stack_chk_fail@plt>
   12bf4:	andeq	r8, r2, r8, lsl #30
   12bf8:	andeq	r9, r2, r8, ror #3
   12bfc:	ldr	r1, [pc]	; 12c04 <__assert_fail@plt+0x19c4>
   12c00:	b	12b40 <__assert_fail@plt+0x1900>
   12c04:	andeq	r9, r2, r8, lsl #4
   12c08:	ldr	r3, [pc, #4]	; 12c14 <__assert_fail@plt+0x19d4>
   12c0c:	ldr	r0, [r3, #32]
   12c10:	b	10f88 <gai_strerror@plt>
   12c14:	andeq	r9, r2, r8, ror #3
   12c18:	ldr	r3, [pc, #4]	; 12c24 <__assert_fail@plt+0x19e4>
   12c1c:	str	r0, [r3]
   12c20:	bx	lr
   12c24:	andeq	r9, r2, ip, lsl #4
   12c28:	ldr	r3, [pc, #4]	; 12c34 <__assert_fail@plt+0x19f4>
   12c2c:	strb	r0, [r3, #4]
   12c30:	bx	lr
   12c34:	andeq	r9, r2, ip, lsl #4
   12c38:	ldr	r3, [pc, #180]	; 12cf4 <__assert_fail@plt+0x1ab4>
   12c3c:	push	{r4, r5, r6, lr}
   12c40:	sub	sp, sp, #8
   12c44:	ldr	r0, [r3]
   12c48:	bl	15bc0 <__assert_fail@plt+0x4980>
   12c4c:	cmp	r0, #0
   12c50:	beq	12c78 <__assert_fail@plt+0x1a38>
   12c54:	bl	11120 <__errno_location@plt>
   12c58:	ldr	r5, [pc, #152]	; 12cf8 <__assert_fail@plt+0x1ab8>
   12c5c:	ldrb	r3, [r5, #4]
   12c60:	cmp	r3, #0
   12c64:	mov	r4, r0
   12c68:	beq	12c94 <__assert_fail@plt+0x1a54>
   12c6c:	ldr	r3, [r0]
   12c70:	cmp	r3, #32
   12c74:	bne	12c94 <__assert_fail@plt+0x1a54>
   12c78:	ldr	r3, [pc, #124]	; 12cfc <__assert_fail@plt+0x1abc>
   12c7c:	ldr	r0, [r3]
   12c80:	bl	15bc0 <__assert_fail@plt+0x4980>
   12c84:	cmp	r0, #0
   12c88:	bne	12cd4 <__assert_fail@plt+0x1a94>
   12c8c:	add	sp, sp, #8
   12c90:	pop	{r4, r5, r6, pc}
   12c94:	mov	r2, #5
   12c98:	ldr	r1, [pc, #96]	; 12d00 <__assert_fail@plt+0x1ac0>
   12c9c:	mov	r0, #0
   12ca0:	bl	10fd0 <dcgettext@plt>
   12ca4:	mov	r6, r0
   12ca8:	ldr	r0, [r5]
   12cac:	cmp	r0, #0
   12cb0:	beq	12ce0 <__assert_fail@plt+0x1aa0>
   12cb4:	ldr	r4, [r4]
   12cb8:	bl	14ea8 <__assert_fail@plt+0x3c68>
   12cbc:	mov	r1, r4
   12cc0:	str	r6, [sp]
   12cc4:	ldr	r2, [pc, #56]	; 12d04 <__assert_fail@plt+0x1ac4>
   12cc8:	mov	r3, r0
   12ccc:	mov	r0, #0
   12cd0:	bl	1106c <error@plt>
   12cd4:	ldr	r3, [pc, #44]	; 12d08 <__assert_fail@plt+0x1ac8>
   12cd8:	ldr	r0, [r3]
   12cdc:	bl	10f94 <_exit@plt>
   12ce0:	mov	r3, r6
   12ce4:	ldr	r1, [r4]
   12ce8:	ldr	r2, [pc, #28]	; 12d0c <__assert_fail@plt+0x1acc>
   12cec:	bl	1106c <error@plt>
   12cf0:	b	12cd4 <__assert_fail@plt+0x1a94>
   12cf4:	andeq	r9, r2, r4, lsl #3
   12cf8:	andeq	r9, r2, ip, lsl #4
   12cfc:	andeq	r9, r2, r0, lsl #3
   12d00:	strdeq	r8, [r1], -r4
   12d04:	andeq	r8, r1, r0, lsl #20
   12d08:	andeq	r9, r2, ip, lsr #2
   12d0c:	andeq	r8, r1, r4, lsl #20
   12d10:	push	{r4, lr}
   12d14:	mov	r1, #0
   12d18:	bl	111a4 <setlocale@plt>
   12d1c:	subs	r4, r0, #0
   12d20:	beq	12d4c <__assert_fail@plt+0x1b0c>
   12d24:	ldr	r1, [pc, #40]	; 12d54 <__assert_fail@plt+0x1b14>
   12d28:	bl	10f58 <strcmp@plt>
   12d2c:	cmp	r0, #0
   12d30:	popeq	{r4, pc}
   12d34:	mov	r0, r4
   12d38:	ldr	r1, [pc, #24]	; 12d58 <__assert_fail@plt+0x1b18>
   12d3c:	bl	10f58 <strcmp@plt>
   12d40:	adds	r0, r0, #0
   12d44:	movne	r0, #1
   12d48:	pop	{r4, pc}
   12d4c:	mov	r0, #1
   12d50:	pop	{r4, pc}
   12d54:	andeq	r8, r1, r8, lsl #20
   12d58:	andeq	r8, r1, ip, lsl #20
   12d5c:	cmp	r0, #0
   12d60:	sbcs	r3, r1, #0
   12d64:	mov	r3, #0
   12d68:	push	{r4, r5, r6, r7, r8, lr}
   12d6c:	mov	r4, r0
   12d70:	mov	r5, r1
   12d74:	strb	r3, [r2, #20]
   12d78:	add	r6, r2, #20
   12d7c:	blt	12dcc <__assert_fail@plt+0x1b8c>
   12d80:	mov	r0, r4
   12d84:	mov	r1, r5
   12d88:	mov	r2, #10
   12d8c:	mov	r3, #0
   12d90:	bl	17c30 <__assert_fail@plt+0x69f0>
   12d94:	mov	r0, r4
   12d98:	mov	r1, r5
   12d9c:	mov	r3, #0
   12da0:	add	r2, r2, #48	; 0x30
   12da4:	strb	r2, [r6, #-1]!
   12da8:	mov	r2, #10
   12dac:	bl	17c30 <__assert_fail@plt+0x69f0>
   12db0:	mov	r4, r0
   12db4:	mov	r5, r1
   12db8:	orrs	r3, r4, r5
   12dbc:	bne	12d80 <__assert_fail@plt+0x1b40>
   12dc0:	mov	r0, r6
   12dc4:	pop	{r4, r5, r6, r7, r8, pc}
   12dc8:	mov	r6, r7
   12dcc:	mov	r0, r4
   12dd0:	mov	r1, r5
   12dd4:	mov	r2, #10
   12dd8:	mov	r3, #0
   12ddc:	bl	17c30 <__assert_fail@plt+0x69f0>
   12de0:	mov	r0, r4
   12de4:	mov	r1, r5
   12de8:	mov	r3, #0
   12dec:	sub	r7, r6, #1
   12df0:	rsb	r2, r2, #48	; 0x30
   12df4:	strb	r2, [r6, #-1]
   12df8:	mov	r2, #10
   12dfc:	bl	17c30 <__assert_fail@plt+0x69f0>
   12e00:	mov	r4, r0
   12e04:	mov	r5, r1
   12e08:	orrs	r3, r4, r5
   12e0c:	bne	12dc8 <__assert_fail@plt+0x1b88>
   12e10:	mov	r3, #45	; 0x2d
   12e14:	sub	r6, r6, #2
   12e18:	strb	r3, [r7, #-1]
   12e1c:	mov	r0, r6
   12e20:	pop	{r4, r5, r6, r7, r8, pc}
   12e24:	push	{r4, r5, r6, lr}
   12e28:	subs	r4, r0, #0
   12e2c:	beq	12ea0 <__assert_fail@plt+0x1c60>
   12e30:	mov	r1, #47	; 0x2f
   12e34:	bl	111bc <strrchr@plt>
   12e38:	subs	r5, r0, #0
   12e3c:	beq	12e8c <__assert_fail@plt+0x1c4c>
   12e40:	add	r6, r5, #1
   12e44:	sub	r3, r6, r4
   12e48:	cmp	r3, #6
   12e4c:	ble	12e8c <__assert_fail@plt+0x1c4c>
   12e50:	mov	r2, #7
   12e54:	ldr	r1, [pc, #96]	; 12ebc <__assert_fail@plt+0x1c7c>
   12e58:	sub	r0, r5, #6
   12e5c:	bl	11210 <strncmp@plt>
   12e60:	cmp	r0, #0
   12e64:	bne	12e8c <__assert_fail@plt+0x1c4c>
   12e68:	mov	r2, #3
   12e6c:	ldr	r1, [pc, #76]	; 12ec0 <__assert_fail@plt+0x1c80>
   12e70:	mov	r0, r6
   12e74:	bl	11210 <strncmp@plt>
   12e78:	cmp	r0, #0
   12e7c:	movne	r4, r6
   12e80:	ldreq	r3, [pc, #60]	; 12ec4 <__assert_fail@plt+0x1c84>
   12e84:	addeq	r4, r5, #4
   12e88:	streq	r4, [r3]
   12e8c:	ldr	r2, [pc, #52]	; 12ec8 <__assert_fail@plt+0x1c88>
   12e90:	ldr	r3, [pc, #52]	; 12ecc <__assert_fail@plt+0x1c8c>
   12e94:	str	r4, [r2]
   12e98:	str	r4, [r3]
   12e9c:	pop	{r4, r5, r6, pc}
   12ea0:	ldr	r3, [pc, #40]	; 12ed0 <__assert_fail@plt+0x1c90>
   12ea4:	mov	r2, #55	; 0x37
   12ea8:	mov	r1, #1
   12eac:	ldr	r3, [r3]
   12eb0:	ldr	r0, [pc, #28]	; 12ed4 <__assert_fail@plt+0x1c94>
   12eb4:	bl	11024 <fwrite@plt>
   12eb8:	bl	1121c <abort@plt>
   12ebc:	andeq	r8, r1, ip, asr #20
   12ec0:	andeq	r8, r1, r4, asr sl
   12ec4:	andeq	r9, r2, r0, ror r1
   12ec8:	andeq	r9, r2, r4, lsl r2
   12ecc:	andeq	r9, r2, r4, ror r1
   12ed0:	andeq	r9, r2, r0, lsl #3
   12ed4:	andeq	r8, r1, r4, lsl sl
   12ed8:	push	{r4, lr}
   12edc:	mov	r2, #48	; 0x30
   12ee0:	mov	r4, r1
   12ee4:	mov	r1, #0
   12ee8:	bl	11144 <memset@plt>
   12eec:	cmp	r4, #10
   12ef0:	beq	12efc <__assert_fail@plt+0x1cbc>
   12ef4:	str	r4, [r0]
   12ef8:	pop	{r4, pc}
   12efc:	bl	1121c <abort@plt>
   12f00:	push	{r4, r5, r6, lr}
   12f04:	mov	r2, #5
   12f08:	mov	r5, r0
   12f0c:	mov	r6, r1
   12f10:	mov	r1, r0
   12f14:	mov	r0, #0
   12f18:	bl	10fd0 <dcgettext@plt>
   12f1c:	cmp	r5, r0
   12f20:	mov	r4, r0
   12f24:	beq	12f30 <__assert_fail@plt+0x1cf0>
   12f28:	mov	r0, r4
   12f2c:	pop	{r4, r5, r6, pc}
   12f30:	bl	15c34 <__assert_fail@plt+0x49f4>
   12f34:	ldrb	r3, [r0]
   12f38:	bic	r3, r3, #32
   12f3c:	cmp	r3, #85	; 0x55
   12f40:	bne	12fa0 <__assert_fail@plt+0x1d60>
   12f44:	ldrb	r3, [r0, #1]
   12f48:	bic	r3, r3, #32
   12f4c:	cmp	r3, #84	; 0x54
   12f50:	bne	13018 <__assert_fail@plt+0x1dd8>
   12f54:	ldrb	r3, [r0, #2]
   12f58:	bic	r3, r3, #32
   12f5c:	cmp	r3, #70	; 0x46
   12f60:	bne	13018 <__assert_fail@plt+0x1dd8>
   12f64:	ldrb	r3, [r0, #3]
   12f68:	cmp	r3, #45	; 0x2d
   12f6c:	bne	13018 <__assert_fail@plt+0x1dd8>
   12f70:	ldrb	r3, [r0, #4]
   12f74:	cmp	r3, #56	; 0x38
   12f78:	bne	13018 <__assert_fail@plt+0x1dd8>
   12f7c:	ldrb	r3, [r0, #5]
   12f80:	cmp	r3, #0
   12f84:	bne	13018 <__assert_fail@plt+0x1dd8>
   12f88:	ldrb	r2, [r4]
   12f8c:	ldr	r3, [pc, #156]	; 13030 <__assert_fail@plt+0x1df0>
   12f90:	ldr	r4, [pc, #156]	; 13034 <__assert_fail@plt+0x1df4>
   12f94:	cmp	r2, #96	; 0x60
   12f98:	movne	r4, r3
   12f9c:	b	12f28 <__assert_fail@plt+0x1ce8>
   12fa0:	cmp	r3, #71	; 0x47
   12fa4:	bne	13018 <__assert_fail@plt+0x1dd8>
   12fa8:	ldrb	r3, [r0, #1]
   12fac:	bic	r3, r3, #32
   12fb0:	cmp	r3, #66	; 0x42
   12fb4:	bne	13018 <__assert_fail@plt+0x1dd8>
   12fb8:	ldrb	r3, [r0, #2]
   12fbc:	cmp	r3, #49	; 0x31
   12fc0:	bne	13018 <__assert_fail@plt+0x1dd8>
   12fc4:	ldrb	r3, [r0, #3]
   12fc8:	cmp	r3, #56	; 0x38
   12fcc:	bne	13018 <__assert_fail@plt+0x1dd8>
   12fd0:	ldrb	r3, [r0, #4]
   12fd4:	cmp	r3, #48	; 0x30
   12fd8:	bne	13018 <__assert_fail@plt+0x1dd8>
   12fdc:	ldrb	r3, [r0, #5]
   12fe0:	cmp	r3, #51	; 0x33
   12fe4:	bne	13018 <__assert_fail@plt+0x1dd8>
   12fe8:	ldrb	r3, [r0, #6]
   12fec:	cmp	r3, #48	; 0x30
   12ff0:	bne	13018 <__assert_fail@plt+0x1dd8>
   12ff4:	ldrb	r3, [r0, #7]
   12ff8:	cmp	r3, #0
   12ffc:	bne	13018 <__assert_fail@plt+0x1dd8>
   13000:	ldrb	r2, [r4]
   13004:	ldr	r3, [pc, #44]	; 13038 <__assert_fail@plt+0x1df8>
   13008:	ldr	r4, [pc, #44]	; 1303c <__assert_fail@plt+0x1dfc>
   1300c:	cmp	r2, #96	; 0x60
   13010:	movne	r4, r3
   13014:	b	12f28 <__assert_fail@plt+0x1ce8>
   13018:	ldr	r3, [pc, #32]	; 13040 <__assert_fail@plt+0x1e00>
   1301c:	ldr	r4, [pc, #32]	; 13044 <__assert_fail@plt+0x1e04>
   13020:	cmp	r6, #9
   13024:	movne	r4, r3
   13028:	mov	r0, r4
   1302c:	pop	{r4, r5, r6, pc}
   13030:			; <UNDEFINED> instruction: 0x00018ab0
   13034:			; <UNDEFINED> instruction: 0x00018abc
   13038:			; <UNDEFINED> instruction: 0x00018ab4
   1303c:			; <UNDEFINED> instruction: 0x00018ab8
   13040:	andeq	r8, r1, r0, asr #21
   13044:	andeq	r8, r1, ip, lsr #21
   13048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	sub	sp, sp, #124	; 0x7c
   13050:	ldr	ip, [pc, #3576]	; 13e50 <__assert_fail@plt+0x2c10>
   13054:	str	r3, [sp, #24]
   13058:	ldr	r3, [sp, #168]	; 0xa8
   1305c:	ldr	ip, [ip]
   13060:	str	r3, [sp, #56]	; 0x38
   13064:	ldr	r3, [sp, #172]	; 0xac
   13068:	ldr	r8, [sp, #160]	; 0xa0
   1306c:	str	r3, [sp, #80]	; 0x50
   13070:	ldr	r3, [sp, #176]	; 0xb0
   13074:	mov	fp, r0
   13078:	str	r3, [sp, #76]	; 0x4c
   1307c:	mov	sl, r1
   13080:	str	r2, [sp, #36]	; 0x24
   13084:	str	ip, [sp, #116]	; 0x74
   13088:	bl	1103c <__ctype_get_mb_cur_max@plt>
   1308c:	ldr	r3, [sp, #164]	; 0xa4
   13090:	ands	r4, r3, #2
   13094:	movne	r3, #1
   13098:	moveq	r3, #0
   1309c:	str	r3, [sp, #32]
   130a0:	str	r0, [sp, #64]	; 0x40
   130a4:	cmp	r8, #10
   130a8:	ldrls	pc, [pc, r8, lsl #2]
   130ac:	b	1485c <__assert_fail@plt+0x361c>
   130b0:	andeq	r3, r1, r4, lsr #9
   130b4:	andeq	r3, r1, ip, lsr r5
   130b8:	andeq	r3, r1, ip, lsr fp
   130bc:	andeq	r3, r1, ip, asr r5
   130c0:	andeq	r3, r1, r0, lsl r4
   130c4:	andeq	r3, r1, r8, asr r4
   130c8:	ldrdeq	r3, [r1], -r4
   130cc:	andeq	r3, r1, ip, lsl #10
   130d0:	ldrdeq	r3, [r1], -ip
   130d4:	ldrdeq	r3, [r1], -ip
   130d8:	ldrdeq	r3, [r1], -ip
   130dc:	cmp	r8, #10
   130e0:	beq	13104 <__assert_fail@plt+0x1ec4>
   130e4:	mov	r1, r8
   130e8:	ldr	r0, [pc, #3428]	; 13e54 <__assert_fail@plt+0x2c14>
   130ec:	bl	12f00 <__assert_fail@plt+0x1cc0>
   130f0:	mov	r1, r8
   130f4:	str	r0, [sp, #80]	; 0x50
   130f8:	ldr	r0, [pc, #3420]	; 13e5c <__assert_fail@plt+0x2c1c>
   130fc:	bl	12f00 <__assert_fail@plt+0x1cc0>
   13100:	str	r0, [sp, #76]	; 0x4c
   13104:	cmp	r4, #0
   13108:	movne	r4, #0
   1310c:	beq	1451c <__assert_fail@plt+0x32dc>
   13110:	ldr	r7, [sp, #76]	; 0x4c
   13114:	mov	r5, #0
   13118:	mov	r6, #1
   1311c:	mov	r0, r7
   13120:	str	r6, [sp, #40]	; 0x28
   13124:	str	r5, [sp, #68]	; 0x44
   13128:	bl	11108 <strlen@plt>
   1312c:	str	r6, [sp, #28]
   13130:	str	r5, [sp, #44]	; 0x2c
   13134:	str	r5, [sp, #72]	; 0x48
   13138:	str	r7, [sp, #60]	; 0x3c
   1313c:	str	r0, [sp, #52]	; 0x34
   13140:	str	r8, [sp, #160]	; 0xa0
   13144:	mov	r8, fp
   13148:	ldr	fp, [sp, #160]	; 0xa0
   1314c:	mov	r9, #0
   13150:	ldr	r3, [sp, #24]
   13154:	cmn	r3, #1
   13158:	beq	136c0 <__assert_fail@plt+0x2480>
   1315c:	ldr	r3, [sp, #24]
   13160:	subs	r6, r3, r9
   13164:	movne	r6, #1
   13168:	cmp	r6, #0
   1316c:	beq	136d8 <__assert_fail@plt+0x2498>
   13170:	ldr	r7, [sp, #28]
   13174:	ldr	r0, [sp, #36]	; 0x24
   13178:	cmp	fp, #2
   1317c:	moveq	r7, #0
   13180:	andne	r7, r7, #1
   13184:	add	r3, r0, r9
   13188:	cmp	r7, #0
   1318c:	str	r3, [sp, #48]	; 0x30
   13190:	beq	13b7c <__assert_fail@plt+0x293c>
   13194:	ldr	r2, [sp, #52]	; 0x34
   13198:	cmp	r2, #0
   1319c:	beq	13e60 <__assert_fail@plt+0x2c20>
   131a0:	ldr	r1, [sp, #24]
   131a4:	cmp	r2, #1
   131a8:	mov	r3, r2
   131ac:	movls	r3, #0
   131b0:	movhi	r3, #1
   131b4:	cmn	r1, #1
   131b8:	movne	r3, #0
   131bc:	cmp	r3, #0
   131c0:	add	r5, r9, r2
   131c4:	beq	131d0 <__assert_fail@plt+0x1f90>
   131c8:	bl	11108 <strlen@plt>
   131cc:	str	r0, [sp, #24]
   131d0:	ldr	r3, [sp, #24]
   131d4:	cmp	r5, r3
   131d8:	bhi	13e60 <__assert_fail@plt+0x2c20>
   131dc:	ldr	r2, [sp, #52]	; 0x34
   131e0:	ldr	r1, [sp, #60]	; 0x3c
   131e4:	ldr	r0, [sp, #48]	; 0x30
   131e8:	bl	10fc4 <memcmp@plt>
   131ec:	cmp	r0, #0
   131f0:	bne	13e60 <__assert_fail@plt+0x2c20>
   131f4:	ldr	r3, [sp, #32]
   131f8:	cmp	r3, #0
   131fc:	bne	1471c <__assert_fail@plt+0x34dc>
   13200:	ldr	r3, [sp, #48]	; 0x30
   13204:	ldrb	r5, [r3]
   13208:	cmp	r5, #126	; 0x7e
   1320c:	ldrls	pc, [pc, r5, lsl #2]
   13210:	b	13ae0 <__assert_fail@plt+0x28a0>
   13214:	andeq	r3, r1, ip, asr #19
   13218:	andeq	r3, r1, r0, ror #21
   1321c:	andeq	r3, r1, r0, ror #21
   13220:	andeq	r3, r1, r0, ror #21
   13224:	andeq	r3, r1, r0, ror #21
   13228:	andeq	r3, r1, r0, ror #21
   1322c:	andeq	r3, r1, r0, ror #21
   13230:	muleq	r1, r8, sl
   13234:	andeq	r3, r1, r8, lsl #21
   13238:	andeq	r3, r1, r8, lsl #19
   1323c:	andeq	r3, r1, r0, asr r9
   13240:	andeq	r3, r1, r8, lsr #19
   13244:	muleq	r1, r0, r9
   13248:	andeq	r3, r1, r0, asr #17
   1324c:	andeq	r3, r1, r0, ror #21
   13250:	andeq	r3, r1, r0, ror #21
   13254:	andeq	r3, r1, r0, ror #21
   13258:	andeq	r3, r1, r0, ror #21
   1325c:	andeq	r3, r1, r0, ror #21
   13260:	andeq	r3, r1, r0, ror #21
   13264:	andeq	r3, r1, r0, ror #21
   13268:	andeq	r3, r1, r0, ror #21
   1326c:	andeq	r3, r1, r0, ror #21
   13270:	andeq	r3, r1, r0, ror #21
   13274:	andeq	r3, r1, r0, ror #21
   13278:	andeq	r3, r1, r0, ror #21
   1327c:	andeq	r3, r1, r0, ror #21
   13280:	andeq	r3, r1, r0, ror #21
   13284:	andeq	r3, r1, r0, ror #21
   13288:	andeq	r3, r1, r0, ror #21
   1328c:	andeq	r3, r1, r0, ror #21
   13290:	andeq	r3, r1, r0, ror #21
   13294:	andeq	r3, r1, r0, lsr #21
   13298:			; <UNDEFINED> instruction: 0x000139b4
   1329c:			; <UNDEFINED> instruction: 0x000139b4
   132a0:			; <UNDEFINED> instruction: 0x00013ab8
   132a4:			; <UNDEFINED> instruction: 0x000139b4
   132a8:	ldrdeq	r3, [r1], -r4
   132ac:			; <UNDEFINED> instruction: 0x000139b4
   132b0:	strdeq	r3, [r1], -r4
   132b4:			; <UNDEFINED> instruction: 0x000139b4
   132b8:			; <UNDEFINED> instruction: 0x000139b4
   132bc:			; <UNDEFINED> instruction: 0x000139b4
   132c0:	ldrdeq	r3, [r1], -r4
   132c4:	ldrdeq	r3, [r1], -r4
   132c8:	ldrdeq	r3, [r1], -r4
   132cc:	ldrdeq	r3, [r1], -r4
   132d0:	ldrdeq	r3, [r1], -r4
   132d4:	ldrdeq	r3, [r1], -r4
   132d8:	ldrdeq	r3, [r1], -r4
   132dc:	ldrdeq	r3, [r1], -r4
   132e0:	ldrdeq	r3, [r1], -r4
   132e4:	ldrdeq	r3, [r1], -r4
   132e8:	ldrdeq	r3, [r1], -r4
   132ec:	ldrdeq	r3, [r1], -r4
   132f0:	ldrdeq	r3, [r1], -r4
   132f4:	ldrdeq	r3, [r1], -r4
   132f8:	ldrdeq	r3, [r1], -r4
   132fc:	ldrdeq	r3, [r1], -r4
   13300:			; <UNDEFINED> instruction: 0x000139b4
   13304:			; <UNDEFINED> instruction: 0x000139b4
   13308:			; <UNDEFINED> instruction: 0x000139b4
   1330c:			; <UNDEFINED> instruction: 0x000139b4
   13310:	andeq	r3, r1, r8, asr #15
   13314:	andeq	r3, r1, r0, ror #21
   13318:	ldrdeq	r3, [r1], -r4
   1331c:	ldrdeq	r3, [r1], -r4
   13320:	ldrdeq	r3, [r1], -r4
   13324:	ldrdeq	r3, [r1], -r4
   13328:	ldrdeq	r3, [r1], -r4
   1332c:	ldrdeq	r3, [r1], -r4
   13330:	ldrdeq	r3, [r1], -r4
   13334:	ldrdeq	r3, [r1], -r4
   13338:	ldrdeq	r3, [r1], -r4
   1333c:	ldrdeq	r3, [r1], -r4
   13340:	ldrdeq	r3, [r1], -r4
   13344:	ldrdeq	r3, [r1], -r4
   13348:	ldrdeq	r3, [r1], -r4
   1334c:	ldrdeq	r3, [r1], -r4
   13350:	ldrdeq	r3, [r1], -r4
   13354:	ldrdeq	r3, [r1], -r4
   13358:	ldrdeq	r3, [r1], -r4
   1335c:	ldrdeq	r3, [r1], -r4
   13360:	ldrdeq	r3, [r1], -r4
   13364:	ldrdeq	r3, [r1], -r4
   13368:	ldrdeq	r3, [r1], -r4
   1336c:	ldrdeq	r3, [r1], -r4
   13370:	ldrdeq	r3, [r1], -r4
   13374:	ldrdeq	r3, [r1], -r4
   13378:	ldrdeq	r3, [r1], -r4
   1337c:	ldrdeq	r3, [r1], -r4
   13380:			; <UNDEFINED> instruction: 0x000139b4
   13384:	andeq	r3, r1, r0, lsl #15
   13388:	ldrdeq	r3, [r1], -r4
   1338c:			; <UNDEFINED> instruction: 0x000139b4
   13390:	ldrdeq	r3, [r1], -r4
   13394:			; <UNDEFINED> instruction: 0x000139b4
   13398:	ldrdeq	r3, [r1], -r4
   1339c:	ldrdeq	r3, [r1], -r4
   133a0:	ldrdeq	r3, [r1], -r4
   133a4:	ldrdeq	r3, [r1], -r4
   133a8:	ldrdeq	r3, [r1], -r4
   133ac:	ldrdeq	r3, [r1], -r4
   133b0:	ldrdeq	r3, [r1], -r4
   133b4:	ldrdeq	r3, [r1], -r4
   133b8:	ldrdeq	r3, [r1], -r4
   133bc:	ldrdeq	r3, [r1], -r4
   133c0:	ldrdeq	r3, [r1], -r4
   133c4:	ldrdeq	r3, [r1], -r4
   133c8:	ldrdeq	r3, [r1], -r4
   133cc:	ldrdeq	r3, [r1], -r4
   133d0:	ldrdeq	r3, [r1], -r4
   133d4:	ldrdeq	r3, [r1], -r4
   133d8:	ldrdeq	r3, [r1], -r4
   133dc:	ldrdeq	r3, [r1], -r4
   133e0:	ldrdeq	r3, [r1], -r4
   133e4:	ldrdeq	r3, [r1], -r4
   133e8:	ldrdeq	r3, [r1], -r4
   133ec:	ldrdeq	r3, [r1], -r4
   133f0:	ldrdeq	r3, [r1], -r4
   133f4:	ldrdeq	r3, [r1], -r4
   133f8:	ldrdeq	r3, [r1], -r4
   133fc:	ldrdeq	r3, [r1], -r4
   13400:	muleq	r1, r8, r5
   13404:			; <UNDEFINED> instruction: 0x000139b4
   13408:	muleq	r1, r8, r5
   1340c:			; <UNDEFINED> instruction: 0x00013ab8
   13410:	cmp	r4, #0
   13414:	moveq	r3, #1
   13418:	streq	r3, [sp, #28]
   1341c:	beq	13b48 <__assert_fail@plt+0x2908>
   13420:	mov	r3, #0
   13424:	mov	r4, r3
   13428:	mov	r2, #1
   1342c:	str	r2, [sp, #40]	; 0x28
   13430:	str	r3, [sp, #68]	; 0x44
   13434:	str	r2, [sp, #32]
   13438:	str	r2, [sp, #52]	; 0x34
   1343c:	ldr	r3, [pc, #2584]	; 13e5c <__assert_fail@plt+0x2c1c>
   13440:	str	r4, [sp, #44]	; 0x2c
   13444:	str	r4, [sp, #72]	; 0x48
   13448:	str	r4, [sp, #28]
   1344c:	str	r3, [sp, #60]	; 0x3c
   13450:	mov	r8, #2
   13454:	b	13140 <__assert_fail@plt+0x1f00>
   13458:	cmp	r4, #0
   1345c:	bne	146e8 <__assert_fail@plt+0x34a8>
   13460:	cmp	sl, #0
   13464:	beq	144a8 <__assert_fail@plt+0x3268>
   13468:	mov	r3, #34	; 0x22
   1346c:	strb	r3, [fp]
   13470:	ldr	r3, [pc, #2528]	; 13e58 <__assert_fail@plt+0x2c18>
   13474:	mov	r1, r4
   13478:	mov	r2, #1
   1347c:	str	r4, [sp, #68]	; 0x44
   13480:	str	r2, [sp, #40]	; 0x28
   13484:	mov	r4, r2
   13488:	str	r1, [sp, #44]	; 0x2c
   1348c:	str	r1, [sp, #72]	; 0x48
   13490:	str	r1, [sp, #32]
   13494:	str	r2, [sp, #28]
   13498:	str	r2, [sp, #52]	; 0x34
   1349c:	str	r3, [sp, #60]	; 0x3c
   134a0:	b	13140 <__assert_fail@plt+0x1f00>
   134a4:	mov	r3, #0
   134a8:	str	r3, [sp, #68]	; 0x44
   134ac:	str	r3, [sp, #44]	; 0x2c
   134b0:	str	r3, [sp, #32]
   134b4:	str	r3, [sp, #28]
   134b8:	str	r3, [sp, #60]	; 0x3c
   134bc:	mov	r3, #1
   134c0:	str	r8, [sp, #72]	; 0x48
   134c4:	str	r8, [sp, #52]	; 0x34
   134c8:	mov	r4, r8
   134cc:	str	r3, [sp, #40]	; 0x28
   134d0:	b	13140 <__assert_fail@plt+0x1f00>
   134d4:	mov	r3, #1
   134d8:	str	r3, [sp, #40]	; 0x28
   134dc:	str	r3, [sp, #32]
   134e0:	str	r3, [sp, #28]
   134e4:	str	r3, [sp, #52]	; 0x34
   134e8:	ldr	r3, [pc, #2408]	; 13e58 <__assert_fail@plt+0x2c18>
   134ec:	mov	r2, #0
   134f0:	mov	r4, r2
   134f4:	str	r2, [sp, #68]	; 0x44
   134f8:	str	r2, [sp, #44]	; 0x2c
   134fc:	str	r2, [sp, #72]	; 0x48
   13500:	str	r3, [sp, #60]	; 0x3c
   13504:	mov	r8, #5
   13508:	b	13140 <__assert_fail@plt+0x1f00>
   1350c:	mov	r3, #0
   13510:	mov	r2, #1
   13514:	str	r2, [sp, #40]	; 0x28
   13518:	mov	r4, r3
   1351c:	str	r3, [sp, #68]	; 0x44
   13520:	str	r2, [sp, #28]
   13524:	str	r3, [sp, #44]	; 0x2c
   13528:	str	r3, [sp, #72]	; 0x48
   1352c:	str	r3, [sp, #32]
   13530:	str	r3, [sp, #52]	; 0x34
   13534:	str	r3, [sp, #60]	; 0x3c
   13538:	b	13140 <__assert_fail@plt+0x1f00>
   1353c:	mov	r2, #1
   13540:	mov	r3, #0
   13544:	str	r2, [sp, #40]	; 0x28
   13548:	mov	r4, r3
   1354c:	str	r3, [sp, #68]	; 0x44
   13550:	str	r8, [sp, #52]	; 0x34
   13554:	str	r2, [sp, #32]
   13558:	b	1343c <__assert_fail@plt+0x21fc>
   1355c:	mov	r3, #1
   13560:	str	r3, [sp, #40]	; 0x28
   13564:	str	r3, [sp, #32]
   13568:	str	r3, [sp, #28]
   1356c:	str	r3, [sp, #52]	; 0x34
   13570:	ldr	r3, [pc, #2276]	; 13e5c <__assert_fail@plt+0x2c1c>
   13574:	mov	r2, #0
   13578:	mov	r4, r2
   1357c:	str	r2, [sp, #68]	; 0x44
   13580:	str	r2, [sp, #44]	; 0x2c
   13584:	str	r2, [sp, #72]	; 0x48
   13588:	str	r3, [sp, #60]	; 0x3c
   1358c:	mov	r8, #2
   13590:	b	13140 <__assert_fail@plt+0x1f00>
   13594:	mov	r7, #0
   13598:	ldr	r3, [sp, #24]
   1359c:	cmn	r3, #1
   135a0:	beq	140dc <__assert_fail@plt+0x2e9c>
   135a4:	ldr	r3, [sp, #24]
   135a8:	subs	r3, r3, #1
   135ac:	movne	r3, #1
   135b0:	cmp	r3, #0
   135b4:	sub	r2, fp, #2
   135b8:	clz	r2, r2
   135bc:	lsr	r2, r2, #5
   135c0:	bne	137bc <__assert_fail@plt+0x257c>
   135c4:	cmp	r9, #0
   135c8:	bne	137bc <__assert_fail@plt+0x257c>
   135cc:	ldr	r3, [sp, #32]
   135d0:	tst	r3, r2
   135d4:	bne	138dc <__assert_fail@plt+0x269c>
   135d8:	ldr	r3, [sp, #28]
   135dc:	eor	r3, r3, #1
   135e0:	orr	r3, r2, r3
   135e4:	ldr	r2, [sp, #32]
   135e8:	eor	r3, r3, #1
   135ec:	orrs	r3, r2, r3
   135f0:	beq	13620 <__assert_fail@plt+0x23e0>
   135f4:	mov	r3, #0
   135f8:	ldr	r1, [sp, #56]	; 0x38
   135fc:	cmp	r1, #0
   13600:	beq	13620 <__assert_fail@plt+0x23e0>
   13604:	lsr	r2, r5, #5
   13608:	and	r0, r5, #31
   1360c:	uxtb	r2, r2
   13610:	ldr	r1, [r1, r2, lsl #2]
   13614:	lsr	r2, r1, r0
   13618:	tst	r2, #1
   1361c:	bne	13628 <__assert_fail@plt+0x23e8>
   13620:	cmp	r7, #0
   13624:	beq	13878 <__assert_fail@plt+0x2638>
   13628:	sub	r2, fp, #2
   1362c:	clz	r2, r2
   13630:	lsr	r2, r2, #5
   13634:	ldr	r3, [sp, #32]
   13638:	cmp	r3, #0
   1363c:	bne	13968 <__assert_fail@plt+0x2728>
   13640:	ldr	r3, [sp, #44]	; 0x2c
   13644:	eor	r3, r3, #1
   13648:	ands	r3, r2, r3
   1364c:	beq	13684 <__assert_fail@plt+0x2444>
   13650:	cmp	sl, r4
   13654:	movhi	r2, #39	; 0x27
   13658:	strbhi	r2, [r8, r4]
   1365c:	add	r2, r4, #1
   13660:	cmp	r2, sl
   13664:	movcc	r1, #36	; 0x24
   13668:	strbcc	r1, [r8, r2]
   1366c:	add	r2, r4, #2
   13670:	cmp	r2, sl
   13674:	add	r4, r4, #3
   13678:	movcc	r1, #39	; 0x27
   1367c:	strbcc	r1, [r8, r2]
   13680:	str	r3, [sp, #44]	; 0x2c
   13684:	cmp	r4, sl
   13688:	movcc	r3, #92	; 0x5c
   1368c:	strbcc	r3, [r8, r4]
   13690:	add	r9, r9, #1
   13694:	add	r4, r4, #1
   13698:	cmp	r4, sl
   1369c:	ldr	r3, [sp, #40]	; 0x28
   136a0:	strbcc	r5, [r8, r4]
   136a4:	cmp	r6, #0
   136a8:	moveq	r3, #0
   136ac:	str	r3, [sp, #40]	; 0x28
   136b0:	ldr	r3, [sp, #24]
   136b4:	add	r4, r4, #1
   136b8:	cmn	r3, #1
   136bc:	bne	1315c <__assert_fail@plt+0x1f1c>
   136c0:	ldr	r3, [sp, #36]	; 0x24
   136c4:	ldrb	r6, [r3, r9]
   136c8:	adds	r6, r6, #0
   136cc:	movne	r6, #1
   136d0:	cmp	r6, #0
   136d4:	bne	13170 <__assert_fail@plt+0x1f30>
   136d8:	str	fp, [sp, #160]	; 0xa0
   136dc:	mov	fp, r8
   136e0:	ldr	r8, [sp, #160]	; 0xa0
   136e4:	ldr	r1, [sp, #32]
   136e8:	cmp	r4, #0
   136ec:	sub	r2, r8, #2
   136f0:	clz	r2, r2
   136f4:	lsr	r2, r2, #5
   136f8:	andeq	r3, r2, r1
   136fc:	movne	r3, #0
   13700:	cmp	r3, #0
   13704:	bne	147f0 <__assert_fail@plt+0x35b0>
   13708:	eor	r3, r1, #1
   1370c:	ands	r2, r2, r3
   13710:	beq	1472c <__assert_fail@plt+0x34ec>
   13714:	ldr	r3, [sp, #68]	; 0x44
   13718:	cmp	r3, #0
   1371c:	beq	14730 <__assert_fail@plt+0x34f0>
   13720:	ldr	r3, [sp, #40]	; 0x28
   13724:	cmp	r3, #0
   13728:	bne	147ac <__assert_fail@plt+0x356c>
   1372c:	ldr	r3, [sp, #72]	; 0x48
   13730:	adds	r3, r3, #0
   13734:	movne	r3, #1
   13738:	cmp	sl, #0
   1373c:	movne	r3, #0
   13740:	cmp	r3, #0
   13744:	ldreq	r2, [sp, #68]	; 0x44
   13748:	beq	14730 <__assert_fail@plt+0x34f0>
   1374c:	ldr	sl, [sp, #72]	; 0x48
   13750:	str	r3, [sp, #68]	; 0x44
   13754:	ldr	r3, [pc, #1792]	; 13e5c <__assert_fail@plt+0x2c1c>
   13758:	mov	r2, #39	; 0x27
   1375c:	mov	r4, #1
   13760:	str	r3, [sp, #60]	; 0x3c
   13764:	mov	r3, #0
   13768:	strb	r2, [fp]
   1376c:	str	r4, [sp, #52]	; 0x34
   13770:	mov	r8, #2
   13774:	str	r3, [sp, #32]
   13778:	b	13140 <__assert_fail@plt+0x1f00>
   1377c:	mov	r7, #0
   13780:	cmp	fp, #2
   13784:	beq	140bc <__assert_fail@plt+0x2e7c>
   13788:	ldr	r3, [sp, #52]	; 0x34
   1378c:	ldr	r2, [sp, #28]
   13790:	ldr	r1, [sp, #32]
   13794:	cmp	r3, #0
   13798:	andne	r2, r2, r1
   1379c:	moveq	r2, #0
   137a0:	cmp	r2, #0
   137a4:	moveq	r5, #92	; 0x5c
   137a8:	moveq	r3, r5
   137ac:	bne	140c8 <__assert_fail@plt+0x2e88>
   137b0:	ldr	r1, [sp, #28]
   137b4:	cmp	r1, #0
   137b8:	bne	14838 <__assert_fail@plt+0x35f8>
   137bc:	mov	r6, #0
   137c0:	b	135d8 <__assert_fail@plt+0x2398>
   137c4:	mov	r7, #0
   137c8:	cmp	fp, #2
   137cc:	beq	1412c <__assert_fail@plt+0x2eec>
   137d0:	cmp	fp, #5
   137d4:	beq	140f0 <__assert_fail@plt+0x2eb0>
   137d8:	sub	r2, fp, #2
   137dc:	mov	r6, #0
   137e0:	clz	r2, r2
   137e4:	mov	r5, #63	; 0x3f
   137e8:	lsr	r2, r2, #5
   137ec:	b	135d8 <__assert_fail@plt+0x2398>
   137f0:	mov	r7, #0
   137f4:	cmp	fp, #2
   137f8:	strne	r6, [sp, #68]	; 0x44
   137fc:	movne	r2, #0
   13800:	movne	r5, #39	; 0x27
   13804:	bne	135d8 <__assert_fail@plt+0x2398>
   13808:	ldr	r3, [sp, #32]
   1380c:	cmp	r3, #0
   13810:	bne	1450c <__assert_fail@plt+0x32cc>
   13814:	cmp	sl, #0
   13818:	ldr	r3, [sp, #72]	; 0x48
   1381c:	clz	r3, r3
   13820:	lsr	r3, r3, #5
   13824:	moveq	r3, #0
   13828:	cmp	r3, #0
   1382c:	bne	14440 <__assert_fail@plt+0x3200>
   13830:	cmp	sl, r4
   13834:	movhi	r3, #39	; 0x27
   13838:	strbhi	r3, [r8, r4]
   1383c:	add	r3, r4, #1
   13840:	cmp	sl, r3
   13844:	movhi	r2, #92	; 0x5c
   13848:	strbhi	r2, [r8, r3]
   1384c:	add	r3, r4, #2
   13850:	cmp	sl, r3
   13854:	movhi	r2, #39	; 0x27
   13858:	strbhi	r2, [r8, r3]
   1385c:	mov	r3, #0
   13860:	cmp	r7, #0
   13864:	add	r4, r4, #3
   13868:	str	r3, [sp, #44]	; 0x2c
   1386c:	str	r6, [sp, #68]	; 0x44
   13870:	mov	r5, #39	; 0x27
   13874:	bne	13628 <__assert_fail@plt+0x23e8>
   13878:	ldr	r2, [sp, #44]	; 0x2c
   1387c:	eor	r3, r3, #1
   13880:	and	r3, r3, r2
   13884:	add	r9, r9, #1
   13888:	uxtb	r3, r3
   1388c:	cmp	r3, #0
   13890:	beq	13698 <__assert_fail@plt+0x2458>
   13894:	cmp	sl, r4
   13898:	movhi	r3, #39	; 0x27
   1389c:	strbhi	r3, [r8, r4]
   138a0:	add	r3, r4, #1
   138a4:	cmp	sl, r3
   138a8:	movhi	r2, #39	; 0x27
   138ac:	strbhi	r2, [r8, r3]
   138b0:	mov	r3, #0
   138b4:	add	r4, r4, #2
   138b8:	str	r3, [sp, #44]	; 0x2c
   138bc:	b	13698 <__assert_fail@plt+0x2458>
   138c0:	mov	r3, #114	; 0x72
   138c4:	ldr	r1, [sp, #32]
   138c8:	sub	r2, fp, #2
   138cc:	clz	r2, r2
   138d0:	lsr	r2, r2, #5
   138d4:	tst	r2, r1
   138d8:	beq	137b0 <__assert_fail@plt+0x2570>
   138dc:	mov	fp, r8
   138e0:	mov	r8, #2
   138e4:	ldr	r3, [sp, #28]
   138e8:	cmp	r3, #0
   138ec:	movne	r8, #4
   138f0:	ldr	r3, [sp, #164]	; 0xa4
   138f4:	mov	ip, #0
   138f8:	bic	r3, r3, #2
   138fc:	str	r3, [sp, #4]
   13900:	ldr	r3, [sp, #76]	; 0x4c
   13904:	str	r8, [sp]
   13908:	str	r3, [sp, #16]
   1390c:	ldr	r3, [sp, #80]	; 0x50
   13910:	ldr	r2, [sp, #36]	; 0x24
   13914:	str	r3, [sp, #12]
   13918:	mov	r1, sl
   1391c:	ldr	r3, [sp, #24]
   13920:	mov	r0, fp
   13924:	str	ip, [sp, #8]
   13928:	bl	13048 <__assert_fail@plt+0x1e08>
   1392c:	mov	r4, r0
   13930:	ldr	r3, [pc, #1304]	; 13e50 <__assert_fail@plt+0x2c10>
   13934:	ldr	r2, [sp, #116]	; 0x74
   13938:	mov	r0, r4
   1393c:	ldr	r3, [r3]
   13940:	cmp	r2, r3
   13944:	bne	14834 <__assert_fail@plt+0x35f4>
   13948:	add	sp, sp, #124	; 0x7c
   1394c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13950:	mov	r5, #110	; 0x6e
   13954:	ldr	r3, [sp, #32]
   13958:	mov	r2, #0
   1395c:	cmp	r3, #0
   13960:	mov	r6, r2
   13964:	beq	13640 <__assert_fail@plt+0x2400>
   13968:	str	fp, [sp, #160]	; 0xa0
   1396c:	mov	fp, r8
   13970:	ldr	r8, [sp, #160]	; 0xa0
   13974:	mov	r3, r2
   13978:	ldr	r2, [sp, #28]
   1397c:	and	r2, r2, r3
   13980:	str	r2, [sp, #28]
   13984:	b	138e4 <__assert_fail@plt+0x26a4>
   13988:	mov	r5, #116	; 0x74
   1398c:	b	13954 <__assert_fail@plt+0x2714>
   13990:	mov	r5, #102	; 0x66
   13994:	ldr	r3, [sp, #32]
   13998:	cmp	r3, #0
   1399c:	bne	14548 <__assert_fail@plt+0x3308>
   139a0:	mov	r6, #0
   139a4:	b	13684 <__assert_fail@plt+0x2444>
   139a8:	mov	r5, #118	; 0x76
   139ac:	b	13994 <__assert_fail@plt+0x2754>
   139b0:	mov	r7, #0
   139b4:	mov	r6, #0
   139b8:	b	135f4 <__assert_fail@plt+0x23b4>
   139bc:	ldr	r3, [sp, #32]
   139c0:	cmp	r3, #0
   139c4:	bne	1478c <__assert_fail@plt+0x354c>
   139c8:	mov	r7, r3
   139cc:	ldr	r3, [sp, #44]	; 0x2c
   139d0:	sub	r2, fp, #2
   139d4:	eor	r3, r3, #1
   139d8:	clz	r2, r2
   139dc:	lsr	r2, r2, #5
   139e0:	ands	r3, r2, r3
   139e4:	beq	1442c <__assert_fail@plt+0x31ec>
   139e8:	cmp	sl, r4
   139ec:	movhi	r1, #39	; 0x27
   139f0:	strbhi	r1, [r8, r4]
   139f4:	add	r1, r4, #1
   139f8:	cmp	sl, r1
   139fc:	movhi	r0, #36	; 0x24
   13a00:	strbhi	r0, [r8, r1]
   13a04:	add	r1, r4, #2
   13a08:	cmp	sl, r1
   13a0c:	movhi	r0, #39	; 0x27
   13a10:	strbhi	r0, [r8, r1]
   13a14:	add	r1, r4, #3
   13a18:	cmp	sl, r1
   13a1c:	bls	1448c <__assert_fail@plt+0x324c>
   13a20:	mov	r4, r1
   13a24:	mov	r1, #92	; 0x5c
   13a28:	strb	r1, [r8, r4]
   13a2c:	mov	r1, r4
   13a30:	str	r3, [sp, #44]	; 0x2c
   13a34:	cmp	fp, #2
   13a38:	add	r4, r4, #1
   13a3c:	beq	144d4 <__assert_fail@plt+0x3294>
   13a40:	ldr	r0, [sp, #24]
   13a44:	add	r3, r9, #1
   13a48:	cmp	r3, r0
   13a4c:	bcs	13a64 <__assert_fail@plt+0x2824>
   13a50:	ldr	r0, [sp, #36]	; 0x24
   13a54:	ldrb	r3, [r0, r3]
   13a58:	sub	r3, r3, #48	; 0x30
   13a5c:	cmp	r3, #9
   13a60:	bls	144e4 <__assert_fail@plt+0x32a4>
   13a64:	mov	r5, #48	; 0x30
   13a68:	ldr	r3, [sp, #28]
   13a6c:	eor	r3, r3, #1
   13a70:	orrs	r2, r2, r3
   13a74:	mov	r3, r6
   13a78:	moveq	r6, r2
   13a7c:	beq	135f8 <__assert_fail@plt+0x23b8>
   13a80:	mov	r6, #0
   13a84:	b	13620 <__assert_fail@plt+0x23e0>
   13a88:	mov	r2, #0
   13a8c:	mov	r6, r2
   13a90:	mov	r5, #98	; 0x62
   13a94:	b	13640 <__assert_fail@plt+0x2400>
   13a98:	mov	r5, #97	; 0x61
   13a9c:	b	139a0 <__assert_fail@plt+0x2760>
   13aa0:	mov	r3, r7
   13aa4:	mov	r6, r7
   13aa8:	mov	r2, #0
   13aac:	mov	r7, r3
   13ab0:	mov	r5, #32
   13ab4:	b	135d8 <__assert_fail@plt+0x2398>
   13ab8:	cmp	r9, #0
   13abc:	mov	r3, r7
   13ac0:	bne	14088 <__assert_fail@plt+0x2e48>
   13ac4:	mov	r6, r7
   13ac8:	mov	r2, r9
   13acc:	mov	r7, r3
   13ad0:	b	135d8 <__assert_fail@plt+0x2398>
   13ad4:	mov	r6, r7
   13ad8:	b	135f4 <__assert_fail@plt+0x23b4>
   13adc:	mov	r7, #0
   13ae0:	ldr	r3, [sp, #64]	; 0x40
   13ae4:	cmp	r3, #1
   13ae8:	bne	14144 <__assert_fail@plt+0x2f04>
   13aec:	bl	110e4 <__ctype_b_loc@plt>
   13af0:	ldr	r2, [sp, #64]	; 0x40
   13af4:	sxth	r3, r5
   13af8:	mov	ip, r2
   13afc:	lsl	r3, r3, #1
   13b00:	ldr	r2, [r0]
   13b04:	ldrh	r3, [r2, r3]
   13b08:	and	r3, r3, #16384	; 0x4000
   13b0c:	cmp	r3, #0
   13b10:	ldr	r3, [sp, #28]
   13b14:	movne	r6, #1
   13b18:	moveq	r6, #0
   13b1c:	movne	r2, #0
   13b20:	andeq	r2, r3, #1
   13b24:	cmp	r2, #0
   13b28:	bne	14454 <__assert_fail@plt+0x3214>
   13b2c:	sub	r2, fp, #2
   13b30:	clz	r2, r2
   13b34:	lsr	r2, r2, #5
   13b38:	b	135d8 <__assert_fail@plt+0x2398>
   13b3c:	cmp	r4, #0
   13b40:	bne	14800 <__assert_fail@plt+0x35c0>
   13b44:	str	r4, [sp, #28]
   13b48:	cmp	sl, #0
   13b4c:	bne	14844 <__assert_fail@plt+0x3604>
   13b50:	ldr	r3, [pc, #772]	; 13e5c <__assert_fail@plt+0x2c1c>
   13b54:	mov	r4, #1
   13b58:	str	r4, [sp, #40]	; 0x28
   13b5c:	str	r3, [sp, #60]	; 0x3c
   13b60:	str	r4, [sp, #52]	; 0x34
   13b64:	str	sl, [sp, #72]	; 0x48
   13b68:	str	sl, [sp, #68]	; 0x44
   13b6c:	str	sl, [sp, #44]	; 0x2c
   13b70:	str	sl, [sp, #32]
   13b74:	mov	r8, #2
   13b78:	b	13140 <__assert_fail@plt+0x1f00>
   13b7c:	ldr	r3, [sp, #36]	; 0x24
   13b80:	ldrb	r5, [r3, r9]
   13b84:	cmp	r5, #126	; 0x7e
   13b88:	ldrls	pc, [pc, r5, lsl #2]
   13b8c:	b	13ae0 <__assert_fail@plt+0x28a0>
   13b90:	andeq	r3, r1, r4, asr #27
   13b94:	andeq	r3, r1, r0, ror #21
   13b98:	andeq	r3, r1, r0, ror #21
   13b9c:	andeq	r3, r1, r0, ror #21
   13ba0:	andeq	r3, r1, r0, ror #21
   13ba4:	andeq	r3, r1, r0, ror #21
   13ba8:	andeq	r3, r1, r0, ror #21
   13bac:			; <UNDEFINED> instruction: 0x00013db0
   13bb0:	muleq	r1, ip, sp
   13bb4:	muleq	r1, r4, sp
   13bb8:	andeq	r3, r1, ip, lsl #27
   13bbc:	andeq	r3, r1, ip, lsr lr
   13bc0:	andeq	r3, r1, r8, lsr #28
   13bc4:	andeq	r3, r1, r0, asr #17
   13bc8:	andeq	r3, r1, r0, ror #21
   13bcc:	andeq	r3, r1, r0, ror #21
   13bd0:	andeq	r3, r1, r0, ror #21
   13bd4:	andeq	r3, r1, r0, ror #21
   13bd8:	andeq	r3, r1, r0, ror #21
   13bdc:	andeq	r3, r1, r0, ror #21
   13be0:	andeq	r3, r1, r0, ror #21
   13be4:	andeq	r3, r1, r0, ror #21
   13be8:	andeq	r3, r1, r0, ror #21
   13bec:	andeq	r3, r1, r0, ror #21
   13bf0:	andeq	r3, r1, r0, ror #21
   13bf4:	andeq	r3, r1, r0, ror #21
   13bf8:	andeq	r3, r1, r0, ror #21
   13bfc:	andeq	r3, r1, r0, ror #21
   13c00:	andeq	r3, r1, r0, ror #21
   13c04:	andeq	r3, r1, r0, ror #21
   13c08:	andeq	r3, r1, r0, ror #21
   13c0c:	andeq	r3, r1, r0, ror #21
   13c10:	andeq	r3, r1, r8, lsl lr
   13c14:	andeq	r3, r1, r4, lsl #28
   13c18:	andeq	r3, r1, r4, lsl #28
   13c1c:	strdeq	r3, [r1], -r4
   13c20:	andeq	r3, r1, r4, lsl #28
   13c24:	andeq	r3, r1, ip, lsr #22
   13c28:	andeq	r3, r1, r4, lsl #28
   13c2c:	strdeq	r3, [r1], -r4
   13c30:	andeq	r3, r1, r4, lsl #28
   13c34:	andeq	r3, r1, r4, lsl #28
   13c38:	andeq	r3, r1, r4, lsl #28
   13c3c:	andeq	r3, r1, ip, lsr #22
   13c40:	andeq	r3, r1, ip, lsr #22
   13c44:	andeq	r3, r1, ip, lsr #22
   13c48:	andeq	r3, r1, ip, lsr #22
   13c4c:	andeq	r3, r1, ip, lsr #22
   13c50:	andeq	r3, r1, ip, lsr #22
   13c54:	andeq	r3, r1, ip, lsr #22
   13c58:	andeq	r3, r1, ip, lsr #22
   13c5c:	andeq	r3, r1, ip, lsr #22
   13c60:	andeq	r3, r1, ip, lsr #22
   13c64:	andeq	r3, r1, ip, lsr #22
   13c68:	andeq	r3, r1, ip, lsr #22
   13c6c:	andeq	r3, r1, ip, lsr #22
   13c70:	andeq	r3, r1, ip, lsr #22
   13c74:	andeq	r3, r1, ip, lsr #22
   13c78:	andeq	r3, r1, ip, lsr #22
   13c7c:	andeq	r3, r1, r4, lsl #28
   13c80:	andeq	r3, r1, r4, lsl #28
   13c84:	andeq	r3, r1, r4, lsl #28
   13c88:	andeq	r3, r1, r4, lsl #28
   13c8c:	andeq	r3, r1, r8, asr #15
   13c90:	andeq	r3, r1, r0, ror #21
   13c94:	andeq	r3, r1, ip, lsr #22
   13c98:	andeq	r3, r1, ip, lsr #22
   13c9c:	andeq	r3, r1, ip, lsr #22
   13ca0:	andeq	r3, r1, ip, lsr #22
   13ca4:	andeq	r3, r1, ip, lsr #22
   13ca8:	andeq	r3, r1, ip, lsr #22
   13cac:	andeq	r3, r1, ip, lsr #22
   13cb0:	andeq	r3, r1, ip, lsr #22
   13cb4:	andeq	r3, r1, ip, lsr #22
   13cb8:	andeq	r3, r1, ip, lsr #22
   13cbc:	andeq	r3, r1, ip, lsr #22
   13cc0:	andeq	r3, r1, ip, lsr #22
   13cc4:	andeq	r3, r1, ip, lsr #22
   13cc8:	andeq	r3, r1, ip, lsr #22
   13ccc:	andeq	r3, r1, ip, lsr #22
   13cd0:	andeq	r3, r1, ip, lsr #22
   13cd4:	andeq	r3, r1, ip, lsr #22
   13cd8:	andeq	r3, r1, ip, lsr #22
   13cdc:	andeq	r3, r1, ip, lsr #22
   13ce0:	andeq	r3, r1, ip, lsr #22
   13ce4:	andeq	r3, r1, ip, lsr #22
   13ce8:	andeq	r3, r1, ip, lsr #22
   13cec:	andeq	r3, r1, ip, lsr #22
   13cf0:	andeq	r3, r1, ip, lsr #22
   13cf4:	andeq	r3, r1, ip, lsr #22
   13cf8:	andeq	r3, r1, ip, lsr #22
   13cfc:	andeq	r3, r1, r4, lsl #28
   13d00:	andeq	r3, r1, r0, lsl #15
   13d04:	andeq	r3, r1, ip, lsr #22
   13d08:	andeq	r3, r1, r4, lsl #28
   13d0c:	andeq	r3, r1, ip, lsr #22
   13d10:	andeq	r3, r1, r4, lsl #28
   13d14:	andeq	r3, r1, ip, lsr #22
   13d18:	andeq	r3, r1, ip, lsr #22
   13d1c:	andeq	r3, r1, ip, lsr #22
   13d20:	andeq	r3, r1, ip, lsr #22
   13d24:	andeq	r3, r1, ip, lsr #22
   13d28:	andeq	r3, r1, ip, lsr #22
   13d2c:	andeq	r3, r1, ip, lsr #22
   13d30:	andeq	r3, r1, ip, lsr #22
   13d34:	andeq	r3, r1, ip, lsr #22
   13d38:	andeq	r3, r1, ip, lsr #22
   13d3c:	andeq	r3, r1, ip, lsr #22
   13d40:	andeq	r3, r1, ip, lsr #22
   13d44:	andeq	r3, r1, ip, lsr #22
   13d48:	andeq	r3, r1, ip, lsr #22
   13d4c:	andeq	r3, r1, ip, lsr #22
   13d50:	andeq	r3, r1, ip, lsr #22
   13d54:	andeq	r3, r1, ip, lsr #22
   13d58:	andeq	r3, r1, ip, lsr #22
   13d5c:	andeq	r3, r1, ip, lsr #22
   13d60:	andeq	r3, r1, ip, lsr #22
   13d64:	andeq	r3, r1, ip, lsr #22
   13d68:	andeq	r3, r1, ip, lsr #22
   13d6c:	andeq	r3, r1, ip, lsr #22
   13d70:	andeq	r3, r1, ip, lsr #22
   13d74:	andeq	r3, r1, ip, lsr #22
   13d78:	andeq	r3, r1, ip, lsr #22
   13d7c:	muleq	r1, r8, r5
   13d80:	andeq	r3, r1, r4, lsl #28
   13d84:	muleq	r1, r8, r5
   13d88:	strdeq	r3, [r1], -r4
   13d8c:	mov	r3, #110	; 0x6e
   13d90:	b	138c4 <__assert_fail@plt+0x2684>
   13d94:	mov	r3, #116	; 0x74
   13d98:	b	138c4 <__assert_fail@plt+0x2684>
   13d9c:	sub	r2, fp, #2
   13da0:	mov	r3, #98	; 0x62
   13da4:	clz	r2, r2
   13da8:	lsr	r2, r2, #5
   13dac:	b	137b0 <__assert_fail@plt+0x2570>
   13db0:	sub	r2, fp, #2
   13db4:	mov	r3, #97	; 0x61
   13db8:	clz	r2, r2
   13dbc:	lsr	r2, r2, #5
   13dc0:	b	137b0 <__assert_fail@plt+0x2570>
   13dc4:	ldr	r3, [sp, #28]
   13dc8:	cmp	r3, #0
   13dcc:	bne	139bc <__assert_fail@plt+0x277c>
   13dd0:	ldr	r3, [sp, #164]	; 0xa4
   13dd4:	tst	r3, #1
   13dd8:	bne	1444c <__assert_fail@plt+0x320c>
   13ddc:	ldr	r6, [sp, #28]
   13de0:	sub	r2, fp, #2
   13de4:	mov	r7, r6
   13de8:	clz	r2, r2
   13dec:	lsr	r2, r2, #5
   13df0:	b	135d8 <__assert_fail@plt+0x2398>
   13df4:	sub	r2, fp, #2
   13df8:	clz	r2, r2
   13dfc:	lsr	r2, r2, #5
   13e00:	b	135c4 <__assert_fail@plt+0x2384>
   13e04:	sub	r2, fp, #2
   13e08:	mov	r6, #0
   13e0c:	clz	r2, r2
   13e10:	lsr	r2, r2, #5
   13e14:	b	135cc <__assert_fail@plt+0x238c>
   13e18:	sub	r2, fp, #2
   13e1c:	clz	r2, r2
   13e20:	lsr	r2, r2, #5
   13e24:	b	135cc <__assert_fail@plt+0x238c>
   13e28:	sub	r2, fp, #2
   13e2c:	mov	r3, #102	; 0x66
   13e30:	clz	r2, r2
   13e34:	lsr	r2, r2, #5
   13e38:	b	137b0 <__assert_fail@plt+0x2570>
   13e3c:	sub	r2, fp, #2
   13e40:	mov	r3, #118	; 0x76
   13e44:	clz	r2, r2
   13e48:	lsr	r2, r2, #5
   13e4c:	b	137b0 <__assert_fail@plt+0x2570>
   13e50:	andeq	r8, r2, r8, lsl #30
   13e54:	andeq	r8, r1, r4, asr #21
   13e58:	andeq	r8, r1, ip, lsr #21
   13e5c:	andeq	r8, r1, r0, asr #21
   13e60:	ldr	r3, [sp, #48]	; 0x30
   13e64:	ldrb	r5, [r3]
   13e68:	cmp	r5, #126	; 0x7e
   13e6c:	ldrls	pc, [pc, r5, lsl #2]
   13e70:	b	13adc <__assert_fail@plt+0x289c>
   13e74:			; <UNDEFINED> instruction: 0x000139bc
   13e78:	ldrdeq	r3, [r1], -ip
   13e7c:	ldrdeq	r3, [r1], -ip
   13e80:	ldrdeq	r3, [r1], -ip
   13e84:	ldrdeq	r3, [r1], -ip
   13e88:	ldrdeq	r3, [r1], -ip
   13e8c:	ldrdeq	r3, [r1], -ip
   13e90:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e94:	andeq	r4, r1, ip, lsr #1
   13e98:	andeq	r3, r1, r8, lsl #19
   13e9c:	andeq	r3, r1, r0, asr r9
   13ea0:	andeq	r3, r1, r8, lsr #19
   13ea4:	muleq	r1, r0, r9
   13ea8:	andeq	r4, r1, r0, lsr #1
   13eac:	ldrdeq	r3, [r1], -ip
   13eb0:	ldrdeq	r3, [r1], -ip
   13eb4:	ldrdeq	r3, [r1], -ip
   13eb8:	ldrdeq	r3, [r1], -ip
   13ebc:	ldrdeq	r3, [r1], -ip
   13ec0:	ldrdeq	r3, [r1], -ip
   13ec4:	ldrdeq	r3, [r1], -ip
   13ec8:	ldrdeq	r3, [r1], -ip
   13ecc:	ldrdeq	r3, [r1], -ip
   13ed0:	ldrdeq	r3, [r1], -ip
   13ed4:	ldrdeq	r3, [r1], -ip
   13ed8:	ldrdeq	r3, [r1], -ip
   13edc:	ldrdeq	r3, [r1], -ip
   13ee0:	ldrdeq	r3, [r1], -ip
   13ee4:	ldrdeq	r3, [r1], -ip
   13ee8:	ldrdeq	r3, [r1], -ip
   13eec:	ldrdeq	r3, [r1], -ip
   13ef0:	ldrdeq	r3, [r1], -ip
   13ef4:	muleq	r1, r8, r0
   13ef8:			; <UNDEFINED> instruction: 0x000139b0
   13efc:			; <UNDEFINED> instruction: 0x000139b0
   13f00:	andeq	r4, r1, ip, ror r0
   13f04:			; <UNDEFINED> instruction: 0x000139b0
   13f08:	andeq	r4, r1, r0, ror r0
   13f0c:			; <UNDEFINED> instruction: 0x000139b0
   13f10:	strdeq	r3, [r1], -r0
   13f14:			; <UNDEFINED> instruction: 0x000139b0
   13f18:			; <UNDEFINED> instruction: 0x000139b0
   13f1c:			; <UNDEFINED> instruction: 0x000139b0
   13f20:	andeq	r4, r1, r0, ror r0
   13f24:	andeq	r4, r1, r0, ror r0
   13f28:	andeq	r4, r1, r0, ror r0
   13f2c:	andeq	r4, r1, r0, ror r0
   13f30:	andeq	r4, r1, r0, ror r0
   13f34:	andeq	r4, r1, r0, ror r0
   13f38:	andeq	r4, r1, r0, ror r0
   13f3c:	andeq	r4, r1, r0, ror r0
   13f40:	andeq	r4, r1, r0, ror r0
   13f44:	andeq	r4, r1, r0, ror r0
   13f48:	andeq	r4, r1, r0, ror r0
   13f4c:	andeq	r4, r1, r0, ror r0
   13f50:	andeq	r4, r1, r0, ror r0
   13f54:	andeq	r4, r1, r0, ror r0
   13f58:	andeq	r4, r1, r0, ror r0
   13f5c:	andeq	r4, r1, r0, ror r0
   13f60:			; <UNDEFINED> instruction: 0x000139b0
   13f64:			; <UNDEFINED> instruction: 0x000139b0
   13f68:			; <UNDEFINED> instruction: 0x000139b0
   13f6c:			; <UNDEFINED> instruction: 0x000139b0
   13f70:	andeq	r3, r1, r4, asr #15
   13f74:	ldrdeq	r3, [r1], -ip
   13f78:	andeq	r4, r1, r0, ror r0
   13f7c:	andeq	r4, r1, r0, ror r0
   13f80:	andeq	r4, r1, r0, ror r0
   13f84:	andeq	r4, r1, r0, ror r0
   13f88:	andeq	r4, r1, r0, ror r0
   13f8c:	andeq	r4, r1, r0, ror r0
   13f90:	andeq	r4, r1, r0, ror r0
   13f94:	andeq	r4, r1, r0, ror r0
   13f98:	andeq	r4, r1, r0, ror r0
   13f9c:	andeq	r4, r1, r0, ror r0
   13fa0:	andeq	r4, r1, r0, ror r0
   13fa4:	andeq	r4, r1, r0, ror r0
   13fa8:	andeq	r4, r1, r0, ror r0
   13fac:	andeq	r4, r1, r0, ror r0
   13fb0:	andeq	r4, r1, r0, ror r0
   13fb4:	andeq	r4, r1, r0, ror r0
   13fb8:	andeq	r4, r1, r0, ror r0
   13fbc:	andeq	r4, r1, r0, ror r0
   13fc0:	andeq	r4, r1, r0, ror r0
   13fc4:	andeq	r4, r1, r0, ror r0
   13fc8:	andeq	r4, r1, r0, ror r0
   13fcc:	andeq	r4, r1, r0, ror r0
   13fd0:	andeq	r4, r1, r0, ror r0
   13fd4:	andeq	r4, r1, r0, ror r0
   13fd8:	andeq	r4, r1, r0, ror r0
   13fdc:	andeq	r4, r1, r0, ror r0
   13fe0:			; <UNDEFINED> instruction: 0x000139b0
   13fe4:	andeq	r3, r1, ip, ror r7
   13fe8:	andeq	r4, r1, r0, ror r0
   13fec:			; <UNDEFINED> instruction: 0x000139b0
   13ff0:	andeq	r4, r1, r0, ror r0
   13ff4:			; <UNDEFINED> instruction: 0x000139b0
   13ff8:	andeq	r4, r1, r0, ror r0
   13ffc:	andeq	r4, r1, r0, ror r0
   14000:	andeq	r4, r1, r0, ror r0
   14004:	andeq	r4, r1, r0, ror r0
   14008:	andeq	r4, r1, r0, ror r0
   1400c:	andeq	r4, r1, r0, ror r0
   14010:	andeq	r4, r1, r0, ror r0
   14014:	andeq	r4, r1, r0, ror r0
   14018:	andeq	r4, r1, r0, ror r0
   1401c:	andeq	r4, r1, r0, ror r0
   14020:	andeq	r4, r1, r0, ror r0
   14024:	andeq	r4, r1, r0, ror r0
   14028:	andeq	r4, r1, r0, ror r0
   1402c:	andeq	r4, r1, r0, ror r0
   14030:	andeq	r4, r1, r0, ror r0
   14034:	andeq	r4, r1, r0, ror r0
   14038:	andeq	r4, r1, r0, ror r0
   1403c:	andeq	r4, r1, r0, ror r0
   14040:	andeq	r4, r1, r0, ror r0
   14044:	andeq	r4, r1, r0, ror r0
   14048:	andeq	r4, r1, r0, ror r0
   1404c:	andeq	r4, r1, r0, ror r0
   14050:	andeq	r4, r1, r0, ror r0
   14054:	andeq	r4, r1, r0, ror r0
   14058:	andeq	r4, r1, r0, ror r0
   1405c:	andeq	r4, r1, r0, ror r0
   14060:	muleq	r1, r4, r5
   14064:			; <UNDEFINED> instruction: 0x000139b0
   14068:	muleq	r1, r4, r5
   1406c:	andeq	r4, r1, ip, ror r0
   14070:	mov	r6, r7
   14074:	mov	r7, #0
   14078:	b	135f4 <__assert_fail@plt+0x23b4>
   1407c:	cmp	r9, #0
   14080:	mov	r3, #0
   14084:	beq	13ac4 <__assert_fail@plt+0x2884>
   14088:	mov	r6, #0
   1408c:	mov	r7, r3
   14090:	mov	r3, r6
   14094:	b	135f8 <__assert_fail@plt+0x23b8>
   14098:	mov	r3, #0
   1409c:	b	13aa4 <__assert_fail@plt+0x2864>
   140a0:	mov	r7, #0
   140a4:	mov	r3, #114	; 0x72
   140a8:	b	138c4 <__assert_fail@plt+0x2684>
   140ac:	mov	r5, #98	; 0x62
   140b0:	b	13954 <__assert_fail@plt+0x2714>
   140b4:	mov	r5, #97	; 0x61
   140b8:	b	13994 <__assert_fail@plt+0x2754>
   140bc:	ldr	r3, [sp, #32]
   140c0:	cmp	r3, #0
   140c4:	bne	1450c <__assert_fail@plt+0x32cc>
   140c8:	add	r9, r9, #1
   140cc:	ldr	r3, [sp, #44]	; 0x2c
   140d0:	mov	r6, #0
   140d4:	mov	r5, #92	; 0x5c
   140d8:	b	1388c <__assert_fail@plt+0x264c>
   140dc:	ldr	r3, [sp, #36]	; 0x24
   140e0:	ldrb	r3, [r3, #1]
   140e4:	adds	r3, r3, #0
   140e8:	movne	r3, #1
   140ec:	b	135b0 <__assert_fail@plt+0x2370>
   140f0:	ldr	r3, [sp, #164]	; 0xa4
   140f4:	ands	r3, r3, #4
   140f8:	beq	1411c <__assert_fail@plt+0x2edc>
   140fc:	ldr	r2, [sp, #24]
   14100:	add	r3, r9, #2
   14104:	cmp	r3, r2
   14108:	bcs	1411c <__assert_fail@plt+0x2edc>
   1410c:	ldr	r2, [sp, #48]	; 0x30
   14110:	ldrb	r5, [r2, #1]
   14114:	cmp	r5, #63	; 0x3f
   14118:	beq	14580 <__assert_fail@plt+0x3340>
   1411c:	mov	r2, #0
   14120:	mov	r6, r2
   14124:	mov	r5, #63	; 0x3f
   14128:	b	135d8 <__assert_fail@plt+0x2398>
   1412c:	ldr	r3, [sp, #32]
   14130:	cmp	r3, #0
   14134:	bne	1450c <__assert_fail@plt+0x32cc>
   14138:	mov	r6, r3
   1413c:	mov	r5, #63	; 0x3f
   14140:	b	13620 <__assert_fail@plt+0x23e0>
   14144:	ldr	r3, [sp, #24]
   14148:	cmn	r3, #1
   1414c:	mov	r3, #0
   14150:	str	r3, [sp, #108]	; 0x6c
   14154:	str	r3, [sp, #112]	; 0x70
   14158:	bne	14168 <__assert_fail@plt+0x2f28>
   1415c:	ldr	r0, [sp, #36]	; 0x24
   14160:	bl	11108 <strlen@plt>
   14164:	str	r0, [sp, #24]
   14168:	mov	r3, #0
   1416c:	str	sl, [sp, #88]	; 0x58
   14170:	ldr	sl, [sp, #36]	; 0x24
   14174:	str	r5, [sp, #92]	; 0x5c
   14178:	mov	r5, r3
   1417c:	str	r7, [sp, #96]	; 0x60
   14180:	str	r4, [sp, #100]	; 0x64
   14184:	str	r8, [sp, #84]	; 0x54
   14188:	ldr	r3, [sp, #24]
   1418c:	add	r4, r9, r5
   14190:	add	r7, sl, r4
   14194:	sub	r2, r3, r4
   14198:	mov	r1, r7
   1419c:	add	r3, sp, #108	; 0x6c
   141a0:	add	r0, sp, #104	; 0x68
   141a4:	bl	158d4 <__assert_fail@plt+0x4694>
   141a8:	subs	r8, r0, #0
   141ac:	beq	141fc <__assert_fail@plt+0x2fbc>
   141b0:	cmn	r8, #1
   141b4:	beq	1455c <__assert_fail@plt+0x331c>
   141b8:	cmn	r8, #2
   141bc:	beq	1467c <__assert_fail@plt+0x343c>
   141c0:	ldr	r3, [sp, #32]
   141c4:	cmp	fp, #2
   141c8:	movne	r3, #0
   141cc:	andeq	r3, r3, #1
   141d0:	cmp	r3, #0
   141d4:	bne	1435c <__assert_fail@plt+0x311c>
   141d8:	ldr	r0, [sp, #104]	; 0x68
   141dc:	bl	11018 <iswprint@plt>
   141e0:	add	r5, r5, r8
   141e4:	cmp	r0, #0
   141e8:	add	r0, sp, #108	; 0x6c
   141ec:	moveq	r6, #0
   141f0:	bl	10fac <mbsinit@plt>
   141f4:	cmp	r0, #0
   141f8:	beq	14188 <__assert_fail@plt+0x2f48>
   141fc:	ldr	r3, [sp, #28]
   14200:	mov	ip, r5
   14204:	eor	r2, r6, #1
   14208:	ldr	r5, [sp, #92]	; 0x5c
   1420c:	ldr	r7, [sp, #96]	; 0x60
   14210:	ldr	r4, [sp, #100]	; 0x64
   14214:	ldr	r8, [sp, #84]	; 0x54
   14218:	ldr	sl, [sp, #88]	; 0x58
   1421c:	and	r2, r2, r3
   14220:	cmp	ip, #1
   14224:	bls	13b24 <__assert_fail@plt+0x28e4>
   14228:	add	r1, ip, r9
   1422c:	ldr	lr, [sp, #48]	; 0x30
   14230:	mov	r0, #0
   14234:	str	r6, [sp, #48]	; 0x30
   14238:	mov	ip, #39	; 0x27
   1423c:	ldr	r6, [sp, #44]	; 0x2c
   14240:	b	142f8 <__assert_fail@plt+0x30b8>
   14244:	ldr	r0, [sp, #32]
   14248:	sub	r3, fp, #2
   1424c:	cmp	r0, #0
   14250:	clz	r3, r3
   14254:	lsr	r3, r3, #5
   14258:	bne	14460 <__assert_fail@plt+0x3220>
   1425c:	eor	r0, r6, #1
   14260:	ands	r3, r3, r0
   14264:	beq	14294 <__assert_fail@plt+0x3054>
   14268:	add	r0, r4, #1
   1426c:	cmp	sl, r4
   14270:	strbhi	ip, [r8, r4]
   14274:	cmp	sl, r0
   14278:	movhi	r6, #36	; 0x24
   1427c:	strbhi	r6, [r8, r0]
   14280:	add	r0, r4, #2
   14284:	mov	r6, r3
   14288:	add	r4, r4, #3
   1428c:	cmp	sl, r0
   14290:	strbhi	ip, [r8, r0]
   14294:	cmp	sl, r4
   14298:	movhi	r3, #92	; 0x5c
   1429c:	strbhi	r3, [r8, r4]
   142a0:	add	r3, r4, #1
   142a4:	cmp	sl, r3
   142a8:	lsrhi	r0, r5, #6
   142ac:	addhi	r0, r0, #48	; 0x30
   142b0:	strbhi	r0, [r8, r3]
   142b4:	add	r0, r4, #2
   142b8:	cmp	sl, r0
   142bc:	lsrhi	r3, r5, #3
   142c0:	andhi	r3, r3, #7
   142c4:	addhi	r3, r3, #48	; 0x30
   142c8:	add	r9, r9, #1
   142cc:	strbhi	r3, [r8, r0]
   142d0:	and	r5, r5, #7
   142d4:	cmp	r9, r1
   142d8:	add	r5, r5, #48	; 0x30
   142dc:	add	r4, r4, #3
   142e0:	bcs	14480 <__assert_fail@plt+0x3240>
   142e4:	mov	r0, r2
   142e8:	cmp	sl, r4
   142ec:	strbhi	r5, [r8, r4]
   142f0:	ldrb	r5, [lr, #1]!
   142f4:	add	r4, r4, #1
   142f8:	cmp	r2, #0
   142fc:	bne	14244 <__assert_fail@plt+0x3004>
   14300:	eor	r3, r0, #1
   14304:	and	r3, r3, r6
   14308:	cmp	r7, #0
   1430c:	uxtb	r3, r3
   14310:	beq	14324 <__assert_fail@plt+0x30e4>
   14314:	cmp	sl, r4
   14318:	movhi	r7, #92	; 0x5c
   1431c:	strbhi	r7, [r8, r4]
   14320:	add	r4, r4, #1
   14324:	add	r9, r9, #1
   14328:	cmp	r9, r1
   1432c:	bcs	14474 <__assert_fail@plt+0x3234>
   14330:	cmp	r3, #0
   14334:	beq	144a0 <__assert_fail@plt+0x3260>
   14338:	cmp	sl, r4
   1433c:	add	r3, r4, #1
   14340:	strbhi	ip, [r8, r4]
   14344:	mov	r7, #0
   14348:	cmp	sl, r3
   1434c:	strbhi	ip, [r8, r3]
   14350:	add	r4, r4, #2
   14354:	mov	r6, r7
   14358:	b	142e8 <__assert_fail@plt+0x30a8>
   1435c:	cmp	r8, #1
   14360:	beq	141d8 <__assert_fail@plt+0x2f98>
   14364:	add	r1, r4, #1
   14368:	add	r3, sl, r8
   1436c:	add	r1, sl, r1
   14370:	add	r4, r3, r4
   14374:	ldrb	r3, [r1], #1
   14378:	sub	r3, r3, #91	; 0x5b
   1437c:	cmp	r3, #33	; 0x21
   14380:	ldrls	pc, [pc, r3, lsl #2]
   14384:	b	14410 <__assert_fail@plt+0x31d0>
   14388:	andeq	r4, r1, ip, lsl r4
   1438c:	andeq	r4, r1, ip, lsl r4
   14390:	andeq	r4, r1, r0, lsl r4
   14394:	andeq	r4, r1, ip, lsl r4
   14398:	andeq	r4, r1, r0, lsl r4
   1439c:	andeq	r4, r1, ip, lsl r4
   143a0:	andeq	r4, r1, r0, lsl r4
   143a4:	andeq	r4, r1, r0, lsl r4
   143a8:	andeq	r4, r1, r0, lsl r4
   143ac:	andeq	r4, r1, r0, lsl r4
   143b0:	andeq	r4, r1, r0, lsl r4
   143b4:	andeq	r4, r1, r0, lsl r4
   143b8:	andeq	r4, r1, r0, lsl r4
   143bc:	andeq	r4, r1, r0, lsl r4
   143c0:	andeq	r4, r1, r0, lsl r4
   143c4:	andeq	r4, r1, r0, lsl r4
   143c8:	andeq	r4, r1, r0, lsl r4
   143cc:	andeq	r4, r1, r0, lsl r4
   143d0:	andeq	r4, r1, r0, lsl r4
   143d4:	andeq	r4, r1, r0, lsl r4
   143d8:	andeq	r4, r1, r0, lsl r4
   143dc:	andeq	r4, r1, r0, lsl r4
   143e0:	andeq	r4, r1, r0, lsl r4
   143e4:	andeq	r4, r1, r0, lsl r4
   143e8:	andeq	r4, r1, r0, lsl r4
   143ec:	andeq	r4, r1, r0, lsl r4
   143f0:	andeq	r4, r1, r0, lsl r4
   143f4:	andeq	r4, r1, r0, lsl r4
   143f8:	andeq	r4, r1, r0, lsl r4
   143fc:	andeq	r4, r1, r0, lsl r4
   14400:	andeq	r4, r1, r0, lsl r4
   14404:	andeq	r4, r1, r0, lsl r4
   14408:	andeq	r4, r1, r0, lsl r4
   1440c:	andeq	r4, r1, ip, lsl r4
   14410:	cmp	r4, r1
   14414:	bne	14374 <__assert_fail@plt+0x3134>
   14418:	b	141d8 <__assert_fail@plt+0x2f98>
   1441c:	ldr	fp, [sp, #84]	; 0x54
   14420:	ldr	sl, [sp, #88]	; 0x58
   14424:	mov	r8, #2
   14428:	b	138e4 <__assert_fail@plt+0x26a4>
   1442c:	cmp	sl, r4
   14430:	movls	r1, r4
   14434:	bls	13a34 <__assert_fail@plt+0x27f4>
   14438:	ldr	r3, [sp, #44]	; 0x2c
   1443c:	b	13a24 <__assert_fail@plt+0x27e4>
   14440:	str	sl, [sp, #72]	; 0x48
   14444:	ldr	sl, [sp, #32]
   14448:	b	1385c <__assert_fail@plt+0x261c>
   1444c:	add	r9, r9, #1
   14450:	b	13150 <__assert_fail@plt+0x1f10>
   14454:	ldr	r2, [sp, #28]
   14458:	mov	r6, #0
   1445c:	b	14228 <__assert_fail@plt+0x2fe8>
   14460:	str	fp, [sp, #160]	; 0xa0
   14464:	str	r3, [sp, #28]
   14468:	mov	fp, r8
   1446c:	ldr	r8, [sp, #160]	; 0xa0
   14470:	b	138e4 <__assert_fail@plt+0x26a4>
   14474:	str	r6, [sp, #44]	; 0x2c
   14478:	ldr	r6, [sp, #48]	; 0x30
   1447c:	b	1388c <__assert_fail@plt+0x264c>
   14480:	str	r6, [sp, #44]	; 0x2c
   14484:	ldr	r6, [sp, #48]	; 0x30
   14488:	b	13698 <__assert_fail@plt+0x2458>
   1448c:	add	r4, r4, #4
   14490:	str	r3, [sp, #44]	; 0x2c
   14494:	mov	r6, #0
   14498:	mov	r5, #48	; 0x30
   1449c:	b	13620 <__assert_fail@plt+0x23e0>
   144a0:	mov	r7, r3
   144a4:	b	142e8 <__assert_fail@plt+0x30a8>
   144a8:	ldr	r3, [pc, #-1624]	; 13e58 <__assert_fail@plt+0x2c18>
   144ac:	mov	r4, #1
   144b0:	str	r4, [sp, #40]	; 0x28
   144b4:	str	r4, [sp, #28]
   144b8:	str	r4, [sp, #52]	; 0x34
   144bc:	str	sl, [sp, #72]	; 0x48
   144c0:	str	sl, [sp, #68]	; 0x44
   144c4:	str	sl, [sp, #44]	; 0x2c
   144c8:	str	sl, [sp, #32]
   144cc:	str	r3, [sp, #60]	; 0x3c
   144d0:	b	13140 <__assert_fail@plt+0x1f00>
   144d4:	mov	r3, r6
   144d8:	mov	r5, #48	; 0x30
   144dc:	mov	r6, #0
   144e0:	b	13620 <__assert_fail@plt+0x23e0>
   144e4:	cmp	sl, r4
   144e8:	movhi	r3, #48	; 0x30
   144ec:	strbhi	r3, [r8, r4]
   144f0:	add	r3, r1, #2
   144f4:	cmp	sl, r3
   144f8:	movhi	r0, #48	; 0x30
   144fc:	strbhi	r0, [r8, r3]
   14500:	add	r4, r1, #3
   14504:	mov	r5, #48	; 0x30
   14508:	b	13a68 <__assert_fail@plt+0x2828>
   1450c:	str	fp, [sp, #160]	; 0xa0
   14510:	mov	fp, r8
   14514:	ldr	r8, [sp, #160]	; 0xa0
   14518:	b	138e4 <__assert_fail@plt+0x26a4>
   1451c:	ldr	r2, [sp, #80]	; 0x50
   14520:	ldrb	r3, [r2]
   14524:	cmp	r3, #0
   14528:	beq	13110 <__assert_fail@plt+0x1ed0>
   1452c:	cmp	sl, r4
   14530:	strbhi	r3, [fp, r4]
   14534:	ldrb	r3, [r2, #1]!
   14538:	add	r4, r4, #1
   1453c:	cmp	r3, #0
   14540:	bne	1452c <__assert_fail@plt+0x32ec>
   14544:	b	13110 <__assert_fail@plt+0x1ed0>
   14548:	str	fp, [sp, #160]	; 0xa0
   1454c:	mov	r3, #0
   14550:	mov	fp, r8
   14554:	ldr	r8, [sp, #160]	; 0xa0
   14558:	b	13978 <__assert_fail@plt+0x2738>
   1455c:	mov	ip, r5
   14560:	ldr	r7, [sp, #96]	; 0x60
   14564:	ldr	r5, [sp, #92]	; 0x5c
   14568:	ldr	r4, [sp, #100]	; 0x64
   1456c:	ldr	r8, [sp, #84]	; 0x54
   14570:	ldr	sl, [sp, #88]	; 0x58
   14574:	ldr	r2, [sp, #28]
   14578:	mov	r6, #0
   1457c:	b	14220 <__assert_fail@plt+0x2fe0>
   14580:	ldr	r2, [sp, #36]	; 0x24
   14584:	ldrb	r1, [r2, r3]
   14588:	sub	r2, r1, #33	; 0x21
   1458c:	cmp	r2, #29
   14590:	ldrls	pc, [pc, r2, lsl #2]
   14594:	b	14670 <__assert_fail@plt+0x3430>
   14598:	andeq	r4, r1, r0, lsl r6
   1459c:	andeq	r4, r1, r0, ror r6
   145a0:	andeq	r4, r1, r0, ror r6
   145a4:	andeq	r4, r1, r0, ror r6
   145a8:	andeq	r4, r1, r0, ror r6
   145ac:	andeq	r4, r1, r0, ror r6
   145b0:	andeq	r4, r1, r0, lsl r6
   145b4:	andeq	r4, r1, r0, lsl r6
   145b8:	andeq	r4, r1, r0, lsl r6
   145bc:	andeq	r4, r1, r0, ror r6
   145c0:	andeq	r4, r1, r0, ror r6
   145c4:	andeq	r4, r1, r0, ror r6
   145c8:	andeq	r4, r1, r0, lsl r6
   145cc:	andeq	r4, r1, r0, ror r6
   145d0:	andeq	r4, r1, r0, lsl r6
   145d4:	andeq	r4, r1, r0, ror r6
   145d8:	andeq	r4, r1, r0, ror r6
   145dc:	andeq	r4, r1, r0, ror r6
   145e0:	andeq	r4, r1, r0, ror r6
   145e4:	andeq	r4, r1, r0, ror r6
   145e8:	andeq	r4, r1, r0, ror r6
   145ec:	andeq	r4, r1, r0, ror r6
   145f0:	andeq	r4, r1, r0, ror r6
   145f4:	andeq	r4, r1, r0, ror r6
   145f8:	andeq	r4, r1, r0, ror r6
   145fc:	andeq	r4, r1, r0, ror r6
   14600:	andeq	r4, r1, r0, ror r6
   14604:	andeq	r4, r1, r0, lsl r6
   14608:	andeq	r4, r1, r0, lsl r6
   1460c:	andeq	r4, r1, r0, lsl r6
   14610:	ldr	r2, [sp, #32]
   14614:	cmp	r2, #0
   14618:	bne	1471c <__assert_fail@plt+0x34dc>
   1461c:	cmp	sl, r4
   14620:	movhi	r2, #63	; 0x3f
   14624:	strbhi	r2, [r8, r4]
   14628:	add	r2, r4, #1
   1462c:	cmp	sl, r2
   14630:	movhi	r0, #34	; 0x22
   14634:	strbhi	r0, [r8, r2]
   14638:	add	r2, r4, #2
   1463c:	cmp	sl, r2
   14640:	movhi	r0, #34	; 0x22
   14644:	strbhi	r0, [r8, r2]
   14648:	add	r2, r4, #3
   1464c:	cmp	sl, r2
   14650:	movhi	r0, #63	; 0x3f
   14654:	strbhi	r0, [r8, r2]
   14658:	mov	r2, #0
   1465c:	add	r4, r4, #4
   14660:	mov	r5, r1
   14664:	mov	r9, r3
   14668:	mov	r6, r2
   1466c:	b	13a68 <__assert_fail@plt+0x2828>
   14670:	mov	r2, #0
   14674:	mov	r6, r2
   14678:	b	135d8 <__assert_fail@plt+0x2398>
   1467c:	ldr	r0, [sp, #24]
   14680:	mov	r1, r4
   14684:	cmp	r1, r0
   14688:	mov	r2, r7
   1468c:	mov	r3, r5
   14690:	mov	ip, r5
   14694:	ldr	r7, [sp, #96]	; 0x60
   14698:	ldr	r5, [sp, #92]	; 0x5c
   1469c:	ldr	r4, [sp, #100]	; 0x64
   146a0:	ldr	r8, [sp, #84]	; 0x54
   146a4:	ldr	sl, [sp, #88]	; 0x58
   146a8:	bcs	146dc <__assert_fail@plt+0x349c>
   146ac:	ldrb	r6, [r2]
   146b0:	cmp	r6, #0
   146b4:	bne	146c8 <__assert_fail@plt+0x3488>
   146b8:	b	147f8 <__assert_fail@plt+0x35b8>
   146bc:	ldrb	r6, [r2, #1]!
   146c0:	cmp	r6, #0
   146c4:	beq	14780 <__assert_fail@plt+0x3540>
   146c8:	add	r3, r3, #1
   146cc:	add	r1, r9, r3
   146d0:	cmp	r1, r0
   146d4:	bcc	146bc <__assert_fail@plt+0x347c>
   146d8:	mov	ip, r3
   146dc:	ldr	r2, [sp, #28]
   146e0:	mov	r6, #0
   146e4:	b	14220 <__assert_fail@plt+0x2fe0>
   146e8:	mov	r3, #1
   146ec:	str	r3, [sp, #40]	; 0x28
   146f0:	str	r3, [sp, #32]
   146f4:	str	r3, [sp, #28]
   146f8:	str	r3, [sp, #52]	; 0x34
   146fc:	ldr	r3, [pc, #-2220]	; 13e58 <__assert_fail@plt+0x2c18>
   14700:	mov	r2, #0
   14704:	str	r2, [sp, #68]	; 0x44
   14708:	str	r2, [sp, #44]	; 0x2c
   1470c:	str	r2, [sp, #72]	; 0x48
   14710:	mov	r4, r2
   14714:	str	r3, [sp, #60]	; 0x3c
   14718:	b	13140 <__assert_fail@plt+0x1f00>
   1471c:	str	fp, [sp, #160]	; 0xa0
   14720:	mov	fp, r8
   14724:	ldr	r8, [sp, #160]	; 0xa0
   14728:	b	138f0 <__assert_fail@plt+0x26b0>
   1472c:	mov	r2, r3
   14730:	ldr	r3, [sp, #60]	; 0x3c
   14734:	cmp	r3, #0
   14738:	moveq	r2, #0
   1473c:	andne	r2, r2, #1
   14740:	cmp	r2, #0
   14744:	beq	14770 <__assert_fail@plt+0x3530>
   14748:	mov	r2, r3
   1474c:	ldrb	r3, [r3]
   14750:	cmp	r3, #0
   14754:	beq	14770 <__assert_fail@plt+0x3530>
   14758:	cmp	sl, r4
   1475c:	strbhi	r3, [fp, r4]
   14760:	ldrb	r3, [r2, #1]!
   14764:	add	r4, r4, #1
   14768:	cmp	r3, #0
   1476c:	bne	14758 <__assert_fail@plt+0x3518>
   14770:	cmp	sl, r4
   14774:	movhi	r3, #0
   14778:	strbhi	r3, [fp, r4]
   1477c:	b	13930 <__assert_fail@plt+0x26f0>
   14780:	mov	ip, r3
   14784:	ldr	r2, [sp, #28]
   14788:	b	14220 <__assert_fail@plt+0x2fe0>
   1478c:	str	fp, [sp, #160]	; 0xa0
   14790:	mov	fp, r8
   14794:	ldr	r8, [sp, #160]	; 0xa0
   14798:	sub	r3, r8, #2
   1479c:	clz	r3, r3
   147a0:	lsr	r3, r3, #5
   147a4:	str	r3, [sp, #28]
   147a8:	b	138e4 <__assert_fail@plt+0x26a4>
   147ac:	ldr	r3, [sp, #76]	; 0x4c
   147b0:	mov	ip, #5
   147b4:	str	r3, [sp, #16]
   147b8:	ldr	r3, [sp, #80]	; 0x50
   147bc:	ldr	r2, [sp, #36]	; 0x24
   147c0:	str	r3, [sp, #12]
   147c4:	ldr	r3, [sp, #56]	; 0x38
   147c8:	ldr	r1, [sp, #72]	; 0x48
   147cc:	str	r3, [sp, #8]
   147d0:	ldr	r3, [sp, #164]	; 0xa4
   147d4:	mov	r0, fp
   147d8:	str	r3, [sp, #4]
   147dc:	str	ip, [sp]
   147e0:	ldr	r3, [sp, #24]
   147e4:	bl	13048 <__assert_fail@plt+0x1e08>
   147e8:	mov	r4, r0
   147ec:	b	13930 <__assert_fail@plt+0x26f0>
   147f0:	mov	r8, #2
   147f4:	b	138e4 <__assert_fail@plt+0x26a4>
   147f8:	ldr	r2, [sp, #28]
   147fc:	b	14220 <__assert_fail@plt+0x2fe0>
   14800:	mov	r3, #0
   14804:	str	r3, [sp, #68]	; 0x44
   14808:	str	r3, [sp, #44]	; 0x2c
   1480c:	str	r3, [sp, #72]	; 0x48
   14810:	str	r3, [sp, #28]
   14814:	mov	r4, r3
   14818:	ldr	r3, [pc, #-2500]	; 13e5c <__assert_fail@plt+0x2c1c>
   1481c:	mov	r2, #1
   14820:	str	r2, [sp, #40]	; 0x28
   14824:	str	r2, [sp, #32]
   14828:	str	r2, [sp, #52]	; 0x34
   1482c:	str	r3, [sp, #60]	; 0x3c
   14830:	b	13140 <__assert_fail@plt+0x1f00>
   14834:	bl	10ff4 <__stack_chk_fail@plt>
   14838:	mov	r5, r3
   1483c:	mov	r6, #0
   14840:	b	13634 <__assert_fail@plt+0x23f4>
   14844:	mov	r3, #0
   14848:	mov	r2, #1
   1484c:	str	r3, [sp, #44]	; 0x2c
   14850:	str	r3, [sp, #72]	; 0x48
   14854:	str	r2, [sp, #40]	; 0x28
   14858:	b	13750 <__assert_fail@plt+0x2510>
   1485c:	bl	1121c <abort@plt>
   14860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14864:	sub	sp, sp, #44	; 0x2c
   14868:	mov	r6, r0
   1486c:	mov	r4, r3
   14870:	mov	sl, r1
   14874:	mov	fp, r2
   14878:	bl	11120 <__errno_location@plt>
   1487c:	ldr	r7, [pc, #364]	; 149f0 <__assert_fail@plt+0x37b0>
   14880:	cmp	r6, #0
   14884:	ldr	r5, [r7]
   14888:	ldr	r3, [r0]
   1488c:	str	r3, [sp, #24]
   14890:	blt	149ec <__assert_fail@plt+0x37ac>
   14894:	ldr	r3, [r7, #4]
   14898:	mov	r8, r0
   1489c:	cmp	r3, r6
   148a0:	bgt	148ec <__assert_fail@plt+0x36ac>
   148a4:	cmn	r6, #-268435454	; 0xf0000002
   148a8:	bgt	149e8 <__assert_fail@plt+0x37a8>
   148ac:	add	r9, r6, #1
   148b0:	add	r3, r7, #8
   148b4:	cmp	r5, r3
   148b8:	lsl	r1, r9, #3
   148bc:	beq	149c8 <__assert_fail@plt+0x3788>
   148c0:	mov	r0, r5
   148c4:	bl	15654 <__assert_fail@plt+0x4414>
   148c8:	mov	r5, r0
   148cc:	str	r0, [r7]
   148d0:	ldr	r0, [r7, #4]
   148d4:	mov	r1, #0
   148d8:	sub	r2, r9, r0
   148dc:	add	r0, r5, r0, lsl #3
   148e0:	lsl	r2, r2, #3
   148e4:	bl	11144 <memset@plt>
   148e8:	str	r9, [r7, #4]
   148ec:	add	r3, r5, r6, lsl #3
   148f0:	ldr	r1, [r4, #4]
   148f4:	ldr	r7, [r3, #4]
   148f8:	ldr	r9, [r5, r6, lsl #3]
   148fc:	ldr	r2, [r4, #40]	; 0x28
   14900:	ldr	ip, [r4, #44]	; 0x2c
   14904:	str	r3, [sp, #28]
   14908:	ldr	r3, [r4]
   1490c:	orr	r1, r1, #1
   14910:	add	lr, r4, #8
   14914:	str	r1, [sp, #36]	; 0x24
   14918:	str	r1, [sp, #4]
   1491c:	str	r2, [sp, #12]
   14920:	str	r3, [sp]
   14924:	mov	r0, r7
   14928:	mov	r1, r9
   1492c:	str	ip, [sp, #16]
   14930:	str	lr, [sp, #8]
   14934:	mov	r3, fp
   14938:	mov	r2, sl
   1493c:	str	lr, [sp, #32]
   14940:	bl	13048 <__assert_fail@plt+0x1e08>
   14944:	cmp	r9, r0
   14948:	bhi	149b4 <__assert_fail@plt+0x3774>
   1494c:	ldr	r3, [pc, #160]	; 149f4 <__assert_fail@plt+0x37b4>
   14950:	add	r9, r0, #1
   14954:	cmp	r7, r3
   14958:	str	r9, [r5, r6, lsl #3]
   1495c:	beq	14968 <__assert_fail@plt+0x3728>
   14960:	mov	r0, r7
   14964:	bl	10f7c <free@plt>
   14968:	mov	r0, r9
   1496c:	bl	155f8 <__assert_fail@plt+0x43b8>
   14970:	ldr	lr, [sp, #28]
   14974:	ldr	ip, [r4, #44]	; 0x2c
   14978:	ldr	r5, [r4, #40]	; 0x28
   1497c:	mov	r3, fp
   14980:	mov	r2, sl
   14984:	mov	r1, r9
   14988:	str	r0, [lr, #4]
   1498c:	ldr	lr, [r4]
   14990:	ldr	r4, [sp, #32]
   14994:	str	ip, [sp, #16]
   14998:	str	r4, [sp, #8]
   1499c:	ldr	r4, [sp, #36]	; 0x24
   149a0:	str	r5, [sp, #12]
   149a4:	str	r4, [sp, #4]
   149a8:	str	lr, [sp]
   149ac:	mov	r7, r0
   149b0:	bl	13048 <__assert_fail@plt+0x1e08>
   149b4:	ldr	r3, [sp, #24]
   149b8:	mov	r0, r7
   149bc:	str	r3, [r8]
   149c0:	add	sp, sp, #44	; 0x2c
   149c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c8:	mov	r0, #0
   149cc:	bl	15654 <__assert_fail@plt+0x4414>
   149d0:	ldr	r3, [pc, #32]	; 149f8 <__assert_fail@plt+0x37b8>
   149d4:	mov	r5, r0
   149d8:	ldm	r3, {r0, r1}
   149dc:	str	r5, [r7]
   149e0:	stm	r5, {r0, r1}
   149e4:	b	148d0 <__assert_fail@plt+0x3690>
   149e8:	bl	15840 <__assert_fail@plt+0x4600>
   149ec:	bl	1121c <abort@plt>
   149f0:	andeq	r9, r2, r0, lsr r1
   149f4:	andeq	r9, r2, r8, lsl r2
   149f8:	andeq	r9, r2, r8, lsr r1
   149fc:	push	{r4, r5, r6, lr}
   14a00:	mov	r5, r0
   14a04:	bl	11120 <__errno_location@plt>
   14a08:	cmp	r5, #0
   14a0c:	mov	r1, #48	; 0x30
   14a10:	mov	r4, r0
   14a14:	ldr	r0, [pc, #16]	; 14a2c <__assert_fail@plt+0x37ec>
   14a18:	ldr	r6, [r4]
   14a1c:	movne	r0, r5
   14a20:	bl	15800 <__assert_fail@plt+0x45c0>
   14a24:	str	r6, [r4]
   14a28:	pop	{r4, r5, r6, pc}
   14a2c:	andeq	r9, r2, r8, lsl r3
   14a30:	ldr	r3, [pc, #12]	; 14a44 <__assert_fail@plt+0x3804>
   14a34:	cmp	r0, #0
   14a38:	moveq	r0, r3
   14a3c:	ldr	r0, [r0]
   14a40:	bx	lr
   14a44:	andeq	r9, r2, r8, lsl r3
   14a48:	ldr	r3, [pc, #12]	; 14a5c <__assert_fail@plt+0x381c>
   14a4c:	cmp	r0, #0
   14a50:	moveq	r0, r3
   14a54:	str	r1, [r0]
   14a58:	bx	lr
   14a5c:	andeq	r9, r2, r8, lsl r3
   14a60:	ldr	r3, [pc, #52]	; 14a9c <__assert_fail@plt+0x385c>
   14a64:	cmp	r0, #0
   14a68:	moveq	r0, r3
   14a6c:	add	r3, r0, #8
   14a70:	push	{lr}		; (str lr, [sp, #-4]!)
   14a74:	lsr	lr, r1, #5
   14a78:	and	r1, r1, #31
   14a7c:	ldr	ip, [r3, lr, lsl #2]
   14a80:	lsr	r0, ip, r1
   14a84:	eor	r2, r2, r0
   14a88:	and	r2, r2, #1
   14a8c:	and	r0, r0, #1
   14a90:	eor	r1, ip, r2, lsl r1
   14a94:	str	r1, [r3, lr, lsl #2]
   14a98:	pop	{pc}		; (ldr pc, [sp], #4)
   14a9c:	andeq	r9, r2, r8, lsl r3
   14aa0:	ldr	r3, [pc, #16]	; 14ab8 <__assert_fail@plt+0x3878>
   14aa4:	cmp	r0, #0
   14aa8:	movne	r3, r0
   14aac:	ldr	r0, [r3, #4]
   14ab0:	str	r1, [r3, #4]
   14ab4:	bx	lr
   14ab8:	andeq	r9, r2, r8, lsl r3
   14abc:	ldr	r3, [pc, #44]	; 14af0 <__assert_fail@plt+0x38b0>
   14ac0:	cmp	r0, #0
   14ac4:	moveq	r0, r3
   14ac8:	mov	ip, #10
   14acc:	cmp	r2, #0
   14ad0:	cmpne	r1, #0
   14ad4:	str	ip, [r0]
   14ad8:	beq	14ae8 <__assert_fail@plt+0x38a8>
   14adc:	str	r1, [r0, #40]	; 0x28
   14ae0:	str	r2, [r0, #44]	; 0x2c
   14ae4:	bx	lr
   14ae8:	push	{r4, lr}
   14aec:	bl	1121c <abort@plt>
   14af0:	andeq	r9, r2, r8, lsl r3
   14af4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14af8:	sub	sp, sp, #24
   14afc:	ldr	ip, [pc, #108]	; 14b70 <__assert_fail@plt+0x3930>
   14b00:	ldr	r4, [sp, #56]	; 0x38
   14b04:	mov	r9, r2
   14b08:	cmp	r4, #0
   14b0c:	moveq	r4, ip
   14b10:	mov	sl, r3
   14b14:	mov	r7, r0
   14b18:	mov	r8, r1
   14b1c:	bl	11120 <__errno_location@plt>
   14b20:	ldr	r3, [r4, #44]	; 0x2c
   14b24:	mov	r1, r8
   14b28:	ldr	r6, [r0]
   14b2c:	str	r3, [sp, #16]
   14b30:	ldr	r2, [r4, #40]	; 0x28
   14b34:	add	r3, r4, #8
   14b38:	str	r3, [sp, #8]
   14b3c:	str	r2, [sp, #12]
   14b40:	ldr	r2, [r4, #4]
   14b44:	mov	r5, r0
   14b48:	str	r2, [sp, #4]
   14b4c:	ldr	ip, [r4]
   14b50:	mov	r3, sl
   14b54:	mov	r2, r9
   14b58:	mov	r0, r7
   14b5c:	str	ip, [sp]
   14b60:	bl	13048 <__assert_fail@plt+0x1e08>
   14b64:	str	r6, [r5]
   14b68:	add	sp, sp, #24
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b70:	andeq	r9, r2, r8, lsl r3
   14b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b78:	cmp	r3, #0
   14b7c:	sub	sp, sp, #44	; 0x2c
   14b80:	ldr	r4, [pc, #192]	; 14c48 <__assert_fail@plt+0x3a08>
   14b84:	mov	r6, r2
   14b88:	movne	r4, r3
   14b8c:	mov	r9, r1
   14b90:	mov	r8, r0
   14b94:	bl	11120 <__errno_location@plt>
   14b98:	ldr	r3, [r4, #44]	; 0x2c
   14b9c:	ldr	r5, [r4, #4]
   14ba0:	add	sl, r4, #8
   14ba4:	cmp	r6, #0
   14ba8:	orreq	r5, r5, #1
   14bac:	mov	r1, #0
   14bb0:	ldr	r2, [r0]
   14bb4:	str	r3, [sp, #16]
   14bb8:	ldr	r3, [r4, #40]	; 0x28
   14bbc:	stmib	sp, {r5, sl}
   14bc0:	str	r3, [sp, #12]
   14bc4:	ldr	r3, [r4]
   14bc8:	mov	r7, r0
   14bcc:	str	r2, [sp, #28]
   14bd0:	str	r3, [sp]
   14bd4:	mov	r2, r8
   14bd8:	mov	r3, r9
   14bdc:	mov	r0, r1
   14be0:	bl	13048 <__assert_fail@plt+0x1e08>
   14be4:	add	r1, r0, #1
   14be8:	mov	fp, r0
   14bec:	mov	r0, r1
   14bf0:	str	r1, [sp, #36]	; 0x24
   14bf4:	bl	155f8 <__assert_fail@plt+0x43b8>
   14bf8:	ldr	r3, [r4, #44]	; 0x2c
   14bfc:	mov	r2, r8
   14c00:	str	r3, [sp, #16]
   14c04:	ldr	r3, [r4, #40]	; 0x28
   14c08:	str	r5, [sp, #4]
   14c0c:	str	r3, [sp, #12]
   14c10:	str	sl, [sp, #8]
   14c14:	ldr	ip, [r4]
   14c18:	ldr	r1, [sp, #36]	; 0x24
   14c1c:	mov	r3, r9
   14c20:	str	ip, [sp]
   14c24:	str	r0, [sp, #32]
   14c28:	bl	13048 <__assert_fail@plt+0x1e08>
   14c2c:	ldr	r2, [sp, #28]
   14c30:	cmp	r6, #0
   14c34:	str	r2, [r7]
   14c38:	ldr	r0, [sp, #32]
   14c3c:	strne	fp, [r6]
   14c40:	add	sp, sp, #44	; 0x2c
   14c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c48:	andeq	r9, r2, r8, lsl r3
   14c4c:	mov	r3, r2
   14c50:	mov	r2, #0
   14c54:	b	14b74 <__assert_fail@plt+0x3934>
   14c58:	push	{r4, r5, r6, r7, r8, lr}
   14c5c:	ldr	r6, [pc, #112]	; 14cd4 <__assert_fail@plt+0x3a94>
   14c60:	ldr	r3, [r6, #4]
   14c64:	ldr	r7, [r6]
   14c68:	cmp	r3, #1
   14c6c:	ble	14c90 <__assert_fail@plt+0x3a50>
   14c70:	sub	r5, r7, #8
   14c74:	add	r5, r5, r3, lsl #3
   14c78:	mov	r4, r7
   14c7c:	ldr	r0, [r4, #12]
   14c80:	add	r4, r4, #8
   14c84:	bl	10f7c <free@plt>
   14c88:	cmp	r4, r5
   14c8c:	bne	14c7c <__assert_fail@plt+0x3a3c>
   14c90:	ldr	r0, [r7, #4]
   14c94:	ldr	r4, [pc, #60]	; 14cd8 <__assert_fail@plt+0x3a98>
   14c98:	cmp	r0, r4
   14c9c:	beq	14cb0 <__assert_fail@plt+0x3a70>
   14ca0:	bl	10f7c <free@plt>
   14ca4:	mov	r3, #256	; 0x100
   14ca8:	str	r4, [r6, #12]
   14cac:	str	r3, [r6, #8]
   14cb0:	ldr	r4, [pc, #36]	; 14cdc <__assert_fail@plt+0x3a9c>
   14cb4:	cmp	r7, r4
   14cb8:	beq	14cc8 <__assert_fail@plt+0x3a88>
   14cbc:	mov	r0, r7
   14cc0:	bl	10f7c <free@plt>
   14cc4:	str	r4, [r6]
   14cc8:	mov	r3, #1
   14ccc:	str	r3, [r6, #4]
   14cd0:	pop	{r4, r5, r6, r7, r8, pc}
   14cd4:	andeq	r9, r2, r0, lsr r1
   14cd8:	andeq	r9, r2, r8, lsl r2
   14cdc:	andeq	r9, r2, r8, lsr r1
   14ce0:	ldr	r3, [pc, #4]	; 14cec <__assert_fail@plt+0x3aac>
   14ce4:	mvn	r2, #0
   14ce8:	b	14860 <__assert_fail@plt+0x3620>
   14cec:	andeq	r9, r2, r8, lsl r3
   14cf0:	ldr	r3, [pc]	; 14cf8 <__assert_fail@plt+0x3ab8>
   14cf4:	b	14860 <__assert_fail@plt+0x3620>
   14cf8:	andeq	r9, r2, r8, lsl r3
   14cfc:	mov	r1, r0
   14d00:	ldr	r3, [pc, #8]	; 14d10 <__assert_fail@plt+0x3ad0>
   14d04:	mvn	r2, #0
   14d08:	mov	r0, #0
   14d0c:	b	14860 <__assert_fail@plt+0x3620>
   14d10:	andeq	r9, r2, r8, lsl r3
   14d14:	mov	r2, r1
   14d18:	ldr	r3, [pc, #8]	; 14d28 <__assert_fail@plt+0x3ae8>
   14d1c:	mov	r1, r0
   14d20:	mov	r0, #0
   14d24:	b	14860 <__assert_fail@plt+0x3620>
   14d28:	andeq	r9, r2, r8, lsl r3
   14d2c:	push	{r4, r5, r6, lr}
   14d30:	sub	sp, sp, #56	; 0x38
   14d34:	ldr	r4, [pc, #68]	; 14d80 <__assert_fail@plt+0x3b40>
   14d38:	mov	r6, r2
   14d3c:	mov	r5, r0
   14d40:	ldr	r3, [r4]
   14d44:	add	r0, sp, #4
   14d48:	str	r3, [sp, #52]	; 0x34
   14d4c:	bl	12ed8 <__assert_fail@plt+0x1c98>
   14d50:	add	r3, sp, #4
   14d54:	mvn	r2, #0
   14d58:	mov	r1, r6
   14d5c:	mov	r0, r5
   14d60:	bl	14860 <__assert_fail@plt+0x3620>
   14d64:	ldr	r2, [sp, #52]	; 0x34
   14d68:	ldr	r3, [r4]
   14d6c:	cmp	r2, r3
   14d70:	bne	14d7c <__assert_fail@plt+0x3b3c>
   14d74:	add	sp, sp, #56	; 0x38
   14d78:	pop	{r4, r5, r6, pc}
   14d7c:	bl	10ff4 <__stack_chk_fail@plt>
   14d80:	andeq	r8, r2, r8, lsl #30
   14d84:	push	{r4, r5, r6, r7, lr}
   14d88:	sub	sp, sp, #60	; 0x3c
   14d8c:	ldr	r4, [pc, #72]	; 14ddc <__assert_fail@plt+0x3b9c>
   14d90:	mov	r6, r2
   14d94:	mov	r7, r3
   14d98:	ldr	ip, [r4]
   14d9c:	mov	r5, r0
   14da0:	add	r0, sp, #4
   14da4:	str	ip, [sp, #52]	; 0x34
   14da8:	bl	12ed8 <__assert_fail@plt+0x1c98>
   14dac:	add	r3, sp, #4
   14db0:	mov	r2, r7
   14db4:	mov	r1, r6
   14db8:	mov	r0, r5
   14dbc:	bl	14860 <__assert_fail@plt+0x3620>
   14dc0:	ldr	r2, [sp, #52]	; 0x34
   14dc4:	ldr	r3, [r4]
   14dc8:	cmp	r2, r3
   14dcc:	bne	14dd8 <__assert_fail@plt+0x3b98>
   14dd0:	add	sp, sp, #60	; 0x3c
   14dd4:	pop	{r4, r5, r6, r7, pc}
   14dd8:	bl	10ff4 <__stack_chk_fail@plt>
   14ddc:	andeq	r8, r2, r8, lsl #30
   14de0:	mov	r2, r1
   14de4:	mov	r1, r0
   14de8:	mov	r0, #0
   14dec:	b	14d2c <__assert_fail@plt+0x3aec>
   14df0:	mov	r3, r2
   14df4:	mov	r2, r1
   14df8:	mov	r1, r0
   14dfc:	mov	r0, #0
   14e00:	b	14d84 <__assert_fail@plt+0x3b44>
   14e04:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e08:	mov	r4, r2
   14e0c:	ldr	lr, [pc, #128]	; 14e94 <__assert_fail@plt+0x3c54>
   14e10:	mov	r8, r0
   14e14:	mov	r9, r1
   14e18:	ldm	lr!, {r0, r1, r2, r3}
   14e1c:	sub	sp, sp, #60	; 0x3c
   14e20:	add	ip, sp, #4
   14e24:	lsr	r6, r4, #5
   14e28:	stmia	ip!, {r0, r1, r2, r3}
   14e2c:	add	r7, sp, #12
   14e30:	ldm	lr!, {r0, r1, r2, r3}
   14e34:	and	r4, r4, #31
   14e38:	ldr	r5, [pc, #88]	; 14e98 <__assert_fail@plt+0x3c58>
   14e3c:	stmia	ip!, {r0, r1, r2, r3}
   14e40:	ldm	lr, {r0, r1, r2, r3}
   14e44:	stm	ip, {r0, r1, r2, r3}
   14e48:	mov	r2, r9
   14e4c:	ldr	r3, [r7, r6, lsl #2]
   14e50:	ldr	ip, [r5]
   14e54:	mov	r1, r8
   14e58:	mvn	r0, r3, lsr r4
   14e5c:	and	r0, r0, #1
   14e60:	str	ip, [sp, #52]	; 0x34
   14e64:	eor	r4, r3, r0, lsl r4
   14e68:	add	r3, sp, #4
   14e6c:	mov	r0, #0
   14e70:	str	r4, [r7, r6, lsl #2]
   14e74:	bl	14860 <__assert_fail@plt+0x3620>
   14e78:	ldr	r2, [sp, #52]	; 0x34
   14e7c:	ldr	r3, [r5]
   14e80:	cmp	r2, r3
   14e84:	bne	14e90 <__assert_fail@plt+0x3c50>
   14e88:	add	sp, sp, #60	; 0x3c
   14e8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e90:	bl	10ff4 <__stack_chk_fail@plt>
   14e94:	andeq	r9, r2, r8, lsl r3
   14e98:	andeq	r8, r2, r8, lsl #30
   14e9c:	mov	r2, r1
   14ea0:	mvn	r1, #0
   14ea4:	b	14e04 <__assert_fail@plt+0x3bc4>
   14ea8:	mov	r2, #58	; 0x3a
   14eac:	mvn	r1, #0
   14eb0:	b	14e04 <__assert_fail@plt+0x3bc4>
   14eb4:	mov	r2, #58	; 0x3a
   14eb8:	b	14e04 <__assert_fail@plt+0x3bc4>
   14ebc:	push	{r4, r5, r6, r7, r8, lr}
   14ec0:	sub	sp, sp, #104	; 0x68
   14ec4:	ldr	r5, [pc, #120]	; 14f44 <__assert_fail@plt+0x3d04>
   14ec8:	mov	r6, r0
   14ecc:	mov	r0, sp
   14ed0:	ldr	r3, [r5]
   14ed4:	mov	r7, r2
   14ed8:	str	r3, [sp, #100]	; 0x64
   14edc:	bl	12ed8 <__assert_fail@plt+0x1c98>
   14ee0:	mov	ip, sp
   14ee4:	add	lr, sp, #52	; 0x34
   14ee8:	ldm	ip!, {r0, r1, r2, r3}
   14eec:	stmia	lr!, {r0, r1, r2, r3}
   14ef0:	ldm	ip!, {r0, r1, r2, r3}
   14ef4:	ldr	r8, [sp, #64]	; 0x40
   14ef8:	stmia	lr!, {r0, r1, r2, r3}
   14efc:	mvn	r4, r8
   14f00:	ldm	ip, {r0, r1, r2, r3}
   14f04:	and	ip, r4, #67108864	; 0x4000000
   14f08:	eor	ip, ip, r8
   14f0c:	str	ip, [sp, #64]	; 0x40
   14f10:	stm	lr, {r0, r1, r2, r3}
   14f14:	add	r3, sp, #52	; 0x34
   14f18:	mvn	r2, #0
   14f1c:	mov	r1, r7
   14f20:	mov	r0, r6
   14f24:	bl	14860 <__assert_fail@plt+0x3620>
   14f28:	ldr	r2, [sp, #100]	; 0x64
   14f2c:	ldr	r3, [r5]
   14f30:	cmp	r2, r3
   14f34:	bne	14f40 <__assert_fail@plt+0x3d00>
   14f38:	add	sp, sp, #104	; 0x68
   14f3c:	pop	{r4, r5, r6, r7, r8, pc}
   14f40:	bl	10ff4 <__stack_chk_fail@plt>
   14f44:	andeq	r8, r2, r8, lsl #30
   14f48:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f4c:	mov	r6, r1
   14f50:	ldr	lr, [pc, #132]	; 14fdc <__assert_fail@plt+0x3d9c>
   14f54:	mov	r5, r2
   14f58:	mov	r8, r0
   14f5c:	mov	r9, r3
   14f60:	ldm	lr!, {r0, r1, r2, r3}
   14f64:	sub	sp, sp, #60	; 0x3c
   14f68:	add	ip, sp, #4
   14f6c:	ldr	r4, [pc, #108]	; 14fe0 <__assert_fail@plt+0x3da0>
   14f70:	stmia	ip!, {r0, r1, r2, r3}
   14f74:	mov	r7, #10
   14f78:	ldm	lr!, {r0, r1, r2, r3}
   14f7c:	cmp	r5, #0
   14f80:	cmpne	r6, #0
   14f84:	str	r7, [sp, #4]
   14f88:	stmia	ip!, {r0, r1, r2, r3}
   14f8c:	ldm	lr, {r0, r1, r2, r3}
   14f90:	ldr	lr, [r4]
   14f94:	stm	ip, {r0, r1, r2, r3}
   14f98:	str	lr, [sp, #52]	; 0x34
   14f9c:	beq	14fd8 <__assert_fail@plt+0x3d98>
   14fa0:	add	r3, sp, #4
   14fa4:	ldr	r2, [sp, #88]	; 0x58
   14fa8:	mov	r1, r9
   14fac:	mov	r0, r8
   14fb0:	str	r6, [sp, #44]	; 0x2c
   14fb4:	str	r5, [sp, #48]	; 0x30
   14fb8:	bl	14860 <__assert_fail@plt+0x3620>
   14fbc:	ldr	r2, [sp, #52]	; 0x34
   14fc0:	ldr	r3, [r4]
   14fc4:	cmp	r2, r3
   14fc8:	bne	14fd4 <__assert_fail@plt+0x3d94>
   14fcc:	add	sp, sp, #60	; 0x3c
   14fd0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14fd4:	bl	10ff4 <__stack_chk_fail@plt>
   14fd8:	bl	1121c <abort@plt>
   14fdc:	andeq	r9, r2, r8, lsl r3
   14fe0:	andeq	r8, r2, r8, lsl #30
   14fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   14fe8:	sub	sp, sp, #12
   14fec:	mvn	ip, #0
   14ff0:	str	ip, [sp]
   14ff4:	bl	14f48 <__assert_fail@plt+0x3d08>
   14ff8:	add	sp, sp, #12
   14ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   15000:	push	{lr}		; (str lr, [sp, #-4]!)
   15004:	sub	sp, sp, #12
   15008:	mvn	ip, #0
   1500c:	mov	r3, r2
   15010:	str	ip, [sp]
   15014:	mov	r2, r1
   15018:	mov	r1, r0
   1501c:	mov	r0, #0
   15020:	bl	14f48 <__assert_fail@plt+0x3d08>
   15024:	add	sp, sp, #12
   15028:	pop	{pc}		; (ldr pc, [sp], #4)
   1502c:	push	{lr}		; (str lr, [sp, #-4]!)
   15030:	sub	sp, sp, #12
   15034:	str	r3, [sp]
   15038:	mov	r3, r2
   1503c:	mov	r2, r1
   15040:	mov	r1, r0
   15044:	mov	r0, #0
   15048:	bl	14f48 <__assert_fail@plt+0x3d08>
   1504c:	add	sp, sp, #12
   15050:	pop	{pc}		; (ldr pc, [sp], #4)
   15054:	ldr	r3, [pc]	; 1505c <__assert_fail@plt+0x3e1c>
   15058:	b	14860 <__assert_fail@plt+0x3620>
   1505c:	andeq	r9, r2, r0, asr #2
   15060:	mov	r2, r1
   15064:	ldr	r3, [pc, #8]	; 15074 <__assert_fail@plt+0x3e34>
   15068:	mov	r1, r0
   1506c:	mov	r0, #0
   15070:	b	14860 <__assert_fail@plt+0x3620>
   15074:	andeq	r9, r2, r0, asr #2
   15078:	ldr	r3, [pc, #4]	; 15084 <__assert_fail@plt+0x3e44>
   1507c:	mvn	r2, #0
   15080:	b	14860 <__assert_fail@plt+0x3620>
   15084:	andeq	r9, r2, r0, asr #2
   15088:	mov	r1, r0
   1508c:	ldr	r3, [pc, #8]	; 1509c <__assert_fail@plt+0x3e5c>
   15090:	mvn	r2, #0
   15094:	mov	r0, #0
   15098:	b	14860 <__assert_fail@plt+0x3620>
   1509c:	andeq	r9, r2, r0, asr #2
   150a0:	push	{r4, r5, r6, lr}
   150a4:	sub	sp, sp, #32
   150a8:	cmp	r1, #0
   150ac:	mov	r5, r0
   150b0:	ldr	r4, [sp, #48]	; 0x30
   150b4:	ldr	r6, [sp, #52]	; 0x34
   150b8:	beq	15148 <__assert_fail@plt+0x3f08>
   150bc:	strd	r2, [sp]
   150c0:	mov	r3, r1
   150c4:	ldr	r2, [pc, #828]	; 15408 <__assert_fail@plt+0x41c8>
   150c8:	mov	r1, #1
   150cc:	bl	11174 <__fprintf_chk@plt>
   150d0:	mov	r2, #5
   150d4:	ldr	r1, [pc, #816]	; 1540c <__assert_fail@plt+0x41cc>
   150d8:	mov	r0, #0
   150dc:	bl	10fd0 <dcgettext@plt>
   150e0:	ldr	r3, [pc, #808]	; 15410 <__assert_fail@plt+0x41d0>
   150e4:	ldr	r2, [pc, #808]	; 15414 <__assert_fail@plt+0x41d4>
   150e8:	str	r3, [sp]
   150ec:	mov	r1, #1
   150f0:	mov	r3, r0
   150f4:	mov	r0, r5
   150f8:	bl	11174 <__fprintf_chk@plt>
   150fc:	ldr	r1, [pc, #788]	; 15418 <__assert_fail@plt+0x41d8>
   15100:	mov	r2, #5
   15104:	mov	r0, #0
   15108:	bl	10fd0 <dcgettext@plt>
   1510c:	mov	r1, r5
   15110:	bl	10f40 <fputs_unlocked@plt>
   15114:	cmp	r6, #9
   15118:	ldrls	pc, [pc, r6, lsl #2]
   1511c:	b	153f8 <__assert_fail@plt+0x41b8>
   15120:	andeq	r5, r1, r4, lsl #8
   15124:	andeq	r5, r1, ip, asr #3
   15128:	strdeq	r5, [r1], -r8
   1512c:	andeq	r5, r1, ip, lsr #4
   15130:	andeq	r5, r1, r8, ror #4
   15134:	andeq	r5, r1, r8, lsr #5
   15138:	strdeq	r5, [r1], -r0
   1513c:	andeq	r5, r1, r0, asr #6
   15140:	muleq	r1, r8, r3
   15144:	andeq	r5, r1, r0, ror #2
   15148:	str	r3, [sp]
   1514c:	mov	r1, #1
   15150:	mov	r3, r2
   15154:	ldr	r2, [pc, #704]	; 1541c <__assert_fail@plt+0x41dc>
   15158:	bl	11174 <__fprintf_chk@plt>
   1515c:	b	150d0 <__assert_fail@plt+0x3e90>
   15160:	ldr	r1, [pc, #696]	; 15420 <__assert_fail@plt+0x41e0>
   15164:	mov	r2, #5
   15168:	mov	r0, #0
   1516c:	bl	10fd0 <dcgettext@plt>
   15170:	ldr	r2, [r4, #32]
   15174:	ldr	r3, [r4, #28]
   15178:	ldr	r1, [r4, #24]
   1517c:	str	r2, [sp, #28]
   15180:	ldr	r2, [r4, #20]
   15184:	str	r3, [sp, #24]
   15188:	ldr	r3, [r4, #16]
   1518c:	str	r1, [sp, #20]
   15190:	ldr	r1, [r4, #12]
   15194:	str	r2, [sp, #16]
   15198:	ldr	r2, [r4, #8]
   1519c:	str	r3, [sp, #12]
   151a0:	ldr	r3, [r4, #4]
   151a4:	str	r1, [sp, #8]
   151a8:	str	r2, [sp, #4]
   151ac:	str	r3, [sp]
   151b0:	mov	r1, #1
   151b4:	ldr	r3, [r4]
   151b8:	mov	r2, r0
   151bc:	mov	r0, r5
   151c0:	bl	11174 <__fprintf_chk@plt>
   151c4:	add	sp, sp, #32
   151c8:	pop	{r4, r5, r6, pc}
   151cc:	mov	r2, #5
   151d0:	ldr	r1, [pc, #588]	; 15424 <__assert_fail@plt+0x41e4>
   151d4:	mov	r0, #0
   151d8:	bl	10fd0 <dcgettext@plt>
   151dc:	ldr	r3, [r4]
   151e0:	mov	r1, #1
   151e4:	mov	r2, r0
   151e8:	mov	r0, r5
   151ec:	add	sp, sp, #32
   151f0:	pop	{r4, r5, r6, lr}
   151f4:	b	11174 <__fprintf_chk@plt>
   151f8:	mov	r2, #5
   151fc:	ldr	r1, [pc, #548]	; 15428 <__assert_fail@plt+0x41e8>
   15200:	mov	r0, #0
   15204:	bl	10fd0 <dcgettext@plt>
   15208:	ldr	r2, [r4, #4]
   1520c:	ldr	r3, [r4]
   15210:	mov	r1, #1
   15214:	str	r2, [sp, #48]	; 0x30
   15218:	mov	r2, r0
   1521c:	mov	r0, r5
   15220:	add	sp, sp, #32
   15224:	pop	{r4, r5, r6, lr}
   15228:	b	11174 <__fprintf_chk@plt>
   1522c:	mov	r2, #5
   15230:	ldr	r1, [pc, #500]	; 1542c <__assert_fail@plt+0x41ec>
   15234:	mov	r0, #0
   15238:	bl	10fd0 <dcgettext@plt>
   1523c:	ldr	r2, [r4, #8]
   15240:	ldr	r3, [r4, #4]
   15244:	mov	r1, #1
   15248:	str	r2, [sp, #52]	; 0x34
   1524c:	str	r3, [sp, #48]	; 0x30
   15250:	ldr	r3, [r4]
   15254:	mov	r2, r0
   15258:	mov	r0, r5
   1525c:	add	sp, sp, #32
   15260:	pop	{r4, r5, r6, lr}
   15264:	b	11174 <__fprintf_chk@plt>
   15268:	mov	r2, #5
   1526c:	ldr	r1, [pc, #444]	; 15430 <__assert_fail@plt+0x41f0>
   15270:	mov	r0, #0
   15274:	bl	10fd0 <dcgettext@plt>
   15278:	ldr	r1, [r4, #12]
   1527c:	ldr	r2, [r4, #8]
   15280:	ldr	r3, [r4, #4]
   15284:	str	r1, [sp, #8]
   15288:	str	r2, [sp, #4]
   1528c:	str	r3, [sp]
   15290:	mov	r1, #1
   15294:	ldr	r3, [r4]
   15298:	mov	r2, r0
   1529c:	mov	r0, r5
   152a0:	bl	11174 <__fprintf_chk@plt>
   152a4:	b	151c4 <__assert_fail@plt+0x3f84>
   152a8:	mov	r2, #5
   152ac:	ldr	r1, [pc, #384]	; 15434 <__assert_fail@plt+0x41f4>
   152b0:	mov	r0, #0
   152b4:	bl	10fd0 <dcgettext@plt>
   152b8:	ldr	r3, [r4, #16]
   152bc:	ldr	r1, [r4, #12]
   152c0:	ldr	r2, [r4, #8]
   152c4:	str	r3, [sp, #12]
   152c8:	ldr	r3, [r4, #4]
   152cc:	str	r1, [sp, #8]
   152d0:	str	r2, [sp, #4]
   152d4:	str	r3, [sp]
   152d8:	mov	r1, #1
   152dc:	ldr	r3, [r4]
   152e0:	mov	r2, r0
   152e4:	mov	r0, r5
   152e8:	bl	11174 <__fprintf_chk@plt>
   152ec:	b	151c4 <__assert_fail@plt+0x3f84>
   152f0:	mov	r2, #5
   152f4:	ldr	r1, [pc, #316]	; 15438 <__assert_fail@plt+0x41f8>
   152f8:	mov	r0, #0
   152fc:	bl	10fd0 <dcgettext@plt>
   15300:	ldr	r2, [r4, #20]
   15304:	ldr	r3, [r4, #16]
   15308:	ldr	r1, [r4, #12]
   1530c:	str	r2, [sp, #16]
   15310:	ldr	r2, [r4, #8]
   15314:	str	r3, [sp, #12]
   15318:	ldr	r3, [r4, #4]
   1531c:	str	r1, [sp, #8]
   15320:	str	r2, [sp, #4]
   15324:	str	r3, [sp]
   15328:	mov	r1, #1
   1532c:	ldr	r3, [r4]
   15330:	mov	r2, r0
   15334:	mov	r0, r5
   15338:	bl	11174 <__fprintf_chk@plt>
   1533c:	b	151c4 <__assert_fail@plt+0x3f84>
   15340:	mov	r2, #5
   15344:	ldr	r1, [pc, #240]	; 1543c <__assert_fail@plt+0x41fc>
   15348:	mov	r0, #0
   1534c:	bl	10fd0 <dcgettext@plt>
   15350:	ldr	r1, [r4, #24]
   15354:	ldr	r2, [r4, #20]
   15358:	ldr	r3, [r4, #16]
   1535c:	str	r1, [sp, #20]
   15360:	ldr	r1, [r4, #12]
   15364:	str	r2, [sp, #16]
   15368:	ldr	r2, [r4, #8]
   1536c:	str	r3, [sp, #12]
   15370:	ldr	r3, [r4, #4]
   15374:	str	r1, [sp, #8]
   15378:	str	r2, [sp, #4]
   1537c:	str	r3, [sp]
   15380:	mov	r1, #1
   15384:	ldr	r3, [r4]
   15388:	mov	r2, r0
   1538c:	mov	r0, r5
   15390:	bl	11174 <__fprintf_chk@plt>
   15394:	b	151c4 <__assert_fail@plt+0x3f84>
   15398:	mov	r2, #5
   1539c:	ldr	r1, [pc, #156]	; 15440 <__assert_fail@plt+0x4200>
   153a0:	mov	r0, #0
   153a4:	bl	10fd0 <dcgettext@plt>
   153a8:	ldr	r3, [r4, #28]
   153ac:	ldr	r1, [r4, #24]
   153b0:	ldr	r2, [r4, #20]
   153b4:	str	r3, [sp, #24]
   153b8:	ldr	r3, [r4, #16]
   153bc:	str	r1, [sp, #20]
   153c0:	ldr	r1, [r4, #12]
   153c4:	str	r2, [sp, #16]
   153c8:	ldr	r2, [r4, #8]
   153cc:	str	r3, [sp, #12]
   153d0:	ldr	r3, [r4, #4]
   153d4:	str	r1, [sp, #8]
   153d8:	str	r2, [sp, #4]
   153dc:	str	r3, [sp]
   153e0:	mov	r1, #1
   153e4:	ldr	r3, [r4]
   153e8:	mov	r2, r0
   153ec:	mov	r0, r5
   153f0:	bl	11174 <__fprintf_chk@plt>
   153f4:	b	151c4 <__assert_fail@plt+0x3f84>
   153f8:	mov	r2, #5
   153fc:	ldr	r1, [pc, #64]	; 15444 <__assert_fail@plt+0x4204>
   15400:	b	15168 <__assert_fail@plt+0x3f28>
   15404:	bl	1121c <abort@plt>
   15408:	andeq	r8, r1, ip, lsr #22
   1540c:	andeq	r8, r1, r0, asr #22
   15410:	andeq	r0, r0, r2, ror #15
   15414:	andeq	r8, r1, r4, lsl lr
   15418:	andeq	r8, r1, r4, asr #22
   1541c:	andeq	r8, r1, r8, lsr fp
   15420:	andeq	r8, r1, ip, lsl sp
   15424:	andeq	r8, r1, r0, lsl ip
   15428:	andeq	r8, r1, r0, lsr #24
   1542c:	andeq	r8, r1, r8, lsr ip
   15430:	andeq	r8, r1, r4, asr ip
   15434:	andeq	r8, r1, r4, ror ip
   15438:	muleq	r1, r8, ip
   1543c:	andeq	r8, r1, r0, asr #25
   15440:	andeq	r8, r1, ip, ror #25
   15444:	andeq	r8, r1, r0, asr sp
   15448:	push	{r4, r5, lr}
   1544c:	sub	sp, sp, #12
   15450:	ldr	r5, [sp, #24]
   15454:	ldr	ip, [r5]
   15458:	cmp	ip, #0
   1545c:	beq	15478 <__assert_fail@plt+0x4238>
   15460:	mov	lr, r5
   15464:	mov	ip, #0
   15468:	ldr	r4, [lr, #4]!
   1546c:	add	ip, ip, #1
   15470:	cmp	r4, #0
   15474:	bne	15468 <__assert_fail@plt+0x4228>
   15478:	stm	sp, {r5, ip}
   1547c:	bl	150a0 <__assert_fail@plt+0x3e60>
   15480:	add	sp, sp, #12
   15484:	pop	{r4, r5, pc}
   15488:	push	{r4, r5, r6, lr}
   1548c:	sub	sp, sp, #56	; 0x38
   15490:	ldr	r6, [pc, #88]	; 154f0 <__assert_fail@plt+0x42b0>
   15494:	ldr	r5, [sp, #72]	; 0x48
   15498:	add	r4, sp, #8
   1549c:	ldr	ip, [r6]
   154a0:	str	ip, [sp, #52]	; 0x34
   154a4:	mov	ip, #0
   154a8:	ldr	lr, [r5], #4
   154ac:	cmp	lr, #0
   154b0:	str	lr, [r4, #4]!
   154b4:	beq	154c4 <__assert_fail@plt+0x4284>
   154b8:	add	ip, ip, #1
   154bc:	cmp	ip, #10
   154c0:	bne	154a8 <__assert_fail@plt+0x4268>
   154c4:	add	lr, sp, #12
   154c8:	str	ip, [sp, #4]
   154cc:	str	lr, [sp]
   154d0:	bl	150a0 <__assert_fail@plt+0x3e60>
   154d4:	ldr	r2, [sp, #52]	; 0x34
   154d8:	ldr	r3, [r6]
   154dc:	cmp	r2, r3
   154e0:	bne	154ec <__assert_fail@plt+0x42ac>
   154e4:	add	sp, sp, #56	; 0x38
   154e8:	pop	{r4, r5, r6, pc}
   154ec:	bl	10ff4 <__stack_chk_fail@plt>
   154f0:	andeq	r8, r2, r8, lsl #30
   154f4:	push	{r3}		; (str r3, [sp, #-4]!)
   154f8:	mov	ip, #0
   154fc:	push	{r4, r5, r6, lr}
   15500:	sub	sp, sp, #60	; 0x3c
   15504:	ldr	r6, [pc, #100]	; 15570 <__assert_fail@plt+0x4330>
   15508:	add	r5, sp, #8
   1550c:	add	r4, sp, #80	; 0x50
   15510:	ldr	r3, [r6]
   15514:	str	r4, [sp, #8]
   15518:	str	r3, [sp, #52]	; 0x34
   1551c:	ldr	r3, [sp, #76]	; 0x4c
   15520:	ldr	lr, [r4], #4
   15524:	cmp	lr, #0
   15528:	str	lr, [r5, #4]!
   1552c:	beq	1553c <__assert_fail@plt+0x42fc>
   15530:	add	ip, ip, #1
   15534:	cmp	ip, #10
   15538:	bne	15520 <__assert_fail@plt+0x42e0>
   1553c:	add	lr, sp, #12
   15540:	str	ip, [sp, #4]
   15544:	str	lr, [sp]
   15548:	bl	150a0 <__assert_fail@plt+0x3e60>
   1554c:	ldr	r2, [sp, #52]	; 0x34
   15550:	ldr	r3, [r6]
   15554:	cmp	r2, r3
   15558:	bne	1556c <__assert_fail@plt+0x432c>
   1555c:	add	sp, sp, #60	; 0x3c
   15560:	pop	{r4, r5, r6, lr}
   15564:	add	sp, sp, #4
   15568:	bx	lr
   1556c:	bl	10ff4 <__stack_chk_fail@plt>
   15570:	andeq	r8, r2, r8, lsl #30
   15574:	push	{r4, lr}
   15578:	mov	r2, #5
   1557c:	ldr	r1, [pc, #88]	; 155dc <__assert_fail@plt+0x439c>
   15580:	mov	r0, #0
   15584:	bl	10fd0 <dcgettext@plt>
   15588:	ldr	r2, [pc, #80]	; 155e0 <__assert_fail@plt+0x43a0>
   1558c:	mov	r1, r0
   15590:	mov	r0, #1
   15594:	bl	1115c <__printf_chk@plt>
   15598:	mov	r2, #5
   1559c:	ldr	r1, [pc, #64]	; 155e4 <__assert_fail@plt+0x43a4>
   155a0:	mov	r0, #0
   155a4:	bl	10fd0 <dcgettext@plt>
   155a8:	ldr	r3, [pc, #56]	; 155e8 <__assert_fail@plt+0x43a8>
   155ac:	ldr	r2, [pc, #56]	; 155ec <__assert_fail@plt+0x43ac>
   155b0:	mov	r1, r0
   155b4:	mov	r0, #1
   155b8:	bl	1115c <__printf_chk@plt>
   155bc:	ldr	r1, [pc, #44]	; 155f0 <__assert_fail@plt+0x43b0>
   155c0:	mov	r2, #5
   155c4:	mov	r0, #0
   155c8:	bl	10fd0 <dcgettext@plt>
   155cc:	ldr	r3, [pc, #32]	; 155f4 <__assert_fail@plt+0x43b4>
   155d0:	pop	{r4, lr}
   155d4:	ldr	r1, [r3]
   155d8:	b	10f40 <fputs_unlocked@plt>
   155dc:	andeq	r8, r1, ip, lsl #27
   155e0:	andeq	r8, r1, r4, lsr #27
   155e4:			; <UNDEFINED> instruction: 0x00018dbc
   155e8:	muleq	r1, r0, r7
   155ec:			; <UNDEFINED> instruction: 0x000187b8
   155f0:	ldrdeq	r8, [r1], -r0
   155f4:	andeq	r9, r2, r4, lsl #3
   155f8:	push	{r4, lr}
   155fc:	mov	r4, r0
   15600:	bl	11084 <malloc@plt>
   15604:	adds	r4, r4, #0
   15608:	movne	r4, #1
   1560c:	cmp	r0, #0
   15610:	movne	r4, #0
   15614:	cmp	r4, #0
   15618:	popeq	{r4, pc}
   1561c:	bl	15840 <__assert_fail@plt+0x4600>
   15620:	push	{r4, r5, r6, lr}
   15624:	umull	r4, r5, r0, r1
   15628:	adds	r3, r5, #0
   1562c:	movne	r3, #1
   15630:	cmp	r4, #0
   15634:	blt	1564c <__assert_fail@plt+0x440c>
   15638:	cmp	r3, #0
   1563c:	bne	1564c <__assert_fail@plt+0x440c>
   15640:	mul	r0, r1, r0
   15644:	pop	{r4, r5, r6, lr}
   15648:	b	155f8 <__assert_fail@plt+0x43b8>
   1564c:	bl	15840 <__assert_fail@plt+0x4600>
   15650:	b	155f8 <__assert_fail@plt+0x43b8>
   15654:	adds	r3, r0, #0
   15658:	movne	r3, #1
   1565c:	cmp	r1, #0
   15660:	movne	r3, #0
   15664:	cmp	r3, #0
   15668:	push	{r4, lr}
   1566c:	bne	15694 <__assert_fail@plt+0x4454>
   15670:	mov	r4, r1
   15674:	bl	11000 <realloc@plt>
   15678:	adds	r4, r4, #0
   1567c:	movne	r4, #1
   15680:	cmp	r0, #0
   15684:	movne	r4, #0
   15688:	cmp	r4, #0
   1568c:	popeq	{r4, pc}
   15690:	bl	15840 <__assert_fail@plt+0x4600>
   15694:	bl	10f7c <free@plt>
   15698:	mov	r0, #0
   1569c:	pop	{r4, pc}
   156a0:	push	{r4, r5, r6, lr}
   156a4:	umull	r4, r5, r1, r2
   156a8:	adds	r3, r5, #0
   156ac:	movne	r3, #1
   156b0:	cmp	r4, #0
   156b4:	blt	156cc <__assert_fail@plt+0x448c>
   156b8:	cmp	r3, #0
   156bc:	bne	156cc <__assert_fail@plt+0x448c>
   156c0:	mul	r1, r2, r1
   156c4:	pop	{r4, r5, r6, lr}
   156c8:	b	15654 <__assert_fail@plt+0x4414>
   156cc:	bl	15840 <__assert_fail@plt+0x4600>
   156d0:	push	{r4, r5, r6, r7, r8, lr}
   156d4:	subs	r7, r0, #0
   156d8:	mov	r6, r1
   156dc:	mov	r5, r2
   156e0:	ldr	r4, [r1]
   156e4:	beq	15718 <__assert_fail@plt+0x44d8>
   156e8:	mov	r1, r2
   156ec:	ldr	r0, [pc, #104]	; 1575c <__assert_fail@plt+0x451c>
   156f0:	bl	17a24 <__assert_fail@plt+0x67e4>
   156f4:	cmp	r0, r4
   156f8:	bls	1573c <__assert_fail@plt+0x44fc>
   156fc:	add	r3, r4, #1
   15700:	add	r4, r3, r4, lsr #1
   15704:	str	r4, [r6]
   15708:	mul	r1, r5, r4
   1570c:	mov	r0, r7
   15710:	pop	{r4, r5, r6, r7, r8, lr}
   15714:	b	15654 <__assert_fail@plt+0x4414>
   15718:	cmp	r4, #0
   1571c:	beq	15740 <__assert_fail@plt+0x4500>
   15720:	umull	r0, r1, r4, r5
   15724:	adds	r3, r1, #0
   15728:	movne	r3, #1
   1572c:	cmp	r0, #0
   15730:	blt	1573c <__assert_fail@plt+0x44fc>
   15734:	cmp	r3, #0
   15738:	beq	15704 <__assert_fail@plt+0x44c4>
   1573c:	bl	15840 <__assert_fail@plt+0x4600>
   15740:	mov	r1, r2
   15744:	mov	r0, #64	; 0x40
   15748:	bl	17a24 <__assert_fail@plt+0x67e4>
   1574c:	cmp	r5, #64	; 0x40
   15750:	movls	r4, r0
   15754:	addhi	r4, r0, #1
   15758:	b	15720 <__assert_fail@plt+0x44e0>
   1575c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15760:	cmp	r0, #0
   15764:	ldr	r3, [r1]
   15768:	beq	1578c <__assert_fail@plt+0x454c>
   1576c:	ldr	r2, [pc, #60]	; 157b0 <__assert_fail@plt+0x4570>
   15770:	cmp	r3, r2
   15774:	bhi	157a8 <__assert_fail@plt+0x4568>
   15778:	add	r2, r3, #1
   1577c:	add	r3, r2, r3, lsr #1
   15780:	str	r3, [r1]
   15784:	mov	r1, r3
   15788:	b	15654 <__assert_fail@plt+0x4414>
   1578c:	cmp	r3, #0
   15790:	bne	157a4 <__assert_fail@plt+0x4564>
   15794:	mov	r3, #64	; 0x40
   15798:	str	r3, [r1]
   1579c:	mov	r1, r3
   157a0:	b	15654 <__assert_fail@plt+0x4414>
   157a4:	bge	15780 <__assert_fail@plt+0x4540>
   157a8:	push	{r4, lr}
   157ac:	bl	15840 <__assert_fail@plt+0x4600>
   157b0:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   157b4:	push	{r4, lr}
   157b8:	mov	r4, r0
   157bc:	bl	155f8 <__assert_fail@plt+0x43b8>
   157c0:	mov	r2, r4
   157c4:	mov	r1, #0
   157c8:	pop	{r4, lr}
   157cc:	b	11144 <memset@plt>
   157d0:	push	{r4, r5, r6, lr}
   157d4:	umull	r4, r5, r0, r1
   157d8:	adds	r3, r5, #0
   157dc:	movne	r3, #1
   157e0:	cmp	r4, #0
   157e4:	blt	157fc <__assert_fail@plt+0x45bc>
   157e8:	cmp	r3, #0
   157ec:	bne	157fc <__assert_fail@plt+0x45bc>
   157f0:	bl	10f34 <calloc@plt>
   157f4:	cmp	r0, #0
   157f8:	popne	{r4, r5, r6, pc}
   157fc:	bl	15840 <__assert_fail@plt+0x4600>
   15800:	push	{r4, r5, r6, lr}
   15804:	mov	r4, r1
   15808:	mov	r5, r0
   1580c:	mov	r0, r1
   15810:	bl	155f8 <__assert_fail@plt+0x43b8>
   15814:	mov	r2, r4
   15818:	mov	r1, r5
   1581c:	pop	{r4, r5, r6, lr}
   15820:	b	10fa0 <memcpy@plt>
   15824:	push	{r4, lr}
   15828:	mov	r4, r0
   1582c:	bl	11108 <strlen@plt>
   15830:	add	r1, r0, #1
   15834:	mov	r0, r4
   15838:	pop	{r4, lr}
   1583c:	b	15800 <__assert_fail@plt+0x45c0>
   15840:	ldr	r3, [pc, #44]	; 15874 <__assert_fail@plt+0x4634>
   15844:	push	{r4, lr}
   15848:	mov	r2, #5
   1584c:	ldr	r1, [pc, #36]	; 15878 <__assert_fail@plt+0x4638>
   15850:	mov	r0, #0
   15854:	ldr	r4, [r3]
   15858:	bl	10fd0 <dcgettext@plt>
   1585c:	ldr	r2, [pc, #24]	; 1587c <__assert_fail@plt+0x463c>
   15860:	mov	r1, #0
   15864:	mov	r3, r0
   15868:	mov	r0, r4
   1586c:	bl	1106c <error@plt>
   15870:	bl	1121c <abort@plt>
   15874:	andeq	r9, r2, ip, lsr #2
   15878:	andeq	r8, r1, r4, asr #28
   1587c:	andeq	r8, r1, r4, lsl #20
   15880:	push	{r1, r2, r3}
   15884:	push	{r4, lr}
   15888:	sub	sp, sp, #12
   1588c:	ldr	r4, [pc, #60]	; 158d0 <__assert_fail@plt+0x4690>
   15890:	add	r3, sp, #24
   15894:	mov	r2, r3
   15898:	ldr	ip, [r4]
   1589c:	ldr	r1, [sp, #20]
   158a0:	str	r3, [sp]
   158a4:	str	ip, [sp, #4]
   158a8:	bl	15b38 <__assert_fail@plt+0x48f8>
   158ac:	ldr	r2, [sp, #4]
   158b0:	ldr	r3, [r4]
   158b4:	cmp	r2, r3
   158b8:	bne	158cc <__assert_fail@plt+0x468c>
   158bc:	add	sp, sp, #12
   158c0:	pop	{r4, lr}
   158c4:	add	sp, sp, #12
   158c8:	bx	lr
   158cc:	bl	10ff4 <__stack_chk_fail@plt>
   158d0:	andeq	r8, r2, r8, lsl #30
   158d4:	push	{r4, r5, r6, r7, r8, lr}
   158d8:	subs	r7, r0, #0
   158dc:	ldr	r5, [pc, #108]	; 15950 <__assert_fail@plt+0x4710>
   158e0:	sub	sp, sp, #8
   158e4:	mov	r8, r1
   158e8:	ldr	r1, [r5]
   158ec:	moveq	r7, sp
   158f0:	str	r1, [sp, #4]
   158f4:	mov	r0, r7
   158f8:	mov	r1, r8
   158fc:	mov	r6, r2
   15900:	bl	11060 <mbrtowc@plt>
   15904:	cmp	r6, #0
   15908:	cmnne	r0, #3
   1590c:	mov	r4, r0
   15910:	bhi	15930 <__assert_fail@plt+0x46f0>
   15914:	ldr	r2, [sp, #4]
   15918:	ldr	r3, [r5]
   1591c:	mov	r0, r4
   15920:	cmp	r2, r3
   15924:	bne	1594c <__assert_fail@plt+0x470c>
   15928:	add	sp, sp, #8
   1592c:	pop	{r4, r5, r6, r7, r8, pc}
   15930:	mov	r0, #0
   15934:	bl	12d10 <__assert_fail@plt+0x1ad0>
   15938:	cmp	r0, #0
   1593c:	moveq	r4, #1
   15940:	ldrbeq	r3, [r8]
   15944:	streq	r3, [r7]
   15948:	b	15914 <__assert_fail@plt+0x46d4>
   1594c:	bl	10ff4 <__stack_chk_fail@plt>
   15950:	andeq	r8, r2, r8, lsl #30
   15954:	push	{r4, r5, r6, lr}
   15958:	mov	r5, r0
   1595c:	mov	r0, #33	; 0x21
   15960:	bl	155f8 <__assert_fail@plt+0x43b8>
   15964:	add	r1, r5, #44	; 0x2c
   15968:	mov	r2, #32
   1596c:	mov	r5, #0
   15970:	mov	r4, r0
   15974:	bl	11150 <strncpy@plt>
   15978:	mov	r0, r4
   1597c:	strb	r5, [r4, #32]
   15980:	bl	11108 <strlen@plt>
   15984:	add	r0, r4, r0
   15988:	cmp	r4, r0
   1598c:	bcs	1599c <__assert_fail@plt+0x475c>
   15990:	ldrb	r3, [r0, #-1]
   15994:	cmp	r3, #32
   15998:	beq	159a4 <__assert_fail@plt+0x4764>
   1599c:	mov	r0, r4
   159a0:	pop	{r4, r5, r6, pc}
   159a4:	sub	r0, r0, #1
   159a8:	cmp	r0, r4
   159ac:	strb	r5, [r0]
   159b0:	beq	1599c <__assert_fail@plt+0x475c>
   159b4:	ldrb	r3, [r0, #-1]!
   159b8:	cmp	r3, #32
   159bc:	beq	159a8 <__assert_fail@plt+0x4768>
   159c0:	mov	r0, r4
   159c4:	pop	{r4, r5, r6, pc}
   159c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159cc:	sub	sp, sp, #12
   159d0:	mov	r8, r3
   159d4:	mov	fp, r1
   159d8:	str	r2, [sp, #4]
   159dc:	and	r6, r3, #2
   159e0:	bl	10f70 <utmpxname@plt>
   159e4:	bl	10fe8 <setutxent@plt>
   159e8:	mov	r4, #0
   159ec:	mov	r5, r4
   159f0:	mov	r9, r4
   159f4:	and	r7, r8, #1
   159f8:	bl	11228 <getutxent@plt>
   159fc:	subs	sl, r0, #0
   15a00:	beq	15a58 <__assert_fail@plt+0x4818>
   15a04:	ldrb	r2, [sl, #44]	; 0x2c
   15a08:	cmp	r2, #0
   15a0c:	beq	15a1c <__assert_fail@plt+0x47dc>
   15a10:	ldrsh	r2, [sl]
   15a14:	cmp	r2, #7
   15a18:	beq	15a74 <__assert_fail@plt+0x4834>
   15a1c:	cmp	r6, #0
   15a20:	bne	159f8 <__assert_fail@plt+0x47b8>
   15a24:	cmp	r4, r5
   15a28:	addne	r7, r4, #1
   15a2c:	beq	15ab4 <__assert_fail@plt+0x4874>
   15a30:	add	r4, r4, r4, lsl #1
   15a34:	mov	r1, sl
   15a38:	add	r0, r9, r4, lsl #7
   15a3c:	mov	r2, #384	; 0x180
   15a40:	bl	10fa0 <memcpy@plt>
   15a44:	bl	11228 <getutxent@plt>
   15a48:	mov	r4, r7
   15a4c:	and	r7, r8, #1
   15a50:	subs	sl, r0, #0
   15a54:	bne	15a04 <__assert_fail@plt+0x47c4>
   15a58:	bl	11198 <endutxent@plt>
   15a5c:	ldr	r3, [sp, #4]
   15a60:	str	r4, [fp]
   15a64:	mov	r0, sl
   15a68:	str	r9, [r3]
   15a6c:	add	sp, sp, #12
   15a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a74:	cmp	r7, #0
   15a78:	beq	15a24 <__assert_fail@plt+0x47e4>
   15a7c:	ldr	r0, [sl, #4]
   15a80:	cmp	r0, #0
   15a84:	ble	15a24 <__assert_fail@plt+0x47e4>
   15a88:	mov	r1, #0
   15a8c:	bl	110d8 <kill@plt>
   15a90:	cmp	r0, #0
   15a94:	bge	15a24 <__assert_fail@plt+0x47e4>
   15a98:	bl	11120 <__errno_location@plt>
   15a9c:	ldr	r2, [r0]
   15aa0:	cmp	r2, #3
   15aa4:	beq	159f8 <__assert_fail@plt+0x47b8>
   15aa8:	cmp	r4, r5
   15aac:	addne	r7, r4, #1
   15ab0:	bne	15a30 <__assert_fail@plt+0x47f0>
   15ab4:	cmp	r9, #0
   15ab8:	beq	15ae8 <__assert_fail@plt+0x48a8>
   15abc:	ldr	r3, [pc, #112]	; 15b34 <__assert_fail@plt+0x48f4>
   15ac0:	cmp	r4, r3
   15ac4:	bhi	15b30 <__assert_fail@plt+0x48f0>
   15ac8:	add	r7, r4, #1
   15acc:	add	r5, r7, r4, lsr #1
   15ad0:	add	r1, r5, r5, lsl #1
   15ad4:	lsl	r1, r1, #7
   15ad8:	mov	r0, r9
   15adc:	bl	15654 <__assert_fail@plt+0x4414>
   15ae0:	mov	r9, r0
   15ae4:	b	15a30 <__assert_fail@plt+0x47f0>
   15ae8:	cmp	r4, #0
   15aec:	beq	15b20 <__assert_fail@plt+0x48e0>
   15af0:	mov	r0, #384	; 0x180
   15af4:	umull	r0, r1, r4, r0
   15af8:	adds	r2, r1, #0
   15afc:	movne	r2, #1
   15b00:	cmp	r0, #0
   15b04:	blt	15b30 <__assert_fail@plt+0x48f0>
   15b08:	cmp	r2, #0
   15b0c:	bne	15b30 <__assert_fail@plt+0x48f0>
   15b10:	add	r1, r4, r4, lsl #1
   15b14:	add	r7, r4, #1
   15b18:	lsl	r1, r1, #7
   15b1c:	b	15ad8 <__assert_fail@plt+0x4898>
   15b20:	mov	r5, #1
   15b24:	mov	r7, r5
   15b28:	mov	r1, #384	; 0x180
   15b2c:	b	15ad8 <__assert_fail@plt+0x4898>
   15b30:	bl	15840 <__assert_fail@plt+0x4600>
   15b34:	eorseq	lr, r8, sp, lsl #7
   15b38:	push	{r4, r5, lr}
   15b3c:	sub	sp, sp, #12
   15b40:	ldr	r4, [pc, #116]	; 15bbc <__assert_fail@plt+0x497c>
   15b44:	mov	r3, r2
   15b48:	mov	r5, r0
   15b4c:	ldr	ip, [r4]
   15b50:	mov	r2, r1
   15b54:	mov	r0, #0
   15b58:	mov	r1, sp
   15b5c:	str	ip, [sp, #4]
   15b60:	bl	15e08 <__assert_fail@plt+0x4bc8>
   15b64:	subs	r2, r0, #0
   15b68:	beq	15b98 <__assert_fail@plt+0x4958>
   15b6c:	ldr	r3, [sp]
   15b70:	cmp	r3, #0
   15b74:	strge	r2, [r5]
   15b78:	blt	15ba0 <__assert_fail@plt+0x4960>
   15b7c:	ldr	r1, [sp, #4]
   15b80:	ldr	r2, [r4]
   15b84:	mov	r0, r3
   15b88:	cmp	r1, r2
   15b8c:	bne	15bb8 <__assert_fail@plt+0x4978>
   15b90:	add	sp, sp, #12
   15b94:	pop	{r4, r5, pc}
   15b98:	mvn	r3, #0
   15b9c:	b	15b7c <__assert_fail@plt+0x493c>
   15ba0:	bl	10f7c <free@plt>
   15ba4:	bl	11120 <__errno_location@plt>
   15ba8:	mov	r2, #75	; 0x4b
   15bac:	mvn	r3, #0
   15bb0:	str	r2, [r0]
   15bb4:	b	15b7c <__assert_fail@plt+0x493c>
   15bb8:	bl	10ff4 <__stack_chk_fail@plt>
   15bbc:	andeq	r8, r2, r8, lsl #30
   15bc0:	push	{r4, r5, r6, lr}
   15bc4:	mov	r4, r0
   15bc8:	bl	11054 <__fpending@plt>
   15bcc:	ldr	r5, [r4]
   15bd0:	and	r5, r5, #32
   15bd4:	mov	r6, r0
   15bd8:	mov	r0, r4
   15bdc:	bl	15c68 <__assert_fail@plt+0x4a28>
   15be0:	cmp	r5, #0
   15be4:	mov	r4, r0
   15be8:	bne	15c14 <__assert_fail@plt+0x49d4>
   15bec:	cmp	r0, #0
   15bf0:	beq	15c0c <__assert_fail@plt+0x49cc>
   15bf4:	cmp	r6, #0
   15bf8:	bne	15c2c <__assert_fail@plt+0x49ec>
   15bfc:	bl	11120 <__errno_location@plt>
   15c00:	ldr	r4, [r0]
   15c04:	subs	r4, r4, #9
   15c08:	mvnne	r4, #0
   15c0c:	mov	r0, r4
   15c10:	pop	{r4, r5, r6, pc}
   15c14:	cmp	r0, #0
   15c18:	bne	15c2c <__assert_fail@plt+0x49ec>
   15c1c:	bl	11120 <__errno_location@plt>
   15c20:	str	r4, [r0]
   15c24:	mvn	r4, #0
   15c28:	b	15c0c <__assert_fail@plt+0x49cc>
   15c2c:	mvn	r4, #0
   15c30:	b	15c0c <__assert_fail@plt+0x49cc>
   15c34:	push	{r4, lr}
   15c38:	mov	r0, #14
   15c3c:	bl	111c8 <nl_langinfo@plt>
   15c40:	cmp	r0, #0
   15c44:	beq	15c5c <__assert_fail@plt+0x4a1c>
   15c48:	ldrb	r2, [r0]
   15c4c:	ldr	r3, [pc, #16]	; 15c64 <__assert_fail@plt+0x4a24>
   15c50:	cmp	r2, #0
   15c54:	moveq	r0, r3
   15c58:	pop	{r4, pc}
   15c5c:	ldr	r0, [pc]	; 15c64 <__assert_fail@plt+0x4a24>
   15c60:	pop	{r4, pc}
   15c64:	andeq	r8, r1, r8, asr lr
   15c68:	push	{r4, r5, lr}
   15c6c:	sub	sp, sp, #12
   15c70:	mov	r4, r0
   15c74:	bl	11168 <fileno@plt>
   15c78:	cmp	r0, #0
   15c7c:	mov	r0, r4
   15c80:	blt	15cfc <__assert_fail@plt+0x4abc>
   15c84:	bl	110a8 <__freading@plt>
   15c88:	cmp	r0, #0
   15c8c:	bne	15cc8 <__assert_fail@plt+0x4a88>
   15c90:	mov	r0, r4
   15c94:	bl	15d08 <__assert_fail@plt+0x4ac8>
   15c98:	cmp	r0, #0
   15c9c:	beq	15cf8 <__assert_fail@plt+0x4ab8>
   15ca0:	bl	11120 <__errno_location@plt>
   15ca4:	mov	r5, r0
   15ca8:	mov	r0, r4
   15cac:	ldr	r4, [r5]
   15cb0:	bl	11180 <fclose@plt>
   15cb4:	cmp	r4, #0
   15cb8:	mvnne	r0, #0
   15cbc:	strne	r4, [r5]
   15cc0:	add	sp, sp, #12
   15cc4:	pop	{r4, r5, pc}
   15cc8:	mov	r0, r4
   15ccc:	bl	11168 <fileno@plt>
   15cd0:	mov	r3, #1
   15cd4:	str	r3, [sp]
   15cd8:	mov	r2, #0
   15cdc:	mov	r3, #0
   15ce0:	bl	11030 <lseek64@plt>
   15ce4:	mvn	r3, #0
   15ce8:	mvn	r2, #0
   15cec:	cmp	r1, r3
   15cf0:	cmpeq	r0, r2
   15cf4:	bne	15c90 <__assert_fail@plt+0x4a50>
   15cf8:	mov	r0, r4
   15cfc:	add	sp, sp, #12
   15d00:	pop	{r4, r5, lr}
   15d04:	b	11180 <fclose@plt>
   15d08:	push	{r4, lr}
   15d0c:	subs	r4, r0, #0
   15d10:	sub	sp, sp, #8
   15d14:	beq	15d30 <__assert_fail@plt+0x4af0>
   15d18:	bl	110a8 <__freading@plt>
   15d1c:	cmp	r0, #0
   15d20:	beq	15d30 <__assert_fail@plt+0x4af0>
   15d24:	ldr	r3, [r4]
   15d28:	tst	r3, #256	; 0x100
   15d2c:	bne	15d40 <__assert_fail@plt+0x4b00>
   15d30:	mov	r0, r4
   15d34:	add	sp, sp, #8
   15d38:	pop	{r4, lr}
   15d3c:	b	10f64 <fflush@plt>
   15d40:	mov	r3, #1
   15d44:	str	r3, [sp]
   15d48:	mov	r2, #0
   15d4c:	mov	r3, #0
   15d50:	mov	r0, r4
   15d54:	bl	15d68 <__assert_fail@plt+0x4b28>
   15d58:	mov	r0, r4
   15d5c:	add	sp, sp, #8
   15d60:	pop	{r4, lr}
   15d64:	b	10f64 <fflush@plt>
   15d68:	push	{r4, r5, r6, r7, r8, lr}
   15d6c:	sub	sp, sp, #8
   15d70:	ldmib	r0, {ip, lr}
   15d74:	mov	r4, r0
   15d78:	ldr	r5, [sp, #32]
   15d7c:	cmp	lr, ip
   15d80:	beq	15d98 <__assert_fail@plt+0x4b58>
   15d84:	str	r5, [sp, #32]
   15d88:	mov	r0, r4
   15d8c:	add	sp, sp, #8
   15d90:	pop	{r4, r5, r6, r7, r8, lr}
   15d94:	b	1118c <fseeko64@plt>
   15d98:	ldr	lr, [r0, #20]
   15d9c:	ldr	ip, [r0, #16]
   15da0:	cmp	lr, ip
   15da4:	bne	15d84 <__assert_fail@plt+0x4b44>
   15da8:	ldr	r8, [r0, #36]	; 0x24
   15dac:	cmp	r8, #0
   15db0:	bne	15d84 <__assert_fail@plt+0x4b44>
   15db4:	mov	r6, r2
   15db8:	mov	r7, r3
   15dbc:	bl	11168 <fileno@plt>
   15dc0:	mov	r2, r6
   15dc4:	mov	r3, r7
   15dc8:	str	r5, [sp]
   15dcc:	bl	11030 <lseek64@plt>
   15dd0:	mvn	r3, #0
   15dd4:	mvn	r2, #0
   15dd8:	cmp	r1, r3
   15ddc:	cmpeq	r0, r2
   15de0:	beq	15e00 <__assert_fail@plt+0x4bc0>
   15de4:	ldr	r3, [r4]
   15de8:	strd	r0, [r4, #80]	; 0x50
   15dec:	mov	r0, r8
   15df0:	bic	r3, r3, #16
   15df4:	str	r3, [r4]
   15df8:	add	sp, sp, #8
   15dfc:	pop	{r4, r5, r6, r7, r8, pc}
   15e00:	mvn	r0, #0
   15e04:	b	15df8 <__assert_fail@plt+0x4bb8>
   15e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e0c:	mov	r9, r2
   15e10:	ldr	r2, [pc, #3592]	; 16c20 <__assert_fail@plt+0x59e0>
   15e14:	add	fp, sp, #32
   15e18:	sub	sp, sp, #540	; 0x21c
   15e1c:	ldr	ip, [r2]
   15e20:	str	r0, [fp, #-504]	; 0xfffffe08
   15e24:	str	r1, [fp, #-532]	; 0xfffffdec
   15e28:	mov	r0, r9
   15e2c:	sub	r2, fp, #484	; 0x1e4
   15e30:	sub	r1, fp, #364	; 0x16c
   15e34:	mov	r4, r3
   15e38:	str	ip, [fp, #-40]	; 0xffffffd8
   15e3c:	bl	16d58 <__assert_fail@plt+0x5b18>
   15e40:	cmp	r0, #0
   15e44:	blt	1641c <__assert_fail@plt+0x51dc>
   15e48:	sub	r1, fp, #484	; 0x1e4
   15e4c:	mov	r0, r4
   15e50:	bl	16c24 <__assert_fail@plt+0x59e4>
   15e54:	cmp	r0, #0
   15e58:	blt	169d8 <__assert_fail@plt+0x5798>
   15e5c:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   15e60:	ldr	r3, [fp, #-352]	; 0xfffffea0
   15e64:	adds	r2, r2, #7
   15e68:	mvncs	r2, #0
   15e6c:	adds	r3, r3, r2
   15e70:	bcs	16410 <__assert_fail@plt+0x51d0>
   15e74:	mov	r0, #6
   15e78:	adds	r0, r3, r0
   15e7c:	bcs	16410 <__assert_fail@plt+0x51d0>
   15e80:	cmp	r0, #4000	; 0xfa0
   15e84:	bcc	160b4 <__assert_fail@plt+0x4e74>
   15e88:	cmn	r0, #1
   15e8c:	beq	16410 <__assert_fail@plt+0x51d0>
   15e90:	bl	11084 <malloc@plt>
   15e94:	subs	r3, r0, #0
   15e98:	str	r3, [fp, #-516]	; 0xfffffdfc
   15e9c:	beq	16410 <__assert_fail@plt+0x51d0>
   15ea0:	str	r3, [fp, #-536]	; 0xfffffde8
   15ea4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   15ea8:	ldr	sl, [fp, #-360]	; 0xfffffe98
   15eac:	cmp	r3, #0
   15eb0:	ldr	r5, [fp, #-504]	; 0xfffffe08
   15eb4:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   15eb8:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   15ebc:	mov	r4, #0
   15ec0:	ldrne	r6, [r3]
   15ec4:	mov	r3, r5
   15ec8:	ldr	r5, [sl]
   15ecc:	str	r4, [fp, #-528]	; 0xfffffdf0
   15ed0:	cmp	r5, r9
   15ed4:	beq	1632c <__assert_fail@plt+0x50ec>
   15ed8:	sub	r5, r5, r9
   15edc:	adds	r2, r4, r5
   15ee0:	mov	r7, r2
   15ee4:	bcs	16334 <__assert_fail@plt+0x50f4>
   15ee8:	cmp	r6, r2
   15eec:	bcs	15f60 <__assert_fail@plt+0x4d20>
   15ef0:	cmp	r6, #0
   15ef4:	bne	16424 <__assert_fail@plt+0x51e4>
   15ef8:	cmp	r2, #12
   15efc:	movls	r6, #12
   15f00:	bhi	16434 <__assert_fail@plt+0x51f4>
   15f04:	ldr	r2, [fp, #-504]	; 0xfffffe08
   15f08:	cmp	r3, r2
   15f0c:	cmpne	r3, #0
   15f10:	sub	r8, r3, r2
   15f14:	clz	r8, r8
   15f18:	lsr	r8, r8, #5
   15f1c:	bne	163c8 <__assert_fail@plt+0x5188>
   15f20:	mov	r0, r6
   15f24:	str	r3, [fp, #-508]	; 0xfffffe04
   15f28:	bl	11084 <malloc@plt>
   15f2c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15f30:	subs	ip, r0, #0
   15f34:	beq	167ec <__assert_fail@plt+0x55ac>
   15f38:	cmp	r4, #0
   15f3c:	moveq	r8, #0
   15f40:	cmp	r8, #0
   15f44:	moveq	r3, ip
   15f48:	beq	15f60 <__assert_fail@plt+0x4d20>
   15f4c:	mov	r1, r3
   15f50:	mov	r2, r4
   15f54:	str	ip, [fp, #-508]	; 0xfffffe04
   15f58:	bl	10fa0 <memcpy@plt>
   15f5c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15f60:	add	r0, r3, r4
   15f64:	mov	r2, r5
   15f68:	mov	r1, r9
   15f6c:	str	r3, [fp, #-508]	; 0xfffffe04
   15f70:	bl	10fa0 <memcpy@plt>
   15f74:	ldr	r3, [fp, #-508]	; 0xfffffe04
   15f78:	ldr	r2, [fp, #-364]	; 0xfffffe94
   15f7c:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   15f80:	cmp	r2, r1
   15f84:	beq	16ac0 <__assert_fail@plt+0x5880>
   15f88:	ldrb	r1, [sl, #36]	; 0x24
   15f8c:	ldr	r2, [sl, #40]	; 0x28
   15f90:	cmp	r1, #37	; 0x25
   15f94:	beq	16274 <__assert_fail@plt+0x5034>
   15f98:	cmn	r2, #1
   15f9c:	beq	16c1c <__assert_fail@plt+0x59dc>
   15fa0:	ldr	r9, [fp, #-480]	; 0xfffffe20
   15fa4:	cmp	r1, #110	; 0x6e
   15fa8:	add	r1, r9, r2, lsl #4
   15fac:	ldr	r5, [r9, r2, lsl #4]
   15fb0:	beq	163ec <__assert_fail@plt+0x51ac>
   15fb4:	ldr	r2, [sl, #8]
   15fb8:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   15fbc:	tst	r2, #1
   15fc0:	mov	r1, #37	; 0x25
   15fc4:	strb	r1, [r0]
   15fc8:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   15fcc:	movne	r1, #39	; 0x27
   15fd0:	addne	r4, r0, #2
   15fd4:	strbne	r1, [r0, #1]
   15fd8:	addeq	r4, r0, #1
   15fdc:	tst	r2, #2
   15fe0:	movne	r1, #45	; 0x2d
   15fe4:	strbne	r1, [r4], #1
   15fe8:	tst	r2, #4
   15fec:	movne	r1, #43	; 0x2b
   15ff0:	strbne	r1, [r4], #1
   15ff4:	tst	r2, #8
   15ff8:	movne	r1, #32
   15ffc:	strbne	r1, [r4], #1
   16000:	tst	r2, #16
   16004:	movne	r1, #35	; 0x23
   16008:	strbne	r1, [r4], #1
   1600c:	tst	r2, #64	; 0x40
   16010:	movne	r1, #73	; 0x49
   16014:	strbne	r1, [r4], #1
   16018:	tst	r2, #32
   1601c:	movne	r2, #48	; 0x30
   16020:	strbne	r2, [r4], #1
   16024:	ldr	r1, [sl, #12]
   16028:	ldr	r8, [sl, #16]
   1602c:	cmp	r1, r8
   16030:	beq	16050 <__assert_fail@plt+0x4e10>
   16034:	sub	r8, r8, r1
   16038:	mov	r0, r4
   1603c:	mov	r2, r8
   16040:	str	r3, [fp, #-508]	; 0xfffffe04
   16044:	bl	10fa0 <memcpy@plt>
   16048:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1604c:	add	r4, r4, r8
   16050:	ldr	r1, [sl, #24]
   16054:	ldr	r8, [sl, #28]
   16058:	cmp	r1, r8
   1605c:	beq	1607c <__assert_fail@plt+0x4e3c>
   16060:	sub	r8, r8, r1
   16064:	mov	r0, r4
   16068:	mov	r2, r8
   1606c:	str	r3, [fp, #-508]	; 0xfffffe04
   16070:	bl	10fa0 <memcpy@plt>
   16074:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16078:	add	r4, r4, r8
   1607c:	sub	r2, r5, #7
   16080:	cmp	r2, #9
   16084:	ldrls	pc, [pc, r2, lsl #2]
   16088:	b	160e4 <__assert_fail@plt+0x4ea4>
   1608c:	ldrdeq	r6, [r1], -ip
   16090:	ldrdeq	r6, [r1], -ip
   16094:	ldrdeq	r6, [r1], -r4
   16098:	ldrdeq	r6, [r1], -r4
   1609c:	andeq	r6, r1, r4, ror #1
   160a0:	andeq	r6, r1, r4, asr #8
   160a4:	andeq	r6, r1, r4, ror #1
   160a8:	ldrdeq	r6, [r1], -ip
   160ac:	andeq	r6, r1, r4, ror #1
   160b0:	ldrdeq	r6, [r1], -ip
   160b4:	add	r3, r3, #13
   160b8:	bic	r3, r3, #7
   160bc:	sub	sp, sp, r3
   160c0:	add	r3, sp, #32
   160c4:	str	r3, [fp, #-516]	; 0xfffffdfc
   160c8:	mov	r3, #0
   160cc:	str	r3, [fp, #-536]	; 0xfffffde8
   160d0:	b	15ea4 <__assert_fail@plt+0x4c64>
   160d4:	mov	r2, #108	; 0x6c
   160d8:	strb	r2, [r4], #1
   160dc:	mov	r2, #108	; 0x6c
   160e0:	strb	r2, [r4], #1
   160e4:	ldrb	r2, [sl, #36]	; 0x24
   160e8:	mov	r1, #0
   160ec:	strb	r1, [r4, #1]
   160f0:	strb	r2, [r4]
   160f4:	ldr	r2, [sl, #20]
   160f8:	cmn	r2, #1
   160fc:	beq	1689c <__assert_fail@plt+0x565c>
   16100:	ldr	r1, [r9, r2, lsl #4]
   16104:	add	r2, r9, r2, lsl #4
   16108:	cmp	r1, #5
   1610c:	bne	16c1c <__assert_fail@plt+0x59dc>
   16110:	ldr	r2, [r2, #8]
   16114:	mov	r8, #1
   16118:	str	r2, [fp, #-492]	; 0xfffffe14
   1611c:	ldr	r2, [sl, #32]
   16120:	cmn	r2, #1
   16124:	beq	1614c <__assert_fail@plt+0x4f0c>
   16128:	ldr	r1, [r9, r2, lsl #4]
   1612c:	add	r9, r9, r2, lsl #4
   16130:	cmp	r1, #5
   16134:	bne	16c1c <__assert_fail@plt+0x59dc>
   16138:	sub	r2, fp, #36	; 0x24
   1613c:	add	r2, r2, r8, lsl #2
   16140:	ldr	r1, [r9, #8]
   16144:	add	r8, r8, #1
   16148:	str	r1, [r2, #-456]	; 0xfffffe38
   1614c:	mov	r2, #2
   16150:	adds	r2, r7, r2
   16154:	str	r2, [fp, #-524]	; 0xfffffdf4
   16158:	bcs	168d4 <__assert_fail@plt+0x5694>
   1615c:	cmp	r6, r2
   16160:	bcs	168dc <__assert_fail@plt+0x569c>
   16164:	cmp	r6, #0
   16168:	bne	16798 <__assert_fail@plt+0x5558>
   1616c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   16170:	cmp	r2, #12
   16174:	movls	r6, #12
   16178:	bhi	167ac <__assert_fail@plt+0x556c>
   1617c:	ldr	r1, [fp, #-504]	; 0xfffffe08
   16180:	sub	r2, r3, r1
   16184:	cmp	r3, r1
   16188:	cmpne	r3, #0
   1618c:	clz	r2, r2
   16190:	lsr	r2, r2, #5
   16194:	str	r2, [fp, #-508]	; 0xfffffe04
   16198:	bne	168a4 <__assert_fail@plt+0x5664>
   1619c:	mov	r0, r6
   161a0:	str	r3, [fp, #-512]	; 0xfffffe00
   161a4:	bl	11084 <malloc@plt>
   161a8:	ldr	r3, [fp, #-512]	; 0xfffffe00
   161ac:	ldr	r2, [fp, #-508]	; 0xfffffe04
   161b0:	subs	r9, r0, #0
   161b4:	beq	167ec <__assert_fail@plt+0x55ac>
   161b8:	cmp	r7, #0
   161bc:	moveq	r2, #0
   161c0:	cmp	r2, #0
   161c4:	beq	161d4 <__assert_fail@plt+0x4f94>
   161c8:	mov	r1, r3
   161cc:	mov	r2, r7
   161d0:	bl	10fa0 <memcpy@plt>
   161d4:	mov	r3, #0
   161d8:	strb	r3, [r9, r7]
   161dc:	bl	11120 <__errno_location@plt>
   161e0:	sub	r3, r5, #1
   161e4:	str	r3, [fp, #-520]	; 0xfffffdf8
   161e8:	ldr	r3, [r0]
   161ec:	str	r0, [fp, #-508]	; 0xfffffe04
   161f0:	str	r3, [fp, #-540]	; 0xfffffde4
   161f4:	sub	r3, r6, r7
   161f8:	str	r3, [fp, #-512]	; 0xfffffe00
   161fc:	ldr	r3, [fp, #-512]	; 0xfffffe00
   16200:	mvn	r2, #0
   16204:	cmp	r3, #0
   16208:	str	r2, [fp, #-496]	; 0xfffffe10
   1620c:	ldr	r2, [fp, #-508]	; 0xfffffe04
   16210:	movge	r5, r3
   16214:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   16218:	mov	r1, #0
   1621c:	str	r1, [r2]
   16220:	mvnlt	r5, #-2147483648	; 0x80000000
   16224:	cmp	r3, #16
   16228:	ldrls	pc, [pc, r3, lsl #2]
   1622c:	b	16c1c <__assert_fail@plt+0x59dc>
   16230:	andeq	r6, r1, r8, ror r7
   16234:	andeq	r6, r1, r8, asr r7
   16238:	strdeq	r6, [r1], -ip
   1623c:			; <UNDEFINED> instruction: 0x000166b0
   16240:	andeq	r6, r1, r0, asr r4
   16244:	andeq	r6, r1, r0, asr r4
   16248:	andeq	r6, r1, r0, asr r4
   1624c:	andeq	r6, r1, r0, asr r4
   16250:	andeq	r6, r1, r4, ror r5
   16254:	andeq	r6, r1, r4, ror r5
   16258:	andeq	r6, r1, r4, ror #12
   1625c:	andeq	r6, r1, r4, ror #12
   16260:	andeq	r6, r1, r0, asr r4
   16264:	andeq	r6, r1, r0, asr r4
   16268:	andeq	r6, r1, r0, asr r4
   1626c:	andeq	r6, r1, r0, asr r4
   16270:	andeq	r6, r1, r0, asr r4
   16274:	cmn	r2, #1
   16278:	bne	16c1c <__assert_fail@plt+0x59dc>
   1627c:	mov	r2, #1
   16280:	adds	r2, r7, r2
   16284:	mov	r4, r2
   16288:	bcs	168c4 <__assert_fail@plt+0x5684>
   1628c:	cmp	r6, r2
   16290:	bcs	16304 <__assert_fail@plt+0x50c4>
   16294:	cmp	r6, #0
   16298:	bne	167e8 <__assert_fail@plt+0x55a8>
   1629c:	cmp	r2, #12
   162a0:	movls	r6, #12
   162a4:	bhi	16a20 <__assert_fail@plt+0x57e0>
   162a8:	ldr	r2, [fp, #-504]	; 0xfffffe08
   162ac:	cmp	r3, r2
   162b0:	cmpne	r3, #0
   162b4:	sub	r5, r3, r2
   162b8:	clz	r5, r5
   162bc:	lsr	r5, r5, #5
   162c0:	bne	169b4 <__assert_fail@plt+0x5774>
   162c4:	mov	r0, r6
   162c8:	str	r3, [fp, #-508]	; 0xfffffe04
   162cc:	bl	11084 <malloc@plt>
   162d0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   162d4:	subs	ip, r0, #0
   162d8:	beq	167ec <__assert_fail@plt+0x55ac>
   162dc:	cmp	r7, #0
   162e0:	moveq	r5, #0
   162e4:	cmp	r5, #0
   162e8:	moveq	r3, ip
   162ec:	beq	16304 <__assert_fail@plt+0x50c4>
   162f0:	mov	r1, r3
   162f4:	mov	r2, r7
   162f8:	str	ip, [fp, #-508]	; 0xfffffe04
   162fc:	bl	10fa0 <memcpy@plt>
   16300:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16304:	mov	r2, #37	; 0x25
   16308:	strb	r2, [r3, r7]
   1630c:	ldr	r9, [sl, #4]
   16310:	add	sl, sl, #44	; 0x2c
   16314:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   16318:	ldr	r5, [sl]
   1631c:	add	r2, r2, #1
   16320:	cmp	r5, r9
   16324:	str	r2, [fp, #-528]	; 0xfffffdf0
   16328:	bne	15ed8 <__assert_fail@plt+0x4c98>
   1632c:	mov	r7, r4
   16330:	b	15f78 <__assert_fail@plt+0x4d38>
   16334:	cmn	r6, #1
   16338:	beq	169ac <__assert_fail@plt+0x576c>
   1633c:	mov	r5, r3
   16340:	bl	11120 <__errno_location@plt>
   16344:	mov	r9, r5
   16348:	str	r0, [fp, #-508]	; 0xfffffe04
   1634c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16350:	cmp	r9, r3
   16354:	cmpne	r9, #0
   16358:	bne	16808 <__assert_fail@plt+0x55c8>
   1635c:	ldr	r3, [fp, #-536]	; 0xfffffde8
   16360:	cmp	r3, #0
   16364:	beq	16370 <__assert_fail@plt+0x5130>
   16368:	mov	r0, r3
   1636c:	bl	10f7c <free@plt>
   16370:	ldr	r0, [fp, #-360]	; 0xfffffe98
   16374:	sub	r3, fp, #348	; 0x15c
   16378:	cmp	r0, r3
   1637c:	beq	16384 <__assert_fail@plt+0x5144>
   16380:	bl	10f7c <free@plt>
   16384:	ldr	r0, [fp, #-480]	; 0xfffffe20
   16388:	sub	r3, fp, #476	; 0x1dc
   1638c:	cmp	r0, r3
   16390:	beq	16398 <__assert_fail@plt+0x5158>
   16394:	bl	10f7c <free@plt>
   16398:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1639c:	mov	r5, #0
   163a0:	mov	r3, #12
   163a4:	str	r3, [r2]
   163a8:	ldr	r3, [pc, #2160]	; 16c20 <__assert_fail@plt+0x59e0>
   163ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   163b0:	mov	r0, r5
   163b4:	ldr	r3, [r3]
   163b8:	cmp	r2, r3
   163bc:	bne	16c0c <__assert_fail@plt+0x59cc>
   163c0:	sub	sp, fp, #32
   163c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c8:	mov	r0, r3
   163cc:	mov	r1, r6
   163d0:	str	r3, [fp, #-508]	; 0xfffffe04
   163d4:	bl	11000 <realloc@plt>
   163d8:	ldr	r3, [fp, #-508]	; 0xfffffe04
   163dc:	cmp	r0, #0
   163e0:	beq	16ba4 <__assert_fail@plt+0x5964>
   163e4:	mov	r3, r0
   163e8:	b	15f60 <__assert_fail@plt+0x4d20>
   163ec:	sub	r5, r5, #18
   163f0:	cmp	r5, #4
   163f4:	ldrls	pc, [pc, r5, lsl #2]
   163f8:	b	16c1c <__assert_fail@plt+0x59dc>
   163fc:	andeq	r6, r1, ip, lsr r8
   16400:	andeq	r6, r1, ip, lsr #16
   16404:	ldrdeq	r6, [r1], -r8
   16408:	ldrdeq	r6, [r1], -r8
   1640c:	andeq	r6, r1, r4, lsl r8
   16410:	bl	11120 <__errno_location@plt>
   16414:	str	r0, [fp, #-508]	; 0xfffffe04
   16418:	b	16370 <__assert_fail@plt+0x5130>
   1641c:	mov	r5, #0
   16420:	b	163a8 <__assert_fail@plt+0x5168>
   16424:	blt	167ec <__assert_fail@plt+0x55ac>
   16428:	lsl	r6, r6, #1
   1642c:	cmp	r6, r2
   16430:	bcs	15f04 <__assert_fail@plt+0x4cc4>
   16434:	cmn	r2, #1
   16438:	beq	1633c <__assert_fail@plt+0x50fc>
   1643c:	mov	r6, r2
   16440:	b	15f04 <__assert_fail@plt+0x4cc4>
   16444:	mov	r2, #76	; 0x4c
   16448:	strb	r2, [r4], #1
   1644c:	b	160e4 <__assert_fail@plt+0x4ea4>
   16450:	ldr	r2, [sl, #40]	; 0x28
   16454:	ldr	r3, [fp, #-480]	; 0xfffffe20
   16458:	cmp	r8, #1
   1645c:	add	r3, r3, r2, lsl #4
   16460:	add	r0, r9, r7
   16464:	ldr	r3, [r3, #8]
   16468:	beq	166cc <__assert_fail@plt+0x548c>
   1646c:	cmp	r8, #2
   16470:	beq	16720 <__assert_fail@plt+0x54e0>
   16474:	str	r3, [sp, #4]
   16478:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1647c:	sub	r2, fp, #496	; 0x1f0
   16480:	str	r2, [sp, #8]
   16484:	str	r3, [sp]
   16488:	mov	r2, #1
   1648c:	mvn	r3, #0
   16490:	mov	r1, r5
   16494:	bl	11234 <__snprintf_chk@plt>
   16498:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1649c:	cmp	r2, #0
   164a0:	blt	165c8 <__assert_fail@plt+0x5388>
   164a4:	cmp	r2, r5
   164a8:	mov	r3, r2
   164ac:	bcs	164c0 <__assert_fail@plt+0x5280>
   164b0:	add	r1, r9, r2
   164b4:	ldrb	r1, [r1, r7]
   164b8:	cmp	r1, #0
   164bc:	bne	16c1c <__assert_fail@plt+0x59dc>
   164c0:	cmp	r2, r0
   164c4:	bge	164d0 <__assert_fail@plt+0x5290>
   164c8:	mov	r3, r0
   164cc:	str	r0, [fp, #-496]	; 0xfffffe10
   164d0:	add	r2, r3, #1
   164d4:	cmp	r2, r5
   164d8:	bcc	16a30 <__assert_fail@plt+0x57f0>
   164dc:	cmn	r5, #-2147483647	; 0x80000001
   164e0:	beq	16a48 <__assert_fail@plt+0x5808>
   164e4:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   164e8:	add	r3, r3, r2
   164ec:	cmp	r7, r3
   164f0:	mvnhi	r3, #0
   164f4:	cmp	r6, #0
   164f8:	blt	1684c <__assert_fail@plt+0x560c>
   164fc:	lsl	r2, r6, #1
   16500:	cmp	r2, r3
   16504:	movcs	r3, r2
   16508:	cmp	r6, r3
   1650c:	bcs	161fc <__assert_fail@plt+0x4fbc>
   16510:	cmp	r2, r3
   16514:	bcc	16858 <__assert_fail@plt+0x5618>
   16518:	mov	r6, r2
   1651c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16520:	cmp	r9, r3
   16524:	cmpne	r9, #0
   16528:	sub	r5, r9, r3
   1652c:	clz	r5, r5
   16530:	lsr	r5, r5, #5
   16534:	bne	16868 <__assert_fail@plt+0x5628>
   16538:	mov	r0, r6
   1653c:	bl	11084 <malloc@plt>
   16540:	subs	r3, r0, #0
   16544:	beq	1634c <__assert_fail@plt+0x510c>
   16548:	cmp	r7, #0
   1654c:	moveq	r5, #0
   16550:	cmp	r5, #0
   16554:	beq	1688c <__assert_fail@plt+0x564c>
   16558:	mov	r1, r9
   1655c:	mov	r2, r7
   16560:	mov	r9, r3
   16564:	bl	10fa0 <memcpy@plt>
   16568:	sub	r3, r6, r7
   1656c:	str	r3, [fp, #-512]	; 0xfffffe00
   16570:	b	161fc <__assert_fail@plt+0x4fbc>
   16574:	ldr	r2, [sl, #40]	; 0x28
   16578:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1657c:	cmp	r8, #1
   16580:	add	r3, r3, r2, lsl #4
   16584:	add	r0, r9, r7
   16588:	ldrd	r2, [r3, #8]
   1658c:	beq	16918 <__assert_fail@plt+0x56d8>
   16590:	cmp	r8, #2
   16594:	beq	168e4 <__assert_fail@plt+0x56a4>
   16598:	strd	r2, [sp, #8]
   1659c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   165a0:	sub	r1, fp, #496	; 0x1f0
   165a4:	str	r1, [sp, #16]
   165a8:	str	r3, [sp]
   165ac:	mov	r2, #1
   165b0:	mvn	r3, #0
   165b4:	mov	r1, r5
   165b8:	bl	11234 <__snprintf_chk@plt>
   165bc:	ldr	r2, [fp, #-496]	; 0xfffffe10
   165c0:	cmp	r2, #0
   165c4:	bge	164a4 <__assert_fail@plt+0x5264>
   165c8:	ldrb	r3, [r4, #1]
   165cc:	cmp	r3, #0
   165d0:	movne	r3, #0
   165d4:	strbne	r3, [r4, #1]
   165d8:	bne	161fc <__assert_fail@plt+0x4fbc>
   165dc:	cmp	r0, #0
   165e0:	bge	164c8 <__assert_fail@plt+0x5288>
   165e4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   165e8:	ldr	r4, [r3]
   165ec:	cmp	r4, #0
   165f0:	bne	16608 <__assert_fail@plt+0x53c8>
   165f4:	ldrb	r3, [sl, #36]	; 0x24
   165f8:	and	r3, r3, #239	; 0xef
   165fc:	cmp	r3, #99	; 0x63
   16600:	moveq	r4, #84	; 0x54
   16604:	movne	r4, #22
   16608:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1660c:	cmp	r9, r3
   16610:	cmpne	r9, #0
   16614:	bne	16aa8 <__assert_fail@plt+0x5868>
   16618:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1661c:	cmp	r3, #0
   16620:	beq	1662c <__assert_fail@plt+0x53ec>
   16624:	mov	r0, r3
   16628:	bl	10f7c <free@plt>
   1662c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   16630:	sub	r3, fp, #348	; 0x15c
   16634:	cmp	r0, r3
   16638:	beq	16640 <__assert_fail@plt+0x5400>
   1663c:	bl	10f7c <free@plt>
   16640:	ldr	r0, [fp, #-480]	; 0xfffffe20
   16644:	sub	r3, fp, #476	; 0x1dc
   16648:	cmp	r0, r3
   1664c:	beq	16654 <__assert_fail@plt+0x5414>
   16650:	bl	10f7c <free@plt>
   16654:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16658:	mov	r5, #0
   1665c:	str	r4, [r3]
   16660:	b	163a8 <__assert_fail@plt+0x5168>
   16664:	ldr	r2, [sl, #40]	; 0x28
   16668:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1666c:	cmp	r8, #1
   16670:	add	r3, r3, r2, lsl #4
   16674:	add	r0, r9, r7
   16678:	ldrd	r2, [r3, #8]
   1667c:	beq	1697c <__assert_fail@plt+0x573c>
   16680:	cmp	r8, #2
   16684:	beq	16948 <__assert_fail@plt+0x5708>
   16688:	strd	r2, [sp, #8]
   1668c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16690:	sub	r1, fp, #496	; 0x1f0
   16694:	str	r1, [sp, #16]
   16698:	str	r3, [sp]
   1669c:	mov	r2, #1
   166a0:	mvn	r3, #0
   166a4:	mov	r1, r5
   166a8:	bl	11234 <__snprintf_chk@plt>
   166ac:	b	16498 <__assert_fail@plt+0x5258>
   166b0:	ldr	r2, [sl, #40]	; 0x28
   166b4:	ldr	r3, [fp, #-480]	; 0xfffffe20
   166b8:	cmp	r8, #1
   166bc:	add	r3, r3, r2, lsl #4
   166c0:	add	r0, r9, r7
   166c4:	ldrh	r3, [r3, #8]
   166c8:	bne	1646c <__assert_fail@plt+0x522c>
   166cc:	ldr	r2, [fp, #-492]	; 0xfffffe14
   166d0:	str	r3, [sp, #8]
   166d4:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   166d8:	sub	r1, fp, #496	; 0x1f0
   166dc:	str	r1, [sp, #12]
   166e0:	str	r3, [sp]
   166e4:	str	r2, [sp, #4]
   166e8:	mvn	r3, #0
   166ec:	mov	r2, r8
   166f0:	mov	r1, r5
   166f4:	bl	11234 <__snprintf_chk@plt>
   166f8:	b	16498 <__assert_fail@plt+0x5258>
   166fc:	ldr	r2, [sl, #40]	; 0x28
   16700:	ldr	r3, [fp, #-480]	; 0xfffffe20
   16704:	cmp	r8, #1
   16708:	add	r3, r3, r2, lsl #4
   1670c:	add	r0, r9, r7
   16710:	ldrsh	r3, [r3, #8]
   16714:	beq	166cc <__assert_fail@plt+0x548c>
   16718:	cmp	r8, #2
   1671c:	bne	16474 <__assert_fail@plt+0x5234>
   16720:	ldr	r1, [fp, #-488]	; 0xfffffe18
   16724:	ldr	r2, [fp, #-492]	; 0xfffffe14
   16728:	str	r3, [sp, #12]
   1672c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16730:	sub	ip, fp, #496	; 0x1f0
   16734:	str	r3, [sp]
   16738:	str	r1, [sp, #8]
   1673c:	str	r2, [sp, #4]
   16740:	str	ip, [sp, #16]
   16744:	mvn	r3, #0
   16748:	mov	r2, #1
   1674c:	mov	r1, r5
   16750:	bl	11234 <__snprintf_chk@plt>
   16754:	b	16498 <__assert_fail@plt+0x5258>
   16758:	ldr	r2, [sl, #40]	; 0x28
   1675c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   16760:	cmp	r8, #1
   16764:	add	r3, r3, r2, lsl #4
   16768:	add	r0, r9, r7
   1676c:	ldrb	r3, [r3, #8]
   16770:	bne	1646c <__assert_fail@plt+0x522c>
   16774:	b	166cc <__assert_fail@plt+0x548c>
   16778:	ldr	r2, [sl, #40]	; 0x28
   1677c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   16780:	cmp	r8, #1
   16784:	add	r3, r3, r2, lsl #4
   16788:	add	r0, r9, r7
   1678c:	ldrsb	r3, [r3, #8]
   16790:	bne	1646c <__assert_fail@plt+0x522c>
   16794:	b	166cc <__assert_fail@plt+0x548c>
   16798:	blt	167ec <__assert_fail@plt+0x55ac>
   1679c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   167a0:	lsl	r6, r6, #1
   167a4:	cmp	r6, r2
   167a8:	bcs	1617c <__assert_fail@plt+0x4f3c>
   167ac:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   167b0:	mov	r1, #0
   167b4:	cmn	r2, #1
   167b8:	movne	r2, #0
   167bc:	moveq	r2, #1
   167c0:	cmp	r1, r1
   167c4:	movne	r2, #255	; 0xff
   167c8:	cmp	r2, r1
   167cc:	bne	1633c <__assert_fail@plt+0x50fc>
   167d0:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   167d4:	b	1617c <__assert_fail@plt+0x4f3c>
   167d8:	ldr	r2, [r1, #8]
   167dc:	mov	r4, r7
   167e0:	str	r7, [r2]
   167e4:	b	1630c <__assert_fail@plt+0x50cc>
   167e8:	bge	16a14 <__assert_fail@plt+0x57d4>
   167ec:	mov	r9, r3
   167f0:	bl	11120 <__errno_location@plt>
   167f4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   167f8:	cmp	r9, r3
   167fc:	cmpne	r9, #0
   16800:	str	r0, [fp, #-508]	; 0xfffffe04
   16804:	beq	1635c <__assert_fail@plt+0x511c>
   16808:	mov	r0, r9
   1680c:	bl	10f7c <free@plt>
   16810:	b	1635c <__assert_fail@plt+0x511c>
   16814:	ldr	r2, [r1, #8]
   16818:	mov	r1, #0
   1681c:	mov	r4, r7
   16820:	str	r7, [r2]
   16824:	str	r1, [r2, #4]
   16828:	b	1630c <__assert_fail@plt+0x50cc>
   1682c:	ldr	r2, [r1, #8]
   16830:	mov	r4, r7
   16834:	strh	r7, [r2]
   16838:	b	1630c <__assert_fail@plt+0x50cc>
   1683c:	ldr	r2, [r1, #8]
   16840:	mov	r4, r7
   16844:	strb	r7, [r2]
   16848:	b	1630c <__assert_fail@plt+0x50cc>
   1684c:	cmn	r6, #1
   16850:	beq	161fc <__assert_fail@plt+0x4fbc>
   16854:	b	1634c <__assert_fail@plt+0x510c>
   16858:	cmn	r3, #1
   1685c:	beq	1634c <__assert_fail@plt+0x510c>
   16860:	mov	r6, r3
   16864:	b	1651c <__assert_fail@plt+0x52dc>
   16868:	mov	r1, r6
   1686c:	mov	r0, r9
   16870:	bl	11000 <realloc@plt>
   16874:	cmp	r0, #0
   16878:	beq	1634c <__assert_fail@plt+0x510c>
   1687c:	sub	r3, r6, r7
   16880:	mov	r9, r0
   16884:	str	r3, [fp, #-512]	; 0xfffffe00
   16888:	b	161fc <__assert_fail@plt+0x4fbc>
   1688c:	mov	r9, r3
   16890:	sub	r3, r6, r7
   16894:	str	r3, [fp, #-512]	; 0xfffffe00
   16898:	b	161fc <__assert_fail@plt+0x4fbc>
   1689c:	mov	r8, #0
   168a0:	b	1611c <__assert_fail@plt+0x4edc>
   168a4:	mov	r0, r3
   168a8:	mov	r1, r6
   168ac:	str	r3, [fp, #-508]	; 0xfffffe04
   168b0:	bl	11000 <realloc@plt>
   168b4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   168b8:	subs	r9, r0, #0
   168bc:	bne	161d4 <__assert_fail@plt+0x4f94>
   168c0:	b	167ec <__assert_fail@plt+0x55ac>
   168c4:	cmn	r6, #1
   168c8:	bne	1633c <__assert_fail@plt+0x50fc>
   168cc:	mov	r4, r6
   168d0:	b	16304 <__assert_fail@plt+0x50c4>
   168d4:	cmn	r6, #1
   168d8:	bne	1633c <__assert_fail@plt+0x50fc>
   168dc:	mov	r9, r3
   168e0:	b	161d4 <__assert_fail@plt+0x4f94>
   168e4:	ldr	r1, [fp, #-492]	; 0xfffffe14
   168e8:	ldr	ip, [fp, #-488]	; 0xfffffe18
   168ec:	strd	r2, [sp, #16]
   168f0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   168f4:	sub	lr, fp, #496	; 0x1f0
   168f8:	str	r3, [sp]
   168fc:	stmib	sp, {r1, ip}
   16900:	str	lr, [sp, #24]
   16904:	mvn	r3, #0
   16908:	mov	r2, #1
   1690c:	mov	r1, r5
   16910:	bl	11234 <__snprintf_chk@plt>
   16914:	b	16498 <__assert_fail@plt+0x5258>
   16918:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1691c:	strd	r2, [sp, #8]
   16920:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16924:	sub	ip, fp, #496	; 0x1f0
   16928:	str	r3, [sp]
   1692c:	str	r1, [sp, #4]
   16930:	str	ip, [sp, #16]
   16934:	mvn	r3, #0
   16938:	mov	r2, r8
   1693c:	mov	r1, r5
   16940:	bl	11234 <__snprintf_chk@plt>
   16944:	b	16498 <__assert_fail@plt+0x5258>
   16948:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1694c:	ldr	ip, [fp, #-488]	; 0xfffffe18
   16950:	strd	r2, [sp, #16]
   16954:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16958:	sub	lr, fp, #496	; 0x1f0
   1695c:	str	r3, [sp]
   16960:	stmib	sp, {r1, ip}
   16964:	str	lr, [sp, #24]
   16968:	mvn	r3, #0
   1696c:	mov	r2, #1
   16970:	mov	r1, r5
   16974:	bl	11234 <__snprintf_chk@plt>
   16978:	b	16498 <__assert_fail@plt+0x5258>
   1697c:	ldr	r1, [fp, #-492]	; 0xfffffe14
   16980:	strd	r2, [sp, #8]
   16984:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   16988:	sub	ip, fp, #496	; 0x1f0
   1698c:	str	r3, [sp]
   16990:	str	r1, [sp, #4]
   16994:	str	ip, [sp, #16]
   16998:	mvn	r3, #0
   1699c:	mov	r2, r8
   169a0:	mov	r1, r5
   169a4:	bl	11234 <__snprintf_chk@plt>
   169a8:	b	16498 <__assert_fail@plt+0x5258>
   169ac:	mov	r7, r6
   169b0:	b	15f60 <__assert_fail@plt+0x4d20>
   169b4:	mov	r0, r3
   169b8:	mov	r1, r6
   169bc:	str	r3, [fp, #-508]	; 0xfffffe04
   169c0:	bl	11000 <realloc@plt>
   169c4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   169c8:	cmp	r0, #0
   169cc:	beq	16ba4 <__assert_fail@plt+0x5964>
   169d0:	mov	r3, r0
   169d4:	b	16304 <__assert_fail@plt+0x50c4>
   169d8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   169dc:	sub	r3, fp, #348	; 0x15c
   169e0:	cmp	r0, r3
   169e4:	beq	169ec <__assert_fail@plt+0x57ac>
   169e8:	bl	10f7c <free@plt>
   169ec:	ldr	r0, [fp, #-480]	; 0xfffffe20
   169f0:	sub	r3, fp, #476	; 0x1dc
   169f4:	cmp	r0, r3
   169f8:	beq	16a00 <__assert_fail@plt+0x57c0>
   169fc:	bl	10f7c <free@plt>
   16a00:	bl	11120 <__errno_location@plt>
   16a04:	mov	r3, #22
   16a08:	mov	r5, #0
   16a0c:	str	r3, [r0]
   16a10:	b	163a8 <__assert_fail@plt+0x5168>
   16a14:	lsl	r6, r6, #1
   16a18:	cmp	r6, r2
   16a1c:	bcs	162a8 <__assert_fail@plt+0x5068>
   16a20:	cmn	r2, #1
   16a24:	beq	1633c <__assert_fail@plt+0x50fc>
   16a28:	mov	r6, r2
   16a2c:	b	162a8 <__assert_fail@plt+0x5068>
   16a30:	add	r4, r7, r3
   16a34:	ldr	r3, [fp, #-508]	; 0xfffffe04
   16a38:	ldr	r2, [fp, #-540]	; 0xfffffde4
   16a3c:	str	r2, [r3]
   16a40:	mov	r3, r9
   16a44:	b	1630c <__assert_fail@plt+0x50cc>
   16a48:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16a4c:	cmp	r9, r3
   16a50:	cmpne	r9, #0
   16a54:	bne	16ab4 <__assert_fail@plt+0x5874>
   16a58:	ldr	r3, [fp, #-536]	; 0xfffffde8
   16a5c:	cmp	r3, #0
   16a60:	beq	16a6c <__assert_fail@plt+0x582c>
   16a64:	mov	r0, r3
   16a68:	bl	10f7c <free@plt>
   16a6c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   16a70:	sub	r3, fp, #348	; 0x15c
   16a74:	cmp	r0, r3
   16a78:	beq	16a80 <__assert_fail@plt+0x5840>
   16a7c:	bl	10f7c <free@plt>
   16a80:	ldr	r0, [fp, #-480]	; 0xfffffe20
   16a84:	sub	r3, fp, #476	; 0x1dc
   16a88:	cmp	r0, r3
   16a8c:	beq	16a94 <__assert_fail@plt+0x5854>
   16a90:	bl	10f7c <free@plt>
   16a94:	ldr	r2, [fp, #-508]	; 0xfffffe04
   16a98:	mov	r3, #75	; 0x4b
   16a9c:	mov	r5, #0
   16aa0:	str	r3, [r2]
   16aa4:	b	163a8 <__assert_fail@plt+0x5168>
   16aa8:	mov	r0, r9
   16aac:	bl	10f7c <free@plt>
   16ab0:	b	16618 <__assert_fail@plt+0x53d8>
   16ab4:	mov	r0, r9
   16ab8:	bl	10f7c <free@plt>
   16abc:	b	16a58 <__assert_fail@plt+0x5818>
   16ac0:	mov	r5, r3
   16ac4:	mov	r3, #1
   16ac8:	adds	r4, r7, r3
   16acc:	mov	r8, r7
   16ad0:	bcs	16c10 <__assert_fail@plt+0x59d0>
   16ad4:	cmp	r6, r4
   16ad8:	bcs	16b44 <__assert_fail@plt+0x5904>
   16adc:	cmp	r6, #0
   16ae0:	bne	16bec <__assert_fail@plt+0x59ac>
   16ae4:	cmp	r4, #12
   16ae8:	movls	r6, #12
   16aec:	bhi	16bfc <__assert_fail@plt+0x59bc>
   16af0:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16af4:	cmp	r5, r3
   16af8:	cmpne	r5, #0
   16afc:	sub	r7, r5, r3
   16b00:	clz	r7, r7
   16b04:	lsr	r7, r7, #5
   16b08:	bne	16bd0 <__assert_fail@plt+0x5990>
   16b0c:	mov	r0, r6
   16b10:	bl	11084 <malloc@plt>
   16b14:	subs	r3, r0, #0
   16b18:	beq	16340 <__assert_fail@plt+0x5100>
   16b1c:	cmp	r8, #0
   16b20:	movne	r2, r7
   16b24:	moveq	r2, #0
   16b28:	cmp	r2, #0
   16b2c:	moveq	r5, r3
   16b30:	beq	16b44 <__assert_fail@plt+0x5904>
   16b34:	mov	r1, r5
   16b38:	mov	r2, r8
   16b3c:	mov	r5, r3
   16b40:	bl	10fa0 <memcpy@plt>
   16b44:	ldr	r3, [fp, #-504]	; 0xfffffe08
   16b48:	cmp	r5, r3
   16b4c:	cmpne	r6, r4
   16b50:	mov	r3, #0
   16b54:	strb	r3, [r5, r8]
   16b58:	bhi	16bb8 <__assert_fail@plt+0x5978>
   16b5c:	ldr	r3, [fp, #-536]	; 0xfffffde8
   16b60:	cmp	r3, #0
   16b64:	beq	16b70 <__assert_fail@plt+0x5930>
   16b68:	mov	r0, r3
   16b6c:	bl	10f7c <free@plt>
   16b70:	ldr	r0, [fp, #-360]	; 0xfffffe98
   16b74:	sub	r3, fp, #348	; 0x15c
   16b78:	cmp	r0, r3
   16b7c:	beq	16b84 <__assert_fail@plt+0x5944>
   16b80:	bl	10f7c <free@plt>
   16b84:	ldr	r0, [fp, #-480]	; 0xfffffe20
   16b88:	sub	r3, fp, #476	; 0x1dc
   16b8c:	cmp	r0, r3
   16b90:	beq	16b98 <__assert_fail@plt+0x5958>
   16b94:	bl	10f7c <free@plt>
   16b98:	ldr	r3, [fp, #-532]	; 0xfffffdec
   16b9c:	str	r8, [r3]
   16ba0:	b	163a8 <__assert_fail@plt+0x5168>
   16ba4:	mov	r5, r3
   16ba8:	bl	11120 <__errno_location@plt>
   16bac:	mov	r9, r5
   16bb0:	str	r0, [fp, #-508]	; 0xfffffe04
   16bb4:	b	16808 <__assert_fail@plt+0x55c8>
   16bb8:	mov	r0, r5
   16bbc:	mov	r1, r4
   16bc0:	bl	11000 <realloc@plt>
   16bc4:	cmp	r0, #0
   16bc8:	movne	r5, r0
   16bcc:	b	16b5c <__assert_fail@plt+0x591c>
   16bd0:	mov	r1, r6
   16bd4:	mov	r0, r5
   16bd8:	bl	11000 <realloc@plt>
   16bdc:	cmp	r0, #0
   16be0:	beq	16ba8 <__assert_fail@plt+0x5968>
   16be4:	mov	r5, r0
   16be8:	b	16b44 <__assert_fail@plt+0x5904>
   16bec:	blt	16340 <__assert_fail@plt+0x5100>
   16bf0:	lsl	r6, r6, #1
   16bf4:	cmp	r6, r4
   16bf8:	bcs	16af0 <__assert_fail@plt+0x58b0>
   16bfc:	cmn	r4, #1
   16c00:	movne	r6, r4
   16c04:	bne	16af0 <__assert_fail@plt+0x58b0>
   16c08:	b	16340 <__assert_fail@plt+0x5100>
   16c0c:	bl	10ff4 <__stack_chk_fail@plt>
   16c10:	cmn	r6, #1
   16c14:	beq	16b44 <__assert_fail@plt+0x5904>
   16c18:	b	16340 <__assert_fail@plt+0x5100>
   16c1c:	bl	1121c <abort@plt>
   16c20:	andeq	r8, r2, r8, lsl #30
   16c24:	ldr	r3, [r1]
   16c28:	ldr	r2, [r1, #4]
   16c2c:	cmp	r3, #0
   16c30:	beq	16d40 <__assert_fail@plt+0x5b00>
   16c34:	push	{r4, r5, r6, lr}
   16c38:	add	r2, r2, #8
   16c3c:	ldr	r6, [pc, #268]	; 16d50 <__assert_fail@plt+0x5b10>
   16c40:	ldr	lr, [pc, #268]	; 16d54 <__assert_fail@plt+0x5b14>
   16c44:	mov	ip, #0
   16c48:	ldr	r3, [r2, #-8]
   16c4c:	sub	r3, r3, #1
   16c50:	cmp	r3, #21
   16c54:	ldrls	pc, [pc, r3, lsl #2]
   16c58:	b	16d48 <__assert_fail@plt+0x5b08>
   16c5c:	strdeq	r6, [r1], -r8
   16c60:	strdeq	r6, [r1], -r8
   16c64:	andeq	r6, r1, ip, ror #25
   16c68:	andeq	r6, r1, ip, ror #25
   16c6c:			; <UNDEFINED> instruction: 0x00016cb4
   16c70:			; <UNDEFINED> instruction: 0x00016cb4
   16c74:			; <UNDEFINED> instruction: 0x00016cb4
   16c78:			; <UNDEFINED> instruction: 0x00016cb4
   16c7c:	ldrdeq	r6, [r1], -r8
   16c80:	ldrdeq	r6, [r1], -r8
   16c84:	andeq	r6, r1, r4, lsl #26
   16c88:	andeq	r6, r1, r4, lsl #26
   16c8c:			; <UNDEFINED> instruction: 0x00016cb4
   16c90:			; <UNDEFINED> instruction: 0x00016cb4
   16c94:	andeq	r6, r1, r8, lsl sp
   16c98:	andeq	r6, r1, ip, lsr #26
   16c9c:			; <UNDEFINED> instruction: 0x00016cb4
   16ca0:			; <UNDEFINED> instruction: 0x00016cb4
   16ca4:			; <UNDEFINED> instruction: 0x00016cb4
   16ca8:			; <UNDEFINED> instruction: 0x00016cb4
   16cac:			; <UNDEFINED> instruction: 0x00016cb4
   16cb0:			; <UNDEFINED> instruction: 0x00016cb4
   16cb4:	ldr	r3, [r0], #4
   16cb8:	str	r3, [r2]
   16cbc:	ldr	r3, [r1]
   16cc0:	add	ip, ip, #1
   16cc4:	cmp	r3, ip
   16cc8:	add	r2, r2, #16
   16ccc:	bhi	16c48 <__assert_fail@plt+0x5a08>
   16cd0:	mov	r0, #0
   16cd4:	pop	{r4, r5, r6, pc}
   16cd8:	add	r0, r0, #7
   16cdc:	bic	r0, r0, #7
   16ce0:	ldrd	r4, [r0], #8
   16ce4:	strd	r4, [r2]
   16ce8:	b	16cbc <__assert_fail@plt+0x5a7c>
   16cec:	ldr	r3, [r0], #4
   16cf0:	strh	r3, [r2]
   16cf4:	b	16cbc <__assert_fail@plt+0x5a7c>
   16cf8:	ldr	r3, [r0], #4
   16cfc:	strb	r3, [r2]
   16d00:	b	16cbc <__assert_fail@plt+0x5a7c>
   16d04:	add	r0, r0, #7
   16d08:	bic	r0, r0, #7
   16d0c:	ldrd	r4, [r0], #8
   16d10:	strd	r4, [r2]
   16d14:	b	16cbc <__assert_fail@plt+0x5a7c>
   16d18:	ldr	r3, [r0], #4
   16d1c:	cmp	r3, #0
   16d20:	streq	lr, [r2]
   16d24:	bne	16cb8 <__assert_fail@plt+0x5a78>
   16d28:	b	16cbc <__assert_fail@plt+0x5a7c>
   16d2c:	ldr	r3, [r0], #4
   16d30:	cmp	r3, #0
   16d34:	streq	r6, [r2]
   16d38:	bne	16cb8 <__assert_fail@plt+0x5a78>
   16d3c:	b	16cbc <__assert_fail@plt+0x5a7c>
   16d40:	mov	r0, #0
   16d44:	bx	lr
   16d48:	mvn	r0, #0
   16d4c:	pop	{r4, r5, r6, pc}
   16d50:	andeq	r8, r1, r0, ror #28
   16d54:	andeq	r8, r1, ip, ror lr
   16d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d5c:	mov	sl, r2
   16d60:	sub	sp, sp, #44	; 0x2c
   16d64:	mov	fp, r1
   16d68:	mov	r3, r1
   16d6c:	mov	r1, sl
   16d70:	mov	r2, #0
   16d74:	mov	ip, #7
   16d78:	str	r2, [r3], #16
   16d7c:	str	fp, [sp, #4]
   16d80:	str	r3, [fp, #4]
   16d84:	mov	r4, r2
   16d88:	str	r2, [r1], #8
   16d8c:	str	ip, [sp, #8]
   16d90:	mov	r7, r0
   16d94:	str	r3, [sp, #36]	; 0x24
   16d98:	str	r2, [sp, #28]
   16d9c:	str	r1, [sp, #12]
   16da0:	str	r2, [sp, #16]
   16da4:	str	r1, [sl, #4]
   16da8:	str	r2, [sp, #32]
   16dac:	mov	r9, r2
   16db0:	str	ip, [sp, #24]
   16db4:	mov	fp, sl
   16db8:	b	16dc8 <__assert_fail@plt+0x5b88>
   16dbc:	cmp	r0, #37	; 0x25
   16dc0:	mov	r5, r7
   16dc4:	beq	16e08 <__assert_fail@plt+0x5bc8>
   16dc8:	mov	r2, r7
   16dcc:	ldrb	r0, [r7], #1
   16dd0:	cmp	r0, #0
   16dd4:	bne	16dbc <__assert_fail@plt+0x5b7c>
   16dd8:	add	ip, r4, r4, lsl #2
   16ddc:	ldr	fp, [sp, #4]
   16de0:	add	r4, r4, ip, lsl #1
   16de4:	mov	r1, r0
   16de8:	str	r2, [r3, r4, lsl #2]
   16dec:	ldr	r3, [sp, #16]
   16df0:	str	r3, [fp, #8]
   16df4:	ldr	r3, [sp, #28]
   16df8:	str	r3, [fp, #12]
   16dfc:	mov	r0, r1
   16e00:	add	sp, sp, #44	; 0x2c
   16e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e08:	add	r1, r4, r4, lsl #2
   16e0c:	mvn	r8, #0
   16e10:	add	r4, r4, r1, lsl #1
   16e14:	add	r6, r3, r4, lsl #2
   16e18:	str	r2, [r3, r4, lsl #2]
   16e1c:	str	r9, [r6, #8]
   16e20:	str	r9, [r6, #12]
   16e24:	str	r9, [r6, #16]
   16e28:	str	r9, [r6, #24]
   16e2c:	str	r9, [r6, #28]
   16e30:	str	r8, [r6, #20]
   16e34:	str	r8, [r6, #32]
   16e38:	str	r8, [r6, #40]	; 0x28
   16e3c:	ldrb	r4, [r7]
   16e40:	sub	r0, r4, #48	; 0x30
   16e44:	uxtb	r3, r0
   16e48:	cmp	r3, #9
   16e4c:	bhi	16e98 <__assert_fail@plt+0x5c58>
   16e50:	b	17310 <__assert_fail@plt+0x60d0>
   16e54:	cmp	r4, #45	; 0x2d
   16e58:	beq	16eb4 <__assert_fail@plt+0x5c74>
   16e5c:	cmp	r4, #43	; 0x2b
   16e60:	beq	16ec4 <__assert_fail@plt+0x5c84>
   16e64:	cmp	r4, #32
   16e68:	beq	16ed4 <__assert_fail@plt+0x5c94>
   16e6c:	cmp	r4, #35	; 0x23
   16e70:	beq	16ee4 <__assert_fail@plt+0x5ca4>
   16e74:	cmp	r4, #48	; 0x30
   16e78:	beq	16ef4 <__assert_fail@plt+0x5cb4>
   16e7c:	cmp	r4, #73	; 0x49
   16e80:	bne	16f04 <__assert_fail@plt+0x5cc4>
   16e84:	ldr	r3, [r6, #8]
   16e88:	orr	r3, r3, #64	; 0x40
   16e8c:	str	r3, [r6, #8]
   16e90:	ldrb	r4, [r7]
   16e94:	mov	r5, r7
   16e98:	cmp	r4, #39	; 0x27
   16e9c:	add	r7, r5, #1
   16ea0:	bne	16e54 <__assert_fail@plt+0x5c14>
   16ea4:	ldr	r3, [r6, #8]
   16ea8:	orr	r3, r3, #1
   16eac:	str	r3, [r6, #8]
   16eb0:	b	16e90 <__assert_fail@plt+0x5c50>
   16eb4:	ldr	r3, [r6, #8]
   16eb8:	orr	r3, r3, #2
   16ebc:	str	r3, [r6, #8]
   16ec0:	b	16e90 <__assert_fail@plt+0x5c50>
   16ec4:	ldr	r3, [r6, #8]
   16ec8:	orr	r3, r3, #4
   16ecc:	str	r3, [r6, #8]
   16ed0:	b	16e90 <__assert_fail@plt+0x5c50>
   16ed4:	ldr	r3, [r6, #8]
   16ed8:	orr	r3, r3, #8
   16edc:	str	r3, [r6, #8]
   16ee0:	b	16e90 <__assert_fail@plt+0x5c50>
   16ee4:	ldr	r3, [r6, #8]
   16ee8:	orr	r3, r3, #16
   16eec:	str	r3, [r6, #8]
   16ef0:	b	16e90 <__assert_fail@plt+0x5c50>
   16ef4:	ldr	r3, [r6, #8]
   16ef8:	orr	r3, r3, #32
   16efc:	str	r3, [r6, #8]
   16f00:	b	16e90 <__assert_fail@plt+0x5c50>
   16f04:	cmp	r4, #42	; 0x2a
   16f08:	beq	170e0 <__assert_fail@plt+0x5ea0>
   16f0c:	sub	r3, r4, #48	; 0x30
   16f10:	cmp	r3, #9
   16f14:	bls	17700 <__assert_fail@plt+0x64c0>
   16f18:	cmp	r4, #46	; 0x2e
   16f1c:	beq	17178 <__assert_fail@plt+0x5f38>
   16f20:	add	r5, r5, #1
   16f24:	mov	r3, #0
   16f28:	mov	r1, #1
   16f2c:	b	16f34 <__assert_fail@plt+0x5cf4>
   16f30:	ldrb	r4, [r5], #1
   16f34:	cmp	r4, #104	; 0x68
   16f38:	andeq	r2, r3, #1
   16f3c:	mov	r7, r5
   16f40:	orreq	r3, r3, r1, lsl r2
   16f44:	beq	16f30 <__assert_fail@plt+0x5cf0>
   16f48:	cmp	r4, #76	; 0x4c
   16f4c:	orreq	r3, r3, #4
   16f50:	beq	16f30 <__assert_fail@plt+0x5cf0>
   16f54:	cmp	r4, #108	; 0x6c
   16f58:	addeq	r3, r3, #8
   16f5c:	beq	16f30 <__assert_fail@plt+0x5cf0>
   16f60:	cmp	r4, #106	; 0x6a
   16f64:	addeq	r3, r3, #16
   16f68:	beq	16f30 <__assert_fail@plt+0x5cf0>
   16f6c:	and	r2, r4, #223	; 0xdf
   16f70:	cmp	r2, #90	; 0x5a
   16f74:	beq	16f30 <__assert_fail@plt+0x5cf0>
   16f78:	cmp	r4, #116	; 0x74
   16f7c:	beq	16f30 <__assert_fail@plt+0x5cf0>
   16f80:	sub	r2, r4, #37	; 0x25
   16f84:	cmp	r2, #83	; 0x53
   16f88:	ldrls	pc, [pc, r2, lsl #2]
   16f8c:	b	17380 <__assert_fail@plt+0x6140>
   16f90:	andeq	r7, r1, r4, ror r2
   16f94:	andeq	r7, r1, r0, lsl #7
   16f98:	andeq	r7, r1, r0, lsl #7
   16f9c:	andeq	r7, r1, r0, lsl #7
   16fa0:	andeq	r7, r1, r0, lsl #7
   16fa4:	andeq	r7, r1, r0, lsl #7
   16fa8:	andeq	r7, r1, r0, lsl #7
   16fac:	andeq	r7, r1, r0, lsl #7
   16fb0:	andeq	r7, r1, r0, lsl #7
   16fb4:	andeq	r7, r1, r0, lsl #7
   16fb8:	andeq	r7, r1, r0, lsl #7
   16fbc:	andeq	r7, r1, r0, lsl #7
   16fc0:	andeq	r7, r1, r0, lsl #7
   16fc4:	andeq	r7, r1, r0, lsl #7
   16fc8:	andeq	r7, r1, r0, lsl #7
   16fcc:	andeq	r7, r1, r0, lsl #7
   16fd0:	andeq	r7, r1, r0, lsl #7
   16fd4:	andeq	r7, r1, r0, lsl #7
   16fd8:	andeq	r7, r1, r0, lsl #7
   16fdc:	andeq	r7, r1, r0, lsl #7
   16fe0:	andeq	r7, r1, r0, lsl #7
   16fe4:	andeq	r7, r1, r0, lsl #7
   16fe8:	andeq	r7, r1, r0, lsl #7
   16fec:	andeq	r7, r1, r0, lsl #7
   16ff0:	andeq	r7, r1, r0, lsl #7
   16ff4:	andeq	r7, r1, r0, lsl #7
   16ff8:	andeq	r7, r1, r0, lsl #7
   16ffc:	andeq	r7, r1, r0, lsl #7
   17000:	andeq	r7, r1, r8, asr #9
   17004:	andeq	r7, r1, r0, lsl #7
   17008:	andeq	r7, r1, r4, lsl r2
   1700c:	andeq	r7, r1, r0, lsl #7
   17010:	andeq	r7, r1, r8, asr #9
   17014:	andeq	r7, r1, r8, asr #9
   17018:	andeq	r7, r1, r8, asr #9
   1701c:	andeq	r7, r1, r0, lsl #7
   17020:	andeq	r7, r1, r0, lsl #7
   17024:	andeq	r7, r1, r0, lsl #7
   17028:	andeq	r7, r1, r0, lsl #7
   1702c:	andeq	r7, r1, r0, lsl #7
   17030:	andeq	r7, r1, r0, lsl #7
   17034:	andeq	r7, r1, r0, lsl #7
   17038:	andeq	r7, r1, r0, lsl #7
   1703c:	andeq	r7, r1, r0, lsl #7
   17040:	andeq	r7, r1, r0, lsl #7
   17044:	andeq	r7, r1, r0, lsl #7
   17048:	andeq	r7, r1, ip, lsl #12
   1704c:	andeq	r7, r1, r0, lsl #7
   17050:	andeq	r7, r1, r0, lsl #7
   17054:	andeq	r7, r1, r0, lsl #7
   17058:	andeq	r7, r1, r0, lsl #7
   1705c:	andeq	r7, r1, r8, asr #11
   17060:	andeq	r7, r1, r0, lsl #7
   17064:	andeq	r7, r1, r0, lsl #7
   17068:	andeq	r7, r1, r0, lsl #7
   1706c:	andeq	r7, r1, r0, lsl #7
   17070:	andeq	r7, r1, r0, lsl #7
   17074:	andeq	r7, r1, r0, lsl #7
   17078:	andeq	r7, r1, r0, lsl #7
   1707c:	andeq	r7, r1, r0, lsl #7
   17080:	andeq	r7, r1, r8, asr #9
   17084:	andeq	r7, r1, r0, lsl #7
   17088:			; <UNDEFINED> instruction: 0x000175b4
   1708c:	andeq	r7, r1, r0, ror r5
   17090:	andeq	r7, r1, r8, asr #9
   17094:	andeq	r7, r1, r8, asr #9
   17098:	andeq	r7, r1, r8, asr #9
   1709c:	andeq	r7, r1, r0, lsl #7
   170a0:	andeq	r7, r1, r0, ror r5
   170a4:	andeq	r7, r1, r0, lsl #7
   170a8:	andeq	r7, r1, r0, lsl #7
   170ac:	andeq	r7, r1, r0, lsl #7
   170b0:	andeq	r7, r1, r0, lsl #7
   170b4:	andeq	r7, r1, r8, lsr #12
   170b8:	andeq	r7, r1, r8, asr #11
   170bc:	andeq	r7, r1, ip, lsl r6
   170c0:	andeq	r7, r1, r0, lsl #7
   170c4:	andeq	r7, r1, r0, lsl #7
   170c8:	andeq	r7, r1, ip, asr r5
   170cc:	andeq	r7, r1, r0, lsl #7
   170d0:	andeq	r7, r1, r8, asr #11
   170d4:	andeq	r7, r1, r0, lsl #7
   170d8:	andeq	r7, r1, r0, lsl #7
   170dc:	andeq	r7, r1, r8, asr #11
   170e0:	str	r5, [r6, #12]
   170e4:	str	r7, [r6, #16]
   170e8:	ldrb	r3, [r5, #1]
   170ec:	ldr	r2, [sp, #16]
   170f0:	sub	r3, r3, #48	; 0x30
   170f4:	cmp	r2, #0
   170f8:	moveq	r2, #1
   170fc:	str	r2, [sp, #16]
   17100:	uxtb	r2, r3
   17104:	cmp	r2, #9
   17108:	bls	174ec <__assert_fail@plt+0x62ac>
   1710c:	ldr	r4, [r6, #20]
   17110:	cmn	r4, #1
   17114:	beq	174a8 <__assert_fail@plt+0x6268>
   17118:	ldr	r3, [sp, #8]
   1711c:	ldr	sl, [fp, #4]
   17120:	cmp	r3, r4
   17124:	bls	17410 <__assert_fail@plt+0x61d0>
   17128:	ldr	r2, [fp]
   1712c:	cmp	r2, r4
   17130:	bhi	1714c <__assert_fail@plt+0x5f0c>
   17134:	sub	r1, sl, #16
   17138:	add	r2, r2, #1
   1713c:	cmp	r2, r4
   17140:	str	r9, [r1, r2, lsl #4]
   17144:	bls	17138 <__assert_fail@plt+0x5ef8>
   17148:	str	r2, [fp]
   1714c:	ldr	r3, [sl, r4, lsl #4]
   17150:	cmp	r3, #0
   17154:	bne	1775c <__assert_fail@plt+0x651c>
   17158:	mov	r3, r7
   1715c:	mov	r2, #5
   17160:	str	r2, [sl, r4, lsl #4]
   17164:	ldrb	r4, [r3], #1
   17168:	mov	r5, r7
   1716c:	cmp	r4, #46	; 0x2e
   17170:	mov	r7, r3
   17174:	bne	16f20 <__assert_fail@plt+0x5ce0>
   17178:	ldrb	r3, [r5, #1]
   1717c:	cmp	r3, #42	; 0x2a
   17180:	bne	173c8 <__assert_fail@plt+0x6188>
   17184:	add	r7, r5, #2
   17188:	str	r5, [r6, #24]
   1718c:	str	r7, [r6, #28]
   17190:	ldrb	r1, [r5, #2]
   17194:	ldr	r3, [sp, #28]
   17198:	sub	r1, r1, #48	; 0x30
   1719c:	cmp	r3, #2
   171a0:	movcc	r3, #2
   171a4:	str	r3, [sp, #28]
   171a8:	uxtb	r3, r1
   171ac:	cmp	r3, #9
   171b0:	bls	178dc <__assert_fail@plt+0x669c>
   171b4:	ldr	r4, [r6, #32]
   171b8:	cmn	r4, #1
   171bc:	beq	178bc <__assert_fail@plt+0x667c>
   171c0:	ldr	r3, [sp, #8]
   171c4:	ldr	sl, [fp, #4]
   171c8:	cmp	r3, r4
   171cc:	bls	177e0 <__assert_fail@plt+0x65a0>
   171d0:	ldr	r2, [fp]
   171d4:	cmp	r2, r4
   171d8:	bhi	171f4 <__assert_fail@plt+0x5fb4>
   171dc:	sub	r1, sl, #16
   171e0:	add	r2, r2, #1
   171e4:	cmp	r2, r4
   171e8:	str	r9, [r1, r2, lsl #4]
   171ec:	bls	171e0 <__assert_fail@plt+0x5fa0>
   171f0:	str	r2, [fp]
   171f4:	ldr	r3, [sl, r4, lsl #4]
   171f8:	cmp	r3, #0
   171fc:	bne	17840 <__assert_fail@plt+0x6600>
   17200:	mov	r3, #5
   17204:	str	r3, [sl, r4, lsl #4]
   17208:	mov	r5, r7
   1720c:	ldrb	r4, [r7]
   17210:	b	16f20 <__assert_fail@plt+0x5ce0>
   17214:	mov	r4, #99	; 0x63
   17218:	mov	r3, #14
   1721c:	str	r3, [sp, #20]
   17220:	cmn	r8, #1
   17224:	strne	r8, [r6, #40]	; 0x28
   17228:	beq	176e0 <__assert_fail@plt+0x64a0>
   1722c:	ldr	r3, [sp, #8]
   17230:	ldr	sl, [fp, #4]
   17234:	cmp	r3, r8
   17238:	bls	17684 <__assert_fail@plt+0x6444>
   1723c:	ldr	r3, [fp]
   17240:	cmp	r3, r8
   17244:	bhi	17260 <__assert_fail@plt+0x6020>
   17248:	sub	r1, sl, #16
   1724c:	add	r3, r3, #1
   17250:	cmp	r3, r8
   17254:	str	r9, [r1, r3, lsl #4]
   17258:	bls	1724c <__assert_fail@plt+0x600c>
   1725c:	str	r3, [fp]
   17260:	ldr	r3, [sl, r8, lsl #4]
   17264:	cmp	r3, #0
   17268:	bne	1766c <__assert_fail@plt+0x642c>
   1726c:	ldr	r3, [sp, #20]
   17270:	str	r3, [sl, r8, lsl #4]
   17274:	ldr	r3, [sp, #4]
   17278:	strb	r4, [r6, #36]	; 0x24
   1727c:	ldr	r2, [sp, #24]
   17280:	ldr	r4, [r3]
   17284:	str	r5, [r6, #4]
   17288:	add	r4, r4, #1
   1728c:	cmp	r2, r4
   17290:	str	r4, [r3]
   17294:	ldrhi	r3, [r3, #4]
   17298:	bhi	16dc8 <__assert_fail@plt+0x5b88>
   1729c:	ldr	r3, [sp, #24]
   172a0:	cmp	r3, #0
   172a4:	blt	179b8 <__assert_fail@plt+0x6778>
   172a8:	ldr	r3, [sp, #24]
   172ac:	ldr	r2, [pc, #1896]	; 17a1c <__assert_fail@plt+0x67dc>
   172b0:	lsl	r5, r3, #1
   172b4:	cmp	r5, r2
   172b8:	bhi	179b8 <__assert_fail@plt+0x6778>
   172bc:	ldr	r2, [sp, #4]
   172c0:	add	r1, r3, r3, lsl #2
   172c4:	ldr	r6, [r2, #4]
   172c8:	add	r1, r3, r1, lsl #1
   172cc:	ldr	r3, [sp, #36]	; 0x24
   172d0:	lsl	r1, r1, #3
   172d4:	cmp	r3, r6
   172d8:	beq	17470 <__assert_fail@plt+0x6230>
   172dc:	mov	r0, r6
   172e0:	bl	11000 <realloc@plt>
   172e4:	subs	r3, r0, #0
   172e8:	beq	179b8 <__assert_fail@plt+0x6778>
   172ec:	ldr	r2, [sp, #4]
   172f0:	ldm	r2, {r4, r6}
   172f4:	ldr	r2, [sp, #36]	; 0x24
   172f8:	cmp	r2, r6
   172fc:	beq	17480 <__assert_fail@plt+0x6240>
   17300:	ldr	r2, [sp, #4]
   17304:	str	r5, [sp, #24]
   17308:	str	r3, [r2, #4]
   1730c:	b	16dc8 <__assert_fail@plt+0x5b88>
   17310:	mov	r2, r7
   17314:	ldrb	r3, [r2, #1]!
   17318:	sub	r1, r3, #48	; 0x30
   1731c:	cmp	r1, #9
   17320:	bls	17314 <__assert_fail@plt+0x60d4>
   17324:	cmp	r3, #36	; 0x24
   17328:	mvnne	r8, #0
   1732c:	bne	16e98 <__assert_fail@plt+0x5c58>
   17330:	mov	r2, #0
   17334:	b	17340 <__assert_fail@plt+0x6100>
   17338:	cmp	ip, #9
   1733c:	bhi	1794c <__assert_fail@plt+0x670c>
   17340:	ldr	r3, [pc, #1752]	; 17a20 <__assert_fail@plt+0x67e0>
   17344:	mov	r1, r5
   17348:	cmp	r2, r3
   1734c:	addls	r2, r2, r2, lsl #2
   17350:	mvnhi	r3, #0
   17354:	lslls	r3, r2, #1
   17358:	ldrb	ip, [r5, #1]!
   1735c:	adds	r3, r0, r3
   17360:	mov	r2, r3
   17364:	sub	r0, ip, #48	; 0x30
   17368:	uxtb	ip, r0
   1736c:	bcc	17338 <__assert_fail@plt+0x60f8>
   17370:	cmp	ip, #9
   17374:	mvn	r3, #0
   17378:	mov	r1, r5
   1737c:	bls	17358 <__assert_fail@plt+0x6118>
   17380:	mov	sl, fp
   17384:	ldr	fp, [sp, #4]
   17388:	ldr	r3, [sl, #4]
   1738c:	ldr	r2, [sp, #12]
   17390:	cmp	r2, r3
   17394:	beq	173a0 <__assert_fail@plt+0x6160>
   17398:	mov	r0, r3
   1739c:	bl	10f7c <free@plt>
   173a0:	ldr	r0, [fp, #4]
   173a4:	ldr	r3, [sp, #36]	; 0x24
   173a8:	cmp	r3, r0
   173ac:	beq	173b4 <__assert_fail@plt+0x6174>
   173b0:	bl	10f7c <free@plt>
   173b4:	bl	11120 <__errno_location@plt>
   173b8:	mov	r3, #22
   173bc:	mvn	r1, #0
   173c0:	str	r3, [r0]
   173c4:	b	16dfc <__assert_fail@plt+0x5bbc>
   173c8:	str	r5, [r6, #24]
   173cc:	ldrb	r3, [r5, #1]
   173d0:	sub	r3, r3, #48	; 0x30
   173d4:	cmp	r3, #9
   173d8:	bhi	17994 <__assert_fail@plt+0x6754>
   173dc:	ldrb	r3, [r7, #1]!
   173e0:	sub	r3, r3, #48	; 0x30
   173e4:	cmp	r3, #9
   173e8:	bls	173dc <__assert_fail@plt+0x619c>
   173ec:	sub	r3, r7, r5
   173f0:	mov	r5, r7
   173f4:	ldr	r2, [sp, #28]
   173f8:	str	r7, [r6, #28]
   173fc:	cmp	r2, r3
   17400:	movcs	r3, r2
   17404:	ldrb	r4, [r7]
   17408:	str	r3, [sp, #28]
   1740c:	b	16f20 <__assert_fail@plt+0x5ce0>
   17410:	ldr	r3, [sp, #8]
   17414:	lsl	r3, r3, #1
   17418:	cmp	r3, r4
   1741c:	str	r3, [sp, #8]
   17420:	addls	r3, r4, #1
   17424:	strls	r3, [sp, #8]
   17428:	ldr	r3, [sp, #8]
   1742c:	cmn	r3, #-268435455	; 0xf0000001
   17430:	bhi	17a04 <__assert_fail@plt+0x67c4>
   17434:	ldr	r2, [sp, #12]
   17438:	lsl	r1, r3, #4
   1743c:	cmp	r2, sl
   17440:	beq	1779c <__assert_fail@plt+0x655c>
   17444:	mov	r0, sl
   17448:	bl	11000 <realloc@plt>
   1744c:	ldr	r3, [fp, #4]
   17450:	subs	sl, r0, #0
   17454:	beq	17a08 <__assert_fail@plt+0x67c8>
   17458:	ldr	r2, [sp, #12]
   1745c:	cmp	r2, r3
   17460:	ldr	r2, [fp]
   17464:	beq	17a10 <__assert_fail@plt+0x67d0>
   17468:	str	sl, [fp, #4]
   1746c:	b	1712c <__assert_fail@plt+0x5eec>
   17470:	mov	r0, r1
   17474:	bl	11084 <malloc@plt>
   17478:	subs	r3, r0, #0
   1747c:	beq	17898 <__assert_fail@plt+0x6658>
   17480:	add	r2, r4, r4, lsl #2
   17484:	mov	r0, r3
   17488:	add	r2, r4, r2, lsl #1
   1748c:	mov	r1, r6
   17490:	lsl	r2, r2, #2
   17494:	bl	10fa0 <memcpy@plt>
   17498:	ldr	r2, [sp, #4]
   1749c:	ldr	r4, [r2]
   174a0:	mov	r3, r0
   174a4:	b	17300 <__assert_fail@plt+0x60c0>
   174a8:	ldr	r3, [sp, #32]
   174ac:	cmn	r3, #1
   174b0:	str	r3, [r6, #20]
   174b4:	add	r3, r3, #1
   174b8:	beq	17380 <__assert_fail@plt+0x6140>
   174bc:	ldr	r4, [sp, #32]
   174c0:	str	r3, [sp, #32]
   174c4:	b	17118 <__assert_fail@plt+0x5ed8>
   174c8:	cmp	r3, #15
   174cc:	movgt	r3, #12
   174d0:	strgt	r3, [sp, #20]
   174d4:	bgt	17220 <__assert_fail@plt+0x5fe0>
   174d8:	tst	r3, #4
   174dc:	movne	r3, #12
   174e0:	moveq	r3, #11
   174e4:	str	r3, [sp, #20]
   174e8:	b	17220 <__assert_fail@plt+0x5fe0>
   174ec:	mov	r1, r7
   174f0:	ldrb	r2, [r1, #1]!
   174f4:	sub	r0, r2, #48	; 0x30
   174f8:	cmp	r0, #9
   174fc:	bls	174f0 <__assert_fail@plt+0x62b0>
   17500:	cmp	r2, #36	; 0x24
   17504:	bne	1710c <__assert_fail@plt+0x5ecc>
   17508:	mov	r1, #0
   1750c:	b	17518 <__assert_fail@plt+0x62d8>
   17510:	cmp	ip, #9
   17514:	bhi	179d4 <__assert_fail@plt+0x6794>
   17518:	ldr	r2, [pc, #1280]	; 17a20 <__assert_fail@plt+0x67e0>
   1751c:	mov	r0, r7
   17520:	cmp	r1, r2
   17524:	addls	r1, r1, r1, lsl #2
   17528:	mvnhi	r2, #0
   1752c:	lslls	r2, r1, #1
   17530:	ldrb	ip, [r7, #1]!
   17534:	adds	r2, r3, r2
   17538:	mov	r1, r2
   1753c:	sub	r3, ip, #48	; 0x30
   17540:	uxtb	ip, r3
   17544:	bcc	17510 <__assert_fail@plt+0x62d0>
   17548:	cmp	ip, #9
   1754c:	mvn	r2, #0
   17550:	mov	r0, r7
   17554:	bls	17530 <__assert_fail@plt+0x62f0>
   17558:	b	17380 <__assert_fail@plt+0x6140>
   1755c:	cmp	r3, #7
   17560:	movgt	r3, #16
   17564:	movle	r3, #15
   17568:	str	r3, [sp, #20]
   1756c:	b	17220 <__assert_fail@plt+0x5fe0>
   17570:	cmp	r3, #15
   17574:	bgt	1786c <__assert_fail@plt+0x662c>
   17578:	tst	r3, #4
   1757c:	bne	1786c <__assert_fail@plt+0x662c>
   17580:	cmp	r3, #7
   17584:	movgt	r3, #7
   17588:	strgt	r3, [sp, #20]
   1758c:	bgt	17220 <__assert_fail@plt+0x5fe0>
   17590:	tst	r3, #2
   17594:	movne	r3, #1
   17598:	strne	r3, [sp, #20]
   1759c:	bne	17220 <__assert_fail@plt+0x5fe0>
   175a0:	tst	r3, #1
   175a4:	movne	r3, #3
   175a8:	moveq	r3, #5
   175ac:	str	r3, [sp, #20]
   175b0:	b	17220 <__assert_fail@plt+0x5fe0>
   175b4:	cmp	r3, #7
   175b8:	movgt	r3, #14
   175bc:	movle	r3, #13
   175c0:	str	r3, [sp, #20]
   175c4:	b	17220 <__assert_fail@plt+0x5fe0>
   175c8:	cmp	r3, #15
   175cc:	bgt	17860 <__assert_fail@plt+0x6620>
   175d0:	tst	r3, #4
   175d4:	bne	17860 <__assert_fail@plt+0x6620>
   175d8:	cmp	r3, #7
   175dc:	movgt	r3, #8
   175e0:	strgt	r3, [sp, #20]
   175e4:	bgt	17220 <__assert_fail@plt+0x5fe0>
   175e8:	tst	r3, #2
   175ec:	movne	r3, #2
   175f0:	strne	r3, [sp, #20]
   175f4:	bne	17220 <__assert_fail@plt+0x5fe0>
   175f8:	tst	r3, #1
   175fc:	movne	r3, #4
   17600:	moveq	r3, #6
   17604:	str	r3, [sp, #20]
   17608:	b	17220 <__assert_fail@plt+0x5fe0>
   1760c:	mov	r3, #16
   17610:	str	r3, [sp, #20]
   17614:	mov	r4, #115	; 0x73
   17618:	b	17220 <__assert_fail@plt+0x5fe0>
   1761c:	mov	r3, #17
   17620:	str	r3, [sp, #20]
   17624:	b	17220 <__assert_fail@plt+0x5fe0>
   17628:	cmp	r3, #15
   1762c:	bgt	17854 <__assert_fail@plt+0x6614>
   17630:	tst	r3, #4
   17634:	bne	17854 <__assert_fail@plt+0x6614>
   17638:	cmp	r3, #7
   1763c:	movgt	r3, #21
   17640:	strgt	r3, [sp, #20]
   17644:	bgt	17220 <__assert_fail@plt+0x5fe0>
   17648:	tst	r3, #2
   1764c:	movne	r3, #18
   17650:	strne	r3, [sp, #20]
   17654:	bne	17220 <__assert_fail@plt+0x5fe0>
   17658:	tst	r3, #1
   1765c:	movne	r3, #19
   17660:	moveq	r3, #20
   17664:	str	r3, [sp, #20]
   17668:	b	17220 <__assert_fail@plt+0x5fe0>
   1766c:	ldr	r2, [sp, #20]
   17670:	cmp	r3, r2
   17674:	beq	17274 <__assert_fail@plt+0x6034>
   17678:	mov	r3, sl
   1767c:	ldr	fp, [sp, #4]
   17680:	b	1738c <__assert_fail@plt+0x614c>
   17684:	ldr	r3, [sp, #8]
   17688:	lsl	r3, r3, #1
   1768c:	cmp	r3, r8
   17690:	str	r3, [sp, #8]
   17694:	addls	r3, r8, #1
   17698:	strls	r3, [sp, #8]
   1769c:	ldr	r3, [sp, #8]
   176a0:	cmn	r3, #-268435455	; 0xf0000001
   176a4:	bhi	17a04 <__assert_fail@plt+0x67c4>
   176a8:	ldr	r2, [sp, #12]
   176ac:	lsl	r1, r3, #4
   176b0:	cmp	r2, sl
   176b4:	beq	17770 <__assert_fail@plt+0x6530>
   176b8:	mov	r0, sl
   176bc:	bl	11000 <realloc@plt>
   176c0:	subs	sl, r0, #0
   176c4:	beq	179b8 <__assert_fail@plt+0x6778>
   176c8:	ldr	r3, [fp, #4]
   176cc:	ldr	r2, [sp, #12]
   176d0:	cmp	r2, r3
   176d4:	beq	179f8 <__assert_fail@plt+0x67b8>
   176d8:	str	sl, [fp, #4]
   176dc:	b	1723c <__assert_fail@plt+0x5ffc>
   176e0:	ldr	r3, [sp, #32]
   176e4:	cmn	r3, #1
   176e8:	str	r3, [r6, #40]	; 0x28
   176ec:	add	r3, r3, #1
   176f0:	beq	17380 <__assert_fail@plt+0x6140>
   176f4:	ldr	r8, [sp, #32]
   176f8:	str	r3, [sp, #32]
   176fc:	b	1722c <__assert_fail@plt+0x5fec>
   17700:	str	r5, [r6, #12]
   17704:	ldrb	r3, [r5]
   17708:	sub	r3, r3, #48	; 0x30
   1770c:	cmp	r3, #9
   17710:	bhi	17750 <__assert_fail@plt+0x6510>
   17714:	mov	r7, r5
   17718:	b	17720 <__assert_fail@plt+0x64e0>
   1771c:	mov	r7, r2
   17720:	ldrb	r3, [r7, #1]
   17724:	add	r2, r7, #1
   17728:	sub	r3, r3, #48	; 0x30
   1772c:	cmp	r3, #9
   17730:	bls	1771c <__assert_fail@plt+0x64dc>
   17734:	ldr	r3, [sp, #16]
   17738:	sub	r5, r2, r5
   1773c:	cmp	r3, r5
   17740:	movcc	r3, r5
   17744:	add	r7, r7, #2
   17748:	mov	r5, r2
   1774c:	str	r3, [sp, #16]
   17750:	str	r5, [r6, #16]
   17754:	ldrb	r4, [r5]
   17758:	b	16f18 <__assert_fail@plt+0x5cd8>
   1775c:	cmp	r3, #5
   17760:	bne	17678 <__assert_fail@plt+0x6438>
   17764:	mov	r5, r7
   17768:	ldrb	r4, [r7], #1
   1776c:	b	16f18 <__assert_fail@plt+0x5cd8>
   17770:	mov	r0, r1
   17774:	bl	11084 <malloc@plt>
   17778:	subs	r3, r0, #0
   1777c:	beq	177ac <__assert_fail@plt+0x656c>
   17780:	ldr	r2, [fp]
   17784:	mov	r1, sl
   17788:	mov	r0, r3
   1778c:	lsl	r2, r2, #4
   17790:	bl	10fa0 <memcpy@plt>
   17794:	mov	sl, r0
   17798:	b	176d8 <__assert_fail@plt+0x6498>
   1779c:	mov	r0, r1
   177a0:	bl	11084 <malloc@plt>
   177a4:	subs	r3, r0, #0
   177a8:	bne	17878 <__assert_fail@plt+0x6638>
   177ac:	ldr	fp, [sp, #4]
   177b0:	ldr	r0, [fp, #4]
   177b4:	ldr	r3, [sp, #36]	; 0x24
   177b8:	cmp	r3, r0
   177bc:	beq	177c4 <__assert_fail@plt+0x6584>
   177c0:	bl	10f7c <free@plt>
   177c4:	bl	11120 <__errno_location@plt>
   177c8:	mov	r3, #12
   177cc:	mvn	r1, #0
   177d0:	str	r3, [r0]
   177d4:	mov	r0, r1
   177d8:	add	sp, sp, #44	; 0x2c
   177dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177e0:	ldr	r3, [sp, #8]
   177e4:	lsl	r3, r3, #1
   177e8:	cmp	r3, r4
   177ec:	str	r3, [sp, #8]
   177f0:	addls	r3, r4, #1
   177f4:	strls	r3, [sp, #8]
   177f8:	ldr	r3, [sp, #8]
   177fc:	cmn	r3, #-268435455	; 0xf0000001
   17800:	bhi	17a04 <__assert_fail@plt+0x67c4>
   17804:	ldr	r2, [sp, #12]
   17808:	lsl	r1, r3, #4
   1780c:	cmp	r2, sl
   17810:	beq	17964 <__assert_fail@plt+0x6724>
   17814:	mov	r0, sl
   17818:	bl	11000 <realloc@plt>
   1781c:	ldr	r3, [fp, #4]
   17820:	subs	sl, r0, #0
   17824:	beq	17a08 <__assert_fail@plt+0x67c8>
   17828:	ldr	r2, [sp, #12]
   1782c:	cmp	r2, r3
   17830:	ldr	r2, [fp]
   17834:	beq	179ec <__assert_fail@plt+0x67ac>
   17838:	str	sl, [fp, #4]
   1783c:	b	171d4 <__assert_fail@plt+0x5f94>
   17840:	cmp	r3, #5
   17844:	bne	17678 <__assert_fail@plt+0x6438>
   17848:	ldrb	r4, [r7]
   1784c:	mov	r5, r7
   17850:	b	16f20 <__assert_fail@plt+0x5ce0>
   17854:	mov	r3, #22
   17858:	str	r3, [sp, #20]
   1785c:	b	17220 <__assert_fail@plt+0x5fe0>
   17860:	mov	r3, #10
   17864:	str	r3, [sp, #20]
   17868:	b	17220 <__assert_fail@plt+0x5fe0>
   1786c:	mov	r3, #9
   17870:	str	r3, [sp, #20]
   17874:	b	17220 <__assert_fail@plt+0x5fe0>
   17878:	ldr	r2, [fp]
   1787c:	lsl	r2, r2, #4
   17880:	mov	r1, sl
   17884:	mov	r0, r3
   17888:	bl	10fa0 <memcpy@plt>
   1788c:	ldr	r2, [fp]
   17890:	mov	sl, r0
   17894:	b	17468 <__assert_fail@plt+0x6228>
   17898:	mov	sl, fp
   1789c:	ldr	r2, [sp, #12]
   178a0:	ldr	r3, [sl, #4]
   178a4:	ldr	fp, [sp, #4]
   178a8:	cmp	r2, r3
   178ac:	beq	177c4 <__assert_fail@plt+0x6584>
   178b0:	mov	r0, r3
   178b4:	bl	10f7c <free@plt>
   178b8:	b	177b0 <__assert_fail@plt+0x6570>
   178bc:	ldr	r3, [sp, #32]
   178c0:	cmn	r3, #1
   178c4:	str	r3, [r6, #32]
   178c8:	add	r3, r3, #1
   178cc:	beq	17380 <__assert_fail@plt+0x6140>
   178d0:	ldr	r4, [sp, #32]
   178d4:	str	r3, [sp, #32]
   178d8:	b	171c0 <__assert_fail@plt+0x5f80>
   178dc:	mov	r2, r7
   178e0:	ldrb	r3, [r2, #1]!
   178e4:	sub	r0, r3, #48	; 0x30
   178e8:	cmp	r0, #9
   178ec:	bls	178e0 <__assert_fail@plt+0x66a0>
   178f0:	cmp	r3, #36	; 0x24
   178f4:	bne	171b4 <__assert_fail@plt+0x5f74>
   178f8:	mov	r2, #0
   178fc:	b	17908 <__assert_fail@plt+0x66c8>
   17900:	cmp	ip, #9
   17904:	bhi	179a0 <__assert_fail@plt+0x6760>
   17908:	ldr	r3, [pc, #272]	; 17a20 <__assert_fail@plt+0x67e0>
   1790c:	mov	r0, r7
   17910:	cmp	r2, r3
   17914:	addls	r2, r2, r2, lsl #2
   17918:	mvnhi	r3, #0
   1791c:	lslls	r3, r2, #1
   17920:	ldrb	ip, [r7, #1]!
   17924:	adds	r3, r1, r3
   17928:	mov	r2, r3
   1792c:	sub	r1, ip, #48	; 0x30
   17930:	uxtb	ip, r1
   17934:	bcc	17900 <__assert_fail@plt+0x66c0>
   17938:	cmp	ip, #9
   1793c:	mvn	r3, #0
   17940:	mov	r0, r7
   17944:	bls	17920 <__assert_fail@plt+0x66e0>
   17948:	b	17380 <__assert_fail@plt+0x6140>
   1794c:	sub	r8, r3, #1
   17950:	cmn	r8, #3
   17954:	bhi	17380 <__assert_fail@plt+0x6140>
   17958:	add	r5, r1, #2
   1795c:	ldrb	r4, [r1, #2]
   17960:	b	16e98 <__assert_fail@plt+0x5c58>
   17964:	mov	r0, r1
   17968:	bl	11084 <malloc@plt>
   1796c:	subs	r3, r0, #0
   17970:	beq	177ac <__assert_fail@plt+0x656c>
   17974:	ldr	r2, [fp]
   17978:	lsl	r2, r2, #4
   1797c:	mov	r1, sl
   17980:	mov	r0, r3
   17984:	bl	10fa0 <memcpy@plt>
   17988:	ldr	r2, [fp]
   1798c:	mov	sl, r0
   17990:	b	17838 <__assert_fail@plt+0x65f8>
   17994:	mov	r5, r7
   17998:	mov	r3, #1
   1799c:	b	173f4 <__assert_fail@plt+0x61b4>
   179a0:	sub	r4, r3, #1
   179a4:	cmn	r4, #3
   179a8:	bhi	17380 <__assert_fail@plt+0x6140>
   179ac:	str	r4, [r6, #32]
   179b0:	add	r7, r0, #2
   179b4:	b	171c0 <__assert_fail@plt+0x5f80>
   179b8:	mov	sl, fp
   179bc:	ldr	fp, [sp, #4]
   179c0:	ldr	r3, [sl, #4]
   179c4:	ldr	r2, [sp, #12]
   179c8:	cmp	r2, r3
   179cc:	bne	178b0 <__assert_fail@plt+0x6670>
   179d0:	b	177b0 <__assert_fail@plt+0x6570>
   179d4:	sub	r4, r2, #1
   179d8:	cmn	r4, #3
   179dc:	bhi	17380 <__assert_fail@plt+0x6140>
   179e0:	str	r4, [r6, #20]
   179e4:	add	r7, r0, #2
   179e8:	b	17118 <__assert_fail@plt+0x5ed8>
   179ec:	mov	r3, sl
   179f0:	ldr	sl, [sp, #12]
   179f4:	b	17978 <__assert_fail@plt+0x6738>
   179f8:	mov	r3, sl
   179fc:	mov	sl, r2
   17a00:	b	17780 <__assert_fail@plt+0x6540>
   17a04:	mov	r3, sl
   17a08:	ldr	fp, [sp, #4]
   17a0c:	b	179c4 <__assert_fail@plt+0x6784>
   17a10:	mov	r3, sl
   17a14:	ldr	sl, [sp, #12]
   17a18:	b	1787c <__assert_fail@plt+0x663c>
   17a1c:	ldrbeq	r7, [r1, #1117]	; 0x45d
   17a20:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   17a24:	subs	r2, r1, #1
   17a28:	bxeq	lr
   17a2c:	bcc	17c04 <__assert_fail@plt+0x69c4>
   17a30:	cmp	r0, r1
   17a34:	bls	17be8 <__assert_fail@plt+0x69a8>
   17a38:	tst	r1, r2
   17a3c:	beq	17bf4 <__assert_fail@plt+0x69b4>
   17a40:	clz	r3, r0
   17a44:	clz	r2, r1
   17a48:	sub	r3, r2, r3
   17a4c:	rsbs	r3, r3, #31
   17a50:	addne	r3, r3, r3, lsl #1
   17a54:	mov	r2, #0
   17a58:	addne	pc, pc, r3, lsl #2
   17a5c:	nop			; (mov r0, r0)
   17a60:	cmp	r0, r1, lsl #31
   17a64:	adc	r2, r2, r2
   17a68:	subcs	r0, r0, r1, lsl #31
   17a6c:	cmp	r0, r1, lsl #30
   17a70:	adc	r2, r2, r2
   17a74:	subcs	r0, r0, r1, lsl #30
   17a78:	cmp	r0, r1, lsl #29
   17a7c:	adc	r2, r2, r2
   17a80:	subcs	r0, r0, r1, lsl #29
   17a84:	cmp	r0, r1, lsl #28
   17a88:	adc	r2, r2, r2
   17a8c:	subcs	r0, r0, r1, lsl #28
   17a90:	cmp	r0, r1, lsl #27
   17a94:	adc	r2, r2, r2
   17a98:	subcs	r0, r0, r1, lsl #27
   17a9c:	cmp	r0, r1, lsl #26
   17aa0:	adc	r2, r2, r2
   17aa4:	subcs	r0, r0, r1, lsl #26
   17aa8:	cmp	r0, r1, lsl #25
   17aac:	adc	r2, r2, r2
   17ab0:	subcs	r0, r0, r1, lsl #25
   17ab4:	cmp	r0, r1, lsl #24
   17ab8:	adc	r2, r2, r2
   17abc:	subcs	r0, r0, r1, lsl #24
   17ac0:	cmp	r0, r1, lsl #23
   17ac4:	adc	r2, r2, r2
   17ac8:	subcs	r0, r0, r1, lsl #23
   17acc:	cmp	r0, r1, lsl #22
   17ad0:	adc	r2, r2, r2
   17ad4:	subcs	r0, r0, r1, lsl #22
   17ad8:	cmp	r0, r1, lsl #21
   17adc:	adc	r2, r2, r2
   17ae0:	subcs	r0, r0, r1, lsl #21
   17ae4:	cmp	r0, r1, lsl #20
   17ae8:	adc	r2, r2, r2
   17aec:	subcs	r0, r0, r1, lsl #20
   17af0:	cmp	r0, r1, lsl #19
   17af4:	adc	r2, r2, r2
   17af8:	subcs	r0, r0, r1, lsl #19
   17afc:	cmp	r0, r1, lsl #18
   17b00:	adc	r2, r2, r2
   17b04:	subcs	r0, r0, r1, lsl #18
   17b08:	cmp	r0, r1, lsl #17
   17b0c:	adc	r2, r2, r2
   17b10:	subcs	r0, r0, r1, lsl #17
   17b14:	cmp	r0, r1, lsl #16
   17b18:	adc	r2, r2, r2
   17b1c:	subcs	r0, r0, r1, lsl #16
   17b20:	cmp	r0, r1, lsl #15
   17b24:	adc	r2, r2, r2
   17b28:	subcs	r0, r0, r1, lsl #15
   17b2c:	cmp	r0, r1, lsl #14
   17b30:	adc	r2, r2, r2
   17b34:	subcs	r0, r0, r1, lsl #14
   17b38:	cmp	r0, r1, lsl #13
   17b3c:	adc	r2, r2, r2
   17b40:	subcs	r0, r0, r1, lsl #13
   17b44:	cmp	r0, r1, lsl #12
   17b48:	adc	r2, r2, r2
   17b4c:	subcs	r0, r0, r1, lsl #12
   17b50:	cmp	r0, r1, lsl #11
   17b54:	adc	r2, r2, r2
   17b58:	subcs	r0, r0, r1, lsl #11
   17b5c:	cmp	r0, r1, lsl #10
   17b60:	adc	r2, r2, r2
   17b64:	subcs	r0, r0, r1, lsl #10
   17b68:	cmp	r0, r1, lsl #9
   17b6c:	adc	r2, r2, r2
   17b70:	subcs	r0, r0, r1, lsl #9
   17b74:	cmp	r0, r1, lsl #8
   17b78:	adc	r2, r2, r2
   17b7c:	subcs	r0, r0, r1, lsl #8
   17b80:	cmp	r0, r1, lsl #7
   17b84:	adc	r2, r2, r2
   17b88:	subcs	r0, r0, r1, lsl #7
   17b8c:	cmp	r0, r1, lsl #6
   17b90:	adc	r2, r2, r2
   17b94:	subcs	r0, r0, r1, lsl #6
   17b98:	cmp	r0, r1, lsl #5
   17b9c:	adc	r2, r2, r2
   17ba0:	subcs	r0, r0, r1, lsl #5
   17ba4:	cmp	r0, r1, lsl #4
   17ba8:	adc	r2, r2, r2
   17bac:	subcs	r0, r0, r1, lsl #4
   17bb0:	cmp	r0, r1, lsl #3
   17bb4:	adc	r2, r2, r2
   17bb8:	subcs	r0, r0, r1, lsl #3
   17bbc:	cmp	r0, r1, lsl #2
   17bc0:	adc	r2, r2, r2
   17bc4:	subcs	r0, r0, r1, lsl #2
   17bc8:	cmp	r0, r1, lsl #1
   17bcc:	adc	r2, r2, r2
   17bd0:	subcs	r0, r0, r1, lsl #1
   17bd4:	cmp	r0, r1
   17bd8:	adc	r2, r2, r2
   17bdc:	subcs	r0, r0, r1
   17be0:	mov	r0, r2
   17be4:	bx	lr
   17be8:	moveq	r0, #1
   17bec:	movne	r0, #0
   17bf0:	bx	lr
   17bf4:	clz	r2, r1
   17bf8:	rsb	r2, r2, #31
   17bfc:	lsr	r0, r0, r2
   17c00:	bx	lr
   17c04:	cmp	r0, #0
   17c08:	mvnne	r0, #0
   17c0c:	b	17d40 <__assert_fail@plt+0x6b00>
   17c10:	cmp	r1, #0
   17c14:	beq	17c04 <__assert_fail@plt+0x69c4>
   17c18:	push	{r0, r1, lr}
   17c1c:	bl	17a24 <__assert_fail@plt+0x67e4>
   17c20:	pop	{r1, r2, lr}
   17c24:	mul	r3, r2, r0
   17c28:	sub	r1, r1, r3
   17c2c:	bx	lr
   17c30:	cmp	r3, #0
   17c34:	cmpeq	r2, #0
   17c38:	bne	17c5c <__assert_fail@plt+0x6a1c>
   17c3c:	cmp	r1, #0
   17c40:	movlt	r1, #-2147483648	; 0x80000000
   17c44:	movlt	r0, #0
   17c48:	blt	17c58 <__assert_fail@plt+0x6a18>
   17c4c:	cmpeq	r0, #0
   17c50:	mvnne	r1, #-2147483648	; 0x80000000
   17c54:	mvnne	r0, #0
   17c58:	b	17d40 <__assert_fail@plt+0x6b00>
   17c5c:	sub	sp, sp, #8
   17c60:	push	{sp, lr}
   17c64:	cmp	r1, #0
   17c68:	blt	17c88 <__assert_fail@plt+0x6a48>
   17c6c:	cmp	r3, #0
   17c70:	blt	17cbc <__assert_fail@plt+0x6a7c>
   17c74:	bl	17d50 <__assert_fail@plt+0x6b10>
   17c78:	ldr	lr, [sp, #4]
   17c7c:	add	sp, sp, #8
   17c80:	pop	{r2, r3}
   17c84:	bx	lr
   17c88:	rsbs	r0, r0, #0
   17c8c:	sbc	r1, r1, r1, lsl #1
   17c90:	cmp	r3, #0
   17c94:	blt	17ce0 <__assert_fail@plt+0x6aa0>
   17c98:	bl	17d50 <__assert_fail@plt+0x6b10>
   17c9c:	ldr	lr, [sp, #4]
   17ca0:	add	sp, sp, #8
   17ca4:	pop	{r2, r3}
   17ca8:	rsbs	r0, r0, #0
   17cac:	sbc	r1, r1, r1, lsl #1
   17cb0:	rsbs	r2, r2, #0
   17cb4:	sbc	r3, r3, r3, lsl #1
   17cb8:	bx	lr
   17cbc:	rsbs	r2, r2, #0
   17cc0:	sbc	r3, r3, r3, lsl #1
   17cc4:	bl	17d50 <__assert_fail@plt+0x6b10>
   17cc8:	ldr	lr, [sp, #4]
   17ccc:	add	sp, sp, #8
   17cd0:	pop	{r2, r3}
   17cd4:	rsbs	r0, r0, #0
   17cd8:	sbc	r1, r1, r1, lsl #1
   17cdc:	bx	lr
   17ce0:	rsbs	r2, r2, #0
   17ce4:	sbc	r3, r3, r3, lsl #1
   17ce8:	bl	17d50 <__assert_fail@plt+0x6b10>
   17cec:	ldr	lr, [sp, #4]
   17cf0:	add	sp, sp, #8
   17cf4:	pop	{r2, r3}
   17cf8:	rsbs	r2, r2, #0
   17cfc:	sbc	r3, r3, r3, lsl #1
   17d00:	bx	lr
   17d04:	cmp	r3, #0
   17d08:	cmpeq	r2, #0
   17d0c:	bne	17d24 <__assert_fail@plt+0x6ae4>
   17d10:	cmp	r1, #0
   17d14:	cmpeq	r0, #0
   17d18:	mvnne	r1, #0
   17d1c:	mvnne	r0, #0
   17d20:	b	17d40 <__assert_fail@plt+0x6b00>
   17d24:	sub	sp, sp, #8
   17d28:	push	{sp, lr}
   17d2c:	bl	17d50 <__assert_fail@plt+0x6b10>
   17d30:	ldr	lr, [sp, #4]
   17d34:	add	sp, sp, #8
   17d38:	pop	{r2, r3}
   17d3c:	bx	lr
   17d40:	push	{r1, lr}
   17d44:	mov	r0, #8
   17d48:	bl	10f4c <raise@plt>
   17d4c:	pop	{r1, pc}
   17d50:	cmp	r1, r3
   17d54:	cmpeq	r0, r2
   17d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d5c:	mov	r4, r0
   17d60:	movcc	r0, #0
   17d64:	mov	r5, r1
   17d68:	ldr	lr, [sp, #36]	; 0x24
   17d6c:	movcc	r1, r0
   17d70:	bcc	17e6c <__assert_fail@plt+0x6c2c>
   17d74:	cmp	r3, #0
   17d78:	clzeq	ip, r2
   17d7c:	clzne	ip, r3
   17d80:	addeq	ip, ip, #32
   17d84:	cmp	r5, #0
   17d88:	clzeq	r1, r4
   17d8c:	addeq	r1, r1, #32
   17d90:	clzne	r1, r5
   17d94:	sub	ip, ip, r1
   17d98:	sub	sl, ip, #32
   17d9c:	lsl	r9, r3, ip
   17da0:	rsb	fp, ip, #32
   17da4:	orr	r9, r9, r2, lsl sl
   17da8:	orr	r9, r9, r2, lsr fp
   17dac:	lsl	r8, r2, ip
   17db0:	cmp	r5, r9
   17db4:	cmpeq	r4, r8
   17db8:	movcc	r0, #0
   17dbc:	movcc	r1, r0
   17dc0:	bcc	17ddc <__assert_fail@plt+0x6b9c>
   17dc4:	mov	r0, #1
   17dc8:	subs	r4, r4, r8
   17dcc:	lsl	r1, r0, sl
   17dd0:	orr	r1, r1, r0, lsr fp
   17dd4:	lsl	r0, r0, ip
   17dd8:	sbc	r5, r5, r9
   17ddc:	cmp	ip, #0
   17de0:	beq	17e6c <__assert_fail@plt+0x6c2c>
   17de4:	lsr	r6, r8, #1
   17de8:	orr	r6, r6, r9, lsl #31
   17dec:	lsr	r7, r9, #1
   17df0:	mov	r2, ip
   17df4:	b	17e18 <__assert_fail@plt+0x6bd8>
   17df8:	subs	r3, r4, r6
   17dfc:	sbc	r8, r5, r7
   17e00:	adds	r3, r3, r3
   17e04:	adc	r8, r8, r8
   17e08:	adds	r4, r3, #1
   17e0c:	adc	r5, r8, #0
   17e10:	subs	r2, r2, #1
   17e14:	beq	17e34 <__assert_fail@plt+0x6bf4>
   17e18:	cmp	r5, r7
   17e1c:	cmpeq	r4, r6
   17e20:	bcs	17df8 <__assert_fail@plt+0x6bb8>
   17e24:	adds	r4, r4, r4
   17e28:	adc	r5, r5, r5
   17e2c:	subs	r2, r2, #1
   17e30:	bne	17e18 <__assert_fail@plt+0x6bd8>
   17e34:	lsr	r3, r4, ip
   17e38:	orr	r3, r3, r5, lsl fp
   17e3c:	lsr	r2, r5, ip
   17e40:	orr	r3, r3, r5, lsr sl
   17e44:	adds	r0, r0, r4
   17e48:	mov	r4, r3
   17e4c:	lsl	r3, r2, ip
   17e50:	orr	r3, r3, r4, lsl sl
   17e54:	lsl	ip, r4, ip
   17e58:	orr	r3, r3, r4, lsr fp
   17e5c:	adc	r1, r1, r5
   17e60:	subs	r0, r0, ip
   17e64:	mov	r5, r2
   17e68:	sbc	r1, r1, r3
   17e6c:	cmp	lr, #0
   17e70:	strdne	r4, [lr]
   17e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e7c:	mov	r7, r0
   17e80:	ldr	r6, [pc, #72]	; 17ed0 <__assert_fail@plt+0x6c90>
   17e84:	ldr	r5, [pc, #72]	; 17ed4 <__assert_fail@plt+0x6c94>
   17e88:	add	r6, pc, r6
   17e8c:	add	r5, pc, r5
   17e90:	sub	r6, r6, r5
   17e94:	mov	r8, r1
   17e98:	mov	r9, r2
   17e9c:	bl	10f14 <calloc@plt-0x20>
   17ea0:	asrs	r6, r6, #2
   17ea4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ea8:	mov	r4, #0
   17eac:	add	r4, r4, #1
   17eb0:	ldr	r3, [r5], #4
   17eb4:	mov	r2, r9
   17eb8:	mov	r1, r8
   17ebc:	mov	r0, r7
   17ec0:	blx	r3
   17ec4:	cmp	r6, r4
   17ec8:	bne	17eac <__assert_fail@plt+0x6c6c>
   17ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ed0:	andeq	r1, r1, r4, ror r0
   17ed4:	andeq	r1, r1, ip, rrx
   17ed8:	bx	lr
   17edc:	ldr	r3, [pc, #12]	; 17ef0 <__assert_fail@plt+0x6cb0>
   17ee0:	mov	r1, #0
   17ee4:	add	r3, pc, r3
   17ee8:	ldr	r2, [r3]
   17eec:	b	11138 <__cxa_atexit@plt>
   17ef0:	andeq	r1, r1, r0, lsr r2

Disassembly of section .fini:

00017ef4 <.fini>:
   17ef4:	push	{r3, lr}
   17ef8:	pop	{r3, pc}
