
raspbian-preinstalled/dirmngr-client:     file format elf32-littlearm


Disassembly of section .init:

0001212c <.init>:
   1212c:	push	{r3, lr}
   12130:	bl	13614 <__assert_fail@plt+0xd0c>
   12134:	pop	{r3, pc}

Disassembly of section .plt:

00012138 <gcry_xmalloc@plt-0x14>:
   12138:	push	{lr}		; (str lr, [sp, #-4]!)
   1213c:	ldr	lr, [pc, #4]	; 12148 <gcry_xmalloc@plt-0x4>
   12140:	add	lr, pc, lr
   12144:	ldr	pc, [lr, #8]!
   12148:	andeq	r2, r2, r0, lsl ip

0001214c <gcry_xmalloc@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #139264	; 0x22000
   12154:	ldr	pc, [ip, #3088]!	; 0xc10

00012158 <calloc@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #139264	; 0x22000
   12160:	ldr	pc, [ip, #3080]!	; 0xc08

00012164 <raise@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #139264	; 0x22000
   1216c:	ldr	pc, [ip, #3072]!	; 0xc00

00012170 <gpgrt_funlockfile@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #139264	; 0x22000
   12178:	ldr	pc, [ip, #3064]!	; 0xbf8

0001217c <gcry_malloc@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #139264	; 0x22000
   12184:	ldr	pc, [ip, #3056]!	; 0xbf0

00012188 <getpwnam@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #139264	; 0x22000
   12190:	ldr	pc, [ip, #3048]!	; 0xbe8

00012194 <iconv_close@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #139264	; 0x22000
   1219c:	ldr	pc, [ip, #3040]!	; 0xbe0

000121a0 <iconv@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #139264	; 0x22000
   121a8:	ldr	pc, [ip, #3032]!	; 0xbd8

000121ac <strcmp@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #139264	; 0x22000
   121b4:	ldr	pc, [ip, #3024]!	; 0xbd0

000121b8 <gpgrt_vfprintf_unlocked@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #139264	; 0x22000
   121c0:	ldr	pc, [ip, #3016]!	; 0xbc8

000121c4 <strtol@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #139264	; 0x22000
   121cc:	ldr	pc, [ip, #3008]!	; 0xbc0

000121d0 <getpwuid@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #139264	; 0x22000
   121d8:	ldr	pc, [ip, #3000]!	; 0xbb8

000121dc <strcspn@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #139264	; 0x22000
   121e4:	ldr	pc, [ip, #2992]!	; 0xbb0

000121e8 <setrlimit64@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #139264	; 0x22000
   121f0:	ldr	pc, [ip, #2984]!	; 0xba8

000121f4 <read@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #139264	; 0x22000
   121fc:	ldr	pc, [ip, #2976]!	; 0xba0

00012200 <fflush@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #139264	; 0x22000
   12208:	ldr	pc, [ip, #2968]!	; 0xb98

0001220c <getuid@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #139264	; 0x22000
   12214:	ldr	pc, [ip, #2960]!	; 0xb90

00012218 <sigprocmask@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #139264	; 0x22000
   12220:	ldr	pc, [ip, #2952]!	; 0xb88

00012224 <memmove@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #139264	; 0x22000
   1222c:	ldr	pc, [ip, #2944]!	; 0xb80

00012230 <free@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #139264	; 0x22000
   12238:	ldr	pc, [ip, #2936]!	; 0xb78

0001223c <_gpgrt_putc_overflow@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #139264	; 0x22000
   12244:	ldr	pc, [ip, #2928]!	; 0xb70

00012248 <nanosleep@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #139264	; 0x22000
   12250:	ldr	pc, [ip, #2920]!	; 0xb68

00012254 <ferror@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #139264	; 0x22000
   1225c:	ldr	pc, [ip, #2912]!	; 0xb60

00012260 <assuan_set_log_cb@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #139264	; 0x22000
   12268:	ldr	pc, [ip, #2904]!	; 0xb58

0001226c <inet_pton@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #139264	; 0x22000
   12274:	ldr	pc, [ip, #2896]!	; 0xb50

00012278 <_exit@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #139264	; 0x22000
   12280:	ldr	pc, [ip, #2888]!	; 0xb48

00012284 <memcpy@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #139264	; 0x22000
   1228c:	ldr	pc, [ip, #2880]!	; 0xb40

00012290 <assuan_set_assuan_log_prefix@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #139264	; 0x22000
   12298:	ldr	pc, [ip, #2872]!	; 0xb38

0001229c <time@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #139264	; 0x22000
   122a4:	ldr	pc, [ip, #2864]!	; 0xb30

000122a8 <gcry_free@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #139264	; 0x22000
   122b0:	ldr	pc, [ip, #2856]!	; 0xb28

000122b4 <memcmp@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #139264	; 0x22000
   122bc:	ldr	pc, [ip, #2848]!	; 0xb20

000122c0 <select@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #139264	; 0x22000
   122c8:	ldr	pc, [ip, #2840]!	; 0xb18

000122cc <sleep@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #139264	; 0x22000
   122d4:	ldr	pc, [ip, #2832]!	; 0xb10

000122d8 <stpcpy@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #139264	; 0x22000
   122e0:	ldr	pc, [ip, #2824]!	; 0xb08

000122e4 <uname@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #139264	; 0x22000
   122ec:	ldr	pc, [ip, #2816]!	; 0xb00

000122f0 <dcgettext@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #139264	; 0x22000
   122f8:	ldr	pc, [ip, #2808]!	; 0xaf8

000122fc <__stack_chk_fail@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #139264	; 0x22000
   12304:	ldr	pc, [ip, #2800]!	; 0xaf0

00012308 <gpgrt_set_alloc_func@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #139264	; 0x22000
   12310:	ldr	pc, [ip, #2792]!	; 0xae8

00012314 <sysconf@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #139264	; 0x22000
   1231c:	ldr	pc, [ip, #2784]!	; 0xae0

00012320 <unlink@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #139264	; 0x22000
   12328:	ldr	pc, [ip, #2776]!	; 0xad8

0001232c <dup2@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #139264	; 0x22000
   12334:	ldr	pc, [ip, #2768]!	; 0xad0

00012338 <gpgrt_ferror@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #139264	; 0x22000
   12340:	ldr	pc, [ip, #2760]!	; 0xac8

00012344 <getrlimit64@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #139264	; 0x22000
   1234c:	ldr	pc, [ip, #2752]!	; 0xac0

00012350 <realloc@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #139264	; 0x22000
   12358:	ldr	pc, [ip, #2744]!	; 0xab8

0001235c <gpgrt_fflush@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #139264	; 0x22000
   12364:	ldr	pc, [ip, #2736]!	; 0xab0

00012368 <dup@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #139264	; 0x22000
   12370:	ldr	pc, [ip, #2728]!	; 0xaa8

00012374 <textdomain@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #139264	; 0x22000
   1237c:	ldr	pc, [ip, #2720]!	; 0xaa0

00012380 <tmpfile64@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #139264	; 0x22000
   12388:	ldr	pc, [ip, #2712]!	; 0xa98

0001238c <chdir@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #139264	; 0x22000
   12394:	ldr	pc, [ip, #2704]!	; 0xa90

00012398 <geteuid@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #139264	; 0x22000
   123a0:	ldr	pc, [ip, #2696]!	; 0xa88

000123a4 <gpgrt_fputs_unlocked@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #139264	; 0x22000
   123ac:	ldr	pc, [ip, #2688]!	; 0xa80

000123b0 <__fxstat64@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #139264	; 0x22000
   123b8:	ldr	pc, [ip, #2680]!	; 0xa78

000123bc <sigaction@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #139264	; 0x22000
   123c4:	ldr	pc, [ip, #2672]!	; 0xa70

000123c8 <__memcpy_chk@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #139264	; 0x22000
   123d0:	ldr	pc, [ip, #2664]!	; 0xa68

000123d4 <gpg_err_code_from_errno@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #139264	; 0x22000
   123dc:	ldr	pc, [ip, #2656]!	; 0xa60

000123e0 <fwrite@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #139264	; 0x22000
   123e8:	ldr	pc, [ip, #2648]!	; 0xa58

000123ec <gcry_check_version@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #139264	; 0x22000
   123f4:	ldr	pc, [ip, #2640]!	; 0xa50

000123f8 <waitpid@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #139264	; 0x22000
   12400:	ldr	pc, [ip, #2632]!	; 0xa48

00012404 <strcpy@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #139264	; 0x22000
   1240c:	ldr	pc, [ip, #2624]!	; 0xa40

00012410 <fread@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #139264	; 0x22000
   12418:	ldr	pc, [ip, #2616]!	; 0xa38

0001241c <bind_textdomain_codeset@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #139264	; 0x22000
   12424:	ldr	pc, [ip, #2608]!	; 0xa30

00012428 <gpgrt_fputc@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #139264	; 0x22000
   12430:	ldr	pc, [ip, #2600]!	; 0xa28

00012434 <gpgrt_flockfile@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #139264	; 0x22000
   1243c:	ldr	pc, [ip, #2592]!	; 0xa20

00012440 <gpgrt_fclose@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #139264	; 0x22000
   12448:	ldr	pc, [ip, #2584]!	; 0xa18

0001244c <gpgrt_setvbuf@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #139264	; 0x22000
   12454:	ldr	pc, [ip, #2576]!	; 0xa10

00012458 <opendir@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #139264	; 0x22000
   12460:	ldr	pc, [ip, #2568]!	; 0xa08

00012464 <assuan_transact@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #139264	; 0x22000
   1246c:	ldr	pc, [ip, #2560]!	; 0xa00

00012470 <open64@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #139264	; 0x22000
   12478:	ldr	pc, [ip, #2552]!	; 0x9f8

0001247c <getenv@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #139264	; 0x22000
   12484:	ldr	pc, [ip, #2544]!	; 0x9f0

00012488 <gcry_malloc_secure@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #139264	; 0x22000
   12490:	ldr	pc, [ip, #2536]!	; 0x9e8

00012494 <gpgrt_fdopen@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #139264	; 0x22000
   1249c:	ldr	pc, [ip, #2528]!	; 0x9e0

000124a0 <gcry_xrealloc@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #139264	; 0x22000
   124a8:	ldr	pc, [ip, #2520]!	; 0x9d8

000124ac <puts@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #139264	; 0x22000
   124b4:	ldr	pc, [ip, #2512]!	; 0x9d0

000124b8 <malloc@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #139264	; 0x22000
   124c0:	ldr	pc, [ip, #2504]!	; 0x9c8

000124c4 <iconv_open@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #139264	; 0x22000
   124cc:	ldr	pc, [ip, #2496]!	; 0x9c0

000124d0 <__libc_start_main@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #139264	; 0x22000
   124d8:	ldr	pc, [ip, #2488]!	; 0x9b8

000124dc <strerror@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #139264	; 0x22000
   124e4:	ldr	pc, [ip, #2480]!	; 0x9b0

000124e8 <localtime@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #139264	; 0x22000
   124f0:	ldr	pc, [ip, #2472]!	; 0x9a8

000124f4 <__ctype_tolower_loc@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #139264	; 0x22000
   124fc:	ldr	pc, [ip, #2464]!	; 0x9a0

00012500 <__ctype_toupper_loc@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #139264	; 0x22000
   12508:	ldr	pc, [ip, #2456]!	; 0x998

0001250c <__gmon_start__@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #139264	; 0x22000
   12514:	ldr	pc, [ip, #2448]!	; 0x990

00012518 <rename@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #139264	; 0x22000
   12520:	ldr	pc, [ip, #2440]!	; 0x988

00012524 <kill@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #139264	; 0x22000
   1252c:	ldr	pc, [ip, #2432]!	; 0x980

00012530 <__ctype_b_loc@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #139264	; 0x22000
   12538:	ldr	pc, [ip, #2424]!	; 0x978

0001253c <_gpgrt_get_std_stream@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #139264	; 0x22000
   12544:	ldr	pc, [ip, #2416]!	; 0x970

00012548 <getcwd@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #139264	; 0x22000
   12550:	ldr	pc, [ip, #2408]!	; 0x968

00012554 <getpid@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #139264	; 0x22000
   1255c:	ldr	pc, [ip, #2400]!	; 0x960

00012560 <exit@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #139264	; 0x22000
   12568:	ldr	pc, [ip, #2392]!	; 0x958

0001256c <gpgrt_fprintf_unlocked@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #139264	; 0x22000
   12574:	ldr	pc, [ip, #2384]!	; 0x950

00012578 <assuan_new@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #139264	; 0x22000
   12580:	ldr	pc, [ip, #2376]!	; 0x948

00012584 <strtoul@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #139264	; 0x22000
   1258c:	ldr	pc, [ip, #2368]!	; 0x940

00012590 <ttyname@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #139264	; 0x22000
   12598:	ldr	pc, [ip, #2360]!	; 0x938

0001259c <strlen@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #139264	; 0x22000
   125a4:	ldr	pc, [ip, #2352]!	; 0x930

000125a8 <inotify_init@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #139264	; 0x22000
   125b0:	ldr	pc, [ip, #2344]!	; 0x928

000125b4 <setsid@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #139264	; 0x22000
   125bc:	ldr	pc, [ip, #2336]!	; 0x920

000125c0 <strchr@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #139264	; 0x22000
   125c8:	ldr	pc, [ip, #2328]!	; 0x918

000125cc <setenv@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #139264	; 0x22000
   125d4:	ldr	pc, [ip, #2320]!	; 0x910

000125d8 <gpg_err_code_from_syserror@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #139264	; 0x22000
   125e0:	ldr	pc, [ip, #2312]!	; 0x908

000125e4 <execv@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #139264	; 0x22000
   125ec:	ldr	pc, [ip, #2304]!	; 0x900

000125f0 <__open64_2@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #139264	; 0x22000
   125f8:	ldr	pc, [ip, #2296]!	; 0x8f8

000125fc <sigfillset@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #139264	; 0x22000
   12604:	ldr	pc, [ip, #2288]!	; 0x8f0

00012608 <assuan_send_data@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #139264	; 0x22000
   12610:	ldr	pc, [ip, #2280]!	; 0x8e8

00012614 <inotify_add_watch@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #139264	; 0x22000
   1261c:	ldr	pc, [ip, #2272]!	; 0x8e0

00012620 <__errno_location@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #139264	; 0x22000
   12628:	ldr	pc, [ip, #2264]!	; 0x8d8

0001262c <__strcat_chk@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #139264	; 0x22000
   12634:	ldr	pc, [ip, #2256]!	; 0x8d0

00012638 <__sprintf_chk@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #139264	; 0x22000
   12640:	ldr	pc, [ip, #2248]!	; 0x8c8

00012644 <__cxa_atexit@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #139264	; 0x22000
   1264c:	ldr	pc, [ip, #2240]!	; 0x8c0

00012650 <mkdir@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #139264	; 0x22000
   12658:	ldr	pc, [ip, #2232]!	; 0x8b8

0001265c <memset@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #139264	; 0x22000
   12664:	ldr	pc, [ip, #2224]!	; 0x8b0

00012668 <gcry_calloc@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #139264	; 0x22000
   12670:	ldr	pc, [ip, #2216]!	; 0x8a8

00012674 <strncpy@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #139264	; 0x22000
   1267c:	ldr	pc, [ip, #2208]!	; 0x8a0

00012680 <gpgrt_vasprintf@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #139264	; 0x22000
   12688:	ldr	pc, [ip, #2200]!	; 0x898

0001268c <link@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #139264	; 0x22000
   12694:	ldr	pc, [ip, #2192]!	; 0x890

00012698 <write@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #139264	; 0x22000
   126a0:	ldr	pc, [ip, #2184]!	; 0x888

000126a4 <__fprintf_chk@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #139264	; 0x22000
   126ac:	ldr	pc, [ip, #2176]!	; 0x880

000126b0 <gcry_xstrdup@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #139264	; 0x22000
   126b8:	ldr	pc, [ip, #2168]!	; 0x878

000126bc <access@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #139264	; 0x22000
   126c4:	ldr	pc, [ip, #2160]!	; 0x870

000126c8 <gcry_realloc@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #139264	; 0x22000
   126d0:	ldr	pc, [ip, #2152]!	; 0x868

000126d4 <fclose@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #139264	; 0x22000
   126dc:	ldr	pc, [ip, #2144]!	; 0x860

000126e0 <gpgrt_fputs@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #139264	; 0x22000
   126e8:	ldr	pc, [ip, #2136]!	; 0x858

000126ec <pipe@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #139264	; 0x22000
   126f4:	ldr	pc, [ip, #2128]!	; 0x850

000126f8 <gpgrt_snprintf@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #139264	; 0x22000
   12700:	ldr	pc, [ip, #2120]!	; 0x848

00012704 <fcntl64@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #139264	; 0x22000
   1270c:	ldr	pc, [ip, #2112]!	; 0x840

00012710 <gcry_md_hash_buffer@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #139264	; 0x22000
   12718:	ldr	pc, [ip, #2104]!	; 0x838

0001271c <setlocale@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #139264	; 0x22000
   12724:	ldr	pc, [ip, #2096]!	; 0x830

00012728 <sigemptyset@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #139264	; 0x22000
   12730:	ldr	pc, [ip, #2088]!	; 0x828

00012734 <fork@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #139264	; 0x22000
   1273c:	ldr	pc, [ip, #2080]!	; 0x820

00012740 <assuan_release@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #139264	; 0x22000
   12748:	ldr	pc, [ip, #2072]!	; 0x818

0001274c <putenv@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #139264	; 0x22000
   12754:	ldr	pc, [ip, #2064]!	; 0x810

00012758 <__explicit_bzero_chk@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #139264	; 0x22000
   12760:	ldr	pc, [ip, #2056]!	; 0x808

00012764 <strrchr@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #139264	; 0x22000
   1276c:	ldr	pc, [ip, #2048]!	; 0x800

00012770 <nl_langinfo@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #139264	; 0x22000
   12778:	ldr	pc, [ip, #2040]!	; 0x7f8

0001277c <gpgrt_asprintf@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #139264	; 0x22000
   12784:	ldr	pc, [ip, #2032]!	; 0x7f0

00012788 <assuan_set_gpg_err_source@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #139264	; 0x22000
   12790:	ldr	pc, [ip, #2024]!	; 0x7e8

00012794 <gpg_err_set_errno@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #139264	; 0x22000
   1279c:	ldr	pc, [ip, #2016]!	; 0x7e0

000127a0 <readdir64@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #139264	; 0x22000
   127a8:	ldr	pc, [ip, #2008]!	; 0x7d8

000127ac <gpg_strerror@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #139264	; 0x22000
   127b4:	ldr	pc, [ip, #2000]!	; 0x7d0

000127b8 <gpgrt_fopencookie@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #139264	; 0x22000
   127c0:	ldr	pc, [ip, #1992]!	; 0x7c8

000127c4 <putc@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #139264	; 0x22000
   127cc:	ldr	pc, [ip, #1984]!	; 0x7c0

000127d0 <getsockname@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #139264	; 0x22000
   127d8:	ldr	pc, [ip, #1976]!	; 0x7b8

000127dc <gpg_err_init@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #139264	; 0x22000
   127e4:	ldr	pc, [ip, #1968]!	; 0x7b0

000127e8 <remove@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #139264	; 0x22000
   127f0:	ldr	pc, [ip, #1960]!	; 0x7a8

000127f4 <canonicalize_file_name@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #139264	; 0x22000
   127fc:	ldr	pc, [ip, #1952]!	; 0x7a0

00012800 <fopen64@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #139264	; 0x22000
   12808:	ldr	pc, [ip, #1944]!	; 0x798

0001280c <gcry_create_nonce@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #139264	; 0x22000
   12814:	ldr	pc, [ip, #1936]!	; 0x790

00012818 <gcry_control@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #139264	; 0x22000
   12820:	ldr	pc, [ip, #1928]!	; 0x788

00012824 <strpbrk@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #139264	; 0x22000
   1282c:	ldr	pc, [ip, #1920]!	; 0x780

00012830 <socket@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #139264	; 0x22000
   12838:	ldr	pc, [ip, #1912]!	; 0x778

0001283c <gpgrt_fprintf@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #139264	; 0x22000
   12844:	ldr	pc, [ip, #1904]!	; 0x770

00012848 <bindtextdomain@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #139264	; 0x22000
   12850:	ldr	pc, [ip, #1896]!	; 0x768

00012854 <gcry_xcalloc@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #139264	; 0x22000
   1285c:	ldr	pc, [ip, #1888]!	; 0x760

00012860 <chmod@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #139264	; 0x22000
   12868:	ldr	pc, [ip, #1880]!	; 0x758

0001286c <__xstat64@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #139264	; 0x22000
   12874:	ldr	pc, [ip, #1872]!	; 0x750

00012878 <isatty@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #139264	; 0x22000
   12880:	ldr	pc, [ip, #1864]!	; 0x748

00012884 <unsetenv@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #139264	; 0x22000
   1288c:	ldr	pc, [ip, #1856]!	; 0x740

00012890 <fputs@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #139264	; 0x22000
   12898:	ldr	pc, [ip, #1848]!	; 0x738

0001289c <strncmp@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #139264	; 0x22000
   128a4:	ldr	pc, [ip, #1840]!	; 0x730

000128a8 <abort@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #139264	; 0x22000
   128b0:	ldr	pc, [ip, #1832]!	; 0x728

000128b4 <getc@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #139264	; 0x22000
   128bc:	ldr	pc, [ip, #1824]!	; 0x720

000128c0 <gpgrt_fileno@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #139264	; 0x22000
   128c8:	ldr	pc, [ip, #1816]!	; 0x718

000128cc <close@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #139264	; 0x22000
   128d4:	ldr	pc, [ip, #1808]!	; 0x710

000128d8 <gcry_strdup@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #139264	; 0x22000
   128e0:	ldr	pc, [ip, #1800]!	; 0x708

000128e4 <connect@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #139264	; 0x22000
   128ec:	ldr	pc, [ip, #1792]!	; 0x700

000128f0 <closedir@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #139264	; 0x22000
   128f8:	ldr	pc, [ip, #1784]!	; 0x6f8

000128fc <assuan_socket_connect@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #139264	; 0x22000
   12904:	ldr	pc, [ip, #1776]!	; 0x6f0

00012908 <__assert_fail@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #139264	; 0x22000
   12910:	ldr	pc, [ip, #1768]!	; 0x6e8

Disassembly of section .text:

00012918 <.text>:
   12918:	ldr	r3, [pc, #3088]	; 13530 <__assert_fail@plt+0xc28>
   1291c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12920:	sub	sp, sp, #164	; 0xa4
   12924:	ldr	r3, [r3]
   12928:	mov	r4, #0
   1292c:	str	r3, [sp, #156]	; 0x9c
   12930:	str	r1, [sp, #24]
   12934:	str	r0, [sp, #28]
   12938:	str	r4, [sp, #40]	; 0x28
   1293c:	bl	18238 <__assert_fail@plt+0x5930>
   12940:	ldr	r0, [pc, #3052]	; 13534 <__assert_fail@plt+0xc2c>
   12944:	bl	16aac <__assert_fail@plt+0x41a4>
   12948:	mov	r1, #1
   1294c:	ldr	r0, [pc, #3044]	; 13538 <__assert_fail@plt+0xc30>
   12950:	bl	17af0 <__assert_fail@plt+0x51e8>
   12954:	mov	r0, r4
   12958:	bl	17b44 <__assert_fail@plt+0x523c>
   1295c:	bl	12290 <assuan_set_assuan_log_prefix@plt>
   12960:	ldr	r5, [pc, #3028]	; 1353c <__assert_fail@plt+0xc34>
   12964:	mov	r0, r4
   12968:	ldr	r7, [pc, #3024]	; 13540 <__assert_fail@plt+0xc38>
   1296c:	ldr	r6, [pc, #3024]	; 13544 <__assert_fail@plt+0xc3c>
   12970:	bl	12788 <assuan_set_gpg_err_source@plt>
   12974:	mov	sl, r4
   12978:	bl	14498 <__assert_fail@plt+0x1b90>
   1297c:	mov	r9, r4
   12980:	add	r2, sp, #24
   12984:	mov	r3, #1
   12988:	mov	r8, r4
   1298c:	add	r1, sp, #28
   12990:	str	r4, [sp, #20]
   12994:	str	r4, [sp, #16]
   12998:	str	r1, [sp, #60]	; 0x3c
   1299c:	strd	r2, [sp, #64]	; 0x40
   129a0:	mov	r1, r5
   129a4:	add	r0, sp, #60	; 0x3c
   129a8:	bl	15534 <__assert_fail@plt+0x2c2c>
   129ac:	cmp	r0, #0
   129b0:	beq	12a8c <__assert_fail@plt+0x184>
   129b4:	ldr	r3, [sp, #76]	; 0x4c
   129b8:	cmp	r3, r7
   129bc:	beq	12b98 <__assert_fail@plt+0x290>
   129c0:	bgt	129fc <__assert_fail@plt+0xf4>
   129c4:	cmp	r3, #117	; 0x75
   129c8:	beq	12bb4 <__assert_fail@plt+0x2ac>
   129cc:	ble	12a34 <__assert_fail@plt+0x12c>
   129d0:	cmp	r3, #500	; 0x1f4
   129d4:	beq	12bc4 <__assert_fail@plt+0x2bc>
   129d8:	movgt	r8, #1
   129dc:	bgt	129a0 <__assert_fail@plt+0x98>
   129e0:	cmp	r3, #118	; 0x76
   129e4:	bne	12a74 <__assert_fail@plt+0x16c>
   129e8:	ldr	r2, [pc, #2904]	; 13548 <__assert_fail@plt+0xc40>
   129ec:	ldr	r3, [r2, #264]	; 0x108
   129f0:	add	r3, r3, #1
   129f4:	str	r3, [r2, #264]	; 0x108
   129f8:	b	129a0 <__assert_fail@plt+0x98>
   129fc:	cmp	r3, r6
   12a00:	beq	12a80 <__assert_fail@plt+0x178>
   12a04:	ble	12a58 <__assert_fail@plt+0x150>
   12a08:	ldr	r2, [pc, #2876]	; 1354c <__assert_fail@plt+0xc44>
   12a0c:	cmp	r3, r2
   12a10:	beq	12bf0 <__assert_fail@plt+0x2e8>
   12a14:	blt	12bd8 <__assert_fail@plt+0x2d0>
   12a18:	add	r2, r2, #2
   12a1c:	cmp	r3, r2
   12a20:	bne	12a74 <__assert_fail@plt+0x16c>
   12a24:	ldr	r3, [pc, #2844]	; 13548 <__assert_fail@plt+0xc40>
   12a28:	mov	r2, #1
   12a2c:	str	r2, [r3, #272]	; 0x110
   12a30:	b	129a0 <__assert_fail@plt+0x98>
   12a34:	cmp	r3, #108	; 0x6c
   12a38:	beq	12ba4 <__assert_fail@plt+0x29c>
   12a3c:	cmp	r3, #113	; 0x71
   12a40:	bne	12a74 <__assert_fail@plt+0x16c>
   12a44:	ldr	r2, [pc, #2812]	; 13548 <__assert_fail@plt+0xc40>
   12a48:	ldr	r3, [r2, #260]	; 0x104
   12a4c:	add	r3, r3, #1
   12a50:	str	r3, [r2, #260]	; 0x104
   12a54:	b	129a0 <__assert_fail@plt+0x98>
   12a58:	ldr	r2, [pc, #2800]	; 13550 <__assert_fail@plt+0xc48>
   12a5c:	cmp	r3, r2
   12a60:	moveq	r9, #1
   12a64:	beq	129a0 <__assert_fail@plt+0x98>
   12a68:	cmp	r3, #504	; 0x1f8
   12a6c:	moveq	sl, #1
   12a70:	beq	129a0 <__assert_fail@plt+0x98>
   12a74:	mov	r3, #2
   12a78:	str	r3, [sp, #72]	; 0x48
   12a7c:	b	129a0 <__assert_fail@plt+0x98>
   12a80:	mov	r3, #1
   12a84:	str	r3, [sp, #20]
   12a88:	b	129a0 <__assert_fail@plt+0x98>
   12a8c:	bl	17a84 <__assert_fail@plt+0x517c>
   12a90:	cmp	r0, #0
   12a94:	bne	134f4 <__assert_fail@plt+0xbec>
   12a98:	cmp	r8, #0
   12a9c:	beq	12c00 <__assert_fail@plt+0x2f8>
   12aa0:	mov	r0, #0
   12aa4:	bl	17a84 <__assert_fail@plt+0x517c>
   12aa8:	cmp	r0, #0
   12aac:	bne	134f4 <__assert_fail@plt+0xbec>
   12ab0:	ldr	r3, [pc, #2716]	; 13554 <__assert_fail@plt+0xc4c>
   12ab4:	ldr	r2, [sp, #40]	; 0x28
   12ab8:	cmp	r2, r3
   12abc:	bhi	134e4 <__assert_fail@plt+0xbdc>
   12ac0:	ldr	r7, [pc, #2688]	; 13548 <__assert_fail@plt+0xc40>
   12ac4:	ldr	r2, [r7, #268]	; 0x10c
   12ac8:	cmp	r2, #0
   12acc:	beq	131b4 <__assert_fail@plt+0x8ac>
   12ad0:	ldr	r3, [r7, #264]	; 0x108
   12ad4:	mov	r5, #0
   12ad8:	str	r3, [sp]
   12adc:	str	r5, [sp, #12]
   12ae0:	str	r5, [sp, #8]
   12ae4:	str	r5, [sp, #4]
   12ae8:	mov	r1, r5
   12aec:	eor	r3, r8, #1
   12af0:	add	r0, sp, #32
   12af4:	bl	1b298 <__assert_fail@plt+0x8990>
   12af8:	subs	r6, r0, #0
   12afc:	bne	134fc <__assert_fail@plt+0xbf4>
   12b00:	cmp	r8, #0
   12b04:	ldr	fp, [sp, #32]
   12b08:	bne	12c1c <__assert_fail@plt+0x314>
   12b0c:	cmp	r4, #0
   12b10:	beq	12cd8 <__assert_fail@plt+0x3d0>
   12b14:	ldr	r5, [pc, #2620]	; 13558 <__assert_fail@plt+0xc50>
   12b18:	ldr	r9, [pc, #2620]	; 1355c <__assert_fail@plt+0xc54>
   12b1c:	ldr	r8, [pc, #2620]	; 13560 <__assert_fail@plt+0xc58>
   12b20:	mov	r4, #0
   12b24:	mov	r0, r4
   12b28:	add	r2, sp, #48	; 0x30
   12b2c:	add	r1, sp, #44	; 0x2c
   12b30:	str	r4, [sp, #48]	; 0x30
   12b34:	bl	136c8 <__assert_fail@plt+0xdc0>
   12b38:	uxth	r3, r0
   12b3c:	cmp	r3, r5
   12b40:	mov	sl, r0
   12b44:	beq	12ec0 <__assert_fail@plt+0x5b8>
   12b48:	cmp	r0, r4
   12b4c:	bne	12c5c <__assert_fail@plt+0x354>
   12b50:	ldr	r2, [sp, #48]	; 0x30
   12b54:	ldr	r1, [sp, #44]	; 0x2c
   12b58:	mov	r0, fp
   12b5c:	bl	13f78 <__assert_fail@plt+0x1670>
   12b60:	mov	r4, r0
   12b64:	ldr	r0, [sp, #44]	; 0x2c
   12b68:	bl	122a8 <gcry_free@plt>
   12b6c:	cmp	r4, #0
   12b70:	bne	12c90 <__assert_fail@plt+0x388>
   12b74:	ldr	r3, [r7, #264]	; 0x108
   12b78:	cmp	r3, #0
   12b7c:	bne	1319c <__assert_fail@plt+0x894>
   12b80:	ldr	r0, [pc, #2524]	; 13564 <__assert_fail@plt+0xc5c>
   12b84:	bl	124ac <puts@plt>
   12b88:	ldr	r0, [r9]
   12b8c:	bl	12200 <fflush@plt>
   12b90:	ldr	fp, [sp, #32]
   12b94:	b	12b20 <__assert_fail@plt+0x218>
   12b98:	mov	r3, #1
   12b9c:	str	r3, [sp, #16]
   12ba0:	b	129a0 <__assert_fail@plt+0x98>
   12ba4:	ldr	r3, [pc, #2460]	; 13548 <__assert_fail@plt+0xc40>
   12ba8:	mov	r2, #1
   12bac:	str	r2, [r3, #288]	; 0x120
   12bb0:	b	129a0 <__assert_fail@plt+0x98>
   12bb4:	ldr	r3, [pc, #2444]	; 13548 <__assert_fail@plt+0xc40>
   12bb8:	mov	r2, #1
   12bbc:	str	r2, [r3, #284]	; 0x11c
   12bc0:	b	129a0 <__assert_fail@plt+0x98>
   12bc4:	ldr	r2, [pc, #2428]	; 13548 <__assert_fail@plt+0xc40>
   12bc8:	ldr	r3, [r2, #292]	; 0x124
   12bcc:	add	r3, r3, #1
   12bd0:	str	r3, [r2, #292]	; 0x124
   12bd4:	b	129a0 <__assert_fail@plt+0x98>
   12bd8:	ldr	r2, [pc, #2408]	; 13548 <__assert_fail@plt+0xc40>
   12bdc:	mov	r3, #1
   12be0:	mov	r4, r3
   12be4:	str	r3, [r2, #276]	; 0x114
   12be8:	str	r3, [r2, #280]	; 0x118
   12bec:	b	129a0 <__assert_fail@plt+0x98>
   12bf0:	ldr	r3, [pc, #2384]	; 13548 <__assert_fail@plt+0xc40>
   12bf4:	mov	r2, #1
   12bf8:	str	r2, [r3, #276]	; 0x114
   12bfc:	b	129a0 <__assert_fail@plt+0x98>
   12c00:	ldr	r3, [sp, #20]
   12c04:	orrs	r3, sl, r3
   12c08:	ldr	r3, [sp, #28]
   12c0c:	beq	12e98 <__assert_fail@plt+0x590>
   12c10:	cmp	r3, #0
   12c14:	bne	12aa0 <__assert_fail@plt+0x198>
   12c18:	b	12eb0 <__assert_fail@plt+0x5a8>
   12c1c:	mov	r0, fp
   12c20:	bl	12740 <assuan_release@plt>
   12c24:	ldr	r3, [r7, #260]	; 0x104
   12c28:	cmp	r3, #0
   12c2c:	str	r3, [sp, #16]
   12c30:	beq	13230 <__assert_fail@plt+0x928>
   12c34:	mov	r3, #0
   12c38:	str	r3, [sp, #16]
   12c3c:	ldr	r3, [pc, #2284]	; 13530 <__assert_fail@plt+0xc28>
   12c40:	ldr	r2, [sp, #156]	; 0x9c
   12c44:	ldr	r0, [sp, #16]
   12c48:	ldr	r3, [r3]
   12c4c:	cmp	r2, r3
   12c50:	bne	1352c <__assert_fail@plt+0xc24>
   12c54:	add	sp, sp, #164	; 0xa4
   12c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c5c:	mov	r2, #5
   12c60:	ldr	r1, [pc, #2304]	; 13568 <__assert_fail@plt+0xc60>
   12c64:	mov	r0, r4
   12c68:	bl	122f0 <dcgettext@plt>
   12c6c:	mov	r4, r0
   12c70:	mov	r0, sl
   12c74:	bl	127ac <gpg_strerror@plt>
   12c78:	mov	r1, r0
   12c7c:	mov	r0, r4
   12c80:	bl	17d98 <__assert_fail@plt+0x5490>
   12c84:	mov	r0, r8
   12c88:	bl	124ac <puts@plt>
   12c8c:	b	12b90 <__assert_fail@plt+0x288>
   12c90:	ldr	r0, [r7, #260]	; 0x104
   12c94:	cmp	r0, #0
   12c98:	bne	12ccc <__assert_fail@plt+0x3c4>
   12c9c:	uxth	r3, r4
   12ca0:	cmp	r3, #94	; 0x5e
   12ca4:	mov	r2, #5
   12ca8:	beq	13104 <__assert_fail@plt+0x7fc>
   12cac:	ldr	r1, [pc, #2232]	; 1356c <__assert_fail@plt+0xc64>
   12cb0:	bl	122f0 <dcgettext@plt>
   12cb4:	mov	sl, r0
   12cb8:	mov	r0, r4
   12cbc:	bl	127ac <gpg_strerror@plt>
   12cc0:	mov	r1, r0
   12cc4:	mov	r0, sl
   12cc8:	bl	17d98 <__assert_fail@plt+0x5490>
   12ccc:	mov	r0, r8
   12cd0:	bl	124ac <puts@plt>
   12cd4:	b	12b88 <__assert_fail@plt+0x280>
   12cd8:	cmp	sl, #0
   12cdc:	beq	12ee4 <__assert_fail@plt+0x5dc>
   12ce0:	ldr	r3, [sp, #28]
   12ce4:	cmp	r3, #0
   12ce8:	str	r3, [sp, #16]
   12cec:	beq	12ebc <__assert_fail@plt+0x5b4>
   12cf0:	str	r4, [sp, #16]
   12cf4:	ldr	r3, [sp, #24]
   12cf8:	mov	r8, r4
   12cfc:	b	12d50 <__assert_fail@plt+0x448>
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #2148]	; 13570 <__assert_fail@plt+0xc68>
   12d08:	mov	r0, #0
   12d0c:	bl	122f0 <dcgettext@plt>
   12d10:	mov	r5, r0
   12d14:	mov	r0, r4
   12d18:	bl	127ac <gpg_strerror@plt>
   12d1c:	mov	r1, r0
   12d20:	mov	r0, r5
   12d24:	bl	17d98 <__assert_fail@plt+0x5490>
   12d28:	str	r4, [sp, #16]
   12d2c:	ldr	r2, [sp, #28]
   12d30:	ldr	r3, [sp, #24]
   12d34:	sub	r2, r2, #1
   12d38:	add	r3, r3, #4
   12d3c:	cmp	r2, #0
   12d40:	str	r2, [sp, #28]
   12d44:	str	r3, [sp, #24]
   12d48:	beq	12ebc <__assert_fail@plt+0x5b4>
   12d4c:	ldr	fp, [sp, #32]
   12d50:	ldr	r2, [r7, #264]	; 0x108
   12d54:	ldr	r5, [r3]
   12d58:	cmp	r2, #0
   12d5c:	bne	13114 <__assert_fail@plt+0x80c>
   12d60:	ldr	r3, [pc, #2036]	; 1355c <__assert_fail@plt+0xc54>
   12d64:	mov	r2, #0
   12d68:	add	r0, sp, #116	; 0x74
   12d6c:	ldr	r1, [r3]
   12d70:	bl	19c50 <__assert_fail@plt+0x7348>
   12d74:	subs	r4, r0, #0
   12d78:	bne	12d00 <__assert_fail@plt+0x3f8>
   12d7c:	mov	r0, r5
   12d80:	bl	1259c <strlen@plt>
   12d84:	add	r0, r0, r0, lsl #1
   12d88:	add	r0, r0, #30
   12d8c:	bl	1214c <gcry_xmalloc@plt>
   12d90:	ldr	r3, [pc, #2012]	; 13574 <__assert_fail@plt+0xc6c>
   12d94:	ldr	r2, [r7, #284]	; 0x11c
   12d98:	cmp	r2, #0
   12d9c:	mov	r6, r0
   12da0:	ldm	r3!, {r0, r1}
   12da4:	add	r4, r6, #7
   12da8:	str	r0, [r6]
   12dac:	str	r1, [r6, #4]
   12db0:	bne	131e8 <__assert_fail@plt+0x8e0>
   12db4:	ldr	r3, [r7, #288]	; 0x120
   12db8:	cmp	r3, #0
   12dbc:	bne	131c4 <__assert_fail@plt+0x8bc>
   12dc0:	ldrb	r3, [r5]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12e2c <__assert_fail@plt+0x524>
   12dcc:	ldr	r9, [pc, #1956]	; 13578 <__assert_fail@plt+0xc70>
   12dd0:	mov	sl, #43	; 0x2b
   12dd4:	b	12df8 <__assert_fail@plt+0x4f0>
   12dd8:	cmp	r3, #32
   12ddc:	strbeq	sl, [r4]
   12de0:	strbne	r3, [r4]
   12de4:	ldrb	r3, [r5, #1]!
   12de8:	add	r2, r4, #1
   12dec:	mov	r4, r2
   12df0:	cmp	r3, #0
   12df4:	beq	12e2c <__assert_fail@plt+0x524>
   12df8:	cmp	r3, #43	; 0x2b
   12dfc:	cmpne	r3, #31
   12e00:	bhi	12dd8 <__assert_fail@plt+0x4d0>
   12e04:	str	r3, [sp]
   12e08:	mov	r0, r4
   12e0c:	mov	r3, r9
   12e10:	mvn	r2, #0
   12e14:	mov	r1, #1
   12e18:	bl	12638 <__sprintf_chk@plt>
   12e1c:	ldrb	r3, [r5, #1]!
   12e20:	add	r4, r4, #3
   12e24:	cmp	r3, #0
   12e28:	bne	12df8 <__assert_fail@plt+0x4f0>
   12e2c:	ldr	r3, [pc, #1864]	; 1357c <__assert_fail@plt+0xc74>
   12e30:	strb	r8, [r4]
   12e34:	mov	r0, fp
   12e38:	str	r3, [sp, #8]
   12e3c:	str	r8, [sp, #12]
   12e40:	add	r3, sp, #116	; 0x74
   12e44:	str	r8, [sp, #4]
   12e48:	str	r8, [sp]
   12e4c:	ldr	r2, [pc, #1836]	; 13580 <__assert_fail@plt+0xc78>
   12e50:	mov	r1, r6
   12e54:	bl	12464 <assuan_transact@plt>
   12e58:	ldr	r3, [r7, #264]	; 0x108
   12e5c:	cmp	r3, #1
   12e60:	ble	12e78 <__assert_fail@plt+0x570>
   12e64:	cmp	r0, #0
   12e68:	ldreq	r1, [pc, #1812]	; 13584 <__assert_fail@plt+0xc7c>
   12e6c:	bne	13248 <__assert_fail@plt+0x940>
   12e70:	ldr	r0, [pc, #1808]	; 13588 <__assert_fail@plt+0xc80>
   12e74:	bl	17d34 <__assert_fail@plt+0x542c>
   12e78:	add	r0, sp, #116	; 0x74
   12e7c:	bl	19fbc <__assert_fail@plt+0x76b4>
   12e80:	mov	r4, r0
   12e84:	mov	r0, r6
   12e88:	bl	122a8 <gcry_free@plt>
   12e8c:	cmp	r4, #0
   12e90:	beq	12d2c <__assert_fail@plt+0x424>
   12e94:	b	12d00 <__assert_fail@plt+0x3f8>
   12e98:	cmp	r4, #0
   12e9c:	bne	12ed8 <__assert_fail@plt+0x5d0>
   12ea0:	cmp	r3, #0
   12ea4:	beq	13350 <__assert_fail@plt+0xa48>
   12ea8:	cmp	r3, #1
   12eac:	beq	13390 <__assert_fail@plt+0xa88>
   12eb0:	mov	r0, #1
   12eb4:	bl	16960 <__assert_fail@plt+0x4058>
   12eb8:	b	12aa0 <__assert_fail@plt+0x198>
   12ebc:	ldr	r6, [sp, #16]
   12ec0:	ldr	r0, [sp, #32]
   12ec4:	bl	12740 <assuan_release@plt>
   12ec8:	adds	r3, r6, #0
   12ecc:	movne	r3, #1
   12ed0:	str	r3, [sp, #16]
   12ed4:	b	12c3c <__assert_fail@plt+0x334>
   12ed8:	cmp	r3, #0
   12edc:	beq	12aa0 <__assert_fail@plt+0x198>
   12ee0:	b	12eb0 <__assert_fail@plt+0x5a8>
   12ee4:	ldr	r3, [sp, #20]
   12ee8:	cmp	r3, #0
   12eec:	strne	sl, [sp, #16]
   12ef0:	ldrne	r3, [sp, #28]
   12ef4:	bne	13034 <__assert_fail@plt+0x72c>
   12ef8:	ldr	r3, [sp, #16]
   12efc:	ldr	r1, [sp, #36]	; 0x24
   12f00:	cmp	r3, #0
   12f04:	ldr	ip, [sp, #40]	; 0x28
   12f08:	bne	1326c <__assert_fail@plt+0x964>
   12f0c:	cmp	r9, #0
   12f10:	beq	13430 <__assert_fail@plt+0xb28>
   12f14:	ldr	r3, [pc, #1648]	; 1358c <__assert_fail@plt+0xc84>
   12f18:	ldr	lr, [sp, #16]
   12f1c:	ldr	r2, [pc, #1624]	; 1357c <__assert_fail@plt+0xc74>
   12f20:	str	r3, [sp]
   12f24:	add	r3, sp, #48	; 0x30
   12f28:	str	r2, [sp, #8]
   12f2c:	str	r3, [sp, #4]
   12f30:	str	r1, [sp, #52]	; 0x34
   12f34:	mov	r3, lr
   12f38:	str	lr, [sp, #12]
   12f3c:	mov	r0, fp
   12f40:	mov	r2, lr
   12f44:	ldr	r1, [pc, #1604]	; 13590 <__assert_fail@plt+0xc88>
   12f48:	str	fp, [sp, #48]	; 0x30
   12f4c:	str	ip, [sp, #56]	; 0x38
   12f50:	bl	12464 <assuan_transact@plt>
   12f54:	ldr	r3, [r7, #264]	; 0x108
   12f58:	cmp	r3, #1
   12f5c:	mov	r4, r0
   12f60:	ble	12f78 <__assert_fail@plt+0x670>
   12f64:	cmp	r0, #0
   12f68:	ldreq	r1, [pc, #1556]	; 13584 <__assert_fail@plt+0xc7c>
   12f6c:	bne	134cc <__assert_fail@plt+0xbc4>
   12f70:	ldr	r0, [pc, #1552]	; 13588 <__assert_fail@plt+0xc80>
   12f74:	bl	17d34 <__assert_fail@plt+0x542c>
   12f78:	ldr	r0, [sp, #36]	; 0x24
   12f7c:	bl	122a8 <gcry_free@plt>
   12f80:	ldr	r0, [sp, #32]
   12f84:	bl	12740 <assuan_release@plt>
   12f88:	cmp	r4, #0
   12f8c:	bne	13320 <__assert_fail@plt+0xa18>
   12f90:	ldr	r3, [r7, #260]	; 0x104
   12f94:	cmp	r3, #0
   12f98:	str	r3, [sp, #16]
   12f9c:	bne	12c34 <__assert_fail@plt+0x32c>
   12fa0:	mov	r2, #5
   12fa4:	ldr	r1, [pc, #1512]	; 13594 <__assert_fail@plt+0xc8c>
   12fa8:	mov	r0, r3
   12fac:	bl	122f0 <dcgettext@plt>
   12fb0:	bl	17d34 <__assert_fail@plt+0x542c>
   12fb4:	b	12c3c <__assert_fail@plt+0x334>
   12fb8:	ldr	r2, [pc, #1468]	; 1357c <__assert_fail@plt+0xc74>
   12fbc:	mov	r3, #0
   12fc0:	strb	r3, [r4]
   12fc4:	mov	r0, fp
   12fc8:	str	r3, [sp, #12]
   12fcc:	str	r3, [sp, #4]
   12fd0:	str	r3, [sp]
   12fd4:	str	r2, [sp, #8]
   12fd8:	mov	r1, r6
   12fdc:	mov	r2, r3
   12fe0:	bl	12464 <assuan_transact@plt>
   12fe4:	ldr	r3, [r7, #264]	; 0x108
   12fe8:	cmp	r3, #1
   12fec:	mov	r4, r0
   12ff0:	ble	13008 <__assert_fail@plt+0x700>
   12ff4:	cmp	r0, #0
   12ff8:	ldreq	r1, [pc, #1412]	; 13584 <__assert_fail@plt+0xc7c>
   12ffc:	bne	13254 <__assert_fail@plt+0x94c>
   13000:	ldr	r0, [pc, #1408]	; 13588 <__assert_fail@plt+0xc80>
   13004:	bl	17d34 <__assert_fail@plt+0x542c>
   13008:	mov	r0, r6
   1300c:	bl	122a8 <gcry_free@plt>
   13010:	mov	r0, r8
   13014:	bl	122a8 <gcry_free@plt>
   13018:	cmp	r4, #0
   1301c:	bne	13160 <__assert_fail@plt+0x858>
   13020:	ldrd	r2, [sp, #24]
   13024:	ldr	fp, [sp, #32]
   13028:	sub	r3, r3, #1
   1302c:	add	r2, r2, #4
   13030:	strd	r2, [sp, #24]
   13034:	cmp	r3, #0
   13038:	beq	13260 <__assert_fail@plt+0x958>
   1303c:	ldr	r3, [sp, #24]
   13040:	ldr	r4, [r7, #284]	; 0x11c
   13044:	ldr	r5, [r3]
   13048:	cmp	r4, #0
   1304c:	mov	r0, r5
   13050:	beq	13130 <__assert_fail@plt+0x828>
   13054:	bl	126b0 <gcry_xstrdup@plt>
   13058:	mov	r8, r0
   1305c:	mov	r0, r8
   13060:	bl	1259c <strlen@plt>
   13064:	add	r0, r0, r0, lsl #1
   13068:	add	r0, r0, #15
   1306c:	bl	1214c <gcry_xmalloc@plt>
   13070:	ldr	r3, [pc, #1312]	; 13598 <__assert_fail@plt+0xc90>
   13074:	ldr	r2, [r7, #284]	; 0x11c
   13078:	cmp	r2, #0
   1307c:	mov	r6, r0
   13080:	ldm	r3!, {r0, r1}
   13084:	mov	r4, r6
   13088:	ldrb	r3, [r3]
   1308c:	str	r0, [r6]
   13090:	str	r1, [r6, #4]
   13094:	strb	r3, [r4, #8]!
   13098:	bne	1320c <__assert_fail@plt+0x904>
   1309c:	ldrb	r3, [r8]
   130a0:	cmp	r3, #0
   130a4:	beq	12fb8 <__assert_fail@plt+0x6b0>
   130a8:	ldr	r9, [pc, #1224]	; 13578 <__assert_fail@plt+0xc70>
   130ac:	mov	r5, r8
   130b0:	mov	sl, #43	; 0x2b
   130b4:	b	130d8 <__assert_fail@plt+0x7d0>
   130b8:	cmp	r3, #32
   130bc:	add	r2, r4, #1
   130c0:	strbeq	sl, [r4]
   130c4:	strbne	r3, [r4]
   130c8:	mov	r4, r2
   130cc:	ldrb	r3, [r5, #1]!
   130d0:	cmp	r3, #0
   130d4:	beq	12fb8 <__assert_fail@plt+0x6b0>
   130d8:	cmp	r3, #43	; 0x2b
   130dc:	cmpne	r3, #31
   130e0:	bhi	130b8 <__assert_fail@plt+0x7b0>
   130e4:	str	r3, [sp]
   130e8:	mov	r0, r4
   130ec:	mov	r3, r9
   130f0:	mvn	r2, #0
   130f4:	mov	r1, #1
   130f8:	bl	12638 <__sprintf_chk@plt>
   130fc:	add	r4, r4, #3
   13100:	b	130cc <__assert_fail@plt+0x7c4>
   13104:	ldr	r1, [pc, #1168]	; 1359c <__assert_fail@plt+0xc94>
   13108:	bl	122f0 <dcgettext@plt>
   1310c:	bl	17d34 <__assert_fail@plt+0x542c>
   13110:	b	12ccc <__assert_fail@plt+0x3c4>
   13114:	mov	r2, #5
   13118:	ldr	r1, [pc, #1152]	; 135a0 <__assert_fail@plt+0xc98>
   1311c:	mov	r0, #0
   13120:	bl	122f0 <dcgettext@plt>
   13124:	mov	r1, r5
   13128:	bl	17d34 <__assert_fail@plt+0x542c>
   1312c:	b	12d60 <__assert_fail@plt+0x458>
   13130:	bl	127f4 <canonicalize_file_name@plt>
   13134:	subs	r8, r0, #0
   13138:	beq	133e4 <__assert_fail@plt+0xadc>
   1313c:	ldrb	r3, [r8]
   13140:	cmp	r3, #47	; 0x2f
   13144:	beq	1305c <__assert_fail@plt+0x754>
   13148:	mov	r0, r4
   1314c:	mov	r2, #5
   13150:	ldr	r1, [pc, #1100]	; 135a4 <__assert_fail@plt+0xc9c>
   13154:	bl	122f0 <dcgettext@plt>
   13158:	bl	17d98 <__assert_fail@plt+0x5490>
   1315c:	mov	r4, #1
   13160:	mov	r2, #5
   13164:	ldr	r1, [pc, #1084]	; 135a8 <__assert_fail@plt+0xca0>
   13168:	mov	r0, #0
   1316c:	bl	122f0 <dcgettext@plt>
   13170:	ldr	r3, [sp, #24]
   13174:	str	r4, [sp, #16]
   13178:	mov	r5, r0
   1317c:	mov	r0, r4
   13180:	ldr	r4, [r3]
   13184:	bl	127ac <gpg_strerror@plt>
   13188:	mov	r1, r4
   1318c:	mov	r2, r0
   13190:	mov	r0, r5
   13194:	bl	17d98 <__assert_fail@plt+0x5490>
   13198:	b	13020 <__assert_fail@plt+0x718>
   1319c:	mov	r2, #5
   131a0:	ldr	r1, [pc, #1004]	; 13594 <__assert_fail@plt+0xc8c>
   131a4:	mov	r0, r4
   131a8:	bl	122f0 <dcgettext@plt>
   131ac:	bl	17d34 <__assert_fail@plt+0x542c>
   131b0:	b	12b80 <__assert_fail@plt+0x278>
   131b4:	mov	r0, #4
   131b8:	bl	19864 <__assert_fail@plt+0x6f5c>
   131bc:	mov	r2, r0
   131c0:	b	12ad0 <__assert_fail@plt+0x1c8>
   131c4:	ldr	r3, [pc, #992]	; 135ac <__assert_fail@plt+0xca4>
   131c8:	add	r4, r4, #13
   131cc:	ldm	r3!, {r0, r1, r2}
   131d0:	ldrh	r3, [r3]
   131d4:	str	r0, [r4, #-13]
   131d8:	str	r1, [r4, #-9]
   131dc:	strh	r3, [r4, #-1]
   131e0:	str	r2, [r4, #-5]
   131e4:	b	12dc0 <__assert_fail@plt+0x4b8>
   131e8:	ldr	r3, [pc, #960]	; 135b0 <__assert_fail@plt+0xca8>
   131ec:	ldrh	r2, [r3, #4]
   131f0:	ldr	r0, [r3]
   131f4:	ldrb	r3, [r3, #6]
   131f8:	str	r0, [r6, #7]
   131fc:	strh	r2, [r4, #4]
   13200:	strb	r3, [r4, #6]
   13204:	add	r4, r6, #13
   13208:	b	12db4 <__assert_fail@plt+0x4ac>
   1320c:	ldr	r3, [pc, #924]	; 135b0 <__assert_fail@plt+0xca8>
   13210:	ldrh	r2, [r3, #4]
   13214:	ldr	r0, [r3]
   13218:	ldrb	r3, [r3, #6]
   1321c:	str	r0, [r6, #8]
   13220:	strh	r2, [r4, #4]
   13224:	strb	r3, [r4, #6]
   13228:	add	r4, r6, #14
   1322c:	b	1309c <__assert_fail@plt+0x794>
   13230:	mov	r2, #5
   13234:	ldr	r1, [pc, #888]	; 135b4 <__assert_fail@plt+0xcac>
   13238:	ldr	r0, [sp, #16]
   1323c:	bl	122f0 <dcgettext@plt>
   13240:	bl	17d34 <__assert_fail@plt+0x542c>
   13244:	b	12c3c <__assert_fail@plt+0x334>
   13248:	bl	127ac <gpg_strerror@plt>
   1324c:	mov	r1, r0
   13250:	b	12e70 <__assert_fail@plt+0x568>
   13254:	bl	127ac <gpg_strerror@plt>
   13258:	mov	r1, r0
   1325c:	b	13000 <__assert_fail@plt+0x6f8>
   13260:	ldr	sl, [sp, #16]
   13264:	mov	r6, sl
   13268:	b	12ec0 <__assert_fail@plt+0x5b8>
   1326c:	ldr	r3, [pc, #792]	; 1358c <__assert_fail@plt+0xc84>
   13270:	ldr	lr, [sp, #20]
   13274:	ldr	r2, [pc, #768]	; 1357c <__assert_fail@plt+0xc74>
   13278:	str	r3, [sp]
   1327c:	add	r3, sp, #48	; 0x30
   13280:	str	r2, [sp, #8]
   13284:	str	r3, [sp, #4]
   13288:	str	r1, [sp, #52]	; 0x34
   1328c:	mov	r3, lr
   13290:	str	lr, [sp, #12]
   13294:	mov	r0, fp
   13298:	mov	r2, lr
   1329c:	ldr	r1, [pc, #788]	; 135b8 <__assert_fail@plt+0xcb0>
   132a0:	str	fp, [sp, #48]	; 0x30
   132a4:	str	ip, [sp, #56]	; 0x38
   132a8:	bl	12464 <assuan_transact@plt>
   132ac:	ldr	r3, [r7, #264]	; 0x108
   132b0:	cmp	r3, #1
   132b4:	mov	r4, r0
   132b8:	ble	132d0 <__assert_fail@plt+0x9c8>
   132bc:	cmp	r0, #0
   132c0:	ldreq	r1, [pc, #700]	; 13584 <__assert_fail@plt+0xc7c>
   132c4:	bne	134d8 <__assert_fail@plt+0xbd0>
   132c8:	ldr	r0, [pc, #696]	; 13588 <__assert_fail@plt+0xc80>
   132cc:	bl	17d34 <__assert_fail@plt+0x542c>
   132d0:	ldr	r0, [sp, #36]	; 0x24
   132d4:	bl	122a8 <gcry_free@plt>
   132d8:	ldr	r0, [sp, #32]
   132dc:	bl	12740 <assuan_release@plt>
   132e0:	cmp	r4, #0
   132e4:	beq	12c34 <__assert_fail@plt+0x32c>
   132e8:	uxth	r3, r4
   132ec:	cmp	r3, #157	; 0x9d
   132f0:	beq	13408 <__assert_fail@plt+0xb00>
   132f4:	mov	r2, #5
   132f8:	ldr	r1, [pc, #700]	; 135bc <__assert_fail@plt+0xcb4>
   132fc:	mov	r0, #0
   13300:	bl	122f0 <dcgettext@plt>
   13304:	mov	r5, r0
   13308:	mov	r0, r4
   1330c:	bl	127ac <gpg_strerror@plt>
   13310:	mov	r1, r0
   13314:	mov	r0, r5
   13318:	bl	17d98 <__assert_fail@plt+0x5490>
   1331c:	b	12c3c <__assert_fail@plt+0x334>
   13320:	mov	r2, #5
   13324:	ldr	r1, [pc, #660]	; 135c0 <__assert_fail@plt+0xcb8>
   13328:	mov	r0, #0
   1332c:	bl	122f0 <dcgettext@plt>
   13330:	mov	r5, r0
   13334:	mov	r0, r4
   13338:	bl	127ac <gpg_strerror@plt>
   1333c:	str	r9, [sp, #16]
   13340:	mov	r1, r0
   13344:	mov	r0, r5
   13348:	bl	17d98 <__assert_fail@plt+0x5490>
   1334c:	b	12c3c <__assert_fail@plt+0x334>
   13350:	add	r2, sp, #40	; 0x28
   13354:	add	r1, sp, #36	; 0x24
   13358:	bl	142e4 <__assert_fail@plt+0x19dc>
   1335c:	subs	r5, r0, #0
   13360:	beq	12aa0 <__assert_fail@plt+0x198>
   13364:	mov	r2, #5
   13368:	ldr	r1, [pc, #504]	; 13568 <__assert_fail@plt+0xc60>
   1336c:	mov	r0, r4
   13370:	bl	122f0 <dcgettext@plt>
   13374:	mov	r6, r0
   13378:	mov	r0, r5
   1337c:	bl	127ac <gpg_strerror@plt>
   13380:	mov	r1, r0
   13384:	mov	r0, r6
   13388:	bl	17d98 <__assert_fail@plt+0x5490>
   1338c:	b	12aa0 <__assert_fail@plt+0x198>
   13390:	ldr	r3, [sp, #24]
   13394:	add	r2, sp, #40	; 0x28
   13398:	add	r1, sp, #36	; 0x24
   1339c:	ldr	r0, [r3]
   133a0:	bl	142e4 <__assert_fail@plt+0x19dc>
   133a4:	subs	r5, r0, #0
   133a8:	beq	12aa0 <__assert_fail@plt+0x198>
   133ac:	mov	r2, #5
   133b0:	ldr	r1, [pc, #524]	; 135c4 <__assert_fail@plt+0xcbc>
   133b4:	mov	r0, r4
   133b8:	bl	122f0 <dcgettext@plt>
   133bc:	ldr	r3, [sp, #24]
   133c0:	mov	r6, r0
   133c4:	mov	r0, r5
   133c8:	ldr	r5, [r3]
   133cc:	bl	127ac <gpg_strerror@plt>
   133d0:	mov	r1, r5
   133d4:	mov	r2, r0
   133d8:	mov	r0, r6
   133dc:	bl	17d98 <__assert_fail@plt+0x5490>
   133e0:	b	12aa0 <__assert_fail@plt+0x198>
   133e4:	bl	12620 <__errno_location@plt>
   133e8:	mov	r4, #1
   133ec:	ldr	r0, [r0]
   133f0:	bl	124dc <strerror@plt>
   133f4:	mov	r1, r5
   133f8:	mov	r2, r0
   133fc:	ldr	r0, [pc, #452]	; 135c8 <__assert_fail@plt+0xcc0>
   13400:	bl	17d98 <__assert_fail@plt+0x5490>
   13404:	b	13160 <__assert_fail@plt+0x858>
   13408:	ldr	r3, [r7, #260]	; 0x104
   1340c:	cmp	r3, #0
   13410:	str	r3, [sp, #16]
   13414:	bne	12c34 <__assert_fail@plt+0x32c>
   13418:	mov	r2, #5
   1341c:	ldr	r1, [pc, #424]	; 135cc <__assert_fail@plt+0xcc4>
   13420:	mov	r0, r3
   13424:	bl	122f0 <dcgettext@plt>
   13428:	bl	17d34 <__assert_fail@plt+0x542c>
   1342c:	b	12c3c <__assert_fail@plt+0x334>
   13430:	mov	r2, ip
   13434:	mov	r0, fp
   13438:	bl	13f78 <__assert_fail@plt+0x1670>
   1343c:	mov	r4, r0
   13440:	ldr	r0, [sp, #36]	; 0x24
   13444:	bl	122a8 <gcry_free@plt>
   13448:	ldr	r0, [sp, #32]
   1344c:	bl	12740 <assuan_release@plt>
   13450:	cmp	r4, #0
   13454:	beq	12f90 <__assert_fail@plt+0x688>
   13458:	uxth	r3, r4
   1345c:	cmp	r3, #94	; 0x5e
   13460:	bne	13498 <__assert_fail@plt+0xb90>
   13464:	ldr	r3, [r7, #260]	; 0x104
   13468:	cmp	r3, #0
   1346c:	movne	r3, #1
   13470:	strne	r3, [sp, #16]
   13474:	bne	12c3c <__assert_fail@plt+0x334>
   13478:	mov	r2, #5
   1347c:	ldr	r1, [pc, #280]	; 1359c <__assert_fail@plt+0xc94>
   13480:	mov	r0, #0
   13484:	bl	122f0 <dcgettext@plt>
   13488:	bl	17d34 <__assert_fail@plt+0x542c>
   1348c:	mov	r3, #1
   13490:	str	r3, [sp, #16]
   13494:	b	12c3c <__assert_fail@plt+0x334>
   13498:	mov	r2, #5
   1349c:	ldr	r1, [pc, #200]	; 1356c <__assert_fail@plt+0xc64>
   134a0:	ldr	r0, [sp, #16]
   134a4:	bl	122f0 <dcgettext@plt>
   134a8:	mov	r5, r0
   134ac:	mov	r0, r4
   134b0:	bl	127ac <gpg_strerror@plt>
   134b4:	mov	r1, r0
   134b8:	mov	r0, r5
   134bc:	bl	17d98 <__assert_fail@plt+0x5490>
   134c0:	mov	r3, #2
   134c4:	str	r3, [sp, #16]
   134c8:	b	12c3c <__assert_fail@plt+0x334>
   134cc:	bl	127ac <gpg_strerror@plt>
   134d0:	mov	r1, r0
   134d4:	b	12f70 <__assert_fail@plt+0x668>
   134d8:	bl	127ac <gpg_strerror@plt>
   134dc:	mov	r1, r0
   134e0:	b	132c8 <__assert_fail@plt+0x9c0>
   134e4:	mov	r2, #5
   134e8:	ldr	r1, [pc, #224]	; 135d0 <__assert_fail@plt+0xcc8>
   134ec:	bl	122f0 <dcgettext@plt>
   134f0:	bl	17d98 <__assert_fail@plt+0x5490>
   134f4:	mov	r0, #2
   134f8:	bl	12560 <exit@plt>
   134fc:	mov	r2, #5
   13500:	ldr	r1, [pc, #204]	; 135d4 <__assert_fail@plt+0xccc>
   13504:	mov	r0, r5
   13508:	bl	122f0 <dcgettext@plt>
   1350c:	mov	r4, r0
   13510:	mov	r0, r6
   13514:	bl	127ac <gpg_strerror@plt>
   13518:	mov	r1, r0
   1351c:	mov	r0, r4
   13520:	bl	17d98 <__assert_fail@plt+0x5490>
   13524:	mov	r0, #2
   13528:	bl	12560 <exit@plt>
   1352c:	bl	122fc <__stack_chk_fail@plt>
   13530:	andeq	r4, r3, r8, lsr fp
   13534:	andeq	r4, r1, r4, asr r1
   13538:	andeq	r1, r2, ip, ror #22
   1353c:	andeq	r5, r3, ip, asr #32
   13540:	strdeq	r0, [r0], -r6
   13544:	strdeq	r0, [r0], -r9
   13548:	andeq	r5, r3, ip, lsl #3
   1354c:	strdeq	r0, [r0], -fp
   13550:	strdeq	r0, [r0], -r7
   13554:	andeq	r4, r0, r0, lsr #28
   13558:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   1355c:	andeq	r5, r3, r4, lsl #3
   13560:	andeq	r1, r2, r4, lsr #24
   13564:	andeq	r1, r2, r4, asr #24
   13568:	andeq	r1, r2, ip, ror fp
   1356c:	andeq	r1, r2, r8, ror #24
   13570:	andeq	r1, r2, r4, asr #25
   13574:	muleq	r2, ip, ip
   13578:			; <UNDEFINED> instruction: 0x00021cbc
   1357c:	muleq	r1, ip, r2
   13580:	andeq	r4, r1, ip, lsr r4
   13584:	andeq	r1, r2, r4, lsr #18
   13588:	andeq	r1, r2, ip, lsr #18
   1358c:	andeq	r4, r1, r0, rrx
   13590:	andeq	r1, r2, r0, asr sp
   13594:	andeq	r1, r2, ip, lsr #24
   13598:	andeq	r1, r2, r8, lsl sp
   1359c:	andeq	r1, r2, r8, asr #24
   135a0:	andeq	r1, r2, r8, lsl #25
   135a4:	strdeq	r1, [r2], -r8
   135a8:	andeq	r1, r2, r4, lsr #26
   135ac:	andeq	r1, r2, ip, lsr #25
   135b0:	andeq	r1, r2, r4, lsr #25
   135b4:	andeq	r1, r2, ip, asr sp
   135b8:	andeq	r1, r2, r4, asr #26
   135bc:	muleq	r2, ip, sp
   135c0:			; <UNDEFINED> instruction: 0x00021dbc
   135c4:	andeq	r1, r2, r8, lsr #23
   135c8:	ldrdeq	r1, [r2], -r8
   135cc:	andeq	r1, r2, r0, lsl #27
   135d0:	ldrdeq	r1, [r2], -r4
   135d4:	andeq	r1, r2, r0, lsl #24
   135d8:	mov	fp, #0
   135dc:	mov	lr, #0
   135e0:	pop	{r1}		; (ldr r1, [sp], #4)
   135e4:	mov	r2, sp
   135e8:	push	{r2}		; (str r2, [sp, #-4]!)
   135ec:	push	{r0}		; (str r0, [sp, #-4]!)
   135f0:	ldr	ip, [pc, #16]	; 13608 <__assert_fail@plt+0xd00>
   135f4:	push	{ip}		; (str ip, [sp, #-4]!)
   135f8:	ldr	r0, [pc, #12]	; 1360c <__assert_fail@plt+0xd04>
   135fc:	ldr	r3, [pc, #12]	; 13610 <__assert_fail@plt+0xd08>
   13600:	bl	124d0 <__libc_start_main@plt>
   13604:	bl	128a8 <abort@plt>
   13608:	andeq	r1, r2, r4, lsr r8
   1360c:	andeq	r2, r1, r8, lsl r9
   13610:	ldrdeq	r1, [r2], -r4
   13614:	ldr	r3, [pc, #20]	; 13630 <__assert_fail@plt+0xd28>
   13618:	ldr	r2, [pc, #20]	; 13634 <__assert_fail@plt+0xd2c>
   1361c:	add	r3, pc, r3
   13620:	ldr	r2, [r3, r2]
   13624:	cmp	r2, #0
   13628:	bxeq	lr
   1362c:	b	1250c <__gmon_start__@plt>
   13630:	andeq	r1, r2, r4, lsr r7
   13634:	andeq	r0, r0, r4, lsr #5
   13638:	ldr	r0, [pc, #24]	; 13658 <__assert_fail@plt+0xd50>
   1363c:	ldr	r3, [pc, #24]	; 1365c <__assert_fail@plt+0xd54>
   13640:	cmp	r3, r0
   13644:	bxeq	lr
   13648:	ldr	r3, [pc, #16]	; 13660 <__assert_fail@plt+0xd58>
   1364c:	cmp	r3, #0
   13650:	bxeq	lr
   13654:	bx	r3
   13658:	andeq	r5, r3, r4, ror r1
   1365c:	andeq	r5, r3, r4, ror r1
   13660:	andeq	r0, r0, r0
   13664:	ldr	r0, [pc, #36]	; 13690 <__assert_fail@plt+0xd88>
   13668:	ldr	r1, [pc, #36]	; 13694 <__assert_fail@plt+0xd8c>
   1366c:	sub	r1, r1, r0
   13670:	asr	r1, r1, #2
   13674:	add	r1, r1, r1, lsr #31
   13678:	asrs	r1, r1, #1
   1367c:	bxeq	lr
   13680:	ldr	r3, [pc, #16]	; 13698 <__assert_fail@plt+0xd90>
   13684:	cmp	r3, #0
   13688:	bxeq	lr
   1368c:	bx	r3
   13690:	andeq	r5, r3, r4, ror r1
   13694:	andeq	r5, r3, r4, ror r1
   13698:	andeq	r0, r0, r0
   1369c:	push	{r4, lr}
   136a0:	ldr	r4, [pc, #24]	; 136c0 <__assert_fail@plt+0xdb8>
   136a4:	ldrb	r3, [r4]
   136a8:	cmp	r3, #0
   136ac:	popne	{r4, pc}
   136b0:	bl	13638 <__assert_fail@plt+0xd30>
   136b4:	mov	r3, #1
   136b8:	strb	r3, [r4]
   136bc:	pop	{r4, pc}
   136c0:	andeq	r5, r3, r8, lsl #3
   136c4:	b	13664 <__assert_fail@plt+0xd5c>
   136c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136cc:	sub	sp, sp, #28
   136d0:	ldr	r4, [pc, #2168]	; 13f50 <__assert_fail@plt+0x1648>
   136d4:	str	r0, [sp, #8]
   136d8:	str	r1, [sp, #16]
   136dc:	ldr	r0, [r4]
   136e0:	str	r2, [sp, #20]
   136e4:	cmp	r0, #0
   136e8:	bne	13738 <__assert_fail@plt+0xe30>
   136ec:	add	r2, r4, #256	; 0x100
   136f0:	mov	r3, r4
   136f4:	add	r2, r2, #3
   136f8:	mvn	r1, #0
   136fc:	mov	ip, #1
   13700:	str	ip, [r3], #3
   13704:	strb	r1, [r3, #1]!
   13708:	cmp	r2, r3
   1370c:	bne	13704 <__assert_fail@plt+0xdfc>
   13710:	ldr	r2, [pc, #2108]	; 13f54 <__assert_fail@plt+0x164c>
   13714:	ldrb	r3, [r2]
   13718:	cmp	r3, #0
   1371c:	beq	13738 <__assert_fail@plt+0xe30>
   13720:	add	r1, r4, r3
   13724:	ldrb	r3, [r2, #1]!
   13728:	strb	r0, [r1, #4]
   1372c:	add	r0, r0, #1
   13730:	cmp	r3, #0
   13734:	bne	13720 <__assert_fail@plt+0xe18>
   13738:	ldr	r3, [sp, #8]
   1373c:	cmp	r3, #0
   13740:	beq	13dcc <__assert_fail@plt+0x14c4>
   13744:	ldr	r1, [pc, #2060]	; 13f58 <__assert_fail@plt+0x1650>
   13748:	ldr	r0, [sp, #8]
   1374c:	bl	12800 <fopen64@plt>
   13750:	mov	r5, r0
   13754:	cmp	r5, #0
   13758:	beq	13ddc <__assert_fail@plt+0x14d4>
   1375c:	mov	r0, #8192	; 0x2000
   13760:	bl	1214c <gcry_xmalloc@plt>
   13764:	mov	fp, #0
   13768:	ldr	r7, [pc, #2028]	; 13f5c <__assert_fail@plt+0x1654>
   1376c:	mov	r8, fp
   13770:	mov	r6, fp
   13774:	mov	r9, #8192	; 0x2000
   13778:	str	fp, [sp, #12]
   1377c:	mov	sl, r0
   13780:	mov	r0, r5
   13784:	bl	128b4 <getc@plt>
   13788:	cmn	r0, #1
   1378c:	mov	r3, r0
   13790:	beq	13eb0 <__assert_fail@plt+0x15a8>
   13794:	ldr	r1, [r4, #280]	; 0x118
   13798:	cmp	r1, #0
   1379c:	beq	13b64 <__assert_fail@plt+0x125c>
   137a0:	cmp	r3, #37	; 0x25
   137a4:	beq	13ab8 <__assert_fail@plt+0x11b0>
   137a8:	cmp	r3, #10
   137ac:	beq	13f00 <__assert_fail@plt+0x15f8>
   137b0:	cmp	fp, #8
   137b4:	ldrls	pc, [pc, fp, lsl #2]
   137b8:	b	13f40 <__assert_fail@plt+0x1638>
   137bc:	andeq	r3, r1, r8, lsl sl
   137c0:	andeq	r3, r1, ip, asr sl
   137c4:	andeq	r3, r1, r8, lsl sl
   137c8:	andeq	r3, r1, r0, lsl r8
   137cc:	andeq	r3, r1, ip, lsr r9
   137d0:	andeq	r3, r1, ip, lsr r9
   137d4:	andeq	r3, r1, ip, lsr r9
   137d8:	andeq	r3, r1, ip, lsr r9
   137dc:			; <UNDEFINED> instruction: 0x000138bc
   137e0:	bl	128b4 <getc@plt>
   137e4:	cmn	r0, #1
   137e8:	mov	r3, r0
   137ec:	beq	13ee8 <__assert_fail@plt+0x15e0>
   137f0:	ldr	r2, [r4, #280]	; 0x118
   137f4:	cmp	r2, #0
   137f8:	beq	13810 <__assert_fail@plt+0xf08>
   137fc:	cmp	r0, #37	; 0x25
   13800:	mov	fp, #3
   13804:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13808:	cmp	r0, #10
   1380c:	beq	1384c <__assert_fail@plt+0xf44>
   13810:	mov	r0, r3
   13814:	cmp	r0, #10
   13818:	mov	r0, r5
   1381c:	beq	1390c <__assert_fail@plt+0x1004>
   13820:	bl	128b4 <getc@plt>
   13824:	cmn	r0, #1
   13828:	beq	13ee8 <__assert_fail@plt+0x15e0>
   1382c:	ldr	r3, [r4, #280]	; 0x118
   13830:	cmp	r3, #0
   13834:	beq	13cc0 <__assert_fail@plt+0x13b8>
   13838:	cmp	r0, #37	; 0x25
   1383c:	mov	fp, #3
   13840:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13844:	cmp	r0, #10
   13848:	bne	13814 <__assert_fail@plt+0xf0c>
   1384c:	ldr	r3, [sp, #8]
   13850:	cmp	r3, #0
   13854:	beq	13b40 <__assert_fail@plt+0x1238>
   13858:	mov	r0, r5
   1385c:	bl	126d4 <fclose@plt>
   13860:	cmp	fp, #8
   13864:	bne	13b40 <__assert_fail@plt+0x1238>
   13868:	ldr	r3, [sp, #16]
   1386c:	mov	r0, #0
   13870:	str	sl, [r3]
   13874:	ldr	r3, [sp, #20]
   13878:	str	r8, [r3]
   1387c:	add	sp, sp, #28
   13880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13884:	mov	r0, r5
   13888:	bl	128b4 <getc@plt>
   1388c:	cmn	r0, #1
   13890:	beq	13f38 <__assert_fail@plt+0x1630>
   13894:	ldr	r1, [r4, #280]	; 0x118
   13898:	cmp	r1, #0
   1389c:	beq	13e60 <__assert_fail@plt+0x1558>
   138a0:	cmp	r0, #37	; 0x25
   138a4:	beq	13ac4 <__assert_fail@plt+0x11bc>
   138a8:	cmp	r0, #10
   138ac:	mov	r6, r9
   138b0:	mov	r3, r0
   138b4:	ldr	r9, [sp, #4]
   138b8:	beq	138f8 <__assert_fail@plt+0xff0>
   138bc:	mov	r0, r3
   138c0:	cmp	r0, #10
   138c4:	beq	13ed0 <__assert_fail@plt+0x15c8>
   138c8:	mov	r0, r5
   138cc:	bl	128b4 <getc@plt>
   138d0:	cmn	r0, #1
   138d4:	beq	13ec8 <__assert_fail@plt+0x15c0>
   138d8:	ldr	r3, [r4, #280]	; 0x118
   138dc:	cmp	r3, #0
   138e0:	beq	13c5c <__assert_fail@plt+0x1354>
   138e4:	cmp	r0, #37	; 0x25
   138e8:	mov	fp, #8
   138ec:	beq	13ab8 <__assert_fail@plt+0x11b0>
   138f0:	cmp	r0, #10
   138f4:	bne	138c0 <__assert_fail@plt+0xfb8>
   138f8:	ldr	r3, [sp, #8]
   138fc:	cmp	r3, #0
   13900:	movne	fp, #8
   13904:	bne	13858 <__assert_fail@plt+0xf50>
   13908:	b	13868 <__assert_fail@plt+0xf60>
   1390c:	bl	128b4 <getc@plt>
   13910:	cmn	r0, #1
   13914:	mov	r3, r0
   13918:	beq	13ef8 <__assert_fail@plt+0x15f0>
   1391c:	ldr	r2, [r4, #280]	; 0x118
   13920:	cmp	r2, #0
   13924:	beq	13d00 <__assert_fail@plt+0x13f8>
   13928:	cmp	r0, #37	; 0x25
   1392c:	mov	fp, #4
   13930:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13934:	cmp	r0, #10
   13938:	beq	1384c <__assert_fail@plt+0xf44>
   1393c:	mov	r2, fp
   13940:	mov	fp, r3
   13944:	cmp	r9, r8
   13948:	bls	13ca0 <__assert_fail@plt+0x1398>
   1394c:	cmp	fp, #45	; 0x2d
   13950:	beq	13c68 <__assert_fail@plt+0x1360>
   13954:	uxtab	fp, r4, fp
   13958:	ldrb	r3, [fp, #4]
   1395c:	cmp	r3, #255	; 0xff
   13960:	beq	13cf8 <__assert_fail@plt+0x13f0>
   13964:	cmp	r2, #4
   13968:	beq	13d10 <__assert_fail@plt+0x1408>
   1396c:	cmp	r2, #5
   13970:	add	r1, sl, r8
   13974:	add	r8, r8, #1
   13978:	beq	13df4 <__assert_fail@plt+0x14ec>
   1397c:	cmp	r2, #6
   13980:	beq	13d74 <__assert_fail@plt+0x146c>
   13984:	ldr	r2, [sp, #12]
   13988:	and	r3, r3, #63	; 0x3f
   1398c:	orr	r3, r2, r3
   13990:	strb	r3, [r1]
   13994:	mov	r0, r5
   13998:	str	r3, [sp, #12]
   1399c:	bl	128b4 <getc@plt>
   139a0:	cmn	r0, #1
   139a4:	mov	fp, r0
   139a8:	beq	13ef8 <__assert_fail@plt+0x15f0>
   139ac:	ldr	r3, [r4, #280]	; 0x118
   139b0:	cmp	r3, #0
   139b4:	beq	13e48 <__assert_fail@plt+0x1540>
   139b8:	cmp	r0, #37	; 0x25
   139bc:	mov	r2, #4
   139c0:	beq	13dbc <__assert_fail@plt+0x14b4>
   139c4:	cmp	fp, #10
   139c8:	bne	13944 <__assert_fail@plt+0x103c>
   139cc:	mov	fp, r2
   139d0:	b	1384c <__assert_fail@plt+0xf44>
   139d4:	mov	r0, r3
   139d8:	cmp	r0, #10
   139dc:	mov	r0, r5
   139e0:	bne	13ccc <__assert_fail@plt+0x13c4>
   139e4:	bl	128b4 <getc@plt>
   139e8:	cmn	r0, #1
   139ec:	mov	r3, r0
   139f0:	beq	13ef0 <__assert_fail@plt+0x15e8>
   139f4:	ldr	r6, [r4, #280]	; 0x118
   139f8:	cmp	r6, #0
   139fc:	beq	13a18 <__assert_fail@plt+0x1110>
   13a00:	cmp	r0, #37	; 0x25
   13a04:	mov	r6, #0
   13a08:	mov	fp, #2
   13a0c:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13a10:	cmp	r0, #10
   13a14:	beq	1384c <__assert_fail@plt+0xf44>
   13a18:	mov	r0, r3
   13a1c:	ldrb	r2, [r7, r6]
   13a20:	cmp	r2, r0
   13a24:	mov	r0, r5
   13a28:	beq	13b94 <__assert_fail@plt+0x128c>
   13a2c:	bl	128b4 <getc@plt>
   13a30:	cmn	r0, #1
   13a34:	mov	r3, r0
   13a38:	beq	13e78 <__assert_fail@plt+0x1570>
   13a3c:	ldr	r2, [r4, #280]	; 0x118
   13a40:	cmp	r2, #0
   13a44:	beq	139d4 <__assert_fail@plt+0x10cc>
   13a48:	cmp	r0, #37	; 0x25
   13a4c:	mov	fp, #1
   13a50:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13a54:	cmp	r3, #10
   13a58:	beq	1384c <__assert_fail@plt+0xf44>
   13a5c:	mov	r0, r5
   13a60:	bl	128b4 <getc@plt>
   13a64:	cmn	r0, #1
   13a68:	mov	r3, r0
   13a6c:	beq	13e78 <__assert_fail@plt+0x1570>
   13a70:	ldr	r2, [r4, #280]	; 0x118
   13a74:	cmp	r2, #0
   13a78:	beq	139d4 <__assert_fail@plt+0x10cc>
   13a7c:	cmp	r0, #37	; 0x25
   13a80:	mov	fp, #1
   13a84:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13a88:	cmp	r0, #10
   13a8c:	beq	1384c <__assert_fail@plt+0xf44>
   13a90:	mov	r0, r5
   13a94:	bl	128b4 <getc@plt>
   13a98:	cmn	r0, #1
   13a9c:	mov	r3, r0
   13aa0:	beq	13f18 <__assert_fail@plt+0x1610>
   13aa4:	ldr	r1, [r4, #280]	; 0x118
   13aa8:	cmp	r1, #0
   13aac:	beq	139d4 <__assert_fail@plt+0x10cc>
   13ab0:	cmp	r3, #37	; 0x25
   13ab4:	bne	137a8 <__assert_fail@plt+0xea0>
   13ab8:	str	r9, [sp, #4]
   13abc:	mov	r9, r6
   13ac0:	mov	r6, fp
   13ac4:	mov	r0, r5
   13ac8:	bl	128b4 <getc@plt>
   13acc:	cmn	r0, #1
   13ad0:	mov	fp, r0
   13ad4:	beq	13eac <__assert_fail@plt+0x15a4>
   13ad8:	mov	r0, r5
   13adc:	bl	128b4 <getc@plt>
   13ae0:	uxtb	fp, fp
   13ae4:	cmn	r0, #1
   13ae8:	beq	13eac <__assert_fail@plt+0x15a4>
   13aec:	sub	r1, fp, #48	; 0x30
   13af0:	bic	r3, fp, #32
   13af4:	uxtb	ip, r1
   13af8:	sub	r3, r3, #65	; 0x41
   13afc:	cmp	r3, #5
   13b00:	cmphi	ip, #9
   13b04:	uxtb	r0, r0
   13b08:	bls	13bd0 <__assert_fail@plt+0x12c8>
   13b0c:	ldr	r0, [pc, #1100]	; 13f60 <__assert_fail@plt+0x1658>
   13b10:	bl	17d98 <__assert_fail@plt+0x5490>
   13b14:	mov	r0, r5
   13b18:	bl	128b4 <getc@plt>
   13b1c:	cmn	r0, #1
   13b20:	beq	13b2c <__assert_fail@plt+0x1224>
   13b24:	cmp	r0, #10
   13b28:	bne	13b14 <__assert_fail@plt+0x120c>
   13b2c:	ldr	r3, [sp, #8]
   13b30:	cmp	r3, #0
   13b34:	beq	13b40 <__assert_fail@plt+0x1238>
   13b38:	mov	r0, r5
   13b3c:	bl	126d4 <fclose@plt>
   13b40:	ldr	r0, [pc, #1052]	; 13f64 <__assert_fail@plt+0x165c>
   13b44:	bl	17d98 <__assert_fail@plt+0x5490>
   13b48:	mov	r0, sl
   13b4c:	bl	122a8 <gcry_free@plt>
   13b50:	mov	r0, #15
   13b54:	add	sp, sp, #28
   13b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b5c:	mov	r3, r0
   13b60:	mov	fp, #2
   13b64:	cmp	fp, #8
   13b68:	ldrls	pc, [pc, fp, lsl #2]
   13b6c:	b	13f40 <__assert_fail@plt+0x1638>
   13b70:	andeq	r3, r1, r8, lsl sl
   13b74:	ldrdeq	r3, [r1], -r4
   13b78:	andeq	r3, r1, r8, lsl sl
   13b7c:	andeq	r3, r1, r0, lsl r8
   13b80:	andeq	r3, r1, ip, lsr r9
   13b84:	andeq	r3, r1, ip, lsr r9
   13b88:	andeq	r3, r1, ip, lsr r9
   13b8c:	andeq	r3, r1, ip, lsr r9
   13b90:			; <UNDEFINED> instruction: 0x000138bc
   13b94:	cmp	r6, #10
   13b98:	beq	137e0 <__assert_fail@plt+0xed8>
   13b9c:	bl	128b4 <getc@plt>
   13ba0:	add	r6, r6, #1
   13ba4:	cmn	r0, #1
   13ba8:	beq	13ef0 <__assert_fail@plt+0x15e8>
   13bac:	ldr	r2, [r4, #280]	; 0x118
   13bb0:	cmp	r2, #0
   13bb4:	beq	13b5c <__assert_fail@plt+0x1254>
   13bb8:	cmp	r0, #37	; 0x25
   13bbc:	mov	fp, #2
   13bc0:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13bc4:	cmp	r0, #10
   13bc8:	bne	13a1c <__assert_fail@plt+0x1114>
   13bcc:	b	1384c <__assert_fail@plt+0xf44>
   13bd0:	bic	r3, r0, #32
   13bd4:	sub	r3, r3, #65	; 0x41
   13bd8:	sub	ip, r0, #48	; 0x30
   13bdc:	cmp	r3, #5
   13be0:	cmphi	ip, #9
   13be4:	bhi	13b0c <__assert_fail@plt+0x1204>
   13be8:	cmp	fp, #57	; 0x39
   13bec:	lslls	r3, r1, #4
   13bf0:	bls	13c04 <__assert_fail@plt+0x12fc>
   13bf4:	cmp	fp, #70	; 0x46
   13bf8:	subls	fp, fp, #55	; 0x37
   13bfc:	subhi	fp, fp, #87	; 0x57
   13c00:	lsl	r3, fp, #4
   13c04:	cmp	r0, #57	; 0x39
   13c08:	subls	r0, r0, #48	; 0x30
   13c0c:	bls	13c1c <__assert_fail@plt+0x1314>
   13c10:	cmp	r0, #70	; 0x46
   13c14:	subls	r0, r0, #55	; 0x37
   13c18:	subhi	r0, r0, #87	; 0x57
   13c1c:	add	r0, r3, r0
   13c20:	cmp	r6, #8
   13c24:	ldrls	pc, [pc, r6, lsl #2]
   13c28:	b	13f40 <__assert_fail@plt+0x1638>
   13c2c:	andeq	r3, r1, r0, asr ip
   13c30:	andeq	r3, r1, r8, ror #26
   13c34:	andeq	r3, r1, r0, asr ip
   13c38:	andeq	r3, r1, ip, asr sp
   13c3c:	andeq	r3, r1, r8, asr #26
   13c40:	andeq	r3, r1, r8, asr #26
   13c44:	andeq	r3, r1, r8, asr #26
   13c48:	andeq	r3, r1, r8, asr #26
   13c4c:	andeq	r3, r1, r4, lsl #17
   13c50:	mov	r6, r9
   13c54:	ldr	r9, [sp, #4]
   13c58:	b	13a1c <__assert_fail@plt+0x1114>
   13c5c:	mov	r3, r0
   13c60:	mov	fp, #8
   13c64:	b	13b64 <__assert_fail@plt+0x125c>
   13c68:	mov	r0, r5
   13c6c:	bl	128b4 <getc@plt>
   13c70:	cmn	r0, #1
   13c74:	mov	r3, r0
   13c78:	beq	13ec8 <__assert_fail@plt+0x15c0>
   13c7c:	ldr	r2, [r4, #280]	; 0x118
   13c80:	cmp	r2, #0
   13c84:	beq	138bc <__assert_fail@plt+0xfb4>
   13c88:	cmp	r0, #37	; 0x25
   13c8c:	mov	fp, #8
   13c90:	beq	13ab8 <__assert_fail@plt+0x11b0>
   13c94:	cmp	r0, #10
   13c98:	bne	138bc <__assert_fail@plt+0xfb4>
   13c9c:	b	138f8 <__assert_fail@plt+0xff0>
   13ca0:	add	r9, r9, #8192	; 0x2000
   13ca4:	mov	r0, sl
   13ca8:	mov	r1, r9
   13cac:	str	r2, [sp, #4]
   13cb0:	bl	124a0 <gcry_xrealloc@plt>
   13cb4:	ldr	r2, [sp, #4]
   13cb8:	mov	sl, r0
   13cbc:	b	1394c <__assert_fail@plt+0x1044>
   13cc0:	mov	r3, r0
   13cc4:	mov	fp, #3
   13cc8:	b	13b64 <__assert_fail@plt+0x125c>
   13ccc:	bl	128b4 <getc@plt>
   13cd0:	cmn	r0, #1
   13cd4:	beq	13e78 <__assert_fail@plt+0x1570>
   13cd8:	ldr	r2, [r4, #280]	; 0x118
   13cdc:	cmp	r2, #0
   13ce0:	beq	139d8 <__assert_fail@plt+0x10d0>
   13ce4:	cmp	r0, #37	; 0x25
   13ce8:	mov	r3, r0
   13cec:	mov	fp, #1
   13cf0:	bne	13a54 <__assert_fail@plt+0x114c>
   13cf4:	b	13ab8 <__assert_fail@plt+0x11b0>
   13cf8:	mov	fp, r2
   13cfc:	b	13780 <__assert_fail@plt+0xe78>
   13d00:	mov	fp, #4
   13d04:	mov	r2, fp
   13d08:	mov	fp, r0
   13d0c:	b	13944 <__assert_fail@plt+0x103c>
   13d10:	lsl	r3, r3, #2
   13d14:	mov	r0, r5
   13d18:	str	r3, [sp, #12]
   13d1c:	bl	128b4 <getc@plt>
   13d20:	cmn	r0, #1
   13d24:	mov	fp, r0
   13d28:	beq	13f10 <__assert_fail@plt+0x1608>
   13d2c:	ldr	r3, [r4, #280]	; 0x118
   13d30:	mov	r2, #5
   13d34:	cmp	r3, #0
   13d38:	beq	13944 <__assert_fail@plt+0x103c>
   13d3c:	mov	r3, fp
   13d40:	mov	fp, r2
   13d44:	b	137a0 <__assert_fail@plt+0xe98>
   13d48:	mov	r2, r6
   13d4c:	mov	fp, r0
   13d50:	mov	r6, r9
   13d54:	ldr	r9, [sp, #4]
   13d58:	b	13944 <__assert_fail@plt+0x103c>
   13d5c:	mov	r6, r9
   13d60:	ldr	r9, [sp, #4]
   13d64:	b	13814 <__assert_fail@plt+0xf0c>
   13d68:	mov	r6, r9
   13d6c:	ldr	r9, [sp, #4]
   13d70:	b	139d8 <__assert_fail@plt+0x10d0>
   13d74:	ldr	r0, [sp, #12]
   13d78:	lsl	r2, r3, #26
   13d7c:	lsl	r3, r3, #6
   13d80:	orr	r2, r0, r2, lsr #28
   13d84:	uxtb	r3, r3
   13d88:	strb	r2, [r1]
   13d8c:	mov	r0, r5
   13d90:	str	r3, [sp, #12]
   13d94:	bl	128b4 <getc@plt>
   13d98:	cmn	r0, #1
   13d9c:	mov	fp, r0
   13da0:	beq	13f28 <__assert_fail@plt+0x1620>
   13da4:	ldr	r3, [r4, #280]	; 0x118
   13da8:	cmp	r3, #0
   13dac:	beq	13e6c <__assert_fail@plt+0x1564>
   13db0:	cmp	r0, #37	; 0x25
   13db4:	mov	r2, #7
   13db8:	bne	139c4 <__assert_fail@plt+0x10bc>
   13dbc:	str	r9, [sp, #4]
   13dc0:	mov	r9, r6
   13dc4:	mov	r6, r2
   13dc8:	b	13ac4 <__assert_fail@plt+0x11bc>
   13dcc:	ldr	r3, [pc, #404]	; 13f68 <__assert_fail@plt+0x1660>
   13dd0:	ldr	r5, [r3]
   13dd4:	cmp	r5, #0
   13dd8:	bne	1375c <__assert_fail@plt+0xe54>
   13ddc:	bl	12620 <__errno_location@plt>
   13de0:	ldr	r0, [r0]
   13de4:	bl	123d4 <gpg_err_code_from_errno@plt>
   13de8:	uxth	r0, r0
   13dec:	add	sp, sp, #28
   13df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df4:	ldr	r0, [sp, #12]
   13df8:	lsl	r2, r3, #26
   13dfc:	lsl	r3, r3, #4
   13e00:	orr	r2, r0, r2, lsr #30
   13e04:	uxtb	r3, r3
   13e08:	strb	r2, [r1]
   13e0c:	mov	r0, r5
   13e10:	str	r3, [sp, #12]
   13e14:	bl	128b4 <getc@plt>
   13e18:	cmn	r0, #1
   13e1c:	mov	fp, r0
   13e20:	beq	13f30 <__assert_fail@plt+0x1628>
   13e24:	ldr	r3, [r4, #280]	; 0x118
   13e28:	cmp	r3, #0
   13e2c:	beq	13e54 <__assert_fail@plt+0x154c>
   13e30:	cmp	r0, #37	; 0x25
   13e34:	mov	r2, #6
   13e38:	beq	13dbc <__assert_fail@plt+0x14b4>
   13e3c:	cmp	fp, #10
   13e40:	bne	13944 <__assert_fail@plt+0x103c>
   13e44:	b	139cc <__assert_fail@plt+0x10c4>
   13e48:	mov	r3, fp
   13e4c:	mov	fp, #4
   13e50:	b	13b64 <__assert_fail@plt+0x125c>
   13e54:	mov	r3, fp
   13e58:	mov	fp, #6
   13e5c:	b	13b64 <__assert_fail@plt+0x125c>
   13e60:	mov	r6, r9
   13e64:	ldr	r9, [sp, #4]
   13e68:	b	138c0 <__assert_fail@plt+0xfb8>
   13e6c:	mov	r3, fp
   13e70:	mov	fp, #7
   13e74:	b	13b64 <__assert_fail@plt+0x125c>
   13e78:	mov	fp, #1
   13e7c:	ldr	r3, [sp, #8]
   13e80:	cmp	r3, #0
   13e84:	beq	13860 <__assert_fail@plt+0xf58>
   13e88:	mov	r4, #0
   13e8c:	mov	r0, r5
   13e90:	bl	126d4 <fclose@plt>
   13e94:	cmp	r4, #0
   13e98:	beq	13860 <__assert_fail@plt+0xf58>
   13e9c:	mov	r0, sl
   13ea0:	bl	122a8 <gcry_free@plt>
   13ea4:	ldr	r0, [pc, #192]	; 13f6c <__assert_fail@plt+0x1664>
   13ea8:	b	1387c <__assert_fail@plt+0xf74>
   13eac:	mov	fp, r6
   13eb0:	ldr	r3, [sp, #8]
   13eb4:	clz	r4, fp
   13eb8:	cmp	r3, #0
   13ebc:	lsr	r4, r4, #5
   13ec0:	bne	13e8c <__assert_fail@plt+0x1584>
   13ec4:	b	13e94 <__assert_fail@plt+0x158c>
   13ec8:	mov	fp, #8
   13ecc:	b	13e7c <__assert_fail@plt+0x1574>
   13ed0:	ldr	r3, [sp, #8]
   13ed4:	cmp	r3, #0
   13ed8:	beq	13868 <__assert_fail@plt+0xf60>
   13edc:	mov	r0, r5
   13ee0:	bl	126d4 <fclose@plt>
   13ee4:	b	13868 <__assert_fail@plt+0xf60>
   13ee8:	mov	fp, #3
   13eec:	b	13e7c <__assert_fail@plt+0x1574>
   13ef0:	mov	fp, #2
   13ef4:	b	13e7c <__assert_fail@plt+0x1574>
   13ef8:	mov	fp, #4
   13efc:	b	13e7c <__assert_fail@plt+0x1574>
   13f00:	ldr	r3, [sp, #8]
   13f04:	cmp	r3, #0
   13f08:	bne	13858 <__assert_fail@plt+0xf50>
   13f0c:	b	13860 <__assert_fail@plt+0xf58>
   13f10:	mov	fp, #5
   13f14:	b	13e7c <__assert_fail@plt+0x1574>
   13f18:	ldr	r3, [sp, #8]
   13f1c:	cmp	r3, #0
   13f20:	bne	13e88 <__assert_fail@plt+0x1580>
   13f24:	b	13b40 <__assert_fail@plt+0x1238>
   13f28:	mov	fp, #7
   13f2c:	b	13e7c <__assert_fail@plt+0x1574>
   13f30:	mov	fp, #6
   13f34:	b	13e7c <__assert_fail@plt+0x1574>
   13f38:	mov	fp, r6
   13f3c:	b	13e7c <__assert_fail@plt+0x1574>
   13f40:	ldr	r2, [pc, #40]	; 13f70 <__assert_fail@plt+0x1668>
   13f44:	mov	r1, #584	; 0x248
   13f48:	ldr	r0, [pc, #36]	; 13f74 <__assert_fail@plt+0x166c>
   13f4c:	bl	180f8 <__assert_fail@plt+0x57f0>
   13f50:	andeq	r5, r3, ip, lsl #3
   13f54:	andeq	r5, r3, r8
   13f58:	andeq	r3, r2, ip, ror #21
   13f5c:	ldrdeq	r1, [r2], -ip
   13f60:	andeq	r1, r2, r4, ror r8
   13f64:			; <UNDEFINED> instruction: 0x000218b8
   13f68:	andeq	r5, r3, r0, lsl #3
   13f6c:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   13f70:	andeq	r1, r2, ip, asr r8
   13f74:	muleq	r2, r8, r8
   13f78:	push	{r4, r5, r6, lr}
   13f7c:	sub	sp, sp, #32
   13f80:	ldr	r4, [pc, #180]	; 1403c <__assert_fail@plt+0x1734>
   13f84:	ldr	r5, [pc, #180]	; 14040 <__assert_fail@plt+0x1738>
   13f88:	str	r0, [sp, #16]
   13f8c:	ldr	r3, [r4, #292]	; 0x124
   13f90:	str	r1, [sp, #20]
   13f94:	cmp	r3, #0
   13f98:	ldr	r3, [r5]
   13f9c:	str	r2, [sp, #24]
   13fa0:	str	r3, [sp, #28]
   13fa4:	beq	14024 <__assert_fail@plt+0x171c>
   13fa8:	ldr	r2, [r4, #272]	; 0x110
   13fac:	ldr	r3, [pc, #144]	; 14044 <__assert_fail@plt+0x173c>
   13fb0:	cmp	r2, #0
   13fb4:	ldr	r1, [pc, #140]	; 14048 <__assert_fail@plt+0x1740>
   13fb8:	moveq	r1, r3
   13fbc:	ldr	lr, [pc, #136]	; 1404c <__assert_fail@plt+0x1744>
   13fc0:	ldr	r2, [pc, #136]	; 14050 <__assert_fail@plt+0x1748>
   13fc4:	mov	r3, #0
   13fc8:	add	ip, sp, #16
   13fcc:	str	r2, [sp]
   13fd0:	str	r3, [sp, #12]
   13fd4:	mov	r2, r3
   13fd8:	str	lr, [sp, #8]
   13fdc:	str	ip, [sp, #4]
   13fe0:	bl	12464 <assuan_transact@plt>
   13fe4:	ldr	r3, [r4, #264]	; 0x108
   13fe8:	cmp	r3, #1
   13fec:	mov	r6, r0
   13ff0:	ble	14008 <__assert_fail@plt+0x1700>
   13ff4:	cmp	r0, #0
   13ff8:	ldreq	r1, [pc, #84]	; 14054 <__assert_fail@plt+0x174c>
   13ffc:	bne	1402c <__assert_fail@plt+0x1724>
   14000:	ldr	r0, [pc, #80]	; 14058 <__assert_fail@plt+0x1750>
   14004:	bl	17d34 <__assert_fail@plt+0x542c>
   14008:	ldr	r2, [sp, #28]
   1400c:	ldr	r3, [r5]
   14010:	mov	r0, r6
   14014:	cmp	r2, r3
   14018:	bne	14038 <__assert_fail@plt+0x1730>
   1401c:	add	sp, sp, #32
   14020:	pop	{r4, r5, r6, pc}
   14024:	ldr	r1, [pc, #48]	; 1405c <__assert_fail@plt+0x1754>
   14028:	b	13fbc <__assert_fail@plt+0x16b4>
   1402c:	bl	127ac <gpg_strerror@plt>
   14030:	mov	r1, r0
   14034:	b	14000 <__assert_fail@plt+0x16f8>
   14038:	bl	122fc <__stack_chk_fail@plt>
   1403c:	andeq	r5, r3, ip, lsl #3
   14040:	andeq	r4, r3, r8, lsr fp
   14044:	andeq	r1, r2, r8, lsl r9
   14048:	strdeq	r1, [r2], -r4
   1404c:	muleq	r1, ip, r2
   14050:	andeq	r4, r1, r0, rrx
   14054:	andeq	r1, r2, r4, lsr #18
   14058:	andeq	r1, r2, ip, lsr #18
   1405c:	andeq	r1, r2, r8, ror #17
   14060:	push	{r4, r5, r6, lr}
   14064:	mov	r2, #10
   14068:	mov	r4, r1
   1406c:	mov	r5, r0
   14070:	mov	r0, r1
   14074:	ldr	r1, [pc, #192]	; 1413c <__assert_fail@plt+0x1834>
   14078:	bl	1289c <strncmp@plt>
   1407c:	cmp	r0, #0
   14080:	bne	14090 <__assert_fail@plt+0x1788>
   14084:	ldrb	r3, [r4, #10]
   14088:	tst	r3, #223	; 0xdf
   1408c:	beq	14130 <__assert_fail@plt+0x1828>
   14090:	mov	r2, #8
   14094:	ldr	r1, [pc, #164]	; 14140 <__assert_fail@plt+0x1838>
   14098:	mov	r0, r4
   1409c:	bl	1289c <strncmp@plt>
   140a0:	cmp	r0, #0
   140a4:	bne	140b4 <__assert_fail@plt+0x17ac>
   140a8:	ldrb	r3, [r4, #8]
   140ac:	tst	r3, #223	; 0xdf
   140b0:	beq	1411c <__assert_fail@plt+0x1814>
   140b4:	mov	r2, #12
   140b8:	ldr	r1, [pc, #132]	; 14144 <__assert_fail@plt+0x183c>
   140bc:	mov	r0, r4
   140c0:	bl	1289c <strncmp@plt>
   140c4:	cmp	r0, #0
   140c8:	bne	140d8 <__assert_fail@plt+0x17d0>
   140cc:	ldrb	r3, [r4, #12]
   140d0:	tst	r3, #223	; 0xdf
   140d4:	beq	1411c <__assert_fail@plt+0x1814>
   140d8:	mov	r2, #14
   140dc:	ldr	r1, [pc, #100]	; 14148 <__assert_fail@plt+0x1840>
   140e0:	mov	r0, r4
   140e4:	bl	1289c <strncmp@plt>
   140e8:	cmp	r0, #0
   140ec:	bne	140fc <__assert_fail@plt+0x17f4>
   140f0:	ldrb	r3, [r4, #14]
   140f4:	tst	r3, #223	; 0xdf
   140f8:	beq	1411c <__assert_fail@plt+0x1814>
   140fc:	mov	r2, #5
   14100:	ldr	r1, [pc, #68]	; 1414c <__assert_fail@plt+0x1844>
   14104:	mov	r0, #0
   14108:	bl	122f0 <dcgettext@plt>
   1410c:	mov	r1, r4
   14110:	bl	17d34 <__assert_fail@plt+0x542c>
   14114:	ldr	r0, [pc, #52]	; 14150 <__assert_fail@plt+0x1848>
   14118:	pop	{r4, r5, r6, pc}
   1411c:	mov	r2, #0
   14120:	ldr	r0, [r5]
   14124:	mov	r1, r2
   14128:	pop	{r4, r5, r6, lr}
   1412c:	b	12608 <assuan_send_data@plt>
   14130:	ldm	r5, {r0, r1, r2}
   14134:	pop	{r4, r5, r6, lr}
   14138:	b	12608 <assuan_send_data@plt>
   1413c:	andeq	r1, r2, r8, asr #18
   14140:	andeq	r1, r2, r4, asr r9
   14144:	andeq	r1, r2, r0, ror #18
   14148:	andeq	r1, r2, r0, ror r9
   1414c:	andeq	r1, r2, r0, lsl #19
   14150:	andeq	r0, r0, r9, lsl r1
   14154:	sub	r0, r0, #1
   14158:	cmp	r0, #48	; 0x30
   1415c:	ldrls	pc, [pc, r0, lsl #2]
   14160:	b	14278 <__assert_fail@plt+0x1970>
   14164:	andeq	r4, r1, r8, ror #4
   14168:	andeq	r4, r1, r8, ror r2
   1416c:	andeq	r4, r1, r8, ror r2
   14170:	andeq	r4, r1, r8, ror r2
   14174:	andeq	r4, r1, r8, ror r2
   14178:	andeq	r4, r1, r8, ror r2
   1417c:	andeq	r4, r1, r8, ror r2
   14180:	andeq	r4, r1, r8, ror r2
   14184:	andeq	r4, r1, r8, ror r2
   14188:	andeq	r4, r1, r8, ror r2
   1418c:	andeq	r4, r1, r8, lsr #4
   14190:	andeq	r4, r1, r8, ror r2
   14194:	andeq	r4, r1, r0, lsr r2
   14198:	andeq	r4, r1, r8, ror r2
   1419c:	andeq	r4, r1, r8, ror r2
   141a0:	andeq	r4, r1, r8, ror r2
   141a4:	andeq	r4, r1, r8, lsr r2
   141a8:	andeq	r4, r1, r8, ror r2
   141ac:	andeq	r4, r1, r0, asr #4
   141b0:	andeq	r4, r1, r8, ror r2
   141b4:	andeq	r4, r1, r8, ror r2
   141b8:	andeq	r4, r1, r8, ror r2
   141bc:	andeq	r4, r1, r8, ror r2
   141c0:	andeq	r4, r1, r8, ror r2
   141c4:	andeq	r4, r1, r8, ror r2
   141c8:	andeq	r4, r1, r8, ror r2
   141cc:	andeq	r4, r1, r8, ror r2
   141d0:	andeq	r4, r1, r8, ror r2
   141d4:	andeq	r4, r1, r8, ror r2
   141d8:	andeq	r4, r1, r8, ror r2
   141dc:	andeq	r4, r1, r8, ror r2
   141e0:	andeq	r4, r1, r8, ror r2
   141e4:	andeq	r4, r1, r8, ror r2
   141e8:	andeq	r4, r1, r8, ror r2
   141ec:	andeq	r4, r1, r8, ror r2
   141f0:	andeq	r4, r1, r8, ror r2
   141f4:	andeq	r4, r1, r8, ror r2
   141f8:	andeq	r4, r1, r8, ror r2
   141fc:	andeq	r4, r1, r8, ror r2
   14200:	andeq	r4, r1, r8, ror #4
   14204:	andeq	r4, r1, r0, asr r2
   14208:	andeq	r4, r1, r8, ror r2
   1420c:	andeq	r4, r1, r8, ror r2
   14210:	andeq	r4, r1, r8, ror r2
   14214:	andeq	r4, r1, r8, ror r2
   14218:	andeq	r4, r1, r8, ror r2
   1421c:	andeq	r4, r1, r8, ror r2
   14220:	andeq	r4, r1, r8, ror r2
   14224:	andeq	r4, r1, r0, ror #4
   14228:	ldr	r0, [pc, #80]	; 14280 <__assert_fail@plt+0x1978>
   1422c:	bx	lr
   14230:	ldr	r0, [pc, #76]	; 14284 <__assert_fail@plt+0x197c>
   14234:	bx	lr
   14238:	ldr	r0, [pc, #72]	; 14288 <__assert_fail@plt+0x1980>
   1423c:	bx	lr
   14240:	mov	r2, #5
   14244:	ldr	r1, [pc, #64]	; 1428c <__assert_fail@plt+0x1984>
   14248:	mov	r0, #0
   1424c:	b	122f0 <dcgettext@plt>
   14250:	mov	r2, #5
   14254:	ldr	r1, [pc, #52]	; 14290 <__assert_fail@plt+0x1988>
   14258:	mov	r0, #0
   1425c:	b	122f0 <dcgettext@plt>
   14260:	ldr	r0, [pc, #44]	; 14294 <__assert_fail@plt+0x198c>
   14264:	bx	lr
   14268:	mov	r2, #5
   1426c:	ldr	r1, [pc, #36]	; 14298 <__assert_fail@plt+0x1990>
   14270:	mov	r0, #0
   14274:	b	122f0 <dcgettext@plt>
   14278:	mov	r0, #0
   1427c:	bx	lr
   14280:	muleq	r2, ip, r9
   14284:	ldrdeq	r1, [r2], -ip
   14288:			; <UNDEFINED> instruction: 0x000219b8
   1428c:	andeq	r1, r2, r4, ror #19
   14290:	andeq	r1, r2, ip, asr #20
   14294:	andeq	r1, r2, r4, asr #19
   14298:	andeq	r1, r2, r8, lsl #20
   1429c:	ldr	r3, [pc, #56]	; 142dc <__assert_fail@plt+0x19d4>
   142a0:	ldr	r3, [r3, #264]	; 0x108
   142a4:	cmp	r3, #2
   142a8:	bgt	142b4 <__assert_fail@plt+0x19ac>
   142ac:	mov	r0, #0
   142b0:	bx	lr
   142b4:	push	{r4, lr}
   142b8:	mov	r2, #5
   142bc:	mov	r4, r1
   142c0:	mov	r0, #0
   142c4:	ldr	r1, [pc, #20]	; 142e0 <__assert_fail@plt+0x19d8>
   142c8:	bl	122f0 <dcgettext@plt>
   142cc:	mov	r1, r4
   142d0:	bl	17d34 <__assert_fail@plt+0x542c>
   142d4:	mov	r0, #0
   142d8:	pop	{r4, pc}
   142dc:	andeq	r5, r3, ip, lsl #3
   142e0:	andeq	r1, r2, r0, lsr fp
   142e4:	ldr	r3, [pc, #320]	; 1442c <__assert_fail@plt+0x1b24>
   142e8:	ldr	r3, [r3, #276]	; 0x114
   142ec:	cmp	r3, #0
   142f0:	bne	143e8 <__assert_fail@plt+0x1ae0>
   142f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f8:	sub	sp, sp, #12
   142fc:	cmp	r0, #0
   14300:	mov	r9, r0
   14304:	mov	fp, r2
   14308:	str	r1, [sp, #4]
   1430c:	beq	143cc <__assert_fail@plt+0x1ac4>
   14310:	bl	136c8 <__assert_fail@plt+0xdc0>
   14314:	subs	r5, r0, #0
   14318:	beq	143c0 <__assert_fail@plt+0x1ab8>
   1431c:	ldr	r1, [pc, #268]	; 14430 <__assert_fail@plt+0x1b28>
   14320:	mov	r0, r9
   14324:	bl	12800 <fopen64@plt>
   14328:	mov	r7, r0
   1432c:	cmp	r7, #0
   14330:	beq	14418 <__assert_fail@plt+0x1b10>
   14334:	mov	r6, #0
   14338:	ldr	r8, [pc, #244]	; 14434 <__assert_fail@plt+0x1b2c>
   1433c:	mov	r5, r6
   14340:	mov	r4, r6
   14344:	b	14354 <__assert_fail@plt+0x1a4c>
   14348:	cmp	r0, #8192	; 0x2000
   1434c:	add	r6, r6, r0
   14350:	bne	143a0 <__assert_fail@plt+0x1a98>
   14354:	add	r5, r5, #8192	; 0x2000
   14358:	subs	r0, r4, #0
   1435c:	mov	r1, r5
   14360:	beq	143d8 <__assert_fail@plt+0x1ad0>
   14364:	bl	124a0 <gcry_xrealloc@plt>
   14368:	mov	r4, r0
   1436c:	mov	r3, r7
   14370:	mov	r2, #8192	; 0x2000
   14374:	mov	r1, #1
   14378:	add	r0, r4, r6
   1437c:	bl	12410 <fread@plt>
   14380:	cmp	r0, r8
   14384:	mov	sl, r0
   14388:	bhi	14348 <__assert_fail@plt+0x1a40>
   1438c:	mov	r0, r7
   14390:	bl	12254 <ferror@plt>
   14394:	cmp	r0, #0
   14398:	addeq	r6, r6, sl
   1439c:	bne	143ec <__assert_fail@plt+0x1ae4>
   143a0:	cmp	r9, #0
   143a4:	beq	143b0 <__assert_fail@plt+0x1aa8>
   143a8:	mov	r0, r7
   143ac:	bl	126d4 <fclose@plt>
   143b0:	ldr	r3, [sp, #4]
   143b4:	mov	r5, #0
   143b8:	str	r4, [r3]
   143bc:	str	r6, [fp]
   143c0:	mov	r0, r5
   143c4:	add	sp, sp, #12
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	ldr	r3, [pc, #100]	; 14438 <__assert_fail@plt+0x1b30>
   143d0:	ldr	r7, [r3]
   143d4:	b	1432c <__assert_fail@plt+0x1a24>
   143d8:	mov	r0, r5
   143dc:	bl	1214c <gcry_xmalloc@plt>
   143e0:	mov	r4, r0
   143e4:	b	1436c <__assert_fail@plt+0x1a64>
   143e8:	b	136c8 <__assert_fail@plt+0xdc0>
   143ec:	bl	12620 <__errno_location@plt>
   143f0:	ldr	r0, [r0]
   143f4:	bl	123d4 <gpg_err_code_from_errno@plt>
   143f8:	uxth	r5, r0
   143fc:	mov	r0, r4
   14400:	bl	122a8 <gcry_free@plt>
   14404:	cmp	r9, #0
   14408:	beq	143c0 <__assert_fail@plt+0x1ab8>
   1440c:	mov	r0, r7
   14410:	bl	126d4 <fclose@plt>
   14414:	b	143c0 <__assert_fail@plt+0x1ab8>
   14418:	bl	12620 <__errno_location@plt>
   1441c:	ldr	r0, [r0]
   14420:	bl	123d4 <gpg_err_code_from_errno@plt>
   14424:	uxth	r5, r0
   14428:	b	143c0 <__assert_fail@plt+0x1ab8>
   1442c:	andeq	r5, r3, ip, lsl #3
   14430:	andeq	r1, r2, r4, asr #22
   14434:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   14438:	andeq	r5, r3, r0, lsl #3
   1443c:	cmp	r1, #0
   14440:	beq	1445c <__assert_fail@plt+0x1b54>
   14444:	push	{r4, r5, r6, lr}
   14448:	bl	19c6c <__assert_fail@plt+0x7364>
   1444c:	subs	r4, r0, #0
   14450:	bne	14464 <__assert_fail@plt+0x1b5c>
   14454:	mov	r0, #0
   14458:	pop	{r4, r5, r6, pc}
   1445c:	mov	r0, #0
   14460:	bx	lr
   14464:	mov	r2, #5
   14468:	ldr	r1, [pc, #36]	; 14494 <__assert_fail@plt+0x1b8c>
   1446c:	mov	r0, #0
   14470:	bl	122f0 <dcgettext@plt>
   14474:	mov	r5, r0
   14478:	mov	r0, r4
   1447c:	bl	127ac <gpg_strerror@plt>
   14480:	mov	r1, r0
   14484:	mov	r0, r5
   14488:	bl	17d98 <__assert_fail@plt+0x5490>
   1448c:	mov	r0, #0
   14490:	pop	{r4, r5, r6, pc}
   14494:	andeq	r1, r2, r8, asr #22
   14498:	push	{r4, lr}
   1449c:	mov	r0, #6
   144a0:	ldr	r4, [pc, #28]	; 144c4 <__assert_fail@plt+0x1bbc>
   144a4:	ldr	r1, [pc, #28]	; 144c8 <__assert_fail@plt+0x1bc0>
   144a8:	bl	1271c <setlocale@plt>
   144ac:	mov	r0, r4
   144b0:	ldr	r1, [pc, #20]	; 144cc <__assert_fail@plt+0x1bc4>
   144b4:	bl	12848 <bindtextdomain@plt>
   144b8:	mov	r0, r4
   144bc:	pop	{r4, lr}
   144c0:	b	12374 <textdomain@plt>
   144c4:	ldrdeq	r1, [r2], -r0
   144c8:	andeq	r3, r2, r8, lsl #21
   144cc:			; <UNDEFINED> instruction: 0x00021fbc
   144d0:	push	{r4, r5, r6, lr}
   144d4:	mov	r1, #0
   144d8:	ldr	r0, [pc, #88]	; 14538 <__assert_fail@plt+0x1c30>
   144dc:	bl	1241c <bind_textdomain_codeset@plt>
   144e0:	subs	r4, r0, #0
   144e4:	beq	14510 <__assert_fail@plt+0x1c08>
   144e8:	mov	r0, r4
   144ec:	bl	126b0 <gcry_xstrdup@plt>
   144f0:	ldr	r1, [pc, #68]	; 1453c <__assert_fail@plt+0x1c34>
   144f4:	mov	r4, r0
   144f8:	ldr	r0, [pc, #56]	; 14538 <__assert_fail@plt+0x1c30>
   144fc:	bl	1241c <bind_textdomain_codeset@plt>
   14500:	subs	r5, r0, #0
   14504:	beq	14528 <__assert_fail@plt+0x1c20>
   14508:	mov	r0, r4
   1450c:	pop	{r4, r5, r6, pc}
   14510:	mov	r0, #14
   14514:	bl	12770 <nl_langinfo@plt>
   14518:	subs	r4, r0, #0
   1451c:	bne	144e8 <__assert_fail@plt+0x1be0>
   14520:	mov	r0, r4
   14524:	pop	{r4, r5, r6, pc}
   14528:	mov	r0, r4
   1452c:	bl	122a8 <gcry_free@plt>
   14530:	mov	r4, r5
   14534:	b	14508 <__assert_fail@plt+0x1c00>
   14538:	ldrdeq	r1, [r2], -r0
   1453c:	ldrdeq	r1, [r2], -r8
   14540:	push	{r4, lr}
   14544:	subs	r4, r0, #0
   14548:	popeq	{r4, pc}
   1454c:	mov	r1, r4
   14550:	ldr	r0, [pc, #12]	; 14564 <__assert_fail@plt+0x1c5c>
   14554:	bl	1241c <bind_textdomain_codeset@plt>
   14558:	mov	r0, r4
   1455c:	pop	{r4, lr}
   14560:	b	122a8 <gcry_free@plt>
   14564:	ldrdeq	r1, [r2], -r0
   14568:	push	{r4, r5, r6, lr}
   1456c:	mov	r5, r0
   14570:	bl	144d0 <__assert_fail@plt+0x1bc8>
   14574:	mov	r1, r5
   14578:	mov	r2, #5
   1457c:	mov	r4, r0
   14580:	mov	r0, #0
   14584:	bl	122f0 <dcgettext@plt>
   14588:	cmp	r4, #0
   1458c:	mov	r5, r0
   14590:	beq	145a8 <__assert_fail@plt+0x1ca0>
   14594:	mov	r1, r4
   14598:	ldr	r0, [pc, #16]	; 145b0 <__assert_fail@plt+0x1ca8>
   1459c:	bl	1241c <bind_textdomain_codeset@plt>
   145a0:	mov	r0, r4
   145a4:	bl	122a8 <gcry_free@plt>
   145a8:	mov	r0, r5
   145ac:	pop	{r4, r5, r6, pc}
   145b0:	ldrdeq	r1, [r2], -r0
   145b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145b8:	subs	r5, r0, #0
   145bc:	mov	r6, r1
   145c0:	beq	146c0 <__assert_fail@plt+0x1db8>
   145c4:	ldr	r8, [pc, #376]	; 14744 <__assert_fail@plt+0x1e3c>
   145c8:	ldr	r4, [r8]
   145cc:	cmp	r4, #0
   145d0:	bne	145e4 <__assert_fail@plt+0x1cdc>
   145d4:	b	1462c <__assert_fail@plt+0x1d24>
   145d8:	ldr	r4, [r4]
   145dc:	cmp	r4, #0
   145e0:	beq	1462c <__assert_fail@plt+0x1d24>
   145e4:	mov	r1, r5
   145e8:	add	r0, r4, #8
   145ec:	bl	121ac <strcmp@plt>
   145f0:	cmp	r0, #0
   145f4:	bne	145d8 <__assert_fail@plt+0x1cd0>
   145f8:	ldr	r3, [r4, #4]
   145fc:	cmp	r3, #0
   14600:	beq	1462c <__assert_fail@plt+0x1d24>
   14604:	ldr	r2, [r3, #4]
   14608:	cmp	r6, r2
   1460c:	bne	14620 <__assert_fail@plt+0x1d18>
   14610:	b	146dc <__assert_fail@plt+0x1dd4>
   14614:	ldr	r2, [r3, #4]
   14618:	cmp	r2, r6
   1461c:	beq	146dc <__assert_fail@plt+0x1dd4>
   14620:	ldr	r3, [r3]
   14624:	cmp	r3, #0
   14628:	bne	14614 <__assert_fail@plt+0x1d0c>
   1462c:	mov	r1, #0
   14630:	mov	r0, #5
   14634:	bl	1271c <setlocale@plt>
   14638:	cmp	r0, #0
   1463c:	beq	146c0 <__assert_fail@plt+0x1db8>
   14640:	bl	128d8 <gcry_strdup@plt>
   14644:	subs	r9, r0, #0
   14648:	beq	146c0 <__assert_fail@plt+0x1db8>
   1464c:	mov	r1, r5
   14650:	mov	r0, #5
   14654:	bl	1271c <setlocale@plt>
   14658:	cmp	r0, #0
   1465c:	beq	146fc <__assert_fail@plt+0x1df4>
   14660:	ldr	r1, [pc, #224]	; 14748 <__assert_fail@plt+0x1e40>
   14664:	ldr	r0, [pc, #224]	; 1474c <__assert_fail@plt+0x1e44>
   14668:	bl	12848 <bindtextdomain@plt>
   1466c:	mov	r2, #5
   14670:	mov	r1, r6
   14674:	mov	r0, #0
   14678:	bl	122f0 <dcgettext@plt>
   1467c:	mov	r1, r9
   14680:	mov	r7, r0
   14684:	mov	r0, #5
   14688:	bl	1271c <setlocale@plt>
   1468c:	ldr	r1, [pc, #180]	; 14748 <__assert_fail@plt+0x1e40>
   14690:	ldr	r0, [pc, #180]	; 1474c <__assert_fail@plt+0x1e44>
   14694:	bl	12848 <bindtextdomain@plt>
   14698:	cmp	r4, #0
   1469c:	beq	14708 <__assert_fail@plt+0x1e00>
   146a0:	mov	r0, #12
   146a4:	bl	1217c <gcry_malloc@plt>
   146a8:	cmp	r0, #0
   146ac:	ldrne	r3, [r4, #4]
   146b0:	strdne	r6, [r0, #4]
   146b4:	strne	r3, [r0]
   146b8:	strne	r0, [r4, #4]
   146bc:	b	146e4 <__assert_fail@plt+0x1ddc>
   146c0:	mov	r0, #0
   146c4:	bl	122a8 <gcry_free@plt>
   146c8:	mov	r1, r6
   146cc:	mov	r2, #5
   146d0:	mov	r0, #0
   146d4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   146d8:	b	122f0 <dcgettext@plt>
   146dc:	ldr	r7, [r3, #8]
   146e0:	mov	r9, #0
   146e4:	mov	r0, r9
   146e8:	bl	122a8 <gcry_free@plt>
   146ec:	cmp	r7, #0
   146f0:	beq	146c8 <__assert_fail@plt+0x1dc0>
   146f4:	mov	r0, r7
   146f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146fc:	mov	r0, r9
   14700:	bl	122a8 <gcry_free@plt>
   14704:	b	146c8 <__assert_fail@plt+0x1dc0>
   14708:	mov	r0, r5
   1470c:	bl	1259c <strlen@plt>
   14710:	add	r0, r0, #12
   14714:	bl	1217c <gcry_malloc@plt>
   14718:	subs	r4, r0, #0
   1471c:	beq	146e4 <__assert_fail@plt+0x1ddc>
   14720:	mov	r1, r5
   14724:	add	r0, r4, #8
   14728:	bl	12404 <strcpy@plt>
   1472c:	ldr	r2, [r8]
   14730:	mov	r3, #0
   14734:	str	r2, [r4]
   14738:	str	r4, [r8]
   1473c:	str	r3, [r4, #4]
   14740:	b	146a0 <__assert_fail@plt+0x1d98>
   14744:			; <UNDEFINED> instruction: 0x000352b4
   14748:			; <UNDEFINED> instruction: 0x00021fbc
   1474c:	ldrdeq	r1, [r2], -r0
   14750:	push	{r4, r5, r6, lr}
   14754:	mov	r5, r1
   14758:	ldr	r1, [r0, #8]
   1475c:	mov	r4, r0
   14760:	ands	r3, r1, #32768	; 0x8000
   14764:	bne	147ac <__assert_fail@plt+0x1ea4>
   14768:	ldr	r2, [r0]
   1476c:	orr	r1, r1, #32768	; 0x8000
   14770:	str	r1, [r0, #8]
   14774:	str	r3, [r0, #28]
   14778:	str	r3, [r0, #32]
   1477c:	str	r3, [r0, #36]	; 0x24
   14780:	str	r3, [r0, #12]
   14784:	ldr	r2, [r2]
   14788:	str	r3, [r0, #40]	; 0x28
   1478c:	cmp	r2, #0
   14790:	str	r3, [r0, #44]	; 0x2c
   14794:	str	r3, [r0, #48]	; 0x30
   14798:	str	r3, [r0, #52]	; 0x34
   1479c:	blt	14904 <__assert_fail@plt+0x1ffc>
   147a0:	mov	r3, #0
   147a4:	str	r3, [r4, #24]
   147a8:	pop	{r4, r5, r6, pc}
   147ac:	ldr	r3, [r0, #12]
   147b0:	cmp	r3, #0
   147b4:	beq	147a0 <__assert_fail@plt+0x1e98>
   147b8:	cmp	r5, #0
   147bc:	ldr	r3, [r0, #16]
   147c0:	beq	14848 <__assert_fail@plt+0x1f40>
   147c4:	cmn	r3, #6
   147c8:	mov	r6, r2
   147cc:	mov	r2, #5
   147d0:	beq	148ac <__assert_fail@plt+0x1fa4>
   147d4:	cmn	r3, #5
   147d8:	beq	148c0 <__assert_fail@plt+0x1fb8>
   147dc:	cmn	r3, #4
   147e0:	beq	148d4 <__assert_fail@plt+0x1fcc>
   147e4:	cmn	r3, #3
   147e8:	beq	1490c <__assert_fail@plt+0x2004>
   147ec:	cmn	r3, #12
   147f0:	beq	1493c <__assert_fail@plt+0x2034>
   147f4:	cmn	r3, #7
   147f8:	beq	1496c <__assert_fail@plt+0x2064>
   147fc:	cmn	r3, #10
   14800:	beq	1499c <__assert_fail@plt+0x2094>
   14804:	cmn	r3, #11
   14808:	mov	r0, #0
   1480c:	ldreq	r1, [pc, #496]	; 14a04 <__assert_fail@plt+0x20fc>
   14810:	ldrne	r1, [pc, #496]	; 14a08 <__assert_fail@plt+0x2100>
   14814:	bl	122f0 <dcgettext@plt>
   14818:	mov	r3, r0
   1481c:	ldr	r2, [r6]
   14820:	mov	r1, r5
   14824:	ldr	r0, [pc, #480]	; 14a0c <__assert_fail@plt+0x2104>
   14828:	bl	17d98 <__assert_fail@plt+0x5490>
   1482c:	ldr	r3, [r4, #12]
   14830:	cmp	r3, #1
   14834:	moveq	r3, #0
   14838:	streq	r3, [r4, #12]
   1483c:	beq	147a0 <__assert_fail@plt+0x1e98>
   14840:	mov	r0, #2
   14844:	bl	12560 <exit@plt>
   14848:	ldr	r6, [r0, #40]	; 0x28
   1484c:	ldr	r2, [pc, #444]	; 14a10 <__assert_fail@plt+0x2108>
   14850:	cmp	r6, #0
   14854:	moveq	r6, r2
   14858:	cmn	r3, #3
   1485c:	beq	14920 <__assert_fail@plt+0x2018>
   14860:	cmn	r3, #12
   14864:	beq	14950 <__assert_fail@plt+0x2048>
   14868:	cmn	r3, #6
   1486c:	beq	14980 <__assert_fail@plt+0x2078>
   14870:	cmn	r3, #7
   14874:	beq	149b0 <__assert_fail@plt+0x20a8>
   14878:	cmn	r3, #8
   1487c:	beq	148e8 <__assert_fail@plt+0x1fe0>
   14880:	cmn	r3, #9
   14884:	beq	149e8 <__assert_fail@plt+0x20e0>
   14888:	cmn	r3, #11
   1488c:	mov	r2, #5
   14890:	beq	149cc <__assert_fail@plt+0x20c4>
   14894:	ldr	r1, [pc, #376]	; 14a14 <__assert_fail@plt+0x210c>
   14898:	mov	r0, #0
   1489c:	bl	122f0 <dcgettext@plt>
   148a0:	mov	r1, r6
   148a4:	bl	17d98 <__assert_fail@plt+0x5490>
   148a8:	b	1482c <__assert_fail@plt+0x1f24>
   148ac:	ldr	r1, [pc, #356]	; 14a18 <__assert_fail@plt+0x2110>
   148b0:	mov	r0, #0
   148b4:	bl	122f0 <dcgettext@plt>
   148b8:	mov	r3, r0
   148bc:	b	1481c <__assert_fail@plt+0x1f14>
   148c0:	ldr	r1, [pc, #340]	; 14a1c <__assert_fail@plt+0x2114>
   148c4:	mov	r0, #0
   148c8:	bl	122f0 <dcgettext@plt>
   148cc:	mov	r3, r0
   148d0:	b	1481c <__assert_fail@plt+0x1f14>
   148d4:	ldr	r1, [pc, #324]	; 14a20 <__assert_fail@plt+0x2118>
   148d8:	mov	r0, #0
   148dc:	bl	122f0 <dcgettext@plt>
   148e0:	mov	r3, r0
   148e4:	b	1481c <__assert_fail@plt+0x1f14>
   148e8:	mov	r0, r5
   148ec:	mov	r2, #5
   148f0:	ldr	r1, [pc, #300]	; 14a24 <__assert_fail@plt+0x211c>
   148f4:	bl	122f0 <dcgettext@plt>
   148f8:	mov	r1, r6
   148fc:	bl	17d98 <__assert_fail@plt+0x5490>
   14900:	b	1482c <__assert_fail@plt+0x1f24>
   14904:	ldr	r0, [pc, #284]	; 14a28 <__assert_fail@plt+0x2120>
   14908:	bl	17ea0 <__assert_fail@plt+0x5598>
   1490c:	ldr	r1, [pc, #280]	; 14a2c <__assert_fail@plt+0x2124>
   14910:	mov	r0, #0
   14914:	bl	122f0 <dcgettext@plt>
   14918:	mov	r3, r0
   1491c:	b	1481c <__assert_fail@plt+0x1f14>
   14920:	mov	r0, r5
   14924:	mov	r2, #5
   14928:	ldr	r1, [pc, #256]	; 14a30 <__assert_fail@plt+0x2128>
   1492c:	bl	122f0 <dcgettext@plt>
   14930:	mov	r1, r6
   14934:	bl	17d98 <__assert_fail@plt+0x5490>
   14938:	b	1482c <__assert_fail@plt+0x1f24>
   1493c:	ldr	r1, [pc, #240]	; 14a34 <__assert_fail@plt+0x212c>
   14940:	mov	r0, #0
   14944:	bl	122f0 <dcgettext@plt>
   14948:	mov	r3, r0
   1494c:	b	1481c <__assert_fail@plt+0x1f14>
   14950:	mov	r0, r5
   14954:	mov	r2, #5
   14958:	ldr	r1, [pc, #216]	; 14a38 <__assert_fail@plt+0x2130>
   1495c:	bl	122f0 <dcgettext@plt>
   14960:	mov	r1, r6
   14964:	bl	17d98 <__assert_fail@plt+0x5490>
   14968:	b	1482c <__assert_fail@plt+0x1f24>
   1496c:	ldr	r1, [pc, #200]	; 14a3c <__assert_fail@plt+0x2134>
   14970:	mov	r0, #0
   14974:	bl	122f0 <dcgettext@plt>
   14978:	mov	r3, r0
   1497c:	b	1481c <__assert_fail@plt+0x1f14>
   14980:	mov	r0, r5
   14984:	mov	r2, #5
   14988:	ldr	r1, [pc, #176]	; 14a40 <__assert_fail@plt+0x2138>
   1498c:	bl	122f0 <dcgettext@plt>
   14990:	mov	r1, r6
   14994:	bl	17d98 <__assert_fail@plt+0x5490>
   14998:	b	1482c <__assert_fail@plt+0x1f24>
   1499c:	ldr	r1, [pc, #160]	; 14a44 <__assert_fail@plt+0x213c>
   149a0:	mov	r0, #0
   149a4:	bl	122f0 <dcgettext@plt>
   149a8:	mov	r3, r0
   149ac:	b	1481c <__assert_fail@plt+0x1f14>
   149b0:	mov	r0, r5
   149b4:	mov	r2, #5
   149b8:	ldr	r1, [pc, #136]	; 14a48 <__assert_fail@plt+0x2140>
   149bc:	bl	122f0 <dcgettext@plt>
   149c0:	mov	r1, r6
   149c4:	bl	17d98 <__assert_fail@plt+0x5490>
   149c8:	b	1482c <__assert_fail@plt+0x1f24>
   149cc:	ldr	r1, [pc, #120]	; 14a4c <__assert_fail@plt+0x2144>
   149d0:	mov	r0, #0
   149d4:	bl	122f0 <dcgettext@plt>
   149d8:	mov	r1, r0
   149dc:	ldr	r0, [pc, #108]	; 14a50 <__assert_fail@plt+0x2148>
   149e0:	bl	17d98 <__assert_fail@plt+0x5490>
   149e4:	b	1482c <__assert_fail@plt+0x1f24>
   149e8:	mov	r0, r5
   149ec:	mov	r2, #5
   149f0:	ldr	r1, [pc, #92]	; 14a54 <__assert_fail@plt+0x214c>
   149f4:	bl	122f0 <dcgettext@plt>
   149f8:	mov	r1, r6
   149fc:	bl	17d98 <__assert_fail@plt+0x5490>
   14a00:	b	1482c <__assert_fail@plt+0x1f24>
   14a04:	ldrdeq	r2, [r2], -r4
   14a08:	andeq	r2, r2, r0, ror #1
   14a0c:	strdeq	r2, [r2], -r0
   14a10:	andeq	r2, r2, r0, lsr #32
   14a14:	andeq	r2, r2, r4, ror #3
   14a18:	andeq	r2, r2, r8, asr #32
   14a1c:	andeq	r2, r2, r0, rrx
   14a20:	andeq	r2, r2, ip, rrx
   14a24:	muleq	r2, r4, r1
   14a28:	andeq	r2, r2, r8, lsr #32
   14a2c:	andeq	r2, r2, r0, lsl #1
   14a30:	strdeq	r2, [r2], -ip
   14a34:	muleq	r2, r4, r0
   14a38:	andeq	r2, r2, r4, lsr #2
   14a3c:	andeq	r2, r2, r8, lsr #1
   14a40:	andeq	r2, r2, ip, asr #2
   14a44:	strheq	r2, [r2], -r8
   14a48:	andeq	r2, r2, r8, ror r1
   14a4c:	ldrdeq	r2, [r2], -r4
   14a50:	andeq	r3, r2, r4, lsr r4
   14a54:			; <UNDEFINED> instruction: 0x000221b4
   14a58:	tst	r1, #16
   14a5c:	and	r1, r1, #7
   14a60:	push	{r4, r5, r6, r7, r8, lr}
   14a64:	movne	r7, #0
   14a68:	moveq	r7, #10
   14a6c:	cmp	r1, #3
   14a70:	mov	r6, r0
   14a74:	str	r1, [r0, #20]
   14a78:	mov	r5, r2
   14a7c:	beq	14a9c <__assert_fail@plt+0x2194>
   14a80:	cmp	r1, #4
   14a84:	beq	14adc <__assert_fail@plt+0x21d4>
   14a88:	cmp	r1, #1
   14a8c:	beq	14a9c <__assert_fail@plt+0x2194>
   14a90:	str	r2, [r6, #24]
   14a94:	mov	r0, #1
   14a98:	pop	{r4, r5, r6, r7, r8, pc}
   14a9c:	bl	12620 <__errno_location@plt>
   14aa0:	mov	r1, #0
   14aa4:	mov	r2, r7
   14aa8:	mov	r4, r0
   14aac:	mov	r0, r5
   14ab0:	str	r1, [r4]
   14ab4:	bl	121c4 <strtol@plt>
   14ab8:	sub	r3, r0, #-2147483647	; 0x80000001
   14abc:	cmn	r3, #3
   14ac0:	bls	14ad0 <__assert_fail@plt+0x21c8>
   14ac4:	ldr	r3, [r4]
   14ac8:	cmp	r3, #34	; 0x22
   14acc:	beq	14b58 <__assert_fail@plt+0x2250>
   14ad0:	str	r0, [r6, #24]
   14ad4:	mov	r0, #0
   14ad8:	pop	{r4, r5, r6, r7, r8, pc}
   14adc:	ldrb	r4, [r2]
   14ae0:	tst	r4, #128	; 0x80
   14ae4:	bne	14b10 <__assert_fail@plt+0x2208>
   14ae8:	bl	12530 <__ctype_b_loc@plt>
   14aec:	ldr	r2, [r0]
   14af0:	b	14b00 <__assert_fail@plt+0x21f8>
   14af4:	ldrb	r4, [r5, #1]!
   14af8:	tst	r4, #128	; 0x80
   14afc:	bne	14b10 <__assert_fail@plt+0x2208>
   14b00:	lsl	r3, r4, #1
   14b04:	ldrh	r3, [r2, r3]
   14b08:	tst	r3, #8192	; 0x2000
   14b0c:	bne	14af4 <__assert_fail@plt+0x21ec>
   14b10:	cmp	r4, #45	; 0x2d
   14b14:	beq	14b68 <__assert_fail@plt+0x2260>
   14b18:	bl	12620 <__errno_location@plt>
   14b1c:	mov	r4, #0
   14b20:	mov	r2, r7
   14b24:	mov	r1, r4
   14b28:	mov	r8, r0
   14b2c:	mov	r0, r5
   14b30:	str	r4, [r8]
   14b34:	bl	12584 <strtoul@plt>
   14b38:	cmn	r0, #1
   14b3c:	str	r0, [r6, #24]
   14b40:	beq	14b4c <__assert_fail@plt+0x2244>
   14b44:	mov	r0, r4
   14b48:	pop	{r4, r5, r6, r7, r8, pc}
   14b4c:	ldr	r3, [r8]
   14b50:	cmp	r3, #34	; 0x22
   14b54:	bne	14b44 <__assert_fail@plt+0x223c>
   14b58:	mvn	r3, #11
   14b5c:	str	r3, [r6, #16]
   14b60:	mvn	r0, #0
   14b64:	pop	{r4, r5, r6, r7, r8, pc}
   14b68:	mov	r2, #0
   14b6c:	mvn	r3, #11
   14b70:	str	r2, [r6, #24]
   14b74:	str	r3, [r6, #16]
   14b78:	mvn	r0, #0
   14b7c:	pop	{r4, r5, r6, r7, r8, pc}
   14b80:	push	{r1, r2, r3}
   14b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b88:	sub	sp, sp, #8
   14b8c:	ldr	r8, [pc, #188]	; 14c50 <__assert_fail@plt+0x2348>
   14b90:	ldr	r4, [sp, #44]	; 0x2c
   14b94:	ldr	r3, [r8]
   14b98:	cmp	r4, #0
   14b9c:	str	r3, [sp, #4]
   14ba0:	moveq	r5, r4
   14ba4:	beq	14c28 <__assert_fail@plt+0x2320>
   14ba8:	cmp	r0, #0
   14bac:	add	r2, sp, #48	; 0x30
   14bb0:	mov	r9, r0
   14bb4:	ldr	r6, [pc, #152]	; 14c54 <__assert_fail@plt+0x234c>
   14bb8:	ldr	fp, [pc, #152]	; 14c58 <__assert_fail@plt+0x2350>
   14bbc:	movne	r7, #2
   14bc0:	moveq	r7, #1
   14bc4:	mov	sl, r2
   14bc8:	mov	r5, #0
   14bcc:	str	r2, [sp]
   14bd0:	b	14c00 <__assert_fail@plt+0x22f8>
   14bd4:	mov	r1, r4
   14bd8:	mov	r0, r7
   14bdc:	blx	r2
   14be0:	mov	r0, r4
   14be4:	bl	1259c <strlen@plt>
   14be8:	add	sl, sl, #4
   14bec:	ldr	r4, [sl, #-4]
   14bf0:	str	sl, [sp]
   14bf4:	cmp	r4, #0
   14bf8:	add	r5, r5, r0
   14bfc:	beq	14c28 <__assert_fail@plt+0x2320>
   14c00:	ldr	r2, [r6]
   14c04:	cmp	r2, #0
   14c08:	bne	14bd4 <__assert_fail@plt+0x22cc>
   14c0c:	cmp	r9, #0
   14c10:	mov	r0, r4
   14c14:	ldrne	r3, [pc, #64]	; 14c5c <__assert_fail@plt+0x2354>
   14c18:	ldreq	r1, [fp]
   14c1c:	ldrne	r1, [r3]
   14c20:	bl	12890 <fputs@plt>
   14c24:	b	14be0 <__assert_fail@plt+0x22d8>
   14c28:	ldr	r2, [sp, #4]
   14c2c:	ldr	r3, [r8]
   14c30:	mov	r0, r5
   14c34:	cmp	r2, r3
   14c38:	bne	14c4c <__assert_fail@plt+0x2344>
   14c3c:	add	sp, sp, #8
   14c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c44:	add	sp, sp, #12
   14c48:	bx	lr
   14c4c:	bl	122fc <__stack_chk_fail@plt>
   14c50:	andeq	r4, r3, r8, lsr fp
   14c54:			; <UNDEFINED> instruction: 0x000352b8
   14c58:	andeq	r5, r3, r4, lsl #3
   14c5c:	andeq	r5, r3, r8, ror r1
   14c60:	ldr	r3, [pc, #48]	; 14c98 <__assert_fail@plt+0x2390>
   14c64:	ldr	r3, [r3]
   14c68:	cmp	r3, #0
   14c6c:	beq	14c84 <__assert_fail@plt+0x237c>
   14c70:	cmp	r0, #0
   14c74:	movne	r0, #2
   14c78:	moveq	r0, #1
   14c7c:	mov	r1, #0
   14c80:	bx	r3
   14c84:	cmp	r0, #0
   14c88:	ldrne	r3, [pc, #12]	; 14c9c <__assert_fail@plt+0x2394>
   14c8c:	ldreq	r3, [pc, #12]	; 14ca0 <__assert_fail@plt+0x2398>
   14c90:	ldr	r0, [r3]
   14c94:	b	12200 <fflush@plt>
   14c98:			; <UNDEFINED> instruction: 0x000352b8
   14c9c:	andeq	r5, r3, r8, ror r1
   14ca0:	andeq	r5, r3, r4, lsl #3
   14ca4:	ldr	r3, [pc, #4]	; 14cb0 <__assert_fail@plt+0x23a8>
   14ca8:	str	r0, [r3]
   14cac:	bx	lr
   14cb0:			; <UNDEFINED> instruction: 0x000352b8
   14cb4:	ldr	r3, [pc, #244]	; 14db0 <__assert_fail@plt+0x24a8>
   14cb8:	push	{r4, lr}
   14cbc:	mov	r4, r0
   14cc0:	ldr	r3, [r3, #4]
   14cc4:	cmp	r3, #0
   14cc8:	beq	14cd8 <__assert_fail@plt+0x23d0>
   14ccc:	blx	r3
   14cd0:	cmp	r0, #0
   14cd4:	bne	14d68 <__assert_fail@plt+0x2460>
   14cd8:	sub	r0, r4, #10
   14cdc:	cmp	r0, #31
   14ce0:	ldrls	pc, [pc, r0, lsl #2]
   14ce4:	b	14da8 <__assert_fail@plt+0x24a0>
   14ce8:	andeq	r4, r1, r8, ror sp
   14cec:	andeq	r4, r1, r0, lsl #27
   14cf0:	andeq	r4, r1, r8, lsr #27
   14cf4:	andeq	r4, r1, r8, lsl #27
   14cf8:	muleq	r1, r0, sp
   14cfc:	muleq	r1, r8, sp
   14d00:	andeq	r4, r1, r0, lsr #27
   14d04:	andeq	r4, r1, r8, lsr #27
   14d08:	andeq	r4, r1, r8, lsr #27
   14d0c:	andeq	r4, r1, r8, lsr #27
   14d10:	andeq	r4, r1, r8, lsr #27
   14d14:	andeq	r4, r1, r8, lsr #27
   14d18:	andeq	r4, r1, r8, lsr #27
   14d1c:	andeq	r4, r1, r8, lsr #27
   14d20:	andeq	r4, r1, r8, lsr #27
   14d24:	andeq	r4, r1, r8, lsr #27
   14d28:	andeq	r4, r1, r8, lsr #27
   14d2c:	andeq	r4, r1, r8, lsr #27
   14d30:	andeq	r4, r1, r8, lsr #27
   14d34:	andeq	r4, r1, r8, lsr #27
   14d38:	andeq	r4, r1, r8, lsr #27
   14d3c:	andeq	r4, r1, r8, lsr #27
   14d40:	andeq	r4, r1, r8, lsr #27
   14d44:	andeq	r4, r1, r8, lsr #27
   14d48:	andeq	r4, r1, r8, lsr #27
   14d4c:	andeq	r4, r1, r8, lsr #27
   14d50:	andeq	r4, r1, r8, lsr #27
   14d54:	andeq	r4, r1, r8, lsr #27
   14d58:	andeq	r4, r1, r8, lsr #27
   14d5c:	andeq	r4, r1, r8, lsr #27
   14d60:	andeq	r4, r1, r0, ror sp
   14d64:	andeq	r4, r1, r0, ror sp
   14d68:	pop	{r4, lr}
   14d6c:	b	1d5bc <__assert_fail@plt+0xacb4>
   14d70:	ldr	r0, [pc, #60]	; 14db4 <__assert_fail@plt+0x24ac>
   14d74:	pop	{r4, pc}
   14d78:	ldr	r0, [pc, #56]	; 14db8 <__assert_fail@plt+0x24b0>
   14d7c:	pop	{r4, pc}
   14d80:	ldr	r0, [pc, #52]	; 14dbc <__assert_fail@plt+0x24b4>
   14d84:	pop	{r4, pc}
   14d88:	ldr	r0, [pc, #48]	; 14dc0 <__assert_fail@plt+0x24b8>
   14d8c:	pop	{r4, pc}
   14d90:	ldr	r0, [pc, #44]	; 14dc4 <__assert_fail@plt+0x24bc>
   14d94:	pop	{r4, pc}
   14d98:	ldr	r0, [pc, #40]	; 14dc8 <__assert_fail@plt+0x24c0>
   14d9c:	pop	{r4, pc}
   14da0:	ldr	r0, [pc, #36]	; 14dcc <__assert_fail@plt+0x24c4>
   14da4:	pop	{r4, pc}
   14da8:	mov	r0, #0
   14dac:	pop	{r4, pc}
   14db0:			; <UNDEFINED> instruction: 0x000352b8
   14db4:	andeq	r3, r2, r8, lsl #21
   14db8:	andeq	r2, r2, r8, lsl #10
   14dbc:	strdeq	r2, [r2], -ip
   14dc0:	andeq	r2, r2, r4, lsl #10
   14dc4:	ldrdeq	r2, [r2], -r0
   14dc8:	andeq	r2, r2, r4, asr r4
   14dcc:	andeq	r2, r2, r0, lsl #4
   14dd0:	push	{r4, r5, lr}
   14dd4:	mov	r0, #11
   14dd8:	sub	sp, sp, #12
   14ddc:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14de0:	mov	r2, #0
   14de4:	mov	r1, r0
   14de8:	mov	r0, r2
   14dec:	bl	14b80 <__assert_fail@plt+0x2278>
   14df0:	mov	r0, #12
   14df4:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14df8:	subs	r2, r0, #0
   14dfc:	beq	14e14 <__assert_fail@plt+0x250c>
   14e00:	mov	r0, #0
   14e04:	str	r0, [sp]
   14e08:	ldr	r3, [pc, #268]	; 14f1c <__assert_fail@plt+0x2614>
   14e0c:	ldr	r1, [pc, #268]	; 14f20 <__assert_fail@plt+0x2618>
   14e10:	bl	14b80 <__assert_fail@plt+0x2278>
   14e14:	mov	r0, #13
   14e18:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14e1c:	mov	ip, #0
   14e20:	ldr	r3, [pc, #252]	; 14f24 <__assert_fail@plt+0x261c>
   14e24:	str	ip, [sp]
   14e28:	ldr	r1, [pc, #248]	; 14f28 <__assert_fail@plt+0x2620>
   14e2c:	mov	r5, r3
   14e30:	mov	r4, #20
   14e34:	mov	r2, r0
   14e38:	mov	r0, ip
   14e3c:	bl	14b80 <__assert_fail@plt+0x2278>
   14e40:	mov	r0, r4
   14e44:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14e48:	mov	r3, #0
   14e4c:	mov	r2, r5
   14e50:	add	r4, r4, #1
   14e54:	subs	r1, r0, #0
   14e58:	mov	r0, r3
   14e5c:	beq	14e64 <__assert_fail@plt+0x255c>
   14e60:	bl	14b80 <__assert_fail@plt+0x2278>
   14e64:	cmp	r4, #30
   14e68:	bne	14e40 <__assert_fail@plt+0x2538>
   14e6c:	mov	r0, #14
   14e70:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14e74:	subs	r1, r0, #0
   14e78:	beq	14e8c <__assert_fail@plt+0x2584>
   14e7c:	mov	r3, #0
   14e80:	mov	r0, r3
   14e84:	ldr	r2, [pc, #152]	; 14f24 <__assert_fail@plt+0x261c>
   14e88:	bl	14b80 <__assert_fail@plt+0x2278>
   14e8c:	mov	r0, #10
   14e90:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14e94:	subs	r1, r0, #0
   14e98:	beq	14eac <__assert_fail@plt+0x25a4>
   14e9c:	mov	r3, #0
   14ea0:	mov	r0, r3
   14ea4:	ldr	r2, [pc, #120]	; 14f24 <__assert_fail@plt+0x261c>
   14ea8:	bl	14b80 <__assert_fail@plt+0x2278>
   14eac:	mov	r0, #15
   14eb0:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14eb4:	subs	r1, r0, #0
   14eb8:	beq	14ec8 <__assert_fail@plt+0x25c0>
   14ebc:	mov	r2, #0
   14ec0:	mov	r0, r2
   14ec4:	bl	14b80 <__assert_fail@plt+0x2278>
   14ec8:	mov	r0, #18
   14ecc:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14ed0:	subs	r1, r0, #0
   14ed4:	beq	14ee4 <__assert_fail@plt+0x25dc>
   14ed8:	mov	r2, #0
   14edc:	mov	r0, r2
   14ee0:	bl	14b80 <__assert_fail@plt+0x2278>
   14ee4:	mov	r0, r4
   14ee8:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14eec:	mov	r2, #0
   14ef0:	add	r4, r4, #1
   14ef4:	subs	r1, r0, #0
   14ef8:	mov	r0, r2
   14efc:	beq	14f04 <__assert_fail@plt+0x25fc>
   14f00:	bl	14b80 <__assert_fail@plt+0x2278>
   14f04:	cmp	r4, #40	; 0x28
   14f08:	bne	14ee4 <__assert_fail@plt+0x25dc>
   14f0c:	mov	r0, #0
   14f10:	add	sp, sp, #12
   14f14:	pop	{r4, r5, lr}
   14f18:	b	14c60 <__assert_fail@plt+0x2358>
   14f1c:	andeq	r2, r2, r8, asr r5
   14f20:	andeq	r2, r2, ip, asr r5
   14f24:	andeq	r1, r2, r0, asr #22
   14f28:	muleq	r2, r8, r6
   14f2c:	ldr	r3, [pc, #1504]	; 15514 <__assert_fail@plt+0x2c0c>
   14f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f34:	sub	sp, sp, #28
   14f38:	ldr	r3, [r3]
   14f3c:	mov	r7, r0
   14f40:	str	r3, [sp, #20]
   14f44:	str	r1, [sp, #8]
   14f48:	bl	14dd0 <__assert_fail@plt+0x24c8>
   14f4c:	mov	r2, #0
   14f50:	mov	r0, r2
   14f54:	ldr	r1, [pc, #1468]	; 15518 <__assert_fail@plt+0x2c10>
   14f58:	bl	14b80 <__assert_fail@plt+0x2278>
   14f5c:	mov	r0, #42	; 0x2a
   14f60:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14f64:	cmp	r0, #0
   14f68:	beq	14f78 <__assert_fail@plt+0x2670>
   14f6c:	ldrb	r3, [r0]
   14f70:	cmp	r3, #49	; 0x31
   14f74:	beq	1542c <__assert_fail@plt+0x2b24>
   14f78:	mov	r0, #41	; 0x29
   14f7c:	bl	14cb4 <__assert_fail@plt+0x23ac>
   14f80:	mov	r3, #0
   14f84:	ldr	r2, [pc, #1420]	; 15518 <__assert_fail@plt+0x2c10>
   14f88:	mov	r1, r0
   14f8c:	mov	r0, r3
   14f90:	bl	14b80 <__assert_fail@plt+0x2278>
   14f94:	ldr	r3, [r7, #12]
   14f98:	cmp	r3, #0
   14f9c:	beq	15048 <__assert_fail@plt+0x2740>
   14fa0:	ldr	r2, [r7]
   14fa4:	cmp	r2, #0
   14fa8:	beq	15020 <__assert_fail@plt+0x2718>
   14fac:	mov	r4, r7
   14fb0:	mov	r6, #0
   14fb4:	b	14ffc <__assert_fail@plt+0x26f4>
   14fb8:	ldrb	r8, [r3]
   14fbc:	cmp	r8, #64	; 0x40
   14fc0:	beq	14ff0 <__assert_fail@plt+0x26e8>
   14fc4:	bl	1259c <strlen@plt>
   14fc8:	cmp	r8, #124	; 0x7c
   14fcc:	mov	r5, r0
   14fd0:	beq	15344 <__assert_fail@plt+0x2a3c>
   14fd4:	cmp	r5, #34	; 0x22
   14fd8:	movle	r3, #1
   14fdc:	movgt	r3, #0
   14fe0:	cmp	r5, r6
   14fe4:	movle	r3, #0
   14fe8:	cmp	r3, #0
   14fec:	movne	r6, r5
   14ff0:	ldr	r3, [r4, #16]!
   14ff4:	cmp	r3, #0
   14ff8:	beq	15088 <__assert_fail@plt+0x2780>
   14ffc:	ldr	r0, [r4, #4]
   15000:	cmp	r0, #0
   15004:	beq	14ff0 <__assert_fail@plt+0x26e8>
   15008:	ldr	r3, [r4, #12]
   1500c:	cmp	r3, #0
   15010:	bne	14fb8 <__assert_fail@plt+0x26b0>
   15014:	bl	1259c <strlen@plt>
   15018:	mov	r5, r0
   1501c:	b	14fd4 <__assert_fail@plt+0x26cc>
   15020:	ldrb	r3, [r3]
   15024:	cmp	r3, #64	; 0x40
   15028:	bne	15328 <__assert_fail@plt+0x2a20>
   1502c:	ldr	r3, [sp, #8]
   15030:	tst	r3, #32
   15034:	beq	15048 <__assert_fail@plt+0x2740>
   15038:	mov	r2, #0
   1503c:	mov	r0, r2
   15040:	ldr	r1, [pc, #1236]	; 1551c <__assert_fail@plt+0x2c14>
   15044:	bl	14b80 <__assert_fail@plt+0x2278>
   15048:	mov	r0, #19
   1504c:	bl	14cb4 <__assert_fail@plt+0x23ac>
   15050:	subs	r4, r0, #0
   15054:	beq	15078 <__assert_fail@plt+0x2770>
   15058:	mov	r2, #0
   1505c:	mov	r0, r2
   15060:	ldr	r1, [pc, #1200]	; 15518 <__assert_fail@plt+0x2c10>
   15064:	bl	14b80 <__assert_fail@plt+0x2278>
   15068:	mov	r2, #0
   1506c:	mov	r1, r4
   15070:	mov	r0, r2
   15074:	bl	14b80 <__assert_fail@plt+0x2278>
   15078:	mov	r0, #0
   1507c:	bl	14c60 <__assert_fail@plt+0x2358>
   15080:	mov	r0, #0
   15084:	bl	12560 <exit@plt>
   15088:	ldr	r3, [r7, #12]
   1508c:	add	r6, r6, #10
   15090:	ldrb	r3, [r3]
   15094:	cmp	r3, #64	; 0x40
   15098:	bne	1532c <__assert_fail@plt+0x2a24>
   1509c:	ldr	r3, [r7]
   150a0:	cmp	r3, #0
   150a4:	beq	1502c <__assert_fail@plt+0x2724>
   150a8:	ldr	fp, [pc, #1136]	; 15520 <__assert_fail@plt+0x2c18>
   150ac:	ldr	sl, [pc, #1136]	; 15524 <__assert_fail@plt+0x2c1c>
   150b0:	add	r7, r7, #16
   150b4:	mov	r2, #5
   150b8:	ldr	r1, [r7, #-4]
   150bc:	mov	r0, #0
   150c0:	bl	122f0 <dcgettext@plt>
   150c4:	bl	1d5bc <__assert_fail@plt+0xacb4>
   150c8:	subs	r5, r0, #0
   150cc:	beq	150dc <__assert_fail@plt+0x27d4>
   150d0:	ldrb	r3, [r5]
   150d4:	cmp	r3, #64	; 0x40
   150d8:	beq	15298 <__assert_fail@plt+0x2990>
   150dc:	ldr	r1, [r7, #-16]
   150e0:	cmp	r1, #255	; 0xff
   150e4:	bgt	151c8 <__assert_fail@plt+0x28c0>
   150e8:	mov	ip, #0
   150ec:	add	r9, sp, #16
   150f0:	mov	r3, ip
   150f4:	strb	r1, [sp, #16]
   150f8:	mov	r0, ip
   150fc:	mov	r2, r9
   15100:	ldr	r1, [pc, #1056]	; 15528 <__assert_fail@plt+0x2c20>
   15104:	strb	ip, [sp, #17]
   15108:	bl	14b80 <__assert_fail@plt+0x2278>
   1510c:	ldr	r3, [r7, #-12]
   15110:	cmp	r3, #0
   15114:	movne	r4, #3
   15118:	beq	1530c <__assert_fail@plt+0x2a04>
   1511c:	ldr	r2, [r7, #-16]
   15120:	mov	r8, #0
   15124:	cmp	r2, #256	; 0x100
   15128:	movlt	ip, #44	; 0x2c
   1512c:	movge	ip, #32
   15130:	str	r8, [sp]
   15134:	mov	r0, r8
   15138:	mov	r2, fp
   1513c:	mov	r1, r9
   15140:	strb	ip, [sp, #16]
   15144:	strb	r8, [sp, #17]
   15148:	bl	14b80 <__assert_fail@plt+0x2278>
   1514c:	cmp	r5, r8
   15150:	add	r4, r4, r0
   15154:	beq	15164 <__assert_fail@plt+0x285c>
   15158:	ldrb	r3, [r5]
   1515c:	cmp	r3, #124	; 0x7c
   15160:	beq	15394 <__assert_fail@plt+0x2a8c>
   15164:	mov	r2, #0
   15168:	mov	r0, r2
   1516c:	mov	r1, sl
   15170:	add	r4, r4, #3
   15174:	bl	14b80 <__assert_fail@plt+0x2278>
   15178:	cmp	r6, r4
   1517c:	ble	151a0 <__assert_fail@plt+0x2898>
   15180:	ldr	r8, [pc, #932]	; 1552c <__assert_fail@plt+0x2c24>
   15184:	mov	r2, #0
   15188:	add	r4, r4, #1
   1518c:	mov	r0, r2
   15190:	mov	r1, r8
   15194:	bl	14b80 <__assert_fail@plt+0x2278>
   15198:	cmp	r6, r4
   1519c:	bne	15184 <__assert_fail@plt+0x287c>
   151a0:	cmp	r5, #0
   151a4:	bne	151f0 <__assert_fail@plt+0x28e8>
   151a8:	mov	r2, #0
   151ac:	mov	r0, r2
   151b0:	ldr	r1, [pc, #864]	; 15518 <__assert_fail@plt+0x2c10>
   151b4:	bl	14b80 <__assert_fail@plt+0x2278>
   151b8:	ldr	r3, [r7], #16
   151bc:	cmp	r3, #0
   151c0:	bne	150b4 <__assert_fail@plt+0x27ac>
   151c4:	b	1502c <__assert_fail@plt+0x2724>
   151c8:	mov	r2, #0
   151cc:	mov	r0, r2
   151d0:	mov	r1, sl
   151d4:	bl	14b80 <__assert_fail@plt+0x2278>
   151d8:	ldr	r3, [r7, #-12]
   151dc:	mov	r4, #3
   151e0:	cmp	r3, #0
   151e4:	addne	r9, sp, #16
   151e8:	bne	1511c <__assert_fail@plt+0x2814>
   151ec:	b	15180 <__assert_fail@plt+0x2878>
   151f0:	ldrb	r3, [r5]
   151f4:	cmp	r3, #0
   151f8:	cmpne	r6, r4
   151fc:	blt	15468 <__assert_fail@plt+0x2b60>
   15200:	cmp	r3, #0
   15204:	beq	151a8 <__assert_fail@plt+0x28a0>
   15208:	cmp	r3, #10
   1520c:	mov	r8, #0
   15210:	ldr	r4, [pc, #788]	; 1552c <__assert_fail@plt+0x2c24>
   15214:	bne	1526c <__assert_fail@plt+0x2964>
   15218:	ldrb	r3, [r5, #1]
   1521c:	cmp	r3, #0
   15220:	beq	151a8 <__assert_fail@plt+0x28a0>
   15224:	mov	r2, #0
   15228:	mov	r0, r2
   1522c:	ldr	r1, [pc, #740]	; 15518 <__assert_fail@plt+0x2c10>
   15230:	bl	14b80 <__assert_fail@plt+0x2278>
   15234:	mov	r9, #0
   15238:	mov	r2, #0
   1523c:	add	r9, r9, #1
   15240:	mov	r0, r2
   15244:	mov	r1, r4
   15248:	bl	14b80 <__assert_fail@plt+0x2278>
   1524c:	cmp	r6, r9
   15250:	bne	15238 <__assert_fail@plt+0x2930>
   15254:	ldrb	r3, [r5, #1]
   15258:	add	r5, r5, #1
   1525c:	cmp	r3, #0
   15260:	beq	151a8 <__assert_fail@plt+0x28a0>
   15264:	cmp	r3, #10
   15268:	beq	15218 <__assert_fail@plt+0x2910>
   1526c:	mov	r2, #0
   15270:	mov	r0, r2
   15274:	add	r1, sp, #16
   15278:	strb	r3, [sp, #16]
   1527c:	strb	r8, [sp, #17]
   15280:	bl	14b80 <__assert_fail@plt+0x2278>
   15284:	ldrb	r3, [r5, #1]
   15288:	add	r5, r5, #1
   1528c:	cmp	r3, #0
   15290:	bne	15264 <__assert_fail@plt+0x295c>
   15294:	b	151a8 <__assert_fail@plt+0x28a0>
   15298:	ldrb	r3, [r5, #1]
   1529c:	cmp	r3, #0
   152a0:	beq	151b8 <__assert_fail@plt+0x28b0>
   152a4:	cmp	r3, #10
   152a8:	add	r5, r5, #1
   152ac:	mov	r4, #0
   152b0:	ldr	r8, [pc, #608]	; 15518 <__assert_fail@plt+0x2c10>
   152b4:	bne	152ec <__assert_fail@plt+0x29e4>
   152b8:	ldrb	r3, [r5, #1]
   152bc:	cmp	r3, #0
   152c0:	beq	151a8 <__assert_fail@plt+0x28a0>
   152c4:	mov	r2, #0
   152c8:	mov	r0, r2
   152cc:	mov	r1, r8
   152d0:	bl	14b80 <__assert_fail@plt+0x2278>
   152d4:	ldrb	r3, [r5, #1]
   152d8:	cmp	r3, #0
   152dc:	add	r5, r5, #1
   152e0:	beq	151a8 <__assert_fail@plt+0x28a0>
   152e4:	cmp	r3, #10
   152e8:	beq	152b8 <__assert_fail@plt+0x29b0>
   152ec:	mov	r2, #0
   152f0:	mov	r0, r2
   152f4:	add	r1, sp, #16
   152f8:	strb	r3, [sp, #16]
   152fc:	strb	r4, [sp, #17]
   15300:	bl	14b80 <__assert_fail@plt+0x2278>
   15304:	ldrb	r3, [r5, #1]
   15308:	b	152d8 <__assert_fail@plt+0x29d0>
   1530c:	cmp	r5, #0
   15310:	beq	15320 <__assert_fail@plt+0x2a18>
   15314:	ldrb	r2, [r5]
   15318:	cmp	r2, #124	; 0x7c
   1531c:	beq	154a4 <__assert_fail@plt+0x2b9c>
   15320:	mov	r4, #3
   15324:	b	15180 <__assert_fail@plt+0x2878>
   15328:	mov	r6, #10
   1532c:	mov	r3, #0
   15330:	mov	r0, r3
   15334:	ldr	r2, [pc, #476]	; 15518 <__assert_fail@plt+0x2c10>
   15338:	ldr	r1, [pc, #496]	; 15530 <__assert_fail@plt+0x2c28>
   1533c:	bl	14b80 <__assert_fail@plt+0x2278>
   15340:	b	1509c <__assert_fail@plt+0x2794>
   15344:	bl	1fe0c <__assert_fail@plt+0xd504>
   15348:	ldr	r3, [r4, #12]
   1534c:	add	r2, r3, #1
   15350:	ldrb	r3, [r3, #1]
   15354:	cmp	r3, #61	; 0x3d
   15358:	beq	1536c <__assert_fail@plt+0x2a64>
   1535c:	cmp	r3, #124	; 0x7c
   15360:	cmpne	r3, #0
   15364:	add	r5, r5, #1
   15368:	beq	14fd4 <__assert_fail@plt+0x26cc>
   1536c:	cmp	r0, #0
   15370:	beq	15380 <__assert_fail@plt+0x2a78>
   15374:	and	r3, r3, #192	; 0xc0
   15378:	cmp	r3, #128	; 0x80
   1537c:	addne	r5, r5, #1
   15380:	ldrb	r3, [r2, #1]!
   15384:	cmp	r3, #0
   15388:	cmpne	r3, #124	; 0x7c
   1538c:	bne	1536c <__assert_fail@plt+0x2a64>
   15390:	b	14fd4 <__assert_fail@plt+0x26cc>
   15394:	ldrb	ip, [r5, #1]
   15398:	add	r3, r5, #1
   1539c:	str	r3, [sp, #12]
   153a0:	cmp	ip, #61	; 0x3d
   153a4:	bne	153fc <__assert_fail@plt+0x2af4>
   153a8:	mvn	r8, r5
   153ac:	add	r8, r8, r4
   153b0:	add	r4, r5, #2
   153b4:	mov	r5, #0
   153b8:	mov	r2, #0
   153bc:	mov	r0, r2
   153c0:	mov	r1, r9
   153c4:	strb	ip, [sp, #16]
   153c8:	strb	r5, [sp, #17]
   153cc:	bl	14b80 <__assert_fail@plt+0x2278>
   153d0:	mov	r3, r4
   153d4:	add	r2, r8, r4
   153d8:	ldrb	ip, [r4], #1
   153dc:	cmp	ip, #0
   153e0:	cmpne	ip, #124	; 0x7c
   153e4:	bne	153b8 <__assert_fail@plt+0x2ab0>
   153e8:	mov	r4, r2
   153ec:	mov	r5, r3
   153f0:	cmp	ip, #0
   153f4:	addne	r5, r5, #1
   153f8:	b	15164 <__assert_fail@plt+0x285c>
   153fc:	mov	r2, r8
   15400:	mov	r0, r8
   15404:	ldr	r1, [pc, #288]	; 1552c <__assert_fail@plt+0x2c24>
   15408:	bl	14b80 <__assert_fail@plt+0x2278>
   1540c:	ldrb	ip, [r5, #1]
   15410:	ldr	r3, [sp, #12]
   15414:	add	r4, r4, #1
   15418:	cmp	ip, #124	; 0x7c
   1541c:	cmpne	ip, r8
   15420:	moveq	r5, r3
   15424:	bne	153a8 <__assert_fail@plt+0x2aa0>
   15428:	b	153f0 <__assert_fail@plt+0x2ae8>
   1542c:	mov	r0, #40	; 0x28
   15430:	bl	14cb4 <__assert_fail@plt+0x23ac>
   15434:	mov	r2, #0
   15438:	mov	r4, r0
   1543c:	mov	r1, r0
   15440:	mov	r0, #1
   15444:	bl	14b80 <__assert_fail@plt+0x2278>
   15448:	ldrb	r3, [r4]
   1544c:	cmp	r3, #0
   15450:	beq	14f78 <__assert_fail@plt+0x2670>
   15454:	mov	r2, #0
   15458:	ldr	r1, [pc, #184]	; 15518 <__assert_fail@plt+0x2c10>
   1545c:	mov	r0, #1
   15460:	bl	14b80 <__assert_fail@plt+0x2278>
   15464:	b	14f78 <__assert_fail@plt+0x2670>
   15468:	mov	r2, #0
   1546c:	mov	r0, r2
   15470:	ldr	r1, [pc, #160]	; 15518 <__assert_fail@plt+0x2c10>
   15474:	bl	14b80 <__assert_fail@plt+0x2278>
   15478:	ldr	r8, [pc, #172]	; 1552c <__assert_fail@plt+0x2c24>
   1547c:	mov	r4, #0
   15480:	mov	r2, #0
   15484:	add	r4, r4, #1
   15488:	mov	r0, r2
   1548c:	mov	r1, r8
   15490:	bl	14b80 <__assert_fail@plt+0x2278>
   15494:	cmp	r6, r4
   15498:	bne	15480 <__assert_fail@plt+0x2b78>
   1549c:	ldrb	r3, [r5]
   154a0:	b	15200 <__assert_fail@plt+0x28f8>
   154a4:	mov	r2, r3
   154a8:	ldr	r1, [pc, #124]	; 1552c <__assert_fail@plt+0x2c24>
   154ac:	mov	r0, r3
   154b0:	str	r3, [sp, #12]
   154b4:	add	r8, r5, #1
   154b8:	bl	14b80 <__assert_fail@plt+0x2278>
   154bc:	rsb	r5, r5, #3
   154c0:	b	154e0 <__assert_fail@plt+0x2bd8>
   154c4:	mov	r2, #0
   154c8:	ldr	r3, [sp, #12]
   154cc:	mov	r0, r2
   154d0:	mov	r1, r9
   154d4:	strb	ip, [sp, #16]
   154d8:	strb	r3, [sp, #17]
   154dc:	bl	14b80 <__assert_fail@plt+0x2278>
   154e0:	add	r4, r5, r8
   154e4:	mov	r2, r8
   154e8:	ldrb	ip, [r8], #1
   154ec:	cmp	ip, #0
   154f0:	cmpne	ip, #124	; 0x7c
   154f4:	bne	154c4 <__assert_fail@plt+0x2bbc>
   154f8:	cmp	ip, #0
   154fc:	movne	r5, r8
   15500:	moveq	r5, r2
   15504:	ldr	r3, [r7, #-12]
   15508:	cmp	r3, #0
   1550c:	bne	1511c <__assert_fail@plt+0x2814>
   15510:	b	15178 <__assert_fail@plt+0x2870>
   15514:	andeq	r4, r3, r8, lsr fp
   15518:	andeq	r1, r2, r0, asr #22
   1551c:	andeq	r2, r2, r8, ror r5
   15520:	andeq	r2, r2, r4, ror r5
   15524:	andeq	r2, r2, r0, ror r5
   15528:	andeq	r2, r2, ip, ror #10
   1552c:	muleq	r2, r8, r6
   15530:	andeq	r2, r2, r0, ror #10
   15534:	ldr	ip, [pc, #2540]	; 15f28 <__assert_fail@plt+0x3620>
   15538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1553c:	sub	sp, sp, #108	; 0x6c
   15540:	mov	r6, r1
   15544:	str	r1, [sp, #16]
   15548:	mov	r4, r0
   1554c:	ldm	ip, {r0, r1, r2, r3}
   15550:	add	r5, ip, #16
   15554:	add	lr, sp, #40	; 0x28
   15558:	stm	lr, {r0, r1, r2, r3}
   1555c:	add	lr, ip, #32
   15560:	ldm	r5, {r0, r1, r2, r3}
   15564:	add	r5, sp, #56	; 0x38
   15568:	add	ip, ip, #48	; 0x30
   1556c:	stm	r5, {r0, r1, r2, r3}
   15570:	ldm	lr, {r0, r1, r2, r3}
   15574:	add	lr, sp, #72	; 0x48
   15578:	stm	lr, {r0, r1, r2, r3}
   1557c:	ldm	ip, {r0, r1, r2, r3}
   15580:	add	ip, sp, #88	; 0x58
   15584:	stm	ip, {r0, r1, r2, r3}
   15588:	ldr	r7, [r6]
   1558c:	cmp	r7, #0
   15590:	beq	1589c <__assert_fail@plt+0x2f94>
   15594:	mov	r7, #0
   15598:	mov	r5, r6
   1559c:	str	r7, [sp, #20]
   155a0:	str	r7, [sp, #12]
   155a4:	mov	r9, r7
   155a8:	mov	r6, r7
   155ac:	ldr	r8, [pc, #2424]	; 15f2c <__assert_fail@plt+0x3624>
   155b0:	ldr	sl, [pc, #2424]	; 15f30 <__assert_fail@plt+0x3628>
   155b4:	b	155bc <__assert_fail@plt+0x2cb4>
   155b8:	mov	r6, ip
   155bc:	ldr	fp, [r5, #4]
   155c0:	cmp	fp, #0
   155c4:	beq	1562c <__assert_fail@plt+0x2d24>
   155c8:	mov	r1, r8
   155cc:	mov	r0, fp
   155d0:	bl	121ac <strcmp@plt>
   155d4:	cmp	r0, #0
   155d8:	moveq	r9, #1
   155dc:	beq	1562c <__assert_fail@plt+0x2d24>
   155e0:	mov	r1, sl
   155e4:	mov	r0, fp
   155e8:	bl	121ac <strcmp@plt>
   155ec:	cmp	r0, #0
   155f0:	moveq	r3, #1
   155f4:	streq	r3, [sp, #12]
   155f8:	beq	1562c <__assert_fail@plt+0x2d24>
   155fc:	ldr	r1, [pc, #2352]	; 15f34 <__assert_fail@plt+0x362c>
   15600:	mov	r0, fp
   15604:	bl	121ac <strcmp@plt>
   15608:	cmp	r0, #0
   1560c:	moveq	r3, #1
   15610:	streq	r3, [sp, #20]
   15614:	beq	1562c <__assert_fail@plt+0x2d24>
   15618:	mov	r0, fp
   1561c:	ldr	r1, [pc, #2324]	; 15f38 <__assert_fail@plt+0x3630>
   15620:	bl	121ac <strcmp@plt>
   15624:	cmp	r0, #0
   15628:	moveq	r7, #1
   1562c:	ldr	r3, [r5, #16]!
   15630:	add	ip, r6, #1
   15634:	cmp	r3, #0
   15638:	bne	155b8 <__assert_fail@plt+0x2cb0>
   1563c:	cmp	r9, #0
   15640:	addeq	ip, r6, #2
   15644:	beq	158ac <__assert_fail@plt+0x2fa4>
   15648:	ldr	r3, [sp, #12]
   1564c:	cmp	r3, #0
   15650:	bne	1566c <__assert_fail@plt+0x2d64>
   15654:	add	r3, sp, #56	; 0x38
   15658:	ldr	lr, [sp, #16]
   1565c:	ldm	r3, {r0, r1, r2, r3}
   15660:	add	lr, lr, ip, lsl #4
   15664:	add	ip, ip, #1
   15668:	stm	lr, {r0, r1, r2, r3}
   1566c:	ldr	r3, [sp, #20]
   15670:	cmp	r3, #0
   15674:	bne	15690 <__assert_fail@plt+0x2d88>
   15678:	add	r3, sp, #72	; 0x48
   1567c:	ldr	lr, [sp, #16]
   15680:	ldm	r3, {r0, r1, r2, r3}
   15684:	add	lr, lr, ip, lsl #4
   15688:	add	ip, ip, #1
   1568c:	stm	lr, {r0, r1, r2, r3}
   15690:	cmp	r7, #0
   15694:	addeq	r3, sp, #88	; 0x58
   15698:	ldreq	lr, [sp, #16]
   1569c:	ldmeq	r3, {r0, r1, r2, r3}
   156a0:	addeq	ip, lr, ip, lsl #4
   156a4:	stmeq	ip, {r0, r1, r2, r3}
   156a8:	mov	r2, #0
   156ac:	mov	r1, r2
   156b0:	mov	r0, r4
   156b4:	bl	14750 <__assert_fail@plt+0x1e48>
   156b8:	ldr	fp, [r4]
   156bc:	ldr	r9, [r4, #28]
   156c0:	ldr	r3, [r4, #4]
   156c4:	ldr	r8, [fp]
   156c8:	mov	r1, fp
   156cc:	adds	r2, r8, #0
   156d0:	movne	r2, #1
   156d4:	cmp	r9, #0
   156d8:	movne	r2, #0
   156dc:	cmp	r2, #0
   156e0:	ldr	r7, [r3]
   156e4:	mov	r2, r3
   156e8:	beq	15704 <__assert_fail@plt+0x2dfc>
   156ec:	ldr	r0, [r4, #8]
   156f0:	tst	r0, #16
   156f4:	bne	158bc <__assert_fail@plt+0x2fb4>
   156f8:	sub	r8, r8, #1
   156fc:	add	r7, r7, #4
   15700:	mov	r9, #1
   15704:	cmp	r8, #0
   15708:	beq	15890 <__assert_fail@plt+0x2f88>
   1570c:	ldr	sl, [r4, #36]	; 0x24
   15710:	ldr	r5, [r7]
   15714:	cmp	sl, #0
   15718:	str	r5, [r4, #40]	; 0x28
   1571c:	moveq	r1, #1
   15720:	moveq	r0, sl
   15724:	bne	15764 <__assert_fail@plt+0x2e5c>
   15728:	ldrb	r2, [r5]
   1572c:	cmp	r2, #45	; 0x2d
   15730:	beq	15794 <__assert_fail@plt+0x2e8c>
   15734:	ldr	r6, [r4, #32]
   15738:	cmp	r6, #0
   1573c:	bne	158f0 <__assert_fail@plt+0x2fe8>
   15740:	ldr	r2, [r4, #8]
   15744:	tst	r2, #4
   15748:	bne	158c4 <__assert_fail@plt+0x2fbc>
   1574c:	str	r1, [r4, #36]	; 0x24
   15750:	ldr	r2, [r4, #36]	; 0x24
   15754:	ldr	r5, [r7]
   15758:	cmp	r2, #0
   1575c:	str	r5, [r4, #40]	; 0x28
   15760:	beq	15728 <__assert_fail@plt+0x2e20>
   15764:	ldr	r2, [r4, #8]
   15768:	ands	r2, r2, #2
   1576c:	streq	r2, [r4, #16]
   15770:	moveq	r1, fp
   15774:	moveq	r2, r3
   15778:	bne	158c4 <__assert_fail@plt+0x2fbc>
   1577c:	str	r8, [r1]
   15780:	str	r7, [r2]
   15784:	ldr	r0, [r4, #16]
   15788:	str	r9, [r4, #28]
   1578c:	add	sp, sp, #108	; 0x6c
   15790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15794:	ldrb	r2, [r5, #1]
   15798:	cmp	r2, #45	; 0x2d
   1579c:	beq	15850 <__assert_fail@plt+0x2f48>
   157a0:	cmp	r2, #0
   157a4:	beq	15734 <__assert_fail@plt+0x2e2c>
   157a8:	ldr	r2, [sp, #16]
   157ac:	ldr	r6, [r4, #32]
   157b0:	ldr	r2, [r2]
   157b4:	cmp	r6, #0
   157b8:	str	r2, [sp, #20]
   157bc:	bne	158fc <__assert_fail@plt+0x2ff4>
   157c0:	ldr	r1, [r4, #8]
   157c4:	mov	r2, #1
   157c8:	tst	r1, #32
   157cc:	add	r1, r5, r2
   157d0:	str	r2, [r4, #32]
   157d4:	str	r1, [sp, #12]
   157d8:	beq	15a4c <__assert_fail@plt+0x3144>
   157dc:	ldr	r0, [sp, #20]
   157e0:	cmp	r0, #0
   157e4:	beq	15dcc <__assert_fail@plt+0x34c4>
   157e8:	ldr	r2, [sp, #16]
   157ec:	str	sl, [sp, #28]
   157f0:	str	r5, [sp, #32]
   157f4:	str	r4, [sp, #24]
   157f8:	mov	r5, r6
   157fc:	mov	sl, r1
   15800:	mov	r4, r2
   15804:	mov	r6, r3
   15808:	ldr	r0, [r4, #4]
   1580c:	cmp	r0, #0
   15810:	beq	15824 <__assert_fail@plt+0x2f1c>
   15814:	mov	r1, sl
   15818:	bl	121ac <strcmp@plt>
   1581c:	cmp	r0, #0
   15820:	beq	159bc <__assert_fail@plt+0x30b4>
   15824:	ldr	r1, [r4, #16]!
   15828:	add	r5, r5, #1
   1582c:	cmp	r1, #0
   15830:	bne	15808 <__assert_fail@plt+0x2f00>
   15834:	ldr	r5, [sp, #32]
   15838:	mov	r3, r6
   1583c:	ldr	sl, [sp, #28]
   15840:	ldr	r4, [sp, #24]
   15844:	ldrb	r1, [r5, #1]
   15848:	mov	r6, #1
   1584c:	b	15918 <__assert_fail@plt+0x3010>
   15850:	str	r0, [r4, #32]
   15854:	ldrb	r2, [r5, #2]
   15858:	cmp	r2, #0
   1585c:	bne	15ab0 <__assert_fail@plt+0x31a8>
   15860:	ldr	r2, [r4, #8]
   15864:	tst	r2, #8
   15868:	bne	15bb4 <__assert_fail@plt+0x32ac>
   1586c:	orr	r2, r2, #256	; 0x100
   15870:	subs	r8, r8, #1
   15874:	str	r2, [r4, #8]
   15878:	str	r1, [r4, #36]	; 0x24
   1587c:	add	r7, r7, #4
   15880:	add	r9, r9, #1
   15884:	bne	15750 <__assert_fail@plt+0x2e48>
   15888:	mov	r1, fp
   1588c:	mov	r2, r3
   15890:	mov	r8, #0
   15894:	str	r8, [r4, #16]
   15898:	b	1577c <__assert_fail@plt+0x2e74>
   1589c:	ldr	r5, [sp, #16]
   158a0:	mov	ip, #1
   158a4:	str	r7, [sp, #20]
   158a8:	str	r7, [sp, #12]
   158ac:	add	r3, sp, #40	; 0x28
   158b0:	ldm	r3, {r0, r1, r2, r3}
   158b4:	stm	r5, {r0, r1, r2, r3}
   158b8:	b	15648 <__assert_fail@plt+0x2d40>
   158bc:	mov	r9, #0
   158c0:	b	1570c <__assert_fail@plt+0x2e04>
   158c4:	mvn	ip, #0
   158c8:	mov	r0, #2
   158cc:	str	r5, [r4, #24]
   158d0:	add	r8, r8, ip
   158d4:	add	r7, r7, #4
   158d8:	add	r9, r9, #1
   158dc:	mov	r1, fp
   158e0:	mov	r2, r3
   158e4:	str	ip, [r4, #16]
   158e8:	str	r0, [r4, #20]
   158ec:	b	1577c <__assert_fail@plt+0x2e74>
   158f0:	ldr	r2, [sp, #16]
   158f4:	ldr	r2, [r2]
   158f8:	str	r2, [sp, #20]
   158fc:	add	r2, r5, r6
   15900:	str	r2, [sp, #12]
   15904:	ldr	r2, [sp, #20]
   15908:	cmp	r2, #0
   1590c:	ldr	r2, [sp, #12]
   15910:	ldrb	r1, [r2]
   15914:	beq	15dd4 <__assert_fail@plt+0x34cc>
   15918:	ldr	r2, [sp, #20]
   1591c:	mov	ip, r1
   15920:	cmp	r1, r2
   15924:	beq	15ddc <__assert_fail@plt+0x34d4>
   15928:	ldr	r2, [sp, #16]
   1592c:	add	r2, r2, #16
   15930:	b	15940 <__assert_fail@plt+0x3038>
   15934:	cmp	lr, r1
   15938:	add	r2, r2, #16
   1593c:	beq	159d8 <__assert_fail@plt+0x30d0>
   15940:	ldr	lr, [r2]
   15944:	mov	r0, r2
   15948:	cmp	lr, #0
   1594c:	bne	15934 <__assert_fail@plt+0x302c>
   15950:	cmp	r1, #63	; 0x3f
   15954:	cmpne	r1, #104	; 0x68
   15958:	beq	15f1c <__assert_fail@plt+0x3614>
   1595c:	ldr	r2, [r0, #8]
   15960:	ldr	r1, [sp, #12]
   15964:	tst	r2, #128	; 0x80
   15968:	add	r6, r6, #1
   1596c:	mvnne	r2, #6
   15970:	mvneq	r2, #1
   15974:	str	r6, [r4, #32]
   15978:	str	r1, [r4, #24]
   1597c:	str	r2, [r4, #16]
   15980:	ldr	r2, [sp, #12]
   15984:	mov	r1, fp
   15988:	ldrb	r0, [r2, #1]
   1598c:	mov	r2, r3
   15990:	cmp	r0, #0
   15994:	andne	sl, sl, #1
   15998:	moveq	sl, #1
   1599c:	cmp	sl, #0
   159a0:	beq	1577c <__assert_fail@plt+0x2e74>
   159a4:	mov	r3, #0
   159a8:	sub	r8, r8, #1
   159ac:	add	r7, r7, #4
   159b0:	add	r9, r9, #1
   159b4:	str	r3, [r4, #32]
   159b8:	b	1577c <__assert_fail@plt+0x2e74>
   159bc:	ldr	r2, [sp, #16]
   159c0:	mov	r3, r6
   159c4:	ldr	r4, [sp, #24]
   159c8:	mov	r6, #1
   159cc:	ldr	ip, [r2, r5, lsl #4]
   159d0:	add	r0, r2, r5, lsl #4
   159d4:	mov	sl, r6
   159d8:	cmp	ip, #0
   159dc:	beq	15a64 <__assert_fail@plt+0x315c>
   159e0:	ldr	r1, [r0, #8]
   159e4:	str	ip, [r4, #16]
   159e8:	ands	r2, r1, #7
   159ec:	beq	15a54 <__assert_fail@plt+0x314c>
   159f0:	ldr	r2, [sp, #12]
   159f4:	eor	sl, sl, #1
   159f8:	ldrb	r0, [r2, #1]
   159fc:	cmp	r0, #0
   15a00:	andne	r0, sl, #1
   15a04:	moveq	r0, #0
   15a08:	cmp	r0, #0
   15a0c:	bne	15db8 <__assert_fail@plt+0x34b0>
   15a10:	ldr	r2, [r7, #4]
   15a14:	cmp	r2, #0
   15a18:	beq	15a70 <__assert_fail@plt+0x3168>
   15a1c:	ldrb	ip, [r2]
   15a20:	cmp	ip, #45	; 0x2d
   15a24:	bne	15a94 <__assert_fail@plt+0x318c>
   15a28:	ldrb	ip, [r2, #1]
   15a2c:	cmp	ip, #0
   15a30:	beq	15a94 <__assert_fail@plt+0x318c>
   15a34:	tst	r1, #8
   15a38:	beq	15a94 <__assert_fail@plt+0x318c>
   15a3c:	str	r0, [r4, #20]
   15a40:	mov	r1, fp
   15a44:	mov	r2, r3
   15a48:	b	159a4 <__assert_fail@plt+0x309c>
   15a4c:	mov	r6, r2
   15a50:	b	15904 <__assert_fail@plt+0x2ffc>
   15a54:	add	r6, r6, #1
   15a58:	str	r6, [r4, #32]
   15a5c:	str	r2, [r4, #20]
   15a60:	b	15980 <__assert_fail@plt+0x3078>
   15a64:	ldr	r2, [sp, #12]
   15a68:	ldrb	r1, [r2]
   15a6c:	b	15950 <__assert_fail@plt+0x3048>
   15a70:	tst	r1, #8
   15a74:	mvneq	r0, #2
   15a78:	strne	r2, [r4, #20]
   15a7c:	movne	r1, fp
   15a80:	movne	r2, r3
   15a84:	moveq	r1, fp
   15a88:	moveq	r2, r3
   15a8c:	streq	r0, [r4, #16]
   15a90:	b	159a4 <__assert_fail@plt+0x309c>
   15a94:	mov	r0, r4
   15a98:	bl	14a58 <__assert_fail@plt+0x2150>
   15a9c:	sub	r8, r8, #1
   15aa0:	add	r7, r7, #4
   15aa4:	add	r9, r9, #1
   15aa8:	ldm	r4, {r1, r2}
   15aac:	b	159a4 <__assert_fail@plt+0x309c>
   15ab0:	add	r6, r5, #2
   15ab4:	mov	r0, r6
   15ab8:	mov	r1, #61	; 0x3d
   15abc:	str	r3, [sp, #20]
   15ac0:	bl	125c0 <strchr@plt>
   15ac4:	subs	r3, r0, #0
   15ac8:	str	r3, [sp, #12]
   15acc:	ldr	r3, [sp, #20]
   15ad0:	bne	15bd8 <__assert_fail@plt+0x32d0>
   15ad4:	ldr	r2, [sp, #16]
   15ad8:	ldr	r2, [r2]
   15adc:	cmp	r2, #0
   15ae0:	str	r2, [sp, #20]
   15ae4:	beq	15b90 <__assert_fail@plt+0x3288>
   15ae8:	ldr	fp, [sp, #16]
   15aec:	add	r5, fp, #4
   15af0:	ldr	r0, [r5, sl, lsl #4]
   15af4:	cmp	r0, #0
   15af8:	beq	15b0c <__assert_fail@plt+0x3204>
   15afc:	mov	r1, r6
   15b00:	bl	121ac <strcmp@plt>
   15b04:	cmp	r0, #0
   15b08:	beq	15cd4 <__assert_fail@plt+0x33cc>
   15b0c:	add	sl, sl, #1
   15b10:	ldr	r3, [fp, sl, lsl #4]
   15b14:	cmp	r3, #0
   15b18:	bne	15af0 <__assert_fail@plt+0x31e8>
   15b1c:	mov	r0, r6
   15b20:	mov	fp, r3
   15b24:	bl	1259c <strlen@plt>
   15b28:	str	r4, [sp, #24]
   15b2c:	ldr	r5, [sp, #16]
   15b30:	ldr	r4, [sp, #20]
   15b34:	mov	sl, r0
   15b38:	str	r0, [sp, #28]
   15b3c:	ldr	r0, [r5, #4]
   15b40:	cmp	r0, #0
   15b44:	beq	15b5c <__assert_fail@plt+0x3254>
   15b48:	mov	r2, sl
   15b4c:	mov	r1, r6
   15b50:	bl	1289c <strncmp@plt>
   15b54:	cmp	r0, #0
   15b58:	beq	15c18 <__assert_fail@plt+0x3310>
   15b5c:	ldr	r4, [r5, #16]!
   15b60:	add	fp, fp, #1
   15b64:	cmp	r4, #0
   15b68:	bne	15b3c <__assert_fail@plt+0x3234>
   15b6c:	ldr	r3, [sp, #12]
   15b70:	ldr	r4, [sp, #24]
   15b74:	cmp	r3, #0
   15b78:	beq	15b88 <__assert_fail@plt+0x3280>
   15b7c:	ldr	r2, [sp, #12]
   15b80:	mov	r3, #61	; 0x3d
   15b84:	strb	r3, [r2]
   15b88:	ldr	fp, [r4]
   15b8c:	ldr	r3, [r4, #4]
   15b90:	mvn	r2, #1
   15b94:	str	r6, [r4, #24]
   15b98:	str	r2, [r4, #16]
   15b9c:	sub	r8, r8, #1
   15ba0:	add	r7, r7, #4
   15ba4:	add	r9, r9, #1
   15ba8:	mov	r1, fp
   15bac:	mov	r2, r3
   15bb0:	b	1577c <__assert_fail@plt+0x2e74>
   15bb4:	add	r6, r5, #2
   15bb8:	mov	r0, r6
   15bbc:	mov	r1, #61	; 0x3d
   15bc0:	str	r3, [sp, #20]
   15bc4:	bl	125c0 <strchr@plt>
   15bc8:	subs	r3, r0, #0
   15bcc:	str	r3, [sp, #12]
   15bd0:	ldr	r3, [sp, #20]
   15bd4:	beq	15b90 <__assert_fail@plt+0x3288>
   15bd8:	ldr	r2, [sp, #12]
   15bdc:	mov	r3, #0
   15be0:	strb	r3, [r2]
   15be4:	ldrb	r3, [r5, #2]
   15be8:	cmp	r3, #0
   15bec:	moveq	r3, #61	; 0x3d
   15bf0:	strbeq	r3, [r2]
   15bf4:	ldreq	fp, [r4]
   15bf8:	ldreq	r3, [r4, #4]
   15bfc:	beq	15b90 <__assert_fail@plt+0x3288>
   15c00:	ldr	r3, [sp, #16]
   15c04:	ldr	r3, [r3]
   15c08:	cmp	r3, #0
   15c0c:	str	r3, [sp, #20]
   15c10:	bne	15ae8 <__assert_fail@plt+0x31e0>
   15c14:	b	15b7c <__assert_fail@plt+0x3274>
   15c18:	ldr	r2, [sp, #16]
   15c1c:	add	r3, fp, #1
   15c20:	mov	r0, r4
   15c24:	ldr	r1, [r2, r3, lsl #4]
   15c28:	lsl	r3, r3, #4
   15c2c:	cmp	r1, #0
   15c30:	ldr	r4, [sp, #24]
   15c34:	add	sl, r2, r3
   15c38:	beq	15f14 <__assert_fail@plt+0x360c>
   15c3c:	sub	r3, r3, #16
   15c40:	add	r3, r2, r3
   15c44:	sub	r2, r3, sl
   15c48:	add	r2, r2, #32
   15c4c:	str	r7, [sp, #20]
   15c50:	str	r8, [sp, #24]
   15c54:	str	r9, [sp, #32]
   15c58:	str	fp, [sp, #36]	; 0x24
   15c5c:	ldr	r9, [sp, #28]
   15c60:	mov	r7, r3
   15c64:	str	r4, [sp, #28]
   15c68:	mov	fp, r0
   15c6c:	mov	r4, r1
   15c70:	mov	r8, r2
   15c74:	ldr	r0, [sl, #4]
   15c78:	cmp	r0, #0
   15c7c:	beq	15cac <__assert_fail@plt+0x33a4>
   15c80:	mov	r2, r9
   15c84:	mov	r1, r6
   15c88:	bl	1289c <strncmp@plt>
   15c8c:	cmp	r0, #0
   15c90:	bne	15cac <__assert_fail@plt+0x33a4>
   15c94:	cmp	r4, fp
   15c98:	bne	15e8c <__assert_fail@plt+0x3584>
   15c9c:	ldr	r2, [sl, #8]
   15ca0:	ldr	r3, [r5, #8]
   15ca4:	cmp	r2, r3
   15ca8:	bne	15e8c <__assert_fail@plt+0x3584>
   15cac:	add	r7, r7, #16
   15cb0:	ldr	r4, [r7, #16]
   15cb4:	add	sl, sl, r8
   15cb8:	cmp	r4, #0
   15cbc:	bne	15c74 <__assert_fail@plt+0x336c>
   15cc0:	add	r4, sp, #28
   15cc4:	ldr	r7, [sp, #20]
   15cc8:	ldm	r4, {r4, r9, fp}
   15ccc:	ldr	r8, [sp, #24]
   15cd0:	mov	sl, fp
   15cd4:	ldr	r2, [sp, #12]
   15cd8:	cmp	r2, #0
   15cdc:	movne	r3, #61	; 0x3d
   15ce0:	strbne	r3, [r2]
   15ce4:	cmp	sl, #0
   15ce8:	beq	15d20 <__assert_fail@plt+0x3418>
   15cec:	ldr	r3, [sp, #16]
   15cf0:	ldr	r3, [r3, sl, lsl #4]
   15cf4:	cmp	r3, #32768	; 0x8000
   15cf8:	beq	15f1c <__assert_fail@plt+0x3614>
   15cfc:	ldr	r2, [pc, #568]	; 15f3c <__assert_fail@plt+0x3634>
   15d00:	cmp	r3, r2
   15d04:	beq	15d74 <__assert_fail@plt+0x346c>
   15d08:	ldr	r2, [pc, #560]	; 15f40 <__assert_fail@plt+0x3638>
   15d0c:	cmp	r3, r2
   15d10:	beq	15e68 <__assert_fail@plt+0x3560>
   15d14:	ldr	r2, [pc, #552]	; 15f44 <__assert_fail@plt+0x363c>
   15d18:	cmp	r3, r2
   15d1c:	beq	15de8 <__assert_fail@plt+0x34e0>
   15d20:	ldr	r3, [sp, #16]
   15d24:	add	r2, r3, sl, lsl #4
   15d28:	ldr	r3, [r3, sl, lsl #4]
   15d2c:	ldr	r1, [r2, #8]
   15d30:	str	r3, [r4, #16]
   15d34:	tst	r1, #7
   15d38:	beq	15d8c <__assert_fail@plt+0x3484>
   15d3c:	ldr	r3, [sp, #12]
   15d40:	cmp	r3, #0
   15d44:	beq	15ec0 <__assert_fail@plt+0x35b8>
   15d48:	ldrb	r3, [r3, #1]
   15d4c:	cmp	r3, #0
   15d50:	beq	15e48 <__assert_fail@plt+0x3540>
   15d54:	ldr	r3, [sp, #12]
   15d58:	adds	r2, r3, #1
   15d5c:	beq	15e48 <__assert_fail@plt+0x3540>
   15d60:	mov	r0, r4
   15d64:	bl	14a58 <__assert_fail@plt+0x2150>
   15d68:	ldr	fp, [r4]
   15d6c:	ldr	r3, [r4, #4]
   15d70:	b	15b9c <__assert_fail@plt+0x3294>
   15d74:	ldr	r3, [r4, #8]
   15d78:	ands	r5, r3, #64	; 0x40
   15d7c:	bne	15d20 <__assert_fail@plt+0x3418>
   15d80:	bl	14dd0 <__assert_fail@plt+0x24c8>
   15d84:	mov	r0, r5
   15d88:	bl	12560 <exit@plt>
   15d8c:	ldr	r3, [sp, #12]
   15d90:	cmp	r3, #0
   15d94:	mvnne	r3, #5
   15d98:	ldreq	r2, [sp, #12]
   15d9c:	strne	r3, [r4, #20]
   15da0:	ldrne	fp, [r4]
   15da4:	ldrne	r3, [r4, #4]
   15da8:	ldreq	fp, [r4]
   15dac:	ldreq	r3, [r4, #4]
   15db0:	streq	r2, [r4, #20]
   15db4:	b	15b9c <__assert_fail@plt+0x3294>
   15db8:	add	r2, r2, #1
   15dbc:	mov	r0, r4
   15dc0:	bl	14a58 <__assert_fail@plt+0x2150>
   15dc4:	ldm	r4, {r1, r2}
   15dc8:	b	159a4 <__assert_fail@plt+0x309c>
   15dcc:	ldrb	r1, [r5, #1]
   15dd0:	mov	r6, r2
   15dd4:	ldr	r0, [sp, #16]
   15dd8:	b	15950 <__assert_fail@plt+0x3048>
   15ddc:	ldr	r0, [sp, #16]
   15de0:	ldr	ip, [sp, #20]
   15de4:	b	159e0 <__assert_fail@plt+0x30d8>
   15de8:	ldr	r3, [sp, #16]
   15dec:	ldr	r3, [r3]
   15df0:	cmp	r3, #0
   15df4:	beq	15e40 <__assert_fail@plt+0x3538>
   15df8:	ldr	r6, [pc, #328]	; 15f48 <__assert_fail@plt+0x3640>
   15dfc:	ldr	r5, [pc, #328]	; 15f4c <__assert_fail@plt+0x3644>
   15e00:	ldr	r4, [sp, #16]
   15e04:	b	15e14 <__assert_fail@plt+0x350c>
   15e08:	ldr	r3, [r4, #16]!
   15e0c:	cmp	r3, #0
   15e10:	beq	15e40 <__assert_fail@plt+0x3538>
   15e14:	ldr	r2, [r4, #4]
   15e18:	cmp	r2, #0
   15e1c:	beq	15e08 <__assert_fail@plt+0x3500>
   15e20:	ldr	r3, [r4, #8]
   15e24:	ands	r0, r3, #64	; 0x40
   15e28:	bne	15e08 <__assert_fail@plt+0x3500>
   15e2c:	str	r0, [sp]
   15e30:	mov	r3, r6
   15e34:	mov	r1, r5
   15e38:	bl	14b80 <__assert_fail@plt+0x2278>
   15e3c:	b	15e08 <__assert_fail@plt+0x3500>
   15e40:	mov	r0, #0
   15e44:	bl	12560 <exit@plt>
   15e48:	tst	r1, #8
   15e4c:	movne	r3, #0
   15e50:	mvneq	r3, #2
   15e54:	strne	r3, [r4, #20]
   15e58:	streq	r3, [r4, #16]
   15e5c:	ldr	fp, [r4]
   15e60:	ldr	r3, [r4, #4]
   15e64:	b	15b9c <__assert_fail@plt+0x3294>
   15e68:	mov	r0, #16
   15e6c:	bl	14cb4 <__assert_fail@plt+0x23ac>
   15e70:	mov	r3, #0
   15e74:	ldr	r2, [pc, #204]	; 15f48 <__assert_fail@plt+0x3640>
   15e78:	mov	r1, r0
   15e7c:	mov	r0, r3
   15e80:	bl	14b80 <__assert_fail@plt+0x2278>
   15e84:	mov	r0, #0
   15e88:	bl	12560 <exit@plt>
   15e8c:	ldr	r2, [sp, #12]
   15e90:	ldr	r4, [sp, #28]
   15e94:	cmp	r2, #0
   15e98:	movne	r3, #61	; 0x3d
   15e9c:	strbne	r3, [r2]
   15ea0:	mvn	r3, #7
   15ea4:	str	r3, [r4, #16]
   15ea8:	ldr	r7, [sp, #20]
   15eac:	ldr	r8, [sp, #24]
   15eb0:	ldr	r9, [sp, #32]
   15eb4:	ldr	fp, [r4]
   15eb8:	ldr	r3, [r4, #4]
   15ebc:	b	15b9c <__assert_fail@plt+0x3294>
   15ec0:	ldr	r2, [r7, #4]
   15ec4:	cmp	r2, #0
   15ec8:	beq	15e48 <__assert_fail@plt+0x3540>
   15ecc:	ldrb	r3, [r2]
   15ed0:	cmp	r3, #45	; 0x2d
   15ed4:	beq	15ef8 <__assert_fail@plt+0x35f0>
   15ed8:	mov	r0, r4
   15edc:	bl	14a58 <__assert_fail@plt+0x2150>
   15ee0:	sub	r8, r8, #1
   15ee4:	add	r7, r7, #4
   15ee8:	add	r9, r9, #1
   15eec:	ldr	fp, [r4]
   15ef0:	ldr	r3, [r4, #4]
   15ef4:	b	15b9c <__assert_fail@plt+0x3294>
   15ef8:	tst	r1, #8
   15efc:	beq	15ed8 <__assert_fail@plt+0x35d0>
   15f00:	ldr	r3, [sp, #12]
   15f04:	ldr	fp, [r4]
   15f08:	str	r3, [r4, #20]
   15f0c:	ldr	r3, [r4, #4]
   15f10:	b	15b9c <__assert_fail@plt+0x3294>
   15f14:	mov	sl, fp
   15f18:	b	15cd4 <__assert_fail@plt+0x33cc>
   15f1c:	ldr	r1, [r4, #8]
   15f20:	ldr	r0, [sp, #16]
   15f24:	bl	14f2c <__assert_fail@plt+0x2624>
   15f28:	andeq	r1, r2, r0, ror #31
   15f2c:			; <UNDEFINED> instruction: 0x000225b4
   15f30:	andeq	r3, r2, r4, lsl #11
   15f34:			; <UNDEFINED> instruction: 0x000225bc
   15f38:	andeq	r2, r2, r8, asr #11
   15f3c:	andeq	r8, r0, r1
   15f40:	andeq	r8, r0, r2
   15f44:	andeq	r8, r0, r3
   15f48:	andeq	r1, r2, r0, asr #22
   15f4c:	ldrdeq	r2, [r2], -r8
   15f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f54:	cmp	r0, #0
   15f58:	sub	sp, sp, #252	; 0xfc
   15f5c:	stm	sp, {r0, r3}
   15f60:	ldr	r3, [pc, #2536]	; 16950 <__assert_fail@plt+0x4048>
   15f64:	ldr	r3, [r3]
   15f68:	str	r3, [sp, #244]	; 0xf4
   15f6c:	ldr	r3, [sp, #288]	; 0x120
   15f70:	str	r3, [sp, #8]
   15f74:	beq	1636c <__assert_fail@plt+0x3a64>
   15f78:	mov	fp, r2
   15f7c:	ldr	r0, [sp, #4]
   15f80:	bl	14750 <__assert_fail@plt+0x1e48>
   15f84:	ldr	r3, [fp]
   15f88:	cmp	r3, #0
   15f8c:	beq	162a4 <__assert_fail@plt+0x399c>
   15f90:	mov	sl, #0
   15f94:	mov	r3, #0
   15f98:	mov	r4, r3
   15f9c:	mov	r6, r3
   15fa0:	mov	r8, r3
   15fa4:	str	r3, [sp, #20]
   15fa8:	str	r3, [sp, #16]
   15fac:	str	r3, [sp, #12]
   15fb0:	cmp	sl, #0
   15fb4:	beq	16020 <__assert_fail@plt+0x3718>
   15fb8:	rsb	r3, sl, #3
   15fbc:	add	r2, sp, #248	; 0xf8
   15fc0:	add	r3, r2, r3, lsl #2
   15fc4:	sub	sl, sl, #1
   15fc8:	ldr	r9, [r3, #-216]	; 0xffffff28
   15fcc:	cmn	r9, #1
   15fd0:	cmpne	r9, #10
   15fd4:	bne	16038 <__assert_fail@plt+0x3730>
   15fd8:	cmn	r9, #1
   15fdc:	ldrne	r3, [fp]
   15fe0:	addne	r3, r3, #1
   15fe4:	strne	r3, [fp]
   15fe8:	cmn	r4, #1
   15fec:	beq	16360 <__assert_fail@plt+0x3a58>
   15ff0:	cmp	r4, #2
   15ff4:	beq	160d4 <__assert_fail@plt+0x37cc>
   15ff8:	cmp	r4, #3
   15ffc:	beq	16380 <__assert_fail@plt+0x3a78>
   16000:	cmp	r4, #4
   16004:	beq	163b4 <__assert_fail@plt+0x3aac>
   16008:	cmn	r9, #1
   1600c:	beq	1644c <__assert_fail@plt+0x3b44>
   16010:	mov	r8, #0
   16014:	cmp	sl, #0
   16018:	mov	r4, r8
   1601c:	bne	15fb8 <__assert_fail@plt+0x36b0>
   16020:	ldr	r0, [sp]
   16024:	bl	128b4 <getc@plt>
   16028:	mov	r9, r0
   1602c:	cmn	r9, #1
   16030:	cmpne	r9, #10
   16034:	beq	15fd8 <__assert_fail@plt+0x36d0>
   16038:	cmn	r4, #1
   1603c:	beq	15fb0 <__assert_fail@plt+0x36a8>
   16040:	cmp	r4, #0
   16044:	beq	16078 <__assert_fail@plt+0x3770>
   16048:	cmp	r4, #1
   1604c:	beq	15fb0 <__assert_fail@plt+0x36a8>
   16050:	cmp	r4, #2
   16054:	beq	16154 <__assert_fail@plt+0x384c>
   16058:	cmp	r4, #3
   1605c:	bne	16270 <__assert_fail@plt+0x3968>
   16060:	bics	r3, r9, #127	; 0x7f
   16064:	beq	1624c <__assert_fail@plt+0x3944>
   16068:	strb	r9, [sp, #44]	; 0x2c
   1606c:	mov	r8, #1
   16070:	mov	r4, #4
   16074:	b	15fb0 <__assert_fail@plt+0x36a8>
   16078:	bics	r4, r9, #127	; 0x7f
   1607c:	beq	160ac <__assert_fail@plt+0x37a4>
   16080:	cmp	r8, #98	; 0x62
   16084:	addle	r3, sp, #248	; 0xf8
   16088:	ldrgt	r2, [sp, #4]
   1608c:	addle	r3, r3, r8
   16090:	mvngt	r3, #3
   16094:	strgt	r3, [r2, #16]
   16098:	mvngt	r4, #0
   1609c:	strble	r9, [r3, #-204]	; 0xffffff34
   160a0:	addle	r8, r8, #1
   160a4:	movle	r4, #2
   160a8:	b	15fb0 <__assert_fail@plt+0x36a8>
   160ac:	bl	12530 <__ctype_b_loc@plt>
   160b0:	lsl	r3, r9, #1
   160b4:	ldr	r2, [r0]
   160b8:	ldrh	r3, [r2, r3]
   160bc:	tst	r3, #8192	; 0x2000
   160c0:	bne	15fb0 <__assert_fail@plt+0x36a8>
   160c4:	cmp	r9, #35	; 0x23
   160c8:	bne	16080 <__assert_fail@plt+0x3778>
   160cc:	mov	r4, #1
   160d0:	b	15fb0 <__assert_fail@plt+0x36a8>
   160d4:	ldr	r5, [sp, #8]
   160d8:	add	r3, sp, #248	; 0xf8
   160dc:	mov	r6, #0
   160e0:	ldr	r4, [r5]
   160e4:	add	r8, r3, r8
   160e8:	cmp	r4, r6
   160ec:	strb	r6, [r8, #-204]	; 0xffffff34
   160f0:	beq	164c8 <__assert_fail@plt+0x3bc0>
   160f4:	ldr	r0, [r5, #4]
   160f8:	cmp	r0, #0
   160fc:	beq	16110 <__assert_fail@plt+0x3808>
   16100:	add	r1, sp, #44	; 0x2c
   16104:	bl	121ac <strcmp@plt>
   16108:	cmp	r0, #0
   1610c:	beq	161e0 <__assert_fail@plt+0x38d8>
   16110:	ldr	r4, [r5, #16]!
   16114:	add	r6, r6, #1
   16118:	cmp	r4, #0
   1611c:	bne	160f4 <__assert_fail@plt+0x37ec>
   16120:	ldr	r5, [r5, #8]
   16124:	ldr	r3, [sp, #4]
   16128:	tst	r5, #64	; 0x40
   1612c:	str	r4, [r3, #16]
   16130:	bne	1614c <__assert_fail@plt+0x3844>
   16134:	add	r8, sp, #44	; 0x2c
   16138:	mov	r0, r8
   1613c:	ldr	r1, [pc, #2064]	; 16954 <__assert_fail@plt+0x404c>
   16140:	bl	121ac <strcmp@plt>
   16144:	subs	r4, r0, #0
   16148:	bne	1620c <__assert_fail@plt+0x3904>
   1614c:	mov	r8, r4
   16150:	b	15fb0 <__assert_fail@plt+0x36a8>
   16154:	bics	r5, r9, #127	; 0x7f
   16158:	bne	16080 <__assert_fail@plt+0x3778>
   1615c:	bl	12530 <__ctype_b_loc@plt>
   16160:	lsl	r3, r9, #1
   16164:	ldr	r2, [r0]
   16168:	mov	r7, r0
   1616c:	ldrh	r3, [r2, r3]
   16170:	tst	r3, #8192	; 0x2000
   16174:	beq	16080 <__assert_fail@plt+0x3778>
   16178:	ldr	r4, [sp, #8]
   1617c:	add	r3, sp, #248	; 0xf8
   16180:	add	r3, r3, r8
   16184:	ldr	r8, [r4]
   16188:	strb	r5, [r3, #-204]	; 0xffffff34
   1618c:	cmp	r8, #0
   16190:	beq	165d4 <__assert_fail@plt+0x3ccc>
   16194:	ldr	r0, [r4, #4]
   16198:	cmp	r0, #0
   1619c:	beq	161b0 <__assert_fail@plt+0x38a8>
   161a0:	add	r1, sp, #44	; 0x2c
   161a4:	bl	121ac <strcmp@plt>
   161a8:	cmp	r0, #0
   161ac:	beq	165a8 <__assert_fail@plt+0x3ca0>
   161b0:	ldr	r8, [r4, #16]!
   161b4:	add	r5, r5, #1
   161b8:	cmp	r8, #0
   161bc:	bne	16194 <__assert_fail@plt+0x388c>
   161c0:	ldr	r6, [r4, #8]
   161c4:	ldr	r3, [sp, #4]
   161c8:	tst	r6, #64	; 0x40
   161cc:	str	r8, [r3, #16]
   161d0:	beq	165ec <__assert_fail@plt+0x3ce4>
   161d4:	mov	r6, r5
   161d8:	mov	r8, r5
   161dc:	b	160cc <__assert_fail@plt+0x37c4>
   161e0:	ldr	r2, [r5, #8]
   161e4:	ldr	r3, [sp, #4]
   161e8:	ands	r1, r2, #64	; 0x40
   161ec:	mov	r8, r0
   161f0:	str	r4, [r3, #16]
   161f4:	bne	16014 <__assert_fail@plt+0x370c>
   161f8:	ands	r3, r2, #7
   161fc:	bne	16814 <__assert_fail@plt+0x3f0c>
   16200:	ldr	r2, [sp, #4]
   16204:	str	r3, [r2, #20]
   16208:	b	16340 <__assert_fail@plt+0x3a38>
   1620c:	ldr	r3, [sp, #4]
   16210:	ldr	r7, [r3, #52]	; 0x34
   16214:	cmp	r7, #0
   16218:	bne	1622c <__assert_fail@plt+0x3924>
   1621c:	b	1632c <__assert_fail@plt+0x3a24>
   16220:	ldr	r7, [r7]
   16224:	cmp	r7, #0
   16228:	beq	1632c <__assert_fail@plt+0x3a24>
   1622c:	mov	r1, r8
   16230:	add	r0, r7, #4
   16234:	bl	121ac <strcmp@plt>
   16238:	cmp	r0, #0
   1623c:	bne	16220 <__assert_fail@plt+0x3918>
   16240:	mov	r4, r0
   16244:	mov	r8, r4
   16248:	b	15fb0 <__assert_fail@plt+0x36a8>
   1624c:	bl	12530 <__ctype_b_loc@plt>
   16250:	lsl	r3, r9, #1
   16254:	ldr	r2, [r0]
   16258:	ldrh	r3, [r2, r3]
   1625c:	tst	r3, #8192	; 0x2000
   16260:	strbeq	r9, [sp, #44]	; 0x2c
   16264:	moveq	r8, #1
   16268:	moveq	r4, #4
   1626c:	b	15fb0 <__assert_fail@plt+0x36a8>
   16270:	cmp	r4, #4
   16274:	bne	16080 <__assert_fail@plt+0x3778>
   16278:	ldr	r2, [sp, #12]
   1627c:	mov	r5, r8
   16280:	cmp	r2, #0
   16284:	beq	16494 <__assert_fail@plt+0x3b8c>
   16288:	ldr	r3, [sp, #16]
   1628c:	sub	r3, r3, #1
   16290:	cmp	r3, r8
   16294:	bls	162fc <__assert_fail@plt+0x39f4>
   16298:	add	r8, r8, #1
   1629c:	strb	r9, [r2, r5]
   162a0:	b	15fb0 <__assert_fail@plt+0x36a8>
   162a4:	ldr	r6, [sp]
   162a8:	mov	r0, r6
   162ac:	bl	128b4 <getc@plt>
   162b0:	mov	r4, r0
   162b4:	mov	r0, r6
   162b8:	str	r4, [sp, #32]
   162bc:	bl	128b4 <getc@plt>
   162c0:	mov	r5, r0
   162c4:	mov	r0, r6
   162c8:	str	r5, [sp, #36]	; 0x24
   162cc:	bl	128b4 <getc@plt>
   162d0:	cmp	r5, #187	; 0xbb
   162d4:	cmpeq	r4, #239	; 0xef
   162d8:	movne	r4, #1
   162dc:	moveq	r4, #0
   162e0:	cmp	r0, #191	; 0xbf
   162e4:	orrne	r4, r4, #1
   162e8:	cmp	r4, #0
   162ec:	str	r0, [sp, #40]	; 0x28
   162f0:	movne	sl, #3
   162f4:	bne	15f94 <__assert_fail@plt+0x368c>
   162f8:	b	15f90 <__assert_fail@plt+0x3688>
   162fc:	ldr	r3, [sp, #16]
   16300:	ldr	r0, [sp, #12]
   16304:	add	r3, r3, #50	; 0x32
   16308:	mov	r1, r3
   1630c:	str	r3, [sp, #16]
   16310:	bl	126c8 <gcry_realloc@plt>
   16314:	cmp	r0, #0
   16318:	beq	168dc <__assert_fail@plt+0x3fd4>
   1631c:	add	r8, r8, #1
   16320:	strb	r9, [r0, r5]
   16324:	str	r0, [sp, #12]
   16328:	b	15fb0 <__assert_fail@plt+0x36a8>
   1632c:	ldr	r3, [sp, #4]
   16330:	tst	r5, #128	; 0x80
   16334:	mvnne	r4, #6
   16338:	mvneq	r4, #1
   1633c:	str	r4, [r3, #16]
   16340:	ldr	r3, [pc, #1544]	; 16950 <__assert_fail@plt+0x4048>
   16344:	ldr	r2, [sp, #244]	; 0xf4
   16348:	mov	r0, r4
   1634c:	ldr	r3, [r3]
   16350:	cmp	r2, r3
   16354:	bne	1691c <__assert_fail@plt+0x4014>
   16358:	add	sp, sp, #252	; 0xfc
   1635c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16360:	ldr	r3, [sp, #4]
   16364:	ldr	r4, [r3, #16]
   16368:	b	16340 <__assert_fail@plt+0x3a38>
   1636c:	mov	r1, r3
   16370:	ldr	r0, [sp, #4]
   16374:	bl	15534 <__assert_fail@plt+0x2c2c>
   16378:	mov	r4, r0
   1637c:	b	16340 <__assert_fail@plt+0x3a38>
   16380:	ldr	r3, [sp, #20]
   16384:	cmp	r3, #0
   16388:	bne	164b8 <__assert_fail@plt+0x3bb0>
   1638c:	ldr	r3, [sp, #8]
   16390:	add	r6, r3, r6, lsl #4
   16394:	ldr	r3, [r6, #8]
   16398:	tst	r3, #7
   1639c:	bne	164b0 <__assert_fail@plt+0x3ba8>
   163a0:	ldr	r2, [sp, #4]
   163a4:	mov	r3, #0
   163a8:	str	r3, [r2, #20]
   163ac:	ldr	r4, [r2, #16]
   163b0:	b	16340 <__assert_fail@plt+0x3a38>
   163b4:	ldr	r3, [sp, #20]
   163b8:	cmp	r3, #0
   163bc:	beq	16428 <__assert_fail@plt+0x3b20>
   163c0:	ldr	r3, [sp, #12]
   163c4:	cmp	r3, #0
   163c8:	beq	1643c <__assert_fail@plt+0x3b34>
   163cc:	ldr	r3, [sp, #12]
   163d0:	mov	r6, #0
   163d4:	ldr	r1, [pc, #1404]	; 16958 <__assert_fail@plt+0x4050>
   163d8:	strb	r6, [r3, r8]
   163dc:	mov	r0, r3
   163e0:	bl	12824 <strpbrk@plt>
   163e4:	subs	r5, r0, #0
   163e8:	beq	16410 <__assert_fail@plt+0x3b08>
   163ec:	mov	r4, r5
   163f0:	strb	r6, [r4], #1
   163f4:	mov	r0, r4
   163f8:	bl	1e344 <__assert_fail@plt+0xba3c>
   163fc:	cmp	r4, r6
   16400:	beq	16410 <__assert_fail@plt+0x3b08>
   16404:	ldrb	r3, [r5, #1]
   16408:	cmp	r3, r6
   1640c:	bne	16360 <__assert_fail@plt+0x3a58>
   16410:	ldr	r0, [sp, #12]
   16414:	bl	122a8 <gcry_free@plt>
   16418:	ldr	r3, [sp, #4]
   1641c:	mvn	r4, #9
   16420:	str	r4, [r3, #16]
   16424:	b	16340 <__assert_fail@plt+0x3a38>
   16428:	ldr	r3, [sp, #8]
   1642c:	add	r6, r3, r6, lsl #4
   16430:	ldr	r3, [r6, #8]
   16434:	tst	r3, #7
   16438:	bne	1651c <__assert_fail@plt+0x3c14>
   1643c:	ldr	r3, [sp, #4]
   16440:	mvn	r4, #5
   16444:	str	r4, [r3, #16]
   16448:	b	16340 <__assert_fail@plt+0x3a38>
   1644c:	ldr	r3, [sp, #4]
   16450:	ldr	r0, [r3, #52]	; 0x34
   16454:	cmp	r0, #0
   16458:	beq	1646c <__assert_fail@plt+0x3b64>
   1645c:	ldr	r4, [r0]
   16460:	bl	122a8 <gcry_free@plt>
   16464:	subs	r0, r4, #0
   16468:	bne	1645c <__assert_fail@plt+0x3b54>
   1646c:	ldm	sp, {r0, r2}
   16470:	mov	r3, #0
   16474:	str	r3, [r2, #52]	; 0x34
   16478:	bl	12254 <ferror@plt>
   1647c:	subs	r4, r0, #0
   16480:	beq	16510 <__assert_fail@plt+0x3c08>
   16484:	ldr	r3, [sp, #4]
   16488:	mvn	r4, #4
   1648c:	str	r4, [r3, #16]
   16490:	b	16340 <__assert_fail@plt+0x3a38>
   16494:	cmp	r8, #98	; 0x62
   16498:	bgt	16570 <__assert_fail@plt+0x3c68>
   1649c:	add	r3, sp, #248	; 0xf8
   164a0:	add	r3, r3, r8
   164a4:	add	r8, r8, #1
   164a8:	strb	r9, [r3, #-204]	; 0xffffff34
   164ac:	b	15fb0 <__assert_fail@plt+0x36a8>
   164b0:	tst	r3, #8
   164b4:	bne	163a0 <__assert_fail@plt+0x3a98>
   164b8:	ldr	r3, [sp, #4]
   164bc:	mvn	r4, #2
   164c0:	str	r4, [r3, #16]
   164c4:	b	16340 <__assert_fail@plt+0x3a38>
   164c8:	ldr	r3, [sp, #8]
   164cc:	mov	r6, r4
   164d0:	ldr	r5, [r3, #8]
   164d4:	ldr	r3, [sp, #4]
   164d8:	tst	r5, #64	; 0x40
   164dc:	str	r4, [r3, #16]
   164e0:	beq	16134 <__assert_fail@plt+0x382c>
   164e4:	b	1614c <__assert_fail@plt+0x3844>
   164e8:	add	r3, sp, #248	; 0xf8
   164ec:	add	r8, r3, r8
   164f0:	ldr	r3, [sp, #12]
   164f4:	add	r0, sp, #44	; 0x2c
   164f8:	strb	r3, [r8, #-204]	; 0xffffff34
   164fc:	bl	128d8 <gcry_strdup@plt>
   16500:	subs	r3, r0, #0
   16504:	str	r3, [sp, #12]
   16508:	bne	16534 <__assert_fail@plt+0x3c2c>
   1650c:	mvn	r4, #10
   16510:	ldr	r3, [sp, #4]
   16514:	str	r4, [r3, #16]
   16518:	b	16340 <__assert_fail@plt+0x3a38>
   1651c:	ldr	r3, [sp, #12]
   16520:	cmp	r3, #0
   16524:	beq	164e8 <__assert_fail@plt+0x3be0>
   16528:	ldr	r3, [sp, #12]
   1652c:	ldr	r2, [sp, #20]
   16530:	strb	r2, [r3, r8]
   16534:	ldr	r4, [sp, #12]
   16538:	mov	r0, r4
   1653c:	bl	1e344 <__assert_fail@plt+0xba3c>
   16540:	ldrb	r3, [r4]
   16544:	cmp	r3, #34	; 0x22
   16548:	beq	1683c <__assert_fail@plt+0x3f34>
   1654c:	mov	r2, r4
   16550:	ldr	r4, [sp, #4]
   16554:	ldr	r1, [r6, #8]
   16558:	mov	r0, r4
   1655c:	bl	14a58 <__assert_fail@plt+0x2150>
   16560:	cmp	r0, #0
   16564:	beq	16828 <__assert_fail@plt+0x3f20>
   16568:	ldr	r4, [r4, #16]
   1656c:	b	16340 <__assert_fail@plt+0x3a38>
   16570:	mov	r0, #150	; 0x96
   16574:	bl	1217c <gcry_malloc@plt>
   16578:	subs	r7, r0, #0
   1657c:	str	r7, [sp, #12]
   16580:	beq	1650c <__assert_fail@plt+0x3c04>
   16584:	mov	r2, r8
   16588:	add	r1, sp, #44	; 0x2c
   1658c:	mov	r0, r7
   16590:	bl	12284 <memcpy@plt>
   16594:	mov	r3, #150	; 0x96
   16598:	add	r8, r8, #1
   1659c:	str	r3, [sp, #16]
   165a0:	strb	r9, [r7, r5]
   165a4:	b	15fb0 <__assert_fail@plt+0x36a8>
   165a8:	ldr	r3, [r4, #8]
   165ac:	ldr	r2, [sp, #4]
   165b0:	tst	r3, #64	; 0x40
   165b4:	moveq	r6, r5
   165b8:	str	r8, [r2, #16]
   165bc:	moveq	r4, #3
   165c0:	mov	r8, r5
   165c4:	beq	15fb0 <__assert_fail@plt+0x36a8>
   165c8:	mov	r6, r8
   165cc:	mov	r4, #1
   165d0:	b	15fb0 <__assert_fail@plt+0x36a8>
   165d4:	ldr	r3, [sp, #8]
   165d8:	ldr	r6, [r3, #8]
   165dc:	ldr	r3, [sp, #4]
   165e0:	tst	r6, #64	; 0x40
   165e4:	str	r8, [r3, #16]
   165e8:	bne	165c8 <__assert_fail@plt+0x3cc0>
   165ec:	add	r8, sp, #44	; 0x2c
   165f0:	mov	r0, r8
   165f4:	ldr	r1, [pc, #864]	; 1695c <__assert_fail@plt+0x4054>
   165f8:	bl	121ac <strcmp@plt>
   165fc:	cmp	r0, #0
   16600:	beq	167fc <__assert_fail@plt+0x3ef4>
   16604:	ldr	r1, [pc, #840]	; 16954 <__assert_fail@plt+0x404c>
   16608:	mov	r0, r8
   1660c:	bl	121ac <strcmp@plt>
   16610:	subs	r4, r0, #0
   16614:	bne	16888 <__assert_fail@plt+0x3f80>
   16618:	ldr	r0, [sp]
   1661c:	bl	128b4 <getc@plt>
   16620:	ldr	r8, [r7]
   16624:	str	r4, [sp, #28]
   16628:	cmn	r0, #1
   1662c:	cmpne	r0, #10
   16630:	moveq	r3, #1
   16634:	movne	r3, #0
   16638:	cmp	r3, #0
   1663c:	mov	r6, r0
   16640:	movne	r6, #10
   16644:	movne	r3, #1
   16648:	moveq	r3, #0
   1664c:	str	r3, [sp, #24]
   16650:	lsl	r3, r6, #1
   16654:	bics	r2, r6, #127	; 0x7f
   16658:	ldrh	r3, [r8, r3]
   1665c:	and	r3, r3, #8192	; 0x2000
   16660:	bne	167d8 <__assert_fail@plt+0x3ed0>
   16664:	cmp	r3, #0
   16668:	bne	1671c <__assert_fail@plt+0x3e14>
   1666c:	mov	r3, #1
   16670:	ldr	r4, [sp, #24]
   16674:	mov	r8, r3
   16678:	mov	r0, r6
   1667c:	add	r3, sp, #248	; 0xf8
   16680:	add	r2, r3, r2
   16684:	cmp	r4, #0
   16688:	strb	r0, [r2, #-104]	; 0xffffff98
   1668c:	bne	16934 <__assert_fail@plt+0x402c>
   16690:	ldr	r0, [sp]
   16694:	bl	128b4 <getc@plt>
   16698:	cmn	r0, #1
   1669c:	cmpne	r0, #10
   166a0:	bne	1692c <__assert_fail@plt+0x4024>
   166a4:	mov	r3, #20
   166a8:	mov	r4, #1
   166ac:	mov	r0, #10
   166b0:	ldr	r2, [r7]
   166b4:	ldrh	r3, [r2, r3]
   166b8:	tst	r3, #8192	; 0x2000
   166bc:	bne	16750 <__assert_fail@plt+0x3e48>
   166c0:	cmp	r8, #98	; 0x62
   166c4:	ble	16920 <__assert_fail@plt+0x4018>
   166c8:	cmp	r4, #0
   166cc:	mov	r9, r4
   166d0:	bne	16934 <__assert_fail@plt+0x402c>
   166d4:	ldr	r0, [sp]
   166d8:	bl	128b4 <getc@plt>
   166dc:	cmn	r0, #1
   166e0:	cmpne	r0, #10
   166e4:	mov	r6, r0
   166e8:	bne	16874 <__assert_fail@plt+0x3f6c>
   166ec:	mov	r6, #10
   166f0:	mov	r3, #20
   166f4:	mov	r0, r6
   166f8:	mov	r2, #1
   166fc:	str	r2, [sp, #24]
   16700:	ldr	r8, [r7]
   16704:	ldrh	r3, [r8, r3]
   16708:	tst	r3, #8192	; 0x2000
   1670c:	beq	168e8 <__assert_fail@plt+0x3fe0>
   16710:	bics	r3, r0, #127	; 0x7f
   16714:	mov	r6, r0
   16718:	bne	16764 <__assert_fail@plt+0x3e5c>
   1671c:	ldr	r3, [sp, #24]
   16720:	cmp	r3, #0
   16724:	bne	16934 <__assert_fail@plt+0x402c>
   16728:	ldr	r0, [sp]
   1672c:	bl	128b4 <getc@plt>
   16730:	ldr	r8, [r7]
   16734:	cmn	r0, #1
   16738:	cmpne	r0, #10
   1673c:	moveq	r3, #1
   16740:	mov	r6, r0
   16744:	streq	r3, [sp, #24]
   16748:	moveq	r6, #10
   1674c:	b	16650 <__assert_fail@plt+0x3d48>
   16750:	mov	r3, r8
   16754:	mov	r6, r0
   16758:	mov	r8, r2
   1675c:	mov	r9, r3
   16760:	str	r4, [sp, #24]
   16764:	ldr	r3, [sp, #4]
   16768:	ldr	r4, [r3, #52]	; 0x34
   1676c:	add	r3, sp, #248	; 0xf8
   16770:	add	r2, r3, r9
   16774:	cmp	r4, #0
   16778:	mov	r3, #0
   1677c:	strb	r3, [r2, #-104]	; 0xffffff98
   16780:	beq	167a4 <__assert_fail@plt+0x3e9c>
   16784:	add	r1, sp, #144	; 0x90
   16788:	add	r0, r4, #4
   1678c:	bl	121ac <strcmp@plt>
   16790:	cmp	r0, #0
   16794:	beq	16650 <__assert_fail@plt+0x3d48>
   16798:	ldr	r4, [r4]
   1679c:	cmp	r4, #0
   167a0:	bne	16784 <__assert_fail@plt+0x3e7c>
   167a4:	add	r0, r9, #8
   167a8:	bl	1217c <gcry_malloc@plt>
   167ac:	subs	r8, r0, #0
   167b0:	beq	1650c <__assert_fail@plt+0x3c04>
   167b4:	add	r0, r8, #4
   167b8:	add	r1, sp, #144	; 0x90
   167bc:	bl	12404 <strcpy@plt>
   167c0:	ldr	r2, [sp, #4]
   167c4:	ldr	r3, [r2, #52]	; 0x34
   167c8:	str	r8, [r2, #52]	; 0x34
   167cc:	str	r3, [r8]
   167d0:	ldr	r8, [r7]
   167d4:	b	16650 <__assert_fail@plt+0x3d48>
   167d8:	cmp	r3, #0
   167dc:	movne	r9, #0
   167e0:	bne	16764 <__assert_fail@plt+0x3e5c>
   167e4:	mov	r2, r3
   167e8:	mov	r3, #1
   167ec:	ldr	r4, [sp, #24]
   167f0:	mov	r8, r3
   167f4:	mov	r0, r6
   167f8:	b	1667c <__assert_fail@plt+0x3d74>
   167fc:	mov	r3, #1
   16800:	mov	r6, r5
   16804:	mov	r8, r5
   16808:	str	r3, [sp, #20]
   1680c:	mov	r4, #3
   16810:	b	15fb0 <__assert_fail@plt+0x36a8>
   16814:	tst	r2, #8
   16818:	beq	164b8 <__assert_fail@plt+0x3bb0>
   1681c:	ldr	r3, [sp, #4]
   16820:	str	r1, [r3, #20]
   16824:	b	16340 <__assert_fail@plt+0x3a38>
   16828:	ldr	r0, [sp, #12]
   1682c:	bl	122a8 <gcry_free@plt>
   16830:	ldr	r3, [sp, #4]
   16834:	ldr	r4, [r3, #16]
   16838:	b	16340 <__assert_fail@plt+0x3a38>
   1683c:	ldr	r5, [sp, #12]
   16840:	add	r4, r5, #1
   16844:	ldrb	r3, [r5, #1]
   16848:	cmp	r3, #0
   1684c:	beq	1654c <__assert_fail@plt+0x3c44>
   16850:	mov	r0, r4
   16854:	bl	1259c <strlen@plt>
   16858:	ldrb	r3, [r5, r0]
   1685c:	cmp	r3, #34	; 0x22
   16860:	moveq	r3, #0
   16864:	ldreq	r2, [sp, #12]
   16868:	strbeq	r3, [r2, r0]
   1686c:	b	1654c <__assert_fail@plt+0x3c44>
   16870:	mov	r6, r0
   16874:	mov	r2, #0
   16878:	lsl	r3, r6, #1
   1687c:	str	r2, [sp, #24]
   16880:	mov	r0, r6
   16884:	b	16700 <__assert_fail@plt+0x3df8>
   16888:	ldr	r3, [sp, #4]
   1688c:	ldr	r4, [r3, #52]	; 0x34
   16890:	cmp	r4, #0
   16894:	beq	168b8 <__assert_fail@plt+0x3fb0>
   16898:	mov	r1, r8
   1689c:	add	r0, r4, #4
   168a0:	bl	121ac <strcmp@plt>
   168a4:	cmp	r0, #0
   168a8:	beq	161d4 <__assert_fail@plt+0x38cc>
   168ac:	ldr	r4, [r4]
   168b0:	cmp	r4, #0
   168b4:	bne	16898 <__assert_fail@plt+0x3f90>
   168b8:	ldr	r2, [sp, #4]
   168bc:	tst	r6, #128	; 0x80
   168c0:	mvnne	r3, #6
   168c4:	mvneq	r3, #1
   168c8:	mov	r6, r5
   168cc:	str	r3, [r2, #16]
   168d0:	mov	r8, r5
   168d4:	mvn	r4, #0
   168d8:	b	15fb0 <__assert_fail@plt+0x36a8>
   168dc:	ldr	r0, [sp, #12]
   168e0:	bl	122a8 <gcry_free@plt>
   168e4:	b	1650c <__assert_fail@plt+0x3c04>
   168e8:	ldr	r3, [sp, #24]
   168ec:	cmp	r3, #0
   168f0:	bne	16934 <__assert_fail@plt+0x402c>
   168f4:	ldr	r0, [sp]
   168f8:	bl	128b4 <getc@plt>
   168fc:	mov	r3, #1
   16900:	str	r3, [sp, #24]
   16904:	mov	r3, #20
   16908:	cmn	r0, #1
   1690c:	cmpne	r0, #10
   16910:	bne	16870 <__assert_fail@plt+0x3f68>
   16914:	mov	r0, #10
   16918:	b	16700 <__assert_fail@plt+0x3df8>
   1691c:	bl	122fc <__stack_chk_fail@plt>
   16920:	mov	r2, r8
   16924:	add	r8, r8, #1
   16928:	b	1667c <__assert_fail@plt+0x3d74>
   1692c:	lsl	r3, r0, #1
   16930:	b	166b0 <__assert_fail@plt+0x3da8>
   16934:	ldr	r3, [fp]
   16938:	ldr	r4, [sp, #28]
   1693c:	add	r3, r3, #1
   16940:	mov	r6, r5
   16944:	str	r3, [fp]
   16948:	mov	r8, #0
   1694c:	b	15fb0 <__assert_fail@plt+0x36a8>
   16950:	andeq	r4, r3, r8, lsr fp
   16954:	ldrdeq	r2, [r2], -ip
   16958:	strdeq	r2, [r2], -r4
   1695c:	strdeq	r2, [r2], -r8
   16960:	push	{r4, r5, r6, lr}
   16964:	subs	r4, r0, #0
   16968:	sub	sp, sp, #16
   1696c:	beq	16988 <__assert_fail@plt+0x4080>
   16970:	cmp	r4, #1
   16974:	beq	16a60 <__assert_fail@plt+0x4158>
   16978:	cmp	r4, #2
   1697c:	beq	169e4 <__assert_fail@plt+0x40dc>
   16980:	add	sp, sp, #16
   16984:	pop	{r4, r5, r6, pc}
   16988:	mov	r0, #11
   1698c:	bl	14cb4 <__assert_fail@plt+0x23ac>
   16990:	mov	r5, r0
   16994:	mov	r0, #13
   16998:	bl	14cb4 <__assert_fail@plt+0x23ac>
   1699c:	mov	r6, r0
   169a0:	mov	r0, #14
   169a4:	bl	14cb4 <__assert_fail@plt+0x23ac>
   169a8:	ldr	ip, [pc, #240]	; 16aa0 <__assert_fail@plt+0x4198>
   169ac:	ldr	r2, [pc, #240]	; 16aa4 <__assert_fail@plt+0x419c>
   169b0:	mov	r3, r6
   169b4:	str	r2, [sp]
   169b8:	mov	r1, r5
   169bc:	str	r4, [sp, #12]
   169c0:	str	ip, [sp, #8]
   169c4:	ldr	r2, [pc, #220]	; 16aa8 <__assert_fail@plt+0x41a0>
   169c8:	str	r0, [sp, #4]
   169cc:	mov	r0, #1
   169d0:	bl	14b80 <__assert_fail@plt+0x2278>
   169d4:	mov	r0, #1
   169d8:	add	sp, sp, #16
   169dc:	pop	{r4, r5, r6, lr}
   169e0:	b	14c60 <__assert_fail@plt+0x2358>
   169e4:	mov	r0, #42	; 0x2a
   169e8:	bl	14cb4 <__assert_fail@plt+0x23ac>
   169ec:	cmp	r0, #0
   169f0:	beq	16a00 <__assert_fail@plt+0x40f8>
   169f4:	ldrb	r3, [r0]
   169f8:	cmp	r3, #49	; 0x31
   169fc:	beq	16a24 <__assert_fail@plt+0x411c>
   16a00:	mov	r0, #41	; 0x29
   16a04:	bl	14cb4 <__assert_fail@plt+0x23ac>
   16a08:	mov	r3, #0
   16a0c:	ldr	r2, [pc, #140]	; 16aa0 <__assert_fail@plt+0x4198>
   16a10:	mov	r1, r0
   16a14:	mov	r0, r3
   16a18:	bl	14b80 <__assert_fail@plt+0x2278>
   16a1c:	mov	r0, #0
   16a20:	bl	12560 <exit@plt>
   16a24:	mov	r0, #40	; 0x28
   16a28:	bl	14cb4 <__assert_fail@plt+0x23ac>
   16a2c:	mov	r2, #0
   16a30:	mov	r4, r0
   16a34:	mov	r1, r0
   16a38:	mov	r0, #1
   16a3c:	bl	14b80 <__assert_fail@plt+0x2278>
   16a40:	ldrb	r3, [r4]
   16a44:	cmp	r3, #0
   16a48:	beq	16a00 <__assert_fail@plt+0x40f8>
   16a4c:	mov	r2, #0
   16a50:	ldr	r1, [pc, #72]	; 16aa0 <__assert_fail@plt+0x4198>
   16a54:	mov	r0, #1
   16a58:	bl	14b80 <__assert_fail@plt+0x2278>
   16a5c:	b	16a00 <__assert_fail@plt+0x40f8>
   16a60:	mov	r0, #40	; 0x28
   16a64:	bl	14cb4 <__assert_fail@plt+0x23ac>
   16a68:	mov	r2, #0
   16a6c:	mov	r5, r0
   16a70:	mov	r1, r0
   16a74:	mov	r0, r4
   16a78:	bl	14b80 <__assert_fail@plt+0x2278>
   16a7c:	ldrb	r3, [r5]
   16a80:	cmp	r3, #0
   16a84:	beq	16a98 <__assert_fail@plt+0x4190>
   16a88:	mov	r0, r4
   16a8c:	mov	r2, #0
   16a90:	ldr	r1, [pc, #8]	; 16aa0 <__assert_fail@plt+0x4198>
   16a94:	bl	14b80 <__assert_fail@plt+0x2278>
   16a98:	mov	r0, #2
   16a9c:	bl	12560 <exit@plt>
   16aa0:	andeq	r1, r2, r0, asr #22
   16aa4:	andeq	r2, r2, r0, lsl #12
   16aa8:	muleq	r2, r8, r6
   16aac:	ldr	r3, [pc, #4]	; 16ab8 <__assert_fail@plt+0x41b0>
   16ab0:	str	r0, [r3, #4]
   16ab4:	bx	lr
   16ab8:			; <UNDEFINED> instruction: 0x000352b8
   16abc:	push	{r4, lr}
   16ac0:	mov	r4, r0
   16ac4:	ldr	r0, [r0]
   16ac8:	cmp	r0, #2
   16acc:	cmnne	r0, #1
   16ad0:	bne	16af0 <__assert_fail@plt+0x41e8>
   16ad4:	mov	r0, r4
   16ad8:	bl	122a8 <gcry_free@plt>
   16adc:	ldr	r3, [pc, #20]	; 16af8 <__assert_fail@plt+0x41f0>
   16ae0:	mvn	r2, #0
   16ae4:	mov	r0, #0
   16ae8:	str	r2, [r3]
   16aec:	pop	{r4, pc}
   16af0:	bl	128cc <close@plt>
   16af4:	b	16ad4 <__assert_fail@plt+0x41cc>
   16af8:	andeq	r5, r3, ip, ror #2
   16afc:	push	{r4, r5, r6, r7, r8, r9, lr}
   16b00:	mov	r6, r0
   16b04:	ldr	r7, [pc, #504]	; 16d04 <__assert_fail@plt+0x43fc>
   16b08:	sub	sp, sp, #28
   16b0c:	mov	r4, r1
   16b10:	ldr	r3, [r7]
   16b14:	cmp	r3, #0
   16b18:	beq	16b40 <__assert_fail@plt+0x4238>
   16b1c:	mov	r0, #2
   16b20:	bl	1253c <_gpgrt_get_std_stream@plt>
   16b24:	ldr	r3, [r7]
   16b28:	cmp	r3, r0
   16b2c:	beq	16b38 <__assert_fail@plt+0x4230>
   16b30:	mov	r0, r3
   16b34:	bl	12440 <gpgrt_fclose@plt>
   16b38:	mov	r3, #0
   16b3c:	str	r3, [r7]
   16b40:	cmp	r6, #0
   16b44:	beq	16ccc <__assert_fail@plt+0x43c4>
   16b48:	ldr	r1, [pc, #440]	; 16d08 <__assert_fail@plt+0x4400>
   16b4c:	mov	r0, r6
   16b50:	bl	121ac <strcmp@plt>
   16b54:	cmp	r0, #0
   16b58:	beq	16cbc <__assert_fail@plt+0x43b4>
   16b5c:	mov	r2, #6
   16b60:	ldr	r1, [pc, #420]	; 16d0c <__assert_fail@plt+0x4404>
   16b64:	mov	r0, r6
   16b68:	bl	1289c <strncmp@plt>
   16b6c:	mov	r4, r0
   16b70:	mov	r0, r6
   16b74:	bl	1259c <strlen@plt>
   16b78:	cmp	r4, #0
   16b7c:	add	r4, r0, #20
   16b80:	bne	16c34 <__assert_fail@plt+0x432c>
   16b84:	ldrb	r3, [r6, #6]
   16b88:	cmp	r3, #0
   16b8c:	beq	16c34 <__assert_fail@plt+0x432c>
   16b90:	mov	r8, #1
   16b94:	mov	r0, r4
   16b98:	bl	1214c <gcry_xmalloc@plt>
   16b9c:	mov	r1, r6
   16ba0:	mvn	r4, #0
   16ba4:	mov	r5, r0
   16ba8:	add	r0, r0, #16
   16bac:	bl	12404 <strcpy@plt>
   16bb0:	mov	r3, #0
   16bb4:	str	r3, [r5, #12]
   16bb8:	stmib	r5, {r3, r8}
   16bbc:	str	r4, [r5]
   16bc0:	ldr	r1, [pc, #328]	; 16d10 <__assert_fail@plt+0x4408>
   16bc4:	mov	r2, #0
   16bc8:	str	r1, [sp, #20]
   16bcc:	add	r1, sp, #24
   16bd0:	str	r2, [sp, #16]
   16bd4:	ldmdb	r1, {r0, r1}
   16bd8:	ldr	ip, [pc, #308]	; 16d14 <__assert_fail@plt+0x440c>
   16bdc:	str	r2, [sp, #8]
   16be0:	add	r3, sp, #8
   16be4:	ldr	r2, [pc, #300]	; 16d18 <__assert_fail@plt+0x4410>
   16be8:	stm	sp, {r0, r1}
   16bec:	str	r2, [sp, #12]
   16bf0:	mov	r0, r5
   16bf4:	ldm	r3, {r2, r3}
   16bf8:	ldr	r1, [pc, #284]	; 16d1c <__assert_fail@plt+0x4414>
   16bfc:	str	r4, [ip]
   16c00:	bl	127b8 <gpgrt_fopencookie@plt>
   16c04:	subs	r4, r0, #0
   16c08:	beq	16cf4 <__assert_fail@plt+0x43ec>
   16c0c:	mov	r3, #0
   16c10:	mov	r1, r3
   16c14:	mov	r2, #1
   16c18:	mov	r0, r4
   16c1c:	bl	1244c <gpgrt_setvbuf@plt>
   16c20:	mov	r3, #0
   16c24:	stm	r7, {r4, r8}
   16c28:	str	r3, [r7, #8]
   16c2c:	add	sp, sp, #28
   16c30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16c34:	mov	r2, #9
   16c38:	ldr	r1, [pc, #224]	; 16d20 <__assert_fail@plt+0x4418>
   16c3c:	mov	r0, r6
   16c40:	bl	1289c <strncmp@plt>
   16c44:	cmp	r0, #0
   16c48:	moveq	r8, #2
   16c4c:	beq	16b94 <__assert_fail@plt+0x428c>
   16c50:	mov	r0, r4
   16c54:	bl	1214c <gcry_xmalloc@plt>
   16c58:	mov	r1, r6
   16c5c:	ldr	r9, [pc, #192]	; 16d24 <__assert_fail@plt+0x441c>
   16c60:	ldr	r8, [pc, #192]	; 16d28 <__assert_fail@plt+0x4420>
   16c64:	mov	r5, r0
   16c68:	add	r0, r0, #16
   16c6c:	bl	12404 <strcpy@plt>
   16c70:	mov	r3, #0
   16c74:	str	r3, [r5, #4]
   16c78:	str	r3, [r5, #12]
   16c7c:	str	r3, [r5, #8]
   16c80:	b	16c94 <__assert_fail@plt+0x438c>
   16c84:	bl	12620 <__errno_location@plt>
   16c88:	ldr	r3, [r0]
   16c8c:	cmp	r3, #4
   16c90:	bne	16cb4 <__assert_fail@plt+0x43ac>
   16c94:	mov	r2, r9
   16c98:	mov	r1, r8
   16c9c:	mov	r0, r6
   16ca0:	bl	12470 <open64@plt>
   16ca4:	cmn	r0, #1
   16ca8:	mov	r4, r0
   16cac:	str	r0, [r5]
   16cb0:	beq	16c84 <__assert_fail@plt+0x437c>
   16cb4:	mov	r8, #0
   16cb8:	b	16bc0 <__assert_fail@plt+0x42b8>
   16cbc:	mov	r0, #2
   16cc0:	bl	1253c <_gpgrt_get_std_stream@plt>
   16cc4:	bl	128c0 <gpgrt_fileno@plt>
   16cc8:	mov	r4, r0
   16ccc:	mov	r0, #20
   16cd0:	bl	1214c <gcry_xmalloc@plt>
   16cd4:	mov	r8, #0
   16cd8:	mov	r5, r0
   16cdc:	str	r4, [r0]
   16ce0:	strb	r8, [r0, #16]
   16ce4:	str	r8, [r0, #4]
   16ce8:	str	r8, [r0, #12]
   16cec:	str	r8, [r0, #8]
   16cf0:	b	16bc0 <__assert_fail@plt+0x42b8>
   16cf4:	mov	r0, #2
   16cf8:	bl	1253c <_gpgrt_get_std_stream@plt>
   16cfc:	mov	r4, r0
   16d00:	b	16c0c <__assert_fail@plt+0x4304>
   16d04:	andeq	r5, r3, r0, asr #5
   16d08:	andeq	r2, r2, r0, lsr #12
   16d0c:	andeq	r2, r2, r4, lsr #12
   16d10:			; <UNDEFINED> instruction: 0x00016abc
   16d14:	andeq	r5, r3, ip, ror #2
   16d18:	andeq	r7, r1, r8, lsr #8
   16d1c:	andeq	r2, r2, ip, lsr #12
   16d20:	andeq	r2, r2, r0, lsr r6
   16d24:			; <UNDEFINED> instruction: 0x000001b6
   16d28:	andeq	r0, r0, r1, asr #8
   16d2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16d30:	sub	sp, sp, #28
   16d34:	ldr	r6, [pc, #688]	; 16fec <__assert_fail@plt+0x46e4>
   16d38:	cmp	r0, #1
   16d3c:	ldr	r3, [r6]
   16d40:	str	r3, [sp, #20]
   16d44:	beq	16e1c <__assert_fail@plt+0x4514>
   16d48:	ldr	r4, [pc, #672]	; 16ff0 <__assert_fail@plt+0x46e8>
   16d4c:	mov	r5, r0
   16d50:	mov	r7, r1
   16d54:	ldr	r3, [r4, #12]
   16d58:	ldr	r0, [r4, #4]
   16d5c:	cmp	r3, #0
   16d60:	bne	16e34 <__assert_fail@plt+0x452c>
   16d64:	ldr	r3, [r4, #16]
   16d68:	orrs	r0, r0, r3
   16d6c:	bne	16fcc <__assert_fail@plt+0x46c4>
   16d70:	ldr	r3, [r4, #100]	; 0x64
   16d74:	orrs	r3, r0, r3
   16d78:	bne	16e5c <__assert_fail@plt+0x4554>
   16d7c:	ldr	r3, [r4, #12]
   16d80:	cmp	r3, #0
   16d84:	beq	16eb4 <__assert_fail@plt+0x45ac>
   16d88:	cmp	r7, #0
   16d8c:	bne	16de4 <__assert_fail@plt+0x44dc>
   16d90:	ldr	r2, [r4, #16]
   16d94:	ldr	r3, [r4, #12]
   16d98:	ldr	r1, [r4, #100]	; 0x64
   16d9c:	orr	r3, r3, r2
   16da0:	ldr	r2, [r4, #4]
   16da4:	orr	r3, r3, r1
   16da8:	orrs	r3, r3, r2
   16dac:	beq	16de4 <__assert_fail@plt+0x44dc>
   16db0:	ldr	r1, [r4]
   16db4:	ldrb	r3, [r1, #2]
   16db8:	tst	r3, #1
   16dbc:	beq	16f18 <__assert_fail@plt+0x4610>
   16dc0:	ldr	r3, [r1, #16]
   16dc4:	ldr	r2, [r1, #8]
   16dc8:	cmp	r3, r2
   16dcc:	bcs	16f18 <__assert_fail@plt+0x4610>
   16dd0:	ldr	r2, [r1, #4]
   16dd4:	add	r0, r3, #1
   16dd8:	str	r0, [r1, #16]
   16ddc:	mov	r1, #32
   16de0:	strb	r1, [r2, r3]
   16de4:	cmp	r5, #7
   16de8:	ldrls	pc, [pc, r5, lsl #2]
   16dec:	b	16fd8 <__assert_fail@plt+0x46d0>
   16df0:	andeq	r6, r1, ip, lsl lr
   16df4:	andeq	r6, r1, ip, lsl lr
   16df8:	andeq	r6, r1, ip, lsl lr
   16dfc:	andeq	r6, r1, ip, lsl lr
   16e00:	andeq	r6, r1, ip, lsl lr
   16e04:	strdeq	r6, [r1], -r8
   16e08:	andeq	r6, r1, r8, lsl #30
   16e0c:	andeq	r6, r1, r0, lsl lr
   16e10:	ldr	r1, [r4]
   16e14:	ldr	r0, [pc, #472]	; 16ff4 <__assert_fail@plt+0x46ec>
   16e18:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   16e1c:	ldr	r2, [sp, #20]
   16e20:	ldr	r3, [r6]
   16e24:	cmp	r2, r3
   16e28:	bne	16fd4 <__assert_fail@plt+0x46cc>
   16e2c:	add	sp, sp, #28
   16e30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16e34:	cmp	r0, #0
   16e38:	ldr	r8, [r4]
   16e3c:	beq	16f68 <__assert_fail@plt+0x4660>
   16e40:	mov	r1, r8
   16e44:	ldr	r0, [pc, #428]	; 16ff8 <__assert_fail@plt+0x46f0>
   16e48:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   16e4c:	ldr	r0, [r4, #4]
   16e50:	ldr	r3, [r4, #100]	; 0x64
   16e54:	orrs	r3, r0, r3
   16e58:	beq	16d7c <__assert_fail@plt+0x4474>
   16e5c:	ldr	r3, [r4, #104]	; 0x68
   16e60:	cmp	r3, #0
   16e64:	beq	16f4c <__assert_fail@plt+0x4644>
   16e68:	add	r0, sp, #16
   16e6c:	blx	r3
   16e70:	cmp	r0, #0
   16e74:	beq	16f4c <__assert_fail@plt+0x4644>
   16e78:	ldr	r1, [pc, #380]	; 16ffc <__assert_fail@plt+0x46f4>
   16e7c:	cmp	r0, #1
   16e80:	ldr	r8, [pc, #376]	; 17000 <__assert_fail@plt+0x46f8>
   16e84:	ldr	r9, [r4]
   16e88:	movne	r8, r1
   16e8c:	bl	12554 <getpid@plt>
   16e90:	mov	r1, r8
   16e94:	ldr	r3, [sp, #16]
   16e98:	mov	r2, r0
   16e9c:	mov	r0, r9
   16ea0:	bl	1256c <gpgrt_fprintf_unlocked@plt>
   16ea4:	ldr	r3, [r4, #12]
   16ea8:	cmp	r3, #0
   16eac:	bne	16f24 <__assert_fail@plt+0x461c>
   16eb0:	ldr	r3, [r4, #100]	; 0x64
   16eb4:	ldr	r2, [r4, #16]
   16eb8:	orrs	r3, r3, r2
   16ebc:	beq	16f24 <__assert_fail@plt+0x461c>
   16ec0:	ldr	r1, [r4]
   16ec4:	ldrb	r3, [r1, #2]
   16ec8:	tst	r3, #1
   16ecc:	beq	16f40 <__assert_fail@plt+0x4638>
   16ed0:	ldr	r3, [r1, #16]
   16ed4:	ldr	r2, [r1, #8]
   16ed8:	cmp	r3, r2
   16edc:	bcs	16f40 <__assert_fail@plt+0x4638>
   16ee0:	ldr	r2, [r1, #4]
   16ee4:	add	r0, r3, #1
   16ee8:	str	r0, [r1, #16]
   16eec:	mov	r1, #58	; 0x3a
   16ef0:	strb	r1, [r2, r3]
   16ef4:	b	16d88 <__assert_fail@plt+0x4480>
   16ef8:	ldr	r1, [r4]
   16efc:	ldr	r0, [pc, #256]	; 17004 <__assert_fail@plt+0x46fc>
   16f00:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   16f04:	b	16e1c <__assert_fail@plt+0x4514>
   16f08:	ldr	r1, [r4]
   16f0c:	ldr	r0, [pc, #244]	; 17008 <__assert_fail@plt+0x4700>
   16f10:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   16f14:	b	16e1c <__assert_fail@plt+0x4514>
   16f18:	mov	r0, #32
   16f1c:	bl	1223c <_gpgrt_putc_overflow@plt>
   16f20:	b	16de4 <__assert_fail@plt+0x44dc>
   16f24:	ldr	r3, [r4, #4]
   16f28:	cmp	r3, #0
   16f2c:	beq	16d88 <__assert_fail@plt+0x4480>
   16f30:	ldr	r1, [r4]
   16f34:	ldrb	r3, [r1, #2]
   16f38:	tst	r3, #1
   16f3c:	bne	16ed0 <__assert_fail@plt+0x45c8>
   16f40:	mov	r0, #58	; 0x3a
   16f44:	bl	1223c <_gpgrt_putc_overflow@plt>
   16f48:	b	16d88 <__assert_fail@plt+0x4480>
   16f4c:	ldr	r8, [r4]
   16f50:	bl	12554 <getpid@plt>
   16f54:	ldr	r1, [pc, #176]	; 1700c <__assert_fail@plt+0x4704>
   16f58:	mov	r2, r0
   16f5c:	mov	r0, r8
   16f60:	bl	1256c <gpgrt_fprintf_unlocked@plt>
   16f64:	b	16ea4 <__assert_fail@plt+0x459c>
   16f68:	bl	1229c <time@plt>
   16f6c:	str	r0, [sp, #16]
   16f70:	add	r0, sp, #16
   16f74:	bl	124e8 <localtime@plt>
   16f78:	mov	r1, r0
   16f7c:	mov	r0, r8
   16f80:	ldr	ip, [r1]
   16f84:	ldr	r3, [r1, #16]
   16f88:	ldr	r2, [r1, #20]
   16f8c:	str	ip, [sp, #12]
   16f90:	ldr	ip, [r1, #4]
   16f94:	add	r2, r2, #1888	; 0x760
   16f98:	str	ip, [sp, #8]
   16f9c:	ldr	ip, [r1, #8]
   16fa0:	add	r3, r3, #1
   16fa4:	str	ip, [sp, #4]
   16fa8:	ldr	r1, [r1, #12]
   16fac:	add	r2, r2, #12
   16fb0:	str	r1, [sp]
   16fb4:	ldr	r1, [pc, #84]	; 17010 <__assert_fail@plt+0x4708>
   16fb8:	bl	1256c <gpgrt_fprintf_unlocked@plt>
   16fbc:	ldr	r0, [r4, #4]
   16fc0:	ldr	r3, [r4, #16]
   16fc4:	orrs	r0, r0, r3
   16fc8:	beq	16d70 <__assert_fail@plt+0x4468>
   16fcc:	ldr	r8, [r4]
   16fd0:	b	16e40 <__assert_fail@plt+0x4538>
   16fd4:	bl	122fc <__stack_chk_fail@plt>
   16fd8:	mov	r2, r5
   16fdc:	ldr	r0, [r4]
   16fe0:	ldr	r1, [pc, #44]	; 17014 <__assert_fail@plt+0x470c>
   16fe4:	bl	1256c <gpgrt_fprintf_unlocked@plt>
   16fe8:	b	16e1c <__assert_fail@plt+0x4514>
   16fec:	andeq	r4, r3, r8, lsr fp
   16ff0:	andeq	r5, r3, r0, asr #5
   16ff4:	muleq	r2, r4, r6
   16ff8:	ldrdeq	r5, [r3], -r4
   16ffc:	andeq	r2, r2, r8, asr #12
   17000:	andeq	r2, r2, ip, lsr r6
   17004:	andeq	r2, r2, ip, ror r6
   17008:	andeq	r2, r2, r4, lsl #13
   1700c:	andeq	r2, r2, r4, ror r6
   17010:	andeq	r2, r2, r4, asr r6
   17014:	muleq	r2, ip, r6
   17018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1701c:	sub	sp, sp, #20
   17020:	mov	r5, r3
   17024:	ldr	r8, [sp, #56]	; 0x38
   17028:	ldr	r4, [pc, #868]	; 17394 <__assert_fail@plt+0x4a8c>
   1702c:	cmp	r8, #0
   17030:	mov	sl, r0
   17034:	ldrbne	r3, [r8]
   17038:	ldr	r0, [r4]
   1703c:	streq	r8, [sp, #12]
   17040:	subne	r3, r3, #8
   17044:	clzne	r3, r3
   17048:	lsrne	r3, r3, #5
   1704c:	strne	r3, [sp, #12]
   17050:	cmp	r0, #0
   17054:	mov	r7, r1
   17058:	mov	r6, r2
   1705c:	ldr	fp, [sp, #60]	; 0x3c
   17060:	beq	172f4 <__assert_fail@plt+0x49ec>
   17064:	bl	12434 <gpgrt_flockfile@plt>
   17068:	ldr	r3, [r4, #8]
   1706c:	cmp	r3, #0
   17070:	cmpne	sl, #1
   17074:	bne	17320 <__assert_fail@plt+0x4a18>
   17078:	ldr	r9, [sp, #12]
   1707c:	mov	r3, #0
   17080:	mov	r1, r9
   17084:	mov	r0, sl
   17088:	str	r3, [r4, #8]
   1708c:	bl	16d2c <__assert_fail@plt+0x4424>
   17090:	cmp	r9, #0
   17094:	addne	r8, r8, #1
   17098:	cmp	r8, #0
   1709c:	beq	17244 <__assert_fail@plt+0x493c>
   170a0:	cmp	r5, #0
   170a4:	ldr	r9, [r4]
   170a8:	beq	170bc <__assert_fail@plt+0x47b4>
   170ac:	mov	r1, r9
   170b0:	mov	r0, r5
   170b4:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   170b8:	ldr	r9, [r4]
   170bc:	cmp	r7, #0
   170c0:	beq	172e0 <__assert_fail@plt+0x49d8>
   170c4:	ldr	fp, [pc, #716]	; 17398 <__assert_fail@plt+0x4a90>
   170c8:	mov	r5, r8
   170cc:	b	1711c <__assert_fail@plt+0x4814>
   170d0:	cmp	r8, r5
   170d4:	moveq	r2, #0
   170d8:	beq	170f8 <__assert_fail@plt+0x47f0>
   170dc:	ldr	r2, [r4, #16]
   170e0:	ldr	r0, [r4, #4]
   170e4:	orrs	r2, r2, r0
   170e8:	beq	170f8 <__assert_fail@plt+0x47f0>
   170ec:	ldr	r0, [pc, #680]	; 1739c <__assert_fail@plt+0x4a94>
   170f0:	bl	1259c <strlen@plt>
   170f4:	add	r2, r0, #2
   170f8:	sub	r3, r7, r5
   170fc:	add	r3, r3, #1
   17100:	mov	r0, r9
   17104:	stm	sp, {r3, r5}
   17108:	ldr	r1, [pc, #656]	; 173a0 <__assert_fail@plt+0x4a98>
   1710c:	mov	r3, fp
   17110:	bl	1256c <gpgrt_fprintf_unlocked@plt>
   17114:	ldr	r9, [r4]
   17118:	add	r5, r7, #1
   1711c:	mov	r1, #10
   17120:	mov	r0, r5
   17124:	bl	125c0 <strchr@plt>
   17128:	subs	r7, r0, #0
   1712c:	bne	170d0 <__assert_fail@plt+0x47c8>
   17130:	mov	r1, r9
   17134:	mov	r0, r5
   17138:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   1713c:	ldrb	r3, [r8]
   17140:	cmp	r3, #0
   17144:	beq	17244 <__assert_fail@plt+0x493c>
   17148:	mov	r0, r8
   1714c:	bl	1259c <strlen@plt>
   17150:	add	r0, r8, r0
   17154:	ldrb	r3, [r0, #-1]
   17158:	cmp	r3, #10
   1715c:	beq	17244 <__assert_fail@plt+0x493c>
   17160:	mov	r3, #1
   17164:	cmp	r6, #0
   17168:	str	r3, [r4, #8]
   1716c:	beq	17360 <__assert_fail@plt+0x4a58>
   17170:	ldr	r1, [r4]
   17174:	mov	r0, #10
   17178:	bl	1223c <_gpgrt_putc_overflow@plt>
   1717c:	mov	r3, #0
   17180:	str	r3, [r4, #8]
   17184:	ldr	r1, [sp, #12]
   17188:	mov	r0, sl
   1718c:	bl	16d2c <__assert_fail@plt+0x4424>
   17190:	ldr	r1, [r4]
   17194:	ldr	r0, [pc, #520]	; 173a4 <__assert_fail@plt+0x4a9c>
   17198:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   1719c:	ldr	r9, [pc, #516]	; 173a8 <__assert_fail@plt+0x4aa0>
   171a0:	ldr	r1, [r4]
   171a4:	ldr	fp, [pc, #504]	; 173a4 <__assert_fail@plt+0x4a9c>
   171a8:	ldr	r8, [pc, #508]	; 173ac <__assert_fail@plt+0x4aa4>
   171ac:	ldr	r7, [pc, #508]	; 173b0 <__assert_fail@plt+0x4aa8>
   171b0:	mov	r5, #1
   171b4:	str	r5, [r4, #8]
   171b8:	ldrb	r0, [r6], #1
   171bc:	cmp	r0, #0
   171c0:	beq	17218 <__assert_fail@plt+0x4910>
   171c4:	cmp	r0, #92	; 0x5c
   171c8:	str	r5, [r4, #8]
   171cc:	beq	17268 <__assert_fail@plt+0x4960>
   171d0:	cmp	r0, #13
   171d4:	beq	17278 <__assert_fail@plt+0x4970>
   171d8:	cmp	r0, #10
   171dc:	beq	17288 <__assert_fail@plt+0x4980>
   171e0:	ldrb	r3, [r1, #2]
   171e4:	tst	r3, #1
   171e8:	beq	1725c <__assert_fail@plt+0x4954>
   171ec:	ldr	r3, [r1, #16]
   171f0:	ldr	r2, [r1, #8]
   171f4:	cmp	r3, r2
   171f8:	bcs	1725c <__assert_fail@plt+0x4954>
   171fc:	ldr	r2, [r1, #4]
   17200:	add	ip, r3, #1
   17204:	str	ip, [r1, #16]
   17208:	strb	r0, [r2, r3]
   1720c:	ldrb	r0, [r6], #1
   17210:	cmp	r0, #0
   17214:	bne	171c4 <__assert_fail@plt+0x48bc>
   17218:	ldr	r2, [r4, #8]
   1721c:	cmp	r2, #0
   17220:	bne	172c4 <__assert_fail@plt+0x49bc>
   17224:	cmp	sl, #5
   17228:	beq	17350 <__assert_fail@plt+0x4a48>
   1722c:	cmp	sl, #6
   17230:	beq	17370 <__assert_fail@plt+0x4a68>
   17234:	mov	r0, r1
   17238:	add	sp, sp, #20
   1723c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17240:	b	12170 <gpgrt_funlockfile@plt>
   17244:	cmp	r6, #0
   17248:	beq	17330 <__assert_fail@plt+0x4a28>
   1724c:	ldr	r3, [r4, #8]
   17250:	cmp	r3, #0
   17254:	beq	17184 <__assert_fail@plt+0x487c>
   17258:	b	17170 <__assert_fail@plt+0x4868>
   1725c:	bl	1223c <_gpgrt_putc_overflow@plt>
   17260:	ldr	r1, [r4]
   17264:	b	171b8 <__assert_fail@plt+0x48b0>
   17268:	mov	r0, r7
   1726c:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   17270:	ldr	r1, [r4]
   17274:	b	171b8 <__assert_fail@plt+0x48b0>
   17278:	mov	r0, r8
   1727c:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   17280:	ldr	r1, [r4]
   17284:	b	171b8 <__assert_fail@plt+0x48b0>
   17288:	mov	r0, r9
   1728c:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   17290:	ldrb	r3, [r6]
   17294:	cmp	r3, #0
   17298:	streq	r3, [r4, #8]
   1729c:	ldreq	r1, [r4]
   172a0:	beq	171b8 <__assert_fail@plt+0x48b0>
   172a4:	ldr	r1, [sp, #12]
   172a8:	mov	r0, sl
   172ac:	bl	16d2c <__assert_fail@plt+0x4424>
   172b0:	ldr	r1, [r4]
   172b4:	mov	r0, fp
   172b8:	bl	123a4 <gpgrt_fputs_unlocked@plt>
   172bc:	ldr	r1, [r4]
   172c0:	b	171b8 <__assert_fail@plt+0x48b0>
   172c4:	str	r0, [sp, #12]
   172c8:	mov	r0, #10
   172cc:	bl	1223c <_gpgrt_putc_overflow@plt>
   172d0:	ldr	r3, [sp, #12]
   172d4:	ldr	r1, [r4]
   172d8:	str	r3, [r4, #8]
   172dc:	b	17224 <__assert_fail@plt+0x491c>
   172e0:	mov	r2, fp
   172e4:	mov	r0, r9
   172e8:	mov	r1, r8
   172ec:	bl	121b8 <gpgrt_vfprintf_unlocked@plt>
   172f0:	b	1713c <__assert_fail@plt+0x4834>
   172f4:	ldr	r0, [pc, #184]	; 173b4 <__assert_fail@plt+0x4aac>
   172f8:	mvn	r1, #0
   172fc:	bl	16afc <__assert_fail@plt+0x41f4>
   17300:	ldr	r0, [r4]
   17304:	cmp	r0, #0
   17308:	bne	17064 <__assert_fail@plt+0x475c>
   1730c:	ldr	r3, [pc, #164]	; 173b8 <__assert_fail@plt+0x4ab0>
   17310:	ldr	r2, [pc, #164]	; 173bc <__assert_fail@plt+0x4ab4>
   17314:	ldr	r1, [pc, #164]	; 173c0 <__assert_fail@plt+0x4ab8>
   17318:	ldr	r0, [pc, #164]	; 173c4 <__assert_fail@plt+0x4abc>
   1731c:	bl	12908 <__assert_fail@plt>
   17320:	ldr	r1, [r4]
   17324:	mov	r0, #10
   17328:	bl	1223c <_gpgrt_putc_overflow@plt>
   1732c:	b	17078 <__assert_fail@plt+0x4770>
   17330:	cmp	sl, #5
   17334:	ldr	r1, [r4]
   17338:	bne	1722c <__assert_fail@plt+0x4924>
   1733c:	ldr	r3, [r4, #8]
   17340:	cmp	r3, #0
   17344:	beq	17350 <__assert_fail@plt+0x4a48>
   17348:	mov	r0, #10
   1734c:	bl	1223c <_gpgrt_putc_overflow@plt>
   17350:	ldr	r0, [r4]
   17354:	bl	12170 <gpgrt_funlockfile@plt>
   17358:	mov	r0, #2
   1735c:	bl	12560 <exit@plt>
   17360:	cmp	sl, #5
   17364:	ldr	r1, [r4]
   17368:	bne	1722c <__assert_fail@plt+0x4924>
   1736c:	b	17348 <__assert_fail@plt+0x4a40>
   17370:	ldr	r3, [r4, #8]
   17374:	cmp	r3, #0
   17378:	bne	17388 <__assert_fail@plt+0x4a80>
   1737c:	ldr	r0, [r4]
   17380:	bl	12170 <gpgrt_funlockfile@plt>
   17384:	bl	128a8 <abort@plt>
   17388:	mov	r0, #10
   1738c:	bl	1223c <_gpgrt_putc_overflow@plt>
   17390:	b	1737c <__assert_fail@plt+0x4a74>
   17394:	andeq	r5, r3, r0, asr #5
   17398:	andeq	r3, r2, r8, lsl #21
   1739c:	ldrdeq	r5, [r3], -r4
   173a0:	ldrdeq	r2, [r2], -ip
   173a4:	andeq	r2, r2, r4, ror #13
   173a8:	strdeq	r2, [r2], -r0
   173ac:	andeq	r2, r2, ip, ror #13
   173b0:	andeq	r2, r2, r8, ror #13
   173b4:	andeq	r2, r2, r0, lsr #12
   173b8:	andeq	r2, r2, r8, lsl #12
   173bc:	strdeq	r0, [r0], -r1
   173c0:			; <UNDEFINED> instruction: 0x000226b8
   173c4:	ldrdeq	r2, [r2], -r0
   173c8:	push	{r1, r2, r3}
   173cc:	mov	r3, #0
   173d0:	push	{r4, lr}
   173d4:	sub	sp, sp, #20
   173d8:	ldr	r4, [pc, #68]	; 17424 <__assert_fail@plt+0x4b1c>
   173dc:	ldr	r2, [sp, #28]
   173e0:	add	ip, sp, #32
   173e4:	ldr	r1, [r4]
   173e8:	stm	sp, {r2, ip}
   173ec:	str	r1, [sp, #12]
   173f0:	mov	r2, r3
   173f4:	mov	r1, #1
   173f8:	str	ip, [sp, #8]
   173fc:	bl	17018 <__assert_fail@plt+0x4710>
   17400:	ldr	r2, [sp, #12]
   17404:	ldr	r3, [r4]
   17408:	cmp	r2, r3
   1740c:	bne	17420 <__assert_fail@plt+0x4b18>
   17410:	add	sp, sp, #20
   17414:	pop	{r4, lr}
   17418:	add	sp, sp, #12
   1741c:	bx	lr
   17420:	bl	122fc <__stack_chk_fail@plt>
   17424:	andeq	r4, r3, r8, lsr fp
   17428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1742c:	mov	r4, r0
   17430:	ldr	r8, [pc, #1564]	; 17a54 <__assert_fail@plt+0x514c>
   17434:	ldr	r0, [r0, #8]
   17438:	sub	sp, sp, #180	; 0xb4
   1743c:	ldr	r3, [r8]
   17440:	cmp	r0, #0
   17444:	mov	r7, r1
   17448:	mov	r9, r2
   1744c:	str	r3, [sp, #172]	; 0xac
   17450:	ldr	r6, [r4]
   17454:	beq	17610 <__assert_fail@plt+0x4d08>
   17458:	cmn	r6, #1
   1745c:	beq	17560 <__assert_fail@plt+0x4c58>
   17460:	ldr	sl, [pc, #1520]	; 17a58 <__assert_fail@plt+0x5150>
   17464:	str	r6, [sl]
   17468:	cmp	r9, #0
   1746c:	beq	17544 <__assert_fail@plt+0x4c3c>
   17470:	mov	r5, r9
   17474:	b	17484 <__assert_fail@plt+0x4b7c>
   17478:	subs	r5, r5, r0
   1747c:	add	r7, r7, r0
   17480:	beq	17544 <__assert_fail@plt+0x4c3c>
   17484:	mov	r2, r5
   17488:	mov	r1, r7
   1748c:	mov	r0, r6
   17490:	bl	12698 <write@plt>
   17494:	cmp	r0, #0
   17498:	bge	17478 <__assert_fail@plt+0x4b70>
   1749c:	bl	12620 <__errno_location@plt>
   174a0:	ldr	r3, [r0]
   174a4:	cmp	r3, #4
   174a8:	beq	17484 <__assert_fail@plt+0x4b7c>
   174ac:	ldr	r5, [pc, #1448]	; 17a5c <__assert_fail@plt+0x5154>
   174b0:	ldr	r3, [r5, #112]	; 0x70
   174b4:	cmp	r3, #0
   174b8:	bne	1751c <__assert_fail@plt+0x4c14>
   174bc:	ldr	r3, [r4]
   174c0:	cmn	r3, #1
   174c4:	beq	17544 <__assert_fail@plt+0x4c3c>
   174c8:	mov	r0, #2
   174cc:	bl	1253c <_gpgrt_get_std_stream@plt>
   174d0:	bl	128c0 <gpgrt_fileno@plt>
   174d4:	bl	12878 <isatty@plt>
   174d8:	cmp	r0, #0
   174dc:	beq	1751c <__assert_fail@plt+0x4c14>
   174e0:	bl	12620 <__errno_location@plt>
   174e4:	ldrb	r3, [r4, #16]
   174e8:	cmp	r3, #0
   174ec:	mov	r5, r0
   174f0:	mov	r0, #2
   174f4:	beq	17720 <__assert_fail@plt+0x4e18>
   174f8:	bl	1253c <_gpgrt_get_std_stream@plt>
   174fc:	mov	r6, r0
   17500:	ldr	r0, [r5]
   17504:	bl	124dc <strerror@plt>
   17508:	add	r2, r4, #16
   1750c:	ldr	r1, [pc, #1356]	; 17a60 <__assert_fail@plt+0x5158>
   17510:	mov	r3, r0
   17514:	mov	r0, r6
   17518:	bl	1283c <gpgrt_fprintf@plt>
   1751c:	ldr	r3, [r4, #12]
   17520:	cmp	r3, #0
   17524:	beq	17544 <__assert_fail@plt+0x4c3c>
   17528:	ldr	r0, [r4]
   1752c:	cmn	r0, #1
   17530:	beq	17544 <__assert_fail@plt+0x4c3c>
   17534:	bl	128cc <close@plt>
   17538:	mvn	r3, #0
   1753c:	str	r3, [r4]
   17540:	str	r3, [sl]
   17544:	ldr	r2, [sp, #172]	; 0xac
   17548:	ldr	r3, [r8]
   1754c:	mov	r0, r9
   17550:	cmp	r2, r3
   17554:	bne	17a34 <__assert_fail@plt+0x512c>
   17558:	add	sp, sp, #180	; 0xb4
   1755c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17560:	mov	r3, #0
   17564:	add	r6, r4, #16
   17568:	mov	r0, r6
   1756c:	str	r3, [r4, #12]
   17570:	mov	r2, #6
   17574:	ldr	r1, [pc, #1256]	; 17a64 <__assert_fail@plt+0x515c>
   17578:	bl	1289c <strncmp@plt>
   1757c:	cmp	r0, #0
   17580:	bne	17590 <__assert_fail@plt+0x4c88>
   17584:	ldrb	r3, [r4, #22]
   17588:	cmp	r3, #0
   1758c:	bne	17624 <__assert_fail@plt+0x4d1c>
   17590:	mov	r2, #9
   17594:	ldr	r1, [pc, #1228]	; 17a68 <__assert_fail@plt+0x5160>
   17598:	mov	r0, r6
   1759c:	bl	1289c <strncmp@plt>
   175a0:	mov	sl, #1
   175a4:	strh	sl, [sp, #60]	; 0x3c
   175a8:	cmp	r0, #0
   175ac:	addeq	r5, r4, #25
   175b0:	movne	r5, r6
   175b4:	ldrb	fp, [r5]
   175b8:	cmp	fp, #0
   175bc:	beq	1783c <__assert_fail@plt+0x4f34>
   175c0:	mov	r0, r5
   175c4:	bl	1259c <strlen@plt>
   175c8:	cmp	r0, #106	; 0x6a
   175cc:	bls	1778c <__assert_fail@plt+0x4e84>
   175d0:	ldr	r5, [pc, #1156]	; 17a5c <__assert_fail@plt+0x5154>
   175d4:	mvn	r3, #0
   175d8:	str	r3, [r4]
   175dc:	ldr	r3, [r4, #4]
   175e0:	ldr	r2, [r5, #112]	; 0x70
   175e4:	cmp	r3, #0
   175e8:	bne	178e8 <__assert_fail@plt+0x4fe0>
   175ec:	cmp	r2, #0
   175f0:	beq	178f8 <__assert_fail@plt+0x4ff0>
   175f4:	ldr	r6, [r4]
   175f8:	cmn	r6, #1
   175fc:	beq	1793c <__assert_fail@plt+0x5034>
   17600:	mov	r2, #0
   17604:	mov	r3, #1
   17608:	str	r2, [r4, #4]
   1760c:	str	r3, [r4, #12]
   17610:	ldr	sl, [pc, #1088]	; 17a58 <__assert_fail@plt+0x5150>
   17614:	cmn	r6, #1
   17618:	str	r6, [sl]
   1761c:	beq	174ac <__assert_fail@plt+0x4ba4>
   17620:	b	17468 <__assert_fail@plt+0x4b60>
   17624:	add	r5, r4, #22
   17628:	mov	r0, r5
   1762c:	bl	1259c <strlen@plt>
   17630:	add	r0, r0, #1
   17634:	bl	1217c <gcry_malloc@plt>
   17638:	subs	sl, r0, #0
   1763c:	beq	178dc <__assert_fail@plt+0x4fd4>
   17640:	ldrb	r3, [r4, #22]
   17644:	cmp	r3, #91	; 0x5b
   17648:	beq	1774c <__assert_fail@plt+0x4e44>
   1764c:	mov	r1, r5
   17650:	bl	12404 <strcpy@plt>
   17654:	mov	r1, #58	; 0x3a
   17658:	mov	r0, sl
   1765c:	bl	125c0 <strchr@plt>
   17660:	cmp	r0, #0
   17664:	beq	17774 <__assert_fail@plt+0x4e6c>
   17668:	ldrb	r3, [r0, #1]
   1766c:	add	ip, r0, #1
   17670:	sub	r3, r3, #48	; 0x30
   17674:	uxtb	r2, r3
   17678:	cmp	r2, #9
   1767c:	bhi	17774 <__assert_fail@plt+0x4e6c>
   17680:	ldr	r5, [pc, #996]	; 17a6c <__assert_fail@plt+0x5164>
   17684:	b	17698 <__assert_fail@plt+0x4d90>
   17688:	add	r3, r3, r3, lsl #2
   1768c:	add	r3, r2, r3, lsl #1
   17690:	cmp	r3, r5
   17694:	bhi	17774 <__assert_fail@plt+0x4e6c>
   17698:	ldrb	r1, [ip, #1]!
   1769c:	sub	r2, r1, #48	; 0x30
   176a0:	uxtb	lr, r2
   176a4:	cmp	lr, #9
   176a8:	bls	17688 <__assert_fail@plt+0x4d80>
   176ac:	adds	r2, r1, #0
   176b0:	movne	r2, #1
   176b4:	cmp	r3, #0
   176b8:	moveq	r2, #1
   176bc:	cmp	r2, #0
   176c0:	bne	17774 <__assert_fail@plt+0x4e6c>
   176c4:	rev16	r3, r3
   176c8:	mov	r1, #2
   176cc:	strh	r3, [sp, #18]
   176d0:	strb	r2, [r0]
   176d4:	str	r2, [sp, #20]
   176d8:	str	r2, [sp, #24]
   176dc:	str	r2, [sp, #28]
   176e0:	mov	r3, r1
   176e4:	add	r2, sp, #20
   176e8:	add	r5, sp, #16
   176ec:	mov	fp, #16
   176f0:	strh	r1, [sp, #16]
   176f4:	mov	r0, r3
   176f8:	mov	r1, sl
   176fc:	str	r3, [sp, #12]
   17700:	bl	1226c <inet_pton@plt>
   17704:	ldr	r3, [sp, #12]
   17708:	cmp	r0, #1
   1770c:	beq	17a38 <__assert_fail@plt+0x5130>
   17710:	mov	r0, sl
   17714:	bl	122a8 <gcry_free@plt>
   17718:	ldr	r5, [pc, #828]	; 17a5c <__assert_fail@plt+0x5154>
   1771c:	b	175d4 <__assert_fail@plt+0x4ccc>
   17720:	bl	1253c <_gpgrt_get_std_stream@plt>
   17724:	ldr	r7, [r4]
   17728:	mov	r6, r0
   1772c:	ldr	r0, [r5]
   17730:	bl	124dc <strerror@plt>
   17734:	mov	r2, r7
   17738:	ldr	r1, [pc, #816]	; 17a70 <__assert_fail@plt+0x5168>
   1773c:	mov	r3, r0
   17740:	mov	r0, r6
   17744:	bl	1283c <gpgrt_fprintf@plt>
   17748:	b	1751c <__assert_fail@plt+0x4c14>
   1774c:	add	r1, r4, #23
   17750:	bl	12404 <strcpy@plt>
   17754:	mov	r1, #93	; 0x5d
   17758:	mov	r0, sl
   1775c:	bl	125c0 <strchr@plt>
   17760:	cmp	r0, #0
   17764:	beq	17774 <__assert_fail@plt+0x4e6c>
   17768:	ldrb	r3, [r0, #1]
   1776c:	cmp	r3, #58	; 0x3a
   17770:	beq	17948 <__assert_fail@plt+0x5040>
   17774:	mov	r0, #22
   17778:	bl	12794 <gpg_err_set_errno@plt>
   1777c:	mov	r0, sl
   17780:	bl	122a8 <gcry_free@plt>
   17784:	ldr	r5, [pc, #720]	; 17a5c <__assert_fail@plt+0x5154>
   17788:	b	175d4 <__assert_fail@plt+0x4ccc>
   1778c:	mov	r1, r5
   17790:	mov	r2, #107	; 0x6b
   17794:	add	r0, sp, #62	; 0x3e
   17798:	bl	12674 <strncpy@plt>
   1779c:	mov	r3, #0
   177a0:	add	r0, sp, #62	; 0x3e
   177a4:	strb	r3, [sp, #169]	; 0xa9
   177a8:	bl	1259c <strlen@plt>
   177ac:	mov	r3, sl
   177b0:	ldr	sl, [pc, #700]	; 17a74 <__assert_fail@plt+0x516c>
   177b4:	add	r5, sp, #60	; 0x3c
   177b8:	add	fp, r0, #2
   177bc:	mov	r0, r3
   177c0:	mov	r2, #0
   177c4:	mov	r1, #1
   177c8:	bl	12830 <socket@plt>
   177cc:	cmn	r0, #1
   177d0:	str	r0, [r4]
   177d4:	ldreq	r5, [pc, #640]	; 17a5c <__assert_fail@plt+0x5154>
   177d8:	beq	175dc <__assert_fail@plt+0x4cd4>
   177dc:	mov	r2, fp
   177e0:	mov	r1, r5
   177e4:	bl	128e4 <connect@plt>
   177e8:	cmn	r0, #1
   177ec:	beq	178b0 <__assert_fail@plt+0x4fa8>
   177f0:	ldr	r6, [r4]
   177f4:	cmn	r6, #1
   177f8:	bne	17600 <__assert_fail@plt+0x4cf8>
   177fc:	ldr	r5, [pc, #600]	; 17a5c <__assert_fail@plt+0x5154>
   17800:	ldr	r3, [r5, #112]	; 0x70
   17804:	cmp	r3, #0
   17808:	bne	178f0 <__assert_fail@plt+0x4fe8>
   1780c:	ldr	r3, [r4, #4]
   17810:	cmp	r3, #0
   17814:	moveq	r3, #1
   17818:	streq	r3, [r4, #4]
   1781c:	ldr	r3, [r5, #112]	; 0x70
   17820:	ldr	sl, [pc, #560]	; 17a58 <__assert_fail@plt+0x5150>
   17824:	cmp	r3, #0
   17828:	mvn	r3, #0
   1782c:	str	r3, [sl]
   17830:	str	r3, [r4]
   17834:	bne	1751c <__assert_fail@plt+0x4c14>
   17838:	b	17544 <__assert_fail@plt+0x4c3c>
   1783c:	ldr	r5, [pc, #536]	; 17a5c <__assert_fail@plt+0x5154>
   17840:	ldr	r3, [r5, #108]	; 0x6c
   17844:	blx	r3
   17848:	subs	r1, r0, #0
   1784c:	ldrb	r3, [r1]
   17850:	beq	17a50 <__assert_fail@plt+0x5148>
   17854:	cmp	r3, #0
   17858:	str	r1, [sp, #12]
   1785c:	beq	175d4 <__assert_fail@plt+0x4ccc>
   17860:	bl	1259c <strlen@plt>
   17864:	ldr	r1, [sp, #12]
   17868:	add	r0, r0, #7
   1786c:	cmp	r0, #106	; 0x6a
   17870:	bhi	175d4 <__assert_fail@plt+0x4ccc>
   17874:	mov	r2, #107	; 0x6b
   17878:	add	r0, sp, #62	; 0x3e
   1787c:	bl	12674 <strncpy@plt>
   17880:	mov	r2, #108	; 0x6c
   17884:	ldr	r1, [pc, #492]	; 17a78 <__assert_fail@plt+0x5170>
   17888:	add	r0, sp, #62	; 0x3e
   1788c:	bl	1262c <__strcat_chk@plt>
   17890:	add	r0, sp, #62	; 0x3e
   17894:	strb	fp, [sp, #169]	; 0xa9
   17898:	bl	1259c <strlen@plt>
   1789c:	add	r5, sp, #60	; 0x3c
   178a0:	mov	r3, sl
   178a4:	add	sl, sp, #62	; 0x3e
   178a8:	add	fp, r0, #2
   178ac:	b	177bc <__assert_fail@plt+0x4eb4>
   178b0:	ldr	r5, [pc, #420]	; 17a5c <__assert_fail@plt+0x5154>
   178b4:	ldr	r2, [r4, #4]
   178b8:	ldr	r3, [r5, #112]	; 0x70
   178bc:	orrs	r3, r2, r3
   178c0:	beq	179e8 <__assert_fail@plt+0x50e0>
   178c4:	ldr	r0, [r4]
   178c8:	bl	128cc <close@plt>
   178cc:	mvn	r3, #0
   178d0:	str	r3, [r4]
   178d4:	ldr	r3, [r5, #112]	; 0x70
   178d8:	b	17804 <__assert_fail@plt+0x4efc>
   178dc:	bl	122a8 <gcry_free@plt>
   178e0:	ldr	r5, [pc, #372]	; 17a5c <__assert_fail@plt+0x5154>
   178e4:	b	175d4 <__assert_fail@plt+0x4ccc>
   178e8:	cmp	r2, #0
   178ec:	beq	1781c <__assert_fail@plt+0x4f14>
   178f0:	ldr	r6, [r4]
   178f4:	b	17610 <__assert_fail@plt+0x4d08>
   178f8:	mov	r0, #2
   178fc:	bl	1253c <_gpgrt_get_std_stream@plt>
   17900:	bl	128c0 <gpgrt_fileno@plt>
   17904:	bl	12878 <isatty@plt>
   17908:	cmp	r0, #0
   1790c:	beq	177f0 <__assert_fail@plt+0x4ee8>
   17910:	mov	r0, #2
   17914:	bl	1253c <_gpgrt_get_std_stream@plt>
   17918:	mov	r5, r0
   1791c:	bl	12620 <__errno_location@plt>
   17920:	ldr	r0, [r0]
   17924:	bl	124dc <strerror@plt>
   17928:	ldr	r1, [pc, #332]	; 17a7c <__assert_fail@plt+0x5174>
   1792c:	mov	r2, r0
   17930:	mov	r0, r5
   17934:	bl	1283c <gpgrt_fprintf@plt>
   17938:	b	177f0 <__assert_fail@plt+0x4ee8>
   1793c:	ldr	sl, [pc, #276]	; 17a58 <__assert_fail@plt+0x5150>
   17940:	str	r6, [sl]
   17944:	b	174b0 <__assert_fail@plt+0x4ba8>
   17948:	ldrb	r3, [r0, #2]
   1794c:	add	lr, r0, #2
   17950:	sub	r3, r3, #48	; 0x30
   17954:	uxtb	r2, r3
   17958:	cmp	r2, #9
   1795c:	bhi	17774 <__assert_fail@plt+0x4e6c>
   17960:	ldr	r5, [pc, #260]	; 17a6c <__assert_fail@plt+0x5164>
   17964:	b	17978 <__assert_fail@plt+0x5070>
   17968:	add	r3, r3, r3, lsl #2
   1796c:	add	r3, r2, r3, lsl #1
   17970:	cmp	r3, r5
   17974:	bhi	17774 <__assert_fail@plt+0x4e6c>
   17978:	ldrb	r1, [lr, #1]!
   1797c:	sub	r2, r1, #48	; 0x30
   17980:	uxtb	ip, r2
   17984:	cmp	ip, #9
   17988:	bls	17968 <__assert_fail@plt+0x5060>
   1798c:	cmp	r1, #0
   17990:	clz	r2, r3
   17994:	lsr	r2, r2, #5
   17998:	moveq	r1, r2
   1799c:	movne	r1, #1
   179a0:	cmp	r1, #0
   179a4:	bne	17774 <__assert_fail@plt+0x4e6c>
   179a8:	mov	r2, #10
   179ac:	rev16	r3, r3
   179b0:	strh	r3, [sp, #34]	; 0x22
   179b4:	strh	r2, [sp, #32]
   179b8:	mov	r3, r2
   179bc:	strb	r1, [r0]
   179c0:	str	r1, [sp, #36]	; 0x24
   179c4:	str	r1, [sp, #40]	; 0x28
   179c8:	str	r1, [sp, #44]	; 0x2c
   179cc:	str	r1, [sp, #48]	; 0x30
   179d0:	str	r1, [sp, #52]	; 0x34
   179d4:	str	r1, [sp, #56]	; 0x38
   179d8:	add	r5, sp, #32
   179dc:	add	r2, sp, #40	; 0x28
   179e0:	mov	fp, #28
   179e4:	b	176f4 <__assert_fail@plt+0x4dec>
   179e8:	mov	r0, #2
   179ec:	bl	1253c <_gpgrt_get_std_stream@plt>
   179f0:	bl	128c0 <gpgrt_fileno@plt>
   179f4:	bl	12878 <isatty@plt>
   179f8:	cmp	r0, #0
   179fc:	beq	178c4 <__assert_fail@plt+0x4fbc>
   17a00:	mov	r0, #2
   17a04:	bl	1253c <_gpgrt_get_std_stream@plt>
   17a08:	mov	fp, r0
   17a0c:	bl	12620 <__errno_location@plt>
   17a10:	ldr	r0, [r0]
   17a14:	bl	124dc <strerror@plt>
   17a18:	mov	r3, sl
   17a1c:	mov	r2, r6
   17a20:	ldr	r1, [pc, #88]	; 17a80 <__assert_fail@plt+0x5178>
   17a24:	str	r0, [sp]
   17a28:	mov	r0, fp
   17a2c:	bl	1283c <gpgrt_fprintf@plt>
   17a30:	b	178c4 <__assert_fail@plt+0x4fbc>
   17a34:	bl	122fc <__stack_chk_fail@plt>
   17a38:	mov	r0, sl
   17a3c:	str	r3, [sp, #12]
   17a40:	ldr	sl, [pc, #44]	; 17a74 <__assert_fail@plt+0x516c>
   17a44:	bl	122a8 <gcry_free@plt>
   17a48:	ldr	r3, [sp, #12]
   17a4c:	b	177bc <__assert_fail@plt+0x4eb4>
   17a50:	udf	#0
   17a54:	andeq	r4, r3, r8, lsr fp
   17a58:	andeq	r5, r3, ip, ror #2
   17a5c:	andeq	r5, r3, r0, asr #5
   17a60:	andeq	r2, r2, r8, asr #14
   17a64:	andeq	r2, r2, r4, lsr #12
   17a68:	andeq	r2, r2, r0, lsr r6
   17a6c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   17a70:	andeq	r2, r2, r4, ror #14
   17a74:	andeq	r3, r2, r8, lsl #21
   17a78:	strdeq	r2, [r2], -r4
   17a7c:	strdeq	r2, [r2], -ip
   17a80:	andeq	r2, r2, r8, lsr #14
   17a84:	ldr	r3, [pc, #16]	; 17a9c <__assert_fail@plt+0x5194>
   17a88:	cmp	r0, #0
   17a8c:	movne	r2, #0
   17a90:	ldr	r0, [r3, #116]	; 0x74
   17a94:	strne	r2, [r3, #116]	; 0x74
   17a98:	bx	lr
   17a9c:	andeq	r5, r3, r0, asr #5
   17aa0:	ldr	r2, [pc, #12]	; 17ab4 <__assert_fail@plt+0x51ac>
   17aa4:	ldr	r3, [r2, #116]	; 0x74
   17aa8:	add	r3, r3, #1
   17aac:	str	r3, [r2, #116]	; 0x74
   17ab0:	bx	lr
   17ab4:	andeq	r5, r3, r0, asr #5
   17ab8:	ldr	r3, [pc, #12]	; 17acc <__assert_fail@plt+0x51c4>
   17abc:	cmp	r0, #0
   17ac0:	mvn	r1, #0
   17ac4:	moveq	r0, r3
   17ac8:	b	16afc <__assert_fail@plt+0x41f4>
   17acc:	andeq	r2, r2, r0, lsr #12
   17ad0:	ldr	r3, [pc, #4]	; 17adc <__assert_fail@plt+0x51d4>
   17ad4:	str	r0, [r3, #108]	; 0x6c
   17ad8:	bx	lr
   17adc:	andeq	r5, r3, r0, asr #5
   17ae0:	ldr	r3, [pc, #4]	; 17aec <__assert_fail@plt+0x51e4>
   17ae4:	str	r0, [r3, #104]	; 0x68
   17ae8:	bx	lr
   17aec:	andeq	r5, r3, r0, asr #5
   17af0:	cmp	r0, #0
   17af4:	push	{r4, r5, r6, lr}
   17af8:	mov	r4, r1
   17afc:	ldr	r5, [pc, #60]	; 17b40 <__assert_fail@plt+0x5238>
   17b00:	beq	17b1c <__assert_fail@plt+0x5214>
   17b04:	mov	r1, r0
   17b08:	mov	r2, #79	; 0x4f
   17b0c:	add	r0, r5, #20
   17b10:	bl	12674 <strncpy@plt>
   17b14:	mov	r3, #0
   17b18:	strb	r3, [r5, #99]	; 0x63
   17b1c:	and	r1, r4, #1
   17b20:	and	r2, r4, #2
   17b24:	and	r3, r4, #4
   17b28:	and	r4, r4, #256	; 0x100
   17b2c:	str	r1, [r5, #16]
   17b30:	str	r2, [r5, #12]
   17b34:	str	r3, [r5, #100]	; 0x64
   17b38:	str	r4, [r5, #112]	; 0x70
   17b3c:	pop	{r4, r5, r6, pc}
   17b40:	andeq	r5, r3, r0, asr #5
   17b44:	cmp	r0, #0
   17b48:	beq	17b98 <__assert_fail@plt+0x5290>
   17b4c:	ldr	r2, [pc, #76]	; 17ba0 <__assert_fail@plt+0x5298>
   17b50:	ldr	r3, [r2, #16]
   17b54:	ldr	r1, [r2, #12]
   17b58:	adds	r3, r3, #0
   17b5c:	movne	r3, #1
   17b60:	cmp	r1, #0
   17b64:	str	r3, [r0]
   17b68:	orrne	r3, r3, #2
   17b6c:	strne	r3, [r0]
   17b70:	ldr	r3, [r2, #100]	; 0x64
   17b74:	cmp	r3, #0
   17b78:	ldrne	r3, [r0]
   17b7c:	orrne	r3, r3, #4
   17b80:	strne	r3, [r0]
   17b84:	ldr	r3, [r2, #112]	; 0x70
   17b88:	cmp	r3, #0
   17b8c:	ldrne	r3, [r0]
   17b90:	orrne	r3, r3, #256	; 0x100
   17b94:	strne	r3, [r0]
   17b98:	ldr	r0, [pc, #4]	; 17ba4 <__assert_fail@plt+0x529c>
   17b9c:	bx	lr
   17ba0:	andeq	r5, r3, r0, asr #5
   17ba4:	ldrdeq	r5, [r3], -r4
   17ba8:	ldr	r3, [pc, #88]	; 17c08 <__assert_fail@plt+0x5300>
   17bac:	push	{r4, lr}
   17bb0:	mov	r4, r0
   17bb4:	ldr	r0, [r3]
   17bb8:	cmp	r0, #0
   17bbc:	beq	17be0 <__assert_fail@plt+0x52d8>
   17bc0:	bl	128c0 <gpgrt_fileno@plt>
   17bc4:	cmn	r0, #1
   17bc8:	sub	r3, r0, r4
   17bcc:	clz	r3, r3
   17bd0:	lsr	r3, r3, #5
   17bd4:	moveq	r3, #0
   17bd8:	cmp	r3, #0
   17bdc:	bne	17c00 <__assert_fail@plt+0x52f8>
   17be0:	ldr	r3, [pc, #36]	; 17c0c <__assert_fail@plt+0x5304>
   17be4:	ldr	r3, [r3]
   17be8:	cmn	r3, #1
   17bec:	sub	r0, r3, r4
   17bf0:	clz	r0, r0
   17bf4:	lsr	r0, r0, #5
   17bf8:	moveq	r0, #0
   17bfc:	pop	{r4, pc}
   17c00:	mov	r0, #1
   17c04:	pop	{r4, pc}
   17c08:	andeq	r5, r3, r0, asr #5
   17c0c:	andeq	r5, r3, ip, ror #2
   17c10:	ldr	r3, [pc, #20]	; 17c2c <__assert_fail@plt+0x5324>
   17c14:	ldr	r0, [r3]
   17c18:	cmp	r0, #0
   17c1c:	beq	17c24 <__assert_fail@plt+0x531c>
   17c20:	b	128c0 <gpgrt_fileno@plt>
   17c24:	mvn	r0, #0
   17c28:	bx	lr
   17c2c:	andeq	r5, r3, r0, asr #5
   17c30:	push	{r4, lr}
   17c34:	ldr	r4, [pc, #52]	; 17c70 <__assert_fail@plt+0x5368>
   17c38:	ldr	r0, [r4]
   17c3c:	cmp	r0, #0
   17c40:	popne	{r4, pc}
   17c44:	ldr	r0, [pc, #40]	; 17c74 <__assert_fail@plt+0x536c>
   17c48:	mvn	r1, #0
   17c4c:	bl	16afc <__assert_fail@plt+0x41f4>
   17c50:	ldr	r0, [r4]
   17c54:	cmp	r0, #0
   17c58:	popne	{r4, pc}
   17c5c:	ldr	r3, [pc, #20]	; 17c78 <__assert_fail@plt+0x5370>
   17c60:	mov	r2, #672	; 0x2a0
   17c64:	ldr	r1, [pc, #16]	; 17c7c <__assert_fail@plt+0x5374>
   17c68:	ldr	r0, [pc, #16]	; 17c80 <__assert_fail@plt+0x5378>
   17c6c:	bl	12908 <__assert_fail@plt>
   17c70:	andeq	r5, r3, r0, asr #5
   17c74:	andeq	r2, r2, r0, lsr #12
   17c78:	andeq	r2, r2, r0, lsl r6
   17c7c:			; <UNDEFINED> instruction: 0x000226b8
   17c80:	ldrdeq	r2, [r2], -r0
   17c84:	push	{r1, r2, r3}
   17c88:	mov	r3, #0
   17c8c:	push	{r4, lr}
   17c90:	sub	sp, sp, #20
   17c94:	ldr	r4, [pc, #68]	; 17ce0 <__assert_fail@plt+0x53d8>
   17c98:	ldr	r2, [sp, #28]
   17c9c:	add	ip, sp, #32
   17ca0:	ldr	r1, [r4]
   17ca4:	stm	sp, {r2, ip}
   17ca8:	str	r1, [sp, #12]
   17cac:	mov	r2, r3
   17cb0:	mov	r1, r3
   17cb4:	str	ip, [sp, #8]
   17cb8:	bl	17018 <__assert_fail@plt+0x4710>
   17cbc:	ldr	r2, [sp, #12]
   17cc0:	ldr	r3, [r4]
   17cc4:	cmp	r2, r3
   17cc8:	bne	17cdc <__assert_fail@plt+0x53d4>
   17ccc:	add	sp, sp, #20
   17cd0:	pop	{r4, lr}
   17cd4:	add	sp, sp, #12
   17cd8:	bx	lr
   17cdc:	bl	122fc <__stack_chk_fail@plt>
   17ce0:	andeq	r4, r3, r8, lsr fp
   17ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ce8:	sub	sp, sp, #12
   17cec:	mov	r3, #0
   17cf0:	stm	sp, {r1, r2}
   17cf4:	mov	r2, r3
   17cf8:	mov	r1, r3
   17cfc:	bl	17018 <__assert_fail@plt+0x4710>
   17d00:	add	sp, sp, #12
   17d04:	pop	{pc}		; (ldr pc, [sp], #4)
   17d08:	push	{lr}		; (str lr, [sp, #-4]!)
   17d0c:	sub	sp, sp, #12
   17d10:	str	r2, [sp]
   17d14:	mov	r2, #0
   17d18:	str	r3, [sp, #4]
   17d1c:	mov	r3, r1
   17d20:	mov	r1, r2
   17d24:	bl	17018 <__assert_fail@plt+0x4710>
   17d28:	add	sp, sp, #12
   17d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d30:	b	173c8 <__assert_fail@plt+0x4ac0>
   17d34:	push	{r0, r1, r2, r3}
   17d38:	mov	r3, #0
   17d3c:	push	{r4, lr}
   17d40:	sub	sp, sp, #16
   17d44:	ldr	r4, [pc, #72]	; 17d94 <__assert_fail@plt+0x548c>
   17d48:	ldr	r2, [sp, #24]
   17d4c:	add	ip, sp, #28
   17d50:	ldr	r0, [r4]
   17d54:	stm	sp, {r2, ip}
   17d58:	mov	r1, r3
   17d5c:	mov	r2, r3
   17d60:	str	r0, [sp, #12]
   17d64:	mov	r0, #2
   17d68:	str	ip, [sp, #8]
   17d6c:	bl	17018 <__assert_fail@plt+0x4710>
   17d70:	ldr	r2, [sp, #12]
   17d74:	ldr	r3, [r4]
   17d78:	cmp	r2, r3
   17d7c:	bne	17d90 <__assert_fail@plt+0x5488>
   17d80:	add	sp, sp, #16
   17d84:	pop	{r4, lr}
   17d88:	add	sp, sp, #16
   17d8c:	bx	lr
   17d90:	bl	122fc <__stack_chk_fail@plt>
   17d94:	andeq	r4, r3, r8, lsr fp
   17d98:	push	{r0, r1, r2, r3}
   17d9c:	mov	r3, #0
   17da0:	push	{r4, lr}
   17da4:	sub	sp, sp, #16
   17da8:	ldr	r4, [pc, #96]	; 17e10 <__assert_fail@plt+0x5508>
   17dac:	ldr	r2, [sp, #24]
   17db0:	add	ip, sp, #28
   17db4:	ldr	r0, [r4]
   17db8:	mov	r1, r3
   17dbc:	stm	sp, {r2, ip}
   17dc0:	str	r0, [sp, #12]
   17dc4:	mov	r2, r3
   17dc8:	mov	r0, #4
   17dcc:	str	ip, [sp, #8]
   17dd0:	bl	17018 <__assert_fail@plt+0x4710>
   17dd4:	ldr	r2, [pc, #56]	; 17e14 <__assert_fail@plt+0x550c>
   17dd8:	ldr	r1, [pc, #56]	; 17e18 <__assert_fail@plt+0x5510>
   17ddc:	ldr	r3, [r2, #116]	; 0x74
   17de0:	cmp	r3, r1
   17de4:	addle	r3, r3, #1
   17de8:	strle	r3, [r2, #116]	; 0x74
   17dec:	ldr	r2, [sp, #12]
   17df0:	ldr	r3, [r4]
   17df4:	cmp	r2, r3
   17df8:	bne	17e0c <__assert_fail@plt+0x5504>
   17dfc:	add	sp, sp, #16
   17e00:	pop	{r4, lr}
   17e04:	add	sp, sp, #16
   17e08:	bx	lr
   17e0c:	bl	122fc <__stack_chk_fail@plt>
   17e10:	andeq	r4, r3, r8, lsr fp
   17e14:	andeq	r5, r3, r0, asr #5
   17e18:	andeq	r7, r0, pc, lsr #10
   17e1c:	push	{r0, r1, r2, r3}
   17e20:	mov	r0, #5
   17e24:	push	{lr}		; (str lr, [sp, #-4]!)
   17e28:	sub	sp, sp, #20
   17e2c:	ldr	r3, [pc, #40]	; 17e5c <__assert_fail@plt+0x5554>
   17e30:	ldr	r2, [sp, #24]
   17e34:	add	ip, sp, #28
   17e38:	ldr	lr, [r3]
   17e3c:	mov	r3, #0
   17e40:	stm	sp, {r2, ip}
   17e44:	mov	r1, r3
   17e48:	mov	r2, r3
   17e4c:	str	lr, [sp, #12]
   17e50:	str	ip, [sp, #8]
   17e54:	bl	17018 <__assert_fail@plt+0x4710>
   17e58:	bl	128a8 <abort@plt>
   17e5c:	andeq	r4, r3, r8, lsr fp
   17e60:	push	{r4, lr}
   17e64:	mov	r4, r0
   17e68:	bl	1902c <__assert_fail@plt+0x6724>
   17e6c:	cmp	r0, #0
   17e70:	beq	17e84 <__assert_fail@plt+0x557c>
   17e74:	mov	r1, r4
   17e78:	mov	r0, #0
   17e7c:	pop	{r4, lr}
   17e80:	b	16afc <__assert_fail@plt+0x41f4>
   17e84:	bl	12620 <__errno_location@plt>
   17e88:	ldr	r0, [r0]
   17e8c:	bl	124dc <strerror@plt>
   17e90:	mov	r1, r0
   17e94:	ldr	r0, [pc]	; 17e9c <__assert_fail@plt+0x5594>
   17e98:	bl	17e1c <__assert_fail@plt+0x5514>
   17e9c:	muleq	r2, r0, r7
   17ea0:	push	{r0, r1, r2, r3}
   17ea4:	mov	r0, #6
   17ea8:	push	{lr}		; (str lr, [sp, #-4]!)
   17eac:	sub	sp, sp, #20
   17eb0:	ldr	r3, [pc, #40]	; 17ee0 <__assert_fail@plt+0x55d8>
   17eb4:	ldr	r2, [sp, #24]
   17eb8:	add	ip, sp, #28
   17ebc:	ldr	lr, [r3]
   17ec0:	mov	r3, #0
   17ec4:	stm	sp, {r2, ip}
   17ec8:	mov	r1, r3
   17ecc:	mov	r2, r3
   17ed0:	str	lr, [sp, #12]
   17ed4:	str	ip, [sp, #8]
   17ed8:	bl	17018 <__assert_fail@plt+0x4710>
   17edc:	bl	128a8 <abort@plt>
   17ee0:	andeq	r4, r3, r8, lsr fp
   17ee4:	push	{r0, r1, r2, r3}
   17ee8:	mov	r3, #0
   17eec:	push	{r4, lr}
   17ef0:	sub	sp, sp, #16
   17ef4:	ldr	r4, [pc, #72]	; 17f44 <__assert_fail@plt+0x563c>
   17ef8:	ldr	r2, [sp, #24]
   17efc:	add	ip, sp, #28
   17f00:	ldr	r0, [r4]
   17f04:	stm	sp, {r2, ip}
   17f08:	mov	r1, r3
   17f0c:	mov	r2, r3
   17f10:	str	r0, [sp, #12]
   17f14:	mov	r0, #7
   17f18:	str	ip, [sp, #8]
   17f1c:	bl	17018 <__assert_fail@plt+0x4710>
   17f20:	ldr	r2, [sp, #12]
   17f24:	ldr	r3, [r4]
   17f28:	cmp	r2, r3
   17f2c:	bne	17f40 <__assert_fail@plt+0x5638>
   17f30:	add	sp, sp, #16
   17f34:	pop	{r4, lr}
   17f38:	add	sp, sp, #16
   17f3c:	bx	lr
   17f40:	bl	122fc <__stack_chk_fail@plt>
   17f44:	andeq	r4, r3, r8, lsr fp
   17f48:	push	{r1, r2, r3}
   17f4c:	mov	r3, #0
   17f50:	push	{r4, lr}
   17f54:	sub	sp, sp, #20
   17f58:	ldr	r4, [pc, #72]	; 17fa8 <__assert_fail@plt+0x56a0>
   17f5c:	ldr	r1, [sp, #28]
   17f60:	add	ip, sp, #32
   17f64:	ldr	lr, [r4]
   17f68:	mov	r2, r0
   17f6c:	stm	sp, {r1, ip}
   17f70:	mov	r0, #7
   17f74:	mov	r1, r3
   17f78:	str	lr, [sp, #12]
   17f7c:	str	ip, [sp, #8]
   17f80:	bl	17018 <__assert_fail@plt+0x4710>
   17f84:	ldr	r2, [sp, #12]
   17f88:	ldr	r3, [r4]
   17f8c:	cmp	r2, r3
   17f90:	bne	17fa4 <__assert_fail@plt+0x569c>
   17f94:	add	sp, sp, #20
   17f98:	pop	{r4, lr}
   17f9c:	add	sp, sp, #12
   17fa0:	bx	lr
   17fa4:	bl	122fc <__stack_chk_fail@plt>
   17fa8:	andeq	r4, r3, r8, lsr fp
   17fac:	push	{r0, r1, r2, r3}
   17fb0:	mov	r3, #0
   17fb4:	push	{r4, lr}
   17fb8:	sub	sp, sp, #16
   17fbc:	ldr	r4, [pc, #80]	; 18014 <__assert_fail@plt+0x570c>
   17fc0:	ldr	r0, [sp, #24]
   17fc4:	add	ip, sp, #28
   17fc8:	ldr	r1, [r4]
   17fcc:	str	r0, [sp]
   17fd0:	subs	r0, r0, r3
   17fd4:	mov	r2, r3
   17fd8:	movne	r0, #1
   17fdc:	str	r1, [sp, #12]
   17fe0:	str	ip, [sp, #4]
   17fe4:	mov	r1, r3
   17fe8:	str	ip, [sp, #8]
   17fec:	bl	17018 <__assert_fail@plt+0x4710>
   17ff0:	ldr	r2, [sp, #12]
   17ff4:	ldr	r3, [r4]
   17ff8:	cmp	r2, r3
   17ffc:	bne	18010 <__assert_fail@plt+0x5708>
   18000:	add	sp, sp, #16
   18004:	pop	{r4, lr}
   18008:	add	sp, sp, #16
   1800c:	bx	lr
   18010:	bl	122fc <__stack_chk_fail@plt>
   18014:	andeq	r4, r3, r8, lsr fp
   18018:	mov	r1, #0
   1801c:	mov	r0, #1
   18020:	b	173c8 <__assert_fail@plt+0x4ac0>
   18024:	push	{r4, r5, r6, r7, r8, lr}
   18028:	subs	r7, r0, #0
   1802c:	mov	r4, r1
   18030:	mov	r5, r2
   18034:	beq	180b4 <__assert_fail@plt+0x57ac>
   18038:	ldrb	r3, [r7]
   1803c:	cmp	r3, #0
   18040:	bne	1809c <__assert_fail@plt+0x5794>
   18044:	cmp	r5, #0
   18048:	bne	18058 <__assert_fail@plt+0x5750>
   1804c:	ldr	r0, [pc, #132]	; 180d8 <__assert_fail@plt+0x57d0>
   18050:	pop	{r4, r5, r6, r7, r8, lr}
   18054:	b	17fac <__assert_fail@plt+0x56a4>
   18058:	ldr	r0, [pc, #124]	; 180dc <__assert_fail@plt+0x57d4>
   1805c:	ldrb	r1, [r4], #1
   18060:	bl	17fac <__assert_fail@plt+0x56a4>
   18064:	cmp	r5, #1
   18068:	sub	r5, r5, #2
   1806c:	beq	1804c <__assert_fail@plt+0x5744>
   18070:	add	r5, r5, #1
   18074:	ldr	r6, [pc, #100]	; 180e0 <__assert_fail@plt+0x57d8>
   18078:	add	r5, r4, r5
   1807c:	ldrb	r1, [r4], #1
   18080:	mov	r0, r6
   18084:	bl	17fac <__assert_fail@plt+0x56a4>
   18088:	cmp	r4, r5
   1808c:	bne	1807c <__assert_fail@plt+0x5774>
   18090:	cmp	r7, #0
   18094:	popeq	{r4, r5, r6, r7, r8, pc}
   18098:	b	1804c <__assert_fail@plt+0x5744>
   1809c:	mov	r1, r7
   180a0:	ldr	r0, [pc, #60]	; 180e4 <__assert_fail@plt+0x57dc>
   180a4:	bl	17ee4 <__assert_fail@plt+0x55dc>
   180a8:	cmp	r5, #0
   180ac:	beq	1804c <__assert_fail@plt+0x5744>
   180b0:	b	18058 <__assert_fail@plt+0x5750>
   180b4:	cmp	r2, #0
   180b8:	popeq	{r4, r5, r6, r7, r8, pc}
   180bc:	ldr	r0, [pc, #24]	; 180dc <__assert_fail@plt+0x57d4>
   180c0:	ldrb	r1, [r4], #1
   180c4:	bl	17fac <__assert_fail@plt+0x56a4>
   180c8:	cmp	r5, #1
   180cc:	sub	r5, r5, #2
   180d0:	bne	18070 <__assert_fail@plt+0x5768>
   180d4:	pop	{r4, r5, r6, r7, r8, pc}
   180d8:	andeq	r1, r2, r0, asr #22
   180dc:			; <UNDEFINED> instruction: 0x000227b8
   180e0:			; <UNDEFINED> instruction: 0x000227b0
   180e4:	andeq	r2, r2, ip, lsr #15
   180e8:	mov	r1, r0
   180ec:	ldr	r0, [pc]	; 180f4 <__assert_fail@plt+0x57ec>
   180f0:	b	17ee4 <__assert_fail@plt+0x55dc>
   180f4:	andeq	r2, r2, r0, asr #15
   180f8:	push	{lr}		; (str lr, [sp, #-4]!)
   180fc:	sub	sp, sp, #12
   18100:	mov	r3, r1
   18104:	str	r2, [sp]
   18108:	ldr	r1, [pc, #12]	; 1811c <__assert_fail@plt+0x5814>
   1810c:	mov	r2, r0
   18110:	mov	r0, #6
   18114:	bl	17c84 <__assert_fail@plt+0x537c>
   18118:	bl	128a8 <abort@plt>
   1811c:	andeq	r2, r2, r0, ror #15
   18120:	push	{lr}		; (str lr, [sp, #-4]!)
   18124:	sub	sp, sp, #12
   18128:	stm	sp, {r1, r2}
   1812c:	mov	r2, r0
   18130:	ldr	r1, [pc, #8]	; 18140 <__assert_fail@plt+0x5838>
   18134:	mov	r0, #6
   18138:	bl	17c84 <__assert_fail@plt+0x537c>
   1813c:	bl	128a8 <abort@plt>
   18140:	andeq	r2, r2, r0, lsl #16
   18144:	push	{r4, r5, r6, lr}
   18148:	ldr	r5, [pc, #44]	; 1817c <__assert_fail@plt+0x5874>
   1814c:	ldr	r3, [r5]
   18150:	cmp	r3, #0
   18154:	popeq	{r4, r5, r6, pc}
   18158:	ldr	r4, [r3]
   1815c:	ldr	r3, [r3, #4]
   18160:	blx	r3
   18164:	ldr	r0, [r5]
   18168:	bl	12230 <free@plt>
   1816c:	subs	r3, r4, #0
   18170:	str	r4, [r5]
   18174:	bne	18158 <__assert_fail@plt+0x5850>
   18178:	pop	{r4, r5, r6, pc}
   1817c:	andeq	r5, r3, r8, lsr r3
   18180:	sub	r2, r0, #1
   18184:	cmp	r2, #1
   18188:	bhi	181cc <__assert_fail@plt+0x58c4>
   1818c:	cmp	r1, #0
   18190:	push	{r4, lr}
   18194:	mov	r4, r1
   18198:	beq	181b8 <__assert_fail@plt+0x58b0>
   1819c:	cmp	r0, #1
   181a0:	movne	r0, #2
   181a4:	bl	1253c <_gpgrt_get_std_stream@plt>
   181a8:	mov	r1, r0
   181ac:	mov	r0, r4
   181b0:	pop	{r4, lr}
   181b4:	b	126e0 <gpgrt_fputs@plt>
   181b8:	cmp	r0, #1
   181bc:	movne	r0, #2
   181c0:	bl	1253c <_gpgrt_get_std_stream@plt>
   181c4:	pop	{r4, lr}
   181c8:	b	1235c <gpgrt_fflush@plt>
   181cc:	mvn	r0, #0
   181d0:	bx	lr
   181d4:	push	{r4, r5, r6, lr}
   181d8:	ldr	r6, [pc, #84]	; 18234 <__assert_fail@plt+0x592c>
   181dc:	ldr	r5, [r6]
   181e0:	cmp	r5, #0
   181e4:	beq	18214 <__assert_fail@plt+0x590c>
   181e8:	ldr	r3, [r5, #4]
   181ec:	cmp	r0, r3
   181f0:	popeq	{r4, r5, r6, pc}
   181f4:	mov	r3, r5
   181f8:	b	18208 <__assert_fail@plt+0x5900>
   181fc:	ldr	r2, [r3, #4]
   18200:	cmp	r2, r0
   18204:	popeq	{r4, r5, r6, pc}
   18208:	ldr	r3, [r3]
   1820c:	cmp	r3, #0
   18210:	bne	181fc <__assert_fail@plt+0x58f4>
   18214:	mov	r4, r0
   18218:	mov	r0, #8
   1821c:	bl	124b8 <malloc@plt>
   18220:	cmp	r0, #0
   18224:	strne	r0, [r6]
   18228:	strne	r4, [r0, #4]
   1822c:	strne	r5, [r0]
   18230:	pop	{r4, r5, r6, pc}
   18234:	andeq	r5, r3, r8, lsr r3
   18238:	bx	lr
   1823c:	ldr	r3, [pc, #136]	; 182cc <__assert_fail@plt+0x59c4>
   18240:	push	{r4, r5, r6, lr}
   18244:	str	r0, [r3, #4]
   18248:	ldr	r0, [pc, #128]	; 182d0 <__assert_fail@plt+0x59c8>
   1824c:	bl	21838 <__assert_fail@plt+0xef30>
   18250:	mov	r0, #0
   18254:	bl	1fc18 <__assert_fail@plt+0xd310>
   18258:	ldr	r0, [pc, #116]	; 182d4 <__assert_fail@plt+0x59cc>
   1825c:	bl	123ec <gcry_check_version@plt>
   18260:	subs	r4, r0, #0
   18264:	beq	182a0 <__assert_fail@plt+0x5998>
   18268:	bl	127dc <gpg_err_init@plt>
   1826c:	ldr	r0, [pc, #100]	; 182d8 <__assert_fail@plt+0x59d0>
   18270:	bl	12308 <gpgrt_set_alloc_func@plt>
   18274:	mov	r0, #0
   18278:	bl	1253c <_gpgrt_get_std_stream@plt>
   1827c:	mov	r0, #1
   18280:	bl	1253c <_gpgrt_get_std_stream@plt>
   18284:	mov	r0, #2
   18288:	bl	1253c <_gpgrt_get_std_stream@plt>
   1828c:	ldr	r0, [pc, #72]	; 182dc <__assert_fail@plt+0x59d4>
   18290:	bl	14ca4 <__assert_fail@plt+0x239c>
   18294:	ldr	r0, [pc, #68]	; 182e0 <__assert_fail@plt+0x59d8>
   18298:	pop	{r4, r5, r6, lr}
   1829c:	b	17ad0 <__assert_fail@plt+0x51c8>
   182a0:	mov	r2, #5
   182a4:	ldr	r1, [pc, #56]	; 182e4 <__assert_fail@plt+0x59dc>
   182a8:	bl	122f0 <dcgettext@plt>
   182ac:	mov	r5, r0
   182b0:	mov	r0, r4
   182b4:	bl	123ec <gcry_check_version@plt>
   182b8:	ldr	r2, [pc, #20]	; 182d4 <__assert_fail@plt+0x59cc>
   182bc:	ldr	r1, [pc, #36]	; 182e8 <__assert_fail@plt+0x59e0>
   182c0:	mov	r3, r0
   182c4:	mov	r0, r5
   182c8:	bl	17e1c <__assert_fail@plt+0x5514>
   182cc:	andeq	r5, r3, r8, lsr r3
   182d0:	andeq	r8, r1, r4, asr #2
   182d4:	andeq	r2, r2, r8, lsr #16
   182d8:	andeq	r2, r1, r8, asr #13
   182dc:	andeq	r8, r1, r0, lsl #3
   182e0:	ldrdeq	r9, [r1], -r8
   182e4:	andeq	r2, r2, r0, lsr r8
   182e8:	andeq	r2, r2, r4, asr r8
   182ec:	andeq	r0, r0, r0
   182f0:	ldrb	r3, [r0, #1]
   182f4:	mov	r2, r0
   182f8:	cmp	r3, #0
   182fc:	beq	183a8 <__assert_fail@plt+0x5aa0>
   18300:	ldrb	r1, [r0, #2]
   18304:	cmp	r3, #114	; 0x72
   18308:	movne	r0, #0
   1830c:	moveq	r0, #256	; 0x100
   18310:	cmp	r1, #0
   18314:	bxeq	lr
   18318:	ldrb	r3, [r2, #3]
   1831c:	cmp	r1, #119	; 0x77
   18320:	orreq	r0, r0, #128	; 0x80
   18324:	cmp	r3, #0
   18328:	bxeq	lr
   1832c:	cmp	r3, #120	; 0x78
   18330:	ldrb	r3, [r2, #4]
   18334:	orreq	r0, r0, #64	; 0x40
   18338:	cmp	r3, #0
   1833c:	bxeq	lr
   18340:	cmp	r3, #114	; 0x72
   18344:	ldrb	r3, [r2, #5]
   18348:	orreq	r0, r0, #32
   1834c:	cmp	r3, #0
   18350:	bxeq	lr
   18354:	cmp	r3, #119	; 0x77
   18358:	ldrb	r3, [r2, #6]
   1835c:	orreq	r0, r0, #16
   18360:	cmp	r3, #0
   18364:	bxeq	lr
   18368:	cmp	r3, #120	; 0x78
   1836c:	ldrb	r3, [r2, #7]
   18370:	orreq	r0, r0, #8
   18374:	cmp	r3, #0
   18378:	bxeq	lr
   1837c:	cmp	r3, #114	; 0x72
   18380:	ldrb	r3, [r2, #8]
   18384:	orreq	r0, r0, #4
   18388:	cmp	r3, #0
   1838c:	bxeq	lr
   18390:	cmp	r3, #119	; 0x77
   18394:	ldrb	r3, [r2, #9]
   18398:	orreq	r0, r0, #2
   1839c:	cmp	r3, #120	; 0x78
   183a0:	orreq	r0, r0, #1
   183a4:	bx	lr
   183a8:	mov	r0, r3
   183ac:	bx	lr
   183b0:	bx	lr
   183b4:	push	{r4, r5, lr}
   183b8:	sub	sp, sp, #28
   183bc:	ldr	r4, [pc, #160]	; 18464 <__assert_fail@plt+0x5b5c>
   183c0:	mov	r1, sp
   183c4:	mov	r0, #4
   183c8:	ldr	r3, [r4]
   183cc:	str	r3, [sp, #20]
   183d0:	bl	12344 <getrlimit64@plt>
   183d4:	mov	r1, sp
   183d8:	cmp	r0, #0
   183dc:	movne	r2, #0
   183e0:	movne	r3, #0
   183e4:	mov	r0, #4
   183e8:	strdne	r2, [sp, #8]
   183ec:	mov	r2, #0
   183f0:	mov	r3, #0
   183f4:	strd	r2, [sp]
   183f8:	bl	121e8 <setrlimit64@plt>
   183fc:	cmp	r0, #0
   18400:	beq	18420 <__assert_fail@plt+0x5b18>
   18404:	bl	12620 <__errno_location@plt>
   18408:	ldr	r3, [r0]
   1840c:	mov	r5, r0
   18410:	sub	r3, r3, #22
   18414:	bics	r3, r3, #16
   18418:	moveq	r0, #1
   1841c:	bne	1843c <__assert_fail@plt+0x5b34>
   18420:	ldr	r2, [sp, #20]
   18424:	ldr	r3, [r4]
   18428:	cmp	r2, r3
   1842c:	bne	18438 <__assert_fail@plt+0x5b30>
   18430:	add	sp, sp, #28
   18434:	pop	{r4, r5, pc}
   18438:	bl	122fc <__stack_chk_fail@plt>
   1843c:	ldr	r1, [pc, #36]	; 18468 <__assert_fail@plt+0x5b60>
   18440:	mov	r2, #5
   18444:	mov	r0, #0
   18448:	bl	122f0 <dcgettext@plt>
   1844c:	mov	r4, r0
   18450:	ldr	r0, [r5]
   18454:	bl	124dc <strerror@plt>
   18458:	mov	r1, r0
   1845c:	mov	r0, r4
   18460:	bl	17e1c <__assert_fail@plt+0x5514>
   18464:	andeq	r4, r3, r8, lsr fp
   18468:	andeq	r2, r2, r0, lsr #17
   1846c:	push	{r4, lr}
   18470:	sub	sp, sp, #24
   18474:	ldr	r4, [pc, #76]	; 184c8 <__assert_fail@plt+0x5bc0>
   18478:	mov	r1, sp
   1847c:	mov	r0, #4
   18480:	ldr	r3, [r4]
   18484:	str	r3, [sp, #20]
   18488:	bl	12344 <getrlimit64@plt>
   1848c:	cmp	r0, #0
   18490:	bne	184a8 <__assert_fail@plt+0x5ba0>
   18494:	ldrd	r2, [sp, #8]
   18498:	mov	r1, sp
   1849c:	mov	r0, #4
   184a0:	strd	r2, [sp]
   184a4:	bl	121e8 <setrlimit64@plt>
   184a8:	ldr	r2, [sp, #20]
   184ac:	ldr	r3, [r4]
   184b0:	mov	r0, #1
   184b4:	cmp	r2, r3
   184b8:	bne	184c4 <__assert_fail@plt+0x5bbc>
   184bc:	add	sp, sp, #24
   184c0:	pop	{r4, pc}
   184c4:	bl	122fc <__stack_chk_fail@plt>
   184c8:	andeq	r4, r3, r8, lsr fp
   184cc:	ldr	r3, [pc, #8]	; 184dc <__assert_fail@plt+0x5bd4>
   184d0:	mov	r2, #1
   184d4:	str	r2, [r3]
   184d8:	bx	lr
   184dc:	andeq	r5, r3, r0, asr #6
   184e0:	push	{r4, r5, r6, lr}
   184e4:	mov	r5, r0
   184e8:	ldr	r4, [pc, #48]	; 18520 <__assert_fail@plt+0x5c18>
   184ec:	ldr	r3, [r4, #4]
   184f0:	cmp	r3, #0
   184f4:	beq	18508 <__assert_fail@plt+0x5c00>
   184f8:	mov	r3, #8
   184fc:	str	r3, [r5]
   18500:	ldr	r0, [pc, #28]	; 18524 <__assert_fail@plt+0x5c1c>
   18504:	pop	{r4, r5, r6, pc}
   18508:	mov	r1, #8
   1850c:	add	r0, r4, r1
   18510:	bl	1280c <gcry_create_nonce@plt>
   18514:	mov	r3, #1
   18518:	str	r3, [r4, #4]
   1851c:	b	184f8 <__assert_fail@plt+0x5bf0>
   18520:	andeq	r5, r3, r0, asr #6
   18524:	andeq	r5, r3, r8, asr #6
   18528:	push	{r4, lr}
   1852c:	sub	sp, sp, #8
   18530:	ldr	r4, [pc, #48]	; 18568 <__assert_fail@plt+0x5c60>
   18534:	mov	r0, sp
   18538:	mov	r1, #4
   1853c:	ldr	r3, [r4]
   18540:	str	r3, [sp, #4]
   18544:	bl	1280c <gcry_create_nonce@plt>
   18548:	ldr	r2, [sp, #4]
   1854c:	ldr	r3, [r4]
   18550:	ldr	r0, [sp]
   18554:	cmp	r2, r3
   18558:	bne	18564 <__assert_fail@plt+0x5c5c>
   1855c:	add	sp, sp, #8
   18560:	pop	{r4, pc}
   18564:	bl	122fc <__stack_chk_fail@plt>
   18568:	andeq	r4, r3, r8, lsr fp
   1856c:	b	122cc <sleep@plt>
   18570:	push	{r4, r5, r6, lr}
   18574:	sub	sp, sp, #24
   18578:	ldr	r6, [pc, #144]	; 18610 <__assert_fail@plt+0x5d08>
   1857c:	cmp	r0, #0
   18580:	ldr	r3, [r6]
   18584:	str	r3, [sp, #20]
   18588:	beq	185f4 <__assert_fail@plt+0x5cec>
   1858c:	ldr	r3, [pc, #128]	; 18614 <__assert_fail@plt+0x5d0c>
   18590:	add	r5, sp, #12
   18594:	add	r4, sp, #4
   18598:	umull	r2, r3, r3, r0
   1859c:	lsr	r3, r3, #18
   185a0:	str	r3, [sp, #4]
   185a4:	rsb	r2, r3, r3, lsl #5
   185a8:	rsb	r2, r2, r2, lsl #6
   185ac:	add	r3, r3, r2, lsl #3
   185b0:	sub	r0, r0, r3, lsl #6
   185b4:	rsb	r3, r0, r0, lsl #5
   185b8:	add	r0, r0, r3, lsl #2
   185bc:	lsl	r0, r0, #3
   185c0:	str	r0, [sp, #8]
   185c4:	b	185e0 <__assert_fail@plt+0x5cd8>
   185c8:	bl	12620 <__errno_location@plt>
   185cc:	ldr	r3, [r0]
   185d0:	cmp	r3, #4
   185d4:	bne	185f4 <__assert_fail@plt+0x5cec>
   185d8:	ldm	r5, {r0, r1}
   185dc:	stm	r4, {r0, r1}
   185e0:	mov	r1, r5
   185e4:	mov	r0, r4
   185e8:	bl	12248 <nanosleep@plt>
   185ec:	cmp	r0, #0
   185f0:	blt	185c8 <__assert_fail@plt+0x5cc0>
   185f4:	ldr	r2, [sp, #20]
   185f8:	ldr	r3, [r6]
   185fc:	cmp	r2, r3
   18600:	bne	1860c <__assert_fail@plt+0x5d04>
   18604:	add	sp, sp, #24
   18608:	pop	{r4, r5, r6, pc}
   1860c:	bl	122fc <__stack_chk_fail@plt>
   18610:	andeq	r4, r3, r8, lsr fp
   18614:	tstmi	fp, #2096	; 0x830
   18618:	bx	lr
   1861c:	bx	lr
   18620:	ldr	r3, [pc, #184]	; 186e0 <__assert_fail@plt+0x5dd8>
   18624:	ldr	r3, [r3]
   18628:	cmp	r3, #0
   1862c:	cmpne	r0, #0
   18630:	beq	186d8 <__assert_fail@plt+0x5dd0>
   18634:	ldrb	r3, [r0]
   18638:	cmp	r3, #45	; 0x2d
   1863c:	bne	186d8 <__assert_fail@plt+0x5dd0>
   18640:	ldrb	r3, [r0, #1]
   18644:	cmp	r3, #38	; 0x26
   18648:	bne	186d8 <__assert_fail@plt+0x5dd0>
   1864c:	ldrb	r3, [r0, #2]
   18650:	add	r0, r0, #2
   18654:	sub	r1, r3, #48	; 0x30
   18658:	cmp	r1, #9
   1865c:	bhi	186b0 <__assert_fail@plt+0x5da8>
   18660:	mov	ip, r0
   18664:	push	{lr}		; (str lr, [sp, #-4]!)
   18668:	ldrb	r3, [ip, #1]!
   1866c:	sub	lr, r3, #48	; 0x30
   18670:	cmp	lr, #9
   18674:	bls	18668 <__assert_fail@plt+0x5d60>
   18678:	cmp	r3, #0
   1867c:	bne	186a8 <__assert_fail@plt+0x5da0>
   18680:	cmp	r2, #0
   18684:	beq	18698 <__assert_fail@plt+0x5d90>
   18688:	mov	r1, r3
   1868c:	mov	r2, #10
   18690:	pop	{lr}		; (ldr lr, [sp], #4)
   18694:	b	121c4 <strtol@plt>
   18698:	mov	r1, r2
   1869c:	pop	{lr}		; (ldr lr, [sp], #4)
   186a0:	mov	r2, #10
   186a4:	b	121c4 <strtol@plt>
   186a8:	mvn	r0, #0
   186ac:	pop	{pc}		; (ldr pc, [sp], #4)
   186b0:	cmp	r3, #0
   186b4:	bne	186d8 <__assert_fail@plt+0x5dd0>
   186b8:	cmp	r2, #0
   186bc:	beq	186cc <__assert_fail@plt+0x5dc4>
   186c0:	mov	r1, r3
   186c4:	mov	r2, #10
   186c8:	b	121c4 <strtol@plt>
   186cc:	mov	r1, r2
   186d0:	mov	r2, #10
   186d4:	b	121c4 <strtol@plt>
   186d8:	mvn	r0, #0
   186dc:	bx	lr
   186e0:	andeq	r5, r3, r0, asr #6
   186e4:	b	12380 <tmpfile64@plt>
   186e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   186ec:	mov	r1, #1
   186f0:	mov	r8, r0
   186f4:	mov	r0, #0
   186f8:	bl	12704 <fcntl64@plt>
   186fc:	cmn	r0, #1
   18700:	beq	18844 <__assert_fail@plt+0x5f3c>
   18704:	mov	r6, #0
   18708:	mov	r1, #1
   1870c:	mov	r0, r1
   18710:	bl	12704 <fcntl64@plt>
   18714:	cmn	r0, #1
   18718:	beq	18870 <__assert_fail@plt+0x5f68>
   1871c:	mov	r4, #0
   18720:	mov	r1, #1
   18724:	mov	r0, #2
   18728:	bl	12704 <fcntl64@plt>
   1872c:	cmn	r0, #1
   18730:	beq	187a0 <__assert_fail@plt+0x5e98>
   18734:	ldr	r3, [pc, #392]	; 188c4 <__assert_fail@plt+0x5fbc>
   18738:	cmp	r4, #2
   1873c:	cmpne	r6, #2
   18740:	moveq	r7, #1
   18744:	ldr	r5, [r3]
   18748:	movne	r7, #0
   1874c:	mov	r9, #0
   18750:	cmp	r5, #0
   18754:	beq	18794 <__assert_fail@plt+0x5e8c>
   18758:	cmp	r6, #1
   1875c:	beq	187ec <__assert_fail@plt+0x5ee4>
   18760:	cmp	r4, #1
   18764:	beq	18808 <__assert_fail@plt+0x5f00>
   18768:	cmp	r9, #1
   1876c:	beq	18824 <__assert_fail@plt+0x5f1c>
   18770:	cmp	r7, #0
   18774:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18778:	mov	r3, r8
   1877c:	mov	r0, r5
   18780:	ldr	r2, [pc, #320]	; 188c8 <__assert_fail@plt+0x5fc0>
   18784:	mov	r1, #1
   18788:	bl	126a4 <__fprintf_chk@plt>
   1878c:	mov	r0, #3
   18790:	bl	12560 <exit@plt>
   18794:	cmp	r7, #0
   18798:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1879c:	b	1878c <__assert_fail@plt+0x5e84>
   187a0:	bl	12620 <__errno_location@plt>
   187a4:	ldr	r3, [r0]
   187a8:	cmp	r3, #9
   187ac:	bne	18734 <__assert_fail@plt+0x5e2c>
   187b0:	mov	r1, #1
   187b4:	ldr	r0, [pc, #272]	; 188cc <__assert_fail@plt+0x5fc4>
   187b8:	bl	12470 <open64@plt>
   187bc:	cmp	r0, #2
   187c0:	beq	1889c <__assert_fail@plt+0x5f94>
   187c4:	cmp	r4, #0
   187c8:	bne	1878c <__assert_fail@plt+0x5e84>
   187cc:	ldr	r3, [pc, #252]	; 188d0 <__assert_fail@plt+0x5fc8>
   187d0:	ldr	r5, [r3]
   187d4:	cmp	r5, #0
   187d8:	beq	1878c <__assert_fail@plt+0x5e84>
   187dc:	cmp	r6, #1
   187e0:	bne	18778 <__assert_fail@plt+0x5e70>
   187e4:	mov	r7, r6
   187e8:	mov	r9, #2
   187ec:	mov	r3, r8
   187f0:	ldr	r2, [pc, #220]	; 188d4 <__assert_fail@plt+0x5fcc>
   187f4:	mov	r1, #1
   187f8:	mov	r0, r5
   187fc:	bl	126a4 <__fprintf_chk@plt>
   18800:	cmp	r4, #1
   18804:	bne	18768 <__assert_fail@plt+0x5e60>
   18808:	mov	r1, r4
   1880c:	mov	r3, r8
   18810:	ldr	r2, [pc, #192]	; 188d8 <__assert_fail@plt+0x5fd0>
   18814:	mov	r0, r5
   18818:	bl	126a4 <__fprintf_chk@plt>
   1881c:	cmp	r9, #1
   18820:	bne	18770 <__assert_fail@plt+0x5e68>
   18824:	mov	r1, r9
   18828:	mov	r3, r8
   1882c:	ldr	r2, [pc, #168]	; 188dc <__assert_fail@plt+0x5fd4>
   18830:	mov	r0, r5
   18834:	bl	126a4 <__fprintf_chk@plt>
   18838:	cmp	r7, #0
   1883c:	bne	18778 <__assert_fail@plt+0x5e70>
   18840:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18844:	bl	12620 <__errno_location@plt>
   18848:	ldr	r3, [r0]
   1884c:	cmp	r3, #9
   18850:	bne	18704 <__assert_fail@plt+0x5dfc>
   18854:	mov	r1, #0
   18858:	ldr	r0, [pc, #108]	; 188cc <__assert_fail@plt+0x5fc4>
   1885c:	bl	12470 <open64@plt>
   18860:	cmp	r0, #0
   18864:	moveq	r6, #1
   18868:	movne	r6, #2
   1886c:	b	18708 <__assert_fail@plt+0x5e00>
   18870:	bl	12620 <__errno_location@plt>
   18874:	ldr	r3, [r0]
   18878:	cmp	r3, #9
   1887c:	bne	1871c <__assert_fail@plt+0x5e14>
   18880:	mov	r1, #1
   18884:	ldr	r0, [pc, #64]	; 188cc <__assert_fail@plt+0x5fc4>
   18888:	bl	12470 <open64@plt>
   1888c:	cmp	r0, #1
   18890:	mov	r4, r0
   18894:	movne	r4, #2
   18898:	b	18720 <__assert_fail@plt+0x5e18>
   1889c:	cmp	r4, #2
   188a0:	cmpne	r6, #2
   188a4:	moveq	r7, #1
   188a8:	movne	r7, #0
   188ac:	cmp	r4, #0
   188b0:	bne	18794 <__assert_fail@plt+0x5e8c>
   188b4:	ldr	r3, [pc, #20]	; 188d0 <__assert_fail@plt+0x5fc8>
   188b8:	mov	r9, #1
   188bc:	ldr	r5, [r3]
   188c0:	b	18750 <__assert_fail@plt+0x5e48>
   188c4:	andeq	r5, r3, r8, ror r1
   188c8:	andeq	r2, r2, r4, asr #18
   188cc:	andeq	r2, r2, r0, asr #17
   188d0:	andeq	r5, r3, r4, lsl #3
   188d4:	andeq	r2, r2, ip, asr #17
   188d8:	strdeq	r2, [r2], -r4
   188dc:	andeq	r2, r2, ip, lsl r9
   188e0:	subs	r2, r0, #0
   188e4:	bxne	lr
   188e8:	ldr	r1, [pc, #4]	; 188f4 <__assert_fail@plt+0x5fec>
   188ec:	ldr	r0, [pc, #4]	; 188f8 <__assert_fail@plt+0x5ff0>
   188f0:	b	17d34 <__assert_fail@plt+0x542c>
   188f4:	andeq	r2, r2, r4, lsl #19
   188f8:	andeq	r2, r2, r8, lsr #19
   188fc:	b	127e8 <remove@plt>
   18900:	push	{r4, r5, r6, r7, r8, lr}
   18904:	subs	r8, r2, #0
   18908:	mov	r6, r0
   1890c:	mov	r7, r1
   18910:	beq	189c4 <__assert_fail@plt+0x60bc>
   18914:	ldr	r3, [r8]
   18918:	cmp	r3, #0
   1891c:	bne	189bc <__assert_fail@plt+0x60b4>
   18920:	mov	r1, r7
   18924:	mov	r0, r6
   18928:	bl	12518 <rename@plt>
   1892c:	cmp	r0, #0
   18930:	bne	18940 <__assert_fail@plt+0x6038>
   18934:	mov	r4, #0
   18938:	mov	r0, r4
   1893c:	pop	{r4, r5, r6, r7, r8, pc}
   18940:	ldr	r3, [pc, #184]	; 18a00 <__assert_fail@plt+0x60f8>
   18944:	ldr	r4, [r3]
   18948:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1894c:	cmp	r0, #0
   18950:	beq	18934 <__assert_fail@plt+0x602c>
   18954:	ldr	r3, [r8]
   18958:	lsl	r4, r4, #24
   1895c:	and	r4, r4, #2130706432	; 0x7f000000
   18960:	uxth	r0, r0
   18964:	cmp	r3, #0
   18968:	orr	r4, r4, r0
   1896c:	beq	189f4 <__assert_fail@plt+0x60ec>
   18970:	cmp	r4, #0
   18974:	beq	18934 <__assert_fail@plt+0x602c>
   18978:	bl	1ba78 <__assert_fail@plt+0x9170>
   1897c:	mov	r3, #0
   18980:	str	r3, [r8]
   18984:	mov	r2, #5
   18988:	ldr	r1, [pc, #116]	; 18a04 <__assert_fail@plt+0x60fc>
   1898c:	mov	r0, #0
   18990:	bl	122f0 <dcgettext@plt>
   18994:	mov	r5, r0
   18998:	mov	r0, r4
   1899c:	bl	127ac <gpg_strerror@plt>
   189a0:	mov	r2, r7
   189a4:	mov	r1, r6
   189a8:	mov	r3, r0
   189ac:	mov	r0, r5
   189b0:	bl	17d98 <__assert_fail@plt+0x5490>
   189b4:	mov	r0, r4
   189b8:	pop	{r4, r5, r6, r7, r8, pc}
   189bc:	bl	1ba04 <__assert_fail@plt+0x90fc>
   189c0:	b	18920 <__assert_fail@plt+0x6018>
   189c4:	bl	12518 <rename@plt>
   189c8:	cmp	r0, #0
   189cc:	beq	18934 <__assert_fail@plt+0x602c>
   189d0:	ldr	r3, [pc, #40]	; 18a00 <__assert_fail@plt+0x60f8>
   189d4:	ldr	r4, [r3]
   189d8:	bl	125d8 <gpg_err_code_from_syserror@plt>
   189dc:	cmp	r0, #0
   189e0:	beq	18934 <__assert_fail@plt+0x602c>
   189e4:	lsl	r4, r4, #24
   189e8:	and	r4, r4, #2130706432	; 0x7f000000
   189ec:	uxth	r0, r0
   189f0:	orr	r4, r4, r0
   189f4:	cmp	r4, #0
   189f8:	bne	18984 <__assert_fail@plt+0x607c>
   189fc:	b	18934 <__assert_fail@plt+0x602c>
   18a00:	andeq	r5, r3, ip, lsr r3
   18a04:	andeq	r2, r2, r8, asr #19
   18a08:	subs	r3, r1, #0
   18a0c:	push	{r4, lr}
   18a10:	moveq	r1, r3
   18a14:	mov	r4, r0
   18a18:	beq	18a34 <__assert_fail@plt+0x612c>
   18a1c:	ldrb	r1, [r3]
   18a20:	cmp	r1, #0
   18a24:	beq	18a34 <__assert_fail@plt+0x612c>
   18a28:	mov	r0, r3
   18a2c:	bl	182f0 <__assert_fail@plt+0x59e8>
   18a30:	mov	r1, r0
   18a34:	mov	r0, r4
   18a38:	pop	{r4, lr}
   18a3c:	b	12650 <mkdir@plt>
   18a40:	b	1238c <chdir@plt>
   18a44:	subs	r3, r1, #0
   18a48:	push	{r4, lr}
   18a4c:	moveq	r1, r3
   18a50:	mov	r4, r0
   18a54:	beq	18a70 <__assert_fail@plt+0x6168>
   18a58:	ldrb	r1, [r3]
   18a5c:	cmp	r1, #0
   18a60:	beq	18a70 <__assert_fail@plt+0x6168>
   18a64:	mov	r0, r3
   18a68:	bl	182f0 <__assert_fail@plt+0x59e8>
   18a6c:	mov	r1, r0
   18a70:	mov	r0, r4
   18a74:	pop	{r4, lr}
   18a78:	b	12860 <chmod@plt>
   18a7c:	ldr	r3, [pc, #476]	; 18c60 <__assert_fail@plt+0x6358>
   18a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a84:	sub	sp, sp, #28
   18a88:	ldr	r3, [r3]
   18a8c:	mov	r9, r0
   18a90:	str	r3, [sp, #20]
   18a94:	bl	1259c <strlen@plt>
   18a98:	cmp	r0, #5
   18a9c:	bls	18c34 <__assert_fail@plt+0x632c>
   18aa0:	sub	r0, r0, #6
   18aa4:	add	r6, r9, r0
   18aa8:	mov	r0, r6
   18aac:	ldr	r1, [pc, #432]	; 18c64 <__assert_fail@plt+0x635c>
   18ab0:	bl	121ac <strcmp@plt>
   18ab4:	cmp	r0, #0
   18ab8:	bne	18c34 <__assert_fail@plt+0x632c>
   18abc:	bl	12620 <__errno_location@plt>
   18ac0:	mov	r1, #8
   18ac4:	ldr	r8, [pc, #412]	; 18c68 <__assert_fail@plt+0x6360>
   18ac8:	ldr	r7, [pc, #412]	; 18c6c <__assert_fail@plt+0x6364>
   18acc:	ldr	fp, [pc, #412]	; 18c70 <__assert_fail@plt+0x6368>
   18ad0:	mov	sl, r0
   18ad4:	add	r0, sp, r1
   18ad8:	ldr	r3, [sl]
   18adc:	str	r3, [sp, #4]
   18ae0:	bl	1280c <gcry_create_nonce@plt>
   18ae4:	ldrd	r4, [sp, #8]
   18ae8:	b	18b14 <__assert_fail@plt+0x620c>
   18aec:	ldr	r0, [sl]
   18af0:	cmp	r0, #17
   18af4:	bne	18c44 <__assert_fail@plt+0x633c>
   18af8:	ldrd	r4, [sp, #8]
   18afc:	ldr	r3, [pc, #368]	; 18c74 <__assert_fail@plt+0x636c>
   18b00:	adds	r4, r4, r3
   18b04:	adc	r5, r5, #0
   18b08:	subs	r8, r8, #1
   18b0c:	strd	r4, [sp, #8]
   18b10:	beq	18c38 <__assert_fail@plt+0x6330>
   18b14:	mov	r2, #62	; 0x3e
   18b18:	mov	r3, #0
   18b1c:	mov	r0, r4
   18b20:	mov	r1, r5
   18b24:	bl	21660 <__assert_fail@plt+0xed58>
   18b28:	mov	r3, #0
   18b2c:	mov	r0, r4
   18b30:	mov	r1, r5
   18b34:	ldrb	ip, [r7, r2]
   18b38:	mov	r2, #62	; 0x3e
   18b3c:	strb	ip, [r6]
   18b40:	bl	21660 <__assert_fail@plt+0xed58>
   18b44:	mov	r2, #62	; 0x3e
   18b48:	mov	r3, #0
   18b4c:	bl	21660 <__assert_fail@plt+0xed58>
   18b50:	mov	r3, #0
   18b54:	mov	r0, r4
   18b58:	mov	r1, r5
   18b5c:	ldrb	ip, [r7, r2]
   18b60:	ldr	r2, [pc, #272]	; 18c78 <__assert_fail@plt+0x6370>
   18b64:	strb	ip, [r6, #1]
   18b68:	bl	21660 <__assert_fail@plt+0xed58>
   18b6c:	mov	r2, #62	; 0x3e
   18b70:	mov	r3, #0
   18b74:	bl	21660 <__assert_fail@plt+0xed58>
   18b78:	mov	r3, #0
   18b7c:	mov	r0, r4
   18b80:	mov	r1, r5
   18b84:	ldrb	ip, [r7, r2]
   18b88:	ldr	r2, [pc, #216]	; 18c68 <__assert_fail@plt+0x6360>
   18b8c:	strb	ip, [r6, #2]
   18b90:	bl	21660 <__assert_fail@plt+0xed58>
   18b94:	mov	r2, #62	; 0x3e
   18b98:	mov	r3, #0
   18b9c:	bl	21660 <__assert_fail@plt+0xed58>
   18ba0:	mov	r0, r4
   18ba4:	mov	r1, r5
   18ba8:	ldrb	ip, [r7, r2]
   18bac:	add	r3, pc, #156	; 0x9c
   18bb0:	ldrd	r2, [r3]
   18bb4:	strb	ip, [r6, #3]
   18bb8:	bl	21660 <__assert_fail@plt+0xed58>
   18bbc:	mov	r2, #62	; 0x3e
   18bc0:	mov	r3, #0
   18bc4:	bl	21660 <__assert_fail@plt+0xed58>
   18bc8:	mov	r0, r4
   18bcc:	mov	r1, r5
   18bd0:	ldrb	ip, [r7, r2]
   18bd4:	add	r3, pc, #124	; 0x7c
   18bd8:	ldrd	r2, [r3]
   18bdc:	strb	ip, [r6, #4]
   18be0:	bl	21660 <__assert_fail@plt+0xed58>
   18be4:	mov	r2, #62	; 0x3e
   18be8:	mov	r3, #0
   18bec:	bl	21660 <__assert_fail@plt+0xed58>
   18bf0:	mov	r1, fp
   18bf4:	mov	r0, r9
   18bf8:	ldrb	r3, [r7, r2]
   18bfc:	strb	r3, [r6, #5]
   18c00:	bl	18a08 <__assert_fail@plt+0x6100>
   18c04:	cmp	r0, #0
   18c08:	bne	18aec <__assert_fail@plt+0x61e4>
   18c0c:	ldr	r0, [sp, #4]
   18c10:	bl	12794 <gpg_err_set_errno@plt>
   18c14:	mov	r0, r9
   18c18:	ldr	r3, [pc, #64]	; 18c60 <__assert_fail@plt+0x6358>
   18c1c:	ldr	r2, [sp, #20]
   18c20:	ldr	r3, [r3]
   18c24:	cmp	r2, r3
   18c28:	bne	18c4c <__assert_fail@plt+0x6344>
   18c2c:	add	sp, sp, #28
   18c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c34:	mov	r0, #22
   18c38:	bl	12794 <gpg_err_set_errno@plt>
   18c3c:	mov	r0, #0
   18c40:	b	18c18 <__assert_fail@plt+0x6310>
   18c44:	mov	r0, #0
   18c48:	b	18c18 <__assert_fail@plt+0x6310>
   18c4c:	bl	122fc <__stack_chk_fail@plt>
   18c50:	rsceq	r7, r1, r0, lsl r8
   18c54:	andeq	r0, r0, r0
   18c58:	ldrcc	r1, [fp], r0, ror #7
   18c5c:	andeq	r0, r0, r0
   18c60:	andeq	r4, r3, r8, lsr fp
   18c64:	andeq	r2, r2, ip, ror #19
   18c68:	strdeq	sl, [r3], -r8
   18c6c:	andeq	r2, r2, r0, ror #16
   18c70:	strdeq	r2, [r2], -r4
   18c74:	andeq	r1, r0, r1, ror #28
   18c78:	andeq	r0, r0, r4, lsl #30
   18c7c:	b	125cc <setenv@plt>
   18c80:	b	12884 <unsetenv@plt>
   18c84:	push	{r4, r5, r6, lr}
   18c88:	mov	r4, #100	; 0x64
   18c8c:	b	18cb8 <__assert_fail@plt+0x63b0>
   18c90:	bl	12548 <getcwd@plt>
   18c94:	mov	r3, r0
   18c98:	cmp	r5, r3
   18c9c:	mov	r0, r5
   18ca0:	beq	18cd4 <__assert_fail@plt+0x63cc>
   18ca4:	bl	122a8 <gcry_free@plt>
   18ca8:	bl	12620 <__errno_location@plt>
   18cac:	ldr	r3, [r0]
   18cb0:	cmp	r3, #34	; 0x22
   18cb4:	bne	18cd0 <__assert_fail@plt+0x63c8>
   18cb8:	add	r0, r4, #1
   18cbc:	bl	1217c <gcry_malloc@plt>
   18cc0:	mov	r1, r4
   18cc4:	lsl	r4, r4, #1
   18cc8:	subs	r5, r0, #0
   18ccc:	bne	18c90 <__assert_fail@plt+0x6388>
   18cd0:	mov	r3, #0
   18cd4:	mov	r0, r3
   18cd8:	pop	{r4, r5, r6, pc}
   18cdc:	push	{r4, r5, r6, lr}
   18ce0:	mvn	r3, #0
   18ce4:	subs	r4, r1, #0
   18ce8:	str	r3, [r0]
   18cec:	beq	18d28 <__assert_fail@plt+0x6420>
   18cf0:	mov	r5, r0
   18cf4:	bl	125a8 <inotify_init@plt>
   18cf8:	cmn	r0, #1
   18cfc:	mov	r6, r0
   18d00:	beq	18d70 <__assert_fail@plt+0x6468>
   18d04:	mov	r1, r4
   18d08:	mov	r2, #1024	; 0x400
   18d0c:	bl	12614 <inotify_add_watch@plt>
   18d10:	cmn	r0, #1
   18d14:	movne	r4, #0
   18d18:	strne	r6, [r5]
   18d1c:	beq	18d44 <__assert_fail@plt+0x643c>
   18d20:	mov	r0, r4
   18d24:	pop	{r4, r5, r6, pc}
   18d28:	ldr	r3, [pc, #100]	; 18d94 <__assert_fail@plt+0x648c>
   18d2c:	ldr	r4, [r3]
   18d30:	lsl	r4, r4, #24
   18d34:	and	r4, r4, #2130706432	; 0x7f000000
   18d38:	orr	r4, r4, #55	; 0x37
   18d3c:	mov	r0, r4
   18d40:	pop	{r4, r5, r6, pc}
   18d44:	ldr	r3, [pc, #72]	; 18d94 <__assert_fail@plt+0x648c>
   18d48:	ldr	r5, [r3]
   18d4c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18d50:	subs	r4, r0, #0
   18d54:	lslne	r5, r5, #24
   18d58:	andne	r5, r5, #2130706432	; 0x7f000000
   18d5c:	uxthne	r4, r4
   18d60:	mov	r0, r6
   18d64:	orrne	r4, r5, r4
   18d68:	bl	128cc <close@plt>
   18d6c:	b	18d20 <__assert_fail@plt+0x6418>
   18d70:	ldr	r3, [pc, #28]	; 18d94 <__assert_fail@plt+0x648c>
   18d74:	ldr	r5, [r3]
   18d78:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18d7c:	subs	r4, r0, #0
   18d80:	lslne	r5, r5, #24
   18d84:	andne	r5, r5, #2130706432	; 0x7f000000
   18d88:	uxthne	r4, r4
   18d8c:	orrne	r4, r5, r4
   18d90:	b	18d20 <__assert_fail@plt+0x6418>
   18d94:	andeq	r5, r3, ip, lsr r3
   18d98:	mvn	r3, #0
   18d9c:	cmp	r1, #0
   18da0:	push	{r4, r5, r6, r7, r8, lr}
   18da4:	str	r3, [r0]
   18da8:	beq	18e18 <__assert_fail@plt+0x6510>
   18dac:	mov	r5, r0
   18db0:	mov	r0, r1
   18db4:	bl	128d8 <gcry_strdup@plt>
   18db8:	subs	r6, r0, #0
   18dbc:	beq	18e6c <__assert_fail@plt+0x6564>
   18dc0:	bl	125a8 <inotify_init@plt>
   18dc4:	cmn	r0, #1
   18dc8:	mov	r7, r0
   18dcc:	beq	18e90 <__assert_fail@plt+0x6588>
   18dd0:	mov	r1, #47	; 0x2f
   18dd4:	mov	r0, r6
   18dd8:	bl	12764 <strrchr@plt>
   18ddc:	ldr	r2, [pc, #208]	; 18eb4 <__assert_fail@plt+0x65ac>
   18de0:	mov	r1, r6
   18de4:	cmp	r0, #0
   18de8:	movne	r3, #0
   18dec:	strbne	r3, [r0]
   18df0:	mov	r0, r7
   18df4:	bl	12614 <inotify_add_watch@plt>
   18df8:	cmn	r0, #1
   18dfc:	beq	18e34 <__assert_fail@plt+0x652c>
   18e00:	mov	r4, #0
   18e04:	mov	r0, r6
   18e08:	bl	122a8 <gcry_free@plt>
   18e0c:	str	r7, [r5]
   18e10:	mov	r0, r4
   18e14:	pop	{r4, r5, r6, r7, r8, pc}
   18e18:	ldr	r3, [pc, #152]	; 18eb8 <__assert_fail@plt+0x65b0>
   18e1c:	ldr	r4, [r3]
   18e20:	lsl	r4, r4, #24
   18e24:	and	r4, r4, #2130706432	; 0x7f000000
   18e28:	orr	r4, r4, #55	; 0x37
   18e2c:	mov	r0, r4
   18e30:	pop	{r4, r5, r6, r7, r8, pc}
   18e34:	ldr	r3, [pc, #124]	; 18eb8 <__assert_fail@plt+0x65b0>
   18e38:	ldr	r5, [r3]
   18e3c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18e40:	subs	r4, r0, #0
   18e44:	lslne	r5, r5, #24
   18e48:	andne	r5, r5, #2130706432	; 0x7f000000
   18e4c:	uxthne	r4, r4
   18e50:	mov	r0, r7
   18e54:	orrne	r4, r5, r4
   18e58:	bl	128cc <close@plt>
   18e5c:	mov	r0, r6
   18e60:	bl	122a8 <gcry_free@plt>
   18e64:	mov	r0, r4
   18e68:	pop	{r4, r5, r6, r7, r8, pc}
   18e6c:	ldr	r3, [pc, #68]	; 18eb8 <__assert_fail@plt+0x65b0>
   18e70:	ldr	r5, [r3]
   18e74:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18e78:	subs	r4, r0, #0
   18e7c:	lslne	r5, r5, #24
   18e80:	andne	r5, r5, #2130706432	; 0x7f000000
   18e84:	uxthne	r4, r4
   18e88:	orrne	r4, r5, r4
   18e8c:	b	18e10 <__assert_fail@plt+0x6508>
   18e90:	ldr	r3, [pc, #32]	; 18eb8 <__assert_fail@plt+0x65b0>
   18e94:	ldr	r5, [r3]
   18e98:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18e9c:	subs	r4, r0, #0
   18ea0:	lslne	r5, r5, #24
   18ea4:	andne	r5, r5, #2130706432	; 0x7f000000
   18ea8:	uxthne	r4, r4
   18eac:	orrne	r4, r5, r4
   18eb0:	b	18e5c <__assert_fail@plt+0x6554>
   18eb4:	streq	r0, [r0], #-1536	; 0xfffffa00
   18eb8:	andeq	r5, r3, ip, lsr r3
   18ebc:	mov	r0, #0
   18ec0:	bx	lr
   18ec4:	push	{r4, r5, r6, r7, r8, lr}
   18ec8:	sub	sp, sp, #120	; 0x78
   18ecc:	ldr	r5, [pc, #316]	; 19010 <__assert_fail@plt+0x6708>
   18ed0:	mov	r4, #110	; 0x6e
   18ed4:	mov	r2, sp
   18ed8:	ldr	r3, [r5]
   18edc:	add	r1, sp, #4
   18ee0:	str	r3, [sp, #116]	; 0x74
   18ee4:	str	r4, [sp]
   18ee8:	mov	r8, r0
   18eec:	bl	127d0 <getsockname@plt>
   18ef0:	subs	r7, r0, #0
   18ef4:	bne	18f80 <__assert_fail@plt+0x6678>
   18ef8:	ldrh	r3, [sp, #4]
   18efc:	cmp	r3, #1
   18f00:	bne	18f58 <__assert_fail@plt+0x6650>
   18f04:	ldr	r3, [sp]
   18f08:	cmp	r3, #2
   18f0c:	bls	18f6c <__assert_fail@plt+0x6664>
   18f10:	cmp	r3, #110	; 0x6e
   18f14:	bhi	18fbc <__assert_fail@plt+0x66b4>
   18f18:	sub	r0, r3, #1
   18f1c:	sub	r4, r3, #2
   18f20:	bl	1217c <gcry_malloc@plt>
   18f24:	subs	r6, r0, #0
   18f28:	beq	18fd4 <__assert_fail@plt+0x66cc>
   18f2c:	mov	r2, r4
   18f30:	add	r1, sp, #6
   18f34:	bl	12284 <memcpy@plt>
   18f38:	strb	r7, [r6, r4]
   18f3c:	ldr	r2, [sp, #116]	; 0x74
   18f40:	ldr	r3, [r5]
   18f44:	mov	r0, r6
   18f48:	cmp	r2, r3
   18f4c:	bne	1900c <__assert_fail@plt+0x6704>
   18f50:	add	sp, sp, #120	; 0x78
   18f54:	pop	{r4, r5, r6, r7, r8, pc}
   18f58:	mov	r1, r8
   18f5c:	ldr	r0, [pc, #176]	; 19014 <__assert_fail@plt+0x670c>
   18f60:	mov	r6, r7
   18f64:	bl	17d98 <__assert_fail@plt+0x5490>
   18f68:	b	18f3c <__assert_fail@plt+0x6634>
   18f6c:	mov	r1, r8
   18f70:	ldr	r0, [pc, #160]	; 19018 <__assert_fail@plt+0x6710>
   18f74:	mov	r6, r7
   18f78:	bl	17d98 <__assert_fail@plt+0x5490>
   18f7c:	b	18f3c <__assert_fail@plt+0x6634>
   18f80:	ldr	r3, [pc, #148]	; 1901c <__assert_fail@plt+0x6714>
   18f84:	mov	r6, #0
   18f88:	ldr	r4, [r3]
   18f8c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18f90:	cmp	r0, #0
   18f94:	lslne	r4, r4, #24
   18f98:	andne	r4, r4, #2130706432	; 0x7f000000
   18f9c:	uxthne	r0, r0
   18fa0:	orrne	r0, r4, r0
   18fa4:	bl	127ac <gpg_strerror@plt>
   18fa8:	mov	r1, r8
   18fac:	mov	r2, r0
   18fb0:	ldr	r0, [pc, #104]	; 19020 <__assert_fail@plt+0x6718>
   18fb4:	bl	17d98 <__assert_fail@plt+0x5490>
   18fb8:	b	18f3c <__assert_fail@plt+0x6634>
   18fbc:	mov	r2, r4
   18fc0:	mov	r1, r8
   18fc4:	ldr	r0, [pc, #88]	; 19024 <__assert_fail@plt+0x671c>
   18fc8:	mov	r6, r7
   18fcc:	bl	17d98 <__assert_fail@plt+0x5490>
   18fd0:	b	18f3c <__assert_fail@plt+0x6634>
   18fd4:	ldr	r3, [pc, #64]	; 1901c <__assert_fail@plt+0x6714>
   18fd8:	ldr	r4, [r3]
   18fdc:	bl	125d8 <gpg_err_code_from_syserror@plt>
   18fe0:	cmp	r0, #0
   18fe4:	lslne	r4, r4, #24
   18fe8:	andne	r4, r4, #2130706432	; 0x7f000000
   18fec:	uxthne	r0, r0
   18ff0:	orrne	r0, r4, r0
   18ff4:	bl	127ac <gpg_strerror@plt>
   18ff8:	mov	r1, r8
   18ffc:	mov	r2, r0
   19000:	ldr	r0, [pc, #32]	; 19028 <__assert_fail@plt+0x6720>
   19004:	bl	17d98 <__assert_fail@plt+0x5490>
   19008:	b	18f3c <__assert_fail@plt+0x6634>
   1900c:	bl	122fc <__stack_chk_fail@plt>
   19010:	andeq	r4, r3, r8, lsr fp
   19014:	andeq	r2, r2, ip, lsl sl
   19018:	andeq	r2, r2, ip, asr #20
   1901c:	andeq	r5, r3, ip, lsr r3
   19020:	strdeq	r2, [r2], -ip
   19024:	andeq	r2, r2, ip, ror sl
   19028:	andeq	r2, r2, ip, asr #21
   1902c:	push	{r4, lr}
   19030:	bl	12368 <dup@plt>
   19034:	cmp	r0, #0
   19038:	blt	19048 <__assert_fail@plt+0x6740>
   1903c:	bl	128cc <close@plt>
   19040:	mov	r0, #1
   19044:	pop	{r4, pc}
   19048:	mov	r0, #0
   1904c:	pop	{r4, pc}
   19050:	ldr	r0, [pc]	; 19058 <__assert_fail@plt+0x6750>
   19054:	bx	lr
   19058:	andeq	r2, r2, r4, lsr fp
   1905c:	push	{r4, r5, r6, lr}
   19060:	mov	r1, #0
   19064:	bl	1e65c <__assert_fail@plt+0xbd54>
   19068:	mov	r1, #0
   1906c:	mov	r4, r0
   19070:	ldr	r0, [pc, #48]	; 190a8 <__assert_fail@plt+0x67a0>
   19074:	bl	1e65c <__assert_fail@plt+0xbd54>
   19078:	mov	r1, r0
   1907c:	mov	r5, r0
   19080:	mov	r0, r4
   19084:	bl	1e70c <__assert_fail@plt+0xbe04>
   19088:	mov	r6, r0
   1908c:	mov	r0, r5
   19090:	bl	122a8 <gcry_free@plt>
   19094:	mov	r0, r4
   19098:	bl	122a8 <gcry_free@plt>
   1909c:	clz	r0, r6
   190a0:	lsr	r0, r0, #5
   190a4:	pop	{r4, r5, r6, pc}
   190a8:	andeq	r2, r2, r0, asr #22
   190ac:	push	{r4, r5, r6, lr}
   190b0:	cmp	r0, #0
   190b4:	ldr	r5, [pc, #152]	; 19154 <__assert_fail@plt+0x684c>
   190b8:	ldr	r4, [r5]
   190bc:	bne	190d0 <__assert_fail@plt+0x67c8>
   190c0:	cmp	r4, #0
   190c4:	beq	190e0 <__assert_fail@plt+0x67d8>
   190c8:	mov	r0, r4
   190cc:	pop	{r4, r5, r6, pc}
   190d0:	mov	r0, r4
   190d4:	bl	122a8 <gcry_free@plt>
   190d8:	mov	r3, #0
   190dc:	str	r3, [r5]
   190e0:	bl	19050 <__assert_fail@plt+0x6748>
   190e4:	mov	r2, #0
   190e8:	ldr	r1, [pc, #104]	; 19158 <__assert_fail@plt+0x6850>
   190ec:	mov	r6, r0
   190f0:	bl	1ec14 <__assert_fail@plt+0xc30c>
   190f4:	mov	r1, #0
   190f8:	mov	r4, r0
   190fc:	bl	126bc <access@plt>
   19100:	cmp	r0, #0
   19104:	beq	19144 <__assert_fail@plt+0x683c>
   19108:	mov	r2, #0
   1910c:	ldr	r1, [pc, #72]	; 1915c <__assert_fail@plt+0x6854>
   19110:	mov	r0, r6
   19114:	str	r4, [r5]
   19118:	bl	1ec14 <__assert_fail@plt+0xc30c>
   1911c:	mov	r1, #0
   19120:	mov	r4, r0
   19124:	bl	126bc <access@plt>
   19128:	cmp	r0, #0
   1912c:	beq	19144 <__assert_fail@plt+0x683c>
   19130:	mov	r0, r4
   19134:	bl	122a8 <gcry_free@plt>
   19138:	ldr	r4, [r5]
   1913c:	mov	r0, r4
   19140:	pop	{r4, r5, r6, pc}
   19144:	ldr	r0, [r5]
   19148:	bl	122a8 <gcry_free@plt>
   1914c:	str	r4, [r5]
   19150:	b	190c8 <__assert_fail@plt+0x67c0>
   19154:	andeq	r5, r3, r0, asr r3
   19158:	andeq	r2, r2, ip, asr #22
   1915c:	andeq	r2, r2, r8, asr fp
   19160:	push	{r4, lr}
   19164:	ldrb	r4, [r0]
   19168:	cmp	r4, #0
   1916c:	beq	1918c <__assert_fail@plt+0x6884>
   19170:	mov	r4, r0
   19174:	bl	1259c <strlen@plt>
   19178:	add	r0, r4, r0
   1917c:	ldrb	r3, [r0, #-1]
   19180:	cmp	r3, #47	; 0x2f
   19184:	movne	r4, #0
   19188:	beq	19194 <__assert_fail@plt+0x688c>
   1918c:	mov	r0, r4
   19190:	pop	{r4, pc}
   19194:	mov	r0, r4
   19198:	bl	126b0 <gcry_xstrdup@plt>
   1919c:	mov	r4, r0
   191a0:	bl	1259c <strlen@plt>
   191a4:	sub	r0, r0, #1
   191a8:	add	r3, r4, r0
   191ac:	cmp	r4, r3
   191b0:	bcs	1918c <__assert_fail@plt+0x6884>
   191b4:	ldrb	r2, [r4, r0]
   191b8:	cmp	r2, #47	; 0x2f
   191bc:	bne	1918c <__assert_fail@plt+0x6884>
   191c0:	mov	r1, #0
   191c4:	b	191d4 <__assert_fail@plt+0x68cc>
   191c8:	ldrb	r2, [r3]
   191cc:	cmp	r2, #47	; 0x2f
   191d0:	bne	1918c <__assert_fail@plt+0x6884>
   191d4:	strb	r1, [r3], #-1
   191d8:	cmp	r4, r3
   191dc:	bne	191c8 <__assert_fail@plt+0x68c0>
   191e0:	mov	r0, r4
   191e4:	pop	{r4, pc}
   191e8:	ldr	r0, [pc]	; 191f0 <__assert_fail@plt+0x68e8>
   191ec:	bx	lr
   191f0:	andeq	r2, r2, r0, asr #22
   191f4:	push	{r4, lr}
   191f8:	ldr	r0, [pc, #80]	; 19250 <__assert_fail@plt+0x6948>
   191fc:	bl	1247c <getenv@plt>
   19200:	subs	r4, r0, #0
   19204:	beq	19214 <__assert_fail@plt+0x690c>
   19208:	ldrb	r3, [r4]
   1920c:	cmp	r3, #0
   19210:	bne	19220 <__assert_fail@plt+0x6918>
   19214:	ldr	r4, [pc, #56]	; 19254 <__assert_fail@plt+0x694c>
   19218:	mov	r0, r4
   1921c:	pop	{r4, pc}
   19220:	bl	19160 <__assert_fail@plt+0x6858>
   19224:	cmp	r0, #0
   19228:	movne	r4, r0
   1922c:	mov	r0, r4
   19230:	bl	1905c <__assert_fail@plt+0x6754>
   19234:	cmp	r0, #0
   19238:	bne	19218 <__assert_fail@plt+0x6910>
   1923c:	ldr	r3, [pc, #20]	; 19258 <__assert_fail@plt+0x6950>
   19240:	mov	r2, #1
   19244:	mov	r0, r4
   19248:	strb	r2, [r3, #4]
   1924c:	pop	{r4, pc}
   19250:	andeq	r2, r2, r8, ror #22
   19254:	andeq	r2, r2, r0, asr #22
   19258:	andeq	r5, r3, r0, asr r3
   1925c:	push	{r4, r5, r6, lr}
   19260:	subs	r4, r0, #0
   19264:	beq	19274 <__assert_fail@plt+0x696c>
   19268:	ldrb	r3, [r4]
   1926c:	cmp	r3, #0
   19270:	bne	192a8 <__assert_fail@plt+0x69a0>
   19274:	bl	191f4 <__assert_fail@plt+0x68ec>
   19278:	ldr	r5, [pc, #80]	; 192d0 <__assert_fail@plt+0x69c8>
   1927c:	mov	r6, #0
   19280:	mov	r4, r0
   19284:	ldr	r0, [r5, #8]
   19288:	bl	122a8 <gcry_free@plt>
   1928c:	mov	r0, r4
   19290:	mov	r1, #0
   19294:	bl	1e65c <__assert_fail@plt+0xbd54>
   19298:	str	r0, [r5, #8]
   1929c:	mov	r0, r6
   192a0:	pop	{r4, r5, r6, lr}
   192a4:	b	122a8 <gcry_free@plt>
   192a8:	bl	19160 <__assert_fail@plt+0x6858>
   192ac:	ldr	r5, [pc, #28]	; 192d0 <__assert_fail@plt+0x69c8>
   192b0:	subs	r6, r0, #0
   192b4:	movne	r4, r6
   192b8:	mov	r0, r4
   192bc:	bl	1905c <__assert_fail@plt+0x6754>
   192c0:	cmp	r0, #0
   192c4:	moveq	r3, #1
   192c8:	strbeq	r3, [r5, #4]
   192cc:	b	19284 <__assert_fail@plt+0x697c>
   192d0:	andeq	r5, r3, r0, asr r3
   192d4:	push	{r4, r5, r6, lr}
   192d8:	ldr	r5, [pc, #44]	; 1930c <__assert_fail@plt+0x6a04>
   192dc:	ldr	r4, [r5, #8]
   192e0:	cmp	r4, #0
   192e4:	beq	192f0 <__assert_fail@plt+0x69e8>
   192e8:	mov	r0, r4
   192ec:	pop	{r4, r5, r6, pc}
   192f0:	bl	191f4 <__assert_fail@plt+0x68ec>
   192f4:	mov	r1, r4
   192f8:	bl	1e65c <__assert_fail@plt+0xbd54>
   192fc:	mov	r4, r0
   19300:	str	r0, [r5, #8]
   19304:	mov	r0, r4
   19308:	pop	{r4, r5, r6, pc}
   1930c:	andeq	r5, r3, r0, asr r3
   19310:	ldr	r3, [pc, #12]	; 19324 <__assert_fail@plt+0x6a1c>
   19314:	ldrb	r0, [r3, #4]
   19318:	clz	r0, r0
   1931c:	lsr	r0, r0, #5
   19320:	bx	lr
   19324:	andeq	r5, r3, r0, asr r3
   19328:	ldr	r0, [pc]	; 19330 <__assert_fail@plt+0x6a28>
   1932c:	bx	lr
   19330:	andeq	r2, r2, r8, lsr r6
   19334:	push	{r4, r5, r6, r7, r8, r9, lr}
   19338:	mov	r2, #0
   1933c:	ldr	r8, [pc, #884]	; 196b8 <__assert_fail@plt+0x6db0>
   19340:	sub	sp, sp, #188	; 0xbc
   19344:	mov	r7, r1
   19348:	ldr	r3, [r8]
   1934c:	str	r2, [r1]
   19350:	mov	r9, r0
   19354:	str	r3, [sp, #180]	; 0xb4
   19358:	bl	192d4 <__assert_fail@plt+0x69cc>
   1935c:	ldr	r5, [pc, #856]	; 196bc <__assert_fail@plt+0x6db4>
   19360:	ldr	r4, [pc, #856]	; 196c0 <__assert_fail@plt+0x6db8>
   19364:	ldr	r6, [pc, #856]	; 196c4 <__assert_fail@plt+0x6dbc>
   19368:	bl	1220c <getuid@plt>
   1936c:	mov	r3, r4
   19370:	mov	r2, r6
   19374:	mov	r1, #47	; 0x2f
   19378:	str	r0, [sp]
   1937c:	add	r0, sp, #132	; 0x84
   19380:	bl	126f8 <gpgrt_snprintf@plt>
   19384:	add	r2, sp, #8
   19388:	add	r1, sp, #132	; 0x84
   1938c:	mov	r0, #3
   19390:	bl	1286c <__xstat64@plt>
   19394:	cmp	r0, #0
   19398:	bne	193ac <__assert_fail@plt+0x6aa4>
   1939c:	ldr	r3, [sp, #24]
   193a0:	and	r3, r3, #61440	; 0xf000
   193a4:	cmp	r3, #16384	; 0x4000
   193a8:	beq	193f0 <__assert_fail@plt+0x6ae8>
   193ac:	ldr	r4, [r5], #4
   193b0:	cmp	r4, #0
   193b4:	bne	19368 <__assert_fail@plt+0x6a60>
   193b8:	ldr	r3, [r7]
   193bc:	orr	r3, r3, #2
   193c0:	orr	r3, r3, #128	; 0x80
   193c4:	str	r3, [r7]
   193c8:	bl	192d4 <__assert_fail@plt+0x69cc>
   193cc:	bl	126b0 <gcry_xstrdup@plt>
   193d0:	mov	r4, r0
   193d4:	ldr	r2, [sp, #180]	; 0xb4
   193d8:	ldr	r3, [r8]
   193dc:	mov	r0, r4
   193e0:	cmp	r2, r3
   193e4:	bne	19680 <__assert_fail@plt+0x6d78>
   193e8:	add	sp, sp, #188	; 0xbc
   193ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   193f0:	ldr	r4, [sp, #32]
   193f4:	bl	1220c <getuid@plt>
   193f8:	cmp	r4, r0
   193fc:	beq	19414 <__assert_fail@plt+0x6b0c>
   19400:	ldr	r3, [r7]
   19404:	cmp	r9, #0
   19408:	orr	r3, r3, #4
   1940c:	str	r3, [r7]
   19410:	beq	193c0 <__assert_fail@plt+0x6ab8>
   19414:	add	r0, sp, #132	; 0x84
   19418:	bl	1259c <strlen@plt>
   1941c:	add	r2, r0, #7
   19420:	cmp	r2, #46	; 0x2e
   19424:	mov	r3, r0
   19428:	bls	19438 <__assert_fail@plt+0x6b30>
   1942c:	ldr	r3, [r7]
   19430:	orr	r3, r3, #1
   19434:	b	193c0 <__assert_fail@plt+0x6ab8>
   19438:	ldr	r2, [pc, #648]	; 196c8 <__assert_fail@plt+0x6dc0>
   1943c:	add	r1, sp, #132	; 0x84
   19440:	add	ip, r1, r0
   19444:	ldrb	lr, [r2, #6]
   19448:	ldrh	r1, [r2, #4]
   1944c:	ldr	r0, [r2]
   19450:	add	r2, sp, #132	; 0x84
   19454:	str	r0, [r2, r3]
   19458:	strh	r1, [ip, #4]
   1945c:	add	r2, sp, #8
   19460:	add	r1, sp, #132	; 0x84
   19464:	strb	lr, [ip, #6]
   19468:	mov	r0, #3
   1946c:	bl	1286c <__xstat64@plt>
   19470:	cmp	r0, #0
   19474:	bne	19564 <__assert_fail@plt+0x6c5c>
   19478:	ldr	r3, [sp, #24]
   1947c:	and	r3, r3, #61440	; 0xf000
   19480:	cmp	r3, #16384	; 0x4000
   19484:	beq	195b0 <__assert_fail@plt+0x6ca8>
   19488:	ldr	r3, [r7]
   1948c:	cmp	r9, #0
   19490:	orr	r3, r3, #4
   19494:	str	r3, [r7]
   19498:	beq	193c0 <__assert_fail@plt+0x6ab8>
   1949c:	ldr	r3, [pc, #552]	; 196cc <__assert_fail@plt+0x6dc4>
   194a0:	ldrb	r3, [r3, #4]
   194a4:	cmp	r3, #0
   194a8:	beq	19594 <__assert_fail@plt+0x6c8c>
   194ac:	ldr	r3, [r7]
   194b0:	orr	r3, r3, #32
   194b4:	str	r3, [r7]
   194b8:	bl	192d4 <__assert_fail@plt+0x69cc>
   194bc:	mov	r4, r0
   194c0:	bl	1259c <strlen@plt>
   194c4:	mov	r2, r4
   194c8:	add	r1, sp, #112	; 0x70
   194cc:	mov	r3, r0
   194d0:	mov	r0, #2
   194d4:	bl	12710 <gcry_md_hash_buffer@plt>
   194d8:	add	r0, sp, #112	; 0x70
   194dc:	mov	r1, #120	; 0x78
   194e0:	bl	1a368 <__assert_fail@plt+0x7a60>
   194e4:	subs	r5, r0, #0
   194e8:	beq	1942c <__assert_fail@plt+0x6b24>
   194ec:	mov	r3, #0
   194f0:	mov	r2, r5
   194f4:	ldr	r1, [pc, #468]	; 196d0 <__assert_fail@plt+0x6dc8>
   194f8:	add	r0, sp, #132	; 0x84
   194fc:	bl	1eba8 <__assert_fail@plt+0xc2a0>
   19500:	mov	r4, r0
   19504:	mov	r0, r5
   19508:	bl	122a8 <gcry_free@plt>
   1950c:	cmp	r4, #0
   19510:	beq	19614 <__assert_fail@plt+0x6d0c>
   19514:	add	r2, sp, #8
   19518:	mov	r1, r4
   1951c:	mov	r0, #3
   19520:	bl	1286c <__xstat64@plt>
   19524:	cmp	r0, #0
   19528:	beq	195ec <__assert_fail@plt+0x6ce4>
   1952c:	bl	12620 <__errno_location@plt>
   19530:	ldr	r3, [r0]
   19534:	mov	r5, r0
   19538:	cmp	r3, #2
   1953c:	beq	19624 <__assert_fail@plt+0x6d1c>
   19540:	ldr	r3, [r7]
   19544:	cmp	r9, #0
   19548:	orr	r3, r3, #1
   1954c:	str	r3, [r7]
   19550:	bne	193d4 <__assert_fail@plt+0x6acc>
   19554:	mov	r0, r4
   19558:	bl	122a8 <gcry_free@plt>
   1955c:	ldr	r3, [r7]
   19560:	b	193c0 <__assert_fail@plt+0x6ab8>
   19564:	bl	12620 <__errno_location@plt>
   19568:	ldr	r3, [r0]
   1956c:	cmp	r3, #2
   19570:	bne	1942c <__assert_fail@plt+0x6b24>
   19574:	ldr	r1, [pc, #344]	; 196d4 <__assert_fail@plt+0x6dcc>
   19578:	add	r0, sp, #132	; 0x84
   1957c:	bl	18a08 <__assert_fail@plt+0x6100>
   19580:	cmp	r0, #0
   19584:	beq	195d0 <__assert_fail@plt+0x6cc8>
   19588:	ldr	r3, [r7]
   1958c:	orr	r3, r3, #16
   19590:	b	193c0 <__assert_fail@plt+0x6ab8>
   19594:	add	r0, sp, #132	; 0x84
   19598:	bl	126b0 <gcry_xstrdup@plt>
   1959c:	mov	r4, r0
   195a0:	cmp	r4, #0
   195a4:	bne	193d4 <__assert_fail@plt+0x6acc>
   195a8:	ldr	r3, [r7]
   195ac:	b	193c0 <__assert_fail@plt+0x6ab8>
   195b0:	ldr	r4, [sp, #32]
   195b4:	bl	1220c <getuid@plt>
   195b8:	cmp	r4, r0
   195bc:	bne	19488 <__assert_fail@plt+0x6b80>
   195c0:	ldr	r3, [sp, #24]
   195c4:	tst	r3, #63	; 0x3f
   195c8:	bne	19488 <__assert_fail@plt+0x6b80>
   195cc:	b	1949c <__assert_fail@plt+0x6b94>
   195d0:	add	r2, sp, #8
   195d4:	add	r1, sp, #132	; 0x84
   195d8:	mov	r0, #3
   195dc:	bl	1286c <__xstat64@plt>
   195e0:	cmp	r0, #0
   195e4:	beq	19478 <__assert_fail@plt+0x6b70>
   195e8:	b	1942c <__assert_fail@plt+0x6b24>
   195ec:	ldr	r3, [sp, #24]
   195f0:	and	r3, r3, #61440	; 0xf000
   195f4:	cmp	r3, #16384	; 0x4000
   195f8:	beq	1963c <__assert_fail@plt+0x6d34>
   195fc:	ldr	r3, [r7]
   19600:	cmp	r9, #0
   19604:	orr	r3, r3, #8
   19608:	str	r3, [r7]
   1960c:	bne	193d4 <__assert_fail@plt+0x6acc>
   19610:	b	19554 <__assert_fail@plt+0x6c4c>
   19614:	ldr	r3, [r7]
   19618:	orr	r3, r3, #1
   1961c:	str	r3, [r7]
   19620:	b	193c0 <__assert_fail@plt+0x6ab8>
   19624:	cmp	r9, #0
   19628:	beq	1965c <__assert_fail@plt+0x6d54>
   1962c:	ldr	r3, [r7]
   19630:	orr	r3, r3, #64	; 0x40
   19634:	str	r3, [r7]
   19638:	b	193d4 <__assert_fail@plt+0x6acc>
   1963c:	ldr	r5, [sp, #32]
   19640:	bl	1220c <getuid@plt>
   19644:	cmp	r5, r0
   19648:	bne	195fc <__assert_fail@plt+0x6cf4>
   1964c:	ldr	r3, [sp, #24]
   19650:	tst	r3, #63	; 0x3f
   19654:	bne	195fc <__assert_fail@plt+0x6cf4>
   19658:	b	193d4 <__assert_fail@plt+0x6acc>
   1965c:	ldr	r1, [pc, #112]	; 196d4 <__assert_fail@plt+0x6dcc>
   19660:	mov	r0, r4
   19664:	bl	18a08 <__assert_fail@plt+0x6100>
   19668:	cmp	r0, #0
   1966c:	beq	19684 <__assert_fail@plt+0x6d7c>
   19670:	ldr	r3, [r7]
   19674:	orr	r3, r3, #16
   19678:	str	r3, [r7]
   1967c:	b	19554 <__assert_fail@plt+0x6c4c>
   19680:	bl	122fc <__stack_chk_fail@plt>
   19684:	add	r2, sp, #8
   19688:	add	r1, sp, #132	; 0x84
   1968c:	mov	r0, #3
   19690:	bl	1286c <__xstat64@plt>
   19694:	cmp	r0, #0
   19698:	beq	195a0 <__assert_fail@plt+0x6c98>
   1969c:	ldr	r2, [r5]
   196a0:	ldr	r3, [r7]
   196a4:	cmp	r2, #2
   196a8:	orrne	r3, r3, #1
   196ac:	orreq	r3, r3, #64	; 0x40
   196b0:	str	r3, [r7]
   196b4:	b	19554 <__assert_fail@plt+0x6c4c>
   196b8:	andeq	r4, r3, r8, lsr fp
   196bc:	andeq	r2, r2, r4, lsl #22
   196c0:	andeq	r2, r2, r8, ror sp
   196c4:	andeq	r2, r2, r4, ror fp
   196c8:	muleq	r2, r8, fp
   196cc:	andeq	r5, r3, r0, asr r3
   196d0:	andeq	r2, r2, r0, lsl #23
   196d4:	strdeq	r2, [r2], -r4
   196d8:	push	{r4, r5, lr}
   196dc:	sub	sp, sp, #12
   196e0:	ldr	r5, [pc, #64]	; 19728 <__assert_fail@plt+0x6e20>
   196e4:	ldr	r4, [pc, #64]	; 1972c <__assert_fail@plt+0x6e24>
   196e8:	ldr	r0, [r5, #12]
   196ec:	ldr	r3, [r4]
   196f0:	cmp	r0, #0
   196f4:	str	r3, [sp, #4]
   196f8:	beq	19714 <__assert_fail@plt+0x6e0c>
   196fc:	ldr	r2, [sp, #4]
   19700:	ldr	r3, [r4]
   19704:	cmp	r2, r3
   19708:	bne	19724 <__assert_fail@plt+0x6e1c>
   1970c:	add	sp, sp, #12
   19710:	pop	{r4, r5, pc}
   19714:	mov	r1, sp
   19718:	bl	19334 <__assert_fail@plt+0x6a2c>
   1971c:	str	r0, [r5, #12]
   19720:	b	196fc <__assert_fail@plt+0x6df4>
   19724:	bl	122fc <__stack_chk_fail@plt>
   19728:	andeq	r5, r3, r0, asr r3
   1972c:	andeq	r4, r3, r8, lsr fp
   19730:	ldr	r0, [pc]	; 19738 <__assert_fail@plt+0x6e30>
   19734:	bx	lr
   19738:	andeq	r2, r2, r4, lsl #23
   1973c:	ldr	r0, [pc]	; 19744 <__assert_fail@plt+0x6e3c>
   19740:	bx	lr
   19744:	muleq	r2, r0, fp
   19748:	ldr	r0, [pc]	; 19750 <__assert_fail@plt+0x6e48>
   1974c:	bx	lr
   19750:	andeq	r2, r2, r0, lsr #23
   19754:	ldr	r0, [pc]	; 1975c <__assert_fail@plt+0x6e54>
   19758:	bx	lr
   1975c:	andeq	r2, r2, r4, asr #23
   19760:	ldr	r0, [pc]	; 19768 <__assert_fail@plt+0x6e60>
   19764:	bx	lr
   19768:			; <UNDEFINED> instruction: 0x00021fbc
   1976c:	ldr	r0, [pc]	; 19774 <__assert_fail@plt+0x6e6c>
   19770:	bx	lr
   19774:	ldrdeq	r2, [r2], -r8
   19778:	push	{r4, r5, lr}
   1977c:	sub	sp, sp, #12
   19780:	ldr	r5, [pc, #96]	; 197e8 <__assert_fail@plt+0x6ee0>
   19784:	ldr	r4, [pc, #96]	; 197ec <__assert_fail@plt+0x6ee4>
   19788:	ldr	r0, [r5, #16]
   1978c:	ldr	r3, [r4]
   19790:	cmp	r0, #0
   19794:	str	r3, [sp, #4]
   19798:	beq	197b4 <__assert_fail@plt+0x6eac>
   1979c:	ldr	r2, [sp, #4]
   197a0:	ldr	r3, [r4]
   197a4:	cmp	r2, r3
   197a8:	bne	197e4 <__assert_fail@plt+0x6edc>
   197ac:	add	sp, sp, #12
   197b0:	pop	{r4, r5, pc}
   197b4:	ldr	r0, [r5, #12]
   197b8:	cmp	r0, #0
   197bc:	beq	197d4 <__assert_fail@plt+0x6ecc>
   197c0:	mov	r2, #0
   197c4:	ldr	r1, [pc, #36]	; 197f0 <__assert_fail@plt+0x6ee8>
   197c8:	bl	1e5ac <__assert_fail@plt+0xbca4>
   197cc:	str	r0, [r5, #16]
   197d0:	b	1979c <__assert_fail@plt+0x6e94>
   197d4:	mov	r1, sp
   197d8:	bl	19334 <__assert_fail@plt+0x6a2c>
   197dc:	str	r0, [r5, #12]
   197e0:	b	197c0 <__assert_fail@plt+0x6eb8>
   197e4:	bl	122fc <__stack_chk_fail@plt>
   197e8:	andeq	r5, r3, r0, asr r3
   197ec:	andeq	r4, r3, r8, lsr fp
   197f0:	andeq	r2, r2, ip, ror #23
   197f4:	push	{r4, lr}
   197f8:	ldr	r4, [pc, #72]	; 19848 <__assert_fail@plt+0x6f40>
   197fc:	ldr	r3, [r4, #20]
   19800:	cmp	r3, #0
   19804:	bne	19820 <__assert_fail@plt+0x6f18>
   19808:	ldr	r3, [r4, #24]
   1980c:	cmp	r3, #0
   19810:	bne	19834 <__assert_fail@plt+0x6f2c>
   19814:	bl	128d8 <gcry_strdup@plt>
   19818:	str	r0, [r4, #24]
   1981c:	pop	{r4, pc}
   19820:	ldr	r3, [pc, #36]	; 1984c <__assert_fail@plt+0x6f44>
   19824:	ldr	r2, [pc, #36]	; 19850 <__assert_fail@plt+0x6f48>
   19828:	ldr	r1, [pc, #36]	; 19854 <__assert_fail@plt+0x6f4c>
   1982c:	ldr	r0, [pc, #36]	; 19858 <__assert_fail@plt+0x6f50>
   19830:	bl	18120 <__assert_fail@plt+0x5818>
   19834:	ldr	r3, [pc, #16]	; 1984c <__assert_fail@plt+0x6f44>
   19838:	ldr	r2, [pc, #28]	; 1985c <__assert_fail@plt+0x6f54>
   1983c:	ldr	r1, [pc, #16]	; 19854 <__assert_fail@plt+0x6f4c>
   19840:	ldr	r0, [pc, #24]	; 19860 <__assert_fail@plt+0x6f58>
   19844:	bl	18120 <__assert_fail@plt+0x5818>
   19848:	andeq	r5, r3, r0, asr r3
   1984c:	andeq	r2, r2, ip, lsl #22
   19850:	andeq	r0, r0, sp, lsl #8
   19854:	strdeq	r2, [r2], -r8
   19858:	andeq	r2, r2, r0, lsl ip
   1985c:	andeq	r0, r0, lr, lsl #8
   19860:	andeq	r2, r2, ip, lsr #24
   19864:	push	{r4, lr}
   19868:	mov	r3, #1
   1986c:	ldr	r4, [pc, #664]	; 19b0c <__assert_fail@plt+0x7204>
   19870:	sub	r0, r0, #1
   19874:	str	r3, [r4, #20]
   19878:	cmp	r0, #11
   1987c:	ldrls	pc, [pc, r0, lsl #2]
   19880:	b	19afc <__assert_fail@plt+0x71f4>
   19884:	andeq	r9, r1, r8, ror #17
   19888:	andeq	r9, r1, ip, lsl r9
   1988c:	andeq	r9, r1, r8, lsr #18
   19890:	andeq	r9, r1, ip, asr r9
   19894:	muleq	r1, r0, r9
   19898:	andeq	r9, r1, r4, asr #19
   1989c:	strdeq	r9, [r1], -r8
   198a0:	andeq	r9, r1, ip, lsr #20
   198a4:	andeq	r9, r1, r0, ror #20
   198a8:	muleq	r1, r4, sl
   198ac:	andeq	r9, r1, r8, asr #21
   198b0:			; <UNDEFINED> instruction: 0x000198b4
   198b4:	ldr	r0, [r4, #60]	; 0x3c
   198b8:	cmp	r0, #0
   198bc:	popne	{r4, pc}
   198c0:	ldr	r3, [r4, #24]
   198c4:	mov	r2, r0
   198c8:	cmp	r3, #0
   198cc:	movne	r0, r3
   198d0:	ldrne	r1, [pc, #568]	; 19b10 <__assert_fail@plt+0x7208>
   198d4:	ldreq	r1, [pc, #568]	; 19b14 <__assert_fail@plt+0x720c>
   198d8:	ldreq	r0, [pc, #568]	; 19b18 <__assert_fail@plt+0x7210>
   198dc:	bl	1ec14 <__assert_fail@plt+0xc30c>
   198e0:	str	r0, [r4, #60]	; 0x3c
   198e4:	pop	{r4, pc}
   198e8:	ldr	r0, [r4, #28]
   198ec:	cmp	r0, #0
   198f0:	popne	{r4, pc}
   198f4:	ldr	r3, [r4, #24]
   198f8:	mov	r2, r0
   198fc:	cmp	r3, #0
   19900:	movne	r0, r3
   19904:	ldrne	r1, [pc, #528]	; 19b1c <__assert_fail@plt+0x7214>
   19908:	ldreq	r1, [pc, #528]	; 19b20 <__assert_fail@plt+0x7218>
   1990c:	ldreq	r0, [pc, #516]	; 19b18 <__assert_fail@plt+0x7210>
   19910:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19914:	str	r0, [r4, #28]
   19918:	pop	{r4, pc}
   1991c:	mov	r0, #0
   19920:	pop	{r4, lr}
   19924:	b	190ac <__assert_fail@plt+0x67a4>
   19928:	ldr	r0, [r4, #32]
   1992c:	cmp	r0, #0
   19930:	popne	{r4, pc}
   19934:	ldr	r3, [r4, #24]
   19938:	mov	r2, r0
   1993c:	cmp	r3, #0
   19940:	movne	r0, r3
   19944:	ldrne	r1, [pc, #472]	; 19b24 <__assert_fail@plt+0x721c>
   19948:	ldreq	r1, [pc, #472]	; 19b28 <__assert_fail@plt+0x7220>
   1994c:	ldreq	r0, [pc, #472]	; 19b2c <__assert_fail@plt+0x7224>
   19950:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19954:	str	r0, [r4, #32]
   19958:	pop	{r4, pc}
   1995c:	ldr	r0, [r4, #36]	; 0x24
   19960:	cmp	r0, #0
   19964:	popne	{r4, pc}
   19968:	ldr	r3, [r4, #24]
   1996c:	mov	r2, r0
   19970:	cmp	r3, #0
   19974:	movne	r0, r3
   19978:	ldrne	r1, [pc, #432]	; 19b30 <__assert_fail@plt+0x7228>
   1997c:	ldreq	r1, [pc, #432]	; 19b34 <__assert_fail@plt+0x722c>
   19980:	ldreq	r0, [pc, #400]	; 19b18 <__assert_fail@plt+0x7210>
   19984:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19988:	str	r0, [r4, #36]	; 0x24
   1998c:	pop	{r4, pc}
   19990:	ldr	r0, [r4, #40]	; 0x28
   19994:	cmp	r0, #0
   19998:	popne	{r4, pc}
   1999c:	ldr	r3, [r4, #24]
   199a0:	mov	r2, r0
   199a4:	cmp	r3, #0
   199a8:	movne	r0, r3
   199ac:	ldrne	r1, [pc, #388]	; 19b38 <__assert_fail@plt+0x7230>
   199b0:	ldreq	r1, [pc, #388]	; 19b3c <__assert_fail@plt+0x7234>
   199b4:	ldreq	r0, [pc, #368]	; 19b2c <__assert_fail@plt+0x7224>
   199b8:	bl	1ec14 <__assert_fail@plt+0xc30c>
   199bc:	str	r0, [r4, #40]	; 0x28
   199c0:	pop	{r4, pc}
   199c4:	ldr	r0, [r4, #48]	; 0x30
   199c8:	cmp	r0, #0
   199cc:	popne	{r4, pc}
   199d0:	ldr	r3, [r4, #24]
   199d4:	mov	r2, r0
   199d8:	cmp	r3, #0
   199dc:	movne	r0, r3
   199e0:	ldrne	r1, [pc, #344]	; 19b40 <__assert_fail@plt+0x7238>
   199e4:	ldreq	r1, [pc, #344]	; 19b44 <__assert_fail@plt+0x723c>
   199e8:	ldreq	r0, [pc, #316]	; 19b2c <__assert_fail@plt+0x7224>
   199ec:	bl	1ec14 <__assert_fail@plt+0xc30c>
   199f0:	str	r0, [r4, #48]	; 0x30
   199f4:	pop	{r4, pc}
   199f8:	ldr	r0, [r4, #52]	; 0x34
   199fc:	cmp	r0, #0
   19a00:	popne	{r4, pc}
   19a04:	ldr	r3, [r4, #24]
   19a08:	mov	r2, r0
   19a0c:	cmp	r3, #0
   19a10:	movne	r0, r3
   19a14:	ldrne	r1, [pc, #300]	; 19b48 <__assert_fail@plt+0x7240>
   19a18:	ldreq	r1, [pc, #300]	; 19b4c <__assert_fail@plt+0x7244>
   19a1c:	ldreq	r0, [pc, #244]	; 19b18 <__assert_fail@plt+0x7210>
   19a20:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19a24:	str	r0, [r4, #52]	; 0x34
   19a28:	pop	{r4, pc}
   19a2c:	ldr	r0, [r4, #56]	; 0x38
   19a30:	cmp	r0, #0
   19a34:	popne	{r4, pc}
   19a38:	ldr	r3, [r4, #24]
   19a3c:	mov	r2, r0
   19a40:	cmp	r3, #0
   19a44:	movne	r0, r3
   19a48:	ldrne	r1, [pc, #256]	; 19b50 <__assert_fail@plt+0x7248>
   19a4c:	ldreq	r1, [pc, #256]	; 19b54 <__assert_fail@plt+0x724c>
   19a50:	ldreq	r0, [pc, #192]	; 19b18 <__assert_fail@plt+0x7210>
   19a54:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19a58:	str	r0, [r4, #56]	; 0x38
   19a5c:	pop	{r4, pc}
   19a60:	ldr	r0, [r4, #64]	; 0x40
   19a64:	cmp	r0, #0
   19a68:	popne	{r4, pc}
   19a6c:	ldr	r3, [r4, #24]
   19a70:	mov	r2, r0
   19a74:	cmp	r3, #0
   19a78:	movne	r0, r3
   19a7c:	ldrne	r1, [pc, #212]	; 19b58 <__assert_fail@plt+0x7250>
   19a80:	ldreq	r1, [pc, #212]	; 19b5c <__assert_fail@plt+0x7254>
   19a84:	ldreq	r0, [pc, #140]	; 19b18 <__assert_fail@plt+0x7210>
   19a88:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19a8c:	str	r0, [r4, #64]	; 0x40
   19a90:	pop	{r4, pc}
   19a94:	ldr	r0, [r4, #68]	; 0x44
   19a98:	cmp	r0, #0
   19a9c:	popne	{r4, pc}
   19aa0:	ldr	r3, [r4, #24]
   19aa4:	mov	r2, r0
   19aa8:	cmp	r3, #0
   19aac:	movne	r0, r3
   19ab0:	ldrne	r1, [pc, #168]	; 19b60 <__assert_fail@plt+0x7258>
   19ab4:	ldreq	r1, [pc, #168]	; 19b64 <__assert_fail@plt+0x725c>
   19ab8:	ldreq	r0, [pc, #88]	; 19b18 <__assert_fail@plt+0x7210>
   19abc:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19ac0:	str	r0, [r4, #68]	; 0x44
   19ac4:	pop	{r4, pc}
   19ac8:	ldr	r0, [r4, #44]	; 0x2c
   19acc:	cmp	r0, #0
   19ad0:	popne	{r4, pc}
   19ad4:	ldr	r3, [r4, #24]
   19ad8:	mov	r2, r0
   19adc:	cmp	r3, #0
   19ae0:	movne	r0, r3
   19ae4:	ldrne	r1, [pc, #124]	; 19b68 <__assert_fail@plt+0x7260>
   19ae8:	ldreq	r1, [pc, #124]	; 19b6c <__assert_fail@plt+0x7264>
   19aec:	ldreq	r0, [pc, #56]	; 19b2c <__assert_fail@plt+0x7224>
   19af0:	bl	1ec14 <__assert_fail@plt+0xc30c>
   19af4:	str	r0, [r4, #44]	; 0x2c
   19af8:	pop	{r4, pc}
   19afc:	ldr	r2, [pc, #108]	; 19b70 <__assert_fail@plt+0x7268>
   19b00:	ldr	r1, [pc, #108]	; 19b74 <__assert_fail@plt+0x726c>
   19b04:	ldr	r0, [pc, #108]	; 19b78 <__assert_fail@plt+0x7270>
   19b08:	bl	180f8 <__assert_fail@plt+0x57f0>
   19b0c:	andeq	r5, r3, r0, asr r3
   19b10:	andeq	r2, r2, ip, lsl sp
   19b14:	andeq	r2, r2, r0, lsr #26
   19b18:	andeq	r2, r2, r4, lsr fp
   19b1c:	andeq	r2, r2, r4, asr #24
   19b20:	andeq	r2, r2, r8, asr ip
   19b24:	andeq	r2, r2, r4, ror #24
   19b28:	andeq	r2, r2, r8, ror #24
   19b2c:	muleq	r2, r0, fp
   19b30:	andeq	r2, r2, r4, ror ip
   19b34:	andeq	r2, r2, ip, ror ip
   19b38:	andeq	r2, r2, r8, lsl #25
   19b3c:	andeq	r2, r2, r0, lsr #25
   19b40:	andeq	r2, r2, ip, asr #25
   19b44:	andeq	r2, r2, r8, ror #25
   19b48:	strdeq	r2, [r2], -ip
   19b4c:	andeq	r2, r2, r8, lsl #26
   19b50:	andeq	r2, r2, r0, lsl sp
   19b54:	andeq	r2, r2, r4, lsl sp
   19b58:	andeq	r2, r2, r8, lsr #26
   19b5c:	andeq	r2, r2, r4, asr #26
   19b60:	andeq	r2, r2, r8, asr sp
   19b64:	andeq	r2, r2, r8, ror #26
   19b68:			; <UNDEFINED> instruction: 0x00022cb4
   19b6c:			; <UNDEFINED> instruction: 0x00022cbc
   19b70:	andeq	r2, r2, r0, lsr #22
   19b74:	andeq	r0, r0, lr, ror r4
   19b78:	strdeq	r2, [r2], -r8
   19b7c:	mov	r0, #1
   19b80:	b	190ac <__assert_fail@plt+0x67a4>
   19b84:	push	{r4, r5, r6, r7, r8, lr}
   19b88:	mov	r4, r0
   19b8c:	mov	r5, r3
   19b90:	mov	r7, r1
   19b94:	mov	r6, r2
   19b98:	mov	r1, #0
   19b9c:	mov	r2, #36	; 0x24
   19ba0:	bl	1265c <memset@plt>
   19ba4:	mov	r3, #0
   19ba8:	cmp	r5, #0
   19bac:	str	r7, [r4, #12]
   19bb0:	str	r6, [r4, #16]
   19bb4:	str	r3, [r4, #36]	; 0x24
   19bb8:	beq	19c1c <__assert_fail@plt+0x7314>
   19bbc:	ldrb	r0, [r5]
   19bc0:	cmp	r0, r3
   19bc4:	beq	19c0c <__assert_fail@plt+0x7304>
   19bc8:	mov	r2, #4
   19bcc:	ldr	r1, [pc, #96]	; 19c34 <__assert_fail@plt+0x732c>
   19bd0:	mov	r0, r5
   19bd4:	bl	1289c <strncmp@plt>
   19bd8:	cmp	r0, #0
   19bdc:	mov	r0, r5
   19be0:	ldreq	r3, [r4]
   19be4:	ldreq	r2, [pc, #76]	; 19c38 <__assert_fail@plt+0x7330>
   19be8:	orreq	r3, r3, #32
   19bec:	streq	r3, [r4]
   19bf0:	streq	r2, [r4, #28]
   19bf4:	bl	128d8 <gcry_strdup@plt>
   19bf8:	cmp	r0, #0
   19bfc:	str	r0, [r4, #20]
   19c00:	beq	19c24 <__assert_fail@plt+0x731c>
   19c04:	ldr	r0, [r4, #36]	; 0x24
   19c08:	pop	{r4, r5, r6, r7, r8, pc}
   19c0c:	ldr	r3, [r4]
   19c10:	orr	r3, r3, #16
   19c14:	str	r3, [r4]
   19c18:	pop	{r4, r5, r6, r7, r8, pc}
   19c1c:	mov	r0, r5
   19c20:	pop	{r4, r5, r6, r7, r8, pc}
   19c24:	bl	125d8 <gpg_err_code_from_syserror@plt>
   19c28:	uxth	r0, r0
   19c2c:	str	r0, [r4, #36]	; 0x24
   19c30:	pop	{r4, r5, r6, r7, r8, pc}
   19c34:	andeq	r3, r2, r0, ror #3
   19c38:	adcseq	r0, r7, lr, asr #9
   19c3c:	cmp	r2, #0
   19c40:	beq	19c4c <__assert_fail@plt+0x7344>
   19c44:	mov	r1, r2
   19c48:	b	126e0 <gpgrt_fputs@plt>
   19c4c:	b	12890 <fputs@plt>
   19c50:	mov	r3, r2
   19c54:	mov	r2, #0
   19c58:	b	19b84 <__assert_fail@plt+0x727c>
   19c5c:	mov	r3, r2
   19c60:	mov	r2, r1
   19c64:	mov	r1, #0
   19c68:	b	19b84 <__assert_fail@plt+0x727c>
   19c6c:	ldr	r3, [pc, #812]	; 19fa0 <__assert_fail@plt+0x7698>
   19c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c74:	sub	sp, sp, #28
   19c78:	ldr	sl, [r0, #36]	; 0x24
   19c7c:	ldr	r3, [r3]
   19c80:	cmp	sl, #0
   19c84:	str	r3, [sp, #20]
   19c88:	bne	19ccc <__assert_fail@plt+0x73c4>
   19c8c:	cmp	r2, #0
   19c90:	mov	r5, r0
   19c94:	mov	r6, r1
   19c98:	mov	r9, r2
   19c9c:	bne	19cec <__assert_fail@plt+0x73e4>
   19ca0:	cmp	r1, #0
   19ca4:	beq	19cc8 <__assert_fail@plt+0x73c0>
   19ca8:	ldr	r0, [r0, #16]
   19cac:	cmp	r0, #0
   19cb0:	beq	19f74 <__assert_fail@plt+0x766c>
   19cb4:	bl	1235c <gpgrt_fflush@plt>
   19cb8:	adds	r0, r0, #0
   19cbc:	movne	r0, #1
   19cc0:	cmp	r0, #0
   19cc4:	bne	19eec <__assert_fail@plt+0x75e4>
   19cc8:	mov	sl, #0
   19ccc:	ldr	r3, [pc, #716]	; 19fa0 <__assert_fail@plt+0x7698>
   19cd0:	ldr	r2, [sp, #20]
   19cd4:	mov	r0, sl
   19cd8:	ldr	r3, [r3]
   19cdc:	cmp	r2, r3
   19ce0:	bne	19f88 <__assert_fail@plt+0x7680>
   19ce4:	add	sp, sp, #28
   19ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cec:	ldr	r3, [r0]
   19cf0:	tst	r3, #1
   19cf4:	bne	19d7c <__assert_fail@plt+0x7474>
   19cf8:	ldr	r2, [r0, #20]
   19cfc:	cmp	r2, #0
   19d00:	beq	19d74 <__assert_fail@plt+0x746c>
   19d04:	ldr	r2, [r0, #16]
   19d08:	ldr	r1, [r0, #12]
   19d0c:	ldr	r0, [pc, #656]	; 19fa4 <__assert_fail@plt+0x769c>
   19d10:	bl	19c3c <__assert_fail@plt+0x7334>
   19d14:	cmn	r0, #1
   19d18:	beq	19eec <__assert_fail@plt+0x75e4>
   19d1c:	ldr	r2, [r5, #16]
   19d20:	ldr	r1, [r5, #12]
   19d24:	ldr	r0, [r5, #20]
   19d28:	bl	19c3c <__assert_fail@plt+0x7334>
   19d2c:	cmn	r0, #1
   19d30:	beq	19eec <__assert_fail@plt+0x75e4>
   19d34:	ldr	r2, [r5, #16]
   19d38:	ldr	r1, [r5, #12]
   19d3c:	ldr	r0, [pc, #612]	; 19fa8 <__assert_fail@plt+0x76a0>
   19d40:	bl	19c3c <__assert_fail@plt+0x7334>
   19d44:	cmn	r0, #1
   19d48:	beq	19eec <__assert_fail@plt+0x75e4>
   19d4c:	ldr	r3, [r5]
   19d50:	tst	r3, #32
   19d54:	beq	19d74 <__assert_fail@plt+0x746c>
   19d58:	ldr	r2, [r5, #16]
   19d5c:	ldr	r1, [r5, #12]
   19d60:	ldr	r0, [pc, #580]	; 19fac <__assert_fail@plt+0x76a4>
   19d64:	bl	19c3c <__assert_fail@plt+0x7334>
   19d68:	cmn	r0, #1
   19d6c:	beq	19eec <__assert_fail@plt+0x75e4>
   19d70:	ldr	r3, [r5]
   19d74:	orr	r3, r3, #1
   19d78:	str	r3, [r5]
   19d7c:	ldmib	r5, {r4, r8}
   19d80:	cmp	r4, #3
   19d84:	bgt	19f8c <__assert_fail@plt+0x7684>
   19d88:	add	r3, r5, #24
   19d8c:	str	r3, [sp, #4]
   19d90:	mov	r1, r3
   19d94:	add	r0, sp, #12
   19d98:	mov	r3, #4
   19d9c:	mov	r2, r4
   19da0:	bl	123c8 <__memcpy_chk@plt>
   19da4:	ldr	r3, [r5]
   19da8:	tst	r3, #32
   19dac:	addeq	r9, r6, r9
   19db0:	bne	19f38 <__assert_fail@plt+0x7630>
   19db4:	ldr	r7, [pc, #500]	; 19fb0 <__assert_fail@plt+0x76a8>
   19db8:	sub	r6, r6, #1
   19dbc:	sub	r9, r9, #1
   19dc0:	ldrb	r2, [r6, #1]!
   19dc4:	add	r3, sp, #24
   19dc8:	add	r3, r3, r4
   19dcc:	add	r4, r4, #1
   19dd0:	cmp	r4, #2
   19dd4:	strb	r2, [r3, #-12]
   19dd8:	ble	19e98 <__assert_fail@plt+0x7590>
   19ddc:	ldrb	ip, [sp, #13]
   19de0:	ldrb	r0, [sp, #12]
   19de4:	ldrb	r1, [sp, #14]
   19de8:	add	fp, sp, #17
   19dec:	lsl	r3, ip, #2
   19df0:	lsl	r2, r0, #4
   19df4:	and	r2, r2, #48	; 0x30
   19df8:	and	r3, r3, #60	; 0x3c
   19dfc:	orr	r2, r2, ip, lsr #4
   19e00:	orr	r3, r3, r1, lsr #6
   19e04:	and	r1, r1, #63	; 0x3f
   19e08:	add	r2, r7, r2
   19e0c:	add	r3, r7, r3
   19e10:	add	r1, r7, r1
   19e14:	add	r0, r7, r0, lsr #2
   19e18:	ldrb	ip, [r2, #1040]	; 0x410
   19e1c:	ldrb	r0, [r0, #1040]	; 0x410
   19e20:	ldrb	r2, [r3, #1040]	; 0x410
   19e24:	ldrb	r3, [r1, #1040]	; 0x410
   19e28:	ldr	r1, [r5, #16]
   19e2c:	strb	r0, [sp, #16]
   19e30:	cmp	r1, #0
   19e34:	add	r4, sp, #20
   19e38:	strb	ip, [sp, #17]
   19e3c:	strb	r2, [sp, #18]
   19e40:	strb	r3, [sp, #19]
   19e44:	beq	19eb8 <__assert_fail@plt+0x75b0>
   19e48:	bl	12428 <gpgrt_fputc@plt>
   19e4c:	cmp	r4, fp
   19e50:	beq	19e68 <__assert_fail@plt+0x7560>
   19e54:	ldrb	r0, [fp], #1
   19e58:	ldr	r1, [r5, #16]
   19e5c:	bl	12428 <gpgrt_fputc@plt>
   19e60:	cmp	r4, fp
   19e64:	bne	19e54 <__assert_fail@plt+0x754c>
   19e68:	ldr	r0, [r5, #16]
   19e6c:	bl	12338 <gpgrt_ferror@plt>
   19e70:	cmp	r0, #0
   19e74:	bne	19eec <__assert_fail@plt+0x75e4>
   19e78:	add	r8, r8, #1
   19e7c:	cmp	r8, #15
   19e80:	ble	19e94 <__assert_fail@plt+0x758c>
   19e84:	ldr	r3, [r5]
   19e88:	tst	r3, #16
   19e8c:	beq	19f1c <__assert_fail@plt+0x7614>
   19e90:	mov	r8, #0
   19e94:	mov	r4, #0
   19e98:	cmp	r6, r9
   19e9c:	bne	19dc0 <__assert_fail@plt+0x74b8>
   19ea0:	add	r1, sp, #12
   19ea4:	ldr	r0, [sp, #4]
   19ea8:	mov	r2, r4
   19eac:	bl	12284 <memcpy@plt>
   19eb0:	stmib	r5, {r4, r8}
   19eb4:	b	19ccc <__assert_fail@plt+0x73c4>
   19eb8:	ldr	r1, [r5, #12]
   19ebc:	bl	127c4 <putc@plt>
   19ec0:	cmp	r4, fp
   19ec4:	beq	19edc <__assert_fail@plt+0x75d4>
   19ec8:	ldrb	r0, [fp], #1
   19ecc:	ldr	r1, [r5, #12]
   19ed0:	bl	127c4 <putc@plt>
   19ed4:	cmp	r4, fp
   19ed8:	bne	19ec8 <__assert_fail@plt+0x75c0>
   19edc:	ldr	r0, [r5, #12]
   19ee0:	bl	12254 <ferror@plt>
   19ee4:	cmp	r0, #0
   19ee8:	beq	19e78 <__assert_fail@plt+0x7570>
   19eec:	bl	125d8 <gpg_err_code_from_syserror@plt>
   19ef0:	ldr	r3, [r5, #20]
   19ef4:	cmp	r3, #0
   19ef8:	uxth	sl, r0
   19efc:	str	sl, [r5, #36]	; 0x24
   19f00:	beq	19ccc <__assert_fail@plt+0x73c4>
   19f04:	mov	r0, r3
   19f08:	bl	122a8 <gcry_free@plt>
   19f0c:	mov	r3, #0
   19f10:	ldr	sl, [r5, #36]	; 0x24
   19f14:	str	r3, [r5, #20]
   19f18:	b	19ccc <__assert_fail@plt+0x73c4>
   19f1c:	ldr	r2, [r5, #16]
   19f20:	ldr	r1, [r5, #12]
   19f24:	ldr	r0, [pc, #128]	; 19fac <__assert_fail@plt+0x76a4>
   19f28:	bl	19c3c <__assert_fail@plt+0x7334>
   19f2c:	cmn	r0, #1
   19f30:	bne	19e90 <__assert_fail@plt+0x7588>
   19f34:	b	19eec <__assert_fail@plt+0x75e4>
   19f38:	ldr	r2, [r5, #28]
   19f3c:	ldr	r1, [pc, #108]	; 19fb0 <__assert_fail@plt+0x76a8>
   19f40:	add	r9, r6, r9
   19f44:	mov	r0, r6
   19f48:	ldrb	r3, [r0], #1
   19f4c:	lsl	ip, r2, #8
   19f50:	eor	r3, r3, ip, lsr #24
   19f54:	cmp	r0, r9
   19f58:	add	r3, r1, r3, lsl #2
   19f5c:	ldr	r3, [r3, #16]
   19f60:	eor	r2, r3, r2, lsl #8
   19f64:	bne	19f48 <__assert_fail@plt+0x7640>
   19f68:	bic	r2, r2, #-16777216	; 0xff000000
   19f6c:	str	r2, [r5, #28]
   19f70:	b	19db4 <__assert_fail@plt+0x74ac>
   19f74:	ldr	r0, [r5, #12]
   19f78:	bl	12200 <fflush@plt>
   19f7c:	adds	r0, r0, #0
   19f80:	movne	r0, #1
   19f84:	b	19cc0 <__assert_fail@plt+0x73b8>
   19f88:	bl	122fc <__stack_chk_fail@plt>
   19f8c:	ldr	r3, [pc, #28]	; 19fb0 <__assert_fail@plt+0x76a8>
   19f90:	mov	r2, #239	; 0xef
   19f94:	ldr	r1, [pc, #24]	; 19fb4 <__assert_fail@plt+0x76ac>
   19f98:	ldr	r0, [pc, #24]	; 19fb8 <__assert_fail@plt+0x76b0>
   19f9c:	bl	12908 <__assert_fail@plt>
   19fa0:	andeq	r4, r3, r8, lsr fp
   19fa4:	ldrdeq	r1, [r2], -ip
   19fa8:	andeq	r3, r2, r8, ror #3
   19fac:	andeq	r1, r2, r0, asr #22
   19fb0:	andeq	r2, r2, r0, lsl #27
   19fb4:	strdeq	r3, [r2], -r0
   19fb8:	andeq	r3, r2, r8, lsl #4
   19fbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   19fc0:	sub	sp, sp, #20
   19fc4:	ldr	r6, [pc, #880]	; 1a33c <__assert_fail@plt+0x7a34>
   19fc8:	ldr	r5, [r0, #36]	; 0x24
   19fcc:	ldr	r3, [r6]
   19fd0:	cmp	r5, #0
   19fd4:	str	r3, [sp, #12]
   19fd8:	bne	1a148 <__assert_fail@plt+0x7840>
   19fdc:	ldr	r7, [r0]
   19fe0:	mov	r4, r0
   19fe4:	tst	r7, #1
   19fe8:	beq	1a120 <__assert_fail@plt+0x7818>
   19fec:	ldrd	r8, [r0, #4]
   19ff0:	cmp	r8, #3
   19ff4:	bgt	1a328 <__assert_fail@plt+0x7a20>
   19ff8:	mov	r3, #4
   19ffc:	add	r1, r0, #24
   1a000:	mov	r2, r8
   1a004:	add	r0, sp, r3
   1a008:	bl	123c8 <__memcpy_chk@plt>
   1a00c:	cmp	r8, #0
   1a010:	beq	1a164 <__assert_fail@plt+0x785c>
   1a014:	ldrb	r3, [sp, #4]
   1a018:	ldr	r2, [pc, #800]	; 1a340 <__assert_fail@plt+0x7a38>
   1a01c:	cmp	r8, #1
   1a020:	add	r1, r2, r3, lsr #2
   1a024:	lsl	r3, r3, #4
   1a028:	ldrb	r0, [r1, #1040]	; 0x410
   1a02c:	and	r3, r3, #48	; 0x30
   1a030:	strb	r0, [sp, #8]
   1a034:	beq	1a1c4 <__assert_fail@plt+0x78bc>
   1a038:	ldrb	ip, [sp, #5]
   1a03c:	mov	r1, #61	; 0x3d
   1a040:	strb	r1, [sp, #11]
   1a044:	lsl	r1, ip, #2
   1a048:	orr	r3, r3, ip, lsr #4
   1a04c:	and	r1, r1, #60	; 0x3c
   1a050:	add	r3, r2, r3
   1a054:	add	r1, r2, r1
   1a058:	ldrb	r3, [r3, #1040]	; 0x410
   1a05c:	ldrb	r2, [r1, #1040]	; 0x410
   1a060:	strb	r3, [sp, #9]
   1a064:	strb	r2, [sp, #10]
   1a068:	ldr	r1, [r4, #16]
   1a06c:	add	r7, sp, #9
   1a070:	cmp	r1, #0
   1a074:	add	r8, sp, #12
   1a078:	beq	1a178 <__assert_fail@plt+0x7870>
   1a07c:	bl	12428 <gpgrt_fputc@plt>
   1a080:	cmp	r7, r8
   1a084:	beq	1a09c <__assert_fail@plt+0x7794>
   1a088:	ldrb	r0, [r7], #1
   1a08c:	ldr	r1, [r4, #16]
   1a090:	bl	12428 <gpgrt_fputc@plt>
   1a094:	cmp	r7, r8
   1a098:	bne	1a088 <__assert_fail@plt+0x7780>
   1a09c:	ldr	r0, [r4, #16]
   1a0a0:	bl	12338 <gpgrt_ferror@plt>
   1a0a4:	cmp	r0, #0
   1a0a8:	bne	1a1ac <__assert_fail@plt+0x78a4>
   1a0ac:	add	r9, r9, #1
   1a0b0:	cmp	r9, #15
   1a0b4:	ldr	r7, [r4]
   1a0b8:	ble	1a164 <__assert_fail@plt+0x785c>
   1a0bc:	tst	r7, #16
   1a0c0:	beq	1a1dc <__assert_fail@plt+0x78d4>
   1a0c4:	tst	r7, #32
   1a0c8:	bne	1a1fc <__assert_fail@plt+0x78f4>
   1a0cc:	ldr	r3, [r4, #20]
   1a0d0:	cmp	r3, #0
   1a0d4:	beq	1a138 <__assert_fail@plt+0x7830>
   1a0d8:	ldr	r2, [r4, #16]
   1a0dc:	ldr	r1, [r4, #12]
   1a0e0:	ldr	r0, [pc, #604]	; 1a344 <__assert_fail@plt+0x7a3c>
   1a0e4:	bl	19c3c <__assert_fail@plt+0x7334>
   1a0e8:	cmn	r0, #1
   1a0ec:	beq	1a1ac <__assert_fail@plt+0x78a4>
   1a0f0:	ldr	r2, [r4, #16]
   1a0f4:	ldr	r1, [r4, #12]
   1a0f8:	ldr	r0, [r4, #20]
   1a0fc:	bl	19c3c <__assert_fail@plt+0x7334>
   1a100:	cmn	r0, #1
   1a104:	beq	1a1ac <__assert_fail@plt+0x78a4>
   1a108:	ldr	r2, [r4, #16]
   1a10c:	ldr	r1, [r4, #12]
   1a110:	ldr	r0, [pc, #560]	; 1a348 <__assert_fail@plt+0x7a40>
   1a114:	bl	19c3c <__assert_fail@plt+0x7334>
   1a118:	cmn	r0, #1
   1a11c:	beq	1a1ac <__assert_fail@plt+0x78a4>
   1a120:	ldr	r0, [r4, #20]
   1a124:	cmp	r0, #0
   1a128:	beq	1a138 <__assert_fail@plt+0x7830>
   1a12c:	bl	122a8 <gcry_free@plt>
   1a130:	mov	r3, #0
   1a134:	str	r3, [r4, #20]
   1a138:	mov	r3, #0
   1a13c:	str	r5, [r4, #36]	; 0x24
   1a140:	str	r3, [r4, #12]
   1a144:	str	r3, [r4, #16]
   1a148:	ldr	r2, [sp, #12]
   1a14c:	ldr	r3, [r6]
   1a150:	mov	r0, r5
   1a154:	cmp	r2, r3
   1a158:	bne	1a324 <__assert_fail@plt+0x7a1c>
   1a15c:	add	sp, sp, #20
   1a160:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a164:	cmp	r9, #0
   1a168:	beq	1a0c4 <__assert_fail@plt+0x77bc>
   1a16c:	tst	r7, #16
   1a170:	bne	1a0c4 <__assert_fail@plt+0x77bc>
   1a174:	b	1a1dc <__assert_fail@plt+0x78d4>
   1a178:	ldr	r1, [r4, #12]
   1a17c:	bl	127c4 <putc@plt>
   1a180:	cmp	r7, r8
   1a184:	beq	1a19c <__assert_fail@plt+0x7894>
   1a188:	ldrb	r0, [r7], #1
   1a18c:	ldr	r1, [r4, #12]
   1a190:	bl	127c4 <putc@plt>
   1a194:	cmp	r7, r8
   1a198:	bne	1a188 <__assert_fail@plt+0x7880>
   1a19c:	ldr	r0, [r4, #12]
   1a1a0:	bl	12254 <ferror@plt>
   1a1a4:	cmp	r0, #0
   1a1a8:	beq	1a0ac <__assert_fail@plt+0x77a4>
   1a1ac:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1a1b0:	uxth	r5, r0
   1a1b4:	ldr	r0, [r4, #20]
   1a1b8:	cmp	r0, #0
   1a1bc:	bne	1a12c <__assert_fail@plt+0x7824>
   1a1c0:	b	1a138 <__assert_fail@plt+0x7830>
   1a1c4:	add	r3, r2, r3
   1a1c8:	ldr	r2, [pc, #380]	; 1a34c <__assert_fail@plt+0x7a44>
   1a1cc:	ldrb	r3, [r3, #1040]	; 0x410
   1a1d0:	strh	r2, [sp, #10]
   1a1d4:	strb	r3, [sp, #9]
   1a1d8:	b	1a068 <__assert_fail@plt+0x7760>
   1a1dc:	ldr	r2, [r4, #16]
   1a1e0:	ldr	r1, [r4, #12]
   1a1e4:	ldr	r0, [pc, #356]	; 1a350 <__assert_fail@plt+0x7a48>
   1a1e8:	bl	19c3c <__assert_fail@plt+0x7334>
   1a1ec:	cmn	r0, #1
   1a1f0:	beq	1a1ac <__assert_fail@plt+0x78a4>
   1a1f4:	ldr	r7, [r4]
   1a1f8:	b	1a0c4 <__assert_fail@plt+0x77bc>
   1a1fc:	ldr	r2, [r4, #16]
   1a200:	ldr	r1, [r4, #12]
   1a204:	ldr	r0, [pc, #328]	; 1a354 <__assert_fail@plt+0x7a4c>
   1a208:	bl	19c3c <__assert_fail@plt+0x7334>
   1a20c:	ldr	r2, [r4, #28]
   1a210:	ldr	r0, [pc, #296]	; 1a340 <__assert_fail@plt+0x7a38>
   1a214:	lsr	lr, r2, #16
   1a218:	lsr	r3, r2, #8
   1a21c:	lsl	r1, lr, #4
   1a220:	uxtb	r2, r2
   1a224:	uxtb	ip, r3
   1a228:	lsl	r3, r3, #2
   1a22c:	uxtb	lr, lr
   1a230:	and	r1, r1, #48	; 0x30
   1a234:	and	r3, r3, #60	; 0x3c
   1a238:	orr	r1, r1, ip, lsr #4
   1a23c:	orr	r3, r3, r2, lsr #6
   1a240:	and	r7, r2, #63	; 0x3f
   1a244:	add	r1, r0, r1
   1a248:	add	r3, r0, r3
   1a24c:	add	r7, r0, r7
   1a250:	add	r0, r0, lr, lsr #2
   1a254:	ldrb	r8, [r3, #1040]	; 0x410
   1a258:	ldrb	r9, [r1, #1040]	; 0x410
   1a25c:	ldrb	r3, [r7, #1040]	; 0x410
   1a260:	ldrb	r0, [r0, #1040]	; 0x410
   1a264:	ldr	r1, [r4, #16]
   1a268:	strb	r8, [sp, #10]
   1a26c:	cmp	r1, #0
   1a270:	strb	lr, [sp, #4]
   1a274:	strb	r2, [sp, #6]
   1a278:	add	r7, sp, #9
   1a27c:	strb	ip, [sp, #5]
   1a280:	strb	r9, [sp, #9]
   1a284:	strb	r0, [sp, #8]
   1a288:	strb	r3, [sp, #11]
   1a28c:	add	r8, sp, #12
   1a290:	beq	1a2ec <__assert_fail@plt+0x79e4>
   1a294:	bl	12428 <gpgrt_fputc@plt>
   1a298:	cmp	r8, r7
   1a29c:	beq	1a2b4 <__assert_fail@plt+0x79ac>
   1a2a0:	ldrb	r0, [r7], #1
   1a2a4:	ldr	r1, [r4, #16]
   1a2a8:	bl	12428 <gpgrt_fputc@plt>
   1a2ac:	cmp	r8, r7
   1a2b0:	bne	1a2a0 <__assert_fail@plt+0x7998>
   1a2b4:	ldr	r0, [r4, #16]
   1a2b8:	bl	12338 <gpgrt_ferror@plt>
   1a2bc:	cmp	r0, #0
   1a2c0:	bne	1a1ac <__assert_fail@plt+0x78a4>
   1a2c4:	ldr	r3, [r4]
   1a2c8:	tst	r3, #16
   1a2cc:	bne	1a0cc <__assert_fail@plt+0x77c4>
   1a2d0:	ldr	r2, [r4, #16]
   1a2d4:	ldr	r1, [r4, #12]
   1a2d8:	ldr	r0, [pc, #112]	; 1a350 <__assert_fail@plt+0x7a48>
   1a2dc:	bl	19c3c <__assert_fail@plt+0x7334>
   1a2e0:	cmn	r0, #1
   1a2e4:	bne	1a0cc <__assert_fail@plt+0x77c4>
   1a2e8:	b	1a1ac <__assert_fail@plt+0x78a4>
   1a2ec:	ldr	r1, [r4, #12]
   1a2f0:	bl	127c4 <putc@plt>
   1a2f4:	cmp	r8, r7
   1a2f8:	beq	1a310 <__assert_fail@plt+0x7a08>
   1a2fc:	ldrb	r0, [r7], #1
   1a300:	ldr	r1, [r4, #12]
   1a304:	bl	127c4 <putc@plt>
   1a308:	cmp	r8, r7
   1a30c:	bne	1a2fc <__assert_fail@plt+0x79f4>
   1a310:	ldr	r0, [r4, #12]
   1a314:	bl	12254 <ferror@plt>
   1a318:	cmp	r0, #0
   1a31c:	beq	1a2c4 <__assert_fail@plt+0x79bc>
   1a320:	b	1a1ac <__assert_fail@plt+0x78a4>
   1a324:	bl	122fc <__stack_chk_fail@plt>
   1a328:	ldr	r3, [pc, #40]	; 1a358 <__assert_fail@plt+0x7a50>
   1a32c:	ldr	r2, [pc, #40]	; 1a35c <__assert_fail@plt+0x7a54>
   1a330:	ldr	r1, [pc, #40]	; 1a360 <__assert_fail@plt+0x7a58>
   1a334:	ldr	r0, [pc, #40]	; 1a364 <__assert_fail@plt+0x7a5c>
   1a338:	bl	12908 <__assert_fail@plt>
   1a33c:	andeq	r4, r3, r8, lsr fp
   1a340:	andeq	r2, r2, r0, lsl #27
   1a344:	andeq	r3, r2, r4, lsl r2
   1a348:	andeq	r3, r2, r8, ror #3
   1a34c:	andeq	r3, r0, sp, lsr sp
   1a350:	andeq	r1, r2, r0, asr #22
   1a354:	andeq	r3, r2, r0, lsl r2
   1a358:	ldrdeq	r3, [r2], -r0
   1a35c:	andeq	r0, r0, r1, asr #2
   1a360:	strdeq	r3, [r2], -r0
   1a364:	andeq	r3, r2, r8, lsl #4
   1a368:	ldr	r2, [pc, #748]	; 1a65c <__assert_fail@plt+0x7d54>
   1a36c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a370:	add	r3, r1, #7
   1a374:	cmp	r3, r2
   1a378:	bhi	1a558 <__assert_fail@plt+0x7c50>
   1a37c:	ldr	r2, [pc, #732]	; 1a660 <__assert_fail@plt+0x7d58>
   1a380:	lsr	r8, r3, #3
   1a384:	mov	r9, r1
   1a388:	mov	r4, r0
   1a38c:	umull	r1, r0, r2, r8
   1a390:	umull	r2, r3, r2, r3
   1a394:	lsr	r0, r0, #2
   1a398:	lsr	r3, r3, #5
   1a39c:	add	r0, r0, r0, lsl #2
   1a3a0:	sub	r0, r8, r0
   1a3a4:	add	r3, r0, r3, lsl #2
   1a3a8:	lsl	r3, r3, #1
   1a3ac:	cmp	r0, #2
   1a3b0:	movhi	r0, r3
   1a3b4:	addls	r0, r3, #1
   1a3b8:	bl	1217c <gcry_malloc@plt>
   1a3bc:	subs	sl, r0, #0
   1a3c0:	beq	1a550 <__assert_fail@plt+0x7c48>
   1a3c4:	cmp	r8, #4
   1a3c8:	bls	1a654 <__assert_fail@plt+0x7d4c>
   1a3cc:	ldr	r0, [pc, #656]	; 1a664 <__assert_fail@plt+0x7d5c>
   1a3d0:	add	r2, r4, #5
   1a3d4:	add	r3, sl, #8
   1a3d8:	ldrb	lr, [r2, #-4]
   1a3dc:	ldrb	r4, [r2, #-3]
   1a3e0:	ldrb	fp, [r2, #-5]
   1a3e4:	ldrb	ip, [r2, #-2]
   1a3e8:	ldrb	r1, [r2, #-1]
   1a3ec:	lsl	r6, lr, #4
   1a3f0:	lsl	r7, fp, #2
   1a3f4:	lsl	r5, r4, #1
   1a3f8:	and	r6, r6, #16
   1a3fc:	orr	r6, r6, r4, lsr #4
   1a400:	and	r7, r7, #28
   1a404:	lsl	r4, ip, #3
   1a408:	and	r5, r5, #30
   1a40c:	orr	r7, r7, lr, lsr #6
   1a410:	orr	r5, r5, ip, lsr #7
   1a414:	asr	lr, lr, #1
   1a418:	and	r4, r4, #24
   1a41c:	asr	ip, ip, #2
   1a420:	orr	r4, r4, r1, lsr #5
   1a424:	and	lr, lr, #31
   1a428:	and	ip, ip, #31
   1a42c:	and	r1, r1, #31
   1a430:	ldrb	ip, [r0, ip]
   1a434:	ldrb	r4, [r0, r4]
   1a438:	ldrb	fp, [r0, fp, lsr #3]
   1a43c:	ldrb	r7, [r0, r7]
   1a440:	ldrb	lr, [r0, lr]
   1a444:	ldrb	r6, [r0, r6]
   1a448:	ldrb	r5, [r0, r5]
   1a44c:	ldrb	r1, [r0, r1]
   1a450:	sub	r8, r8, #5
   1a454:	cmp	r8, #4
   1a458:	strb	ip, [r3, #-3]
   1a45c:	strb	r4, [r3, #-2]
   1a460:	strb	fp, [r3, #-8]
   1a464:	strb	r7, [r3, #-7]
   1a468:	strb	lr, [r3, #-6]
   1a46c:	strb	r6, [r3, #-5]
   1a470:	strb	r5, [r3, #-4]
   1a474:	strb	r1, [r3, #-1]
   1a478:	mov	r4, r2
   1a47c:	mov	ip, r3
   1a480:	add	r2, r2, #5
   1a484:	add	r3, r3, #8
   1a488:	bhi	1a3d8 <__assert_fail@plt+0x7ad0>
   1a48c:	sub	r8, r8, #1
   1a490:	cmp	r8, #3
   1a494:	ldrls	pc, [pc, r8, lsl #2]
   1a498:	b	1a538 <__assert_fail@plt+0x7c30>
   1a49c:	andeq	sl, r1, r0, ror r5
   1a4a0:	muleq	r1, ip, r5
   1a4a4:	andeq	sl, r1, ip, ror #11
   1a4a8:	andeq	sl, r1, ip, lsr #9
   1a4ac:	ldrb	r0, [r4, #1]
   1a4b0:	ldrb	r3, [r4, #2]
   1a4b4:	ldrb	r5, [r4]
   1a4b8:	ldrb	r2, [r4, #3]
   1a4bc:	lsl	lr, r0, #4
   1a4c0:	and	lr, lr, #16
   1a4c4:	orr	lr, lr, r3, lsr #4
   1a4c8:	lsl	r4, r5, #2
   1a4cc:	lsl	r3, r3, #1
   1a4d0:	and	r4, r4, #28
   1a4d4:	and	r3, r3, #30
   1a4d8:	ldr	r1, [pc, #388]	; 1a664 <__assert_fail@plt+0x7d5c>
   1a4dc:	orr	r3, r3, r2, lsr #7
   1a4e0:	orr	r4, r4, r0, lsr #6
   1a4e4:	asr	r6, r2, #2
   1a4e8:	asr	r0, r0, #1
   1a4ec:	lsl	r2, r2, #3
   1a4f0:	and	r0, r0, #31
   1a4f4:	and	r6, r6, #31
   1a4f8:	and	r2, r2, #24
   1a4fc:	ldrb	r7, [r1, r0]
   1a500:	ldrb	r8, [r1, lr]
   1a504:	ldrb	r4, [r1, r4]
   1a508:	ldrb	lr, [r1, r3]
   1a50c:	ldrb	r5, [r1, r5, lsr #3]
   1a510:	ldrb	r0, [r1, r6]
   1a514:	ldrb	r3, [r1, r2]
   1a518:	strb	r4, [ip, #1]
   1a51c:	strb	r5, [ip]
   1a520:	strb	r7, [ip, #2]
   1a524:	strb	r8, [ip, #3]
   1a528:	strb	lr, [ip, #4]
   1a52c:	strb	r0, [ip, #5]
   1a530:	strb	r3, [ip, #6]
   1a534:	add	ip, ip, #7
   1a538:	ldr	r1, [pc, #288]	; 1a660 <__assert_fail@plt+0x7d58>
   1a53c:	add	r9, r9, #4
   1a540:	mov	r3, #0
   1a544:	umull	r2, r9, r1, r9
   1a548:	strb	r3, [ip]
   1a54c:	strb	r3, [sl, r9, lsr #2]
   1a550:	mov	r0, sl
   1a554:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a558:	bl	12620 <__errno_location@plt>
   1a55c:	mov	sl, #0
   1a560:	mov	r3, #22
   1a564:	str	r3, [r0]
   1a568:	mov	r0, sl
   1a56c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a570:	ldrb	r0, [r4]
   1a574:	ldr	r1, [pc, #232]	; 1a664 <__assert_fail@plt+0x7d5c>
   1a578:	mov	r3, ip
   1a57c:	lsl	r2, r0, #2
   1a580:	and	r2, r2, #28
   1a584:	ldrb	r0, [r1, r0, lsr #3]
   1a588:	ldrb	r2, [r1, r2]
   1a58c:	strb	r0, [r3], #2
   1a590:	strb	r2, [ip, #1]
   1a594:	mov	ip, r3
   1a598:	b	1a538 <__assert_fail@plt+0x7c30>
   1a59c:	ldrb	lr, [r4]
   1a5a0:	ldrb	r3, [r4, #1]
   1a5a4:	ldr	r1, [pc, #184]	; 1a664 <__assert_fail@plt+0x7d5c>
   1a5a8:	add	ip, ip, #4
   1a5ac:	lsl	r2, lr, #2
   1a5b0:	and	r2, r2, #28
   1a5b4:	orr	r2, r2, r3, lsr #6
   1a5b8:	asr	r0, r3, #1
   1a5bc:	lsl	r3, r3, #4
   1a5c0:	and	r0, r0, #31
   1a5c4:	and	r3, r3, #16
   1a5c8:	ldrb	r4, [r1, r2]
   1a5cc:	ldrb	lr, [r1, lr, lsr #3]
   1a5d0:	ldrb	r2, [r1, r0]
   1a5d4:	ldrb	r3, [r1, r3]
   1a5d8:	strb	r4, [ip, #-3]
   1a5dc:	strb	lr, [ip, #-4]
   1a5e0:	strb	r2, [ip, #-2]
   1a5e4:	strb	r3, [ip, #-1]
   1a5e8:	b	1a538 <__assert_fail@plt+0x7c30>
   1a5ec:	ldrb	r3, [r4, #1]
   1a5f0:	ldrb	lr, [r4]
   1a5f4:	ldrb	r2, [r4, #2]
   1a5f8:	ldr	r1, [pc, #100]	; 1a664 <__assert_fail@plt+0x7d5c>
   1a5fc:	lsl	r0, r3, #4
   1a600:	lsl	r4, lr, #2
   1a604:	and	r4, r4, #28
   1a608:	and	r0, r0, #16
   1a60c:	orr	r4, r4, r3, lsr #6
   1a610:	orr	r0, r0, r2, lsr #4
   1a614:	asr	r3, r3, #1
   1a618:	lsl	r2, r2, #1
   1a61c:	and	r3, r3, #31
   1a620:	and	r2, r2, #30
   1a624:	ldrb	r5, [r1, r4]
   1a628:	ldrb	r4, [r1, lr, lsr #3]
   1a62c:	ldrb	lr, [r1, r0]
   1a630:	ldrb	r0, [r1, r3]
   1a634:	ldrb	r3, [r1, r2]
   1a638:	strb	r5, [ip, #1]
   1a63c:	strb	r4, [ip]
   1a640:	strb	lr, [ip, #3]
   1a644:	strb	r0, [ip, #2]
   1a648:	strb	r3, [ip, #4]
   1a64c:	add	ip, ip, #5
   1a650:	b	1a538 <__assert_fail@plt+0x7c30>
   1a654:	mov	ip, sl
   1a658:	b	1a48c <__assert_fail@plt+0x7b84>
   1a65c:	andeq	r0, r8, r7
   1a660:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1a664:	andeq	r3, r2, r0, lsr #4
   1a668:	push	{r4, r5, r6, lr}
   1a66c:	adds	ip, r1, #0
   1a670:	ldr	lr, [pc, #108]	; 1a6e4 <__assert_fail@plt+0x7ddc>
   1a674:	sub	r4, r2, #1
   1a678:	movne	ip, #1
   1a67c:	ldr	r5, [lr]
   1a680:	ands	ip, ip, r5, asr r4
   1a684:	bne	1a690 <__assert_fail@plt+0x7d88>
   1a688:	mov	r0, #0
   1a68c:	pop	{r4, r5, r6, pc}
   1a690:	ldr	r1, [r1]
   1a694:	tst	r1, #1024	; 0x400
   1a698:	beq	1a688 <__assert_fail@plt+0x7d80>
   1a69c:	cmp	r0, #0
   1a6a0:	mov	r4, r3
   1a6a4:	beq	1a6c8 <__assert_fail@plt+0x7dc0>
   1a6a8:	ldr	r3, [lr, #4]
   1a6ac:	cmp	r3, #0
   1a6b0:	beq	1a6c8 <__assert_fail@plt+0x7dc0>
   1a6b4:	mov	r1, r2
   1a6b8:	mov	r2, r4
   1a6bc:	blx	r3
   1a6c0:	cmp	r0, #0
   1a6c4:	beq	1a688 <__assert_fail@plt+0x7d80>
   1a6c8:	cmp	r4, #0
   1a6cc:	beq	1a6dc <__assert_fail@plt+0x7dd4>
   1a6d0:	mov	r1, r4
   1a6d4:	mov	r0, #7
   1a6d8:	bl	17d30 <__assert_fail@plt+0x5428>
   1a6dc:	mov	r0, #1
   1a6e0:	pop	{r4, r5, r6, pc}
   1a6e4:	muleq	r3, r8, r3
   1a6e8:	push	{r4, r5, r6, lr}
   1a6ec:	mov	r6, r0
   1a6f0:	ldr	r5, [pc, #180]	; 1a7ac <__assert_fail@plt+0x7ea4>
   1a6f4:	sub	sp, sp, #24
   1a6f8:	cmp	r2, #0
   1a6fc:	ldr	r0, [r5]
   1a700:	moveq	r4, r2
   1a704:	str	r0, [sp, #20]
   1a708:	beq	1a718 <__assert_fail@plt+0x7e10>
   1a70c:	ldrb	r4, [r2]
   1a710:	cmp	r4, #0
   1a714:	bne	1a734 <__assert_fail@plt+0x7e2c>
   1a718:	ldr	r2, [sp, #20]
   1a71c:	ldr	r3, [r5]
   1a720:	mov	r0, r4
   1a724:	cmp	r2, r3
   1a728:	bne	1a7a8 <__assert_fail@plt+0x7ea0>
   1a72c:	add	sp, sp, #24
   1a730:	pop	{r4, r5, r6, pc}
   1a734:	mov	ip, r3
   1a738:	ldr	lr, [pc, #112]	; 1a7b0 <__assert_fail@plt+0x7ea8>
   1a73c:	ldr	r0, [pc, #112]	; 1a7b4 <__assert_fail@plt+0x7eac>
   1a740:	cmp	ip, #0
   1a744:	str	r2, [sp]
   1a748:	mov	r3, r1
   1a74c:	moveq	r2, r0
   1a750:	movne	r2, lr
   1a754:	ldr	r1, [pc, #92]	; 1a7b8 <__assert_fail@plt+0x7eb0>
   1a758:	add	r0, sp, #16
   1a75c:	bl	1277c <gpgrt_asprintf@plt>
   1a760:	cmp	r0, #0
   1a764:	blt	1a79c <__assert_fail@plt+0x7e94>
   1a768:	mov	r3, #0
   1a76c:	mov	r0, r6
   1a770:	str	r3, [sp, #12]
   1a774:	str	r3, [sp, #8]
   1a778:	str	r3, [sp, #4]
   1a77c:	str	r3, [sp]
   1a780:	mov	r2, r3
   1a784:	ldr	r1, [sp, #16]
   1a788:	bl	12464 <assuan_transact@plt>
   1a78c:	mov	r4, r0
   1a790:	ldr	r0, [sp, #16]
   1a794:	bl	122a8 <gcry_free@plt>
   1a798:	b	1a718 <__assert_fail@plt+0x7e10>
   1a79c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1a7a0:	uxth	r4, r0
   1a7a4:	b	1a718 <__assert_fail@plt+0x7e10>
   1a7a8:	bl	122fc <__stack_chk_fail@plt>
   1a7ac:	andeq	r4, r3, r8, lsr fp
   1a7b0:	andeq	r3, r2, r0, asr #4
   1a7b4:	andeq	r3, r2, r8, lsl #21
   1a7b8:	andeq	r3, r2, r8, asr #4
   1a7bc:	mov	r3, #0
   1a7c0:	push	{r4, r5, r6, lr}
   1a7c4:	mov	r4, r0
   1a7c8:	str	r3, [r0]
   1a7cc:	mov	r6, r1
   1a7d0:	mov	r0, r2
   1a7d4:	ldr	r1, [pc, #128]	; 1a85c <__assert_fail@plt+0x7f54>
   1a7d8:	mov	r5, r2
   1a7dc:	bl	121ac <strcmp@plt>
   1a7e0:	cmp	r0, #0
   1a7e4:	beq	1a854 <__assert_fail@plt+0x7f4c>
   1a7e8:	ldr	r1, [pc, #112]	; 1a860 <__assert_fail@plt+0x7f58>
   1a7ec:	mov	r0, r5
   1a7f0:	bl	121ac <strcmp@plt>
   1a7f4:	ldr	r3, [pc, #104]	; 1a864 <__assert_fail@plt+0x7f5c>
   1a7f8:	ldr	r1, [pc, #104]	; 1a868 <__assert_fail@plt+0x7f60>
   1a7fc:	cmp	r0, #0
   1a800:	movne	r1, r3
   1a804:	mov	r0, r6
   1a808:	mov	r2, #0
   1a80c:	bl	1e6b4 <__assert_fail@plt+0xbdac>
   1a810:	subs	r5, r0, #0
   1a814:	beq	1a848 <__assert_fail@plt+0x7f40>
   1a818:	mov	r1, #0
   1a81c:	bl	207d4 <__assert_fail@plt+0xdecc>
   1a820:	str	r0, [r4]
   1a824:	mov	r0, r5
   1a828:	bl	122a8 <gcry_free@plt>
   1a82c:	ldr	r0, [r4]
   1a830:	cmp	r0, #0
   1a834:	beq	1a848 <__assert_fail@plt+0x7f40>
   1a838:	mvn	r1, #0
   1a83c:	bl	2099c <__assert_fail@plt+0xe094>
   1a840:	cmp	r0, #0
   1a844:	popeq	{r4, r5, r6, pc}
   1a848:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1a84c:	uxth	r0, r0
   1a850:	pop	{r4, r5, r6, pc}
   1a854:	ldr	r1, [pc, #16]	; 1a86c <__assert_fail@plt+0x7f64>
   1a858:	b	1a804 <__assert_fail@plt+0x7efc>
   1a85c:	ldrdeq	r3, [r2], -r4
   1a860:	andeq	r1, r2, r4, lsr pc
   1a864:	muleq	r2, r4, r2
   1a868:	andeq	r3, r2, r4, ror r2
   1a86c:	andeq	r3, r2, r8, asr r2
   1a870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a874:	sub	sp, sp, #12
   1a878:	mov	fp, r3
   1a87c:	mov	r3, #6
   1a880:	ldr	r5, [pc, #232]	; 1a970 <__assert_fail@plt+0x8068>
   1a884:	ldr	sl, [pc, #232]	; 1a974 <__assert_fail@plt+0x806c>
   1a888:	ldr	r9, [pc, #232]	; 1a978 <__assert_fail@plt+0x8070>
   1a88c:	ldr	r6, [pc, #232]	; 1a97c <__assert_fail@plt+0x8074>
   1a890:	str	r0, [sp, #4]
   1a894:	mov	r8, r1
   1a898:	mov	r7, r2
   1a89c:	str	r3, [sp]
   1a8a0:	mov	r4, #0
   1a8a4:	b	1a8ec <__assert_fail@plt+0x7fe4>
   1a8a8:	mov	r0, r5
   1a8ac:	bl	18570 <__assert_fail@plt+0x5c68>
   1a8b0:	mov	r3, #0
   1a8b4:	mov	r2, r3
   1a8b8:	mov	r1, r8
   1a8bc:	mov	r0, fp
   1a8c0:	bl	128fc <assuan_socket_connect@plt>
   1a8c4:	add	r4, r4, r5
   1a8c8:	lsl	r2, r5, #1
   1a8cc:	subs	r3, r0, #0
   1a8d0:	beq	1a934 <__assert_fail@plt+0x802c>
   1a8d4:	cmp	r2, r6
   1a8d8:	movlt	r5, r2
   1a8dc:	ldr	r2, [pc, #156]	; 1a980 <__assert_fail@plt+0x8078>
   1a8e0:	movge	r5, r6
   1a8e4:	cmp	r4, r2
   1a8e8:	bgt	1a964 <__assert_fail@plt+0x805c>
   1a8ec:	sub	r3, sl, r4
   1a8f0:	cmp	r7, #0
   1a8f4:	umull	r2, r3, r9, r3
   1a8f8:	beq	1a8a8 <__assert_fail@plt+0x7fa0>
   1a8fc:	ldr	r2, [sp]
   1a900:	lsr	r3, r3, #18
   1a904:	cmp	r3, r2
   1a908:	bge	1a8a8 <__assert_fail@plt+0x7fa0>
   1a90c:	mov	r2, #5
   1a910:	ldr	r1, [pc, #108]	; 1a984 <__assert_fail@plt+0x807c>
   1a914:	mov	r0, #0
   1a918:	str	r3, [sp]
   1a91c:	bl	122f0 <dcgettext@plt>
   1a920:	ldr	r3, [sp]
   1a924:	ldr	r1, [sp, #4]
   1a928:	mov	r2, r3
   1a92c:	bl	17d34 <__assert_fail@plt+0x542c>
   1a930:	b	1a8a8 <__assert_fail@plt+0x7fa0>
   1a934:	cmp	r7, #0
   1a938:	beq	1a964 <__assert_fail@plt+0x805c>
   1a93c:	mov	r2, #5
   1a940:	ldr	r1, [pc, #64]	; 1a988 <__assert_fail@plt+0x8080>
   1a944:	str	r3, [sp]
   1a948:	bl	122f0 <dcgettext@plt>
   1a94c:	ldr	r1, [sp, #4]
   1a950:	bl	17d34 <__assert_fail@plt+0x542c>
   1a954:	ldr	r3, [sp, #48]	; 0x30
   1a958:	mov	r2, #1
   1a95c:	str	r2, [r3]
   1a960:	ldr	r3, [sp]
   1a964:	mov	r0, r3
   1a968:	add	sp, sp, #12
   1a96c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a970:	ldrdeq	r0, [r0], -r1
   1a974:	subseq	r8, fp, pc, ror sp
   1a978:	tstmi	fp, #2096	; 0x830
   1a97c:	andeq	r4, pc, r0, asr #4
   1a980:	subeq	r4, ip, pc, lsr fp
   1a984:			; <UNDEFINED> instruction: 0x000232b4
   1a988:	andeq	r3, r2, r0, ror #5
   1a98c:	push	{r4, r5, r6, lr}
   1a990:	mov	r5, r0
   1a994:	ldr	r0, [pc, #68]	; 1a9e0 <__assert_fail@plt+0x80d8>
   1a998:	mov	r4, r1
   1a99c:	bl	1247c <getenv@plt>
   1a9a0:	cmp	r0, #0
   1a9a4:	beq	1a9d0 <__assert_fail@plt+0x80c8>
   1a9a8:	mov	r2, #10
   1a9ac:	mov	r1, #0
   1a9b0:	bl	121c4 <strtol@plt>
   1a9b4:	ldr	r3, [pc, #40]	; 1a9e4 <__assert_fail@plt+0x80dc>
   1a9b8:	str	r0, [r3]
   1a9bc:	mov	r1, r5
   1a9c0:	str	r4, [r3, #4]
   1a9c4:	ldr	r0, [pc, #28]	; 1a9e8 <__assert_fail@plt+0x80e0>
   1a9c8:	pop	{r4, r5, r6, lr}
   1a9cc:	b	12260 <assuan_set_log_cb@plt>
   1a9d0:	ldr	r3, [pc, #12]	; 1a9e4 <__assert_fail@plt+0x80dc>
   1a9d4:	mov	r2, #128	; 0x80
   1a9d8:	str	r2, [r3]
   1a9dc:	b	1a9bc <__assert_fail@plt+0x80b4>
   1a9e0:	andeq	r3, r2, r0, lsl #6
   1a9e4:	muleq	r3, r8, r3
   1a9e8:	andeq	sl, r1, r8, ror #12
   1a9ec:	ldr	r3, [pc, #12]	; 1aa00 <__assert_fail@plt+0x80f8>
   1a9f0:	cmp	r0, #0
   1a9f4:	moveq	r0, #128	; 0x80
   1a9f8:	str	r0, [r3]
   1a9fc:	bx	lr
   1aa00:	muleq	r3, r8, r3
   1aa04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa08:	sub	sp, sp, #16
   1aa0c:	ldr	r7, [pc, #716]	; 1ace0 <__assert_fail@plt+0x83d8>
   1aa10:	ldr	r5, [sp, #48]	; 0x30
   1aa14:	mov	r6, r0
   1aa18:	mov	r8, r2
   1aa1c:	ldr	r0, [r7]
   1aa20:	mov	r9, r3
   1aa24:	mov	r1, #0
   1aa28:	str	r0, [sp, #12]
   1aa2c:	str	r1, [sp]
   1aa30:	add	r1, sp, #4
   1aa34:	mov	r0, sp
   1aa38:	bl	1bd68 <__assert_fail@plt+0x9460>
   1aa3c:	subs	r4, r0, #0
   1aa40:	beq	1aac0 <__assert_fail@plt+0x81b8>
   1aa44:	mov	r2, #0
   1aa48:	mov	r1, r4
   1aa4c:	mov	r0, r5
   1aa50:	bl	1bffc <__assert_fail@plt+0x96f4>
   1aa54:	subs	r2, r0, #0
   1aa58:	beq	1aa30 <__assert_fail@plt+0x8128>
   1aa5c:	ldr	r1, [sp, #4]
   1aa60:	cmp	r1, #0
   1aa64:	beq	1aa9c <__assert_fail@plt+0x8194>
   1aa68:	mov	r3, #0
   1aa6c:	mov	r0, r6
   1aa70:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1aa74:	mov	r4, r0
   1aa78:	cmp	r4, #0
   1aa7c:	beq	1aa30 <__assert_fail@plt+0x8128>
   1aa80:	ldr	r2, [sp, #12]
   1aa84:	ldr	r3, [r7]
   1aa88:	mov	r0, r4
   1aa8c:	cmp	r2, r3
   1aa90:	bne	1acdc <__assert_fail@plt+0x83d4>
   1aa94:	add	sp, sp, #16
   1aa98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa9c:	mov	r1, r4
   1aaa0:	mov	r3, #1
   1aaa4:	mov	r0, r6
   1aaa8:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1aaac:	uxth	r3, r0
   1aab0:	cmp	r3, #174	; 0xae
   1aab4:	mov	r4, r0
   1aab8:	bne	1aa78 <__assert_fail@plt+0x8170>
   1aabc:	b	1aa30 <__assert_fail@plt+0x8128>
   1aac0:	mov	r0, r5
   1aac4:	add	r2, sp, #8
   1aac8:	ldr	r1, [pc, #532]	; 1ace4 <__assert_fail@plt+0x83dc>
   1aacc:	bl	1bffc <__assert_fail@plt+0x96f4>
   1aad0:	subs	r5, r0, #0
   1aad4:	beq	1aae4 <__assert_fail@plt+0x81dc>
   1aad8:	ldr	r3, [sp, #8]
   1aadc:	cmp	r3, #0
   1aae0:	moveq	r5, #0
   1aae4:	mov	r1, #0
   1aae8:	mov	r0, r1
   1aaec:	bl	1271c <setlocale@plt>
   1aaf0:	subs	r4, r0, #0
   1aaf4:	beq	1abb0 <__assert_fail@plt+0x82a8>
   1aaf8:	bl	128d8 <gcry_strdup@plt>
   1aafc:	subs	sl, r0, #0
   1ab00:	beq	1ac34 <__assert_fail@plt+0x832c>
   1ab04:	ldr	r1, [pc, #476]	; 1ace8 <__assert_fail@plt+0x83e0>
   1ab08:	mov	r0, #0
   1ab0c:	bl	1271c <setlocale@plt>
   1ab10:	cmp	r8, #0
   1ab14:	beq	1ac0c <__assert_fail@plt+0x8304>
   1ab18:	mov	r2, r8
   1ab1c:	mov	r3, #0
   1ab20:	ldr	r1, [pc, #452]	; 1acec <__assert_fail@plt+0x83e4>
   1ab24:	mov	r0, r6
   1ab28:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1ab2c:	mov	r4, r0
   1ab30:	mov	r1, sl
   1ab34:	mov	r0, #0
   1ab38:	bl	1271c <setlocale@plt>
   1ab3c:	mov	r0, sl
   1ab40:	bl	122a8 <gcry_free@plt>
   1ab44:	cmp	r4, #0
   1ab48:	bne	1aa80 <__assert_fail@plt+0x8178>
   1ab4c:	mov	r1, #0
   1ab50:	mov	r0, #5
   1ab54:	bl	1271c <setlocale@plt>
   1ab58:	subs	r4, r0, #0
   1ab5c:	beq	1abdc <__assert_fail@plt+0x82d4>
   1ab60:	bl	128d8 <gcry_strdup@plt>
   1ab64:	subs	r8, r0, #0
   1ab68:	beq	1ac34 <__assert_fail@plt+0x832c>
   1ab6c:	ldr	r1, [pc, #372]	; 1ace8 <__assert_fail@plt+0x83e0>
   1ab70:	mov	r0, #5
   1ab74:	bl	1271c <setlocale@plt>
   1ab78:	cmp	r9, #0
   1ab7c:	beq	1ac40 <__assert_fail@plt+0x8338>
   1ab80:	mov	r2, r9
   1ab84:	mov	r0, r6
   1ab88:	mov	r3, #0
   1ab8c:	ldr	r1, [pc, #348]	; 1acf0 <__assert_fail@plt+0x83e8>
   1ab90:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1ab94:	mov	r4, r0
   1ab98:	mov	r1, r8
   1ab9c:	mov	r0, #5
   1aba0:	bl	1271c <setlocale@plt>
   1aba4:	mov	r0, r8
   1aba8:	bl	122a8 <gcry_free@plt>
   1abac:	b	1aa80 <__assert_fail@plt+0x8178>
   1abb0:	ldr	r1, [pc, #304]	; 1ace8 <__assert_fail@plt+0x83e0>
   1abb4:	bl	1271c <setlocale@plt>
   1abb8:	cmp	r8, #0
   1abbc:	beq	1ac88 <__assert_fail@plt+0x8380>
   1abc0:	mov	r3, r4
   1abc4:	mov	r2, r8
   1abc8:	ldr	r1, [pc, #284]	; 1acec <__assert_fail@plt+0x83e4>
   1abcc:	mov	r0, r6
   1abd0:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1abd4:	mov	r4, r0
   1abd8:	b	1ab44 <__assert_fail@plt+0x823c>
   1abdc:	ldr	r1, [pc, #260]	; 1ace8 <__assert_fail@plt+0x83e0>
   1abe0:	mov	r0, #5
   1abe4:	bl	1271c <setlocale@plt>
   1abe8:	cmp	r9, #0
   1abec:	beq	1acb0 <__assert_fail@plt+0x83a8>
   1abf0:	mov	r3, r4
   1abf4:	mov	r2, r9
   1abf8:	mov	r0, r6
   1abfc:	ldr	r1, [pc, #236]	; 1acf0 <__assert_fail@plt+0x83e8>
   1ac00:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1ac04:	mov	r4, r0
   1ac08:	b	1aa80 <__assert_fail@plt+0x8178>
   1ac0c:	cmp	r5, #0
   1ac10:	cmpne	r0, #0
   1ac14:	beq	1ac70 <__assert_fail@plt+0x8368>
   1ac18:	mov	r2, r0
   1ac1c:	mov	r3, r8
   1ac20:	ldr	r1, [pc, #196]	; 1acec <__assert_fail@plt+0x83e4>
   1ac24:	mov	r0, r6
   1ac28:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1ac2c:	mov	r4, r0
   1ac30:	b	1ab30 <__assert_fail@plt+0x8228>
   1ac34:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1ac38:	uxth	r4, r0
   1ac3c:	b	1aa80 <__assert_fail@plt+0x8178>
   1ac40:	cmp	r5, #0
   1ac44:	cmpne	r0, #0
   1ac48:	beq	1ac68 <__assert_fail@plt+0x8360>
   1ac4c:	mov	r2, r0
   1ac50:	mov	r3, r9
   1ac54:	mov	r0, r6
   1ac58:	ldr	r1, [pc, #144]	; 1acf0 <__assert_fail@plt+0x83e8>
   1ac5c:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1ac60:	mov	r4, r0
   1ac64:	b	1ab98 <__assert_fail@plt+0x8290>
   1ac68:	mov	r4, r9
   1ac6c:	b	1ab98 <__assert_fail@plt+0x8290>
   1ac70:	mov	r0, r8
   1ac74:	mov	r1, sl
   1ac78:	bl	1271c <setlocale@plt>
   1ac7c:	mov	r0, sl
   1ac80:	bl	122a8 <gcry_free@plt>
   1ac84:	b	1ab4c <__assert_fail@plt+0x8244>
   1ac88:	cmp	r5, #0
   1ac8c:	cmpne	r0, #0
   1ac90:	beq	1ab4c <__assert_fail@plt+0x8244>
   1ac94:	mov	r2, r0
   1ac98:	mov	r3, r8
   1ac9c:	ldr	r1, [pc, #72]	; 1acec <__assert_fail@plt+0x83e4>
   1aca0:	mov	r0, r6
   1aca4:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1aca8:	mov	r4, r0
   1acac:	b	1ab44 <__assert_fail@plt+0x823c>
   1acb0:	cmp	r5, #0
   1acb4:	cmpne	r0, #0
   1acb8:	moveq	r4, r9
   1acbc:	beq	1aa80 <__assert_fail@plt+0x8178>
   1acc0:	mov	r2, r0
   1acc4:	mov	r3, r9
   1acc8:	mov	r0, r6
   1accc:	ldr	r1, [pc, #28]	; 1acf0 <__assert_fail@plt+0x83e8>
   1acd0:	bl	1a6e8 <__assert_fail@plt+0x7de0>
   1acd4:	mov	r4, r0
   1acd8:	b	1aa80 <__assert_fail@plt+0x8178>
   1acdc:	bl	122fc <__stack_chk_fail@plt>
   1ace0:	andeq	r4, r3, r8, lsr fp
   1ace4:	andeq	r3, r2, r0, lsl r3
   1ace8:	andeq	r3, r2, r8, lsl #21
   1acec:	andeq	r3, r2, r4, lsr #6
   1acf0:	andeq	r3, r2, r8, lsl r3
   1acf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acf8:	sub	sp, sp, #84	; 0x54
   1acfc:	ldr	r5, [pc, #1356]	; 1b250 <__assert_fail@plt+0x8948>
   1ad00:	str	r3, [sp, #24]
   1ad04:	ldr	r3, [sp, #120]	; 0x78
   1ad08:	mov	r6, r0
   1ad0c:	str	r3, [sp, #28]
   1ad10:	ldr	r3, [sp, #124]	; 0x7c
   1ad14:	mov	ip, #0
   1ad18:	ldr	lr, [r5]
   1ad1c:	str	r3, [sp, #32]
   1ad20:	ldr	r3, [sp, #144]	; 0x90
   1ad24:	add	r0, sp, #40	; 0x28
   1ad28:	str	ip, [r6]
   1ad2c:	mov	fp, r1
   1ad30:	mov	r7, r2
   1ad34:	str	lr, [sp, #76]	; 0x4c
   1ad38:	str	ip, [sp, #44]	; 0x2c
   1ad3c:	ldr	r9, [sp, #140]	; 0x8c
   1ad40:	str	r3, [sp, #20]
   1ad44:	bl	12578 <assuan_new@plt>
   1ad48:	subs	r4, r0, #0
   1ad4c:	bne	1aef0 <__assert_fail@plt+0x85e8>
   1ad50:	bl	196d8 <__assert_fail@plt+0x6dd0>
   1ad54:	mov	r2, r4
   1ad58:	ldr	r1, [pc, #1268]	; 1b254 <__assert_fail@plt+0x894c>
   1ad5c:	bl	1e604 <__assert_fail@plt+0xbcfc>
   1ad60:	subs	r8, r0, #0
   1ad64:	beq	1b010 <__assert_fail@plt+0x8708>
   1ad68:	mov	r3, r4
   1ad6c:	mov	r2, r4
   1ad70:	mov	r1, r8
   1ad74:	ldr	r0, [sp, #40]	; 0x28
   1ad78:	bl	128fc <assuan_socket_connect@plt>
   1ad7c:	ldr	r3, [sp, #128]	; 0x80
   1ad80:	cmp	r0, #0
   1ad84:	cmpne	r3, #0
   1ad88:	mov	sl, r0
   1ad8c:	beq	1af1c <__assert_fail@plt+0x8614>
   1ad90:	cmp	r7, #0
   1ad94:	beq	1ada4 <__assert_fail@plt+0x849c>
   1ad98:	ldrb	r3, [r7]
   1ad9c:	cmp	r3, #0
   1ada0:	bne	1af68 <__assert_fail@plt+0x8660>
   1ada4:	mov	r0, #1
   1ada8:	bl	19864 <__assert_fail@plt+0x6f5c>
   1adac:	mov	sl, #0
   1adb0:	str	sl, [sp, #36]	; 0x24
   1adb4:	mov	r7, r0
   1adb8:	ldr	r3, [sp, #132]	; 0x84
   1adbc:	cmp	r3, #0
   1adc0:	bne	1af9c <__assert_fail@plt+0x8694>
   1adc4:	cmp	r9, #0
   1adc8:	beq	1ade0 <__assert_fail@plt+0x84d8>
   1adcc:	ldr	r0, [sp, #20]
   1add0:	mov	r3, #0
   1add4:	ldr	r2, [pc, #1148]	; 1b258 <__assert_fail@plt+0x8950>
   1add8:	mov	r1, #50	; 0x32
   1addc:	blx	r9
   1ade0:	bl	192d4 <__assert_fail@plt+0x69cc>
   1ade4:	mov	r1, #0
   1ade8:	bl	1e6b4 <__assert_fail@plt+0xbdac>
   1adec:	subs	r9, r0, #0
   1adf0:	beq	1b068 <__assert_fail@plt+0x8760>
   1adf4:	mov	r0, #0
   1adf8:	bl	12200 <fflush@plt>
   1adfc:	cmp	r0, #0
   1ae00:	bne	1b0b0 <__assert_fail@plt+0x87a8>
   1ae04:	ldr	r2, [pc, #1104]	; 1b25c <__assert_fail@plt+0x8954>
   1ae08:	ldr	r3, [pc, #1104]	; 1b260 <__assert_fail@plt+0x8958>
   1ae0c:	cmp	sl, #0
   1ae10:	str	r2, [sp, #52]	; 0x34
   1ae14:	str	r3, [sp, #60]	; 0x3c
   1ae18:	movne	r2, #4
   1ae1c:	movne	r3, #5
   1ae20:	moveq	r3, #4
   1ae24:	moveq	r2, #3
   1ae28:	add	r1, sp, #80	; 0x50
   1ae2c:	add	r2, r1, r2, lsl #2
   1ae30:	add	r3, r1, r3, lsl #2
   1ae34:	ldr	r1, [pc, #1064]	; 1b264 <__assert_fail@plt+0x895c>
   1ae38:	mov	r4, #0
   1ae3c:	strne	sl, [sp, #64]	; 0x40
   1ae40:	str	r9, [sp, #56]	; 0x38
   1ae44:	str	r1, [r2, #-28]	; 0xffffffe4
   1ae48:	str	r4, [r3, #-28]	; 0xffffffe4
   1ae4c:	bl	192d4 <__assert_fail@plt+0x69cc>
   1ae50:	ldr	r2, [pc, #1040]	; 1b268 <__assert_fail@plt+0x8960>
   1ae54:	mov	r1, r0
   1ae58:	add	r0, sp, #48	; 0x30
   1ae5c:	bl	1a7bc <__assert_fail@plt+0x7eb4>
   1ae60:	subs	sl, r0, #0
   1ae64:	beq	1afb8 <__assert_fail@plt+0x86b0>
   1ae68:	ldr	r0, [sp, #48]	; 0x30
   1ae6c:	cmp	r0, #0
   1ae70:	beq	1b12c <__assert_fail@plt+0x8824>
   1ae74:	bl	20894 <__assert_fail@plt+0xdf8c>
   1ae78:	mov	r3, #0
   1ae7c:	str	r3, [sp, #48]	; 0x30
   1ae80:	mov	r0, r9
   1ae84:	bl	122a8 <gcry_free@plt>
   1ae88:	ldr	r0, [sp, #36]	; 0x24
   1ae8c:	bl	122a8 <gcry_free@plt>
   1ae90:	mov	r0, r8
   1ae94:	bl	122a8 <gcry_free@plt>
   1ae98:	cmp	sl, #0
   1ae9c:	bne	1af3c <__assert_fail@plt+0x8634>
   1aea0:	ldr	r3, [sp, #136]	; 0x88
   1aea4:	cmp	r3, #0
   1aea8:	beq	1aeb8 <__assert_fail@plt+0x85b0>
   1aeac:	ldr	r3, [sp, #44]	; 0x2c
   1aeb0:	cmp	r3, #0
   1aeb4:	beq	1b148 <__assert_fail@plt+0x8840>
   1aeb8:	mov	r3, #0
   1aebc:	str	r3, [sp, #12]
   1aec0:	str	r3, [sp, #8]
   1aec4:	str	r3, [sp, #4]
   1aec8:	str	r3, [sp]
   1aecc:	mov	r2, r3
   1aed0:	ldr	r1, [pc, #916]	; 1b26c <__assert_fail@plt+0x8964>
   1aed4:	ldr	r0, [sp, #40]	; 0x28
   1aed8:	bl	12464 <assuan_transact@plt>
   1aedc:	subs	r4, r0, #0
   1aee0:	beq	1b02c <__assert_fail@plt+0x8724>
   1aee4:	ldr	r0, [sp, #40]	; 0x28
   1aee8:	bl	12740 <assuan_release@plt>
   1aeec:	b	1af00 <__assert_fail@plt+0x85f8>
   1aef0:	bl	127ac <gpg_strerror@plt>
   1aef4:	mov	r1, r0
   1aef8:	ldr	r0, [pc, #880]	; 1b270 <__assert_fail@plt+0x8968>
   1aefc:	bl	17d98 <__assert_fail@plt+0x5490>
   1af00:	ldr	r2, [sp, #76]	; 0x4c
   1af04:	ldr	r3, [r5]
   1af08:	mov	r0, r4
   1af0c:	cmp	r2, r3
   1af10:	bne	1b24c <__assert_fail@plt+0x8944>
   1af14:	add	sp, sp, #84	; 0x54
   1af18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af1c:	mov	r0, r8
   1af20:	bl	122a8 <gcry_free@plt>
   1af24:	cmp	sl, #0
   1af28:	beq	1aea0 <__assert_fail@plt+0x8598>
   1af2c:	ldr	r3, [pc, #832]	; 1b274 <__assert_fail@plt+0x896c>
   1af30:	uxth	r2, sl
   1af34:	cmp	r2, r3
   1af38:	beq	1af50 <__assert_fail@plt+0x8648>
   1af3c:	mov	r0, sl
   1af40:	bl	127ac <gpg_strerror@plt>
   1af44:	mov	r1, r0
   1af48:	ldr	r0, [pc, #808]	; 1b278 <__assert_fail@plt+0x8970>
   1af4c:	bl	17d98 <__assert_fail@plt+0x5490>
   1af50:	lsl	r4, fp, #24
   1af54:	ldr	r0, [sp, #40]	; 0x28
   1af58:	and	r4, r4, #2130706432	; 0x7f000000
   1af5c:	bl	12740 <assuan_release@plt>
   1af60:	orr	r4, r4, #77	; 0x4d
   1af64:	b	1af00 <__assert_fail@plt+0x85f8>
   1af68:	mov	r1, #124	; 0x7c
   1af6c:	mov	r0, r7
   1af70:	bl	125c0 <strchr@plt>
   1af74:	subs	sl, r0, #0
   1af78:	beq	1af8c <__assert_fail@plt+0x8684>
   1af7c:	ldrb	r3, [sl, #1]
   1af80:	cmp	r3, #45	; 0x2d
   1af84:	beq	1b154 <__assert_fail@plt+0x884c>
   1af88:	mov	sl, r4
   1af8c:	ldr	r3, [sp, #132]	; 0x84
   1af90:	str	sl, [sp, #36]	; 0x24
   1af94:	cmp	r3, #0
   1af98:	beq	1adc4 <__assert_fail@plt+0x84bc>
   1af9c:	mov	r2, #5
   1afa0:	ldr	r1, [pc, #724]	; 1b27c <__assert_fail@plt+0x8974>
   1afa4:	mov	r0, #0
   1afa8:	bl	122f0 <dcgettext@plt>
   1afac:	mov	r1, r7
   1afb0:	bl	17d34 <__assert_fail@plt+0x542c>
   1afb4:	b	1adc4 <__assert_fail@plt+0x84bc>
   1afb8:	mov	r3, sl
   1afbc:	mov	r2, sl
   1afc0:	mov	r1, r8
   1afc4:	ldr	r0, [sp, #40]	; 0x28
   1afc8:	bl	128fc <assuan_socket_connect@plt>
   1afcc:	subs	sl, r0, #0
   1afd0:	beq	1b104 <__assert_fail@plt+0x87fc>
   1afd4:	ldr	r3, [sp, #36]	; 0x24
   1afd8:	mov	r2, r4
   1afdc:	cmp	r3, r4
   1afe0:	mov	r0, r3
   1afe4:	add	r1, sp, #52	; 0x34
   1afe8:	moveq	r0, r7
   1afec:	bl	1d2dc <__assert_fail@plt+0xa9d4>
   1aff0:	subs	sl, r0, #0
   1aff4:	beq	1b1a4 <__assert_fail@plt+0x889c>
   1aff8:	bl	127ac <gpg_strerror@plt>
   1affc:	mov	r1, r7
   1b000:	mov	r2, r0
   1b004:	ldr	r0, [pc, #628]	; 1b280 <__assert_fail@plt+0x8978>
   1b008:	bl	17d98 <__assert_fail@plt+0x5490>
   1b00c:	b	1ae68 <__assert_fail@plt+0x8560>
   1b010:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b014:	subs	r4, r0, #0
   1b018:	lslne	r3, fp, #24
   1b01c:	andne	r3, r3, #2130706432	; 0x7f000000
   1b020:	uxthne	r4, r4
   1b024:	orrne	r4, r3, r4
   1b028:	b	1aee4 <__assert_fail@plt+0x85dc>
   1b02c:	ldr	r3, [sp, #32]
   1b030:	mov	r1, fp
   1b034:	str	r3, [sp]
   1b038:	ldr	r0, [sp, #40]	; 0x28
   1b03c:	ldrd	r2, [sp, #24]
   1b040:	bl	1aa04 <__assert_fail@plt+0x80fc>
   1b044:	uxth	r3, r0
   1b048:	cmp	r3, #251	; 0xfb
   1b04c:	mov	r7, r0
   1b050:	beq	1b188 <__assert_fail@plt+0x8880>
   1b054:	cmp	r0, #0
   1b058:	ldr	r0, [sp, #40]	; 0x28
   1b05c:	bne	1b19c <__assert_fail@plt+0x8894>
   1b060:	str	r0, [r6]
   1b064:	b	1af00 <__assert_fail@plt+0x85f8>
   1b068:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b06c:	subs	r4, r0, #0
   1b070:	lslne	r3, fp, #24
   1b074:	uxthne	r4, r4
   1b078:	andne	r3, r3, #2130706432	; 0x7f000000
   1b07c:	orrne	r4, r3, r4
   1b080:	mov	r0, r4
   1b084:	bl	127ac <gpg_strerror@plt>
   1b088:	mov	r1, r0
   1b08c:	ldr	r0, [pc, #496]	; 1b284 <__assert_fail@plt+0x897c>
   1b090:	bl	17d98 <__assert_fail@plt+0x5490>
   1b094:	mov	r0, r8
   1b098:	bl	122a8 <gcry_free@plt>
   1b09c:	ldr	r0, [sp, #40]	; 0x28
   1b0a0:	bl	12740 <assuan_release@plt>
   1b0a4:	ldr	r0, [sp, #36]	; 0x24
   1b0a8:	bl	122a8 <gcry_free@plt>
   1b0ac:	b	1af00 <__assert_fail@plt+0x85f8>
   1b0b0:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b0b4:	subs	r4, r0, #0
   1b0b8:	lslne	r3, fp, #24
   1b0bc:	andne	r3, r3, #2130706432	; 0x7f000000
   1b0c0:	uxthne	r4, r4
   1b0c4:	orrne	r4, r3, r4
   1b0c8:	bl	12620 <__errno_location@plt>
   1b0cc:	ldr	r0, [r0]
   1b0d0:	bl	124dc <strerror@plt>
   1b0d4:	mov	r1, r0
   1b0d8:	ldr	r0, [pc, #424]	; 1b288 <__assert_fail@plt+0x8980>
   1b0dc:	bl	17d98 <__assert_fail@plt+0x5490>
   1b0e0:	mov	r0, r8
   1b0e4:	bl	122a8 <gcry_free@plt>
   1b0e8:	ldr	r0, [sp, #40]	; 0x28
   1b0ec:	bl	12740 <assuan_release@plt>
   1b0f0:	mov	r0, r9
   1b0f4:	bl	122a8 <gcry_free@plt>
   1b0f8:	ldr	r0, [sp, #36]	; 0x24
   1b0fc:	bl	122a8 <gcry_free@plt>
   1b100:	b	1af00 <__assert_fail@plt+0x85f8>
   1b104:	ldr	r0, [sp, #48]	; 0x30
   1b108:	cmp	r0, #0
   1b10c:	bne	1ae74 <__assert_fail@plt+0x856c>
   1b110:	mov	r0, r9
   1b114:	bl	122a8 <gcry_free@plt>
   1b118:	ldr	r0, [sp, #36]	; 0x24
   1b11c:	bl	122a8 <gcry_free@plt>
   1b120:	mov	r0, r8
   1b124:	bl	122a8 <gcry_free@plt>
   1b128:	b	1aea0 <__assert_fail@plt+0x8598>
   1b12c:	mov	r0, r9
   1b130:	bl	122a8 <gcry_free@plt>
   1b134:	ldr	r0, [sp, #36]	; 0x24
   1b138:	bl	122a8 <gcry_free@plt>
   1b13c:	mov	r0, r8
   1b140:	bl	122a8 <gcry_free@plt>
   1b144:	b	1af3c <__assert_fail@plt+0x8634>
   1b148:	ldr	r0, [pc, #316]	; 1b28c <__assert_fail@plt+0x8984>
   1b14c:	bl	17ee4 <__assert_fail@plt+0x55dc>
   1b150:	b	1aeb8 <__assert_fail@plt+0x85b0>
   1b154:	ldrb	r3, [sl, #2]
   1b158:	cmp	r3, #45	; 0x2d
   1b15c:	bne	1af88 <__assert_fail@plt+0x8680>
   1b160:	mov	r0, r7
   1b164:	bl	128d8 <gcry_strdup@plt>
   1b168:	subs	r3, r0, #0
   1b16c:	str	r3, [sp, #36]	; 0x24
   1b170:	beq	1b228 <__assert_fail@plt+0x8920>
   1b174:	mov	r1, #124	; 0x7c
   1b178:	bl	125c0 <strchr@plt>
   1b17c:	mov	sl, r0
   1b180:	strb	r4, [sl], #1
   1b184:	b	1adb8 <__assert_fail@plt+0x84b0>
   1b188:	lsr	r3, r0, #24
   1b18c:	and	r3, r3, #127	; 0x7f
   1b190:	cmp	r3, #4
   1b194:	ldr	r0, [sp, #40]	; 0x28
   1b198:	beq	1b1d4 <__assert_fail@plt+0x88cc>
   1b19c:	mov	r4, r7
   1b1a0:	b	1aee8 <__assert_fail@plt+0x85e0>
   1b1a4:	add	r3, sp, #44	; 0x2c
   1b1a8:	str	r3, [sp]
   1b1ac:	ldr	r2, [sp, #132]	; 0x84
   1b1b0:	ldr	r3, [sp, #40]	; 0x28
   1b1b4:	mov	r1, r8
   1b1b8:	ldr	r0, [pc, #168]	; 1b268 <__assert_fail@plt+0x8960>
   1b1bc:	bl	1a870 <__assert_fail@plt+0x7f68>
   1b1c0:	mov	sl, r0
   1b1c4:	ldr	r0, [sp, #48]	; 0x30
   1b1c8:	cmp	r0, #0
   1b1cc:	beq	1ae80 <__assert_fail@plt+0x8578>
   1b1d0:	b	1ae74 <__assert_fail@plt+0x856c>
   1b1d4:	str	r4, [sp, #12]
   1b1d8:	str	r4, [sp, #8]
   1b1dc:	str	r4, [sp, #4]
   1b1e0:	str	r4, [sp]
   1b1e4:	mov	r3, r4
   1b1e8:	mov	r2, r4
   1b1ec:	ldr	r1, [pc, #156]	; 1b290 <__assert_fail@plt+0x8988>
   1b1f0:	bl	12464 <assuan_transact@plt>
   1b1f4:	cmp	r0, #0
   1b1f8:	movne	r4, r7
   1b1fc:	bne	1aee4 <__assert_fail@plt+0x85dc>
   1b200:	ldr	r3, [sp, #132]	; 0x84
   1b204:	cmp	r3, #0
   1b208:	ldreq	r0, [sp, #40]	; 0x28
   1b20c:	beq	1b060 <__assert_fail@plt+0x8758>
   1b210:	mov	r2, #5
   1b214:	ldr	r1, [pc, #120]	; 1b294 <__assert_fail@plt+0x898c>
   1b218:	bl	122f0 <dcgettext@plt>
   1b21c:	bl	17d34 <__assert_fail@plt+0x542c>
   1b220:	ldr	r0, [sp, #40]	; 0x28
   1b224:	b	1b060 <__assert_fail@plt+0x8758>
   1b228:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b22c:	subs	r4, r0, #0
   1b230:	lslne	r3, fp, #24
   1b234:	andne	r3, r3, #2130706432	; 0x7f000000
   1b238:	uxthne	r4, r4
   1b23c:	mov	r0, r8
   1b240:	orrne	r4, r3, r4
   1b244:	bl	122a8 <gcry_free@plt>
   1b248:	b	1aee4 <__assert_fail@plt+0x85dc>
   1b24c:	bl	122fc <__stack_chk_fail@plt>
   1b250:	andeq	r4, r3, r8, lsr fp
   1b254:	andeq	r3, r2, r8, asr r3
   1b258:	andeq	r3, r2, ip, lsl #7
   1b25c:	andeq	r3, r2, r8, ror #7
   1b260:	strdeq	r3, [r2], -r4
   1b264:	andeq	r3, r2, ip, lsl #8
   1b268:	ldrdeq	r3, [r2], -r4
   1b26c:	andeq	r3, r2, ip, ror r4
   1b270:	andeq	r3, r2, r0, lsr r3
   1b274:	andeq	r0, r0, r3, lsl #2
   1b278:	andeq	r3, r2, r8, lsr r4
   1b27c:	andeq	r3, r2, r4, ror #6
   1b280:	andeq	r3, r2, r8, lsl r4
   1b284:	andeq	r3, r2, r4, lsr #7
   1b288:	andeq	r3, r2, r4, asr #7
   1b28c:	andeq	r3, r2, r8, asr r4
   1b290:	andeq	r3, r2, r4, lsl #9
   1b294:	muleq	r2, r8, r4
   1b298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b29c:	sub	sp, sp, #52	; 0x34
   1b2a0:	ldr	r5, [pc, #828]	; 1b5e4 <__assert_fail@plt+0x8cdc>
   1b2a4:	mov	r6, r0
   1b2a8:	mov	ip, #0
   1b2ac:	ldr	lr, [r5]
   1b2b0:	mov	r9, r3
   1b2b4:	ldr	r3, [sp, #100]	; 0x64
   1b2b8:	add	r0, sp, #16
   1b2bc:	str	ip, [r6]
   1b2c0:	str	r1, [sp, #8]
   1b2c4:	mov	r8, r2
   1b2c8:	str	lr, [sp, #44]	; 0x2c
   1b2cc:	str	ip, [sp, #20]
   1b2d0:	ldr	sl, [sp, #96]	; 0x60
   1b2d4:	str	r3, [sp, #12]
   1b2d8:	bl	12578 <assuan_new@plt>
   1b2dc:	subs	r4, r0, #0
   1b2e0:	bne	1b434 <__assert_fail@plt+0x8b2c>
   1b2e4:	bl	19778 <__assert_fail@plt+0x6e70>
   1b2e8:	mov	r3, r4
   1b2ec:	mov	r2, r4
   1b2f0:	mov	r1, r0
   1b2f4:	mov	fp, r0
   1b2f8:	ldr	r0, [sp, #16]
   1b2fc:	bl	128fc <assuan_socket_connect@plt>
   1b300:	cmp	r0, #0
   1b304:	cmpne	r9, #0
   1b308:	mov	r7, r0
   1b30c:	beq	1b3fc <__assert_fail@plt+0x8af4>
   1b310:	cmp	r8, #0
   1b314:	beq	1b460 <__assert_fail@plt+0x8b58>
   1b318:	ldrb	r3, [r8]
   1b31c:	cmp	r3, #0
   1b320:	beq	1b460 <__assert_fail@plt+0x8b58>
   1b324:	ldr	r3, [sp, #88]	; 0x58
   1b328:	cmp	r3, #0
   1b32c:	bne	1b478 <__assert_fail@plt+0x8b70>
   1b330:	cmp	sl, #0
   1b334:	beq	1b34c <__assert_fail@plt+0x8a44>
   1b338:	ldr	r0, [sp, #12]
   1b33c:	mov	r3, #0
   1b340:	ldr	r2, [pc, #672]	; 1b5e8 <__assert_fail@plt+0x8ce0>
   1b344:	mov	r1, #50	; 0x32
   1b348:	blx	sl
   1b34c:	bl	192d4 <__assert_fail@plt+0x69cc>
   1b350:	mov	r1, #0
   1b354:	bl	1e65c <__assert_fail@plt+0xbd54>
   1b358:	subs	r9, r0, #0
   1b35c:	beq	1b4e8 <__assert_fail@plt+0x8be0>
   1b360:	mov	r0, #0
   1b364:	bl	12200 <fflush@plt>
   1b368:	cmp	r0, #0
   1b36c:	bne	1b494 <__assert_fail@plt+0x8b8c>
   1b370:	ldr	r2, [pc, #628]	; 1b5ec <__assert_fail@plt+0x8ce4>
   1b374:	ldr	r3, [pc, #628]	; 1b5f0 <__assert_fail@plt+0x8ce8>
   1b378:	str	r9, [sp, #36]	; 0x24
   1b37c:	str	r0, [sp, #40]	; 0x28
   1b380:	strd	r2, [sp, #28]
   1b384:	bl	192d4 <__assert_fail@plt+0x69cc>
   1b388:	ldr	r2, [pc, #612]	; 1b5f4 <__assert_fail@plt+0x8cec>
   1b38c:	mov	r1, r0
   1b390:	add	r0, sp, #24
   1b394:	bl	1a7bc <__assert_fail@plt+0x7eb4>
   1b398:	subs	r7, r0, #0
   1b39c:	beq	1b524 <__assert_fail@plt+0x8c1c>
   1b3a0:	ldr	r0, [sp, #24]
   1b3a4:	cmp	r0, #0
   1b3a8:	beq	1b568 <__assert_fail@plt+0x8c60>
   1b3ac:	bl	20894 <__assert_fail@plt+0xdf8c>
   1b3b0:	mov	r3, #0
   1b3b4:	str	r3, [sp, #24]
   1b3b8:	mov	r0, r9
   1b3bc:	bl	122a8 <gcry_free@plt>
   1b3c0:	cmp	r7, #0
   1b3c4:	beq	1b404 <__assert_fail@plt+0x8afc>
   1b3c8:	mov	r0, r7
   1b3cc:	bl	127ac <gpg_strerror@plt>
   1b3d0:	mov	r1, fp
   1b3d4:	mov	r2, r0
   1b3d8:	ldr	r0, [pc, #536]	; 1b5f8 <__assert_fail@plt+0x8cf0>
   1b3dc:	bl	17d98 <__assert_fail@plt+0x5490>
   1b3e0:	ldr	r0, [sp, #16]
   1b3e4:	bl	12740 <assuan_release@plt>
   1b3e8:	ldr	r3, [sp, #8]
   1b3ec:	lsl	r4, r3, #24
   1b3f0:	and	r4, r4, #2130706432	; 0x7f000000
   1b3f4:	orr	r4, r4, #92	; 0x5c
   1b3f8:	b	1b418 <__assert_fail@plt+0x8b10>
   1b3fc:	cmp	r0, #0
   1b400:	bne	1b4d4 <__assert_fail@plt+0x8bcc>
   1b404:	ldr	r3, [sp, #92]	; 0x5c
   1b408:	cmp	r3, #0
   1b40c:	bne	1b448 <__assert_fail@plt+0x8b40>
   1b410:	ldr	r3, [sp, #16]
   1b414:	str	r3, [r6]
   1b418:	ldr	r2, [sp, #44]	; 0x2c
   1b41c:	ldr	r3, [r5]
   1b420:	mov	r0, r4
   1b424:	cmp	r2, r3
   1b428:	bne	1b5e0 <__assert_fail@plt+0x8cd8>
   1b42c:	add	sp, sp, #52	; 0x34
   1b430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b434:	bl	127ac <gpg_strerror@plt>
   1b438:	mov	r1, r0
   1b43c:	ldr	r0, [pc, #440]	; 1b5fc <__assert_fail@plt+0x8cf4>
   1b440:	bl	17d98 <__assert_fail@plt+0x5490>
   1b444:	b	1b418 <__assert_fail@plt+0x8b10>
   1b448:	ldr	r3, [sp, #20]
   1b44c:	cmp	r3, #0
   1b450:	bne	1b410 <__assert_fail@plt+0x8b08>
   1b454:	ldr	r0, [pc, #420]	; 1b600 <__assert_fail@plt+0x8cf8>
   1b458:	bl	17ee4 <__assert_fail@plt+0x55dc>
   1b45c:	b	1b410 <__assert_fail@plt+0x8b08>
   1b460:	mov	r0, #4
   1b464:	bl	19864 <__assert_fail@plt+0x6f5c>
   1b468:	ldr	r3, [sp, #88]	; 0x58
   1b46c:	cmp	r3, #0
   1b470:	mov	r8, r0
   1b474:	beq	1b330 <__assert_fail@plt+0x8a28>
   1b478:	mov	r2, #5
   1b47c:	ldr	r1, [pc, #384]	; 1b604 <__assert_fail@plt+0x8cfc>
   1b480:	mov	r0, #0
   1b484:	bl	122f0 <dcgettext@plt>
   1b488:	mov	r1, r8
   1b48c:	bl	17d34 <__assert_fail@plt+0x542c>
   1b490:	b	1b330 <__assert_fail@plt+0x8a28>
   1b494:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b498:	subs	r4, r0, #0
   1b49c:	ldrne	r3, [sp, #8]
   1b4a0:	uxthne	r4, r4
   1b4a4:	lslne	sl, r3, #24
   1b4a8:	andne	sl, sl, #2130706432	; 0x7f000000
   1b4ac:	orrne	r4, sl, r4
   1b4b0:	bl	12620 <__errno_location@plt>
   1b4b4:	ldr	r0, [r0]
   1b4b8:	bl	124dc <strerror@plt>
   1b4bc:	mov	r1, r0
   1b4c0:	ldr	r0, [pc, #320]	; 1b608 <__assert_fail@plt+0x8d00>
   1b4c4:	bl	17d98 <__assert_fail@plt+0x5490>
   1b4c8:	ldr	r0, [sp, #16]
   1b4cc:	bl	12740 <assuan_release@plt>
   1b4d0:	b	1b418 <__assert_fail@plt+0x8b10>
   1b4d4:	ldr	r3, [pc, #304]	; 1b60c <__assert_fail@plt+0x8d04>
   1b4d8:	uxth	r2, r0
   1b4dc:	cmp	r2, r3
   1b4e0:	bne	1b3c8 <__assert_fail@plt+0x8ac0>
   1b4e4:	b	1b3e0 <__assert_fail@plt+0x8ad8>
   1b4e8:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b4ec:	subs	r4, r0, #0
   1b4f0:	ldrne	r3, [sp, #8]
   1b4f4:	uxthne	r4, r4
   1b4f8:	lslne	sl, r3, #24
   1b4fc:	andne	sl, sl, #2130706432	; 0x7f000000
   1b500:	orrne	r4, sl, r4
   1b504:	mov	r0, r4
   1b508:	bl	127ac <gpg_strerror@plt>
   1b50c:	mov	r1, r0
   1b510:	ldr	r0, [pc, #248]	; 1b610 <__assert_fail@plt+0x8d08>
   1b514:	bl	17d98 <__assert_fail@plt+0x5490>
   1b518:	ldr	r0, [sp, #16]
   1b51c:	bl	12740 <assuan_release@plt>
   1b520:	b	1b418 <__assert_fail@plt+0x8b10>
   1b524:	mov	r3, r7
   1b528:	mov	r2, r7
   1b52c:	mov	r1, fp
   1b530:	ldr	r0, [sp, #16]
   1b534:	bl	128fc <assuan_socket_connect@plt>
   1b538:	subs	r3, r0, #0
   1b53c:	bne	1b574 <__assert_fail@plt+0x8c6c>
   1b540:	ldr	r0, [sp, #24]
   1b544:	str	r3, [sp, #8]
   1b548:	cmp	r0, #0
   1b54c:	beq	1b5a4 <__assert_fail@plt+0x8c9c>
   1b550:	bl	20894 <__assert_fail@plt+0xdf8c>
   1b554:	ldr	r3, [sp, #8]
   1b558:	mov	r0, r9
   1b55c:	str	r3, [sp, #24]
   1b560:	bl	122a8 <gcry_free@plt>
   1b564:	b	1b404 <__assert_fail@plt+0x8afc>
   1b568:	mov	r0, r9
   1b56c:	bl	122a8 <gcry_free@plt>
   1b570:	b	1b3c8 <__assert_fail@plt+0x8ac0>
   1b574:	mov	r2, r7
   1b578:	add	r1, sp, #28
   1b57c:	mov	r0, r8
   1b580:	bl	1d2dc <__assert_fail@plt+0xa9d4>
   1b584:	subs	r7, r0, #0
   1b588:	beq	1b5b0 <__assert_fail@plt+0x8ca8>
   1b58c:	bl	127ac <gpg_strerror@plt>
   1b590:	mov	r1, r8
   1b594:	mov	r2, r0
   1b598:	ldr	r0, [pc, #116]	; 1b614 <__assert_fail@plt+0x8d0c>
   1b59c:	bl	17d98 <__assert_fail@plt+0x5490>
   1b5a0:	b	1b3a0 <__assert_fail@plt+0x8a98>
   1b5a4:	mov	r0, r9
   1b5a8:	bl	122a8 <gcry_free@plt>
   1b5ac:	b	1b404 <__assert_fail@plt+0x8afc>
   1b5b0:	add	r3, sp, #20
   1b5b4:	str	r3, [sp]
   1b5b8:	ldr	r2, [sp, #88]	; 0x58
   1b5bc:	ldr	r3, [sp, #16]
   1b5c0:	mov	r1, fp
   1b5c4:	ldr	r0, [pc, #40]	; 1b5f4 <__assert_fail@plt+0x8cec>
   1b5c8:	bl	1a870 <__assert_fail@plt+0x7f68>
   1b5cc:	mov	r7, r0
   1b5d0:	ldr	r0, [sp, #24]
   1b5d4:	cmp	r0, #0
   1b5d8:	beq	1b3b8 <__assert_fail@plt+0x8ab0>
   1b5dc:	b	1b3ac <__assert_fail@plt+0x8aa4>
   1b5e0:	bl	122fc <__stack_chk_fail@plt>
   1b5e4:	andeq	r4, r3, r8, lsr fp
   1b5e8:	andeq	r3, r2, r8, ror #9
   1b5ec:	andeq	r3, r2, ip, lsl #8
   1b5f0:	andeq	r3, r2, r8, ror #7
   1b5f4:	andeq	r1, r2, r4, lsr pc
   1b5f8:	andeq	r3, r2, r8, lsr #10
   1b5fc:	andeq	r3, r2, r0, lsr r3
   1b600:	andeq	r3, r2, r0, asr r5
   1b604:	andeq	r3, r2, r4, asr #9
   1b608:	andeq	r3, r2, r4, asr #7
   1b60c:	andeq	r0, r0, r3, lsl #2
   1b610:	andeq	r3, r2, r4, lsr #7
   1b614:	andeq	r3, r2, r0, lsl #10
   1b618:	push	{r4, r5, r6, r7, r8, lr}
   1b61c:	sub	sp, sp, #40	; 0x28
   1b620:	ldr	r5, [pc, #192]	; 1b6e8 <__assert_fail@plt+0x8de0>
   1b624:	mov	r6, r1
   1b628:	mov	r8, r0
   1b62c:	ldr	r3, [r5]
   1b630:	add	r0, sp, #20
   1b634:	mov	r1, #64	; 0x40
   1b638:	mov	r7, r2
   1b63c:	str	r3, [sp, #36]	; 0x24
   1b640:	bl	20f3c <__assert_fail@plt+0xe634>
   1b644:	ldr	r3, [pc, #160]	; 1b6ec <__assert_fail@plt+0x8de4>
   1b648:	mov	r4, #0
   1b64c:	cmp	r6, #2
   1b650:	ldr	r1, [pc, #152]	; 1b6f0 <__assert_fail@plt+0x8de8>
   1b654:	mov	r0, r8
   1b658:	movne	r1, r3
   1b65c:	str	r4, [sp, #12]
   1b660:	add	r3, sp, #20
   1b664:	str	r4, [sp, #8]
   1b668:	str	r4, [sp, #4]
   1b66c:	str	r4, [sp]
   1b670:	ldr	r2, [pc, #124]	; 1b6f4 <__assert_fail@plt+0x8dec>
   1b674:	bl	12464 <assuan_transact@plt>
   1b678:	subs	r6, r0, #0
   1b67c:	beq	1b6b0 <__assert_fail@plt+0x8da8>
   1b680:	mov	r1, r4
   1b684:	add	r0, sp, #20
   1b688:	bl	2117c <__assert_fail@plt+0xe874>
   1b68c:	bl	122a8 <gcry_free@plt>
   1b690:	str	r4, [r7]
   1b694:	ldr	r2, [sp, #36]	; 0x24
   1b698:	ldr	r3, [r5]
   1b69c:	mov	r0, r6
   1b6a0:	cmp	r2, r3
   1b6a4:	bne	1b6e4 <__assert_fail@plt+0x8ddc>
   1b6a8:	add	sp, sp, #40	; 0x28
   1b6ac:	pop	{r4, r5, r6, r7, r8, pc}
   1b6b0:	mov	r2, #1
   1b6b4:	ldr	r1, [pc, #60]	; 1b6f8 <__assert_fail@plt+0x8df0>
   1b6b8:	add	r0, sp, #20
   1b6bc:	bl	20fec <__assert_fail@plt+0xe6e4>
   1b6c0:	mov	r1, r6
   1b6c4:	add	r0, sp, #20
   1b6c8:	bl	2117c <__assert_fail@plt+0xe874>
   1b6cc:	cmp	r0, #0
   1b6d0:	str	r0, [r7]
   1b6d4:	bne	1b694 <__assert_fail@plt+0x8d8c>
   1b6d8:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1b6dc:	uxth	r6, r0
   1b6e0:	b	1b694 <__assert_fail@plt+0x8d8c>
   1b6e4:	bl	122fc <__stack_chk_fail@plt>
   1b6e8:	andeq	r4, r3, r8, lsr fp
   1b6ec:	andeq	r3, r2, ip, ror r5
   1b6f0:	andeq	r3, r2, r8, ror r5
   1b6f4:	muleq	r2, r4, r0
   1b6f8:	andeq	r3, r2, r8, lsl #21
   1b6fc:	ldr	r3, [pc, #8]	; 1b70c <__assert_fail@plt+0x8e04>
   1b700:	mov	r2, #1
   1b704:	str	r2, [r3]
   1b708:	bx	lr
   1b70c:	andeq	r5, r3, r0, lsr #7
   1b710:	push	{r4, r5, r6, lr}
   1b714:	sub	sp, sp, #288	; 0x120
   1b718:	ldr	r4, [pc, #108]	; 1b78c <__assert_fail@plt+0x8e84>
   1b71c:	cmp	r2, #0
   1b720:	mov	r6, r1
   1b724:	ldr	r3, [r4]
   1b728:	mov	r5, r0
   1b72c:	str	r3, [sp, #284]	; 0x11c
   1b730:	beq	1b74c <__assert_fail@plt+0x8e44>
   1b734:	add	r2, sp, #4
   1b738:	mov	r1, #0
   1b73c:	bl	123bc <sigaction@plt>
   1b740:	ldr	r3, [sp, #4]
   1b744:	cmp	r3, #1
   1b748:	beq	1b770 <__assert_fail@plt+0x8e68>
   1b74c:	add	r0, sp, #148	; 0x94
   1b750:	str	r6, [sp, #144]	; 0x90
   1b754:	bl	12728 <sigemptyset@plt>
   1b758:	mov	r3, #0
   1b75c:	mov	r0, r5
   1b760:	add	r1, sp, #144	; 0x90
   1b764:	mov	r2, r3
   1b768:	str	r3, [sp, #276]	; 0x114
   1b76c:	bl	123bc <sigaction@plt>
   1b770:	ldr	r2, [sp, #284]	; 0x11c
   1b774:	ldr	r3, [r4]
   1b778:	cmp	r2, r3
   1b77c:	bne	1b788 <__assert_fail@plt+0x8e80>
   1b780:	add	sp, sp, #288	; 0x120
   1b784:	pop	{r4, r5, r6, pc}
   1b788:	bl	122fc <__stack_chk_fail@plt>
   1b78c:	andeq	r4, r3, r8, lsr fp
   1b790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b794:	mov	r7, r0
   1b798:	ldr	r4, [pc, #392]	; 1b928 <__assert_fail@plt+0x9020>
   1b79c:	sub	sp, sp, #12
   1b7a0:	ldr	r3, [r4, #4]
   1b7a4:	cmp	r3, #0
   1b7a8:	bne	1b908 <__assert_fail@plt+0x9000>
   1b7ac:	ldr	r3, [r4, #8]
   1b7b0:	mov	r2, #1
   1b7b4:	cmp	r3, #0
   1b7b8:	str	r2, [r4, #4]
   1b7bc:	beq	1b7c4 <__assert_fail@plt+0x8ebc>
   1b7c0:	blx	r3
   1b7c4:	mov	r2, #1
   1b7c8:	ldr	r1, [pc, #348]	; 1b92c <__assert_fail@plt+0x9024>
   1b7cc:	mov	r0, #2
   1b7d0:	bl	12698 <write@plt>
   1b7d4:	mov	r0, #0
   1b7d8:	bl	17b44 <__assert_fail@plt+0x523c>
   1b7dc:	subs	r4, r0, #0
   1b7e0:	beq	1b7f8 <__assert_fail@plt+0x8ef0>
   1b7e4:	bl	1259c <strlen@plt>
   1b7e8:	mov	r1, r4
   1b7ec:	mov	r2, r0
   1b7f0:	mov	r0, #2
   1b7f4:	bl	12698 <write@plt>
   1b7f8:	mov	r2, #9
   1b7fc:	ldr	r1, [pc, #300]	; 1b930 <__assert_fail@plt+0x9028>
   1b800:	mov	r0, #2
   1b804:	bl	12698 <write@plt>
   1b808:	cmp	r7, #64	; 0x40
   1b80c:	bhi	1b8a4 <__assert_fail@plt+0x8f9c>
   1b810:	ldr	r3, [pc, #284]	; 1b934 <__assert_fail@plt+0x902c>
   1b814:	ldr	r1, [r3, r7, lsl #2]
   1b818:	cmp	r1, #0
   1b81c:	bne	1b910 <__assert_fail@plt+0x9008>
   1b820:	ldr	r4, [pc, #272]	; 1b938 <__assert_fail@plt+0x9030>
   1b824:	ldr	r9, [pc, #272]	; 1b93c <__assert_fail@plt+0x9034>
   1b828:	ldr	r8, [pc, #272]	; 1b940 <__assert_fail@plt+0x9038>
   1b82c:	mov	r5, r1
   1b830:	mov	sl, r7
   1b834:	mov	r6, #5
   1b838:	cmp	r4, sl
   1b83c:	and	r3, r5, #1
   1b840:	mov	r1, r4
   1b844:	mov	r0, sl
   1b848:	ble	1b8e4 <__assert_fail@plt+0x8fdc>
   1b84c:	cmp	r4, #1
   1b850:	orreq	r3, r3, #1
   1b854:	cmp	r3, #0
   1b858:	moveq	r5, r3
   1b85c:	beq	1b88c <__assert_fail@plt+0x8f84>
   1b860:	bl	2134c <__assert_fail@plt+0xea44>
   1b864:	mov	r2, #1
   1b868:	mov	r1, r9
   1b86c:	cmp	r0, #0
   1b870:	mov	r0, #2
   1b874:	bne	1b88c <__assert_fail@plt+0x8f84>
   1b878:	bl	12698 <write@plt>
   1b87c:	mov	r0, sl
   1b880:	mov	r1, r4
   1b884:	bl	2156c <__assert_fail@plt+0xec64>
   1b888:	mov	sl, r1
   1b88c:	smull	r2, r3, r8, r4
   1b890:	subs	r6, r6, #1
   1b894:	asr	r4, r4, #31
   1b898:	rsb	r4, r4, r3, asr #2
   1b89c:	bne	1b838 <__assert_fail@plt+0x8f30>
   1b8a0:	b	1b8b4 <__assert_fail@plt+0x8fac>
   1b8a4:	ldr	r1, [pc, #152]	; 1b944 <__assert_fail@plt+0x903c>
   1b8a8:	mov	r2, #1
   1b8ac:	mov	r0, #2
   1b8b0:	bl	12698 <write@plt>
   1b8b4:	mov	r2, #20
   1b8b8:	ldr	r1, [pc, #136]	; 1b948 <__assert_fail@plt+0x9040>
   1b8bc:	mov	r0, #2
   1b8c0:	bl	12698 <write@plt>
   1b8c4:	mov	r2, #0
   1b8c8:	mov	r0, r7
   1b8cc:	mov	r1, r2
   1b8d0:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b8d4:	mov	r0, r7
   1b8d8:	add	sp, sp, #12
   1b8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8e0:	b	12164 <raise@plt>
   1b8e4:	bl	2134c <__assert_fail@plt+0xea44>
   1b8e8:	mov	r2, #1
   1b8ec:	mov	fp, r0
   1b8f0:	add	r1, r9, r0
   1b8f4:	mov	r0, #2
   1b8f8:	bl	12698 <write@plt>
   1b8fc:	cmp	fp, #0
   1b900:	movne	r5, #1
   1b904:	b	1b87c <__assert_fail@plt+0x8f74>
   1b908:	bl	12164 <raise@plt>
   1b90c:	b	1b7ac <__assert_fail@plt+0x8ea4>
   1b910:	mov	r0, r1
   1b914:	str	r1, [sp, #4]
   1b918:	bl	1259c <strlen@plt>
   1b91c:	ldr	r1, [sp, #4]
   1b920:	mov	r2, r0
   1b924:	b	1b8ac <__assert_fail@plt+0x8fa4>
   1b928:	andeq	r5, r3, r0, lsr #7
   1b92c:	andeq	r1, r2, r0, asr #22
   1b930:	andeq	r3, r2, r4, lsr #11
   1b934:	andeq	r4, r3, ip, lsr fp
   1b938:	andeq	r2, r0, r0, lsl r7
   1b93c:			; <UNDEFINED> instruction: 0x000235b0
   1b940:	strbtvs	r6, [r6], -r7, ror #12
   1b944:	andeq	r3, r2, r0, lsr #11
   1b948:			; <UNDEFINED> instruction: 0x000235bc
   1b94c:	push	{r4, lr}
   1b950:	subs	r4, r0, #0
   1b954:	bne	1b9d8 <__assert_fail@plt+0x90d0>
   1b958:	ldr	ip, [pc, #140]	; 1b9ec <__assert_fail@plt+0x90e4>
   1b95c:	mov	r3, r1
   1b960:	mov	r2, #1
   1b964:	ldr	r1, [pc, #132]	; 1b9f0 <__assert_fail@plt+0x90e8>
   1b968:	mov	r0, #2
   1b96c:	str	r3, [ip, #8]
   1b970:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b974:	mov	r2, #1
   1b978:	mov	r0, r2
   1b97c:	ldr	r1, [pc, #108]	; 1b9f0 <__assert_fail@plt+0x90e8>
   1b980:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b984:	mov	r2, #1
   1b988:	ldr	r1, [pc, #96]	; 1b9f0 <__assert_fail@plt+0x90e8>
   1b98c:	mov	r0, #15
   1b990:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b994:	mov	r2, #1
   1b998:	ldr	r1, [pc, #80]	; 1b9f0 <__assert_fail@plt+0x90e8>
   1b99c:	mov	r0, #3
   1b9a0:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b9a4:	mov	r2, #1
   1b9a8:	ldr	r1, [pc, #64]	; 1b9f0 <__assert_fail@plt+0x90e8>
   1b9ac:	mov	r0, #11
   1b9b0:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b9b4:	mov	r2, r4
   1b9b8:	ldr	r1, [pc, #52]	; 1b9f4 <__assert_fail@plt+0x90ec>
   1b9bc:	mov	r0, #10
   1b9c0:	bl	1b710 <__assert_fail@plt+0x8e08>
   1b9c4:	mov	r2, r4
   1b9c8:	mov	r1, #1
   1b9cc:	mov	r0, #13
   1b9d0:	pop	{r4, lr}
   1b9d4:	b	1b710 <__assert_fail@plt+0x8e08>
   1b9d8:	ldr	r3, [pc, #24]	; 1b9f8 <__assert_fail@plt+0x90f0>
   1b9dc:	mov	r2, #169	; 0xa9
   1b9e0:	ldr	r1, [pc, #20]	; 1b9fc <__assert_fail@plt+0x90f4>
   1b9e4:	ldr	r0, [pc, #20]	; 1ba00 <__assert_fail@plt+0x90f8>
   1b9e8:	bl	12908 <__assert_fail@plt>
   1b9ec:	andeq	r5, r3, r0, lsr #7
   1b9f0:	muleq	r1, r0, r7
   1b9f4:	strdeq	fp, [r1], -ip
   1b9f8:	andeq	r3, r2, ip, lsl #11
   1b9fc:	ldrdeq	r3, [r2], -r4
   1ba00:	andeq	r3, r2, ip, ror #11
   1ba04:	push	{r4, r5, r6, lr}
   1ba08:	sub	sp, sp, #136	; 0x88
   1ba0c:	ldr	r4, [pc, #88]	; 1ba6c <__assert_fail@plt+0x9164>
   1ba10:	ldr	r5, [pc, #88]	; 1ba70 <__assert_fail@plt+0x9168>
   1ba14:	ldr	r6, [r4, #12]
   1ba18:	ldr	r3, [r5]
   1ba1c:	cmp	r6, #0
   1ba20:	str	r3, [sp, #132]	; 0x84
   1ba24:	bne	1ba60 <__assert_fail@plt+0x9158>
   1ba28:	add	r0, sp, #4
   1ba2c:	bl	125fc <sigfillset@plt>
   1ba30:	add	r1, sp, #4
   1ba34:	add	r2, r4, #16
   1ba38:	mov	r0, r6
   1ba3c:	bl	12218 <sigprocmask@plt>
   1ba40:	ldr	r1, [sp, #132]	; 0x84
   1ba44:	ldr	r2, [r5]
   1ba48:	mov	r3, #1
   1ba4c:	cmp	r1, r2
   1ba50:	str	r3, [r4, #12]
   1ba54:	bne	1ba68 <__assert_fail@plt+0x9160>
   1ba58:	add	sp, sp, #136	; 0x88
   1ba5c:	pop	{r4, r5, r6, pc}
   1ba60:	ldr	r0, [pc, #12]	; 1ba74 <__assert_fail@plt+0x916c>
   1ba64:	bl	17ea0 <__assert_fail@plt+0x5598>
   1ba68:	bl	122fc <__stack_chk_fail@plt>
   1ba6c:	andeq	r5, r3, r0, lsr #7
   1ba70:	andeq	r4, r3, r8, lsr fp
   1ba74:	strdeq	r3, [r2], -r4
   1ba78:	push	{r4, lr}
   1ba7c:	ldr	r4, [pc, #44]	; 1bab0 <__assert_fail@plt+0x91a8>
   1ba80:	ldr	r3, [r4, #12]
   1ba84:	cmp	r3, #0
   1ba88:	beq	1baa8 <__assert_fail@plt+0x91a0>
   1ba8c:	mov	r2, #0
   1ba90:	add	r1, r4, #16
   1ba94:	mov	r0, #2
   1ba98:	bl	12218 <sigprocmask@plt>
   1ba9c:	mov	r3, #0
   1baa0:	str	r3, [r4, #12]
   1baa4:	pop	{r4, pc}
   1baa8:	ldr	r0, [pc, #4]	; 1bab4 <__assert_fail@plt+0x91ac>
   1baac:	bl	17ea0 <__assert_fail@plt+0x5598>
   1bab0:	andeq	r5, r3, r0, lsr #7
   1bab4:	andeq	r3, r2, r4, lsl r6
   1bab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1babc:	sub	sp, sp, #28
   1bac0:	cmp	r3, #0
   1bac4:	str	r3, [sp, #20]
   1bac8:	addeq	r3, r2, #1
   1bacc:	addeq	r3, r1, r3
   1bad0:	streq	r3, [sp, #20]
   1bad4:	str	r0, [sp, #12]
   1bad8:	ldr	r0, [sp, #20]
   1badc:	mov	r9, r1
   1bae0:	mov	r7, r2
   1bae4:	bl	1259c <strlen@plt>
   1bae8:	ldr	r3, [sp, #12]
   1baec:	ldr	r8, [r3, #4]
   1baf0:	cmp	r8, #0
   1baf4:	str	r0, [sp, #16]
   1baf8:	beq	1bc48 <__assert_fail@plt+0x9340>
   1bafc:	ldr	r6, [r3, #8]
   1bb00:	mvn	r3, #0
   1bb04:	str	r3, [sp, #8]
   1bb08:	sub	r6, r6, #4
   1bb0c:	mov	r4, #0
   1bb10:	b	1bb40 <__assert_fail@plt+0x9238>
   1bb14:	bl	1289c <strncmp@plt>
   1bb18:	subs	r3, r0, #0
   1bb1c:	str	r3, [sp, #4]
   1bb20:	mov	r0, fp
   1bb24:	bne	1bb34 <__assert_fail@plt+0x922c>
   1bb28:	bl	1259c <strlen@plt>
   1bb2c:	cmp	r0, r7
   1bb30:	beq	1bbfc <__assert_fail@plt+0x92f4>
   1bb34:	add	r4, r4, #1
   1bb38:	cmp	r8, r4
   1bb3c:	beq	1bb70 <__assert_fail@plt+0x9268>
   1bb40:	ldr	r5, [r6, #4]!
   1bb44:	mov	r2, r7
   1bb48:	add	fp, r5, #8
   1bb4c:	cmp	r5, #0
   1bb50:	mov	r1, r9
   1bb54:	lsl	sl, r4, #2
   1bb58:	mov	r0, fp
   1bb5c:	bne	1bb14 <__assert_fail@plt+0x920c>
   1bb60:	str	r4, [sp, #8]
   1bb64:	add	r4, r4, #1
   1bb68:	cmp	r8, r4
   1bb6c:	bne	1bb40 <__assert_fail@plt+0x9238>
   1bb70:	ldr	r3, [sp, #8]
   1bb74:	cmn	r3, #1
   1bb78:	beq	1bc48 <__assert_fail@plt+0x9340>
   1bb7c:	ldr	r3, [sp, #16]
   1bb80:	add	r0, r7, #13
   1bb84:	add	r0, r0, r3
   1bb88:	bl	1217c <gcry_malloc@plt>
   1bb8c:	subs	r4, r0, #0
   1bb90:	beq	1bc6c <__assert_fail@plt+0x9364>
   1bb94:	ldr	r2, [sp, #64]	; 0x40
   1bb98:	add	r3, r4, #8
   1bb9c:	str	r2, [r4, #4]
   1bba0:	mov	r1, r9
   1bba4:	mov	r2, r7
   1bba8:	mov	r0, r3
   1bbac:	bl	12284 <memcpy@plt>
   1bbb0:	add	r2, r7, #1
   1bbb4:	add	r7, r4, r7
   1bbb8:	mov	fp, #0
   1bbbc:	ldr	r1, [sp, #20]
   1bbc0:	strb	fp, [r7, #8]
   1bbc4:	add	r3, r0, r2
   1bbc8:	str	r3, [r4]
   1bbcc:	mov	r0, r3
   1bbd0:	bl	12404 <strcpy@plt>
   1bbd4:	ldr	r5, [sp, #12]
   1bbd8:	ldr	r6, [sp, #8]
   1bbdc:	ldr	r3, [r5, #8]
   1bbe0:	ldr	r0, [r3, r6, lsl #2]
   1bbe4:	bl	122a8 <gcry_free@plt>
   1bbe8:	ldr	r3, [r5, #8]
   1bbec:	mov	r0, fp
   1bbf0:	str	r4, [r3, r6, lsl #2]
   1bbf4:	add	sp, sp, #28
   1bbf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbfc:	ldr	r5, [r5]
   1bc00:	str	r4, [sp, #8]
   1bc04:	mov	r0, r5
   1bc08:	bl	1259c <strlen@plt>
   1bc0c:	ldr	r3, [sp, #16]
   1bc10:	cmp	r0, r3
   1bc14:	bne	1bb34 <__assert_fail@plt+0x922c>
   1bc18:	mov	r2, r3
   1bc1c:	ldr	r1, [sp, #20]
   1bc20:	mov	r0, r5
   1bc24:	bl	12284 <memcpy@plt>
   1bc28:	ldr	r3, [sp, #12]
   1bc2c:	ldr	r2, [sp, #64]	; 0x40
   1bc30:	ldr	r0, [sp, #4]
   1bc34:	ldr	r3, [r3, #8]
   1bc38:	ldr	r3, [r3, sl]
   1bc3c:	str	r2, [r3, #4]
   1bc40:	add	sp, sp, #28
   1bc44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc48:	ldr	r3, [sp, #12]
   1bc4c:	ldr	r3, [r3]
   1bc50:	cmp	r3, r8
   1bc54:	beq	1bc7c <__assert_fail@plt+0x9374>
   1bc58:	ldr	r3, [sp, #12]
   1bc5c:	str	r8, [sp, #8]
   1bc60:	add	r8, r8, #1
   1bc64:	str	r8, [r3, #4]
   1bc68:	b	1bb7c <__assert_fail@plt+0x9274>
   1bc6c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1bc70:	uxth	r0, r0
   1bc74:	add	sp, sp, #28
   1bc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc7c:	add	r8, r8, #10
   1bc80:	mov	r0, r8
   1bc84:	mov	r1, #4
   1bc88:	bl	12668 <gcry_calloc@plt>
   1bc8c:	subs	r4, r0, #0
   1bc90:	beq	1bc6c <__assert_fail@plt+0x9364>
   1bc94:	ldr	r2, [sp, #12]
   1bc98:	ldr	r3, [r2, #4]
   1bc9c:	ldr	r0, [r2, #8]
   1bca0:	cmp	r3, #0
   1bca4:	addne	r3, r0, r3, lsl #2
   1bca8:	subne	ip, r3, #4
   1bcac:	subne	r2, r4, #4
   1bcb0:	subne	r3, r0, #4
   1bcb4:	beq	1bcc8 <__assert_fail@plt+0x93c0>
   1bcb8:	ldr	r1, [r3, #4]!
   1bcbc:	cmp	r3, ip
   1bcc0:	str	r1, [r2, #4]!
   1bcc4:	bne	1bcb8 <__assert_fail@plt+0x93b0>
   1bcc8:	ldr	r5, [sp, #12]
   1bccc:	str	r8, [r5]
   1bcd0:	bl	122a8 <gcry_free@plt>
   1bcd4:	str	r4, [r5, #8]
   1bcd8:	ldr	r8, [r5, #4]
   1bcdc:	b	1bc58 <__assert_fail@plt+0x9350>
   1bce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bce4:	sub	sp, sp, #12
   1bce8:	ldr	r7, [r0]
   1bcec:	cmp	r7, #0
   1bcf0:	beq	1bd5c <__assert_fail@plt+0x9454>
   1bcf4:	mov	r8, r2
   1bcf8:	mov	fp, r1
   1bcfc:	str	r0, [sp, #4]
   1bd00:	ldr	r6, [r1]
   1bd04:	mov	r4, #0
   1bd08:	b	1bd14 <__assert_fail@plt+0x940c>
   1bd0c:	cmp	r7, r4
   1bd10:	bls	1bd5c <__assert_fail@plt+0x9454>
   1bd14:	ldr	r5, [r6, r4, lsl #2]
   1bd18:	lsl	r9, r4, #2
   1bd1c:	cmp	r5, #0
   1bd20:	mov	r1, r8
   1bd24:	add	r0, r5, #8
   1bd28:	add	r4, r4, #1
   1bd2c:	beq	1bd0c <__assert_fail@plt+0x9404>
   1bd30:	bl	121ac <strcmp@plt>
   1bd34:	subs	sl, r0, #0
   1bd38:	bne	1bd0c <__assert_fail@plt+0x9404>
   1bd3c:	mov	r0, r5
   1bd40:	bl	122a8 <gcry_free@plt>
   1bd44:	ldr	r3, [sp, #4]
   1bd48:	ldr	r6, [fp]
   1bd4c:	ldr	r7, [r3]
   1bd50:	str	sl, [r6, r9]
   1bd54:	cmp	r7, r4
   1bd58:	bhi	1bd14 <__assert_fail@plt+0x940c>
   1bd5c:	mov	r0, #0
   1bd60:	add	sp, sp, #12
   1bd64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd68:	ldr	r3, [r0]
   1bd6c:	cmp	r3, #9
   1bd70:	bhi	1bd98 <__assert_fail@plt+0x9490>
   1bd74:	add	r2, r3, #1
   1bd78:	str	r2, [r0]
   1bd7c:	ldr	r2, [pc, #28]	; 1bda0 <__assert_fail@plt+0x9498>
   1bd80:	cmp	r1, #0
   1bd84:	addne	r0, r2, r3, lsl #3
   1bd88:	ldrne	r0, [r0, #4]
   1bd8c:	strne	r0, [r1]
   1bd90:	ldr	r0, [r2, r3, lsl #3]
   1bd94:	bx	lr
   1bd98:	mov	r0, #0
   1bd9c:	bx	lr
   1bda0:	andeq	r3, r2, r0, lsr r6
   1bda4:	push	{r4, r5, r6, lr}
   1bda8:	mov	r1, #12
   1bdac:	mov	r0, #1
   1bdb0:	bl	12668 <gcry_calloc@plt>
   1bdb4:	subs	r4, r0, #0
   1bdb8:	beq	1bde8 <__assert_fail@plt+0x94e0>
   1bdbc:	ldr	r3, [pc, #60]	; 1be00 <__assert_fail@plt+0x94f8>
   1bdc0:	mov	r1, #4
   1bdc4:	ldr	r0, [r3]
   1bdc8:	cmp	r0, #0
   1bdcc:	moveq	r0, #8
   1bdd0:	str	r0, [r4]
   1bdd4:	bl	12668 <gcry_calloc@plt>
   1bdd8:	cmp	r0, #0
   1bddc:	mov	r5, r0
   1bde0:	str	r0, [r4, #8]
   1bde4:	beq	1bdf0 <__assert_fail@plt+0x94e8>
   1bde8:	mov	r0, r4
   1bdec:	pop	{r4, r5, r6, pc}
   1bdf0:	mov	r0, r4
   1bdf4:	bl	122a8 <gcry_free@plt>
   1bdf8:	mov	r4, r5
   1bdfc:	b	1bde8 <__assert_fail@plt+0x94e0>
   1be00:	andeq	r5, r3, r0, lsr r4
   1be04:	push	{r4, r5, r6, lr}
   1be08:	subs	r5, r0, #0
   1be0c:	popeq	{r4, r5, r6, pc}
   1be10:	ldr	r3, [r5]
   1be14:	sub	r2, r3, #9
   1be18:	cmp	r2, #49	; 0x31
   1be1c:	bls	1be64 <__assert_fail@plt+0x955c>
   1be20:	ldmib	r5, {r1, r2}
   1be24:	cmp	r1, #0
   1be28:	beq	1be50 <__assert_fail@plt+0x9548>
   1be2c:	mov	r4, #0
   1be30:	ldr	r3, [r2, r4, lsl #2]
   1be34:	add	r4, r4, #1
   1be38:	subs	r0, r3, #0
   1be3c:	beq	1be48 <__assert_fail@plt+0x9540>
   1be40:	bl	122a8 <gcry_free@plt>
   1be44:	ldmib	r5, {r1, r2}
   1be48:	cmp	r1, r4
   1be4c:	bhi	1be30 <__assert_fail@plt+0x9528>
   1be50:	mov	r0, r2
   1be54:	bl	122a8 <gcry_free@plt>
   1be58:	mov	r0, r5
   1be5c:	pop	{r4, r5, r6, lr}
   1be60:	b	122a8 <gcry_free@plt>
   1be64:	ldr	r2, [pc, #12]	; 1be78 <__assert_fail@plt+0x9570>
   1be68:	ldr	r1, [r2]
   1be6c:	cmp	r3, r1
   1be70:	strhi	r3, [r2]
   1be74:	b	1be20 <__assert_fail@plt+0x9518>
   1be78:	andeq	r5, r3, r0, lsr r4
   1be7c:	push	{r4, r5, lr}
   1be80:	subs	r4, r1, #0
   1be84:	sub	sp, sp, #12
   1be88:	beq	1bed8 <__assert_fail@plt+0x95d0>
   1be8c:	ldrb	r3, [r4]
   1be90:	cmp	r3, #0
   1be94:	beq	1bed8 <__assert_fail@plt+0x95d0>
   1be98:	mov	r5, r0
   1be9c:	mov	r1, #61	; 0x3d
   1bea0:	mov	r0, r4
   1bea4:	bl	125c0 <strchr@plt>
   1bea8:	cmp	r4, r0
   1beac:	beq	1bed8 <__assert_fail@plt+0x95d0>
   1beb0:	cmp	r0, #0
   1beb4:	beq	1bee4 <__assert_fail@plt+0x95dc>
   1beb8:	mov	r3, #0
   1bebc:	sub	r2, r0, r4
   1bec0:	mov	r1, r4
   1bec4:	mov	r0, r5
   1bec8:	str	r3, [sp]
   1becc:	bl	1bab8 <__assert_fail@plt+0x91b0>
   1bed0:	add	sp, sp, #12
   1bed4:	pop	{r4, r5, pc}
   1bed8:	mov	r0, #55	; 0x37
   1bedc:	add	sp, sp, #12
   1bee0:	pop	{r4, r5, pc}
   1bee4:	mov	r2, r4
   1bee8:	add	r1, r5, #8
   1beec:	add	r0, r5, #4
   1bef0:	add	sp, sp, #12
   1bef4:	pop	{r4, r5, lr}
   1bef8:	b	1bce0 <__assert_fail@plt+0x93d8>
   1befc:	push	{r4, r5, r6, lr}
   1bf00:	subs	r4, r1, #0
   1bf04:	sub	sp, sp, #8
   1bf08:	beq	1bf6c <__assert_fail@plt+0x9664>
   1bf0c:	ldrb	r3, [r4]
   1bf10:	cmp	r3, #0
   1bf14:	beq	1bf6c <__assert_fail@plt+0x9664>
   1bf18:	cmp	r2, #0
   1bf1c:	beq	1bf54 <__assert_fail@plt+0x964c>
   1bf20:	mov	r6, r0
   1bf24:	mov	r0, r4
   1bf28:	mov	r5, r2
   1bf2c:	bl	1259c <strlen@plt>
   1bf30:	mov	r2, #0
   1bf34:	str	r2, [sp]
   1bf38:	mov	r3, r5
   1bf3c:	mov	r1, r4
   1bf40:	mov	r2, r0
   1bf44:	mov	r0, r6
   1bf48:	bl	1bab8 <__assert_fail@plt+0x91b0>
   1bf4c:	add	sp, sp, #8
   1bf50:	pop	{r4, r5, r6, pc}
   1bf54:	add	r1, r0, #8
   1bf58:	mov	r2, r4
   1bf5c:	add	r0, r0, #4
   1bf60:	add	sp, sp, #8
   1bf64:	pop	{r4, r5, r6, lr}
   1bf68:	b	1bce0 <__assert_fail@plt+0x93d8>
   1bf6c:	mov	r0, #55	; 0x37
   1bf70:	add	sp, sp, #8
   1bf74:	pop	{r4, r5, r6, pc}
   1bf78:	cmp	r0, #0
   1bf7c:	push	{r4, r5, r6, r7, r8, lr}
   1bf80:	clz	r4, r1
   1bf84:	lsr	r4, r4, #5
   1bf88:	moveq	r4, #1
   1bf8c:	cmp	r4, #0
   1bf90:	bne	1bfe4 <__assert_fail@plt+0x96dc>
   1bf94:	ldrb	r3, [r1]
   1bf98:	cmp	r3, #0
   1bf9c:	beq	1bfe4 <__assert_fail@plt+0x96dc>
   1bfa0:	ldr	r8, [r0, #4]
   1bfa4:	cmp	r8, #0
   1bfa8:	beq	1bfe4 <__assert_fail@plt+0x96dc>
   1bfac:	ldr	r6, [r0, #8]
   1bfb0:	mov	r7, r1
   1bfb4:	sub	r6, r6, #4
   1bfb8:	ldr	r5, [r6, #4]!
   1bfbc:	mov	r1, r7
   1bfc0:	cmp	r5, #0
   1bfc4:	add	r4, r4, #1
   1bfc8:	add	r0, r5, #8
   1bfcc:	beq	1bfdc <__assert_fail@plt+0x96d4>
   1bfd0:	bl	121ac <strcmp@plt>
   1bfd4:	cmp	r0, #0
   1bfd8:	beq	1bfec <__assert_fail@plt+0x96e4>
   1bfdc:	cmp	r4, r8
   1bfe0:	bne	1bfb8 <__assert_fail@plt+0x96b0>
   1bfe4:	mov	r0, #0
   1bfe8:	pop	{r4, r5, r6, r7, r8, pc}
   1bfec:	ldr	r3, [r5, #4]
   1bff0:	cmp	r3, #0
   1bff4:	ldreq	r0, [r5]
   1bff8:	pop	{r4, r5, r6, r7, r8, pc}
   1bffc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c000:	subs	sl, r2, #0
   1c004:	movne	r3, #0
   1c008:	strne	r3, [sl]
   1c00c:	cmp	r0, #0
   1c010:	clz	r4, r1
   1c014:	lsr	r4, r4, #5
   1c018:	moveq	r4, #1
   1c01c:	cmp	r4, #0
   1c020:	sub	sp, sp, #8
   1c024:	bne	1c100 <__assert_fail@plt+0x97f8>
   1c028:	ldrb	r3, [r1]
   1c02c:	cmp	r3, #0
   1c030:	beq	1c100 <__assert_fail@plt+0x97f8>
   1c034:	ldr	r8, [r0, #4]
   1c038:	mov	r7, r1
   1c03c:	cmp	r8, #0
   1c040:	mov	r9, r0
   1c044:	beq	1c07c <__assert_fail@plt+0x9774>
   1c048:	ldr	r6, [r0, #8]
   1c04c:	sub	r6, r6, #4
   1c050:	ldr	r5, [r6, #4]!
   1c054:	mov	r1, r7
   1c058:	cmp	r5, #0
   1c05c:	add	r4, r4, #1
   1c060:	add	r0, r5, #8
   1c064:	beq	1c074 <__assert_fail@plt+0x976c>
   1c068:	bl	121ac <strcmp@plt>
   1c06c:	cmp	r0, #0
   1c070:	beq	1c10c <__assert_fail@plt+0x9804>
   1c074:	cmp	r8, r4
   1c078:	bne	1c050 <__assert_fail@plt+0x9748>
   1c07c:	mov	r0, r7
   1c080:	bl	1247c <getenv@plt>
   1c084:	subs	r4, r0, #0
   1c088:	beq	1c164 <__assert_fail@plt+0x985c>
   1c08c:	ldrb	r3, [r4]
   1c090:	cmp	r3, #0
   1c094:	beq	1c130 <__assert_fail@plt+0x9828>
   1c098:	mov	r0, r7
   1c09c:	bl	1259c <strlen@plt>
   1c0a0:	mov	r2, #1
   1c0a4:	str	r2, [sp]
   1c0a8:	mov	r3, r4
   1c0ac:	mov	r1, r7
   1c0b0:	mov	r2, r0
   1c0b4:	mov	r0, r9
   1c0b8:	bl	1bab8 <__assert_fail@plt+0x91b0>
   1c0bc:	ldr	r8, [r9, #4]
   1c0c0:	cmp	r8, #0
   1c0c4:	beq	1c100 <__assert_fail@plt+0x97f8>
   1c0c8:	ldr	r6, [r9, #8]
   1c0cc:	mov	r5, #0
   1c0d0:	sub	r6, r6, #4
   1c0d4:	ldr	r4, [r6, #4]!
   1c0d8:	mov	r1, r7
   1c0dc:	cmp	r4, #0
   1c0e0:	add	r5, r5, #1
   1c0e4:	add	r0, r4, #8
   1c0e8:	beq	1c0f8 <__assert_fail@plt+0x97f0>
   1c0ec:	bl	121ac <strcmp@plt>
   1c0f0:	cmp	r0, #0
   1c0f4:	beq	1c188 <__assert_fail@plt+0x9880>
   1c0f8:	cmp	r8, r5
   1c0fc:	bne	1c0d4 <__assert_fail@plt+0x97cc>
   1c100:	mov	r0, #0
   1c104:	add	sp, sp, #8
   1c108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c10c:	cmp	sl, #0
   1c110:	beq	1c124 <__assert_fail@plt+0x981c>
   1c114:	ldr	r3, [r5, #4]
   1c118:	cmp	r3, #0
   1c11c:	movne	r3, #1
   1c120:	strne	r3, [sl]
   1c124:	ldr	r0, [r5]
   1c128:	add	sp, sp, #8
   1c12c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c130:	ldr	r1, [pc, #116]	; 1c1ac <__assert_fail@plt+0x98a4>
   1c134:	mov	r0, r7
   1c138:	bl	121ac <strcmp@plt>
   1c13c:	cmp	r0, #0
   1c140:	bne	1c098 <__assert_fail@plt+0x9790>
   1c144:	bl	12590 <ttyname@plt>
   1c148:	cmp	r0, #0
   1c14c:	beq	1c098 <__assert_fail@plt+0x9790>
   1c150:	mov	r0, #0
   1c154:	bl	12590 <ttyname@plt>
   1c158:	subs	r4, r0, #0
   1c15c:	bne	1c098 <__assert_fail@plt+0x9790>
   1c160:	b	1c100 <__assert_fail@plt+0x97f8>
   1c164:	ldr	r1, [pc, #64]	; 1c1ac <__assert_fail@plt+0x98a4>
   1c168:	mov	r0, r7
   1c16c:	bl	121ac <strcmp@plt>
   1c170:	cmp	r0, #0
   1c174:	bne	1c100 <__assert_fail@plt+0x97f8>
   1c178:	bl	12590 <ttyname@plt>
   1c17c:	cmp	r0, #0
   1c180:	bne	1c150 <__assert_fail@plt+0x9848>
   1c184:	b	1c100 <__assert_fail@plt+0x97f8>
   1c188:	cmp	sl, #0
   1c18c:	beq	1c1a0 <__assert_fail@plt+0x9898>
   1c190:	ldr	r3, [r4, #4]
   1c194:	cmp	r3, #0
   1c198:	movne	r3, #1
   1c19c:	strne	r3, [sl]
   1c1a0:	ldr	r0, [r4]
   1c1a4:	add	sp, sp, #8
   1c1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c1ac:	andeq	r3, r2, r0, lsl r3
   1c1b0:	ldr	ip, [r1]
   1c1b4:	cmp	r0, #0
   1c1b8:	push	{r4, r5, lr}
   1c1bc:	lsrne	lr, ip, #31
   1c1c0:	moveq	lr, #1
   1c1c4:	cmp	lr, #0
   1c1c8:	bne	1c22c <__assert_fail@plt+0x9924>
   1c1cc:	ldr	r5, [r0, #4]
   1c1d0:	cmp	r5, ip
   1c1d4:	bls	1c22c <__assert_fail@plt+0x9924>
   1c1d8:	ldr	r0, [r0, #8]
   1c1dc:	add	lr, r0, ip, lsl #2
   1c1e0:	ldr	r0, [r0, ip, lsl #2]
   1c1e4:	cmp	r0, #0
   1c1e8:	bne	1c234 <__assert_fail@plt+0x992c>
   1c1ec:	add	ip, ip, #1
   1c1f0:	cmp	r5, ip
   1c1f4:	popls	{r4, r5, pc}
   1c1f8:	ldr	r4, [lr, #4]!
   1c1fc:	cmp	r4, #0
   1c200:	beq	1c1ec <__assert_fail@plt+0x98e4>
   1c204:	cmp	r3, #0
   1c208:	add	ip, ip, #1
   1c20c:	str	ip, [r1]
   1c210:	ldrne	r1, [r4, #4]
   1c214:	add	r0, r4, #8
   1c218:	strne	r1, [r3]
   1c21c:	cmp	r2, #0
   1c220:	ldrne	r3, [r4]
   1c224:	strne	r3, [r2]
   1c228:	pop	{r4, r5, pc}
   1c22c:	mov	r0, #0
   1c230:	pop	{r4, r5, pc}
   1c234:	mov	r4, r0
   1c238:	b	1c204 <__assert_fail@plt+0x98fc>
   1c23c:	push	{r4, r5, r6, r7, r8, lr}
   1c240:	mov	r6, r1
   1c244:	mov	r7, r2
   1c248:	mov	r4, r3
   1c24c:	mov	r5, r0
   1c250:	bl	126ec <pipe@plt>
   1c254:	cmn	r0, #1
   1c258:	beq	1c29c <__assert_fail@plt+0x9994>
   1c25c:	cmp	r7, #0
   1c260:	ldreq	r3, [pc, #256]	; 1c368 <__assert_fail@plt+0x9a60>
   1c264:	ldreq	r1, [pc, #256]	; 1c36c <__assert_fail@plt+0x9a64>
   1c268:	ldreq	r0, [r5]
   1c26c:	ldrne	r1, [pc, #252]	; 1c370 <__assert_fail@plt+0x9a68>
   1c270:	ldrne	r3, [pc, #252]	; 1c374 <__assert_fail@plt+0x9a6c>
   1c274:	ldrne	r0, [r5, #4]
   1c278:	cmp	r4, #0
   1c27c:	moveq	r1, r3
   1c280:	bl	12494 <gpgrt_fdopen@plt>
   1c284:	cmp	r0, #0
   1c288:	str	r0, [r6]
   1c28c:	movne	r4, #0
   1c290:	beq	1c300 <__assert_fail@plt+0x99f8>
   1c294:	mov	r0, r4
   1c298:	pop	{r4, r5, r6, r7, r8, pc}
   1c29c:	ldr	r3, [pc, #212]	; 1c378 <__assert_fail@plt+0x9a70>
   1c2a0:	ldr	r7, [r3]
   1c2a4:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1c2a8:	mov	r2, #5
   1c2ac:	ldr	r1, [pc, #200]	; 1c37c <__assert_fail@plt+0x9a74>
   1c2b0:	subs	r4, r0, #0
   1c2b4:	lslne	r7, r7, #24
   1c2b8:	uxthne	r4, r4
   1c2bc:	andne	r7, r7, #2130706432	; 0x7f000000
   1c2c0:	mov	r0, #0
   1c2c4:	orrne	r4, r7, r4
   1c2c8:	bl	122f0 <dcgettext@plt>
   1c2cc:	mov	r7, r0
   1c2d0:	mov	r0, r4
   1c2d4:	bl	127ac <gpg_strerror@plt>
   1c2d8:	mov	r1, r0
   1c2dc:	mov	r0, r7
   1c2e0:	bl	17d98 <__assert_fail@plt+0x5490>
   1c2e4:	mvn	r3, #0
   1c2e8:	mov	r2, #0
   1c2ec:	str	r3, [r5, #4]
   1c2f0:	str	r3, [r5]
   1c2f4:	mov	r0, r4
   1c2f8:	str	r2, [r6]
   1c2fc:	pop	{r4, r5, r6, r7, r8, pc}
   1c300:	ldr	r3, [pc, #112]	; 1c378 <__assert_fail@plt+0x9a70>
   1c304:	ldr	r6, [r3]
   1c308:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1c30c:	mov	r2, #5
   1c310:	ldr	r1, [pc, #104]	; 1c380 <__assert_fail@plt+0x9a78>
   1c314:	subs	r4, r0, #0
   1c318:	lslne	r6, r6, #24
   1c31c:	andne	r6, r6, #2130706432	; 0x7f000000
   1c320:	uxthne	r4, r4
   1c324:	mov	r0, #0
   1c328:	orrne	r4, r6, r4
   1c32c:	bl	122f0 <dcgettext@plt>
   1c330:	mov	r6, r0
   1c334:	mov	r0, r4
   1c338:	bl	127ac <gpg_strerror@plt>
   1c33c:	mov	r1, r0
   1c340:	mov	r0, r6
   1c344:	bl	17d98 <__assert_fail@plt+0x5490>
   1c348:	ldr	r0, [r5]
   1c34c:	bl	128cc <close@plt>
   1c350:	ldr	r0, [r5, #4]
   1c354:	bl	128cc <close@plt>
   1c358:	mvn	r3, #0
   1c35c:	str	r3, [r5, #4]
   1c360:	str	r3, [r5]
   1c364:	b	1c294 <__assert_fail@plt+0x998c>
   1c368:	andeq	r3, r2, ip, ror #21
   1c36c:	andeq	r3, r2, r8, asr #14
   1c370:	andeq	r3, r2, r4, asr r7
   1c374:	andeq	r2, r2, ip, lsr #12
   1c378:	andeq	r5, r3, ip, lsr r3
   1c37c:	andeq	r3, r2, r0, ror #14
   1c380:	andeq	r3, r2, ip, ror r7
   1c384:	push	{r4, r5, r6, lr}
   1c388:	mov	r4, r0
   1c38c:	bl	126ec <pipe@plt>
   1c390:	cmn	r0, #1
   1c394:	beq	1c3a0 <__assert_fail@plt+0x9a98>
   1c398:	mov	r0, #0
   1c39c:	pop	{r4, r5, r6, pc}
   1c3a0:	ldr	r3, [pc, #40]	; 1c3d0 <__assert_fail@plt+0x9ac8>
   1c3a4:	ldr	r5, [r3]
   1c3a8:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1c3ac:	mvn	r3, #0
   1c3b0:	str	r3, [r4, #4]
   1c3b4:	str	r3, [r4]
   1c3b8:	cmp	r0, #0
   1c3bc:	lslne	r5, r5, #24
   1c3c0:	andne	r5, r5, #2130706432	; 0x7f000000
   1c3c4:	uxthne	r0, r0
   1c3c8:	orrne	r0, r5, r0
   1c3cc:	pop	{r4, r5, r6, pc}
   1c3d0:	andeq	r5, r3, ip, lsr r3
   1c3d4:	push	{r4, r5, r6, lr}
   1c3d8:	sub	sp, sp, #24
   1c3dc:	ldr	r6, [pc, #248]	; 1c4dc <__assert_fail@plt+0x9bd4>
   1c3e0:	ldr	r0, [pc, #248]	; 1c4e0 <__assert_fail@plt+0x9bd8>
   1c3e4:	ldr	r3, [r6]
   1c3e8:	str	r3, [sp, #20]
   1c3ec:	bl	12458 <opendir@plt>
   1c3f0:	subs	r5, r0, #0
   1c3f4:	mvnne	r4, #0
   1c3f8:	beq	1c470 <__assert_fail@plt+0x9b68>
   1c3fc:	mov	r0, r5
   1c400:	bl	127a0 <readdir64@plt>
   1c404:	cmp	r0, #0
   1c408:	beq	1c444 <__assert_fail@plt+0x9b3c>
   1c40c:	ldrb	r3, [r0, #19]
   1c410:	sub	r3, r3, #48	; 0x30
   1c414:	cmp	r3, #9
   1c418:	bhi	1c3fc <__assert_fail@plt+0x9af4>
   1c41c:	mov	r2, #10
   1c420:	mov	r1, #0
   1c424:	add	r0, r0, #19
   1c428:	bl	121c4 <strtol@plt>
   1c42c:	cmp	r4, r0
   1c430:	movlt	r4, r0
   1c434:	mov	r0, r5
   1c438:	bl	127a0 <readdir64@plt>
   1c43c:	cmp	r0, #0
   1c440:	bne	1c40c <__assert_fail@plt+0x9b04>
   1c444:	mov	r0, r5
   1c448:	bl	128f0 <closedir@plt>
   1c44c:	cmn	r4, #1
   1c450:	addne	r0, r4, #1
   1c454:	beq	1c470 <__assert_fail@plt+0x9b68>
   1c458:	ldr	r2, [sp, #20]
   1c45c:	ldr	r3, [r6]
   1c460:	cmp	r2, r3
   1c464:	bne	1c4d8 <__assert_fail@plt+0x9bd0>
   1c468:	add	sp, sp, #24
   1c46c:	pop	{r4, r5, r6, pc}
   1c470:	mov	r4, sp
   1c474:	mov	r1, r4
   1c478:	mov	r0, #7
   1c47c:	bl	12344 <getrlimit64@plt>
   1c480:	cmp	r0, #0
   1c484:	bne	1c4a0 <__assert_fail@plt+0x9b98>
   1c488:	ldr	r0, [sp, #8]
   1c48c:	cmn	r0, #1
   1c490:	beq	1c4a0 <__assert_fail@plt+0x9b98>
   1c494:	cmn	r0, #-2147483647	; 0x80000001
   1c498:	moveq	r0, #256	; 0x100
   1c49c:	b	1c458 <__assert_fail@plt+0x9b50>
   1c4a0:	mov	r1, r4
   1c4a4:	mov	r0, #7
   1c4a8:	bl	12344 <getrlimit64@plt>
   1c4ac:	cmp	r0, #0
   1c4b0:	bne	1c4c0 <__assert_fail@plt+0x9bb8>
   1c4b4:	ldr	r0, [sp, #8]
   1c4b8:	cmn	r0, #1
   1c4bc:	bne	1c494 <__assert_fail@plt+0x9b8c>
   1c4c0:	mov	r0, #4
   1c4c4:	bl	12314 <sysconf@plt>
   1c4c8:	cmp	r0, #0
   1c4cc:	bge	1c494 <__assert_fail@plt+0x9b8c>
   1c4d0:	mov	r0, #20
   1c4d4:	b	1c458 <__assert_fail@plt+0x9b50>
   1c4d8:	bl	122fc <__stack_chk_fail@plt>
   1c4dc:	andeq	r4, r3, r8, lsr fp
   1c4e0:	andeq	r3, r2, r4, lsr #15
   1c4e4:	push	{r4, r5, r6, r7, r8, lr}
   1c4e8:	mov	r6, r1
   1c4ec:	mov	r4, r0
   1c4f0:	bl	1c3d4 <__assert_fail@plt+0x9acc>
   1c4f4:	cmp	r6, #0
   1c4f8:	mov	r7, r0
   1c4fc:	beq	1c570 <__assert_fail@plt+0x9c68>
   1c500:	cmp	r0, r4
   1c504:	movgt	r5, #0
   1c508:	ble	1c558 <__assert_fail@plt+0x9c50>
   1c50c:	ldr	r3, [r6, r5, lsl #2]
   1c510:	add	r2, r6, r5, lsl #2
   1c514:	cmn	r3, #1
   1c518:	beq	1c544 <__assert_fail@plt+0x9c3c>
   1c51c:	cmp	r3, r4
   1c520:	movne	r0, r5
   1c524:	bne	1c534 <__assert_fail@plt+0x9c2c>
   1c528:	b	1c564 <__assert_fail@plt+0x9c5c>
   1c52c:	cmp	r3, r4
   1c530:	beq	1c568 <__assert_fail@plt+0x9c60>
   1c534:	ldr	r3, [r2, #4]!
   1c538:	add	r0, r0, #1
   1c53c:	cmn	r3, #1
   1c540:	bne	1c52c <__assert_fail@plt+0x9c24>
   1c544:	mov	r0, r4
   1c548:	bl	128cc <close@plt>
   1c54c:	add	r4, r4, #1
   1c550:	cmp	r7, r4
   1c554:	bne	1c50c <__assert_fail@plt+0x9c04>
   1c558:	mov	r0, #0
   1c55c:	pop	{r4, r5, r6, r7, r8, lr}
   1c560:	b	12794 <gpg_err_set_errno@plt>
   1c564:	mov	r0, r5
   1c568:	add	r5, r0, #1
   1c56c:	b	1c54c <__assert_fail@plt+0x9c44>
   1c570:	cmp	r0, r4
   1c574:	ble	1c558 <__assert_fail@plt+0x9c50>
   1c578:	mov	r0, r4
   1c57c:	add	r4, r4, #1
   1c580:	bl	128cc <close@plt>
   1c584:	cmp	r7, r4
   1c588:	bne	1c578 <__assert_fail@plt+0x9c70>
   1c58c:	mov	r0, #0
   1c590:	pop	{r4, r5, r6, r7, r8, lr}
   1c594:	b	12794 <gpg_err_set_errno@plt>
   1c598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c59c:	sub	sp, sp, #20
   1c5a0:	ldr	lr, [pc, #444]	; 1c764 <__assert_fail@plt+0x9e5c>
   1c5a4:	mov	r8, r2
   1c5a8:	ldr	ip, [sp, #56]	; 0x38
   1c5ac:	ldr	r2, [lr]
   1c5b0:	subs	r4, r1, #0
   1c5b4:	mov	r5, r0
   1c5b8:	str	r8, [sp]
   1c5bc:	str	r3, [sp, #4]
   1c5c0:	str	r2, [sp, #12]
   1c5c4:	str	ip, [sp, #8]
   1c5c8:	ldr	r7, [sp, #60]	; 0x3c
   1c5cc:	ldr	r6, [sp, #64]	; 0x40
   1c5d0:	moveq	r0, r4
   1c5d4:	beq	1c5fc <__assert_fail@plt+0x9cf4>
   1c5d8:	ldr	r0, [r4]
   1c5dc:	cmp	r0, #0
   1c5e0:	beq	1c5fc <__assert_fail@plt+0x9cf4>
   1c5e4:	mov	r3, r4
   1c5e8:	mov	r0, #0
   1c5ec:	ldr	r2, [r3, #4]!
   1c5f0:	add	r0, r0, #1
   1c5f4:	cmp	r2, #0
   1c5f8:	bne	1c5ec <__assert_fail@plt+0x9ce4>
   1c5fc:	mov	r1, #4
   1c600:	add	r0, r0, #2
   1c604:	bl	12854 <gcry_xcalloc@plt>
   1c608:	mov	r1, #47	; 0x2f
   1c60c:	mov	r9, r0
   1c610:	mov	r0, r5
   1c614:	bl	12764 <strrchr@plt>
   1c618:	cmp	r0, #0
   1c61c:	str	r0, [r9]
   1c620:	beq	1c718 <__assert_fail@plt+0x9e10>
   1c624:	add	r0, r0, #1
   1c628:	str	r0, [r9]
   1c62c:	cmp	r4, #0
   1c630:	beq	1c658 <__assert_fail@plt+0x9d50>
   1c634:	ldr	r3, [r4]
   1c638:	cmp	r3, #0
   1c63c:	beq	1c658 <__assert_fail@plt+0x9d50>
   1c640:	mov	r1, r4
   1c644:	mov	r2, r9
   1c648:	str	r3, [r2, #4]!
   1c64c:	ldr	r3, [r1, #4]!
   1c650:	cmp	r3, #0
   1c654:	bne	1c648 <__assert_fail@plt+0x9d40>
   1c658:	cmn	r8, #1
   1c65c:	add	sl, sp, #4
   1c660:	mov	r4, #0
   1c664:	ldr	fp, [pc, #252]	; 1c768 <__assert_fail@plt+0x9e60>
   1c668:	beq	1c684 <__assert_fail@plt+0x9d7c>
   1c66c:	add	r4, r4, #1
   1c670:	cmp	r4, #3
   1c674:	beq	1c6bc <__assert_fail@plt+0x9db4>
   1c678:	ldr	r8, [sl], #4
   1c67c:	cmn	r8, #1
   1c680:	bne	1c66c <__assert_fail@plt+0x9d64>
   1c684:	adds	r1, r4, #0
   1c688:	movne	r1, #1
   1c68c:	mov	r0, fp
   1c690:	bl	125f0 <__open64_2@plt>
   1c694:	cmn	r0, #1
   1c698:	str	r0, [sl, #-4]
   1c69c:	bne	1c66c <__assert_fail@plt+0x9d64>
   1c6a0:	bl	12620 <__errno_location@plt>
   1c6a4:	ldr	r0, [r0]
   1c6a8:	bl	124dc <strerror@plt>
   1c6ac:	ldr	r1, [pc, #180]	; 1c768 <__assert_fail@plt+0x9e60>
   1c6b0:	mov	r2, r0
   1c6b4:	ldr	r0, [pc, #176]	; 1c76c <__assert_fail@plt+0x9e64>
   1c6b8:	bl	17e1c <__assert_fail@plt+0x5514>
   1c6bc:	mov	r8, sp
   1c6c0:	mov	r4, #0
   1c6c4:	ldr	r0, [r8], #4
   1c6c8:	cmp	r0, r4
   1c6cc:	beq	1c6e0 <__assert_fail@plt+0x9dd8>
   1c6d0:	mov	r1, r4
   1c6d4:	bl	1232c <dup2@plt>
   1c6d8:	cmn	r0, #1
   1c6dc:	beq	1c728 <__assert_fail@plt+0x9e20>
   1c6e0:	add	r4, r4, #1
   1c6e4:	cmp	r4, #3
   1c6e8:	bne	1c6c4 <__assert_fail@plt+0x9dbc>
   1c6ec:	mov	r1, r7
   1c6f0:	mov	r0, r4
   1c6f4:	bl	1c4e4 <__assert_fail@plt+0x9bdc>
   1c6f8:	cmp	r6, #0
   1c6fc:	beq	1c704 <__assert_fail@plt+0x9dfc>
   1c700:	blx	r6
   1c704:	mov	r1, r9
   1c708:	mov	r0, r5
   1c70c:	bl	125e4 <execv@plt>
   1c710:	mov	r0, #127	; 0x7f
   1c714:	bl	12278 <_exit@plt>
   1c718:	mov	r0, r5
   1c71c:	bl	126b0 <gcry_xstrdup@plt>
   1c720:	str	r0, [r9]
   1c724:	b	1c62c <__assert_fail@plt+0x9d24>
   1c728:	cmp	r4, #0
   1c72c:	ldreq	r4, [pc, #60]	; 1c770 <__assert_fail@plt+0x9e68>
   1c730:	beq	1c748 <__assert_fail@plt+0x9e40>
   1c734:	ldr	r3, [pc, #56]	; 1c774 <__assert_fail@plt+0x9e6c>
   1c738:	ldr	r2, [pc, #56]	; 1c778 <__assert_fail@plt+0x9e70>
   1c73c:	cmp	r4, #1
   1c740:	moveq	r4, r3
   1c744:	movne	r4, r2
   1c748:	bl	12620 <__errno_location@plt>
   1c74c:	ldr	r0, [r0]
   1c750:	bl	124dc <strerror@plt>
   1c754:	mov	r1, r4
   1c758:	mov	r2, r0
   1c75c:	ldr	r0, [pc, #24]	; 1c77c <__assert_fail@plt+0x9e74>
   1c760:	bl	17e1c <__assert_fail@plt+0x5514>
   1c764:	andeq	r4, r3, r8, lsr fp
   1c768:	andeq	r2, r2, r0, asr #17
   1c76c:	andeq	r3, r2, r0, asr #15
   1c770:			; <UNDEFINED> instruction: 0x000237b4
   1c774:			; <UNDEFINED> instruction: 0x000237b8
   1c778:			; <UNDEFINED> instruction: 0x000237bc
   1c77c:	ldrdeq	r3, [r2], -ip
   1c780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c784:	sub	sp, sp, #116	; 0x74
   1c788:	ldr	sl, [pc, #248]	; 1c888 <__assert_fail@plt+0x9f80>
   1c78c:	ldr	r3, [sl]
   1c790:	str	r3, [sp, #108]	; 0x6c
   1c794:	bl	1c3d4 <__assert_fail@plt+0x9acc>
   1c798:	mov	r1, #4
   1c79c:	mov	r9, r0
   1c7a0:	mov	r0, #32
   1c7a4:	bl	12158 <calloc@plt>
   1c7a8:	subs	r8, r0, #0
   1c7ac:	beq	1c850 <__assert_fail@plt+0x9f48>
   1c7b0:	cmp	r9, #0
   1c7b4:	ble	1c87c <__assert_fail@plt+0x9f74>
   1c7b8:	mov	r5, #0
   1c7bc:	mov	r4, r5
   1c7c0:	mov	r6, #32
   1c7c4:	b	1c810 <__assert_fail@plt+0x9f08>
   1c7c8:	add	r7, r5, #1
   1c7cc:	cmp	r7, r6
   1c7d0:	bcc	1c7fc <__assert_fail@plt+0x9ef4>
   1c7d4:	cmp	r6, #256	; 0x100
   1c7d8:	movcc	r3, #32
   1c7dc:	movcs	r3, #256	; 0x100
   1c7e0:	add	r6, r6, r3
   1c7e4:	mov	r0, r8
   1c7e8:	lsl	r1, r6, #2
   1c7ec:	bl	12350 <realloc@plt>
   1c7f0:	subs	fp, r0, #0
   1c7f4:	beq	1c86c <__assert_fail@plt+0x9f64>
   1c7f8:	mov	r8, fp
   1c7fc:	str	r4, [r8, r5, lsl #2]
   1c800:	add	r4, r4, #1
   1c804:	cmp	r9, r4
   1c808:	mov	r5, r7
   1c80c:	beq	1c844 <__assert_fail@plt+0x9f3c>
   1c810:	mov	r2, sp
   1c814:	mov	r1, r4
   1c818:	mov	r0, #3
   1c81c:	bl	123b0 <__fxstat64@plt>
   1c820:	cmn	r0, #1
   1c824:	bne	1c7c8 <__assert_fail@plt+0x9ec0>
   1c828:	bl	12620 <__errno_location@plt>
   1c82c:	ldr	r3, [r0]
   1c830:	cmp	r3, #9
   1c834:	bne	1c7c8 <__assert_fail@plt+0x9ec0>
   1c838:	add	r4, r4, #1
   1c83c:	cmp	r9, r4
   1c840:	bne	1c810 <__assert_fail@plt+0x9f08>
   1c844:	add	r5, r8, r5, lsl #2
   1c848:	mvn	r3, #0
   1c84c:	str	r3, [r5]
   1c850:	ldr	r2, [sp, #108]	; 0x6c
   1c854:	ldr	r3, [sl]
   1c858:	mov	r0, r8
   1c85c:	cmp	r2, r3
   1c860:	bne	1c884 <__assert_fail@plt+0x9f7c>
   1c864:	add	sp, sp, #116	; 0x74
   1c868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c86c:	mov	r0, r8
   1c870:	bl	12230 <free@plt>
   1c874:	mov	r8, fp
   1c878:	b	1c850 <__assert_fail@plt+0x9f48>
   1c87c:	mov	r5, r8
   1c880:	b	1c848 <__assert_fail@plt+0x9f40>
   1c884:	bl	122fc <__stack_chk_fail@plt>
   1c888:	andeq	r4, r3, r8, lsr fp
   1c88c:	cmp	r1, #0
   1c890:	beq	1c8a0 <__assert_fail@plt+0x9f98>
   1c894:	mov	r3, r2
   1c898:	mov	r2, #0
   1c89c:	b	1c23c <__assert_fail@plt+0x9934>
   1c8a0:	b	1c384 <__assert_fail@plt+0x9a7c>
   1c8a4:	cmp	r1, #0
   1c8a8:	beq	1c8b8 <__assert_fail@plt+0x9fb0>
   1c8ac:	mov	r3, r2
   1c8b0:	mov	r2, #1
   1c8b4:	b	1c23c <__assert_fail@plt+0x9934>
   1c8b8:	b	1c384 <__assert_fail@plt+0x9a7c>
   1c8bc:	b	1c384 <__assert_fail@plt+0x9a7c>
   1c8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8c4:	sub	sp, sp, #76	; 0x4c
   1c8c8:	ldr	sl, [pc, #976]	; 1cca0 <__assert_fail@plt+0xa398>
   1c8cc:	ldr	ip, [pc, #976]	; 1cca4 <__assert_fail@plt+0xa39c>
   1c8d0:	ldr	r5, [sp, #116]	; 0x74
   1c8d4:	ldr	r6, [sl]
   1c8d8:	cmp	r5, #0
   1c8dc:	str	r6, [sp, #68]	; 0x44
   1c8e0:	ldrd	r6, [sp, #120]	; 0x78
   1c8e4:	strd	r0, [sp, #16]
   1c8e8:	ldm	ip, {r0, r1}
   1c8ec:	mov	ip, #0
   1c8f0:	strne	ip, [r5]
   1c8f4:	cmp	r6, #0
   1c8f8:	strd	r2, [sp, #24]
   1c8fc:	ldr	r4, [sp, #112]	; 0x70
   1c900:	movne	r3, #0
   1c904:	strne	r3, [r6]
   1c908:	ldr	fp, [sp, #128]	; 0x80
   1c90c:	cmp	r7, #0
   1c910:	movne	r3, #0
   1c914:	add	lr, sp, #44	; 0x2c
   1c918:	add	r9, sp, #52	; 0x34
   1c91c:	add	r8, sp, #60	; 0x3c
   1c920:	strne	r3, [r7]
   1c924:	lsr	r4, r4, #4
   1c928:	mvn	r3, #0
   1c92c:	cmp	r5, #0
   1c930:	stm	lr, {r0, r1}
   1c934:	stm	r9, {r0, r1}
   1c938:	stm	r8, {r0, r1}
   1c93c:	and	r4, r4, #1
   1c940:	str	ip, [sp, #32]
   1c944:	str	ip, [sp, #36]	; 0x24
   1c948:	str	ip, [sp, #40]	; 0x28
   1c94c:	str	r3, [fp]
   1c950:	beq	1c970 <__assert_fail@plt+0xa068>
   1c954:	mov	r3, r4
   1c958:	mov	r0, lr
   1c95c:	mov	r2, #1
   1c960:	add	r1, sp, #32
   1c964:	bl	1c23c <__assert_fail@plt+0x9934>
   1c968:	subs	r3, r0, #0
   1c96c:	bne	1ca2c <__assert_fail@plt+0xa124>
   1c970:	cmp	r6, #0
   1c974:	beq	1c994 <__assert_fail@plt+0xa08c>
   1c978:	mov	r3, r4
   1c97c:	mov	r0, r9
   1c980:	mov	r2, #0
   1c984:	add	r1, sp, #36	; 0x24
   1c988:	bl	1c23c <__assert_fail@plt+0x9934>
   1c98c:	subs	r3, r0, #0
   1c990:	bne	1caac <__assert_fail@plt+0xa1a4>
   1c994:	cmp	r7, #0
   1c998:	beq	1c9b8 <__assert_fail@plt+0xa0b0>
   1c99c:	mov	r3, r4
   1c9a0:	mov	r0, r8
   1c9a4:	mov	r2, #0
   1c9a8:	add	r1, sp, #40	; 0x28
   1c9ac:	bl	1c23c <__assert_fail@plt+0x9934>
   1c9b0:	subs	r3, r0, #0
   1c9b4:	bne	1ca48 <__assert_fail@plt+0xa140>
   1c9b8:	bl	12734 <fork@plt>
   1c9bc:	cmn	r0, #1
   1c9c0:	str	r0, [fp]
   1c9c4:	beq	1cad4 <__assert_fail@plt+0xa1cc>
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1cc58 <__assert_fail@plt+0xa350>
   1c9d0:	ldr	r0, [sp, #44]	; 0x2c
   1c9d4:	cmn	r0, #1
   1c9d8:	beq	1c9e0 <__assert_fail@plt+0xa0d8>
   1c9dc:	bl	128cc <close@plt>
   1c9e0:	ldr	r0, [sp, #56]	; 0x38
   1c9e4:	cmn	r0, #1
   1c9e8:	beq	1c9f0 <__assert_fail@plt+0xa0e8>
   1c9ec:	bl	128cc <close@plt>
   1c9f0:	ldr	r0, [sp, #64]	; 0x40
   1c9f4:	cmn	r0, #1
   1c9f8:	beq	1ca00 <__assert_fail@plt+0xa0f8>
   1c9fc:	bl	128cc <close@plt>
   1ca00:	cmp	r5, #0
   1ca04:	ldrne	r3, [sp, #32]
   1ca08:	strne	r3, [r5]
   1ca0c:	cmp	r6, #0
   1ca10:	ldrne	r3, [sp, #36]	; 0x24
   1ca14:	strne	r3, [r6]
   1ca18:	cmp	r7, #0
   1ca1c:	movne	r3, #0
   1ca20:	ldrne	r2, [sp, #40]	; 0x28
   1ca24:	moveq	r3, r7
   1ca28:	strne	r2, [r7]
   1ca2c:	ldr	r1, [sp, #68]	; 0x44
   1ca30:	ldr	r2, [sl]
   1ca34:	mov	r0, r3
   1ca38:	cmp	r1, r2
   1ca3c:	bne	1cc54 <__assert_fail@plt+0xa34c>
   1ca40:	add	sp, sp, #76	; 0x4c
   1ca44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca48:	ldr	r0, [sp, #32]
   1ca4c:	cmp	r0, #0
   1ca50:	beq	1cbac <__assert_fail@plt+0xa2a4>
   1ca54:	str	r3, [sp, #16]
   1ca58:	bl	12440 <gpgrt_fclose@plt>
   1ca5c:	ldr	r3, [sp, #16]
   1ca60:	ldr	r0, [sp, #44]	; 0x2c
   1ca64:	cmn	r0, #1
   1ca68:	beq	1ca78 <__assert_fail@plt+0xa170>
   1ca6c:	str	r3, [sp, #16]
   1ca70:	bl	128cc <close@plt>
   1ca74:	ldr	r3, [sp, #16]
   1ca78:	ldr	r0, [sp, #36]	; 0x24
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1cbc8 <__assert_fail@plt+0xa2c0>
   1ca84:	str	r3, [sp, #16]
   1ca88:	bl	12440 <gpgrt_fclose@plt>
   1ca8c:	ldr	r3, [sp, #16]
   1ca90:	ldr	r0, [sp, #56]	; 0x38
   1ca94:	cmn	r0, #1
   1ca98:	beq	1ca2c <__assert_fail@plt+0xa124>
   1ca9c:	str	r3, [sp, #16]
   1caa0:	bl	128cc <close@plt>
   1caa4:	ldr	r3, [sp, #16]
   1caa8:	b	1ca2c <__assert_fail@plt+0xa124>
   1caac:	ldr	r0, [sp, #32]
   1cab0:	cmp	r0, #0
   1cab4:	beq	1cbe4 <__assert_fail@plt+0xa2dc>
   1cab8:	str	r3, [sp, #16]
   1cabc:	bl	12440 <gpgrt_fclose@plt>
   1cac0:	ldr	r3, [sp, #16]
   1cac4:	ldr	r0, [sp, #44]	; 0x2c
   1cac8:	cmn	r0, #1
   1cacc:	beq	1ca2c <__assert_fail@plt+0xa124>
   1cad0:	b	1ca9c <__assert_fail@plt+0xa194>
   1cad4:	ldr	r3, [pc, #460]	; 1cca8 <__assert_fail@plt+0xa3a0>
   1cad8:	ldr	r4, [r3]
   1cadc:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1cae0:	mov	r2, #5
   1cae4:	ldr	r1, [pc, #448]	; 1ccac <__assert_fail@plt+0xa3a4>
   1cae8:	subs	r3, r0, #0
   1caec:	lslne	r4, r4, #24
   1caf0:	uxthne	r3, r3
   1caf4:	andne	r4, r4, #2130706432	; 0x7f000000
   1caf8:	orrne	r3, r4, r3
   1cafc:	mov	r0, #0
   1cb00:	str	r3, [sp, #16]
   1cb04:	bl	122f0 <dcgettext@plt>
   1cb08:	ldr	r3, [sp, #16]
   1cb0c:	mov	r4, r0
   1cb10:	mov	r0, r3
   1cb14:	bl	127ac <gpg_strerror@plt>
   1cb18:	mov	r1, r0
   1cb1c:	mov	r0, r4
   1cb20:	bl	17d98 <__assert_fail@plt+0x5490>
   1cb24:	ldr	r0, [sp, #32]
   1cb28:	ldr	r3, [sp, #16]
   1cb2c:	cmp	r0, #0
   1cb30:	beq	1cc00 <__assert_fail@plt+0xa2f8>
   1cb34:	bl	12440 <gpgrt_fclose@plt>
   1cb38:	ldr	r3, [sp, #16]
   1cb3c:	ldr	r0, [sp, #44]	; 0x2c
   1cb40:	cmn	r0, #1
   1cb44:	beq	1cb54 <__assert_fail@plt+0xa24c>
   1cb48:	str	r3, [sp, #16]
   1cb4c:	bl	128cc <close@plt>
   1cb50:	ldr	r3, [sp, #16]
   1cb54:	ldr	r0, [sp, #36]	; 0x24
   1cb58:	cmp	r0, #0
   1cb5c:	beq	1cc1c <__assert_fail@plt+0xa314>
   1cb60:	str	r3, [sp, #16]
   1cb64:	bl	12440 <gpgrt_fclose@plt>
   1cb68:	ldr	r3, [sp, #16]
   1cb6c:	ldr	r0, [sp, #56]	; 0x38
   1cb70:	cmn	r0, #1
   1cb74:	beq	1cb84 <__assert_fail@plt+0xa27c>
   1cb78:	str	r3, [sp, #16]
   1cb7c:	bl	128cc <close@plt>
   1cb80:	ldr	r3, [sp, #16]
   1cb84:	ldr	r0, [sp, #40]	; 0x28
   1cb88:	cmp	r0, #0
   1cb8c:	beq	1cc38 <__assert_fail@plt+0xa330>
   1cb90:	str	r3, [sp, #16]
   1cb94:	bl	12440 <gpgrt_fclose@plt>
   1cb98:	ldr	r3, [sp, #16]
   1cb9c:	ldr	r0, [sp, #64]	; 0x40
   1cba0:	cmn	r0, #1
   1cba4:	beq	1ca2c <__assert_fail@plt+0xa124>
   1cba8:	b	1ca9c <__assert_fail@plt+0xa194>
   1cbac:	ldr	r0, [sp, #48]	; 0x30
   1cbb0:	cmn	r0, #1
   1cbb4:	beq	1ca60 <__assert_fail@plt+0xa158>
   1cbb8:	str	r3, [sp, #16]
   1cbbc:	bl	128cc <close@plt>
   1cbc0:	ldr	r3, [sp, #16]
   1cbc4:	b	1ca60 <__assert_fail@plt+0xa158>
   1cbc8:	ldr	r0, [sp, #52]	; 0x34
   1cbcc:	cmn	r0, #1
   1cbd0:	beq	1ca90 <__assert_fail@plt+0xa188>
   1cbd4:	str	r3, [sp, #16]
   1cbd8:	bl	128cc <close@plt>
   1cbdc:	ldr	r3, [sp, #16]
   1cbe0:	b	1ca90 <__assert_fail@plt+0xa188>
   1cbe4:	ldr	r0, [sp, #48]	; 0x30
   1cbe8:	cmn	r0, #1
   1cbec:	beq	1cac4 <__assert_fail@plt+0xa1bc>
   1cbf0:	str	r3, [sp, #16]
   1cbf4:	bl	128cc <close@plt>
   1cbf8:	ldr	r3, [sp, #16]
   1cbfc:	b	1cac4 <__assert_fail@plt+0xa1bc>
   1cc00:	ldr	r0, [sp, #48]	; 0x30
   1cc04:	cmn	r0, #1
   1cc08:	beq	1cb3c <__assert_fail@plt+0xa234>
   1cc0c:	str	r3, [sp, #16]
   1cc10:	bl	128cc <close@plt>
   1cc14:	ldr	r3, [sp, #16]
   1cc18:	b	1cb3c <__assert_fail@plt+0xa234>
   1cc1c:	ldr	r0, [sp, #52]	; 0x34
   1cc20:	cmn	r0, #1
   1cc24:	beq	1cb6c <__assert_fail@plt+0xa264>
   1cc28:	str	r3, [sp, #16]
   1cc2c:	bl	128cc <close@plt>
   1cc30:	ldr	r3, [sp, #16]
   1cc34:	b	1cb6c <__assert_fail@plt+0xa264>
   1cc38:	ldr	r0, [sp, #60]	; 0x3c
   1cc3c:	cmn	r0, #1
   1cc40:	beq	1cb9c <__assert_fail@plt+0xa294>
   1cc44:	str	r3, [sp, #16]
   1cc48:	bl	128cc <close@plt>
   1cc4c:	ldr	r3, [sp, #16]
   1cc50:	b	1cb9c <__assert_fail@plt+0xa294>
   1cc54:	bl	122fc <__stack_chk_fail@plt>
   1cc58:	mov	r0, #25
   1cc5c:	bl	12818 <gcry_control@plt>
   1cc60:	ldr	r0, [sp, #32]
   1cc64:	bl	12440 <gpgrt_fclose@plt>
   1cc68:	ldr	r0, [sp, #36]	; 0x24
   1cc6c:	bl	12440 <gpgrt_fclose@plt>
   1cc70:	ldr	r0, [sp, #40]	; 0x28
   1cc74:	bl	12440 <gpgrt_fclose@plt>
   1cc78:	ldr	r2, [sp, #28]
   1cc7c:	ldr	r3, [sp, #64]	; 0x40
   1cc80:	str	r2, [sp, #8]
   1cc84:	ldr	r2, [sp, #24]
   1cc88:	str	r3, [sp]
   1cc8c:	str	r2, [sp, #4]
   1cc90:	ldrd	r0, [sp, #16]
   1cc94:	ldr	r3, [sp, #56]	; 0x38
   1cc98:	ldr	r2, [sp, #44]	; 0x2c
   1cc9c:	bl	1c598 <__assert_fail@plt+0x9c90>
   1cca0:	andeq	r4, r3, r8, lsr fp
   1cca4:	andeq	r3, r2, r0, asr #14
   1cca8:	andeq	r5, r3, ip, lsr r3
   1ccac:	strdeq	r3, [r2], -r4
   1ccb0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ccb4:	sub	sp, sp, #20
   1ccb8:	mov	r6, r0
   1ccbc:	ldr	r5, [sp, #52]	; 0x34
   1ccc0:	mov	r7, r1
   1ccc4:	mov	r8, r2
   1ccc8:	mov	r9, r3
   1cccc:	bl	12734 <fork@plt>
   1ccd0:	cmn	r0, #1
   1ccd4:	str	r0, [r5]
   1ccd8:	beq	1ccf8 <__assert_fail@plt+0xa3f0>
   1ccdc:	cmp	r0, #0
   1cce0:	mov	r4, r0
   1cce4:	movne	r4, #0
   1cce8:	beq	1cd50 <__assert_fail@plt+0xa448>
   1ccec:	mov	r0, r4
   1ccf0:	add	sp, sp, #20
   1ccf4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ccf8:	ldr	r3, [pc, #124]	; 1cd7c <__assert_fail@plt+0xa474>
   1ccfc:	ldr	r5, [r3]
   1cd00:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1cd04:	mov	r2, #5
   1cd08:	ldr	r1, [pc, #112]	; 1cd80 <__assert_fail@plt+0xa478>
   1cd0c:	subs	r4, r0, #0
   1cd10:	lslne	r5, r5, #24
   1cd14:	andne	r5, r5, #2130706432	; 0x7f000000
   1cd18:	uxthne	r4, r4
   1cd1c:	mov	r0, #0
   1cd20:	orrne	r4, r5, r4
   1cd24:	bl	122f0 <dcgettext@plt>
   1cd28:	mov	r5, r0
   1cd2c:	bl	12620 <__errno_location@plt>
   1cd30:	ldr	r0, [r0]
   1cd34:	bl	124dc <strerror@plt>
   1cd38:	mov	r1, r0
   1cd3c:	mov	r0, r5
   1cd40:	bl	17d98 <__assert_fail@plt+0x5490>
   1cd44:	mov	r0, r4
   1cd48:	add	sp, sp, #20
   1cd4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cd50:	mov	r0, #25
   1cd54:	bl	12818 <gcry_control@plt>
   1cd58:	ldr	r3, [sp, #48]	; 0x30
   1cd5c:	str	r4, [sp, #8]
   1cd60:	str	r3, [sp]
   1cd64:	str	r4, [sp, #4]
   1cd68:	mov	r3, r9
   1cd6c:	mov	r2, r8
   1cd70:	mov	r1, r7
   1cd74:	mov	r0, r6
   1cd78:	bl	1c598 <__assert_fail@plt+0x9c90>
   1cd7c:	andeq	r5, r3, ip, lsr r3
   1cd80:	strdeq	r3, [r2], -r4
   1cd84:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cd88:	subs	r8, r3, #0
   1cd8c:	ldr	r7, [pc, #376]	; 1cf0c <__assert_fail@plt+0xa604>
   1cd90:	sub	sp, sp, #12
   1cd94:	mov	r9, r0
   1cd98:	ldr	r3, [r7]
   1cd9c:	mov	r6, r1
   1cda0:	str	r3, [sp, #4]
   1cda4:	mvnne	r3, #0
   1cda8:	strne	r3, [r8]
   1cdac:	cmn	r1, #1
   1cdb0:	beq	1cee0 <__assert_fail@plt+0xa5d8>
   1cdb4:	clz	r5, r2
   1cdb8:	lsr	r5, r5, #5
   1cdbc:	b	1cdd4 <__assert_fail@plt+0xa4cc>
   1cdc0:	bl	12620 <__errno_location@plt>
   1cdc4:	mov	r4, r0
   1cdc8:	ldr	r0, [r0]
   1cdcc:	cmp	r0, #4
   1cdd0:	bne	1ce88 <__assert_fail@plt+0xa580>
   1cdd4:	mov	r2, r5
   1cdd8:	mov	r1, sp
   1cddc:	mov	r0, r6
   1cde0:	bl	123f8 <waitpid@plt>
   1cde4:	cmn	r0, #1
   1cde8:	beq	1cdc0 <__assert_fail@plt+0xa4b8>
   1cdec:	cmp	r0, #0
   1cdf0:	moveq	r0, #62	; 0x3e
   1cdf4:	bne	1ce10 <__assert_fail@plt+0xa508>
   1cdf8:	ldr	r2, [sp, #4]
   1cdfc:	ldr	r3, [r7]
   1ce00:	cmp	r2, r3
   1ce04:	bne	1cf08 <__assert_fail@plt+0xa600>
   1ce08:	add	sp, sp, #12
   1ce0c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ce10:	ldr	r3, [sp]
   1ce14:	ands	r2, r3, #127	; 0x7f
   1ce18:	bne	1ce68 <__assert_fail@plt+0xa560>
   1ce1c:	asr	r3, r3, #8
   1ce20:	uxtb	r0, r3
   1ce24:	cmp	r0, #127	; 0x7f
   1ce28:	beq	1cee8 <__assert_fail@plt+0xa5e0>
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1ced0 <__assert_fail@plt+0xa5c8>
   1ce34:	cmp	r8, #0
   1ce38:	strne	r0, [r8]
   1ce3c:	movne	r0, #1
   1ce40:	bne	1cdf8 <__assert_fail@plt+0xa4f0>
   1ce44:	mov	r2, #5
   1ce48:	ldr	r1, [pc, #192]	; 1cf10 <__assert_fail@plt+0xa608>
   1ce4c:	mov	r0, r8
   1ce50:	bl	122f0 <dcgettext@plt>
   1ce54:	mov	r1, r9
   1ce58:	ldrb	r2, [sp, #1]
   1ce5c:	bl	17d98 <__assert_fail@plt+0x5490>
   1ce60:	mov	r0, #1
   1ce64:	b	1cdf8 <__assert_fail@plt+0xa4f0>
   1ce68:	mov	r2, #5
   1ce6c:	ldr	r1, [pc, #160]	; 1cf14 <__assert_fail@plt+0xa60c>
   1ce70:	mov	r0, #0
   1ce74:	bl	122f0 <dcgettext@plt>
   1ce78:	mov	r1, r9
   1ce7c:	bl	17d98 <__assert_fail@plt+0x5490>
   1ce80:	mov	r0, #1
   1ce84:	b	1cdf8 <__assert_fail@plt+0xa4f0>
   1ce88:	bl	123d4 <gpg_err_code_from_errno@plt>
   1ce8c:	mov	r2, #5
   1ce90:	ldr	r1, [pc, #128]	; 1cf18 <__assert_fail@plt+0xa610>
   1ce94:	mov	r5, r0
   1ce98:	mov	r0, #0
   1ce9c:	bl	122f0 <dcgettext@plt>
   1cea0:	mov	r8, r0
   1cea4:	ldr	r0, [r4]
   1cea8:	bl	124dc <strerror@plt>
   1ceac:	mov	r1, r6
   1ceb0:	mov	r2, r0
   1ceb4:	mov	r0, r8
   1ceb8:	bl	17d98 <__assert_fail@plt+0x5490>
   1cebc:	cmp	r5, #0
   1cec0:	uxthne	r0, r5
   1cec4:	bne	1cdf8 <__assert_fail@plt+0xa4f0>
   1cec8:	mov	r0, #0
   1cecc:	b	1cdf8 <__assert_fail@plt+0xa4f0>
   1ced0:	cmp	r8, #0
   1ced4:	strne	r0, [r8]
   1ced8:	bne	1cdf8 <__assert_fail@plt+0xa4f0>
   1cedc:	b	1cec8 <__assert_fail@plt+0xa5c0>
   1cee0:	mov	r0, #55	; 0x37
   1cee4:	b	1cdf8 <__assert_fail@plt+0xa4f0>
   1cee8:	mov	r0, r2
   1ceec:	ldr	r1, [pc, #40]	; 1cf1c <__assert_fail@plt+0xa614>
   1cef0:	mov	r2, #5
   1cef4:	bl	122f0 <dcgettext@plt>
   1cef8:	mov	r1, r9
   1cefc:	bl	17d98 <__assert_fail@plt+0x5490>
   1cf00:	mov	r0, #115	; 0x73
   1cf04:	b	1cdf8 <__assert_fail@plt+0xa4f0>
   1cf08:	bl	122fc <__stack_chk_fail@plt>
   1cf0c:	andeq	r4, r3, r8, lsr fp
   1cf10:	andeq	r3, r2, ip, lsr r8
   1cf14:	andeq	r3, r2, r0, ror #16
   1cf18:	andeq	r3, r2, r0, lsl #17
   1cf1c:	andeq	r3, r2, r0, lsl r8
   1cf20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf24:	sub	sp, sp, #36	; 0x24
   1cf28:	mov	sl, r1
   1cf2c:	str	r0, [sp, #16]
   1cf30:	ldr	r0, [pc, #896]	; 1d2b8 <__assert_fail@plt+0xa9b0>
   1cf34:	ldr	ip, [sp, #72]	; 0x48
   1cf38:	str	r3, [sp, #12]
   1cf3c:	cmp	ip, #0
   1cf40:	ldr	r0, [r0]
   1cf44:	movne	r3, #0
   1cf48:	str	ip, [sp, #4]
   1cf4c:	mov	r7, r2
   1cf50:	str	r0, [sp, #28]
   1cf54:	strne	r3, [sp, #8]
   1cf58:	beq	1d250 <__assert_fail@plt+0xa948>
   1cf5c:	cmp	r7, #0
   1cf60:	beq	1d27c <__assert_fail@plt+0xa974>
   1cf64:	ldr	ip, [sl]
   1cf68:	cmn	ip, #1
   1cf6c:	beq	1d210 <__assert_fail@plt+0xa908>
   1cf70:	ldr	r3, [sp, #4]
   1cf74:	ldr	r9, [pc, #832]	; 1d2bc <__assert_fail@plt+0xa9b4>
   1cf78:	sub	r3, r3, #4
   1cf7c:	mov	r6, r3
   1cf80:	mov	r4, sl
   1cf84:	mov	r8, r7
   1cf88:	mov	r5, #0
   1cf8c:	str	r3, [sp, #20]
   1cf90:	ldr	r2, [r9]
   1cf94:	cmp	r2, #0
   1cf98:	beq	1cfc8 <__assert_fail@plt+0xa6c0>
   1cf9c:	ldr	r3, [r2]
   1cfa0:	cmp	r3, ip
   1cfa4:	bne	1cfbc <__assert_fail@plt+0xa6b4>
   1cfa8:	b	1d228 <__assert_fail@plt+0xa920>
   1cfac:	ldr	r1, [r3]
   1cfb0:	cmp	r1, ip
   1cfb4:	beq	1cff0 <__assert_fail@plt+0xa6e8>
   1cfb8:	mov	r2, r3
   1cfbc:	ldr	r3, [r2, #8]
   1cfc0:	cmp	r3, #0
   1cfc4:	bne	1cfac <__assert_fail@plt+0xa6a4>
   1cfc8:	add	r3, r5, #1
   1cfcc:	mvn	fp, #0
   1cfd0:	cmp	r7, r3
   1cfd4:	str	fp, [r6, #4]!
   1cfd8:	beq	1d01c <__assert_fail@plt+0xa714>
   1cfdc:	ldr	ip, [r4, #4]!
   1cfe0:	cmn	ip, #1
   1cfe4:	beq	1d210 <__assert_fail@plt+0xa908>
   1cfe8:	mov	r5, r3
   1cfec:	b	1cf90 <__assert_fail@plt+0xa688>
   1cff0:	add	r2, r2, #8
   1cff4:	ldr	r1, [r3, #8]
   1cff8:	mov	r0, r3
   1cffc:	str	r1, [r2]
   1d000:	ldr	fp, [r3, #4]
   1d004:	bl	122a8 <gcry_free@plt>
   1d008:	add	r3, r5, #1
   1d00c:	cmp	r7, r3
   1d010:	sub	r8, r8, #1
   1d014:	str	fp, [r6, #4]!
   1d018:	bne	1cfdc <__assert_fail@plt+0xa6d4>
   1d01c:	cmp	r8, #0
   1d020:	beq	1d208 <__assert_fail@plt+0xa900>
   1d024:	ldr	r3, [sp, #12]
   1d028:	clz	r6, r3
   1d02c:	lsr	r6, r6, #5
   1d030:	b	1d044 <__assert_fail@plt+0xa73c>
   1d034:	bl	12620 <__errno_location@plt>
   1d038:	ldr	r3, [r0]
   1d03c:	cmp	r3, #4
   1d040:	bne	1d0c4 <__assert_fail@plt+0xa7bc>
   1d044:	mov	r2, r6
   1d048:	add	r1, sp, #24
   1d04c:	mvn	r0, #0
   1d050:	bl	123f8 <waitpid@plt>
   1d054:	cmn	r0, #1
   1d058:	mov	r4, r0
   1d05c:	beq	1d034 <__assert_fail@plt+0xa72c>
   1d060:	cmp	r0, #0
   1d064:	beq	1d284 <__assert_fail@plt+0xa97c>
   1d068:	ldr	r3, [sl]
   1d06c:	cmp	r0, r3
   1d070:	beq	1d274 <__assert_fail@plt+0xa96c>
   1d074:	mov	r2, sl
   1d078:	mov	r3, #0
   1d07c:	b	1d090 <__assert_fail@plt+0xa788>
   1d080:	ldr	r1, [r2, #4]!
   1d084:	lsl	r0, r3, #2
   1d088:	cmp	r1, r4
   1d08c:	beq	1d1e4 <__assert_fail@plt+0xa8dc>
   1d090:	cmp	r5, r3
   1d094:	add	r3, r3, #1
   1d098:	bne	1d080 <__assert_fail@plt+0xa778>
   1d09c:	mov	r0, #12
   1d0a0:	ldr	fp, [sp, #24]
   1d0a4:	bl	1217c <gcry_malloc@plt>
   1d0a8:	cmp	r0, #0
   1d0ac:	beq	1d28c <__assert_fail@plt+0xa984>
   1d0b0:	ldr	r3, [r9]
   1d0b4:	stm	r0, {r4, fp}
   1d0b8:	str	r3, [r0, #8]
   1d0bc:	str	r0, [r9]
   1d0c0:	b	1d044 <__assert_fail@plt+0xa73c>
   1d0c4:	mov	r4, r0
   1d0c8:	mov	r0, r3
   1d0cc:	bl	123d4 <gpg_err_code_from_errno@plt>
   1d0d0:	mov	r2, #5
   1d0d4:	ldr	r1, [pc, #484]	; 1d2c0 <__assert_fail@plt+0xa9b8>
   1d0d8:	str	r0, [sp, #12]
   1d0dc:	mov	r0, #0
   1d0e0:	bl	122f0 <dcgettext@plt>
   1d0e4:	mov	r5, r0
   1d0e8:	ldr	r0, [r4]
   1d0ec:	bl	124dc <strerror@plt>
   1d0f0:	mov	r1, r0
   1d0f4:	mov	r0, r5
   1d0f8:	bl	17d98 <__assert_fail@plt+0x5490>
   1d0fc:	ldr	r3, [sp, #12]
   1d100:	ldr	r2, [sp, #4]
   1d104:	ldr	r4, [pc, #440]	; 1d2c4 <__assert_fail@plt+0xa9bc>
   1d108:	add	r7, r2, r7, lsl #2
   1d10c:	ldr	r5, [pc, #436]	; 1d2c8 <__assert_fail@plt+0xa9c0>
   1d110:	ldr	r6, [pc, #436]	; 1d2cc <__assert_fail@plt+0xa9c4>
   1d114:	sub	r7, r7, #4
   1d118:	ldr	r8, [sp, #20]
   1d11c:	ldr	r9, [sp, #16]
   1d120:	b	1d14c <__assert_fail@plt+0xa844>
   1d124:	mov	r2, #5
   1d128:	mov	r1, r4
   1d12c:	mov	r0, #0
   1d130:	bl	122f0 <dcgettext@plt>
   1d134:	ldr	r1, [r9]
   1d138:	bl	17d98 <__assert_fail@plt+0x5490>
   1d13c:	mov	r3, #1
   1d140:	cmp	r8, r7
   1d144:	add	r9, r9, #4
   1d148:	beq	1d1b4 <__assert_fail@plt+0xa8ac>
   1d14c:	ldr	r2, [r8, #4]!
   1d150:	cmn	r2, #1
   1d154:	beq	1d140 <__assert_fail@plt+0xa838>
   1d158:	ands	r0, r2, #127	; 0x7f
   1d15c:	bne	1d124 <__assert_fail@plt+0xa81c>
   1d160:	asr	r2, r2, #8
   1d164:	uxtb	r2, r2
   1d168:	cmp	r2, #127	; 0x7f
   1d16c:	beq	1d234 <__assert_fail@plt+0xa92c>
   1d170:	cmp	r2, #0
   1d174:	beq	1d140 <__assert_fail@plt+0xa838>
   1d178:	ldr	r3, [sp, #8]
   1d17c:	cmp	r3, #0
   1d180:	streq	r2, [r8]
   1d184:	moveq	r3, #1
   1d188:	beq	1d140 <__assert_fail@plt+0xa838>
   1d18c:	mov	r2, #5
   1d190:	mov	r1, r5
   1d194:	bl	122f0 <dcgettext@plt>
   1d198:	ldr	r1, [r9]
   1d19c:	ldrb	r2, [r8, #1]
   1d1a0:	bl	17d98 <__assert_fail@plt+0x5490>
   1d1a4:	cmp	r8, r7
   1d1a8:	mov	r3, #1
   1d1ac:	add	r9, r9, #4
   1d1b0:	bne	1d14c <__assert_fail@plt+0xa844>
   1d1b4:	ldr	r0, [sp, #8]
   1d1b8:	str	r3, [sp, #4]
   1d1bc:	bl	122a8 <gcry_free@plt>
   1d1c0:	ldr	r3, [sp, #4]
   1d1c4:	uxth	r0, r3
   1d1c8:	ldr	r3, [pc, #232]	; 1d2b8 <__assert_fail@plt+0xa9b0>
   1d1cc:	ldr	r2, [sp, #28]
   1d1d0:	ldr	r3, [r3]
   1d1d4:	cmp	r2, r3
   1d1d8:	bne	1d2b4 <__assert_fail@plt+0xa9ac>
   1d1dc:	add	sp, sp, #36	; 0x24
   1d1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1e4:	ldr	r3, [sp, #4]
   1d1e8:	add	r0, r3, r0
   1d1ec:	ldr	r3, [r0]
   1d1f0:	cmn	r3, #1
   1d1f4:	bne	1d2a0 <__assert_fail@plt+0xa998>
   1d1f8:	ldr	r3, [sp, #24]
   1d1fc:	subs	r8, r8, #1
   1d200:	str	r3, [r0]
   1d204:	bne	1d044 <__assert_fail@plt+0xa73c>
   1d208:	mov	r3, #0
   1d20c:	b	1d100 <__assert_fail@plt+0xa7f8>
   1d210:	ldr	r3, [pc, #184]	; 1d2d0 <__assert_fail@plt+0xa9c8>
   1d214:	ldr	r3, [r3]
   1d218:	lsl	r3, r3, #24
   1d21c:	and	r3, r3, #2130706432	; 0x7f000000
   1d220:	orr	r0, r3, #55	; 0x37
   1d224:	b	1d1c8 <__assert_fail@plt+0xa8c0>
   1d228:	mov	r3, r2
   1d22c:	ldr	r2, [pc, #136]	; 1d2bc <__assert_fail@plt+0xa9b4>
   1d230:	b	1cff4 <__assert_fail@plt+0xa6ec>
   1d234:	mov	r2, #5
   1d238:	mov	r1, r6
   1d23c:	bl	122f0 <dcgettext@plt>
   1d240:	ldr	r1, [r9]
   1d244:	bl	17d98 <__assert_fail@plt+0x5490>
   1d248:	mov	r3, #115	; 0x73
   1d24c:	b	1d140 <__assert_fail@plt+0xa838>
   1d250:	lsl	r0, r2, #2
   1d254:	bl	1217c <gcry_malloc@plt>
   1d258:	subs	r3, r0, #0
   1d25c:	str	r3, [sp, #4]
   1d260:	ldrne	r3, [sp, #4]
   1d264:	strne	r3, [sp, #8]
   1d268:	bne	1cf5c <__assert_fail@plt+0xa654>
   1d26c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1d270:	b	1d1c8 <__assert_fail@plt+0xa8c0>
   1d274:	ldr	r0, [sp, #4]
   1d278:	b	1d1ec <__assert_fail@plt+0xa8e4>
   1d27c:	mov	r3, r7
   1d280:	b	1d1b4 <__assert_fail@plt+0xa8ac>
   1d284:	mov	r3, #62	; 0x3e
   1d288:	b	1d100 <__assert_fail@plt+0xa7f8>
   1d28c:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1d290:	cmp	r0, #0
   1d294:	beq	1d044 <__assert_fail@plt+0xa73c>
   1d298:	mov	r3, r0
   1d29c:	b	1d100 <__assert_fail@plt+0xa7f8>
   1d2a0:	mov	r1, r4
   1d2a4:	ldr	r0, [pc, #40]	; 1d2d4 <__assert_fail@plt+0xa9cc>
   1d2a8:	bl	17d98 <__assert_fail@plt+0x5490>
   1d2ac:	mov	r3, #1
   1d2b0:	b	1d100 <__assert_fail@plt+0xa7f8>
   1d2b4:	bl	122fc <__stack_chk_fail@plt>
   1d2b8:	andeq	r4, r3, r8, lsr fp
   1d2bc:	andeq	r5, r3, r0, ror #8
   1d2c0:	andeq	r3, r2, r4, asr #17
   1d2c4:	andeq	r3, r2, r0, ror #16
   1d2c8:	andeq	r3, r2, ip, lsr r8
   1d2cc:	andeq	r3, r2, r0, lsl r8
   1d2d0:	andeq	r5, r3, ip, lsr r3
   1d2d4:			; <UNDEFINED> instruction: 0x000238b0
   1d2d8:	bx	lr
   1d2dc:	push	{r4, r5, r6, r7, lr}
   1d2e0:	sub	sp, sp, #20
   1d2e4:	mov	r7, r1
   1d2e8:	mov	r6, r2
   1d2ec:	mov	r5, r0
   1d2f0:	bl	1220c <getuid@plt>
   1d2f4:	mov	r4, r0
   1d2f8:	bl	12398 <geteuid@plt>
   1d2fc:	cmp	r4, r0
   1d300:	beq	1d320 <__assert_fail@plt+0xaa18>
   1d304:	ldr	r3, [pc, #392]	; 1d494 <__assert_fail@plt+0xab8c>
   1d308:	ldr	r0, [r3]
   1d30c:	lsl	r0, r0, #24
   1d310:	and	r0, r0, #2130706432	; 0x7f000000
   1d314:	orr	r0, r0, #59	; 0x3b
   1d318:	add	sp, sp, #20
   1d31c:	pop	{r4, r5, r6, r7, pc}
   1d320:	mov	r1, #1
   1d324:	mov	r0, r5
   1d328:	bl	126bc <access@plt>
   1d32c:	subs	r4, r0, #0
   1d330:	bne	1d388 <__assert_fail@plt+0xaa80>
   1d334:	bl	12734 <fork@plt>
   1d338:	cmn	r0, #1
   1d33c:	beq	1d3d0 <__assert_fail@plt+0xaac8>
   1d340:	cmp	r0, #0
   1d344:	bne	1d3b0 <__assert_fail@plt+0xaaa8>
   1d348:	mov	r0, #25
   1d34c:	bl	12818 <gcry_control@plt>
   1d350:	bl	125b4 <setsid@plt>
   1d354:	cmn	r0, #1
   1d358:	beq	1d444 <__assert_fail@plt+0xab3c>
   1d35c:	ldr	r0, [pc, #308]	; 1d498 <__assert_fail@plt+0xab90>
   1d360:	bl	1238c <chdir@plt>
   1d364:	subs	r4, r0, #0
   1d368:	bne	1d444 <__assert_fail@plt+0xab3c>
   1d36c:	bl	12734 <fork@plt>
   1d370:	cmn	r0, #1
   1d374:	beq	1d444 <__assert_fail@plt+0xab3c>
   1d378:	cmp	r0, #0
   1d37c:	beq	1d44c <__assert_fail@plt+0xab44>
   1d380:	mov	r0, r4
   1d384:	bl	12278 <_exit@plt>
   1d388:	ldr	r3, [pc, #260]	; 1d494 <__assert_fail@plt+0xab8c>
   1d38c:	ldr	r4, [r3]
   1d390:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1d394:	cmp	r0, #0
   1d398:	beq	1d3c4 <__assert_fail@plt+0xaabc>
   1d39c:	lsl	r4, r4, #24
   1d3a0:	and	r4, r4, #2130706432	; 0x7f000000
   1d3a4:	uxth	r0, r0
   1d3a8:	orr	r0, r4, r0
   1d3ac:	b	1d318 <__assert_fail@plt+0xaa10>
   1d3b0:	mov	r2, r4
   1d3b4:	mov	r1, r4
   1d3b8:	bl	123f8 <waitpid@plt>
   1d3bc:	cmn	r0, #1
   1d3c0:	beq	1d424 <__assert_fail@plt+0xab1c>
   1d3c4:	mov	r0, #0
   1d3c8:	add	sp, sp, #20
   1d3cc:	pop	{r4, r5, r6, r7, pc}
   1d3d0:	mov	r2, #5
   1d3d4:	ldr	r1, [pc, #192]	; 1d49c <__assert_fail@plt+0xab94>
   1d3d8:	mov	r0, r4
   1d3dc:	bl	122f0 <dcgettext@plt>
   1d3e0:	mov	r4, r0
   1d3e4:	bl	12620 <__errno_location@plt>
   1d3e8:	ldr	r0, [r0]
   1d3ec:	bl	124dc <strerror@plt>
   1d3f0:	mov	r1, r0
   1d3f4:	mov	r0, r4
   1d3f8:	bl	17d98 <__assert_fail@plt+0x5490>
   1d3fc:	ldr	r3, [pc, #144]	; 1d494 <__assert_fail@plt+0xab8c>
   1d400:	ldr	r4, [r3]
   1d404:	bl	125d8 <gpg_err_code_from_syserror@plt>
   1d408:	cmp	r0, #0
   1d40c:	beq	1d3c4 <__assert_fail@plt+0xaabc>
   1d410:	lsl	r3, r4, #24
   1d414:	and	r3, r3, #2130706432	; 0x7f000000
   1d418:	uxth	r0, r0
   1d41c:	orr	r0, r3, r0
   1d420:	b	1d318 <__assert_fail@plt+0xaa10>
   1d424:	bl	12620 <__errno_location@plt>
   1d428:	ldr	r0, [r0]
   1d42c:	bl	124dc <strerror@plt>
   1d430:	mov	r1, r0
   1d434:	ldr	r0, [pc, #100]	; 1d4a0 <__assert_fail@plt+0xab98>
   1d438:	bl	17d98 <__assert_fail@plt+0x5490>
   1d43c:	mov	r0, r4
   1d440:	b	1d318 <__assert_fail@plt+0xaa10>
   1d444:	mov	r0, #1
   1d448:	bl	12278 <_exit@plt>
   1d44c:	cmp	r6, #0
   1d450:	subne	r6, r6, #4
   1d454:	bne	1d464 <__assert_fail@plt+0xab5c>
   1d458:	b	1d470 <__assert_fail@plt+0xab68>
   1d45c:	bl	126b0 <gcry_xstrdup@plt>
   1d460:	bl	1274c <putenv@plt>
   1d464:	ldr	r0, [r6, #4]!
   1d468:	cmp	r0, #0
   1d46c:	bne	1d45c <__assert_fail@plt+0xab54>
   1d470:	mov	r2, #0
   1d474:	mvn	r3, #0
   1d478:	str	r2, [sp, #8]
   1d47c:	str	r2, [sp, #4]
   1d480:	mov	r1, r7
   1d484:	mov	r0, r5
   1d488:	str	r3, [sp]
   1d48c:	mov	r2, r3
   1d490:	bl	1c598 <__assert_fail@plt+0x9c90>
   1d494:	andeq	r5, r3, ip, lsr r3
   1d498:	andeq	r2, r2, r8, lsr r6
   1d49c:	strdeq	r3, [r2], -r4
   1d4a0:	strdeq	r3, [r2], -r4
   1d4a4:	cmn	r0, #1
   1d4a8:	bxeq	lr
   1d4ac:	mov	r1, #15
   1d4b0:	b	12524 <kill@plt>
   1d4b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4b8:	sub	sp, sp, #12
   1d4bc:	ldr	r9, [pc, #228]	; 1d5a8 <__assert_fail@plt+0xaca0>
   1d4c0:	str	r1, [sp]
   1d4c4:	mov	r1, #64	; 0x40
   1d4c8:	str	r2, [sp, #4]
   1d4cc:	bl	125c0 <strchr@plt>
   1d4d0:	ldr	r8, [pc, #212]	; 1d5ac <__assert_fail@plt+0xaca4>
   1d4d4:	mov	r4, r0
   1d4d8:	cmp	r4, #0
   1d4dc:	beq	1d524 <__assert_fail@plt+0xac1c>
   1d4e0:	add	r5, r4, #1
   1d4e4:	mov	r0, r5
   1d4e8:	mov	r1, #64	; 0x40
   1d4ec:	bl	125c0 <strchr@plt>
   1d4f0:	ldrb	r3, [r4, #1]
   1d4f4:	sub	r3, r3, #65	; 0x41
   1d4f8:	cmp	r3, #25
   1d4fc:	mov	r7, r0
   1d500:	bhi	1d518 <__assert_fail@plt+0xac10>
   1d504:	cmp	r0, #0
   1d508:	bne	1d534 <__assert_fail@plt+0xac2c>
   1d50c:	mov	r0, r7
   1d510:	add	sp, sp, #12
   1d514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d518:	mov	r4, r7
   1d51c:	cmp	r4, #0
   1d520:	bne	1d4e0 <__assert_fail@plt+0xabd8>
   1d524:	mov	r7, r4
   1d528:	mov	r0, r7
   1d52c:	add	sp, sp, #12
   1d530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d534:	sub	r6, r0, r5
   1d538:	mov	fp, r9
   1d53c:	mov	r0, #5
   1d540:	mov	sl, #0
   1d544:	b	1d560 <__assert_fail@plt+0xac58>
   1d548:	add	sl, sl, #1
   1d54c:	cmp	sl, #10
   1d550:	beq	1d518 <__assert_fail@plt+0xac10>
   1d554:	ldr	fp, [r8, sl, lsl #3]
   1d558:	mov	r0, fp
   1d55c:	bl	1259c <strlen@plt>
   1d560:	cmp	r6, r0
   1d564:	bne	1d548 <__assert_fail@plt+0xac40>
   1d568:	mov	r0, fp
   1d56c:	mov	r2, r6
   1d570:	mov	r1, r5
   1d574:	bl	122b4 <memcmp@plt>
   1d578:	cmp	r0, #0
   1d57c:	bne	1d548 <__assert_fail@plt+0xac40>
   1d580:	ldr	r3, [sp]
   1d584:	ldr	r2, [pc, #32]	; 1d5ac <__assert_fail@plt+0xaca4>
   1d588:	str	r4, [r3]
   1d58c:	add	r3, r2, sl, lsl #3
   1d590:	ldr	r2, [sp, #4]
   1d594:	str	r7, [r2]
   1d598:	ldr	r7, [r3, #4]
   1d59c:	mov	r0, r7
   1d5a0:	add	sp, sp, #12
   1d5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5a8:	andeq	r3, r2, r8, ror r9
   1d5ac:	andeq	r3, r2, r8, lsr #18
   1d5b0:	cmp	r0, #0
   1d5b4:	bxeq	lr
   1d5b8:	b	1d4b4 <__assert_fail@plt+0xabac>
   1d5bc:	push	{r4, r5, r6, r7, r8, lr}
   1d5c0:	sub	sp, sp, #32
   1d5c4:	ldr	r8, [pc, #336]	; 1d71c <__assert_fail@plt+0xae14>
   1d5c8:	ldr	r7, [pc, #336]	; 1d720 <__assert_fail@plt+0xae18>
   1d5cc:	mov	r5, r0
   1d5d0:	ldr	r3, [r8]
   1d5d4:	ldr	r2, [r7]
   1d5d8:	cmp	r3, #0
   1d5dc:	str	r2, [sp, #28]
   1d5e0:	bne	1d5f4 <__assert_fail@plt+0xacec>
   1d5e4:	b	1d628 <__assert_fail@plt+0xad20>
   1d5e8:	ldr	r3, [r3]
   1d5ec:	cmp	r3, #0
   1d5f0:	beq	1d628 <__assert_fail@plt+0xad20>
   1d5f4:	ldr	r2, [r3, #4]
   1d5f8:	cmp	r5, r2
   1d5fc:	bne	1d5e8 <__assert_fail@plt+0xace0>
   1d600:	ldr	r4, [r3, #8]
   1d604:	cmp	r4, #0
   1d608:	beq	1d630 <__assert_fail@plt+0xad28>
   1d60c:	ldr	r2, [sp, #28]
   1d610:	ldr	r3, [r7]
   1d614:	mov	r0, r4
   1d618:	cmp	r2, r3
   1d61c:	bne	1d700 <__assert_fail@plt+0xadf8>
   1d620:	add	sp, sp, #32
   1d624:	pop	{r4, r5, r6, r7, r8, pc}
   1d628:	cmp	r5, #0
   1d62c:	beq	1d6f8 <__assert_fail@plt+0xadf0>
   1d630:	add	r2, sp, #8
   1d634:	add	r1, sp, #4
   1d638:	mov	r0, r5
   1d63c:	bl	1d4b4 <__assert_fail@plt+0xabac>
   1d640:	subs	r6, r0, #0
   1d644:	beq	1d6f8 <__assert_fail@plt+0xadf0>
   1d648:	mov	r0, r5
   1d64c:	bl	1259c <strlen@plt>
   1d650:	mov	r4, r5
   1d654:	add	r1, r0, #100	; 0x64
   1d658:	add	r0, sp, #12
   1d65c:	bl	20f3c <__assert_fail@plt+0xe634>
   1d660:	b	1d67c <__assert_fail@plt+0xad74>
   1d664:	add	r2, sp, #8
   1d668:	add	r1, sp, #4
   1d66c:	mov	r0, r4
   1d670:	bl	1d4b4 <__assert_fail@plt+0xabac>
   1d674:	subs	r6, r0, #0
   1d678:	beq	1d6a8 <__assert_fail@plt+0xada0>
   1d67c:	ldr	r2, [sp, #4]
   1d680:	mov	r1, r4
   1d684:	sub	r2, r2, r4
   1d688:	add	r0, sp, #12
   1d68c:	bl	20fec <__assert_fail@plt+0xe6e4>
   1d690:	mov	r1, r6
   1d694:	add	r0, sp, #12
   1d698:	bl	210b4 <__assert_fail@plt+0xe7ac>
   1d69c:	ldr	r4, [sp, #8]
   1d6a0:	adds	r4, r4, #1
   1d6a4:	bne	1d664 <__assert_fail@plt+0xad5c>
   1d6a8:	mov	r1, r4
   1d6ac:	add	r0, sp, #12
   1d6b0:	bl	210b4 <__assert_fail@plt+0xe7ac>
   1d6b4:	mov	r2, #1
   1d6b8:	ldr	r1, [pc, #100]	; 1d724 <__assert_fail@plt+0xae1c>
   1d6bc:	add	r0, sp, #12
   1d6c0:	bl	20fec <__assert_fail@plt+0xe6e4>
   1d6c4:	add	r0, sp, #12
   1d6c8:	mov	r1, #0
   1d6cc:	bl	211b4 <__assert_fail@plt+0xe8ac>
   1d6d0:	subs	r4, r0, #0
   1d6d4:	beq	1d704 <__assert_fail@plt+0xadfc>
   1d6d8:	mov	r0, #12
   1d6dc:	bl	1214c <gcry_xmalloc@plt>
   1d6e0:	ldr	r3, [r8]
   1d6e4:	str	r5, [r0, #4]
   1d6e8:	str	r4, [r0, #8]
   1d6ec:	str	r3, [r0]
   1d6f0:	str	r0, [r8]
   1d6f4:	b	1d60c <__assert_fail@plt+0xad04>
   1d6f8:	mov	r4, r5
   1d6fc:	b	1d60c <__assert_fail@plt+0xad04>
   1d700:	bl	122fc <__stack_chk_fail@plt>
   1d704:	bl	12620 <__errno_location@plt>
   1d708:	ldr	r0, [r0]
   1d70c:	bl	124dc <strerror@plt>
   1d710:	mov	r1, r0
   1d714:	ldr	r0, [pc, #12]	; 1d728 <__assert_fail@plt+0xae20>
   1d718:	bl	17e1c <__assert_fail@plt+0x5514>
   1d71c:	andeq	r5, r3, r4, lsr r4
   1d720:	andeq	r4, r3, r8, lsr fp
   1d724:	andeq	r3, r2, r8, lsl #21
   1d728:	andeq	r3, r2, r0, lsl #19
   1d72c:	push	{r4, r5, r6, r7, lr}
   1d730:	ldrb	r6, [r0]
   1d734:	cmp	r6, #48	; 0x30
   1d738:	beq	1d800 <__assert_fail@plt+0xaef8>
   1d73c:	sub	r7, r6, #48	; 0x30
   1d740:	uxtb	ip, r7
   1d744:	cmp	ip, #9
   1d748:	movhi	ip, #0
   1d74c:	bhi	1d78c <__assert_fail@plt+0xae84>
   1d750:	ldrb	r4, [r0, #1]
   1d754:	sub	lr, r4, #48	; 0x30
   1d758:	add	r5, r0, #1
   1d75c:	mov	ip, #0
   1d760:	b	1d770 <__assert_fail@plt+0xae68>
   1d764:	ldrb	r4, [r5, #1]!
   1d768:	sub	r7, r6, #48	; 0x30
   1d76c:	sub	lr, r4, #48	; 0x30
   1d770:	add	ip, ip, ip, lsl #2
   1d774:	uxtb	lr, lr
   1d778:	cmp	lr, #9
   1d77c:	mov	r6, r4
   1d780:	add	ip, r7, ip, lsl #1
   1d784:	mov	r0, r5
   1d788:	bls	1d764 <__assert_fail@plt+0xae5c>
   1d78c:	str	ip, [r1]
   1d790:	ldrb	r1, [r0]
   1d794:	cmp	r1, #46	; 0x2e
   1d798:	bne	1d818 <__assert_fail@plt+0xaf10>
   1d79c:	ldrb	r4, [r0, #1]
   1d7a0:	add	lr, r0, #1
   1d7a4:	cmp	r4, #48	; 0x30
   1d7a8:	beq	1d824 <__assert_fail@plt+0xaf1c>
   1d7ac:	sub	ip, r4, #48	; 0x30
   1d7b0:	uxtb	r1, ip
   1d7b4:	cmp	r1, #9
   1d7b8:	movhi	r1, #0
   1d7bc:	bhi	1d7e0 <__assert_fail@plt+0xaed8>
   1d7c0:	mov	r1, #0
   1d7c4:	ldrb	r4, [lr, #1]!
   1d7c8:	add	r1, r1, r1, lsl #2
   1d7cc:	add	r1, ip, r1, lsl #1
   1d7d0:	sub	ip, r4, #48	; 0x30
   1d7d4:	uxtb	r0, ip
   1d7d8:	cmp	r0, #9
   1d7dc:	bls	1d7c4 <__assert_fail@plt+0xaebc>
   1d7e0:	str	r1, [r2]
   1d7e4:	ldrb	r2, [lr]
   1d7e8:	cmp	r2, #46	; 0x2e
   1d7ec:	movne	r2, #0
   1d7f0:	beq	1d83c <__assert_fail@plt+0xaf34>
   1d7f4:	str	r2, [r3]
   1d7f8:	mov	r0, lr
   1d7fc:	pop	{r4, r5, r6, r7, pc}
   1d800:	ldrb	r4, [r0, #1]
   1d804:	sub	lr, r4, #48	; 0x30
   1d808:	uxtb	ip, lr
   1d80c:	cmp	ip, #9
   1d810:	movhi	r7, #0
   1d814:	bhi	1d758 <__assert_fail@plt+0xae50>
   1d818:	mov	lr, #0
   1d81c:	mov	r0, lr
   1d820:	pop	{r4, r5, r6, r7, pc}
   1d824:	ldrb	r1, [r0, #2]
   1d828:	sub	r1, r1, #48	; 0x30
   1d82c:	cmp	r1, #9
   1d830:	bls	1d818 <__assert_fail@plt+0xaf10>
   1d834:	mov	ip, #0
   1d838:	b	1d7c0 <__assert_fail@plt+0xaeb8>
   1d83c:	ldrb	r0, [lr, #1]
   1d840:	add	r2, lr, #1
   1d844:	cmp	r0, #48	; 0x30
   1d848:	beq	1d88c <__assert_fail@plt+0xaf84>
   1d84c:	sub	r1, r0, #48	; 0x30
   1d850:	uxtb	r0, r1
   1d854:	cmp	r0, #9
   1d858:	movhi	lr, r2
   1d85c:	movhi	r2, #0
   1d860:	bhi	1d7f4 <__assert_fail@plt+0xaeec>
   1d864:	mov	lr, r2
   1d868:	mov	r2, #0
   1d86c:	ldrb	r0, [lr, #1]!
   1d870:	add	r2, r2, r2, lsl #2
   1d874:	add	r2, r1, r2, lsl #1
   1d878:	sub	r1, r0, #48	; 0x30
   1d87c:	uxtb	r0, r1
   1d880:	cmp	r0, #9
   1d884:	bls	1d86c <__assert_fail@plt+0xaf64>
   1d888:	b	1d7f4 <__assert_fail@plt+0xaeec>
   1d88c:	ldrb	r1, [lr, #2]
   1d890:	sub	r1, r1, #48	; 0x30
   1d894:	cmp	r1, #9
   1d898:	bls	1d818 <__assert_fail@plt+0xaf10>
   1d89c:	mov	r1, #0
   1d8a0:	b	1d864 <__assert_fail@plt+0xaf5c>
   1d8a4:	cmp	r1, #0
   1d8a8:	push	{r4, lr}
   1d8ac:	mov	r4, r0
   1d8b0:	beq	1d8e0 <__assert_fail@plt+0xafd8>
   1d8b4:	mov	r0, r1
   1d8b8:	bl	12188 <getpwnam@plt>
   1d8bc:	cmp	r0, #0
   1d8c0:	popeq	{r4, pc}
   1d8c4:	cmp	r4, #0
   1d8c8:	ldr	r0, [r0, #20]
   1d8cc:	beq	1d8d8 <__assert_fail@plt+0xafd0>
   1d8d0:	pop	{r4, lr}
   1d8d4:	b	126b0 <gcry_xstrdup@plt>
   1d8d8:	pop	{r4, lr}
   1d8dc:	b	128d8 <gcry_strdup@plt>
   1d8e0:	bl	1220c <getuid@plt>
   1d8e4:	bl	121d0 <getpwuid@plt>
   1d8e8:	cmp	r0, #0
   1d8ec:	bne	1d8c4 <__assert_fail@plt+0xafbc>
   1d8f0:	pop	{r4, pc}
   1d8f4:	push	{r4, r5, r6, r7, r8, lr}
   1d8f8:	sub	sp, sp, #200	; 0xc8
   1d8fc:	ldr	r8, [pc, #188]	; 1d9c0 <__assert_fail@plt+0xb0b8>
   1d900:	mov	r5, r1
   1d904:	str	r0, [sp, #4]
   1d908:	ldr	r3, [r8]
   1d90c:	str	r3, [sp, #196]	; 0xc4
   1d910:	bl	1259c <strlen@plt>
   1d914:	mov	r6, r0
   1d918:	ldr	r0, [r5], #4
   1d91c:	cmp	r0, #0
   1d920:	str	r0, [sp, #8]
   1d924:	beq	1d95c <__assert_fail@plt+0xb054>
   1d928:	bl	1259c <strlen@plt>
   1d92c:	add	r4, sp, #12
   1d930:	add	r7, sp, #196	; 0xc4
   1d934:	add	r6, r6, r0
   1d938:	b	1d94c <__assert_fail@plt+0xb044>
   1d93c:	bl	1259c <strlen@plt>
   1d940:	cmp	r7, r4
   1d944:	add	r6, r6, r0
   1d948:	beq	1d9ac <__assert_fail@plt+0xb0a4>
   1d94c:	ldr	r0, [r5], #4
   1d950:	cmp	r0, #0
   1d954:	str	r0, [r4], #4
   1d958:	bne	1d93c <__assert_fail@plt+0xb034>
   1d95c:	add	r0, r6, #1
   1d960:	bl	1217c <gcry_malloc@plt>
   1d964:	subs	r5, r0, #0
   1d968:	beq	1d990 <__assert_fail@plt+0xb088>
   1d96c:	ldr	r1, [sp, #4]
   1d970:	cmp	r1, #0
   1d974:	beq	1d990 <__assert_fail@plt+0xb088>
   1d978:	add	r4, sp, #8
   1d97c:	mov	r0, r5
   1d980:	bl	122d8 <stpcpy@plt>
   1d984:	ldr	r1, [r4], #4
   1d988:	cmp	r1, #0
   1d98c:	bne	1d980 <__assert_fail@plt+0xb078>
   1d990:	ldr	r2, [sp, #196]	; 0xc4
   1d994:	ldr	r3, [r8]
   1d998:	mov	r0, r5
   1d99c:	cmp	r2, r3
   1d9a0:	bne	1d9bc <__assert_fail@plt+0xb0b4>
   1d9a4:	add	sp, sp, #200	; 0xc8
   1d9a8:	pop	{r4, r5, r6, r7, r8, pc}
   1d9ac:	mov	r0, #22
   1d9b0:	bl	12794 <gpg_err_set_errno@plt>
   1d9b4:	mov	r5, #0
   1d9b8:	b	1d990 <__assert_fail@plt+0xb088>
   1d9bc:	bl	122fc <__stack_chk_fail@plt>
   1d9c0:	andeq	r4, r3, r8, lsr fp
   1d9c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9c8:	sub	sp, sp, #148	; 0x94
   1d9cc:	ldr	r7, [pc, #1020]	; 1ddd0 <__assert_fail@plt+0xb4c8>
   1d9d0:	mov	r9, r0
   1d9d4:	mov	r0, r1
   1d9d8:	ldr	r3, [r7]
   1d9dc:	mov	fp, r2
   1d9e0:	mov	r6, r1
   1d9e4:	str	r3, [sp, #140]	; 0x8c
   1d9e8:	bl	1259c <strlen@plt>
   1d9ec:	and	r8, r9, #1
   1d9f0:	mov	r5, r0
   1d9f4:	ldr	r0, [fp], #4
   1d9f8:	cmp	r0, #0
   1d9fc:	str	r0, [sp, #12]
   1da00:	addeq	r5, r5, #1
   1da04:	beq	1da44 <__assert_fail@plt+0xb13c>
   1da08:	bl	1259c <strlen@plt>
   1da0c:	add	r5, r5, #2
   1da10:	add	r4, sp, #16
   1da14:	add	sl, sp, #140	; 0x8c
   1da18:	add	r5, r5, r0
   1da1c:	b	1da34 <__assert_fail@plt+0xb12c>
   1da20:	bl	1259c <strlen@plt>
   1da24:	cmp	sl, r4
   1da28:	add	r0, r0, #1
   1da2c:	add	r5, r5, r0
   1da30:	beq	1dbd0 <__assert_fail@plt+0xb2c8>
   1da34:	ldr	r0, [fp], #4
   1da38:	cmp	r0, #0
   1da3c:	str	r0, [r4], #4
   1da40:	bne	1da20 <__assert_fail@plt+0xb118>
   1da44:	ldrb	r3, [r6]
   1da48:	add	r5, r5, #1
   1da4c:	cmp	r3, #126	; 0x7e
   1da50:	beq	1db4c <__assert_fail@plt+0xb244>
   1da54:	mov	r4, #0
   1da58:	mov	fp, r4
   1da5c:	mov	r3, #1
   1da60:	str	r3, [sp, #4]
   1da64:	cmp	r8, #0
   1da68:	mov	r0, r5
   1da6c:	beq	1dbe8 <__assert_fail@plt+0xb2e0>
   1da70:	bl	1214c <gcry_xmalloc@plt>
   1da74:	mov	sl, r0
   1da78:	cmp	r4, #0
   1da7c:	beq	1dcec <__assert_fail@plt+0xb3e4>
   1da80:	mov	r1, r4
   1da84:	mov	r0, sl
   1da88:	bl	122d8 <stpcpy@plt>
   1da8c:	ldr	r3, [sp, #4]
   1da90:	add	r1, r6, r3
   1da94:	bl	122d8 <stpcpy@plt>
   1da98:	mov	r4, r0
   1da9c:	mov	r0, fp
   1daa0:	bl	122a8 <gcry_free@plt>
   1daa4:	ldr	r1, [sp, #12]
   1daa8:	cmp	r1, #0
   1daac:	addne	fp, sp, #16
   1dab0:	movne	r6, #0
   1dab4:	movne	r5, #47	; 0x2f
   1dab8:	bne	1dae0 <__assert_fail@plt+0xb1d8>
   1dabc:	b	1db1c <__assert_fail@plt+0xb214>
   1dac0:	mov	r0, r4
   1dac4:	add	r6, r6, #1
   1dac8:	strb	r5, [r0], #1
   1dacc:	bl	122d8 <stpcpy@plt>
   1dad0:	ldr	r1, [fp], #4
   1dad4:	cmp	r1, #0
   1dad8:	mov	r4, r0
   1dadc:	beq	1db1c <__assert_fail@plt+0xb214>
   1dae0:	cmp	r6, #0
   1dae4:	bne	1dac0 <__assert_fail@plt+0xb1b8>
   1dae8:	ldrb	r3, [sl]
   1daec:	cmp	r3, #47	; 0x2f
   1daf0:	bne	1dac0 <__assert_fail@plt+0xb1b8>
   1daf4:	ldrb	r3, [sl, #1]
   1daf8:	cmp	r3, #0
   1dafc:	bne	1dac0 <__assert_fail@plt+0xb1b8>
   1db00:	mov	r0, r4
   1db04:	bl	122d8 <stpcpy@plt>
   1db08:	ldr	r1, [fp], #4
   1db0c:	add	r6, r6, #1
   1db10:	cmp	r1, #0
   1db14:	mov	r4, r0
   1db18:	bne	1dae0 <__assert_fail@plt+0xb1d8>
   1db1c:	tst	r9, #2
   1db20:	beq	1db30 <__assert_fail@plt+0xb228>
   1db24:	ldrb	r3, [sl]
   1db28:	cmp	r3, #47	; 0x2f
   1db2c:	bne	1dc00 <__assert_fail@plt+0xb2f8>
   1db30:	ldr	r2, [sp, #140]	; 0x8c
   1db34:	ldr	r3, [r7]
   1db38:	mov	r0, sl
   1db3c:	cmp	r2, r3
   1db40:	bne	1ddcc <__assert_fail@plt+0xb4c4>
   1db44:	add	sp, sp, #148	; 0x94
   1db48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db4c:	ldrb	r3, [r6, #1]
   1db50:	cmp	r3, #0
   1db54:	cmpne	r3, #47	; 0x2f
   1db58:	beq	1dca4 <__assert_fail@plt+0xb39c>
   1db5c:	cmp	r8, #0
   1db60:	add	r0, r6, #1
   1db64:	beq	1dd00 <__assert_fail@plt+0xb3f8>
   1db68:	bl	126b0 <gcry_xstrdup@plt>
   1db6c:	mov	sl, r0
   1db70:	mov	r1, #47	; 0x2f
   1db74:	mov	r0, sl
   1db78:	bl	125c0 <strchr@plt>
   1db7c:	cmp	r0, #0
   1db80:	movne	r3, #0
   1db84:	strbne	r3, [r0]
   1db88:	mov	r0, sl
   1db8c:	bl	1259c <strlen@plt>
   1db90:	mov	r1, sl
   1db94:	mov	r4, r0
   1db98:	mov	r0, r8
   1db9c:	bl	1d8a4 <__assert_fail@plt+0xaf9c>
   1dba0:	mov	fp, r0
   1dba4:	mov	r0, sl
   1dba8:	bl	122a8 <gcry_free@plt>
   1dbac:	cmp	fp, #0
   1dbb0:	beq	1dcdc <__assert_fail@plt+0xb3d4>
   1dbb4:	mov	r0, fp
   1dbb8:	bl	1259c <strlen@plt>
   1dbbc:	add	r3, r4, #1
   1dbc0:	str	r3, [sp, #4]
   1dbc4:	mov	r4, fp
   1dbc8:	add	r5, r5, r0
   1dbcc:	b	1da64 <__assert_fail@plt+0xb15c>
   1dbd0:	cmp	r8, #0
   1dbd4:	bne	1ddbc <__assert_fail@plt+0xb4b4>
   1dbd8:	mov	r0, #22
   1dbdc:	mov	sl, r8
   1dbe0:	bl	12794 <gpg_err_set_errno@plt>
   1dbe4:	b	1db30 <__assert_fail@plt+0xb228>
   1dbe8:	bl	1217c <gcry_malloc@plt>
   1dbec:	subs	sl, r0, #0
   1dbf0:	bne	1da78 <__assert_fail@plt+0xb170>
   1dbf4:	mov	r0, fp
   1dbf8:	bl	122a8 <gcry_free@plt>
   1dbfc:	b	1db30 <__assert_fail@plt+0xb228>
   1dc00:	bl	18c84 <__assert_fail@plt+0x637c>
   1dc04:	subs	r5, r0, #0
   1dc08:	beq	1dd68 <__assert_fail@plt+0xb460>
   1dc0c:	bl	1259c <strlen@plt>
   1dc10:	mov	r4, r0
   1dc14:	mov	r0, sl
   1dc18:	bl	1259c <strlen@plt>
   1dc1c:	cmp	r8, #0
   1dc20:	add	r0, r4, r0
   1dc24:	add	r0, r0, #2
   1dc28:	beq	1dd10 <__assert_fail@plt+0xb408>
   1dc2c:	bl	1214c <gcry_xmalloc@plt>
   1dc30:	mov	r4, r0
   1dc34:	ldrb	r3, [r5]
   1dc38:	cmp	r3, #47	; 0x2f
   1dc3c:	bne	1dc4c <__assert_fail@plt+0xb344>
   1dc40:	ldrb	r2, [r5, #1]
   1dc44:	cmp	r2, #0
   1dc48:	beq	1dd34 <__assert_fail@plt+0xb42c>
   1dc4c:	mov	r1, r5
   1dc50:	mov	r0, r4
   1dc54:	bl	122d8 <stpcpy@plt>
   1dc58:	mov	r3, #47	; 0x2f
   1dc5c:	mov	r1, sl
   1dc60:	strb	r3, [r0], #1
   1dc64:	bl	12404 <strcpy@plt>
   1dc68:	mov	r0, r5
   1dc6c:	bl	122a8 <gcry_free@plt>
   1dc70:	mov	r0, sl
   1dc74:	bl	122a8 <gcry_free@plt>
   1dc78:	mov	r0, r4
   1dc7c:	bl	1259c <strlen@plt>
   1dc80:	cmp	r0, #2
   1dc84:	bls	1dc9c <__assert_fail@plt+0xb394>
   1dc88:	sub	r3, r0, #2
   1dc8c:	add	r2, r4, r3
   1dc90:	ldrb	r3, [r4, r3]
   1dc94:	cmp	r3, #47	; 0x2f
   1dc98:	beq	1dd48 <__assert_fail@plt+0xb440>
   1dc9c:	mov	sl, r4
   1dca0:	b	1db30 <__assert_fail@plt+0xb228>
   1dca4:	ldr	r0, [pc, #296]	; 1ddd4 <__assert_fail@plt+0xb4cc>
   1dca8:	bl	1247c <getenv@plt>
   1dcac:	subs	r4, r0, #0
   1dcb0:	movne	fp, #0
   1dcb4:	beq	1dda0 <__assert_fail@plt+0xb498>
   1dcb8:	ldrb	r3, [r4]
   1dcbc:	cmp	r3, #0
   1dcc0:	beq	1dce0 <__assert_fail@plt+0xb3d8>
   1dcc4:	mov	r0, r4
   1dcc8:	bl	1259c <strlen@plt>
   1dccc:	mov	r3, #1
   1dcd0:	str	r3, [sp, #4]
   1dcd4:	add	r5, r5, r0
   1dcd8:	b	1da64 <__assert_fail@plt+0xb15c>
   1dcdc:	mov	r4, fp
   1dce0:	mov	r3, #1
   1dce4:	str	r3, [sp, #4]
   1dce8:	b	1da64 <__assert_fail@plt+0xb15c>
   1dcec:	mov	r1, r6
   1dcf0:	mov	r0, sl
   1dcf4:	bl	122d8 <stpcpy@plt>
   1dcf8:	mov	r4, r0
   1dcfc:	b	1da9c <__assert_fail@plt+0xb194>
   1dd00:	bl	128d8 <gcry_strdup@plt>
   1dd04:	subs	sl, r0, #0
   1dd08:	bne	1db70 <__assert_fail@plt+0xb268>
   1dd0c:	b	1db30 <__assert_fail@plt+0xb228>
   1dd10:	bl	1217c <gcry_malloc@plt>
   1dd14:	subs	r4, r0, #0
   1dd18:	bne	1dc34 <__assert_fail@plt+0xb32c>
   1dd1c:	mov	r0, r5
   1dd20:	bl	122a8 <gcry_free@plt>
   1dd24:	mov	r0, sl
   1dd28:	bl	122a8 <gcry_free@plt>
   1dd2c:	mov	sl, r8
   1dd30:	b	1db30 <__assert_fail@plt+0xb228>
   1dd34:	mov	r0, r4
   1dd38:	mov	r1, sl
   1dd3c:	strb	r3, [r0], #1
   1dd40:	bl	12404 <strcpy@plt>
   1dd44:	b	1dc68 <__assert_fail@plt+0xb360>
   1dd48:	add	r0, r4, r0
   1dd4c:	ldrb	r3, [r0, #-1]
   1dd50:	cmp	r3, #46	; 0x2e
   1dd54:	moveq	r3, #0
   1dd58:	moveq	sl, r4
   1dd5c:	strbeq	r3, [r2]
   1dd60:	bne	1dc9c <__assert_fail@plt+0xb394>
   1dd64:	b	1db30 <__assert_fail@plt+0xb228>
   1dd68:	cmp	r8, #0
   1dd6c:	beq	1dd24 <__assert_fail@plt+0xb41c>
   1dd70:	ldr	r3, [pc, #96]	; 1ddd8 <__assert_fail@plt+0xb4d0>
   1dd74:	ldr	r4, [r3]
   1dd78:	bl	12620 <__errno_location@plt>
   1dd7c:	ldr	r0, [r0]
   1dd80:	bl	124dc <strerror@plt>
   1dd84:	ldr	r2, [pc, #80]	; 1dddc <__assert_fail@plt+0xb4d4>
   1dd88:	mov	r1, #1
   1dd8c:	mov	r3, r0
   1dd90:	mov	r0, r4
   1dd94:	bl	126a4 <__fprintf_chk@plt>
   1dd98:	mov	r0, #2
   1dd9c:	bl	12560 <exit@plt>
   1dda0:	mov	r1, r4
   1dda4:	mov	r0, r8
   1dda8:	bl	1d8a4 <__assert_fail@plt+0xaf9c>
   1ddac:	subs	fp, r0, #0
   1ddb0:	mov	r4, fp
   1ddb4:	beq	1dce0 <__assert_fail@plt+0xb3d8>
   1ddb8:	b	1dcb8 <__assert_fail@plt+0xb3b0>
   1ddbc:	ldr	r2, [pc, #28]	; 1dde0 <__assert_fail@plt+0xb4d8>
   1ddc0:	mov	r1, #432	; 0x1b0
   1ddc4:	ldr	r0, [pc, #24]	; 1dde4 <__assert_fail@plt+0xb4dc>
   1ddc8:	bl	180f8 <__assert_fail@plt+0x57f0>
   1ddcc:	bl	122fc <__stack_chk_fail@plt>
   1ddd0:	andeq	r4, r3, r8, lsr fp
   1ddd4:	andeq	r3, r2, r0, ror #20
   1ddd8:	andeq	r5, r3, r8, ror r1
   1dddc:	andeq	r3, r2, r8, ror #20
   1dde0:	andeq	r3, r2, r4, lsr #20
   1dde4:	andeq	r3, r2, r4, asr #20
   1dde8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddec:	mov	fp, r1
   1ddf0:	ldrb	r1, [r0]
   1ddf4:	mov	r7, r0
   1ddf8:	mov	r6, r2
   1ddfc:	cmp	r1, #0
   1de00:	beq	1dfd4 <__assert_fail@plt+0xb6cc>
   1de04:	mov	r4, r0
   1de08:	mov	r5, #0
   1de0c:	rsb	r8, r0, #1
   1de10:	b	1de28 <__assert_fail@plt+0xb520>
   1de14:	add	r5, r5, #1
   1de18:	add	r0, r8, r4
   1de1c:	ldrb	r1, [r4, #1]!
   1de20:	cmp	r1, #0
   1de24:	beq	1de6c <__assert_fail@plt+0xb564>
   1de28:	cmp	r1, #37	; 0x25
   1de2c:	cmpne	r1, #58	; 0x3a
   1de30:	moveq	r3, #1
   1de34:	movne	r3, #0
   1de38:	cmp	r1, #10
   1de3c:	orreq	r3, r3, #1
   1de40:	cmp	r3, #0
   1de44:	bne	1de14 <__assert_fail@plt+0xb50c>
   1de48:	subs	r0, fp, #0
   1de4c:	beq	1de18 <__assert_fail@plt+0xb510>
   1de50:	bl	125c0 <strchr@plt>
   1de54:	cmp	r0, #0
   1de58:	bne	1de14 <__assert_fail@plt+0xb50c>
   1de5c:	add	r0, r8, r4
   1de60:	ldrb	r1, [r4, #1]!
   1de64:	cmp	r1, #0
   1de68:	bne	1de28 <__assert_fail@plt+0xb520>
   1de6c:	add	r0, r0, r5, lsl #1
   1de70:	add	r0, r0, #1
   1de74:	cmp	r6, #0
   1de78:	beq	1dfb4 <__assert_fail@plt+0xb6ac>
   1de7c:	bl	1214c <gcry_xmalloc@plt>
   1de80:	ldrb	r5, [r7]
   1de84:	cmp	r5, #0
   1de88:	mov	r6, r0
   1de8c:	beq	1dfcc <__assert_fail@plt+0xb6c4>
   1de90:	mov	r4, #0
   1de94:	mov	r3, #37	; 0x25
   1de98:	mov	r2, #97	; 0x61
   1de9c:	b	1df18 <__assert_fail@plt+0xb610>
   1dea0:	cmp	r5, #37	; 0x25
   1dea4:	beq	1df64 <__assert_fail@plt+0xb65c>
   1dea8:	cmp	r5, #10
   1deac:	beq	1df88 <__assert_fail@plt+0xb680>
   1deb0:	cmp	fp, #0
   1deb4:	beq	1dfa8 <__assert_fail@plt+0xb6a0>
   1deb8:	mov	r1, r5
   1debc:	mov	r0, fp
   1dec0:	bl	125c0 <strchr@plt>
   1dec4:	mov	r3, #37	; 0x25
   1dec8:	mov	r2, #97	; 0x61
   1decc:	cmp	r0, #0
   1ded0:	beq	1dfa8 <__assert_fail@plt+0xb6a0>
   1ded4:	lsr	r1, r5, #4
   1ded8:	cmp	r1, #9
   1dedc:	addls	r1, r1, #48	; 0x30
   1dee0:	addhi	r1, r1, #87	; 0x57
   1dee4:	and	r5, r5, #15
   1dee8:	strb	r3, [sl]
   1deec:	strb	r1, [r8]
   1def0:	add	r1, r4, #2
   1def4:	add	r4, r4, #3
   1def8:	cmp	r5, #9
   1defc:	add	r8, r6, r4
   1df00:	addls	r5, r5, #48	; 0x30
   1df04:	addhi	r5, r5, #87	; 0x57
   1df08:	strb	r5, [r6, r1]
   1df0c:	ldrb	r5, [r7, #1]!
   1df10:	cmp	r5, #0
   1df14:	beq	1df54 <__assert_fail@plt+0xb64c>
   1df18:	add	r9, r4, #1
   1df1c:	cmp	r5, #58	; 0x3a
   1df20:	add	r8, r6, r9
   1df24:	add	sl, r6, r4
   1df28:	bne	1dea0 <__assert_fail@plt+0xb598>
   1df2c:	add	r1, r4, #2
   1df30:	mov	r0, #51	; 0x33
   1df34:	strb	r3, [r6, r4]
   1df38:	strb	r0, [r6, r9]
   1df3c:	strb	r2, [r6, r1]
   1df40:	ldrb	r5, [r7, #1]!
   1df44:	add	r4, r4, #3
   1df48:	add	r8, r6, r4
   1df4c:	cmp	r5, #0
   1df50:	bne	1df18 <__assert_fail@plt+0xb610>
   1df54:	mov	r3, #0
   1df58:	strb	r3, [r8]
   1df5c:	mov	r0, r6
   1df60:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df64:	add	r1, r4, #2
   1df68:	mov	r0, #50	; 0x32
   1df6c:	strb	r5, [sl]
   1df70:	add	r4, r4, #3
   1df74:	strb	r0, [r8]
   1df78:	mov	r0, #53	; 0x35
   1df7c:	strb	r0, [r6, r1]
   1df80:	add	r8, r6, r4
   1df84:	b	1df0c <__assert_fail@plt+0xb604>
   1df88:	add	r1, r4, #2
   1df8c:	mov	r0, #48	; 0x30
   1df90:	add	r4, r4, #3
   1df94:	strb	r3, [sl]
   1df98:	strb	r0, [r8]
   1df9c:	strb	r2, [r6, r1]
   1dfa0:	add	r8, r6, r4
   1dfa4:	b	1df0c <__assert_fail@plt+0xb604>
   1dfa8:	mov	r4, r9
   1dfac:	strb	r5, [sl]
   1dfb0:	b	1df0c <__assert_fail@plt+0xb604>
   1dfb4:	bl	1217c <gcry_malloc@plt>
   1dfb8:	subs	r6, r0, #0
   1dfbc:	beq	1df5c <__assert_fail@plt+0xb654>
   1dfc0:	ldrb	r5, [r7]
   1dfc4:	cmp	r5, #0
   1dfc8:	bne	1de90 <__assert_fail@plt+0xb588>
   1dfcc:	mov	r8, r6
   1dfd0:	b	1df54 <__assert_fail@plt+0xb64c>
   1dfd4:	mov	r0, #1
   1dfd8:	b	1de74 <__assert_fail@plt+0xb56c>
   1dfdc:	ldrb	r3, [r0]
   1dfe0:	mov	r2, r0
   1dfe4:	cmp	r3, #0
   1dfe8:	beq	1e01c <__assert_fail@plt+0xb714>
   1dfec:	mov	r0, #0
   1dff0:	and	r3, r3, #192	; 0xc0
   1dff4:	cmp	r3, #128	; 0x80
   1dff8:	addne	r0, r0, #1
   1dffc:	cmn	r1, #1
   1e000:	beq	1e00c <__assert_fail@plt+0xb704>
   1e004:	subs	r1, r1, #1
   1e008:	bxeq	lr
   1e00c:	ldrb	r3, [r2, #1]!
   1e010:	cmp	r3, #0
   1e014:	bne	1dff0 <__assert_fail@plt+0xb6e8>
   1e018:	bx	lr
   1e01c:	mov	r0, r3
   1e020:	bx	lr
   1e024:	cmp	r2, #0
   1e028:	beq	1e090 <__assert_fail@plt+0xb788>
   1e02c:	add	r2, r0, r2
   1e030:	push	{r4, r5, r6, lr}
   1e034:	sub	r0, r0, #1
   1e038:	sub	r6, r2, #1
   1e03c:	sub	r1, r1, #1
   1e040:	ldrb	lr, [r0, #1]!
   1e044:	ldrb	ip, [r1, #1]!
   1e048:	mov	r2, lr
   1e04c:	cmp	lr, ip
   1e050:	mov	r3, ip
   1e054:	sub	r5, lr, #97	; 0x61
   1e058:	sub	r4, ip, #97	; 0x61
   1e05c:	beq	1e078 <__assert_fail@plt+0xb770>
   1e060:	cmp	r5, #25
   1e064:	bicls	r2, lr, #32
   1e068:	cmp	r4, #25
   1e06c:	bicls	r3, ip, #32
   1e070:	cmp	r3, r2
   1e074:	bne	1e088 <__assert_fail@plt+0xb780>
   1e078:	cmp	r0, r6
   1e07c:	bne	1e040 <__assert_fail@plt+0xb738>
   1e080:	mov	r0, #0
   1e084:	pop	{r4, r5, r6, pc}
   1e088:	sub	r0, r2, r3
   1e08c:	pop	{r4, r5, r6, pc}
   1e090:	mov	r0, r2
   1e094:	bx	lr
   1e098:	push	{r4, r5, r6, lr}
   1e09c:	mov	r4, r0
   1e0a0:	mov	r0, r1
   1e0a4:	mov	r6, r1
   1e0a8:	bl	1259c <strlen@plt>
   1e0ac:	mov	r1, r6
   1e0b0:	mov	r2, r0
   1e0b4:	mov	r5, r0
   1e0b8:	mov	r0, r4
   1e0bc:	bl	1289c <strncmp@plt>
   1e0c0:	cmp	r0, #0
   1e0c4:	bne	1e114 <__assert_fail@plt+0xb80c>
   1e0c8:	ldrb	r2, [r4, r5]
   1e0cc:	add	r0, r4, r5
   1e0d0:	tst	r2, #223	; 0xdf
   1e0d4:	sub	r3, r2, #9
   1e0d8:	clz	r3, r3
   1e0dc:	lsr	r3, r3, #5
   1e0e0:	movne	r1, r3
   1e0e4:	moveq	r1, #1
   1e0e8:	cmp	r1, #0
   1e0ec:	beq	1e114 <__assert_fail@plt+0xb80c>
   1e0f0:	cmp	r2, #32
   1e0f4:	orreq	r3, r3, #1
   1e0f8:	cmp	r3, #0
   1e0fc:	popeq	{r4, r5, r6, pc}
   1e100:	ldrb	r3, [r0, #1]!
   1e104:	cmp	r3, #9
   1e108:	cmpne	r3, #32
   1e10c:	beq	1e100 <__assert_fail@plt+0xb7f8>
   1e110:	pop	{r4, r5, r6, pc}
   1e114:	mov	r0, #0
   1e118:	pop	{r4, r5, r6, pc}
   1e11c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e120:	subs	r5, r1, #0
   1e124:	beq	1e1d0 <__assert_fail@plt+0xb8c8>
   1e128:	mov	r4, r0
   1e12c:	mov	r8, r2
   1e130:	bl	12500 <__ctype_toupper_loc@plt>
   1e134:	ldrb	r3, [r8]
   1e138:	mov	r1, r5
   1e13c:	add	r9, r4, r1
   1e140:	mov	r5, r4
   1e144:	ldr	r0, [r0]
   1e148:	ldr	sl, [r0, r3, lsl #2]
   1e14c:	b	1e160 <__assert_fail@plt+0xb858>
   1e150:	cmp	lr, #0
   1e154:	beq	1e1d8 <__assert_fail@plt+0xb8d0>
   1e158:	mov	r1, lr
   1e15c:	mov	r5, r3
   1e160:	mov	r3, r5
   1e164:	sub	lr, r1, #1
   1e168:	ldrb	r2, [r3], #1
   1e16c:	ldr	r2, [r0, r2, lsl #2]
   1e170:	cmp	r2, sl
   1e174:	bne	1e150 <__assert_fail@plt+0xb848>
   1e178:	cmp	r3, r9
   1e17c:	add	r4, r8, #1
   1e180:	ldrb	ip, [r8, #1]
   1e184:	beq	1e1e4 <__assert_fail@plt+0xb8dc>
   1e188:	ldrb	r6, [r3]
   1e18c:	ldr	r2, [r0, ip, lsl #2]
   1e190:	ldr	r6, [r0, r6, lsl #2]
   1e194:	cmp	r6, r2
   1e198:	bne	1e1c8 <__assert_fail@plt+0xb8c0>
   1e19c:	add	fp, r5, r1
   1e1a0:	add	r1, r3, #1
   1e1a4:	b	1e1bc <__assert_fail@plt+0xb8b4>
   1e1a8:	ldrb	r2, [r1], #1
   1e1ac:	ldr	r6, [r0, ip, lsl #2]
   1e1b0:	ldr	r7, [r0, r2, lsl #2]
   1e1b4:	cmp	r7, r6
   1e1b8:	bne	1e1c8 <__assert_fail@plt+0xb8c0>
   1e1bc:	cmp	fp, r1
   1e1c0:	ldrb	ip, [r4, #1]!
   1e1c4:	bne	1e1a8 <__assert_fail@plt+0xb8a0>
   1e1c8:	cmp	ip, #0
   1e1cc:	bne	1e158 <__assert_fail@plt+0xb850>
   1e1d0:	mov	r0, r5
   1e1d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1d8:	mov	r5, lr
   1e1dc:	mov	r0, r5
   1e1e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1e4:	cmp	ip, #0
   1e1e8:	bne	1e150 <__assert_fail@plt+0xb848>
   1e1ec:	b	1e1d0 <__assert_fail@plt+0xb8c8>
   1e1f0:	cmp	r1, #0
   1e1f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e1f8:	beq	1e248 <__assert_fail@plt+0xb940>
   1e1fc:	ldrb	r6, [r2]
   1e200:	add	r8, r1, #1
   1e204:	add	r8, r2, r8
   1e208:	sub	r3, r6, #97	; 0x61
   1e20c:	cmp	r3, #25
   1e210:	add	r8, r0, r8
   1e214:	andls	r6, r6, #223	; 0xdf
   1e218:	add	r7, r0, r1
   1e21c:	ldrb	r1, [r0]
   1e220:	add	r3, r0, #1
   1e224:	mov	r9, r0
   1e228:	sub	r0, r1, #97	; 0x61
   1e22c:	cmp	r0, #25
   1e230:	bicls	r1, r1, #32
   1e234:	cmp	r6, r1
   1e238:	mov	r0, r3
   1e23c:	beq	1e254 <__assert_fail@plt+0xb94c>
   1e240:	cmp	r7, r3
   1e244:	bne	1e21c <__assert_fail@plt+0xb914>
   1e248:	mov	r9, #0
   1e24c:	mov	r0, r9
   1e250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e254:	cmp	r3, r7
   1e258:	add	lr, r2, #1
   1e25c:	ldrb	ip, [r2, #1]
   1e260:	beq	1e2b4 <__assert_fail@plt+0xb9ac>
   1e264:	sub	sl, r8, r3
   1e268:	b	1e278 <__assert_fail@plt+0xb970>
   1e26c:	ldrb	ip, [lr, #1]!
   1e270:	cmp	lr, sl
   1e274:	beq	1e2a4 <__assert_fail@plt+0xb99c>
   1e278:	ldrb	r1, [r3]
   1e27c:	sub	r4, ip, #97	; 0x61
   1e280:	add	r3, r3, #1
   1e284:	sub	r5, r1, #97	; 0x61
   1e288:	cmp	r5, #25
   1e28c:	bicls	r1, r1, #32
   1e290:	cmp	r4, #25
   1e294:	mov	r4, ip
   1e298:	bicls	r4, ip, #32
   1e29c:	cmp	r4, r1
   1e2a0:	beq	1e26c <__assert_fail@plt+0xb964>
   1e2a4:	cmp	ip, #0
   1e2a8:	bne	1e21c <__assert_fail@plt+0xb914>
   1e2ac:	mov	r0, r9
   1e2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e2b4:	cmp	ip, #0
   1e2b8:	bne	1e248 <__assert_fail@plt+0xb940>
   1e2bc:	b	1e24c <__assert_fail@plt+0xb944>
   1e2c0:	push	{r4, lr}
   1e2c4:	subs	r4, r2, #0
   1e2c8:	sub	sp, sp, #8
   1e2cc:	beq	1e320 <__assert_fail@plt+0xba18>
   1e2d0:	cmp	r0, #0
   1e2d4:	beq	1e328 <__assert_fail@plt+0xba20>
   1e2d8:	cmp	r4, #1
   1e2dc:	beq	1e33c <__assert_fail@plt+0xba34>
   1e2e0:	ldrb	r3, [r1]
   1e2e4:	cmp	r3, #0
   1e2e8:	beq	1e33c <__assert_fail@plt+0xba34>
   1e2ec:	sub	ip, r1, #1
   1e2f0:	add	r2, ip, r4
   1e2f4:	add	r1, r1, #1
   1e2f8:	mov	ip, r0
   1e2fc:	b	1e30c <__assert_fail@plt+0xba04>
   1e300:	ldrb	r3, [r1], #1
   1e304:	cmp	r3, #0
   1e308:	beq	1e318 <__assert_fail@plt+0xba10>
   1e30c:	cmp	r1, r2
   1e310:	strb	r3, [ip], #1
   1e314:	bne	1e300 <__assert_fail@plt+0xb9f8>
   1e318:	mov	r3, #0
   1e31c:	strb	r3, [ip]
   1e320:	add	sp, sp, #8
   1e324:	pop	{r4, pc}
   1e328:	mov	r0, r4
   1e32c:	str	r1, [sp, #4]
   1e330:	bl	1214c <gcry_xmalloc@plt>
   1e334:	ldr	r1, [sp, #4]
   1e338:	b	1e2d8 <__assert_fail@plt+0xb9d0>
   1e33c:	mov	ip, r0
   1e340:	b	1e318 <__assert_fail@plt+0xba10>
   1e344:	push	{r4, r5, r6, lr}
   1e348:	mov	r5, r0
   1e34c:	ldrb	r4, [r0]
   1e350:	cmp	r4, #0
   1e354:	beq	1e3d0 <__assert_fail@plt+0xbac8>
   1e358:	bl	12530 <__ctype_b_loc@plt>
   1e35c:	mov	r1, r5
   1e360:	ldr	r2, [r0]
   1e364:	b	1e374 <__assert_fail@plt+0xba6c>
   1e368:	ldrb	r4, [r1, #1]!
   1e36c:	cmp	r4, #0
   1e370:	beq	1e3d8 <__assert_fail@plt+0xbad0>
   1e374:	lsl	r4, r4, #1
   1e378:	ldrh	r3, [r2, r4]
   1e37c:	ands	r3, r3, #8192	; 0x2000
   1e380:	bne	1e368 <__assert_fail@plt+0xba60>
   1e384:	ldrb	r2, [r1]
   1e388:	cmp	r2, #0
   1e38c:	strb	r2, [r5]
   1e390:	movne	ip, r5
   1e394:	beq	1e3d0 <__assert_fail@plt+0xbac8>
   1e398:	ldr	lr, [r0]
   1e39c:	lsl	r2, r2, #1
   1e3a0:	ldrh	r2, [lr, r2]
   1e3a4:	ands	r2, r2, #8192	; 0x2000
   1e3a8:	moveq	r3, r2
   1e3ac:	beq	1e3b8 <__assert_fail@plt+0xbab0>
   1e3b0:	cmp	r3, #0
   1e3b4:	moveq	r3, ip
   1e3b8:	ldrb	r2, [r1, #1]!
   1e3bc:	cmp	r2, #0
   1e3c0:	strb	r2, [ip, #1]!
   1e3c4:	bne	1e398 <__assert_fail@plt+0xba90>
   1e3c8:	cmp	r3, #0
   1e3cc:	strbne	r2, [r3]
   1e3d0:	mov	r0, r5
   1e3d4:	pop	{r4, r5, r6, pc}
   1e3d8:	strb	r4, [r5]
   1e3dc:	mov	r0, r5
   1e3e0:	pop	{r4, r5, r6, pc}
   1e3e4:	push	{r4, r5, r6, lr}
   1e3e8:	mov	r5, r0
   1e3ec:	ldrb	r4, [r0]
   1e3f0:	cmp	r4, #0
   1e3f4:	beq	1e438 <__assert_fail@plt+0xbb30>
   1e3f8:	bl	12530 <__ctype_b_loc@plt>
   1e3fc:	mov	r2, r5
   1e400:	mov	r1, #0
   1e404:	ldr	r0, [r0]
   1e408:	lsl	r4, r4, #1
   1e40c:	ldrh	r3, [r0, r4]
   1e410:	ands	r3, r3, #8192	; 0x2000
   1e414:	moveq	r1, r3
   1e418:	beq	1e424 <__assert_fail@plt+0xbb1c>
   1e41c:	cmp	r1, #0
   1e420:	moveq	r1, r2
   1e424:	ldrb	r4, [r2, #1]!
   1e428:	cmp	r4, #0
   1e42c:	bne	1e408 <__assert_fail@plt+0xbb00>
   1e430:	cmp	r1, #0
   1e434:	strbne	r4, [r1]
   1e438:	mov	r0, r5
   1e43c:	pop	{r4, r5, r6, pc}
   1e440:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e444:	subs	r9, r1, #0
   1e448:	beq	1e4a8 <__assert_fail@plt+0xbba0>
   1e44c:	mov	r7, r2
   1e450:	mov	sl, r0
   1e454:	mov	r4, r0
   1e458:	add	r8, r0, r9
   1e45c:	mov	r5, #0
   1e460:	ldrb	r1, [r4]
   1e464:	mov	r0, r7
   1e468:	bl	125c0 <strchr@plt>
   1e46c:	mov	r6, r4
   1e470:	add	r4, r4, #1
   1e474:	cmp	r0, #0
   1e478:	moveq	r5, r0
   1e47c:	beq	1e488 <__assert_fail@plt+0xbb80>
   1e480:	cmp	r5, #0
   1e484:	moveq	r5, r6
   1e488:	cmp	r4, r8
   1e48c:	bne	1e460 <__assert_fail@plt+0xbb58>
   1e490:	cmp	r5, #0
   1e494:	beq	1e4a8 <__assert_fail@plt+0xbba0>
   1e498:	mov	r3, #0
   1e49c:	sub	r0, r5, sl
   1e4a0:	strb	r3, [r5]
   1e4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4a8:	mov	r0, r9
   1e4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4b0:	ldr	r2, [pc]	; 1e4b8 <__assert_fail@plt+0xbbb0>
   1e4b4:	b	1e440 <__assert_fail@plt+0xbb38>
   1e4b8:	andeq	r3, r2, r4, lsl #21
   1e4bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e4c0:	subs	r9, r1, #0
   1e4c4:	beq	1e51c <__assert_fail@plt+0xbc14>
   1e4c8:	mov	r7, r2
   1e4cc:	mov	sl, r0
   1e4d0:	mov	r4, r0
   1e4d4:	add	r8, r0, r9
   1e4d8:	mov	r6, #0
   1e4dc:	ldrb	r1, [r4]
   1e4e0:	mov	r0, r7
   1e4e4:	bl	125c0 <strchr@plt>
   1e4e8:	mov	r5, r4
   1e4ec:	add	r4, r4, #1
   1e4f0:	cmp	r0, #0
   1e4f4:	moveq	r6, r0
   1e4f8:	beq	1e504 <__assert_fail@plt+0xbbfc>
   1e4fc:	cmp	r6, #0
   1e500:	moveq	r6, r5
   1e504:	cmp	r4, r8
   1e508:	bne	1e4dc <__assert_fail@plt+0xbbd4>
   1e50c:	cmp	r6, #0
   1e510:	beq	1e51c <__assert_fail@plt+0xbc14>
   1e514:	sub	r0, r6, sl
   1e518:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e51c:	mov	r0, r9
   1e520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e524:	ldr	r2, [pc]	; 1e52c <__assert_fail@plt+0xbc24>
   1e528:	b	1e4bc <__assert_fail@plt+0xbbb4>
   1e52c:	andeq	r3, r2, r4, lsl #21
   1e530:	push	{r4, lr}
   1e534:	mov	r1, #47	; 0x2f
   1e538:	mov	r4, r0
   1e53c:	bl	12764 <strrchr@plt>
   1e540:	cmp	r0, #0
   1e544:	beq	1e554 <__assert_fail@plt+0xbc4c>
   1e548:	add	r0, r0, #1
   1e54c:	pop	{r4, lr}
   1e550:	b	126b0 <gcry_xstrdup@plt>
   1e554:	mov	r0, r4
   1e558:	pop	{r4, lr}
   1e55c:	b	126b0 <gcry_xstrdup@plt>
   1e560:	push	{r4, r5, r6, lr}
   1e564:	mov	r1, #47	; 0x2f
   1e568:	mov	r5, r0
   1e56c:	bl	12764 <strrchr@plt>
   1e570:	cmp	r0, #0
   1e574:	beq	1e59c <__assert_fail@plt+0xbc94>
   1e578:	sub	r4, r0, r5
   1e57c:	add	r0, r4, #1
   1e580:	bl	1214c <gcry_xmalloc@plt>
   1e584:	mov	r2, r4
   1e588:	mov	r1, r5
   1e58c:	bl	12674 <strncpy@plt>
   1e590:	mov	r2, #0
   1e594:	strb	r2, [r0, r4]
   1e598:	pop	{r4, r5, r6, pc}
   1e59c:	ldr	r0, [pc, #4]	; 1e5a8 <__assert_fail@plt+0xbca0>
   1e5a0:	pop	{r4, r5, r6, lr}
   1e5a4:	b	126b0 <gcry_xstrdup@plt>
   1e5a8:	andeq	r2, r2, r0, lsl #10
   1e5ac:	push	{r0, r1, r2, r3}
   1e5b0:	mov	r0, #1
   1e5b4:	push	{r4, lr}
   1e5b8:	sub	sp, sp, #8
   1e5bc:	ldr	r4, [pc, #60]	; 1e600 <__assert_fail@plt+0xbcf8>
   1e5c0:	add	r3, sp, #20
   1e5c4:	mov	r2, r3
   1e5c8:	ldr	ip, [r4]
   1e5cc:	ldr	r1, [sp, #16]
   1e5d0:	str	r3, [sp]
   1e5d4:	str	ip, [sp, #4]
   1e5d8:	bl	1d9c4 <__assert_fail@plt+0xb0bc>
   1e5dc:	ldr	r2, [sp, #4]
   1e5e0:	ldr	r3, [r4]
   1e5e4:	cmp	r2, r3
   1e5e8:	bne	1e5fc <__assert_fail@plt+0xbcf4>
   1e5ec:	add	sp, sp, #8
   1e5f0:	pop	{r4, lr}
   1e5f4:	add	sp, sp, #16
   1e5f8:	bx	lr
   1e5fc:	bl	122fc <__stack_chk_fail@plt>
   1e600:	andeq	r4, r3, r8, lsr fp
   1e604:	push	{r0, r1, r2, r3}
   1e608:	mov	r0, #0
   1e60c:	push	{r4, lr}
   1e610:	sub	sp, sp, #8
   1e614:	ldr	r4, [pc, #60]	; 1e658 <__assert_fail@plt+0xbd50>
   1e618:	add	r3, sp, #20
   1e61c:	mov	r2, r3
   1e620:	ldr	ip, [r4]
   1e624:	ldr	r1, [sp, #16]
   1e628:	str	r3, [sp]
   1e62c:	str	ip, [sp, #4]
   1e630:	bl	1d9c4 <__assert_fail@plt+0xb0bc>
   1e634:	ldr	r2, [sp, #4]
   1e638:	ldr	r3, [r4]
   1e63c:	cmp	r2, r3
   1e640:	bne	1e654 <__assert_fail@plt+0xbd4c>
   1e644:	add	sp, sp, #8
   1e648:	pop	{r4, lr}
   1e64c:	add	sp, sp, #16
   1e650:	bx	lr
   1e654:	bl	122fc <__stack_chk_fail@plt>
   1e658:	andeq	r4, r3, r8, lsr fp
   1e65c:	push	{r0, r1, r2, r3}
   1e660:	mov	r0, #3
   1e664:	push	{r4, lr}
   1e668:	sub	sp, sp, #8
   1e66c:	ldr	r4, [pc, #60]	; 1e6b0 <__assert_fail@plt+0xbda8>
   1e670:	add	r3, sp, #20
   1e674:	mov	r2, r3
   1e678:	ldr	ip, [r4]
   1e67c:	ldr	r1, [sp, #16]
   1e680:	str	r3, [sp]
   1e684:	str	ip, [sp, #4]
   1e688:	bl	1d9c4 <__assert_fail@plt+0xb0bc>
   1e68c:	ldr	r2, [sp, #4]
   1e690:	ldr	r3, [r4]
   1e694:	cmp	r2, r3
   1e698:	bne	1e6ac <__assert_fail@plt+0xbda4>
   1e69c:	add	sp, sp, #8
   1e6a0:	pop	{r4, lr}
   1e6a4:	add	sp, sp, #16
   1e6a8:	bx	lr
   1e6ac:	bl	122fc <__stack_chk_fail@plt>
   1e6b0:	andeq	r4, r3, r8, lsr fp
   1e6b4:	push	{r0, r1, r2, r3}
   1e6b8:	mov	r0, #2
   1e6bc:	push	{r4, lr}
   1e6c0:	sub	sp, sp, #8
   1e6c4:	ldr	r4, [pc, #60]	; 1e708 <__assert_fail@plt+0xbe00>
   1e6c8:	add	r3, sp, #20
   1e6cc:	mov	r2, r3
   1e6d0:	ldr	ip, [r4]
   1e6d4:	ldr	r1, [sp, #16]
   1e6d8:	str	r3, [sp]
   1e6dc:	str	ip, [sp, #4]
   1e6e0:	bl	1d9c4 <__assert_fail@plt+0xb0bc>
   1e6e4:	ldr	r2, [sp, #4]
   1e6e8:	ldr	r3, [r4]
   1e6ec:	cmp	r2, r3
   1e6f0:	bne	1e704 <__assert_fail@plt+0xbdfc>
   1e6f4:	add	sp, sp, #8
   1e6f8:	pop	{r4, lr}
   1e6fc:	add	sp, sp, #16
   1e700:	bx	lr
   1e704:	bl	122fc <__stack_chk_fail@plt>
   1e708:	andeq	r4, r3, r8, lsr fp
   1e70c:	b	121ac <strcmp@plt>
   1e710:	push	{r4, r5, r6, lr}
   1e714:	mov	lr, r0
   1e718:	ldrb	ip, [r0]
   1e71c:	cmp	ip, #9
   1e720:	cmpne	ip, #32
   1e724:	bne	1e738 <__assert_fail@plt+0xbe30>
   1e728:	ldrb	ip, [lr, #1]!
   1e72c:	cmp	ip, #9
   1e730:	cmpne	ip, #32
   1e734:	beq	1e728 <__assert_fail@plt+0xbe20>
   1e738:	sub	r6, ip, #48	; 0x30
   1e73c:	mov	r0, #0
   1e740:	uxtb	r3, r6
   1e744:	cmp	r3, #9
   1e748:	mov	r1, #0
   1e74c:	pophi	{r4, r5, r6, pc}
   1e750:	lsl	r2, r1, #2
   1e754:	lsl	r3, r0, #2
   1e758:	adds	r3, r3, r0
   1e75c:	orr	r2, r2, r0, lsr #30
   1e760:	ldrb	ip, [lr, #1]!
   1e764:	adc	r2, r2, r1
   1e768:	adds	r4, r3, r3
   1e76c:	adc	r5, r2, r2
   1e770:	adds	r0, r4, r6
   1e774:	adc	r1, r5, r6, asr #31
   1e778:	sub	r6, ip, #48	; 0x30
   1e77c:	uxtb	r3, r6
   1e780:	cmp	r3, #9
   1e784:	bls	1e750 <__assert_fail@plt+0xbe48>
   1e788:	pop	{r4, r5, r6, pc}
   1e78c:	ldrb	r2, [r0]
   1e790:	sub	r3, r2, #48	; 0x30
   1e794:	uxtb	r1, r3
   1e798:	cmp	r1, #9
   1e79c:	bls	1e7c4 <__assert_fail@plt+0xbebc>
   1e7a0:	sub	r3, r2, #65	; 0x41
   1e7a4:	cmp	r3, #5
   1e7a8:	subls	r3, r2, #55	; 0x37
   1e7ac:	lslls	r3, r3, #4
   1e7b0:	bls	1e7c8 <__assert_fail@plt+0xbec0>
   1e7b4:	sub	r3, r2, #97	; 0x61
   1e7b8:	cmp	r3, #5
   1e7bc:	bhi	1e80c <__assert_fail@plt+0xbf04>
   1e7c0:	sub	r3, r2, #87	; 0x57
   1e7c4:	lsl	r3, r3, #4
   1e7c8:	ldrb	r2, [r0, #1]
   1e7cc:	sub	r0, r2, #48	; 0x30
   1e7d0:	uxtb	r1, r0
   1e7d4:	cmp	r1, #9
   1e7d8:	bls	1e7ec <__assert_fail@plt+0xbee4>
   1e7dc:	sub	r1, r2, #65	; 0x41
   1e7e0:	cmp	r1, #5
   1e7e4:	bhi	1e7f4 <__assert_fail@plt+0xbeec>
   1e7e8:	sub	r0, r2, #55	; 0x37
   1e7ec:	add	r0, r0, r3
   1e7f0:	bx	lr
   1e7f4:	sub	r1, r2, #97	; 0x61
   1e7f8:	cmp	r1, #5
   1e7fc:	bhi	1e80c <__assert_fail@plt+0xbf04>
   1e800:	sub	r0, r2, #87	; 0x57
   1e804:	add	r0, r0, r3
   1e808:	bx	lr
   1e80c:	mvn	r0, #0
   1e810:	bx	lr
   1e814:	subs	r3, r1, #0
   1e818:	beq	1e820 <__assert_fail@plt+0xbf18>
   1e81c:	b	1dfdc <__assert_fail@plt+0xb6d4>
   1e820:	mov	r0, r3
   1e824:	bx	lr
   1e828:	sub	r0, r0, #65	; 0x41
   1e82c:	cmp	r0, #25
   1e830:	movhi	r0, #0
   1e834:	movls	r0, #1
   1e838:	bx	lr
   1e83c:	sub	r0, r0, #97	; 0x61
   1e840:	cmp	r0, #25
   1e844:	movhi	r0, #0
   1e848:	movls	r0, #1
   1e84c:	bx	lr
   1e850:	sub	r3, r0, #97	; 0x61
   1e854:	cmp	r3, #25
   1e858:	bicls	r0, r0, #32
   1e85c:	bx	lr
   1e860:	sub	r3, r0, #65	; 0x41
   1e864:	cmp	r3, #25
   1e868:	orrls	r0, r0, #32
   1e86c:	bx	lr
   1e870:	ldrb	r3, [r0]
   1e874:	cmp	r3, #0
   1e878:	bxeq	lr
   1e87c:	mov	r1, r0
   1e880:	tst	r3, #128	; 0x80
   1e884:	moveq	r2, #1
   1e888:	movne	r2, #0
   1e88c:	sub	ip, r3, #65	; 0x41
   1e890:	cmp	ip, #25
   1e894:	movhi	r2, #0
   1e898:	andls	r2, r2, #1
   1e89c:	cmp	r2, #0
   1e8a0:	orrne	r3, r3, #32
   1e8a4:	strbne	r3, [r1]
   1e8a8:	ldrb	r3, [r1, #1]!
   1e8ac:	cmp	r3, #0
   1e8b0:	bne	1e880 <__assert_fail@plt+0xbf78>
   1e8b4:	bx	lr
   1e8b8:	cmp	r0, r1
   1e8bc:	beq	1e978 <__assert_fail@plt+0xc070>
   1e8c0:	push	{r4, r5, lr}
   1e8c4:	ldrb	r2, [r0]
   1e8c8:	ldrb	r3, [r1]
   1e8cc:	cmp	r2, #0
   1e8d0:	bne	1e918 <__assert_fail@plt+0xc010>
   1e8d4:	b	1e94c <__assert_fail@plt+0xc044>
   1e8d8:	cmp	r3, r2
   1e8dc:	sub	ip, r2, #97	; 0x61
   1e8e0:	beq	1e908 <__assert_fail@plt+0xc000>
   1e8e4:	cmp	ip, #25
   1e8e8:	sub	r4, r3, #97	; 0x61
   1e8ec:	mov	lr, r2
   1e8f0:	bicls	lr, r2, #32
   1e8f4:	cmp	r4, #25
   1e8f8:	bicls	r3, r3, #32
   1e8fc:	cmp	r3, lr
   1e900:	mov	r5, r2
   1e904:	bne	1e960 <__assert_fail@plt+0xc058>
   1e908:	ldrb	r2, [r0, #1]!
   1e90c:	ldrb	r3, [r1, #1]!
   1e910:	cmp	r2, #0
   1e914:	beq	1e94c <__assert_fail@plt+0xc044>
   1e918:	cmp	r3, #0
   1e91c:	bne	1e8d8 <__assert_fail@plt+0xbfd0>
   1e920:	sub	r3, r2, #97	; 0x61
   1e924:	cmp	r3, #25
   1e928:	mov	r5, r2
   1e92c:	mov	r3, #0
   1e930:	bhi	1e944 <__assert_fail@plt+0xc03c>
   1e934:	bic	r5, r2, #32
   1e938:	sub	r2, r3, #97	; 0x61
   1e93c:	cmp	r2, #25
   1e940:	bicls	r3, r3, #32
   1e944:	sub	r0, r5, r3
   1e948:	pop	{r4, r5, pc}
   1e94c:	cmp	r3, #0
   1e950:	movne	r5, #0
   1e954:	bne	1e938 <__assert_fail@plt+0xc030>
   1e958:	mov	r0, #0
   1e95c:	pop	{r4, r5, pc}
   1e960:	ldrb	r3, [r1]
   1e964:	cmp	r3, r2
   1e968:	beq	1e958 <__assert_fail@plt+0xc050>
   1e96c:	cmp	ip, #25
   1e970:	bls	1e934 <__assert_fail@plt+0xc02c>
   1e974:	b	1e938 <__assert_fail@plt+0xc030>
   1e978:	mov	r0, #0
   1e97c:	bx	lr
   1e980:	cmp	r2, #0
   1e984:	cmpne	r0, r1
   1e988:	beq	1e9f0 <__assert_fail@plt+0xc0e8>
   1e98c:	push	{r4, r5, lr}
   1e990:	sub	r1, r1, #1
   1e994:	sub	r4, r0, #1
   1e998:	b	1e9a4 <__assert_fail@plt+0xc09c>
   1e99c:	cmp	r3, ip
   1e9a0:	bne	1e9e8 <__assert_fail@plt+0xc0e0>
   1e9a4:	ldrb	r3, [r4, #1]!
   1e9a8:	sub	ip, r3, #65	; 0x41
   1e9ac:	cmp	ip, #25
   1e9b0:	ldrb	ip, [r1, #1]!
   1e9b4:	mvn	lr, r4
   1e9b8:	add	lr, lr, r2
   1e9bc:	sub	r5, ip, #65	; 0x41
   1e9c0:	orrls	r3, r3, #32
   1e9c4:	cmp	r5, #25
   1e9c8:	orrls	ip, ip, #32
   1e9cc:	cmn	r0, lr
   1e9d0:	moveq	lr, #1
   1e9d4:	movne	lr, #0
   1e9d8:	cmp	r3, #0
   1e9dc:	moveq	lr, #1
   1e9e0:	cmp	lr, #0
   1e9e4:	beq	1e99c <__assert_fail@plt+0xc094>
   1e9e8:	sub	r0, r3, ip
   1e9ec:	pop	{r4, r5, pc}
   1e9f0:	mov	r0, #0
   1e9f4:	bx	lr
   1e9f8:	cmp	r1, r0
   1e9fc:	beq	1ea04 <__assert_fail@plt+0xc0fc>
   1ea00:	b	1e024 <__assert_fail@plt+0xb71c>
   1ea04:	mov	r0, #0
   1ea08:	bx	lr
   1ea0c:	cmp	r0, r1
   1ea10:	beq	1ea70 <__assert_fail@plt+0xc168>
   1ea14:	ldrb	r2, [r0]
   1ea18:	ldrb	ip, [r1]
   1ea1c:	cmp	r2, #0
   1ea20:	beq	1ea58 <__assert_fail@plt+0xc150>
   1ea24:	clz	r3, ip
   1ea28:	lsr	r3, r3, #5
   1ea2c:	b	1ea48 <__assert_fail@plt+0xc140>
   1ea30:	ldrb	r2, [r0, #1]!
   1ea34:	ldrb	ip, [r1, #1]!
   1ea38:	clz	r3, ip
   1ea3c:	cmp	r2, #0
   1ea40:	lsr	r3, r3, #5
   1ea44:	beq	1ea58 <__assert_fail@plt+0xc150>
   1ea48:	cmp	ip, r2
   1ea4c:	orrne	r3, r3, #1
   1ea50:	cmp	r3, #0
   1ea54:	beq	1ea30 <__assert_fail@plt+0xc128>
   1ea58:	cmp	ip, r2
   1ea5c:	beq	1ea70 <__assert_fail@plt+0xc168>
   1ea60:	sxtb	r2, r2
   1ea64:	sxtb	r0, ip
   1ea68:	sub	r0, r2, r0
   1ea6c:	bx	lr
   1ea70:	mov	r0, #0
   1ea74:	bx	lr
   1ea78:	push	{r4, r5, r6, r7, r8, lr}
   1ea7c:	subs	r7, r3, #0
   1ea80:	mov	r4, r0
   1ea84:	beq	1eae4 <__assert_fail@plt+0xc1dc>
   1ea88:	cmp	r7, r1
   1ea8c:	bhi	1eadc <__assert_fail@plt+0xc1d4>
   1ea90:	sub	r1, r1, r7
   1ea94:	adds	r5, r0, r1
   1ea98:	bcs	1eadc <__assert_fail@plt+0xc1d4>
   1ea9c:	cmp	r0, r2
   1eaa0:	mov	r6, r2
   1eaa4:	beq	1eae4 <__assert_fail@plt+0xc1dc>
   1eaa8:	mov	r2, r7
   1eaac:	mov	r1, r6
   1eab0:	mov	r0, r4
   1eab4:	bl	1e024 <__assert_fail@plt+0xb71c>
   1eab8:	cmp	r0, #0
   1eabc:	beq	1eae4 <__assert_fail@plt+0xc1dc>
   1eac0:	add	r4, r4, #1
   1eac4:	cmp	r5, r4
   1eac8:	bcc	1eadc <__assert_fail@plt+0xc1d4>
   1eacc:	cmp	r6, r4
   1ead0:	bne	1eaa8 <__assert_fail@plt+0xc1a0>
   1ead4:	mov	r0, r6
   1ead8:	pop	{r4, r5, r6, r7, r8, pc}
   1eadc:	mov	r0, #0
   1eae0:	pop	{r4, r5, r6, r7, r8, pc}
   1eae4:	mov	r0, r4
   1eae8:	pop	{r4, r5, r6, r7, r8, pc}
   1eaec:	push	{r4, r5, r6, lr}
   1eaf0:	mov	r5, r0
   1eaf4:	ldrb	r4, [r0]
   1eaf8:	cmp	r4, #0
   1eafc:	beq	1eb20 <__assert_fail@plt+0xc218>
   1eb00:	bl	124f4 <__ctype_tolower_loc@plt>
   1eb04:	mov	r3, r5
   1eb08:	ldr	r2, [r0]
   1eb0c:	ldr	r2, [r2, r4, lsl #2]
   1eb10:	strb	r2, [r3]
   1eb14:	ldrb	r4, [r3, #1]!
   1eb18:	cmp	r4, #0
   1eb1c:	bne	1eb08 <__assert_fail@plt+0xc200>
   1eb20:	mov	r0, r5
   1eb24:	pop	{r4, r5, r6, pc}
   1eb28:	cmp	r2, #0
   1eb2c:	beq	1eb80 <__assert_fail@plt+0xc278>
   1eb30:	push	{r4, r5, r6, r7, r8, lr}
   1eb34:	sub	r4, r0, #1
   1eb38:	add	r8, r4, r2
   1eb3c:	sub	r7, r1, #1
   1eb40:	ldrb	r5, [r4, #1]!
   1eb44:	ldrb	r6, [r7, #1]!
   1eb48:	cmp	r5, r6
   1eb4c:	beq	1eb68 <__assert_fail@plt+0xc260>
   1eb50:	bl	12500 <__ctype_toupper_loc@plt>
   1eb54:	ldr	r3, [r0]
   1eb58:	ldr	r2, [r3, r5, lsl #2]
   1eb5c:	ldr	r3, [r3, r6, lsl #2]
   1eb60:	cmp	r2, r3
   1eb64:	bne	1eb78 <__assert_fail@plt+0xc270>
   1eb68:	cmp	r8, r4
   1eb6c:	bne	1eb40 <__assert_fail@plt+0xc238>
   1eb70:	mov	r0, #0
   1eb74:	pop	{r4, r5, r6, r7, r8, pc}
   1eb78:	sub	r0, r5, r6
   1eb7c:	pop	{r4, r5, r6, r7, r8, pc}
   1eb80:	mov	r0, r2
   1eb84:	bx	lr
   1eb88:	cmp	r0, #0
   1eb8c:	bxeq	lr
   1eb90:	mov	r2, #1
   1eb94:	b	1dde8 <__assert_fail@plt+0xb4e0>
   1eb98:	cmp	r0, #0
   1eb9c:	bxeq	lr
   1eba0:	mov	r2, #0
   1eba4:	b	1dde8 <__assert_fail@plt+0xb4e0>
   1eba8:	push	{r0, r1, r2, r3}
   1ebac:	push	{r4, lr}
   1ebb0:	sub	sp, sp, #8
   1ebb4:	ldr	r4, [pc, #80]	; 1ec0c <__assert_fail@plt+0xc304>
   1ebb8:	ldr	r0, [sp, #16]
   1ebbc:	ldr	r3, [r4]
   1ebc0:	cmp	r0, #0
   1ebc4:	str	r3, [sp, #4]
   1ebc8:	beq	1ebfc <__assert_fail@plt+0xc2f4>
   1ebcc:	add	r3, sp, #20
   1ebd0:	mov	r1, r3
   1ebd4:	str	r3, [sp]
   1ebd8:	bl	1d8f4 <__assert_fail@plt+0xafec>
   1ebdc:	ldr	r2, [sp, #4]
   1ebe0:	ldr	r3, [r4]
   1ebe4:	cmp	r2, r3
   1ebe8:	bne	1ec08 <__assert_fail@plt+0xc300>
   1ebec:	add	sp, sp, #8
   1ebf0:	pop	{r4, lr}
   1ebf4:	add	sp, sp, #16
   1ebf8:	bx	lr
   1ebfc:	ldr	r0, [pc, #12]	; 1ec10 <__assert_fail@plt+0xc308>
   1ec00:	bl	128d8 <gcry_strdup@plt>
   1ec04:	b	1ebdc <__assert_fail@plt+0xc2d4>
   1ec08:	bl	122fc <__stack_chk_fail@plt>
   1ec0c:	andeq	r4, r3, r8, lsr fp
   1ec10:	andeq	r3, r2, r8, lsl #21
   1ec14:	push	{r0, r1, r2, r3}
   1ec18:	push	{r4, lr}
   1ec1c:	sub	sp, sp, #8
   1ec20:	ldr	r4, [pc, #144]	; 1ecb8 <__assert_fail@plt+0xc3b0>
   1ec24:	ldr	r0, [sp, #16]
   1ec28:	ldr	r3, [r4]
   1ec2c:	cmp	r0, #0
   1ec30:	str	r3, [sp, #4]
   1ec34:	beq	1ec70 <__assert_fail@plt+0xc368>
   1ec38:	add	r3, sp, #20
   1ec3c:	mov	r1, r3
   1ec40:	str	r3, [sp]
   1ec44:	bl	1d8f4 <__assert_fail@plt+0xafec>
   1ec48:	cmp	r0, #0
   1ec4c:	beq	1ec80 <__assert_fail@plt+0xc378>
   1ec50:	ldr	r2, [sp, #4]
   1ec54:	ldr	r3, [r4]
   1ec58:	cmp	r2, r3
   1ec5c:	bne	1ec7c <__assert_fail@plt+0xc374>
   1ec60:	add	sp, sp, #8
   1ec64:	pop	{r4, lr}
   1ec68:	add	sp, sp, #16
   1ec6c:	bx	lr
   1ec70:	ldr	r0, [pc, #68]	; 1ecbc <__assert_fail@plt+0xc3b4>
   1ec74:	bl	126b0 <gcry_xstrdup@plt>
   1ec78:	b	1ec48 <__assert_fail@plt+0xc340>
   1ec7c:	bl	122fc <__stack_chk_fail@plt>
   1ec80:	bl	12620 <__errno_location@plt>
   1ec84:	ldr	r3, [pc, #52]	; 1ecc0 <__assert_fail@plt+0xc3b8>
   1ec88:	ldr	r3, [r3]
   1ec8c:	ldr	r2, [r0]
   1ec90:	cmp	r2, #22
   1ec94:	moveq	r2, #37	; 0x25
   1ec98:	moveq	r1, #1
   1ec9c:	ldreq	r0, [pc, #32]	; 1ecc4 <__assert_fail@plt+0xc3bc>
   1eca0:	movne	r2, #22
   1eca4:	movne	r1, #1
   1eca8:	ldrne	r0, [pc, #24]	; 1ecc8 <__assert_fail@plt+0xc3c0>
   1ecac:	bl	123e0 <fwrite@plt>
   1ecb0:	mov	r0, #2
   1ecb4:	bl	12560 <exit@plt>
   1ecb8:	andeq	r4, r3, r8, lsr fp
   1ecbc:	andeq	r3, r2, r8, lsl #21
   1ecc0:	andeq	r5, r3, r8, ror r1
   1ecc4:	andeq	r3, r2, ip, lsl #21
   1ecc8:			; <UNDEFINED> instruction: 0x00023ab4
   1eccc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ecd0:	mov	r6, r2
   1ecd4:	mov	r7, r3
   1ecd8:	mov	r8, r0
   1ecdc:	mov	r5, r1
   1ece0:	bl	125c0 <strchr@plt>
   1ece4:	cmp	r0, #0
   1ece8:	beq	1ed74 <__assert_fail@plt+0xc46c>
   1ecec:	mov	r4, #1
   1ecf0:	b	1ecf8 <__assert_fail@plt+0xc3f0>
   1ecf4:	mov	r4, r3
   1ecf8:	add	r0, r0, #1
   1ecfc:	mov	r1, r5
   1ed00:	bl	125c0 <strchr@plt>
   1ed04:	add	r3, r4, #1
   1ed08:	cmp	r0, #0
   1ed0c:	bne	1ecf4 <__assert_fail@plt+0xc3ec>
   1ed10:	add	r0, r4, #2
   1ed14:	mov	r1, #4
   1ed18:	bl	12668 <gcry_calloc@plt>
   1ed1c:	subs	r9, r0, #0
   1ed20:	beq	1ed6c <__assert_fail@plt+0xc464>
   1ed24:	str	r8, [r9]
   1ed28:	mov	r0, r8
   1ed2c:	mov	r1, r5
   1ed30:	bl	125c0 <strchr@plt>
   1ed34:	subs	r3, r0, #0
   1ed38:	beq	1ed7c <__assert_fail@plt+0xc474>
   1ed3c:	mov	r8, r9
   1ed40:	mov	r4, #1
   1ed44:	add	r0, r3, #1
   1ed48:	strb	r6, [r3]
   1ed4c:	str	r0, [r8, #4]!
   1ed50:	mov	r1, r5
   1ed54:	bl	125c0 <strchr@plt>
   1ed58:	add	r4, r4, #1
   1ed5c:	subs	r3, r0, #0
   1ed60:	bne	1ed44 <__assert_fail@plt+0xc43c>
   1ed64:	cmp	r7, #0
   1ed68:	strne	r4, [r7]
   1ed6c:	mov	r0, r9
   1ed70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ed74:	mov	r0, #2
   1ed78:	b	1ed14 <__assert_fail@plt+0xc40c>
   1ed7c:	mov	r4, #1
   1ed80:	b	1ed64 <__assert_fail@plt+0xc45c>
   1ed84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ed88:	mov	r8, r0
   1ed8c:	mov	r6, r1
   1ed90:	bl	12824 <strpbrk@plt>
   1ed94:	cmp	r0, #0
   1ed98:	beq	1ef50 <__assert_fail@plt+0xc648>
   1ed9c:	mov	r5, #1
   1eda0:	b	1eda8 <__assert_fail@plt+0xc4a0>
   1eda4:	mov	r5, r3
   1eda8:	add	r0, r0, #1
   1edac:	mov	r1, r6
   1edb0:	bl	12824 <strpbrk@plt>
   1edb4:	add	r3, r5, #1
   1edb8:	cmp	r0, #0
   1edbc:	bne	1eda4 <__assert_fail@plt+0xc49c>
   1edc0:	add	r5, r5, #2
   1edc4:	tst	r5, #-1073741824	; 0xc0000000
   1edc8:	lsl	r5, r5, #2
   1edcc:	bne	1ee9c <__assert_fail@plt+0xc594>
   1edd0:	mov	r0, r8
   1edd4:	bl	1259c <strlen@plt>
   1edd8:	add	r0, r0, #1
   1eddc:	adds	r0, r5, r0
   1ede0:	movcs	r7, #1
   1ede4:	movcc	r7, #0
   1ede8:	bcs	1ee9c <__assert_fail@plt+0xc594>
   1edec:	bl	1217c <gcry_malloc@plt>
   1edf0:	subs	r9, r0, #0
   1edf4:	beq	1eea8 <__assert_fail@plt+0xc5a0>
   1edf8:	add	r5, r9, r5
   1edfc:	mov	r1, r8
   1ee00:	mov	r0, r5
   1ee04:	bl	12404 <strcpy@plt>
   1ee08:	mov	r4, r5
   1ee0c:	sub	r8, r9, #4
   1ee10:	mov	sl, r7
   1ee14:	mov	r1, r6
   1ee18:	mov	r0, r4
   1ee1c:	bl	12824 <strpbrk@plt>
   1ee20:	cmp	r0, #0
   1ee24:	beq	1eeb0 <__assert_fail@plt+0xc5a8>
   1ee28:	strb	sl, [r0]
   1ee2c:	ldrb	r3, [r4]
   1ee30:	cmp	r3, #32
   1ee34:	cmpne	r3, #9
   1ee38:	bne	1ee4c <__assert_fail@plt+0xc544>
   1ee3c:	ldrb	r3, [r4, #1]!
   1ee40:	cmp	r3, #9
   1ee44:	cmpne	r3, #32
   1ee48:	beq	1ee3c <__assert_fail@plt+0xc534>
   1ee4c:	sub	r3, r0, #1
   1ee50:	cmp	r3, r4
   1ee54:	bcc	1ee8c <__assert_fail@plt+0xc584>
   1ee58:	ldrb	r2, [r0, #-1]
   1ee5c:	cmp	r2, #9
   1ee60:	cmpne	r2, #32
   1ee64:	bne	1ee8c <__assert_fail@plt+0xc584>
   1ee68:	sub	r1, r4, #1
   1ee6c:	b	1ee80 <__assert_fail@plt+0xc578>
   1ee70:	ldrb	r2, [r3]
   1ee74:	cmp	r2, #9
   1ee78:	cmpne	r2, #32
   1ee7c:	bne	1ee8c <__assert_fail@plt+0xc584>
   1ee80:	strb	sl, [r3], #-1
   1ee84:	cmp	r3, r1
   1ee88:	bne	1ee70 <__assert_fail@plt+0xc568>
   1ee8c:	str	r4, [r8, #4]!
   1ee90:	add	r7, r7, #1
   1ee94:	add	r4, r0, #1
   1ee98:	b	1ee14 <__assert_fail@plt+0xc50c>
   1ee9c:	mov	r0, #12
   1eea0:	bl	12794 <gpg_err_set_errno@plt>
   1eea4:	mov	r9, #0
   1eea8:	mov	r0, r9
   1eeac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eeb0:	ldrb	r3, [r4]
   1eeb4:	cmp	r3, #32
   1eeb8:	cmpne	r3, #9
   1eebc:	bne	1eed0 <__assert_fail@plt+0xc5c8>
   1eec0:	ldrb	r3, [r4, #1]!
   1eec4:	cmp	r3, #9
   1eec8:	cmpne	r3, #32
   1eecc:	beq	1eec0 <__assert_fail@plt+0xc5b8>
   1eed0:	mov	r0, r4
   1eed4:	bl	1259c <strlen@plt>
   1eed8:	sub	r0, r0, #1
   1eedc:	adds	r3, r4, r0
   1eee0:	bcs	1ef18 <__assert_fail@plt+0xc610>
   1eee4:	ldrb	r2, [r4, r0]
   1eee8:	cmp	r2, #9
   1eeec:	cmpne	r2, #32
   1eef0:	bne	1ef18 <__assert_fail@plt+0xc610>
   1eef4:	mov	r1, #0
   1eef8:	b	1ef0c <__assert_fail@plt+0xc604>
   1eefc:	ldrb	r2, [r3]
   1ef00:	cmp	r2, #9
   1ef04:	cmpne	r2, #32
   1ef08:	bne	1ef18 <__assert_fail@plt+0xc610>
   1ef0c:	strb	r1, [r3], #-1
   1ef10:	cmp	r3, r4
   1ef14:	bcs	1eefc <__assert_fail@plt+0xc5f4>
   1ef18:	lsl	r3, r7, #2
   1ef1c:	add	r2, r3, #8
   1ef20:	add	r2, r9, r2
   1ef24:	add	r3, r9, r3
   1ef28:	cmp	r5, r2
   1ef2c:	mov	r2, #0
   1ef30:	str	r4, [r9, r7, lsl #2]
   1ef34:	str	r2, [r3, #4]
   1ef38:	beq	1eea8 <__assert_fail@plt+0xc5a0>
   1ef3c:	ldr	r3, [pc, #20]	; 1ef58 <__assert_fail@plt+0xc650>
   1ef40:	ldr	r2, [pc, #20]	; 1ef5c <__assert_fail@plt+0xc654>
   1ef44:	ldr	r1, [pc, #20]	; 1ef60 <__assert_fail@plt+0xc658>
   1ef48:	ldr	r0, [pc, #20]	; 1ef64 <__assert_fail@plt+0xc65c>
   1ef4c:	bl	12908 <__assert_fail@plt>
   1ef50:	mov	r5, #8
   1ef54:	b	1edd0 <__assert_fail@plt+0xc4c8>
   1ef58:	andeq	r3, r2, r8, lsr sl
   1ef5c:	andeq	r0, r0, r2, lsl r5
   1ef60:	andeq	r3, r2, r4, asr #20
   1ef64:	andeq	r3, r2, ip, asr #21
   1ef68:	push	{r4, r5, r6, r7, r8, lr}
   1ef6c:	mov	r6, r2
   1ef70:	ldrb	r3, [r0]
   1ef74:	cmp	r3, #32
   1ef78:	bne	1ef88 <__assert_fail@plt+0xc680>
   1ef7c:	ldrb	r3, [r0, #1]!
   1ef80:	cmp	r3, #32
   1ef84:	beq	1ef7c <__assert_fail@plt+0xc674>
   1ef88:	cmp	r6, #0
   1ef8c:	beq	1efec <__assert_fail@plt+0xc6e4>
   1ef90:	mov	r4, #0
   1ef94:	sub	r5, r1, #4
   1ef98:	mov	r7, r4
   1ef9c:	str	r0, [r5, #4]!
   1efa0:	mov	r1, #32
   1efa4:	bl	125c0 <strchr@plt>
   1efa8:	add	r4, r4, #1
   1efac:	subs	r3, r0, #0
   1efb0:	beq	1efe4 <__assert_fail@plt+0xc6dc>
   1efb4:	mov	r0, r3
   1efb8:	strb	r7, [r0], #1
   1efbc:	ldrb	r3, [r3, #1]
   1efc0:	cmp	r3, #32
   1efc4:	bne	1efd4 <__assert_fail@plt+0xc6cc>
   1efc8:	ldrb	r3, [r0, #1]!
   1efcc:	cmp	r3, #32
   1efd0:	beq	1efc8 <__assert_fail@plt+0xc6c0>
   1efd4:	cmp	r3, #0
   1efd8:	beq	1efe4 <__assert_fail@plt+0xc6dc>
   1efdc:	cmp	r6, r4
   1efe0:	bne	1ef9c <__assert_fail@plt+0xc694>
   1efe4:	mov	r0, r4
   1efe8:	pop	{r4, r5, r6, r7, r8, pc}
   1efec:	mov	r4, r6
   1eff0:	b	1efe4 <__assert_fail@plt+0xc6dc>
   1eff4:	push	{r4, r5, r6, r7, r8, lr}
   1eff8:	subs	r7, r2, #0
   1effc:	beq	1f04c <__assert_fail@plt+0xc744>
   1f000:	mov	r4, #0
   1f004:	sub	r5, r1, #4
   1f008:	mov	r6, r4
   1f00c:	b	1f028 <__assert_fail@plt+0xc720>
   1f010:	strb	r6, [r0], #1
   1f014:	ldrb	r3, [r3, #1]
   1f018:	cmp	r3, #0
   1f01c:	beq	1f044 <__assert_fail@plt+0xc73c>
   1f020:	cmp	r7, r4
   1f024:	beq	1f044 <__assert_fail@plt+0xc73c>
   1f028:	str	r0, [r5, #4]!
   1f02c:	mov	r1, #58	; 0x3a
   1f030:	bl	125c0 <strchr@plt>
   1f034:	add	r4, r4, #1
   1f038:	subs	r3, r0, #0
   1f03c:	mov	r0, r3
   1f040:	bne	1f010 <__assert_fail@plt+0xc708>
   1f044:	mov	r0, r4
   1f048:	pop	{r4, r5, r6, r7, r8, pc}
   1f04c:	mov	r4, r7
   1f050:	b	1f044 <__assert_fail@plt+0xc73c>
   1f054:	push	{r4, r5, r6, lr}
   1f058:	sub	sp, sp, #32
   1f05c:	ldr	r4, [pc, #220]	; 1f140 <__assert_fail@plt+0xc838>
   1f060:	cmp	r0, #0
   1f064:	ldr	r3, [r4]
   1f068:	str	r3, [sp, #28]
   1f06c:	beq	1f134 <__assert_fail@plt+0xc82c>
   1f070:	mov	r5, r1
   1f074:	add	r3, sp, #12
   1f078:	add	r2, sp, #8
   1f07c:	add	r1, sp, #4
   1f080:	bl	1d72c <__assert_fail@plt+0xae24>
   1f084:	subs	r6, r0, #0
   1f088:	beq	1f134 <__assert_fail@plt+0xc82c>
   1f08c:	cmp	r5, #0
   1f090:	beq	1f104 <__assert_fail@plt+0xc7fc>
   1f094:	add	r1, sp, #16
   1f098:	mov	r0, r5
   1f09c:	add	r3, sp, #24
   1f0a0:	add	r2, sp, #20
   1f0a4:	bl	1d72c <__assert_fail@plt+0xae24>
   1f0a8:	subs	r1, r0, #0
   1f0ac:	beq	1f134 <__assert_fail@plt+0xc82c>
   1f0b0:	ldr	r3, [sp, #4]
   1f0b4:	ldr	r2, [sp, #16]
   1f0b8:	cmp	r3, r2
   1f0bc:	subne	r3, r3, r2
   1f0c0:	beq	1f0d4 <__assert_fail@plt+0xc7cc>
   1f0c4:	cmp	r3, #0
   1f0c8:	mvnlt	r0, #0
   1f0cc:	movge	r0, #1
   1f0d0:	b	1f108 <__assert_fail@plt+0xc800>
   1f0d4:	ldr	r3, [sp, #8]
   1f0d8:	ldr	r0, [sp, #20]
   1f0dc:	cmp	r3, r0
   1f0e0:	bne	1f120 <__assert_fail@plt+0xc818>
   1f0e4:	ldr	r3, [sp, #12]
   1f0e8:	ldr	r0, [sp, #24]
   1f0ec:	cmp	r3, r0
   1f0f0:	bne	1f120 <__assert_fail@plt+0xc818>
   1f0f4:	mov	r0, r6
   1f0f8:	bl	121ac <strcmp@plt>
   1f0fc:	subs	r3, r0, #0
   1f100:	bne	1f0c4 <__assert_fail@plt+0xc7bc>
   1f104:	mov	r0, #0
   1f108:	ldr	r2, [sp, #28]
   1f10c:	ldr	r3, [r4]
   1f110:	cmp	r2, r3
   1f114:	bne	1f13c <__assert_fail@plt+0xc834>
   1f118:	add	sp, sp, #32
   1f11c:	pop	{r4, r5, r6, pc}
   1f120:	sub	r3, r3, r0
   1f124:	cmp	r3, #0
   1f128:	mvnlt	r0, #0
   1f12c:	movge	r0, #1
   1f130:	b	1f108 <__assert_fail@plt+0xc800>
   1f134:	mov	r0, #-2147483648	; 0x80000000
   1f138:	b	1f108 <__assert_fail@plt+0xc800>
   1f13c:	bl	122fc <__stack_chk_fail@plt>
   1f140:	andeq	r4, r3, r8, lsr fp
   1f144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f148:	sub	sp, sp, #12
   1f14c:	mov	r7, r1
   1f150:	str	r2, [sp]
   1f154:	bl	128d8 <gcry_strdup@plt>
   1f158:	subs	r3, r0, #0
   1f15c:	str	r3, [sp, #4]
   1f160:	beq	1f32c <__assert_fail@plt+0xca24>
   1f164:	mov	r6, #0
   1f168:	ldr	r9, [pc, #464]	; 1f340 <__assert_fail@plt+0xca38>
   1f16c:	mov	r5, r6
   1f170:	mov	r8, r6
   1f174:	mov	r4, r3
   1f178:	mov	fp, r3
   1f17c:	mov	r1, r9
   1f180:	mov	r0, fp
   1f184:	bl	121dc <strcspn@plt>
   1f188:	adds	sl, fp, r0
   1f18c:	beq	1f22c <__assert_fail@plt+0xc924>
   1f190:	ldrb	fp, [sl]
   1f194:	cmp	fp, #10
   1f198:	beq	1f248 <__assert_fail@plt+0xc940>
   1f19c:	subs	r1, sl, r4
   1f1a0:	beq	1f1b0 <__assert_fail@plt+0xc8a8>
   1f1a4:	mov	r0, r4
   1f1a8:	bl	1dfdc <__assert_fail@plt+0xb6d4>
   1f1ac:	mov	r1, r0
   1f1b0:	cmp	r7, r1
   1f1b4:	bgt	1f260 <__assert_fail@plt+0xc958>
   1f1b8:	ldr	r3, [sp]
   1f1bc:	sub	ip, r1, r7
   1f1c0:	cmp	r3, r1
   1f1c4:	sublt	r1, r1, r3
   1f1c8:	lsl	ip, ip, #1
   1f1cc:	sub	r0, r7, r5
   1f1d0:	addlt	ip, ip, r1, lsl #2
   1f1d4:	cmp	ip, r0
   1f1d8:	movlt	ip, #0
   1f1dc:	movge	ip, #1
   1f1e0:	cmp	r5, #0
   1f1e4:	movne	r5, ip
   1f1e8:	moveq	r5, #0
   1f1ec:	cmp	r5, #0
   1f1f0:	movne	sl, r8
   1f1f4:	ldrbne	fp, [r8]
   1f1f8:	cmp	fp, #0
   1f1fc:	beq	1f2e0 <__assert_fail@plt+0xc9d8>
   1f200:	mov	fp, sl
   1f204:	mov	r1, #10
   1f208:	strb	r1, [fp], #1
   1f20c:	ldrb	r1, [sl, #1]
   1f210:	cmp	r1, #32
   1f214:	beq	1f290 <__assert_fail@plt+0xc988>
   1f218:	mov	r6, #0
   1f21c:	mov	r5, r6
   1f220:	mov	r8, r6
   1f224:	mov	r4, fp
   1f228:	b	1f17c <__assert_fail@plt+0xc874>
   1f22c:	ldr	sl, [sp, #4]
   1f230:	mov	r0, sl
   1f234:	bl	1259c <strlen@plt>
   1f238:	add	sl, sl, r0
   1f23c:	ldrb	fp, [sl]
   1f240:	cmp	fp, #10
   1f244:	bne	1f19c <__assert_fail@plt+0xc894>
   1f248:	add	r4, sl, #1
   1f24c:	mov	r5, #0
   1f250:	mov	fp, r4
   1f254:	mov	r8, r5
   1f258:	mov	r6, #1
   1f25c:	b	1f17c <__assert_fail@plt+0xc874>
   1f260:	cmp	fp, #0
   1f264:	beq	1f2e0 <__assert_fail@plt+0xc9d8>
   1f268:	ldrb	r0, [sl, #1]
   1f26c:	add	fp, sl, #1
   1f270:	cmp	r0, #32
   1f274:	bne	1f284 <__assert_fail@plt+0xc97c>
   1f278:	ldrb	r0, [fp, #1]!
   1f27c:	cmp	r0, #32
   1f280:	beq	1f278 <__assert_fail@plt+0xc970>
   1f284:	mov	r5, r1
   1f288:	mov	r8, sl
   1f28c:	b	1f17c <__assert_fail@plt+0xc874>
   1f290:	ldrb	r1, [sl, #2]
   1f294:	cmp	r1, #32
   1f298:	bne	1f338 <__assert_fail@plt+0xca30>
   1f29c:	add	r2, sl, #3
   1f2a0:	mov	r4, r2
   1f2a4:	add	r2, r2, #1
   1f2a8:	ldrb	r1, [r4]
   1f2ac:	cmp	r1, #32
   1f2b0:	beq	1f2a0 <__assert_fail@plt+0xc998>
   1f2b4:	mov	r0, r4
   1f2b8:	bl	1259c <strlen@plt>
   1f2bc:	mov	r6, #0
   1f2c0:	mov	r1, r4
   1f2c4:	mov	r5, r6
   1f2c8:	mov	r8, r6
   1f2cc:	mov	r4, fp
   1f2d0:	add	r2, r0, #1
   1f2d4:	mov	r0, fp
   1f2d8:	bl	12224 <memmove@plt>
   1f2dc:	b	1f17c <__assert_fail@plt+0xc874>
   1f2e0:	ldr	r4, [sp, #4]
   1f2e4:	mov	r0, r4
   1f2e8:	bl	1259c <strlen@plt>
   1f2ec:	ldr	r2, [pc, #80]	; 1f344 <__assert_fail@plt+0xca3c>
   1f2f0:	mov	r1, r0
   1f2f4:	mov	r0, r4
   1f2f8:	bl	1e440 <__assert_fail@plt+0xbb38>
   1f2fc:	cmp	r6, #0
   1f300:	bne	1f32c <__assert_fail@plt+0xca24>
   1f304:	ldrb	r3, [r4]
   1f308:	cmp	r3, #0
   1f30c:	beq	1f32c <__assert_fail@plt+0xca24>
   1f310:	mov	r0, r4
   1f314:	bl	1259c <strlen@plt>
   1f318:	sub	r0, r0, #1
   1f31c:	ldrb	r3, [r4, r0]
   1f320:	cmp	r3, #10
   1f324:	ldreq	r3, [sp, #4]
   1f328:	strbeq	r6, [r3, r0]
   1f32c:	ldr	r0, [sp, #4]
   1f330:	add	sp, sp, #12
   1f334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f338:	add	r4, sl, #2
   1f33c:	b	1f2b4 <__assert_fail@plt+0xc9ac>
   1f340:	strdeq	r3, [r2], -r0
   1f344:	muleq	r2, r8, r6
   1f348:	push	{r4, r5, r6, r7, r8, lr}
   1f34c:	mov	r7, r0
   1f350:	mov	r8, r1
   1f354:	mov	r6, r2
   1f358:	bl	12620 <__errno_location@plt>
   1f35c:	ldr	r3, [r0]
   1f360:	cmp	r3, #22
   1f364:	beq	1f3d0 <__assert_fail@plt+0xcac8>
   1f368:	ldr	r4, [pc, #200]	; 1f438 <__assert_fail@plt+0xcb30>
   1f36c:	mov	r5, r0
   1f370:	ldr	r0, [r4, #8]
   1f374:	cmp	r0, #0
   1f378:	beq	1f3a8 <__assert_fail@plt+0xcaa0>
   1f37c:	mov	r3, #1
   1f380:	str	r3, [r4, #8]
   1f384:	cmp	r6, #0
   1f388:	popeq	{r4, r5, r6, r7, r8, pc}
   1f38c:	ldr	r2, [pc, #168]	; 1f43c <__assert_fail@plt+0xcb34>
   1f390:	ldr	r1, [pc, #168]	; 1f440 <__assert_fail@plt+0xcb38>
   1f394:	mov	r3, #0
   1f398:	str	r1, [r2]
   1f39c:	str	r3, [r4, #12]
   1f3a0:	str	r3, [r4, #16]
   1f3a4:	pop	{r4, r5, r6, r7, r8, pc}
   1f3a8:	mov	r2, #5
   1f3ac:	ldr	r1, [pc, #144]	; 1f444 <__assert_fail@plt+0xcb3c>
   1f3b0:	bl	122f0 <dcgettext@plt>
   1f3b4:	mov	r7, r0
   1f3b8:	ldr	r0, [r5]
   1f3bc:	bl	124dc <strerror@plt>
   1f3c0:	mov	r1, r0
   1f3c4:	mov	r0, r7
   1f3c8:	bl	17d34 <__assert_fail@plt+0x542c>
   1f3cc:	b	1f37c <__assert_fail@plt+0xca74>
   1f3d0:	cmp	r7, #0
   1f3d4:	ldr	r4, [pc, #92]	; 1f438 <__assert_fail@plt+0xcb30>
   1f3d8:	beq	1f3f0 <__assert_fail@plt+0xcae8>
   1f3dc:	ldr	r1, [pc, #92]	; 1f440 <__assert_fail@plt+0xcb38>
   1f3e0:	mov	r0, r7
   1f3e4:	bl	121ac <strcmp@plt>
   1f3e8:	cmp	r0, #0
   1f3ec:	beq	1f428 <__assert_fail@plt+0xcb20>
   1f3f0:	mov	r3, #1
   1f3f4:	ldr	r0, [r4, #4]
   1f3f8:	str	r3, [r4, #4]
   1f3fc:	cmp	r0, #0
   1f400:	bne	1f384 <__assert_fail@plt+0xca7c>
   1f404:	mov	r2, #5
   1f408:	ldr	r1, [pc, #56]	; 1f448 <__assert_fail@plt+0xcb40>
   1f40c:	bl	122f0 <dcgettext@plt>
   1f410:	mov	r2, r7
   1f414:	mov	r1, r8
   1f418:	bl	17d34 <__assert_fail@plt+0x542c>
   1f41c:	cmp	r6, #0
   1f420:	popeq	{r4, r5, r6, r7, r8, pc}
   1f424:	b	1f38c <__assert_fail@plt+0xca84>
   1f428:	mov	r3, #1
   1f42c:	ldr	r0, [r4]
   1f430:	str	r3, [r4]
   1f434:	b	1f3fc <__assert_fail@plt+0xcaf4>
   1f438:	andeq	r5, r3, r8, lsr r4
   1f43c:	andeq	r5, r3, r0, ror r1
   1f440:	ldrdeq	r1, [r2], -r8
   1f444:	andeq	r3, r2, r4, lsr fp
   1f448:	andeq	r3, r2, r8, lsl #22
   1f44c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f450:	sub	sp, sp, #76	; 0x4c
   1f454:	mov	r7, #0
   1f458:	str	r3, [sp, #36]	; 0x24
   1f45c:	ldr	r3, [pc, #1932]	; 1fbf0 <__assert_fail@plt+0xd2e8>
   1f460:	str	r1, [sp, #28]
   1f464:	add	r1, r0, r1
   1f468:	ldr	r3, [r3]
   1f46c:	str	r0, [sp, #32]
   1f470:	str	r3, [sp, #68]	; 0x44
   1f474:	ldr	r3, [sp, #28]
   1f478:	ldr	sl, [pc, #1908]	; 1fbf4 <__assert_fail@plt+0xd2ec>
   1f47c:	cmp	r3, #0
   1f480:	str	r2, [sp, #24]
   1f484:	sub	fp, r1, #1
   1f488:	str	r7, [sp, #16]
   1f48c:	str	r7, [sp, #20]
   1f490:	beq	1f59c <__assert_fail@plt+0xcc94>
   1f494:	ldr	r3, [sp, #32]
   1f498:	mov	r9, #0
   1f49c:	mov	r5, r9
   1f4a0:	mov	r8, r9
   1f4a4:	sub	r6, r3, #1
   1f4a8:	ldr	r4, [sp, #20]
   1f4ac:	b	1f50c <__assert_fail@plt+0xcc04>
   1f4b0:	tst	r3, #128	; 0x80
   1f4b4:	bne	1f634 <__assert_fail@plt+0xcd2c>
   1f4b8:	ldr	r1, [sp, #24]
   1f4bc:	cmn	r1, #1
   1f4c0:	beq	1f4f4 <__assert_fail@plt+0xcbec>
   1f4c4:	cmp	r3, #127	; 0x7f
   1f4c8:	cmpne	r3, #31
   1f4cc:	bls	1f6cc <__assert_fail@plt+0xcdc4>
   1f4d0:	cmp	r3, r1
   1f4d4:	beq	1f6cc <__assert_fail@plt+0xcdc4>
   1f4d8:	cmp	r1, #0
   1f4dc:	sub	r2, r3, #92	; 0x5c
   1f4e0:	clz	r2, r2
   1f4e4:	lsr	r2, r2, #5
   1f4e8:	moveq	r2, #0
   1f4ec:	cmp	r2, #0
   1f4f0:	bne	1f7dc <__assert_fail@plt+0xced4>
   1f4f4:	add	r9, r9, #1
   1f4f8:	mov	r7, #0
   1f4fc:	cmp	r4, #0
   1f500:	strbne	r3, [r4], #1
   1f504:	cmp	fp, r6
   1f508:	beq	1f578 <__assert_fail@plt+0xcc70>
   1f50c:	cmp	r7, #0
   1f510:	ldrb	r3, [r6, #1]!
   1f514:	beq	1f538 <__assert_fail@plt+0xcc30>
   1f518:	add	r1, r3, #64	; 0x40
   1f51c:	lsr	r2, r3, #7
   1f520:	uxtb	r1, r1
   1f524:	cmp	r1, #61	; 0x3d
   1f528:	movls	r2, #0
   1f52c:	andhi	r2, r2, #1
   1f530:	cmp	r2, #0
   1f534:	bne	1f6a0 <__assert_fail@plt+0xcd98>
   1f538:	cmp	r8, #0
   1f53c:	beq	1f4b0 <__assert_fail@plt+0xcba8>
   1f540:	eor	r2, r3, #128	; 0x80
   1f544:	cmp	r2, #63	; 0x3f
   1f548:	add	r2, r5, #1
   1f54c:	str	r2, [sp, #12]
   1f550:	bls	1f5e4 <__assert_fail@plt+0xccdc>
   1f554:	cmp	r4, #0
   1f558:	bne	1f82c <__assert_fail@plt+0xcf24>
   1f55c:	ldr	r3, [sp, #12]
   1f560:	mov	r5, #0
   1f564:	cmp	fp, r6
   1f568:	add	r9, r9, r3, lsl #2
   1f56c:	mov	r8, r5
   1f570:	mov	r7, #1
   1f574:	bne	1f50c <__assert_fail@plt+0xcc04>
   1f578:	ldr	r3, [sp, #20]
   1f57c:	cmp	r3, #0
   1f580:	bne	1f5b0 <__assert_fail@plt+0xcca8>
   1f584:	add	r0, r9, #1
   1f588:	bl	1214c <gcry_xmalloc@plt>
   1f58c:	ldr	r3, [sp, #28]
   1f590:	cmp	r3, #0
   1f594:	str	r0, [sp, #20]
   1f598:	bne	1f494 <__assert_fail@plt+0xcb8c>
   1f59c:	ldr	r3, [sp, #20]
   1f5a0:	ldr	r4, [sp, #20]
   1f5a4:	cmp	r3, #0
   1f5a8:	ldr	r9, [sp, #28]
   1f5ac:	beq	1f584 <__assert_fail@plt+0xcc7c>
   1f5b0:	ldr	r3, [sp, #36]	; 0x24
   1f5b4:	cmp	r3, #0
   1f5b8:	bne	1fa48 <__assert_fail@plt+0xd140>
   1f5bc:	ldr	r3, [sp, #36]	; 0x24
   1f5c0:	strb	r3, [r4]
   1f5c4:	ldr	r3, [pc, #1572]	; 1fbf0 <__assert_fail@plt+0xd2e8>
   1f5c8:	ldr	r2, [sp, #68]	; 0x44
   1f5cc:	ldr	r0, [sp, #20]
   1f5d0:	ldr	r3, [r3]
   1f5d4:	cmp	r2, r3
   1f5d8:	bne	1fbdc <__assert_fail@plt+0xd2d4>
   1f5dc:	add	sp, sp, #76	; 0x4c
   1f5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5e4:	add	r2, sp, #72	; 0x48
   1f5e8:	add	r2, r2, r5
   1f5ec:	and	r1, r3, #63	; 0x3f
   1f5f0:	strb	r3, [r2, #-12]
   1f5f4:	ldr	r3, [sp, #16]
   1f5f8:	subs	r8, r8, #1
   1f5fc:	orr	r3, r1, r3, lsl #6
   1f600:	str	r3, [sp, #16]
   1f604:	bne	1f820 <__assert_fail@plt+0xcf18>
   1f608:	ldr	r3, [pc, #1512]	; 1fbf8 <__assert_fail@plt+0xd2f0>
   1f60c:	ldr	r7, [r3, #12]
   1f610:	cmp	r7, #0
   1f614:	beq	1f8a4 <__assert_fail@plt+0xcf9c>
   1f618:	cmp	r4, #0
   1f61c:	bne	1f984 <__assert_fail@plt+0xd07c>
   1f620:	ldr	r3, [sp, #12]
   1f624:	mov	r7, #0
   1f628:	add	r9, r9, r3
   1f62c:	mov	r5, r7
   1f630:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f634:	and	r2, r3, #224	; 0xe0
   1f638:	cmp	r2, #192	; 0xc0
   1f63c:	beq	1f888 <__assert_fail@plt+0xcf80>
   1f640:	and	r2, r3, #240	; 0xf0
   1f644:	cmp	r2, #224	; 0xe0
   1f648:	beq	1f8cc <__assert_fail@plt+0xcfc4>
   1f64c:	and	r2, r3, #248	; 0xf8
   1f650:	cmp	r2, #240	; 0xf0
   1f654:	beq	1f968 <__assert_fail@plt+0xd060>
   1f658:	and	r2, r3, #252	; 0xfc
   1f65c:	cmp	r2, #248	; 0xf8
   1f660:	beq	1f9ac <__assert_fail@plt+0xd0a4>
   1f664:	and	r2, r3, #254	; 0xfe
   1f668:	cmp	r2, #252	; 0xfc
   1f66c:	beq	1fa14 <__assert_fail@plt+0xd10c>
   1f670:	cmp	r4, #0
   1f674:	beq	1f694 <__assert_fail@plt+0xcd8c>
   1f678:	str	r3, [sp]
   1f67c:	mov	r0, r4
   1f680:	mov	r3, sl
   1f684:	mvn	r2, #0
   1f688:	mov	r1, #1
   1f68c:	bl	12638 <__sprintf_chk@plt>
   1f690:	add	r4, r4, #4
   1f694:	add	r9, r9, #4
   1f698:	mov	r7, #1
   1f69c:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f6a0:	cmp	r4, #0
   1f6a4:	beq	1f6c4 <__assert_fail@plt+0xcdbc>
   1f6a8:	str	r3, [sp]
   1f6ac:	mov	r0, r4
   1f6b0:	mov	r3, sl
   1f6b4:	mvn	r2, #0
   1f6b8:	mov	r1, #1
   1f6bc:	bl	12638 <__sprintf_chk@plt>
   1f6c0:	add	r4, r4, #4
   1f6c4:	add	r9, r9, #4
   1f6c8:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f6cc:	cmp	r4, #0
   1f6d0:	beq	1f8e8 <__assert_fail@plt+0xcfe0>
   1f6d4:	mov	r7, r4
   1f6d8:	mov	r2, #92	; 0x5c
   1f6dc:	strb	r2, [r7], #1
   1f6e0:	cmp	r3, #13
   1f6e4:	ldrls	pc, [pc, r3, lsl #2]
   1f6e8:	b	1f7f0 <__assert_fail@plt+0xcee8>
   1f6ec:	andeq	pc, r1, ip, ror r7	; <UNPREDICTABLE>
   1f6f0:	strdeq	pc, [r1], -r0
   1f6f4:	strdeq	pc, [r1], -r0
   1f6f8:	strdeq	pc, [r1], -r0
   1f6fc:	strdeq	pc, [r1], -r0
   1f700:	strdeq	pc, [r1], -r0
   1f704:	strdeq	pc, [r1], -r0
   1f708:	strdeq	pc, [r1], -r0
   1f70c:	andeq	pc, r1, r4, asr #14
   1f710:	strdeq	pc, [r1], -r0
   1f714:	andeq	pc, r1, ip, asr r7	; <UNPREDICTABLE>
   1f718:	andeq	pc, r1, r8, lsr #14
   1f71c:			; <UNDEFINED> instruction: 0x0001f7bc
   1f720:	muleq	r1, ip, r7
   1f724:	mov	r7, #0
   1f728:	subs	r4, r7, #0
   1f72c:	add	r9, r9, #2
   1f730:	movne	r3, #118	; 0x76
   1f734:	strbne	r3, [r4], #1
   1f738:	movne	r7, #0
   1f73c:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f740:	mov	r7, #0
   1f744:	subs	r4, r7, #0
   1f748:	add	r9, r9, #2
   1f74c:	movne	r3, #98	; 0x62
   1f750:	strbne	r3, [r4], #1
   1f754:	movne	r7, #0
   1f758:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f75c:	cmp	r7, #0
   1f760:	add	r9, r9, #2
   1f764:	beq	1fb4c <__assert_fail@plt+0xd244>
   1f768:	mov	r3, #110	; 0x6e
   1f76c:	strb	r3, [r4, #1]
   1f770:	mov	r7, #0
   1f774:	add	r4, r4, #2
   1f778:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f77c:	cmp	r7, #0
   1f780:	add	r9, r9, #2
   1f784:	beq	1fb4c <__assert_fail@plt+0xd244>
   1f788:	mov	r3, #48	; 0x30
   1f78c:	strb	r3, [r4, #1]
   1f790:	mov	r7, #0
   1f794:	add	r4, r4, #2
   1f798:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f79c:	cmp	r7, #0
   1f7a0:	add	r9, r9, #2
   1f7a4:	beq	1fb4c <__assert_fail@plt+0xd244>
   1f7a8:	mov	r3, #114	; 0x72
   1f7ac:	strb	r3, [r4, #1]
   1f7b0:	mov	r7, #0
   1f7b4:	add	r4, r4, #2
   1f7b8:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f7bc:	cmp	r7, #0
   1f7c0:	add	r9, r9, #2
   1f7c4:	beq	1fb4c <__assert_fail@plt+0xd244>
   1f7c8:	mov	r3, #102	; 0x66
   1f7cc:	strb	r3, [r4, #1]
   1f7d0:	mov	r7, #0
   1f7d4:	add	r4, r4, #2
   1f7d8:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f7dc:	cmp	r4, #0
   1f7e0:	movne	r7, r4
   1f7e4:	movne	r3, #92	; 0x5c
   1f7e8:	strbne	r3, [r7], #1
   1f7ec:	beq	1fa38 <__assert_fail@plt+0xd130>
   1f7f0:	cmp	r7, #0
   1f7f4:	add	r9, r9, #4
   1f7f8:	beq	1fa40 <__assert_fail@plt+0xd138>
   1f7fc:	str	r3, [sp]
   1f800:	mov	r0, r7
   1f804:	ldr	r3, [pc, #1008]	; 1fbfc <__assert_fail@plt+0xd2f4>
   1f808:	mvn	r2, #0
   1f80c:	mov	r1, #1
   1f810:	add	r4, r7, #3
   1f814:	bl	12638 <__sprintf_chk@plt>
   1f818:	mov	r7, #0
   1f81c:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f820:	ldr	r5, [sp, #12]
   1f824:	mov	r7, #0
   1f828:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f82c:	cmp	r5, #0
   1f830:	beq	1fa30 <__assert_fail@plt+0xd128>
   1f834:	add	r5, r4, r5, lsl #2
   1f838:	add	r7, sp, #60	; 0x3c
   1f83c:	ldrb	r1, [r7], #1
   1f840:	mov	r0, r4
   1f844:	mov	r3, sl
   1f848:	str	r1, [sp]
   1f84c:	mvn	r2, #0
   1f850:	mov	r1, #1
   1f854:	add	r4, r4, #4
   1f858:	bl	12638 <__sprintf_chk@plt>
   1f85c:	cmp	r5, r4
   1f860:	bne	1f83c <__assert_fail@plt+0xcf34>
   1f864:	ldrb	r3, [r6]
   1f868:	str	r3, [sp]
   1f86c:	mvn	r2, #0
   1f870:	mov	r3, sl
   1f874:	mov	r1, #1
   1f878:	mov	r0, r5
   1f87c:	bl	12638 <__sprintf_chk@plt>
   1f880:	add	r4, r5, #4
   1f884:	b	1f55c <__assert_fail@plt+0xcc54>
   1f888:	mov	r5, #1
   1f88c:	strb	r3, [sp, #60]	; 0x3c
   1f890:	and	r3, r3, #31
   1f894:	mov	r7, r8
   1f898:	str	r3, [sp, #16]
   1f89c:	mov	r8, r5
   1f8a0:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f8a4:	ldr	r3, [sp, #36]	; 0x24
   1f8a8:	cmp	r3, #0
   1f8ac:	beq	1f938 <__assert_fail@plt+0xd030>
   1f8b0:	cmp	r4, #0
   1f8b4:	bne	1f9ec <__assert_fail@plt+0xd0e4>
   1f8b8:	ldr	r3, [sp, #12]
   1f8bc:	mov	r5, #0
   1f8c0:	add	r9, r9, r3
   1f8c4:	mov	r8, r5
   1f8c8:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f8cc:	strb	r3, [sp, #60]	; 0x3c
   1f8d0:	and	r3, r3, #15
   1f8d4:	mov	r7, r8
   1f8d8:	str	r3, [sp, #16]
   1f8dc:	mov	r5, #1
   1f8e0:	mov	r8, #2
   1f8e4:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f8e8:	cmp	r3, #13
   1f8ec:	ldrls	pc, [pc, r3, lsl #2]
   1f8f0:	b	1fa38 <__assert_fail@plt+0xd130>
   1f8f4:	andeq	pc, r1, ip, lsr #18
   1f8f8:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f8fc:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f900:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f904:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f908:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f90c:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f910:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f914:	andeq	pc, r1, r0, asr #14
   1f918:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   1f91c:	andeq	pc, r1, ip, lsr #18
   1f920:	andeq	pc, r1, r4, lsr #14
   1f924:	andeq	pc, r1, ip, lsr #18
   1f928:	andeq	pc, r1, ip, lsr #18
   1f92c:	add	r9, r9, #2
   1f930:	mov	r7, #0
   1f934:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f938:	ldr	r2, [sp, #16]
   1f93c:	sub	r3, r2, #128	; 0x80
   1f940:	cmp	r3, #127	; 0x7f
   1f944:	bhi	1f9c8 <__assert_fail@plt+0xd0c0>
   1f948:	cmp	r4, #0
   1f94c:	ldr	r5, [sp, #12]
   1f950:	add	r9, r9, #1
   1f954:	beq	1fb40 <__assert_fail@plt+0xd238>
   1f958:	ldr	r8, [sp, #36]	; 0x24
   1f95c:	strb	r2, [r4], #1
   1f960:	mov	r7, r8
   1f964:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f968:	strb	r3, [sp, #60]	; 0x3c
   1f96c:	and	r3, r3, #7
   1f970:	mov	r7, r8
   1f974:	str	r3, [sp, #16]
   1f978:	mov	r5, #1
   1f97c:	mov	r8, #3
   1f980:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f984:	add	r5, r4, r5
   1f988:	add	r2, sp, #60	; 0x3c
   1f98c:	sub	r3, r4, #1
   1f990:	ldrb	r1, [r2], #1
   1f994:	strb	r1, [r3, #1]!
   1f998:	cmp	r3, r5
   1f99c:	bne	1f990 <__assert_fail@plt+0xd088>
   1f9a0:	ldr	r3, [sp, #12]
   1f9a4:	add	r4, r4, r3
   1f9a8:	b	1f620 <__assert_fail@plt+0xcd18>
   1f9ac:	strb	r3, [sp, #60]	; 0x3c
   1f9b0:	and	r3, r3, #3
   1f9b4:	mov	r7, r8
   1f9b8:	str	r3, [sp, #16]
   1f9bc:	mov	r5, #1
   1f9c0:	mov	r8, #4
   1f9c4:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f9c8:	ldr	r3, [sp, #12]
   1f9cc:	cmp	r4, #0
   1f9d0:	lsl	r8, r3, #2
   1f9d4:	bne	1fb0c <__assert_fail@plt+0xd204>
   1f9d8:	mov	r7, #0
   1f9dc:	add	r9, r9, r8
   1f9e0:	mov	r5, r7
   1f9e4:	mov	r8, r7
   1f9e8:	b	1f504 <__assert_fail@plt+0xcbfc>
   1f9ec:	add	r5, r4, r5
   1f9f0:	add	r2, sp, #60	; 0x3c
   1f9f4:	sub	r3, r4, #1
   1f9f8:	ldrb	r1, [r2], #1
   1f9fc:	strb	r1, [r3, #1]!
   1fa00:	cmp	r5, r3
   1fa04:	bne	1f9f8 <__assert_fail@plt+0xd0f0>
   1fa08:	ldr	r3, [sp, #12]
   1fa0c:	add	r4, r4, r3
   1fa10:	b	1f8b8 <__assert_fail@plt+0xcfb0>
   1fa14:	strb	r3, [sp, #60]	; 0x3c
   1fa18:	and	r3, r3, #1
   1fa1c:	mov	r7, r8
   1fa20:	str	r3, [sp, #16]
   1fa24:	mov	r5, #1
   1fa28:	mov	r8, #5
   1fa2c:	b	1f504 <__assert_fail@plt+0xcbfc>
   1fa30:	mov	r5, r4
   1fa34:	b	1f868 <__assert_fail@plt+0xcf60>
   1fa38:	mov	r7, #0
   1fa3c:	add	r9, r9, #4
   1fa40:	mov	r4, r7
   1fa44:	b	1f504 <__assert_fail@plt+0xcbfc>
   1fa48:	ldr	r7, [pc, #432]	; 1fc00 <__assert_fail@plt+0xd2f8>
   1fa4c:	mov	r6, #0
   1fa50:	strb	r6, [r4]
   1fa54:	ldr	r0, [r7]
   1fa58:	ldr	r1, [pc, #420]	; 1fc04 <__assert_fail@plt+0xd2fc>
   1fa5c:	bl	124c4 <iconv_open@plt>
   1fa60:	cmn	r0, #1
   1fa64:	mov	r5, r0
   1fa68:	beq	1fba4 <__assert_fail@plt+0xd29c>
   1fa6c:	ldr	r3, [sp, #20]
   1fa70:	sub	r4, r4, r3
   1fa74:	add	r0, r4, #1
   1fa78:	tst	r0, #-268435456	; 0xf0000000
   1fa7c:	lsl	r0, r0, #4
   1fa80:	str	r4, [sp, #52]	; 0x34
   1fa84:	str	r0, [sp, #56]	; 0x38
   1fa88:	str	r3, [sp, #44]	; 0x2c
   1fa8c:	bne	1fbe0 <__assert_fail@plt+0xd2d8>
   1fa90:	bl	1214c <gcry_xmalloc@plt>
   1fa94:	add	r3, sp, #56	; 0x38
   1fa98:	str	r3, [sp]
   1fa9c:	add	r2, sp, #52	; 0x34
   1faa0:	add	r3, sp, #48	; 0x30
   1faa4:	add	r1, sp, #44	; 0x2c
   1faa8:	mov	r4, r0
   1faac:	mov	r0, r5
   1fab0:	str	r4, [sp, #48]	; 0x30
   1fab4:	bl	121a0 <iconv@plt>
   1fab8:	cmn	r0, #1
   1fabc:	bne	1fb54 <__assert_fail@plt+0xd24c>
   1fac0:	ldr	r6, [pc, #304]	; 1fbf8 <__assert_fail@plt+0xd2f0>
   1fac4:	ldr	r0, [r6, #20]
   1fac8:	cmp	r0, #0
   1facc:	beq	1fb6c <__assert_fail@plt+0xd264>
   1fad0:	mov	r3, #1
   1fad4:	ldr	r0, [sp, #20]
   1fad8:	str	r3, [r6, #20]
   1fadc:	bl	122a8 <gcry_free@plt>
   1fae0:	mov	r0, r4
   1fae4:	bl	122a8 <gcry_free@plt>
   1fae8:	ldr	r2, [sp, #24]
   1faec:	ldr	r1, [sp, #28]
   1faf0:	ldr	r0, [sp, #32]
   1faf4:	mov	r3, #0
   1faf8:	bl	1f44c <__assert_fail@plt+0xcb44>
   1fafc:	str	r0, [sp, #20]
   1fb00:	mov	r0, r5
   1fb04:	bl	12194 <iconv_close@plt>
   1fb08:	b	1f5c4 <__assert_fail@plt+0xccbc>
   1fb0c:	add	r7, r4, r8
   1fb10:	add	r5, sp, #60	; 0x3c
   1fb14:	ldrb	r1, [r5], #1
   1fb18:	mov	r0, r4
   1fb1c:	mov	r3, sl
   1fb20:	str	r1, [sp]
   1fb24:	mvn	r2, #0
   1fb28:	mov	r1, #1
   1fb2c:	add	r4, r4, #4
   1fb30:	bl	12638 <__sprintf_chk@plt>
   1fb34:	cmp	r4, r7
   1fb38:	bne	1fb14 <__assert_fail@plt+0xd20c>
   1fb3c:	b	1f9d8 <__assert_fail@plt+0xd0d0>
   1fb40:	mov	r7, r4
   1fb44:	mov	r8, r4
   1fb48:	b	1f504 <__assert_fail@plt+0xcbfc>
   1fb4c:	mov	r4, r7
   1fb50:	b	1f504 <__assert_fail@plt+0xcbfc>
   1fb54:	ldr	r3, [sp, #48]	; 0x30
   1fb58:	ldr	r0, [sp, #20]
   1fb5c:	str	r4, [sp, #20]
   1fb60:	strb	r6, [r3]
   1fb64:	bl	122a8 <gcry_free@plt>
   1fb68:	b	1fb00 <__assert_fail@plt+0xd1f8>
   1fb6c:	mov	r2, #5
   1fb70:	ldr	r1, [pc, #144]	; 1fc08 <__assert_fail@plt+0xd300>
   1fb74:	bl	122f0 <dcgettext@plt>
   1fb78:	mov	r8, r0
   1fb7c:	bl	12620 <__errno_location@plt>
   1fb80:	ldr	r7, [r7]
   1fb84:	ldr	r0, [r0]
   1fb88:	bl	124dc <strerror@plt>
   1fb8c:	mov	r2, r7
   1fb90:	ldr	r1, [pc, #108]	; 1fc04 <__assert_fail@plt+0xd2fc>
   1fb94:	mov	r3, r0
   1fb98:	mov	r0, r8
   1fb9c:	bl	17d34 <__assert_fail@plt+0x542c>
   1fba0:	b	1fad0 <__assert_fail@plt+0xd1c8>
   1fba4:	mov	r2, #1
   1fba8:	ldr	r1, [pc, #84]	; 1fc04 <__assert_fail@plt+0xd2fc>
   1fbac:	ldr	r0, [r7]
   1fbb0:	bl	1f348 <__assert_fail@plt+0xca40>
   1fbb4:	ldr	r0, [sp, #20]
   1fbb8:	bl	122a8 <gcry_free@plt>
   1fbbc:	ldr	r3, [pc, #52]	; 1fbf8 <__assert_fail@plt+0xd2f0>
   1fbc0:	ldr	r2, [sp, #24]
   1fbc4:	ldr	r1, [sp, #28]
   1fbc8:	ldr	r0, [sp, #32]
   1fbcc:	ldr	r3, [r3, #16]
   1fbd0:	bl	1f44c <__assert_fail@plt+0xcb44>
   1fbd4:	str	r0, [sp, #20]
   1fbd8:	b	1f5c4 <__assert_fail@plt+0xccbc>
   1fbdc:	bl	122fc <__stack_chk_fail@plt>
   1fbe0:	ldr	r2, [pc, #36]	; 1fc0c <__assert_fail@plt+0xd304>
   1fbe4:	ldr	r1, [pc, #36]	; 1fc10 <__assert_fail@plt+0xd308>
   1fbe8:	ldr	r0, [pc, #36]	; 1fc14 <__assert_fail@plt+0xd30c>
   1fbec:	bl	180f8 <__assert_fail@plt+0x57f0>
   1fbf0:	andeq	r4, r3, r8, lsr fp
   1fbf4:	andeq	r3, r2, ip, asr #22
   1fbf8:	andeq	r5, r3, r8, lsr r4
   1fbfc:	andeq	r3, r2, r4, asr fp
   1fc00:	andeq	r5, r3, r0, ror r1
   1fc04:	ldrdeq	r1, [r2], -r8
   1fc08:	andeq	r3, r2, r4, ror fp
   1fc0c:	strdeq	r3, [r2], -r4
   1fc10:	andeq	r0, r0, r3, lsl #5
   1fc14:	andeq	r3, r2, ip, asr fp
   1fc18:	push	{r4, r5, r6, lr}
   1fc1c:	subs	r5, r0, #0
   1fc20:	beq	1fd24 <__assert_fail@plt+0xd41c>
   1fc24:	mov	r0, r5
   1fc28:	bl	1259c <strlen@plt>
   1fc2c:	cmp	r0, #3
   1fc30:	bhi	1fc64 <__assert_fail@plt+0xd35c>
   1fc34:	ldrb	r3, [r5]
   1fc38:	mov	r4, r5
   1fc3c:	cmp	r3, #0
   1fc40:	bne	1fc9c <__assert_fail@plt+0xd394>
   1fc44:	ldr	r3, [pc, #392]	; 1fdd4 <__assert_fail@plt+0xd4cc>
   1fc48:	ldr	r2, [pc, #392]	; 1fdd8 <__assert_fail@plt+0xd4d0>
   1fc4c:	ldr	r1, [pc, #392]	; 1fddc <__assert_fail@plt+0xd4d4>
   1fc50:	mov	r0, #0
   1fc54:	str	r1, [r2]
   1fc58:	str	r0, [r3, #12]
   1fc5c:	str	r0, [r3, #16]
   1fc60:	pop	{r4, r5, r6, pc}
   1fc64:	mov	r2, #3
   1fc68:	ldr	r1, [pc, #368]	; 1fde0 <__assert_fail@plt+0xd4d8>
   1fc6c:	mov	r0, r5
   1fc70:	bl	1e9f8 <__assert_fail@plt+0xc0f0>
   1fc74:	cmp	r0, #0
   1fc78:	bne	1fc34 <__assert_fail@plt+0xd32c>
   1fc7c:	ldrb	r3, [r5, #3]
   1fc80:	cmp	r3, #95	; 0x5f
   1fc84:	cmpne	r3, #45	; 0x2d
   1fc88:	addne	r4, r5, #3
   1fc8c:	ldrbeq	r3, [r5, #4]
   1fc90:	addeq	r4, r5, #4
   1fc94:	cmp	r3, #0
   1fc98:	beq	1fc44 <__assert_fail@plt+0xd33c>
   1fc9c:	ldr	r1, [pc, #320]	; 1fde4 <__assert_fail@plt+0xd4dc>
   1fca0:	mov	r0, r4
   1fca4:	bl	1e8b8 <__assert_fail@plt+0xbfb0>
   1fca8:	cmp	r0, #0
   1fcac:	beq	1fc44 <__assert_fail@plt+0xd33c>
   1fcb0:	ldr	r1, [pc, #304]	; 1fde8 <__assert_fail@plt+0xd4e0>
   1fcb4:	mov	r0, r4
   1fcb8:	bl	1e8b8 <__assert_fail@plt+0xbfb0>
   1fcbc:	cmp	r0, #0
   1fcc0:	beq	1fc44 <__assert_fail@plt+0xd33c>
   1fcc4:	ldr	r1, [pc, #288]	; 1fdec <__assert_fail@plt+0xd4e4>
   1fcc8:	mov	r0, r4
   1fccc:	bl	1e8b8 <__assert_fail@plt+0xbfb0>
   1fcd0:	cmp	r0, #0
   1fcd4:	beq	1fc44 <__assert_fail@plt+0xd33c>
   1fcd8:	ldr	r1, [pc, #272]	; 1fdf0 <__assert_fail@plt+0xd4e8>
   1fcdc:	mov	r0, r4
   1fce0:	bl	1e8b8 <__assert_fail@plt+0xbfb0>
   1fce4:	cmp	r0, #0
   1fce8:	beq	1fc44 <__assert_fail@plt+0xd33c>
   1fcec:	ldr	r1, [pc, #256]	; 1fdf4 <__assert_fail@plt+0xd4ec>
   1fcf0:	mov	r0, r4
   1fcf4:	bl	1e8b8 <__assert_fail@plt+0xbfb0>
   1fcf8:	ldr	r6, [pc, #248]	; 1fdf8 <__assert_fail@plt+0xd4f0>
   1fcfc:	cmp	r0, #0
   1fd00:	bne	1fd34 <__assert_fail@plt+0xd42c>
   1fd04:	ldr	r3, [pc, #200]	; 1fdd4 <__assert_fail@plt+0xd4cc>
   1fd08:	ldr	r1, [pc, #200]	; 1fdd8 <__assert_fail@plt+0xd4d0>
   1fd0c:	mov	r2, #1
   1fd10:	mov	r0, #0
   1fd14:	str	r6, [r1]
   1fd18:	str	r2, [r3, #12]
   1fd1c:	str	r0, [r3, #16]
   1fd20:	pop	{r4, r5, r6, pc}
   1fd24:	mov	r0, #14
   1fd28:	bl	12770 <nl_langinfo@plt>
   1fd2c:	mov	r5, r0
   1fd30:	b	1fc24 <__assert_fail@plt+0xd31c>
   1fd34:	mov	r0, r4
   1fd38:	mov	r1, r6
   1fd3c:	bl	1e8b8 <__assert_fail@plt+0xbfb0>
   1fd40:	cmp	r0, #0
   1fd44:	beq	1fd04 <__assert_fail@plt+0xd3fc>
   1fd48:	mov	r1, r6
   1fd4c:	mov	r0, r5
   1fd50:	bl	124c4 <iconv_open@plt>
   1fd54:	cmn	r0, #1
   1fd58:	mov	r4, r0
   1fd5c:	beq	1fda4 <__assert_fail@plt+0xd49c>
   1fd60:	bl	12194 <iconv_close@plt>
   1fd64:	mov	r1, r5
   1fd68:	mov	r0, r6
   1fd6c:	bl	124c4 <iconv_open@plt>
   1fd70:	cmn	r0, #1
   1fd74:	mov	r4, r0
   1fd78:	beq	1fdbc <__assert_fail@plt+0xd4b4>
   1fd7c:	bl	12194 <iconv_close@plt>
   1fd80:	ldr	r3, [pc, #76]	; 1fdd4 <__assert_fail@plt+0xd4cc>
   1fd84:	ldr	ip, [pc, #76]	; 1fdd8 <__assert_fail@plt+0xd4d0>
   1fd88:	mov	r2, #0
   1fd8c:	mov	r1, #1
   1fd90:	mov	r0, r2
   1fd94:	str	r5, [ip]
   1fd98:	str	r1, [r3, #16]
   1fd9c:	str	r2, [r3, #12]
   1fda0:	pop	{r4, r5, r6, pc}
   1fda4:	mov	r0, r5
   1fda8:	mov	r1, r6
   1fdac:	mov	r2, #0
   1fdb0:	bl	1f348 <__assert_fail@plt+0xca40>
   1fdb4:	mov	r0, r4
   1fdb8:	pop	{r4, r5, r6, pc}
   1fdbc:	mov	r0, r6
   1fdc0:	mov	r1, r5
   1fdc4:	mov	r2, #0
   1fdc8:	bl	1f348 <__assert_fail@plt+0xca40>
   1fdcc:	mov	r0, r4
   1fdd0:	pop	{r4, r5, r6, pc}
   1fdd4:	andeq	r5, r3, r8, lsr r4
   1fdd8:	andeq	r5, r3, r0, ror r1
   1fddc:	andeq	r3, r2, r4, lsr #23
   1fde0:	andeq	r3, r2, r0, lsr #23
   1fde4:	andeq	r3, r2, r8, lsr #23
   1fde8:			; <UNDEFINED> instruction: 0x00023bb0
   1fdec:			; <UNDEFINED> instruction: 0x00023bb4
   1fdf0:			; <UNDEFINED> instruction: 0x00023bbc
   1fdf4:	andeq	r3, r2, ip, asr #23
   1fdf8:	ldrdeq	r1, [r2], -r8
   1fdfc:	ldr	r3, [pc, #4]	; 1fe08 <__assert_fail@plt+0xd500>
   1fe00:	ldr	r0, [r3]
   1fe04:	bx	lr
   1fe08:	andeq	r5, r3, r0, ror r1
   1fe0c:	ldr	r3, [pc, #4]	; 1fe18 <__assert_fail@plt+0xd510>
   1fe10:	ldr	r0, [r3, #12]
   1fe14:	bx	lr
   1fe18:	andeq	r5, r3, r8, lsr r4
   1fe1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fe20:	sub	sp, sp, #32
   1fe24:	ldr	r8, [pc, #520]	; 20034 <__assert_fail@plt+0xd72c>
   1fe28:	ldr	r5, [pc, #520]	; 20038 <__assert_fail@plt+0xd730>
   1fe2c:	ldr	r7, [r8, #12]
   1fe30:	ldr	r3, [r5]
   1fe34:	cmp	r7, #0
   1fe38:	str	r3, [sp, #28]
   1fe3c:	bne	1ffa0 <__assert_fail@plt+0xd698>
   1fe40:	mov	r4, r0
   1fe44:	ldr	r0, [r8, #16]
   1fe48:	cmp	r0, #0
   1fe4c:	bne	1fef4 <__assert_fail@plt+0xd5ec>
   1fe50:	ldrb	r3, [r4]
   1fe54:	cmp	r3, #0
   1fe58:	beq	20028 <__assert_fail@plt+0xd720>
   1fe5c:	mov	r2, r4
   1fe60:	tst	r3, #128	; 0x80
   1fe64:	ldrb	r3, [r2, #1]!
   1fe68:	addeq	r0, r0, #1
   1fe6c:	addne	r0, r0, #2
   1fe70:	cmp	r3, #0
   1fe74:	bne	1fe60 <__assert_fail@plt+0xd558>
   1fe78:	add	r0, r0, #1
   1fe7c:	bl	1214c <gcry_xmalloc@plt>
   1fe80:	ldrb	r3, [r4]
   1fe84:	cmp	r3, #0
   1fe88:	mov	r6, r0
   1fe8c:	mov	r2, r0
   1fe90:	beq	1fed0 <__assert_fail@plt+0xd5c8>
   1fe94:	mvn	lr, #63	; 0x3f
   1fe98:	mvn	ip, #127	; 0x7f
   1fe9c:	sxtb	r1, r3
   1fea0:	cmp	r1, #0
   1fea4:	movlt	r0, r2
   1fea8:	orrlt	r3, lr, r3, lsr #6
   1feac:	strblt	r3, [r0], #2
   1feb0:	strbge	r3, [r2], #1
   1feb4:	ldrb	r3, [r4, #1]!
   1feb8:	andlt	r1, r1, #63	; 0x3f
   1febc:	orrlt	r1, ip, r1
   1fec0:	strblt	r1, [r2, #1]
   1fec4:	movlt	r2, r0
   1fec8:	cmp	r3, #0
   1fecc:	bne	1fe9c <__assert_fail@plt+0xd594>
   1fed0:	mov	r3, #0
   1fed4:	strb	r3, [r2]
   1fed8:	ldr	r2, [sp, #28]
   1fedc:	ldr	r3, [r5]
   1fee0:	mov	r0, r6
   1fee4:	cmp	r2, r3
   1fee8:	bne	20030 <__assert_fail@plt+0xd728>
   1feec:	add	sp, sp, #32
   1fef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fef4:	ldr	sl, [pc, #320]	; 2003c <__assert_fail@plt+0xd734>
   1fef8:	ldr	r0, [pc, #320]	; 20040 <__assert_fail@plt+0xd738>
   1fefc:	ldr	r1, [sl]
   1ff00:	bl	124c4 <iconv_open@plt>
   1ff04:	cmn	r0, #1
   1ff08:	mov	r9, r0
   1ff0c:	beq	20008 <__assert_fail@plt+0xd700>
   1ff10:	ldrb	r3, [r4]
   1ff14:	cmp	r3, #0
   1ff18:	moveq	r7, r3
   1ff1c:	moveq	r0, #1
   1ff20:	beq	1ff44 <__assert_fail@plt+0xd63c>
   1ff24:	mov	r2, r4
   1ff28:	tst	r3, #128	; 0x80
   1ff2c:	ldrb	r3, [r2, #1]!
   1ff30:	addeq	r7, r7, #1
   1ff34:	addne	r7, r7, #6
   1ff38:	cmp	r3, #0
   1ff3c:	bne	1ff28 <__assert_fail@plt+0xd620>
   1ff40:	add	r0, r7, #1
   1ff44:	bl	1214c <gcry_xmalloc@plt>
   1ff48:	str	r4, [sp, #12]
   1ff4c:	mov	r6, r0
   1ff50:	mov	r0, r4
   1ff54:	bl	1259c <strlen@plt>
   1ff58:	add	r3, sp, #24
   1ff5c:	str	r3, [sp]
   1ff60:	add	r2, sp, #20
   1ff64:	add	r3, sp, #16
   1ff68:	add	r1, sp, #12
   1ff6c:	str	r6, [sp, #16]
   1ff70:	str	r7, [sp, #24]
   1ff74:	str	r0, [sp, #20]
   1ff78:	mov	r0, r9
   1ff7c:	bl	121a0 <iconv@plt>
   1ff80:	cmn	r0, #1
   1ff84:	beq	1ffac <__assert_fail@plt+0xd6a4>
   1ff88:	ldr	r3, [sp, #16]
   1ff8c:	mov	r2, #0
   1ff90:	strb	r2, [r3]
   1ff94:	mov	r0, r9
   1ff98:	bl	12194 <iconv_close@plt>
   1ff9c:	b	1fed8 <__assert_fail@plt+0xd5d0>
   1ffa0:	bl	126b0 <gcry_xstrdup@plt>
   1ffa4:	mov	r6, r0
   1ffa8:	b	1fed8 <__assert_fail@plt+0xd5d0>
   1ffac:	ldr	r0, [r8, #24]
   1ffb0:	cmp	r0, #0
   1ffb4:	beq	1ffd0 <__assert_fail@plt+0xd6c8>
   1ffb8:	mov	r3, #1
   1ffbc:	mov	r1, r4
   1ffc0:	mov	r0, r6
   1ffc4:	str	r3, [r8, #24]
   1ffc8:	bl	12404 <strcpy@plt>
   1ffcc:	b	1ff94 <__assert_fail@plt+0xd68c>
   1ffd0:	mov	r2, #5
   1ffd4:	ldr	r1, [pc, #104]	; 20044 <__assert_fail@plt+0xd73c>
   1ffd8:	bl	122f0 <dcgettext@plt>
   1ffdc:	mov	r7, r0
   1ffe0:	bl	12620 <__errno_location@plt>
   1ffe4:	ldr	sl, [sl]
   1ffe8:	ldr	r0, [r0]
   1ffec:	bl	124dc <strerror@plt>
   1fff0:	mov	r1, sl
   1fff4:	ldr	r2, [pc, #68]	; 20040 <__assert_fail@plt+0xd738>
   1fff8:	mov	r3, r0
   1fffc:	mov	r0, r7
   20000:	bl	17d34 <__assert_fail@plt+0x542c>
   20004:	b	1ffb8 <__assert_fail@plt+0xd6b0>
   20008:	ldr	r1, [sl]
   2000c:	mov	r2, #1
   20010:	ldr	r0, [pc, #40]	; 20040 <__assert_fail@plt+0xd738>
   20014:	bl	1f348 <__assert_fail@plt+0xca40>
   20018:	mov	r0, r4
   2001c:	bl	1fe1c <__assert_fail@plt+0xd514>
   20020:	mov	r6, r0
   20024:	b	1fed8 <__assert_fail@plt+0xd5d0>
   20028:	mov	r0, #1
   2002c:	b	1fe7c <__assert_fail@plt+0xd574>
   20030:	bl	122fc <__stack_chk_fail@plt>
   20034:	andeq	r5, r3, r8, lsr r4
   20038:	andeq	r4, r3, r8, lsr fp
   2003c:	andeq	r5, r3, r0, ror r1
   20040:	ldrdeq	r1, [r2], -r8
   20044:	andeq	r3, r2, r4, ror fp
   20048:	ldr	r3, [pc, #4]	; 20054 <__assert_fail@plt+0xd74c>
   2004c:	ldr	r3, [r3, #16]
   20050:	b	1f44c <__assert_fail@plt+0xcb44>
   20054:	andeq	r5, r3, r8, lsr r4
   20058:	b	124c4 <iconv_open@plt>
   2005c:	b	121a0 <iconv@plt>
   20060:	b	12194 <iconv_close@plt>
   20064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20068:	sub	sp, sp, #540	; 0x21c
   2006c:	ldr	fp, [pc, #1084]	; 204b0 <__assert_fail@plt+0xdba8>
   20070:	mov	sl, r1
   20074:	mov	r4, r0
   20078:	ldr	r3, [fp]
   2007c:	ldr	r9, [pc, #1072]	; 204b4 <__assert_fail@plt+0xdbac>
   20080:	str	r3, [sp, #532]	; 0x214
   20084:	bl	12554 <getpid@plt>
   20088:	ldr	r2, [pc, #1064]	; 204b8 <__assert_fail@plt+0xdbb0>
   2008c:	mov	r1, #16
   20090:	mov	r3, r0
   20094:	add	r0, sp, #516	; 0x204
   20098:	bl	126f8 <gpgrt_snprintf@plt>
   2009c:	add	r0, sp, #124	; 0x7c
   200a0:	bl	122e4 <uname@plt>
   200a4:	mov	r1, #47	; 0x2f
   200a8:	cmp	r0, #0
   200ac:	mov	r0, sl
   200b0:	addeq	r6, sp, #189	; 0xbd
   200b4:	ldrne	r6, [pc, #1024]	; 204bc <__assert_fail@plt+0xdbb4>
   200b8:	bl	12764 <strrchr@plt>
   200bc:	cmp	r0, #0
   200c0:	subne	r8, r0, sl
   200c4:	ldreq	r3, [pc, #1012]	; 204c0 <__assert_fail@plt+0xdbb8>
   200c8:	moveq	r5, #1
   200cc:	streq	r3, [sp, #12]
   200d0:	ldr	r3, [r9]
   200d4:	mov	r0, r6
   200d8:	str	r3, [r4]
   200dc:	movne	r5, r8
   200e0:	moveq	r8, r5
   200e4:	strne	sl, [sp, #12]
   200e8:	str	r4, [r9]
   200ec:	bl	1259c <strlen@plt>
   200f0:	add	r5, r0, r5
   200f4:	add	r0, r5, #48	; 0x30
   200f8:	bl	1217c <gcry_malloc@plt>
   200fc:	add	r5, r5, #47	; 0x2f
   20100:	cmp	r0, #0
   20104:	mov	r7, r0
   20108:	str	r0, [r4, #16]
   2010c:	beq	20340 <__assert_fail@plt+0xda38>
   20110:	mov	r0, r6
   20114:	bl	1259c <strlen@plt>
   20118:	ldr	r3, [sp, #12]
   2011c:	mov	r1, r5
   20120:	str	r3, [sp]
   20124:	ldr	r2, [pc, #920]	; 204c4 <__assert_fail@plt+0xdbbc>
   20128:	mov	r3, r8
   2012c:	str	r4, [sp, #4]
   20130:	str	r0, [r4, #24]
   20134:	mov	r0, r7
   20138:	bl	126f8 <gpgrt_snprintf@plt>
   2013c:	ldr	r7, [r4, #16]
   20140:	mov	r0, r7
   20144:	bl	1259c <strlen@plt>
   20148:	str	r0, [r4, #20]
   2014c:	add	r7, r7, r0
   20150:	sub	r5, r5, r0
   20154:	bl	12554 <getpid@plt>
   20158:	mov	r1, r5
   2015c:	mov	r3, r6
   20160:	ldr	r2, [pc, #864]	; 204c8 <__assert_fail@plt+0xdbc0>
   20164:	str	r0, [sp]
   20168:	mov	r0, r7
   2016c:	bl	126f8 <gpgrt_snprintf@plt>
   20170:	b	20184 <__assert_fail@plt+0xd87c>
   20174:	bl	12620 <__errno_location@plt>
   20178:	ldr	r5, [r0]
   2017c:	cmp	r5, #4
   20180:	bne	202fc <__assert_fail@plt+0xd9f4>
   20184:	mov	r0, #0
   20188:	bl	12794 <gpg_err_set_errno@plt>
   2018c:	mov	r2, #420	; 0x1a4
   20190:	mov	r1, #193	; 0xc1
   20194:	ldr	r0, [r4, #16]
   20198:	bl	12470 <open64@plt>
   2019c:	cmn	r0, #1
   201a0:	mov	r5, r0
   201a4:	beq	20174 <__assert_fail@plt+0xd86c>
   201a8:	add	r1, sp, #516	; 0x204
   201ac:	mov	r2, #11
   201b0:	bl	12698 <write@plt>
   201b4:	cmp	r0, #11
   201b8:	bne	20288 <__assert_fail@plt+0xd980>
   201bc:	mov	r0, r6
   201c0:	bl	1259c <strlen@plt>
   201c4:	mov	r1, r6
   201c8:	mov	r2, r0
   201cc:	mov	r0, r5
   201d0:	bl	12698 <write@plt>
   201d4:	mov	r7, r0
   201d8:	mov	r0, r6
   201dc:	bl	1259c <strlen@plt>
   201e0:	cmp	r7, r0
   201e4:	bne	20288 <__assert_fail@plt+0xd980>
   201e8:	mov	r2, #1
   201ec:	ldr	r1, [pc, #728]	; 204cc <__assert_fail@plt+0xdbc4>
   201f0:	mov	r0, r5
   201f4:	bl	12698 <write@plt>
   201f8:	cmp	r0, #1
   201fc:	bne	20288 <__assert_fail@plt+0xd980>
   20200:	mov	r0, r5
   20204:	bl	128cc <close@plt>
   20208:	cmp	r0, #0
   2020c:	bne	20440 <__assert_fail@plt+0xdb38>
   20210:	ldr	r5, [r4, #16]
   20214:	add	r2, sp, #16
   20218:	mov	r1, r5
   2021c:	mov	r0, #3
   20220:	bl	1286c <__xstat64@plt>
   20224:	cmp	r0, #0
   20228:	beq	20354 <__assert_fail@plt+0xda4c>
   2022c:	bl	12620 <__errno_location@plt>
   20230:	ldr	r7, [r4, #16]
   20234:	ldr	r6, [r0]
   20238:	mov	r5, r0
   2023c:	mov	r0, r6
   20240:	bl	124dc <strerror@plt>
   20244:	mov	r1, r7
   20248:	mov	r2, r0
   2024c:	ldr	r0, [pc, #636]	; 204d0 <__assert_fail@plt+0xdbc8>
   20250:	bl	17d98 <__assert_fail@plt+0x5490>
   20254:	mov	r0, r6
   20258:	bl	12794 <gpg_err_set_errno@plt>
   2025c:	ldr	r6, [r5]
   20260:	ldr	r3, [r4]
   20264:	mov	r0, r6
   20268:	ldr	r5, [r4, #16]
   2026c:	str	r3, [r9]
   20270:	bl	124dc <strerror@plt>
   20274:	mov	r1, r5
   20278:	mov	r2, r0
   2027c:	ldr	r0, [pc, #592]	; 204d4 <__assert_fail@plt+0xdbcc>
   20280:	bl	17d98 <__assert_fail@plt+0x5490>
   20284:	b	202bc <__assert_fail@plt+0xd9b4>
   20288:	bl	12620 <__errno_location@plt>
   2028c:	ldr	r6, [r0]
   20290:	ldr	r3, [r4]
   20294:	mov	r0, r6
   20298:	ldr	r7, [r4, #16]
   2029c:	str	r3, [r9]
   202a0:	bl	124dc <strerror@plt>
   202a4:	mov	r1, r7
   202a8:	mov	r2, r0
   202ac:	ldr	r0, [pc, #544]	; 204d4 <__assert_fail@plt+0xdbcc>
   202b0:	bl	17d98 <__assert_fail@plt+0x5490>
   202b4:	mov	r0, r5
   202b8:	bl	128cc <close@plt>
   202bc:	ldr	r0, [r4, #16]
   202c0:	bl	12320 <unlink@plt>
   202c4:	ldr	r0, [r4, #16]
   202c8:	bl	122a8 <gcry_free@plt>
   202cc:	mov	r0, r4
   202d0:	bl	122a8 <gcry_free@plt>
   202d4:	mov	r0, r6
   202d8:	bl	12794 <gpg_err_set_errno@plt>
   202dc:	mov	r7, #0
   202e0:	ldr	r2, [sp, #532]	; 0x214
   202e4:	ldr	r3, [fp]
   202e8:	mov	r0, r7
   202ec:	cmp	r2, r3
   202f0:	bne	204ac <__assert_fail@plt+0xdba4>
   202f4:	add	sp, sp, #540	; 0x21c
   202f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202fc:	ldr	r3, [r4]
   20300:	mov	r0, r5
   20304:	str	r3, [r9]
   20308:	ldr	r6, [r4, #16]
   2030c:	bl	124dc <strerror@plt>
   20310:	mov	r1, r6
   20314:	mov	r7, #0
   20318:	mov	r2, r0
   2031c:	ldr	r0, [pc, #436]	; 204d8 <__assert_fail@plt+0xdbd0>
   20320:	bl	17d98 <__assert_fail@plt+0x5490>
   20324:	ldr	r0, [r4, #16]
   20328:	bl	122a8 <gcry_free@plt>
   2032c:	mov	r0, r4
   20330:	bl	122a8 <gcry_free@plt>
   20334:	mov	r0, r5
   20338:	bl	12794 <gpg_err_set_errno@plt>
   2033c:	b	202e0 <__assert_fail@plt+0xd9d8>
   20340:	ldr	r3, [r4]
   20344:	mov	r0, r4
   20348:	str	r3, [r9]
   2034c:	bl	122a8 <gcry_free@plt>
   20350:	b	202e0 <__assert_fail@plt+0xd9d8>
   20354:	mov	r0, r5
   20358:	bl	1259c <strlen@plt>
   2035c:	ldr	r7, [sp, #36]	; 0x24
   20360:	add	r0, r0, #2
   20364:	bl	1217c <gcry_malloc@plt>
   20368:	subs	r6, r0, #0
   2036c:	beq	2022c <__assert_fail@plt+0xd924>
   20370:	mov	r1, r5
   20374:	bl	122d8 <stpcpy@plt>
   20378:	ldr	r3, [pc, #348]	; 204dc <__assert_fail@plt+0xdbd4>
   2037c:	mov	r1, r6
   20380:	ldrh	r3, [r3]
   20384:	strh	r3, [r0]
   20388:	mov	r0, r5
   2038c:	bl	1268c <link@plt>
   20390:	add	r2, sp, #16
   20394:	mov	r1, r5
   20398:	mov	r0, #3
   2039c:	bl	1286c <__xstat64@plt>
   203a0:	cmp	r0, #0
   203a4:	bne	20454 <__assert_fail@plt+0xdb4c>
   203a8:	ldr	r3, [sp, #36]	; 0x24
   203ac:	add	r7, r7, #1
   203b0:	cmp	r3, r7
   203b4:	mov	r0, r6
   203b8:	beq	20468 <__assert_fail@plt+0xdb60>
   203bc:	bl	12320 <unlink@plt>
   203c0:	mov	r0, r6
   203c4:	bl	122a8 <gcry_free@plt>
   203c8:	ldr	r0, [r4, #16]
   203cc:	bl	12320 <unlink@plt>
   203d0:	ldrb	r3, [r4, #8]
   203d4:	orr	r3, r3, #4
   203d8:	strb	r3, [r4, #8]
   203dc:	mov	r0, sl
   203e0:	bl	1259c <strlen@plt>
   203e4:	add	r0, r0, #6
   203e8:	bl	1217c <gcry_malloc@plt>
   203ec:	cmp	r0, #0
   203f0:	mov	r7, r0
   203f4:	str	r0, [r4, #4]
   203f8:	beq	20478 <__assert_fail@plt+0xdb70>
   203fc:	mov	r1, sl
   20400:	bl	122d8 <stpcpy@plt>
   20404:	ldr	r2, [pc, #212]	; 204e0 <__assert_fail@plt+0xdbd8>
   20408:	ldrb	r1, [r4, #8]
   2040c:	tst	r1, #4
   20410:	moveq	r7, r4
   20414:	mov	r3, r0
   20418:	ldr	r0, [r2]
   2041c:	ldrh	r2, [r2, #4]
   20420:	str	r0, [r3]
   20424:	strh	r2, [r3, #4]
   20428:	beq	202e0 <__assert_fail@plt+0xd9d8>
   2042c:	mov	r1, r7
   20430:	ldr	r0, [pc, #172]	; 204e4 <__assert_fail@plt+0xdbdc>
   20434:	mov	r7, r4
   20438:	bl	17ee4 <__assert_fail@plt+0x55dc>
   2043c:	b	202e0 <__assert_fail@plt+0xd9d8>
   20440:	bl	12620 <__errno_location@plt>
   20444:	ldr	r6, [r0]
   20448:	cmp	r6, #4
   2044c:	bne	20290 <__assert_fail@plt+0xd988>
   20450:	b	20260 <__assert_fail@plt+0xd958>
   20454:	mov	r0, r6
   20458:	bl	12320 <unlink@plt>
   2045c:	mov	r0, r6
   20460:	bl	122a8 <gcry_free@plt>
   20464:	b	2022c <__assert_fail@plt+0xd924>
   20468:	bl	12320 <unlink@plt>
   2046c:	mov	r0, r6
   20470:	bl	122a8 <gcry_free@plt>
   20474:	b	203dc <__assert_fail@plt+0xdad4>
   20478:	bl	12620 <__errno_location@plt>
   2047c:	ldr	r3, [r4]
   20480:	str	r3, [r9]
   20484:	ldr	r5, [r0]
   20488:	ldr	r0, [r4, #16]
   2048c:	bl	12320 <unlink@plt>
   20490:	ldr	r0, [r4, #16]
   20494:	bl	122a8 <gcry_free@plt>
   20498:	mov	r0, r4
   2049c:	bl	122a8 <gcry_free@plt>
   204a0:	mov	r0, r5
   204a4:	bl	12794 <gpg_err_set_errno@plt>
   204a8:	b	202e0 <__assert_fail@plt+0xd9d8>
   204ac:	bl	122fc <__stack_chk_fail@plt>
   204b0:	andeq	r4, r3, r8, lsr fp
   204b4:	andeq	r5, r3, r4, asr r4
   204b8:	ldrdeq	r3, [r2], -ip
   204bc:	ldrdeq	r3, [r2], -r4
   204c0:	andeq	r2, r2, r0, lsl #10
   204c4:	andeq	r3, r2, r4, ror #23
   204c8:	strdeq	r3, [r2], -r4
   204cc:	andeq	r1, r2, r0, asr #22
   204d0:	strdeq	r3, [r2], -ip
   204d4:	andeq	r2, r2, r8, asr #14
   204d8:	andeq	r3, r2, r4, ror #24
   204dc:	andeq	r3, r2, r8, asr fp
   204e0:	andeq	r3, r2, r8, lsr ip
   204e4:	andeq	r3, r2, r0, asr #24
   204e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204ec:	mov	r4, #0
   204f0:	ldr	r9, [pc, #692]	; 207ac <__assert_fail@plt+0xdea4>
   204f4:	sub	sp, sp, #108	; 0x6c
   204f8:	mov	r8, r0
   204fc:	ldr	r3, [r9]
   20500:	str	r4, [r1]
   20504:	ldr	r5, [r0, #24]
   20508:	str	r1, [sp, #8]
   2050c:	add	r5, r5, #12
   20510:	cmp	r5, #81	; 0x51
   20514:	str	r3, [sp, #100]	; 0x64
   20518:	bls	20558 <__assert_fail@plt+0xdc50>
   2051c:	mov	r0, r5
   20520:	bl	1217c <gcry_malloc@plt>
   20524:	cmp	r0, r4
   20528:	mov	r7, r0
   2052c:	mov	sl, r0
   20530:	beq	206dc <__assert_fail@plt+0xddd4>
   20534:	mov	r1, r4
   20538:	ldr	r0, [r8, #4]
   2053c:	bl	12470 <open64@plt>
   20540:	cmn	r0, #1
   20544:	mov	r6, r0
   20548:	beq	2076c <__assert_fail@plt+0xde64>
   2054c:	add	r3, sp, #16
   20550:	str	r3, [sp, #4]
   20554:	b	20578 <__assert_fail@plt+0xdc70>
   20558:	mov	r1, r4
   2055c:	ldr	r0, [r0, #4]
   20560:	bl	12470 <open64@plt>
   20564:	cmn	r0, #1
   20568:	mov	r6, r0
   2056c:	beq	206e4 <__assert_fail@plt+0xdddc>
   20570:	add	r7, sp, #16
   20574:	str	r7, [sp, #4]
   20578:	mov	fp, r7
   2057c:	mov	r4, #0
   20580:	b	205b0 <__assert_fail@plt+0xdca8>
   20584:	cmp	r0, #0
   20588:	blt	207a0 <__assert_fail@plt+0xde98>
   2058c:	add	fp, fp, r0
   20590:	add	r4, r4, r0
   20594:	subs	r2, r5, r4
   20598:	movne	r2, #1
   2059c:	cmp	sl, #0
   205a0:	movne	r1, r2
   205a4:	moveq	r1, #0
   205a8:	cmp	r1, #0
   205ac:	beq	2063c <__assert_fail@plt+0xdd34>
   205b0:	sub	r2, r5, r4
   205b4:	mov	r1, fp
   205b8:	mov	r0, r6
   205bc:	bl	121f4 <read@plt>
   205c0:	cmn	r0, #1
   205c4:	mov	sl, r0
   205c8:	bne	20584 <__assert_fail@plt+0xdc7c>
   205cc:	bl	12620 <__errno_location@plt>
   205d0:	ldr	r2, [r0]
   205d4:	cmp	r2, #4
   205d8:	beq	20594 <__assert_fail@plt+0xdc8c>
   205dc:	ldr	r1, [r8, #4]
   205e0:	ldr	r0, [pc, #456]	; 207b0 <__assert_fail@plt+0xdea8>
   205e4:	str	r2, [sp, #8]
   205e8:	bl	17d34 <__assert_fail@plt+0x542c>
   205ec:	mov	r0, r6
   205f0:	bl	128cc <close@plt>
   205f4:	ldr	r3, [sp, #4]
   205f8:	ldr	r2, [sp, #8]
   205fc:	cmp	r7, r3
   20600:	beq	20614 <__assert_fail@plt+0xdd0c>
   20604:	mov	r0, r7
   20608:	str	r2, [sp, #4]
   2060c:	bl	122a8 <gcry_free@plt>
   20610:	ldr	r2, [sp, #4]
   20614:	mov	r0, r2
   20618:	bl	12794 <gpg_err_set_errno@plt>
   2061c:	mvn	r6, #0
   20620:	ldr	r2, [sp, #100]	; 0x64
   20624:	ldr	r3, [r9]
   20628:	mov	r0, r6
   2062c:	cmp	r2, r3
   20630:	bne	2079c <__assert_fail@plt+0xde94>
   20634:	add	sp, sp, #108	; 0x6c
   20638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2063c:	mov	r0, r6
   20640:	str	r1, [sp, #12]
   20644:	bl	128cc <close@plt>
   20648:	cmp	r4, #10
   2064c:	ldr	r1, [sp, #12]
   20650:	ble	20750 <__assert_fail@plt+0xde48>
   20654:	ldrb	r2, [r7, #10]
   20658:	cmp	r2, #10
   2065c:	bne	20718 <__assert_fail@plt+0xde10>
   20660:	strb	r1, [r7, #10]
   20664:	mov	r0, r7
   20668:	bl	121c4 <strtol@plt>
   2066c:	cmn	r0, #1
   20670:	mov	r6, r0
   20674:	beq	20718 <__assert_fail@plt+0xde10>
   20678:	cmp	r0, #0
   2067c:	beq	2071c <__assert_fail@plt+0xde14>
   20680:	cmp	r5, r4
   20684:	beq	206a0 <__assert_fail@plt+0xdd98>
   20688:	ldr	r3, [sp, #4]
   2068c:	cmp	r7, r3
   20690:	beq	20620 <__assert_fail@plt+0xdd18>
   20694:	mov	r0, r7
   20698:	bl	122a8 <gcry_free@plt>
   2069c:	b	20620 <__assert_fail@plt+0xdd18>
   206a0:	add	r0, r8, #16
   206a4:	add	r1, r7, #11
   206a8:	ldm	r0, {r0, r3, r4}
   206ac:	mov	r2, r4
   206b0:	add	r0, r0, r3
   206b4:	bl	122b4 <memcmp@plt>
   206b8:	cmp	r0, #0
   206bc:	bne	20688 <__assert_fail@plt+0xdd80>
   206c0:	add	r4, r7, r4
   206c4:	ldrb	r3, [r4, #11]
   206c8:	cmp	r3, #10
   206cc:	moveq	r3, #1
   206d0:	ldreq	r2, [sp, #8]
   206d4:	streq	r3, [r2]
   206d8:	b	20688 <__assert_fail@plt+0xdd80>
   206dc:	mvn	r6, #0
   206e0:	b	20620 <__assert_fail@plt+0xdd18>
   206e4:	bl	12620 <__errno_location@plt>
   206e8:	ldr	r5, [r8, #4]
   206ec:	ldr	r4, [r0]
   206f0:	mov	r0, r4
   206f4:	bl	124dc <strerror@plt>
   206f8:	mov	r1, r5
   206fc:	mov	r2, r0
   20700:	ldr	r0, [pc, #172]	; 207b4 <__assert_fail@plt+0xdeac>
   20704:	bl	17d34 <__assert_fail@plt+0x542c>
   20708:	mov	r0, r4
   2070c:	bl	12794 <gpg_err_set_errno@plt>
   20710:	mvn	r6, #0
   20714:	b	20620 <__assert_fail@plt+0xdd18>
   20718:	mvn	r6, #0
   2071c:	ldr	r2, [r8, #4]
   20720:	mov	r1, r6
   20724:	ldr	r0, [pc, #140]	; 207b8 <__assert_fail@plt+0xdeb0>
   20728:	bl	17d98 <__assert_fail@plt+0x5490>
   2072c:	ldr	r3, [sp, #4]
   20730:	cmp	r7, r3
   20734:	beq	20740 <__assert_fail@plt+0xde38>
   20738:	mov	r0, r7
   2073c:	bl	122a8 <gcry_free@plt>
   20740:	mov	r0, #22
   20744:	bl	12794 <gpg_err_set_errno@plt>
   20748:	mvn	r6, #0
   2074c:	b	20620 <__assert_fail@plt+0xdd18>
   20750:	ldr	r1, [r8, #4]
   20754:	ldr	r0, [pc, #96]	; 207bc <__assert_fail@plt+0xdeb4>
   20758:	bl	17d34 <__assert_fail@plt+0x542c>
   2075c:	ldr	r3, [sp, #4]
   20760:	cmp	r7, r3
   20764:	bne	20738 <__assert_fail@plt+0xde30>
   20768:	b	20740 <__assert_fail@plt+0xde38>
   2076c:	bl	12620 <__errno_location@plt>
   20770:	ldr	r5, [r8, #4]
   20774:	ldr	r4, [r0]
   20778:	mov	r0, r4
   2077c:	bl	124dc <strerror@plt>
   20780:	mov	r1, r5
   20784:	mov	r2, r0
   20788:	ldr	r0, [pc, #36]	; 207b4 <__assert_fail@plt+0xdeac>
   2078c:	bl	17d34 <__assert_fail@plt+0x542c>
   20790:	mov	r0, sl
   20794:	bl	122a8 <gcry_free@plt>
   20798:	b	20708 <__assert_fail@plt+0xde00>
   2079c:	bl	122fc <__stack_chk_fail@plt>
   207a0:	bl	12620 <__errno_location@plt>
   207a4:	ldr	r2, [r0]
   207a8:	b	205dc <__assert_fail@plt+0xdcd4>
   207ac:	andeq	r4, r3, r8, lsr fp
   207b0:	muleq	r2, r0, ip
   207b4:	strdeq	r3, [r2], -r4
   207b8:	ldrdeq	r3, [r2], -r0
   207bc:			; <UNDEFINED> instruction: 0x00023cb0
   207c0:	ldr	r3, [pc, #8]	; 207d0 <__assert_fail@plt+0xdec8>
   207c4:	mov	r2, #1
   207c8:	str	r2, [r3, #4]
   207cc:	bx	lr
   207d0:	andeq	r5, r3, r4, asr r4
   207d4:	push	{r4, r5, r6, lr}
   207d8:	mov	r5, r0
   207dc:	ldr	r4, [pc, #152]	; 2087c <__assert_fail@plt+0xdf74>
   207e0:	mov	r6, r1
   207e4:	ldr	r3, [r4, #8]
   207e8:	cmp	r3, #0
   207ec:	beq	20854 <__assert_fail@plt+0xdf4c>
   207f0:	cmp	r5, #0
   207f4:	beq	20870 <__assert_fail@plt+0xdf68>
   207f8:	cmp	r6, #0
   207fc:	bne	20868 <__assert_fail@plt+0xdf60>
   20800:	mov	r1, #28
   20804:	mov	r0, #1
   20808:	bl	12668 <gcry_calloc@plt>
   2080c:	subs	r3, r0, #0
   20810:	beq	20870 <__assert_fail@plt+0xdf68>
   20814:	ldr	r1, [r4, #4]
   20818:	mvn	r2, #0
   2081c:	cmp	r1, #0
   20820:	str	r2, [r3, #12]
   20824:	beq	20848 <__assert_fail@plt+0xdf40>
   20828:	ldrb	r2, [r3, #8]
   2082c:	ldr	r1, [r4]
   20830:	mov	r0, r3
   20834:	orr	r2, r2, #2
   20838:	str	r3, [r4]
   2083c:	strb	r2, [r3, #8]
   20840:	str	r1, [r3]
   20844:	pop	{r4, r5, r6, pc}
   20848:	mov	r1, r5
   2084c:	pop	{r4, r5, r6, lr}
   20850:	b	20064 <__assert_fail@plt+0xd75c>
   20854:	ldr	r0, [pc, #36]	; 20880 <__assert_fail@plt+0xdf78>
   20858:	bl	21838 <__assert_fail@plt+0xef30>
   2085c:	mov	r3, #1
   20860:	str	r3, [r4, #8]
   20864:	b	207f0 <__assert_fail@plt+0xdee8>
   20868:	mov	r0, #22
   2086c:	bl	12794 <gpg_err_set_errno@plt>
   20870:	mov	r3, #0
   20874:	mov	r0, r3
   20878:	pop	{r4, r5, r6, pc}
   2087c:	andeq	r5, r3, r4, asr r4
   20880:	andeq	r0, r2, r8, ror #18
   20884:	str	r1, [r0, #12]
   20888:	bx	lr
   2088c:	ldr	r0, [r0, #12]
   20890:	bx	lr
   20894:	push	{r4, lr}
   20898:	subs	r4, r0, #0
   2089c:	popeq	{r4, pc}
   208a0:	ldr	r2, [pc, #188]	; 20964 <__assert_fail@plt+0xe05c>
   208a4:	ldr	r1, [r2]
   208a8:	cmp	r1, #0
   208ac:	beq	208dc <__assert_fail@plt+0xdfd4>
   208b0:	cmp	r4, r1
   208b4:	ldr	r3, [r1]
   208b8:	bne	208d4 <__assert_fail@plt+0xdfcc>
   208bc:	b	2095c <__assert_fail@plt+0xe054>
   208c0:	cmp	r4, r3
   208c4:	ldr	r2, [r3]
   208c8:	beq	208f4 <__assert_fail@plt+0xdfec>
   208cc:	mov	r1, r3
   208d0:	mov	r3, r2
   208d4:	cmp	r3, #0
   208d8:	bne	208c0 <__assert_fail@plt+0xdfb8>
   208dc:	ldrb	r3, [r4, #8]
   208e0:	tst	r3, #2
   208e4:	beq	2090c <__assert_fail@plt+0xe004>
   208e8:	mov	r0, r4
   208ec:	pop	{r4, lr}
   208f0:	b	122a8 <gcry_free@plt>
   208f4:	str	r2, [r1]
   208f8:	mov	r3, #0
   208fc:	str	r3, [r4]
   20900:	ldrb	r3, [r4, #8]
   20904:	tst	r3, #2
   20908:	bne	208e8 <__assert_fail@plt+0xdfe0>
   2090c:	tst	r3, #1
   20910:	beq	20924 <__assert_fail@plt+0xe01c>
   20914:	ldr	r0, [r4, #4]
   20918:	cmp	r0, #0
   2091c:	beq	20924 <__assert_fail@plt+0xe01c>
   20920:	bl	12320 <unlink@plt>
   20924:	ldr	r0, [r4, #16]
   20928:	cmp	r0, #0
   2092c:	beq	20944 <__assert_fail@plt+0xe03c>
   20930:	ldrb	r3, [r4, #8]
   20934:	tst	r3, #4
   20938:	bne	20944 <__assert_fail@plt+0xe03c>
   2093c:	bl	12320 <unlink@plt>
   20940:	ldr	r0, [r4, #16]
   20944:	bl	122a8 <gcry_free@plt>
   20948:	ldr	r0, [r4, #4]
   2094c:	bl	122a8 <gcry_free@plt>
   20950:	mov	r0, r4
   20954:	pop	{r4, lr}
   20958:	b	122a8 <gcry_free@plt>
   2095c:	str	r3, [r2]
   20960:	b	208f8 <__assert_fail@plt+0xdff0>
   20964:	andeq	r5, r3, r4, asr r4
   20968:	ldr	r3, [pc, #40]	; 20998 <__assert_fail@plt+0xe090>
   2096c:	mov	r2, #0
   20970:	ldr	r0, [r3]
   20974:	str	r2, [r3]
   20978:	cmp	r0, r2
   2097c:	bxeq	lr
   20980:	push	{r4, lr}
   20984:	ldr	r4, [r0]
   20988:	bl	20894 <__assert_fail@plt+0xdf8c>
   2098c:	subs	r0, r4, #0
   20990:	bne	20984 <__assert_fail@plt+0xe07c>
   20994:	pop	{r4, pc}
   20998:	andeq	r5, r3, r4, asr r4
   2099c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209a0:	sub	sp, sp, #148	; 0x94
   209a4:	ldr	sl, [pc, #996]	; 20d90 <__assert_fail@plt+0xe488>
   209a8:	ldrb	r3, [r0, #8]
   209ac:	ldr	r2, [sl]
   209b0:	ands	r5, r3, #2
   209b4:	str	r2, [sp, #140]	; 0x8c
   209b8:	movne	r5, #0
   209bc:	bne	209e4 <__assert_fail@plt+0xe0dc>
   209c0:	ands	r8, r3, #1
   209c4:	mov	r6, r0
   209c8:	moveq	r7, r1
   209cc:	moveq	r4, r8
   209d0:	mvneq	r9, #0
   209d4:	beq	20a1c <__assert_fail@plt+0xe114>
   209d8:	ldr	r1, [r0, #4]
   209dc:	ldr	r0, [pc, #944]	; 20d94 <__assert_fail@plt+0xe48c>
   209e0:	bl	17ee4 <__assert_fail@plt+0x55dc>
   209e4:	ldr	r2, [sp, #140]	; 0x8c
   209e8:	ldr	r3, [sl]
   209ec:	mov	r0, r5
   209f0:	cmp	r2, r3
   209f4:	bne	20d8c <__assert_fail@plt+0xe484>
   209f8:	add	sp, sp, #148	; 0x94
   209fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a00:	bl	12620 <__errno_location@plt>
   20a04:	ldr	fp, [r0]
   20a08:	cmp	fp, #2
   20a0c:	bne	20d68 <__assert_fail@plt+0xe460>
   20a10:	ldr	r0, [pc, #896]	; 20d98 <__assert_fail@plt+0xe490>
   20a14:	bl	17d34 <__assert_fail@plt+0x542c>
   20a18:	ldrb	r3, [r6, #8]
   20a1c:	tst	r3, #4
   20a20:	bne	20b70 <__assert_fail@plt+0xe268>
   20a24:	ldr	r1, [r6, #4]
   20a28:	ldr	r0, [r6, #16]
   20a2c:	bl	1268c <link@plt>
   20a30:	add	r2, sp, #16
   20a34:	ldr	r1, [r6, #16]
   20a38:	mov	r0, #3
   20a3c:	bl	1286c <__xstat64@plt>
   20a40:	subs	r5, r0, #0
   20a44:	bne	20d3c <__assert_fail@plt+0xe434>
   20a48:	ldr	r3, [sp, #36]	; 0x24
   20a4c:	cmp	r3, #2
   20a50:	beq	20d2c <__assert_fail@plt+0xe424>
   20a54:	add	r1, sp, #12
   20a58:	mov	r0, r6
   20a5c:	bl	204e8 <__assert_fail@plt+0xdbe0>
   20a60:	cmn	r0, #1
   20a64:	mov	r5, r0
   20a68:	beq	20a00 <__assert_fail@plt+0xe0f8>
   20a6c:	bl	12554 <getpid@plt>
   20a70:	ldr	r3, [sp, #12]
   20a74:	cmp	r5, r0
   20a78:	beq	20c78 <__assert_fail@plt+0xe370>
   20a7c:	cmp	r3, #0
   20a80:	beq	20aa8 <__assert_fail@plt+0xe1a0>
   20a84:	mov	r1, #0
   20a88:	mov	r0, r5
   20a8c:	bl	12524 <kill@plt>
   20a90:	cmp	r0, #0
   20a94:	beq	20aa8 <__assert_fail@plt+0xe1a0>
   20a98:	bl	12620 <__errno_location@plt>
   20a9c:	ldr	r3, [r0]
   20aa0:	cmp	r3, #3
   20aa4:	beq	20cec <__assert_fail@plt+0xe3e4>
   20aa8:	cmn	r9, #1
   20aac:	beq	20c6c <__assert_fail@plt+0xe364>
   20ab0:	subs	r3, r5, r9
   20ab4:	movne	r3, #1
   20ab8:	cmp	r7, #0
   20abc:	beq	20d7c <__assert_fail@plt+0xe474>
   20ac0:	cmp	r4, #0
   20ac4:	moveq	r3, #1
   20ac8:	cmp	r3, #0
   20acc:	bne	20c64 <__assert_fail@plt+0xe35c>
   20ad0:	cmp	r4, #800	; 0x320
   20ad4:	lsllt	r4, r4, #1
   20ad8:	blt	20af0 <__assert_fail@plt+0xe1e8>
   20adc:	cmp	r4, #800	; 0x320
   20ae0:	beq	20c2c <__assert_fail@plt+0xe324>
   20ae4:	cmp	r4, #8000	; 0x1f40
   20ae8:	lsllt	r4, r4, #1
   20aec:	blt	20c30 <__assert_fail@plt+0xe328>
   20af0:	cmp	r7, #0
   20af4:	ble	20b04 <__assert_fail@plt+0xe1fc>
   20af8:	cmp	r4, r7
   20afc:	movge	r4, r7
   20b00:	sub	r7, r7, r4
   20b04:	ldr	r3, [pc, #656]	; 20d9c <__assert_fail@plt+0xe494>
   20b08:	add	r8, r8, r4
   20b0c:	cmp	r8, r3
   20b10:	bgt	20c38 <__assert_fail@plt+0xe330>
   20b14:	ldr	r3, [pc, #644]	; 20da0 <__assert_fail@plt+0xe498>
   20b18:	add	r2, sp, #16
   20b1c:	str	r2, [sp]
   20b20:	umull	r3, lr, r3, r4
   20b24:	mov	r3, #0
   20b28:	lsr	lr, lr, #6
   20b2c:	mov	r2, r3
   20b30:	rsb	r0, lr, lr, lsl #5
   20b34:	mov	r1, r3
   20b38:	add	r0, lr, r0, lsl #2
   20b3c:	str	lr, [sp, #16]
   20b40:	sub	r0, r4, r0, lsl #3
   20b44:	rsb	ip, r0, r0, lsl #5
   20b48:	add	ip, r0, ip, lsl #2
   20b4c:	mov	r0, r3
   20b50:	lsl	ip, ip, #3
   20b54:	str	ip, [sp, #20]
   20b58:	bl	122c0 <select@plt>
   20b5c:	b	20a18 <__assert_fail@plt+0xe110>
   20b60:	bl	12620 <__errno_location@plt>
   20b64:	ldr	r5, [r0]
   20b68:	cmp	r5, #4
   20b6c:	bne	20c9c <__assert_fail@plt+0xe394>
   20b70:	mov	r0, #0
   20b74:	bl	12794 <gpg_err_set_errno@plt>
   20b78:	mov	r2, #420	; 0x1a4
   20b7c:	mov	r1, #193	; 0xc1
   20b80:	ldr	r0, [r6, #4]
   20b84:	bl	12470 <open64@plt>
   20b88:	cmn	r0, #1
   20b8c:	mov	fp, r0
   20b90:	beq	20b60 <__assert_fail@plt+0xe258>
   20b94:	bl	12554 <getpid@plt>
   20b98:	ldr	r2, [pc, #516]	; 20da4 <__assert_fail@plt+0xe49c>
   20b9c:	mov	r1, #16
   20ba0:	mov	r3, r0
   20ba4:	add	r0, sp, #124	; 0x7c
   20ba8:	bl	126f8 <gpgrt_snprintf@plt>
   20bac:	add	r1, sp, #124	; 0x7c
   20bb0:	mov	r2, #11
   20bb4:	mov	r0, fp
   20bb8:	bl	12698 <write@plt>
   20bbc:	cmp	r0, #11
   20bc0:	bne	20be8 <__assert_fail@plt+0xe2e0>
   20bc4:	ldr	r3, [r6, #20]
   20bc8:	ldr	r1, [r6, #16]
   20bcc:	ldr	r2, [r6, #24]
   20bd0:	add	r1, r1, r3
   20bd4:	mov	r0, fp
   20bd8:	bl	12698 <write@plt>
   20bdc:	ldr	r3, [r6, #24]
   20be0:	cmp	r0, r3
   20be4:	beq	20d04 <__assert_fail@plt+0xe3fc>
   20be8:	bl	12620 <__errno_location@plt>
   20bec:	ldr	r7, [r6, #4]
   20bf0:	mvn	r5, #0
   20bf4:	ldr	r4, [r0]
   20bf8:	mov	r0, r4
   20bfc:	bl	124dc <strerror@plt>
   20c00:	mov	r1, r7
   20c04:	mov	r2, r0
   20c08:	ldr	r0, [pc, #408]	; 20da8 <__assert_fail@plt+0xe4a0>
   20c0c:	bl	17d98 <__assert_fail@plt+0x5490>
   20c10:	mov	r0, fp
   20c14:	bl	128cc <close@plt>
   20c18:	ldr	r0, [r6, #4]
   20c1c:	bl	12320 <unlink@plt>
   20c20:	mov	r0, r4
   20c24:	bl	12794 <gpg_err_set_errno@plt>
   20c28:	b	209e4 <__assert_fail@plt+0xe0dc>
   20c2c:	mov	r4, #2000	; 0x7d0
   20c30:	cmp	r7, #0
   20c34:	bgt	20af8 <__assert_fail@plt+0xe1f0>
   20c38:	ldr	r3, [pc, #364]	; 20dac <__assert_fail@plt+0xe4a4>
   20c3c:	ldr	r3, [r3]
   20c40:	cmp	r3, #0
   20c44:	beq	20cd0 <__assert_fail@plt+0xe3c8>
   20c48:	cmp	r6, r3
   20c4c:	beq	20c3c <__assert_fail@plt+0xe334>
   20c50:	ldrb	r2, [r3, #8]
   20c54:	tst	r2, #1
   20c58:	beq	20c3c <__assert_fail@plt+0xe334>
   20c5c:	ldr	r3, [pc, #332]	; 20db0 <__assert_fail@plt+0xe4a8>
   20c60:	b	20cd4 <__assert_fail@plt+0xe3cc>
   20c64:	mov	r4, #50	; 0x32
   20c68:	b	20af0 <__assert_fail@plt+0xe1e8>
   20c6c:	mov	r9, r5
   20c70:	mov	r3, #0
   20c74:	b	20ab8 <__assert_fail@plt+0xe1b0>
   20c78:	cmp	r3, #0
   20c7c:	beq	20aa8 <__assert_fail@plt+0xe1a0>
   20c80:	ldr	r0, [pc, #300]	; 20db4 <__assert_fail@plt+0xe4ac>
   20c84:	bl	17d34 <__assert_fail@plt+0x542c>
   20c88:	ldrb	r3, [r6, #8]
   20c8c:	mov	r5, #0
   20c90:	orr	r3, r3, #1
   20c94:	strb	r3, [r6, #8]
   20c98:	b	209e4 <__assert_fail@plt+0xe0dc>
   20c9c:	cmp	r5, #17
   20ca0:	beq	20a54 <__assert_fail@plt+0xe14c>
   20ca4:	mov	r0, r5
   20ca8:	ldr	r4, [r6, #4]
   20cac:	bl	124dc <strerror@plt>
   20cb0:	mov	r1, r4
   20cb4:	mov	r2, r0
   20cb8:	ldr	r0, [pc, #248]	; 20db8 <__assert_fail@plt+0xe4b0>
   20cbc:	bl	17d98 <__assert_fail@plt+0x5490>
   20cc0:	mov	r0, r5
   20cc4:	mov	r5, fp
   20cc8:	bl	12794 <gpg_err_set_errno@plt>
   20ccc:	b	209e4 <__assert_fail@plt+0xe0dc>
   20cd0:	ldr	r3, [pc, #228]	; 20dbc <__assert_fail@plt+0xe4b4>
   20cd4:	mov	r1, r5
   20cd8:	ldr	r2, [pc, #220]	; 20dbc <__assert_fail@plt+0xe4b4>
   20cdc:	ldr	r0, [pc, #220]	; 20dc0 <__assert_fail@plt+0xe4b8>
   20ce0:	bl	17d34 <__assert_fail@plt+0x542c>
   20ce4:	mov	r8, #0
   20ce8:	b	20b14 <__assert_fail@plt+0xe20c>
   20cec:	mov	r1, r5
   20cf0:	ldr	r0, [pc, #204]	; 20dc4 <__assert_fail@plt+0xe4bc>
   20cf4:	bl	17d34 <__assert_fail@plt+0x542c>
   20cf8:	ldr	r0, [r6, #4]
   20cfc:	bl	12320 <unlink@plt>
   20d00:	b	20a18 <__assert_fail@plt+0xe110>
   20d04:	mov	r2, #1
   20d08:	ldr	r1, [pc, #184]	; 20dc8 <__assert_fail@plt+0xe4c0>
   20d0c:	mov	r0, fp
   20d10:	bl	12698 <write@plt>
   20d14:	cmp	r0, #1
   20d18:	bne	20be8 <__assert_fail@plt+0xe2e0>
   20d1c:	mov	r0, fp
   20d20:	bl	128cc <close@plt>
   20d24:	subs	r5, r0, #0
   20d28:	bne	20be8 <__assert_fail@plt+0xe2e0>
   20d2c:	ldrb	r3, [r6, #8]
   20d30:	orr	r3, r3, #1
   20d34:	strb	r3, [r6, #8]
   20d38:	b	209e4 <__assert_fail@plt+0xe0dc>
   20d3c:	bl	12620 <__errno_location@plt>
   20d40:	mvn	r5, #0
   20d44:	ldr	r4, [r0]
   20d48:	mov	r0, r4
   20d4c:	bl	124dc <strerror@plt>
   20d50:	mov	r1, r0
   20d54:	ldr	r0, [pc, #112]	; 20dcc <__assert_fail@plt+0xe4c4>
   20d58:	bl	17d98 <__assert_fail@plt+0x5490>
   20d5c:	mov	r0, r4
   20d60:	bl	12794 <gpg_err_set_errno@plt>
   20d64:	b	209e4 <__assert_fail@plt+0xe0dc>
   20d68:	ldr	r0, [pc, #96]	; 20dd0 <__assert_fail@plt+0xe4c8>
   20d6c:	bl	17d34 <__assert_fail@plt+0x542c>
   20d70:	mov	r0, fp
   20d74:	bl	12794 <gpg_err_set_errno@plt>
   20d78:	b	209e4 <__assert_fail@plt+0xe0dc>
   20d7c:	mov	r0, #13
   20d80:	bl	12794 <gpg_err_set_errno@plt>
   20d84:	mvn	r5, #0
   20d88:	b	209e4 <__assert_fail@plt+0xe0dc>
   20d8c:	bl	122fc <__stack_chk_fail@plt>
   20d90:	andeq	r4, r3, r8, lsr fp
   20d94:	andeq	r3, r2, r8, lsr #26
   20d98:	andeq	r3, r2, r0, asr #27
   20d9c:	ldrdeq	r0, [r0], -fp
   20da0:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   20da4:	ldrdeq	r3, [r2], -ip
   20da8:	andeq	r3, r2, r8, asr #26
   20dac:	andeq	r5, r3, r4, asr r4
   20db0:	andeq	r3, r2, r8, lsl sp
   20db4:	ldrdeq	r3, [r2], -r8
   20db8:	andeq	r3, r2, ip, asr #28
   20dbc:	andeq	r3, r2, r8, lsl #21
   20dc0:	andeq	r3, r2, r4, lsr #28
   20dc4:	strdeq	r3, [r2], -r8
   20dc8:	andeq	r1, r2, r0, asr #22
   20dcc:	andeq	r3, r2, r4, ror sp
   20dd0:	andeq	r3, r2, r8, lsr #27
   20dd4:	push	{r4, r5, r6, lr}
   20dd8:	sub	sp, sp, #8
   20ddc:	ldr	r6, [pc, #260]	; 20ee8 <__assert_fail@plt+0xe5e0>
   20de0:	ldr	r3, [pc, #260]	; 20eec <__assert_fail@plt+0xe5e4>
   20de4:	ldr	r2, [r6]
   20de8:	str	r2, [sp, #4]
   20dec:	ldr	r4, [r3]
   20df0:	cmp	r4, #0
   20df4:	beq	20e5c <__assert_fail@plt+0xe554>
   20df8:	ldrb	r4, [r0, #8]
   20dfc:	mov	r5, r0
   20e00:	tst	r4, #2
   20e04:	movne	r4, #0
   20e08:	bne	20e5c <__assert_fail@plt+0xe554>
   20e0c:	ands	r4, r4, #1
   20e10:	beq	20e78 <__assert_fail@plt+0xe570>
   20e14:	mov	r1, sp
   20e18:	bl	204e8 <__assert_fail@plt+0xdbe0>
   20e1c:	cmn	r0, #1
   20e20:	mov	r4, r0
   20e24:	beq	20ea4 <__assert_fail@plt+0xe59c>
   20e28:	bl	12554 <getpid@plt>
   20e2c:	cmp	r4, r0
   20e30:	bne	20e88 <__assert_fail@plt+0xe580>
   20e34:	ldr	r3, [sp]
   20e38:	cmp	r3, #0
   20e3c:	beq	20e88 <__assert_fail@plt+0xe580>
   20e40:	ldr	r0, [r5, #4]
   20e44:	bl	12320 <unlink@plt>
   20e48:	subs	r4, r0, #0
   20e4c:	bne	20ec0 <__assert_fail@plt+0xe5b8>
   20e50:	ldrb	r3, [r5, #8]
   20e54:	bic	r3, r3, #1
   20e58:	strb	r3, [r5, #8]
   20e5c:	ldr	r2, [sp, #4]
   20e60:	ldr	r3, [r6]
   20e64:	mov	r0, r4
   20e68:	cmp	r2, r3
   20e6c:	bne	20ee4 <__assert_fail@plt+0xe5dc>
   20e70:	add	sp, sp, #8
   20e74:	pop	{r4, r5, r6, pc}
   20e78:	ldr	r1, [r0, #4]
   20e7c:	ldr	r0, [pc, #108]	; 20ef0 <__assert_fail@plt+0xe5e8>
   20e80:	bl	17ee4 <__assert_fail@plt+0x55dc>
   20e84:	b	20e5c <__assert_fail@plt+0xe554>
   20e88:	mov	r1, r4
   20e8c:	ldr	r0, [pc, #96]	; 20ef4 <__assert_fail@plt+0xe5ec>
   20e90:	bl	17d98 <__assert_fail@plt+0x5490>
   20e94:	mov	r0, #13
   20e98:	bl	12794 <gpg_err_set_errno@plt>
   20e9c:	mvn	r4, #0
   20ea0:	b	20e5c <__assert_fail@plt+0xe554>
   20ea4:	bl	12620 <__errno_location@plt>
   20ea8:	ldr	r5, [r0]
   20eac:	ldr	r0, [pc, #68]	; 20ef8 <__assert_fail@plt+0xe5f0>
   20eb0:	bl	17d98 <__assert_fail@plt+0x5490>
   20eb4:	mov	r0, r5
   20eb8:	bl	12794 <gpg_err_set_errno@plt>
   20ebc:	b	20e5c <__assert_fail@plt+0xe554>
   20ec0:	bl	12620 <__errno_location@plt>
   20ec4:	ldr	r1, [r5, #4]
   20ec8:	mvn	r4, #0
   20ecc:	ldr	r5, [r0]
   20ed0:	ldr	r0, [pc, #36]	; 20efc <__assert_fail@plt+0xe5f4>
   20ed4:	bl	17d98 <__assert_fail@plt+0x5490>
   20ed8:	mov	r0, r5
   20edc:	bl	12794 <gpg_err_set_errno@plt>
   20ee0:	b	20e5c <__assert_fail@plt+0xe554>
   20ee4:	bl	122fc <__stack_chk_fail@plt>
   20ee8:	andeq	r4, r3, r8, lsr fp
   20eec:	andeq	r5, r3, r4, asr r4
   20ef0:	andeq	r3, r2, ip, ror lr
   20ef4:			; <UNDEFINED> instruction: 0x00023ebc
   20ef8:	muleq	r2, r8, lr
   20efc:	andeq	r3, r2, r4, ror #29
   20f00:	push	{r4, lr}
   20f04:	mov	r4, r0
   20f08:	ldr	r0, [r0, #8]
   20f0c:	cmp	r0, #0
   20f10:	beq	20f2c <__assert_fail@plt+0xe624>
   20f14:	ldr	r1, [r4]
   20f18:	bl	21290 <__assert_fail@plt+0xe988>
   20f1c:	ldr	r0, [r4, #8]
   20f20:	bl	122a8 <gcry_free@plt>
   20f24:	mov	r3, #0
   20f28:	str	r3, [r4, #8]
   20f2c:	ldr	r0, [r4, #12]
   20f30:	bl	12794 <gpg_err_set_errno@plt>
   20f34:	mov	r0, #0
   20f38:	pop	{r4, pc}
   20f3c:	push	{r4, lr}
   20f40:	mov	r4, r0
   20f44:	mov	r3, #0
   20f48:	str	r1, [r0, #4]
   20f4c:	mov	r0, r1
   20f50:	str	r3, [r4]
   20f54:	str	r3, [r4, #12]
   20f58:	bl	1217c <gcry_malloc@plt>
   20f5c:	cmp	r0, #0
   20f60:	str	r0, [r4, #8]
   20f64:	popne	{r4, pc}
   20f68:	bl	12620 <__errno_location@plt>
   20f6c:	ldr	r3, [r0]
   20f70:	str	r3, [r4, #12]
   20f74:	pop	{r4, pc}
   20f78:	push	{r4, lr}
   20f7c:	mov	r4, r0
   20f80:	mov	r3, #0
   20f84:	str	r1, [r0, #4]
   20f88:	mov	r0, r1
   20f8c:	str	r3, [r4]
   20f90:	str	r3, [r4, #12]
   20f94:	bl	12488 <gcry_malloc_secure@plt>
   20f98:	cmp	r0, #0
   20f9c:	str	r0, [r4, #8]
   20fa0:	popne	{r4, pc}
   20fa4:	bl	12620 <__errno_location@plt>
   20fa8:	ldr	r3, [r0]
   20fac:	str	r3, [r4, #12]
   20fb0:	pop	{r4, pc}
   20fb4:	ldr	r3, [r0, #12]
   20fb8:	cmp	r3, #0
   20fbc:	bxne	lr
   20fc0:	ldr	r2, [r0]
   20fc4:	cmp	r2, r1
   20fc8:	bhi	20fd4 <__assert_fail@plt+0xe6cc>
   20fcc:	str	r3, [r0]
   20fd0:	bx	lr
   20fd4:	ldr	r3, [r0, #8]
   20fd8:	sub	r2, r2, r1
   20fdc:	str	r2, [r0]
   20fe0:	add	r1, r3, r1
   20fe4:	mov	r0, r3
   20fe8:	b	12224 <memmove@plt>
   20fec:	ldr	ip, [r0, #12]
   20ff0:	clz	r3, r2
   20ff4:	cmp	ip, #0
   20ff8:	lsr	r3, r3, #5
   20ffc:	movne	r3, #1
   21000:	cmp	r3, #0
   21004:	bxne	lr
   21008:	ldr	r3, [r0]
   2100c:	push	{r4, r5, r6, lr}
   21010:	mov	r6, r1
   21014:	ldr	r1, [r0, #4]
   21018:	mov	r5, r2
   2101c:	add	r2, r3, r2
   21020:	cmp	r2, r1
   21024:	mov	r4, r0
   21028:	ldr	r0, [r0, #8]
   2102c:	bcc	21050 <__assert_fail@plt+0xe748>
   21030:	add	r3, r5, #1024	; 0x400
   21034:	add	r1, r3, r1
   21038:	str	r1, [r4, #4]
   2103c:	bl	126c8 <gcry_realloc@plt>
   21040:	cmp	r0, #0
   21044:	beq	21070 <__assert_fail@plt+0xe768>
   21048:	ldr	r3, [r4]
   2104c:	str	r0, [r4, #8]
   21050:	mov	r2, r5
   21054:	mov	r1, r6
   21058:	add	r0, r0, r3
   2105c:	bl	12284 <memcpy@plt>
   21060:	ldr	r2, [r4]
   21064:	add	r5, r2, r5
   21068:	str	r5, [r4]
   2106c:	pop	{r4, r5, r6, pc}
   21070:	bl	12620 <__errno_location@plt>
   21074:	ldr	r1, [r4]
   21078:	ldr	r3, [r0]
   2107c:	ldr	r0, [r4, #8]
   21080:	cmp	r3, #0
   21084:	moveq	r3, #12
   21088:	str	r3, [r4, #12]
   2108c:	pop	{r4, r5, r6, lr}
   21090:	b	21290 <__assert_fail@plt+0xe988>
   21094:	cmp	r1, #0
   21098:	beq	210ac <__assert_fail@plt+0xe7a4>
   2109c:	push	{r4, lr}
   210a0:	bl	20fec <__assert_fail@plt+0xe6e4>
   210a4:	mov	r0, #0
   210a8:	pop	{r4, pc}
   210ac:	mov	r0, #0
   210b0:	bx	lr
   210b4:	push	{r4, r5, r6, lr}
   210b8:	mov	r5, r0
   210bc:	mov	r0, r1
   210c0:	mov	r4, r1
   210c4:	bl	1259c <strlen@plt>
   210c8:	mov	r1, r4
   210cc:	mov	r2, r0
   210d0:	mov	r0, r5
   210d4:	pop	{r4, r5, r6, lr}
   210d8:	b	20fec <__assert_fail@plt+0xe6e4>
   210dc:	push	{r1, r2, r3}
   210e0:	push	{r4, r5, r6, lr}
   210e4:	mov	r5, r0
   210e8:	ldr	r4, [pc, #136]	; 21178 <__assert_fail@plt+0xe870>
   210ec:	sub	sp, sp, #20
   210f0:	add	r3, sp, #40	; 0x28
   210f4:	ldr	r0, [r4]
   210f8:	mov	r2, r3
   210fc:	str	r0, [sp, #12]
   21100:	ldr	r1, [sp, #36]	; 0x24
   21104:	add	r0, sp, #8
   21108:	str	r3, [sp, #4]
   2110c:	bl	12680 <gpgrt_vasprintf@plt>
   21110:	cmp	r0, #0
   21114:	blt	2115c <__assert_fail@plt+0xe854>
   21118:	ldr	r6, [sp, #8]
   2111c:	mov	r0, r6
   21120:	bl	1259c <strlen@plt>
   21124:	mov	r1, r6
   21128:	mov	r2, r0
   2112c:	mov	r0, r5
   21130:	bl	20fec <__assert_fail@plt+0xe6e4>
   21134:	ldr	r0, [sp, #8]
   21138:	bl	122a8 <gcry_free@plt>
   2113c:	ldr	r2, [sp, #12]
   21140:	ldr	r3, [r4]
   21144:	cmp	r2, r3
   21148:	bne	21174 <__assert_fail@plt+0xe86c>
   2114c:	add	sp, sp, #20
   21150:	pop	{r4, r5, r6, lr}
   21154:	add	sp, sp, #12
   21158:	bx	lr
   2115c:	bl	12620 <__errno_location@plt>
   21160:	ldr	r3, [r0]
   21164:	cmp	r3, #0
   21168:	moveq	r3, #12
   2116c:	str	r3, [r5, #12]
   21170:	b	2113c <__assert_fail@plt+0xe834>
   21174:	bl	122fc <__stack_chk_fail@plt>
   21178:	andeq	r4, r3, r8, lsr fp
   2117c:	ldr	r2, [r0, #12]
   21180:	mov	r3, r0
   21184:	cmp	r2, #0
   21188:	bne	211b0 <__assert_fail@plt+0xe8a8>
   2118c:	cmp	r1, #0
   21190:	ldr	r0, [r0, #8]
   21194:	ldrne	r2, [r3]
   21198:	strne	r2, [r1]
   2119c:	mov	r1, #0
   211a0:	mov	r2, #12
   211a4:	str	r1, [r3, #8]
   211a8:	str	r2, [r3, #12]
   211ac:	bx	lr
   211b0:	b	20f00 <__assert_fail@plt+0xe5f8>
   211b4:	push	{r4, r5, r6, lr}
   211b8:	sub	sp, sp, #8
   211bc:	ldr	r6, [pc, #148]	; 21258 <__assert_fail@plt+0xe950>
   211c0:	subs	r5, r1, #0
   211c4:	ldr	r3, [r6]
   211c8:	str	r3, [sp, #4]
   211cc:	beq	21238 <__assert_fail@plt+0xe930>
   211d0:	ldr	r3, [r0, #12]
   211d4:	cmp	r3, #0
   211d8:	bne	21248 <__assert_fail@plt+0xe940>
   211dc:	ldr	r1, [r0]
   211e0:	mov	r2, #12
   211e4:	ldr	r4, [r0, #8]
   211e8:	str	r1, [r5]
   211ec:	str	r3, [r0, #8]
   211f0:	str	r2, [r0, #12]
   211f4:	cmp	r4, #0
   211f8:	beq	21208 <__assert_fail@plt+0xe900>
   211fc:	ldr	r1, [r5]
   21200:	cmp	r1, #0
   21204:	bne	21224 <__assert_fail@plt+0xe91c>
   21208:	ldr	r2, [sp, #4]
   2120c:	ldr	r3, [r6]
   21210:	mov	r0, r4
   21214:	cmp	r2, r3
   21218:	bne	21254 <__assert_fail@plt+0xe94c>
   2121c:	add	sp, sp, #8
   21220:	pop	{r4, r5, r6, pc}
   21224:	mov	r0, r4
   21228:	bl	126c8 <gcry_realloc@plt>
   2122c:	cmp	r0, #0
   21230:	movne	r4, r0
   21234:	b	21208 <__assert_fail@plt+0xe900>
   21238:	ldr	r3, [r0, #12]
   2123c:	mov	r5, sp
   21240:	cmp	r3, #0
   21244:	beq	211dc <__assert_fail@plt+0xe8d4>
   21248:	bl	20f00 <__assert_fail@plt+0xe5f8>
   2124c:	mov	r4, r0
   21250:	b	211f4 <__assert_fail@plt+0xe8ec>
   21254:	bl	122fc <__stack_chk_fail@plt>
   21258:	andeq	r4, r3, r8, lsr fp
   2125c:	mov	r3, r0
   21260:	ldr	r0, [r0, #12]
   21264:	cmp	r0, #0
   21268:	bne	21280 <__assert_fail@plt+0xe978>
   2126c:	cmp	r1, #0
   21270:	ldr	r0, [r3, #8]
   21274:	ldrne	r3, [r3]
   21278:	strne	r3, [r1]
   2127c:	bx	lr
   21280:	push	{r4, lr}
   21284:	bl	12794 <gpg_err_set_errno@plt>
   21288:	mov	r0, #0
   2128c:	pop	{r4, pc}
   21290:	mvn	r2, #0
   21294:	b	12758 <__explicit_bzero_chk@plt>
   21298:	push	{r4, r5, r6, lr}
   2129c:	sub	sp, sp, #216	; 0xd8
   212a0:	ldr	r4, [pc, #160]	; 21348 <__assert_fail@plt+0xea40>
   212a4:	mov	r5, r0
   212a8:	mov	r6, r1
   212ac:	ldr	r3, [r4]
   212b0:	str	r3, [sp, #212]	; 0xd4
   212b4:	bl	1e70c <__assert_fail@plt+0xbe04>
   212b8:	cmp	r0, #0
   212bc:	moveq	r0, #1
   212c0:	bne	212dc <__assert_fail@plt+0xe9d4>
   212c4:	ldr	r2, [sp, #212]	; 0xd4
   212c8:	ldr	r3, [r4]
   212cc:	cmp	r2, r3
   212d0:	bne	21344 <__assert_fail@plt+0xea3c>
   212d4:	add	sp, sp, #216	; 0xd8
   212d8:	pop	{r4, r5, r6, pc}
   212dc:	mov	r1, r5
   212e0:	mov	r2, sp
   212e4:	mov	r0, #3
   212e8:	bl	1286c <__xstat64@plt>
   212ec:	cmp	r0, #0
   212f0:	beq	212fc <__assert_fail@plt+0xe9f4>
   212f4:	mov	r0, #0
   212f8:	b	212c4 <__assert_fail@plt+0xe9bc>
   212fc:	mov	r1, r6
   21300:	add	r2, sp, #104	; 0x68
   21304:	mov	r0, #3
   21308:	bl	1286c <__xstat64@plt>
   2130c:	cmp	r0, #0
   21310:	bne	212f4 <__assert_fail@plt+0xe9ec>
   21314:	ldrd	r0, [sp]
   21318:	ldrd	r2, [sp, #104]	; 0x68
   2131c:	cmp	r1, r3
   21320:	cmpeq	r0, r2
   21324:	bne	212f4 <__assert_fail@plt+0xe9ec>
   21328:	ldrd	r0, [sp, #96]	; 0x60
   2132c:	ldrd	r2, [sp, #200]	; 0xc8
   21330:	cmp	r1, r3
   21334:	cmpeq	r0, r2
   21338:	moveq	r0, #1
   2133c:	movne	r0, #0
   21340:	b	212c4 <__assert_fail@plt+0xe9bc>
   21344:	bl	122fc <__stack_chk_fail@plt>
   21348:	andeq	r4, r3, r8, lsr fp
   2134c:	cmp	r1, #0
   21350:	beq	2155c <__assert_fail@plt+0xec54>
   21354:	eor	ip, r0, r1
   21358:	rsbmi	r1, r1, #0
   2135c:	subs	r2, r1, #1
   21360:	beq	21528 <__assert_fail@plt+0xec20>
   21364:	movs	r3, r0
   21368:	rsbmi	r3, r0, #0
   2136c:	cmp	r3, r1
   21370:	bls	21534 <__assert_fail@plt+0xec2c>
   21374:	tst	r1, r2
   21378:	beq	21544 <__assert_fail@plt+0xec3c>
   2137c:	clz	r2, r3
   21380:	clz	r0, r1
   21384:	sub	r2, r0, r2
   21388:	rsbs	r2, r2, #31
   2138c:	addne	r2, r2, r2, lsl #1
   21390:	mov	r0, #0
   21394:	addne	pc, pc, r2, lsl #2
   21398:	nop			; (mov r0, r0)
   2139c:	cmp	r3, r1, lsl #31
   213a0:	adc	r0, r0, r0
   213a4:	subcs	r3, r3, r1, lsl #31
   213a8:	cmp	r3, r1, lsl #30
   213ac:	adc	r0, r0, r0
   213b0:	subcs	r3, r3, r1, lsl #30
   213b4:	cmp	r3, r1, lsl #29
   213b8:	adc	r0, r0, r0
   213bc:	subcs	r3, r3, r1, lsl #29
   213c0:	cmp	r3, r1, lsl #28
   213c4:	adc	r0, r0, r0
   213c8:	subcs	r3, r3, r1, lsl #28
   213cc:	cmp	r3, r1, lsl #27
   213d0:	adc	r0, r0, r0
   213d4:	subcs	r3, r3, r1, lsl #27
   213d8:	cmp	r3, r1, lsl #26
   213dc:	adc	r0, r0, r0
   213e0:	subcs	r3, r3, r1, lsl #26
   213e4:	cmp	r3, r1, lsl #25
   213e8:	adc	r0, r0, r0
   213ec:	subcs	r3, r3, r1, lsl #25
   213f0:	cmp	r3, r1, lsl #24
   213f4:	adc	r0, r0, r0
   213f8:	subcs	r3, r3, r1, lsl #24
   213fc:	cmp	r3, r1, lsl #23
   21400:	adc	r0, r0, r0
   21404:	subcs	r3, r3, r1, lsl #23
   21408:	cmp	r3, r1, lsl #22
   2140c:	adc	r0, r0, r0
   21410:	subcs	r3, r3, r1, lsl #22
   21414:	cmp	r3, r1, lsl #21
   21418:	adc	r0, r0, r0
   2141c:	subcs	r3, r3, r1, lsl #21
   21420:	cmp	r3, r1, lsl #20
   21424:	adc	r0, r0, r0
   21428:	subcs	r3, r3, r1, lsl #20
   2142c:	cmp	r3, r1, lsl #19
   21430:	adc	r0, r0, r0
   21434:	subcs	r3, r3, r1, lsl #19
   21438:	cmp	r3, r1, lsl #18
   2143c:	adc	r0, r0, r0
   21440:	subcs	r3, r3, r1, lsl #18
   21444:	cmp	r3, r1, lsl #17
   21448:	adc	r0, r0, r0
   2144c:	subcs	r3, r3, r1, lsl #17
   21450:	cmp	r3, r1, lsl #16
   21454:	adc	r0, r0, r0
   21458:	subcs	r3, r3, r1, lsl #16
   2145c:	cmp	r3, r1, lsl #15
   21460:	adc	r0, r0, r0
   21464:	subcs	r3, r3, r1, lsl #15
   21468:	cmp	r3, r1, lsl #14
   2146c:	adc	r0, r0, r0
   21470:	subcs	r3, r3, r1, lsl #14
   21474:	cmp	r3, r1, lsl #13
   21478:	adc	r0, r0, r0
   2147c:	subcs	r3, r3, r1, lsl #13
   21480:	cmp	r3, r1, lsl #12
   21484:	adc	r0, r0, r0
   21488:	subcs	r3, r3, r1, lsl #12
   2148c:	cmp	r3, r1, lsl #11
   21490:	adc	r0, r0, r0
   21494:	subcs	r3, r3, r1, lsl #11
   21498:	cmp	r3, r1, lsl #10
   2149c:	adc	r0, r0, r0
   214a0:	subcs	r3, r3, r1, lsl #10
   214a4:	cmp	r3, r1, lsl #9
   214a8:	adc	r0, r0, r0
   214ac:	subcs	r3, r3, r1, lsl #9
   214b0:	cmp	r3, r1, lsl #8
   214b4:	adc	r0, r0, r0
   214b8:	subcs	r3, r3, r1, lsl #8
   214bc:	cmp	r3, r1, lsl #7
   214c0:	adc	r0, r0, r0
   214c4:	subcs	r3, r3, r1, lsl #7
   214c8:	cmp	r3, r1, lsl #6
   214cc:	adc	r0, r0, r0
   214d0:	subcs	r3, r3, r1, lsl #6
   214d4:	cmp	r3, r1, lsl #5
   214d8:	adc	r0, r0, r0
   214dc:	subcs	r3, r3, r1, lsl #5
   214e0:	cmp	r3, r1, lsl #4
   214e4:	adc	r0, r0, r0
   214e8:	subcs	r3, r3, r1, lsl #4
   214ec:	cmp	r3, r1, lsl #3
   214f0:	adc	r0, r0, r0
   214f4:	subcs	r3, r3, r1, lsl #3
   214f8:	cmp	r3, r1, lsl #2
   214fc:	adc	r0, r0, r0
   21500:	subcs	r3, r3, r1, lsl #2
   21504:	cmp	r3, r1, lsl #1
   21508:	adc	r0, r0, r0
   2150c:	subcs	r3, r3, r1, lsl #1
   21510:	cmp	r3, r1
   21514:	adc	r0, r0, r0
   21518:	subcs	r3, r3, r1
   2151c:	cmp	ip, #0
   21520:	rsbmi	r0, r0, #0
   21524:	bx	lr
   21528:	teq	ip, r0
   2152c:	rsbmi	r0, r0, #0
   21530:	bx	lr
   21534:	movcc	r0, #0
   21538:	asreq	r0, ip, #31
   2153c:	orreq	r0, r0, #1
   21540:	bx	lr
   21544:	clz	r2, r1
   21548:	rsb	r2, r2, #31
   2154c:	cmp	ip, #0
   21550:	lsr	r0, r3, r2
   21554:	rsbmi	r0, r0, #0
   21558:	bx	lr
   2155c:	cmp	r0, #0
   21560:	mvngt	r0, #-2147483648	; 0x80000000
   21564:	movlt	r0, #-2147483648	; 0x80000000
   21568:	b	2169c <__assert_fail@plt+0xed94>
   2156c:	cmp	r1, #0
   21570:	beq	2155c <__assert_fail@plt+0xec54>
   21574:	push	{r0, r1, lr}
   21578:	bl	21354 <__assert_fail@plt+0xea4c>
   2157c:	pop	{r1, r2, lr}
   21580:	mul	r3, r2, r0
   21584:	sub	r1, r1, r3
   21588:	bx	lr
   2158c:	cmp	r3, #0
   21590:	cmpeq	r2, #0
   21594:	bne	215b8 <__assert_fail@plt+0xecb0>
   21598:	cmp	r1, #0
   2159c:	movlt	r1, #-2147483648	; 0x80000000
   215a0:	movlt	r0, #0
   215a4:	blt	215b4 <__assert_fail@plt+0xecac>
   215a8:	cmpeq	r0, #0
   215ac:	mvnne	r1, #-2147483648	; 0x80000000
   215b0:	mvnne	r0, #0
   215b4:	b	2169c <__assert_fail@plt+0xed94>
   215b8:	sub	sp, sp, #8
   215bc:	push	{sp, lr}
   215c0:	cmp	r1, #0
   215c4:	blt	215e4 <__assert_fail@plt+0xecdc>
   215c8:	cmp	r3, #0
   215cc:	blt	21618 <__assert_fail@plt+0xed10>
   215d0:	bl	216ac <__assert_fail@plt+0xeda4>
   215d4:	ldr	lr, [sp, #4]
   215d8:	add	sp, sp, #8
   215dc:	pop	{r2, r3}
   215e0:	bx	lr
   215e4:	rsbs	r0, r0, #0
   215e8:	sbc	r1, r1, r1, lsl #1
   215ec:	cmp	r3, #0
   215f0:	blt	2163c <__assert_fail@plt+0xed34>
   215f4:	bl	216ac <__assert_fail@plt+0xeda4>
   215f8:	ldr	lr, [sp, #4]
   215fc:	add	sp, sp, #8
   21600:	pop	{r2, r3}
   21604:	rsbs	r0, r0, #0
   21608:	sbc	r1, r1, r1, lsl #1
   2160c:	rsbs	r2, r2, #0
   21610:	sbc	r3, r3, r3, lsl #1
   21614:	bx	lr
   21618:	rsbs	r2, r2, #0
   2161c:	sbc	r3, r3, r3, lsl #1
   21620:	bl	216ac <__assert_fail@plt+0xeda4>
   21624:	ldr	lr, [sp, #4]
   21628:	add	sp, sp, #8
   2162c:	pop	{r2, r3}
   21630:	rsbs	r0, r0, #0
   21634:	sbc	r1, r1, r1, lsl #1
   21638:	bx	lr
   2163c:	rsbs	r2, r2, #0
   21640:	sbc	r3, r3, r3, lsl #1
   21644:	bl	216ac <__assert_fail@plt+0xeda4>
   21648:	ldr	lr, [sp, #4]
   2164c:	add	sp, sp, #8
   21650:	pop	{r2, r3}
   21654:	rsbs	r2, r2, #0
   21658:	sbc	r3, r3, r3, lsl #1
   2165c:	bx	lr
   21660:	cmp	r3, #0
   21664:	cmpeq	r2, #0
   21668:	bne	21680 <__assert_fail@plt+0xed78>
   2166c:	cmp	r1, #0
   21670:	cmpeq	r0, #0
   21674:	mvnne	r1, #0
   21678:	mvnne	r0, #0
   2167c:	b	2169c <__assert_fail@plt+0xed94>
   21680:	sub	sp, sp, #8
   21684:	push	{sp, lr}
   21688:	bl	216ac <__assert_fail@plt+0xeda4>
   2168c:	ldr	lr, [sp, #4]
   21690:	add	sp, sp, #8
   21694:	pop	{r2, r3}
   21698:	bx	lr
   2169c:	push	{r1, lr}
   216a0:	mov	r0, #8
   216a4:	bl	12164 <raise@plt>
   216a8:	pop	{r1, pc}
   216ac:	cmp	r1, r3
   216b0:	cmpeq	r0, r2
   216b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216b8:	mov	r4, r0
   216bc:	movcc	r0, #0
   216c0:	mov	r5, r1
   216c4:	ldr	lr, [sp, #36]	; 0x24
   216c8:	movcc	r1, r0
   216cc:	bcc	217c8 <__assert_fail@plt+0xeec0>
   216d0:	cmp	r3, #0
   216d4:	clzeq	ip, r2
   216d8:	clzne	ip, r3
   216dc:	addeq	ip, ip, #32
   216e0:	cmp	r5, #0
   216e4:	clzeq	r1, r4
   216e8:	addeq	r1, r1, #32
   216ec:	clzne	r1, r5
   216f0:	sub	ip, ip, r1
   216f4:	sub	sl, ip, #32
   216f8:	lsl	r9, r3, ip
   216fc:	rsb	fp, ip, #32
   21700:	orr	r9, r9, r2, lsl sl
   21704:	orr	r9, r9, r2, lsr fp
   21708:	lsl	r8, r2, ip
   2170c:	cmp	r5, r9
   21710:	cmpeq	r4, r8
   21714:	movcc	r0, #0
   21718:	movcc	r1, r0
   2171c:	bcc	21738 <__assert_fail@plt+0xee30>
   21720:	mov	r0, #1
   21724:	subs	r4, r4, r8
   21728:	lsl	r1, r0, sl
   2172c:	orr	r1, r1, r0, lsr fp
   21730:	lsl	r0, r0, ip
   21734:	sbc	r5, r5, r9
   21738:	cmp	ip, #0
   2173c:	beq	217c8 <__assert_fail@plt+0xeec0>
   21740:	lsr	r6, r8, #1
   21744:	orr	r6, r6, r9, lsl #31
   21748:	lsr	r7, r9, #1
   2174c:	mov	r2, ip
   21750:	b	21774 <__assert_fail@plt+0xee6c>
   21754:	subs	r3, r4, r6
   21758:	sbc	r8, r5, r7
   2175c:	adds	r3, r3, r3
   21760:	adc	r8, r8, r8
   21764:	adds	r4, r3, #1
   21768:	adc	r5, r8, #0
   2176c:	subs	r2, r2, #1
   21770:	beq	21790 <__assert_fail@plt+0xee88>
   21774:	cmp	r5, r7
   21778:	cmpeq	r4, r6
   2177c:	bcs	21754 <__assert_fail@plt+0xee4c>
   21780:	adds	r4, r4, r4
   21784:	adc	r5, r5, r5
   21788:	subs	r2, r2, #1
   2178c:	bne	21774 <__assert_fail@plt+0xee6c>
   21790:	lsr	r3, r4, ip
   21794:	orr	r3, r3, r5, lsl fp
   21798:	lsr	r2, r5, ip
   2179c:	orr	r3, r3, r5, lsr sl
   217a0:	adds	r0, r0, r4
   217a4:	mov	r4, r3
   217a8:	lsl	r3, r2, ip
   217ac:	orr	r3, r3, r4, lsl sl
   217b0:	lsl	ip, r4, ip
   217b4:	orr	r3, r3, r4, lsr fp
   217b8:	adc	r1, r1, r5
   217bc:	subs	r0, r0, ip
   217c0:	mov	r5, r2
   217c4:	sbc	r1, r1, r3
   217c8:	cmp	lr, #0
   217cc:	strdne	r4, [lr]
   217d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   217d8:	mov	r7, r0
   217dc:	ldr	r6, [pc, #72]	; 2182c <__assert_fail@plt+0xef24>
   217e0:	ldr	r5, [pc, #72]	; 21830 <__assert_fail@plt+0xef28>
   217e4:	add	r6, pc, r6
   217e8:	add	r5, pc, r5
   217ec:	sub	r6, r6, r5
   217f0:	mov	r8, r1
   217f4:	mov	r9, r2
   217f8:	bl	1212c <gcry_xmalloc@plt-0x20>
   217fc:	asrs	r6, r6, #2
   21800:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21804:	mov	r4, #0
   21808:	add	r4, r4, #1
   2180c:	ldr	r3, [r5], #4
   21810:	mov	r2, r9
   21814:	mov	r1, r8
   21818:	mov	r0, r7
   2181c:	blx	r3
   21820:	cmp	r6, r4
   21824:	bne	21808 <__assert_fail@plt+0xef00>
   21828:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2182c:	andeq	r3, r1, r8, asr #6
   21830:	andeq	r3, r1, r0, asr #6
   21834:	bx	lr
   21838:	ldr	r3, [pc, #12]	; 2184c <__assert_fail@plt+0xef44>
   2183c:	mov	r1, #0
   21840:	add	r3, pc, r3
   21844:	ldr	r2, [r3]
   21848:	b	12644 <__cxa_atexit@plt>
   2184c:			; <UNDEFINED> instruction: 0x000137bc

Disassembly of section .fini:

00021850 <.fini>:
   21850:	push	{r3, lr}
   21854:	pop	{r3, pc}
