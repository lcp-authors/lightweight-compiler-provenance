
raspbian-preinstalled/decode_tm6000:     file format elf32-littlearm


Disassembly of section .init:

000108f4 <.init>:
   108f4:	push	{r3, lr}
   108f8:	bl	10fac <__assert_fail@plt+0x518>
   108fc:	pop	{r3, pc}

Disassembly of section .plt:

00010900 <calloc@plt-0x14>:
   10900:	push	{lr}		; (str lr, [sp, #-4]!)
   10904:	ldr	lr, [pc, #4]	; 10910 <calloc@plt-0x4>
   10908:	add	lr, pc, lr
   1090c:	ldr	pc, [lr, #8]!
   10910:	andeq	r3, r1, ip, asr r6

00010914 <calloc@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #77824	; 0x13000
   1091c:	ldr	pc, [ip, #1628]!	; 0x65c

00010920 <strtol@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #77824	; 0x13000
   10928:	ldr	pc, [ip, #1620]!	; 0x654

0001092c <fopen@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #77824	; 0x13000
   10934:	ldr	pc, [ip, #1612]!	; 0x64c

00010938 <read@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #77824	; 0x13000
   10940:	ldr	pc, [ip, #1604]!	; 0x644

00010944 <fflush@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #77824	; 0x13000
   1094c:	ldr	pc, [ip, #1596]!	; 0x63c

00010950 <free@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #77824	; 0x13000
   10958:	ldr	pc, [ip, #1588]!	; 0x634

0001095c <memcpy@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #77824	; 0x13000
   10964:	ldr	pc, [ip, #1580]!	; 0x62c

00010968 <select@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #77824	; 0x13000
   10970:	ldr	pc, [ip, #1572]!	; 0x624

00010974 <sleep@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #77824	; 0x13000
   1097c:	ldr	pc, [ip, #1564]!	; 0x61c

00010980 <__stack_chk_fail@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #77824	; 0x13000
   10988:	ldr	pc, [ip, #1556]!	; 0x614

0001098c <__fdelt_chk@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #77824	; 0x13000
   10994:	ldr	pc, [ip, #1548]!	; 0x60c

00010998 <perror@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #77824	; 0x13000
   109a0:	ldr	pc, [ip, #1540]!	; 0x604

000109a4 <__memcpy_chk@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #77824	; 0x13000
   109ac:	ldr	pc, [ip, #1532]!	; 0x5fc

000109b0 <argp_error@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #77824	; 0x13000
   109b8:	ldr	pc, [ip, #1524]!	; 0x5f4

000109bc <fwrite@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #77824	; 0x13000
   109c4:	ldr	pc, [ip, #1516]!	; 0x5ec

000109c8 <ioctl@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #77824	; 0x13000
   109d0:	ldr	pc, [ip, #1508]!	; 0x5e4

000109d4 <puts@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #77824	; 0x13000
   109dc:	ldr	pc, [ip, #1500]!	; 0x5dc

000109e0 <__libc_start_main@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #77824	; 0x13000
   109e8:	ldr	pc, [ip, #1492]!	; 0x5d4

000109ec <__gmon_start__@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #77824	; 0x13000
   109f4:	ldr	pc, [ip, #1484]!	; 0x5cc

000109f8 <open@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #77824	; 0x13000
   10a00:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a04 <mmap@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #77824	; 0x13000
   10a0c:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a10 <__errno_location@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #77824	; 0x13000
   10a18:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a1c <__strcat_chk@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #77824	; 0x13000
   10a24:	ldr	pc, [ip, #1452]!	; 0x5ac

00010a28 <__sprintf_chk@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #77824	; 0x13000
   10a30:	ldr	pc, [ip, #1444]!	; 0x5a4

00010a34 <memset@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #77824	; 0x13000
   10a3c:	ldr	pc, [ip, #1436]!	; 0x59c

00010a40 <argp_parse@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #77824	; 0x13000
   10a48:	ldr	pc, [ip, #1428]!	; 0x594

00010a4c <__printf_chk@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #77824	; 0x13000
   10a54:	ldr	pc, [ip, #1420]!	; 0x58c

00010a58 <strtod@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #77824	; 0x13000
   10a60:	ldr	pc, [ip, #1412]!	; 0x584

00010a64 <__fprintf_chk@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #77824	; 0x13000
   10a6c:	ldr	pc, [ip, #1404]!	; 0x57c

00010a70 <munmap@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #77824	; 0x13000
   10a78:	ldr	pc, [ip, #1396]!	; 0x574

00010a7c <abort@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #77824	; 0x13000
   10a84:	ldr	pc, [ip, #1388]!	; 0x56c

00010a88 <close@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #77824	; 0x13000
   10a90:	ldr	pc, [ip, #1380]!	; 0x564

00010a94 <__assert_fail@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #77824	; 0x13000
   10a9c:	ldr	pc, [ip, #1372]!	; 0x55c

Disassembly of section .text:

00010aa0 <.text>:
   10aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10aa4:	sub	sp, sp, #688128	; 0xa8000
   10aa8:	ldr	r3, [pc, #1116]	; 10f0c <__assert_fail@plt+0x478>
   10aac:	sub	sp, sp, #3872	; 0xf20
   10ab0:	ldr	ip, [pc, #1112]	; 10f10 <__assert_fail@plt+0x47c>
   10ab4:	sub	sp, sp, #4
   10ab8:	ldr	r3, [r3]
   10abc:	add	ip, sp, ip
   10ac0:	ldr	sl, [pc, #1100]	; 10f14 <__assert_fail@plt+0x480>
   10ac4:	ldr	r8, [pc, #1100]	; 10f18 <__assert_fail@plt+0x484>
   10ac8:	mov	r4, #0
   10acc:	mov	r2, r1
   10ad0:	str	r4, [sp, #4]
   10ad4:	mov	r1, r0
   10ad8:	str	r4, [sp]
   10adc:	add	r0, sl, #16
   10ae0:	str	r3, [ip]
   10ae4:	mov	r3, r4
   10ae8:	bl	10a40 <argp_parse@plt>
   10aec:	ldr	r5, [r8, #8]
   10af0:	cmp	r5, #1
   10af4:	beq	10ca4 <__assert_fail@plt+0x210>
   10af8:	add	r5, sp, #244	; 0xf4
   10afc:	mov	r2, #372	; 0x174
   10b00:	mov	r1, r4
   10b04:	mov	r0, r5
   10b08:	bl	10a34 <memset@plt>
   10b0c:	mov	r2, r5
   10b10:	mov	r1, #1
   10b14:	ldr	r0, [sl, #4]
   10b18:	bl	11938 <__assert_fail@plt+0xea4>
   10b1c:	cmp	r0, r4
   10b20:	blt	10ed8 <__assert_fail@plt+0x444>
   10b24:	mov	r2, #204	; 0xcc
   10b28:	mov	r1, r4
   10b2c:	add	r0, sp, #40	; 0x28
   10b30:	bl	10a34 <memset@plt>
   10b34:	ldr	r1, [pc, #992]	; 10f1c <__assert_fail@plt+0x488>
   10b38:	mov	r3, #480	; 0x1e0
   10b3c:	str	r3, [sp]
   10b40:	stmib	sp, {r1, r4}
   10b44:	add	r2, sp, #40	; 0x28
   10b48:	mov	r3, #720	; 0x2d0
   10b4c:	mov	r1, #2
   10b50:	mov	r0, r5
   10b54:	bl	12140 <__assert_fail@plt+0x16ac>
   10b58:	cmp	r0, #0
   10b5c:	bne	10ee4 <__assert_fail@plt+0x450>
   10b60:	vldr	s15, [sl, #8]
   10b64:	vcmp.f32	s15, #0.0
   10b68:	vmrs	APSR_nzcv, fpscr
   10b6c:	bne	10c5c <__assert_fail@plt+0x1c8>
   10b70:	ldr	r3, [sl]
   10b74:	cmp	r3, #0
   10b78:	bne	10c10 <__assert_fail@plt+0x17c>
   10b7c:	ldr	r0, [pc, #924]	; 10f20 <__assert_fail@plt+0x48c>
   10b80:	bl	109d4 <puts@plt>
   10b84:	ldr	r6, [sp, #244]	; 0xf4
   10b88:	ldr	r3, [r8, #8]
   10b8c:	cmp	r3, #2
   10b90:	beq	10d1c <__assert_fail@plt+0x288>
   10b94:	add	r3, sp, #616	; 0x268
   10b98:	add	r9, r3, #179	; 0xb3
   10b9c:	add	r5, sp, #244	; 0xf4
   10ba0:	mov	r7, #0
   10ba4:	mov	r4, r7
   10ba8:	b	10bc4 <__assert_fail@plt+0x130>
   10bac:	lsl	r0, r0, #24
   10bb0:	orr	r4, r0, r4, lsr #8
   10bb4:	add	r7, r7, #1
   10bb8:	lsr	r3, r4, #24
   10bbc:	cmp	r3, #71	; 0x47
   10bc0:	beq	10cd0 <__assert_fail@plt+0x23c>
   10bc4:	mov	r1, r6
   10bc8:	mov	r0, r5
   10bcc:	bl	1138c <__assert_fail@plt+0x8f8>
   10bd0:	cmp	r0, #0
   10bd4:	bge	10bac <__assert_fail@plt+0x118>
   10bd8:	ldr	r0, [pc, #836]	; 10f24 <__assert_fail@plt+0x490>
   10bdc:	bl	10998 <perror@plt>
   10be0:	ldr	r3, [pc, #808]	; 10f10 <__assert_fail@plt+0x47c>
   10be4:	mvn	r0, #0
   10be8:	add	r3, sp, r3
   10bec:	ldr	r2, [r3]
   10bf0:	ldr	r3, [pc, #788]	; 10f0c <__assert_fail@plt+0x478>
   10bf4:	ldr	r3, [r3]
   10bf8:	cmp	r2, r3
   10bfc:	bne	10f04 <__assert_fail@plt+0x470>
   10c00:	add	sp, sp, #688128	; 0xa8000
   10c04:	add	sp, sp, #3872	; 0xf20
   10c08:	add	sp, sp, #4
   10c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c10:	ldr	r2, [sl, #12]
   10c14:	ldr	r1, [pc, #780]	; 10f28 <__assert_fail@plt+0x494>
   10c18:	mov	r0, #1
   10c1c:	bl	10a4c <__printf_chk@plt>
   10c20:	ldr	r3, [pc, #772]	; 10f2c <__assert_fail@plt+0x498>
   10c24:	ldr	r0, [r3]
   10c28:	bl	10944 <fflush@plt>
   10c2c:	ldr	r1, [sl, #12]
   10c30:	mov	r0, r5
   10c34:	bl	12580 <__assert_fail@plt+0x1aec>
   10c38:	cmp	r0, #0
   10c3c:	blt	10ef0 <__assert_fail@plt+0x45c>
   10c40:	mov	r0, r5
   10c44:	bl	129e8 <__assert_fail@plt+0x1f54>
   10c48:	cmp	r0, #0
   10c4c:	bge	10b7c <__assert_fail@plt+0xe8>
   10c50:	ldr	r0, [pc, #728]	; 10f30 <__assert_fail@plt+0x49c>
   10c54:	bl	109d4 <puts@plt>
   10c58:	b	10be0 <__assert_fail@plt+0x14c>
   10c5c:	vldr	s13, [pc, #676]	; 10f08 <__assert_fail@plt+0x474>
   10c60:	add	r2, sp, #32
   10c64:	mov	r1, #2
   10c68:	mov	r0, r5
   10c6c:	vmul.f32	s14, s15, s13
   10c70:	vmul.f32	s14, s14, s13
   10c74:	vcvt.f64.f32	d7, s14
   10c78:	vstr	d7, [sp, #32]
   10c7c:	bl	12b58 <__assert_fail@plt+0x20c4>
   10c80:	cmp	r0, #0
   10c84:	bge	10b70 <__assert_fail@plt+0xdc>
   10c88:	vldr	s15, [sl, #8]
   10c8c:	ldr	r1, [pc, #672]	; 10f34 <__assert_fail@plt+0x4a0>
   10c90:	mov	r0, #1
   10c94:	vcvt.f64.f32	d7, s15
   10c98:	vmov	r2, r3, d7
   10c9c:	bl	10a4c <__printf_chk@plt>
   10ca0:	b	10b70 <__assert_fail@plt+0xdc>
   10ca4:	mov	r1, r4
   10ca8:	ldr	r0, [r8, #12]
   10cac:	bl	109f8 <open@plt>
   10cb0:	subs	r6, r0, #0
   10cb4:	blt	10dac <__assert_fail@plt+0x318>
   10cb8:	ldr	r3, [r8, #4]
   10cbc:	cmp	r3, #0
   10cc0:	bne	10d00 <__assert_fail@plt+0x26c>
   10cc4:	mov	r3, #0
   10cc8:	str	r3, [sl]
   10ccc:	b	10b88 <__assert_fail@plt+0xf4>
   10cd0:	add	r3, sp, #616	; 0x268
   10cd4:	sub	fp, r3, #1
   10cd8:	b	10ce8 <__assert_fail@plt+0x254>
   10cdc:	strb	r0, [fp, #1]!
   10ce0:	cmp	r9, fp
   10ce4:	beq	10db8 <__assert_fail@plt+0x324>
   10ce8:	mov	r1, r6
   10cec:	mov	r0, r5
   10cf0:	bl	1138c <__assert_fail@plt+0x8f8>
   10cf4:	cmp	r0, #0
   10cf8:	bge	10cdc <__assert_fail@plt+0x248>
   10cfc:	b	10bd8 <__assert_fail@plt+0x144>
   10d00:	ldr	r2, [pc, #560]	; 10f38 <__assert_fail@plt+0x4a4>
   10d04:	mov	r1, r5
   10d08:	ldr	r3, [r8, #12]
   10d0c:	ldr	r0, [r2]
   10d10:	ldr	r2, [pc, #548]	; 10f3c <__assert_fail@plt+0x4a8>
   10d14:	bl	10a64 <__fprintf_chk@plt>
   10d18:	b	10cc4 <__assert_fail@plt+0x230>
   10d1c:	ldr	r1, [pc, #540]	; 10f40 <__assert_fail@plt+0x4ac>
   10d20:	ldr	r0, [r8, #12]
   10d24:	bl	1092c <fopen@plt>
   10d28:	cmp	r0, #0
   10d2c:	str	r0, [r8, #24]
   10d30:	beq	10eb0 <__assert_fail@plt+0x41c>
   10d34:	ldr	r3, [r8, #4]
   10d38:	cmp	r3, #0
   10d3c:	bne	10e94 <__assert_fail@plt+0x400>
   10d40:	ldr	sl, [pc, #496]	; 10f38 <__assert_fail@plt+0x4a4>
   10d44:	ldr	r9, [pc, #504]	; 10f44 <__assert_fail@plt+0x4b0>
   10d48:	ldr	r7, [pc, #504]	; 10f48 <__assert_fail@plt+0x4b4>
   10d4c:	add	r5, sp, #244	; 0xf4
   10d50:	b	10d68 <__assert_fail@plt+0x2d4>
   10d54:	mov	r2, r4
   10d58:	ldr	r3, [r8, #24]
   10d5c:	mov	r1, #1
   10d60:	mov	r0, r7
   10d64:	bl	109bc <fwrite@plt>
   10d68:	mov	r1, r6
   10d6c:	mov	r0, r5
   10d70:	bl	11238 <__assert_fail@plt+0x7a4>
   10d74:	subs	r4, r0, #0
   10d78:	beq	10da0 <__assert_fail@plt+0x30c>
   10d7c:	ldr	r3, [r8, #4]
   10d80:	cmp	r3, #0
   10d84:	beq	10d54 <__assert_fail@plt+0x2c0>
   10d88:	mov	r3, r4
   10d8c:	mov	r2, r9
   10d90:	mov	r1, #1
   10d94:	ldr	r0, [sl]
   10d98:	bl	10a64 <__fprintf_chk@plt>
   10d9c:	b	10d54 <__assert_fail@plt+0x2c0>
   10da0:	mov	r0, r6
   10da4:	bl	10a88 <close@plt>
   10da8:	b	10be0 <__assert_fail@plt+0x14c>
   10dac:	ldr	r0, [pc, #408]	; 10f4c <__assert_fail@plt+0x4b8>
   10db0:	bl	10998 <perror@plt>
   10db4:	b	10be0 <__assert_fail@plt+0x14c>
   10db8:	lsr	r2, r4, #7
   10dbc:	ldr	r0, [pc, #396]	; 10f50 <__assert_fail@plt+0x4bc>
   10dc0:	and	r2, r2, #15
   10dc4:	mov	r1, #180	; 0xb4
   10dc8:	lsr	r3, r4, #11
   10dcc:	and	r0, r0, r4, lsr #12
   10dd0:	mul	r1, r1, r2
   10dd4:	and	r3, r3, #1
   10dd8:	add	ip, r3, r0, lsl #1
   10ddc:	mov	lr, #1440	; 0x5a0
   10de0:	ldr	fp, [r8, #4]
   10de4:	mla	r1, lr, ip, r1
   10de8:	cmp	fp, #0
   10dec:	lsr	fp, r4, #21
   10df0:	str	r1, [sp, #28]
   10df4:	and	fp, fp, #7
   10df8:	bne	10e48 <__assert_fail@plt+0x3b4>
   10dfc:	ldr	r2, [sp, #28]
   10e00:	ldr	r3, [pc, #332]	; 10f54 <__assert_fail@plt+0x4c0>
   10e04:	add	r2, r2, #180	; 0xb4
   10e08:	cmp	r2, r3
   10e0c:	bhi	10ba0 <__assert_fail@plt+0x10c>
   10e10:	cmp	fp, #1
   10e14:	beq	10ebc <__assert_fail@plt+0x428>
   10e18:	cmp	fp, #2
   10e1c:	bne	10ba0 <__assert_fail@plt+0x10c>
   10e20:	ldr	r3, [r8]
   10e24:	cmp	r3, #0
   10e28:	beq	10ba0 <__assert_fail@plt+0x10c>
   10e2c:	ldr	r3, [pc, #248]	; 10f2c <__assert_fail@plt+0x498>
   10e30:	mov	r2, #1
   10e34:	mov	r1, #180	; 0xb4
   10e38:	ldr	r3, [r3]
   10e3c:	add	r0, sp, #616	; 0x268
   10e40:	bl	109bc <fwrite@plt>
   10e44:	b	10ba0 <__assert_fail@plt+0x10c>
   10e48:	lsl	r1, r4, #1
   10e4c:	add	ip, sl, fp, lsl #2
   10e50:	and	r1, r1, #252	; 0xfc
   10e54:	ldr	ip, [ip, #44]	; 0x2c
   10e58:	sub	r1, r1, #-1073741823	; 0xc0000001
   10e5c:	str	r2, [sp, #20]
   10e60:	ldr	r2, [pc, #208]	; 10f38 <__assert_fail@plt+0x4a4>
   10e64:	lsl	r1, r1, #2
   10e68:	str	r3, [sp, #16]
   10e6c:	str	r1, [sp, #8]
   10e70:	str	r0, [sp, #12]
   10e74:	str	r7, [sp]
   10e78:	str	ip, [sp, #4]
   10e7c:	mov	r3, r4
   10e80:	ldr	r0, [r2]
   10e84:	mov	r1, #1
   10e88:	ldr	r2, [pc, #200]	; 10f58 <__assert_fail@plt+0x4c4>
   10e8c:	bl	10a64 <__fprintf_chk@plt>
   10e90:	b	10dfc <__assert_fail@plt+0x368>
   10e94:	ldr	r1, [pc, #156]	; 10f38 <__assert_fail@plt+0x4a4>
   10e98:	ldr	r3, [r8, #12]
   10e9c:	ldr	r2, [pc, #184]	; 10f5c <__assert_fail@plt+0x4c8>
   10ea0:	ldr	r0, [r1]
   10ea4:	mov	r1, #1
   10ea8:	bl	10a64 <__fprintf_chk@plt>
   10eac:	b	10d40 <__assert_fail@plt+0x2ac>
   10eb0:	ldr	r0, [pc, #168]	; 10f60 <__assert_fail@plt+0x4cc>
   10eb4:	bl	10998 <perror@plt>
   10eb8:	b	10be0 <__assert_fail@plt+0x14c>
   10ebc:	ldr	r2, [sp, #28]
   10ec0:	add	r3, sp, #796	; 0x31c
   10ec4:	add	r1, r3, r2
   10ec8:	add	r0, sp, #616	; 0x268
   10ecc:	mov	r2, #180	; 0xb4
   10ed0:	bl	1095c <memcpy@plt>
   10ed4:	b	10e20 <__assert_fail@plt+0x38c>
   10ed8:	ldr	r0, [pc, #132]	; 10f64 <__assert_fail@plt+0x4d0>
   10edc:	bl	10998 <perror@plt>
   10ee0:	b	10be0 <__assert_fail@plt+0x14c>
   10ee4:	ldr	r0, [pc, #124]	; 10f68 <__assert_fail@plt+0x4d4>
   10ee8:	bl	10998 <perror@plt>
   10eec:	b	10be0 <__assert_fail@plt+0x14c>
   10ef0:	ldr	r2, [sl, #12]
   10ef4:	ldr	r1, [pc, #112]	; 10f6c <__assert_fail@plt+0x4d8>
   10ef8:	mov	r0, #1
   10efc:	bl	10a4c <__printf_chk@plt>
   10f00:	b	10be0 <__assert_fail@plt+0x14c>
   10f04:	bl	10980 <__stack_chk_fail@plt>
   10f08:	ldrbtmi	r0, [sl], #-0
   10f0c:	andeq	r3, r2, r8, ror #28
   10f10:	andeq	r8, sl, ip, lsl pc
   10f14:	andeq	r4, r2, r8
   10f18:	andeq	r4, r2, ip, lsr #1
   10f1c:	eorscc	r4, r6, r4, asr sp
   10f20:	andeq	r3, r1, r0
   10f24:	andeq	r3, r1, ip, lsr #1
   10f28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   10f2c:	andeq	r4, r2, r4, lsr #1
   10f30:	andeq	r2, r1, r8, ror #31
   10f34:	andeq	r2, r1, ip, ror pc
   10f38:	andeq	r4, r2, r0, lsr #1
   10f3c:	andeq	r3, r1, ip, lsr r0
   10f40:	andeq	r3, r1, r8, asr r0
   10f44:	muleq	r1, r8, r0
   10f48:	andeq	r4, r2, r8, asr #1
   10f4c:	andeq	r3, r1, r8, lsl r0
   10f50:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10f54:	andeq	r8, sl, r0, lsl #24
   10f58:	strheq	r3, [r1], -r4
   10f5c:	andeq	r3, r1, ip, ror r0
   10f60:	andeq	r3, r1, ip, asr r0
   10f64:	andeq	r2, r1, r8, asr #30
   10f68:	andeq	r2, r1, ip, asr pc
   10f6c:	ldrdeq	r2, [r1], -r0
   10f70:	mov	fp, #0
   10f74:	mov	lr, #0
   10f78:	pop	{r1}		; (ldr r1, [sp], #4)
   10f7c:	mov	r2, sp
   10f80:	push	{r2}		; (str r2, [sp, #-4]!)
   10f84:	push	{r0}		; (str r0, [sp, #-4]!)
   10f88:	ldr	ip, [pc, #16]	; 10fa0 <__assert_fail@plt+0x50c>
   10f8c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f90:	ldr	r0, [pc, #12]	; 10fa4 <__assert_fail@plt+0x510>
   10f94:	ldr	r3, [pc, #12]	; 10fa8 <__assert_fail@plt+0x514>
   10f98:	bl	109e0 <__libc_start_main@plt>
   10f9c:	bl	10a7c <abort@plt>
   10fa0:	ldrdeq	r2, [r1], -r4
   10fa4:	andeq	r0, r1, r0, lsr #21
   10fa8:	andeq	r2, r1, r4, ror sp
   10fac:	ldr	r3, [pc, #20]	; 10fc8 <__assert_fail@plt+0x534>
   10fb0:	ldr	r2, [pc, #20]	; 10fcc <__assert_fail@plt+0x538>
   10fb4:	add	r3, pc, r3
   10fb8:	ldr	r2, [r3, r2]
   10fbc:	cmp	r2, #0
   10fc0:	bxeq	lr
   10fc4:	b	109ec <__gmon_start__@plt>
   10fc8:			; <UNDEFINED> instruction: 0x00012fb0
   10fcc:	muleq	r0, r0, r0
   10fd0:	ldr	r0, [pc, #24]	; 10ff0 <__assert_fail@plt+0x55c>
   10fd4:	ldr	r3, [pc, #24]	; 10ff4 <__assert_fail@plt+0x560>
   10fd8:	cmp	r3, r0
   10fdc:	bxeq	lr
   10fe0:	ldr	r3, [pc, #16]	; 10ff8 <__assert_fail@plt+0x564>
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	bx	r3
   10ff0:	muleq	r2, ip, r0
   10ff4:	muleq	r2, ip, r0
   10ff8:	andeq	r0, r0, r0
   10ffc:	ldr	r0, [pc, #36]	; 11028 <__assert_fail@plt+0x594>
   11000:	ldr	r1, [pc, #36]	; 1102c <__assert_fail@plt+0x598>
   11004:	sub	r1, r1, r0
   11008:	asr	r1, r1, #2
   1100c:	add	r1, r1, r1, lsr #31
   11010:	asrs	r1, r1, #1
   11014:	bxeq	lr
   11018:	ldr	r3, [pc, #16]	; 11030 <__assert_fail@plt+0x59c>
   1101c:	cmp	r3, #0
   11020:	bxeq	lr
   11024:	bx	r3
   11028:	muleq	r2, ip, r0
   1102c:	muleq	r2, ip, r0
   11030:	andeq	r0, r0, r0
   11034:	push	{r4, lr}
   11038:	ldr	r4, [pc, #24]	; 11058 <__assert_fail@plt+0x5c4>
   1103c:	ldrb	r3, [r4]
   11040:	cmp	r3, #0
   11044:	popne	{r4, pc}
   11048:	bl	10fd0 <__assert_fail@plt+0x53c>
   1104c:	mov	r3, #1
   11050:	strb	r3, [r4]
   11054:	pop	{r4, pc}
   11058:	andeq	r4, r2, r8, lsr #1
   1105c:	b	10ffc <__assert_fail@plt+0x568>
   11060:	sub	r3, r0, #97	; 0x61
   11064:	push	{r4, lr}
   11068:	cmp	r3, #21
   1106c:	ldrls	pc, [pc, r3, lsl #2]
   11070:	b	111a4 <__assert_fail@plt+0x710>
   11074:	andeq	r1, r1, r4, ror #1
   11078:	andeq	r1, r1, r4, lsr #3
   1107c:	andeq	r1, r1, r4, lsr #3
   11080:	strdeq	r1, [r1], -ip
   11084:	andeq	r1, r1, r4, lsr #3
   11088:	andeq	r1, r1, ip, lsl #2
   1108c:	andeq	r1, r1, r4, lsr #3
   11090:	andeq	r1, r1, r4, lsr #3
   11094:	andeq	r1, r1, ip, lsr #2
   11098:	andeq	r1, r1, r4, lsr #3
   1109c:	andeq	r1, r1, r4, lsr #3
   110a0:	andeq	r1, r1, r4, lsr #3
   110a4:	andeq	r1, r1, r4, lsr #3
   110a8:	andeq	r1, r1, r8, asr r1
   110ac:	andeq	r1, r1, ip, lsr #2
   110b0:	andeq	r1, r1, r4, lsr #3
   110b4:	andeq	r1, r1, r4, lsr #3
   110b8:	muleq	r1, r0, r1
   110bc:	andeq	r1, r1, r4, lsr #3
   110c0:	andeq	r1, r1, r4, lsr #3
   110c4:	andeq	r1, r1, r4, lsr #3
   110c8:	andeq	r1, r1, ip, asr #1
   110cc:	ldr	r2, [pc, #236]	; 111c0 <__assert_fail@plt+0x72c>
   110d0:	mov	r0, #0
   110d4:	ldr	r3, [r2, #4]
   110d8:	add	r3, r3, #1
   110dc:	str	r3, [r2, #4]
   110e0:	pop	{r4, pc}
   110e4:	ldr	r2, [pc, #212]	; 111c0 <__assert_fail@plt+0x72c>
   110e8:	mov	r0, #0
   110ec:	ldr	r3, [r2]
   110f0:	add	r3, r3, #1
   110f4:	str	r3, [r2]
   110f8:	pop	{r4, pc}
   110fc:	ldr	r3, [pc, #192]	; 111c4 <__assert_fail@plt+0x730>
   11100:	mov	r0, #0
   11104:	str	r1, [r3, #4]
   11108:	pop	{r4, pc}
   1110c:	mov	r0, r1
   11110:	mov	r1, #0
   11114:	bl	10a58 <strtod@plt>
   11118:	ldr	r3, [pc, #164]	; 111c4 <__assert_fail@plt+0x730>
   1111c:	mov	r0, #0
   11120:	vcvt.f32.f64	s0, d0
   11124:	vstr	s0, [r3, #8]
   11128:	pop	{r4, pc}
   1112c:	ldr	r3, [pc, #140]	; 111c0 <__assert_fail@plt+0x72c>
   11130:	ldr	ip, [r3, #8]
   11134:	cmp	ip, #0
   11138:	bne	111ac <__assert_fail@plt+0x718>
   1113c:	cmp	r0, #105	; 0x69
   11140:	moveq	r2, #1
   11144:	movne	r2, #2
   11148:	str	r1, [r3, #12]
   1114c:	mov	r0, ip
   11150:	str	r2, [r3, #8]
   11154:	pop	{r4, pc}
   11158:	mov	r2, #10
   1115c:	mov	r0, r1
   11160:	mov	r1, #0
   11164:	bl	10920 <strtol@plt>
   11168:	cmp	r0, #1
   1116c:	mov	r3, r0
   11170:	ldrgt	r2, [pc, #76]	; 111c4 <__assert_fail@plt+0x730>
   11174:	ldrle	r3, [pc, #72]	; 111c4 <__assert_fail@plt+0x730>
   11178:	movle	r2, #2
   1117c:	movgt	r0, #0
   11180:	strgt	r3, [r2, #12]
   11184:	strle	r2, [r3, #12]
   11188:	movle	r0, #0
   1118c:	pop	{r4, pc}
   11190:	ldr	r2, [pc, #44]	; 111c4 <__assert_fail@plt+0x730>
   11194:	mov	r3, #0
   11198:	mov	r0, r3
   1119c:	str	r3, [r2]
   111a0:	pop	{r4, pc}
   111a4:	mov	r0, #7
   111a8:	pop	{r4, pc}
   111ac:	mov	r0, r2
   111b0:	ldr	r1, [pc, #16]	; 111c8 <__assert_fail@plt+0x734>
   111b4:	bl	109b0 <argp_error@plt>
   111b8:	mov	r0, #0
   111bc:	pop	{r4, pc}
   111c0:	andeq	r4, r2, ip, lsr #1
   111c4:	andeq	r4, r2, r8
   111c8:	andeq	r2, r1, r8, ror #29
   111cc:	ldr	r3, [pc, #80]	; 11224 <__assert_fail@plt+0x790>
   111d0:	push	{r4, lr}
   111d4:	mov	r4, r1
   111d8:	ldr	r3, [r3, #4]
   111dc:	cmp	r3, #0
   111e0:	bne	11208 <__assert_fail@plt+0x774>
   111e4:	ldr	r3, [pc, #60]	; 11228 <__assert_fail@plt+0x794>
   111e8:	ldr	r0, [r3]
   111ec:	bl	10944 <fflush@plt>
   111f0:	mov	r3, #692224	; 0xa9000
   111f4:	ldm	r4, {r1, r2}
   111f8:	ldr	r0, [pc, #44]	; 1122c <__assert_fail@plt+0x798>
   111fc:	bl	109a4 <__memcpy_chk@plt>
   11200:	ldr	r0, [r4, #4]
   11204:	pop	{r4, pc}
   11208:	ldr	r1, [pc, #32]	; 11230 <__assert_fail@plt+0x79c>
   1120c:	ldr	r3, [r4, #4]
   11210:	ldr	r2, [pc, #28]	; 11234 <__assert_fail@plt+0x7a0>
   11214:	ldr	r0, [r1]
   11218:	mov	r1, #1
   1121c:	bl	10a64 <__fprintf_chk@plt>
   11220:	b	111e4 <__assert_fail@plt+0x750>
   11224:	andeq	r4, r2, ip, lsr #1
   11228:	andeq	r4, r2, r4, lsr #1
   1122c:	andeq	r4, r2, r8, asr #1
   11230:	andeq	r4, r2, r0, lsr #1
   11234:	andeq	r2, r1, ip, lsl pc
   11238:	ldr	r3, [pc, #304]	; 11370 <__assert_fail@plt+0x8dc>
   1123c:	push	{r4, r5, r6, r7, r8, lr}
   11240:	sub	sp, sp, #152	; 0x98
   11244:	ldr	r6, [pc, #296]	; 11374 <__assert_fail@plt+0x8e0>
   11248:	ldr	r2, [r3]
   1124c:	mov	r5, r1
   11250:	ldr	r3, [r6]
   11254:	cmp	r2, #0
   11258:	str	r3, [sp, #148]	; 0x94
   1125c:	beq	11344 <__assert_fail@plt+0x8b0>
   11260:	mov	r7, r0
   11264:	add	r3, sp, #16
   11268:	add	r2, sp, #144	; 0x90
   1126c:	mov	r4, #0
   11270:	str	r4, [r3, #4]!
   11274:	cmp	r3, r2
   11278:	bne	11270 <__assert_fail@plt+0x7dc>
   1127c:	mov	r0, r5
   11280:	bl	1098c <__fdelt_chk@plt>
   11284:	rsbs	r3, r5, #0
   11288:	add	ip, sp, #152	; 0x98
   1128c:	and	r3, r3, #31
   11290:	str	r4, [sp, #16]
   11294:	and	lr, r5, #31
   11298:	rsbpl	lr, r3, #0
   1129c:	add	r3, sp, #12
   112a0:	str	r3, [sp]
   112a4:	mov	r8, #1
   112a8:	mov	r3, #0
   112ac:	mov	r1, #2
   112b0:	str	r1, [sp, #12]
   112b4:	mov	r2, r3
   112b8:	add	r1, sp, #20
   112bc:	add	r4, ip, r0, lsl #2
   112c0:	add	r0, r5, r8
   112c4:	ldr	ip, [r4, #-132]	; 0xffffff7c
   112c8:	orr	ip, ip, r8, lsl lr
   112cc:	str	ip, [r4, #-132]	; 0xffffff7c
   112d0:	bl	10968 <select@plt>
   112d4:	cmn	r0, #1
   112d8:	beq	11320 <__assert_fail@plt+0x88c>
   112dc:	cmp	r0, #0
   112e0:	bne	11334 <__assert_fail@plt+0x8a0>
   112e4:	ldr	r3, [pc, #140]	; 11378 <__assert_fail@plt+0x8e4>
   112e8:	mov	r1, r8
   112ec:	mov	r2, #15
   112f0:	ldr	r3, [r3]
   112f4:	ldr	r0, [pc, #128]	; 1137c <__assert_fail@plt+0x8e8>
   112f8:	bl	109bc <fwrite@plt>
   112fc:	bl	10a10 <__errno_location@plt>
   11300:	ldr	r0, [r0]
   11304:	rsb	r0, r0, #0
   11308:	ldr	r2, [sp, #148]	; 0x94
   1130c:	ldr	r3, [r6]
   11310:	cmp	r2, r3
   11314:	bne	1136c <__assert_fail@plt+0x8d8>
   11318:	add	sp, sp, #152	; 0x98
   1131c:	pop	{r4, r5, r6, r7, r8, pc}
   11320:	bl	10a10 <__errno_location@plt>
   11324:	ldr	r3, [r0]
   11328:	mov	r4, r0
   1132c:	cmp	r3, #4
   11330:	beq	11358 <__assert_fail@plt+0x8c4>
   11334:	mov	r0, r7
   11338:	ldr	r1, [pc, #64]	; 11380 <__assert_fail@plt+0x8ec>
   1133c:	bl	128a4 <__assert_fail@plt+0x1e10>
   11340:	b	11308 <__assert_fail@plt+0x874>
   11344:	mov	r0, r1
   11348:	mov	r2, #692224	; 0xa9000
   1134c:	ldr	r1, [pc, #48]	; 11384 <__assert_fail@plt+0x8f0>
   11350:	bl	10938 <read@plt>
   11354:	b	11308 <__assert_fail@plt+0x874>
   11358:	ldr	r0, [pc, #40]	; 11388 <__assert_fail@plt+0x8f4>
   1135c:	bl	10998 <perror@plt>
   11360:	ldr	r0, [r4]
   11364:	rsb	r0, r0, #0
   11368:	b	11308 <__assert_fail@plt+0x874>
   1136c:	bl	10980 <__stack_chk_fail@plt>
   11370:	andeq	r4, r2, r8
   11374:	andeq	r3, r2, r8, ror #28
   11378:	andeq	r4, r2, r0, lsr #1
   1137c:	andeq	r2, r1, r8, lsr pc
   11380:	andeq	r1, r1, ip, asr #3
   11384:	andeq	r4, r2, r8, asr #1
   11388:	andeq	r2, r1, r0, lsr pc
   1138c:	push	{r4, lr}
   11390:	ldr	r4, [pc, #60]	; 113d4 <__assert_fail@plt+0x940>
   11394:	ldr	r2, [r4, #16]
   11398:	cmp	r2, #0
   1139c:	ble	113b4 <__assert_fail@plt+0x920>
   113a0:	ldr	r3, [r4, #20]
   113a4:	ldrb	r0, [r3], #1
   113a8:	sub	r2, r2, #1
   113ac:	strd	r2, [r4, #16]
   113b0:	pop	{r4, pc}
   113b4:	bl	11238 <__assert_fail@plt+0x7a4>
   113b8:	cmp	r0, #0
   113bc:	mov	r2, r0
   113c0:	str	r0, [r4, #16]
   113c4:	ldrgt	r3, [pc, #12]	; 113d8 <__assert_fail@plt+0x944>
   113c8:	bgt	113a4 <__assert_fail@plt+0x910>
   113cc:	mvn	r0, #0
   113d0:	pop	{r4, pc}
   113d4:	andeq	r4, r2, ip, lsr #1
   113d8:	andeq	r4, r2, r8, asr #1
   113dc:	andeq	r0, r0, r0
   113e0:	push	{r4, r5, r6, r7, r8, lr}
   113e4:	mov	r7, r0
   113e8:	mov	r6, r1
   113ec:	mov	r5, r2
   113f0:	b	11404 <__assert_fail@plt+0x970>
   113f4:	bl	10a10 <__errno_location@plt>
   113f8:	ldr	r3, [r0]
   113fc:	cmp	r3, #4
   11400:	bne	11420 <__assert_fail@plt+0x98c>
   11404:	mov	r2, r5
   11408:	mov	r1, r6
   1140c:	mov	r0, r7
   11410:	bl	109c8 <ioctl@plt>
   11414:	cmn	r0, #1
   11418:	mov	r4, r0
   1141c:	beq	113f4 <__assert_fail@plt+0x960>
   11420:	mov	r0, r4
   11424:	pop	{r4, r5, r6, r7, r8, pc}
   11428:	tst	r0, #1
   1142c:	push	{r4, lr}
   11430:	mov	r4, r0
   11434:	bne	114f8 <__assert_fail@plt+0xa64>
   11438:	tst	r4, #4096	; 0x1000
   1143c:	bne	11510 <__assert_fail@plt+0xa7c>
   11440:	tst	r4, #2
   11444:	bne	11528 <__assert_fail@plt+0xa94>
   11448:	tst	r4, #8192	; 0x2000
   1144c:	bne	11540 <__assert_fail@plt+0xaac>
   11450:	tst	r4, #32768	; 0x8000
   11454:	bne	11558 <__assert_fail@plt+0xac4>
   11458:	tst	r4, #16384	; 0x4000
   1145c:	bne	11570 <__assert_fail@plt+0xadc>
   11460:	tst	r4, #4
   11464:	bne	11588 <__assert_fail@plt+0xaf4>
   11468:	tst	r4, #16
   1146c:	bne	115a0 <__assert_fail@plt+0xb0c>
   11470:	tst	r4, #32
   11474:	bne	115b8 <__assert_fail@plt+0xb24>
   11478:	tst	r4, #64	; 0x40
   1147c:	bne	115d0 <__assert_fail@plt+0xb3c>
   11480:	tst	r4, #128	; 0x80
   11484:	bne	115e8 <__assert_fail@plt+0xb54>
   11488:	tst	r4, #256	; 0x100
   1148c:	bne	11600 <__assert_fail@plt+0xb6c>
   11490:	tst	r4, #2048	; 0x800
   11494:	bne	11618 <__assert_fail@plt+0xb84>
   11498:	tst	r4, #1048576	; 0x100000
   1149c:	bne	11630 <__assert_fail@plt+0xb9c>
   114a0:	tst	r4, #65536	; 0x10000
   114a4:	bne	11648 <__assert_fail@plt+0xbb4>
   114a8:	tst	r4, #1024	; 0x400
   114ac:	bne	11660 <__assert_fail@plt+0xbcc>
   114b0:	tst	r4, #524288	; 0x80000
   114b4:	bne	11678 <__assert_fail@plt+0xbe4>
   114b8:	tst	r4, #131072	; 0x20000
   114bc:	bne	11690 <__assert_fail@plt+0xbfc>
   114c0:	tst	r4, #262144	; 0x40000
   114c4:	bne	116a8 <__assert_fail@plt+0xc14>
   114c8:	tst	r4, #16777216	; 0x1000000
   114cc:	bne	116c0 <__assert_fail@plt+0xc2c>
   114d0:	tst	r4, #33554432	; 0x2000000
   114d4:	bne	116d8 <__assert_fail@plt+0xc44>
   114d8:	tst	r4, #67108864	; 0x4000000
   114dc:	bne	116f0 <__assert_fail@plt+0xc5c>
   114e0:	tst	r4, #2097152	; 0x200000
   114e4:	bne	11708 <__assert_fail@plt+0xc74>
   114e8:	cmp	r4, #0
   114ec:	blt	11720 <__assert_fail@plt+0xc8c>
   114f0:	ldr	r0, [pc, #576]	; 11738 <__assert_fail@plt+0xca4>
   114f4:	pop	{r4, pc}
   114f8:	mov	r2, #4096	; 0x1000
   114fc:	ldr	r1, [pc, #568]	; 1173c <__assert_fail@plt+0xca8>
   11500:	ldr	r0, [pc, #560]	; 11738 <__assert_fail@plt+0xca4>
   11504:	bl	10a1c <__strcat_chk@plt>
   11508:	tst	r4, #4096	; 0x1000
   1150c:	beq	11440 <__assert_fail@plt+0x9ac>
   11510:	mov	r2, #4096	; 0x1000
   11514:	ldr	r1, [pc, #548]	; 11740 <__assert_fail@plt+0xcac>
   11518:	ldr	r0, [pc, #536]	; 11738 <__assert_fail@plt+0xca4>
   1151c:	bl	10a1c <__strcat_chk@plt>
   11520:	tst	r4, #2
   11524:	beq	11448 <__assert_fail@plt+0x9b4>
   11528:	mov	r2, #4096	; 0x1000
   1152c:	ldr	r1, [pc, #528]	; 11744 <__assert_fail@plt+0xcb0>
   11530:	ldr	r0, [pc, #512]	; 11738 <__assert_fail@plt+0xca4>
   11534:	bl	10a1c <__strcat_chk@plt>
   11538:	tst	r4, #8192	; 0x2000
   1153c:	beq	11450 <__assert_fail@plt+0x9bc>
   11540:	mov	r2, #4096	; 0x1000
   11544:	ldr	r1, [pc, #508]	; 11748 <__assert_fail@plt+0xcb4>
   11548:	ldr	r0, [pc, #488]	; 11738 <__assert_fail@plt+0xca4>
   1154c:	bl	10a1c <__strcat_chk@plt>
   11550:	tst	r4, #32768	; 0x8000
   11554:	beq	11458 <__assert_fail@plt+0x9c4>
   11558:	mov	r2, #4096	; 0x1000
   1155c:	ldr	r1, [pc, #488]	; 1174c <__assert_fail@plt+0xcb8>
   11560:	ldr	r0, [pc, #464]	; 11738 <__assert_fail@plt+0xca4>
   11564:	bl	10a1c <__strcat_chk@plt>
   11568:	tst	r4, #16384	; 0x4000
   1156c:	beq	11460 <__assert_fail@plt+0x9cc>
   11570:	mov	r2, #4096	; 0x1000
   11574:	ldr	r1, [pc, #468]	; 11750 <__assert_fail@plt+0xcbc>
   11578:	ldr	r0, [pc, #440]	; 11738 <__assert_fail@plt+0xca4>
   1157c:	bl	10a1c <__strcat_chk@plt>
   11580:	tst	r4, #4
   11584:	beq	11468 <__assert_fail@plt+0x9d4>
   11588:	mov	r2, #4096	; 0x1000
   1158c:	ldr	r1, [pc, #448]	; 11754 <__assert_fail@plt+0xcc0>
   11590:	ldr	r0, [pc, #416]	; 11738 <__assert_fail@plt+0xca4>
   11594:	bl	10a1c <__strcat_chk@plt>
   11598:	tst	r4, #16
   1159c:	beq	11470 <__assert_fail@plt+0x9dc>
   115a0:	mov	r2, #4096	; 0x1000
   115a4:	ldr	r1, [pc, #428]	; 11758 <__assert_fail@plt+0xcc4>
   115a8:	ldr	r0, [pc, #392]	; 11738 <__assert_fail@plt+0xca4>
   115ac:	bl	10a1c <__strcat_chk@plt>
   115b0:	tst	r4, #32
   115b4:	beq	11478 <__assert_fail@plt+0x9e4>
   115b8:	mov	r2, #4096	; 0x1000
   115bc:	ldr	r1, [pc, #408]	; 1175c <__assert_fail@plt+0xcc8>
   115c0:	ldr	r0, [pc, #368]	; 11738 <__assert_fail@plt+0xca4>
   115c4:	bl	10a1c <__strcat_chk@plt>
   115c8:	tst	r4, #64	; 0x40
   115cc:	beq	11480 <__assert_fail@plt+0x9ec>
   115d0:	mov	r2, #4096	; 0x1000
   115d4:	ldr	r1, [pc, #388]	; 11760 <__assert_fail@plt+0xccc>
   115d8:	ldr	r0, [pc, #344]	; 11738 <__assert_fail@plt+0xca4>
   115dc:	bl	10a1c <__strcat_chk@plt>
   115e0:	tst	r4, #128	; 0x80
   115e4:	beq	11488 <__assert_fail@plt+0x9f4>
   115e8:	mov	r2, #4096	; 0x1000
   115ec:	ldr	r1, [pc, #368]	; 11764 <__assert_fail@plt+0xcd0>
   115f0:	ldr	r0, [pc, #320]	; 11738 <__assert_fail@plt+0xca4>
   115f4:	bl	10a1c <__strcat_chk@plt>
   115f8:	tst	r4, #256	; 0x100
   115fc:	beq	11490 <__assert_fail@plt+0x9fc>
   11600:	mov	r2, #4096	; 0x1000
   11604:	ldr	r1, [pc, #348]	; 11768 <__assert_fail@plt+0xcd4>
   11608:	ldr	r0, [pc, #296]	; 11738 <__assert_fail@plt+0xca4>
   1160c:	bl	10a1c <__strcat_chk@plt>
   11610:	tst	r4, #2048	; 0x800
   11614:	beq	11498 <__assert_fail@plt+0xa04>
   11618:	mov	r2, #4096	; 0x1000
   1161c:	ldr	r1, [pc, #328]	; 1176c <__assert_fail@plt+0xcd8>
   11620:	ldr	r0, [pc, #272]	; 11738 <__assert_fail@plt+0xca4>
   11624:	bl	10a1c <__strcat_chk@plt>
   11628:	tst	r4, #1048576	; 0x100000
   1162c:	beq	114a0 <__assert_fail@plt+0xa0c>
   11630:	mov	r2, #4096	; 0x1000
   11634:	ldr	r1, [pc, #308]	; 11770 <__assert_fail@plt+0xcdc>
   11638:	ldr	r0, [pc, #248]	; 11738 <__assert_fail@plt+0xca4>
   1163c:	bl	10a1c <__strcat_chk@plt>
   11640:	tst	r4, #65536	; 0x10000
   11644:	beq	114a8 <__assert_fail@plt+0xa14>
   11648:	mov	r2, #4096	; 0x1000
   1164c:	ldr	r1, [pc, #288]	; 11774 <__assert_fail@plt+0xce0>
   11650:	ldr	r0, [pc, #224]	; 11738 <__assert_fail@plt+0xca4>
   11654:	bl	10a1c <__strcat_chk@plt>
   11658:	tst	r4, #1024	; 0x400
   1165c:	beq	114b0 <__assert_fail@plt+0xa1c>
   11660:	mov	r2, #4096	; 0x1000
   11664:	ldr	r1, [pc, #268]	; 11778 <__assert_fail@plt+0xce4>
   11668:	ldr	r0, [pc, #200]	; 11738 <__assert_fail@plt+0xca4>
   1166c:	bl	10a1c <__strcat_chk@plt>
   11670:	tst	r4, #524288	; 0x80000
   11674:	beq	114b8 <__assert_fail@plt+0xa24>
   11678:	mov	r2, #4096	; 0x1000
   1167c:	ldr	r1, [pc, #248]	; 1177c <__assert_fail@plt+0xce8>
   11680:	ldr	r0, [pc, #176]	; 11738 <__assert_fail@plt+0xca4>
   11684:	bl	10a1c <__strcat_chk@plt>
   11688:	tst	r4, #131072	; 0x20000
   1168c:	beq	114c0 <__assert_fail@plt+0xa2c>
   11690:	mov	r2, #4096	; 0x1000
   11694:	ldr	r1, [pc, #228]	; 11780 <__assert_fail@plt+0xcec>
   11698:	ldr	r0, [pc, #152]	; 11738 <__assert_fail@plt+0xca4>
   1169c:	bl	10a1c <__strcat_chk@plt>
   116a0:	tst	r4, #262144	; 0x40000
   116a4:	beq	114c8 <__assert_fail@plt+0xa34>
   116a8:	mov	r2, #4096	; 0x1000
   116ac:	ldr	r1, [pc, #208]	; 11784 <__assert_fail@plt+0xcf0>
   116b0:	ldr	r0, [pc, #128]	; 11738 <__assert_fail@plt+0xca4>
   116b4:	bl	10a1c <__strcat_chk@plt>
   116b8:	tst	r4, #16777216	; 0x1000000
   116bc:	beq	114d0 <__assert_fail@plt+0xa3c>
   116c0:	mov	r2, #4096	; 0x1000
   116c4:	ldr	r1, [pc, #188]	; 11788 <__assert_fail@plt+0xcf4>
   116c8:	ldr	r0, [pc, #104]	; 11738 <__assert_fail@plt+0xca4>
   116cc:	bl	10a1c <__strcat_chk@plt>
   116d0:	tst	r4, #33554432	; 0x2000000
   116d4:	beq	114d8 <__assert_fail@plt+0xa44>
   116d8:	mov	r2, #4096	; 0x1000
   116dc:	ldr	r1, [pc, #168]	; 1178c <__assert_fail@plt+0xcf8>
   116e0:	ldr	r0, [pc, #80]	; 11738 <__assert_fail@plt+0xca4>
   116e4:	bl	10a1c <__strcat_chk@plt>
   116e8:	tst	r4, #67108864	; 0x4000000
   116ec:	beq	114e0 <__assert_fail@plt+0xa4c>
   116f0:	mov	r2, #4096	; 0x1000
   116f4:	ldr	r1, [pc, #148]	; 11790 <__assert_fail@plt+0xcfc>
   116f8:	ldr	r0, [pc, #56]	; 11738 <__assert_fail@plt+0xca4>
   116fc:	bl	10a1c <__strcat_chk@plt>
   11700:	tst	r4, #2097152	; 0x200000
   11704:	beq	114e8 <__assert_fail@plt+0xa54>
   11708:	mov	r2, #4096	; 0x1000
   1170c:	ldr	r1, [pc, #128]	; 11794 <__assert_fail@plt+0xd00>
   11710:	ldr	r0, [pc, #32]	; 11738 <__assert_fail@plt+0xca4>
   11714:	bl	10a1c <__strcat_chk@plt>
   11718:	cmp	r4, #0
   1171c:	bge	114f0 <__assert_fail@plt+0xa5c>
   11720:	mov	r2, #4096	; 0x1000
   11724:	ldr	r1, [pc, #108]	; 11798 <__assert_fail@plt+0xd04>
   11728:	ldr	r0, [pc, #8]	; 11738 <__assert_fail@plt+0xca4>
   1172c:	bl	10a1c <__strcat_chk@plt>
   11730:	ldr	r0, [pc]	; 11738 <__assert_fail@plt+0xca4>
   11734:	pop	{r4, pc}
   11738:	andeq	sp, ip, r8, asr #1
   1173c:	andeq	r3, r1, r4, ror #6
   11740:	andeq	r3, r1, r0, lsr #6
   11744:	andeq	r3, r1, r4, ror r3
   11748:	andeq	r3, r1, r0, lsr r3
   1174c:	andeq	r3, r1, r0, asr #6
   11750:	andeq	r3, r1, r8, asr #6
   11754:	andeq	r3, r1, r4, asr r3
   11758:	andeq	r3, r1, r0, ror #6
   1175c:	andeq	r3, r1, r0, ror r3
   11760:	andeq	r3, r1, ip, ror r3
   11764:	muleq	r1, r0, r3
   11768:	andeq	r3, r1, r4, lsr #7
   1176c:			; <UNDEFINED> instruction: 0x000133b4
   11770:	andeq	r3, r1, r0, asr #7
   11774:	ldrdeq	r3, [r1], -r0
   11778:	ldrdeq	r3, [r1], -r8
   1177c:	andeq	r3, r1, r8, ror #7
   11780:	strdeq	r3, [r1], -r4
   11784:	strdeq	r3, [r1], -ip
   11788:	andeq	r3, r1, r4, lsl #8
   1178c:	andeq	r3, r1, r0, lsl r4
   11790:	andeq	r3, r1, ip, lsl r4
   11794:	andeq	r3, r1, r8, lsr #8
   11798:	andeq	r3, r1, r8, lsr r4
   1179c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a0:	mov	r2, r0
   117a4:	ldr	lr, [r1, #20]
   117a8:	ldr	ip, [pc, #296]	; 118d8 <__assert_fail@plt+0xe44>
   117ac:	mov	r4, r1
   117b0:	ldr	r3, [pc, #292]	; 118dc <__assert_fail@plt+0xe48>
   117b4:	smull	r0, r1, ip, lr
   117b8:	smull	r0, r3, r3, lr
   117bc:	ldr	r5, [r4, #4]
   117c0:	add	r1, r1, lr
   117c4:	asr	r0, lr, #31
   117c8:	rsb	r1, r0, r1, asr #5
   117cc:	cmp	r5, #7
   117d0:	smull	r6, ip, ip, r1
   117d4:	ldrhi	r5, [pc, #260]	; 118e0 <__assert_fail@plt+0xe4c>
   117d8:	add	ip, ip, r1
   117dc:	asr	r6, r1, #31
   117e0:	rsb	ip, r6, ip, asr #5
   117e4:	rsb	r6, r1, r1, lsl #4
   117e8:	rsb	ip, ip, ip, lsl #4
   117ec:	add	r3, r3, lr
   117f0:	sub	ip, r1, ip, lsl #2
   117f4:	ldrls	r1, [pc, #232]	; 118e4 <__assert_fail@plt+0xe50>
   117f8:	rsb	r3, r0, r3, asr #11
   117fc:	sub	sp, sp, #52	; 0x34
   11800:	ldrls	r5, [r1, r5, lsl #2]
   11804:	ldr	r1, [r4, #16]
   11808:	ldr	r7, [r4]
   1180c:	cmp	r1, #7
   11810:	ldr	r8, [r4, #8]
   11814:	ldrls	r0, [pc, #200]	; 118e4 <__assert_fail@plt+0xe50>
   11818:	ldrhi	sl, [pc, #192]	; 118e0 <__assert_fail@plt+0xe4c>
   1181c:	addls	r1, r0, r1, lsl #2
   11820:	ldr	r9, [r4, #12]
   11824:	ldrls	sl, [r1, #32]
   11828:	ldr	r1, [r4, #48]	; 0x30
   1182c:	ldr	fp, [r4, #44]	; 0x2c
   11830:	cmp	r1, #3
   11834:	sub	lr, lr, r6, lsl #2
   11838:	ldrls	r0, [pc, #168]	; 118e8 <__assert_fail@plt+0xe54>
   1183c:	ldrhi	r1, [pc, #156]	; 118e0 <__assert_fail@plt+0xe4c>
   11840:	ldr	r6, [r4, #24]
   11844:	ldrls	r1, [r0, r1, lsl #2]
   11848:	ldr	r0, [r4, #56]	; 0x38
   1184c:	str	r1, [sp, #36]	; 0x24
   11850:	ldr	r1, [r4, #52]	; 0x34
   11854:	stm	sp, {ip, lr}
   11858:	str	r5, [sp, #16]
   1185c:	strd	r6, [sp, #8]
   11860:	str	r0, [sp, #44]	; 0x2c
   11864:	str	r1, [sp, #40]	; 0x28
   11868:	strd	sl, [sp, #28]
   1186c:	strd	r8, [sp, #20]
   11870:	ldr	r1, [pc, #116]	; 118ec <__assert_fail@plt+0xe58>
   11874:	mov	r0, #1
   11878:	bl	10a4c <__printf_chk@plt>
   1187c:	ldrb	r0, [r4, #36]	; 0x24
   11880:	ldrb	r1, [r4, #37]	; 0x25
   11884:	ldrb	r6, [r4, #43]	; 0x2b
   11888:	ldrb	r5, [r4, #42]	; 0x2a
   1188c:	ldrb	lr, [r4, #41]	; 0x29
   11890:	ldrb	ip, [r4, #40]	; 0x28
   11894:	ldr	r2, [r4, #32]
   11898:	ldr	r3, [r4, #28]
   1189c:	str	r0, [sp, #12]
   118a0:	str	r1, [sp]
   118a4:	str	r6, [sp, #28]
   118a8:	str	r5, [sp, #24]
   118ac:	str	lr, [sp, #20]
   118b0:	str	ip, [sp, #16]
   118b4:	str	r2, [sp, #8]
   118b8:	str	r3, [sp, #4]
   118bc:	ldr	r1, [pc, #44]	; 118f0 <__assert_fail@plt+0xe5c>
   118c0:	ldrb	r3, [r4, #38]	; 0x26
   118c4:	ldrb	r2, [r4, #39]	; 0x27
   118c8:	mov	r0, #1
   118cc:	bl	10a4c <__printf_chk@plt>
   118d0:	add	sp, sp, #52	; 0x34
   118d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118d8:	stmhi	r8, {r0, r3, r7, fp, pc}
   118dc:			; <UNDEFINED> instruction: 0x91a2b3c5
   118e0:	andeq	r3, r1, r8, asr #8
   118e4:	andeq	r4, r2, ip, asr r0
   118e8:	andeq	r3, r1, r4, asr #5
   118ec:	andeq	r3, r1, r0, asr r4
   118f0:	ldrdeq	r3, [r1], -r8
   118f4:	push	{r4, r5, r6, lr}
   118f8:	subs	r6, r0, #0
   118fc:	popeq	{r4, r5, r6, pc}
   11900:	ldr	r4, [r6]
   11904:	cmp	r4, #0
   11908:	popeq	{r4, r5, r6, pc}
   1190c:	ldm	r4, {r3, r5}
   11910:	subs	r0, r3, #0
   11914:	beq	1191c <__assert_fail@plt+0xe88>
   11918:	bl	10950 <free@plt>
   1191c:	mov	r0, r4
   11920:	bl	10950 <free@plt>
   11924:	cmp	r5, #0
   11928:	mov	r4, r5
   1192c:	bne	1190c <__assert_fail@plt+0xe78>
   11930:	str	r5, [r6]
   11934:	pop	{r4, r5, r6, pc}
   11938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1193c:	mov	r4, r2
   11940:	sub	sp, sp, #36	; 0x24
   11944:	mov	r5, r0
   11948:	mov	r6, r1
   1194c:	mov	r0, r2
   11950:	mov	r1, #0
   11954:	mov	r2, #372	; 0x174
   11958:	bl	10a34 <memset@plt>
   1195c:	str	r6, [r4, #4]
   11960:	mov	r0, r5
   11964:	mov	r1, #2
   11968:	bl	109f8 <open@plt>
   1196c:	subs	r3, r0, #0
   11970:	str	r0, [r4]
   11974:	blt	119a8 <__assert_fail@plt+0xf14>
   11978:	add	r6, r4, #8
   1197c:	mov	r2, r6
   11980:	ldr	r1, [pc, #180]	; 11a3c <__assert_fail@plt+0xfa8>
   11984:	bl	113e0 <__assert_fail@plt+0x94c>
   11988:	subs	r5, r0, #0
   1198c:	bne	1199c <__assert_fail@plt+0xf08>
   11990:	ldr	r3, [r4, #4]
   11994:	cmp	r3, #0
   11998:	bne	119c0 <__assert_fail@plt+0xf2c>
   1199c:	mov	r0, r5
   119a0:	add	sp, sp, #36	; 0x24
   119a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119a8:	bl	10a10 <__errno_location@plt>
   119ac:	ldr	r5, [r0]
   119b0:	rsb	r5, r5, #0
   119b4:	mov	r0, r5
   119b8:	add	sp, sp, #36	; 0x24
   119bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c0:	ldr	r3, [r4, #88]	; 0x58
   119c4:	ldr	r0, [r4, #92]	; 0x5c
   119c8:	add	sl, r4, #24
   119cc:	lsr	r8, r3, #16
   119d0:	lsr	r9, r3, #8
   119d4:	uxtb	r7, r3
   119d8:	bl	11428 <__assert_fail@plt+0x994>
   119dc:	ldr	r2, [r4, #92]	; 0x5c
   119e0:	uxtb	r8, r8
   119e4:	cmp	r2, #0
   119e8:	uxtb	r9, r9
   119ec:	add	fp, r4, #56	; 0x38
   119f0:	mov	r3, r0
   119f4:	ldrge	r0, [pc, #68]	; 11a40 <__assert_fail@plt+0xfac>
   119f8:	blt	11a28 <__assert_fail@plt+0xf94>
   119fc:	str	r0, [sp, #20]
   11a00:	str	r3, [sp, #16]
   11a04:	str	r7, [sp, #12]
   11a08:	strd	r8, [sp, #4]
   11a0c:	str	fp, [sp]
   11a10:	mov	r3, sl
   11a14:	mov	r2, r6
   11a18:	ldr	r1, [pc, #36]	; 11a44 <__assert_fail@plt+0xfb0>
   11a1c:	mov	r0, #1
   11a20:	bl	10a4c <__printf_chk@plt>
   11a24:	b	1199c <__assert_fail@plt+0xf08>
   11a28:	ldr	r0, [r4, #96]	; 0x60
   11a2c:	str	r3, [sp, #28]
   11a30:	bl	11428 <__assert_fail@plt+0x994>
   11a34:	ldr	r3, [sp, #28]
   11a38:	b	119fc <__assert_fail@plt+0xf68>
   11a3c:	rsbhi	r5, r8, r0, lsl #12
   11a40:	andeq	r3, r1, r4, lsr r5
   11a44:	andeq	r3, r1, r8, lsr r5
   11a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a4c:	mov	r7, r0
   11a50:	sub	sp, sp, #28
   11a54:	add	r0, r0, #316	; 0x13c
   11a58:	bl	118f4 <__assert_fail@plt+0xe60>
   11a5c:	mov	r1, #8
   11a60:	mov	r0, #1
   11a64:	bl	10914 <calloc@plt>
   11a68:	cmp	r0, #0
   11a6c:	str	r0, [r7, #316]	; 0x13c
   11a70:	beq	11ba0 <__assert_fail@plt+0x110c>
   11a74:	mov	r5, r0
   11a78:	ldr	r9, [pc, #308]	; 11bb4 <__assert_fail@plt+0x1120>
   11a7c:	ldr	sl, [pc, #308]	; 11bb8 <__assert_fail@plt+0x1124>
   11a80:	mov	fp, #0
   11a84:	b	11ac0 <__assert_fail@plt+0x102c>
   11a88:	ldr	r3, [r5]
   11a8c:	cmp	r3, #0
   11a90:	beq	11ab0 <__assert_fail@plt+0x101c>
   11a94:	mov	r1, #8
   11a98:	mov	r0, #1
   11a9c:	bl	10914 <calloc@plt>
   11aa0:	cmp	r0, #0
   11aa4:	str	r0, [r5, #4]
   11aa8:	beq	11b8c <__assert_fail@plt+0x10f8>
   11aac:	mov	r5, r0
   11ab0:	cmp	r8, #0
   11ab4:	str	r4, [r5]
   11ab8:	add	fp, fp, #1
   11abc:	bne	11b6c <__assert_fail@plt+0x10d8>
   11ac0:	mov	r1, #72	; 0x48
   11ac4:	mov	r0, #1
   11ac8:	bl	10914 <calloc@plt>
   11acc:	subs	r4, r0, #0
   11ad0:	beq	11b78 <__assert_fail@plt+0x10e4>
   11ad4:	str	fp, [r4]
   11ad8:	mov	r2, r4
   11adc:	mov	r1, r9
   11ae0:	ldr	r0, [r7]
   11ae4:	bl	113e0 <__assert_fail@plt+0x94c>
   11ae8:	subs	r8, r0, #0
   11aec:	blt	11b3c <__assert_fail@plt+0x10a8>
   11af0:	ldr	r3, [r7, #4]
   11af4:	cmp	r3, #0
   11af8:	beq	11a88 <__assert_fail@plt+0xff4>
   11afc:	ldr	r2, [r4, #48]	; 0x30
   11b00:	add	r3, r4, #16
   11b04:	str	r2, [sp, #16]
   11b08:	vldr	s15, [r4, #44]	; 0x2c
   11b0c:	mov	r1, sl
   11b10:	mov	r0, #1
   11b14:	vcvt.f64.u32	d6, s15
   11b18:	vldr	s15, [r4, #40]	; 0x28
   11b1c:	str	r3, [sp]
   11b20:	vcvt.f64.u32	d7, s15
   11b24:	vdiv.f64	d5, d6, d7
   11b28:	vstr	d5, [sp, #8]
   11b2c:	ldr	r3, [r4, #8]
   11b30:	ldr	r2, [r4]
   11b34:	bl	10a4c <__printf_chk@plt>
   11b38:	b	11a88 <__assert_fail@plt+0xff4>
   11b3c:	bl	10a10 <__errno_location@plt>
   11b40:	ldr	r8, [r0]
   11b44:	mov	r0, r4
   11b48:	bl	10950 <free@plt>
   11b4c:	cmp	fp, #0
   11b50:	movle	r6, #0
   11b54:	movgt	r6, #1
   11b58:	cmp	r8, #22
   11b5c:	movne	r6, #0
   11b60:	cmp	r6, #0
   11b64:	rsbeq	r8, r8, #0
   11b68:	movne	r8, #0
   11b6c:	mov	r0, r8
   11b70:	add	sp, sp, #28
   11b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b78:	ldr	r3, [pc, #60]	; 11bbc <__assert_fail@plt+0x1128>
   11b7c:	mov	r2, #234	; 0xea
   11b80:	ldr	r1, [pc, #56]	; 11bc0 <__assert_fail@plt+0x112c>
   11b84:	ldr	r0, [pc, #56]	; 11bc4 <__assert_fail@plt+0x1130>
   11b88:	bl	10a94 <__assert_fail@plt>
   11b8c:	ldr	r3, [pc, #40]	; 11bbc <__assert_fail@plt+0x1128>
   11b90:	mov	r2, #253	; 0xfd
   11b94:	ldr	r1, [pc, #36]	; 11bc0 <__assert_fail@plt+0x112c>
   11b98:	ldr	r0, [pc, #40]	; 11bc8 <__assert_fail@plt+0x1134>
   11b9c:	bl	10a94 <__assert_fail@plt>
   11ba0:	ldr	r3, [pc, #20]	; 11bbc <__assert_fail@plt+0x1128>
   11ba4:	mov	r2, #230	; 0xe6
   11ba8:	ldr	r1, [pc, #16]	; 11bc0 <__assert_fail@plt+0x112c>
   11bac:	ldr	r0, [pc, #20]	; 11bc8 <__assert_fail@plt+0x1134>
   11bb0:	bl	10a94 <__assert_fail@plt>
   11bb4:	subgt	r5, r8, r9, lsl r6
   11bb8:	andeq	r3, r1, r4, lsr #11
   11bbc:	ldrdeq	r3, [r1], -r4
   11bc0:	andeq	r3, r1, r8, lsl #11
   11bc4:	ldrdeq	r3, [r1], -r4
   11bc8:	muleq	r1, r8, r5
   11bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd0:	mov	r7, r0
   11bd4:	sub	sp, sp, #28
   11bd8:	add	r0, r0, #320	; 0x140
   11bdc:	bl	118f4 <__assert_fail@plt+0xe60>
   11be0:	mov	r1, #8
   11be4:	mov	r0, #1
   11be8:	bl	10914 <calloc@plt>
   11bec:	cmp	r0, #0
   11bf0:	str	r0, [r7, #320]	; 0x140
   11bf4:	beq	11d20 <__assert_fail@plt+0x128c>
   11bf8:	mov	r5, r0
   11bfc:	ldr	r9, [pc, #304]	; 11d34 <__assert_fail@plt+0x12a0>
   11c00:	ldr	sl, [pc, #304]	; 11d38 <__assert_fail@plt+0x12a4>
   11c04:	mov	fp, #0
   11c08:	b	11c44 <__assert_fail@plt+0x11b0>
   11c0c:	ldr	r3, [r5]
   11c10:	cmp	r3, #0
   11c14:	beq	11c34 <__assert_fail@plt+0x11a0>
   11c18:	mov	r1, #8
   11c1c:	mov	r0, #1
   11c20:	bl	10914 <calloc@plt>
   11c24:	cmp	r0, #0
   11c28:	str	r0, [r5, #4]
   11c2c:	beq	11d0c <__assert_fail@plt+0x1278>
   11c30:	mov	r5, r0
   11c34:	cmp	r8, #0
   11c38:	str	r4, [r5]
   11c3c:	add	fp, fp, #1
   11c40:	bne	11cec <__assert_fail@plt+0x1258>
   11c44:	mov	r1, #80	; 0x50
   11c48:	mov	r0, #1
   11c4c:	bl	10914 <calloc@plt>
   11c50:	subs	r4, r0, #0
   11c54:	beq	11cf8 <__assert_fail@plt+0x1264>
   11c58:	str	fp, [r4]
   11c5c:	mov	r2, r4
   11c60:	mov	r1, r9
   11c64:	ldr	r0, [r7]
   11c68:	bl	113e0 <__assert_fail@plt+0x94c>
   11c6c:	subs	r8, r0, #0
   11c70:	blt	11cc0 <__assert_fail@plt+0x122c>
   11c74:	ldr	r3, [r7, #4]
   11c78:	cmp	r3, #0
   11c7c:	beq	11c0c <__assert_fail@plt+0x1178>
   11c80:	ldr	r1, [r4, #56]	; 0x38
   11c84:	mov	r3, r4
   11c88:	ldr	r2, [r3], #4
   11c8c:	str	r1, [sp, #16]
   11c90:	ldr	r1, [r4, #48]	; 0x30
   11c94:	str	r1, [sp, #12]
   11c98:	ldr	r1, [r4, #44]	; 0x2c
   11c9c:	str	r1, [sp, #8]
   11ca0:	ldr	r0, [r4, #40]	; 0x28
   11ca4:	mov	r1, sl
   11ca8:	str	r0, [sp, #4]
   11cac:	ldr	ip, [r4, #36]	; 0x24
   11cb0:	mov	r0, #1
   11cb4:	str	ip, [sp]
   11cb8:	bl	10a4c <__printf_chk@plt>
   11cbc:	b	11c0c <__assert_fail@plt+0x1178>
   11cc0:	bl	10a10 <__errno_location@plt>
   11cc4:	ldr	r8, [r0]
   11cc8:	mov	r0, r4
   11ccc:	bl	10950 <free@plt>
   11cd0:	cmp	fp, #0
   11cd4:	movle	r6, #0
   11cd8:	movgt	r6, #1
   11cdc:	cmn	r8, #22
   11ce0:	movne	r6, #0
   11ce4:	cmp	r6, #0
   11ce8:	movne	r8, #0
   11cec:	mov	r0, r8
   11cf0:	add	sp, sp, #28
   11cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf8:	ldr	r3, [pc, #60]	; 11d3c <__assert_fail@plt+0x12a8>
   11cfc:	mov	r2, #276	; 0x114
   11d00:	ldr	r1, [pc, #56]	; 11d40 <__assert_fail@plt+0x12ac>
   11d04:	ldr	r0, [pc, #56]	; 11d44 <__assert_fail@plt+0x12b0>
   11d08:	bl	10a94 <__assert_fail@plt>
   11d0c:	ldr	r3, [pc, #40]	; 11d3c <__assert_fail@plt+0x12a8>
   11d10:	ldr	r2, [pc, #48]	; 11d48 <__assert_fail@plt+0x12b4>
   11d14:	ldr	r1, [pc, #36]	; 11d40 <__assert_fail@plt+0x12ac>
   11d18:	ldr	r0, [pc, #44]	; 11d4c <__assert_fail@plt+0x12b8>
   11d1c:	bl	10a94 <__assert_fail@plt>
   11d20:	ldr	r3, [pc, #20]	; 11d3c <__assert_fail@plt+0x12a8>
   11d24:	mov	r2, #272	; 0x110
   11d28:	ldr	r1, [pc, #16]	; 11d40 <__assert_fail@plt+0x12ac>
   11d2c:	ldr	r0, [pc, #24]	; 11d4c <__assert_fail@plt+0x12b8>
   11d30:	bl	10a94 <__assert_fail@plt>
   11d34:	subsgt	r5, r0, sl, lsl r6
   11d38:	andeq	r3, r1, r8, ror #11
   11d3c:	andeq	r3, r1, r4, ror #5
   11d40:	andeq	r3, r1, r8, lsl #11
   11d44:	ldrdeq	r3, [r1], -r4
   11d48:	andeq	r0, r0, r5, lsr #2
   11d4c:	muleq	r1, r8, r5
   11d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d54:	mov	r7, r0
   11d58:	sub	sp, sp, #28
   11d5c:	add	r0, r0, #324	; 0x144
   11d60:	mov	sl, r1
   11d64:	bl	118f4 <__assert_fail@plt+0xe60>
   11d68:	mov	r1, #8
   11d6c:	mov	r0, #1
   11d70:	bl	10914 <calloc@plt>
   11d74:	cmp	r0, #0
   11d78:	str	r0, [r7, #324]	; 0x144
   11d7c:	beq	11ec8 <__assert_fail@plt+0x1434>
   11d80:	mov	r3, #0
   11d84:	mov	r5, r0
   11d88:	ldr	r9, [pc, #332]	; 11edc <__assert_fail@plt+0x1448>
   11d8c:	ldr	fp, [pc, #332]	; 11ee0 <__assert_fail@plt+0x144c>
   11d90:	mov	r6, r3
   11d94:	b	11dd4 <__assert_fail@plt+0x1340>
   11d98:	ldr	r3, [r5]
   11d9c:	cmp	r3, #0
   11da0:	beq	11dc0 <__assert_fail@plt+0x132c>
   11da4:	mov	r1, #8
   11da8:	mov	r0, #1
   11dac:	bl	10914 <calloc@plt>
   11db0:	cmp	r0, #0
   11db4:	str	r0, [r5, #4]
   11db8:	beq	11eb4 <__assert_fail@plt+0x1420>
   11dbc:	mov	r5, r0
   11dc0:	add	r3, r6, #1
   11dc4:	cmp	r8, #0
   11dc8:	str	r4, [r5]
   11dcc:	mov	r6, r3
   11dd0:	bne	11e94 <__assert_fail@plt+0x1400>
   11dd4:	mov	r1, #64	; 0x40
   11dd8:	mov	r0, #1
   11ddc:	bl	10914 <calloc@plt>
   11de0:	subs	r4, r0, #0
   11de4:	beq	11ea0 <__assert_fail@plt+0x140c>
   11de8:	mov	r3, r6
   11dec:	mov	r2, r4
   11df0:	stm	r4, {r3, sl}
   11df4:	mov	r1, r9
   11df8:	ldr	r0, [r7]
   11dfc:	bl	113e0 <__assert_fail@plt+0x94c>
   11e00:	subs	r8, r0, #0
   11e04:	blt	11e68 <__assert_fail@plt+0x13d4>
   11e08:	ldr	r3, [r7, #4]
   11e0c:	cmp	r3, #0
   11e10:	beq	11d98 <__assert_fail@plt+0x1304>
   11e14:	ldr	r3, [r4, #44]	; 0x2c
   11e18:	mov	ip, r4
   11e1c:	mov	r1, fp
   11e20:	ldr	r2, [ip], #12
   11e24:	lsr	lr, r3, #16
   11e28:	lsr	r0, r3, #8
   11e2c:	str	ip, [sp, #4]
   11e30:	uxtb	lr, lr
   11e34:	lsr	ip, r3, #24
   11e38:	uxtb	r0, r0
   11e3c:	uxtb	r3, r3
   11e40:	str	r0, [sp, #12]
   11e44:	str	lr, [sp, #16]
   11e48:	str	ip, [sp, #20]
   11e4c:	str	r3, [sp, #8]
   11e50:	ldr	r3, [r4, #8]
   11e54:	mov	r0, #1
   11e58:	str	r3, [sp]
   11e5c:	ldr	r3, [r4, #4]
   11e60:	bl	10a4c <__printf_chk@plt>
   11e64:	b	11d98 <__assert_fail@plt+0x1304>
   11e68:	bl	10a10 <__errno_location@plt>
   11e6c:	ldr	r8, [r0]
   11e70:	mov	r0, r4
   11e74:	bl	10950 <free@plt>
   11e78:	cmp	r6, #0
   11e7c:	movle	r6, #0
   11e80:	movgt	r6, #1
   11e84:	cmn	r8, #22
   11e88:	movne	r6, #0
   11e8c:	cmp	r6, #0
   11e90:	movne	r8, #0
   11e94:	mov	r0, r8
   11e98:	add	sp, sp, #28
   11e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea0:	ldr	r3, [pc, #60]	; 11ee4 <__assert_fail@plt+0x1450>
   11ea4:	ldr	r2, [pc, #60]	; 11ee8 <__assert_fail@plt+0x1454>
   11ea8:	ldr	r1, [pc, #60]	; 11eec <__assert_fail@plt+0x1458>
   11eac:	ldr	r0, [pc, #60]	; 11ef0 <__assert_fail@plt+0x145c>
   11eb0:	bl	10a94 <__assert_fail@plt>
   11eb4:	ldr	r3, [pc, #40]	; 11ee4 <__assert_fail@plt+0x1450>
   11eb8:	ldr	r2, [pc, #52]	; 11ef4 <__assert_fail@plt+0x1460>
   11ebc:	ldr	r1, [pc, #40]	; 11eec <__assert_fail@plt+0x1458>
   11ec0:	ldr	r0, [pc, #48]	; 11ef8 <__assert_fail@plt+0x1464>
   11ec4:	bl	10a94 <__assert_fail@plt>
   11ec8:	ldr	r3, [pc, #20]	; 11ee4 <__assert_fail@plt+0x1450>
   11ecc:	ldr	r2, [pc, #40]	; 11efc <__assert_fail@plt+0x1468>
   11ed0:	ldr	r1, [pc, #20]	; 11eec <__assert_fail@plt+0x1458>
   11ed4:	ldr	r0, [pc, #28]	; 11ef8 <__assert_fail@plt+0x1464>
   11ed8:	bl	10a94 <__assert_fail@plt>
   11edc:	subgt	r5, r0, r2, lsl #12
   11ee0:	andeq	r3, r1, r0, asr #12
   11ee4:	strdeq	r3, [r1], -r4
   11ee8:	andeq	r0, r0, fp, lsr r1
   11eec:	andeq	r3, r1, r8, lsl #11
   11ef0:	andeq	r3, r1, r8, lsr r6
   11ef4:	andeq	r0, r0, r3, asr r1
   11ef8:	muleq	r1, r8, r5
   11efc:	andeq	r0, r0, r7, lsr r1
   11f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f04:	mov	r7, r2
   11f08:	ldr	r6, [pc, #292]	; 12034 <__assert_fail@plt+0x15a0>
   11f0c:	ldrd	r2, [r2]
   11f10:	sub	sp, sp, #292	; 0x124
   11f14:	mov	r4, r1
   11f18:	ldr	r1, [r6]
   11f1c:	ands	r5, r4, #2
   11f20:	mov	r8, r0
   11f24:	strd	r2, [sp, #16]
   11f28:	str	r1, [sp, #284]	; 0x11c
   11f2c:	bne	11fc8 <__assert_fail@plt+0x1534>
   11f30:	tst	r4, #1
   11f34:	bne	11f9c <__assert_fail@plt+0x1508>
   11f38:	cmp	r4, #3
   11f3c:	beq	11f5c <__assert_fail@plt+0x14c8>
   11f40:	ldr	r2, [sp, #284]	; 0x11c
   11f44:	ldr	r3, [r6]
   11f48:	mov	r0, r5
   11f4c:	cmp	r2, r3
   11f50:	bne	12030 <__assert_fail@plt+0x159c>
   11f54:	add	sp, sp, #292	; 0x124
   11f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f5c:	ldrd	r0, [sp, #16]
   11f60:	ldrd	sl, [r7]
   11f64:	strd	r0, [sp, #8]
   11f68:	and	r8, sl, r0
   11f6c:	and	r9, fp, r1
   11f70:	orrs	r3, r8, r9
   11f74:	beq	12010 <__assert_fail@plt+0x157c>
   11f78:	cmp	fp, r1
   11f7c:	cmpeq	sl, r0
   11f80:	beq	11f40 <__assert_fail@plt+0x14ac>
   11f84:	mov	r2, r0
   11f88:	mov	r3, sl
   11f8c:	ldr	r1, [pc, #164]	; 12038 <__assert_fail@plt+0x15a4>
   11f90:	mov	r0, #1
   11f94:	bl	10a4c <__printf_chk@plt>
   11f98:	b	11f40 <__assert_fail@plt+0x14ac>
   11f9c:	ldr	r0, [r8]
   11fa0:	add	r2, sp, #16
   11fa4:	ldr	r1, [pc, #144]	; 1203c <__assert_fail@plt+0x15a8>
   11fa8:	bl	113e0 <__assert_fail@plt+0x94c>
   11fac:	subs	r5, r0, #0
   11fb0:	bge	11f38 <__assert_fail@plt+0x14a4>
   11fb4:	bl	10a10 <__errno_location@plt>
   11fb8:	ldr	r5, [r0]
   11fbc:	ldr	r0, [pc, #124]	; 12040 <__assert_fail@plt+0x15ac>
   11fc0:	bl	10998 <perror@plt>
   11fc4:	b	11f38 <__assert_fail@plt+0x14a4>
   11fc8:	add	r2, sp, #16
   11fcc:	ldr	r1, [pc, #112]	; 12044 <__assert_fail@plt+0x15b0>
   11fd0:	ldr	r0, [r0]
   11fd4:	bl	113e0 <__assert_fail@plt+0x94c>
   11fd8:	subs	r5, r0, #0
   11fdc:	bge	11f30 <__assert_fail@plt+0x149c>
   11fe0:	bl	10a10 <__errno_location@plt>
   11fe4:	ldr	ip, [r7]
   11fe8:	ldr	r3, [pc, #88]	; 12048 <__assert_fail@plt+0x15b4>
   11fec:	mov	r2, #256	; 0x100
   11ff0:	mov	r1, #1
   11ff4:	ldr	r5, [r0]
   11ff8:	str	ip, [sp]
   11ffc:	add	r0, sp, #28
   12000:	bl	10a28 <__sprintf_chk@plt>
   12004:	add	r0, sp, #28
   12008:	bl	10998 <perror@plt>
   1200c:	b	11f30 <__assert_fail@plt+0x149c>
   12010:	ldr	r1, [pc, #52]	; 1204c <__assert_fail@plt+0x15b8>
   12014:	str	sl, [sp]
   12018:	ldr	r3, [sp, #8]
   1201c:	ldr	r0, [r1]
   12020:	ldr	r2, [pc, #40]	; 12050 <__assert_fail@plt+0x15bc>
   12024:	mov	r1, #1
   12028:	bl	10a64 <__fprintf_chk@plt>
   1202c:	b	11f40 <__assert_fail@plt+0x14ac>
   12030:	bl	10980 <__stack_chk_fail@plt>
   12034:	andeq	r3, r2, r8, ror #28
   12038:	andeq	r3, r1, r4, asr #13
   1203c:	andhi	r5, r8, r7, lsl r6
   12040:	andeq	r3, r1, r8, lsr #13
   12044:	andmi	r5, r8, r8, lsl r6
   12048:	andeq	r3, r1, r8, lsl #13
   1204c:	andeq	r4, r2, r0, lsr #1
   12050:	andeq	r3, r1, r0, lsl r7
   12054:	push	{r4, r5, r6, r7, r8, lr}
   12058:	sub	sp, sp, #272	; 0x110
   1205c:	ldr	r5, [pc, #196]	; 12128 <__assert_fail@plt+0x1694>
   12060:	tst	r1, #2
   12064:	mov	r4, r1
   12068:	ldr	r3, [r5]
   1206c:	mov	r6, r2
   12070:	mov	r8, r0
   12074:	str	r3, [sp, #268]	; 0x10c
   12078:	ldr	r7, [r2]
   1207c:	bne	120ec <__assert_fail@plt+0x1658>
   12080:	tst	r4, #1
   12084:	bne	120c8 <__assert_fail@plt+0x1634>
   12088:	tst	r4, #3
   1208c:	beq	120ac <__assert_fail@plt+0x1618>
   12090:	ldr	r3, [r6]
   12094:	cmp	r3, r7
   12098:	beq	120ac <__assert_fail@plt+0x1618>
   1209c:	mov	r2, r7
   120a0:	ldr	r1, [pc, #132]	; 1212c <__assert_fail@plt+0x1698>
   120a4:	mov	r0, #1
   120a8:	bl	10a4c <__printf_chk@plt>
   120ac:	ldr	r2, [sp, #268]	; 0x10c
   120b0:	ldr	r3, [r5]
   120b4:	mov	r0, #0
   120b8:	cmp	r2, r3
   120bc:	bne	12124 <__assert_fail@plt+0x1690>
   120c0:	add	sp, sp, #272	; 0x110
   120c4:	pop	{r4, r5, r6, r7, r8, pc}
   120c8:	ldr	r0, [r8]
   120cc:	mov	r2, r6
   120d0:	ldr	r1, [pc, #88]	; 12130 <__assert_fail@plt+0x169c>
   120d4:	bl	113e0 <__assert_fail@plt+0x94c>
   120d8:	cmp	r0, #0
   120dc:	bge	12088 <__assert_fail@plt+0x15f4>
   120e0:	ldr	r0, [pc, #76]	; 12134 <__assert_fail@plt+0x16a0>
   120e4:	bl	10998 <perror@plt>
   120e8:	b	12088 <__assert_fail@plt+0x15f4>
   120ec:	ldr	r1, [pc, #68]	; 12138 <__assert_fail@plt+0x16a4>
   120f0:	ldr	r0, [r0]
   120f4:	bl	113e0 <__assert_fail@plt+0x94c>
   120f8:	cmp	r0, #0
   120fc:	bge	12080 <__assert_fail@plt+0x15ec>
   12100:	str	r7, [sp]
   12104:	add	r0, sp, #12
   12108:	ldr	r3, [pc, #44]	; 1213c <__assert_fail@plt+0x16a8>
   1210c:	mov	r2, #256	; 0x100
   12110:	mov	r1, #1
   12114:	bl	10a28 <__sprintf_chk@plt>
   12118:	add	r0, sp, #12
   1211c:	bl	10998 <perror@plt>
   12120:	b	12080 <__assert_fail@plt+0x15ec>
   12124:	bl	10980 <__stack_chk_fail@plt>
   12128:	andeq	r3, r2, r8, ror #28
   1212c:	muleq	r1, r0, r7
   12130:	andhi	r5, r4, r6, lsr #12
   12134:	andeq	r3, r1, r0, ror r7
   12138:	andgt	r5, r4, r7, lsr #12
   1213c:	andeq	r3, r1, ip, asr #14
   12140:	mov	ip, #1
   12144:	cmp	r1, #1
   12148:	push	{r4, r5, r6, r7, lr}
   1214c:	mov	r6, r0
   12150:	sub	sp, sp, #36	; 0x24
   12154:	str	ip, [r2]
   12158:	beq	12354 <__assert_fail@plt+0x18c0>
   1215c:	mov	r7, r3
   12160:	bics	r3, r1, #6
   12164:	bne	1237c <__assert_fail@plt+0x18e8>
   12168:	tst	r1, #6
   1216c:	mov	r4, r2
   12170:	beq	121cc <__assert_fail@plt+0x1738>
   12174:	ldr	r3, [sp, #56]	; 0x38
   12178:	tst	r1, #4
   1217c:	str	r3, [r2, #8]
   12180:	ldr	r3, [sp, #60]	; 0x3c
   12184:	str	r7, [r2, #4]
   12188:	str	r3, [r2, #12]
   1218c:	ldr	r3, [sp, #64]	; 0x40
   12190:	and	r5, r1, #2
   12194:	str	r3, [r2, #16]
   12198:	bne	122b0 <__assert_fail@plt+0x181c>
   1219c:	cmp	r5, #0
   121a0:	bne	122cc <__assert_fail@plt+0x1838>
   121a4:	ldr	r3, [r4, #8]
   121a8:	ldr	r2, [sp, #56]	; 0x38
   121ac:	cmp	r3, r2
   121b0:	bne	12248 <__assert_fail@plt+0x17b4>
   121b4:	ldr	r3, [r4, #20]
   121b8:	cmp	r3, #0
   121bc:	beq	12270 <__assert_fail@plt+0x17dc>
   121c0:	ldr	r3, [r4, #24]
   121c4:	cmp	r3, #0
   121c8:	beq	12294 <__assert_fail@plt+0x1800>
   121cc:	ldr	r5, [r6, #4]
   121d0:	cmp	r5, #0
   121d4:	bne	121e4 <__assert_fail@plt+0x1750>
   121d8:	mov	r0, r5
   121dc:	add	sp, sp, #36	; 0x24
   121e0:	pop	{r4, r5, r6, r7, pc}
   121e4:	ldr	r3, [r4, #12]
   121e8:	ldr	r0, [r4, #24]
   121ec:	ldr	ip, [r4, #28]
   121f0:	lsr	r1, r3, #16
   121f4:	lsr	r2, r3, #8
   121f8:	uxtb	r1, r1
   121fc:	str	r1, [sp, #8]
   12200:	uxtb	r2, r2
   12204:	ldr	r1, [r4, #20]
   12208:	str	r2, [sp, #4]
   1220c:	lsr	r2, r3, #24
   12210:	uxtb	r3, r3
   12214:	str	r0, [sp, #20]
   12218:	str	r1, [sp, #16]
   1221c:	str	r2, [sp, #12]
   12220:	str	r3, [sp]
   12224:	str	ip, [sp, #24]
   12228:	ldr	r1, [pc, #380]	; 123ac <__assert_fail@plt+0x1918>
   1222c:	ldrd	r2, [r4, #4]
   12230:	mov	r0, #1
   12234:	bl	10a4c <__printf_chk@plt>
   12238:	mov	r5, #0
   1223c:	mov	r0, r5
   12240:	add	sp, sp, #36	; 0x24
   12244:	pop	{r4, r5, r6, r7, pc}
   12248:	ldr	r2, [pc, #352]	; 123b0 <__assert_fail@plt+0x191c>
   1224c:	str	r3, [sp]
   12250:	mov	r1, #1
   12254:	ldr	r3, [sp, #56]	; 0x38
   12258:	ldr	r0, [r2]
   1225c:	ldr	r2, [pc, #336]	; 123b4 <__assert_fail@plt+0x1920>
   12260:	bl	10a64 <__fprintf_chk@plt>
   12264:	ldr	r3, [r4, #20]
   12268:	cmp	r3, #0
   1226c:	bne	121c0 <__assert_fail@plt+0x172c>
   12270:	ldr	r3, [pc, #312]	; 123b0 <__assert_fail@plt+0x191c>
   12274:	mov	r2, #24
   12278:	mov	r1, #1
   1227c:	ldr	r3, [r3]
   12280:	ldr	r0, [pc, #304]	; 123b8 <__assert_fail@plt+0x1924>
   12284:	bl	109bc <fwrite@plt>
   12288:	ldr	r3, [r4, #24]
   1228c:	cmp	r3, #0
   12290:	bne	121cc <__assert_fail@plt+0x1738>
   12294:	ldr	r3, [pc, #276]	; 123b0 <__assert_fail@plt+0x191c>
   12298:	mov	r2, #21
   1229c:	mov	r1, #1
   122a0:	ldr	r3, [r3]
   122a4:	ldr	r0, [pc, #272]	; 123bc <__assert_fail@plt+0x1928>
   122a8:	bl	109bc <fwrite@plt>
   122ac:	b	121cc <__assert_fail@plt+0x1738>
   122b0:	ldr	r1, [pc, #264]	; 123c0 <__assert_fail@plt+0x192c>
   122b4:	ldr	r0, [r0]
   122b8:	bl	113e0 <__assert_fail@plt+0x94c>
   122bc:	cmp	r0, #0
   122c0:	blt	12394 <__assert_fail@plt+0x1900>
   122c4:	cmp	r5, #0
   122c8:	beq	122ec <__assert_fail@plt+0x1858>
   122cc:	mov	r2, r4
   122d0:	ldr	r1, [pc, #236]	; 123c4 <__assert_fail@plt+0x1930>
   122d4:	ldr	r0, [r6]
   122d8:	bl	113e0 <__assert_fail@plt+0x94c>
   122dc:	cmp	r0, #0
   122e0:	blt	123a0 <__assert_fail@plt+0x190c>
   122e4:	ldr	r3, [r4, #24]
   122e8:	str	r3, [r6, #356]	; 0x164
   122ec:	ldr	r3, [r4, #12]
   122f0:	ldr	r2, [sp, #60]	; 0x3c
   122f4:	cmp	r3, r2
   122f8:	beq	12318 <__assert_fail@plt+0x1884>
   122fc:	ldr	r2, [pc, #172]	; 123b0 <__assert_fail@plt+0x191c>
   12300:	str	r3, [sp]
   12304:	mov	r1, #1
   12308:	ldr	r0, [r2]
   1230c:	ldr	r3, [sp, #60]	; 0x3c
   12310:	ldr	r2, [pc, #176]	; 123c8 <__assert_fail@plt+0x1934>
   12314:	bl	10a64 <__fprintf_chk@plt>
   12318:	ldr	r3, [r4, #4]
   1231c:	cmp	r3, r7
   12320:	beq	121a4 <__assert_fail@plt+0x1710>
   12324:	ldr	r2, [pc, #132]	; 123b0 <__assert_fail@plt+0x191c>
   12328:	str	r3, [sp]
   1232c:	mov	r1, #1
   12330:	mov	r3, r7
   12334:	ldr	r0, [r2]
   12338:	ldr	r2, [pc, #116]	; 123b4 <__assert_fail@plt+0x1920>
   1233c:	bl	10a64 <__fprintf_chk@plt>
   12340:	ldr	r3, [r4, #8]
   12344:	ldr	r2, [sp, #56]	; 0x38
   12348:	cmp	r3, r2
   1234c:	beq	121b4 <__assert_fail@plt+0x1720>
   12350:	b	12248 <__assert_fail@plt+0x17b4>
   12354:	ldr	r0, [r0]
   12358:	ldr	r1, [pc, #108]	; 123cc <__assert_fail@plt+0x1938>
   1235c:	bl	113e0 <__assert_fail@plt+0x94c>
   12360:	subs	r5, r0, #0
   12364:	bge	121d8 <__assert_fail@plt+0x1744>
   12368:	bl	10a10 <__errno_location@plt>
   1236c:	ldr	r5, [r0]
   12370:	ldr	r0, [pc, #88]	; 123d0 <__assert_fail@plt+0x193c>
   12374:	bl	10998 <perror@plt>
   12378:	b	121d8 <__assert_fail@plt+0x1744>
   1237c:	ldr	r0, [pc, #80]	; 123d4 <__assert_fail@plt+0x1940>
   12380:	bl	10998 <perror@plt>
   12384:	mov	r5, #22
   12388:	mov	r0, r5
   1238c:	add	sp, sp, #36	; 0x24
   12390:	pop	{r4, r5, r6, r7, pc}
   12394:	ldr	r0, [pc, #60]	; 123d8 <__assert_fail@plt+0x1944>
   12398:	bl	10998 <perror@plt>
   1239c:	b	122c4 <__assert_fail@plt+0x1830>
   123a0:	ldr	r0, [pc, #52]	; 123dc <__assert_fail@plt+0x1948>
   123a4:	bl	10998 <perror@plt>
   123a8:	b	122e4 <__assert_fail@plt+0x1850>
   123ac:	andeq	r3, r1, ip, lsr #17
   123b0:	andeq	r4, r2, r0, lsr #1
   123b4:	andeq	r3, r1, ip, asr #16
   123b8:	andeq	r3, r1, r8, ror r8
   123bc:	muleq	r1, r4, r8
   123c0:	sbcgt	r5, ip, r0, asr #12
   123c4:	sbcgt	r5, ip, r5, lsl #12
   123c8:	andeq	r3, r1, r4, lsr #16
   123cc:	sbcgt	r5, ip, r4, lsl #12
   123d0:	andeq	r3, r1, r8, asr #15
   123d4:	andeq	r3, r1, r0, ror #15
   123d8:	strdeq	r3, [r1], -r4
   123dc:	andeq	r3, r1, ip, lsl #16
   123e0:	push	{r4, r5, r6, lr}
   123e4:	mov	r2, r0
   123e8:	mov	r4, r0
   123ec:	mov	r5, #1
   123f0:	ldr	r0, [r2], #112	; 0x70
   123f4:	sub	sp, sp, #16
   123f8:	str	r5, [r4, #112]	; 0x70
   123fc:	ldr	r1, [pc, #104]	; 1246c <__assert_fail@plt+0x19d8>
   12400:	bl	113e0 <__assert_fail@plt+0x94c>
   12404:	subs	r6, r0, #0
   12408:	blt	12450 <__assert_fail@plt+0x19bc>
   1240c:	vldr	s15, [r4, #128]	; 0x80
   12410:	ldr	r2, [r4, #136]	; 0x88
   12414:	ldr	r3, [r4, #132]	; 0x84
   12418:	mov	r0, r5
   1241c:	vcvt.f64.u32	d6, s15
   12420:	vldr	s15, [r4, #124]	; 0x7c
   12424:	ldr	r1, [pc, #68]	; 12470 <__assert_fail@plt+0x19dc>
   12428:	str	r2, [sp, #12]
   1242c:	str	r3, [sp, #8]
   12430:	vcvt.f64.u32	d7, s15
   12434:	ldrd	r2, [r4, #116]	; 0x74
   12438:	vdiv.f64	d5, d6, d7
   1243c:	vstr	d5, [sp]
   12440:	bl	10a4c <__printf_chk@plt>
   12444:	mov	r0, r6
   12448:	add	sp, sp, #16
   1244c:	pop	{r4, r5, r6, pc}
   12450:	bl	10a10 <__errno_location@plt>
   12454:	ldr	r6, [r0]
   12458:	ldr	r0, [pc, #20]	; 12474 <__assert_fail@plt+0x19e0>
   1245c:	bl	10998 <perror@plt>
   12460:	mov	r0, r6
   12464:	add	sp, sp, #16
   12468:	pop	{r4, r5, r6, pc}
   1246c:	sbcgt	r5, ip, r5, lsl r6
   12470:	andeq	r3, r1, r0, lsl #18
   12474:	andeq	r3, r1, r4, asr #18
   12478:	ldr	r3, [r0, #360]	; 0x168
   1247c:	cmp	r3, #0
   12480:	bne	1248c <__assert_fail@plt+0x19f8>
   12484:	mov	r0, r3
   12488:	bx	lr
   1248c:	push	{r4, r5, r6, lr}
   12490:	mov	r2, r0
   12494:	mov	r4, r0
   12498:	mov	r3, #0
   1249c:	mov	r5, #1
   124a0:	ldr	r0, [r2], #332	; 0x14c
   124a4:	ldr	r1, [pc, #200]	; 12574 <__assert_fail@plt+0x1ae0>
   124a8:	str	r3, [r4, #328]	; 0x148
   124ac:	str	r5, [r4, #332]	; 0x14c
   124b0:	str	r5, [r4, #336]	; 0x150
   124b4:	bl	113e0 <__assert_fail@plt+0x94c>
   124b8:	cmp	r0, #0
   124bc:	blt	12550 <__assert_fail@plt+0x1abc>
   124c0:	mov	r0, r5
   124c4:	bl	10974 <sleep@plt>
   124c8:	ldr	r3, [r4, #328]	; 0x148
   124cc:	cmp	r3, #0
   124d0:	bne	1255c <__assert_fail@plt+0x1ac8>
   124d4:	ldr	r3, [r4, #360]	; 0x168
   124d8:	cmp	r3, #0
   124dc:	beq	1252c <__assert_fail@plt+0x1a98>
   124e0:	mov	r5, #0
   124e4:	b	1250c <__assert_fail@plt+0x1a78>
   124e8:	ldr	r3, [r4, #348]	; 0x15c
   124ec:	ldr	r3, [r3, r5, lsl #2]
   124f0:	add	r5, r5, #1
   124f4:	subs	r0, r3, #0
   124f8:	beq	12500 <__assert_fail@plt+0x1a6c>
   124fc:	bl	10950 <free@plt>
   12500:	ldr	r3, [r4, #360]	; 0x168
   12504:	cmp	r5, r3
   12508:	bcs	1252c <__assert_fail@plt+0x1a98>
   1250c:	ldr	r3, [r4, #352]	; 0x160
   12510:	add	r2, r3, r5, lsl #3
   12514:	ldr	r1, [r2, #4]
   12518:	cmp	r1, #0
   1251c:	beq	124e8 <__assert_fail@plt+0x1a54>
   12520:	ldr	r0, [r3, r5, lsl #3]
   12524:	bl	10a70 <munmap@plt>
   12528:	b	124e8 <__assert_fail@plt+0x1a54>
   1252c:	ldr	r0, [r4, #348]	; 0x15c
   12530:	bl	10950 <free@plt>
   12534:	ldr	r0, [r4, #352]	; 0x160
   12538:	bl	10950 <free@plt>
   1253c:	mov	r0, #0
   12540:	str	r0, [r4, #348]	; 0x15c
   12544:	str	r0, [r4, #352]	; 0x160
   12548:	str	r0, [r4, #360]	; 0x168
   1254c:	pop	{r4, r5, r6, pc}
   12550:	bl	10a10 <__errno_location@plt>
   12554:	ldr	r0, [r0]
   12558:	pop	{r4, r5, r6, pc}
   1255c:	ldr	r2, [pc, #20]	; 12578 <__assert_fail@plt+0x1ae4>
   12560:	mov	r1, r5
   12564:	ldr	r0, [r2]
   12568:	ldr	r2, [pc, #12]	; 1257c <__assert_fail@plt+0x1ae8>
   1256c:	bl	10a64 <__fprintf_chk@plt>
   12570:	b	124d4 <__assert_fail@plt+0x1a40>
   12574:	andmi	r5, r4, r3, lsl r6
   12578:	andeq	r4, r2, r0, lsr #1
   1257c:	andeq	r3, r1, r4, asr r9
   12580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12584:	mov	r4, r0
   12588:	sub	sp, sp, #12
   1258c:	mov	r5, r1
   12590:	bl	12478 <__assert_fail@plt+0x19e4>
   12594:	ldr	r3, [r4, #356]	; 0x164
   12598:	cmp	r3, #0
   1259c:	beq	127f4 <__assert_fail@plt+0x1d60>
   125a0:	mov	r2, r4
   125a4:	mov	r3, #1
   125a8:	ldr	r0, [r2], #328	; 0x148
   125ac:	ldr	r1, [pc, #668]	; 12850 <__assert_fail@plt+0x1dbc>
   125b0:	str	r5, [r4, #328]	; 0x148
   125b4:	str	r3, [r4, #332]	; 0x14c
   125b8:	str	r3, [r4, #336]	; 0x150
   125bc:	bl	113e0 <__assert_fail@plt+0x94c>
   125c0:	cmp	r0, #0
   125c4:	blt	127d8 <__assert_fail@plt+0x1d44>
   125c8:	ldr	r3, [r4, #4]
   125cc:	ldr	r5, [r4, #328]	; 0x148
   125d0:	cmp	r3, #0
   125d4:	bne	1271c <__assert_fail@plt+0x1c88>
   125d8:	mov	r1, #4
   125dc:	mov	r0, r5
   125e0:	bl	10914 <calloc@plt>
   125e4:	cmp	r0, #0
   125e8:	mov	r7, r0
   125ec:	str	r0, [r4, #348]	; 0x15c
   125f0:	beq	1283c <__assert_fail@plt+0x1da8>
   125f4:	mov	r1, #8
   125f8:	mov	r0, r5
   125fc:	bl	10914 <calloc@plt>
   12600:	cmp	r0, #0
   12604:	str	r0, [r4, #352]	; 0x160
   12608:	beq	12828 <__assert_fail@plt+0x1d94>
   1260c:	mov	r6, #0
   12610:	cmp	r5, #0
   12614:	str	r6, [r4, #360]	; 0x168
   12618:	beq	12760 <__assert_fail@plt+0x1ccc>
   1261c:	ldr	r8, [pc, #560]	; 12854 <__assert_fail@plt+0x1dc0>
   12620:	ldr	fp, [pc, #560]	; 12858 <__assert_fail@plt+0x1dc4>
   12624:	ldr	r9, [pc, #560]	; 1285c <__assert_fail@plt+0x1dc8>
   12628:	ldr	sl, [pc, #560]	; 12860 <__assert_fail@plt+0x1dcc>
   1262c:	b	126bc <__assert_fail@plt+0x1c28>
   12630:	ldr	r3, [r4, #356]	; 0x164
   12634:	ldr	r1, [r5, #56]	; 0x38
   12638:	cmp	r3, r1
   1263c:	beq	1265c <__assert_fail@plt+0x1bc8>
   12640:	str	r1, [sp]
   12644:	ldr	r0, [r9]
   12648:	mov	r1, #1
   1264c:	ldrcc	r2, [pc, #528]	; 12864 <__assert_fail@plt+0x1dd0>
   12650:	movcs	r2, sl
   12654:	bl	10a64 <__fprintf_chk@plt>
   12658:	ldr	r1, [r5, #56]	; 0x38
   1265c:	ldr	r7, [r4, #360]	; 0x168
   12660:	ldr	r6, [r4, #352]	; 0x160
   12664:	ldr	r2, [r5, #52]	; 0x34
   12668:	ldr	r3, [r4]
   1266c:	add	r0, r6, r7, lsl #3
   12670:	str	r1, [r0, #4]
   12674:	str	r2, [sp, #4]
   12678:	str	r3, [sp]
   1267c:	mov	r2, #3
   12680:	mov	r3, #1
   12684:	mov	r0, #0
   12688:	bl	10a04 <mmap@plt>
   1268c:	ldr	r3, [r4, #360]	; 0x168
   12690:	ldr	r2, [r4, #352]	; 0x160
   12694:	str	r0, [r6, r7, lsl #3]
   12698:	ldr	r2, [r2, r3, lsl #3]
   1269c:	cmn	r2, #1
   126a0:	beq	127a4 <__assert_fail@plt+0x1d10>
   126a4:	ldr	r2, [r4, #328]	; 0x148
   126a8:	add	r6, r3, #1
   126ac:	cmp	r6, r2
   126b0:	str	r6, [r4, #360]	; 0x168
   126b4:	bcs	12760 <__assert_fail@plt+0x1ccc>
   126b8:	ldr	r7, [r4, #348]	; 0x15c
   126bc:	mov	r1, #68	; 0x44
   126c0:	mov	r0, #1
   126c4:	bl	10914 <calloc@plt>
   126c8:	cmp	r0, #0
   126cc:	mov	r5, r0
   126d0:	str	r0, [r7, r6, lsl #2]
   126d4:	beq	12814 <__assert_fail@plt+0x1d80>
   126d8:	mov	r3, #1
   126dc:	mov	r2, r0
   126e0:	mov	r1, r8
   126e4:	ldr	r0, [r4]
   126e8:	str	r6, [r5]
   126ec:	str	r3, [r5, #4]
   126f0:	str	r3, [r5, #48]	; 0x30
   126f4:	bl	113e0 <__assert_fail@plt+0x94c>
   126f8:	cmp	r0, #0
   126fc:	blt	12770 <__assert_fail@plt+0x1cdc>
   12700:	ldr	r3, [r4, #4]
   12704:	cmp	r3, #0
   12708:	beq	12630 <__assert_fail@plt+0x1b9c>
   1270c:	mov	r1, r5
   12710:	mov	r0, fp
   12714:	bl	1179c <__assert_fail@plt+0xd08>
   12718:	b	12630 <__assert_fail@plt+0x1b9c>
   1271c:	ldr	r3, [r4, #332]	; 0x14c
   12720:	mov	r0, #1
   12724:	cmp	r3, #7
   12728:	ldrls	r2, [pc, #312]	; 12868 <__assert_fail@plt+0x1dd4>
   1272c:	ldrhi	r3, [pc, #312]	; 1286c <__assert_fail@plt+0x1dd8>
   12730:	ldrls	r3, [r2, r3, lsl #2]
   12734:	ldr	r2, [r4, #336]	; 0x150
   12738:	cmp	r2, #3
   1273c:	ldrls	r1, [pc, #300]	; 12870 <__assert_fail@plt+0x1ddc>
   12740:	ldrhi	r2, [pc, #292]	; 1286c <__assert_fail@plt+0x1dd8>
   12744:	ldrls	r2, [r1, r2, lsl #2]
   12748:	ldr	r1, [pc, #292]	; 12874 <__assert_fail@plt+0x1de0>
   1274c:	str	r2, [sp]
   12750:	mov	r2, r5
   12754:	bl	10a4c <__printf_chk@plt>
   12758:	ldr	r5, [r4, #328]	; 0x148
   1275c:	b	125d8 <__assert_fail@plt+0x1b44>
   12760:	mov	r5, #0
   12764:	mov	r0, r5
   12768:	add	sp, sp, #12
   1276c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12770:	bl	10a10 <__errno_location@plt>
   12774:	ldr	r5, [r0]
   12778:	ldr	r0, [pc, #248]	; 12878 <__assert_fail@plt+0x1de4>
   1277c:	bl	10998 <perror@plt>
   12780:	ldr	r2, [r4, #360]	; 0x168
   12784:	ldr	r3, [r4, #348]	; 0x15c
   12788:	ldr	r0, [r3, r2, lsl #2]
   1278c:	bl	10950 <free@plt>
   12790:	mov	r0, r4
   12794:	bl	12478 <__assert_fail@plt+0x19e4>
   12798:	mov	r0, r5
   1279c:	add	sp, sp, #12
   127a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a4:	ldr	r0, [pc, #208]	; 1287c <__assert_fail@plt+0x1de8>
   127a8:	bl	10998 <perror@plt>
   127ac:	ldr	r2, [r4, #360]	; 0x168
   127b0:	ldr	r3, [r4, #348]	; 0x15c
   127b4:	ldr	r0, [r3, r2, lsl #2]
   127b8:	bl	10950 <free@plt>
   127bc:	mov	r0, r4
   127c0:	bl	12478 <__assert_fail@plt+0x19e4>
   127c4:	bl	10a10 <__errno_location@plt>
   127c8:	ldr	r5, [r0]
   127cc:	mov	r0, r5
   127d0:	add	sp, sp, #12
   127d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d8:	ldr	r0, [pc, #160]	; 12880 <__assert_fail@plt+0x1dec>
   127dc:	bl	10998 <perror@plt>
   127e0:	bl	10a10 <__errno_location@plt>
   127e4:	ldr	r5, [r0]
   127e8:	mov	r0, r5
   127ec:	add	sp, sp, #12
   127f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f4:	ldr	r3, [pc, #96]	; 1285c <__assert_fail@plt+0x1dc8>
   127f8:	mov	r2, #34	; 0x22
   127fc:	mov	r1, #1
   12800:	ldr	r3, [r3]
   12804:	ldr	r0, [pc, #120]	; 12884 <__assert_fail@plt+0x1df0>
   12808:	bl	109bc <fwrite@plt>
   1280c:	mvn	r5, #0
   12810:	b	12764 <__assert_fail@plt+0x1cd0>
   12814:	ldr	r3, [pc, #108]	; 12888 <__assert_fail@plt+0x1df4>
   12818:	ldr	r2, [pc, #108]	; 1288c <__assert_fail@plt+0x1df8>
   1281c:	ldr	r1, [pc, #108]	; 12890 <__assert_fail@plt+0x1dfc>
   12820:	ldr	r0, [pc, #108]	; 12894 <__assert_fail@plt+0x1e00>
   12824:	bl	10a94 <__assert_fail@plt>
   12828:	ldr	r3, [pc, #88]	; 12888 <__assert_fail@plt+0x1df4>
   1282c:	mov	r2, #616	; 0x268
   12830:	ldr	r1, [pc, #88]	; 12890 <__assert_fail@plt+0x1dfc>
   12834:	ldr	r0, [pc, #92]	; 12898 <__assert_fail@plt+0x1e04>
   12838:	bl	10a94 <__assert_fail@plt>
   1283c:	ldr	r3, [pc, #68]	; 12888 <__assert_fail@plt+0x1df4>
   12840:	ldr	r2, [pc, #84]	; 1289c <__assert_fail@plt+0x1e08>
   12844:	ldr	r1, [pc, #68]	; 12890 <__assert_fail@plt+0x1dfc>
   12848:	ldr	r0, [pc, #80]	; 128a0 <__assert_fail@plt+0x1e0c>
   1284c:	bl	10a94 <__assert_fail@plt>
   12850:	andsgt	r5, r4, r8, lsl #12
   12854:	subgt	r5, r4, r9, lsl #12
   12858:	andeq	r3, r1, r8, lsl sl
   1285c:	andeq	r4, r2, r0, lsr #1
   12860:	andeq	r3, r1, r4, lsl #21
   12864:	andeq	r3, r1, r4, lsr #20
   12868:	andeq	r4, r2, ip, asr r0
   1286c:	andeq	r3, r1, r8, asr #8
   12870:	andeq	r3, r1, r4, asr #5
   12874:			; <UNDEFINED> instruction: 0x000139bc
   12878:	andeq	r3, r1, ip, lsl #20
   1287c:			; <UNDEFINED> instruction: 0x00013abc
   12880:			; <UNDEFINED> instruction: 0x000139b4
   12884:	muleq	r1, r0, r9
   12888:	andeq	r3, r1, r4, lsl #6
   1288c:	andeq	r0, r0, pc, ror #4
   12890:	andeq	r3, r1, r8, lsl #11
   12894:	andeq	r3, r1, r8, lsr r6
   12898:	strdeq	r3, [r1], -ip
   1289c:	andeq	r0, r0, r6, ror #4
   128a0:	andeq	r3, r1, r4, ror #19
   128a4:	push	{r4, r5, r6, lr}
   128a8:	mov	r4, r0
   128ac:	ldr	r5, [pc, #272]	; 129c4 <__assert_fail@plt+0x1f30>
   128b0:	sub	sp, sp, #72	; 0x48
   128b4:	mov	r2, #68	; 0x44
   128b8:	ldr	r3, [r5]
   128bc:	mov	r6, r1
   128c0:	mov	r0, sp
   128c4:	mov	r1, #0
   128c8:	str	r3, [sp, #68]	; 0x44
   128cc:	bl	10a34 <memset@plt>
   128d0:	mov	r3, #1
   128d4:	mov	r2, sp
   128d8:	ldr	r0, [r4]
   128dc:	ldr	r1, [pc, #228]	; 129c8 <__assert_fail@plt+0x1f34>
   128e0:	str	r3, [sp, #4]
   128e4:	str	r3, [sp, #48]	; 0x30
   128e8:	bl	113e0 <__assert_fail@plt+0x94c>
   128ec:	cmn	r0, #1
   128f0:	bne	1293c <__assert_fail@plt+0x1ea8>
   128f4:	bl	10a10 <__errno_location@plt>
   128f8:	ldr	r3, [r0]
   128fc:	mov	r4, r0
   12900:	cmp	r3, #11
   12904:	moveq	r6, #0
   12908:	bne	12928 <__assert_fail@plt+0x1e94>
   1290c:	ldr	r2, [sp, #68]	; 0x44
   12910:	ldr	r3, [r5]
   12914:	mov	r0, r6
   12918:	cmp	r2, r3
   1291c:	bne	129ac <__assert_fail@plt+0x1f18>
   12920:	add	sp, sp, #72	; 0x48
   12924:	pop	{r4, r5, r6, pc}
   12928:	ldr	r0, [pc, #156]	; 129cc <__assert_fail@plt+0x1f38>
   1292c:	bl	10998 <perror@plt>
   12930:	ldr	r6, [r4]
   12934:	rsb	r6, r6, #0
   12938:	b	1290c <__assert_fail@plt+0x1e78>
   1293c:	mov	r1, sp
   12940:	ldr	r0, [pc, #136]	; 129d0 <__assert_fail@plt+0x1f3c>
   12944:	bl	1179c <__assert_fail@plt+0xd08>
   12948:	ldr	r3, [sp]
   1294c:	ldr	r2, [r4, #360]	; 0x168
   12950:	cmp	r3, r2
   12954:	bcs	129b0 <__assert_fail@plt+0x1f1c>
   12958:	ldr	r1, [r4, #352]	; 0x160
   1295c:	mov	r0, sp
   12960:	add	r1, r1, r3, lsl #3
   12964:	blx	r6
   12968:	subs	r6, r0, #0
   1296c:	blt	129a0 <__assert_fail@plt+0x1f0c>
   12970:	mov	r2, sp
   12974:	ldr	r0, [r4]
   12978:	ldr	r1, [pc, #84]	; 129d4 <__assert_fail@plt+0x1f40>
   1297c:	bl	113e0 <__assert_fail@plt+0x94c>
   12980:	cmn	r0, #1
   12984:	bne	1290c <__assert_fail@plt+0x1e78>
   12988:	ldr	r0, [pc, #72]	; 129d8 <__assert_fail@plt+0x1f44>
   1298c:	bl	10998 <perror@plt>
   12990:	bl	10a10 <__errno_location@plt>
   12994:	ldr	r6, [r0]
   12998:	rsb	r6, r6, #0
   1299c:	b	1290c <__assert_fail@plt+0x1e78>
   129a0:	mov	r0, r4
   129a4:	bl	12478 <__assert_fail@plt+0x19e4>
   129a8:	b	1290c <__assert_fail@plt+0x1e78>
   129ac:	bl	10980 <__stack_chk_fail@plt>
   129b0:	ldr	r3, [pc, #36]	; 129dc <__assert_fail@plt+0x1f48>
   129b4:	mov	r2, #700	; 0x2bc
   129b8:	ldr	r1, [pc, #32]	; 129e0 <__assert_fail@plt+0x1f4c>
   129bc:	ldr	r0, [pc, #32]	; 129e4 <__assert_fail@plt+0x1f50>
   129c0:	bl	10a94 <__assert_fail@plt>
   129c4:	andeq	r3, r2, r8, ror #28
   129c8:	subgt	r5, r4, r1, lsl r6
   129cc:	andeq	r3, r1, r4, asr #21
   129d0:	andeq	r3, r1, ip, asr #21
   129d4:	subgt	r5, r4, pc, lsl #12
   129d8:	andeq	r3, r1, ip, ror #21
   129dc:	andeq	r3, r1, r4, lsl r3
   129e0:	andeq	r3, r1, r8, lsl #11
   129e4:	ldrdeq	r3, [r1], -r4
   129e8:	push	{r4, r5, r6, r7, r8, lr}
   129ec:	sub	sp, sp, #72	; 0x48
   129f0:	ldr	r8, [pc, #260]	; 12afc <__assert_fail@plt+0x2068>
   129f4:	ldr	r1, [r0, #4]
   129f8:	mov	r5, r0
   129fc:	ldr	r3, [r8]
   12a00:	cmp	r1, #0
   12a04:	ldr	r2, [r0, #360]	; 0x168
   12a08:	str	r3, [sp, #68]	; 0x44
   12a0c:	bne	12aa4 <__assert_fail@plt+0x2010>
   12a10:	cmp	r2, #0
   12a14:	beq	12ad0 <__assert_fail@plt+0x203c>
   12a18:	ldr	r6, [pc, #224]	; 12b00 <__assert_fail@plt+0x206c>
   12a1c:	ldr	r7, [pc, #224]	; 12b04 <__assert_fail@plt+0x2070>
   12a20:	mov	r4, #0
   12a24:	b	12a44 <__assert_fail@plt+0x1fb0>
   12a28:	mov	r1, sp
   12a2c:	mov	r0, r7
   12a30:	bl	1179c <__assert_fail@plt+0xd08>
   12a34:	ldr	r3, [r5, #360]	; 0x168
   12a38:	add	r4, r4, #1
   12a3c:	cmp	r3, r4
   12a40:	bls	12abc <__assert_fail@plt+0x2028>
   12a44:	mov	r2, #60	; 0x3c
   12a48:	mov	r1, #0
   12a4c:	add	r0, sp, #8
   12a50:	bl	10a34 <memset@plt>
   12a54:	mov	r3, #1
   12a58:	mov	r2, sp
   12a5c:	mov	r1, r6
   12a60:	ldr	r0, [r5]
   12a64:	str	r4, [sp]
   12a68:	str	r3, [sp, #4]
   12a6c:	str	r3, [sp, #48]	; 0x30
   12a70:	bl	113e0 <__assert_fail@plt+0x94c>
   12a74:	cmp	r0, #0
   12a78:	beq	12a28 <__assert_fail@plt+0x1f94>
   12a7c:	ldr	r0, [pc, #132]	; 12b08 <__assert_fail@plt+0x2074>
   12a80:	bl	10998 <perror@plt>
   12a84:	bl	10a10 <__errno_location@plt>
   12a88:	ldr	r0, [r0]
   12a8c:	ldr	r2, [sp, #68]	; 0x44
   12a90:	ldr	r3, [r8]
   12a94:	cmp	r2, r3
   12a98:	bne	12af8 <__assert_fail@plt+0x2064>
   12a9c:	add	sp, sp, #72	; 0x48
   12aa0:	pop	{r4, r5, r6, r7, r8, pc}
   12aa4:	ldr	r1, [pc, #96]	; 12b0c <__assert_fail@plt+0x2078>
   12aa8:	mov	r0, #1
   12aac:	bl	10a4c <__printf_chk@plt>
   12ab0:	ldr	r3, [r5, #360]	; 0x168
   12ab4:	cmp	r3, #0
   12ab8:	bne	12a18 <__assert_fail@plt+0x1f84>
   12abc:	ldr	r3, [r5, #4]
   12ac0:	cmp	r3, #0
   12ac4:	beq	12ad0 <__assert_fail@plt+0x203c>
   12ac8:	ldr	r0, [pc, #64]	; 12b10 <__assert_fail@plt+0x207c>
   12acc:	bl	109d4 <puts@plt>
   12ad0:	mov	r2, r5
   12ad4:	ldr	r1, [pc, #56]	; 12b14 <__assert_fail@plt+0x2080>
   12ad8:	ldr	r0, [r2], #332	; 0x14c
   12adc:	bl	113e0 <__assert_fail@plt+0x94c>
   12ae0:	cmp	r0, #0
   12ae4:	movge	r0, #0
   12ae8:	bge	12a8c <__assert_fail@plt+0x1ff8>
   12aec:	bl	10a10 <__errno_location@plt>
   12af0:	ldr	r0, [r0]
   12af4:	b	12a8c <__assert_fail@plt+0x1ff8>
   12af8:	bl	10980 <__stack_chk_fail@plt>
   12afc:	andeq	r3, r2, r8, ror #28
   12b00:	subgt	r5, r4, pc, lsl #12
   12b04:	andeq	r3, r1, ip, lsl #22
   12b08:	andeq	r3, r1, ip, ror #21
   12b0c:	strdeq	r3, [r1], -r4
   12b10:	andeq	r3, r1, r4, lsl fp
   12b14:	andmi	r5, r4, r2, lsl r6
   12b18:	push	{r4, lr}
   12b1c:	bl	12478 <__assert_fail@plt+0x19e4>
   12b20:	mov	r0, #0
   12b24:	pop	{r4, pc}
   12b28:	push	{r4, lr}
   12b2c:	mov	r4, r0
   12b30:	bl	12478 <__assert_fail@plt+0x19e4>
   12b34:	add	r0, r4, #316	; 0x13c
   12b38:	bl	118f4 <__assert_fail@plt+0xe60>
   12b3c:	add	r0, r4, #320	; 0x140
   12b40:	bl	118f4 <__assert_fail@plt+0xe60>
   12b44:	add	r0, r4, #324	; 0x144
   12b48:	bl	118f4 <__assert_fail@plt+0xe60>
   12b4c:	ldr	r0, [r4]
   12b50:	pop	{r4, lr}
   12b54:	b	10a88 <close@plt>
   12b58:	push	{r4, r5, r6, r7, lr}
   12b5c:	vpush	{d8}
   12b60:	ldr	r6, [pc, #480]	; 12d48 <__assert_fail@plt+0x22b4>
   12b64:	mov	r5, r0
   12b68:	mov	r4, r1
   12b6c:	sub	sp, sp, #148	; 0x94
   12b70:	ldr	r3, [r6]
   12b74:	mov	r1, #0
   12b78:	mov	r7, r2
   12b7c:	add	r0, sp, #56	; 0x38
   12b80:	mov	r2, #84	; 0x54
   12b84:	str	r3, [sp, #140]	; 0x8c
   12b88:	bl	10a34 <memset@plt>
   12b8c:	add	r2, sp, #56	; 0x38
   12b90:	ldr	r0, [r5]
   12b94:	ldr	r1, [pc, #432]	; 12d4c <__assert_fail@plt+0x22b8>
   12b98:	bl	113e0 <__assert_fail@plt+0x94c>
   12b9c:	cmn	r0, #1
   12ba0:	beq	12c50 <__assert_fail@plt+0x21bc>
   12ba4:	ldr	r3, [sp, #96]	; 0x60
   12ba8:	ldr	r2, [r5, #4]
   12bac:	tst	r3, #1
   12bb0:	beq	12c38 <__assert_fail@plt+0x21a4>
   12bb4:	cmp	r2, #0
   12bb8:	vldr	d8, [pc, #360]	; 12d28 <__assert_fail@plt+0x2294>
   12bbc:	bne	12c7c <__assert_fail@plt+0x21e8>
   12bc0:	add	r0, sp, #12
   12bc4:	mov	r2, #44	; 0x2c
   12bc8:	mov	r1, #0
   12bcc:	bl	10a34 <memset@plt>
   12bd0:	mov	r3, #2
   12bd4:	ands	r4, r4, #1
   12bd8:	str	r3, [sp, #16]
   12bdc:	ldr	r0, [r5]
   12be0:	beq	12c88 <__assert_fail@plt+0x21f4>
   12be4:	add	r2, sp, #12
   12be8:	ldr	r1, [pc, #352]	; 12d50 <__assert_fail@plt+0x22bc>
   12bec:	bl	113e0 <__assert_fail@plt+0x94c>
   12bf0:	cmn	r0, #1
   12bf4:	beq	12d10 <__assert_fail@plt+0x227c>
   12bf8:	ldr	r3, [sp, #20]
   12bfc:	ldr	r2, [r5, #4]
   12c00:	vmov	s15, r3
   12c04:	cmp	r2, #0
   12c08:	vcvt.f64.u32	d7, s15
   12c0c:	vmul.f64	d8, d7, d8
   12c10:	vstr	d8, [r7]
   12c14:	bne	12cf0 <__assert_fail@plt+0x225c>
   12c18:	mov	r0, #0
   12c1c:	ldr	r2, [sp, #140]	; 0x8c
   12c20:	ldr	r3, [r6]
   12c24:	cmp	r2, r3
   12c28:	bne	12d24 <__assert_fail@plt+0x2290>
   12c2c:	add	sp, sp, #148	; 0x94
   12c30:	vpop	{d8}
   12c34:	pop	{r4, r5, r6, r7, pc}
   12c38:	cmp	r2, #0
   12c3c:	beq	12c48 <__assert_fail@plt+0x21b4>
   12c40:	ldr	r0, [pc, #268]	; 12d54 <__assert_fail@plt+0x22c0>
   12c44:	bl	109d4 <puts@plt>
   12c48:	vldr	d8, [pc, #224]	; 12d30 <__assert_fail@plt+0x229c>
   12c4c:	b	12bc0 <__assert_fail@plt+0x212c>
   12c50:	ldr	r0, [pc, #256]	; 12d58 <__assert_fail@plt+0x22c4>
   12c54:	bl	10998 <perror@plt>
   12c58:	ldr	r0, [pc, #252]	; 12d5c <__assert_fail@plt+0x22c8>
   12c5c:	bl	109d4 <puts@plt>
   12c60:	ldr	r3, [r5, #4]
   12c64:	cmp	r3, #0
   12c68:	beq	12c48 <__assert_fail@plt+0x21b4>
   12c6c:	ldr	r3, [sp, #96]	; 0x60
   12c70:	tst	r3, #1
   12c74:	beq	12c40 <__assert_fail@plt+0x21ac>
   12c78:	vldr	d8, [pc, #176]	; 12d30 <__assert_fail@plt+0x229c>
   12c7c:	ldr	r0, [pc, #220]	; 12d60 <__assert_fail@plt+0x22cc>
   12c80:	bl	109d4 <puts@plt>
   12c84:	b	12bc0 <__assert_fail@plt+0x212c>
   12c88:	vldr	d6, [pc, #168]	; 12d38 <__assert_fail@plt+0x22a4>
   12c8c:	vldr	d7, [r7]
   12c90:	add	r2, sp, #12
   12c94:	ldr	r1, [pc, #200]	; 12d64 <__assert_fail@plt+0x22d0>
   12c98:	vmla.f64	d7, d8, d6
   12c9c:	vmov.f64	d6, d7
   12ca0:	vdiv.f64	d7, d6, d8
   12ca4:	vcvt.u32.f64	s14, d7
   12ca8:	vstr	s14, [sp, #20]
   12cac:	bl	113e0 <__assert_fail@plt+0x94c>
   12cb0:	cmn	r0, #1
   12cb4:	beq	12d10 <__assert_fail@plt+0x227c>
   12cb8:	ldr	r3, [r5, #4]
   12cbc:	cmp	r3, #0
   12cc0:	beq	12c18 <__assert_fail@plt+0x2184>
   12cc4:	vldr	d6, [r7]
   12cc8:	vldr	d7, [pc, #112]	; 12d40 <__assert_fail@plt+0x22ac>
   12ccc:	ldr	r3, [sp, #20]
   12cd0:	ldr	r1, [pc, #144]	; 12d68 <__assert_fail@plt+0x22d4>
   12cd4:	str	r3, [sp]
   12cd8:	vdiv.f64	d7, d6, d7
   12cdc:	mov	r0, #1
   12ce0:	vmov	r2, r3, d7
   12ce4:	bl	10a4c <__printf_chk@plt>
   12ce8:	mov	r0, r4
   12cec:	b	12c1c <__assert_fail@plt+0x2188>
   12cf0:	vldr	d7, [pc, #72]	; 12d40 <__assert_fail@plt+0x22ac>
   12cf4:	str	r3, [sp]
   12cf8:	ldr	r1, [pc, #108]	; 12d6c <__assert_fail@plt+0x22d8>
   12cfc:	mov	r0, #1
   12d00:	vdiv.f64	d7, d8, d7
   12d04:	vmov	r2, r3, d7
   12d08:	bl	10a4c <__printf_chk@plt>
   12d0c:	b	12c18 <__assert_fail@plt+0x2184>
   12d10:	ldr	r0, [pc, #88]	; 12d70 <__assert_fail@plt+0x22dc>
   12d14:	bl	10998 <perror@plt>
   12d18:	bl	10a10 <__errno_location@plt>
   12d1c:	ldr	r0, [r0]
   12d20:	b	12c1c <__assert_fail@plt+0x2188>
   12d24:	bl	10980 <__stack_chk_fail@plt>
   12d28:	andeq	r0, r0, r0
   12d2c:	submi	r4, pc, r0
   12d30:	andeq	r0, r0, r0
   12d34:	rscmi	r8, lr, r0, lsl #9
   12d38:	andeq	r0, r0, r0
   12d3c:	svccc	0x00e00000
   12d40:	andeq	r0, r0, r0
   12d44:	smlawbmi	lr, r0, r4, r8
   12d48:	andeq	r3, r2, r8, ror #28
   12d4c:	subsgt	r5, r4, sp, lsl r6
   12d50:	eorgt	r5, ip, r8, lsr r6
   12d54:	andeq	r3, r1, r8, asr fp
   12d58:	andeq	r3, r1, r8, lsr #22
   12d5c:	andeq	r3, r1, r0, lsr fp
   12d60:	andeq	r3, r1, r8, asr #22
   12d64:	eormi	r5, ip, r9, lsr r6
   12d68:	muleq	r1, r8, fp
   12d6c:	andeq	r3, r1, r4, ror fp
   12d70:	andeq	r3, r1, r8, ror #22
   12d74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d78:	mov	r7, r0
   12d7c:	ldr	r6, [pc, #72]	; 12dcc <__assert_fail@plt+0x2338>
   12d80:	ldr	r5, [pc, #72]	; 12dd0 <__assert_fail@plt+0x233c>
   12d84:	add	r6, pc, r6
   12d88:	add	r5, pc, r5
   12d8c:	sub	r6, r6, r5
   12d90:	mov	r8, r1
   12d94:	mov	r9, r2
   12d98:	bl	108f4 <calloc@plt-0x20>
   12d9c:	asrs	r6, r6, #2
   12da0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12da4:	mov	r4, #0
   12da8:	add	r4, r4, #1
   12dac:	ldr	r3, [r5], #4
   12db0:	mov	r2, r9
   12db4:	mov	r1, r8
   12db8:	mov	r0, r7
   12dbc:	blx	r3
   12dc0:	cmp	r6, r4
   12dc4:	bne	12da8 <__assert_fail@plt+0x2314>
   12dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dcc:	ldrdeq	r1, [r1], -r8
   12dd0:	ldrdeq	r1, [r1], -r0
   12dd4:	bx	lr

Disassembly of section .fini:

00012dd8 <.fini>:
   12dd8:	push	{r3, lr}
   12ddc:	pop	{r3, pc}
