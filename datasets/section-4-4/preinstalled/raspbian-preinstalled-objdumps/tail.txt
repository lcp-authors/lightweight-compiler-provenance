
raspbian-preinstalled/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	13e80 <__assert_fail@plt+0x2a90>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	ip, r1, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <read@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <free@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <nanosleep@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <_exit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <memcpy@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <__strtoull_internal@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <mbsinit@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <fwrite_unlocked@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <select@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <__stack_chk_fail@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <__fdelt_chk@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <textdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <open64@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <getenv@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <malloc@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <__libc_start_main@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__gmon_start__@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <getopt_long@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <kill@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <__ctype_b_loc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <exit@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <strlen@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <inotify_init@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <memrchr@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <inotify_add_watch@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <__cxa_atexit@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <memset@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__printf_chk@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <fileno@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__fprintf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <memchr@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <strtod_l@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fcntl64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <newlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <bindtextdomain@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <__xstat64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <isatty@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <inotify_rm_watch@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <__lxstat64@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <__assert_fail@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

Disassembly of section .text:

00011400 <.text>:
   11400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11404:	vpush	{d8-d9}
   11408:	ldr	r3, [pc, #1232]	; 118e0 <__assert_fail@plt+0x4f0>
   1140c:	mov	r6, r1
   11410:	mov	r2, #10
   11414:	sub	sp, sp, #476	; 0x1dc
   11418:	ldr	r1, [r3]
   1141c:	mov	r3, #0
   11420:	mov	r5, r0
   11424:	ldr	r0, [r6]
   11428:	strd	r2, [sp, #120]	; 0x78
   1142c:	str	r1, [sp, #468]	; 0x1d4
   11430:	bl	174fc <__assert_fail@plt+0x610c>
   11434:	ldr	r1, [pc, #1212]	; 118f8 <__assert_fail@plt+0x508>
   11438:	mov	r0, #6
   1143c:	bl	11354 <setlocale@plt>
   11440:	ldr	r1, [pc, #1032]	; 11850 <__assert_fail@plt+0x460>
   11444:	ldr	r0, [pc, #1032]	; 11854 <__assert_fail@plt+0x464>
   11448:	bl	11390 <bindtextdomain@plt>
   1144c:	ldr	sl, [pc, #1028]	; 11858 <__assert_fail@plt+0x468>
   11450:	ldr	r0, [pc, #1020]	; 11854 <__assert_fail@plt+0x464>
   11454:	bl	11198 <textdomain@plt>
   11458:	ldr	r0, [pc, #1020]	; 1185c <__assert_fail@plt+0x46c>
   1145c:	bl	1b698 <__assert_fail@plt+0xa2a8>
   11460:	mov	r3, #0
   11464:	mov	r1, #1
   11468:	mov	r2, #10
   1146c:	cmp	r5, #2
   11470:	strb	r1, [sl, #5]
   11474:	strb	r2, [sl]
   11478:	strb	r3, [sl, #4]
   1147c:	strb	r3, [sl, #1]
   11480:	strb	r3, [sl, #6]
   11484:	strb	r3, [sl, #7]
   11488:	beq	114b0 <__assert_fail@plt+0xc0>
   1148c:	cmp	r5, #3
   11490:	beq	11a08 <__assert_fail@plt+0x618>
   11494:	cmp	r5, #4
   11498:	bne	114d0 <__assert_fail@plt+0xe0>
   1149c:	ldr	r1, [pc, #956]	; 11860 <__assert_fail@plt+0x470>
   114a0:	ldr	r0, [r6, #8]
   114a4:	bl	110cc <strcmp@plt>
   114a8:	cmp	r0, #0
   114ac:	bne	114d0 <__assert_fail@plt+0xe0>
   114b0:	bl	1747c <__assert_fail@plt+0x608c>
   114b4:	ldr	r2, [r6, #4]
   114b8:	mov	ip, r2
   114bc:	ldrb	r3, [ip], #1
   114c0:	cmp	r3, #43	; 0x2b
   114c4:	beq	119ec <__assert_fail@plt+0x5fc>
   114c8:	cmp	r3, #45	; 0x2d
   114cc:	beq	1190c <__assert_fail@plt+0x51c>
   114d0:	mov	r3, #0
   114d4:	vldr	d8, [pc, #876]	; 11848 <__assert_fail@plt+0x458>
   114d8:	ldr	r8, [pc, #900]	; 11864 <__assert_fail@plt+0x474>
   114dc:	ldr	r7, [pc, #900]	; 11868 <__assert_fail@plt+0x478>
   114e0:	ldr	r9, [pc, #900]	; 1186c <__assert_fail@plt+0x47c>
   114e4:	sub	r5, r5, r3
   114e8:	add	r6, r6, r3, lsl #2
   114ec:	mov	r3, #0
   114f0:	str	r3, [sp, #24]
   114f4:	mov	r4, #0
   114f8:	str	r4, [sp]
   114fc:	mov	r3, r8
   11500:	mov	r2, r7
   11504:	mov	r1, r6
   11508:	mov	r0, r5
   1150c:	bl	11258 <getopt_long@plt>
   11510:	cmn	r0, #1
   11514:	beq	11a38 <__assert_fail@plt+0x648>
   11518:	cmp	r0, #113	; 0x71
   1151c:	beq	117d4 <__assert_fail@plt+0x3e4>
   11520:	ble	11550 <__assert_fail@plt+0x160>
   11524:	ldr	r3, [pc, #836]	; 11870 <__assert_fail@plt+0x480>
   11528:	cmp	r0, r3
   1152c:	beq	11788 <__assert_fail@plt+0x398>
   11530:	bgt	1173c <__assert_fail@plt+0x34c>
   11534:	cmp	r0, #118	; 0x76
   11538:	beq	1177c <__assert_fail@plt+0x38c>
   1153c:	ble	11648 <__assert_fail@plt+0x258>
   11540:	cmp	r0, #122	; 0x7a
   11544:	bne	11584 <__assert_fail@plt+0x194>
   11548:	strb	r4, [sl]
   1154c:	b	114f4 <__assert_fail@plt+0x104>
   11550:	cmp	r0, #57	; 0x39
   11554:	ble	115f0 <__assert_fail@plt+0x200>
   11558:	cmp	r0, #99	; 0x63
   1155c:	beq	116b4 <__assert_fail@plt+0x2c4>
   11560:	bgt	11598 <__assert_fail@plt+0x1a8>
   11564:	cmp	r0, #70	; 0x46
   11568:	bne	13238 <__assert_fail@plt+0x1e48>
   1156c:	ldr	r2, [pc, #916]	; 11908 <__assert_fail@plt+0x518>
   11570:	mov	r3, #1
   11574:	strb	r3, [sl, #7]
   11578:	str	r3, [r2, #4]
   1157c:	strb	r3, [sl, #2]
   11580:	b	114f4 <__assert_fail@plt+0x104>
   11584:	cmp	r0, #256	; 0x100
   11588:	bne	13238 <__assert_fail@plt+0x1e48>
   1158c:	mov	r3, #1
   11590:	strb	r3, [sl, #2]
   11594:	b	114f4 <__assert_fail@plt+0x104>
   11598:	cmp	r0, #102	; 0x66
   1159c:	bne	116ac <__assert_fail@plt+0x2bc>
   115a0:	ldr	r1, [r9]
   115a4:	mov	r3, #1
   115a8:	cmp	r1, #0
   115ac:	strb	r3, [sl, #7]
   115b0:	beq	11834 <__assert_fail@plt+0x444>
   115b4:	ldr	r3, [pc, #696]	; 11874 <__assert_fail@plt+0x484>
   115b8:	ldr	r4, [pc, #696]	; 11878 <__assert_fail@plt+0x488>
   115bc:	mov	r0, #4
   115c0:	ldr	r3, [r3]
   115c4:	add	r2, r4, #72	; 0x48
   115c8:	str	r3, [sp, #4]
   115cc:	str	r0, [sp]
   115d0:	add	r3, r4, #64	; 0x40
   115d4:	ldr	r0, [pc, #672]	; 1187c <__assert_fail@plt+0x48c>
   115d8:	bl	15ef0 <__assert_fail@plt+0x4b00>
   115dc:	ldr	r3, [pc, #804]	; 11908 <__assert_fail@plt+0x518>
   115e0:	add	r0, r4, r0, lsl #2
   115e4:	ldr	r2, [r0, #64]	; 0x40
   115e8:	str	r2, [r3, #4]
   115ec:	b	114f4 <__assert_fail@plt+0x104>
   115f0:	cmp	r0, #48	; 0x30
   115f4:	mov	fp, r0
   115f8:	bge	13214 <__assert_fail@plt+0x1e24>
   115fc:	cmn	r0, #3
   11600:	bne	1176c <__assert_fail@plt+0x37c>
   11604:	ldr	r3, [pc, #628]	; 11880 <__assert_fail@plt+0x490>
   11608:	ldr	r0, [pc, #628]	; 11884 <__assert_fail@plt+0x494>
   1160c:	ldr	r2, [pc, #628]	; 11888 <__assert_fail@plt+0x498>
   11610:	ldr	ip, [pc, #628]	; 1188c <__assert_fail@plt+0x49c>
   11614:	ldr	r1, [pc, #628]	; 11890 <__assert_fail@plt+0x4a0>
   11618:	str	r4, [sp, #16]
   1161c:	ldr	r0, [r0]
   11620:	ldr	r3, [r3]
   11624:	str	r2, [sp, #12]
   11628:	ldr	r2, [pc, #612]	; 11894 <__assert_fail@plt+0x4a4>
   1162c:	stmib	sp, {r1, ip}
   11630:	str	r2, [sp]
   11634:	ldr	r1, [pc, #604]	; 11898 <__assert_fail@plt+0x4a8>
   11638:	ldr	r2, [pc, #604]	; 1189c <__assert_fail@plt+0x4ac>
   1163c:	bl	19c78 <__assert_fail@plt+0x8888>
   11640:	mov	r0, r4
   11644:	bl	1127c <exit@plt>
   11648:	cmp	r0, #115	; 0x73
   1164c:	bne	13238 <__assert_fail@plt+0x1e48>
   11650:	mov	r1, r4
   11654:	ldr	r3, [pc, #580]	; 118a0 <__assert_fail@plt+0x4b0>
   11658:	add	r2, sp, #232	; 0xe8
   1165c:	ldr	r0, [r9]
   11660:	bl	1a1d4 <__assert_fail@plt+0x8de4>
   11664:	cmp	r0, #0
   11668:	beq	1167c <__assert_fail@plt+0x28c>
   1166c:	vldr	d8, [sp, #232]	; 0xe8
   11670:	vcmpe.f64	d8, #0.0
   11674:	vmrs	APSR_nzcv, fpscr
   11678:	bge	114f4 <__assert_fail@plt+0x104>
   1167c:	mov	r2, #5
   11680:	ldr	r1, [pc, #540]	; 118a4 <__assert_fail@plt+0x4b4>
   11684:	mov	r0, #0
   11688:	bl	11168 <dcgettext@plt>
   1168c:	mov	r4, r0
   11690:	ldr	r0, [r9]
   11694:	bl	19760 <__assert_fail@plt+0x8370>
   11698:	mov	r2, r4
   1169c:	mov	r1, #0
   116a0:	mov	r3, r0
   116a4:	mov	r0, #1
   116a8:	bl	11204 <error@plt>
   116ac:	cmp	r0, #110	; 0x6e
   116b0:	bne	13238 <__assert_fail@plt+0x1e48>
   116b4:	ldr	r3, [r9]
   116b8:	sub	r2, r0, #110	; 0x6e
   116bc:	clz	r2, r2
   116c0:	lsr	r2, r2, #5
   116c4:	strb	r2, [sl, #5]
   116c8:	ldrb	r2, [r3]
   116cc:	cmp	r2, #43	; 0x2b
   116d0:	moveq	r3, #1
   116d4:	strbeq	r3, [sl, #6]
   116d8:	beq	116e8 <__assert_fail@plt+0x2f8>
   116dc:	cmp	r2, #45	; 0x2d
   116e0:	addeq	r3, r3, #1
   116e4:	streq	r3, [r9]
   116e8:	cmp	r0, #110	; 0x6e
   116ec:	mov	r2, #5
   116f0:	ldreq	r1, [pc, #432]	; 118a8 <__assert_fail@plt+0x4b8>
   116f4:	ldrne	r1, [pc, #432]	; 118ac <__assert_fail@plt+0x4bc>
   116f8:	mov	r0, #0
   116fc:	ldr	r4, [r9]
   11700:	bl	11168 <dcgettext@plt>
   11704:	ldr	r3, [pc, #420]	; 118b0 <__assert_fail@plt+0x4c0>
   11708:	mvn	r2, #0
   1170c:	str	r3, [sp, #8]
   11710:	mvn	r3, #0
   11714:	mov	r1, #0
   11718:	strd	r2, [sp]
   1171c:	str	r1, [sp, #16]
   11720:	mov	r2, #0
   11724:	mov	r3, #0
   11728:	str	r0, [sp, #12]
   1172c:	mov	r0, r4
   11730:	bl	1a154 <__assert_fail@plt+0x8d64>
   11734:	strd	r0, [sp, #120]	; 0x78
   11738:	b	114f4 <__assert_fail@plt+0x104>
   1173c:	ldr	r3, [pc, #368]	; 118b4 <__assert_fail@plt+0x4c4>
   11740:	cmp	r0, r3
   11744:	beq	11828 <__assert_fail@plt+0x438>
   11748:	blt	117e0 <__assert_fail@plt+0x3f0>
   1174c:	cmp	r0, #260	; 0x104
   11750:	beq	115a0 <__assert_fail@plt+0x1b0>
   11754:	add	r3, r3, #2
   11758:	cmp	r0, r3
   1175c:	bne	13238 <__assert_fail@plt+0x1e48>
   11760:	mov	r3, #1
   11764:	strb	r3, [sl, #3]
   11768:	b	114f4 <__assert_fail@plt+0x104>
   1176c:	cmn	r0, #2
   11770:	bne	13238 <__assert_fail@plt+0x1e48>
   11774:	mov	r0, r4
   11778:	bl	15874 <__assert_fail@plt+0x4484>
   1177c:	mov	r3, #1
   11780:	str	r3, [sp, #24]
   11784:	b	114f4 <__assert_fail@plt+0x104>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #292]	; 118b8 <__assert_fail@plt+0x4c8>
   11790:	mov	r0, r4
   11794:	ldr	fp, [r9]
   11798:	bl	11168 <dcgettext@plt>
   1179c:	mvn	r2, #0
   117a0:	mvn	r3, #0
   117a4:	ldr	r1, [pc, #332]	; 118f8 <__assert_fail@plt+0x508>
   117a8:	strd	r2, [sp]
   117ac:	str	r4, [sp, #16]
   117b0:	mov	r3, #0
   117b4:	str	r1, [sp, #8]
   117b8:	mov	r2, #0
   117bc:	str	r0, [sp, #12]
   117c0:	mov	r0, fp
   117c4:	bl	1a154 <__assert_fail@plt+0x8d64>
   117c8:	ldr	r3, [pc, #312]	; 11908 <__assert_fail@plt+0x518>
   117cc:	strd	r0, [r3, #16]
   117d0:	b	114f4 <__assert_fail@plt+0x104>
   117d4:	mov	r3, #2
   117d8:	str	r3, [sp, #24]
   117dc:	b	114f4 <__assert_fail@plt+0x104>
   117e0:	mov	r2, #5
   117e4:	ldr	r1, [pc, #208]	; 118bc <__assert_fail@plt+0x4cc>
   117e8:	mov	r0, r4
   117ec:	ldr	fp, [r9]
   117f0:	bl	11168 <dcgettext@plt>
   117f4:	mvn	r2, #-2147483648	; 0x80000000
   117f8:	mov	r3, #0
   117fc:	ldr	r1, [pc, #244]	; 118f8 <__assert_fail@plt+0x508>
   11800:	strd	r2, [sp]
   11804:	str	r4, [sp, #16]
   11808:	str	r1, [sp, #8]
   1180c:	mov	r2, #0
   11810:	mov	r3, #0
   11814:	str	r0, [sp, #12]
   11818:	mov	r0, fp
   1181c:	bl	1a154 <__assert_fail@plt+0x8d64>
   11820:	str	r0, [sl, #8]
   11824:	b	114f4 <__assert_fail@plt+0x104>
   11828:	mov	r3, #1
   1182c:	strb	r3, [sl, #12]
   11830:	b	114f4 <__assert_fail@plt+0x104>
   11834:	ldr	r3, [pc, #204]	; 11908 <__assert_fail@plt+0x518>
   11838:	mov	r2, #2
   1183c:	str	r2, [r3, #4]
   11840:	b	114f4 <__assert_fail@plt+0x104>
   11844:	nop			; (mov r0, r0)
   11848:	andeq	r0, r0, r0
   1184c:	svccc	0x00f00000	; IMB
   11850:			; <UNDEFINED> instruction: 0x0001c5b8
   11854:	andeq	ip, r1, r8, lsl #10
   11858:	andeq	lr, r2, r0, asr #3
   1185c:	andeq	r6, r1, r4, asr #32
   11860:	andeq	ip, r1, ip, asr #11
   11864:	andeq	fp, r1, r0, lsl r7
   11868:	andeq	ip, r1, r4, lsl #14
   1186c:			; <UNDEFINED> instruction: 0x0002e1b8
   11870:	andeq	r0, r0, r1, lsl #2
   11874:	andeq	lr, r2, r4, asr r1
   11878:			; <UNDEFINED> instruction: 0x0001b6bc
   1187c:	andeq	ip, r1, ip, lsr #12
   11880:	andeq	lr, r2, r0, asr r1
   11884:			; <UNDEFINED> instruction: 0x0002e1b4
   11888:	muleq	r1, ip, r6
   1188c:	andeq	ip, r1, ip, lsr #13
   11890:	andeq	ip, r1, r0, asr #13
   11894:	ldrdeq	ip, [r1], -r0
   11898:	muleq	r1, ip, sl
   1189c:	andeq	ip, r1, r4, lsl #10
   118a0:	andeq	r5, r1, r8, lsr #31
   118a4:	andeq	ip, r1, ip, ror r6
   118a8:	andeq	ip, r1, ip, ror #11
   118ac:	andeq	ip, r1, r4, lsl #12
   118b0:	andeq	ip, r1, ip, lsl r6
   118b4:	andeq	r0, r0, r3, lsl #2
   118b8:	andeq	ip, r1, r8, lsr r6
   118bc:	andeq	ip, r1, r0, ror r6
   118c0:	andeq	r0, r3, pc, lsr #27
   118c4:	ldrdeq	ip, [r1], -r0
   118c8:	andeq	lr, r2, r8, lsr #3
   118cc:	andeq	lr, r2, r0, asr #2
   118d0:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   118d4:	andeq	ip, r1, ip, asr r7
   118d8:	muleq	r1, r4, r7
   118dc:	andeq	ip, r1, r4, lsr #16
   118e0:	andeq	sp, r2, r8, lsl #30
   118e4:	andeq	ip, r1, r4, ror #16
   118e8:	andeq	r2, r0, ip
   118ec:	andeq	ip, r1, r8, lsl #6
   118f0:	andeq	fp, r1, ip, ror r8
   118f4:	muleq	r1, r4, r8
   118f8:	andeq	ip, r1, r4, lsl ip
   118fc:	andeq	ip, r1, r0, lsl #17
   11900:	andeq	fp, r1, r8, ror #16
   11904:	andeq	fp, r1, ip, lsl r8
   11908:	andeq	lr, r2, r8, lsr r1
   1190c:	ldr	r3, [pc, #-84]	; 118c0 <__assert_fail@plt+0x4d0>
   11910:	cmp	r0, r3
   11914:	ldrb	r3, [r2, #1]
   11918:	ble	11934 <__assert_fail@plt+0x544>
   1191c:	sub	r2, r3, #99	; 0x63
   11920:	clz	r2, r2
   11924:	lsr	r2, r2, #5
   11928:	ldrb	r2, [ip, r2]
   1192c:	cmp	r2, #0
   11930:	beq	114d0 <__assert_fail@plt+0xe0>
   11934:	mov	r9, #0
   11938:	sub	r2, r3, #48	; 0x30
   1193c:	cmp	r2, #9
   11940:	mov	r1, ip
   11944:	bhi	11958 <__assert_fail@plt+0x568>
   11948:	ldrb	r3, [r1, #1]!
   1194c:	sub	r2, r3, #48	; 0x30
   11950:	cmp	r2, #9
   11954:	bls	11948 <__assert_fail@plt+0x558>
   11958:	cmp	r3, #99	; 0x63
   1195c:	beq	126e0 <__assert_fail@plt+0x12f0>
   11960:	cmp	r3, #108	; 0x6c
   11964:	beq	11a28 <__assert_fail@plt+0x638>
   11968:	cmp	r3, #98	; 0x62
   1196c:	moveq	r7, #0
   11970:	moveq	r2, #5120	; 0x1400
   11974:	beq	11a30 <__assert_fail@plt+0x640>
   11978:	mov	r3, r1
   1197c:	mov	r7, #1
   11980:	mov	r2, #10
   11984:	ldrb	r0, [r3]
   11988:	cmp	r0, #102	; 0x66
   1198c:	addeq	r3, r3, #1
   11990:	moveq	r8, #1
   11994:	ldrb	r4, [r3]
   11998:	movne	r8, #0
   1199c:	cmp	r4, #0
   119a0:	bne	114d0 <__assert_fail@plt+0xe0>
   119a4:	cmp	ip, r1
   119a8:	asreq	r3, r2, #31
   119ac:	strdeq	r2, [sp, #120]	; 0x78
   119b0:	beq	119d8 <__assert_fail@plt+0x5e8>
   119b4:	ldr	r3, [pc, #-248]	; 118c4 <__assert_fail@plt+0x4d4>
   119b8:	mov	r0, ip
   119bc:	str	r3, [sp]
   119c0:	mov	r2, #10
   119c4:	add	r3, sp, #120	; 0x78
   119c8:	mov	r1, r4
   119cc:	bl	1a2a0 <__assert_fail@plt+0x8eb0>
   119d0:	bics	r3, r0, #2
   119d4:	bne	13df0 <__assert_fail@plt+0x2a00>
   119d8:	mov	r3, #1
   119dc:	strb	r9, [sl, #6]
   119e0:	strb	r7, [sl, #5]
   119e4:	strb	r8, [sl, #7]
   119e8:	b	114d4 <__assert_fail@plt+0xe4>
   119ec:	sub	r0, r0, #199680	; 0x30c00
   119f0:	sub	r0, r0, #432	; 0x1b0
   119f4:	cmp	r0, #696	; 0x2b8
   119f8:	movhi	r9, #1
   119fc:	ldrbhi	r3, [r2, #1]
   11a00:	bhi	11938 <__assert_fail@plt+0x548>
   11a04:	b	114d0 <__assert_fail@plt+0xe0>
   11a08:	ldr	r3, [r6, #8]
   11a0c:	ldrb	r2, [r3]
   11a10:	cmp	r2, #45	; 0x2d
   11a14:	bne	114b0 <__assert_fail@plt+0xc0>
   11a18:	ldrb	r3, [r3, #1]
   11a1c:	cmp	r3, #0
   11a20:	bne	1149c <__assert_fail@plt+0xac>
   11a24:	b	114b0 <__assert_fail@plt+0xc0>
   11a28:	mov	r7, #1
   11a2c:	mov	r2, #10
   11a30:	add	r3, r1, #1
   11a34:	b	11984 <__assert_fail@plt+0x594>
   11a38:	ldrb	r3, [sl, #2]
   11a3c:	cmp	r3, r4
   11a40:	beq	11e00 <__assert_fail@plt+0xa10>
   11a44:	ldrb	r7, [sl, #7]
   11a48:	cmp	r7, r4
   11a4c:	beq	130e0 <__assert_fail@plt+0x1cf0>
   11a50:	ldr	r3, [pc, #-336]	; 11908 <__assert_fail@plt+0x518>
   11a54:	ldr	r3, [r3, #4]
   11a58:	cmp	r3, #2
   11a5c:	beq	11de0 <__assert_fail@plt+0x9f0>
   11a60:	ldr	r0, [sl, #8]
   11a64:	cmp	r0, #0
   11a68:	beq	11a7c <__assert_fail@plt+0x68c>
   11a6c:	mov	r1, #0
   11a70:	bl	11264 <kill@plt>
   11a74:	cmp	r0, #0
   11a78:	bne	12a64 <__assert_fail@plt+0x1674>
   11a7c:	ldrb	r3, [sl, #6]
   11a80:	cmp	r3, #0
   11a84:	beq	11aa0 <__assert_fail@plt+0x6b0>
   11a88:	ldrd	r0, [sp, #120]	; 0x78
   11a8c:	orrs	r3, r0, r1
   11a90:	beq	11aa0 <__assert_fail@plt+0x6b0>
   11a94:	subs	r2, r0, #1
   11a98:	sbc	r3, r1, #0
   11a9c:	strd	r2, [sp, #120]	; 0x78
   11aa0:	ldr	r3, [pc, #-480]	; 118c8 <__assert_fail@plt+0x4d8>
   11aa4:	ldr	r8, [pc, #-424]	; 11904 <__assert_fail@plt+0x514>
   11aa8:	ldr	r3, [r3]
   11aac:	cmp	r3, r5
   11ab0:	sublt	r2, r5, r3
   11ab4:	movge	r3, #1
   11ab8:	addlt	r6, r6, r3, lsl #2
   11abc:	strlt	r2, [sp, #28]
   11ac0:	strge	r3, [sp, #28]
   11ac4:	ldr	r3, [sp, #28]
   11ac8:	ldrge	r6, [pc, #-516]	; 118cc <__assert_fail@plt+0x4dc>
   11acc:	sub	r7, r6, #4
   11ad0:	add	r6, r6, r3, lsl #2
   11ad4:	sub	r5, r6, #4
   11ad8:	mov	r4, r7
   11adc:	mov	r6, #0
   11ae0:	ldr	r0, [r4, #4]!
   11ae4:	mov	r1, r8
   11ae8:	bl	110cc <strcmp@plt>
   11aec:	cmp	r0, #0
   11af0:	moveq	r6, #1
   11af4:	cmp	r5, r4
   11af8:	bne	11ae0 <__assert_fail@plt+0x6f0>
   11afc:	cmp	r6, #0
   11b00:	beq	11b60 <__assert_fail@plt+0x770>
   11b04:	ldr	r3, [pc, #-516]	; 11908 <__assert_fail@plt+0x518>
   11b08:	ldr	r4, [r3, #4]
   11b0c:	cmp	r4, #1
   11b10:	beq	13da8 <__assert_fail@plt+0x29b8>
   11b14:	ldrb	r3, [sl, #7]
   11b18:	cmp	r3, #0
   11b1c:	beq	12a48 <__assert_fail@plt+0x1658>
   11b20:	ldr	r1, [sl, #8]
   11b24:	cmp	r1, #0
   11b28:	bne	11e3c <__assert_fail@plt+0xa4c>
   11b2c:	ldr	r3, [sp, #28]
   11b30:	cmp	r3, #1
   11b34:	cmpeq	r4, #2
   11b38:	bne	11e3c <__assert_fail@plt+0xa4c>
   11b3c:	add	r2, sp, #232	; 0xe8
   11b40:	mov	r0, #3
   11b44:	bl	111bc <__fxstat64@plt>
   11b48:	cmp	r0, #0
   11b4c:	bne	11e3c <__assert_fail@plt+0xa4c>
   11b50:	ldr	r3, [sp, #248]	; 0xf8
   11b54:	and	r3, r3, #61440	; 0xf000
   11b58:	cmp	r3, #32768	; 0x8000
   11b5c:	beq	11e3c <__assert_fail@plt+0xa4c>
   11b60:	ldrd	r2, [sp, #120]	; 0x78
   11b64:	orrs	r3, r2, r3
   11b68:	bne	11b78 <__assert_fail@plt+0x788>
   11b6c:	ldrb	r3, [sl, #7]
   11b70:	cmp	r3, #0
   11b74:	beq	12a54 <__assert_fail@plt+0x1664>
   11b78:	ldr	r2, [sp, #28]
   11b7c:	mov	r3, #80	; 0x50
   11b80:	umull	r0, r1, r2, r3
   11b84:	adds	r2, r1, #0
   11b88:	movne	r2, #1
   11b8c:	cmp	r0, #0
   11b90:	blt	13dec <__assert_fail@plt+0x29fc>
   11b94:	cmp	r2, #0
   11b98:	bne	13dec <__assert_fail@plt+0x29fc>
   11b9c:	ldr	r2, [sp, #28]
   11ba0:	mul	r3, r3, r2
   11ba4:	mov	r0, r3
   11ba8:	str	r3, [sp, #92]	; 0x5c
   11bac:	bl	19d7c <__assert_fail@plt+0x898c>
   11bb0:	mov	r3, r0
   11bb4:	str	r0, [sp, #68]	; 0x44
   11bb8:	ldr	r2, [r7, #4]!
   11bbc:	cmp	r5, r7
   11bc0:	str	r2, [r3], #80	; 0x50
   11bc4:	bne	11bb8 <__assert_fail@plt+0x7c8>
   11bc8:	ldr	r2, [sp, #24]
   11bcc:	cmp	r2, #1
   11bd0:	beq	12558 <__assert_fail@plt+0x1168>
   11bd4:	ldr	r3, [sp, #28]
   11bd8:	subs	r3, r3, #1
   11bdc:	movne	r3, #1
   11be0:	cmp	r2, #0
   11be4:	movne	r3, #0
   11be8:	cmp	r3, #0
   11bec:	bne	12558 <__assert_fail@plt+0x1168>
   11bf0:	mvn	r3, #0
   11bf4:	str	r3, [sp, #96]	; 0x60
   11bf8:	str	r3, [sp, #100]	; 0x64
   11bfc:	ldr	fp, [sp, #68]	; 0x44
   11c00:	ldr	r3, [sp, #92]	; 0x5c
   11c04:	add	r3, fp, r3
   11c08:	str	r3, [sp, #60]	; 0x3c
   11c0c:	mov	r3, #1
   11c10:	str	r3, [sp, #48]	; 0x30
   11c14:	ldr	r5, [fp]
   11c18:	ldr	r1, [pc, #-796]	; 11904 <__assert_fail@plt+0x514>
   11c1c:	mov	r0, r5
   11c20:	bl	110cc <strcmp@plt>
   11c24:	ldrd	r2, [sp, #120]	; 0x78
   11c28:	strd	r2, [sp, #32]
   11c2c:	subs	r2, r0, #0
   11c30:	str	r2, [sp, #56]	; 0x38
   11c34:	bne	12028 <__assert_fail@plt+0xc38>
   11c38:	mov	r3, #1
   11c3c:	strb	r3, [sl, #4]
   11c40:	str	r2, [sp, #24]
   11c44:	mov	r3, #1
   11c48:	strb	r3, [fp, #46]	; 0x2e
   11c4c:	ldrb	r3, [sl, #1]
   11c50:	cmp	r3, #0
   11c54:	bne	121bc <__assert_fail@plt+0xdcc>
   11c58:	mov	r0, r5
   11c5c:	bl	13f60 <__assert_fail@plt+0x2b70>
   11c60:	ldrb	r3, [sl, #5]
   11c64:	mov	r2, #0
   11c68:	ldr	r1, [sp, #24]
   11c6c:	str	r3, [sp, #40]	; 0x28
   11c70:	cmp	r3, #0
   11c74:	mov	r3, #0
   11c78:	strd	r2, [sp, #128]	; 0x80
   11c7c:	add	r3, sp, #232	; 0xe8
   11c80:	str	r3, [sp, #76]	; 0x4c
   11c84:	mov	r2, r3
   11c88:	str	r0, [sp, #64]	; 0x40
   11c8c:	mov	r0, #3
   11c90:	beq	11ea4 <__assert_fail@plt+0xab4>
   11c94:	bl	111bc <__fxstat64@plt>
   11c98:	cmp	r0, #0
   11c9c:	bne	124cc <__assert_fail@plt+0x10dc>
   11ca0:	ldrb	r3, [sl, #6]
   11ca4:	cmp	r3, #0
   11ca8:	str	r3, [sp, #72]	; 0x48
   11cac:	bne	1246c <__assert_fail@plt+0x107c>
   11cb0:	ldrb	r3, [sl, #12]
   11cb4:	cmp	r3, #0
   11cb8:	bne	11ccc <__assert_fail@plt+0x8dc>
   11cbc:	ldr	r3, [sp, #248]	; 0xf8
   11cc0:	and	r3, r3, #61440	; 0xf000
   11cc4:	cmp	r3, #32768	; 0x8000
   11cc8:	beq	126ec <__assert_fail@plt+0x12fc>
   11ccc:	ldr	r0, [pc, #-1004]	; 118e8 <__assert_fail@plt+0x4f8>
   11cd0:	bl	19d7c <__assert_fail@plt+0x898c>
   11cd4:	mov	r5, #0
   11cd8:	mov	r9, r5
   11cdc:	add	r3, r0, #8192	; 0x2000
   11ce0:	mov	r4, r0
   11ce4:	str	r0, [sp, #44]	; 0x2c
   11ce8:	str	r5, [r3, #4]
   11cec:	str	r5, [r3]
   11cf0:	str	r5, [r3, #8]
   11cf4:	ldr	r0, [pc, #-1044]	; 118e8 <__assert_fail@plt+0x4f8>
   11cf8:	bl	19d7c <__assert_fail@plt+0x898c>
   11cfc:	str	r4, [sp, #52]	; 0x34
   11d00:	str	fp, [sp, #88]	; 0x58
   11d04:	mov	r7, r0
   11d08:	mov	r2, #8192	; 0x2000
   11d0c:	mov	r1, r7
   11d10:	ldr	r0, [sp, #24]
   11d14:	bl	19778 <__assert_fail@plt+0x8388>
   11d18:	sub	r3, r0, #1
   11d1c:	cmn	r3, #3
   11d20:	mov	r6, r0
   11d24:	bhi	12218 <__assert_fail@plt+0xe28>
   11d28:	ldrd	r2, [sp, #128]	; 0x80
   11d2c:	add	r8, r7, r0
   11d30:	add	r4, r7, #8192	; 0x2000
   11d34:	adds	r0, r2, r0
   11d38:	adc	r1, r3, #0
   11d3c:	mov	r3, #0
   11d40:	str	r6, [r4]
   11d44:	ldrb	r5, [sl]
   11d48:	strd	r0, [sp, #128]	; 0x80
   11d4c:	mov	fp, r3
   11d50:	mov	r0, r7
   11d54:	str	r3, [r4, #4]
   11d58:	str	r3, [r4, #8]
   11d5c:	b	11d6c <__assert_fail@plt+0x97c>
   11d60:	add	r0, r0, #1
   11d64:	mov	fp, r3
   11d68:	str	r3, [r4, #4]
   11d6c:	sub	r2, r8, r0
   11d70:	mov	r1, r5
   11d74:	bl	1130c <memchr@plt>
   11d78:	add	r3, fp, #1
   11d7c:	cmp	r0, #0
   11d80:	bne	11d60 <__assert_fail@plt+0x970>
   11d84:	ldr	r3, [sp, #44]	; 0x2c
   11d88:	ldr	r2, [pc, #-1216]	; 118d0 <__assert_fail@plt+0x4e0>
   11d8c:	add	r5, r3, #8192	; 0x2000
   11d90:	add	r8, fp, r9
   11d94:	ldr	r0, [r5]
   11d98:	add	r3, r6, r0
   11d9c:	cmp	r3, r2
   11da0:	bls	11e70 <__assert_fail@plt+0xa80>
   11da4:	ldr	r2, [sp, #52]	; 0x34
   11da8:	str	r7, [r5, #8]
   11dac:	add	r3, r2, #8192	; 0x2000
   11db0:	ldrd	r4, [sp, #32]
   11db4:	ldr	r9, [r3, #4]
   11db8:	mov	r1, #0
   11dbc:	sub	r9, r8, r9
   11dc0:	cmp	r5, r1
   11dc4:	cmpeq	r4, r9
   11dc8:	bcs	120d4 <__assert_fail@plt+0xce4>
   11dcc:	ldr	r3, [r3, #8]
   11dd0:	str	r7, [sp, #44]	; 0x2c
   11dd4:	str	r3, [sp, #52]	; 0x34
   11dd8:	mov	r7, r2
   11ddc:	b	11d08 <__assert_fail@plt+0x918>
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #-1304]	; 118d4 <__assert_fail@plt+0x4e4>
   11de8:	mov	r0, r4
   11dec:	bl	11168 <dcgettext@plt>
   11df0:	mov	r1, r4
   11df4:	mov	r2, r0
   11df8:	mov	r0, r4
   11dfc:	bl	11204 <error@plt>
   11e00:	ldr	r0, [sl, #8]
   11e04:	cmp	r0, #0
   11e08:	beq	11a7c <__assert_fail@plt+0x68c>
   11e0c:	ldrb	r4, [sl, #7]
   11e10:	cmp	r4, #0
   11e14:	bne	11a6c <__assert_fail@plt+0x67c>
   11e18:	mov	r2, #5
   11e1c:	ldr	r1, [pc, #-1356]	; 118d8 <__assert_fail@plt+0x4e8>
   11e20:	mov	r0, r4
   11e24:	bl	11168 <dcgettext@plt>
   11e28:	mov	r1, r4
   11e2c:	mov	r2, r0
   11e30:	mov	r0, r4
   11e34:	bl	11204 <error@plt>
   11e38:	b	11a7c <__assert_fail@plt+0x68c>
   11e3c:	mov	r0, #0
   11e40:	bl	113a8 <isatty@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	11b60 <__assert_fail@plt+0x770>
   11e4c:	mov	r2, #5
   11e50:	ldr	r1, [pc, #-1404]	; 118dc <__assert_fail@plt+0x4ec>
   11e54:	mov	r0, #0
   11e58:	bl	11168 <dcgettext@plt>
   11e5c:	mov	r1, #0
   11e60:	mov	r2, r0
   11e64:	mov	r0, r1
   11e68:	bl	11204 <error@plt>
   11e6c:	b	11b60 <__assert_fail@plt+0x770>
   11e70:	ldr	r3, [sp, #44]	; 0x2c
   11e74:	mov	r2, r6
   11e78:	add	r0, r3, r0
   11e7c:	mov	r1, r7
   11e80:	bl	11120 <memcpy@plt>
   11e84:	ldrd	r0, [r4]
   11e88:	ldr	r2, [r5]
   11e8c:	ldr	r3, [r5, #4]
   11e90:	add	r2, r2, r0
   11e94:	add	r3, r3, r1
   11e98:	mov	r9, r8
   11e9c:	strd	r2, [r5]
   11ea0:	b	11d08 <__assert_fail@plt+0x918>
   11ea4:	bl	111bc <__fxstat64@plt>
   11ea8:	cmp	r0, #0
   11eac:	bne	12514 <__assert_fail@plt+0x1124>
   11eb0:	ldrb	r3, [sl, #6]
   11eb4:	mov	r2, r3
   11eb8:	cmp	r2, #0
   11ebc:	str	r3, [sp, #40]	; 0x28
   11ec0:	ldrb	r3, [sl, #12]
   11ec4:	beq	12394 <__assert_fail@plt+0xfa4>
   11ec8:	cmp	r3, #0
   11ecc:	bne	11ff0 <__assert_fail@plt+0xc00>
   11ed0:	ldrd	r2, [sp, #32]
   11ed4:	cmp	r2, #0
   11ed8:	sbcs	r3, r3, #0
   11edc:	blt	11ff0 <__assert_fail@plt+0xc00>
   11ee0:	ldr	r3, [sp, #248]	; 0xf8
   11ee4:	and	r3, r3, #61440	; 0xf000
   11ee8:	cmp	r3, #32768	; 0x8000
   11eec:	beq	13174 <__assert_fail@plt+0x1d84>
   11ef0:	mov	r3, #1
   11ef4:	str	r3, [sp]
   11ef8:	ldr	r0, [sp, #24]
   11efc:	ldrd	r2, [sp, #32]
   11f00:	bl	111d4 <lseek64@plt>
   11f04:	mvn	r3, #0
   11f08:	mvn	r2, #0
   11f0c:	cmp	r1, r3
   11f10:	cmpeq	r0, r2
   11f14:	beq	11ff0 <__assert_fail@plt+0xc00>
   11f18:	ldrd	r0, [sp, #32]
   11f1c:	ldr	r3, [sp, #128]	; 0x80
   11f20:	ldr	r2, [sp, #132]	; 0x84
   11f24:	adds	r3, r3, r0
   11f28:	adc	r2, r2, r1
   11f2c:	str	r3, [sp, #128]	; 0x80
   11f30:	str	r2, [sp, #132]	; 0x84
   11f34:	mvn	r3, #0
   11f38:	mvn	r2, #0
   11f3c:	strd	r2, [sp, #32]
   11f40:	ldrd	r2, [sp, #32]
   11f44:	ldr	r1, [sp, #64]	; 0x40
   11f48:	mov	r0, #0
   11f4c:	strd	r2, [sp]
   11f50:	ldr	r2, [sp, #24]
   11f54:	bl	141e0 <__assert_fail@plt+0x2df0>
   11f58:	ldr	r3, [sp, #128]	; 0x80
   11f5c:	ldr	r2, [sp, #132]	; 0x84
   11f60:	mov	ip, #1
   11f64:	str	ip, [sp, #40]	; 0x28
   11f68:	adds	r0, r3, r0
   11f6c:	adc	r1, r2, r1
   11f70:	strd	r0, [sp, #128]	; 0x80
   11f74:	ldrb	r4, [sl, #7]
   11f78:	cmp	r4, #0
   11f7c:	bne	120ec <__assert_fail@plt+0xcfc>
   11f80:	ldr	r3, [sp, #56]	; 0x38
   11f84:	cmp	r3, #0
   11f88:	bne	12338 <__assert_fail@plt+0xf48>
   11f8c:	ldr	r3, [sp, #60]	; 0x3c
   11f90:	add	fp, fp, #80	; 0x50
   11f94:	ldr	r2, [sp, #48]	; 0x30
   11f98:	cmp	fp, r3
   11f9c:	ldr	r3, [sp, #40]	; 0x28
   11fa0:	and	r3, r3, r2
   11fa4:	str	r3, [sp, #48]	; 0x30
   11fa8:	bne	11c14 <__assert_fail@plt+0x824>
   11fac:	ldrb	r3, [sl, #7]
   11fb0:	cmp	r3, #0
   11fb4:	str	r3, [sp, #52]	; 0x34
   11fb8:	bne	12784 <__assert_fail@plt+0x1394>
   11fbc:	ldrb	r3, [sl, #4]
   11fc0:	cmp	r3, #0
   11fc4:	bne	12a24 <__assert_fail@plt+0x1634>
   11fc8:	ldr	r3, [sp, #48]	; 0x30
   11fcc:	eor	r0, r3, #1
   11fd0:	ldr	r3, [pc, #-1784]	; 118e0 <__assert_fail@plt+0x4f0>
   11fd4:	ldr	r2, [sp, #468]	; 0x1d4
   11fd8:	ldr	r3, [r3]
   11fdc:	cmp	r2, r3
   11fe0:	bne	13e2c <__assert_fail@plt+0x2a3c>
   11fe4:	add	sp, sp, #476	; 0x1dc
   11fe8:	vpop	{d8-d9}
   11fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff0:	add	r1, sp, #128	; 0x80
   11ff4:	ldrd	r2, [sp, #32]
   11ff8:	str	r1, [sp]
   11ffc:	ldr	r0, [sp, #64]	; 0x40
   12000:	ldr	r1, [sp, #24]
   12004:	bl	143a0 <__assert_fail@plt+0x2fb0>
   12008:	cmp	r0, #0
   1200c:	lsrne	r3, r0, #31
   12010:	strne	r3, [sp, #40]	; 0x28
   12014:	bne	11f74 <__assert_fail@plt+0xb84>
   12018:	mvn	r2, #0
   1201c:	mvn	r3, #0
   12020:	strd	r2, [sp, #32]
   12024:	b	11f40 <__assert_fail@plt+0xb50>
   12028:	mov	r0, r5
   1202c:	mov	r1, #0
   12030:	bl	1627c <__assert_fail@plt+0x4e8c>
   12034:	ldrb	r5, [sl, #2]
   12038:	cmp	r5, #0
   1203c:	str	r0, [sp, #24]
   12040:	beq	121fc <__assert_fail@plt+0xe0c>
   12044:	cmn	r0, #1
   12048:	moveq	r3, #0
   1204c:	strbeq	r3, [fp, #46]	; 0x2e
   12050:	bne	126d8 <__assert_fail@plt+0x12e8>
   12054:	bl	112c4 <__errno_location@plt>
   12058:	ldrb	r3, [sl, #7]
   1205c:	cmp	r3, #0
   12060:	ldr	r4, [r0]
   12064:	beq	1208c <__assert_fail@plt+0xc9c>
   12068:	mov	r0, #0
   1206c:	mov	r1, #0
   12070:	eor	r5, r5, #1
   12074:	mvn	r3, #0
   12078:	strb	r5, [fp, #44]	; 0x2c
   1207c:	str	r4, [fp, #52]	; 0x34
   12080:	strd	r0, [fp, #32]
   12084:	strd	r0, [fp, #24]
   12088:	str	r3, [fp, #48]	; 0x30
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #-1972]	; 118e4 <__assert_fail@plt+0x4f4>
   12094:	mov	r0, #0
   12098:	bl	11168 <dcgettext@plt>
   1209c:	mov	r5, r0
   120a0:	ldr	r0, [fp]
   120a4:	bl	13f60 <__assert_fail@plt+0x2b70>
   120a8:	mov	r1, r0
   120ac:	mov	r0, #4
   120b0:	bl	194b8 <__assert_fail@plt+0x80c8>
   120b4:	mov	r2, r5
   120b8:	mov	r1, r4
   120bc:	mov	r3, r0
   120c0:	mov	r0, #0
   120c4:	bl	11204 <error@plt>
   120c8:	mov	r3, #0
   120cc:	str	r3, [sp, #40]	; 0x28
   120d0:	b	11f8c <__assert_fail@plt+0xb9c>
   120d4:	ldr	r0, [pc, #-2036]	; 118e8 <__assert_fail@plt+0x4f8>
   120d8:	bl	19d7c <__assert_fail@plt+0x898c>
   120dc:	mov	r9, r8
   120e0:	str	r7, [sp, #44]	; 0x2c
   120e4:	mov	r7, r0
   120e8:	b	11d08 <__assert_fail@plt+0x918>
   120ec:	ldr	r3, [sp, #40]	; 0x28
   120f0:	ldr	r2, [sp, #76]	; 0x4c
   120f4:	sub	r3, r3, #1
   120f8:	ldr	r1, [sp, #24]
   120fc:	mov	r0, #3
   12100:	str	r3, [fp, #52]	; 0x34
   12104:	bl	111bc <__fxstat64@plt>
   12108:	cmp	r0, #0
   1210c:	blt	1268c <__assert_fail@plt+0x129c>
   12110:	ldr	lr, [sp, #248]	; 0xf8
   12114:	and	r3, lr, #61440	; 0xf000
   12118:	sub	r3, r3, #4096	; 0x1000
   1211c:	and	ip, lr, #45056	; 0xb000
   12120:	subs	ip, ip, #32768	; 0x8000
   12124:	bic	r3, r3, #4096	; 0x1000
   12128:	movne	ip, #1
   1212c:	cmp	r3, #0
   12130:	moveq	ip, #0
   12134:	cmp	ip, #0
   12138:	bne	12290 <__assert_fail@plt+0xea0>
   1213c:	ldr	r3, [sp, #40]	; 0x28
   12140:	cmp	r3, #0
   12144:	beq	12304 <__assert_fail@plt+0xf14>
   12148:	ldr	r1, [sp, #56]	; 0x38
   1214c:	ldrd	r2, [sp, #128]	; 0x80
   12150:	cmp	r1, #0
   12154:	strb	ip, [fp, #44]	; 0x2c
   12158:	mvneq	ip, #0
   1215c:	movne	ip, #1
   12160:	mov	r4, #0
   12164:	mov	r5, #0
   12168:	str	ip, [fp, #56]	; 0x38
   1216c:	add	ip, sp, #328	; 0x148
   12170:	ldrd	r0, [sp, #232]	; 0xe8
   12174:	strd	r2, [fp, #8]
   12178:	strd	r4, [fp, #72]	; 0x48
   1217c:	ldr	r3, [sp, #316]	; 0x13c
   12180:	ldrd	r4, [ip]
   12184:	ldr	r2, [sp, #312]	; 0x138
   12188:	ldr	r6, [sp, #24]
   1218c:	strd	r0, [fp, #24]
   12190:	str	lr, [fp, #40]	; 0x28
   12194:	strd	r2, [fp, #16]
   12198:	str	r6, [fp, #48]	; 0x30
   1219c:	ldr	r0, [fp]
   121a0:	strd	r4, [fp, #32]
   121a4:	bl	13f60 <__assert_fail@plt+0x2b70>
   121a8:	mov	r1, r0
   121ac:	mov	r0, r6
   121b0:	bl	14adc <__assert_fail@plt+0x36ec>
   121b4:	strb	r0, [fp, #45]	; 0x2d
   121b8:	b	11f8c <__assert_fail@plt+0xb9c>
   121bc:	mov	r0, r5
   121c0:	bl	13f60 <__assert_fail@plt+0x2b70>
   121c4:	ldr	r4, [pc, #-2244]	; 11908 <__assert_fail@plt+0x518>
   121c8:	ldr	r3, [pc, #-2276]	; 118ec <__assert_fail@plt+0x4fc>
   121cc:	ldr	r2, [pc, #-2268]	; 118f8 <__assert_fail@plt+0x508>
   121d0:	ldrb	ip, [r4]
   121d4:	ldr	r1, [pc, #-2284]	; 118f0 <__assert_fail@plt+0x500>
   121d8:	cmp	ip, #0
   121dc:	moveq	r2, r3
   121e0:	mov	r3, r0
   121e4:	mov	r0, #1
   121e8:	bl	112e8 <__printf_chk@plt>
   121ec:	mov	r3, #0
   121f0:	ldr	r5, [fp]
   121f4:	strb	r3, [r4]
   121f8:	b	11c58 <__assert_fail@plt+0x868>
   121fc:	ldr	r3, [sp, #24]
   12200:	cmn	r3, #1
   12204:	mov	r3, #1
   12208:	strb	r3, [fp, #46]	; 0x2e
   1220c:	beq	12054 <__assert_fail@plt+0xc64>
   12210:	ldr	r5, [fp]
   12214:	b	11c4c <__assert_fail@plt+0x85c>
   12218:	mov	r0, r7
   1221c:	ldr	fp, [sp, #88]	; 0x58
   12220:	bl	110fc <free@plt>
   12224:	cmn	r6, #1
   12228:	mov	r5, r9
   1222c:	beq	13134 <__assert_fail@plt+0x1d44>
   12230:	ldrd	r0, [sp, #32]
   12234:	ldr	ip, [sp, #44]	; 0x2c
   12238:	add	r3, ip, #8192	; 0x2000
   1223c:	mov	r2, r0
   12240:	orrs	r2, r2, r1
   12244:	ldr	r2, [r3]
   12248:	moveq	r1, #1
   1224c:	movne	r1, #0
   12250:	cmp	r2, #0
   12254:	moveq	r1, #1
   12258:	cmp	r1, #0
   1225c:	str	r1, [sp, #72]	; 0x48
   12260:	beq	12564 <__assert_fail@plt+0x1174>
   12264:	ldr	r0, [sp, #52]	; 0x34
   12268:	cmp	r0, #0
   1226c:	beq	12284 <__assert_fail@plt+0xe94>
   12270:	add	r4, r0, #8192	; 0x2000
   12274:	ldr	r4, [r4, #8]
   12278:	bl	110fc <free@plt>
   1227c:	subs	r0, r4, #0
   12280:	bne	12270 <__assert_fail@plt+0xe80>
   12284:	ldr	r3, [sp, #72]	; 0x48
   12288:	str	r3, [sp, #40]	; 0x28
   1228c:	b	11f74 <__assert_fail@plt+0xb84>
   12290:	ldrb	r3, [sl, #2]
   12294:	mov	r4, #0
   12298:	mvn	ip, #0
   1229c:	eor	r3, r3, #1
   122a0:	strb	r3, [fp, #44]	; 0x2c
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #-2492]	; 118f4 <__assert_fail@plt+0x504>
   122ac:	str	ip, [fp, #52]	; 0x34
   122b0:	mov	r0, r4
   122b4:	strb	r4, [fp, #46]	; 0x2e
   122b8:	bl	11168 <dcgettext@plt>
   122bc:	mov	r5, r0
   122c0:	ldr	r0, [fp]
   122c4:	bl	13f60 <__assert_fail@plt+0x2b70>
   122c8:	mov	r1, #3
   122cc:	mov	r2, r0
   122d0:	mov	r0, r4
   122d4:	bl	19594 <__assert_fail@plt+0x81a4>
   122d8:	ldrb	r3, [fp, #44]	; 0x2c
   122dc:	cmp	r3, r4
   122e0:	mov	r6, r0
   122e4:	ldreq	r0, [pc, #-2548]	; 118f8 <__assert_fail@plt+0x508>
   122e8:	bne	131f4 <__assert_fail@plt+0x1e04>
   122ec:	mov	r1, #0
   122f0:	str	r0, [sp]
   122f4:	mov	r3, r6
   122f8:	mov	r2, r5
   122fc:	mov	r0, r1
   12300:	bl	11204 <error@plt>
   12304:	ldrb	r3, [sl, #2]
   12308:	ldr	r0, [fp]
   1230c:	eor	r3, r3, #1
   12310:	strb	r3, [fp, #44]	; 0x2c
   12314:	bl	13f60 <__assert_fail@plt+0x2b70>
   12318:	mov	r1, r0
   1231c:	ldr	r0, [sp, #24]
   12320:	bl	13f98 <__assert_fail@plt+0x2ba8>
   12324:	mvn	r3, #0
   12328:	str	r3, [fp, #48]	; 0x30
   1232c:	mov	r3, #0
   12330:	str	r3, [sp, #40]	; 0x28
   12334:	b	11f8c <__assert_fail@plt+0xb9c>
   12338:	ldr	r0, [sp, #24]
   1233c:	bl	113d8 <close@plt>
   12340:	cmp	r0, #0
   12344:	beq	11f8c <__assert_fail@plt+0xb9c>
   12348:	bl	112c4 <__errno_location@plt>
   1234c:	mov	r2, #5
   12350:	ldr	r1, [pc, #-2648]	; 11900 <__assert_fail@plt+0x510>
   12354:	str	r4, [sp, #40]	; 0x28
   12358:	ldr	r5, [r0]
   1235c:	mov	r0, r4
   12360:	bl	11168 <dcgettext@plt>
   12364:	mov	r6, r0
   12368:	ldr	r0, [fp]
   1236c:	bl	13f60 <__assert_fail@plt+0x2b70>
   12370:	mov	r1, r0
   12374:	mov	r0, #4
   12378:	bl	194b8 <__assert_fail@plt+0x80c8>
   1237c:	mov	r2, r6
   12380:	mov	r1, r5
   12384:	mov	r3, r0
   12388:	mov	r0, r4
   1238c:	bl	11204 <error@plt>
   12390:	b	11f8c <__assert_fail@plt+0xb9c>
   12394:	cmp	r3, #0
   12398:	bne	123ec <__assert_fail@plt+0xffc>
   1239c:	ldrd	r2, [sp, #32]
   123a0:	cmp	r2, #0
   123a4:	sbcs	r3, r3, #0
   123a8:	blt	123ec <__assert_fail@plt+0xffc>
   123ac:	ldr	r3, [sp, #248]	; 0xf8
   123b0:	and	r3, r3, #53248	; 0xd000
   123b4:	cmp	r3, #32768	; 0x8000
   123b8:	bne	12aa0 <__assert_fail@plt+0x16b0>
   123bc:	add	r3, sp, #280	; 0x118
   123c0:	mvn	r4, #0
   123c4:	ldrd	r2, [r3]
   123c8:	mvn	r5, #0
   123cc:	strd	r2, [sp, #80]	; 0x50
   123d0:	ldr	r2, [sp, #288]	; 0x120
   123d4:	sub	r3, r2, #1
   123d8:	cmn	r3, #-536870911	; 0xe0000001
   123dc:	movhi	r2, #512	; 0x200
   123e0:	movhi	r3, #0
   123e4:	bhi	1240c <__assert_fail@plt+0x101c>
   123e8:	b	12408 <__assert_fail@plt+0x1018>
   123ec:	ldr	r2, [sp, #288]	; 0x120
   123f0:	sub	r3, r2, #1
   123f4:	cmn	r3, #-536870911	; 0xe0000001
   123f8:	mvnls	r4, #0
   123fc:	mvnls	r5, #0
   12400:	strdls	r4, [sp, #80]	; 0x50
   12404:	bhi	12ef8 <__assert_fail@plt+0x1b08>
   12408:	asr	r3, r2, #31
   1240c:	ldrd	r0, [sp, #80]	; 0x50
   12410:	cmp	r2, r0
   12414:	sbcs	r3, r3, r1
   12418:	bge	12ef8 <__assert_fail@plt+0x1b08>
   1241c:	mvn	r3, #0
   12420:	mvn	r2, #0
   12424:	cmp	r5, r3
   12428:	cmpeq	r4, r2
   1242c:	beq	13108 <__assert_fail@plt+0x1d18>
   12430:	ldrd	r2, [sp, #80]	; 0x50
   12434:	cmp	r4, r2
   12438:	sbcs	r1, r5, r3
   1243c:	bge	12464 <__assert_fail@plt+0x1074>
   12440:	subs	r1, r2, r4
   12444:	sbc	r3, r3, r5
   12448:	str	r3, [sp, #108]	; 0x6c
   1244c:	str	r1, [sp, #104]	; 0x68
   12450:	ldrd	r2, [sp, #32]
   12454:	ldrd	r0, [sp, #104]	; 0x68
   12458:	cmp	r3, r1
   1245c:	cmpeq	r2, r0
   12460:	bcc	131a0 <__assert_fail@plt+0x1db0>
   12464:	strd	r4, [sp, #128]	; 0x80
   12468:	b	11f40 <__assert_fail@plt+0xb50>
   1246c:	add	r1, sp, #128	; 0x80
   12470:	ldrd	r2, [sp, #32]
   12474:	str	r1, [sp]
   12478:	ldr	r0, [sp, #64]	; 0x40
   1247c:	ldr	r1, [sp, #24]
   12480:	bl	1408c <__assert_fail@plt+0x2c9c>
   12484:	subs	r3, r0, #0
   12488:	lsrne	r3, r3, #31
   1248c:	strne	r3, [sp, #72]	; 0x48
   12490:	bne	12284 <__assert_fail@plt+0xe94>
   12494:	ldr	r3, [sp, #96]	; 0x60
   12498:	ldr	r2, [sp, #24]
   1249c:	str	r3, [sp]
   124a0:	ldr	r3, [sp, #100]	; 0x64
   124a4:	ldr	r1, [sp, #64]	; 0x40
   124a8:	str	r3, [sp, #4]
   124ac:	bl	141e0 <__assert_fail@plt+0x2df0>
   124b0:	ldr	r3, [sp, #128]	; 0x80
   124b4:	ldr	r2, [sp, #132]	; 0x84
   124b8:	adds	r3, r3, r0
   124bc:	adc	r2, r2, r1
   124c0:	str	r3, [sp, #128]	; 0x80
   124c4:	str	r2, [sp, #132]	; 0x84
   124c8:	b	12284 <__assert_fail@plt+0xe94>
   124cc:	bl	112c4 <__errno_location@plt>
   124d0:	mov	r3, #0
   124d4:	mov	r2, #5
   124d8:	ldr	r1, [pc, #-3044]	; 118fc <__assert_fail@plt+0x50c>
   124dc:	str	r3, [sp, #72]	; 0x48
   124e0:	ldr	r4, [r0]
   124e4:	mov	r0, r3
   124e8:	bl	11168 <dcgettext@plt>
   124ec:	ldr	r1, [sp, #64]	; 0x40
   124f0:	mov	r5, r0
   124f4:	mov	r0, #4
   124f8:	bl	194b8 <__assert_fail@plt+0x80c8>
   124fc:	mov	r2, r5
   12500:	mov	r1, r4
   12504:	mov	r3, r0
   12508:	mov	r0, #0
   1250c:	bl	11204 <error@plt>
   12510:	b	12284 <__assert_fail@plt+0xe94>
   12514:	bl	112c4 <__errno_location@plt>
   12518:	ldr	r6, [sp, #40]	; 0x28
   1251c:	mov	r2, #5
   12520:	ldr	r1, [pc, #-3116]	; 118fc <__assert_fail@plt+0x50c>
   12524:	ldr	r4, [r0]
   12528:	mov	r0, r6
   1252c:	bl	11168 <dcgettext@plt>
   12530:	ldr	r1, [sp, #64]	; 0x40
   12534:	mov	r5, r0
   12538:	mov	r0, #4
   1253c:	bl	194b8 <__assert_fail@plt+0x80c8>
   12540:	mov	r2, r5
   12544:	mov	r1, r4
   12548:	mov	r3, r0
   1254c:	mov	r0, r6
   12550:	bl	11204 <error@plt>
   12554:	b	11f74 <__assert_fail@plt+0xb84>
   12558:	mov	r3, #1
   1255c:	strb	r3, [sl, #1]
   12560:	b	11bf0 <__assert_fail@plt+0x800>
   12564:	add	r2, ip, r2
   12568:	ldrb	r7, [sl]
   1256c:	ldrb	r2, [r2, #-1]
   12570:	cmp	r2, r7
   12574:	beq	1258c <__assert_fail@plt+0x119c>
   12578:	ldr	r2, [r3, #4]
   1257c:	add	r1, r9, #1
   12580:	mov	r5, r1
   12584:	add	r2, r2, #1
   12588:	str	r2, [r3, #4]
   1258c:	ldr	r3, [sp, #52]	; 0x34
   12590:	ldrd	r8, [sp, #32]
   12594:	add	r4, r3, #8192	; 0x2000
   12598:	mov	r1, #0
   1259c:	ldr	r3, [r4, #4]
   125a0:	cmp	r9, r1
   125a4:	sub	r3, r5, r3
   125a8:	cmpeq	r8, r3
   125ac:	bcs	13208 <__assert_fail@plt+0x1e18>
   125b0:	mov	r0, r8
   125b4:	mov	r1, r9
   125b8:	mov	ip, r3
   125bc:	mov	lr, r7
   125c0:	mov	r8, r4
   125c4:	b	125cc <__assert_fail@plt+0x11dc>
   125c8:	mov	ip, r3
   125cc:	ldr	r2, [r8, #8]
   125d0:	mov	r7, #0
   125d4:	add	r8, r2, #8192	; 0x2000
   125d8:	cmp	r1, r7
   125dc:	ldr	r3, [r8, #4]
   125e0:	sub	r3, ip, r3
   125e4:	cmpeq	r0, r3
   125e8:	bcc	125c8 <__assert_fail@plt+0x11d8>
   125ec:	mov	r5, ip
   125f0:	mov	r7, lr
   125f4:	str	r8, [sp, #44]	; 0x2c
   125f8:	ldrd	r8, [sp, #32]
   125fc:	ldr	ip, [sp, #44]	; 0x2c
   12600:	mov	r3, #0
   12604:	cmp	r9, r3
   12608:	ldr	r6, [ip]
   1260c:	mov	r0, r2
   12610:	cmpeq	r8, r5
   12614:	add	r6, r0, r6
   12618:	bcs	1264c <__assert_fail@plt+0x125c>
   1261c:	subs	r5, r5, r8
   12620:	beq	1264c <__assert_fail@plt+0x125c>
   12624:	mov	r8, ip
   12628:	sub	r2, r6, r0
   1262c:	mov	r1, r7
   12630:	bl	1130c <memchr@plt>
   12634:	cmp	r0, #0
   12638:	beq	13e30 <__assert_fail@plt+0x2a40>
   1263c:	subs	r5, r5, #1
   12640:	add	r0, r0, #1
   12644:	bne	12628 <__assert_fail@plt+0x1238>
   12648:	str	r8, [sp, #44]	; 0x2c
   1264c:	sub	r1, r6, r0
   12650:	bl	14014 <__assert_fail@plt+0x2c24>
   12654:	ldr	r3, [sp, #44]	; 0x2c
   12658:	ldr	r0, [r3, #8]
   1265c:	cmp	r0, #0
   12660:	beq	1267c <__assert_fail@plt+0x128c>
   12664:	add	r5, r0, #8192	; 0x2000
   12668:	ldr	r1, [r5]
   1266c:	bl	14014 <__assert_fail@plt+0x2c24>
   12670:	ldr	r0, [r5, #8]
   12674:	cmp	r0, #0
   12678:	bne	12664 <__assert_fail@plt+0x1274>
   1267c:	ldr	r3, [sp, #40]	; 0x28
   12680:	ldr	r0, [sp, #52]	; 0x34
   12684:	str	r3, [sp, #72]	; 0x48
   12688:	b	12274 <__assert_fail@plt+0xe84>
   1268c:	bl	112c4 <__errno_location@plt>
   12690:	mov	r2, #5
   12694:	ldr	r1, [pc, #-3484]	; 11900 <__assert_fail@plt+0x510>
   12698:	ldr	r4, [r0]
   1269c:	mov	r0, #0
   126a0:	str	r4, [fp, #52]	; 0x34
   126a4:	bl	11168 <dcgettext@plt>
   126a8:	mov	r5, r0
   126ac:	ldr	r0, [fp]
   126b0:	bl	13f60 <__assert_fail@plt+0x2b70>
   126b4:	mov	r1, r0
   126b8:	mov	r0, #4
   126bc:	bl	194b8 <__assert_fail@plt+0x80c8>
   126c0:	mov	r2, r5
   126c4:	mov	r1, r4
   126c8:	mov	r3, r0
   126cc:	mov	r0, #0
   126d0:	bl	11204 <error@plt>
   126d4:	b	12304 <__assert_fail@plt+0xf14>
   126d8:	ldr	r5, [fp]
   126dc:	b	11c44 <__assert_fail@plt+0x854>
   126e0:	mov	r7, #0
   126e4:	mov	r2, #10
   126e8:	b	11a30 <__assert_fail@plt+0x640>
   126ec:	ldr	r6, [sp, #24]
   126f0:	mov	r3, #1
   126f4:	str	r3, [sp]
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	mov	r0, r6
   12704:	bl	111d4 <lseek64@plt>
   12708:	mvn	r3, #0
   1270c:	mvn	r2, #0
   12710:	cmp	r1, r3
   12714:	cmpeq	r0, r2
   12718:	mov	r4, r0
   1271c:	mov	r5, r1
   12720:	beq	11ccc <__assert_fail@plt+0x8dc>
   12724:	mov	r3, #2
   12728:	str	r3, [sp]
   1272c:	mov	r2, #0
   12730:	mov	r3, #0
   12734:	mov	r0, r6
   12738:	bl	111d4 <lseek64@plt>
   1273c:	cmp	r4, r0
   12740:	sbcs	r3, r5, r1
   12744:	bge	131d0 <__assert_fail@plt+0x1de0>
   12748:	orrs	r3, r0, r1
   1274c:	strd	r0, [sp, #128]	; 0x80
   12750:	ldreq	r3, [sp, #40]	; 0x28
   12754:	streq	r3, [sp, #72]	; 0x48
   12758:	beq	12284 <__assert_fail@plt+0xe94>
   1275c:	add	ip, sp, #128	; 0x80
   12760:	strd	r0, [sp, #8]
   12764:	strd	r4, [sp]
   12768:	ldrd	r2, [sp, #32]
   1276c:	ldr	r0, [sp, #64]	; 0x40
   12770:	str	ip, [sp, #16]
   12774:	ldr	r1, [sp, #24]
   12778:	bl	1459c <__assert_fail@plt+0x31ac>
   1277c:	str	r0, [sp, #72]	; 0x48
   12780:	b	12284 <__assert_fail@plt+0xe94>
   12784:	ldr	r5, [pc, #-3720]	; 11904 <__assert_fail@plt+0x514>
   12788:	ldr	r8, [sp, #68]	; 0x44
   1278c:	ldr	r9, [sp, #60]	; 0x3c
   12790:	mov	r4, #0
   12794:	mvn	r7, #0
   12798:	mov	r6, #1
   1279c:	mov	r1, r5
   127a0:	ldr	r0, [r8]
   127a4:	bl	110cc <strcmp@plt>
   127a8:	cmp	r0, #0
   127ac:	bne	127d8 <__assert_fail@plt+0x13e8>
   127b0:	ldrb	r3, [r8, #44]	; 0x2c
   127b4:	cmp	r3, #0
   127b8:	bne	127d8 <__assert_fail@plt+0x13e8>
   127bc:	ldr	r3, [r8, #48]	; 0x30
   127c0:	cmp	r3, #0
   127c4:	blt	127d8 <__assert_fail@plt+0x13e8>
   127c8:	ldr	r3, [r8, #40]	; 0x28
   127cc:	and	r3, r3, #61440	; 0xf000
   127d0:	cmp	r3, #4096	; 0x1000
   127d4:	beq	12a18 <__assert_fail@plt+0x1628>
   127d8:	add	r4, r4, #1
   127dc:	add	r8, r8, #80	; 0x50
   127e0:	cmp	r8, r9
   127e4:	bne	1279c <__assert_fail@plt+0x13ac>
   127e8:	cmp	r4, #0
   127ec:	beq	11fbc <__assert_fail@plt+0xbcc>
   127f0:	add	r2, sp, #128	; 0x80
   127f4:	mov	r1, #1
   127f8:	mov	r0, #3
   127fc:	bl	111bc <__fxstat64@plt>
   12800:	cmp	r0, #0
   12804:	blt	13570 <__assert_fail@plt+0x2180>
   12808:	ldr	r3, [sp, #144]	; 0x90
   1280c:	ldrb	r2, [sl, #3]
   12810:	and	r3, r3, #61440	; 0xf000
   12814:	sub	r3, r3, #4096	; 0x1000
   12818:	cmp	r2, #0
   1281c:	clz	r3, r3
   12820:	lsr	r3, r3, #5
   12824:	strb	r3, [sl, #13]
   12828:	bne	128bc <__assert_fail@plt+0x14cc>
   1282c:	ldr	r4, [pc, #-3888]	; 11904 <__assert_fail@plt+0x514>
   12830:	ldr	r5, [sp, #68]	; 0x44
   12834:	ldr	r6, [sp, #60]	; 0x3c
   12838:	ldrb	r3, [r5, #44]	; 0x2c
   1283c:	cmp	r3, #0
   12840:	bne	12858 <__assert_fail@plt+0x1468>
   12844:	mov	r1, r4
   12848:	ldr	r0, [r5]
   1284c:	bl	110cc <strcmp@plt>
   12850:	cmp	r0, #0
   12854:	beq	128bc <__assert_fail@plt+0x14cc>
   12858:	add	r5, r5, #80	; 0x50
   1285c:	cmp	r5, r6
   12860:	bne	12838 <__assert_fail@plt+0x1448>
   12864:	ldr	r3, [sp, #68]	; 0x44
   12868:	ldr	r1, [sp, #60]	; 0x3c
   1286c:	ldr	r2, [r3, #48]	; 0x30
   12870:	cmp	r2, #0
   12874:	blt	12884 <__assert_fail@plt+0x1494>
   12878:	ldrb	r2, [r3, #45]	; 0x2d
   1287c:	cmp	r2, #0
   12880:	bne	128bc <__assert_fail@plt+0x14cc>
   12884:	add	r3, r3, #80	; 0x50
   12888:	cmp	r3, r1
   1288c:	bne	1286c <__assert_fail@plt+0x147c>
   12890:	ldr	r3, [sp, #68]	; 0x44
   12894:	ldr	r1, [sp, #60]	; 0x3c
   12898:	ldr	r2, [r3, #48]	; 0x30
   1289c:	cmp	r2, #0
   128a0:	blt	128b0 <__assert_fail@plt+0x14c0>
   128a4:	ldrb	r9, [r3, #45]	; 0x2d
   128a8:	cmp	r9, #0
   128ac:	beq	132e4 <__assert_fail@plt+0x1ef4>
   128b0:	add	r3, r3, #80	; 0x50
   128b4:	cmp	r3, r1
   128b8:	bne	12898 <__assert_fail@plt+0x14a8>
   128bc:	ldr	r3, [sl, #8]
   128c0:	mov	r2, r3
   128c4:	str	r3, [sp, #24]
   128c8:	cmp	r2, #0
   128cc:	mov	r3, #1
   128d0:	strb	r3, [sl, #3]
   128d4:	movne	r3, #0
   128d8:	strne	r3, [sp, #24]
   128dc:	bne	128f8 <__assert_fail@plt+0x1508>
   128e0:	ldr	r3, [pc, #-4064]	; 11908 <__assert_fail@plt+0x518>
   128e4:	ldr	r2, [sp, #28]
   128e8:	ldr	r3, [r3, #4]
   128ec:	cmp	r3, #2
   128f0:	cmpeq	r2, #1
   128f4:	beq	132bc <__assert_fail@plt+0x1ecc>
   128f8:	ldr	r3, [sp, #24]
   128fc:	and	r3, r3, #1
   12900:	str	r3, [sp, #32]
   12904:	ldr	r3, [sp, #28]
   12908:	sub	r3, r3, #1
   1290c:	str	r3, [sp, #40]	; 0x28
   12910:	mov	r3, #0
   12914:	str	r3, [sp, #44]	; 0x2c
   12918:	mov	r8, #0
   1291c:	mov	r7, r8
   12920:	ldr	r5, [sp, #68]	; 0x44
   12924:	b	129f0 <__assert_fail@plt+0x1600>
   12928:	ldr	r0, [r5]
   1292c:	bl	13f60 <__assert_fail@plt+0x2b70>
   12930:	ldr	fp, [r5, #56]	; 0x38
   12934:	ldr	r3, [sp, #24]
   12938:	ldr	r6, [r5, #40]	; 0x28
   1293c:	cmp	r3, fp
   12940:	mov	r9, r0
   12944:	beq	12994 <__assert_fail@plt+0x15a4>
   12948:	mov	r1, #3
   1294c:	mov	r0, r4
   12950:	bl	1aca8 <__assert_fail@plt+0x98b8>
   12954:	ldr	r3, [sp, #24]
   12958:	cmp	r3, #0
   1295c:	bne	12bb0 <__assert_fail@plt+0x17c0>
   12960:	cmp	r0, #0
   12964:	blt	12bb8 <__assert_fail@plt+0x17c8>
   12968:	orr	r2, r0, #2048	; 0x800
   1296c:	cmp	r0, r2
   12970:	beq	12988 <__assert_fail@plt+0x1598>
   12974:	mov	r1, #4
   12978:	mov	r0, r4
   1297c:	bl	1aca8 <__assert_fail@plt+0x98b8>
   12980:	cmn	r0, #1
   12984:	beq	12bb8 <__assert_fail@plt+0x17c8>
   12988:	ldr	r3, [sp, #24]
   1298c:	mov	fp, r3
   12990:	str	r3, [r5, #56]	; 0x38
   12994:	cmp	fp, #0
   12998:	beq	12aec <__assert_fail@plt+0x16fc>
   1299c:	mvn	r3, #1
   129a0:	mvn	r2, #0
   129a4:	str	r3, [sp]
   129a8:	str	r2, [sp, #4]
   129ac:	mov	r1, r9
   129b0:	mov	r2, r4
   129b4:	mov	r0, #0
   129b8:	bl	141e0 <__assert_fail@plt+0x2df0>
   129bc:	ldr	r3, [r5, #8]
   129c0:	orrs	r2, r0, r1
   129c4:	ldr	r2, [r5, #12]
   129c8:	orrne	r8, r8, #1
   129cc:	adds	r3, r3, r0
   129d0:	adc	r2, r2, r1
   129d4:	str	r3, [r5, #8]
   129d8:	str	r2, [r5, #12]
   129dc:	ldr	r3, [sp, #28]
   129e0:	add	r7, r7, #1
   129e4:	cmp	r3, r7
   129e8:	add	r5, r5, #80	; 0x50
   129ec:	beq	12d04 <__assert_fail@plt+0x1914>
   129f0:	ldrb	r3, [r5, #44]	; 0x2c
   129f4:	cmp	r3, #0
   129f8:	bne	129dc <__assert_fail@plt+0x15ec>
   129fc:	ldr	r4, [r5, #48]	; 0x30
   12a00:	cmp	r4, #0
   12a04:	bge	12928 <__assert_fail@plt+0x1538>
   12a08:	ldr	r1, [sp, #32]
   12a0c:	mov	r0, r5
   12a10:	bl	15214 <__assert_fail@plt+0x3e24>
   12a14:	b	129dc <__assert_fail@plt+0x15ec>
   12a18:	str	r7, [r8, #48]	; 0x30
   12a1c:	strb	r6, [r8, #44]	; 0x2c
   12a20:	b	127dc <__assert_fail@plt+0x13ec>
   12a24:	mov	r0, #0
   12a28:	bl	113d8 <close@plt>
   12a2c:	cmp	r0, #0
   12a30:	bge	11fc8 <__assert_fail@plt+0xbd8>
   12a34:	bl	112c4 <__errno_location@plt>
   12a38:	ldr	r2, [pc, #4056]	; 13a18 <__assert_fail@plt+0x2628>
   12a3c:	ldr	r1, [r0]
   12a40:	mov	r0, #1
   12a44:	bl	11204 <error@plt>
   12a48:	ldrd	r2, [sp, #120]	; 0x78
   12a4c:	orrs	r3, r2, r3
   12a50:	bne	11b78 <__assert_fail@plt+0x788>
   12a54:	ldrb	r0, [sl, #6]
   12a58:	cmp	r0, #0
   12a5c:	bne	11b78 <__assert_fail@plt+0x788>
   12a60:	b	11fd0 <__assert_fail@plt+0xbe0>
   12a64:	bl	112c4 <__errno_location@plt>
   12a68:	ldr	r3, [r0]
   12a6c:	cmp	r3, #38	; 0x26
   12a70:	bne	11a7c <__assert_fail@plt+0x68c>
   12a74:	mov	r2, #5
   12a78:	ldr	r1, [pc, #3996]	; 13a1c <__assert_fail@plt+0x262c>
   12a7c:	mov	r0, #0
   12a80:	bl	11168 <dcgettext@plt>
   12a84:	mov	r1, #0
   12a88:	mov	r2, r0
   12a8c:	mov	r0, r1
   12a90:	bl	11204 <error@plt>
   12a94:	mov	r3, #0
   12a98:	str	r3, [sl, #8]
   12a9c:	b	11a7c <__assert_fail@plt+0x68c>
   12aa0:	ldrd	r6, [sp, #32]
   12aa4:	mov	r3, #2
   12aa8:	str	r3, [sp]
   12aac:	rsbs	r2, r6, #0
   12ab0:	rsc	r3, r7, #0
   12ab4:	ldr	r0, [sp, #24]
   12ab8:	bl	111d4 <lseek64@plt>
   12abc:	mvn	r3, #0
   12ac0:	mvn	r2, #0
   12ac4:	cmp	r1, r3
   12ac8:	cmpeq	r0, r2
   12acc:	mov	r4, r0
   12ad0:	mov	r5, r1
   12ad4:	beq	123ec <__assert_fail@plt+0xffc>
   12ad8:	adds	r1, r4, r6
   12adc:	adc	r3, r5, r7
   12ae0:	str	r1, [sp, #80]	; 0x50
   12ae4:	str	r3, [sp, #84]	; 0x54
   12ae8:	b	123d0 <__assert_fail@plt+0xfe0>
   12aec:	add	r2, sp, #232	; 0xe8
   12af0:	mov	r1, r4
   12af4:	mov	r0, #3
   12af8:	bl	111bc <__fxstat64@plt>
   12afc:	cmp	r0, #0
   12b00:	bne	12e50 <__assert_fail@plt+0x1a60>
   12b04:	ldr	ip, [sp, #248]	; 0xf8
   12b08:	ldr	r3, [r5, #40]	; 0x28
   12b0c:	cmp	r3, ip
   12b10:	beq	12c08 <__assert_fail@plt+0x1818>
   12b14:	ldr	r3, [sp, #312]	; 0x138
   12b18:	ldr	r2, [sp, #316]	; 0x13c
   12b1c:	and	r6, r6, #61440	; 0xf000
   12b20:	str	r3, [r5, #16]
   12b24:	str	r2, [r5, #20]
   12b28:	mov	r3, #0
   12b2c:	mov	r2, #0
   12b30:	cmp	r6, #32768	; 0x8000
   12b34:	str	ip, [r5, #40]	; 0x28
   12b38:	strd	r2, [r5, #72]	; 0x48
   12b3c:	beq	12c8c <__assert_fail@plt+0x189c>
   12b40:	ldr	r3, [sp, #40]	; 0x28
   12b44:	cmp	r7, r3
   12b48:	beq	12b90 <__assert_fail@plt+0x17a0>
   12b4c:	ldrb	r3, [sl, #1]
   12b50:	cmp	r3, #0
   12b54:	streq	r7, [sp, #40]	; 0x28
   12b58:	beq	12b90 <__assert_fail@plt+0x17a0>
   12b5c:	ldr	fp, [pc, #3772]	; 13a20 <__assert_fail@plt+0x2630>
   12b60:	ldr	r0, [pc, #3772]	; 13a24 <__assert_fail@plt+0x2634>
   12b64:	ldr	r2, [pc, #3772]	; 13a28 <__assert_fail@plt+0x2638>
   12b68:	ldrb	ip, [fp]
   12b6c:	mov	r3, r9
   12b70:	ldr	r1, [pc, #3764]	; 13a2c <__assert_fail@plt+0x263c>
   12b74:	cmp	ip, #0
   12b78:	moveq	r2, r0
   12b7c:	mov	r0, #1
   12b80:	bl	112e8 <__printf_chk@plt>
   12b84:	mov	r3, #0
   12b88:	strb	r3, [fp]
   12b8c:	str	r7, [sp, #40]	; 0x28
   12b90:	ldr	r3, [r5, #56]	; 0x38
   12b94:	cmp	r3, #0
   12b98:	bne	1299c <__assert_fail@plt+0x15ac>
   12b9c:	cmp	r6, #32768	; 0x8000
   12ba0:	beq	12be0 <__assert_fail@plt+0x17f0>
   12ba4:	mvn	r3, #0
   12ba8:	mov	r2, r3
   12bac:	b	129a4 <__assert_fail@plt+0x15b4>
   12bb0:	cmp	r0, #0
   12bb4:	bge	12988 <__assert_fail@plt+0x1598>
   12bb8:	bl	112c4 <__errno_location@plt>
   12bbc:	ldr	r3, [r5, #40]	; 0x28
   12bc0:	and	r3, r3, #61440	; 0xf000
   12bc4:	cmp	r3, #32768	; 0x8000
   12bc8:	ldr	fp, [r0]
   12bcc:	bne	13284 <__assert_fail@plt+0x1e94>
   12bd0:	cmp	fp, #1
   12bd4:	bne	13284 <__assert_fail@plt+0x1e94>
   12bd8:	ldr	fp, [r5, #56]	; 0x38
   12bdc:	b	12994 <__assert_fail@plt+0x15a4>
   12be0:	ldrb	r3, [r5, #45]	; 0x2d
   12be4:	cmp	r3, #0
   12be8:	beq	12ba4 <__assert_fail@plt+0x17b4>
   12bec:	ldr	r3, [sp, #280]	; 0x118
   12bf0:	ldr	r1, [r5, #8]
   12bf4:	ldr	r2, [sp, #284]	; 0x11c
   12bf8:	ldr	r0, [r5, #12]
   12bfc:	subs	r3, r3, r1
   12c00:	sbc	r2, r2, r0
   12c04:	b	129a4 <__assert_fail@plt+0x15b4>
   12c08:	and	r3, ip, #61440	; 0xf000
   12c0c:	cmp	r3, #32768	; 0x8000
   12c10:	beq	12ea4 <__assert_fail@plt+0x1ab4>
   12c14:	ldr	r2, [r5, #16]
   12c18:	ldr	r3, [sp, #312]	; 0x138
   12c1c:	cmp	r3, r2
   12c20:	ldr	r2, [sp, #316]	; 0x13c
   12c24:	bne	12b1c <__assert_fail@plt+0x172c>
   12c28:	ldr	r1, [r5, #20]
   12c2c:	cmp	r2, r1
   12c30:	bne	12b1c <__assert_fail@plt+0x172c>
   12c34:	ldr	ip, [pc, #3556]	; 13a20 <__assert_fail@plt+0x2630>
   12c38:	ldrd	r0, [r5, #72]	; 0x48
   12c3c:	ldrd	r2, [ip, #16]
   12c40:	adds	lr, r0, #1
   12c44:	str	lr, [r5, #72]	; 0x48
   12c48:	adc	lr, r1, #0
   12c4c:	cmp	r1, r3
   12c50:	cmpeq	r0, r2
   12c54:	str	lr, [r5, #76]	; 0x4c
   12c58:	bcc	129dc <__assert_fail@plt+0x15ec>
   12c5c:	ldr	r3, [ip, #4]
   12c60:	cmp	r3, #1
   12c64:	bne	129dc <__assert_fail@plt+0x15ec>
   12c68:	ldr	r1, [r5, #56]	; 0x38
   12c6c:	mov	r0, r5
   12c70:	adds	r1, r1, #0
   12c74:	movne	r1, #1
   12c78:	bl	15214 <__assert_fail@plt+0x3e24>
   12c7c:	mov	r2, #0
   12c80:	mov	r3, #0
   12c84:	strd	r2, [r5, #72]	; 0x48
   12c88:	b	129dc <__assert_fail@plt+0x15ec>
   12c8c:	add	r3, sp, #280	; 0x118
   12c90:	ldrd	r0, [r3]
   12c94:	ldrd	r2, [r5, #8]
   12c98:	cmp	r0, r2
   12c9c:	sbcs	r3, r1, r3
   12ca0:	bge	12b40 <__assert_fail@plt+0x1750>
   12ca4:	mov	r2, #5
   12ca8:	ldr	r1, [pc, #3456]	; 13a30 <__assert_fail@plt+0x2640>
   12cac:	mov	r0, #0
   12cb0:	bl	11168 <dcgettext@plt>
   12cb4:	mov	r2, r9
   12cb8:	mov	r1, #3
   12cbc:	mov	fp, r0
   12cc0:	mov	r0, #0
   12cc4:	bl	19594 <__assert_fail@plt+0x81a4>
   12cc8:	mov	r1, #0
   12ccc:	mov	r2, fp
   12cd0:	mov	r3, r0
   12cd4:	mov	r0, r1
   12cd8:	bl	11204 <error@plt>
   12cdc:	mov	r3, #0
   12ce0:	mov	r2, #0
   12ce4:	stm	sp, {r3, r9}
   12ce8:	mov	r0, r4
   12cec:	mov	r3, #0
   12cf0:	bl	144d0 <__assert_fail@plt+0x30e0>
   12cf4:	mov	r2, #0
   12cf8:	mov	r3, #0
   12cfc:	strd	r2, [r5, #8]
   12d00:	b	12b40 <__assert_fail@plt+0x1750>
   12d04:	ldrb	r2, [sl, #2]
   12d08:	cmp	r2, #0
   12d0c:	beq	12d20 <__assert_fail@plt+0x1930>
   12d10:	ldr	r3, [pc, #3336]	; 13a20 <__assert_fail@plt+0x2630>
   12d14:	ldr	r3, [r3, #4]
   12d18:	cmp	r3, #1
   12d1c:	beq	12d74 <__assert_fail@plt+0x1984>
   12d20:	ldr	r3, [sp, #68]	; 0x44
   12d24:	ldr	r0, [sp, #60]	; 0x3c
   12d28:	ldr	r1, [r3, #48]	; 0x30
   12d2c:	cmp	r1, #0
   12d30:	bge	12d74 <__assert_fail@plt+0x1984>
   12d34:	ldrb	r4, [r3, #44]	; 0x2c
   12d38:	eor	r4, r4, #1
   12d3c:	ands	r4, r2, r4
   12d40:	bne	12d74 <__assert_fail@plt+0x1984>
   12d44:	add	r3, r3, #80	; 0x50
   12d48:	cmp	r0, r3
   12d4c:	bne	12d28 <__assert_fail@plt+0x1938>
   12d50:	mov	r2, #5
   12d54:	ldr	r1, [pc, #3288]	; 13a34 <__assert_fail@plt+0x2644>
   12d58:	mov	r0, r4
   12d5c:	bl	11168 <dcgettext@plt>
   12d60:	mov	r1, r4
   12d64:	mov	r2, r0
   12d68:	mov	r0, r4
   12d6c:	bl	11204 <error@plt>
   12d70:	b	11fbc <__assert_fail@plt+0xbcc>
   12d74:	ldr	r2, [sp, #32]
   12d78:	eor	r3, r8, #1
   12d7c:	orrs	r3, r3, r2
   12d80:	beq	12e94 <__assert_fail@plt+0x1aa4>
   12d84:	ldr	r3, [pc, #3244]	; 13a38 <__assert_fail@plt+0x2648>
   12d88:	ldr	r0, [r3]
   12d8c:	bl	111a4 <fflush_unlocked@plt>
   12d90:	cmp	r0, #0
   12d94:	bne	13ddc <__assert_fail@plt+0x29ec>
   12d98:	ldrb	r3, [sl, #13]
   12d9c:	cmp	r3, #0
   12da0:	beq	12df8 <__assert_fail@plt+0x1a08>
   12da4:	mov	r0, #0
   12da8:	mov	r1, r0
   12dac:	add	r3, sp, #336	; 0x150
   12db0:	add	r2, sp, #464	; 0x1d0
   12db4:	str	r0, [sp, #236]	; 0xec
   12db8:	str	r0, [sp, #232]	; 0xe8
   12dbc:	str	r1, [r3, #4]!
   12dc0:	cmp	r2, r3
   12dc4:	bne	12dbc <__assert_fail@plt+0x19cc>
   12dc8:	ldr	ip, [sp, #340]	; 0x154
   12dcc:	add	r2, sp, #232	; 0xe8
   12dd0:	mov	r3, #0
   12dd4:	orr	ip, ip, #2
   12dd8:	str	r2, [sp]
   12ddc:	add	r1, sp, #340	; 0x154
   12de0:	mov	r2, r3
   12de4:	mov	r0, #2
   12de8:	str	ip, [sp, #340]	; 0x154
   12dec:	bl	1115c <select@plt>
   12df0:	cmp	r0, #1
   12df4:	beq	12eec <__assert_fail@plt+0x1afc>
   12df8:	cmp	r8, #0
   12dfc:	bne	12918 <__assert_fail@plt+0x1528>
   12e00:	ldr	r3, [sp, #44]	; 0x2c
   12e04:	cmp	r3, #0
   12e08:	bne	11fbc <__assert_fail@plt+0xbcc>
   12e0c:	ldr	r0, [sl, #8]
   12e10:	cmp	r0, #0
   12e14:	bne	12ec0 <__assert_fail@plt+0x1ad0>
   12e18:	vmov.f64	d0, d8
   12e1c:	bl	1a15c <__assert_fail@plt+0x8d6c>
   12e20:	cmp	r0, #0
   12e24:	beq	12918 <__assert_fail@plt+0x1528>
   12e28:	bl	112c4 <__errno_location@plt>
   12e2c:	ldr	r1, [pc, #3080]	; 13a3c <__assert_fail@plt+0x264c>
   12e30:	mov	r2, #5
   12e34:	ldr	r4, [r0]
   12e38:	mov	r0, #0
   12e3c:	bl	11168 <dcgettext@plt>
   12e40:	mov	r1, r4
   12e44:	mov	r2, r0
   12e48:	mov	r0, #1
   12e4c:	bl	11204 <error@plt>
   12e50:	mvn	r3, #0
   12e54:	str	r3, [r5, #48]	; 0x30
   12e58:	bl	112c4 <__errno_location@plt>
   12e5c:	mov	r2, r9
   12e60:	mov	r1, #3
   12e64:	ldr	r6, [r0]
   12e68:	mov	r0, fp
   12e6c:	str	r6, [r5, #52]	; 0x34
   12e70:	bl	19594 <__assert_fail@plt+0x81a4>
   12e74:	mov	r1, r6
   12e78:	ldr	r2, [pc, #3008]	; 13a40 <__assert_fail@plt+0x2650>
   12e7c:	mov	r3, r0
   12e80:	mov	r0, fp
   12e84:	bl	11204 <error@plt>
   12e88:	mov	r0, r4
   12e8c:	bl	113d8 <close@plt>
   12e90:	b	129dc <__assert_fail@plt+0x15ec>
   12e94:	ldrb	r3, [sl, #13]
   12e98:	cmp	r3, #0
   12e9c:	bne	12da4 <__assert_fail@plt+0x19b4>
   12ea0:	b	12918 <__assert_fail@plt+0x1528>
   12ea4:	add	r3, sp, #280	; 0x118
   12ea8:	ldrd	r0, [r5, #8]
   12eac:	ldrd	r2, [r3]
   12eb0:	cmp	r1, r3
   12eb4:	cmpeq	r0, r2
   12eb8:	bne	12b14 <__assert_fail@plt+0x1724>
   12ebc:	b	12c14 <__assert_fail@plt+0x1824>
   12ec0:	mov	r1, r3
   12ec4:	bl	11264 <kill@plt>
   12ec8:	cmp	r0, #0
   12ecc:	beq	12e18 <__assert_fail@plt+0x1a28>
   12ed0:	bl	112c4 <__errno_location@plt>
   12ed4:	ldr	r3, [r0]
   12ed8:	cmp	r3, #1
   12edc:	ldrne	r3, [sp, #52]	; 0x34
   12ee0:	strne	r3, [sp, #44]	; 0x2c
   12ee4:	bne	12918 <__assert_fail@plt+0x1528>
   12ee8:	b	12e18 <__assert_fail@plt+0x1a28>
   12eec:	mov	r0, #13
   12ef0:	bl	110c0 <raise@plt>
   12ef4:	b	12df8 <__assert_fail@plt+0x1a08>
   12ef8:	ldr	r0, [pc, #2884]	; 13a44 <__assert_fail@plt+0x2654>
   12efc:	bl	19d7c <__assert_fail@plt+0x898c>
   12f00:	mov	r5, #0
   12f04:	add	r3, r0, #8192	; 0x2000
   12f08:	mov	r9, r0
   12f0c:	str	r5, [r3]
   12f10:	str	r5, [r3, #4]
   12f14:	ldr	r0, [pc, #2856]	; 13a44 <__assert_fail@plt+0x2654>
   12f18:	bl	19d7c <__assert_fail@plt+0x898c>
   12f1c:	ldr	r3, [sp, #24]
   12f20:	str	fp, [sp, #72]	; 0x48
   12f24:	str	r9, [sp, #44]	; 0x2c
   12f28:	mov	fp, r5
   12f2c:	str	r3, [sp, #52]	; 0x34
   12f30:	mov	r6, r0
   12f34:	b	12f78 <__assert_fail@plt+0x1b88>
   12f38:	ldr	r3, [sp, #44]	; 0x2c
   12f3c:	str	r6, [r8, #4]
   12f40:	add	ip, r3, #8192	; 0x2000
   12f44:	ldrd	r8, [sp, #32]
   12f48:	ldr	r2, [ip]
   12f4c:	mov	r1, #0
   12f50:	sub	r2, fp, r2
   12f54:	cmp	r9, r1
   12f58:	cmpeq	r8, r2
   12f5c:	bcs	12ffc <__assert_fail@plt+0x1c0c>
   12f60:	mov	r0, r3
   12f64:	mov	fp, r2
   12f68:	ldr	r3, [ip, #4]
   12f6c:	str	r3, [sp, #44]	; 0x2c
   12f70:	mov	r9, r6
   12f74:	mov	r6, r0
   12f78:	mov	r2, #8192	; 0x2000
   12f7c:	mov	r1, r6
   12f80:	ldr	r0, [sp, #52]	; 0x34
   12f84:	bl	19778 <__assert_fail@plt+0x8388>
   12f88:	sub	r2, r0, #1
   12f8c:	cmn	r2, #3
   12f90:	bhi	13008 <__assert_fail@plt+0x1c18>
   12f94:	ldrd	r2, [sp, #128]	; 0x80
   12f98:	add	r7, r6, #8192	; 0x2000
   12f9c:	add	r8, r9, #8192	; 0x2000
   12fa0:	adds	r4, r2, r0
   12fa4:	adc	r5, r3, #0
   12fa8:	ldr	r3, [pc, #2712]	; 13a48 <__assert_fail@plt+0x2658>
   12fac:	strd	r4, [sp, #128]	; 0x80
   12fb0:	str	r0, [r7]
   12fb4:	ldr	r1, [r8]
   12fb8:	mov	r2, #0
   12fbc:	add	ip, r0, r1
   12fc0:	cmp	ip, r3
   12fc4:	add	fp, fp, r0
   12fc8:	str	r2, [r7, #4]
   12fcc:	bhi	12f38 <__assert_fail@plt+0x1b48>
   12fd0:	mov	r2, r0
   12fd4:	add	r0, r9, r1
   12fd8:	mov	r1, r6
   12fdc:	bl	11120 <memcpy@plt>
   12fe0:	ldr	r1, [r7]
   12fe4:	ldr	r2, [r8]
   12fe8:	mov	r0, r6
   12fec:	add	r2, r2, r1
   12ff0:	mov	r6, r9
   12ff4:	str	r2, [r8]
   12ff8:	b	12f70 <__assert_fail@plt+0x1b80>
   12ffc:	ldr	r0, [pc, #2624]	; 13a44 <__assert_fail@plt+0x2654>
   13000:	bl	19d7c <__assert_fail@plt+0x898c>
   13004:	b	12f70 <__assert_fail@plt+0x1b80>
   13008:	ldr	r4, [sp, #44]	; 0x2c
   1300c:	str	r0, [sp, #44]	; 0x2c
   13010:	mov	r0, r6
   13014:	mov	r5, fp
   13018:	ldr	fp, [sp, #72]	; 0x48
   1301c:	bl	110fc <free@plt>
   13020:	ldr	r2, [sp, #44]	; 0x2c
   13024:	cmn	r2, #1
   13028:	movne	r0, r4
   1302c:	movne	ip, r4
   13030:	movne	r2, r5
   13034:	ldrdne	r4, [sp, #32]
   13038:	bne	13048 <__assert_fail@plt+0x1c58>
   1303c:	b	13240 <__assert_fail@plt+0x1e50>
   13040:	ldr	r0, [r6, #4]
   13044:	mov	r2, r3
   13048:	add	r6, r0, #8192	; 0x2000
   1304c:	mov	r9, #0
   13050:	ldr	r1, [r6]
   13054:	cmp	r5, r9
   13058:	sub	r3, r2, r1
   1305c:	cmpeq	r4, r3
   13060:	bcc	13040 <__assert_fail@plt+0x1c50>
   13064:	ldrd	r8, [sp, #32]
   13068:	mov	r3, #0
   1306c:	mov	r5, r2
   13070:	cmp	r9, r3
   13074:	cmpeq	r8, r2
   13078:	movcc	r3, r8
   1307c:	subcc	r5, r2, r3
   13080:	movcs	r5, #0
   13084:	add	r0, r0, r5
   13088:	sub	r1, r1, r5
   1308c:	mov	r4, ip
   13090:	bl	14014 <__assert_fail@plt+0x2c24>
   13094:	ldr	r0, [r6, #4]
   13098:	b	130ac <__assert_fail@plt+0x1cbc>
   1309c:	add	r5, r0, #8192	; 0x2000
   130a0:	ldr	r1, [r5]
   130a4:	bl	14014 <__assert_fail@plt+0x2c24>
   130a8:	ldr	r0, [r5, #4]
   130ac:	cmp	r0, #0
   130b0:	bne	1309c <__assert_fail@plt+0x1cac>
   130b4:	mov	r3, #1
   130b8:	str	r3, [sp, #40]	; 0x28
   130bc:	mov	r0, r4
   130c0:	b	130d4 <__assert_fail@plt+0x1ce4>
   130c4:	add	r3, r0, #8192	; 0x2000
   130c8:	ldr	r4, [r3, #4]
   130cc:	bl	110fc <free@plt>
   130d0:	mov	r0, r4
   130d4:	cmp	r0, #0
   130d8:	bne	130c4 <__assert_fail@plt+0x1cd4>
   130dc:	b	11f74 <__assert_fail@plt+0xb84>
   130e0:	mov	r2, #5
   130e4:	ldr	r1, [pc, #2400]	; 13a4c <__assert_fail@plt+0x265c>
   130e8:	mov	r0, r7
   130ec:	strb	r7, [sl, #2]
   130f0:	bl	11168 <dcgettext@plt>
   130f4:	mov	r1, r7
   130f8:	mov	r2, r0
   130fc:	mov	r0, r7
   13100:	bl	11204 <error@plt>
   13104:	b	11e00 <__assert_fail@plt+0xa10>
   13108:	ldr	r2, [sp, #64]	; 0x40
   1310c:	mov	r3, #1
   13110:	str	r2, [sp, #4]
   13114:	str	r3, [sp]
   13118:	mov	r2, #0
   1311c:	mov	r3, #0
   13120:	ldr	r0, [sp, #24]
   13124:	bl	144d0 <__assert_fail@plt+0x30e0>
   13128:	mov	r4, r0
   1312c:	mov	r5, r1
   13130:	b	12430 <__assert_fail@plt+0x1040>
   13134:	bl	112c4 <__errno_location@plt>
   13138:	mov	r2, #5
   1313c:	ldr	r1, [pc, #2316]	; 13a50 <__assert_fail@plt+0x2660>
   13140:	ldr	r4, [r0]
   13144:	mov	r0, #0
   13148:	bl	11168 <dcgettext@plt>
   1314c:	ldr	r1, [sp, #64]	; 0x40
   13150:	mov	r5, r0
   13154:	mov	r0, #4
   13158:	bl	194b8 <__assert_fail@plt+0x80c8>
   1315c:	mov	r2, r5
   13160:	mov	r1, r4
   13164:	mov	r3, r0
   13168:	mov	r0, #0
   1316c:	bl	11204 <error@plt>
   13170:	b	12264 <__assert_fail@plt+0xe74>
   13174:	ldr	r2, [sp, #64]	; 0x40
   13178:	mov	r3, #1
   1317c:	str	r2, [sp, #4]
   13180:	str	r3, [sp]
   13184:	ldr	r0, [sp, #24]
   13188:	ldrd	r2, [sp, #32]
   1318c:	bl	144d0 <__assert_fail@plt+0x30e0>
   13190:	cmp	r0, #0
   13194:	sbcs	r3, r1, #0
   13198:	bge	11f18 <__assert_fail@plt+0xb28>
   1319c:	b	11ef0 <__assert_fail@plt+0xb00>
   131a0:	ldrd	r0, [sp, #80]	; 0x50
   131a4:	subs	r4, r0, r2
   131a8:	sbc	r5, r1, r3
   131ac:	ldr	r3, [sp, #64]	; 0x40
   131b0:	mov	r1, #0
   131b4:	str	r3, [sp, #4]
   131b8:	mov	r2, r4
   131bc:	mov	r3, r5
   131c0:	str	r1, [sp]
   131c4:	ldr	r0, [sp, #24]
   131c8:	bl	144d0 <__assert_fail@plt+0x30e0>
   131cc:	b	12464 <__assert_fail@plt+0x1074>
   131d0:	ldr	r3, [sp, #64]	; 0x40
   131d4:	mov	r2, r4
   131d8:	str	r3, [sp, #4]
   131dc:	ldr	r3, [sp, #72]	; 0x48
   131e0:	ldr	r0, [sp, #24]
   131e4:	str	r3, [sp]
   131e8:	mov	r3, r5
   131ec:	bl	144d0 <__assert_fail@plt+0x30e0>
   131f0:	b	11ccc <__assert_fail@plt+0x8dc>
   131f4:	mov	r0, r4
   131f8:	mov	r2, #5
   131fc:	ldr	r1, [pc, #2128]	; 13a54 <__assert_fail@plt+0x2664>
   13200:	bl	11168 <dcgettext@plt>
   13204:	b	122ec <__assert_fail@plt+0xefc>
   13208:	ldr	r2, [sp, #52]	; 0x34
   1320c:	str	r4, [sp, #44]	; 0x2c
   13210:	b	125f8 <__assert_fail@plt+0x1208>
   13214:	mov	r2, #5
   13218:	ldr	r1, [pc, #2104]	; 13a58 <__assert_fail@plt+0x2668>
   1321c:	mov	r0, r4
   13220:	bl	11168 <dcgettext@plt>
   13224:	mov	r3, fp
   13228:	mov	r1, r4
   1322c:	mov	r2, r0
   13230:	mov	r0, #1
   13234:	bl	11204 <error@plt>
   13238:	mov	r0, #1
   1323c:	bl	15874 <__assert_fail@plt+0x4484>
   13240:	bl	112c4 <__errno_location@plt>
   13244:	mov	r2, #5
   13248:	ldr	r1, [pc, #2048]	; 13a50 <__assert_fail@plt+0x2660>
   1324c:	ldr	r5, [r0]
   13250:	mov	r0, #0
   13254:	bl	11168 <dcgettext@plt>
   13258:	ldr	r1, [sp, #64]	; 0x40
   1325c:	mov	r6, r0
   13260:	mov	r0, #4
   13264:	bl	194b8 <__assert_fail@plt+0x80c8>
   13268:	mov	r2, r6
   1326c:	mov	r1, r5
   13270:	mov	r3, r0
   13274:	mov	r0, #0
   13278:	bl	11204 <error@plt>
   1327c:	mov	r0, r4
   13280:	b	130d4 <__assert_fail@plt+0x1ce4>
   13284:	mov	r2, #5
   13288:	ldr	r1, [pc, #1996]	; 13a5c <__assert_fail@plt+0x266c>
   1328c:	mov	r0, #0
   13290:	bl	11168 <dcgettext@plt>
   13294:	mov	r2, r9
   13298:	mov	r1, #3
   1329c:	mov	r4, r0
   132a0:	mov	r0, #0
   132a4:	bl	19594 <__assert_fail@plt+0x81a4>
   132a8:	mov	r2, r4
   132ac:	mov	r1, fp
   132b0:	mov	r3, r0
   132b4:	mov	r0, #1
   132b8:	bl	11204 <error@plt>
   132bc:	ldr	r2, [sp, #68]	; 0x44
   132c0:	ldr	r3, [r2, #48]	; 0x30
   132c4:	cmn	r3, #1
   132c8:	beq	128f8 <__assert_fail@plt+0x1508>
   132cc:	ldr	r3, [r2, #40]	; 0x28
   132d0:	and	r3, r3, #61440	; 0xf000
   132d4:	subs	r3, r3, #32768	; 0x8000
   132d8:	movne	r3, #1
   132dc:	str	r3, [sp, #24]
   132e0:	b	128f8 <__assert_fail@plt+0x1508>
   132e4:	mov	r6, r9
   132e8:	add	r8, sp, #232	; 0xe8
   132ec:	mov	r4, #80	; 0x50
   132f0:	b	132f8 <__assert_fail@plt+0x1f08>
   132f4:	mov	r6, r5
   132f8:	mul	r3, r4, r6
   132fc:	ldr	r1, [sp, #68]	; 0x44
   13300:	mov	r2, r8
   13304:	mov	r0, #3
   13308:	ldr	r1, [r1, r3]
   1330c:	bl	113e4 <__lxstat64@plt>
   13310:	cmp	r0, #0
   13314:	bne	13328 <__assert_fail@plt+0x1f38>
   13318:	ldr	r3, [sp, #248]	; 0xf8
   1331c:	and	r3, r3, #61440	; 0xf000
   13320:	cmp	r3, #40960	; 0xa000
   13324:	beq	128bc <__assert_fail@plt+0x14cc>
   13328:	ldr	r3, [sp, #28]
   1332c:	add	r5, r6, #1
   13330:	cmp	r3, r5
   13334:	bne	132f4 <__assert_fail@plt+0x1f04>
   13338:	ldr	r3, [sp, #68]	; 0x44
   1333c:	str	r6, [sp, #64]	; 0x40
   13340:	ldr	r2, [r3, #48]	; 0x30
   13344:	cmp	r2, #0
   13348:	blt	13360 <__assert_fail@plt+0x1f70>
   1334c:	ldr	r2, [r3, #40]	; 0x28
   13350:	and	r2, r2, #61440	; 0xf000
   13354:	cmp	r2, #32768	; 0x8000
   13358:	cmpne	r2, #4096	; 0x1000
   1335c:	bne	128bc <__assert_fail@plt+0x14cc>
   13360:	ldr	r2, [sp, #60]	; 0x3c
   13364:	add	r3, r3, #80	; 0x50
   13368:	cmp	r3, r2
   1336c:	bne	13340 <__assert_fail@plt+0x1f50>
   13370:	ldr	r3, [sp, #48]	; 0x30
   13374:	cmp	r3, #0
   13378:	bne	1338c <__assert_fail@plt+0x1f9c>
   1337c:	ldr	r3, [pc, #1692]	; 13a20 <__assert_fail@plt+0x2630>
   13380:	ldr	r3, [r3, #4]
   13384:	cmp	r3, #2
   13388:	beq	128bc <__assert_fail@plt+0x14cc>
   1338c:	bl	11294 <inotify_init@plt>
   13390:	subs	fp, r0, #0
   13394:	blt	13508 <__assert_fail@plt+0x2118>
   13398:	ldr	r3, [pc, #1688]	; 13a38 <__assert_fail@plt+0x2648>
   1339c:	ldr	r0, [r3]
   133a0:	bl	111a4 <fflush_unlocked@plt>
   133a4:	subs	r7, r0, #0
   133a8:	bne	13ddc <__assert_fail@plt+0x29ec>
   133ac:	ldr	r3, [pc, #1708]	; 13a60 <__assert_fail@plt+0x2670>
   133b0:	str	r7, [sp]
   133b4:	mov	r0, r5
   133b8:	ldr	r2, [pc, #1700]	; 13a64 <__assert_fail@plt+0x2674>
   133bc:	mov	r1, r7
   133c0:	bl	16c08 <__assert_fail@plt+0x5818>
   133c4:	subs	r3, r0, #0
   133c8:	str	r3, [sp, #32]
   133cc:	beq	13dec <__assert_fail@plt+0x29fc>
   133d0:	ldr	r2, [pc, #1608]	; 13a20 <__assert_fail@plt+0x2630>
   133d4:	ldr	r4, [sp, #68]	; 0x44
   133d8:	str	r2, [sp, #44]	; 0x2c
   133dc:	ldr	r2, [r2, #4]
   133e0:	ldr	r3, [pc, #1664]	; 13a68 <__assert_fail@plt+0x2678>
   133e4:	cmp	r2, #1
   133e8:	mov	r6, r7
   133ec:	movne	r3, #2
   133f0:	str	r3, [sp, #88]	; 0x58
   133f4:	str	r7, [sp, #24]
   133f8:	str	r9, [sp, #40]	; 0x28
   133fc:	str	r8, [sp, #56]	; 0x38
   13400:	ldrb	r9, [r4, #44]	; 0x2c
   13404:	cmp	r9, #0
   13408:	bne	1359c <__assert_fail@plt+0x21ac>
   1340c:	ldr	r3, [sp, #44]	; 0x2c
   13410:	ldr	r8, [r4]
   13414:	mov	r0, r8
   13418:	ldr	r5, [r3, #4]
   1341c:	bl	11288 <strlen@plt>
   13420:	mvn	r3, #0
   13424:	str	r3, [r4, #60]	; 0x3c
   13428:	cmp	r6, r0
   1342c:	movcc	r6, r0
   13430:	cmp	r5, #1
   13434:	bne	13494 <__assert_fail@plt+0x20a4>
   13438:	mov	r0, r8
   1343c:	bl	1611c <__assert_fail@plt+0x4d2c>
   13440:	mov	r5, r0
   13444:	mov	r0, r8
   13448:	bl	161dc <__assert_fail@plt+0x4dec>
   1344c:	ldrb	r3, [r8, r5]
   13450:	cmp	r5, #0
   13454:	ldr	r2, [pc, #1552]	; 13a6c <__assert_fail@plt+0x267c>
   13458:	ldreq	r1, [pc, #1552]	; 13a70 <__assert_fail@plt+0x2680>
   1345c:	str	r3, [sp, #72]	; 0x48
   13460:	sub	r0, r0, r8
   13464:	str	r0, [r4, #68]	; 0x44
   13468:	strb	r9, [r8, r5]
   1346c:	mov	r0, fp
   13470:	ldrne	r1, [r4]
   13474:	bl	112b8 <inotify_add_watch@plt>
   13478:	ldr	r2, [r4]
   1347c:	ldr	r3, [sp, #72]	; 0x48
   13480:	str	r0, [r4, #64]	; 0x40
   13484:	strb	r3, [r2, r5]
   13488:	ldr	r3, [r4, #64]	; 0x40
   1348c:	cmp	r3, #0
   13490:	blt	13d1c <__assert_fail@plt+0x292c>
   13494:	ldr	r2, [sp, #88]	; 0x58
   13498:	ldr	r1, [r4]
   1349c:	mov	r0, fp
   134a0:	bl	112b8 <inotify_add_watch@plt>
   134a4:	cmp	r0, #0
   134a8:	str	r0, [r4, #60]	; 0x3c
   134ac:	bge	13580 <__assert_fail@plt+0x2190>
   134b0:	ldr	r3, [r4, #48]	; 0x30
   134b4:	ldr	r2, [sp, #52]	; 0x34
   134b8:	cmn	r3, #1
   134bc:	movne	r7, r2
   134c0:	bl	112c4 <__errno_location@plt>
   134c4:	ldr	r5, [r0]
   134c8:	bic	r3, r5, #16
   134cc:	cmp	r3, #12
   134d0:	bne	13678 <__assert_fail@plt+0x2288>
   134d4:	mov	r2, #5
   134d8:	ldr	r1, [pc, #1464]	; 13a98 <__assert_fail@plt+0x26a8>
   134dc:	mov	r0, #0
   134e0:	bl	11168 <dcgettext@plt>
   134e4:	mov	r1, #0
   134e8:	mov	r2, r0
   134ec:	mov	r0, r1
   134f0:	bl	11204 <error@plt>
   134f4:	ldr	r0, [sp, #32]
   134f8:	bl	16e08 <__assert_fail@plt+0x5a18>
   134fc:	bl	112c4 <__errno_location@plt>
   13500:	mov	r3, #0
   13504:	str	r3, [r0]
   13508:	bl	112c4 <__errno_location@plt>
   1350c:	mov	r2, #5
   13510:	ldr	r1, [pc, #1372]	; 13a74 <__assert_fail@plt+0x2684>
   13514:	ldr	r4, [sp, #68]	; 0x44
   13518:	ldr	r5, [r0]
   1351c:	mov	r0, #0
   13520:	bl	11168 <dcgettext@plt>
   13524:	mov	r1, r5
   13528:	mov	r2, r0
   1352c:	mov	r0, #0
   13530:	bl	11204 <error@plt>
   13534:	ldr	r5, [sp, #60]	; 0x3c
   13538:	ldr	r1, [r4, #60]	; 0x3c
   1353c:	cmn	r1, #1
   13540:	beq	1354c <__assert_fail@plt+0x215c>
   13544:	mov	r0, fp
   13548:	bl	113b4 <inotify_rm_watch@plt>
   1354c:	ldr	r1, [r4, #64]	; 0x40
   13550:	cmn	r1, #1
   13554:	beq	13560 <__assert_fail@plt+0x2170>
   13558:	mov	r0, fp
   1355c:	bl	113b4 <inotify_rm_watch@plt>
   13560:	add	r4, r4, #80	; 0x50
   13564:	cmp	r5, r4
   13568:	bne	13538 <__assert_fail@plt+0x2148>
   1356c:	b	128bc <__assert_fail@plt+0x14cc>
   13570:	bl	112c4 <__errno_location@plt>
   13574:	mov	r2, #5
   13578:	ldr	r1, [pc, #1272]	; 13a78 <__assert_fail@plt+0x2688>
   1357c:	b	12e34 <__assert_fail@plt+0x1a44>
   13580:	mov	r1, r4
   13584:	ldr	r0, [sp, #32]
   13588:	bl	17234 <__assert_fail@plt+0x5e44>
   1358c:	cmp	r0, #0
   13590:	beq	13dec <__assert_fail@plt+0x29fc>
   13594:	ldr	r3, [sp, #52]	; 0x34
   13598:	str	r3, [sp, #24]
   1359c:	ldr	r3, [sp, #60]	; 0x3c
   135a0:	add	r4, r4, #80	; 0x50
   135a4:	cmp	r3, r4
   135a8:	bne	13400 <__assert_fail@plt+0x2010>
   135ac:	ldr	r3, [sp, #44]	; 0x2c
   135b0:	ldr	r9, [sp, #40]	; 0x28
   135b4:	ldr	r8, [sp, #56]	; 0x38
   135b8:	ldr	r3, [r3, #4]
   135bc:	cmp	r3, #2
   135c0:	beq	139f4 <__assert_fail@plt+0x2604>
   135c4:	ldr	r3, [sp, #92]	; 0x5c
   135c8:	ldr	r2, [sp, #68]	; 0x44
   135cc:	sub	r3, r3, #80	; 0x50
   135d0:	add	r3, r2, r3
   135d4:	mov	r7, r6
   135d8:	mov	r4, r2
   135dc:	str	r3, [sp, #116]	; 0x74
   135e0:	ldr	r5, [sp, #60]	; 0x3c
   135e4:	ldr	r6, [sp, #44]	; 0x2c
   135e8:	b	13654 <__assert_fail@plt+0x2264>
   135ec:	ldr	r3, [r4, #48]	; 0x30
   135f0:	cmn	r3, #1
   135f4:	beq	1363c <__assert_fail@plt+0x224c>
   135f8:	mov	r2, r8
   135fc:	ldr	r1, [r4]
   13600:	mov	r0, #3
   13604:	bl	1139c <__xstat64@plt>
   13608:	cmp	r0, #0
   1360c:	bne	1363c <__assert_fail@plt+0x224c>
   13610:	ldrd	r0, [r4, #24]
   13614:	ldrd	r2, [sp, #232]	; 0xe8
   13618:	cmp	r1, r3
   1361c:	cmpeq	r0, r2
   13620:	bne	13cb0 <__assert_fail@plt+0x28c0>
   13624:	add	r3, sp, #328	; 0x148
   13628:	ldrd	r0, [r4, #32]
   1362c:	ldrd	r2, [r3]
   13630:	cmp	r1, r3
   13634:	cmpeq	r0, r2
   13638:	bne	13cb0 <__assert_fail@plt+0x28c0>
   1363c:	add	r1, sp, #116	; 0x74
   13640:	mov	r0, r4
   13644:	bl	148fc <__assert_fail@plt+0x350c>
   13648:	add	r4, r4, #80	; 0x50
   1364c:	cmp	r5, r4
   13650:	beq	136bc <__assert_fail@plt+0x22cc>
   13654:	ldrb	r1, [r4, #44]	; 0x2c
   13658:	cmp	r1, #0
   1365c:	bne	13648 <__assert_fail@plt+0x2258>
   13660:	ldr	r3, [r6, #4]
   13664:	cmp	r3, #1
   13668:	bne	135ec <__assert_fail@plt+0x21fc>
   1366c:	mov	r0, r4
   13670:	bl	15214 <__assert_fail@plt+0x3e24>
   13674:	b	1363c <__assert_fail@plt+0x224c>
   13678:	ldr	r3, [r4, #52]	; 0x34
   1367c:	cmp	r5, r3
   13680:	beq	1359c <__assert_fail@plt+0x21ac>
   13684:	mov	r2, #5
   13688:	ldr	r1, [pc, #1012]	; 13a84 <__assert_fail@plt+0x2694>
   1368c:	mov	r0, #0
   13690:	bl	11168 <dcgettext@plt>
   13694:	ldr	r1, [r4]
   13698:	str	r0, [sp, #72]	; 0x48
   1369c:	mov	r0, #4
   136a0:	bl	194b8 <__assert_fail@plt+0x80c8>
   136a4:	ldr	r2, [sp, #72]	; 0x48
   136a8:	mov	r1, r5
   136ac:	mov	r3, r0
   136b0:	mov	r0, #0
   136b4:	bl	11204 <error@plt>
   136b8:	b	1359c <__assert_fail@plt+0x21ac>
   136bc:	add	r3, r7, #17
   136c0:	mov	r0, r3
   136c4:	str	r3, [sp, #72]	; 0x48
   136c8:	bl	19d7c <__assert_fail@plt+0x898c>
   136cc:	mov	r1, #1
   136d0:	cmp	fp, r1
   136d4:	and	r2, fp, #31
   136d8:	vldr	d9, [pc, #816]	; 13a10 <__assert_fail@plt+0x2620>
   136dc:	movge	r3, fp
   136e0:	movlt	r3, r1
   136e4:	mov	r5, #0
   136e8:	lsl	r2, r1, r2
   136ec:	mov	r6, r5
   136f0:	str	r2, [sp, #24]
   136f4:	add	r3, r3, r1
   136f8:	str	r3, [sp, #40]	; 0x28
   136fc:	mov	r3, #3
   13700:	str	r0, [sp, #56]	; 0x38
   13704:	str	r3, [sp, #76]	; 0x4c
   13708:	ldr	r3, [sp, #44]	; 0x2c
   1370c:	ldr	r3, [r3, #4]
   13710:	cmp	r3, #1
   13714:	beq	1398c <__assert_fail@plt+0x259c>
   13718:	cmp	r6, r5
   1371c:	bcc	1381c <__assert_fail@plt+0x242c>
   13720:	ldr	r0, [sl, #8]
   13724:	cmp	r0, #0
   13728:	beq	13760 <__assert_fail@plt+0x2370>
   1372c:	cmp	r9, #0
   13730:	bne	139dc <__assert_fail@plt+0x25ec>
   13734:	mov	r1, r9
   13738:	bl	11264 <kill@plt>
   1373c:	cmp	r0, #0
   13740:	beq	137fc <__assert_fail@plt+0x240c>
   13744:	bl	112c4 <__errno_location@plt>
   13748:	ldr	r3, [r0]
   1374c:	cmp	r3, #1
   13750:	strne	r9, [sp, #236]	; 0xec
   13754:	strne	r9, [sp, #232]	; 0xe8
   13758:	ldrne	r9, [sp, #52]	; 0x34
   1375c:	beq	137fc <__assert_fail@plt+0x240c>
   13760:	add	r3, sp, #336	; 0x150
   13764:	add	r1, sp, #464	; 0x1d0
   13768:	mov	r2, #0
   1376c:	str	r2, [r3, #4]!
   13770:	cmp	r1, r3
   13774:	bne	1376c <__assert_fail@plt+0x237c>
   13778:	mov	r0, fp
   1377c:	bl	1118c <__fdelt_chk@plt>
   13780:	ldrb	r3, [sl, #13]
   13784:	ldr	r2, [sp, #24]
   13788:	add	r1, sp, #340	; 0x154
   1378c:	cmp	r3, #0
   13790:	add	r3, sp, #472	; 0x1d8
   13794:	add	r0, r3, r0, lsl #2
   13798:	ldr	r3, [r0, #-132]	; 0xffffff7c
   1379c:	orr	r3, r3, r2
   137a0:	str	r3, [r0, #-132]	; 0xffffff7c
   137a4:	ldrne	r3, [sp, #340]	; 0x154
   137a8:	ldr	r2, [sl, #8]
   137ac:	orrne	r3, r3, #2
   137b0:	strne	r3, [sp, #340]	; 0x154
   137b4:	mov	r3, #0
   137b8:	cmp	r2, r3
   137bc:	movne	r2, r8
   137c0:	moveq	r2, r3
   137c4:	str	r2, [sp]
   137c8:	ldr	r0, [sp, #40]	; 0x28
   137cc:	mov	r2, r3
   137d0:	bl	1115c <select@plt>
   137d4:	cmp	r0, #0
   137d8:	beq	13718 <__assert_fail@plt+0x2328>
   137dc:	cmn	r0, #1
   137e0:	beq	13d0c <__assert_fail@plt+0x291c>
   137e4:	ldr	r3, [sp, #340]	; 0x154
   137e8:	ands	r4, r3, #2
   137ec:	beq	13948 <__assert_fail@plt+0x2558>
   137f0:	mov	r0, #13
   137f4:	bl	110c0 <raise@plt>
   137f8:	b	13718 <__assert_fail@plt+0x2328>
   137fc:	vcvt.s32.f64	s13, d8
   13800:	vcvt.f64.s32	d7, s13
   13804:	vstr	s13, [sp, #232]	; 0xe8
   13808:	vsub.f64	d7, d8, d7
   1380c:	vmul.f64	d7, d7, d9
   13810:	vcvt.s32.f64	s14, d7
   13814:	vstr	s14, [sp, #236]	; 0xec
   13818:	b	13760 <__assert_fail@plt+0x2370>
   1381c:	ldr	r3, [sp, #56]	; 0x38
   13820:	add	r3, r3, r6
   13824:	add	r6, r6, #16
   13828:	ldr	r2, [r3, #4]
   1382c:	ldr	r1, [r3, #12]
   13830:	ands	r4, r2, #1024	; 0x400
   13834:	str	r3, [sp, #92]	; 0x5c
   13838:	add	r6, r6, r1
   1383c:	ldr	r3, [r3]
   13840:	beq	13924 <__assert_fail@plt+0x2534>
   13844:	cmp	r1, #0
   13848:	movne	r4, #0
   1384c:	ldrne	r7, [sp, #68]	; 0x44
   13850:	beq	13c54 <__assert_fail@plt+0x2864>
   13854:	ldr	r1, [sp, #92]	; 0x5c
   13858:	str	r8, [sp, #80]	; 0x50
   1385c:	add	r1, r1, #16
   13860:	mov	r8, r6
   13864:	str	r1, [sp, #96]	; 0x60
   13868:	mov	r6, r5
   1386c:	mov	r5, r3
   13870:	b	13888 <__assert_fail@plt+0x2498>
   13874:	ldr	r3, [sp, #64]	; 0x40
   13878:	add	r7, r7, #80	; 0x50
   1387c:	cmp	r4, r3
   13880:	add	r4, r4, #1
   13884:	beq	139e4 <__assert_fail@plt+0x25f4>
   13888:	ldr	r1, [r7, #64]	; 0x40
   1388c:	cmp	r5, r1
   13890:	bne	13874 <__assert_fail@plt+0x2484>
   13894:	ldr	ip, [r7]
   13898:	ldr	r1, [r7, #68]	; 0x44
   1389c:	ldr	r0, [sp, #96]	; 0x60
   138a0:	add	r1, ip, r1
   138a4:	str	r2, [sp, #100]	; 0x64
   138a8:	bl	110cc <strcmp@plt>
   138ac:	ldr	r2, [sp, #100]	; 0x64
   138b0:	cmp	r0, #0
   138b4:	bne	13874 <__assert_fail@plt+0x2484>
   138b8:	mov	r3, #80	; 0x50
   138bc:	ands	r2, r2, #512	; 0x200
   138c0:	mul	r4, r3, r4
   138c4:	ldr	r3, [sp, #68]	; 0x44
   138c8:	mov	r5, r6
   138cc:	add	r7, r3, r4
   138d0:	mov	r6, r8
   138d4:	ldr	r8, [sp, #80]	; 0x50
   138d8:	str	r2, [sp, #80]	; 0x50
   138dc:	beq	13b1c <__assert_fail@plt+0x272c>
   138e0:	ldr	r3, [sp, #44]	; 0x2c
   138e4:	ldr	r3, [r3, #4]
   138e8:	cmp	r3, #1
   138ec:	beq	13c44 <__assert_fail@plt+0x2854>
   138f0:	cmp	r7, #0
   138f4:	beq	13708 <__assert_fail@plt+0x2318>
   138f8:	ldr	r3, [sp, #92]	; 0x5c
   138fc:	ldr	r2, [pc, #376]	; 13a7c <__assert_fail@plt+0x268c>
   13900:	ldr	r3, [r3, #4]
   13904:	tst	r3, r2
   13908:	beq	139cc <__assert_fail@plt+0x25dc>
   1390c:	tst	r3, #1024	; 0x400
   13910:	bne	13b00 <__assert_fail@plt+0x2710>
   13914:	mov	r0, r7
   13918:	mov	r1, #0
   1391c:	bl	15214 <__assert_fail@plt+0x3e24>
   13920:	b	13708 <__assert_fail@plt+0x2318>
   13924:	cmp	r1, #0
   13928:	ldrne	r7, [sp, #68]	; 0x44
   1392c:	bne	13854 <__assert_fail@plt+0x2464>
   13930:	mov	r1, r8
   13934:	ldr	r0, [sp, #32]
   13938:	str	r3, [sp, #292]	; 0x124
   1393c:	bl	16950 <__assert_fail@plt+0x5560>
   13940:	mov	r7, r0
   13944:	b	138f0 <__assert_fail@plt+0x2500>
   13948:	ldr	r2, [sp, #72]	; 0x48
   1394c:	ldr	r1, [sp, #56]	; 0x38
   13950:	mov	r0, fp
   13954:	bl	19778 <__assert_fail@plt+0x8388>
   13958:	subs	r5, r0, #0
   1395c:	beq	13ac0 <__assert_fail@plt+0x26d0>
   13960:	cmn	r5, #1
   13964:	movne	r6, r4
   13968:	bne	1381c <__assert_fail@plt+0x242c>
   1396c:	bl	112c4 <__errno_location@plt>
   13970:	ldr	r3, [r0]
   13974:	cmp	r3, #22
   13978:	beq	13ac0 <__assert_fail@plt+0x26d0>
   1397c:	bl	112c4 <__errno_location@plt>
   13980:	mov	r2, #5
   13984:	ldr	r1, [pc, #244]	; 13a80 <__assert_fail@plt+0x2690>
   13988:	b	12e34 <__assert_fail@plt+0x1a44>
   1398c:	ldrb	r3, [sl, #2]
   13990:	cmp	r3, #0
   13994:	bne	13718 <__assert_fail@plt+0x2328>
   13998:	ldr	r0, [sp, #32]
   1399c:	bl	16704 <__assert_fail@plt+0x5314>
   139a0:	subs	r4, r0, #0
   139a4:	bne	13718 <__assert_fail@plt+0x2328>
   139a8:	mov	r2, #5
   139ac:	ldr	r1, [pc, #128]	; 13a34 <__assert_fail@plt+0x2644>
   139b0:	bl	11168 <dcgettext@plt>
   139b4:	mov	r1, r4
   139b8:	mov	r2, r0
   139bc:	mov	r0, r4
   139c0:	bl	11204 <error@plt>
   139c4:	mov	r0, #1
   139c8:	b	11fd0 <__assert_fail@plt+0xbe0>
   139cc:	mov	r0, r7
   139d0:	add	r1, sp, #116	; 0x74
   139d4:	bl	148fc <__assert_fail@plt+0x350c>
   139d8:	b	13708 <__assert_fail@plt+0x2318>
   139dc:	mov	r0, #0
   139e0:	bl	1127c <exit@plt>
   139e4:	mov	r5, r6
   139e8:	mov	r6, r8
   139ec:	ldr	r8, [sp, #80]	; 0x50
   139f0:	b	13708 <__assert_fail@plt+0x2318>
   139f4:	cmp	r7, #0
   139f8:	bne	134f4 <__assert_fail@plt+0x2104>
   139fc:	ldr	r3, [sp, #24]
   13a00:	cmp	r3, #0
   13a04:	bne	135c4 <__assert_fail@plt+0x21d4>
   13a08:	b	139c4 <__assert_fail@plt+0x25d4>
   13a0c:	nop			; (mov r0, r0)
   13a10:	andeq	r0, r0, r0
   13a14:	smlawbmi	lr, r0, r4, r8
   13a18:	andeq	fp, r1, ip, lsl r8
   13a1c:	ldrdeq	ip, [r1], -r4
   13a20:	andeq	lr, r2, r8, lsr r1
   13a24:	andeq	ip, r1, r8, lsl #6
   13a28:	andeq	ip, r1, r4, lsl ip
   13a2c:	andeq	fp, r1, ip, ror r8
   13a30:	ldrdeq	fp, [r1], -r4
   13a34:	andeq	ip, r1, r4, lsr #18
   13a38:			; <UNDEFINED> instruction: 0x0002e1b4
   13a3c:	andeq	ip, r1, r4, lsl #20
   13a40:	andeq	ip, r1, r8, ror #11
   13a44:	andeq	r2, r0, r8
   13a48:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   13a4c:	andeq	ip, r1, ip, lsl r7
   13a50:	andeq	fp, r1, r8, ror #16
   13a54:	ldrdeq	fp, [r1], -r0
   13a58:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13a5c:	andeq	ip, r1, r0, ror #19
   13a60:	andeq	r3, r1, r8, asr #30
   13a64:	andeq	r3, r1, r4, lsr pc
   13a68:	andeq	r0, r0, r6, lsl #24
   13a6c:	andeq	r0, r0, r4, lsl #15
   13a70:			; <UNDEFINED> instruction: 0x0001c5b4
   13a74:			; <UNDEFINED> instruction: 0x0001c9b0
   13a78:	andeq	fp, r1, r8, asr r8
   13a7c:	andeq	r0, r0, r4, lsl #28
   13a80:	andeq	ip, r1, r4, ror #18
   13a84:	andeq	ip, r1, r4, lsl #18
   13a88:	andeq	ip, r1, r0, lsl #19
   13a8c:	andeq	ip, r1, r4, lsl r9
   13a90:	andeq	ip, r1, r8, lsr r9
   13a94:	andeq	ip, r1, r4, asr #17
   13a98:	andeq	ip, r1, r8, ror #17
   13a9c:	andeq	ip, r1, r8, lsl #16
   13aa0:	andeq	fp, r1, ip, lsl r8
   13aa4:	andeq	fp, r1, r8, ror #17
   13aa8:	ldrdeq	ip, [r1], -r4
   13aac:	andeq	ip, r1, r4, ror #11
   13ab0:	andeq	fp, r1, r0, lsl r8
   13ab4:	andeq	r0, r0, r9, asr #5
   13ab8:	andeq	fp, r1, ip, lsr #18
   13abc:	muleq	r1, r0, r8
   13ac0:	ldr	r3, [sp, #76]	; 0x4c
   13ac4:	cmp	r3, #0
   13ac8:	beq	1397c <__assert_fail@plt+0x258c>
   13acc:	ldr	r3, [sp, #72]	; 0x48
   13ad0:	ldr	r0, [sp, #56]	; 0x38
   13ad4:	mov	r5, #0
   13ad8:	lsl	r3, r3, #1
   13adc:	str	r3, [sp, #72]	; 0x48
   13ae0:	mov	r1, r3
   13ae4:	ldr	r3, [sp, #76]	; 0x4c
   13ae8:	mov	r6, r5
   13aec:	sub	r3, r3, #1
   13af0:	str	r3, [sp, #76]	; 0x4c
   13af4:	bl	19dd8 <__assert_fail@plt+0x89e8>
   13af8:	str	r0, [sp, #56]	; 0x38
   13afc:	b	13708 <__assert_fail@plt+0x2318>
   13b00:	ldr	r1, [r7, #60]	; 0x3c
   13b04:	mov	r0, fp
   13b08:	bl	113b4 <inotify_rm_watch@plt>
   13b0c:	mov	r1, r7
   13b10:	ldr	r0, [sp, #32]
   13b14:	bl	1728c <__assert_fail@plt+0x5e9c>
   13b18:	b	13914 <__assert_fail@plt+0x2524>
   13b1c:	ldr	r1, [r3, r4]
   13b20:	ldr	r2, [sp, #88]	; 0x58
   13b24:	mov	r0, fp
   13b28:	bl	112b8 <inotify_add_watch@plt>
   13b2c:	subs	r3, r0, #0
   13b30:	str	r3, [sp, #96]	; 0x60
   13b34:	bge	13b88 <__assert_fail@plt+0x2798>
   13b38:	bl	112c4 <__errno_location@plt>
   13b3c:	ldr	r3, [r0]
   13b40:	str	r3, [sp, #100]	; 0x64
   13b44:	bic	r3, r3, #16
   13b48:	cmp	r3, #12
   13b4c:	beq	13d70 <__assert_fail@plt+0x2980>
   13b50:	mov	r2, #5
   13b54:	ldr	r1, [pc, #-216]	; 13a84 <__assert_fail@plt+0x2694>
   13b58:	ldr	r0, [sp, #80]	; 0x50
   13b5c:	bl	11168 <dcgettext@plt>
   13b60:	ldr	r3, [sp, #68]	; 0x44
   13b64:	ldr	r1, [r3, r4]
   13b68:	str	r0, [sp, #104]	; 0x68
   13b6c:	mov	r0, #4
   13b70:	bl	194b8 <__assert_fail@plt+0x80c8>
   13b74:	ldr	r2, [sp, #104]	; 0x68
   13b78:	ldr	r1, [sp, #100]	; 0x64
   13b7c:	mov	r3, r0
   13b80:	ldr	r0, [sp, #80]	; 0x50
   13b84:	bl	11204 <error@plt>
   13b88:	ldr	r1, [r7, #60]	; 0x3c
   13b8c:	ldr	r3, [sp, #96]	; 0x60
   13b90:	subs	r3, r3, r1
   13b94:	movne	r3, #1
   13b98:	orrs	r3, r3, r1, lsr #31
   13b9c:	beq	13c34 <__assert_fail@plt+0x2844>
   13ba0:	cmp	r1, #0
   13ba4:	blt	13bbc <__assert_fail@plt+0x27cc>
   13ba8:	mov	r0, fp
   13bac:	bl	113b4 <inotify_rm_watch@plt>
   13bb0:	mov	r1, r7
   13bb4:	ldr	r0, [sp, #32]
   13bb8:	bl	1728c <__assert_fail@plt+0x5e9c>
   13bbc:	ldr	r3, [sp, #96]	; 0x60
   13bc0:	cmn	r3, #1
   13bc4:	str	r3, [r7, #60]	; 0x3c
   13bc8:	beq	13708 <__assert_fail@plt+0x2318>
   13bcc:	mov	r1, r7
   13bd0:	ldr	r0, [sp, #32]
   13bd4:	bl	1728c <__assert_fail@plt+0x5e9c>
   13bd8:	cmp	r0, #0
   13bdc:	cmpne	r7, r0
   13be0:	mov	r4, r0
   13be4:	beq	13c20 <__assert_fail@plt+0x2830>
   13be8:	ldr	r3, [sp, #44]	; 0x2c
   13bec:	ldr	r3, [r3, #4]
   13bf0:	cmp	r3, #1
   13bf4:	beq	13d64 <__assert_fail@plt+0x2974>
   13bf8:	mvn	r3, #0
   13bfc:	str	r3, [r4, #60]	; 0x3c
   13c00:	ldr	r3, [r4, #48]	; 0x30
   13c04:	ldr	r0, [r4]
   13c08:	str	r3, [sp, #80]	; 0x50
   13c0c:	bl	13f60 <__assert_fail@plt+0x2b70>
   13c10:	ldr	r3, [sp, #80]	; 0x50
   13c14:	mov	r1, r0
   13c18:	mov	r0, r3
   13c1c:	bl	13f98 <__assert_fail@plt+0x2ba8>
   13c20:	mov	r1, r7
   13c24:	ldr	r0, [sp, #32]
   13c28:	bl	17234 <__assert_fail@plt+0x5e44>
   13c2c:	cmp	r0, #0
   13c30:	beq	13dec <__assert_fail@plt+0x29fc>
   13c34:	ldr	r3, [sp, #44]	; 0x2c
   13c38:	ldr	r3, [r3, #4]
   13c3c:	cmp	r3, #1
   13c40:	bne	138f8 <__assert_fail@plt+0x2508>
   13c44:	mov	r1, #0
   13c48:	mov	r0, r7
   13c4c:	bl	15214 <__assert_fail@plt+0x3e24>
   13c50:	b	138f0 <__assert_fail@plt+0x2500>
   13c54:	ldr	r2, [sp, #68]	; 0x44
   13c58:	b	13c6c <__assert_fail@plt+0x287c>
   13c5c:	ldr	r1, [sp, #60]	; 0x3c
   13c60:	add	r2, r2, #80	; 0x50
   13c64:	cmp	r1, r2
   13c68:	beq	13930 <__assert_fail@plt+0x2540>
   13c6c:	ldr	r1, [r2, #64]	; 0x40
   13c70:	cmp	r3, r1
   13c74:	bne	13c5c <__assert_fail@plt+0x286c>
   13c78:	ldr	r0, [sp, #32]
   13c7c:	bl	16e08 <__assert_fail@plt+0x5a18>
   13c80:	mov	r2, #5
   13c84:	ldr	r1, [pc, #-516]	; 13a88 <__assert_fail@plt+0x2698>
   13c88:	mov	r0, #0
   13c8c:	bl	11168 <dcgettext@plt>
   13c90:	mov	r1, #0
   13c94:	mov	r2, r0
   13c98:	mov	r0, r1
   13c9c:	bl	11204 <error@plt>
   13ca0:	bl	112c4 <__errno_location@plt>
   13ca4:	mov	r3, #0
   13ca8:	str	r3, [r0]
   13cac:	b	13508 <__assert_fail@plt+0x2118>
   13cb0:	bl	112c4 <__errno_location@plt>
   13cb4:	mov	r2, #5
   13cb8:	ldr	r1, [pc, #-564]	; 13a8c <__assert_fail@plt+0x269c>
   13cbc:	mov	r5, r0
   13cc0:	mov	r0, #0
   13cc4:	ldr	r6, [r5]
   13cc8:	bl	11168 <dcgettext@plt>
   13ccc:	mov	r7, r0
   13cd0:	ldr	r0, [r4]
   13cd4:	bl	13f60 <__assert_fail@plt+0x2b70>
   13cd8:	mov	r1, r0
   13cdc:	mov	r0, #4
   13ce0:	bl	194b8 <__assert_fail@plt+0x80c8>
   13ce4:	mov	r2, r7
   13ce8:	mov	r1, r6
   13cec:	mov	r3, r0
   13cf0:	mov	r0, #0
   13cf4:	bl	11204 <error@plt>
   13cf8:	ldr	r0, [sp, #32]
   13cfc:	bl	16e08 <__assert_fail@plt+0x5a18>
   13d00:	mov	r3, #0
   13d04:	str	r3, [r5]
   13d08:	b	13508 <__assert_fail@plt+0x2118>
   13d0c:	bl	112c4 <__errno_location@plt>
   13d10:	mov	r2, #5
   13d14:	ldr	r1, [pc, #-652]	; 13a90 <__assert_fail@plt+0x26a0>
   13d18:	b	12e34 <__assert_fail@plt+0x1a44>
   13d1c:	bl	112c4 <__errno_location@plt>
   13d20:	mov	r2, #5
   13d24:	ldr	r5, [r0]
   13d28:	cmp	r5, #28
   13d2c:	beq	134d8 <__assert_fail@plt+0x20e8>
   13d30:	ldr	r1, [pc, #-676]	; 13a94 <__assert_fail@plt+0x26a4>
   13d34:	mov	r0, #0
   13d38:	bl	11168 <dcgettext@plt>
   13d3c:	ldr	r1, [r4]
   13d40:	mov	r6, r0
   13d44:	mov	r0, #4
   13d48:	bl	194b8 <__assert_fail@plt+0x80c8>
   13d4c:	mov	r2, r6
   13d50:	mov	r1, r5
   13d54:	mov	r3, r0
   13d58:	mov	r0, #0
   13d5c:	bl	11204 <error@plt>
   13d60:	b	134f4 <__assert_fail@plt+0x2104>
   13d64:	mov	r1, #0
   13d68:	bl	15214 <__assert_fail@plt+0x3e24>
   13d6c:	b	13bf8 <__assert_fail@plt+0x2808>
   13d70:	ldr	r7, [sp, #80]	; 0x50
   13d74:	mov	r4, r0
   13d78:	mov	r2, #5
   13d7c:	ldr	r1, [pc, #-748]	; 13a98 <__assert_fail@plt+0x26a8>
   13d80:	mov	r0, r7
   13d84:	bl	11168 <dcgettext@plt>
   13d88:	mov	r1, r7
   13d8c:	mov	r2, r0
   13d90:	mov	r0, r7
   13d94:	bl	11204 <error@plt>
   13d98:	ldr	r0, [sp, #32]
   13d9c:	bl	16e08 <__assert_fail@plt+0x5a18>
   13da0:	str	r7, [r4]
   13da4:	b	13508 <__assert_fail@plt+0x2118>
   13da8:	mov	r2, #5
   13dac:	ldr	r1, [pc, #-792]	; 13a9c <__assert_fail@plt+0x26ac>
   13db0:	mov	r0, #0
   13db4:	bl	11168 <dcgettext@plt>
   13db8:	ldr	r1, [pc, #-800]	; 13aa0 <__assert_fail@plt+0x26b0>
   13dbc:	mov	r5, r0
   13dc0:	mov	r0, #4
   13dc4:	bl	194b8 <__assert_fail@plt+0x80c8>
   13dc8:	mov	r2, r5
   13dcc:	mov	r1, #0
   13dd0:	mov	r3, r0
   13dd4:	mov	r0, r4
   13dd8:	bl	11204 <error@plt>
   13ddc:	bl	112c4 <__errno_location@plt>
   13de0:	mov	r2, #5
   13de4:	ldr	r1, [pc, #-840]	; 13aa4 <__assert_fail@plt+0x26b4>
   13de8:	b	12e34 <__assert_fail@plt+0x1a44>
   13dec:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   13df0:	bl	112c4 <__errno_location@plt>
   13df4:	mov	r2, #5
   13df8:	ldr	r1, [pc, #-856]	; 13aa8 <__assert_fail@plt+0x26b8>
   13dfc:	ldr	r5, [r0]
   13e00:	mov	r0, r4
   13e04:	bl	11168 <dcgettext@plt>
   13e08:	mov	r4, r0
   13e0c:	ldr	r0, [r6, #4]
   13e10:	bl	19760 <__assert_fail@plt+0x8370>
   13e14:	mov	r1, r5
   13e18:	mov	r3, r4
   13e1c:	ldr	r2, [pc, #-888]	; 13aac <__assert_fail@plt+0x26bc>
   13e20:	str	r0, [sp]
   13e24:	mov	r0, #1
   13e28:	bl	11204 <error@plt>
   13e2c:	bl	11174 <__stack_chk_fail@plt>
   13e30:	ldr	r3, [pc, #-904]	; 13ab0 <__assert_fail@plt+0x26c0>
   13e34:	ldr	r2, [pc, #-904]	; 13ab4 <__assert_fail@plt+0x26c4>
   13e38:	ldr	r1, [pc, #-904]	; 13ab8 <__assert_fail@plt+0x26c8>
   13e3c:	ldr	r0, [pc, #-904]	; 13abc <__assert_fail@plt+0x26cc>
   13e40:	bl	113f0 <__assert_fail@plt>
   13e44:	mov	fp, #0
   13e48:	mov	lr, #0
   13e4c:	pop	{r1}		; (ldr r1, [sp], #4)
   13e50:	mov	r2, sp
   13e54:	push	{r2}		; (str r2, [sp, #-4]!)
   13e58:	push	{r0}		; (str r0, [sp, #-4]!)
   13e5c:	ldr	ip, [pc, #16]	; 13e74 <__assert_fail@plt+0x2a84>
   13e60:	push	{ip}		; (str ip, [sp, #-4]!)
   13e64:	ldr	r0, [pc, #12]	; 13e78 <__assert_fail@plt+0x2a88>
   13e68:	ldr	r3, [pc, #12]	; 13e7c <__assert_fail@plt+0x2a8c>
   13e6c:	bl	11234 <__libc_start_main@plt>
   13e70:	bl	113cc <abort@plt>
   13e74:	muleq	r1, r4, r6
   13e78:	andeq	r1, r1, r0, lsl #8
   13e7c:	andeq	fp, r1, r4, lsr r6
   13e80:	ldr	r3, [pc, #20]	; 13e9c <__assert_fail@plt+0x2aac>
   13e84:	ldr	r2, [pc, #20]	; 13ea0 <__assert_fail@plt+0x2ab0>
   13e88:	add	r3, pc, r3
   13e8c:	ldr	r2, [r3, r2]
   13e90:	cmp	r2, #0
   13e94:	bxeq	lr
   13e98:	b	1124c <__gmon_start__@plt>
   13e9c:	andeq	sl, r1, r0, ror r1
   13ea0:	andeq	r0, r0, ip, lsr #2
   13ea4:	ldr	r0, [pc, #24]	; 13ec4 <__assert_fail@plt+0x2ad4>
   13ea8:	ldr	r3, [pc, #24]	; 13ec8 <__assert_fail@plt+0x2ad8>
   13eac:	cmp	r3, r0
   13eb0:	bxeq	lr
   13eb4:	ldr	r3, [pc, #16]	; 13ecc <__assert_fail@plt+0x2adc>
   13eb8:	cmp	r3, #0
   13ebc:	bxeq	lr
   13ec0:	bx	r3
   13ec4:	muleq	r2, ip, r1
   13ec8:	muleq	r2, ip, r1
   13ecc:	andeq	r0, r0, r0
   13ed0:	ldr	r0, [pc, #36]	; 13efc <__assert_fail@plt+0x2b0c>
   13ed4:	ldr	r1, [pc, #36]	; 13f00 <__assert_fail@plt+0x2b10>
   13ed8:	sub	r1, r1, r0
   13edc:	asr	r1, r1, #2
   13ee0:	add	r1, r1, r1, lsr #31
   13ee4:	asrs	r1, r1, #1
   13ee8:	bxeq	lr
   13eec:	ldr	r3, [pc, #16]	; 13f04 <__assert_fail@plt+0x2b14>
   13ef0:	cmp	r3, #0
   13ef4:	bxeq	lr
   13ef8:	bx	r3
   13efc:	muleq	r2, ip, r1
   13f00:	muleq	r2, ip, r1
   13f04:	andeq	r0, r0, r0
   13f08:	push	{r4, lr}
   13f0c:	ldr	r4, [pc, #24]	; 13f2c <__assert_fail@plt+0x2b3c>
   13f10:	ldrb	r3, [r4]
   13f14:	cmp	r3, #0
   13f18:	popne	{r4, pc}
   13f1c:	bl	13ea4 <__assert_fail@plt+0x2ab4>
   13f20:	mov	r3, #1
   13f24:	strb	r3, [r4]
   13f28:	pop	{r4, pc}
   13f2c:			; <UNDEFINED> instruction: 0x0002e1bc
   13f30:	b	13ed0 <__assert_fail@plt+0x2ae0>
   13f34:	push	{r4, lr}
   13f38:	ldr	r0, [r0, #60]	; 0x3c
   13f3c:	bl	1b3cc <__assert_fail@plt+0x9fdc>
   13f40:	mov	r0, r1
   13f44:	pop	{r4, pc}
   13f48:	ldr	r0, [r0, #60]	; 0x3c
   13f4c:	ldr	r3, [r1, #60]	; 0x3c
   13f50:	sub	r0, r0, r3
   13f54:	clz	r0, r0
   13f58:	lsr	r0, r0, #5
   13f5c:	bx	lr
   13f60:	push	{r4, lr}
   13f64:	mov	r4, r0
   13f68:	ldr	r1, [pc, #32]	; 13f90 <__assert_fail@plt+0x2ba0>
   13f6c:	bl	110cc <strcmp@plt>
   13f70:	cmp	r0, #0
   13f74:	beq	13f80 <__assert_fail@plt+0x2b90>
   13f78:	mov	r0, r4
   13f7c:	pop	{r4, pc}
   13f80:	mov	r2, #5
   13f84:	ldr	r1, [pc, #8]	; 13f94 <__assert_fail@plt+0x2ba4>
   13f88:	pop	{r4, lr}
   13f8c:	b	11168 <dcgettext@plt>
   13f90:	andeq	fp, r1, ip, lsl r8
   13f94:	andeq	fp, r1, r0, lsr #16
   13f98:	add	r2, r0, #1
   13f9c:	cmp	r2, #1
   13fa0:	bxls	lr
   13fa4:	push	{r4, r5, r6, r7, lr}
   13fa8:	sub	sp, sp, #12
   13fac:	mov	r4, r0
   13fb0:	mov	r5, r1
   13fb4:	bl	113d8 <close@plt>
   13fb8:	cmp	r0, #0
   13fbc:	bne	13fc8 <__assert_fail@plt+0x2bd8>
   13fc0:	add	sp, sp, #12
   13fc4:	pop	{r4, r5, r6, r7, pc}
   13fc8:	bl	112c4 <__errno_location@plt>
   13fcc:	mov	r2, #5
   13fd0:	ldr	r1, [pc, #56]	; 14010 <__assert_fail@plt+0x2c20>
   13fd4:	ldr	r7, [r0]
   13fd8:	mov	r0, #0
   13fdc:	bl	11168 <dcgettext@plt>
   13fe0:	mov	r1, r5
   13fe4:	mov	r6, r0
   13fe8:	mov	r0, #4
   13fec:	bl	194b8 <__assert_fail@plt+0x80c8>
   13ff0:	mov	r1, r7
   13ff4:	mov	r2, r6
   13ff8:	str	r4, [sp]
   13ffc:	mov	r3, r0
   14000:	mov	r0, #0
   14004:	bl	11204 <error@plt>
   14008:	add	sp, sp, #12
   1400c:	pop	{r4, r5, r6, r7, pc}
   14010:	andeq	fp, r1, r0, lsr r8
   14014:	push	{r4, r5, r6, lr}
   14018:	subs	r4, r1, #0
   1401c:	popeq	{r4, r5, r6, pc}
   14020:	ldr	r5, [pc, #88]	; 14080 <__assert_fail@plt+0x2c90>
   14024:	mov	r2, r4
   14028:	mov	r1, #1
   1402c:	ldr	r3, [r5]
   14030:	bl	11144 <fwrite_unlocked@plt>
   14034:	cmp	r4, r0
   14038:	popls	{r4, r5, r6, pc}
   1403c:	ldr	r0, [r5]
   14040:	bl	11384 <clearerr_unlocked@plt>
   14044:	bl	112c4 <__errno_location@plt>
   14048:	mov	r2, #5
   1404c:	ldr	r1, [pc, #48]	; 14084 <__assert_fail@plt+0x2c94>
   14050:	ldr	r4, [r0]
   14054:	mov	r0, #0
   14058:	bl	11168 <dcgettext@plt>
   1405c:	ldr	r1, [pc, #36]	; 14088 <__assert_fail@plt+0x2c98>
   14060:	mov	r5, r0
   14064:	mov	r0, #4
   14068:	bl	194b8 <__assert_fail@plt+0x80c8>
   1406c:	mov	r2, r5
   14070:	mov	r1, r4
   14074:	mov	r3, r0
   14078:	mov	r0, #1
   1407c:	bl	11204 <error@plt>
   14080:			; <UNDEFINED> instruction: 0x0002e1b4
   14084:	andeq	fp, r1, r4, asr #16
   14088:	andeq	fp, r1, r8, asr r8
   1408c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14090:	sub	sp, sp, #8192	; 0x2000
   14094:	ldr	r9, [pc, #312]	; 141d4 <__assert_fail@plt+0x2de4>
   14098:	sub	sp, sp, #20
   1409c:	mov	r4, r2
   140a0:	mov	r5, r3
   140a4:	add	r2, sp, #8192	; 0x2000
   140a8:	orrs	r3, r4, r5
   140ac:	add	r2, r2, #12
   140b0:	ldr	r3, [r9]
   140b4:	str	r0, [sp, #4]
   140b8:	str	r3, [r2]
   140bc:	add	r3, sp, #8192	; 0x2000
   140c0:	add	r3, r3, #56	; 0x38
   140c4:	str	r1, [sp]
   140c8:	ldr	r8, [r3]
   140cc:	beq	1414c <__assert_fail@plt+0x2d5c>
   140d0:	mov	r2, #8192	; 0x2000
   140d4:	add	r1, sp, #12
   140d8:	ldr	r0, [sp]
   140dc:	bl	19778 <__assert_fail@plt+0x8388>
   140e0:	cmp	r0, #0
   140e4:	beq	14184 <__assert_fail@plt+0x2d94>
   140e8:	cmn	r0, #1
   140ec:	beq	1418c <__assert_fail@plt+0x2d9c>
   140f0:	add	r1, sp, #12
   140f4:	ldrd	r2, [r8]
   140f8:	add	r6, r1, r0
   140fc:	ldr	r1, [pc, #212]	; 141d8 <__assert_fail@plt+0x2de8>
   14100:	adds	sl, r2, r0
   14104:	adc	fp, r3, #0
   14108:	ldrb	r7, [r1]
   1410c:	mov	r2, sl
   14110:	mov	r3, fp
   14114:	add	r0, sp, #12
   14118:	strd	r2, [r8]
   1411c:	sub	r2, r6, r0
   14120:	mov	r1, r7
   14124:	bl	1130c <memchr@plt>
   14128:	cmp	r0, #0
   1412c:	beq	140d0 <__assert_fail@plt+0x2ce0>
   14130:	subs	r4, r4, #1
   14134:	sbc	r5, r5, #0
   14138:	orrs	r3, r4, r5
   1413c:	add	r0, r0, #1
   14140:	bne	1411c <__assert_fail@plt+0x2d2c>
   14144:	cmp	r6, r0
   14148:	bhi	14174 <__assert_fail@plt+0x2d84>
   1414c:	mov	r0, #0
   14150:	add	r3, sp, #8192	; 0x2000
   14154:	add	r3, r3, #12
   14158:	ldr	r2, [r3]
   1415c:	ldr	r3, [r9]
   14160:	cmp	r2, r3
   14164:	bne	141d0 <__assert_fail@plt+0x2de0>
   14168:	add	sp, sp, #8192	; 0x2000
   1416c:	add	sp, sp, #20
   14170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14174:	sub	r1, r6, r0
   14178:	bl	14014 <__assert_fail@plt+0x2c24>
   1417c:	mov	r0, #0
   14180:	b	14150 <__assert_fail@plt+0x2d60>
   14184:	mvn	r0, #0
   14188:	b	14150 <__assert_fail@plt+0x2d60>
   1418c:	bl	112c4 <__errno_location@plt>
   14190:	mov	r2, #5
   14194:	ldr	r1, [pc, #64]	; 141dc <__assert_fail@plt+0x2dec>
   14198:	ldr	r4, [r0]
   1419c:	mov	r0, #0
   141a0:	bl	11168 <dcgettext@plt>
   141a4:	ldr	r1, [sp, #4]
   141a8:	mov	r5, r0
   141ac:	mov	r0, #4
   141b0:	bl	194b8 <__assert_fail@plt+0x80c8>
   141b4:	mov	r2, r5
   141b8:	mov	r1, r4
   141bc:	mov	r3, r0
   141c0:	mov	r0, #0
   141c4:	bl	11204 <error@plt>
   141c8:	mov	r0, #1
   141cc:	b	14150 <__assert_fail@plt+0x2d60>
   141d0:	bl	11174 <__stack_chk_fail@plt>
   141d4:	andeq	sp, r2, r8, lsl #30
   141d8:	andeq	lr, r2, r0, asr #3
   141dc:	andeq	fp, r1, r8, ror #16
   141e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e4:	sub	sp, sp, #8192	; 0x2000
   141e8:	sub	sp, sp, #20
   141ec:	mov	sl, r2
   141f0:	add	r2, sp, #8192	; 0x2000
   141f4:	add	r2, r2, #56	; 0x38
   141f8:	ldr	r3, [pc, #392]	; 14388 <__assert_fail@plt+0x2f98>
   141fc:	ldrd	r6, [r2]
   14200:	add	r2, sp, #8192	; 0x2000
   14204:	ldr	r3, [r3]
   14208:	add	r2, r2, #12
   1420c:	mov	r5, #0
   14210:	ldr	fp, [pc, #372]	; 1438c <__assert_fail@plt+0x2f9c>
   14214:	mov	r9, r0
   14218:	str	r1, [sp, #4]
   1421c:	str	r3, [r2]
   14220:	str	r5, [sp]
   14224:	b	142e0 <__assert_fail@plt+0x2ef0>
   14228:	cmp	r0, #0
   1422c:	beq	14350 <__assert_fail@plt+0x2f60>
   14230:	cmp	r9, #0
   14234:	beq	14268 <__assert_fail@plt+0x2e78>
   14238:	ldrb	r2, [fp]
   1423c:	ldr	ip, [pc, #332]	; 14390 <__assert_fail@plt+0x2fa0>
   14240:	ldr	r0, [pc, #332]	; 14394 <__assert_fail@plt+0x2fa4>
   14244:	cmp	r2, #0
   14248:	moveq	r0, ip
   1424c:	ldr	r3, [sp, #4]
   14250:	mov	r2, r0
   14254:	ldr	r1, [pc, #316]	; 14398 <__assert_fail@plt+0x2fa8>
   14258:	mov	r0, #1
   1425c:	bl	112e8 <__printf_chk@plt>
   14260:	mov	r3, #0
   14264:	strb	r3, [fp]
   14268:	mov	r1, r4
   1426c:	add	r0, sp, #12
   14270:	bl	14014 <__assert_fail@plt+0x2c24>
   14274:	ldr	r2, [sp]
   14278:	adds	r5, r5, r4
   1427c:	mov	r3, #0
   14280:	adc	r2, r2, r3
   14284:	str	r2, [sp]
   14288:	add	r2, sp, #8192	; 0x2000
   1428c:	add	r2, r2, #56	; 0x38
   14290:	ldrd	r0, [r2]
   14294:	mvn	r9, #0
   14298:	mvn	r8, #0
   1429c:	cmp	r1, r9
   142a0:	cmpeq	r0, r8
   142a4:	beq	142dc <__assert_fail@plt+0x2eec>
   142a8:	subs	r6, r6, r4
   142ac:	ldrd	r8, [r2]
   142b0:	sbc	r7, r7, r3
   142b4:	orrs	r3, r6, r7
   142b8:	mvn	r1, #0
   142bc:	moveq	r3, #1
   142c0:	movne	r3, #0
   142c4:	mvn	r0, #1
   142c8:	cmp	r9, r1
   142cc:	cmpeq	r8, r0
   142d0:	moveq	r3, #1
   142d4:	cmp	r3, #0
   142d8:	bne	14350 <__assert_fail@plt+0x2f60>
   142dc:	mov	r9, #0
   142e0:	cmp	r7, #0
   142e4:	cmpeq	r6, #8192	; 0x2000
   142e8:	mov	r2, r6
   142ec:	add	r1, sp, #12
   142f0:	movhi	r2, #8192	; 0x2000
   142f4:	mov	r0, sl
   142f8:	bl	19778 <__assert_fail@plt+0x8388>
   142fc:	cmn	r0, #1
   14300:	mov	r4, r0
   14304:	bne	14228 <__assert_fail@plt+0x2e38>
   14308:	bl	112c4 <__errno_location@plt>
   1430c:	ldr	r8, [sp]
   14310:	ldr	r4, [r0]
   14314:	cmp	r4, #11
   14318:	beq	14354 <__assert_fail@plt+0x2f64>
   1431c:	mov	r2, #5
   14320:	ldr	r1, [pc, #116]	; 1439c <__assert_fail@plt+0x2fac>
   14324:	mov	r0, #0
   14328:	bl	11168 <dcgettext@plt>
   1432c:	ldr	r1, [sp, #4]
   14330:	mov	r5, r0
   14334:	mov	r0, #4
   14338:	bl	194b8 <__assert_fail@plt+0x80c8>
   1433c:	mov	r2, r5
   14340:	mov	r1, r4
   14344:	mov	r3, r0
   14348:	mov	r0, #1
   1434c:	bl	11204 <error@plt>
   14350:	ldr	r8, [sp]
   14354:	add	r3, sp, #8192	; 0x2000
   14358:	add	r3, r3, #12
   1435c:	ldr	r2, [r3]
   14360:	ldr	r3, [pc, #32]	; 14388 <__assert_fail@plt+0x2f98>
   14364:	mov	r0, r5
   14368:	mov	r1, r8
   1436c:	ldr	r3, [r3]
   14370:	cmp	r2, r3
   14374:	bne	14384 <__assert_fail@plt+0x2f94>
   14378:	add	sp, sp, #8192	; 0x2000
   1437c:	add	sp, sp, #20
   14380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14384:	bl	11174 <__stack_chk_fail@plt>
   14388:	andeq	sp, r2, r8, lsl #30
   1438c:	andeq	lr, r2, r8, lsr r1
   14390:	andeq	ip, r1, r8, lsl #6
   14394:	andeq	ip, r1, r4, lsl ip
   14398:	andeq	fp, r1, ip, ror r8
   1439c:	andeq	fp, r1, r8, ror #16
   143a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   143a4:	sub	sp, sp, #8192	; 0x2000
   143a8:	ldr	r7, [pc, #280]	; 144c8 <__assert_fail@plt+0x30d8>
   143ac:	sub	sp, sp, #12
   143b0:	mov	r4, r2
   143b4:	mov	r5, r3
   143b8:	add	r2, sp, #8192	; 0x2000
   143bc:	orrs	r3, r4, r5
   143c0:	add	r2, r2, #4
   143c4:	ldr	r3, [r7]
   143c8:	movne	r8, r0
   143cc:	str	r3, [r2]
   143d0:	add	r3, sp, #8192	; 0x2000
   143d4:	add	r3, r3, #40	; 0x28
   143d8:	movne	r6, r1
   143dc:	ldr	r9, [r3]
   143e0:	bne	14424 <__assert_fail@plt+0x3034>
   143e4:	b	14458 <__assert_fail@plt+0x3068>
   143e8:	cmn	r0, #1
   143ec:	beq	14480 <__assert_fail@plt+0x3090>
   143f0:	ldr	r1, [r9]
   143f4:	ldr	ip, [r9, #4]
   143f8:	adds	r1, r1, r0
   143fc:	mov	r3, #0
   14400:	adc	ip, ip, r3
   14404:	cmp	r3, r5
   14408:	cmpeq	r0, r4
   1440c:	stm	r9, {r1, ip}
   14410:	bhi	14444 <__assert_fail@plt+0x3054>
   14414:	subs	r4, r4, r0
   14418:	sbc	r5, r5, r3
   1441c:	orrs	r3, r4, r5
   14420:	beq	14458 <__assert_fail@plt+0x3068>
   14424:	mov	r2, #8192	; 0x2000
   14428:	add	r1, sp, #4
   1442c:	mov	r0, r6
   14430:	bl	19778 <__assert_fail@plt+0x8388>
   14434:	cmp	r0, #0
   14438:	bne	143e8 <__assert_fail@plt+0x2ff8>
   1443c:	mvn	r0, #0
   14440:	b	1445c <__assert_fail@plt+0x306c>
   14444:	subs	r1, r0, r4
   14448:	beq	14458 <__assert_fail@plt+0x3068>
   1444c:	add	r3, sp, #4
   14450:	add	r0, r3, r4
   14454:	bl	14014 <__assert_fail@plt+0x2c24>
   14458:	mov	r0, #0
   1445c:	add	r3, sp, #8192	; 0x2000
   14460:	add	r3, r3, #4
   14464:	ldr	r2, [r3]
   14468:	ldr	r3, [r7]
   1446c:	cmp	r2, r3
   14470:	bne	144c4 <__assert_fail@plt+0x30d4>
   14474:	add	sp, sp, #8192	; 0x2000
   14478:	add	sp, sp, #12
   1447c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14480:	bl	112c4 <__errno_location@plt>
   14484:	mov	r2, #5
   14488:	ldr	r1, [pc, #60]	; 144cc <__assert_fail@plt+0x30dc>
   1448c:	ldr	r4, [r0]
   14490:	mov	r0, #0
   14494:	bl	11168 <dcgettext@plt>
   14498:	mov	r1, r8
   1449c:	mov	r5, r0
   144a0:	mov	r0, #4
   144a4:	bl	194b8 <__assert_fail@plt+0x80c8>
   144a8:	mov	r2, r5
   144ac:	mov	r1, r4
   144b0:	mov	r3, r0
   144b4:	mov	r0, #0
   144b8:	bl	11204 <error@plt>
   144bc:	mov	r0, #1
   144c0:	b	1445c <__assert_fail@plt+0x306c>
   144c4:	bl	11174 <__stack_chk_fail@plt>
   144c8:	andeq	sp, r2, r8, lsl #30
   144cc:	andeq	fp, r1, r8, ror #16
   144d0:	push	{r4, r5, r6, r7, r8, lr}
   144d4:	sub	sp, sp, #40	; 0x28
   144d8:	ldr	r4, [pc, #176]	; 14590 <__assert_fail@plt+0x31a0>
   144dc:	ldr	r5, [sp, #64]	; 0x40
   144e0:	mov	r7, r3
   144e4:	ldr	r1, [r4]
   144e8:	str	r5, [sp]
   144ec:	mov	r6, r2
   144f0:	str	r1, [sp, #36]	; 0x24
   144f4:	ldr	r8, [sp, #68]	; 0x44
   144f8:	bl	111d4 <lseek64@plt>
   144fc:	cmp	r0, #0
   14500:	sbcs	r3, r1, #0
   14504:	blt	14520 <__assert_fail@plt+0x3130>
   14508:	ldr	r2, [sp, #36]	; 0x24
   1450c:	ldr	r3, [r4]
   14510:	cmp	r2, r3
   14514:	bne	1458c <__assert_fail@plt+0x319c>
   14518:	add	sp, sp, #40	; 0x28
   1451c:	pop	{r4, r5, r6, r7, r8, pc}
   14520:	mov	r1, r7
   14524:	add	r2, sp, #12
   14528:	mov	r0, r6
   1452c:	bl	173b4 <__assert_fail@plt+0x5fc4>
   14530:	mov	r4, r0
   14534:	bl	112c4 <__errno_location@plt>
   14538:	cmp	r5, #1
   1453c:	mov	r2, #5
   14540:	ldrne	r1, [pc, #76]	; 14594 <__assert_fail@plt+0x31a4>
   14544:	ldreq	r1, [pc, #76]	; 14598 <__assert_fail@plt+0x31a8>
   14548:	mov	r3, r0
   1454c:	mov	r0, #0
   14550:	ldr	r5, [r3]
   14554:	bl	11168 <dcgettext@plt>
   14558:	mov	r2, r8
   1455c:	mov	r1, #3
   14560:	mov	r6, r0
   14564:	mov	r0, #0
   14568:	bl	19594 <__assert_fail@plt+0x81a4>
   1456c:	mov	r2, r6
   14570:	mov	r1, r5
   14574:	str	r4, [sp]
   14578:	mov	r3, r0
   1457c:	mov	r0, #0
   14580:	bl	11204 <error@plt>
   14584:	mov	r0, #1
   14588:	bl	1127c <exit@plt>
   1458c:	bl	11174 <__stack_chk_fail@plt>
   14590:	andeq	sp, r2, r8, lsl #30
   14594:	andeq	fp, r1, ip, lsl #17
   14598:	andeq	fp, r1, ip, lsr #17
   1459c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a0:	mov	r4, r2
   145a4:	mov	r5, r3
   145a8:	sub	sp, sp, #8192	; 0x2000
   145ac:	orrs	r3, r4, r5
   145b0:	ldr	r3, [pc, #824]	; 148f0 <__assert_fail@plt+0x3500>
   145b4:	sub	sp, sp, #44	; 0x2c
   145b8:	add	r2, sp, #8192	; 0x2000
   145bc:	ldr	r3, [r3]
   145c0:	add	r2, r2, #36	; 0x24
   145c4:	str	r3, [r2]
   145c8:	add	r3, sp, #8256	; 0x2040
   145cc:	add	r3, r3, #24
   145d0:	str	r0, [sp, #12]
   145d4:	ldr	r3, [r3]
   145d8:	str	r1, [sp, #8]
   145dc:	str	r3, [sp, #16]
   145e0:	add	r3, sp, #8256	; 0x2040
   145e4:	add	r3, r3, #28
   145e8:	ldr	r3, [r3]
   145ec:	str	r3, [sp, #20]
   145f0:	add	r3, sp, #8256	; 0x2040
   145f4:	add	r3, r3, #32
   145f8:	ldr	r9, [r3]
   145fc:	beq	14850 <__assert_fail@plt+0x3460>
   14600:	add	r3, sp, #8256	; 0x2040
   14604:	add	r3, r3, #16
   14608:	ldr	r2, [sp, #16]
   1460c:	ldr	r3, [r3]
   14610:	mov	r1, #0
   14614:	subs	r0, r2, r3
   14618:	add	r3, sp, #8256	; 0x2040
   1461c:	add	r3, r3, #20
   14620:	ldr	r2, [sp, #20]
   14624:	ldr	r3, [r3]
   14628:	mov	r7, #0
   1462c:	sbc	r3, r2, r3
   14630:	ldr	r2, [sp, #16]
   14634:	asr	ip, r3, #31
   14638:	eor	r0, r0, ip
   1463c:	subs	r3, r0, ip
   14640:	str	r7, [sp]
   14644:	lsl	r3, r3, #19
   14648:	ldr	r0, [sp, #8]
   1464c:	lsr	r3, r3, #19
   14650:	eor	r3, r3, ip
   14654:	subs	r3, r3, ip
   14658:	cmp	r3, r1
   1465c:	mov	r8, r3
   14660:	moveq	r3, #8192	; 0x2000
   14664:	moveq	r8, r3
   14668:	subs	sl, r2, r3
   1466c:	ldr	r3, [sp, #20]
   14670:	mov	r2, sl
   14674:	sbc	fp, r3, r1
   14678:	ldr	r3, [sp, #12]
   1467c:	add	r6, sp, #36	; 0x24
   14680:	str	r3, [sp, #4]
   14684:	mov	r3, fp
   14688:	bl	144d0 <__assert_fail@plt+0x30e0>
   1468c:	mov	r2, r8
   14690:	mov	r1, r6
   14694:	ldr	r0, [sp, #8]
   14698:	bl	19778 <__assert_fail@plt+0x8388>
   1469c:	cmn	r0, #1
   146a0:	mov	r8, r0
   146a4:	beq	14858 <__assert_fail@plt+0x3468>
   146a8:	adds	r2, r0, sl
   146ac:	mov	r3, #0
   146b0:	str	r3, [sp, #28]
   146b4:	adc	r3, r3, fp
   146b8:	cmp	r0, #0
   146bc:	str	r0, [sp, #24]
   146c0:	strd	r2, [r9]
   146c4:	bne	14820 <__assert_fail@plt+0x3430>
   146c8:	add	r3, sp, #8256	; 0x2040
   146cc:	add	r3, r3, #16
   146d0:	ldrd	r2, [r3]
   146d4:	cmp	fp, r3
   146d8:	cmpeq	sl, r2
   146dc:	beq	14898 <__assert_fail@plt+0x34a8>
   146e0:	subs	sl, sl, #8192	; 0x2000
   146e4:	ldr	r8, [sp, #8]
   146e8:	ldr	r3, [sp, #12]
   146ec:	sbc	fp, fp, #0
   146f0:	mov	r7, #0
   146f4:	str	r3, [sp, #4]
   146f8:	mov	r2, sl
   146fc:	mov	r3, fp
   14700:	mov	r0, r8
   14704:	str	r7, [sp]
   14708:	bl	144d0 <__assert_fail@plt+0x30e0>
   1470c:	mov	r0, r8
   14710:	mov	r2, #8192	; 0x2000
   14714:	mov	r1, r6
   14718:	bl	19778 <__assert_fail@plt+0x8388>
   1471c:	cmn	r0, #1
   14720:	mov	r8, r0
   14724:	beq	14858 <__assert_fail@plt+0x3468>
   14728:	adds	r2, r0, sl
   1472c:	mov	r3, #0
   14730:	str	r3, [sp, #28]
   14734:	adc	r3, r3, fp
   14738:	cmp	r0, #0
   1473c:	str	r0, [sp, #24]
   14740:	strd	r2, [r9]
   14744:	beq	14850 <__assert_fail@plt+0x3460>
   14748:	ldr	r3, [pc, #420]	; 148f4 <__assert_fail@plt+0x3504>
   1474c:	ldrb	r7, [r3]
   14750:	mov	r2, r8
   14754:	b	14768 <__assert_fail@plt+0x3378>
   14758:	cmp	r2, #0
   1475c:	mov	r4, r1
   14760:	mov	r5, r3
   14764:	beq	146c8 <__assert_fail@plt+0x32d8>
   14768:	mov	r1, r7
   1476c:	mov	r0, r6
   14770:	bl	112ac <memrchr@plt>
   14774:	cmp	r0, #0
   14778:	beq	146c8 <__assert_fail@plt+0x32d8>
   1477c:	subs	r1, r4, #1
   14780:	sbc	r3, r5, #0
   14784:	orrs	r2, r4, r5
   14788:	sub	r2, r0, r6
   1478c:	bne	14758 <__assert_fail@plt+0x3368>
   14790:	sub	r8, r8, #1
   14794:	cmp	r8, r2
   14798:	beq	147a8 <__assert_fail@plt+0x33b8>
   1479c:	sub	r1, r8, r2
   147a0:	add	r0, r0, #1
   147a4:	bl	14014 <__assert_fail@plt+0x2c24>
   147a8:	ldr	r3, [sp, #24]
   147ac:	ldr	r2, [sp, #28]
   147b0:	adds	r3, r3, sl
   147b4:	adc	fp, r2, fp
   147b8:	ldr	r2, [sp, #16]
   147bc:	ldr	r1, [sp, #12]
   147c0:	subs	r3, r2, r3
   147c4:	ldr	r2, [sp, #20]
   147c8:	mov	r0, #0
   147cc:	sbc	fp, r2, fp
   147d0:	ldr	r2, [sp, #8]
   147d4:	stm	sp, {r3, fp}
   147d8:	bl	141e0 <__assert_fail@plt+0x2df0>
   147dc:	ldr	r3, [r9]
   147e0:	ldr	r2, [r9, #4]
   147e4:	mov	r7, #1
   147e8:	adds	r0, r3, r0
   147ec:	adc	r1, r2, r1
   147f0:	strd	r0, [r9]
   147f4:	add	r3, sp, #8192	; 0x2000
   147f8:	add	r3, r3, #36	; 0x24
   147fc:	ldr	r2, [r3]
   14800:	ldr	r3, [pc, #232]	; 148f0 <__assert_fail@plt+0x3500>
   14804:	mov	r0, r7
   14808:	ldr	r3, [r3]
   1480c:	cmp	r2, r3
   14810:	bne	148ec <__assert_fail@plt+0x34fc>
   14814:	add	sp, sp, #8192	; 0x2000
   14818:	add	sp, sp, #44	; 0x2c
   1481c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14820:	ldr	r3, [pc, #204]	; 148f4 <__assert_fail@plt+0x3504>
   14824:	add	r2, sp, #40	; 0x28
   14828:	add	r2, r2, r0
   1482c:	ldrb	r1, [r3]
   14830:	ldrb	r2, [r2, #-5]
   14834:	cmp	r2, r1
   14838:	beq	14844 <__assert_fail@plt+0x3454>
   1483c:	subs	r4, r4, #1
   14840:	sbc	r5, r5, #0
   14844:	cmp	r8, #0
   14848:	bne	1474c <__assert_fail@plt+0x335c>
   1484c:	b	146c8 <__assert_fail@plt+0x32d8>
   14850:	mov	r7, #1
   14854:	b	147f4 <__assert_fail@plt+0x3404>
   14858:	bl	112c4 <__errno_location@plt>
   1485c:	mov	r2, #5
   14860:	ldr	r1, [pc, #144]	; 148f8 <__assert_fail@plt+0x3508>
   14864:	ldr	r4, [r0]
   14868:	mov	r0, r7
   1486c:	bl	11168 <dcgettext@plt>
   14870:	ldr	r1, [sp, #12]
   14874:	mov	r5, r0
   14878:	mov	r0, #4
   1487c:	bl	194b8 <__assert_fail@plt+0x80c8>
   14880:	mov	r2, r5
   14884:	mov	r1, r4
   14888:	mov	r3, r0
   1488c:	mov	r0, r7
   14890:	bl	11204 <error@plt>
   14894:	b	147f4 <__assert_fail@plt+0x3404>
   14898:	ldr	r5, [sp, #12]
   1489c:	ldr	r6, [sp, #8]
   148a0:	mov	r4, #0
   148a4:	mov	r2, sl
   148a8:	mov	r3, fp
   148ac:	strd	r4, [sp]
   148b0:	mov	r0, r6
   148b4:	bl	144d0 <__assert_fail@plt+0x30e0>
   148b8:	ldr	r3, [sp, #16]
   148bc:	mov	r0, r4
   148c0:	str	r3, [sp]
   148c4:	ldr	r3, [sp, #20]
   148c8:	mov	r2, r6
   148cc:	str	r3, [sp, #4]
   148d0:	mov	r1, r5
   148d4:	bl	141e0 <__assert_fail@plt+0x2df0>
   148d8:	mov	r7, #1
   148dc:	adds	r0, sl, r0
   148e0:	adc	r1, fp, r1
   148e4:	strd	r0, [r9]
   148e8:	b	147f4 <__assert_fail@plt+0x3404>
   148ec:	bl	11174 <__stack_chk_fail@plt>
   148f0:	andeq	sp, r2, r8, lsl #30
   148f4:	andeq	lr, r2, r0, asr #3
   148f8:	andeq	fp, r1, r8, ror #16
   148fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14900:	sub	sp, sp, #120	; 0x78
   14904:	ldr	r5, [pc, #444]	; 14ac8 <__assert_fail@plt+0x36d8>
   14908:	ldr	r2, [r0, #48]	; 0x30
   1490c:	ldr	r3, [r5]
   14910:	cmn	r2, #1
   14914:	str	r3, [sp, #116]	; 0x74
   14918:	beq	149ac <__assert_fail@plt+0x35bc>
   1491c:	mov	r4, r0
   14920:	ldr	r0, [r0]
   14924:	mov	r6, r1
   14928:	bl	13f60 <__assert_fail@plt+0x2b70>
   1492c:	add	r2, sp, #8
   14930:	ldr	r1, [r4, #48]	; 0x30
   14934:	mov	r7, r0
   14938:	mov	r0, #3
   1493c:	bl	111bc <__fxstat64@plt>
   14940:	subs	sl, r0, #0
   14944:	bne	14a44 <__assert_fail@plt+0x3654>
   14948:	ldr	r3, [r4, #40]	; 0x28
   1494c:	and	r3, r3, #61440	; 0xf000
   14950:	cmp	r3, #32768	; 0x8000
   14954:	beq	149c4 <__assert_fail@plt+0x35d4>
   14958:	ldr	r3, [pc, #364]	; 14acc <__assert_fail@plt+0x36dc>
   1495c:	ldrb	r0, [r3, #1]
   14960:	cmp	r0, #0
   14964:	beq	14974 <__assert_fail@plt+0x3584>
   14968:	ldr	r0, [r6]
   1496c:	subs	r0, r0, r4
   14970:	movne	r0, #1
   14974:	mvn	r3, #0
   14978:	mvn	r2, #0
   1497c:	mov	r1, r7
   14980:	strd	r2, [sp]
   14984:	ldr	r2, [r4, #48]	; 0x30
   14988:	bl	141e0 <__assert_fail@plt+0x2df0>
   1498c:	ldr	r3, [r4, #8]
   14990:	ldr	r2, [r4, #12]
   14994:	adds	r3, r3, r0
   14998:	adc	r2, r2, r1
   1499c:	orrs	r1, r0, r1
   149a0:	str	r3, [r4, #8]
   149a4:	str	r2, [r4, #12]
   149a8:	bne	14a04 <__assert_fail@plt+0x3614>
   149ac:	ldr	r2, [sp, #116]	; 0x74
   149b0:	ldr	r3, [r5]
   149b4:	cmp	r2, r3
   149b8:	bne	14ac4 <__assert_fail@plt+0x36d4>
   149bc:	add	sp, sp, #120	; 0x78
   149c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149c4:	ldrd	r8, [sp, #56]	; 0x38
   149c8:	ldrd	r2, [r4, #8]
   149cc:	cmp	r8, r2
   149d0:	sbcs	r1, r9, r3
   149d4:	blt	14a68 <__assert_fail@plt+0x3678>
   149d8:	cmp	r9, r3
   149dc:	cmpeq	r8, r2
   149e0:	bne	14958 <__assert_fail@plt+0x3568>
   149e4:	ldr	r0, [sp, #92]	; 0x5c
   149e8:	ldr	r1, [r4, #20]
   149ec:	ldr	r2, [sp, #88]	; 0x58
   149f0:	ldr	r3, [r4, #16]
   149f4:	cmp	r0, r1
   149f8:	cmpeq	r2, r3
   149fc:	bne	14958 <__assert_fail@plt+0x3568>
   14a00:	b	149ac <__assert_fail@plt+0x35bc>
   14a04:	ldr	r3, [pc, #196]	; 14ad0 <__assert_fail@plt+0x36e0>
   14a08:	str	r4, [r6]
   14a0c:	ldr	r0, [r3]
   14a10:	bl	111a4 <fflush_unlocked@plt>
   14a14:	cmp	r0, #0
   14a18:	beq	149ac <__assert_fail@plt+0x35bc>
   14a1c:	bl	112c4 <__errno_location@plt>
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #168]	; 14ad4 <__assert_fail@plt+0x36e4>
   14a28:	ldr	r4, [r0]
   14a2c:	mov	r0, #0
   14a30:	bl	11168 <dcgettext@plt>
   14a34:	mov	r1, r4
   14a38:	mov	r2, r0
   14a3c:	mov	r0, #1
   14a40:	bl	11204 <error@plt>
   14a44:	bl	112c4 <__errno_location@plt>
   14a48:	mov	r1, r7
   14a4c:	ldr	r3, [r0]
   14a50:	ldr	r0, [r4, #48]	; 0x30
   14a54:	str	r3, [r4, #52]	; 0x34
   14a58:	bl	13f98 <__assert_fail@plt+0x2ba8>
   14a5c:	mvn	r3, #0
   14a60:	str	r3, [r4, #48]	; 0x30
   14a64:	b	149ac <__assert_fail@plt+0x35bc>
   14a68:	mov	r2, #5
   14a6c:	ldr	r1, [pc, #100]	; 14ad8 <__assert_fail@plt+0x36e8>
   14a70:	bl	11168 <dcgettext@plt>
   14a74:	mov	r2, r7
   14a78:	mov	r1, #3
   14a7c:	mov	r8, r0
   14a80:	mov	r0, sl
   14a84:	bl	19594 <__assert_fail@plt+0x81a4>
   14a88:	mov	r2, r8
   14a8c:	mov	r1, sl
   14a90:	mov	r3, r0
   14a94:	mov	r0, sl
   14a98:	bl	11204 <error@plt>
   14a9c:	str	r7, [sp, #4]
   14aa0:	str	sl, [sp]
   14aa4:	mov	r2, #0
   14aa8:	mov	r3, #0
   14aac:	ldr	r0, [r4, #48]	; 0x30
   14ab0:	bl	144d0 <__assert_fail@plt+0x30e0>
   14ab4:	mov	r2, #0
   14ab8:	mov	r3, #0
   14abc:	strd	r2, [r4, #8]
   14ac0:	b	14958 <__assert_fail@plt+0x3568>
   14ac4:	bl	11174 <__stack_chk_fail@plt>
   14ac8:	andeq	sp, r2, r8, lsl #30
   14acc:	andeq	lr, r2, r0, asr #3
   14ad0:			; <UNDEFINED> instruction: 0x0002e1b4
   14ad4:	andeq	fp, r1, r8, ror #17
   14ad8:	ldrdeq	fp, [r1], -r4
   14adc:	push	{r4, r5, r6, r7, lr}
   14ae0:	sub	sp, sp, #100	; 0x64
   14ae4:	ldr	r4, [pc, #1592]	; 15124 <__assert_fail@plt+0x3d34>
   14ae8:	mov	r6, r1
   14aec:	mov	r1, sp
   14af0:	ldr	r3, [r4]
   14af4:	str	r3, [sp, #92]	; 0x5c
   14af8:	bl	1109c <fstatfs64@plt>
   14afc:	subs	r3, r0, #0
   14b00:	beq	14b6c <__assert_fail@plt+0x377c>
   14b04:	bl	112c4 <__errno_location@plt>
   14b08:	ldr	r5, [r0]
   14b0c:	cmp	r5, #38	; 0x26
   14b10:	moveq	r0, #1
   14b14:	bne	14b30 <__assert_fail@plt+0x3740>
   14b18:	ldr	r2, [sp, #92]	; 0x5c
   14b1c:	ldr	r3, [r4]
   14b20:	cmp	r2, r3
   14b24:	bne	15120 <__assert_fail@plt+0x3d30>
   14b28:	add	sp, sp, #100	; 0x64
   14b2c:	pop	{r4, r5, r6, r7, pc}
   14b30:	mov	r2, #5
   14b34:	ldr	r1, [pc, #1516]	; 15128 <__assert_fail@plt+0x3d38>
   14b38:	mov	r0, #0
   14b3c:	bl	11168 <dcgettext@plt>
   14b40:	mov	r1, r6
   14b44:	mov	r7, r0
   14b48:	mov	r0, #4
   14b4c:	bl	194b8 <__assert_fail@plt+0x80c8>
   14b50:	mov	r2, r7
   14b54:	mov	r1, r5
   14b58:	mov	r3, r0
   14b5c:	mov	r0, #0
   14b60:	bl	11204 <error@plt>
   14b64:	mov	r0, #1
   14b68:	b	14b18 <__assert_fail@plt+0x3728>
   14b6c:	ldr	r0, [sp]
   14b70:	ldr	r2, [pc, #1460]	; 1512c <__assert_fail@plt+0x3d3c>
   14b74:	cmp	r0, r2
   14b78:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14b7c:	bhi	14bd0 <__assert_fail@plt+0x37e0>
   14b80:	ldr	r2, [pc, #1448]	; 15130 <__assert_fail@plt+0x3d40>
   14b84:	cmp	r0, r2
   14b88:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14b8c:	bhi	14cfc <__assert_fail@plt+0x390c>
   14b90:	ldr	r2, [pc, #1436]	; 15134 <__assert_fail@plt+0x3d44>
   14b94:	cmp	r0, r2
   14b98:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14b9c:	bhi	14c64 <__assert_fail@plt+0x3874>
   14ba0:	ldr	r2, [pc, #1424]	; 15138 <__assert_fail@plt+0x3d48>
   14ba4:	cmp	r0, r2
   14ba8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14bac:	bhi	14c38 <__assert_fail@plt+0x3848>
   14bb0:	ldr	r3, [pc, #1412]	; 1513c <__assert_fail@plt+0x3d4c>
   14bb4:	cmp	r0, r3
   14bb8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14bbc:	cmp	r0, #392	; 0x188
   14bc0:	bcs	14c20 <__assert_fail@plt+0x3830>
   14bc4:	subs	r0, r0, #47	; 0x2f
   14bc8:	movne	r0, #1
   14bcc:	b	14b18 <__assert_fail@plt+0x3728>
   14bd0:	ldr	r2, [pc, #1384]	; 15140 <__assert_fail@plt+0x3d50>
   14bd4:	cmp	r0, r2
   14bd8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14bdc:	bhi	14ea8 <__assert_fail@plt+0x3ab8>
   14be0:	ldr	r2, [pc, #1372]	; 15144 <__assert_fail@plt+0x3d54>
   14be4:	cmp	r0, r2
   14be8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14bec:	bhi	14d44 <__assert_fail@plt+0x3954>
   14bf0:	ldr	r2, [pc, #1360]	; 15148 <__assert_fail@plt+0x3d58>
   14bf4:	cmp	r0, r2
   14bf8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14bfc:	bhi	14cc0 <__assert_fail@plt+0x38d0>
   14c00:	ldr	r3, [pc, #1348]	; 1514c <__assert_fail@plt+0x3d5c>
   14c04:	cmp	r0, r3
   14c08:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c0c:	bhi	14c9c <__assert_fail@plt+0x38ac>
   14c10:	ldr	r3, [pc, #1336]	; 15150 <__assert_fail@plt+0x3d60>
   14c14:	subs	r0, r0, r3
   14c18:	movne	r0, #1
   14c1c:	b	14b18 <__assert_fail@plt+0x3728>
   14c20:	cmp	r0, #1984	; 0x7c0
   14c24:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c28:	ldr	r3, [pc, #1316]	; 15154 <__assert_fail@plt+0x3d64>
   14c2c:	subs	r0, r0, r3
   14c30:	movne	r0, #1
   14c34:	b	14b18 <__assert_fail@plt+0x3728>
   14c38:	ldr	r3, [pc, #1304]	; 15158 <__assert_fail@plt+0x3d68>
   14c3c:	cmp	r0, r3
   14c40:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c44:	bhi	14e70 <__assert_fail@plt+0x3a80>
   14c48:	ldr	r3, [pc, #1292]	; 1515c <__assert_fail@plt+0x3d6c>
   14c4c:	cmp	r0, r3
   14c50:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c54:	add	r3, r3, #16
   14c58:	subs	r0, r0, r3
   14c5c:	movne	r0, #1
   14c60:	b	14b18 <__assert_fail@plt+0x3728>
   14c64:	ldr	r2, [pc, #1268]	; 15160 <__assert_fail@plt+0x3d70>
   14c68:	cmp	r0, r2
   14c6c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c70:	bhi	14dac <__assert_fail@plt+0x39bc>
   14c74:	ldr	r3, [pc, #1256]	; 15164 <__assert_fail@plt+0x3d74>
   14c78:	cmp	r0, r3
   14c7c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c80:	bhi	14d90 <__assert_fail@plt+0x39a0>
   14c84:	cmp	r0, #16384	; 0x4000
   14c88:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14c8c:	sub	r3, r3, #2
   14c90:	subs	r0, r0, r3
   14c94:	movne	r0, #1
   14c98:	b	14b18 <__assert_fail@plt+0x3728>
   14c9c:	ldr	r3, [pc, #1220]	; 15168 <__assert_fail@plt+0x3d78>
   14ca0:	cmp	r0, r3
   14ca4:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ca8:	add	r3, r3, #47972352	; 0x2dc0000
   14cac:	add	r3, r3, #253952	; 0x3e000
   14cb0:	add	r3, r3, #165	; 0xa5
   14cb4:	subs	r0, r0, r3
   14cb8:	movne	r0, #1
   14cbc:	b	14b18 <__assert_fail@plt+0x3728>
   14cc0:	ldr	r3, [pc, #1188]	; 1516c <__assert_fail@plt+0x3d7c>
   14cc4:	cmp	r0, r3
   14cc8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ccc:	bhi	14e84 <__assert_fail@plt+0x3a94>
   14cd0:	sub	r3, r3, #268435459	; 0x10000003
   14cd4:	sub	r3, r3, #16121856	; 0xf60000
   14cd8:	sub	r3, r3, #2048	; 0x800
   14cdc:	cmp	r0, r3
   14ce0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ce4:	add	r3, r3, #3296	; 0xce0
   14ce8:	add	r3, r3, #268435463	; 0x10000007
   14cec:	add	r3, r3, #15925248	; 0xf30000
   14cf0:	subs	r0, r0, r3
   14cf4:	movne	r0, #1
   14cf8:	b	14b18 <__assert_fail@plt+0x3728>
   14cfc:	ldr	r2, [pc, #1132]	; 15170 <__assert_fail@plt+0x3d80>
   14d00:	cmp	r0, r2
   14d04:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d08:	bhi	14f38 <__assert_fail@plt+0x3b48>
   14d0c:	ldr	r2, [pc, #1120]	; 15174 <__assert_fail@plt+0x3d84>
   14d10:	cmp	r0, r2
   14d14:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d18:	bhi	14f0c <__assert_fail@plt+0x3b1c>
   14d1c:	ldr	r3, [pc, #1108]	; 15178 <__assert_fail@plt+0x3d88>
   14d20:	cmp	r0, r3
   14d24:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d28:	bhi	14efc <__assert_fail@plt+0x3b0c>
   14d2c:	sub	r0, r0, #40704	; 0x9f00
   14d30:	sub	r0, r0, #160	; 0xa0
   14d34:	cmp	r0, #2
   14d38:	movls	r0, #0
   14d3c:	movhi	r0, #1
   14d40:	b	14b18 <__assert_fail@plt+0x3728>
   14d44:	ldr	r2, [pc, #1072]	; 1517c <__assert_fail@plt+0x3d8c>
   14d48:	cmp	r0, r2
   14d4c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d50:	bhi	14dfc <__assert_fail@plt+0x3a0c>
   14d54:	ldr	r3, [pc, #1060]	; 15180 <__assert_fail@plt+0x3d90>
   14d58:	cmp	r0, r3
   14d5c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d60:	bhi	14dd8 <__assert_fail@plt+0x39e8>
   14d64:	sub	r3, r3, #14680064	; 0xe00000
   14d68:	sub	r3, r3, #65024	; 0xfe00
   14d6c:	sub	r3, r3, #211	; 0xd3
   14d70:	cmp	r0, r3
   14d74:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d78:	add	r3, r3, #14680064	; 0xe00000
   14d7c:	add	r3, r3, #59136	; 0xe700
   14d80:	add	r3, r3, #218	; 0xda
   14d84:	subs	r0, r0, r3
   14d88:	movne	r0, #1
   14d8c:	b	14b18 <__assert_fail@plt+0x3728>
   14d90:	ldr	r3, [pc, #1004]	; 15184 <__assert_fail@plt+0x3d94>
   14d94:	cmp	r0, r3
   14d98:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14d9c:	ldr	r3, [pc, #996]	; 15188 <__assert_fail@plt+0x3d98>
   14da0:	subs	r0, r0, r3
   14da4:	movne	r0, #1
   14da8:	b	14b18 <__assert_fail@plt+0x3728>
   14dac:	ldr	r3, [pc, #984]	; 1518c <__assert_fail@plt+0x3d9c>
   14db0:	cmp	r0, r3
   14db4:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14db8:	bhi	14e30 <__assert_fail@plt+0x3a40>
   14dbc:	ldr	r3, [pc, #972]	; 15190 <__assert_fail@plt+0x3da0>
   14dc0:	cmp	r0, r3
   14dc4:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14dc8:	add	r3, r3, #22
   14dcc:	subs	r0, r0, r3
   14dd0:	movne	r0, #1
   14dd4:	b	14b18 <__assert_fail@plt+0x3728>
   14dd8:	ldr	r3, [pc, #948]	; 15194 <__assert_fail@plt+0x3da4>
   14ddc:	cmp	r0, r3
   14de0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14de4:	add	r3, r3, #581632	; 0x8e000
   14de8:	add	r3, r3, #3824	; 0xef0
   14dec:	add	r3, r3, #13
   14df0:	subs	r0, r0, r3
   14df4:	movne	r0, #1
   14df8:	b	14b18 <__assert_fail@plt+0x3728>
   14dfc:	ldr	r3, [pc, #916]	; 15198 <__assert_fail@plt+0x3da8>
   14e00:	cmp	r0, r3
   14e04:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14e08:	bhi	14e4c <__assert_fail@plt+0x3a5c>
   14e0c:	sub	r3, r3, #32243712	; 0x1ec0000
   14e10:	sub	r3, r3, #3296	; 0xce0
   14e14:	sub	r3, r3, #15
   14e18:	cmp	r0, r3
   14e1c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14e20:	ldr	r3, [pc, #884]	; 1519c <__assert_fail@plt+0x3dac>
   14e24:	subs	r0, r0, r3
   14e28:	movne	r0, #1
   14e2c:	b	14b18 <__assert_fail@plt+0x3728>
   14e30:	ldr	r3, [pc, #872]	; 151a0 <__assert_fail@plt+0x3db0>
   14e34:	cmp	r0, r3
   14e38:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14e3c:	add	r3, r3, #65	; 0x41
   14e40:	subs	r0, r0, r3
   14e44:	movne	r0, #1
   14e48:	b	14b18 <__assert_fail@plt+0x3728>
   14e4c:	ldr	r3, [pc, #848]	; 151a4 <__assert_fail@plt+0x3db4>
   14e50:	cmp	r0, r3
   14e54:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14e58:	add	r3, r3, #134217728	; 0x8000000
   14e5c:	sub	r3, r3, #14090240	; 0xd70000
   14e60:	sub	r3, r3, #644	; 0x284
   14e64:	subs	r0, r0, r3
   14e68:	movne	r0, #1
   14e6c:	b	14b18 <__assert_fail@plt+0x3728>
   14e70:	ldr	r3, [pc, #816]	; 151a8 <__assert_fail@plt+0x3db8>
   14e74:	cmp	r0, r3
   14e78:	bne	14c54 <__assert_fail@plt+0x3864>
   14e7c:	mov	r0, #0
   14e80:	b	14b18 <__assert_fail@plt+0x3728>
   14e84:	ldr	r3, [pc, #800]	; 151ac <__assert_fail@plt+0x3dbc>
   14e88:	cmp	r0, r3
   14e8c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14e90:	add	r3, r3, #33292288	; 0x1fc0000
   14e94:	add	r3, r3, #28416	; 0x6f00
   14e98:	add	r3, r3, #213	; 0xd5
   14e9c:	subs	r0, r0, r3
   14ea0:	movne	r0, #1
   14ea4:	b	14b18 <__assert_fail@plt+0x3728>
   14ea8:	ldr	r2, [pc, #768]	; 151b0 <__assert_fail@plt+0x3dc0>
   14eac:	cmp	r0, r2
   14eb0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14eb4:	bhi	14fb0 <__assert_fail@plt+0x3bc0>
   14eb8:	ldr	r2, [pc, #756]	; 151b4 <__assert_fail@plt+0x3dc4>
   14ebc:	cmp	r0, r2
   14ec0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ec4:	bhi	14f74 <__assert_fail@plt+0x3b84>
   14ec8:	ldr	r3, [pc, #744]	; 151b8 <__assert_fail@plt+0x3dc8>
   14ecc:	cmp	r0, r3
   14ed0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ed4:	bls	14c8c <__assert_fail@plt+0x389c>
   14ed8:	ldr	r3, [pc, #732]	; 151bc <__assert_fail@plt+0x3dcc>
   14edc:	cmp	r0, r3
   14ee0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ee4:	add	r3, r3, #16384000	; 0xfa0000
   14ee8:	add	r3, r3, #62464	; 0xf400
   14eec:	add	r3, r3, #176	; 0xb0
   14ef0:	subs	r0, r0, r3
   14ef4:	movne	r0, #1
   14ef8:	b	14b18 <__assert_fail@plt+0x3728>
   14efc:	ldr	r3, [pc, #700]	; 151c0 <__assert_fail@plt+0x3dd0>
   14f00:	subs	r0, r0, r3
   14f04:	movne	r0, #1
   14f08:	b	14b18 <__assert_fail@plt+0x3728>
   14f0c:	ldr	r3, [pc, #688]	; 151c4 <__assert_fail@plt+0x3dd4>
   14f10:	cmp	r0, r3
   14f14:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f18:	bhi	15068 <__assert_fail@plt+0x3c78>
   14f1c:	ldr	r3, [pc, #676]	; 151c8 <__assert_fail@plt+0x3dd8>
   14f20:	cmp	r0, r3
   14f24:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f28:	add	r3, r3, #524	; 0x20c
   14f2c:	subs	r0, r0, r3
   14f30:	movne	r0, #1
   14f34:	b	14b18 <__assert_fail@plt+0x3728>
   14f38:	ldr	r2, [pc, #652]	; 151cc <__assert_fail@plt+0x3ddc>
   14f3c:	cmp	r0, r2
   14f40:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f44:	bhi	1509c <__assert_fail@plt+0x3cac>
   14f48:	ldr	r3, [pc, #640]	; 151d0 <__assert_fail@plt+0x3de0>
   14f4c:	cmp	r0, r3
   14f50:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f54:	bhi	15084 <__assert_fail@plt+0x3c94>
   14f58:	ldr	r3, [pc, #628]	; 151d4 <__assert_fail@plt+0x3de4>
   14f5c:	cmp	r0, r3
   14f60:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f64:	add	r3, r3, #3
   14f68:	subs	r0, r0, r3
   14f6c:	movne	r0, #1
   14f70:	b	14b18 <__assert_fail@plt+0x3728>
   14f74:	ldr	r3, [pc, #604]	; 151d8 <__assert_fail@plt+0x3de8>
   14f78:	cmp	r0, r3
   14f7c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f80:	bhi	14fec <__assert_fail@plt+0x3bfc>
   14f84:	add	r3, r3, #756	; 0x2f4
   14f88:	add	r3, r3, #-134217726	; 0xf8000002
   14f8c:	add	r3, r3, #15073280	; 0xe60000
   14f90:	cmp	r0, r3
   14f94:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14f98:	add	r3, r3, #12517376	; 0xbf0000
   14f9c:	add	r3, r3, #42752	; 0xa700
   14fa0:	add	r3, r3, #185	; 0xb9
   14fa4:	subs	r0, r0, r3
   14fa8:	movne	r0, #1
   14fac:	b	14b18 <__assert_fail@plt+0x3728>
   14fb0:	ldr	r2, [pc, #548]	; 151dc <__assert_fail@plt+0x3dec>
   14fb4:	cmp	r0, r2
   14fb8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14fbc:	bhi	15034 <__assert_fail@plt+0x3c44>
   14fc0:	ldr	r3, [pc, #536]	; 151e0 <__assert_fail@plt+0x3df0>
   14fc4:	cmp	r0, r3
   14fc8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14fcc:	bhi	15010 <__assert_fail@plt+0x3c20>
   14fd0:	ldr	r3, [pc, #524]	; 151e4 <__assert_fail@plt+0x3df4>
   14fd4:	cmp	r0, r3
   14fd8:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14fdc:	ldr	r3, [pc, #516]	; 151e8 <__assert_fail@plt+0x3df8>
   14fe0:	subs	r0, r0, r3
   14fe4:	movne	r0, #1
   14fe8:	b	14b18 <__assert_fail@plt+0x3728>
   14fec:	ldr	r3, [pc, #504]	; 151ec <__assert_fail@plt+0x3dfc>
   14ff0:	cmp	r0, r3
   14ff4:	beq	14e7c <__assert_fail@plt+0x3a8c>
   14ff8:	add	r3, r3, #917504	; 0xe0000
   14ffc:	add	r3, r3, #3312	; 0xcf0
   15000:	add	r3, r3, #5
   15004:	subs	r0, r0, r3
   15008:	movne	r0, #1
   1500c:	b	14b18 <__assert_fail@plt+0x3728>
   15010:	ldr	r3, [pc, #472]	; 151f0 <__assert_fail@plt+0x3e00>
   15014:	cmp	r0, r3
   15018:	beq	14e7c <__assert_fail@plt+0x3a8c>
   1501c:	add	r3, r3, #369098752	; 0x16000000
   15020:	add	r3, r3, #3522560	; 0x35c000
   15024:	add	r3, r3, #126	; 0x7e
   15028:	subs	r0, r0, r3
   1502c:	movne	r0, #1
   15030:	b	14b18 <__assert_fail@plt+0x3728>
   15034:	ldr	r3, [pc, #440]	; 151f4 <__assert_fail@plt+0x3e04>
   15038:	cmp	r0, r3
   1503c:	beq	14e7c <__assert_fail@plt+0x3a8c>
   15040:	bhi	150d8 <__assert_fail@plt+0x3ce8>
   15044:	add	r3, r3, #-671088639	; 0xd8000001
   15048:	add	r3, r3, #598016	; 0x92000
   1504c:	add	r3, r3, #2560	; 0xa00
   15050:	cmp	r0, r3
   15054:	beq	14e7c <__assert_fail@plt+0x3a8c>
   15058:	ldr	r3, [pc, #408]	; 151f8 <__assert_fail@plt+0x3e08>
   1505c:	subs	r0, r0, r3
   15060:	movne	r0, #1
   15064:	b	14b18 <__assert_fail@plt+0x3728>
   15068:	ldr	r3, [pc, #396]	; 151fc <__assert_fail@plt+0x3e0c>
   1506c:	cmp	r0, r3
   15070:	beq	14e7c <__assert_fail@plt+0x3a8c>
   15074:	ldr	r3, [pc, #388]	; 15200 <__assert_fail@plt+0x3e10>
   15078:	subs	r0, r0, r3
   1507c:	movne	r0, #1
   15080:	b	14b18 <__assert_fail@plt+0x3728>
   15084:	ldr	r3, [pc, #376]	; 15204 <__assert_fail@plt+0x3e14>
   15088:	add	r3, r0, r3
   1508c:	cmp	r3, #3
   15090:	movls	r0, #0
   15094:	movhi	r0, #1
   15098:	b	14b18 <__assert_fail@plt+0x3728>
   1509c:	ldr	r3, [pc, #356]	; 15208 <__assert_fail@plt+0x3e18>
   150a0:	cmp	r0, r3
   150a4:	beq	14e7c <__assert_fail@plt+0x3a8c>
   150a8:	bhi	150fc <__assert_fail@plt+0x3d0c>
   150ac:	sub	r3, r3, #136314880	; 0x8200000
   150b0:	sub	r3, r3, #806912	; 0xc5000
   150b4:	sub	r3, r3, #3872	; 0xf20
   150b8:	cmp	r0, r3
   150bc:	beq	14e7c <__assert_fail@plt+0x3a8c>
   150c0:	add	r3, r3, #44564480	; 0x2a80000
   150c4:	add	r3, r3, #66560	; 0x10400
   150c8:	add	r3, r3, #182	; 0xb6
   150cc:	subs	r0, r0, r3
   150d0:	movne	r0, #1
   150d4:	b	14b18 <__assert_fail@plt+0x3728>
   150d8:	ldr	r3, [pc, #300]	; 1520c <__assert_fail@plt+0x3e1c>
   150dc:	cmp	r0, r3
   150e0:	beq	14e7c <__assert_fail@plt+0x3a8c>
   150e4:	add	r3, r3, #1622016	; 0x18c000
   150e8:	add	r3, r3, #10368	; 0x2880
   150ec:	add	r3, r3, #61	; 0x3d
   150f0:	subs	r0, r0, r3
   150f4:	movne	r0, #1
   150f8:	b	14b18 <__assert_fail@plt+0x3728>
   150fc:	ldr	r3, [pc, #268]	; 15210 <__assert_fail@plt+0x3e20>
   15100:	cmp	r0, r3
   15104:	beq	14e7c <__assert_fail@plt+0x3a8c>
   15108:	add	r3, r3, #26738688	; 0x1980000
   1510c:	add	r3, r3, #203776	; 0x31c00
   15110:	add	r3, r3, #992	; 0x3e0
   15114:	subs	r0, r0, r3
   15118:	movne	r0, #1
   1511c:	b	14b18 <__assert_fail@plt+0x3728>
   15120:	bl	11174 <__stack_chk_fail@plt>
   15124:	andeq	sp, r2, r8, lsl #30
   15128:	strdeq	fp, [r1], -r4
   1512c:	stmibne	r0, {r1, r9}
   15130:	andeq	r9, r0, r0, ror #12
   15134:	andeq	r3, r0, r4, lsr r4
   15138:	andeq	r1, r0, sp, ror r3
   1513c:	andeq	r0, r0, r7, lsl #3
   15140:	rsbvs	r6, r4, #494927872	; 0x1d800000
   15144:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   15148:	svccs	0x00c12fc1
   1514c:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   15150:	blne	feb93c90 <optarg@@GLIBC_2.4+0xfeb65ad8>
   15154:	andeq	r1, r0, r3, ror r3
   15158:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1515c:	andeq	r1, r0, pc, ror r3
   15160:	andeq	r4, r0, r8, asr r8
   15164:	andeq	r4, r0, r6
   15168:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   1516c:	submi	r4, r9, #1232	; 0x4d0
   15170:	sbceq	pc, r0, lr, ror #31
   15174:	andeq	lr, r0, r1, asr pc
   15178:	strdeq	sl, [r0], -r5
   1517c:	ldrpl	r0, [r9], #-256	; 0xffffff00
   15180:	movtpl	r4, #26694	; 0x6846
   15184:	andeq	r4, r0, r4, asr #4
   15188:	andeq	r4, r0, fp, lsr #16
   1518c:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   15190:	andeq	r4, r0, r4, asr #26
   15194:	movtpl	r5, #25678	; 0x644e
   15198:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   1519c:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   151a0:	andeq	r7, r0, r5, ror r2
   151a4:	bpl	f2f96c <optarg@@GLIBC_2.4+0xf017b4>
   151a8:	andeq	r2, r0, r8, ror #8
   151ac:	movtmi	r5, #7507	; 0x1d53
   151b0:	cmnvc	r2, #-1879048185	; 0x90000007
   151b4:	strbtvs	r6, [r4], #-376	; 0xfffffe88
   151b8:	rsbvs	r6, r5, #478150656	; 0x1c800000
   151bc:	cmnvs	r7, #112, 4
   151c0:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   151c4:	andeq	r1, r1, r4, asr r9
   151c8:	andeq	lr, r0, r3, asr pc
   151cc:	strbeq	r5, [r5, -r1, lsr #16]!
   151d0:			; <UNDEFINED> instruction: 0x012fd16d
   151d4:			; <UNDEFINED> instruction: 0x01021994
   151d8:	mrcvs	6, 3, r6, cr3, cr3, {3}
   151dc:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   151e0:			; <UNDEFINED> instruction: 0x9123683e
   151e4:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   151e8:	strhi	r5, [r4, #2294]	; 0x8f6
   151ec:	cmnvc	r3, #120586240	; 0x7300000
   151f0:	strls	r5, [r4, #2294]	; 0x8f6
   151f4:	vshr.s32	d18, d0, #11
   151f8:	logle<illegal precision>z	f0, f4
   151fc:	eoreq	lr, r7, fp, ror #1
   15200:	subeq	r4, r1, r3, asr sl
   15204:	vcmla.f32	q8, q0, d12[0], #90
   15208:	teqne	r0, r4, asr r8
   1520c:			; <UNDEFINED> instruction: 0xf97cff8c
   15210:	cmnne	r6, #-1744830463	; 0x98000001
   15214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15218:	sub	sp, sp, #132	; 0x84
   1521c:	ldr	r6, [pc, #1532]	; 15820 <__assert_fail@plt+0x4430>
   15220:	ldr	r5, [r0]
   15224:	mov	r4, r0
   15228:	ldr	r3, [r6]
   1522c:	mov	r0, r5
   15230:	mov	r7, r1
   15234:	ldr	r1, [pc, #1512]	; 15824 <__assert_fail@plt+0x4434>
   15238:	str	r3, [sp, #124]	; 0x7c
   1523c:	bl	110cc <strcmp@plt>
   15240:	ldrb	r3, [r4, #46]	; 0x2e
   15244:	ldr	sl, [r4, #52]	; 0x34
   15248:	str	r3, [sp, #8]
   1524c:	subs	r8, r0, #0
   15250:	moveq	r3, sl
   15254:	moveq	r5, r8
   15258:	beq	15278 <__assert_fail@plt+0x3e88>
   1525c:	cmp	r7, #0
   15260:	mov	r0, r5
   15264:	moveq	r1, #2048	; 0x800
   15268:	movne	r1, #0
   1526c:	bl	1627c <__assert_fail@plt+0x4e8c>
   15270:	ldr	r3, [r4, #52]	; 0x34
   15274:	mov	r5, r0
   15278:	ldr	r2, [r4, #48]	; 0x30
   1527c:	clz	r3, r3
   15280:	cmn	r2, #1
   15284:	movne	r2, #0
   15288:	moveq	r2, #1
   1528c:	lsr	r3, r3, #5
   15290:	cmp	r2, r3
   15294:	beq	157f8 <__assert_fail@plt+0x4408>
   15298:	ldr	r9, [pc, #1416]	; 15828 <__assert_fail@plt+0x4438>
   1529c:	ldrb	fp, [r9, #2]
   152a0:	ldrb	r2, [r9, #3]
   152a4:	cmp	fp, #0
   152a8:	beq	15404 <__assert_fail@plt+0x4014>
   152ac:	cmn	r5, #1
   152b0:	beq	15488 <__assert_fail@plt+0x4098>
   152b4:	cmp	r2, #0
   152b8:	mov	r2, #1
   152bc:	strb	r2, [r4, #46]	; 0x2e
   152c0:	beq	155e4 <__assert_fail@plt+0x41f4>
   152c4:	add	r3, sp, #16
   152c8:	mov	r2, r3
   152cc:	mov	r1, r5
   152d0:	mov	r0, #3
   152d4:	bl	111bc <__fxstat64@plt>
   152d8:	cmp	r0, #0
   152dc:	blt	1541c <__assert_fail@plt+0x402c>
   152e0:	ldr	r2, [sp, #32]
   152e4:	and	r1, r2, #61440	; 0xf000
   152e8:	sub	r1, r1, #4096	; 0x1000
   152ec:	and	r2, r2, #45056	; 0xb000
   152f0:	subs	r2, r2, #32768	; 0x8000
   152f4:	bic	r1, r1, #4096	; 0x1000
   152f8:	movne	r2, #1
   152fc:	cmp	r1, #0
   15300:	moveq	r2, #0
   15304:	cmp	r2, #0
   15308:	bne	154e8 <__assert_fail@plt+0x40f8>
   1530c:	ldr	r0, [r4]
   15310:	bl	13f60 <__assert_fail@plt+0x2b70>
   15314:	mov	r1, r0
   15318:	mov	r0, r5
   1531c:	bl	14adc <__assert_fail@plt+0x36ec>
   15320:	cmp	r0, #0
   15324:	strb	r0, [r4, #45]	; 0x2d
   15328:	beq	15338 <__assert_fail@plt+0x3f48>
   1532c:	ldrb	r9, [r9, #3]
   15330:	cmp	r9, #0
   15334:	beq	15760 <__assert_fail@plt+0x4370>
   15338:	mov	r9, #0
   1533c:	bics	sl, sl, #2
   15340:	str	r9, [r4, #52]	; 0x34
   15344:	ldr	r3, [r4, #48]	; 0x30
   15348:	beq	1561c <__assert_fail@plt+0x422c>
   1534c:	cmn	r3, #1
   15350:	bne	1580c <__assert_fail@plt+0x441c>
   15354:	mov	r2, #5
   15358:	ldr	r1, [pc, #1228]	; 1582c <__assert_fail@plt+0x443c>
   1535c:	mov	r0, r9
   15360:	bl	11168 <dcgettext@plt>
   15364:	mov	sl, r0
   15368:	ldr	r0, [r4]
   1536c:	bl	13f60 <__assert_fail@plt+0x2b70>
   15370:	mov	r1, r0
   15374:	mov	r0, #4
   15378:	bl	194b8 <__assert_fail@plt+0x80c8>
   1537c:	mov	r2, sl
   15380:	mov	r1, r9
   15384:	mov	r3, r0
   15388:	mov	r0, r9
   1538c:	bl	11204 <error@plt>
   15390:	ldrd	r2, [sp, #16]
   15394:	cmp	r8, #0
   15398:	ldrd	r0, [sp, #112]	; 0x70
   1539c:	strd	r2, [r4, #24]
   153a0:	ldr	r3, [sp, #100]	; 0x64
   153a4:	mvneq	r7, #0
   153a8:	mov	r8, #0
   153ac:	mov	r9, #0
   153b0:	ldr	r2, [sp, #96]	; 0x60
   153b4:	str	r3, [r4, #20]
   153b8:	ldr	r3, [sp, #32]
   153bc:	str	r7, [r4, #56]	; 0x38
   153c0:	mov	r7, #0
   153c4:	strd	r0, [r4, #32]
   153c8:	str	r2, [r4, #16]
   153cc:	str	r3, [r4, #40]	; 0x28
   153d0:	str	r5, [r4, #48]	; 0x30
   153d4:	strd	r8, [r4, #8]
   153d8:	strd	r8, [r4, #72]	; 0x48
   153dc:	strb	r7, [r4, #44]	; 0x2c
   153e0:	ldr	r0, [r4]
   153e4:	bl	13f60 <__assert_fail@plt+0x2b70>
   153e8:	str	r7, [sp]
   153ec:	mov	r2, r8
   153f0:	mov	r3, r9
   153f4:	str	r0, [sp, #4]
   153f8:	mov	r0, r5
   153fc:	bl	144d0 <__assert_fail@plt+0x30e0>
   15400:	b	15470 <__assert_fail@plt+0x4080>
   15404:	cmp	r2, #0
   15408:	mov	r2, #1
   1540c:	strb	r2, [r4, #46]	; 0x2e
   15410:	beq	15574 <__assert_fail@plt+0x4184>
   15414:	cmn	r5, #1
   15418:	bne	152c4 <__assert_fail@plt+0x3ed4>
   1541c:	bl	112c4 <__errno_location@plt>
   15420:	ldrb	r7, [r4, #46]	; 0x2e
   15424:	cmp	r7, #0
   15428:	ldr	r7, [r0]
   1542c:	str	r7, [r4, #52]	; 0x34
   15430:	beq	154a4 <__assert_fail@plt+0x40b4>
   15434:	cmp	r7, sl
   15438:	ldr	r0, [r4]
   1543c:	bne	154b8 <__assert_fail@plt+0x40c8>
   15440:	bl	13f60 <__assert_fail@plt+0x2b70>
   15444:	mov	r1, r0
   15448:	mov	r0, r5
   1544c:	bl	13f98 <__assert_fail@plt+0x2ba8>
   15450:	ldr	r0, [r4]
   15454:	ldr	r5, [r4, #48]	; 0x30
   15458:	bl	13f60 <__assert_fail@plt+0x2b70>
   1545c:	mov	r1, r0
   15460:	mov	r0, r5
   15464:	bl	13f98 <__assert_fail@plt+0x2ba8>
   15468:	mvn	r3, #0
   1546c:	str	r3, [r4, #48]	; 0x30
   15470:	ldr	r2, [sp, #124]	; 0x7c
   15474:	ldr	r3, [r6]
   15478:	cmp	r2, r3
   1547c:	bne	157f4 <__assert_fail@plt+0x4404>
   15480:	add	sp, sp, #132	; 0x84
   15484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15488:	mov	r3, #0
   1548c:	cmp	r2, #0
   15490:	strb	r3, [r4, #46]	; 0x2e
   15494:	beq	156bc <__assert_fail@plt+0x42cc>
   15498:	bl	112c4 <__errno_location@plt>
   1549c:	ldr	r7, [r0]
   154a0:	str	r7, [r4, #52]	; 0x34
   154a4:	ldr	r3, [sp, #8]
   154a8:	cmp	r3, #0
   154ac:	bne	155a0 <__assert_fail@plt+0x41b0>
   154b0:	ldr	r0, [r4]
   154b4:	b	15440 <__assert_fail@plt+0x4050>
   154b8:	bl	13f60 <__assert_fail@plt+0x2b70>
   154bc:	mov	r1, #3
   154c0:	mov	r2, r0
   154c4:	mov	r0, #0
   154c8:	bl	19594 <__assert_fail@plt+0x81a4>
   154cc:	mov	r1, r7
   154d0:	ldr	r2, [pc, #856]	; 15830 <__assert_fail@plt+0x4440>
   154d4:	mov	r3, r0
   154d8:	mov	r0, #0
   154dc:	bl	11204 <error@plt>
   154e0:	ldr	r0, [r4]
   154e4:	b	15440 <__assert_fail@plt+0x4050>
   154e8:	mvn	r1, #0
   154ec:	mov	r3, #0
   154f0:	cmp	fp, #0
   154f4:	str	r1, [r4, #52]	; 0x34
   154f8:	strb	r3, [r4, #46]	; 0x2e
   154fc:	bne	15738 <__assert_fail@plt+0x4348>
   15500:	adds	sl, sl, #1
   15504:	ldr	r3, [sp, #8]
   15508:	movne	sl, #1
   1550c:	orrs	r3, r3, sl
   15510:	strb	r2, [r4, #44]	; 0x2c
   15514:	beq	154b0 <__assert_fail@plt+0x40c0>
   15518:	mov	r2, #5
   1551c:	ldr	r1, [pc, #784]	; 15834 <__assert_fail@plt+0x4444>
   15520:	mov	r0, #0
   15524:	bl	11168 <dcgettext@plt>
   15528:	mov	r7, r0
   1552c:	ldr	r0, [r4]
   15530:	bl	13f60 <__assert_fail@plt+0x2b70>
   15534:	mov	r1, r0
   15538:	mov	r0, #4
   1553c:	bl	194b8 <__assert_fail@plt+0x80c8>
   15540:	ldrb	r3, [r4, #44]	; 0x2c
   15544:	cmp	r3, #0
   15548:	mov	r8, r0
   1554c:	ldreq	r0, [pc, #740]	; 15838 <__assert_fail@plt+0x4448>
   15550:	bne	1574c <__assert_fail@plt+0x435c>
   15554:	mov	r1, #0
   15558:	str	r0, [sp]
   1555c:	mov	r3, r8
   15560:	mov	r0, r1
   15564:	mov	r2, r7
   15568:	bl	11204 <error@plt>
   1556c:	ldr	r0, [r4]
   15570:	b	15440 <__assert_fail@plt+0x4050>
   15574:	add	r2, sp, #16
   15578:	ldr	r1, [r4]
   1557c:	mov	r0, #3
   15580:	bl	113e4 <__lxstat64@plt>
   15584:	cmp	r0, #0
   15588:	bne	15414 <__assert_fail@plt+0x4024>
   1558c:	ldr	r2, [sp, #32]
   15590:	and	r2, r2, #61440	; 0xf000
   15594:	cmp	r2, #40960	; 0xa000
   15598:	bne	15414 <__assert_fail@plt+0x4024>
   1559c:	b	156e4 <__assert_fail@plt+0x42f4>
   155a0:	mov	r2, #5
   155a4:	ldr	r1, [pc, #656]	; 1583c <__assert_fail@plt+0x444c>
   155a8:	mov	r0, #0
   155ac:	bl	11168 <dcgettext@plt>
   155b0:	mov	r8, r0
   155b4:	ldr	r0, [r4]
   155b8:	bl	13f60 <__assert_fail@plt+0x2b70>
   155bc:	mov	r1, r0
   155c0:	mov	r0, #4
   155c4:	bl	194b8 <__assert_fail@plt+0x80c8>
   155c8:	mov	r2, r8
   155cc:	mov	r1, r7
   155d0:	mov	r3, r0
   155d4:	mov	r0, #0
   155d8:	bl	11204 <error@plt>
   155dc:	ldr	r0, [r4]
   155e0:	b	15440 <__assert_fail@plt+0x4050>
   155e4:	add	r3, sp, #16
   155e8:	mov	r2, r3
   155ec:	ldr	r1, [r4]
   155f0:	mov	r0, #3
   155f4:	str	r3, [sp, #12]
   155f8:	bl	113e4 <__lxstat64@plt>
   155fc:	ldr	r3, [sp, #12]
   15600:	cmp	r0, #0
   15604:	bne	152c8 <__assert_fail@plt+0x3ed8>
   15608:	ldr	r2, [sp, #32]
   1560c:	and	r2, r2, #61440	; 0xf000
   15610:	cmp	r2, #40960	; 0xa000
   15614:	bne	152c8 <__assert_fail@plt+0x3ed8>
   15618:	b	156e4 <__assert_fail@plt+0x42f4>
   1561c:	cmn	r3, #1
   15620:	beq	157b4 <__assert_fail@plt+0x43c4>
   15624:	ldrd	r0, [r4, #32]
   15628:	ldrd	r2, [sp, #112]	; 0x70
   1562c:	cmp	r1, r3
   15630:	cmpeq	r0, r2
   15634:	bne	15664 <__assert_fail@plt+0x4274>
   15638:	ldrd	r0, [r4, #24]
   1563c:	ldrd	r2, [sp, #16]
   15640:	cmp	r1, r3
   15644:	cmpeq	r0, r2
   15648:	bne	15664 <__assert_fail@plt+0x4274>
   1564c:	ldr	r0, [r4]
   15650:	bl	13f60 <__assert_fail@plt+0x2b70>
   15654:	mov	r1, r0
   15658:	mov	r0, r5
   1565c:	bl	13f98 <__assert_fail@plt+0x2ba8>
   15660:	b	15470 <__assert_fail@plt+0x4080>
   15664:	mov	r2, #5
   15668:	ldr	r1, [pc, #464]	; 15840 <__assert_fail@plt+0x4450>
   1566c:	mov	r0, #0
   15670:	bl	11168 <dcgettext@plt>
   15674:	mov	r9, r0
   15678:	ldr	r0, [r4]
   1567c:	bl	13f60 <__assert_fail@plt+0x2b70>
   15680:	mov	r1, r0
   15684:	mov	r0, #4
   15688:	bl	194b8 <__assert_fail@plt+0x80c8>
   1568c:	mov	r1, #0
   15690:	mov	r2, r9
   15694:	mov	r3, r0
   15698:	mov	r0, r1
   1569c:	bl	11204 <error@plt>
   156a0:	ldr	r0, [r4]
   156a4:	ldr	r9, [r4, #48]	; 0x30
   156a8:	bl	13f60 <__assert_fail@plt+0x2b70>
   156ac:	mov	r1, r0
   156b0:	mov	r0, r9
   156b4:	bl	13f98 <__assert_fail@plt+0x2ba8>
   156b8:	b	15390 <__assert_fail@plt+0x3fa0>
   156bc:	add	r2, sp, #16
   156c0:	ldr	r1, [r4]
   156c4:	mov	r0, #3
   156c8:	bl	113e4 <__lxstat64@plt>
   156cc:	cmp	r0, #0
   156d0:	bne	1541c <__assert_fail@plt+0x402c>
   156d4:	ldr	r3, [sp, #32]
   156d8:	and	r3, r3, #61440	; 0xf000
   156dc:	cmp	r3, #40960	; 0xa000
   156e0:	bne	1541c <__assert_fail@plt+0x402c>
   156e4:	mov	r3, #1
   156e8:	mvn	r2, #0
   156ec:	strb	r3, [r4, #44]	; 0x2c
   156f0:	ldr	r1, [pc, #332]	; 15844 <__assert_fail@plt+0x4454>
   156f4:	str	r2, [r4, #52]	; 0x34
   156f8:	mov	r0, #0
   156fc:	mov	r2, #5
   15700:	bl	11168 <dcgettext@plt>
   15704:	mov	r7, r0
   15708:	ldr	r0, [r4]
   1570c:	bl	13f60 <__assert_fail@plt+0x2b70>
   15710:	mov	r1, r0
   15714:	mov	r0, #4
   15718:	bl	194b8 <__assert_fail@plt+0x80c8>
   1571c:	mov	r1, #0
   15720:	mov	r2, r7
   15724:	mov	r3, r0
   15728:	mov	r0, r1
   1572c:	bl	11204 <error@plt>
   15730:	ldr	r0, [r4]
   15734:	b	15440 <__assert_fail@plt+0x4050>
   15738:	ldr	r3, [pc, #264]	; 15848 <__assert_fail@plt+0x4458>
   1573c:	ldr	r2, [r3, #4]
   15740:	subs	r2, r2, #1
   15744:	movne	r2, #1
   15748:	b	15500 <__assert_fail@plt+0x4110>
   1574c:	mov	r2, #5
   15750:	ldr	r1, [pc, #244]	; 1584c <__assert_fail@plt+0x445c>
   15754:	mov	r0, #0
   15758:	bl	11168 <dcgettext@plt>
   1575c:	b	15554 <__assert_fail@plt+0x4164>
   15760:	mvn	r3, #0
   15764:	str	r3, [r4, #52]	; 0x34
   15768:	mov	r2, #5
   1576c:	ldr	r1, [pc, #220]	; 15850 <__assert_fail@plt+0x4460>
   15770:	mov	r0, r9
   15774:	bl	11168 <dcgettext@plt>
   15778:	mov	r7, r0
   1577c:	ldr	r0, [r4]
   15780:	bl	13f60 <__assert_fail@plt+0x2b70>
   15784:	mov	r1, r0
   15788:	mov	r0, #4
   1578c:	bl	194b8 <__assert_fail@plt+0x80c8>
   15790:	mov	r2, r7
   15794:	mov	r1, r9
   15798:	mov	r3, r0
   1579c:	mov	r0, r9
   157a0:	bl	11204 <error@plt>
   157a4:	ldr	r3, [pc, #168]	; 15854 <__assert_fail@plt+0x4464>
   157a8:	ldr	r0, [r4]
   157ac:	strh	r3, [r4, #44]	; 0x2c
   157b0:	b	15440 <__assert_fail@plt+0x4050>
   157b4:	mov	r2, #5
   157b8:	ldr	r1, [pc, #152]	; 15858 <__assert_fail@plt+0x4468>
   157bc:	mov	r0, sl
   157c0:	bl	11168 <dcgettext@plt>
   157c4:	mov	r9, r0
   157c8:	ldr	r0, [r4]
   157cc:	bl	13f60 <__assert_fail@plt+0x2b70>
   157d0:	mov	r1, r0
   157d4:	mov	r0, #4
   157d8:	bl	194b8 <__assert_fail@plt+0x80c8>
   157dc:	mov	r2, r9
   157e0:	mov	r1, sl
   157e4:	mov	r3, r0
   157e8:	mov	r0, sl
   157ec:	bl	11204 <error@plt>
   157f0:	b	15390 <__assert_fail@plt+0x3fa0>
   157f4:	bl	11174 <__stack_chk_fail@plt>
   157f8:	ldr	r3, [pc, #92]	; 1585c <__assert_fail@plt+0x446c>
   157fc:	ldr	r2, [pc, #92]	; 15860 <__assert_fail@plt+0x4470>
   15800:	ldr	r1, [pc, #92]	; 15864 <__assert_fail@plt+0x4474>
   15804:	ldr	r0, [pc, #92]	; 15868 <__assert_fail@plt+0x4478>
   15808:	bl	113f0 <__assert_fail@plt>
   1580c:	ldr	r3, [pc, #72]	; 1585c <__assert_fail@plt+0x446c>
   15810:	ldr	r2, [pc, #84]	; 1586c <__assert_fail@plt+0x447c>
   15814:	ldr	r1, [pc, #72]	; 15864 <__assert_fail@plt+0x4474>
   15818:	ldr	r0, [pc, #80]	; 15870 <__assert_fail@plt+0x4480>
   1581c:	bl	113f0 <__assert_fail@plt>
   15820:	andeq	sp, r2, r8, lsl #30
   15824:	andeq	fp, r1, ip, lsl r8
   15828:	andeq	lr, r2, r0, asr #3
   1582c:	andeq	fp, r1, ip, lsr #20
   15830:	andeq	ip, r1, r8, ror #11
   15834:	andeq	fp, r1, r0, lsr #19
   15838:	andeq	ip, r1, r4, lsl ip
   1583c:	andeq	fp, r1, r4, lsl #19
   15840:	andeq	fp, r1, r0, ror sl
   15844:	andeq	fp, r1, ip, asr #18
   15848:	andeq	lr, r2, r8, lsr r1
   1584c:	ldrdeq	fp, [r1], -r0
   15850:	andeq	fp, r1, ip, ror #19
   15854:	andeq	r0, r0, r1, lsl #2
   15858:	andeq	fp, r1, r8, asr #20
   1585c:			; <UNDEFINED> instruction: 0x0001b6bc
   15860:	andeq	r0, r0, r7, asr #7
   15864:	andeq	fp, r1, ip, lsr #18
   15868:	andeq	fp, r1, r8, lsr r9
   1586c:	andeq	r0, r0, r4, lsl r4
   15870:	andeq	fp, r1, r0, lsr #20
   15874:	ldr	r3, [pc, #908]	; 15c08 <__assert_fail@plt+0x4818>
   15878:	push	{r7, lr}
   1587c:	sub	sp, sp, #64	; 0x40
   15880:	ldr	r3, [r3]
   15884:	subs	r4, r0, #0
   15888:	str	r3, [sp, #60]	; 0x3c
   1588c:	beq	158c8 <__assert_fail@plt+0x44d8>
   15890:	ldr	r3, [pc, #884]	; 15c0c <__assert_fail@plt+0x481c>
   15894:	mov	r2, #5
   15898:	ldr	r1, [pc, #880]	; 15c10 <__assert_fail@plt+0x4820>
   1589c:	mov	r0, #0
   158a0:	ldr	r5, [r3]
   158a4:	bl	11168 <dcgettext@plt>
   158a8:	ldr	r3, [pc, #868]	; 15c14 <__assert_fail@plt+0x4824>
   158ac:	mov	r1, #1
   158b0:	ldr	r3, [r3]
   158b4:	mov	r2, r0
   158b8:	mov	r0, r5
   158bc:	bl	11300 <__fprintf_chk@plt>
   158c0:	mov	r0, r4
   158c4:	bl	1127c <exit@plt>
   158c8:	mov	r2, #5
   158cc:	ldr	r1, [pc, #836]	; 15c18 <__assert_fail@plt+0x4828>
   158d0:	bl	11168 <dcgettext@plt>
   158d4:	ldr	r3, [pc, #824]	; 15c14 <__assert_fail@plt+0x4824>
   158d8:	ldr	r5, [pc, #828]	; 15c1c <__assert_fail@plt+0x482c>
   158dc:	ldr	r2, [r3]
   158e0:	mov	r1, r0
   158e4:	mov	r0, #1
   158e8:	bl	112e8 <__printf_chk@plt>
   158ec:	mov	r2, #5
   158f0:	ldr	r1, [pc, #808]	; 15c20 <__assert_fail@plt+0x4830>
   158f4:	mov	r0, r4
   158f8:	bl	11168 <dcgettext@plt>
   158fc:	mov	r2, #10
   15900:	mov	r1, r0
   15904:	mov	r0, #1
   15908:	bl	112e8 <__printf_chk@plt>
   1590c:	mov	r2, #5
   15910:	ldr	r1, [pc, #780]	; 15c24 <__assert_fail@plt+0x4834>
   15914:	mov	r0, r4
   15918:	bl	11168 <dcgettext@plt>
   1591c:	ldr	r1, [r5]
   15920:	bl	110b4 <fputs_unlocked@plt>
   15924:	mov	r2, #5
   15928:	ldr	r1, [pc, #760]	; 15c28 <__assert_fail@plt+0x4838>
   1592c:	mov	r0, r4
   15930:	bl	11168 <dcgettext@plt>
   15934:	ldr	r1, [r5]
   15938:	bl	110b4 <fputs_unlocked@plt>
   1593c:	mov	r2, #5
   15940:	ldr	r1, [pc, #740]	; 15c2c <__assert_fail@plt+0x483c>
   15944:	mov	r0, r4
   15948:	bl	11168 <dcgettext@plt>
   1594c:	ldr	r1, [r5]
   15950:	bl	110b4 <fputs_unlocked@plt>
   15954:	mov	r2, #5
   15958:	ldr	r1, [pc, #720]	; 15c30 <__assert_fail@plt+0x4840>
   1595c:	mov	r0, r4
   15960:	bl	11168 <dcgettext@plt>
   15964:	ldr	r1, [r5]
   15968:	bl	110b4 <fputs_unlocked@plt>
   1596c:	mov	r2, #5
   15970:	ldr	r1, [pc, #700]	; 15c34 <__assert_fail@plt+0x4844>
   15974:	mov	r0, r4
   15978:	bl	11168 <dcgettext@plt>
   1597c:	mov	r3, #5
   15980:	mov	r2, #10
   15984:	mov	r1, r0
   15988:	mov	r0, #1
   1598c:	bl	112e8 <__printf_chk@plt>
   15990:	mov	r2, #5
   15994:	ldr	r1, [pc, #668]	; 15c38 <__assert_fail@plt+0x4848>
   15998:	mov	r0, r4
   1599c:	bl	11168 <dcgettext@plt>
   159a0:	ldr	r1, [r5]
   159a4:	bl	110b4 <fputs_unlocked@plt>
   159a8:	mov	r2, #5
   159ac:	ldr	r1, [pc, #648]	; 15c3c <__assert_fail@plt+0x484c>
   159b0:	mov	r0, r4
   159b4:	bl	11168 <dcgettext@plt>
   159b8:	ldr	r1, [r5]
   159bc:	bl	110b4 <fputs_unlocked@plt>
   159c0:	mov	r2, #5
   159c4:	ldr	r1, [pc, #628]	; 15c40 <__assert_fail@plt+0x4850>
   159c8:	mov	r0, r4
   159cc:	bl	11168 <dcgettext@plt>
   159d0:	ldr	r1, [r5]
   159d4:	bl	110b4 <fputs_unlocked@plt>
   159d8:	mov	r2, #5
   159dc:	ldr	r1, [pc, #608]	; 15c44 <__assert_fail@plt+0x4854>
   159e0:	mov	r0, r4
   159e4:	bl	11168 <dcgettext@plt>
   159e8:	ldr	r1, [r5]
   159ec:	bl	110b4 <fputs_unlocked@plt>
   159f0:	mov	r2, #5
   159f4:	ldr	r1, [pc, #588]	; 15c48 <__assert_fail@plt+0x4858>
   159f8:	mov	r0, r4
   159fc:	bl	11168 <dcgettext@plt>
   15a00:	ldr	r1, [r5]
   15a04:	bl	110b4 <fputs_unlocked@plt>
   15a08:	mov	r2, #5
   15a0c:	ldr	r1, [pc, #568]	; 15c4c <__assert_fail@plt+0x485c>
   15a10:	mov	r0, r4
   15a14:	bl	11168 <dcgettext@plt>
   15a18:	ldr	r1, [r5]
   15a1c:	bl	110b4 <fputs_unlocked@plt>
   15a20:	mov	r2, #5
   15a24:	ldr	r1, [pc, #548]	; 15c50 <__assert_fail@plt+0x4860>
   15a28:	mov	r0, r4
   15a2c:	bl	11168 <dcgettext@plt>
   15a30:	ldr	r1, [r5]
   15a34:	bl	110b4 <fputs_unlocked@plt>
   15a38:	ldr	lr, [pc, #532]	; 15c54 <__assert_fail@plt+0x4864>
   15a3c:	add	ip, sp, #4
   15a40:	ldm	lr!, {r0, r1, r2, r3}
   15a44:	stmia	ip!, {r0, r1, r2, r3}
   15a48:	ldm	lr!, {r0, r1, r2, r3}
   15a4c:	ldr	r6, [sp, #4]
   15a50:	stmia	ip!, {r0, r1, r2, r3}
   15a54:	cmp	r6, #0
   15a58:	ldm	lr!, {r0, r1, r2, r3}
   15a5c:	addeq	r5, sp, #4
   15a60:	stmia	ip!, {r0, r1, r2, r3}
   15a64:	ldm	lr, {r0, r1}
   15a68:	stm	ip, {r0, r1}
   15a6c:	beq	15a9c <__assert_fail@plt+0x46ac>
   15a70:	ldr	r7, [pc, #480]	; 15c58 <__assert_fail@plt+0x4868>
   15a74:	add	r5, sp, #4
   15a78:	b	15a88 <__assert_fail@plt+0x4698>
   15a7c:	ldr	r6, [r5, #8]!
   15a80:	cmp	r6, #0
   15a84:	beq	15a9c <__assert_fail@plt+0x46ac>
   15a88:	mov	r1, r6
   15a8c:	mov	r0, r7
   15a90:	bl	110cc <strcmp@plt>
   15a94:	cmp	r0, #0
   15a98:	bne	15a7c <__assert_fail@plt+0x468c>
   15a9c:	ldr	r5, [r5, #4]
   15aa0:	mov	r2, #5
   15aa4:	cmp	r5, #0
   15aa8:	ldr	r1, [pc, #428]	; 15c5c <__assert_fail@plt+0x486c>
   15aac:	beq	15b54 <__assert_fail@plt+0x4764>
   15ab0:	mov	r0, #0
   15ab4:	bl	11168 <dcgettext@plt>
   15ab8:	ldr	r3, [pc, #416]	; 15c60 <__assert_fail@plt+0x4870>
   15abc:	ldr	r2, [pc, #416]	; 15c64 <__assert_fail@plt+0x4874>
   15ac0:	mov	r1, r0
   15ac4:	mov	r0, #1
   15ac8:	bl	112e8 <__printf_chk@plt>
   15acc:	mov	r1, #0
   15ad0:	mov	r0, #5
   15ad4:	bl	11354 <setlocale@plt>
   15ad8:	cmp	r0, #0
   15adc:	ldreq	r6, [pc, #372]	; 15c58 <__assert_fail@plt+0x4868>
   15ae0:	beq	15afc <__assert_fail@plt+0x470c>
   15ae4:	mov	r2, #3
   15ae8:	ldr	r1, [pc, #376]	; 15c68 <__assert_fail@plt+0x4878>
   15aec:	bl	113c0 <strncmp@plt>
   15af0:	ldr	r6, [pc, #352]	; 15c58 <__assert_fail@plt+0x4868>
   15af4:	cmp	r0, #0
   15af8:	bne	15be4 <__assert_fail@plt+0x47f4>
   15afc:	mov	r2, #5
   15b00:	ldr	r1, [pc, #356]	; 15c6c <__assert_fail@plt+0x487c>
   15b04:	mov	r0, #0
   15b08:	bl	11168 <dcgettext@plt>
   15b0c:	ldr	r3, [pc, #324]	; 15c58 <__assert_fail@plt+0x4868>
   15b10:	ldr	r2, [pc, #328]	; 15c60 <__assert_fail@plt+0x4870>
   15b14:	mov	r1, r0
   15b18:	mov	r0, #1
   15b1c:	bl	112e8 <__printf_chk@plt>
   15b20:	mov	r2, #5
   15b24:	ldr	r1, [pc, #324]	; 15c70 <__assert_fail@plt+0x4880>
   15b28:	mov	r0, #0
   15b2c:	bl	11168 <dcgettext@plt>
   15b30:	ldr	r2, [pc, #316]	; 15c74 <__assert_fail@plt+0x4884>
   15b34:	cmp	r5, r6
   15b38:	ldr	r3, [pc, #312]	; 15c78 <__assert_fail@plt+0x4888>
   15b3c:	movne	r3, r2
   15b40:	mov	r1, r0
   15b44:	mov	r2, r5
   15b48:	mov	r0, #1
   15b4c:	bl	112e8 <__printf_chk@plt>
   15b50:	b	158c0 <__assert_fail@plt+0x44d0>
   15b54:	mov	r0, r5
   15b58:	bl	11168 <dcgettext@plt>
   15b5c:	ldr	r3, [pc, #252]	; 15c60 <__assert_fail@plt+0x4870>
   15b60:	ldr	r2, [pc, #252]	; 15c64 <__assert_fail@plt+0x4874>
   15b64:	mov	r1, r0
   15b68:	mov	r0, #1
   15b6c:	bl	112e8 <__printf_chk@plt>
   15b70:	mov	r1, r5
   15b74:	mov	r0, #5
   15b78:	bl	11354 <setlocale@plt>
   15b7c:	cmp	r0, #0
   15b80:	beq	15b98 <__assert_fail@plt+0x47a8>
   15b84:	mov	r2, #3
   15b88:	ldr	r1, [pc, #216]	; 15c68 <__assert_fail@plt+0x4878>
   15b8c:	bl	113c0 <strncmp@plt>
   15b90:	cmp	r0, #0
   15b94:	bne	15bdc <__assert_fail@plt+0x47ec>
   15b98:	mov	r2, #5
   15b9c:	ldr	r1, [pc, #200]	; 15c6c <__assert_fail@plt+0x487c>
   15ba0:	mov	r0, #0
   15ba4:	bl	11168 <dcgettext@plt>
   15ba8:	ldr	r3, [pc, #168]	; 15c58 <__assert_fail@plt+0x4868>
   15bac:	ldr	r2, [pc, #172]	; 15c60 <__assert_fail@plt+0x4870>
   15bb0:	mov	r5, r3
   15bb4:	mov	r1, r0
   15bb8:	mov	r0, #1
   15bbc:	bl	112e8 <__printf_chk@plt>
   15bc0:	ldr	r1, [pc, #168]	; 15c70 <__assert_fail@plt+0x4880>
   15bc4:	mov	r2, #5
   15bc8:	mov	r0, #0
   15bcc:	bl	11168 <dcgettext@plt>
   15bd0:	ldr	r3, [pc, #160]	; 15c78 <__assert_fail@plt+0x4888>
   15bd4:	mov	r1, r0
   15bd8:	b	15b44 <__assert_fail@plt+0x4754>
   15bdc:	ldr	r6, [pc, #116]	; 15c58 <__assert_fail@plt+0x4868>
   15be0:	mov	r5, r6
   15be4:	mov	r2, #5
   15be8:	ldr	r1, [pc, #140]	; 15c7c <__assert_fail@plt+0x488c>
   15bec:	mov	r0, #0
   15bf0:	bl	11168 <dcgettext@plt>
   15bf4:	ldr	r2, [pc, #92]	; 15c58 <__assert_fail@plt+0x4868>
   15bf8:	mov	r1, r0
   15bfc:	mov	r0, #1
   15c00:	bl	112e8 <__printf_chk@plt>
   15c04:	b	15afc <__assert_fail@plt+0x470c>
   15c08:	andeq	sp, r2, r8, lsl #30
   15c0c:			; <UNDEFINED> instruction: 0x0002e1b0
   15c10:	andeq	fp, r1, r4, lsr #21
   15c14:	ldrdeq	lr, [r2], -ip
   15c18:	andeq	fp, r1, ip, asr #21
   15c1c:			; <UNDEFINED> instruction: 0x0002e1b4
   15c20:	strdeq	fp, [r1], -r0
   15c24:	andeq	fp, r1, r4, ror fp
   15c28:	andeq	fp, r1, ip, lsr #23
   15c2c:	strdeq	fp, [r1], -r8
   15c30:	andeq	fp, r1, ip, lsl #25
   15c34:	andeq	fp, r1, r8, ror sp
   15c38:	andeq	fp, r1, r4, lsr #31
   15c3c:	andeq	ip, r1, ip, ror r0
   15c40:	andeq	ip, r1, r8, asr #3
   15c44:	andeq	ip, r1, r8, lsl #4
   15c48:	andeq	ip, r1, r8, lsr r2
   15c4c:	andeq	ip, r1, r0, ror r2
   15c50:	andeq	ip, r1, ip, lsl #6
   15c54:	andeq	fp, r1, r4, asr #13
   15c58:	muleq	r1, ip, sl
   15c5c:	andeq	ip, r1, r4, asr #9
   15c60:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15c64:	andeq	ip, r1, r4, lsl #10
   15c68:	andeq	ip, r1, r4, lsl r5
   15c6c:	andeq	ip, r1, r0, ror #10
   15c70:	andeq	ip, r1, r0, lsl #11
   15c74:	andeq	ip, r1, r4, lsl ip
   15c78:	andeq	ip, r1, r8, lsr #20
   15c7c:	andeq	ip, r1, r8, lsl r5
   15c80:	mov	r0, #1
   15c84:	b	15874 <__assert_fail@plt+0x4484>
   15c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c8c:	mov	r5, r1
   15c90:	sub	sp, sp, #12
   15c94:	mov	r4, r2
   15c98:	str	r2, [sp]
   15c9c:	mov	r7, r3
   15ca0:	mov	sl, r0
   15ca4:	bl	11288 <strlen@plt>
   15ca8:	ldr	fp, [r5]
   15cac:	cmp	fp, #0
   15cb0:	beq	15d74 <__assert_fail@plt+0x4984>
   15cb4:	mov	r6, #0
   15cb8:	mov	r8, r0
   15cbc:	str	r6, [sp, #4]
   15cc0:	mvn	r9, #0
   15cc4:	b	15cf0 <__assert_fail@plt+0x4900>
   15cc8:	bl	11150 <memcmp@plt>
   15ccc:	ldr	r3, [sp, #4]
   15cd0:	cmp	r0, #0
   15cd4:	movne	r3, #1
   15cd8:	str	r3, [sp, #4]
   15cdc:	ldr	fp, [r5, #4]!
   15ce0:	add	r6, r6, #1
   15ce4:	cmp	fp, #0
   15ce8:	add	r4, r4, r7
   15cec:	beq	15d4c <__assert_fail@plt+0x495c>
   15cf0:	mov	r2, r8
   15cf4:	mov	r1, sl
   15cf8:	mov	r0, fp
   15cfc:	bl	113c0 <strncmp@plt>
   15d00:	cmp	r0, #0
   15d04:	mov	r0, fp
   15d08:	bne	15cdc <__assert_fail@plt+0x48ec>
   15d0c:	bl	11288 <strlen@plt>
   15d10:	ldr	r3, [sp]
   15d14:	mov	r2, r7
   15d18:	mov	r1, r4
   15d1c:	cmp	r0, r8
   15d20:	mla	r0, r7, r9, r3
   15d24:	beq	15d64 <__assert_fail@plt+0x4974>
   15d28:	cmn	r9, #1
   15d2c:	moveq	r9, r6
   15d30:	beq	15cdc <__assert_fail@plt+0x48ec>
   15d34:	ldr	r3, [sp]
   15d38:	cmp	r3, #0
   15d3c:	bne	15cc8 <__assert_fail@plt+0x48d8>
   15d40:	mov	r3, #1
   15d44:	str	r3, [sp, #4]
   15d48:	b	15cdc <__assert_fail@plt+0x48ec>
   15d4c:	ldr	r3, [sp, #4]
   15d50:	cmp	r3, #0
   15d54:	mvnne	r9, #1
   15d58:	mov	r0, r9
   15d5c:	add	sp, sp, #12
   15d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d64:	mov	r9, r6
   15d68:	mov	r0, r9
   15d6c:	add	sp, sp, #12
   15d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d74:	mvn	r9, #0
   15d78:	b	15d58 <__assert_fail@plt+0x4968>
   15d7c:	cmn	r2, #1
   15d80:	push	{r4, r5, r6, lr}
   15d84:	mov	r2, #5
   15d88:	sub	sp, sp, #8
   15d8c:	mov	r5, r1
   15d90:	mov	r6, r0
   15d94:	ldreq	r1, [pc, #76]	; 15de8 <__assert_fail@plt+0x49f8>
   15d98:	ldrne	r1, [pc, #76]	; 15dec <__assert_fail@plt+0x49fc>
   15d9c:	mov	r0, #0
   15da0:	bl	11168 <dcgettext@plt>
   15da4:	mov	r2, r5
   15da8:	mov	r1, #8
   15dac:	mov	r4, r0
   15db0:	mov	r0, #0
   15db4:	bl	19404 <__assert_fail@plt+0x8014>
   15db8:	mov	r1, r6
   15dbc:	mov	r5, r0
   15dc0:	mov	r0, #1
   15dc4:	bl	19750 <__assert_fail@plt+0x8360>
   15dc8:	mov	r1, #0
   15dcc:	mov	r3, r5
   15dd0:	mov	r2, r4
   15dd4:	str	r0, [sp]
   15dd8:	mov	r0, r1
   15ddc:	bl	11204 <error@plt>
   15de0:	add	sp, sp, #8
   15de4:	pop	{r4, r5, r6, pc}
   15de8:	andeq	ip, r1, r8, asr #22
   15dec:	andeq	ip, r1, r4, ror #22
   15df0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15df4:	mov	r6, r0
   15df8:	ldr	sl, [pc, #224]	; 15ee0 <__assert_fail@plt+0x4af0>
   15dfc:	mov	r4, r1
   15e00:	mov	r7, r2
   15e04:	ldr	r1, [pc, #216]	; 15ee4 <__assert_fail@plt+0x4af4>
   15e08:	mov	r2, #5
   15e0c:	mov	r0, #0
   15e10:	bl	11168 <dcgettext@plt>
   15e14:	ldr	r1, [sl]
   15e18:	bl	110b4 <fputs_unlocked@plt>
   15e1c:	ldr	fp, [r6]
   15e20:	cmp	fp, #0
   15e24:	movne	r9, #0
   15e28:	movne	r5, r9
   15e2c:	bne	15e68 <__assert_fail@plt+0x4a78>
   15e30:	b	15eac <__assert_fail@plt+0x4abc>
   15e34:	mov	r0, fp
   15e38:	bl	19760 <__assert_fail@plt+0x8370>
   15e3c:	ldr	r2, [pc, #164]	; 15ee8 <__assert_fail@plt+0x4af8>
   15e40:	mov	r1, #1
   15e44:	mov	r9, r4
   15e48:	mov	r3, r0
   15e4c:	mov	r0, r8
   15e50:	bl	11300 <__fprintf_chk@plt>
   15e54:	ldr	fp, [r6, #4]!
   15e58:	add	r5, r5, #1
   15e5c:	cmp	fp, #0
   15e60:	add	r4, r4, r7
   15e64:	beq	15eac <__assert_fail@plt+0x4abc>
   15e68:	cmp	r5, #0
   15e6c:	mov	r1, r4
   15e70:	mov	r2, r7
   15e74:	mov	r0, r9
   15e78:	ldr	r8, [sl]
   15e7c:	beq	15e34 <__assert_fail@plt+0x4a44>
   15e80:	bl	11150 <memcmp@plt>
   15e84:	cmp	r0, #0
   15e88:	bne	15e34 <__assert_fail@plt+0x4a44>
   15e8c:	mov	r0, fp
   15e90:	bl	19760 <__assert_fail@plt+0x8370>
   15e94:	ldr	r2, [pc, #80]	; 15eec <__assert_fail@plt+0x4afc>
   15e98:	mov	r1, #1
   15e9c:	mov	r3, r0
   15ea0:	mov	r0, r8
   15ea4:	bl	11300 <__fprintf_chk@plt>
   15ea8:	b	15e54 <__assert_fail@plt+0x4a64>
   15eac:	ldr	r0, [sl]
   15eb0:	ldr	r3, [r0, #20]
   15eb4:	ldr	r2, [r0, #24]
   15eb8:	cmp	r3, r2
   15ebc:	bcs	15ed4 <__assert_fail@plt+0x4ae4>
   15ec0:	add	r1, r3, #1
   15ec4:	mov	r2, #10
   15ec8:	str	r1, [r0, #20]
   15ecc:	strb	r2, [r3]
   15ed0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed4:	mov	r1, #10
   15ed8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15edc:	b	11348 <__overflow@plt>
   15ee0:			; <UNDEFINED> instruction: 0x0002e1b0
   15ee4:	andeq	ip, r1, r4, lsl #23
   15ee8:	muleq	r1, ip, fp
   15eec:	andeq	ip, r1, r4, lsr #23
   15ef0:	push	{r4, r5, r6, r7, r8, lr}
   15ef4:	mov	r6, r1
   15ef8:	mov	r4, r2
   15efc:	mov	r5, r3
   15f00:	mov	r7, r0
   15f04:	ldr	r3, [sp, #24]
   15f08:	mov	r2, r5
   15f0c:	mov	r1, r4
   15f10:	mov	r0, r6
   15f14:	bl	15c88 <__assert_fail@plt+0x4898>
   15f18:	cmp	r0, #0
   15f1c:	popge	{r4, r5, r6, r7, r8, pc}
   15f20:	mov	r2, r0
   15f24:	mov	r1, r6
   15f28:	mov	r0, r7
   15f2c:	bl	15d7c <__assert_fail@plt+0x498c>
   15f30:	mov	r0, r4
   15f34:	ldr	r2, [sp, #24]
   15f38:	mov	r1, r5
   15f3c:	bl	15df0 <__assert_fail@plt+0x4a00>
   15f40:	ldr	r3, [sp, #28]
   15f44:	blx	r3
   15f48:	mvn	r0, #0
   15f4c:	pop	{r4, r5, r6, r7, r8, pc}
   15f50:	push	{r4, r5, r6, r7, r8, lr}
   15f54:	ldr	r7, [r1]
   15f58:	cmp	r7, #0
   15f5c:	beq	15f9c <__assert_fail@plt+0x4bac>
   15f60:	mov	r6, r3
   15f64:	mov	r8, r0
   15f68:	mov	r4, r2
   15f6c:	mov	r5, r1
   15f70:	b	15f80 <__assert_fail@plt+0x4b90>
   15f74:	ldr	r7, [r5, #4]!
   15f78:	cmp	r7, #0
   15f7c:	beq	15f9c <__assert_fail@plt+0x4bac>
   15f80:	mov	r1, r4
   15f84:	mov	r2, r6
   15f88:	mov	r0, r8
   15f8c:	bl	11150 <memcmp@plt>
   15f90:	add	r4, r4, r6
   15f94:	cmp	r0, #0
   15f98:	bne	15f74 <__assert_fail@plt+0x4b84>
   15f9c:	mov	r0, r7
   15fa0:	pop	{r4, r5, r6, r7, r8, pc}
   15fa4:	andeq	r0, r0, r0
   15fa8:	push	{r4, r5, r6, lr}
   15fac:	mov	r6, r0
   15fb0:	ldr	r4, [pc, #96]	; 16018 <__assert_fail@plt+0x4c28>
   15fb4:	mov	r5, r1
   15fb8:	ldr	r2, [r4]
   15fbc:	cmp	r2, #0
   15fc0:	beq	15ff4 <__assert_fail@plt+0x4c04>
   15fc4:	ldr	r2, [r4]
   15fc8:	cmp	r2, #0
   15fcc:	beq	15fe0 <__assert_fail@plt+0x4bf0>
   15fd0:	mov	r1, r5
   15fd4:	mov	r0, r6
   15fd8:	pop	{r4, r5, r6, lr}
   15fdc:	b	11330 <strtod_l@plt>
   15fe0:	cmp	r5, #0
   15fe4:	beq	16008 <__assert_fail@plt+0x4c18>
   15fe8:	str	r6, [r5]
   15fec:	vldr	d0, [pc, #28]	; 16010 <__assert_fail@plt+0x4c20>
   15ff0:	pop	{r4, r5, r6, pc}
   15ff4:	ldr	r1, [pc, #32]	; 1601c <__assert_fail@plt+0x4c2c>
   15ff8:	ldr	r0, [pc, #32]	; 16020 <__assert_fail@plt+0x4c30>
   15ffc:	bl	11378 <newlocale@plt>
   16000:	str	r0, [r4]
   16004:	b	15fc4 <__assert_fail@plt+0x4bd4>
   16008:	vldr	d0, [pc]	; 16010 <__assert_fail@plt+0x4c20>
   1600c:	pop	{r4, r5, r6, pc}
	...
   16018:	ldrdeq	lr, [r2], -r0
   1601c:	andeq	ip, r1, ip, lsr #23
   16020:			; <UNDEFINED> instruction: 0x00001fbf
   16024:	ldr	r3, [pc, #4]	; 16030 <__assert_fail@plt+0x4c40>
   16028:	str	r0, [r3]
   1602c:	bx	lr
   16030:	ldrdeq	lr, [r2], -r4
   16034:	ldr	r3, [pc, #4]	; 16040 <__assert_fail@plt+0x4c50>
   16038:	strb	r0, [r3, #4]
   1603c:	bx	lr
   16040:	ldrdeq	lr, [r2], -r4
   16044:	ldr	r3, [pc, #180]	; 16100 <__assert_fail@plt+0x4d10>
   16048:	push	{r4, r5, r6, lr}
   1604c:	sub	sp, sp, #8
   16050:	ldr	r0, [r3]
   16054:	bl	1ae74 <__assert_fail@plt+0x9a84>
   16058:	cmp	r0, #0
   1605c:	beq	16084 <__assert_fail@plt+0x4c94>
   16060:	bl	112c4 <__errno_location@plt>
   16064:	ldr	r5, [pc, #152]	; 16104 <__assert_fail@plt+0x4d14>
   16068:	ldrb	r3, [r5, #4]
   1606c:	cmp	r3, #0
   16070:	mov	r4, r0
   16074:	beq	160a0 <__assert_fail@plt+0x4cb0>
   16078:	ldr	r3, [r0]
   1607c:	cmp	r3, #32
   16080:	bne	160a0 <__assert_fail@plt+0x4cb0>
   16084:	ldr	r3, [pc, #124]	; 16108 <__assert_fail@plt+0x4d18>
   16088:	ldr	r0, [r3]
   1608c:	bl	1ae74 <__assert_fail@plt+0x9a84>
   16090:	cmp	r0, #0
   16094:	bne	160e0 <__assert_fail@plt+0x4cf0>
   16098:	add	sp, sp, #8
   1609c:	pop	{r4, r5, r6, pc}
   160a0:	mov	r2, #5
   160a4:	ldr	r1, [pc, #96]	; 1610c <__assert_fail@plt+0x4d1c>
   160a8:	mov	r0, #0
   160ac:	bl	11168 <dcgettext@plt>
   160b0:	mov	r6, r0
   160b4:	ldr	r0, [r5]
   160b8:	cmp	r0, #0
   160bc:	beq	160ec <__assert_fail@plt+0x4cfc>
   160c0:	ldr	r4, [r4]
   160c4:	bl	19580 <__assert_fail@plt+0x8190>
   160c8:	mov	r1, r4
   160cc:	str	r6, [sp]
   160d0:	ldr	r2, [pc, #56]	; 16110 <__assert_fail@plt+0x4d20>
   160d4:	mov	r3, r0
   160d8:	mov	r0, #0
   160dc:	bl	11204 <error@plt>
   160e0:	ldr	r3, [pc, #44]	; 16114 <__assert_fail@plt+0x4d24>
   160e4:	ldr	r0, [r3]
   160e8:	bl	11114 <_exit@plt>
   160ec:	mov	r3, r6
   160f0:	ldr	r1, [r4]
   160f4:	ldr	r2, [pc, #28]	; 16118 <__assert_fail@plt+0x4d28>
   160f8:	bl	11204 <error@plt>
   160fc:	b	160e0 <__assert_fail@plt+0x4cf0>
   16100:			; <UNDEFINED> instruction: 0x0002e1b4
   16104:	ldrdeq	lr, [r2], -r4
   16108:			; <UNDEFINED> instruction: 0x0002e1b0
   1610c:	andeq	fp, r1, r8, ror #17
   16110:	andeq	ip, r1, r4, ror #11
   16114:	andeq	lr, r2, r8, asr r1
   16118:	andeq	ip, r1, r8, ror #11
   1611c:	push	{r4, r5, r6, lr}
   16120:	mov	r4, r0
   16124:	ldrb	ip, [r0]
   16128:	sub	r5, ip, #47	; 0x2f
   1612c:	bl	161dc <__assert_fail@plt+0x4dec>
   16130:	clz	r5, r5
   16134:	lsr	r5, r5, #5
   16138:	sub	r0, r0, r4
   1613c:	cmp	r0, r5
   16140:	popls	{r4, r5, r6, pc}
   16144:	add	r3, r4, r0
   16148:	ldrb	r3, [r3, #-1]
   1614c:	cmp	r3, #47	; 0x2f
   16150:	popne	{r4, r5, r6, pc}
   16154:	sub	r0, r0, #2
   16158:	sub	ip, r4, #1
   1615c:	add	r3, r4, r0
   16160:	add	ip, ip, r5
   16164:	rsb	r2, r4, #1
   16168:	cmp	r3, ip
   1616c:	add	r0, r2, r3
   16170:	popeq	{r4, r5, r6, pc}
   16174:	ldrb	r1, [r3], #-1
   16178:	cmp	r1, #47	; 0x2f
   1617c:	beq	16168 <__assert_fail@plt+0x4d78>
   16180:	pop	{r4, r5, r6, pc}
   16184:	push	{r4, r5, r6, lr}
   16188:	mov	r6, r0
   1618c:	bl	1611c <__assert_fail@plt+0x4d2c>
   16190:	add	r3, r0, #1
   16194:	mov	r4, r0
   16198:	cmp	r0, #0
   1619c:	movne	r0, r3
   161a0:	addeq	r0, r3, #1
   161a4:	bl	11228 <malloc@plt>
   161a8:	subs	r5, r0, #0
   161ac:	beq	161d4 <__assert_fail@plt+0x4de4>
   161b0:	mov	r2, r4
   161b4:	mov	r1, r6
   161b8:	bl	11120 <memcpy@plt>
   161bc:	cmp	r4, #0
   161c0:	moveq	r3, #46	; 0x2e
   161c4:	moveq	r4, #1
   161c8:	strbeq	r3, [r5]
   161cc:	mov	r3, #0
   161d0:	strb	r3, [r5, r4]
   161d4:	mov	r0, r5
   161d8:	pop	{r4, r5, r6, pc}
   161dc:	ldrb	r3, [r0]
   161e0:	cmp	r3, #47	; 0x2f
   161e4:	bne	161f4 <__assert_fail@plt+0x4e04>
   161e8:	ldrb	r3, [r0, #1]!
   161ec:	cmp	r3, #47	; 0x2f
   161f0:	beq	161e8 <__assert_fail@plt+0x4df8>
   161f4:	cmp	r3, #0
   161f8:	bxeq	lr
   161fc:	mov	r2, r0
   16200:	mov	r1, #0
   16204:	cmp	r3, #47	; 0x2f
   16208:	moveq	r1, #1
   1620c:	beq	1621c <__assert_fail@plt+0x4e2c>
   16210:	cmp	r1, #0
   16214:	movne	r0, r2
   16218:	movne	r1, #0
   1621c:	ldrb	r3, [r2, #1]!
   16220:	cmp	r3, #0
   16224:	bne	16204 <__assert_fail@plt+0x4e14>
   16228:	bx	lr
   1622c:	push	{r4, lr}
   16230:	mov	r4, r0
   16234:	bl	11288 <strlen@plt>
   16238:	cmp	r0, #1
   1623c:	popls	{r4, pc}
   16240:	add	r2, r4, r0
   16244:	mov	r3, r0
   16248:	ldrb	r2, [r2, #-1]
   1624c:	cmp	r2, #47	; 0x2f
   16250:	subeq	r3, r0, #2
   16254:	addeq	r3, r4, r3
   16258:	rsbeq	r1, r4, #1
   1625c:	popne	{r4, pc}
   16260:	cmp	r3, r4
   16264:	add	r0, r1, r3
   16268:	popeq	{r4, pc}
   1626c:	ldrb	r2, [r3], #-1
   16270:	cmp	r2, #47	; 0x2f
   16274:	popne	{r4, pc}
   16278:	b	16260 <__assert_fail@plt+0x4e70>
   1627c:	push	{r1, r2, r3}
   16280:	push	{r4, lr}
   16284:	sub	sp, sp, #12
   16288:	ldr	r4, [pc, #68]	; 162d4 <__assert_fail@plt+0x4ee4>
   1628c:	ldr	r1, [sp, #20]
   16290:	ldr	r3, [r4]
   16294:	ands	r2, r1, #64	; 0x40
   16298:	str	r3, [sp, #4]
   1629c:	ldrne	r2, [sp, #24]
   162a0:	addne	r3, sp, #24
   162a4:	strne	r3, [sp]
   162a8:	bl	11210 <open64@plt>
   162ac:	bl	197e0 <__assert_fail@plt+0x83f0>
   162b0:	ldr	r2, [sp, #4]
   162b4:	ldr	r3, [r4]
   162b8:	cmp	r2, r3
   162bc:	bne	162d0 <__assert_fail@plt+0x4ee0>
   162c0:	add	sp, sp, #12
   162c4:	pop	{r4, lr}
   162c8:	add	sp, sp, #12
   162cc:	bx	lr
   162d0:	bl	11174 <__stack_chk_fail@plt>
   162d4:	andeq	sp, r2, r8, lsl #30
   162d8:	cmp	r0, #10
   162dc:	movcc	r0, #10
   162e0:	push	{r4, r5, r6, r7, r8, lr}
   162e4:	orr	r7, r0, #1
   162e8:	cmn	r7, #1
   162ec:	beq	16364 <__assert_fail@plt+0x4f74>
   162f0:	ldr	r8, [pc, #116]	; 1636c <__assert_fail@plt+0x4f7c>
   162f4:	umull	r2, r3, r8, r7
   162f8:	cmp	r7, #9
   162fc:	lsr	r3, r3, #1
   16300:	add	r3, r3, r3, lsl #1
   16304:	sub	r3, r7, r3
   16308:	bls	16350 <__assert_fail@plt+0x4f60>
   1630c:	cmp	r3, #0
   16310:	beq	16358 <__assert_fail@plt+0x4f68>
   16314:	mov	r6, #16
   16318:	mov	r5, #9
   1631c:	mov	r4, #3
   16320:	b	16330 <__assert_fail@plt+0x4f40>
   16324:	cmp	r1, #0
   16328:	add	r6, r6, #8
   1632c:	beq	16358 <__assert_fail@plt+0x4f68>
   16330:	add	r4, r4, #2
   16334:	mov	r1, r4
   16338:	mov	r0, r7
   1633c:	bl	1b3cc <__assert_fail@plt+0x9fdc>
   16340:	add	r5, r5, r6
   16344:	cmp	r5, r7
   16348:	mov	r3, r1
   1634c:	bcc	16324 <__assert_fail@plt+0x4f34>
   16350:	cmp	r3, #0
   16354:	bne	16364 <__assert_fail@plt+0x4f74>
   16358:	add	r7, r7, #2
   1635c:	cmn	r7, #1
   16360:	bne	162f4 <__assert_fail@plt+0x4f04>
   16364:	mov	r0, r7
   16368:	pop	{r4, r5, r6, r7, r8, pc}
   1636c:	bge	feac0e20 <optarg@@GLIBC_2.4+0xfea92c68>
   16370:	push	{r4, lr}
   16374:	ror	r0, r0, #3
   16378:	bl	1b3cc <__assert_fail@plt+0x9fdc>
   1637c:	mov	r0, r1
   16380:	pop	{r4, pc}
   16384:	sub	r0, r1, r0
   16388:	clz	r0, r0
   1638c:	lsr	r0, r0, #5
   16390:	bx	lr
   16394:	push	{r4, lr}
   16398:	mov	r4, r0
   1639c:	mov	r0, r1
   163a0:	ldr	r3, [r4, #24]
   163a4:	ldr	r1, [r4, #8]
   163a8:	blx	r3
   163ac:	ldr	r3, [r4, #8]
   163b0:	cmp	r3, r0
   163b4:	bls	163c4 <__assert_fail@plt+0x4fd4>
   163b8:	ldr	r3, [r4]
   163bc:	add	r0, r3, r0, lsl #3
   163c0:	pop	{r4, pc}
   163c4:	bl	113cc <abort@plt>
   163c8:	push	{r4, r5, r6, r7, r8, lr}
   163cc:	mov	r8, r2
   163d0:	mov	r5, r1
   163d4:	mov	r7, r3
   163d8:	mov	r6, r0
   163dc:	bl	16394 <__assert_fail@plt+0x4fa4>
   163e0:	str	r0, [r8]
   163e4:	ldr	r1, [r0]
   163e8:	cmp	r1, #0
   163ec:	beq	164d4 <__assert_fail@plt+0x50e4>
   163f0:	cmp	r1, r5
   163f4:	mov	r4, r0
   163f8:	beq	16498 <__assert_fail@plt+0x50a8>
   163fc:	ldr	r3, [r6, #28]
   16400:	mov	r0, r5
   16404:	blx	r3
   16408:	cmp	r0, #0
   1640c:	ldrne	r3, [r4]
   16410:	bne	1649c <__assert_fail@plt+0x50ac>
   16414:	ldr	r2, [r4, #4]
   16418:	cmp	r2, #0
   1641c:	beq	164d4 <__assert_fail@plt+0x50e4>
   16420:	ldr	r3, [r2]
   16424:	cmp	r5, r3
   16428:	bne	1644c <__assert_fail@plt+0x505c>
   1642c:	b	1646c <__assert_fail@plt+0x507c>
   16430:	ldr	r4, [r4, #4]
   16434:	ldr	r2, [r4, #4]
   16438:	cmp	r2, #0
   1643c:	beq	164d4 <__assert_fail@plt+0x50e4>
   16440:	ldr	r3, [r2]
   16444:	cmp	r3, r5
   16448:	beq	1646c <__assert_fail@plt+0x507c>
   1644c:	mov	r1, r3
   16450:	mov	r0, r5
   16454:	ldr	r3, [r6, #28]
   16458:	blx	r3
   1645c:	cmp	r0, #0
   16460:	beq	16430 <__assert_fail@plt+0x5040>
   16464:	ldr	r2, [r4, #4]
   16468:	ldr	r3, [r2]
   1646c:	cmp	r7, #0
   16470:	beq	164cc <__assert_fail@plt+0x50dc>
   16474:	ldr	r0, [r2, #4]
   16478:	mov	r1, #0
   1647c:	str	r0, [r4, #4]
   16480:	str	r1, [r2]
   16484:	ldr	r1, [r6, #36]	; 0x24
   16488:	mov	r0, r3
   1648c:	str	r1, [r2, #4]
   16490:	str	r2, [r6, #36]	; 0x24
   16494:	pop	{r4, r5, r6, r7, r8, pc}
   16498:	mov	r3, r1
   1649c:	cmp	r7, #0
   164a0:	beq	164cc <__assert_fail@plt+0x50dc>
   164a4:	ldr	r2, [r4, #4]
   164a8:	cmp	r2, #0
   164ac:	movne	ip, #0
   164b0:	ldmne	r2, {r0, r1}
   164b4:	streq	r2, [r4]
   164b8:	stmne	r4, {r0, r1}
   164bc:	strne	ip, [r2]
   164c0:	ldrne	r1, [r6, #36]	; 0x24
   164c4:	strne	r1, [r2, #4]
   164c8:	strne	r2, [r6, #36]	; 0x24
   164cc:	mov	r0, r3
   164d0:	pop	{r4, r5, r6, r7, r8, pc}
   164d4:	mov	r3, #0
   164d8:	mov	r0, r3
   164dc:	pop	{r4, r5, r6, r7, r8, pc}
   164e0:	ldr	r2, [pc, #164]	; 1658c <__assert_fail@plt+0x519c>
   164e4:	ldr	r3, [r0]
   164e8:	cmp	r3, r2
   164ec:	beq	16574 <__assert_fail@plt+0x5184>
   164f0:	vldr	s15, [r3, #8]
   164f4:	vldr	s14, [pc, #128]	; 1657c <__assert_fail@plt+0x518c>
   164f8:	vcmpe.f32	s15, s14
   164fc:	vmrs	APSR_nzcv, fpscr
   16500:	ble	16568 <__assert_fail@plt+0x5178>
   16504:	vldr	s13, [pc, #116]	; 16580 <__assert_fail@plt+0x5190>
   16508:	vcmpe.f32	s15, s13
   1650c:	vmrs	APSR_nzcv, fpscr
   16510:	bpl	16568 <__assert_fail@plt+0x5178>
   16514:	vldr	s13, [pc, #104]	; 16584 <__assert_fail@plt+0x5194>
   16518:	vldr	s12, [r3, #12]
   1651c:	vcmpe.f32	s12, s13
   16520:	vmrs	APSR_nzcv, fpscr
   16524:	ble	16568 <__assert_fail@plt+0x5178>
   16528:	vldr	s13, [r3]
   1652c:	vcmpe.f32	s13, #0.0
   16530:	vmrs	APSR_nzcv, fpscr
   16534:	blt	16568 <__assert_fail@plt+0x5178>
   16538:	vadd.f32	s14, s13, s14
   1653c:	vldr	s13, [r3, #4]
   16540:	vcmpe.f32	s14, s13
   16544:	vmrs	APSR_nzcv, fpscr
   16548:	bpl	16568 <__assert_fail@plt+0x5178>
   1654c:	vldr	s12, [pc, #52]	; 16588 <__assert_fail@plt+0x5198>
   16550:	vcmpe.f32	s13, s12
   16554:	vmrs	APSR_nzcv, fpscr
   16558:	bhi	16568 <__assert_fail@plt+0x5178>
   1655c:	vcmpe.f32	s15, s14
   16560:	vmrs	APSR_nzcv, fpscr
   16564:	bgt	16574 <__assert_fail@plt+0x5184>
   16568:	str	r2, [r0]
   1656c:	mov	r0, #0
   16570:	bx	lr
   16574:	mov	r0, #1
   16578:	bx	lr
   1657c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16580:	svccc	0x00666666
   16584:	svccc	0x008ccccd
   16588:	svccc	0x00800000
   1658c:			; <UNDEFINED> instruction: 0x0001cbb0
   16590:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16594:	ldr	r3, [r1, #4]
   16598:	ldr	r6, [r1]
   1659c:	cmp	r6, r3
   165a0:	bcs	16668 <__assert_fail@plt+0x5278>
   165a4:	mov	r8, r2
   165a8:	mov	r5, r0
   165ac:	mov	r7, r1
   165b0:	add	r6, r6, #8
   165b4:	mov	r9, #0
   165b8:	b	165c8 <__assert_fail@plt+0x51d8>
   165bc:	cmp	r3, r6
   165c0:	add	r6, r6, #8
   165c4:	bls	16668 <__assert_fail@plt+0x5278>
   165c8:	ldr	sl, [r6, #-8]
   165cc:	cmp	sl, #0
   165d0:	beq	165bc <__assert_fail@plt+0x51cc>
   165d4:	ldr	r4, [r6, #-4]
   165d8:	cmp	r4, #0
   165dc:	bne	165fc <__assert_fail@plt+0x520c>
   165e0:	b	1664c <__assert_fail@plt+0x525c>
   165e4:	ldr	r2, [r0, #4]
   165e8:	cmp	r3, #0
   165ec:	str	r2, [r4, #4]
   165f0:	str	r4, [r0, #4]
   165f4:	mov	r4, r3
   165f8:	beq	16648 <__assert_fail@plt+0x5258>
   165fc:	ldr	sl, [r4]
   16600:	mov	r0, r5
   16604:	mov	r1, sl
   16608:	bl	16394 <__assert_fail@plt+0x4fa4>
   1660c:	ldr	r3, [r4, #4]
   16610:	ldr	r2, [r0]
   16614:	cmp	r2, #0
   16618:	bne	165e4 <__assert_fail@plt+0x51f4>
   1661c:	ldr	r1, [r5, #12]
   16620:	str	sl, [r0]
   16624:	add	r1, r1, #1
   16628:	str	r1, [r5, #12]
   1662c:	str	r2, [r4]
   16630:	ldr	r2, [r5, #36]	; 0x24
   16634:	cmp	r3, #0
   16638:	str	r2, [r4, #4]
   1663c:	str	r4, [r5, #36]	; 0x24
   16640:	mov	r4, r3
   16644:	bne	165fc <__assert_fail@plt+0x520c>
   16648:	ldr	sl, [r6, #-8]
   1664c:	cmp	r8, #0
   16650:	str	r9, [r6, #-4]
   16654:	beq	16670 <__assert_fail@plt+0x5280>
   16658:	ldr	r3, [r7, #4]
   1665c:	cmp	r3, r6
   16660:	add	r6, r6, #8
   16664:	bhi	165c8 <__assert_fail@plt+0x51d8>
   16668:	mov	r0, #1
   1666c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16670:	mov	r1, sl
   16674:	mov	r0, r5
   16678:	bl	16394 <__assert_fail@plt+0x4fa4>
   1667c:	ldr	r3, [r0]
   16680:	mov	r4, r0
   16684:	cmp	r3, #0
   16688:	beq	166c8 <__assert_fail@plt+0x52d8>
   1668c:	ldr	r0, [r5, #36]	; 0x24
   16690:	cmp	r0, #0
   16694:	beq	166dc <__assert_fail@plt+0x52ec>
   16698:	ldr	r3, [r0, #4]
   1669c:	str	r3, [r5, #36]	; 0x24
   166a0:	ldr	r3, [r4, #4]
   166a4:	str	sl, [r0]
   166a8:	str	r3, [r0, #4]
   166ac:	str	r0, [r4, #4]
   166b0:	ldr	r2, [r7, #12]
   166b4:	str	r9, [r6, #-8]
   166b8:	sub	r2, r2, #1
   166bc:	ldr	r3, [r7, #4]
   166c0:	str	r2, [r7, #12]
   166c4:	b	165bc <__assert_fail@plt+0x51cc>
   166c8:	ldr	r3, [r5, #12]
   166cc:	str	sl, [r0]
   166d0:	add	r3, r3, #1
   166d4:	str	r3, [r5, #12]
   166d8:	b	166b0 <__assert_fail@plt+0x52c0>
   166dc:	mov	r0, #8
   166e0:	bl	11228 <malloc@plt>
   166e4:	cmp	r0, #0
   166e8:	bne	166a0 <__assert_fail@plt+0x52b0>
   166ec:	mov	r0, r8
   166f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166f4:	ldr	r0, [r0, #8]
   166f8:	bx	lr
   166fc:	ldr	r0, [r0, #12]
   16700:	bx	lr
   16704:	ldr	r0, [r0, #16]
   16708:	bx	lr
   1670c:	ldm	r0, {r1, r3}
   16710:	cmp	r1, r3
   16714:	bcs	1677c <__assert_fail@plt+0x538c>
   16718:	sub	ip, r3, #1
   1671c:	sub	ip, ip, r1
   16720:	add	r3, r1, #16
   16724:	bic	ip, ip, #7
   16728:	add	ip, ip, r3
   1672c:	add	r1, r1, #8
   16730:	mov	r0, #0
   16734:	b	16744 <__assert_fail@plt+0x5354>
   16738:	add	r1, r1, #8
   1673c:	cmp	r1, ip
   16740:	bxeq	lr
   16744:	ldr	r3, [r1, #-8]
   16748:	cmp	r3, #0
   1674c:	beq	16738 <__assert_fail@plt+0x5348>
   16750:	ldr	r3, [r1, #-4]
   16754:	mov	r2, #1
   16758:	cmp	r3, #0
   1675c:	beq	16770 <__assert_fail@plt+0x5380>
   16760:	ldr	r3, [r3, #4]
   16764:	add	r2, r2, #1
   16768:	cmp	r3, #0
   1676c:	bne	16760 <__assert_fail@plt+0x5370>
   16770:	cmp	r0, r2
   16774:	movcc	r0, r2
   16778:	b	16738 <__assert_fail@plt+0x5348>
   1677c:	mov	r0, #0
   16780:	bx	lr
   16784:	ldm	r0, {r1, r3}
   16788:	push	{lr}		; (str lr, [sp, #-4]!)
   1678c:	cmp	r1, r3
   16790:	bcs	16820 <__assert_fail@plt+0x5430>
   16794:	sub	ip, r3, #1
   16798:	sub	ip, ip, r1
   1679c:	add	r3, r1, #16
   167a0:	bic	ip, ip, #7
   167a4:	mov	r2, #0
   167a8:	add	ip, ip, r3
   167ac:	add	r1, r1, #8
   167b0:	mov	lr, r2
   167b4:	b	167c4 <__assert_fail@plt+0x53d4>
   167b8:	add	r1, r1, #8
   167bc:	cmp	r1, ip
   167c0:	beq	16800 <__assert_fail@plt+0x5410>
   167c4:	ldr	r3, [r1, #-8]
   167c8:	cmp	r3, #0
   167cc:	beq	167b8 <__assert_fail@plt+0x53c8>
   167d0:	ldr	r3, [r1, #-4]
   167d4:	add	lr, lr, #1
   167d8:	cmp	r3, #0
   167dc:	add	r2, r2, #1
   167e0:	beq	167b8 <__assert_fail@plt+0x53c8>
   167e4:	ldr	r3, [r3, #4]
   167e8:	add	r2, r2, #1
   167ec:	cmp	r3, #0
   167f0:	bne	167e4 <__assert_fail@plt+0x53f4>
   167f4:	add	r1, r1, #8
   167f8:	cmp	r1, ip
   167fc:	bne	167c4 <__assert_fail@plt+0x53d4>
   16800:	ldr	r3, [r0, #12]
   16804:	cmp	r3, lr
   16808:	ldreq	r0, [r0, #16]
   1680c:	subeq	r0, r0, r2
   16810:	clzeq	r0, r0
   16814:	lsreq	r0, r0, #5
   16818:	movne	r0, #0
   1681c:	pop	{pc}		; (ldr pc, [sp], #4)
   16820:	mov	r2, #0
   16824:	mov	lr, r2
   16828:	b	16800 <__assert_fail@plt+0x5410>
   1682c:	push	{r4, r5, r6, r7, lr}
   16830:	mov	r4, r1
   16834:	ldr	r2, [r0]
   16838:	ldr	r1, [r0, #4]
   1683c:	sub	sp, sp, #12
   16840:	cmp	r2, r1
   16844:	ldr	r3, [r0, #16]
   16848:	ldrd	r6, [r0, #8]
   1684c:	bcs	16930 <__assert_fail@plt+0x5540>
   16850:	sub	ip, r1, #1
   16854:	sub	ip, ip, r2
   16858:	bic	ip, ip, #7
   1685c:	add	r1, r2, #16
   16860:	add	ip, ip, r1
   16864:	add	r0, r2, #8
   16868:	mov	r5, #0
   1686c:	b	1687c <__assert_fail@plt+0x548c>
   16870:	add	r0, r0, #8
   16874:	cmp	r0, ip
   16878:	beq	168bc <__assert_fail@plt+0x54cc>
   1687c:	ldr	r2, [r0, #-8]
   16880:	cmp	r2, #0
   16884:	beq	16870 <__assert_fail@plt+0x5480>
   16888:	ldr	r2, [r0, #-4]
   1688c:	mov	r1, #1
   16890:	cmp	r2, #0
   16894:	beq	168a8 <__assert_fail@plt+0x54b8>
   16898:	ldr	r2, [r2, #4]
   1689c:	add	r1, r1, #1
   168a0:	cmp	r2, #0
   168a4:	bne	16898 <__assert_fail@plt+0x54a8>
   168a8:	cmp	r5, r1
   168ac:	add	r0, r0, #8
   168b0:	movcc	r5, r1
   168b4:	cmp	r0, ip
   168b8:	bne	1687c <__assert_fail@plt+0x548c>
   168bc:	ldr	r2, [pc, #124]	; 16940 <__assert_fail@plt+0x5550>
   168c0:	mov	r1, #1
   168c4:	mov	r0, r4
   168c8:	bl	11300 <__fprintf_chk@plt>
   168cc:	mov	r3, r6
   168d0:	ldr	r2, [pc, #108]	; 16944 <__assert_fail@plt+0x5554>
   168d4:	mov	r1, #1
   168d8:	mov	r0, r4
   168dc:	bl	11300 <__fprintf_chk@plt>
   168e0:	vmov	s15, r7
   168e4:	vldr	d5, [pc, #76]	; 16938 <__assert_fail@plt+0x5548>
   168e8:	mov	r3, r7
   168ec:	ldr	r2, [pc, #84]	; 16948 <__assert_fail@plt+0x5558>
   168f0:	vcvt.f64.u32	d6, s15
   168f4:	vmov	s15, r6
   168f8:	mov	r1, #1
   168fc:	mov	r0, r4
   16900:	vcvt.f64.u32	d7, s15
   16904:	vmul.f64	d6, d6, d5
   16908:	vdiv.f64	d5, d6, d7
   1690c:	vstr	d5, [sp]
   16910:	bl	11300 <__fprintf_chk@plt>
   16914:	mov	r3, r5
   16918:	mov	r0, r4
   1691c:	ldr	r2, [pc, #40]	; 1694c <__assert_fail@plt+0x555c>
   16920:	mov	r1, #1
   16924:	add	sp, sp, #12
   16928:	pop	{r4, r5, r6, r7, lr}
   1692c:	b	11300 <__fprintf_chk@plt>
   16930:	mov	r5, #0
   16934:	b	168bc <__assert_fail@plt+0x54cc>
   16938:	andeq	r0, r0, r0
   1693c:	subsmi	r0, r9, r0
   16940:	andeq	ip, r1, r4, asr #23
   16944:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   16948:	strdeq	ip, [r1], -r4
   1694c:	andeq	ip, r1, r8, lsl ip
   16950:	push	{r4, r5, r6, lr}
   16954:	mov	r6, r0
   16958:	mov	r5, r1
   1695c:	bl	16394 <__assert_fail@plt+0x4fa4>
   16960:	ldr	r3, [r0]
   16964:	cmp	r3, #0
   16968:	beq	169a4 <__assert_fail@plt+0x55b4>
   1696c:	mov	r4, r0
   16970:	b	16978 <__assert_fail@plt+0x5588>
   16974:	ldr	r3, [r4]
   16978:	cmp	r3, r5
   1697c:	mov	r1, r3
   16980:	mov	r0, r5
   16984:	beq	169b0 <__assert_fail@plt+0x55c0>
   16988:	ldr	r3, [r6, #28]
   1698c:	blx	r3
   16990:	cmp	r0, #0
   16994:	bne	169ac <__assert_fail@plt+0x55bc>
   16998:	ldr	r4, [r4, #4]
   1699c:	cmp	r4, #0
   169a0:	bne	16974 <__assert_fail@plt+0x5584>
   169a4:	mov	r0, #0
   169a8:	pop	{r4, r5, r6, pc}
   169ac:	ldr	r5, [r4]
   169b0:	mov	r0, r5
   169b4:	pop	{r4, r5, r6, pc}
   169b8:	ldr	r3, [r0, #16]
   169bc:	cmp	r3, #0
   169c0:	beq	16a10 <__assert_fail@plt+0x5620>
   169c4:	ldr	r3, [r0]
   169c8:	ldr	r2, [r0, #4]
   169cc:	cmp	r3, r2
   169d0:	bcs	16a08 <__assert_fail@plt+0x5618>
   169d4:	ldr	r0, [r3]
   169d8:	cmp	r0, #0
   169dc:	bxne	lr
   169e0:	sub	r2, r2, #1
   169e4:	sub	r2, r2, r3
   169e8:	bic	r2, r2, #7
   169ec:	add	r2, r3, r2
   169f0:	b	16a00 <__assert_fail@plt+0x5610>
   169f4:	ldr	r0, [r3, #8]!
   169f8:	cmp	r0, #0
   169fc:	bxne	lr
   16a00:	cmp	r3, r2
   16a04:	bne	169f4 <__assert_fail@plt+0x5604>
   16a08:	push	{r4, lr}
   16a0c:	bl	113cc <abort@plt>
   16a10:	mov	r0, r3
   16a14:	bx	lr
   16a18:	push	{r4, r5, r6, lr}
   16a1c:	mov	r5, r0
   16a20:	mov	r4, r1
   16a24:	bl	16394 <__assert_fail@plt+0x4fa4>
   16a28:	mov	r2, r0
   16a2c:	mov	r3, r0
   16a30:	b	16a3c <__assert_fail@plt+0x564c>
   16a34:	cmp	r3, #0
   16a38:	beq	16a50 <__assert_fail@plt+0x5660>
   16a3c:	ldm	r3, {r1, r3}
   16a40:	cmp	r1, r4
   16a44:	bne	16a34 <__assert_fail@plt+0x5644>
   16a48:	cmp	r3, #0
   16a4c:	bne	16a78 <__assert_fail@plt+0x5688>
   16a50:	ldr	r3, [r5, #4]
   16a54:	b	16a64 <__assert_fail@plt+0x5674>
   16a58:	ldr	r0, [r2]
   16a5c:	cmp	r0, #0
   16a60:	popne	{r4, r5, r6, pc}
   16a64:	add	r2, r2, #8
   16a68:	cmp	r3, r2
   16a6c:	bhi	16a58 <__assert_fail@plt+0x5668>
   16a70:	mov	r0, #0
   16a74:	pop	{r4, r5, r6, pc}
   16a78:	ldr	r0, [r3]
   16a7c:	pop	{r4, r5, r6, pc}
   16a80:	push	{r4, r5, lr}
   16a84:	ldm	r0, {r5, lr}
   16a88:	cmp	lr, r5
   16a8c:	bls	16b10 <__assert_fail@plt+0x5720>
   16a90:	mov	ip, #0
   16a94:	ldr	r3, [r5]
   16a98:	cmp	r3, #0
   16a9c:	bne	16ab8 <__assert_fail@plt+0x56c8>
   16aa0:	add	r5, r5, #8
   16aa4:	cmp	lr, r5
   16aa8:	bhi	16a94 <__assert_fail@plt+0x56a4>
   16aac:	mov	r2, ip
   16ab0:	mov	r0, r2
   16ab4:	pop	{r4, r5, pc}
   16ab8:	cmp	r2, ip
   16abc:	bls	16aac <__assert_fail@plt+0x56bc>
   16ac0:	str	r3, [r1, ip, lsl #2]
   16ac4:	ldr	r3, [r5, #4]
   16ac8:	add	r4, ip, #1
   16acc:	cmp	r3, #0
   16ad0:	add	lr, r1, ip, lsl #2
   16ad4:	beq	16b04 <__assert_fail@plt+0x5714>
   16ad8:	mov	ip, r4
   16adc:	cmp	r2, ip
   16ae0:	beq	16ab0 <__assert_fail@plt+0x56c0>
   16ae4:	ldr	r4, [r3]
   16ae8:	add	ip, ip, #1
   16aec:	str	r4, [lr, #4]!
   16af0:	ldr	r3, [r3, #4]
   16af4:	cmp	r3, #0
   16af8:	bne	16adc <__assert_fail@plt+0x56ec>
   16afc:	ldr	lr, [r0, #4]
   16b00:	b	16aa0 <__assert_fail@plt+0x56b0>
   16b04:	ldr	lr, [r0, #4]
   16b08:	mov	ip, r4
   16b0c:	b	16aa0 <__assert_fail@plt+0x56b0>
   16b10:	mov	r2, #0
   16b14:	b	16ab0 <__assert_fail@plt+0x56c0>
   16b18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b1c:	ldr	r3, [r0, #4]
   16b20:	ldr	r8, [r0]
   16b24:	cmp	r3, r8
   16b28:	bls	16b90 <__assert_fail@plt+0x57a0>
   16b2c:	mov	r7, r2
   16b30:	mov	r6, r1
   16b34:	mov	r9, r0
   16b38:	mov	r5, #0
   16b3c:	ldr	r0, [r8]
   16b40:	cmp	r0, #0
   16b44:	bne	16b5c <__assert_fail@plt+0x576c>
   16b48:	add	r8, r8, #8
   16b4c:	cmp	r3, r8
   16b50:	bhi	16b3c <__assert_fail@plt+0x574c>
   16b54:	mov	r0, r5
   16b58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b5c:	mov	r4, r8
   16b60:	b	16b68 <__assert_fail@plt+0x5778>
   16b64:	ldr	r0, [r4]
   16b68:	mov	r1, r7
   16b6c:	blx	r6
   16b70:	cmp	r0, #0
   16b74:	beq	16b54 <__assert_fail@plt+0x5764>
   16b78:	ldr	r4, [r4, #4]
   16b7c:	add	r5, r5, #1
   16b80:	cmp	r4, #0
   16b84:	bne	16b64 <__assert_fail@plt+0x5774>
   16b88:	ldr	r3, [r9, #4]
   16b8c:	b	16b48 <__assert_fail@plt+0x5758>
   16b90:	mov	r5, #0
   16b94:	b	16b54 <__assert_fail@plt+0x5764>
   16b98:	push	{r4, r5, r6, lr}
   16b9c:	mov	r4, r0
   16ba0:	ldrb	r0, [r0]
   16ba4:	cmp	r0, #0
   16ba8:	beq	16bd8 <__assert_fail@plt+0x57e8>
   16bac:	mov	r5, r1
   16bb0:	mov	r1, #0
   16bb4:	rsb	r1, r1, r1, lsl #5
   16bb8:	add	r0, r1, r0
   16bbc:	mov	r1, r5
   16bc0:	bl	1b3cc <__assert_fail@plt+0x9fdc>
   16bc4:	ldrb	r0, [r4, #1]!
   16bc8:	cmp	r0, #0
   16bcc:	bne	16bb4 <__assert_fail@plt+0x57c4>
   16bd0:	mov	r0, r1
   16bd4:	pop	{r4, r5, r6, pc}
   16bd8:	mov	r1, r0
   16bdc:	mov	r0, r1
   16be0:	pop	{r4, r5, r6, pc}
   16be4:	push	{lr}		; (str lr, [sp, #-4]!)
   16be8:	mov	ip, r0
   16bec:	ldr	lr, [pc, #16]	; 16c04 <__assert_fail@plt+0x5814>
   16bf0:	ldm	lr!, {r0, r1, r2, r3}
   16bf4:	ldr	lr, [lr]
   16bf8:	stmia	ip!, {r0, r1, r2, r3}
   16bfc:	str	lr, [ip]
   16c00:	pop	{pc}		; (ldr pc, [sp], #4)
   16c04:			; <UNDEFINED> instruction: 0x0001cbb0
   16c08:	push	{r4, r5, r6, r7, r8, lr}
   16c0c:	sub	sp, sp, #8
   16c10:	cmp	r2, #0
   16c14:	ldr	ip, [pc, #300]	; 16d48 <__assert_fail@plt+0x5958>
   16c18:	str	r0, [sp, #4]
   16c1c:	ldr	r5, [pc, #296]	; 16d4c <__assert_fail@plt+0x595c>
   16c20:	mov	r0, #40	; 0x28
   16c24:	movne	r5, r2
   16c28:	cmp	r3, #0
   16c2c:	movne	r8, r3
   16c30:	moveq	r8, ip
   16c34:	mov	r6, r1
   16c38:	bl	11228 <malloc@plt>
   16c3c:	subs	r4, r0, #0
   16c40:	beq	16d0c <__assert_fail@plt+0x591c>
   16c44:	cmp	r6, #0
   16c48:	add	r0, r4, #20
   16c4c:	beq	16ce8 <__assert_fail@plt+0x58f8>
   16c50:	str	r6, [r4, #20]
   16c54:	bl	164e0 <__assert_fail@plt+0x50f0>
   16c58:	cmp	r0, #0
   16c5c:	beq	16d00 <__assert_fail@plt+0x5910>
   16c60:	ldrb	r3, [r6, #16]
   16c64:	cmp	r3, #0
   16c68:	vldreq	s13, [r6, #8]
   16c6c:	beq	16d18 <__assert_fail@plt+0x5928>
   16c70:	ldr	r0, [sp, #4]
   16c74:	bl	162d8 <__assert_fail@plt+0x4ee8>
   16c78:	lsrs	r3, r0, #30
   16c7c:	movne	r7, #1
   16c80:	moveq	r7, #0
   16c84:	tst	r0, #536870912	; 0x20000000
   16c88:	mov	r6, r0
   16c8c:	bne	16d00 <__assert_fail@plt+0x5910>
   16c90:	cmp	r7, #0
   16c94:	bne	16d00 <__assert_fail@plt+0x5910>
   16c98:	cmp	r0, #0
   16c9c:	str	r0, [r4, #8]
   16ca0:	beq	16d00 <__assert_fail@plt+0x5910>
   16ca4:	mov	r1, #8
   16ca8:	bl	110a8 <calloc@plt>
   16cac:	cmp	r0, #0
   16cb0:	str	r0, [r4]
   16cb4:	beq	16d00 <__assert_fail@plt+0x5910>
   16cb8:	ldr	r3, [sp, #32]
   16cbc:	add	r0, r0, r6, lsl #3
   16cc0:	str	r0, [r4, #4]
   16cc4:	str	r7, [r4, #12]
   16cc8:	mov	r0, r4
   16ccc:	str	r7, [r4, #16]
   16cd0:	str	r5, [r4, #24]
   16cd4:	str	r8, [r4, #28]
   16cd8:	str	r3, [r4, #32]
   16cdc:	str	r7, [r4, #36]	; 0x24
   16ce0:	add	sp, sp, #8
   16ce4:	pop	{r4, r5, r6, r7, r8, pc}
   16ce8:	ldr	r3, [pc, #96]	; 16d50 <__assert_fail@plt+0x5960>
   16cec:	str	r3, [r4, #20]
   16cf0:	bl	164e0 <__assert_fail@plt+0x50f0>
   16cf4:	cmp	r0, #0
   16cf8:	vldrne	s13, [pc, #64]	; 16d40 <__assert_fail@plt+0x5950>
   16cfc:	bne	16d18 <__assert_fail@plt+0x5928>
   16d00:	mov	r0, r4
   16d04:	bl	110fc <free@plt>
   16d08:	mov	r4, #0
   16d0c:	mov	r0, r4
   16d10:	add	sp, sp, #8
   16d14:	pop	{r4, r5, r6, r7, r8, pc}
   16d18:	vldr	s15, [sp, #4]
   16d1c:	vldr	s14, [pc, #32]	; 16d44 <__assert_fail@plt+0x5954>
   16d20:	vcvt.f32.u32	s12, s15
   16d24:	vdiv.f32	s15, s12, s13
   16d28:	vcmpe.f32	s15, s14
   16d2c:	vmrs	APSR_nzcv, fpscr
   16d30:	bge	16d00 <__assert_fail@plt+0x5910>
   16d34:	vcvt.u32.f32	s15, s15
   16d38:	vstr	s15, [sp, #4]
   16d3c:	b	16c70 <__assert_fail@plt+0x5880>
   16d40:	svccc	0x004ccccd
   16d44:	svcmi	0x00800000
   16d48:	andeq	r6, r1, r4, lsl #7
   16d4c:	andeq	r6, r1, r0, ror r3
   16d50:			; <UNDEFINED> instruction: 0x0001cbb0
   16d54:	push	{r4, r5, r6, r7, r8, lr}
   16d58:	mov	r5, r0
   16d5c:	ldr	r6, [r0]
   16d60:	ldr	r2, [r0, #4]
   16d64:	cmp	r6, r2
   16d68:	addcc	r6, r6, #8
   16d6c:	movcc	r7, #0
   16d70:	bcc	16d84 <__assert_fail@plt+0x5994>
   16d74:	b	16df8 <__assert_fail@plt+0x5a08>
   16d78:	cmp	r2, r6
   16d7c:	add	r6, r6, #8
   16d80:	bls	16df8 <__assert_fail@plt+0x5a08>
   16d84:	ldr	r3, [r6, #-8]
   16d88:	cmp	r3, #0
   16d8c:	beq	16d78 <__assert_fail@plt+0x5988>
   16d90:	ldr	r4, [r6, #-4]
   16d94:	ldr	r2, [r5, #32]
   16d98:	cmp	r4, #0
   16d9c:	beq	16dd0 <__assert_fail@plt+0x59e0>
   16da0:	cmp	r2, #0
   16da4:	beq	16db4 <__assert_fail@plt+0x59c4>
   16da8:	ldr	r0, [r4]
   16dac:	blx	r2
   16db0:	ldr	r2, [r5, #32]
   16db4:	ldr	r3, [r4, #4]
   16db8:	ldr	r1, [r5, #36]	; 0x24
   16dbc:	str	r7, [r4]
   16dc0:	str	r1, [r4, #4]
   16dc4:	str	r4, [r5, #36]	; 0x24
   16dc8:	subs	r4, r3, #0
   16dcc:	bne	16da0 <__assert_fail@plt+0x59b0>
   16dd0:	cmp	r2, #0
   16dd4:	beq	16de0 <__assert_fail@plt+0x59f0>
   16dd8:	ldr	r0, [r6, #-8]
   16ddc:	blx	r2
   16de0:	str	r7, [r6, #-8]
   16de4:	str	r7, [r6, #-4]
   16de8:	ldr	r2, [r5, #4]
   16dec:	cmp	r2, r6
   16df0:	add	r6, r6, #8
   16df4:	bhi	16d84 <__assert_fail@plt+0x5994>
   16df8:	mov	r3, #0
   16dfc:	str	r3, [r5, #12]
   16e00:	str	r3, [r5, #16]
   16e04:	pop	{r4, r5, r6, r7, r8, pc}
   16e08:	ldr	r3, [r0, #32]
   16e0c:	push	{r4, r5, r6, lr}
   16e10:	cmp	r3, #0
   16e14:	mov	r6, r0
   16e18:	ldr	r5, [r0]
   16e1c:	ldr	r3, [r0, #4]
   16e20:	beq	16e88 <__assert_fail@plt+0x5a98>
   16e24:	ldr	r2, [r0, #16]
   16e28:	cmp	r2, #0
   16e2c:	beq	16e88 <__assert_fail@plt+0x5a98>
   16e30:	cmp	r5, r3
   16e34:	bcc	16e48 <__assert_fail@plt+0x5a58>
   16e38:	b	16ebc <__assert_fail@plt+0x5acc>
   16e3c:	add	r5, r5, #8
   16e40:	cmp	r3, r5
   16e44:	bls	16e84 <__assert_fail@plt+0x5a94>
   16e48:	ldr	r0, [r5]
   16e4c:	cmp	r0, #0
   16e50:	beq	16e3c <__assert_fail@plt+0x5a4c>
   16e54:	mov	r4, r5
   16e58:	b	16e60 <__assert_fail@plt+0x5a70>
   16e5c:	ldr	r0, [r4]
   16e60:	ldr	r3, [r6, #32]
   16e64:	blx	r3
   16e68:	ldr	r4, [r4, #4]
   16e6c:	cmp	r4, #0
   16e70:	bne	16e5c <__assert_fail@plt+0x5a6c>
   16e74:	ldr	r3, [r6, #4]
   16e78:	add	r5, r5, #8
   16e7c:	cmp	r3, r5
   16e80:	bhi	16e48 <__assert_fail@plt+0x5a58>
   16e84:	ldr	r5, [r6]
   16e88:	cmp	r5, r3
   16e8c:	bcs	16ebc <__assert_fail@plt+0x5acc>
   16e90:	ldr	r0, [r5, #4]
   16e94:	cmp	r0, #0
   16e98:	beq	16eb0 <__assert_fail@plt+0x5ac0>
   16e9c:	ldr	r4, [r0, #4]
   16ea0:	bl	110fc <free@plt>
   16ea4:	subs	r0, r4, #0
   16ea8:	bne	16e9c <__assert_fail@plt+0x5aac>
   16eac:	ldr	r3, [r6, #4]
   16eb0:	add	r5, r5, #8
   16eb4:	cmp	r3, r5
   16eb8:	bhi	16e90 <__assert_fail@plt+0x5aa0>
   16ebc:	ldr	r0, [r6, #36]	; 0x24
   16ec0:	cmp	r0, #0
   16ec4:	beq	16ed8 <__assert_fail@plt+0x5ae8>
   16ec8:	ldr	r4, [r0, #4]
   16ecc:	bl	110fc <free@plt>
   16ed0:	subs	r0, r4, #0
   16ed4:	bne	16ec8 <__assert_fail@plt+0x5ad8>
   16ed8:	ldr	r0, [r6]
   16edc:	bl	110fc <free@plt>
   16ee0:	mov	r0, r6
   16ee4:	pop	{r4, r5, r6, lr}
   16ee8:	b	110fc <free@plt>
   16eec:	push	{r4, r5, r6, r7, r8, lr}
   16ef0:	sub	sp, sp, #56	; 0x38
   16ef4:	ldr	r8, [r0, #20]
   16ef8:	ldr	r7, [pc, #392]	; 17088 <__assert_fail@plt+0x5c98>
   16efc:	mov	r6, r0
   16f00:	ldrb	r3, [r8, #16]
   16f04:	ldr	r2, [r7]
   16f08:	str	r1, [sp, #4]
   16f0c:	cmp	r3, #0
   16f10:	str	r2, [sp, #52]	; 0x34
   16f14:	bne	16f40 <__assert_fail@plt+0x5b50>
   16f18:	vmov	s15, r1
   16f1c:	vldr	s13, [r8, #8]
   16f20:	vldr	s14, [pc, #348]	; 17084 <__assert_fail@plt+0x5c94>
   16f24:	vcvt.f32.u32	s12, s15
   16f28:	vdiv.f32	s15, s12, s13
   16f2c:	vcmpe.f32	s15, s14
   16f30:	vmrs	APSR_nzcv, fpscr
   16f34:	vcvtlt.u32.f32	s15, s15
   16f38:	vstrlt	s15, [sp, #4]
   16f3c:	bge	16f70 <__assert_fail@plt+0x5b80>
   16f40:	ldr	r0, [sp, #4]
   16f44:	bl	162d8 <__assert_fail@plt+0x4ee8>
   16f48:	lsrs	r3, r0, #30
   16f4c:	movne	r4, #1
   16f50:	moveq	r4, #0
   16f54:	tst	r0, #536870912	; 0x20000000
   16f58:	movne	r4, #1
   16f5c:	cmp	r0, #0
   16f60:	moveq	r4, #1
   16f64:	cmp	r4, #0
   16f68:	mov	r5, r0
   16f6c:	beq	16f90 <__assert_fail@plt+0x5ba0>
   16f70:	mov	r4, #0
   16f74:	ldr	r2, [sp, #52]	; 0x34
   16f78:	ldr	r3, [r7]
   16f7c:	mov	r0, r4
   16f80:	cmp	r2, r3
   16f84:	bne	1707c <__assert_fail@plt+0x5c8c>
   16f88:	add	sp, sp, #56	; 0x38
   16f8c:	pop	{r4, r5, r6, r7, r8, pc}
   16f90:	ldr	r3, [r6, #8]
   16f94:	cmp	r3, r0
   16f98:	beq	17044 <__assert_fail@plt+0x5c54>
   16f9c:	mov	r1, #8
   16fa0:	bl	110a8 <calloc@plt>
   16fa4:	cmp	r0, #0
   16fa8:	str	r0, [sp, #12]
   16fac:	beq	16f70 <__assert_fail@plt+0x5b80>
   16fb0:	add	r0, r0, r5, lsl #3
   16fb4:	ldr	r1, [r6, #32]
   16fb8:	str	r0, [sp, #16]
   16fbc:	ldr	r0, [r6, #28]
   16fc0:	ldr	ip, [r6, #24]
   16fc4:	ldr	r3, [r6, #36]	; 0x24
   16fc8:	mov	r2, r4
   16fcc:	str	r0, [sp, #40]	; 0x28
   16fd0:	str	r1, [sp, #44]	; 0x2c
   16fd4:	add	r0, sp, #12
   16fd8:	mov	r1, r6
   16fdc:	str	r4, [sp, #24]
   16fe0:	str	r4, [sp, #28]
   16fe4:	str	r5, [sp, #20]
   16fe8:	str	r8, [sp, #32]
   16fec:	str	ip, [sp, #36]	; 0x24
   16ff0:	str	r3, [sp, #48]	; 0x30
   16ff4:	bl	16590 <__assert_fail@plt+0x51a0>
   16ff8:	subs	r4, r0, #0
   16ffc:	bne	1704c <__assert_fail@plt+0x5c5c>
   17000:	ldr	r3, [sp, #48]	; 0x30
   17004:	mov	r2, #1
   17008:	str	r3, [r6, #36]	; 0x24
   1700c:	add	r1, sp, #12
   17010:	mov	r0, r6
   17014:	bl	16590 <__assert_fail@plt+0x51a0>
   17018:	cmp	r0, #0
   1701c:	beq	17080 <__assert_fail@plt+0x5c90>
   17020:	add	r1, sp, #12
   17024:	mov	r0, r6
   17028:	mov	r2, r4
   1702c:	bl	16590 <__assert_fail@plt+0x51a0>
   17030:	cmp	r0, #0
   17034:	beq	17080 <__assert_fail@plt+0x5c90>
   17038:	ldr	r0, [sp, #12]
   1703c:	bl	110fc <free@plt>
   17040:	b	16f74 <__assert_fail@plt+0x5b84>
   17044:	mov	r4, #1
   17048:	b	16f74 <__assert_fail@plt+0x5b84>
   1704c:	ldr	r0, [r6]
   17050:	bl	110fc <free@plt>
   17054:	ldrd	r2, [sp, #12]
   17058:	ldr	r1, [sp, #20]
   1705c:	str	r2, [r6]
   17060:	str	r3, [r6, #4]
   17064:	ldr	r2, [sp, #24]
   17068:	ldr	r3, [sp, #48]	; 0x30
   1706c:	str	r1, [r6, #8]
   17070:	str	r2, [r6, #12]
   17074:	str	r3, [r6, #36]	; 0x24
   17078:	b	16f74 <__assert_fail@plt+0x5b84>
   1707c:	bl	11174 <__stack_chk_fail@plt>
   17080:	bl	113cc <abort@plt>
   17084:	svcmi	0x00800000
   17088:	andeq	sp, r2, r8, lsl #30
   1708c:	push	{r4, r5, r6, r7, lr}
   17090:	sub	sp, sp, #12
   17094:	ldr	r6, [pc, #404]	; 17230 <__assert_fail@plt+0x5e40>
   17098:	subs	r7, r1, #0
   1709c:	ldr	r3, [r6]
   170a0:	str	r3, [sp, #4]
   170a4:	beq	17224 <__assert_fail@plt+0x5e34>
   170a8:	mov	r5, r2
   170ac:	mov	r3, #0
   170b0:	mov	r2, sp
   170b4:	mov	r4, r0
   170b8:	bl	163c8 <__assert_fail@plt+0x4fd8>
   170bc:	cmp	r0, #0
   170c0:	beq	170ec <__assert_fail@plt+0x5cfc>
   170c4:	cmp	r5, #0
   170c8:	moveq	r0, r5
   170cc:	strne	r0, [r5]
   170d0:	movne	r0, #0
   170d4:	ldr	r2, [sp, #4]
   170d8:	ldr	r3, [r6]
   170dc:	cmp	r2, r3
   170e0:	bne	17228 <__assert_fail@plt+0x5e38>
   170e4:	add	sp, sp, #12
   170e8:	pop	{r4, r5, r6, r7, pc}
   170ec:	vldr	s15, [r4, #8]
   170f0:	ldr	r3, [r4, #20]
   170f4:	vldr	s14, [r4, #12]
   170f8:	vcvt.f32.u32	s15, s15
   170fc:	vldr	s13, [r3, #8]
   17100:	vcvt.f32.u32	s14, s14
   17104:	vmul.f32	s15, s15, s13
   17108:	vcmpe.f32	s14, s15
   1710c:	vmrs	APSR_nzcv, fpscr
   17110:	bgt	1715c <__assert_fail@plt+0x5d6c>
   17114:	ldr	r5, [sp]
   17118:	ldr	r3, [r5]
   1711c:	cmp	r3, #0
   17120:	beq	171b8 <__assert_fail@plt+0x5dc8>
   17124:	ldr	r0, [r4, #36]	; 0x24
   17128:	cmp	r0, #0
   1712c:	beq	171dc <__assert_fail@plt+0x5dec>
   17130:	ldr	r3, [r0, #4]
   17134:	str	r3, [r4, #36]	; 0x24
   17138:	ldr	r3, [r4, #16]
   1713c:	ldr	r2, [r5, #4]
   17140:	add	r3, r3, #1
   17144:	str	r7, [r0]
   17148:	str	r2, [r0, #4]
   1714c:	str	r0, [r5, #4]
   17150:	mov	r0, #1
   17154:	str	r3, [r4, #16]
   17158:	b	170d4 <__assert_fail@plt+0x5ce4>
   1715c:	add	r0, r4, #20
   17160:	bl	164e0 <__assert_fail@plt+0x50f0>
   17164:	vldr	s15, [r4, #8]
   17168:	ldr	r3, [r4, #20]
   1716c:	vldr	s14, [r4, #12]
   17170:	vcvt.f32.u32	s15, s15
   17174:	vldr	s13, [r3, #8]
   17178:	vcvt.f32.u32	s14, s14
   1717c:	vmul.f32	s12, s13, s15
   17180:	vcmpe.f32	s14, s12
   17184:	vmrs	APSR_nzcv, fpscr
   17188:	ble	17114 <__assert_fail@plt+0x5d24>
   1718c:	vldr	s14, [r3, #12]
   17190:	ldrb	r3, [r3, #16]
   17194:	vmul.f32	s15, s15, s14
   17198:	cmp	r3, #0
   1719c:	vldr	s14, [pc, #136]	; 1722c <__assert_fail@plt+0x5e3c>
   171a0:	vmuleq.f32	s15, s15, s13
   171a4:	vcmpe.f32	s15, s14
   171a8:	vmrs	APSR_nzcv, fpscr
   171ac:	blt	171f0 <__assert_fail@plt+0x5e00>
   171b0:	mvn	r0, #0
   171b4:	b	170d4 <__assert_fail@plt+0x5ce4>
   171b8:	ldr	r2, [r4, #16]
   171bc:	ldr	r3, [r4, #12]
   171c0:	add	r2, r2, #1
   171c4:	add	r3, r3, #1
   171c8:	str	r7, [r5]
   171cc:	mov	r0, #1
   171d0:	str	r2, [r4, #16]
   171d4:	str	r3, [r4, #12]
   171d8:	b	170d4 <__assert_fail@plt+0x5ce4>
   171dc:	mov	r0, #8
   171e0:	bl	11228 <malloc@plt>
   171e4:	cmp	r0, #0
   171e8:	beq	171b0 <__assert_fail@plt+0x5dc0>
   171ec:	b	17138 <__assert_fail@plt+0x5d48>
   171f0:	vcvt.u32.f32	s15, s15
   171f4:	mov	r0, r4
   171f8:	vmov	r1, s15
   171fc:	bl	16eec <__assert_fail@plt+0x5afc>
   17200:	cmp	r0, #0
   17204:	beq	171b0 <__assert_fail@plt+0x5dc0>
   17208:	mov	r2, sp
   1720c:	mov	r3, #0
   17210:	mov	r1, r7
   17214:	mov	r0, r4
   17218:	bl	163c8 <__assert_fail@plt+0x4fd8>
   1721c:	cmp	r0, #0
   17220:	beq	17114 <__assert_fail@plt+0x5d24>
   17224:	bl	113cc <abort@plt>
   17228:	bl	11174 <__stack_chk_fail@plt>
   1722c:	svcmi	0x00800000
   17230:	andeq	sp, r2, r8, lsl #30
   17234:	push	{r4, r5, lr}
   17238:	sub	sp, sp, #12
   1723c:	ldr	r5, [pc, #68]	; 17288 <__assert_fail@plt+0x5e98>
   17240:	mov	r2, sp
   17244:	mov	r4, r1
   17248:	ldr	r3, [r5]
   1724c:	str	r3, [sp, #4]
   17250:	bl	1708c <__assert_fail@plt+0x5c9c>
   17254:	cmn	r0, #1
   17258:	moveq	r0, #0
   1725c:	beq	1726c <__assert_fail@plt+0x5e7c>
   17260:	cmp	r0, #0
   17264:	movne	r0, r4
   17268:	ldreq	r0, [sp]
   1726c:	ldr	r2, [sp, #4]
   17270:	ldr	r3, [r5]
   17274:	cmp	r2, r3
   17278:	bne	17284 <__assert_fail@plt+0x5e94>
   1727c:	add	sp, sp, #12
   17280:	pop	{r4, r5, pc}
   17284:	bl	11174 <__stack_chk_fail@plt>
   17288:	andeq	sp, r2, r8, lsl #30
   1728c:	push	{r4, r5, r6, r7, lr}
   17290:	sub	sp, sp, #12
   17294:	ldr	r5, [pc, #276]	; 173b0 <__assert_fail@plt+0x5fc0>
   17298:	mov	r3, #1
   1729c:	mov	r2, sp
   172a0:	ldr	ip, [r5]
   172a4:	mov	r4, r0
   172a8:	str	ip, [sp, #4]
   172ac:	bl	163c8 <__assert_fail@plt+0x4fd8>
   172b0:	subs	r6, r0, #0
   172b4:	beq	172d4 <__assert_fail@plt+0x5ee4>
   172b8:	ldr	r2, [sp]
   172bc:	ldr	r3, [r4, #16]
   172c0:	ldr	r2, [r2]
   172c4:	sub	r3, r3, #1
   172c8:	cmp	r2, #0
   172cc:	str	r3, [r4, #16]
   172d0:	beq	172f0 <__assert_fail@plt+0x5f00>
   172d4:	ldr	r2, [sp, #4]
   172d8:	ldr	r3, [r5]
   172dc:	mov	r0, r6
   172e0:	cmp	r2, r3
   172e4:	bne	173ac <__assert_fail@plt+0x5fbc>
   172e8:	add	sp, sp, #12
   172ec:	pop	{r4, r5, r6, r7, pc}
   172f0:	vldr	s15, [r4, #8]
   172f4:	ldr	r3, [r4, #12]
   172f8:	ldr	r2, [r4, #20]
   172fc:	sub	r3, r3, #1
   17300:	vcvt.f32.u32	s14, s15
   17304:	vldr	s13, [r2]
   17308:	vmov	s15, r3
   1730c:	str	r3, [r4, #12]
   17310:	vcvt.f32.u32	s15, s15
   17314:	vmul.f32	s14, s14, s13
   17318:	vcmpe.f32	s15, s14
   1731c:	vmrs	APSR_nzcv, fpscr
   17320:	bpl	172d4 <__assert_fail@plt+0x5ee4>
   17324:	add	r0, r4, #20
   17328:	bl	164e0 <__assert_fail@plt+0x50f0>
   1732c:	vldr	s15, [r4, #8]
   17330:	ldr	r3, [r4, #20]
   17334:	vldr	s13, [r4, #12]
   17338:	vcvt.f32.u32	s15, s15
   1733c:	vldr	s14, [r3]
   17340:	vcvt.f32.u32	s13, s13
   17344:	vmul.f32	s14, s15, s14
   17348:	vcmpe.f32	s13, s14
   1734c:	vmrs	APSR_nzcv, fpscr
   17350:	bpl	172d4 <__assert_fail@plt+0x5ee4>
   17354:	vldr	s14, [r3, #4]
   17358:	ldrb	r2, [r3, #16]
   1735c:	mov	r0, r4
   17360:	vmul.f32	s15, s15, s14
   17364:	cmp	r2, #0
   17368:	vldreq	s14, [r3, #8]
   1736c:	vmuleq.f32	s15, s15, s14
   17370:	vcvt.u32.f32	s15, s15
   17374:	vmov	r1, s15
   17378:	bl	16eec <__assert_fail@plt+0x5afc>
   1737c:	cmp	r0, #0
   17380:	bne	172d4 <__assert_fail@plt+0x5ee4>
   17384:	ldr	r0, [r4, #36]	; 0x24
   17388:	cmp	r0, #0
   1738c:	beq	173a0 <__assert_fail@plt+0x5fb0>
   17390:	ldr	r7, [r0, #4]
   17394:	bl	110fc <free@plt>
   17398:	subs	r0, r7, #0
   1739c:	bne	17390 <__assert_fail@plt+0x5fa0>
   173a0:	mov	r3, #0
   173a4:	str	r3, [r4, #36]	; 0x24
   173a8:	b	172d4 <__assert_fail@plt+0x5ee4>
   173ac:	bl	11174 <__stack_chk_fail@plt>
   173b0:	andeq	sp, r2, r8, lsl #30
   173b4:	cmp	r0, #0
   173b8:	sbcs	r3, r1, #0
   173bc:	mov	r3, #0
   173c0:	push	{r4, r5, r6, r7, r8, lr}
   173c4:	mov	r4, r0
   173c8:	mov	r5, r1
   173cc:	strb	r3, [r2, #20]
   173d0:	add	r6, r2, #20
   173d4:	blt	17424 <__assert_fail@plt+0x6034>
   173d8:	mov	r0, r4
   173dc:	mov	r1, r5
   173e0:	mov	r2, #10
   173e4:	mov	r3, #0
   173e8:	bl	1b3ec <__assert_fail@plt+0x9ffc>
   173ec:	mov	r0, r4
   173f0:	mov	r1, r5
   173f4:	mov	r3, #0
   173f8:	add	r2, r2, #48	; 0x30
   173fc:	strb	r2, [r6, #-1]!
   17400:	mov	r2, #10
   17404:	bl	1b3ec <__assert_fail@plt+0x9ffc>
   17408:	mov	r4, r0
   1740c:	mov	r5, r1
   17410:	orrs	r3, r4, r5
   17414:	bne	173d8 <__assert_fail@plt+0x5fe8>
   17418:	mov	r0, r6
   1741c:	pop	{r4, r5, r6, r7, r8, pc}
   17420:	mov	r6, r7
   17424:	mov	r0, r4
   17428:	mov	r1, r5
   1742c:	mov	r2, #10
   17430:	mov	r3, #0
   17434:	bl	1b3ec <__assert_fail@plt+0x9ffc>
   17438:	mov	r0, r4
   1743c:	mov	r1, r5
   17440:	mov	r3, #0
   17444:	sub	r7, r6, #1
   17448:	rsb	r2, r2, #48	; 0x30
   1744c:	strb	r2, [r6, #-1]
   17450:	mov	r2, #10
   17454:	bl	1b3ec <__assert_fail@plt+0x9ffc>
   17458:	mov	r4, r0
   1745c:	mov	r5, r1
   17460:	orrs	r3, r4, r5
   17464:	bne	17420 <__assert_fail@plt+0x6030>
   17468:	mov	r3, #45	; 0x2d
   1746c:	sub	r6, r6, #2
   17470:	strb	r3, [r7, #-1]
   17474:	mov	r0, r6
   17478:	pop	{r4, r5, r6, r7, r8, pc}
   1747c:	push	{r4, lr}
   17480:	sub	sp, sp, #8
   17484:	ldr	r4, [pc, #100]	; 174f0 <__assert_fail@plt+0x6100>
   17488:	ldr	r0, [pc, #100]	; 174f4 <__assert_fail@plt+0x6104>
   1748c:	ldr	r3, [r4]
   17490:	str	r3, [sp, #4]
   17494:	bl	1121c <getenv@plt>
   17498:	subs	r3, r0, #0
   1749c:	beq	174ac <__assert_fail@plt+0x60bc>
   174a0:	ldrb	r3, [r3]
   174a4:	cmp	r3, #0
   174a8:	bne	174c8 <__assert_fail@plt+0x60d8>
   174ac:	ldr	r0, [pc, #68]	; 174f8 <__assert_fail@plt+0x6108>
   174b0:	ldr	r2, [sp, #4]
   174b4:	ldr	r3, [r4]
   174b8:	cmp	r2, r3
   174bc:	bne	174ec <__assert_fail@plt+0x60fc>
   174c0:	add	sp, sp, #8
   174c4:	pop	{r4, pc}
   174c8:	mov	r2, #10
   174cc:	mov	r1, sp
   174d0:	bl	110d8 <strtol@plt>
   174d4:	ldr	r2, [sp]
   174d8:	ldr	r3, [pc, #24]	; 174f8 <__assert_fail@plt+0x6108>
   174dc:	ldrb	r2, [r2]
   174e0:	cmp	r2, #0
   174e4:	movne	r0, r3
   174e8:	b	174b0 <__assert_fail@plt+0x60c0>
   174ec:	bl	11174 <__stack_chk_fail@plt>
   174f0:	andeq	sp, r2, r8, lsl #30
   174f4:	andeq	ip, r1, r0, lsr ip
   174f8:	andeq	r1, r3, r9, rrx
   174fc:	push	{r4, r5, r6, lr}
   17500:	subs	r4, r0, #0
   17504:	beq	17578 <__assert_fail@plt+0x6188>
   17508:	mov	r1, #47	; 0x2f
   1750c:	bl	11360 <strrchr@plt>
   17510:	subs	r5, r0, #0
   17514:	beq	17564 <__assert_fail@plt+0x6174>
   17518:	add	r6, r5, #1
   1751c:	sub	r3, r6, r4
   17520:	cmp	r3, #6
   17524:	ble	17564 <__assert_fail@plt+0x6174>
   17528:	mov	r2, #7
   1752c:	ldr	r1, [pc, #96]	; 17594 <__assert_fail@plt+0x61a4>
   17530:	sub	r0, r5, #6
   17534:	bl	113c0 <strncmp@plt>
   17538:	cmp	r0, #0
   1753c:	bne	17564 <__assert_fail@plt+0x6174>
   17540:	mov	r2, #3
   17544:	ldr	r1, [pc, #76]	; 17598 <__assert_fail@plt+0x61a8>
   17548:	mov	r0, r6
   1754c:	bl	113c0 <strncmp@plt>
   17550:	cmp	r0, #0
   17554:	movne	r4, r6
   17558:	ldreq	r3, [pc, #60]	; 1759c <__assert_fail@plt+0x61ac>
   1755c:	addeq	r4, r5, #4
   17560:	streq	r4, [r3]
   17564:	ldr	r2, [pc, #52]	; 175a0 <__assert_fail@plt+0x61b0>
   17568:	ldr	r3, [pc, #52]	; 175a4 <__assert_fail@plt+0x61b4>
   1756c:	str	r4, [r2]
   17570:	str	r4, [r3]
   17574:	pop	{r4, r5, r6, pc}
   17578:	ldr	r3, [pc, #40]	; 175a8 <__assert_fail@plt+0x61b8>
   1757c:	mov	r2, #55	; 0x37
   17580:	mov	r1, #1
   17584:	ldr	r3, [r3]
   17588:	ldr	r0, [pc, #28]	; 175ac <__assert_fail@plt+0x61bc>
   1758c:	bl	111c8 <fwrite@plt>
   17590:	bl	113cc <abort@plt>
   17594:	andeq	ip, r1, r8, ror ip
   17598:	andeq	ip, r1, r0, lsl #25
   1759c:	andeq	lr, r2, r0, lsr #3
   175a0:	ldrdeq	lr, [r2], -ip
   175a4:	andeq	lr, r2, r4, lsr #3
   175a8:			; <UNDEFINED> instruction: 0x0002e1b0
   175ac:	andeq	ip, r1, r0, asr #24
   175b0:	push	{r4, lr}
   175b4:	mov	r2, #48	; 0x30
   175b8:	mov	r4, r1
   175bc:	mov	r1, #0
   175c0:	bl	112dc <memset@plt>
   175c4:	cmp	r4, #10
   175c8:	beq	175d4 <__assert_fail@plt+0x61e4>
   175cc:	str	r4, [r0]
   175d0:	pop	{r4, pc}
   175d4:	bl	113cc <abort@plt>
   175d8:	push	{r4, r5, r6, lr}
   175dc:	mov	r2, #5
   175e0:	mov	r5, r0
   175e4:	mov	r6, r1
   175e8:	mov	r1, r0
   175ec:	mov	r0, #0
   175f0:	bl	11168 <dcgettext@plt>
   175f4:	cmp	r5, r0
   175f8:	mov	r4, r0
   175fc:	beq	17608 <__assert_fail@plt+0x6218>
   17600:	mov	r0, r4
   17604:	pop	{r4, r5, r6, pc}
   17608:	bl	1b000 <__assert_fail@plt+0x9c10>
   1760c:	ldrb	r3, [r0]
   17610:	bic	r3, r3, #32
   17614:	cmp	r3, #85	; 0x55
   17618:	bne	17678 <__assert_fail@plt+0x6288>
   1761c:	ldrb	r3, [r0, #1]
   17620:	bic	r3, r3, #32
   17624:	cmp	r3, #84	; 0x54
   17628:	bne	176f0 <__assert_fail@plt+0x6300>
   1762c:	ldrb	r3, [r0, #2]
   17630:	bic	r3, r3, #32
   17634:	cmp	r3, #70	; 0x46
   17638:	bne	176f0 <__assert_fail@plt+0x6300>
   1763c:	ldrb	r3, [r0, #3]
   17640:	cmp	r3, #45	; 0x2d
   17644:	bne	176f0 <__assert_fail@plt+0x6300>
   17648:	ldrb	r3, [r0, #4]
   1764c:	cmp	r3, #56	; 0x38
   17650:	bne	176f0 <__assert_fail@plt+0x6300>
   17654:	ldrb	r3, [r0, #5]
   17658:	cmp	r3, #0
   1765c:	bne	176f0 <__assert_fail@plt+0x6300>
   17660:	ldrb	r2, [r4]
   17664:	ldr	r3, [pc, #156]	; 17708 <__assert_fail@plt+0x6318>
   17668:	ldr	r4, [pc, #156]	; 1770c <__assert_fail@plt+0x631c>
   1766c:	cmp	r2, #96	; 0x60
   17670:	movne	r4, r3
   17674:	b	17600 <__assert_fail@plt+0x6210>
   17678:	cmp	r3, #71	; 0x47
   1767c:	bne	176f0 <__assert_fail@plt+0x6300>
   17680:	ldrb	r3, [r0, #1]
   17684:	bic	r3, r3, #32
   17688:	cmp	r3, #66	; 0x42
   1768c:	bne	176f0 <__assert_fail@plt+0x6300>
   17690:	ldrb	r3, [r0, #2]
   17694:	cmp	r3, #49	; 0x31
   17698:	bne	176f0 <__assert_fail@plt+0x6300>
   1769c:	ldrb	r3, [r0, #3]
   176a0:	cmp	r3, #56	; 0x38
   176a4:	bne	176f0 <__assert_fail@plt+0x6300>
   176a8:	ldrb	r3, [r0, #4]
   176ac:	cmp	r3, #48	; 0x30
   176b0:	bne	176f0 <__assert_fail@plt+0x6300>
   176b4:	ldrb	r3, [r0, #5]
   176b8:	cmp	r3, #51	; 0x33
   176bc:	bne	176f0 <__assert_fail@plt+0x6300>
   176c0:	ldrb	r3, [r0, #6]
   176c4:	cmp	r3, #48	; 0x30
   176c8:	bne	176f0 <__assert_fail@plt+0x6300>
   176cc:	ldrb	r3, [r0, #7]
   176d0:	cmp	r3, #0
   176d4:	bne	176f0 <__assert_fail@plt+0x6300>
   176d8:	ldrb	r2, [r4]
   176dc:	ldr	r3, [pc, #44]	; 17710 <__assert_fail@plt+0x6320>
   176e0:	ldr	r4, [pc, #44]	; 17714 <__assert_fail@plt+0x6324>
   176e4:	cmp	r2, #96	; 0x60
   176e8:	movne	r4, r3
   176ec:	b	17600 <__assert_fail@plt+0x6210>
   176f0:	ldr	r3, [pc, #32]	; 17718 <__assert_fail@plt+0x6328>
   176f4:	ldr	r4, [pc, #32]	; 1771c <__assert_fail@plt+0x632c>
   176f8:	cmp	r6, #9
   176fc:	movne	r4, r3
   17700:	mov	r0, r4
   17704:	pop	{r4, r5, r6, pc}
   17708:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1770c:	andeq	ip, r1, r8, ror #25
   17710:	andeq	ip, r1, r0, ror #25
   17714:	andeq	ip, r1, r4, ror #25
   17718:	andeq	ip, r1, ip, ror #25
   1771c:	ldrdeq	ip, [r1], -r8
   17720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17724:	sub	sp, sp, #124	; 0x7c
   17728:	ldr	ip, [pc, #3576]	; 18528 <__assert_fail@plt+0x7138>
   1772c:	str	r3, [sp, #24]
   17730:	ldr	r3, [sp, #168]	; 0xa8
   17734:	ldr	ip, [ip]
   17738:	str	r3, [sp, #56]	; 0x38
   1773c:	ldr	r3, [sp, #172]	; 0xac
   17740:	ldr	r8, [sp, #160]	; 0xa0
   17744:	str	r3, [sp, #80]	; 0x50
   17748:	ldr	r3, [sp, #176]	; 0xb0
   1774c:	mov	fp, r0
   17750:	str	r3, [sp, #76]	; 0x4c
   17754:	mov	sl, r1
   17758:	str	r2, [sp, #36]	; 0x24
   1775c:	str	ip, [sp, #116]	; 0x74
   17760:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   17764:	ldr	r3, [sp, #164]	; 0xa4
   17768:	ands	r4, r3, #2
   1776c:	movne	r3, #1
   17770:	moveq	r3, #0
   17774:	str	r3, [sp, #32]
   17778:	str	r0, [sp, #64]	; 0x40
   1777c:	cmp	r8, #10
   17780:	ldrls	pc, [pc, r8, lsl #2]
   17784:	b	18f34 <__assert_fail@plt+0x7b44>
   17788:	andeq	r7, r1, ip, ror fp
   1778c:	andeq	r7, r1, r4, lsl ip
   17790:	andeq	r8, r1, r4, lsl r2
   17794:	andeq	r7, r1, r4, lsr ip
   17798:	andeq	r7, r1, r8, ror #21
   1779c:	andeq	r7, r1, r0, lsr fp
   177a0:	andeq	r7, r1, ip, lsr #23
   177a4:	andeq	r7, r1, r4, ror #23
   177a8:			; <UNDEFINED> instruction: 0x000177b4
   177ac:			; <UNDEFINED> instruction: 0x000177b4
   177b0:			; <UNDEFINED> instruction: 0x000177b4
   177b4:	cmp	r8, #10
   177b8:	beq	177dc <__assert_fail@plt+0x63ec>
   177bc:	mov	r1, r8
   177c0:	ldr	r0, [pc, #3428]	; 1852c <__assert_fail@plt+0x713c>
   177c4:	bl	175d8 <__assert_fail@plt+0x61e8>
   177c8:	mov	r1, r8
   177cc:	str	r0, [sp, #80]	; 0x50
   177d0:	ldr	r0, [pc, #3420]	; 18534 <__assert_fail@plt+0x7144>
   177d4:	bl	175d8 <__assert_fail@plt+0x61e8>
   177d8:	str	r0, [sp, #76]	; 0x4c
   177dc:	cmp	r4, #0
   177e0:	movne	r4, #0
   177e4:	beq	18bf4 <__assert_fail@plt+0x7804>
   177e8:	ldr	r7, [sp, #76]	; 0x4c
   177ec:	mov	r5, #0
   177f0:	mov	r6, #1
   177f4:	mov	r0, r7
   177f8:	str	r6, [sp, #40]	; 0x28
   177fc:	str	r5, [sp, #68]	; 0x44
   17800:	bl	11288 <strlen@plt>
   17804:	str	r6, [sp, #28]
   17808:	str	r5, [sp, #44]	; 0x2c
   1780c:	str	r5, [sp, #72]	; 0x48
   17810:	str	r7, [sp, #60]	; 0x3c
   17814:	str	r0, [sp, #52]	; 0x34
   17818:	str	r8, [sp, #160]	; 0xa0
   1781c:	mov	r8, fp
   17820:	ldr	fp, [sp, #160]	; 0xa0
   17824:	mov	r9, #0
   17828:	ldr	r3, [sp, #24]
   1782c:	cmn	r3, #1
   17830:	beq	17d98 <__assert_fail@plt+0x69a8>
   17834:	ldr	r3, [sp, #24]
   17838:	subs	r6, r3, r9
   1783c:	movne	r6, #1
   17840:	cmp	r6, #0
   17844:	beq	17db0 <__assert_fail@plt+0x69c0>
   17848:	ldr	r7, [sp, #28]
   1784c:	ldr	r0, [sp, #36]	; 0x24
   17850:	cmp	fp, #2
   17854:	moveq	r7, #0
   17858:	andne	r7, r7, #1
   1785c:	add	r3, r0, r9
   17860:	cmp	r7, #0
   17864:	str	r3, [sp, #48]	; 0x30
   17868:	beq	18254 <__assert_fail@plt+0x6e64>
   1786c:	ldr	r2, [sp, #52]	; 0x34
   17870:	cmp	r2, #0
   17874:	beq	18538 <__assert_fail@plt+0x7148>
   17878:	ldr	r1, [sp, #24]
   1787c:	cmp	r2, #1
   17880:	mov	r3, r2
   17884:	movls	r3, #0
   17888:	movhi	r3, #1
   1788c:	cmn	r1, #1
   17890:	movne	r3, #0
   17894:	cmp	r3, #0
   17898:	add	r5, r9, r2
   1789c:	beq	178a8 <__assert_fail@plt+0x64b8>
   178a0:	bl	11288 <strlen@plt>
   178a4:	str	r0, [sp, #24]
   178a8:	ldr	r3, [sp, #24]
   178ac:	cmp	r5, r3
   178b0:	bhi	18538 <__assert_fail@plt+0x7148>
   178b4:	ldr	r2, [sp, #52]	; 0x34
   178b8:	ldr	r1, [sp, #60]	; 0x3c
   178bc:	ldr	r0, [sp, #48]	; 0x30
   178c0:	bl	11150 <memcmp@plt>
   178c4:	cmp	r0, #0
   178c8:	bne	18538 <__assert_fail@plt+0x7148>
   178cc:	ldr	r3, [sp, #32]
   178d0:	cmp	r3, #0
   178d4:	bne	18df4 <__assert_fail@plt+0x7a04>
   178d8:	ldr	r3, [sp, #48]	; 0x30
   178dc:	ldrb	r5, [r3]
   178e0:	cmp	r5, #126	; 0x7e
   178e4:	ldrls	pc, [pc, r5, lsl #2]
   178e8:	b	181b8 <__assert_fail@plt+0x6dc8>
   178ec:	andeq	r8, r1, r4, lsr #1
   178f0:			; <UNDEFINED> instruction: 0x000181b8
   178f4:			; <UNDEFINED> instruction: 0x000181b8
   178f8:			; <UNDEFINED> instruction: 0x000181b8
   178fc:			; <UNDEFINED> instruction: 0x000181b8
   17900:			; <UNDEFINED> instruction: 0x000181b8
   17904:			; <UNDEFINED> instruction: 0x000181b8
   17908:	andeq	r8, r1, r0, ror r1
   1790c:	andeq	r8, r1, r0, ror #2
   17910:	andeq	r8, r1, r0, rrx
   17914:	andeq	r8, r1, r8, lsr #32
   17918:	andeq	r8, r1, r0, lsl #1
   1791c:	andeq	r8, r1, r8, rrx
   17920:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17924:			; <UNDEFINED> instruction: 0x000181b8
   17928:			; <UNDEFINED> instruction: 0x000181b8
   1792c:			; <UNDEFINED> instruction: 0x000181b8
   17930:			; <UNDEFINED> instruction: 0x000181b8
   17934:			; <UNDEFINED> instruction: 0x000181b8
   17938:			; <UNDEFINED> instruction: 0x000181b8
   1793c:			; <UNDEFINED> instruction: 0x000181b8
   17940:			; <UNDEFINED> instruction: 0x000181b8
   17944:			; <UNDEFINED> instruction: 0x000181b8
   17948:			; <UNDEFINED> instruction: 0x000181b8
   1794c:			; <UNDEFINED> instruction: 0x000181b8
   17950:			; <UNDEFINED> instruction: 0x000181b8
   17954:			; <UNDEFINED> instruction: 0x000181b8
   17958:			; <UNDEFINED> instruction: 0x000181b8
   1795c:			; <UNDEFINED> instruction: 0x000181b8
   17960:			; <UNDEFINED> instruction: 0x000181b8
   17964:			; <UNDEFINED> instruction: 0x000181b8
   17968:			; <UNDEFINED> instruction: 0x000181b8
   1796c:	andeq	r8, r1, r8, ror r1
   17970:	andeq	r8, r1, ip, lsl #1
   17974:	andeq	r8, r1, ip, lsl #1
   17978:	muleq	r1, r0, r1
   1797c:	andeq	r8, r1, ip, lsl #1
   17980:	andeq	r8, r1, ip, lsr #3
   17984:	andeq	r8, r1, ip, lsl #1
   17988:	andeq	r7, r1, ip, asr #29
   1798c:	andeq	r8, r1, ip, lsl #1
   17990:	andeq	r8, r1, ip, lsl #1
   17994:	andeq	r8, r1, ip, lsl #1
   17998:	andeq	r8, r1, ip, lsr #3
   1799c:	andeq	r8, r1, ip, lsr #3
   179a0:	andeq	r8, r1, ip, lsr #3
   179a4:	andeq	r8, r1, ip, lsr #3
   179a8:	andeq	r8, r1, ip, lsr #3
   179ac:	andeq	r8, r1, ip, lsr #3
   179b0:	andeq	r8, r1, ip, lsr #3
   179b4:	andeq	r8, r1, ip, lsr #3
   179b8:	andeq	r8, r1, ip, lsr #3
   179bc:	andeq	r8, r1, ip, lsr #3
   179c0:	andeq	r8, r1, ip, lsr #3
   179c4:	andeq	r8, r1, ip, lsr #3
   179c8:	andeq	r8, r1, ip, lsr #3
   179cc:	andeq	r8, r1, ip, lsr #3
   179d0:	andeq	r8, r1, ip, lsr #3
   179d4:	andeq	r8, r1, ip, lsr #3
   179d8:	andeq	r8, r1, ip, lsl #1
   179dc:	andeq	r8, r1, ip, lsl #1
   179e0:	andeq	r8, r1, ip, lsl #1
   179e4:	andeq	r8, r1, ip, lsl #1
   179e8:	andeq	r7, r1, r0, lsr #29
   179ec:			; <UNDEFINED> instruction: 0x000181b8
   179f0:	andeq	r8, r1, ip, lsr #3
   179f4:	andeq	r8, r1, ip, lsr #3
   179f8:	andeq	r8, r1, ip, lsr #3
   179fc:	andeq	r8, r1, ip, lsr #3
   17a00:	andeq	r8, r1, ip, lsr #3
   17a04:	andeq	r8, r1, ip, lsr #3
   17a08:	andeq	r8, r1, ip, lsr #3
   17a0c:	andeq	r8, r1, ip, lsr #3
   17a10:	andeq	r8, r1, ip, lsr #3
   17a14:	andeq	r8, r1, ip, lsr #3
   17a18:	andeq	r8, r1, ip, lsr #3
   17a1c:	andeq	r8, r1, ip, lsr #3
   17a20:	andeq	r8, r1, ip, lsr #3
   17a24:	andeq	r8, r1, ip, lsr #3
   17a28:	andeq	r8, r1, ip, lsr #3
   17a2c:	andeq	r8, r1, ip, lsr #3
   17a30:	andeq	r8, r1, ip, lsr #3
   17a34:	andeq	r8, r1, ip, lsr #3
   17a38:	andeq	r8, r1, ip, lsr #3
   17a3c:	andeq	r8, r1, ip, lsr #3
   17a40:	andeq	r8, r1, ip, lsr #3
   17a44:	andeq	r8, r1, ip, lsr #3
   17a48:	andeq	r8, r1, ip, lsr #3
   17a4c:	andeq	r8, r1, ip, lsr #3
   17a50:	andeq	r8, r1, ip, lsr #3
   17a54:	andeq	r8, r1, ip, lsr #3
   17a58:	andeq	r8, r1, ip, lsl #1
   17a5c:	andeq	r7, r1, r8, asr lr
   17a60:	andeq	r8, r1, ip, lsr #3
   17a64:	andeq	r8, r1, ip, lsl #1
   17a68:	andeq	r8, r1, ip, lsr #3
   17a6c:	andeq	r8, r1, ip, lsl #1
   17a70:	andeq	r8, r1, ip, lsr #3
   17a74:	andeq	r8, r1, ip, lsr #3
   17a78:	andeq	r8, r1, ip, lsr #3
   17a7c:	andeq	r8, r1, ip, lsr #3
   17a80:	andeq	r8, r1, ip, lsr #3
   17a84:	andeq	r8, r1, ip, lsr #3
   17a88:	andeq	r8, r1, ip, lsr #3
   17a8c:	andeq	r8, r1, ip, lsr #3
   17a90:	andeq	r8, r1, ip, lsr #3
   17a94:	andeq	r8, r1, ip, lsr #3
   17a98:	andeq	r8, r1, ip, lsr #3
   17a9c:	andeq	r8, r1, ip, lsr #3
   17aa0:	andeq	r8, r1, ip, lsr #3
   17aa4:	andeq	r8, r1, ip, lsr #3
   17aa8:	andeq	r8, r1, ip, lsr #3
   17aac:	andeq	r8, r1, ip, lsr #3
   17ab0:	andeq	r8, r1, ip, lsr #3
   17ab4:	andeq	r8, r1, ip, lsr #3
   17ab8:	andeq	r8, r1, ip, lsr #3
   17abc:	andeq	r8, r1, ip, lsr #3
   17ac0:	andeq	r8, r1, ip, lsr #3
   17ac4:	andeq	r8, r1, ip, lsr #3
   17ac8:	andeq	r8, r1, ip, lsr #3
   17acc:	andeq	r8, r1, ip, lsr #3
   17ad0:	andeq	r8, r1, ip, lsr #3
   17ad4:	andeq	r8, r1, ip, lsr #3
   17ad8:	andeq	r7, r1, r0, ror ip
   17adc:	andeq	r8, r1, ip, lsl #1
   17ae0:	andeq	r7, r1, r0, ror ip
   17ae4:	muleq	r1, r0, r1
   17ae8:	cmp	r4, #0
   17aec:	moveq	r3, #1
   17af0:	streq	r3, [sp, #28]
   17af4:	beq	18220 <__assert_fail@plt+0x6e30>
   17af8:	mov	r3, #0
   17afc:	mov	r4, r3
   17b00:	mov	r2, #1
   17b04:	str	r2, [sp, #40]	; 0x28
   17b08:	str	r3, [sp, #68]	; 0x44
   17b0c:	str	r2, [sp, #32]
   17b10:	str	r2, [sp, #52]	; 0x34
   17b14:	ldr	r3, [pc, #2584]	; 18534 <__assert_fail@plt+0x7144>
   17b18:	str	r4, [sp, #44]	; 0x2c
   17b1c:	str	r4, [sp, #72]	; 0x48
   17b20:	str	r4, [sp, #28]
   17b24:	str	r3, [sp, #60]	; 0x3c
   17b28:	mov	r8, #2
   17b2c:	b	17818 <__assert_fail@plt+0x6428>
   17b30:	cmp	r4, #0
   17b34:	bne	18dc0 <__assert_fail@plt+0x79d0>
   17b38:	cmp	sl, #0
   17b3c:	beq	18b80 <__assert_fail@plt+0x7790>
   17b40:	mov	r3, #34	; 0x22
   17b44:	strb	r3, [fp]
   17b48:	ldr	r3, [pc, #2528]	; 18530 <__assert_fail@plt+0x7140>
   17b4c:	mov	r1, r4
   17b50:	mov	r2, #1
   17b54:	str	r4, [sp, #68]	; 0x44
   17b58:	str	r2, [sp, #40]	; 0x28
   17b5c:	mov	r4, r2
   17b60:	str	r1, [sp, #44]	; 0x2c
   17b64:	str	r1, [sp, #72]	; 0x48
   17b68:	str	r1, [sp, #32]
   17b6c:	str	r2, [sp, #28]
   17b70:	str	r2, [sp, #52]	; 0x34
   17b74:	str	r3, [sp, #60]	; 0x3c
   17b78:	b	17818 <__assert_fail@plt+0x6428>
   17b7c:	mov	r3, #0
   17b80:	str	r3, [sp, #68]	; 0x44
   17b84:	str	r3, [sp, #44]	; 0x2c
   17b88:	str	r3, [sp, #32]
   17b8c:	str	r3, [sp, #28]
   17b90:	str	r3, [sp, #60]	; 0x3c
   17b94:	mov	r3, #1
   17b98:	str	r8, [sp, #72]	; 0x48
   17b9c:	str	r8, [sp, #52]	; 0x34
   17ba0:	mov	r4, r8
   17ba4:	str	r3, [sp, #40]	; 0x28
   17ba8:	b	17818 <__assert_fail@plt+0x6428>
   17bac:	mov	r3, #1
   17bb0:	str	r3, [sp, #40]	; 0x28
   17bb4:	str	r3, [sp, #32]
   17bb8:	str	r3, [sp, #28]
   17bbc:	str	r3, [sp, #52]	; 0x34
   17bc0:	ldr	r3, [pc, #2408]	; 18530 <__assert_fail@plt+0x7140>
   17bc4:	mov	r2, #0
   17bc8:	mov	r4, r2
   17bcc:	str	r2, [sp, #68]	; 0x44
   17bd0:	str	r2, [sp, #44]	; 0x2c
   17bd4:	str	r2, [sp, #72]	; 0x48
   17bd8:	str	r3, [sp, #60]	; 0x3c
   17bdc:	mov	r8, #5
   17be0:	b	17818 <__assert_fail@plt+0x6428>
   17be4:	mov	r3, #0
   17be8:	mov	r2, #1
   17bec:	str	r2, [sp, #40]	; 0x28
   17bf0:	mov	r4, r3
   17bf4:	str	r3, [sp, #68]	; 0x44
   17bf8:	str	r2, [sp, #28]
   17bfc:	str	r3, [sp, #44]	; 0x2c
   17c00:	str	r3, [sp, #72]	; 0x48
   17c04:	str	r3, [sp, #32]
   17c08:	str	r3, [sp, #52]	; 0x34
   17c0c:	str	r3, [sp, #60]	; 0x3c
   17c10:	b	17818 <__assert_fail@plt+0x6428>
   17c14:	mov	r2, #1
   17c18:	mov	r3, #0
   17c1c:	str	r2, [sp, #40]	; 0x28
   17c20:	mov	r4, r3
   17c24:	str	r3, [sp, #68]	; 0x44
   17c28:	str	r8, [sp, #52]	; 0x34
   17c2c:	str	r2, [sp, #32]
   17c30:	b	17b14 <__assert_fail@plt+0x6724>
   17c34:	mov	r3, #1
   17c38:	str	r3, [sp, #40]	; 0x28
   17c3c:	str	r3, [sp, #32]
   17c40:	str	r3, [sp, #28]
   17c44:	str	r3, [sp, #52]	; 0x34
   17c48:	ldr	r3, [pc, #2276]	; 18534 <__assert_fail@plt+0x7144>
   17c4c:	mov	r2, #0
   17c50:	mov	r4, r2
   17c54:	str	r2, [sp, #68]	; 0x44
   17c58:	str	r2, [sp, #44]	; 0x2c
   17c5c:	str	r2, [sp, #72]	; 0x48
   17c60:	str	r3, [sp, #60]	; 0x3c
   17c64:	mov	r8, #2
   17c68:	b	17818 <__assert_fail@plt+0x6428>
   17c6c:	mov	r7, #0
   17c70:	ldr	r3, [sp, #24]
   17c74:	cmn	r3, #1
   17c78:	beq	187b4 <__assert_fail@plt+0x73c4>
   17c7c:	ldr	r3, [sp, #24]
   17c80:	subs	r3, r3, #1
   17c84:	movne	r3, #1
   17c88:	cmp	r3, #0
   17c8c:	sub	r2, fp, #2
   17c90:	clz	r2, r2
   17c94:	lsr	r2, r2, #5
   17c98:	bne	17e94 <__assert_fail@plt+0x6aa4>
   17c9c:	cmp	r9, #0
   17ca0:	bne	17e94 <__assert_fail@plt+0x6aa4>
   17ca4:	ldr	r3, [sp, #32]
   17ca8:	tst	r3, r2
   17cac:	bne	17fb4 <__assert_fail@plt+0x6bc4>
   17cb0:	ldr	r3, [sp, #28]
   17cb4:	eor	r3, r3, #1
   17cb8:	orr	r3, r2, r3
   17cbc:	ldr	r2, [sp, #32]
   17cc0:	eor	r3, r3, #1
   17cc4:	orrs	r3, r2, r3
   17cc8:	beq	17cf8 <__assert_fail@plt+0x6908>
   17ccc:	mov	r3, #0
   17cd0:	ldr	r1, [sp, #56]	; 0x38
   17cd4:	cmp	r1, #0
   17cd8:	beq	17cf8 <__assert_fail@plt+0x6908>
   17cdc:	lsr	r2, r5, #5
   17ce0:	and	r0, r5, #31
   17ce4:	uxtb	r2, r2
   17ce8:	ldr	r1, [r1, r2, lsl #2]
   17cec:	lsr	r2, r1, r0
   17cf0:	tst	r2, #1
   17cf4:	bne	17d00 <__assert_fail@plt+0x6910>
   17cf8:	cmp	r7, #0
   17cfc:	beq	17f50 <__assert_fail@plt+0x6b60>
   17d00:	sub	r2, fp, #2
   17d04:	clz	r2, r2
   17d08:	lsr	r2, r2, #5
   17d0c:	ldr	r3, [sp, #32]
   17d10:	cmp	r3, #0
   17d14:	bne	18040 <__assert_fail@plt+0x6c50>
   17d18:	ldr	r3, [sp, #44]	; 0x2c
   17d1c:	eor	r3, r3, #1
   17d20:	ands	r3, r2, r3
   17d24:	beq	17d5c <__assert_fail@plt+0x696c>
   17d28:	cmp	sl, r4
   17d2c:	movhi	r2, #39	; 0x27
   17d30:	strbhi	r2, [r8, r4]
   17d34:	add	r2, r4, #1
   17d38:	cmp	r2, sl
   17d3c:	movcc	r1, #36	; 0x24
   17d40:	strbcc	r1, [r8, r2]
   17d44:	add	r2, r4, #2
   17d48:	cmp	r2, sl
   17d4c:	add	r4, r4, #3
   17d50:	movcc	r1, #39	; 0x27
   17d54:	strbcc	r1, [r8, r2]
   17d58:	str	r3, [sp, #44]	; 0x2c
   17d5c:	cmp	r4, sl
   17d60:	movcc	r3, #92	; 0x5c
   17d64:	strbcc	r3, [r8, r4]
   17d68:	add	r9, r9, #1
   17d6c:	add	r4, r4, #1
   17d70:	cmp	r4, sl
   17d74:	ldr	r3, [sp, #40]	; 0x28
   17d78:	strbcc	r5, [r8, r4]
   17d7c:	cmp	r6, #0
   17d80:	moveq	r3, #0
   17d84:	str	r3, [sp, #40]	; 0x28
   17d88:	ldr	r3, [sp, #24]
   17d8c:	add	r4, r4, #1
   17d90:	cmn	r3, #1
   17d94:	bne	17834 <__assert_fail@plt+0x6444>
   17d98:	ldr	r3, [sp, #36]	; 0x24
   17d9c:	ldrb	r6, [r3, r9]
   17da0:	adds	r6, r6, #0
   17da4:	movne	r6, #1
   17da8:	cmp	r6, #0
   17dac:	bne	17848 <__assert_fail@plt+0x6458>
   17db0:	str	fp, [sp, #160]	; 0xa0
   17db4:	mov	fp, r8
   17db8:	ldr	r8, [sp, #160]	; 0xa0
   17dbc:	ldr	r1, [sp, #32]
   17dc0:	cmp	r4, #0
   17dc4:	sub	r2, r8, #2
   17dc8:	clz	r2, r2
   17dcc:	lsr	r2, r2, #5
   17dd0:	andeq	r3, r2, r1
   17dd4:	movne	r3, #0
   17dd8:	cmp	r3, #0
   17ddc:	bne	18ec8 <__assert_fail@plt+0x7ad8>
   17de0:	eor	r3, r1, #1
   17de4:	ands	r2, r2, r3
   17de8:	beq	18e04 <__assert_fail@plt+0x7a14>
   17dec:	ldr	r3, [sp, #68]	; 0x44
   17df0:	cmp	r3, #0
   17df4:	beq	18e08 <__assert_fail@plt+0x7a18>
   17df8:	ldr	r3, [sp, #40]	; 0x28
   17dfc:	cmp	r3, #0
   17e00:	bne	18e84 <__assert_fail@plt+0x7a94>
   17e04:	ldr	r3, [sp, #72]	; 0x48
   17e08:	adds	r3, r3, #0
   17e0c:	movne	r3, #1
   17e10:	cmp	sl, #0
   17e14:	movne	r3, #0
   17e18:	cmp	r3, #0
   17e1c:	ldreq	r2, [sp, #68]	; 0x44
   17e20:	beq	18e08 <__assert_fail@plt+0x7a18>
   17e24:	ldr	sl, [sp, #72]	; 0x48
   17e28:	str	r3, [sp, #68]	; 0x44
   17e2c:	ldr	r3, [pc, #1792]	; 18534 <__assert_fail@plt+0x7144>
   17e30:	mov	r2, #39	; 0x27
   17e34:	mov	r4, #1
   17e38:	str	r3, [sp, #60]	; 0x3c
   17e3c:	mov	r3, #0
   17e40:	strb	r2, [fp]
   17e44:	str	r4, [sp, #52]	; 0x34
   17e48:	mov	r8, #2
   17e4c:	str	r3, [sp, #32]
   17e50:	b	17818 <__assert_fail@plt+0x6428>
   17e54:	mov	r7, #0
   17e58:	cmp	fp, #2
   17e5c:	beq	18794 <__assert_fail@plt+0x73a4>
   17e60:	ldr	r3, [sp, #52]	; 0x34
   17e64:	ldr	r2, [sp, #28]
   17e68:	ldr	r1, [sp, #32]
   17e6c:	cmp	r3, #0
   17e70:	andne	r2, r2, r1
   17e74:	moveq	r2, #0
   17e78:	cmp	r2, #0
   17e7c:	moveq	r5, #92	; 0x5c
   17e80:	moveq	r3, r5
   17e84:	bne	187a0 <__assert_fail@plt+0x73b0>
   17e88:	ldr	r1, [sp, #28]
   17e8c:	cmp	r1, #0
   17e90:	bne	18f10 <__assert_fail@plt+0x7b20>
   17e94:	mov	r6, #0
   17e98:	b	17cb0 <__assert_fail@plt+0x68c0>
   17e9c:	mov	r7, #0
   17ea0:	cmp	fp, #2
   17ea4:	beq	18804 <__assert_fail@plt+0x7414>
   17ea8:	cmp	fp, #5
   17eac:	beq	187c8 <__assert_fail@plt+0x73d8>
   17eb0:	sub	r2, fp, #2
   17eb4:	mov	r6, #0
   17eb8:	clz	r2, r2
   17ebc:	mov	r5, #63	; 0x3f
   17ec0:	lsr	r2, r2, #5
   17ec4:	b	17cb0 <__assert_fail@plt+0x68c0>
   17ec8:	mov	r7, #0
   17ecc:	cmp	fp, #2
   17ed0:	strne	r6, [sp, #68]	; 0x44
   17ed4:	movne	r2, #0
   17ed8:	movne	r5, #39	; 0x27
   17edc:	bne	17cb0 <__assert_fail@plt+0x68c0>
   17ee0:	ldr	r3, [sp, #32]
   17ee4:	cmp	r3, #0
   17ee8:	bne	18be4 <__assert_fail@plt+0x77f4>
   17eec:	cmp	sl, #0
   17ef0:	ldr	r3, [sp, #72]	; 0x48
   17ef4:	clz	r3, r3
   17ef8:	lsr	r3, r3, #5
   17efc:	moveq	r3, #0
   17f00:	cmp	r3, #0
   17f04:	bne	18b18 <__assert_fail@plt+0x7728>
   17f08:	cmp	sl, r4
   17f0c:	movhi	r3, #39	; 0x27
   17f10:	strbhi	r3, [r8, r4]
   17f14:	add	r3, r4, #1
   17f18:	cmp	sl, r3
   17f1c:	movhi	r2, #92	; 0x5c
   17f20:	strbhi	r2, [r8, r3]
   17f24:	add	r3, r4, #2
   17f28:	cmp	sl, r3
   17f2c:	movhi	r2, #39	; 0x27
   17f30:	strbhi	r2, [r8, r3]
   17f34:	mov	r3, #0
   17f38:	cmp	r7, #0
   17f3c:	add	r4, r4, #3
   17f40:	str	r3, [sp, #44]	; 0x2c
   17f44:	str	r6, [sp, #68]	; 0x44
   17f48:	mov	r5, #39	; 0x27
   17f4c:	bne	17d00 <__assert_fail@plt+0x6910>
   17f50:	ldr	r2, [sp, #44]	; 0x2c
   17f54:	eor	r3, r3, #1
   17f58:	and	r3, r3, r2
   17f5c:	add	r9, r9, #1
   17f60:	uxtb	r3, r3
   17f64:	cmp	r3, #0
   17f68:	beq	17d70 <__assert_fail@plt+0x6980>
   17f6c:	cmp	sl, r4
   17f70:	movhi	r3, #39	; 0x27
   17f74:	strbhi	r3, [r8, r4]
   17f78:	add	r3, r4, #1
   17f7c:	cmp	sl, r3
   17f80:	movhi	r2, #39	; 0x27
   17f84:	strbhi	r2, [r8, r3]
   17f88:	mov	r3, #0
   17f8c:	add	r4, r4, #2
   17f90:	str	r3, [sp, #44]	; 0x2c
   17f94:	b	17d70 <__assert_fail@plt+0x6980>
   17f98:	mov	r3, #114	; 0x72
   17f9c:	ldr	r1, [sp, #32]
   17fa0:	sub	r2, fp, #2
   17fa4:	clz	r2, r2
   17fa8:	lsr	r2, r2, #5
   17fac:	tst	r2, r1
   17fb0:	beq	17e88 <__assert_fail@plt+0x6a98>
   17fb4:	mov	fp, r8
   17fb8:	mov	r8, #2
   17fbc:	ldr	r3, [sp, #28]
   17fc0:	cmp	r3, #0
   17fc4:	movne	r8, #4
   17fc8:	ldr	r3, [sp, #164]	; 0xa4
   17fcc:	mov	ip, #0
   17fd0:	bic	r3, r3, #2
   17fd4:	str	r3, [sp, #4]
   17fd8:	ldr	r3, [sp, #76]	; 0x4c
   17fdc:	str	r8, [sp]
   17fe0:	str	r3, [sp, #16]
   17fe4:	ldr	r3, [sp, #80]	; 0x50
   17fe8:	ldr	r2, [sp, #36]	; 0x24
   17fec:	str	r3, [sp, #12]
   17ff0:	mov	r1, sl
   17ff4:	ldr	r3, [sp, #24]
   17ff8:	mov	r0, fp
   17ffc:	str	ip, [sp, #8]
   18000:	bl	17720 <__assert_fail@plt+0x6330>
   18004:	mov	r4, r0
   18008:	ldr	r3, [pc, #1304]	; 18528 <__assert_fail@plt+0x7138>
   1800c:	ldr	r2, [sp, #116]	; 0x74
   18010:	mov	r0, r4
   18014:	ldr	r3, [r3]
   18018:	cmp	r2, r3
   1801c:	bne	18f0c <__assert_fail@plt+0x7b1c>
   18020:	add	sp, sp, #124	; 0x7c
   18024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18028:	mov	r5, #110	; 0x6e
   1802c:	ldr	r3, [sp, #32]
   18030:	mov	r2, #0
   18034:	cmp	r3, #0
   18038:	mov	r6, r2
   1803c:	beq	17d18 <__assert_fail@plt+0x6928>
   18040:	str	fp, [sp, #160]	; 0xa0
   18044:	mov	fp, r8
   18048:	ldr	r8, [sp, #160]	; 0xa0
   1804c:	mov	r3, r2
   18050:	ldr	r2, [sp, #28]
   18054:	and	r2, r2, r3
   18058:	str	r2, [sp, #28]
   1805c:	b	17fbc <__assert_fail@plt+0x6bcc>
   18060:	mov	r5, #116	; 0x74
   18064:	b	1802c <__assert_fail@plt+0x6c3c>
   18068:	mov	r5, #102	; 0x66
   1806c:	ldr	r3, [sp, #32]
   18070:	cmp	r3, #0
   18074:	bne	18c20 <__assert_fail@plt+0x7830>
   18078:	mov	r6, #0
   1807c:	b	17d5c <__assert_fail@plt+0x696c>
   18080:	mov	r5, #118	; 0x76
   18084:	b	1806c <__assert_fail@plt+0x6c7c>
   18088:	mov	r7, #0
   1808c:	mov	r6, #0
   18090:	b	17ccc <__assert_fail@plt+0x68dc>
   18094:	ldr	r3, [sp, #32]
   18098:	cmp	r3, #0
   1809c:	bne	18e64 <__assert_fail@plt+0x7a74>
   180a0:	mov	r7, r3
   180a4:	ldr	r3, [sp, #44]	; 0x2c
   180a8:	sub	r2, fp, #2
   180ac:	eor	r3, r3, #1
   180b0:	clz	r2, r2
   180b4:	lsr	r2, r2, #5
   180b8:	ands	r3, r2, r3
   180bc:	beq	18b04 <__assert_fail@plt+0x7714>
   180c0:	cmp	sl, r4
   180c4:	movhi	r1, #39	; 0x27
   180c8:	strbhi	r1, [r8, r4]
   180cc:	add	r1, r4, #1
   180d0:	cmp	sl, r1
   180d4:	movhi	r0, #36	; 0x24
   180d8:	strbhi	r0, [r8, r1]
   180dc:	add	r1, r4, #2
   180e0:	cmp	sl, r1
   180e4:	movhi	r0, #39	; 0x27
   180e8:	strbhi	r0, [r8, r1]
   180ec:	add	r1, r4, #3
   180f0:	cmp	sl, r1
   180f4:	bls	18b64 <__assert_fail@plt+0x7774>
   180f8:	mov	r4, r1
   180fc:	mov	r1, #92	; 0x5c
   18100:	strb	r1, [r8, r4]
   18104:	mov	r1, r4
   18108:	str	r3, [sp, #44]	; 0x2c
   1810c:	cmp	fp, #2
   18110:	add	r4, r4, #1
   18114:	beq	18bac <__assert_fail@plt+0x77bc>
   18118:	ldr	r0, [sp, #24]
   1811c:	add	r3, r9, #1
   18120:	cmp	r3, r0
   18124:	bcs	1813c <__assert_fail@plt+0x6d4c>
   18128:	ldr	r0, [sp, #36]	; 0x24
   1812c:	ldrb	r3, [r0, r3]
   18130:	sub	r3, r3, #48	; 0x30
   18134:	cmp	r3, #9
   18138:	bls	18bbc <__assert_fail@plt+0x77cc>
   1813c:	mov	r5, #48	; 0x30
   18140:	ldr	r3, [sp, #28]
   18144:	eor	r3, r3, #1
   18148:	orrs	r2, r2, r3
   1814c:	mov	r3, r6
   18150:	moveq	r6, r2
   18154:	beq	17cd0 <__assert_fail@plt+0x68e0>
   18158:	mov	r6, #0
   1815c:	b	17cf8 <__assert_fail@plt+0x6908>
   18160:	mov	r2, #0
   18164:	mov	r6, r2
   18168:	mov	r5, #98	; 0x62
   1816c:	b	17d18 <__assert_fail@plt+0x6928>
   18170:	mov	r5, #97	; 0x61
   18174:	b	18078 <__assert_fail@plt+0x6c88>
   18178:	mov	r3, r7
   1817c:	mov	r6, r7
   18180:	mov	r2, #0
   18184:	mov	r7, r3
   18188:	mov	r5, #32
   1818c:	b	17cb0 <__assert_fail@plt+0x68c0>
   18190:	cmp	r9, #0
   18194:	mov	r3, r7
   18198:	bne	18760 <__assert_fail@plt+0x7370>
   1819c:	mov	r6, r7
   181a0:	mov	r2, r9
   181a4:	mov	r7, r3
   181a8:	b	17cb0 <__assert_fail@plt+0x68c0>
   181ac:	mov	r6, r7
   181b0:	b	17ccc <__assert_fail@plt+0x68dc>
   181b4:	mov	r7, #0
   181b8:	ldr	r3, [sp, #64]	; 0x40
   181bc:	cmp	r3, #1
   181c0:	bne	1881c <__assert_fail@plt+0x742c>
   181c4:	bl	11270 <__ctype_b_loc@plt>
   181c8:	ldr	r2, [sp, #64]	; 0x40
   181cc:	sxth	r3, r5
   181d0:	mov	ip, r2
   181d4:	lsl	r3, r3, #1
   181d8:	ldr	r2, [r0]
   181dc:	ldrh	r3, [r2, r3]
   181e0:	and	r3, r3, #16384	; 0x4000
   181e4:	cmp	r3, #0
   181e8:	ldr	r3, [sp, #28]
   181ec:	movne	r6, #1
   181f0:	moveq	r6, #0
   181f4:	movne	r2, #0
   181f8:	andeq	r2, r3, #1
   181fc:	cmp	r2, #0
   18200:	bne	18b2c <__assert_fail@plt+0x773c>
   18204:	sub	r2, fp, #2
   18208:	clz	r2, r2
   1820c:	lsr	r2, r2, #5
   18210:	b	17cb0 <__assert_fail@plt+0x68c0>
   18214:	cmp	r4, #0
   18218:	bne	18ed8 <__assert_fail@plt+0x7ae8>
   1821c:	str	r4, [sp, #28]
   18220:	cmp	sl, #0
   18224:	bne	18f1c <__assert_fail@plt+0x7b2c>
   18228:	ldr	r3, [pc, #772]	; 18534 <__assert_fail@plt+0x7144>
   1822c:	mov	r4, #1
   18230:	str	r4, [sp, #40]	; 0x28
   18234:	str	r3, [sp, #60]	; 0x3c
   18238:	str	r4, [sp, #52]	; 0x34
   1823c:	str	sl, [sp, #72]	; 0x48
   18240:	str	sl, [sp, #68]	; 0x44
   18244:	str	sl, [sp, #44]	; 0x2c
   18248:	str	sl, [sp, #32]
   1824c:	mov	r8, #2
   18250:	b	17818 <__assert_fail@plt+0x6428>
   18254:	ldr	r3, [sp, #36]	; 0x24
   18258:	ldrb	r5, [r3, r9]
   1825c:	cmp	r5, #126	; 0x7e
   18260:	ldrls	pc, [pc, r5, lsl #2]
   18264:	b	181b8 <__assert_fail@plt+0x6dc8>
   18268:	muleq	r1, ip, r4
   1826c:			; <UNDEFINED> instruction: 0x000181b8
   18270:			; <UNDEFINED> instruction: 0x000181b8
   18274:			; <UNDEFINED> instruction: 0x000181b8
   18278:			; <UNDEFINED> instruction: 0x000181b8
   1827c:			; <UNDEFINED> instruction: 0x000181b8
   18280:			; <UNDEFINED> instruction: 0x000181b8
   18284:	andeq	r8, r1, r8, lsl #9
   18288:	andeq	r8, r1, r4, ror r4
   1828c:	andeq	r8, r1, ip, ror #8
   18290:	andeq	r8, r1, r4, ror #8
   18294:	andeq	r8, r1, r4, lsl r5
   18298:	andeq	r8, r1, r0, lsl #10
   1829c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   182a0:			; <UNDEFINED> instruction: 0x000181b8
   182a4:			; <UNDEFINED> instruction: 0x000181b8
   182a8:			; <UNDEFINED> instruction: 0x000181b8
   182ac:			; <UNDEFINED> instruction: 0x000181b8
   182b0:			; <UNDEFINED> instruction: 0x000181b8
   182b4:			; <UNDEFINED> instruction: 0x000181b8
   182b8:			; <UNDEFINED> instruction: 0x000181b8
   182bc:			; <UNDEFINED> instruction: 0x000181b8
   182c0:			; <UNDEFINED> instruction: 0x000181b8
   182c4:			; <UNDEFINED> instruction: 0x000181b8
   182c8:			; <UNDEFINED> instruction: 0x000181b8
   182cc:			; <UNDEFINED> instruction: 0x000181b8
   182d0:			; <UNDEFINED> instruction: 0x000181b8
   182d4:			; <UNDEFINED> instruction: 0x000181b8
   182d8:			; <UNDEFINED> instruction: 0x000181b8
   182dc:			; <UNDEFINED> instruction: 0x000181b8
   182e0:			; <UNDEFINED> instruction: 0x000181b8
   182e4:			; <UNDEFINED> instruction: 0x000181b8
   182e8:	strdeq	r8, [r1], -r0
   182ec:	ldrdeq	r8, [r1], -ip
   182f0:	ldrdeq	r8, [r1], -ip
   182f4:	andeq	r8, r1, ip, asr #9
   182f8:	ldrdeq	r8, [r1], -ip
   182fc:	andeq	r8, r1, r4, lsl #4
   18300:	ldrdeq	r8, [r1], -ip
   18304:	andeq	r7, r1, ip, asr #29
   18308:	ldrdeq	r8, [r1], -ip
   1830c:	ldrdeq	r8, [r1], -ip
   18310:	ldrdeq	r8, [r1], -ip
   18314:	andeq	r8, r1, r4, lsl #4
   18318:	andeq	r8, r1, r4, lsl #4
   1831c:	andeq	r8, r1, r4, lsl #4
   18320:	andeq	r8, r1, r4, lsl #4
   18324:	andeq	r8, r1, r4, lsl #4
   18328:	andeq	r8, r1, r4, lsl #4
   1832c:	andeq	r8, r1, r4, lsl #4
   18330:	andeq	r8, r1, r4, lsl #4
   18334:	andeq	r8, r1, r4, lsl #4
   18338:	andeq	r8, r1, r4, lsl #4
   1833c:	andeq	r8, r1, r4, lsl #4
   18340:	andeq	r8, r1, r4, lsl #4
   18344:	andeq	r8, r1, r4, lsl #4
   18348:	andeq	r8, r1, r4, lsl #4
   1834c:	andeq	r8, r1, r4, lsl #4
   18350:	andeq	r8, r1, r4, lsl #4
   18354:	ldrdeq	r8, [r1], -ip
   18358:	ldrdeq	r8, [r1], -ip
   1835c:	ldrdeq	r8, [r1], -ip
   18360:	ldrdeq	r8, [r1], -ip
   18364:	andeq	r7, r1, r0, lsr #29
   18368:			; <UNDEFINED> instruction: 0x000181b8
   1836c:	andeq	r8, r1, r4, lsl #4
   18370:	andeq	r8, r1, r4, lsl #4
   18374:	andeq	r8, r1, r4, lsl #4
   18378:	andeq	r8, r1, r4, lsl #4
   1837c:	andeq	r8, r1, r4, lsl #4
   18380:	andeq	r8, r1, r4, lsl #4
   18384:	andeq	r8, r1, r4, lsl #4
   18388:	andeq	r8, r1, r4, lsl #4
   1838c:	andeq	r8, r1, r4, lsl #4
   18390:	andeq	r8, r1, r4, lsl #4
   18394:	andeq	r8, r1, r4, lsl #4
   18398:	andeq	r8, r1, r4, lsl #4
   1839c:	andeq	r8, r1, r4, lsl #4
   183a0:	andeq	r8, r1, r4, lsl #4
   183a4:	andeq	r8, r1, r4, lsl #4
   183a8:	andeq	r8, r1, r4, lsl #4
   183ac:	andeq	r8, r1, r4, lsl #4
   183b0:	andeq	r8, r1, r4, lsl #4
   183b4:	andeq	r8, r1, r4, lsl #4
   183b8:	andeq	r8, r1, r4, lsl #4
   183bc:	andeq	r8, r1, r4, lsl #4
   183c0:	andeq	r8, r1, r4, lsl #4
   183c4:	andeq	r8, r1, r4, lsl #4
   183c8:	andeq	r8, r1, r4, lsl #4
   183cc:	andeq	r8, r1, r4, lsl #4
   183d0:	andeq	r8, r1, r4, lsl #4
   183d4:	ldrdeq	r8, [r1], -ip
   183d8:	andeq	r7, r1, r8, asr lr
   183dc:	andeq	r8, r1, r4, lsl #4
   183e0:	ldrdeq	r8, [r1], -ip
   183e4:	andeq	r8, r1, r4, lsl #4
   183e8:	ldrdeq	r8, [r1], -ip
   183ec:	andeq	r8, r1, r4, lsl #4
   183f0:	andeq	r8, r1, r4, lsl #4
   183f4:	andeq	r8, r1, r4, lsl #4
   183f8:	andeq	r8, r1, r4, lsl #4
   183fc:	andeq	r8, r1, r4, lsl #4
   18400:	andeq	r8, r1, r4, lsl #4
   18404:	andeq	r8, r1, r4, lsl #4
   18408:	andeq	r8, r1, r4, lsl #4
   1840c:	andeq	r8, r1, r4, lsl #4
   18410:	andeq	r8, r1, r4, lsl #4
   18414:	andeq	r8, r1, r4, lsl #4
   18418:	andeq	r8, r1, r4, lsl #4
   1841c:	andeq	r8, r1, r4, lsl #4
   18420:	andeq	r8, r1, r4, lsl #4
   18424:	andeq	r8, r1, r4, lsl #4
   18428:	andeq	r8, r1, r4, lsl #4
   1842c:	andeq	r8, r1, r4, lsl #4
   18430:	andeq	r8, r1, r4, lsl #4
   18434:	andeq	r8, r1, r4, lsl #4
   18438:	andeq	r8, r1, r4, lsl #4
   1843c:	andeq	r8, r1, r4, lsl #4
   18440:	andeq	r8, r1, r4, lsl #4
   18444:	andeq	r8, r1, r4, lsl #4
   18448:	andeq	r8, r1, r4, lsl #4
   1844c:	andeq	r8, r1, r4, lsl #4
   18450:	andeq	r8, r1, r4, lsl #4
   18454:	andeq	r7, r1, r0, ror ip
   18458:	ldrdeq	r8, [r1], -ip
   1845c:	andeq	r7, r1, r0, ror ip
   18460:	andeq	r8, r1, ip, asr #9
   18464:	mov	r3, #110	; 0x6e
   18468:	b	17f9c <__assert_fail@plt+0x6bac>
   1846c:	mov	r3, #116	; 0x74
   18470:	b	17f9c <__assert_fail@plt+0x6bac>
   18474:	sub	r2, fp, #2
   18478:	mov	r3, #98	; 0x62
   1847c:	clz	r2, r2
   18480:	lsr	r2, r2, #5
   18484:	b	17e88 <__assert_fail@plt+0x6a98>
   18488:	sub	r2, fp, #2
   1848c:	mov	r3, #97	; 0x61
   18490:	clz	r2, r2
   18494:	lsr	r2, r2, #5
   18498:	b	17e88 <__assert_fail@plt+0x6a98>
   1849c:	ldr	r3, [sp, #28]
   184a0:	cmp	r3, #0
   184a4:	bne	18094 <__assert_fail@plt+0x6ca4>
   184a8:	ldr	r3, [sp, #164]	; 0xa4
   184ac:	tst	r3, #1
   184b0:	bne	18b24 <__assert_fail@plt+0x7734>
   184b4:	ldr	r6, [sp, #28]
   184b8:	sub	r2, fp, #2
   184bc:	mov	r7, r6
   184c0:	clz	r2, r2
   184c4:	lsr	r2, r2, #5
   184c8:	b	17cb0 <__assert_fail@plt+0x68c0>
   184cc:	sub	r2, fp, #2
   184d0:	clz	r2, r2
   184d4:	lsr	r2, r2, #5
   184d8:	b	17c9c <__assert_fail@plt+0x68ac>
   184dc:	sub	r2, fp, #2
   184e0:	mov	r6, #0
   184e4:	clz	r2, r2
   184e8:	lsr	r2, r2, #5
   184ec:	b	17ca4 <__assert_fail@plt+0x68b4>
   184f0:	sub	r2, fp, #2
   184f4:	clz	r2, r2
   184f8:	lsr	r2, r2, #5
   184fc:	b	17ca4 <__assert_fail@plt+0x68b4>
   18500:	sub	r2, fp, #2
   18504:	mov	r3, #102	; 0x66
   18508:	clz	r2, r2
   1850c:	lsr	r2, r2, #5
   18510:	b	17e88 <__assert_fail@plt+0x6a98>
   18514:	sub	r2, fp, #2
   18518:	mov	r3, #118	; 0x76
   1851c:	clz	r2, r2
   18520:	lsr	r2, r2, #5
   18524:	b	17e88 <__assert_fail@plt+0x6a98>
   18528:	andeq	sp, r2, r8, lsl #30
   1852c:	strdeq	ip, [r1], -r0
   18530:	ldrdeq	ip, [r1], -r8
   18534:	andeq	ip, r1, ip, ror #25
   18538:	ldr	r3, [sp, #48]	; 0x30
   1853c:	ldrb	r5, [r3]
   18540:	cmp	r5, #126	; 0x7e
   18544:	ldrls	pc, [pc, r5, lsl #2]
   18548:	b	181b4 <__assert_fail@plt+0x6dc4>
   1854c:	muleq	r1, r4, r0
   18550:			; <UNDEFINED> instruction: 0x000181b4
   18554:			; <UNDEFINED> instruction: 0x000181b4
   18558:			; <UNDEFINED> instruction: 0x000181b4
   1855c:			; <UNDEFINED> instruction: 0x000181b4
   18560:			; <UNDEFINED> instruction: 0x000181b4
   18564:			; <UNDEFINED> instruction: 0x000181b4
   18568:	andeq	r8, r1, ip, lsl #15
   1856c:	andeq	r8, r1, r4, lsl #15
   18570:	andeq	r8, r1, r0, rrx
   18574:	andeq	r8, r1, r8, lsr #32
   18578:	andeq	r8, r1, r0, lsl #1
   1857c:	andeq	r8, r1, r8, rrx
   18580:	andeq	r8, r1, r8, ror r7
   18584:			; <UNDEFINED> instruction: 0x000181b4
   18588:			; <UNDEFINED> instruction: 0x000181b4
   1858c:			; <UNDEFINED> instruction: 0x000181b4
   18590:			; <UNDEFINED> instruction: 0x000181b4
   18594:			; <UNDEFINED> instruction: 0x000181b4
   18598:			; <UNDEFINED> instruction: 0x000181b4
   1859c:			; <UNDEFINED> instruction: 0x000181b4
   185a0:			; <UNDEFINED> instruction: 0x000181b4
   185a4:			; <UNDEFINED> instruction: 0x000181b4
   185a8:			; <UNDEFINED> instruction: 0x000181b4
   185ac:			; <UNDEFINED> instruction: 0x000181b4
   185b0:			; <UNDEFINED> instruction: 0x000181b4
   185b4:			; <UNDEFINED> instruction: 0x000181b4
   185b8:			; <UNDEFINED> instruction: 0x000181b4
   185bc:			; <UNDEFINED> instruction: 0x000181b4
   185c0:			; <UNDEFINED> instruction: 0x000181b4
   185c4:			; <UNDEFINED> instruction: 0x000181b4
   185c8:			; <UNDEFINED> instruction: 0x000181b4
   185cc:	andeq	r8, r1, r0, ror r7
   185d0:	andeq	r8, r1, r8, lsl #1
   185d4:	andeq	r8, r1, r8, lsl #1
   185d8:	andeq	r8, r1, r4, asr r7
   185dc:	andeq	r8, r1, r8, lsl #1
   185e0:	andeq	r8, r1, r8, asr #14
   185e4:	andeq	r8, r1, r8, lsl #1
   185e8:	andeq	r7, r1, r8, asr #29
   185ec:	andeq	r8, r1, r8, lsl #1
   185f0:	andeq	r8, r1, r8, lsl #1
   185f4:	andeq	r8, r1, r8, lsl #1
   185f8:	andeq	r8, r1, r8, asr #14
   185fc:	andeq	r8, r1, r8, asr #14
   18600:	andeq	r8, r1, r8, asr #14
   18604:	andeq	r8, r1, r8, asr #14
   18608:	andeq	r8, r1, r8, asr #14
   1860c:	andeq	r8, r1, r8, asr #14
   18610:	andeq	r8, r1, r8, asr #14
   18614:	andeq	r8, r1, r8, asr #14
   18618:	andeq	r8, r1, r8, asr #14
   1861c:	andeq	r8, r1, r8, asr #14
   18620:	andeq	r8, r1, r8, asr #14
   18624:	andeq	r8, r1, r8, asr #14
   18628:	andeq	r8, r1, r8, asr #14
   1862c:	andeq	r8, r1, r8, asr #14
   18630:	andeq	r8, r1, r8, asr #14
   18634:	andeq	r8, r1, r8, asr #14
   18638:	andeq	r8, r1, r8, lsl #1
   1863c:	andeq	r8, r1, r8, lsl #1
   18640:	andeq	r8, r1, r8, lsl #1
   18644:	andeq	r8, r1, r8, lsl #1
   18648:	muleq	r1, ip, lr
   1864c:			; <UNDEFINED> instruction: 0x000181b4
   18650:	andeq	r8, r1, r8, asr #14
   18654:	andeq	r8, r1, r8, asr #14
   18658:	andeq	r8, r1, r8, asr #14
   1865c:	andeq	r8, r1, r8, asr #14
   18660:	andeq	r8, r1, r8, asr #14
   18664:	andeq	r8, r1, r8, asr #14
   18668:	andeq	r8, r1, r8, asr #14
   1866c:	andeq	r8, r1, r8, asr #14
   18670:	andeq	r8, r1, r8, asr #14
   18674:	andeq	r8, r1, r8, asr #14
   18678:	andeq	r8, r1, r8, asr #14
   1867c:	andeq	r8, r1, r8, asr #14
   18680:	andeq	r8, r1, r8, asr #14
   18684:	andeq	r8, r1, r8, asr #14
   18688:	andeq	r8, r1, r8, asr #14
   1868c:	andeq	r8, r1, r8, asr #14
   18690:	andeq	r8, r1, r8, asr #14
   18694:	andeq	r8, r1, r8, asr #14
   18698:	andeq	r8, r1, r8, asr #14
   1869c:	andeq	r8, r1, r8, asr #14
   186a0:	andeq	r8, r1, r8, asr #14
   186a4:	andeq	r8, r1, r8, asr #14
   186a8:	andeq	r8, r1, r8, asr #14
   186ac:	andeq	r8, r1, r8, asr #14
   186b0:	andeq	r8, r1, r8, asr #14
   186b4:	andeq	r8, r1, r8, asr #14
   186b8:	andeq	r8, r1, r8, lsl #1
   186bc:	andeq	r7, r1, r4, asr lr
   186c0:	andeq	r8, r1, r8, asr #14
   186c4:	andeq	r8, r1, r8, lsl #1
   186c8:	andeq	r8, r1, r8, asr #14
   186cc:	andeq	r8, r1, r8, lsl #1
   186d0:	andeq	r8, r1, r8, asr #14
   186d4:	andeq	r8, r1, r8, asr #14
   186d8:	andeq	r8, r1, r8, asr #14
   186dc:	andeq	r8, r1, r8, asr #14
   186e0:	andeq	r8, r1, r8, asr #14
   186e4:	andeq	r8, r1, r8, asr #14
   186e8:	andeq	r8, r1, r8, asr #14
   186ec:	andeq	r8, r1, r8, asr #14
   186f0:	andeq	r8, r1, r8, asr #14
   186f4:	andeq	r8, r1, r8, asr #14
   186f8:	andeq	r8, r1, r8, asr #14
   186fc:	andeq	r8, r1, r8, asr #14
   18700:	andeq	r8, r1, r8, asr #14
   18704:	andeq	r8, r1, r8, asr #14
   18708:	andeq	r8, r1, r8, asr #14
   1870c:	andeq	r8, r1, r8, asr #14
   18710:	andeq	r8, r1, r8, asr #14
   18714:	andeq	r8, r1, r8, asr #14
   18718:	andeq	r8, r1, r8, asr #14
   1871c:	andeq	r8, r1, r8, asr #14
   18720:	andeq	r8, r1, r8, asr #14
   18724:	andeq	r8, r1, r8, asr #14
   18728:	andeq	r8, r1, r8, asr #14
   1872c:	andeq	r8, r1, r8, asr #14
   18730:	andeq	r8, r1, r8, asr #14
   18734:	andeq	r8, r1, r8, asr #14
   18738:	andeq	r7, r1, ip, ror #24
   1873c:	andeq	r8, r1, r8, lsl #1
   18740:	andeq	r7, r1, ip, ror #24
   18744:	andeq	r8, r1, r4, asr r7
   18748:	mov	r6, r7
   1874c:	mov	r7, #0
   18750:	b	17ccc <__assert_fail@plt+0x68dc>
   18754:	cmp	r9, #0
   18758:	mov	r3, #0
   1875c:	beq	1819c <__assert_fail@plt+0x6dac>
   18760:	mov	r6, #0
   18764:	mov	r7, r3
   18768:	mov	r3, r6
   1876c:	b	17cd0 <__assert_fail@plt+0x68e0>
   18770:	mov	r3, #0
   18774:	b	1817c <__assert_fail@plt+0x6d8c>
   18778:	mov	r7, #0
   1877c:	mov	r3, #114	; 0x72
   18780:	b	17f9c <__assert_fail@plt+0x6bac>
   18784:	mov	r5, #98	; 0x62
   18788:	b	1802c <__assert_fail@plt+0x6c3c>
   1878c:	mov	r5, #97	; 0x61
   18790:	b	1806c <__assert_fail@plt+0x6c7c>
   18794:	ldr	r3, [sp, #32]
   18798:	cmp	r3, #0
   1879c:	bne	18be4 <__assert_fail@plt+0x77f4>
   187a0:	add	r9, r9, #1
   187a4:	ldr	r3, [sp, #44]	; 0x2c
   187a8:	mov	r6, #0
   187ac:	mov	r5, #92	; 0x5c
   187b0:	b	17f64 <__assert_fail@plt+0x6b74>
   187b4:	ldr	r3, [sp, #36]	; 0x24
   187b8:	ldrb	r3, [r3, #1]
   187bc:	adds	r3, r3, #0
   187c0:	movne	r3, #1
   187c4:	b	17c88 <__assert_fail@plt+0x6898>
   187c8:	ldr	r3, [sp, #164]	; 0xa4
   187cc:	ands	r3, r3, #4
   187d0:	beq	187f4 <__assert_fail@plt+0x7404>
   187d4:	ldr	r2, [sp, #24]
   187d8:	add	r3, r9, #2
   187dc:	cmp	r3, r2
   187e0:	bcs	187f4 <__assert_fail@plt+0x7404>
   187e4:	ldr	r2, [sp, #48]	; 0x30
   187e8:	ldrb	r5, [r2, #1]
   187ec:	cmp	r5, #63	; 0x3f
   187f0:	beq	18c58 <__assert_fail@plt+0x7868>
   187f4:	mov	r2, #0
   187f8:	mov	r6, r2
   187fc:	mov	r5, #63	; 0x3f
   18800:	b	17cb0 <__assert_fail@plt+0x68c0>
   18804:	ldr	r3, [sp, #32]
   18808:	cmp	r3, #0
   1880c:	bne	18be4 <__assert_fail@plt+0x77f4>
   18810:	mov	r6, r3
   18814:	mov	r5, #63	; 0x3f
   18818:	b	17cf8 <__assert_fail@plt+0x6908>
   1881c:	ldr	r3, [sp, #24]
   18820:	cmn	r3, #1
   18824:	mov	r3, #0
   18828:	str	r3, [sp, #108]	; 0x6c
   1882c:	str	r3, [sp, #112]	; 0x70
   18830:	bne	18840 <__assert_fail@plt+0x7450>
   18834:	ldr	r0, [sp, #36]	; 0x24
   18838:	bl	11288 <strlen@plt>
   1883c:	str	r0, [sp, #24]
   18840:	mov	r3, #0
   18844:	str	sl, [sp, #88]	; 0x58
   18848:	ldr	sl, [sp, #36]	; 0x24
   1884c:	str	r5, [sp, #92]	; 0x5c
   18850:	mov	r5, r3
   18854:	str	r7, [sp, #96]	; 0x60
   18858:	str	r4, [sp, #100]	; 0x64
   1885c:	str	r8, [sp, #84]	; 0x54
   18860:	ldr	r3, [sp, #24]
   18864:	add	r4, r9, r5
   18868:	add	r7, sl, r4
   1886c:	sub	r2, r3, r4
   18870:	mov	r1, r7
   18874:	add	r3, sp, #108	; 0x6c
   18878:	add	r0, sp, #104	; 0x68
   1887c:	bl	1adf4 <__assert_fail@plt+0x9a04>
   18880:	subs	r8, r0, #0
   18884:	beq	188d4 <__assert_fail@plt+0x74e4>
   18888:	cmn	r8, #1
   1888c:	beq	18c34 <__assert_fail@plt+0x7844>
   18890:	cmn	r8, #2
   18894:	beq	18d54 <__assert_fail@plt+0x7964>
   18898:	ldr	r3, [sp, #32]
   1889c:	cmp	fp, #2
   188a0:	movne	r3, #0
   188a4:	andeq	r3, r3, #1
   188a8:	cmp	r3, #0
   188ac:	bne	18a34 <__assert_fail@plt+0x7644>
   188b0:	ldr	r0, [sp, #104]	; 0x68
   188b4:	bl	111b0 <iswprint@plt>
   188b8:	add	r5, r5, r8
   188bc:	cmp	r0, #0
   188c0:	add	r0, sp, #108	; 0x6c
   188c4:	moveq	r6, #0
   188c8:	bl	11138 <mbsinit@plt>
   188cc:	cmp	r0, #0
   188d0:	beq	18860 <__assert_fail@plt+0x7470>
   188d4:	ldr	r3, [sp, #28]
   188d8:	mov	ip, r5
   188dc:	eor	r2, r6, #1
   188e0:	ldr	r5, [sp, #92]	; 0x5c
   188e4:	ldr	r7, [sp, #96]	; 0x60
   188e8:	ldr	r4, [sp, #100]	; 0x64
   188ec:	ldr	r8, [sp, #84]	; 0x54
   188f0:	ldr	sl, [sp, #88]	; 0x58
   188f4:	and	r2, r2, r3
   188f8:	cmp	ip, #1
   188fc:	bls	181fc <__assert_fail@plt+0x6e0c>
   18900:	add	r1, ip, r9
   18904:	ldr	lr, [sp, #48]	; 0x30
   18908:	mov	r0, #0
   1890c:	str	r6, [sp, #48]	; 0x30
   18910:	mov	ip, #39	; 0x27
   18914:	ldr	r6, [sp, #44]	; 0x2c
   18918:	b	189d0 <__assert_fail@plt+0x75e0>
   1891c:	ldr	r0, [sp, #32]
   18920:	sub	r3, fp, #2
   18924:	cmp	r0, #0
   18928:	clz	r3, r3
   1892c:	lsr	r3, r3, #5
   18930:	bne	18b38 <__assert_fail@plt+0x7748>
   18934:	eor	r0, r6, #1
   18938:	ands	r3, r3, r0
   1893c:	beq	1896c <__assert_fail@plt+0x757c>
   18940:	add	r0, r4, #1
   18944:	cmp	sl, r4
   18948:	strbhi	ip, [r8, r4]
   1894c:	cmp	sl, r0
   18950:	movhi	r6, #36	; 0x24
   18954:	strbhi	r6, [r8, r0]
   18958:	add	r0, r4, #2
   1895c:	mov	r6, r3
   18960:	add	r4, r4, #3
   18964:	cmp	sl, r0
   18968:	strbhi	ip, [r8, r0]
   1896c:	cmp	sl, r4
   18970:	movhi	r3, #92	; 0x5c
   18974:	strbhi	r3, [r8, r4]
   18978:	add	r3, r4, #1
   1897c:	cmp	sl, r3
   18980:	lsrhi	r0, r5, #6
   18984:	addhi	r0, r0, #48	; 0x30
   18988:	strbhi	r0, [r8, r3]
   1898c:	add	r0, r4, #2
   18990:	cmp	sl, r0
   18994:	lsrhi	r3, r5, #3
   18998:	andhi	r3, r3, #7
   1899c:	addhi	r3, r3, #48	; 0x30
   189a0:	add	r9, r9, #1
   189a4:	strbhi	r3, [r8, r0]
   189a8:	and	r5, r5, #7
   189ac:	cmp	r9, r1
   189b0:	add	r5, r5, #48	; 0x30
   189b4:	add	r4, r4, #3
   189b8:	bcs	18b58 <__assert_fail@plt+0x7768>
   189bc:	mov	r0, r2
   189c0:	cmp	sl, r4
   189c4:	strbhi	r5, [r8, r4]
   189c8:	ldrb	r5, [lr, #1]!
   189cc:	add	r4, r4, #1
   189d0:	cmp	r2, #0
   189d4:	bne	1891c <__assert_fail@plt+0x752c>
   189d8:	eor	r3, r0, #1
   189dc:	and	r3, r3, r6
   189e0:	cmp	r7, #0
   189e4:	uxtb	r3, r3
   189e8:	beq	189fc <__assert_fail@plt+0x760c>
   189ec:	cmp	sl, r4
   189f0:	movhi	r7, #92	; 0x5c
   189f4:	strbhi	r7, [r8, r4]
   189f8:	add	r4, r4, #1
   189fc:	add	r9, r9, #1
   18a00:	cmp	r9, r1
   18a04:	bcs	18b4c <__assert_fail@plt+0x775c>
   18a08:	cmp	r3, #0
   18a0c:	beq	18b78 <__assert_fail@plt+0x7788>
   18a10:	cmp	sl, r4
   18a14:	add	r3, r4, #1
   18a18:	strbhi	ip, [r8, r4]
   18a1c:	mov	r7, #0
   18a20:	cmp	sl, r3
   18a24:	strbhi	ip, [r8, r3]
   18a28:	add	r4, r4, #2
   18a2c:	mov	r6, r7
   18a30:	b	189c0 <__assert_fail@plt+0x75d0>
   18a34:	cmp	r8, #1
   18a38:	beq	188b0 <__assert_fail@plt+0x74c0>
   18a3c:	add	r1, r4, #1
   18a40:	add	r3, sl, r8
   18a44:	add	r1, sl, r1
   18a48:	add	r4, r3, r4
   18a4c:	ldrb	r3, [r1], #1
   18a50:	sub	r3, r3, #91	; 0x5b
   18a54:	cmp	r3, #33	; 0x21
   18a58:	ldrls	pc, [pc, r3, lsl #2]
   18a5c:	b	18ae8 <__assert_fail@plt+0x76f8>
   18a60:	strdeq	r8, [r1], -r4
   18a64:	strdeq	r8, [r1], -r4
   18a68:	andeq	r8, r1, r8, ror #21
   18a6c:	strdeq	r8, [r1], -r4
   18a70:	andeq	r8, r1, r8, ror #21
   18a74:	strdeq	r8, [r1], -r4
   18a78:	andeq	r8, r1, r8, ror #21
   18a7c:	andeq	r8, r1, r8, ror #21
   18a80:	andeq	r8, r1, r8, ror #21
   18a84:	andeq	r8, r1, r8, ror #21
   18a88:	andeq	r8, r1, r8, ror #21
   18a8c:	andeq	r8, r1, r8, ror #21
   18a90:	andeq	r8, r1, r8, ror #21
   18a94:	andeq	r8, r1, r8, ror #21
   18a98:	andeq	r8, r1, r8, ror #21
   18a9c:	andeq	r8, r1, r8, ror #21
   18aa0:	andeq	r8, r1, r8, ror #21
   18aa4:	andeq	r8, r1, r8, ror #21
   18aa8:	andeq	r8, r1, r8, ror #21
   18aac:	andeq	r8, r1, r8, ror #21
   18ab0:	andeq	r8, r1, r8, ror #21
   18ab4:	andeq	r8, r1, r8, ror #21
   18ab8:	andeq	r8, r1, r8, ror #21
   18abc:	andeq	r8, r1, r8, ror #21
   18ac0:	andeq	r8, r1, r8, ror #21
   18ac4:	andeq	r8, r1, r8, ror #21
   18ac8:	andeq	r8, r1, r8, ror #21
   18acc:	andeq	r8, r1, r8, ror #21
   18ad0:	andeq	r8, r1, r8, ror #21
   18ad4:	andeq	r8, r1, r8, ror #21
   18ad8:	andeq	r8, r1, r8, ror #21
   18adc:	andeq	r8, r1, r8, ror #21
   18ae0:	andeq	r8, r1, r8, ror #21
   18ae4:	strdeq	r8, [r1], -r4
   18ae8:	cmp	r4, r1
   18aec:	bne	18a4c <__assert_fail@plt+0x765c>
   18af0:	b	188b0 <__assert_fail@plt+0x74c0>
   18af4:	ldr	fp, [sp, #84]	; 0x54
   18af8:	ldr	sl, [sp, #88]	; 0x58
   18afc:	mov	r8, #2
   18b00:	b	17fbc <__assert_fail@plt+0x6bcc>
   18b04:	cmp	sl, r4
   18b08:	movls	r1, r4
   18b0c:	bls	1810c <__assert_fail@plt+0x6d1c>
   18b10:	ldr	r3, [sp, #44]	; 0x2c
   18b14:	b	180fc <__assert_fail@plt+0x6d0c>
   18b18:	str	sl, [sp, #72]	; 0x48
   18b1c:	ldr	sl, [sp, #32]
   18b20:	b	17f34 <__assert_fail@plt+0x6b44>
   18b24:	add	r9, r9, #1
   18b28:	b	17828 <__assert_fail@plt+0x6438>
   18b2c:	ldr	r2, [sp, #28]
   18b30:	mov	r6, #0
   18b34:	b	18900 <__assert_fail@plt+0x7510>
   18b38:	str	fp, [sp, #160]	; 0xa0
   18b3c:	str	r3, [sp, #28]
   18b40:	mov	fp, r8
   18b44:	ldr	r8, [sp, #160]	; 0xa0
   18b48:	b	17fbc <__assert_fail@plt+0x6bcc>
   18b4c:	str	r6, [sp, #44]	; 0x2c
   18b50:	ldr	r6, [sp, #48]	; 0x30
   18b54:	b	17f64 <__assert_fail@plt+0x6b74>
   18b58:	str	r6, [sp, #44]	; 0x2c
   18b5c:	ldr	r6, [sp, #48]	; 0x30
   18b60:	b	17d70 <__assert_fail@plt+0x6980>
   18b64:	add	r4, r4, #4
   18b68:	str	r3, [sp, #44]	; 0x2c
   18b6c:	mov	r6, #0
   18b70:	mov	r5, #48	; 0x30
   18b74:	b	17cf8 <__assert_fail@plt+0x6908>
   18b78:	mov	r7, r3
   18b7c:	b	189c0 <__assert_fail@plt+0x75d0>
   18b80:	ldr	r3, [pc, #-1624]	; 18530 <__assert_fail@plt+0x7140>
   18b84:	mov	r4, #1
   18b88:	str	r4, [sp, #40]	; 0x28
   18b8c:	str	r4, [sp, #28]
   18b90:	str	r4, [sp, #52]	; 0x34
   18b94:	str	sl, [sp, #72]	; 0x48
   18b98:	str	sl, [sp, #68]	; 0x44
   18b9c:	str	sl, [sp, #44]	; 0x2c
   18ba0:	str	sl, [sp, #32]
   18ba4:	str	r3, [sp, #60]	; 0x3c
   18ba8:	b	17818 <__assert_fail@plt+0x6428>
   18bac:	mov	r3, r6
   18bb0:	mov	r5, #48	; 0x30
   18bb4:	mov	r6, #0
   18bb8:	b	17cf8 <__assert_fail@plt+0x6908>
   18bbc:	cmp	sl, r4
   18bc0:	movhi	r3, #48	; 0x30
   18bc4:	strbhi	r3, [r8, r4]
   18bc8:	add	r3, r1, #2
   18bcc:	cmp	sl, r3
   18bd0:	movhi	r0, #48	; 0x30
   18bd4:	strbhi	r0, [r8, r3]
   18bd8:	add	r4, r1, #3
   18bdc:	mov	r5, #48	; 0x30
   18be0:	b	18140 <__assert_fail@plt+0x6d50>
   18be4:	str	fp, [sp, #160]	; 0xa0
   18be8:	mov	fp, r8
   18bec:	ldr	r8, [sp, #160]	; 0xa0
   18bf0:	b	17fbc <__assert_fail@plt+0x6bcc>
   18bf4:	ldr	r2, [sp, #80]	; 0x50
   18bf8:	ldrb	r3, [r2]
   18bfc:	cmp	r3, #0
   18c00:	beq	177e8 <__assert_fail@plt+0x63f8>
   18c04:	cmp	sl, r4
   18c08:	strbhi	r3, [fp, r4]
   18c0c:	ldrb	r3, [r2, #1]!
   18c10:	add	r4, r4, #1
   18c14:	cmp	r3, #0
   18c18:	bne	18c04 <__assert_fail@plt+0x7814>
   18c1c:	b	177e8 <__assert_fail@plt+0x63f8>
   18c20:	str	fp, [sp, #160]	; 0xa0
   18c24:	mov	r3, #0
   18c28:	mov	fp, r8
   18c2c:	ldr	r8, [sp, #160]	; 0xa0
   18c30:	b	18050 <__assert_fail@plt+0x6c60>
   18c34:	mov	ip, r5
   18c38:	ldr	r7, [sp, #96]	; 0x60
   18c3c:	ldr	r5, [sp, #92]	; 0x5c
   18c40:	ldr	r4, [sp, #100]	; 0x64
   18c44:	ldr	r8, [sp, #84]	; 0x54
   18c48:	ldr	sl, [sp, #88]	; 0x58
   18c4c:	ldr	r2, [sp, #28]
   18c50:	mov	r6, #0
   18c54:	b	188f8 <__assert_fail@plt+0x7508>
   18c58:	ldr	r2, [sp, #36]	; 0x24
   18c5c:	ldrb	r1, [r2, r3]
   18c60:	sub	r2, r1, #33	; 0x21
   18c64:	cmp	r2, #29
   18c68:	ldrls	pc, [pc, r2, lsl #2]
   18c6c:	b	18d48 <__assert_fail@plt+0x7958>
   18c70:	andeq	r8, r1, r8, ror #25
   18c74:	andeq	r8, r1, r8, asr #26
   18c78:	andeq	r8, r1, r8, asr #26
   18c7c:	andeq	r8, r1, r8, asr #26
   18c80:	andeq	r8, r1, r8, asr #26
   18c84:	andeq	r8, r1, r8, asr #26
   18c88:	andeq	r8, r1, r8, ror #25
   18c8c:	andeq	r8, r1, r8, ror #25
   18c90:	andeq	r8, r1, r8, ror #25
   18c94:	andeq	r8, r1, r8, asr #26
   18c98:	andeq	r8, r1, r8, asr #26
   18c9c:	andeq	r8, r1, r8, asr #26
   18ca0:	andeq	r8, r1, r8, ror #25
   18ca4:	andeq	r8, r1, r8, asr #26
   18ca8:	andeq	r8, r1, r8, ror #25
   18cac:	andeq	r8, r1, r8, asr #26
   18cb0:	andeq	r8, r1, r8, asr #26
   18cb4:	andeq	r8, r1, r8, asr #26
   18cb8:	andeq	r8, r1, r8, asr #26
   18cbc:	andeq	r8, r1, r8, asr #26
   18cc0:	andeq	r8, r1, r8, asr #26
   18cc4:	andeq	r8, r1, r8, asr #26
   18cc8:	andeq	r8, r1, r8, asr #26
   18ccc:	andeq	r8, r1, r8, asr #26
   18cd0:	andeq	r8, r1, r8, asr #26
   18cd4:	andeq	r8, r1, r8, asr #26
   18cd8:	andeq	r8, r1, r8, asr #26
   18cdc:	andeq	r8, r1, r8, ror #25
   18ce0:	andeq	r8, r1, r8, ror #25
   18ce4:	andeq	r8, r1, r8, ror #25
   18ce8:	ldr	r2, [sp, #32]
   18cec:	cmp	r2, #0
   18cf0:	bne	18df4 <__assert_fail@plt+0x7a04>
   18cf4:	cmp	sl, r4
   18cf8:	movhi	r2, #63	; 0x3f
   18cfc:	strbhi	r2, [r8, r4]
   18d00:	add	r2, r4, #1
   18d04:	cmp	sl, r2
   18d08:	movhi	r0, #34	; 0x22
   18d0c:	strbhi	r0, [r8, r2]
   18d10:	add	r2, r4, #2
   18d14:	cmp	sl, r2
   18d18:	movhi	r0, #34	; 0x22
   18d1c:	strbhi	r0, [r8, r2]
   18d20:	add	r2, r4, #3
   18d24:	cmp	sl, r2
   18d28:	movhi	r0, #63	; 0x3f
   18d2c:	strbhi	r0, [r8, r2]
   18d30:	mov	r2, #0
   18d34:	add	r4, r4, #4
   18d38:	mov	r5, r1
   18d3c:	mov	r9, r3
   18d40:	mov	r6, r2
   18d44:	b	18140 <__assert_fail@plt+0x6d50>
   18d48:	mov	r2, #0
   18d4c:	mov	r6, r2
   18d50:	b	17cb0 <__assert_fail@plt+0x68c0>
   18d54:	ldr	r0, [sp, #24]
   18d58:	mov	r1, r4
   18d5c:	cmp	r1, r0
   18d60:	mov	r2, r7
   18d64:	mov	r3, r5
   18d68:	mov	ip, r5
   18d6c:	ldr	r7, [sp, #96]	; 0x60
   18d70:	ldr	r5, [sp, #92]	; 0x5c
   18d74:	ldr	r4, [sp, #100]	; 0x64
   18d78:	ldr	r8, [sp, #84]	; 0x54
   18d7c:	ldr	sl, [sp, #88]	; 0x58
   18d80:	bcs	18db4 <__assert_fail@plt+0x79c4>
   18d84:	ldrb	r6, [r2]
   18d88:	cmp	r6, #0
   18d8c:	bne	18da0 <__assert_fail@plt+0x79b0>
   18d90:	b	18ed0 <__assert_fail@plt+0x7ae0>
   18d94:	ldrb	r6, [r2, #1]!
   18d98:	cmp	r6, #0
   18d9c:	beq	18e58 <__assert_fail@plt+0x7a68>
   18da0:	add	r3, r3, #1
   18da4:	add	r1, r9, r3
   18da8:	cmp	r1, r0
   18dac:	bcc	18d94 <__assert_fail@plt+0x79a4>
   18db0:	mov	ip, r3
   18db4:	ldr	r2, [sp, #28]
   18db8:	mov	r6, #0
   18dbc:	b	188f8 <__assert_fail@plt+0x7508>
   18dc0:	mov	r3, #1
   18dc4:	str	r3, [sp, #40]	; 0x28
   18dc8:	str	r3, [sp, #32]
   18dcc:	str	r3, [sp, #28]
   18dd0:	str	r3, [sp, #52]	; 0x34
   18dd4:	ldr	r3, [pc, #-2220]	; 18530 <__assert_fail@plt+0x7140>
   18dd8:	mov	r2, #0
   18ddc:	str	r2, [sp, #68]	; 0x44
   18de0:	str	r2, [sp, #44]	; 0x2c
   18de4:	str	r2, [sp, #72]	; 0x48
   18de8:	mov	r4, r2
   18dec:	str	r3, [sp, #60]	; 0x3c
   18df0:	b	17818 <__assert_fail@plt+0x6428>
   18df4:	str	fp, [sp, #160]	; 0xa0
   18df8:	mov	fp, r8
   18dfc:	ldr	r8, [sp, #160]	; 0xa0
   18e00:	b	17fc8 <__assert_fail@plt+0x6bd8>
   18e04:	mov	r2, r3
   18e08:	ldr	r3, [sp, #60]	; 0x3c
   18e0c:	cmp	r3, #0
   18e10:	moveq	r2, #0
   18e14:	andne	r2, r2, #1
   18e18:	cmp	r2, #0
   18e1c:	beq	18e48 <__assert_fail@plt+0x7a58>
   18e20:	mov	r2, r3
   18e24:	ldrb	r3, [r3]
   18e28:	cmp	r3, #0
   18e2c:	beq	18e48 <__assert_fail@plt+0x7a58>
   18e30:	cmp	sl, r4
   18e34:	strbhi	r3, [fp, r4]
   18e38:	ldrb	r3, [r2, #1]!
   18e3c:	add	r4, r4, #1
   18e40:	cmp	r3, #0
   18e44:	bne	18e30 <__assert_fail@plt+0x7a40>
   18e48:	cmp	sl, r4
   18e4c:	movhi	r3, #0
   18e50:	strbhi	r3, [fp, r4]
   18e54:	b	18008 <__assert_fail@plt+0x6c18>
   18e58:	mov	ip, r3
   18e5c:	ldr	r2, [sp, #28]
   18e60:	b	188f8 <__assert_fail@plt+0x7508>
   18e64:	str	fp, [sp, #160]	; 0xa0
   18e68:	mov	fp, r8
   18e6c:	ldr	r8, [sp, #160]	; 0xa0
   18e70:	sub	r3, r8, #2
   18e74:	clz	r3, r3
   18e78:	lsr	r3, r3, #5
   18e7c:	str	r3, [sp, #28]
   18e80:	b	17fbc <__assert_fail@plt+0x6bcc>
   18e84:	ldr	r3, [sp, #76]	; 0x4c
   18e88:	mov	ip, #5
   18e8c:	str	r3, [sp, #16]
   18e90:	ldr	r3, [sp, #80]	; 0x50
   18e94:	ldr	r2, [sp, #36]	; 0x24
   18e98:	str	r3, [sp, #12]
   18e9c:	ldr	r3, [sp, #56]	; 0x38
   18ea0:	ldr	r1, [sp, #72]	; 0x48
   18ea4:	str	r3, [sp, #8]
   18ea8:	ldr	r3, [sp, #164]	; 0xa4
   18eac:	mov	r0, fp
   18eb0:	str	r3, [sp, #4]
   18eb4:	str	ip, [sp]
   18eb8:	ldr	r3, [sp, #24]
   18ebc:	bl	17720 <__assert_fail@plt+0x6330>
   18ec0:	mov	r4, r0
   18ec4:	b	18008 <__assert_fail@plt+0x6c18>
   18ec8:	mov	r8, #2
   18ecc:	b	17fbc <__assert_fail@plt+0x6bcc>
   18ed0:	ldr	r2, [sp, #28]
   18ed4:	b	188f8 <__assert_fail@plt+0x7508>
   18ed8:	mov	r3, #0
   18edc:	str	r3, [sp, #68]	; 0x44
   18ee0:	str	r3, [sp, #44]	; 0x2c
   18ee4:	str	r3, [sp, #72]	; 0x48
   18ee8:	str	r3, [sp, #28]
   18eec:	mov	r4, r3
   18ef0:	ldr	r3, [pc, #-2500]	; 18534 <__assert_fail@plt+0x7144>
   18ef4:	mov	r2, #1
   18ef8:	str	r2, [sp, #40]	; 0x28
   18efc:	str	r2, [sp, #32]
   18f00:	str	r2, [sp, #52]	; 0x34
   18f04:	str	r3, [sp, #60]	; 0x3c
   18f08:	b	17818 <__assert_fail@plt+0x6428>
   18f0c:	bl	11174 <__stack_chk_fail@plt>
   18f10:	mov	r5, r3
   18f14:	mov	r6, #0
   18f18:	b	17d0c <__assert_fail@plt+0x691c>
   18f1c:	mov	r3, #0
   18f20:	mov	r2, #1
   18f24:	str	r3, [sp, #44]	; 0x2c
   18f28:	str	r3, [sp, #72]	; 0x48
   18f2c:	str	r2, [sp, #40]	; 0x28
   18f30:	b	17e28 <__assert_fail@plt+0x6a38>
   18f34:	bl	113cc <abort@plt>
   18f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f3c:	sub	sp, sp, #44	; 0x2c
   18f40:	mov	r6, r0
   18f44:	mov	r4, r3
   18f48:	mov	sl, r1
   18f4c:	mov	fp, r2
   18f50:	bl	112c4 <__errno_location@plt>
   18f54:	ldr	r7, [pc, #364]	; 190c8 <__assert_fail@plt+0x7cd8>
   18f58:	cmp	r6, #0
   18f5c:	ldr	r5, [r7]
   18f60:	ldr	r3, [r0]
   18f64:	str	r3, [sp, #24]
   18f68:	blt	190c4 <__assert_fail@plt+0x7cd4>
   18f6c:	ldr	r3, [r7, #4]
   18f70:	mov	r8, r0
   18f74:	cmp	r3, r6
   18f78:	bgt	18fc4 <__assert_fail@plt+0x7bd4>
   18f7c:	cmn	r6, #-268435454	; 0xf0000002
   18f80:	bgt	190c0 <__assert_fail@plt+0x7cd0>
   18f84:	add	r9, r6, #1
   18f88:	add	r3, r7, #8
   18f8c:	cmp	r5, r3
   18f90:	lsl	r1, r9, #3
   18f94:	beq	190a0 <__assert_fail@plt+0x7cb0>
   18f98:	mov	r0, r5
   18f9c:	bl	19dd8 <__assert_fail@plt+0x89e8>
   18fa0:	mov	r5, r0
   18fa4:	str	r0, [r7]
   18fa8:	ldr	r0, [r7, #4]
   18fac:	mov	r1, #0
   18fb0:	sub	r2, r9, r0
   18fb4:	add	r0, r5, r0, lsl #3
   18fb8:	lsl	r2, r2, #3
   18fbc:	bl	112dc <memset@plt>
   18fc0:	str	r9, [r7, #4]
   18fc4:	add	r3, r5, r6, lsl #3
   18fc8:	ldr	r1, [r4, #4]
   18fcc:	ldr	r7, [r3, #4]
   18fd0:	ldr	r9, [r5, r6, lsl #3]
   18fd4:	ldr	r2, [r4, #40]	; 0x28
   18fd8:	ldr	ip, [r4, #44]	; 0x2c
   18fdc:	str	r3, [sp, #28]
   18fe0:	ldr	r3, [r4]
   18fe4:	orr	r1, r1, #1
   18fe8:	add	lr, r4, #8
   18fec:	str	r1, [sp, #36]	; 0x24
   18ff0:	str	r1, [sp, #4]
   18ff4:	str	r2, [sp, #12]
   18ff8:	str	r3, [sp]
   18ffc:	mov	r0, r7
   19000:	mov	r1, r9
   19004:	str	ip, [sp, #16]
   19008:	str	lr, [sp, #8]
   1900c:	mov	r3, fp
   19010:	mov	r2, sl
   19014:	str	lr, [sp, #32]
   19018:	bl	17720 <__assert_fail@plt+0x6330>
   1901c:	cmp	r9, r0
   19020:	bhi	1908c <__assert_fail@plt+0x7c9c>
   19024:	ldr	r3, [pc, #160]	; 190cc <__assert_fail@plt+0x7cdc>
   19028:	add	r9, r0, #1
   1902c:	cmp	r7, r3
   19030:	str	r9, [r5, r6, lsl #3]
   19034:	beq	19040 <__assert_fail@plt+0x7c50>
   19038:	mov	r0, r7
   1903c:	bl	110fc <free@plt>
   19040:	mov	r0, r9
   19044:	bl	19d7c <__assert_fail@plt+0x898c>
   19048:	ldr	lr, [sp, #28]
   1904c:	ldr	ip, [r4, #44]	; 0x2c
   19050:	ldr	r5, [r4, #40]	; 0x28
   19054:	mov	r3, fp
   19058:	mov	r2, sl
   1905c:	mov	r1, r9
   19060:	str	r0, [lr, #4]
   19064:	ldr	lr, [r4]
   19068:	ldr	r4, [sp, #32]
   1906c:	str	ip, [sp, #16]
   19070:	str	r4, [sp, #8]
   19074:	ldr	r4, [sp, #36]	; 0x24
   19078:	str	r5, [sp, #12]
   1907c:	str	r4, [sp, #4]
   19080:	str	lr, [sp]
   19084:	mov	r7, r0
   19088:	bl	17720 <__assert_fail@plt+0x6330>
   1908c:	ldr	r3, [sp, #24]
   19090:	mov	r0, r7
   19094:	str	r3, [r8]
   19098:	add	sp, sp, #44	; 0x2c
   1909c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190a0:	mov	r0, #0
   190a4:	bl	19dd8 <__assert_fail@plt+0x89e8>
   190a8:	ldr	r3, [pc, #32]	; 190d0 <__assert_fail@plt+0x7ce0>
   190ac:	mov	r5, r0
   190b0:	ldm	r3, {r0, r1}
   190b4:	str	r5, [r7]
   190b8:	stm	r5, {r0, r1}
   190bc:	b	18fa8 <__assert_fail@plt+0x7bb8>
   190c0:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   190c4:	bl	113cc <abort@plt>
   190c8:	andeq	lr, r2, ip, asr r1
   190cc:	andeq	lr, r2, r0, ror #3
   190d0:	andeq	lr, r2, r4, ror #2
   190d4:	push	{r4, r5, r6, lr}
   190d8:	mov	r5, r0
   190dc:	bl	112c4 <__errno_location@plt>
   190e0:	cmp	r5, #0
   190e4:	mov	r1, #48	; 0x30
   190e8:	mov	r4, r0
   190ec:	ldr	r0, [pc, #16]	; 19104 <__assert_fail@plt+0x7d14>
   190f0:	ldr	r6, [r4]
   190f4:	movne	r0, r5
   190f8:	bl	19f84 <__assert_fail@plt+0x8b94>
   190fc:	str	r6, [r4]
   19100:	pop	{r4, r5, r6, pc}
   19104:	andeq	lr, r2, r0, ror #5
   19108:	ldr	r3, [pc, #12]	; 1911c <__assert_fail@plt+0x7d2c>
   1910c:	cmp	r0, #0
   19110:	moveq	r0, r3
   19114:	ldr	r0, [r0]
   19118:	bx	lr
   1911c:	andeq	lr, r2, r0, ror #5
   19120:	ldr	r3, [pc, #12]	; 19134 <__assert_fail@plt+0x7d44>
   19124:	cmp	r0, #0
   19128:	moveq	r0, r3
   1912c:	str	r1, [r0]
   19130:	bx	lr
   19134:	andeq	lr, r2, r0, ror #5
   19138:	ldr	r3, [pc, #52]	; 19174 <__assert_fail@plt+0x7d84>
   1913c:	cmp	r0, #0
   19140:	moveq	r0, r3
   19144:	add	r3, r0, #8
   19148:	push	{lr}		; (str lr, [sp, #-4]!)
   1914c:	lsr	lr, r1, #5
   19150:	and	r1, r1, #31
   19154:	ldr	ip, [r3, lr, lsl #2]
   19158:	lsr	r0, ip, r1
   1915c:	eor	r2, r2, r0
   19160:	and	r2, r2, #1
   19164:	and	r0, r0, #1
   19168:	eor	r1, ip, r2, lsl r1
   1916c:	str	r1, [r3, lr, lsl #2]
   19170:	pop	{pc}		; (ldr pc, [sp], #4)
   19174:	andeq	lr, r2, r0, ror #5
   19178:	ldr	r3, [pc, #16]	; 19190 <__assert_fail@plt+0x7da0>
   1917c:	cmp	r0, #0
   19180:	movne	r3, r0
   19184:	ldr	r0, [r3, #4]
   19188:	str	r1, [r3, #4]
   1918c:	bx	lr
   19190:	andeq	lr, r2, r0, ror #5
   19194:	ldr	r3, [pc, #44]	; 191c8 <__assert_fail@plt+0x7dd8>
   19198:	cmp	r0, #0
   1919c:	moveq	r0, r3
   191a0:	mov	ip, #10
   191a4:	cmp	r2, #0
   191a8:	cmpne	r1, #0
   191ac:	str	ip, [r0]
   191b0:	beq	191c0 <__assert_fail@plt+0x7dd0>
   191b4:	str	r1, [r0, #40]	; 0x28
   191b8:	str	r2, [r0, #44]	; 0x2c
   191bc:	bx	lr
   191c0:	push	{r4, lr}
   191c4:	bl	113cc <abort@plt>
   191c8:	andeq	lr, r2, r0, ror #5
   191cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191d0:	sub	sp, sp, #24
   191d4:	ldr	ip, [pc, #108]	; 19248 <__assert_fail@plt+0x7e58>
   191d8:	ldr	r4, [sp, #56]	; 0x38
   191dc:	mov	r9, r2
   191e0:	cmp	r4, #0
   191e4:	moveq	r4, ip
   191e8:	mov	sl, r3
   191ec:	mov	r7, r0
   191f0:	mov	r8, r1
   191f4:	bl	112c4 <__errno_location@plt>
   191f8:	ldr	r3, [r4, #44]	; 0x2c
   191fc:	mov	r1, r8
   19200:	ldr	r6, [r0]
   19204:	str	r3, [sp, #16]
   19208:	ldr	r2, [r4, #40]	; 0x28
   1920c:	add	r3, r4, #8
   19210:	str	r3, [sp, #8]
   19214:	str	r2, [sp, #12]
   19218:	ldr	r2, [r4, #4]
   1921c:	mov	r5, r0
   19220:	str	r2, [sp, #4]
   19224:	ldr	ip, [r4]
   19228:	mov	r3, sl
   1922c:	mov	r2, r9
   19230:	mov	r0, r7
   19234:	str	ip, [sp]
   19238:	bl	17720 <__assert_fail@plt+0x6330>
   1923c:	str	r6, [r5]
   19240:	add	sp, sp, #24
   19244:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19248:	andeq	lr, r2, r0, ror #5
   1924c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19250:	cmp	r3, #0
   19254:	sub	sp, sp, #44	; 0x2c
   19258:	ldr	r4, [pc, #192]	; 19320 <__assert_fail@plt+0x7f30>
   1925c:	mov	r6, r2
   19260:	movne	r4, r3
   19264:	mov	r9, r1
   19268:	mov	r8, r0
   1926c:	bl	112c4 <__errno_location@plt>
   19270:	ldr	r3, [r4, #44]	; 0x2c
   19274:	ldr	r5, [r4, #4]
   19278:	add	sl, r4, #8
   1927c:	cmp	r6, #0
   19280:	orreq	r5, r5, #1
   19284:	mov	r1, #0
   19288:	ldr	r2, [r0]
   1928c:	str	r3, [sp, #16]
   19290:	ldr	r3, [r4, #40]	; 0x28
   19294:	stmib	sp, {r5, sl}
   19298:	str	r3, [sp, #12]
   1929c:	ldr	r3, [r4]
   192a0:	mov	r7, r0
   192a4:	str	r2, [sp, #28]
   192a8:	str	r3, [sp]
   192ac:	mov	r2, r8
   192b0:	mov	r3, r9
   192b4:	mov	r0, r1
   192b8:	bl	17720 <__assert_fail@plt+0x6330>
   192bc:	add	r1, r0, #1
   192c0:	mov	fp, r0
   192c4:	mov	r0, r1
   192c8:	str	r1, [sp, #36]	; 0x24
   192cc:	bl	19d7c <__assert_fail@plt+0x898c>
   192d0:	ldr	r3, [r4, #44]	; 0x2c
   192d4:	mov	r2, r8
   192d8:	str	r3, [sp, #16]
   192dc:	ldr	r3, [r4, #40]	; 0x28
   192e0:	str	r5, [sp, #4]
   192e4:	str	r3, [sp, #12]
   192e8:	str	sl, [sp, #8]
   192ec:	ldr	ip, [r4]
   192f0:	ldr	r1, [sp, #36]	; 0x24
   192f4:	mov	r3, r9
   192f8:	str	ip, [sp]
   192fc:	str	r0, [sp, #32]
   19300:	bl	17720 <__assert_fail@plt+0x6330>
   19304:	ldr	r2, [sp, #28]
   19308:	cmp	r6, #0
   1930c:	str	r2, [r7]
   19310:	ldr	r0, [sp, #32]
   19314:	strne	fp, [r6]
   19318:	add	sp, sp, #44	; 0x2c
   1931c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19320:	andeq	lr, r2, r0, ror #5
   19324:	mov	r3, r2
   19328:	mov	r2, #0
   1932c:	b	1924c <__assert_fail@plt+0x7e5c>
   19330:	push	{r4, r5, r6, r7, r8, lr}
   19334:	ldr	r6, [pc, #112]	; 193ac <__assert_fail@plt+0x7fbc>
   19338:	ldr	r3, [r6, #4]
   1933c:	ldr	r7, [r6]
   19340:	cmp	r3, #1
   19344:	ble	19368 <__assert_fail@plt+0x7f78>
   19348:	sub	r5, r7, #8
   1934c:	add	r5, r5, r3, lsl #3
   19350:	mov	r4, r7
   19354:	ldr	r0, [r4, #12]
   19358:	add	r4, r4, #8
   1935c:	bl	110fc <free@plt>
   19360:	cmp	r4, r5
   19364:	bne	19354 <__assert_fail@plt+0x7f64>
   19368:	ldr	r0, [r7, #4]
   1936c:	ldr	r4, [pc, #60]	; 193b0 <__assert_fail@plt+0x7fc0>
   19370:	cmp	r0, r4
   19374:	beq	19388 <__assert_fail@plt+0x7f98>
   19378:	bl	110fc <free@plt>
   1937c:	mov	r3, #256	; 0x100
   19380:	str	r4, [r6, #12]
   19384:	str	r3, [r6, #8]
   19388:	ldr	r4, [pc, #36]	; 193b4 <__assert_fail@plt+0x7fc4>
   1938c:	cmp	r7, r4
   19390:	beq	193a0 <__assert_fail@plt+0x7fb0>
   19394:	mov	r0, r7
   19398:	bl	110fc <free@plt>
   1939c:	str	r4, [r6]
   193a0:	mov	r3, #1
   193a4:	str	r3, [r6, #4]
   193a8:	pop	{r4, r5, r6, r7, r8, pc}
   193ac:	andeq	lr, r2, ip, asr r1
   193b0:	andeq	lr, r2, r0, ror #3
   193b4:	andeq	lr, r2, r4, ror #2
   193b8:	ldr	r3, [pc, #4]	; 193c4 <__assert_fail@plt+0x7fd4>
   193bc:	mvn	r2, #0
   193c0:	b	18f38 <__assert_fail@plt+0x7b48>
   193c4:	andeq	lr, r2, r0, ror #5
   193c8:	ldr	r3, [pc]	; 193d0 <__assert_fail@plt+0x7fe0>
   193cc:	b	18f38 <__assert_fail@plt+0x7b48>
   193d0:	andeq	lr, r2, r0, ror #5
   193d4:	mov	r1, r0
   193d8:	ldr	r3, [pc, #8]	; 193e8 <__assert_fail@plt+0x7ff8>
   193dc:	mvn	r2, #0
   193e0:	mov	r0, #0
   193e4:	b	18f38 <__assert_fail@plt+0x7b48>
   193e8:	andeq	lr, r2, r0, ror #5
   193ec:	mov	r2, r1
   193f0:	ldr	r3, [pc, #8]	; 19400 <__assert_fail@plt+0x8010>
   193f4:	mov	r1, r0
   193f8:	mov	r0, #0
   193fc:	b	18f38 <__assert_fail@plt+0x7b48>
   19400:	andeq	lr, r2, r0, ror #5
   19404:	push	{r4, r5, r6, lr}
   19408:	sub	sp, sp, #56	; 0x38
   1940c:	ldr	r4, [pc, #68]	; 19458 <__assert_fail@plt+0x8068>
   19410:	mov	r6, r2
   19414:	mov	r5, r0
   19418:	ldr	r3, [r4]
   1941c:	add	r0, sp, #4
   19420:	str	r3, [sp, #52]	; 0x34
   19424:	bl	175b0 <__assert_fail@plt+0x61c0>
   19428:	add	r3, sp, #4
   1942c:	mvn	r2, #0
   19430:	mov	r1, r6
   19434:	mov	r0, r5
   19438:	bl	18f38 <__assert_fail@plt+0x7b48>
   1943c:	ldr	r2, [sp, #52]	; 0x34
   19440:	ldr	r3, [r4]
   19444:	cmp	r2, r3
   19448:	bne	19454 <__assert_fail@plt+0x8064>
   1944c:	add	sp, sp, #56	; 0x38
   19450:	pop	{r4, r5, r6, pc}
   19454:	bl	11174 <__stack_chk_fail@plt>
   19458:	andeq	sp, r2, r8, lsl #30
   1945c:	push	{r4, r5, r6, r7, lr}
   19460:	sub	sp, sp, #60	; 0x3c
   19464:	ldr	r4, [pc, #72]	; 194b4 <__assert_fail@plt+0x80c4>
   19468:	mov	r6, r2
   1946c:	mov	r7, r3
   19470:	ldr	ip, [r4]
   19474:	mov	r5, r0
   19478:	add	r0, sp, #4
   1947c:	str	ip, [sp, #52]	; 0x34
   19480:	bl	175b0 <__assert_fail@plt+0x61c0>
   19484:	add	r3, sp, #4
   19488:	mov	r2, r7
   1948c:	mov	r1, r6
   19490:	mov	r0, r5
   19494:	bl	18f38 <__assert_fail@plt+0x7b48>
   19498:	ldr	r2, [sp, #52]	; 0x34
   1949c:	ldr	r3, [r4]
   194a0:	cmp	r2, r3
   194a4:	bne	194b0 <__assert_fail@plt+0x80c0>
   194a8:	add	sp, sp, #60	; 0x3c
   194ac:	pop	{r4, r5, r6, r7, pc}
   194b0:	bl	11174 <__stack_chk_fail@plt>
   194b4:	andeq	sp, r2, r8, lsl #30
   194b8:	mov	r2, r1
   194bc:	mov	r1, r0
   194c0:	mov	r0, #0
   194c4:	b	19404 <__assert_fail@plt+0x8014>
   194c8:	mov	r3, r2
   194cc:	mov	r2, r1
   194d0:	mov	r1, r0
   194d4:	mov	r0, #0
   194d8:	b	1945c <__assert_fail@plt+0x806c>
   194dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   194e0:	mov	r4, r2
   194e4:	ldr	lr, [pc, #128]	; 1956c <__assert_fail@plt+0x817c>
   194e8:	mov	r8, r0
   194ec:	mov	r9, r1
   194f0:	ldm	lr!, {r0, r1, r2, r3}
   194f4:	sub	sp, sp, #60	; 0x3c
   194f8:	add	ip, sp, #4
   194fc:	lsr	r6, r4, #5
   19500:	stmia	ip!, {r0, r1, r2, r3}
   19504:	add	r7, sp, #12
   19508:	ldm	lr!, {r0, r1, r2, r3}
   1950c:	and	r4, r4, #31
   19510:	ldr	r5, [pc, #88]	; 19570 <__assert_fail@plt+0x8180>
   19514:	stmia	ip!, {r0, r1, r2, r3}
   19518:	ldm	lr, {r0, r1, r2, r3}
   1951c:	stm	ip, {r0, r1, r2, r3}
   19520:	mov	r2, r9
   19524:	ldr	r3, [r7, r6, lsl #2]
   19528:	ldr	ip, [r5]
   1952c:	mov	r1, r8
   19530:	mvn	r0, r3, lsr r4
   19534:	and	r0, r0, #1
   19538:	str	ip, [sp, #52]	; 0x34
   1953c:	eor	r4, r3, r0, lsl r4
   19540:	add	r3, sp, #4
   19544:	mov	r0, #0
   19548:	str	r4, [r7, r6, lsl #2]
   1954c:	bl	18f38 <__assert_fail@plt+0x7b48>
   19550:	ldr	r2, [sp, #52]	; 0x34
   19554:	ldr	r3, [r5]
   19558:	cmp	r2, r3
   1955c:	bne	19568 <__assert_fail@plt+0x8178>
   19560:	add	sp, sp, #60	; 0x3c
   19564:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19568:	bl	11174 <__stack_chk_fail@plt>
   1956c:	andeq	lr, r2, r0, ror #5
   19570:	andeq	sp, r2, r8, lsl #30
   19574:	mov	r2, r1
   19578:	mvn	r1, #0
   1957c:	b	194dc <__assert_fail@plt+0x80ec>
   19580:	mov	r2, #58	; 0x3a
   19584:	mvn	r1, #0
   19588:	b	194dc <__assert_fail@plt+0x80ec>
   1958c:	mov	r2, #58	; 0x3a
   19590:	b	194dc <__assert_fail@plt+0x80ec>
   19594:	push	{r4, r5, r6, r7, r8, lr}
   19598:	sub	sp, sp, #104	; 0x68
   1959c:	ldr	r5, [pc, #120]	; 1961c <__assert_fail@plt+0x822c>
   195a0:	mov	r6, r0
   195a4:	mov	r0, sp
   195a8:	ldr	r3, [r5]
   195ac:	mov	r7, r2
   195b0:	str	r3, [sp, #100]	; 0x64
   195b4:	bl	175b0 <__assert_fail@plt+0x61c0>
   195b8:	mov	ip, sp
   195bc:	add	lr, sp, #52	; 0x34
   195c0:	ldm	ip!, {r0, r1, r2, r3}
   195c4:	stmia	lr!, {r0, r1, r2, r3}
   195c8:	ldm	ip!, {r0, r1, r2, r3}
   195cc:	ldr	r8, [sp, #64]	; 0x40
   195d0:	stmia	lr!, {r0, r1, r2, r3}
   195d4:	mvn	r4, r8
   195d8:	ldm	ip, {r0, r1, r2, r3}
   195dc:	and	ip, r4, #67108864	; 0x4000000
   195e0:	eor	ip, ip, r8
   195e4:	str	ip, [sp, #64]	; 0x40
   195e8:	stm	lr, {r0, r1, r2, r3}
   195ec:	add	r3, sp, #52	; 0x34
   195f0:	mvn	r2, #0
   195f4:	mov	r1, r7
   195f8:	mov	r0, r6
   195fc:	bl	18f38 <__assert_fail@plt+0x7b48>
   19600:	ldr	r2, [sp, #100]	; 0x64
   19604:	ldr	r3, [r5]
   19608:	cmp	r2, r3
   1960c:	bne	19618 <__assert_fail@plt+0x8228>
   19610:	add	sp, sp, #104	; 0x68
   19614:	pop	{r4, r5, r6, r7, r8, pc}
   19618:	bl	11174 <__stack_chk_fail@plt>
   1961c:	andeq	sp, r2, r8, lsl #30
   19620:	push	{r4, r5, r6, r7, r8, r9, lr}
   19624:	mov	r6, r1
   19628:	ldr	lr, [pc, #132]	; 196b4 <__assert_fail@plt+0x82c4>
   1962c:	mov	r5, r2
   19630:	mov	r8, r0
   19634:	mov	r9, r3
   19638:	ldm	lr!, {r0, r1, r2, r3}
   1963c:	sub	sp, sp, #60	; 0x3c
   19640:	add	ip, sp, #4
   19644:	ldr	r4, [pc, #108]	; 196b8 <__assert_fail@plt+0x82c8>
   19648:	stmia	ip!, {r0, r1, r2, r3}
   1964c:	mov	r7, #10
   19650:	ldm	lr!, {r0, r1, r2, r3}
   19654:	cmp	r5, #0
   19658:	cmpne	r6, #0
   1965c:	str	r7, [sp, #4]
   19660:	stmia	ip!, {r0, r1, r2, r3}
   19664:	ldm	lr, {r0, r1, r2, r3}
   19668:	ldr	lr, [r4]
   1966c:	stm	ip, {r0, r1, r2, r3}
   19670:	str	lr, [sp, #52]	; 0x34
   19674:	beq	196b0 <__assert_fail@plt+0x82c0>
   19678:	add	r3, sp, #4
   1967c:	ldr	r2, [sp, #88]	; 0x58
   19680:	mov	r1, r9
   19684:	mov	r0, r8
   19688:	str	r6, [sp, #44]	; 0x2c
   1968c:	str	r5, [sp, #48]	; 0x30
   19690:	bl	18f38 <__assert_fail@plt+0x7b48>
   19694:	ldr	r2, [sp, #52]	; 0x34
   19698:	ldr	r3, [r4]
   1969c:	cmp	r2, r3
   196a0:	bne	196ac <__assert_fail@plt+0x82bc>
   196a4:	add	sp, sp, #60	; 0x3c
   196a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   196ac:	bl	11174 <__stack_chk_fail@plt>
   196b0:	bl	113cc <abort@plt>
   196b4:	andeq	lr, r2, r0, ror #5
   196b8:	andeq	sp, r2, r8, lsl #30
   196bc:	push	{lr}		; (str lr, [sp, #-4]!)
   196c0:	sub	sp, sp, #12
   196c4:	mvn	ip, #0
   196c8:	str	ip, [sp]
   196cc:	bl	19620 <__assert_fail@plt+0x8230>
   196d0:	add	sp, sp, #12
   196d4:	pop	{pc}		; (ldr pc, [sp], #4)
   196d8:	push	{lr}		; (str lr, [sp, #-4]!)
   196dc:	sub	sp, sp, #12
   196e0:	mvn	ip, #0
   196e4:	mov	r3, r2
   196e8:	str	ip, [sp]
   196ec:	mov	r2, r1
   196f0:	mov	r1, r0
   196f4:	mov	r0, #0
   196f8:	bl	19620 <__assert_fail@plt+0x8230>
   196fc:	add	sp, sp, #12
   19700:	pop	{pc}		; (ldr pc, [sp], #4)
   19704:	push	{lr}		; (str lr, [sp, #-4]!)
   19708:	sub	sp, sp, #12
   1970c:	str	r3, [sp]
   19710:	mov	r3, r2
   19714:	mov	r2, r1
   19718:	mov	r1, r0
   1971c:	mov	r0, #0
   19720:	bl	19620 <__assert_fail@plt+0x8230>
   19724:	add	sp, sp, #12
   19728:	pop	{pc}		; (ldr pc, [sp], #4)
   1972c:	ldr	r3, [pc]	; 19734 <__assert_fail@plt+0x8344>
   19730:	b	18f38 <__assert_fail@plt+0x7b48>
   19734:	andeq	lr, r2, ip, ror #2
   19738:	mov	r2, r1
   1973c:	ldr	r3, [pc, #8]	; 1974c <__assert_fail@plt+0x835c>
   19740:	mov	r1, r0
   19744:	mov	r0, #0
   19748:	b	18f38 <__assert_fail@plt+0x7b48>
   1974c:	andeq	lr, r2, ip, ror #2
   19750:	ldr	r3, [pc, #4]	; 1975c <__assert_fail@plt+0x836c>
   19754:	mvn	r2, #0
   19758:	b	18f38 <__assert_fail@plt+0x7b48>
   1975c:	andeq	lr, r2, ip, ror #2
   19760:	mov	r1, r0
   19764:	ldr	r3, [pc, #8]	; 19774 <__assert_fail@plt+0x8384>
   19768:	mvn	r2, #0
   1976c:	mov	r0, #0
   19770:	b	18f38 <__assert_fail@plt+0x7b48>
   19774:	andeq	lr, r2, ip, ror #2
   19778:	push	{r4, r5, r6, r7, r8, lr}
   1977c:	mov	r8, r0
   19780:	ldr	r5, [pc, #84]	; 197dc <__assert_fail@plt+0x83ec>
   19784:	mov	r7, r1
   19788:	mov	r4, r2
   1978c:	mov	r2, r4
   19790:	mov	r1, r7
   19794:	mov	r0, r8
   19798:	bl	110e4 <read@plt>
   1979c:	subs	r6, r0, #0
   197a0:	bge	197d4 <__assert_fail@plt+0x83e4>
   197a4:	bl	112c4 <__errno_location@plt>
   197a8:	ldr	r3, [r0]
   197ac:	cmp	r3, #4
   197b0:	beq	1978c <__assert_fail@plt+0x839c>
   197b4:	cmp	r4, r5
   197b8:	movls	r2, #0
   197bc:	movhi	r2, #1
   197c0:	cmp	r3, #22
   197c4:	movne	r2, #0
   197c8:	cmp	r2, #0
   197cc:	mov	r4, r5
   197d0:	bne	1978c <__assert_fail@plt+0x839c>
   197d4:	mov	r0, r6
   197d8:	pop	{r4, r5, r6, r7, r8, pc}
   197dc:	svcvc	0x00f00000	; IMB
   197e0:	cmp	r0, #2
   197e4:	push	{r4, r5, r6, r7, r8, lr}
   197e8:	mov	r4, r0
   197ec:	bls	197f8 <__assert_fail@plt+0x8408>
   197f0:	mov	r0, r4
   197f4:	pop	{r4, r5, r6, r7, r8, pc}
   197f8:	bl	1b034 <__assert_fail@plt+0x9c44>
   197fc:	mov	r7, r0
   19800:	bl	112c4 <__errno_location@plt>
   19804:	mov	r5, r0
   19808:	mov	r0, r4
   1980c:	ldr	r6, [r5]
   19810:	mov	r4, r7
   19814:	bl	113d8 <close@plt>
   19818:	str	r6, [r5]
   1981c:	mov	r0, r4
   19820:	pop	{r4, r5, r6, r7, r8, pc}
   19824:	push	{r4, r5, r6, lr}
   19828:	sub	sp, sp, #32
   1982c:	cmp	r1, #0
   19830:	mov	r5, r0
   19834:	ldr	r4, [sp, #48]	; 0x30
   19838:	ldr	r6, [sp, #52]	; 0x34
   1983c:	beq	198cc <__assert_fail@plt+0x84dc>
   19840:	strd	r2, [sp]
   19844:	mov	r3, r1
   19848:	ldr	r2, [pc, #828]	; 19b8c <__assert_fail@plt+0x879c>
   1984c:	mov	r1, #1
   19850:	bl	11300 <__fprintf_chk@plt>
   19854:	mov	r2, #5
   19858:	ldr	r1, [pc, #816]	; 19b90 <__assert_fail@plt+0x87a0>
   1985c:	mov	r0, #0
   19860:	bl	11168 <dcgettext@plt>
   19864:	ldr	r3, [pc, #808]	; 19b94 <__assert_fail@plt+0x87a4>
   19868:	ldr	r2, [pc, #808]	; 19b98 <__assert_fail@plt+0x87a8>
   1986c:	str	r3, [sp]
   19870:	mov	r1, #1
   19874:	mov	r3, r0
   19878:	mov	r0, r5
   1987c:	bl	11300 <__fprintf_chk@plt>
   19880:	ldr	r1, [pc, #788]	; 19b9c <__assert_fail@plt+0x87ac>
   19884:	mov	r2, #5
   19888:	mov	r0, #0
   1988c:	bl	11168 <dcgettext@plt>
   19890:	mov	r1, r5
   19894:	bl	110b4 <fputs_unlocked@plt>
   19898:	cmp	r6, #9
   1989c:	ldrls	pc, [pc, r6, lsl #2]
   198a0:	b	19b7c <__assert_fail@plt+0x878c>
   198a4:	andeq	r9, r1, r8, lsl #23
   198a8:	andeq	r9, r1, r0, asr r9
   198ac:	andeq	r9, r1, ip, ror r9
   198b0:			; <UNDEFINED> instruction: 0x000199b0
   198b4:	andeq	r9, r1, ip, ror #19
   198b8:	andeq	r9, r1, ip, lsr #20
   198bc:	andeq	r9, r1, r4, ror sl
   198c0:	andeq	r9, r1, r4, asr #21
   198c4:	andeq	r9, r1, ip, lsl fp
   198c8:	andeq	r9, r1, r4, ror #17
   198cc:	str	r3, [sp]
   198d0:	mov	r1, #1
   198d4:	mov	r3, r2
   198d8:	ldr	r2, [pc, #704]	; 19ba0 <__assert_fail@plt+0x87b0>
   198dc:	bl	11300 <__fprintf_chk@plt>
   198e0:	b	19854 <__assert_fail@plt+0x8464>
   198e4:	ldr	r1, [pc, #696]	; 19ba4 <__assert_fail@plt+0x87b4>
   198e8:	mov	r2, #5
   198ec:	mov	r0, #0
   198f0:	bl	11168 <dcgettext@plt>
   198f4:	ldr	r2, [r4, #32]
   198f8:	ldr	r3, [r4, #28]
   198fc:	ldr	r1, [r4, #24]
   19900:	str	r2, [sp, #28]
   19904:	ldr	r2, [r4, #20]
   19908:	str	r3, [sp, #24]
   1990c:	ldr	r3, [r4, #16]
   19910:	str	r1, [sp, #20]
   19914:	ldr	r1, [r4, #12]
   19918:	str	r2, [sp, #16]
   1991c:	ldr	r2, [r4, #8]
   19920:	str	r3, [sp, #12]
   19924:	ldr	r3, [r4, #4]
   19928:	str	r1, [sp, #8]
   1992c:	str	r2, [sp, #4]
   19930:	str	r3, [sp]
   19934:	mov	r1, #1
   19938:	ldr	r3, [r4]
   1993c:	mov	r2, r0
   19940:	mov	r0, r5
   19944:	bl	11300 <__fprintf_chk@plt>
   19948:	add	sp, sp, #32
   1994c:	pop	{r4, r5, r6, pc}
   19950:	mov	r2, #5
   19954:	ldr	r1, [pc, #588]	; 19ba8 <__assert_fail@plt+0x87b8>
   19958:	mov	r0, #0
   1995c:	bl	11168 <dcgettext@plt>
   19960:	ldr	r3, [r4]
   19964:	mov	r1, #1
   19968:	mov	r2, r0
   1996c:	mov	r0, r5
   19970:	add	sp, sp, #32
   19974:	pop	{r4, r5, r6, lr}
   19978:	b	11300 <__fprintf_chk@plt>
   1997c:	mov	r2, #5
   19980:	ldr	r1, [pc, #548]	; 19bac <__assert_fail@plt+0x87bc>
   19984:	mov	r0, #0
   19988:	bl	11168 <dcgettext@plt>
   1998c:	ldr	r2, [r4, #4]
   19990:	ldr	r3, [r4]
   19994:	mov	r1, #1
   19998:	str	r2, [sp, #48]	; 0x30
   1999c:	mov	r2, r0
   199a0:	mov	r0, r5
   199a4:	add	sp, sp, #32
   199a8:	pop	{r4, r5, r6, lr}
   199ac:	b	11300 <__fprintf_chk@plt>
   199b0:	mov	r2, #5
   199b4:	ldr	r1, [pc, #500]	; 19bb0 <__assert_fail@plt+0x87c0>
   199b8:	mov	r0, #0
   199bc:	bl	11168 <dcgettext@plt>
   199c0:	ldr	r2, [r4, #8]
   199c4:	ldr	r3, [r4, #4]
   199c8:	mov	r1, #1
   199cc:	str	r2, [sp, #52]	; 0x34
   199d0:	str	r3, [sp, #48]	; 0x30
   199d4:	ldr	r3, [r4]
   199d8:	mov	r2, r0
   199dc:	mov	r0, r5
   199e0:	add	sp, sp, #32
   199e4:	pop	{r4, r5, r6, lr}
   199e8:	b	11300 <__fprintf_chk@plt>
   199ec:	mov	r2, #5
   199f0:	ldr	r1, [pc, #444]	; 19bb4 <__assert_fail@plt+0x87c4>
   199f4:	mov	r0, #0
   199f8:	bl	11168 <dcgettext@plt>
   199fc:	ldr	r1, [r4, #12]
   19a00:	ldr	r2, [r4, #8]
   19a04:	ldr	r3, [r4, #4]
   19a08:	str	r1, [sp, #8]
   19a0c:	str	r2, [sp, #4]
   19a10:	str	r3, [sp]
   19a14:	mov	r1, #1
   19a18:	ldr	r3, [r4]
   19a1c:	mov	r2, r0
   19a20:	mov	r0, r5
   19a24:	bl	11300 <__fprintf_chk@plt>
   19a28:	b	19948 <__assert_fail@plt+0x8558>
   19a2c:	mov	r2, #5
   19a30:	ldr	r1, [pc, #384]	; 19bb8 <__assert_fail@plt+0x87c8>
   19a34:	mov	r0, #0
   19a38:	bl	11168 <dcgettext@plt>
   19a3c:	ldr	r3, [r4, #16]
   19a40:	ldr	r1, [r4, #12]
   19a44:	ldr	r2, [r4, #8]
   19a48:	str	r3, [sp, #12]
   19a4c:	ldr	r3, [r4, #4]
   19a50:	str	r1, [sp, #8]
   19a54:	str	r2, [sp, #4]
   19a58:	str	r3, [sp]
   19a5c:	mov	r1, #1
   19a60:	ldr	r3, [r4]
   19a64:	mov	r2, r0
   19a68:	mov	r0, r5
   19a6c:	bl	11300 <__fprintf_chk@plt>
   19a70:	b	19948 <__assert_fail@plt+0x8558>
   19a74:	mov	r2, #5
   19a78:	ldr	r1, [pc, #316]	; 19bbc <__assert_fail@plt+0x87cc>
   19a7c:	mov	r0, #0
   19a80:	bl	11168 <dcgettext@plt>
   19a84:	ldr	r2, [r4, #20]
   19a88:	ldr	r3, [r4, #16]
   19a8c:	ldr	r1, [r4, #12]
   19a90:	str	r2, [sp, #16]
   19a94:	ldr	r2, [r4, #8]
   19a98:	str	r3, [sp, #12]
   19a9c:	ldr	r3, [r4, #4]
   19aa0:	str	r1, [sp, #8]
   19aa4:	str	r2, [sp, #4]
   19aa8:	str	r3, [sp]
   19aac:	mov	r1, #1
   19ab0:	ldr	r3, [r4]
   19ab4:	mov	r2, r0
   19ab8:	mov	r0, r5
   19abc:	bl	11300 <__fprintf_chk@plt>
   19ac0:	b	19948 <__assert_fail@plt+0x8558>
   19ac4:	mov	r2, #5
   19ac8:	ldr	r1, [pc, #240]	; 19bc0 <__assert_fail@plt+0x87d0>
   19acc:	mov	r0, #0
   19ad0:	bl	11168 <dcgettext@plt>
   19ad4:	ldr	r1, [r4, #24]
   19ad8:	ldr	r2, [r4, #20]
   19adc:	ldr	r3, [r4, #16]
   19ae0:	str	r1, [sp, #20]
   19ae4:	ldr	r1, [r4, #12]
   19ae8:	str	r2, [sp, #16]
   19aec:	ldr	r2, [r4, #8]
   19af0:	str	r3, [sp, #12]
   19af4:	ldr	r3, [r4, #4]
   19af8:	str	r1, [sp, #8]
   19afc:	str	r2, [sp, #4]
   19b00:	str	r3, [sp]
   19b04:	mov	r1, #1
   19b08:	ldr	r3, [r4]
   19b0c:	mov	r2, r0
   19b10:	mov	r0, r5
   19b14:	bl	11300 <__fprintf_chk@plt>
   19b18:	b	19948 <__assert_fail@plt+0x8558>
   19b1c:	mov	r2, #5
   19b20:	ldr	r1, [pc, #156]	; 19bc4 <__assert_fail@plt+0x87d4>
   19b24:	mov	r0, #0
   19b28:	bl	11168 <dcgettext@plt>
   19b2c:	ldr	r3, [r4, #28]
   19b30:	ldr	r1, [r4, #24]
   19b34:	ldr	r2, [r4, #20]
   19b38:	str	r3, [sp, #24]
   19b3c:	ldr	r3, [r4, #16]
   19b40:	str	r1, [sp, #20]
   19b44:	ldr	r1, [r4, #12]
   19b48:	str	r2, [sp, #16]
   19b4c:	ldr	r2, [r4, #8]
   19b50:	str	r3, [sp, #12]
   19b54:	ldr	r3, [r4, #4]
   19b58:	str	r1, [sp, #8]
   19b5c:	str	r2, [sp, #4]
   19b60:	str	r3, [sp]
   19b64:	mov	r1, #1
   19b68:	ldr	r3, [r4]
   19b6c:	mov	r2, r0
   19b70:	mov	r0, r5
   19b74:	bl	11300 <__fprintf_chk@plt>
   19b78:	b	19948 <__assert_fail@plt+0x8558>
   19b7c:	mov	r2, #5
   19b80:	ldr	r1, [pc, #64]	; 19bc8 <__assert_fail@plt+0x87d8>
   19b84:	b	198ec <__assert_fail@plt+0x84fc>
   19b88:	bl	113cc <abort@plt>
   19b8c:	andeq	ip, r1, r8, asr sp
   19b90:	andeq	ip, r1, ip, ror #26
   19b94:	andeq	r0, r0, r2, ror #15
   19b98:	andeq	sp, r1, r0, asr #32
   19b9c:	andeq	ip, r1, r0, ror sp
   19ba0:	andeq	ip, r1, r4, ror #26
   19ba4:	andeq	ip, r1, r8, asr #30
   19ba8:	andeq	ip, r1, ip, lsr lr
   19bac:	andeq	ip, r1, ip, asr #28
   19bb0:	andeq	ip, r1, r4, ror #28
   19bb4:	andeq	ip, r1, r0, lsl #29
   19bb8:	andeq	ip, r1, r0, lsr #29
   19bbc:	andeq	ip, r1, r4, asr #29
   19bc0:	andeq	ip, r1, ip, ror #29
   19bc4:	andeq	ip, r1, r8, lsl pc
   19bc8:	andeq	ip, r1, ip, ror pc
   19bcc:	push	{r4, r5, lr}
   19bd0:	sub	sp, sp, #12
   19bd4:	ldr	r5, [sp, #24]
   19bd8:	ldr	ip, [r5]
   19bdc:	cmp	ip, #0
   19be0:	beq	19bfc <__assert_fail@plt+0x880c>
   19be4:	mov	lr, r5
   19be8:	mov	ip, #0
   19bec:	ldr	r4, [lr, #4]!
   19bf0:	add	ip, ip, #1
   19bf4:	cmp	r4, #0
   19bf8:	bne	19bec <__assert_fail@plt+0x87fc>
   19bfc:	stm	sp, {r5, ip}
   19c00:	bl	19824 <__assert_fail@plt+0x8434>
   19c04:	add	sp, sp, #12
   19c08:	pop	{r4, r5, pc}
   19c0c:	push	{r4, r5, r6, lr}
   19c10:	sub	sp, sp, #56	; 0x38
   19c14:	ldr	r6, [pc, #88]	; 19c74 <__assert_fail@plt+0x8884>
   19c18:	ldr	r5, [sp, #72]	; 0x48
   19c1c:	add	r4, sp, #8
   19c20:	ldr	ip, [r6]
   19c24:	str	ip, [sp, #52]	; 0x34
   19c28:	mov	ip, #0
   19c2c:	ldr	lr, [r5], #4
   19c30:	cmp	lr, #0
   19c34:	str	lr, [r4, #4]!
   19c38:	beq	19c48 <__assert_fail@plt+0x8858>
   19c3c:	add	ip, ip, #1
   19c40:	cmp	ip, #10
   19c44:	bne	19c2c <__assert_fail@plt+0x883c>
   19c48:	add	lr, sp, #12
   19c4c:	str	ip, [sp, #4]
   19c50:	str	lr, [sp]
   19c54:	bl	19824 <__assert_fail@plt+0x8434>
   19c58:	ldr	r2, [sp, #52]	; 0x34
   19c5c:	ldr	r3, [r6]
   19c60:	cmp	r2, r3
   19c64:	bne	19c70 <__assert_fail@plt+0x8880>
   19c68:	add	sp, sp, #56	; 0x38
   19c6c:	pop	{r4, r5, r6, pc}
   19c70:	bl	11174 <__stack_chk_fail@plt>
   19c74:	andeq	sp, r2, r8, lsl #30
   19c78:	push	{r3}		; (str r3, [sp, #-4]!)
   19c7c:	mov	ip, #0
   19c80:	push	{r4, r5, r6, lr}
   19c84:	sub	sp, sp, #60	; 0x3c
   19c88:	ldr	r6, [pc, #100]	; 19cf4 <__assert_fail@plt+0x8904>
   19c8c:	add	r5, sp, #8
   19c90:	add	r4, sp, #80	; 0x50
   19c94:	ldr	r3, [r6]
   19c98:	str	r4, [sp, #8]
   19c9c:	str	r3, [sp, #52]	; 0x34
   19ca0:	ldr	r3, [sp, #76]	; 0x4c
   19ca4:	ldr	lr, [r4], #4
   19ca8:	cmp	lr, #0
   19cac:	str	lr, [r5, #4]!
   19cb0:	beq	19cc0 <__assert_fail@plt+0x88d0>
   19cb4:	add	ip, ip, #1
   19cb8:	cmp	ip, #10
   19cbc:	bne	19ca4 <__assert_fail@plt+0x88b4>
   19cc0:	add	lr, sp, #12
   19cc4:	str	ip, [sp, #4]
   19cc8:	str	lr, [sp]
   19ccc:	bl	19824 <__assert_fail@plt+0x8434>
   19cd0:	ldr	r2, [sp, #52]	; 0x34
   19cd4:	ldr	r3, [r6]
   19cd8:	cmp	r2, r3
   19cdc:	bne	19cf0 <__assert_fail@plt+0x8900>
   19ce0:	add	sp, sp, #60	; 0x3c
   19ce4:	pop	{r4, r5, r6, lr}
   19ce8:	add	sp, sp, #4
   19cec:	bx	lr
   19cf0:	bl	11174 <__stack_chk_fail@plt>
   19cf4:	andeq	sp, r2, r8, lsl #30
   19cf8:	push	{r4, lr}
   19cfc:	mov	r2, #5
   19d00:	ldr	r1, [pc, #88]	; 19d60 <__assert_fail@plt+0x8970>
   19d04:	mov	r0, #0
   19d08:	bl	11168 <dcgettext@plt>
   19d0c:	ldr	r2, [pc, #80]	; 19d64 <__assert_fail@plt+0x8974>
   19d10:	mov	r1, r0
   19d14:	mov	r0, #1
   19d18:	bl	112e8 <__printf_chk@plt>
   19d1c:	mov	r2, #5
   19d20:	ldr	r1, [pc, #64]	; 19d68 <__assert_fail@plt+0x8978>
   19d24:	mov	r0, #0
   19d28:	bl	11168 <dcgettext@plt>
   19d2c:	ldr	r3, [pc, #56]	; 19d6c <__assert_fail@plt+0x897c>
   19d30:	ldr	r2, [pc, #56]	; 19d70 <__assert_fail@plt+0x8980>
   19d34:	mov	r1, r0
   19d38:	mov	r0, #1
   19d3c:	bl	112e8 <__printf_chk@plt>
   19d40:	ldr	r1, [pc, #44]	; 19d74 <__assert_fail@plt+0x8984>
   19d44:	mov	r2, #5
   19d48:	mov	r0, #0
   19d4c:	bl	11168 <dcgettext@plt>
   19d50:	ldr	r3, [pc, #32]	; 19d78 <__assert_fail@plt+0x8988>
   19d54:	pop	{r4, lr}
   19d58:	ldr	r1, [r3]
   19d5c:	b	110b4 <fputs_unlocked@plt>
   19d60:			; <UNDEFINED> instruction: 0x0001cfb8
   19d64:	ldrdeq	ip, [r1], -r0
   19d68:	andeq	ip, r1, r8, ror #31
   19d6c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19d70:	andeq	ip, r1, r4, lsl #10
   19d74:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19d78:			; <UNDEFINED> instruction: 0x0002e1b4
   19d7c:	push	{r4, lr}
   19d80:	mov	r4, r0
   19d84:	bl	11228 <malloc@plt>
   19d88:	adds	r4, r4, #0
   19d8c:	movne	r4, #1
   19d90:	cmp	r0, #0
   19d94:	movne	r4, #0
   19d98:	cmp	r4, #0
   19d9c:	popeq	{r4, pc}
   19da0:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19da4:	push	{r4, r5, r6, lr}
   19da8:	umull	r4, r5, r0, r1
   19dac:	adds	r3, r5, #0
   19db0:	movne	r3, #1
   19db4:	cmp	r4, #0
   19db8:	blt	19dd0 <__assert_fail@plt+0x89e0>
   19dbc:	cmp	r3, #0
   19dc0:	bne	19dd0 <__assert_fail@plt+0x89e0>
   19dc4:	mul	r0, r1, r0
   19dc8:	pop	{r4, r5, r6, lr}
   19dcc:	b	19d7c <__assert_fail@plt+0x898c>
   19dd0:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19dd4:	b	19d7c <__assert_fail@plt+0x898c>
   19dd8:	adds	r3, r0, #0
   19ddc:	movne	r3, #1
   19de0:	cmp	r1, #0
   19de4:	movne	r3, #0
   19de8:	cmp	r3, #0
   19dec:	push	{r4, lr}
   19df0:	bne	19e18 <__assert_fail@plt+0x8a28>
   19df4:	mov	r4, r1
   19df8:	bl	11180 <realloc@plt>
   19dfc:	adds	r4, r4, #0
   19e00:	movne	r4, #1
   19e04:	cmp	r0, #0
   19e08:	movne	r4, #0
   19e0c:	cmp	r4, #0
   19e10:	popeq	{r4, pc}
   19e14:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19e18:	bl	110fc <free@plt>
   19e1c:	mov	r0, #0
   19e20:	pop	{r4, pc}
   19e24:	push	{r4, r5, r6, lr}
   19e28:	umull	r4, r5, r1, r2
   19e2c:	adds	r3, r5, #0
   19e30:	movne	r3, #1
   19e34:	cmp	r4, #0
   19e38:	blt	19e50 <__assert_fail@plt+0x8a60>
   19e3c:	cmp	r3, #0
   19e40:	bne	19e50 <__assert_fail@plt+0x8a60>
   19e44:	mul	r1, r2, r1
   19e48:	pop	{r4, r5, r6, lr}
   19e4c:	b	19dd8 <__assert_fail@plt+0x89e8>
   19e50:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19e54:	push	{r4, r5, r6, r7, r8, lr}
   19e58:	subs	r7, r0, #0
   19e5c:	mov	r6, r1
   19e60:	mov	r5, r2
   19e64:	ldr	r4, [r1]
   19e68:	beq	19e9c <__assert_fail@plt+0x8aac>
   19e6c:	mov	r1, r2
   19e70:	ldr	r0, [pc, #104]	; 19ee0 <__assert_fail@plt+0x8af0>
   19e74:	bl	1b1e0 <__assert_fail@plt+0x9df0>
   19e78:	cmp	r0, r4
   19e7c:	bls	19ec0 <__assert_fail@plt+0x8ad0>
   19e80:	add	r3, r4, #1
   19e84:	add	r4, r3, r4, lsr #1
   19e88:	str	r4, [r6]
   19e8c:	mul	r1, r5, r4
   19e90:	mov	r0, r7
   19e94:	pop	{r4, r5, r6, r7, r8, lr}
   19e98:	b	19dd8 <__assert_fail@plt+0x89e8>
   19e9c:	cmp	r4, #0
   19ea0:	beq	19ec4 <__assert_fail@plt+0x8ad4>
   19ea4:	umull	r0, r1, r4, r5
   19ea8:	adds	r3, r1, #0
   19eac:	movne	r3, #1
   19eb0:	cmp	r0, #0
   19eb4:	blt	19ec0 <__assert_fail@plt+0x8ad0>
   19eb8:	cmp	r3, #0
   19ebc:	beq	19e88 <__assert_fail@plt+0x8a98>
   19ec0:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19ec4:	mov	r1, r2
   19ec8:	mov	r0, #64	; 0x40
   19ecc:	bl	1b1e0 <__assert_fail@plt+0x9df0>
   19ed0:	cmp	r5, #64	; 0x40
   19ed4:	movls	r4, r0
   19ed8:	addhi	r4, r0, #1
   19edc:	b	19ea4 <__assert_fail@plt+0x8ab4>
   19ee0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   19ee4:	cmp	r0, #0
   19ee8:	ldr	r3, [r1]
   19eec:	beq	19f10 <__assert_fail@plt+0x8b20>
   19ef0:	ldr	r2, [pc, #60]	; 19f34 <__assert_fail@plt+0x8b44>
   19ef4:	cmp	r3, r2
   19ef8:	bhi	19f2c <__assert_fail@plt+0x8b3c>
   19efc:	add	r2, r3, #1
   19f00:	add	r3, r2, r3, lsr #1
   19f04:	str	r3, [r1]
   19f08:	mov	r1, r3
   19f0c:	b	19dd8 <__assert_fail@plt+0x89e8>
   19f10:	cmp	r3, #0
   19f14:	bne	19f28 <__assert_fail@plt+0x8b38>
   19f18:	mov	r3, #64	; 0x40
   19f1c:	str	r3, [r1]
   19f20:	mov	r1, r3
   19f24:	b	19dd8 <__assert_fail@plt+0x89e8>
   19f28:	bge	19f04 <__assert_fail@plt+0x8b14>
   19f2c:	push	{r4, lr}
   19f30:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19f34:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   19f38:	push	{r4, lr}
   19f3c:	mov	r4, r0
   19f40:	bl	19d7c <__assert_fail@plt+0x898c>
   19f44:	mov	r2, r4
   19f48:	mov	r1, #0
   19f4c:	pop	{r4, lr}
   19f50:	b	112dc <memset@plt>
   19f54:	push	{r4, r5, r6, lr}
   19f58:	umull	r4, r5, r0, r1
   19f5c:	adds	r3, r5, #0
   19f60:	movne	r3, #1
   19f64:	cmp	r4, #0
   19f68:	blt	19f80 <__assert_fail@plt+0x8b90>
   19f6c:	cmp	r3, #0
   19f70:	bne	19f80 <__assert_fail@plt+0x8b90>
   19f74:	bl	110a8 <calloc@plt>
   19f78:	cmp	r0, #0
   19f7c:	popne	{r4, r5, r6, pc}
   19f80:	bl	19fc4 <__assert_fail@plt+0x8bd4>
   19f84:	push	{r4, r5, r6, lr}
   19f88:	mov	r4, r1
   19f8c:	mov	r5, r0
   19f90:	mov	r0, r1
   19f94:	bl	19d7c <__assert_fail@plt+0x898c>
   19f98:	mov	r2, r4
   19f9c:	mov	r1, r5
   19fa0:	pop	{r4, r5, r6, lr}
   19fa4:	b	11120 <memcpy@plt>
   19fa8:	push	{r4, lr}
   19fac:	mov	r4, r0
   19fb0:	bl	11288 <strlen@plt>
   19fb4:	add	r1, r0, #1
   19fb8:	mov	r0, r4
   19fbc:	pop	{r4, lr}
   19fc0:	b	19f84 <__assert_fail@plt+0x8b94>
   19fc4:	ldr	r3, [pc, #44]	; 19ff8 <__assert_fail@plt+0x8c08>
   19fc8:	push	{r4, lr}
   19fcc:	mov	r2, #5
   19fd0:	ldr	r1, [pc, #36]	; 19ffc <__assert_fail@plt+0x8c0c>
   19fd4:	mov	r0, #0
   19fd8:	ldr	r4, [r3]
   19fdc:	bl	11168 <dcgettext@plt>
   19fe0:	ldr	r2, [pc, #24]	; 1a000 <__assert_fail@plt+0x8c10>
   19fe4:	mov	r1, #0
   19fe8:	mov	r3, r0
   19fec:	mov	r0, r4
   19ff0:	bl	11204 <error@plt>
   19ff4:	bl	113cc <abort@plt>
   19ff8:	andeq	lr, r2, r8, asr r1
   19ffc:	andeq	sp, r1, r0, ror r0
   1a000:	andeq	ip, r1, r8, ror #11
   1a004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a008:	sub	sp, sp, #36	; 0x24
   1a00c:	ldr	r6, [pc, #312]	; 1a14c <__assert_fail@plt+0x8d5c>
   1a010:	ldr	lr, [sp, #80]	; 0x50
   1a014:	mov	r8, r2
   1a018:	ldr	ip, [r6]
   1a01c:	mov	r2, r1
   1a020:	mov	r9, r3
   1a024:	str	lr, [sp]
   1a028:	add	r3, sp, #16
   1a02c:	mov	r1, #0
   1a030:	str	ip, [sp, #28]
   1a034:	mov	r7, r0
   1a038:	ldr	sl, [sp, #84]	; 0x54
   1a03c:	ldr	r5, [sp, #88]	; 0x58
   1a040:	bl	1a2a0 <__assert_fail@plt+0x8eb0>
   1a044:	subs	fp, r0, #0
   1a048:	bne	1a108 <__assert_fail@plt+0x8d18>
   1a04c:	ldrd	r2, [sp, #16]
   1a050:	cmp	r3, r9
   1a054:	cmpeq	r2, r8
   1a058:	ldrd	r8, [sp, #72]	; 0x48
   1a05c:	movcc	r1, #1
   1a060:	movcs	r1, #0
   1a064:	cmp	r3, r9
   1a068:	cmpeq	r2, r8
   1a06c:	orrhi	r1, r1, #1
   1a070:	cmp	r1, #0
   1a074:	beq	1a0cc <__assert_fail@plt+0x8cdc>
   1a078:	strd	r2, [sp, #8]
   1a07c:	bl	112c4 <__errno_location@plt>
   1a080:	ldrd	r2, [sp, #8]
   1a084:	mov	r9, #0
   1a088:	mvn	r8, #-1073741824	; 0xc0000000
   1a08c:	cmp	r3, r9
   1a090:	cmpeq	r2, r8
   1a094:	bls	1a134 <__assert_fail@plt+0x8d44>
   1a098:	mov	r4, #75	; 0x4b
   1a09c:	cmp	r5, #0
   1a0a0:	str	r4, [r0]
   1a0a4:	beq	1a100 <__assert_fail@plt+0x8d10>
   1a0a8:	mov	r0, r7
   1a0ac:	bl	19760 <__assert_fail@plt+0x8370>
   1a0b0:	mov	r3, sl
   1a0b4:	ldr	r2, [pc, #148]	; 1a150 <__assert_fail@plt+0x8d60>
   1a0b8:	mov	r1, r4
   1a0bc:	str	r0, [sp]
   1a0c0:	mov	r0, r5
   1a0c4:	bl	11204 <error@plt>
   1a0c8:	ldrd	r2, [sp, #16]
   1a0cc:	ldr	lr, [sp, #28]
   1a0d0:	ldr	ip, [r6]
   1a0d4:	mov	r0, r2
   1a0d8:	cmp	lr, ip
   1a0dc:	mov	r1, r3
   1a0e0:	bne	1a148 <__assert_fail@plt+0x8d58>
   1a0e4:	add	sp, sp, #36	; 0x24
   1a0e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0ec:	mov	r4, #0
   1a0f0:	cmp	r5, #0
   1a0f4:	str	r4, [r0]
   1a0f8:	bne	1a0a8 <__assert_fail@plt+0x8cb8>
   1a0fc:	mov	r4, r5
   1a100:	mov	r5, #1
   1a104:	b	1a0a8 <__assert_fail@plt+0x8cb8>
   1a108:	bl	112c4 <__errno_location@plt>
   1a10c:	cmp	fp, #1
   1a110:	beq	1a098 <__assert_fail@plt+0x8ca8>
   1a114:	cmp	fp, #3
   1a118:	beq	1a0ec <__assert_fail@plt+0x8cfc>
   1a11c:	ldr	r4, [r0]
   1a120:	cmp	r5, #0
   1a124:	moveq	r5, #1
   1a128:	cmp	r4, #22
   1a12c:	moveq	r4, #0
   1a130:	b	1a0a8 <__assert_fail@plt+0x8cb8>
   1a134:	mov	r4, #34	; 0x22
   1a138:	cmp	r5, #0
   1a13c:	str	r4, [r0]
   1a140:	bne	1a0a8 <__assert_fail@plt+0x8cb8>
   1a144:	b	1a100 <__assert_fail@plt+0x8d10>
   1a148:	bl	11174 <__stack_chk_fail@plt>
   1a14c:	andeq	sp, r2, r8, lsl #30
   1a150:	andeq	ip, r1, r4, ror #11
   1a154:	mov	r1, #10
   1a158:	b	1a004 <__assert_fail@plt+0x8c14>
   1a15c:	push	{r4, r5, r6, lr}
   1a160:	sub	sp, sp, #16
   1a164:	ldr	r6, [pc, #100]	; 1a1d0 <__assert_fail@plt+0x8de0>
   1a168:	add	r0, sp, #4
   1a16c:	mov	r5, #0
   1a170:	ldr	r3, [r6]
   1a174:	str	r3, [sp, #12]
   1a178:	bl	1aee8 <__assert_fail@plt+0x9af8>
   1a17c:	bl	112c4 <__errno_location@plt>
   1a180:	mov	r4, r0
   1a184:	b	1a194 <__assert_fail@plt+0x8da4>
   1a188:	ldr	r3, [r4]
   1a18c:	bics	r3, r3, #4
   1a190:	bne	1a1c4 <__assert_fail@plt+0x8dd4>
   1a194:	str	r5, [r4]
   1a198:	mov	r1, #0
   1a19c:	add	r0, sp, #4
   1a1a0:	bl	11108 <nanosleep@plt>
   1a1a4:	cmp	r0, #0
   1a1a8:	bne	1a188 <__assert_fail@plt+0x8d98>
   1a1ac:	ldr	r2, [sp, #12]
   1a1b0:	ldr	r3, [r6]
   1a1b4:	cmp	r2, r3
   1a1b8:	bne	1a1cc <__assert_fail@plt+0x8ddc>
   1a1bc:	add	sp, sp, #16
   1a1c0:	pop	{r4, r5, r6, pc}
   1a1c4:	mvn	r0, #0
   1a1c8:	b	1a1ac <__assert_fail@plt+0x8dbc>
   1a1cc:	bl	11174 <__stack_chk_fail@plt>
   1a1d0:	andeq	sp, r2, r8, lsl #30
   1a1d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1d8:	mov	r5, r1
   1a1dc:	ldr	r6, [pc, #184]	; 1a29c <__assert_fail@plt+0x8eac>
   1a1e0:	sub	sp, sp, #8
   1a1e4:	mov	r7, r0
   1a1e8:	ldr	r1, [r6]
   1a1ec:	mov	sl, r3
   1a1f0:	mov	r9, r2
   1a1f4:	str	r1, [sp, #4]
   1a1f8:	bl	112c4 <__errno_location@plt>
   1a1fc:	mov	r4, #0
   1a200:	mov	r1, sp
   1a204:	str	r4, [r0]
   1a208:	mov	r8, r0
   1a20c:	mov	r0, r7
   1a210:	blx	sl
   1a214:	ldr	r3, [sp]
   1a218:	cmp	r3, r7
   1a21c:	beq	1a290 <__assert_fail@plt+0x8ea0>
   1a220:	cmp	r5, r4
   1a224:	beq	1a26c <__assert_fail@plt+0x8e7c>
   1a228:	vcmp.f64	d0, #0.0
   1a22c:	vmrs	APSR_nzcv, fpscr
   1a230:	moveq	r0, #1
   1a234:	beq	1a24c <__assert_fail@plt+0x8e5c>
   1a238:	ldr	r0, [r8]
   1a23c:	subs	r0, r0, #34	; 0x22
   1a240:	movne	r0, #1
   1a244:	cmp	r5, #0
   1a248:	beq	1a250 <__assert_fail@plt+0x8e60>
   1a24c:	str	r3, [r5]
   1a250:	ldr	r2, [sp, #4]
   1a254:	ldr	r3, [r6]
   1a258:	vstr	d0, [r9]
   1a25c:	cmp	r2, r3
   1a260:	bne	1a298 <__assert_fail@plt+0x8ea8>
   1a264:	add	sp, sp, #8
   1a268:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a26c:	ldrb	r2, [r3]
   1a270:	cmp	r2, r4
   1a274:	movne	r0, r5
   1a278:	bne	1a250 <__assert_fail@plt+0x8e60>
   1a27c:	vcmp.f64	d0, #0.0
   1a280:	vmrs	APSR_nzcv, fpscr
   1a284:	moveq	r0, #1
   1a288:	bne	1a238 <__assert_fail@plt+0x8e48>
   1a28c:	b	1a250 <__assert_fail@plt+0x8e60>
   1a290:	mov	r0, r4
   1a294:	b	1a244 <__assert_fail@plt+0x8e54>
   1a298:	bl	11174 <__stack_chk_fail@plt>
   1a29c:	andeq	sp, r2, r8, lsl #30
   1a2a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2a4:	sub	sp, sp, #36	; 0x24
   1a2a8:	ldr	r5, [pc, #2536]	; 1ac98 <__assert_fail@plt+0x98a8>
   1a2ac:	mov	r9, r2
   1a2b0:	cmp	r2, #36	; 0x24
   1a2b4:	str	r3, [sp, #12]
   1a2b8:	ldr	r2, [r5]
   1a2bc:	ldr	r3, [sp, #72]	; 0x48
   1a2c0:	str	r2, [sp, #28]
   1a2c4:	str	r3, [sp]
   1a2c8:	bhi	1ac84 <__assert_fail@plt+0x9894>
   1a2cc:	cmp	r1, #0
   1a2d0:	mov	r4, r1
   1a2d4:	mov	r6, r0
   1a2d8:	addeq	r4, sp, #24
   1a2dc:	bl	112c4 <__errno_location@plt>
   1a2e0:	mov	r3, #0
   1a2e4:	str	r3, [r0]
   1a2e8:	mov	r7, r0
   1a2ec:	bl	11270 <__ctype_b_loc@plt>
   1a2f0:	ldrb	r3, [r6]
   1a2f4:	mov	r1, r6
   1a2f8:	ldr	r0, [r0]
   1a2fc:	b	1a304 <__assert_fail@plt+0x8f14>
   1a300:	ldrb	r3, [r1, #1]!
   1a304:	lsl	r2, r3, #1
   1a308:	ldrh	r8, [r0, r2]
   1a30c:	ands	r8, r8, #8192	; 0x2000
   1a310:	bne	1a300 <__assert_fail@plt+0x8f10>
   1a314:	cmp	r3, #45	; 0x2d
   1a318:	beq	1a3b4 <__assert_fail@plt+0x8fc4>
   1a31c:	mov	r2, r9
   1a320:	mov	r3, r8
   1a324:	mov	r1, r4
   1a328:	mov	r0, r6
   1a32c:	bl	1112c <__strtoull_internal@plt>
   1a330:	ldr	r9, [r4]
   1a334:	cmp	r9, r6
   1a338:	mov	sl, r0
   1a33c:	mov	fp, r1
   1a340:	beq	1a39c <__assert_fail@plt+0x8fac>
   1a344:	ldr	r8, [r7]
   1a348:	cmp	r8, #0
   1a34c:	bne	1a38c <__assert_fail@plt+0x8f9c>
   1a350:	ldr	r3, [sp]
   1a354:	cmp	r3, #0
   1a358:	beq	1a368 <__assert_fail@plt+0x8f78>
   1a35c:	ldrb	r6, [r9]
   1a360:	cmp	r6, #0
   1a364:	bne	1a73c <__assert_fail@plt+0x934c>
   1a368:	ldr	r3, [sp, #12]
   1a36c:	strd	sl, [r3]
   1a370:	ldr	r2, [sp, #28]
   1a374:	ldr	r3, [r5]
   1a378:	mov	r0, r8
   1a37c:	cmp	r2, r3
   1a380:	bne	1ac80 <__assert_fail@plt+0x9890>
   1a384:	add	sp, sp, #36	; 0x24
   1a388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a38c:	cmp	r8, #34	; 0x22
   1a390:	bne	1a3b4 <__assert_fail@plt+0x8fc4>
   1a394:	mov	r8, #1
   1a398:	b	1a350 <__assert_fail@plt+0x8f60>
   1a39c:	ldr	r0, [sp]
   1a3a0:	cmp	r0, #0
   1a3a4:	beq	1a3b4 <__assert_fail@plt+0x8fc4>
   1a3a8:	ldrb	r6, [r6]
   1a3ac:	cmp	r6, #0
   1a3b0:	bne	1a3bc <__assert_fail@plt+0x8fcc>
   1a3b4:	mov	r8, #4
   1a3b8:	b	1a370 <__assert_fail@plt+0x8f80>
   1a3bc:	mov	r1, r6
   1a3c0:	bl	112a0 <strchr@plt>
   1a3c4:	cmp	r0, #0
   1a3c8:	movne	sl, #1
   1a3cc:	movne	fp, #0
   1a3d0:	beq	1a3b4 <__assert_fail@plt+0x8fc4>
   1a3d4:	sub	r7, r6, #69	; 0x45
   1a3d8:	cmp	r7, #47	; 0x2f
   1a3dc:	ldrls	pc, [pc, r7, lsl #2]
   1a3e0:	b	1a5a0 <__assert_fail@plt+0x91b0>
   1a3e4:	andeq	sl, r1, r4, lsr #9
   1a3e8:	andeq	sl, r1, r0, lsr #11
   1a3ec:	andeq	sl, r1, r4, lsr #9
   1a3f0:	andeq	sl, r1, r0, lsr #11
   1a3f4:	andeq	sl, r1, r0, lsr #11
   1a3f8:	andeq	sl, r1, r0, lsr #11
   1a3fc:	andeq	sl, r1, r4, lsr #9
   1a400:	andeq	sl, r1, r0, lsr #11
   1a404:	andeq	sl, r1, r4, lsr #9
   1a408:	andeq	sl, r1, r0, lsr #11
   1a40c:	andeq	sl, r1, r0, lsr #11
   1a410:	andeq	sl, r1, r4, lsr #9
   1a414:	andeq	sl, r1, r0, lsr #11
   1a418:	andeq	sl, r1, r0, lsr #11
   1a41c:	andeq	sl, r1, r0, lsr #11
   1a420:	andeq	sl, r1, r4, lsr #9
   1a424:	andeq	sl, r1, r0, lsr #11
   1a428:	andeq	sl, r1, r0, lsr #11
   1a42c:	andeq	sl, r1, r0, lsr #11
   1a430:	andeq	sl, r1, r0, lsr #11
   1a434:	andeq	sl, r1, r4, lsr #9
   1a438:	andeq	sl, r1, r4, lsr #9
   1a43c:	andeq	sl, r1, r0, lsr #11
   1a440:	andeq	sl, r1, r0, lsr #11
   1a444:	andeq	sl, r1, r0, lsr #11
   1a448:	andeq	sl, r1, r0, lsr #11
   1a44c:	andeq	sl, r1, r0, lsr #11
   1a450:	andeq	sl, r1, r0, lsr #11
   1a454:	andeq	sl, r1, r0, lsr #11
   1a458:	andeq	sl, r1, r0, lsr #11
   1a45c:	andeq	sl, r1, r0, lsr #11
   1a460:	andeq	sl, r1, r0, lsr #11
   1a464:	andeq	sl, r1, r0, lsr #11
   1a468:	andeq	sl, r1, r0, lsr #11
   1a46c:	andeq	sl, r1, r4, lsr #9
   1a470:	andeq	sl, r1, r0, lsr #11
   1a474:	andeq	sl, r1, r0, lsr #11
   1a478:	andeq	sl, r1, r0, lsr #11
   1a47c:	andeq	sl, r1, r4, lsr #9
   1a480:	andeq	sl, r1, r0, lsr #11
   1a484:	andeq	sl, r1, r4, lsr #9
   1a488:	andeq	sl, r1, r0, lsr #11
   1a48c:	andeq	sl, r1, r0, lsr #11
   1a490:	andeq	sl, r1, r0, lsr #11
   1a494:	andeq	sl, r1, r0, lsr #11
   1a498:	andeq	sl, r1, r0, lsr #11
   1a49c:	andeq	sl, r1, r0, lsr #11
   1a4a0:	andeq	sl, r1, r4, lsr #9
   1a4a4:	ldr	r0, [sp]
   1a4a8:	mov	r1, #48	; 0x30
   1a4ac:	bl	112a0 <strchr@plt>
   1a4b0:	cmp	r0, #0
   1a4b4:	beq	1a5a0 <__assert_fail@plt+0x91b0>
   1a4b8:	ldrb	r3, [r9, #1]
   1a4bc:	cmp	r3, #68	; 0x44
   1a4c0:	beq	1ab80 <__assert_fail@plt+0x9790>
   1a4c4:	cmp	r3, #105	; 0x69
   1a4c8:	beq	1a760 <__assert_fail@plt+0x9370>
   1a4cc:	cmp	r3, #66	; 0x42
   1a4d0:	beq	1ab80 <__assert_fail@plt+0x9790>
   1a4d4:	cmp	r7, #47	; 0x2f
   1a4d8:	ldrls	pc, [pc, r7, lsl #2]
   1a4dc:	b	1a750 <__assert_fail@plt+0x9360>
   1a4e0:	andeq	sl, r1, r4, ror #22
   1a4e4:	andeq	sl, r1, r0, asr r7
   1a4e8:	andeq	sl, r1, r4, asr fp
   1a4ec:	andeq	sl, r1, r0, asr r7
   1a4f0:	andeq	sl, r1, r0, asr r7
   1a4f4:	andeq	sl, r1, r0, asr r7
   1a4f8:	andeq	sl, r1, r4, asr #22
   1a4fc:	andeq	sl, r1, r0, asr r7
   1a500:	andeq	sl, r1, r4, lsr fp
   1a504:	andeq	sl, r1, r0, asr r7
   1a508:	andeq	sl, r1, r0, asr r7
   1a50c:	andeq	sl, r1, r4, lsr #22
   1a510:	andeq	sl, r1, r0, asr r7
   1a514:	andeq	sl, r1, r0, asr r7
   1a518:	andeq	sl, r1, r0, asr r7
   1a51c:	andeq	sl, r1, r4, lsl fp
   1a520:	andeq	sl, r1, r0, asr r7
   1a524:	andeq	sl, r1, r0, asr r7
   1a528:	andeq	sl, r1, r0, asr r7
   1a52c:	andeq	sl, r1, r0, asr r7
   1a530:	andeq	sl, r1, r4, lsl #22
   1a534:	strdeq	sl, [r1], -r4
   1a538:	andeq	sl, r1, r0, asr r7
   1a53c:	andeq	sl, r1, r0, asr r7
   1a540:	andeq	sl, r1, r0, asr r7
   1a544:	andeq	sl, r1, r0, asr r7
   1a548:	andeq	sl, r1, r0, asr r7
   1a54c:	andeq	sl, r1, r0, asr r7
   1a550:	andeq	sl, r1, r0, asr r7
   1a554:	muleq	r1, ip, r7
   1a558:	andeq	sl, r1, ip, ror #21
   1a55c:	andeq	sl, r1, r0, asr r7
   1a560:	andeq	sl, r1, r0, asr r7
   1a564:	andeq	sl, r1, r0, asr r7
   1a568:	andeq	sl, r1, r4, asr fp
   1a56c:	andeq	sl, r1, r0, asr r7
   1a570:	andeq	sl, r1, r0, asr r7
   1a574:	andeq	sl, r1, r0, asr r7
   1a578:	andeq	sl, r1, r4, asr #22
   1a57c:	andeq	sl, r1, r0, asr r7
   1a580:	andeq	sl, r1, r4, lsr fp
   1a584:	andeq	sl, r1, r0, asr r7
   1a588:	andeq	sl, r1, r0, asr r7
   1a58c:	andeq	sl, r1, r0, asr r7
   1a590:	andeq	sl, r1, r0, asr r7
   1a594:	andeq	sl, r1, r0, asr r7
   1a598:	andeq	sl, r1, r0, asr r7
   1a59c:	andeq	sl, r1, r4, lsl fp
   1a5a0:	mov	lr, #1
   1a5a4:	mov	r0, #1024	; 0x400
   1a5a8:	sub	r6, r6, #66	; 0x42
   1a5ac:	cmp	r6, #53	; 0x35
   1a5b0:	ldrls	pc, [pc, r6, lsl #2]
   1a5b4:	b	1a750 <__assert_fail@plt+0x9360>
   1a5b8:	andeq	sl, r1, r4, asr #15
   1a5bc:	andeq	sl, r1, r0, asr r7
   1a5c0:	andeq	sl, r1, r0, asr r7
   1a5c4:	andeq	sl, r1, r8, ror #15
   1a5c8:	andeq	sl, r1, r0, asr r7
   1a5cc:	muleq	r1, r0, r6
   1a5d0:	andeq	sl, r1, r0, asr r7
   1a5d4:	andeq	sl, r1, r0, asr r7
   1a5d8:	andeq	sl, r1, r0, asr r7
   1a5dc:	andeq	sl, r1, r0, ror #17
   1a5e0:	andeq	sl, r1, r0, asr r7
   1a5e4:	andeq	sl, r1, r4, lsl #21
   1a5e8:	andeq	sl, r1, r0, asr r7
   1a5ec:	andeq	sl, r1, r0, asr r7
   1a5f0:	andeq	sl, r1, r8, lsl #20
   1a5f4:	andeq	sl, r1, r0, asr r7
   1a5f8:	andeq	sl, r1, r0, asr r7
   1a5fc:	andeq	sl, r1, r0, asr r7
   1a600:	andeq	sl, r1, ip, lsl #19
   1a604:	andeq	sl, r1, r0, asr r7
   1a608:	andeq	sl, r1, r0, asr r7
   1a60c:	andeq	sl, r1, r0, asr r7
   1a610:	andeq	sl, r1, r0, asr r7
   1a614:	andeq	sl, r1, r0, lsl r9
   1a618:	andeq	sl, r1, r4, ror #16
   1a61c:	andeq	sl, r1, r0, asr r7
   1a620:	andeq	sl, r1, r0, asr r7
   1a624:	andeq	sl, r1, r0, asr r7
   1a628:	andeq	sl, r1, r0, asr r7
   1a62c:	andeq	sl, r1, r0, asr r7
   1a630:	andeq	sl, r1, r0, asr r7
   1a634:	andeq	sl, r1, r0, asr r7
   1a638:	andeq	sl, r1, r0, lsr #15
   1a63c:	andeq	sl, r1, r4, lsr #14
   1a640:	andeq	sl, r1, r0, asr r7
   1a644:	andeq	sl, r1, r0, asr r7
   1a648:	andeq	sl, r1, r0, asr r7
   1a64c:	muleq	r1, r0, r6
   1a650:	andeq	sl, r1, r0, asr r7
   1a654:	andeq	sl, r1, r0, asr r7
   1a658:	andeq	sl, r1, r0, asr r7
   1a65c:	andeq	sl, r1, r0, ror #17
   1a660:	andeq	sl, r1, r0, asr r7
   1a664:	andeq	sl, r1, r4, lsl #21
   1a668:	andeq	sl, r1, r0, asr r7
   1a66c:	andeq	sl, r1, r0, asr r7
   1a670:	andeq	sl, r1, r0, asr r7
   1a674:	andeq	sl, r1, r0, asr r7
   1a678:	andeq	sl, r1, r0, asr r7
   1a67c:	andeq	sl, r1, r0, asr r7
   1a680:	andeq	sl, r1, ip, lsl #19
   1a684:	andeq	sl, r1, r0, asr r7
   1a688:	andeq	sl, r1, r0, asr r7
   1a68c:	andeq	sl, r1, r8, ror r7
   1a690:	asr	r1, r0, #31
   1a694:	mov	r2, #0
   1a698:	mov	r3, #0
   1a69c:	cmp	fp, #0
   1a6a0:	strd	r2, [sp]
   1a6a4:	bne	1abc4 <__assert_fail@plt+0x97d4>
   1a6a8:	ldrd	r2, [sp]
   1a6ac:	orrs	r3, r2, r3
   1a6b0:	bne	1abb4 <__assert_fail@plt+0x97c4>
   1a6b4:	mul	r3, sl, r1
   1a6b8:	umull	r6, r7, sl, r0
   1a6bc:	mla	r3, r0, fp, r3
   1a6c0:	ldrd	sl, [sp]
   1a6c4:	add	ip, r3, r7
   1a6c8:	cmp	ip, #0
   1a6cc:	mov	r7, ip
   1a6d0:	bne	1ac58 <__assert_fail@plt+0x9868>
   1a6d4:	orrs	r3, sl, fp
   1a6d8:	bne	1abb4 <__assert_fail@plt+0x97c4>
   1a6dc:	umull	r2, r3, r6, r0
   1a6e0:	mul	ip, r6, r1
   1a6e4:	strd	r2, [sp]
   1a6e8:	mla	r3, r0, r7, ip
   1a6ec:	ldr	r2, [sp, #4]
   1a6f0:	add	ip, r3, r2
   1a6f4:	cmp	ip, #0
   1a6f8:	str	ip, [sp, #4]
   1a6fc:	bne	1ac34 <__assert_fail@plt+0x9844>
   1a700:	orrs	r3, sl, fp
   1a704:	bne	1abb4 <__assert_fail@plt+0x97c4>
   1a708:	ldrd	r6, [sp]
   1a70c:	mov	r3, #0
   1a710:	mul	r2, r6, r1
   1a714:	umull	sl, fp, r6, r0
   1a718:	mla	r2, r0, r7, r2
   1a71c:	add	fp, r2, fp
   1a720:	orr	r8, r8, r3
   1a724:	add	r3, r9, lr
   1a728:	str	r3, [r4]
   1a72c:	ldrb	r3, [r9, lr]
   1a730:	cmp	r3, #0
   1a734:	orrne	r8, r8, #2
   1a738:	b	1a368 <__assert_fail@plt+0x8f78>
   1a73c:	mov	r1, r6
   1a740:	ldr	r0, [sp]
   1a744:	bl	112a0 <strchr@plt>
   1a748:	cmp	r0, #0
   1a74c:	bne	1a3d4 <__assert_fail@plt+0x8fe4>
   1a750:	ldr	r3, [sp, #12]
   1a754:	orr	r8, r8, #2
   1a758:	strd	sl, [r3]
   1a75c:	b	1a370 <__assert_fail@plt+0x8f80>
   1a760:	ldrb	r3, [r9, #2]
   1a764:	mov	r0, #1024	; 0x400
   1a768:	cmp	r3, #66	; 0x42
   1a76c:	movne	lr, #1
   1a770:	moveq	lr, #3
   1a774:	b	1a5a8 <__assert_fail@plt+0x91b8>
   1a778:	lsr	r3, fp, #31
   1a77c:	adds	sl, sl, sl
   1a780:	adc	fp, fp, fp
   1a784:	cmp	r3, #0
   1a788:	beq	1a724 <__assert_fail@plt+0x9334>
   1a78c:	mov	r8, #1
   1a790:	mvn	sl, #0
   1a794:	mvn	fp, #0
   1a798:	b	1a724 <__assert_fail@plt+0x9334>
   1a79c:	mov	lr, #1
   1a7a0:	lsr	r3, fp, #23
   1a7a4:	cmp	r3, #0
   1a7a8:	bne	1a78c <__assert_fail@plt+0x939c>
   1a7ac:	lsl	r3, fp, #9
   1a7b0:	orr	r3, r3, sl, lsr #23
   1a7b4:	lsl	r2, sl, #9
   1a7b8:	mov	sl, r2
   1a7bc:	mov	fp, r3
   1a7c0:	b	1a724 <__assert_fail@plt+0x9334>
   1a7c4:	lsr	r3, fp, #22
   1a7c8:	cmp	r3, #0
   1a7cc:	bne	1a78c <__assert_fail@plt+0x939c>
   1a7d0:	lsl	r3, fp, #10
   1a7d4:	orr	r3, r3, sl, lsr #22
   1a7d8:	lsl	r2, sl, #10
   1a7dc:	mov	sl, r2
   1a7e0:	mov	fp, r3
   1a7e4:	b	1a724 <__assert_fail@plt+0x9334>
   1a7e8:	mov	r6, r0
   1a7ec:	asr	r7, r0, #31
   1a7f0:	mov	r3, #0
   1a7f4:	mov	ip, #6
   1a7f8:	str	r3, [sp]
   1a7fc:	strd	r4, [sp, #16]
   1a800:	b	1a830 <__assert_fail@plt+0x9440>
   1a804:	orrs	r3, r2, r3
   1a808:	movne	r3, #1
   1a80c:	muleq	r3, sl, r7
   1a810:	strne	r3, [sp]
   1a814:	mlaeq	r3, r6, fp, r3
   1a818:	umulleq	sl, fp, sl, r6
   1a81c:	mvnne	sl, #0
   1a820:	addeq	fp, r3, fp
   1a824:	mvnne	fp, #0
   1a828:	subs	ip, ip, #1
   1a82c:	beq	1ab74 <__assert_fail@plt+0x9784>
   1a830:	cmp	fp, #0
   1a834:	mov	r2, #0
   1a838:	mov	r3, #0
   1a83c:	beq	1a804 <__assert_fail@plt+0x9414>
   1a840:	umull	r0, r1, sl, r6
   1a844:	mov	r5, #0
   1a848:	mov	r0, r1
   1a84c:	mov	r1, r5
   1a850:	umlal	r0, r1, fp, r6
   1a854:	cmp	r1, r5
   1a858:	movne	r2, #1
   1a85c:	movne	r3, #0
   1a860:	b	1a804 <__assert_fail@plt+0x9414>
   1a864:	mov	r6, r0
   1a868:	asr	r7, r0, #31
   1a86c:	mov	r3, #0
   1a870:	mov	ip, #7
   1a874:	str	r3, [sp]
   1a878:	strd	r4, [sp, #16]
   1a87c:	b	1a8ac <__assert_fail@plt+0x94bc>
   1a880:	orrs	r3, r2, r3
   1a884:	movne	r3, #1
   1a888:	muleq	r3, sl, r7
   1a88c:	strne	r3, [sp]
   1a890:	mlaeq	r3, r6, fp, r3
   1a894:	umulleq	sl, fp, sl, r6
   1a898:	mvnne	sl, #0
   1a89c:	addeq	fp, r3, fp
   1a8a0:	mvnne	fp, #0
   1a8a4:	subs	ip, ip, #1
   1a8a8:	beq	1ab74 <__assert_fail@plt+0x9784>
   1a8ac:	cmp	fp, #0
   1a8b0:	mov	r2, #0
   1a8b4:	mov	r3, #0
   1a8b8:	beq	1a880 <__assert_fail@plt+0x9490>
   1a8bc:	umull	r0, r1, sl, r6
   1a8c0:	mov	r5, #0
   1a8c4:	mov	r0, r1
   1a8c8:	mov	r1, r5
   1a8cc:	umlal	r0, r1, fp, r6
   1a8d0:	cmp	r1, r5
   1a8d4:	movne	r2, #1
   1a8d8:	movne	r3, #0
   1a8dc:	b	1a880 <__assert_fail@plt+0x9490>
   1a8e0:	asr	r1, r0, #31
   1a8e4:	cmp	fp, #0
   1a8e8:	mov	r6, #0
   1a8ec:	mov	r7, #0
   1a8f0:	bne	1ab8c <__assert_fail@plt+0x979c>
   1a8f4:	orrs	r3, r6, r7
   1a8f8:	bne	1a78c <__assert_fail@plt+0x939c>
   1a8fc:	mul	r3, sl, r1
   1a900:	mla	r3, r0, fp, r3
   1a904:	umull	sl, fp, sl, r0
   1a908:	add	fp, r3, fp
   1a90c:	b	1a724 <__assert_fail@plt+0x9334>
   1a910:	mov	r6, r0
   1a914:	asr	r7, r0, #31
   1a918:	mov	r3, #0
   1a91c:	mov	ip, #8
   1a920:	str	r3, [sp]
   1a924:	strd	r4, [sp, #16]
   1a928:	b	1a958 <__assert_fail@plt+0x9568>
   1a92c:	orrs	r3, r2, r3
   1a930:	movne	r3, #1
   1a934:	muleq	r3, sl, r7
   1a938:	strne	r3, [sp]
   1a93c:	mlaeq	r3, r6, fp, r3
   1a940:	umulleq	sl, fp, sl, r6
   1a944:	mvnne	sl, #0
   1a948:	addeq	fp, r3, fp
   1a94c:	mvnne	fp, #0
   1a950:	subs	ip, ip, #1
   1a954:	beq	1ab74 <__assert_fail@plt+0x9784>
   1a958:	cmp	fp, #0
   1a95c:	mov	r2, #0
   1a960:	mov	r3, #0
   1a964:	beq	1a92c <__assert_fail@plt+0x953c>
   1a968:	umull	r0, r1, sl, r6
   1a96c:	mov	r5, #0
   1a970:	mov	r0, r1
   1a974:	mov	r1, r5
   1a978:	umlal	r0, r1, fp, r6
   1a97c:	cmp	r1, r5
   1a980:	movne	r2, #1
   1a984:	movne	r3, #0
   1a988:	b	1a92c <__assert_fail@plt+0x953c>
   1a98c:	mov	r6, r0
   1a990:	asr	r7, r0, #31
   1a994:	mov	r3, #0
   1a998:	mov	ip, #4
   1a99c:	str	r3, [sp]
   1a9a0:	strd	r4, [sp, #16]
   1a9a4:	b	1a9d4 <__assert_fail@plt+0x95e4>
   1a9a8:	orrs	r3, r2, r3
   1a9ac:	movne	r3, #1
   1a9b0:	muleq	r3, sl, r7
   1a9b4:	strne	r3, [sp]
   1a9b8:	mlaeq	r3, r6, fp, r3
   1a9bc:	umulleq	sl, fp, sl, r6
   1a9c0:	mvnne	sl, #0
   1a9c4:	addeq	fp, r3, fp
   1a9c8:	mvnne	fp, #0
   1a9cc:	subs	ip, ip, #1
   1a9d0:	beq	1ab74 <__assert_fail@plt+0x9784>
   1a9d4:	cmp	fp, #0
   1a9d8:	mov	r2, #0
   1a9dc:	mov	r3, #0
   1a9e0:	beq	1a9a8 <__assert_fail@plt+0x95b8>
   1a9e4:	umull	r0, r1, sl, r6
   1a9e8:	mov	r5, #0
   1a9ec:	mov	r0, r1
   1a9f0:	mov	r1, r5
   1a9f4:	umlal	r0, r1, fp, r6
   1a9f8:	cmp	r1, r5
   1a9fc:	movne	r2, #1
   1aa00:	movne	r3, #0
   1aa04:	b	1a9a8 <__assert_fail@plt+0x95b8>
   1aa08:	mov	r6, r0
   1aa0c:	asr	r7, r0, #31
   1aa10:	mov	r3, #0
   1aa14:	mov	ip, #5
   1aa18:	str	r3, [sp]
   1aa1c:	strd	r4, [sp, #16]
   1aa20:	b	1aa50 <__assert_fail@plt+0x9660>
   1aa24:	orrs	r3, r2, r3
   1aa28:	movne	r3, #1
   1aa2c:	muleq	r3, sl, r7
   1aa30:	strne	r3, [sp]
   1aa34:	mlaeq	r3, r6, fp, r3
   1aa38:	umulleq	sl, fp, sl, r6
   1aa3c:	mvnne	sl, #0
   1aa40:	addeq	fp, r3, fp
   1aa44:	mvnne	fp, #0
   1aa48:	subs	ip, ip, #1
   1aa4c:	beq	1ab74 <__assert_fail@plt+0x9784>
   1aa50:	cmp	fp, #0
   1aa54:	mov	r2, #0
   1aa58:	mov	r3, #0
   1aa5c:	beq	1aa24 <__assert_fail@plt+0x9634>
   1aa60:	umull	r0, r1, sl, r6
   1aa64:	mov	r5, #0
   1aa68:	mov	r0, r1
   1aa6c:	mov	r1, r5
   1aa70:	umlal	r0, r1, fp, r6
   1aa74:	cmp	r1, r5
   1aa78:	movne	r2, #1
   1aa7c:	movne	r3, #0
   1aa80:	b	1aa24 <__assert_fail@plt+0x9634>
   1aa84:	asr	r1, r0, #31
   1aa88:	cmp	fp, #0
   1aa8c:	mov	r6, #0
   1aa90:	mov	r7, #0
   1aa94:	bne	1abe8 <__assert_fail@plt+0x97f8>
   1aa98:	orrs	r3, r6, r7
   1aa9c:	bne	1a78c <__assert_fail@plt+0x939c>
   1aaa0:	umull	r2, r3, sl, r0
   1aaa4:	mul	ip, sl, r1
   1aaa8:	strd	r2, [sp]
   1aaac:	mla	r3, r0, fp, ip
   1aab0:	ldr	r2, [sp, #4]
   1aab4:	mov	sl, r6
   1aab8:	add	ip, r3, r2
   1aabc:	cmp	ip, #0
   1aac0:	mov	fp, r7
   1aac4:	str	ip, [sp, #4]
   1aac8:	bne	1ac10 <__assert_fail@plt+0x9820>
   1aacc:	orrs	r3, sl, fp
   1aad0:	bne	1a78c <__assert_fail@plt+0x939c>
   1aad4:	ldrd	r6, [sp]
   1aad8:	mul	r3, r6, r1
   1aadc:	umull	sl, fp, r6, r0
   1aae0:	mla	r0, r0, r7, r3
   1aae4:	add	fp, r0, fp
   1aae8:	b	1a724 <__assert_fail@plt+0x9334>
   1aaec:	mov	lr, #1
   1aaf0:	b	1a724 <__assert_fail@plt+0x9334>
   1aaf4:	mov	lr, #1
   1aaf8:	mov	r6, #1024	; 0x400
   1aafc:	mov	r7, #0
   1ab00:	b	1a86c <__assert_fail@plt+0x947c>
   1ab04:	mov	lr, #1
   1ab08:	mov	r6, #1024	; 0x400
   1ab0c:	mov	r7, #0
   1ab10:	b	1a918 <__assert_fail@plt+0x9528>
   1ab14:	mov	lr, #1
   1ab18:	mov	r6, #1024	; 0x400
   1ab1c:	mov	r7, #0
   1ab20:	b	1a994 <__assert_fail@plt+0x95a4>
   1ab24:	mov	lr, #1
   1ab28:	mov	r6, #1024	; 0x400
   1ab2c:	mov	r7, #0
   1ab30:	b	1aa10 <__assert_fail@plt+0x9620>
   1ab34:	mov	lr, #1
   1ab38:	mov	r0, #1024	; 0x400
   1ab3c:	mov	r1, #0
   1ab40:	b	1aa88 <__assert_fail@plt+0x9698>
   1ab44:	mov	lr, #1
   1ab48:	mov	r0, #1024	; 0x400
   1ab4c:	mov	r1, #0
   1ab50:	b	1a8e4 <__assert_fail@plt+0x94f4>
   1ab54:	mov	lr, #1
   1ab58:	mov	r0, #1024	; 0x400
   1ab5c:	mov	r1, #0
   1ab60:	b	1a694 <__assert_fail@plt+0x92a4>
   1ab64:	mov	lr, #1
   1ab68:	mov	r6, #1024	; 0x400
   1ab6c:	mov	r7, #0
   1ab70:	b	1a7f0 <__assert_fail@plt+0x9400>
   1ab74:	ldrd	r4, [sp, #16]
   1ab78:	ldr	r3, [sp]
   1ab7c:	b	1a720 <__assert_fail@plt+0x9330>
   1ab80:	mov	lr, #2
   1ab84:	mov	r0, #1000	; 0x3e8
   1ab88:	b	1a5a8 <__assert_fail@plt+0x91b8>
   1ab8c:	umull	r2, r3, sl, r0
   1ab90:	str	r3, [sp]
   1ab94:	mov	r3, #0
   1ab98:	str	r3, [sp, #4]
   1ab9c:	ldrd	r2, [sp]
   1aba0:	umlal	r2, r3, fp, r0
   1aba4:	cmp	r3, #0
   1aba8:	movne	r6, #1
   1abac:	movne	r7, #0
   1abb0:	b	1a8f4 <__assert_fail@plt+0x9504>
   1abb4:	mov	r3, #1
   1abb8:	mvn	sl, #0
   1abbc:	mvn	fp, #0
   1abc0:	b	1a720 <__assert_fail@plt+0x9330>
   1abc4:	umull	r2, r3, sl, r0
   1abc8:	mov	r7, #0
   1abcc:	mov	r6, r3
   1abd0:	umlal	r6, r7, fp, r0
   1abd4:	cmp	r7, #0
   1abd8:	movne	r2, #1
   1abdc:	movne	r3, #0
   1abe0:	strdne	r2, [sp]
   1abe4:	b	1a6a8 <__assert_fail@plt+0x92b8>
   1abe8:	umull	r2, r3, sl, r0
   1abec:	str	r3, [sp]
   1abf0:	mov	r3, #0
   1abf4:	str	r3, [sp, #4]
   1abf8:	ldrd	r2, [sp]
   1abfc:	umlal	r2, r3, fp, r0
   1ac00:	cmp	r3, #0
   1ac04:	movne	r6, #1
   1ac08:	movne	r7, #0
   1ac0c:	b	1aa98 <__assert_fail@plt+0x96a8>
   1ac10:	ldr	r3, [sp]
   1ac14:	mov	r7, #0
   1ac18:	umull	r2, r3, r3, r0
   1ac1c:	mov	r6, r3
   1ac20:	umlal	r6, r7, ip, r0
   1ac24:	cmp	r7, #0
   1ac28:	movne	sl, #1
   1ac2c:	movne	fp, #0
   1ac30:	b	1aacc <__assert_fail@plt+0x96dc>
   1ac34:	ldr	r3, [sp]
   1ac38:	mov	r7, #0
   1ac3c:	umull	r2, r3, r3, r0
   1ac40:	mov	r6, r3
   1ac44:	umlal	r6, r7, ip, r0
   1ac48:	cmp	r7, #0
   1ac4c:	movne	sl, #1
   1ac50:	movne	fp, #0
   1ac54:	b	1a700 <__assert_fail@plt+0x9310>
   1ac58:	umull	r2, r3, r6, r0
   1ac5c:	str	r3, [sp]
   1ac60:	mov	r3, #0
   1ac64:	str	r3, [sp, #4]
   1ac68:	ldrd	r2, [sp]
   1ac6c:	umlal	r2, r3, ip, r0
   1ac70:	cmp	r3, #0
   1ac74:	movne	sl, #1
   1ac78:	movne	fp, #0
   1ac7c:	b	1a6d4 <__assert_fail@plt+0x92e4>
   1ac80:	bl	11174 <__stack_chk_fail@plt>
   1ac84:	ldr	r3, [pc, #16]	; 1ac9c <__assert_fail@plt+0x98ac>
   1ac88:	mov	r2, #96	; 0x60
   1ac8c:	ldr	r1, [pc, #12]	; 1aca0 <__assert_fail@plt+0x98b0>
   1ac90:	ldr	r0, [pc, #12]	; 1aca4 <__assert_fail@plt+0x98b4>
   1ac94:	bl	113f0 <__assert_fail@plt>
   1ac98:	andeq	sp, r2, r8, lsl #30
   1ac9c:	andeq	sp, r1, r4, lsl #1
   1aca0:	muleq	r1, r0, r0
   1aca4:	andeq	sp, r1, r0, lsr #1
   1aca8:	push	{r1, r2, r3}
   1acac:	push	{r4, r5, r6, r7, r8, lr}
   1acb0:	sub	sp, sp, #12
   1acb4:	ldr	r4, [pc, #300]	; 1ade8 <__assert_fail@plt+0x99f8>
   1acb8:	ldr	r3, [pc, #300]	; 1adec <__assert_fail@plt+0x99fc>
   1acbc:	ldr	r1, [sp, #36]	; 0x24
   1acc0:	ldr	r2, [r4]
   1acc4:	cmp	r1, r3
   1acc8:	add	r3, sp, #40	; 0x28
   1accc:	str	r2, [sp, #4]
   1acd0:	str	r3, [sp]
   1acd4:	bne	1ada0 <__assert_fail@plt+0x99b0>
   1acd8:	ldr	r6, [pc, #272]	; 1adf0 <__assert_fail@plt+0x9a00>
   1acdc:	add	r3, sp, #44	; 0x2c
   1ace0:	str	r3, [sp]
   1ace4:	ldr	r3, [r6]
   1ace8:	ldr	r7, [sp, #40]	; 0x28
   1acec:	cmp	r3, #0
   1acf0:	blt	1ad34 <__assert_fail@plt+0x9944>
   1acf4:	mov	r2, r7
   1acf8:	mov	r8, r0
   1acfc:	bl	1133c <fcntl64@plt>
   1ad00:	subs	r5, r0, #0
   1ad04:	blt	1adb0 <__assert_fail@plt+0x99c0>
   1ad08:	mov	r3, #1
   1ad0c:	str	r3, [r6]
   1ad10:	ldr	r2, [sp, #4]
   1ad14:	ldr	r3, [r4]
   1ad18:	mov	r0, r5
   1ad1c:	cmp	r2, r3
   1ad20:	bne	1ade4 <__assert_fail@plt+0x99f4>
   1ad24:	add	sp, sp, #12
   1ad28:	pop	{r4, r5, r6, r7, r8, lr}
   1ad2c:	add	sp, sp, #12
   1ad30:	bx	lr
   1ad34:	mov	r2, r7
   1ad38:	mov	r1, #0
   1ad3c:	bl	1aca8 <__assert_fail@plt+0x98b8>
   1ad40:	subs	r5, r0, #0
   1ad44:	blt	1ad10 <__assert_fail@plt+0x9920>
   1ad48:	ldr	r3, [r6]
   1ad4c:	cmn	r3, #1
   1ad50:	bne	1ad10 <__assert_fail@plt+0x9920>
   1ad54:	mov	r1, #1
   1ad58:	mov	r0, r5
   1ad5c:	bl	1133c <fcntl64@plt>
   1ad60:	subs	r2, r0, #0
   1ad64:	blt	1ad80 <__assert_fail@plt+0x9990>
   1ad68:	orr	r2, r2, #1
   1ad6c:	mov	r1, #2
   1ad70:	mov	r0, r5
   1ad74:	bl	1133c <fcntl64@plt>
   1ad78:	cmn	r0, #1
   1ad7c:	bne	1ad10 <__assert_fail@plt+0x9920>
   1ad80:	bl	112c4 <__errno_location@plt>
   1ad84:	mov	r6, r0
   1ad88:	mov	r0, r5
   1ad8c:	ldr	r7, [r6]
   1ad90:	mvn	r5, #0
   1ad94:	bl	113d8 <close@plt>
   1ad98:	str	r7, [r6]
   1ad9c:	b	1ad10 <__assert_fail@plt+0x9920>
   1ada0:	ldr	r2, [sp, #40]	; 0x28
   1ada4:	bl	1133c <fcntl64@plt>
   1ada8:	mov	r5, r0
   1adac:	b	1ad10 <__assert_fail@plt+0x9920>
   1adb0:	bl	112c4 <__errno_location@plt>
   1adb4:	ldr	r3, [r0]
   1adb8:	cmp	r3, #22
   1adbc:	bne	1ad08 <__assert_fail@plt+0x9918>
   1adc0:	mov	r2, r7
   1adc4:	mov	r0, r8
   1adc8:	mov	r1, #0
   1adcc:	bl	1aca8 <__assert_fail@plt+0x98b8>
   1add0:	subs	r5, r0, #0
   1add4:	mvnge	r3, #0
   1add8:	strge	r3, [r6]
   1addc:	bge	1ad54 <__assert_fail@plt+0x9964>
   1ade0:	b	1ad10 <__assert_fail@plt+0x9920>
   1ade4:	bl	11174 <__stack_chk_fail@plt>
   1ade8:	andeq	sp, r2, r8, lsl #30
   1adec:	andeq	r0, r0, r6, lsl #8
   1adf0:	andeq	lr, r2, r0, lsl r3
   1adf4:	push	{r4, r5, r6, r7, r8, lr}
   1adf8:	subs	r7, r0, #0
   1adfc:	ldr	r5, [pc, #108]	; 1ae70 <__assert_fail@plt+0x9a80>
   1ae00:	sub	sp, sp, #8
   1ae04:	mov	r8, r1
   1ae08:	ldr	r1, [r5]
   1ae0c:	moveq	r7, sp
   1ae10:	str	r1, [sp, #4]
   1ae14:	mov	r0, r7
   1ae18:	mov	r1, r8
   1ae1c:	mov	r6, r2
   1ae20:	bl	111f8 <mbrtowc@plt>
   1ae24:	cmp	r6, #0
   1ae28:	cmnne	r0, #3
   1ae2c:	mov	r4, r0
   1ae30:	bhi	1ae50 <__assert_fail@plt+0x9a60>
   1ae34:	ldr	r2, [sp, #4]
   1ae38:	ldr	r3, [r5]
   1ae3c:	mov	r0, r4
   1ae40:	cmp	r2, r3
   1ae44:	bne	1ae6c <__assert_fail@plt+0x9a7c>
   1ae48:	add	sp, sp, #8
   1ae4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ae50:	mov	r0, #0
   1ae54:	bl	1afb4 <__assert_fail@plt+0x9bc4>
   1ae58:	cmp	r0, #0
   1ae5c:	moveq	r4, #1
   1ae60:	ldrbeq	r3, [r8]
   1ae64:	streq	r3, [r7]
   1ae68:	b	1ae34 <__assert_fail@plt+0x9a44>
   1ae6c:	bl	11174 <__stack_chk_fail@plt>
   1ae70:	andeq	sp, r2, r8, lsl #30
   1ae74:	push	{r4, r5, r6, lr}
   1ae78:	mov	r4, r0
   1ae7c:	bl	111ec <__fpending@plt>
   1ae80:	ldr	r5, [r4]
   1ae84:	and	r5, r5, #32
   1ae88:	mov	r6, r0
   1ae8c:	mov	r0, r4
   1ae90:	bl	1b040 <__assert_fail@plt+0x9c50>
   1ae94:	cmp	r5, #0
   1ae98:	mov	r4, r0
   1ae9c:	bne	1aec8 <__assert_fail@plt+0x9ad8>
   1aea0:	cmp	r0, #0
   1aea4:	beq	1aec0 <__assert_fail@plt+0x9ad0>
   1aea8:	cmp	r6, #0
   1aeac:	bne	1aee0 <__assert_fail@plt+0x9af0>
   1aeb0:	bl	112c4 <__errno_location@plt>
   1aeb4:	ldr	r4, [r0]
   1aeb8:	subs	r4, r4, #9
   1aebc:	mvnne	r4, #0
   1aec0:	mov	r0, r4
   1aec4:	pop	{r4, r5, r6, pc}
   1aec8:	cmp	r0, #0
   1aecc:	bne	1aee0 <__assert_fail@plt+0x9af0>
   1aed0:	bl	112c4 <__errno_location@plt>
   1aed4:	str	r4, [r0]
   1aed8:	mvn	r4, #0
   1aedc:	b	1aec0 <__assert_fail@plt+0x9ad0>
   1aee0:	mvn	r4, #0
   1aee4:	b	1aec0 <__assert_fail@plt+0x9ad0>
   1aee8:	vldr	d7, [pc, #160]	; 1af90 <__assert_fail@plt+0x9ba0>
   1aeec:	vcmpe.f64	d0, d7
   1aef0:	vmrs	APSR_nzcv, fpscr
   1aef4:	ble	1af80 <__assert_fail@plt+0x9b90>
   1aef8:	vldr	d7, [pc, #152]	; 1af98 <__assert_fail@plt+0x9ba8>
   1aefc:	vcmpe.f64	d0, d7
   1af00:	vmrs	APSR_nzcv, fpscr
   1af04:	bmi	1af18 <__assert_fail@plt+0x9b28>
   1af08:	ldr	r3, [pc, #152]	; 1afa8 <__assert_fail@plt+0x9bb8>
   1af0c:	mvn	r2, #-2147483648	; 0x80000000
   1af10:	strd	r2, [r0]
   1af14:	bx	lr
   1af18:	vcvt.s32.f64	s15, d0
   1af1c:	vldr	d6, [pc, #124]	; 1afa0 <__assert_fail@plt+0x9bb0>
   1af20:	ldr	r2, [pc, #132]	; 1afac <__assert_fail@plt+0x9bbc>
   1af24:	ldr	ip, [pc, #132]	; 1afb0 <__assert_fail@plt+0x9bc0>
   1af28:	vcvt.f64.s32	d5, s15
   1af2c:	vsub.f64	d0, d0, d5
   1af30:	vmul.f64	d0, d0, d6
   1af34:	vcvt.s32.f64	s14, d0
   1af38:	vcvt.f64.s32	d6, s14
   1af3c:	vmov	r1, s14
   1af40:	vcmpe.f64	d6, d0
   1af44:	vmrs	APSR_nzcv, fpscr
   1af48:	movmi	r3, #1
   1af4c:	movpl	r3, #0
   1af50:	add	r3, r3, r1
   1af54:	smull	r2, r1, r2, r3
   1af58:	asr	r2, r3, #31
   1af5c:	rsb	r2, r2, r1, asr #28
   1af60:	vmov	r1, s15
   1af64:	add	r1, r2, r1
   1af68:	mul	r2, ip, r2
   1af6c:	subs	r3, r3, r2
   1af70:	submi	r1, r1, #1
   1af74:	addmi	r3, r3, ip
   1af78:	stm	r0, {r1, r3}
   1af7c:	bx	lr
   1af80:	mov	r2, #-2147483648	; 0x80000000
   1af84:	mov	r3, #0
   1af88:	strd	r2, [r0]
   1af8c:	bx	lr
   1af90:	andeq	r0, r0, r0
   1af94:	mvngt	r0, r0
   1af98:	andeq	r0, r0, r0
   1af9c:	mvnmi	r0, r0
   1afa0:	andeq	r0, r0, r0
   1afa4:	bicmi	ip, sp, r5, ror #26
   1afa8:	blcc	fe6cd7ac <optarg@@GLIBC_2.4+0xfe69f5f4>
   1afac:	ldrtmi	r2, [r8], #4001	; 0xfa1
   1afb0:	blcc	fe6cd7b8 <optarg@@GLIBC_2.4+0xfe69f600>
   1afb4:	push	{r4, lr}
   1afb8:	mov	r1, #0
   1afbc:	bl	11354 <setlocale@plt>
   1afc0:	subs	r4, r0, #0
   1afc4:	beq	1aff0 <__assert_fail@plt+0x9c00>
   1afc8:	ldr	r1, [pc, #40]	; 1aff8 <__assert_fail@plt+0x9c08>
   1afcc:	bl	110cc <strcmp@plt>
   1afd0:	cmp	r0, #0
   1afd4:	popeq	{r4, pc}
   1afd8:	mov	r0, r4
   1afdc:	ldr	r1, [pc, #24]	; 1affc <__assert_fail@plt+0x9c0c>
   1afe0:	bl	110cc <strcmp@plt>
   1afe4:	adds	r0, r0, #0
   1afe8:	movne	r0, #1
   1afec:	pop	{r4, pc}
   1aff0:	mov	r0, #1
   1aff4:	pop	{r4, pc}
   1aff8:	andeq	ip, r1, ip, lsr #23
   1affc:	andeq	sp, r1, r8, asr #1
   1b000:	push	{r4, lr}
   1b004:	mov	r0, #14
   1b008:	bl	1136c <nl_langinfo@plt>
   1b00c:	cmp	r0, #0
   1b010:	beq	1b028 <__assert_fail@plt+0x9c38>
   1b014:	ldrb	r2, [r0]
   1b018:	ldr	r3, [pc, #16]	; 1b030 <__assert_fail@plt+0x9c40>
   1b01c:	cmp	r2, #0
   1b020:	moveq	r0, r3
   1b024:	pop	{r4, pc}
   1b028:	ldr	r0, [pc]	; 1b030 <__assert_fail@plt+0x9c40>
   1b02c:	pop	{r4, pc}
   1b030:	ldrdeq	sp, [r1], -r0
   1b034:	mov	r2, #3
   1b038:	mov	r1, #0
   1b03c:	b	1aca8 <__assert_fail@plt+0x98b8>
   1b040:	push	{r4, r5, lr}
   1b044:	sub	sp, sp, #12
   1b048:	mov	r4, r0
   1b04c:	bl	112f4 <fileno@plt>
   1b050:	cmp	r0, #0
   1b054:	mov	r0, r4
   1b058:	blt	1b0d4 <__assert_fail@plt+0x9ce4>
   1b05c:	bl	11240 <__freading@plt>
   1b060:	cmp	r0, #0
   1b064:	bne	1b0a0 <__assert_fail@plt+0x9cb0>
   1b068:	mov	r0, r4
   1b06c:	bl	1b0e0 <__assert_fail@plt+0x9cf0>
   1b070:	cmp	r0, #0
   1b074:	beq	1b0d0 <__assert_fail@plt+0x9ce0>
   1b078:	bl	112c4 <__errno_location@plt>
   1b07c:	mov	r5, r0
   1b080:	mov	r0, r4
   1b084:	ldr	r4, [r5]
   1b088:	bl	11318 <fclose@plt>
   1b08c:	cmp	r4, #0
   1b090:	mvnne	r0, #0
   1b094:	strne	r4, [r5]
   1b098:	add	sp, sp, #12
   1b09c:	pop	{r4, r5, pc}
   1b0a0:	mov	r0, r4
   1b0a4:	bl	112f4 <fileno@plt>
   1b0a8:	mov	r3, #1
   1b0ac:	str	r3, [sp]
   1b0b0:	mov	r2, #0
   1b0b4:	mov	r3, #0
   1b0b8:	bl	111d4 <lseek64@plt>
   1b0bc:	mvn	r3, #0
   1b0c0:	mvn	r2, #0
   1b0c4:	cmp	r1, r3
   1b0c8:	cmpeq	r0, r2
   1b0cc:	bne	1b068 <__assert_fail@plt+0x9c78>
   1b0d0:	mov	r0, r4
   1b0d4:	add	sp, sp, #12
   1b0d8:	pop	{r4, r5, lr}
   1b0dc:	b	11318 <fclose@plt>
   1b0e0:	push	{r4, lr}
   1b0e4:	subs	r4, r0, #0
   1b0e8:	sub	sp, sp, #8
   1b0ec:	beq	1b108 <__assert_fail@plt+0x9d18>
   1b0f0:	bl	11240 <__freading@plt>
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1b108 <__assert_fail@plt+0x9d18>
   1b0fc:	ldr	r3, [r4]
   1b100:	tst	r3, #256	; 0x100
   1b104:	bne	1b118 <__assert_fail@plt+0x9d28>
   1b108:	mov	r0, r4
   1b10c:	add	sp, sp, #8
   1b110:	pop	{r4, lr}
   1b114:	b	110f0 <fflush@plt>
   1b118:	mov	r3, #1
   1b11c:	str	r3, [sp]
   1b120:	mov	r2, #0
   1b124:	mov	r3, #0
   1b128:	mov	r0, r4
   1b12c:	bl	1b140 <__assert_fail@plt+0x9d50>
   1b130:	mov	r0, r4
   1b134:	add	sp, sp, #8
   1b138:	pop	{r4, lr}
   1b13c:	b	110f0 <fflush@plt>
   1b140:	push	{r4, r5, r6, r7, r8, lr}
   1b144:	sub	sp, sp, #8
   1b148:	ldmib	r0, {ip, lr}
   1b14c:	mov	r4, r0
   1b150:	ldr	r5, [sp, #32]
   1b154:	cmp	lr, ip
   1b158:	beq	1b170 <__assert_fail@plt+0x9d80>
   1b15c:	str	r5, [sp, #32]
   1b160:	mov	r0, r4
   1b164:	add	sp, sp, #8
   1b168:	pop	{r4, r5, r6, r7, r8, lr}
   1b16c:	b	11324 <fseeko64@plt>
   1b170:	ldr	lr, [r0, #20]
   1b174:	ldr	ip, [r0, #16]
   1b178:	cmp	lr, ip
   1b17c:	bne	1b15c <__assert_fail@plt+0x9d6c>
   1b180:	ldr	r8, [r0, #36]	; 0x24
   1b184:	cmp	r8, #0
   1b188:	bne	1b15c <__assert_fail@plt+0x9d6c>
   1b18c:	mov	r6, r2
   1b190:	mov	r7, r3
   1b194:	bl	112f4 <fileno@plt>
   1b198:	mov	r2, r6
   1b19c:	mov	r3, r7
   1b1a0:	str	r5, [sp]
   1b1a4:	bl	111d4 <lseek64@plt>
   1b1a8:	mvn	r3, #0
   1b1ac:	mvn	r2, #0
   1b1b0:	cmp	r1, r3
   1b1b4:	cmpeq	r0, r2
   1b1b8:	beq	1b1d8 <__assert_fail@plt+0x9de8>
   1b1bc:	ldr	r3, [r4]
   1b1c0:	strd	r0, [r4, #80]	; 0x50
   1b1c4:	mov	r0, r8
   1b1c8:	bic	r3, r3, #16
   1b1cc:	str	r3, [r4]
   1b1d0:	add	sp, sp, #8
   1b1d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b1d8:	mvn	r0, #0
   1b1dc:	b	1b1d0 <__assert_fail@plt+0x9de0>
   1b1e0:	subs	r2, r1, #1
   1b1e4:	bxeq	lr
   1b1e8:	bcc	1b3c0 <__assert_fail@plt+0x9fd0>
   1b1ec:	cmp	r0, r1
   1b1f0:	bls	1b3a4 <__assert_fail@plt+0x9fb4>
   1b1f4:	tst	r1, r2
   1b1f8:	beq	1b3b0 <__assert_fail@plt+0x9fc0>
   1b1fc:	clz	r3, r0
   1b200:	clz	r2, r1
   1b204:	sub	r3, r2, r3
   1b208:	rsbs	r3, r3, #31
   1b20c:	addne	r3, r3, r3, lsl #1
   1b210:	mov	r2, #0
   1b214:	addne	pc, pc, r3, lsl #2
   1b218:	nop			; (mov r0, r0)
   1b21c:	cmp	r0, r1, lsl #31
   1b220:	adc	r2, r2, r2
   1b224:	subcs	r0, r0, r1, lsl #31
   1b228:	cmp	r0, r1, lsl #30
   1b22c:	adc	r2, r2, r2
   1b230:	subcs	r0, r0, r1, lsl #30
   1b234:	cmp	r0, r1, lsl #29
   1b238:	adc	r2, r2, r2
   1b23c:	subcs	r0, r0, r1, lsl #29
   1b240:	cmp	r0, r1, lsl #28
   1b244:	adc	r2, r2, r2
   1b248:	subcs	r0, r0, r1, lsl #28
   1b24c:	cmp	r0, r1, lsl #27
   1b250:	adc	r2, r2, r2
   1b254:	subcs	r0, r0, r1, lsl #27
   1b258:	cmp	r0, r1, lsl #26
   1b25c:	adc	r2, r2, r2
   1b260:	subcs	r0, r0, r1, lsl #26
   1b264:	cmp	r0, r1, lsl #25
   1b268:	adc	r2, r2, r2
   1b26c:	subcs	r0, r0, r1, lsl #25
   1b270:	cmp	r0, r1, lsl #24
   1b274:	adc	r2, r2, r2
   1b278:	subcs	r0, r0, r1, lsl #24
   1b27c:	cmp	r0, r1, lsl #23
   1b280:	adc	r2, r2, r2
   1b284:	subcs	r0, r0, r1, lsl #23
   1b288:	cmp	r0, r1, lsl #22
   1b28c:	adc	r2, r2, r2
   1b290:	subcs	r0, r0, r1, lsl #22
   1b294:	cmp	r0, r1, lsl #21
   1b298:	adc	r2, r2, r2
   1b29c:	subcs	r0, r0, r1, lsl #21
   1b2a0:	cmp	r0, r1, lsl #20
   1b2a4:	adc	r2, r2, r2
   1b2a8:	subcs	r0, r0, r1, lsl #20
   1b2ac:	cmp	r0, r1, lsl #19
   1b2b0:	adc	r2, r2, r2
   1b2b4:	subcs	r0, r0, r1, lsl #19
   1b2b8:	cmp	r0, r1, lsl #18
   1b2bc:	adc	r2, r2, r2
   1b2c0:	subcs	r0, r0, r1, lsl #18
   1b2c4:	cmp	r0, r1, lsl #17
   1b2c8:	adc	r2, r2, r2
   1b2cc:	subcs	r0, r0, r1, lsl #17
   1b2d0:	cmp	r0, r1, lsl #16
   1b2d4:	adc	r2, r2, r2
   1b2d8:	subcs	r0, r0, r1, lsl #16
   1b2dc:	cmp	r0, r1, lsl #15
   1b2e0:	adc	r2, r2, r2
   1b2e4:	subcs	r0, r0, r1, lsl #15
   1b2e8:	cmp	r0, r1, lsl #14
   1b2ec:	adc	r2, r2, r2
   1b2f0:	subcs	r0, r0, r1, lsl #14
   1b2f4:	cmp	r0, r1, lsl #13
   1b2f8:	adc	r2, r2, r2
   1b2fc:	subcs	r0, r0, r1, lsl #13
   1b300:	cmp	r0, r1, lsl #12
   1b304:	adc	r2, r2, r2
   1b308:	subcs	r0, r0, r1, lsl #12
   1b30c:	cmp	r0, r1, lsl #11
   1b310:	adc	r2, r2, r2
   1b314:	subcs	r0, r0, r1, lsl #11
   1b318:	cmp	r0, r1, lsl #10
   1b31c:	adc	r2, r2, r2
   1b320:	subcs	r0, r0, r1, lsl #10
   1b324:	cmp	r0, r1, lsl #9
   1b328:	adc	r2, r2, r2
   1b32c:	subcs	r0, r0, r1, lsl #9
   1b330:	cmp	r0, r1, lsl #8
   1b334:	adc	r2, r2, r2
   1b338:	subcs	r0, r0, r1, lsl #8
   1b33c:	cmp	r0, r1, lsl #7
   1b340:	adc	r2, r2, r2
   1b344:	subcs	r0, r0, r1, lsl #7
   1b348:	cmp	r0, r1, lsl #6
   1b34c:	adc	r2, r2, r2
   1b350:	subcs	r0, r0, r1, lsl #6
   1b354:	cmp	r0, r1, lsl #5
   1b358:	adc	r2, r2, r2
   1b35c:	subcs	r0, r0, r1, lsl #5
   1b360:	cmp	r0, r1, lsl #4
   1b364:	adc	r2, r2, r2
   1b368:	subcs	r0, r0, r1, lsl #4
   1b36c:	cmp	r0, r1, lsl #3
   1b370:	adc	r2, r2, r2
   1b374:	subcs	r0, r0, r1, lsl #3
   1b378:	cmp	r0, r1, lsl #2
   1b37c:	adc	r2, r2, r2
   1b380:	subcs	r0, r0, r1, lsl #2
   1b384:	cmp	r0, r1, lsl #1
   1b388:	adc	r2, r2, r2
   1b38c:	subcs	r0, r0, r1, lsl #1
   1b390:	cmp	r0, r1
   1b394:	adc	r2, r2, r2
   1b398:	subcs	r0, r0, r1
   1b39c:	mov	r0, r2
   1b3a0:	bx	lr
   1b3a4:	moveq	r0, #1
   1b3a8:	movne	r0, #0
   1b3ac:	bx	lr
   1b3b0:	clz	r2, r1
   1b3b4:	rsb	r2, r2, #31
   1b3b8:	lsr	r0, r0, r2
   1b3bc:	bx	lr
   1b3c0:	cmp	r0, #0
   1b3c4:	mvnne	r0, #0
   1b3c8:	b	1b4fc <__assert_fail@plt+0xa10c>
   1b3cc:	cmp	r1, #0
   1b3d0:	beq	1b3c0 <__assert_fail@plt+0x9fd0>
   1b3d4:	push	{r0, r1, lr}
   1b3d8:	bl	1b1e0 <__assert_fail@plt+0x9df0>
   1b3dc:	pop	{r1, r2, lr}
   1b3e0:	mul	r3, r2, r0
   1b3e4:	sub	r1, r1, r3
   1b3e8:	bx	lr
   1b3ec:	cmp	r3, #0
   1b3f0:	cmpeq	r2, #0
   1b3f4:	bne	1b418 <__assert_fail@plt+0xa028>
   1b3f8:	cmp	r1, #0
   1b3fc:	movlt	r1, #-2147483648	; 0x80000000
   1b400:	movlt	r0, #0
   1b404:	blt	1b414 <__assert_fail@plt+0xa024>
   1b408:	cmpeq	r0, #0
   1b40c:	mvnne	r1, #-2147483648	; 0x80000000
   1b410:	mvnne	r0, #0
   1b414:	b	1b4fc <__assert_fail@plt+0xa10c>
   1b418:	sub	sp, sp, #8
   1b41c:	push	{sp, lr}
   1b420:	cmp	r1, #0
   1b424:	blt	1b444 <__assert_fail@plt+0xa054>
   1b428:	cmp	r3, #0
   1b42c:	blt	1b478 <__assert_fail@plt+0xa088>
   1b430:	bl	1b50c <__assert_fail@plt+0xa11c>
   1b434:	ldr	lr, [sp, #4]
   1b438:	add	sp, sp, #8
   1b43c:	pop	{r2, r3}
   1b440:	bx	lr
   1b444:	rsbs	r0, r0, #0
   1b448:	sbc	r1, r1, r1, lsl #1
   1b44c:	cmp	r3, #0
   1b450:	blt	1b49c <__assert_fail@plt+0xa0ac>
   1b454:	bl	1b50c <__assert_fail@plt+0xa11c>
   1b458:	ldr	lr, [sp, #4]
   1b45c:	add	sp, sp, #8
   1b460:	pop	{r2, r3}
   1b464:	rsbs	r0, r0, #0
   1b468:	sbc	r1, r1, r1, lsl #1
   1b46c:	rsbs	r2, r2, #0
   1b470:	sbc	r3, r3, r3, lsl #1
   1b474:	bx	lr
   1b478:	rsbs	r2, r2, #0
   1b47c:	sbc	r3, r3, r3, lsl #1
   1b480:	bl	1b50c <__assert_fail@plt+0xa11c>
   1b484:	ldr	lr, [sp, #4]
   1b488:	add	sp, sp, #8
   1b48c:	pop	{r2, r3}
   1b490:	rsbs	r0, r0, #0
   1b494:	sbc	r1, r1, r1, lsl #1
   1b498:	bx	lr
   1b49c:	rsbs	r2, r2, #0
   1b4a0:	sbc	r3, r3, r3, lsl #1
   1b4a4:	bl	1b50c <__assert_fail@plt+0xa11c>
   1b4a8:	ldr	lr, [sp, #4]
   1b4ac:	add	sp, sp, #8
   1b4b0:	pop	{r2, r3}
   1b4b4:	rsbs	r2, r2, #0
   1b4b8:	sbc	r3, r3, r3, lsl #1
   1b4bc:	bx	lr
   1b4c0:	cmp	r3, #0
   1b4c4:	cmpeq	r2, #0
   1b4c8:	bne	1b4e0 <__assert_fail@plt+0xa0f0>
   1b4cc:	cmp	r1, #0
   1b4d0:	cmpeq	r0, #0
   1b4d4:	mvnne	r1, #0
   1b4d8:	mvnne	r0, #0
   1b4dc:	b	1b4fc <__assert_fail@plt+0xa10c>
   1b4e0:	sub	sp, sp, #8
   1b4e4:	push	{sp, lr}
   1b4e8:	bl	1b50c <__assert_fail@plt+0xa11c>
   1b4ec:	ldr	lr, [sp, #4]
   1b4f0:	add	sp, sp, #8
   1b4f4:	pop	{r2, r3}
   1b4f8:	bx	lr
   1b4fc:	push	{r1, lr}
   1b500:	mov	r0, #8
   1b504:	bl	110c0 <raise@plt>
   1b508:	pop	{r1, pc}
   1b50c:	cmp	r1, r3
   1b510:	cmpeq	r0, r2
   1b514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b518:	mov	r4, r0
   1b51c:	movcc	r0, #0
   1b520:	mov	r5, r1
   1b524:	ldr	lr, [sp, #36]	; 0x24
   1b528:	movcc	r1, r0
   1b52c:	bcc	1b628 <__assert_fail@plt+0xa238>
   1b530:	cmp	r3, #0
   1b534:	clzeq	ip, r2
   1b538:	clzne	ip, r3
   1b53c:	addeq	ip, ip, #32
   1b540:	cmp	r5, #0
   1b544:	clzeq	r1, r4
   1b548:	addeq	r1, r1, #32
   1b54c:	clzne	r1, r5
   1b550:	sub	ip, ip, r1
   1b554:	sub	sl, ip, #32
   1b558:	lsl	r9, r3, ip
   1b55c:	rsb	fp, ip, #32
   1b560:	orr	r9, r9, r2, lsl sl
   1b564:	orr	r9, r9, r2, lsr fp
   1b568:	lsl	r8, r2, ip
   1b56c:	cmp	r5, r9
   1b570:	cmpeq	r4, r8
   1b574:	movcc	r0, #0
   1b578:	movcc	r1, r0
   1b57c:	bcc	1b598 <__assert_fail@plt+0xa1a8>
   1b580:	mov	r0, #1
   1b584:	subs	r4, r4, r8
   1b588:	lsl	r1, r0, sl
   1b58c:	orr	r1, r1, r0, lsr fp
   1b590:	lsl	r0, r0, ip
   1b594:	sbc	r5, r5, r9
   1b598:	cmp	ip, #0
   1b59c:	beq	1b628 <__assert_fail@plt+0xa238>
   1b5a0:	lsr	r6, r8, #1
   1b5a4:	orr	r6, r6, r9, lsl #31
   1b5a8:	lsr	r7, r9, #1
   1b5ac:	mov	r2, ip
   1b5b0:	b	1b5d4 <__assert_fail@plt+0xa1e4>
   1b5b4:	subs	r3, r4, r6
   1b5b8:	sbc	r8, r5, r7
   1b5bc:	adds	r3, r3, r3
   1b5c0:	adc	r8, r8, r8
   1b5c4:	adds	r4, r3, #1
   1b5c8:	adc	r5, r8, #0
   1b5cc:	subs	r2, r2, #1
   1b5d0:	beq	1b5f0 <__assert_fail@plt+0xa200>
   1b5d4:	cmp	r5, r7
   1b5d8:	cmpeq	r4, r6
   1b5dc:	bcs	1b5b4 <__assert_fail@plt+0xa1c4>
   1b5e0:	adds	r4, r4, r4
   1b5e4:	adc	r5, r5, r5
   1b5e8:	subs	r2, r2, #1
   1b5ec:	bne	1b5d4 <__assert_fail@plt+0xa1e4>
   1b5f0:	lsr	r3, r4, ip
   1b5f4:	orr	r3, r3, r5, lsl fp
   1b5f8:	lsr	r2, r5, ip
   1b5fc:	orr	r3, r3, r5, lsr sl
   1b600:	adds	r0, r0, r4
   1b604:	mov	r4, r3
   1b608:	lsl	r3, r2, ip
   1b60c:	orr	r3, r3, r4, lsl sl
   1b610:	lsl	ip, r4, ip
   1b614:	orr	r3, r3, r4, lsr fp
   1b618:	adc	r1, r1, r5
   1b61c:	subs	r0, r0, ip
   1b620:	mov	r5, r2
   1b624:	sbc	r1, r1, r3
   1b628:	cmp	lr, #0
   1b62c:	strdne	r4, [lr]
   1b630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b634:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b638:	mov	r7, r0
   1b63c:	ldr	r6, [pc, #72]	; 1b68c <__assert_fail@plt+0xa29c>
   1b640:	ldr	r5, [pc, #72]	; 1b690 <__assert_fail@plt+0xa2a0>
   1b644:	add	r6, pc, r6
   1b648:	add	r5, pc, r5
   1b64c:	sub	r6, r6, r5
   1b650:	mov	r8, r1
   1b654:	mov	r9, r2
   1b658:	bl	1107c <fstatfs64@plt-0x20>
   1b65c:	asrs	r6, r6, #2
   1b660:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b664:	mov	r4, #0
   1b668:	add	r4, r4, #1
   1b66c:	ldr	r3, [r5], #4
   1b670:	mov	r2, r9
   1b674:	mov	r1, r8
   1b678:	mov	r0, r7
   1b67c:	blx	r3
   1b680:	cmp	r6, r4
   1b684:	bne	1b668 <__assert_fail@plt+0xa278>
   1b688:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b68c:			; <UNDEFINED> instruction: 0x000128b8
   1b690:			; <UNDEFINED> instruction: 0x000128b0
   1b694:	bx	lr
   1b698:	ldr	r3, [pc, #12]	; 1b6ac <__assert_fail@plt+0xa2bc>
   1b69c:	mov	r1, #0
   1b6a0:	add	r3, pc, r3
   1b6a4:	ldr	r2, [r3]
   1b6a8:	b	112d0 <__cxa_atexit@plt>
   1b6ac:	andeq	r2, r1, ip, lsl #21

Disassembly of section .fini:

0001b6b0 <.fini>:
   1b6b0:	push	{r3, lr}
   1b6b4:	pop	{r3, pc}
