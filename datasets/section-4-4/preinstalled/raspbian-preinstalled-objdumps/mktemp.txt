
raspbian-preinstalled/mktemp:     file format elf32-littlearm


Disassembly of section .init:

00010f64 <.init>:
   10f64:	push	{r3, lr}
   10f68:	bl	11928 <__assert_fail@plt+0x698>
   10f6c:	pop	{r3, pc}

Disassembly of section .plt:

00010f70 <fdopen@plt-0x14>:
   10f70:	push	{lr}		; (str lr, [sp, #-4]!)
   10f74:	ldr	lr, [pc, #4]	; 10f80 <fdopen@plt-0x4>
   10f78:	add	lr, pc, lr
   10f7c:	ldr	pc, [lr, #8]!
   10f80:	andeq	r7, r1, r0, lsl #1

00010f84 <fdopen@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #128]!	; 0x80

00010f90 <calloc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #120]!	; 0x78

00010f9c <fputs_unlocked@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #112]!	; 0x70

00010fa8 <raise@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #104]!	; 0x68

00010fb4 <strcmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #96]!	; 0x60

00010fc0 <__read_chk@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #88]!	; 0x58

00010fcc <fflush@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #80]!	; 0x50

00010fd8 <getuid@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #72]!	; 0x48

00010fe4 <free@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #64]!	; 0x40

00010ff0 <_exit@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #56]!	; 0x38

00010ffc <memcpy@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #48]!	; 0x30

00011008 <mbsinit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #40]!	; 0x28

00011014 <memcmp@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #32]!

00011020 <fputc_unlocked@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #24]!

0001102c <dcgettext@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #16]!

00011038 <__stack_chk_fail@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #8]!

00011044 <realloc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #0]!

00011050 <textdomain@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #4088]!	; 0xff8

0001105c <iswprint@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #4080]!	; 0xff0

00011068 <fwrite@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #4072]!	; 0xfe8

00011074 <lseek64@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #4064]!	; 0xfe0

00011080 <__ctype_get_mb_cur_max@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #4056]!	; 0xfd8

0001108c <gettimeofday@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #4048]!	; 0xfd0

00011098 <__fpending@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110a4 <mbrtowc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #4032]!	; 0xfc0

000110b0 <error@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4024]!	; 0xfb8

000110bc <open64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4016]!	; 0xfb0

000110c8 <getenv@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4008]!	; 0xfa8

000110d4 <puts@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4000]!	; 0xfa0

000110e0 <malloc@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3992]!	; 0xf98

000110ec <__libc_start_main@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3984]!	; 0xf90

000110f8 <__freading@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3976]!	; 0xf88

00011104 <__gmon_start__@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3968]!	; 0xf80

00011110 <mempcpy@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3960]!	; 0xf78

0001111c <getopt_long@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3952]!	; 0xf70

00011128 <__ctype_b_loc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3944]!	; 0xf68

00011134 <getpid@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3936]!	; 0xf60

00011140 <exit@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3928]!	; 0xf58

0001114c <strlen@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3920]!	; 0xf50

00011158 <__errno_location@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3912]!	; 0xf48

00011164 <__cxa_atexit@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3904]!	; 0xf40

00011170 <mkdir@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3896]!	; 0xf38

0001117c <setvbuf@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3888]!	; 0xf30

00011188 <getgid@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3880]!	; 0xf28

00011194 <memset@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3872]!	; 0xf20

000111a0 <__printf_chk@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3864]!	; 0xf18

000111ac <fileno@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3856]!	; 0xf10

000111b8 <__fprintf_chk@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3848]!	; 0xf08

000111c4 <fclose@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3840]!	; 0xf00

000111d0 <fseeko64@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3832]!	; 0xef8

000111dc <fcntl64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3824]!	; 0xef0

000111e8 <setlocale@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3816]!	; 0xee8

000111f4 <__explicit_bzero_chk@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3808]!	; 0xee0

00011200 <strrchr@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3800]!	; 0xed8

0001120c <nl_langinfo@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3792]!	; 0xed0

00011218 <remove@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3784]!	; 0xec8

00011224 <getppid@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3776]!	; 0xec0

00011230 <fopen64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3768]!	; 0xeb8

0001123c <bindtextdomain@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3760]!	; 0xeb0

00011248 <fread_unlocked@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3752]!	; 0xea8

00011254 <strncmp@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3744]!	; 0xea0

00011260 <abort@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3736]!	; 0xe98

0001126c <close@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3728]!	; 0xe90

00011278 <__lxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3720]!	; 0xe88

00011284 <strspn@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3712]!	; 0xe80

00011290 <__assert_fail@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3704]!	; 0xe78

Disassembly of section .text:

0001129c <.text>:
   1129c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112a0:	mov	r7, r0
   112a4:	sub	sp, sp, #36	; 0x24
   112a8:	ldr	r0, [r1]
   112ac:	mov	r6, r1
   112b0:	bl	12080 <__assert_fail@plt+0xdf0>
   112b4:	ldr	r1, [pc, #1476]	; 11880 <__assert_fail@plt+0x5f0>
   112b8:	mov	r0, #6
   112bc:	mov	r5, #0
   112c0:	bl	111e8 <setlocale@plt>
   112c4:	ldr	sl, [pc, #1464]	; 11884 <__assert_fail@plt+0x5f4>
   112c8:	ldr	r1, [pc, #1464]	; 11888 <__assert_fail@plt+0x5f8>
   112cc:	ldr	r0, [pc, #1464]	; 1188c <__assert_fail@plt+0x5fc>
   112d0:	ldr	r9, [pc, #1464]	; 11890 <__assert_fail@plt+0x600>
   112d4:	bl	1123c <bindtextdomain@plt>
   112d8:	mov	r8, r5
   112dc:	ldr	r0, [pc, #1448]	; 1188c <__assert_fail@plt+0x5fc>
   112e0:	mov	fp, r5
   112e4:	bl	11050 <textdomain@plt>
   112e8:	ldr	r0, [pc, #1444]	; 11894 <__assert_fail@plt+0x604>
   112ec:	bl	1611c <__assert_fail@plt+0x4e8c>
   112f0:	str	r5, [sp, #20]
   112f4:	str	r5, [sp, #16]
   112f8:	str	r5, [sp, #24]
   112fc:	str	r5, [sp, #28]
   11300:	mov	r4, #0
   11304:	str	r4, [sp]
   11308:	mov	r3, sl
   1130c:	mov	r2, r9
   11310:	mov	r1, r6
   11314:	mov	r0, r7
   11318:	bl	1111c <getopt_long@plt>
   1131c:	cmn	r0, #1
   11320:	beq	11404 <__assert_fail@plt+0x174>
   11324:	cmp	r0, #112	; 0x70
   11328:	beq	113ec <__assert_fail@plt+0x15c>
   1132c:	ble	1134c <__assert_fail@plt+0xbc>
   11330:	cmp	r0, #116	; 0x74
   11334:	beq	113dc <__assert_fail@plt+0x14c>
   11338:	ble	11388 <__assert_fail@plt+0xf8>
   1133c:	cmp	r0, #117	; 0x75
   11340:	bne	11370 <__assert_fail@plt+0xe0>
   11344:	mov	r5, #1
   11348:	b	11300 <__assert_fail@plt+0x70>
   1134c:	cmn	r0, #2
   11350:	beq	11814 <__assert_fail@plt+0x584>
   11354:	ble	11398 <__assert_fail@plt+0x108>
   11358:	cmp	r0, #86	; 0x56
   1135c:	beq	113a0 <__assert_fail@plt+0x110>
   11360:	cmp	r0, #100	; 0x64
   11364:	bne	1180c <__assert_fail@plt+0x57c>
   11368:	mov	r8, #1
   1136c:	b	11300 <__assert_fail@plt+0x70>
   11370:	cmp	r0, #256	; 0x100
   11374:	bne	1180c <__assert_fail@plt+0x57c>
   11378:	ldr	r3, [pc, #1304]	; 11898 <__assert_fail@plt+0x608>
   1137c:	ldr	r3, [r3]
   11380:	str	r3, [sp, #24]
   11384:	b	11300 <__assert_fail@plt+0x70>
   11388:	cmp	r0, #113	; 0x71
   1138c:	bne	1180c <__assert_fail@plt+0x57c>
   11390:	mov	fp, #1
   11394:	b	11300 <__assert_fail@plt+0x70>
   11398:	cmn	r0, #3
   1139c:	bne	1180c <__assert_fail@plt+0x57c>
   113a0:	ldr	r3, [pc, #1268]	; 1189c <__assert_fail@plt+0x60c>
   113a4:	ldr	r0, [pc, #1268]	; 118a0 <__assert_fail@plt+0x610>
   113a8:	ldr	r1, [pc, #1268]	; 118a4 <__assert_fail@plt+0x614>
   113ac:	ldr	r2, [pc, #1268]	; 118a8 <__assert_fail@plt+0x618>
   113b0:	mov	r4, #0
   113b4:	ldr	r0, [r0]
   113b8:	ldr	r3, [r3]
   113bc:	str	r1, [sp, #4]
   113c0:	str	r2, [sp]
   113c4:	str	r4, [sp, #8]
   113c8:	ldr	r2, [pc, #1244]	; 118ac <__assert_fail@plt+0x61c>
   113cc:	ldr	r1, [pc, #1244]	; 118b0 <__assert_fail@plt+0x620>
   113d0:	bl	14a24 <__assert_fail@plt+0x3794>
   113d4:	mov	r0, r4
   113d8:	bl	11140 <exit@plt>
   113dc:	mov	r3, #1
   113e0:	str	r3, [sp, #20]
   113e4:	str	r3, [sp, #16]
   113e8:	b	11300 <__assert_fail@plt+0x70>
   113ec:	ldr	r3, [pc, #1188]	; 11898 <__assert_fail@plt+0x608>
   113f0:	ldr	r3, [r3]
   113f4:	str	r3, [sp, #28]
   113f8:	mov	r3, #1
   113fc:	str	r3, [sp, #16]
   11400:	b	11300 <__assert_fail@plt+0x70>
   11404:	ldr	r3, [pc, #1192]	; 118b4 <__assert_fail@plt+0x624>
   11408:	ldr	r3, [r3]
   1140c:	sub	r7, r7, r3
   11410:	cmp	r7, #1
   11414:	bhi	117ec <__assert_fail@plt+0x55c>
   11418:	cmp	r7, #0
   1141c:	beq	115cc <__assert_fail@plt+0x33c>
   11420:	ldr	r2, [sp, #24]
   11424:	ldr	r9, [r6, r3, lsl #2]
   11428:	cmp	r2, #0
   1142c:	beq	11718 <__assert_fail@plt+0x488>
   11430:	mov	r0, r9
   11434:	bl	1114c <strlen@plt>
   11438:	subs	r6, r0, #0
   1143c:	beq	11864 <__assert_fail@plt+0x5d4>
   11440:	add	r3, r9, r6
   11444:	ldrb	r3, [r3, #-1]
   11448:	cmp	r3, #88	; 0x58
   1144c:	bne	11864 <__assert_fail@plt+0x5d4>
   11450:	ldr	sl, [sp, #24]
   11454:	mov	r0, sl
   11458:	bl	1114c <strlen@plt>
   1145c:	mov	r7, r0
   11460:	add	r0, r6, r0
   11464:	add	r0, r0, #1
   11468:	bl	14b28 <__assert_fail@plt+0x3898>
   1146c:	mov	r2, r6
   11470:	mov	r1, r9
   11474:	add	r6, r0, r6
   11478:	mov	r4, r0
   1147c:	bl	10ffc <memcpy@plt>
   11480:	mov	r1, sl
   11484:	mov	r0, r6
   11488:	add	r2, r7, #1
   1148c:	bl	10ffc <memcpy@plt>
   11490:	cmp	r7, #0
   11494:	beq	114a8 <__assert_fail@plt+0x218>
   11498:	mov	r0, r6
   1149c:	bl	11efc <__assert_fail@plt+0xc6c>
   114a0:	cmp	r6, r0
   114a4:	bne	11834 <__assert_fail@plt+0x5a4>
   114a8:	subs	r6, r6, r4
   114ac:	beq	11828 <__assert_fail@plt+0x598>
   114b0:	sub	r2, r6, #1
   114b4:	add	r3, r4, r2
   114b8:	ldrb	r2, [r4, r2]
   114bc:	cmp	r2, #88	; 0x58
   114c0:	bne	11828 <__assert_fail@plt+0x598>
   114c4:	add	r6, r4, r6
   114c8:	b	114d8 <__assert_fail@plt+0x248>
   114cc:	ldrb	r2, [r3, #-1]!
   114d0:	cmp	r2, #88	; 0x58
   114d4:	bne	114e4 <__assert_fail@plt+0x254>
   114d8:	cmp	r4, r3
   114dc:	sub	r9, r6, r3
   114e0:	bne	114cc <__assert_fail@plt+0x23c>
   114e4:	cmp	r9, #2
   114e8:	bls	11828 <__assert_fail@plt+0x598>
   114ec:	ldr	r3, [sp, #16]
   114f0:	cmp	r3, #0
   114f4:	beq	1154c <__assert_fail@plt+0x2bc>
   114f8:	ldr	r3, [sp, #20]
   114fc:	cmp	r3, #0
   11500:	bne	11694 <__assert_fail@plt+0x404>
   11504:	ldr	r3, [sp, #28]
   11508:	cmp	r3, #0
   1150c:	beq	11670 <__assert_fail@plt+0x3e0>
   11510:	ldrb	r3, [r3]
   11514:	cmp	r3, #0
   11518:	ldrne	r6, [sp, #28]
   1151c:	beq	11670 <__assert_fail@plt+0x3e0>
   11520:	ldrb	r3, [r4]
   11524:	cmp	r3, #47	; 0x2f
   11528:	beq	1181c <__assert_fail@plt+0x58c>
   1152c:	mov	r1, r4
   11530:	mov	r0, r6
   11534:	mov	r2, #0
   11538:	bl	11f9c <__assert_fail@plt+0xd0c>
   1153c:	mov	r6, r0
   11540:	mov	r0, r4
   11544:	bl	10fe4 <free@plt>
   11548:	mov	r4, r6
   1154c:	mov	r0, r4
   11550:	bl	14d54 <__assert_fail@plt+0x3ac4>
   11554:	cmp	r8, #0
   11558:	mov	r6, r0
   1155c:	beq	115ec <__assert_fail@plt+0x35c>
   11560:	cmp	r5, #0
   11564:	bne	11650 <__assert_fail@plt+0x3c0>
   11568:	str	r9, [sp]
   1156c:	mov	r2, r5
   11570:	mov	r1, r7
   11574:	mov	r3, #1
   11578:	bl	14510 <__assert_fail@plt+0x3280>
   1157c:	cmp	r0, #0
   11580:	beq	11754 <__assert_fail@plt+0x4c4>
   11584:	cmp	fp, #0
   11588:	bne	11618 <__assert_fail@plt+0x388>
   1158c:	bl	11158 <__errno_location@plt>
   11590:	ldr	r1, [pc, #800]	; 118b8 <__assert_fail@plt+0x628>
   11594:	mov	r2, #5
   11598:	ldr	r5, [r0]
   1159c:	mov	r0, fp
   115a0:	bl	1102c <dcgettext@plt>
   115a4:	mov	r8, #1
   115a8:	mov	r6, r0
   115ac:	mov	r0, r4
   115b0:	bl	142e4 <__assert_fail@plt+0x3054>
   115b4:	mov	r2, r6
   115b8:	mov	r1, r5
   115bc:	mov	r3, r0
   115c0:	mov	r0, fp
   115c4:	bl	110b0 <error@plt>
   115c8:	b	1161c <__assert_fail@plt+0x38c>
   115cc:	ldr	r3, [sp, #24]
   115d0:	cmp	r3, #0
   115d4:	beq	1170c <__assert_fail@plt+0x47c>
   115d8:	mov	r3, #1
   115dc:	ldr	r9, [pc, #728]	; 118bc <__assert_fail@plt+0x62c>
   115e0:	mov	r6, #14
   115e4:	str	r3, [sp, #16]
   115e8:	b	11450 <__assert_fail@plt+0x1c0>
   115ec:	cmp	r5, #0
   115f0:	bne	11628 <__assert_fail@plt+0x398>
   115f4:	str	r9, [sp]
   115f8:	mov	r1, r7
   115fc:	mov	r3, r5
   11600:	mov	r2, r5
   11604:	bl	14510 <__assert_fail@plt+0x3280>
   11608:	cmp	r0, #0
   1160c:	bge	11748 <__assert_fail@plt+0x4b8>
   11610:	cmp	fp, #0
   11614:	beq	117bc <__assert_fail@plt+0x52c>
   11618:	mov	r8, #1
   1161c:	mov	r0, r8
   11620:	add	sp, sp, #36	; 0x24
   11624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11628:	str	r9, [sp]
   1162c:	mov	r1, r7
   11630:	mov	r3, #2
   11634:	mov	r2, r8
   11638:	bl	14510 <__assert_fail@plt+0x3280>
   1163c:	cmp	r0, #0
   11640:	blt	11610 <__assert_fail@plt+0x380>
   11644:	mov	r0, r6
   11648:	bl	110d4 <puts@plt>
   1164c:	b	1161c <__assert_fail@plt+0x38c>
   11650:	str	r9, [sp]
   11654:	mov	r1, r7
   11658:	mov	r3, #2
   1165c:	mov	r2, #0
   11660:	bl	14510 <__assert_fail@plt+0x3280>
   11664:	subs	r8, r0, #0
   11668:	beq	11644 <__assert_fail@plt+0x3b4>
   1166c:	b	11584 <__assert_fail@plt+0x2f4>
   11670:	ldr	r0, [pc, #584]	; 118c0 <__assert_fail@plt+0x630>
   11674:	bl	110c8 <getenv@plt>
   11678:	subs	r6, r0, #0
   1167c:	beq	117cc <__assert_fail@plt+0x53c>
   11680:	ldrb	r2, [r6]
   11684:	ldr	r3, [pc, #568]	; 118c4 <__assert_fail@plt+0x634>
   11688:	cmp	r2, #0
   1168c:	moveq	r6, r3
   11690:	b	11520 <__assert_fail@plt+0x290>
   11694:	ldr	r0, [pc, #548]	; 118c0 <__assert_fail@plt+0x630>
   11698:	bl	110c8 <getenv@plt>
   1169c:	subs	r6, r0, #0
   116a0:	beq	116b0 <__assert_fail@plt+0x420>
   116a4:	ldrb	r3, [r6]
   116a8:	cmp	r3, #0
   116ac:	bne	116cc <__assert_fail@plt+0x43c>
   116b0:	ldr	r2, [sp, #28]
   116b4:	cmp	r2, #0
   116b8:	beq	117e4 <__assert_fail@plt+0x554>
   116bc:	ldrb	r3, [r2]
   116c0:	ldr	r6, [pc, #508]	; 118c4 <__assert_fail@plt+0x634>
   116c4:	cmp	r3, #0
   116c8:	movne	r6, r2
   116cc:	mov	r0, r4
   116d0:	bl	11efc <__assert_fail@plt+0xc6c>
   116d4:	cmp	r4, r0
   116d8:	movne	r2, #5
   116dc:	ldrne	r1, [pc, #484]	; 118c8 <__assert_fail@plt+0x638>
   116e0:	beq	1152c <__assert_fail@plt+0x29c>
   116e4:	mov	r0, #0
   116e8:	bl	1102c <dcgettext@plt>
   116ec:	mov	r5, r0
   116f0:	mov	r0, r4
   116f4:	bl	142e4 <__assert_fail@plt+0x3054>
   116f8:	mov	r2, r5
   116fc:	mov	r1, #0
   11700:	mov	r3, r0
   11704:	mov	r0, #1
   11708:	bl	110b0 <error@plt>
   1170c:	ldr	r9, [pc, #424]	; 118bc <__assert_fail@plt+0x62c>
   11710:	mov	r3, #1
   11714:	str	r3, [sp, #16]
   11718:	mov	r0, r9
   1171c:	bl	14d54 <__assert_fail@plt+0x3ac4>
   11720:	mov	r1, #88	; 0x58
   11724:	mov	r4, r0
   11728:	bl	11200 <strrchr@plt>
   1172c:	cmp	r0, #0
   11730:	addne	r6, r0, #1
   11734:	beq	117d4 <__assert_fail@plt+0x544>
   11738:	mov	r0, r6
   1173c:	bl	1114c <strlen@plt>
   11740:	mov	r7, r0
   11744:	b	11490 <__assert_fail@plt+0x200>
   11748:	bl	1126c <close@plt>
   1174c:	cmp	r0, #0
   11750:	bne	11610 <__assert_fail@plt+0x380>
   11754:	mov	r0, r6
   11758:	bl	110d4 <puts@plt>
   1175c:	ldr	r2, [pc, #316]	; 118a0 <__assert_fail@plt+0x610>
   11760:	ldr	r3, [pc, #356]	; 118cc <__assert_fail@plt+0x63c>
   11764:	mov	r4, #1
   11768:	ldr	r0, [r2]
   1176c:	strb	r4, [r3]
   11770:	bl	11d90 <__assert_fail@plt+0xb00>
   11774:	subs	r8, r0, #0
   11778:	beq	1161c <__assert_fail@plt+0x38c>
   1177c:	bl	11158 <__errno_location@plt>
   11780:	ldr	r5, [r0]
   11784:	mov	r0, r6
   11788:	bl	11218 <remove@plt>
   1178c:	cmp	fp, #0
   11790:	bne	11618 <__assert_fail@plt+0x388>
   11794:	mov	r2, #5
   11798:	ldr	r1, [pc, #304]	; 118d0 <__assert_fail@plt+0x640>
   1179c:	mov	r0, fp
   117a0:	bl	1102c <dcgettext@plt>
   117a4:	mov	r1, r5
   117a8:	mov	r8, r4
   117ac:	mov	r2, r0
   117b0:	mov	r0, fp
   117b4:	bl	110b0 <error@plt>
   117b8:	b	1161c <__assert_fail@plt+0x38c>
   117bc:	bl	11158 <__errno_location@plt>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #264]	; 118d4 <__assert_fail@plt+0x644>
   117c8:	b	11598 <__assert_fail@plt+0x308>
   117cc:	ldr	r6, [pc, #240]	; 118c4 <__assert_fail@plt+0x634>
   117d0:	b	11520 <__assert_fail@plt+0x290>
   117d4:	mov	r0, r4
   117d8:	bl	1114c <strlen@plt>
   117dc:	add	r6, r4, r0
   117e0:	b	11738 <__assert_fail@plt+0x4a8>
   117e4:	ldr	r6, [pc, #216]	; 118c4 <__assert_fail@plt+0x634>
   117e8:	b	116cc <__assert_fail@plt+0x43c>
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #224]	; 118d8 <__assert_fail@plt+0x648>
   117f4:	mov	r0, r4
   117f8:	bl	1102c <dcgettext@plt>
   117fc:	mov	r1, r4
   11800:	mov	r2, r0
   11804:	mov	r0, r4
   11808:	bl	110b0 <error@plt>
   1180c:	mov	r0, #1
   11810:	bl	11a18 <__assert_fail@plt+0x788>
   11814:	mov	r0, r4
   11818:	bl	11a18 <__assert_fail@plt+0x788>
   1181c:	mov	r2, #5
   11820:	ldr	r1, [pc, #180]	; 118dc <__assert_fail@plt+0x64c>
   11824:	b	116e4 <__assert_fail@plt+0x454>
   11828:	mov	r2, #5
   1182c:	ldr	r1, [pc, #172]	; 118e0 <__assert_fail@plt+0x650>
   11830:	b	116e4 <__assert_fail@plt+0x454>
   11834:	mov	r2, #5
   11838:	ldr	r1, [pc, #164]	; 118e4 <__assert_fail@plt+0x654>
   1183c:	mov	r0, #0
   11840:	bl	1102c <dcgettext@plt>
   11844:	mov	r4, r0
   11848:	mov	r0, r6
   1184c:	bl	142e4 <__assert_fail@plt+0x3054>
   11850:	mov	r2, r4
   11854:	mov	r1, #0
   11858:	mov	r3, r0
   1185c:	mov	r0, #1
   11860:	bl	110b0 <error@plt>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #120]	; 118e8 <__assert_fail@plt+0x658>
   1186c:	mov	r0, #0
   11870:	bl	1102c <dcgettext@plt>
   11874:	mov	r4, r0
   11878:	mov	r0, r9
   1187c:	b	1184c <__assert_fail@plt+0x5bc>
   11880:	andeq	r6, r1, ip, ror pc
   11884:	andeq	r6, r1, r8, ror r1
   11888:	muleq	r1, r4, r8
   1188c:	ldrdeq	r6, [r1], -r0
   11890:	andeq	r6, r1, r4, asr #17
   11894:	ldrdeq	r1, [r1], -ip
   11898:	andeq	r8, r2, r0, lsl #3
   1189c:	andeq	r8, r2, r0, lsr #2
   118a0:	andeq	r8, r2, ip, ror r1
   118a4:	andeq	r6, r1, r8, lsr #17
   118a8:			; <UNDEFINED> instruction: 0x000168b4
   118ac:	andeq	r6, r1, ip, asr #15
   118b0:	strdeq	r6, [r1], -r8
   118b4:	andeq	r8, r2, r0, ror r1
   118b8:	ldrdeq	r6, [r1], -r0
   118bc:	andeq	r6, r1, ip, ror r8
   118c0:	andeq	r6, r1, r8, asr r9
   118c4:	andeq	r6, r1, ip, lsl #17
   118c8:	andeq	r6, r1, r0, ror #18
   118cc:	andeq	r8, r2, r5, lsl #3
   118d0:	andeq	r6, r1, r4, lsr #20
   118d4:	strdeq	r6, [r1], -ip
   118d8:	andeq	r6, r1, ip, asr #17
   118dc:	muleq	r1, r4, r9
   118e0:	andeq	r6, r1, ip, lsr r9
   118e4:	andeq	r6, r1, ip, lsl #18
   118e8:	andeq	r6, r1, r0, ror #17
   118ec:	mov	fp, #0
   118f0:	mov	lr, #0
   118f4:	pop	{r1}		; (ldr r1, [sp], #4)
   118f8:	mov	r2, sp
   118fc:	push	{r2}		; (str r2, [sp, #-4]!)
   11900:	push	{r0}		; (str r0, [sp, #-4]!)
   11904:	ldr	ip, [pc, #16]	; 1191c <__assert_fail@plt+0x68c>
   11908:	push	{ip}		; (str ip, [sp, #-4]!)
   1190c:	ldr	r0, [pc, #12]	; 11920 <__assert_fail@plt+0x690>
   11910:	ldr	r3, [pc, #12]	; 11924 <__assert_fail@plt+0x694>
   11914:	bl	110ec <__libc_start_main@plt>
   11918:	bl	11260 <abort@plt>
   1191c:	andeq	r6, r1, r8, lsl r1
   11920:	muleq	r1, ip, r2
   11924:	strheq	r6, [r1], -r8
   11928:	ldr	r3, [pc, #20]	; 11944 <__assert_fail@plt+0x6b4>
   1192c:	ldr	r2, [pc, #20]	; 11948 <__assert_fail@plt+0x6b8>
   11930:	add	r3, pc, r3
   11934:	ldr	r2, [r3, r2]
   11938:	cmp	r2, #0
   1193c:	bxeq	lr
   11940:	b	11104 <__gmon_start__@plt>
   11944:	andeq	r6, r1, r8, asr #13
   11948:	andeq	r0, r0, r4, lsl r1
   1194c:	ldr	r0, [pc, #24]	; 1196c <__assert_fail@plt+0x6dc>
   11950:	ldr	r3, [pc, #24]	; 11970 <__assert_fail@plt+0x6e0>
   11954:	cmp	r3, r0
   11958:	bxeq	lr
   1195c:	ldr	r3, [pc, #16]	; 11974 <__assert_fail@plt+0x6e4>
   11960:	cmp	r3, #0
   11964:	bxeq	lr
   11968:	bx	r3
   1196c:	andeq	r8, r2, r8, ror #2
   11970:	andeq	r8, r2, r8, ror #2
   11974:	andeq	r0, r0, r0
   11978:	ldr	r0, [pc, #36]	; 119a4 <__assert_fail@plt+0x714>
   1197c:	ldr	r1, [pc, #36]	; 119a8 <__assert_fail@plt+0x718>
   11980:	sub	r1, r1, r0
   11984:	asr	r1, r1, #2
   11988:	add	r1, r1, r1, lsr #31
   1198c:	asrs	r1, r1, #1
   11990:	bxeq	lr
   11994:	ldr	r3, [pc, #16]	; 119ac <__assert_fail@plt+0x71c>
   11998:	cmp	r3, #0
   1199c:	bxeq	lr
   119a0:	bx	r3
   119a4:	andeq	r8, r2, r8, ror #2
   119a8:	andeq	r8, r2, r8, ror #2
   119ac:	andeq	r0, r0, r0
   119b0:	push	{r4, lr}
   119b4:	ldr	r4, [pc, #24]	; 119d4 <__assert_fail@plt+0x744>
   119b8:	ldrb	r3, [r4]
   119bc:	cmp	r3, #0
   119c0:	popne	{r4, pc}
   119c4:	bl	1194c <__assert_fail@plt+0x6bc>
   119c8:	mov	r3, #1
   119cc:	strb	r3, [r4]
   119d0:	pop	{r4, pc}
   119d4:	andeq	r8, r2, r4, lsl #3
   119d8:	b	11978 <__assert_fail@plt+0x6e8>
   119dc:	ldr	r3, [pc, #44]	; 11a10 <__assert_fail@plt+0x780>
   119e0:	ldrb	r3, [r3]
   119e4:	cmp	r3, #0
   119e8:	bne	119f0 <__assert_fail@plt+0x760>
   119ec:	b	11e24 <__assert_fail@plt+0xb94>
   119f0:	ldr	r3, [pc, #28]	; 11a14 <__assert_fail@plt+0x784>
   119f4:	push	{r4, lr}
   119f8:	ldr	r0, [r3]
   119fc:	bl	11d90 <__assert_fail@plt+0xb00>
   11a00:	cmp	r0, #0
   11a04:	popeq	{r4, pc}
   11a08:	mov	r0, #1
   11a0c:	bl	10ff0 <_exit@plt>
   11a10:	andeq	r8, r2, r5, lsl #3
   11a14:	andeq	r8, r2, r8, ror r1
   11a18:	ldr	r3, [pc, #780]	; 11d2c <__assert_fail@plt+0xa9c>
   11a1c:	push	{r7, lr}
   11a20:	sub	sp, sp, #64	; 0x40
   11a24:	ldr	r3, [r3]
   11a28:	subs	r4, r0, #0
   11a2c:	str	r3, [sp, #60]	; 0x3c
   11a30:	beq	11a6c <__assert_fail@plt+0x7dc>
   11a34:	ldr	r3, [pc, #756]	; 11d30 <__assert_fail@plt+0xaa0>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #752]	; 11d34 <__assert_fail@plt+0xaa4>
   11a40:	mov	r0, #0
   11a44:	ldr	r5, [r3]
   11a48:	bl	1102c <dcgettext@plt>
   11a4c:	ldr	r3, [pc, #740]	; 11d38 <__assert_fail@plt+0xaa8>
   11a50:	mov	r1, #1
   11a54:	ldr	r3, [r3]
   11a58:	mov	r2, r0
   11a5c:	mov	r0, r5
   11a60:	bl	111b8 <__fprintf_chk@plt>
   11a64:	mov	r0, r4
   11a68:	bl	11140 <exit@plt>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #708]	; 11d3c <__assert_fail@plt+0xaac>
   11a74:	bl	1102c <dcgettext@plt>
   11a78:	ldr	r3, [pc, #696]	; 11d38 <__assert_fail@plt+0xaa8>
   11a7c:	ldr	r5, [pc, #700]	; 11d40 <__assert_fail@plt+0xab0>
   11a80:	ldr	r2, [r3]
   11a84:	mov	r1, r0
   11a88:	mov	r0, #1
   11a8c:	bl	111a0 <__printf_chk@plt>
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #680]	; 11d44 <__assert_fail@plt+0xab4>
   11a98:	mov	r0, r4
   11a9c:	bl	1102c <dcgettext@plt>
   11aa0:	ldr	r1, [r5]
   11aa4:	bl	10f9c <fputs_unlocked@plt>
   11aa8:	mov	r2, #5
   11aac:	ldr	r1, [pc, #660]	; 11d48 <__assert_fail@plt+0xab8>
   11ab0:	mov	r0, r4
   11ab4:	bl	1102c <dcgettext@plt>
   11ab8:	ldr	r1, [r5]
   11abc:	bl	10f9c <fputs_unlocked@plt>
   11ac0:	ldr	r1, [r5]
   11ac4:	mov	r0, #10
   11ac8:	bl	11020 <fputc_unlocked@plt>
   11acc:	mov	r2, #5
   11ad0:	ldr	r1, [pc, #628]	; 11d4c <__assert_fail@plt+0xabc>
   11ad4:	mov	r0, r4
   11ad8:	bl	1102c <dcgettext@plt>
   11adc:	ldr	r1, [r5]
   11ae0:	bl	10f9c <fputs_unlocked@plt>
   11ae4:	mov	r2, #5
   11ae8:	ldr	r1, [pc, #608]	; 11d50 <__assert_fail@plt+0xac0>
   11aec:	mov	r0, r4
   11af0:	bl	1102c <dcgettext@plt>
   11af4:	ldr	r1, [r5]
   11af8:	bl	10f9c <fputs_unlocked@plt>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #588]	; 11d54 <__assert_fail@plt+0xac4>
   11b04:	mov	r0, r4
   11b08:	bl	1102c <dcgettext@plt>
   11b0c:	ldr	r1, [r5]
   11b10:	bl	10f9c <fputs_unlocked@plt>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #568]	; 11d58 <__assert_fail@plt+0xac8>
   11b1c:	mov	r0, r4
   11b20:	bl	1102c <dcgettext@plt>
   11b24:	ldr	r1, [r5]
   11b28:	bl	10f9c <fputs_unlocked@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #548]	; 11d5c <__assert_fail@plt+0xacc>
   11b34:	mov	r0, r4
   11b38:	bl	1102c <dcgettext@plt>
   11b3c:	ldr	r1, [r5]
   11b40:	bl	10f9c <fputs_unlocked@plt>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #528]	; 11d60 <__assert_fail@plt+0xad0>
   11b4c:	mov	r0, r4
   11b50:	bl	1102c <dcgettext@plt>
   11b54:	ldr	r1, [r5]
   11b58:	bl	10f9c <fputs_unlocked@plt>
   11b5c:	ldr	lr, [pc, #512]	; 11d64 <__assert_fail@plt+0xad4>
   11b60:	add	ip, sp, #4
   11b64:	ldm	lr!, {r0, r1, r2, r3}
   11b68:	stmia	ip!, {r0, r1, r2, r3}
   11b6c:	ldm	lr!, {r0, r1, r2, r3}
   11b70:	ldr	r6, [sp, #4]
   11b74:	stmia	ip!, {r0, r1, r2, r3}
   11b78:	cmp	r6, #0
   11b7c:	ldm	lr!, {r0, r1, r2, r3}
   11b80:	addeq	r5, sp, #4
   11b84:	stmia	ip!, {r0, r1, r2, r3}
   11b88:	ldm	lr, {r0, r1}
   11b8c:	stm	ip, {r0, r1}
   11b90:	beq	11bc0 <__assert_fail@plt+0x930>
   11b94:	ldr	r7, [pc, #460]	; 11d68 <__assert_fail@plt+0xad8>
   11b98:	add	r5, sp, #4
   11b9c:	b	11bac <__assert_fail@plt+0x91c>
   11ba0:	ldr	r6, [r5, #8]!
   11ba4:	cmp	r6, #0
   11ba8:	beq	11bc0 <__assert_fail@plt+0x930>
   11bac:	mov	r1, r6
   11bb0:	mov	r0, r7
   11bb4:	bl	10fb4 <strcmp@plt>
   11bb8:	cmp	r0, #0
   11bbc:	bne	11ba0 <__assert_fail@plt+0x910>
   11bc0:	ldr	r5, [r5, #4]
   11bc4:	mov	r2, #5
   11bc8:	cmp	r5, #0
   11bcc:	ldr	r1, [pc, #408]	; 11d6c <__assert_fail@plt+0xadc>
   11bd0:	beq	11c78 <__assert_fail@plt+0x9e8>
   11bd4:	mov	r0, #0
   11bd8:	bl	1102c <dcgettext@plt>
   11bdc:	ldr	r3, [pc, #396]	; 11d70 <__assert_fail@plt+0xae0>
   11be0:	ldr	r2, [pc, #396]	; 11d74 <__assert_fail@plt+0xae4>
   11be4:	mov	r1, r0
   11be8:	mov	r0, #1
   11bec:	bl	111a0 <__printf_chk@plt>
   11bf0:	mov	r1, #0
   11bf4:	mov	r0, #5
   11bf8:	bl	111e8 <setlocale@plt>
   11bfc:	cmp	r0, #0
   11c00:	ldreq	r6, [pc, #352]	; 11d68 <__assert_fail@plt+0xad8>
   11c04:	beq	11c20 <__assert_fail@plt+0x990>
   11c08:	mov	r2, #3
   11c0c:	ldr	r1, [pc, #356]	; 11d78 <__assert_fail@plt+0xae8>
   11c10:	bl	11254 <strncmp@plt>
   11c14:	ldr	r6, [pc, #332]	; 11d68 <__assert_fail@plt+0xad8>
   11c18:	cmp	r0, #0
   11c1c:	bne	11d08 <__assert_fail@plt+0xa78>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #336]	; 11d7c <__assert_fail@plt+0xaec>
   11c28:	mov	r0, #0
   11c2c:	bl	1102c <dcgettext@plt>
   11c30:	ldr	r3, [pc, #304]	; 11d68 <__assert_fail@plt+0xad8>
   11c34:	ldr	r2, [pc, #308]	; 11d70 <__assert_fail@plt+0xae0>
   11c38:	mov	r1, r0
   11c3c:	mov	r0, #1
   11c40:	bl	111a0 <__printf_chk@plt>
   11c44:	mov	r2, #5
   11c48:	ldr	r1, [pc, #304]	; 11d80 <__assert_fail@plt+0xaf0>
   11c4c:	mov	r0, #0
   11c50:	bl	1102c <dcgettext@plt>
   11c54:	ldr	r2, [pc, #296]	; 11d84 <__assert_fail@plt+0xaf4>
   11c58:	cmp	r5, r6
   11c5c:	ldr	r3, [pc, #292]	; 11d88 <__assert_fail@plt+0xaf8>
   11c60:	movne	r3, r2
   11c64:	mov	r1, r0
   11c68:	mov	r2, r5
   11c6c:	mov	r0, #1
   11c70:	bl	111a0 <__printf_chk@plt>
   11c74:	b	11a64 <__assert_fail@plt+0x7d4>
   11c78:	mov	r0, r5
   11c7c:	bl	1102c <dcgettext@plt>
   11c80:	ldr	r3, [pc, #232]	; 11d70 <__assert_fail@plt+0xae0>
   11c84:	ldr	r2, [pc, #232]	; 11d74 <__assert_fail@plt+0xae4>
   11c88:	mov	r1, r0
   11c8c:	mov	r0, #1
   11c90:	bl	111a0 <__printf_chk@plt>
   11c94:	mov	r1, r5
   11c98:	mov	r0, #5
   11c9c:	bl	111e8 <setlocale@plt>
   11ca0:	cmp	r0, #0
   11ca4:	beq	11cbc <__assert_fail@plt+0xa2c>
   11ca8:	mov	r2, #3
   11cac:	ldr	r1, [pc, #196]	; 11d78 <__assert_fail@plt+0xae8>
   11cb0:	bl	11254 <strncmp@plt>
   11cb4:	cmp	r0, #0
   11cb8:	bne	11d00 <__assert_fail@plt+0xa70>
   11cbc:	mov	r2, #5
   11cc0:	ldr	r1, [pc, #180]	; 11d7c <__assert_fail@plt+0xaec>
   11cc4:	mov	r0, #0
   11cc8:	bl	1102c <dcgettext@plt>
   11ccc:	ldr	r3, [pc, #148]	; 11d68 <__assert_fail@plt+0xad8>
   11cd0:	ldr	r2, [pc, #152]	; 11d70 <__assert_fail@plt+0xae0>
   11cd4:	mov	r5, r3
   11cd8:	mov	r1, r0
   11cdc:	mov	r0, #1
   11ce0:	bl	111a0 <__printf_chk@plt>
   11ce4:	ldr	r1, [pc, #148]	; 11d80 <__assert_fail@plt+0xaf0>
   11ce8:	mov	r2, #5
   11cec:	mov	r0, #0
   11cf0:	bl	1102c <dcgettext@plt>
   11cf4:	ldr	r3, [pc, #140]	; 11d88 <__assert_fail@plt+0xaf8>
   11cf8:	mov	r1, r0
   11cfc:	b	11c68 <__assert_fail@plt+0x9d8>
   11d00:	ldr	r6, [pc, #96]	; 11d68 <__assert_fail@plt+0xad8>
   11d04:	mov	r5, r6
   11d08:	mov	r2, #5
   11d0c:	ldr	r1, [pc, #120]	; 11d8c <__assert_fail@plt+0xafc>
   11d10:	mov	r0, #0
   11d14:	bl	1102c <dcgettext@plt>
   11d18:	ldr	r2, [pc, #72]	; 11d68 <__assert_fail@plt+0xad8>
   11d1c:	mov	r1, r0
   11d20:	mov	r0, #1
   11d24:	bl	111a0 <__printf_chk@plt>
   11d28:	b	11c20 <__assert_fail@plt+0x990>
   11d2c:	andeq	r7, r2, r8, lsl #30
   11d30:	andeq	r8, r2, r8, ror r1
   11d34:	andeq	r6, r1, r0, lsl #4
   11d38:	muleq	r2, r0, r1
   11d3c:	andeq	r6, r1, r8, lsr #4
   11d40:	andeq	r8, r2, ip, ror r1
   11d44:	andeq	r6, r1, ip, asr #4
   11d48:	andeq	r6, r1, r0, lsr #6
   11d4c:	andeq	r6, r1, ip, ror #6
   11d50:	andeq	r6, r1, r8, lsr r4
   11d54:	ldrdeq	r6, [r1], -r4
   11d58:	andeq	r6, r1, r0, asr #12
   11d5c:	andeq	r6, r1, r4, lsr #14
   11d60:	andeq	r6, r1, r4, asr r7
   11d64:	andeq	r6, r1, r0, asr #2
   11d68:	strdeq	r6, [r1], -r8
   11d6c:	andeq	r6, r1, ip, lsl #15
   11d70:	andeq	r6, r1, r4, lsr #15
   11d74:	andeq	r6, r1, ip, asr #15
   11d78:	ldrdeq	r6, [r1], -ip
   11d7c:	andeq	r6, r1, r8, lsr #16
   11d80:	andeq	r6, r1, r8, asr #16
   11d84:	andeq	r6, r1, ip, ror pc
   11d88:	andeq	r6, r1, r8, lsr sl
   11d8c:	andeq	r6, r1, r0, ror #15
   11d90:	push	{r4, r5, r6, lr}
   11d94:	mov	r4, r0
   11d98:	bl	11098 <__fpending@plt>
   11d9c:	ldr	r5, [r4]
   11da0:	and	r5, r5, #32
   11da4:	mov	r6, r0
   11da8:	mov	r0, r4
   11dac:	bl	14db0 <__assert_fail@plt+0x3b20>
   11db0:	cmp	r5, #0
   11db4:	mov	r4, r0
   11db8:	bne	11de4 <__assert_fail@plt+0xb54>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11ddc <__assert_fail@plt+0xb4c>
   11dc4:	cmp	r6, #0
   11dc8:	bne	11dfc <__assert_fail@plt+0xb6c>
   11dcc:	bl	11158 <__errno_location@plt>
   11dd0:	ldr	r4, [r0]
   11dd4:	subs	r4, r4, #9
   11dd8:	mvnne	r4, #0
   11ddc:	mov	r0, r4
   11de0:	pop	{r4, r5, r6, pc}
   11de4:	cmp	r0, #0
   11de8:	bne	11dfc <__assert_fail@plt+0xb6c>
   11dec:	bl	11158 <__errno_location@plt>
   11df0:	str	r4, [r0]
   11df4:	mvn	r4, #0
   11df8:	b	11ddc <__assert_fail@plt+0xb4c>
   11dfc:	mvn	r4, #0
   11e00:	b	11ddc <__assert_fail@plt+0xb4c>
   11e04:	ldr	r3, [pc, #4]	; 11e10 <__assert_fail@plt+0xb80>
   11e08:	str	r0, [r3]
   11e0c:	bx	lr
   11e10:	andeq	r8, r2, r8, lsl #3
   11e14:	ldr	r3, [pc, #4]	; 11e20 <__assert_fail@plt+0xb90>
   11e18:	strb	r0, [r3, #4]
   11e1c:	bx	lr
   11e20:	andeq	r8, r2, r8, lsl #3
   11e24:	ldr	r3, [pc, #180]	; 11ee0 <__assert_fail@plt+0xc50>
   11e28:	push	{r4, r5, r6, lr}
   11e2c:	sub	sp, sp, #8
   11e30:	ldr	r0, [r3]
   11e34:	bl	11d90 <__assert_fail@plt+0xb00>
   11e38:	cmp	r0, #0
   11e3c:	beq	11e64 <__assert_fail@plt+0xbd4>
   11e40:	bl	11158 <__errno_location@plt>
   11e44:	ldr	r5, [pc, #152]	; 11ee4 <__assert_fail@plt+0xc54>
   11e48:	ldrb	r3, [r5, #4]
   11e4c:	cmp	r3, #0
   11e50:	mov	r4, r0
   11e54:	beq	11e80 <__assert_fail@plt+0xbf0>
   11e58:	ldr	r3, [r0]
   11e5c:	cmp	r3, #32
   11e60:	bne	11e80 <__assert_fail@plt+0xbf0>
   11e64:	ldr	r3, [pc, #124]	; 11ee8 <__assert_fail@plt+0xc58>
   11e68:	ldr	r0, [r3]
   11e6c:	bl	11d90 <__assert_fail@plt+0xb00>
   11e70:	cmp	r0, #0
   11e74:	bne	11ec0 <__assert_fail@plt+0xc30>
   11e78:	add	sp, sp, #8
   11e7c:	pop	{r4, r5, r6, pc}
   11e80:	mov	r2, #5
   11e84:	ldr	r1, [pc, #96]	; 11eec <__assert_fail@plt+0xc5c>
   11e88:	mov	r0, #0
   11e8c:	bl	1102c <dcgettext@plt>
   11e90:	mov	r6, r0
   11e94:	ldr	r0, [r5]
   11e98:	cmp	r0, #0
   11e9c:	beq	11ecc <__assert_fail@plt+0xc3c>
   11ea0:	ldr	r4, [r4]
   11ea4:	bl	14104 <__assert_fail@plt+0x2e74>
   11ea8:	mov	r1, r4
   11eac:	str	r6, [sp]
   11eb0:	ldr	r2, [pc, #56]	; 11ef0 <__assert_fail@plt+0xc60>
   11eb4:	mov	r3, r0
   11eb8:	mov	r0, #0
   11ebc:	bl	110b0 <error@plt>
   11ec0:	ldr	r3, [pc, #44]	; 11ef4 <__assert_fail@plt+0xc64>
   11ec4:	ldr	r0, [r3]
   11ec8:	bl	10ff0 <_exit@plt>
   11ecc:	mov	r3, r6
   11ed0:	ldr	r1, [r4]
   11ed4:	ldr	r2, [pc, #28]	; 11ef8 <__assert_fail@plt+0xc68>
   11ed8:	bl	110b0 <error@plt>
   11edc:	b	11ec0 <__assert_fail@plt+0xc30>
   11ee0:	andeq	r8, r2, ip, ror r1
   11ee4:	andeq	r8, r2, r8, lsl #3
   11ee8:	andeq	r8, r2, r8, ror r1
   11eec:	andeq	r6, r1, r4, lsr #20
   11ef0:	andeq	r6, r1, r0, ror #21
   11ef4:	andeq	r8, r2, r4, lsr #2
   11ef8:	andeq	r6, r1, r4, ror #21
   11efc:	ldrb	r3, [r0]
   11f00:	cmp	r3, #47	; 0x2f
   11f04:	bne	11f14 <__assert_fail@plt+0xc84>
   11f08:	ldrb	r3, [r0, #1]!
   11f0c:	cmp	r3, #47	; 0x2f
   11f10:	beq	11f08 <__assert_fail@plt+0xc78>
   11f14:	cmp	r3, #0
   11f18:	bxeq	lr
   11f1c:	mov	r2, r0
   11f20:	mov	r1, #0
   11f24:	cmp	r3, #47	; 0x2f
   11f28:	moveq	r1, #1
   11f2c:	beq	11f3c <__assert_fail@plt+0xcac>
   11f30:	cmp	r1, #0
   11f34:	movne	r0, r2
   11f38:	movne	r1, #0
   11f3c:	ldrb	r3, [r2, #1]!
   11f40:	cmp	r3, #0
   11f44:	bne	11f24 <__assert_fail@plt+0xc94>
   11f48:	bx	lr
   11f4c:	push	{r4, lr}
   11f50:	mov	r4, r0
   11f54:	bl	1114c <strlen@plt>
   11f58:	cmp	r0, #1
   11f5c:	popls	{r4, pc}
   11f60:	add	r2, r4, r0
   11f64:	mov	r3, r0
   11f68:	ldrb	r2, [r2, #-1]
   11f6c:	cmp	r2, #47	; 0x2f
   11f70:	subeq	r3, r0, #2
   11f74:	addeq	r3, r4, r3
   11f78:	rsbeq	r1, r4, #1
   11f7c:	popne	{r4, pc}
   11f80:	cmp	r3, r4
   11f84:	add	r0, r1, r3
   11f88:	popeq	{r4, pc}
   11f8c:	ldrb	r2, [r3], #-1
   11f90:	cmp	r2, #47	; 0x2f
   11f94:	popne	{r4, pc}
   11f98:	b	11f80 <__assert_fail@plt+0xcf0>
   11f9c:	push	{r4, lr}
   11fa0:	bl	11fb0 <__assert_fail@plt+0xd20>
   11fa4:	cmp	r0, #0
   11fa8:	popne	{r4, pc}
   11fac:	bl	14d70 <__assert_fail@plt+0x3ae0>
   11fb0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb4:	mov	r6, r1
   11fb8:	mov	r9, r2
   11fbc:	mov	r7, r0
   11fc0:	bl	11efc <__assert_fail@plt+0xc6c>
   11fc4:	mov	r4, r0
   11fc8:	bl	11f4c <__assert_fail@plt+0xcbc>
   11fcc:	sub	r4, r4, r7
   11fd0:	mov	r5, r0
   11fd4:	mov	r0, r6
   11fd8:	bl	1114c <strlen@plt>
   11fdc:	cmp	r5, #0
   11fe0:	add	r4, r4, r5
   11fe4:	mov	r8, r0
   11fe8:	beq	12068 <__assert_fail@plt+0xdd8>
   11fec:	add	r3, r7, r4
   11ff0:	ldrb	r3, [r3, #-1]
   11ff4:	cmp	r3, #47	; 0x2f
   11ff8:	beq	1205c <__assert_fail@plt+0xdcc>
   11ffc:	ldrb	r3, [r6]
   12000:	cmp	r3, #47	; 0x2f
   12004:	beq	1205c <__assert_fail@plt+0xdcc>
   12008:	mov	r5, #1
   1200c:	mov	sl, #47	; 0x2f
   12010:	add	r0, r8, #1
   12014:	add	r0, r0, r4
   12018:	add	r0, r0, r5
   1201c:	bl	110e0 <malloc@plt>
   12020:	subs	fp, r0, #0
   12024:	beq	12054 <__assert_fail@plt+0xdc4>
   12028:	mov	r2, r4
   1202c:	mov	r1, r7
   12030:	bl	11110 <mempcpy@plt>
   12034:	cmp	r9, #0
   12038:	mov	r2, r8
   1203c:	mov	r1, r6
   12040:	strb	sl, [r0], r5
   12044:	strne	r0, [r9]
   12048:	bl	11110 <mempcpy@plt>
   1204c:	mov	r3, #0
   12050:	strb	r3, [r0]
   12054:	mov	r0, fp
   12058:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1205c:	mov	r5, #0
   12060:	mov	sl, r5
   12064:	b	12010 <__assert_fail@plt+0xd80>
   12068:	ldrb	r3, [r6]
   1206c:	cmp	r3, #47	; 0x2f
   12070:	moveq	r5, #1
   12074:	movne	sl, #0
   12078:	moveq	sl, #46	; 0x2e
   1207c:	b	12010 <__assert_fail@plt+0xd80>
   12080:	push	{r4, r5, r6, lr}
   12084:	subs	r4, r0, #0
   12088:	beq	120fc <__assert_fail@plt+0xe6c>
   1208c:	mov	r1, #47	; 0x2f
   12090:	bl	11200 <strrchr@plt>
   12094:	subs	r5, r0, #0
   12098:	beq	120e8 <__assert_fail@plt+0xe58>
   1209c:	add	r6, r5, #1
   120a0:	sub	r3, r6, r4
   120a4:	cmp	r3, #6
   120a8:	ble	120e8 <__assert_fail@plt+0xe58>
   120ac:	mov	r2, #7
   120b0:	ldr	r1, [pc, #96]	; 12118 <__assert_fail@plt+0xe88>
   120b4:	sub	r0, r5, #6
   120b8:	bl	11254 <strncmp@plt>
   120bc:	cmp	r0, #0
   120c0:	bne	120e8 <__assert_fail@plt+0xe58>
   120c4:	mov	r2, #3
   120c8:	ldr	r1, [pc, #76]	; 1211c <__assert_fail@plt+0xe8c>
   120cc:	mov	r0, r6
   120d0:	bl	11254 <strncmp@plt>
   120d4:	cmp	r0, #0
   120d8:	movne	r4, r6
   120dc:	ldreq	r3, [pc, #60]	; 12120 <__assert_fail@plt+0xe90>
   120e0:	addeq	r4, r5, #4
   120e4:	streq	r4, [r3]
   120e8:	ldr	r2, [pc, #52]	; 12124 <__assert_fail@plt+0xe94>
   120ec:	ldr	r3, [pc, #52]	; 12128 <__assert_fail@plt+0xe98>
   120f0:	str	r4, [r2]
   120f4:	str	r4, [r3]
   120f8:	pop	{r4, r5, r6, pc}
   120fc:	ldr	r3, [pc, #40]	; 1212c <__assert_fail@plt+0xe9c>
   12100:	mov	r2, #55	; 0x37
   12104:	mov	r1, #1
   12108:	ldr	r3, [r3]
   1210c:	ldr	r0, [pc, #28]	; 12130 <__assert_fail@plt+0xea0>
   12110:	bl	11068 <fwrite@plt>
   12114:	bl	11260 <abort@plt>
   12118:	andeq	r6, r1, r0, lsr #22
   1211c:	andeq	r6, r1, r8, lsr #22
   12120:	andeq	r8, r2, r8, ror #2
   12124:	muleq	r2, r0, r1
   12128:	andeq	r8, r2, ip, ror #2
   1212c:	andeq	r8, r2, r8, ror r1
   12130:	andeq	r6, r1, r8, ror #21
   12134:	push	{r4, lr}
   12138:	mov	r2, #48	; 0x30
   1213c:	mov	r4, r1
   12140:	mov	r1, #0
   12144:	bl	11194 <memset@plt>
   12148:	cmp	r4, #10
   1214c:	beq	12158 <__assert_fail@plt+0xec8>
   12150:	str	r4, [r0]
   12154:	pop	{r4, pc}
   12158:	bl	11260 <abort@plt>
   1215c:	push	{r4, r5, r6, lr}
   12160:	mov	r2, #5
   12164:	mov	r5, r0
   12168:	mov	r6, r1
   1216c:	mov	r1, r0
   12170:	mov	r0, #0
   12174:	bl	1102c <dcgettext@plt>
   12178:	cmp	r5, r0
   1217c:	mov	r4, r0
   12180:	beq	1218c <__assert_fail@plt+0xefc>
   12184:	mov	r0, r4
   12188:	pop	{r4, r5, r6, pc}
   1218c:	bl	1501c <__assert_fail@plt+0x3d8c>
   12190:	ldrb	r3, [r0]
   12194:	bic	r3, r3, #32
   12198:	cmp	r3, #85	; 0x55
   1219c:	bne	121fc <__assert_fail@plt+0xf6c>
   121a0:	ldrb	r3, [r0, #1]
   121a4:	bic	r3, r3, #32
   121a8:	cmp	r3, #84	; 0x54
   121ac:	bne	12274 <__assert_fail@plt+0xfe4>
   121b0:	ldrb	r3, [r0, #2]
   121b4:	bic	r3, r3, #32
   121b8:	cmp	r3, #70	; 0x46
   121bc:	bne	12274 <__assert_fail@plt+0xfe4>
   121c0:	ldrb	r3, [r0, #3]
   121c4:	cmp	r3, #45	; 0x2d
   121c8:	bne	12274 <__assert_fail@plt+0xfe4>
   121cc:	ldrb	r3, [r0, #4]
   121d0:	cmp	r3, #56	; 0x38
   121d4:	bne	12274 <__assert_fail@plt+0xfe4>
   121d8:	ldrb	r3, [r0, #5]
   121dc:	cmp	r3, #0
   121e0:	bne	12274 <__assert_fail@plt+0xfe4>
   121e4:	ldrb	r2, [r4]
   121e8:	ldr	r3, [pc, #156]	; 1228c <__assert_fail@plt+0xffc>
   121ec:	ldr	r4, [pc, #156]	; 12290 <__assert_fail@plt+0x1000>
   121f0:	cmp	r2, #96	; 0x60
   121f4:	movne	r4, r3
   121f8:	b	12184 <__assert_fail@plt+0xef4>
   121fc:	cmp	r3, #71	; 0x47
   12200:	bne	12274 <__assert_fail@plt+0xfe4>
   12204:	ldrb	r3, [r0, #1]
   12208:	bic	r3, r3, #32
   1220c:	cmp	r3, #66	; 0x42
   12210:	bne	12274 <__assert_fail@plt+0xfe4>
   12214:	ldrb	r3, [r0, #2]
   12218:	cmp	r3, #49	; 0x31
   1221c:	bne	12274 <__assert_fail@plt+0xfe4>
   12220:	ldrb	r3, [r0, #3]
   12224:	cmp	r3, #56	; 0x38
   12228:	bne	12274 <__assert_fail@plt+0xfe4>
   1222c:	ldrb	r3, [r0, #4]
   12230:	cmp	r3, #48	; 0x30
   12234:	bne	12274 <__assert_fail@plt+0xfe4>
   12238:	ldrb	r3, [r0, #5]
   1223c:	cmp	r3, #51	; 0x33
   12240:	bne	12274 <__assert_fail@plt+0xfe4>
   12244:	ldrb	r3, [r0, #6]
   12248:	cmp	r3, #48	; 0x30
   1224c:	bne	12274 <__assert_fail@plt+0xfe4>
   12250:	ldrb	r3, [r0, #7]
   12254:	cmp	r3, #0
   12258:	bne	12274 <__assert_fail@plt+0xfe4>
   1225c:	ldrb	r2, [r4]
   12260:	ldr	r3, [pc, #44]	; 12294 <__assert_fail@plt+0x1004>
   12264:	ldr	r4, [pc, #44]	; 12298 <__assert_fail@plt+0x1008>
   12268:	cmp	r2, #96	; 0x60
   1226c:	movne	r4, r3
   12270:	b	12184 <__assert_fail@plt+0xef4>
   12274:	ldr	r3, [pc, #32]	; 1229c <__assert_fail@plt+0x100c>
   12278:	ldr	r4, [pc, #32]	; 122a0 <__assert_fail@plt+0x1010>
   1227c:	cmp	r6, #9
   12280:	movne	r4, r3
   12284:	mov	r0, r4
   12288:	pop	{r4, r5, r6, pc}
   1228c:	andeq	r6, r1, r4, lsl #23
   12290:	muleq	r1, r0, fp
   12294:	andeq	r6, r1, r8, lsl #23
   12298:	andeq	r6, r1, ip, lsl #23
   1229c:	muleq	r1, r4, fp
   122a0:	andeq	r6, r1, r0, lsl #23
   122a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a8:	sub	sp, sp, #124	; 0x7c
   122ac:	ldr	ip, [pc, #3576]	; 130ac <__assert_fail@plt+0x1e1c>
   122b0:	str	r3, [sp, #24]
   122b4:	ldr	r3, [sp, #168]	; 0xa8
   122b8:	ldr	ip, [ip]
   122bc:	str	r3, [sp, #56]	; 0x38
   122c0:	ldr	r3, [sp, #172]	; 0xac
   122c4:	ldr	r8, [sp, #160]	; 0xa0
   122c8:	str	r3, [sp, #80]	; 0x50
   122cc:	ldr	r3, [sp, #176]	; 0xb0
   122d0:	mov	fp, r0
   122d4:	str	r3, [sp, #76]	; 0x4c
   122d8:	mov	sl, r1
   122dc:	str	r2, [sp, #36]	; 0x24
   122e0:	str	ip, [sp, #116]	; 0x74
   122e4:	bl	11080 <__ctype_get_mb_cur_max@plt>
   122e8:	ldr	r3, [sp, #164]	; 0xa4
   122ec:	ands	r4, r3, #2
   122f0:	movne	r3, #1
   122f4:	moveq	r3, #0
   122f8:	str	r3, [sp, #32]
   122fc:	str	r0, [sp, #64]	; 0x40
   12300:	cmp	r8, #10
   12304:	ldrls	pc, [pc, r8, lsl #2]
   12308:	b	13ab8 <__assert_fail@plt+0x2828>
   1230c:	andeq	r2, r1, r0, lsl #14
   12310:	muleq	r1, r8, r7
   12314:	muleq	r1, r8, sp
   12318:			; <UNDEFINED> instruction: 0x000127b8
   1231c:	andeq	r2, r1, ip, ror #12
   12320:			; <UNDEFINED> instruction: 0x000126b4
   12324:	andeq	r2, r1, r0, lsr r7
   12328:	andeq	r2, r1, r8, ror #14
   1232c:	andeq	r2, r1, r8, lsr r3
   12330:	andeq	r2, r1, r8, lsr r3
   12334:	andeq	r2, r1, r8, lsr r3
   12338:	cmp	r8, #10
   1233c:	beq	12360 <__assert_fail@plt+0x10d0>
   12340:	mov	r1, r8
   12344:	ldr	r0, [pc, #3428]	; 130b0 <__assert_fail@plt+0x1e20>
   12348:	bl	1215c <__assert_fail@plt+0xecc>
   1234c:	mov	r1, r8
   12350:	str	r0, [sp, #80]	; 0x50
   12354:	ldr	r0, [pc, #3420]	; 130b8 <__assert_fail@plt+0x1e28>
   12358:	bl	1215c <__assert_fail@plt+0xecc>
   1235c:	str	r0, [sp, #76]	; 0x4c
   12360:	cmp	r4, #0
   12364:	movne	r4, #0
   12368:	beq	13778 <__assert_fail@plt+0x24e8>
   1236c:	ldr	r7, [sp, #76]	; 0x4c
   12370:	mov	r5, #0
   12374:	mov	r6, #1
   12378:	mov	r0, r7
   1237c:	str	r6, [sp, #40]	; 0x28
   12380:	str	r5, [sp, #68]	; 0x44
   12384:	bl	1114c <strlen@plt>
   12388:	str	r6, [sp, #28]
   1238c:	str	r5, [sp, #44]	; 0x2c
   12390:	str	r5, [sp, #72]	; 0x48
   12394:	str	r7, [sp, #60]	; 0x3c
   12398:	str	r0, [sp, #52]	; 0x34
   1239c:	str	r8, [sp, #160]	; 0xa0
   123a0:	mov	r8, fp
   123a4:	ldr	fp, [sp, #160]	; 0xa0
   123a8:	mov	r9, #0
   123ac:	ldr	r3, [sp, #24]
   123b0:	cmn	r3, #1
   123b4:	beq	1291c <__assert_fail@plt+0x168c>
   123b8:	ldr	r3, [sp, #24]
   123bc:	subs	r6, r3, r9
   123c0:	movne	r6, #1
   123c4:	cmp	r6, #0
   123c8:	beq	12934 <__assert_fail@plt+0x16a4>
   123cc:	ldr	r7, [sp, #28]
   123d0:	ldr	r0, [sp, #36]	; 0x24
   123d4:	cmp	fp, #2
   123d8:	moveq	r7, #0
   123dc:	andne	r7, r7, #1
   123e0:	add	r3, r0, r9
   123e4:	cmp	r7, #0
   123e8:	str	r3, [sp, #48]	; 0x30
   123ec:	beq	12dd8 <__assert_fail@plt+0x1b48>
   123f0:	ldr	r2, [sp, #52]	; 0x34
   123f4:	cmp	r2, #0
   123f8:	beq	130bc <__assert_fail@plt+0x1e2c>
   123fc:	ldr	r1, [sp, #24]
   12400:	cmp	r2, #1
   12404:	mov	r3, r2
   12408:	movls	r3, #0
   1240c:	movhi	r3, #1
   12410:	cmn	r1, #1
   12414:	movne	r3, #0
   12418:	cmp	r3, #0
   1241c:	add	r5, r9, r2
   12420:	beq	1242c <__assert_fail@plt+0x119c>
   12424:	bl	1114c <strlen@plt>
   12428:	str	r0, [sp, #24]
   1242c:	ldr	r3, [sp, #24]
   12430:	cmp	r5, r3
   12434:	bhi	130bc <__assert_fail@plt+0x1e2c>
   12438:	ldr	r2, [sp, #52]	; 0x34
   1243c:	ldr	r1, [sp, #60]	; 0x3c
   12440:	ldr	r0, [sp, #48]	; 0x30
   12444:	bl	11014 <memcmp@plt>
   12448:	cmp	r0, #0
   1244c:	bne	130bc <__assert_fail@plt+0x1e2c>
   12450:	ldr	r3, [sp, #32]
   12454:	cmp	r3, #0
   12458:	bne	13978 <__assert_fail@plt+0x26e8>
   1245c:	ldr	r3, [sp, #48]	; 0x30
   12460:	ldrb	r5, [r3]
   12464:	cmp	r5, #126	; 0x7e
   12468:	ldrls	pc, [pc, r5, lsl #2]
   1246c:	b	12d3c <__assert_fail@plt+0x1aac>
   12470:	andeq	r2, r1, r8, lsr #24
   12474:	andeq	r2, r1, ip, lsr sp
   12478:	andeq	r2, r1, ip, lsr sp
   1247c:	andeq	r2, r1, ip, lsr sp
   12480:	andeq	r2, r1, ip, lsr sp
   12484:	andeq	r2, r1, ip, lsr sp
   12488:	andeq	r2, r1, ip, lsr sp
   1248c:	strdeq	r2, [r1], -r4
   12490:	andeq	r2, r1, r4, ror #25
   12494:	andeq	r2, r1, r4, ror #23
   12498:	andeq	r2, r1, ip, lsr #23
   1249c:	andeq	r2, r1, r4, lsl #24
   124a0:	andeq	r2, r1, ip, ror #23
   124a4:	andeq	r2, r1, ip, lsl fp
   124a8:	andeq	r2, r1, ip, lsr sp
   124ac:	andeq	r2, r1, ip, lsr sp
   124b0:	andeq	r2, r1, ip, lsr sp
   124b4:	andeq	r2, r1, ip, lsr sp
   124b8:	andeq	r2, r1, ip, lsr sp
   124bc:	andeq	r2, r1, ip, lsr sp
   124c0:	andeq	r2, r1, ip, lsr sp
   124c4:	andeq	r2, r1, ip, lsr sp
   124c8:	andeq	r2, r1, ip, lsr sp
   124cc:	andeq	r2, r1, ip, lsr sp
   124d0:	andeq	r2, r1, ip, lsr sp
   124d4:	andeq	r2, r1, ip, lsr sp
   124d8:	andeq	r2, r1, ip, lsr sp
   124dc:	andeq	r2, r1, ip, lsr sp
   124e0:	andeq	r2, r1, ip, lsr sp
   124e4:	andeq	r2, r1, ip, lsr sp
   124e8:	andeq	r2, r1, ip, lsr sp
   124ec:	andeq	r2, r1, ip, lsr sp
   124f0:	strdeq	r2, [r1], -ip
   124f4:	andeq	r2, r1, r0, lsl ip
   124f8:	andeq	r2, r1, r0, lsl ip
   124fc:	andeq	r2, r1, r4, lsl sp
   12500:	andeq	r2, r1, r0, lsl ip
   12504:	andeq	r2, r1, r0, lsr sp
   12508:	andeq	r2, r1, r0, lsl ip
   1250c:	andeq	r2, r1, r0, asr sl
   12510:	andeq	r2, r1, r0, lsl ip
   12514:	andeq	r2, r1, r0, lsl ip
   12518:	andeq	r2, r1, r0, lsl ip
   1251c:	andeq	r2, r1, r0, lsr sp
   12520:	andeq	r2, r1, r0, lsr sp
   12524:	andeq	r2, r1, r0, lsr sp
   12528:	andeq	r2, r1, r0, lsr sp
   1252c:	andeq	r2, r1, r0, lsr sp
   12530:	andeq	r2, r1, r0, lsr sp
   12534:	andeq	r2, r1, r0, lsr sp
   12538:	andeq	r2, r1, r0, lsr sp
   1253c:	andeq	r2, r1, r0, lsr sp
   12540:	andeq	r2, r1, r0, lsr sp
   12544:	andeq	r2, r1, r0, lsr sp
   12548:	andeq	r2, r1, r0, lsr sp
   1254c:	andeq	r2, r1, r0, lsr sp
   12550:	andeq	r2, r1, r0, lsr sp
   12554:	andeq	r2, r1, r0, lsr sp
   12558:	andeq	r2, r1, r0, lsr sp
   1255c:	andeq	r2, r1, r0, lsl ip
   12560:	andeq	r2, r1, r0, lsl ip
   12564:	andeq	r2, r1, r0, lsl ip
   12568:	andeq	r2, r1, r0, lsl ip
   1256c:	andeq	r2, r1, r4, lsr #20
   12570:	andeq	r2, r1, ip, lsr sp
   12574:	andeq	r2, r1, r0, lsr sp
   12578:	andeq	r2, r1, r0, lsr sp
   1257c:	andeq	r2, r1, r0, lsr sp
   12580:	andeq	r2, r1, r0, lsr sp
   12584:	andeq	r2, r1, r0, lsr sp
   12588:	andeq	r2, r1, r0, lsr sp
   1258c:	andeq	r2, r1, r0, lsr sp
   12590:	andeq	r2, r1, r0, lsr sp
   12594:	andeq	r2, r1, r0, lsr sp
   12598:	andeq	r2, r1, r0, lsr sp
   1259c:	andeq	r2, r1, r0, lsr sp
   125a0:	andeq	r2, r1, r0, lsr sp
   125a4:	andeq	r2, r1, r0, lsr sp
   125a8:	andeq	r2, r1, r0, lsr sp
   125ac:	andeq	r2, r1, r0, lsr sp
   125b0:	andeq	r2, r1, r0, lsr sp
   125b4:	andeq	r2, r1, r0, lsr sp
   125b8:	andeq	r2, r1, r0, lsr sp
   125bc:	andeq	r2, r1, r0, lsr sp
   125c0:	andeq	r2, r1, r0, lsr sp
   125c4:	andeq	r2, r1, r0, lsr sp
   125c8:	andeq	r2, r1, r0, lsr sp
   125cc:	andeq	r2, r1, r0, lsr sp
   125d0:	andeq	r2, r1, r0, lsr sp
   125d4:	andeq	r2, r1, r0, lsr sp
   125d8:	andeq	r2, r1, r0, lsr sp
   125dc:	andeq	r2, r1, r0, lsl ip
   125e0:	ldrdeq	r2, [r1], -ip
   125e4:	andeq	r2, r1, r0, lsr sp
   125e8:	andeq	r2, r1, r0, lsl ip
   125ec:	andeq	r2, r1, r0, lsr sp
   125f0:	andeq	r2, r1, r0, lsl ip
   125f4:	andeq	r2, r1, r0, lsr sp
   125f8:	andeq	r2, r1, r0, lsr sp
   125fc:	andeq	r2, r1, r0, lsr sp
   12600:	andeq	r2, r1, r0, lsr sp
   12604:	andeq	r2, r1, r0, lsr sp
   12608:	andeq	r2, r1, r0, lsr sp
   1260c:	andeq	r2, r1, r0, lsr sp
   12610:	andeq	r2, r1, r0, lsr sp
   12614:	andeq	r2, r1, r0, lsr sp
   12618:	andeq	r2, r1, r0, lsr sp
   1261c:	andeq	r2, r1, r0, lsr sp
   12620:	andeq	r2, r1, r0, lsr sp
   12624:	andeq	r2, r1, r0, lsr sp
   12628:	andeq	r2, r1, r0, lsr sp
   1262c:	andeq	r2, r1, r0, lsr sp
   12630:	andeq	r2, r1, r0, lsr sp
   12634:	andeq	r2, r1, r0, lsr sp
   12638:	andeq	r2, r1, r0, lsr sp
   1263c:	andeq	r2, r1, r0, lsr sp
   12640:	andeq	r2, r1, r0, lsr sp
   12644:	andeq	r2, r1, r0, lsr sp
   12648:	andeq	r2, r1, r0, lsr sp
   1264c:	andeq	r2, r1, r0, lsr sp
   12650:	andeq	r2, r1, r0, lsr sp
   12654:	andeq	r2, r1, r0, lsr sp
   12658:	andeq	r2, r1, r0, lsr sp
   1265c:	strdeq	r2, [r1], -r4
   12660:	andeq	r2, r1, r0, lsl ip
   12664:	strdeq	r2, [r1], -r4
   12668:	andeq	r2, r1, r4, lsl sp
   1266c:	cmp	r4, #0
   12670:	moveq	r3, #1
   12674:	streq	r3, [sp, #28]
   12678:	beq	12da4 <__assert_fail@plt+0x1b14>
   1267c:	mov	r3, #0
   12680:	mov	r4, r3
   12684:	mov	r2, #1
   12688:	str	r2, [sp, #40]	; 0x28
   1268c:	str	r3, [sp, #68]	; 0x44
   12690:	str	r2, [sp, #32]
   12694:	str	r2, [sp, #52]	; 0x34
   12698:	ldr	r3, [pc, #2584]	; 130b8 <__assert_fail@plt+0x1e28>
   1269c:	str	r4, [sp, #44]	; 0x2c
   126a0:	str	r4, [sp, #72]	; 0x48
   126a4:	str	r4, [sp, #28]
   126a8:	str	r3, [sp, #60]	; 0x3c
   126ac:	mov	r8, #2
   126b0:	b	1239c <__assert_fail@plt+0x110c>
   126b4:	cmp	r4, #0
   126b8:	bne	13944 <__assert_fail@plt+0x26b4>
   126bc:	cmp	sl, #0
   126c0:	beq	13704 <__assert_fail@plt+0x2474>
   126c4:	mov	r3, #34	; 0x22
   126c8:	strb	r3, [fp]
   126cc:	ldr	r3, [pc, #2528]	; 130b4 <__assert_fail@plt+0x1e24>
   126d0:	mov	r1, r4
   126d4:	mov	r2, #1
   126d8:	str	r4, [sp, #68]	; 0x44
   126dc:	str	r2, [sp, #40]	; 0x28
   126e0:	mov	r4, r2
   126e4:	str	r1, [sp, #44]	; 0x2c
   126e8:	str	r1, [sp, #72]	; 0x48
   126ec:	str	r1, [sp, #32]
   126f0:	str	r2, [sp, #28]
   126f4:	str	r2, [sp, #52]	; 0x34
   126f8:	str	r3, [sp, #60]	; 0x3c
   126fc:	b	1239c <__assert_fail@plt+0x110c>
   12700:	mov	r3, #0
   12704:	str	r3, [sp, #68]	; 0x44
   12708:	str	r3, [sp, #44]	; 0x2c
   1270c:	str	r3, [sp, #32]
   12710:	str	r3, [sp, #28]
   12714:	str	r3, [sp, #60]	; 0x3c
   12718:	mov	r3, #1
   1271c:	str	r8, [sp, #72]	; 0x48
   12720:	str	r8, [sp, #52]	; 0x34
   12724:	mov	r4, r8
   12728:	str	r3, [sp, #40]	; 0x28
   1272c:	b	1239c <__assert_fail@plt+0x110c>
   12730:	mov	r3, #1
   12734:	str	r3, [sp, #40]	; 0x28
   12738:	str	r3, [sp, #32]
   1273c:	str	r3, [sp, #28]
   12740:	str	r3, [sp, #52]	; 0x34
   12744:	ldr	r3, [pc, #2408]	; 130b4 <__assert_fail@plt+0x1e24>
   12748:	mov	r2, #0
   1274c:	mov	r4, r2
   12750:	str	r2, [sp, #68]	; 0x44
   12754:	str	r2, [sp, #44]	; 0x2c
   12758:	str	r2, [sp, #72]	; 0x48
   1275c:	str	r3, [sp, #60]	; 0x3c
   12760:	mov	r8, #5
   12764:	b	1239c <__assert_fail@plt+0x110c>
   12768:	mov	r3, #0
   1276c:	mov	r2, #1
   12770:	str	r2, [sp, #40]	; 0x28
   12774:	mov	r4, r3
   12778:	str	r3, [sp, #68]	; 0x44
   1277c:	str	r2, [sp, #28]
   12780:	str	r3, [sp, #44]	; 0x2c
   12784:	str	r3, [sp, #72]	; 0x48
   12788:	str	r3, [sp, #32]
   1278c:	str	r3, [sp, #52]	; 0x34
   12790:	str	r3, [sp, #60]	; 0x3c
   12794:	b	1239c <__assert_fail@plt+0x110c>
   12798:	mov	r2, #1
   1279c:	mov	r3, #0
   127a0:	str	r2, [sp, #40]	; 0x28
   127a4:	mov	r4, r3
   127a8:	str	r3, [sp, #68]	; 0x44
   127ac:	str	r8, [sp, #52]	; 0x34
   127b0:	str	r2, [sp, #32]
   127b4:	b	12698 <__assert_fail@plt+0x1408>
   127b8:	mov	r3, #1
   127bc:	str	r3, [sp, #40]	; 0x28
   127c0:	str	r3, [sp, #32]
   127c4:	str	r3, [sp, #28]
   127c8:	str	r3, [sp, #52]	; 0x34
   127cc:	ldr	r3, [pc, #2276]	; 130b8 <__assert_fail@plt+0x1e28>
   127d0:	mov	r2, #0
   127d4:	mov	r4, r2
   127d8:	str	r2, [sp, #68]	; 0x44
   127dc:	str	r2, [sp, #44]	; 0x2c
   127e0:	str	r2, [sp, #72]	; 0x48
   127e4:	str	r3, [sp, #60]	; 0x3c
   127e8:	mov	r8, #2
   127ec:	b	1239c <__assert_fail@plt+0x110c>
   127f0:	mov	r7, #0
   127f4:	ldr	r3, [sp, #24]
   127f8:	cmn	r3, #1
   127fc:	beq	13338 <__assert_fail@plt+0x20a8>
   12800:	ldr	r3, [sp, #24]
   12804:	subs	r3, r3, #1
   12808:	movne	r3, #1
   1280c:	cmp	r3, #0
   12810:	sub	r2, fp, #2
   12814:	clz	r2, r2
   12818:	lsr	r2, r2, #5
   1281c:	bne	12a18 <__assert_fail@plt+0x1788>
   12820:	cmp	r9, #0
   12824:	bne	12a18 <__assert_fail@plt+0x1788>
   12828:	ldr	r3, [sp, #32]
   1282c:	tst	r3, r2
   12830:	bne	12b38 <__assert_fail@plt+0x18a8>
   12834:	ldr	r3, [sp, #28]
   12838:	eor	r3, r3, #1
   1283c:	orr	r3, r2, r3
   12840:	ldr	r2, [sp, #32]
   12844:	eor	r3, r3, #1
   12848:	orrs	r3, r2, r3
   1284c:	beq	1287c <__assert_fail@plt+0x15ec>
   12850:	mov	r3, #0
   12854:	ldr	r1, [sp, #56]	; 0x38
   12858:	cmp	r1, #0
   1285c:	beq	1287c <__assert_fail@plt+0x15ec>
   12860:	lsr	r2, r5, #5
   12864:	and	r0, r5, #31
   12868:	uxtb	r2, r2
   1286c:	ldr	r1, [r1, r2, lsl #2]
   12870:	lsr	r2, r1, r0
   12874:	tst	r2, #1
   12878:	bne	12884 <__assert_fail@plt+0x15f4>
   1287c:	cmp	r7, #0
   12880:	beq	12ad4 <__assert_fail@plt+0x1844>
   12884:	sub	r2, fp, #2
   12888:	clz	r2, r2
   1288c:	lsr	r2, r2, #5
   12890:	ldr	r3, [sp, #32]
   12894:	cmp	r3, #0
   12898:	bne	12bc4 <__assert_fail@plt+0x1934>
   1289c:	ldr	r3, [sp, #44]	; 0x2c
   128a0:	eor	r3, r3, #1
   128a4:	ands	r3, r2, r3
   128a8:	beq	128e0 <__assert_fail@plt+0x1650>
   128ac:	cmp	sl, r4
   128b0:	movhi	r2, #39	; 0x27
   128b4:	strbhi	r2, [r8, r4]
   128b8:	add	r2, r4, #1
   128bc:	cmp	r2, sl
   128c0:	movcc	r1, #36	; 0x24
   128c4:	strbcc	r1, [r8, r2]
   128c8:	add	r2, r4, #2
   128cc:	cmp	r2, sl
   128d0:	add	r4, r4, #3
   128d4:	movcc	r1, #39	; 0x27
   128d8:	strbcc	r1, [r8, r2]
   128dc:	str	r3, [sp, #44]	; 0x2c
   128e0:	cmp	r4, sl
   128e4:	movcc	r3, #92	; 0x5c
   128e8:	strbcc	r3, [r8, r4]
   128ec:	add	r9, r9, #1
   128f0:	add	r4, r4, #1
   128f4:	cmp	r4, sl
   128f8:	ldr	r3, [sp, #40]	; 0x28
   128fc:	strbcc	r5, [r8, r4]
   12900:	cmp	r6, #0
   12904:	moveq	r3, #0
   12908:	str	r3, [sp, #40]	; 0x28
   1290c:	ldr	r3, [sp, #24]
   12910:	add	r4, r4, #1
   12914:	cmn	r3, #1
   12918:	bne	123b8 <__assert_fail@plt+0x1128>
   1291c:	ldr	r3, [sp, #36]	; 0x24
   12920:	ldrb	r6, [r3, r9]
   12924:	adds	r6, r6, #0
   12928:	movne	r6, #1
   1292c:	cmp	r6, #0
   12930:	bne	123cc <__assert_fail@plt+0x113c>
   12934:	str	fp, [sp, #160]	; 0xa0
   12938:	mov	fp, r8
   1293c:	ldr	r8, [sp, #160]	; 0xa0
   12940:	ldr	r1, [sp, #32]
   12944:	cmp	r4, #0
   12948:	sub	r2, r8, #2
   1294c:	clz	r2, r2
   12950:	lsr	r2, r2, #5
   12954:	andeq	r3, r2, r1
   12958:	movne	r3, #0
   1295c:	cmp	r3, #0
   12960:	bne	13a4c <__assert_fail@plt+0x27bc>
   12964:	eor	r3, r1, #1
   12968:	ands	r2, r2, r3
   1296c:	beq	13988 <__assert_fail@plt+0x26f8>
   12970:	ldr	r3, [sp, #68]	; 0x44
   12974:	cmp	r3, #0
   12978:	beq	1398c <__assert_fail@plt+0x26fc>
   1297c:	ldr	r3, [sp, #40]	; 0x28
   12980:	cmp	r3, #0
   12984:	bne	13a08 <__assert_fail@plt+0x2778>
   12988:	ldr	r3, [sp, #72]	; 0x48
   1298c:	adds	r3, r3, #0
   12990:	movne	r3, #1
   12994:	cmp	sl, #0
   12998:	movne	r3, #0
   1299c:	cmp	r3, #0
   129a0:	ldreq	r2, [sp, #68]	; 0x44
   129a4:	beq	1398c <__assert_fail@plt+0x26fc>
   129a8:	ldr	sl, [sp, #72]	; 0x48
   129ac:	str	r3, [sp, #68]	; 0x44
   129b0:	ldr	r3, [pc, #1792]	; 130b8 <__assert_fail@plt+0x1e28>
   129b4:	mov	r2, #39	; 0x27
   129b8:	mov	r4, #1
   129bc:	str	r3, [sp, #60]	; 0x3c
   129c0:	mov	r3, #0
   129c4:	strb	r2, [fp]
   129c8:	str	r4, [sp, #52]	; 0x34
   129cc:	mov	r8, #2
   129d0:	str	r3, [sp, #32]
   129d4:	b	1239c <__assert_fail@plt+0x110c>
   129d8:	mov	r7, #0
   129dc:	cmp	fp, #2
   129e0:	beq	13318 <__assert_fail@plt+0x2088>
   129e4:	ldr	r3, [sp, #52]	; 0x34
   129e8:	ldr	r2, [sp, #28]
   129ec:	ldr	r1, [sp, #32]
   129f0:	cmp	r3, #0
   129f4:	andne	r2, r2, r1
   129f8:	moveq	r2, #0
   129fc:	cmp	r2, #0
   12a00:	moveq	r5, #92	; 0x5c
   12a04:	moveq	r3, r5
   12a08:	bne	13324 <__assert_fail@plt+0x2094>
   12a0c:	ldr	r1, [sp, #28]
   12a10:	cmp	r1, #0
   12a14:	bne	13a94 <__assert_fail@plt+0x2804>
   12a18:	mov	r6, #0
   12a1c:	b	12834 <__assert_fail@plt+0x15a4>
   12a20:	mov	r7, #0
   12a24:	cmp	fp, #2
   12a28:	beq	13388 <__assert_fail@plt+0x20f8>
   12a2c:	cmp	fp, #5
   12a30:	beq	1334c <__assert_fail@plt+0x20bc>
   12a34:	sub	r2, fp, #2
   12a38:	mov	r6, #0
   12a3c:	clz	r2, r2
   12a40:	mov	r5, #63	; 0x3f
   12a44:	lsr	r2, r2, #5
   12a48:	b	12834 <__assert_fail@plt+0x15a4>
   12a4c:	mov	r7, #0
   12a50:	cmp	fp, #2
   12a54:	strne	r6, [sp, #68]	; 0x44
   12a58:	movne	r2, #0
   12a5c:	movne	r5, #39	; 0x27
   12a60:	bne	12834 <__assert_fail@plt+0x15a4>
   12a64:	ldr	r3, [sp, #32]
   12a68:	cmp	r3, #0
   12a6c:	bne	13768 <__assert_fail@plt+0x24d8>
   12a70:	cmp	sl, #0
   12a74:	ldr	r3, [sp, #72]	; 0x48
   12a78:	clz	r3, r3
   12a7c:	lsr	r3, r3, #5
   12a80:	moveq	r3, #0
   12a84:	cmp	r3, #0
   12a88:	bne	1369c <__assert_fail@plt+0x240c>
   12a8c:	cmp	sl, r4
   12a90:	movhi	r3, #39	; 0x27
   12a94:	strbhi	r3, [r8, r4]
   12a98:	add	r3, r4, #1
   12a9c:	cmp	sl, r3
   12aa0:	movhi	r2, #92	; 0x5c
   12aa4:	strbhi	r2, [r8, r3]
   12aa8:	add	r3, r4, #2
   12aac:	cmp	sl, r3
   12ab0:	movhi	r2, #39	; 0x27
   12ab4:	strbhi	r2, [r8, r3]
   12ab8:	mov	r3, #0
   12abc:	cmp	r7, #0
   12ac0:	add	r4, r4, #3
   12ac4:	str	r3, [sp, #44]	; 0x2c
   12ac8:	str	r6, [sp, #68]	; 0x44
   12acc:	mov	r5, #39	; 0x27
   12ad0:	bne	12884 <__assert_fail@plt+0x15f4>
   12ad4:	ldr	r2, [sp, #44]	; 0x2c
   12ad8:	eor	r3, r3, #1
   12adc:	and	r3, r3, r2
   12ae0:	add	r9, r9, #1
   12ae4:	uxtb	r3, r3
   12ae8:	cmp	r3, #0
   12aec:	beq	128f4 <__assert_fail@plt+0x1664>
   12af0:	cmp	sl, r4
   12af4:	movhi	r3, #39	; 0x27
   12af8:	strbhi	r3, [r8, r4]
   12afc:	add	r3, r4, #1
   12b00:	cmp	sl, r3
   12b04:	movhi	r2, #39	; 0x27
   12b08:	strbhi	r2, [r8, r3]
   12b0c:	mov	r3, #0
   12b10:	add	r4, r4, #2
   12b14:	str	r3, [sp, #44]	; 0x2c
   12b18:	b	128f4 <__assert_fail@plt+0x1664>
   12b1c:	mov	r3, #114	; 0x72
   12b20:	ldr	r1, [sp, #32]
   12b24:	sub	r2, fp, #2
   12b28:	clz	r2, r2
   12b2c:	lsr	r2, r2, #5
   12b30:	tst	r2, r1
   12b34:	beq	12a0c <__assert_fail@plt+0x177c>
   12b38:	mov	fp, r8
   12b3c:	mov	r8, #2
   12b40:	ldr	r3, [sp, #28]
   12b44:	cmp	r3, #0
   12b48:	movne	r8, #4
   12b4c:	ldr	r3, [sp, #164]	; 0xa4
   12b50:	mov	ip, #0
   12b54:	bic	r3, r3, #2
   12b58:	str	r3, [sp, #4]
   12b5c:	ldr	r3, [sp, #76]	; 0x4c
   12b60:	str	r8, [sp]
   12b64:	str	r3, [sp, #16]
   12b68:	ldr	r3, [sp, #80]	; 0x50
   12b6c:	ldr	r2, [sp, #36]	; 0x24
   12b70:	str	r3, [sp, #12]
   12b74:	mov	r1, sl
   12b78:	ldr	r3, [sp, #24]
   12b7c:	mov	r0, fp
   12b80:	str	ip, [sp, #8]
   12b84:	bl	122a4 <__assert_fail@plt+0x1014>
   12b88:	mov	r4, r0
   12b8c:	ldr	r3, [pc, #1304]	; 130ac <__assert_fail@plt+0x1e1c>
   12b90:	ldr	r2, [sp, #116]	; 0x74
   12b94:	mov	r0, r4
   12b98:	ldr	r3, [r3]
   12b9c:	cmp	r2, r3
   12ba0:	bne	13a90 <__assert_fail@plt+0x2800>
   12ba4:	add	sp, sp, #124	; 0x7c
   12ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bac:	mov	r5, #110	; 0x6e
   12bb0:	ldr	r3, [sp, #32]
   12bb4:	mov	r2, #0
   12bb8:	cmp	r3, #0
   12bbc:	mov	r6, r2
   12bc0:	beq	1289c <__assert_fail@plt+0x160c>
   12bc4:	str	fp, [sp, #160]	; 0xa0
   12bc8:	mov	fp, r8
   12bcc:	ldr	r8, [sp, #160]	; 0xa0
   12bd0:	mov	r3, r2
   12bd4:	ldr	r2, [sp, #28]
   12bd8:	and	r2, r2, r3
   12bdc:	str	r2, [sp, #28]
   12be0:	b	12b40 <__assert_fail@plt+0x18b0>
   12be4:	mov	r5, #116	; 0x74
   12be8:	b	12bb0 <__assert_fail@plt+0x1920>
   12bec:	mov	r5, #102	; 0x66
   12bf0:	ldr	r3, [sp, #32]
   12bf4:	cmp	r3, #0
   12bf8:	bne	137a4 <__assert_fail@plt+0x2514>
   12bfc:	mov	r6, #0
   12c00:	b	128e0 <__assert_fail@plt+0x1650>
   12c04:	mov	r5, #118	; 0x76
   12c08:	b	12bf0 <__assert_fail@plt+0x1960>
   12c0c:	mov	r7, #0
   12c10:	mov	r6, #0
   12c14:	b	12850 <__assert_fail@plt+0x15c0>
   12c18:	ldr	r3, [sp, #32]
   12c1c:	cmp	r3, #0
   12c20:	bne	139e8 <__assert_fail@plt+0x2758>
   12c24:	mov	r7, r3
   12c28:	ldr	r3, [sp, #44]	; 0x2c
   12c2c:	sub	r2, fp, #2
   12c30:	eor	r3, r3, #1
   12c34:	clz	r2, r2
   12c38:	lsr	r2, r2, #5
   12c3c:	ands	r3, r2, r3
   12c40:	beq	13688 <__assert_fail@plt+0x23f8>
   12c44:	cmp	sl, r4
   12c48:	movhi	r1, #39	; 0x27
   12c4c:	strbhi	r1, [r8, r4]
   12c50:	add	r1, r4, #1
   12c54:	cmp	sl, r1
   12c58:	movhi	r0, #36	; 0x24
   12c5c:	strbhi	r0, [r8, r1]
   12c60:	add	r1, r4, #2
   12c64:	cmp	sl, r1
   12c68:	movhi	r0, #39	; 0x27
   12c6c:	strbhi	r0, [r8, r1]
   12c70:	add	r1, r4, #3
   12c74:	cmp	sl, r1
   12c78:	bls	136e8 <__assert_fail@plt+0x2458>
   12c7c:	mov	r4, r1
   12c80:	mov	r1, #92	; 0x5c
   12c84:	strb	r1, [r8, r4]
   12c88:	mov	r1, r4
   12c8c:	str	r3, [sp, #44]	; 0x2c
   12c90:	cmp	fp, #2
   12c94:	add	r4, r4, #1
   12c98:	beq	13730 <__assert_fail@plt+0x24a0>
   12c9c:	ldr	r0, [sp, #24]
   12ca0:	add	r3, r9, #1
   12ca4:	cmp	r3, r0
   12ca8:	bcs	12cc0 <__assert_fail@plt+0x1a30>
   12cac:	ldr	r0, [sp, #36]	; 0x24
   12cb0:	ldrb	r3, [r0, r3]
   12cb4:	sub	r3, r3, #48	; 0x30
   12cb8:	cmp	r3, #9
   12cbc:	bls	13740 <__assert_fail@plt+0x24b0>
   12cc0:	mov	r5, #48	; 0x30
   12cc4:	ldr	r3, [sp, #28]
   12cc8:	eor	r3, r3, #1
   12ccc:	orrs	r2, r2, r3
   12cd0:	mov	r3, r6
   12cd4:	moveq	r6, r2
   12cd8:	beq	12854 <__assert_fail@plt+0x15c4>
   12cdc:	mov	r6, #0
   12ce0:	b	1287c <__assert_fail@plt+0x15ec>
   12ce4:	mov	r2, #0
   12ce8:	mov	r6, r2
   12cec:	mov	r5, #98	; 0x62
   12cf0:	b	1289c <__assert_fail@plt+0x160c>
   12cf4:	mov	r5, #97	; 0x61
   12cf8:	b	12bfc <__assert_fail@plt+0x196c>
   12cfc:	mov	r3, r7
   12d00:	mov	r6, r7
   12d04:	mov	r2, #0
   12d08:	mov	r7, r3
   12d0c:	mov	r5, #32
   12d10:	b	12834 <__assert_fail@plt+0x15a4>
   12d14:	cmp	r9, #0
   12d18:	mov	r3, r7
   12d1c:	bne	132e4 <__assert_fail@plt+0x2054>
   12d20:	mov	r6, r7
   12d24:	mov	r2, r9
   12d28:	mov	r7, r3
   12d2c:	b	12834 <__assert_fail@plt+0x15a4>
   12d30:	mov	r6, r7
   12d34:	b	12850 <__assert_fail@plt+0x15c0>
   12d38:	mov	r7, #0
   12d3c:	ldr	r3, [sp, #64]	; 0x40
   12d40:	cmp	r3, #1
   12d44:	bne	133a0 <__assert_fail@plt+0x2110>
   12d48:	bl	11128 <__ctype_b_loc@plt>
   12d4c:	ldr	r2, [sp, #64]	; 0x40
   12d50:	sxth	r3, r5
   12d54:	mov	ip, r2
   12d58:	lsl	r3, r3, #1
   12d5c:	ldr	r2, [r0]
   12d60:	ldrh	r3, [r2, r3]
   12d64:	and	r3, r3, #16384	; 0x4000
   12d68:	cmp	r3, #0
   12d6c:	ldr	r3, [sp, #28]
   12d70:	movne	r6, #1
   12d74:	moveq	r6, #0
   12d78:	movne	r2, #0
   12d7c:	andeq	r2, r3, #1
   12d80:	cmp	r2, #0
   12d84:	bne	136b0 <__assert_fail@plt+0x2420>
   12d88:	sub	r2, fp, #2
   12d8c:	clz	r2, r2
   12d90:	lsr	r2, r2, #5
   12d94:	b	12834 <__assert_fail@plt+0x15a4>
   12d98:	cmp	r4, #0
   12d9c:	bne	13a5c <__assert_fail@plt+0x27cc>
   12da0:	str	r4, [sp, #28]
   12da4:	cmp	sl, #0
   12da8:	bne	13aa0 <__assert_fail@plt+0x2810>
   12dac:	ldr	r3, [pc, #772]	; 130b8 <__assert_fail@plt+0x1e28>
   12db0:	mov	r4, #1
   12db4:	str	r4, [sp, #40]	; 0x28
   12db8:	str	r3, [sp, #60]	; 0x3c
   12dbc:	str	r4, [sp, #52]	; 0x34
   12dc0:	str	sl, [sp, #72]	; 0x48
   12dc4:	str	sl, [sp, #68]	; 0x44
   12dc8:	str	sl, [sp, #44]	; 0x2c
   12dcc:	str	sl, [sp, #32]
   12dd0:	mov	r8, #2
   12dd4:	b	1239c <__assert_fail@plt+0x110c>
   12dd8:	ldr	r3, [sp, #36]	; 0x24
   12ddc:	ldrb	r5, [r3, r9]
   12de0:	cmp	r5, #126	; 0x7e
   12de4:	ldrls	pc, [pc, r5, lsl #2]
   12de8:	b	12d3c <__assert_fail@plt+0x1aac>
   12dec:	andeq	r3, r1, r0, lsr #32
   12df0:	andeq	r2, r1, ip, lsr sp
   12df4:	andeq	r2, r1, ip, lsr sp
   12df8:	andeq	r2, r1, ip, lsr sp
   12dfc:	andeq	r2, r1, ip, lsr sp
   12e00:	andeq	r2, r1, ip, lsr sp
   12e04:	andeq	r2, r1, ip, lsr sp
   12e08:	andeq	r3, r1, ip
   12e0c:	strdeq	r2, [r1], -r8
   12e10:	strdeq	r2, [r1], -r0
   12e14:	andeq	r2, r1, r8, ror #31
   12e18:	muleq	r1, r8, r0
   12e1c:	andeq	r3, r1, r4, lsl #1
   12e20:	andeq	r2, r1, ip, lsl fp
   12e24:	andeq	r2, r1, ip, lsr sp
   12e28:	andeq	r2, r1, ip, lsr sp
   12e2c:	andeq	r2, r1, ip, lsr sp
   12e30:	andeq	r2, r1, ip, lsr sp
   12e34:	andeq	r2, r1, ip, lsr sp
   12e38:	andeq	r2, r1, ip, lsr sp
   12e3c:	andeq	r2, r1, ip, lsr sp
   12e40:	andeq	r2, r1, ip, lsr sp
   12e44:	andeq	r2, r1, ip, lsr sp
   12e48:	andeq	r2, r1, ip, lsr sp
   12e4c:	andeq	r2, r1, ip, lsr sp
   12e50:	andeq	r2, r1, ip, lsr sp
   12e54:	andeq	r2, r1, ip, lsr sp
   12e58:	andeq	r2, r1, ip, lsr sp
   12e5c:	andeq	r2, r1, ip, lsr sp
   12e60:	andeq	r2, r1, ip, lsr sp
   12e64:	andeq	r2, r1, ip, lsr sp
   12e68:	andeq	r2, r1, ip, lsr sp
   12e6c:	andeq	r3, r1, r4, ror r0
   12e70:	andeq	r3, r1, r0, rrx
   12e74:	andeq	r3, r1, r0, rrx
   12e78:	andeq	r3, r1, r0, asr r0
   12e7c:	andeq	r3, r1, r0, rrx
   12e80:	andeq	r2, r1, r8, lsl #27
   12e84:	andeq	r3, r1, r0, rrx
   12e88:	andeq	r2, r1, r0, asr sl
   12e8c:	andeq	r3, r1, r0, rrx
   12e90:	andeq	r3, r1, r0, rrx
   12e94:	andeq	r3, r1, r0, rrx
   12e98:	andeq	r2, r1, r8, lsl #27
   12e9c:	andeq	r2, r1, r8, lsl #27
   12ea0:	andeq	r2, r1, r8, lsl #27
   12ea4:	andeq	r2, r1, r8, lsl #27
   12ea8:	andeq	r2, r1, r8, lsl #27
   12eac:	andeq	r2, r1, r8, lsl #27
   12eb0:	andeq	r2, r1, r8, lsl #27
   12eb4:	andeq	r2, r1, r8, lsl #27
   12eb8:	andeq	r2, r1, r8, lsl #27
   12ebc:	andeq	r2, r1, r8, lsl #27
   12ec0:	andeq	r2, r1, r8, lsl #27
   12ec4:	andeq	r2, r1, r8, lsl #27
   12ec8:	andeq	r2, r1, r8, lsl #27
   12ecc:	andeq	r2, r1, r8, lsl #27
   12ed0:	andeq	r2, r1, r8, lsl #27
   12ed4:	andeq	r2, r1, r8, lsl #27
   12ed8:	andeq	r3, r1, r0, rrx
   12edc:	andeq	r3, r1, r0, rrx
   12ee0:	andeq	r3, r1, r0, rrx
   12ee4:	andeq	r3, r1, r0, rrx
   12ee8:	andeq	r2, r1, r4, lsr #20
   12eec:	andeq	r2, r1, ip, lsr sp
   12ef0:	andeq	r2, r1, r8, lsl #27
   12ef4:	andeq	r2, r1, r8, lsl #27
   12ef8:	andeq	r2, r1, r8, lsl #27
   12efc:	andeq	r2, r1, r8, lsl #27
   12f00:	andeq	r2, r1, r8, lsl #27
   12f04:	andeq	r2, r1, r8, lsl #27
   12f08:	andeq	r2, r1, r8, lsl #27
   12f0c:	andeq	r2, r1, r8, lsl #27
   12f10:	andeq	r2, r1, r8, lsl #27
   12f14:	andeq	r2, r1, r8, lsl #27
   12f18:	andeq	r2, r1, r8, lsl #27
   12f1c:	andeq	r2, r1, r8, lsl #27
   12f20:	andeq	r2, r1, r8, lsl #27
   12f24:	andeq	r2, r1, r8, lsl #27
   12f28:	andeq	r2, r1, r8, lsl #27
   12f2c:	andeq	r2, r1, r8, lsl #27
   12f30:	andeq	r2, r1, r8, lsl #27
   12f34:	andeq	r2, r1, r8, lsl #27
   12f38:	andeq	r2, r1, r8, lsl #27
   12f3c:	andeq	r2, r1, r8, lsl #27
   12f40:	andeq	r2, r1, r8, lsl #27
   12f44:	andeq	r2, r1, r8, lsl #27
   12f48:	andeq	r2, r1, r8, lsl #27
   12f4c:	andeq	r2, r1, r8, lsl #27
   12f50:	andeq	r2, r1, r8, lsl #27
   12f54:	andeq	r2, r1, r8, lsl #27
   12f58:	andeq	r3, r1, r0, rrx
   12f5c:	ldrdeq	r2, [r1], -ip
   12f60:	andeq	r2, r1, r8, lsl #27
   12f64:	andeq	r3, r1, r0, rrx
   12f68:	andeq	r2, r1, r8, lsl #27
   12f6c:	andeq	r3, r1, r0, rrx
   12f70:	andeq	r2, r1, r8, lsl #27
   12f74:	andeq	r2, r1, r8, lsl #27
   12f78:	andeq	r2, r1, r8, lsl #27
   12f7c:	andeq	r2, r1, r8, lsl #27
   12f80:	andeq	r2, r1, r8, lsl #27
   12f84:	andeq	r2, r1, r8, lsl #27
   12f88:	andeq	r2, r1, r8, lsl #27
   12f8c:	andeq	r2, r1, r8, lsl #27
   12f90:	andeq	r2, r1, r8, lsl #27
   12f94:	andeq	r2, r1, r8, lsl #27
   12f98:	andeq	r2, r1, r8, lsl #27
   12f9c:	andeq	r2, r1, r8, lsl #27
   12fa0:	andeq	r2, r1, r8, lsl #27
   12fa4:	andeq	r2, r1, r8, lsl #27
   12fa8:	andeq	r2, r1, r8, lsl #27
   12fac:	andeq	r2, r1, r8, lsl #27
   12fb0:	andeq	r2, r1, r8, lsl #27
   12fb4:	andeq	r2, r1, r8, lsl #27
   12fb8:	andeq	r2, r1, r8, lsl #27
   12fbc:	andeq	r2, r1, r8, lsl #27
   12fc0:	andeq	r2, r1, r8, lsl #27
   12fc4:	andeq	r2, r1, r8, lsl #27
   12fc8:	andeq	r2, r1, r8, lsl #27
   12fcc:	andeq	r2, r1, r8, lsl #27
   12fd0:	andeq	r2, r1, r8, lsl #27
   12fd4:	andeq	r2, r1, r8, lsl #27
   12fd8:	strdeq	r2, [r1], -r4
   12fdc:	andeq	r3, r1, r0, rrx
   12fe0:	strdeq	r2, [r1], -r4
   12fe4:	andeq	r3, r1, r0, asr r0
   12fe8:	mov	r3, #110	; 0x6e
   12fec:	b	12b20 <__assert_fail@plt+0x1890>
   12ff0:	mov	r3, #116	; 0x74
   12ff4:	b	12b20 <__assert_fail@plt+0x1890>
   12ff8:	sub	r2, fp, #2
   12ffc:	mov	r3, #98	; 0x62
   13000:	clz	r2, r2
   13004:	lsr	r2, r2, #5
   13008:	b	12a0c <__assert_fail@plt+0x177c>
   1300c:	sub	r2, fp, #2
   13010:	mov	r3, #97	; 0x61
   13014:	clz	r2, r2
   13018:	lsr	r2, r2, #5
   1301c:	b	12a0c <__assert_fail@plt+0x177c>
   13020:	ldr	r3, [sp, #28]
   13024:	cmp	r3, #0
   13028:	bne	12c18 <__assert_fail@plt+0x1988>
   1302c:	ldr	r3, [sp, #164]	; 0xa4
   13030:	tst	r3, #1
   13034:	bne	136a8 <__assert_fail@plt+0x2418>
   13038:	ldr	r6, [sp, #28]
   1303c:	sub	r2, fp, #2
   13040:	mov	r7, r6
   13044:	clz	r2, r2
   13048:	lsr	r2, r2, #5
   1304c:	b	12834 <__assert_fail@plt+0x15a4>
   13050:	sub	r2, fp, #2
   13054:	clz	r2, r2
   13058:	lsr	r2, r2, #5
   1305c:	b	12820 <__assert_fail@plt+0x1590>
   13060:	sub	r2, fp, #2
   13064:	mov	r6, #0
   13068:	clz	r2, r2
   1306c:	lsr	r2, r2, #5
   13070:	b	12828 <__assert_fail@plt+0x1598>
   13074:	sub	r2, fp, #2
   13078:	clz	r2, r2
   1307c:	lsr	r2, r2, #5
   13080:	b	12828 <__assert_fail@plt+0x1598>
   13084:	sub	r2, fp, #2
   13088:	mov	r3, #102	; 0x66
   1308c:	clz	r2, r2
   13090:	lsr	r2, r2, #5
   13094:	b	12a0c <__assert_fail@plt+0x177c>
   13098:	sub	r2, fp, #2
   1309c:	mov	r3, #118	; 0x76
   130a0:	clz	r2, r2
   130a4:	lsr	r2, r2, #5
   130a8:	b	12a0c <__assert_fail@plt+0x177c>
   130ac:	andeq	r7, r2, r8, lsl #30
   130b0:	muleq	r1, r8, fp
   130b4:	andeq	r6, r1, r0, lsl #23
   130b8:	muleq	r1, r4, fp
   130bc:	ldr	r3, [sp, #48]	; 0x30
   130c0:	ldrb	r5, [r3]
   130c4:	cmp	r5, #126	; 0x7e
   130c8:	ldrls	pc, [pc, r5, lsl #2]
   130cc:	b	12d38 <__assert_fail@plt+0x1aa8>
   130d0:	andeq	r2, r1, r8, lsl ip
   130d4:	andeq	r2, r1, r8, lsr sp
   130d8:	andeq	r2, r1, r8, lsr sp
   130dc:	andeq	r2, r1, r8, lsr sp
   130e0:	andeq	r2, r1, r8, lsr sp
   130e4:	andeq	r2, r1, r8, lsr sp
   130e8:	andeq	r2, r1, r8, lsr sp
   130ec:	andeq	r3, r1, r0, lsl r3
   130f0:	andeq	r3, r1, r8, lsl #6
   130f4:	andeq	r2, r1, r4, ror #23
   130f8:	andeq	r2, r1, ip, lsr #23
   130fc:	andeq	r2, r1, r4, lsl #24
   13100:	andeq	r2, r1, ip, ror #23
   13104:	strdeq	r3, [r1], -ip
   13108:	andeq	r2, r1, r8, lsr sp
   1310c:	andeq	r2, r1, r8, lsr sp
   13110:	andeq	r2, r1, r8, lsr sp
   13114:	andeq	r2, r1, r8, lsr sp
   13118:	andeq	r2, r1, r8, lsr sp
   1311c:	andeq	r2, r1, r8, lsr sp
   13120:	andeq	r2, r1, r8, lsr sp
   13124:	andeq	r2, r1, r8, lsr sp
   13128:	andeq	r2, r1, r8, lsr sp
   1312c:	andeq	r2, r1, r8, lsr sp
   13130:	andeq	r2, r1, r8, lsr sp
   13134:	andeq	r2, r1, r8, lsr sp
   13138:	andeq	r2, r1, r8, lsr sp
   1313c:	andeq	r2, r1, r8, lsr sp
   13140:	andeq	r2, r1, r8, lsr sp
   13144:	andeq	r2, r1, r8, lsr sp
   13148:	andeq	r2, r1, r8, lsr sp
   1314c:	andeq	r2, r1, r8, lsr sp
   13150:	strdeq	r3, [r1], -r4
   13154:	andeq	r2, r1, ip, lsl #24
   13158:	andeq	r2, r1, ip, lsl #24
   1315c:	ldrdeq	r3, [r1], -r8
   13160:	andeq	r2, r1, ip, lsl #24
   13164:	andeq	r3, r1, ip, asr #5
   13168:	andeq	r2, r1, ip, lsl #24
   1316c:	andeq	r2, r1, ip, asr #20
   13170:	andeq	r2, r1, ip, lsl #24
   13174:	andeq	r2, r1, ip, lsl #24
   13178:	andeq	r2, r1, ip, lsl #24
   1317c:	andeq	r3, r1, ip, asr #5
   13180:	andeq	r3, r1, ip, asr #5
   13184:	andeq	r3, r1, ip, asr #5
   13188:	andeq	r3, r1, ip, asr #5
   1318c:	andeq	r3, r1, ip, asr #5
   13190:	andeq	r3, r1, ip, asr #5
   13194:	andeq	r3, r1, ip, asr #5
   13198:	andeq	r3, r1, ip, asr #5
   1319c:	andeq	r3, r1, ip, asr #5
   131a0:	andeq	r3, r1, ip, asr #5
   131a4:	andeq	r3, r1, ip, asr #5
   131a8:	andeq	r3, r1, ip, asr #5
   131ac:	andeq	r3, r1, ip, asr #5
   131b0:	andeq	r3, r1, ip, asr #5
   131b4:	andeq	r3, r1, ip, asr #5
   131b8:	andeq	r3, r1, ip, asr #5
   131bc:	andeq	r2, r1, ip, lsl #24
   131c0:	andeq	r2, r1, ip, lsl #24
   131c4:	andeq	r2, r1, ip, lsl #24
   131c8:	andeq	r2, r1, ip, lsl #24
   131cc:	andeq	r2, r1, r0, lsr #20
   131d0:	andeq	r2, r1, r8, lsr sp
   131d4:	andeq	r3, r1, ip, asr #5
   131d8:	andeq	r3, r1, ip, asr #5
   131dc:	andeq	r3, r1, ip, asr #5
   131e0:	andeq	r3, r1, ip, asr #5
   131e4:	andeq	r3, r1, ip, asr #5
   131e8:	andeq	r3, r1, ip, asr #5
   131ec:	andeq	r3, r1, ip, asr #5
   131f0:	andeq	r3, r1, ip, asr #5
   131f4:	andeq	r3, r1, ip, asr #5
   131f8:	andeq	r3, r1, ip, asr #5
   131fc:	andeq	r3, r1, ip, asr #5
   13200:	andeq	r3, r1, ip, asr #5
   13204:	andeq	r3, r1, ip, asr #5
   13208:	andeq	r3, r1, ip, asr #5
   1320c:	andeq	r3, r1, ip, asr #5
   13210:	andeq	r3, r1, ip, asr #5
   13214:	andeq	r3, r1, ip, asr #5
   13218:	andeq	r3, r1, ip, asr #5
   1321c:	andeq	r3, r1, ip, asr #5
   13220:	andeq	r3, r1, ip, asr #5
   13224:	andeq	r3, r1, ip, asr #5
   13228:	andeq	r3, r1, ip, asr #5
   1322c:	andeq	r3, r1, ip, asr #5
   13230:	andeq	r3, r1, ip, asr #5
   13234:	andeq	r3, r1, ip, asr #5
   13238:	andeq	r3, r1, ip, asr #5
   1323c:	andeq	r2, r1, ip, lsl #24
   13240:	ldrdeq	r2, [r1], -r8
   13244:	andeq	r3, r1, ip, asr #5
   13248:	andeq	r2, r1, ip, lsl #24
   1324c:	andeq	r3, r1, ip, asr #5
   13250:	andeq	r2, r1, ip, lsl #24
   13254:	andeq	r3, r1, ip, asr #5
   13258:	andeq	r3, r1, ip, asr #5
   1325c:	andeq	r3, r1, ip, asr #5
   13260:	andeq	r3, r1, ip, asr #5
   13264:	andeq	r3, r1, ip, asr #5
   13268:	andeq	r3, r1, ip, asr #5
   1326c:	andeq	r3, r1, ip, asr #5
   13270:	andeq	r3, r1, ip, asr #5
   13274:	andeq	r3, r1, ip, asr #5
   13278:	andeq	r3, r1, ip, asr #5
   1327c:	andeq	r3, r1, ip, asr #5
   13280:	andeq	r3, r1, ip, asr #5
   13284:	andeq	r3, r1, ip, asr #5
   13288:	andeq	r3, r1, ip, asr #5
   1328c:	andeq	r3, r1, ip, asr #5
   13290:	andeq	r3, r1, ip, asr #5
   13294:	andeq	r3, r1, ip, asr #5
   13298:	andeq	r3, r1, ip, asr #5
   1329c:	andeq	r3, r1, ip, asr #5
   132a0:	andeq	r3, r1, ip, asr #5
   132a4:	andeq	r3, r1, ip, asr #5
   132a8:	andeq	r3, r1, ip, asr #5
   132ac:	andeq	r3, r1, ip, asr #5
   132b0:	andeq	r3, r1, ip, asr #5
   132b4:	andeq	r3, r1, ip, asr #5
   132b8:	andeq	r3, r1, ip, asr #5
   132bc:	strdeq	r2, [r1], -r0
   132c0:	andeq	r2, r1, ip, lsl #24
   132c4:	strdeq	r2, [r1], -r0
   132c8:	ldrdeq	r3, [r1], -r8
   132cc:	mov	r6, r7
   132d0:	mov	r7, #0
   132d4:	b	12850 <__assert_fail@plt+0x15c0>
   132d8:	cmp	r9, #0
   132dc:	mov	r3, #0
   132e0:	beq	12d20 <__assert_fail@plt+0x1a90>
   132e4:	mov	r6, #0
   132e8:	mov	r7, r3
   132ec:	mov	r3, r6
   132f0:	b	12854 <__assert_fail@plt+0x15c4>
   132f4:	mov	r3, #0
   132f8:	b	12d00 <__assert_fail@plt+0x1a70>
   132fc:	mov	r7, #0
   13300:	mov	r3, #114	; 0x72
   13304:	b	12b20 <__assert_fail@plt+0x1890>
   13308:	mov	r5, #98	; 0x62
   1330c:	b	12bb0 <__assert_fail@plt+0x1920>
   13310:	mov	r5, #97	; 0x61
   13314:	b	12bf0 <__assert_fail@plt+0x1960>
   13318:	ldr	r3, [sp, #32]
   1331c:	cmp	r3, #0
   13320:	bne	13768 <__assert_fail@plt+0x24d8>
   13324:	add	r9, r9, #1
   13328:	ldr	r3, [sp, #44]	; 0x2c
   1332c:	mov	r6, #0
   13330:	mov	r5, #92	; 0x5c
   13334:	b	12ae8 <__assert_fail@plt+0x1858>
   13338:	ldr	r3, [sp, #36]	; 0x24
   1333c:	ldrb	r3, [r3, #1]
   13340:	adds	r3, r3, #0
   13344:	movne	r3, #1
   13348:	b	1280c <__assert_fail@plt+0x157c>
   1334c:	ldr	r3, [sp, #164]	; 0xa4
   13350:	ands	r3, r3, #4
   13354:	beq	13378 <__assert_fail@plt+0x20e8>
   13358:	ldr	r2, [sp, #24]
   1335c:	add	r3, r9, #2
   13360:	cmp	r3, r2
   13364:	bcs	13378 <__assert_fail@plt+0x20e8>
   13368:	ldr	r2, [sp, #48]	; 0x30
   1336c:	ldrb	r5, [r2, #1]
   13370:	cmp	r5, #63	; 0x3f
   13374:	beq	137dc <__assert_fail@plt+0x254c>
   13378:	mov	r2, #0
   1337c:	mov	r6, r2
   13380:	mov	r5, #63	; 0x3f
   13384:	b	12834 <__assert_fail@plt+0x15a4>
   13388:	ldr	r3, [sp, #32]
   1338c:	cmp	r3, #0
   13390:	bne	13768 <__assert_fail@plt+0x24d8>
   13394:	mov	r6, r3
   13398:	mov	r5, #63	; 0x3f
   1339c:	b	1287c <__assert_fail@plt+0x15ec>
   133a0:	ldr	r3, [sp, #24]
   133a4:	cmn	r3, #1
   133a8:	mov	r3, #0
   133ac:	str	r3, [sp, #108]	; 0x6c
   133b0:	str	r3, [sp, #112]	; 0x70
   133b4:	bne	133c4 <__assert_fail@plt+0x2134>
   133b8:	ldr	r0, [sp, #36]	; 0x24
   133bc:	bl	1114c <strlen@plt>
   133c0:	str	r0, [sp, #24]
   133c4:	mov	r3, #0
   133c8:	str	sl, [sp, #88]	; 0x58
   133cc:	ldr	sl, [sp, #36]	; 0x24
   133d0:	str	r5, [sp, #92]	; 0x5c
   133d4:	mov	r5, r3
   133d8:	str	r7, [sp, #96]	; 0x60
   133dc:	str	r4, [sp, #100]	; 0x64
   133e0:	str	r8, [sp, #84]	; 0x54
   133e4:	ldr	r3, [sp, #24]
   133e8:	add	r4, r9, r5
   133ec:	add	r7, sl, r4
   133f0:	sub	r2, r3, r4
   133f4:	mov	r1, r7
   133f8:	add	r3, sp, #108	; 0x6c
   133fc:	add	r0, sp, #104	; 0x68
   13400:	bl	14f50 <__assert_fail@plt+0x3cc0>
   13404:	subs	r8, r0, #0
   13408:	beq	13458 <__assert_fail@plt+0x21c8>
   1340c:	cmn	r8, #1
   13410:	beq	137b8 <__assert_fail@plt+0x2528>
   13414:	cmn	r8, #2
   13418:	beq	138d8 <__assert_fail@plt+0x2648>
   1341c:	ldr	r3, [sp, #32]
   13420:	cmp	fp, #2
   13424:	movne	r3, #0
   13428:	andeq	r3, r3, #1
   1342c:	cmp	r3, #0
   13430:	bne	135b8 <__assert_fail@plt+0x2328>
   13434:	ldr	r0, [sp, #104]	; 0x68
   13438:	bl	1105c <iswprint@plt>
   1343c:	add	r5, r5, r8
   13440:	cmp	r0, #0
   13444:	add	r0, sp, #108	; 0x6c
   13448:	moveq	r6, #0
   1344c:	bl	11008 <mbsinit@plt>
   13450:	cmp	r0, #0
   13454:	beq	133e4 <__assert_fail@plt+0x2154>
   13458:	ldr	r3, [sp, #28]
   1345c:	mov	ip, r5
   13460:	eor	r2, r6, #1
   13464:	ldr	r5, [sp, #92]	; 0x5c
   13468:	ldr	r7, [sp, #96]	; 0x60
   1346c:	ldr	r4, [sp, #100]	; 0x64
   13470:	ldr	r8, [sp, #84]	; 0x54
   13474:	ldr	sl, [sp, #88]	; 0x58
   13478:	and	r2, r2, r3
   1347c:	cmp	ip, #1
   13480:	bls	12d80 <__assert_fail@plt+0x1af0>
   13484:	add	r1, ip, r9
   13488:	ldr	lr, [sp, #48]	; 0x30
   1348c:	mov	r0, #0
   13490:	str	r6, [sp, #48]	; 0x30
   13494:	mov	ip, #39	; 0x27
   13498:	ldr	r6, [sp, #44]	; 0x2c
   1349c:	b	13554 <__assert_fail@plt+0x22c4>
   134a0:	ldr	r0, [sp, #32]
   134a4:	sub	r3, fp, #2
   134a8:	cmp	r0, #0
   134ac:	clz	r3, r3
   134b0:	lsr	r3, r3, #5
   134b4:	bne	136bc <__assert_fail@plt+0x242c>
   134b8:	eor	r0, r6, #1
   134bc:	ands	r3, r3, r0
   134c0:	beq	134f0 <__assert_fail@plt+0x2260>
   134c4:	add	r0, r4, #1
   134c8:	cmp	sl, r4
   134cc:	strbhi	ip, [r8, r4]
   134d0:	cmp	sl, r0
   134d4:	movhi	r6, #36	; 0x24
   134d8:	strbhi	r6, [r8, r0]
   134dc:	add	r0, r4, #2
   134e0:	mov	r6, r3
   134e4:	add	r4, r4, #3
   134e8:	cmp	sl, r0
   134ec:	strbhi	ip, [r8, r0]
   134f0:	cmp	sl, r4
   134f4:	movhi	r3, #92	; 0x5c
   134f8:	strbhi	r3, [r8, r4]
   134fc:	add	r3, r4, #1
   13500:	cmp	sl, r3
   13504:	lsrhi	r0, r5, #6
   13508:	addhi	r0, r0, #48	; 0x30
   1350c:	strbhi	r0, [r8, r3]
   13510:	add	r0, r4, #2
   13514:	cmp	sl, r0
   13518:	lsrhi	r3, r5, #3
   1351c:	andhi	r3, r3, #7
   13520:	addhi	r3, r3, #48	; 0x30
   13524:	add	r9, r9, #1
   13528:	strbhi	r3, [r8, r0]
   1352c:	and	r5, r5, #7
   13530:	cmp	r9, r1
   13534:	add	r5, r5, #48	; 0x30
   13538:	add	r4, r4, #3
   1353c:	bcs	136dc <__assert_fail@plt+0x244c>
   13540:	mov	r0, r2
   13544:	cmp	sl, r4
   13548:	strbhi	r5, [r8, r4]
   1354c:	ldrb	r5, [lr, #1]!
   13550:	add	r4, r4, #1
   13554:	cmp	r2, #0
   13558:	bne	134a0 <__assert_fail@plt+0x2210>
   1355c:	eor	r3, r0, #1
   13560:	and	r3, r3, r6
   13564:	cmp	r7, #0
   13568:	uxtb	r3, r3
   1356c:	beq	13580 <__assert_fail@plt+0x22f0>
   13570:	cmp	sl, r4
   13574:	movhi	r7, #92	; 0x5c
   13578:	strbhi	r7, [r8, r4]
   1357c:	add	r4, r4, #1
   13580:	add	r9, r9, #1
   13584:	cmp	r9, r1
   13588:	bcs	136d0 <__assert_fail@plt+0x2440>
   1358c:	cmp	r3, #0
   13590:	beq	136fc <__assert_fail@plt+0x246c>
   13594:	cmp	sl, r4
   13598:	add	r3, r4, #1
   1359c:	strbhi	ip, [r8, r4]
   135a0:	mov	r7, #0
   135a4:	cmp	sl, r3
   135a8:	strbhi	ip, [r8, r3]
   135ac:	add	r4, r4, #2
   135b0:	mov	r6, r7
   135b4:	b	13544 <__assert_fail@plt+0x22b4>
   135b8:	cmp	r8, #1
   135bc:	beq	13434 <__assert_fail@plt+0x21a4>
   135c0:	add	r1, r4, #1
   135c4:	add	r3, sl, r8
   135c8:	add	r1, sl, r1
   135cc:	add	r4, r3, r4
   135d0:	ldrb	r3, [r1], #1
   135d4:	sub	r3, r3, #91	; 0x5b
   135d8:	cmp	r3, #33	; 0x21
   135dc:	ldrls	pc, [pc, r3, lsl #2]
   135e0:	b	1366c <__assert_fail@plt+0x23dc>
   135e4:	andeq	r3, r1, r8, ror r6
   135e8:	andeq	r3, r1, r8, ror r6
   135ec:	andeq	r3, r1, ip, ror #12
   135f0:	andeq	r3, r1, r8, ror r6
   135f4:	andeq	r3, r1, ip, ror #12
   135f8:	andeq	r3, r1, r8, ror r6
   135fc:	andeq	r3, r1, ip, ror #12
   13600:	andeq	r3, r1, ip, ror #12
   13604:	andeq	r3, r1, ip, ror #12
   13608:	andeq	r3, r1, ip, ror #12
   1360c:	andeq	r3, r1, ip, ror #12
   13610:	andeq	r3, r1, ip, ror #12
   13614:	andeq	r3, r1, ip, ror #12
   13618:	andeq	r3, r1, ip, ror #12
   1361c:	andeq	r3, r1, ip, ror #12
   13620:	andeq	r3, r1, ip, ror #12
   13624:	andeq	r3, r1, ip, ror #12
   13628:	andeq	r3, r1, ip, ror #12
   1362c:	andeq	r3, r1, ip, ror #12
   13630:	andeq	r3, r1, ip, ror #12
   13634:	andeq	r3, r1, ip, ror #12
   13638:	andeq	r3, r1, ip, ror #12
   1363c:	andeq	r3, r1, ip, ror #12
   13640:	andeq	r3, r1, ip, ror #12
   13644:	andeq	r3, r1, ip, ror #12
   13648:	andeq	r3, r1, ip, ror #12
   1364c:	andeq	r3, r1, ip, ror #12
   13650:	andeq	r3, r1, ip, ror #12
   13654:	andeq	r3, r1, ip, ror #12
   13658:	andeq	r3, r1, ip, ror #12
   1365c:	andeq	r3, r1, ip, ror #12
   13660:	andeq	r3, r1, ip, ror #12
   13664:	andeq	r3, r1, ip, ror #12
   13668:	andeq	r3, r1, r8, ror r6
   1366c:	cmp	r4, r1
   13670:	bne	135d0 <__assert_fail@plt+0x2340>
   13674:	b	13434 <__assert_fail@plt+0x21a4>
   13678:	ldr	fp, [sp, #84]	; 0x54
   1367c:	ldr	sl, [sp, #88]	; 0x58
   13680:	mov	r8, #2
   13684:	b	12b40 <__assert_fail@plt+0x18b0>
   13688:	cmp	sl, r4
   1368c:	movls	r1, r4
   13690:	bls	12c90 <__assert_fail@plt+0x1a00>
   13694:	ldr	r3, [sp, #44]	; 0x2c
   13698:	b	12c80 <__assert_fail@plt+0x19f0>
   1369c:	str	sl, [sp, #72]	; 0x48
   136a0:	ldr	sl, [sp, #32]
   136a4:	b	12ab8 <__assert_fail@plt+0x1828>
   136a8:	add	r9, r9, #1
   136ac:	b	123ac <__assert_fail@plt+0x111c>
   136b0:	ldr	r2, [sp, #28]
   136b4:	mov	r6, #0
   136b8:	b	13484 <__assert_fail@plt+0x21f4>
   136bc:	str	fp, [sp, #160]	; 0xa0
   136c0:	str	r3, [sp, #28]
   136c4:	mov	fp, r8
   136c8:	ldr	r8, [sp, #160]	; 0xa0
   136cc:	b	12b40 <__assert_fail@plt+0x18b0>
   136d0:	str	r6, [sp, #44]	; 0x2c
   136d4:	ldr	r6, [sp, #48]	; 0x30
   136d8:	b	12ae8 <__assert_fail@plt+0x1858>
   136dc:	str	r6, [sp, #44]	; 0x2c
   136e0:	ldr	r6, [sp, #48]	; 0x30
   136e4:	b	128f4 <__assert_fail@plt+0x1664>
   136e8:	add	r4, r4, #4
   136ec:	str	r3, [sp, #44]	; 0x2c
   136f0:	mov	r6, #0
   136f4:	mov	r5, #48	; 0x30
   136f8:	b	1287c <__assert_fail@plt+0x15ec>
   136fc:	mov	r7, r3
   13700:	b	13544 <__assert_fail@plt+0x22b4>
   13704:	ldr	r3, [pc, #-1624]	; 130b4 <__assert_fail@plt+0x1e24>
   13708:	mov	r4, #1
   1370c:	str	r4, [sp, #40]	; 0x28
   13710:	str	r4, [sp, #28]
   13714:	str	r4, [sp, #52]	; 0x34
   13718:	str	sl, [sp, #72]	; 0x48
   1371c:	str	sl, [sp, #68]	; 0x44
   13720:	str	sl, [sp, #44]	; 0x2c
   13724:	str	sl, [sp, #32]
   13728:	str	r3, [sp, #60]	; 0x3c
   1372c:	b	1239c <__assert_fail@plt+0x110c>
   13730:	mov	r3, r6
   13734:	mov	r5, #48	; 0x30
   13738:	mov	r6, #0
   1373c:	b	1287c <__assert_fail@plt+0x15ec>
   13740:	cmp	sl, r4
   13744:	movhi	r3, #48	; 0x30
   13748:	strbhi	r3, [r8, r4]
   1374c:	add	r3, r1, #2
   13750:	cmp	sl, r3
   13754:	movhi	r0, #48	; 0x30
   13758:	strbhi	r0, [r8, r3]
   1375c:	add	r4, r1, #3
   13760:	mov	r5, #48	; 0x30
   13764:	b	12cc4 <__assert_fail@plt+0x1a34>
   13768:	str	fp, [sp, #160]	; 0xa0
   1376c:	mov	fp, r8
   13770:	ldr	r8, [sp, #160]	; 0xa0
   13774:	b	12b40 <__assert_fail@plt+0x18b0>
   13778:	ldr	r2, [sp, #80]	; 0x50
   1377c:	ldrb	r3, [r2]
   13780:	cmp	r3, #0
   13784:	beq	1236c <__assert_fail@plt+0x10dc>
   13788:	cmp	sl, r4
   1378c:	strbhi	r3, [fp, r4]
   13790:	ldrb	r3, [r2, #1]!
   13794:	add	r4, r4, #1
   13798:	cmp	r3, #0
   1379c:	bne	13788 <__assert_fail@plt+0x24f8>
   137a0:	b	1236c <__assert_fail@plt+0x10dc>
   137a4:	str	fp, [sp, #160]	; 0xa0
   137a8:	mov	r3, #0
   137ac:	mov	fp, r8
   137b0:	ldr	r8, [sp, #160]	; 0xa0
   137b4:	b	12bd4 <__assert_fail@plt+0x1944>
   137b8:	mov	ip, r5
   137bc:	ldr	r7, [sp, #96]	; 0x60
   137c0:	ldr	r5, [sp, #92]	; 0x5c
   137c4:	ldr	r4, [sp, #100]	; 0x64
   137c8:	ldr	r8, [sp, #84]	; 0x54
   137cc:	ldr	sl, [sp, #88]	; 0x58
   137d0:	ldr	r2, [sp, #28]
   137d4:	mov	r6, #0
   137d8:	b	1347c <__assert_fail@plt+0x21ec>
   137dc:	ldr	r2, [sp, #36]	; 0x24
   137e0:	ldrb	r1, [r2, r3]
   137e4:	sub	r2, r1, #33	; 0x21
   137e8:	cmp	r2, #29
   137ec:	ldrls	pc, [pc, r2, lsl #2]
   137f0:	b	138cc <__assert_fail@plt+0x263c>
   137f4:	andeq	r3, r1, ip, ror #16
   137f8:	andeq	r3, r1, ip, asr #17
   137fc:	andeq	r3, r1, ip, asr #17
   13800:	andeq	r3, r1, ip, asr #17
   13804:	andeq	r3, r1, ip, asr #17
   13808:	andeq	r3, r1, ip, asr #17
   1380c:	andeq	r3, r1, ip, ror #16
   13810:	andeq	r3, r1, ip, ror #16
   13814:	andeq	r3, r1, ip, ror #16
   13818:	andeq	r3, r1, ip, asr #17
   1381c:	andeq	r3, r1, ip, asr #17
   13820:	andeq	r3, r1, ip, asr #17
   13824:	andeq	r3, r1, ip, ror #16
   13828:	andeq	r3, r1, ip, asr #17
   1382c:	andeq	r3, r1, ip, ror #16
   13830:	andeq	r3, r1, ip, asr #17
   13834:	andeq	r3, r1, ip, asr #17
   13838:	andeq	r3, r1, ip, asr #17
   1383c:	andeq	r3, r1, ip, asr #17
   13840:	andeq	r3, r1, ip, asr #17
   13844:	andeq	r3, r1, ip, asr #17
   13848:	andeq	r3, r1, ip, asr #17
   1384c:	andeq	r3, r1, ip, asr #17
   13850:	andeq	r3, r1, ip, asr #17
   13854:	andeq	r3, r1, ip, asr #17
   13858:	andeq	r3, r1, ip, asr #17
   1385c:	andeq	r3, r1, ip, asr #17
   13860:	andeq	r3, r1, ip, ror #16
   13864:	andeq	r3, r1, ip, ror #16
   13868:	andeq	r3, r1, ip, ror #16
   1386c:	ldr	r2, [sp, #32]
   13870:	cmp	r2, #0
   13874:	bne	13978 <__assert_fail@plt+0x26e8>
   13878:	cmp	sl, r4
   1387c:	movhi	r2, #63	; 0x3f
   13880:	strbhi	r2, [r8, r4]
   13884:	add	r2, r4, #1
   13888:	cmp	sl, r2
   1388c:	movhi	r0, #34	; 0x22
   13890:	strbhi	r0, [r8, r2]
   13894:	add	r2, r4, #2
   13898:	cmp	sl, r2
   1389c:	movhi	r0, #34	; 0x22
   138a0:	strbhi	r0, [r8, r2]
   138a4:	add	r2, r4, #3
   138a8:	cmp	sl, r2
   138ac:	movhi	r0, #63	; 0x3f
   138b0:	strbhi	r0, [r8, r2]
   138b4:	mov	r2, #0
   138b8:	add	r4, r4, #4
   138bc:	mov	r5, r1
   138c0:	mov	r9, r3
   138c4:	mov	r6, r2
   138c8:	b	12cc4 <__assert_fail@plt+0x1a34>
   138cc:	mov	r2, #0
   138d0:	mov	r6, r2
   138d4:	b	12834 <__assert_fail@plt+0x15a4>
   138d8:	ldr	r0, [sp, #24]
   138dc:	mov	r1, r4
   138e0:	cmp	r1, r0
   138e4:	mov	r2, r7
   138e8:	mov	r3, r5
   138ec:	mov	ip, r5
   138f0:	ldr	r7, [sp, #96]	; 0x60
   138f4:	ldr	r5, [sp, #92]	; 0x5c
   138f8:	ldr	r4, [sp, #100]	; 0x64
   138fc:	ldr	r8, [sp, #84]	; 0x54
   13900:	ldr	sl, [sp, #88]	; 0x58
   13904:	bcs	13938 <__assert_fail@plt+0x26a8>
   13908:	ldrb	r6, [r2]
   1390c:	cmp	r6, #0
   13910:	bne	13924 <__assert_fail@plt+0x2694>
   13914:	b	13a54 <__assert_fail@plt+0x27c4>
   13918:	ldrb	r6, [r2, #1]!
   1391c:	cmp	r6, #0
   13920:	beq	139dc <__assert_fail@plt+0x274c>
   13924:	add	r3, r3, #1
   13928:	add	r1, r9, r3
   1392c:	cmp	r1, r0
   13930:	bcc	13918 <__assert_fail@plt+0x2688>
   13934:	mov	ip, r3
   13938:	ldr	r2, [sp, #28]
   1393c:	mov	r6, #0
   13940:	b	1347c <__assert_fail@plt+0x21ec>
   13944:	mov	r3, #1
   13948:	str	r3, [sp, #40]	; 0x28
   1394c:	str	r3, [sp, #32]
   13950:	str	r3, [sp, #28]
   13954:	str	r3, [sp, #52]	; 0x34
   13958:	ldr	r3, [pc, #-2220]	; 130b4 <__assert_fail@plt+0x1e24>
   1395c:	mov	r2, #0
   13960:	str	r2, [sp, #68]	; 0x44
   13964:	str	r2, [sp, #44]	; 0x2c
   13968:	str	r2, [sp, #72]	; 0x48
   1396c:	mov	r4, r2
   13970:	str	r3, [sp, #60]	; 0x3c
   13974:	b	1239c <__assert_fail@plt+0x110c>
   13978:	str	fp, [sp, #160]	; 0xa0
   1397c:	mov	fp, r8
   13980:	ldr	r8, [sp, #160]	; 0xa0
   13984:	b	12b4c <__assert_fail@plt+0x18bc>
   13988:	mov	r2, r3
   1398c:	ldr	r3, [sp, #60]	; 0x3c
   13990:	cmp	r3, #0
   13994:	moveq	r2, #0
   13998:	andne	r2, r2, #1
   1399c:	cmp	r2, #0
   139a0:	beq	139cc <__assert_fail@plt+0x273c>
   139a4:	mov	r2, r3
   139a8:	ldrb	r3, [r3]
   139ac:	cmp	r3, #0
   139b0:	beq	139cc <__assert_fail@plt+0x273c>
   139b4:	cmp	sl, r4
   139b8:	strbhi	r3, [fp, r4]
   139bc:	ldrb	r3, [r2, #1]!
   139c0:	add	r4, r4, #1
   139c4:	cmp	r3, #0
   139c8:	bne	139b4 <__assert_fail@plt+0x2724>
   139cc:	cmp	sl, r4
   139d0:	movhi	r3, #0
   139d4:	strbhi	r3, [fp, r4]
   139d8:	b	12b8c <__assert_fail@plt+0x18fc>
   139dc:	mov	ip, r3
   139e0:	ldr	r2, [sp, #28]
   139e4:	b	1347c <__assert_fail@plt+0x21ec>
   139e8:	str	fp, [sp, #160]	; 0xa0
   139ec:	mov	fp, r8
   139f0:	ldr	r8, [sp, #160]	; 0xa0
   139f4:	sub	r3, r8, #2
   139f8:	clz	r3, r3
   139fc:	lsr	r3, r3, #5
   13a00:	str	r3, [sp, #28]
   13a04:	b	12b40 <__assert_fail@plt+0x18b0>
   13a08:	ldr	r3, [sp, #76]	; 0x4c
   13a0c:	mov	ip, #5
   13a10:	str	r3, [sp, #16]
   13a14:	ldr	r3, [sp, #80]	; 0x50
   13a18:	ldr	r2, [sp, #36]	; 0x24
   13a1c:	str	r3, [sp, #12]
   13a20:	ldr	r3, [sp, #56]	; 0x38
   13a24:	ldr	r1, [sp, #72]	; 0x48
   13a28:	str	r3, [sp, #8]
   13a2c:	ldr	r3, [sp, #164]	; 0xa4
   13a30:	mov	r0, fp
   13a34:	str	r3, [sp, #4]
   13a38:	str	ip, [sp]
   13a3c:	ldr	r3, [sp, #24]
   13a40:	bl	122a4 <__assert_fail@plt+0x1014>
   13a44:	mov	r4, r0
   13a48:	b	12b8c <__assert_fail@plt+0x18fc>
   13a4c:	mov	r8, #2
   13a50:	b	12b40 <__assert_fail@plt+0x18b0>
   13a54:	ldr	r2, [sp, #28]
   13a58:	b	1347c <__assert_fail@plt+0x21ec>
   13a5c:	mov	r3, #0
   13a60:	str	r3, [sp, #68]	; 0x44
   13a64:	str	r3, [sp, #44]	; 0x2c
   13a68:	str	r3, [sp, #72]	; 0x48
   13a6c:	str	r3, [sp, #28]
   13a70:	mov	r4, r3
   13a74:	ldr	r3, [pc, #-2500]	; 130b8 <__assert_fail@plt+0x1e28>
   13a78:	mov	r2, #1
   13a7c:	str	r2, [sp, #40]	; 0x28
   13a80:	str	r2, [sp, #32]
   13a84:	str	r2, [sp, #52]	; 0x34
   13a88:	str	r3, [sp, #60]	; 0x3c
   13a8c:	b	1239c <__assert_fail@plt+0x110c>
   13a90:	bl	11038 <__stack_chk_fail@plt>
   13a94:	mov	r5, r3
   13a98:	mov	r6, #0
   13a9c:	b	12890 <__assert_fail@plt+0x1600>
   13aa0:	mov	r3, #0
   13aa4:	mov	r2, #1
   13aa8:	str	r3, [sp, #44]	; 0x2c
   13aac:	str	r3, [sp, #72]	; 0x48
   13ab0:	str	r2, [sp, #40]	; 0x28
   13ab4:	b	129ac <__assert_fail@plt+0x171c>
   13ab8:	bl	11260 <abort@plt>
   13abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ac0:	sub	sp, sp, #44	; 0x2c
   13ac4:	mov	r6, r0
   13ac8:	mov	r4, r3
   13acc:	mov	sl, r1
   13ad0:	mov	fp, r2
   13ad4:	bl	11158 <__errno_location@plt>
   13ad8:	ldr	r7, [pc, #364]	; 13c4c <__assert_fail@plt+0x29bc>
   13adc:	cmp	r6, #0
   13ae0:	ldr	r5, [r7]
   13ae4:	ldr	r3, [r0]
   13ae8:	str	r3, [sp, #24]
   13aec:	blt	13c48 <__assert_fail@plt+0x29b8>
   13af0:	ldr	r3, [r7, #4]
   13af4:	mov	r8, r0
   13af8:	cmp	r3, r6
   13afc:	bgt	13b48 <__assert_fail@plt+0x28b8>
   13b00:	cmn	r6, #-268435454	; 0xf0000002
   13b04:	bgt	13c44 <__assert_fail@plt+0x29b4>
   13b08:	add	r9, r6, #1
   13b0c:	add	r3, r7, #8
   13b10:	cmp	r5, r3
   13b14:	lsl	r1, r9, #3
   13b18:	beq	13c24 <__assert_fail@plt+0x2994>
   13b1c:	mov	r0, r5
   13b20:	bl	14b84 <__assert_fail@plt+0x38f4>
   13b24:	mov	r5, r0
   13b28:	str	r0, [r7]
   13b2c:	ldr	r0, [r7, #4]
   13b30:	mov	r1, #0
   13b34:	sub	r2, r9, r0
   13b38:	add	r0, r5, r0, lsl #3
   13b3c:	lsl	r2, r2, #3
   13b40:	bl	11194 <memset@plt>
   13b44:	str	r9, [r7, #4]
   13b48:	add	r3, r5, r6, lsl #3
   13b4c:	ldr	r1, [r4, #4]
   13b50:	ldr	r7, [r3, #4]
   13b54:	ldr	r9, [r5, r6, lsl #3]
   13b58:	ldr	r2, [r4, #40]	; 0x28
   13b5c:	ldr	ip, [r4, #44]	; 0x2c
   13b60:	str	r3, [sp, #28]
   13b64:	ldr	r3, [r4]
   13b68:	orr	r1, r1, #1
   13b6c:	add	lr, r4, #8
   13b70:	str	r1, [sp, #36]	; 0x24
   13b74:	str	r1, [sp, #4]
   13b78:	str	r2, [sp, #12]
   13b7c:	str	r3, [sp]
   13b80:	mov	r0, r7
   13b84:	mov	r1, r9
   13b88:	str	ip, [sp, #16]
   13b8c:	str	lr, [sp, #8]
   13b90:	mov	r3, fp
   13b94:	mov	r2, sl
   13b98:	str	lr, [sp, #32]
   13b9c:	bl	122a4 <__assert_fail@plt+0x1014>
   13ba0:	cmp	r9, r0
   13ba4:	bhi	13c10 <__assert_fail@plt+0x2980>
   13ba8:	ldr	r3, [pc, #160]	; 13c50 <__assert_fail@plt+0x29c0>
   13bac:	add	r9, r0, #1
   13bb0:	cmp	r7, r3
   13bb4:	str	r9, [r5, r6, lsl #3]
   13bb8:	beq	13bc4 <__assert_fail@plt+0x2934>
   13bbc:	mov	r0, r7
   13bc0:	bl	10fe4 <free@plt>
   13bc4:	mov	r0, r9
   13bc8:	bl	14b28 <__assert_fail@plt+0x3898>
   13bcc:	ldr	lr, [sp, #28]
   13bd0:	ldr	ip, [r4, #44]	; 0x2c
   13bd4:	ldr	r5, [r4, #40]	; 0x28
   13bd8:	mov	r3, fp
   13bdc:	mov	r2, sl
   13be0:	mov	r1, r9
   13be4:	str	r0, [lr, #4]
   13be8:	ldr	lr, [r4]
   13bec:	ldr	r4, [sp, #32]
   13bf0:	str	ip, [sp, #16]
   13bf4:	str	r4, [sp, #8]
   13bf8:	ldr	r4, [sp, #36]	; 0x24
   13bfc:	str	r5, [sp, #12]
   13c00:	str	r4, [sp, #4]
   13c04:	str	lr, [sp]
   13c08:	mov	r7, r0
   13c0c:	bl	122a4 <__assert_fail@plt+0x1014>
   13c10:	ldr	r3, [sp, #24]
   13c14:	mov	r0, r7
   13c18:	str	r3, [r8]
   13c1c:	add	sp, sp, #44	; 0x2c
   13c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c24:	mov	r0, #0
   13c28:	bl	14b84 <__assert_fail@plt+0x38f4>
   13c2c:	ldr	r3, [pc, #32]	; 13c54 <__assert_fail@plt+0x29c4>
   13c30:	mov	r5, r0
   13c34:	ldm	r3, {r0, r1}
   13c38:	str	r5, [r7]
   13c3c:	stm	r5, {r0, r1}
   13c40:	b	13b2c <__assert_fail@plt+0x289c>
   13c44:	bl	14d70 <__assert_fail@plt+0x3ae0>
   13c48:	bl	11260 <abort@plt>
   13c4c:	andeq	r8, r2, r8, lsr #2
   13c50:	muleq	r2, r4, r1
   13c54:	andeq	r8, r2, r0, lsr r1
   13c58:	push	{r4, r5, r6, lr}
   13c5c:	mov	r5, r0
   13c60:	bl	11158 <__errno_location@plt>
   13c64:	cmp	r5, #0
   13c68:	mov	r1, #48	; 0x30
   13c6c:	mov	r4, r0
   13c70:	ldr	r0, [pc, #16]	; 13c88 <__assert_fail@plt+0x29f8>
   13c74:	ldr	r6, [r4]
   13c78:	movne	r0, r5
   13c7c:	bl	14d30 <__assert_fail@plt+0x3aa0>
   13c80:	str	r6, [r4]
   13c84:	pop	{r4, r5, r6, pc}
   13c88:	muleq	r2, r4, r2
   13c8c:	ldr	r3, [pc, #12]	; 13ca0 <__assert_fail@plt+0x2a10>
   13c90:	cmp	r0, #0
   13c94:	moveq	r0, r3
   13c98:	ldr	r0, [r0]
   13c9c:	bx	lr
   13ca0:	muleq	r2, r4, r2
   13ca4:	ldr	r3, [pc, #12]	; 13cb8 <__assert_fail@plt+0x2a28>
   13ca8:	cmp	r0, #0
   13cac:	moveq	r0, r3
   13cb0:	str	r1, [r0]
   13cb4:	bx	lr
   13cb8:	muleq	r2, r4, r2
   13cbc:	ldr	r3, [pc, #52]	; 13cf8 <__assert_fail@plt+0x2a68>
   13cc0:	cmp	r0, #0
   13cc4:	moveq	r0, r3
   13cc8:	add	r3, r0, #8
   13ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   13cd0:	lsr	lr, r1, #5
   13cd4:	and	r1, r1, #31
   13cd8:	ldr	ip, [r3, lr, lsl #2]
   13cdc:	lsr	r0, ip, r1
   13ce0:	eor	r2, r2, r0
   13ce4:	and	r2, r2, #1
   13ce8:	and	r0, r0, #1
   13cec:	eor	r1, ip, r2, lsl r1
   13cf0:	str	r1, [r3, lr, lsl #2]
   13cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf8:	muleq	r2, r4, r2
   13cfc:	ldr	r3, [pc, #16]	; 13d14 <__assert_fail@plt+0x2a84>
   13d00:	cmp	r0, #0
   13d04:	movne	r3, r0
   13d08:	ldr	r0, [r3, #4]
   13d0c:	str	r1, [r3, #4]
   13d10:	bx	lr
   13d14:	muleq	r2, r4, r2
   13d18:	ldr	r3, [pc, #44]	; 13d4c <__assert_fail@plt+0x2abc>
   13d1c:	cmp	r0, #0
   13d20:	moveq	r0, r3
   13d24:	mov	ip, #10
   13d28:	cmp	r2, #0
   13d2c:	cmpne	r1, #0
   13d30:	str	ip, [r0]
   13d34:	beq	13d44 <__assert_fail@plt+0x2ab4>
   13d38:	str	r1, [r0, #40]	; 0x28
   13d3c:	str	r2, [r0, #44]	; 0x2c
   13d40:	bx	lr
   13d44:	push	{r4, lr}
   13d48:	bl	11260 <abort@plt>
   13d4c:	muleq	r2, r4, r2
   13d50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d54:	sub	sp, sp, #24
   13d58:	ldr	ip, [pc, #108]	; 13dcc <__assert_fail@plt+0x2b3c>
   13d5c:	ldr	r4, [sp, #56]	; 0x38
   13d60:	mov	r9, r2
   13d64:	cmp	r4, #0
   13d68:	moveq	r4, ip
   13d6c:	mov	sl, r3
   13d70:	mov	r7, r0
   13d74:	mov	r8, r1
   13d78:	bl	11158 <__errno_location@plt>
   13d7c:	ldr	r3, [r4, #44]	; 0x2c
   13d80:	mov	r1, r8
   13d84:	ldr	r6, [r0]
   13d88:	str	r3, [sp, #16]
   13d8c:	ldr	r2, [r4, #40]	; 0x28
   13d90:	add	r3, r4, #8
   13d94:	str	r3, [sp, #8]
   13d98:	str	r2, [sp, #12]
   13d9c:	ldr	r2, [r4, #4]
   13da0:	mov	r5, r0
   13da4:	str	r2, [sp, #4]
   13da8:	ldr	ip, [r4]
   13dac:	mov	r3, sl
   13db0:	mov	r2, r9
   13db4:	mov	r0, r7
   13db8:	str	ip, [sp]
   13dbc:	bl	122a4 <__assert_fail@plt+0x1014>
   13dc0:	str	r6, [r5]
   13dc4:	add	sp, sp, #24
   13dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13dcc:	muleq	r2, r4, r2
   13dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd4:	cmp	r3, #0
   13dd8:	sub	sp, sp, #44	; 0x2c
   13ddc:	ldr	r4, [pc, #192]	; 13ea4 <__assert_fail@plt+0x2c14>
   13de0:	mov	r6, r2
   13de4:	movne	r4, r3
   13de8:	mov	r9, r1
   13dec:	mov	r8, r0
   13df0:	bl	11158 <__errno_location@plt>
   13df4:	ldr	r3, [r4, #44]	; 0x2c
   13df8:	ldr	r5, [r4, #4]
   13dfc:	add	sl, r4, #8
   13e00:	cmp	r6, #0
   13e04:	orreq	r5, r5, #1
   13e08:	mov	r1, #0
   13e0c:	ldr	r2, [r0]
   13e10:	str	r3, [sp, #16]
   13e14:	ldr	r3, [r4, #40]	; 0x28
   13e18:	stmib	sp, {r5, sl}
   13e1c:	str	r3, [sp, #12]
   13e20:	ldr	r3, [r4]
   13e24:	mov	r7, r0
   13e28:	str	r2, [sp, #28]
   13e2c:	str	r3, [sp]
   13e30:	mov	r2, r8
   13e34:	mov	r3, r9
   13e38:	mov	r0, r1
   13e3c:	bl	122a4 <__assert_fail@plt+0x1014>
   13e40:	add	r1, r0, #1
   13e44:	mov	fp, r0
   13e48:	mov	r0, r1
   13e4c:	str	r1, [sp, #36]	; 0x24
   13e50:	bl	14b28 <__assert_fail@plt+0x3898>
   13e54:	ldr	r3, [r4, #44]	; 0x2c
   13e58:	mov	r2, r8
   13e5c:	str	r3, [sp, #16]
   13e60:	ldr	r3, [r4, #40]	; 0x28
   13e64:	str	r5, [sp, #4]
   13e68:	str	r3, [sp, #12]
   13e6c:	str	sl, [sp, #8]
   13e70:	ldr	ip, [r4]
   13e74:	ldr	r1, [sp, #36]	; 0x24
   13e78:	mov	r3, r9
   13e7c:	str	ip, [sp]
   13e80:	str	r0, [sp, #32]
   13e84:	bl	122a4 <__assert_fail@plt+0x1014>
   13e88:	ldr	r2, [sp, #28]
   13e8c:	cmp	r6, #0
   13e90:	str	r2, [r7]
   13e94:	ldr	r0, [sp, #32]
   13e98:	strne	fp, [r6]
   13e9c:	add	sp, sp, #44	; 0x2c
   13ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea4:	muleq	r2, r4, r2
   13ea8:	mov	r3, r2
   13eac:	mov	r2, #0
   13eb0:	b	13dd0 <__assert_fail@plt+0x2b40>
   13eb4:	push	{r4, r5, r6, r7, r8, lr}
   13eb8:	ldr	r6, [pc, #112]	; 13f30 <__assert_fail@plt+0x2ca0>
   13ebc:	ldr	r3, [r6, #4]
   13ec0:	ldr	r7, [r6]
   13ec4:	cmp	r3, #1
   13ec8:	ble	13eec <__assert_fail@plt+0x2c5c>
   13ecc:	sub	r5, r7, #8
   13ed0:	add	r5, r5, r3, lsl #3
   13ed4:	mov	r4, r7
   13ed8:	ldr	r0, [r4, #12]
   13edc:	add	r4, r4, #8
   13ee0:	bl	10fe4 <free@plt>
   13ee4:	cmp	r4, r5
   13ee8:	bne	13ed8 <__assert_fail@plt+0x2c48>
   13eec:	ldr	r0, [r7, #4]
   13ef0:	ldr	r4, [pc, #60]	; 13f34 <__assert_fail@plt+0x2ca4>
   13ef4:	cmp	r0, r4
   13ef8:	beq	13f0c <__assert_fail@plt+0x2c7c>
   13efc:	bl	10fe4 <free@plt>
   13f00:	mov	r3, #256	; 0x100
   13f04:	str	r4, [r6, #12]
   13f08:	str	r3, [r6, #8]
   13f0c:	ldr	r4, [pc, #36]	; 13f38 <__assert_fail@plt+0x2ca8>
   13f10:	cmp	r7, r4
   13f14:	beq	13f24 <__assert_fail@plt+0x2c94>
   13f18:	mov	r0, r7
   13f1c:	bl	10fe4 <free@plt>
   13f20:	str	r4, [r6]
   13f24:	mov	r3, #1
   13f28:	str	r3, [r6, #4]
   13f2c:	pop	{r4, r5, r6, r7, r8, pc}
   13f30:	andeq	r8, r2, r8, lsr #2
   13f34:	muleq	r2, r4, r1
   13f38:	andeq	r8, r2, r0, lsr r1
   13f3c:	ldr	r3, [pc, #4]	; 13f48 <__assert_fail@plt+0x2cb8>
   13f40:	mvn	r2, #0
   13f44:	b	13abc <__assert_fail@plt+0x282c>
   13f48:	muleq	r2, r4, r2
   13f4c:	ldr	r3, [pc]	; 13f54 <__assert_fail@plt+0x2cc4>
   13f50:	b	13abc <__assert_fail@plt+0x282c>
   13f54:	muleq	r2, r4, r2
   13f58:	mov	r1, r0
   13f5c:	ldr	r3, [pc, #8]	; 13f6c <__assert_fail@plt+0x2cdc>
   13f60:	mvn	r2, #0
   13f64:	mov	r0, #0
   13f68:	b	13abc <__assert_fail@plt+0x282c>
   13f6c:	muleq	r2, r4, r2
   13f70:	mov	r2, r1
   13f74:	ldr	r3, [pc, #8]	; 13f84 <__assert_fail@plt+0x2cf4>
   13f78:	mov	r1, r0
   13f7c:	mov	r0, #0
   13f80:	b	13abc <__assert_fail@plt+0x282c>
   13f84:	muleq	r2, r4, r2
   13f88:	push	{r4, r5, r6, lr}
   13f8c:	sub	sp, sp, #56	; 0x38
   13f90:	ldr	r4, [pc, #68]	; 13fdc <__assert_fail@plt+0x2d4c>
   13f94:	mov	r6, r2
   13f98:	mov	r5, r0
   13f9c:	ldr	r3, [r4]
   13fa0:	add	r0, sp, #4
   13fa4:	str	r3, [sp, #52]	; 0x34
   13fa8:	bl	12134 <__assert_fail@plt+0xea4>
   13fac:	add	r3, sp, #4
   13fb0:	mvn	r2, #0
   13fb4:	mov	r1, r6
   13fb8:	mov	r0, r5
   13fbc:	bl	13abc <__assert_fail@plt+0x282c>
   13fc0:	ldr	r2, [sp, #52]	; 0x34
   13fc4:	ldr	r3, [r4]
   13fc8:	cmp	r2, r3
   13fcc:	bne	13fd8 <__assert_fail@plt+0x2d48>
   13fd0:	add	sp, sp, #56	; 0x38
   13fd4:	pop	{r4, r5, r6, pc}
   13fd8:	bl	11038 <__stack_chk_fail@plt>
   13fdc:	andeq	r7, r2, r8, lsl #30
   13fe0:	push	{r4, r5, r6, r7, lr}
   13fe4:	sub	sp, sp, #60	; 0x3c
   13fe8:	ldr	r4, [pc, #72]	; 14038 <__assert_fail@plt+0x2da8>
   13fec:	mov	r6, r2
   13ff0:	mov	r7, r3
   13ff4:	ldr	ip, [r4]
   13ff8:	mov	r5, r0
   13ffc:	add	r0, sp, #4
   14000:	str	ip, [sp, #52]	; 0x34
   14004:	bl	12134 <__assert_fail@plt+0xea4>
   14008:	add	r3, sp, #4
   1400c:	mov	r2, r7
   14010:	mov	r1, r6
   14014:	mov	r0, r5
   14018:	bl	13abc <__assert_fail@plt+0x282c>
   1401c:	ldr	r2, [sp, #52]	; 0x34
   14020:	ldr	r3, [r4]
   14024:	cmp	r2, r3
   14028:	bne	14034 <__assert_fail@plt+0x2da4>
   1402c:	add	sp, sp, #60	; 0x3c
   14030:	pop	{r4, r5, r6, r7, pc}
   14034:	bl	11038 <__stack_chk_fail@plt>
   14038:	andeq	r7, r2, r8, lsl #30
   1403c:	mov	r2, r1
   14040:	mov	r1, r0
   14044:	mov	r0, #0
   14048:	b	13f88 <__assert_fail@plt+0x2cf8>
   1404c:	mov	r3, r2
   14050:	mov	r2, r1
   14054:	mov	r1, r0
   14058:	mov	r0, #0
   1405c:	b	13fe0 <__assert_fail@plt+0x2d50>
   14060:	push	{r4, r5, r6, r7, r8, r9, lr}
   14064:	mov	r4, r2
   14068:	ldr	lr, [pc, #128]	; 140f0 <__assert_fail@plt+0x2e60>
   1406c:	mov	r8, r0
   14070:	mov	r9, r1
   14074:	ldm	lr!, {r0, r1, r2, r3}
   14078:	sub	sp, sp, #60	; 0x3c
   1407c:	add	ip, sp, #4
   14080:	lsr	r6, r4, #5
   14084:	stmia	ip!, {r0, r1, r2, r3}
   14088:	add	r7, sp, #12
   1408c:	ldm	lr!, {r0, r1, r2, r3}
   14090:	and	r4, r4, #31
   14094:	ldr	r5, [pc, #88]	; 140f4 <__assert_fail@plt+0x2e64>
   14098:	stmia	ip!, {r0, r1, r2, r3}
   1409c:	ldm	lr, {r0, r1, r2, r3}
   140a0:	stm	ip, {r0, r1, r2, r3}
   140a4:	mov	r2, r9
   140a8:	ldr	r3, [r7, r6, lsl #2]
   140ac:	ldr	ip, [r5]
   140b0:	mov	r1, r8
   140b4:	mvn	r0, r3, lsr r4
   140b8:	and	r0, r0, #1
   140bc:	str	ip, [sp, #52]	; 0x34
   140c0:	eor	r4, r3, r0, lsl r4
   140c4:	add	r3, sp, #4
   140c8:	mov	r0, #0
   140cc:	str	r4, [r7, r6, lsl #2]
   140d0:	bl	13abc <__assert_fail@plt+0x282c>
   140d4:	ldr	r2, [sp, #52]	; 0x34
   140d8:	ldr	r3, [r5]
   140dc:	cmp	r2, r3
   140e0:	bne	140ec <__assert_fail@plt+0x2e5c>
   140e4:	add	sp, sp, #60	; 0x3c
   140e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   140ec:	bl	11038 <__stack_chk_fail@plt>
   140f0:	muleq	r2, r4, r2
   140f4:	andeq	r7, r2, r8, lsl #30
   140f8:	mov	r2, r1
   140fc:	mvn	r1, #0
   14100:	b	14060 <__assert_fail@plt+0x2dd0>
   14104:	mov	r2, #58	; 0x3a
   14108:	mvn	r1, #0
   1410c:	b	14060 <__assert_fail@plt+0x2dd0>
   14110:	mov	r2, #58	; 0x3a
   14114:	b	14060 <__assert_fail@plt+0x2dd0>
   14118:	push	{r4, r5, r6, r7, r8, lr}
   1411c:	sub	sp, sp, #104	; 0x68
   14120:	ldr	r5, [pc, #120]	; 141a0 <__assert_fail@plt+0x2f10>
   14124:	mov	r6, r0
   14128:	mov	r0, sp
   1412c:	ldr	r3, [r5]
   14130:	mov	r7, r2
   14134:	str	r3, [sp, #100]	; 0x64
   14138:	bl	12134 <__assert_fail@plt+0xea4>
   1413c:	mov	ip, sp
   14140:	add	lr, sp, #52	; 0x34
   14144:	ldm	ip!, {r0, r1, r2, r3}
   14148:	stmia	lr!, {r0, r1, r2, r3}
   1414c:	ldm	ip!, {r0, r1, r2, r3}
   14150:	ldr	r8, [sp, #64]	; 0x40
   14154:	stmia	lr!, {r0, r1, r2, r3}
   14158:	mvn	r4, r8
   1415c:	ldm	ip, {r0, r1, r2, r3}
   14160:	and	ip, r4, #67108864	; 0x4000000
   14164:	eor	ip, ip, r8
   14168:	str	ip, [sp, #64]	; 0x40
   1416c:	stm	lr, {r0, r1, r2, r3}
   14170:	add	r3, sp, #52	; 0x34
   14174:	mvn	r2, #0
   14178:	mov	r1, r7
   1417c:	mov	r0, r6
   14180:	bl	13abc <__assert_fail@plt+0x282c>
   14184:	ldr	r2, [sp, #100]	; 0x64
   14188:	ldr	r3, [r5]
   1418c:	cmp	r2, r3
   14190:	bne	1419c <__assert_fail@plt+0x2f0c>
   14194:	add	sp, sp, #104	; 0x68
   14198:	pop	{r4, r5, r6, r7, r8, pc}
   1419c:	bl	11038 <__stack_chk_fail@plt>
   141a0:	andeq	r7, r2, r8, lsl #30
   141a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   141a8:	mov	r6, r1
   141ac:	ldr	lr, [pc, #132]	; 14238 <__assert_fail@plt+0x2fa8>
   141b0:	mov	r5, r2
   141b4:	mov	r8, r0
   141b8:	mov	r9, r3
   141bc:	ldm	lr!, {r0, r1, r2, r3}
   141c0:	sub	sp, sp, #60	; 0x3c
   141c4:	add	ip, sp, #4
   141c8:	ldr	r4, [pc, #108]	; 1423c <__assert_fail@plt+0x2fac>
   141cc:	stmia	ip!, {r0, r1, r2, r3}
   141d0:	mov	r7, #10
   141d4:	ldm	lr!, {r0, r1, r2, r3}
   141d8:	cmp	r5, #0
   141dc:	cmpne	r6, #0
   141e0:	str	r7, [sp, #4]
   141e4:	stmia	ip!, {r0, r1, r2, r3}
   141e8:	ldm	lr, {r0, r1, r2, r3}
   141ec:	ldr	lr, [r4]
   141f0:	stm	ip, {r0, r1, r2, r3}
   141f4:	str	lr, [sp, #52]	; 0x34
   141f8:	beq	14234 <__assert_fail@plt+0x2fa4>
   141fc:	add	r3, sp, #4
   14200:	ldr	r2, [sp, #88]	; 0x58
   14204:	mov	r1, r9
   14208:	mov	r0, r8
   1420c:	str	r6, [sp, #44]	; 0x2c
   14210:	str	r5, [sp, #48]	; 0x30
   14214:	bl	13abc <__assert_fail@plt+0x282c>
   14218:	ldr	r2, [sp, #52]	; 0x34
   1421c:	ldr	r3, [r4]
   14220:	cmp	r2, r3
   14224:	bne	14230 <__assert_fail@plt+0x2fa0>
   14228:	add	sp, sp, #60	; 0x3c
   1422c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14230:	bl	11038 <__stack_chk_fail@plt>
   14234:	bl	11260 <abort@plt>
   14238:	muleq	r2, r4, r2
   1423c:	andeq	r7, r2, r8, lsl #30
   14240:	push	{lr}		; (str lr, [sp, #-4]!)
   14244:	sub	sp, sp, #12
   14248:	mvn	ip, #0
   1424c:	str	ip, [sp]
   14250:	bl	141a4 <__assert_fail@plt+0x2f14>
   14254:	add	sp, sp, #12
   14258:	pop	{pc}		; (ldr pc, [sp], #4)
   1425c:	push	{lr}		; (str lr, [sp, #-4]!)
   14260:	sub	sp, sp, #12
   14264:	mvn	ip, #0
   14268:	mov	r3, r2
   1426c:	str	ip, [sp]
   14270:	mov	r2, r1
   14274:	mov	r1, r0
   14278:	mov	r0, #0
   1427c:	bl	141a4 <__assert_fail@plt+0x2f14>
   14280:	add	sp, sp, #12
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	push	{lr}		; (str lr, [sp, #-4]!)
   1428c:	sub	sp, sp, #12
   14290:	str	r3, [sp]
   14294:	mov	r3, r2
   14298:	mov	r2, r1
   1429c:	mov	r1, r0
   142a0:	mov	r0, #0
   142a4:	bl	141a4 <__assert_fail@plt+0x2f14>
   142a8:	add	sp, sp, #12
   142ac:	pop	{pc}		; (ldr pc, [sp], #4)
   142b0:	ldr	r3, [pc]	; 142b8 <__assert_fail@plt+0x3028>
   142b4:	b	13abc <__assert_fail@plt+0x282c>
   142b8:	andeq	r8, r2, r8, lsr r1
   142bc:	mov	r2, r1
   142c0:	ldr	r3, [pc, #8]	; 142d0 <__assert_fail@plt+0x3040>
   142c4:	mov	r1, r0
   142c8:	mov	r0, #0
   142cc:	b	13abc <__assert_fail@plt+0x282c>
   142d0:	andeq	r8, r2, r8, lsr r1
   142d4:	ldr	r3, [pc, #4]	; 142e0 <__assert_fail@plt+0x3050>
   142d8:	mvn	r2, #0
   142dc:	b	13abc <__assert_fail@plt+0x282c>
   142e0:	andeq	r8, r2, r8, lsr r1
   142e4:	mov	r1, r0
   142e8:	ldr	r3, [pc, #8]	; 142f8 <__assert_fail@plt+0x3068>
   142ec:	mvn	r2, #0
   142f0:	mov	r0, #0
   142f4:	b	13abc <__assert_fail@plt+0x282c>
   142f8:	andeq	r8, r2, r8, lsr r1
   142fc:	push	{r4, r5, lr}
   14300:	sub	sp, sp, #116	; 0x74
   14304:	ldr	r4, [pc, #104]	; 14374 <__assert_fail@plt+0x30e4>
   14308:	mov	r1, r0
   1430c:	mov	r2, sp
   14310:	ldr	r3, [r4]
   14314:	mov	r0, #3
   14318:	str	r3, [sp, #108]	; 0x6c
   1431c:	bl	11278 <__lxstat64@plt>
   14320:	mov	r5, r0
   14324:	bl	11158 <__errno_location@plt>
   14328:	cmp	r5, #0
   1432c:	beq	14348 <__assert_fail@plt+0x30b8>
   14330:	ldr	r3, [r0]
   14334:	cmp	r3, #75	; 0x4b
   14338:	beq	14348 <__assert_fail@plt+0x30b8>
   1433c:	subs	r3, r3, #2
   14340:	mvnne	r3, #0
   14344:	b	14354 <__assert_fail@plt+0x30c4>
   14348:	mvn	r3, #0
   1434c:	mov	r2, #17
   14350:	str	r2, [r0]
   14354:	ldr	r1, [sp, #108]	; 0x6c
   14358:	ldr	r2, [r4]
   1435c:	mov	r0, r3
   14360:	cmp	r1, r2
   14364:	bne	14370 <__assert_fail@plt+0x30e0>
   14368:	add	sp, sp, #116	; 0x74
   1436c:	pop	{r4, r5, pc}
   14370:	bl	11038 <__stack_chk_fail@plt>
   14374:	andeq	r7, r2, r8, lsl #30
   14378:	mov	r1, #448	; 0x1c0
   1437c:	b	11170 <mkdir@plt>
   14380:	ldr	r1, [r1]
   14384:	mov	r2, #384	; 0x180
   14388:	bic	r1, r1, #195	; 0xc3
   1438c:	orr	r1, r1, #194	; 0xc2
   14390:	b	110bc <open64@plt>
   14394:	push	{r4, lr}
   14398:	ldr	r3, [pc, #12]	; 143ac <__assert_fail@plt+0x311c>
   1439c:	ldr	r2, [pc, #12]	; 143b0 <__assert_fail@plt+0x3120>
   143a0:	ldr	r1, [pc, #12]	; 143b4 <__assert_fail@plt+0x3124>
   143a4:	ldr	r0, [pc, #12]	; 143b8 <__assert_fail@plt+0x3128>
   143a8:	bl	11290 <__assert_fail@plt>
   143ac:	andeq	r6, r1, r4, lsl #24
   143b0:	andeq	r0, r0, r7, asr #2
   143b4:	andeq	r6, r1, r4, ror #24
   143b8:	andeq	r6, r1, r4, ror ip
   143bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c0:	sub	sp, sp, #20
   143c4:	mov	r4, r1
   143c8:	strd	r2, [sp]
   143cc:	mov	sl, r0
   143d0:	bl	11158 <__errno_location@plt>
   143d4:	ldr	r9, [sp, #56]	; 0x38
   143d8:	mov	fp, r0
   143dc:	mov	r0, sl
   143e0:	bl	1114c <strlen@plt>
   143e4:	add	r3, r4, r9
   143e8:	ldr	r2, [fp]
   143ec:	str	r2, [sp, #12]
   143f0:	cmp	r3, r0
   143f4:	bhi	144ec <__assert_fail@plt+0x325c>
   143f8:	sub	r4, r0, r3
   143fc:	add	r3, sl, r4
   14400:	mov	r0, r3
   14404:	ldr	r1, [pc, #248]	; 14504 <__assert_fail@plt+0x3274>
   14408:	str	r3, [sp, #8]
   1440c:	bl	11284 <strspn@plt>
   14410:	cmp	r9, r0
   14414:	bhi	144ec <__assert_fail@plt+0x325c>
   14418:	mov	r1, r9
   1441c:	mov	r0, #0
   14420:	bl	15078 <__assert_fail@plt+0x3de8>
   14424:	subs	r6, r0, #0
   14428:	beq	144fc <__assert_fail@plt+0x326c>
   1442c:	add	r5, sl, r9
   14430:	ldr	r8, [pc, #208]	; 14508 <__assert_fail@plt+0x3278>
   14434:	ldr	r7, [pc, #208]	; 1450c <__assert_fail@plt+0x327c>
   14438:	add	r5, r5, r4
   1443c:	cmp	r9, #0
   14440:	ldrne	r4, [sp, #8]
   14444:	beq	1446c <__assert_fail@plt+0x31dc>
   14448:	mov	r3, #0
   1444c:	mov	r2, #61	; 0x3d
   14450:	mov	r0, r6
   14454:	bl	150b8 <__assert_fail@plt+0x3e28>
   14458:	add	r0, r7, r0
   1445c:	ldrb	r3, [r0, #20]
   14460:	strb	r3, [r4], #1
   14464:	cmp	r4, r5
   14468:	bne	14448 <__assert_fail@plt+0x31b8>
   1446c:	ldr	r1, [sp]
   14470:	mov	r0, sl
   14474:	ldr	r3, [sp, #4]
   14478:	blx	r3
   1447c:	cmp	r0, #0
   14480:	bge	144b4 <__assert_fail@plt+0x3224>
   14484:	ldr	r4, [fp]
   14488:	cmp	r4, #17
   1448c:	bne	144e4 <__assert_fail@plt+0x3254>
   14490:	subs	r8, r8, #1
   14494:	bne	1443c <__assert_fail@plt+0x31ac>
   14498:	mov	r0, r6
   1449c:	bl	152a4 <__assert_fail@plt+0x4014>
   144a0:	mvn	r3, #0
   144a4:	mov	r0, r3
   144a8:	str	r4, [fp]
   144ac:	add	sp, sp, #20
   144b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b4:	ldr	r2, [sp, #12]
   144b8:	mov	r3, r0
   144bc:	mov	r4, r2
   144c0:	str	r2, [fp]
   144c4:	mov	r0, r6
   144c8:	str	r3, [sp]
   144cc:	bl	152a4 <__assert_fail@plt+0x4014>
   144d0:	ldr	r3, [sp]
   144d4:	str	r4, [fp]
   144d8:	mov	r0, r3
   144dc:	add	sp, sp, #20
   144e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e4:	mvn	r3, #0
   144e8:	b	144c4 <__assert_fail@plt+0x3234>
   144ec:	mov	r3, #22
   144f0:	str	r3, [fp]
   144f4:	mvn	r3, #0
   144f8:	b	144d8 <__assert_fail@plt+0x3248>
   144fc:	mvn	r3, #0
   14500:	b	144d8 <__assert_fail@plt+0x3248>
   14504:	andeq	r6, r1, ip, asr #31
   14508:	strdeq	sl, [r3], -r8
   1450c:	andeq	r6, r1, r4, lsl #24
   14510:	push	{lr}		; (str lr, [sp, #-4]!)
   14514:	sub	sp, sp, #20
   14518:	cmp	r3, #2
   1451c:	str	r2, [sp, #12]
   14520:	bhi	14548 <__assert_fail@plt+0x32b8>
   14524:	ldr	r2, [pc, #32]	; 1454c <__assert_fail@plt+0x32bc>
   14528:	ldr	ip, [sp, #24]
   1452c:	add	r3, r2, r3, lsl #2
   14530:	str	ip, [sp]
   14534:	add	r2, sp, #12
   14538:	ldr	r3, [r3, #84]	; 0x54
   1453c:	bl	143bc <__assert_fail@plt+0x312c>
   14540:	add	sp, sp, #20
   14544:	pop	{pc}		; (ldr pc, [sp], #4)
   14548:	bl	14394 <__assert_fail@plt+0x3104>
   1454c:	andeq	r6, r1, r4, lsl #24
   14550:	push	{r4, lr}
   14554:	sub	sp, sp, #16
   14558:	ldr	r4, [pc, #76]	; 145ac <__assert_fail@plt+0x331c>
   1455c:	cmp	r3, #2
   14560:	str	r2, [sp, #8]
   14564:	ldr	ip, [r4]
   14568:	str	ip, [sp, #12]
   1456c:	bhi	145a4 <__assert_fail@plt+0x3314>
   14570:	ldr	r2, [pc, #56]	; 145b0 <__assert_fail@plt+0x3320>
   14574:	mov	ip, #6
   14578:	add	r2, r2, r3, lsl #2
   1457c:	str	ip, [sp]
   14580:	ldr	r3, [r2, #84]	; 0x54
   14584:	add	r2, sp, #8
   14588:	bl	143bc <__assert_fail@plt+0x312c>
   1458c:	ldr	r2, [sp, #12]
   14590:	ldr	r3, [r4]
   14594:	cmp	r2, r3
   14598:	bne	145a8 <__assert_fail@plt+0x3318>
   1459c:	add	sp, sp, #16
   145a0:	pop	{r4, pc}
   145a4:	bl	14394 <__assert_fail@plt+0x3104>
   145a8:	bl	11038 <__stack_chk_fail@plt>
   145ac:	andeq	r7, r2, r8, lsl #30
   145b0:	andeq	r6, r1, r4, lsl #24
   145b4:	push	{lr}		; (str lr, [sp, #-4]!)
   145b8:	sub	sp, sp, #12
   145bc:	mov	ip, #6
   145c0:	str	ip, [sp]
   145c4:	bl	143bc <__assert_fail@plt+0x312c>
   145c8:	add	sp, sp, #12
   145cc:	pop	{pc}		; (ldr pc, [sp], #4)
   145d0:	push	{r4, r5, r6, lr}
   145d4:	sub	sp, sp, #32
   145d8:	cmp	r1, #0
   145dc:	mov	r5, r0
   145e0:	ldr	r4, [sp, #48]	; 0x30
   145e4:	ldr	r6, [sp, #52]	; 0x34
   145e8:	beq	14678 <__assert_fail@plt+0x33e8>
   145ec:	strd	r2, [sp]
   145f0:	mov	r3, r1
   145f4:	ldr	r2, [pc, #828]	; 14938 <__assert_fail@plt+0x36a8>
   145f8:	mov	r1, #1
   145fc:	bl	111b8 <__fprintf_chk@plt>
   14600:	mov	r2, #5
   14604:	ldr	r1, [pc, #816]	; 1493c <__assert_fail@plt+0x36ac>
   14608:	mov	r0, #0
   1460c:	bl	1102c <dcgettext@plt>
   14610:	ldr	r3, [pc, #808]	; 14940 <__assert_fail@plt+0x36b0>
   14614:	ldr	r2, [pc, #808]	; 14944 <__assert_fail@plt+0x36b4>
   14618:	str	r3, [sp]
   1461c:	mov	r1, #1
   14620:	mov	r3, r0
   14624:	mov	r0, r5
   14628:	bl	111b8 <__fprintf_chk@plt>
   1462c:	ldr	r1, [pc, #788]	; 14948 <__assert_fail@plt+0x36b8>
   14630:	mov	r2, #5
   14634:	mov	r0, #0
   14638:	bl	1102c <dcgettext@plt>
   1463c:	mov	r1, r5
   14640:	bl	10f9c <fputs_unlocked@plt>
   14644:	cmp	r6, #9
   14648:	ldrls	pc, [pc, r6, lsl #2]
   1464c:	b	14928 <__assert_fail@plt+0x3698>
   14650:	andeq	r4, r1, r4, lsr r9
   14654:	strdeq	r4, [r1], -ip
   14658:	andeq	r4, r1, r8, lsr #14
   1465c:	andeq	r4, r1, ip, asr r7
   14660:	muleq	r1, r8, r7
   14664:	ldrdeq	r4, [r1], -r8
   14668:	andeq	r4, r1, r0, lsr #16
   1466c:	andeq	r4, r1, r0, ror r8
   14670:	andeq	r4, r1, r8, asr #17
   14674:	muleq	r1, r0, r6
   14678:	str	r3, [sp]
   1467c:	mov	r1, #1
   14680:	mov	r3, r2
   14684:	ldr	r2, [pc, #704]	; 1494c <__assert_fail@plt+0x36bc>
   14688:	bl	111b8 <__fprintf_chk@plt>
   1468c:	b	14600 <__assert_fail@plt+0x3370>
   14690:	ldr	r1, [pc, #696]	; 14950 <__assert_fail@plt+0x36c0>
   14694:	mov	r2, #5
   14698:	mov	r0, #0
   1469c:	bl	1102c <dcgettext@plt>
   146a0:	ldr	r2, [r4, #32]
   146a4:	ldr	r3, [r4, #28]
   146a8:	ldr	r1, [r4, #24]
   146ac:	str	r2, [sp, #28]
   146b0:	ldr	r2, [r4, #20]
   146b4:	str	r3, [sp, #24]
   146b8:	ldr	r3, [r4, #16]
   146bc:	str	r1, [sp, #20]
   146c0:	ldr	r1, [r4, #12]
   146c4:	str	r2, [sp, #16]
   146c8:	ldr	r2, [r4, #8]
   146cc:	str	r3, [sp, #12]
   146d0:	ldr	r3, [r4, #4]
   146d4:	str	r1, [sp, #8]
   146d8:	str	r2, [sp, #4]
   146dc:	str	r3, [sp]
   146e0:	mov	r1, #1
   146e4:	ldr	r3, [r4]
   146e8:	mov	r2, r0
   146ec:	mov	r0, r5
   146f0:	bl	111b8 <__fprintf_chk@plt>
   146f4:	add	sp, sp, #32
   146f8:	pop	{r4, r5, r6, pc}
   146fc:	mov	r2, #5
   14700:	ldr	r1, [pc, #588]	; 14954 <__assert_fail@plt+0x36c4>
   14704:	mov	r0, #0
   14708:	bl	1102c <dcgettext@plt>
   1470c:	ldr	r3, [r4]
   14710:	mov	r1, #1
   14714:	mov	r2, r0
   14718:	mov	r0, r5
   1471c:	add	sp, sp, #32
   14720:	pop	{r4, r5, r6, lr}
   14724:	b	111b8 <__fprintf_chk@plt>
   14728:	mov	r2, #5
   1472c:	ldr	r1, [pc, #548]	; 14958 <__assert_fail@plt+0x36c8>
   14730:	mov	r0, #0
   14734:	bl	1102c <dcgettext@plt>
   14738:	ldr	r2, [r4, #4]
   1473c:	ldr	r3, [r4]
   14740:	mov	r1, #1
   14744:	str	r2, [sp, #48]	; 0x30
   14748:	mov	r2, r0
   1474c:	mov	r0, r5
   14750:	add	sp, sp, #32
   14754:	pop	{r4, r5, r6, lr}
   14758:	b	111b8 <__fprintf_chk@plt>
   1475c:	mov	r2, #5
   14760:	ldr	r1, [pc, #500]	; 1495c <__assert_fail@plt+0x36cc>
   14764:	mov	r0, #0
   14768:	bl	1102c <dcgettext@plt>
   1476c:	ldr	r2, [r4, #8]
   14770:	ldr	r3, [r4, #4]
   14774:	mov	r1, #1
   14778:	str	r2, [sp, #52]	; 0x34
   1477c:	str	r3, [sp, #48]	; 0x30
   14780:	ldr	r3, [r4]
   14784:	mov	r2, r0
   14788:	mov	r0, r5
   1478c:	add	sp, sp, #32
   14790:	pop	{r4, r5, r6, lr}
   14794:	b	111b8 <__fprintf_chk@plt>
   14798:	mov	r2, #5
   1479c:	ldr	r1, [pc, #444]	; 14960 <__assert_fail@plt+0x36d0>
   147a0:	mov	r0, #0
   147a4:	bl	1102c <dcgettext@plt>
   147a8:	ldr	r1, [r4, #12]
   147ac:	ldr	r2, [r4, #8]
   147b0:	ldr	r3, [r4, #4]
   147b4:	str	r1, [sp, #8]
   147b8:	str	r2, [sp, #4]
   147bc:	str	r3, [sp]
   147c0:	mov	r1, #1
   147c4:	ldr	r3, [r4]
   147c8:	mov	r2, r0
   147cc:	mov	r0, r5
   147d0:	bl	111b8 <__fprintf_chk@plt>
   147d4:	b	146f4 <__assert_fail@plt+0x3464>
   147d8:	mov	r2, #5
   147dc:	ldr	r1, [pc, #384]	; 14964 <__assert_fail@plt+0x36d4>
   147e0:	mov	r0, #0
   147e4:	bl	1102c <dcgettext@plt>
   147e8:	ldr	r3, [r4, #16]
   147ec:	ldr	r1, [r4, #12]
   147f0:	ldr	r2, [r4, #8]
   147f4:	str	r3, [sp, #12]
   147f8:	ldr	r3, [r4, #4]
   147fc:	str	r1, [sp, #8]
   14800:	str	r2, [sp, #4]
   14804:	str	r3, [sp]
   14808:	mov	r1, #1
   1480c:	ldr	r3, [r4]
   14810:	mov	r2, r0
   14814:	mov	r0, r5
   14818:	bl	111b8 <__fprintf_chk@plt>
   1481c:	b	146f4 <__assert_fail@plt+0x3464>
   14820:	mov	r2, #5
   14824:	ldr	r1, [pc, #316]	; 14968 <__assert_fail@plt+0x36d8>
   14828:	mov	r0, #0
   1482c:	bl	1102c <dcgettext@plt>
   14830:	ldr	r2, [r4, #20]
   14834:	ldr	r3, [r4, #16]
   14838:	ldr	r1, [r4, #12]
   1483c:	str	r2, [sp, #16]
   14840:	ldr	r2, [r4, #8]
   14844:	str	r3, [sp, #12]
   14848:	ldr	r3, [r4, #4]
   1484c:	str	r1, [sp, #8]
   14850:	str	r2, [sp, #4]
   14854:	str	r3, [sp]
   14858:	mov	r1, #1
   1485c:	ldr	r3, [r4]
   14860:	mov	r2, r0
   14864:	mov	r0, r5
   14868:	bl	111b8 <__fprintf_chk@plt>
   1486c:	b	146f4 <__assert_fail@plt+0x3464>
   14870:	mov	r2, #5
   14874:	ldr	r1, [pc, #240]	; 1496c <__assert_fail@plt+0x36dc>
   14878:	mov	r0, #0
   1487c:	bl	1102c <dcgettext@plt>
   14880:	ldr	r1, [r4, #24]
   14884:	ldr	r2, [r4, #20]
   14888:	ldr	r3, [r4, #16]
   1488c:	str	r1, [sp, #20]
   14890:	ldr	r1, [r4, #12]
   14894:	str	r2, [sp, #16]
   14898:	ldr	r2, [r4, #8]
   1489c:	str	r3, [sp, #12]
   148a0:	ldr	r3, [r4, #4]
   148a4:	str	r1, [sp, #8]
   148a8:	str	r2, [sp, #4]
   148ac:	str	r3, [sp]
   148b0:	mov	r1, #1
   148b4:	ldr	r3, [r4]
   148b8:	mov	r2, r0
   148bc:	mov	r0, r5
   148c0:	bl	111b8 <__fprintf_chk@plt>
   148c4:	b	146f4 <__assert_fail@plt+0x3464>
   148c8:	mov	r2, #5
   148cc:	ldr	r1, [pc, #156]	; 14970 <__assert_fail@plt+0x36e0>
   148d0:	mov	r0, #0
   148d4:	bl	1102c <dcgettext@plt>
   148d8:	ldr	r3, [r4, #28]
   148dc:	ldr	r1, [r4, #24]
   148e0:	ldr	r2, [r4, #20]
   148e4:	str	r3, [sp, #24]
   148e8:	ldr	r3, [r4, #16]
   148ec:	str	r1, [sp, #20]
   148f0:	ldr	r1, [r4, #12]
   148f4:	str	r2, [sp, #16]
   148f8:	ldr	r2, [r4, #8]
   148fc:	str	r3, [sp, #12]
   14900:	ldr	r3, [r4, #4]
   14904:	str	r1, [sp, #8]
   14908:	str	r2, [sp, #4]
   1490c:	str	r3, [sp]
   14910:	mov	r1, #1
   14914:	ldr	r3, [r4]
   14918:	mov	r2, r0
   1491c:	mov	r0, r5
   14920:	bl	111b8 <__fprintf_chk@plt>
   14924:	b	146f4 <__assert_fail@plt+0x3464>
   14928:	mov	r2, #5
   1492c:	ldr	r1, [pc, #64]	; 14974 <__assert_fail@plt+0x36e4>
   14930:	b	14698 <__assert_fail@plt+0x3408>
   14934:	bl	11260 <abort@plt>
   14938:	muleq	r1, r8, ip
   1493c:	andeq	r6, r1, ip, lsr #25
   14940:	andeq	r0, r0, r2, ror #15
   14944:	andeq	r6, r1, r0, lsl #31
   14948:			; <UNDEFINED> instruction: 0x00016cb0
   1494c:	andeq	r6, r1, r4, lsr #25
   14950:	andeq	r6, r1, r8, lsl #29
   14954:	andeq	r6, r1, ip, ror sp
   14958:	andeq	r6, r1, ip, lsl #27
   1495c:	andeq	r6, r1, r4, lsr #27
   14960:	andeq	r6, r1, r0, asr #27
   14964:	andeq	r6, r1, r0, ror #27
   14968:	andeq	r6, r1, r4, lsl #28
   1496c:	andeq	r6, r1, ip, lsr #28
   14970:	andeq	r6, r1, r8, asr lr
   14974:			; <UNDEFINED> instruction: 0x00016ebc
   14978:	push	{r4, r5, lr}
   1497c:	sub	sp, sp, #12
   14980:	ldr	r5, [sp, #24]
   14984:	ldr	ip, [r5]
   14988:	cmp	ip, #0
   1498c:	beq	149a8 <__assert_fail@plt+0x3718>
   14990:	mov	lr, r5
   14994:	mov	ip, #0
   14998:	ldr	r4, [lr, #4]!
   1499c:	add	ip, ip, #1
   149a0:	cmp	r4, #0
   149a4:	bne	14998 <__assert_fail@plt+0x3708>
   149a8:	stm	sp, {r5, ip}
   149ac:	bl	145d0 <__assert_fail@plt+0x3340>
   149b0:	add	sp, sp, #12
   149b4:	pop	{r4, r5, pc}
   149b8:	push	{r4, r5, r6, lr}
   149bc:	sub	sp, sp, #56	; 0x38
   149c0:	ldr	r6, [pc, #88]	; 14a20 <__assert_fail@plt+0x3790>
   149c4:	ldr	r5, [sp, #72]	; 0x48
   149c8:	add	r4, sp, #8
   149cc:	ldr	ip, [r6]
   149d0:	str	ip, [sp, #52]	; 0x34
   149d4:	mov	ip, #0
   149d8:	ldr	lr, [r5], #4
   149dc:	cmp	lr, #0
   149e0:	str	lr, [r4, #4]!
   149e4:	beq	149f4 <__assert_fail@plt+0x3764>
   149e8:	add	ip, ip, #1
   149ec:	cmp	ip, #10
   149f0:	bne	149d8 <__assert_fail@plt+0x3748>
   149f4:	add	lr, sp, #12
   149f8:	str	ip, [sp, #4]
   149fc:	str	lr, [sp]
   14a00:	bl	145d0 <__assert_fail@plt+0x3340>
   14a04:	ldr	r2, [sp, #52]	; 0x34
   14a08:	ldr	r3, [r6]
   14a0c:	cmp	r2, r3
   14a10:	bne	14a1c <__assert_fail@plt+0x378c>
   14a14:	add	sp, sp, #56	; 0x38
   14a18:	pop	{r4, r5, r6, pc}
   14a1c:	bl	11038 <__stack_chk_fail@plt>
   14a20:	andeq	r7, r2, r8, lsl #30
   14a24:	push	{r3}		; (str r3, [sp, #-4]!)
   14a28:	mov	ip, #0
   14a2c:	push	{r4, r5, r6, lr}
   14a30:	sub	sp, sp, #60	; 0x3c
   14a34:	ldr	r6, [pc, #100]	; 14aa0 <__assert_fail@plt+0x3810>
   14a38:	add	r5, sp, #8
   14a3c:	add	r4, sp, #80	; 0x50
   14a40:	ldr	r3, [r6]
   14a44:	str	r4, [sp, #8]
   14a48:	str	r3, [sp, #52]	; 0x34
   14a4c:	ldr	r3, [sp, #76]	; 0x4c
   14a50:	ldr	lr, [r4], #4
   14a54:	cmp	lr, #0
   14a58:	str	lr, [r5, #4]!
   14a5c:	beq	14a6c <__assert_fail@plt+0x37dc>
   14a60:	add	ip, ip, #1
   14a64:	cmp	ip, #10
   14a68:	bne	14a50 <__assert_fail@plt+0x37c0>
   14a6c:	add	lr, sp, #12
   14a70:	str	ip, [sp, #4]
   14a74:	str	lr, [sp]
   14a78:	bl	145d0 <__assert_fail@plt+0x3340>
   14a7c:	ldr	r2, [sp, #52]	; 0x34
   14a80:	ldr	r3, [r6]
   14a84:	cmp	r2, r3
   14a88:	bne	14a9c <__assert_fail@plt+0x380c>
   14a8c:	add	sp, sp, #60	; 0x3c
   14a90:	pop	{r4, r5, r6, lr}
   14a94:	add	sp, sp, #4
   14a98:	bx	lr
   14a9c:	bl	11038 <__stack_chk_fail@plt>
   14aa0:	andeq	r7, r2, r8, lsl #30
   14aa4:	push	{r4, lr}
   14aa8:	mov	r2, #5
   14aac:	ldr	r1, [pc, #88]	; 14b0c <__assert_fail@plt+0x387c>
   14ab0:	mov	r0, #0
   14ab4:	bl	1102c <dcgettext@plt>
   14ab8:	ldr	r2, [pc, #80]	; 14b10 <__assert_fail@plt+0x3880>
   14abc:	mov	r1, r0
   14ac0:	mov	r0, #1
   14ac4:	bl	111a0 <__printf_chk@plt>
   14ac8:	mov	r2, #5
   14acc:	ldr	r1, [pc, #64]	; 14b14 <__assert_fail@plt+0x3884>
   14ad0:	mov	r0, #0
   14ad4:	bl	1102c <dcgettext@plt>
   14ad8:	ldr	r3, [pc, #56]	; 14b18 <__assert_fail@plt+0x3888>
   14adc:	ldr	r2, [pc, #56]	; 14b1c <__assert_fail@plt+0x388c>
   14ae0:	mov	r1, r0
   14ae4:	mov	r0, #1
   14ae8:	bl	111a0 <__printf_chk@plt>
   14aec:	ldr	r1, [pc, #44]	; 14b20 <__assert_fail@plt+0x3890>
   14af0:	mov	r2, #5
   14af4:	mov	r0, #0
   14af8:	bl	1102c <dcgettext@plt>
   14afc:	ldr	r3, [pc, #32]	; 14b24 <__assert_fail@plt+0x3894>
   14b00:	pop	{r4, lr}
   14b04:	ldr	r1, [r3]
   14b08:	b	10f9c <fputs_unlocked@plt>
   14b0c:	strdeq	r6, [r1], -r8
   14b10:	andeq	r6, r1, r0, lsl pc
   14b14:	andeq	r6, r1, r8, lsr #30
   14b18:	andeq	r6, r1, r4, lsr #15
   14b1c:	andeq	r6, r1, ip, asr #15
   14b20:	andeq	r6, r1, ip, lsr pc
   14b24:	andeq	r8, r2, ip, ror r1
   14b28:	push	{r4, lr}
   14b2c:	mov	r4, r0
   14b30:	bl	110e0 <malloc@plt>
   14b34:	adds	r4, r4, #0
   14b38:	movne	r4, #1
   14b3c:	cmp	r0, #0
   14b40:	movne	r4, #0
   14b44:	cmp	r4, #0
   14b48:	popeq	{r4, pc}
   14b4c:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14b50:	push	{r4, r5, r6, lr}
   14b54:	umull	r4, r5, r0, r1
   14b58:	adds	r3, r5, #0
   14b5c:	movne	r3, #1
   14b60:	cmp	r4, #0
   14b64:	blt	14b7c <__assert_fail@plt+0x38ec>
   14b68:	cmp	r3, #0
   14b6c:	bne	14b7c <__assert_fail@plt+0x38ec>
   14b70:	mul	r0, r1, r0
   14b74:	pop	{r4, r5, r6, lr}
   14b78:	b	14b28 <__assert_fail@plt+0x3898>
   14b7c:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14b80:	b	14b28 <__assert_fail@plt+0x3898>
   14b84:	adds	r3, r0, #0
   14b88:	movne	r3, #1
   14b8c:	cmp	r1, #0
   14b90:	movne	r3, #0
   14b94:	cmp	r3, #0
   14b98:	push	{r4, lr}
   14b9c:	bne	14bc4 <__assert_fail@plt+0x3934>
   14ba0:	mov	r4, r1
   14ba4:	bl	11044 <realloc@plt>
   14ba8:	adds	r4, r4, #0
   14bac:	movne	r4, #1
   14bb0:	cmp	r0, #0
   14bb4:	movne	r4, #0
   14bb8:	cmp	r4, #0
   14bbc:	popeq	{r4, pc}
   14bc0:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14bc4:	bl	10fe4 <free@plt>
   14bc8:	mov	r0, #0
   14bcc:	pop	{r4, pc}
   14bd0:	push	{r4, r5, r6, lr}
   14bd4:	umull	r4, r5, r1, r2
   14bd8:	adds	r3, r5, #0
   14bdc:	movne	r3, #1
   14be0:	cmp	r4, #0
   14be4:	blt	14bfc <__assert_fail@plt+0x396c>
   14be8:	cmp	r3, #0
   14bec:	bne	14bfc <__assert_fail@plt+0x396c>
   14bf0:	mul	r1, r2, r1
   14bf4:	pop	{r4, r5, r6, lr}
   14bf8:	b	14b84 <__assert_fail@plt+0x38f4>
   14bfc:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14c00:	push	{r4, r5, r6, r7, r8, lr}
   14c04:	subs	r7, r0, #0
   14c08:	mov	r6, r1
   14c0c:	mov	r5, r2
   14c10:	ldr	r4, [r1]
   14c14:	beq	14c48 <__assert_fail@plt+0x39b8>
   14c18:	mov	r1, r2
   14c1c:	ldr	r0, [pc, #104]	; 14c8c <__assert_fail@plt+0x39fc>
   14c20:	bl	15d38 <__assert_fail@plt+0x4aa8>
   14c24:	cmp	r0, r4
   14c28:	bls	14c6c <__assert_fail@plt+0x39dc>
   14c2c:	add	r3, r4, #1
   14c30:	add	r4, r3, r4, lsr #1
   14c34:	str	r4, [r6]
   14c38:	mul	r1, r5, r4
   14c3c:	mov	r0, r7
   14c40:	pop	{r4, r5, r6, r7, r8, lr}
   14c44:	b	14b84 <__assert_fail@plt+0x38f4>
   14c48:	cmp	r4, #0
   14c4c:	beq	14c70 <__assert_fail@plt+0x39e0>
   14c50:	umull	r0, r1, r4, r5
   14c54:	adds	r3, r1, #0
   14c58:	movne	r3, #1
   14c5c:	cmp	r0, #0
   14c60:	blt	14c6c <__assert_fail@plt+0x39dc>
   14c64:	cmp	r3, #0
   14c68:	beq	14c34 <__assert_fail@plt+0x39a4>
   14c6c:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14c70:	mov	r1, r2
   14c74:	mov	r0, #64	; 0x40
   14c78:	bl	15d38 <__assert_fail@plt+0x4aa8>
   14c7c:	cmp	r5, #64	; 0x40
   14c80:	movls	r4, r0
   14c84:	addhi	r4, r0, #1
   14c88:	b	14c50 <__assert_fail@plt+0x39c0>
   14c8c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14c90:	cmp	r0, #0
   14c94:	ldr	r3, [r1]
   14c98:	beq	14cbc <__assert_fail@plt+0x3a2c>
   14c9c:	ldr	r2, [pc, #60]	; 14ce0 <__assert_fail@plt+0x3a50>
   14ca0:	cmp	r3, r2
   14ca4:	bhi	14cd8 <__assert_fail@plt+0x3a48>
   14ca8:	add	r2, r3, #1
   14cac:	add	r3, r2, r3, lsr #1
   14cb0:	str	r3, [r1]
   14cb4:	mov	r1, r3
   14cb8:	b	14b84 <__assert_fail@plt+0x38f4>
   14cbc:	cmp	r3, #0
   14cc0:	bne	14cd4 <__assert_fail@plt+0x3a44>
   14cc4:	mov	r3, #64	; 0x40
   14cc8:	str	r3, [r1]
   14ccc:	mov	r1, r3
   14cd0:	b	14b84 <__assert_fail@plt+0x38f4>
   14cd4:	bge	14cb0 <__assert_fail@plt+0x3a20>
   14cd8:	push	{r4, lr}
   14cdc:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14ce0:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14ce4:	push	{r4, lr}
   14ce8:	mov	r4, r0
   14cec:	bl	14b28 <__assert_fail@plt+0x3898>
   14cf0:	mov	r2, r4
   14cf4:	mov	r1, #0
   14cf8:	pop	{r4, lr}
   14cfc:	b	11194 <memset@plt>
   14d00:	push	{r4, r5, r6, lr}
   14d04:	umull	r4, r5, r0, r1
   14d08:	adds	r3, r5, #0
   14d0c:	movne	r3, #1
   14d10:	cmp	r4, #0
   14d14:	blt	14d2c <__assert_fail@plt+0x3a9c>
   14d18:	cmp	r3, #0
   14d1c:	bne	14d2c <__assert_fail@plt+0x3a9c>
   14d20:	bl	10f90 <calloc@plt>
   14d24:	cmp	r0, #0
   14d28:	popne	{r4, r5, r6, pc}
   14d2c:	bl	14d70 <__assert_fail@plt+0x3ae0>
   14d30:	push	{r4, r5, r6, lr}
   14d34:	mov	r4, r1
   14d38:	mov	r5, r0
   14d3c:	mov	r0, r1
   14d40:	bl	14b28 <__assert_fail@plt+0x3898>
   14d44:	mov	r2, r4
   14d48:	mov	r1, r5
   14d4c:	pop	{r4, r5, r6, lr}
   14d50:	b	10ffc <memcpy@plt>
   14d54:	push	{r4, lr}
   14d58:	mov	r4, r0
   14d5c:	bl	1114c <strlen@plt>
   14d60:	add	r1, r0, #1
   14d64:	mov	r0, r4
   14d68:	pop	{r4, lr}
   14d6c:	b	14d30 <__assert_fail@plt+0x3aa0>
   14d70:	ldr	r3, [pc, #44]	; 14da4 <__assert_fail@plt+0x3b14>
   14d74:	push	{r4, lr}
   14d78:	mov	r2, #5
   14d7c:	ldr	r1, [pc, #36]	; 14da8 <__assert_fail@plt+0x3b18>
   14d80:	mov	r0, #0
   14d84:	ldr	r4, [r3]
   14d88:	bl	1102c <dcgettext@plt>
   14d8c:	ldr	r2, [pc, #24]	; 14dac <__assert_fail@plt+0x3b1c>
   14d90:	mov	r1, #0
   14d94:	mov	r3, r0
   14d98:	mov	r0, r4
   14d9c:	bl	110b0 <error@plt>
   14da0:	bl	11260 <abort@plt>
   14da4:	andeq	r8, r2, r4, lsr #2
   14da8:			; <UNDEFINED> instruction: 0x00016fb0
   14dac:	andeq	r6, r1, r4, ror #21
   14db0:	push	{r4, r5, lr}
   14db4:	sub	sp, sp, #12
   14db8:	mov	r4, r0
   14dbc:	bl	111ac <fileno@plt>
   14dc0:	cmp	r0, #0
   14dc4:	mov	r0, r4
   14dc8:	blt	14e44 <__assert_fail@plt+0x3bb4>
   14dcc:	bl	110f8 <__freading@plt>
   14dd0:	cmp	r0, #0
   14dd4:	bne	14e10 <__assert_fail@plt+0x3b80>
   14dd8:	mov	r0, r4
   14ddc:	bl	14e50 <__assert_fail@plt+0x3bc0>
   14de0:	cmp	r0, #0
   14de4:	beq	14e40 <__assert_fail@plt+0x3bb0>
   14de8:	bl	11158 <__errno_location@plt>
   14dec:	mov	r5, r0
   14df0:	mov	r0, r4
   14df4:	ldr	r4, [r5]
   14df8:	bl	111c4 <fclose@plt>
   14dfc:	cmp	r4, #0
   14e00:	mvnne	r0, #0
   14e04:	strne	r4, [r5]
   14e08:	add	sp, sp, #12
   14e0c:	pop	{r4, r5, pc}
   14e10:	mov	r0, r4
   14e14:	bl	111ac <fileno@plt>
   14e18:	mov	r3, #1
   14e1c:	str	r3, [sp]
   14e20:	mov	r2, #0
   14e24:	mov	r3, #0
   14e28:	bl	11074 <lseek64@plt>
   14e2c:	mvn	r3, #0
   14e30:	mvn	r2, #0
   14e34:	cmp	r1, r3
   14e38:	cmpeq	r0, r2
   14e3c:	bne	14dd8 <__assert_fail@plt+0x3b48>
   14e40:	mov	r0, r4
   14e44:	add	sp, sp, #12
   14e48:	pop	{r4, r5, lr}
   14e4c:	b	111c4 <fclose@plt>
   14e50:	push	{r4, lr}
   14e54:	subs	r4, r0, #0
   14e58:	sub	sp, sp, #8
   14e5c:	beq	14e78 <__assert_fail@plt+0x3be8>
   14e60:	bl	110f8 <__freading@plt>
   14e64:	cmp	r0, #0
   14e68:	beq	14e78 <__assert_fail@plt+0x3be8>
   14e6c:	ldr	r3, [r4]
   14e70:	tst	r3, #256	; 0x100
   14e74:	bne	14e88 <__assert_fail@plt+0x3bf8>
   14e78:	mov	r0, r4
   14e7c:	add	sp, sp, #8
   14e80:	pop	{r4, lr}
   14e84:	b	10fcc <fflush@plt>
   14e88:	mov	r3, #1
   14e8c:	str	r3, [sp]
   14e90:	mov	r2, #0
   14e94:	mov	r3, #0
   14e98:	mov	r0, r4
   14e9c:	bl	14eb0 <__assert_fail@plt+0x3c20>
   14ea0:	mov	r0, r4
   14ea4:	add	sp, sp, #8
   14ea8:	pop	{r4, lr}
   14eac:	b	10fcc <fflush@plt>
   14eb0:	push	{r4, r5, r6, r7, r8, lr}
   14eb4:	sub	sp, sp, #8
   14eb8:	ldmib	r0, {ip, lr}
   14ebc:	mov	r4, r0
   14ec0:	ldr	r5, [sp, #32]
   14ec4:	cmp	lr, ip
   14ec8:	beq	14ee0 <__assert_fail@plt+0x3c50>
   14ecc:	str	r5, [sp, #32]
   14ed0:	mov	r0, r4
   14ed4:	add	sp, sp, #8
   14ed8:	pop	{r4, r5, r6, r7, r8, lr}
   14edc:	b	111d0 <fseeko64@plt>
   14ee0:	ldr	lr, [r0, #20]
   14ee4:	ldr	ip, [r0, #16]
   14ee8:	cmp	lr, ip
   14eec:	bne	14ecc <__assert_fail@plt+0x3c3c>
   14ef0:	ldr	r8, [r0, #36]	; 0x24
   14ef4:	cmp	r8, #0
   14ef8:	bne	14ecc <__assert_fail@plt+0x3c3c>
   14efc:	mov	r6, r2
   14f00:	mov	r7, r3
   14f04:	bl	111ac <fileno@plt>
   14f08:	mov	r2, r6
   14f0c:	mov	r3, r7
   14f10:	str	r5, [sp]
   14f14:	bl	11074 <lseek64@plt>
   14f18:	mvn	r3, #0
   14f1c:	mvn	r2, #0
   14f20:	cmp	r1, r3
   14f24:	cmpeq	r0, r2
   14f28:	beq	14f48 <__assert_fail@plt+0x3cb8>
   14f2c:	ldr	r3, [r4]
   14f30:	strd	r0, [r4, #80]	; 0x50
   14f34:	mov	r0, r8
   14f38:	bic	r3, r3, #16
   14f3c:	str	r3, [r4]
   14f40:	add	sp, sp, #8
   14f44:	pop	{r4, r5, r6, r7, r8, pc}
   14f48:	mvn	r0, #0
   14f4c:	b	14f40 <__assert_fail@plt+0x3cb0>
   14f50:	push	{r4, r5, r6, r7, r8, lr}
   14f54:	subs	r7, r0, #0
   14f58:	ldr	r5, [pc, #108]	; 14fcc <__assert_fail@plt+0x3d3c>
   14f5c:	sub	sp, sp, #8
   14f60:	mov	r8, r1
   14f64:	ldr	r1, [r5]
   14f68:	moveq	r7, sp
   14f6c:	str	r1, [sp, #4]
   14f70:	mov	r0, r7
   14f74:	mov	r1, r8
   14f78:	mov	r6, r2
   14f7c:	bl	110a4 <mbrtowc@plt>
   14f80:	cmp	r6, #0
   14f84:	cmnne	r0, #3
   14f88:	mov	r4, r0
   14f8c:	bhi	14fac <__assert_fail@plt+0x3d1c>
   14f90:	ldr	r2, [sp, #4]
   14f94:	ldr	r3, [r5]
   14f98:	mov	r0, r4
   14f9c:	cmp	r2, r3
   14fa0:	bne	14fc8 <__assert_fail@plt+0x3d38>
   14fa4:	add	sp, sp, #8
   14fa8:	pop	{r4, r5, r6, r7, r8, pc}
   14fac:	mov	r0, #0
   14fb0:	bl	14fd0 <__assert_fail@plt+0x3d40>
   14fb4:	cmp	r0, #0
   14fb8:	moveq	r4, #1
   14fbc:	ldrbeq	r3, [r8]
   14fc0:	streq	r3, [r7]
   14fc4:	b	14f90 <__assert_fail@plt+0x3d00>
   14fc8:	bl	11038 <__stack_chk_fail@plt>
   14fcc:	andeq	r7, r2, r8, lsl #30
   14fd0:	push	{r4, lr}
   14fd4:	mov	r1, #0
   14fd8:	bl	111e8 <setlocale@plt>
   14fdc:	subs	r4, r0, #0
   14fe0:	beq	1500c <__assert_fail@plt+0x3d7c>
   14fe4:	ldr	r1, [pc, #40]	; 15014 <__assert_fail@plt+0x3d84>
   14fe8:	bl	10fb4 <strcmp@plt>
   14fec:	cmp	r0, #0
   14ff0:	popeq	{r4, pc}
   14ff4:	mov	r0, r4
   14ff8:	ldr	r1, [pc, #24]	; 15018 <__assert_fail@plt+0x3d88>
   14ffc:	bl	10fb4 <strcmp@plt>
   15000:	adds	r0, r0, #0
   15004:	movne	r0, #1
   15008:	pop	{r4, pc}
   1500c:	mov	r0, #1
   15010:	pop	{r4, pc}
   15014:	andeq	r6, r1, r4, asr #31
   15018:	andeq	r6, r1, r8, asr #31
   1501c:	push	{r4, lr}
   15020:	mov	r0, #14
   15024:	bl	1120c <nl_langinfo@plt>
   15028:	cmp	r0, #0
   1502c:	beq	15044 <__assert_fail@plt+0x3db4>
   15030:	ldrb	r2, [r0]
   15034:	ldr	r3, [pc, #16]	; 1504c <__assert_fail@plt+0x3dbc>
   15038:	cmp	r2, #0
   1503c:	moveq	r0, r3
   15040:	pop	{r4, pc}
   15044:	ldr	r0, [pc]	; 1504c <__assert_fail@plt+0x3dbc>
   15048:	pop	{r4, pc}
   1504c:	ldrdeq	r6, [r1], -r0
   15050:	push	{r4, r5, r6, lr}
   15054:	mov	r6, r0
   15058:	mov	r0, #24
   1505c:	bl	14b28 <__assert_fail@plt+0x3898>
   15060:	mov	r4, #0
   15064:	mov	r5, #0
   15068:	str	r6, [r0]
   1506c:	strd	r4, [r0, #16]
   15070:	strd	r4, [r0, #8]
   15074:	pop	{r4, r5, r6, pc}
   15078:	push	{r4, lr}
   1507c:	bl	15350 <__assert_fail@plt+0x40c0>
   15080:	subs	r4, r0, #0
   15084:	beq	150a8 <__assert_fail@plt+0x3e18>
   15088:	mov	r0, #24
   1508c:	bl	14b28 <__assert_fail@plt+0x3898>
   15090:	mov	r2, #0
   15094:	mov	r3, #0
   15098:	str	r4, [r0]
   1509c:	strd	r2, [r0, #16]
   150a0:	strd	r2, [r0, #8]
   150a4:	pop	{r4, pc}
   150a8:	mov	r0, r4
   150ac:	pop	{r4, pc}
   150b0:	ldr	r0, [r0]
   150b4:	bx	lr
   150b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150bc:	sub	sp, sp, #60	; 0x3c
   150c0:	mov	r9, r3
   150c4:	adds	r3, r2, #1
   150c8:	str	r3, [sp, #16]
   150cc:	adc	r3, r9, #0
   150d0:	str	r3, [sp, #20]
   150d4:	ldr	r3, [pc, #420]	; 15280 <__assert_fail@plt+0x3ff0>
   150d8:	mov	r8, r2
   150dc:	ldr	r2, [r0]
   150e0:	ldr	r3, [r3]
   150e4:	str	r0, [sp, #36]	; 0x24
   150e8:	str	r2, [sp, #32]
   150ec:	ldrd	r6, [r0, #8]
   150f0:	ldrd	r4, [r0, #16]
   150f4:	str	r3, [sp, #52]	; 0x34
   150f8:	strd	r8, [sp]
   150fc:	b	15180 <__assert_fail@plt+0x3ef0>
   15100:	ldrd	r2, [sp]
   15104:	cmp	r5, r3
   15108:	cmpeq	r4, r2
   1510c:	beq	15224 <__assert_fail@plt+0x3f94>
   15110:	ldrd	r2, [sp]
   15114:	ldr	r9, [sp, #16]
   15118:	ldr	r8, [sp, #20]
   1511c:	subs	r0, r4, r2
   15120:	sbc	r1, r5, r3
   15124:	mov	r2, r9
   15128:	mov	r3, r8
   1512c:	bl	15f44 <__assert_fail@plt+0x4cb4>
   15130:	mov	fp, r3
   15134:	subs	r3, r4, r2
   15138:	str	r3, [sp, #8]
   1513c:	sbc	r3, r5, fp
   15140:	strd	r0, [sp, #24]
   15144:	str	r3, [sp, #12]
   15148:	mov	sl, r2
   1514c:	mov	r3, r8
   15150:	mov	r2, r9
   15154:	mov	r0, r6
   15158:	mov	r1, r7
   1515c:	bl	15f44 <__assert_fail@plt+0x4cb4>
   15160:	ldrd	r8, [sp, #8]
   15164:	cmp	r7, r9
   15168:	cmpeq	r6, r8
   1516c:	bls	1525c <__assert_fail@plt+0x3fcc>
   15170:	subs	r4, sl, #1
   15174:	mov	r6, r2
   15178:	sbc	r5, fp, #0
   1517c:	mov	r7, r3
   15180:	ldrd	r2, [sp]
   15184:	cmp	r5, r3
   15188:	cmpeq	r4, r2
   1518c:	bcs	15100 <__assert_fail@plt+0x3e70>
   15190:	ldrd	r8, [sp]
   15194:	mov	r0, r4
   15198:	mov	r1, r5
   1519c:	mov	r2, #0
   151a0:	lsl	r3, r1, #8
   151a4:	lsl	ip, r0, #8
   151a8:	orr	r3, r3, r0, lsr #24
   151ac:	adds	r0, ip, #255	; 0xff
   151b0:	adc	r1, r3, #0
   151b4:	cmp	r9, r1
   151b8:	cmpeq	r8, r0
   151bc:	add	r2, r2, #1
   151c0:	bhi	151a0 <__assert_fail@plt+0x3f10>
   151c4:	add	r1, sp, #44	; 0x2c
   151c8:	ldr	r0, [sp, #32]
   151cc:	bl	155cc <__assert_fail@plt+0x433c>
   151d0:	add	ip, sp, #44	; 0x2c
   151d4:	ldrb	sl, [ip], #1
   151d8:	lsl	r0, r7, #8
   151dc:	lsl	r1, r6, #8
   151e0:	orr	r0, r0, r6, lsr #24
   151e4:	lsl	r2, r5, #8
   151e8:	adds	r6, sl, r1
   151ec:	mov	fp, #0
   151f0:	lsl	r1, r4, #8
   151f4:	orr	r2, r2, r4, lsr #24
   151f8:	adc	r7, fp, r0
   151fc:	adds	r4, r1, #255	; 0xff
   15200:	adc	r5, r2, #0
   15204:	cmp	r9, r5
   15208:	cmpeq	r8, r4
   1520c:	bhi	151d4 <__assert_fail@plt+0x3f44>
   15210:	strd	r8, [sp]
   15214:	ldrd	r2, [sp]
   15218:	cmp	r5, r3
   1521c:	cmpeq	r4, r2
   15220:	bne	15110 <__assert_fail@plt+0x3e80>
   15224:	ldr	r1, [sp, #36]	; 0x24
   15228:	mov	r2, #0
   1522c:	mov	r3, #0
   15230:	strd	r2, [r1, #16]
   15234:	strd	r2, [r1, #8]
   15238:	ldr	r3, [pc, #64]	; 15280 <__assert_fail@plt+0x3ff0>
   1523c:	ldr	r2, [sp, #52]	; 0x34
   15240:	mov	r0, r6
   15244:	ldr	r3, [r3]
   15248:	mov	r1, r7
   1524c:	cmp	r2, r3
   15250:	bne	1527c <__assert_fail@plt+0x3fec>
   15254:	add	sp, sp, #60	; 0x3c
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1525c:	mov	r7, r3
   15260:	ldr	r3, [sp, #36]	; 0x24
   15264:	mov	r6, r2
   15268:	strd	r0, [r3, #8]
   1526c:	mov	r1, r3
   15270:	ldrd	r2, [sp, #24]
   15274:	strd	r2, [r1, #16]
   15278:	b	15238 <__assert_fail@plt+0x3fa8>
   1527c:	bl	11038 <__stack_chk_fail@plt>
   15280:	andeq	r7, r2, r8, lsl #30
   15284:	push	{r4, lr}
   15288:	mvn	r2, #0
   1528c:	mov	r4, r0
   15290:	mov	r1, #24
   15294:	bl	111f4 <__explicit_bzero_chk@plt>
   15298:	mov	r0, r4
   1529c:	pop	{r4, lr}
   152a0:	b	10fe4 <free@plt>
   152a4:	push	{r4, r5, r6, r7, r8, lr}
   152a8:	mov	r4, r0
   152ac:	ldr	r0, [r0]
   152b0:	bl	15704 <__assert_fail@plt+0x4474>
   152b4:	mov	r6, r0
   152b8:	bl	11158 <__errno_location@plt>
   152bc:	mvn	r2, #0
   152c0:	mov	r1, #24
   152c4:	ldr	r7, [r0]
   152c8:	mov	r5, r0
   152cc:	mov	r0, r4
   152d0:	bl	111f4 <__explicit_bzero_chk@plt>
   152d4:	mov	r0, r4
   152d8:	bl	10fe4 <free@plt>
   152dc:	str	r7, [r5]
   152e0:	mov	r0, r6
   152e4:	pop	{r4, r5, r6, r7, r8, pc}
   152e8:	subs	r5, r0, #0
   152ec:	push	{r7, lr}
   152f0:	beq	15340 <__assert_fail@plt+0x40b0>
   152f4:	ldr	r3, [pc, #72]	; 15344 <__assert_fail@plt+0x40b4>
   152f8:	ldr	r6, [r3]
   152fc:	bl	11158 <__errno_location@plt>
   15300:	mov	r2, #5
   15304:	ldr	r4, [r0]
   15308:	cmp	r4, #0
   1530c:	moveq	r0, r4
   15310:	ldreq	r1, [pc, #48]	; 15348 <__assert_fail@plt+0x40b8>
   15314:	ldrne	r1, [pc, #48]	; 1534c <__assert_fail@plt+0x40bc>
   15318:	movne	r0, #0
   1531c:	bl	1102c <dcgettext@plt>
   15320:	mov	r7, r0
   15324:	mov	r0, r5
   15328:	bl	142e4 <__assert_fail@plt+0x3054>
   1532c:	mov	r2, r7
   15330:	mov	r1, r4
   15334:	mov	r3, r0
   15338:	mov	r0, r6
   1533c:	bl	110b0 <error@plt>
   15340:	bl	11260 <abort@plt>
   15344:	andeq	r8, r2, r4, lsr #2
   15348:	ldrdeq	r6, [r1], -r8
   1534c:	andeq	r6, r1, r8, ror #31
   15350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15354:	sub	sp, sp, #20
   15358:	ldr	r6, [pc, #576]	; 155a0 <__assert_fail@plt+0x4310>
   1535c:	subs	r7, r1, #0
   15360:	ldr	r3, [r6]
   15364:	str	r3, [sp, #12]
   15368:	beq	15454 <__assert_fail@plt+0x41c4>
   1536c:	cmp	r0, #0
   15370:	mov	r5, r0
   15374:	beq	153e0 <__assert_fail@plt+0x4150>
   15378:	ldr	r1, [pc, #548]	; 155a4 <__assert_fail@plt+0x4314>
   1537c:	bl	15b48 <__assert_fail@plt+0x48b8>
   15380:	subs	r8, r0, #0
   15384:	moveq	r4, r8
   15388:	beq	153c4 <__assert_fail@plt+0x4134>
   1538c:	ldr	r0, [pc, #532]	; 155a8 <__assert_fail@plt+0x4318>
   15390:	bl	14b28 <__assert_fail@plt+0x3898>
   15394:	ldr	r2, [pc, #528]	; 155ac <__assert_fail@plt+0x431c>
   15398:	cmp	r7, #2048	; 0x800
   1539c:	movcc	r3, r7
   153a0:	movcs	r3, #2048	; 0x800
   153a4:	mov	r4, r0
   153a8:	str	r8, [r0]
   153ac:	str	r5, [r0, #8]
   153b0:	add	r1, r4, #12
   153b4:	str	r2, [r4, #4]
   153b8:	mov	r0, r8
   153bc:	mov	r2, #0
   153c0:	bl	1117c <setvbuf@plt>
   153c4:	ldr	r2, [sp, #12]
   153c8:	ldr	r3, [r6]
   153cc:	mov	r0, r4
   153d0:	cmp	r2, r3
   153d4:	bne	15528 <__assert_fail@plt+0x4298>
   153d8:	add	sp, sp, #20
   153dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e0:	ldr	r0, [pc, #448]	; 155a8 <__assert_fail@plt+0x4318>
   153e4:	bl	14b28 <__assert_fail@plt+0x3898>
   153e8:	ldr	r3, [pc, #444]	; 155ac <__assert_fail@plt+0x431c>
   153ec:	mov	r1, r5
   153f0:	mov	r4, r0
   153f4:	str	r5, [r0]
   153f8:	str	r5, [r0, #8]
   153fc:	str	r5, [r0, #12]
   15400:	str	r3, [r0, #4]
   15404:	ldr	r0, [pc, #420]	; 155b0 <__assert_fail@plt+0x4320>
   15408:	bl	110bc <open64@plt>
   1540c:	add	r8, r4, #16
   15410:	subs	r9, r0, #0
   15414:	blt	15470 <__assert_fail@plt+0x41e0>
   15418:	cmp	r7, #1024	; 0x400
   1541c:	movcc	r2, r7
   15420:	movcs	r2, #1024	; 0x400
   15424:	ldr	r3, [pc, #392]	; 155b4 <__assert_fail@plt+0x4324>
   15428:	mov	r1, r8
   1542c:	bl	10fc0 <__read_chk@plt>
   15430:	ldr	sl, [pc, #384]	; 155b8 <__assert_fail@plt+0x4328>
   15434:	mov	r7, r0
   15438:	mov	r0, r9
   1543c:	bl	1126c <close@plt>
   15440:	cmp	r7, sl
   15444:	ble	1552c <__assert_fail@plt+0x429c>
   15448:	mov	r0, r8
   1544c:	bl	15954 <__assert_fail@plt+0x46c4>
   15450:	b	153c4 <__assert_fail@plt+0x4134>
   15454:	ldr	r0, [pc, #332]	; 155a8 <__assert_fail@plt+0x4318>
   15458:	bl	14b28 <__assert_fail@plt+0x3898>
   1545c:	ldr	r3, [pc, #328]	; 155ac <__assert_fail@plt+0x431c>
   15460:	mov	r4, r0
   15464:	str	r7, [r0]
   15468:	stmib	r0, {r3, r7}
   1546c:	b	153c4 <__assert_fail@plt+0x4134>
   15470:	add	r7, sp, #4
   15474:	mov	r1, r5
   15478:	mov	r0, r7
   1547c:	bl	1108c <gettimeofday@plt>
   15480:	mov	r3, r7
   15484:	mov	fp, #12
   15488:	ldm	r3!, {r0, r1}
   1548c:	str	r0, [r4, #16]
   15490:	str	r1, [r8, #4]
   15494:	bl	11134 <getpid@plt>
   15498:	str	r0, [sp, #4]
   1549c:	str	r0, [r4, #24]
   154a0:	rsb	r5, fp, #1024	; 0x400
   154a4:	cmp	r5, #4
   154a8:	movcs	r5, #4
   154ac:	bl	11224 <getppid@plt>
   154b0:	ldr	sl, [pc, #256]	; 155b8 <__assert_fail@plt+0x4328>
   154b4:	mov	r2, r5
   154b8:	add	r9, r5, fp
   154bc:	mov	r1, r7
   154c0:	str	r0, [sp, #4]
   154c4:	add	r0, r8, fp
   154c8:	bl	10ffc <memcpy@plt>
   154cc:	cmp	r9, sl
   154d0:	bhi	15448 <__assert_fail@plt+0x41b8>
   154d4:	rsb	r5, r9, #1024	; 0x400
   154d8:	cmp	r5, #4
   154dc:	movcs	r5, #4
   154e0:	bl	10fd8 <getuid@plt>
   154e4:	add	fp, r9, r5
   154e8:	mov	r2, r5
   154ec:	mov	r1, r7
   154f0:	str	r0, [sp, #4]
   154f4:	add	r0, r8, r9
   154f8:	bl	10ffc <memcpy@plt>
   154fc:	cmp	fp, sl
   15500:	bhi	15448 <__assert_fail@plt+0x41b8>
   15504:	bl	11188 <getgid@plt>
   15508:	rsb	r2, fp, #1024	; 0x400
   1550c:	cmp	r2, #4
   15510:	mov	r1, r7
   15514:	movcs	r2, #4
   15518:	str	r0, [sp, #4]
   1551c:	add	r0, r8, fp
   15520:	bl	10ffc <memcpy@plt>
   15524:	b	15448 <__assert_fail@plt+0x41b8>
   15528:	bl	11038 <__stack_chk_fail@plt>
   1552c:	bic	r3, r7, r7, asr #31
   15530:	rsb	r9, r3, #1024	; 0x400
   15534:	cmp	r9, #8
   15538:	add	r7, sp, #4
   1553c:	movcs	r9, #8
   15540:	mov	r1, r5
   15544:	add	fp, r8, r3
   15548:	mov	r0, r7
   1554c:	add	r5, r9, r3
   15550:	bl	1108c <gettimeofday@plt>
   15554:	mov	r2, r9
   15558:	mov	r1, r7
   1555c:	mov	r0, fp
   15560:	bl	10ffc <memcpy@plt>
   15564:	cmp	r5, sl
   15568:	bgt	15448 <__assert_fail@plt+0x41b8>
   1556c:	rsb	r9, r5, #1024	; 0x400
   15570:	cmp	r9, #4
   15574:	movcs	r9, #4
   15578:	bl	11134 <getpid@plt>
   1557c:	add	fp, r9, r5
   15580:	mov	r2, r9
   15584:	mov	r1, r7
   15588:	str	r0, [sp, #4]
   1558c:	add	r0, r8, r5
   15590:	bl	10ffc <memcpy@plt>
   15594:	cmp	fp, sl
   15598:	bls	154a0 <__assert_fail@plt+0x4210>
   1559c:	b	15448 <__assert_fail@plt+0x41b8>
   155a0:	andeq	r7, r2, r8, lsl #30
   155a4:	andeq	r7, r1, r8
   155a8:	andeq	r0, r0, ip, lsl r8
   155ac:	andeq	r5, r1, r8, ror #5
   155b0:	strdeq	r6, [r1], -r8
   155b4:	andeq	r0, r0, ip, lsl #16
   155b8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   155bc:	str	r1, [r0, #4]
   155c0:	bx	lr
   155c4:	str	r1, [r0, #8]
   155c8:	bx	lr
   155cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155d0:	mov	r6, r0
   155d4:	ldr	r7, [r0]
   155d8:	mov	r5, r1
   155dc:	cmp	r7, #0
   155e0:	mov	r4, r2
   155e4:	beq	15638 <__assert_fail@plt+0x43a8>
   155e8:	bl	11158 <__errno_location@plt>
   155ec:	mov	r8, r0
   155f0:	mov	r3, r7
   155f4:	mov	r2, r4
   155f8:	mov	r0, r5
   155fc:	mov	r1, #1
   15600:	bl	11248 <fread_unlocked@plt>
   15604:	ldr	r3, [r8]
   15608:	subs	r4, r4, r0
   1560c:	add	r5, r5, r0
   15610:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15614:	ldm	r6, {r1, r2}
   15618:	ldr	r0, [r6, #8]
   1561c:	ldr	r1, [r1]
   15620:	tst	r1, #32
   15624:	moveq	r3, #0
   15628:	str	r3, [r8]
   1562c:	blx	r2
   15630:	ldr	r7, [r6]
   15634:	b	155f0 <__assert_fail@plt+0x4360>
   15638:	mov	r8, r0
   1563c:	ldr	r7, [r8, #12]!
   15640:	cmp	r2, r7
   15644:	add	r8, r8, #1040	; 0x410
   15648:	addhi	r9, r0, #16
   1564c:	bls	156f4 <__assert_fail@plt+0x4464>
   15650:	rsb	r1, r7, #1024	; 0x400
   15654:	add	r1, r8, r1
   15658:	mov	r0, r5
   1565c:	mov	r2, r7
   15660:	add	r5, r5, r7
   15664:	bl	10ffc <memcpy@plt>
   15668:	tst	r5, #3
   1566c:	mov	r1, r8
   15670:	mov	r0, r9
   15674:	sub	r4, r4, r7
   15678:	beq	15690 <__assert_fail@plt+0x4400>
   1567c:	bl	15738 <__assert_fail@plt+0x44a8>
   15680:	cmp	r4, #1024	; 0x400
   15684:	mov	r7, #1024	; 0x400
   15688:	bhi	15650 <__assert_fail@plt+0x43c0>
   1568c:	b	156d4 <__assert_fail@plt+0x4444>
   15690:	ldr	r7, [pc, #104]	; 15700 <__assert_fail@plt+0x4470>
   15694:	cmp	r4, r7
   15698:	bhi	156a8 <__assert_fail@plt+0x4418>
   1569c:	b	156c8 <__assert_fail@plt+0x4438>
   156a0:	cmp	r4, r7
   156a4:	bls	156c8 <__assert_fail@plt+0x4438>
   156a8:	mov	r1, r5
   156ac:	mov	r0, r9
   156b0:	bl	15738 <__assert_fail@plt+0x44a8>
   156b4:	subs	r4, r4, #1024	; 0x400
   156b8:	add	r5, r5, #1024	; 0x400
   156bc:	bne	156a0 <__assert_fail@plt+0x4410>
   156c0:	str	r4, [r6, #12]
   156c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156c8:	mov	r0, r9
   156cc:	mov	r1, r8
   156d0:	bl	15738 <__assert_fail@plt+0x44a8>
   156d4:	mov	r7, #1024	; 0x400
   156d8:	mov	r2, r4
   156dc:	mov	r1, r8
   156e0:	mov	r0, r5
   156e4:	sub	r4, r7, r4
   156e8:	bl	10ffc <memcpy@plt>
   156ec:	str	r4, [r6, #12]
   156f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156f4:	rsb	r3, r7, #1024	; 0x400
   156f8:	add	r8, r8, r3
   156fc:	b	156d8 <__assert_fail@plt+0x4448>
   15700:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15704:	push	{r4, r5, r6, lr}
   15708:	mvn	r2, #0
   1570c:	ldr	r5, [r0]
   15710:	mov	r4, r0
   15714:	ldr	r1, [pc, #24]	; 15734 <__assert_fail@plt+0x44a4>
   15718:	bl	111f4 <__explicit_bzero_chk@plt>
   1571c:	mov	r0, r4
   15720:	bl	10fe4 <free@plt>
   15724:	subs	r0, r5, #0
   15728:	popeq	{r4, r5, r6, pc}
   1572c:	pop	{r4, r5, r6, lr}
   15730:	b	14db0 <__assert_fail@plt+0x3b20>
   15734:	andeq	r0, r0, ip, lsl r8
   15738:	push	{r4, r5, r6, r7, lr}
   1573c:	add	ip, r1, #16
   15740:	ldr	r5, [r0, #1032]	; 0x408
   15744:	ldr	r4, [r0, #1028]	; 0x404
   15748:	add	r5, r5, #1
   1574c:	ldr	r3, [r0, #1024]	; 0x400
   15750:	add	r6, r4, r5
   15754:	add	r2, r0, #16
   15758:	add	lr, r1, #528	; 0x210
   1575c:	str	r5, [r0, #1032]	; 0x408
   15760:	ldr	r5, [r2, #-16]
   15764:	ldr	r7, [r2, #496]	; 0x1f0
   15768:	and	r4, r5, #1020	; 0x3fc
   1576c:	eor	r3, r3, r3, lsl #13
   15770:	ldr	r4, [r0, r4]
   15774:	add	r3, r3, r7
   15778:	add	r4, r3, r4
   1577c:	add	r4, r4, r6
   15780:	str	r4, [r2, #-16]
   15784:	lsr	r4, r4, #8
   15788:	and	r4, r4, #1020	; 0x3fc
   1578c:	eor	r3, r3, r3, lsr #6
   15790:	ldr	r4, [r0, r4]
   15794:	add	ip, ip, #16
   15798:	add	r5, r5, r4
   1579c:	str	r5, [ip, #-32]	; 0xffffffe0
   157a0:	ldr	r6, [r2, #-12]
   157a4:	ldr	r7, [r2, #500]	; 0x1f4
   157a8:	and	r4, r6, #1020	; 0x3fc
   157ac:	add	r3, r3, r7
   157b0:	ldr	r7, [r0, r4]
   157b4:	eor	r4, r3, r3, lsl #2
   157b8:	add	r3, r3, r7
   157bc:	add	r3, r3, r5
   157c0:	str	r3, [r2, #-12]
   157c4:	lsr	r3, r3, #8
   157c8:	and	r3, r3, #1020	; 0x3fc
   157cc:	add	r2, r2, #16
   157d0:	ldr	r3, [r0, r3]
   157d4:	add	r6, r6, r3
   157d8:	str	r6, [ip, #-28]	; 0xffffffe4
   157dc:	ldr	r5, [r2, #-24]	; 0xffffffe8
   157e0:	ldr	r7, [r2, #488]	; 0x1e8
   157e4:	and	r3, r5, #1020	; 0x3fc
   157e8:	add	r4, r4, r7
   157ec:	ldr	r7, [r0, r3]
   157f0:	eor	r3, r4, r4, lsr #16
   157f4:	add	r4, r4, r7
   157f8:	add	r4, r4, r6
   157fc:	str	r4, [r2, #-24]	; 0xffffffe8
   15800:	lsr	r4, r4, #8
   15804:	and	r4, r4, #1020	; 0x3fc
   15808:	ldr	r4, [r0, r4]
   1580c:	add	r5, r5, r4
   15810:	str	r5, [ip, #-24]	; 0xffffffe8
   15814:	ldr	r6, [r2, #-20]	; 0xffffffec
   15818:	ldr	r7, [r2, #492]	; 0x1ec
   1581c:	and	r4, r6, #1020	; 0x3fc
   15820:	add	r3, r3, r7
   15824:	ldr	r4, [r0, r4]
   15828:	add	r4, r3, r4
   1582c:	add	r4, r4, r5
   15830:	str	r4, [r2, #-20]	; 0xffffffec
   15834:	lsr	r4, r4, #8
   15838:	and	r4, r4, #1020	; 0x3fc
   1583c:	ldr	r4, [r0, r4]
   15840:	add	r6, r6, r4
   15844:	str	r6, [ip, #-20]	; 0xffffffec
   15848:	cmp	ip, lr
   1584c:	bne	15760 <__assert_fail@plt+0x44d0>
   15850:	add	r1, r1, #1040	; 0x410
   15854:	add	r2, r0, #528	; 0x210
   15858:	ldr	lr, [r2, #-16]
   1585c:	ldr	r5, [r2, #-528]	; 0xfffffdf0
   15860:	and	r4, lr, #1020	; 0x3fc
   15864:	eor	r3, r3, r3, lsl #13
   15868:	ldr	r4, [r0, r4]
   1586c:	add	r3, r3, r5
   15870:	add	r4, r3, r4
   15874:	add	r4, r4, r6
   15878:	str	r4, [r2, #-16]
   1587c:	lsr	r4, r4, #8
   15880:	and	r4, r4, #1020	; 0x3fc
   15884:	eor	r3, r3, r3, lsr #6
   15888:	ldr	r5, [r0, r4]
   1588c:	add	ip, ip, #16
   15890:	add	r5, lr, r5
   15894:	str	r5, [ip, #-32]	; 0xffffffe0
   15898:	ldr	r4, [r2, #-12]
   1589c:	ldr	r6, [r2, #-524]	; 0xfffffdf4
   158a0:	and	lr, r4, #1020	; 0x3fc
   158a4:	add	r3, r3, r6
   158a8:	ldr	r6, [r0, lr]
   158ac:	eor	lr, r3, r3, lsl #2
   158b0:	add	r3, r3, r6
   158b4:	add	r3, r3, r5
   158b8:	str	r3, [r2, #-12]
   158bc:	lsr	r3, r3, #8
   158c0:	and	r3, r3, #1020	; 0x3fc
   158c4:	add	r2, r2, #16
   158c8:	ldr	r3, [r0, r3]
   158cc:	add	r4, r4, r3
   158d0:	str	r4, [ip, #-28]	; 0xffffffe4
   158d4:	ldr	r5, [r2, #-24]	; 0xffffffe8
   158d8:	ldr	r6, [r2, #-536]	; 0xfffffde8
   158dc:	and	r3, r5, #1020	; 0x3fc
   158e0:	add	lr, lr, r6
   158e4:	ldr	r6, [r0, r3]
   158e8:	eor	r3, lr, lr, lsr #16
   158ec:	add	lr, lr, r6
   158f0:	add	lr, lr, r4
   158f4:	str	lr, [r2, #-24]	; 0xffffffe8
   158f8:	lsr	lr, lr, #8
   158fc:	and	lr, lr, #1020	; 0x3fc
   15900:	ldr	lr, [r0, lr]
   15904:	add	r5, r5, lr
   15908:	str	r5, [ip, #-24]	; 0xffffffe8
   1590c:	ldr	r4, [r2, #-20]	; 0xffffffec
   15910:	ldr	r6, [r2, #-532]	; 0xfffffdec
   15914:	and	lr, r4, #1020	; 0x3fc
   15918:	add	r3, r3, r6
   1591c:	ldr	lr, [r0, lr]
   15920:	add	lr, r3, lr
   15924:	add	lr, lr, r5
   15928:	str	lr, [r2, #-20]	; 0xffffffec
   1592c:	lsr	lr, lr, #8
   15930:	and	lr, lr, #1020	; 0x3fc
   15934:	ldr	r6, [r0, lr]
   15938:	add	r6, r4, r6
   1593c:	str	r6, [ip, #-20]	; 0xffffffec
   15940:	cmp	r1, ip
   15944:	bne	15858 <__assert_fail@plt+0x45c8>
   15948:	str	r3, [r0, #1024]	; 0x400
   1594c:	str	r6, [r0, #1028]	; 0x404
   15950:	pop	{r4, r5, r6, r7, pc}
   15954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15958:	mov	r2, r0
   1595c:	ldr	r8, [pc, #452]	; 15b28 <__assert_fail@plt+0x4898>
   15960:	ldr	r7, [pc, #452]	; 15b2c <__assert_fail@plt+0x489c>
   15964:	ldr	r6, [pc, #452]	; 15b30 <__assert_fail@plt+0x48a0>
   15968:	ldr	r4, [pc, #452]	; 15b34 <__assert_fail@plt+0x48a4>
   1596c:	ldr	lr, [pc, #452]	; 15b38 <__assert_fail@plt+0x48a8>
   15970:	ldr	ip, [pc, #452]	; 15b3c <__assert_fail@plt+0x48ac>
   15974:	ldr	r1, [pc, #452]	; 15b40 <__assert_fail@plt+0x48b0>
   15978:	ldr	r9, [pc, #452]	; 15b44 <__assert_fail@plt+0x48b4>
   1597c:	add	fp, r0, #1024	; 0x400
   15980:	mov	r3, r0
   15984:	ldm	r3, {r5, sl}
   15988:	add	r3, r3, #32
   1598c:	add	r1, r1, sl
   15990:	add	r9, r9, r5
   15994:	ldr	sl, [r3, #-24]	; 0xffffffe8
   15998:	ldr	r5, [r3, #-20]	; 0xffffffec
   1599c:	eor	r9, r9, r1, lsl #11
   159a0:	add	ip, ip, sl
   159a4:	add	r5, r9, r5
   159a8:	ldr	sl, [r3, #-16]
   159ac:	add	lr, r5, lr
   159b0:	add	r1, r1, ip
   159b4:	ldr	r5, [r3, #-12]
   159b8:	eor	r1, r1, ip, lsr #2
   159bc:	add	ip, ip, lr
   159c0:	add	sl, r1, sl
   159c4:	eor	ip, ip, lr, lsl #8
   159c8:	add	r4, sl, r4
   159cc:	add	r5, ip, r5
   159d0:	add	r6, r5, r6
   159d4:	add	lr, lr, r4
   159d8:	ldr	r5, [r3, #-8]
   159dc:	eor	lr, lr, r4, lsr #16
   159e0:	ldr	sl, [r3, #-4]
   159e4:	add	r4, r4, r6
   159e8:	add	r5, lr, r5
   159ec:	eor	r4, r4, r6, lsl #10
   159f0:	add	r7, r5, r7
   159f4:	add	r6, r6, r7
   159f8:	add	sl, r4, sl
   159fc:	add	r8, sl, r8
   15a00:	eor	r6, r6, r7, lsr #4
   15a04:	add	r9, r9, r6
   15a08:	add	r7, r7, r8
   15a0c:	eor	r7, r7, r8, lsl #8
   15a10:	add	r8, r8, r9
   15a14:	eor	r8, r8, r9, lsr #9
   15a18:	add	r1, r1, r7
   15a1c:	add	r9, r9, r1
   15a20:	add	ip, ip, r8
   15a24:	str	r4, [r3, #-16]
   15a28:	str	lr, [r3, #-20]	; 0xffffffec
   15a2c:	str	r1, [r3, #-28]	; 0xffffffe4
   15a30:	str	r9, [r3, #-32]	; 0xffffffe0
   15a34:	str	ip, [r3, #-24]	; 0xffffffe8
   15a38:	str	r7, [r3, #-8]
   15a3c:	str	r8, [r3, #-4]
   15a40:	str	r6, [r3, #-12]
   15a44:	cmp	fp, r3
   15a48:	bne	15984 <__assert_fail@plt+0x46f4>
   15a4c:	ldm	r2, {r3, r5}
   15a50:	ldr	sl, [r2, #24]
   15a54:	add	r2, r2, #32
   15a58:	add	r1, r1, r5
   15a5c:	ldr	r5, [r2, #-24]	; 0xffffffe8
   15a60:	add	r9, r9, r3
   15a64:	ldr	r3, [r2, #-20]	; 0xffffffec
   15a68:	add	ip, ip, r5
   15a6c:	eor	r9, r9, r1, lsl #11
   15a70:	ldr	r5, [r2, #-16]
   15a74:	add	r3, r9, r3
   15a78:	add	r1, r1, ip
   15a7c:	add	lr, r3, lr
   15a80:	eor	r1, r1, ip, lsr #2
   15a84:	ldr	r3, [r2, #-12]
   15a88:	add	ip, ip, lr
   15a8c:	add	r5, r1, r5
   15a90:	eor	ip, ip, lr, lsl #8
   15a94:	add	r4, r5, r4
   15a98:	add	r3, ip, r3
   15a9c:	add	lr, lr, r4
   15aa0:	add	r6, r3, r6
   15aa4:	eor	lr, lr, r4, lsr #16
   15aa8:	ldr	r3, [r2, #-4]
   15aac:	add	r4, r4, r6
   15ab0:	add	sl, lr, sl
   15ab4:	eor	r4, r4, r6, lsl #10
   15ab8:	add	r7, sl, r7
   15abc:	add	r6, r6, r7
   15ac0:	add	r3, r4, r3
   15ac4:	add	r8, r3, r8
   15ac8:	eor	r6, r6, r7, lsr #4
   15acc:	add	r9, r9, r6
   15ad0:	add	r7, r7, r8
   15ad4:	eor	r7, r7, r8, lsl #8
   15ad8:	add	r8, r8, r9
   15adc:	eor	r8, r8, r9, lsr #9
   15ae0:	add	r1, r1, r7
   15ae4:	add	r9, r9, r1
   15ae8:	add	ip, ip, r8
   15aec:	str	r4, [r2, #-16]
   15af0:	str	lr, [r2, #-20]	; 0xffffffec
   15af4:	str	r1, [r2, #-28]	; 0xffffffe4
   15af8:	str	r9, [r2, #-32]	; 0xffffffe0
   15afc:	str	ip, [r2, #-24]	; 0xffffffe8
   15b00:	str	r7, [r2, #-8]
   15b04:	str	r8, [r2, #-4]
   15b08:	str	r6, [r2, #-12]
   15b0c:	cmp	fp, r2
   15b10:	bne	15a4c <__assert_fail@plt+0x47bc>
   15b14:	mov	r3, #0
   15b18:	str	r3, [r0, #1032]	; 0x408
   15b1c:	str	r3, [r0, #1028]	; 0x404
   15b20:	str	r3, [r0, #1024]	; 0x400
   15b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b28:	rsbcc	r9, r0, r9, lsl r1
   15b2c:	strbtgt	lr, [pc], #2587	; 15b34 <__assert_fail@plt+0x48a4>
   15b30:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   15b34:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   15b38:	svceq	0x00421ad8
   15b3c:	tstgt	r6, #1200	; 0x4b0
   15b40:	ldrbls	r0, [r9, #89]	; 0x59
   15b44:	cmnne	r7, #360	; 0x168
   15b48:	push	{r4, r5, r6, lr}
   15b4c:	mov	r5, r1
   15b50:	bl	11230 <fopen64@plt>
   15b54:	subs	r4, r0, #0
   15b58:	beq	15b68 <__assert_fail@plt+0x48d8>
   15b5c:	bl	111ac <fileno@plt>
   15b60:	cmp	r0, #2
   15b64:	bls	15b70 <__assert_fail@plt+0x48e0>
   15b68:	mov	r0, r4
   15b6c:	pop	{r4, r5, r6, pc}
   15b70:	bl	15be0 <__assert_fail@plt+0x4950>
   15b74:	subs	r6, r0, #0
   15b78:	blt	15bc0 <__assert_fail@plt+0x4930>
   15b7c:	mov	r0, r4
   15b80:	bl	14db0 <__assert_fail@plt+0x3b20>
   15b84:	cmp	r0, #0
   15b88:	bne	15ba0 <__assert_fail@plt+0x4910>
   15b8c:	mov	r1, r5
   15b90:	mov	r0, r6
   15b94:	bl	10f84 <fdopen@plt>
   15b98:	subs	r4, r0, #0
   15b9c:	bne	15b68 <__assert_fail@plt+0x48d8>
   15ba0:	bl	11158 <__errno_location@plt>
   15ba4:	mov	r4, #0
   15ba8:	mov	r5, r0
   15bac:	mov	r0, r6
   15bb0:	ldr	r6, [r5]
   15bb4:	bl	1126c <close@plt>
   15bb8:	str	r6, [r5]
   15bbc:	b	15b68 <__assert_fail@plt+0x48d8>
   15bc0:	bl	11158 <__errno_location@plt>
   15bc4:	mov	r5, r0
   15bc8:	mov	r0, r4
   15bcc:	ldr	r6, [r5]
   15bd0:	mov	r4, #0
   15bd4:	bl	14db0 <__assert_fail@plt+0x3b20>
   15bd8:	str	r6, [r5]
   15bdc:	b	15b68 <__assert_fail@plt+0x48d8>
   15be0:	mov	r2, #3
   15be4:	mov	r1, #0
   15be8:	b	15bec <__assert_fail@plt+0x495c>
   15bec:	push	{r1, r2, r3}
   15bf0:	push	{r4, r5, r6, r7, r8, lr}
   15bf4:	sub	sp, sp, #12
   15bf8:	ldr	r4, [pc, #300]	; 15d2c <__assert_fail@plt+0x4a9c>
   15bfc:	ldr	r3, [pc, #300]	; 15d30 <__assert_fail@plt+0x4aa0>
   15c00:	ldr	r1, [sp, #36]	; 0x24
   15c04:	ldr	r2, [r4]
   15c08:	cmp	r1, r3
   15c0c:	add	r3, sp, #40	; 0x28
   15c10:	str	r2, [sp, #4]
   15c14:	str	r3, [sp]
   15c18:	bne	15ce4 <__assert_fail@plt+0x4a54>
   15c1c:	ldr	r6, [pc, #272]	; 15d34 <__assert_fail@plt+0x4aa4>
   15c20:	add	r3, sp, #44	; 0x2c
   15c24:	str	r3, [sp]
   15c28:	ldr	r3, [r6]
   15c2c:	ldr	r7, [sp, #40]	; 0x28
   15c30:	cmp	r3, #0
   15c34:	blt	15c78 <__assert_fail@plt+0x49e8>
   15c38:	mov	r2, r7
   15c3c:	mov	r8, r0
   15c40:	bl	111dc <fcntl64@plt>
   15c44:	subs	r5, r0, #0
   15c48:	blt	15cf4 <__assert_fail@plt+0x4a64>
   15c4c:	mov	r3, #1
   15c50:	str	r3, [r6]
   15c54:	ldr	r2, [sp, #4]
   15c58:	ldr	r3, [r4]
   15c5c:	mov	r0, r5
   15c60:	cmp	r2, r3
   15c64:	bne	15d28 <__assert_fail@plt+0x4a98>
   15c68:	add	sp, sp, #12
   15c6c:	pop	{r4, r5, r6, r7, r8, lr}
   15c70:	add	sp, sp, #12
   15c74:	bx	lr
   15c78:	mov	r2, r7
   15c7c:	mov	r1, #0
   15c80:	bl	15bec <__assert_fail@plt+0x495c>
   15c84:	subs	r5, r0, #0
   15c88:	blt	15c54 <__assert_fail@plt+0x49c4>
   15c8c:	ldr	r3, [r6]
   15c90:	cmn	r3, #1
   15c94:	bne	15c54 <__assert_fail@plt+0x49c4>
   15c98:	mov	r1, #1
   15c9c:	mov	r0, r5
   15ca0:	bl	111dc <fcntl64@plt>
   15ca4:	subs	r2, r0, #0
   15ca8:	blt	15cc4 <__assert_fail@plt+0x4a34>
   15cac:	orr	r2, r2, #1
   15cb0:	mov	r1, #2
   15cb4:	mov	r0, r5
   15cb8:	bl	111dc <fcntl64@plt>
   15cbc:	cmn	r0, #1
   15cc0:	bne	15c54 <__assert_fail@plt+0x49c4>
   15cc4:	bl	11158 <__errno_location@plt>
   15cc8:	mov	r6, r0
   15ccc:	mov	r0, r5
   15cd0:	ldr	r7, [r6]
   15cd4:	mvn	r5, #0
   15cd8:	bl	1126c <close@plt>
   15cdc:	str	r7, [r6]
   15ce0:	b	15c54 <__assert_fail@plt+0x49c4>
   15ce4:	ldr	r2, [sp, #40]	; 0x28
   15ce8:	bl	111dc <fcntl64@plt>
   15cec:	mov	r5, r0
   15cf0:	b	15c54 <__assert_fail@plt+0x49c4>
   15cf4:	bl	11158 <__errno_location@plt>
   15cf8:	ldr	r3, [r0]
   15cfc:	cmp	r3, #22
   15d00:	bne	15c4c <__assert_fail@plt+0x49bc>
   15d04:	mov	r2, r7
   15d08:	mov	r0, r8
   15d0c:	mov	r1, #0
   15d10:	bl	15bec <__assert_fail@plt+0x495c>
   15d14:	subs	r5, r0, #0
   15d18:	mvnge	r3, #0
   15d1c:	strge	r3, [r6]
   15d20:	bge	15c98 <__assert_fail@plt+0x4a08>
   15d24:	b	15c54 <__assert_fail@plt+0x49c4>
   15d28:	bl	11038 <__stack_chk_fail@plt>
   15d2c:	andeq	r7, r2, r8, lsl #30
   15d30:	andeq	r0, r0, r6, lsl #8
   15d34:	andeq	r8, r2, r4, asr #5
   15d38:	subs	r2, r1, #1
   15d3c:	bxeq	lr
   15d40:	bcc	15f18 <__assert_fail@plt+0x4c88>
   15d44:	cmp	r0, r1
   15d48:	bls	15efc <__assert_fail@plt+0x4c6c>
   15d4c:	tst	r1, r2
   15d50:	beq	15f08 <__assert_fail@plt+0x4c78>
   15d54:	clz	r3, r0
   15d58:	clz	r2, r1
   15d5c:	sub	r3, r2, r3
   15d60:	rsbs	r3, r3, #31
   15d64:	addne	r3, r3, r3, lsl #1
   15d68:	mov	r2, #0
   15d6c:	addne	pc, pc, r3, lsl #2
   15d70:	nop			; (mov r0, r0)
   15d74:	cmp	r0, r1, lsl #31
   15d78:	adc	r2, r2, r2
   15d7c:	subcs	r0, r0, r1, lsl #31
   15d80:	cmp	r0, r1, lsl #30
   15d84:	adc	r2, r2, r2
   15d88:	subcs	r0, r0, r1, lsl #30
   15d8c:	cmp	r0, r1, lsl #29
   15d90:	adc	r2, r2, r2
   15d94:	subcs	r0, r0, r1, lsl #29
   15d98:	cmp	r0, r1, lsl #28
   15d9c:	adc	r2, r2, r2
   15da0:	subcs	r0, r0, r1, lsl #28
   15da4:	cmp	r0, r1, lsl #27
   15da8:	adc	r2, r2, r2
   15dac:	subcs	r0, r0, r1, lsl #27
   15db0:	cmp	r0, r1, lsl #26
   15db4:	adc	r2, r2, r2
   15db8:	subcs	r0, r0, r1, lsl #26
   15dbc:	cmp	r0, r1, lsl #25
   15dc0:	adc	r2, r2, r2
   15dc4:	subcs	r0, r0, r1, lsl #25
   15dc8:	cmp	r0, r1, lsl #24
   15dcc:	adc	r2, r2, r2
   15dd0:	subcs	r0, r0, r1, lsl #24
   15dd4:	cmp	r0, r1, lsl #23
   15dd8:	adc	r2, r2, r2
   15ddc:	subcs	r0, r0, r1, lsl #23
   15de0:	cmp	r0, r1, lsl #22
   15de4:	adc	r2, r2, r2
   15de8:	subcs	r0, r0, r1, lsl #22
   15dec:	cmp	r0, r1, lsl #21
   15df0:	adc	r2, r2, r2
   15df4:	subcs	r0, r0, r1, lsl #21
   15df8:	cmp	r0, r1, lsl #20
   15dfc:	adc	r2, r2, r2
   15e00:	subcs	r0, r0, r1, lsl #20
   15e04:	cmp	r0, r1, lsl #19
   15e08:	adc	r2, r2, r2
   15e0c:	subcs	r0, r0, r1, lsl #19
   15e10:	cmp	r0, r1, lsl #18
   15e14:	adc	r2, r2, r2
   15e18:	subcs	r0, r0, r1, lsl #18
   15e1c:	cmp	r0, r1, lsl #17
   15e20:	adc	r2, r2, r2
   15e24:	subcs	r0, r0, r1, lsl #17
   15e28:	cmp	r0, r1, lsl #16
   15e2c:	adc	r2, r2, r2
   15e30:	subcs	r0, r0, r1, lsl #16
   15e34:	cmp	r0, r1, lsl #15
   15e38:	adc	r2, r2, r2
   15e3c:	subcs	r0, r0, r1, lsl #15
   15e40:	cmp	r0, r1, lsl #14
   15e44:	adc	r2, r2, r2
   15e48:	subcs	r0, r0, r1, lsl #14
   15e4c:	cmp	r0, r1, lsl #13
   15e50:	adc	r2, r2, r2
   15e54:	subcs	r0, r0, r1, lsl #13
   15e58:	cmp	r0, r1, lsl #12
   15e5c:	adc	r2, r2, r2
   15e60:	subcs	r0, r0, r1, lsl #12
   15e64:	cmp	r0, r1, lsl #11
   15e68:	adc	r2, r2, r2
   15e6c:	subcs	r0, r0, r1, lsl #11
   15e70:	cmp	r0, r1, lsl #10
   15e74:	adc	r2, r2, r2
   15e78:	subcs	r0, r0, r1, lsl #10
   15e7c:	cmp	r0, r1, lsl #9
   15e80:	adc	r2, r2, r2
   15e84:	subcs	r0, r0, r1, lsl #9
   15e88:	cmp	r0, r1, lsl #8
   15e8c:	adc	r2, r2, r2
   15e90:	subcs	r0, r0, r1, lsl #8
   15e94:	cmp	r0, r1, lsl #7
   15e98:	adc	r2, r2, r2
   15e9c:	subcs	r0, r0, r1, lsl #7
   15ea0:	cmp	r0, r1, lsl #6
   15ea4:	adc	r2, r2, r2
   15ea8:	subcs	r0, r0, r1, lsl #6
   15eac:	cmp	r0, r1, lsl #5
   15eb0:	adc	r2, r2, r2
   15eb4:	subcs	r0, r0, r1, lsl #5
   15eb8:	cmp	r0, r1, lsl #4
   15ebc:	adc	r2, r2, r2
   15ec0:	subcs	r0, r0, r1, lsl #4
   15ec4:	cmp	r0, r1, lsl #3
   15ec8:	adc	r2, r2, r2
   15ecc:	subcs	r0, r0, r1, lsl #3
   15ed0:	cmp	r0, r1, lsl #2
   15ed4:	adc	r2, r2, r2
   15ed8:	subcs	r0, r0, r1, lsl #2
   15edc:	cmp	r0, r1, lsl #1
   15ee0:	adc	r2, r2, r2
   15ee4:	subcs	r0, r0, r1, lsl #1
   15ee8:	cmp	r0, r1
   15eec:	adc	r2, r2, r2
   15ef0:	subcs	r0, r0, r1
   15ef4:	mov	r0, r2
   15ef8:	bx	lr
   15efc:	moveq	r0, #1
   15f00:	movne	r0, #0
   15f04:	bx	lr
   15f08:	clz	r2, r1
   15f0c:	rsb	r2, r2, #31
   15f10:	lsr	r0, r0, r2
   15f14:	bx	lr
   15f18:	cmp	r0, #0
   15f1c:	mvnne	r0, #0
   15f20:	b	15f80 <__assert_fail@plt+0x4cf0>
   15f24:	cmp	r1, #0
   15f28:	beq	15f18 <__assert_fail@plt+0x4c88>
   15f2c:	push	{r0, r1, lr}
   15f30:	bl	15d38 <__assert_fail@plt+0x4aa8>
   15f34:	pop	{r1, r2, lr}
   15f38:	mul	r3, r2, r0
   15f3c:	sub	r1, r1, r3
   15f40:	bx	lr
   15f44:	cmp	r3, #0
   15f48:	cmpeq	r2, #0
   15f4c:	bne	15f64 <__assert_fail@plt+0x4cd4>
   15f50:	cmp	r1, #0
   15f54:	cmpeq	r0, #0
   15f58:	mvnne	r1, #0
   15f5c:	mvnne	r0, #0
   15f60:	b	15f80 <__assert_fail@plt+0x4cf0>
   15f64:	sub	sp, sp, #8
   15f68:	push	{sp, lr}
   15f6c:	bl	15f90 <__assert_fail@plt+0x4d00>
   15f70:	ldr	lr, [sp, #4]
   15f74:	add	sp, sp, #8
   15f78:	pop	{r2, r3}
   15f7c:	bx	lr
   15f80:	push	{r1, lr}
   15f84:	mov	r0, #8
   15f88:	bl	10fa8 <raise@plt>
   15f8c:	pop	{r1, pc}
   15f90:	cmp	r1, r3
   15f94:	cmpeq	r0, r2
   15f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f9c:	mov	r4, r0
   15fa0:	movcc	r0, #0
   15fa4:	mov	r5, r1
   15fa8:	ldr	lr, [sp, #36]	; 0x24
   15fac:	movcc	r1, r0
   15fb0:	bcc	160ac <__assert_fail@plt+0x4e1c>
   15fb4:	cmp	r3, #0
   15fb8:	clzeq	ip, r2
   15fbc:	clzne	ip, r3
   15fc0:	addeq	ip, ip, #32
   15fc4:	cmp	r5, #0
   15fc8:	clzeq	r1, r4
   15fcc:	addeq	r1, r1, #32
   15fd0:	clzne	r1, r5
   15fd4:	sub	ip, ip, r1
   15fd8:	sub	sl, ip, #32
   15fdc:	lsl	r9, r3, ip
   15fe0:	rsb	fp, ip, #32
   15fe4:	orr	r9, r9, r2, lsl sl
   15fe8:	orr	r9, r9, r2, lsr fp
   15fec:	lsl	r8, r2, ip
   15ff0:	cmp	r5, r9
   15ff4:	cmpeq	r4, r8
   15ff8:	movcc	r0, #0
   15ffc:	movcc	r1, r0
   16000:	bcc	1601c <__assert_fail@plt+0x4d8c>
   16004:	mov	r0, #1
   16008:	subs	r4, r4, r8
   1600c:	lsl	r1, r0, sl
   16010:	orr	r1, r1, r0, lsr fp
   16014:	lsl	r0, r0, ip
   16018:	sbc	r5, r5, r9
   1601c:	cmp	ip, #0
   16020:	beq	160ac <__assert_fail@plt+0x4e1c>
   16024:	lsr	r6, r8, #1
   16028:	orr	r6, r6, r9, lsl #31
   1602c:	lsr	r7, r9, #1
   16030:	mov	r2, ip
   16034:	b	16058 <__assert_fail@plt+0x4dc8>
   16038:	subs	r3, r4, r6
   1603c:	sbc	r8, r5, r7
   16040:	adds	r3, r3, r3
   16044:	adc	r8, r8, r8
   16048:	adds	r4, r3, #1
   1604c:	adc	r5, r8, #0
   16050:	subs	r2, r2, #1
   16054:	beq	16074 <__assert_fail@plt+0x4de4>
   16058:	cmp	r5, r7
   1605c:	cmpeq	r4, r6
   16060:	bcs	16038 <__assert_fail@plt+0x4da8>
   16064:	adds	r4, r4, r4
   16068:	adc	r5, r5, r5
   1606c:	subs	r2, r2, #1
   16070:	bne	16058 <__assert_fail@plt+0x4dc8>
   16074:	lsr	r3, r4, ip
   16078:	orr	r3, r3, r5, lsl fp
   1607c:	lsr	r2, r5, ip
   16080:	orr	r3, r3, r5, lsr sl
   16084:	adds	r0, r0, r4
   16088:	mov	r4, r3
   1608c:	lsl	r3, r2, ip
   16090:	orr	r3, r3, r4, lsl sl
   16094:	lsl	ip, r4, ip
   16098:	orr	r3, r3, r4, lsr fp
   1609c:	adc	r1, r1, r5
   160a0:	subs	r0, r0, ip
   160a4:	mov	r5, r2
   160a8:	sbc	r1, r1, r3
   160ac:	cmp	lr, #0
   160b0:	strdne	r4, [lr]
   160b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160bc:	mov	r7, r0
   160c0:	ldr	r6, [pc, #72]	; 16110 <__assert_fail@plt+0x4e80>
   160c4:	ldr	r5, [pc, #72]	; 16114 <__assert_fail@plt+0x4e84>
   160c8:	add	r6, pc, r6
   160cc:	add	r5, pc, r5
   160d0:	sub	r6, r6, r5
   160d4:	mov	r8, r1
   160d8:	mov	r9, r2
   160dc:	bl	10f64 <fdopen@plt-0x20>
   160e0:	asrs	r6, r6, #2
   160e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   160e8:	mov	r4, #0
   160ec:	add	r4, r4, #1
   160f0:	ldr	r3, [r5], #4
   160f4:	mov	r2, r9
   160f8:	mov	r1, r8
   160fc:	mov	r0, r7
   16100:	blx	r3
   16104:	cmp	r6, r4
   16108:	bne	160ec <__assert_fail@plt+0x4e5c>
   1610c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16110:	andeq	r1, r1, r4, lsr lr
   16114:	andeq	r1, r1, ip, lsr #28
   16118:	bx	lr
   1611c:	ldr	r3, [pc, #12]	; 16130 <__assert_fail@plt+0x4ea0>
   16120:	mov	r1, #0
   16124:	add	r3, pc, r3
   16128:	ldr	r2, [r3]
   1612c:	b	11164 <__cxa_atexit@plt>
   16130:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

00016134 <.fini>:
   16134:	push	{r3, lr}
   16138:	pop	{r3, pc}
