
raspbian-preinstalled/nice:     file format elf32-littlearm


Disassembly of section .init:

00010c2c <.init>:
   10c2c:	push	{r3, lr}
   10c30:	bl	112c0 <__assert_fail@plt+0x434>
   10c34:	pop	{r3, pc}

Disassembly of section .plt:

00010c38 <calloc@plt-0x14>:
   10c38:	push	{lr}		; (str lr, [sp, #-4]!)
   10c3c:	ldr	lr, [pc, #4]	; 10c48 <calloc@plt-0x4>
   10c40:	add	lr, pc, lr
   10c44:	ldr	pc, [lr, #8]!
   10c48:			; <UNDEFINED> instruction: 0x000153b8

00010c4c <calloc@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #952]!	; 0x3b8

00010c58 <fputs_unlocked@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #944]!	; 0x3b0

00010c64 <raise@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #936]!	; 0x3a8

00010c70 <strcmp@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #928]!	; 0x3a0

00010c7c <strtol@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #920]!	; 0x398

00010c88 <fflush@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #912]!	; 0x390

00010c94 <free@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #904]!	; 0x388

00010ca0 <_exit@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #896]!	; 0x380

00010cac <memcpy@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #888]!	; 0x378

00010cb8 <execvp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #880]!	; 0x370

00010cc4 <mbsinit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #872]!	; 0x368

00010cd0 <memcmp@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #864]!	; 0x360

00010cdc <dcgettext@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #856]!	; 0x358

00010ce8 <__stack_chk_fail@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #848]!	; 0x350

00010cf4 <realloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #840]!	; 0x348

00010d00 <getpriority@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #832]!	; 0x340

00010d0c <textdomain@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #824]!	; 0x338

00010d18 <iswprint@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #816]!	; 0x330

00010d24 <fwrite@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #808]!	; 0x328

00010d30 <lseek64@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #800]!	; 0x320

00010d3c <__ctype_get_mb_cur_max@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #792]!	; 0x318

00010d48 <__fpending@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #784]!	; 0x310

00010d54 <mbrtowc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #776]!	; 0x308

00010d60 <error@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #768]!	; 0x300

00010d6c <setpriority@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #760]!	; 0x2f8

00010d78 <malloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #752]!	; 0x2f0

00010d84 <__libc_start_main@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d90 <__freading@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #736]!	; 0x2e0

00010d9c <__gmon_start__@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #728]!	; 0x2d8

00010da8 <getopt_long@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #720]!	; 0x2d0

00010db4 <__ctype_b_loc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc0 <exit@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dcc <strlen@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dd8 <strchr@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #688]!	; 0x2b0

00010de4 <__errno_location@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #680]!	; 0x2a8

00010df0 <__cxa_atexit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dfc <memset@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #664]!	; 0x298

00010e08 <__printf_chk@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #656]!	; 0x290

00010e14 <fileno@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #648]!	; 0x288

00010e20 <__fprintf_chk@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #640]!	; 0x280

00010e2c <fclose@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #632]!	; 0x278

00010e38 <fseeko64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #624]!	; 0x270

00010e44 <setlocale@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #616]!	; 0x268

00010e50 <strrchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #608]!	; 0x260

00010e5c <nl_langinfo@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #600]!	; 0x258

00010e68 <bindtextdomain@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #592]!	; 0x250

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #584]!	; 0x248

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #576]!	; 0x240

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #568]!	; 0x238

Disassembly of section .text:

00010e98 <.text>:
   10e98:	ldr	r3, [pc, #908]	; 1122c <__assert_fail@plt+0x3a0>
   10e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ea0:	sub	sp, sp, #20
   10ea4:	ldr	r3, [r3]
   10ea8:	mov	r6, r0
   10eac:	ldr	r0, [r1]
   10eb0:	str	r3, [sp, #12]
   10eb4:	mov	r5, r1
   10eb8:	bl	117b4 <__assert_fail@plt+0x928>
   10ebc:	ldr	r1, [pc, #876]	; 11230 <__assert_fail@plt+0x3a4>
   10ec0:	mov	r0, #6
   10ec4:	bl	10e44 <setlocale@plt>
   10ec8:	ldr	r1, [pc, #868]	; 11234 <__assert_fail@plt+0x3a8>
   10ecc:	ldr	r0, [pc, #868]	; 11238 <__assert_fail@plt+0x3ac>
   10ed0:	bl	10e68 <bindtextdomain@plt>
   10ed4:	ldr	r0, [pc, #860]	; 11238 <__assert_fail@plt+0x3ac>
   10ed8:	bl	10d0c <textdomain@plt>
   10edc:	ldr	r3, [pc, #856]	; 1123c <__assert_fail@plt+0x3b0>
   10ee0:	mov	r2, #125	; 0x7d
   10ee4:	ldr	r0, [pc, #852]	; 11240 <__assert_fail@plt+0x3b4>
   10ee8:	str	r2, [r3]
   10eec:	bl	15230 <__assert_fail@plt+0x43a4>
   10ef0:	cmp	r6, #1
   10ef4:	ble	11090 <__assert_fail@plt+0x204>
   10ef8:	mov	r9, #0
   10efc:	ldr	r8, [pc, #832]	; 11244 <__assert_fail@plt+0x3b8>
   10f00:	ldr	fp, [pc, #832]	; 11248 <__assert_fail@plt+0x3bc>
   10f04:	ldr	sl, [pc, #832]	; 1124c <__assert_fail@plt+0x3c0>
   10f08:	mov	r7, r9
   10f0c:	mov	r4, #1
   10f10:	ldr	r2, [r5, r4, lsl #2]
   10f14:	lsl	r1, r4, #2
   10f18:	ldrb	r3, [r2]
   10f1c:	cmp	r3, #45	; 0x2d
   10f20:	bne	10f54 <__assert_fail@plt+0xc8>
   10f24:	ldrb	r3, [r2, #1]
   10f28:	sub	r3, r3, #43	; 0x2b
   10f2c:	and	r3, r3, #253	; 0xfd
   10f30:	cmp	r3, #0
   10f34:	movne	r3, r2
   10f38:	addeq	r3, r2, #1
   10f3c:	ldrb	r3, [r3, #1]
   10f40:	sub	r3, r3, #48	; 0x30
   10f44:	cmp	r3, #9
   10f48:	addls	r9, r2, #1
   10f4c:	addls	r4, r4, #1
   10f50:	bls	11084 <__assert_fail@plt+0x1f8>
   10f54:	ldr	r3, [r5]
   10f58:	sub	r1, r1, #4
   10f5c:	sub	r0, r4, #1
   10f60:	str	r7, [sp]
   10f64:	sub	r0, r6, r0
   10f68:	str	r3, [r5, r1]
   10f6c:	mov	r2, sl
   10f70:	mov	r3, fp
   10f74:	add	r1, r5, r1
   10f78:	str	r7, [r8]
   10f7c:	bl	10da8 <getopt_long@plt>
   10f80:	ldr	r3, [r8]
   10f84:	sub	r3, r3, #1
   10f88:	add	r4, r4, r3
   10f8c:	cmn	r0, #2
   10f90:	beq	111f0 <__assert_fail@plt+0x364>
   10f94:	ble	1103c <__assert_fail@plt+0x1b0>
   10f98:	cmn	r0, #1
   10f9c:	bne	11074 <__assert_fail@plt+0x1e8>
   10fa0:	cmp	r9, #0
   10fa4:	beq	11094 <__assert_fail@plt+0x208>
   10fa8:	ldr	r2, [pc, #640]	; 11230 <__assert_fail@plt+0x3a4>
   10fac:	add	r3, sp, #8
   10fb0:	str	r2, [sp]
   10fb4:	mov	r1, #0
   10fb8:	mov	r2, #10
   10fbc:	mov	r0, r9
   10fc0:	bl	14210 <__assert_fail@plt+0x3384>
   10fc4:	cmp	r0, #1
   10fc8:	bhi	111fc <__assert_fail@plt+0x370>
   10fcc:	ldr	r7, [sp, #8]
   10fd0:	mvn	r3, #38	; 0x26
   10fd4:	cmp	r7, #39	; 0x27
   10fd8:	movge	r7, #39	; 0x27
   10fdc:	cmp	r7, r3
   10fe0:	movlt	r7, r3
   10fe4:	cmp	r4, r6
   10fe8:	beq	111c8 <__assert_fail@plt+0x33c>
   10fec:	bl	10de4 <__errno_location@plt>
   10ff0:	mov	r6, #0
   10ff4:	mov	r1, r6
   10ff8:	str	r6, [r0]
   10ffc:	mov	r8, r0
   11000:	mov	r0, r6
   11004:	bl	10d00 <getpriority@plt>
   11008:	cmn	r0, #1
   1100c:	bne	110f4 <__assert_fail@plt+0x268>
   11010:	ldr	r9, [r8]
   11014:	cmp	r9, r6
   11018:	beq	110f4 <__assert_fail@plt+0x268>
   1101c:	mov	r2, #5
   11020:	ldr	r1, [pc, #552]	; 11250 <__assert_fail@plt+0x3c4>
   11024:	mov	r0, r6
   11028:	bl	10cdc <dcgettext@plt>
   1102c:	mov	r1, r9
   11030:	mov	r2, r0
   11034:	mov	r0, #125	; 0x7d
   11038:	bl	10d60 <error@plt>
   1103c:	cmn	r0, #3
   11040:	bne	111e8 <__assert_fail@plt+0x35c>
   11044:	ldr	r1, [pc, #520]	; 11254 <__assert_fail@plt+0x3c8>
   11048:	ldr	r3, [pc, #520]	; 11258 <__assert_fail@plt+0x3cc>
   1104c:	ldr	r2, [pc, #520]	; 1125c <__assert_fail@plt+0x3d0>
   11050:	str	r7, [sp, #4]
   11054:	ldr	r0, [r1]
   11058:	ldr	r3, [r3]
   1105c:	ldr	r1, [pc, #508]	; 11260 <__assert_fail@plt+0x3d4>
   11060:	str	r2, [sp]
   11064:	ldr	r2, [pc, #504]	; 11264 <__assert_fail@plt+0x3d8>
   11068:	bl	13e84 <__assert_fail@plt+0x2ff8>
   1106c:	mov	r0, #0
   11070:	bl	10dc0 <exit@plt>
   11074:	cmp	r0, #110	; 0x6e
   11078:	bne	111e8 <__assert_fail@plt+0x35c>
   1107c:	ldr	r3, [pc, #484]	; 11268 <__assert_fail@plt+0x3dc>
   11080:	ldr	r9, [r3]
   11084:	cmp	r4, r6
   11088:	blt	10f10 <__assert_fail@plt+0x84>
   1108c:	b	10fa0 <__assert_fail@plt+0x114>
   11090:	mov	r4, #1
   11094:	bl	10de4 <__errno_location@plt>
   11098:	cmp	r4, r6
   1109c:	mov	r7, r0
   110a0:	movne	r7, #10
   110a4:	bne	10fec <__assert_fail@plt+0x160>
   110a8:	mov	r4, #0
   110ac:	str	r4, [r7]
   110b0:	mov	r1, r4
   110b4:	mov	r0, r4
   110b8:	bl	10d00 <getpriority@plt>
   110bc:	cmn	r0, #1
   110c0:	mov	r2, r0
   110c4:	bne	11198 <__assert_fail@plt+0x30c>
   110c8:	ldr	r5, [r7]
   110cc:	cmp	r5, r4
   110d0:	beq	11198 <__assert_fail@plt+0x30c>
   110d4:	mov	r2, #5
   110d8:	ldr	r1, [pc, #368]	; 11250 <__assert_fail@plt+0x3c4>
   110dc:	mov	r0, r4
   110e0:	bl	10cdc <dcgettext@plt>
   110e4:	mov	r1, r5
   110e8:	mov	r2, r0
   110ec:	mov	r0, #125	; 0x7d
   110f0:	bl	10d60 <error@plt>
   110f4:	mov	r1, #0
   110f8:	add	r2, r0, r7
   110fc:	mov	r0, r1
   11100:	bl	10d6c <setpriority@plt>
   11104:	cmp	r0, #0
   11108:	beq	11158 <__assert_fail@plt+0x2cc>
   1110c:	ldr	r6, [r8]
   11110:	mov	r2, #5
   11114:	cmp	r6, #1
   11118:	cmpne	r6, #13
   1111c:	ldr	r1, [pc, #328]	; 1126c <__assert_fail@plt+0x3e0>
   11120:	mov	r0, #0
   11124:	movne	r7, #125	; 0x7d
   11128:	moveq	r7, #0
   1112c:	bl	10cdc <dcgettext@plt>
   11130:	mov	r1, r6
   11134:	mov	r2, r0
   11138:	mov	r0, r7
   1113c:	bl	10d60 <error@plt>
   11140:	ldr	r3, [pc, #296]	; 11270 <__assert_fail@plt+0x3e4>
   11144:	ldr	r3, [r3]
   11148:	ldr	r3, [r3]
   1114c:	tst	r3, #32
   11150:	movne	r4, #125	; 0x7d
   11154:	bne	111a8 <__assert_fail@plt+0x31c>
   11158:	lsl	r7, r4, #2
   1115c:	ldr	r0, [r5, r4, lsl #2]
   11160:	add	r1, r5, r7
   11164:	bl	10cb8 <execvp@plt>
   11168:	ldr	r6, [r8]
   1116c:	ldr	r0, [r5, r7]
   11170:	cmp	r6, #2
   11174:	moveq	r4, #127	; 0x7f
   11178:	movne	r4, #126	; 0x7e
   1117c:	bl	13a18 <__assert_fail@plt+0x2b8c>
   11180:	mov	r1, r6
   11184:	ldr	r2, [pc, #232]	; 11274 <__assert_fail@plt+0x3e8>
   11188:	mov	r3, r0
   1118c:	mov	r0, #0
   11190:	bl	10d60 <error@plt>
   11194:	b	111a8 <__assert_fail@plt+0x31c>
   11198:	ldr	r1, [pc, #216]	; 11278 <__assert_fail@plt+0x3ec>
   1119c:	mov	r0, #1
   111a0:	bl	10e08 <__printf_chk@plt>
   111a4:	mov	r4, #0
   111a8:	ldr	r3, [pc, #124]	; 1122c <__assert_fail@plt+0x3a0>
   111ac:	ldr	r2, [sp, #12]
   111b0:	mov	r0, r4
   111b4:	ldr	r3, [r3]
   111b8:	cmp	r2, r3
   111bc:	bne	111f8 <__assert_fail@plt+0x36c>
   111c0:	add	sp, sp, #20
   111c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111c8:	mov	r2, #5
   111cc:	ldr	r1, [pc, #168]	; 1127c <__assert_fail@plt+0x3f0>
   111d0:	mov	r0, #0
   111d4:	bl	10cdc <dcgettext@plt>
   111d8:	mov	r1, #0
   111dc:	mov	r2, r0
   111e0:	mov	r0, r1
   111e4:	bl	10d60 <error@plt>
   111e8:	mov	r0, #125	; 0x7d
   111ec:	bl	11374 <__assert_fail@plt+0x4e8>
   111f0:	mov	r0, #0
   111f4:	bl	11374 <__assert_fail@plt+0x4e8>
   111f8:	bl	10ce8 <__stack_chk_fail@plt>
   111fc:	mov	r2, #5
   11200:	ldr	r1, [pc, #120]	; 11280 <__assert_fail@plt+0x3f4>
   11204:	mov	r0, #0
   11208:	bl	10cdc <dcgettext@plt>
   1120c:	mov	r4, r0
   11210:	mov	r0, r9
   11214:	bl	13a18 <__assert_fail@plt+0x2b8c>
   11218:	mov	r2, r4
   1121c:	mov	r1, #0
   11220:	mov	r3, r0
   11224:	mov	r0, #125	; 0x7d
   11228:	bl	10d60 <error@plt>
   1122c:	andeq	r5, r2, r8, lsl #30
   11230:	ldrdeq	r5, [r1], -r8
   11234:	andeq	r5, r1, ip, lsr #13
   11238:	andeq	r5, r1, r0, lsl #12
   1123c:	andeq	r6, r2, r0, ror #1
   11240:	ldrdeq	r1, [r1], -ip
   11244:	andeq	r6, r2, r0, lsr r1
   11248:	andeq	r5, r1, ip, lsl #5
   1124c:	andeq	r5, r1, r0, asr #13
   11250:	andeq	r5, r1, r8, lsl r7
   11254:	andeq	r6, r2, ip, lsr r1
   11258:	ldrdeq	r6, [r2], -ip
   1125c:	andeq	r5, r1, r4, asr #13
   11260:	andeq	r5, r1, ip, asr #5
   11264:	strdeq	r5, [r1], -ip
   11268:	andeq	r6, r2, r0, asr #2
   1126c:	andeq	r5, r1, r0, lsr r7
   11270:	andeq	r6, r2, r8, lsr r1
   11274:	ldrdeq	r5, [r1], -r8
   11278:	andeq	r5, r1, ip, lsr #14
   1127c:	andeq	r5, r1, ip, ror #13
   11280:	ldrdeq	r5, [r1], -r4
   11284:	mov	fp, #0
   11288:	mov	lr, #0
   1128c:	pop	{r1}		; (ldr r1, [sp], #4)
   11290:	mov	r2, sp
   11294:	push	{r2}		; (str r2, [sp, #-4]!)
   11298:	push	{r0}		; (str r0, [sp, #-4]!)
   1129c:	ldr	ip, [pc, #16]	; 112b4 <__assert_fail@plt+0x428>
   112a0:	push	{ip}		; (str ip, [sp, #-4]!)
   112a4:	ldr	r0, [pc, #12]	; 112b8 <__assert_fail@plt+0x42c>
   112a8:	ldr	r3, [pc, #12]	; 112bc <__assert_fail@plt+0x430>
   112ac:	bl	10d84 <__libc_start_main@plt>
   112b0:	bl	10e80 <abort@plt>
   112b4:	andeq	r5, r1, ip, lsr #4
   112b8:	muleq	r1, r8, lr
   112bc:	andeq	r5, r1, ip, asr #3
   112c0:	ldr	r3, [pc, #20]	; 112dc <__assert_fail@plt+0x450>
   112c4:	ldr	r2, [pc, #20]	; 112e0 <__assert_fail@plt+0x454>
   112c8:	add	r3, pc, r3
   112cc:	ldr	r2, [r3, r2]
   112d0:	cmp	r2, #0
   112d4:	bxeq	lr
   112d8:	b	10d9c <__gmon_start__@plt>
   112dc:	andeq	r4, r1, r0, lsr sp
   112e0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   112e4:	ldr	r0, [pc, #24]	; 11304 <__assert_fail@plt+0x478>
   112e8:	ldr	r3, [pc, #24]	; 11308 <__assert_fail@plt+0x47c>
   112ec:	cmp	r3, r0
   112f0:	bxeq	lr
   112f4:	ldr	r3, [pc, #16]	; 1130c <__assert_fail@plt+0x480>
   112f8:	cmp	r3, #0
   112fc:	bxeq	lr
   11300:	bx	r3
   11304:	andeq	r6, r2, r4, lsr #2
   11308:	andeq	r6, r2, r4, lsr #2
   1130c:	andeq	r0, r0, r0
   11310:	ldr	r0, [pc, #36]	; 1133c <__assert_fail@plt+0x4b0>
   11314:	ldr	r1, [pc, #36]	; 11340 <__assert_fail@plt+0x4b4>
   11318:	sub	r1, r1, r0
   1131c:	asr	r1, r1, #2
   11320:	add	r1, r1, r1, lsr #31
   11324:	asrs	r1, r1, #1
   11328:	bxeq	lr
   1132c:	ldr	r3, [pc, #16]	; 11344 <__assert_fail@plt+0x4b8>
   11330:	cmp	r3, #0
   11334:	bxeq	lr
   11338:	bx	r3
   1133c:	andeq	r6, r2, r4, lsr #2
   11340:	andeq	r6, r2, r4, lsr #2
   11344:	andeq	r0, r0, r0
   11348:	push	{r4, lr}
   1134c:	ldr	r4, [pc, #24]	; 1136c <__assert_fail@plt+0x4e0>
   11350:	ldrb	r3, [r4]
   11354:	cmp	r3, #0
   11358:	popne	{r4, pc}
   1135c:	bl	112e4 <__assert_fail@plt+0x458>
   11360:	mov	r3, #1
   11364:	strb	r3, [r4]
   11368:	pop	{r4, pc}
   1136c:	andeq	r6, r2, r4, asr #2
   11370:	b	11310 <__assert_fail@plt+0x484>
   11374:	ldr	r3, [pc, #740]	; 11660 <__assert_fail@plt+0x7d4>
   11378:	push	{r7, lr}
   1137c:	sub	sp, sp, #64	; 0x40
   11380:	ldr	r3, [r3]
   11384:	subs	r4, r0, #0
   11388:	str	r3, [sp, #60]	; 0x3c
   1138c:	beq	113c8 <__assert_fail@plt+0x53c>
   11390:	ldr	r3, [pc, #716]	; 11664 <__assert_fail@plt+0x7d8>
   11394:	mov	r2, #5
   11398:	ldr	r1, [pc, #712]	; 11668 <__assert_fail@plt+0x7dc>
   1139c:	mov	r0, #0
   113a0:	ldr	r5, [r3]
   113a4:	bl	10cdc <dcgettext@plt>
   113a8:	ldr	r3, [pc, #700]	; 1166c <__assert_fail@plt+0x7e0>
   113ac:	mov	r1, #1
   113b0:	ldr	r3, [r3]
   113b4:	mov	r2, r0
   113b8:	mov	r0, r5
   113bc:	bl	10e20 <__fprintf_chk@plt>
   113c0:	mov	r0, r4
   113c4:	bl	10dc0 <exit@plt>
   113c8:	mov	r2, #5
   113cc:	ldr	r1, [pc, #668]	; 11670 <__assert_fail@plt+0x7e4>
   113d0:	bl	10cdc <dcgettext@plt>
   113d4:	ldr	r3, [pc, #656]	; 1166c <__assert_fail@plt+0x7e0>
   113d8:	ldr	r5, [pc, #660]	; 11674 <__assert_fail@plt+0x7e8>
   113dc:	ldr	r2, [r3]
   113e0:	mov	r1, r0
   113e4:	mov	r0, #1
   113e8:	bl	10e08 <__printf_chk@plt>
   113ec:	mov	r2, #5
   113f0:	ldr	r1, [pc, #640]	; 11678 <__assert_fail@plt+0x7ec>
   113f4:	mov	r0, r4
   113f8:	bl	10cdc <dcgettext@plt>
   113fc:	mov	r3, #19
   11400:	mvn	r2, #19
   11404:	mov	r1, r0
   11408:	mov	r0, #1
   1140c:	bl	10e08 <__printf_chk@plt>
   11410:	mov	r2, #5
   11414:	ldr	r1, [pc, #608]	; 1167c <__assert_fail@plt+0x7f0>
   11418:	mov	r0, r4
   1141c:	bl	10cdc <dcgettext@plt>
   11420:	ldr	r1, [r5]
   11424:	bl	10c58 <fputs_unlocked@plt>
   11428:	mov	r2, #5
   1142c:	ldr	r1, [pc, #588]	; 11680 <__assert_fail@plt+0x7f4>
   11430:	mov	r0, r4
   11434:	bl	10cdc <dcgettext@plt>
   11438:	ldr	r1, [r5]
   1143c:	bl	10c58 <fputs_unlocked@plt>
   11440:	mov	r2, #5
   11444:	ldr	r1, [pc, #568]	; 11684 <__assert_fail@plt+0x7f8>
   11448:	mov	r0, r4
   1144c:	bl	10cdc <dcgettext@plt>
   11450:	ldr	r1, [r5]
   11454:	bl	10c58 <fputs_unlocked@plt>
   11458:	mov	r2, #5
   1145c:	ldr	r1, [pc, #548]	; 11688 <__assert_fail@plt+0x7fc>
   11460:	mov	r0, r4
   11464:	bl	10cdc <dcgettext@plt>
   11468:	ldr	r1, [r5]
   1146c:	bl	10c58 <fputs_unlocked@plt>
   11470:	mov	r2, #5
   11474:	ldr	r1, [pc, #528]	; 1168c <__assert_fail@plt+0x800>
   11478:	mov	r0, r4
   1147c:	bl	10cdc <dcgettext@plt>
   11480:	ldr	r2, [pc, #520]	; 11690 <__assert_fail@plt+0x804>
   11484:	mov	r1, r0
   11488:	mov	r0, #1
   1148c:	bl	10e08 <__printf_chk@plt>
   11490:	ldr	lr, [pc, #508]	; 11694 <__assert_fail@plt+0x808>
   11494:	add	ip, sp, #4
   11498:	ldm	lr!, {r0, r1, r2, r3}
   1149c:	stmia	ip!, {r0, r1, r2, r3}
   114a0:	ldm	lr!, {r0, r1, r2, r3}
   114a4:	ldr	r6, [sp, #4]
   114a8:	stmia	ip!, {r0, r1, r2, r3}
   114ac:	cmp	r6, #0
   114b0:	ldm	lr!, {r0, r1, r2, r3}
   114b4:	addeq	r5, sp, #4
   114b8:	stmia	ip!, {r0, r1, r2, r3}
   114bc:	ldm	lr, {r0, r1}
   114c0:	stm	ip, {r0, r1}
   114c4:	beq	114f4 <__assert_fail@plt+0x668>
   114c8:	ldr	r7, [pc, #448]	; 11690 <__assert_fail@plt+0x804>
   114cc:	add	r5, sp, #4
   114d0:	b	114e0 <__assert_fail@plt+0x654>
   114d4:	ldr	r6, [r5, #8]!
   114d8:	cmp	r6, #0
   114dc:	beq	114f4 <__assert_fail@plt+0x668>
   114e0:	mov	r1, r6
   114e4:	mov	r0, r7
   114e8:	bl	10c70 <strcmp@plt>
   114ec:	cmp	r0, #0
   114f0:	bne	114d4 <__assert_fail@plt+0x648>
   114f4:	ldr	r5, [r5, #4]
   114f8:	mov	r2, #5
   114fc:	cmp	r5, #0
   11500:	ldr	r1, [pc, #400]	; 11698 <__assert_fail@plt+0x80c>
   11504:	beq	115ac <__assert_fail@plt+0x720>
   11508:	mov	r0, #0
   1150c:	bl	10cdc <dcgettext@plt>
   11510:	ldr	r3, [pc, #388]	; 1169c <__assert_fail@plt+0x810>
   11514:	ldr	r2, [pc, #388]	; 116a0 <__assert_fail@plt+0x814>
   11518:	mov	r1, r0
   1151c:	mov	r0, #1
   11520:	bl	10e08 <__printf_chk@plt>
   11524:	mov	r1, #0
   11528:	mov	r0, #5
   1152c:	bl	10e44 <setlocale@plt>
   11530:	cmp	r0, #0
   11534:	ldreq	r6, [pc, #340]	; 11690 <__assert_fail@plt+0x804>
   11538:	beq	11554 <__assert_fail@plt+0x6c8>
   1153c:	mov	r2, #3
   11540:	ldr	r1, [pc, #348]	; 116a4 <__assert_fail@plt+0x818>
   11544:	bl	10e74 <strncmp@plt>
   11548:	ldr	r6, [pc, #320]	; 11690 <__assert_fail@plt+0x804>
   1154c:	cmp	r0, #0
   11550:	bne	1163c <__assert_fail@plt+0x7b0>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #328]	; 116a8 <__assert_fail@plt+0x81c>
   1155c:	mov	r0, #0
   11560:	bl	10cdc <dcgettext@plt>
   11564:	ldr	r3, [pc, #292]	; 11690 <__assert_fail@plt+0x804>
   11568:	ldr	r2, [pc, #300]	; 1169c <__assert_fail@plt+0x810>
   1156c:	mov	r1, r0
   11570:	mov	r0, #1
   11574:	bl	10e08 <__printf_chk@plt>
   11578:	mov	r2, #5
   1157c:	ldr	r1, [pc, #296]	; 116ac <__assert_fail@plt+0x820>
   11580:	mov	r0, #0
   11584:	bl	10cdc <dcgettext@plt>
   11588:	ldr	r2, [pc, #288]	; 116b0 <__assert_fail@plt+0x824>
   1158c:	cmp	r5, r6
   11590:	ldr	r3, [pc, #284]	; 116b4 <__assert_fail@plt+0x828>
   11594:	movne	r3, r2
   11598:	mov	r1, r0
   1159c:	mov	r2, r5
   115a0:	mov	r0, #1
   115a4:	bl	10e08 <__printf_chk@plt>
   115a8:	b	113c0 <__assert_fail@plt+0x534>
   115ac:	mov	r0, r5
   115b0:	bl	10cdc <dcgettext@plt>
   115b4:	ldr	r3, [pc, #224]	; 1169c <__assert_fail@plt+0x810>
   115b8:	ldr	r2, [pc, #224]	; 116a0 <__assert_fail@plt+0x814>
   115bc:	mov	r1, r0
   115c0:	mov	r0, #1
   115c4:	bl	10e08 <__printf_chk@plt>
   115c8:	mov	r1, r5
   115cc:	mov	r0, #5
   115d0:	bl	10e44 <setlocale@plt>
   115d4:	cmp	r0, #0
   115d8:	beq	115f0 <__assert_fail@plt+0x764>
   115dc:	mov	r2, #3
   115e0:	ldr	r1, [pc, #188]	; 116a4 <__assert_fail@plt+0x818>
   115e4:	bl	10e74 <strncmp@plt>
   115e8:	cmp	r0, #0
   115ec:	bne	11634 <__assert_fail@plt+0x7a8>
   115f0:	mov	r2, #5
   115f4:	ldr	r1, [pc, #172]	; 116a8 <__assert_fail@plt+0x81c>
   115f8:	mov	r0, #0
   115fc:	bl	10cdc <dcgettext@plt>
   11600:	ldr	r3, [pc, #136]	; 11690 <__assert_fail@plt+0x804>
   11604:	ldr	r2, [pc, #144]	; 1169c <__assert_fail@plt+0x810>
   11608:	mov	r5, r3
   1160c:	mov	r1, r0
   11610:	mov	r0, #1
   11614:	bl	10e08 <__printf_chk@plt>
   11618:	ldr	r1, [pc, #140]	; 116ac <__assert_fail@plt+0x820>
   1161c:	mov	r2, #5
   11620:	mov	r0, #0
   11624:	bl	10cdc <dcgettext@plt>
   11628:	ldr	r3, [pc, #132]	; 116b4 <__assert_fail@plt+0x828>
   1162c:	mov	r1, r0
   11630:	b	1159c <__assert_fail@plt+0x710>
   11634:	ldr	r6, [pc, #84]	; 11690 <__assert_fail@plt+0x804>
   11638:	mov	r5, r6
   1163c:	mov	r2, #5
   11640:	ldr	r1, [pc, #112]	; 116b8 <__assert_fail@plt+0x82c>
   11644:	mov	r0, #0
   11648:	bl	10cdc <dcgettext@plt>
   1164c:	ldr	r2, [pc, #60]	; 11690 <__assert_fail@plt+0x804>
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	bl	10e08 <__printf_chk@plt>
   1165c:	b	11554 <__assert_fail@plt+0x6c8>
   11660:	andeq	r5, r2, r8, lsl #30
   11664:	andeq	r6, r2, r8, lsr r1
   11668:	ldrdeq	r5, [r1], -r4
   1166c:	andeq	r6, r2, r0, asr r1
   11670:	strdeq	r5, [r1], -ip
   11674:	andeq	r6, r2, ip, lsr r1
   11678:	andeq	r5, r1, r4, lsr #6
   1167c:	andeq	r5, r1, r4, lsl #8
   11680:	andeq	r5, r1, r0, asr r4
   11684:	muleq	r1, r4, r4
   11688:	andeq	r5, r1, r4, asr #9
   1168c:	strdeq	r5, [r1], -ip
   11690:	andeq	r5, r1, ip, asr #5
   11694:	andeq	r5, r1, r4, asr r2
   11698:			; <UNDEFINED> instruction: 0x000155bc
   1169c:	ldrdeq	r5, [r1], -r4
   116a0:	strdeq	r5, [r1], -ip
   116a4:	andeq	r5, r1, ip, lsl #12
   116a8:	andeq	r5, r1, r8, asr r6
   116ac:	andeq	r5, r1, r8, ror r6
   116b0:	ldrdeq	r5, [r1], -r8
   116b4:	andeq	r5, r1, ip, asr #14
   116b8:	andeq	r5, r1, r0, lsl r6
   116bc:	ldr	r3, [pc, #4]	; 116c8 <__assert_fail@plt+0x83c>
   116c0:	str	r0, [r3]
   116c4:	bx	lr
   116c8:	andeq	r6, r2, r8, asr #2
   116cc:	ldr	r3, [pc, #4]	; 116d8 <__assert_fail@plt+0x84c>
   116d0:	strb	r0, [r3, #4]
   116d4:	bx	lr
   116d8:	andeq	r6, r2, r8, asr #2
   116dc:	ldr	r3, [pc, #180]	; 11798 <__assert_fail@plt+0x90c>
   116e0:	push	{r4, r5, r6, lr}
   116e4:	sub	sp, sp, #8
   116e8:	ldr	r0, [r3]
   116ec:	bl	14adc <__assert_fail@plt+0x3c50>
   116f0:	cmp	r0, #0
   116f4:	beq	1171c <__assert_fail@plt+0x890>
   116f8:	bl	10de4 <__errno_location@plt>
   116fc:	ldr	r5, [pc, #152]	; 1179c <__assert_fail@plt+0x910>
   11700:	ldrb	r3, [r5, #4]
   11704:	cmp	r3, #0
   11708:	mov	r4, r0
   1170c:	beq	11738 <__assert_fail@plt+0x8ac>
   11710:	ldr	r3, [r0]
   11714:	cmp	r3, #32
   11718:	bne	11738 <__assert_fail@plt+0x8ac>
   1171c:	ldr	r3, [pc, #124]	; 117a0 <__assert_fail@plt+0x914>
   11720:	ldr	r0, [r3]
   11724:	bl	14adc <__assert_fail@plt+0x3c50>
   11728:	cmp	r0, #0
   1172c:	bne	11778 <__assert_fail@plt+0x8ec>
   11730:	add	sp, sp, #8
   11734:	pop	{r4, r5, r6, pc}
   11738:	mov	r2, #5
   1173c:	ldr	r1, [pc, #96]	; 117a4 <__assert_fail@plt+0x918>
   11740:	mov	r0, #0
   11744:	bl	10cdc <dcgettext@plt>
   11748:	mov	r6, r0
   1174c:	ldr	r0, [r5]
   11750:	cmp	r0, #0
   11754:	beq	11784 <__assert_fail@plt+0x8f8>
   11758:	ldr	r4, [r4]
   1175c:	bl	13838 <__assert_fail@plt+0x29ac>
   11760:	mov	r1, r4
   11764:	str	r6, [sp]
   11768:	ldr	r2, [pc, #56]	; 117a8 <__assert_fail@plt+0x91c>
   1176c:	mov	r3, r0
   11770:	mov	r0, #0
   11774:	bl	10d60 <error@plt>
   11778:	ldr	r3, [pc, #44]	; 117ac <__assert_fail@plt+0x920>
   1177c:	ldr	r0, [r3]
   11780:	bl	10ca0 <_exit@plt>
   11784:	mov	r3, r6
   11788:	ldr	r1, [r4]
   1178c:	ldr	r2, [pc, #28]	; 117b0 <__assert_fail@plt+0x924>
   11790:	bl	10d60 <error@plt>
   11794:	b	11778 <__assert_fail@plt+0x8ec>
   11798:	andeq	r6, r2, ip, lsr r1
   1179c:	andeq	r6, r2, r8, asr #2
   117a0:	andeq	r6, r2, r8, lsr r1
   117a4:	andeq	r5, r1, r8, asr #15
   117a8:	ldrdeq	r5, [r1], -r4
   117ac:	andeq	r6, r2, r0, ror #1
   117b0:	ldrdeq	r5, [r1], -r8
   117b4:	push	{r4, r5, r6, lr}
   117b8:	subs	r4, r0, #0
   117bc:	beq	11830 <__assert_fail@plt+0x9a4>
   117c0:	mov	r1, #47	; 0x2f
   117c4:	bl	10e50 <strrchr@plt>
   117c8:	subs	r5, r0, #0
   117cc:	beq	1181c <__assert_fail@plt+0x990>
   117d0:	add	r6, r5, #1
   117d4:	sub	r3, r6, r4
   117d8:	cmp	r3, #6
   117dc:	ble	1181c <__assert_fail@plt+0x990>
   117e0:	mov	r2, #7
   117e4:	ldr	r1, [pc, #96]	; 1184c <__assert_fail@plt+0x9c0>
   117e8:	sub	r0, r5, #6
   117ec:	bl	10e74 <strncmp@plt>
   117f0:	cmp	r0, #0
   117f4:	bne	1181c <__assert_fail@plt+0x990>
   117f8:	mov	r2, #3
   117fc:	ldr	r1, [pc, #76]	; 11850 <__assert_fail@plt+0x9c4>
   11800:	mov	r0, r6
   11804:	bl	10e74 <strncmp@plt>
   11808:	cmp	r0, #0
   1180c:	movne	r4, r6
   11810:	ldreq	r3, [pc, #60]	; 11854 <__assert_fail@plt+0x9c8>
   11814:	addeq	r4, r5, #4
   11818:	streq	r4, [r3]
   1181c:	ldr	r2, [pc, #52]	; 11858 <__assert_fail@plt+0x9cc>
   11820:	ldr	r3, [pc, #52]	; 1185c <__assert_fail@plt+0x9d0>
   11824:	str	r4, [r2]
   11828:	str	r4, [r3]
   1182c:	pop	{r4, r5, r6, pc}
   11830:	ldr	r3, [pc, #40]	; 11860 <__assert_fail@plt+0x9d4>
   11834:	mov	r2, #55	; 0x37
   11838:	mov	r1, #1
   1183c:	ldr	r3, [r3]
   11840:	ldr	r0, [pc, #28]	; 11864 <__assert_fail@plt+0x9d8>
   11844:	bl	10d24 <fwrite@plt>
   11848:	bl	10e80 <abort@plt>
   1184c:	andeq	r5, r1, r4, lsl r8
   11850:	andeq	r5, r1, ip, lsl r8
   11854:	andeq	r6, r2, r8, lsr #2
   11858:	andeq	r6, r2, r0, asr r1
   1185c:	andeq	r6, r2, ip, lsr #2
   11860:	andeq	r6, r2, r8, lsr r1
   11864:	ldrdeq	r5, [r1], -ip
   11868:	push	{r4, lr}
   1186c:	mov	r2, #48	; 0x30
   11870:	mov	r4, r1
   11874:	mov	r1, #0
   11878:	bl	10dfc <memset@plt>
   1187c:	cmp	r4, #10
   11880:	beq	1188c <__assert_fail@plt+0xa00>
   11884:	str	r4, [r0]
   11888:	pop	{r4, pc}
   1188c:	bl	10e80 <abort@plt>
   11890:	push	{r4, r5, r6, lr}
   11894:	mov	r2, #5
   11898:	mov	r5, r0
   1189c:	mov	r6, r1
   118a0:	mov	r1, r0
   118a4:	mov	r0, #0
   118a8:	bl	10cdc <dcgettext@plt>
   118ac:	cmp	r5, r0
   118b0:	mov	r4, r0
   118b4:	beq	118c0 <__assert_fail@plt+0xa34>
   118b8:	mov	r0, r4
   118bc:	pop	{r4, r5, r6, pc}
   118c0:	bl	14b9c <__assert_fail@plt+0x3d10>
   118c4:	ldrb	r3, [r0]
   118c8:	bic	r3, r3, #32
   118cc:	cmp	r3, #85	; 0x55
   118d0:	bne	11930 <__assert_fail@plt+0xaa4>
   118d4:	ldrb	r3, [r0, #1]
   118d8:	bic	r3, r3, #32
   118dc:	cmp	r3, #84	; 0x54
   118e0:	bne	119a8 <__assert_fail@plt+0xb1c>
   118e4:	ldrb	r3, [r0, #2]
   118e8:	bic	r3, r3, #32
   118ec:	cmp	r3, #70	; 0x46
   118f0:	bne	119a8 <__assert_fail@plt+0xb1c>
   118f4:	ldrb	r3, [r0, #3]
   118f8:	cmp	r3, #45	; 0x2d
   118fc:	bne	119a8 <__assert_fail@plt+0xb1c>
   11900:	ldrb	r3, [r0, #4]
   11904:	cmp	r3, #56	; 0x38
   11908:	bne	119a8 <__assert_fail@plt+0xb1c>
   1190c:	ldrb	r3, [r0, #5]
   11910:	cmp	r3, #0
   11914:	bne	119a8 <__assert_fail@plt+0xb1c>
   11918:	ldrb	r2, [r4]
   1191c:	ldr	r3, [pc, #156]	; 119c0 <__assert_fail@plt+0xb34>
   11920:	ldr	r4, [pc, #156]	; 119c4 <__assert_fail@plt+0xb38>
   11924:	cmp	r2, #96	; 0x60
   11928:	movne	r4, r3
   1192c:	b	118b8 <__assert_fail@plt+0xa2c>
   11930:	cmp	r3, #71	; 0x47
   11934:	bne	119a8 <__assert_fail@plt+0xb1c>
   11938:	ldrb	r3, [r0, #1]
   1193c:	bic	r3, r3, #32
   11940:	cmp	r3, #66	; 0x42
   11944:	bne	119a8 <__assert_fail@plt+0xb1c>
   11948:	ldrb	r3, [r0, #2]
   1194c:	cmp	r3, #49	; 0x31
   11950:	bne	119a8 <__assert_fail@plt+0xb1c>
   11954:	ldrb	r3, [r0, #3]
   11958:	cmp	r3, #56	; 0x38
   1195c:	bne	119a8 <__assert_fail@plt+0xb1c>
   11960:	ldrb	r3, [r0, #4]
   11964:	cmp	r3, #48	; 0x30
   11968:	bne	119a8 <__assert_fail@plt+0xb1c>
   1196c:	ldrb	r3, [r0, #5]
   11970:	cmp	r3, #51	; 0x33
   11974:	bne	119a8 <__assert_fail@plt+0xb1c>
   11978:	ldrb	r3, [r0, #6]
   1197c:	cmp	r3, #48	; 0x30
   11980:	bne	119a8 <__assert_fail@plt+0xb1c>
   11984:	ldrb	r3, [r0, #7]
   11988:	cmp	r3, #0
   1198c:	bne	119a8 <__assert_fail@plt+0xb1c>
   11990:	ldrb	r2, [r4]
   11994:	ldr	r3, [pc, #44]	; 119c8 <__assert_fail@plt+0xb3c>
   11998:	ldr	r4, [pc, #44]	; 119cc <__assert_fail@plt+0xb40>
   1199c:	cmp	r2, #96	; 0x60
   119a0:	movne	r4, r3
   119a4:	b	118b8 <__assert_fail@plt+0xa2c>
   119a8:	ldr	r3, [pc, #32]	; 119d0 <__assert_fail@plt+0xb44>
   119ac:	ldr	r4, [pc, #32]	; 119d4 <__assert_fail@plt+0xb48>
   119b0:	cmp	r6, #9
   119b4:	movne	r4, r3
   119b8:	mov	r0, r4
   119bc:	pop	{r4, r5, r6, pc}
   119c0:	andeq	r5, r1, r8, ror r8
   119c4:	andeq	r5, r1, r4, lsl #17
   119c8:	andeq	r5, r1, ip, ror r8
   119cc:	andeq	r5, r1, r0, lsl #17
   119d0:	andeq	r5, r1, r8, lsl #17
   119d4:	andeq	r5, r1, r4, ror r8
   119d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119dc:	sub	sp, sp, #124	; 0x7c
   119e0:	ldr	ip, [pc, #3576]	; 127e0 <__assert_fail@plt+0x1954>
   119e4:	str	r3, [sp, #24]
   119e8:	ldr	r3, [sp, #168]	; 0xa8
   119ec:	ldr	ip, [ip]
   119f0:	str	r3, [sp, #56]	; 0x38
   119f4:	ldr	r3, [sp, #172]	; 0xac
   119f8:	ldr	r8, [sp, #160]	; 0xa0
   119fc:	str	r3, [sp, #80]	; 0x50
   11a00:	ldr	r3, [sp, #176]	; 0xb0
   11a04:	mov	fp, r0
   11a08:	str	r3, [sp, #76]	; 0x4c
   11a0c:	mov	sl, r1
   11a10:	str	r2, [sp, #36]	; 0x24
   11a14:	str	ip, [sp, #116]	; 0x74
   11a18:	bl	10d3c <__ctype_get_mb_cur_max@plt>
   11a1c:	ldr	r3, [sp, #164]	; 0xa4
   11a20:	ands	r4, r3, #2
   11a24:	movne	r3, #1
   11a28:	moveq	r3, #0
   11a2c:	str	r3, [sp, #32]
   11a30:	str	r0, [sp, #64]	; 0x40
   11a34:	cmp	r8, #10
   11a38:	ldrls	pc, [pc, r8, lsl #2]
   11a3c:	b	131ec <__assert_fail@plt+0x2360>
   11a40:	andeq	r1, r1, r4, lsr lr
   11a44:	andeq	r1, r1, ip, asr #29
   11a48:	andeq	r2, r1, ip, asr #9
   11a4c:	andeq	r1, r1, ip, ror #29
   11a50:	andeq	r1, r1, r0, lsr #27
   11a54:	andeq	r1, r1, r8, ror #27
   11a58:	andeq	r1, r1, r4, ror #28
   11a5c:	muleq	r1, ip, lr
   11a60:	andeq	r1, r1, ip, ror #20
   11a64:	andeq	r1, r1, ip, ror #20
   11a68:	andeq	r1, r1, ip, ror #20
   11a6c:	cmp	r8, #10
   11a70:	beq	11a94 <__assert_fail@plt+0xc08>
   11a74:	mov	r1, r8
   11a78:	ldr	r0, [pc, #3428]	; 127e4 <__assert_fail@plt+0x1958>
   11a7c:	bl	11890 <__assert_fail@plt+0xa04>
   11a80:	mov	r1, r8
   11a84:	str	r0, [sp, #80]	; 0x50
   11a88:	ldr	r0, [pc, #3420]	; 127ec <__assert_fail@plt+0x1960>
   11a8c:	bl	11890 <__assert_fail@plt+0xa04>
   11a90:	str	r0, [sp, #76]	; 0x4c
   11a94:	cmp	r4, #0
   11a98:	movne	r4, #0
   11a9c:	beq	12eac <__assert_fail@plt+0x2020>
   11aa0:	ldr	r7, [sp, #76]	; 0x4c
   11aa4:	mov	r5, #0
   11aa8:	mov	r6, #1
   11aac:	mov	r0, r7
   11ab0:	str	r6, [sp, #40]	; 0x28
   11ab4:	str	r5, [sp, #68]	; 0x44
   11ab8:	bl	10dcc <strlen@plt>
   11abc:	str	r6, [sp, #28]
   11ac0:	str	r5, [sp, #44]	; 0x2c
   11ac4:	str	r5, [sp, #72]	; 0x48
   11ac8:	str	r7, [sp, #60]	; 0x3c
   11acc:	str	r0, [sp, #52]	; 0x34
   11ad0:	str	r8, [sp, #160]	; 0xa0
   11ad4:	mov	r8, fp
   11ad8:	ldr	fp, [sp, #160]	; 0xa0
   11adc:	mov	r9, #0
   11ae0:	ldr	r3, [sp, #24]
   11ae4:	cmn	r3, #1
   11ae8:	beq	12050 <__assert_fail@plt+0x11c4>
   11aec:	ldr	r3, [sp, #24]
   11af0:	subs	r6, r3, r9
   11af4:	movne	r6, #1
   11af8:	cmp	r6, #0
   11afc:	beq	12068 <__assert_fail@plt+0x11dc>
   11b00:	ldr	r7, [sp, #28]
   11b04:	ldr	r0, [sp, #36]	; 0x24
   11b08:	cmp	fp, #2
   11b0c:	moveq	r7, #0
   11b10:	andne	r7, r7, #1
   11b14:	add	r3, r0, r9
   11b18:	cmp	r7, #0
   11b1c:	str	r3, [sp, #48]	; 0x30
   11b20:	beq	1250c <__assert_fail@plt+0x1680>
   11b24:	ldr	r2, [sp, #52]	; 0x34
   11b28:	cmp	r2, #0
   11b2c:	beq	127f0 <__assert_fail@plt+0x1964>
   11b30:	ldr	r1, [sp, #24]
   11b34:	cmp	r2, #1
   11b38:	mov	r3, r2
   11b3c:	movls	r3, #0
   11b40:	movhi	r3, #1
   11b44:	cmn	r1, #1
   11b48:	movne	r3, #0
   11b4c:	cmp	r3, #0
   11b50:	add	r5, r9, r2
   11b54:	beq	11b60 <__assert_fail@plt+0xcd4>
   11b58:	bl	10dcc <strlen@plt>
   11b5c:	str	r0, [sp, #24]
   11b60:	ldr	r3, [sp, #24]
   11b64:	cmp	r5, r3
   11b68:	bhi	127f0 <__assert_fail@plt+0x1964>
   11b6c:	ldr	r2, [sp, #52]	; 0x34
   11b70:	ldr	r1, [sp, #60]	; 0x3c
   11b74:	ldr	r0, [sp, #48]	; 0x30
   11b78:	bl	10cd0 <memcmp@plt>
   11b7c:	cmp	r0, #0
   11b80:	bne	127f0 <__assert_fail@plt+0x1964>
   11b84:	ldr	r3, [sp, #32]
   11b88:	cmp	r3, #0
   11b8c:	bne	130ac <__assert_fail@plt+0x2220>
   11b90:	ldr	r3, [sp, #48]	; 0x30
   11b94:	ldrb	r5, [r3]
   11b98:	cmp	r5, #126	; 0x7e
   11b9c:	ldrls	pc, [pc, r5, lsl #2]
   11ba0:	b	12470 <__assert_fail@plt+0x15e4>
   11ba4:	andeq	r2, r1, ip, asr r3
   11ba8:	andeq	r2, r1, r0, ror r4
   11bac:	andeq	r2, r1, r0, ror r4
   11bb0:	andeq	r2, r1, r0, ror r4
   11bb4:	andeq	r2, r1, r0, ror r4
   11bb8:	andeq	r2, r1, r0, ror r4
   11bbc:	andeq	r2, r1, r0, ror r4
   11bc0:	andeq	r2, r1, r8, lsr #8
   11bc4:	andeq	r2, r1, r8, lsl r4
   11bc8:	andeq	r2, r1, r8, lsl r3
   11bcc:	andeq	r2, r1, r0, ror #5
   11bd0:	andeq	r2, r1, r8, lsr r3
   11bd4:	andeq	r2, r1, r0, lsr #6
   11bd8:	andeq	r2, r1, r0, asr r2
   11bdc:	andeq	r2, r1, r0, ror r4
   11be0:	andeq	r2, r1, r0, ror r4
   11be4:	andeq	r2, r1, r0, ror r4
   11be8:	andeq	r2, r1, r0, ror r4
   11bec:	andeq	r2, r1, r0, ror r4
   11bf0:	andeq	r2, r1, r0, ror r4
   11bf4:	andeq	r2, r1, r0, ror r4
   11bf8:	andeq	r2, r1, r0, ror r4
   11bfc:	andeq	r2, r1, r0, ror r4
   11c00:	andeq	r2, r1, r0, ror r4
   11c04:	andeq	r2, r1, r0, ror r4
   11c08:	andeq	r2, r1, r0, ror r4
   11c0c:	andeq	r2, r1, r0, ror r4
   11c10:	andeq	r2, r1, r0, ror r4
   11c14:	andeq	r2, r1, r0, ror r4
   11c18:	andeq	r2, r1, r0, ror r4
   11c1c:	andeq	r2, r1, r0, ror r4
   11c20:	andeq	r2, r1, r0, ror r4
   11c24:	andeq	r2, r1, r0, lsr r4
   11c28:	andeq	r2, r1, r4, asr #6
   11c2c:	andeq	r2, r1, r4, asr #6
   11c30:	andeq	r2, r1, r8, asr #8
   11c34:	andeq	r2, r1, r4, asr #6
   11c38:	andeq	r2, r1, r4, ror #8
   11c3c:	andeq	r2, r1, r4, asr #6
   11c40:	andeq	r2, r1, r4, lsl #3
   11c44:	andeq	r2, r1, r4, asr #6
   11c48:	andeq	r2, r1, r4, asr #6
   11c4c:	andeq	r2, r1, r4, asr #6
   11c50:	andeq	r2, r1, r4, ror #8
   11c54:	andeq	r2, r1, r4, ror #8
   11c58:	andeq	r2, r1, r4, ror #8
   11c5c:	andeq	r2, r1, r4, ror #8
   11c60:	andeq	r2, r1, r4, ror #8
   11c64:	andeq	r2, r1, r4, ror #8
   11c68:	andeq	r2, r1, r4, ror #8
   11c6c:	andeq	r2, r1, r4, ror #8
   11c70:	andeq	r2, r1, r4, ror #8
   11c74:	andeq	r2, r1, r4, ror #8
   11c78:	andeq	r2, r1, r4, ror #8
   11c7c:	andeq	r2, r1, r4, ror #8
   11c80:	andeq	r2, r1, r4, ror #8
   11c84:	andeq	r2, r1, r4, ror #8
   11c88:	andeq	r2, r1, r4, ror #8
   11c8c:	andeq	r2, r1, r4, ror #8
   11c90:	andeq	r2, r1, r4, asr #6
   11c94:	andeq	r2, r1, r4, asr #6
   11c98:	andeq	r2, r1, r4, asr #6
   11c9c:	andeq	r2, r1, r4, asr #6
   11ca0:	andeq	r2, r1, r8, asr r1
   11ca4:	andeq	r2, r1, r0, ror r4
   11ca8:	andeq	r2, r1, r4, ror #8
   11cac:	andeq	r2, r1, r4, ror #8
   11cb0:	andeq	r2, r1, r4, ror #8
   11cb4:	andeq	r2, r1, r4, ror #8
   11cb8:	andeq	r2, r1, r4, ror #8
   11cbc:	andeq	r2, r1, r4, ror #8
   11cc0:	andeq	r2, r1, r4, ror #8
   11cc4:	andeq	r2, r1, r4, ror #8
   11cc8:	andeq	r2, r1, r4, ror #8
   11ccc:	andeq	r2, r1, r4, ror #8
   11cd0:	andeq	r2, r1, r4, ror #8
   11cd4:	andeq	r2, r1, r4, ror #8
   11cd8:	andeq	r2, r1, r4, ror #8
   11cdc:	andeq	r2, r1, r4, ror #8
   11ce0:	andeq	r2, r1, r4, ror #8
   11ce4:	andeq	r2, r1, r4, ror #8
   11ce8:	andeq	r2, r1, r4, ror #8
   11cec:	andeq	r2, r1, r4, ror #8
   11cf0:	andeq	r2, r1, r4, ror #8
   11cf4:	andeq	r2, r1, r4, ror #8
   11cf8:	andeq	r2, r1, r4, ror #8
   11cfc:	andeq	r2, r1, r4, ror #8
   11d00:	andeq	r2, r1, r4, ror #8
   11d04:	andeq	r2, r1, r4, ror #8
   11d08:	andeq	r2, r1, r4, ror #8
   11d0c:	andeq	r2, r1, r4, ror #8
   11d10:	andeq	r2, r1, r4, asr #6
   11d14:	andeq	r2, r1, r0, lsl r1
   11d18:	andeq	r2, r1, r4, ror #8
   11d1c:	andeq	r2, r1, r4, asr #6
   11d20:	andeq	r2, r1, r4, ror #8
   11d24:	andeq	r2, r1, r4, asr #6
   11d28:	andeq	r2, r1, r4, ror #8
   11d2c:	andeq	r2, r1, r4, ror #8
   11d30:	andeq	r2, r1, r4, ror #8
   11d34:	andeq	r2, r1, r4, ror #8
   11d38:	andeq	r2, r1, r4, ror #8
   11d3c:	andeq	r2, r1, r4, ror #8
   11d40:	andeq	r2, r1, r4, ror #8
   11d44:	andeq	r2, r1, r4, ror #8
   11d48:	andeq	r2, r1, r4, ror #8
   11d4c:	andeq	r2, r1, r4, ror #8
   11d50:	andeq	r2, r1, r4, ror #8
   11d54:	andeq	r2, r1, r4, ror #8
   11d58:	andeq	r2, r1, r4, ror #8
   11d5c:	andeq	r2, r1, r4, ror #8
   11d60:	andeq	r2, r1, r4, ror #8
   11d64:	andeq	r2, r1, r4, ror #8
   11d68:	andeq	r2, r1, r4, ror #8
   11d6c:	andeq	r2, r1, r4, ror #8
   11d70:	andeq	r2, r1, r4, ror #8
   11d74:	andeq	r2, r1, r4, ror #8
   11d78:	andeq	r2, r1, r4, ror #8
   11d7c:	andeq	r2, r1, r4, ror #8
   11d80:	andeq	r2, r1, r4, ror #8
   11d84:	andeq	r2, r1, r4, ror #8
   11d88:	andeq	r2, r1, r4, ror #8
   11d8c:	andeq	r2, r1, r4, ror #8
   11d90:	andeq	r1, r1, r8, lsr #30
   11d94:	andeq	r2, r1, r4, asr #6
   11d98:	andeq	r1, r1, r8, lsr #30
   11d9c:	andeq	r2, r1, r8, asr #8
   11da0:	cmp	r4, #0
   11da4:	moveq	r3, #1
   11da8:	streq	r3, [sp, #28]
   11dac:	beq	124d8 <__assert_fail@plt+0x164c>
   11db0:	mov	r3, #0
   11db4:	mov	r4, r3
   11db8:	mov	r2, #1
   11dbc:	str	r2, [sp, #40]	; 0x28
   11dc0:	str	r3, [sp, #68]	; 0x44
   11dc4:	str	r2, [sp, #32]
   11dc8:	str	r2, [sp, #52]	; 0x34
   11dcc:	ldr	r3, [pc, #2584]	; 127ec <__assert_fail@plt+0x1960>
   11dd0:	str	r4, [sp, #44]	; 0x2c
   11dd4:	str	r4, [sp, #72]	; 0x48
   11dd8:	str	r4, [sp, #28]
   11ddc:	str	r3, [sp, #60]	; 0x3c
   11de0:	mov	r8, #2
   11de4:	b	11ad0 <__assert_fail@plt+0xc44>
   11de8:	cmp	r4, #0
   11dec:	bne	13078 <__assert_fail@plt+0x21ec>
   11df0:	cmp	sl, #0
   11df4:	beq	12e38 <__assert_fail@plt+0x1fac>
   11df8:	mov	r3, #34	; 0x22
   11dfc:	strb	r3, [fp]
   11e00:	ldr	r3, [pc, #2528]	; 127e8 <__assert_fail@plt+0x195c>
   11e04:	mov	r1, r4
   11e08:	mov	r2, #1
   11e0c:	str	r4, [sp, #68]	; 0x44
   11e10:	str	r2, [sp, #40]	; 0x28
   11e14:	mov	r4, r2
   11e18:	str	r1, [sp, #44]	; 0x2c
   11e1c:	str	r1, [sp, #72]	; 0x48
   11e20:	str	r1, [sp, #32]
   11e24:	str	r2, [sp, #28]
   11e28:	str	r2, [sp, #52]	; 0x34
   11e2c:	str	r3, [sp, #60]	; 0x3c
   11e30:	b	11ad0 <__assert_fail@plt+0xc44>
   11e34:	mov	r3, #0
   11e38:	str	r3, [sp, #68]	; 0x44
   11e3c:	str	r3, [sp, #44]	; 0x2c
   11e40:	str	r3, [sp, #32]
   11e44:	str	r3, [sp, #28]
   11e48:	str	r3, [sp, #60]	; 0x3c
   11e4c:	mov	r3, #1
   11e50:	str	r8, [sp, #72]	; 0x48
   11e54:	str	r8, [sp, #52]	; 0x34
   11e58:	mov	r4, r8
   11e5c:	str	r3, [sp, #40]	; 0x28
   11e60:	b	11ad0 <__assert_fail@plt+0xc44>
   11e64:	mov	r3, #1
   11e68:	str	r3, [sp, #40]	; 0x28
   11e6c:	str	r3, [sp, #32]
   11e70:	str	r3, [sp, #28]
   11e74:	str	r3, [sp, #52]	; 0x34
   11e78:	ldr	r3, [pc, #2408]	; 127e8 <__assert_fail@plt+0x195c>
   11e7c:	mov	r2, #0
   11e80:	mov	r4, r2
   11e84:	str	r2, [sp, #68]	; 0x44
   11e88:	str	r2, [sp, #44]	; 0x2c
   11e8c:	str	r2, [sp, #72]	; 0x48
   11e90:	str	r3, [sp, #60]	; 0x3c
   11e94:	mov	r8, #5
   11e98:	b	11ad0 <__assert_fail@plt+0xc44>
   11e9c:	mov	r3, #0
   11ea0:	mov	r2, #1
   11ea4:	str	r2, [sp, #40]	; 0x28
   11ea8:	mov	r4, r3
   11eac:	str	r3, [sp, #68]	; 0x44
   11eb0:	str	r2, [sp, #28]
   11eb4:	str	r3, [sp, #44]	; 0x2c
   11eb8:	str	r3, [sp, #72]	; 0x48
   11ebc:	str	r3, [sp, #32]
   11ec0:	str	r3, [sp, #52]	; 0x34
   11ec4:	str	r3, [sp, #60]	; 0x3c
   11ec8:	b	11ad0 <__assert_fail@plt+0xc44>
   11ecc:	mov	r2, #1
   11ed0:	mov	r3, #0
   11ed4:	str	r2, [sp, #40]	; 0x28
   11ed8:	mov	r4, r3
   11edc:	str	r3, [sp, #68]	; 0x44
   11ee0:	str	r8, [sp, #52]	; 0x34
   11ee4:	str	r2, [sp, #32]
   11ee8:	b	11dcc <__assert_fail@plt+0xf40>
   11eec:	mov	r3, #1
   11ef0:	str	r3, [sp, #40]	; 0x28
   11ef4:	str	r3, [sp, #32]
   11ef8:	str	r3, [sp, #28]
   11efc:	str	r3, [sp, #52]	; 0x34
   11f00:	ldr	r3, [pc, #2276]	; 127ec <__assert_fail@plt+0x1960>
   11f04:	mov	r2, #0
   11f08:	mov	r4, r2
   11f0c:	str	r2, [sp, #68]	; 0x44
   11f10:	str	r2, [sp, #44]	; 0x2c
   11f14:	str	r2, [sp, #72]	; 0x48
   11f18:	str	r3, [sp, #60]	; 0x3c
   11f1c:	mov	r8, #2
   11f20:	b	11ad0 <__assert_fail@plt+0xc44>
   11f24:	mov	r7, #0
   11f28:	ldr	r3, [sp, #24]
   11f2c:	cmn	r3, #1
   11f30:	beq	12a6c <__assert_fail@plt+0x1be0>
   11f34:	ldr	r3, [sp, #24]
   11f38:	subs	r3, r3, #1
   11f3c:	movne	r3, #1
   11f40:	cmp	r3, #0
   11f44:	sub	r2, fp, #2
   11f48:	clz	r2, r2
   11f4c:	lsr	r2, r2, #5
   11f50:	bne	1214c <__assert_fail@plt+0x12c0>
   11f54:	cmp	r9, #0
   11f58:	bne	1214c <__assert_fail@plt+0x12c0>
   11f5c:	ldr	r3, [sp, #32]
   11f60:	tst	r3, r2
   11f64:	bne	1226c <__assert_fail@plt+0x13e0>
   11f68:	ldr	r3, [sp, #28]
   11f6c:	eor	r3, r3, #1
   11f70:	orr	r3, r2, r3
   11f74:	ldr	r2, [sp, #32]
   11f78:	eor	r3, r3, #1
   11f7c:	orrs	r3, r2, r3
   11f80:	beq	11fb0 <__assert_fail@plt+0x1124>
   11f84:	mov	r3, #0
   11f88:	ldr	r1, [sp, #56]	; 0x38
   11f8c:	cmp	r1, #0
   11f90:	beq	11fb0 <__assert_fail@plt+0x1124>
   11f94:	lsr	r2, r5, #5
   11f98:	and	r0, r5, #31
   11f9c:	uxtb	r2, r2
   11fa0:	ldr	r1, [r1, r2, lsl #2]
   11fa4:	lsr	r2, r1, r0
   11fa8:	tst	r2, #1
   11fac:	bne	11fb8 <__assert_fail@plt+0x112c>
   11fb0:	cmp	r7, #0
   11fb4:	beq	12208 <__assert_fail@plt+0x137c>
   11fb8:	sub	r2, fp, #2
   11fbc:	clz	r2, r2
   11fc0:	lsr	r2, r2, #5
   11fc4:	ldr	r3, [sp, #32]
   11fc8:	cmp	r3, #0
   11fcc:	bne	122f8 <__assert_fail@plt+0x146c>
   11fd0:	ldr	r3, [sp, #44]	; 0x2c
   11fd4:	eor	r3, r3, #1
   11fd8:	ands	r3, r2, r3
   11fdc:	beq	12014 <__assert_fail@plt+0x1188>
   11fe0:	cmp	sl, r4
   11fe4:	movhi	r2, #39	; 0x27
   11fe8:	strbhi	r2, [r8, r4]
   11fec:	add	r2, r4, #1
   11ff0:	cmp	r2, sl
   11ff4:	movcc	r1, #36	; 0x24
   11ff8:	strbcc	r1, [r8, r2]
   11ffc:	add	r2, r4, #2
   12000:	cmp	r2, sl
   12004:	add	r4, r4, #3
   12008:	movcc	r1, #39	; 0x27
   1200c:	strbcc	r1, [r8, r2]
   12010:	str	r3, [sp, #44]	; 0x2c
   12014:	cmp	r4, sl
   12018:	movcc	r3, #92	; 0x5c
   1201c:	strbcc	r3, [r8, r4]
   12020:	add	r9, r9, #1
   12024:	add	r4, r4, #1
   12028:	cmp	r4, sl
   1202c:	ldr	r3, [sp, #40]	; 0x28
   12030:	strbcc	r5, [r8, r4]
   12034:	cmp	r6, #0
   12038:	moveq	r3, #0
   1203c:	str	r3, [sp, #40]	; 0x28
   12040:	ldr	r3, [sp, #24]
   12044:	add	r4, r4, #1
   12048:	cmn	r3, #1
   1204c:	bne	11aec <__assert_fail@plt+0xc60>
   12050:	ldr	r3, [sp, #36]	; 0x24
   12054:	ldrb	r6, [r3, r9]
   12058:	adds	r6, r6, #0
   1205c:	movne	r6, #1
   12060:	cmp	r6, #0
   12064:	bne	11b00 <__assert_fail@plt+0xc74>
   12068:	str	fp, [sp, #160]	; 0xa0
   1206c:	mov	fp, r8
   12070:	ldr	r8, [sp, #160]	; 0xa0
   12074:	ldr	r1, [sp, #32]
   12078:	cmp	r4, #0
   1207c:	sub	r2, r8, #2
   12080:	clz	r2, r2
   12084:	lsr	r2, r2, #5
   12088:	andeq	r3, r2, r1
   1208c:	movne	r3, #0
   12090:	cmp	r3, #0
   12094:	bne	13180 <__assert_fail@plt+0x22f4>
   12098:	eor	r3, r1, #1
   1209c:	ands	r2, r2, r3
   120a0:	beq	130bc <__assert_fail@plt+0x2230>
   120a4:	ldr	r3, [sp, #68]	; 0x44
   120a8:	cmp	r3, #0
   120ac:	beq	130c0 <__assert_fail@plt+0x2234>
   120b0:	ldr	r3, [sp, #40]	; 0x28
   120b4:	cmp	r3, #0
   120b8:	bne	1313c <__assert_fail@plt+0x22b0>
   120bc:	ldr	r3, [sp, #72]	; 0x48
   120c0:	adds	r3, r3, #0
   120c4:	movne	r3, #1
   120c8:	cmp	sl, #0
   120cc:	movne	r3, #0
   120d0:	cmp	r3, #0
   120d4:	ldreq	r2, [sp, #68]	; 0x44
   120d8:	beq	130c0 <__assert_fail@plt+0x2234>
   120dc:	ldr	sl, [sp, #72]	; 0x48
   120e0:	str	r3, [sp, #68]	; 0x44
   120e4:	ldr	r3, [pc, #1792]	; 127ec <__assert_fail@plt+0x1960>
   120e8:	mov	r2, #39	; 0x27
   120ec:	mov	r4, #1
   120f0:	str	r3, [sp, #60]	; 0x3c
   120f4:	mov	r3, #0
   120f8:	strb	r2, [fp]
   120fc:	str	r4, [sp, #52]	; 0x34
   12100:	mov	r8, #2
   12104:	str	r3, [sp, #32]
   12108:	b	11ad0 <__assert_fail@plt+0xc44>
   1210c:	mov	r7, #0
   12110:	cmp	fp, #2
   12114:	beq	12a4c <__assert_fail@plt+0x1bc0>
   12118:	ldr	r3, [sp, #52]	; 0x34
   1211c:	ldr	r2, [sp, #28]
   12120:	ldr	r1, [sp, #32]
   12124:	cmp	r3, #0
   12128:	andne	r2, r2, r1
   1212c:	moveq	r2, #0
   12130:	cmp	r2, #0
   12134:	moveq	r5, #92	; 0x5c
   12138:	moveq	r3, r5
   1213c:	bne	12a58 <__assert_fail@plt+0x1bcc>
   12140:	ldr	r1, [sp, #28]
   12144:	cmp	r1, #0
   12148:	bne	131c8 <__assert_fail@plt+0x233c>
   1214c:	mov	r6, #0
   12150:	b	11f68 <__assert_fail@plt+0x10dc>
   12154:	mov	r7, #0
   12158:	cmp	fp, #2
   1215c:	beq	12abc <__assert_fail@plt+0x1c30>
   12160:	cmp	fp, #5
   12164:	beq	12a80 <__assert_fail@plt+0x1bf4>
   12168:	sub	r2, fp, #2
   1216c:	mov	r6, #0
   12170:	clz	r2, r2
   12174:	mov	r5, #63	; 0x3f
   12178:	lsr	r2, r2, #5
   1217c:	b	11f68 <__assert_fail@plt+0x10dc>
   12180:	mov	r7, #0
   12184:	cmp	fp, #2
   12188:	strne	r6, [sp, #68]	; 0x44
   1218c:	movne	r2, #0
   12190:	movne	r5, #39	; 0x27
   12194:	bne	11f68 <__assert_fail@plt+0x10dc>
   12198:	ldr	r3, [sp, #32]
   1219c:	cmp	r3, #0
   121a0:	bne	12e9c <__assert_fail@plt+0x2010>
   121a4:	cmp	sl, #0
   121a8:	ldr	r3, [sp, #72]	; 0x48
   121ac:	clz	r3, r3
   121b0:	lsr	r3, r3, #5
   121b4:	moveq	r3, #0
   121b8:	cmp	r3, #0
   121bc:	bne	12dd0 <__assert_fail@plt+0x1f44>
   121c0:	cmp	sl, r4
   121c4:	movhi	r3, #39	; 0x27
   121c8:	strbhi	r3, [r8, r4]
   121cc:	add	r3, r4, #1
   121d0:	cmp	sl, r3
   121d4:	movhi	r2, #92	; 0x5c
   121d8:	strbhi	r2, [r8, r3]
   121dc:	add	r3, r4, #2
   121e0:	cmp	sl, r3
   121e4:	movhi	r2, #39	; 0x27
   121e8:	strbhi	r2, [r8, r3]
   121ec:	mov	r3, #0
   121f0:	cmp	r7, #0
   121f4:	add	r4, r4, #3
   121f8:	str	r3, [sp, #44]	; 0x2c
   121fc:	str	r6, [sp, #68]	; 0x44
   12200:	mov	r5, #39	; 0x27
   12204:	bne	11fb8 <__assert_fail@plt+0x112c>
   12208:	ldr	r2, [sp, #44]	; 0x2c
   1220c:	eor	r3, r3, #1
   12210:	and	r3, r3, r2
   12214:	add	r9, r9, #1
   12218:	uxtb	r3, r3
   1221c:	cmp	r3, #0
   12220:	beq	12028 <__assert_fail@plt+0x119c>
   12224:	cmp	sl, r4
   12228:	movhi	r3, #39	; 0x27
   1222c:	strbhi	r3, [r8, r4]
   12230:	add	r3, r4, #1
   12234:	cmp	sl, r3
   12238:	movhi	r2, #39	; 0x27
   1223c:	strbhi	r2, [r8, r3]
   12240:	mov	r3, #0
   12244:	add	r4, r4, #2
   12248:	str	r3, [sp, #44]	; 0x2c
   1224c:	b	12028 <__assert_fail@plt+0x119c>
   12250:	mov	r3, #114	; 0x72
   12254:	ldr	r1, [sp, #32]
   12258:	sub	r2, fp, #2
   1225c:	clz	r2, r2
   12260:	lsr	r2, r2, #5
   12264:	tst	r2, r1
   12268:	beq	12140 <__assert_fail@plt+0x12b4>
   1226c:	mov	fp, r8
   12270:	mov	r8, #2
   12274:	ldr	r3, [sp, #28]
   12278:	cmp	r3, #0
   1227c:	movne	r8, #4
   12280:	ldr	r3, [sp, #164]	; 0xa4
   12284:	mov	ip, #0
   12288:	bic	r3, r3, #2
   1228c:	str	r3, [sp, #4]
   12290:	ldr	r3, [sp, #76]	; 0x4c
   12294:	str	r8, [sp]
   12298:	str	r3, [sp, #16]
   1229c:	ldr	r3, [sp, #80]	; 0x50
   122a0:	ldr	r2, [sp, #36]	; 0x24
   122a4:	str	r3, [sp, #12]
   122a8:	mov	r1, sl
   122ac:	ldr	r3, [sp, #24]
   122b0:	mov	r0, fp
   122b4:	str	ip, [sp, #8]
   122b8:	bl	119d8 <__assert_fail@plt+0xb4c>
   122bc:	mov	r4, r0
   122c0:	ldr	r3, [pc, #1304]	; 127e0 <__assert_fail@plt+0x1954>
   122c4:	ldr	r2, [sp, #116]	; 0x74
   122c8:	mov	r0, r4
   122cc:	ldr	r3, [r3]
   122d0:	cmp	r2, r3
   122d4:	bne	131c4 <__assert_fail@plt+0x2338>
   122d8:	add	sp, sp, #124	; 0x7c
   122dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e0:	mov	r5, #110	; 0x6e
   122e4:	ldr	r3, [sp, #32]
   122e8:	mov	r2, #0
   122ec:	cmp	r3, #0
   122f0:	mov	r6, r2
   122f4:	beq	11fd0 <__assert_fail@plt+0x1144>
   122f8:	str	fp, [sp, #160]	; 0xa0
   122fc:	mov	fp, r8
   12300:	ldr	r8, [sp, #160]	; 0xa0
   12304:	mov	r3, r2
   12308:	ldr	r2, [sp, #28]
   1230c:	and	r2, r2, r3
   12310:	str	r2, [sp, #28]
   12314:	b	12274 <__assert_fail@plt+0x13e8>
   12318:	mov	r5, #116	; 0x74
   1231c:	b	122e4 <__assert_fail@plt+0x1458>
   12320:	mov	r5, #102	; 0x66
   12324:	ldr	r3, [sp, #32]
   12328:	cmp	r3, #0
   1232c:	bne	12ed8 <__assert_fail@plt+0x204c>
   12330:	mov	r6, #0
   12334:	b	12014 <__assert_fail@plt+0x1188>
   12338:	mov	r5, #118	; 0x76
   1233c:	b	12324 <__assert_fail@plt+0x1498>
   12340:	mov	r7, #0
   12344:	mov	r6, #0
   12348:	b	11f84 <__assert_fail@plt+0x10f8>
   1234c:	ldr	r3, [sp, #32]
   12350:	cmp	r3, #0
   12354:	bne	1311c <__assert_fail@plt+0x2290>
   12358:	mov	r7, r3
   1235c:	ldr	r3, [sp, #44]	; 0x2c
   12360:	sub	r2, fp, #2
   12364:	eor	r3, r3, #1
   12368:	clz	r2, r2
   1236c:	lsr	r2, r2, #5
   12370:	ands	r3, r2, r3
   12374:	beq	12dbc <__assert_fail@plt+0x1f30>
   12378:	cmp	sl, r4
   1237c:	movhi	r1, #39	; 0x27
   12380:	strbhi	r1, [r8, r4]
   12384:	add	r1, r4, #1
   12388:	cmp	sl, r1
   1238c:	movhi	r0, #36	; 0x24
   12390:	strbhi	r0, [r8, r1]
   12394:	add	r1, r4, #2
   12398:	cmp	sl, r1
   1239c:	movhi	r0, #39	; 0x27
   123a0:	strbhi	r0, [r8, r1]
   123a4:	add	r1, r4, #3
   123a8:	cmp	sl, r1
   123ac:	bls	12e1c <__assert_fail@plt+0x1f90>
   123b0:	mov	r4, r1
   123b4:	mov	r1, #92	; 0x5c
   123b8:	strb	r1, [r8, r4]
   123bc:	mov	r1, r4
   123c0:	str	r3, [sp, #44]	; 0x2c
   123c4:	cmp	fp, #2
   123c8:	add	r4, r4, #1
   123cc:	beq	12e64 <__assert_fail@plt+0x1fd8>
   123d0:	ldr	r0, [sp, #24]
   123d4:	add	r3, r9, #1
   123d8:	cmp	r3, r0
   123dc:	bcs	123f4 <__assert_fail@plt+0x1568>
   123e0:	ldr	r0, [sp, #36]	; 0x24
   123e4:	ldrb	r3, [r0, r3]
   123e8:	sub	r3, r3, #48	; 0x30
   123ec:	cmp	r3, #9
   123f0:	bls	12e74 <__assert_fail@plt+0x1fe8>
   123f4:	mov	r5, #48	; 0x30
   123f8:	ldr	r3, [sp, #28]
   123fc:	eor	r3, r3, #1
   12400:	orrs	r2, r2, r3
   12404:	mov	r3, r6
   12408:	moveq	r6, r2
   1240c:	beq	11f88 <__assert_fail@plt+0x10fc>
   12410:	mov	r6, #0
   12414:	b	11fb0 <__assert_fail@plt+0x1124>
   12418:	mov	r2, #0
   1241c:	mov	r6, r2
   12420:	mov	r5, #98	; 0x62
   12424:	b	11fd0 <__assert_fail@plt+0x1144>
   12428:	mov	r5, #97	; 0x61
   1242c:	b	12330 <__assert_fail@plt+0x14a4>
   12430:	mov	r3, r7
   12434:	mov	r6, r7
   12438:	mov	r2, #0
   1243c:	mov	r7, r3
   12440:	mov	r5, #32
   12444:	b	11f68 <__assert_fail@plt+0x10dc>
   12448:	cmp	r9, #0
   1244c:	mov	r3, r7
   12450:	bne	12a18 <__assert_fail@plt+0x1b8c>
   12454:	mov	r6, r7
   12458:	mov	r2, r9
   1245c:	mov	r7, r3
   12460:	b	11f68 <__assert_fail@plt+0x10dc>
   12464:	mov	r6, r7
   12468:	b	11f84 <__assert_fail@plt+0x10f8>
   1246c:	mov	r7, #0
   12470:	ldr	r3, [sp, #64]	; 0x40
   12474:	cmp	r3, #1
   12478:	bne	12ad4 <__assert_fail@plt+0x1c48>
   1247c:	bl	10db4 <__ctype_b_loc@plt>
   12480:	ldr	r2, [sp, #64]	; 0x40
   12484:	sxth	r3, r5
   12488:	mov	ip, r2
   1248c:	lsl	r3, r3, #1
   12490:	ldr	r2, [r0]
   12494:	ldrh	r3, [r2, r3]
   12498:	and	r3, r3, #16384	; 0x4000
   1249c:	cmp	r3, #0
   124a0:	ldr	r3, [sp, #28]
   124a4:	movne	r6, #1
   124a8:	moveq	r6, #0
   124ac:	movne	r2, #0
   124b0:	andeq	r2, r3, #1
   124b4:	cmp	r2, #0
   124b8:	bne	12de4 <__assert_fail@plt+0x1f58>
   124bc:	sub	r2, fp, #2
   124c0:	clz	r2, r2
   124c4:	lsr	r2, r2, #5
   124c8:	b	11f68 <__assert_fail@plt+0x10dc>
   124cc:	cmp	r4, #0
   124d0:	bne	13190 <__assert_fail@plt+0x2304>
   124d4:	str	r4, [sp, #28]
   124d8:	cmp	sl, #0
   124dc:	bne	131d4 <__assert_fail@plt+0x2348>
   124e0:	ldr	r3, [pc, #772]	; 127ec <__assert_fail@plt+0x1960>
   124e4:	mov	r4, #1
   124e8:	str	r4, [sp, #40]	; 0x28
   124ec:	str	r3, [sp, #60]	; 0x3c
   124f0:	str	r4, [sp, #52]	; 0x34
   124f4:	str	sl, [sp, #72]	; 0x48
   124f8:	str	sl, [sp, #68]	; 0x44
   124fc:	str	sl, [sp, #44]	; 0x2c
   12500:	str	sl, [sp, #32]
   12504:	mov	r8, #2
   12508:	b	11ad0 <__assert_fail@plt+0xc44>
   1250c:	ldr	r3, [sp, #36]	; 0x24
   12510:	ldrb	r5, [r3, r9]
   12514:	cmp	r5, #126	; 0x7e
   12518:	ldrls	pc, [pc, r5, lsl #2]
   1251c:	b	12470 <__assert_fail@plt+0x15e4>
   12520:	andeq	r2, r1, r4, asr r7
   12524:	andeq	r2, r1, r0, ror r4
   12528:	andeq	r2, r1, r0, ror r4
   1252c:	andeq	r2, r1, r0, ror r4
   12530:	andeq	r2, r1, r0, ror r4
   12534:	andeq	r2, r1, r0, ror r4
   12538:	andeq	r2, r1, r0, ror r4
   1253c:	andeq	r2, r1, r0, asr #14
   12540:	andeq	r2, r1, ip, lsr #14
   12544:	andeq	r2, r1, r4, lsr #14
   12548:	andeq	r2, r1, ip, lsl r7
   1254c:	andeq	r2, r1, ip, asr #15
   12550:			; <UNDEFINED> instruction: 0x000127b8
   12554:	andeq	r2, r1, r0, asr r2
   12558:	andeq	r2, r1, r0, ror r4
   1255c:	andeq	r2, r1, r0, ror r4
   12560:	andeq	r2, r1, r0, ror r4
   12564:	andeq	r2, r1, r0, ror r4
   12568:	andeq	r2, r1, r0, ror r4
   1256c:	andeq	r2, r1, r0, ror r4
   12570:	andeq	r2, r1, r0, ror r4
   12574:	andeq	r2, r1, r0, ror r4
   12578:	andeq	r2, r1, r0, ror r4
   1257c:	andeq	r2, r1, r0, ror r4
   12580:	andeq	r2, r1, r0, ror r4
   12584:	andeq	r2, r1, r0, ror r4
   12588:	andeq	r2, r1, r0, ror r4
   1258c:	andeq	r2, r1, r0, ror r4
   12590:	andeq	r2, r1, r0, ror r4
   12594:	andeq	r2, r1, r0, ror r4
   12598:	andeq	r2, r1, r0, ror r4
   1259c:	andeq	r2, r1, r0, ror r4
   125a0:	andeq	r2, r1, r8, lsr #15
   125a4:	muleq	r1, r4, r7
   125a8:	muleq	r1, r4, r7
   125ac:	andeq	r2, r1, r4, lsl #15
   125b0:	muleq	r1, r4, r7
   125b4:			; <UNDEFINED> instruction: 0x000124bc
   125b8:	muleq	r1, r4, r7
   125bc:	andeq	r2, r1, r4, lsl #3
   125c0:	muleq	r1, r4, r7
   125c4:	muleq	r1, r4, r7
   125c8:	muleq	r1, r4, r7
   125cc:			; <UNDEFINED> instruction: 0x000124bc
   125d0:			; <UNDEFINED> instruction: 0x000124bc
   125d4:			; <UNDEFINED> instruction: 0x000124bc
   125d8:			; <UNDEFINED> instruction: 0x000124bc
   125dc:			; <UNDEFINED> instruction: 0x000124bc
   125e0:			; <UNDEFINED> instruction: 0x000124bc
   125e4:			; <UNDEFINED> instruction: 0x000124bc
   125e8:			; <UNDEFINED> instruction: 0x000124bc
   125ec:			; <UNDEFINED> instruction: 0x000124bc
   125f0:			; <UNDEFINED> instruction: 0x000124bc
   125f4:			; <UNDEFINED> instruction: 0x000124bc
   125f8:			; <UNDEFINED> instruction: 0x000124bc
   125fc:			; <UNDEFINED> instruction: 0x000124bc
   12600:			; <UNDEFINED> instruction: 0x000124bc
   12604:			; <UNDEFINED> instruction: 0x000124bc
   12608:			; <UNDEFINED> instruction: 0x000124bc
   1260c:	muleq	r1, r4, r7
   12610:	muleq	r1, r4, r7
   12614:	muleq	r1, r4, r7
   12618:	muleq	r1, r4, r7
   1261c:	andeq	r2, r1, r8, asr r1
   12620:	andeq	r2, r1, r0, ror r4
   12624:			; <UNDEFINED> instruction: 0x000124bc
   12628:			; <UNDEFINED> instruction: 0x000124bc
   1262c:			; <UNDEFINED> instruction: 0x000124bc
   12630:			; <UNDEFINED> instruction: 0x000124bc
   12634:			; <UNDEFINED> instruction: 0x000124bc
   12638:			; <UNDEFINED> instruction: 0x000124bc
   1263c:			; <UNDEFINED> instruction: 0x000124bc
   12640:			; <UNDEFINED> instruction: 0x000124bc
   12644:			; <UNDEFINED> instruction: 0x000124bc
   12648:			; <UNDEFINED> instruction: 0x000124bc
   1264c:			; <UNDEFINED> instruction: 0x000124bc
   12650:			; <UNDEFINED> instruction: 0x000124bc
   12654:			; <UNDEFINED> instruction: 0x000124bc
   12658:			; <UNDEFINED> instruction: 0x000124bc
   1265c:			; <UNDEFINED> instruction: 0x000124bc
   12660:			; <UNDEFINED> instruction: 0x000124bc
   12664:			; <UNDEFINED> instruction: 0x000124bc
   12668:			; <UNDEFINED> instruction: 0x000124bc
   1266c:			; <UNDEFINED> instruction: 0x000124bc
   12670:			; <UNDEFINED> instruction: 0x000124bc
   12674:			; <UNDEFINED> instruction: 0x000124bc
   12678:			; <UNDEFINED> instruction: 0x000124bc
   1267c:			; <UNDEFINED> instruction: 0x000124bc
   12680:			; <UNDEFINED> instruction: 0x000124bc
   12684:			; <UNDEFINED> instruction: 0x000124bc
   12688:			; <UNDEFINED> instruction: 0x000124bc
   1268c:	muleq	r1, r4, r7
   12690:	andeq	r2, r1, r0, lsl r1
   12694:			; <UNDEFINED> instruction: 0x000124bc
   12698:	muleq	r1, r4, r7
   1269c:			; <UNDEFINED> instruction: 0x000124bc
   126a0:	muleq	r1, r4, r7
   126a4:			; <UNDEFINED> instruction: 0x000124bc
   126a8:			; <UNDEFINED> instruction: 0x000124bc
   126ac:			; <UNDEFINED> instruction: 0x000124bc
   126b0:			; <UNDEFINED> instruction: 0x000124bc
   126b4:			; <UNDEFINED> instruction: 0x000124bc
   126b8:			; <UNDEFINED> instruction: 0x000124bc
   126bc:			; <UNDEFINED> instruction: 0x000124bc
   126c0:			; <UNDEFINED> instruction: 0x000124bc
   126c4:			; <UNDEFINED> instruction: 0x000124bc
   126c8:			; <UNDEFINED> instruction: 0x000124bc
   126cc:			; <UNDEFINED> instruction: 0x000124bc
   126d0:			; <UNDEFINED> instruction: 0x000124bc
   126d4:			; <UNDEFINED> instruction: 0x000124bc
   126d8:			; <UNDEFINED> instruction: 0x000124bc
   126dc:			; <UNDEFINED> instruction: 0x000124bc
   126e0:			; <UNDEFINED> instruction: 0x000124bc
   126e4:			; <UNDEFINED> instruction: 0x000124bc
   126e8:			; <UNDEFINED> instruction: 0x000124bc
   126ec:			; <UNDEFINED> instruction: 0x000124bc
   126f0:			; <UNDEFINED> instruction: 0x000124bc
   126f4:			; <UNDEFINED> instruction: 0x000124bc
   126f8:			; <UNDEFINED> instruction: 0x000124bc
   126fc:			; <UNDEFINED> instruction: 0x000124bc
   12700:			; <UNDEFINED> instruction: 0x000124bc
   12704:			; <UNDEFINED> instruction: 0x000124bc
   12708:			; <UNDEFINED> instruction: 0x000124bc
   1270c:	andeq	r1, r1, r8, lsr #30
   12710:	muleq	r1, r4, r7
   12714:	andeq	r1, r1, r8, lsr #30
   12718:	andeq	r2, r1, r4, lsl #15
   1271c:	mov	r3, #110	; 0x6e
   12720:	b	12254 <__assert_fail@plt+0x13c8>
   12724:	mov	r3, #116	; 0x74
   12728:	b	12254 <__assert_fail@plt+0x13c8>
   1272c:	sub	r2, fp, #2
   12730:	mov	r3, #98	; 0x62
   12734:	clz	r2, r2
   12738:	lsr	r2, r2, #5
   1273c:	b	12140 <__assert_fail@plt+0x12b4>
   12740:	sub	r2, fp, #2
   12744:	mov	r3, #97	; 0x61
   12748:	clz	r2, r2
   1274c:	lsr	r2, r2, #5
   12750:	b	12140 <__assert_fail@plt+0x12b4>
   12754:	ldr	r3, [sp, #28]
   12758:	cmp	r3, #0
   1275c:	bne	1234c <__assert_fail@plt+0x14c0>
   12760:	ldr	r3, [sp, #164]	; 0xa4
   12764:	tst	r3, #1
   12768:	bne	12ddc <__assert_fail@plt+0x1f50>
   1276c:	ldr	r6, [sp, #28]
   12770:	sub	r2, fp, #2
   12774:	mov	r7, r6
   12778:	clz	r2, r2
   1277c:	lsr	r2, r2, #5
   12780:	b	11f68 <__assert_fail@plt+0x10dc>
   12784:	sub	r2, fp, #2
   12788:	clz	r2, r2
   1278c:	lsr	r2, r2, #5
   12790:	b	11f54 <__assert_fail@plt+0x10c8>
   12794:	sub	r2, fp, #2
   12798:	mov	r6, #0
   1279c:	clz	r2, r2
   127a0:	lsr	r2, r2, #5
   127a4:	b	11f5c <__assert_fail@plt+0x10d0>
   127a8:	sub	r2, fp, #2
   127ac:	clz	r2, r2
   127b0:	lsr	r2, r2, #5
   127b4:	b	11f5c <__assert_fail@plt+0x10d0>
   127b8:	sub	r2, fp, #2
   127bc:	mov	r3, #102	; 0x66
   127c0:	clz	r2, r2
   127c4:	lsr	r2, r2, #5
   127c8:	b	12140 <__assert_fail@plt+0x12b4>
   127cc:	sub	r2, fp, #2
   127d0:	mov	r3, #118	; 0x76
   127d4:	clz	r2, r2
   127d8:	lsr	r2, r2, #5
   127dc:	b	12140 <__assert_fail@plt+0x12b4>
   127e0:	andeq	r5, r2, r8, lsl #30
   127e4:	andeq	r5, r1, ip, lsl #17
   127e8:	andeq	r5, r1, r4, ror r8
   127ec:	andeq	r5, r1, r8, lsl #17
   127f0:	ldr	r3, [sp, #48]	; 0x30
   127f4:	ldrb	r5, [r3]
   127f8:	cmp	r5, #126	; 0x7e
   127fc:	ldrls	pc, [pc, r5, lsl #2]
   12800:	b	1246c <__assert_fail@plt+0x15e0>
   12804:	andeq	r2, r1, ip, asr #6
   12808:	andeq	r2, r1, ip, ror #8
   1280c:	andeq	r2, r1, ip, ror #8
   12810:	andeq	r2, r1, ip, ror #8
   12814:	andeq	r2, r1, ip, ror #8
   12818:	andeq	r2, r1, ip, ror #8
   1281c:	andeq	r2, r1, ip, ror #8
   12820:	andeq	r2, r1, r4, asr #20
   12824:	andeq	r2, r1, ip, lsr sl
   12828:	andeq	r2, r1, r8, lsl r3
   1282c:	andeq	r2, r1, r0, ror #5
   12830:	andeq	r2, r1, r8, lsr r3
   12834:	andeq	r2, r1, r0, lsr #6
   12838:	andeq	r2, r1, r0, lsr sl
   1283c:	andeq	r2, r1, ip, ror #8
   12840:	andeq	r2, r1, ip, ror #8
   12844:	andeq	r2, r1, ip, ror #8
   12848:	andeq	r2, r1, ip, ror #8
   1284c:	andeq	r2, r1, ip, ror #8
   12850:	andeq	r2, r1, ip, ror #8
   12854:	andeq	r2, r1, ip, ror #8
   12858:	andeq	r2, r1, ip, ror #8
   1285c:	andeq	r2, r1, ip, ror #8
   12860:	andeq	r2, r1, ip, ror #8
   12864:	andeq	r2, r1, ip, ror #8
   12868:	andeq	r2, r1, ip, ror #8
   1286c:	andeq	r2, r1, ip, ror #8
   12870:	andeq	r2, r1, ip, ror #8
   12874:	andeq	r2, r1, ip, ror #8
   12878:	andeq	r2, r1, ip, ror #8
   1287c:	andeq	r2, r1, ip, ror #8
   12880:	andeq	r2, r1, ip, ror #8
   12884:	andeq	r2, r1, r8, lsr #20
   12888:	andeq	r2, r1, r0, asr #6
   1288c:	andeq	r2, r1, r0, asr #6
   12890:	andeq	r2, r1, ip, lsl #20
   12894:	andeq	r2, r1, r0, asr #6
   12898:	andeq	r2, r1, r0, lsl #20
   1289c:	andeq	r2, r1, r0, asr #6
   128a0:	andeq	r2, r1, r0, lsl #3
   128a4:	andeq	r2, r1, r0, asr #6
   128a8:	andeq	r2, r1, r0, asr #6
   128ac:	andeq	r2, r1, r0, asr #6
   128b0:	andeq	r2, r1, r0, lsl #20
   128b4:	andeq	r2, r1, r0, lsl #20
   128b8:	andeq	r2, r1, r0, lsl #20
   128bc:	andeq	r2, r1, r0, lsl #20
   128c0:	andeq	r2, r1, r0, lsl #20
   128c4:	andeq	r2, r1, r0, lsl #20
   128c8:	andeq	r2, r1, r0, lsl #20
   128cc:	andeq	r2, r1, r0, lsl #20
   128d0:	andeq	r2, r1, r0, lsl #20
   128d4:	andeq	r2, r1, r0, lsl #20
   128d8:	andeq	r2, r1, r0, lsl #20
   128dc:	andeq	r2, r1, r0, lsl #20
   128e0:	andeq	r2, r1, r0, lsl #20
   128e4:	andeq	r2, r1, r0, lsl #20
   128e8:	andeq	r2, r1, r0, lsl #20
   128ec:	andeq	r2, r1, r0, lsl #20
   128f0:	andeq	r2, r1, r0, asr #6
   128f4:	andeq	r2, r1, r0, asr #6
   128f8:	andeq	r2, r1, r0, asr #6
   128fc:	andeq	r2, r1, r0, asr #6
   12900:	andeq	r2, r1, r4, asr r1
   12904:	andeq	r2, r1, ip, ror #8
   12908:	andeq	r2, r1, r0, lsl #20
   1290c:	andeq	r2, r1, r0, lsl #20
   12910:	andeq	r2, r1, r0, lsl #20
   12914:	andeq	r2, r1, r0, lsl #20
   12918:	andeq	r2, r1, r0, lsl #20
   1291c:	andeq	r2, r1, r0, lsl #20
   12920:	andeq	r2, r1, r0, lsl #20
   12924:	andeq	r2, r1, r0, lsl #20
   12928:	andeq	r2, r1, r0, lsl #20
   1292c:	andeq	r2, r1, r0, lsl #20
   12930:	andeq	r2, r1, r0, lsl #20
   12934:	andeq	r2, r1, r0, lsl #20
   12938:	andeq	r2, r1, r0, lsl #20
   1293c:	andeq	r2, r1, r0, lsl #20
   12940:	andeq	r2, r1, r0, lsl #20
   12944:	andeq	r2, r1, r0, lsl #20
   12948:	andeq	r2, r1, r0, lsl #20
   1294c:	andeq	r2, r1, r0, lsl #20
   12950:	andeq	r2, r1, r0, lsl #20
   12954:	andeq	r2, r1, r0, lsl #20
   12958:	andeq	r2, r1, r0, lsl #20
   1295c:	andeq	r2, r1, r0, lsl #20
   12960:	andeq	r2, r1, r0, lsl #20
   12964:	andeq	r2, r1, r0, lsl #20
   12968:	andeq	r2, r1, r0, lsl #20
   1296c:	andeq	r2, r1, r0, lsl #20
   12970:	andeq	r2, r1, r0, asr #6
   12974:	andeq	r2, r1, ip, lsl #2
   12978:	andeq	r2, r1, r0, lsl #20
   1297c:	andeq	r2, r1, r0, asr #6
   12980:	andeq	r2, r1, r0, lsl #20
   12984:	andeq	r2, r1, r0, asr #6
   12988:	andeq	r2, r1, r0, lsl #20
   1298c:	andeq	r2, r1, r0, lsl #20
   12990:	andeq	r2, r1, r0, lsl #20
   12994:	andeq	r2, r1, r0, lsl #20
   12998:	andeq	r2, r1, r0, lsl #20
   1299c:	andeq	r2, r1, r0, lsl #20
   129a0:	andeq	r2, r1, r0, lsl #20
   129a4:	andeq	r2, r1, r0, lsl #20
   129a8:	andeq	r2, r1, r0, lsl #20
   129ac:	andeq	r2, r1, r0, lsl #20
   129b0:	andeq	r2, r1, r0, lsl #20
   129b4:	andeq	r2, r1, r0, lsl #20
   129b8:	andeq	r2, r1, r0, lsl #20
   129bc:	andeq	r2, r1, r0, lsl #20
   129c0:	andeq	r2, r1, r0, lsl #20
   129c4:	andeq	r2, r1, r0, lsl #20
   129c8:	andeq	r2, r1, r0, lsl #20
   129cc:	andeq	r2, r1, r0, lsl #20
   129d0:	andeq	r2, r1, r0, lsl #20
   129d4:	andeq	r2, r1, r0, lsl #20
   129d8:	andeq	r2, r1, r0, lsl #20
   129dc:	andeq	r2, r1, r0, lsl #20
   129e0:	andeq	r2, r1, r0, lsl #20
   129e4:	andeq	r2, r1, r0, lsl #20
   129e8:	andeq	r2, r1, r0, lsl #20
   129ec:	andeq	r2, r1, r0, lsl #20
   129f0:	andeq	r1, r1, r4, lsr #30
   129f4:	andeq	r2, r1, r0, asr #6
   129f8:	andeq	r1, r1, r4, lsr #30
   129fc:	andeq	r2, r1, ip, lsl #20
   12a00:	mov	r6, r7
   12a04:	mov	r7, #0
   12a08:	b	11f84 <__assert_fail@plt+0x10f8>
   12a0c:	cmp	r9, #0
   12a10:	mov	r3, #0
   12a14:	beq	12454 <__assert_fail@plt+0x15c8>
   12a18:	mov	r6, #0
   12a1c:	mov	r7, r3
   12a20:	mov	r3, r6
   12a24:	b	11f88 <__assert_fail@plt+0x10fc>
   12a28:	mov	r3, #0
   12a2c:	b	12434 <__assert_fail@plt+0x15a8>
   12a30:	mov	r7, #0
   12a34:	mov	r3, #114	; 0x72
   12a38:	b	12254 <__assert_fail@plt+0x13c8>
   12a3c:	mov	r5, #98	; 0x62
   12a40:	b	122e4 <__assert_fail@plt+0x1458>
   12a44:	mov	r5, #97	; 0x61
   12a48:	b	12324 <__assert_fail@plt+0x1498>
   12a4c:	ldr	r3, [sp, #32]
   12a50:	cmp	r3, #0
   12a54:	bne	12e9c <__assert_fail@plt+0x2010>
   12a58:	add	r9, r9, #1
   12a5c:	ldr	r3, [sp, #44]	; 0x2c
   12a60:	mov	r6, #0
   12a64:	mov	r5, #92	; 0x5c
   12a68:	b	1221c <__assert_fail@plt+0x1390>
   12a6c:	ldr	r3, [sp, #36]	; 0x24
   12a70:	ldrb	r3, [r3, #1]
   12a74:	adds	r3, r3, #0
   12a78:	movne	r3, #1
   12a7c:	b	11f40 <__assert_fail@plt+0x10b4>
   12a80:	ldr	r3, [sp, #164]	; 0xa4
   12a84:	ands	r3, r3, #4
   12a88:	beq	12aac <__assert_fail@plt+0x1c20>
   12a8c:	ldr	r2, [sp, #24]
   12a90:	add	r3, r9, #2
   12a94:	cmp	r3, r2
   12a98:	bcs	12aac <__assert_fail@plt+0x1c20>
   12a9c:	ldr	r2, [sp, #48]	; 0x30
   12aa0:	ldrb	r5, [r2, #1]
   12aa4:	cmp	r5, #63	; 0x3f
   12aa8:	beq	12f10 <__assert_fail@plt+0x2084>
   12aac:	mov	r2, #0
   12ab0:	mov	r6, r2
   12ab4:	mov	r5, #63	; 0x3f
   12ab8:	b	11f68 <__assert_fail@plt+0x10dc>
   12abc:	ldr	r3, [sp, #32]
   12ac0:	cmp	r3, #0
   12ac4:	bne	12e9c <__assert_fail@plt+0x2010>
   12ac8:	mov	r6, r3
   12acc:	mov	r5, #63	; 0x3f
   12ad0:	b	11fb0 <__assert_fail@plt+0x1124>
   12ad4:	ldr	r3, [sp, #24]
   12ad8:	cmn	r3, #1
   12adc:	mov	r3, #0
   12ae0:	str	r3, [sp, #108]	; 0x6c
   12ae4:	str	r3, [sp, #112]	; 0x70
   12ae8:	bne	12af8 <__assert_fail@plt+0x1c6c>
   12aec:	ldr	r0, [sp, #36]	; 0x24
   12af0:	bl	10dcc <strlen@plt>
   12af4:	str	r0, [sp, #24]
   12af8:	mov	r3, #0
   12afc:	str	sl, [sp, #88]	; 0x58
   12b00:	ldr	sl, [sp, #36]	; 0x24
   12b04:	str	r5, [sp, #92]	; 0x5c
   12b08:	mov	r5, r3
   12b0c:	str	r7, [sp, #96]	; 0x60
   12b10:	str	r4, [sp, #100]	; 0x64
   12b14:	str	r8, [sp, #84]	; 0x54
   12b18:	ldr	r3, [sp, #24]
   12b1c:	add	r4, r9, r5
   12b20:	add	r7, sl, r4
   12b24:	sub	r2, r3, r4
   12b28:	mov	r1, r7
   12b2c:	add	r3, sp, #108	; 0x6c
   12b30:	add	r0, sp, #104	; 0x68
   12b34:	bl	14a5c <__assert_fail@plt+0x3bd0>
   12b38:	subs	r8, r0, #0
   12b3c:	beq	12b8c <__assert_fail@plt+0x1d00>
   12b40:	cmn	r8, #1
   12b44:	beq	12eec <__assert_fail@plt+0x2060>
   12b48:	cmn	r8, #2
   12b4c:	beq	1300c <__assert_fail@plt+0x2180>
   12b50:	ldr	r3, [sp, #32]
   12b54:	cmp	fp, #2
   12b58:	movne	r3, #0
   12b5c:	andeq	r3, r3, #1
   12b60:	cmp	r3, #0
   12b64:	bne	12cec <__assert_fail@plt+0x1e60>
   12b68:	ldr	r0, [sp, #104]	; 0x68
   12b6c:	bl	10d18 <iswprint@plt>
   12b70:	add	r5, r5, r8
   12b74:	cmp	r0, #0
   12b78:	add	r0, sp, #108	; 0x6c
   12b7c:	moveq	r6, #0
   12b80:	bl	10cc4 <mbsinit@plt>
   12b84:	cmp	r0, #0
   12b88:	beq	12b18 <__assert_fail@plt+0x1c8c>
   12b8c:	ldr	r3, [sp, #28]
   12b90:	mov	ip, r5
   12b94:	eor	r2, r6, #1
   12b98:	ldr	r5, [sp, #92]	; 0x5c
   12b9c:	ldr	r7, [sp, #96]	; 0x60
   12ba0:	ldr	r4, [sp, #100]	; 0x64
   12ba4:	ldr	r8, [sp, #84]	; 0x54
   12ba8:	ldr	sl, [sp, #88]	; 0x58
   12bac:	and	r2, r2, r3
   12bb0:	cmp	ip, #1
   12bb4:	bls	124b4 <__assert_fail@plt+0x1628>
   12bb8:	add	r1, ip, r9
   12bbc:	ldr	lr, [sp, #48]	; 0x30
   12bc0:	mov	r0, #0
   12bc4:	str	r6, [sp, #48]	; 0x30
   12bc8:	mov	ip, #39	; 0x27
   12bcc:	ldr	r6, [sp, #44]	; 0x2c
   12bd0:	b	12c88 <__assert_fail@plt+0x1dfc>
   12bd4:	ldr	r0, [sp, #32]
   12bd8:	sub	r3, fp, #2
   12bdc:	cmp	r0, #0
   12be0:	clz	r3, r3
   12be4:	lsr	r3, r3, #5
   12be8:	bne	12df0 <__assert_fail@plt+0x1f64>
   12bec:	eor	r0, r6, #1
   12bf0:	ands	r3, r3, r0
   12bf4:	beq	12c24 <__assert_fail@plt+0x1d98>
   12bf8:	add	r0, r4, #1
   12bfc:	cmp	sl, r4
   12c00:	strbhi	ip, [r8, r4]
   12c04:	cmp	sl, r0
   12c08:	movhi	r6, #36	; 0x24
   12c0c:	strbhi	r6, [r8, r0]
   12c10:	add	r0, r4, #2
   12c14:	mov	r6, r3
   12c18:	add	r4, r4, #3
   12c1c:	cmp	sl, r0
   12c20:	strbhi	ip, [r8, r0]
   12c24:	cmp	sl, r4
   12c28:	movhi	r3, #92	; 0x5c
   12c2c:	strbhi	r3, [r8, r4]
   12c30:	add	r3, r4, #1
   12c34:	cmp	sl, r3
   12c38:	lsrhi	r0, r5, #6
   12c3c:	addhi	r0, r0, #48	; 0x30
   12c40:	strbhi	r0, [r8, r3]
   12c44:	add	r0, r4, #2
   12c48:	cmp	sl, r0
   12c4c:	lsrhi	r3, r5, #3
   12c50:	andhi	r3, r3, #7
   12c54:	addhi	r3, r3, #48	; 0x30
   12c58:	add	r9, r9, #1
   12c5c:	strbhi	r3, [r8, r0]
   12c60:	and	r5, r5, #7
   12c64:	cmp	r9, r1
   12c68:	add	r5, r5, #48	; 0x30
   12c6c:	add	r4, r4, #3
   12c70:	bcs	12e10 <__assert_fail@plt+0x1f84>
   12c74:	mov	r0, r2
   12c78:	cmp	sl, r4
   12c7c:	strbhi	r5, [r8, r4]
   12c80:	ldrb	r5, [lr, #1]!
   12c84:	add	r4, r4, #1
   12c88:	cmp	r2, #0
   12c8c:	bne	12bd4 <__assert_fail@plt+0x1d48>
   12c90:	eor	r3, r0, #1
   12c94:	and	r3, r3, r6
   12c98:	cmp	r7, #0
   12c9c:	uxtb	r3, r3
   12ca0:	beq	12cb4 <__assert_fail@plt+0x1e28>
   12ca4:	cmp	sl, r4
   12ca8:	movhi	r7, #92	; 0x5c
   12cac:	strbhi	r7, [r8, r4]
   12cb0:	add	r4, r4, #1
   12cb4:	add	r9, r9, #1
   12cb8:	cmp	r9, r1
   12cbc:	bcs	12e04 <__assert_fail@plt+0x1f78>
   12cc0:	cmp	r3, #0
   12cc4:	beq	12e30 <__assert_fail@plt+0x1fa4>
   12cc8:	cmp	sl, r4
   12ccc:	add	r3, r4, #1
   12cd0:	strbhi	ip, [r8, r4]
   12cd4:	mov	r7, #0
   12cd8:	cmp	sl, r3
   12cdc:	strbhi	ip, [r8, r3]
   12ce0:	add	r4, r4, #2
   12ce4:	mov	r6, r7
   12ce8:	b	12c78 <__assert_fail@plt+0x1dec>
   12cec:	cmp	r8, #1
   12cf0:	beq	12b68 <__assert_fail@plt+0x1cdc>
   12cf4:	add	r1, r4, #1
   12cf8:	add	r3, sl, r8
   12cfc:	add	r1, sl, r1
   12d00:	add	r4, r3, r4
   12d04:	ldrb	r3, [r1], #1
   12d08:	sub	r3, r3, #91	; 0x5b
   12d0c:	cmp	r3, #33	; 0x21
   12d10:	ldrls	pc, [pc, r3, lsl #2]
   12d14:	b	12da0 <__assert_fail@plt+0x1f14>
   12d18:	andeq	r2, r1, ip, lsr #27
   12d1c:	andeq	r2, r1, ip, lsr #27
   12d20:	andeq	r2, r1, r0, lsr #27
   12d24:	andeq	r2, r1, ip, lsr #27
   12d28:	andeq	r2, r1, r0, lsr #27
   12d2c:	andeq	r2, r1, ip, lsr #27
   12d30:	andeq	r2, r1, r0, lsr #27
   12d34:	andeq	r2, r1, r0, lsr #27
   12d38:	andeq	r2, r1, r0, lsr #27
   12d3c:	andeq	r2, r1, r0, lsr #27
   12d40:	andeq	r2, r1, r0, lsr #27
   12d44:	andeq	r2, r1, r0, lsr #27
   12d48:	andeq	r2, r1, r0, lsr #27
   12d4c:	andeq	r2, r1, r0, lsr #27
   12d50:	andeq	r2, r1, r0, lsr #27
   12d54:	andeq	r2, r1, r0, lsr #27
   12d58:	andeq	r2, r1, r0, lsr #27
   12d5c:	andeq	r2, r1, r0, lsr #27
   12d60:	andeq	r2, r1, r0, lsr #27
   12d64:	andeq	r2, r1, r0, lsr #27
   12d68:	andeq	r2, r1, r0, lsr #27
   12d6c:	andeq	r2, r1, r0, lsr #27
   12d70:	andeq	r2, r1, r0, lsr #27
   12d74:	andeq	r2, r1, r0, lsr #27
   12d78:	andeq	r2, r1, r0, lsr #27
   12d7c:	andeq	r2, r1, r0, lsr #27
   12d80:	andeq	r2, r1, r0, lsr #27
   12d84:	andeq	r2, r1, r0, lsr #27
   12d88:	andeq	r2, r1, r0, lsr #27
   12d8c:	andeq	r2, r1, r0, lsr #27
   12d90:	andeq	r2, r1, r0, lsr #27
   12d94:	andeq	r2, r1, r0, lsr #27
   12d98:	andeq	r2, r1, r0, lsr #27
   12d9c:	andeq	r2, r1, ip, lsr #27
   12da0:	cmp	r4, r1
   12da4:	bne	12d04 <__assert_fail@plt+0x1e78>
   12da8:	b	12b68 <__assert_fail@plt+0x1cdc>
   12dac:	ldr	fp, [sp, #84]	; 0x54
   12db0:	ldr	sl, [sp, #88]	; 0x58
   12db4:	mov	r8, #2
   12db8:	b	12274 <__assert_fail@plt+0x13e8>
   12dbc:	cmp	sl, r4
   12dc0:	movls	r1, r4
   12dc4:	bls	123c4 <__assert_fail@plt+0x1538>
   12dc8:	ldr	r3, [sp, #44]	; 0x2c
   12dcc:	b	123b4 <__assert_fail@plt+0x1528>
   12dd0:	str	sl, [sp, #72]	; 0x48
   12dd4:	ldr	sl, [sp, #32]
   12dd8:	b	121ec <__assert_fail@plt+0x1360>
   12ddc:	add	r9, r9, #1
   12de0:	b	11ae0 <__assert_fail@plt+0xc54>
   12de4:	ldr	r2, [sp, #28]
   12de8:	mov	r6, #0
   12dec:	b	12bb8 <__assert_fail@plt+0x1d2c>
   12df0:	str	fp, [sp, #160]	; 0xa0
   12df4:	str	r3, [sp, #28]
   12df8:	mov	fp, r8
   12dfc:	ldr	r8, [sp, #160]	; 0xa0
   12e00:	b	12274 <__assert_fail@plt+0x13e8>
   12e04:	str	r6, [sp, #44]	; 0x2c
   12e08:	ldr	r6, [sp, #48]	; 0x30
   12e0c:	b	1221c <__assert_fail@plt+0x1390>
   12e10:	str	r6, [sp, #44]	; 0x2c
   12e14:	ldr	r6, [sp, #48]	; 0x30
   12e18:	b	12028 <__assert_fail@plt+0x119c>
   12e1c:	add	r4, r4, #4
   12e20:	str	r3, [sp, #44]	; 0x2c
   12e24:	mov	r6, #0
   12e28:	mov	r5, #48	; 0x30
   12e2c:	b	11fb0 <__assert_fail@plt+0x1124>
   12e30:	mov	r7, r3
   12e34:	b	12c78 <__assert_fail@plt+0x1dec>
   12e38:	ldr	r3, [pc, #-1624]	; 127e8 <__assert_fail@plt+0x195c>
   12e3c:	mov	r4, #1
   12e40:	str	r4, [sp, #40]	; 0x28
   12e44:	str	r4, [sp, #28]
   12e48:	str	r4, [sp, #52]	; 0x34
   12e4c:	str	sl, [sp, #72]	; 0x48
   12e50:	str	sl, [sp, #68]	; 0x44
   12e54:	str	sl, [sp, #44]	; 0x2c
   12e58:	str	sl, [sp, #32]
   12e5c:	str	r3, [sp, #60]	; 0x3c
   12e60:	b	11ad0 <__assert_fail@plt+0xc44>
   12e64:	mov	r3, r6
   12e68:	mov	r5, #48	; 0x30
   12e6c:	mov	r6, #0
   12e70:	b	11fb0 <__assert_fail@plt+0x1124>
   12e74:	cmp	sl, r4
   12e78:	movhi	r3, #48	; 0x30
   12e7c:	strbhi	r3, [r8, r4]
   12e80:	add	r3, r1, #2
   12e84:	cmp	sl, r3
   12e88:	movhi	r0, #48	; 0x30
   12e8c:	strbhi	r0, [r8, r3]
   12e90:	add	r4, r1, #3
   12e94:	mov	r5, #48	; 0x30
   12e98:	b	123f8 <__assert_fail@plt+0x156c>
   12e9c:	str	fp, [sp, #160]	; 0xa0
   12ea0:	mov	fp, r8
   12ea4:	ldr	r8, [sp, #160]	; 0xa0
   12ea8:	b	12274 <__assert_fail@plt+0x13e8>
   12eac:	ldr	r2, [sp, #80]	; 0x50
   12eb0:	ldrb	r3, [r2]
   12eb4:	cmp	r3, #0
   12eb8:	beq	11aa0 <__assert_fail@plt+0xc14>
   12ebc:	cmp	sl, r4
   12ec0:	strbhi	r3, [fp, r4]
   12ec4:	ldrb	r3, [r2, #1]!
   12ec8:	add	r4, r4, #1
   12ecc:	cmp	r3, #0
   12ed0:	bne	12ebc <__assert_fail@plt+0x2030>
   12ed4:	b	11aa0 <__assert_fail@plt+0xc14>
   12ed8:	str	fp, [sp, #160]	; 0xa0
   12edc:	mov	r3, #0
   12ee0:	mov	fp, r8
   12ee4:	ldr	r8, [sp, #160]	; 0xa0
   12ee8:	b	12308 <__assert_fail@plt+0x147c>
   12eec:	mov	ip, r5
   12ef0:	ldr	r7, [sp, #96]	; 0x60
   12ef4:	ldr	r5, [sp, #92]	; 0x5c
   12ef8:	ldr	r4, [sp, #100]	; 0x64
   12efc:	ldr	r8, [sp, #84]	; 0x54
   12f00:	ldr	sl, [sp, #88]	; 0x58
   12f04:	ldr	r2, [sp, #28]
   12f08:	mov	r6, #0
   12f0c:	b	12bb0 <__assert_fail@plt+0x1d24>
   12f10:	ldr	r2, [sp, #36]	; 0x24
   12f14:	ldrb	r1, [r2, r3]
   12f18:	sub	r2, r1, #33	; 0x21
   12f1c:	cmp	r2, #29
   12f20:	ldrls	pc, [pc, r2, lsl #2]
   12f24:	b	13000 <__assert_fail@plt+0x2174>
   12f28:	andeq	r2, r1, r0, lsr #31
   12f2c:	andeq	r3, r1, r0
   12f30:	andeq	r3, r1, r0
   12f34:	andeq	r3, r1, r0
   12f38:	andeq	r3, r1, r0
   12f3c:	andeq	r3, r1, r0
   12f40:	andeq	r2, r1, r0, lsr #31
   12f44:	andeq	r2, r1, r0, lsr #31
   12f48:	andeq	r2, r1, r0, lsr #31
   12f4c:	andeq	r3, r1, r0
   12f50:	andeq	r3, r1, r0
   12f54:	andeq	r3, r1, r0
   12f58:	andeq	r2, r1, r0, lsr #31
   12f5c:	andeq	r3, r1, r0
   12f60:	andeq	r2, r1, r0, lsr #31
   12f64:	andeq	r3, r1, r0
   12f68:	andeq	r3, r1, r0
   12f6c:	andeq	r3, r1, r0
   12f70:	andeq	r3, r1, r0
   12f74:	andeq	r3, r1, r0
   12f78:	andeq	r3, r1, r0
   12f7c:	andeq	r3, r1, r0
   12f80:	andeq	r3, r1, r0
   12f84:	andeq	r3, r1, r0
   12f88:	andeq	r3, r1, r0
   12f8c:	andeq	r3, r1, r0
   12f90:	andeq	r3, r1, r0
   12f94:	andeq	r2, r1, r0, lsr #31
   12f98:	andeq	r2, r1, r0, lsr #31
   12f9c:	andeq	r2, r1, r0, lsr #31
   12fa0:	ldr	r2, [sp, #32]
   12fa4:	cmp	r2, #0
   12fa8:	bne	130ac <__assert_fail@plt+0x2220>
   12fac:	cmp	sl, r4
   12fb0:	movhi	r2, #63	; 0x3f
   12fb4:	strbhi	r2, [r8, r4]
   12fb8:	add	r2, r4, #1
   12fbc:	cmp	sl, r2
   12fc0:	movhi	r0, #34	; 0x22
   12fc4:	strbhi	r0, [r8, r2]
   12fc8:	add	r2, r4, #2
   12fcc:	cmp	sl, r2
   12fd0:	movhi	r0, #34	; 0x22
   12fd4:	strbhi	r0, [r8, r2]
   12fd8:	add	r2, r4, #3
   12fdc:	cmp	sl, r2
   12fe0:	movhi	r0, #63	; 0x3f
   12fe4:	strbhi	r0, [r8, r2]
   12fe8:	mov	r2, #0
   12fec:	add	r4, r4, #4
   12ff0:	mov	r5, r1
   12ff4:	mov	r9, r3
   12ff8:	mov	r6, r2
   12ffc:	b	123f8 <__assert_fail@plt+0x156c>
   13000:	mov	r2, #0
   13004:	mov	r6, r2
   13008:	b	11f68 <__assert_fail@plt+0x10dc>
   1300c:	ldr	r0, [sp, #24]
   13010:	mov	r1, r4
   13014:	cmp	r1, r0
   13018:	mov	r2, r7
   1301c:	mov	r3, r5
   13020:	mov	ip, r5
   13024:	ldr	r7, [sp, #96]	; 0x60
   13028:	ldr	r5, [sp, #92]	; 0x5c
   1302c:	ldr	r4, [sp, #100]	; 0x64
   13030:	ldr	r8, [sp, #84]	; 0x54
   13034:	ldr	sl, [sp, #88]	; 0x58
   13038:	bcs	1306c <__assert_fail@plt+0x21e0>
   1303c:	ldrb	r6, [r2]
   13040:	cmp	r6, #0
   13044:	bne	13058 <__assert_fail@plt+0x21cc>
   13048:	b	13188 <__assert_fail@plt+0x22fc>
   1304c:	ldrb	r6, [r2, #1]!
   13050:	cmp	r6, #0
   13054:	beq	13110 <__assert_fail@plt+0x2284>
   13058:	add	r3, r3, #1
   1305c:	add	r1, r9, r3
   13060:	cmp	r1, r0
   13064:	bcc	1304c <__assert_fail@plt+0x21c0>
   13068:	mov	ip, r3
   1306c:	ldr	r2, [sp, #28]
   13070:	mov	r6, #0
   13074:	b	12bb0 <__assert_fail@plt+0x1d24>
   13078:	mov	r3, #1
   1307c:	str	r3, [sp, #40]	; 0x28
   13080:	str	r3, [sp, #32]
   13084:	str	r3, [sp, #28]
   13088:	str	r3, [sp, #52]	; 0x34
   1308c:	ldr	r3, [pc, #-2220]	; 127e8 <__assert_fail@plt+0x195c>
   13090:	mov	r2, #0
   13094:	str	r2, [sp, #68]	; 0x44
   13098:	str	r2, [sp, #44]	; 0x2c
   1309c:	str	r2, [sp, #72]	; 0x48
   130a0:	mov	r4, r2
   130a4:	str	r3, [sp, #60]	; 0x3c
   130a8:	b	11ad0 <__assert_fail@plt+0xc44>
   130ac:	str	fp, [sp, #160]	; 0xa0
   130b0:	mov	fp, r8
   130b4:	ldr	r8, [sp, #160]	; 0xa0
   130b8:	b	12280 <__assert_fail@plt+0x13f4>
   130bc:	mov	r2, r3
   130c0:	ldr	r3, [sp, #60]	; 0x3c
   130c4:	cmp	r3, #0
   130c8:	moveq	r2, #0
   130cc:	andne	r2, r2, #1
   130d0:	cmp	r2, #0
   130d4:	beq	13100 <__assert_fail@plt+0x2274>
   130d8:	mov	r2, r3
   130dc:	ldrb	r3, [r3]
   130e0:	cmp	r3, #0
   130e4:	beq	13100 <__assert_fail@plt+0x2274>
   130e8:	cmp	sl, r4
   130ec:	strbhi	r3, [fp, r4]
   130f0:	ldrb	r3, [r2, #1]!
   130f4:	add	r4, r4, #1
   130f8:	cmp	r3, #0
   130fc:	bne	130e8 <__assert_fail@plt+0x225c>
   13100:	cmp	sl, r4
   13104:	movhi	r3, #0
   13108:	strbhi	r3, [fp, r4]
   1310c:	b	122c0 <__assert_fail@plt+0x1434>
   13110:	mov	ip, r3
   13114:	ldr	r2, [sp, #28]
   13118:	b	12bb0 <__assert_fail@plt+0x1d24>
   1311c:	str	fp, [sp, #160]	; 0xa0
   13120:	mov	fp, r8
   13124:	ldr	r8, [sp, #160]	; 0xa0
   13128:	sub	r3, r8, #2
   1312c:	clz	r3, r3
   13130:	lsr	r3, r3, #5
   13134:	str	r3, [sp, #28]
   13138:	b	12274 <__assert_fail@plt+0x13e8>
   1313c:	ldr	r3, [sp, #76]	; 0x4c
   13140:	mov	ip, #5
   13144:	str	r3, [sp, #16]
   13148:	ldr	r3, [sp, #80]	; 0x50
   1314c:	ldr	r2, [sp, #36]	; 0x24
   13150:	str	r3, [sp, #12]
   13154:	ldr	r3, [sp, #56]	; 0x38
   13158:	ldr	r1, [sp, #72]	; 0x48
   1315c:	str	r3, [sp, #8]
   13160:	ldr	r3, [sp, #164]	; 0xa4
   13164:	mov	r0, fp
   13168:	str	r3, [sp, #4]
   1316c:	str	ip, [sp]
   13170:	ldr	r3, [sp, #24]
   13174:	bl	119d8 <__assert_fail@plt+0xb4c>
   13178:	mov	r4, r0
   1317c:	b	122c0 <__assert_fail@plt+0x1434>
   13180:	mov	r8, #2
   13184:	b	12274 <__assert_fail@plt+0x13e8>
   13188:	ldr	r2, [sp, #28]
   1318c:	b	12bb0 <__assert_fail@plt+0x1d24>
   13190:	mov	r3, #0
   13194:	str	r3, [sp, #68]	; 0x44
   13198:	str	r3, [sp, #44]	; 0x2c
   1319c:	str	r3, [sp, #72]	; 0x48
   131a0:	str	r3, [sp, #28]
   131a4:	mov	r4, r3
   131a8:	ldr	r3, [pc, #-2500]	; 127ec <__assert_fail@plt+0x1960>
   131ac:	mov	r2, #1
   131b0:	str	r2, [sp, #40]	; 0x28
   131b4:	str	r2, [sp, #32]
   131b8:	str	r2, [sp, #52]	; 0x34
   131bc:	str	r3, [sp, #60]	; 0x3c
   131c0:	b	11ad0 <__assert_fail@plt+0xc44>
   131c4:	bl	10ce8 <__stack_chk_fail@plt>
   131c8:	mov	r5, r3
   131cc:	mov	r6, #0
   131d0:	b	11fc4 <__assert_fail@plt+0x1138>
   131d4:	mov	r3, #0
   131d8:	mov	r2, #1
   131dc:	str	r3, [sp, #44]	; 0x2c
   131e0:	str	r3, [sp, #72]	; 0x48
   131e4:	str	r2, [sp, #40]	; 0x28
   131e8:	b	120e0 <__assert_fail@plt+0x1254>
   131ec:	bl	10e80 <abort@plt>
   131f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f4:	sub	sp, sp, #44	; 0x2c
   131f8:	mov	r6, r0
   131fc:	mov	r4, r3
   13200:	mov	sl, r1
   13204:	mov	fp, r2
   13208:	bl	10de4 <__errno_location@plt>
   1320c:	ldr	r7, [pc, #364]	; 13380 <__assert_fail@plt+0x24f4>
   13210:	cmp	r6, #0
   13214:	ldr	r5, [r7]
   13218:	ldr	r3, [r0]
   1321c:	str	r3, [sp, #24]
   13220:	blt	1337c <__assert_fail@plt+0x24f0>
   13224:	ldr	r3, [r7, #4]
   13228:	mov	r8, r0
   1322c:	cmp	r3, r6
   13230:	bgt	1327c <__assert_fail@plt+0x23f0>
   13234:	cmn	r6, #-268435454	; 0xf0000002
   13238:	bgt	13378 <__assert_fail@plt+0x24ec>
   1323c:	add	r9, r6, #1
   13240:	add	r3, r7, #8
   13244:	cmp	r5, r3
   13248:	lsl	r1, r9, #3
   1324c:	beq	13358 <__assert_fail@plt+0x24cc>
   13250:	mov	r0, r5
   13254:	bl	13fe4 <__assert_fail@plt+0x3158>
   13258:	mov	r5, r0
   1325c:	str	r0, [r7]
   13260:	ldr	r0, [r7, #4]
   13264:	mov	r1, #0
   13268:	sub	r2, r9, r0
   1326c:	add	r0, r5, r0, lsl #3
   13270:	lsl	r2, r2, #3
   13274:	bl	10dfc <memset@plt>
   13278:	str	r9, [r7, #4]
   1327c:	add	r3, r5, r6, lsl #3
   13280:	ldr	r1, [r4, #4]
   13284:	ldr	r7, [r3, #4]
   13288:	ldr	r9, [r5, r6, lsl #3]
   1328c:	ldr	r2, [r4, #40]	; 0x28
   13290:	ldr	ip, [r4, #44]	; 0x2c
   13294:	str	r3, [sp, #28]
   13298:	ldr	r3, [r4]
   1329c:	orr	r1, r1, #1
   132a0:	add	lr, r4, #8
   132a4:	str	r1, [sp, #36]	; 0x24
   132a8:	str	r1, [sp, #4]
   132ac:	str	r2, [sp, #12]
   132b0:	str	r3, [sp]
   132b4:	mov	r0, r7
   132b8:	mov	r1, r9
   132bc:	str	ip, [sp, #16]
   132c0:	str	lr, [sp, #8]
   132c4:	mov	r3, fp
   132c8:	mov	r2, sl
   132cc:	str	lr, [sp, #32]
   132d0:	bl	119d8 <__assert_fail@plt+0xb4c>
   132d4:	cmp	r9, r0
   132d8:	bhi	13344 <__assert_fail@plt+0x24b8>
   132dc:	ldr	r3, [pc, #160]	; 13384 <__assert_fail@plt+0x24f8>
   132e0:	add	r9, r0, #1
   132e4:	cmp	r7, r3
   132e8:	str	r9, [r5, r6, lsl #3]
   132ec:	beq	132f8 <__assert_fail@plt+0x246c>
   132f0:	mov	r0, r7
   132f4:	bl	10c94 <free@plt>
   132f8:	mov	r0, r9
   132fc:	bl	13f88 <__assert_fail@plt+0x30fc>
   13300:	ldr	lr, [sp, #28]
   13304:	ldr	ip, [r4, #44]	; 0x2c
   13308:	ldr	r5, [r4, #40]	; 0x28
   1330c:	mov	r3, fp
   13310:	mov	r2, sl
   13314:	mov	r1, r9
   13318:	str	r0, [lr, #4]
   1331c:	ldr	lr, [r4]
   13320:	ldr	r4, [sp, #32]
   13324:	str	ip, [sp, #16]
   13328:	str	r4, [sp, #8]
   1332c:	ldr	r4, [sp, #36]	; 0x24
   13330:	str	r5, [sp, #12]
   13334:	str	r4, [sp, #4]
   13338:	str	lr, [sp]
   1333c:	mov	r7, r0
   13340:	bl	119d8 <__assert_fail@plt+0xb4c>
   13344:	ldr	r3, [sp, #24]
   13348:	mov	r0, r7
   1334c:	str	r3, [r8]
   13350:	add	sp, sp, #44	; 0x2c
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13358:	mov	r0, #0
   1335c:	bl	13fe4 <__assert_fail@plt+0x3158>
   13360:	ldr	r3, [pc, #32]	; 13388 <__assert_fail@plt+0x24fc>
   13364:	mov	r5, r0
   13368:	ldm	r3, {r0, r1}
   1336c:	str	r5, [r7]
   13370:	stm	r5, {r0, r1}
   13374:	b	13260 <__assert_fail@plt+0x23d4>
   13378:	bl	141d0 <__assert_fail@plt+0x3344>
   1337c:	bl	10e80 <abort@plt>
   13380:	andeq	r6, r2, r4, ror #1
   13384:	andeq	r6, r2, r4, asr r1
   13388:	andeq	r6, r2, ip, ror #1
   1338c:	push	{r4, r5, r6, lr}
   13390:	mov	r5, r0
   13394:	bl	10de4 <__errno_location@plt>
   13398:	cmp	r5, #0
   1339c:	mov	r1, #48	; 0x30
   133a0:	mov	r4, r0
   133a4:	ldr	r0, [pc, #16]	; 133bc <__assert_fail@plt+0x2530>
   133a8:	ldr	r6, [r4]
   133ac:	movne	r0, r5
   133b0:	bl	14190 <__assert_fail@plt+0x3304>
   133b4:	str	r6, [r4]
   133b8:	pop	{r4, r5, r6, pc}
   133bc:	andeq	r6, r2, r4, asr r2
   133c0:	ldr	r3, [pc, #12]	; 133d4 <__assert_fail@plt+0x2548>
   133c4:	cmp	r0, #0
   133c8:	moveq	r0, r3
   133cc:	ldr	r0, [r0]
   133d0:	bx	lr
   133d4:	andeq	r6, r2, r4, asr r2
   133d8:	ldr	r3, [pc, #12]	; 133ec <__assert_fail@plt+0x2560>
   133dc:	cmp	r0, #0
   133e0:	moveq	r0, r3
   133e4:	str	r1, [r0]
   133e8:	bx	lr
   133ec:	andeq	r6, r2, r4, asr r2
   133f0:	ldr	r3, [pc, #52]	; 1342c <__assert_fail@plt+0x25a0>
   133f4:	cmp	r0, #0
   133f8:	moveq	r0, r3
   133fc:	add	r3, r0, #8
   13400:	push	{lr}		; (str lr, [sp, #-4]!)
   13404:	lsr	lr, r1, #5
   13408:	and	r1, r1, #31
   1340c:	ldr	ip, [r3, lr, lsl #2]
   13410:	lsr	r0, ip, r1
   13414:	eor	r2, r2, r0
   13418:	and	r2, r2, #1
   1341c:	and	r0, r0, #1
   13420:	eor	r1, ip, r2, lsl r1
   13424:	str	r1, [r3, lr, lsl #2]
   13428:	pop	{pc}		; (ldr pc, [sp], #4)
   1342c:	andeq	r6, r2, r4, asr r2
   13430:	ldr	r3, [pc, #16]	; 13448 <__assert_fail@plt+0x25bc>
   13434:	cmp	r0, #0
   13438:	movne	r3, r0
   1343c:	ldr	r0, [r3, #4]
   13440:	str	r1, [r3, #4]
   13444:	bx	lr
   13448:	andeq	r6, r2, r4, asr r2
   1344c:	ldr	r3, [pc, #44]	; 13480 <__assert_fail@plt+0x25f4>
   13450:	cmp	r0, #0
   13454:	moveq	r0, r3
   13458:	mov	ip, #10
   1345c:	cmp	r2, #0
   13460:	cmpne	r1, #0
   13464:	str	ip, [r0]
   13468:	beq	13478 <__assert_fail@plt+0x25ec>
   1346c:	str	r1, [r0, #40]	; 0x28
   13470:	str	r2, [r0, #44]	; 0x2c
   13474:	bx	lr
   13478:	push	{r4, lr}
   1347c:	bl	10e80 <abort@plt>
   13480:	andeq	r6, r2, r4, asr r2
   13484:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13488:	sub	sp, sp, #24
   1348c:	ldr	ip, [pc, #108]	; 13500 <__assert_fail@plt+0x2674>
   13490:	ldr	r4, [sp, #56]	; 0x38
   13494:	mov	r9, r2
   13498:	cmp	r4, #0
   1349c:	moveq	r4, ip
   134a0:	mov	sl, r3
   134a4:	mov	r7, r0
   134a8:	mov	r8, r1
   134ac:	bl	10de4 <__errno_location@plt>
   134b0:	ldr	r3, [r4, #44]	; 0x2c
   134b4:	mov	r1, r8
   134b8:	ldr	r6, [r0]
   134bc:	str	r3, [sp, #16]
   134c0:	ldr	r2, [r4, #40]	; 0x28
   134c4:	add	r3, r4, #8
   134c8:	str	r3, [sp, #8]
   134cc:	str	r2, [sp, #12]
   134d0:	ldr	r2, [r4, #4]
   134d4:	mov	r5, r0
   134d8:	str	r2, [sp, #4]
   134dc:	ldr	ip, [r4]
   134e0:	mov	r3, sl
   134e4:	mov	r2, r9
   134e8:	mov	r0, r7
   134ec:	str	ip, [sp]
   134f0:	bl	119d8 <__assert_fail@plt+0xb4c>
   134f4:	str	r6, [r5]
   134f8:	add	sp, sp, #24
   134fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13500:	andeq	r6, r2, r4, asr r2
   13504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13508:	cmp	r3, #0
   1350c:	sub	sp, sp, #44	; 0x2c
   13510:	ldr	r4, [pc, #192]	; 135d8 <__assert_fail@plt+0x274c>
   13514:	mov	r6, r2
   13518:	movne	r4, r3
   1351c:	mov	r9, r1
   13520:	mov	r8, r0
   13524:	bl	10de4 <__errno_location@plt>
   13528:	ldr	r3, [r4, #44]	; 0x2c
   1352c:	ldr	r5, [r4, #4]
   13530:	add	sl, r4, #8
   13534:	cmp	r6, #0
   13538:	orreq	r5, r5, #1
   1353c:	mov	r1, #0
   13540:	ldr	r2, [r0]
   13544:	str	r3, [sp, #16]
   13548:	ldr	r3, [r4, #40]	; 0x28
   1354c:	stmib	sp, {r5, sl}
   13550:	str	r3, [sp, #12]
   13554:	ldr	r3, [r4]
   13558:	mov	r7, r0
   1355c:	str	r2, [sp, #28]
   13560:	str	r3, [sp]
   13564:	mov	r2, r8
   13568:	mov	r3, r9
   1356c:	mov	r0, r1
   13570:	bl	119d8 <__assert_fail@plt+0xb4c>
   13574:	add	r1, r0, #1
   13578:	mov	fp, r0
   1357c:	mov	r0, r1
   13580:	str	r1, [sp, #36]	; 0x24
   13584:	bl	13f88 <__assert_fail@plt+0x30fc>
   13588:	ldr	r3, [r4, #44]	; 0x2c
   1358c:	mov	r2, r8
   13590:	str	r3, [sp, #16]
   13594:	ldr	r3, [r4, #40]	; 0x28
   13598:	str	r5, [sp, #4]
   1359c:	str	r3, [sp, #12]
   135a0:	str	sl, [sp, #8]
   135a4:	ldr	ip, [r4]
   135a8:	ldr	r1, [sp, #36]	; 0x24
   135ac:	mov	r3, r9
   135b0:	str	ip, [sp]
   135b4:	str	r0, [sp, #32]
   135b8:	bl	119d8 <__assert_fail@plt+0xb4c>
   135bc:	ldr	r2, [sp, #28]
   135c0:	cmp	r6, #0
   135c4:	str	r2, [r7]
   135c8:	ldr	r0, [sp, #32]
   135cc:	strne	fp, [r6]
   135d0:	add	sp, sp, #44	; 0x2c
   135d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135d8:	andeq	r6, r2, r4, asr r2
   135dc:	mov	r3, r2
   135e0:	mov	r2, #0
   135e4:	b	13504 <__assert_fail@plt+0x2678>
   135e8:	push	{r4, r5, r6, r7, r8, lr}
   135ec:	ldr	r6, [pc, #112]	; 13664 <__assert_fail@plt+0x27d8>
   135f0:	ldr	r3, [r6, #4]
   135f4:	ldr	r7, [r6]
   135f8:	cmp	r3, #1
   135fc:	ble	13620 <__assert_fail@plt+0x2794>
   13600:	sub	r5, r7, #8
   13604:	add	r5, r5, r3, lsl #3
   13608:	mov	r4, r7
   1360c:	ldr	r0, [r4, #12]
   13610:	add	r4, r4, #8
   13614:	bl	10c94 <free@plt>
   13618:	cmp	r4, r5
   1361c:	bne	1360c <__assert_fail@plt+0x2780>
   13620:	ldr	r0, [r7, #4]
   13624:	ldr	r4, [pc, #60]	; 13668 <__assert_fail@plt+0x27dc>
   13628:	cmp	r0, r4
   1362c:	beq	13640 <__assert_fail@plt+0x27b4>
   13630:	bl	10c94 <free@plt>
   13634:	mov	r3, #256	; 0x100
   13638:	str	r4, [r6, #12]
   1363c:	str	r3, [r6, #8]
   13640:	ldr	r4, [pc, #36]	; 1366c <__assert_fail@plt+0x27e0>
   13644:	cmp	r7, r4
   13648:	beq	13658 <__assert_fail@plt+0x27cc>
   1364c:	mov	r0, r7
   13650:	bl	10c94 <free@plt>
   13654:	str	r4, [r6]
   13658:	mov	r3, #1
   1365c:	str	r3, [r6, #4]
   13660:	pop	{r4, r5, r6, r7, r8, pc}
   13664:	andeq	r6, r2, r4, ror #1
   13668:	andeq	r6, r2, r4, asr r1
   1366c:	andeq	r6, r2, ip, ror #1
   13670:	ldr	r3, [pc, #4]	; 1367c <__assert_fail@plt+0x27f0>
   13674:	mvn	r2, #0
   13678:	b	131f0 <__assert_fail@plt+0x2364>
   1367c:	andeq	r6, r2, r4, asr r2
   13680:	ldr	r3, [pc]	; 13688 <__assert_fail@plt+0x27fc>
   13684:	b	131f0 <__assert_fail@plt+0x2364>
   13688:	andeq	r6, r2, r4, asr r2
   1368c:	mov	r1, r0
   13690:	ldr	r3, [pc, #8]	; 136a0 <__assert_fail@plt+0x2814>
   13694:	mvn	r2, #0
   13698:	mov	r0, #0
   1369c:	b	131f0 <__assert_fail@plt+0x2364>
   136a0:	andeq	r6, r2, r4, asr r2
   136a4:	mov	r2, r1
   136a8:	ldr	r3, [pc, #8]	; 136b8 <__assert_fail@plt+0x282c>
   136ac:	mov	r1, r0
   136b0:	mov	r0, #0
   136b4:	b	131f0 <__assert_fail@plt+0x2364>
   136b8:	andeq	r6, r2, r4, asr r2
   136bc:	push	{r4, r5, r6, lr}
   136c0:	sub	sp, sp, #56	; 0x38
   136c4:	ldr	r4, [pc, #68]	; 13710 <__assert_fail@plt+0x2884>
   136c8:	mov	r6, r2
   136cc:	mov	r5, r0
   136d0:	ldr	r3, [r4]
   136d4:	add	r0, sp, #4
   136d8:	str	r3, [sp, #52]	; 0x34
   136dc:	bl	11868 <__assert_fail@plt+0x9dc>
   136e0:	add	r3, sp, #4
   136e4:	mvn	r2, #0
   136e8:	mov	r1, r6
   136ec:	mov	r0, r5
   136f0:	bl	131f0 <__assert_fail@plt+0x2364>
   136f4:	ldr	r2, [sp, #52]	; 0x34
   136f8:	ldr	r3, [r4]
   136fc:	cmp	r2, r3
   13700:	bne	1370c <__assert_fail@plt+0x2880>
   13704:	add	sp, sp, #56	; 0x38
   13708:	pop	{r4, r5, r6, pc}
   1370c:	bl	10ce8 <__stack_chk_fail@plt>
   13710:	andeq	r5, r2, r8, lsl #30
   13714:	push	{r4, r5, r6, r7, lr}
   13718:	sub	sp, sp, #60	; 0x3c
   1371c:	ldr	r4, [pc, #72]	; 1376c <__assert_fail@plt+0x28e0>
   13720:	mov	r6, r2
   13724:	mov	r7, r3
   13728:	ldr	ip, [r4]
   1372c:	mov	r5, r0
   13730:	add	r0, sp, #4
   13734:	str	ip, [sp, #52]	; 0x34
   13738:	bl	11868 <__assert_fail@plt+0x9dc>
   1373c:	add	r3, sp, #4
   13740:	mov	r2, r7
   13744:	mov	r1, r6
   13748:	mov	r0, r5
   1374c:	bl	131f0 <__assert_fail@plt+0x2364>
   13750:	ldr	r2, [sp, #52]	; 0x34
   13754:	ldr	r3, [r4]
   13758:	cmp	r2, r3
   1375c:	bne	13768 <__assert_fail@plt+0x28dc>
   13760:	add	sp, sp, #60	; 0x3c
   13764:	pop	{r4, r5, r6, r7, pc}
   13768:	bl	10ce8 <__stack_chk_fail@plt>
   1376c:	andeq	r5, r2, r8, lsl #30
   13770:	mov	r2, r1
   13774:	mov	r1, r0
   13778:	mov	r0, #0
   1377c:	b	136bc <__assert_fail@plt+0x2830>
   13780:	mov	r3, r2
   13784:	mov	r2, r1
   13788:	mov	r1, r0
   1378c:	mov	r0, #0
   13790:	b	13714 <__assert_fail@plt+0x2888>
   13794:	push	{r4, r5, r6, r7, r8, r9, lr}
   13798:	mov	r4, r2
   1379c:	ldr	lr, [pc, #128]	; 13824 <__assert_fail@plt+0x2998>
   137a0:	mov	r8, r0
   137a4:	mov	r9, r1
   137a8:	ldm	lr!, {r0, r1, r2, r3}
   137ac:	sub	sp, sp, #60	; 0x3c
   137b0:	add	ip, sp, #4
   137b4:	lsr	r6, r4, #5
   137b8:	stmia	ip!, {r0, r1, r2, r3}
   137bc:	add	r7, sp, #12
   137c0:	ldm	lr!, {r0, r1, r2, r3}
   137c4:	and	r4, r4, #31
   137c8:	ldr	r5, [pc, #88]	; 13828 <__assert_fail@plt+0x299c>
   137cc:	stmia	ip!, {r0, r1, r2, r3}
   137d0:	ldm	lr, {r0, r1, r2, r3}
   137d4:	stm	ip, {r0, r1, r2, r3}
   137d8:	mov	r2, r9
   137dc:	ldr	r3, [r7, r6, lsl #2]
   137e0:	ldr	ip, [r5]
   137e4:	mov	r1, r8
   137e8:	mvn	r0, r3, lsr r4
   137ec:	and	r0, r0, #1
   137f0:	str	ip, [sp, #52]	; 0x34
   137f4:	eor	r4, r3, r0, lsl r4
   137f8:	add	r3, sp, #4
   137fc:	mov	r0, #0
   13800:	str	r4, [r7, r6, lsl #2]
   13804:	bl	131f0 <__assert_fail@plt+0x2364>
   13808:	ldr	r2, [sp, #52]	; 0x34
   1380c:	ldr	r3, [r5]
   13810:	cmp	r2, r3
   13814:	bne	13820 <__assert_fail@plt+0x2994>
   13818:	add	sp, sp, #60	; 0x3c
   1381c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13820:	bl	10ce8 <__stack_chk_fail@plt>
   13824:	andeq	r6, r2, r4, asr r2
   13828:	andeq	r5, r2, r8, lsl #30
   1382c:	mov	r2, r1
   13830:	mvn	r1, #0
   13834:	b	13794 <__assert_fail@plt+0x2908>
   13838:	mov	r2, #58	; 0x3a
   1383c:	mvn	r1, #0
   13840:	b	13794 <__assert_fail@plt+0x2908>
   13844:	mov	r2, #58	; 0x3a
   13848:	b	13794 <__assert_fail@plt+0x2908>
   1384c:	push	{r4, r5, r6, r7, r8, lr}
   13850:	sub	sp, sp, #104	; 0x68
   13854:	ldr	r5, [pc, #120]	; 138d4 <__assert_fail@plt+0x2a48>
   13858:	mov	r6, r0
   1385c:	mov	r0, sp
   13860:	ldr	r3, [r5]
   13864:	mov	r7, r2
   13868:	str	r3, [sp, #100]	; 0x64
   1386c:	bl	11868 <__assert_fail@plt+0x9dc>
   13870:	mov	ip, sp
   13874:	add	lr, sp, #52	; 0x34
   13878:	ldm	ip!, {r0, r1, r2, r3}
   1387c:	stmia	lr!, {r0, r1, r2, r3}
   13880:	ldm	ip!, {r0, r1, r2, r3}
   13884:	ldr	r8, [sp, #64]	; 0x40
   13888:	stmia	lr!, {r0, r1, r2, r3}
   1388c:	mvn	r4, r8
   13890:	ldm	ip, {r0, r1, r2, r3}
   13894:	and	ip, r4, #67108864	; 0x4000000
   13898:	eor	ip, ip, r8
   1389c:	str	ip, [sp, #64]	; 0x40
   138a0:	stm	lr, {r0, r1, r2, r3}
   138a4:	add	r3, sp, #52	; 0x34
   138a8:	mvn	r2, #0
   138ac:	mov	r1, r7
   138b0:	mov	r0, r6
   138b4:	bl	131f0 <__assert_fail@plt+0x2364>
   138b8:	ldr	r2, [sp, #100]	; 0x64
   138bc:	ldr	r3, [r5]
   138c0:	cmp	r2, r3
   138c4:	bne	138d0 <__assert_fail@plt+0x2a44>
   138c8:	add	sp, sp, #104	; 0x68
   138cc:	pop	{r4, r5, r6, r7, r8, pc}
   138d0:	bl	10ce8 <__stack_chk_fail@plt>
   138d4:	andeq	r5, r2, r8, lsl #30
   138d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   138dc:	mov	r6, r1
   138e0:	ldr	lr, [pc, #132]	; 1396c <__assert_fail@plt+0x2ae0>
   138e4:	mov	r5, r2
   138e8:	mov	r8, r0
   138ec:	mov	r9, r3
   138f0:	ldm	lr!, {r0, r1, r2, r3}
   138f4:	sub	sp, sp, #60	; 0x3c
   138f8:	add	ip, sp, #4
   138fc:	ldr	r4, [pc, #108]	; 13970 <__assert_fail@plt+0x2ae4>
   13900:	stmia	ip!, {r0, r1, r2, r3}
   13904:	mov	r7, #10
   13908:	ldm	lr!, {r0, r1, r2, r3}
   1390c:	cmp	r5, #0
   13910:	cmpne	r6, #0
   13914:	str	r7, [sp, #4]
   13918:	stmia	ip!, {r0, r1, r2, r3}
   1391c:	ldm	lr, {r0, r1, r2, r3}
   13920:	ldr	lr, [r4]
   13924:	stm	ip, {r0, r1, r2, r3}
   13928:	str	lr, [sp, #52]	; 0x34
   1392c:	beq	13968 <__assert_fail@plt+0x2adc>
   13930:	add	r3, sp, #4
   13934:	ldr	r2, [sp, #88]	; 0x58
   13938:	mov	r1, r9
   1393c:	mov	r0, r8
   13940:	str	r6, [sp, #44]	; 0x2c
   13944:	str	r5, [sp, #48]	; 0x30
   13948:	bl	131f0 <__assert_fail@plt+0x2364>
   1394c:	ldr	r2, [sp, #52]	; 0x34
   13950:	ldr	r3, [r4]
   13954:	cmp	r2, r3
   13958:	bne	13964 <__assert_fail@plt+0x2ad8>
   1395c:	add	sp, sp, #60	; 0x3c
   13960:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13964:	bl	10ce8 <__stack_chk_fail@plt>
   13968:	bl	10e80 <abort@plt>
   1396c:	andeq	r6, r2, r4, asr r2
   13970:	andeq	r5, r2, r8, lsl #30
   13974:	push	{lr}		; (str lr, [sp, #-4]!)
   13978:	sub	sp, sp, #12
   1397c:	mvn	ip, #0
   13980:	str	ip, [sp]
   13984:	bl	138d8 <__assert_fail@plt+0x2a4c>
   13988:	add	sp, sp, #12
   1398c:	pop	{pc}		; (ldr pc, [sp], #4)
   13990:	push	{lr}		; (str lr, [sp, #-4]!)
   13994:	sub	sp, sp, #12
   13998:	mvn	ip, #0
   1399c:	mov	r3, r2
   139a0:	str	ip, [sp]
   139a4:	mov	r2, r1
   139a8:	mov	r1, r0
   139ac:	mov	r0, #0
   139b0:	bl	138d8 <__assert_fail@plt+0x2a4c>
   139b4:	add	sp, sp, #12
   139b8:	pop	{pc}		; (ldr pc, [sp], #4)
   139bc:	push	{lr}		; (str lr, [sp, #-4]!)
   139c0:	sub	sp, sp, #12
   139c4:	str	r3, [sp]
   139c8:	mov	r3, r2
   139cc:	mov	r2, r1
   139d0:	mov	r1, r0
   139d4:	mov	r0, #0
   139d8:	bl	138d8 <__assert_fail@plt+0x2a4c>
   139dc:	add	sp, sp, #12
   139e0:	pop	{pc}		; (ldr pc, [sp], #4)
   139e4:	ldr	r3, [pc]	; 139ec <__assert_fail@plt+0x2b60>
   139e8:	b	131f0 <__assert_fail@plt+0x2364>
   139ec:	strdeq	r6, [r2], -r4
   139f0:	mov	r2, r1
   139f4:	ldr	r3, [pc, #8]	; 13a04 <__assert_fail@plt+0x2b78>
   139f8:	mov	r1, r0
   139fc:	mov	r0, #0
   13a00:	b	131f0 <__assert_fail@plt+0x2364>
   13a04:	strdeq	r6, [r2], -r4
   13a08:	ldr	r3, [pc, #4]	; 13a14 <__assert_fail@plt+0x2b88>
   13a0c:	mvn	r2, #0
   13a10:	b	131f0 <__assert_fail@plt+0x2364>
   13a14:	strdeq	r6, [r2], -r4
   13a18:	mov	r1, r0
   13a1c:	ldr	r3, [pc, #8]	; 13a2c <__assert_fail@plt+0x2ba0>
   13a20:	mvn	r2, #0
   13a24:	mov	r0, #0
   13a28:	b	131f0 <__assert_fail@plt+0x2364>
   13a2c:	strdeq	r6, [r2], -r4
   13a30:	push	{r4, r5, r6, lr}
   13a34:	sub	sp, sp, #32
   13a38:	cmp	r1, #0
   13a3c:	mov	r5, r0
   13a40:	ldr	r4, [sp, #48]	; 0x30
   13a44:	ldr	r6, [sp, #52]	; 0x34
   13a48:	beq	13ad8 <__assert_fail@plt+0x2c4c>
   13a4c:	strd	r2, [sp]
   13a50:	mov	r3, r1
   13a54:	ldr	r2, [pc, #828]	; 13d98 <__assert_fail@plt+0x2f0c>
   13a58:	mov	r1, #1
   13a5c:	bl	10e20 <__fprintf_chk@plt>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #816]	; 13d9c <__assert_fail@plt+0x2f10>
   13a68:	mov	r0, #0
   13a6c:	bl	10cdc <dcgettext@plt>
   13a70:	ldr	r3, [pc, #808]	; 13da0 <__assert_fail@plt+0x2f14>
   13a74:	ldr	r2, [pc, #808]	; 13da4 <__assert_fail@plt+0x2f18>
   13a78:	str	r3, [sp]
   13a7c:	mov	r1, #1
   13a80:	mov	r3, r0
   13a84:	mov	r0, r5
   13a88:	bl	10e20 <__fprintf_chk@plt>
   13a8c:	ldr	r1, [pc, #788]	; 13da8 <__assert_fail@plt+0x2f1c>
   13a90:	mov	r2, #5
   13a94:	mov	r0, #0
   13a98:	bl	10cdc <dcgettext@plt>
   13a9c:	mov	r1, r5
   13aa0:	bl	10c58 <fputs_unlocked@plt>
   13aa4:	cmp	r6, #9
   13aa8:	ldrls	pc, [pc, r6, lsl #2]
   13aac:	b	13d88 <__assert_fail@plt+0x2efc>
   13ab0:	muleq	r1, r4, sp
   13ab4:	andeq	r3, r1, ip, asr fp
   13ab8:	andeq	r3, r1, r8, lsl #23
   13abc:			; <UNDEFINED> instruction: 0x00013bbc
   13ac0:	strdeq	r3, [r1], -r8
   13ac4:	andeq	r3, r1, r8, lsr ip
   13ac8:	andeq	r3, r1, r0, lsl #25
   13acc:	ldrdeq	r3, [r1], -r0
   13ad0:	andeq	r3, r1, r8, lsr #26
   13ad4:	strdeq	r3, [r1], -r0
   13ad8:	str	r3, [sp]
   13adc:	mov	r1, #1
   13ae0:	mov	r3, r2
   13ae4:	ldr	r2, [pc, #704]	; 13dac <__assert_fail@plt+0x2f20>
   13ae8:	bl	10e20 <__fprintf_chk@plt>
   13aec:	b	13a60 <__assert_fail@plt+0x2bd4>
   13af0:	ldr	r1, [pc, #696]	; 13db0 <__assert_fail@plt+0x2f24>
   13af4:	mov	r2, #5
   13af8:	mov	r0, #0
   13afc:	bl	10cdc <dcgettext@plt>
   13b00:	ldr	r2, [r4, #32]
   13b04:	ldr	r3, [r4, #28]
   13b08:	ldr	r1, [r4, #24]
   13b0c:	str	r2, [sp, #28]
   13b10:	ldr	r2, [r4, #20]
   13b14:	str	r3, [sp, #24]
   13b18:	ldr	r3, [r4, #16]
   13b1c:	str	r1, [sp, #20]
   13b20:	ldr	r1, [r4, #12]
   13b24:	str	r2, [sp, #16]
   13b28:	ldr	r2, [r4, #8]
   13b2c:	str	r3, [sp, #12]
   13b30:	ldr	r3, [r4, #4]
   13b34:	str	r1, [sp, #8]
   13b38:	str	r2, [sp, #4]
   13b3c:	str	r3, [sp]
   13b40:	mov	r1, #1
   13b44:	ldr	r3, [r4]
   13b48:	mov	r2, r0
   13b4c:	mov	r0, r5
   13b50:	bl	10e20 <__fprintf_chk@plt>
   13b54:	add	sp, sp, #32
   13b58:	pop	{r4, r5, r6, pc}
   13b5c:	mov	r2, #5
   13b60:	ldr	r1, [pc, #588]	; 13db4 <__assert_fail@plt+0x2f28>
   13b64:	mov	r0, #0
   13b68:	bl	10cdc <dcgettext@plt>
   13b6c:	ldr	r3, [r4]
   13b70:	mov	r1, #1
   13b74:	mov	r2, r0
   13b78:	mov	r0, r5
   13b7c:	add	sp, sp, #32
   13b80:	pop	{r4, r5, r6, lr}
   13b84:	b	10e20 <__fprintf_chk@plt>
   13b88:	mov	r2, #5
   13b8c:	ldr	r1, [pc, #548]	; 13db8 <__assert_fail@plt+0x2f2c>
   13b90:	mov	r0, #0
   13b94:	bl	10cdc <dcgettext@plt>
   13b98:	ldr	r2, [r4, #4]
   13b9c:	ldr	r3, [r4]
   13ba0:	mov	r1, #1
   13ba4:	str	r2, [sp, #48]	; 0x30
   13ba8:	mov	r2, r0
   13bac:	mov	r0, r5
   13bb0:	add	sp, sp, #32
   13bb4:	pop	{r4, r5, r6, lr}
   13bb8:	b	10e20 <__fprintf_chk@plt>
   13bbc:	mov	r2, #5
   13bc0:	ldr	r1, [pc, #500]	; 13dbc <__assert_fail@plt+0x2f30>
   13bc4:	mov	r0, #0
   13bc8:	bl	10cdc <dcgettext@plt>
   13bcc:	ldr	r2, [r4, #8]
   13bd0:	ldr	r3, [r4, #4]
   13bd4:	mov	r1, #1
   13bd8:	str	r2, [sp, #52]	; 0x34
   13bdc:	str	r3, [sp, #48]	; 0x30
   13be0:	ldr	r3, [r4]
   13be4:	mov	r2, r0
   13be8:	mov	r0, r5
   13bec:	add	sp, sp, #32
   13bf0:	pop	{r4, r5, r6, lr}
   13bf4:	b	10e20 <__fprintf_chk@plt>
   13bf8:	mov	r2, #5
   13bfc:	ldr	r1, [pc, #444]	; 13dc0 <__assert_fail@plt+0x2f34>
   13c00:	mov	r0, #0
   13c04:	bl	10cdc <dcgettext@plt>
   13c08:	ldr	r1, [r4, #12]
   13c0c:	ldr	r2, [r4, #8]
   13c10:	ldr	r3, [r4, #4]
   13c14:	str	r1, [sp, #8]
   13c18:	str	r2, [sp, #4]
   13c1c:	str	r3, [sp]
   13c20:	mov	r1, #1
   13c24:	ldr	r3, [r4]
   13c28:	mov	r2, r0
   13c2c:	mov	r0, r5
   13c30:	bl	10e20 <__fprintf_chk@plt>
   13c34:	b	13b54 <__assert_fail@plt+0x2cc8>
   13c38:	mov	r2, #5
   13c3c:	ldr	r1, [pc, #384]	; 13dc4 <__assert_fail@plt+0x2f38>
   13c40:	mov	r0, #0
   13c44:	bl	10cdc <dcgettext@plt>
   13c48:	ldr	r3, [r4, #16]
   13c4c:	ldr	r1, [r4, #12]
   13c50:	ldr	r2, [r4, #8]
   13c54:	str	r3, [sp, #12]
   13c58:	ldr	r3, [r4, #4]
   13c5c:	str	r1, [sp, #8]
   13c60:	str	r2, [sp, #4]
   13c64:	str	r3, [sp]
   13c68:	mov	r1, #1
   13c6c:	ldr	r3, [r4]
   13c70:	mov	r2, r0
   13c74:	mov	r0, r5
   13c78:	bl	10e20 <__fprintf_chk@plt>
   13c7c:	b	13b54 <__assert_fail@plt+0x2cc8>
   13c80:	mov	r2, #5
   13c84:	ldr	r1, [pc, #316]	; 13dc8 <__assert_fail@plt+0x2f3c>
   13c88:	mov	r0, #0
   13c8c:	bl	10cdc <dcgettext@plt>
   13c90:	ldr	r2, [r4, #20]
   13c94:	ldr	r3, [r4, #16]
   13c98:	ldr	r1, [r4, #12]
   13c9c:	str	r2, [sp, #16]
   13ca0:	ldr	r2, [r4, #8]
   13ca4:	str	r3, [sp, #12]
   13ca8:	ldr	r3, [r4, #4]
   13cac:	str	r1, [sp, #8]
   13cb0:	str	r2, [sp, #4]
   13cb4:	str	r3, [sp]
   13cb8:	mov	r1, #1
   13cbc:	ldr	r3, [r4]
   13cc0:	mov	r2, r0
   13cc4:	mov	r0, r5
   13cc8:	bl	10e20 <__fprintf_chk@plt>
   13ccc:	b	13b54 <__assert_fail@plt+0x2cc8>
   13cd0:	mov	r2, #5
   13cd4:	ldr	r1, [pc, #240]	; 13dcc <__assert_fail@plt+0x2f40>
   13cd8:	mov	r0, #0
   13cdc:	bl	10cdc <dcgettext@plt>
   13ce0:	ldr	r1, [r4, #24]
   13ce4:	ldr	r2, [r4, #20]
   13ce8:	ldr	r3, [r4, #16]
   13cec:	str	r1, [sp, #20]
   13cf0:	ldr	r1, [r4, #12]
   13cf4:	str	r2, [sp, #16]
   13cf8:	ldr	r2, [r4, #8]
   13cfc:	str	r3, [sp, #12]
   13d00:	ldr	r3, [r4, #4]
   13d04:	str	r1, [sp, #8]
   13d08:	str	r2, [sp, #4]
   13d0c:	str	r3, [sp]
   13d10:	mov	r1, #1
   13d14:	ldr	r3, [r4]
   13d18:	mov	r2, r0
   13d1c:	mov	r0, r5
   13d20:	bl	10e20 <__fprintf_chk@plt>
   13d24:	b	13b54 <__assert_fail@plt+0x2cc8>
   13d28:	mov	r2, #5
   13d2c:	ldr	r1, [pc, #156]	; 13dd0 <__assert_fail@plt+0x2f44>
   13d30:	mov	r0, #0
   13d34:	bl	10cdc <dcgettext@plt>
   13d38:	ldr	r3, [r4, #28]
   13d3c:	ldr	r1, [r4, #24]
   13d40:	ldr	r2, [r4, #20]
   13d44:	str	r3, [sp, #24]
   13d48:	ldr	r3, [r4, #16]
   13d4c:	str	r1, [sp, #20]
   13d50:	ldr	r1, [r4, #12]
   13d54:	str	r2, [sp, #16]
   13d58:	ldr	r2, [r4, #8]
   13d5c:	str	r3, [sp, #12]
   13d60:	ldr	r3, [r4, #4]
   13d64:	str	r1, [sp, #8]
   13d68:	str	r2, [sp, #4]
   13d6c:	str	r3, [sp]
   13d70:	mov	r1, #1
   13d74:	ldr	r3, [r4]
   13d78:	mov	r2, r0
   13d7c:	mov	r0, r5
   13d80:	bl	10e20 <__fprintf_chk@plt>
   13d84:	b	13b54 <__assert_fail@plt+0x2cc8>
   13d88:	mov	r2, #5
   13d8c:	ldr	r1, [pc, #64]	; 13dd4 <__assert_fail@plt+0x2f48>
   13d90:	b	13af8 <__assert_fail@plt+0x2c6c>
   13d94:	bl	10e80 <abort@plt>
   13d98:	strdeq	r5, [r1], -r4
   13d9c:	andeq	r5, r1, r8, lsl #18
   13da0:	andeq	r0, r0, r2, ror #15
   13da4:	ldrdeq	r5, [r1], -ip
   13da8:	andeq	r5, r1, ip, lsl #18
   13dac:	andeq	r5, r1, r0, lsl #18
   13db0:	andeq	r5, r1, r4, ror #21
   13db4:	ldrdeq	r5, [r1], -r8
   13db8:	andeq	r5, r1, r8, ror #19
   13dbc:	andeq	r5, r1, r0, lsl #20
   13dc0:	andeq	r5, r1, ip, lsl sl
   13dc4:	andeq	r5, r1, ip, lsr sl
   13dc8:	andeq	r5, r1, r0, ror #20
   13dcc:	andeq	r5, r1, r8, lsl #21
   13dd0:			; <UNDEFINED> instruction: 0x00015ab4
   13dd4:	andeq	r5, r1, r8, lsl fp
   13dd8:	push	{r4, r5, lr}
   13ddc:	sub	sp, sp, #12
   13de0:	ldr	r5, [sp, #24]
   13de4:	ldr	ip, [r5]
   13de8:	cmp	ip, #0
   13dec:	beq	13e08 <__assert_fail@plt+0x2f7c>
   13df0:	mov	lr, r5
   13df4:	mov	ip, #0
   13df8:	ldr	r4, [lr, #4]!
   13dfc:	add	ip, ip, #1
   13e00:	cmp	r4, #0
   13e04:	bne	13df8 <__assert_fail@plt+0x2f6c>
   13e08:	stm	sp, {r5, ip}
   13e0c:	bl	13a30 <__assert_fail@plt+0x2ba4>
   13e10:	add	sp, sp, #12
   13e14:	pop	{r4, r5, pc}
   13e18:	push	{r4, r5, r6, lr}
   13e1c:	sub	sp, sp, #56	; 0x38
   13e20:	ldr	r6, [pc, #88]	; 13e80 <__assert_fail@plt+0x2ff4>
   13e24:	ldr	r5, [sp, #72]	; 0x48
   13e28:	add	r4, sp, #8
   13e2c:	ldr	ip, [r6]
   13e30:	str	ip, [sp, #52]	; 0x34
   13e34:	mov	ip, #0
   13e38:	ldr	lr, [r5], #4
   13e3c:	cmp	lr, #0
   13e40:	str	lr, [r4, #4]!
   13e44:	beq	13e54 <__assert_fail@plt+0x2fc8>
   13e48:	add	ip, ip, #1
   13e4c:	cmp	ip, #10
   13e50:	bne	13e38 <__assert_fail@plt+0x2fac>
   13e54:	add	lr, sp, #12
   13e58:	str	ip, [sp, #4]
   13e5c:	str	lr, [sp]
   13e60:	bl	13a30 <__assert_fail@plt+0x2ba4>
   13e64:	ldr	r2, [sp, #52]	; 0x34
   13e68:	ldr	r3, [r6]
   13e6c:	cmp	r2, r3
   13e70:	bne	13e7c <__assert_fail@plt+0x2ff0>
   13e74:	add	sp, sp, #56	; 0x38
   13e78:	pop	{r4, r5, r6, pc}
   13e7c:	bl	10ce8 <__stack_chk_fail@plt>
   13e80:	andeq	r5, r2, r8, lsl #30
   13e84:	push	{r3}		; (str r3, [sp, #-4]!)
   13e88:	mov	ip, #0
   13e8c:	push	{r4, r5, r6, lr}
   13e90:	sub	sp, sp, #60	; 0x3c
   13e94:	ldr	r6, [pc, #100]	; 13f00 <__assert_fail@plt+0x3074>
   13e98:	add	r5, sp, #8
   13e9c:	add	r4, sp, #80	; 0x50
   13ea0:	ldr	r3, [r6]
   13ea4:	str	r4, [sp, #8]
   13ea8:	str	r3, [sp, #52]	; 0x34
   13eac:	ldr	r3, [sp, #76]	; 0x4c
   13eb0:	ldr	lr, [r4], #4
   13eb4:	cmp	lr, #0
   13eb8:	str	lr, [r5, #4]!
   13ebc:	beq	13ecc <__assert_fail@plt+0x3040>
   13ec0:	add	ip, ip, #1
   13ec4:	cmp	ip, #10
   13ec8:	bne	13eb0 <__assert_fail@plt+0x3024>
   13ecc:	add	lr, sp, #12
   13ed0:	str	ip, [sp, #4]
   13ed4:	str	lr, [sp]
   13ed8:	bl	13a30 <__assert_fail@plt+0x2ba4>
   13edc:	ldr	r2, [sp, #52]	; 0x34
   13ee0:	ldr	r3, [r6]
   13ee4:	cmp	r2, r3
   13ee8:	bne	13efc <__assert_fail@plt+0x3070>
   13eec:	add	sp, sp, #60	; 0x3c
   13ef0:	pop	{r4, r5, r6, lr}
   13ef4:	add	sp, sp, #4
   13ef8:	bx	lr
   13efc:	bl	10ce8 <__stack_chk_fail@plt>
   13f00:	andeq	r5, r2, r8, lsl #30
   13f04:	push	{r4, lr}
   13f08:	mov	r2, #5
   13f0c:	ldr	r1, [pc, #88]	; 13f6c <__assert_fail@plt+0x30e0>
   13f10:	mov	r0, #0
   13f14:	bl	10cdc <dcgettext@plt>
   13f18:	ldr	r2, [pc, #80]	; 13f70 <__assert_fail@plt+0x30e4>
   13f1c:	mov	r1, r0
   13f20:	mov	r0, #1
   13f24:	bl	10e08 <__printf_chk@plt>
   13f28:	mov	r2, #5
   13f2c:	ldr	r1, [pc, #64]	; 13f74 <__assert_fail@plt+0x30e8>
   13f30:	mov	r0, #0
   13f34:	bl	10cdc <dcgettext@plt>
   13f38:	ldr	r3, [pc, #56]	; 13f78 <__assert_fail@plt+0x30ec>
   13f3c:	ldr	r2, [pc, #56]	; 13f7c <__assert_fail@plt+0x30f0>
   13f40:	mov	r1, r0
   13f44:	mov	r0, #1
   13f48:	bl	10e08 <__printf_chk@plt>
   13f4c:	ldr	r1, [pc, #44]	; 13f80 <__assert_fail@plt+0x30f4>
   13f50:	mov	r2, #5
   13f54:	mov	r0, #0
   13f58:	bl	10cdc <dcgettext@plt>
   13f5c:	ldr	r3, [pc, #32]	; 13f84 <__assert_fail@plt+0x30f8>
   13f60:	pop	{r4, lr}
   13f64:	ldr	r1, [r3]
   13f68:	b	10c58 <fputs_unlocked@plt>
   13f6c:	andeq	r5, r1, r4, asr fp
   13f70:	andeq	r5, r1, ip, ror #22
   13f74:	andeq	r5, r1, r4, lsl #23
   13f78:	ldrdeq	r5, [r1], -r4
   13f7c:	strdeq	r5, [r1], -ip
   13f80:	muleq	r1, r8, fp
   13f84:	andeq	r6, r2, ip, lsr r1
   13f88:	push	{r4, lr}
   13f8c:	mov	r4, r0
   13f90:	bl	10d78 <malloc@plt>
   13f94:	adds	r4, r4, #0
   13f98:	movne	r4, #1
   13f9c:	cmp	r0, #0
   13fa0:	movne	r4, #0
   13fa4:	cmp	r4, #0
   13fa8:	popeq	{r4, pc}
   13fac:	bl	141d0 <__assert_fail@plt+0x3344>
   13fb0:	push	{r4, r5, r6, lr}
   13fb4:	umull	r4, r5, r0, r1
   13fb8:	adds	r3, r5, #0
   13fbc:	movne	r3, #1
   13fc0:	cmp	r4, #0
   13fc4:	blt	13fdc <__assert_fail@plt+0x3150>
   13fc8:	cmp	r3, #0
   13fcc:	bne	13fdc <__assert_fail@plt+0x3150>
   13fd0:	mul	r0, r1, r0
   13fd4:	pop	{r4, r5, r6, lr}
   13fd8:	b	13f88 <__assert_fail@plt+0x30fc>
   13fdc:	bl	141d0 <__assert_fail@plt+0x3344>
   13fe0:	b	13f88 <__assert_fail@plt+0x30fc>
   13fe4:	adds	r3, r0, #0
   13fe8:	movne	r3, #1
   13fec:	cmp	r1, #0
   13ff0:	movne	r3, #0
   13ff4:	cmp	r3, #0
   13ff8:	push	{r4, lr}
   13ffc:	bne	14024 <__assert_fail@plt+0x3198>
   14000:	mov	r4, r1
   14004:	bl	10cf4 <realloc@plt>
   14008:	adds	r4, r4, #0
   1400c:	movne	r4, #1
   14010:	cmp	r0, #0
   14014:	movne	r4, #0
   14018:	cmp	r4, #0
   1401c:	popeq	{r4, pc}
   14020:	bl	141d0 <__assert_fail@plt+0x3344>
   14024:	bl	10c94 <free@plt>
   14028:	mov	r0, #0
   1402c:	pop	{r4, pc}
   14030:	push	{r4, r5, r6, lr}
   14034:	umull	r4, r5, r1, r2
   14038:	adds	r3, r5, #0
   1403c:	movne	r3, #1
   14040:	cmp	r4, #0
   14044:	blt	1405c <__assert_fail@plt+0x31d0>
   14048:	cmp	r3, #0
   1404c:	bne	1405c <__assert_fail@plt+0x31d0>
   14050:	mul	r1, r2, r1
   14054:	pop	{r4, r5, r6, lr}
   14058:	b	13fe4 <__assert_fail@plt+0x3158>
   1405c:	bl	141d0 <__assert_fail@plt+0x3344>
   14060:	push	{r4, r5, r6, r7, r8, lr}
   14064:	subs	r7, r0, #0
   14068:	mov	r6, r1
   1406c:	mov	r5, r2
   14070:	ldr	r4, [r1]
   14074:	beq	140a8 <__assert_fail@plt+0x321c>
   14078:	mov	r1, r2
   1407c:	ldr	r0, [pc, #104]	; 140ec <__assert_fail@plt+0x3260>
   14080:	bl	14d70 <__assert_fail@plt+0x3ee4>
   14084:	cmp	r0, r4
   14088:	bls	140cc <__assert_fail@plt+0x3240>
   1408c:	add	r3, r4, #1
   14090:	add	r4, r3, r4, lsr #1
   14094:	str	r4, [r6]
   14098:	mul	r1, r5, r4
   1409c:	mov	r0, r7
   140a0:	pop	{r4, r5, r6, r7, r8, lr}
   140a4:	b	13fe4 <__assert_fail@plt+0x3158>
   140a8:	cmp	r4, #0
   140ac:	beq	140d0 <__assert_fail@plt+0x3244>
   140b0:	umull	r0, r1, r4, r5
   140b4:	adds	r3, r1, #0
   140b8:	movne	r3, #1
   140bc:	cmp	r0, #0
   140c0:	blt	140cc <__assert_fail@plt+0x3240>
   140c4:	cmp	r3, #0
   140c8:	beq	14094 <__assert_fail@plt+0x3208>
   140cc:	bl	141d0 <__assert_fail@plt+0x3344>
   140d0:	mov	r1, r2
   140d4:	mov	r0, #64	; 0x40
   140d8:	bl	14d70 <__assert_fail@plt+0x3ee4>
   140dc:	cmp	r5, #64	; 0x40
   140e0:	movls	r4, r0
   140e4:	addhi	r4, r0, #1
   140e8:	b	140b0 <__assert_fail@plt+0x3224>
   140ec:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   140f0:	cmp	r0, #0
   140f4:	ldr	r3, [r1]
   140f8:	beq	1411c <__assert_fail@plt+0x3290>
   140fc:	ldr	r2, [pc, #60]	; 14140 <__assert_fail@plt+0x32b4>
   14100:	cmp	r3, r2
   14104:	bhi	14138 <__assert_fail@plt+0x32ac>
   14108:	add	r2, r3, #1
   1410c:	add	r3, r2, r3, lsr #1
   14110:	str	r3, [r1]
   14114:	mov	r1, r3
   14118:	b	13fe4 <__assert_fail@plt+0x3158>
   1411c:	cmp	r3, #0
   14120:	bne	14134 <__assert_fail@plt+0x32a8>
   14124:	mov	r3, #64	; 0x40
   14128:	str	r3, [r1]
   1412c:	mov	r1, r3
   14130:	b	13fe4 <__assert_fail@plt+0x3158>
   14134:	bge	14110 <__assert_fail@plt+0x3284>
   14138:	push	{r4, lr}
   1413c:	bl	141d0 <__assert_fail@plt+0x3344>
   14140:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14144:	push	{r4, lr}
   14148:	mov	r4, r0
   1414c:	bl	13f88 <__assert_fail@plt+0x30fc>
   14150:	mov	r2, r4
   14154:	mov	r1, #0
   14158:	pop	{r4, lr}
   1415c:	b	10dfc <memset@plt>
   14160:	push	{r4, r5, r6, lr}
   14164:	umull	r4, r5, r0, r1
   14168:	adds	r3, r5, #0
   1416c:	movne	r3, #1
   14170:	cmp	r4, #0
   14174:	blt	1418c <__assert_fail@plt+0x3300>
   14178:	cmp	r3, #0
   1417c:	bne	1418c <__assert_fail@plt+0x3300>
   14180:	bl	10c4c <calloc@plt>
   14184:	cmp	r0, #0
   14188:	popne	{r4, r5, r6, pc}
   1418c:	bl	141d0 <__assert_fail@plt+0x3344>
   14190:	push	{r4, r5, r6, lr}
   14194:	mov	r4, r1
   14198:	mov	r5, r0
   1419c:	mov	r0, r1
   141a0:	bl	13f88 <__assert_fail@plt+0x30fc>
   141a4:	mov	r2, r4
   141a8:	mov	r1, r5
   141ac:	pop	{r4, r5, r6, lr}
   141b0:	b	10cac <memcpy@plt>
   141b4:	push	{r4, lr}
   141b8:	mov	r4, r0
   141bc:	bl	10dcc <strlen@plt>
   141c0:	add	r1, r0, #1
   141c4:	mov	r0, r4
   141c8:	pop	{r4, lr}
   141cc:	b	14190 <__assert_fail@plt+0x3304>
   141d0:	ldr	r3, [pc, #44]	; 14204 <__assert_fail@plt+0x3378>
   141d4:	push	{r4, lr}
   141d8:	mov	r2, #5
   141dc:	ldr	r1, [pc, #36]	; 14208 <__assert_fail@plt+0x337c>
   141e0:	mov	r0, #0
   141e4:	ldr	r4, [r3]
   141e8:	bl	10cdc <dcgettext@plt>
   141ec:	ldr	r2, [pc, #24]	; 1420c <__assert_fail@plt+0x3380>
   141f0:	mov	r1, #0
   141f4:	mov	r3, r0
   141f8:	mov	r0, r4
   141fc:	bl	10d60 <error@plt>
   14200:	bl	10e80 <abort@plt>
   14204:	andeq	r6, r2, r0, ror #1
   14208:	andeq	r5, r1, ip, lsl #24
   1420c:	ldrdeq	r5, [r1], -r8
   14210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14214:	cmp	r2, #36	; 0x24
   14218:	ldr	r7, [pc, #2088]	; 14a48 <__assert_fail@plt+0x3bbc>
   1421c:	sub	sp, sp, #28
   14220:	mov	r5, r2
   14224:	ldr	r2, [r7]
   14228:	str	r3, [sp, #4]
   1422c:	str	r2, [sp, #20]
   14230:	ldr	sl, [sp, #64]	; 0x40
   14234:	bhi	14a30 <__assert_fail@plt+0x3ba4>
   14238:	cmp	r1, #0
   1423c:	mov	r6, r1
   14240:	mov	r9, r0
   14244:	addeq	r6, sp, #16
   14248:	bl	10de4 <__errno_location@plt>
   1424c:	mov	r4, #0
   14250:	mov	r2, r5
   14254:	mov	r1, r6
   14258:	str	r4, [r0]
   1425c:	mov	fp, r0
   14260:	mov	r0, r9
   14264:	bl	10c7c <strtol@plt>
   14268:	ldr	r8, [r6]
   1426c:	cmp	r8, r9
   14270:	mov	r5, r0
   14274:	beq	142c8 <__assert_fail@plt+0x343c>
   14278:	ldr	r4, [fp]
   1427c:	cmp	r4, #0
   14280:	beq	14290 <__assert_fail@plt+0x3404>
   14284:	cmp	r4, #34	; 0x22
   14288:	bne	143c4 <__assert_fail@plt+0x3538>
   1428c:	mov	r4, #1
   14290:	cmp	sl, #0
   14294:	beq	142a4 <__assert_fail@plt+0x3418>
   14298:	ldrb	fp, [r8]
   1429c:	cmp	fp, #0
   142a0:	bne	144c8 <__assert_fail@plt+0x363c>
   142a4:	ldr	r3, [sp, #4]
   142a8:	str	r5, [r3]
   142ac:	ldr	r2, [sp, #20]
   142b0:	ldr	r3, [r7]
   142b4:	mov	r0, r4
   142b8:	cmp	r2, r3
   142bc:	bne	14a44 <__assert_fail@plt+0x3bb8>
   142c0:	add	sp, sp, #28
   142c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142c8:	cmp	sl, r4
   142cc:	beq	143c4 <__assert_fail@plt+0x3538>
   142d0:	ldrb	fp, [r9]
   142d4:	cmp	fp, r4
   142d8:	beq	143c4 <__assert_fail@plt+0x3538>
   142dc:	mov	r1, fp
   142e0:	mov	r0, sl
   142e4:	bl	10dd8 <strchr@plt>
   142e8:	cmp	r0, r4
   142ec:	movne	r5, #1
   142f0:	beq	143c4 <__assert_fail@plt+0x3538>
   142f4:	sub	r9, fp, #69	; 0x45
   142f8:	cmp	r9, #47	; 0x2f
   142fc:	ldrls	pc, [pc, r9, lsl #2]
   14300:	b	144ec <__assert_fail@plt+0x3660>
   14304:	andeq	r4, r1, ip, asr #7
   14308:	andeq	r4, r1, ip, ror #9
   1430c:	andeq	r4, r1, ip, asr #7
   14310:	andeq	r4, r1, ip, ror #9
   14314:	andeq	r4, r1, ip, ror #9
   14318:	andeq	r4, r1, ip, ror #9
   1431c:	andeq	r4, r1, ip, asr #7
   14320:	andeq	r4, r1, ip, ror #9
   14324:	andeq	r4, r1, ip, asr #7
   14328:	andeq	r4, r1, ip, ror #9
   1432c:	andeq	r4, r1, ip, ror #9
   14330:	andeq	r4, r1, ip, asr #7
   14334:	andeq	r4, r1, ip, ror #9
   14338:	andeq	r4, r1, ip, ror #9
   1433c:	andeq	r4, r1, ip, ror #9
   14340:	andeq	r4, r1, ip, asr #7
   14344:	andeq	r4, r1, ip, ror #9
   14348:	andeq	r4, r1, ip, ror #9
   1434c:	andeq	r4, r1, ip, ror #9
   14350:	andeq	r4, r1, ip, ror #9
   14354:	andeq	r4, r1, ip, asr #7
   14358:	andeq	r4, r1, ip, asr #7
   1435c:	andeq	r4, r1, ip, ror #9
   14360:	andeq	r4, r1, ip, ror #9
   14364:	andeq	r4, r1, ip, ror #9
   14368:	andeq	r4, r1, ip, ror #9
   1436c:	andeq	r4, r1, ip, ror #9
   14370:	andeq	r4, r1, ip, ror #9
   14374:	andeq	r4, r1, ip, ror #9
   14378:	andeq	r4, r1, ip, ror #9
   1437c:	andeq	r4, r1, ip, ror #9
   14380:	andeq	r4, r1, ip, ror #9
   14384:	andeq	r4, r1, ip, ror #9
   14388:	andeq	r4, r1, ip, ror #9
   1438c:	andeq	r4, r1, ip, asr #7
   14390:	andeq	r4, r1, ip, ror #9
   14394:	andeq	r4, r1, ip, ror #9
   14398:	andeq	r4, r1, ip, ror #9
   1439c:	andeq	r4, r1, ip, asr #7
   143a0:	andeq	r4, r1, ip, ror #9
   143a4:	andeq	r4, r1, ip, asr #7
   143a8:	andeq	r4, r1, ip, ror #9
   143ac:	andeq	r4, r1, ip, ror #9
   143b0:	andeq	r4, r1, ip, ror #9
   143b4:	andeq	r4, r1, ip, ror #9
   143b8:	andeq	r4, r1, ip, ror #9
   143bc:	andeq	r4, r1, ip, ror #9
   143c0:	andeq	r4, r1, ip, asr #7
   143c4:	mov	r4, #4
   143c8:	b	142ac <__assert_fail@plt+0x3420>
   143cc:	mov	r0, sl
   143d0:	mov	r1, #48	; 0x30
   143d4:	bl	10dd8 <strchr@plt>
   143d8:	cmp	r0, #0
   143dc:	beq	144ec <__assert_fail@plt+0x3660>
   143e0:	ldrb	r2, [r8, #1]
   143e4:	cmp	r2, #68	; 0x44
   143e8:	beq	14a0c <__assert_fail@plt+0x3b80>
   143ec:	cmp	r2, #105	; 0x69
   143f0:	beq	14a18 <__assert_fail@plt+0x3b8c>
   143f4:	cmp	r2, #66	; 0x42
   143f8:	beq	14a0c <__assert_fail@plt+0x3b80>
   143fc:	cmp	r9, #47	; 0x2f
   14400:	ldrls	pc, [pc, r9, lsl #2]
   14404:	b	144dc <__assert_fail@plt+0x3650>
   14408:	muleq	r1, r4, r9
   1440c:	ldrdeq	r4, [r1], -ip
   14410:	andeq	r4, r1, r0, lsl #19
   14414:	ldrdeq	r4, [r1], -ip
   14418:	ldrdeq	r4, [r1], -ip
   1441c:	ldrdeq	r4, [r1], -ip
   14420:	andeq	r4, r1, r0, ror r9
   14424:	ldrdeq	r4, [r1], -ip
   14428:	andeq	r4, r1, ip, asr #18
   1442c:	ldrdeq	r4, [r1], -ip
   14430:	ldrdeq	r4, [r1], -ip
   14434:	andeq	r4, r1, r8, lsr r9
   14438:	ldrdeq	r4, [r1], -ip
   1443c:	ldrdeq	r4, [r1], -ip
   14440:	ldrdeq	r4, [r1], -ip
   14444:	andeq	r4, r1, r4, lsr #18
   14448:	ldrdeq	r4, [r1], -ip
   1444c:	ldrdeq	r4, [r1], -ip
   14450:	ldrdeq	r4, [r1], -ip
   14454:	ldrdeq	r4, [r1], -ip
   14458:	andeq	r4, r1, r0, lsl r9
   1445c:	andeq	r4, r1, ip, asr r9
   14460:	ldrdeq	r4, [r1], -ip
   14464:	ldrdeq	r4, [r1], -ip
   14468:	ldrdeq	r4, [r1], -ip
   1446c:	ldrdeq	r4, [r1], -ip
   14470:	ldrdeq	r4, [r1], -ip
   14474:	ldrdeq	r4, [r1], -ip
   14478:	ldrdeq	r4, [r1], -ip
   1447c:	andeq	r4, r1, r4, asr r6
   14480:	andeq	r4, r1, r8, lsr #19
   14484:	ldrdeq	r4, [r1], -ip
   14488:	ldrdeq	r4, [r1], -ip
   1448c:	ldrdeq	r4, [r1], -ip
   14490:	andeq	r4, r1, r0, lsl #19
   14494:	ldrdeq	r4, [r1], -ip
   14498:	ldrdeq	r4, [r1], -ip
   1449c:	ldrdeq	r4, [r1], -ip
   144a0:	andeq	r4, r1, r0, ror r9
   144a4:	ldrdeq	r4, [r1], -ip
   144a8:	andeq	r4, r1, ip, asr #18
   144ac:	ldrdeq	r4, [r1], -ip
   144b0:	ldrdeq	r4, [r1], -ip
   144b4:	ldrdeq	r4, [r1], -ip
   144b8:	ldrdeq	r4, [r1], -ip
   144bc:	ldrdeq	r4, [r1], -ip
   144c0:	ldrdeq	r4, [r1], -ip
   144c4:	andeq	r4, r1, r4, lsr #18
   144c8:	mov	r1, fp
   144cc:	mov	r0, sl
   144d0:	bl	10dd8 <strchr@plt>
   144d4:	cmp	r0, #0
   144d8:	bne	142f4 <__assert_fail@plt+0x3468>
   144dc:	ldr	r3, [sp, #4]
   144e0:	orr	r4, r4, #2
   144e4:	str	r5, [r3]
   144e8:	b	142ac <__assert_fail@plt+0x3420>
   144ec:	mov	sl, #1
   144f0:	mov	r9, #1024	; 0x400
   144f4:	sub	fp, fp, #66	; 0x42
   144f8:	cmp	fp, #53	; 0x35
   144fc:	ldrls	pc, [pc, fp, lsl #2]
   14500:	b	144dc <__assert_fail@plt+0x3650>
   14504:	andeq	r4, r1, r0, ror r6
   14508:	ldrdeq	r4, [r1], -ip
   1450c:	ldrdeq	r4, [r1], -ip
   14510:	andeq	r4, r1, r8, lsl #13
   14514:	ldrdeq	r4, [r1], -ip
   14518:	andeq	r4, r1, r4, ror #15
   1451c:	ldrdeq	r4, [r1], -ip
   14520:	ldrdeq	r4, [r1], -ip
   14524:	ldrdeq	r4, [r1], -ip
   14528:			; <UNDEFINED> instruction: 0x000147b4
   1452c:	ldrdeq	r4, [r1], -ip
   14530:	ldrdeq	r4, [r1], -ip
   14534:	ldrdeq	r4, [r1], -ip
   14538:	ldrdeq	r4, [r1], -ip
   1453c:	andeq	r4, r1, ip, ror #13
   14540:	ldrdeq	r4, [r1], -ip
   14544:	ldrdeq	r4, [r1], -ip
   14548:	ldrdeq	r4, [r1], -ip
   1454c:	andeq	r4, r1, ip, lsr #17
   14550:	ldrdeq	r4, [r1], -ip
   14554:	ldrdeq	r4, [r1], -ip
   14558:	ldrdeq	r4, [r1], -ip
   1455c:	ldrdeq	r4, [r1], -ip
   14560:	andeq	r4, r1, r0, asr r7
   14564:	andeq	r4, r1, r8, asr #16
   14568:	ldrdeq	r4, [r1], -ip
   1456c:	ldrdeq	r4, [r1], -ip
   14570:	ldrdeq	r4, [r1], -ip
   14574:	ldrdeq	r4, [r1], -ip
   14578:	ldrdeq	r4, [r1], -ip
   1457c:	ldrdeq	r4, [r1], -ip
   14580:	ldrdeq	r4, [r1], -ip
   14584:	andeq	r4, r1, r8, asr r6
   14588:	andeq	r4, r1, ip, lsl r6
   1458c:	ldrdeq	r4, [r1], -ip
   14590:	ldrdeq	r4, [r1], -ip
   14594:	ldrdeq	r4, [r1], -ip
   14598:	andeq	r4, r1, r4, ror #15
   1459c:	ldrdeq	r4, [r1], -ip
   145a0:	ldrdeq	r4, [r1], -ip
   145a4:	ldrdeq	r4, [r1], -ip
   145a8:			; <UNDEFINED> instruction: 0x000147b4
   145ac:	ldrdeq	r4, [r1], -ip
   145b0:	ldrdeq	r4, [r1], -ip
   145b4:	ldrdeq	r4, [r1], -ip
   145b8:	ldrdeq	r4, [r1], -ip
   145bc:	ldrdeq	r4, [r1], -ip
   145c0:	ldrdeq	r4, [r1], -ip
   145c4:	ldrdeq	r4, [r1], -ip
   145c8:	ldrdeq	r4, [r1], -ip
   145cc:	andeq	r4, r1, ip, lsr #17
   145d0:	ldrdeq	r4, [r1], -ip
   145d4:	ldrdeq	r4, [r1], -ip
   145d8:	andeq	r4, r1, r4, lsr r6
   145dc:	mov	r1, r9
   145e0:	mov	r0, #-2147483648	; 0x80000000
   145e4:	bl	14f7c <__assert_fail@plt+0x40f0>
   145e8:	mov	fp, r0
   145ec:	cmp	r5, fp
   145f0:	blt	14614 <__assert_fail@plt+0x3788>
   145f4:	mov	r1, r9
   145f8:	mvn	r0, #-2147483648	; 0x80000000
   145fc:	bl	14f7c <__assert_fail@plt+0x40f0>
   14600:	cmp	r5, r0
   14604:	bgt	14648 <__assert_fail@plt+0x37bc>
   14608:	mul	r5, r9, r5
   1460c:	cmp	r5, fp
   14610:	bge	147d4 <__assert_fail@plt+0x3948>
   14614:	mov	r4, #1
   14618:	mov	r5, #-2147483648	; 0x80000000
   1461c:	add	r2, r8, sl
   14620:	str	r2, [r6]
   14624:	ldrb	r3, [r8, sl]
   14628:	cmp	r3, #0
   1462c:	orrne	r4, r4, #2
   14630:	b	142a4 <__assert_fail@plt+0x3418>
   14634:	cmp	r5, #-1073741824	; 0xc0000000
   14638:	blt	14614 <__assert_fail@plt+0x3788>
   1463c:	cmn	r5, #-1073741823	; 0xc0000001
   14640:	lslle	r5, r5, #1
   14644:	ble	1461c <__assert_fail@plt+0x3790>
   14648:	mov	r4, #1
   1464c:	mvn	r5, #-2147483648	; 0x80000000
   14650:	b	1461c <__assert_fail@plt+0x3790>
   14654:	mov	sl, #1
   14658:	cmn	r5, #4194304	; 0x400000
   1465c:	blt	14614 <__assert_fail@plt+0x3788>
   14660:	cmp	r5, #4194304	; 0x400000
   14664:	lsllt	r5, r5, #9
   14668:	blt	1461c <__assert_fail@plt+0x3790>
   1466c:	b	14648 <__assert_fail@plt+0x37bc>
   14670:	cmn	r5, #2097152	; 0x200000
   14674:	blt	14614 <__assert_fail@plt+0x3788>
   14678:	cmp	r5, #2097152	; 0x200000
   1467c:	lsllt	r5, r5, #10
   14680:	blt	1461c <__assert_fail@plt+0x3790>
   14684:	b	14648 <__assert_fail@plt+0x37bc>
   14688:	mov	r1, r9
   1468c:	mov	r0, #-2147483648	; 0x80000000
   14690:	bl	14f7c <__assert_fail@plt+0x40f0>
   14694:	mov	r2, r0
   14698:	mov	fp, #6
   1469c:	mov	r3, #0
   146a0:	str	r4, [sp, #8]
   146a4:	str	r6, [sp, #12]
   146a8:	mov	r4, r3
   146ac:	mov	r6, fp
   146b0:	mov	fp, r2
   146b4:	b	146d8 <__assert_fail@plt+0x384c>
   146b8:	mov	r1, r9
   146bc:	mvn	r0, #-2147483648	; 0x80000000
   146c0:	bl	14f7c <__assert_fail@plt+0x40f0>
   146c4:	cmp	r0, r5
   146c8:	blt	149d0 <__assert_fail@plt+0x3b44>
   146cc:	mul	r5, r9, r5
   146d0:	subs	r6, r6, #1
   146d4:	beq	149b0 <__assert_fail@plt+0x3b24>
   146d8:	cmp	r5, fp
   146dc:	bge	146b8 <__assert_fail@plt+0x382c>
   146e0:	mov	r4, #1
   146e4:	mov	r5, #-2147483648	; 0x80000000
   146e8:	b	146d0 <__assert_fail@plt+0x3844>
   146ec:	mov	r1, r9
   146f0:	mov	r0, #-2147483648	; 0x80000000
   146f4:	bl	14f7c <__assert_fail@plt+0x40f0>
   146f8:	mov	r2, r0
   146fc:	mov	fp, #5
   14700:	mov	r3, #0
   14704:	str	r4, [sp, #8]
   14708:	str	r6, [sp, #12]
   1470c:	mov	r4, r3
   14710:	mov	r6, fp
   14714:	mov	fp, r2
   14718:	b	1473c <__assert_fail@plt+0x38b0>
   1471c:	mov	r1, r9
   14720:	mvn	r0, #-2147483648	; 0x80000000
   14724:	bl	14f7c <__assert_fail@plt+0x40f0>
   14728:	cmp	r0, r5
   1472c:	blt	14a00 <__assert_fail@plt+0x3b74>
   14730:	mul	r5, r9, r5
   14734:	subs	r6, r6, #1
   14738:	beq	149b0 <__assert_fail@plt+0x3b24>
   1473c:	cmp	fp, r5
   14740:	ble	1471c <__assert_fail@plt+0x3890>
   14744:	mov	r4, #1
   14748:	mov	r5, #-2147483648	; 0x80000000
   1474c:	b	14734 <__assert_fail@plt+0x38a8>
   14750:	mov	r1, r9
   14754:	mov	r0, #-2147483648	; 0x80000000
   14758:	bl	14f7c <__assert_fail@plt+0x40f0>
   1475c:	mov	r2, r0
   14760:	mov	fp, #8
   14764:	mov	r3, #0
   14768:	str	r4, [sp, #8]
   1476c:	str	r6, [sp, #12]
   14770:	mov	r4, r3
   14774:	mov	r6, fp
   14778:	mov	fp, r2
   1477c:	b	147a0 <__assert_fail@plt+0x3914>
   14780:	mov	r1, r9
   14784:	mvn	r0, #-2147483648	; 0x80000000
   14788:	bl	14f7c <__assert_fail@plt+0x40f0>
   1478c:	cmp	r0, r5
   14790:	blt	149e8 <__assert_fail@plt+0x3b5c>
   14794:	mul	r5, r9, r5
   14798:	subs	r6, r6, #1
   1479c:	beq	149b0 <__assert_fail@plt+0x3b24>
   147a0:	cmp	fp, r5
   147a4:	ble	14780 <__assert_fail@plt+0x38f4>
   147a8:	mov	r4, #1
   147ac:	mov	r5, #-2147483648	; 0x80000000
   147b0:	b	14798 <__assert_fail@plt+0x390c>
   147b4:	mov	r1, r9
   147b8:	mov	r0, #-2147483648	; 0x80000000
   147bc:	bl	14f7c <__assert_fail@plt+0x40f0>
   147c0:	cmp	r5, r0
   147c4:	blt	14614 <__assert_fail@plt+0x3788>
   147c8:	mov	r1, r9
   147cc:	mvn	r0, #-2147483648	; 0x80000000
   147d0:	bl	14f7c <__assert_fail@plt+0x40f0>
   147d4:	cmp	r0, r5
   147d8:	blt	14648 <__assert_fail@plt+0x37bc>
   147dc:	mul	r5, r9, r5
   147e0:	b	1461c <__assert_fail@plt+0x3790>
   147e4:	mov	r1, r9
   147e8:	mov	r0, #-2147483648	; 0x80000000
   147ec:	bl	14f7c <__assert_fail@plt+0x40f0>
   147f0:	mov	r2, r0
   147f4:	mov	fp, #3
   147f8:	mov	r3, #0
   147fc:	str	r4, [sp, #8]
   14800:	str	r6, [sp, #12]
   14804:	mov	r4, r3
   14808:	mov	r6, fp
   1480c:	mov	fp, r2
   14810:	b	14834 <__assert_fail@plt+0x39a8>
   14814:	mov	r1, r9
   14818:	mvn	r0, #-2147483648	; 0x80000000
   1481c:	bl	14f7c <__assert_fail@plt+0x40f0>
   14820:	cmp	r0, r5
   14824:	blt	149f4 <__assert_fail@plt+0x3b68>
   14828:	mul	r5, r9, r5
   1482c:	subs	r6, r6, #1
   14830:	beq	149b0 <__assert_fail@plt+0x3b24>
   14834:	cmp	r5, fp
   14838:	bge	14814 <__assert_fail@plt+0x3988>
   1483c:	mov	r4, #1
   14840:	mov	r5, #-2147483648	; 0x80000000
   14844:	b	1482c <__assert_fail@plt+0x39a0>
   14848:	mov	r1, r9
   1484c:	mov	r0, #-2147483648	; 0x80000000
   14850:	bl	14f7c <__assert_fail@plt+0x40f0>
   14854:	mov	r2, r0
   14858:	mov	fp, #7
   1485c:	mov	r3, #0
   14860:	str	r4, [sp, #8]
   14864:	str	r6, [sp, #12]
   14868:	mov	r4, r3
   1486c:	mov	r6, fp
   14870:	mov	fp, r2
   14874:	b	14898 <__assert_fail@plt+0x3a0c>
   14878:	mov	r1, r9
   1487c:	mvn	r0, #-2147483648	; 0x80000000
   14880:	bl	14f7c <__assert_fail@plt+0x40f0>
   14884:	cmp	r0, r5
   14888:	blt	149dc <__assert_fail@plt+0x3b50>
   1488c:	mul	r5, r9, r5
   14890:	subs	r6, r6, #1
   14894:	beq	149b0 <__assert_fail@plt+0x3b24>
   14898:	cmp	fp, r5
   1489c:	ble	14878 <__assert_fail@plt+0x39ec>
   148a0:	mov	r4, #1
   148a4:	mov	r5, #-2147483648	; 0x80000000
   148a8:	b	14890 <__assert_fail@plt+0x3a04>
   148ac:	mov	r1, r9
   148b0:	mov	r0, #-2147483648	; 0x80000000
   148b4:	bl	14f7c <__assert_fail@plt+0x40f0>
   148b8:	mov	r2, r0
   148bc:	mov	fp, #4
   148c0:	mov	r3, #0
   148c4:	str	r4, [sp, #8]
   148c8:	str	r6, [sp, #12]
   148cc:	mov	r4, r3
   148d0:	mov	r6, fp
   148d4:	mov	fp, r2
   148d8:	b	148fc <__assert_fail@plt+0x3a70>
   148dc:	mov	r1, r9
   148e0:	mvn	r0, #-2147483648	; 0x80000000
   148e4:	bl	14f7c <__assert_fail@plt+0x40f0>
   148e8:	cmp	r0, r5
   148ec:	blt	149c4 <__assert_fail@plt+0x3b38>
   148f0:	mul	r5, r9, r5
   148f4:	subs	r6, r6, #1
   148f8:	beq	149b0 <__assert_fail@plt+0x3b24>
   148fc:	cmp	fp, r5
   14900:	ble	148dc <__assert_fail@plt+0x3a50>
   14904:	mov	r4, #1
   14908:	mov	r5, #-2147483648	; 0x80000000
   1490c:	b	148f4 <__assert_fail@plt+0x3a68>
   14910:	ldr	r3, [pc, #308]	; 14a4c <__assert_fail@plt+0x3bc0>
   14914:	mov	sl, #1
   14918:	mov	r2, r3
   1491c:	mov	r9, #1024	; 0x400
   14920:	b	14760 <__assert_fail@plt+0x38d4>
   14924:	ldr	r3, [pc, #288]	; 14a4c <__assert_fail@plt+0x3bc0>
   14928:	mov	sl, #1
   1492c:	mov	r2, r3
   14930:	mov	r9, #1024	; 0x400
   14934:	b	148bc <__assert_fail@plt+0x3a30>
   14938:	ldr	r3, [pc, #268]	; 14a4c <__assert_fail@plt+0x3bc0>
   1493c:	mov	sl, #1
   14940:	mov	r2, r3
   14944:	mov	r9, #1024	; 0x400
   14948:	b	146fc <__assert_fail@plt+0x3870>
   1494c:	ldr	fp, [pc, #248]	; 14a4c <__assert_fail@plt+0x3bc0>
   14950:	mov	sl, #1
   14954:	mov	r9, #1024	; 0x400
   14958:	b	145ec <__assert_fail@plt+0x3760>
   1495c:	ldr	r3, [pc, #232]	; 14a4c <__assert_fail@plt+0x3bc0>
   14960:	mov	sl, #1
   14964:	mov	r2, r3
   14968:	mov	r9, #1024	; 0x400
   1496c:	b	14858 <__assert_fail@plt+0x39cc>
   14970:	ldr	r0, [pc, #212]	; 14a4c <__assert_fail@plt+0x3bc0>
   14974:	mov	sl, #1
   14978:	mov	r9, #1024	; 0x400
   1497c:	b	147c0 <__assert_fail@plt+0x3934>
   14980:	ldr	r3, [pc, #196]	; 14a4c <__assert_fail@plt+0x3bc0>
   14984:	mov	sl, #1
   14988:	mov	r2, r3
   1498c:	mov	r9, #1024	; 0x400
   14990:	b	147f4 <__assert_fail@plt+0x3968>
   14994:	ldr	r3, [pc, #176]	; 14a4c <__assert_fail@plt+0x3bc0>
   14998:	mov	sl, #1
   1499c:	mov	r2, r3
   149a0:	mov	r9, #1024	; 0x400
   149a4:	b	14698 <__assert_fail@plt+0x380c>
   149a8:	mov	sl, #1
   149ac:	b	1461c <__assert_fail@plt+0x3790>
   149b0:	mov	r3, r4
   149b4:	ldr	r4, [sp, #8]
   149b8:	ldr	r6, [sp, #12]
   149bc:	orr	r4, r4, r3
   149c0:	b	1461c <__assert_fail@plt+0x3790>
   149c4:	mov	r4, #1
   149c8:	mvn	r5, #-2147483648	; 0x80000000
   149cc:	b	148f4 <__assert_fail@plt+0x3a68>
   149d0:	mov	r4, #1
   149d4:	mvn	r5, #-2147483648	; 0x80000000
   149d8:	b	146d0 <__assert_fail@plt+0x3844>
   149dc:	mov	r4, #1
   149e0:	mvn	r5, #-2147483648	; 0x80000000
   149e4:	b	14890 <__assert_fail@plt+0x3a04>
   149e8:	mov	r4, #1
   149ec:	mvn	r5, #-2147483648	; 0x80000000
   149f0:	b	14798 <__assert_fail@plt+0x390c>
   149f4:	mov	r4, #1
   149f8:	mvn	r5, #-2147483648	; 0x80000000
   149fc:	b	1482c <__assert_fail@plt+0x39a0>
   14a00:	mov	r4, #1
   14a04:	mvn	r5, #-2147483648	; 0x80000000
   14a08:	b	14734 <__assert_fail@plt+0x38a8>
   14a0c:	mov	sl, #2
   14a10:	mov	r9, #1000	; 0x3e8
   14a14:	b	144f4 <__assert_fail@plt+0x3668>
   14a18:	ldrb	r2, [r8, #2]
   14a1c:	mov	r9, #1024	; 0x400
   14a20:	cmp	r2, #66	; 0x42
   14a24:	movne	sl, #1
   14a28:	moveq	sl, #3
   14a2c:	b	144f4 <__assert_fail@plt+0x3668>
   14a30:	ldr	r3, [pc, #24]	; 14a50 <__assert_fail@plt+0x3bc4>
   14a34:	mov	r2, #96	; 0x60
   14a38:	ldr	r1, [pc, #20]	; 14a54 <__assert_fail@plt+0x3bc8>
   14a3c:	ldr	r0, [pc, #20]	; 14a58 <__assert_fail@plt+0x3bcc>
   14a40:	bl	10e8c <__assert_fail@plt>
   14a44:	bl	10ce8 <__stack_chk_fail@plt>
   14a48:	andeq	r5, r2, r8, lsl #30
   14a4c:			; <UNDEFINED> instruction: 0xffe00000
   14a50:	andeq	r5, r1, r0, lsr #24
   14a54:	andeq	r5, r1, r8, lsr #24
   14a58:	andeq	r5, r1, r8, lsr ip
   14a5c:	push	{r4, r5, r6, r7, r8, lr}
   14a60:	subs	r7, r0, #0
   14a64:	ldr	r5, [pc, #108]	; 14ad8 <__assert_fail@plt+0x3c4c>
   14a68:	sub	sp, sp, #8
   14a6c:	mov	r8, r1
   14a70:	ldr	r1, [r5]
   14a74:	moveq	r7, sp
   14a78:	str	r1, [sp, #4]
   14a7c:	mov	r0, r7
   14a80:	mov	r1, r8
   14a84:	mov	r6, r2
   14a88:	bl	10d54 <mbrtowc@plt>
   14a8c:	cmp	r6, #0
   14a90:	cmnne	r0, #3
   14a94:	mov	r4, r0
   14a98:	bhi	14ab8 <__assert_fail@plt+0x3c2c>
   14a9c:	ldr	r2, [sp, #4]
   14aa0:	ldr	r3, [r5]
   14aa4:	mov	r0, r4
   14aa8:	cmp	r2, r3
   14aac:	bne	14ad4 <__assert_fail@plt+0x3c48>
   14ab0:	add	sp, sp, #8
   14ab4:	pop	{r4, r5, r6, r7, r8, pc}
   14ab8:	mov	r0, #0
   14abc:	bl	14b50 <__assert_fail@plt+0x3cc4>
   14ac0:	cmp	r0, #0
   14ac4:	moveq	r4, #1
   14ac8:	ldrbeq	r3, [r8]
   14acc:	streq	r3, [r7]
   14ad0:	b	14a9c <__assert_fail@plt+0x3c10>
   14ad4:	bl	10ce8 <__stack_chk_fail@plt>
   14ad8:	andeq	r5, r2, r8, lsl #30
   14adc:	push	{r4, r5, r6, lr}
   14ae0:	mov	r4, r0
   14ae4:	bl	10d48 <__fpending@plt>
   14ae8:	ldr	r5, [r4]
   14aec:	and	r5, r5, #32
   14af0:	mov	r6, r0
   14af4:	mov	r0, r4
   14af8:	bl	14bd0 <__assert_fail@plt+0x3d44>
   14afc:	cmp	r5, #0
   14b00:	mov	r4, r0
   14b04:	bne	14b30 <__assert_fail@plt+0x3ca4>
   14b08:	cmp	r0, #0
   14b0c:	beq	14b28 <__assert_fail@plt+0x3c9c>
   14b10:	cmp	r6, #0
   14b14:	bne	14b48 <__assert_fail@plt+0x3cbc>
   14b18:	bl	10de4 <__errno_location@plt>
   14b1c:	ldr	r4, [r0]
   14b20:	subs	r4, r4, #9
   14b24:	mvnne	r4, #0
   14b28:	mov	r0, r4
   14b2c:	pop	{r4, r5, r6, pc}
   14b30:	cmp	r0, #0
   14b34:	bne	14b48 <__assert_fail@plt+0x3cbc>
   14b38:	bl	10de4 <__errno_location@plt>
   14b3c:	str	r4, [r0]
   14b40:	mvn	r4, #0
   14b44:	b	14b28 <__assert_fail@plt+0x3c9c>
   14b48:	mvn	r4, #0
   14b4c:	b	14b28 <__assert_fail@plt+0x3c9c>
   14b50:	push	{r4, lr}
   14b54:	mov	r1, #0
   14b58:	bl	10e44 <setlocale@plt>
   14b5c:	subs	r4, r0, #0
   14b60:	beq	14b8c <__assert_fail@plt+0x3d00>
   14b64:	ldr	r1, [pc, #40]	; 14b94 <__assert_fail@plt+0x3d08>
   14b68:	bl	10c70 <strcmp@plt>
   14b6c:	cmp	r0, #0
   14b70:	popeq	{r4, pc}
   14b74:	mov	r0, r4
   14b78:	ldr	r1, [pc, #24]	; 14b98 <__assert_fail@plt+0x3d0c>
   14b7c:	bl	10c70 <strcmp@plt>
   14b80:	adds	r0, r0, #0
   14b84:	movne	r0, #1
   14b88:	pop	{r4, pc}
   14b8c:	mov	r0, #1
   14b90:	pop	{r4, pc}
   14b94:	andeq	r5, r1, r0, ror #24
   14b98:	andeq	r5, r1, r4, ror #24
   14b9c:	push	{r4, lr}
   14ba0:	mov	r0, #14
   14ba4:	bl	10e5c <nl_langinfo@plt>
   14ba8:	cmp	r0, #0
   14bac:	beq	14bc4 <__assert_fail@plt+0x3d38>
   14bb0:	ldrb	r2, [r0]
   14bb4:	ldr	r3, [pc, #16]	; 14bcc <__assert_fail@plt+0x3d40>
   14bb8:	cmp	r2, #0
   14bbc:	moveq	r0, r3
   14bc0:	pop	{r4, pc}
   14bc4:	ldr	r0, [pc]	; 14bcc <__assert_fail@plt+0x3d40>
   14bc8:	pop	{r4, pc}
   14bcc:	andeq	r5, r1, ip, ror #24
   14bd0:	push	{r4, r5, lr}
   14bd4:	sub	sp, sp, #12
   14bd8:	mov	r4, r0
   14bdc:	bl	10e14 <fileno@plt>
   14be0:	cmp	r0, #0
   14be4:	mov	r0, r4
   14be8:	blt	14c64 <__assert_fail@plt+0x3dd8>
   14bec:	bl	10d90 <__freading@plt>
   14bf0:	cmp	r0, #0
   14bf4:	bne	14c30 <__assert_fail@plt+0x3da4>
   14bf8:	mov	r0, r4
   14bfc:	bl	14c70 <__assert_fail@plt+0x3de4>
   14c00:	cmp	r0, #0
   14c04:	beq	14c60 <__assert_fail@plt+0x3dd4>
   14c08:	bl	10de4 <__errno_location@plt>
   14c0c:	mov	r5, r0
   14c10:	mov	r0, r4
   14c14:	ldr	r4, [r5]
   14c18:	bl	10e2c <fclose@plt>
   14c1c:	cmp	r4, #0
   14c20:	mvnne	r0, #0
   14c24:	strne	r4, [r5]
   14c28:	add	sp, sp, #12
   14c2c:	pop	{r4, r5, pc}
   14c30:	mov	r0, r4
   14c34:	bl	10e14 <fileno@plt>
   14c38:	mov	r3, #1
   14c3c:	str	r3, [sp]
   14c40:	mov	r2, #0
   14c44:	mov	r3, #0
   14c48:	bl	10d30 <lseek64@plt>
   14c4c:	mvn	r3, #0
   14c50:	mvn	r2, #0
   14c54:	cmp	r1, r3
   14c58:	cmpeq	r0, r2
   14c5c:	bne	14bf8 <__assert_fail@plt+0x3d6c>
   14c60:	mov	r0, r4
   14c64:	add	sp, sp, #12
   14c68:	pop	{r4, r5, lr}
   14c6c:	b	10e2c <fclose@plt>
   14c70:	push	{r4, lr}
   14c74:	subs	r4, r0, #0
   14c78:	sub	sp, sp, #8
   14c7c:	beq	14c98 <__assert_fail@plt+0x3e0c>
   14c80:	bl	10d90 <__freading@plt>
   14c84:	cmp	r0, #0
   14c88:	beq	14c98 <__assert_fail@plt+0x3e0c>
   14c8c:	ldr	r3, [r4]
   14c90:	tst	r3, #256	; 0x100
   14c94:	bne	14ca8 <__assert_fail@plt+0x3e1c>
   14c98:	mov	r0, r4
   14c9c:	add	sp, sp, #8
   14ca0:	pop	{r4, lr}
   14ca4:	b	10c88 <fflush@plt>
   14ca8:	mov	r3, #1
   14cac:	str	r3, [sp]
   14cb0:	mov	r2, #0
   14cb4:	mov	r3, #0
   14cb8:	mov	r0, r4
   14cbc:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14cc0:	mov	r0, r4
   14cc4:	add	sp, sp, #8
   14cc8:	pop	{r4, lr}
   14ccc:	b	10c88 <fflush@plt>
   14cd0:	push	{r4, r5, r6, r7, r8, lr}
   14cd4:	sub	sp, sp, #8
   14cd8:	ldmib	r0, {ip, lr}
   14cdc:	mov	r4, r0
   14ce0:	ldr	r5, [sp, #32]
   14ce4:	cmp	lr, ip
   14ce8:	beq	14d00 <__assert_fail@plt+0x3e74>
   14cec:	str	r5, [sp, #32]
   14cf0:	mov	r0, r4
   14cf4:	add	sp, sp, #8
   14cf8:	pop	{r4, r5, r6, r7, r8, lr}
   14cfc:	b	10e38 <fseeko64@plt>
   14d00:	ldr	lr, [r0, #20]
   14d04:	ldr	ip, [r0, #16]
   14d08:	cmp	lr, ip
   14d0c:	bne	14cec <__assert_fail@plt+0x3e60>
   14d10:	ldr	r8, [r0, #36]	; 0x24
   14d14:	cmp	r8, #0
   14d18:	bne	14cec <__assert_fail@plt+0x3e60>
   14d1c:	mov	r6, r2
   14d20:	mov	r7, r3
   14d24:	bl	10e14 <fileno@plt>
   14d28:	mov	r2, r6
   14d2c:	mov	r3, r7
   14d30:	str	r5, [sp]
   14d34:	bl	10d30 <lseek64@plt>
   14d38:	mvn	r3, #0
   14d3c:	mvn	r2, #0
   14d40:	cmp	r1, r3
   14d44:	cmpeq	r0, r2
   14d48:	beq	14d68 <__assert_fail@plt+0x3edc>
   14d4c:	ldr	r3, [r4]
   14d50:	strd	r0, [r4, #80]	; 0x50
   14d54:	mov	r0, r8
   14d58:	bic	r3, r3, #16
   14d5c:	str	r3, [r4]
   14d60:	add	sp, sp, #8
   14d64:	pop	{r4, r5, r6, r7, r8, pc}
   14d68:	mvn	r0, #0
   14d6c:	b	14d60 <__assert_fail@plt+0x3ed4>
   14d70:	subs	r2, r1, #1
   14d74:	bxeq	lr
   14d78:	bcc	14f50 <__assert_fail@plt+0x40c4>
   14d7c:	cmp	r0, r1
   14d80:	bls	14f34 <__assert_fail@plt+0x40a8>
   14d84:	tst	r1, r2
   14d88:	beq	14f40 <__assert_fail@plt+0x40b4>
   14d8c:	clz	r3, r0
   14d90:	clz	r2, r1
   14d94:	sub	r3, r2, r3
   14d98:	rsbs	r3, r3, #31
   14d9c:	addne	r3, r3, r3, lsl #1
   14da0:	mov	r2, #0
   14da4:	addne	pc, pc, r3, lsl #2
   14da8:	nop			; (mov r0, r0)
   14dac:	cmp	r0, r1, lsl #31
   14db0:	adc	r2, r2, r2
   14db4:	subcs	r0, r0, r1, lsl #31
   14db8:	cmp	r0, r1, lsl #30
   14dbc:	adc	r2, r2, r2
   14dc0:	subcs	r0, r0, r1, lsl #30
   14dc4:	cmp	r0, r1, lsl #29
   14dc8:	adc	r2, r2, r2
   14dcc:	subcs	r0, r0, r1, lsl #29
   14dd0:	cmp	r0, r1, lsl #28
   14dd4:	adc	r2, r2, r2
   14dd8:	subcs	r0, r0, r1, lsl #28
   14ddc:	cmp	r0, r1, lsl #27
   14de0:	adc	r2, r2, r2
   14de4:	subcs	r0, r0, r1, lsl #27
   14de8:	cmp	r0, r1, lsl #26
   14dec:	adc	r2, r2, r2
   14df0:	subcs	r0, r0, r1, lsl #26
   14df4:	cmp	r0, r1, lsl #25
   14df8:	adc	r2, r2, r2
   14dfc:	subcs	r0, r0, r1, lsl #25
   14e00:	cmp	r0, r1, lsl #24
   14e04:	adc	r2, r2, r2
   14e08:	subcs	r0, r0, r1, lsl #24
   14e0c:	cmp	r0, r1, lsl #23
   14e10:	adc	r2, r2, r2
   14e14:	subcs	r0, r0, r1, lsl #23
   14e18:	cmp	r0, r1, lsl #22
   14e1c:	adc	r2, r2, r2
   14e20:	subcs	r0, r0, r1, lsl #22
   14e24:	cmp	r0, r1, lsl #21
   14e28:	adc	r2, r2, r2
   14e2c:	subcs	r0, r0, r1, lsl #21
   14e30:	cmp	r0, r1, lsl #20
   14e34:	adc	r2, r2, r2
   14e38:	subcs	r0, r0, r1, lsl #20
   14e3c:	cmp	r0, r1, lsl #19
   14e40:	adc	r2, r2, r2
   14e44:	subcs	r0, r0, r1, lsl #19
   14e48:	cmp	r0, r1, lsl #18
   14e4c:	adc	r2, r2, r2
   14e50:	subcs	r0, r0, r1, lsl #18
   14e54:	cmp	r0, r1, lsl #17
   14e58:	adc	r2, r2, r2
   14e5c:	subcs	r0, r0, r1, lsl #17
   14e60:	cmp	r0, r1, lsl #16
   14e64:	adc	r2, r2, r2
   14e68:	subcs	r0, r0, r1, lsl #16
   14e6c:	cmp	r0, r1, lsl #15
   14e70:	adc	r2, r2, r2
   14e74:	subcs	r0, r0, r1, lsl #15
   14e78:	cmp	r0, r1, lsl #14
   14e7c:	adc	r2, r2, r2
   14e80:	subcs	r0, r0, r1, lsl #14
   14e84:	cmp	r0, r1, lsl #13
   14e88:	adc	r2, r2, r2
   14e8c:	subcs	r0, r0, r1, lsl #13
   14e90:	cmp	r0, r1, lsl #12
   14e94:	adc	r2, r2, r2
   14e98:	subcs	r0, r0, r1, lsl #12
   14e9c:	cmp	r0, r1, lsl #11
   14ea0:	adc	r2, r2, r2
   14ea4:	subcs	r0, r0, r1, lsl #11
   14ea8:	cmp	r0, r1, lsl #10
   14eac:	adc	r2, r2, r2
   14eb0:	subcs	r0, r0, r1, lsl #10
   14eb4:	cmp	r0, r1, lsl #9
   14eb8:	adc	r2, r2, r2
   14ebc:	subcs	r0, r0, r1, lsl #9
   14ec0:	cmp	r0, r1, lsl #8
   14ec4:	adc	r2, r2, r2
   14ec8:	subcs	r0, r0, r1, lsl #8
   14ecc:	cmp	r0, r1, lsl #7
   14ed0:	adc	r2, r2, r2
   14ed4:	subcs	r0, r0, r1, lsl #7
   14ed8:	cmp	r0, r1, lsl #6
   14edc:	adc	r2, r2, r2
   14ee0:	subcs	r0, r0, r1, lsl #6
   14ee4:	cmp	r0, r1, lsl #5
   14ee8:	adc	r2, r2, r2
   14eec:	subcs	r0, r0, r1, lsl #5
   14ef0:	cmp	r0, r1, lsl #4
   14ef4:	adc	r2, r2, r2
   14ef8:	subcs	r0, r0, r1, lsl #4
   14efc:	cmp	r0, r1, lsl #3
   14f00:	adc	r2, r2, r2
   14f04:	subcs	r0, r0, r1, lsl #3
   14f08:	cmp	r0, r1, lsl #2
   14f0c:	adc	r2, r2, r2
   14f10:	subcs	r0, r0, r1, lsl #2
   14f14:	cmp	r0, r1, lsl #1
   14f18:	adc	r2, r2, r2
   14f1c:	subcs	r0, r0, r1, lsl #1
   14f20:	cmp	r0, r1
   14f24:	adc	r2, r2, r2
   14f28:	subcs	r0, r0, r1
   14f2c:	mov	r0, r2
   14f30:	bx	lr
   14f34:	moveq	r0, #1
   14f38:	movne	r0, #0
   14f3c:	bx	lr
   14f40:	clz	r2, r1
   14f44:	rsb	r2, r2, #31
   14f48:	lsr	r0, r0, r2
   14f4c:	bx	lr
   14f50:	cmp	r0, #0
   14f54:	mvnne	r0, #0
   14f58:	b	151bc <__assert_fail@plt+0x4330>
   14f5c:	cmp	r1, #0
   14f60:	beq	14f50 <__assert_fail@plt+0x40c4>
   14f64:	push	{r0, r1, lr}
   14f68:	bl	14d70 <__assert_fail@plt+0x3ee4>
   14f6c:	pop	{r1, r2, lr}
   14f70:	mul	r3, r2, r0
   14f74:	sub	r1, r1, r3
   14f78:	bx	lr
   14f7c:	cmp	r1, #0
   14f80:	beq	1518c <__assert_fail@plt+0x4300>
   14f84:	eor	ip, r0, r1
   14f88:	rsbmi	r1, r1, #0
   14f8c:	subs	r2, r1, #1
   14f90:	beq	15158 <__assert_fail@plt+0x42cc>
   14f94:	movs	r3, r0
   14f98:	rsbmi	r3, r0, #0
   14f9c:	cmp	r3, r1
   14fa0:	bls	15164 <__assert_fail@plt+0x42d8>
   14fa4:	tst	r1, r2
   14fa8:	beq	15174 <__assert_fail@plt+0x42e8>
   14fac:	clz	r2, r3
   14fb0:	clz	r0, r1
   14fb4:	sub	r2, r0, r2
   14fb8:	rsbs	r2, r2, #31
   14fbc:	addne	r2, r2, r2, lsl #1
   14fc0:	mov	r0, #0
   14fc4:	addne	pc, pc, r2, lsl #2
   14fc8:	nop			; (mov r0, r0)
   14fcc:	cmp	r3, r1, lsl #31
   14fd0:	adc	r0, r0, r0
   14fd4:	subcs	r3, r3, r1, lsl #31
   14fd8:	cmp	r3, r1, lsl #30
   14fdc:	adc	r0, r0, r0
   14fe0:	subcs	r3, r3, r1, lsl #30
   14fe4:	cmp	r3, r1, lsl #29
   14fe8:	adc	r0, r0, r0
   14fec:	subcs	r3, r3, r1, lsl #29
   14ff0:	cmp	r3, r1, lsl #28
   14ff4:	adc	r0, r0, r0
   14ff8:	subcs	r3, r3, r1, lsl #28
   14ffc:	cmp	r3, r1, lsl #27
   15000:	adc	r0, r0, r0
   15004:	subcs	r3, r3, r1, lsl #27
   15008:	cmp	r3, r1, lsl #26
   1500c:	adc	r0, r0, r0
   15010:	subcs	r3, r3, r1, lsl #26
   15014:	cmp	r3, r1, lsl #25
   15018:	adc	r0, r0, r0
   1501c:	subcs	r3, r3, r1, lsl #25
   15020:	cmp	r3, r1, lsl #24
   15024:	adc	r0, r0, r0
   15028:	subcs	r3, r3, r1, lsl #24
   1502c:	cmp	r3, r1, lsl #23
   15030:	adc	r0, r0, r0
   15034:	subcs	r3, r3, r1, lsl #23
   15038:	cmp	r3, r1, lsl #22
   1503c:	adc	r0, r0, r0
   15040:	subcs	r3, r3, r1, lsl #22
   15044:	cmp	r3, r1, lsl #21
   15048:	adc	r0, r0, r0
   1504c:	subcs	r3, r3, r1, lsl #21
   15050:	cmp	r3, r1, lsl #20
   15054:	adc	r0, r0, r0
   15058:	subcs	r3, r3, r1, lsl #20
   1505c:	cmp	r3, r1, lsl #19
   15060:	adc	r0, r0, r0
   15064:	subcs	r3, r3, r1, lsl #19
   15068:	cmp	r3, r1, lsl #18
   1506c:	adc	r0, r0, r0
   15070:	subcs	r3, r3, r1, lsl #18
   15074:	cmp	r3, r1, lsl #17
   15078:	adc	r0, r0, r0
   1507c:	subcs	r3, r3, r1, lsl #17
   15080:	cmp	r3, r1, lsl #16
   15084:	adc	r0, r0, r0
   15088:	subcs	r3, r3, r1, lsl #16
   1508c:	cmp	r3, r1, lsl #15
   15090:	adc	r0, r0, r0
   15094:	subcs	r3, r3, r1, lsl #15
   15098:	cmp	r3, r1, lsl #14
   1509c:	adc	r0, r0, r0
   150a0:	subcs	r3, r3, r1, lsl #14
   150a4:	cmp	r3, r1, lsl #13
   150a8:	adc	r0, r0, r0
   150ac:	subcs	r3, r3, r1, lsl #13
   150b0:	cmp	r3, r1, lsl #12
   150b4:	adc	r0, r0, r0
   150b8:	subcs	r3, r3, r1, lsl #12
   150bc:	cmp	r3, r1, lsl #11
   150c0:	adc	r0, r0, r0
   150c4:	subcs	r3, r3, r1, lsl #11
   150c8:	cmp	r3, r1, lsl #10
   150cc:	adc	r0, r0, r0
   150d0:	subcs	r3, r3, r1, lsl #10
   150d4:	cmp	r3, r1, lsl #9
   150d8:	adc	r0, r0, r0
   150dc:	subcs	r3, r3, r1, lsl #9
   150e0:	cmp	r3, r1, lsl #8
   150e4:	adc	r0, r0, r0
   150e8:	subcs	r3, r3, r1, lsl #8
   150ec:	cmp	r3, r1, lsl #7
   150f0:	adc	r0, r0, r0
   150f4:	subcs	r3, r3, r1, lsl #7
   150f8:	cmp	r3, r1, lsl #6
   150fc:	adc	r0, r0, r0
   15100:	subcs	r3, r3, r1, lsl #6
   15104:	cmp	r3, r1, lsl #5
   15108:	adc	r0, r0, r0
   1510c:	subcs	r3, r3, r1, lsl #5
   15110:	cmp	r3, r1, lsl #4
   15114:	adc	r0, r0, r0
   15118:	subcs	r3, r3, r1, lsl #4
   1511c:	cmp	r3, r1, lsl #3
   15120:	adc	r0, r0, r0
   15124:	subcs	r3, r3, r1, lsl #3
   15128:	cmp	r3, r1, lsl #2
   1512c:	adc	r0, r0, r0
   15130:	subcs	r3, r3, r1, lsl #2
   15134:	cmp	r3, r1, lsl #1
   15138:	adc	r0, r0, r0
   1513c:	subcs	r3, r3, r1, lsl #1
   15140:	cmp	r3, r1
   15144:	adc	r0, r0, r0
   15148:	subcs	r3, r3, r1
   1514c:	cmp	ip, #0
   15150:	rsbmi	r0, r0, #0
   15154:	bx	lr
   15158:	teq	ip, r0
   1515c:	rsbmi	r0, r0, #0
   15160:	bx	lr
   15164:	movcc	r0, #0
   15168:	asreq	r0, ip, #31
   1516c:	orreq	r0, r0, #1
   15170:	bx	lr
   15174:	clz	r2, r1
   15178:	rsb	r2, r2, #31
   1517c:	cmp	ip, #0
   15180:	lsr	r0, r3, r2
   15184:	rsbmi	r0, r0, #0
   15188:	bx	lr
   1518c:	cmp	r0, #0
   15190:	mvngt	r0, #-2147483648	; 0x80000000
   15194:	movlt	r0, #-2147483648	; 0x80000000
   15198:	b	151bc <__assert_fail@plt+0x4330>
   1519c:	cmp	r1, #0
   151a0:	beq	1518c <__assert_fail@plt+0x4300>
   151a4:	push	{r0, r1, lr}
   151a8:	bl	14f84 <__assert_fail@plt+0x40f8>
   151ac:	pop	{r1, r2, lr}
   151b0:	mul	r3, r2, r0
   151b4:	sub	r1, r1, r3
   151b8:	bx	lr
   151bc:	push	{r1, lr}
   151c0:	mov	r0, #8
   151c4:	bl	10c64 <raise@plt>
   151c8:	pop	{r1, pc}
   151cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151d0:	mov	r7, r0
   151d4:	ldr	r6, [pc, #72]	; 15224 <__assert_fail@plt+0x4398>
   151d8:	ldr	r5, [pc, #72]	; 15228 <__assert_fail@plt+0x439c>
   151dc:	add	r6, pc, r6
   151e0:	add	r5, pc, r5
   151e4:	sub	r6, r6, r5
   151e8:	mov	r8, r1
   151ec:	mov	r9, r2
   151f0:	bl	10c2c <calloc@plt-0x20>
   151f4:	asrs	r6, r6, #2
   151f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   151fc:	mov	r4, #0
   15200:	add	r4, r4, #1
   15204:	ldr	r3, [r5], #4
   15208:	mov	r2, r9
   1520c:	mov	r1, r8
   15210:	mov	r0, r7
   15214:	blx	r3
   15218:	cmp	r6, r4
   1521c:	bne	15200 <__assert_fail@plt+0x4374>
   15220:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15224:	andeq	r0, r1, r0, lsr #26
   15228:	andeq	r0, r1, r8, lsl sp
   1522c:	bx	lr
   15230:	ldr	r3, [pc, #12]	; 15244 <__assert_fail@plt+0x43b8>
   15234:	mov	r1, #0
   15238:	add	r3, pc, r3
   1523c:	ldr	r2, [r3]
   15240:	b	10df0 <__cxa_atexit@plt>
   15244:	muleq	r1, r8, lr

Disassembly of section .fini:

00015248 <.fini>:
   15248:	push	{r3, lr}
   1524c:	pop	{r3, pc}
