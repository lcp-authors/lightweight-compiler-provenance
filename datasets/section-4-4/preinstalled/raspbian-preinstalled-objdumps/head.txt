
raspbian-preinstalled/head:     file format elf32-littlearm


Disassembly of section .init:

00010cf8 <.init>:
   10cf8:	push	{r3, lr}
   10cfc:	bl	120ac <__assert_fail@plt+0x1118>
   10d00:	pop	{r3, pc}

Disassembly of section .plt:

00010d04 <calloc@plt-0x14>:
   10d04:	push	{lr}		; (str lr, [sp, #-4]!)
   10d08:	ldr	lr, [pc, #4]	; 10d14 <calloc@plt-0x4>
   10d0c:	add	lr, pc, lr
   10d10:	ldr	pc, [lr, #8]!
   10d14:	andeq	r7, r1, ip, ror #5

00010d18 <calloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #748]!	; 0x2ec

00010d24 <fputs_unlocked@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d30 <raise@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #732]!	; 0x2dc

00010d3c <strcmp@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #724]!	; 0x2d4

00010d48 <read@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #716]!	; 0x2cc

00010d54 <fflush@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d60 <free@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #700]!	; 0x2bc

00010d6c <_exit@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #692]!	; 0x2b4

00010d78 <memcpy@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #684]!	; 0x2ac

00010d84 <__strtoull_internal@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #676]!	; 0x2a4

00010d90 <mbsinit@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #668]!	; 0x29c

00010d9c <fwrite_unlocked@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #660]!	; 0x294

00010da8 <memcmp@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #652]!	; 0x28c

00010db4 <dcgettext@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #644]!	; 0x284

00010dc0 <__stack_chk_fail@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #636]!	; 0x27c

00010dcc <realloc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #628]!	; 0x274

00010dd8 <textdomain@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #620]!	; 0x26c

00010de4 <iswprint@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #612]!	; 0x264

00010df0 <__fxstat64@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #604]!	; 0x25c

00010dfc <fwrite@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #596]!	; 0x254

00010e08 <lseek64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #588]!	; 0x24c

00010e14 <__ctype_get_mb_cur_max@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #580]!	; 0x244

00010e20 <__fpending@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #572]!	; 0x23c

00010e2c <mbrtowc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #564]!	; 0x234

00010e38 <error@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #556]!	; 0x22c

00010e44 <open64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #548]!	; 0x224

00010e50 <malloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #540]!	; 0x21c

00010e5c <__libc_start_main@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #532]!	; 0x214

00010e68 <__freading@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #524]!	; 0x20c

00010e74 <__gmon_start__@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #516]!	; 0x204

00010e80 <getopt_long@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #508]!	; 0x1fc

00010e8c <__ctype_b_loc@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #500]!	; 0x1f4

00010e98 <exit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #492]!	; 0x1ec

00010ea4 <strlen@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #484]!	; 0x1e4

00010eb0 <strchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ebc <memrchr@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec8 <__errno_location@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ed4 <__cxa_atexit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #452]!	; 0x1c4

00010ee0 <memset@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eec <__printf_chk@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef8 <fileno@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #428]!	; 0x1ac

00010f04 <__fprintf_chk@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f10 <memchr@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #412]!	; 0x19c

00010f1c <fclose@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #404]!	; 0x194

00010f28 <fseeko64@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #396]!	; 0x18c

00010f34 <setlocale@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #388]!	; 0x184

00010f40 <strrchr@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #380]!	; 0x17c

00010f4c <nl_langinfo@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #372]!	; 0x174

00010f58 <clearerr_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #364]!	; 0x16c

00010f64 <bindtextdomain@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #356]!	; 0x164

00010f70 <strncmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #348]!	; 0x15c

00010f7c <abort@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #340]!	; 0x154

00010f88 <close@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #332]!	; 0x14c

00010f94 <__assert_fail@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #324]!	; 0x144

Disassembly of section .text:

00010fa0 <.text>:
   10fa0:	ldr	r3, [pc, #4056]	; 11f80 <__assert_fail@plt+0xfec>
   10fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fa8:	sub	sp, sp, #276	; 0x114
   10fac:	ldr	r3, [r3]
   10fb0:	mov	r7, r0
   10fb4:	ldr	r0, [r1]
   10fb8:	str	r3, [sp, #268]	; 0x10c
   10fbc:	mov	r6, r1
   10fc0:	bl	130d0 <__assert_fail@plt+0x213c>
   10fc4:	ldr	r1, [pc, #4024]	; 11f84 <__assert_fail@plt+0xff0>
   10fc8:	mov	r0, #6
   10fcc:	bl	10f34 <setlocale@plt>
   10fd0:	ldr	r1, [pc, #4016]	; 11f88 <__assert_fail@plt+0xff4>
   10fd4:	ldr	r0, [pc, #4016]	; 11f8c <__assert_fail@plt+0xff8>
   10fd8:	bl	10f64 <bindtextdomain@plt>
   10fdc:	ldr	r0, [pc, #4008]	; 11f8c <__assert_fail@plt+0xff8>
   10fe0:	bl	10dd8 <textdomain@plt>
   10fe4:	ldr	r0, [pc, #4004]	; 11f90 <__assert_fail@plt+0xffc>
   10fe8:	bl	16ec0 <__assert_fail@plt+0x5f2c>
   10fec:	ldr	r2, [pc, #4000]	; 11f94 <__assert_fail@plt+0x1000>
   10ff0:	mov	r5, #0
   10ff4:	mov	r3, #10
   10ff8:	cmp	r7, #1
   10ffc:	strb	r3, [r2]
   11000:	strb	r5, [r2, #1]
   11004:	strb	r5, [r2, #2]
   11008:	ble	1101c <__assert_fail@plt+0x88>
   1100c:	ldr	r1, [r6, #4]
   11010:	ldrb	r3, [r1]
   11014:	cmp	r3, #45	; 0x2d
   11018:	beq	111a4 <__assert_fail@plt+0x210>
   1101c:	mov	r3, #1
   11020:	str	r3, [sp, #36]	; 0x24
   11024:	mov	r2, #10
   11028:	mov	r3, #0
   1102c:	strd	r2, [sp, #16]
   11030:	ldr	r9, [pc, #3936]	; 11f98 <__assert_fail@plt+0x1004>
   11034:	ldr	r8, [pc, #3936]	; 11f9c <__assert_fail@plt+0x1008>
   11038:	ldr	sl, [pc, #3936]	; 11fa0 <__assert_fail@plt+0x100c>
   1103c:	mov	r3, #0
   11040:	str	r3, [sp, #32]
   11044:	mov	r4, #0
   11048:	str	r4, [sp]
   1104c:	mov	r3, r9
   11050:	mov	r2, r8
   11054:	mov	r1, r6
   11058:	mov	r0, r7
   1105c:	bl	10e80 <getopt_long@plt>
   11060:	cmn	r0, #1
   11064:	beq	112e0 <__assert_fail@plt+0x34c>
   11068:	cmp	r0, #110	; 0x6e
   1106c:	beq	11130 <__assert_fail@plt+0x19c>
   11070:	ble	11094 <__assert_fail@plt+0x100>
   11074:	cmp	r0, #118	; 0x76
   11078:	beq	11128 <__assert_fail@plt+0x194>
   1107c:	ble	110f8 <__assert_fail@plt+0x164>
   11080:	cmp	r0, #122	; 0x7a
   11084:	bne	110e0 <__assert_fail@plt+0x14c>
   11088:	ldr	r3, [pc, #3844]	; 11f94 <__assert_fail@plt+0x1000>
   1108c:	strb	r4, [r3]
   11090:	b	11044 <__assert_fail@plt+0xb0>
   11094:	cmn	r0, #2
   11098:	beq	11f74 <__assert_fail@plt+0xfe0>
   1109c:	cmp	r0, #99	; 0x63
   110a0:	bne	11108 <__assert_fail@plt+0x174>
   110a4:	ldr	r3, [sl]
   110a8:	mov	r0, #0
   110ac:	ldrb	r2, [r3]
   110b0:	cmp	r2, #45	; 0x2d
   110b4:	addeq	r3, r3, #1
   110b8:	streq	r3, [sl]
   110bc:	moveq	r2, #1
   110c0:	movne	r2, #0
   110c4:	ldr	r1, [sl]
   110c8:	str	r2, [sp, #32]
   110cc:	bl	12160 <__assert_fail@plt+0x11cc>
   110d0:	mov	r3, #0
   110d4:	str	r3, [sp, #36]	; 0x24
   110d8:	strd	r0, [sp, #16]
   110dc:	b	11044 <__assert_fail@plt+0xb0>
   110e0:	cmp	r0, #256	; 0x100
   110e4:	bne	11f08 <__assert_fail@plt+0xf74>
   110e8:	ldr	r2, [pc, #3748]	; 11f94 <__assert_fail@plt+0x1000>
   110ec:	mov	r3, #1
   110f0:	strb	r3, [r2, #3]
   110f4:	b	11044 <__assert_fail@plt+0xb0>
   110f8:	cmp	r0, #113	; 0x71
   110fc:	bne	11f08 <__assert_fail@plt+0xf74>
   11100:	mov	r5, #2
   11104:	b	11044 <__assert_fail@plt+0xb0>
   11108:	cmn	r0, #3
   1110c:	mov	fp, r0
   11110:	beq	1116c <__assert_fail@plt+0x1d8>
   11114:	sub	r3, fp, #48	; 0x30
   11118:	cmp	r3, #9
   1111c:	bls	11b84 <__assert_fail@plt+0xbf0>
   11120:	mov	r0, #1
   11124:	bl	12aa4 <__assert_fail@plt+0x1b10>
   11128:	mov	r5, #1
   1112c:	b	11044 <__assert_fail@plt+0xb0>
   11130:	ldr	r3, [sl]
   11134:	mov	r0, #1
   11138:	ldrb	r2, [r3]
   1113c:	cmp	r2, #45	; 0x2d
   11140:	addeq	r3, r3, #1
   11144:	streq	r3, [sl]
   11148:	moveq	r2, #1
   1114c:	movne	r2, #0
   11150:	ldr	r1, [sl]
   11154:	str	r2, [sp, #32]
   11158:	bl	12160 <__assert_fail@plt+0x11cc>
   1115c:	mov	r3, #1
   11160:	str	r3, [sp, #36]	; 0x24
   11164:	strd	r0, [sp, #16]
   11168:	b	11044 <__assert_fail@plt+0xb0>
   1116c:	ldr	r3, [pc, #3632]	; 11fa4 <__assert_fail@plt+0x1010>
   11170:	ldr	r0, [pc, #3632]	; 11fa8 <__assert_fail@plt+0x1014>
   11174:	ldr	r1, [pc, #3632]	; 11fac <__assert_fail@plt+0x1018>
   11178:	ldr	r2, [pc, #3632]	; 11fb0 <__assert_fail@plt+0x101c>
   1117c:	str	r4, [sp, #8]
   11180:	ldr	r0, [r0]
   11184:	ldr	r3, [r3]
   11188:	str	r1, [sp, #4]
   1118c:	str	r2, [sp]
   11190:	ldr	r1, [pc, #3612]	; 11fb4 <__assert_fail@plt+0x1020>
   11194:	ldr	r2, [pc, #3612]	; 11fb8 <__assert_fail@plt+0x1024>
   11198:	bl	15808 <__assert_fail@plt+0x4874>
   1119c:	mov	r0, r4
   111a0:	bl	10e98 <exit@plt>
   111a4:	ldrb	r3, [r1, #1]
   111a8:	sub	r3, r3, #48	; 0x30
   111ac:	cmp	r3, #9
   111b0:	bhi	1101c <__assert_fail@plt+0x88>
   111b4:	add	r1, r1, #1
   111b8:	mov	r0, r1
   111bc:	ldrb	r3, [r0, #1]!
   111c0:	sub	r2, r3, #48	; 0x30
   111c4:	cmp	r2, #9
   111c8:	bls	111bc <__assert_fail@plt+0x228>
   111cc:	cmp	r3, #0
   111d0:	beq	11f60 <__assert_fail@plt+0xfcc>
   111d4:	mov	lr, #0
   111d8:	mov	ip, lr
   111dc:	mov	r5, lr
   111e0:	mov	r4, r0
   111e4:	mov	r8, #10
   111e8:	mov	r9, #1
   111ec:	sub	r2, r3, #98	; 0x62
   111f0:	cmp	r2, #24
   111f4:	ldrls	pc, [pc, r2, lsl #2]
   111f8:	b	11bac <__assert_fail@plt+0xc18>
   111fc:	ldrdeq	r1, [r1], -r4
   11200:	andeq	r1, r1, r8, asr #5
   11204:	andeq	r1, r1, ip, lsr #23
   11208:	andeq	r1, r1, ip, lsr #23
   1120c:	andeq	r1, r1, ip, lsr #23
   11210:	andeq	r1, r1, ip, lsr #23
   11214:	andeq	r1, r1, ip, lsr #23
   11218:	andeq	r1, r1, ip, lsr #23
   1121c:	andeq	r1, r1, ip, lsr #23
   11220:	ldrdeq	r1, [r1], -r4
   11224:	andeq	r1, r1, r0, asr #5
   11228:	ldrdeq	r1, [r1], -r4
   1122c:	andeq	r1, r1, ip, lsr #23
   11230:	andeq	r1, r1, ip, lsr #23
   11234:	andeq	r1, r1, ip, lsr #23
   11238:			; <UNDEFINED> instruction: 0x000112b8
   1123c:	andeq	r1, r1, ip, lsr #23
   11240:	andeq	r1, r1, ip, lsr #23
   11244:	andeq	r1, r1, ip, lsr #23
   11248:	andeq	r1, r1, ip, lsr #23
   1124c:			; <UNDEFINED> instruction: 0x000112b0
   11250:	andeq	r1, r1, ip, lsr #23
   11254:	andeq	r1, r1, ip, lsr #23
   11258:	andeq	r1, r1, ip, lsr #23
   1125c:	andeq	r1, r1, r0, ror #4
   11260:	mov	lr, #1
   11264:	mov	r8, #0
   11268:	ldrb	r3, [r4, #1]!
   1126c:	cmp	r3, #0
   11270:	bne	111ec <__assert_fail@plt+0x258>
   11274:	cmp	lr, #0
   11278:	str	r9, [sp, #36]	; 0x24
   1127c:	ldrne	r3, [pc, #3344]	; 11f94 <__assert_fail@plt+0x1000>
   11280:	strb	ip, [r0]
   11284:	strbne	r8, [r3]
   11288:	cmp	ip, #0
   1128c:	movne	r3, #0
   11290:	strbne	r3, [r0, #1]
   11294:	ldr	r0, [sp, #36]	; 0x24
   11298:	bl	12160 <__assert_fail@plt+0x11cc>
   1129c:	ldr	r3, [r6]
   112a0:	sub	r7, r7, #1
   112a4:	str	r3, [r6, #4]!
   112a8:	strd	r0, [sp, #16]
   112ac:	b	11030 <__assert_fail@plt+0x9c>
   112b0:	mov	r5, #1
   112b4:	b	11268 <__assert_fail@plt+0x2d4>
   112b8:	mov	r5, #2
   112bc:	b	11268 <__assert_fail@plt+0x2d4>
   112c0:	mov	r9, #1
   112c4:	b	11268 <__assert_fail@plt+0x2d4>
   112c8:	mov	ip, #0
   112cc:	mov	r9, ip
   112d0:	b	11268 <__assert_fail@plt+0x2d4>
   112d4:	mov	ip, r3
   112d8:	mov	r9, #0
   112dc:	b	11268 <__assert_fail@plt+0x2d4>
   112e0:	cmp	r5, #1
   112e4:	beq	114e4 <__assert_fail@plt+0x550>
   112e8:	cmp	r5, r4
   112ec:	bne	11304 <__assert_fail@plt+0x370>
   112f0:	ldr	r2, [pc, #3268]	; 11fbc <__assert_fail@plt+0x1028>
   112f4:	sub	r3, r7, #1
   112f8:	ldr	r2, [r2]
   112fc:	cmp	r3, r2
   11300:	bgt	114e4 <__assert_fail@plt+0x550>
   11304:	ldr	r3, [sp, #36]	; 0x24
   11308:	ldr	r2, [sp, #32]
   1130c:	eor	r3, r3, #1
   11310:	tst	r2, r3
   11314:	beq	11328 <__assert_fail@plt+0x394>
   11318:	ldrd	r2, [sp, #16]
   1131c:	cmp	r2, #0
   11320:	sbcs	r3, r3, #0
   11324:	blt	12034 <__assert_fail@plt+0x10a0>
   11328:	ldr	r3, [pc, #3212]	; 11fbc <__assert_fail@plt+0x1028>
   1132c:	ldr	r3, [r3]
   11330:	cmp	r3, r7
   11334:	bge	11a60 <__assert_fail@plt+0xacc>
   11338:	ldr	r8, [r6, r3, lsl #2]
   1133c:	add	r6, r6, r3, lsl #2
   11340:	cmp	r8, #0
   11344:	beq	116d4 <__assert_fail@plt+0x740>
   11348:	ldrd	r0, [sp, #16]
   1134c:	ldr	r3, [pc, #3180]	; 11fc0 <__assert_fail@plt+0x102c>
   11350:	str	r6, [sp, #44]	; 0x2c
   11354:	and	r2, r3, r0
   11358:	str	r2, [sp, #124]	; 0x7c
   1135c:	rsb	r2, r2, #8192	; 0x2000
   11360:	str	r2, [sp, #120]	; 0x78
   11364:	add	r2, r2, r0
   11368:	add	ip, r0, #8192	; 0x2000
   1136c:	lsr	r2, r2, #13
   11370:	str	r2, [sp, #84]	; 0x54
   11374:	add	r2, r2, #1
   11378:	str	r3, [sp, #60]	; 0x3c
   1137c:	lsr	r3, r2, #1
   11380:	adds	lr, r0, #8192	; 0x2000
   11384:	str	r3, [sp, #100]	; 0x64
   11388:	lsl	r3, ip, #1
   1138c:	str	lr, [sp, #88]	; 0x58
   11390:	str	r3, [sp, #116]	; 0x74
   11394:	adc	lr, r1, #0
   11398:	mov	r3, #1
   1139c:	str	ip, [sp, #112]	; 0x70
   113a0:	str	r2, [sp, #68]	; 0x44
   113a4:	str	lr, [sp, #92]	; 0x5c
   113a8:	str	r0, [sp, #96]	; 0x60
   113ac:	str	r3, [sp, #40]	; 0x28
   113b0:	mov	fp, r8
   113b4:	b	11470 <__assert_fail@plt+0x4dc>
   113b8:	ldr	ip, [pc, #3028]	; 11f94 <__assert_fail@plt+0x1000>
   113bc:	mov	r3, #1
   113c0:	mov	r2, #5
   113c4:	ldr	r1, [pc, #3064]	; 11fc4 <__assert_fail@plt+0x1030>
   113c8:	strb	r3, [ip, #1]
   113cc:	bl	10db4 <dcgettext@plt>
   113d0:	str	r4, [sp, #28]
   113d4:	mov	fp, r0
   113d8:	ldr	r3, [pc, #2996]	; 11f94 <__assert_fail@plt+0x1000>
   113dc:	ldrb	r3, [r3, #2]
   113e0:	cmp	r3, #0
   113e4:	beq	11418 <__assert_fail@plt+0x484>
   113e8:	ldr	r4, [pc, #3032]	; 11fc8 <__assert_fail@plt+0x1034>
   113ec:	ldr	r0, [pc, #3032]	; 11fcc <__assert_fail@plt+0x1038>
   113f0:	ldr	r2, [pc, #2956]	; 11f84 <__assert_fail@plt+0xff0>
   113f4:	ldrb	ip, [r4]
   113f8:	mov	r3, fp
   113fc:	ldr	r1, [pc, #3020]	; 11fd0 <__assert_fail@plt+0x103c>
   11400:	cmp	ip, #0
   11404:	moveq	r2, r0
   11408:	mov	r0, #1
   1140c:	bl	10eec <__printf_chk@plt>
   11410:	mov	r3, #0
   11414:	strb	r3, [r4]
   11418:	ldr	r3, [sp, #32]
   1141c:	cmp	r3, #0
   11420:	bne	11500 <__assert_fail@plt+0x56c>
   11424:	ldr	r3, [sp, #36]	; 0x24
   11428:	ldr	r1, [sp, #28]
   1142c:	cmp	r3, #0
   11430:	mov	r0, fp
   11434:	ldrd	r2, [sp, #16]
   11438:	beq	114f4 <__assert_fail@plt+0x560>
   1143c:	bl	123dc <__assert_fail@plt+0x1448>
   11440:	mov	r4, r0
   11444:	ldr	r3, [sp, #56]	; 0x38
   11448:	cmp	r3, #0
   1144c:	bne	11658 <__assert_fail@plt+0x6c4>
   11450:	ldr	r3, [sp, #44]	; 0x2c
   11454:	ldr	fp, [r3, #4]!
   11458:	str	r3, [sp, #44]	; 0x2c
   1145c:	ldr	r3, [sp, #40]	; 0x28
   11460:	cmp	fp, #0
   11464:	and	r3, r3, r4
   11468:	str	r3, [sp, #40]	; 0x28
   1146c:	beq	116dc <__assert_fail@plt+0x748>
   11470:	ldr	r1, [pc, #2908]	; 11fd4 <__assert_fail@plt+0x1040>
   11474:	mov	r0, fp
   11478:	bl	10d3c <strcmp@plt>
   1147c:	subs	r4, r0, #0
   11480:	str	r4, [sp, #56]	; 0x38
   11484:	beq	113b8 <__assert_fail@plt+0x424>
   11488:	mov	r1, #0
   1148c:	mov	r0, fp
   11490:	bl	10e44 <open64@plt>
   11494:	subs	r3, r0, #0
   11498:	str	r3, [sp, #28]
   1149c:	bge	113d8 <__assert_fail@plt+0x444>
   114a0:	bl	10ec8 <__errno_location@plt>
   114a4:	ldr	r1, [pc, #2860]	; 11fd8 <__assert_fail@plt+0x1044>
   114a8:	mov	r2, #5
   114ac:	mov	r4, #0
   114b0:	ldr	r5, [r0]
   114b4:	mov	r0, r4
   114b8:	bl	10db4 <dcgettext@plt>
   114bc:	mov	r1, fp
   114c0:	mov	r6, r0
   114c4:	mov	r0, #4
   114c8:	bl	1508c <__assert_fail@plt+0x40f8>
   114cc:	mov	r2, r6
   114d0:	mov	r1, r5
   114d4:	mov	r3, r0
   114d8:	mov	r0, r4
   114dc:	bl	10e38 <error@plt>
   114e0:	b	11450 <__assert_fail@plt+0x4bc>
   114e4:	ldr	r2, [pc, #2728]	; 11f94 <__assert_fail@plt+0x1000>
   114e8:	mov	r3, #1
   114ec:	strb	r3, [r2, #2]
   114f0:	b	11304 <__assert_fail@plt+0x370>
   114f4:	bl	1259c <__assert_fail@plt+0x1608>
   114f8:	mov	r4, r0
   114fc:	b	11444 <__assert_fail@plt+0x4b0>
   11500:	add	r2, sp, #128	; 0x80
   11504:	ldr	r1, [sp, #28]
   11508:	mov	r0, #3
   1150c:	bl	10df0 <__fxstat64@plt>
   11510:	cmp	r0, #0
   11514:	bne	11a6c <__assert_fail@plt+0xad8>
   11518:	ldr	r3, [pc, #2676]	; 11f94 <__assert_fail@plt+0x1000>
   1151c:	ldrb	r3, [r3, #3]
   11520:	cmp	r3, #0
   11524:	bne	11538 <__assert_fail@plt+0x5a4>
   11528:	ldr	r3, [sp, #144]	; 0x90
   1152c:	and	r3, r3, #53248	; 0xd000
   11530:	cmp	r3, #32768	; 0x8000
   11534:	beq	11ad4 <__assert_fail@plt+0xb40>
   11538:	ldr	r3, [sp, #36]	; 0x24
   1153c:	mvn	r2, #0
   11540:	cmp	r3, #0
   11544:	mvn	r3, #0
   11548:	strd	r2, [sp, #72]	; 0x48
   1154c:	bne	11724 <__assert_fail@plt+0x790>
   11550:	ldrd	r0, [sp, #88]	; 0x58
   11554:	mov	r3, #0
   11558:	mvn	r2, #0
   1155c:	cmp	r1, r3
   11560:	cmpeq	r0, r2
   11564:	ldrd	r2, [sp, #72]	; 0x48
   11568:	strd	r2, [sp, #48]	; 0x30
   1156c:	bhi	12000 <__assert_fail@plt+0x106c>
   11570:	ldr	r3, [sp, #96]	; 0x60
   11574:	cmp	r3, #1048576	; 0x100000
   11578:	bls	11cd8 <__assert_fail@plt+0xd44>
   1157c:	mov	r3, #0
   11580:	mov	r6, r3
   11584:	mov	sl, r3
   11588:	mov	r8, r3
   1158c:	mov	r9, r3
   11590:	mov	r5, #1
   11594:	str	r3, [sp, #64]	; 0x40
   11598:	str	fp, [sp, #80]	; 0x50
   1159c:	cmp	r9, #0
   115a0:	bne	11710 <__assert_fail@plt+0x77c>
   115a4:	ldr	r3, [sp, #68]	; 0x44
   115a8:	cmp	r3, #16
   115ac:	movcc	r9, r3
   115b0:	movcs	r9, #16
   115b4:	mov	r0, r8
   115b8:	lsl	r1, r9, #2
   115bc:	bl	15968 <__assert_fail@plt+0x49d4>
   115c0:	mov	fp, r6
   115c4:	mov	r6, r5
   115c8:	mov	r8, r0
   115cc:	cmp	sl, #0
   115d0:	beq	11678 <__assert_fail@plt+0x6e4>
   115d4:	ldr	r1, [r8, fp, lsl #2]
   115d8:	mov	r2, #8192	; 0x2000
   115dc:	ldr	r0, [sp, #28]
   115e0:	bl	12f34 <__assert_fail@plt+0x1fa0>
   115e4:	ldr	r3, [sp, #60]	; 0x3c
   115e8:	cmp	r0, r3
   115ec:	mov	r7, r0
   115f0:	movhi	r4, #0
   115f4:	bhi	1160c <__assert_fail@plt+0x678>
   115f8:	bl	10ec8 <__errno_location@plt>
   115fc:	ldr	r4, [r0]
   11600:	cmp	r4, #0
   11604:	bne	11e34 <__assert_fail@plt+0xea0>
   11608:	mov	r4, sl
   1160c:	mov	r1, r7
   11610:	ldr	r0, [r8, r5, lsl #2]
   11614:	bl	1229c <__assert_fail@plt+0x1308>
   11618:	ldrd	r2, [sp, #48]	; 0x30
   1161c:	ldr	sl, [sp, #32]
   11620:	adds	r2, r2, r7
   11624:	adc	r3, r3, #0
   11628:	strd	r2, [sp, #48]	; 0x30
   1162c:	add	r0, r5, #1
   11630:	ldr	r1, [sp, #68]	; 0x44
   11634:	bl	16bf4 <__assert_fail@plt+0x5c60>
   11638:	cmp	r4, #0
   1163c:	mov	r5, r1
   11640:	bne	11c68 <__assert_fail@plt+0xcd4>
   11644:	cmp	r9, r6
   11648:	mov	fp, r6
   1164c:	beq	1159c <__assert_fail@plt+0x608>
   11650:	mov	r6, r5
   11654:	b	115cc <__assert_fail@plt+0x638>
   11658:	ldr	r0, [sp, #28]
   1165c:	bl	10f88 <close@plt>
   11660:	cmp	r0, #0
   11664:	beq	11450 <__assert_fail@plt+0x4bc>
   11668:	bl	10ec8 <__errno_location@plt>
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #2404]	; 11fdc <__assert_fail@plt+0x1048>
   11674:	b	114ac <__assert_fail@plt+0x518>
   11678:	mov	r0, #8192	; 0x2000
   1167c:	bl	1590c <__assert_fail@plt+0x4978>
   11680:	mov	r2, #8192	; 0x2000
   11684:	mov	r1, r0
   11688:	str	r0, [r8, fp, lsl #2]
   1168c:	ldr	r0, [sp, #28]
   11690:	bl	12f34 <__assert_fail@plt+0x1fa0>
   11694:	ldr	r3, [sp, #60]	; 0x3c
   11698:	cmp	r0, r3
   1169c:	add	r3, fp, #1
   116a0:	mov	r7, r0
   116a4:	str	r3, [sp, #64]	; 0x40
   116a8:	movhi	r4, sl
   116ac:	bhi	116c4 <__assert_fail@plt+0x730>
   116b0:	bl	10ec8 <__errno_location@plt>
   116b4:	ldr	r4, [r0]
   116b8:	cmp	r4, #0
   116bc:	bne	11e34 <__assert_fail@plt+0xea0>
   116c0:	ldr	r4, [sp, #32]
   116c4:	ldr	r3, [sp, #84]	; 0x54
   116c8:	cmp	r3, fp
   116cc:	bne	1162c <__assert_fail@plt+0x698>
   116d0:	b	1160c <__assert_fail@plt+0x678>
   116d4:	mov	r3, #1
   116d8:	str	r3, [sp, #40]	; 0x28
   116dc:	ldr	r3, [pc, #2224]	; 11f94 <__assert_fail@plt+0x1000>
   116e0:	ldrb	r3, [r3, #1]
   116e4:	cmp	r3, #0
   116e8:	bne	11ab0 <__assert_fail@plt+0xb1c>
   116ec:	ldr	r3, [pc, #2188]	; 11f80 <__assert_fail@plt+0xfec>
   116f0:	ldr	r2, [sp, #268]	; 0x10c
   116f4:	ldr	r1, [sp, #40]	; 0x28
   116f8:	ldr	r3, [r3]
   116fc:	eor	r0, r1, #1
   11700:	cmp	r2, r3
   11704:	bne	11f7c <__assert_fail@plt+0xfe8>
   11708:	add	sp, sp, #276	; 0x114
   1170c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11710:	ldr	r3, [sp, #100]	; 0x64
   11714:	cmp	r3, r9
   11718:	lslcs	r9, r9, #1
   1171c:	ldrcc	r9, [sp, #68]	; 0x44
   11720:	b	115b4 <__assert_fail@plt+0x620>
   11724:	ldr	r0, [pc, #2228]	; 11fe0 <__assert_fail@plt+0x104c>
   11728:	bl	1590c <__assert_fail@plt+0x4978>
   1172c:	mov	r5, #0
   11730:	add	r3, r0, #8192	; 0x2000
   11734:	mov	r4, r0
   11738:	str	r0, [sp, #64]	; 0x40
   1173c:	str	r5, [r3, #4]
   11740:	str	r5, [r3]
   11744:	str	r5, [r3, #8]
   11748:	ldr	r0, [pc, #2192]	; 11fe0 <__assert_fail@plt+0x104c>
   1174c:	bl	1590c <__assert_fail@plt+0x4978>
   11750:	ldrd	r2, [sp, #72]	; 0x48
   11754:	str	r4, [sp, #80]	; 0x50
   11758:	strd	r2, [sp, #48]	; 0x30
   1175c:	mov	r9, r0
   11760:	mov	r2, #8192	; 0x2000
   11764:	mov	r1, r9
   11768:	ldr	r0, [sp, #28]
   1176c:	bl	1534c <__assert_fail@plt+0x43b8>
   11770:	sub	r3, r0, #1
   11774:	cmn	r3, #3
   11778:	mov	r8, r0
   1177c:	bhi	118c4 <__assert_fail@plt+0x930>
   11780:	ldrd	r2, [sp, #16]
   11784:	orrs	r3, r2, r3
   11788:	beq	11860 <__assert_fail@plt+0x8cc>
   1178c:	add	r4, r9, #8192	; 0x2000
   11790:	mov	r3, #0
   11794:	str	r3, [r4, #4]
   11798:	str	r3, [r4, #8]
   1179c:	ldr	r3, [pc, #2032]	; 11f94 <__assert_fail@plt+0x1000>
   117a0:	add	r7, r9, r0
   117a4:	str	r0, [r4]
   117a8:	ldrb	r6, [r3]
   117ac:	mov	r0, r9
   117b0:	mov	sl, #0
   117b4:	b	117c4 <__assert_fail@plt+0x830>
   117b8:	add	r0, r0, #1
   117bc:	mov	sl, r3
   117c0:	str	r3, [r4, #4]
   117c4:	sub	r2, r7, r0
   117c8:	mov	r1, r6
   117cc:	bl	10f10 <memchr@plt>
   117d0:	add	r3, sl, #1
   117d4:	cmp	r0, #0
   117d8:	bne	117b8 <__assert_fail@plt+0x824>
   117dc:	ldr	r3, [sp, #64]	; 0x40
   117e0:	ldr	r2, [sp, #60]	; 0x3c
   117e4:	add	r6, r3, #8192	; 0x2000
   117e8:	add	r5, r5, sl
   117ec:	ldr	r0, [r6]
   117f0:	add	r3, r8, r0
   117f4:	cmp	r3, r2
   117f8:	bls	11894 <__assert_fail@plt+0x900>
   117fc:	ldr	r8, [sp, #80]	; 0x50
   11800:	ldrd	r0, [sp, #16]
   11804:	add	r4, r8, #8192	; 0x2000
   11808:	mov	r3, #0
   1180c:	ldr	r2, [r4, #4]
   11810:	cmp	r1, r3
   11814:	sub	r2, r5, r2
   11818:	cmpeq	r0, r2
   1181c:	str	r9, [r6, #8]
   11820:	bcs	11880 <__assert_fail@plt+0x8ec>
   11824:	ldrd	r6, [sp, #48]	; 0x30
   11828:	ldr	r3, [r4]
   1182c:	mov	r0, r8
   11830:	adds	r6, r6, r3
   11834:	adc	r7, r7, #0
   11838:	mov	r1, r3
   1183c:	strd	r6, [sp, #48]	; 0x30
   11840:	bl	1229c <__assert_fail@plt+0x1308>
   11844:	ldr	r3, [r4, #4]
   11848:	str	r9, [sp, #64]	; 0x40
   1184c:	sub	r5, r5, r3
   11850:	ldr	r3, [r4, #8]
   11854:	mov	r9, r8
   11858:	str	r3, [sp, #80]	; 0x50
   1185c:	b	11760 <__assert_fail@plt+0x7cc>
   11860:	ldrd	r2, [sp, #48]	; 0x30
   11864:	mov	r1, r0
   11868:	mov	r0, r9
   1186c:	adds	r2, r2, r8
   11870:	adc	r3, r3, #0
   11874:	strd	r2, [sp, #48]	; 0x30
   11878:	bl	1229c <__assert_fail@plt+0x1308>
   1187c:	b	11760 <__assert_fail@plt+0x7cc>
   11880:	ldr	r0, [pc, #1880]	; 11fe0 <__assert_fail@plt+0x104c>
   11884:	bl	1590c <__assert_fail@plt+0x4978>
   11888:	str	r9, [sp, #64]	; 0x40
   1188c:	mov	r9, r0
   11890:	b	11760 <__assert_fail@plt+0x7cc>
   11894:	ldr	r3, [sp, #64]	; 0x40
   11898:	mov	r2, r8
   1189c:	add	r0, r3, r0
   118a0:	mov	r1, r9
   118a4:	bl	10d78 <memcpy@plt>
   118a8:	ldrd	r0, [r4]
   118ac:	ldr	r2, [r6]
   118b0:	ldr	r3, [r6, #4]
   118b4:	add	r2, r2, r0
   118b8:	add	r3, r3, r1
   118bc:	strd	r2, [r6]
   118c0:	b	11760 <__assert_fail@plt+0x7cc>
   118c4:	mov	r0, r9
   118c8:	bl	10d60 <free@plt>
   118cc:	cmn	r8, #1
   118d0:	beq	11e98 <__assert_fail@plt+0xf04>
   118d4:	ldr	r1, [sp, #64]	; 0x40
   118d8:	add	r3, r1, #8192	; 0x2000
   118dc:	ldr	r2, [r3]
   118e0:	cmp	r2, #0
   118e4:	bne	11b5c <__assert_fail@plt+0xbc8>
   118e8:	ldr	r3, [sp, #80]	; 0x50
   118ec:	ldrd	r0, [sp, #16]
   118f0:	add	r7, r3, #8192	; 0x2000
   118f4:	mov	r3, #0
   118f8:	ldr	r2, [r7, #4]
   118fc:	cmp	r1, r3
   11900:	sub	r2, r5, r2
   11904:	cmpeq	r0, r2
   11908:	ldr	r6, [sp, #80]	; 0x50
   1190c:	bcs	11974 <__assert_fail@plt+0x9e0>
   11910:	mov	r4, fp
   11914:	ldrd	r8, [sp, #48]	; 0x30
   11918:	ldrd	sl, [sp, #16]
   1191c:	mov	r0, r6
   11920:	mov	r6, r5
   11924:	mov	r5, r7
   11928:	ldr	r3, [r5]
   1192c:	adds	r8, r8, r3
   11930:	mov	r1, r3
   11934:	adc	r9, r9, #0
   11938:	bl	1229c <__assert_fail@plt+0x1308>
   1193c:	ldr	r0, [r5, #8]
   11940:	ldr	r3, [r5, #4]
   11944:	add	r5, r0, #8192	; 0x2000
   11948:	sub	r6, r6, r3
   1194c:	ldr	r2, [r5, #4]
   11950:	mov	r3, #0
   11954:	sub	r2, r6, r2
   11958:	cmp	fp, r3
   1195c:	cmpeq	sl, r2
   11960:	bcc	11928 <__assert_fail@plt+0x994>
   11964:	mov	r5, r6
   11968:	mov	fp, r4
   1196c:	mov	r6, r0
   11970:	strd	r8, [sp, #48]	; 0x30
   11974:	ldrd	r0, [sp, #16]
   11978:	mov	r3, #0
   1197c:	cmp	r1, r3
   11980:	cmpeq	r0, r5
   11984:	bcs	119fc <__assert_fail@plt+0xa68>
   11988:	ldr	r3, [sp, #96]	; 0x60
   1198c:	add	r4, r6, #8192	; 0x2000
   11990:	sub	r5, r5, r3
   11994:	ldr	r3, [pc, #1528]	; 11f94 <__assert_fail@plt+0x1000>
   11998:	ldr	r8, [r4]
   1199c:	mov	r0, r6
   119a0:	ldrb	r9, [r3]
   119a4:	add	r8, r6, r8
   119a8:	b	119d4 <__assert_fail@plt+0xa40>
   119ac:	sub	r2, r8, r0
   119b0:	mov	r1, r9
   119b4:	bl	10f10 <memchr@plt>
   119b8:	cmp	r0, #0
   119bc:	beq	119dc <__assert_fail@plt+0xa48>
   119c0:	ldr	r3, [r4, #4]
   119c4:	add	r0, r0, #1
   119c8:	sub	r5, r5, #1
   119cc:	add	r3, r3, #1
   119d0:	str	r3, [r4, #4]
   119d4:	cmp	r5, #0
   119d8:	bne	119ac <__assert_fail@plt+0xa18>
   119dc:	ldrd	r4, [sp, #48]	; 0x30
   119e0:	sub	r3, r0, r6
   119e4:	mov	r1, r3
   119e8:	adds	r4, r4, r3
   119ec:	adc	r5, r5, r3, asr #31
   119f0:	mov	r0, r6
   119f4:	strd	r4, [sp, #48]	; 0x30
   119f8:	bl	1229c <__assert_fail@plt+0x1308>
   119fc:	ldr	r4, [sp, #32]
   11a00:	ldr	r0, [sp, #80]	; 0x50
   11a04:	b	11a0c <__assert_fail@plt+0xa78>
   11a08:	add	r7, r0, #8192	; 0x2000
   11a0c:	ldr	r5, [r7, #8]
   11a10:	bl	10d60 <free@plt>
   11a14:	subs	r0, r5, #0
   11a18:	bne	11a08 <__assert_fail@plt+0xa74>
   11a1c:	ldrd	r0, [sp, #72]	; 0x48
   11a20:	mvn	r3, #0
   11a24:	mvn	r2, #0
   11a28:	cmp	r1, r3
   11a2c:	cmpeq	r0, r2
   11a30:	beq	11444 <__assert_fail@plt+0x4b0>
   11a34:	mov	r1, #0
   11a38:	ldrd	r2, [sp, #48]	; 0x30
   11a3c:	str	fp, [sp, #4]
   11a40:	str	r1, [sp]
   11a44:	ldr	r0, [sp, #28]
   11a48:	bl	121c8 <__assert_fail@plt+0x1234>
   11a4c:	cmp	r0, #0
   11a50:	sbcs	r3, r1, #0
   11a54:	bge	11444 <__assert_fail@plt+0x4b0>
   11a58:	mov	r4, #0
   11a5c:	b	11444 <__assert_fail@plt+0x4b0>
   11a60:	ldr	r6, [pc, #1404]	; 11fe4 <__assert_fail@plt+0x1050>
   11a64:	ldr	r8, [pc, #1384]	; 11fd4 <__assert_fail@plt+0x1040>
   11a68:	b	11348 <__assert_fail@plt+0x3b4>
   11a6c:	bl	10ec8 <__errno_location@plt>
   11a70:	mov	r4, #0
   11a74:	mov	r2, #5
   11a78:	ldr	r1, [pc, #1384]	; 11fe8 <__assert_fail@plt+0x1054>
   11a7c:	ldr	r5, [r0]
   11a80:	mov	r0, r4
   11a84:	bl	10db4 <dcgettext@plt>
   11a88:	mov	r1, fp
   11a8c:	mov	r6, r0
   11a90:	mov	r0, #4
   11a94:	bl	1508c <__assert_fail@plt+0x40f8>
   11a98:	mov	r2, r6
   11a9c:	mov	r1, r5
   11aa0:	mov	r3, r0
   11aa4:	mov	r0, r4
   11aa8:	bl	10e38 <error@plt>
   11aac:	b	11444 <__assert_fail@plt+0x4b0>
   11ab0:	mov	r0, #0
   11ab4:	bl	10f88 <close@plt>
   11ab8:	cmp	r0, #0
   11abc:	bge	116ec <__assert_fail@plt+0x758>
   11ac0:	bl	10ec8 <__errno_location@plt>
   11ac4:	ldr	r2, [pc, #1288]	; 11fd4 <__assert_fail@plt+0x1040>
   11ac8:	ldr	r1, [r0]
   11acc:	mov	r0, #1
   11ad0:	bl	10e38 <error@plt>
   11ad4:	mov	r4, #1
   11ad8:	mov	r2, #0
   11adc:	mov	r3, #0
   11ae0:	stm	sp, {r4, fp}
   11ae4:	ldr	r0, [sp, #28]
   11ae8:	bl	121c8 <__assert_fail@plt+0x1234>
   11aec:	mov	r3, r1
   11af0:	mov	r2, r0
   11af4:	cmp	r0, #0
   11af8:	strd	r2, [sp, #72]	; 0x48
   11afc:	sbcs	r3, r3, #0
   11b00:	blt	11a58 <__assert_fail@plt+0xac4>
   11b04:	ldr	r3, [sp, #36]	; 0x24
   11b08:	ldrd	r0, [sp, #176]	; 0xb0
   11b0c:	cmp	r3, #0
   11b10:	ldr	r3, [pc, #1148]	; 11f94 <__assert_fail@plt+0x1000>
   11b14:	ldrb	r3, [r3, #3]
   11b18:	beq	11be4 <__assert_fail@plt+0xc50>
   11b1c:	cmp	r3, #0
   11b20:	bne	11724 <__assert_fail@plt+0x790>
   11b24:	ldr	r2, [sp, #184]	; 0xb8
   11b28:	sub	r3, r2, #1
   11b2c:	cmp	r3, #536870912	; 0x20000000
   11b30:	movcs	r2, #512	; 0x200
   11b34:	cmp	r2, r0
   11b38:	asr	r3, r2, #31
   11b3c:	sbcs	r3, r3, r1
   11b40:	bge	11724 <__assert_fail@plt+0x790>
   11b44:	ldrd	r2, [sp, #72]	; 0x48
   11b48:	cmp	r2, r0
   11b4c:	sbcs	r3, r3, r1
   11b50:	blt	11e74 <__assert_fail@plt+0xee0>
   11b54:	and	r4, r4, #1
   11b58:	b	11444 <__assert_fail@plt+0x4b0>
   11b5c:	add	r1, r1, r2
   11b60:	ldr	r2, [pc, #1068]	; 11f94 <__assert_fail@plt+0x1000>
   11b64:	ldrb	r1, [r1, #-1]
   11b68:	ldrb	r2, [r2]
   11b6c:	cmp	r1, r2
   11b70:	ldrne	r2, [r3, #4]
   11b74:	addne	r5, r5, #1
   11b78:	addne	r2, r2, #1
   11b7c:	strne	r2, [r3, #4]
   11b80:	b	118e8 <__assert_fail@plt+0x954>
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #1116]	; 11fec <__assert_fail@plt+0x1058>
   11b8c:	mov	r0, #0
   11b90:	bl	10db4 <dcgettext@plt>
   11b94:	mov	r1, #0
   11b98:	mov	r3, fp
   11b9c:	mov	r2, r0
   11ba0:	mov	r0, r1
   11ba4:	bl	10e38 <error@plt>
   11ba8:	b	11120 <__assert_fail@plt+0x18c>
   11bac:	cmp	lr, #0
   11bb0:	mov	r2, #5
   11bb4:	ldrne	r3, [pc, #984]	; 11f94 <__assert_fail@plt+0x1000>
   11bb8:	ldr	r1, [pc, #1068]	; 11fec <__assert_fail@plt+0x1058>
   11bbc:	mov	r0, #0
   11bc0:	strbne	r8, [r3]
   11bc4:	bl	10db4 <dcgettext@plt>
   11bc8:	mov	r1, #0
   11bcc:	ldrb	r3, [r4]
   11bd0:	mov	r2, r0
   11bd4:	mov	r0, r1
   11bd8:	bl	10e38 <error@plt>
   11bdc:	mov	r0, #1
   11be0:	bl	12aa4 <__assert_fail@plt+0x1b10>
   11be4:	subs	r4, r3, #0
   11be8:	bne	11550 <__assert_fail@plt+0x5bc>
   11bec:	ldr	r2, [sp, #184]	; 0xb8
   11bf0:	sub	r3, r2, #1
   11bf4:	cmp	r3, #536870912	; 0x20000000
   11bf8:	movcs	r2, #512	; 0x200
   11bfc:	cmp	r2, r0
   11c00:	asr	r3, r2, #31
   11c04:	sbcs	r3, r3, r1
   11c08:	bge	11550 <__assert_fail@plt+0x5bc>
   11c0c:	ldrd	r2, [sp, #72]	; 0x48
   11c10:	subs	ip, r0, r2
   11c14:	sbc	r3, r1, r3
   11c18:	str	ip, [sp, #104]	; 0x68
   11c1c:	str	r3, [sp, #108]	; 0x6c
   11c20:	ldrd	r2, [sp, #104]	; 0x68
   11c24:	cmp	r2, #0
   11c28:	sbcs	r1, r3, #0
   11c2c:	blt	11c60 <__assert_fail@plt+0xccc>
   11c30:	ldrd	r0, [sp, #16]
   11c34:	cmp	r1, r3
   11c38:	cmpeq	r0, r2
   11c3c:	bcs	11c60 <__assert_fail@plt+0xccc>
   11c40:	ldrd	r0, [sp, #16]
   11c44:	ldrd	r6, [sp, #104]	; 0x68
   11c48:	subs	r2, r6, r0
   11c4c:	sbc	r3, r7, r1
   11c50:	ldr	r0, [sp, #28]
   11c54:	bl	12314 <__assert_fail@plt+0x1380>
   11c58:	cmp	r0, #0
   11c5c:	bne	11f54 <__assert_fail@plt+0xfc0>
   11c60:	ldr	r4, [sp, #32]
   11c64:	b	11444 <__assert_fail@plt+0x4b0>
   11c68:	subs	r9, sl, #0
   11c6c:	ldr	fp, [sp, #80]	; 0x50
   11c70:	beq	11e00 <__assert_fail@plt+0xe6c>
   11c74:	ldrd	r2, [sp, #48]	; 0x30
   11c78:	ldr	r0, [sp, #120]	; 0x78
   11c7c:	ldr	lr, [r8, r6, lsl #2]
   11c80:	adds	r2, r2, r0
   11c84:	adc	r3, r3, #0
   11c88:	rsb	r1, r7, #8192	; 0x2000
   11c8c:	cmp	r0, r1
   11c90:	strd	r2, [sp, #48]	; 0x30
   11c94:	mov	r3, r0
   11c98:	add	r0, lr, r7
   11c9c:	bcs	11eec <__assert_fail@plt+0xf58>
   11ca0:	mov	r1, r3
   11ca4:	mov	r4, sl
   11ca8:	bl	1229c <__assert_fail@plt+0x1308>
   11cac:	ldr	r3, [sp, #64]	; 0x40
   11cb0:	mov	r5, r8
   11cb4:	add	r6, r8, r3, lsl #2
   11cb8:	b	11cc4 <__assert_fail@plt+0xd30>
   11cbc:	ldr	r0, [r5], #4
   11cc0:	bl	10d60 <free@plt>
   11cc4:	cmp	r5, r6
   11cc8:	bne	11cbc <__assert_fail@plt+0xd28>
   11ccc:	mov	r0, r8
   11cd0:	bl	10d60 <free@plt>
   11cd4:	b	11a1c <__assert_fail@plt+0xa88>
   11cd8:	ldr	r0, [sp, #116]	; 0x74
   11cdc:	bl	1590c <__assert_fail@plt+0x4978>
   11ce0:	ldr	r9, [sp, #112]	; 0x70
   11ce4:	ldr	r4, [sp, #32]
   11ce8:	mov	r5, #0
   11cec:	ldr	r6, [sp, #28]
   11cf0:	ldr	sl, [sp, #96]	; 0x60
   11cf4:	add	r3, r0, r9
   11cf8:	str	r0, [sp, #236]	; 0xec
   11cfc:	str	r3, [sp, #240]	; 0xf0
   11d00:	str	r0, [sp, #64]	; 0x40
   11d04:	b	11d74 <__assert_fail@plt+0xde0>
   11d08:	bl	10ec8 <__errno_location@plt>
   11d0c:	ldr	r2, [r0]
   11d10:	cmp	r2, #0
   11d14:	bne	11f10 <__assert_fail@plt+0xf7c>
   11d18:	cmp	sl, r8
   11d1c:	bcc	11ddc <__assert_fail@plt+0xe48>
   11d20:	cmp	r4, #0
   11d24:	bne	11df8 <__assert_fail@plt+0xe64>
   11d28:	ldr	r4, [sp, #32]
   11d2c:	sub	r2, sl, r8
   11d30:	eor	r5, r5, #1
   11d34:	add	r3, sp, #272	; 0x110
   11d38:	sub	r1, sl, r2
   11d3c:	add	r0, r3, r5, lsl #2
   11d40:	ldrd	r2, [sp, #48]	; 0x30
   11d44:	ldr	r0, [r0, #-36]	; 0xffffffdc
   11d48:	adds	r2, r2, r1
   11d4c:	adc	r3, r3, #0
   11d50:	add	r0, r0, #8192	; 0x2000
   11d54:	strd	r2, [sp, #48]	; 0x30
   11d58:	bl	1229c <__assert_fail@plt+0x1308>
   11d5c:	cmp	sl, r8
   11d60:	bcc	11db8 <__assert_fail@plt+0xe24>
   11d64:	cmp	r4, #0
   11d68:	uxtb	r5, r5
   11d6c:	bne	11df8 <__assert_fail@plt+0xe64>
   11d70:	mov	r4, #0
   11d74:	add	r3, sp, #272	; 0x110
   11d78:	add	r3, r3, r5, lsl #2
   11d7c:	mov	r2, r9
   11d80:	ldr	r7, [r3, #-36]	; 0xffffffdc
   11d84:	mov	r0, r6
   11d88:	mov	r1, r7
   11d8c:	bl	12f34 <__assert_fail@plt+0x1fa0>
   11d90:	cmp	r9, r0
   11d94:	mov	r8, r0
   11d98:	bhi	11d08 <__assert_fail@plt+0xd74>
   11d9c:	cmp	r4, #0
   11da0:	beq	11df0 <__assert_fail@plt+0xe5c>
   11da4:	cmp	sl, r0
   11da8:	eorcs	r5, r5, #1
   11dac:	bcs	11d70 <__assert_fail@plt+0xddc>
   11db0:	eor	r5, r5, #1
   11db4:	mov	r4, #0
   11db8:	ldrd	r2, [sp, #48]	; 0x30
   11dbc:	sub	r8, r8, sl
   11dc0:	mov	r0, r7
   11dc4:	adds	r2, r2, r8
   11dc8:	adc	r3, r3, #0
   11dcc:	mov	r1, r8
   11dd0:	strd	r2, [sp, #48]	; 0x30
   11dd4:	bl	1229c <__assert_fail@plt+0x1308>
   11dd8:	b	11d64 <__assert_fail@plt+0xdd0>
   11ddc:	cmp	r4, #0
   11de0:	eorne	r5, r5, #1
   11de4:	ldreq	r4, [sp, #32]
   11de8:	bne	11db8 <__assert_fail@plt+0xe24>
   11dec:	b	11d30 <__assert_fail@plt+0xd9c>
   11df0:	mov	r2, r4
   11df4:	b	11d30 <__assert_fail@plt+0xd9c>
   11df8:	ldr	r8, [sp, #64]	; 0x40
   11dfc:	b	11ccc <__assert_fail@plt+0xd38>
   11e00:	ldr	r3, [sp, #84]	; 0x54
   11e04:	cmp	r3, r6
   11e08:	bne	11cac <__assert_fail@plt+0xd18>
   11e0c:	ldr	r3, [sp, #124]	; 0x7c
   11e10:	ldr	r0, [r8, r1, lsl #2]
   11e14:	sub	r7, r7, r3
   11e18:	ldrd	r2, [sp, #48]	; 0x30
   11e1c:	mov	r1, r7
   11e20:	adds	r2, r2, r7
   11e24:	adc	r3, r3, #0
   11e28:	strd	r2, [sp, #48]	; 0x30
   11e2c:	bl	1229c <__assert_fail@plt+0x1308>
   11e30:	b	11cac <__assert_fail@plt+0xd18>
   11e34:	mov	r2, #5
   11e38:	ldr	r1, [pc, #432]	; 11ff0 <__assert_fail@plt+0x105c>
   11e3c:	mov	r0, #0
   11e40:	ldr	fp, [sp, #80]	; 0x50
   11e44:	bl	10db4 <dcgettext@plt>
   11e48:	mov	r1, fp
   11e4c:	mov	r5, r0
   11e50:	mov	r0, #4
   11e54:	bl	1508c <__assert_fail@plt+0x40f8>
   11e58:	mov	r1, r4
   11e5c:	mov	r2, r5
   11e60:	mov	r4, #0
   11e64:	mov	r3, r0
   11e68:	mov	r0, #0
   11e6c:	bl	10e38 <error@plt>
   11e70:	b	11cac <__assert_fail@plt+0xd18>
   11e74:	ldrd	r2, [sp, #72]	; 0x48
   11e78:	strd	r0, [sp, #8]
   11e7c:	ldr	r1, [sp, #28]
   11e80:	strd	r2, [sp]
   11e84:	mov	r0, fp
   11e88:	ldrd	r2, [sp, #16]
   11e8c:	bl	12734 <__assert_fail@plt+0x17a0>
   11e90:	mov	r4, r0
   11e94:	b	11b54 <__assert_fail@plt+0xbc0>
   11e98:	bl	10ec8 <__errno_location@plt>
   11e9c:	mov	r2, #5
   11ea0:	ldr	r1, [pc, #328]	; 11ff0 <__assert_fail@plt+0x105c>
   11ea4:	ldr	r4, [r0]
   11ea8:	mov	r0, #0
   11eac:	bl	10db4 <dcgettext@plt>
   11eb0:	mov	r1, fp
   11eb4:	mov	r5, r0
   11eb8:	mov	r0, #4
   11ebc:	bl	1508c <__assert_fail@plt+0x40f8>
   11ec0:	mov	r1, r4
   11ec4:	mov	r2, r5
   11ec8:	mov	r3, r0
   11ecc:	mov	r0, #0
   11ed0:	bl	10e38 <error@plt>
   11ed4:	ldr	r4, [sp, #80]	; 0x50
   11ed8:	cmp	r4, #0
   11edc:	beq	11a1c <__assert_fail@plt+0xa88>
   11ee0:	mov	r4, #0
   11ee4:	ldr	r0, [sp, #80]	; 0x50
   11ee8:	b	11a08 <__assert_fail@plt+0xa74>
   11eec:	bl	1229c <__assert_fail@plt+0x1308>
   11ef0:	ldr	r3, [sp, #124]	; 0x7c
   11ef4:	ldr	r0, [r8, r5, lsl #2]
   11ef8:	sub	r1, r7, r3
   11efc:	bl	1229c <__assert_fail@plt+0x1308>
   11f00:	mov	r4, r9
   11f04:	b	11cac <__assert_fail@plt+0xd18>
   11f08:	mov	fp, r0
   11f0c:	b	11114 <__assert_fail@plt+0x180>
   11f10:	mov	r6, r2
   11f14:	ldr	r1, [pc, #212]	; 11ff0 <__assert_fail@plt+0x105c>
   11f18:	mov	r2, #5
   11f1c:	mov	r0, #0
   11f20:	ldr	r8, [sp, #64]	; 0x40
   11f24:	bl	10db4 <dcgettext@plt>
   11f28:	mov	r1, fp
   11f2c:	mov	r4, r0
   11f30:	mov	r0, #4
   11f34:	bl	1508c <__assert_fail@plt+0x40f8>
   11f38:	mov	r2, r4
   11f3c:	mov	r1, r6
   11f40:	mov	r4, #0
   11f44:	mov	r3, r0
   11f48:	mov	r0, #0
   11f4c:	bl	10e38 <error@plt>
   11f50:	b	11ccc <__assert_fail@plt+0xd38>
   11f54:	mov	r1, fp
   11f58:	bl	126a0 <__assert_fail@plt+0x170c>
   11f5c:	b	11444 <__assert_fail@plt+0x4b0>
   11f60:	strb	r3, [r0]
   11f64:	mov	r5, r3
   11f68:	mov	r3, #1
   11f6c:	str	r3, [sp, #36]	; 0x24
   11f70:	b	11294 <__assert_fail@plt+0x300>
   11f74:	mov	r0, r4
   11f78:	bl	12aa4 <__assert_fail@plt+0x1b10>
   11f7c:	bl	10dc0 <__stack_chk_fail@plt>
   11f80:	andeq	r7, r2, r8, lsl #30
   11f84:	strdeq	r7, [r1], -r4
   11f88:	andeq	r7, r1, r0, asr r6
   11f8c:	andeq	r7, r1, r0, lsr #11
   11f90:	andeq	r2, r1, ip, asr lr
   11f94:	andeq	r8, r2, sp, asr r1
   11f98:	andeq	r6, r1, r4, lsr #30
   11f9c:	andeq	r7, r1, r4, lsr #13
   11fa0:	andeq	r8, r2, r8, asr r1
   11fa4:	strdeq	r8, [r2], -r4
   11fa8:	andeq	r8, r2, r4, asr r1
   11fac:	andeq	r7, r1, r4, lsl #13
   11fb0:	muleq	r1, r4, r6
   11fb4:	andeq	r7, r1, r4, lsr #1
   11fb8:	muleq	r1, ip, r5
   11fbc:	andeq	r8, r2, r8, asr #2
   11fc0:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11fc4:	andeq	r7, r1, r0, asr #13
   11fc8:	strdeq	r8, [r2], -r0
   11fcc:	strdeq	r7, [r1], -r8
   11fd0:	andeq	r7, r1, ip, ror #13
   11fd4:	andeq	r7, r1, ip, asr #12
   11fd8:	ldrdeq	r7, [r1], -r0
   11fdc:	andeq	r7, r1, r0, lsr r7
   11fe0:	andeq	r2, r0, ip
   11fe4:	andeq	r6, r1, ip, lsl pc
   11fe8:	strdeq	r7, [r1], -ip
   11fec:	andeq	r7, r1, r4, ror #12
   11ff0:	andeq	r7, r1, r0, ror r0
   11ff4:	andeq	r7, r1, ip, lsl #14
   11ff8:	ldrdeq	r6, [r1], -ip
   11ffc:			; <UNDEFINED> instruction: 0x000176b8
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #-24]	; 11ff4 <__assert_fail@plt+0x1060>
   12008:	mov	r0, #0
   1200c:	bl	10db4 <dcgettext@plt>
   12010:	add	r2, sp, #244	; 0xf4
   12014:	mov	r4, r0
   12018:	ldrd	r0, [sp, #16]
   1201c:	bl	1306c <__assert_fail@plt+0x20d8>
   12020:	mov	r2, r4
   12024:	mov	r1, #0
   12028:	mov	r3, r0
   1202c:	mov	r0, #1
   12030:	bl	10e38 <error@plt>
   12034:	mov	r2, #5
   12038:	ldr	r1, [pc, #-72]	; 11ff8 <__assert_fail@plt+0x1064>
   1203c:	mov	r0, #0
   12040:	bl	10db4 <dcgettext@plt>
   12044:	add	r2, sp, #244	; 0xf4
   12048:	mov	r4, r0
   1204c:	ldrd	r0, [sp, #16]
   12050:	bl	1306c <__assert_fail@plt+0x20d8>
   12054:	bl	15334 <__assert_fail@plt+0x43a0>
   12058:	mov	r3, r4
   1205c:	ldr	r2, [pc, #-104]	; 11ffc <__assert_fail@plt+0x1068>
   12060:	mov	r1, #75	; 0x4b
   12064:	str	r0, [sp]
   12068:	mov	r0, #1
   1206c:	bl	10e38 <error@plt>
   12070:	mov	fp, #0
   12074:	mov	lr, #0
   12078:	pop	{r1}		; (ldr r1, [sp], #4)
   1207c:	mov	r2, sp
   12080:	push	{r2}		; (str r2, [sp, #-4]!)
   12084:	push	{r0}		; (str r0, [sp, #-4]!)
   12088:	ldr	ip, [pc, #16]	; 120a0 <__assert_fail@plt+0x110c>
   1208c:	push	{ip}		; (str ip, [sp, #-4]!)
   12090:	ldr	r0, [pc, #12]	; 120a4 <__assert_fail@plt+0x1110>
   12094:	ldr	r3, [pc, #12]	; 120a8 <__assert_fail@plt+0x1114>
   12098:	bl	10e5c <__libc_start_main@plt>
   1209c:	bl	10f7c <abort@plt>
   120a0:			; <UNDEFINED> instruction: 0x00016ebc
   120a4:	andeq	r0, r1, r0, lsr #31
   120a8:	andeq	r6, r1, ip, asr lr
   120ac:	ldr	r3, [pc, #20]	; 120c8 <__assert_fail@plt+0x1134>
   120b0:	ldr	r2, [pc, #20]	; 120cc <__assert_fail@plt+0x1138>
   120b4:	add	r3, pc, r3
   120b8:	ldr	r2, [r3, r2]
   120bc:	cmp	r2, #0
   120c0:	bxeq	lr
   120c4:	b	10e74 <__gmon_start__@plt>
   120c8:	andeq	r5, r1, r4, asr #30
   120cc:	andeq	r0, r0, r4, ror #1
   120d0:	ldr	r0, [pc, #24]	; 120f0 <__assert_fail@plt+0x115c>
   120d4:	ldr	r3, [pc, #24]	; 120f4 <__assert_fail@plt+0x1160>
   120d8:	cmp	r3, r0
   120dc:	bxeq	lr
   120e0:	ldr	r3, [pc, #16]	; 120f8 <__assert_fail@plt+0x1164>
   120e4:	cmp	r3, #0
   120e8:	bxeq	lr
   120ec:	bx	r3
   120f0:	andeq	r8, r2, ip, lsr r1
   120f4:	andeq	r8, r2, ip, lsr r1
   120f8:	andeq	r0, r0, r0
   120fc:	ldr	r0, [pc, #36]	; 12128 <__assert_fail@plt+0x1194>
   12100:	ldr	r1, [pc, #36]	; 1212c <__assert_fail@plt+0x1198>
   12104:	sub	r1, r1, r0
   12108:	asr	r1, r1, #2
   1210c:	add	r1, r1, r1, lsr #31
   12110:	asrs	r1, r1, #1
   12114:	bxeq	lr
   12118:	ldr	r3, [pc, #16]	; 12130 <__assert_fail@plt+0x119c>
   1211c:	cmp	r3, #0
   12120:	bxeq	lr
   12124:	bx	r3
   12128:	andeq	r8, r2, ip, lsr r1
   1212c:	andeq	r8, r2, ip, lsr r1
   12130:	andeq	r0, r0, r0
   12134:	push	{r4, lr}
   12138:	ldr	r4, [pc, #24]	; 12158 <__assert_fail@plt+0x11c4>
   1213c:	ldrb	r3, [r4]
   12140:	cmp	r3, #0
   12144:	popne	{r4, pc}
   12148:	bl	120d0 <__assert_fail@plt+0x113c>
   1214c:	mov	r3, #1
   12150:	strb	r3, [r4]
   12154:	pop	{r4, pc}
   12158:	andeq	r8, r2, ip, asr r1
   1215c:	b	120fc <__assert_fail@plt+0x1168>
   12160:	cmp	r0, #0
   12164:	push	{r4, r5, r6, lr}
   12168:	movne	r0, #0
   1216c:	sub	sp, sp, #24
   12170:	mov	r6, r1
   12174:	mov	r2, #5
   12178:	ldrne	r1, [pc, #60]	; 121bc <__assert_fail@plt+0x1228>
   1217c:	ldreq	r1, [pc, #60]	; 121c0 <__assert_fail@plt+0x122c>
   12180:	bl	10db4 <dcgettext@plt>
   12184:	mvn	r4, #0
   12188:	ldr	r2, [pc, #52]	; 121c4 <__assert_fail@plt+0x1230>
   1218c:	mvn	r5, #0
   12190:	mov	r3, #0
   12194:	str	r2, [sp, #8]
   12198:	str	r3, [sp, #16]
   1219c:	strd	r4, [sp]
   121a0:	mov	r2, #0
   121a4:	mov	r3, #0
   121a8:	str	r0, [sp, #12]
   121ac:	mov	r0, r6
   121b0:	bl	15ce4 <__assert_fail@plt+0x4d50>
   121b4:	add	sp, sp, #24
   121b8:	pop	{r4, r5, r6, pc}
   121bc:	andeq	r6, r1, r4, asr #31
   121c0:	ldrdeq	r6, [r1], -ip
   121c4:	strdeq	r6, [r1], -r4
   121c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121cc:	sub	sp, sp, #44	; 0x2c
   121d0:	ldr	r6, [pc, #184]	; 12290 <__assert_fail@plt+0x12fc>
   121d4:	ldr	r7, [sp, #80]	; 0x50
   121d8:	mov	r9, r3
   121dc:	ldr	r1, [r6]
   121e0:	str	r7, [sp]
   121e4:	mov	r8, r2
   121e8:	str	r1, [sp, #36]	; 0x24
   121ec:	ldr	sl, [sp, #84]	; 0x54
   121f0:	bl	10e08 <lseek64@plt>
   121f4:	cmp	r0, #0
   121f8:	sbcs	r3, r1, #0
   121fc:	mov	r4, r0
   12200:	mov	r5, r1
   12204:	bge	1226c <__assert_fail@plt+0x12d8>
   12208:	bl	10ec8 <__errno_location@plt>
   1220c:	ldr	r3, [pc, #128]	; 12294 <__assert_fail@plt+0x1300>
   12210:	cmp	r7, #0
   12214:	ldr	r1, [pc, #124]	; 12298 <__assert_fail@plt+0x1304>
   12218:	mov	r2, #5
   1221c:	movne	r1, r3
   12220:	ldr	fp, [r0]
   12224:	mov	r0, #0
   12228:	bl	10db4 <dcgettext@plt>
   1222c:	mov	r2, sl
   12230:	mov	r1, #3
   12234:	mov	r7, r0
   12238:	mov	r0, #0
   1223c:	bl	15168 <__assert_fail@plt+0x41d4>
   12240:	add	r2, sp, #12
   12244:	mov	r1, r9
   12248:	mov	sl, r0
   1224c:	mov	r0, r8
   12250:	bl	12fa4 <__assert_fail@plt+0x2010>
   12254:	mov	r1, fp
   12258:	mov	r3, sl
   1225c:	mov	r2, r7
   12260:	str	r0, [sp]
   12264:	mov	r0, #0
   12268:	bl	10e38 <error@plt>
   1226c:	ldr	r2, [sp, #36]	; 0x24
   12270:	ldr	r3, [r6]
   12274:	mov	r0, r4
   12278:	cmp	r2, r3
   1227c:	mov	r1, r5
   12280:	bne	1228c <__assert_fail@plt+0x12f8>
   12284:	add	sp, sp, #44	; 0x2c
   12288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1228c:	bl	10dc0 <__stack_chk_fail@plt>
   12290:	andeq	r7, r2, r8, lsl #30
   12294:	andeq	r7, r1, r4, lsr #32
   12298:	andeq	r7, r1, r4
   1229c:	push	{r4, r5, r6, lr}
   122a0:	subs	r4, r1, #0
   122a4:	popeq	{r4, r5, r6, pc}
   122a8:	ldr	r5, [pc, #88]	; 12308 <__assert_fail@plt+0x1374>
   122ac:	mov	r2, r4
   122b0:	mov	r1, #1
   122b4:	ldr	r3, [r5]
   122b8:	bl	10d9c <fwrite_unlocked@plt>
   122bc:	cmp	r4, r0
   122c0:	popls	{r4, r5, r6, pc}
   122c4:	ldr	r0, [r5]
   122c8:	bl	10f58 <clearerr_unlocked@plt>
   122cc:	bl	10ec8 <__errno_location@plt>
   122d0:	mov	r2, #5
   122d4:	ldr	r1, [pc, #48]	; 1230c <__assert_fail@plt+0x1378>
   122d8:	ldr	r4, [r0]
   122dc:	mov	r0, #0
   122e0:	bl	10db4 <dcgettext@plt>
   122e4:	ldr	r1, [pc, #36]	; 12310 <__assert_fail@plt+0x137c>
   122e8:	mov	r5, r0
   122ec:	mov	r0, #4
   122f0:	bl	1508c <__assert_fail@plt+0x40f8>
   122f4:	mov	r2, r5
   122f8:	mov	r1, r4
   122fc:	mov	r3, r0
   12300:	mov	r0, #1
   12304:	bl	10e38 <error@plt>
   12308:	andeq	r8, r2, r4, asr r1
   1230c:	andeq	r7, r1, ip, asr #32
   12310:	andeq	r7, r1, r0, rrx
   12314:	push	{r4, r5, r6, r7, r8, lr}
   12318:	sub	sp, sp, #8192	; 0x2000
   1231c:	ldr	r7, [pc, #180]	; 123d8 <__assert_fail@plt+0x1444>
   12320:	sub	sp, sp, #8
   12324:	mov	r4, r2
   12328:	add	r2, sp, #8192	; 0x2000
   1232c:	mov	r5, r3
   12330:	add	r2, r2, #4
   12334:	ldr	r3, [r7]
   12338:	mov	r8, r0
   1233c:	str	r3, [r2]
   12340:	cmp	r5, #0
   12344:	cmpeq	r4, #8192	; 0x2000
   12348:	mov	r2, r4
   1234c:	add	r1, sp, #4
   12350:	movhi	r2, #8192	; 0x2000
   12354:	mov	r0, r8
   12358:	bl	1534c <__assert_fail@plt+0x43b8>
   1235c:	cmn	r0, #1
   12360:	beq	123c4 <__assert_fail@plt+0x1430>
   12364:	subs	r4, r4, r0
   12368:	sbc	r5, r5, #0
   1236c:	orrs	r3, r4, r5
   12370:	movne	r6, #1
   12374:	moveq	r6, #0
   12378:	cmp	r0, #0
   1237c:	movne	r6, #0
   12380:	cmp	r6, #0
   12384:	bne	123cc <__assert_fail@plt+0x1438>
   12388:	mov	r1, r0
   1238c:	add	r0, sp, #4
   12390:	bl	1229c <__assert_fail@plt+0x1308>
   12394:	orrs	r3, r4, r5
   12398:	bne	12340 <__assert_fail@plt+0x13ac>
   1239c:	mov	r0, r6
   123a0:	add	r3, sp, #8192	; 0x2000
   123a4:	add	r3, r3, #4
   123a8:	ldr	r2, [r3]
   123ac:	ldr	r3, [r7]
   123b0:	cmp	r2, r3
   123b4:	bne	123d4 <__assert_fail@plt+0x1440>
   123b8:	add	sp, sp, #8192	; 0x2000
   123bc:	add	sp, sp, #8
   123c0:	pop	{r4, r5, r6, r7, r8, pc}
   123c4:	mov	r0, #1
   123c8:	b	123a0 <__assert_fail@plt+0x140c>
   123cc:	mov	r0, #2
   123d0:	b	123a0 <__assert_fail@plt+0x140c>
   123d4:	bl	10dc0 <__stack_chk_fail@plt>
   123d8:	andeq	r7, r2, r8, lsl #30
   123dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   123e0:	sub	sp, sp, #8256	; 0x2040
   123e4:	ldr	r8, [pc, #420]	; 12590 <__assert_fail@plt+0x15fc>
   123e8:	sub	sp, sp, #56	; 0x38
   123ec:	mov	r6, r2
   123f0:	mov	r7, r3
   123f4:	add	r2, sp, #8256	; 0x2040
   123f8:	orrs	r3, r6, r7
   123fc:	add	r2, r2, #52	; 0x34
   12400:	ldr	r3, [r8]
   12404:	str	r3, [r2]
   12408:	beq	12584 <__assert_fail@plt+0x15f0>
   1240c:	ldr	sl, [pc, #384]	; 12594 <__assert_fail@plt+0x1600>
   12410:	mov	r9, r0
   12414:	mov	r5, r1
   12418:	mov	r2, #8192	; 0x2000
   1241c:	add	r1, sp, #116	; 0x74
   12420:	mov	r0, r5
   12424:	bl	1534c <__assert_fail@plt+0x43b8>
   12428:	cmn	r0, #1
   1242c:	beq	12540 <__assert_fail@plt+0x15ac>
   12430:	cmp	r0, #0
   12434:	beq	12584 <__assert_fail@plt+0x15f0>
   12438:	ldrb	r1, [sl]
   1243c:	add	r3, sp, #115	; 0x73
   12440:	mov	r4, #0
   12444:	b	12450 <__assert_fail@plt+0x14bc>
   12448:	cmp	r0, r4
   1244c:	beq	124d4 <__assert_fail@plt+0x1540>
   12450:	ldrb	r2, [r3, #1]!
   12454:	add	r4, r4, #1
   12458:	cmp	r2, r1
   1245c:	bne	12448 <__assert_fail@plt+0x14b4>
   12460:	subs	r6, r6, #1
   12464:	sbc	r7, r7, #0
   12468:	orrs	r2, r6, r7
   1246c:	bne	12448 <__assert_fail@plt+0x14b4>
   12470:	sub	r0, r0, r4
   12474:	rsbs	r6, r0, #0
   12478:	sbc	r7, r7, r7
   1247c:	mov	sl, #1
   12480:	mov	r3, r7
   12484:	mov	r2, r6
   12488:	str	sl, [sp]
   1248c:	mov	r0, r5
   12490:	bl	10e08 <lseek64@plt>
   12494:	cmp	r0, #0
   12498:	sbcs	r3, r1, #0
   1249c:	blt	124e4 <__assert_fail@plt+0x1550>
   124a0:	add	r0, sp, #116	; 0x74
   124a4:	mov	r1, r4
   124a8:	bl	1229c <__assert_fail@plt+0x1308>
   124ac:	mov	r0, sl
   124b0:	add	r3, sp, #8256	; 0x2040
   124b4:	add	r3, r3, #52	; 0x34
   124b8:	ldr	r2, [r3]
   124bc:	ldr	r3, [r8]
   124c0:	cmp	r2, r3
   124c4:	bne	1258c <__assert_fail@plt+0x15f8>
   124c8:	add	sp, sp, #8256	; 0x2040
   124cc:	add	sp, sp, #56	; 0x38
   124d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124d4:	mov	r1, r0
   124d8:	add	r0, sp, #116	; 0x74
   124dc:	bl	1229c <__assert_fail@plt+0x1308>
   124e0:	b	12418 <__assert_fail@plt+0x1484>
   124e4:	add	r2, sp, #8
   124e8:	mov	r1, r5
   124ec:	mov	r0, #3
   124f0:	bl	10df0 <__fxstat64@plt>
   124f4:	cmp	r0, #0
   124f8:	bne	12520 <__assert_fail@plt+0x158c>
   124fc:	ldr	r3, [sp, #24]
   12500:	and	r3, r3, #61440	; 0xf000
   12504:	cmp	r3, #32768	; 0x8000
   12508:	beq	12520 <__assert_fail@plt+0x158c>
   1250c:	add	r0, sp, #116	; 0x74
   12510:	mov	r1, r4
   12514:	bl	1229c <__assert_fail@plt+0x1308>
   12518:	mov	r0, #1
   1251c:	b	124b0 <__assert_fail@plt+0x151c>
   12520:	mov	r1, #1
   12524:	str	r9, [sp, #4]
   12528:	mov	r2, r6
   1252c:	mov	r3, r7
   12530:	mov	r0, r5
   12534:	str	r1, [sp]
   12538:	bl	121c8 <__assert_fail@plt+0x1234>
   1253c:	b	1250c <__assert_fail@plt+0x1578>
   12540:	bl	10ec8 <__errno_location@plt>
   12544:	mov	r2, #5
   12548:	ldr	r1, [pc, #72]	; 12598 <__assert_fail@plt+0x1604>
   1254c:	ldr	r4, [r0]
   12550:	mov	r0, #0
   12554:	bl	10db4 <dcgettext@plt>
   12558:	mov	r1, r9
   1255c:	mov	r5, r0
   12560:	mov	r0, #4
   12564:	bl	1508c <__assert_fail@plt+0x40f8>
   12568:	mov	r2, r5
   1256c:	mov	r1, r4
   12570:	mov	r3, r0
   12574:	mov	r0, #0
   12578:	bl	10e38 <error@plt>
   1257c:	mov	r0, #0
   12580:	b	124b0 <__assert_fail@plt+0x151c>
   12584:	mov	r0, #1
   12588:	b	124b0 <__assert_fail@plt+0x151c>
   1258c:	bl	10dc0 <__stack_chk_fail@plt>
   12590:	andeq	r7, r2, r8, lsl #30
   12594:	andeq	r8, r2, sp, asr r1
   12598:	andeq	r7, r1, r0, ror r0
   1259c:	push	{r4, r5, r6, r7, r8, r9, lr}
   125a0:	sub	sp, sp, #8192	; 0x2000
   125a4:	ldr	r8, [pc, #236]	; 12698 <__assert_fail@plt+0x1704>
   125a8:	sub	sp, sp, #12
   125ac:	mov	r4, r2
   125b0:	mov	r5, r3
   125b4:	add	r2, sp, #8192	; 0x2000
   125b8:	orrs	r3, r4, r5
   125bc:	add	r2, r2, #4
   125c0:	ldr	r3, [r8]
   125c4:	str	r3, [r2]
   125c8:	beq	1266c <__assert_fail@plt+0x16d8>
   125cc:	mov	r9, r0
   125d0:	mov	r7, r1
   125d4:	mov	r6, #8192	; 0x2000
   125d8:	b	12600 <__assert_fail@plt+0x166c>
   125dc:	cmp	r0, #0
   125e0:	beq	1266c <__assert_fail@plt+0x16d8>
   125e4:	subs	r4, r4, r0
   125e8:	sbc	r5, r5, #0
   125ec:	mov	r1, r0
   125f0:	add	r0, sp, #4
   125f4:	bl	1229c <__assert_fail@plt+0x1308>
   125f8:	orrs	r3, r4, r5
   125fc:	beq	1266c <__assert_fail@plt+0x16d8>
   12600:	mov	r3, #0
   12604:	cmp	r3, r5
   12608:	cmpeq	r6, r4
   1260c:	movhi	r6, r4
   12610:	mov	r2, r6
   12614:	add	r1, sp, #4
   12618:	mov	r0, r7
   1261c:	bl	1534c <__assert_fail@plt+0x43b8>
   12620:	cmn	r0, #1
   12624:	bne	125dc <__assert_fail@plt+0x1648>
   12628:	bl	10ec8 <__errno_location@plt>
   1262c:	mov	r2, #5
   12630:	ldr	r1, [pc, #100]	; 1269c <__assert_fail@plt+0x1708>
   12634:	ldr	r4, [r0]
   12638:	mov	r0, #0
   1263c:	bl	10db4 <dcgettext@plt>
   12640:	mov	r1, r9
   12644:	mov	r5, r0
   12648:	mov	r0, #4
   1264c:	bl	1508c <__assert_fail@plt+0x40f8>
   12650:	mov	r2, r5
   12654:	mov	r1, r4
   12658:	mov	r3, r0
   1265c:	mov	r0, #0
   12660:	bl	10e38 <error@plt>
   12664:	mov	r0, #0
   12668:	b	12670 <__assert_fail@plt+0x16dc>
   1266c:	mov	r0, #1
   12670:	add	r3, sp, #8192	; 0x2000
   12674:	add	r3, r3, #4
   12678:	ldr	r2, [r3]
   1267c:	ldr	r3, [r8]
   12680:	cmp	r2, r3
   12684:	bne	12694 <__assert_fail@plt+0x1700>
   12688:	add	sp, sp, #8192	; 0x2000
   1268c:	add	sp, sp, #12
   12690:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12694:	bl	10dc0 <__stack_chk_fail@plt>
   12698:	andeq	r7, r2, r8, lsl #30
   1269c:	andeq	r7, r1, r0, ror r0
   126a0:	cmp	r0, #1
   126a4:	push	{r4, r5, r6, lr}
   126a8:	mov	r4, r1
   126ac:	bne	126f0 <__assert_fail@plt+0x175c>
   126b0:	bl	10ec8 <__errno_location@plt>
   126b4:	ldr	r1, [pc, #112]	; 1272c <__assert_fail@plt+0x1798>
   126b8:	mov	r2, #5
   126bc:	ldr	r5, [r0]
   126c0:	mov	r0, #0
   126c4:	bl	10db4 <dcgettext@plt>
   126c8:	mov	r1, r4
   126cc:	mov	r6, r0
   126d0:	mov	r0, #4
   126d4:	bl	1508c <__assert_fail@plt+0x40f8>
   126d8:	mov	r3, r0
   126dc:	mov	r2, r6
   126e0:	mov	r1, r5
   126e4:	mov	r0, #0
   126e8:	pop	{r4, r5, r6, lr}
   126ec:	b	10e38 <error@plt>
   126f0:	cmp	r0, #2
   126f4:	bne	12728 <__assert_fail@plt+0x1794>
   126f8:	bl	10ec8 <__errno_location@plt>
   126fc:	mov	r2, #5
   12700:	ldr	r1, [pc, #40]	; 12730 <__assert_fail@plt+0x179c>
   12704:	ldr	r5, [r0]
   12708:	mov	r0, #0
   1270c:	bl	10db4 <dcgettext@plt>
   12710:	mov	r2, r4
   12714:	mov	r1, #3
   12718:	mov	r6, r0
   1271c:	mov	r0, #0
   12720:	bl	15168 <__assert_fail@plt+0x41d4>
   12724:	b	126d8 <__assert_fail@plt+0x1744>
   12728:	bl	10f7c <abort@plt>
   1272c:	andeq	r7, r1, r0, ror r0
   12730:	andeq	r7, r1, r4, lsl #1
   12734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12738:	sub	sp, sp, #8192	; 0x2000
   1273c:	sub	sp, sp, #36	; 0x24
   12740:	add	ip, sp, #8256	; 0x2040
   12744:	add	r6, sp, #8256	; 0x2040
   12748:	add	ip, ip, #16
   1274c:	add	r6, r6, #8
   12750:	ldr	ip, [ip]
   12754:	ldr	r6, [r6]
   12758:	add	lr, sp, #8256	; 0x2040
   1275c:	subs	r8, ip, r6
   12760:	add	r6, sp, #8256	; 0x2040
   12764:	add	lr, lr, #20
   12768:	add	r6, r6, #12
   1276c:	ldr	lr, [lr]
   12770:	ldr	r6, [r6]
   12774:	str	r0, [sp, #16]
   12778:	sbc	r6, lr, r6
   1277c:	mov	fp, r1
   12780:	asr	r0, r6, #31
   12784:	eor	r8, r8, r0
   12788:	subs	r8, r8, r0
   1278c:	ldr	r1, [pc, #772]	; 12a98 <__assert_fail@plt+0x1b04>
   12790:	lsl	r8, r8, #19
   12794:	mov	r9, r3
   12798:	lsr	r8, r8, #19
   1279c:	eor	r8, r8, r0
   127a0:	subs	r0, r8, r0
   127a4:	add	r3, sp, #8192	; 0x2000
   127a8:	ldr	r1, [r1]
   127ac:	cmp	r0, #0
   127b0:	add	r3, r3, #28
   127b4:	moveq	r0, #8192	; 0x2000
   127b8:	str	r1, [r3]
   127bc:	mov	r8, r2
   127c0:	mov	r3, #0
   127c4:	subs	r2, ip, r0
   127c8:	sbc	r3, lr, r3
   127cc:	str	r3, [sp, #12]
   127d0:	ldr	r3, [sp, #16]
   127d4:	str	r2, [sp, #8]
   127d8:	mov	sl, #0
   127dc:	str	r3, [sp, #4]
   127e0:	mov	r6, r0
   127e4:	ldrd	r2, [sp, #8]
   127e8:	str	sl, [sp]
   127ec:	mov	r0, fp
   127f0:	bl	121c8 <__assert_fail@plt+0x1234>
   127f4:	cmp	r0, #0
   127f8:	sbcs	r3, r1, #0
   127fc:	blt	12980 <__assert_fail@plt+0x19ec>
   12800:	add	r7, sp, #28
   12804:	mov	r2, r6
   12808:	mov	r1, r7
   1280c:	mov	r0, fp
   12810:	bl	1534c <__assert_fail@plt+0x43b8>
   12814:	cmn	r0, #1
   12818:	mov	r6, r0
   1281c:	beq	12944 <__assert_fail@plt+0x19b0>
   12820:	orrs	r3, r8, r9
   12824:	movne	r3, #1
   12828:	moveq	r3, #0
   1282c:	cmp	r0, #0
   12830:	moveq	r3, #0
   12834:	cmp	r3, #0
   12838:	bne	129ac <__assert_fail@plt+0x1a18>
   1283c:	mov	r4, r8
   12840:	mov	r5, r9
   12844:	str	fp, [sp, #20]
   12848:	ldrd	sl, [sp, #8]
   1284c:	mov	r2, r6
   12850:	cmp	r2, #0
   12854:	beq	129d4 <__assert_fail@plt+0x1a40>
   12858:	ldr	r3, [pc, #572]	; 12a9c <__assert_fail@plt+0x1b08>
   1285c:	ldrb	r6, [r3]
   12860:	b	12874 <__assert_fail@plt+0x18e0>
   12864:	cmp	r2, #0
   12868:	mov	r4, r1
   1286c:	mov	r5, r3
   12870:	beq	129d4 <__assert_fail@plt+0x1a40>
   12874:	orrs	r3, r8, r9
   12878:	subeq	r2, r2, #1
   1287c:	beq	12898 <__assert_fail@plt+0x1904>
   12880:	mov	r1, r6
   12884:	mov	r0, r7
   12888:	bl	10ebc <memrchr@plt>
   1288c:	cmp	r0, #0
   12890:	beq	129d4 <__assert_fail@plt+0x1a40>
   12894:	sub	r2, r0, r7
   12898:	subs	r1, r4, #1
   1289c:	sbc	r3, r5, #0
   128a0:	orrs	r0, r4, r5
   128a4:	bne	12864 <__assert_fail@plt+0x18d0>
   128a8:	add	r3, sp, #8256	; 0x2040
   128ac:	add	r3, r3, #8
   128b0:	mov	r6, r2
   128b4:	ldrd	r2, [r3]
   128b8:	mov	r5, fp
   128bc:	mov	r4, sl
   128c0:	cmp	r2, sl
   128c4:	sbcs	r3, r3, r5
   128c8:	strd	r4, [sp, #8]
   128cc:	ldr	fp, [sp, #20]
   128d0:	bge	12a50 <__assert_fail@plt+0x1abc>
   128d4:	ldr	r3, [sp, #16]
   128d8:	mov	sl, #0
   128dc:	str	r3, [sp, #4]
   128e0:	add	r3, sp, #8256	; 0x2040
   128e4:	add	r3, r3, #8
   128e8:	str	sl, [sp]
   128ec:	mov	r0, fp
   128f0:	ldrd	r2, [r3]
   128f4:	bl	121c8 <__assert_fail@plt+0x1234>
   128f8:	cmp	r0, #0
   128fc:	sbcs	r3, r1, #0
   12900:	blt	12980 <__assert_fail@plt+0x19ec>
   12904:	add	r3, sp, #8256	; 0x2040
   12908:	add	r3, r3, #8
   1290c:	mov	r0, fp
   12910:	ldr	r3, [r3]
   12914:	subs	r2, r4, r3
   12918:	add	r3, sp, #8256	; 0x2040
   1291c:	add	r3, r3, #12
   12920:	ldr	r3, [r3]
   12924:	sbc	r3, r5, r3
   12928:	bl	12314 <__assert_fail@plt+0x1380>
   1292c:	cmp	r0, sl
   12930:	beq	12a50 <__assert_fail@plt+0x1abc>
   12934:	ldr	r1, [sp, #16]
   12938:	bl	126a0 <__assert_fail@plt+0x170c>
   1293c:	mov	r0, sl
   12940:	b	12984 <__assert_fail@plt+0x19f0>
   12944:	bl	10ec8 <__errno_location@plt>
   12948:	mov	r2, #5
   1294c:	ldr	r1, [pc, #332]	; 12aa0 <__assert_fail@plt+0x1b0c>
   12950:	ldr	r4, [r0]
   12954:	mov	r0, #0
   12958:	bl	10db4 <dcgettext@plt>
   1295c:	ldr	r1, [sp, #16]
   12960:	mov	r5, r0
   12964:	mov	r0, #4
   12968:	bl	1508c <__assert_fail@plt+0x40f8>
   1296c:	mov	r2, r5
   12970:	mov	r1, r4
   12974:	mov	r3, r0
   12978:	mov	r0, #0
   1297c:	bl	10e38 <error@plt>
   12980:	mov	r0, #0
   12984:	add	r3, sp, #8192	; 0x2000
   12988:	add	r3, r3, #28
   1298c:	ldr	r2, [r3]
   12990:	ldr	r3, [pc, #256]	; 12a98 <__assert_fail@plt+0x1b04>
   12994:	ldr	r3, [r3]
   12998:	cmp	r2, r3
   1299c:	bne	12a94 <__assert_fail@plt+0x1b00>
   129a0:	add	sp, sp, #8192	; 0x2000
   129a4:	add	sp, sp, #36	; 0x24
   129a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ac:	ldr	r2, [pc, #232]	; 12a9c <__assert_fail@plt+0x1b08>
   129b0:	add	r3, sp, #32
   129b4:	add	r3, r3, r0
   129b8:	ldrb	r2, [r2]
   129bc:	ldrb	r3, [r3, #-5]
   129c0:	cmp	r3, r2
   129c4:	beq	1283c <__assert_fail@plt+0x18a8>
   129c8:	subs	r4, r8, #1
   129cc:	sbc	r5, r9, #0
   129d0:	b	12844 <__assert_fail@plt+0x18b0>
   129d4:	add	r3, sp, #8256	; 0x2040
   129d8:	add	r3, r3, #8
   129dc:	ldrd	r2, [r3]
   129e0:	cmp	fp, r3
   129e4:	cmpeq	sl, r2
   129e8:	beq	12a48 <__assert_fail@plt+0x1ab4>
   129ec:	ldr	r3, [sp, #16]
   129f0:	subs	sl, sl, #8192	; 0x2000
   129f4:	ldr	r6, [sp, #20]
   129f8:	sbc	fp, fp, #0
   129fc:	str	r3, [sp, #4]
   12a00:	mov	r3, #0
   12a04:	str	r3, [sp]
   12a08:	mov	r2, sl
   12a0c:	mov	r3, fp
   12a10:	mov	r0, r6
   12a14:	bl	121c8 <__assert_fail@plt+0x1234>
   12a18:	cmp	r0, #0
   12a1c:	sbcs	r3, r1, #0
   12a20:	blt	12980 <__assert_fail@plt+0x19ec>
   12a24:	mov	r2, #8192	; 0x2000
   12a28:	mov	r1, r7
   12a2c:	mov	r0, r6
   12a30:	bl	1534c <__assert_fail@plt+0x43b8>
   12a34:	cmn	r0, #1
   12a38:	mov	r2, r0
   12a3c:	beq	12944 <__assert_fail@plt+0x19b0>
   12a40:	cmp	r0, #0
   12a44:	bne	12850 <__assert_fail@plt+0x18bc>
   12a48:	mov	r0, #1
   12a4c:	b	12984 <__assert_fail@plt+0x19f0>
   12a50:	mov	r0, r7
   12a54:	add	r1, r6, #1
   12a58:	bl	1229c <__assert_fail@plt+0x1308>
   12a5c:	ldrd	r4, [sp, #8]
   12a60:	ldr	r3, [sp, #16]
   12a64:	mov	r1, #0
   12a68:	adds	r4, r4, r6
   12a6c:	adc	r5, r5, #0
   12a70:	adds	r2, r4, #1
   12a74:	str	r3, [sp, #4]
   12a78:	mov	r0, fp
   12a7c:	adc	r3, r5, r1
   12a80:	str	r1, [sp]
   12a84:	bl	121c8 <__assert_fail@plt+0x1234>
   12a88:	mvn	r0, r1
   12a8c:	lsr	r0, r0, #31
   12a90:	b	12984 <__assert_fail@plt+0x19f0>
   12a94:	bl	10dc0 <__stack_chk_fail@plt>
   12a98:	andeq	r7, r2, r8, lsl #30
   12a9c:	andeq	r8, r2, sp, asr r1
   12aa0:	andeq	r7, r1, r0, ror r0
   12aa4:	ldr	r3, [pc, #808]	; 12dd4 <__assert_fail@plt+0x1e40>
   12aa8:	push	{r7, lr}
   12aac:	sub	sp, sp, #64	; 0x40
   12ab0:	ldr	r3, [r3]
   12ab4:	subs	r4, r0, #0
   12ab8:	str	r3, [sp, #60]	; 0x3c
   12abc:	beq	12af8 <__assert_fail@plt+0x1b64>
   12ac0:	ldr	r3, [pc, #784]	; 12dd8 <__assert_fail@plt+0x1e44>
   12ac4:	mov	r2, #5
   12ac8:	ldr	r1, [pc, #780]	; 12ddc <__assert_fail@plt+0x1e48>
   12acc:	mov	r0, #0
   12ad0:	ldr	r5, [r3]
   12ad4:	bl	10db4 <dcgettext@plt>
   12ad8:	ldr	r3, [pc, #768]	; 12de0 <__assert_fail@plt+0x1e4c>
   12adc:	mov	r1, #1
   12ae0:	ldr	r3, [r3]
   12ae4:	mov	r2, r0
   12ae8:	mov	r0, r5
   12aec:	bl	10f04 <__fprintf_chk@plt>
   12af0:	mov	r0, r4
   12af4:	bl	10e98 <exit@plt>
   12af8:	mov	r2, #5
   12afc:	ldr	r1, [pc, #736]	; 12de4 <__assert_fail@plt+0x1e50>
   12b00:	bl	10db4 <dcgettext@plt>
   12b04:	ldr	r3, [pc, #724]	; 12de0 <__assert_fail@plt+0x1e4c>
   12b08:	ldr	r5, [pc, #728]	; 12de8 <__assert_fail@plt+0x1e54>
   12b0c:	ldr	r2, [r3]
   12b10:	mov	r1, r0
   12b14:	mov	r0, #1
   12b18:	bl	10eec <__printf_chk@plt>
   12b1c:	mov	r2, #5
   12b20:	ldr	r1, [pc, #708]	; 12dec <__assert_fail@plt+0x1e58>
   12b24:	mov	r0, r4
   12b28:	bl	10db4 <dcgettext@plt>
   12b2c:	mov	r2, #10
   12b30:	mov	r1, r0
   12b34:	mov	r0, #1
   12b38:	bl	10eec <__printf_chk@plt>
   12b3c:	mov	r2, #5
   12b40:	ldr	r1, [pc, #680]	; 12df0 <__assert_fail@plt+0x1e5c>
   12b44:	mov	r0, r4
   12b48:	bl	10db4 <dcgettext@plt>
   12b4c:	ldr	r1, [r5]
   12b50:	bl	10d24 <fputs_unlocked@plt>
   12b54:	mov	r2, #5
   12b58:	ldr	r1, [pc, #660]	; 12df4 <__assert_fail@plt+0x1e60>
   12b5c:	mov	r0, r4
   12b60:	bl	10db4 <dcgettext@plt>
   12b64:	ldr	r1, [r5]
   12b68:	bl	10d24 <fputs_unlocked@plt>
   12b6c:	mov	r2, #5
   12b70:	ldr	r1, [pc, #640]	; 12df8 <__assert_fail@plt+0x1e64>
   12b74:	mov	r0, r4
   12b78:	bl	10db4 <dcgettext@plt>
   12b7c:	mov	r2, #10
   12b80:	mov	r1, r0
   12b84:	mov	r0, #1
   12b88:	bl	10eec <__printf_chk@plt>
   12b8c:	mov	r2, #5
   12b90:	ldr	r1, [pc, #612]	; 12dfc <__assert_fail@plt+0x1e68>
   12b94:	mov	r0, r4
   12b98:	bl	10db4 <dcgettext@plt>
   12b9c:	ldr	r1, [r5]
   12ba0:	bl	10d24 <fputs_unlocked@plt>
   12ba4:	mov	r2, #5
   12ba8:	ldr	r1, [pc, #592]	; 12e00 <__assert_fail@plt+0x1e6c>
   12bac:	mov	r0, r4
   12bb0:	bl	10db4 <dcgettext@plt>
   12bb4:	ldr	r1, [r5]
   12bb8:	bl	10d24 <fputs_unlocked@plt>
   12bbc:	mov	r2, #5
   12bc0:	ldr	r1, [pc, #572]	; 12e04 <__assert_fail@plt+0x1e70>
   12bc4:	mov	r0, r4
   12bc8:	bl	10db4 <dcgettext@plt>
   12bcc:	ldr	r1, [r5]
   12bd0:	bl	10d24 <fputs_unlocked@plt>
   12bd4:	mov	r2, #5
   12bd8:	ldr	r1, [pc, #552]	; 12e08 <__assert_fail@plt+0x1e74>
   12bdc:	mov	r0, r4
   12be0:	bl	10db4 <dcgettext@plt>
   12be4:	ldr	r1, [r5]
   12be8:	bl	10d24 <fputs_unlocked@plt>
   12bec:	mov	r2, #5
   12bf0:	ldr	r1, [pc, #532]	; 12e0c <__assert_fail@plt+0x1e78>
   12bf4:	mov	r0, r4
   12bf8:	bl	10db4 <dcgettext@plt>
   12bfc:	ldr	r1, [r5]
   12c00:	bl	10d24 <fputs_unlocked@plt>
   12c04:	ldr	lr, [pc, #516]	; 12e10 <__assert_fail@plt+0x1e7c>
   12c08:	add	ip, sp, #4
   12c0c:	ldm	lr!, {r0, r1, r2, r3}
   12c10:	stmia	ip!, {r0, r1, r2, r3}
   12c14:	ldm	lr!, {r0, r1, r2, r3}
   12c18:	ldr	r6, [sp, #4]
   12c1c:	stmia	ip!, {r0, r1, r2, r3}
   12c20:	cmp	r6, #0
   12c24:	ldm	lr!, {r0, r1, r2, r3}
   12c28:	addeq	r5, sp, #4
   12c2c:	stmia	ip!, {r0, r1, r2, r3}
   12c30:	ldm	lr, {r0, r1}
   12c34:	stm	ip, {r0, r1}
   12c38:	beq	12c68 <__assert_fail@plt+0x1cd4>
   12c3c:	ldr	r7, [pc, #464]	; 12e14 <__assert_fail@plt+0x1e80>
   12c40:	add	r5, sp, #4
   12c44:	b	12c54 <__assert_fail@plt+0x1cc0>
   12c48:	ldr	r6, [r5, #8]!
   12c4c:	cmp	r6, #0
   12c50:	beq	12c68 <__assert_fail@plt+0x1cd4>
   12c54:	mov	r1, r6
   12c58:	mov	r0, r7
   12c5c:	bl	10d3c <strcmp@plt>
   12c60:	cmp	r0, #0
   12c64:	bne	12c48 <__assert_fail@plt+0x1cb4>
   12c68:	ldr	r5, [r5, #4]
   12c6c:	mov	r2, #5
   12c70:	cmp	r5, #0
   12c74:	ldr	r1, [pc, #412]	; 12e18 <__assert_fail@plt+0x1e84>
   12c78:	beq	12d20 <__assert_fail@plt+0x1d8c>
   12c7c:	mov	r0, #0
   12c80:	bl	10db4 <dcgettext@plt>
   12c84:	ldr	r3, [pc, #400]	; 12e1c <__assert_fail@plt+0x1e88>
   12c88:	ldr	r2, [pc, #400]	; 12e20 <__assert_fail@plt+0x1e8c>
   12c8c:	mov	r1, r0
   12c90:	mov	r0, #1
   12c94:	bl	10eec <__printf_chk@plt>
   12c98:	mov	r1, #0
   12c9c:	mov	r0, #5
   12ca0:	bl	10f34 <setlocale@plt>
   12ca4:	cmp	r0, #0
   12ca8:	ldreq	r6, [pc, #356]	; 12e14 <__assert_fail@plt+0x1e80>
   12cac:	beq	12cc8 <__assert_fail@plt+0x1d34>
   12cb0:	mov	r2, #3
   12cb4:	ldr	r1, [pc, #360]	; 12e24 <__assert_fail@plt+0x1e90>
   12cb8:	bl	10f70 <strncmp@plt>
   12cbc:	ldr	r6, [pc, #336]	; 12e14 <__assert_fail@plt+0x1e80>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12db0 <__assert_fail@plt+0x1e1c>
   12cc8:	mov	r2, #5
   12ccc:	ldr	r1, [pc, #340]	; 12e28 <__assert_fail@plt+0x1e94>
   12cd0:	mov	r0, #0
   12cd4:	bl	10db4 <dcgettext@plt>
   12cd8:	ldr	r3, [pc, #308]	; 12e14 <__assert_fail@plt+0x1e80>
   12cdc:	ldr	r2, [pc, #312]	; 12e1c <__assert_fail@plt+0x1e88>
   12ce0:	mov	r1, r0
   12ce4:	mov	r0, #1
   12ce8:	bl	10eec <__printf_chk@plt>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #308]	; 12e2c <__assert_fail@plt+0x1e98>
   12cf4:	mov	r0, #0
   12cf8:	bl	10db4 <dcgettext@plt>
   12cfc:	ldr	r2, [pc, #300]	; 12e30 <__assert_fail@plt+0x1e9c>
   12d00:	cmp	r5, r6
   12d04:	ldr	r3, [pc, #296]	; 12e34 <__assert_fail@plt+0x1ea0>
   12d08:	movne	r3, r2
   12d0c:	mov	r1, r0
   12d10:	mov	r2, r5
   12d14:	mov	r0, #1
   12d18:	bl	10eec <__printf_chk@plt>
   12d1c:	b	12af0 <__assert_fail@plt+0x1b5c>
   12d20:	mov	r0, r5
   12d24:	bl	10db4 <dcgettext@plt>
   12d28:	ldr	r3, [pc, #236]	; 12e1c <__assert_fail@plt+0x1e88>
   12d2c:	ldr	r2, [pc, #236]	; 12e20 <__assert_fail@plt+0x1e8c>
   12d30:	mov	r1, r0
   12d34:	mov	r0, #1
   12d38:	bl	10eec <__printf_chk@plt>
   12d3c:	mov	r1, r5
   12d40:	mov	r0, #5
   12d44:	bl	10f34 <setlocale@plt>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d64 <__assert_fail@plt+0x1dd0>
   12d50:	mov	r2, #3
   12d54:	ldr	r1, [pc, #200]	; 12e24 <__assert_fail@plt+0x1e90>
   12d58:	bl	10f70 <strncmp@plt>
   12d5c:	cmp	r0, #0
   12d60:	bne	12da8 <__assert_fail@plt+0x1e14>
   12d64:	mov	r2, #5
   12d68:	ldr	r1, [pc, #184]	; 12e28 <__assert_fail@plt+0x1e94>
   12d6c:	mov	r0, #0
   12d70:	bl	10db4 <dcgettext@plt>
   12d74:	ldr	r3, [pc, #152]	; 12e14 <__assert_fail@plt+0x1e80>
   12d78:	ldr	r2, [pc, #156]	; 12e1c <__assert_fail@plt+0x1e88>
   12d7c:	mov	r5, r3
   12d80:	mov	r1, r0
   12d84:	mov	r0, #1
   12d88:	bl	10eec <__printf_chk@plt>
   12d8c:	ldr	r1, [pc, #152]	; 12e2c <__assert_fail@plt+0x1e98>
   12d90:	mov	r2, #5
   12d94:	mov	r0, #0
   12d98:	bl	10db4 <dcgettext@plt>
   12d9c:	ldr	r3, [pc, #144]	; 12e34 <__assert_fail@plt+0x1ea0>
   12da0:	mov	r1, r0
   12da4:	b	12d10 <__assert_fail@plt+0x1d7c>
   12da8:	ldr	r6, [pc, #100]	; 12e14 <__assert_fail@plt+0x1e80>
   12dac:	mov	r5, r6
   12db0:	mov	r2, #5
   12db4:	ldr	r1, [pc, #124]	; 12e38 <__assert_fail@plt+0x1ea4>
   12db8:	mov	r0, #0
   12dbc:	bl	10db4 <dcgettext@plt>
   12dc0:	ldr	r2, [pc, #76]	; 12e14 <__assert_fail@plt+0x1e80>
   12dc4:	mov	r1, r0
   12dc8:	mov	r0, #1
   12dcc:	bl	10eec <__printf_chk@plt>
   12dd0:	b	12cc8 <__assert_fail@plt+0x1d34>
   12dd4:	andeq	r7, r2, r8, lsl #30
   12dd8:	andeq	r8, r2, r0, asr r1
   12ddc:	andeq	r7, r1, ip, lsr #1
   12de0:	andeq	r8, r2, ip, ror #2
   12de4:	ldrdeq	r7, [r1], -r4
   12de8:	andeq	r8, r2, r4, asr r1
   12dec:	strdeq	r7, [r1], -r8
   12df0:	andeq	r7, r1, r0, lsl #3
   12df4:			; <UNDEFINED> instruction: 0x000171b8
   12df8:	andeq	r7, r1, r4, lsl #4
   12dfc:	muleq	r1, r4, r3
   12e00:	andeq	r7, r1, r8, lsl r4
   12e04:	andeq	r7, r1, r8, asr r4
   12e08:	andeq	r7, r1, r8, lsl #9
   12e0c:	andeq	r7, r1, r0, asr #9
   12e10:	andeq	r6, r1, r4, ror #29
   12e14:	andeq	r7, r1, r4, lsr #1
   12e18:	andeq	r7, r1, ip, asr r5
   12e1c:	andeq	r7, r1, r4, ror r5
   12e20:	muleq	r1, ip, r5
   12e24:	andeq	r7, r1, ip, lsr #11
   12e28:	strdeq	r7, [r1], -r8
   12e2c:	andeq	r7, r1, r8, lsl r6
   12e30:	strdeq	r7, [r1], -r4
   12e34:	andeq	r7, r1, ip, asr #14
   12e38:			; <UNDEFINED> instruction: 0x000175b0
   12e3c:	ldr	r3, [pc, #4]	; 12e48 <__assert_fail@plt+0x1eb4>
   12e40:	str	r0, [r3]
   12e44:	bx	lr
   12e48:	andeq	r8, r2, r4, ror #2
   12e4c:	ldr	r3, [pc, #4]	; 12e58 <__assert_fail@plt+0x1ec4>
   12e50:	strb	r0, [r3, #4]
   12e54:	bx	lr
   12e58:	andeq	r8, r2, r4, ror #2
   12e5c:	ldr	r3, [pc, #180]	; 12f18 <__assert_fail@plt+0x1f84>
   12e60:	push	{r4, r5, r6, lr}
   12e64:	sub	sp, sp, #8
   12e68:	ldr	r0, [r3]
   12e6c:	bl	16774 <__assert_fail@plt+0x57e0>
   12e70:	cmp	r0, #0
   12e74:	beq	12e9c <__assert_fail@plt+0x1f08>
   12e78:	bl	10ec8 <__errno_location@plt>
   12e7c:	ldr	r5, [pc, #152]	; 12f1c <__assert_fail@plt+0x1f88>
   12e80:	ldrb	r3, [r5, #4]
   12e84:	cmp	r3, #0
   12e88:	mov	r4, r0
   12e8c:	beq	12eb8 <__assert_fail@plt+0x1f24>
   12e90:	ldr	r3, [r0]
   12e94:	cmp	r3, #32
   12e98:	bne	12eb8 <__assert_fail@plt+0x1f24>
   12e9c:	ldr	r3, [pc, #124]	; 12f20 <__assert_fail@plt+0x1f8c>
   12ea0:	ldr	r0, [r3]
   12ea4:	bl	16774 <__assert_fail@plt+0x57e0>
   12ea8:	cmp	r0, #0
   12eac:	bne	12ef8 <__assert_fail@plt+0x1f64>
   12eb0:	add	sp, sp, #8
   12eb4:	pop	{r4, r5, r6, pc}
   12eb8:	mov	r2, #5
   12ebc:	ldr	r1, [pc, #96]	; 12f24 <__assert_fail@plt+0x1f90>
   12ec0:	mov	r0, #0
   12ec4:	bl	10db4 <dcgettext@plt>
   12ec8:	mov	r6, r0
   12ecc:	ldr	r0, [r5]
   12ed0:	cmp	r0, #0
   12ed4:	beq	12f04 <__assert_fail@plt+0x1f70>
   12ed8:	ldr	r4, [r4]
   12edc:	bl	15154 <__assert_fail@plt+0x41c0>
   12ee0:	mov	r1, r4
   12ee4:	str	r6, [sp]
   12ee8:	ldr	r2, [pc, #56]	; 12f28 <__assert_fail@plt+0x1f94>
   12eec:	mov	r3, r0
   12ef0:	mov	r0, #0
   12ef4:	bl	10e38 <error@plt>
   12ef8:	ldr	r3, [pc, #44]	; 12f2c <__assert_fail@plt+0x1f98>
   12efc:	ldr	r0, [r3]
   12f00:	bl	10d6c <_exit@plt>
   12f04:	mov	r3, r6
   12f08:	ldr	r1, [r4]
   12f0c:	ldr	r2, [pc, #28]	; 12f30 <__assert_fail@plt+0x1f9c>
   12f10:	bl	10e38 <error@plt>
   12f14:	b	12ef8 <__assert_fail@plt+0x1f64>
   12f18:	andeq	r8, r2, r4, asr r1
   12f1c:	andeq	r8, r2, r4, ror #2
   12f20:	andeq	r8, r2, r0, asr r1
   12f24:	andeq	r7, r1, r4, lsl r8
   12f28:			; <UNDEFINED> instruction: 0x000176b8
   12f2c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12f30:			; <UNDEFINED> instruction: 0x000176bc
   12f34:	push	{r4, r5, r6, r7, r8, lr}
   12f38:	subs	r5, r2, #0
   12f3c:	beq	12f9c <__assert_fail@plt+0x2008>
   12f40:	mov	r8, r0
   12f44:	mov	r6, r1
   12f48:	mov	r7, #0
   12f4c:	b	12f68 <__assert_fail@plt+0x1fd4>
   12f50:	cmp	r0, #0
   12f54:	beq	12f8c <__assert_fail@plt+0x1ff8>
   12f58:	subs	r5, r5, r0
   12f5c:	add	r7, r7, r0
   12f60:	add	r6, r6, r0
   12f64:	beq	12f84 <__assert_fail@plt+0x1ff0>
   12f68:	mov	r2, r5
   12f6c:	mov	r1, r6
   12f70:	mov	r0, r8
   12f74:	bl	1534c <__assert_fail@plt+0x43b8>
   12f78:	cmn	r0, #1
   12f7c:	mov	r4, r0
   12f80:	bne	12f50 <__assert_fail@plt+0x1fbc>
   12f84:	mov	r0, r7
   12f88:	pop	{r4, r5, r6, r7, r8, pc}
   12f8c:	bl	10ec8 <__errno_location@plt>
   12f90:	str	r4, [r0]
   12f94:	mov	r0, r7
   12f98:	pop	{r4, r5, r6, r7, r8, pc}
   12f9c:	mov	r7, r5
   12fa0:	b	12f84 <__assert_fail@plt+0x1ff0>
   12fa4:	cmp	r0, #0
   12fa8:	sbcs	r3, r1, #0
   12fac:	mov	r3, #0
   12fb0:	push	{r4, r5, r6, r7, r8, lr}
   12fb4:	mov	r4, r0
   12fb8:	mov	r5, r1
   12fbc:	strb	r3, [r2, #20]
   12fc0:	add	r6, r2, #20
   12fc4:	blt	13014 <__assert_fail@plt+0x2080>
   12fc8:	mov	r0, r4
   12fcc:	mov	r1, r5
   12fd0:	mov	r2, #10
   12fd4:	mov	r3, #0
   12fd8:	bl	16c14 <__assert_fail@plt+0x5c80>
   12fdc:	mov	r0, r4
   12fe0:	mov	r1, r5
   12fe4:	mov	r3, #0
   12fe8:	add	r2, r2, #48	; 0x30
   12fec:	strb	r2, [r6, #-1]!
   12ff0:	mov	r2, #10
   12ff4:	bl	16c14 <__assert_fail@plt+0x5c80>
   12ff8:	mov	r4, r0
   12ffc:	mov	r5, r1
   13000:	orrs	r3, r4, r5
   13004:	bne	12fc8 <__assert_fail@plt+0x2034>
   13008:	mov	r0, r6
   1300c:	pop	{r4, r5, r6, r7, r8, pc}
   13010:	mov	r6, r7
   13014:	mov	r0, r4
   13018:	mov	r1, r5
   1301c:	mov	r2, #10
   13020:	mov	r3, #0
   13024:	bl	16c14 <__assert_fail@plt+0x5c80>
   13028:	mov	r0, r4
   1302c:	mov	r1, r5
   13030:	mov	r3, #0
   13034:	sub	r7, r6, #1
   13038:	rsb	r2, r2, #48	; 0x30
   1303c:	strb	r2, [r6, #-1]
   13040:	mov	r2, #10
   13044:	bl	16c14 <__assert_fail@plt+0x5c80>
   13048:	mov	r4, r0
   1304c:	mov	r5, r1
   13050:	orrs	r3, r4, r5
   13054:	bne	13010 <__assert_fail@plt+0x207c>
   13058:	mov	r3, #45	; 0x2d
   1305c:	sub	r6, r6, #2
   13060:	strb	r3, [r7, #-1]
   13064:	mov	r0, r6
   13068:	pop	{r4, r5, r6, r7, r8, pc}
   1306c:	push	{r4, r5, r6, lr}
   13070:	mov	r4, r0
   13074:	mov	r5, r1
   13078:	add	r6, r2, #20
   1307c:	mov	r3, #0
   13080:	strb	r3, [r2, #20]
   13084:	mov	r0, r4
   13088:	mov	r1, r5
   1308c:	mov	r2, #10
   13090:	mov	r3, #0
   13094:	bl	16ce8 <__assert_fail@plt+0x5d54>
   13098:	mov	r0, r4
   1309c:	mov	r1, r5
   130a0:	mov	r3, #0
   130a4:	add	r2, r2, #48	; 0x30
   130a8:	strb	r2, [r6, #-1]!
   130ac:	mov	r2, #10
   130b0:	bl	16ce8 <__assert_fail@plt+0x5d54>
   130b4:	cmp	r5, #0
   130b8:	cmpeq	r4, #9
   130bc:	mov	r5, r1
   130c0:	mov	r4, r0
   130c4:	bhi	13084 <__assert_fail@plt+0x20f0>
   130c8:	mov	r0, r6
   130cc:	pop	{r4, r5, r6, pc}
   130d0:	push	{r4, r5, r6, lr}
   130d4:	subs	r4, r0, #0
   130d8:	beq	1314c <__assert_fail@plt+0x21b8>
   130dc:	mov	r1, #47	; 0x2f
   130e0:	bl	10f40 <strrchr@plt>
   130e4:	subs	r5, r0, #0
   130e8:	beq	13138 <__assert_fail@plt+0x21a4>
   130ec:	add	r6, r5, #1
   130f0:	sub	r3, r6, r4
   130f4:	cmp	r3, #6
   130f8:	ble	13138 <__assert_fail@plt+0x21a4>
   130fc:	mov	r2, #7
   13100:	ldr	r1, [pc, #96]	; 13168 <__assert_fail@plt+0x21d4>
   13104:	sub	r0, r5, #6
   13108:	bl	10f70 <strncmp@plt>
   1310c:	cmp	r0, #0
   13110:	bne	13138 <__assert_fail@plt+0x21a4>
   13114:	mov	r2, #3
   13118:	ldr	r1, [pc, #76]	; 1316c <__assert_fail@plt+0x21d8>
   1311c:	mov	r0, r6
   13120:	bl	10f70 <strncmp@plt>
   13124:	cmp	r0, #0
   13128:	movne	r4, r6
   1312c:	ldreq	r3, [pc, #60]	; 13170 <__assert_fail@plt+0x21dc>
   13130:	addeq	r4, r5, #4
   13134:	streq	r4, [r3]
   13138:	ldr	r2, [pc, #52]	; 13174 <__assert_fail@plt+0x21e0>
   1313c:	ldr	r3, [pc, #52]	; 13178 <__assert_fail@plt+0x21e4>
   13140:	str	r4, [r2]
   13144:	str	r4, [r3]
   13148:	pop	{r4, r5, r6, pc}
   1314c:	ldr	r3, [pc, #40]	; 1317c <__assert_fail@plt+0x21e8>
   13150:	mov	r2, #55	; 0x37
   13154:	mov	r1, #1
   13158:	ldr	r3, [r3]
   1315c:	ldr	r0, [pc, #28]	; 13180 <__assert_fail@plt+0x21ec>
   13160:	bl	10dfc <fwrite@plt>
   13164:	bl	10f7c <abort@plt>
   13168:	andeq	r7, r1, r8, asr r8
   1316c:	andeq	r7, r1, r0, ror #16
   13170:	andeq	r8, r2, r0, asr #2
   13174:	andeq	r8, r2, ip, ror #2
   13178:	andeq	r8, r2, r4, asr #2
   1317c:	andeq	r8, r2, r0, asr r1
   13180:	andeq	r7, r1, r0, lsr #16
   13184:	push	{r4, lr}
   13188:	mov	r2, #48	; 0x30
   1318c:	mov	r4, r1
   13190:	mov	r1, #0
   13194:	bl	10ee0 <memset@plt>
   13198:	cmp	r4, #10
   1319c:	beq	131a8 <__assert_fail@plt+0x2214>
   131a0:	str	r4, [r0]
   131a4:	pop	{r4, pc}
   131a8:	bl	10f7c <abort@plt>
   131ac:	push	{r4, r5, r6, lr}
   131b0:	mov	r2, #5
   131b4:	mov	r5, r0
   131b8:	mov	r6, r1
   131bc:	mov	r1, r0
   131c0:	mov	r0, #0
   131c4:	bl	10db4 <dcgettext@plt>
   131c8:	cmp	r5, r0
   131cc:	mov	r4, r0
   131d0:	beq	131dc <__assert_fail@plt+0x2248>
   131d4:	mov	r0, r4
   131d8:	pop	{r4, r5, r6, pc}
   131dc:	bl	16834 <__assert_fail@plt+0x58a0>
   131e0:	ldrb	r3, [r0]
   131e4:	bic	r3, r3, #32
   131e8:	cmp	r3, #85	; 0x55
   131ec:	bne	1324c <__assert_fail@plt+0x22b8>
   131f0:	ldrb	r3, [r0, #1]
   131f4:	bic	r3, r3, #32
   131f8:	cmp	r3, #84	; 0x54
   131fc:	bne	132c4 <__assert_fail@plt+0x2330>
   13200:	ldrb	r3, [r0, #2]
   13204:	bic	r3, r3, #32
   13208:	cmp	r3, #70	; 0x46
   1320c:	bne	132c4 <__assert_fail@plt+0x2330>
   13210:	ldrb	r3, [r0, #3]
   13214:	cmp	r3, #45	; 0x2d
   13218:	bne	132c4 <__assert_fail@plt+0x2330>
   1321c:	ldrb	r3, [r0, #4]
   13220:	cmp	r3, #56	; 0x38
   13224:	bne	132c4 <__assert_fail@plt+0x2330>
   13228:	ldrb	r3, [r0, #5]
   1322c:	cmp	r3, #0
   13230:	bne	132c4 <__assert_fail@plt+0x2330>
   13234:	ldrb	r2, [r4]
   13238:	ldr	r3, [pc, #156]	; 132dc <__assert_fail@plt+0x2348>
   1323c:	ldr	r4, [pc, #156]	; 132e0 <__assert_fail@plt+0x234c>
   13240:	cmp	r2, #96	; 0x60
   13244:	movne	r4, r3
   13248:	b	131d4 <__assert_fail@plt+0x2240>
   1324c:	cmp	r3, #71	; 0x47
   13250:	bne	132c4 <__assert_fail@plt+0x2330>
   13254:	ldrb	r3, [r0, #1]
   13258:	bic	r3, r3, #32
   1325c:	cmp	r3, #66	; 0x42
   13260:	bne	132c4 <__assert_fail@plt+0x2330>
   13264:	ldrb	r3, [r0, #2]
   13268:	cmp	r3, #49	; 0x31
   1326c:	bne	132c4 <__assert_fail@plt+0x2330>
   13270:	ldrb	r3, [r0, #3]
   13274:	cmp	r3, #56	; 0x38
   13278:	bne	132c4 <__assert_fail@plt+0x2330>
   1327c:	ldrb	r3, [r0, #4]
   13280:	cmp	r3, #48	; 0x30
   13284:	bne	132c4 <__assert_fail@plt+0x2330>
   13288:	ldrb	r3, [r0, #5]
   1328c:	cmp	r3, #51	; 0x33
   13290:	bne	132c4 <__assert_fail@plt+0x2330>
   13294:	ldrb	r3, [r0, #6]
   13298:	cmp	r3, #48	; 0x30
   1329c:	bne	132c4 <__assert_fail@plt+0x2330>
   132a0:	ldrb	r3, [r0, #7]
   132a4:	cmp	r3, #0
   132a8:	bne	132c4 <__assert_fail@plt+0x2330>
   132ac:	ldrb	r2, [r4]
   132b0:	ldr	r3, [pc, #44]	; 132e4 <__assert_fail@plt+0x2350>
   132b4:	ldr	r4, [pc, #44]	; 132e8 <__assert_fail@plt+0x2354>
   132b8:	cmp	r2, #96	; 0x60
   132bc:	movne	r4, r3
   132c0:	b	131d4 <__assert_fail@plt+0x2240>
   132c4:	ldr	r3, [pc, #32]	; 132ec <__assert_fail@plt+0x2358>
   132c8:	ldr	r4, [pc, #32]	; 132f0 <__assert_fail@plt+0x235c>
   132cc:	cmp	r6, #9
   132d0:	movne	r4, r3
   132d4:	mov	r0, r4
   132d8:	pop	{r4, r5, r6, pc}
   132dc:			; <UNDEFINED> instruction: 0x000178bc
   132e0:	andeq	r7, r1, r8, asr #17
   132e4:	andeq	r7, r1, r0, asr #17
   132e8:	andeq	r7, r1, r4, asr #17
   132ec:	andeq	r7, r1, ip, asr #17
   132f0:			; <UNDEFINED> instruction: 0x000178b8
   132f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f8:	sub	sp, sp, #124	; 0x7c
   132fc:	ldr	ip, [pc, #3576]	; 140fc <__assert_fail@plt+0x3168>
   13300:	str	r3, [sp, #24]
   13304:	ldr	r3, [sp, #168]	; 0xa8
   13308:	ldr	ip, [ip]
   1330c:	str	r3, [sp, #56]	; 0x38
   13310:	ldr	r3, [sp, #172]	; 0xac
   13314:	ldr	r8, [sp, #160]	; 0xa0
   13318:	str	r3, [sp, #80]	; 0x50
   1331c:	ldr	r3, [sp, #176]	; 0xb0
   13320:	mov	fp, r0
   13324:	str	r3, [sp, #76]	; 0x4c
   13328:	mov	sl, r1
   1332c:	str	r2, [sp, #36]	; 0x24
   13330:	str	ip, [sp, #116]	; 0x74
   13334:	bl	10e14 <__ctype_get_mb_cur_max@plt>
   13338:	ldr	r3, [sp, #164]	; 0xa4
   1333c:	ands	r4, r3, #2
   13340:	movne	r3, #1
   13344:	moveq	r3, #0
   13348:	str	r3, [sp, #32]
   1334c:	str	r0, [sp, #64]	; 0x40
   13350:	cmp	r8, #10
   13354:	ldrls	pc, [pc, r8, lsl #2]
   13358:	b	14b08 <__assert_fail@plt+0x3b74>
   1335c:	andeq	r3, r1, r0, asr r7
   13360:	andeq	r3, r1, r8, ror #15
   13364:	andeq	r3, r1, r8, ror #27
   13368:	andeq	r3, r1, r8, lsl #16
   1336c:			; <UNDEFINED> instruction: 0x000136bc
   13370:	andeq	r3, r1, r4, lsl #14
   13374:	andeq	r3, r1, r0, lsl #15
   13378:			; <UNDEFINED> instruction: 0x000137b8
   1337c:	andeq	r3, r1, r8, lsl #7
   13380:	andeq	r3, r1, r8, lsl #7
   13384:	andeq	r3, r1, r8, lsl #7
   13388:	cmp	r8, #10
   1338c:	beq	133b0 <__assert_fail@plt+0x241c>
   13390:	mov	r1, r8
   13394:	ldr	r0, [pc, #3428]	; 14100 <__assert_fail@plt+0x316c>
   13398:	bl	131ac <__assert_fail@plt+0x2218>
   1339c:	mov	r1, r8
   133a0:	str	r0, [sp, #80]	; 0x50
   133a4:	ldr	r0, [pc, #3420]	; 14108 <__assert_fail@plt+0x3174>
   133a8:	bl	131ac <__assert_fail@plt+0x2218>
   133ac:	str	r0, [sp, #76]	; 0x4c
   133b0:	cmp	r4, #0
   133b4:	movne	r4, #0
   133b8:	beq	147c8 <__assert_fail@plt+0x3834>
   133bc:	ldr	r7, [sp, #76]	; 0x4c
   133c0:	mov	r5, #0
   133c4:	mov	r6, #1
   133c8:	mov	r0, r7
   133cc:	str	r6, [sp, #40]	; 0x28
   133d0:	str	r5, [sp, #68]	; 0x44
   133d4:	bl	10ea4 <strlen@plt>
   133d8:	str	r6, [sp, #28]
   133dc:	str	r5, [sp, #44]	; 0x2c
   133e0:	str	r5, [sp, #72]	; 0x48
   133e4:	str	r7, [sp, #60]	; 0x3c
   133e8:	str	r0, [sp, #52]	; 0x34
   133ec:	str	r8, [sp, #160]	; 0xa0
   133f0:	mov	r8, fp
   133f4:	ldr	fp, [sp, #160]	; 0xa0
   133f8:	mov	r9, #0
   133fc:	ldr	r3, [sp, #24]
   13400:	cmn	r3, #1
   13404:	beq	1396c <__assert_fail@plt+0x29d8>
   13408:	ldr	r3, [sp, #24]
   1340c:	subs	r6, r3, r9
   13410:	movne	r6, #1
   13414:	cmp	r6, #0
   13418:	beq	13984 <__assert_fail@plt+0x29f0>
   1341c:	ldr	r7, [sp, #28]
   13420:	ldr	r0, [sp, #36]	; 0x24
   13424:	cmp	fp, #2
   13428:	moveq	r7, #0
   1342c:	andne	r7, r7, #1
   13430:	add	r3, r0, r9
   13434:	cmp	r7, #0
   13438:	str	r3, [sp, #48]	; 0x30
   1343c:	beq	13e28 <__assert_fail@plt+0x2e94>
   13440:	ldr	r2, [sp, #52]	; 0x34
   13444:	cmp	r2, #0
   13448:	beq	1410c <__assert_fail@plt+0x3178>
   1344c:	ldr	r1, [sp, #24]
   13450:	cmp	r2, #1
   13454:	mov	r3, r2
   13458:	movls	r3, #0
   1345c:	movhi	r3, #1
   13460:	cmn	r1, #1
   13464:	movne	r3, #0
   13468:	cmp	r3, #0
   1346c:	add	r5, r9, r2
   13470:	beq	1347c <__assert_fail@plt+0x24e8>
   13474:	bl	10ea4 <strlen@plt>
   13478:	str	r0, [sp, #24]
   1347c:	ldr	r3, [sp, #24]
   13480:	cmp	r5, r3
   13484:	bhi	1410c <__assert_fail@plt+0x3178>
   13488:	ldr	r2, [sp, #52]	; 0x34
   1348c:	ldr	r1, [sp, #60]	; 0x3c
   13490:	ldr	r0, [sp, #48]	; 0x30
   13494:	bl	10da8 <memcmp@plt>
   13498:	cmp	r0, #0
   1349c:	bne	1410c <__assert_fail@plt+0x3178>
   134a0:	ldr	r3, [sp, #32]
   134a4:	cmp	r3, #0
   134a8:	bne	149c8 <__assert_fail@plt+0x3a34>
   134ac:	ldr	r3, [sp, #48]	; 0x30
   134b0:	ldrb	r5, [r3]
   134b4:	cmp	r5, #126	; 0x7e
   134b8:	ldrls	pc, [pc, r5, lsl #2]
   134bc:	b	13d8c <__assert_fail@plt+0x2df8>
   134c0:	andeq	r3, r1, r8, ror ip
   134c4:	andeq	r3, r1, ip, lsl #27
   134c8:	andeq	r3, r1, ip, lsl #27
   134cc:	andeq	r3, r1, ip, lsl #27
   134d0:	andeq	r3, r1, ip, lsl #27
   134d4:	andeq	r3, r1, ip, lsl #27
   134d8:	andeq	r3, r1, ip, lsl #27
   134dc:	andeq	r3, r1, r4, asr #26
   134e0:	andeq	r3, r1, r4, lsr sp
   134e4:	andeq	r3, r1, r4, lsr ip
   134e8:	strdeq	r3, [r1], -ip
   134ec:	andeq	r3, r1, r4, asr ip
   134f0:	andeq	r3, r1, ip, lsr ip
   134f4:	andeq	r3, r1, ip, ror #22
   134f8:	andeq	r3, r1, ip, lsl #27
   134fc:	andeq	r3, r1, ip, lsl #27
   13500:	andeq	r3, r1, ip, lsl #27
   13504:	andeq	r3, r1, ip, lsl #27
   13508:	andeq	r3, r1, ip, lsl #27
   1350c:	andeq	r3, r1, ip, lsl #27
   13510:	andeq	r3, r1, ip, lsl #27
   13514:	andeq	r3, r1, ip, lsl #27
   13518:	andeq	r3, r1, ip, lsl #27
   1351c:	andeq	r3, r1, ip, lsl #27
   13520:	andeq	r3, r1, ip, lsl #27
   13524:	andeq	r3, r1, ip, lsl #27
   13528:	andeq	r3, r1, ip, lsl #27
   1352c:	andeq	r3, r1, ip, lsl #27
   13530:	andeq	r3, r1, ip, lsl #27
   13534:	andeq	r3, r1, ip, lsl #27
   13538:	andeq	r3, r1, ip, lsl #27
   1353c:	andeq	r3, r1, ip, lsl #27
   13540:	andeq	r3, r1, ip, asr #26
   13544:	andeq	r3, r1, r0, ror #24
   13548:	andeq	r3, r1, r0, ror #24
   1354c:	andeq	r3, r1, r4, ror #26
   13550:	andeq	r3, r1, r0, ror #24
   13554:	andeq	r3, r1, r0, lsl #27
   13558:	andeq	r3, r1, r0, ror #24
   1355c:	andeq	r3, r1, r0, lsr #21
   13560:	andeq	r3, r1, r0, ror #24
   13564:	andeq	r3, r1, r0, ror #24
   13568:	andeq	r3, r1, r0, ror #24
   1356c:	andeq	r3, r1, r0, lsl #27
   13570:	andeq	r3, r1, r0, lsl #27
   13574:	andeq	r3, r1, r0, lsl #27
   13578:	andeq	r3, r1, r0, lsl #27
   1357c:	andeq	r3, r1, r0, lsl #27
   13580:	andeq	r3, r1, r0, lsl #27
   13584:	andeq	r3, r1, r0, lsl #27
   13588:	andeq	r3, r1, r0, lsl #27
   1358c:	andeq	r3, r1, r0, lsl #27
   13590:	andeq	r3, r1, r0, lsl #27
   13594:	andeq	r3, r1, r0, lsl #27
   13598:	andeq	r3, r1, r0, lsl #27
   1359c:	andeq	r3, r1, r0, lsl #27
   135a0:	andeq	r3, r1, r0, lsl #27
   135a4:	andeq	r3, r1, r0, lsl #27
   135a8:	andeq	r3, r1, r0, lsl #27
   135ac:	andeq	r3, r1, r0, ror #24
   135b0:	andeq	r3, r1, r0, ror #24
   135b4:	andeq	r3, r1, r0, ror #24
   135b8:	andeq	r3, r1, r0, ror #24
   135bc:	andeq	r3, r1, r4, ror sl
   135c0:	andeq	r3, r1, ip, lsl #27
   135c4:	andeq	r3, r1, r0, lsl #27
   135c8:	andeq	r3, r1, r0, lsl #27
   135cc:	andeq	r3, r1, r0, lsl #27
   135d0:	andeq	r3, r1, r0, lsl #27
   135d4:	andeq	r3, r1, r0, lsl #27
   135d8:	andeq	r3, r1, r0, lsl #27
   135dc:	andeq	r3, r1, r0, lsl #27
   135e0:	andeq	r3, r1, r0, lsl #27
   135e4:	andeq	r3, r1, r0, lsl #27
   135e8:	andeq	r3, r1, r0, lsl #27
   135ec:	andeq	r3, r1, r0, lsl #27
   135f0:	andeq	r3, r1, r0, lsl #27
   135f4:	andeq	r3, r1, r0, lsl #27
   135f8:	andeq	r3, r1, r0, lsl #27
   135fc:	andeq	r3, r1, r0, lsl #27
   13600:	andeq	r3, r1, r0, lsl #27
   13604:	andeq	r3, r1, r0, lsl #27
   13608:	andeq	r3, r1, r0, lsl #27
   1360c:	andeq	r3, r1, r0, lsl #27
   13610:	andeq	r3, r1, r0, lsl #27
   13614:	andeq	r3, r1, r0, lsl #27
   13618:	andeq	r3, r1, r0, lsl #27
   1361c:	andeq	r3, r1, r0, lsl #27
   13620:	andeq	r3, r1, r0, lsl #27
   13624:	andeq	r3, r1, r0, lsl #27
   13628:	andeq	r3, r1, r0, lsl #27
   1362c:	andeq	r3, r1, r0, ror #24
   13630:	andeq	r3, r1, ip, lsr #20
   13634:	andeq	r3, r1, r0, lsl #27
   13638:	andeq	r3, r1, r0, ror #24
   1363c:	andeq	r3, r1, r0, lsl #27
   13640:	andeq	r3, r1, r0, ror #24
   13644:	andeq	r3, r1, r0, lsl #27
   13648:	andeq	r3, r1, r0, lsl #27
   1364c:	andeq	r3, r1, r0, lsl #27
   13650:	andeq	r3, r1, r0, lsl #27
   13654:	andeq	r3, r1, r0, lsl #27
   13658:	andeq	r3, r1, r0, lsl #27
   1365c:	andeq	r3, r1, r0, lsl #27
   13660:	andeq	r3, r1, r0, lsl #27
   13664:	andeq	r3, r1, r0, lsl #27
   13668:	andeq	r3, r1, r0, lsl #27
   1366c:	andeq	r3, r1, r0, lsl #27
   13670:	andeq	r3, r1, r0, lsl #27
   13674:	andeq	r3, r1, r0, lsl #27
   13678:	andeq	r3, r1, r0, lsl #27
   1367c:	andeq	r3, r1, r0, lsl #27
   13680:	andeq	r3, r1, r0, lsl #27
   13684:	andeq	r3, r1, r0, lsl #27
   13688:	andeq	r3, r1, r0, lsl #27
   1368c:	andeq	r3, r1, r0, lsl #27
   13690:	andeq	r3, r1, r0, lsl #27
   13694:	andeq	r3, r1, r0, lsl #27
   13698:	andeq	r3, r1, r0, lsl #27
   1369c:	andeq	r3, r1, r0, lsl #27
   136a0:	andeq	r3, r1, r0, lsl #27
   136a4:	andeq	r3, r1, r0, lsl #27
   136a8:	andeq	r3, r1, r0, lsl #27
   136ac:	andeq	r3, r1, r4, asr #16
   136b0:	andeq	r3, r1, r0, ror #24
   136b4:	andeq	r3, r1, r4, asr #16
   136b8:	andeq	r3, r1, r4, ror #26
   136bc:	cmp	r4, #0
   136c0:	moveq	r3, #1
   136c4:	streq	r3, [sp, #28]
   136c8:	beq	13df4 <__assert_fail@plt+0x2e60>
   136cc:	mov	r3, #0
   136d0:	mov	r4, r3
   136d4:	mov	r2, #1
   136d8:	str	r2, [sp, #40]	; 0x28
   136dc:	str	r3, [sp, #68]	; 0x44
   136e0:	str	r2, [sp, #32]
   136e4:	str	r2, [sp, #52]	; 0x34
   136e8:	ldr	r3, [pc, #2584]	; 14108 <__assert_fail@plt+0x3174>
   136ec:	str	r4, [sp, #44]	; 0x2c
   136f0:	str	r4, [sp, #72]	; 0x48
   136f4:	str	r4, [sp, #28]
   136f8:	str	r3, [sp, #60]	; 0x3c
   136fc:	mov	r8, #2
   13700:	b	133ec <__assert_fail@plt+0x2458>
   13704:	cmp	r4, #0
   13708:	bne	14994 <__assert_fail@plt+0x3a00>
   1370c:	cmp	sl, #0
   13710:	beq	14754 <__assert_fail@plt+0x37c0>
   13714:	mov	r3, #34	; 0x22
   13718:	strb	r3, [fp]
   1371c:	ldr	r3, [pc, #2528]	; 14104 <__assert_fail@plt+0x3170>
   13720:	mov	r1, r4
   13724:	mov	r2, #1
   13728:	str	r4, [sp, #68]	; 0x44
   1372c:	str	r2, [sp, #40]	; 0x28
   13730:	mov	r4, r2
   13734:	str	r1, [sp, #44]	; 0x2c
   13738:	str	r1, [sp, #72]	; 0x48
   1373c:	str	r1, [sp, #32]
   13740:	str	r2, [sp, #28]
   13744:	str	r2, [sp, #52]	; 0x34
   13748:	str	r3, [sp, #60]	; 0x3c
   1374c:	b	133ec <__assert_fail@plt+0x2458>
   13750:	mov	r3, #0
   13754:	str	r3, [sp, #68]	; 0x44
   13758:	str	r3, [sp, #44]	; 0x2c
   1375c:	str	r3, [sp, #32]
   13760:	str	r3, [sp, #28]
   13764:	str	r3, [sp, #60]	; 0x3c
   13768:	mov	r3, #1
   1376c:	str	r8, [sp, #72]	; 0x48
   13770:	str	r8, [sp, #52]	; 0x34
   13774:	mov	r4, r8
   13778:	str	r3, [sp, #40]	; 0x28
   1377c:	b	133ec <__assert_fail@plt+0x2458>
   13780:	mov	r3, #1
   13784:	str	r3, [sp, #40]	; 0x28
   13788:	str	r3, [sp, #32]
   1378c:	str	r3, [sp, #28]
   13790:	str	r3, [sp, #52]	; 0x34
   13794:	ldr	r3, [pc, #2408]	; 14104 <__assert_fail@plt+0x3170>
   13798:	mov	r2, #0
   1379c:	mov	r4, r2
   137a0:	str	r2, [sp, #68]	; 0x44
   137a4:	str	r2, [sp, #44]	; 0x2c
   137a8:	str	r2, [sp, #72]	; 0x48
   137ac:	str	r3, [sp, #60]	; 0x3c
   137b0:	mov	r8, #5
   137b4:	b	133ec <__assert_fail@plt+0x2458>
   137b8:	mov	r3, #0
   137bc:	mov	r2, #1
   137c0:	str	r2, [sp, #40]	; 0x28
   137c4:	mov	r4, r3
   137c8:	str	r3, [sp, #68]	; 0x44
   137cc:	str	r2, [sp, #28]
   137d0:	str	r3, [sp, #44]	; 0x2c
   137d4:	str	r3, [sp, #72]	; 0x48
   137d8:	str	r3, [sp, #32]
   137dc:	str	r3, [sp, #52]	; 0x34
   137e0:	str	r3, [sp, #60]	; 0x3c
   137e4:	b	133ec <__assert_fail@plt+0x2458>
   137e8:	mov	r2, #1
   137ec:	mov	r3, #0
   137f0:	str	r2, [sp, #40]	; 0x28
   137f4:	mov	r4, r3
   137f8:	str	r3, [sp, #68]	; 0x44
   137fc:	str	r8, [sp, #52]	; 0x34
   13800:	str	r2, [sp, #32]
   13804:	b	136e8 <__assert_fail@plt+0x2754>
   13808:	mov	r3, #1
   1380c:	str	r3, [sp, #40]	; 0x28
   13810:	str	r3, [sp, #32]
   13814:	str	r3, [sp, #28]
   13818:	str	r3, [sp, #52]	; 0x34
   1381c:	ldr	r3, [pc, #2276]	; 14108 <__assert_fail@plt+0x3174>
   13820:	mov	r2, #0
   13824:	mov	r4, r2
   13828:	str	r2, [sp, #68]	; 0x44
   1382c:	str	r2, [sp, #44]	; 0x2c
   13830:	str	r2, [sp, #72]	; 0x48
   13834:	str	r3, [sp, #60]	; 0x3c
   13838:	mov	r8, #2
   1383c:	b	133ec <__assert_fail@plt+0x2458>
   13840:	mov	r7, #0
   13844:	ldr	r3, [sp, #24]
   13848:	cmn	r3, #1
   1384c:	beq	14388 <__assert_fail@plt+0x33f4>
   13850:	ldr	r3, [sp, #24]
   13854:	subs	r3, r3, #1
   13858:	movne	r3, #1
   1385c:	cmp	r3, #0
   13860:	sub	r2, fp, #2
   13864:	clz	r2, r2
   13868:	lsr	r2, r2, #5
   1386c:	bne	13a68 <__assert_fail@plt+0x2ad4>
   13870:	cmp	r9, #0
   13874:	bne	13a68 <__assert_fail@plt+0x2ad4>
   13878:	ldr	r3, [sp, #32]
   1387c:	tst	r3, r2
   13880:	bne	13b88 <__assert_fail@plt+0x2bf4>
   13884:	ldr	r3, [sp, #28]
   13888:	eor	r3, r3, #1
   1388c:	orr	r3, r2, r3
   13890:	ldr	r2, [sp, #32]
   13894:	eor	r3, r3, #1
   13898:	orrs	r3, r2, r3
   1389c:	beq	138cc <__assert_fail@plt+0x2938>
   138a0:	mov	r3, #0
   138a4:	ldr	r1, [sp, #56]	; 0x38
   138a8:	cmp	r1, #0
   138ac:	beq	138cc <__assert_fail@plt+0x2938>
   138b0:	lsr	r2, r5, #5
   138b4:	and	r0, r5, #31
   138b8:	uxtb	r2, r2
   138bc:	ldr	r1, [r1, r2, lsl #2]
   138c0:	lsr	r2, r1, r0
   138c4:	tst	r2, #1
   138c8:	bne	138d4 <__assert_fail@plt+0x2940>
   138cc:	cmp	r7, #0
   138d0:	beq	13b24 <__assert_fail@plt+0x2b90>
   138d4:	sub	r2, fp, #2
   138d8:	clz	r2, r2
   138dc:	lsr	r2, r2, #5
   138e0:	ldr	r3, [sp, #32]
   138e4:	cmp	r3, #0
   138e8:	bne	13c14 <__assert_fail@plt+0x2c80>
   138ec:	ldr	r3, [sp, #44]	; 0x2c
   138f0:	eor	r3, r3, #1
   138f4:	ands	r3, r2, r3
   138f8:	beq	13930 <__assert_fail@plt+0x299c>
   138fc:	cmp	sl, r4
   13900:	movhi	r2, #39	; 0x27
   13904:	strbhi	r2, [r8, r4]
   13908:	add	r2, r4, #1
   1390c:	cmp	r2, sl
   13910:	movcc	r1, #36	; 0x24
   13914:	strbcc	r1, [r8, r2]
   13918:	add	r2, r4, #2
   1391c:	cmp	r2, sl
   13920:	add	r4, r4, #3
   13924:	movcc	r1, #39	; 0x27
   13928:	strbcc	r1, [r8, r2]
   1392c:	str	r3, [sp, #44]	; 0x2c
   13930:	cmp	r4, sl
   13934:	movcc	r3, #92	; 0x5c
   13938:	strbcc	r3, [r8, r4]
   1393c:	add	r9, r9, #1
   13940:	add	r4, r4, #1
   13944:	cmp	r4, sl
   13948:	ldr	r3, [sp, #40]	; 0x28
   1394c:	strbcc	r5, [r8, r4]
   13950:	cmp	r6, #0
   13954:	moveq	r3, #0
   13958:	str	r3, [sp, #40]	; 0x28
   1395c:	ldr	r3, [sp, #24]
   13960:	add	r4, r4, #1
   13964:	cmn	r3, #1
   13968:	bne	13408 <__assert_fail@plt+0x2474>
   1396c:	ldr	r3, [sp, #36]	; 0x24
   13970:	ldrb	r6, [r3, r9]
   13974:	adds	r6, r6, #0
   13978:	movne	r6, #1
   1397c:	cmp	r6, #0
   13980:	bne	1341c <__assert_fail@plt+0x2488>
   13984:	str	fp, [sp, #160]	; 0xa0
   13988:	mov	fp, r8
   1398c:	ldr	r8, [sp, #160]	; 0xa0
   13990:	ldr	r1, [sp, #32]
   13994:	cmp	r4, #0
   13998:	sub	r2, r8, #2
   1399c:	clz	r2, r2
   139a0:	lsr	r2, r2, #5
   139a4:	andeq	r3, r2, r1
   139a8:	movne	r3, #0
   139ac:	cmp	r3, #0
   139b0:	bne	14a9c <__assert_fail@plt+0x3b08>
   139b4:	eor	r3, r1, #1
   139b8:	ands	r2, r2, r3
   139bc:	beq	149d8 <__assert_fail@plt+0x3a44>
   139c0:	ldr	r3, [sp, #68]	; 0x44
   139c4:	cmp	r3, #0
   139c8:	beq	149dc <__assert_fail@plt+0x3a48>
   139cc:	ldr	r3, [sp, #40]	; 0x28
   139d0:	cmp	r3, #0
   139d4:	bne	14a58 <__assert_fail@plt+0x3ac4>
   139d8:	ldr	r3, [sp, #72]	; 0x48
   139dc:	adds	r3, r3, #0
   139e0:	movne	r3, #1
   139e4:	cmp	sl, #0
   139e8:	movne	r3, #0
   139ec:	cmp	r3, #0
   139f0:	ldreq	r2, [sp, #68]	; 0x44
   139f4:	beq	149dc <__assert_fail@plt+0x3a48>
   139f8:	ldr	sl, [sp, #72]	; 0x48
   139fc:	str	r3, [sp, #68]	; 0x44
   13a00:	ldr	r3, [pc, #1792]	; 14108 <__assert_fail@plt+0x3174>
   13a04:	mov	r2, #39	; 0x27
   13a08:	mov	r4, #1
   13a0c:	str	r3, [sp, #60]	; 0x3c
   13a10:	mov	r3, #0
   13a14:	strb	r2, [fp]
   13a18:	str	r4, [sp, #52]	; 0x34
   13a1c:	mov	r8, #2
   13a20:	str	r3, [sp, #32]
   13a24:	b	133ec <__assert_fail@plt+0x2458>
   13a28:	mov	r7, #0
   13a2c:	cmp	fp, #2
   13a30:	beq	14368 <__assert_fail@plt+0x33d4>
   13a34:	ldr	r3, [sp, #52]	; 0x34
   13a38:	ldr	r2, [sp, #28]
   13a3c:	ldr	r1, [sp, #32]
   13a40:	cmp	r3, #0
   13a44:	andne	r2, r2, r1
   13a48:	moveq	r2, #0
   13a4c:	cmp	r2, #0
   13a50:	moveq	r5, #92	; 0x5c
   13a54:	moveq	r3, r5
   13a58:	bne	14374 <__assert_fail@plt+0x33e0>
   13a5c:	ldr	r1, [sp, #28]
   13a60:	cmp	r1, #0
   13a64:	bne	14ae4 <__assert_fail@plt+0x3b50>
   13a68:	mov	r6, #0
   13a6c:	b	13884 <__assert_fail@plt+0x28f0>
   13a70:	mov	r7, #0
   13a74:	cmp	fp, #2
   13a78:	beq	143d8 <__assert_fail@plt+0x3444>
   13a7c:	cmp	fp, #5
   13a80:	beq	1439c <__assert_fail@plt+0x3408>
   13a84:	sub	r2, fp, #2
   13a88:	mov	r6, #0
   13a8c:	clz	r2, r2
   13a90:	mov	r5, #63	; 0x3f
   13a94:	lsr	r2, r2, #5
   13a98:	b	13884 <__assert_fail@plt+0x28f0>
   13a9c:	mov	r7, #0
   13aa0:	cmp	fp, #2
   13aa4:	strne	r6, [sp, #68]	; 0x44
   13aa8:	movne	r2, #0
   13aac:	movne	r5, #39	; 0x27
   13ab0:	bne	13884 <__assert_fail@plt+0x28f0>
   13ab4:	ldr	r3, [sp, #32]
   13ab8:	cmp	r3, #0
   13abc:	bne	147b8 <__assert_fail@plt+0x3824>
   13ac0:	cmp	sl, #0
   13ac4:	ldr	r3, [sp, #72]	; 0x48
   13ac8:	clz	r3, r3
   13acc:	lsr	r3, r3, #5
   13ad0:	moveq	r3, #0
   13ad4:	cmp	r3, #0
   13ad8:	bne	146ec <__assert_fail@plt+0x3758>
   13adc:	cmp	sl, r4
   13ae0:	movhi	r3, #39	; 0x27
   13ae4:	strbhi	r3, [r8, r4]
   13ae8:	add	r3, r4, #1
   13aec:	cmp	sl, r3
   13af0:	movhi	r2, #92	; 0x5c
   13af4:	strbhi	r2, [r8, r3]
   13af8:	add	r3, r4, #2
   13afc:	cmp	sl, r3
   13b00:	movhi	r2, #39	; 0x27
   13b04:	strbhi	r2, [r8, r3]
   13b08:	mov	r3, #0
   13b0c:	cmp	r7, #0
   13b10:	add	r4, r4, #3
   13b14:	str	r3, [sp, #44]	; 0x2c
   13b18:	str	r6, [sp, #68]	; 0x44
   13b1c:	mov	r5, #39	; 0x27
   13b20:	bne	138d4 <__assert_fail@plt+0x2940>
   13b24:	ldr	r2, [sp, #44]	; 0x2c
   13b28:	eor	r3, r3, #1
   13b2c:	and	r3, r3, r2
   13b30:	add	r9, r9, #1
   13b34:	uxtb	r3, r3
   13b38:	cmp	r3, #0
   13b3c:	beq	13944 <__assert_fail@plt+0x29b0>
   13b40:	cmp	sl, r4
   13b44:	movhi	r3, #39	; 0x27
   13b48:	strbhi	r3, [r8, r4]
   13b4c:	add	r3, r4, #1
   13b50:	cmp	sl, r3
   13b54:	movhi	r2, #39	; 0x27
   13b58:	strbhi	r2, [r8, r3]
   13b5c:	mov	r3, #0
   13b60:	add	r4, r4, #2
   13b64:	str	r3, [sp, #44]	; 0x2c
   13b68:	b	13944 <__assert_fail@plt+0x29b0>
   13b6c:	mov	r3, #114	; 0x72
   13b70:	ldr	r1, [sp, #32]
   13b74:	sub	r2, fp, #2
   13b78:	clz	r2, r2
   13b7c:	lsr	r2, r2, #5
   13b80:	tst	r2, r1
   13b84:	beq	13a5c <__assert_fail@plt+0x2ac8>
   13b88:	mov	fp, r8
   13b8c:	mov	r8, #2
   13b90:	ldr	r3, [sp, #28]
   13b94:	cmp	r3, #0
   13b98:	movne	r8, #4
   13b9c:	ldr	r3, [sp, #164]	; 0xa4
   13ba0:	mov	ip, #0
   13ba4:	bic	r3, r3, #2
   13ba8:	str	r3, [sp, #4]
   13bac:	ldr	r3, [sp, #76]	; 0x4c
   13bb0:	str	r8, [sp]
   13bb4:	str	r3, [sp, #16]
   13bb8:	ldr	r3, [sp, #80]	; 0x50
   13bbc:	ldr	r2, [sp, #36]	; 0x24
   13bc0:	str	r3, [sp, #12]
   13bc4:	mov	r1, sl
   13bc8:	ldr	r3, [sp, #24]
   13bcc:	mov	r0, fp
   13bd0:	str	ip, [sp, #8]
   13bd4:	bl	132f4 <__assert_fail@plt+0x2360>
   13bd8:	mov	r4, r0
   13bdc:	ldr	r3, [pc, #1304]	; 140fc <__assert_fail@plt+0x3168>
   13be0:	ldr	r2, [sp, #116]	; 0x74
   13be4:	mov	r0, r4
   13be8:	ldr	r3, [r3]
   13bec:	cmp	r2, r3
   13bf0:	bne	14ae0 <__assert_fail@plt+0x3b4c>
   13bf4:	add	sp, sp, #124	; 0x7c
   13bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfc:	mov	r5, #110	; 0x6e
   13c00:	ldr	r3, [sp, #32]
   13c04:	mov	r2, #0
   13c08:	cmp	r3, #0
   13c0c:	mov	r6, r2
   13c10:	beq	138ec <__assert_fail@plt+0x2958>
   13c14:	str	fp, [sp, #160]	; 0xa0
   13c18:	mov	fp, r8
   13c1c:	ldr	r8, [sp, #160]	; 0xa0
   13c20:	mov	r3, r2
   13c24:	ldr	r2, [sp, #28]
   13c28:	and	r2, r2, r3
   13c2c:	str	r2, [sp, #28]
   13c30:	b	13b90 <__assert_fail@plt+0x2bfc>
   13c34:	mov	r5, #116	; 0x74
   13c38:	b	13c00 <__assert_fail@plt+0x2c6c>
   13c3c:	mov	r5, #102	; 0x66
   13c40:	ldr	r3, [sp, #32]
   13c44:	cmp	r3, #0
   13c48:	bne	147f4 <__assert_fail@plt+0x3860>
   13c4c:	mov	r6, #0
   13c50:	b	13930 <__assert_fail@plt+0x299c>
   13c54:	mov	r5, #118	; 0x76
   13c58:	b	13c40 <__assert_fail@plt+0x2cac>
   13c5c:	mov	r7, #0
   13c60:	mov	r6, #0
   13c64:	b	138a0 <__assert_fail@plt+0x290c>
   13c68:	ldr	r3, [sp, #32]
   13c6c:	cmp	r3, #0
   13c70:	bne	14a38 <__assert_fail@plt+0x3aa4>
   13c74:	mov	r7, r3
   13c78:	ldr	r3, [sp, #44]	; 0x2c
   13c7c:	sub	r2, fp, #2
   13c80:	eor	r3, r3, #1
   13c84:	clz	r2, r2
   13c88:	lsr	r2, r2, #5
   13c8c:	ands	r3, r2, r3
   13c90:	beq	146d8 <__assert_fail@plt+0x3744>
   13c94:	cmp	sl, r4
   13c98:	movhi	r1, #39	; 0x27
   13c9c:	strbhi	r1, [r8, r4]
   13ca0:	add	r1, r4, #1
   13ca4:	cmp	sl, r1
   13ca8:	movhi	r0, #36	; 0x24
   13cac:	strbhi	r0, [r8, r1]
   13cb0:	add	r1, r4, #2
   13cb4:	cmp	sl, r1
   13cb8:	movhi	r0, #39	; 0x27
   13cbc:	strbhi	r0, [r8, r1]
   13cc0:	add	r1, r4, #3
   13cc4:	cmp	sl, r1
   13cc8:	bls	14738 <__assert_fail@plt+0x37a4>
   13ccc:	mov	r4, r1
   13cd0:	mov	r1, #92	; 0x5c
   13cd4:	strb	r1, [r8, r4]
   13cd8:	mov	r1, r4
   13cdc:	str	r3, [sp, #44]	; 0x2c
   13ce0:	cmp	fp, #2
   13ce4:	add	r4, r4, #1
   13ce8:	beq	14780 <__assert_fail@plt+0x37ec>
   13cec:	ldr	r0, [sp, #24]
   13cf0:	add	r3, r9, #1
   13cf4:	cmp	r3, r0
   13cf8:	bcs	13d10 <__assert_fail@plt+0x2d7c>
   13cfc:	ldr	r0, [sp, #36]	; 0x24
   13d00:	ldrb	r3, [r0, r3]
   13d04:	sub	r3, r3, #48	; 0x30
   13d08:	cmp	r3, #9
   13d0c:	bls	14790 <__assert_fail@plt+0x37fc>
   13d10:	mov	r5, #48	; 0x30
   13d14:	ldr	r3, [sp, #28]
   13d18:	eor	r3, r3, #1
   13d1c:	orrs	r2, r2, r3
   13d20:	mov	r3, r6
   13d24:	moveq	r6, r2
   13d28:	beq	138a4 <__assert_fail@plt+0x2910>
   13d2c:	mov	r6, #0
   13d30:	b	138cc <__assert_fail@plt+0x2938>
   13d34:	mov	r2, #0
   13d38:	mov	r6, r2
   13d3c:	mov	r5, #98	; 0x62
   13d40:	b	138ec <__assert_fail@plt+0x2958>
   13d44:	mov	r5, #97	; 0x61
   13d48:	b	13c4c <__assert_fail@plt+0x2cb8>
   13d4c:	mov	r3, r7
   13d50:	mov	r6, r7
   13d54:	mov	r2, #0
   13d58:	mov	r7, r3
   13d5c:	mov	r5, #32
   13d60:	b	13884 <__assert_fail@plt+0x28f0>
   13d64:	cmp	r9, #0
   13d68:	mov	r3, r7
   13d6c:	bne	14334 <__assert_fail@plt+0x33a0>
   13d70:	mov	r6, r7
   13d74:	mov	r2, r9
   13d78:	mov	r7, r3
   13d7c:	b	13884 <__assert_fail@plt+0x28f0>
   13d80:	mov	r6, r7
   13d84:	b	138a0 <__assert_fail@plt+0x290c>
   13d88:	mov	r7, #0
   13d8c:	ldr	r3, [sp, #64]	; 0x40
   13d90:	cmp	r3, #1
   13d94:	bne	143f0 <__assert_fail@plt+0x345c>
   13d98:	bl	10e8c <__ctype_b_loc@plt>
   13d9c:	ldr	r2, [sp, #64]	; 0x40
   13da0:	sxth	r3, r5
   13da4:	mov	ip, r2
   13da8:	lsl	r3, r3, #1
   13dac:	ldr	r2, [r0]
   13db0:	ldrh	r3, [r2, r3]
   13db4:	and	r3, r3, #16384	; 0x4000
   13db8:	cmp	r3, #0
   13dbc:	ldr	r3, [sp, #28]
   13dc0:	movne	r6, #1
   13dc4:	moveq	r6, #0
   13dc8:	movne	r2, #0
   13dcc:	andeq	r2, r3, #1
   13dd0:	cmp	r2, #0
   13dd4:	bne	14700 <__assert_fail@plt+0x376c>
   13dd8:	sub	r2, fp, #2
   13ddc:	clz	r2, r2
   13de0:	lsr	r2, r2, #5
   13de4:	b	13884 <__assert_fail@plt+0x28f0>
   13de8:	cmp	r4, #0
   13dec:	bne	14aac <__assert_fail@plt+0x3b18>
   13df0:	str	r4, [sp, #28]
   13df4:	cmp	sl, #0
   13df8:	bne	14af0 <__assert_fail@plt+0x3b5c>
   13dfc:	ldr	r3, [pc, #772]	; 14108 <__assert_fail@plt+0x3174>
   13e00:	mov	r4, #1
   13e04:	str	r4, [sp, #40]	; 0x28
   13e08:	str	r3, [sp, #60]	; 0x3c
   13e0c:	str	r4, [sp, #52]	; 0x34
   13e10:	str	sl, [sp, #72]	; 0x48
   13e14:	str	sl, [sp, #68]	; 0x44
   13e18:	str	sl, [sp, #44]	; 0x2c
   13e1c:	str	sl, [sp, #32]
   13e20:	mov	r8, #2
   13e24:	b	133ec <__assert_fail@plt+0x2458>
   13e28:	ldr	r3, [sp, #36]	; 0x24
   13e2c:	ldrb	r5, [r3, r9]
   13e30:	cmp	r5, #126	; 0x7e
   13e34:	ldrls	pc, [pc, r5, lsl #2]
   13e38:	b	13d8c <__assert_fail@plt+0x2df8>
   13e3c:	andeq	r4, r1, r0, ror r0
   13e40:	andeq	r3, r1, ip, lsl #27
   13e44:	andeq	r3, r1, ip, lsl #27
   13e48:	andeq	r3, r1, ip, lsl #27
   13e4c:	andeq	r3, r1, ip, lsl #27
   13e50:	andeq	r3, r1, ip, lsl #27
   13e54:	andeq	r3, r1, ip, lsl #27
   13e58:	andeq	r4, r1, ip, asr r0
   13e5c:	andeq	r4, r1, r8, asr #32
   13e60:	andeq	r4, r1, r0, asr #32
   13e64:	andeq	r4, r1, r8, lsr r0
   13e68:	andeq	r4, r1, r8, ror #1
   13e6c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e70:	andeq	r3, r1, ip, ror #22
   13e74:	andeq	r3, r1, ip, lsl #27
   13e78:	andeq	r3, r1, ip, lsl #27
   13e7c:	andeq	r3, r1, ip, lsl #27
   13e80:	andeq	r3, r1, ip, lsl #27
   13e84:	andeq	r3, r1, ip, lsl #27
   13e88:	andeq	r3, r1, ip, lsl #27
   13e8c:	andeq	r3, r1, ip, lsl #27
   13e90:	andeq	r3, r1, ip, lsl #27
   13e94:	andeq	r3, r1, ip, lsl #27
   13e98:	andeq	r3, r1, ip, lsl #27
   13e9c:	andeq	r3, r1, ip, lsl #27
   13ea0:	andeq	r3, r1, ip, lsl #27
   13ea4:	andeq	r3, r1, ip, lsl #27
   13ea8:	andeq	r3, r1, ip, lsl #27
   13eac:	andeq	r3, r1, ip, lsl #27
   13eb0:	andeq	r3, r1, ip, lsl #27
   13eb4:	andeq	r3, r1, ip, lsl #27
   13eb8:	andeq	r3, r1, ip, lsl #27
   13ebc:	andeq	r4, r1, r4, asr #1
   13ec0:	strheq	r4, [r1], -r0
   13ec4:	strheq	r4, [r1], -r0
   13ec8:	andeq	r4, r1, r0, lsr #1
   13ecc:	strheq	r4, [r1], -r0
   13ed0:	ldrdeq	r3, [r1], -r8
   13ed4:	strheq	r4, [r1], -r0
   13ed8:	andeq	r3, r1, r0, lsr #21
   13edc:	strheq	r4, [r1], -r0
   13ee0:	strheq	r4, [r1], -r0
   13ee4:	strheq	r4, [r1], -r0
   13ee8:	ldrdeq	r3, [r1], -r8
   13eec:	ldrdeq	r3, [r1], -r8
   13ef0:	ldrdeq	r3, [r1], -r8
   13ef4:	ldrdeq	r3, [r1], -r8
   13ef8:	ldrdeq	r3, [r1], -r8
   13efc:	ldrdeq	r3, [r1], -r8
   13f00:	ldrdeq	r3, [r1], -r8
   13f04:	ldrdeq	r3, [r1], -r8
   13f08:	ldrdeq	r3, [r1], -r8
   13f0c:	ldrdeq	r3, [r1], -r8
   13f10:	ldrdeq	r3, [r1], -r8
   13f14:	ldrdeq	r3, [r1], -r8
   13f18:	ldrdeq	r3, [r1], -r8
   13f1c:	ldrdeq	r3, [r1], -r8
   13f20:	ldrdeq	r3, [r1], -r8
   13f24:	ldrdeq	r3, [r1], -r8
   13f28:	strheq	r4, [r1], -r0
   13f2c:	strheq	r4, [r1], -r0
   13f30:	strheq	r4, [r1], -r0
   13f34:	strheq	r4, [r1], -r0
   13f38:	andeq	r3, r1, r4, ror sl
   13f3c:	andeq	r3, r1, ip, lsl #27
   13f40:	ldrdeq	r3, [r1], -r8
   13f44:	ldrdeq	r3, [r1], -r8
   13f48:	ldrdeq	r3, [r1], -r8
   13f4c:	ldrdeq	r3, [r1], -r8
   13f50:	ldrdeq	r3, [r1], -r8
   13f54:	ldrdeq	r3, [r1], -r8
   13f58:	ldrdeq	r3, [r1], -r8
   13f5c:	ldrdeq	r3, [r1], -r8
   13f60:	ldrdeq	r3, [r1], -r8
   13f64:	ldrdeq	r3, [r1], -r8
   13f68:	ldrdeq	r3, [r1], -r8
   13f6c:	ldrdeq	r3, [r1], -r8
   13f70:	ldrdeq	r3, [r1], -r8
   13f74:	ldrdeq	r3, [r1], -r8
   13f78:	ldrdeq	r3, [r1], -r8
   13f7c:	ldrdeq	r3, [r1], -r8
   13f80:	ldrdeq	r3, [r1], -r8
   13f84:	ldrdeq	r3, [r1], -r8
   13f88:	ldrdeq	r3, [r1], -r8
   13f8c:	ldrdeq	r3, [r1], -r8
   13f90:	ldrdeq	r3, [r1], -r8
   13f94:	ldrdeq	r3, [r1], -r8
   13f98:	ldrdeq	r3, [r1], -r8
   13f9c:	ldrdeq	r3, [r1], -r8
   13fa0:	ldrdeq	r3, [r1], -r8
   13fa4:	ldrdeq	r3, [r1], -r8
   13fa8:	strheq	r4, [r1], -r0
   13fac:	andeq	r3, r1, ip, lsr #20
   13fb0:	ldrdeq	r3, [r1], -r8
   13fb4:	strheq	r4, [r1], -r0
   13fb8:	ldrdeq	r3, [r1], -r8
   13fbc:	strheq	r4, [r1], -r0
   13fc0:	ldrdeq	r3, [r1], -r8
   13fc4:	ldrdeq	r3, [r1], -r8
   13fc8:	ldrdeq	r3, [r1], -r8
   13fcc:	ldrdeq	r3, [r1], -r8
   13fd0:	ldrdeq	r3, [r1], -r8
   13fd4:	ldrdeq	r3, [r1], -r8
   13fd8:	ldrdeq	r3, [r1], -r8
   13fdc:	ldrdeq	r3, [r1], -r8
   13fe0:	ldrdeq	r3, [r1], -r8
   13fe4:	ldrdeq	r3, [r1], -r8
   13fe8:	ldrdeq	r3, [r1], -r8
   13fec:	ldrdeq	r3, [r1], -r8
   13ff0:	ldrdeq	r3, [r1], -r8
   13ff4:	ldrdeq	r3, [r1], -r8
   13ff8:	ldrdeq	r3, [r1], -r8
   13ffc:	ldrdeq	r3, [r1], -r8
   14000:	ldrdeq	r3, [r1], -r8
   14004:	ldrdeq	r3, [r1], -r8
   14008:	ldrdeq	r3, [r1], -r8
   1400c:	ldrdeq	r3, [r1], -r8
   14010:	ldrdeq	r3, [r1], -r8
   14014:	ldrdeq	r3, [r1], -r8
   14018:	ldrdeq	r3, [r1], -r8
   1401c:	ldrdeq	r3, [r1], -r8
   14020:	ldrdeq	r3, [r1], -r8
   14024:	ldrdeq	r3, [r1], -r8
   14028:	andeq	r3, r1, r4, asr #16
   1402c:	strheq	r4, [r1], -r0
   14030:	andeq	r3, r1, r4, asr #16
   14034:	andeq	r4, r1, r0, lsr #1
   14038:	mov	r3, #110	; 0x6e
   1403c:	b	13b70 <__assert_fail@plt+0x2bdc>
   14040:	mov	r3, #116	; 0x74
   14044:	b	13b70 <__assert_fail@plt+0x2bdc>
   14048:	sub	r2, fp, #2
   1404c:	mov	r3, #98	; 0x62
   14050:	clz	r2, r2
   14054:	lsr	r2, r2, #5
   14058:	b	13a5c <__assert_fail@plt+0x2ac8>
   1405c:	sub	r2, fp, #2
   14060:	mov	r3, #97	; 0x61
   14064:	clz	r2, r2
   14068:	lsr	r2, r2, #5
   1406c:	b	13a5c <__assert_fail@plt+0x2ac8>
   14070:	ldr	r3, [sp, #28]
   14074:	cmp	r3, #0
   14078:	bne	13c68 <__assert_fail@plt+0x2cd4>
   1407c:	ldr	r3, [sp, #164]	; 0xa4
   14080:	tst	r3, #1
   14084:	bne	146f8 <__assert_fail@plt+0x3764>
   14088:	ldr	r6, [sp, #28]
   1408c:	sub	r2, fp, #2
   14090:	mov	r7, r6
   14094:	clz	r2, r2
   14098:	lsr	r2, r2, #5
   1409c:	b	13884 <__assert_fail@plt+0x28f0>
   140a0:	sub	r2, fp, #2
   140a4:	clz	r2, r2
   140a8:	lsr	r2, r2, #5
   140ac:	b	13870 <__assert_fail@plt+0x28dc>
   140b0:	sub	r2, fp, #2
   140b4:	mov	r6, #0
   140b8:	clz	r2, r2
   140bc:	lsr	r2, r2, #5
   140c0:	b	13878 <__assert_fail@plt+0x28e4>
   140c4:	sub	r2, fp, #2
   140c8:	clz	r2, r2
   140cc:	lsr	r2, r2, #5
   140d0:	b	13878 <__assert_fail@plt+0x28e4>
   140d4:	sub	r2, fp, #2
   140d8:	mov	r3, #102	; 0x66
   140dc:	clz	r2, r2
   140e0:	lsr	r2, r2, #5
   140e4:	b	13a5c <__assert_fail@plt+0x2ac8>
   140e8:	sub	r2, fp, #2
   140ec:	mov	r3, #118	; 0x76
   140f0:	clz	r2, r2
   140f4:	lsr	r2, r2, #5
   140f8:	b	13a5c <__assert_fail@plt+0x2ac8>
   140fc:	andeq	r7, r2, r8, lsl #30
   14100:	ldrdeq	r7, [r1], -r0
   14104:			; <UNDEFINED> instruction: 0x000178b8
   14108:	andeq	r7, r1, ip, asr #17
   1410c:	ldr	r3, [sp, #48]	; 0x30
   14110:	ldrb	r5, [r3]
   14114:	cmp	r5, #126	; 0x7e
   14118:	ldrls	pc, [pc, r5, lsl #2]
   1411c:	b	13d88 <__assert_fail@plt+0x2df4>
   14120:	andeq	r3, r1, r8, ror #24
   14124:	andeq	r3, r1, r8, lsl #27
   14128:	andeq	r3, r1, r8, lsl #27
   1412c:	andeq	r3, r1, r8, lsl #27
   14130:	andeq	r3, r1, r8, lsl #27
   14134:	andeq	r3, r1, r8, lsl #27
   14138:	andeq	r3, r1, r8, lsl #27
   1413c:	andeq	r4, r1, r0, ror #6
   14140:	andeq	r4, r1, r8, asr r3
   14144:	andeq	r3, r1, r4, lsr ip
   14148:	strdeq	r3, [r1], -ip
   1414c:	andeq	r3, r1, r4, asr ip
   14150:	andeq	r3, r1, ip, lsr ip
   14154:	andeq	r4, r1, ip, asr #6
   14158:	andeq	r3, r1, r8, lsl #27
   1415c:	andeq	r3, r1, r8, lsl #27
   14160:	andeq	r3, r1, r8, lsl #27
   14164:	andeq	r3, r1, r8, lsl #27
   14168:	andeq	r3, r1, r8, lsl #27
   1416c:	andeq	r3, r1, r8, lsl #27
   14170:	andeq	r3, r1, r8, lsl #27
   14174:	andeq	r3, r1, r8, lsl #27
   14178:	andeq	r3, r1, r8, lsl #27
   1417c:	andeq	r3, r1, r8, lsl #27
   14180:	andeq	r3, r1, r8, lsl #27
   14184:	andeq	r3, r1, r8, lsl #27
   14188:	andeq	r3, r1, r8, lsl #27
   1418c:	andeq	r3, r1, r8, lsl #27
   14190:	andeq	r3, r1, r8, lsl #27
   14194:	andeq	r3, r1, r8, lsl #27
   14198:	andeq	r3, r1, r8, lsl #27
   1419c:	andeq	r3, r1, r8, lsl #27
   141a0:	andeq	r4, r1, r4, asr #6
   141a4:	andeq	r3, r1, ip, asr ip
   141a8:	andeq	r3, r1, ip, asr ip
   141ac:	andeq	r4, r1, r8, lsr #6
   141b0:	andeq	r3, r1, ip, asr ip
   141b4:	andeq	r4, r1, ip, lsl r3
   141b8:	andeq	r3, r1, ip, asr ip
   141bc:	muleq	r1, ip, sl
   141c0:	andeq	r3, r1, ip, asr ip
   141c4:	andeq	r3, r1, ip, asr ip
   141c8:	andeq	r3, r1, ip, asr ip
   141cc:	andeq	r4, r1, ip, lsl r3
   141d0:	andeq	r4, r1, ip, lsl r3
   141d4:	andeq	r4, r1, ip, lsl r3
   141d8:	andeq	r4, r1, ip, lsl r3
   141dc:	andeq	r4, r1, ip, lsl r3
   141e0:	andeq	r4, r1, ip, lsl r3
   141e4:	andeq	r4, r1, ip, lsl r3
   141e8:	andeq	r4, r1, ip, lsl r3
   141ec:	andeq	r4, r1, ip, lsl r3
   141f0:	andeq	r4, r1, ip, lsl r3
   141f4:	andeq	r4, r1, ip, lsl r3
   141f8:	andeq	r4, r1, ip, lsl r3
   141fc:	andeq	r4, r1, ip, lsl r3
   14200:	andeq	r4, r1, ip, lsl r3
   14204:	andeq	r4, r1, ip, lsl r3
   14208:	andeq	r4, r1, ip, lsl r3
   1420c:	andeq	r3, r1, ip, asr ip
   14210:	andeq	r3, r1, ip, asr ip
   14214:	andeq	r3, r1, ip, asr ip
   14218:	andeq	r3, r1, ip, asr ip
   1421c:	andeq	r3, r1, r0, ror sl
   14220:	andeq	r3, r1, r8, lsl #27
   14224:	andeq	r4, r1, ip, lsl r3
   14228:	andeq	r4, r1, ip, lsl r3
   1422c:	andeq	r4, r1, ip, lsl r3
   14230:	andeq	r4, r1, ip, lsl r3
   14234:	andeq	r4, r1, ip, lsl r3
   14238:	andeq	r4, r1, ip, lsl r3
   1423c:	andeq	r4, r1, ip, lsl r3
   14240:	andeq	r4, r1, ip, lsl r3
   14244:	andeq	r4, r1, ip, lsl r3
   14248:	andeq	r4, r1, ip, lsl r3
   1424c:	andeq	r4, r1, ip, lsl r3
   14250:	andeq	r4, r1, ip, lsl r3
   14254:	andeq	r4, r1, ip, lsl r3
   14258:	andeq	r4, r1, ip, lsl r3
   1425c:	andeq	r4, r1, ip, lsl r3
   14260:	andeq	r4, r1, ip, lsl r3
   14264:	andeq	r4, r1, ip, lsl r3
   14268:	andeq	r4, r1, ip, lsl r3
   1426c:	andeq	r4, r1, ip, lsl r3
   14270:	andeq	r4, r1, ip, lsl r3
   14274:	andeq	r4, r1, ip, lsl r3
   14278:	andeq	r4, r1, ip, lsl r3
   1427c:	andeq	r4, r1, ip, lsl r3
   14280:	andeq	r4, r1, ip, lsl r3
   14284:	andeq	r4, r1, ip, lsl r3
   14288:	andeq	r4, r1, ip, lsl r3
   1428c:	andeq	r3, r1, ip, asr ip
   14290:	andeq	r3, r1, r8, lsr #20
   14294:	andeq	r4, r1, ip, lsl r3
   14298:	andeq	r3, r1, ip, asr ip
   1429c:	andeq	r4, r1, ip, lsl r3
   142a0:	andeq	r3, r1, ip, asr ip
   142a4:	andeq	r4, r1, ip, lsl r3
   142a8:	andeq	r4, r1, ip, lsl r3
   142ac:	andeq	r4, r1, ip, lsl r3
   142b0:	andeq	r4, r1, ip, lsl r3
   142b4:	andeq	r4, r1, ip, lsl r3
   142b8:	andeq	r4, r1, ip, lsl r3
   142bc:	andeq	r4, r1, ip, lsl r3
   142c0:	andeq	r4, r1, ip, lsl r3
   142c4:	andeq	r4, r1, ip, lsl r3
   142c8:	andeq	r4, r1, ip, lsl r3
   142cc:	andeq	r4, r1, ip, lsl r3
   142d0:	andeq	r4, r1, ip, lsl r3
   142d4:	andeq	r4, r1, ip, lsl r3
   142d8:	andeq	r4, r1, ip, lsl r3
   142dc:	andeq	r4, r1, ip, lsl r3
   142e0:	andeq	r4, r1, ip, lsl r3
   142e4:	andeq	r4, r1, ip, lsl r3
   142e8:	andeq	r4, r1, ip, lsl r3
   142ec:	andeq	r4, r1, ip, lsl r3
   142f0:	andeq	r4, r1, ip, lsl r3
   142f4:	andeq	r4, r1, ip, lsl r3
   142f8:	andeq	r4, r1, ip, lsl r3
   142fc:	andeq	r4, r1, ip, lsl r3
   14300:	andeq	r4, r1, ip, lsl r3
   14304:	andeq	r4, r1, ip, lsl r3
   14308:	andeq	r4, r1, ip, lsl r3
   1430c:	andeq	r3, r1, r0, asr #16
   14310:	andeq	r3, r1, ip, asr ip
   14314:	andeq	r3, r1, r0, asr #16
   14318:	andeq	r4, r1, r8, lsr #6
   1431c:	mov	r6, r7
   14320:	mov	r7, #0
   14324:	b	138a0 <__assert_fail@plt+0x290c>
   14328:	cmp	r9, #0
   1432c:	mov	r3, #0
   14330:	beq	13d70 <__assert_fail@plt+0x2ddc>
   14334:	mov	r6, #0
   14338:	mov	r7, r3
   1433c:	mov	r3, r6
   14340:	b	138a4 <__assert_fail@plt+0x2910>
   14344:	mov	r3, #0
   14348:	b	13d50 <__assert_fail@plt+0x2dbc>
   1434c:	mov	r7, #0
   14350:	mov	r3, #114	; 0x72
   14354:	b	13b70 <__assert_fail@plt+0x2bdc>
   14358:	mov	r5, #98	; 0x62
   1435c:	b	13c00 <__assert_fail@plt+0x2c6c>
   14360:	mov	r5, #97	; 0x61
   14364:	b	13c40 <__assert_fail@plt+0x2cac>
   14368:	ldr	r3, [sp, #32]
   1436c:	cmp	r3, #0
   14370:	bne	147b8 <__assert_fail@plt+0x3824>
   14374:	add	r9, r9, #1
   14378:	ldr	r3, [sp, #44]	; 0x2c
   1437c:	mov	r6, #0
   14380:	mov	r5, #92	; 0x5c
   14384:	b	13b38 <__assert_fail@plt+0x2ba4>
   14388:	ldr	r3, [sp, #36]	; 0x24
   1438c:	ldrb	r3, [r3, #1]
   14390:	adds	r3, r3, #0
   14394:	movne	r3, #1
   14398:	b	1385c <__assert_fail@plt+0x28c8>
   1439c:	ldr	r3, [sp, #164]	; 0xa4
   143a0:	ands	r3, r3, #4
   143a4:	beq	143c8 <__assert_fail@plt+0x3434>
   143a8:	ldr	r2, [sp, #24]
   143ac:	add	r3, r9, #2
   143b0:	cmp	r3, r2
   143b4:	bcs	143c8 <__assert_fail@plt+0x3434>
   143b8:	ldr	r2, [sp, #48]	; 0x30
   143bc:	ldrb	r5, [r2, #1]
   143c0:	cmp	r5, #63	; 0x3f
   143c4:	beq	1482c <__assert_fail@plt+0x3898>
   143c8:	mov	r2, #0
   143cc:	mov	r6, r2
   143d0:	mov	r5, #63	; 0x3f
   143d4:	b	13884 <__assert_fail@plt+0x28f0>
   143d8:	ldr	r3, [sp, #32]
   143dc:	cmp	r3, #0
   143e0:	bne	147b8 <__assert_fail@plt+0x3824>
   143e4:	mov	r6, r3
   143e8:	mov	r5, #63	; 0x3f
   143ec:	b	138cc <__assert_fail@plt+0x2938>
   143f0:	ldr	r3, [sp, #24]
   143f4:	cmn	r3, #1
   143f8:	mov	r3, #0
   143fc:	str	r3, [sp, #108]	; 0x6c
   14400:	str	r3, [sp, #112]	; 0x70
   14404:	bne	14414 <__assert_fail@plt+0x3480>
   14408:	ldr	r0, [sp, #36]	; 0x24
   1440c:	bl	10ea4 <strlen@plt>
   14410:	str	r0, [sp, #24]
   14414:	mov	r3, #0
   14418:	str	sl, [sp, #88]	; 0x58
   1441c:	ldr	sl, [sp, #36]	; 0x24
   14420:	str	r5, [sp, #92]	; 0x5c
   14424:	mov	r5, r3
   14428:	str	r7, [sp, #96]	; 0x60
   1442c:	str	r4, [sp, #100]	; 0x64
   14430:	str	r8, [sp, #84]	; 0x54
   14434:	ldr	r3, [sp, #24]
   14438:	add	r4, r9, r5
   1443c:	add	r7, sl, r4
   14440:	sub	r2, r3, r4
   14444:	mov	r1, r7
   14448:	add	r3, sp, #108	; 0x6c
   1444c:	add	r0, sp, #104	; 0x68
   14450:	bl	166f4 <__assert_fail@plt+0x5760>
   14454:	subs	r8, r0, #0
   14458:	beq	144a8 <__assert_fail@plt+0x3514>
   1445c:	cmn	r8, #1
   14460:	beq	14808 <__assert_fail@plt+0x3874>
   14464:	cmn	r8, #2
   14468:	beq	14928 <__assert_fail@plt+0x3994>
   1446c:	ldr	r3, [sp, #32]
   14470:	cmp	fp, #2
   14474:	movne	r3, #0
   14478:	andeq	r3, r3, #1
   1447c:	cmp	r3, #0
   14480:	bne	14608 <__assert_fail@plt+0x3674>
   14484:	ldr	r0, [sp, #104]	; 0x68
   14488:	bl	10de4 <iswprint@plt>
   1448c:	add	r5, r5, r8
   14490:	cmp	r0, #0
   14494:	add	r0, sp, #108	; 0x6c
   14498:	moveq	r6, #0
   1449c:	bl	10d90 <mbsinit@plt>
   144a0:	cmp	r0, #0
   144a4:	beq	14434 <__assert_fail@plt+0x34a0>
   144a8:	ldr	r3, [sp, #28]
   144ac:	mov	ip, r5
   144b0:	eor	r2, r6, #1
   144b4:	ldr	r5, [sp, #92]	; 0x5c
   144b8:	ldr	r7, [sp, #96]	; 0x60
   144bc:	ldr	r4, [sp, #100]	; 0x64
   144c0:	ldr	r8, [sp, #84]	; 0x54
   144c4:	ldr	sl, [sp, #88]	; 0x58
   144c8:	and	r2, r2, r3
   144cc:	cmp	ip, #1
   144d0:	bls	13dd0 <__assert_fail@plt+0x2e3c>
   144d4:	add	r1, ip, r9
   144d8:	ldr	lr, [sp, #48]	; 0x30
   144dc:	mov	r0, #0
   144e0:	str	r6, [sp, #48]	; 0x30
   144e4:	mov	ip, #39	; 0x27
   144e8:	ldr	r6, [sp, #44]	; 0x2c
   144ec:	b	145a4 <__assert_fail@plt+0x3610>
   144f0:	ldr	r0, [sp, #32]
   144f4:	sub	r3, fp, #2
   144f8:	cmp	r0, #0
   144fc:	clz	r3, r3
   14500:	lsr	r3, r3, #5
   14504:	bne	1470c <__assert_fail@plt+0x3778>
   14508:	eor	r0, r6, #1
   1450c:	ands	r3, r3, r0
   14510:	beq	14540 <__assert_fail@plt+0x35ac>
   14514:	add	r0, r4, #1
   14518:	cmp	sl, r4
   1451c:	strbhi	ip, [r8, r4]
   14520:	cmp	sl, r0
   14524:	movhi	r6, #36	; 0x24
   14528:	strbhi	r6, [r8, r0]
   1452c:	add	r0, r4, #2
   14530:	mov	r6, r3
   14534:	add	r4, r4, #3
   14538:	cmp	sl, r0
   1453c:	strbhi	ip, [r8, r0]
   14540:	cmp	sl, r4
   14544:	movhi	r3, #92	; 0x5c
   14548:	strbhi	r3, [r8, r4]
   1454c:	add	r3, r4, #1
   14550:	cmp	sl, r3
   14554:	lsrhi	r0, r5, #6
   14558:	addhi	r0, r0, #48	; 0x30
   1455c:	strbhi	r0, [r8, r3]
   14560:	add	r0, r4, #2
   14564:	cmp	sl, r0
   14568:	lsrhi	r3, r5, #3
   1456c:	andhi	r3, r3, #7
   14570:	addhi	r3, r3, #48	; 0x30
   14574:	add	r9, r9, #1
   14578:	strbhi	r3, [r8, r0]
   1457c:	and	r5, r5, #7
   14580:	cmp	r9, r1
   14584:	add	r5, r5, #48	; 0x30
   14588:	add	r4, r4, #3
   1458c:	bcs	1472c <__assert_fail@plt+0x3798>
   14590:	mov	r0, r2
   14594:	cmp	sl, r4
   14598:	strbhi	r5, [r8, r4]
   1459c:	ldrb	r5, [lr, #1]!
   145a0:	add	r4, r4, #1
   145a4:	cmp	r2, #0
   145a8:	bne	144f0 <__assert_fail@plt+0x355c>
   145ac:	eor	r3, r0, #1
   145b0:	and	r3, r3, r6
   145b4:	cmp	r7, #0
   145b8:	uxtb	r3, r3
   145bc:	beq	145d0 <__assert_fail@plt+0x363c>
   145c0:	cmp	sl, r4
   145c4:	movhi	r7, #92	; 0x5c
   145c8:	strbhi	r7, [r8, r4]
   145cc:	add	r4, r4, #1
   145d0:	add	r9, r9, #1
   145d4:	cmp	r9, r1
   145d8:	bcs	14720 <__assert_fail@plt+0x378c>
   145dc:	cmp	r3, #0
   145e0:	beq	1474c <__assert_fail@plt+0x37b8>
   145e4:	cmp	sl, r4
   145e8:	add	r3, r4, #1
   145ec:	strbhi	ip, [r8, r4]
   145f0:	mov	r7, #0
   145f4:	cmp	sl, r3
   145f8:	strbhi	ip, [r8, r3]
   145fc:	add	r4, r4, #2
   14600:	mov	r6, r7
   14604:	b	14594 <__assert_fail@plt+0x3600>
   14608:	cmp	r8, #1
   1460c:	beq	14484 <__assert_fail@plt+0x34f0>
   14610:	add	r1, r4, #1
   14614:	add	r3, sl, r8
   14618:	add	r1, sl, r1
   1461c:	add	r4, r3, r4
   14620:	ldrb	r3, [r1], #1
   14624:	sub	r3, r3, #91	; 0x5b
   14628:	cmp	r3, #33	; 0x21
   1462c:	ldrls	pc, [pc, r3, lsl #2]
   14630:	b	146bc <__assert_fail@plt+0x3728>
   14634:	andeq	r4, r1, r8, asr #13
   14638:	andeq	r4, r1, r8, asr #13
   1463c:			; <UNDEFINED> instruction: 0x000146bc
   14640:	andeq	r4, r1, r8, asr #13
   14644:			; <UNDEFINED> instruction: 0x000146bc
   14648:	andeq	r4, r1, r8, asr #13
   1464c:			; <UNDEFINED> instruction: 0x000146bc
   14650:			; <UNDEFINED> instruction: 0x000146bc
   14654:			; <UNDEFINED> instruction: 0x000146bc
   14658:			; <UNDEFINED> instruction: 0x000146bc
   1465c:			; <UNDEFINED> instruction: 0x000146bc
   14660:			; <UNDEFINED> instruction: 0x000146bc
   14664:			; <UNDEFINED> instruction: 0x000146bc
   14668:			; <UNDEFINED> instruction: 0x000146bc
   1466c:			; <UNDEFINED> instruction: 0x000146bc
   14670:			; <UNDEFINED> instruction: 0x000146bc
   14674:			; <UNDEFINED> instruction: 0x000146bc
   14678:			; <UNDEFINED> instruction: 0x000146bc
   1467c:			; <UNDEFINED> instruction: 0x000146bc
   14680:			; <UNDEFINED> instruction: 0x000146bc
   14684:			; <UNDEFINED> instruction: 0x000146bc
   14688:			; <UNDEFINED> instruction: 0x000146bc
   1468c:			; <UNDEFINED> instruction: 0x000146bc
   14690:			; <UNDEFINED> instruction: 0x000146bc
   14694:			; <UNDEFINED> instruction: 0x000146bc
   14698:			; <UNDEFINED> instruction: 0x000146bc
   1469c:			; <UNDEFINED> instruction: 0x000146bc
   146a0:			; <UNDEFINED> instruction: 0x000146bc
   146a4:			; <UNDEFINED> instruction: 0x000146bc
   146a8:			; <UNDEFINED> instruction: 0x000146bc
   146ac:			; <UNDEFINED> instruction: 0x000146bc
   146b0:			; <UNDEFINED> instruction: 0x000146bc
   146b4:			; <UNDEFINED> instruction: 0x000146bc
   146b8:	andeq	r4, r1, r8, asr #13
   146bc:	cmp	r4, r1
   146c0:	bne	14620 <__assert_fail@plt+0x368c>
   146c4:	b	14484 <__assert_fail@plt+0x34f0>
   146c8:	ldr	fp, [sp, #84]	; 0x54
   146cc:	ldr	sl, [sp, #88]	; 0x58
   146d0:	mov	r8, #2
   146d4:	b	13b90 <__assert_fail@plt+0x2bfc>
   146d8:	cmp	sl, r4
   146dc:	movls	r1, r4
   146e0:	bls	13ce0 <__assert_fail@plt+0x2d4c>
   146e4:	ldr	r3, [sp, #44]	; 0x2c
   146e8:	b	13cd0 <__assert_fail@plt+0x2d3c>
   146ec:	str	sl, [sp, #72]	; 0x48
   146f0:	ldr	sl, [sp, #32]
   146f4:	b	13b08 <__assert_fail@plt+0x2b74>
   146f8:	add	r9, r9, #1
   146fc:	b	133fc <__assert_fail@plt+0x2468>
   14700:	ldr	r2, [sp, #28]
   14704:	mov	r6, #0
   14708:	b	144d4 <__assert_fail@plt+0x3540>
   1470c:	str	fp, [sp, #160]	; 0xa0
   14710:	str	r3, [sp, #28]
   14714:	mov	fp, r8
   14718:	ldr	r8, [sp, #160]	; 0xa0
   1471c:	b	13b90 <__assert_fail@plt+0x2bfc>
   14720:	str	r6, [sp, #44]	; 0x2c
   14724:	ldr	r6, [sp, #48]	; 0x30
   14728:	b	13b38 <__assert_fail@plt+0x2ba4>
   1472c:	str	r6, [sp, #44]	; 0x2c
   14730:	ldr	r6, [sp, #48]	; 0x30
   14734:	b	13944 <__assert_fail@plt+0x29b0>
   14738:	add	r4, r4, #4
   1473c:	str	r3, [sp, #44]	; 0x2c
   14740:	mov	r6, #0
   14744:	mov	r5, #48	; 0x30
   14748:	b	138cc <__assert_fail@plt+0x2938>
   1474c:	mov	r7, r3
   14750:	b	14594 <__assert_fail@plt+0x3600>
   14754:	ldr	r3, [pc, #-1624]	; 14104 <__assert_fail@plt+0x3170>
   14758:	mov	r4, #1
   1475c:	str	r4, [sp, #40]	; 0x28
   14760:	str	r4, [sp, #28]
   14764:	str	r4, [sp, #52]	; 0x34
   14768:	str	sl, [sp, #72]	; 0x48
   1476c:	str	sl, [sp, #68]	; 0x44
   14770:	str	sl, [sp, #44]	; 0x2c
   14774:	str	sl, [sp, #32]
   14778:	str	r3, [sp, #60]	; 0x3c
   1477c:	b	133ec <__assert_fail@plt+0x2458>
   14780:	mov	r3, r6
   14784:	mov	r5, #48	; 0x30
   14788:	mov	r6, #0
   1478c:	b	138cc <__assert_fail@plt+0x2938>
   14790:	cmp	sl, r4
   14794:	movhi	r3, #48	; 0x30
   14798:	strbhi	r3, [r8, r4]
   1479c:	add	r3, r1, #2
   147a0:	cmp	sl, r3
   147a4:	movhi	r0, #48	; 0x30
   147a8:	strbhi	r0, [r8, r3]
   147ac:	add	r4, r1, #3
   147b0:	mov	r5, #48	; 0x30
   147b4:	b	13d14 <__assert_fail@plt+0x2d80>
   147b8:	str	fp, [sp, #160]	; 0xa0
   147bc:	mov	fp, r8
   147c0:	ldr	r8, [sp, #160]	; 0xa0
   147c4:	b	13b90 <__assert_fail@plt+0x2bfc>
   147c8:	ldr	r2, [sp, #80]	; 0x50
   147cc:	ldrb	r3, [r2]
   147d0:	cmp	r3, #0
   147d4:	beq	133bc <__assert_fail@plt+0x2428>
   147d8:	cmp	sl, r4
   147dc:	strbhi	r3, [fp, r4]
   147e0:	ldrb	r3, [r2, #1]!
   147e4:	add	r4, r4, #1
   147e8:	cmp	r3, #0
   147ec:	bne	147d8 <__assert_fail@plt+0x3844>
   147f0:	b	133bc <__assert_fail@plt+0x2428>
   147f4:	str	fp, [sp, #160]	; 0xa0
   147f8:	mov	r3, #0
   147fc:	mov	fp, r8
   14800:	ldr	r8, [sp, #160]	; 0xa0
   14804:	b	13c24 <__assert_fail@plt+0x2c90>
   14808:	mov	ip, r5
   1480c:	ldr	r7, [sp, #96]	; 0x60
   14810:	ldr	r5, [sp, #92]	; 0x5c
   14814:	ldr	r4, [sp, #100]	; 0x64
   14818:	ldr	r8, [sp, #84]	; 0x54
   1481c:	ldr	sl, [sp, #88]	; 0x58
   14820:	ldr	r2, [sp, #28]
   14824:	mov	r6, #0
   14828:	b	144cc <__assert_fail@plt+0x3538>
   1482c:	ldr	r2, [sp, #36]	; 0x24
   14830:	ldrb	r1, [r2, r3]
   14834:	sub	r2, r1, #33	; 0x21
   14838:	cmp	r2, #29
   1483c:	ldrls	pc, [pc, r2, lsl #2]
   14840:	b	1491c <__assert_fail@plt+0x3988>
   14844:			; <UNDEFINED> instruction: 0x000148bc
   14848:	andeq	r4, r1, ip, lsl r9
   1484c:	andeq	r4, r1, ip, lsl r9
   14850:	andeq	r4, r1, ip, lsl r9
   14854:	andeq	r4, r1, ip, lsl r9
   14858:	andeq	r4, r1, ip, lsl r9
   1485c:			; <UNDEFINED> instruction: 0x000148bc
   14860:			; <UNDEFINED> instruction: 0x000148bc
   14864:			; <UNDEFINED> instruction: 0x000148bc
   14868:	andeq	r4, r1, ip, lsl r9
   1486c:	andeq	r4, r1, ip, lsl r9
   14870:	andeq	r4, r1, ip, lsl r9
   14874:			; <UNDEFINED> instruction: 0x000148bc
   14878:	andeq	r4, r1, ip, lsl r9
   1487c:			; <UNDEFINED> instruction: 0x000148bc
   14880:	andeq	r4, r1, ip, lsl r9
   14884:	andeq	r4, r1, ip, lsl r9
   14888:	andeq	r4, r1, ip, lsl r9
   1488c:	andeq	r4, r1, ip, lsl r9
   14890:	andeq	r4, r1, ip, lsl r9
   14894:	andeq	r4, r1, ip, lsl r9
   14898:	andeq	r4, r1, ip, lsl r9
   1489c:	andeq	r4, r1, ip, lsl r9
   148a0:	andeq	r4, r1, ip, lsl r9
   148a4:	andeq	r4, r1, ip, lsl r9
   148a8:	andeq	r4, r1, ip, lsl r9
   148ac:	andeq	r4, r1, ip, lsl r9
   148b0:			; <UNDEFINED> instruction: 0x000148bc
   148b4:			; <UNDEFINED> instruction: 0x000148bc
   148b8:			; <UNDEFINED> instruction: 0x000148bc
   148bc:	ldr	r2, [sp, #32]
   148c0:	cmp	r2, #0
   148c4:	bne	149c8 <__assert_fail@plt+0x3a34>
   148c8:	cmp	sl, r4
   148cc:	movhi	r2, #63	; 0x3f
   148d0:	strbhi	r2, [r8, r4]
   148d4:	add	r2, r4, #1
   148d8:	cmp	sl, r2
   148dc:	movhi	r0, #34	; 0x22
   148e0:	strbhi	r0, [r8, r2]
   148e4:	add	r2, r4, #2
   148e8:	cmp	sl, r2
   148ec:	movhi	r0, #34	; 0x22
   148f0:	strbhi	r0, [r8, r2]
   148f4:	add	r2, r4, #3
   148f8:	cmp	sl, r2
   148fc:	movhi	r0, #63	; 0x3f
   14900:	strbhi	r0, [r8, r2]
   14904:	mov	r2, #0
   14908:	add	r4, r4, #4
   1490c:	mov	r5, r1
   14910:	mov	r9, r3
   14914:	mov	r6, r2
   14918:	b	13d14 <__assert_fail@plt+0x2d80>
   1491c:	mov	r2, #0
   14920:	mov	r6, r2
   14924:	b	13884 <__assert_fail@plt+0x28f0>
   14928:	ldr	r0, [sp, #24]
   1492c:	mov	r1, r4
   14930:	cmp	r1, r0
   14934:	mov	r2, r7
   14938:	mov	r3, r5
   1493c:	mov	ip, r5
   14940:	ldr	r7, [sp, #96]	; 0x60
   14944:	ldr	r5, [sp, #92]	; 0x5c
   14948:	ldr	r4, [sp, #100]	; 0x64
   1494c:	ldr	r8, [sp, #84]	; 0x54
   14950:	ldr	sl, [sp, #88]	; 0x58
   14954:	bcs	14988 <__assert_fail@plt+0x39f4>
   14958:	ldrb	r6, [r2]
   1495c:	cmp	r6, #0
   14960:	bne	14974 <__assert_fail@plt+0x39e0>
   14964:	b	14aa4 <__assert_fail@plt+0x3b10>
   14968:	ldrb	r6, [r2, #1]!
   1496c:	cmp	r6, #0
   14970:	beq	14a2c <__assert_fail@plt+0x3a98>
   14974:	add	r3, r3, #1
   14978:	add	r1, r9, r3
   1497c:	cmp	r1, r0
   14980:	bcc	14968 <__assert_fail@plt+0x39d4>
   14984:	mov	ip, r3
   14988:	ldr	r2, [sp, #28]
   1498c:	mov	r6, #0
   14990:	b	144cc <__assert_fail@plt+0x3538>
   14994:	mov	r3, #1
   14998:	str	r3, [sp, #40]	; 0x28
   1499c:	str	r3, [sp, #32]
   149a0:	str	r3, [sp, #28]
   149a4:	str	r3, [sp, #52]	; 0x34
   149a8:	ldr	r3, [pc, #-2220]	; 14104 <__assert_fail@plt+0x3170>
   149ac:	mov	r2, #0
   149b0:	str	r2, [sp, #68]	; 0x44
   149b4:	str	r2, [sp, #44]	; 0x2c
   149b8:	str	r2, [sp, #72]	; 0x48
   149bc:	mov	r4, r2
   149c0:	str	r3, [sp, #60]	; 0x3c
   149c4:	b	133ec <__assert_fail@plt+0x2458>
   149c8:	str	fp, [sp, #160]	; 0xa0
   149cc:	mov	fp, r8
   149d0:	ldr	r8, [sp, #160]	; 0xa0
   149d4:	b	13b9c <__assert_fail@plt+0x2c08>
   149d8:	mov	r2, r3
   149dc:	ldr	r3, [sp, #60]	; 0x3c
   149e0:	cmp	r3, #0
   149e4:	moveq	r2, #0
   149e8:	andne	r2, r2, #1
   149ec:	cmp	r2, #0
   149f0:	beq	14a1c <__assert_fail@plt+0x3a88>
   149f4:	mov	r2, r3
   149f8:	ldrb	r3, [r3]
   149fc:	cmp	r3, #0
   14a00:	beq	14a1c <__assert_fail@plt+0x3a88>
   14a04:	cmp	sl, r4
   14a08:	strbhi	r3, [fp, r4]
   14a0c:	ldrb	r3, [r2, #1]!
   14a10:	add	r4, r4, #1
   14a14:	cmp	r3, #0
   14a18:	bne	14a04 <__assert_fail@plt+0x3a70>
   14a1c:	cmp	sl, r4
   14a20:	movhi	r3, #0
   14a24:	strbhi	r3, [fp, r4]
   14a28:	b	13bdc <__assert_fail@plt+0x2c48>
   14a2c:	mov	ip, r3
   14a30:	ldr	r2, [sp, #28]
   14a34:	b	144cc <__assert_fail@plt+0x3538>
   14a38:	str	fp, [sp, #160]	; 0xa0
   14a3c:	mov	fp, r8
   14a40:	ldr	r8, [sp, #160]	; 0xa0
   14a44:	sub	r3, r8, #2
   14a48:	clz	r3, r3
   14a4c:	lsr	r3, r3, #5
   14a50:	str	r3, [sp, #28]
   14a54:	b	13b90 <__assert_fail@plt+0x2bfc>
   14a58:	ldr	r3, [sp, #76]	; 0x4c
   14a5c:	mov	ip, #5
   14a60:	str	r3, [sp, #16]
   14a64:	ldr	r3, [sp, #80]	; 0x50
   14a68:	ldr	r2, [sp, #36]	; 0x24
   14a6c:	str	r3, [sp, #12]
   14a70:	ldr	r3, [sp, #56]	; 0x38
   14a74:	ldr	r1, [sp, #72]	; 0x48
   14a78:	str	r3, [sp, #8]
   14a7c:	ldr	r3, [sp, #164]	; 0xa4
   14a80:	mov	r0, fp
   14a84:	str	r3, [sp, #4]
   14a88:	str	ip, [sp]
   14a8c:	ldr	r3, [sp, #24]
   14a90:	bl	132f4 <__assert_fail@plt+0x2360>
   14a94:	mov	r4, r0
   14a98:	b	13bdc <__assert_fail@plt+0x2c48>
   14a9c:	mov	r8, #2
   14aa0:	b	13b90 <__assert_fail@plt+0x2bfc>
   14aa4:	ldr	r2, [sp, #28]
   14aa8:	b	144cc <__assert_fail@plt+0x3538>
   14aac:	mov	r3, #0
   14ab0:	str	r3, [sp, #68]	; 0x44
   14ab4:	str	r3, [sp, #44]	; 0x2c
   14ab8:	str	r3, [sp, #72]	; 0x48
   14abc:	str	r3, [sp, #28]
   14ac0:	mov	r4, r3
   14ac4:	ldr	r3, [pc, #-2500]	; 14108 <__assert_fail@plt+0x3174>
   14ac8:	mov	r2, #1
   14acc:	str	r2, [sp, #40]	; 0x28
   14ad0:	str	r2, [sp, #32]
   14ad4:	str	r2, [sp, #52]	; 0x34
   14ad8:	str	r3, [sp, #60]	; 0x3c
   14adc:	b	133ec <__assert_fail@plt+0x2458>
   14ae0:	bl	10dc0 <__stack_chk_fail@plt>
   14ae4:	mov	r5, r3
   14ae8:	mov	r6, #0
   14aec:	b	138e0 <__assert_fail@plt+0x294c>
   14af0:	mov	r3, #0
   14af4:	mov	r2, #1
   14af8:	str	r3, [sp, #44]	; 0x2c
   14afc:	str	r3, [sp, #72]	; 0x48
   14b00:	str	r2, [sp, #40]	; 0x28
   14b04:	b	139fc <__assert_fail@plt+0x2a68>
   14b08:	bl	10f7c <abort@plt>
   14b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b10:	sub	sp, sp, #44	; 0x2c
   14b14:	mov	r6, r0
   14b18:	mov	r4, r3
   14b1c:	mov	sl, r1
   14b20:	mov	fp, r2
   14b24:	bl	10ec8 <__errno_location@plt>
   14b28:	ldr	r7, [pc, #364]	; 14c9c <__assert_fail@plt+0x3d08>
   14b2c:	cmp	r6, #0
   14b30:	ldr	r5, [r7]
   14b34:	ldr	r3, [r0]
   14b38:	str	r3, [sp, #24]
   14b3c:	blt	14c98 <__assert_fail@plt+0x3d04>
   14b40:	ldr	r3, [r7, #4]
   14b44:	mov	r8, r0
   14b48:	cmp	r3, r6
   14b4c:	bgt	14b98 <__assert_fail@plt+0x3c04>
   14b50:	cmn	r6, #-268435454	; 0xf0000002
   14b54:	bgt	14c94 <__assert_fail@plt+0x3d00>
   14b58:	add	r9, r6, #1
   14b5c:	add	r3, r7, #8
   14b60:	cmp	r5, r3
   14b64:	lsl	r1, r9, #3
   14b68:	beq	14c74 <__assert_fail@plt+0x3ce0>
   14b6c:	mov	r0, r5
   14b70:	bl	15968 <__assert_fail@plt+0x49d4>
   14b74:	mov	r5, r0
   14b78:	str	r0, [r7]
   14b7c:	ldr	r0, [r7, #4]
   14b80:	mov	r1, #0
   14b84:	sub	r2, r9, r0
   14b88:	add	r0, r5, r0, lsl #3
   14b8c:	lsl	r2, r2, #3
   14b90:	bl	10ee0 <memset@plt>
   14b94:	str	r9, [r7, #4]
   14b98:	add	r3, r5, r6, lsl #3
   14b9c:	ldr	r1, [r4, #4]
   14ba0:	ldr	r7, [r3, #4]
   14ba4:	ldr	r9, [r5, r6, lsl #3]
   14ba8:	ldr	r2, [r4, #40]	; 0x28
   14bac:	ldr	ip, [r4, #44]	; 0x2c
   14bb0:	str	r3, [sp, #28]
   14bb4:	ldr	r3, [r4]
   14bb8:	orr	r1, r1, #1
   14bbc:	add	lr, r4, #8
   14bc0:	str	r1, [sp, #36]	; 0x24
   14bc4:	str	r1, [sp, #4]
   14bc8:	str	r2, [sp, #12]
   14bcc:	str	r3, [sp]
   14bd0:	mov	r0, r7
   14bd4:	mov	r1, r9
   14bd8:	str	ip, [sp, #16]
   14bdc:	str	lr, [sp, #8]
   14be0:	mov	r3, fp
   14be4:	mov	r2, sl
   14be8:	str	lr, [sp, #32]
   14bec:	bl	132f4 <__assert_fail@plt+0x2360>
   14bf0:	cmp	r9, r0
   14bf4:	bhi	14c60 <__assert_fail@plt+0x3ccc>
   14bf8:	ldr	r3, [pc, #160]	; 14ca0 <__assert_fail@plt+0x3d0c>
   14bfc:	add	r9, r0, #1
   14c00:	cmp	r7, r3
   14c04:	str	r9, [r5, r6, lsl #3]
   14c08:	beq	14c14 <__assert_fail@plt+0x3c80>
   14c0c:	mov	r0, r7
   14c10:	bl	10d60 <free@plt>
   14c14:	mov	r0, r9
   14c18:	bl	1590c <__assert_fail@plt+0x4978>
   14c1c:	ldr	lr, [sp, #28]
   14c20:	ldr	ip, [r4, #44]	; 0x2c
   14c24:	ldr	r5, [r4, #40]	; 0x28
   14c28:	mov	r3, fp
   14c2c:	mov	r2, sl
   14c30:	mov	r1, r9
   14c34:	str	r0, [lr, #4]
   14c38:	ldr	lr, [r4]
   14c3c:	ldr	r4, [sp, #32]
   14c40:	str	ip, [sp, #16]
   14c44:	str	r4, [sp, #8]
   14c48:	ldr	r4, [sp, #36]	; 0x24
   14c4c:	str	r5, [sp, #12]
   14c50:	str	r4, [sp, #4]
   14c54:	str	lr, [sp]
   14c58:	mov	r7, r0
   14c5c:	bl	132f4 <__assert_fail@plt+0x2360>
   14c60:	ldr	r3, [sp, #24]
   14c64:	mov	r0, r7
   14c68:	str	r3, [r8]
   14c6c:	add	sp, sp, #44	; 0x2c
   14c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c74:	mov	r0, #0
   14c78:	bl	15968 <__assert_fail@plt+0x49d4>
   14c7c:	ldr	r3, [pc, #32]	; 14ca4 <__assert_fail@plt+0x3d10>
   14c80:	mov	r5, r0
   14c84:	ldm	r3, {r0, r1}
   14c88:	str	r5, [r7]
   14c8c:	stm	r5, {r0, r1}
   14c90:	b	14b7c <__assert_fail@plt+0x3be8>
   14c94:	bl	15b54 <__assert_fail@plt+0x4bc0>
   14c98:	bl	10f7c <abort@plt>
   14c9c:	strdeq	r8, [r2], -ip
   14ca0:	andeq	r8, r2, r0, ror r1
   14ca4:	andeq	r8, r2, r4, lsl #2
   14ca8:	push	{r4, r5, r6, lr}
   14cac:	mov	r5, r0
   14cb0:	bl	10ec8 <__errno_location@plt>
   14cb4:	cmp	r5, #0
   14cb8:	mov	r1, #48	; 0x30
   14cbc:	mov	r4, r0
   14cc0:	ldr	r0, [pc, #16]	; 14cd8 <__assert_fail@plt+0x3d44>
   14cc4:	ldr	r6, [r4]
   14cc8:	movne	r0, r5
   14ccc:	bl	15b14 <__assert_fail@plt+0x4b80>
   14cd0:	str	r6, [r4]
   14cd4:	pop	{r4, r5, r6, pc}
   14cd8:	andeq	r8, r2, r0, ror r2
   14cdc:	ldr	r3, [pc, #12]	; 14cf0 <__assert_fail@plt+0x3d5c>
   14ce0:	cmp	r0, #0
   14ce4:	moveq	r0, r3
   14ce8:	ldr	r0, [r0]
   14cec:	bx	lr
   14cf0:	andeq	r8, r2, r0, ror r2
   14cf4:	ldr	r3, [pc, #12]	; 14d08 <__assert_fail@plt+0x3d74>
   14cf8:	cmp	r0, #0
   14cfc:	moveq	r0, r3
   14d00:	str	r1, [r0]
   14d04:	bx	lr
   14d08:	andeq	r8, r2, r0, ror r2
   14d0c:	ldr	r3, [pc, #52]	; 14d48 <__assert_fail@plt+0x3db4>
   14d10:	cmp	r0, #0
   14d14:	moveq	r0, r3
   14d18:	add	r3, r0, #8
   14d1c:	push	{lr}		; (str lr, [sp, #-4]!)
   14d20:	lsr	lr, r1, #5
   14d24:	and	r1, r1, #31
   14d28:	ldr	ip, [r3, lr, lsl #2]
   14d2c:	lsr	r0, ip, r1
   14d30:	eor	r2, r2, r0
   14d34:	and	r2, r2, #1
   14d38:	and	r0, r0, #1
   14d3c:	eor	r1, ip, r2, lsl r1
   14d40:	str	r1, [r3, lr, lsl #2]
   14d44:	pop	{pc}		; (ldr pc, [sp], #4)
   14d48:	andeq	r8, r2, r0, ror r2
   14d4c:	ldr	r3, [pc, #16]	; 14d64 <__assert_fail@plt+0x3dd0>
   14d50:	cmp	r0, #0
   14d54:	movne	r3, r0
   14d58:	ldr	r0, [r3, #4]
   14d5c:	str	r1, [r3, #4]
   14d60:	bx	lr
   14d64:	andeq	r8, r2, r0, ror r2
   14d68:	ldr	r3, [pc, #44]	; 14d9c <__assert_fail@plt+0x3e08>
   14d6c:	cmp	r0, #0
   14d70:	moveq	r0, r3
   14d74:	mov	ip, #10
   14d78:	cmp	r2, #0
   14d7c:	cmpne	r1, #0
   14d80:	str	ip, [r0]
   14d84:	beq	14d94 <__assert_fail@plt+0x3e00>
   14d88:	str	r1, [r0, #40]	; 0x28
   14d8c:	str	r2, [r0, #44]	; 0x2c
   14d90:	bx	lr
   14d94:	push	{r4, lr}
   14d98:	bl	10f7c <abort@plt>
   14d9c:	andeq	r8, r2, r0, ror r2
   14da0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14da4:	sub	sp, sp, #24
   14da8:	ldr	ip, [pc, #108]	; 14e1c <__assert_fail@plt+0x3e88>
   14dac:	ldr	r4, [sp, #56]	; 0x38
   14db0:	mov	r9, r2
   14db4:	cmp	r4, #0
   14db8:	moveq	r4, ip
   14dbc:	mov	sl, r3
   14dc0:	mov	r7, r0
   14dc4:	mov	r8, r1
   14dc8:	bl	10ec8 <__errno_location@plt>
   14dcc:	ldr	r3, [r4, #44]	; 0x2c
   14dd0:	mov	r1, r8
   14dd4:	ldr	r6, [r0]
   14dd8:	str	r3, [sp, #16]
   14ddc:	ldr	r2, [r4, #40]	; 0x28
   14de0:	add	r3, r4, #8
   14de4:	str	r3, [sp, #8]
   14de8:	str	r2, [sp, #12]
   14dec:	ldr	r2, [r4, #4]
   14df0:	mov	r5, r0
   14df4:	str	r2, [sp, #4]
   14df8:	ldr	ip, [r4]
   14dfc:	mov	r3, sl
   14e00:	mov	r2, r9
   14e04:	mov	r0, r7
   14e08:	str	ip, [sp]
   14e0c:	bl	132f4 <__assert_fail@plt+0x2360>
   14e10:	str	r6, [r5]
   14e14:	add	sp, sp, #24
   14e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e1c:	andeq	r8, r2, r0, ror r2
   14e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e24:	cmp	r3, #0
   14e28:	sub	sp, sp, #44	; 0x2c
   14e2c:	ldr	r4, [pc, #192]	; 14ef4 <__assert_fail@plt+0x3f60>
   14e30:	mov	r6, r2
   14e34:	movne	r4, r3
   14e38:	mov	r9, r1
   14e3c:	mov	r8, r0
   14e40:	bl	10ec8 <__errno_location@plt>
   14e44:	ldr	r3, [r4, #44]	; 0x2c
   14e48:	ldr	r5, [r4, #4]
   14e4c:	add	sl, r4, #8
   14e50:	cmp	r6, #0
   14e54:	orreq	r5, r5, #1
   14e58:	mov	r1, #0
   14e5c:	ldr	r2, [r0]
   14e60:	str	r3, [sp, #16]
   14e64:	ldr	r3, [r4, #40]	; 0x28
   14e68:	stmib	sp, {r5, sl}
   14e6c:	str	r3, [sp, #12]
   14e70:	ldr	r3, [r4]
   14e74:	mov	r7, r0
   14e78:	str	r2, [sp, #28]
   14e7c:	str	r3, [sp]
   14e80:	mov	r2, r8
   14e84:	mov	r3, r9
   14e88:	mov	r0, r1
   14e8c:	bl	132f4 <__assert_fail@plt+0x2360>
   14e90:	add	r1, r0, #1
   14e94:	mov	fp, r0
   14e98:	mov	r0, r1
   14e9c:	str	r1, [sp, #36]	; 0x24
   14ea0:	bl	1590c <__assert_fail@plt+0x4978>
   14ea4:	ldr	r3, [r4, #44]	; 0x2c
   14ea8:	mov	r2, r8
   14eac:	str	r3, [sp, #16]
   14eb0:	ldr	r3, [r4, #40]	; 0x28
   14eb4:	str	r5, [sp, #4]
   14eb8:	str	r3, [sp, #12]
   14ebc:	str	sl, [sp, #8]
   14ec0:	ldr	ip, [r4]
   14ec4:	ldr	r1, [sp, #36]	; 0x24
   14ec8:	mov	r3, r9
   14ecc:	str	ip, [sp]
   14ed0:	str	r0, [sp, #32]
   14ed4:	bl	132f4 <__assert_fail@plt+0x2360>
   14ed8:	ldr	r2, [sp, #28]
   14edc:	cmp	r6, #0
   14ee0:	str	r2, [r7]
   14ee4:	ldr	r0, [sp, #32]
   14ee8:	strne	fp, [r6]
   14eec:	add	sp, sp, #44	; 0x2c
   14ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef4:	andeq	r8, r2, r0, ror r2
   14ef8:	mov	r3, r2
   14efc:	mov	r2, #0
   14f00:	b	14e20 <__assert_fail@plt+0x3e8c>
   14f04:	push	{r4, r5, r6, r7, r8, lr}
   14f08:	ldr	r6, [pc, #112]	; 14f80 <__assert_fail@plt+0x3fec>
   14f0c:	ldr	r3, [r6, #4]
   14f10:	ldr	r7, [r6]
   14f14:	cmp	r3, #1
   14f18:	ble	14f3c <__assert_fail@plt+0x3fa8>
   14f1c:	sub	r5, r7, #8
   14f20:	add	r5, r5, r3, lsl #3
   14f24:	mov	r4, r7
   14f28:	ldr	r0, [r4, #12]
   14f2c:	add	r4, r4, #8
   14f30:	bl	10d60 <free@plt>
   14f34:	cmp	r4, r5
   14f38:	bne	14f28 <__assert_fail@plt+0x3f94>
   14f3c:	ldr	r0, [r7, #4]
   14f40:	ldr	r4, [pc, #60]	; 14f84 <__assert_fail@plt+0x3ff0>
   14f44:	cmp	r0, r4
   14f48:	beq	14f5c <__assert_fail@plt+0x3fc8>
   14f4c:	bl	10d60 <free@plt>
   14f50:	mov	r3, #256	; 0x100
   14f54:	str	r4, [r6, #12]
   14f58:	str	r3, [r6, #8]
   14f5c:	ldr	r4, [pc, #36]	; 14f88 <__assert_fail@plt+0x3ff4>
   14f60:	cmp	r7, r4
   14f64:	beq	14f74 <__assert_fail@plt+0x3fe0>
   14f68:	mov	r0, r7
   14f6c:	bl	10d60 <free@plt>
   14f70:	str	r4, [r6]
   14f74:	mov	r3, #1
   14f78:	str	r3, [r6, #4]
   14f7c:	pop	{r4, r5, r6, r7, r8, pc}
   14f80:	strdeq	r8, [r2], -ip
   14f84:	andeq	r8, r2, r0, ror r1
   14f88:	andeq	r8, r2, r4, lsl #2
   14f8c:	ldr	r3, [pc, #4]	; 14f98 <__assert_fail@plt+0x4004>
   14f90:	mvn	r2, #0
   14f94:	b	14b0c <__assert_fail@plt+0x3b78>
   14f98:	andeq	r8, r2, r0, ror r2
   14f9c:	ldr	r3, [pc]	; 14fa4 <__assert_fail@plt+0x4010>
   14fa0:	b	14b0c <__assert_fail@plt+0x3b78>
   14fa4:	andeq	r8, r2, r0, ror r2
   14fa8:	mov	r1, r0
   14fac:	ldr	r3, [pc, #8]	; 14fbc <__assert_fail@plt+0x4028>
   14fb0:	mvn	r2, #0
   14fb4:	mov	r0, #0
   14fb8:	b	14b0c <__assert_fail@plt+0x3b78>
   14fbc:	andeq	r8, r2, r0, ror r2
   14fc0:	mov	r2, r1
   14fc4:	ldr	r3, [pc, #8]	; 14fd4 <__assert_fail@plt+0x4040>
   14fc8:	mov	r1, r0
   14fcc:	mov	r0, #0
   14fd0:	b	14b0c <__assert_fail@plt+0x3b78>
   14fd4:	andeq	r8, r2, r0, ror r2
   14fd8:	push	{r4, r5, r6, lr}
   14fdc:	sub	sp, sp, #56	; 0x38
   14fe0:	ldr	r4, [pc, #68]	; 1502c <__assert_fail@plt+0x4098>
   14fe4:	mov	r6, r2
   14fe8:	mov	r5, r0
   14fec:	ldr	r3, [r4]
   14ff0:	add	r0, sp, #4
   14ff4:	str	r3, [sp, #52]	; 0x34
   14ff8:	bl	13184 <__assert_fail@plt+0x21f0>
   14ffc:	add	r3, sp, #4
   15000:	mvn	r2, #0
   15004:	mov	r1, r6
   15008:	mov	r0, r5
   1500c:	bl	14b0c <__assert_fail@plt+0x3b78>
   15010:	ldr	r2, [sp, #52]	; 0x34
   15014:	ldr	r3, [r4]
   15018:	cmp	r2, r3
   1501c:	bne	15028 <__assert_fail@plt+0x4094>
   15020:	add	sp, sp, #56	; 0x38
   15024:	pop	{r4, r5, r6, pc}
   15028:	bl	10dc0 <__stack_chk_fail@plt>
   1502c:	andeq	r7, r2, r8, lsl #30
   15030:	push	{r4, r5, r6, r7, lr}
   15034:	sub	sp, sp, #60	; 0x3c
   15038:	ldr	r4, [pc, #72]	; 15088 <__assert_fail@plt+0x40f4>
   1503c:	mov	r6, r2
   15040:	mov	r7, r3
   15044:	ldr	ip, [r4]
   15048:	mov	r5, r0
   1504c:	add	r0, sp, #4
   15050:	str	ip, [sp, #52]	; 0x34
   15054:	bl	13184 <__assert_fail@plt+0x21f0>
   15058:	add	r3, sp, #4
   1505c:	mov	r2, r7
   15060:	mov	r1, r6
   15064:	mov	r0, r5
   15068:	bl	14b0c <__assert_fail@plt+0x3b78>
   1506c:	ldr	r2, [sp, #52]	; 0x34
   15070:	ldr	r3, [r4]
   15074:	cmp	r2, r3
   15078:	bne	15084 <__assert_fail@plt+0x40f0>
   1507c:	add	sp, sp, #60	; 0x3c
   15080:	pop	{r4, r5, r6, r7, pc}
   15084:	bl	10dc0 <__stack_chk_fail@plt>
   15088:	andeq	r7, r2, r8, lsl #30
   1508c:	mov	r2, r1
   15090:	mov	r1, r0
   15094:	mov	r0, #0
   15098:	b	14fd8 <__assert_fail@plt+0x4044>
   1509c:	mov	r3, r2
   150a0:	mov	r2, r1
   150a4:	mov	r1, r0
   150a8:	mov	r0, #0
   150ac:	b	15030 <__assert_fail@plt+0x409c>
   150b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   150b4:	mov	r4, r2
   150b8:	ldr	lr, [pc, #128]	; 15140 <__assert_fail@plt+0x41ac>
   150bc:	mov	r8, r0
   150c0:	mov	r9, r1
   150c4:	ldm	lr!, {r0, r1, r2, r3}
   150c8:	sub	sp, sp, #60	; 0x3c
   150cc:	add	ip, sp, #4
   150d0:	lsr	r6, r4, #5
   150d4:	stmia	ip!, {r0, r1, r2, r3}
   150d8:	add	r7, sp, #12
   150dc:	ldm	lr!, {r0, r1, r2, r3}
   150e0:	and	r4, r4, #31
   150e4:	ldr	r5, [pc, #88]	; 15144 <__assert_fail@plt+0x41b0>
   150e8:	stmia	ip!, {r0, r1, r2, r3}
   150ec:	ldm	lr, {r0, r1, r2, r3}
   150f0:	stm	ip, {r0, r1, r2, r3}
   150f4:	mov	r2, r9
   150f8:	ldr	r3, [r7, r6, lsl #2]
   150fc:	ldr	ip, [r5]
   15100:	mov	r1, r8
   15104:	mvn	r0, r3, lsr r4
   15108:	and	r0, r0, #1
   1510c:	str	ip, [sp, #52]	; 0x34
   15110:	eor	r4, r3, r0, lsl r4
   15114:	add	r3, sp, #4
   15118:	mov	r0, #0
   1511c:	str	r4, [r7, r6, lsl #2]
   15120:	bl	14b0c <__assert_fail@plt+0x3b78>
   15124:	ldr	r2, [sp, #52]	; 0x34
   15128:	ldr	r3, [r5]
   1512c:	cmp	r2, r3
   15130:	bne	1513c <__assert_fail@plt+0x41a8>
   15134:	add	sp, sp, #60	; 0x3c
   15138:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1513c:	bl	10dc0 <__stack_chk_fail@plt>
   15140:	andeq	r8, r2, r0, ror r2
   15144:	andeq	r7, r2, r8, lsl #30
   15148:	mov	r2, r1
   1514c:	mvn	r1, #0
   15150:	b	150b0 <__assert_fail@plt+0x411c>
   15154:	mov	r2, #58	; 0x3a
   15158:	mvn	r1, #0
   1515c:	b	150b0 <__assert_fail@plt+0x411c>
   15160:	mov	r2, #58	; 0x3a
   15164:	b	150b0 <__assert_fail@plt+0x411c>
   15168:	push	{r4, r5, r6, r7, r8, lr}
   1516c:	sub	sp, sp, #104	; 0x68
   15170:	ldr	r5, [pc, #120]	; 151f0 <__assert_fail@plt+0x425c>
   15174:	mov	r6, r0
   15178:	mov	r0, sp
   1517c:	ldr	r3, [r5]
   15180:	mov	r7, r2
   15184:	str	r3, [sp, #100]	; 0x64
   15188:	bl	13184 <__assert_fail@plt+0x21f0>
   1518c:	mov	ip, sp
   15190:	add	lr, sp, #52	; 0x34
   15194:	ldm	ip!, {r0, r1, r2, r3}
   15198:	stmia	lr!, {r0, r1, r2, r3}
   1519c:	ldm	ip!, {r0, r1, r2, r3}
   151a0:	ldr	r8, [sp, #64]	; 0x40
   151a4:	stmia	lr!, {r0, r1, r2, r3}
   151a8:	mvn	r4, r8
   151ac:	ldm	ip, {r0, r1, r2, r3}
   151b0:	and	ip, r4, #67108864	; 0x4000000
   151b4:	eor	ip, ip, r8
   151b8:	str	ip, [sp, #64]	; 0x40
   151bc:	stm	lr, {r0, r1, r2, r3}
   151c0:	add	r3, sp, #52	; 0x34
   151c4:	mvn	r2, #0
   151c8:	mov	r1, r7
   151cc:	mov	r0, r6
   151d0:	bl	14b0c <__assert_fail@plt+0x3b78>
   151d4:	ldr	r2, [sp, #100]	; 0x64
   151d8:	ldr	r3, [r5]
   151dc:	cmp	r2, r3
   151e0:	bne	151ec <__assert_fail@plt+0x4258>
   151e4:	add	sp, sp, #104	; 0x68
   151e8:	pop	{r4, r5, r6, r7, r8, pc}
   151ec:	bl	10dc0 <__stack_chk_fail@plt>
   151f0:	andeq	r7, r2, r8, lsl #30
   151f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   151f8:	mov	r6, r1
   151fc:	ldr	lr, [pc, #132]	; 15288 <__assert_fail@plt+0x42f4>
   15200:	mov	r5, r2
   15204:	mov	r8, r0
   15208:	mov	r9, r3
   1520c:	ldm	lr!, {r0, r1, r2, r3}
   15210:	sub	sp, sp, #60	; 0x3c
   15214:	add	ip, sp, #4
   15218:	ldr	r4, [pc, #108]	; 1528c <__assert_fail@plt+0x42f8>
   1521c:	stmia	ip!, {r0, r1, r2, r3}
   15220:	mov	r7, #10
   15224:	ldm	lr!, {r0, r1, r2, r3}
   15228:	cmp	r5, #0
   1522c:	cmpne	r6, #0
   15230:	str	r7, [sp, #4]
   15234:	stmia	ip!, {r0, r1, r2, r3}
   15238:	ldm	lr, {r0, r1, r2, r3}
   1523c:	ldr	lr, [r4]
   15240:	stm	ip, {r0, r1, r2, r3}
   15244:	str	lr, [sp, #52]	; 0x34
   15248:	beq	15284 <__assert_fail@plt+0x42f0>
   1524c:	add	r3, sp, #4
   15250:	ldr	r2, [sp, #88]	; 0x58
   15254:	mov	r1, r9
   15258:	mov	r0, r8
   1525c:	str	r6, [sp, #44]	; 0x2c
   15260:	str	r5, [sp, #48]	; 0x30
   15264:	bl	14b0c <__assert_fail@plt+0x3b78>
   15268:	ldr	r2, [sp, #52]	; 0x34
   1526c:	ldr	r3, [r4]
   15270:	cmp	r2, r3
   15274:	bne	15280 <__assert_fail@plt+0x42ec>
   15278:	add	sp, sp, #60	; 0x3c
   1527c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15280:	bl	10dc0 <__stack_chk_fail@plt>
   15284:	bl	10f7c <abort@plt>
   15288:	andeq	r8, r2, r0, ror r2
   1528c:	andeq	r7, r2, r8, lsl #30
   15290:	push	{lr}		; (str lr, [sp, #-4]!)
   15294:	sub	sp, sp, #12
   15298:	mvn	ip, #0
   1529c:	str	ip, [sp]
   152a0:	bl	151f4 <__assert_fail@plt+0x4260>
   152a4:	add	sp, sp, #12
   152a8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ac:	push	{lr}		; (str lr, [sp, #-4]!)
   152b0:	sub	sp, sp, #12
   152b4:	mvn	ip, #0
   152b8:	mov	r3, r2
   152bc:	str	ip, [sp]
   152c0:	mov	r2, r1
   152c4:	mov	r1, r0
   152c8:	mov	r0, #0
   152cc:	bl	151f4 <__assert_fail@plt+0x4260>
   152d0:	add	sp, sp, #12
   152d4:	pop	{pc}		; (ldr pc, [sp], #4)
   152d8:	push	{lr}		; (str lr, [sp, #-4]!)
   152dc:	sub	sp, sp, #12
   152e0:	str	r3, [sp]
   152e4:	mov	r3, r2
   152e8:	mov	r2, r1
   152ec:	mov	r1, r0
   152f0:	mov	r0, #0
   152f4:	bl	151f4 <__assert_fail@plt+0x4260>
   152f8:	add	sp, sp, #12
   152fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15300:	ldr	r3, [pc]	; 15308 <__assert_fail@plt+0x4374>
   15304:	b	14b0c <__assert_fail@plt+0x3b78>
   15308:	andeq	r8, r2, ip, lsl #2
   1530c:	mov	r2, r1
   15310:	ldr	r3, [pc, #8]	; 15320 <__assert_fail@plt+0x438c>
   15314:	mov	r1, r0
   15318:	mov	r0, #0
   1531c:	b	14b0c <__assert_fail@plt+0x3b78>
   15320:	andeq	r8, r2, ip, lsl #2
   15324:	ldr	r3, [pc, #4]	; 15330 <__assert_fail@plt+0x439c>
   15328:	mvn	r2, #0
   1532c:	b	14b0c <__assert_fail@plt+0x3b78>
   15330:	andeq	r8, r2, ip, lsl #2
   15334:	mov	r1, r0
   15338:	ldr	r3, [pc, #8]	; 15348 <__assert_fail@plt+0x43b4>
   1533c:	mvn	r2, #0
   15340:	mov	r0, #0
   15344:	b	14b0c <__assert_fail@plt+0x3b78>
   15348:	andeq	r8, r2, ip, lsl #2
   1534c:	push	{r4, r5, r6, r7, r8, lr}
   15350:	mov	r8, r0
   15354:	ldr	r5, [pc, #84]	; 153b0 <__assert_fail@plt+0x441c>
   15358:	mov	r7, r1
   1535c:	mov	r4, r2
   15360:	mov	r2, r4
   15364:	mov	r1, r7
   15368:	mov	r0, r8
   1536c:	bl	10d48 <read@plt>
   15370:	subs	r6, r0, #0
   15374:	bge	153a8 <__assert_fail@plt+0x4414>
   15378:	bl	10ec8 <__errno_location@plt>
   1537c:	ldr	r3, [r0]
   15380:	cmp	r3, #4
   15384:	beq	15360 <__assert_fail@plt+0x43cc>
   15388:	cmp	r4, r5
   1538c:	movls	r2, #0
   15390:	movhi	r2, #1
   15394:	cmp	r3, #22
   15398:	movne	r2, #0
   1539c:	cmp	r2, #0
   153a0:	mov	r4, r5
   153a4:	bne	15360 <__assert_fail@plt+0x43cc>
   153a8:	mov	r0, r6
   153ac:	pop	{r4, r5, r6, r7, r8, pc}
   153b0:	svcvc	0x00f00000	; IMB
   153b4:	push	{r4, r5, r6, lr}
   153b8:	sub	sp, sp, #32
   153bc:	cmp	r1, #0
   153c0:	mov	r5, r0
   153c4:	ldr	r4, [sp, #48]	; 0x30
   153c8:	ldr	r6, [sp, #52]	; 0x34
   153cc:	beq	1545c <__assert_fail@plt+0x44c8>
   153d0:	strd	r2, [sp]
   153d4:	mov	r3, r1
   153d8:	ldr	r2, [pc, #828]	; 1571c <__assert_fail@plt+0x4788>
   153dc:	mov	r1, #1
   153e0:	bl	10f04 <__fprintf_chk@plt>
   153e4:	mov	r2, #5
   153e8:	ldr	r1, [pc, #816]	; 15720 <__assert_fail@plt+0x478c>
   153ec:	mov	r0, #0
   153f0:	bl	10db4 <dcgettext@plt>
   153f4:	ldr	r3, [pc, #808]	; 15724 <__assert_fail@plt+0x4790>
   153f8:	ldr	r2, [pc, #808]	; 15728 <__assert_fail@plt+0x4794>
   153fc:	str	r3, [sp]
   15400:	mov	r1, #1
   15404:	mov	r3, r0
   15408:	mov	r0, r5
   1540c:	bl	10f04 <__fprintf_chk@plt>
   15410:	ldr	r1, [pc, #788]	; 1572c <__assert_fail@plt+0x4798>
   15414:	mov	r2, #5
   15418:	mov	r0, #0
   1541c:	bl	10db4 <dcgettext@plt>
   15420:	mov	r1, r5
   15424:	bl	10d24 <fputs_unlocked@plt>
   15428:	cmp	r6, #9
   1542c:	ldrls	pc, [pc, r6, lsl #2]
   15430:	b	1570c <__assert_fail@plt+0x4778>
   15434:	andeq	r5, r1, r8, lsl r7
   15438:	andeq	r5, r1, r0, ror #9
   1543c:	andeq	r5, r1, ip, lsl #10
   15440:	andeq	r5, r1, r0, asr #10
   15444:	andeq	r5, r1, ip, ror r5
   15448:			; <UNDEFINED> instruction: 0x000155bc
   1544c:	andeq	r5, r1, r4, lsl #12
   15450:	andeq	r5, r1, r4, asr r6
   15454:	andeq	r5, r1, ip, lsr #13
   15458:	andeq	r5, r1, r4, ror r4
   1545c:	str	r3, [sp]
   15460:	mov	r1, #1
   15464:	mov	r3, r2
   15468:	ldr	r2, [pc, #704]	; 15730 <__assert_fail@plt+0x479c>
   1546c:	bl	10f04 <__fprintf_chk@plt>
   15470:	b	153e4 <__assert_fail@plt+0x4450>
   15474:	ldr	r1, [pc, #696]	; 15734 <__assert_fail@plt+0x47a0>
   15478:	mov	r2, #5
   1547c:	mov	r0, #0
   15480:	bl	10db4 <dcgettext@plt>
   15484:	ldr	r2, [r4, #32]
   15488:	ldr	r3, [r4, #28]
   1548c:	ldr	r1, [r4, #24]
   15490:	str	r2, [sp, #28]
   15494:	ldr	r2, [r4, #20]
   15498:	str	r3, [sp, #24]
   1549c:	ldr	r3, [r4, #16]
   154a0:	str	r1, [sp, #20]
   154a4:	ldr	r1, [r4, #12]
   154a8:	str	r2, [sp, #16]
   154ac:	ldr	r2, [r4, #8]
   154b0:	str	r3, [sp, #12]
   154b4:	ldr	r3, [r4, #4]
   154b8:	str	r1, [sp, #8]
   154bc:	str	r2, [sp, #4]
   154c0:	str	r3, [sp]
   154c4:	mov	r1, #1
   154c8:	ldr	r3, [r4]
   154cc:	mov	r2, r0
   154d0:	mov	r0, r5
   154d4:	bl	10f04 <__fprintf_chk@plt>
   154d8:	add	sp, sp, #32
   154dc:	pop	{r4, r5, r6, pc}
   154e0:	mov	r2, #5
   154e4:	ldr	r1, [pc, #588]	; 15738 <__assert_fail@plt+0x47a4>
   154e8:	mov	r0, #0
   154ec:	bl	10db4 <dcgettext@plt>
   154f0:	ldr	r3, [r4]
   154f4:	mov	r1, #1
   154f8:	mov	r2, r0
   154fc:	mov	r0, r5
   15500:	add	sp, sp, #32
   15504:	pop	{r4, r5, r6, lr}
   15508:	b	10f04 <__fprintf_chk@plt>
   1550c:	mov	r2, #5
   15510:	ldr	r1, [pc, #548]	; 1573c <__assert_fail@plt+0x47a8>
   15514:	mov	r0, #0
   15518:	bl	10db4 <dcgettext@plt>
   1551c:	ldr	r2, [r4, #4]
   15520:	ldr	r3, [r4]
   15524:	mov	r1, #1
   15528:	str	r2, [sp, #48]	; 0x30
   1552c:	mov	r2, r0
   15530:	mov	r0, r5
   15534:	add	sp, sp, #32
   15538:	pop	{r4, r5, r6, lr}
   1553c:	b	10f04 <__fprintf_chk@plt>
   15540:	mov	r2, #5
   15544:	ldr	r1, [pc, #500]	; 15740 <__assert_fail@plt+0x47ac>
   15548:	mov	r0, #0
   1554c:	bl	10db4 <dcgettext@plt>
   15550:	ldr	r2, [r4, #8]
   15554:	ldr	r3, [r4, #4]
   15558:	mov	r1, #1
   1555c:	str	r2, [sp, #52]	; 0x34
   15560:	str	r3, [sp, #48]	; 0x30
   15564:	ldr	r3, [r4]
   15568:	mov	r2, r0
   1556c:	mov	r0, r5
   15570:	add	sp, sp, #32
   15574:	pop	{r4, r5, r6, lr}
   15578:	b	10f04 <__fprintf_chk@plt>
   1557c:	mov	r2, #5
   15580:	ldr	r1, [pc, #444]	; 15744 <__assert_fail@plt+0x47b0>
   15584:	mov	r0, #0
   15588:	bl	10db4 <dcgettext@plt>
   1558c:	ldr	r1, [r4, #12]
   15590:	ldr	r2, [r4, #8]
   15594:	ldr	r3, [r4, #4]
   15598:	str	r1, [sp, #8]
   1559c:	str	r2, [sp, #4]
   155a0:	str	r3, [sp]
   155a4:	mov	r1, #1
   155a8:	ldr	r3, [r4]
   155ac:	mov	r2, r0
   155b0:	mov	r0, r5
   155b4:	bl	10f04 <__fprintf_chk@plt>
   155b8:	b	154d8 <__assert_fail@plt+0x4544>
   155bc:	mov	r2, #5
   155c0:	ldr	r1, [pc, #384]	; 15748 <__assert_fail@plt+0x47b4>
   155c4:	mov	r0, #0
   155c8:	bl	10db4 <dcgettext@plt>
   155cc:	ldr	r3, [r4, #16]
   155d0:	ldr	r1, [r4, #12]
   155d4:	ldr	r2, [r4, #8]
   155d8:	str	r3, [sp, #12]
   155dc:	ldr	r3, [r4, #4]
   155e0:	str	r1, [sp, #8]
   155e4:	str	r2, [sp, #4]
   155e8:	str	r3, [sp]
   155ec:	mov	r1, #1
   155f0:	ldr	r3, [r4]
   155f4:	mov	r2, r0
   155f8:	mov	r0, r5
   155fc:	bl	10f04 <__fprintf_chk@plt>
   15600:	b	154d8 <__assert_fail@plt+0x4544>
   15604:	mov	r2, #5
   15608:	ldr	r1, [pc, #316]	; 1574c <__assert_fail@plt+0x47b8>
   1560c:	mov	r0, #0
   15610:	bl	10db4 <dcgettext@plt>
   15614:	ldr	r2, [r4, #20]
   15618:	ldr	r3, [r4, #16]
   1561c:	ldr	r1, [r4, #12]
   15620:	str	r2, [sp, #16]
   15624:	ldr	r2, [r4, #8]
   15628:	str	r3, [sp, #12]
   1562c:	ldr	r3, [r4, #4]
   15630:	str	r1, [sp, #8]
   15634:	str	r2, [sp, #4]
   15638:	str	r3, [sp]
   1563c:	mov	r1, #1
   15640:	ldr	r3, [r4]
   15644:	mov	r2, r0
   15648:	mov	r0, r5
   1564c:	bl	10f04 <__fprintf_chk@plt>
   15650:	b	154d8 <__assert_fail@plt+0x4544>
   15654:	mov	r2, #5
   15658:	ldr	r1, [pc, #240]	; 15750 <__assert_fail@plt+0x47bc>
   1565c:	mov	r0, #0
   15660:	bl	10db4 <dcgettext@plt>
   15664:	ldr	r1, [r4, #24]
   15668:	ldr	r2, [r4, #20]
   1566c:	ldr	r3, [r4, #16]
   15670:	str	r1, [sp, #20]
   15674:	ldr	r1, [r4, #12]
   15678:	str	r2, [sp, #16]
   1567c:	ldr	r2, [r4, #8]
   15680:	str	r3, [sp, #12]
   15684:	ldr	r3, [r4, #4]
   15688:	str	r1, [sp, #8]
   1568c:	str	r2, [sp, #4]
   15690:	str	r3, [sp]
   15694:	mov	r1, #1
   15698:	ldr	r3, [r4]
   1569c:	mov	r2, r0
   156a0:	mov	r0, r5
   156a4:	bl	10f04 <__fprintf_chk@plt>
   156a8:	b	154d8 <__assert_fail@plt+0x4544>
   156ac:	mov	r2, #5
   156b0:	ldr	r1, [pc, #156]	; 15754 <__assert_fail@plt+0x47c0>
   156b4:	mov	r0, #0
   156b8:	bl	10db4 <dcgettext@plt>
   156bc:	ldr	r3, [r4, #28]
   156c0:	ldr	r1, [r4, #24]
   156c4:	ldr	r2, [r4, #20]
   156c8:	str	r3, [sp, #24]
   156cc:	ldr	r3, [r4, #16]
   156d0:	str	r1, [sp, #20]
   156d4:	ldr	r1, [r4, #12]
   156d8:	str	r2, [sp, #16]
   156dc:	ldr	r2, [r4, #8]
   156e0:	str	r3, [sp, #12]
   156e4:	ldr	r3, [r4, #4]
   156e8:	str	r1, [sp, #8]
   156ec:	str	r2, [sp, #4]
   156f0:	str	r3, [sp]
   156f4:	mov	r1, #1
   156f8:	ldr	r3, [r4]
   156fc:	mov	r2, r0
   15700:	mov	r0, r5
   15704:	bl	10f04 <__fprintf_chk@plt>
   15708:	b	154d8 <__assert_fail@plt+0x4544>
   1570c:	mov	r2, #5
   15710:	ldr	r1, [pc, #64]	; 15758 <__assert_fail@plt+0x47c4>
   15714:	b	1547c <__assert_fail@plt+0x44e8>
   15718:	bl	10f7c <abort@plt>
   1571c:	andeq	r7, r1, r8, lsr r9
   15720:	andeq	r7, r1, ip, asr #18
   15724:	andeq	r0, r0, r2, ror #15
   15728:	andeq	r7, r1, r0, lsr #24
   1572c:	andeq	r7, r1, r0, asr r9
   15730:	andeq	r7, r1, r4, asr #18
   15734:	andeq	r7, r1, r8, lsr #22
   15738:	andeq	r7, r1, ip, lsl sl
   1573c:	andeq	r7, r1, ip, lsr #20
   15740:	andeq	r7, r1, r4, asr #20
   15744:	andeq	r7, r1, r0, ror #20
   15748:	andeq	r7, r1, r0, lsl #21
   1574c:	andeq	r7, r1, r4, lsr #21
   15750:	andeq	r7, r1, ip, asr #21
   15754:	strdeq	r7, [r1], -r8
   15758:	andeq	r7, r1, ip, asr fp
   1575c:	push	{r4, r5, lr}
   15760:	sub	sp, sp, #12
   15764:	ldr	r5, [sp, #24]
   15768:	ldr	ip, [r5]
   1576c:	cmp	ip, #0
   15770:	beq	1578c <__assert_fail@plt+0x47f8>
   15774:	mov	lr, r5
   15778:	mov	ip, #0
   1577c:	ldr	r4, [lr, #4]!
   15780:	add	ip, ip, #1
   15784:	cmp	r4, #0
   15788:	bne	1577c <__assert_fail@plt+0x47e8>
   1578c:	stm	sp, {r5, ip}
   15790:	bl	153b4 <__assert_fail@plt+0x4420>
   15794:	add	sp, sp, #12
   15798:	pop	{r4, r5, pc}
   1579c:	push	{r4, r5, r6, lr}
   157a0:	sub	sp, sp, #56	; 0x38
   157a4:	ldr	r6, [pc, #88]	; 15804 <__assert_fail@plt+0x4870>
   157a8:	ldr	r5, [sp, #72]	; 0x48
   157ac:	add	r4, sp, #8
   157b0:	ldr	ip, [r6]
   157b4:	str	ip, [sp, #52]	; 0x34
   157b8:	mov	ip, #0
   157bc:	ldr	lr, [r5], #4
   157c0:	cmp	lr, #0
   157c4:	str	lr, [r4, #4]!
   157c8:	beq	157d8 <__assert_fail@plt+0x4844>
   157cc:	add	ip, ip, #1
   157d0:	cmp	ip, #10
   157d4:	bne	157bc <__assert_fail@plt+0x4828>
   157d8:	add	lr, sp, #12
   157dc:	str	ip, [sp, #4]
   157e0:	str	lr, [sp]
   157e4:	bl	153b4 <__assert_fail@plt+0x4420>
   157e8:	ldr	r2, [sp, #52]	; 0x34
   157ec:	ldr	r3, [r6]
   157f0:	cmp	r2, r3
   157f4:	bne	15800 <__assert_fail@plt+0x486c>
   157f8:	add	sp, sp, #56	; 0x38
   157fc:	pop	{r4, r5, r6, pc}
   15800:	bl	10dc0 <__stack_chk_fail@plt>
   15804:	andeq	r7, r2, r8, lsl #30
   15808:	push	{r3}		; (str r3, [sp, #-4]!)
   1580c:	mov	ip, #0
   15810:	push	{r4, r5, r6, lr}
   15814:	sub	sp, sp, #60	; 0x3c
   15818:	ldr	r6, [pc, #100]	; 15884 <__assert_fail@plt+0x48f0>
   1581c:	add	r5, sp, #8
   15820:	add	r4, sp, #80	; 0x50
   15824:	ldr	r3, [r6]
   15828:	str	r4, [sp, #8]
   1582c:	str	r3, [sp, #52]	; 0x34
   15830:	ldr	r3, [sp, #76]	; 0x4c
   15834:	ldr	lr, [r4], #4
   15838:	cmp	lr, #0
   1583c:	str	lr, [r5, #4]!
   15840:	beq	15850 <__assert_fail@plt+0x48bc>
   15844:	add	ip, ip, #1
   15848:	cmp	ip, #10
   1584c:	bne	15834 <__assert_fail@plt+0x48a0>
   15850:	add	lr, sp, #12
   15854:	str	ip, [sp, #4]
   15858:	str	lr, [sp]
   1585c:	bl	153b4 <__assert_fail@plt+0x4420>
   15860:	ldr	r2, [sp, #52]	; 0x34
   15864:	ldr	r3, [r6]
   15868:	cmp	r2, r3
   1586c:	bne	15880 <__assert_fail@plt+0x48ec>
   15870:	add	sp, sp, #60	; 0x3c
   15874:	pop	{r4, r5, r6, lr}
   15878:	add	sp, sp, #4
   1587c:	bx	lr
   15880:	bl	10dc0 <__stack_chk_fail@plt>
   15884:	andeq	r7, r2, r8, lsl #30
   15888:	push	{r4, lr}
   1588c:	mov	r2, #5
   15890:	ldr	r1, [pc, #88]	; 158f0 <__assert_fail@plt+0x495c>
   15894:	mov	r0, #0
   15898:	bl	10db4 <dcgettext@plt>
   1589c:	ldr	r2, [pc, #80]	; 158f4 <__assert_fail@plt+0x4960>
   158a0:	mov	r1, r0
   158a4:	mov	r0, #1
   158a8:	bl	10eec <__printf_chk@plt>
   158ac:	mov	r2, #5
   158b0:	ldr	r1, [pc, #64]	; 158f8 <__assert_fail@plt+0x4964>
   158b4:	mov	r0, #0
   158b8:	bl	10db4 <dcgettext@plt>
   158bc:	ldr	r3, [pc, #56]	; 158fc <__assert_fail@plt+0x4968>
   158c0:	ldr	r2, [pc, #56]	; 15900 <__assert_fail@plt+0x496c>
   158c4:	mov	r1, r0
   158c8:	mov	r0, #1
   158cc:	bl	10eec <__printf_chk@plt>
   158d0:	ldr	r1, [pc, #44]	; 15904 <__assert_fail@plt+0x4970>
   158d4:	mov	r2, #5
   158d8:	mov	r0, #0
   158dc:	bl	10db4 <dcgettext@plt>
   158e0:	ldr	r3, [pc, #32]	; 15908 <__assert_fail@plt+0x4974>
   158e4:	pop	{r4, lr}
   158e8:	ldr	r1, [r3]
   158ec:	b	10d24 <fputs_unlocked@plt>
   158f0:	muleq	r1, r8, fp
   158f4:			; <UNDEFINED> instruction: 0x00017bb0
   158f8:	andeq	r7, r1, r8, asr #23
   158fc:	andeq	r7, r1, r4, ror r5
   15900:	muleq	r1, ip, r5
   15904:	ldrdeq	r7, [r1], -ip
   15908:	andeq	r8, r2, r4, asr r1
   1590c:	push	{r4, lr}
   15910:	mov	r4, r0
   15914:	bl	10e50 <malloc@plt>
   15918:	adds	r4, r4, #0
   1591c:	movne	r4, #1
   15920:	cmp	r0, #0
   15924:	movne	r4, #0
   15928:	cmp	r4, #0
   1592c:	popeq	{r4, pc}
   15930:	bl	15b54 <__assert_fail@plt+0x4bc0>
   15934:	push	{r4, r5, r6, lr}
   15938:	umull	r4, r5, r0, r1
   1593c:	adds	r3, r5, #0
   15940:	movne	r3, #1
   15944:	cmp	r4, #0
   15948:	blt	15960 <__assert_fail@plt+0x49cc>
   1594c:	cmp	r3, #0
   15950:	bne	15960 <__assert_fail@plt+0x49cc>
   15954:	mul	r0, r1, r0
   15958:	pop	{r4, r5, r6, lr}
   1595c:	b	1590c <__assert_fail@plt+0x4978>
   15960:	bl	15b54 <__assert_fail@plt+0x4bc0>
   15964:	b	1590c <__assert_fail@plt+0x4978>
   15968:	adds	r3, r0, #0
   1596c:	movne	r3, #1
   15970:	cmp	r1, #0
   15974:	movne	r3, #0
   15978:	cmp	r3, #0
   1597c:	push	{r4, lr}
   15980:	bne	159a8 <__assert_fail@plt+0x4a14>
   15984:	mov	r4, r1
   15988:	bl	10dcc <realloc@plt>
   1598c:	adds	r4, r4, #0
   15990:	movne	r4, #1
   15994:	cmp	r0, #0
   15998:	movne	r4, #0
   1599c:	cmp	r4, #0
   159a0:	popeq	{r4, pc}
   159a4:	bl	15b54 <__assert_fail@plt+0x4bc0>
   159a8:	bl	10d60 <free@plt>
   159ac:	mov	r0, #0
   159b0:	pop	{r4, pc}
   159b4:	push	{r4, r5, r6, lr}
   159b8:	umull	r4, r5, r1, r2
   159bc:	adds	r3, r5, #0
   159c0:	movne	r3, #1
   159c4:	cmp	r4, #0
   159c8:	blt	159e0 <__assert_fail@plt+0x4a4c>
   159cc:	cmp	r3, #0
   159d0:	bne	159e0 <__assert_fail@plt+0x4a4c>
   159d4:	mul	r1, r2, r1
   159d8:	pop	{r4, r5, r6, lr}
   159dc:	b	15968 <__assert_fail@plt+0x49d4>
   159e0:	bl	15b54 <__assert_fail@plt+0x4bc0>
   159e4:	push	{r4, r5, r6, r7, r8, lr}
   159e8:	subs	r7, r0, #0
   159ec:	mov	r6, r1
   159f0:	mov	r5, r2
   159f4:	ldr	r4, [r1]
   159f8:	beq	15a2c <__assert_fail@plt+0x4a98>
   159fc:	mov	r1, r2
   15a00:	ldr	r0, [pc, #104]	; 15a70 <__assert_fail@plt+0x4adc>
   15a04:	bl	16a08 <__assert_fail@plt+0x5a74>
   15a08:	cmp	r0, r4
   15a0c:	bls	15a50 <__assert_fail@plt+0x4abc>
   15a10:	add	r3, r4, #1
   15a14:	add	r4, r3, r4, lsr #1
   15a18:	str	r4, [r6]
   15a1c:	mul	r1, r5, r4
   15a20:	mov	r0, r7
   15a24:	pop	{r4, r5, r6, r7, r8, lr}
   15a28:	b	15968 <__assert_fail@plt+0x49d4>
   15a2c:	cmp	r4, #0
   15a30:	beq	15a54 <__assert_fail@plt+0x4ac0>
   15a34:	umull	r0, r1, r4, r5
   15a38:	adds	r3, r1, #0
   15a3c:	movne	r3, #1
   15a40:	cmp	r0, #0
   15a44:	blt	15a50 <__assert_fail@plt+0x4abc>
   15a48:	cmp	r3, #0
   15a4c:	beq	15a18 <__assert_fail@plt+0x4a84>
   15a50:	bl	15b54 <__assert_fail@plt+0x4bc0>
   15a54:	mov	r1, r2
   15a58:	mov	r0, #64	; 0x40
   15a5c:	bl	16a08 <__assert_fail@plt+0x5a74>
   15a60:	cmp	r5, #64	; 0x40
   15a64:	movls	r4, r0
   15a68:	addhi	r4, r0, #1
   15a6c:	b	15a34 <__assert_fail@plt+0x4aa0>
   15a70:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15a74:	cmp	r0, #0
   15a78:	ldr	r3, [r1]
   15a7c:	beq	15aa0 <__assert_fail@plt+0x4b0c>
   15a80:	ldr	r2, [pc, #60]	; 15ac4 <__assert_fail@plt+0x4b30>
   15a84:	cmp	r3, r2
   15a88:	bhi	15abc <__assert_fail@plt+0x4b28>
   15a8c:	add	r2, r3, #1
   15a90:	add	r3, r2, r3, lsr #1
   15a94:	str	r3, [r1]
   15a98:	mov	r1, r3
   15a9c:	b	15968 <__assert_fail@plt+0x49d4>
   15aa0:	cmp	r3, #0
   15aa4:	bne	15ab8 <__assert_fail@plt+0x4b24>
   15aa8:	mov	r3, #64	; 0x40
   15aac:	str	r3, [r1]
   15ab0:	mov	r1, r3
   15ab4:	b	15968 <__assert_fail@plt+0x49d4>
   15ab8:	bge	15a94 <__assert_fail@plt+0x4b00>
   15abc:	push	{r4, lr}
   15ac0:	bl	15b54 <__assert_fail@plt+0x4bc0>
   15ac4:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15ac8:	push	{r4, lr}
   15acc:	mov	r4, r0
   15ad0:	bl	1590c <__assert_fail@plt+0x4978>
   15ad4:	mov	r2, r4
   15ad8:	mov	r1, #0
   15adc:	pop	{r4, lr}
   15ae0:	b	10ee0 <memset@plt>
   15ae4:	push	{r4, r5, r6, lr}
   15ae8:	umull	r4, r5, r0, r1
   15aec:	adds	r3, r5, #0
   15af0:	movne	r3, #1
   15af4:	cmp	r4, #0
   15af8:	blt	15b10 <__assert_fail@plt+0x4b7c>
   15afc:	cmp	r3, #0
   15b00:	bne	15b10 <__assert_fail@plt+0x4b7c>
   15b04:	bl	10d18 <calloc@plt>
   15b08:	cmp	r0, #0
   15b0c:	popne	{r4, r5, r6, pc}
   15b10:	bl	15b54 <__assert_fail@plt+0x4bc0>
   15b14:	push	{r4, r5, r6, lr}
   15b18:	mov	r4, r1
   15b1c:	mov	r5, r0
   15b20:	mov	r0, r1
   15b24:	bl	1590c <__assert_fail@plt+0x4978>
   15b28:	mov	r2, r4
   15b2c:	mov	r1, r5
   15b30:	pop	{r4, r5, r6, lr}
   15b34:	b	10d78 <memcpy@plt>
   15b38:	push	{r4, lr}
   15b3c:	mov	r4, r0
   15b40:	bl	10ea4 <strlen@plt>
   15b44:	add	r1, r0, #1
   15b48:	mov	r0, r4
   15b4c:	pop	{r4, lr}
   15b50:	b	15b14 <__assert_fail@plt+0x4b80>
   15b54:	ldr	r3, [pc, #44]	; 15b88 <__assert_fail@plt+0x4bf4>
   15b58:	push	{r4, lr}
   15b5c:	mov	r2, #5
   15b60:	ldr	r1, [pc, #36]	; 15b8c <__assert_fail@plt+0x4bf8>
   15b64:	mov	r0, #0
   15b68:	ldr	r4, [r3]
   15b6c:	bl	10db4 <dcgettext@plt>
   15b70:	ldr	r2, [pc, #24]	; 15b90 <__assert_fail@plt+0x4bfc>
   15b74:	mov	r1, #0
   15b78:	mov	r3, r0
   15b7c:	mov	r0, r4
   15b80:	bl	10e38 <error@plt>
   15b84:	bl	10f7c <abort@plt>
   15b88:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15b8c:	andeq	r7, r1, r0, asr ip
   15b90:			; <UNDEFINED> instruction: 0x000176bc
   15b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b98:	sub	sp, sp, #36	; 0x24
   15b9c:	ldr	r6, [pc, #312]	; 15cdc <__assert_fail@plt+0x4d48>
   15ba0:	ldr	lr, [sp, #80]	; 0x50
   15ba4:	mov	r8, r2
   15ba8:	ldr	ip, [r6]
   15bac:	mov	r2, r1
   15bb0:	mov	r9, r3
   15bb4:	str	lr, [sp]
   15bb8:	add	r3, sp, #16
   15bbc:	mov	r1, #0
   15bc0:	str	ip, [sp, #28]
   15bc4:	mov	r7, r0
   15bc8:	ldr	sl, [sp, #84]	; 0x54
   15bcc:	ldr	r5, [sp, #88]	; 0x58
   15bd0:	bl	15cec <__assert_fail@plt+0x4d58>
   15bd4:	subs	fp, r0, #0
   15bd8:	bne	15c98 <__assert_fail@plt+0x4d04>
   15bdc:	ldrd	r2, [sp, #16]
   15be0:	cmp	r3, r9
   15be4:	cmpeq	r2, r8
   15be8:	ldrd	r8, [sp, #72]	; 0x48
   15bec:	movcc	r1, #1
   15bf0:	movcs	r1, #0
   15bf4:	cmp	r3, r9
   15bf8:	cmpeq	r2, r8
   15bfc:	orrhi	r1, r1, #1
   15c00:	cmp	r1, #0
   15c04:	beq	15c5c <__assert_fail@plt+0x4cc8>
   15c08:	strd	r2, [sp, #8]
   15c0c:	bl	10ec8 <__errno_location@plt>
   15c10:	ldrd	r2, [sp, #8]
   15c14:	mov	r9, #0
   15c18:	mvn	r8, #-1073741824	; 0xc0000000
   15c1c:	cmp	r3, r9
   15c20:	cmpeq	r2, r8
   15c24:	bls	15cc4 <__assert_fail@plt+0x4d30>
   15c28:	mov	r4, #75	; 0x4b
   15c2c:	cmp	r5, #0
   15c30:	str	r4, [r0]
   15c34:	beq	15c90 <__assert_fail@plt+0x4cfc>
   15c38:	mov	r0, r7
   15c3c:	bl	15334 <__assert_fail@plt+0x43a0>
   15c40:	mov	r3, sl
   15c44:	ldr	r2, [pc, #148]	; 15ce0 <__assert_fail@plt+0x4d4c>
   15c48:	mov	r1, r4
   15c4c:	str	r0, [sp]
   15c50:	mov	r0, r5
   15c54:	bl	10e38 <error@plt>
   15c58:	ldrd	r2, [sp, #16]
   15c5c:	ldr	lr, [sp, #28]
   15c60:	ldr	ip, [r6]
   15c64:	mov	r0, r2
   15c68:	cmp	lr, ip
   15c6c:	mov	r1, r3
   15c70:	bne	15cd8 <__assert_fail@plt+0x4d44>
   15c74:	add	sp, sp, #36	; 0x24
   15c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c7c:	mov	r4, #0
   15c80:	cmp	r5, #0
   15c84:	str	r4, [r0]
   15c88:	bne	15c38 <__assert_fail@plt+0x4ca4>
   15c8c:	mov	r4, r5
   15c90:	mov	r5, #1
   15c94:	b	15c38 <__assert_fail@plt+0x4ca4>
   15c98:	bl	10ec8 <__errno_location@plt>
   15c9c:	cmp	fp, #1
   15ca0:	beq	15c28 <__assert_fail@plt+0x4c94>
   15ca4:	cmp	fp, #3
   15ca8:	beq	15c7c <__assert_fail@plt+0x4ce8>
   15cac:	ldr	r4, [r0]
   15cb0:	cmp	r5, #0
   15cb4:	moveq	r5, #1
   15cb8:	cmp	r4, #22
   15cbc:	moveq	r4, #0
   15cc0:	b	15c38 <__assert_fail@plt+0x4ca4>
   15cc4:	mov	r4, #34	; 0x22
   15cc8:	cmp	r5, #0
   15ccc:	str	r4, [r0]
   15cd0:	bne	15c38 <__assert_fail@plt+0x4ca4>
   15cd4:	b	15c90 <__assert_fail@plt+0x4cfc>
   15cd8:	bl	10dc0 <__stack_chk_fail@plt>
   15cdc:	andeq	r7, r2, r8, lsl #30
   15ce0:			; <UNDEFINED> instruction: 0x000176b8
   15ce4:	mov	r1, #10
   15ce8:	b	15b94 <__assert_fail@plt+0x4c00>
   15cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cf0:	sub	sp, sp, #36	; 0x24
   15cf4:	ldr	r5, [pc, #2536]	; 166e4 <__assert_fail@plt+0x5750>
   15cf8:	mov	r9, r2
   15cfc:	cmp	r2, #36	; 0x24
   15d00:	str	r3, [sp, #12]
   15d04:	ldr	r2, [r5]
   15d08:	ldr	r3, [sp, #72]	; 0x48
   15d0c:	str	r2, [sp, #28]
   15d10:	str	r3, [sp]
   15d14:	bhi	166d0 <__assert_fail@plt+0x573c>
   15d18:	cmp	r1, #0
   15d1c:	mov	r4, r1
   15d20:	mov	r6, r0
   15d24:	addeq	r4, sp, #24
   15d28:	bl	10ec8 <__errno_location@plt>
   15d2c:	mov	r3, #0
   15d30:	str	r3, [r0]
   15d34:	mov	r7, r0
   15d38:	bl	10e8c <__ctype_b_loc@plt>
   15d3c:	ldrb	r3, [r6]
   15d40:	mov	r1, r6
   15d44:	ldr	r0, [r0]
   15d48:	b	15d50 <__assert_fail@plt+0x4dbc>
   15d4c:	ldrb	r3, [r1, #1]!
   15d50:	lsl	r2, r3, #1
   15d54:	ldrh	r8, [r0, r2]
   15d58:	ands	r8, r8, #8192	; 0x2000
   15d5c:	bne	15d4c <__assert_fail@plt+0x4db8>
   15d60:	cmp	r3, #45	; 0x2d
   15d64:	beq	15e00 <__assert_fail@plt+0x4e6c>
   15d68:	mov	r2, r9
   15d6c:	mov	r3, r8
   15d70:	mov	r1, r4
   15d74:	mov	r0, r6
   15d78:	bl	10d84 <__strtoull_internal@plt>
   15d7c:	ldr	r9, [r4]
   15d80:	cmp	r9, r6
   15d84:	mov	sl, r0
   15d88:	mov	fp, r1
   15d8c:	beq	15de8 <__assert_fail@plt+0x4e54>
   15d90:	ldr	r8, [r7]
   15d94:	cmp	r8, #0
   15d98:	bne	15dd8 <__assert_fail@plt+0x4e44>
   15d9c:	ldr	r3, [sp]
   15da0:	cmp	r3, #0
   15da4:	beq	15db4 <__assert_fail@plt+0x4e20>
   15da8:	ldrb	r6, [r9]
   15dac:	cmp	r6, #0
   15db0:	bne	16188 <__assert_fail@plt+0x51f4>
   15db4:	ldr	r3, [sp, #12]
   15db8:	strd	sl, [r3]
   15dbc:	ldr	r2, [sp, #28]
   15dc0:	ldr	r3, [r5]
   15dc4:	mov	r0, r8
   15dc8:	cmp	r2, r3
   15dcc:	bne	166cc <__assert_fail@plt+0x5738>
   15dd0:	add	sp, sp, #36	; 0x24
   15dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dd8:	cmp	r8, #34	; 0x22
   15ddc:	bne	15e00 <__assert_fail@plt+0x4e6c>
   15de0:	mov	r8, #1
   15de4:	b	15d9c <__assert_fail@plt+0x4e08>
   15de8:	ldr	r0, [sp]
   15dec:	cmp	r0, #0
   15df0:	beq	15e00 <__assert_fail@plt+0x4e6c>
   15df4:	ldrb	r6, [r6]
   15df8:	cmp	r6, #0
   15dfc:	bne	15e08 <__assert_fail@plt+0x4e74>
   15e00:	mov	r8, #4
   15e04:	b	15dbc <__assert_fail@plt+0x4e28>
   15e08:	mov	r1, r6
   15e0c:	bl	10eb0 <strchr@plt>
   15e10:	cmp	r0, #0
   15e14:	movne	sl, #1
   15e18:	movne	fp, #0
   15e1c:	beq	15e00 <__assert_fail@plt+0x4e6c>
   15e20:	sub	r7, r6, #69	; 0x45
   15e24:	cmp	r7, #47	; 0x2f
   15e28:	ldrls	pc, [pc, r7, lsl #2]
   15e2c:	b	15fec <__assert_fail@plt+0x5058>
   15e30:	strdeq	r5, [r1], -r0
   15e34:	andeq	r5, r1, ip, ror #31
   15e38:	strdeq	r5, [r1], -r0
   15e3c:	andeq	r5, r1, ip, ror #31
   15e40:	andeq	r5, r1, ip, ror #31
   15e44:	andeq	r5, r1, ip, ror #31
   15e48:	strdeq	r5, [r1], -r0
   15e4c:	andeq	r5, r1, ip, ror #31
   15e50:	strdeq	r5, [r1], -r0
   15e54:	andeq	r5, r1, ip, ror #31
   15e58:	andeq	r5, r1, ip, ror #31
   15e5c:	strdeq	r5, [r1], -r0
   15e60:	andeq	r5, r1, ip, ror #31
   15e64:	andeq	r5, r1, ip, ror #31
   15e68:	andeq	r5, r1, ip, ror #31
   15e6c:	strdeq	r5, [r1], -r0
   15e70:	andeq	r5, r1, ip, ror #31
   15e74:	andeq	r5, r1, ip, ror #31
   15e78:	andeq	r5, r1, ip, ror #31
   15e7c:	andeq	r5, r1, ip, ror #31
   15e80:	strdeq	r5, [r1], -r0
   15e84:	strdeq	r5, [r1], -r0
   15e88:	andeq	r5, r1, ip, ror #31
   15e8c:	andeq	r5, r1, ip, ror #31
   15e90:	andeq	r5, r1, ip, ror #31
   15e94:	andeq	r5, r1, ip, ror #31
   15e98:	andeq	r5, r1, ip, ror #31
   15e9c:	andeq	r5, r1, ip, ror #31
   15ea0:	andeq	r5, r1, ip, ror #31
   15ea4:	andeq	r5, r1, ip, ror #31
   15ea8:	andeq	r5, r1, ip, ror #31
   15eac:	andeq	r5, r1, ip, ror #31
   15eb0:	andeq	r5, r1, ip, ror #31
   15eb4:	andeq	r5, r1, ip, ror #31
   15eb8:	strdeq	r5, [r1], -r0
   15ebc:	andeq	r5, r1, ip, ror #31
   15ec0:	andeq	r5, r1, ip, ror #31
   15ec4:	andeq	r5, r1, ip, ror #31
   15ec8:	strdeq	r5, [r1], -r0
   15ecc:	andeq	r5, r1, ip, ror #31
   15ed0:	strdeq	r5, [r1], -r0
   15ed4:	andeq	r5, r1, ip, ror #31
   15ed8:	andeq	r5, r1, ip, ror #31
   15edc:	andeq	r5, r1, ip, ror #31
   15ee0:	andeq	r5, r1, ip, ror #31
   15ee4:	andeq	r5, r1, ip, ror #31
   15ee8:	andeq	r5, r1, ip, ror #31
   15eec:	strdeq	r5, [r1], -r0
   15ef0:	ldr	r0, [sp]
   15ef4:	mov	r1, #48	; 0x30
   15ef8:	bl	10eb0 <strchr@plt>
   15efc:	cmp	r0, #0
   15f00:	beq	15fec <__assert_fail@plt+0x5058>
   15f04:	ldrb	r3, [r9, #1]
   15f08:	cmp	r3, #68	; 0x44
   15f0c:	beq	165cc <__assert_fail@plt+0x5638>
   15f10:	cmp	r3, #105	; 0x69
   15f14:	beq	161ac <__assert_fail@plt+0x5218>
   15f18:	cmp	r3, #66	; 0x42
   15f1c:	beq	165cc <__assert_fail@plt+0x5638>
   15f20:	cmp	r7, #47	; 0x2f
   15f24:	ldrls	pc, [pc, r7, lsl #2]
   15f28:	b	1619c <__assert_fail@plt+0x5208>
   15f2c:			; <UNDEFINED> instruction: 0x000165b0
   15f30:	muleq	r1, ip, r1
   15f34:	andeq	r6, r1, r0, lsr #11
   15f38:	muleq	r1, ip, r1
   15f3c:	muleq	r1, ip, r1
   15f40:	muleq	r1, ip, r1
   15f44:	muleq	r1, r0, r5
   15f48:	muleq	r1, ip, r1
   15f4c:	andeq	r6, r1, r0, lsl #11
   15f50:	muleq	r1, ip, r1
   15f54:	muleq	r1, ip, r1
   15f58:	andeq	r6, r1, r0, ror r5
   15f5c:	muleq	r1, ip, r1
   15f60:	muleq	r1, ip, r1
   15f64:	muleq	r1, ip, r1
   15f68:	andeq	r6, r1, r0, ror #10
   15f6c:	muleq	r1, ip, r1
   15f70:	muleq	r1, ip, r1
   15f74:	muleq	r1, ip, r1
   15f78:	muleq	r1, ip, r1
   15f7c:	andeq	r6, r1, r0, asr r5
   15f80:	andeq	r6, r1, r0, asr #10
   15f84:	muleq	r1, ip, r1
   15f88:	muleq	r1, ip, r1
   15f8c:	muleq	r1, ip, r1
   15f90:	muleq	r1, ip, r1
   15f94:	muleq	r1, ip, r1
   15f98:	muleq	r1, ip, r1
   15f9c:	muleq	r1, ip, r1
   15fa0:	andeq	r6, r1, r8, ror #3
   15fa4:	andeq	r6, r1, r8, lsr r5
   15fa8:	muleq	r1, ip, r1
   15fac:	muleq	r1, ip, r1
   15fb0:	muleq	r1, ip, r1
   15fb4:	andeq	r6, r1, r0, lsr #11
   15fb8:	muleq	r1, ip, r1
   15fbc:	muleq	r1, ip, r1
   15fc0:	muleq	r1, ip, r1
   15fc4:	muleq	r1, r0, r5
   15fc8:	muleq	r1, ip, r1
   15fcc:	andeq	r6, r1, r0, lsl #11
   15fd0:	muleq	r1, ip, r1
   15fd4:	muleq	r1, ip, r1
   15fd8:	muleq	r1, ip, r1
   15fdc:	muleq	r1, ip, r1
   15fe0:	muleq	r1, ip, r1
   15fe4:	muleq	r1, ip, r1
   15fe8:	andeq	r6, r1, r0, ror #10
   15fec:	mov	lr, #1
   15ff0:	mov	r0, #1024	; 0x400
   15ff4:	sub	r6, r6, #66	; 0x42
   15ff8:	cmp	r6, #53	; 0x35
   15ffc:	ldrls	pc, [pc, r6, lsl #2]
   16000:	b	1619c <__assert_fail@plt+0x5208>
   16004:	andeq	r6, r1, r0, lsl r2
   16008:	muleq	r1, ip, r1
   1600c:	muleq	r1, ip, r1
   16010:	andeq	r6, r1, r4, lsr r2
   16014:	muleq	r1, ip, r1
   16018:	ldrdeq	r6, [r1], -ip
   1601c:	muleq	r1, ip, r1
   16020:	muleq	r1, ip, r1
   16024:	muleq	r1, ip, r1
   16028:	andeq	r6, r1, ip, lsr #6
   1602c:	muleq	r1, ip, r1
   16030:	ldrdeq	r6, [r1], -r0
   16034:	muleq	r1, ip, r1
   16038:	muleq	r1, ip, r1
   1603c:	andeq	r6, r1, r4, asr r4
   16040:	muleq	r1, ip, r1
   16044:	muleq	r1, ip, r1
   16048:	muleq	r1, ip, r1
   1604c:	ldrdeq	r6, [r1], -r8
   16050:	muleq	r1, ip, r1
   16054:	muleq	r1, ip, r1
   16058:	muleq	r1, ip, r1
   1605c:	muleq	r1, ip, r1
   16060:	andeq	r6, r1, ip, asr r3
   16064:			; <UNDEFINED> instruction: 0x000162b0
   16068:	muleq	r1, ip, r1
   1606c:	muleq	r1, ip, r1
   16070:	muleq	r1, ip, r1
   16074:	muleq	r1, ip, r1
   16078:	muleq	r1, ip, r1
   1607c:	muleq	r1, ip, r1
   16080:	muleq	r1, ip, r1
   16084:	andeq	r6, r1, ip, ror #3
   16088:	andeq	r6, r1, r0, ror r1
   1608c:	muleq	r1, ip, r1
   16090:	muleq	r1, ip, r1
   16094:	muleq	r1, ip, r1
   16098:	ldrdeq	r6, [r1], -ip
   1609c:	muleq	r1, ip, r1
   160a0:	muleq	r1, ip, r1
   160a4:	muleq	r1, ip, r1
   160a8:	andeq	r6, r1, ip, lsr #6
   160ac:	muleq	r1, ip, r1
   160b0:	ldrdeq	r6, [r1], -r0
   160b4:	muleq	r1, ip, r1
   160b8:	muleq	r1, ip, r1
   160bc:	muleq	r1, ip, r1
   160c0:	muleq	r1, ip, r1
   160c4:	muleq	r1, ip, r1
   160c8:	muleq	r1, ip, r1
   160cc:	ldrdeq	r6, [r1], -r8
   160d0:	muleq	r1, ip, r1
   160d4:	muleq	r1, ip, r1
   160d8:	andeq	r6, r1, r4, asr #3
   160dc:	asr	r1, r0, #31
   160e0:	mov	r2, #0
   160e4:	mov	r3, #0
   160e8:	cmp	fp, #0
   160ec:	strd	r2, [sp]
   160f0:	bne	16610 <__assert_fail@plt+0x567c>
   160f4:	ldrd	r2, [sp]
   160f8:	orrs	r3, r2, r3
   160fc:	bne	16600 <__assert_fail@plt+0x566c>
   16100:	mul	r3, sl, r1
   16104:	umull	r6, r7, sl, r0
   16108:	mla	r3, r0, fp, r3
   1610c:	ldrd	sl, [sp]
   16110:	add	ip, r3, r7
   16114:	cmp	ip, #0
   16118:	mov	r7, ip
   1611c:	bne	166a4 <__assert_fail@plt+0x5710>
   16120:	orrs	r3, sl, fp
   16124:	bne	16600 <__assert_fail@plt+0x566c>
   16128:	umull	r2, r3, r6, r0
   1612c:	mul	ip, r6, r1
   16130:	strd	r2, [sp]
   16134:	mla	r3, r0, r7, ip
   16138:	ldr	r2, [sp, #4]
   1613c:	add	ip, r3, r2
   16140:	cmp	ip, #0
   16144:	str	ip, [sp, #4]
   16148:	bne	16680 <__assert_fail@plt+0x56ec>
   1614c:	orrs	r3, sl, fp
   16150:	bne	16600 <__assert_fail@plt+0x566c>
   16154:	ldrd	r6, [sp]
   16158:	mov	r3, #0
   1615c:	mul	r2, r6, r1
   16160:	umull	sl, fp, r6, r0
   16164:	mla	r2, r0, r7, r2
   16168:	add	fp, r2, fp
   1616c:	orr	r8, r8, r3
   16170:	add	r3, r9, lr
   16174:	str	r3, [r4]
   16178:	ldrb	r3, [r9, lr]
   1617c:	cmp	r3, #0
   16180:	orrne	r8, r8, #2
   16184:	b	15db4 <__assert_fail@plt+0x4e20>
   16188:	mov	r1, r6
   1618c:	ldr	r0, [sp]
   16190:	bl	10eb0 <strchr@plt>
   16194:	cmp	r0, #0
   16198:	bne	15e20 <__assert_fail@plt+0x4e8c>
   1619c:	ldr	r3, [sp, #12]
   161a0:	orr	r8, r8, #2
   161a4:	strd	sl, [r3]
   161a8:	b	15dbc <__assert_fail@plt+0x4e28>
   161ac:	ldrb	r3, [r9, #2]
   161b0:	mov	r0, #1024	; 0x400
   161b4:	cmp	r3, #66	; 0x42
   161b8:	movne	lr, #1
   161bc:	moveq	lr, #3
   161c0:	b	15ff4 <__assert_fail@plt+0x5060>
   161c4:	lsr	r3, fp, #31
   161c8:	adds	sl, sl, sl
   161cc:	adc	fp, fp, fp
   161d0:	cmp	r3, #0
   161d4:	beq	16170 <__assert_fail@plt+0x51dc>
   161d8:	mov	r8, #1
   161dc:	mvn	sl, #0
   161e0:	mvn	fp, #0
   161e4:	b	16170 <__assert_fail@plt+0x51dc>
   161e8:	mov	lr, #1
   161ec:	lsr	r3, fp, #23
   161f0:	cmp	r3, #0
   161f4:	bne	161d8 <__assert_fail@plt+0x5244>
   161f8:	lsl	r3, fp, #9
   161fc:	orr	r3, r3, sl, lsr #23
   16200:	lsl	r2, sl, #9
   16204:	mov	sl, r2
   16208:	mov	fp, r3
   1620c:	b	16170 <__assert_fail@plt+0x51dc>
   16210:	lsr	r3, fp, #22
   16214:	cmp	r3, #0
   16218:	bne	161d8 <__assert_fail@plt+0x5244>
   1621c:	lsl	r3, fp, #10
   16220:	orr	r3, r3, sl, lsr #22
   16224:	lsl	r2, sl, #10
   16228:	mov	sl, r2
   1622c:	mov	fp, r3
   16230:	b	16170 <__assert_fail@plt+0x51dc>
   16234:	mov	r6, r0
   16238:	asr	r7, r0, #31
   1623c:	mov	r3, #0
   16240:	mov	ip, #6
   16244:	str	r3, [sp]
   16248:	strd	r4, [sp, #16]
   1624c:	b	1627c <__assert_fail@plt+0x52e8>
   16250:	orrs	r3, r2, r3
   16254:	movne	r3, #1
   16258:	muleq	r3, sl, r7
   1625c:	strne	r3, [sp]
   16260:	mlaeq	r3, r6, fp, r3
   16264:	umulleq	sl, fp, sl, r6
   16268:	mvnne	sl, #0
   1626c:	addeq	fp, r3, fp
   16270:	mvnne	fp, #0
   16274:	subs	ip, ip, #1
   16278:	beq	165c0 <__assert_fail@plt+0x562c>
   1627c:	cmp	fp, #0
   16280:	mov	r2, #0
   16284:	mov	r3, #0
   16288:	beq	16250 <__assert_fail@plt+0x52bc>
   1628c:	umull	r0, r1, sl, r6
   16290:	mov	r5, #0
   16294:	mov	r0, r1
   16298:	mov	r1, r5
   1629c:	umlal	r0, r1, fp, r6
   162a0:	cmp	r1, r5
   162a4:	movne	r2, #1
   162a8:	movne	r3, #0
   162ac:	b	16250 <__assert_fail@plt+0x52bc>
   162b0:	mov	r6, r0
   162b4:	asr	r7, r0, #31
   162b8:	mov	r3, #0
   162bc:	mov	ip, #7
   162c0:	str	r3, [sp]
   162c4:	strd	r4, [sp, #16]
   162c8:	b	162f8 <__assert_fail@plt+0x5364>
   162cc:	orrs	r3, r2, r3
   162d0:	movne	r3, #1
   162d4:	muleq	r3, sl, r7
   162d8:	strne	r3, [sp]
   162dc:	mlaeq	r3, r6, fp, r3
   162e0:	umulleq	sl, fp, sl, r6
   162e4:	mvnne	sl, #0
   162e8:	addeq	fp, r3, fp
   162ec:	mvnne	fp, #0
   162f0:	subs	ip, ip, #1
   162f4:	beq	165c0 <__assert_fail@plt+0x562c>
   162f8:	cmp	fp, #0
   162fc:	mov	r2, #0
   16300:	mov	r3, #0
   16304:	beq	162cc <__assert_fail@plt+0x5338>
   16308:	umull	r0, r1, sl, r6
   1630c:	mov	r5, #0
   16310:	mov	r0, r1
   16314:	mov	r1, r5
   16318:	umlal	r0, r1, fp, r6
   1631c:	cmp	r1, r5
   16320:	movne	r2, #1
   16324:	movne	r3, #0
   16328:	b	162cc <__assert_fail@plt+0x5338>
   1632c:	asr	r1, r0, #31
   16330:	cmp	fp, #0
   16334:	mov	r6, #0
   16338:	mov	r7, #0
   1633c:	bne	165d8 <__assert_fail@plt+0x5644>
   16340:	orrs	r3, r6, r7
   16344:	bne	161d8 <__assert_fail@plt+0x5244>
   16348:	mul	r3, sl, r1
   1634c:	mla	r3, r0, fp, r3
   16350:	umull	sl, fp, sl, r0
   16354:	add	fp, r3, fp
   16358:	b	16170 <__assert_fail@plt+0x51dc>
   1635c:	mov	r6, r0
   16360:	asr	r7, r0, #31
   16364:	mov	r3, #0
   16368:	mov	ip, #8
   1636c:	str	r3, [sp]
   16370:	strd	r4, [sp, #16]
   16374:	b	163a4 <__assert_fail@plt+0x5410>
   16378:	orrs	r3, r2, r3
   1637c:	movne	r3, #1
   16380:	muleq	r3, sl, r7
   16384:	strne	r3, [sp]
   16388:	mlaeq	r3, r6, fp, r3
   1638c:	umulleq	sl, fp, sl, r6
   16390:	mvnne	sl, #0
   16394:	addeq	fp, r3, fp
   16398:	mvnne	fp, #0
   1639c:	subs	ip, ip, #1
   163a0:	beq	165c0 <__assert_fail@plt+0x562c>
   163a4:	cmp	fp, #0
   163a8:	mov	r2, #0
   163ac:	mov	r3, #0
   163b0:	beq	16378 <__assert_fail@plt+0x53e4>
   163b4:	umull	r0, r1, sl, r6
   163b8:	mov	r5, #0
   163bc:	mov	r0, r1
   163c0:	mov	r1, r5
   163c4:	umlal	r0, r1, fp, r6
   163c8:	cmp	r1, r5
   163cc:	movne	r2, #1
   163d0:	movne	r3, #0
   163d4:	b	16378 <__assert_fail@plt+0x53e4>
   163d8:	mov	r6, r0
   163dc:	asr	r7, r0, #31
   163e0:	mov	r3, #0
   163e4:	mov	ip, #4
   163e8:	str	r3, [sp]
   163ec:	strd	r4, [sp, #16]
   163f0:	b	16420 <__assert_fail@plt+0x548c>
   163f4:	orrs	r3, r2, r3
   163f8:	movne	r3, #1
   163fc:	muleq	r3, sl, r7
   16400:	strne	r3, [sp]
   16404:	mlaeq	r3, r6, fp, r3
   16408:	umulleq	sl, fp, sl, r6
   1640c:	mvnne	sl, #0
   16410:	addeq	fp, r3, fp
   16414:	mvnne	fp, #0
   16418:	subs	ip, ip, #1
   1641c:	beq	165c0 <__assert_fail@plt+0x562c>
   16420:	cmp	fp, #0
   16424:	mov	r2, #0
   16428:	mov	r3, #0
   1642c:	beq	163f4 <__assert_fail@plt+0x5460>
   16430:	umull	r0, r1, sl, r6
   16434:	mov	r5, #0
   16438:	mov	r0, r1
   1643c:	mov	r1, r5
   16440:	umlal	r0, r1, fp, r6
   16444:	cmp	r1, r5
   16448:	movne	r2, #1
   1644c:	movne	r3, #0
   16450:	b	163f4 <__assert_fail@plt+0x5460>
   16454:	mov	r6, r0
   16458:	asr	r7, r0, #31
   1645c:	mov	r3, #0
   16460:	mov	ip, #5
   16464:	str	r3, [sp]
   16468:	strd	r4, [sp, #16]
   1646c:	b	1649c <__assert_fail@plt+0x5508>
   16470:	orrs	r3, r2, r3
   16474:	movne	r3, #1
   16478:	muleq	r3, sl, r7
   1647c:	strne	r3, [sp]
   16480:	mlaeq	r3, r6, fp, r3
   16484:	umulleq	sl, fp, sl, r6
   16488:	mvnne	sl, #0
   1648c:	addeq	fp, r3, fp
   16490:	mvnne	fp, #0
   16494:	subs	ip, ip, #1
   16498:	beq	165c0 <__assert_fail@plt+0x562c>
   1649c:	cmp	fp, #0
   164a0:	mov	r2, #0
   164a4:	mov	r3, #0
   164a8:	beq	16470 <__assert_fail@plt+0x54dc>
   164ac:	umull	r0, r1, sl, r6
   164b0:	mov	r5, #0
   164b4:	mov	r0, r1
   164b8:	mov	r1, r5
   164bc:	umlal	r0, r1, fp, r6
   164c0:	cmp	r1, r5
   164c4:	movne	r2, #1
   164c8:	movne	r3, #0
   164cc:	b	16470 <__assert_fail@plt+0x54dc>
   164d0:	asr	r1, r0, #31
   164d4:	cmp	fp, #0
   164d8:	mov	r6, #0
   164dc:	mov	r7, #0
   164e0:	bne	16634 <__assert_fail@plt+0x56a0>
   164e4:	orrs	r3, r6, r7
   164e8:	bne	161d8 <__assert_fail@plt+0x5244>
   164ec:	umull	r2, r3, sl, r0
   164f0:	mul	ip, sl, r1
   164f4:	strd	r2, [sp]
   164f8:	mla	r3, r0, fp, ip
   164fc:	ldr	r2, [sp, #4]
   16500:	mov	sl, r6
   16504:	add	ip, r3, r2
   16508:	cmp	ip, #0
   1650c:	mov	fp, r7
   16510:	str	ip, [sp, #4]
   16514:	bne	1665c <__assert_fail@plt+0x56c8>
   16518:	orrs	r3, sl, fp
   1651c:	bne	161d8 <__assert_fail@plt+0x5244>
   16520:	ldrd	r6, [sp]
   16524:	mul	r3, r6, r1
   16528:	umull	sl, fp, r6, r0
   1652c:	mla	r0, r0, r7, r3
   16530:	add	fp, r0, fp
   16534:	b	16170 <__assert_fail@plt+0x51dc>
   16538:	mov	lr, #1
   1653c:	b	16170 <__assert_fail@plt+0x51dc>
   16540:	mov	lr, #1
   16544:	mov	r6, #1024	; 0x400
   16548:	mov	r7, #0
   1654c:	b	162b8 <__assert_fail@plt+0x5324>
   16550:	mov	lr, #1
   16554:	mov	r6, #1024	; 0x400
   16558:	mov	r7, #0
   1655c:	b	16364 <__assert_fail@plt+0x53d0>
   16560:	mov	lr, #1
   16564:	mov	r6, #1024	; 0x400
   16568:	mov	r7, #0
   1656c:	b	163e0 <__assert_fail@plt+0x544c>
   16570:	mov	lr, #1
   16574:	mov	r6, #1024	; 0x400
   16578:	mov	r7, #0
   1657c:	b	1645c <__assert_fail@plt+0x54c8>
   16580:	mov	lr, #1
   16584:	mov	r0, #1024	; 0x400
   16588:	mov	r1, #0
   1658c:	b	164d4 <__assert_fail@plt+0x5540>
   16590:	mov	lr, #1
   16594:	mov	r0, #1024	; 0x400
   16598:	mov	r1, #0
   1659c:	b	16330 <__assert_fail@plt+0x539c>
   165a0:	mov	lr, #1
   165a4:	mov	r0, #1024	; 0x400
   165a8:	mov	r1, #0
   165ac:	b	160e0 <__assert_fail@plt+0x514c>
   165b0:	mov	lr, #1
   165b4:	mov	r6, #1024	; 0x400
   165b8:	mov	r7, #0
   165bc:	b	1623c <__assert_fail@plt+0x52a8>
   165c0:	ldrd	r4, [sp, #16]
   165c4:	ldr	r3, [sp]
   165c8:	b	1616c <__assert_fail@plt+0x51d8>
   165cc:	mov	lr, #2
   165d0:	mov	r0, #1000	; 0x3e8
   165d4:	b	15ff4 <__assert_fail@plt+0x5060>
   165d8:	umull	r2, r3, sl, r0
   165dc:	str	r3, [sp]
   165e0:	mov	r3, #0
   165e4:	str	r3, [sp, #4]
   165e8:	ldrd	r2, [sp]
   165ec:	umlal	r2, r3, fp, r0
   165f0:	cmp	r3, #0
   165f4:	movne	r6, #1
   165f8:	movne	r7, #0
   165fc:	b	16340 <__assert_fail@plt+0x53ac>
   16600:	mov	r3, #1
   16604:	mvn	sl, #0
   16608:	mvn	fp, #0
   1660c:	b	1616c <__assert_fail@plt+0x51d8>
   16610:	umull	r2, r3, sl, r0
   16614:	mov	r7, #0
   16618:	mov	r6, r3
   1661c:	umlal	r6, r7, fp, r0
   16620:	cmp	r7, #0
   16624:	movne	r2, #1
   16628:	movne	r3, #0
   1662c:	strdne	r2, [sp]
   16630:	b	160f4 <__assert_fail@plt+0x5160>
   16634:	umull	r2, r3, sl, r0
   16638:	str	r3, [sp]
   1663c:	mov	r3, #0
   16640:	str	r3, [sp, #4]
   16644:	ldrd	r2, [sp]
   16648:	umlal	r2, r3, fp, r0
   1664c:	cmp	r3, #0
   16650:	movne	r6, #1
   16654:	movne	r7, #0
   16658:	b	164e4 <__assert_fail@plt+0x5550>
   1665c:	ldr	r3, [sp]
   16660:	mov	r7, #0
   16664:	umull	r2, r3, r3, r0
   16668:	mov	r6, r3
   1666c:	umlal	r6, r7, ip, r0
   16670:	cmp	r7, #0
   16674:	movne	sl, #1
   16678:	movne	fp, #0
   1667c:	b	16518 <__assert_fail@plt+0x5584>
   16680:	ldr	r3, [sp]
   16684:	mov	r7, #0
   16688:	umull	r2, r3, r3, r0
   1668c:	mov	r6, r3
   16690:	umlal	r6, r7, ip, r0
   16694:	cmp	r7, #0
   16698:	movne	sl, #1
   1669c:	movne	fp, #0
   166a0:	b	1614c <__assert_fail@plt+0x51b8>
   166a4:	umull	r2, r3, r6, r0
   166a8:	str	r3, [sp]
   166ac:	mov	r3, #0
   166b0:	str	r3, [sp, #4]
   166b4:	ldrd	r2, [sp]
   166b8:	umlal	r2, r3, ip, r0
   166bc:	cmp	r3, #0
   166c0:	movne	sl, #1
   166c4:	movne	fp, #0
   166c8:	b	16120 <__assert_fail@plt+0x518c>
   166cc:	bl	10dc0 <__stack_chk_fail@plt>
   166d0:	ldr	r3, [pc, #16]	; 166e8 <__assert_fail@plt+0x5754>
   166d4:	mov	r2, #96	; 0x60
   166d8:	ldr	r1, [pc, #12]	; 166ec <__assert_fail@plt+0x5758>
   166dc:	ldr	r0, [pc, #12]	; 166f0 <__assert_fail@plt+0x575c>
   166e0:	bl	10f94 <__assert_fail@plt>
   166e4:	andeq	r7, r2, r8, lsl #30
   166e8:	andeq	r7, r1, r4, ror #24
   166ec:	andeq	r7, r1, r0, ror ip
   166f0:	andeq	r7, r1, r0, lsl #25
   166f4:	push	{r4, r5, r6, r7, r8, lr}
   166f8:	subs	r7, r0, #0
   166fc:	ldr	r5, [pc, #108]	; 16770 <__assert_fail@plt+0x57dc>
   16700:	sub	sp, sp, #8
   16704:	mov	r8, r1
   16708:	ldr	r1, [r5]
   1670c:	moveq	r7, sp
   16710:	str	r1, [sp, #4]
   16714:	mov	r0, r7
   16718:	mov	r1, r8
   1671c:	mov	r6, r2
   16720:	bl	10e2c <mbrtowc@plt>
   16724:	cmp	r6, #0
   16728:	cmnne	r0, #3
   1672c:	mov	r4, r0
   16730:	bhi	16750 <__assert_fail@plt+0x57bc>
   16734:	ldr	r2, [sp, #4]
   16738:	ldr	r3, [r5]
   1673c:	mov	r0, r4
   16740:	cmp	r2, r3
   16744:	bne	1676c <__assert_fail@plt+0x57d8>
   16748:	add	sp, sp, #8
   1674c:	pop	{r4, r5, r6, r7, r8, pc}
   16750:	mov	r0, #0
   16754:	bl	167e8 <__assert_fail@plt+0x5854>
   16758:	cmp	r0, #0
   1675c:	moveq	r4, #1
   16760:	ldrbeq	r3, [r8]
   16764:	streq	r3, [r7]
   16768:	b	16734 <__assert_fail@plt+0x57a0>
   1676c:	bl	10dc0 <__stack_chk_fail@plt>
   16770:	andeq	r7, r2, r8, lsl #30
   16774:	push	{r4, r5, r6, lr}
   16778:	mov	r4, r0
   1677c:	bl	10e20 <__fpending@plt>
   16780:	ldr	r5, [r4]
   16784:	and	r5, r5, #32
   16788:	mov	r6, r0
   1678c:	mov	r0, r4
   16790:	bl	16868 <__assert_fail@plt+0x58d4>
   16794:	cmp	r5, #0
   16798:	mov	r4, r0
   1679c:	bne	167c8 <__assert_fail@plt+0x5834>
   167a0:	cmp	r0, #0
   167a4:	beq	167c0 <__assert_fail@plt+0x582c>
   167a8:	cmp	r6, #0
   167ac:	bne	167e0 <__assert_fail@plt+0x584c>
   167b0:	bl	10ec8 <__errno_location@plt>
   167b4:	ldr	r4, [r0]
   167b8:	subs	r4, r4, #9
   167bc:	mvnne	r4, #0
   167c0:	mov	r0, r4
   167c4:	pop	{r4, r5, r6, pc}
   167c8:	cmp	r0, #0
   167cc:	bne	167e0 <__assert_fail@plt+0x584c>
   167d0:	bl	10ec8 <__errno_location@plt>
   167d4:	str	r4, [r0]
   167d8:	mvn	r4, #0
   167dc:	b	167c0 <__assert_fail@plt+0x582c>
   167e0:	mvn	r4, #0
   167e4:	b	167c0 <__assert_fail@plt+0x582c>
   167e8:	push	{r4, lr}
   167ec:	mov	r1, #0
   167f0:	bl	10f34 <setlocale@plt>
   167f4:	subs	r4, r0, #0
   167f8:	beq	16824 <__assert_fail@plt+0x5890>
   167fc:	ldr	r1, [pc, #40]	; 1682c <__assert_fail@plt+0x5898>
   16800:	bl	10d3c <strcmp@plt>
   16804:	cmp	r0, #0
   16808:	popeq	{r4, pc}
   1680c:	mov	r0, r4
   16810:	ldr	r1, [pc, #24]	; 16830 <__assert_fail@plt+0x589c>
   16814:	bl	10d3c <strcmp@plt>
   16818:	adds	r0, r0, #0
   1681c:	movne	r0, #1
   16820:	pop	{r4, pc}
   16824:	mov	r0, #1
   16828:	pop	{r4, pc}
   1682c:	andeq	r7, r1, r8, lsr #25
   16830:	andeq	r7, r1, ip, lsr #25
   16834:	push	{r4, lr}
   16838:	mov	r0, #14
   1683c:	bl	10f4c <nl_langinfo@plt>
   16840:	cmp	r0, #0
   16844:	beq	1685c <__assert_fail@plt+0x58c8>
   16848:	ldrb	r2, [r0]
   1684c:	ldr	r3, [pc, #16]	; 16864 <__assert_fail@plt+0x58d0>
   16850:	cmp	r2, #0
   16854:	moveq	r0, r3
   16858:	pop	{r4, pc}
   1685c:	ldr	r0, [pc]	; 16864 <__assert_fail@plt+0x58d0>
   16860:	pop	{r4, pc}
   16864:			; <UNDEFINED> instruction: 0x00017cb4
   16868:	push	{r4, r5, lr}
   1686c:	sub	sp, sp, #12
   16870:	mov	r4, r0
   16874:	bl	10ef8 <fileno@plt>
   16878:	cmp	r0, #0
   1687c:	mov	r0, r4
   16880:	blt	168fc <__assert_fail@plt+0x5968>
   16884:	bl	10e68 <__freading@plt>
   16888:	cmp	r0, #0
   1688c:	bne	168c8 <__assert_fail@plt+0x5934>
   16890:	mov	r0, r4
   16894:	bl	16908 <__assert_fail@plt+0x5974>
   16898:	cmp	r0, #0
   1689c:	beq	168f8 <__assert_fail@plt+0x5964>
   168a0:	bl	10ec8 <__errno_location@plt>
   168a4:	mov	r5, r0
   168a8:	mov	r0, r4
   168ac:	ldr	r4, [r5]
   168b0:	bl	10f1c <fclose@plt>
   168b4:	cmp	r4, #0
   168b8:	mvnne	r0, #0
   168bc:	strne	r4, [r5]
   168c0:	add	sp, sp, #12
   168c4:	pop	{r4, r5, pc}
   168c8:	mov	r0, r4
   168cc:	bl	10ef8 <fileno@plt>
   168d0:	mov	r3, #1
   168d4:	str	r3, [sp]
   168d8:	mov	r2, #0
   168dc:	mov	r3, #0
   168e0:	bl	10e08 <lseek64@plt>
   168e4:	mvn	r3, #0
   168e8:	mvn	r2, #0
   168ec:	cmp	r1, r3
   168f0:	cmpeq	r0, r2
   168f4:	bne	16890 <__assert_fail@plt+0x58fc>
   168f8:	mov	r0, r4
   168fc:	add	sp, sp, #12
   16900:	pop	{r4, r5, lr}
   16904:	b	10f1c <fclose@plt>
   16908:	push	{r4, lr}
   1690c:	subs	r4, r0, #0
   16910:	sub	sp, sp, #8
   16914:	beq	16930 <__assert_fail@plt+0x599c>
   16918:	bl	10e68 <__freading@plt>
   1691c:	cmp	r0, #0
   16920:	beq	16930 <__assert_fail@plt+0x599c>
   16924:	ldr	r3, [r4]
   16928:	tst	r3, #256	; 0x100
   1692c:	bne	16940 <__assert_fail@plt+0x59ac>
   16930:	mov	r0, r4
   16934:	add	sp, sp, #8
   16938:	pop	{r4, lr}
   1693c:	b	10d54 <fflush@plt>
   16940:	mov	r3, #1
   16944:	str	r3, [sp]
   16948:	mov	r2, #0
   1694c:	mov	r3, #0
   16950:	mov	r0, r4
   16954:	bl	16968 <__assert_fail@plt+0x59d4>
   16958:	mov	r0, r4
   1695c:	add	sp, sp, #8
   16960:	pop	{r4, lr}
   16964:	b	10d54 <fflush@plt>
   16968:	push	{r4, r5, r6, r7, r8, lr}
   1696c:	sub	sp, sp, #8
   16970:	ldmib	r0, {ip, lr}
   16974:	mov	r4, r0
   16978:	ldr	r5, [sp, #32]
   1697c:	cmp	lr, ip
   16980:	beq	16998 <__assert_fail@plt+0x5a04>
   16984:	str	r5, [sp, #32]
   16988:	mov	r0, r4
   1698c:	add	sp, sp, #8
   16990:	pop	{r4, r5, r6, r7, r8, lr}
   16994:	b	10f28 <fseeko64@plt>
   16998:	ldr	lr, [r0, #20]
   1699c:	ldr	ip, [r0, #16]
   169a0:	cmp	lr, ip
   169a4:	bne	16984 <__assert_fail@plt+0x59f0>
   169a8:	ldr	r8, [r0, #36]	; 0x24
   169ac:	cmp	r8, #0
   169b0:	bne	16984 <__assert_fail@plt+0x59f0>
   169b4:	mov	r6, r2
   169b8:	mov	r7, r3
   169bc:	bl	10ef8 <fileno@plt>
   169c0:	mov	r2, r6
   169c4:	mov	r3, r7
   169c8:	str	r5, [sp]
   169cc:	bl	10e08 <lseek64@plt>
   169d0:	mvn	r3, #0
   169d4:	mvn	r2, #0
   169d8:	cmp	r1, r3
   169dc:	cmpeq	r0, r2
   169e0:	beq	16a00 <__assert_fail@plt+0x5a6c>
   169e4:	ldr	r3, [r4]
   169e8:	strd	r0, [r4, #80]	; 0x50
   169ec:	mov	r0, r8
   169f0:	bic	r3, r3, #16
   169f4:	str	r3, [r4]
   169f8:	add	sp, sp, #8
   169fc:	pop	{r4, r5, r6, r7, r8, pc}
   16a00:	mvn	r0, #0
   16a04:	b	169f8 <__assert_fail@plt+0x5a64>
   16a08:	subs	r2, r1, #1
   16a0c:	bxeq	lr
   16a10:	bcc	16be8 <__assert_fail@plt+0x5c54>
   16a14:	cmp	r0, r1
   16a18:	bls	16bcc <__assert_fail@plt+0x5c38>
   16a1c:	tst	r1, r2
   16a20:	beq	16bd8 <__assert_fail@plt+0x5c44>
   16a24:	clz	r3, r0
   16a28:	clz	r2, r1
   16a2c:	sub	r3, r2, r3
   16a30:	rsbs	r3, r3, #31
   16a34:	addne	r3, r3, r3, lsl #1
   16a38:	mov	r2, #0
   16a3c:	addne	pc, pc, r3, lsl #2
   16a40:	nop			; (mov r0, r0)
   16a44:	cmp	r0, r1, lsl #31
   16a48:	adc	r2, r2, r2
   16a4c:	subcs	r0, r0, r1, lsl #31
   16a50:	cmp	r0, r1, lsl #30
   16a54:	adc	r2, r2, r2
   16a58:	subcs	r0, r0, r1, lsl #30
   16a5c:	cmp	r0, r1, lsl #29
   16a60:	adc	r2, r2, r2
   16a64:	subcs	r0, r0, r1, lsl #29
   16a68:	cmp	r0, r1, lsl #28
   16a6c:	adc	r2, r2, r2
   16a70:	subcs	r0, r0, r1, lsl #28
   16a74:	cmp	r0, r1, lsl #27
   16a78:	adc	r2, r2, r2
   16a7c:	subcs	r0, r0, r1, lsl #27
   16a80:	cmp	r0, r1, lsl #26
   16a84:	adc	r2, r2, r2
   16a88:	subcs	r0, r0, r1, lsl #26
   16a8c:	cmp	r0, r1, lsl #25
   16a90:	adc	r2, r2, r2
   16a94:	subcs	r0, r0, r1, lsl #25
   16a98:	cmp	r0, r1, lsl #24
   16a9c:	adc	r2, r2, r2
   16aa0:	subcs	r0, r0, r1, lsl #24
   16aa4:	cmp	r0, r1, lsl #23
   16aa8:	adc	r2, r2, r2
   16aac:	subcs	r0, r0, r1, lsl #23
   16ab0:	cmp	r0, r1, lsl #22
   16ab4:	adc	r2, r2, r2
   16ab8:	subcs	r0, r0, r1, lsl #22
   16abc:	cmp	r0, r1, lsl #21
   16ac0:	adc	r2, r2, r2
   16ac4:	subcs	r0, r0, r1, lsl #21
   16ac8:	cmp	r0, r1, lsl #20
   16acc:	adc	r2, r2, r2
   16ad0:	subcs	r0, r0, r1, lsl #20
   16ad4:	cmp	r0, r1, lsl #19
   16ad8:	adc	r2, r2, r2
   16adc:	subcs	r0, r0, r1, lsl #19
   16ae0:	cmp	r0, r1, lsl #18
   16ae4:	adc	r2, r2, r2
   16ae8:	subcs	r0, r0, r1, lsl #18
   16aec:	cmp	r0, r1, lsl #17
   16af0:	adc	r2, r2, r2
   16af4:	subcs	r0, r0, r1, lsl #17
   16af8:	cmp	r0, r1, lsl #16
   16afc:	adc	r2, r2, r2
   16b00:	subcs	r0, r0, r1, lsl #16
   16b04:	cmp	r0, r1, lsl #15
   16b08:	adc	r2, r2, r2
   16b0c:	subcs	r0, r0, r1, lsl #15
   16b10:	cmp	r0, r1, lsl #14
   16b14:	adc	r2, r2, r2
   16b18:	subcs	r0, r0, r1, lsl #14
   16b1c:	cmp	r0, r1, lsl #13
   16b20:	adc	r2, r2, r2
   16b24:	subcs	r0, r0, r1, lsl #13
   16b28:	cmp	r0, r1, lsl #12
   16b2c:	adc	r2, r2, r2
   16b30:	subcs	r0, r0, r1, lsl #12
   16b34:	cmp	r0, r1, lsl #11
   16b38:	adc	r2, r2, r2
   16b3c:	subcs	r0, r0, r1, lsl #11
   16b40:	cmp	r0, r1, lsl #10
   16b44:	adc	r2, r2, r2
   16b48:	subcs	r0, r0, r1, lsl #10
   16b4c:	cmp	r0, r1, lsl #9
   16b50:	adc	r2, r2, r2
   16b54:	subcs	r0, r0, r1, lsl #9
   16b58:	cmp	r0, r1, lsl #8
   16b5c:	adc	r2, r2, r2
   16b60:	subcs	r0, r0, r1, lsl #8
   16b64:	cmp	r0, r1, lsl #7
   16b68:	adc	r2, r2, r2
   16b6c:	subcs	r0, r0, r1, lsl #7
   16b70:	cmp	r0, r1, lsl #6
   16b74:	adc	r2, r2, r2
   16b78:	subcs	r0, r0, r1, lsl #6
   16b7c:	cmp	r0, r1, lsl #5
   16b80:	adc	r2, r2, r2
   16b84:	subcs	r0, r0, r1, lsl #5
   16b88:	cmp	r0, r1, lsl #4
   16b8c:	adc	r2, r2, r2
   16b90:	subcs	r0, r0, r1, lsl #4
   16b94:	cmp	r0, r1, lsl #3
   16b98:	adc	r2, r2, r2
   16b9c:	subcs	r0, r0, r1, lsl #3
   16ba0:	cmp	r0, r1, lsl #2
   16ba4:	adc	r2, r2, r2
   16ba8:	subcs	r0, r0, r1, lsl #2
   16bac:	cmp	r0, r1, lsl #1
   16bb0:	adc	r2, r2, r2
   16bb4:	subcs	r0, r0, r1, lsl #1
   16bb8:	cmp	r0, r1
   16bbc:	adc	r2, r2, r2
   16bc0:	subcs	r0, r0, r1
   16bc4:	mov	r0, r2
   16bc8:	bx	lr
   16bcc:	moveq	r0, #1
   16bd0:	movne	r0, #0
   16bd4:	bx	lr
   16bd8:	clz	r2, r1
   16bdc:	rsb	r2, r2, #31
   16be0:	lsr	r0, r0, r2
   16be4:	bx	lr
   16be8:	cmp	r0, #0
   16bec:	mvnne	r0, #0
   16bf0:	b	16d24 <__assert_fail@plt+0x5d90>
   16bf4:	cmp	r1, #0
   16bf8:	beq	16be8 <__assert_fail@plt+0x5c54>
   16bfc:	push	{r0, r1, lr}
   16c00:	bl	16a08 <__assert_fail@plt+0x5a74>
   16c04:	pop	{r1, r2, lr}
   16c08:	mul	r3, r2, r0
   16c0c:	sub	r1, r1, r3
   16c10:	bx	lr
   16c14:	cmp	r3, #0
   16c18:	cmpeq	r2, #0
   16c1c:	bne	16c40 <__assert_fail@plt+0x5cac>
   16c20:	cmp	r1, #0
   16c24:	movlt	r1, #-2147483648	; 0x80000000
   16c28:	movlt	r0, #0
   16c2c:	blt	16c3c <__assert_fail@plt+0x5ca8>
   16c30:	cmpeq	r0, #0
   16c34:	mvnne	r1, #-2147483648	; 0x80000000
   16c38:	mvnne	r0, #0
   16c3c:	b	16d24 <__assert_fail@plt+0x5d90>
   16c40:	sub	sp, sp, #8
   16c44:	push	{sp, lr}
   16c48:	cmp	r1, #0
   16c4c:	blt	16c6c <__assert_fail@plt+0x5cd8>
   16c50:	cmp	r3, #0
   16c54:	blt	16ca0 <__assert_fail@plt+0x5d0c>
   16c58:	bl	16d34 <__assert_fail@plt+0x5da0>
   16c5c:	ldr	lr, [sp, #4]
   16c60:	add	sp, sp, #8
   16c64:	pop	{r2, r3}
   16c68:	bx	lr
   16c6c:	rsbs	r0, r0, #0
   16c70:	sbc	r1, r1, r1, lsl #1
   16c74:	cmp	r3, #0
   16c78:	blt	16cc4 <__assert_fail@plt+0x5d30>
   16c7c:	bl	16d34 <__assert_fail@plt+0x5da0>
   16c80:	ldr	lr, [sp, #4]
   16c84:	add	sp, sp, #8
   16c88:	pop	{r2, r3}
   16c8c:	rsbs	r0, r0, #0
   16c90:	sbc	r1, r1, r1, lsl #1
   16c94:	rsbs	r2, r2, #0
   16c98:	sbc	r3, r3, r3, lsl #1
   16c9c:	bx	lr
   16ca0:	rsbs	r2, r2, #0
   16ca4:	sbc	r3, r3, r3, lsl #1
   16ca8:	bl	16d34 <__assert_fail@plt+0x5da0>
   16cac:	ldr	lr, [sp, #4]
   16cb0:	add	sp, sp, #8
   16cb4:	pop	{r2, r3}
   16cb8:	rsbs	r0, r0, #0
   16cbc:	sbc	r1, r1, r1, lsl #1
   16cc0:	bx	lr
   16cc4:	rsbs	r2, r2, #0
   16cc8:	sbc	r3, r3, r3, lsl #1
   16ccc:	bl	16d34 <__assert_fail@plt+0x5da0>
   16cd0:	ldr	lr, [sp, #4]
   16cd4:	add	sp, sp, #8
   16cd8:	pop	{r2, r3}
   16cdc:	rsbs	r2, r2, #0
   16ce0:	sbc	r3, r3, r3, lsl #1
   16ce4:	bx	lr
   16ce8:	cmp	r3, #0
   16cec:	cmpeq	r2, #0
   16cf0:	bne	16d08 <__assert_fail@plt+0x5d74>
   16cf4:	cmp	r1, #0
   16cf8:	cmpeq	r0, #0
   16cfc:	mvnne	r1, #0
   16d00:	mvnne	r0, #0
   16d04:	b	16d24 <__assert_fail@plt+0x5d90>
   16d08:	sub	sp, sp, #8
   16d0c:	push	{sp, lr}
   16d10:	bl	16d34 <__assert_fail@plt+0x5da0>
   16d14:	ldr	lr, [sp, #4]
   16d18:	add	sp, sp, #8
   16d1c:	pop	{r2, r3}
   16d20:	bx	lr
   16d24:	push	{r1, lr}
   16d28:	mov	r0, #8
   16d2c:	bl	10d30 <raise@plt>
   16d30:	pop	{r1, pc}
   16d34:	cmp	r1, r3
   16d38:	cmpeq	r0, r2
   16d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d40:	mov	r4, r0
   16d44:	movcc	r0, #0
   16d48:	mov	r5, r1
   16d4c:	ldr	lr, [sp, #36]	; 0x24
   16d50:	movcc	r1, r0
   16d54:	bcc	16e50 <__assert_fail@plt+0x5ebc>
   16d58:	cmp	r3, #0
   16d5c:	clzeq	ip, r2
   16d60:	clzne	ip, r3
   16d64:	addeq	ip, ip, #32
   16d68:	cmp	r5, #0
   16d6c:	clzeq	r1, r4
   16d70:	addeq	r1, r1, #32
   16d74:	clzne	r1, r5
   16d78:	sub	ip, ip, r1
   16d7c:	sub	sl, ip, #32
   16d80:	lsl	r9, r3, ip
   16d84:	rsb	fp, ip, #32
   16d88:	orr	r9, r9, r2, lsl sl
   16d8c:	orr	r9, r9, r2, lsr fp
   16d90:	lsl	r8, r2, ip
   16d94:	cmp	r5, r9
   16d98:	cmpeq	r4, r8
   16d9c:	movcc	r0, #0
   16da0:	movcc	r1, r0
   16da4:	bcc	16dc0 <__assert_fail@plt+0x5e2c>
   16da8:	mov	r0, #1
   16dac:	subs	r4, r4, r8
   16db0:	lsl	r1, r0, sl
   16db4:	orr	r1, r1, r0, lsr fp
   16db8:	lsl	r0, r0, ip
   16dbc:	sbc	r5, r5, r9
   16dc0:	cmp	ip, #0
   16dc4:	beq	16e50 <__assert_fail@plt+0x5ebc>
   16dc8:	lsr	r6, r8, #1
   16dcc:	orr	r6, r6, r9, lsl #31
   16dd0:	lsr	r7, r9, #1
   16dd4:	mov	r2, ip
   16dd8:	b	16dfc <__assert_fail@plt+0x5e68>
   16ddc:	subs	r3, r4, r6
   16de0:	sbc	r8, r5, r7
   16de4:	adds	r3, r3, r3
   16de8:	adc	r8, r8, r8
   16dec:	adds	r4, r3, #1
   16df0:	adc	r5, r8, #0
   16df4:	subs	r2, r2, #1
   16df8:	beq	16e18 <__assert_fail@plt+0x5e84>
   16dfc:	cmp	r5, r7
   16e00:	cmpeq	r4, r6
   16e04:	bcs	16ddc <__assert_fail@plt+0x5e48>
   16e08:	adds	r4, r4, r4
   16e0c:	adc	r5, r5, r5
   16e10:	subs	r2, r2, #1
   16e14:	bne	16dfc <__assert_fail@plt+0x5e68>
   16e18:	lsr	r3, r4, ip
   16e1c:	orr	r3, r3, r5, lsl fp
   16e20:	lsr	r2, r5, ip
   16e24:	orr	r3, r3, r5, lsr sl
   16e28:	adds	r0, r0, r4
   16e2c:	mov	r4, r3
   16e30:	lsl	r3, r2, ip
   16e34:	orr	r3, r3, r4, lsl sl
   16e38:	lsl	ip, r4, ip
   16e3c:	orr	r3, r3, r4, lsr fp
   16e40:	adc	r1, r1, r5
   16e44:	subs	r0, r0, ip
   16e48:	mov	r5, r2
   16e4c:	sbc	r1, r1, r3
   16e50:	cmp	lr, #0
   16e54:	strdne	r4, [lr]
   16e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e60:	mov	r7, r0
   16e64:	ldr	r6, [pc, #72]	; 16eb4 <__assert_fail@plt+0x5f20>
   16e68:	ldr	r5, [pc, #72]	; 16eb8 <__assert_fail@plt+0x5f24>
   16e6c:	add	r6, pc, r6
   16e70:	add	r5, pc, r5
   16e74:	sub	r6, r6, r5
   16e78:	mov	r8, r1
   16e7c:	mov	r9, r2
   16e80:	bl	10cf8 <calloc@plt-0x20>
   16e84:	asrs	r6, r6, #2
   16e88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e8c:	mov	r4, #0
   16e90:	add	r4, r4, #1
   16e94:	ldr	r3, [r5], #4
   16e98:	mov	r2, r9
   16e9c:	mov	r1, r8
   16ea0:	mov	r0, r7
   16ea4:	blx	r3
   16ea8:	cmp	r6, r4
   16eac:	bne	16e90 <__assert_fail@plt+0x5efc>
   16eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16eb4:	muleq	r1, r0, r0
   16eb8:	andeq	r1, r1, r8, lsl #1
   16ebc:	bx	lr
   16ec0:	ldr	r3, [pc, #12]	; 16ed4 <__assert_fail@plt+0x5f40>
   16ec4:	mov	r1, #0
   16ec8:	add	r3, pc, r3
   16ecc:	ldr	r2, [r3]
   16ed0:	b	10ed4 <__cxa_atexit@plt>
   16ed4:	andeq	r1, r1, ip, lsl r2

Disassembly of section .fini:

00016ed8 <.fini>:
   16ed8:	push	{r3, lr}
   16edc:	pop	{r3, pc}
