
raspbian-preinstalled/gpgparsemail:     file format elf32-littlearm


Disassembly of section .init:

00010aac <.init>:
   10aac:	push	{r3, lr}
   10ab0:	bl	10f24 <__assert_fail@plt+0x230>
   10ab4:	pop	{r3, pc}

Disassembly of section .plt:

00010ab8 <fdopen@plt-0x14>:
   10ab8:	push	{lr}		; (str lr, [sp, #-4]!)
   10abc:	ldr	lr, [pc, #4]	; 10ac8 <fdopen@plt-0x4>
   10ac0:	add	lr, pc, lr
   10ac4:	ldr	pc, [lr, #8]!
   10ac8:	andeq	r4, r1, ip, ror #8

00010acc <fdopen@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #20, 20	; 0x14000
   10ad4:	ldr	pc, [ip, #1132]!	; 0x46c

00010ad8 <calloc@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #20, 20	; 0x14000
   10ae0:	ldr	pc, [ip, #1124]!	; 0x464

00010ae4 <strcmp@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #20, 20	; 0x14000
   10aec:	ldr	pc, [ip, #1116]!	; 0x45c

00010af0 <fflush@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #20, 20	; 0x14000
   10af8:	ldr	pc, [ip, #1108]!	; 0x454

00010afc <free@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #20, 20	; 0x14000
   10b04:	ldr	pc, [ip, #1100]!	; 0x44c

00010b08 <fgets@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #20, 20	; 0x14000
   10b10:	ldr	pc, [ip, #1092]!	; 0x444

00010b14 <ferror@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #20, 20	; 0x14000
   10b1c:	ldr	pc, [ip, #1084]!	; 0x43c

00010b20 <memcpy@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #20, 20	; 0x14000
   10b28:	ldr	pc, [ip, #1076]!	; 0x434

00010b2c <execlp@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #20, 20	; 0x14000
   10b34:	ldr	pc, [ip, #1068]!	; 0x42c

00010b38 <signal@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #20, 20	; 0x14000
   10b40:	ldr	pc, [ip, #1060]!	; 0x424

00010b44 <memcmp@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #20, 20	; 0x14000
   10b4c:	ldr	pc, [ip, #1052]!	; 0x41c

00010b50 <stpcpy@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #20, 20	; 0x14000
   10b58:	ldr	pc, [ip, #1044]!	; 0x414

00010b5c <__stack_chk_fail@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #20, 20	; 0x14000
   10b64:	ldr	pc, [ip, #1036]!	; 0x40c

00010b68 <rewind@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #20, 20	; 0x14000
   10b70:	ldr	pc, [ip, #1028]!	; 0x404

00010b74 <dup2@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #20, 20	; 0x14000
   10b7c:	ldr	pc, [ip, #1020]!	; 0x3fc

00010b80 <tmpfile64@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #20, 20	; 0x14000
   10b88:	ldr	pc, [ip, #1012]!	; 0x3f4

00010b8c <fwrite@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #20, 20	; 0x14000
   10b94:	ldr	pc, [ip, #1004]!	; 0x3ec

00010b98 <waitpid@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #20, 20	; 0x14000
   10ba0:	ldr	pc, [ip, #996]!	; 0x3e4

00010ba4 <strcpy@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #20, 20	; 0x14000
   10bac:	ldr	pc, [ip, #988]!	; 0x3dc

00010bb0 <open64@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #20, 20	; 0x14000
   10bb8:	ldr	pc, [ip, #980]!	; 0x3d4

00010bbc <puts@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #20, 20	; 0x14000
   10bc4:	ldr	pc, [ip, #972]!	; 0x3cc

00010bc8 <malloc@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #20, 20	; 0x14000
   10bd0:	ldr	pc, [ip, #964]!	; 0x3c4

00010bd4 <__libc_start_main@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #20, 20	; 0x14000
   10bdc:	ldr	pc, [ip, #956]!	; 0x3bc

00010be0 <strerror@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #20, 20	; 0x14000
   10be8:	ldr	pc, [ip, #948]!	; 0x3b4

00010bec <__vfprintf_chk@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #20, 20	; 0x14000
   10bf4:	ldr	pc, [ip, #940]!	; 0x3ac

00010bf8 <__gmon_start__@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #20, 20	; 0x14000
   10c00:	ldr	pc, [ip, #932]!	; 0x3a4

00010c04 <exit@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #20, 20	; 0x14000
   10c0c:	ldr	pc, [ip, #924]!	; 0x39c

00010c10 <strlen@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #20, 20	; 0x14000
   10c18:	ldr	pc, [ip, #916]!	; 0x394

00010c1c <strchr@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #20, 20	; 0x14000
   10c24:	ldr	pc, [ip, #908]!	; 0x38c

00010c28 <__errno_location@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #20, 20	; 0x14000
   10c30:	ldr	pc, [ip, #900]!	; 0x384

00010c34 <__sprintf_chk@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #20, 20	; 0x14000
   10c3c:	ldr	pc, [ip, #892]!	; 0x37c

00010c40 <memset@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #20, 20	; 0x14000
   10c48:	ldr	pc, [ip, #884]!	; 0x374

00010c4c <__printf_chk@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #20, 20	; 0x14000
   10c54:	ldr	pc, [ip, #876]!	; 0x36c

00010c58 <fileno@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #20, 20	; 0x14000
   10c60:	ldr	pc, [ip, #868]!	; 0x364

00010c64 <__fprintf_chk@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #20, 20	; 0x14000
   10c6c:	ldr	pc, [ip, #860]!	; 0x35c

00010c70 <fclose@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #20, 20	; 0x14000
   10c78:	ldr	pc, [ip, #852]!	; 0x354

00010c7c <pipe@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #20, 20	; 0x14000
   10c84:	ldr	pc, [ip, #844]!	; 0x34c

00010c88 <fork@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #836]!	; 0x344

00010c94 <putc@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #828]!	; 0x33c

00010ca0 <fopen64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #820]!	; 0x334

00010cac <fputs@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #812]!	; 0x32c

00010cb8 <strncmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #804]!	; 0x324

00010cc4 <abort@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #796]!	; 0x31c

00010cd0 <getc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #788]!	; 0x314

00010cdc <close@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #780]!	; 0x30c

00010ce8 <strspn@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #772]!	; 0x304

00010cf4 <__assert_fail@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #764]!	; 0x2fc

Disassembly of section .text:

00010d00 <.text>:
   10d00:	cmp	r0, #0
   10d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d08:	sub	sp, sp, #12
   10d0c:	bne	10d34 <__assert_fail@plt+0x40>
   10d10:	mov	r1, #1
   10d14:	mov	r0, #13
   10d18:	bl	10b38 <signal@plt>
   10d1c:	ldr	r3, [pc, #400]	; 10eb4 <__assert_fail@plt+0x1c0>
   10d20:	ldr	r0, [r3]
   10d24:	bl	11e58 <__assert_fail@plt+0x1164>
   10d28:	mov	r0, #0
   10d2c:	add	sp, sp, #12
   10d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d34:	sub	r4, r0, #1
   10d38:	add	r6, r1, #4
   10d3c:	mvn	r3, #0
   10d40:	ldr	r9, [pc, #368]	; 10eb8 <__assert_fail@plt+0x1c4>
   10d44:	ldr	sl, [pc, #368]	; 10ebc <__assert_fail@plt+0x1c8>
   10d48:	ldr	fp, [pc, #368]	; 10ec0 <__assert_fail@plt+0x1cc>
   10d4c:	ldr	r8, [pc, #368]	; 10ec4 <__assert_fail@plt+0x1d0>
   10d50:	mov	r7, #1
   10d54:	b	10d70 <__assert_fail@plt+0x7c>
   10d58:	str	r7, [r8, #4]
   10d5c:	add	r6, r6, #4
   10d60:	sub	r2, r4, #1
   10d64:	str	r7, [r8]
   10d68:	mov	r3, r4
   10d6c:	mov	r4, r2
   10d70:	cmp	r4, #0
   10d74:	cmpne	r4, r3
   10d78:	beq	10e1c <__assert_fail@plt+0x128>
   10d7c:	ldr	r5, [r6]
   10d80:	mov	r1, r9
   10d84:	mov	r0, r5
   10d88:	bl	10ae4 <strcmp@plt>
   10d8c:	cmp	r0, #0
   10d90:	beq	10e14 <__assert_fail@plt+0x120>
   10d94:	mov	r1, sl
   10d98:	mov	r0, r5
   10d9c:	bl	10ae4 <strcmp@plt>
   10da0:	cmp	r0, #0
   10da4:	beq	10e74 <__assert_fail@plt+0x180>
   10da8:	mov	r1, fp
   10dac:	mov	r0, r5
   10db0:	bl	10ae4 <strcmp@plt>
   10db4:	cmp	r0, #0
   10db8:	beq	10d5c <__assert_fail@plt+0x68>
   10dbc:	ldr	r1, [pc, #260]	; 10ec8 <__assert_fail@plt+0x1d4>
   10dc0:	mov	r0, r5
   10dc4:	bl	10ae4 <strcmp@plt>
   10dc8:	cmp	r0, #0
   10dcc:	beq	10d58 <__assert_fail@plt+0x64>
   10dd0:	ldr	r1, [pc, #244]	; 10ecc <__assert_fail@plt+0x1d8>
   10dd4:	mov	r0, r5
   10dd8:	bl	10ae4 <strcmp@plt>
   10ddc:	cmp	r0, #0
   10de0:	streq	r7, [r8, #8]
   10de4:	addeq	r6, r6, #4
   10de8:	subeq	r2, r4, #1
   10dec:	beq	10d68 <__assert_fail@plt+0x74>
   10df0:	mov	r0, r5
   10df4:	ldr	r1, [pc, #212]	; 10ed0 <__assert_fail@plt+0x1dc>
   10df8:	bl	10ae4 <strcmp@plt>
   10dfc:	cmp	r0, #0
   10e00:	streq	r7, [r8, #12]
   10e04:	addeq	r6, r6, #4
   10e08:	subeq	r2, r4, #1
   10e0c:	movne	r2, r4
   10e10:	b	10d68 <__assert_fail@plt+0x74>
   10e14:	sub	r4, r4, #1
   10e18:	add	r6, r6, #4
   10e1c:	cmp	r4, #1
   10e20:	bgt	10eac <__assert_fail@plt+0x1b8>
   10e24:	mov	r1, #1
   10e28:	mov	r0, #13
   10e2c:	bl	10b38 <signal@plt>
   10e30:	cmp	r4, #0
   10e34:	beq	10d1c <__assert_fail@plt+0x28>
   10e38:	ldr	r4, [r6]
   10e3c:	ldr	r1, [pc, #144]	; 10ed4 <__assert_fail@plt+0x1e0>
   10e40:	mov	r0, r4
   10e44:	bl	10ae4 <strcmp@plt>
   10e48:	cmp	r0, #0
   10e4c:	beq	10d1c <__assert_fail@plt+0x28>
   10e50:	mov	r0, r4
   10e54:	ldr	r1, [pc, #124]	; 10ed8 <__assert_fail@plt+0x1e4>
   10e58:	bl	10ca0 <fopen64@plt>
   10e5c:	subs	r4, r0, #0
   10e60:	beq	10e8c <__assert_fail@plt+0x198>
   10e64:	bl	11e58 <__assert_fail@plt+0x1164>
   10e68:	mov	r0, r4
   10e6c:	bl	10c70 <fclose@plt>
   10e70:	b	10d28 <__assert_fail@plt+0x34>
   10e74:	str	r0, [sp, #4]
   10e78:	ldr	r0, [pc, #92]	; 10edc <__assert_fail@plt+0x1e8>
   10e7c:	bl	10bbc <puts@plt>
   10e80:	ldr	r3, [sp, #4]
   10e84:	mov	r0, r3
   10e88:	bl	10c04 <exit@plt>
   10e8c:	bl	10c28 <__errno_location@plt>
   10e90:	ldr	r4, [r6]
   10e94:	ldr	r0, [r0]
   10e98:	bl	10be0 <strerror@plt>
   10e9c:	mov	r1, r4
   10ea0:	mov	r2, r0
   10ea4:	ldr	r0, [pc, #52]	; 10ee0 <__assert_fail@plt+0x1ec>
   10ea8:	bl	10fd8 <__assert_fail@plt+0x2e4>
   10eac:	ldr	r0, [pc, #48]	; 10ee4 <__assert_fail@plt+0x1f0>
   10eb0:	bl	10fd8 <__assert_fail@plt+0x2e4>
   10eb4:	andeq	r5, r2, r0, lsl r0
   10eb8:	andeq	r3, r1, ip, asr #20
   10ebc:	andeq	r3, r1, r4, asr pc
   10ec0:	andeq	r4, r1, r4, asr #2
   10ec4:	andeq	r5, r2, ip, lsl r0
   10ec8:	andeq	r4, r1, r0, asr r1
   10ecc:	andeq	r4, r1, r8, asr r1
   10ed0:	andeq	r4, r1, r4, ror #2
   10ed4:	andeq	r3, r1, r8, asr #20
   10ed8:			; <UNDEFINED> instruction: 0x000141b8
   10edc:	andeq	r3, r1, ip, asr pc
   10ee0:			; <UNDEFINED> instruction: 0x000141bc
   10ee4:	andeq	r4, r1, r0, ror r1
   10ee8:	mov	fp, #0
   10eec:	mov	lr, #0
   10ef0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ef4:	mov	r2, sp
   10ef8:	push	{r2}		; (str r2, [sp, #-4]!)
   10efc:	push	{r0}		; (str r0, [sp, #-4]!)
   10f00:	ldr	ip, [pc, #16]	; 10f18 <__assert_fail@plt+0x224>
   10f04:	push	{ip}		; (str ip, [sp, #-4]!)
   10f08:	ldr	r0, [pc, #12]	; 10f1c <__assert_fail@plt+0x228>
   10f0c:	ldr	r3, [pc, #12]	; 10f20 <__assert_fail@plt+0x22c>
   10f10:	bl	10bd4 <__libc_start_main@plt>
   10f14:	bl	10cc4 <abort@plt>
   10f18:	andeq	r3, r1, r8, lsr #17
   10f1c:	andeq	r0, r1, r0, lsl #26
   10f20:	andeq	r3, r1, r8, asr #16
   10f24:	ldr	r3, [pc, #20]	; 10f40 <__assert_fail@plt+0x24c>
   10f28:	ldr	r2, [pc, #20]	; 10f44 <__assert_fail@plt+0x250>
   10f2c:	add	r3, pc, r3
   10f30:	ldr	r2, [r3, r2]
   10f34:	cmp	r2, #0
   10f38:	bxeq	lr
   10f3c:	b	10bf8 <__gmon_start__@plt>
   10f40:	andeq	r4, r1, r0
   10f44:	andeq	r0, r0, r8, asr #1
   10f48:	ldr	r0, [pc, #24]	; 10f68 <__assert_fail@plt+0x274>
   10f4c:	ldr	r3, [pc, #24]	; 10f6c <__assert_fail@plt+0x278>
   10f50:	cmp	r3, r0
   10f54:	bxeq	lr
   10f58:	ldr	r3, [pc, #16]	; 10f70 <__assert_fail@plt+0x27c>
   10f5c:	cmp	r3, #0
   10f60:	bxeq	lr
   10f64:	bx	r3
   10f68:	andeq	r5, r2, r8
   10f6c:	andeq	r5, r2, r8
   10f70:	andeq	r0, r0, r0
   10f74:	ldr	r0, [pc, #36]	; 10fa0 <__assert_fail@plt+0x2ac>
   10f78:	ldr	r1, [pc, #36]	; 10fa4 <__assert_fail@plt+0x2b0>
   10f7c:	sub	r1, r1, r0
   10f80:	asr	r1, r1, #2
   10f84:	add	r1, r1, r1, lsr #31
   10f88:	asrs	r1, r1, #1
   10f8c:	bxeq	lr
   10f90:	ldr	r3, [pc, #16]	; 10fa8 <__assert_fail@plt+0x2b4>
   10f94:	cmp	r3, #0
   10f98:	bxeq	lr
   10f9c:	bx	r3
   10fa0:	andeq	r5, r2, r8
   10fa4:	andeq	r5, r2, r8
   10fa8:	andeq	r0, r0, r0
   10fac:	push	{r4, lr}
   10fb0:	ldr	r4, [pc, #24]	; 10fd0 <__assert_fail@plt+0x2dc>
   10fb4:	ldrb	r3, [r4]
   10fb8:	cmp	r3, #0
   10fbc:	popne	{r4, pc}
   10fc0:	bl	10f48 <__assert_fail@plt+0x254>
   10fc4:	mov	r3, #1
   10fc8:	strb	r3, [r4]
   10fcc:	pop	{r4, pc}
   10fd0:	andeq	r5, r2, r8, lsl r0
   10fd4:	b	10f74 <__assert_fail@plt+0x280>
   10fd8:	push	{r0, r1, r2, r3}
   10fdc:	ldr	r3, [pc, #100]	; 11048 <__assert_fail@plt+0x354>
   10fe0:	ldr	r2, [pc, #100]	; 1104c <__assert_fail@plt+0x358>
   10fe4:	ldr	r4, [pc, #100]	; 11050 <__assert_fail@plt+0x35c>
   10fe8:	push	{lr}		; (str lr, [sp, #-4]!)
   10fec:	sub	sp, sp, #12
   10ff0:	ldr	r3, [r3]
   10ff4:	ldr	r0, [r2]
   10ff8:	str	r3, [sp, #4]
   10ffc:	ldr	r5, [sp, #16]
   11000:	bl	10af0 <fflush@plt>
   11004:	ldr	r3, [pc, #72]	; 11054 <__assert_fail@plt+0x360>
   11008:	ldr	r2, [pc, #72]	; 11058 <__assert_fail@plt+0x364>
   1100c:	mov	r1, #1
   11010:	ldr	r0, [r4]
   11014:	bl	10c64 <__fprintf_chk@plt>
   11018:	add	ip, sp, #20
   1101c:	mov	r2, r5
   11020:	mov	r3, ip
   11024:	mov	r1, #1
   11028:	ldr	r0, [r4]
   1102c:	str	ip, [sp]
   11030:	bl	10bec <__vfprintf_chk@plt>
   11034:	ldr	r1, [r4]
   11038:	mov	r0, #10
   1103c:	bl	10c94 <putc@plt>
   11040:	mov	r0, #1
   11044:	bl	10c04 <exit@plt>
   11048:	andeq	r4, r2, r0, lsr lr
   1104c:	andeq	r5, r2, r4, lsl r0
   11050:	andeq	r5, r2, r8
   11054:	andeq	r3, r1, r8, lsl r9
   11058:	andeq	r3, r1, r8, lsr #18
   1105c:	push	{r0, r1, r2, r3}
   11060:	push	{r4, r5, r6, lr}
   11064:	sub	sp, sp, #8
   11068:	ldr	r5, [pc, #120]	; 110e8 <__assert_fail@plt+0x3f4>
   1106c:	ldr	r2, [pc, #120]	; 110ec <__assert_fail@plt+0x3f8>
   11070:	ldr	r4, [pc, #120]	; 110f0 <__assert_fail@plt+0x3fc>
   11074:	ldr	r3, [r5]
   11078:	ldr	r0, [r2]
   1107c:	str	r3, [sp, #4]
   11080:	ldr	r6, [sp, #24]
   11084:	bl	10af0 <fflush@plt>
   11088:	ldr	r3, [pc, #100]	; 110f4 <__assert_fail@plt+0x400>
   1108c:	ldr	r2, [pc, #100]	; 110f8 <__assert_fail@plt+0x404>
   11090:	mov	r1, #1
   11094:	ldr	r0, [r4]
   11098:	bl	10c64 <__fprintf_chk@plt>
   1109c:	add	ip, sp, #28
   110a0:	mov	r2, r6
   110a4:	mov	r3, ip
   110a8:	mov	r1, #1
   110ac:	ldr	r0, [r4]
   110b0:	str	ip, [sp]
   110b4:	bl	10bec <__vfprintf_chk@plt>
   110b8:	ldr	r1, [r4]
   110bc:	mov	r0, #10
   110c0:	bl	10c94 <putc@plt>
   110c4:	ldr	r2, [sp, #4]
   110c8:	ldr	r3, [r5]
   110cc:	cmp	r2, r3
   110d0:	bne	110e4 <__assert_fail@plt+0x3f0>
   110d4:	add	sp, sp, #8
   110d8:	pop	{r4, r5, r6, lr}
   110dc:	add	sp, sp, #16
   110e0:	bx	lr
   110e4:	bl	10b5c <__stack_chk_fail@plt>
   110e8:	andeq	r4, r2, r0, lsr lr
   110ec:	andeq	r5, r2, r4, lsl r0
   110f0:	andeq	r5, r2, r8
   110f4:	andeq	r3, r1, r8, lsl r9
   110f8:	andeq	r3, r1, r8, lsr #18
   110fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11100:	sub	sp, sp, #140	; 0x8c
   11104:	ldr	r8, [pc, #1472]	; 116cc <__assert_fail@plt+0x9d8>
   11108:	ldr	r2, [r0, #24]
   1110c:	mov	r4, r0
   11110:	ldr	r3, [r8]
   11114:	cmp	r2, #0
   11118:	ldr	r0, [r0, #52]	; 0x34
   1111c:	str	r3, [sp, #132]	; 0x84
   11120:	beq	1114c <__assert_fail@plt+0x458>
   11124:	cmp	r0, #0
   11128:	bne	11614 <__assert_fail@plt+0x920>
   1112c:	ldr	r0, [r4, #56]	; 0x38
   11130:	cmp	r0, #0
   11134:	bne	11168 <__assert_fail@plt+0x474>
   11138:	ldr	r3, [pc, #1424]	; 116d0 <__assert_fail@plt+0x9dc>
   1113c:	mov	r2, #316	; 0x13c
   11140:	ldr	r1, [pc, #1420]	; 116d4 <__assert_fail@plt+0x9e0>
   11144:	ldr	r0, [pc, #1420]	; 116d8 <__assert_fail@plt+0x9e4>
   11148:	bl	10cf4 <__assert_fail@plt>
   1114c:	cmp	r0, #0
   11150:	beq	11600 <__assert_fail@plt+0x90c>
   11154:	ldr	r3, [r4, #56]	; 0x38
   11158:	cmp	r3, #0
   1115c:	beq	1169c <__assert_fail@plt+0x9a8>
   11160:	bl	10b68 <rewind@plt>
   11164:	ldr	r0, [r4, #56]	; 0x38
   11168:	bl	10b68 <rewind@plt>
   1116c:	mvn	r5, #0
   11170:	ldr	r0, [r4, #56]	; 0x38
   11174:	ldr	r6, [r4, #32]
   11178:	str	r5, [sp, #40]	; 0x28
   1117c:	bl	10c58 <fileno@plt>
   11180:	mov	r7, r0
   11184:	ldr	r0, [r4, #52]	; 0x34
   11188:	cmp	r0, #0
   1118c:	moveq	r4, r5
   11190:	beq	1119c <__assert_fail@plt+0x4a8>
   11194:	bl	10c58 <fileno@plt>
   11198:	mov	r4, r0
   1119c:	add	r0, sp, #32
   111a0:	bl	10c7c <pipe@plt>
   111a4:	cmn	r0, #1
   111a8:	beq	11658 <__assert_fail@plt+0x964>
   111ac:	bl	10c88 <fork@plt>
   111b0:	cmn	r0, #1
   111b4:	mov	r5, r0
   111b8:	beq	11670 <__assert_fail@plt+0x97c>
   111bc:	cmp	r0, #0
   111c0:	bne	112f0 <__assert_fail@plt+0x5fc>
   111c4:	bl	10c28 <__errno_location@plt>
   111c8:	cmp	r7, #0
   111cc:	mov	r8, r0
   111d0:	bne	11544 <__assert_fail@plt+0x850>
   111d4:	cmn	r4, #1
   111d8:	moveq	r3, #0
   111dc:	strbeq	r3, [sp, #80]	; 0x50
   111e0:	beq	111fc <__assert_fail@plt+0x508>
   111e4:	str	r4, [sp]
   111e8:	ldr	r3, [pc, #1260]	; 116dc <__assert_fail@plt+0x9e8>
   111ec:	mov	r2, #50	; 0x32
   111f0:	mov	r1, #1
   111f4:	add	r0, sp, #80	; 0x50
   111f8:	bl	10c34 <__sprintf_chk@plt>
   111fc:	mov	r1, #1
   11200:	ldr	r0, [pc, #1240]	; 116e0 <__assert_fail@plt+0x9ec>
   11204:	bl	10bb0 <open64@plt>
   11208:	cmn	r0, #1
   1120c:	beq	11688 <__assert_fail@plt+0x994>
   11210:	cmp	r0, #1
   11214:	beq	11228 <__assert_fail@plt+0x534>
   11218:	mov	r1, #1
   1121c:	bl	10b74 <dup2@plt>
   11220:	cmn	r0, #1
   11224:	beq	115c8 <__assert_fail@plt+0x8d4>
   11228:	ldr	r0, [sp, #36]	; 0x24
   1122c:	cmp	r0, #2
   11230:	beq	11244 <__assert_fail@plt+0x550>
   11234:	mov	r1, #2
   11238:	bl	10b74 <dup2@plt>
   1123c:	cmn	r0, #1
   11240:	beq	115c8 <__assert_fail@plt+0x8d4>
   11244:	ldr	r0, [sp, #40]	; 0x28
   11248:	cmn	r0, #1
   1124c:	addne	r5, sp, #40	; 0x28
   11250:	bne	11264 <__assert_fail@plt+0x570>
   11254:	b	11280 <__assert_fail@plt+0x58c>
   11258:	ldr	r0, [r5, #4]!
   1125c:	cmn	r0, #1
   11260:	beq	11280 <__assert_fail@plt+0x58c>
   11264:	cmp	r4, r0
   11268:	cmpne	r0, #2
   1126c:	ble	11258 <__assert_fail@plt+0x564>
   11270:	bl	10cdc <close@plt>
   11274:	ldr	r0, [r5, #4]!
   11278:	cmn	r0, #1
   1127c:	bne	11264 <__assert_fail@plt+0x570>
   11280:	mov	r3, #0
   11284:	cmp	r6, #0
   11288:	str	r3, [r8]
   1128c:	beq	11514 <__assert_fail@plt+0x820>
   11290:	ldr	r1, [pc, #1100]	; 116e4 <__assert_fail@plt+0x9f0>
   11294:	ldr	ip, [pc, #1100]	; 116e8 <__assert_fail@plt+0x9f4>
   11298:	str	r1, [sp, #16]
   1129c:	ldr	r0, [pc, #1096]	; 116ec <__assert_fail@plt+0x9f8>
   112a0:	ldr	r2, [pc, #1096]	; 116f0 <__assert_fail@plt+0x9fc>
   112a4:	ldr	r1, [pc, #1096]	; 116f4 <__assert_fail@plt+0xa00>
   112a8:	cmn	r4, #1
   112ac:	ldr	lr, [pc, #1092]	; 116f8 <__assert_fail@plt+0xa04>
   112b0:	addne	r3, sp, #80	; 0x50
   112b4:	str	r3, [sp, #20]
   112b8:	str	lr, [sp, #12]
   112bc:	mov	r3, #0
   112c0:	stmib	sp, {r0, ip}
   112c4:	str	r2, [sp]
   112c8:	mov	r0, r1
   112cc:	str	r3, [sp, #24]
   112d0:	ldr	r2, [pc, #1060]	; 116fc <__assert_fail@plt+0xa08>
   112d4:	ldr	r3, [pc, #1060]	; 11700 <__assert_fail@plt+0xa0c>
   112d8:	bl	10b2c <execlp@plt>
   112dc:	ldr	r0, [r8]
   112e0:	bl	10be0 <strerror@plt>
   112e4:	mov	r1, r0
   112e8:	ldr	r0, [pc, #1044]	; 11704 <__assert_fail@plt+0xa10>
   112ec:	bl	10fd8 <__assert_fail@plt+0x2e4>
   112f0:	ldr	r0, [sp, #36]	; 0x24
   112f4:	bl	10cdc <close@plt>
   112f8:	ldr	r1, [pc, #1032]	; 11708 <__assert_fail@plt+0xa14>
   112fc:	ldr	r0, [sp, #32]
   11300:	bl	10acc <fdopen@plt>
   11304:	subs	r7, r0, #0
   11308:	beq	116b4 <__assert_fail@plt+0x9c0>
   1130c:	ldr	r9, [pc, #1016]	; 1170c <__assert_fail@plt+0xa18>
   11310:	ldr	sl, [pc, #1016]	; 11710 <__assert_fail@plt+0xa1c>
   11314:	mov	r4, #0
   11318:	mov	r0, r7
   1131c:	bl	10cd0 <getc@plt>
   11320:	cmn	r0, #1
   11324:	mov	r6, r0
   11328:	beq	1148c <__assert_fail@plt+0x798>
   1132c:	cmp	r4, #8
   11330:	addls	r3, sp, #136	; 0x88
   11334:	addls	r3, r3, r4
   11338:	strbls	r6, [r3, #-56]	; 0xffffffc8
   1133c:	bls	11354 <__assert_fail@plt+0x660>
   11340:	cmp	r4, #9
   11344:	ldr	r1, [r9]
   11348:	beq	11450 <__assert_fail@plt+0x75c>
   1134c:	mov	r0, r6
   11350:	bl	10c94 <putc@plt>
   11354:	cmp	r6, #10
   11358:	beq	11364 <__assert_fail@plt+0x670>
   1135c:	add	r4, r4, #1
   11360:	b	11318 <__assert_fail@plt+0x624>
   11364:	ldr	r3, [sl]
   11368:	mov	r6, sl
   1136c:	cmp	r3, #0
   11370:	beq	11420 <__assert_fail@plt+0x72c>
   11374:	cmp	r4, #8
   11378:	bls	113c8 <__assert_fail@plt+0x6d4>
   1137c:	mov	r0, r7
   11380:	bl	10cd0 <getc@plt>
   11384:	cmn	r0, #1
   11388:	beq	114c8 <__assert_fail@plt+0x7d4>
   1138c:	cmp	r0, #10
   11390:	strb	r0, [sp, #80]	; 0x50
   11394:	beq	1156c <__assert_fail@plt+0x878>
   11398:	mov	r0, r7
   1139c:	bl	10cd0 <getc@plt>
   113a0:	cmn	r0, #1
   113a4:	beq	115f8 <__assert_fail@plt+0x904>
   113a8:	cmp	r0, #10
   113ac:	strb	r0, [sp, #81]	; 0x51
   113b0:	movne	r4, #1
   113b4:	bne	1135c <__assert_fail@plt+0x668>
   113b8:	ldr	r3, [sl]
   113bc:	mov	r4, #1
   113c0:	cmp	r3, #0
   113c4:	beq	11420 <__assert_fail@plt+0x72c>
   113c8:	add	fp, sp, #80	; 0x50
   113cc:	ldr	r3, [r9]
   113d0:	mov	r2, #2
   113d4:	mov	r1, #1
   113d8:	ldr	r0, [pc, #820]	; 11714 <__assert_fail@plt+0xa20>
   113dc:	bl	10b8c <fwrite@plt>
   113e0:	add	r1, r4, #1
   113e4:	ldr	r3, [r9]
   113e8:	mov	r2, #1
   113ec:	mov	r0, fp
   113f0:	bl	10b8c <fwrite@plt>
   113f4:	mov	r0, r7
   113f8:	bl	10cd0 <getc@plt>
   113fc:	cmn	r0, #1
   11400:	beq	114c8 <__assert_fail@plt+0x7d4>
   11404:	cmp	r0, #10
   11408:	strb	r0, [sp, #80]	; 0x50
   1140c:	bne	11398 <__assert_fail@plt+0x6a4>
   11410:	ldr	r3, [sl]
   11414:	mov	r4, #0
   11418:	cmp	r3, r4
   1141c:	bne	113cc <__assert_fail@plt+0x6d8>
   11420:	mov	r0, r7
   11424:	bl	10cd0 <getc@plt>
   11428:	cmn	r0, #1
   1142c:	beq	114c8 <__assert_fail@plt+0x7d4>
   11430:	cmp	r0, #10
   11434:	strb	r0, [sp, #80]	; 0x50
   11438:	bne	11398 <__assert_fail@plt+0x6a4>
   1143c:	ldr	r3, [sl]
   11440:	mov	r4, #0
   11444:	cmp	r3, r4
   11448:	bne	113c8 <__assert_fail@plt+0x6d4>
   1144c:	b	11420 <__assert_fail@plt+0x72c>
   11450:	ldr	r3, [sp, #80]	; 0x50
   11454:	ldr	r2, [pc, #700]	; 11718 <__assert_fail@plt+0xa24>
   11458:	add	fp, sp, #80	; 0x50
   1145c:	cmp	r3, r2
   11460:	beq	11590 <__assert_fail@plt+0x89c>
   11464:	ldr	r3, [sl]
   11468:	cmp	r3, #0
   1146c:	bne	115dc <__assert_fail@plt+0x8e8>
   11470:	mov	r3, r1
   11474:	mov	r0, fp
   11478:	mov	r1, #9
   1147c:	mov	r2, #1
   11480:	bl	10b8c <fwrite@plt>
   11484:	ldr	r1, [r9]
   11488:	b	1134c <__assert_fail@plt+0x658>
   1148c:	cmp	r4, #0
   11490:	beq	114c8 <__assert_fail@plt+0x7d4>
   11494:	ldr	r6, [pc, #628]	; 11710 <__assert_fail@plt+0xa1c>
   11498:	ldr	r2, [r6]
   1149c:	cmp	r4, #8
   114a0:	movhi	r3, #0
   114a4:	movls	r3, #1
   114a8:	ldr	r6, [pc, #604]	; 1170c <__assert_fail@plt+0xa18>
   114ac:	cmp	r2, #0
   114b0:	moveq	r3, #0
   114b4:	cmp	r3, #0
   114b8:	ldr	r1, [r6]
   114bc:	bne	11628 <__assert_fail@plt+0x934>
   114c0:	mov	r0, #10
   114c4:	bl	10c94 <putc@plt>
   114c8:	mov	r0, r7
   114cc:	bl	10c70 <fclose@plt>
   114d0:	b	114e4 <__assert_fail@plt+0x7f0>
   114d4:	bl	10c28 <__errno_location@plt>
   114d8:	ldr	r0, [r0]
   114dc:	cmp	r0, #4
   114e0:	bne	11580 <__assert_fail@plt+0x88c>
   114e4:	mov	r2, #0
   114e8:	mov	r1, r2
   114ec:	mov	r0, r5
   114f0:	bl	10b98 <waitpid@plt>
   114f4:	cmn	r0, #1
   114f8:	beq	114d4 <__assert_fail@plt+0x7e0>
   114fc:	ldr	r2, [sp, #132]	; 0x84
   11500:	ldr	r3, [r8]
   11504:	cmp	r2, r3
   11508:	bne	116b0 <__assert_fail@plt+0x9bc>
   1150c:	add	sp, sp, #140	; 0x8c
   11510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11514:	ldr	r1, [pc, #456]	; 116e4 <__assert_fail@plt+0x9f0>
   11518:	cmn	r4, #1
   1151c:	ldr	r3, [pc, #468]	; 116f8 <__assert_fail@plt+0xa04>
   11520:	addne	r6, sp, #80	; 0x50
   11524:	str	r1, [sp, #16]
   11528:	ldr	ip, [pc, #492]	; 1171c <__assert_fail@plt+0xa28>
   1152c:	ldr	r0, [pc, #436]	; 116e8 <__assert_fail@plt+0x9f4>
   11530:	str	r6, [sp, #20]
   11534:	ldr	r2, [pc, #436]	; 116f0 <__assert_fail@plt+0x9fc>
   11538:	ldr	r1, [pc, #480]	; 11720 <__assert_fail@plt+0xa2c>
   1153c:	str	r3, [sp, #12]
   11540:	b	112bc <__assert_fail@plt+0x5c8>
   11544:	mov	r1, r5
   11548:	mov	r0, r7
   1154c:	bl	10b74 <dup2@plt>
   11550:	cmn	r0, #1
   11554:	bne	111d4 <__assert_fail@plt+0x4e0>
   11558:	ldr	r0, [r8]
   1155c:	bl	10be0 <strerror@plt>
   11560:	mov	r1, r0
   11564:	ldr	r0, [pc, #440]	; 11724 <__assert_fail@plt+0xa30>
   11568:	bl	10fd8 <__assert_fail@plt+0x2e4>
   1156c:	ldr	r3, [sl]
   11570:	cmp	r3, #0
   11574:	beq	11420 <__assert_fail@plt+0x72c>
   11578:	mov	r4, #0
   1157c:	b	113c8 <__assert_fail@plt+0x6d4>
   11580:	bl	10be0 <strerror@plt>
   11584:	mov	r1, r0
   11588:	ldr	r0, [pc, #408]	; 11728 <__assert_fail@plt+0xa34>
   1158c:	bl	10fd8 <__assert_fail@plt+0x2e4>
   11590:	ldr	r3, [sp, #84]	; 0x54
   11594:	ldr	r2, [pc, #400]	; 1172c <__assert_fail@plt+0xa38>
   11598:	cmp	r3, r2
   1159c:	bne	11464 <__assert_fail@plt+0x770>
   115a0:	ldrb	r3, [sp, #88]	; 0x58
   115a4:	cmp	r3, #32
   115a8:	bne	11464 <__assert_fail@plt+0x770>
   115ac:	mov	r3, r1
   115b0:	mov	r2, #2
   115b4:	mov	r1, #1
   115b8:	ldr	r0, [pc, #368]	; 11730 <__assert_fail@plt+0xa3c>
   115bc:	bl	10b8c <fwrite@plt>
   115c0:	ldr	r1, [r9]
   115c4:	b	11470 <__assert_fail@plt+0x77c>
   115c8:	ldr	r0, [r8]
   115cc:	bl	10be0 <strerror@plt>
   115d0:	mov	r1, r0
   115d4:	ldr	r0, [pc, #344]	; 11734 <__assert_fail@plt+0xa40>
   115d8:	bl	10fd8 <__assert_fail@plt+0x2e4>
   115dc:	mov	r3, r1
   115e0:	mov	r2, #2
   115e4:	mov	r1, #1
   115e8:	ldr	r0, [pc, #292]	; 11714 <__assert_fail@plt+0xa20>
   115ec:	bl	10b8c <fwrite@plt>
   115f0:	ldr	r1, [r9]
   115f4:	b	11470 <__assert_fail@plt+0x77c>
   115f8:	mov	r4, #1
   115fc:	b	11498 <__assert_fail@plt+0x7a4>
   11600:	ldr	r3, [pc, #200]	; 116d0 <__assert_fail@plt+0x9dc>
   11604:	ldr	r2, [pc, #300]	; 11738 <__assert_fail@plt+0xa44>
   11608:	ldr	r1, [pc, #196]	; 116d4 <__assert_fail@plt+0x9e0>
   1160c:	ldr	r0, [pc, #296]	; 1173c <__assert_fail@plt+0xa48>
   11610:	bl	10cf4 <__assert_fail@plt>
   11614:	ldr	r3, [pc, #180]	; 116d0 <__assert_fail@plt+0x9dc>
   11618:	ldr	r2, [pc, #288]	; 11740 <__assert_fail@plt+0xa4c>
   1161c:	ldr	r1, [pc, #176]	; 116d4 <__assert_fail@plt+0x9e0>
   11620:	ldr	r0, [pc, #284]	; 11744 <__assert_fail@plt+0xa50>
   11624:	bl	10cf4 <__assert_fail@plt>
   11628:	mov	r3, r1
   1162c:	mov	r2, #2
   11630:	mov	r1, #1
   11634:	ldr	r0, [pc, #216]	; 11714 <__assert_fail@plt+0xa20>
   11638:	bl	10b8c <fwrite@plt>
   1163c:	add	r1, r4, #1
   11640:	ldr	r3, [r6]
   11644:	mov	r2, #1
   11648:	add	r0, sp, #80	; 0x50
   1164c:	bl	10b8c <fwrite@plt>
   11650:	ldr	r1, [r6]
   11654:	b	114c0 <__assert_fail@plt+0x7cc>
   11658:	bl	10c28 <__errno_location@plt>
   1165c:	ldr	r0, [r0]
   11660:	bl	10be0 <strerror@plt>
   11664:	mov	r1, r0
   11668:	ldr	r0, [pc, #216]	; 11748 <__assert_fail@plt+0xa54>
   1166c:	bl	10fd8 <__assert_fail@plt+0x2e4>
   11670:	bl	10c28 <__errno_location@plt>
   11674:	ldr	r0, [r0]
   11678:	bl	10be0 <strerror@plt>
   1167c:	mov	r1, r0
   11680:	ldr	r0, [pc, #196]	; 1174c <__assert_fail@plt+0xa58>
   11684:	bl	10fd8 <__assert_fail@plt+0x2e4>
   11688:	ldr	r0, [r8]
   1168c:	bl	10be0 <strerror@plt>
   11690:	mov	r1, r0
   11694:	ldr	r0, [pc, #180]	; 11750 <__assert_fail@plt+0xa5c>
   11698:	bl	10fd8 <__assert_fail@plt+0x2e4>
   1169c:	ldr	r3, [pc, #44]	; 116d0 <__assert_fail@plt+0x9dc>
   116a0:	ldr	r2, [pc, #172]	; 11754 <__assert_fail@plt+0xa60>
   116a4:	ldr	r1, [pc, #40]	; 116d4 <__assert_fail@plt+0x9e0>
   116a8:	ldr	r0, [pc, #40]	; 116d8 <__assert_fail@plt+0x9e4>
   116ac:	bl	10cf4 <__assert_fail@plt>
   116b0:	bl	10b5c <__stack_chk_fail@plt>
   116b4:	bl	10c28 <__errno_location@plt>
   116b8:	ldr	r0, [r0]
   116bc:	bl	10be0 <strerror@plt>
   116c0:	mov	r1, r0
   116c4:	ldr	r0, [pc, #140]	; 11758 <__assert_fail@plt+0xa64>
   116c8:	bl	10fd8 <__assert_fail@plt+0x2e4>
   116cc:	andeq	r4, r2, r0, lsr lr
   116d0:			; <UNDEFINED> instruction: 0x000138b8
   116d4:	andeq	r3, r1, r0, lsr r9
   116d8:	andeq	r3, r1, r0, ror #18
   116dc:	ldrdeq	r3, [r1], -r0
   116e0:	ldrdeq	r3, [r1], -r8
   116e4:	andeq	r3, r1, r8, asr #20
   116e8:	andeq	r3, r1, r0, asr sl
   116ec:	andeq	r3, r1, ip, asr sl
   116f0:	andeq	r3, r1, ip, ror #20
   116f4:	andeq	r3, r1, r0, asr #20
   116f8:	andeq	r3, r1, ip, asr #20
   116fc:	andeq	r3, r1, r4, lsr #20
   11700:	andeq	r3, r1, r8, lsl sl
   11704:	andeq	r3, r1, r0, lsl #21
   11708:	andeq	r3, r1, r8, lsr #21
   1170c:	andeq	r5, r2, r4, lsl r0
   11710:	andeq	r5, r2, ip, lsl r0
   11714:	andeq	r3, r1, r0, ror #21
   11718:	strbpl	r4, [lr, #-1883]	; 0xfffff8a5
   1171c:	andeq	r3, r1, r4, ror sl
   11720:	andeq	r3, r1, r0, ror sl
   11724:			; <UNDEFINED> instruction: 0x000139b8
   11728:	andeq	r3, r1, r4, ror #21
   1172c:	ldcpl	7, cr4, [sl, #-320]!	; 0xfffffec0
   11730:	ldrdeq	r3, [r1], -ip
   11734:	andeq	r3, r1, r0, lsl #20
   11738:	andeq	r0, r0, r1, asr #2
   1173c:	andeq	r3, r1, r0, ror r9
   11740:	andeq	r0, r0, fp, lsr r1
   11744:	andeq	r3, r1, ip, asr #18
   11748:	andeq	r3, r1, r0, lsl #19
   1174c:	muleq	r1, ip, r9
   11750:	andeq	r3, r1, r4, ror #19
   11754:	andeq	r0, r0, r2, asr #2
   11758:	andeq	r3, r1, ip, lsr #21
   1175c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11760:	mov	r5, r0
   11764:	ldr	r7, [pc, #1572]	; 11d90 <__assert_fail@plt+0x109c>
   11768:	ldr	r6, [pc, #1572]	; 11d94 <__assert_fail@plt+0x10a0>
   1176c:	sub	sp, sp, #16
   11770:	ldr	r0, [r7, #4]
   11774:	ldr	r3, [r6]
   11778:	cmp	r0, #0
   1177c:	mov	r4, r1
   11780:	mov	r8, r2
   11784:	str	r3, [sp, #12]
   11788:	beq	117b0 <__assert_fail@plt+0xabc>
   1178c:	sub	r3, r1, #1
   11790:	cmp	r3, #12
   11794:	ldr	r1, [pc, #1532]	; 11d98 <__assert_fail@plt+0x10a4>
   11798:	ldrls	r2, [pc, #1532]	; 11d9c <__assert_fail@plt+0x10a8>
   1179c:	ldrhi	r2, [pc, #1532]	; 11da0 <__assert_fail@plt+0x10ac>
   117a0:	addls	r3, r2, r3, lsl #2
   117a4:	mov	r0, #1
   117a8:	ldrls	r2, [r3, #20]
   117ac:	bl	10c4c <__printf_chk@plt>
   117b0:	cmp	r4, #4
   117b4:	cmpne	r4, #11
   117b8:	bne	11820 <__assert_fail@plt+0xb2c>
   117bc:	ldr	r9, [r5, #28]
   117c0:	cmp	r9, #1
   117c4:	beq	1195c <__assert_fail@plt+0xc68>
   117c8:	cmp	r4, #1
   117cc:	beq	11828 <__assert_fail@plt+0xb34>
   117d0:	cmp	r4, #4
   117d4:	beq	11834 <__assert_fail@plt+0xb40>
   117d8:	cmp	r4, #12
   117dc:	moveq	r3, #1
   117e0:	streq	r3, [r5, #12]
   117e4:	beq	11804 <__assert_fail@plt+0xb10>
   117e8:	cmp	r4, #7
   117ec:	beq	11a0c <__assert_fail@plt+0xd18>
   117f0:	cmp	r4, #8
   117f4:	beq	11a24 <__assert_fail@plt+0xd30>
   117f8:	sub	r3, r4, #9
   117fc:	cmp	r3, #1
   11800:	bls	119bc <__assert_fail@plt+0xcc8>
   11804:	ldr	r2, [sp, #12]
   11808:	ldr	r3, [r6]
   1180c:	mov	r0, #0
   11810:	cmp	r2, r3
   11814:	bne	11d24 <__assert_fail@plt+0x1030>
   11818:	add	sp, sp, #16
   1181c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11820:	cmp	r4, #1
   11824:	bne	117d8 <__assert_fail@plt+0xae4>
   11828:	mov	r3, #1
   1182c:	str	r3, [r5]
   11830:	b	11804 <__assert_fail@plt+0xb10>
   11834:	mov	r0, r8
   11838:	mvn	r2, #0
   1183c:	ldr	r1, [pc, #1376]	; 11da4 <__assert_fail@plt+0x10b0>
   11840:	bl	129c4 <__assert_fail@plt+0x1cd0>
   11844:	subs	r8, r0, #0
   11848:	beq	11aa0 <__assert_fail@plt+0xdac>
   1184c:	add	r1, sp, #8
   11850:	bl	1310c <__assert_fail@plt+0x2418>
   11854:	ldr	r2, [r5, #20]
   11858:	subs	r4, r0, #0
   1185c:	beq	11aec <__assert_fail@plt+0xdf8>
   11860:	ldr	r3, [sp, #8]
   11864:	str	r4, [sp]
   11868:	str	r3, [sp, #4]
   1186c:	lsl	r2, r2, #1
   11870:	ldr	r3, [pc, #1328]	; 11da8 <__assert_fail@plt+0x10b4>
   11874:	ldr	r1, [pc, #1328]	; 11dac <__assert_fail@plt+0x10b8>
   11878:	mov	r0, #1
   1187c:	bl	10c4c <__printf_chk@plt>
   11880:	ldr	r3, [r5, #28]
   11884:	cmp	r3, #3
   11888:	beq	11b04 <__assert_fail@plt+0xe10>
   1188c:	ldr	r1, [pc, #1308]	; 11db0 <__assert_fail@plt+0x10bc>
   11890:	mov	r0, r4
   11894:	bl	10ae4 <strcmp@plt>
   11898:	cmp	r0, #0
   1189c:	beq	11a44 <__assert_fail@plt+0xd50>
   118a0:	mov	r0, r4
   118a4:	ldr	r1, [pc, #1288]	; 11db4 <__assert_fail@plt+0x10c0>
   118a8:	bl	10ae4 <strcmp@plt>
   118ac:	cmp	r0, #0
   118b0:	bne	11940 <__assert_fail@plt+0xc4c>
   118b4:	ldr	r4, [sp, #8]
   118b8:	ldr	r1, [pc, #1272]	; 11db8 <__assert_fail@plt+0x10c4>
   118bc:	mov	r0, r4
   118c0:	bl	10ae4 <strcmp@plt>
   118c4:	cmp	r0, #0
   118c8:	beq	118e0 <__assert_fail@plt+0xbec>
   118cc:	mov	r0, r4
   118d0:	ldr	r1, [pc, #1252]	; 11dbc <__assert_fail@plt+0x10c8>
   118d4:	bl	10ae4 <strcmp@plt>
   118d8:	cmp	r0, #0
   118dc:	bne	11940 <__assert_fail@plt+0xc4c>
   118e0:	mov	r2, #0
   118e4:	ldr	r1, [pc, #1236]	; 11dc0 <__assert_fail@plt+0x10cc>
   118e8:	mov	r0, r8
   118ec:	bl	12f78 <__assert_fail@plt+0x2284>
   118f0:	subs	r2, r0, #0
   118f4:	beq	11904 <__assert_fail@plt+0xc10>
   118f8:	ldr	r1, [pc, #1220]	; 11dc4 <__assert_fail@plt+0x10d0>
   118fc:	mov	r0, #1
   11900:	bl	10c4c <__printf_chk@plt>
   11904:	ldr	r3, [r5, #24]
   11908:	cmp	r3, #0
   1190c:	bne	11c78 <__assert_fail@plt+0xf84>
   11910:	ldr	r2, [r7, #8]
   11914:	mov	r3, #1
   11918:	cmp	r2, #0
   1191c:	str	r3, [r5, #24]
   11920:	beq	11940 <__assert_fail@plt+0xc4c>
   11924:	ldr	r3, [r5, #56]	; 0x38
   11928:	cmp	r3, #0
   1192c:	bne	11d54 <__assert_fail@plt+0x1060>
   11930:	bl	10b80 <tmpfile64@plt>
   11934:	cmp	r0, #0
   11938:	str	r0, [r5, #56]	; 0x38
   1193c:	beq	11c60 <__assert_fail@plt+0xf6c>
   11940:	mov	r0, r8
   11944:	bl	12f6c <__assert_fail@plt+0x2278>
   11948:	mov	r3, #1
   1194c:	mov	r2, #0
   11950:	str	r3, [r5, #8]
   11954:	strd	r2, [r5]
   11958:	b	11804 <__assert_fail@plt+0xb10>
   1195c:	ldr	r0, [pc, #1124]	; 11dc8 <__assert_fail@plt+0x10d4>
   11960:	bl	10bbc <puts@plt>
   11964:	ldr	r2, [r7, #8]
   11968:	ldr	r3, [r5, #28]
   1196c:	cmp	r2, #0
   11970:	ldr	r2, [r5, #20]
   11974:	add	r3, r3, #1
   11978:	str	r9, [r5, #48]	; 0x30
   1197c:	str	r3, [r5, #28]
   11980:	str	r2, [r5, #44]	; 0x2c
   11984:	beq	117c8 <__assert_fail@plt+0xad4>
   11988:	ldr	r3, [r5, #52]	; 0x34
   1198c:	cmp	r3, #0
   11990:	bne	11d7c <__assert_fail@plt+0x1088>
   11994:	bl	10b80 <tmpfile64@plt>
   11998:	cmp	r0, #0
   1199c:	str	r0, [r5, #52]	; 0x34
   119a0:	bne	117c8 <__assert_fail@plt+0xad4>
   119a4:	bl	10c28 <__errno_location@plt>
   119a8:	ldr	r0, [r0]
   119ac:	bl	10be0 <strerror@plt>
   119b0:	mov	r1, r0
   119b4:	ldr	r0, [pc, #1040]	; 11dcc <__assert_fail@plt+0x10d8>
   119b8:	bl	10fd8 <__assert_fail@plt+0x2e4>
   119bc:	cmp	r4, #9
   119c0:	mov	r3, #1
   119c4:	mov	r2, #0
   119c8:	streq	r3, [r5]
   119cc:	streq	r3, [r5, #8]
   119d0:	str	r3, [r5, #16]
   119d4:	ldreq	r0, [pc, #1012]	; 11dd0 <__assert_fail@plt+0x10dc>
   119d8:	ldrne	r0, [pc, #1012]	; 11dd4 <__assert_fail@plt+0x10e0>
   119dc:	str	r2, [r5, #4]
   119e0:	bl	10bbc <puts@plt>
   119e4:	ldr	r3, [r5, #28]
   119e8:	cmp	r3, #2
   119ec:	beq	11abc <__assert_fail@plt+0xdc8>
   119f0:	cmp	r3, #4
   119f4:	bne	11804 <__assert_fail@plt+0xb10>
   119f8:	ldr	r0, [pc, #984]	; 11dd8 <__assert_fail@plt+0x10e4>
   119fc:	bl	10bbc <puts@plt>
   11a00:	mov	r3, #1
   11a04:	str	r3, [r5, #60]	; 0x3c
   11a08:	b	11804 <__assert_fail@plt+0xb10>
   11a0c:	ldr	r0, [pc, #968]	; 11ddc <__assert_fail@plt+0x10e8>
   11a10:	bl	10bbc <puts@plt>
   11a14:	ldr	r3, [r5, #20]
   11a18:	add	r3, r3, #1
   11a1c:	str	r3, [r5, #20]
   11a20:	b	11804 <__assert_fail@plt+0xb10>
   11a24:	ldr	r0, [pc, #948]	; 11de0 <__assert_fail@plt+0x10ec>
   11a28:	bl	10bbc <puts@plt>
   11a2c:	ldr	r3, [r5, #20]
   11a30:	cmp	r3, #0
   11a34:	beq	11a94 <__assert_fail@plt+0xda0>
   11a38:	sub	r3, r3, #1
   11a3c:	str	r3, [r5, #20]
   11a40:	b	11804 <__assert_fail@plt+0xb10>
   11a44:	ldr	r4, [sp, #8]
   11a48:	ldr	r1, [pc, #916]	; 11de4 <__assert_fail@plt+0x10f0>
   11a4c:	mov	r0, r4
   11a50:	bl	10ae4 <strcmp@plt>
   11a54:	cmp	r0, #0
   11a58:	beq	11bc0 <__assert_fail@plt+0xecc>
   11a5c:	mov	r0, r4
   11a60:	ldr	r1, [pc, #896]	; 11de8 <__assert_fail@plt+0x10f4>
   11a64:	bl	10ae4 <strcmp@plt>
   11a68:	subs	r2, r0, #0
   11a6c:	bne	11940 <__assert_fail@plt+0xc4c>
   11a70:	ldr	r1, [pc, #884]	; 11dec <__assert_fail@plt+0x10f8>
   11a74:	mov	r0, r8
   11a78:	bl	12f78 <__assert_fail@plt+0x2284>
   11a7c:	subs	r2, r0, #0
   11a80:	beq	11940 <__assert_fail@plt+0xc4c>
   11a84:	ldr	r1, [pc, #868]	; 11df0 <__assert_fail@plt+0x10fc>
   11a88:	mov	r0, #1
   11a8c:	bl	10c4c <__printf_chk@plt>
   11a90:	b	11940 <__assert_fail@plt+0xc4c>
   11a94:	ldr	r0, [pc, #856]	; 11df4 <__assert_fail@plt+0x1100>
   11a98:	bl	1105c <__assert_fail@plt+0x368>
   11a9c:	b	11804 <__assert_fail@plt+0xb10>
   11aa0:	ldr	r2, [r5, #20]
   11aa4:	ldr	r3, [pc, #764]	; 11da8 <__assert_fail@plt+0x10b4>
   11aa8:	ldr	r1, [pc, #840]	; 11df8 <__assert_fail@plt+0x1104>
   11aac:	lsl	r2, r2, #1
   11ab0:	mov	r0, #1
   11ab4:	bl	10c4c <__printf_chk@plt>
   11ab8:	b	11948 <__assert_fail@plt+0xc54>
   11abc:	ldr	r2, [r5, #20]
   11ac0:	ldr	r3, [r5, #44]	; 0x2c
   11ac4:	cmp	r2, r3
   11ac8:	bne	11804 <__assert_fail@plt+0xb10>
   11acc:	ldr	r0, [pc, #808]	; 11dfc <__assert_fail@plt+0x1108>
   11ad0:	bl	10bbc <puts@plt>
   11ad4:	ldr	r3, [r5, #28]
   11ad8:	mov	r2, #0
   11adc:	add	r3, r3, #1
   11ae0:	str	r3, [r5, #28]
   11ae4:	str	r2, [r5, #48]	; 0x30
   11ae8:	b	11804 <__assert_fail@plt+0xb10>
   11aec:	ldr	r3, [pc, #692]	; 11da8 <__assert_fail@plt+0x10b4>
   11af0:	ldr	r1, [pc, #776]	; 11e00 <__assert_fail@plt+0x110c>
   11af4:	lsl	r2, r2, #1
   11af8:	mov	r0, #1
   11afc:	bl	10c4c <__printf_chk@plt>
   11b00:	b	11940 <__assert_fail@plt+0xc4c>
   11b04:	mov	r0, r4
   11b08:	bl	10c10 <strlen@plt>
   11b0c:	ldr	sl, [sp, #8]
   11b10:	mov	r9, r0
   11b14:	mov	r0, sl
   11b18:	bl	10c10 <strlen@plt>
   11b1c:	add	r0, r9, r0
   11b20:	add	r0, r0, #2
   11b24:	bl	10bc8 <malloc@plt>
   11b28:	subs	r9, r0, #0
   11b2c:	beq	11d3c <__assert_fail@plt+0x1048>
   11b30:	mov	r1, r4
   11b34:	bl	10b50 <stpcpy@plt>
   11b38:	mov	r3, #47	; 0x2f
   11b3c:	mov	r1, sl
   11b40:	strb	r3, [r0], #1
   11b44:	bl	10ba4 <strcpy@plt>
   11b48:	ldr	r4, [r5, #36]	; 0x24
   11b4c:	cmp	r4, #0
   11b50:	beq	11d28 <__assert_fail@plt+0x1034>
   11b54:	mov	r1, r4
   11b58:	mov	r0, r9
   11b5c:	bl	10ae4 <strcmp@plt>
   11b60:	cmp	r0, #0
   11b64:	beq	11c24 <__assert_fail@plt+0xf30>
   11b68:	ldr	sl, [r5, #40]	; 0x28
   11b6c:	cmp	sl, #0
   11b70:	beq	11c84 <__assert_fail@plt+0xf90>
   11b74:	mov	r1, sl
   11b78:	mov	r0, r9
   11b7c:	bl	10ae4 <strcmp@plt>
   11b80:	cmp	r0, #0
   11b84:	beq	11c24 <__assert_fail@plt+0xf30>
   11b88:	ldr	r0, [r5, #32]
   11b8c:	ldr	r2, [pc, #624]	; 11e04 <__assert_fail@plt+0x1110>
   11b90:	cmp	r0, #0
   11b94:	ldr	r3, [pc, #620]	; 11e08 <__assert_fail@plt+0x1114>
   11b98:	ldr	r1, [pc, #620]	; 11e0c <__assert_fail@plt+0x1118>
   11b9c:	moveq	r1, r2
   11ba0:	str	r9, [sp, #4]
   11ba4:	str	sl, [sp]
   11ba8:	mov	r2, r4
   11bac:	ldr	r0, [pc, #604]	; 11e10 <__assert_fail@plt+0x111c>
   11bb0:	bl	1105c <__assert_fail@plt+0x368>
   11bb4:	mov	r0, r9
   11bb8:	bl	10afc <free@plt>
   11bbc:	b	11940 <__assert_fail@plt+0xc4c>
   11bc0:	mov	r2, #1
   11bc4:	ldr	r1, [pc, #544]	; 11dec <__assert_fail@plt+0x10f8>
   11bc8:	mov	r0, r8
   11bcc:	bl	12f78 <__assert_fail@plt+0x2284>
   11bd0:	subs	r4, r0, #0
   11bd4:	beq	11940 <__assert_fail@plt+0xc4c>
   11bd8:	mov	r2, r4
   11bdc:	ldr	r1, [pc, #560]	; 11e14 <__assert_fail@plt+0x1120>
   11be0:	mov	r0, #1
   11be4:	bl	10c4c <__printf_chk@plt>
   11be8:	ldr	r1, [pc, #552]	; 11e18 <__assert_fail@plt+0x1124>
   11bec:	mov	r0, r4
   11bf0:	bl	10ae4 <strcmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	bne	11ca0 <__assert_fail@plt+0xfac>
   11bfc:	ldr	r3, [r5, #28]
   11c00:	cmp	r3, #0
   11c04:	bne	11d0c <__assert_fail@plt+0x1018>
   11c08:	mov	r3, #0
   11c0c:	ldr	r1, [pc, #516]	; 11e18 <__assert_fail@plt+0x1124>
   11c10:	mov	r2, #1
   11c14:	str	r1, [r5, #36]	; 0x24
   11c18:	strd	r2, [r5, #28]
   11c1c:	str	r3, [r5, #40]	; 0x28
   11c20:	b	11940 <__assert_fail@plt+0xc4c>
   11c24:	ldr	r0, [pc, #496]	; 11e1c <__assert_fail@plt+0x1128>
   11c28:	bl	10bbc <puts@plt>
   11c2c:	ldr	r3, [r5, #28]
   11c30:	ldr	r2, [r7, #8]
   11c34:	add	r3, r3, #1
   11c38:	cmp	r2, #0
   11c3c:	str	r3, [r5, #28]
   11c40:	beq	11bb4 <__assert_fail@plt+0xec0>
   11c44:	ldr	r3, [r5, #56]	; 0x38
   11c48:	cmp	r3, #0
   11c4c:	bne	11d68 <__assert_fail@plt+0x1074>
   11c50:	bl	10b80 <tmpfile64@plt>
   11c54:	cmp	r0, #0
   11c58:	str	r0, [r5, #56]	; 0x38
   11c5c:	bne	11bb4 <__assert_fail@plt+0xec0>
   11c60:	bl	10c28 <__errno_location@plt>
   11c64:	ldr	r0, [r0]
   11c68:	bl	10be0 <strerror@plt>
   11c6c:	mov	r1, r0
   11c70:	ldr	r0, [pc, #424]	; 11e20 <__assert_fail@plt+0x112c>
   11c74:	bl	10fd8 <__assert_fail@plt+0x2e4>
   11c78:	ldr	r0, [pc, #420]	; 11e24 <__assert_fail@plt+0x1130>
   11c7c:	bl	1105c <__assert_fail@plt+0x368>
   11c80:	b	11940 <__assert_fail@plt+0xc4c>
   11c84:	ldr	r3, [r5, #32]
   11c88:	cmp	r3, #0
   11c8c:	ldr	r3, [pc, #276]	; 11da8 <__assert_fail@plt+0x10b4>
   11c90:	bne	11d18 <__assert_fail@plt+0x1024>
   11c94:	ldr	r1, [pc, #360]	; 11e04 <__assert_fail@plt+0x1110>
   11c98:	mov	sl, r3
   11c9c:	b	11ba0 <__assert_fail@plt+0xeac>
   11ca0:	ldr	r1, [pc, #384]	; 11e28 <__assert_fail@plt+0x1134>
   11ca4:	mov	r0, r4
   11ca8:	bl	10ae4 <strcmp@plt>
   11cac:	cmp	r0, #0
   11cb0:	beq	11ce0 <__assert_fail@plt+0xfec>
   11cb4:	mov	r0, r4
   11cb8:	ldr	r1, [pc, #364]	; 11e2c <__assert_fail@plt+0x1138>
   11cbc:	bl	10ae4 <strcmp@plt>
   11cc0:	cmp	r0, #0
   11cc4:	beq	11ce0 <__assert_fail@plt+0xfec>
   11cc8:	ldr	r3, [r7]
   11ccc:	cmp	r3, #0
   11cd0:	beq	11940 <__assert_fail@plt+0xc4c>
   11cd4:	ldr	r0, [pc, #340]	; 11e30 <__assert_fail@plt+0x113c>
   11cd8:	bl	10bbc <puts@plt>
   11cdc:	b	11940 <__assert_fail@plt+0xc4c>
   11ce0:	ldr	r3, [r5, #28]
   11ce4:	cmp	r3, #0
   11ce8:	bne	11d0c <__assert_fail@plt+0x1018>
   11cec:	ldr	r1, [pc, #308]	; 11e28 <__assert_fail@plt+0x1134>
   11cf0:	ldr	r2, [pc, #308]	; 11e2c <__assert_fail@plt+0x1138>
   11cf4:	mov	r3, #1
   11cf8:	str	r1, [r5, #36]	; 0x24
   11cfc:	str	r2, [r5, #40]	; 0x28
   11d00:	str	r3, [r5, #28]
   11d04:	str	r3, [r5, #32]
   11d08:	b	11940 <__assert_fail@plt+0xc4c>
   11d0c:	ldr	r0, [pc, #288]	; 11e34 <__assert_fail@plt+0x1140>
   11d10:	bl	1105c <__assert_fail@plt+0x368>
   11d14:	b	11940 <__assert_fail@plt+0xc4c>
   11d18:	ldr	r1, [pc, #236]	; 11e0c <__assert_fail@plt+0x1118>
   11d1c:	mov	sl, r3
   11d20:	b	11ba0 <__assert_fail@plt+0xeac>
   11d24:	bl	10b5c <__stack_chk_fail@plt>
   11d28:	ldr	r3, [pc, #264]	; 11e38 <__assert_fail@plt+0x1144>
   11d2c:	mov	r2, #520	; 0x208
   11d30:	ldr	r1, [pc, #260]	; 11e3c <__assert_fail@plt+0x1148>
   11d34:	ldr	r0, [pc, #260]	; 11e40 <__assert_fail@plt+0x114c>
   11d38:	bl	10cf4 <__assert_fail@plt>
   11d3c:	bl	10c28 <__errno_location@plt>
   11d40:	ldr	r0, [r0]
   11d44:	bl	10be0 <strerror@plt>
   11d48:	mov	r1, r0
   11d4c:	ldr	r0, [pc, #240]	; 11e44 <__assert_fail@plt+0x1150>
   11d50:	bl	10fd8 <__assert_fail@plt+0x2e4>
   11d54:	ldr	r3, [pc, #236]	; 11e48 <__assert_fail@plt+0x1154>
   11d58:	mov	r2, #428	; 0x1ac
   11d5c:	ldr	r1, [pc, #216]	; 11e3c <__assert_fail@plt+0x1148>
   11d60:	ldr	r0, [pc, #228]	; 11e4c <__assert_fail@plt+0x1158>
   11d64:	bl	10cf4 <__assert_fail@plt>
   11d68:	ldr	r3, [pc, #200]	; 11e38 <__assert_fail@plt+0x1144>
   11d6c:	mov	r2, #536	; 0x218
   11d70:	ldr	r1, [pc, #196]	; 11e3c <__assert_fail@plt+0x1148>
   11d74:	ldr	r0, [pc, #208]	; 11e4c <__assert_fail@plt+0x1158>
   11d78:	bl	10cf4 <__assert_fail@plt>
   11d7c:	ldr	r3, [pc, #180]	; 11e38 <__assert_fail@plt+0x1144>
   11d80:	ldr	r2, [pc, #200]	; 11e50 <__assert_fail@plt+0x115c>
   11d84:	ldr	r1, [pc, #176]	; 11e3c <__assert_fail@plt+0x1148>
   11d88:	ldr	r0, [pc, #196]	; 11e54 <__assert_fail@plt+0x1160>
   11d8c:	bl	10cf4 <__assert_fail@plt>
   11d90:	andeq	r5, r2, ip, lsl r0
   11d94:	andeq	r4, r2, r0, lsr lr
   11d98:	andeq	r3, r1, r0, lsr fp
   11d9c:			; <UNDEFINED> instruction: 0x000138b8
   11da0:	andeq	r3, r1, r4, lsl #22
   11da4:	andeq	r3, r1, r0, lsl #23
   11da8:	strdeq	r4, [r1], -r8
   11dac:	muleq	r1, r0, fp
   11db0:	andeq	r3, r1, r4, asr #24
   11db4:	andeq	r3, r1, r4, asr sp
   11db8:	andeq	r3, r1, r0, ror #26
   11dbc:	andeq	r3, r1, ip, ror #26
   11dc0:	andeq	r3, r1, ip, ror sp
   11dc4:	andeq	r3, r1, r4, lsl #27
   11dc8:	andeq	r3, r1, ip, asr #22
   11dcc:	andeq	r3, r1, ip, asr fp
   11dd0:	andeq	r3, r1, ip, lsr #28
   11dd4:	andeq	r3, r1, r4, lsr lr
   11dd8:	andeq	r3, r1, r8, asr #28
   11ddc:	strdeq	r3, [r1], -r4
   11de0:	strdeq	r3, [r1], -ip
   11de4:	andeq	r3, r1, r0, asr ip
   11de8:	andeq	r3, r1, ip, lsr #26
   11dec:	andeq	r3, r1, r8, asr ip
   11df0:	andeq	r3, r1, r8, lsr sp
   11df4:	andeq	r3, r1, r4, lsl #28
   11df8:	ldrdeq	r3, [r1], -r0
   11dfc:	andeq	r3, r1, ip, lsr lr
   11e00:			; <UNDEFINED> instruction: 0x00013dbc
   11e04:	andeq	r3, r1, r4, lsr #22
   11e08:	andeq	r3, r1, ip, lsl fp
   11e0c:	andeq	r3, r1, r4, lsl fp
   11e10:	andeq	r3, r1, ip, asr #23
   11e14:	andeq	r3, r1, r4, ror #24
   11e18:	andeq	r3, r1, ip, ror ip
   11e1c:	andeq	r3, r1, r0, lsl #24
   11e20:	andeq	r3, r1, r4, lsr #24
   11e24:	muleq	r1, r8, sp
   11e28:	andeq	r3, r1, ip, asr #25
   11e2c:	andeq	r3, r1, r8, ror #25
   11e30:	andeq	r3, r1, r8, lsl #26
   11e34:	muleq	r1, r8, ip
   11e38:	andeq	r3, r1, r0, lsl #18
   11e3c:	andeq	r3, r1, r0, lsr r9
   11e40:			; <UNDEFINED> instruction: 0x00013bb4
   11e44:	andeq	r3, r1, r4, lsr #23
   11e48:	andeq	r3, r1, ip, lsl #18
   11e4c:	andeq	r3, r1, r4, lsl ip
   11e50:	andeq	r0, r0, r9, ror #3
   11e54:	andeq	r3, r1, ip, asr #18
   11e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e5c:	sub	sp, sp, #5056	; 0x13c0
   11e60:	ldr	r3, [pc, #992]	; 12248 <__assert_fail@plt+0x1554>
   11e64:	sub	sp, sp, #28
   11e68:	add	ip, sp, #5056	; 0x13c0
   11e6c:	ldr	r3, [r3]
   11e70:	add	ip, ip, #20
   11e74:	mov	r2, #64	; 0x40
   11e78:	mov	r1, #0
   11e7c:	mov	r6, r0
   11e80:	add	r0, sp, #12
   11e84:	str	r3, [ip]
   11e88:	bl	10c40 <memset@plt>
   11e8c:	add	r1, sp, #12
   11e90:	ldr	r0, [pc, #948]	; 1224c <__assert_fail@plt+0x1558>
   11e94:	bl	126a8 <__assert_fail@plt+0x19b4>
   11e98:	subs	r7, r0, #0
   11e9c:	beq	1222c <__assert_fail@plt+0x1538>
   11ea0:	mov	r8, #0
   11ea4:	ldr	r5, [pc, #932]	; 12250 <__assert_fail@plt+0x155c>
   11ea8:	ldr	sl, [pc, #932]	; 12254 <__assert_fail@plt+0x1560>
   11eac:	ldr	r9, [pc, #932]	; 12258 <__assert_fail@plt+0x1564>
   11eb0:	mov	r4, r8
   11eb4:	mov	r2, r6
   11eb8:	ldr	r1, [pc, #924]	; 1225c <__assert_fail@plt+0x1568>
   11ebc:	add	r0, sp, #76	; 0x4c
   11ec0:	bl	10b08 <fgets@plt>
   11ec4:	cmp	r0, #0
   11ec8:	beq	12198 <__assert_fail@plt+0x14a4>
   11ecc:	add	r4, r4, #1
   11ed0:	cmp	r4, #1
   11ed4:	beq	120a4 <__assert_fail@plt+0x13b0>
   11ed8:	add	r0, sp, #76	; 0x4c
   11edc:	bl	10c10 <strlen@plt>
   11ee0:	subs	fp, r0, #0
   11ee4:	beq	11f0c <__assert_fail@plt+0x1218>
   11ee8:	sub	r2, fp, #1
   11eec:	add	r3, sp, #984	; 0x3d8
   11ef0:	add	r3, r3, r2
   11ef4:	ldrb	r1, [r3, #-908]	; 0xfffffc74
   11ef8:	cmp	r1, #10
   11efc:	moveq	r1, #0
   11f00:	moveq	fp, r2
   11f04:	strbeq	r1, [r3, #-908]	; 0xfffffc74
   11f08:	beq	11f18 <__assert_fail@plt+0x1224>
   11f0c:	mov	r1, r4
   11f10:	ldr	r0, [pc, #840]	; 12260 <__assert_fail@plt+0x156c>
   11f14:	bl	1105c <__assert_fail@plt+0x368>
   11f18:	cmp	fp, #0
   11f1c:	beq	11f44 <__assert_fail@plt+0x1250>
   11f20:	sub	r2, fp, #1
   11f24:	add	r3, sp, #984	; 0x3d8
   11f28:	add	r3, r3, r2
   11f2c:	ldrb	r1, [r3, #-908]	; 0xfffffc74
   11f30:	cmp	r1, #13
   11f34:	moveq	r1, #0
   11f38:	moveq	fp, r2
   11f3c:	strbeq	r1, [r3, #-908]	; 0xfffffc74
   11f40:	beq	11f58 <__assert_fail@plt+0x1264>
   11f44:	ldr	r3, [r5]
   11f48:	cmp	r3, #0
   11f4c:	beq	11f58 <__assert_fail@plt+0x1264>
   11f50:	cmp	r8, #0
   11f54:	beq	12144 <__assert_fail@plt+0x1450>
   11f58:	mov	r2, fp
   11f5c:	add	r1, sp, #76	; 0x4c
   11f60:	mov	r0, r7
   11f64:	bl	13208 <__assert_fail@plt+0x2514>
   11f68:	cmp	r0, #0
   11f6c:	bne	12214 <__assert_fail@plt+0x1520>
   11f70:	ldr	r1, [sp, #60]	; 0x3c
   11f74:	cmp	r1, #0
   11f78:	beq	11fe4 <__assert_fail@plt+0x12f0>
   11f7c:	ldr	r3, [r5, #4]
   11f80:	cmp	r3, #0
   11f84:	beq	11fa8 <__assert_fail@plt+0x12b4>
   11f88:	ldr	r0, [pc, #724]	; 12264 <__assert_fail@plt+0x1570>
   11f8c:	cmp	r1, #2
   11f90:	ldr	r2, [pc, #720]	; 12268 <__assert_fail@plt+0x1574>
   11f94:	add	r3, sp, #76	; 0x4c
   11f98:	moveq	r2, r0
   11f9c:	ldr	r1, [pc, #712]	; 1226c <__assert_fail@plt+0x1578>
   11fa0:	mov	r0, #1
   11fa4:	bl	10c4c <__printf_chk@plt>
   11fa8:	ldr	r3, [r5, #8]
   11fac:	cmp	r3, #0
   11fb0:	beq	11fdc <__assert_fail@plt+0x12e8>
   11fb4:	ldr	r2, [sp, #60]	; 0x3c
   11fb8:	ldr	r1, [sp, #64]	; 0x40
   11fbc:	cmp	r2, #2
   11fc0:	beq	12180 <__assert_fail@plt+0x148c>
   11fc4:	add	r0, sp, #76	; 0x4c
   11fc8:	bl	10cac <fputs@plt>
   11fcc:	ldr	r0, [sp, #64]	; 0x40
   11fd0:	bl	10b14 <ferror@plt>
   11fd4:	cmp	r0, #0
   11fd8:	bne	12118 <__assert_fail@plt+0x1424>
   11fdc:	mov	r3, #2
   11fe0:	str	r3, [sp, #60]	; 0x3c
   11fe4:	ldr	r1, [sp, #68]	; 0x44
   11fe8:	cmp	r1, #0
   11fec:	beq	12040 <__assert_fail@plt+0x134c>
   11ff0:	ldr	r3, [r5, #8]
   11ff4:	cmp	r3, #0
   11ff8:	beq	12040 <__assert_fail@plt+0x134c>
   11ffc:	ldr	r3, [sp, #72]	; 0x48
   12000:	cmp	r3, #0
   12004:	beq	120ec <__assert_fail@plt+0x13f8>
   12008:	add	r0, sp, #12
   1200c:	bl	110fc <__assert_fail@plt+0x408>
   12010:	ldr	r0, [sp, #64]	; 0x40
   12014:	cmp	r0, #0
   12018:	beq	12020 <__assert_fail@plt+0x132c>
   1201c:	bl	10c70 <fclose@plt>
   12020:	mov	fp, #0
   12024:	ldr	r0, [sp, #68]	; 0x44
   12028:	str	fp, [sp, #64]	; 0x40
   1202c:	bl	10c70 <fclose@plt>
   12030:	str	fp, [sp, #68]	; 0x44
   12034:	str	fp, [sp, #40]	; 0x28
   12038:	str	fp, [sp, #44]	; 0x2c
   1203c:	str	fp, [sp, #36]	; 0x24
   12040:	ldr	r3, [sp, #28]
   12044:	cmp	r3, #0
   12048:	beq	12060 <__assert_fail@plt+0x136c>
   1204c:	ldr	r3, [r5, #12]
   12050:	cmp	r3, #0
   12054:	beq	12130 <__assert_fail@plt+0x143c>
   12058:	mov	r3, #0
   1205c:	str	r3, [sp, #28]
   12060:	ldr	r3, [sp, #20]
   12064:	cmp	r3, #0
   12068:	subne	r3, r3, #1
   1206c:	strne	r3, [sp, #20]
   12070:	bne	11eb4 <__assert_fail@plt+0x11c0>
   12074:	ldr	r3, [sp, #16]
   12078:	cmp	r3, #0
   1207c:	beq	120c0 <__assert_fail@plt+0x13cc>
   12080:	ldr	r3, [sp, #24]
   12084:	cmp	r3, #0
   12088:	beq	12158 <__assert_fail@plt+0x1464>
   1208c:	ldr	r3, [r5]
   12090:	cmp	r3, #0
   12094:	bne	1216c <__assert_fail@plt+0x1478>
   12098:	mov	r3, #0
   1209c:	str	r3, [sp, #24]
   120a0:	b	11eb4 <__assert_fail@plt+0x11c0>
   120a4:	mov	r2, #5
   120a8:	ldr	r1, [pc, #448]	; 12270 <__assert_fail@plt+0x157c>
   120ac:	add	r0, sp, #76	; 0x4c
   120b0:	bl	10cb8 <strncmp@plt>
   120b4:	cmp	r0, #0
   120b8:	bne	11ed8 <__assert_fail@plt+0x11e4>
   120bc:	b	11eb4 <__assert_fail@plt+0x11c0>
   120c0:	ldr	r3, [sp, #12]
   120c4:	cmp	r3, #0
   120c8:	beq	11eb4 <__assert_fail@plt+0x11c0>
   120cc:	ldr	r3, [r5, #12]
   120d0:	cmp	r3, #0
   120d4:	bne	11eb4 <__assert_fail@plt+0x11c0>
   120d8:	add	r2, sp, #76	; 0x4c
   120dc:	ldr	r1, [pc, #400]	; 12274 <__assert_fail@plt+0x1580>
   120e0:	mov	r0, #1
   120e4:	bl	10c4c <__printf_chk@plt>
   120e8:	b	11eb4 <__assert_fail@plt+0x11c0>
   120ec:	add	r0, sp, #76	; 0x4c
   120f0:	bl	10cac <fputs@plt>
   120f4:	ldr	r3, [sp, #68]	; 0x44
   120f8:	mov	r2, #2
   120fc:	mov	r1, #1
   12100:	mov	r0, r9
   12104:	bl	10b8c <fwrite@plt>
   12108:	ldr	r0, [sp, #68]	; 0x44
   1210c:	bl	10b14 <ferror@plt>
   12110:	cmp	r0, #0
   12114:	beq	12040 <__assert_fail@plt+0x134c>
   12118:	bl	10c28 <__errno_location@plt>
   1211c:	ldr	r0, [r0]
   12120:	bl	10be0 <strerror@plt>
   12124:	mov	r1, r0
   12128:	ldr	r0, [pc, #328]	; 12278 <__assert_fail@plt+0x1584>
   1212c:	bl	10fd8 <__assert_fail@plt+0x2e4>
   12130:	add	r2, sp, #76	; 0x4c
   12134:	mov	r1, sl
   12138:	mov	r0, #1
   1213c:	bl	10c4c <__printf_chk@plt>
   12140:	b	12058 <__assert_fail@plt+0x1364>
   12144:	mov	r1, r4
   12148:	ldr	r0, [pc, #300]	; 1227c <__assert_fail@plt+0x1588>
   1214c:	bl	1105c <__assert_fail@plt+0x368>
   12150:	mov	r8, #1
   12154:	b	11f58 <__assert_fail@plt+0x1264>
   12158:	add	r2, sp, #76	; 0x4c
   1215c:	ldr	r1, [pc, #284]	; 12280 <__assert_fail@plt+0x158c>
   12160:	mov	r0, #1
   12164:	bl	10c4c <__printf_chk@plt>
   12168:	b	11eb4 <__assert_fail@plt+0x11c0>
   1216c:	add	r2, sp, #76	; 0x4c
   12170:	ldr	r1, [pc, #268]	; 12284 <__assert_fail@plt+0x1590>
   12174:	mov	r0, #1
   12178:	bl	10c4c <__printf_chk@plt>
   1217c:	b	12098 <__assert_fail@plt+0x13a4>
   12180:	mov	r3, r1
   12184:	mov	r0, r9
   12188:	mov	r1, #1
   1218c:	bl	10b8c <fwrite@plt>
   12190:	ldr	r1, [sp, #64]	; 0x40
   12194:	b	11fc4 <__assert_fail@plt+0x12d0>
   12198:	ldr	r2, [sp, #68]	; 0x44
   1219c:	cmp	r2, #0
   121a0:	beq	121b4 <__assert_fail@plt+0x14c0>
   121a4:	ldr	r2, [pc, #164]	; 12250 <__assert_fail@plt+0x155c>
   121a8:	ldr	r2, [r2, #8]
   121ac:	cmp	r2, #0
   121b0:	bne	121e4 <__assert_fail@plt+0x14f0>
   121b4:	mov	r0, r7
   121b8:	bl	1279c <__assert_fail@plt+0x1aa8>
   121bc:	add	r3, sp, #5056	; 0x13c0
   121c0:	add	r3, r3, #20
   121c4:	ldr	r2, [r3]
   121c8:	ldr	r3, [pc, #120]	; 12248 <__assert_fail@plt+0x1554>
   121cc:	ldr	r3, [r3]
   121d0:	cmp	r2, r3
   121d4:	bne	12244 <__assert_fail@plt+0x1550>
   121d8:	add	sp, sp, #5056	; 0x13c0
   121dc:	add	sp, sp, #28
   121e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e4:	ldr	r2, [sp, #36]	; 0x24
   121e8:	cmp	r2, #0
   121ec:	beq	121b4 <__assert_fail@plt+0x14c0>
   121f0:	str	r0, [sp, #4]
   121f4:	add	r0, sp, #12
   121f8:	bl	110fc <__assert_fail@plt+0x408>
   121fc:	ldr	r0, [sp, #68]	; 0x44
   12200:	bl	10c70 <fclose@plt>
   12204:	ldr	r3, [sp, #4]
   12208:	str	r3, [sp, #68]	; 0x44
   1220c:	str	r3, [sp, #36]	; 0x24
   12210:	b	121b4 <__assert_fail@plt+0x14c0>
   12214:	bl	10c28 <__errno_location@plt>
   12218:	ldr	r0, [r0]
   1221c:	bl	10be0 <strerror@plt>
   12220:	mov	r1, r0
   12224:	ldr	r0, [pc, #92]	; 12288 <__assert_fail@plt+0x1594>
   12228:	bl	10fd8 <__assert_fail@plt+0x2e4>
   1222c:	bl	10c28 <__errno_location@plt>
   12230:	ldr	r0, [r0]
   12234:	bl	10be0 <strerror@plt>
   12238:	mov	r1, r0
   1223c:	ldr	r0, [pc, #72]	; 1228c <__assert_fail@plt+0x1598>
   12240:	bl	10fd8 <__assert_fail@plt+0x2e4>
   12244:	bl	10b5c <__stack_chk_fail@plt>
   12248:	andeq	r4, r2, r0, lsr lr
   1224c:	andeq	r1, r1, ip, asr r7
   12250:	andeq	r5, r2, ip, lsl r0
   12254:	andeq	r3, r1, r0, lsr pc
   12258:	andeq	r3, r1, r8, lsl #30
   1225c:	andeq	r1, r0, r8, lsl #7
   12260:	andeq	r3, r1, r0, lsl #29
   12264:	andeq	r3, r1, r8, asr lr
   12268:	strdeq	r4, [r1], -r8
   1226c:	strdeq	r3, [r1], -r4
   12270:	andeq	r3, r1, r8, ror lr
   12274:	andeq	r3, r1, ip, asr #30
   12278:	andeq	r3, r1, ip, lsl #30
   1227c:			; <UNDEFINED> instruction: 0x00013eb4
   12280:	andeq	r3, r1, r4, asr #30
   12284:	andeq	r3, r1, r8, lsr pc
   12288:	andeq	r3, r1, r0, ror #29
   1228c:	andeq	r3, r1, r0, ror #28
   12290:	push	{r4, r5, r6, lr}
   12294:	ldr	r4, [r0, #4]
   12298:	cmp	r4, #0
   1229c:	beq	122e8 <__assert_fail@plt+0x15f4>
   122a0:	cmp	r4, r1
   122a4:	mov	r5, r1
   122a8:	mov	r6, r0
   122ac:	bne	122bc <__assert_fail@plt+0x15c8>
   122b0:	b	122f0 <__assert_fail@plt+0x15fc>
   122b4:	cmp	r5, r4
   122b8:	beq	122f0 <__assert_fail@plt+0x15fc>
   122bc:	ldr	r3, [r4, #4]
   122c0:	mov	r0, r4
   122c4:	cmp	r3, #0
   122c8:	mov	r1, r5
   122cc:	beq	122dc <__assert_fail@plt+0x15e8>
   122d0:	bl	12290 <__assert_fail@plt+0x159c>
   122d4:	cmp	r0, #0
   122d8:	bne	122fc <__assert_fail@plt+0x1608>
   122dc:	ldr	r4, [r4]
   122e0:	cmp	r4, #0
   122e4:	bne	122b4 <__assert_fail@plt+0x15c0>
   122e8:	mov	r0, r4
   122ec:	pop	{r4, r5, r6, pc}
   122f0:	mov	r4, r6
   122f4:	mov	r0, r4
   122f8:	pop	{r4, r5, r6, pc}
   122fc:	mov	r4, r0
   12300:	mov	r0, r4
   12304:	pop	{r4, r5, r6, pc}
   12308:	push	{r4, r5, r6, lr}
   1230c:	subs	r5, r0, #0
   12310:	popeq	{r4, r5, r6, pc}
   12314:	ldr	r0, [r5, #4]
   12318:	ldr	r6, [r5]
   1231c:	cmp	r0, #0
   12320:	beq	12328 <__assert_fail@plt+0x1634>
   12324:	bl	12308 <__assert_fail@plt+0x1614>
   12328:	ldr	r0, [r5, #8]
   1232c:	cmp	r0, #0
   12330:	beq	12344 <__assert_fail@plt+0x1650>
   12334:	ldr	r4, [r0]
   12338:	bl	10afc <free@plt>
   1233c:	subs	r0, r4, #0
   12340:	bne	12334 <__assert_fail@plt+0x1640>
   12344:	ldr	r0, [r5, #16]
   12348:	bl	10afc <free@plt>
   1234c:	mov	r0, r5
   12350:	bl	10afc <free@plt>
   12354:	subs	r5, r6, #0
   12358:	bne	12314 <__assert_fail@plt+0x1620>
   1235c:	pop	{r4, r5, r6, pc}
   12360:	push	{r4, r5, r6, r7, r8, lr}
   12364:	mov	r8, r0
   12368:	add	r0, r2, #16
   1236c:	mov	r5, r2
   12370:	mov	r7, r1
   12374:	bl	10bc8 <malloc@plt>
   12378:	subs	r4, r0, #0
   1237c:	beq	123b0 <__assert_fail@plt+0x16bc>
   12380:	mov	r6, #0
   12384:	cmp	r7, #0
   12388:	stm	r4, {r6, r8}
   1238c:	str	r6, [r4, #8]
   12390:	strb	r6, [r4, #12]
   12394:	beq	123b0 <__assert_fail@plt+0x16bc>
   12398:	mov	r2, r5
   1239c:	add	r5, r4, r5
   123a0:	mov	r1, r7
   123a4:	add	r0, r4, #12
   123a8:	bl	10b20 <memcpy@plt>
   123ac:	strb	r6, [r5, #12]
   123b0:	mov	r0, r4
   123b4:	pop	{r4, r5, r6, r7, r8, pc}
   123b8:	cmp	r0, #0
   123bc:	bxeq	lr
   123c0:	push	{r4, lr}
   123c4:	ldr	r4, [r0]
   123c8:	bl	10afc <free@plt>
   123cc:	subs	r0, r4, #0
   123d0:	bne	123c4 <__assert_fail@plt+0x16d0>
   123d4:	pop	{r4, pc}
   123d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123dc:	subs	r6, r0, #0
   123e0:	beq	124ac <__assert_fail@plt+0x17b8>
   123e4:	mov	r0, r1
   123e8:	mov	r9, r2
   123ec:	mov	r7, r1
   123f0:	bl	10c10 <strlen@plt>
   123f4:	subs	r5, r0, #0
   123f8:	moveq	r8, r5
   123fc:	bne	124b4 <__assert_fail@plt+0x17c0>
   12400:	ldr	r4, [r6, #8]
   12404:	cmp	r4, #0
   12408:	beq	124a8 <__assert_fail@plt+0x17b4>
   1240c:	mov	r6, #0
   12410:	mov	sl, r6
   12414:	b	12464 <__assert_fail@plt+0x1770>
   12418:	cmp	r0, r5
   1241c:	movcc	r0, #0
   12420:	movcs	r0, #1
   12424:	cmp	r0, #0
   12428:	beq	12458 <__assert_fail@plt+0x1764>
   1242c:	mov	r0, fp
   12430:	mov	r2, r5
   12434:	mov	r1, r7
   12438:	bl	10b44 <memcmp@plt>
   1243c:	cmp	r0, #0
   12440:	bne	12458 <__assert_fail@plt+0x1764>
   12444:	cmn	r9, #1
   12448:	add	sl, sl, #1
   1244c:	beq	124d0 <__assert_fail@plt+0x17dc>
   12450:	cmp	sl, r9
   12454:	beq	124a8 <__assert_fail@plt+0x17b4>
   12458:	ldr	r4, [r4]
   1245c:	cmp	r4, #0
   12460:	beq	124ac <__assert_fail@plt+0x17b8>
   12464:	ldr	r3, [r4, #4]
   12468:	cmp	r3, #0
   1246c:	bne	12458 <__assert_fail@plt+0x1764>
   12470:	add	fp, r4, #8
   12474:	mov	r0, fp
   12478:	mov	r1, #58	; 0x3a
   1247c:	bl	10c1c <strchr@plt>
   12480:	cmp	r0, #0
   12484:	beq	12458 <__assert_fail@plt+0x1764>
   12488:	subs	r0, r0, fp
   1248c:	beq	12458 <__assert_fail@plt+0x1764>
   12490:	cmp	r8, #0
   12494:	bne	12418 <__assert_fail@plt+0x1724>
   12498:	sub	r0, r0, r5
   1249c:	clz	r0, r0
   124a0:	lsr	r0, r0, #5
   124a4:	b	12424 <__assert_fail@plt+0x1730>
   124a8:	mov	r6, r4
   124ac:	mov	r0, r6
   124b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b4:	sub	r3, r5, #1
   124b8:	ldrb	r2, [r7, r3]
   124bc:	cmp	r2, #42	; 0x2a
   124c0:	moveq	r5, r3
   124c4:	moveq	r8, #1
   124c8:	movne	r8, #0
   124cc:	b	12400 <__assert_fail@plt+0x170c>
   124d0:	mov	r6, r4
   124d4:	b	12458 <__assert_fail@plt+0x1764>
   124d8:	push	{r4, r5, r6, lr}
   124dc:	mov	r1, #58	; 0x3a
   124e0:	mov	r5, r0
   124e4:	bl	10c1c <strchr@plt>
   124e8:	cmp	r0, #0
   124ec:	subne	r4, r0, r5
   124f0:	beq	12530 <__assert_fail@plt+0x183c>
   124f4:	cmp	r4, #0
   124f8:	beq	12510 <__assert_fail@plt+0x181c>
   124fc:	ldr	r1, [pc, #60]	; 12540 <__assert_fail@plt+0x184c>
   12500:	mov	r0, r5
   12504:	bl	10ce8 <strspn@plt>
   12508:	cmp	r0, r4
   1250c:	beq	12518 <__assert_fail@plt+0x1824>
   12510:	mov	r0, #0
   12514:	pop	{r4, r5, r6, pc}
   12518:	ldrb	r1, [r5]
   1251c:	ldr	r0, [pc, #32]	; 12544 <__assert_fail@plt+0x1850>
   12520:	bl	10c1c <strchr@plt>
   12524:	clz	r0, r0
   12528:	lsr	r0, r0, #5
   1252c:	pop	{r4, r5, r6, pc}
   12530:	mov	r0, r5
   12534:	bl	10c10 <strlen@plt>
   12538:	mov	r4, r0
   1253c:	b	124f4 <__assert_fail@plt+0x1800>
   12540:	andeq	r4, r1, ip, lsl #6
   12544:	andeq	r4, r1, r0, asr r3
   12548:	ldr	r3, [pc, #340]	; 126a4 <__assert_fail@plt+0x19b0>
   1254c:	push	{r4, r5, r6, r7, lr}
   12550:	cmp	r0, r3
   12554:	mov	ip, r0
   12558:	beq	12654 <__assert_fail@plt+0x1960>
   1255c:	ldrb	r2, [r0]
   12560:	cmp	r2, #0
   12564:	popeq	{r4, r5, r6, r7, pc}
   12568:	mov	r0, r3
   1256c:	mov	lr, ip
   12570:	mov	r1, r2
   12574:	mov	r3, #77	; 0x4d
   12578:	b	12584 <__assert_fail@plt+0x1890>
   1257c:	cmp	r3, #0
   12580:	beq	12674 <__assert_fail@plt+0x1980>
   12584:	cmp	r3, r1
   12588:	sub	r5, r1, #97	; 0x61
   1258c:	beq	125b4 <__assert_fail@plt+0x18c0>
   12590:	cmp	r5, #25
   12594:	sub	r6, r3, #97	; 0x61
   12598:	mov	r4, r1
   1259c:	bicls	r4, r1, #32
   125a0:	cmp	r6, #25
   125a4:	bicls	r3, r3, #32
   125a8:	cmp	r3, r4
   125ac:	mov	r7, r1
   125b0:	bne	12648 <__assert_fail@plt+0x1954>
   125b4:	ldrb	r1, [lr, #1]!
   125b8:	ldrb	r3, [r0, #1]!
   125bc:	cmp	r1, #0
   125c0:	bne	1257c <__assert_fail@plt+0x1888>
   125c4:	cmp	r3, #0
   125c8:	beq	12654 <__assert_fail@plt+0x1960>
   125cc:	sub	r0, r3, #97	; 0x61
   125d0:	cmp	r0, #25
   125d4:	movls	r7, r1
   125d8:	bhi	125e8 <__assert_fail@plt+0x18f4>
   125dc:	bic	r1, r3, #32
   125e0:	cmp	r1, r7
   125e4:	beq	12654 <__assert_fail@plt+0x1960>
   125e8:	cmp	r2, #58	; 0x3a
   125ec:	popeq	{r4, r5, r6, r7, pc}
   125f0:	mov	r3, #1
   125f4:	b	1261c <__assert_fail@plt+0x1928>
   125f8:	cmp	r0, #25
   125fc:	mov	r3, #0
   12600:	sub	r2, r2, #32
   12604:	bhi	1260c <__assert_fail@plt+0x1918>
   12608:	strb	r2, [ip]
   1260c:	ldrb	r2, [ip, #1]!
   12610:	cmp	r2, #0
   12614:	cmpne	r2, #58	; 0x3a
   12618:	popeq	{r4, r5, r6, r7, pc}
   1261c:	cmp	r2, #45	; 0x2d
   12620:	moveq	r3, #1
   12624:	beq	1260c <__assert_fail@plt+0x1918>
   12628:	cmp	r3, #0
   1262c:	sub	r0, r2, #97	; 0x61
   12630:	sub	r1, r2, #65	; 0x41
   12634:	bne	125f8 <__assert_fail@plt+0x1904>
   12638:	cmp	r1, #25
   1263c:	add	r2, r2, #32
   12640:	bhi	1260c <__assert_fail@plt+0x1918>
   12644:	b	12608 <__assert_fail@plt+0x1914>
   12648:	ldrb	r3, [r0]
   1264c:	cmp	r3, r1
   12650:	bne	12698 <__assert_fail@plt+0x19a4>
   12654:	ldr	r3, [pc, #72]	; 126a4 <__assert_fail@plt+0x19b0>
   12658:	ldm	r3!, {r0, r1, r2}
   1265c:	ldrb	r3, [r3]
   12660:	str	r0, [ip]
   12664:	str	r1, [ip, #4]
   12668:	strb	r3, [ip, #12]
   1266c:	str	r2, [ip, #8]
   12670:	pop	{r4, r5, r6, r7, pc}
   12674:	sub	r0, r1, #97	; 0x61
   12678:	cmp	r0, #25
   1267c:	bhi	125e8 <__assert_fail@plt+0x18f4>
   12680:	bic	r7, r1, #32
   12684:	sub	r1, r3, #97	; 0x61
   12688:	cmp	r1, #25
   1268c:	mov	r1, r3
   12690:	bls	125dc <__assert_fail@plt+0x18e8>
   12694:	b	125e0 <__assert_fail@plt+0x18ec>
   12698:	cmp	r5, #25
   1269c:	bls	12680 <__assert_fail@plt+0x198c>
   126a0:	b	12684 <__assert_fail@plt+0x1990>
   126a4:	andeq	r4, r1, ip, asr r3
   126a8:	push	{r4, r5, r6, r7, r8, lr}
   126ac:	mov	r6, r0
   126b0:	mov	r7, r1
   126b4:	mov	r0, #1
   126b8:	mov	r1, #32
   126bc:	bl	10ad8 <calloc@plt>
   126c0:	subs	r4, r0, #0
   126c4:	beq	12734 <__assert_fail@plt+0x1a40>
   126c8:	mov	r1, #20
   126cc:	mov	r0, #1
   126d0:	bl	10ad8 <calloc@plt>
   126d4:	subs	r5, r0, #0
   126d8:	beq	1273c <__assert_fail@plt+0x1a48>
   126dc:	add	r3, r5, #8
   126e0:	cmp	r6, #0
   126e4:	str	r5, [r4, #24]
   126e8:	str	r5, [r4, #20]
   126ec:	strd	r6, [r4]
   126f0:	str	r3, [r5, #12]
   126f4:	beq	12734 <__assert_fail@plt+0x1a40>
   126f8:	ldr	r5, [r4, #8]
   126fc:	cmp	r5, #0
   12700:	bne	12734 <__assert_fail@plt+0x1a40>
   12704:	mov	r0, r7
   12708:	mov	r2, r4
   1270c:	mov	r1, #1
   12710:	blx	r6
   12714:	cmp	r0, #0
   12718:	beq	12734 <__assert_fail@plt+0x1a40>
   1271c:	str	r0, [r4, #8]
   12720:	ldr	r0, [r4, #20]
   12724:	bl	12308 <__assert_fail@plt+0x1614>
   12728:	mov	r0, r4
   1272c:	bl	10afc <free@plt>
   12730:	mov	r4, r5
   12734:	mov	r0, r4
   12738:	pop	{r4, r5, r6, r7, r8, pc}
   1273c:	mov	r0, r4
   12740:	bl	10afc <free@plt>
   12744:	mov	r4, r5
   12748:	b	12734 <__assert_fail@plt+0x1a40>
   1274c:	push	{r4, lr}
   12750:	subs	r4, r0, #0
   12754:	popeq	{r4, pc}
   12758:	ldr	r3, [r4]
   1275c:	cmp	r3, #0
   12760:	beq	12788 <__assert_fail@plt+0x1a94>
   12764:	ldr	r2, [r4, #8]
   12768:	cmp	r2, #0
   1276c:	bne	12788 <__assert_fail@plt+0x1a94>
   12770:	mov	r2, r4
   12774:	mov	r1, #3
   12778:	ldr	r0, [r4, #4]
   1277c:	blx	r3
   12780:	cmp	r0, #0
   12784:	strne	r0, [r4, #8]
   12788:	ldr	r0, [r4, #20]
   1278c:	bl	12308 <__assert_fail@plt+0x1614>
   12790:	mov	r0, r4
   12794:	pop	{r4, lr}
   12798:	b	10afc <free@plt>
   1279c:	push	{r4, lr}
   127a0:	subs	r4, r0, #0
   127a4:	popeq	{r4, pc}
   127a8:	ldr	r3, [r4]
   127ac:	cmp	r3, #0
   127b0:	beq	127d8 <__assert_fail@plt+0x1ae4>
   127b4:	ldr	r2, [r4, #8]
   127b8:	cmp	r2, #0
   127bc:	bne	127d8 <__assert_fail@plt+0x1ae4>
   127c0:	mov	r2, r4
   127c4:	mov	r1, #2
   127c8:	ldr	r0, [r4, #4]
   127cc:	blx	r3
   127d0:	cmp	r0, #0
   127d4:	strne	r0, [r4, #8]
   127d8:	ldr	r0, [r4, #20]
   127dc:	bl	12308 <__assert_fail@plt+0x1614>
   127e0:	mov	r0, r4
   127e4:	pop	{r4, lr}
   127e8:	b	10afc <free@plt>
   127ec:	ldr	r3, [r0]
   127f0:	cmp	r3, #0
   127f4:	beq	12828 <__assert_fail@plt+0x1b34>
   127f8:	ldr	r2, [r0, #8]
   127fc:	cmp	r2, #0
   12800:	bne	12828 <__assert_fail@plt+0x1b34>
   12804:	push	{r4, lr}
   12808:	mov	r2, r0
   1280c:	mov	r4, r0
   12810:	mov	r1, #5
   12814:	ldr	r0, [r0, #4]
   12818:	blx	r3
   1281c:	cmp	r0, #0
   12820:	strne	r0, [r4, #8]
   12824:	pop	{r4, pc}
   12828:	mov	r0, #0
   1282c:	bx	lr
   12830:	push	{r4, r5, r6, r7, r8, lr}
   12834:	mov	r5, r3
   12838:	ldr	r0, [r0, #24]
   1283c:	bl	123d8 <__assert_fail@plt+0x16e4>
   12840:	subs	r8, r0, #0
   12844:	beq	12950 <__assert_fail@plt+0x1c5c>
   12848:	add	r7, r8, #8
   1284c:	mov	r0, r7
   12850:	bl	10c10 <strlen@plt>
   12854:	ldr	r4, [r8]
   12858:	cmp	r4, #0
   1285c:	add	r6, r0, #1
   12860:	bne	12884 <__assert_fail@plt+0x1b90>
   12864:	b	12890 <__assert_fail@plt+0x1b9c>
   12868:	add	r0, r4, #8
   1286c:	bl	10c10 <strlen@plt>
   12870:	ldr	r4, [r4]
   12874:	cmp	r4, #0
   12878:	add	r0, r0, #1
   1287c:	add	r6, r6, r0
   12880:	beq	12890 <__assert_fail@plt+0x1b9c>
   12884:	ldr	r3, [r4, #4]
   12888:	cmp	r3, #0
   1288c:	bne	12868 <__assert_fail@plt+0x1b74>
   12890:	mov	r0, r6
   12894:	bl	10bc8 <malloc@plt>
   12898:	subs	r4, r0, #0
   1289c:	beq	128ec <__assert_fail@plt+0x1bf8>
   128a0:	mov	r1, r7
   128a4:	bl	10b50 <stpcpy@plt>
   128a8:	mov	r7, #10
   128ac:	strb	r7, [r0], #1
   128b0:	ldr	r6, [r8]
   128b4:	cmp	r6, #0
   128b8:	bne	128d8 <__assert_fail@plt+0x1be4>
   128bc:	b	128e4 <__assert_fail@plt+0x1bf0>
   128c0:	add	r1, r6, #8
   128c4:	bl	10b50 <stpcpy@plt>
   128c8:	strb	r7, [r0], #1
   128cc:	ldr	r6, [r6]
   128d0:	cmp	r6, #0
   128d4:	beq	128e4 <__assert_fail@plt+0x1bf0>
   128d8:	ldr	r3, [r6, #4]
   128dc:	cmp	r3, #0
   128e0:	bne	128c0 <__assert_fail@plt+0x1bcc>
   128e4:	mov	r3, #0
   128e8:	strb	r3, [r0, #-1]
   128ec:	cmp	r5, #0
   128f0:	beq	12948 <__assert_fail@plt+0x1c54>
   128f4:	mov	r1, #58	; 0x3a
   128f8:	mov	r0, r4
   128fc:	bl	10c1c <strchr@plt>
   12900:	cmp	r0, #0
   12904:	beq	12944 <__assert_fail@plt+0x1c50>
   12908:	ldrb	r3, [r0, #1]
   1290c:	add	r0, r0, #1
   12910:	b	12918 <__assert_fail@plt+0x1c24>
   12914:	ldrb	r3, [r0, #1]!
   12918:	cmp	r3, #32
   1291c:	cmpne	r3, #13
   12920:	moveq	r2, #1
   12924:	movne	r2, #0
   12928:	sub	r3, r3, #9
   1292c:	cmp	r3, #1
   12930:	movhi	r3, r2
   12934:	orrls	r3, r2, #1
   12938:	cmp	r3, #0
   1293c:	bne	12914 <__assert_fail@plt+0x1c20>
   12940:	sub	r0, r0, r4
   12944:	str	r0, [r5]
   12948:	mov	r0, r4
   1294c:	pop	{r4, r5, r6, r7, r8, pc}
   12950:	bl	10c28 <__errno_location@plt>
   12954:	mov	r4, r8
   12958:	str	r8, [r0]
   1295c:	b	12948 <__assert_fail@plt+0x1c54>
   12960:	subs	r3, r0, #0
   12964:	beq	129b4 <__assert_fail@plt+0x1cc0>
   12968:	ldr	r2, [r1]
   1296c:	cmp	r2, r3
   12970:	beq	129b4 <__assert_fail@plt+0x1cc0>
   12974:	ldr	r0, [r3, #24]
   12978:	cmp	r0, #0
   1297c:	bxeq	lr
   12980:	cmp	r2, #0
   12984:	beq	129a0 <__assert_fail@plt+0x1cac>
   12988:	mov	r0, r2
   1298c:	ldr	r2, [r0], #8
   12990:	cmp	r2, #0
   12994:	moveq	r2, r3
   12998:	str	r2, [r1]
   1299c:	bx	lr
   129a0:	ldr	r0, [r0, #8]
   129a4:	cmp	r0, #0
   129a8:	bne	129bc <__assert_fail@plt+0x1cc8>
   129ac:	str	r3, [r1]
   129b0:	bx	lr
   129b4:	mov	r0, #0
   129b8:	bx	lr
   129bc:	mov	r2, r0
   129c0:	b	12988 <__assert_fail@plt+0x1c94>
   129c4:	ldr	r3, [pc, #1420]	; 12f58 <__assert_fail@plt+0x2264>
   129c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129cc:	sub	sp, sp, #44	; 0x2c
   129d0:	ldr	r3, [r3]
   129d4:	subs	ip, r2, #0
   129d8:	str	r3, [sp, #36]	; 0x24
   129dc:	moveq	fp, ip
   129e0:	beq	12ac0 <__assert_fail@plt+0x1dcc>
   129e4:	ldr	r0, [r0, #24]
   129e8:	bl	123d8 <__assert_fail@plt+0x16e4>
   129ec:	subs	fp, r0, #0
   129f0:	beq	12ac0 <__assert_fail@plt+0x1dcc>
   129f4:	bl	10c28 <__errno_location@plt>
   129f8:	add	r6, fp, #8
   129fc:	mov	r3, #0
   12a00:	mov	r1, #58	; 0x3a
   12a04:	str	r3, [sp, #32]
   12a08:	str	r0, [sp, #16]
   12a0c:	str	r3, [r0]
   12a10:	mov	r0, r6
   12a14:	bl	10c1c <strchr@plt>
   12a18:	subs	r4, r0, #0
   12a1c:	beq	12abc <__assert_fail@plt+0x1dc8>
   12a20:	subs	r7, r4, r6
   12a24:	beq	12abc <__assert_fail@plt+0x1dc8>
   12a28:	ldr	r5, [pc, #1324]	; 12f5c <__assert_fail@plt+0x2268>
   12a2c:	ldr	r1, [pc, #1324]	; 12f60 <__assert_fail@plt+0x226c>
   12a30:	mov	r3, #12
   12a34:	b	12a48 <__assert_fail@plt+0x1d54>
   12a38:	ldr	r1, [r5, #8]!
   12a3c:	cmp	r1, #0
   12a40:	beq	12ae0 <__assert_fail@plt+0x1dec>
   12a44:	ldr	r3, [r5, #4]
   12a48:	cmp	r7, r3
   12a4c:	bne	12a38 <__assert_fail@plt+0x1d44>
   12a50:	mov	r2, r7
   12a54:	mov	r0, r6
   12a58:	bl	10b44 <memcmp@plt>
   12a5c:	cmp	r0, #0
   12a60:	bne	12a38 <__assert_fail@plt+0x1d44>
   12a64:	ldr	r3, [pc, #1272]	; 12f64 <__assert_fail@plt+0x2270>
   12a68:	str	r3, [sp, #24]
   12a6c:	add	r3, r3, #12
   12a70:	str	r3, [sp, #28]
   12a74:	b	12af0 <__assert_fail@plt+0x1dfc>
   12a78:	mov	r2, r5
   12a7c:	mov	r1, r6
   12a80:	ldr	r0, [sp, #12]
   12a84:	bl	12360 <__assert_fail@plt+0x166c>
   12a88:	subs	r7, r0, #0
   12a8c:	bne	12e1c <__assert_fail@plt+0x2128>
   12a90:	ldr	r0, [sp, #32]
   12a94:	ldr	r3, [sp, #16]
   12a98:	cmp	r0, #0
   12a9c:	ldr	r5, [r3]
   12aa0:	beq	12ab4 <__assert_fail@plt+0x1dc0>
   12aa4:	ldr	r4, [r0]
   12aa8:	bl	10afc <free@plt>
   12aac:	subs	r0, r4, #0
   12ab0:	bne	12aa4 <__assert_fail@plt+0x1db0>
   12ab4:	ldr	r3, [sp, #16]
   12ab8:	str	r5, [r3]
   12abc:	mov	fp, #0
   12ac0:	ldr	r3, [pc, #1168]	; 12f58 <__assert_fail@plt+0x2264>
   12ac4:	ldr	r2, [sp, #36]	; 0x24
   12ac8:	mov	r0, fp
   12acc:	ldr	r3, [r3]
   12ad0:	cmp	r2, r3
   12ad4:	bne	12f54 <__assert_fail@plt+0x2260>
   12ad8:	add	sp, sp, #44	; 0x2c
   12adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae0:	ldr	r3, [pc, #1152]	; 12f68 <__assert_fail@plt+0x2274>
   12ae4:	str	r3, [sp, #24]
   12ae8:	add	r3, r3, #8
   12aec:	str	r3, [sp, #28]
   12af0:	mov	r7, #0
   12af4:	add	r6, r4, #1
   12af8:	ldrb	r5, [r4, #1]
   12afc:	add	sl, sp, #32
   12b00:	b	12b70 <__assert_fail@plt+0x1e7c>
   12b04:	cmp	r5, #40	; 0x28
   12b08:	addeq	r4, r6, #1
   12b0c:	moveq	r5, #0
   12b10:	moveq	r1, #1
   12b14:	beq	12bcc <__assert_fail@plt+0x1ed8>
   12b18:	cmp	r5, #91	; 0x5b
   12b1c:	cmpne	r5, #34	; 0x22
   12b20:	moveq	r4, #1
   12b24:	movne	r4, #0
   12b28:	beq	12d20 <__assert_fail@plt+0x202c>
   12b2c:	mov	r1, r5
   12b30:	ldr	r0, [sp, #24]
   12b34:	bl	10c1c <strchr@plt>
   12b38:	cmp	r0, #0
   12b3c:	beq	12c80 <__assert_fail@plt+0x1f8c>
   12b40:	mov	r2, #1
   12b44:	mov	r1, r6
   12b48:	mov	r0, #4
   12b4c:	bl	12360 <__assert_fail@plt+0x166c>
   12b50:	cmp	r0, #0
   12b54:	beq	12a90 <__assert_fail@plt+0x1d9c>
   12b58:	str	r0, [sl]
   12b5c:	ldrb	r5, [r6, #1]
   12b60:	mov	r7, r4
   12b64:	mov	sl, r0
   12b68:	add	r4, r6, #1
   12b6c:	mov	r6, r4
   12b70:	cmp	r5, #0
   12b74:	bne	12b04 <__assert_fail@plt+0x1e10>
   12b78:	ldr	fp, [fp]
   12b7c:	cmp	fp, #0
   12b80:	beq	12f2c <__assert_fail@plt+0x2238>
   12b84:	ldr	r3, [fp, #4]
   12b88:	cmp	r3, #0
   12b8c:	beq	12f2c <__assert_fail@plt+0x2238>
   12b90:	add	r4, fp, #8
   12b94:	ldrb	r5, [fp, #8]
   12b98:	b	12b6c <__assert_fail@plt+0x1e78>
   12b9c:	cmp	r5, #0
   12ba0:	movne	r3, r5
   12ba4:	bne	12be0 <__assert_fail@plt+0x1eec>
   12ba8:	mov	r5, #1
   12bac:	ldr	r3, [fp]
   12bb0:	cmp	r3, #0
   12bb4:	beq	12c30 <__assert_fail@plt+0x1f3c>
   12bb8:	ldr	r7, [r3, #4]
   12bbc:	cmp	r7, #0
   12bc0:	beq	12f24 <__assert_fail@plt+0x2230>
   12bc4:	add	r4, r3, #8
   12bc8:	mov	fp, r3
   12bcc:	ldrb	r3, [r4]
   12bd0:	cmp	r3, #0
   12bd4:	beq	12bac <__assert_fail@plt+0x1eb8>
   12bd8:	cmp	r5, #0
   12bdc:	beq	12c3c <__assert_fail@plt+0x1f48>
   12be0:	mov	r2, r3
   12be4:	cmp	r2, #34	; 0x22
   12be8:	mov	r0, r4
   12bec:	ldrb	r3, [r4, #1]!
   12bf0:	beq	12c18 <__assert_fail@plt+0x1f24>
   12bf4:	cmp	r2, #92	; 0x5c
   12bf8:	movne	r2, r3
   12bfc:	beq	12cfc <__assert_fail@plt+0x2008>
   12c00:	cmp	r2, #0
   12c04:	mov	r0, r4
   12c08:	beq	12ba8 <__assert_fail@plt+0x1eb4>
   12c0c:	cmp	r2, #34	; 0x22
   12c10:	ldrb	r3, [r4, #1]!
   12c14:	bne	12bf4 <__assert_fail@plt+0x1f00>
   12c18:	cmp	r3, #0
   12c1c:	bne	12c3c <__assert_fail@plt+0x1f48>
   12c20:	mov	r5, r3
   12c24:	ldr	r3, [fp]
   12c28:	cmp	r3, #0
   12c2c:	bne	12bb8 <__assert_fail@plt+0x1ec4>
   12c30:	mov	r7, r3
   12c34:	ldrb	r5, [r4]
   12c38:	b	12b6c <__assert_fail@plt+0x1e78>
   12c3c:	cmp	r3, #41	; 0x29
   12c40:	ldrb	r5, [r4, #1]!
   12c44:	beq	12c70 <__assert_fail@plt+0x1f7c>
   12c48:	cmp	r3, #40	; 0x28
   12c4c:	beq	12d10 <__assert_fail@plt+0x201c>
   12c50:	cmp	r3, #34	; 0x22
   12c54:	beq	12b9c <__assert_fail@plt+0x1ea8>
   12c58:	cmp	r5, #0
   12c5c:	beq	12bac <__assert_fail@plt+0x1eb8>
   12c60:	mov	r3, r5
   12c64:	cmp	r3, #41	; 0x29
   12c68:	ldrb	r5, [r4, #1]!
   12c6c:	bne	12c48 <__assert_fail@plt+0x1f54>
   12c70:	subs	r1, r1, #1
   12c74:	bne	12c58 <__assert_fail@plt+0x1f64>
   12c78:	mov	r7, r1
   12c7c:	b	12b6c <__assert_fail@plt+0x1e78>
   12c80:	cmp	r5, #32
   12c84:	cmpne	r5, #13
   12c88:	moveq	r3, #1
   12c8c:	movne	r3, #0
   12c90:	sub	r2, r5, #9
   12c94:	cmp	r2, #1
   12c98:	orrls	r3, r3, #1
   12c9c:	cmp	r3, #0
   12ca0:	beq	12e90 <__assert_fail@plt+0x219c>
   12ca4:	ldrb	r5, [r6, #1]
   12ca8:	add	r4, r6, #1
   12cac:	cmp	r5, #32
   12cb0:	cmpne	r5, #13
   12cb4:	moveq	r7, #1
   12cb8:	movne	r7, #0
   12cbc:	sub	r2, r5, #9
   12cc0:	cmp	r2, #1
   12cc4:	orrls	r7, r7, #1
   12cc8:	cmp	r7, #0
   12ccc:	beq	12b6c <__assert_fail@plt+0x1e78>
   12cd0:	ldrb	r5, [r4, #1]!
   12cd4:	cmp	r5, #13
   12cd8:	cmpne	r5, #32
   12cdc:	moveq	r7, #1
   12ce0:	movne	r7, #0
   12ce4:	sub	r3, r5, #9
   12ce8:	cmp	r3, #1
   12cec:	orrls	r7, r7, #1
   12cf0:	cmp	r7, #0
   12cf4:	bne	12cd0 <__assert_fail@plt+0x1fdc>
   12cf8:	b	12b6c <__assert_fail@plt+0x1e78>
   12cfc:	cmp	r3, #0
   12d00:	beq	12ba8 <__assert_fail@plt+0x1eb4>
   12d04:	mov	r4, r0
   12d08:	ldrb	r2, [r4, #2]!
   12d0c:	b	12c00 <__assert_fail@plt+0x1f0c>
   12d10:	cmp	r5, #0
   12d14:	add	r1, r1, #1
   12d18:	beq	12bac <__assert_fail@plt+0x1eb8>
   12d1c:	b	12c60 <__assert_fail@plt+0x1f6c>
   12d20:	add	r6, r6, #1
   12d24:	cmp	r5, #34	; 0x22
   12d28:	ldrb	r5, [r6]
   12d2c:	moveq	r3, #34	; 0x22
   12d30:	movne	r3, #93	; 0x5d
   12d34:	cmp	r3, #34	; 0x22
   12d38:	str	r3, [sp, #4]
   12d3c:	moveq	r3, #2
   12d40:	movne	r3, #3
   12d44:	cmp	r5, #0
   12d48:	str	r3, [sp, #12]
   12d4c:	mov	r7, #0
   12d50:	str	sl, [sp, #20]
   12d54:	beq	12e54 <__assert_fail@plt+0x2160>
   12d58:	ldr	r3, [sp, #4]
   12d5c:	cmp	r5, r3
   12d60:	beq	12eb4 <__assert_fail@plt+0x21c0>
   12d64:	mov	r3, r6
   12d68:	b	12d84 <__assert_fail@plt+0x2090>
   12d6c:	cmp	r5, #0
   12d70:	beq	12d9c <__assert_fail@plt+0x20a8>
   12d74:	ldr	r3, [sp, #4]
   12d78:	cmp	r5, r3
   12d7c:	mov	r3, r4
   12d80:	beq	12d9c <__assert_fail@plt+0x20a8>
   12d84:	mov	r4, r3
   12d88:	cmp	r5, #92	; 0x5c
   12d8c:	ldrb	r5, [r4, #1]!
   12d90:	bne	12d6c <__assert_fail@plt+0x2078>
   12d94:	cmp	r5, #0
   12d98:	bne	12e5c <__assert_fail@plt+0x2168>
   12d9c:	sub	r5, r4, r6
   12da0:	cmp	r7, #0
   12da4:	beq	12a78 <__assert_fail@plt+0x1d84>
   12da8:	add	r1, r7, #12
   12dac:	mov	r0, r1
   12db0:	str	r1, [sp, #8]
   12db4:	bl	10c10 <strlen@plt>
   12db8:	add	r9, r0, r5
   12dbc:	mov	sl, r0
   12dc0:	add	r0, r9, #16
   12dc4:	bl	10bc8 <malloc@plt>
   12dc8:	subs	r8, r0, #0
   12dcc:	beq	12a90 <__assert_fail@plt+0x1d9c>
   12dd0:	ldmib	r7, {r0, r2}
   12dd4:	ldr	ip, [r7]
   12dd8:	add	r3, r8, #12
   12ddc:	str	ip, [r8]
   12de0:	stmib	r8, {r0, r2}
   12de4:	ldr	r1, [sp, #8]
   12de8:	mov	r0, r3
   12dec:	mov	r2, sl
   12df0:	bl	10b20 <memcpy@plt>
   12df4:	add	r9, r8, r9
   12df8:	mov	r2, r5
   12dfc:	mov	r1, r6
   12e00:	add	r0, r0, sl
   12e04:	bl	10b20 <memcpy@plt>
   12e08:	mov	r3, #0
   12e0c:	mov	r0, r7
   12e10:	strb	r3, [r9, #12]
   12e14:	bl	10afc <free@plt>
   12e18:	mov	r7, r8
   12e1c:	ldrb	r3, [r4]
   12e20:	cmp	r3, #0
   12e24:	bne	12e68 <__assert_fail@plt+0x2174>
   12e28:	ldr	r3, [fp]
   12e2c:	cmp	r3, #0
   12e30:	beq	12e68 <__assert_fail@plt+0x2174>
   12e34:	ldr	r2, [r3, #4]
   12e38:	cmp	r2, #0
   12e3c:	beq	12e68 <__assert_fail@plt+0x2174>
   12e40:	add	r6, r3, #8
   12e44:	ldrb	r5, [r6]
   12e48:	mov	fp, r3
   12e4c:	cmp	r5, #0
   12e50:	bne	12d58 <__assert_fail@plt+0x2064>
   12e54:	mov	r4, r6
   12e58:	b	12da0 <__assert_fail@plt+0x20ac>
   12e5c:	mov	r4, r3
   12e60:	ldrb	r5, [r4, #2]!
   12e64:	b	12d6c <__assert_fail@plt+0x2078>
   12e68:	ldr	sl, [sp, #20]
   12e6c:	str	r7, [sl]
   12e70:	ldrb	r5, [r4]
   12e74:	mov	sl, r7
   12e78:	cmp	r5, #0
   12e7c:	moveq	r7, r5
   12e80:	ldrbne	r5, [r4, #1]
   12e84:	movne	r7, #0
   12e88:	addne	r4, r4, #1
   12e8c:	b	12b6c <__assert_fail@plt+0x1e78>
   12e90:	sub	r5, r5, #33	; 0x21
   12e94:	cmp	r5, #94	; 0x5e
   12e98:	bls	12ec0 <__assert_fail@plt+0x21cc>
   12e9c:	cmp	r7, #0
   12ea0:	beq	12f34 <__assert_fail@plt+0x2240>
   12ea4:	add	r4, r6, #1
   12ea8:	ldrb	r5, [r6, #1]
   12eac:	mov	r7, #1
   12eb0:	b	12b6c <__assert_fail@plt+0x1e78>
   12eb4:	mov	r4, r6
   12eb8:	mov	r5, #0
   12ebc:	b	12da0 <__assert_fail@plt+0x20ac>
   12ec0:	ldrb	r1, [r6, #1]
   12ec4:	add	r4, r6, #1
   12ec8:	sub	r3, r1, #33	; 0x21
   12ecc:	cmp	r3, #94	; 0x5e
   12ed0:	movhi	r2, #1
   12ed4:	bhi	12f04 <__assert_fail@plt+0x2210>
   12ed8:	ldr	r5, [sp, #28]
   12edc:	b	12ef0 <__assert_fail@plt+0x21fc>
   12ee0:	ldrb	r1, [r4, #1]!
   12ee4:	sub	r3, r1, #33	; 0x21
   12ee8:	cmp	r3, #94	; 0x5e
   12eec:	bhi	12f00 <__assert_fail@plt+0x220c>
   12ef0:	mov	r0, r5
   12ef4:	bl	10c1c <strchr@plt>
   12ef8:	cmp	r0, #0
   12efc:	beq	12ee0 <__assert_fail@plt+0x21ec>
   12f00:	sub	r2, r4, r6
   12f04:	mov	r1, r6
   12f08:	mov	r0, #1
   12f0c:	bl	12360 <__assert_fail@plt+0x166c>
   12f10:	cmp	r0, #0
   12f14:	beq	12a90 <__assert_fail@plt+0x1d9c>
   12f18:	str	r0, [sl]
   12f1c:	mov	r7, #0
   12f20:	mov	sl, r0
   12f24:	ldrb	r5, [r4]
   12f28:	b	12b6c <__assert_fail@plt+0x1e78>
   12f2c:	ldr	fp, [sp, #32]
   12f30:	b	12ac0 <__assert_fail@plt+0x1dcc>
   12f34:	mov	r2, r7
   12f38:	mov	r1, r7
   12f3c:	bl	12360 <__assert_fail@plt+0x166c>
   12f40:	cmp	r0, #0
   12f44:	beq	12a90 <__assert_fail@plt+0x1d9c>
   12f48:	str	r0, [sl]
   12f4c:	mov	sl, r0
   12f50:	b	12ea4 <__assert_fail@plt+0x21b0>
   12f54:	bl	10b5c <__stack_chk_fail@plt>
   12f58:	andeq	r4, r2, r0, lsr lr
   12f5c:	muleq	r1, r4, r2
   12f60:	andeq	r3, r1, r0, lsl #23
   12f64:	andeq	r4, r1, r0, ror #4
   12f68:	andeq	r4, r1, ip, ror r2
   12f6c:	cmp	r0, #0
   12f70:	bxeq	lr
   12f74:	b	123b8 <__assert_fail@plt+0x16c4>
   12f78:	push	{r4, r5, r6, r7, r8, lr}
   12f7c:	subs	r4, r0, #0
   12f80:	mov	r6, r1
   12f84:	mov	r7, r2
   12f88:	bne	12f9c <__assert_fail@plt+0x22a8>
   12f8c:	b	13040 <__assert_fail@plt+0x234c>
   12f90:	ldr	r4, [r4]
   12f94:	cmp	r4, #0
   12f98:	beq	13040 <__assert_fail@plt+0x234c>
   12f9c:	ldr	r3, [r4, #4]
   12fa0:	cmp	r3, #4
   12fa4:	bne	12f90 <__assert_fail@plt+0x229c>
   12fa8:	ldrb	r3, [r4, #12]
   12fac:	cmp	r3, #59	; 0x3b
   12fb0:	bne	12f90 <__assert_fail@plt+0x229c>
   12fb4:	ldr	r5, [r4]
   12fb8:	cmp	r5, #0
   12fbc:	beq	13040 <__assert_fail@plt+0x234c>
   12fc0:	ldr	r3, [r5, #4]
   12fc4:	cmp	r3, #1
   12fc8:	bne	13038 <__assert_fail@plt+0x2344>
   12fcc:	ldr	r3, [r5]
   12fd0:	cmp	r3, #0
   12fd4:	beq	13038 <__assert_fail@plt+0x2344>
   12fd8:	ldr	r2, [r3, #4]
   12fdc:	cmp	r2, #4
   12fe0:	bne	13038 <__assert_fail@plt+0x2344>
   12fe4:	ldrb	r2, [r3, #12]
   12fe8:	cmp	r2, #61	; 0x3d
   12fec:	bne	13038 <__assert_fail@plt+0x2344>
   12ff0:	ldr	r3, [r3]
   12ff4:	cmp	r3, #0
   12ff8:	beq	1300c <__assert_fail@plt+0x2318>
   12ffc:	ldr	r3, [r3, #4]
   13000:	sub	r3, r3, #1
   13004:	cmp	r3, #1
   13008:	bhi	13038 <__assert_fail@plt+0x2344>
   1300c:	ldrb	r3, [r5, #8]
   13010:	add	r0, r5, #12
   13014:	tst	r3, #2
   13018:	beq	13048 <__assert_fail@plt+0x2354>
   1301c:	mov	r1, r6
   13020:	bl	10ae4 <strcmp@plt>
   13024:	cmp	r0, #0
   13028:	beq	13090 <__assert_fail@plt+0x239c>
   1302c:	ldr	r5, [r4]
   13030:	cmp	r5, #0
   13034:	beq	13040 <__assert_fail@plt+0x234c>
   13038:	mov	r4, r5
   1303c:	b	12f9c <__assert_fail@plt+0x22a8>
   13040:	mov	r0, #0
   13044:	pop	{r4, r5, r6, r7, r8, pc}
   13048:	ldrb	r3, [r5, #12]
   1304c:	cmp	r3, #0
   13050:	movne	r2, r0
   13054:	beq	13074 <__assert_fail@plt+0x2380>
   13058:	sub	r1, r3, #65	; 0x41
   1305c:	cmp	r1, #25
   13060:	add	r3, r3, #32
   13064:	strbls	r3, [r2]
   13068:	ldrb	r3, [r2, #1]!
   1306c:	cmp	r3, #0
   13070:	bne	13058 <__assert_fail@plt+0x2364>
   13074:	ldrb	r3, [r5, #8]
   13078:	mov	r1, r6
   1307c:	orr	r3, r3, #2
   13080:	strb	r3, [r5, #8]
   13084:	bl	10ae4 <strcmp@plt>
   13088:	cmp	r0, #0
   1308c:	bne	1302c <__assert_fail@plt+0x2338>
   13090:	ldr	r3, [r5]
   13094:	ldr	r2, [r3]
   13098:	cmp	r7, #0
   1309c:	cmpne	r2, #0
   130a0:	beq	130f0 <__assert_fail@plt+0x23fc>
   130a4:	ldrb	r3, [r2, #8]
   130a8:	add	r0, r2, #12
   130ac:	tst	r3, #2
   130b0:	popne	{r4, r5, r6, r7, r8, pc}
   130b4:	ldrb	r3, [r2, #12]
   130b8:	cmp	r3, #0
   130bc:	movne	r1, r0
   130c0:	beq	130e0 <__assert_fail@plt+0x23ec>
   130c4:	sub	ip, r3, #65	; 0x41
   130c8:	cmp	ip, #25
   130cc:	add	r3, r3, #32
   130d0:	strbls	r3, [r1]
   130d4:	ldrb	r3, [r1, #1]!
   130d8:	cmp	r3, #0
   130dc:	bne	130c4 <__assert_fail@plt+0x23d0>
   130e0:	ldrb	r3, [r2, #8]
   130e4:	orr	r3, r3, #2
   130e8:	strb	r3, [r2, #8]
   130ec:	pop	{r4, r5, r6, r7, r8, pc}
   130f0:	cmp	r2, #0
   130f4:	bne	13100 <__assert_fail@plt+0x240c>
   130f8:	ldr	r0, [pc, #8]	; 13108 <__assert_fail@plt+0x2414>
   130fc:	pop	{r4, r5, r6, r7, r8, pc}
   13100:	add	r0, r2, #12
   13104:	pop	{r4, r5, r6, r7, r8, pc}
   13108:	strdeq	r4, [r1], -r8
   1310c:	ldr	r3, [r0, #4]
   13110:	push	{r4, lr}
   13114:	cmp	r3, #1
   13118:	bne	131fc <__assert_fail@plt+0x2508>
   1311c:	ldrb	r3, [r0, #8]
   13120:	add	lr, r0, #12
   13124:	tst	r3, #2
   13128:	bne	13164 <__assert_fail@plt+0x2470>
   1312c:	ldrb	r3, [r0, #12]
   13130:	cmp	r3, #0
   13134:	movne	r2, lr
   13138:	beq	13158 <__assert_fail@plt+0x2464>
   1313c:	sub	ip, r3, #65	; 0x41
   13140:	cmp	ip, #25
   13144:	add	r3, r3, #32
   13148:	strbls	r3, [r2]
   1314c:	ldrb	r3, [r2, #1]!
   13150:	cmp	r3, #0
   13154:	bne	1313c <__assert_fail@plt+0x2448>
   13158:	ldrb	r3, [r0, #8]
   1315c:	orr	r3, r3, #2
   13160:	strb	r3, [r0, #8]
   13164:	ldr	r3, [r0]
   13168:	cmp	r3, #0
   1316c:	beq	131fc <__assert_fail@plt+0x2508>
   13170:	ldr	r2, [r3, #4]
   13174:	cmp	r2, #4
   13178:	bne	131fc <__assert_fail@plt+0x2508>
   1317c:	ldrb	r2, [r3, #12]
   13180:	cmp	r2, #47	; 0x2f
   13184:	bne	131fc <__assert_fail@plt+0x2508>
   13188:	ldr	r0, [r3]
   1318c:	cmp	r0, #0
   13190:	beq	131fc <__assert_fail@plt+0x2508>
   13194:	ldr	r3, [r0, #4]
   13198:	cmp	r3, #1
   1319c:	bne	131fc <__assert_fail@plt+0x2508>
   131a0:	cmp	r1, #0
   131a4:	beq	13200 <__assert_fail@plt+0x250c>
   131a8:	ldrb	r3, [r0, #8]
   131ac:	add	r4, r0, #12
   131b0:	tst	r3, #2
   131b4:	bne	131f0 <__assert_fail@plt+0x24fc>
   131b8:	ldrb	r3, [r0, #12]
   131bc:	cmp	r3, #0
   131c0:	movne	r2, r4
   131c4:	beq	131e4 <__assert_fail@plt+0x24f0>
   131c8:	sub	ip, r3, #65	; 0x41
   131cc:	cmp	ip, #25
   131d0:	add	r3, r3, #32
   131d4:	strbls	r3, [r2]
   131d8:	ldrb	r3, [r2, #1]!
   131dc:	cmp	r3, #0
   131e0:	bne	131c8 <__assert_fail@plt+0x24d4>
   131e4:	ldrb	r3, [r0, #8]
   131e8:	orr	r3, r3, #2
   131ec:	strb	r3, [r0, #8]
   131f0:	str	r4, [r1]
   131f4:	mov	r0, lr
   131f8:	pop	{r4, pc}
   131fc:	mov	lr, #0
   13200:	mov	r0, lr
   13204:	pop	{r4, pc}
   13208:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1320c:	mov	r4, r0
   13210:	ldr	r5, [r0, #12]
   13214:	mov	r8, r1
   13218:	cmp	r5, #0
   1321c:	mov	r7, r2
   13220:	beq	13270 <__assert_fail@plt+0x257c>
   13224:	cmp	r2, #2
   13228:	bhi	133b8 <__assert_fail@plt+0x26c4>
   1322c:	ldr	r3, [r4, #16]
   13230:	cmp	r3, #0
   13234:	beq	133ac <__assert_fail@plt+0x26b8>
   13238:	ldr	r3, [r4]
   1323c:	cmp	r3, #0
   13240:	beq	133ac <__assert_fail@plt+0x26b8>
   13244:	ldr	r2, [r4, #8]
   13248:	cmp	r2, #0
   1324c:	bne	133ac <__assert_fail@plt+0x26b8>
   13250:	mov	r2, r4
   13254:	mov	r1, #12
   13258:	ldr	r0, [r4, #4]
   1325c:	blx	r3
   13260:	subs	r5, r0, #0
   13264:	beq	133b0 <__assert_fail@plt+0x26bc>
   13268:	str	r5, [r4, #8]
   1326c:	b	133b0 <__assert_fail@plt+0x26bc>
   13270:	ldr	r3, [r0, #24]
   13274:	cmp	r3, #0
   13278:	beq	135c0 <__assert_fail@plt+0x28cc>
   1327c:	cmp	r2, #0
   13280:	beq	1353c <__assert_fail@plt+0x2848>
   13284:	ldr	r3, [r3, #8]
   13288:	cmp	r3, #0
   1328c:	beq	13508 <__assert_fail@plt+0x2814>
   13290:	ldr	fp, [pc, #1372]	; 137f4 <__assert_fail@plt+0x2b00>
   13294:	mov	r6, r8
   13298:	add	sl, r7, r8
   1329c:	mov	r5, #0
   132a0:	ldrb	r1, [r6]
   132a4:	mov	r0, fp
   132a8:	bl	10c1c <strchr@plt>
   132ac:	mov	r9, r6
   132b0:	add	r6, r6, #1
   132b4:	cmp	r0, #0
   132b8:	moveq	r5, r0
   132bc:	beq	132c8 <__assert_fail@plt+0x25d4>
   132c0:	cmp	r5, #0
   132c4:	moveq	r5, r9
   132c8:	cmp	r6, sl
   132cc:	bne	132a0 <__assert_fail@plt+0x25ac>
   132d0:	cmp	r5, #0
   132d4:	subne	r7, r5, r8
   132d8:	add	r0, r7, #12
   132dc:	bl	10bc8 <malloc@plt>
   132e0:	subs	r5, r0, #0
   132e4:	beq	13708 <__assert_fail@plt+0x2a14>
   132e8:	ldrb	r6, [r8]
   132ec:	mov	sl, #0
   132f0:	add	r9, r5, #8
   132f4:	cmp	r6, #9
   132f8:	cmpne	r6, #32
   132fc:	moveq	r6, #1
   13300:	movne	r6, #0
   13304:	str	r6, [r5, #4]
   13308:	str	sl, [r5]
   1330c:	mov	r0, r9
   13310:	mov	r2, r7
   13314:	mov	r1, r8
   13318:	bl	10b20 <memcpy@plt>
   1331c:	add	r3, r5, r7
   13320:	cmp	r6, sl
   13324:	strb	sl, [r3, #8]
   13328:	bne	13348 <__assert_fail@plt+0x2654>
   1332c:	mov	r1, #58	; 0x3a
   13330:	mov	r0, r8
   13334:	bl	10c1c <strchr@plt>
   13338:	cmp	r0, sl
   1333c:	beq	13348 <__assert_fail@plt+0x2654>
   13340:	mov	r0, r9
   13344:	bl	12548 <__assert_fail@plt+0x1854>
   13348:	ldr	r3, [r4, #24]
   1334c:	cmp	r7, #8
   13350:	ldr	r2, [r3, #12]
   13354:	str	r5, [r2]
   13358:	str	r5, [r3, #12]
   1335c:	bls	133ac <__assert_fail@plt+0x26b8>
   13360:	mov	r0, r8
   13364:	mov	r2, #9
   13368:	ldr	r1, [pc, #1160]	; 137f8 <__assert_fail@plt+0x2b04>
   1336c:	bl	10b44 <memcmp@plt>
   13370:	cmp	r0, #0
   13374:	bne	133ac <__assert_fail@plt+0x26b8>
   13378:	ldr	r3, [r4]
   1337c:	cmp	r3, #0
   13380:	beq	133ac <__assert_fail@plt+0x26b8>
   13384:	ldr	r5, [r4, #8]
   13388:	cmp	r5, #0
   1338c:	bne	133ac <__assert_fail@plt+0x26b8>
   13390:	mov	r2, r4
   13394:	mov	r1, #6
   13398:	ldr	r0, [r4, #4]
   1339c:	blx	r3
   133a0:	cmp	r0, #0
   133a4:	strne	r0, [r4, #8]
   133a8:	bne	133b0 <__assert_fail@plt+0x26bc>
   133ac:	mov	r5, #0
   133b0:	mov	r0, r5
   133b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b8:	ldrb	r3, [r1]
   133bc:	cmp	r3, #45	; 0x2d
   133c0:	bne	1322c <__assert_fail@plt+0x2538>
   133c4:	ldrb	r3, [r1, #1]
   133c8:	cmp	r3, #45	; 0x2d
   133cc:	bne	1322c <__assert_fail@plt+0x2538>
   133d0:	ldr	r6, [r0, #28]
   133d4:	cmp	r6, #0
   133d8:	beq	1322c <__assert_fail@plt+0x2538>
   133dc:	mov	r0, r6
   133e0:	bl	10c10 <strlen@plt>
   133e4:	add	r3, r0, #2
   133e8:	cmp	r7, r3
   133ec:	mov	r9, r0
   133f0:	beq	136a4 <__assert_fail@plt+0x29b0>
   133f4:	add	r3, r9, #4
   133f8:	cmp	r7, r3
   133fc:	bne	1322c <__assert_fail@plt+0x2538>
   13400:	add	r7, r8, r7
   13404:	ldrb	r3, [r7, #-2]
   13408:	cmp	r3, #45	; 0x2d
   1340c:	bne	1322c <__assert_fail@plt+0x2538>
   13410:	ldrb	r3, [r7, #-1]
   13414:	cmp	r3, #45	; 0x2d
   13418:	bne	1322c <__assert_fail@plt+0x2538>
   1341c:	mov	r2, r9
   13420:	mov	r1, r6
   13424:	add	r0, r8, #2
   13428:	bl	10b44 <memcmp@plt>
   1342c:	subs	r5, r0, #0
   13430:	bne	1322c <__assert_fail@plt+0x2538>
   13434:	ldr	r3, [r4]
   13438:	cmp	r3, #0
   1343c:	beq	13464 <__assert_fail@plt+0x2770>
   13440:	ldr	r2, [r4, #8]
   13444:	cmp	r2, #0
   13448:	bne	13464 <__assert_fail@plt+0x2770>
   1344c:	mov	r2, r4
   13450:	mov	r1, #10
   13454:	ldr	r0, [r4, #4]
   13458:	blx	r3
   1345c:	subs	r5, r0, #0
   13460:	strne	r5, [r4, #8]
   13464:	ldr	r2, [r4, #24]
   13468:	mov	r3, #0
   1346c:	cmp	r2, r3
   13470:	str	r3, [r4, #28]
   13474:	beq	13790 <__assert_fail@plt+0x2a9c>
   13478:	ldr	r6, [r4, #20]
   1347c:	mov	r1, r2
   13480:	mov	r0, r6
   13484:	bl	12290 <__assert_fail@plt+0x159c>
   13488:	subs	r1, r0, #0
   1348c:	beq	134cc <__assert_fail@plt+0x27d8>
   13490:	ldr	r3, [r1, #4]
   13494:	cmp	r3, #0
   13498:	bne	134ac <__assert_fail@plt+0x27b8>
   1349c:	b	137a4 <__assert_fail@plt+0x2ab0>
   134a0:	ldr	r3, [r3]
   134a4:	cmp	r3, #0
   134a8:	beq	137a4 <__assert_fail@plt+0x2ab0>
   134ac:	cmp	r2, r3
   134b0:	bne	134a0 <__assert_fail@plt+0x27ac>
   134b4:	str	r1, [r4, #24]
   134b8:	mov	r0, r6
   134bc:	bl	12290 <__assert_fail@plt+0x159c>
   134c0:	cmp	r0, #0
   134c4:	ldrne	r0, [r0, #16]
   134c8:	str	r0, [r4, #28]
   134cc:	cmp	r5, #0
   134d0:	bne	133b0 <__assert_fail@plt+0x26bc>
   134d4:	ldr	r3, [r4]
   134d8:	cmp	r3, #0
   134dc:	beq	133b0 <__assert_fail@plt+0x26bc>
   134e0:	ldr	r2, [r4, #8]
   134e4:	cmp	r2, #0
   134e8:	bne	133ac <__assert_fail@plt+0x26b8>
   134ec:	mov	r2, r4
   134f0:	mov	r1, #8
   134f4:	ldr	r0, [r4, #4]
   134f8:	blx	r3
   134fc:	subs	r5, r0, #0
   13500:	beq	1322c <__assert_fail@plt+0x2538>
   13504:	b	13268 <__assert_fail@plt+0x2574>
   13508:	ldr	r3, [r0]
   1350c:	cmp	r3, #0
   13510:	beq	13290 <__assert_fail@plt+0x259c>
   13514:	ldr	r2, [r0, #8]
   13518:	cmp	r2, #0
   1351c:	bne	13290 <__assert_fail@plt+0x259c>
   13520:	mov	r2, r0
   13524:	mov	r1, #11
   13528:	ldr	r0, [r0, #4]
   1352c:	blx	r3
   13530:	cmp	r0, #0
   13534:	strne	r0, [r4, #8]
   13538:	b	13290 <__assert_fail@plt+0x259c>
   1353c:	ldr	r3, [r0]
   13540:	mov	r2, #1
   13544:	cmp	r3, #0
   13548:	str	r2, [r0, #12]
   1354c:	beq	1357c <__assert_fail@plt+0x2888>
   13550:	ldr	r2, [r0, #8]
   13554:	cmp	r2, #0
   13558:	bne	1357c <__assert_fail@plt+0x2888>
   1355c:	mov	r2, r0
   13560:	mov	r1, #4
   13564:	ldr	r0, [r0, #4]
   13568:	blx	r3
   1356c:	cmp	r0, #0
   13570:	strne	r0, [r4, #8]
   13574:	movne	r5, r0
   13578:	bne	133b0 <__assert_fail@plt+0x26bc>
   1357c:	mvn	r2, #0
   13580:	ldr	r1, [pc, #628]	; 137fc <__assert_fail@plt+0x2b08>
   13584:	mov	r0, r4
   13588:	bl	129c4 <__assert_fail@plt+0x1cd0>
   1358c:	subs	r6, r0, #0
   13590:	beq	133ac <__assert_fail@plt+0x26b8>
   13594:	mov	r1, #0
   13598:	bl	1310c <__assert_fail@plt+0x2418>
   1359c:	cmp	r0, #0
   135a0:	beq	135b4 <__assert_fail@plt+0x28c0>
   135a4:	ldr	r1, [pc, #596]	; 13800 <__assert_fail@plt+0x2b0c>
   135a8:	bl	10ae4 <strcmp@plt>
   135ac:	subs	r2, r0, #0
   135b0:	beq	135d4 <__assert_fail@plt+0x28e0>
   135b4:	mov	r0, r6
   135b8:	bl	123b8 <__assert_fail@plt+0x16c4>
   135bc:	b	133b0 <__assert_fail@plt+0x26bc>
   135c0:	ldr	r3, [pc, #572]	; 13804 <__assert_fail@plt+0x2b10>
   135c4:	ldr	r2, [pc, #572]	; 13808 <__assert_fail@plt+0x2b14>
   135c8:	ldr	r1, [pc, #572]	; 1380c <__assert_fail@plt+0x2b18>
   135cc:	ldr	r0, [pc, #572]	; 13810 <__assert_fail@plt+0x2b1c>
   135d0:	bl	10cf4 <__assert_fail@plt>
   135d4:	ldr	r1, [pc, #568]	; 13814 <__assert_fail@plt+0x2b20>
   135d8:	mov	r0, r6
   135dc:	bl	12f78 <__assert_fail@plt+0x2284>
   135e0:	subs	r8, r0, #0
   135e4:	beq	135b4 <__assert_fail@plt+0x28c0>
   135e8:	ldr	r7, [r4, #24]
   135ec:	ldr	r9, [r7, #16]
   135f0:	cmp	r9, #0
   135f4:	bne	137b8 <__assert_fail@plt+0x2ac4>
   135f8:	bl	10c10 <strlen@plt>
   135fc:	add	r0, r0, #1
   13600:	bl	10bc8 <malloc@plt>
   13604:	cmp	r0, #0
   13608:	str	r0, [r7, #16]
   1360c:	beq	135b4 <__assert_fail@plt+0x28c0>
   13610:	mov	r1, r8
   13614:	bl	10ba4 <strcpy@plt>
   13618:	ldr	r3, [r7, #16]
   1361c:	mov	r1, #20
   13620:	str	r3, [r4, #28]
   13624:	mov	r0, #1
   13628:	bl	10ad8 <calloc@plt>
   1362c:	subs	r8, r0, #0
   13630:	beq	13770 <__assert_fail@plt+0x2a7c>
   13634:	ldr	r5, [r4]
   13638:	add	r3, r8, #8
   1363c:	cmp	r5, #0
   13640:	str	r3, [r8, #12]
   13644:	beq	13674 <__assert_fail@plt+0x2980>
   13648:	ldr	r3, [r4, #8]
   1364c:	cmp	r3, #0
   13650:	movne	r5, r9
   13654:	bne	13674 <__assert_fail@plt+0x2980>
   13658:	mov	r2, r4
   1365c:	mov	r1, #7
   13660:	ldr	r0, [r4, #4]
   13664:	blx	r5
   13668:	ldr	r7, [r4, #24]
   1366c:	subs	r5, r0, #0
   13670:	strne	r5, [r4, #8]
   13674:	ldr	r3, [r7, #4]
   13678:	cmp	r3, #0
   1367c:	moveq	r3, #1
   13680:	streq	r8, [r7, #4]
   13684:	streq	r8, [r4, #24]
   13688:	streq	r3, [r4, #16]
   1368c:	beq	135b4 <__assert_fail@plt+0x28c0>
   13690:	ldr	r3, [pc, #384]	; 13818 <__assert_fail@plt+0x2b24>
   13694:	mov	r2, #440	; 0x1b8
   13698:	ldr	r1, [pc, #364]	; 1380c <__assert_fail@plt+0x2b18>
   1369c:	ldr	r0, [pc, #376]	; 1381c <__assert_fail@plt+0x2b28>
   136a0:	bl	10cf4 <__assert_fail@plt>
   136a4:	mov	r2, r0
   136a8:	mov	r1, r6
   136ac:	add	r0, r8, #2
   136b0:	bl	10b44 <memcmp@plt>
   136b4:	subs	r5, r0, #0
   136b8:	bne	133f4 <__assert_fail@plt+0x2700>
   136bc:	ldr	r3, [r4]
   136c0:	cmp	r3, #0
   136c4:	beq	13710 <__assert_fail@plt+0x2a1c>
   136c8:	ldr	r2, [r4, #8]
   136cc:	cmp	r2, #0
   136d0:	bne	13710 <__assert_fail@plt+0x2a1c>
   136d4:	mov	r2, r4
   136d8:	mov	r1, #9
   136dc:	ldr	r0, [r4, #4]
   136e0:	blx	r3
   136e4:	cmp	r0, #0
   136e8:	beq	13710 <__assert_fail@plt+0x2a1c>
   136ec:	mov	r3, #0
   136f0:	str	r0, [r4, #8]
   136f4:	mov	r5, r0
   136f8:	str	r3, [r4, #12]
   136fc:	str	r3, [r4, #16]
   13700:	b	133b0 <__assert_fail@plt+0x26bc>
   13704:	str	r0, [r4, #16]
   13708:	mvn	r5, #0
   1370c:	b	133b0 <__assert_fail@plt+0x26bc>
   13710:	ldr	r2, [r4, #16]
   13714:	mov	r3, #0
   13718:	cmp	r2, r3
   1371c:	str	r3, [r4, #12]
   13720:	strne	r3, [r4, #16]
   13724:	bne	133b0 <__assert_fail@plt+0x26bc>
   13728:	ldr	r7, [r4, #24]
   1372c:	cmp	r7, #0
   13730:	beq	137e0 <__assert_fail@plt+0x2aec>
   13734:	ldr	r6, [r7]
   13738:	cmp	r6, #0
   1373c:	bne	137cc <__assert_fail@plt+0x2ad8>
   13740:	mov	r1, #20
   13744:	mov	r0, #1
   13748:	bl	10ad8 <calloc@plt>
   1374c:	cmp	r0, #0
   13750:	beq	13704 <__assert_fail@plt+0x2a10>
   13754:	add	r3, r0, #8
   13758:	str	r3, [r0, #12]
   1375c:	mov	r5, r6
   13760:	str	r0, [r7]
   13764:	str	r0, [r4, #24]
   13768:	str	r6, [r4, #16]
   1376c:	b	133b0 <__assert_fail@plt+0x26bc>
   13770:	bl	10c28 <__errno_location@plt>
   13774:	mvn	r5, #0
   13778:	ldr	r7, [r0]
   1377c:	mov	r4, r0
   13780:	mov	r0, r6
   13784:	bl	123b8 <__assert_fail@plt+0x16c4>
   13788:	str	r7, [r4]
   1378c:	b	133b0 <__assert_fail@plt+0x26bc>
   13790:	ldr	r3, [pc, #136]	; 13820 <__assert_fail@plt+0x2b2c>
   13794:	ldr	r2, [pc, #136]	; 13824 <__assert_fail@plt+0x2b30>
   13798:	ldr	r1, [pc, #108]	; 1380c <__assert_fail@plt+0x2b18>
   1379c:	ldr	r0, [pc, #108]	; 13810 <__assert_fail@plt+0x2b1c>
   137a0:	bl	10cf4 <__assert_fail@plt>
   137a4:	ldr	r3, [pc, #116]	; 13820 <__assert_fail@plt+0x2b2c>
   137a8:	ldr	r2, [pc, #120]	; 13828 <__assert_fail@plt+0x2b34>
   137ac:	ldr	r1, [pc, #88]	; 1380c <__assert_fail@plt+0x2b18>
   137b0:	ldr	r0, [pc, #116]	; 1382c <__assert_fail@plt+0x2b38>
   137b4:	bl	10cf4 <__assert_fail@plt>
   137b8:	ldr	r3, [pc, #88]	; 13818 <__assert_fail@plt+0x2b24>
   137bc:	ldr	r2, [pc, #108]	; 13830 <__assert_fail@plt+0x2b3c>
   137c0:	ldr	r1, [pc, #68]	; 1380c <__assert_fail@plt+0x2b18>
   137c4:	ldr	r0, [pc, #104]	; 13834 <__assert_fail@plt+0x2b40>
   137c8:	bl	10cf4 <__assert_fail@plt>
   137cc:	ldr	r3, [pc, #100]	; 13838 <__assert_fail@plt+0x2b44>
   137d0:	ldr	r2, [pc, #100]	; 1383c <__assert_fail@plt+0x2b48>
   137d4:	ldr	r1, [pc, #48]	; 1380c <__assert_fail@plt+0x2b18>
   137d8:	ldr	r0, [pc, #96]	; 13840 <__assert_fail@plt+0x2b4c>
   137dc:	bl	10cf4 <__assert_fail@plt>
   137e0:	ldr	r3, [pc, #80]	; 13838 <__assert_fail@plt+0x2b44>
   137e4:	ldr	r2, [pc, #88]	; 13844 <__assert_fail@plt+0x2b50>
   137e8:	ldr	r1, [pc, #28]	; 1380c <__assert_fail@plt+0x2b18>
   137ec:	ldr	r0, [pc, #28]	; 13810 <__assert_fail@plt+0x2b1c>
   137f0:	bl	10cf4 <__assert_fail@plt>
   137f4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   137f8:	strdeq	r4, [r1], -ip
   137fc:	andeq	r3, r1, r0, lsl #23
   13800:	andeq	r3, r1, r4, asr #24
   13804:	andeq	r4, r1, r8, ror #5
   13808:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1380c:	andeq	r4, r1, ip, ror #6
   13810:	andeq	r4, r1, r8, lsl #7
   13814:	andeq	r4, r1, ip, asr #7
   13818:	strdeq	r4, [r1], -r8
   1381c:	ldrdeq	r4, [r1], -r8
   13820:	andeq	r4, r1, ip, asr #5
   13824:	andeq	r0, r0, r6, ror r1
   13828:	andeq	r0, r0, r1, lsl #3
   1382c:	andeq	r4, r1, r8, lsl #8
   13830:	andeq	r0, r0, r7, lsr #3
   13834:			; <UNDEFINED> instruction: 0x000143b8
   13838:			; <UNDEFINED> instruction: 0x000142b4
   1383c:	andeq	r0, r0, lr, asr #3
   13840:	muleq	r1, ip, r3
   13844:	andeq	r0, r0, sp, asr #3
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1384c:	mov	r7, r0
   13850:	ldr	r6, [pc, #72]	; 138a0 <__assert_fail@plt+0x2bac>
   13854:	ldr	r5, [pc, #72]	; 138a4 <__assert_fail@plt+0x2bb0>
   13858:	add	r6, pc, r6
   1385c:	add	r5, pc, r5
   13860:	sub	r6, r6, r5
   13864:	mov	r8, r1
   13868:	mov	r9, r2
   1386c:	bl	10aac <fdopen@plt-0x20>
   13870:	asrs	r6, r6, #2
   13874:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13878:	mov	r4, #0
   1387c:	add	r4, r4, #1
   13880:	ldr	r3, [r5], #4
   13884:	mov	r2, r9
   13888:	mov	r1, r8
   1388c:	mov	r0, r7
   13890:	blx	r3
   13894:	cmp	r6, r4
   13898:	bne	1387c <__assert_fail@plt+0x2b88>
   1389c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138a0:	andeq	r1, r1, ip, asr #11
   138a4:	andeq	r1, r1, r4, asr #11
   138a8:	bx	lr

Disassembly of section .fini:

000138ac <.fini>:
   138ac:	push	{r3, lr}
   138b0:	pop	{r3, pc}
