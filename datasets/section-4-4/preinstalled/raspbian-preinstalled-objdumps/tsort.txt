
raspbian-preinstalled/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c88 <.init>:
   10c88:	push	{r3, lr}
   10c8c:	bl	11640 <__assert_fail@plt+0x740>
   10c90:	pop	{r3, pc}

Disassembly of section .plt:

00010c94 <calloc@plt-0x14>:
   10c94:	push	{lr}		; (str lr, [sp, #-4]!)
   10c98:	ldr	lr, [pc, #4]	; 10ca4 <calloc@plt-0x4>
   10c9c:	add	lr, pc, lr
   10ca0:	ldr	pc, [lr, #8]!
   10ca4:	andeq	r5, r1, ip, asr r3

00010ca8 <calloc@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #860]!	; 0x35c

00010cb4 <fputs_unlocked@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #852]!	; 0x354

00010cc0 <raise@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #844]!	; 0x34c

00010ccc <strcmp@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #836]!	; 0x344

00010cd8 <posix_fadvise64@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #828]!	; 0x33c

00010ce4 <fflush@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #820]!	; 0x334

00010cf0 <free@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #812]!	; 0x32c

00010cfc <_exit@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #804]!	; 0x324

00010d08 <memcpy@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #796]!	; 0x31c

00010d14 <mbsinit@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #788]!	; 0x314

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #780]!	; 0x30c

00010d2c <dcgettext@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #772]!	; 0x304

00010d38 <__stack_chk_fail@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #764]!	; 0x2fc

00010d44 <dup2@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d50 <realloc@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #748]!	; 0x2ec

00010d5c <textdomain@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #740]!	; 0x2e4

00010d68 <iswprint@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #732]!	; 0x2dc

00010d74 <fwrite@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d80 <lseek64@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #716]!	; 0x2cc

00010d8c <__ctype_get_mb_cur_max@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #708]!	; 0x2c4

00010d98 <__fpending@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #700]!	; 0x2bc

00010da4 <mbrtowc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #692]!	; 0x2b4

00010db0 <error@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dbc <open64@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #676]!	; 0x2a4

00010dc8 <puts@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #668]!	; 0x29c

00010dd4 <malloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #660]!	; 0x294

00010de0 <__libc_start_main@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #652]!	; 0x28c

00010dec <__freading@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #644]!	; 0x284

00010df8 <__gmon_start__@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #636]!	; 0x27c

00010e04 <freopen64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #628]!	; 0x274

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #620]!	; 0x26c

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #612]!	; 0x264

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #604]!	; 0x25c

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #596]!	; 0x254

00010e40 <__errno_location@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #588]!	; 0x24c

00010e4c <__cxa_atexit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #580]!	; 0x244

00010e58 <memset@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #572]!	; 0x23c

00010e64 <__printf_chk@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #564]!	; 0x234

00010e70 <fileno@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #556]!	; 0x22c

00010e7c <__fprintf_chk@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #548]!	; 0x224

00010e88 <fclose@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #540]!	; 0x21c

00010e94 <fseeko64@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #532]!	; 0x214

00010ea0 <__uflow@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #524]!	; 0x20c

00010eac <setlocale@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #516]!	; 0x204

00010eb8 <strrchr@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #508]!	; 0x1fc

00010ec4 <nl_langinfo@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #492]!	; 0x1ec

00010edc <strncmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ee8 <abort@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ef4 <close@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #468]!	; 0x1d4

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #460]!	; 0x1cc

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	ldr	r3, [pc, #1648]	; 11584 <__assert_fail@plt+0x684>
   10f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f14:	sub	sp, sp, #52	; 0x34
   10f18:	ldr	r3, [r3]
   10f1c:	mov	r4, r0
   10f20:	ldr	r0, [r1]
   10f24:	str	r3, [sp, #44]	; 0x2c
   10f28:	mov	r5, r1
   10f2c:	bl	12010 <__assert_fail@plt+0x1110>
   10f30:	ldr	r1, [pc, #1616]	; 11588 <__assert_fail@plt+0x688>
   10f34:	mov	r0, #6
   10f38:	bl	10eac <setlocale@plt>
   10f3c:	ldr	r1, [pc, #1608]	; 1158c <__assert_fail@plt+0x68c>
   10f40:	ldr	r0, [pc, #1608]	; 11590 <__assert_fail@plt+0x690>
   10f44:	bl	10ed0 <bindtextdomain@plt>
   10f48:	ldr	r0, [pc, #1600]	; 11590 <__assert_fail@plt+0x690>
   10f4c:	bl	10d5c <textdomain@plt>
   10f50:	ldr	r0, [pc, #1596]	; 11594 <__assert_fail@plt+0x694>
   10f54:	bl	153c0 <__assert_fail@plt+0x44c0>
   10f58:	ldr	r1, [pc, #1592]	; 11598 <__assert_fail@plt+0x698>
   10f5c:	ldr	r2, [pc, #1592]	; 1159c <__assert_fail@plt+0x69c>
   10f60:	ldr	r3, [pc, #1592]	; 115a0 <__assert_fail@plt+0x6a0>
   10f64:	ldr	r1, [r1]
   10f68:	mov	r6, #0
   10f6c:	str	r1, [sp]
   10f70:	mov	r0, r4
   10f74:	mov	r1, r5
   10f78:	str	r2, [sp, #8]
   10f7c:	str	r3, [sp, #4]
   10f80:	ldr	r2, [pc, #1564]	; 115a4 <__assert_fail@plt+0x6a4>
   10f84:	ldr	r3, [pc, #1540]	; 11590 <__assert_fail@plt+0x690>
   10f88:	str	r6, [sp, #12]
   10f8c:	bl	11f30 <__assert_fail@plt+0x1030>
   10f90:	str	r6, [sp]
   10f94:	mov	r1, r5
   10f98:	mov	r0, r4
   10f9c:	ldr	r3, [pc, #1540]	; 115a8 <__assert_fail@plt+0x6a8>
   10fa0:	ldr	r2, [pc, #1504]	; 11588 <__assert_fail@plt+0x688>
   10fa4:	bl	10e10 <getopt_long@plt>
   10fa8:	cmn	r0, #1
   10fac:	bne	114f4 <__assert_fail@plt+0x5f4>
   10fb0:	ldr	r7, [pc, #1524]	; 115ac <__assert_fail@plt+0x6ac>
   10fb4:	ldr	r3, [r7]
   10fb8:	sub	r2, r4, r3
   10fbc:	cmp	r2, #1
   10fc0:	bgt	114bc <__assert_fail@plt+0x5bc>
   10fc4:	cmp	r3, r4
   10fc8:	beq	1141c <__assert_fail@plt+0x51c>
   10fcc:	ldr	r3, [r5, r3, lsl #2]
   10fd0:	ldr	r1, [pc, #1496]	; 115b0 <__assert_fail@plt+0x6b0>
   10fd4:	mov	r0, r3
   10fd8:	str	r3, [sp, #20]
   10fdc:	bl	10ccc <strcmp@plt>
   10fe0:	mov	r4, r0
   10fe4:	str	r0, [sp, #28]
   10fe8:	mov	r0, r6
   10fec:	bl	11784 <__assert_fail@plt+0x884>
   10ff0:	ldr	r3, [pc, #1468]	; 115b4 <__assert_fail@plt+0x6b4>
   10ff4:	cmp	r4, #0
   10ff8:	str	r3, [sp, #16]
   10ffc:	mov	r5, r0
   11000:	beq	1101c <__assert_fail@plt+0x11c>
   11004:	ldr	r1, [pc, #1452]	; 115b8 <__assert_fail@plt+0x6b8>
   11008:	ldr	r0, [sp, #20]
   1100c:	ldr	r2, [r3]
   11010:	bl	11dc0 <__assert_fail@plt+0xec0>
   11014:	subs	r4, r0, #0
   11018:	beq	11454 <__assert_fail@plt+0x554>
   1101c:	ldr	r3, [sp, #16]
   11020:	mov	r1, #2
   11024:	ldr	r0, [r3]
   11028:	bl	11d34 <__assert_fail@plt+0xe34>
   1102c:	add	r0, sp, #36	; 0x24
   11030:	bl	1428c <__assert_fail@plt+0x338c>
   11034:	mov	sl, #0
   11038:	ldr	r0, [sp, #16]
   1103c:	add	r3, sp, #36	; 0x24
   11040:	mov	r2, #3
   11044:	ldr	r1, [pc, #1392]	; 115bc <__assert_fail@plt+0x6bc>
   11048:	ldr	r0, [r0]
   1104c:	bl	1429c <__assert_fail@plt+0x339c>
   11050:	cmn	r0, #1
   11054:	beq	1129c <__assert_fail@plt+0x39c>
   11058:	cmp	r0, #0
   1105c:	beq	11480 <__assert_fail@plt+0x580>
   11060:	cmp	r5, #0
   11064:	ldr	r9, [sp, #40]	; 0x28
   11068:	beq	11494 <__assert_fail@plt+0x594>
   1106c:	ldr	r6, [r5, #8]
   11070:	cmp	r6, #0
   11074:	movne	r8, r5
   11078:	movne	r4, r6
   1107c:	bne	110a8 <__assert_fail@plt+0x1a8>
   11080:	b	110d0 <__assert_fail@plt+0x1d0>
   11084:	ldrd	r2, [r6, #4]
   11088:	movlt	r3, r2
   1108c:	cmp	r3, #0
   11090:	beq	11124 <__assert_fail@plt+0x224>
   11094:	ldr	r2, [r3, #12]
   11098:	cmp	r2, #0
   1109c:	movne	r8, r6
   110a0:	movne	r4, r3
   110a4:	mov	r6, r3
   110a8:	ldr	r1, [r6]
   110ac:	mov	r0, r9
   110b0:	bl	10ccc <strcmp@plt>
   110b4:	cmp	r0, #0
   110b8:	bne	11084 <__assert_fail@plt+0x184>
   110bc:	mov	r7, r6
   110c0:	cmp	sl, #0
   110c4:	bne	110e8 <__assert_fail@plt+0x1e8>
   110c8:	mov	sl, r7
   110cc:	b	11038 <__assert_fail@plt+0x138>
   110d0:	mov	r0, r9
   110d4:	bl	11784 <__assert_fail@plt+0x884>
   110d8:	cmp	sl, #0
   110dc:	mov	r7, r0
   110e0:	str	r0, [r5, #8]
   110e4:	beq	110c8 <__assert_fail@plt+0x1c8>
   110e8:	ldr	r1, [r7]
   110ec:	ldr	r0, [sl]
   110f0:	bl	10ccc <strcmp@plt>
   110f4:	cmp	r0, #0
   110f8:	beq	11034 <__assert_fail@plt+0x134>
   110fc:	ldr	r3, [r7, #16]
   11100:	mov	r0, #8
   11104:	add	r3, r3, #1
   11108:	str	r3, [r7, #16]
   1110c:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   11110:	ldr	r3, [sl, #24]
   11114:	str	r7, [r0]
   11118:	str	r3, [r0, #4]
   1111c:	str	r0, [sl, #24]
   11120:	b	11034 <__assert_fail@plt+0x134>
   11124:	mov	fp, r0
   11128:	mov	r0, r9
   1112c:	bl	11784 <__assert_fail@plt+0x884>
   11130:	cmp	fp, #0
   11134:	ldr	r1, [r4]
   11138:	strlt	r0, [r6, #4]
   1113c:	strge	r0, [r6, #8]
   11140:	mov	r7, r0
   11144:	mov	r0, r9
   11148:	bl	10ccc <strcmp@plt>
   1114c:	cmp	r0, #0
   11150:	beq	114a8 <__assert_fail@plt+0x5a8>
   11154:	ldr	r3, [r4, #8]
   11158:	ldr	r6, [r4, #4]
   1115c:	movge	r2, #1
   11160:	movge	r6, r3
   11164:	mvnlt	r2, #0
   11168:	cmp	r7, r6
   1116c:	strne	r4, [sp, #24]
   11170:	movne	fp, r6
   11174:	movne	r4, r2
   11178:	beq	111b8 <__assert_fail@plt+0x2b8>
   1117c:	ldr	r1, [fp]
   11180:	mov	r0, r9
   11184:	bl	10ccc <strcmp@plt>
   11188:	cmp	r0, #0
   1118c:	beq	11440 <__assert_fail@plt+0x540>
   11190:	mvnlt	r3, #0
   11194:	movge	r3, #1
   11198:	strlt	r3, [fp, #12]
   1119c:	strge	r3, [fp, #12]
   111a0:	ldrlt	fp, [fp, #4]
   111a4:	ldrge	fp, [fp, #8]
   111a8:	cmp	r7, fp
   111ac:	bne	1117c <__assert_fail@plt+0x27c>
   111b0:	mov	r2, r4
   111b4:	ldr	r4, [sp, #24]
   111b8:	ldr	r3, [r4, #12]
   111bc:	cmp	r3, #0
   111c0:	beq	11290 <__assert_fail@plt+0x390>
   111c4:	rsb	r0, r2, #0
   111c8:	cmp	r3, r0
   111cc:	beq	11290 <__assert_fail@plt+0x390>
   111d0:	ldr	r3, [r6, #12]
   111d4:	cmp	r2, r3
   111d8:	beq	11260 <__assert_fail@plt+0x360>
   111dc:	cmp	r2, #0
   111e0:	ldmib	r6, {r1, r3}
   111e4:	blt	11244 <__assert_fail@plt+0x344>
   111e8:	ldr	ip, [r1, #8]
   111ec:	mov	r3, r1
   111f0:	str	ip, [r6, #4]
   111f4:	ldr	ip, [r1, #4]
   111f8:	str	r6, [r1, #8]
   111fc:	str	ip, [r4, #8]
   11200:	str	r4, [r1, #4]
   11204:	mov	r1, #0
   11208:	str	r1, [r4, #12]
   1120c:	str	r1, [r6, #12]
   11210:	ldr	r1, [r3, #12]
   11214:	cmp	r2, r1
   11218:	streq	r0, [r4, #12]
   1121c:	beq	11228 <__assert_fail@plt+0x328>
   11220:	cmp	r0, r1
   11224:	streq	r2, [r6, #12]
   11228:	mov	r2, #0
   1122c:	str	r2, [r3, #12]
   11230:	ldr	r2, [r8, #8]
   11234:	cmp	r2, r4
   11238:	streq	r3, [r8, #8]
   1123c:	strne	r3, [r8, #4]
   11240:	b	110c0 <__assert_fail@plt+0x1c0>
   11244:	ldr	r1, [r3, #4]
   11248:	str	r1, [r6, #8]
   1124c:	ldr	r1, [r3, #8]
   11250:	str	r6, [r3, #4]
   11254:	str	r1, [r4, #4]
   11258:	str	r4, [r3, #8]
   1125c:	b	11204 <__assert_fail@plt+0x304>
   11260:	cmp	r2, #0
   11264:	mov	r2, #0
   11268:	ldrlt	r3, [r6, #8]
   1126c:	ldrge	r3, [r6, #4]
   11270:	strlt	r3, [r4, #4]
   11274:	strge	r3, [r4, #8]
   11278:	strlt	r4, [r6, #8]
   1127c:	strge	r4, [r6, #4]
   11280:	str	r2, [r6, #12]
   11284:	mov	r3, r6
   11288:	str	r2, [r4, #12]
   1128c:	b	11230 <__assert_fail@plt+0x330>
   11290:	add	r2, r3, r2
   11294:	str	r2, [r4, #12]
   11298:	b	110c0 <__assert_fail@plt+0x1c0>
   1129c:	cmp	sl, #0
   112a0:	bne	114fc <__assert_fail@plt+0x5fc>
   112a4:	ldr	r0, [r5, #8]
   112a8:	cmp	r0, #0
   112ac:	beq	112b8 <__assert_fail@plt+0x3b8>
   112b0:	ldr	r1, [pc, #776]	; 115c0 <__assert_fail@plt+0x6c0>
   112b4:	bl	11710 <__assert_fail@plt+0x810>
   112b8:	ldr	r4, [pc, #772]	; 115c4 <__assert_fail@plt+0x6c4>
   112bc:	ldr	r9, [pc, #772]	; 115c8 <__assert_fail@plt+0x6c8>
   112c0:	ldr	sl, [pc, #772]	; 115cc <__assert_fail@plt+0x6cc>
   112c4:	ldr	r8, [pc, #772]	; 115d0 <__assert_fail@plt+0x6d0>
   112c8:	mov	r7, #1
   112cc:	ldr	r3, [r4]
   112d0:	cmp	r3, #0
   112d4:	beq	11374 <__assert_fail@plt+0x474>
   112d8:	ldr	r0, [r5, #8]
   112dc:	cmp	r0, #0
   112e0:	beq	113a8 <__assert_fail@plt+0x4a8>
   112e4:	mov	r1, r9
   112e8:	bl	11710 <__assert_fail@plt+0x810>
   112ec:	ldr	r3, [r4, #4]
   112f0:	cmp	r3, #0
   112f4:	beq	11414 <__assert_fail@plt+0x514>
   112f8:	mov	fp, #0
   112fc:	ldr	r0, [r3]
   11300:	ldr	r6, [r3, #24]
   11304:	bl	10dc8 <puts@plt>
   11308:	ldm	r4, {r2, ip}
   1130c:	cmp	r6, #0
   11310:	sub	r2, r2, #1
   11314:	str	r2, [r4]
   11318:	str	fp, [ip]
   1131c:	beq	1135c <__assert_fail@plt+0x45c>
   11320:	ldr	r0, [r4, #8]
   11324:	mov	lr, #0
   11328:	ldr	r3, [r6]
   1132c:	ldr	r6, [r6, #4]
   11330:	ldr	r1, [r3, #16]
   11334:	sub	r1, r1, #1
   11338:	cmp	r1, #0
   1133c:	str	r1, [r3, #16]
   11340:	moveq	lr, #1
   11344:	streq	r3, [r0, #20]
   11348:	moveq	r0, r3
   1134c:	cmp	r6, #0
   11350:	bne	11328 <__assert_fail@plt+0x428>
   11354:	cmp	lr, #0
   11358:	strne	r0, [r4, #8]
   1135c:	ldr	r3, [ip, #20]
   11360:	cmp	r3, #0
   11364:	str	r3, [r4, #4]
   11368:	bne	112fc <__assert_fail@plt+0x3fc>
   1136c:	cmp	r2, #0
   11370:	bne	113b4 <__assert_fail@plt+0x4b4>
   11374:	ldr	r3, [sp, #16]
   11378:	ldr	r0, [r3]
   1137c:	bl	14e2c <__assert_fail@plt+0x3f2c>
   11380:	cmp	r0, #0
   11384:	bne	11538 <__assert_fail@plt+0x638>
   11388:	ldr	r3, [pc, #500]	; 11584 <__assert_fail@plt+0x684>
   1138c:	ldr	r2, [sp, #44]	; 0x2c
   11390:	eor	r0, r7, #1
   11394:	ldr	r3, [r3]
   11398:	cmp	r2, r3
   1139c:	bne	11534 <__assert_fail@plt+0x634>
   113a0:	add	sp, sp, #52	; 0x34
   113a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a8:	ldr	r3, [r4, #4]
   113ac:	cmp	r3, #0
   113b0:	bne	112f8 <__assert_fail@plt+0x3f8>
   113b4:	mov	r2, #5
   113b8:	mov	r1, sl
   113bc:	mov	r0, #0
   113c0:	bl	10d2c <dcgettext@plt>
   113c4:	ldr	r2, [sp, #20]
   113c8:	mov	r1, #3
   113cc:	mov	r7, #0
   113d0:	mov	r6, r0
   113d4:	mov	r0, #0
   113d8:	bl	140a8 <__assert_fail@plt+0x31a8>
   113dc:	mov	r1, #0
   113e0:	mov	r2, r6
   113e4:	mov	r3, r0
   113e8:	mov	r0, r1
   113ec:	bl	10db0 <error@plt>
   113f0:	ldr	r0, [r5, #8]
   113f4:	cmp	r0, #0
   113f8:	beq	11404 <__assert_fail@plt+0x504>
   113fc:	mov	r1, r8
   11400:	bl	11710 <__assert_fail@plt+0x810>
   11404:	ldr	r3, [r4, #12]
   11408:	cmp	r3, #0
   1140c:	bne	113f0 <__assert_fail@plt+0x4f0>
   11410:	b	112cc <__assert_fail@plt+0x3cc>
   11414:	ldr	r2, [r4]
   11418:	b	1136c <__assert_fail@plt+0x46c>
   1141c:	mov	r0, r6
   11420:	bl	11784 <__assert_fail@plt+0x884>
   11424:	ldr	r3, [pc, #388]	; 115b0 <__assert_fail@plt+0x6b0>
   11428:	str	r6, [sp, #28]
   1142c:	str	r3, [sp, #20]
   11430:	ldr	r3, [pc, #380]	; 115b4 <__assert_fail@plt+0x6b4>
   11434:	str	r3, [sp, #16]
   11438:	mov	r5, r0
   1143c:	b	1101c <__assert_fail@plt+0x11c>
   11440:	ldr	r3, [pc, #396]	; 115d4 <__assert_fail@plt+0x6d4>
   11444:	mov	r2, #188	; 0xbc
   11448:	ldr	r1, [pc, #392]	; 115d8 <__assert_fail@plt+0x6d8>
   1144c:	ldr	r0, [pc, #392]	; 115dc <__assert_fail@plt+0x6dc>
   11450:	bl	10f00 <__assert_fail@plt>
   11454:	bl	10e40 <__errno_location@plt>
   11458:	ldr	r2, [sp, #20]
   1145c:	mov	r1, #3
   11460:	ldr	r5, [r0]
   11464:	mov	r0, r4
   11468:	bl	140a8 <__assert_fail@plt+0x31a8>
   1146c:	mov	r1, r5
   11470:	ldr	r2, [pc, #360]	; 115e0 <__assert_fail@plt+0x6e0>
   11474:	mov	r3, r0
   11478:	mov	r0, #1
   1147c:	bl	10db0 <error@plt>
   11480:	ldr	r3, [pc, #348]	; 115e4 <__assert_fail@plt+0x6e4>
   11484:	ldr	r2, [pc, #348]	; 115e8 <__assert_fail@plt+0x6e8>
   11488:	ldr	r1, [pc, #328]	; 115d8 <__assert_fail@plt+0x6d8>
   1148c:	ldr	r0, [pc, #344]	; 115ec <__assert_fail@plt+0x6ec>
   11490:	bl	10f00 <__assert_fail@plt>
   11494:	ldr	r3, [pc, #312]	; 115d4 <__assert_fail@plt+0x6d4>
   11498:	mov	r2, #138	; 0x8a
   1149c:	ldr	r1, [pc, #308]	; 115d8 <__assert_fail@plt+0x6d8>
   114a0:	ldr	r0, [pc, #328]	; 115f0 <__assert_fail@plt+0x6f0>
   114a4:	bl	10f00 <__assert_fail@plt>
   114a8:	ldr	r3, [pc, #292]	; 115d4 <__assert_fail@plt+0x6d4>
   114ac:	mov	r2, #174	; 0xae
   114b0:	ldr	r1, [pc, #288]	; 115d8 <__assert_fail@plt+0x6d8>
   114b4:	ldr	r0, [pc, #312]	; 115f4 <__assert_fail@plt+0x6f4>
   114b8:	bl	10f00 <__assert_fail@plt>
   114bc:	mov	r2, #5
   114c0:	ldr	r1, [pc, #304]	; 115f8 <__assert_fail@plt+0x6f8>
   114c4:	mov	r0, r6
   114c8:	bl	10d2c <dcgettext@plt>
   114cc:	ldr	r3, [r7]
   114d0:	add	r3, r3, #1
   114d4:	mov	r4, r0
   114d8:	ldr	r0, [r5, r3, lsl #2]
   114dc:	bl	14274 <__assert_fail@plt+0x3374>
   114e0:	mov	r2, r4
   114e4:	mov	r1, r6
   114e8:	mov	r3, r0
   114ec:	mov	r0, r6
   114f0:	bl	10db0 <error@plt>
   114f4:	mov	r0, #1
   114f8:	bl	1193c <__assert_fail@plt+0xa3c>
   114fc:	mov	r2, #5
   11500:	ldr	r1, [pc, #244]	; 115fc <__assert_fail@plt+0x6fc>
   11504:	mov	r0, #0
   11508:	bl	10d2c <dcgettext@plt>
   1150c:	ldr	r2, [sp, #20]
   11510:	mov	r1, #3
   11514:	mov	r4, r0
   11518:	mov	r0, #0
   1151c:	bl	140a8 <__assert_fail@plt+0x31a8>
   11520:	mov	r2, r4
   11524:	mov	r1, #0
   11528:	mov	r3, r0
   1152c:	mov	r0, #1
   11530:	bl	10db0 <error@plt>
   11534:	bl	10d38 <__stack_chk_fail@plt>
   11538:	bl	10e40 <__errno_location@plt>
   1153c:	ldr	r3, [sp, #28]
   11540:	cmp	r3, #0
   11544:	ldr	r4, [r0]
   11548:	bne	11570 <__assert_fail@plt+0x670>
   1154c:	mov	r0, r3
   11550:	mov	r2, #5
   11554:	ldr	r1, [pc, #164]	; 11600 <__assert_fail@plt+0x700>
   11558:	bl	10d2c <dcgettext@plt>
   1155c:	mov	r3, r0
   11560:	mov	r1, r4
   11564:	ldr	r2, [pc, #116]	; 115e0 <__assert_fail@plt+0x6e0>
   11568:	mov	r0, #1
   1156c:	bl	10db0 <error@plt>
   11570:	ldr	r2, [sp, #20]
   11574:	mov	r1, #3
   11578:	mov	r0, #0
   1157c:	bl	140a8 <__assert_fail@plt+0x31a8>
   11580:	b	1155c <__assert_fail@plt+0x65c>
   11584:	andeq	r5, r2, r8, lsl #30
   11588:	andeq	r5, r1, r8, lsr #24
   1158c:	andeq	r5, r1, r8, ror #12
   11590:			; <UNDEFINED> instruction: 0x000155b8
   11594:	andeq	r1, r1, r8, asr ip
   11598:	andeq	r6, r2, r4, ror #1
   1159c:	andeq	r5, r1, ip, ror r6
   115a0:	andeq	r1, r1, ip, lsr r9
   115a4:	andeq	r5, r1, r0, asr #8
   115a8:	andeq	r5, r1, ip, lsl r4
   115ac:	andeq	r6, r2, r8, lsr r1
   115b0:	andeq	r5, r1, r4, ror #12
   115b4:	andeq	r6, r2, r8, asr #2
   115b8:	andeq	r5, r1, r0, lsr #13
   115bc:	andeq	r5, r1, r4, lsr #13
   115c0:	strdeq	r1, [r1], -r4
   115c4:	andeq	r6, r2, r8, asr r1
   115c8:	ldrdeq	r1, [r1], -r4
   115cc:	andeq	r5, r1, r4, lsr #14
   115d0:	andeq	r1, r1, r4, lsl r8
   115d4:	andeq	r5, r1, r4, lsr r4
   115d8:	andeq	r5, r1, r8, lsr #13
   115dc:	andeq	r5, r1, r0, ror #13
   115e0:	ldrdeq	r5, [r1], -r4
   115e4:	andeq	r5, r1, ip, lsr #8
   115e8:	ldrdeq	r0, [r0], -r3
   115ec:			; <UNDEFINED> instruction: 0x000156b4
   115f0:	andeq	r5, r1, r0, asr #13
   115f4:	andeq	r5, r1, r8, asr #13
   115f8:	andeq	r5, r1, ip, lsl #13
   115fc:	strdeq	r5, [r1], -r8
   11600:	andeq	r5, r1, r0, asr #14
   11604:	mov	fp, #0
   11608:	mov	lr, #0
   1160c:	pop	{r1}		; (ldr r1, [sp], #4)
   11610:	mov	r2, sp
   11614:	push	{r2}		; (str r2, [sp, #-4]!)
   11618:	push	{r0}		; (str r0, [sp, #-4]!)
   1161c:	ldr	ip, [pc, #16]	; 11634 <__assert_fail@plt+0x734>
   11620:	push	{ip}		; (str ip, [sp, #-4]!)
   11624:	ldr	r0, [pc, #12]	; 11638 <__assert_fail@plt+0x738>
   11628:	ldr	r3, [pc, #12]	; 1163c <__assert_fail@plt+0x73c>
   1162c:	bl	10de0 <__libc_start_main@plt>
   11630:	bl	10ee8 <abort@plt>
   11634:			; <UNDEFINED> instruction: 0x000153bc
   11638:	andeq	r0, r1, ip, lsl #30
   1163c:	andeq	r5, r1, ip, asr r3
   11640:	ldr	r3, [pc, #20]	; 1165c <__assert_fail@plt+0x75c>
   11644:	ldr	r2, [pc, #20]	; 11660 <__assert_fail@plt+0x760>
   11648:	add	r3, pc, r3
   1164c:	ldr	r2, [r3, r2]
   11650:	cmp	r2, #0
   11654:	bxeq	lr
   11658:	b	10df8 <__gmon_start__@plt>
   1165c:			; <UNDEFINED> instruction: 0x000149b0
   11660:	ldrdeq	r0, [r0], -r8
   11664:	ldr	r0, [pc, #24]	; 11684 <__assert_fail@plt+0x784>
   11668:	ldr	r3, [pc, #24]	; 11688 <__assert_fail@plt+0x788>
   1166c:	cmp	r3, r0
   11670:	bxeq	lr
   11674:	ldr	r3, [pc, #16]	; 1168c <__assert_fail@plt+0x78c>
   11678:	cmp	r3, #0
   1167c:	bxeq	lr
   11680:	bx	r3
   11684:	andeq	r6, r2, ip, lsr #2
   11688:	andeq	r6, r2, ip, lsr #2
   1168c:	andeq	r0, r0, r0
   11690:	ldr	r0, [pc, #36]	; 116bc <__assert_fail@plt+0x7bc>
   11694:	ldr	r1, [pc, #36]	; 116c0 <__assert_fail@plt+0x7c0>
   11698:	sub	r1, r1, r0
   1169c:	asr	r1, r1, #2
   116a0:	add	r1, r1, r1, lsr #31
   116a4:	asrs	r1, r1, #1
   116a8:	bxeq	lr
   116ac:	ldr	r3, [pc, #16]	; 116c4 <__assert_fail@plt+0x7c4>
   116b0:	cmp	r3, #0
   116b4:	bxeq	lr
   116b8:	bx	r3
   116bc:	andeq	r6, r2, ip, lsr #2
   116c0:	andeq	r6, r2, ip, lsr #2
   116c4:	andeq	r0, r0, r0
   116c8:	push	{r4, lr}
   116cc:	ldr	r4, [pc, #24]	; 116ec <__assert_fail@plt+0x7ec>
   116d0:	ldrb	r3, [r4]
   116d4:	cmp	r3, #0
   116d8:	popne	{r4, pc}
   116dc:	bl	11664 <__assert_fail@plt+0x764>
   116e0:	mov	r3, #1
   116e4:	strb	r3, [r4]
   116e8:	pop	{r4, pc}
   116ec:	andeq	r6, r2, r4, asr r1
   116f0:	b	11690 <__assert_fail@plt+0x790>
   116f4:	ldr	r2, [pc, #16]	; 1170c <__assert_fail@plt+0x80c>
   116f8:	mov	r0, #0
   116fc:	ldr	r3, [r2]
   11700:	add	r3, r3, #1
   11704:	str	r3, [r2]
   11708:	bx	lr
   1170c:	andeq	r6, r2, r8, asr r1
   11710:	push	{r4, r5, r6, lr}
   11714:	mov	r4, r0
   11718:	mov	r5, r1
   1171c:	ldr	r3, [r4, #4]
   11720:	mov	r1, r5
   11724:	subs	r0, r3, #0
   11728:	beq	11764 <__assert_fail@plt+0x864>
   1172c:	bl	11710 <__assert_fail@plt+0x810>
   11730:	cmp	r0, #0
   11734:	bne	1177c <__assert_fail@plt+0x87c>
   11738:	mov	r0, r4
   1173c:	blx	r5
   11740:	cmp	r0, #0
   11744:	bne	1177c <__assert_fail@plt+0x87c>
   11748:	ldr	r4, [r4, #8]
   1174c:	cmp	r4, #0
   11750:	popeq	{r4, r5, r6, pc}
   11754:	ldr	r3, [r4, #4]
   11758:	mov	r1, r5
   1175c:	subs	r0, r3, #0
   11760:	bne	1172c <__assert_fail@plt+0x82c>
   11764:	ldr	r3, [r4, #8]
   11768:	cmp	r3, #0
   1176c:	bne	11738 <__assert_fail@plt+0x838>
   11770:	mov	r0, r4
   11774:	pop	{r4, r5, r6, lr}
   11778:	bx	r1
   1177c:	mov	r0, #1
   11780:	pop	{r4, r5, r6, pc}
   11784:	push	{r4, r5, r6, lr}
   11788:	mov	r5, r0
   1178c:	mov	r0, #28
   11790:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   11794:	cmp	r5, #0
   11798:	mov	r4, r0
   1179c:	beq	117ac <__assert_fail@plt+0x8ac>
   117a0:	mov	r0, r5
   117a4:	bl	14dd0 <__assert_fail@plt+0x3ed0>
   117a8:	mov	r5, r0
   117ac:	mov	r3, #0
   117b0:	str	r5, [r4]
   117b4:	str	r3, [r4, #8]
   117b8:	str	r3, [r4, #4]
   117bc:	str	r3, [r4, #12]
   117c0:	str	r3, [r4, #16]
   117c4:	str	r3, [r4, #20]
   117c8:	str	r3, [r4, #24]
   117cc:	mov	r0, r4
   117d0:	pop	{r4, r5, r6, pc}
   117d4:	ldr	r3, [r0, #16]
   117d8:	cmp	r3, #0
   117dc:	bne	11808 <__assert_fail@plt+0x908>
   117e0:	ldr	r3, [r0]
   117e4:	cmp	r3, #0
   117e8:	beq	11808 <__assert_fail@plt+0x908>
   117ec:	ldr	r3, [pc, #28]	; 11810 <__assert_fail@plt+0x910>
   117f0:	ldr	r2, [r3, #4]
   117f4:	cmp	r2, #0
   117f8:	streq	r0, [r3, #4]
   117fc:	ldrne	r2, [r3, #8]
   11800:	str	r0, [r3, #8]
   11804:	strne	r0, [r2, #20]
   11808:	mov	r0, #0
   1180c:	bx	lr
   11810:	andeq	r6, r2, r8, asr r1
   11814:	ldr	r3, [r0, #16]
   11818:	cmp	r3, #0
   1181c:	beq	11874 <__assert_fail@plt+0x974>
   11820:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11824:	ldr	r5, [pc, #264]	; 11934 <__assert_fail@plt+0xa34>
   11828:	ldr	ip, [r5, #12]
   1182c:	cmp	ip, #0
   11830:	beq	1187c <__assert_fail@plt+0x97c>
   11834:	ldr	r2, [r0, #24]
   11838:	cmp	r2, #0
   1183c:	beq	11924 <__assert_fail@plt+0xa24>
   11840:	ldr	r3, [r2]
   11844:	cmp	ip, r3
   11848:	bne	11860 <__assert_fail@plt+0x960>
   1184c:	b	1192c <__assert_fail@plt+0xa2c>
   11850:	ldr	r1, [r3]
   11854:	cmp	ip, r1
   11858:	beq	11888 <__assert_fail@plt+0x988>
   1185c:	mov	r2, r3
   11860:	ldr	r3, [r2, #4]
   11864:	cmp	r3, #0
   11868:	bne	11850 <__assert_fail@plt+0x950>
   1186c:	mov	r0, r3
   11870:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11874:	mov	r0, r3
   11878:	bx	lr
   1187c:	str	r0, [r5, #12]
   11880:	mov	r0, ip
   11884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11888:	add	r4, r2, #4
   1188c:	ldr	r3, [r0, #20]
   11890:	cmp	r3, #0
   11894:	beq	11914 <__assert_fail@plt+0xa14>
   11898:	mov	r6, r0
   1189c:	ldr	r8, [pc, #148]	; 11938 <__assert_fail@plt+0xa38>
   118a0:	mov	r9, #0
   118a4:	b	118b8 <__assert_fail@plt+0x9b8>
   118a8:	subs	ip, r7, #0
   118ac:	str	r9, [r3, #20]
   118b0:	str	r7, [r5, #12]
   118b4:	beq	1190c <__assert_fail@plt+0xa0c>
   118b8:	mov	r1, #0
   118bc:	ldr	r3, [ip]
   118c0:	mov	r0, r1
   118c4:	mov	r2, r8
   118c8:	ldr	r7, [ip, #20]
   118cc:	bl	10db0 <error@plt>
   118d0:	ldr	r3, [r5, #12]
   118d4:	cmp	r6, r3
   118d8:	bne	118a8 <__assert_fail@plt+0x9a8>
   118dc:	ldr	r2, [r4]
   118e0:	mov	r1, #0
   118e4:	ldm	r2, {r0, ip}
   118e8:	ldr	r2, [r0, #16]
   118ec:	sub	r2, r2, #1
   118f0:	str	r2, [r0, #16]
   118f4:	str	ip, [r4]
   118f8:	ldr	r2, [r3, #20]
   118fc:	str	r1, [r3, #20]
   11900:	subs	r3, r2, #0
   11904:	bne	118f8 <__assert_fail@plt+0x9f8>
   11908:	str	r3, [r5, #12]
   1190c:	mov	r0, #1
   11910:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11914:	str	ip, [r0, #20]
   11918:	str	r0, [r5, #12]
   1191c:	mov	r0, r3
   11920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11924:	mov	r0, r2
   11928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1192c:	add	r4, r0, #24
   11930:	b	1188c <__assert_fail@plt+0x98c>
   11934:	andeq	r6, r2, r8, asr r1
   11938:	ldrdeq	r5, [r1], -r4
   1193c:	ldr	r3, [pc, #672]	; 11be4 <__assert_fail@plt+0xce4>
   11940:	push	{r7, lr}
   11944:	sub	sp, sp, #64	; 0x40
   11948:	ldr	r3, [r3]
   1194c:	subs	r5, r0, #0
   11950:	str	r3, [sp, #60]	; 0x3c
   11954:	beq	11990 <__assert_fail@plt+0xa90>
   11958:	ldr	r3, [pc, #648]	; 11be8 <__assert_fail@plt+0xce8>
   1195c:	mov	r2, #5
   11960:	ldr	r1, [pc, #644]	; 11bec <__assert_fail@plt+0xcec>
   11964:	mov	r0, #0
   11968:	ldr	r4, [r3]
   1196c:	bl	10d2c <dcgettext@plt>
   11970:	ldr	r3, [pc, #632]	; 11bf0 <__assert_fail@plt+0xcf0>
   11974:	mov	r1, #1
   11978:	ldr	r3, [r3]
   1197c:	mov	r2, r0
   11980:	mov	r0, r4
   11984:	bl	10e7c <__fprintf_chk@plt>
   11988:	mov	r0, r5
   1198c:	bl	10e28 <exit@plt>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #600]	; 11bf4 <__assert_fail@plt+0xcf4>
   11998:	bl	10d2c <dcgettext@plt>
   1199c:	ldr	r3, [pc, #588]	; 11bf0 <__assert_fail@plt+0xcf0>
   119a0:	ldr	r4, [pc, #592]	; 11bf8 <__assert_fail@plt+0xcf8>
   119a4:	ldr	r2, [r3]
   119a8:	mov	r1, r0
   119ac:	mov	r0, #1
   119b0:	bl	10e64 <__printf_chk@plt>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #572]	; 11bfc <__assert_fail@plt+0xcfc>
   119bc:	mov	r0, r5
   119c0:	bl	10d2c <dcgettext@plt>
   119c4:	ldr	r1, [r4]
   119c8:	bl	10cb4 <fputs_unlocked@plt>
   119cc:	mov	r2, #5
   119d0:	ldr	r1, [pc, #552]	; 11c00 <__assert_fail@plt+0xd00>
   119d4:	mov	r0, r5
   119d8:	bl	10d2c <dcgettext@plt>
   119dc:	ldr	r1, [r4]
   119e0:	bl	10cb4 <fputs_unlocked@plt>
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #532]	; 11c04 <__assert_fail@plt+0xd04>
   119ec:	mov	r0, r5
   119f0:	bl	10d2c <dcgettext@plt>
   119f4:	ldr	r1, [r4]
   119f8:	bl	10cb4 <fputs_unlocked@plt>
   119fc:	mov	r2, #5
   11a00:	ldr	r1, [pc, #512]	; 11c08 <__assert_fail@plt+0xd08>
   11a04:	mov	r0, r5
   11a08:	bl	10d2c <dcgettext@plt>
   11a0c:	ldr	r1, [r4]
   11a10:	bl	10cb4 <fputs_unlocked@plt>
   11a14:	ldr	lr, [pc, #496]	; 11c0c <__assert_fail@plt+0xd0c>
   11a18:	add	ip, sp, #4
   11a1c:	ldm	lr!, {r0, r1, r2, r3}
   11a20:	stmia	ip!, {r0, r1, r2, r3}
   11a24:	ldm	lr!, {r0, r1, r2, r3}
   11a28:	ldr	r6, [sp, #4]
   11a2c:	stmia	ip!, {r0, r1, r2, r3}
   11a30:	cmp	r6, #0
   11a34:	ldm	lr!, {r0, r1, r2, r3}
   11a38:	addeq	r4, sp, #4
   11a3c:	stmia	ip!, {r0, r1, r2, r3}
   11a40:	ldm	lr, {r0, r1}
   11a44:	stm	ip, {r0, r1}
   11a48:	beq	11a78 <__assert_fail@plt+0xb78>
   11a4c:	ldr	r7, [pc, #444]	; 11c10 <__assert_fail@plt+0xd10>
   11a50:	add	r4, sp, #4
   11a54:	b	11a64 <__assert_fail@plt+0xb64>
   11a58:	ldr	r6, [r4, #8]!
   11a5c:	cmp	r6, #0
   11a60:	beq	11a78 <__assert_fail@plt+0xb78>
   11a64:	mov	r1, r6
   11a68:	mov	r0, r7
   11a6c:	bl	10ccc <strcmp@plt>
   11a70:	cmp	r0, #0
   11a74:	bne	11a58 <__assert_fail@plt+0xb58>
   11a78:	ldr	r4, [r4, #4]
   11a7c:	mov	r2, #5
   11a80:	cmp	r4, #0
   11a84:	ldr	r1, [pc, #392]	; 11c14 <__assert_fail@plt+0xd14>
   11a88:	beq	11b30 <__assert_fail@plt+0xc30>
   11a8c:	mov	r0, #0
   11a90:	bl	10d2c <dcgettext@plt>
   11a94:	ldr	r3, [pc, #380]	; 11c18 <__assert_fail@plt+0xd18>
   11a98:	ldr	r2, [pc, #380]	; 11c1c <__assert_fail@plt+0xd1c>
   11a9c:	mov	r1, r0
   11aa0:	mov	r0, #1
   11aa4:	bl	10e64 <__printf_chk@plt>
   11aa8:	mov	r1, #0
   11aac:	mov	r0, #5
   11ab0:	bl	10eac <setlocale@plt>
   11ab4:	cmp	r0, #0
   11ab8:	ldreq	r6, [pc, #336]	; 11c10 <__assert_fail@plt+0xd10>
   11abc:	beq	11ad8 <__assert_fail@plt+0xbd8>
   11ac0:	mov	r2, #3
   11ac4:	ldr	r1, [pc, #340]	; 11c20 <__assert_fail@plt+0xd20>
   11ac8:	bl	10edc <strncmp@plt>
   11acc:	ldr	r6, [pc, #316]	; 11c10 <__assert_fail@plt+0xd10>
   11ad0:	cmp	r0, #0
   11ad4:	bne	11bc0 <__assert_fail@plt+0xcc0>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #320]	; 11c24 <__assert_fail@plt+0xd24>
   11ae0:	mov	r0, #0
   11ae4:	bl	10d2c <dcgettext@plt>
   11ae8:	ldr	r3, [pc, #288]	; 11c10 <__assert_fail@plt+0xd10>
   11aec:	ldr	r2, [pc, #292]	; 11c18 <__assert_fail@plt+0xd18>
   11af0:	mov	r1, r0
   11af4:	mov	r0, #1
   11af8:	bl	10e64 <__printf_chk@plt>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #288]	; 11c28 <__assert_fail@plt+0xd28>
   11b04:	mov	r0, #0
   11b08:	bl	10d2c <dcgettext@plt>
   11b0c:	ldr	r2, [pc, #280]	; 11c2c <__assert_fail@plt+0xd2c>
   11b10:	cmp	r4, r6
   11b14:	ldr	r3, [pc, #276]	; 11c30 <__assert_fail@plt+0xd30>
   11b18:	movne	r3, r2
   11b1c:	mov	r1, r0
   11b20:	mov	r2, r4
   11b24:	mov	r0, #1
   11b28:	bl	10e64 <__printf_chk@plt>
   11b2c:	b	11988 <__assert_fail@plt+0xa88>
   11b30:	mov	r0, r4
   11b34:	bl	10d2c <dcgettext@plt>
   11b38:	ldr	r3, [pc, #216]	; 11c18 <__assert_fail@plt+0xd18>
   11b3c:	ldr	r2, [pc, #216]	; 11c1c <__assert_fail@plt+0xd1c>
   11b40:	mov	r1, r0
   11b44:	mov	r0, #1
   11b48:	bl	10e64 <__printf_chk@plt>
   11b4c:	mov	r1, r4
   11b50:	mov	r0, #5
   11b54:	bl	10eac <setlocale@plt>
   11b58:	cmp	r0, #0
   11b5c:	beq	11b74 <__assert_fail@plt+0xc74>
   11b60:	mov	r2, #3
   11b64:	ldr	r1, [pc, #180]	; 11c20 <__assert_fail@plt+0xd20>
   11b68:	bl	10edc <strncmp@plt>
   11b6c:	cmp	r0, #0
   11b70:	bne	11bb8 <__assert_fail@plt+0xcb8>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #164]	; 11c24 <__assert_fail@plt+0xd24>
   11b7c:	mov	r0, #0
   11b80:	bl	10d2c <dcgettext@plt>
   11b84:	ldr	r3, [pc, #132]	; 11c10 <__assert_fail@plt+0xd10>
   11b88:	ldr	r2, [pc, #136]	; 11c18 <__assert_fail@plt+0xd18>
   11b8c:	mov	r4, r3
   11b90:	mov	r1, r0
   11b94:	mov	r0, #1
   11b98:	bl	10e64 <__printf_chk@plt>
   11b9c:	ldr	r1, [pc, #132]	; 11c28 <__assert_fail@plt+0xd28>
   11ba0:	mov	r2, #5
   11ba4:	mov	r0, #0
   11ba8:	bl	10d2c <dcgettext@plt>
   11bac:	ldr	r3, [pc, #124]	; 11c30 <__assert_fail@plt+0xd30>
   11bb0:	mov	r1, r0
   11bb4:	b	11b20 <__assert_fail@plt+0xc20>
   11bb8:	ldr	r6, [pc, #80]	; 11c10 <__assert_fail@plt+0xd10>
   11bbc:	mov	r4, r6
   11bc0:	mov	r2, #5
   11bc4:	ldr	r1, [pc, #104]	; 11c34 <__assert_fail@plt+0xd34>
   11bc8:	mov	r0, #0
   11bcc:	bl	10d2c <dcgettext@plt>
   11bd0:	ldr	r2, [pc, #56]	; 11c10 <__assert_fail@plt+0xd10>
   11bd4:	mov	r1, r0
   11bd8:	mov	r0, #1
   11bdc:	bl	10e64 <__printf_chk@plt>
   11be0:	b	11ad8 <__assert_fail@plt+0xbd8>
   11be4:	andeq	r5, r2, r8, lsl #30
   11be8:	andeq	r6, r2, r0, asr #2
   11bec:	andeq	r5, r1, r8, asr #8
   11bf0:	andeq	r6, r2, r0, ror r1
   11bf4:	andeq	r5, r1, r0, ror r4
   11bf8:	andeq	r6, r2, ip, asr #2
   11bfc:	ldrdeq	r5, [r1], -r4
   11c00:	andeq	r5, r1, ip, lsl #12
   11c04:	andeq	r5, r1, ip, lsl #10
   11c08:	andeq	r5, r1, ip, lsr r5
   11c0c:	andeq	r5, r1, r4, ror #7
   11c10:	andeq	r5, r1, r0, asr #8
   11c14:	andeq	r5, r1, r4, ror r5
   11c18:	andeq	r5, r1, ip, lsl #11
   11c1c:			; <UNDEFINED> instruction: 0x000155b4
   11c20:	andeq	r5, r1, r4, asr #11
   11c24:	andeq	r5, r1, r0, lsl r6
   11c28:	andeq	r5, r1, r0, lsr r6
   11c2c:	andeq	r5, r1, r8, lsr #24
   11c30:	andeq	r5, r1, r8, asr r7
   11c34:	andeq	r5, r1, r8, asr #11
   11c38:	ldr	r3, [pc, #4]	; 11c44 <__assert_fail@plt+0xd44>
   11c3c:	str	r0, [r3]
   11c40:	bx	lr
   11c44:	andeq	r6, r2, r8, ror #2
   11c48:	ldr	r3, [pc, #4]	; 11c54 <__assert_fail@plt+0xd54>
   11c4c:	strb	r0, [r3, #4]
   11c50:	bx	lr
   11c54:	andeq	r6, r2, r8, ror #2
   11c58:	ldr	r3, [pc, #180]	; 11d14 <__assert_fail@plt+0xe14>
   11c5c:	push	{r4, r5, r6, lr}
   11c60:	sub	sp, sp, #8
   11c64:	ldr	r0, [r3]
   11c68:	bl	1504c <__assert_fail@plt+0x414c>
   11c6c:	cmp	r0, #0
   11c70:	beq	11c98 <__assert_fail@plt+0xd98>
   11c74:	bl	10e40 <__errno_location@plt>
   11c78:	ldr	r5, [pc, #152]	; 11d18 <__assert_fail@plt+0xe18>
   11c7c:	ldrb	r3, [r5, #4]
   11c80:	cmp	r3, #0
   11c84:	mov	r4, r0
   11c88:	beq	11cb4 <__assert_fail@plt+0xdb4>
   11c8c:	ldr	r3, [r0]
   11c90:	cmp	r3, #32
   11c94:	bne	11cb4 <__assert_fail@plt+0xdb4>
   11c98:	ldr	r3, [pc, #124]	; 11d1c <__assert_fail@plt+0xe1c>
   11c9c:	ldr	r0, [r3]
   11ca0:	bl	1504c <__assert_fail@plt+0x414c>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11cf4 <__assert_fail@plt+0xdf4>
   11cac:	add	sp, sp, #8
   11cb0:	pop	{r4, r5, r6, pc}
   11cb4:	mov	r2, #5
   11cb8:	ldr	r1, [pc, #96]	; 11d20 <__assert_fail@plt+0xe20>
   11cbc:	mov	r0, #0
   11cc0:	bl	10d2c <dcgettext@plt>
   11cc4:	mov	r6, r0
   11cc8:	ldr	r0, [r5]
   11ccc:	cmp	r0, #0
   11cd0:	beq	11d00 <__assert_fail@plt+0xe00>
   11cd4:	ldr	r4, [r4]
   11cd8:	bl	14094 <__assert_fail@plt+0x3194>
   11cdc:	mov	r1, r4
   11ce0:	str	r6, [sp]
   11ce4:	ldr	r2, [pc, #56]	; 11d24 <__assert_fail@plt+0xe24>
   11ce8:	mov	r3, r0
   11cec:	mov	r0, #0
   11cf0:	bl	10db0 <error@plt>
   11cf4:	ldr	r3, [pc, #44]	; 11d28 <__assert_fail@plt+0xe28>
   11cf8:	ldr	r0, [r3]
   11cfc:	bl	10cfc <_exit@plt>
   11d00:	mov	r3, r6
   11d04:	ldr	r1, [r4]
   11d08:	ldr	r2, [pc, #28]	; 11d2c <__assert_fail@plt+0xe2c>
   11d0c:	bl	10db0 <error@plt>
   11d10:	b	11cf4 <__assert_fail@plt+0xdf4>
   11d14:	andeq	r6, r2, ip, asr #2
   11d18:	andeq	r6, r2, r8, ror #2
   11d1c:	andeq	r6, r2, r0, asr #2
   11d20:	andeq	r5, r1, r4, asr #15
   11d24:	ldrdeq	r5, [r1], -r0
   11d28:	andeq	r6, r2, r8, ror #1
   11d2c:	ldrdeq	r5, [r1], -r4
   11d30:	b	10cd8 <posix_fadvise64@plt>
   11d34:	cmp	r0, #0
   11d38:	bxeq	lr
   11d3c:	push	{r4, lr}
   11d40:	sub	sp, sp, #16
   11d44:	mov	r4, r1
   11d48:	bl	10e70 <fileno@plt>
   11d4c:	mov	r2, #0
   11d50:	mov	r3, #0
   11d54:	str	r4, [sp, #8]
   11d58:	strd	r2, [sp]
   11d5c:	bl	10cd8 <posix_fadvise64@plt>
   11d60:	add	sp, sp, #16
   11d64:	pop	{r4, pc}
   11d68:	push	{r4, lr}
   11d6c:	mov	r1, #0
   11d70:	mov	r4, r0
   11d74:	ldr	r0, [pc, #64]	; 11dbc <__assert_fail@plt+0xebc>
   11d78:	bl	10dbc <open64@plt>
   11d7c:	cmp	r4, r0
   11d80:	moveq	r3, #1
   11d84:	beq	11d98 <__assert_fail@plt+0xe98>
   11d88:	cmp	r0, #0
   11d8c:	mov	r3, r0
   11d90:	movlt	r3, #0
   11d94:	bge	11da0 <__assert_fail@plt+0xea0>
   11d98:	mov	r0, r3
   11d9c:	pop	{r4, pc}
   11da0:	bl	10ef4 <close@plt>
   11da4:	bl	10e40 <__errno_location@plt>
   11da8:	mov	r2, #9
   11dac:	mov	r3, #0
   11db0:	str	r2, [r0]
   11db4:	mov	r0, r3
   11db8:	pop	{r4, pc}
   11dbc:	ldrdeq	r5, [r1], -r8
   11dc0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc4:	mov	sl, r0
   11dc8:	mov	r0, r2
   11dcc:	mov	r8, r2
   11dd0:	mov	fp, r1
   11dd4:	bl	10e70 <fileno@plt>
   11dd8:	mov	r4, r0
   11ddc:	bl	10e40 <__errno_location@plt>
   11de0:	cmp	r4, #1
   11de4:	mov	r9, r0
   11de8:	beq	11f1c <__assert_fail@plt+0x101c>
   11dec:	cmp	r4, #2
   11df0:	beq	11ebc <__assert_fail@plt+0xfbc>
   11df4:	cmp	r4, #0
   11df8:	beq	11eb0 <__assert_fail@plt+0xfb0>
   11dfc:	mov	r1, #2
   11e00:	mov	r0, r1
   11e04:	bl	10d44 <dup2@plt>
   11e08:	subs	r4, r0, #2
   11e0c:	movne	r4, #1
   11e10:	mov	r1, #1
   11e14:	mov	r0, r1
   11e18:	bl	10d44 <dup2@plt>
   11e1c:	subs	r7, r0, #1
   11e20:	movne	r7, #1
   11e24:	mov	r1, #0
   11e28:	mov	r0, r1
   11e2c:	bl	10d44 <dup2@plt>
   11e30:	subs	r5, r0, #0
   11e34:	beq	11e50 <__assert_fail@plt+0xf50>
   11e38:	mov	r0, #0
   11e3c:	bl	11d68 <__assert_fail@plt+0xe68>
   11e40:	cmp	r0, #0
   11e44:	mov	r5, r0
   11e48:	mov	r6, r0
   11e4c:	beq	11f28 <__assert_fail@plt+0x1028>
   11e50:	cmp	r7, #0
   11e54:	bne	11ed0 <__assert_fail@plt+0xfd0>
   11e58:	cmp	r4, #0
   11e5c:	beq	11e70 <__assert_fail@plt+0xf70>
   11e60:	mov	r0, #2
   11e64:	bl	11d68 <__assert_fail@plt+0xe68>
   11e68:	subs	r4, r0, #0
   11e6c:	beq	11f08 <__assert_fail@plt+0x1008>
   11e70:	mov	r2, r8
   11e74:	mov	r1, fp
   11e78:	mov	r0, sl
   11e7c:	bl	10e04 <freopen64@plt>
   11e80:	mov	r6, r0
   11e84:	cmp	r4, #0
   11e88:	ldr	r8, [r9]
   11e8c:	bne	11f10 <__assert_fail@plt+0x1010>
   11e90:	cmp	r7, #0
   11e94:	bne	11efc <__assert_fail@plt+0xffc>
   11e98:	cmp	r5, #0
   11e9c:	bne	11ec4 <__assert_fail@plt+0xfc4>
   11ea0:	cmp	r6, #0
   11ea4:	streq	r8, [r9]
   11ea8:	mov	r0, r6
   11eac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb0:	mov	r7, r4
   11eb4:	mov	r5, r4
   11eb8:	b	11e70 <__assert_fail@plt+0xf70>
   11ebc:	mov	r4, #0
   11ec0:	b	11e10 <__assert_fail@plt+0xf10>
   11ec4:	mov	r0, #0
   11ec8:	bl	10ef4 <close@plt>
   11ecc:	b	11ea0 <__assert_fail@plt+0xfa0>
   11ed0:	mov	r0, #1
   11ed4:	bl	11d68 <__assert_fail@plt+0xe68>
   11ed8:	subs	r7, r0, #0
   11edc:	bne	11e58 <__assert_fail@plt+0xf58>
   11ee0:	cmp	r4, #0
   11ee4:	ldr	r8, [r9]
   11ee8:	moveq	r6, r4
   11eec:	beq	11efc <__assert_fail@plt+0xffc>
   11ef0:	mov	r0, #2
   11ef4:	mov	r6, r7
   11ef8:	bl	10ef4 <close@plt>
   11efc:	mov	r0, #1
   11f00:	bl	10ef4 <close@plt>
   11f04:	b	11e98 <__assert_fail@plt+0xf98>
   11f08:	ldr	r8, [r9]
   11f0c:	mov	r6, r4
   11f10:	mov	r0, #2
   11f14:	bl	10ef4 <close@plt>
   11f18:	b	11e90 <__assert_fail@plt+0xf90>
   11f1c:	mov	r4, #0
   11f20:	mov	r7, r4
   11f24:	b	11e24 <__assert_fail@plt+0xf24>
   11f28:	mov	r5, #1
   11f2c:	b	11e84 <__assert_fail@plt+0xf84>
   11f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f34:	sub	sp, sp, #20
   11f38:	ldr	r5, [pc, #184]	; 11ff8 <__assert_fail@plt+0x10f8>
   11f3c:	ldr	r4, [pc, #184]	; 11ffc <__assert_fail@plt+0x10fc>
   11f40:	mov	r6, #0
   11f44:	ldr	ip, [r5]
   11f48:	cmp	r0, #2
   11f4c:	ldr	r7, [r4]
   11f50:	str	ip, [sp, #12]
   11f54:	ldr	sl, [sp, #56]	; 0x38
   11f58:	str	r6, [r4]
   11f5c:	ldr	fp, [sp, #60]	; 0x3c
   11f60:	beq	11f8c <__assert_fail@plt+0x108c>
   11f64:	ldr	r0, [sp, #12]
   11f68:	ldr	r3, [pc, #144]	; 12000 <__assert_fail@plt+0x1100>
   11f6c:	ldr	r1, [r5]
   11f70:	mov	r2, #0
   11f74:	cmp	r0, r1
   11f78:	str	r7, [r4]
   11f7c:	str	r2, [r3]
   11f80:	bne	11ff4 <__assert_fail@plt+0x10f4>
   11f84:	add	sp, sp, #20
   11f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f8c:	mov	r8, r2
   11f90:	mov	r9, r3
   11f94:	str	r6, [sp]
   11f98:	ldr	r3, [pc, #100]	; 12004 <__assert_fail@plt+0x1104>
   11f9c:	ldr	r2, [pc, #100]	; 12008 <__assert_fail@plt+0x1108>
   11fa0:	bl	10e10 <getopt_long@plt>
   11fa4:	cmn	r0, #1
   11fa8:	beq	11f64 <__assert_fail@plt+0x1064>
   11fac:	cmp	r0, #104	; 0x68
   11fb0:	beq	11fe8 <__assert_fail@plt+0x10e8>
   11fb4:	cmp	r0, #118	; 0x76
   11fb8:	bne	11f64 <__assert_fail@plt+0x1064>
   11fbc:	ldr	r0, [pc, #72]	; 1200c <__assert_fail@plt+0x110c>
   11fc0:	add	ip, sp, #64	; 0x40
   11fc4:	mov	r3, sl
   11fc8:	ldr	r0, [r0]
   11fcc:	mov	r2, r9
   11fd0:	mov	r1, r8
   11fd4:	str	ip, [sp]
   11fd8:	str	ip, [sp, #8]
   11fdc:	bl	14a34 <__assert_fail@plt+0x3b34>
   11fe0:	mov	r0, r6
   11fe4:	bl	10e28 <exit@plt>
   11fe8:	mov	r0, r6
   11fec:	blx	fp
   11ff0:	b	11f64 <__assert_fail@plt+0x1064>
   11ff4:	bl	10d38 <__stack_chk_fail@plt>
   11ff8:	andeq	r5, r2, r8, lsl #30
   11ffc:	andeq	r6, r2, r0, asr r1
   12000:	andeq	r6, r2, r8, lsr r1
   12004:	andeq	r5, r1, r4, ror #15
   12008:	andeq	r5, r1, r4, lsl r8
   1200c:	andeq	r6, r2, ip, asr #2
   12010:	push	{r4, r5, r6, lr}
   12014:	subs	r4, r0, #0
   12018:	beq	1208c <__assert_fail@plt+0x118c>
   1201c:	mov	r1, #47	; 0x2f
   12020:	bl	10eb8 <strrchr@plt>
   12024:	subs	r5, r0, #0
   12028:	beq	12078 <__assert_fail@plt+0x1178>
   1202c:	add	r6, r5, #1
   12030:	sub	r3, r6, r4
   12034:	cmp	r3, #6
   12038:	ble	12078 <__assert_fail@plt+0x1178>
   1203c:	mov	r2, #7
   12040:	ldr	r1, [pc, #96]	; 120a8 <__assert_fail@plt+0x11a8>
   12044:	sub	r0, r5, #6
   12048:	bl	10edc <strncmp@plt>
   1204c:	cmp	r0, #0
   12050:	bne	12078 <__assert_fail@plt+0x1178>
   12054:	mov	r2, #3
   12058:	ldr	r1, [pc, #76]	; 120ac <__assert_fail@plt+0x11ac>
   1205c:	mov	r0, r6
   12060:	bl	10edc <strncmp@plt>
   12064:	cmp	r0, #0
   12068:	movne	r4, r6
   1206c:	ldreq	r3, [pc, #60]	; 120b0 <__assert_fail@plt+0x11b0>
   12070:	addeq	r4, r5, #4
   12074:	streq	r4, [r3]
   12078:	ldr	r2, [pc, #52]	; 120b4 <__assert_fail@plt+0x11b4>
   1207c:	ldr	r3, [pc, #52]	; 120b8 <__assert_fail@plt+0x11b8>
   12080:	str	r4, [r2]
   12084:	str	r4, [r3]
   12088:	pop	{r4, r5, r6, pc}
   1208c:	ldr	r3, [pc, #40]	; 120bc <__assert_fail@plt+0x11bc>
   12090:	mov	r2, #55	; 0x37
   12094:	mov	r1, #1
   12098:	ldr	r3, [r3]
   1209c:	ldr	r0, [pc, #28]	; 120c0 <__assert_fail@plt+0x11c0>
   120a0:	bl	10d74 <fwrite@plt>
   120a4:	bl	10ee8 <abort@plt>
   120a8:	andeq	r5, r1, r0, ror #16
   120ac:	andeq	r5, r1, r8, ror #16
   120b0:	andeq	r6, r2, r0, lsr r1
   120b4:	andeq	r6, r2, r0, ror r1
   120b8:	andeq	r6, r2, r4, lsr r1
   120bc:	andeq	r6, r2, r0, asr #2
   120c0:	andeq	r5, r1, r8, lsr #16
   120c4:	push	{r4, lr}
   120c8:	mov	r2, #48	; 0x30
   120cc:	mov	r4, r1
   120d0:	mov	r1, #0
   120d4:	bl	10e58 <memset@plt>
   120d8:	cmp	r4, #10
   120dc:	beq	120e8 <__assert_fail@plt+0x11e8>
   120e0:	str	r4, [r0]
   120e4:	pop	{r4, pc}
   120e8:	bl	10ee8 <abort@plt>
   120ec:	push	{r4, r5, r6, lr}
   120f0:	mov	r2, #5
   120f4:	mov	r5, r0
   120f8:	mov	r6, r1
   120fc:	mov	r1, r0
   12100:	mov	r0, #0
   12104:	bl	10d2c <dcgettext@plt>
   12108:	cmp	r5, r0
   1210c:	mov	r4, r0
   12110:	beq	1211c <__assert_fail@plt+0x121c>
   12114:	mov	r0, r4
   12118:	pop	{r4, r5, r6, pc}
   1211c:	bl	1510c <__assert_fail@plt+0x420c>
   12120:	ldrb	r3, [r0]
   12124:	bic	r3, r3, #32
   12128:	cmp	r3, #85	; 0x55
   1212c:	bne	1218c <__assert_fail@plt+0x128c>
   12130:	ldrb	r3, [r0, #1]
   12134:	bic	r3, r3, #32
   12138:	cmp	r3, #84	; 0x54
   1213c:	bne	12204 <__assert_fail@plt+0x1304>
   12140:	ldrb	r3, [r0, #2]
   12144:	bic	r3, r3, #32
   12148:	cmp	r3, #70	; 0x46
   1214c:	bne	12204 <__assert_fail@plt+0x1304>
   12150:	ldrb	r3, [r0, #3]
   12154:	cmp	r3, #45	; 0x2d
   12158:	bne	12204 <__assert_fail@plt+0x1304>
   1215c:	ldrb	r3, [r0, #4]
   12160:	cmp	r3, #56	; 0x38
   12164:	bne	12204 <__assert_fail@plt+0x1304>
   12168:	ldrb	r3, [r0, #5]
   1216c:	cmp	r3, #0
   12170:	bne	12204 <__assert_fail@plt+0x1304>
   12174:	ldrb	r2, [r4]
   12178:	ldr	r3, [pc, #156]	; 1221c <__assert_fail@plt+0x131c>
   1217c:	ldr	r4, [pc, #156]	; 12220 <__assert_fail@plt+0x1320>
   12180:	cmp	r2, #96	; 0x60
   12184:	movne	r4, r3
   12188:	b	12114 <__assert_fail@plt+0x1214>
   1218c:	cmp	r3, #71	; 0x47
   12190:	bne	12204 <__assert_fail@plt+0x1304>
   12194:	ldrb	r3, [r0, #1]
   12198:	bic	r3, r3, #32
   1219c:	cmp	r3, #66	; 0x42
   121a0:	bne	12204 <__assert_fail@plt+0x1304>
   121a4:	ldrb	r3, [r0, #2]
   121a8:	cmp	r3, #49	; 0x31
   121ac:	bne	12204 <__assert_fail@plt+0x1304>
   121b0:	ldrb	r3, [r0, #3]
   121b4:	cmp	r3, #56	; 0x38
   121b8:	bne	12204 <__assert_fail@plt+0x1304>
   121bc:	ldrb	r3, [r0, #4]
   121c0:	cmp	r3, #48	; 0x30
   121c4:	bne	12204 <__assert_fail@plt+0x1304>
   121c8:	ldrb	r3, [r0, #5]
   121cc:	cmp	r3, #51	; 0x33
   121d0:	bne	12204 <__assert_fail@plt+0x1304>
   121d4:	ldrb	r3, [r0, #6]
   121d8:	cmp	r3, #48	; 0x30
   121dc:	bne	12204 <__assert_fail@plt+0x1304>
   121e0:	ldrb	r3, [r0, #7]
   121e4:	cmp	r3, #0
   121e8:	bne	12204 <__assert_fail@plt+0x1304>
   121ec:	ldrb	r2, [r4]
   121f0:	ldr	r3, [pc, #44]	; 12224 <__assert_fail@plt+0x1324>
   121f4:	ldr	r4, [pc, #44]	; 12228 <__assert_fail@plt+0x1328>
   121f8:	cmp	r2, #96	; 0x60
   121fc:	movne	r4, r3
   12200:	b	12114 <__assert_fail@plt+0x1214>
   12204:	ldr	r3, [pc, #32]	; 1222c <__assert_fail@plt+0x132c>
   12208:	ldr	r4, [pc, #32]	; 12230 <__assert_fail@plt+0x1330>
   1220c:	cmp	r6, #9
   12210:	movne	r4, r3
   12214:	mov	r0, r4
   12218:	pop	{r4, r5, r6, pc}
   1221c:	andeq	r5, r1, r4, asr #17
   12220:	ldrdeq	r5, [r1], -r0
   12224:	andeq	r5, r1, r8, asr #17
   12228:	andeq	r5, r1, ip, asr #17
   1222c:	ldrdeq	r5, [r1], -r4
   12230:	andeq	r5, r1, r0, asr #17
   12234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12238:	sub	sp, sp, #124	; 0x7c
   1223c:	ldr	ip, [pc, #3576]	; 1303c <__assert_fail@plt+0x213c>
   12240:	str	r3, [sp, #24]
   12244:	ldr	r3, [sp, #168]	; 0xa8
   12248:	ldr	ip, [ip]
   1224c:	str	r3, [sp, #56]	; 0x38
   12250:	ldr	r3, [sp, #172]	; 0xac
   12254:	ldr	r8, [sp, #160]	; 0xa0
   12258:	str	r3, [sp, #80]	; 0x50
   1225c:	ldr	r3, [sp, #176]	; 0xb0
   12260:	mov	fp, r0
   12264:	str	r3, [sp, #76]	; 0x4c
   12268:	mov	sl, r1
   1226c:	str	r2, [sp, #36]	; 0x24
   12270:	str	ip, [sp, #116]	; 0x74
   12274:	bl	10d8c <__ctype_get_mb_cur_max@plt>
   12278:	ldr	r3, [sp, #164]	; 0xa4
   1227c:	ands	r4, r3, #2
   12280:	movne	r3, #1
   12284:	moveq	r3, #0
   12288:	str	r3, [sp, #32]
   1228c:	str	r0, [sp, #64]	; 0x40
   12290:	cmp	r8, #10
   12294:	ldrls	pc, [pc, r8, lsl #2]
   12298:	b	13a48 <__assert_fail@plt+0x2b48>
   1229c:	muleq	r1, r0, r6
   122a0:	andeq	r2, r1, r8, lsr #14
   122a4:	andeq	r2, r1, r8, lsr #26
   122a8:	andeq	r2, r1, r8, asr #14
   122ac:	strdeq	r2, [r1], -ip
   122b0:	andeq	r2, r1, r4, asr #12
   122b4:	andeq	r2, r1, r0, asr #13
   122b8:	strdeq	r2, [r1], -r8
   122bc:	andeq	r2, r1, r8, asr #5
   122c0:	andeq	r2, r1, r8, asr #5
   122c4:	andeq	r2, r1, r8, asr #5
   122c8:	cmp	r8, #10
   122cc:	beq	122f0 <__assert_fail@plt+0x13f0>
   122d0:	mov	r1, r8
   122d4:	ldr	r0, [pc, #3428]	; 13040 <__assert_fail@plt+0x2140>
   122d8:	bl	120ec <__assert_fail@plt+0x11ec>
   122dc:	mov	r1, r8
   122e0:	str	r0, [sp, #80]	; 0x50
   122e4:	ldr	r0, [pc, #3420]	; 13048 <__assert_fail@plt+0x2148>
   122e8:	bl	120ec <__assert_fail@plt+0x11ec>
   122ec:	str	r0, [sp, #76]	; 0x4c
   122f0:	cmp	r4, #0
   122f4:	movne	r4, #0
   122f8:	beq	13708 <__assert_fail@plt+0x2808>
   122fc:	ldr	r7, [sp, #76]	; 0x4c
   12300:	mov	r5, #0
   12304:	mov	r6, #1
   12308:	mov	r0, r7
   1230c:	str	r6, [sp, #40]	; 0x28
   12310:	str	r5, [sp, #68]	; 0x44
   12314:	bl	10e34 <strlen@plt>
   12318:	str	r6, [sp, #28]
   1231c:	str	r5, [sp, #44]	; 0x2c
   12320:	str	r5, [sp, #72]	; 0x48
   12324:	str	r7, [sp, #60]	; 0x3c
   12328:	str	r0, [sp, #52]	; 0x34
   1232c:	str	r8, [sp, #160]	; 0xa0
   12330:	mov	r8, fp
   12334:	ldr	fp, [sp, #160]	; 0xa0
   12338:	mov	r9, #0
   1233c:	ldr	r3, [sp, #24]
   12340:	cmn	r3, #1
   12344:	beq	128ac <__assert_fail@plt+0x19ac>
   12348:	ldr	r3, [sp, #24]
   1234c:	subs	r6, r3, r9
   12350:	movne	r6, #1
   12354:	cmp	r6, #0
   12358:	beq	128c4 <__assert_fail@plt+0x19c4>
   1235c:	ldr	r7, [sp, #28]
   12360:	ldr	r0, [sp, #36]	; 0x24
   12364:	cmp	fp, #2
   12368:	moveq	r7, #0
   1236c:	andne	r7, r7, #1
   12370:	add	r3, r0, r9
   12374:	cmp	r7, #0
   12378:	str	r3, [sp, #48]	; 0x30
   1237c:	beq	12d68 <__assert_fail@plt+0x1e68>
   12380:	ldr	r2, [sp, #52]	; 0x34
   12384:	cmp	r2, #0
   12388:	beq	1304c <__assert_fail@plt+0x214c>
   1238c:	ldr	r1, [sp, #24]
   12390:	cmp	r2, #1
   12394:	mov	r3, r2
   12398:	movls	r3, #0
   1239c:	movhi	r3, #1
   123a0:	cmn	r1, #1
   123a4:	movne	r3, #0
   123a8:	cmp	r3, #0
   123ac:	add	r5, r9, r2
   123b0:	beq	123bc <__assert_fail@plt+0x14bc>
   123b4:	bl	10e34 <strlen@plt>
   123b8:	str	r0, [sp, #24]
   123bc:	ldr	r3, [sp, #24]
   123c0:	cmp	r5, r3
   123c4:	bhi	1304c <__assert_fail@plt+0x214c>
   123c8:	ldr	r2, [sp, #52]	; 0x34
   123cc:	ldr	r1, [sp, #60]	; 0x3c
   123d0:	ldr	r0, [sp, #48]	; 0x30
   123d4:	bl	10d20 <memcmp@plt>
   123d8:	cmp	r0, #0
   123dc:	bne	1304c <__assert_fail@plt+0x214c>
   123e0:	ldr	r3, [sp, #32]
   123e4:	cmp	r3, #0
   123e8:	bne	13908 <__assert_fail@plt+0x2a08>
   123ec:	ldr	r3, [sp, #48]	; 0x30
   123f0:	ldrb	r5, [r3]
   123f4:	cmp	r5, #126	; 0x7e
   123f8:	ldrls	pc, [pc, r5, lsl #2]
   123fc:	b	12ccc <__assert_fail@plt+0x1dcc>
   12400:			; <UNDEFINED> instruction: 0x00012bb8
   12404:	andeq	r2, r1, ip, asr #25
   12408:	andeq	r2, r1, ip, asr #25
   1240c:	andeq	r2, r1, ip, asr #25
   12410:	andeq	r2, r1, ip, asr #25
   12414:	andeq	r2, r1, ip, asr #25
   12418:	andeq	r2, r1, ip, asr #25
   1241c:	andeq	r2, r1, r4, lsl #25
   12420:	andeq	r2, r1, r4, ror ip
   12424:	andeq	r2, r1, r4, ror fp
   12428:	andeq	r2, r1, ip, lsr fp
   1242c:	muleq	r1, r4, fp
   12430:	andeq	r2, r1, ip, ror fp
   12434:	andeq	r2, r1, ip, lsr #21
   12438:	andeq	r2, r1, ip, asr #25
   1243c:	andeq	r2, r1, ip, asr #25
   12440:	andeq	r2, r1, ip, asr #25
   12444:	andeq	r2, r1, ip, asr #25
   12448:	andeq	r2, r1, ip, asr #25
   1244c:	andeq	r2, r1, ip, asr #25
   12450:	andeq	r2, r1, ip, asr #25
   12454:	andeq	r2, r1, ip, asr #25
   12458:	andeq	r2, r1, ip, asr #25
   1245c:	andeq	r2, r1, ip, asr #25
   12460:	andeq	r2, r1, ip, asr #25
   12464:	andeq	r2, r1, ip, asr #25
   12468:	andeq	r2, r1, ip, asr #25
   1246c:	andeq	r2, r1, ip, asr #25
   12470:	andeq	r2, r1, ip, asr #25
   12474:	andeq	r2, r1, ip, asr #25
   12478:	andeq	r2, r1, ip, asr #25
   1247c:	andeq	r2, r1, ip, asr #25
   12480:	andeq	r2, r1, ip, lsl #25
   12484:	andeq	r2, r1, r0, lsr #23
   12488:	andeq	r2, r1, r0, lsr #23
   1248c:	andeq	r2, r1, r4, lsr #25
   12490:	andeq	r2, r1, r0, lsr #23
   12494:	andeq	r2, r1, r0, asr #25
   12498:	andeq	r2, r1, r0, lsr #23
   1249c:	andeq	r2, r1, r0, ror #19
   124a0:	andeq	r2, r1, r0, lsr #23
   124a4:	andeq	r2, r1, r0, lsr #23
   124a8:	andeq	r2, r1, r0, lsr #23
   124ac:	andeq	r2, r1, r0, asr #25
   124b0:	andeq	r2, r1, r0, asr #25
   124b4:	andeq	r2, r1, r0, asr #25
   124b8:	andeq	r2, r1, r0, asr #25
   124bc:	andeq	r2, r1, r0, asr #25
   124c0:	andeq	r2, r1, r0, asr #25
   124c4:	andeq	r2, r1, r0, asr #25
   124c8:	andeq	r2, r1, r0, asr #25
   124cc:	andeq	r2, r1, r0, asr #25
   124d0:	andeq	r2, r1, r0, asr #25
   124d4:	andeq	r2, r1, r0, asr #25
   124d8:	andeq	r2, r1, r0, asr #25
   124dc:	andeq	r2, r1, r0, asr #25
   124e0:	andeq	r2, r1, r0, asr #25
   124e4:	andeq	r2, r1, r0, asr #25
   124e8:	andeq	r2, r1, r0, asr #25
   124ec:	andeq	r2, r1, r0, lsr #23
   124f0:	andeq	r2, r1, r0, lsr #23
   124f4:	andeq	r2, r1, r0, lsr #23
   124f8:	andeq	r2, r1, r0, lsr #23
   124fc:			; <UNDEFINED> instruction: 0x000129b4
   12500:	andeq	r2, r1, ip, asr #25
   12504:	andeq	r2, r1, r0, asr #25
   12508:	andeq	r2, r1, r0, asr #25
   1250c:	andeq	r2, r1, r0, asr #25
   12510:	andeq	r2, r1, r0, asr #25
   12514:	andeq	r2, r1, r0, asr #25
   12518:	andeq	r2, r1, r0, asr #25
   1251c:	andeq	r2, r1, r0, asr #25
   12520:	andeq	r2, r1, r0, asr #25
   12524:	andeq	r2, r1, r0, asr #25
   12528:	andeq	r2, r1, r0, asr #25
   1252c:	andeq	r2, r1, r0, asr #25
   12530:	andeq	r2, r1, r0, asr #25
   12534:	andeq	r2, r1, r0, asr #25
   12538:	andeq	r2, r1, r0, asr #25
   1253c:	andeq	r2, r1, r0, asr #25
   12540:	andeq	r2, r1, r0, asr #25
   12544:	andeq	r2, r1, r0, asr #25
   12548:	andeq	r2, r1, r0, asr #25
   1254c:	andeq	r2, r1, r0, asr #25
   12550:	andeq	r2, r1, r0, asr #25
   12554:	andeq	r2, r1, r0, asr #25
   12558:	andeq	r2, r1, r0, asr #25
   1255c:	andeq	r2, r1, r0, asr #25
   12560:	andeq	r2, r1, r0, asr #25
   12564:	andeq	r2, r1, r0, asr #25
   12568:	andeq	r2, r1, r0, asr #25
   1256c:	andeq	r2, r1, r0, lsr #23
   12570:	andeq	r2, r1, ip, ror #18
   12574:	andeq	r2, r1, r0, asr #25
   12578:	andeq	r2, r1, r0, lsr #23
   1257c:	andeq	r2, r1, r0, asr #25
   12580:	andeq	r2, r1, r0, lsr #23
   12584:	andeq	r2, r1, r0, asr #25
   12588:	andeq	r2, r1, r0, asr #25
   1258c:	andeq	r2, r1, r0, asr #25
   12590:	andeq	r2, r1, r0, asr #25
   12594:	andeq	r2, r1, r0, asr #25
   12598:	andeq	r2, r1, r0, asr #25
   1259c:	andeq	r2, r1, r0, asr #25
   125a0:	andeq	r2, r1, r0, asr #25
   125a4:	andeq	r2, r1, r0, asr #25
   125a8:	andeq	r2, r1, r0, asr #25
   125ac:	andeq	r2, r1, r0, asr #25
   125b0:	andeq	r2, r1, r0, asr #25
   125b4:	andeq	r2, r1, r0, asr #25
   125b8:	andeq	r2, r1, r0, asr #25
   125bc:	andeq	r2, r1, r0, asr #25
   125c0:	andeq	r2, r1, r0, asr #25
   125c4:	andeq	r2, r1, r0, asr #25
   125c8:	andeq	r2, r1, r0, asr #25
   125cc:	andeq	r2, r1, r0, asr #25
   125d0:	andeq	r2, r1, r0, asr #25
   125d4:	andeq	r2, r1, r0, asr #25
   125d8:	andeq	r2, r1, r0, asr #25
   125dc:	andeq	r2, r1, r0, asr #25
   125e0:	andeq	r2, r1, r0, asr #25
   125e4:	andeq	r2, r1, r0, asr #25
   125e8:	andeq	r2, r1, r0, asr #25
   125ec:	andeq	r2, r1, r4, lsl #15
   125f0:	andeq	r2, r1, r0, lsr #23
   125f4:	andeq	r2, r1, r4, lsl #15
   125f8:	andeq	r2, r1, r4, lsr #25
   125fc:	cmp	r4, #0
   12600:	moveq	r3, #1
   12604:	streq	r3, [sp, #28]
   12608:	beq	12d34 <__assert_fail@plt+0x1e34>
   1260c:	mov	r3, #0
   12610:	mov	r4, r3
   12614:	mov	r2, #1
   12618:	str	r2, [sp, #40]	; 0x28
   1261c:	str	r3, [sp, #68]	; 0x44
   12620:	str	r2, [sp, #32]
   12624:	str	r2, [sp, #52]	; 0x34
   12628:	ldr	r3, [pc, #2584]	; 13048 <__assert_fail@plt+0x2148>
   1262c:	str	r4, [sp, #44]	; 0x2c
   12630:	str	r4, [sp, #72]	; 0x48
   12634:	str	r4, [sp, #28]
   12638:	str	r3, [sp, #60]	; 0x3c
   1263c:	mov	r8, #2
   12640:	b	1232c <__assert_fail@plt+0x142c>
   12644:	cmp	r4, #0
   12648:	bne	138d4 <__assert_fail@plt+0x29d4>
   1264c:	cmp	sl, #0
   12650:	beq	13694 <__assert_fail@plt+0x2794>
   12654:	mov	r3, #34	; 0x22
   12658:	strb	r3, [fp]
   1265c:	ldr	r3, [pc, #2528]	; 13044 <__assert_fail@plt+0x2144>
   12660:	mov	r1, r4
   12664:	mov	r2, #1
   12668:	str	r4, [sp, #68]	; 0x44
   1266c:	str	r2, [sp, #40]	; 0x28
   12670:	mov	r4, r2
   12674:	str	r1, [sp, #44]	; 0x2c
   12678:	str	r1, [sp, #72]	; 0x48
   1267c:	str	r1, [sp, #32]
   12680:	str	r2, [sp, #28]
   12684:	str	r2, [sp, #52]	; 0x34
   12688:	str	r3, [sp, #60]	; 0x3c
   1268c:	b	1232c <__assert_fail@plt+0x142c>
   12690:	mov	r3, #0
   12694:	str	r3, [sp, #68]	; 0x44
   12698:	str	r3, [sp, #44]	; 0x2c
   1269c:	str	r3, [sp, #32]
   126a0:	str	r3, [sp, #28]
   126a4:	str	r3, [sp, #60]	; 0x3c
   126a8:	mov	r3, #1
   126ac:	str	r8, [sp, #72]	; 0x48
   126b0:	str	r8, [sp, #52]	; 0x34
   126b4:	mov	r4, r8
   126b8:	str	r3, [sp, #40]	; 0x28
   126bc:	b	1232c <__assert_fail@plt+0x142c>
   126c0:	mov	r3, #1
   126c4:	str	r3, [sp, #40]	; 0x28
   126c8:	str	r3, [sp, #32]
   126cc:	str	r3, [sp, #28]
   126d0:	str	r3, [sp, #52]	; 0x34
   126d4:	ldr	r3, [pc, #2408]	; 13044 <__assert_fail@plt+0x2144>
   126d8:	mov	r2, #0
   126dc:	mov	r4, r2
   126e0:	str	r2, [sp, #68]	; 0x44
   126e4:	str	r2, [sp, #44]	; 0x2c
   126e8:	str	r2, [sp, #72]	; 0x48
   126ec:	str	r3, [sp, #60]	; 0x3c
   126f0:	mov	r8, #5
   126f4:	b	1232c <__assert_fail@plt+0x142c>
   126f8:	mov	r3, #0
   126fc:	mov	r2, #1
   12700:	str	r2, [sp, #40]	; 0x28
   12704:	mov	r4, r3
   12708:	str	r3, [sp, #68]	; 0x44
   1270c:	str	r2, [sp, #28]
   12710:	str	r3, [sp, #44]	; 0x2c
   12714:	str	r3, [sp, #72]	; 0x48
   12718:	str	r3, [sp, #32]
   1271c:	str	r3, [sp, #52]	; 0x34
   12720:	str	r3, [sp, #60]	; 0x3c
   12724:	b	1232c <__assert_fail@plt+0x142c>
   12728:	mov	r2, #1
   1272c:	mov	r3, #0
   12730:	str	r2, [sp, #40]	; 0x28
   12734:	mov	r4, r3
   12738:	str	r3, [sp, #68]	; 0x44
   1273c:	str	r8, [sp, #52]	; 0x34
   12740:	str	r2, [sp, #32]
   12744:	b	12628 <__assert_fail@plt+0x1728>
   12748:	mov	r3, #1
   1274c:	str	r3, [sp, #40]	; 0x28
   12750:	str	r3, [sp, #32]
   12754:	str	r3, [sp, #28]
   12758:	str	r3, [sp, #52]	; 0x34
   1275c:	ldr	r3, [pc, #2276]	; 13048 <__assert_fail@plt+0x2148>
   12760:	mov	r2, #0
   12764:	mov	r4, r2
   12768:	str	r2, [sp, #68]	; 0x44
   1276c:	str	r2, [sp, #44]	; 0x2c
   12770:	str	r2, [sp, #72]	; 0x48
   12774:	str	r3, [sp, #60]	; 0x3c
   12778:	mov	r8, #2
   1277c:	b	1232c <__assert_fail@plt+0x142c>
   12780:	mov	r7, #0
   12784:	ldr	r3, [sp, #24]
   12788:	cmn	r3, #1
   1278c:	beq	132c8 <__assert_fail@plt+0x23c8>
   12790:	ldr	r3, [sp, #24]
   12794:	subs	r3, r3, #1
   12798:	movne	r3, #1
   1279c:	cmp	r3, #0
   127a0:	sub	r2, fp, #2
   127a4:	clz	r2, r2
   127a8:	lsr	r2, r2, #5
   127ac:	bne	129a8 <__assert_fail@plt+0x1aa8>
   127b0:	cmp	r9, #0
   127b4:	bne	129a8 <__assert_fail@plt+0x1aa8>
   127b8:	ldr	r3, [sp, #32]
   127bc:	tst	r3, r2
   127c0:	bne	12ac8 <__assert_fail@plt+0x1bc8>
   127c4:	ldr	r3, [sp, #28]
   127c8:	eor	r3, r3, #1
   127cc:	orr	r3, r2, r3
   127d0:	ldr	r2, [sp, #32]
   127d4:	eor	r3, r3, #1
   127d8:	orrs	r3, r2, r3
   127dc:	beq	1280c <__assert_fail@plt+0x190c>
   127e0:	mov	r3, #0
   127e4:	ldr	r1, [sp, #56]	; 0x38
   127e8:	cmp	r1, #0
   127ec:	beq	1280c <__assert_fail@plt+0x190c>
   127f0:	lsr	r2, r5, #5
   127f4:	and	r0, r5, #31
   127f8:	uxtb	r2, r2
   127fc:	ldr	r1, [r1, r2, lsl #2]
   12800:	lsr	r2, r1, r0
   12804:	tst	r2, #1
   12808:	bne	12814 <__assert_fail@plt+0x1914>
   1280c:	cmp	r7, #0
   12810:	beq	12a64 <__assert_fail@plt+0x1b64>
   12814:	sub	r2, fp, #2
   12818:	clz	r2, r2
   1281c:	lsr	r2, r2, #5
   12820:	ldr	r3, [sp, #32]
   12824:	cmp	r3, #0
   12828:	bne	12b54 <__assert_fail@plt+0x1c54>
   1282c:	ldr	r3, [sp, #44]	; 0x2c
   12830:	eor	r3, r3, #1
   12834:	ands	r3, r2, r3
   12838:	beq	12870 <__assert_fail@plt+0x1970>
   1283c:	cmp	sl, r4
   12840:	movhi	r2, #39	; 0x27
   12844:	strbhi	r2, [r8, r4]
   12848:	add	r2, r4, #1
   1284c:	cmp	r2, sl
   12850:	movcc	r1, #36	; 0x24
   12854:	strbcc	r1, [r8, r2]
   12858:	add	r2, r4, #2
   1285c:	cmp	r2, sl
   12860:	add	r4, r4, #3
   12864:	movcc	r1, #39	; 0x27
   12868:	strbcc	r1, [r8, r2]
   1286c:	str	r3, [sp, #44]	; 0x2c
   12870:	cmp	r4, sl
   12874:	movcc	r3, #92	; 0x5c
   12878:	strbcc	r3, [r8, r4]
   1287c:	add	r9, r9, #1
   12880:	add	r4, r4, #1
   12884:	cmp	r4, sl
   12888:	ldr	r3, [sp, #40]	; 0x28
   1288c:	strbcc	r5, [r8, r4]
   12890:	cmp	r6, #0
   12894:	moveq	r3, #0
   12898:	str	r3, [sp, #40]	; 0x28
   1289c:	ldr	r3, [sp, #24]
   128a0:	add	r4, r4, #1
   128a4:	cmn	r3, #1
   128a8:	bne	12348 <__assert_fail@plt+0x1448>
   128ac:	ldr	r3, [sp, #36]	; 0x24
   128b0:	ldrb	r6, [r3, r9]
   128b4:	adds	r6, r6, #0
   128b8:	movne	r6, #1
   128bc:	cmp	r6, #0
   128c0:	bne	1235c <__assert_fail@plt+0x145c>
   128c4:	str	fp, [sp, #160]	; 0xa0
   128c8:	mov	fp, r8
   128cc:	ldr	r8, [sp, #160]	; 0xa0
   128d0:	ldr	r1, [sp, #32]
   128d4:	cmp	r4, #0
   128d8:	sub	r2, r8, #2
   128dc:	clz	r2, r2
   128e0:	lsr	r2, r2, #5
   128e4:	andeq	r3, r2, r1
   128e8:	movne	r3, #0
   128ec:	cmp	r3, #0
   128f0:	bne	139dc <__assert_fail@plt+0x2adc>
   128f4:	eor	r3, r1, #1
   128f8:	ands	r2, r2, r3
   128fc:	beq	13918 <__assert_fail@plt+0x2a18>
   12900:	ldr	r3, [sp, #68]	; 0x44
   12904:	cmp	r3, #0
   12908:	beq	1391c <__assert_fail@plt+0x2a1c>
   1290c:	ldr	r3, [sp, #40]	; 0x28
   12910:	cmp	r3, #0
   12914:	bne	13998 <__assert_fail@plt+0x2a98>
   12918:	ldr	r3, [sp, #72]	; 0x48
   1291c:	adds	r3, r3, #0
   12920:	movne	r3, #1
   12924:	cmp	sl, #0
   12928:	movne	r3, #0
   1292c:	cmp	r3, #0
   12930:	ldreq	r2, [sp, #68]	; 0x44
   12934:	beq	1391c <__assert_fail@plt+0x2a1c>
   12938:	ldr	sl, [sp, #72]	; 0x48
   1293c:	str	r3, [sp, #68]	; 0x44
   12940:	ldr	r3, [pc, #1792]	; 13048 <__assert_fail@plt+0x2148>
   12944:	mov	r2, #39	; 0x27
   12948:	mov	r4, #1
   1294c:	str	r3, [sp, #60]	; 0x3c
   12950:	mov	r3, #0
   12954:	strb	r2, [fp]
   12958:	str	r4, [sp, #52]	; 0x34
   1295c:	mov	r8, #2
   12960:	str	r3, [sp, #32]
   12964:	b	1232c <__assert_fail@plt+0x142c>
   12968:	mov	r7, #0
   1296c:	cmp	fp, #2
   12970:	beq	132a8 <__assert_fail@plt+0x23a8>
   12974:	ldr	r3, [sp, #52]	; 0x34
   12978:	ldr	r2, [sp, #28]
   1297c:	ldr	r1, [sp, #32]
   12980:	cmp	r3, #0
   12984:	andne	r2, r2, r1
   12988:	moveq	r2, #0
   1298c:	cmp	r2, #0
   12990:	moveq	r5, #92	; 0x5c
   12994:	moveq	r3, r5
   12998:	bne	132b4 <__assert_fail@plt+0x23b4>
   1299c:	ldr	r1, [sp, #28]
   129a0:	cmp	r1, #0
   129a4:	bne	13a24 <__assert_fail@plt+0x2b24>
   129a8:	mov	r6, #0
   129ac:	b	127c4 <__assert_fail@plt+0x18c4>
   129b0:	mov	r7, #0
   129b4:	cmp	fp, #2
   129b8:	beq	13318 <__assert_fail@plt+0x2418>
   129bc:	cmp	fp, #5
   129c0:	beq	132dc <__assert_fail@plt+0x23dc>
   129c4:	sub	r2, fp, #2
   129c8:	mov	r6, #0
   129cc:	clz	r2, r2
   129d0:	mov	r5, #63	; 0x3f
   129d4:	lsr	r2, r2, #5
   129d8:	b	127c4 <__assert_fail@plt+0x18c4>
   129dc:	mov	r7, #0
   129e0:	cmp	fp, #2
   129e4:	strne	r6, [sp, #68]	; 0x44
   129e8:	movne	r2, #0
   129ec:	movne	r5, #39	; 0x27
   129f0:	bne	127c4 <__assert_fail@plt+0x18c4>
   129f4:	ldr	r3, [sp, #32]
   129f8:	cmp	r3, #0
   129fc:	bne	136f8 <__assert_fail@plt+0x27f8>
   12a00:	cmp	sl, #0
   12a04:	ldr	r3, [sp, #72]	; 0x48
   12a08:	clz	r3, r3
   12a0c:	lsr	r3, r3, #5
   12a10:	moveq	r3, #0
   12a14:	cmp	r3, #0
   12a18:	bne	1362c <__assert_fail@plt+0x272c>
   12a1c:	cmp	sl, r4
   12a20:	movhi	r3, #39	; 0x27
   12a24:	strbhi	r3, [r8, r4]
   12a28:	add	r3, r4, #1
   12a2c:	cmp	sl, r3
   12a30:	movhi	r2, #92	; 0x5c
   12a34:	strbhi	r2, [r8, r3]
   12a38:	add	r3, r4, #2
   12a3c:	cmp	sl, r3
   12a40:	movhi	r2, #39	; 0x27
   12a44:	strbhi	r2, [r8, r3]
   12a48:	mov	r3, #0
   12a4c:	cmp	r7, #0
   12a50:	add	r4, r4, #3
   12a54:	str	r3, [sp, #44]	; 0x2c
   12a58:	str	r6, [sp, #68]	; 0x44
   12a5c:	mov	r5, #39	; 0x27
   12a60:	bne	12814 <__assert_fail@plt+0x1914>
   12a64:	ldr	r2, [sp, #44]	; 0x2c
   12a68:	eor	r3, r3, #1
   12a6c:	and	r3, r3, r2
   12a70:	add	r9, r9, #1
   12a74:	uxtb	r3, r3
   12a78:	cmp	r3, #0
   12a7c:	beq	12884 <__assert_fail@plt+0x1984>
   12a80:	cmp	sl, r4
   12a84:	movhi	r3, #39	; 0x27
   12a88:	strbhi	r3, [r8, r4]
   12a8c:	add	r3, r4, #1
   12a90:	cmp	sl, r3
   12a94:	movhi	r2, #39	; 0x27
   12a98:	strbhi	r2, [r8, r3]
   12a9c:	mov	r3, #0
   12aa0:	add	r4, r4, #2
   12aa4:	str	r3, [sp, #44]	; 0x2c
   12aa8:	b	12884 <__assert_fail@plt+0x1984>
   12aac:	mov	r3, #114	; 0x72
   12ab0:	ldr	r1, [sp, #32]
   12ab4:	sub	r2, fp, #2
   12ab8:	clz	r2, r2
   12abc:	lsr	r2, r2, #5
   12ac0:	tst	r2, r1
   12ac4:	beq	1299c <__assert_fail@plt+0x1a9c>
   12ac8:	mov	fp, r8
   12acc:	mov	r8, #2
   12ad0:	ldr	r3, [sp, #28]
   12ad4:	cmp	r3, #0
   12ad8:	movne	r8, #4
   12adc:	ldr	r3, [sp, #164]	; 0xa4
   12ae0:	mov	ip, #0
   12ae4:	bic	r3, r3, #2
   12ae8:	str	r3, [sp, #4]
   12aec:	ldr	r3, [sp, #76]	; 0x4c
   12af0:	str	r8, [sp]
   12af4:	str	r3, [sp, #16]
   12af8:	ldr	r3, [sp, #80]	; 0x50
   12afc:	ldr	r2, [sp, #36]	; 0x24
   12b00:	str	r3, [sp, #12]
   12b04:	mov	r1, sl
   12b08:	ldr	r3, [sp, #24]
   12b0c:	mov	r0, fp
   12b10:	str	ip, [sp, #8]
   12b14:	bl	12234 <__assert_fail@plt+0x1334>
   12b18:	mov	r4, r0
   12b1c:	ldr	r3, [pc, #1304]	; 1303c <__assert_fail@plt+0x213c>
   12b20:	ldr	r2, [sp, #116]	; 0x74
   12b24:	mov	r0, r4
   12b28:	ldr	r3, [r3]
   12b2c:	cmp	r2, r3
   12b30:	bne	13a20 <__assert_fail@plt+0x2b20>
   12b34:	add	sp, sp, #124	; 0x7c
   12b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b3c:	mov	r5, #110	; 0x6e
   12b40:	ldr	r3, [sp, #32]
   12b44:	mov	r2, #0
   12b48:	cmp	r3, #0
   12b4c:	mov	r6, r2
   12b50:	beq	1282c <__assert_fail@plt+0x192c>
   12b54:	str	fp, [sp, #160]	; 0xa0
   12b58:	mov	fp, r8
   12b5c:	ldr	r8, [sp, #160]	; 0xa0
   12b60:	mov	r3, r2
   12b64:	ldr	r2, [sp, #28]
   12b68:	and	r2, r2, r3
   12b6c:	str	r2, [sp, #28]
   12b70:	b	12ad0 <__assert_fail@plt+0x1bd0>
   12b74:	mov	r5, #116	; 0x74
   12b78:	b	12b40 <__assert_fail@plt+0x1c40>
   12b7c:	mov	r5, #102	; 0x66
   12b80:	ldr	r3, [sp, #32]
   12b84:	cmp	r3, #0
   12b88:	bne	13734 <__assert_fail@plt+0x2834>
   12b8c:	mov	r6, #0
   12b90:	b	12870 <__assert_fail@plt+0x1970>
   12b94:	mov	r5, #118	; 0x76
   12b98:	b	12b80 <__assert_fail@plt+0x1c80>
   12b9c:	mov	r7, #0
   12ba0:	mov	r6, #0
   12ba4:	b	127e0 <__assert_fail@plt+0x18e0>
   12ba8:	ldr	r3, [sp, #32]
   12bac:	cmp	r3, #0
   12bb0:	bne	13978 <__assert_fail@plt+0x2a78>
   12bb4:	mov	r7, r3
   12bb8:	ldr	r3, [sp, #44]	; 0x2c
   12bbc:	sub	r2, fp, #2
   12bc0:	eor	r3, r3, #1
   12bc4:	clz	r2, r2
   12bc8:	lsr	r2, r2, #5
   12bcc:	ands	r3, r2, r3
   12bd0:	beq	13618 <__assert_fail@plt+0x2718>
   12bd4:	cmp	sl, r4
   12bd8:	movhi	r1, #39	; 0x27
   12bdc:	strbhi	r1, [r8, r4]
   12be0:	add	r1, r4, #1
   12be4:	cmp	sl, r1
   12be8:	movhi	r0, #36	; 0x24
   12bec:	strbhi	r0, [r8, r1]
   12bf0:	add	r1, r4, #2
   12bf4:	cmp	sl, r1
   12bf8:	movhi	r0, #39	; 0x27
   12bfc:	strbhi	r0, [r8, r1]
   12c00:	add	r1, r4, #3
   12c04:	cmp	sl, r1
   12c08:	bls	13678 <__assert_fail@plt+0x2778>
   12c0c:	mov	r4, r1
   12c10:	mov	r1, #92	; 0x5c
   12c14:	strb	r1, [r8, r4]
   12c18:	mov	r1, r4
   12c1c:	str	r3, [sp, #44]	; 0x2c
   12c20:	cmp	fp, #2
   12c24:	add	r4, r4, #1
   12c28:	beq	136c0 <__assert_fail@plt+0x27c0>
   12c2c:	ldr	r0, [sp, #24]
   12c30:	add	r3, r9, #1
   12c34:	cmp	r3, r0
   12c38:	bcs	12c50 <__assert_fail@plt+0x1d50>
   12c3c:	ldr	r0, [sp, #36]	; 0x24
   12c40:	ldrb	r3, [r0, r3]
   12c44:	sub	r3, r3, #48	; 0x30
   12c48:	cmp	r3, #9
   12c4c:	bls	136d0 <__assert_fail@plt+0x27d0>
   12c50:	mov	r5, #48	; 0x30
   12c54:	ldr	r3, [sp, #28]
   12c58:	eor	r3, r3, #1
   12c5c:	orrs	r2, r2, r3
   12c60:	mov	r3, r6
   12c64:	moveq	r6, r2
   12c68:	beq	127e4 <__assert_fail@plt+0x18e4>
   12c6c:	mov	r6, #0
   12c70:	b	1280c <__assert_fail@plt+0x190c>
   12c74:	mov	r2, #0
   12c78:	mov	r6, r2
   12c7c:	mov	r5, #98	; 0x62
   12c80:	b	1282c <__assert_fail@plt+0x192c>
   12c84:	mov	r5, #97	; 0x61
   12c88:	b	12b8c <__assert_fail@plt+0x1c8c>
   12c8c:	mov	r3, r7
   12c90:	mov	r6, r7
   12c94:	mov	r2, #0
   12c98:	mov	r7, r3
   12c9c:	mov	r5, #32
   12ca0:	b	127c4 <__assert_fail@plt+0x18c4>
   12ca4:	cmp	r9, #0
   12ca8:	mov	r3, r7
   12cac:	bne	13274 <__assert_fail@plt+0x2374>
   12cb0:	mov	r6, r7
   12cb4:	mov	r2, r9
   12cb8:	mov	r7, r3
   12cbc:	b	127c4 <__assert_fail@plt+0x18c4>
   12cc0:	mov	r6, r7
   12cc4:	b	127e0 <__assert_fail@plt+0x18e0>
   12cc8:	mov	r7, #0
   12ccc:	ldr	r3, [sp, #64]	; 0x40
   12cd0:	cmp	r3, #1
   12cd4:	bne	13330 <__assert_fail@plt+0x2430>
   12cd8:	bl	10e1c <__ctype_b_loc@plt>
   12cdc:	ldr	r2, [sp, #64]	; 0x40
   12ce0:	sxth	r3, r5
   12ce4:	mov	ip, r2
   12ce8:	lsl	r3, r3, #1
   12cec:	ldr	r2, [r0]
   12cf0:	ldrh	r3, [r2, r3]
   12cf4:	and	r3, r3, #16384	; 0x4000
   12cf8:	cmp	r3, #0
   12cfc:	ldr	r3, [sp, #28]
   12d00:	movne	r6, #1
   12d04:	moveq	r6, #0
   12d08:	movne	r2, #0
   12d0c:	andeq	r2, r3, #1
   12d10:	cmp	r2, #0
   12d14:	bne	13640 <__assert_fail@plt+0x2740>
   12d18:	sub	r2, fp, #2
   12d1c:	clz	r2, r2
   12d20:	lsr	r2, r2, #5
   12d24:	b	127c4 <__assert_fail@plt+0x18c4>
   12d28:	cmp	r4, #0
   12d2c:	bne	139ec <__assert_fail@plt+0x2aec>
   12d30:	str	r4, [sp, #28]
   12d34:	cmp	sl, #0
   12d38:	bne	13a30 <__assert_fail@plt+0x2b30>
   12d3c:	ldr	r3, [pc, #772]	; 13048 <__assert_fail@plt+0x2148>
   12d40:	mov	r4, #1
   12d44:	str	r4, [sp, #40]	; 0x28
   12d48:	str	r3, [sp, #60]	; 0x3c
   12d4c:	str	r4, [sp, #52]	; 0x34
   12d50:	str	sl, [sp, #72]	; 0x48
   12d54:	str	sl, [sp, #68]	; 0x44
   12d58:	str	sl, [sp, #44]	; 0x2c
   12d5c:	str	sl, [sp, #32]
   12d60:	mov	r8, #2
   12d64:	b	1232c <__assert_fail@plt+0x142c>
   12d68:	ldr	r3, [sp, #36]	; 0x24
   12d6c:	ldrb	r5, [r3, r9]
   12d70:	cmp	r5, #126	; 0x7e
   12d74:	ldrls	pc, [pc, r5, lsl #2]
   12d78:	b	12ccc <__assert_fail@plt+0x1dcc>
   12d7c:			; <UNDEFINED> instruction: 0x00012fb0
   12d80:	andeq	r2, r1, ip, asr #25
   12d84:	andeq	r2, r1, ip, asr #25
   12d88:	andeq	r2, r1, ip, asr #25
   12d8c:	andeq	r2, r1, ip, asr #25
   12d90:	andeq	r2, r1, ip, asr #25
   12d94:	andeq	r2, r1, ip, asr #25
   12d98:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12d9c:	andeq	r2, r1, r8, lsl #31
   12da0:	andeq	r2, r1, r0, lsl #31
   12da4:	andeq	r2, r1, r8, ror pc
   12da8:	andeq	r3, r1, r8, lsr #32
   12dac:	andeq	r3, r1, r4, lsl r0
   12db0:	andeq	r2, r1, ip, lsr #21
   12db4:	andeq	r2, r1, ip, asr #25
   12db8:	andeq	r2, r1, ip, asr #25
   12dbc:	andeq	r2, r1, ip, asr #25
   12dc0:	andeq	r2, r1, ip, asr #25
   12dc4:	andeq	r2, r1, ip, asr #25
   12dc8:	andeq	r2, r1, ip, asr #25
   12dcc:	andeq	r2, r1, ip, asr #25
   12dd0:	andeq	r2, r1, ip, asr #25
   12dd4:	andeq	r2, r1, ip, asr #25
   12dd8:	andeq	r2, r1, ip, asr #25
   12ddc:	andeq	r2, r1, ip, asr #25
   12de0:	andeq	r2, r1, ip, asr #25
   12de4:	andeq	r2, r1, ip, asr #25
   12de8:	andeq	r2, r1, ip, asr #25
   12dec:	andeq	r2, r1, ip, asr #25
   12df0:	andeq	r2, r1, ip, asr #25
   12df4:	andeq	r2, r1, ip, asr #25
   12df8:	andeq	r2, r1, ip, asr #25
   12dfc:	andeq	r3, r1, r4
   12e00:	strdeq	r2, [r1], -r0
   12e04:	strdeq	r2, [r1], -r0
   12e08:	andeq	r2, r1, r0, ror #31
   12e0c:	strdeq	r2, [r1], -r0
   12e10:	andeq	r2, r1, r8, lsl sp
   12e14:	strdeq	r2, [r1], -r0
   12e18:	andeq	r2, r1, r0, ror #19
   12e1c:	strdeq	r2, [r1], -r0
   12e20:	strdeq	r2, [r1], -r0
   12e24:	strdeq	r2, [r1], -r0
   12e28:	andeq	r2, r1, r8, lsl sp
   12e2c:	andeq	r2, r1, r8, lsl sp
   12e30:	andeq	r2, r1, r8, lsl sp
   12e34:	andeq	r2, r1, r8, lsl sp
   12e38:	andeq	r2, r1, r8, lsl sp
   12e3c:	andeq	r2, r1, r8, lsl sp
   12e40:	andeq	r2, r1, r8, lsl sp
   12e44:	andeq	r2, r1, r8, lsl sp
   12e48:	andeq	r2, r1, r8, lsl sp
   12e4c:	andeq	r2, r1, r8, lsl sp
   12e50:	andeq	r2, r1, r8, lsl sp
   12e54:	andeq	r2, r1, r8, lsl sp
   12e58:	andeq	r2, r1, r8, lsl sp
   12e5c:	andeq	r2, r1, r8, lsl sp
   12e60:	andeq	r2, r1, r8, lsl sp
   12e64:	andeq	r2, r1, r8, lsl sp
   12e68:	strdeq	r2, [r1], -r0
   12e6c:	strdeq	r2, [r1], -r0
   12e70:	strdeq	r2, [r1], -r0
   12e74:	strdeq	r2, [r1], -r0
   12e78:			; <UNDEFINED> instruction: 0x000129b4
   12e7c:	andeq	r2, r1, ip, asr #25
   12e80:	andeq	r2, r1, r8, lsl sp
   12e84:	andeq	r2, r1, r8, lsl sp
   12e88:	andeq	r2, r1, r8, lsl sp
   12e8c:	andeq	r2, r1, r8, lsl sp
   12e90:	andeq	r2, r1, r8, lsl sp
   12e94:	andeq	r2, r1, r8, lsl sp
   12e98:	andeq	r2, r1, r8, lsl sp
   12e9c:	andeq	r2, r1, r8, lsl sp
   12ea0:	andeq	r2, r1, r8, lsl sp
   12ea4:	andeq	r2, r1, r8, lsl sp
   12ea8:	andeq	r2, r1, r8, lsl sp
   12eac:	andeq	r2, r1, r8, lsl sp
   12eb0:	andeq	r2, r1, r8, lsl sp
   12eb4:	andeq	r2, r1, r8, lsl sp
   12eb8:	andeq	r2, r1, r8, lsl sp
   12ebc:	andeq	r2, r1, r8, lsl sp
   12ec0:	andeq	r2, r1, r8, lsl sp
   12ec4:	andeq	r2, r1, r8, lsl sp
   12ec8:	andeq	r2, r1, r8, lsl sp
   12ecc:	andeq	r2, r1, r8, lsl sp
   12ed0:	andeq	r2, r1, r8, lsl sp
   12ed4:	andeq	r2, r1, r8, lsl sp
   12ed8:	andeq	r2, r1, r8, lsl sp
   12edc:	andeq	r2, r1, r8, lsl sp
   12ee0:	andeq	r2, r1, r8, lsl sp
   12ee4:	andeq	r2, r1, r8, lsl sp
   12ee8:	strdeq	r2, [r1], -r0
   12eec:	andeq	r2, r1, ip, ror #18
   12ef0:	andeq	r2, r1, r8, lsl sp
   12ef4:	strdeq	r2, [r1], -r0
   12ef8:	andeq	r2, r1, r8, lsl sp
   12efc:	strdeq	r2, [r1], -r0
   12f00:	andeq	r2, r1, r8, lsl sp
   12f04:	andeq	r2, r1, r8, lsl sp
   12f08:	andeq	r2, r1, r8, lsl sp
   12f0c:	andeq	r2, r1, r8, lsl sp
   12f10:	andeq	r2, r1, r8, lsl sp
   12f14:	andeq	r2, r1, r8, lsl sp
   12f18:	andeq	r2, r1, r8, lsl sp
   12f1c:	andeq	r2, r1, r8, lsl sp
   12f20:	andeq	r2, r1, r8, lsl sp
   12f24:	andeq	r2, r1, r8, lsl sp
   12f28:	andeq	r2, r1, r8, lsl sp
   12f2c:	andeq	r2, r1, r8, lsl sp
   12f30:	andeq	r2, r1, r8, lsl sp
   12f34:	andeq	r2, r1, r8, lsl sp
   12f38:	andeq	r2, r1, r8, lsl sp
   12f3c:	andeq	r2, r1, r8, lsl sp
   12f40:	andeq	r2, r1, r8, lsl sp
   12f44:	andeq	r2, r1, r8, lsl sp
   12f48:	andeq	r2, r1, r8, lsl sp
   12f4c:	andeq	r2, r1, r8, lsl sp
   12f50:	andeq	r2, r1, r8, lsl sp
   12f54:	andeq	r2, r1, r8, lsl sp
   12f58:	andeq	r2, r1, r8, lsl sp
   12f5c:	andeq	r2, r1, r8, lsl sp
   12f60:	andeq	r2, r1, r8, lsl sp
   12f64:	andeq	r2, r1, r8, lsl sp
   12f68:	andeq	r2, r1, r4, lsl #15
   12f6c:	strdeq	r2, [r1], -r0
   12f70:	andeq	r2, r1, r4, lsl #15
   12f74:	andeq	r2, r1, r0, ror #31
   12f78:	mov	r3, #110	; 0x6e
   12f7c:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12f80:	mov	r3, #116	; 0x74
   12f84:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12f88:	sub	r2, fp, #2
   12f8c:	mov	r3, #98	; 0x62
   12f90:	clz	r2, r2
   12f94:	lsr	r2, r2, #5
   12f98:	b	1299c <__assert_fail@plt+0x1a9c>
   12f9c:	sub	r2, fp, #2
   12fa0:	mov	r3, #97	; 0x61
   12fa4:	clz	r2, r2
   12fa8:	lsr	r2, r2, #5
   12fac:	b	1299c <__assert_fail@plt+0x1a9c>
   12fb0:	ldr	r3, [sp, #28]
   12fb4:	cmp	r3, #0
   12fb8:	bne	12ba8 <__assert_fail@plt+0x1ca8>
   12fbc:	ldr	r3, [sp, #164]	; 0xa4
   12fc0:	tst	r3, #1
   12fc4:	bne	13638 <__assert_fail@plt+0x2738>
   12fc8:	ldr	r6, [sp, #28]
   12fcc:	sub	r2, fp, #2
   12fd0:	mov	r7, r6
   12fd4:	clz	r2, r2
   12fd8:	lsr	r2, r2, #5
   12fdc:	b	127c4 <__assert_fail@plt+0x18c4>
   12fe0:	sub	r2, fp, #2
   12fe4:	clz	r2, r2
   12fe8:	lsr	r2, r2, #5
   12fec:	b	127b0 <__assert_fail@plt+0x18b0>
   12ff0:	sub	r2, fp, #2
   12ff4:	mov	r6, #0
   12ff8:	clz	r2, r2
   12ffc:	lsr	r2, r2, #5
   13000:	b	127b8 <__assert_fail@plt+0x18b8>
   13004:	sub	r2, fp, #2
   13008:	clz	r2, r2
   1300c:	lsr	r2, r2, #5
   13010:	b	127b8 <__assert_fail@plt+0x18b8>
   13014:	sub	r2, fp, #2
   13018:	mov	r3, #102	; 0x66
   1301c:	clz	r2, r2
   13020:	lsr	r2, r2, #5
   13024:	b	1299c <__assert_fail@plt+0x1a9c>
   13028:	sub	r2, fp, #2
   1302c:	mov	r3, #118	; 0x76
   13030:	clz	r2, r2
   13034:	lsr	r2, r2, #5
   13038:	b	1299c <__assert_fail@plt+0x1a9c>
   1303c:	andeq	r5, r2, r8, lsl #30
   13040:	ldrdeq	r5, [r1], -r8
   13044:	andeq	r5, r1, r0, asr #17
   13048:	ldrdeq	r5, [r1], -r4
   1304c:	ldr	r3, [sp, #48]	; 0x30
   13050:	ldrb	r5, [r3]
   13054:	cmp	r5, #126	; 0x7e
   13058:	ldrls	pc, [pc, r5, lsl #2]
   1305c:	b	12cc8 <__assert_fail@plt+0x1dc8>
   13060:	andeq	r2, r1, r8, lsr #23
   13064:	andeq	r2, r1, r8, asr #25
   13068:	andeq	r2, r1, r8, asr #25
   1306c:	andeq	r2, r1, r8, asr #25
   13070:	andeq	r2, r1, r8, asr #25
   13074:	andeq	r2, r1, r8, asr #25
   13078:	andeq	r2, r1, r8, asr #25
   1307c:	andeq	r3, r1, r0, lsr #5
   13080:	muleq	r1, r8, r2
   13084:	andeq	r2, r1, r4, ror fp
   13088:	andeq	r2, r1, ip, lsr fp
   1308c:	muleq	r1, r4, fp
   13090:	andeq	r2, r1, ip, ror fp
   13094:	andeq	r3, r1, ip, lsl #5
   13098:	andeq	r2, r1, r8, asr #25
   1309c:	andeq	r2, r1, r8, asr #25
   130a0:	andeq	r2, r1, r8, asr #25
   130a4:	andeq	r2, r1, r8, asr #25
   130a8:	andeq	r2, r1, r8, asr #25
   130ac:	andeq	r2, r1, r8, asr #25
   130b0:	andeq	r2, r1, r8, asr #25
   130b4:	andeq	r2, r1, r8, asr #25
   130b8:	andeq	r2, r1, r8, asr #25
   130bc:	andeq	r2, r1, r8, asr #25
   130c0:	andeq	r2, r1, r8, asr #25
   130c4:	andeq	r2, r1, r8, asr #25
   130c8:	andeq	r2, r1, r8, asr #25
   130cc:	andeq	r2, r1, r8, asr #25
   130d0:	andeq	r2, r1, r8, asr #25
   130d4:	andeq	r2, r1, r8, asr #25
   130d8:	andeq	r2, r1, r8, asr #25
   130dc:	andeq	r2, r1, r8, asr #25
   130e0:	andeq	r3, r1, r4, lsl #5
   130e4:	muleq	r1, ip, fp
   130e8:	muleq	r1, ip, fp
   130ec:	andeq	r3, r1, r8, ror #4
   130f0:	muleq	r1, ip, fp
   130f4:	andeq	r3, r1, ip, asr r2
   130f8:	muleq	r1, ip, fp
   130fc:	ldrdeq	r2, [r1], -ip
   13100:	muleq	r1, ip, fp
   13104:	muleq	r1, ip, fp
   13108:	muleq	r1, ip, fp
   1310c:	andeq	r3, r1, ip, asr r2
   13110:	andeq	r3, r1, ip, asr r2
   13114:	andeq	r3, r1, ip, asr r2
   13118:	andeq	r3, r1, ip, asr r2
   1311c:	andeq	r3, r1, ip, asr r2
   13120:	andeq	r3, r1, ip, asr r2
   13124:	andeq	r3, r1, ip, asr r2
   13128:	andeq	r3, r1, ip, asr r2
   1312c:	andeq	r3, r1, ip, asr r2
   13130:	andeq	r3, r1, ip, asr r2
   13134:	andeq	r3, r1, ip, asr r2
   13138:	andeq	r3, r1, ip, asr r2
   1313c:	andeq	r3, r1, ip, asr r2
   13140:	andeq	r3, r1, ip, asr r2
   13144:	andeq	r3, r1, ip, asr r2
   13148:	andeq	r3, r1, ip, asr r2
   1314c:	muleq	r1, ip, fp
   13150:	muleq	r1, ip, fp
   13154:	muleq	r1, ip, fp
   13158:	muleq	r1, ip, fp
   1315c:			; <UNDEFINED> instruction: 0x000129b0
   13160:	andeq	r2, r1, r8, asr #25
   13164:	andeq	r3, r1, ip, asr r2
   13168:	andeq	r3, r1, ip, asr r2
   1316c:	andeq	r3, r1, ip, asr r2
   13170:	andeq	r3, r1, ip, asr r2
   13174:	andeq	r3, r1, ip, asr r2
   13178:	andeq	r3, r1, ip, asr r2
   1317c:	andeq	r3, r1, ip, asr r2
   13180:	andeq	r3, r1, ip, asr r2
   13184:	andeq	r3, r1, ip, asr r2
   13188:	andeq	r3, r1, ip, asr r2
   1318c:	andeq	r3, r1, ip, asr r2
   13190:	andeq	r3, r1, ip, asr r2
   13194:	andeq	r3, r1, ip, asr r2
   13198:	andeq	r3, r1, ip, asr r2
   1319c:	andeq	r3, r1, ip, asr r2
   131a0:	andeq	r3, r1, ip, asr r2
   131a4:	andeq	r3, r1, ip, asr r2
   131a8:	andeq	r3, r1, ip, asr r2
   131ac:	andeq	r3, r1, ip, asr r2
   131b0:	andeq	r3, r1, ip, asr r2
   131b4:	andeq	r3, r1, ip, asr r2
   131b8:	andeq	r3, r1, ip, asr r2
   131bc:	andeq	r3, r1, ip, asr r2
   131c0:	andeq	r3, r1, ip, asr r2
   131c4:	andeq	r3, r1, ip, asr r2
   131c8:	andeq	r3, r1, ip, asr r2
   131cc:	muleq	r1, ip, fp
   131d0:	andeq	r2, r1, r8, ror #18
   131d4:	andeq	r3, r1, ip, asr r2
   131d8:	muleq	r1, ip, fp
   131dc:	andeq	r3, r1, ip, asr r2
   131e0:	muleq	r1, ip, fp
   131e4:	andeq	r3, r1, ip, asr r2
   131e8:	andeq	r3, r1, ip, asr r2
   131ec:	andeq	r3, r1, ip, asr r2
   131f0:	andeq	r3, r1, ip, asr r2
   131f4:	andeq	r3, r1, ip, asr r2
   131f8:	andeq	r3, r1, ip, asr r2
   131fc:	andeq	r3, r1, ip, asr r2
   13200:	andeq	r3, r1, ip, asr r2
   13204:	andeq	r3, r1, ip, asr r2
   13208:	andeq	r3, r1, ip, asr r2
   1320c:	andeq	r3, r1, ip, asr r2
   13210:	andeq	r3, r1, ip, asr r2
   13214:	andeq	r3, r1, ip, asr r2
   13218:	andeq	r3, r1, ip, asr r2
   1321c:	andeq	r3, r1, ip, asr r2
   13220:	andeq	r3, r1, ip, asr r2
   13224:	andeq	r3, r1, ip, asr r2
   13228:	andeq	r3, r1, ip, asr r2
   1322c:	andeq	r3, r1, ip, asr r2
   13230:	andeq	r3, r1, ip, asr r2
   13234:	andeq	r3, r1, ip, asr r2
   13238:	andeq	r3, r1, ip, asr r2
   1323c:	andeq	r3, r1, ip, asr r2
   13240:	andeq	r3, r1, ip, asr r2
   13244:	andeq	r3, r1, ip, asr r2
   13248:	andeq	r3, r1, ip, asr r2
   1324c:	andeq	r2, r1, r0, lsl #15
   13250:	muleq	r1, ip, fp
   13254:	andeq	r2, r1, r0, lsl #15
   13258:	andeq	r3, r1, r8, ror #4
   1325c:	mov	r6, r7
   13260:	mov	r7, #0
   13264:	b	127e0 <__assert_fail@plt+0x18e0>
   13268:	cmp	r9, #0
   1326c:	mov	r3, #0
   13270:	beq	12cb0 <__assert_fail@plt+0x1db0>
   13274:	mov	r6, #0
   13278:	mov	r7, r3
   1327c:	mov	r3, r6
   13280:	b	127e4 <__assert_fail@plt+0x18e4>
   13284:	mov	r3, #0
   13288:	b	12c90 <__assert_fail@plt+0x1d90>
   1328c:	mov	r7, #0
   13290:	mov	r3, #114	; 0x72
   13294:	b	12ab0 <__assert_fail@plt+0x1bb0>
   13298:	mov	r5, #98	; 0x62
   1329c:	b	12b40 <__assert_fail@plt+0x1c40>
   132a0:	mov	r5, #97	; 0x61
   132a4:	b	12b80 <__assert_fail@plt+0x1c80>
   132a8:	ldr	r3, [sp, #32]
   132ac:	cmp	r3, #0
   132b0:	bne	136f8 <__assert_fail@plt+0x27f8>
   132b4:	add	r9, r9, #1
   132b8:	ldr	r3, [sp, #44]	; 0x2c
   132bc:	mov	r6, #0
   132c0:	mov	r5, #92	; 0x5c
   132c4:	b	12a78 <__assert_fail@plt+0x1b78>
   132c8:	ldr	r3, [sp, #36]	; 0x24
   132cc:	ldrb	r3, [r3, #1]
   132d0:	adds	r3, r3, #0
   132d4:	movne	r3, #1
   132d8:	b	1279c <__assert_fail@plt+0x189c>
   132dc:	ldr	r3, [sp, #164]	; 0xa4
   132e0:	ands	r3, r3, #4
   132e4:	beq	13308 <__assert_fail@plt+0x2408>
   132e8:	ldr	r2, [sp, #24]
   132ec:	add	r3, r9, #2
   132f0:	cmp	r3, r2
   132f4:	bcs	13308 <__assert_fail@plt+0x2408>
   132f8:	ldr	r2, [sp, #48]	; 0x30
   132fc:	ldrb	r5, [r2, #1]
   13300:	cmp	r5, #63	; 0x3f
   13304:	beq	1376c <__assert_fail@plt+0x286c>
   13308:	mov	r2, #0
   1330c:	mov	r6, r2
   13310:	mov	r5, #63	; 0x3f
   13314:	b	127c4 <__assert_fail@plt+0x18c4>
   13318:	ldr	r3, [sp, #32]
   1331c:	cmp	r3, #0
   13320:	bne	136f8 <__assert_fail@plt+0x27f8>
   13324:	mov	r6, r3
   13328:	mov	r5, #63	; 0x3f
   1332c:	b	1280c <__assert_fail@plt+0x190c>
   13330:	ldr	r3, [sp, #24]
   13334:	cmn	r3, #1
   13338:	mov	r3, #0
   1333c:	str	r3, [sp, #108]	; 0x6c
   13340:	str	r3, [sp, #112]	; 0x70
   13344:	bne	13354 <__assert_fail@plt+0x2454>
   13348:	ldr	r0, [sp, #36]	; 0x24
   1334c:	bl	10e34 <strlen@plt>
   13350:	str	r0, [sp, #24]
   13354:	mov	r3, #0
   13358:	str	sl, [sp, #88]	; 0x58
   1335c:	ldr	sl, [sp, #36]	; 0x24
   13360:	str	r5, [sp, #92]	; 0x5c
   13364:	mov	r5, r3
   13368:	str	r7, [sp, #96]	; 0x60
   1336c:	str	r4, [sp, #100]	; 0x64
   13370:	str	r8, [sp, #84]	; 0x54
   13374:	ldr	r3, [sp, #24]
   13378:	add	r4, r9, r5
   1337c:	add	r7, sl, r4
   13380:	sub	r2, r3, r4
   13384:	mov	r1, r7
   13388:	add	r3, sp, #108	; 0x6c
   1338c:	add	r0, sp, #104	; 0x68
   13390:	bl	14fcc <__assert_fail@plt+0x40cc>
   13394:	subs	r8, r0, #0
   13398:	beq	133e8 <__assert_fail@plt+0x24e8>
   1339c:	cmn	r8, #1
   133a0:	beq	13748 <__assert_fail@plt+0x2848>
   133a4:	cmn	r8, #2
   133a8:	beq	13868 <__assert_fail@plt+0x2968>
   133ac:	ldr	r3, [sp, #32]
   133b0:	cmp	fp, #2
   133b4:	movne	r3, #0
   133b8:	andeq	r3, r3, #1
   133bc:	cmp	r3, #0
   133c0:	bne	13548 <__assert_fail@plt+0x2648>
   133c4:	ldr	r0, [sp, #104]	; 0x68
   133c8:	bl	10d68 <iswprint@plt>
   133cc:	add	r5, r5, r8
   133d0:	cmp	r0, #0
   133d4:	add	r0, sp, #108	; 0x6c
   133d8:	moveq	r6, #0
   133dc:	bl	10d14 <mbsinit@plt>
   133e0:	cmp	r0, #0
   133e4:	beq	13374 <__assert_fail@plt+0x2474>
   133e8:	ldr	r3, [sp, #28]
   133ec:	mov	ip, r5
   133f0:	eor	r2, r6, #1
   133f4:	ldr	r5, [sp, #92]	; 0x5c
   133f8:	ldr	r7, [sp, #96]	; 0x60
   133fc:	ldr	r4, [sp, #100]	; 0x64
   13400:	ldr	r8, [sp, #84]	; 0x54
   13404:	ldr	sl, [sp, #88]	; 0x58
   13408:	and	r2, r2, r3
   1340c:	cmp	ip, #1
   13410:	bls	12d10 <__assert_fail@plt+0x1e10>
   13414:	add	r1, ip, r9
   13418:	ldr	lr, [sp, #48]	; 0x30
   1341c:	mov	r0, #0
   13420:	str	r6, [sp, #48]	; 0x30
   13424:	mov	ip, #39	; 0x27
   13428:	ldr	r6, [sp, #44]	; 0x2c
   1342c:	b	134e4 <__assert_fail@plt+0x25e4>
   13430:	ldr	r0, [sp, #32]
   13434:	sub	r3, fp, #2
   13438:	cmp	r0, #0
   1343c:	clz	r3, r3
   13440:	lsr	r3, r3, #5
   13444:	bne	1364c <__assert_fail@plt+0x274c>
   13448:	eor	r0, r6, #1
   1344c:	ands	r3, r3, r0
   13450:	beq	13480 <__assert_fail@plt+0x2580>
   13454:	add	r0, r4, #1
   13458:	cmp	sl, r4
   1345c:	strbhi	ip, [r8, r4]
   13460:	cmp	sl, r0
   13464:	movhi	r6, #36	; 0x24
   13468:	strbhi	r6, [r8, r0]
   1346c:	add	r0, r4, #2
   13470:	mov	r6, r3
   13474:	add	r4, r4, #3
   13478:	cmp	sl, r0
   1347c:	strbhi	ip, [r8, r0]
   13480:	cmp	sl, r4
   13484:	movhi	r3, #92	; 0x5c
   13488:	strbhi	r3, [r8, r4]
   1348c:	add	r3, r4, #1
   13490:	cmp	sl, r3
   13494:	lsrhi	r0, r5, #6
   13498:	addhi	r0, r0, #48	; 0x30
   1349c:	strbhi	r0, [r8, r3]
   134a0:	add	r0, r4, #2
   134a4:	cmp	sl, r0
   134a8:	lsrhi	r3, r5, #3
   134ac:	andhi	r3, r3, #7
   134b0:	addhi	r3, r3, #48	; 0x30
   134b4:	add	r9, r9, #1
   134b8:	strbhi	r3, [r8, r0]
   134bc:	and	r5, r5, #7
   134c0:	cmp	r9, r1
   134c4:	add	r5, r5, #48	; 0x30
   134c8:	add	r4, r4, #3
   134cc:	bcs	1366c <__assert_fail@plt+0x276c>
   134d0:	mov	r0, r2
   134d4:	cmp	sl, r4
   134d8:	strbhi	r5, [r8, r4]
   134dc:	ldrb	r5, [lr, #1]!
   134e0:	add	r4, r4, #1
   134e4:	cmp	r2, #0
   134e8:	bne	13430 <__assert_fail@plt+0x2530>
   134ec:	eor	r3, r0, #1
   134f0:	and	r3, r3, r6
   134f4:	cmp	r7, #0
   134f8:	uxtb	r3, r3
   134fc:	beq	13510 <__assert_fail@plt+0x2610>
   13500:	cmp	sl, r4
   13504:	movhi	r7, #92	; 0x5c
   13508:	strbhi	r7, [r8, r4]
   1350c:	add	r4, r4, #1
   13510:	add	r9, r9, #1
   13514:	cmp	r9, r1
   13518:	bcs	13660 <__assert_fail@plt+0x2760>
   1351c:	cmp	r3, #0
   13520:	beq	1368c <__assert_fail@plt+0x278c>
   13524:	cmp	sl, r4
   13528:	add	r3, r4, #1
   1352c:	strbhi	ip, [r8, r4]
   13530:	mov	r7, #0
   13534:	cmp	sl, r3
   13538:	strbhi	ip, [r8, r3]
   1353c:	add	r4, r4, #2
   13540:	mov	r6, r7
   13544:	b	134d4 <__assert_fail@plt+0x25d4>
   13548:	cmp	r8, #1
   1354c:	beq	133c4 <__assert_fail@plt+0x24c4>
   13550:	add	r1, r4, #1
   13554:	add	r3, sl, r8
   13558:	add	r1, sl, r1
   1355c:	add	r4, r3, r4
   13560:	ldrb	r3, [r1], #1
   13564:	sub	r3, r3, #91	; 0x5b
   13568:	cmp	r3, #33	; 0x21
   1356c:	ldrls	pc, [pc, r3, lsl #2]
   13570:	b	135fc <__assert_fail@plt+0x26fc>
   13574:	andeq	r3, r1, r8, lsl #12
   13578:	andeq	r3, r1, r8, lsl #12
   1357c:	strdeq	r3, [r1], -ip
   13580:	andeq	r3, r1, r8, lsl #12
   13584:	strdeq	r3, [r1], -ip
   13588:	andeq	r3, r1, r8, lsl #12
   1358c:	strdeq	r3, [r1], -ip
   13590:	strdeq	r3, [r1], -ip
   13594:	strdeq	r3, [r1], -ip
   13598:	strdeq	r3, [r1], -ip
   1359c:	strdeq	r3, [r1], -ip
   135a0:	strdeq	r3, [r1], -ip
   135a4:	strdeq	r3, [r1], -ip
   135a8:	strdeq	r3, [r1], -ip
   135ac:	strdeq	r3, [r1], -ip
   135b0:	strdeq	r3, [r1], -ip
   135b4:	strdeq	r3, [r1], -ip
   135b8:	strdeq	r3, [r1], -ip
   135bc:	strdeq	r3, [r1], -ip
   135c0:	strdeq	r3, [r1], -ip
   135c4:	strdeq	r3, [r1], -ip
   135c8:	strdeq	r3, [r1], -ip
   135cc:	strdeq	r3, [r1], -ip
   135d0:	strdeq	r3, [r1], -ip
   135d4:	strdeq	r3, [r1], -ip
   135d8:	strdeq	r3, [r1], -ip
   135dc:	strdeq	r3, [r1], -ip
   135e0:	strdeq	r3, [r1], -ip
   135e4:	strdeq	r3, [r1], -ip
   135e8:	strdeq	r3, [r1], -ip
   135ec:	strdeq	r3, [r1], -ip
   135f0:	strdeq	r3, [r1], -ip
   135f4:	strdeq	r3, [r1], -ip
   135f8:	andeq	r3, r1, r8, lsl #12
   135fc:	cmp	r4, r1
   13600:	bne	13560 <__assert_fail@plt+0x2660>
   13604:	b	133c4 <__assert_fail@plt+0x24c4>
   13608:	ldr	fp, [sp, #84]	; 0x54
   1360c:	ldr	sl, [sp, #88]	; 0x58
   13610:	mov	r8, #2
   13614:	b	12ad0 <__assert_fail@plt+0x1bd0>
   13618:	cmp	sl, r4
   1361c:	movls	r1, r4
   13620:	bls	12c20 <__assert_fail@plt+0x1d20>
   13624:	ldr	r3, [sp, #44]	; 0x2c
   13628:	b	12c10 <__assert_fail@plt+0x1d10>
   1362c:	str	sl, [sp, #72]	; 0x48
   13630:	ldr	sl, [sp, #32]
   13634:	b	12a48 <__assert_fail@plt+0x1b48>
   13638:	add	r9, r9, #1
   1363c:	b	1233c <__assert_fail@plt+0x143c>
   13640:	ldr	r2, [sp, #28]
   13644:	mov	r6, #0
   13648:	b	13414 <__assert_fail@plt+0x2514>
   1364c:	str	fp, [sp, #160]	; 0xa0
   13650:	str	r3, [sp, #28]
   13654:	mov	fp, r8
   13658:	ldr	r8, [sp, #160]	; 0xa0
   1365c:	b	12ad0 <__assert_fail@plt+0x1bd0>
   13660:	str	r6, [sp, #44]	; 0x2c
   13664:	ldr	r6, [sp, #48]	; 0x30
   13668:	b	12a78 <__assert_fail@plt+0x1b78>
   1366c:	str	r6, [sp, #44]	; 0x2c
   13670:	ldr	r6, [sp, #48]	; 0x30
   13674:	b	12884 <__assert_fail@plt+0x1984>
   13678:	add	r4, r4, #4
   1367c:	str	r3, [sp, #44]	; 0x2c
   13680:	mov	r6, #0
   13684:	mov	r5, #48	; 0x30
   13688:	b	1280c <__assert_fail@plt+0x190c>
   1368c:	mov	r7, r3
   13690:	b	134d4 <__assert_fail@plt+0x25d4>
   13694:	ldr	r3, [pc, #-1624]	; 13044 <__assert_fail@plt+0x2144>
   13698:	mov	r4, #1
   1369c:	str	r4, [sp, #40]	; 0x28
   136a0:	str	r4, [sp, #28]
   136a4:	str	r4, [sp, #52]	; 0x34
   136a8:	str	sl, [sp, #72]	; 0x48
   136ac:	str	sl, [sp, #68]	; 0x44
   136b0:	str	sl, [sp, #44]	; 0x2c
   136b4:	str	sl, [sp, #32]
   136b8:	str	r3, [sp, #60]	; 0x3c
   136bc:	b	1232c <__assert_fail@plt+0x142c>
   136c0:	mov	r3, r6
   136c4:	mov	r5, #48	; 0x30
   136c8:	mov	r6, #0
   136cc:	b	1280c <__assert_fail@plt+0x190c>
   136d0:	cmp	sl, r4
   136d4:	movhi	r3, #48	; 0x30
   136d8:	strbhi	r3, [r8, r4]
   136dc:	add	r3, r1, #2
   136e0:	cmp	sl, r3
   136e4:	movhi	r0, #48	; 0x30
   136e8:	strbhi	r0, [r8, r3]
   136ec:	add	r4, r1, #3
   136f0:	mov	r5, #48	; 0x30
   136f4:	b	12c54 <__assert_fail@plt+0x1d54>
   136f8:	str	fp, [sp, #160]	; 0xa0
   136fc:	mov	fp, r8
   13700:	ldr	r8, [sp, #160]	; 0xa0
   13704:	b	12ad0 <__assert_fail@plt+0x1bd0>
   13708:	ldr	r2, [sp, #80]	; 0x50
   1370c:	ldrb	r3, [r2]
   13710:	cmp	r3, #0
   13714:	beq	122fc <__assert_fail@plt+0x13fc>
   13718:	cmp	sl, r4
   1371c:	strbhi	r3, [fp, r4]
   13720:	ldrb	r3, [r2, #1]!
   13724:	add	r4, r4, #1
   13728:	cmp	r3, #0
   1372c:	bne	13718 <__assert_fail@plt+0x2818>
   13730:	b	122fc <__assert_fail@plt+0x13fc>
   13734:	str	fp, [sp, #160]	; 0xa0
   13738:	mov	r3, #0
   1373c:	mov	fp, r8
   13740:	ldr	r8, [sp, #160]	; 0xa0
   13744:	b	12b64 <__assert_fail@plt+0x1c64>
   13748:	mov	ip, r5
   1374c:	ldr	r7, [sp, #96]	; 0x60
   13750:	ldr	r5, [sp, #92]	; 0x5c
   13754:	ldr	r4, [sp, #100]	; 0x64
   13758:	ldr	r8, [sp, #84]	; 0x54
   1375c:	ldr	sl, [sp, #88]	; 0x58
   13760:	ldr	r2, [sp, #28]
   13764:	mov	r6, #0
   13768:	b	1340c <__assert_fail@plt+0x250c>
   1376c:	ldr	r2, [sp, #36]	; 0x24
   13770:	ldrb	r1, [r2, r3]
   13774:	sub	r2, r1, #33	; 0x21
   13778:	cmp	r2, #29
   1377c:	ldrls	pc, [pc, r2, lsl #2]
   13780:	b	1385c <__assert_fail@plt+0x295c>
   13784:	strdeq	r3, [r1], -ip
   13788:	andeq	r3, r1, ip, asr r8
   1378c:	andeq	r3, r1, ip, asr r8
   13790:	andeq	r3, r1, ip, asr r8
   13794:	andeq	r3, r1, ip, asr r8
   13798:	andeq	r3, r1, ip, asr r8
   1379c:	strdeq	r3, [r1], -ip
   137a0:	strdeq	r3, [r1], -ip
   137a4:	strdeq	r3, [r1], -ip
   137a8:	andeq	r3, r1, ip, asr r8
   137ac:	andeq	r3, r1, ip, asr r8
   137b0:	andeq	r3, r1, ip, asr r8
   137b4:	strdeq	r3, [r1], -ip
   137b8:	andeq	r3, r1, ip, asr r8
   137bc:	strdeq	r3, [r1], -ip
   137c0:	andeq	r3, r1, ip, asr r8
   137c4:	andeq	r3, r1, ip, asr r8
   137c8:	andeq	r3, r1, ip, asr r8
   137cc:	andeq	r3, r1, ip, asr r8
   137d0:	andeq	r3, r1, ip, asr r8
   137d4:	andeq	r3, r1, ip, asr r8
   137d8:	andeq	r3, r1, ip, asr r8
   137dc:	andeq	r3, r1, ip, asr r8
   137e0:	andeq	r3, r1, ip, asr r8
   137e4:	andeq	r3, r1, ip, asr r8
   137e8:	andeq	r3, r1, ip, asr r8
   137ec:	andeq	r3, r1, ip, asr r8
   137f0:	strdeq	r3, [r1], -ip
   137f4:	strdeq	r3, [r1], -ip
   137f8:	strdeq	r3, [r1], -ip
   137fc:	ldr	r2, [sp, #32]
   13800:	cmp	r2, #0
   13804:	bne	13908 <__assert_fail@plt+0x2a08>
   13808:	cmp	sl, r4
   1380c:	movhi	r2, #63	; 0x3f
   13810:	strbhi	r2, [r8, r4]
   13814:	add	r2, r4, #1
   13818:	cmp	sl, r2
   1381c:	movhi	r0, #34	; 0x22
   13820:	strbhi	r0, [r8, r2]
   13824:	add	r2, r4, #2
   13828:	cmp	sl, r2
   1382c:	movhi	r0, #34	; 0x22
   13830:	strbhi	r0, [r8, r2]
   13834:	add	r2, r4, #3
   13838:	cmp	sl, r2
   1383c:	movhi	r0, #63	; 0x3f
   13840:	strbhi	r0, [r8, r2]
   13844:	mov	r2, #0
   13848:	add	r4, r4, #4
   1384c:	mov	r5, r1
   13850:	mov	r9, r3
   13854:	mov	r6, r2
   13858:	b	12c54 <__assert_fail@plt+0x1d54>
   1385c:	mov	r2, #0
   13860:	mov	r6, r2
   13864:	b	127c4 <__assert_fail@plt+0x18c4>
   13868:	ldr	r0, [sp, #24]
   1386c:	mov	r1, r4
   13870:	cmp	r1, r0
   13874:	mov	r2, r7
   13878:	mov	r3, r5
   1387c:	mov	ip, r5
   13880:	ldr	r7, [sp, #96]	; 0x60
   13884:	ldr	r5, [sp, #92]	; 0x5c
   13888:	ldr	r4, [sp, #100]	; 0x64
   1388c:	ldr	r8, [sp, #84]	; 0x54
   13890:	ldr	sl, [sp, #88]	; 0x58
   13894:	bcs	138c8 <__assert_fail@plt+0x29c8>
   13898:	ldrb	r6, [r2]
   1389c:	cmp	r6, #0
   138a0:	bne	138b4 <__assert_fail@plt+0x29b4>
   138a4:	b	139e4 <__assert_fail@plt+0x2ae4>
   138a8:	ldrb	r6, [r2, #1]!
   138ac:	cmp	r6, #0
   138b0:	beq	1396c <__assert_fail@plt+0x2a6c>
   138b4:	add	r3, r3, #1
   138b8:	add	r1, r9, r3
   138bc:	cmp	r1, r0
   138c0:	bcc	138a8 <__assert_fail@plt+0x29a8>
   138c4:	mov	ip, r3
   138c8:	ldr	r2, [sp, #28]
   138cc:	mov	r6, #0
   138d0:	b	1340c <__assert_fail@plt+0x250c>
   138d4:	mov	r3, #1
   138d8:	str	r3, [sp, #40]	; 0x28
   138dc:	str	r3, [sp, #32]
   138e0:	str	r3, [sp, #28]
   138e4:	str	r3, [sp, #52]	; 0x34
   138e8:	ldr	r3, [pc, #-2220]	; 13044 <__assert_fail@plt+0x2144>
   138ec:	mov	r2, #0
   138f0:	str	r2, [sp, #68]	; 0x44
   138f4:	str	r2, [sp, #44]	; 0x2c
   138f8:	str	r2, [sp, #72]	; 0x48
   138fc:	mov	r4, r2
   13900:	str	r3, [sp, #60]	; 0x3c
   13904:	b	1232c <__assert_fail@plt+0x142c>
   13908:	str	fp, [sp, #160]	; 0xa0
   1390c:	mov	fp, r8
   13910:	ldr	r8, [sp, #160]	; 0xa0
   13914:	b	12adc <__assert_fail@plt+0x1bdc>
   13918:	mov	r2, r3
   1391c:	ldr	r3, [sp, #60]	; 0x3c
   13920:	cmp	r3, #0
   13924:	moveq	r2, #0
   13928:	andne	r2, r2, #1
   1392c:	cmp	r2, #0
   13930:	beq	1395c <__assert_fail@plt+0x2a5c>
   13934:	mov	r2, r3
   13938:	ldrb	r3, [r3]
   1393c:	cmp	r3, #0
   13940:	beq	1395c <__assert_fail@plt+0x2a5c>
   13944:	cmp	sl, r4
   13948:	strbhi	r3, [fp, r4]
   1394c:	ldrb	r3, [r2, #1]!
   13950:	add	r4, r4, #1
   13954:	cmp	r3, #0
   13958:	bne	13944 <__assert_fail@plt+0x2a44>
   1395c:	cmp	sl, r4
   13960:	movhi	r3, #0
   13964:	strbhi	r3, [fp, r4]
   13968:	b	12b1c <__assert_fail@plt+0x1c1c>
   1396c:	mov	ip, r3
   13970:	ldr	r2, [sp, #28]
   13974:	b	1340c <__assert_fail@plt+0x250c>
   13978:	str	fp, [sp, #160]	; 0xa0
   1397c:	mov	fp, r8
   13980:	ldr	r8, [sp, #160]	; 0xa0
   13984:	sub	r3, r8, #2
   13988:	clz	r3, r3
   1398c:	lsr	r3, r3, #5
   13990:	str	r3, [sp, #28]
   13994:	b	12ad0 <__assert_fail@plt+0x1bd0>
   13998:	ldr	r3, [sp, #76]	; 0x4c
   1399c:	mov	ip, #5
   139a0:	str	r3, [sp, #16]
   139a4:	ldr	r3, [sp, #80]	; 0x50
   139a8:	ldr	r2, [sp, #36]	; 0x24
   139ac:	str	r3, [sp, #12]
   139b0:	ldr	r3, [sp, #56]	; 0x38
   139b4:	ldr	r1, [sp, #72]	; 0x48
   139b8:	str	r3, [sp, #8]
   139bc:	ldr	r3, [sp, #164]	; 0xa4
   139c0:	mov	r0, fp
   139c4:	str	r3, [sp, #4]
   139c8:	str	ip, [sp]
   139cc:	ldr	r3, [sp, #24]
   139d0:	bl	12234 <__assert_fail@plt+0x1334>
   139d4:	mov	r4, r0
   139d8:	b	12b1c <__assert_fail@plt+0x1c1c>
   139dc:	mov	r8, #2
   139e0:	b	12ad0 <__assert_fail@plt+0x1bd0>
   139e4:	ldr	r2, [sp, #28]
   139e8:	b	1340c <__assert_fail@plt+0x250c>
   139ec:	mov	r3, #0
   139f0:	str	r3, [sp, #68]	; 0x44
   139f4:	str	r3, [sp, #44]	; 0x2c
   139f8:	str	r3, [sp, #72]	; 0x48
   139fc:	str	r3, [sp, #28]
   13a00:	mov	r4, r3
   13a04:	ldr	r3, [pc, #-2500]	; 13048 <__assert_fail@plt+0x2148>
   13a08:	mov	r2, #1
   13a0c:	str	r2, [sp, #40]	; 0x28
   13a10:	str	r2, [sp, #32]
   13a14:	str	r2, [sp, #52]	; 0x34
   13a18:	str	r3, [sp, #60]	; 0x3c
   13a1c:	b	1232c <__assert_fail@plt+0x142c>
   13a20:	bl	10d38 <__stack_chk_fail@plt>
   13a24:	mov	r5, r3
   13a28:	mov	r6, #0
   13a2c:	b	12820 <__assert_fail@plt+0x1920>
   13a30:	mov	r3, #0
   13a34:	mov	r2, #1
   13a38:	str	r3, [sp, #44]	; 0x2c
   13a3c:	str	r3, [sp, #72]	; 0x48
   13a40:	str	r2, [sp, #40]	; 0x28
   13a44:	b	1293c <__assert_fail@plt+0x1a3c>
   13a48:	bl	10ee8 <abort@plt>
   13a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a50:	sub	sp, sp, #44	; 0x2c
   13a54:	mov	r6, r0
   13a58:	mov	r4, r3
   13a5c:	mov	sl, r1
   13a60:	mov	fp, r2
   13a64:	bl	10e40 <__errno_location@plt>
   13a68:	ldr	r7, [pc, #364]	; 13bdc <__assert_fail@plt+0x2cdc>
   13a6c:	cmp	r6, #0
   13a70:	ldr	r5, [r7]
   13a74:	ldr	r3, [r0]
   13a78:	str	r3, [sp, #24]
   13a7c:	blt	13bd8 <__assert_fail@plt+0x2cd8>
   13a80:	ldr	r3, [r7, #4]
   13a84:	mov	r8, r0
   13a88:	cmp	r3, r6
   13a8c:	bgt	13ad8 <__assert_fail@plt+0x2bd8>
   13a90:	cmn	r6, #-268435454	; 0xf0000002
   13a94:	bgt	13bd4 <__assert_fail@plt+0x2cd4>
   13a98:	add	r9, r6, #1
   13a9c:	add	r3, r7, #8
   13aa0:	cmp	r5, r3
   13aa4:	lsl	r1, r9, #3
   13aa8:	beq	13bb4 <__assert_fail@plt+0x2cb4>
   13aac:	mov	r0, r5
   13ab0:	bl	14c00 <__assert_fail@plt+0x3d00>
   13ab4:	mov	r5, r0
   13ab8:	str	r0, [r7]
   13abc:	ldr	r0, [r7, #4]
   13ac0:	mov	r1, #0
   13ac4:	sub	r2, r9, r0
   13ac8:	add	r0, r5, r0, lsl #3
   13acc:	lsl	r2, r2, #3
   13ad0:	bl	10e58 <memset@plt>
   13ad4:	str	r9, [r7, #4]
   13ad8:	add	r3, r5, r6, lsl #3
   13adc:	ldr	r1, [r4, #4]
   13ae0:	ldr	r7, [r3, #4]
   13ae4:	ldr	r9, [r5, r6, lsl #3]
   13ae8:	ldr	r2, [r4, #40]	; 0x28
   13aec:	ldr	ip, [r4, #44]	; 0x2c
   13af0:	str	r3, [sp, #28]
   13af4:	ldr	r3, [r4]
   13af8:	orr	r1, r1, #1
   13afc:	add	lr, r4, #8
   13b00:	str	r1, [sp, #36]	; 0x24
   13b04:	str	r1, [sp, #4]
   13b08:	str	r2, [sp, #12]
   13b0c:	str	r3, [sp]
   13b10:	mov	r0, r7
   13b14:	mov	r1, r9
   13b18:	str	ip, [sp, #16]
   13b1c:	str	lr, [sp, #8]
   13b20:	mov	r3, fp
   13b24:	mov	r2, sl
   13b28:	str	lr, [sp, #32]
   13b2c:	bl	12234 <__assert_fail@plt+0x1334>
   13b30:	cmp	r9, r0
   13b34:	bhi	13ba0 <__assert_fail@plt+0x2ca0>
   13b38:	ldr	r3, [pc, #160]	; 13be0 <__assert_fail@plt+0x2ce0>
   13b3c:	add	r9, r0, #1
   13b40:	cmp	r7, r3
   13b44:	str	r9, [r5, r6, lsl #3]
   13b48:	beq	13b54 <__assert_fail@plt+0x2c54>
   13b4c:	mov	r0, r7
   13b50:	bl	10cf0 <free@plt>
   13b54:	mov	r0, r9
   13b58:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   13b5c:	ldr	lr, [sp, #28]
   13b60:	ldr	ip, [r4, #44]	; 0x2c
   13b64:	ldr	r5, [r4, #40]	; 0x28
   13b68:	mov	r3, fp
   13b6c:	mov	r2, sl
   13b70:	mov	r1, r9
   13b74:	str	r0, [lr, #4]
   13b78:	ldr	lr, [r4]
   13b7c:	ldr	r4, [sp, #32]
   13b80:	str	ip, [sp, #16]
   13b84:	str	r4, [sp, #8]
   13b88:	ldr	r4, [sp, #36]	; 0x24
   13b8c:	str	r5, [sp, #12]
   13b90:	str	r4, [sp, #4]
   13b94:	str	lr, [sp]
   13b98:	mov	r7, r0
   13b9c:	bl	12234 <__assert_fail@plt+0x1334>
   13ba0:	ldr	r3, [sp, #24]
   13ba4:	mov	r0, r7
   13ba8:	str	r3, [r8]
   13bac:	add	sp, sp, #44	; 0x2c
   13bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	mov	r0, #0
   13bb8:	bl	14c00 <__assert_fail@plt+0x3d00>
   13bbc:	ldr	r3, [pc, #32]	; 13be4 <__assert_fail@plt+0x2ce4>
   13bc0:	mov	r5, r0
   13bc4:	ldm	r3, {r0, r1}
   13bc8:	str	r5, [r7]
   13bcc:	stm	r5, {r0, r1}
   13bd0:	b	13abc <__assert_fail@plt+0x2bbc>
   13bd4:	bl	14dec <__assert_fail@plt+0x3eec>
   13bd8:	bl	10ee8 <abort@plt>
   13bdc:	andeq	r6, r2, ip, ror #1
   13be0:	andeq	r6, r2, r4, ror r1
   13be4:	strdeq	r6, [r2], -r4
   13be8:	push	{r4, r5, r6, lr}
   13bec:	mov	r5, r0
   13bf0:	bl	10e40 <__errno_location@plt>
   13bf4:	cmp	r5, #0
   13bf8:	mov	r1, #48	; 0x30
   13bfc:	mov	r4, r0
   13c00:	ldr	r0, [pc, #16]	; 13c18 <__assert_fail@plt+0x2d18>
   13c04:	ldr	r6, [r4]
   13c08:	movne	r0, r5
   13c0c:	bl	14dac <__assert_fail@plt+0x3eac>
   13c10:	str	r6, [r4]
   13c14:	pop	{r4, r5, r6, pc}
   13c18:	andeq	r6, r2, r4, ror r2
   13c1c:	ldr	r3, [pc, #12]	; 13c30 <__assert_fail@plt+0x2d30>
   13c20:	cmp	r0, #0
   13c24:	moveq	r0, r3
   13c28:	ldr	r0, [r0]
   13c2c:	bx	lr
   13c30:	andeq	r6, r2, r4, ror r2
   13c34:	ldr	r3, [pc, #12]	; 13c48 <__assert_fail@plt+0x2d48>
   13c38:	cmp	r0, #0
   13c3c:	moveq	r0, r3
   13c40:	str	r1, [r0]
   13c44:	bx	lr
   13c48:	andeq	r6, r2, r4, ror r2
   13c4c:	ldr	r3, [pc, #52]	; 13c88 <__assert_fail@plt+0x2d88>
   13c50:	cmp	r0, #0
   13c54:	moveq	r0, r3
   13c58:	add	r3, r0, #8
   13c5c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c60:	lsr	lr, r1, #5
   13c64:	and	r1, r1, #31
   13c68:	ldr	ip, [r3, lr, lsl #2]
   13c6c:	lsr	r0, ip, r1
   13c70:	eor	r2, r2, r0
   13c74:	and	r2, r2, #1
   13c78:	and	r0, r0, #1
   13c7c:	eor	r1, ip, r2, lsl r1
   13c80:	str	r1, [r3, lr, lsl #2]
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	andeq	r6, r2, r4, ror r2
   13c8c:	ldr	r3, [pc, #16]	; 13ca4 <__assert_fail@plt+0x2da4>
   13c90:	cmp	r0, #0
   13c94:	movne	r3, r0
   13c98:	ldr	r0, [r3, #4]
   13c9c:	str	r1, [r3, #4]
   13ca0:	bx	lr
   13ca4:	andeq	r6, r2, r4, ror r2
   13ca8:	ldr	r3, [pc, #44]	; 13cdc <__assert_fail@plt+0x2ddc>
   13cac:	cmp	r0, #0
   13cb0:	moveq	r0, r3
   13cb4:	mov	ip, #10
   13cb8:	cmp	r2, #0
   13cbc:	cmpne	r1, #0
   13cc0:	str	ip, [r0]
   13cc4:	beq	13cd4 <__assert_fail@plt+0x2dd4>
   13cc8:	str	r1, [r0, #40]	; 0x28
   13ccc:	str	r2, [r0, #44]	; 0x2c
   13cd0:	bx	lr
   13cd4:	push	{r4, lr}
   13cd8:	bl	10ee8 <abort@plt>
   13cdc:	andeq	r6, r2, r4, ror r2
   13ce0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ce4:	sub	sp, sp, #24
   13ce8:	ldr	ip, [pc, #108]	; 13d5c <__assert_fail@plt+0x2e5c>
   13cec:	ldr	r4, [sp, #56]	; 0x38
   13cf0:	mov	r9, r2
   13cf4:	cmp	r4, #0
   13cf8:	moveq	r4, ip
   13cfc:	mov	sl, r3
   13d00:	mov	r7, r0
   13d04:	mov	r8, r1
   13d08:	bl	10e40 <__errno_location@plt>
   13d0c:	ldr	r3, [r4, #44]	; 0x2c
   13d10:	mov	r1, r8
   13d14:	ldr	r6, [r0]
   13d18:	str	r3, [sp, #16]
   13d1c:	ldr	r2, [r4, #40]	; 0x28
   13d20:	add	r3, r4, #8
   13d24:	str	r3, [sp, #8]
   13d28:	str	r2, [sp, #12]
   13d2c:	ldr	r2, [r4, #4]
   13d30:	mov	r5, r0
   13d34:	str	r2, [sp, #4]
   13d38:	ldr	ip, [r4]
   13d3c:	mov	r3, sl
   13d40:	mov	r2, r9
   13d44:	mov	r0, r7
   13d48:	str	ip, [sp]
   13d4c:	bl	12234 <__assert_fail@plt+0x1334>
   13d50:	str	r6, [r5]
   13d54:	add	sp, sp, #24
   13d58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d5c:	andeq	r6, r2, r4, ror r2
   13d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d64:	cmp	r3, #0
   13d68:	sub	sp, sp, #44	; 0x2c
   13d6c:	ldr	r4, [pc, #192]	; 13e34 <__assert_fail@plt+0x2f34>
   13d70:	mov	r6, r2
   13d74:	movne	r4, r3
   13d78:	mov	r9, r1
   13d7c:	mov	r8, r0
   13d80:	bl	10e40 <__errno_location@plt>
   13d84:	ldr	r3, [r4, #44]	; 0x2c
   13d88:	ldr	r5, [r4, #4]
   13d8c:	add	sl, r4, #8
   13d90:	cmp	r6, #0
   13d94:	orreq	r5, r5, #1
   13d98:	mov	r1, #0
   13d9c:	ldr	r2, [r0]
   13da0:	str	r3, [sp, #16]
   13da4:	ldr	r3, [r4, #40]	; 0x28
   13da8:	stmib	sp, {r5, sl}
   13dac:	str	r3, [sp, #12]
   13db0:	ldr	r3, [r4]
   13db4:	mov	r7, r0
   13db8:	str	r2, [sp, #28]
   13dbc:	str	r3, [sp]
   13dc0:	mov	r2, r8
   13dc4:	mov	r3, r9
   13dc8:	mov	r0, r1
   13dcc:	bl	12234 <__assert_fail@plt+0x1334>
   13dd0:	add	r1, r0, #1
   13dd4:	mov	fp, r0
   13dd8:	mov	r0, r1
   13ddc:	str	r1, [sp, #36]	; 0x24
   13de0:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   13de4:	ldr	r3, [r4, #44]	; 0x2c
   13de8:	mov	r2, r8
   13dec:	str	r3, [sp, #16]
   13df0:	ldr	r3, [r4, #40]	; 0x28
   13df4:	str	r5, [sp, #4]
   13df8:	str	r3, [sp, #12]
   13dfc:	str	sl, [sp, #8]
   13e00:	ldr	ip, [r4]
   13e04:	ldr	r1, [sp, #36]	; 0x24
   13e08:	mov	r3, r9
   13e0c:	str	ip, [sp]
   13e10:	str	r0, [sp, #32]
   13e14:	bl	12234 <__assert_fail@plt+0x1334>
   13e18:	ldr	r2, [sp, #28]
   13e1c:	cmp	r6, #0
   13e20:	str	r2, [r7]
   13e24:	ldr	r0, [sp, #32]
   13e28:	strne	fp, [r6]
   13e2c:	add	sp, sp, #44	; 0x2c
   13e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e34:	andeq	r6, r2, r4, ror r2
   13e38:	mov	r3, r2
   13e3c:	mov	r2, #0
   13e40:	b	13d60 <__assert_fail@plt+0x2e60>
   13e44:	push	{r4, r5, r6, r7, r8, lr}
   13e48:	ldr	r6, [pc, #112]	; 13ec0 <__assert_fail@plt+0x2fc0>
   13e4c:	ldr	r3, [r6, #4]
   13e50:	ldr	r7, [r6]
   13e54:	cmp	r3, #1
   13e58:	ble	13e7c <__assert_fail@plt+0x2f7c>
   13e5c:	sub	r5, r7, #8
   13e60:	add	r5, r5, r3, lsl #3
   13e64:	mov	r4, r7
   13e68:	ldr	r0, [r4, #12]
   13e6c:	add	r4, r4, #8
   13e70:	bl	10cf0 <free@plt>
   13e74:	cmp	r4, r5
   13e78:	bne	13e68 <__assert_fail@plt+0x2f68>
   13e7c:	ldr	r0, [r7, #4]
   13e80:	ldr	r4, [pc, #60]	; 13ec4 <__assert_fail@plt+0x2fc4>
   13e84:	cmp	r0, r4
   13e88:	beq	13e9c <__assert_fail@plt+0x2f9c>
   13e8c:	bl	10cf0 <free@plt>
   13e90:	mov	r3, #256	; 0x100
   13e94:	str	r4, [r6, #12]
   13e98:	str	r3, [r6, #8]
   13e9c:	ldr	r4, [pc, #36]	; 13ec8 <__assert_fail@plt+0x2fc8>
   13ea0:	cmp	r7, r4
   13ea4:	beq	13eb4 <__assert_fail@plt+0x2fb4>
   13ea8:	mov	r0, r7
   13eac:	bl	10cf0 <free@plt>
   13eb0:	str	r4, [r6]
   13eb4:	mov	r3, #1
   13eb8:	str	r3, [r6, #4]
   13ebc:	pop	{r4, r5, r6, r7, r8, pc}
   13ec0:	andeq	r6, r2, ip, ror #1
   13ec4:	andeq	r6, r2, r4, ror r1
   13ec8:	strdeq	r6, [r2], -r4
   13ecc:	ldr	r3, [pc, #4]	; 13ed8 <__assert_fail@plt+0x2fd8>
   13ed0:	mvn	r2, #0
   13ed4:	b	13a4c <__assert_fail@plt+0x2b4c>
   13ed8:	andeq	r6, r2, r4, ror r2
   13edc:	ldr	r3, [pc]	; 13ee4 <__assert_fail@plt+0x2fe4>
   13ee0:	b	13a4c <__assert_fail@plt+0x2b4c>
   13ee4:	andeq	r6, r2, r4, ror r2
   13ee8:	mov	r1, r0
   13eec:	ldr	r3, [pc, #8]	; 13efc <__assert_fail@plt+0x2ffc>
   13ef0:	mvn	r2, #0
   13ef4:	mov	r0, #0
   13ef8:	b	13a4c <__assert_fail@plt+0x2b4c>
   13efc:	andeq	r6, r2, r4, ror r2
   13f00:	mov	r2, r1
   13f04:	ldr	r3, [pc, #8]	; 13f14 <__assert_fail@plt+0x3014>
   13f08:	mov	r1, r0
   13f0c:	mov	r0, #0
   13f10:	b	13a4c <__assert_fail@plt+0x2b4c>
   13f14:	andeq	r6, r2, r4, ror r2
   13f18:	push	{r4, r5, r6, lr}
   13f1c:	sub	sp, sp, #56	; 0x38
   13f20:	ldr	r4, [pc, #68]	; 13f6c <__assert_fail@plt+0x306c>
   13f24:	mov	r6, r2
   13f28:	mov	r5, r0
   13f2c:	ldr	r3, [r4]
   13f30:	add	r0, sp, #4
   13f34:	str	r3, [sp, #52]	; 0x34
   13f38:	bl	120c4 <__assert_fail@plt+0x11c4>
   13f3c:	add	r3, sp, #4
   13f40:	mvn	r2, #0
   13f44:	mov	r1, r6
   13f48:	mov	r0, r5
   13f4c:	bl	13a4c <__assert_fail@plt+0x2b4c>
   13f50:	ldr	r2, [sp, #52]	; 0x34
   13f54:	ldr	r3, [r4]
   13f58:	cmp	r2, r3
   13f5c:	bne	13f68 <__assert_fail@plt+0x3068>
   13f60:	add	sp, sp, #56	; 0x38
   13f64:	pop	{r4, r5, r6, pc}
   13f68:	bl	10d38 <__stack_chk_fail@plt>
   13f6c:	andeq	r5, r2, r8, lsl #30
   13f70:	push	{r4, r5, r6, r7, lr}
   13f74:	sub	sp, sp, #60	; 0x3c
   13f78:	ldr	r4, [pc, #72]	; 13fc8 <__assert_fail@plt+0x30c8>
   13f7c:	mov	r6, r2
   13f80:	mov	r7, r3
   13f84:	ldr	ip, [r4]
   13f88:	mov	r5, r0
   13f8c:	add	r0, sp, #4
   13f90:	str	ip, [sp, #52]	; 0x34
   13f94:	bl	120c4 <__assert_fail@plt+0x11c4>
   13f98:	add	r3, sp, #4
   13f9c:	mov	r2, r7
   13fa0:	mov	r1, r6
   13fa4:	mov	r0, r5
   13fa8:	bl	13a4c <__assert_fail@plt+0x2b4c>
   13fac:	ldr	r2, [sp, #52]	; 0x34
   13fb0:	ldr	r3, [r4]
   13fb4:	cmp	r2, r3
   13fb8:	bne	13fc4 <__assert_fail@plt+0x30c4>
   13fbc:	add	sp, sp, #60	; 0x3c
   13fc0:	pop	{r4, r5, r6, r7, pc}
   13fc4:	bl	10d38 <__stack_chk_fail@plt>
   13fc8:	andeq	r5, r2, r8, lsl #30
   13fcc:	mov	r2, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	b	13f18 <__assert_fail@plt+0x3018>
   13fdc:	mov	r3, r2
   13fe0:	mov	r2, r1
   13fe4:	mov	r1, r0
   13fe8:	mov	r0, #0
   13fec:	b	13f70 <__assert_fail@plt+0x3070>
   13ff0:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ff4:	mov	r4, r2
   13ff8:	ldr	lr, [pc, #128]	; 14080 <__assert_fail@plt+0x3180>
   13ffc:	mov	r8, r0
   14000:	mov	r9, r1
   14004:	ldm	lr!, {r0, r1, r2, r3}
   14008:	sub	sp, sp, #60	; 0x3c
   1400c:	add	ip, sp, #4
   14010:	lsr	r6, r4, #5
   14014:	stmia	ip!, {r0, r1, r2, r3}
   14018:	add	r7, sp, #12
   1401c:	ldm	lr!, {r0, r1, r2, r3}
   14020:	and	r4, r4, #31
   14024:	ldr	r5, [pc, #88]	; 14084 <__assert_fail@plt+0x3184>
   14028:	stmia	ip!, {r0, r1, r2, r3}
   1402c:	ldm	lr, {r0, r1, r2, r3}
   14030:	stm	ip, {r0, r1, r2, r3}
   14034:	mov	r2, r9
   14038:	ldr	r3, [r7, r6, lsl #2]
   1403c:	ldr	ip, [r5]
   14040:	mov	r1, r8
   14044:	mvn	r0, r3, lsr r4
   14048:	and	r0, r0, #1
   1404c:	str	ip, [sp, #52]	; 0x34
   14050:	eor	r4, r3, r0, lsl r4
   14054:	add	r3, sp, #4
   14058:	mov	r0, #0
   1405c:	str	r4, [r7, r6, lsl #2]
   14060:	bl	13a4c <__assert_fail@plt+0x2b4c>
   14064:	ldr	r2, [sp, #52]	; 0x34
   14068:	ldr	r3, [r5]
   1406c:	cmp	r2, r3
   14070:	bne	1407c <__assert_fail@plt+0x317c>
   14074:	add	sp, sp, #60	; 0x3c
   14078:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1407c:	bl	10d38 <__stack_chk_fail@plt>
   14080:	andeq	r6, r2, r4, ror r2
   14084:	andeq	r5, r2, r8, lsl #30
   14088:	mov	r2, r1
   1408c:	mvn	r1, #0
   14090:	b	13ff0 <__assert_fail@plt+0x30f0>
   14094:	mov	r2, #58	; 0x3a
   14098:	mvn	r1, #0
   1409c:	b	13ff0 <__assert_fail@plt+0x30f0>
   140a0:	mov	r2, #58	; 0x3a
   140a4:	b	13ff0 <__assert_fail@plt+0x30f0>
   140a8:	push	{r4, r5, r6, r7, r8, lr}
   140ac:	sub	sp, sp, #104	; 0x68
   140b0:	ldr	r5, [pc, #120]	; 14130 <__assert_fail@plt+0x3230>
   140b4:	mov	r6, r0
   140b8:	mov	r0, sp
   140bc:	ldr	r3, [r5]
   140c0:	mov	r7, r2
   140c4:	str	r3, [sp, #100]	; 0x64
   140c8:	bl	120c4 <__assert_fail@plt+0x11c4>
   140cc:	mov	ip, sp
   140d0:	add	lr, sp, #52	; 0x34
   140d4:	ldm	ip!, {r0, r1, r2, r3}
   140d8:	stmia	lr!, {r0, r1, r2, r3}
   140dc:	ldm	ip!, {r0, r1, r2, r3}
   140e0:	ldr	r8, [sp, #64]	; 0x40
   140e4:	stmia	lr!, {r0, r1, r2, r3}
   140e8:	mvn	r4, r8
   140ec:	ldm	ip, {r0, r1, r2, r3}
   140f0:	and	ip, r4, #67108864	; 0x4000000
   140f4:	eor	ip, ip, r8
   140f8:	str	ip, [sp, #64]	; 0x40
   140fc:	stm	lr, {r0, r1, r2, r3}
   14100:	add	r3, sp, #52	; 0x34
   14104:	mvn	r2, #0
   14108:	mov	r1, r7
   1410c:	mov	r0, r6
   14110:	bl	13a4c <__assert_fail@plt+0x2b4c>
   14114:	ldr	r2, [sp, #100]	; 0x64
   14118:	ldr	r3, [r5]
   1411c:	cmp	r2, r3
   14120:	bne	1412c <__assert_fail@plt+0x322c>
   14124:	add	sp, sp, #104	; 0x68
   14128:	pop	{r4, r5, r6, r7, r8, pc}
   1412c:	bl	10d38 <__stack_chk_fail@plt>
   14130:	andeq	r5, r2, r8, lsl #30
   14134:	push	{r4, r5, r6, r7, r8, r9, lr}
   14138:	mov	r6, r1
   1413c:	ldr	lr, [pc, #132]	; 141c8 <__assert_fail@plt+0x32c8>
   14140:	mov	r5, r2
   14144:	mov	r8, r0
   14148:	mov	r9, r3
   1414c:	ldm	lr!, {r0, r1, r2, r3}
   14150:	sub	sp, sp, #60	; 0x3c
   14154:	add	ip, sp, #4
   14158:	ldr	r4, [pc, #108]	; 141cc <__assert_fail@plt+0x32cc>
   1415c:	stmia	ip!, {r0, r1, r2, r3}
   14160:	mov	r7, #10
   14164:	ldm	lr!, {r0, r1, r2, r3}
   14168:	cmp	r5, #0
   1416c:	cmpne	r6, #0
   14170:	str	r7, [sp, #4]
   14174:	stmia	ip!, {r0, r1, r2, r3}
   14178:	ldm	lr, {r0, r1, r2, r3}
   1417c:	ldr	lr, [r4]
   14180:	stm	ip, {r0, r1, r2, r3}
   14184:	str	lr, [sp, #52]	; 0x34
   14188:	beq	141c4 <__assert_fail@plt+0x32c4>
   1418c:	add	r3, sp, #4
   14190:	ldr	r2, [sp, #88]	; 0x58
   14194:	mov	r1, r9
   14198:	mov	r0, r8
   1419c:	str	r6, [sp, #44]	; 0x2c
   141a0:	str	r5, [sp, #48]	; 0x30
   141a4:	bl	13a4c <__assert_fail@plt+0x2b4c>
   141a8:	ldr	r2, [sp, #52]	; 0x34
   141ac:	ldr	r3, [r4]
   141b0:	cmp	r2, r3
   141b4:	bne	141c0 <__assert_fail@plt+0x32c0>
   141b8:	add	sp, sp, #60	; 0x3c
   141bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   141c0:	bl	10d38 <__stack_chk_fail@plt>
   141c4:	bl	10ee8 <abort@plt>
   141c8:	andeq	r6, r2, r4, ror r2
   141cc:	andeq	r5, r2, r8, lsl #30
   141d0:	push	{lr}		; (str lr, [sp, #-4]!)
   141d4:	sub	sp, sp, #12
   141d8:	mvn	ip, #0
   141dc:	str	ip, [sp]
   141e0:	bl	14134 <__assert_fail@plt+0x3234>
   141e4:	add	sp, sp, #12
   141e8:	pop	{pc}		; (ldr pc, [sp], #4)
   141ec:	push	{lr}		; (str lr, [sp, #-4]!)
   141f0:	sub	sp, sp, #12
   141f4:	mvn	ip, #0
   141f8:	mov	r3, r2
   141fc:	str	ip, [sp]
   14200:	mov	r2, r1
   14204:	mov	r1, r0
   14208:	mov	r0, #0
   1420c:	bl	14134 <__assert_fail@plt+0x3234>
   14210:	add	sp, sp, #12
   14214:	pop	{pc}		; (ldr pc, [sp], #4)
   14218:	push	{lr}		; (str lr, [sp, #-4]!)
   1421c:	sub	sp, sp, #12
   14220:	str	r3, [sp]
   14224:	mov	r3, r2
   14228:	mov	r2, r1
   1422c:	mov	r1, r0
   14230:	mov	r0, #0
   14234:	bl	14134 <__assert_fail@plt+0x3234>
   14238:	add	sp, sp, #12
   1423c:	pop	{pc}		; (ldr pc, [sp], #4)
   14240:	ldr	r3, [pc]	; 14248 <__assert_fail@plt+0x3348>
   14244:	b	13a4c <__assert_fail@plt+0x2b4c>
   14248:	strdeq	r6, [r2], -ip
   1424c:	mov	r2, r1
   14250:	ldr	r3, [pc, #8]	; 14260 <__assert_fail@plt+0x3360>
   14254:	mov	r1, r0
   14258:	mov	r0, #0
   1425c:	b	13a4c <__assert_fail@plt+0x2b4c>
   14260:	strdeq	r6, [r2], -ip
   14264:	ldr	r3, [pc, #4]	; 14270 <__assert_fail@plt+0x3370>
   14268:	mvn	r2, #0
   1426c:	b	13a4c <__assert_fail@plt+0x2b4c>
   14270:	strdeq	r6, [r2], -ip
   14274:	mov	r1, r0
   14278:	ldr	r3, [pc, #8]	; 14288 <__assert_fail@plt+0x3388>
   1427c:	mvn	r2, #0
   14280:	mov	r0, #0
   14284:	b	13a4c <__assert_fail@plt+0x2b4c>
   14288:	strdeq	r6, [r2], -ip
   1428c:	mov	r3, #0
   14290:	str	r3, [r0]
   14294:	str	r3, [r0, #4]
   14298:	bx	lr
   1429c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142a0:	sub	sp, sp, #44	; 0x2c
   142a4:	ldr	r7, [pc, #460]	; 14478 <__assert_fail@plt+0x3578>
   142a8:	add	r4, sp, #4
   142ac:	mov	r8, r1
   142b0:	ldr	ip, [r7]
   142b4:	mov	r9, r2
   142b8:	mov	r1, #0
   142bc:	mov	r5, r0
   142c0:	mov	r2, #32
   142c4:	mov	r0, r4
   142c8:	str	ip, [sp, #36]	; 0x24
   142cc:	mov	r6, r3
   142d0:	bl	10e58 <memset@plt>
   142d4:	cmp	r9, #0
   142d8:	addne	ip, r8, r9
   142dc:	subne	r1, r8, #1
   142e0:	movne	lr, #1
   142e4:	subne	ip, ip, #1
   142e8:	beq	14348 <__assert_fail@plt+0x3448>
   142ec:	ldrb	r3, [r1, #1]!
   142f0:	and	r0, r3, #31
   142f4:	lsr	r3, r3, #5
   142f8:	cmp	ip, r1
   142fc:	ldr	r2, [r4, r3, lsl #2]
   14300:	orr	r2, r2, lr, lsl r0
   14304:	str	r2, [r4, r3, lsl #2]
   14308:	bne	142ec <__assert_fail@plt+0x33ec>
   1430c:	ldr	r3, [r5, #4]
   14310:	ldr	r2, [r5, #8]
   14314:	cmp	r3, r2
   14318:	bcs	14358 <__assert_fail@plt+0x3458>
   1431c:	add	r2, r3, #1
   14320:	str	r2, [r5, #4]
   14324:	ldrb	r4, [r3]
   14328:	lsr	r3, r4, #5
   1432c:	add	r2, sp, #40	; 0x28
   14330:	add	r3, r2, r3, lsl #2
   14334:	and	r1, r4, #31
   14338:	ldr	r2, [r3, #-36]	; 0xffffffdc
   1433c:	lsr	r3, r2, r1
   14340:	tst	r3, #1
   14344:	beq	14368 <__assert_fail@plt+0x3468>
   14348:	ldr	r3, [r5, #4]
   1434c:	ldr	r2, [r5, #8]
   14350:	cmp	r3, r2
   14354:	bcc	1431c <__assert_fail@plt+0x341c>
   14358:	mov	r0, r5
   1435c:	bl	10ea0 <__uflow@plt>
   14360:	subs	r4, r0, #0
   14364:	bge	14328 <__assert_fail@plt+0x3428>
   14368:	ldrd	sl, [r6]
   1436c:	ldr	r8, [pc, #264]	; 1447c <__assert_fail@plt+0x357c>
   14370:	mov	r9, #0
   14374:	b	143c8 <__assert_fail@plt+0x34c8>
   14378:	cmp	r4, #0
   1437c:	add	r1, fp, r9
   14380:	blt	14414 <__assert_fail@plt+0x3514>
   14384:	lsr	r3, r4, #5
   14388:	add	r2, sp, #40	; 0x28
   1438c:	add	r3, r2, r3, lsl #2
   14390:	and	r0, r4, #31
   14394:	ldr	r2, [r3, #-36]	; 0xffffffdc
   14398:	lsr	r3, r2, r0
   1439c:	tst	r3, #1
   143a0:	bne	14414 <__assert_fail@plt+0x3514>
   143a4:	strb	r4, [r1]
   143a8:	ldr	r3, [r5, #4]
   143ac:	ldr	r2, [r5, #8]
   143b0:	add	r9, r9, #1
   143b4:	cmp	r3, r2
   143b8:	bcs	1443c <__assert_fail@plt+0x353c>
   143bc:	add	r2, r3, #1
   143c0:	str	r2, [r5, #4]
   143c4:	ldrb	r4, [r3]
   143c8:	clz	r3, r9
   143cc:	lsr	r3, r3, #5
   143d0:	ands	r3, r3, r4, lsr #31
   143d4:	bne	14458 <__assert_fail@plt+0x3558>
   143d8:	cmp	r9, sl
   143dc:	bne	14378 <__assert_fail@plt+0x3478>
   143e0:	cmp	fp, #0
   143e4:	beq	14460 <__assert_fail@plt+0x3560>
   143e8:	cmp	r9, r8
   143ec:	bhi	14470 <__assert_fail@plt+0x3570>
   143f0:	add	sl, r9, #1
   143f4:	add	sl, sl, r9, lsr #1
   143f8:	mov	r0, fp
   143fc:	mov	r1, sl
   14400:	bl	14c00 <__assert_fail@plt+0x3d00>
   14404:	cmp	r4, #0
   14408:	mov	fp, r0
   1440c:	add	r1, fp, r9
   14410:	bge	14384 <__assert_fail@plt+0x3484>
   14414:	mov	r3, #0
   14418:	strb	r3, [r1]
   1441c:	strd	sl, [r6]
   14420:	ldr	r2, [sp, #36]	; 0x24
   14424:	ldr	r3, [r7]
   14428:	mov	r0, r9
   1442c:	cmp	r2, r3
   14430:	bne	14474 <__assert_fail@plt+0x3574>
   14434:	add	sp, sp, #44	; 0x2c
   14438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1443c:	mov	r0, r5
   14440:	bl	10ea0 <__uflow@plt>
   14444:	clz	r3, r9
   14448:	lsr	r3, r3, #5
   1444c:	mov	r4, r0
   14450:	ands	r3, r3, r4, lsr #31
   14454:	beq	143d8 <__assert_fail@plt+0x34d8>
   14458:	mvn	r9, #0
   1445c:	b	14420 <__assert_fail@plt+0x3520>
   14460:	cmp	r9, #0
   14464:	moveq	sl, #64	; 0x40
   14468:	beq	143f8 <__assert_fail@plt+0x34f8>
   1446c:	bge	143f8 <__assert_fail@plt+0x34f8>
   14470:	bl	14dec <__assert_fail@plt+0x3eec>
   14474:	bl	10d38 <__stack_chk_fail@plt>
   14478:	andeq	r5, r2, r8, lsl #30
   1447c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14484:	sub	sp, sp, #36	; 0x24
   14488:	mov	sl, r3
   1448c:	str	r0, [sp]
   14490:	ldr	r0, [pc, #428]	; 14644 <__assert_fail@plt+0x3744>
   14494:	ldr	r3, [sp, #72]	; 0x48
   14498:	cmp	r1, #0
   1449c:	ldr	r0, [r0]
   144a0:	str	r3, [sp, #12]
   144a4:	ldr	r3, [sp, #76]	; 0x4c
   144a8:	mov	r9, r2
   144ac:	str	r0, [sp, #28]
   144b0:	str	r3, [sp, #8]
   144b4:	beq	144dc <__assert_fail@plt+0x35dc>
   144b8:	add	r5, r1, #1
   144bc:	lsrs	r3, r5, #30
   144c0:	movne	r3, #1
   144c4:	moveq	r3, #0
   144c8:	lsls	r4, r5, #2
   144cc:	bmi	144d8 <__assert_fail@plt+0x35d8>
   144d0:	cmp	r3, #0
   144d4:	beq	144e4 <__assert_fail@plt+0x35e4>
   144d8:	bl	14dec <__assert_fail@plt+0x3eec>
   144dc:	mov	r4, #256	; 0x100
   144e0:	mov	r5, #64	; 0x40
   144e4:	mov	r0, r4
   144e8:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   144ec:	mov	r6, r0
   144f0:	mov	r0, r4
   144f4:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   144f8:	mov	r3, #0
   144fc:	mov	r4, r3
   14500:	str	r3, [sp, #20]
   14504:	str	r3, [sp, #24]
   14508:	mov	r7, r0
   1450c:	b	14540 <__assert_fail@plt+0x3640>
   14510:	cmn	r8, #1
   14514:	beq	145b0 <__assert_fail@plt+0x36b0>
   14518:	adds	fp, r8, #1
   1451c:	bmi	144d8 <__assert_fail@plt+0x35d8>
   14520:	mov	r0, fp
   14524:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   14528:	str	r8, [r7, r4, lsl #2]
   1452c:	mov	r2, fp
   14530:	ldr	r1, [sp, #24]
   14534:	bl	10d08 <memcpy@plt>
   14538:	str	r0, [r6, r4, lsl #2]
   1453c:	add	r4, r4, #1
   14540:	add	r3, sp, #20
   14544:	mov	r2, sl
   14548:	mov	r1, r9
   1454c:	ldr	r0, [sp]
   14550:	bl	1429c <__assert_fail@plt+0x339c>
   14554:	cmp	r4, r5
   14558:	mov	r8, r0
   1455c:	bcc	14510 <__assert_fail@plt+0x3610>
   14560:	cmp	r6, #0
   14564:	beq	14600 <__assert_fail@plt+0x3700>
   14568:	ldr	r3, [pc, #216]	; 14648 <__assert_fail@plt+0x3748>
   1456c:	cmp	r5, r3
   14570:	bhi	144d8 <__assert_fail@plt+0x35d8>
   14574:	add	r3, r5, #1
   14578:	add	r5, r3, r5, lsr #1
   1457c:	lsl	r3, r5, #2
   14580:	mov	r1, r3
   14584:	mov	r0, r6
   14588:	str	r3, [sp, #4]
   1458c:	bl	14c00 <__assert_fail@plt+0x3d00>
   14590:	ldr	r3, [sp, #4]
   14594:	mov	r1, r3
   14598:	mov	r6, r0
   1459c:	mov	r0, r7
   145a0:	bl	14c00 <__assert_fail@plt+0x3d00>
   145a4:	cmn	r8, #1
   145a8:	mov	r7, r0
   145ac:	bne	14518 <__assert_fail@plt+0x3618>
   145b0:	mov	r3, #0
   145b4:	str	r3, [r6, r4, lsl #2]
   145b8:	ldr	r0, [sp, #24]
   145bc:	str	r3, [r7, r4, lsl #2]
   145c0:	bl	10cf0 <free@plt>
   145c4:	ldr	r3, [sp, #8]
   145c8:	cmp	r3, #0
   145cc:	ldr	r3, [sp, #12]
   145d0:	str	r6, [r3]
   145d4:	beq	14634 <__assert_fail@plt+0x3734>
   145d8:	ldr	r3, [sp, #8]
   145dc:	str	r7, [r3]
   145e0:	ldr	r3, [pc, #92]	; 14644 <__assert_fail@plt+0x3744>
   145e4:	ldr	r2, [sp, #28]
   145e8:	mov	r0, r4
   145ec:	ldr	r3, [r3]
   145f0:	cmp	r2, r3
   145f4:	bne	14640 <__assert_fail@plt+0x3740>
   145f8:	add	sp, sp, #36	; 0x24
   145fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14600:	cmp	r5, #0
   14604:	beq	14628 <__assert_fail@plt+0x3728>
   14608:	lsrs	r3, r5, #30
   1460c:	movne	r2, #1
   14610:	moveq	r2, #0
   14614:	lsls	r3, r5, #2
   14618:	bmi	144d8 <__assert_fail@plt+0x35d8>
   1461c:	cmp	r2, #0
   14620:	beq	14580 <__assert_fail@plt+0x3680>
   14624:	b	144d8 <__assert_fail@plt+0x35d8>
   14628:	mov	r3, #64	; 0x40
   1462c:	mov	r5, #16
   14630:	b	14580 <__assert_fail@plt+0x3680>
   14634:	mov	r0, r7
   14638:	bl	10cf0 <free@plt>
   1463c:	b	145e0 <__assert_fail@plt+0x36e0>
   14640:	bl	10d38 <__stack_chk_fail@plt>
   14644:	andeq	r5, r2, r8, lsl #30
   14648:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   1464c:	push	{r4, r5, r6, lr}
   14650:	sub	sp, sp, #32
   14654:	cmp	r1, #0
   14658:	mov	r5, r0
   1465c:	ldr	r4, [sp, #48]	; 0x30
   14660:	ldr	r6, [sp, #52]	; 0x34
   14664:	beq	146f4 <__assert_fail@plt+0x37f4>
   14668:	strd	r2, [sp]
   1466c:	mov	r3, r1
   14670:	ldr	r2, [pc, #828]	; 149b4 <__assert_fail@plt+0x3ab4>
   14674:	mov	r1, #1
   14678:	bl	10e7c <__fprintf_chk@plt>
   1467c:	mov	r2, #5
   14680:	ldr	r1, [pc, #816]	; 149b8 <__assert_fail@plt+0x3ab8>
   14684:	mov	r0, #0
   14688:	bl	10d2c <dcgettext@plt>
   1468c:	ldr	r3, [pc, #808]	; 149bc <__assert_fail@plt+0x3abc>
   14690:	ldr	r2, [pc, #808]	; 149c0 <__assert_fail@plt+0x3ac0>
   14694:	str	r3, [sp]
   14698:	mov	r1, #1
   1469c:	mov	r3, r0
   146a0:	mov	r0, r5
   146a4:	bl	10e7c <__fprintf_chk@plt>
   146a8:	ldr	r1, [pc, #788]	; 149c4 <__assert_fail@plt+0x3ac4>
   146ac:	mov	r2, #5
   146b0:	mov	r0, #0
   146b4:	bl	10d2c <dcgettext@plt>
   146b8:	mov	r1, r5
   146bc:	bl	10cb4 <fputs_unlocked@plt>
   146c0:	cmp	r6, #9
   146c4:	ldrls	pc, [pc, r6, lsl #2]
   146c8:	b	149a4 <__assert_fail@plt+0x3aa4>
   146cc:			; <UNDEFINED> instruction: 0x000149b0
   146d0:	andeq	r4, r1, r8, ror r7
   146d4:	andeq	r4, r1, r4, lsr #15
   146d8:	ldrdeq	r4, [r1], -r8
   146dc:	andeq	r4, r1, r4, lsl r8
   146e0:	andeq	r4, r1, r4, asr r8
   146e4:	muleq	r1, ip, r8
   146e8:	andeq	r4, r1, ip, ror #17
   146ec:	andeq	r4, r1, r4, asr #18
   146f0:	andeq	r4, r1, ip, lsl #14
   146f4:	str	r3, [sp]
   146f8:	mov	r1, #1
   146fc:	mov	r3, r2
   14700:	ldr	r2, [pc, #704]	; 149c8 <__assert_fail@plt+0x3ac8>
   14704:	bl	10e7c <__fprintf_chk@plt>
   14708:	b	1467c <__assert_fail@plt+0x377c>
   1470c:	ldr	r1, [pc, #696]	; 149cc <__assert_fail@plt+0x3acc>
   14710:	mov	r2, #5
   14714:	mov	r0, #0
   14718:	bl	10d2c <dcgettext@plt>
   1471c:	ldr	r2, [r4, #32]
   14720:	ldr	r3, [r4, #28]
   14724:	ldr	r1, [r4, #24]
   14728:	str	r2, [sp, #28]
   1472c:	ldr	r2, [r4, #20]
   14730:	str	r3, [sp, #24]
   14734:	ldr	r3, [r4, #16]
   14738:	str	r1, [sp, #20]
   1473c:	ldr	r1, [r4, #12]
   14740:	str	r2, [sp, #16]
   14744:	ldr	r2, [r4, #8]
   14748:	str	r3, [sp, #12]
   1474c:	ldr	r3, [r4, #4]
   14750:	str	r1, [sp, #8]
   14754:	str	r2, [sp, #4]
   14758:	str	r3, [sp]
   1475c:	mov	r1, #1
   14760:	ldr	r3, [r4]
   14764:	mov	r2, r0
   14768:	mov	r0, r5
   1476c:	bl	10e7c <__fprintf_chk@plt>
   14770:	add	sp, sp, #32
   14774:	pop	{r4, r5, r6, pc}
   14778:	mov	r2, #5
   1477c:	ldr	r1, [pc, #588]	; 149d0 <__assert_fail@plt+0x3ad0>
   14780:	mov	r0, #0
   14784:	bl	10d2c <dcgettext@plt>
   14788:	ldr	r3, [r4]
   1478c:	mov	r1, #1
   14790:	mov	r2, r0
   14794:	mov	r0, r5
   14798:	add	sp, sp, #32
   1479c:	pop	{r4, r5, r6, lr}
   147a0:	b	10e7c <__fprintf_chk@plt>
   147a4:	mov	r2, #5
   147a8:	ldr	r1, [pc, #548]	; 149d4 <__assert_fail@plt+0x3ad4>
   147ac:	mov	r0, #0
   147b0:	bl	10d2c <dcgettext@plt>
   147b4:	ldr	r2, [r4, #4]
   147b8:	ldr	r3, [r4]
   147bc:	mov	r1, #1
   147c0:	str	r2, [sp, #48]	; 0x30
   147c4:	mov	r2, r0
   147c8:	mov	r0, r5
   147cc:	add	sp, sp, #32
   147d0:	pop	{r4, r5, r6, lr}
   147d4:	b	10e7c <__fprintf_chk@plt>
   147d8:	mov	r2, #5
   147dc:	ldr	r1, [pc, #500]	; 149d8 <__assert_fail@plt+0x3ad8>
   147e0:	mov	r0, #0
   147e4:	bl	10d2c <dcgettext@plt>
   147e8:	ldr	r2, [r4, #8]
   147ec:	ldr	r3, [r4, #4]
   147f0:	mov	r1, #1
   147f4:	str	r2, [sp, #52]	; 0x34
   147f8:	str	r3, [sp, #48]	; 0x30
   147fc:	ldr	r3, [r4]
   14800:	mov	r2, r0
   14804:	mov	r0, r5
   14808:	add	sp, sp, #32
   1480c:	pop	{r4, r5, r6, lr}
   14810:	b	10e7c <__fprintf_chk@plt>
   14814:	mov	r2, #5
   14818:	ldr	r1, [pc, #444]	; 149dc <__assert_fail@plt+0x3adc>
   1481c:	mov	r0, #0
   14820:	bl	10d2c <dcgettext@plt>
   14824:	ldr	r1, [r4, #12]
   14828:	ldr	r2, [r4, #8]
   1482c:	ldr	r3, [r4, #4]
   14830:	str	r1, [sp, #8]
   14834:	str	r2, [sp, #4]
   14838:	str	r3, [sp]
   1483c:	mov	r1, #1
   14840:	ldr	r3, [r4]
   14844:	mov	r2, r0
   14848:	mov	r0, r5
   1484c:	bl	10e7c <__fprintf_chk@plt>
   14850:	b	14770 <__assert_fail@plt+0x3870>
   14854:	mov	r2, #5
   14858:	ldr	r1, [pc, #384]	; 149e0 <__assert_fail@plt+0x3ae0>
   1485c:	mov	r0, #0
   14860:	bl	10d2c <dcgettext@plt>
   14864:	ldr	r3, [r4, #16]
   14868:	ldr	r1, [r4, #12]
   1486c:	ldr	r2, [r4, #8]
   14870:	str	r3, [sp, #12]
   14874:	ldr	r3, [r4, #4]
   14878:	str	r1, [sp, #8]
   1487c:	str	r2, [sp, #4]
   14880:	str	r3, [sp]
   14884:	mov	r1, #1
   14888:	ldr	r3, [r4]
   1488c:	mov	r2, r0
   14890:	mov	r0, r5
   14894:	bl	10e7c <__fprintf_chk@plt>
   14898:	b	14770 <__assert_fail@plt+0x3870>
   1489c:	mov	r2, #5
   148a0:	ldr	r1, [pc, #316]	; 149e4 <__assert_fail@plt+0x3ae4>
   148a4:	mov	r0, #0
   148a8:	bl	10d2c <dcgettext@plt>
   148ac:	ldr	r2, [r4, #20]
   148b0:	ldr	r3, [r4, #16]
   148b4:	ldr	r1, [r4, #12]
   148b8:	str	r2, [sp, #16]
   148bc:	ldr	r2, [r4, #8]
   148c0:	str	r3, [sp, #12]
   148c4:	ldr	r3, [r4, #4]
   148c8:	str	r1, [sp, #8]
   148cc:	str	r2, [sp, #4]
   148d0:	str	r3, [sp]
   148d4:	mov	r1, #1
   148d8:	ldr	r3, [r4]
   148dc:	mov	r2, r0
   148e0:	mov	r0, r5
   148e4:	bl	10e7c <__fprintf_chk@plt>
   148e8:	b	14770 <__assert_fail@plt+0x3870>
   148ec:	mov	r2, #5
   148f0:	ldr	r1, [pc, #240]	; 149e8 <__assert_fail@plt+0x3ae8>
   148f4:	mov	r0, #0
   148f8:	bl	10d2c <dcgettext@plt>
   148fc:	ldr	r1, [r4, #24]
   14900:	ldr	r2, [r4, #20]
   14904:	ldr	r3, [r4, #16]
   14908:	str	r1, [sp, #20]
   1490c:	ldr	r1, [r4, #12]
   14910:	str	r2, [sp, #16]
   14914:	ldr	r2, [r4, #8]
   14918:	str	r3, [sp, #12]
   1491c:	ldr	r3, [r4, #4]
   14920:	str	r1, [sp, #8]
   14924:	str	r2, [sp, #4]
   14928:	str	r3, [sp]
   1492c:	mov	r1, #1
   14930:	ldr	r3, [r4]
   14934:	mov	r2, r0
   14938:	mov	r0, r5
   1493c:	bl	10e7c <__fprintf_chk@plt>
   14940:	b	14770 <__assert_fail@plt+0x3870>
   14944:	mov	r2, #5
   14948:	ldr	r1, [pc, #156]	; 149ec <__assert_fail@plt+0x3aec>
   1494c:	mov	r0, #0
   14950:	bl	10d2c <dcgettext@plt>
   14954:	ldr	r3, [r4, #28]
   14958:	ldr	r1, [r4, #24]
   1495c:	ldr	r2, [r4, #20]
   14960:	str	r3, [sp, #24]
   14964:	ldr	r3, [r4, #16]
   14968:	str	r1, [sp, #20]
   1496c:	ldr	r1, [r4, #12]
   14970:	str	r2, [sp, #16]
   14974:	ldr	r2, [r4, #8]
   14978:	str	r3, [sp, #12]
   1497c:	ldr	r3, [r4, #4]
   14980:	str	r1, [sp, #8]
   14984:	str	r2, [sp, #4]
   14988:	str	r3, [sp]
   1498c:	mov	r1, #1
   14990:	ldr	r3, [r4]
   14994:	mov	r2, r0
   14998:	mov	r0, r5
   1499c:	bl	10e7c <__fprintf_chk@plt>
   149a0:	b	14770 <__assert_fail@plt+0x3870>
   149a4:	mov	r2, #5
   149a8:	ldr	r1, [pc, #64]	; 149f0 <__assert_fail@plt+0x3af0>
   149ac:	b	14714 <__assert_fail@plt+0x3814>
   149b0:	bl	10ee8 <abort@plt>
   149b4:	andeq	r5, r1, r4, asr #18
   149b8:	andeq	r5, r1, r8, asr r9
   149bc:	andeq	r0, r0, r2, ror #15
   149c0:	andeq	r5, r1, ip, lsr #24
   149c4:	andeq	r5, r1, ip, asr r9
   149c8:	andeq	r5, r1, r0, asr r9
   149cc:	andeq	r5, r1, r4, lsr fp
   149d0:	andeq	r5, r1, r8, lsr #20
   149d4:	andeq	r5, r1, r8, lsr sl
   149d8:	andeq	r5, r1, r0, asr sl
   149dc:	andeq	r5, r1, ip, ror #20
   149e0:	andeq	r5, r1, ip, lsl #21
   149e4:			; <UNDEFINED> instruction: 0x00015ab0
   149e8:	ldrdeq	r5, [r1], -r8
   149ec:	andeq	r5, r1, r4, lsl #22
   149f0:	andeq	r5, r1, r8, ror #22
   149f4:	push	{r4, r5, lr}
   149f8:	sub	sp, sp, #12
   149fc:	ldr	r5, [sp, #24]
   14a00:	ldr	ip, [r5]
   14a04:	cmp	ip, #0
   14a08:	beq	14a24 <__assert_fail@plt+0x3b24>
   14a0c:	mov	lr, r5
   14a10:	mov	ip, #0
   14a14:	ldr	r4, [lr, #4]!
   14a18:	add	ip, ip, #1
   14a1c:	cmp	r4, #0
   14a20:	bne	14a14 <__assert_fail@plt+0x3b14>
   14a24:	stm	sp, {r5, ip}
   14a28:	bl	1464c <__assert_fail@plt+0x374c>
   14a2c:	add	sp, sp, #12
   14a30:	pop	{r4, r5, pc}
   14a34:	push	{r4, r5, r6, lr}
   14a38:	sub	sp, sp, #56	; 0x38
   14a3c:	ldr	r6, [pc, #88]	; 14a9c <__assert_fail@plt+0x3b9c>
   14a40:	ldr	r5, [sp, #72]	; 0x48
   14a44:	add	r4, sp, #8
   14a48:	ldr	ip, [r6]
   14a4c:	str	ip, [sp, #52]	; 0x34
   14a50:	mov	ip, #0
   14a54:	ldr	lr, [r5], #4
   14a58:	cmp	lr, #0
   14a5c:	str	lr, [r4, #4]!
   14a60:	beq	14a70 <__assert_fail@plt+0x3b70>
   14a64:	add	ip, ip, #1
   14a68:	cmp	ip, #10
   14a6c:	bne	14a54 <__assert_fail@plt+0x3b54>
   14a70:	add	lr, sp, #12
   14a74:	str	ip, [sp, #4]
   14a78:	str	lr, [sp]
   14a7c:	bl	1464c <__assert_fail@plt+0x374c>
   14a80:	ldr	r2, [sp, #52]	; 0x34
   14a84:	ldr	r3, [r6]
   14a88:	cmp	r2, r3
   14a8c:	bne	14a98 <__assert_fail@plt+0x3b98>
   14a90:	add	sp, sp, #56	; 0x38
   14a94:	pop	{r4, r5, r6, pc}
   14a98:	bl	10d38 <__stack_chk_fail@plt>
   14a9c:	andeq	r5, r2, r8, lsl #30
   14aa0:	push	{r3}		; (str r3, [sp, #-4]!)
   14aa4:	mov	ip, #0
   14aa8:	push	{r4, r5, r6, lr}
   14aac:	sub	sp, sp, #60	; 0x3c
   14ab0:	ldr	r6, [pc, #100]	; 14b1c <__assert_fail@plt+0x3c1c>
   14ab4:	add	r5, sp, #8
   14ab8:	add	r4, sp, #80	; 0x50
   14abc:	ldr	r3, [r6]
   14ac0:	str	r4, [sp, #8]
   14ac4:	str	r3, [sp, #52]	; 0x34
   14ac8:	ldr	r3, [sp, #76]	; 0x4c
   14acc:	ldr	lr, [r4], #4
   14ad0:	cmp	lr, #0
   14ad4:	str	lr, [r5, #4]!
   14ad8:	beq	14ae8 <__assert_fail@plt+0x3be8>
   14adc:	add	ip, ip, #1
   14ae0:	cmp	ip, #10
   14ae4:	bne	14acc <__assert_fail@plt+0x3bcc>
   14ae8:	add	lr, sp, #12
   14aec:	str	ip, [sp, #4]
   14af0:	str	lr, [sp]
   14af4:	bl	1464c <__assert_fail@plt+0x374c>
   14af8:	ldr	r2, [sp, #52]	; 0x34
   14afc:	ldr	r3, [r6]
   14b00:	cmp	r2, r3
   14b04:	bne	14b18 <__assert_fail@plt+0x3c18>
   14b08:	add	sp, sp, #60	; 0x3c
   14b0c:	pop	{r4, r5, r6, lr}
   14b10:	add	sp, sp, #4
   14b14:	bx	lr
   14b18:	bl	10d38 <__stack_chk_fail@plt>
   14b1c:	andeq	r5, r2, r8, lsl #30
   14b20:	push	{r4, lr}
   14b24:	mov	r2, #5
   14b28:	ldr	r1, [pc, #88]	; 14b88 <__assert_fail@plt+0x3c88>
   14b2c:	mov	r0, #0
   14b30:	bl	10d2c <dcgettext@plt>
   14b34:	ldr	r2, [pc, #80]	; 14b8c <__assert_fail@plt+0x3c8c>
   14b38:	mov	r1, r0
   14b3c:	mov	r0, #1
   14b40:	bl	10e64 <__printf_chk@plt>
   14b44:	mov	r2, #5
   14b48:	ldr	r1, [pc, #64]	; 14b90 <__assert_fail@plt+0x3c90>
   14b4c:	mov	r0, #0
   14b50:	bl	10d2c <dcgettext@plt>
   14b54:	ldr	r3, [pc, #56]	; 14b94 <__assert_fail@plt+0x3c94>
   14b58:	ldr	r2, [pc, #56]	; 14b98 <__assert_fail@plt+0x3c98>
   14b5c:	mov	r1, r0
   14b60:	mov	r0, #1
   14b64:	bl	10e64 <__printf_chk@plt>
   14b68:	ldr	r1, [pc, #44]	; 14b9c <__assert_fail@plt+0x3c9c>
   14b6c:	mov	r2, #5
   14b70:	mov	r0, #0
   14b74:	bl	10d2c <dcgettext@plt>
   14b78:	ldr	r3, [pc, #32]	; 14ba0 <__assert_fail@plt+0x3ca0>
   14b7c:	pop	{r4, lr}
   14b80:	ldr	r1, [r3]
   14b84:	b	10cb4 <fputs_unlocked@plt>
   14b88:	andeq	r5, r1, r4, lsr #23
   14b8c:			; <UNDEFINED> instruction: 0x00015bbc
   14b90:	ldrdeq	r5, [r1], -r4
   14b94:	andeq	r5, r1, ip, lsl #11
   14b98:			; <UNDEFINED> instruction: 0x000155b4
   14b9c:	andeq	r5, r1, r8, ror #23
   14ba0:	andeq	r6, r2, ip, asr #2
   14ba4:	push	{r4, lr}
   14ba8:	mov	r4, r0
   14bac:	bl	10dd4 <malloc@plt>
   14bb0:	adds	r4, r4, #0
   14bb4:	movne	r4, #1
   14bb8:	cmp	r0, #0
   14bbc:	movne	r4, #0
   14bc0:	cmp	r4, #0
   14bc4:	popeq	{r4, pc}
   14bc8:	bl	14dec <__assert_fail@plt+0x3eec>
   14bcc:	push	{r4, r5, r6, lr}
   14bd0:	umull	r4, r5, r0, r1
   14bd4:	adds	r3, r5, #0
   14bd8:	movne	r3, #1
   14bdc:	cmp	r4, #0
   14be0:	blt	14bf8 <__assert_fail@plt+0x3cf8>
   14be4:	cmp	r3, #0
   14be8:	bne	14bf8 <__assert_fail@plt+0x3cf8>
   14bec:	mul	r0, r1, r0
   14bf0:	pop	{r4, r5, r6, lr}
   14bf4:	b	14ba4 <__assert_fail@plt+0x3ca4>
   14bf8:	bl	14dec <__assert_fail@plt+0x3eec>
   14bfc:	b	14ba4 <__assert_fail@plt+0x3ca4>
   14c00:	adds	r3, r0, #0
   14c04:	movne	r3, #1
   14c08:	cmp	r1, #0
   14c0c:	movne	r3, #0
   14c10:	cmp	r3, #0
   14c14:	push	{r4, lr}
   14c18:	bne	14c40 <__assert_fail@plt+0x3d40>
   14c1c:	mov	r4, r1
   14c20:	bl	10d50 <realloc@plt>
   14c24:	adds	r4, r4, #0
   14c28:	movne	r4, #1
   14c2c:	cmp	r0, #0
   14c30:	movne	r4, #0
   14c34:	cmp	r4, #0
   14c38:	popeq	{r4, pc}
   14c3c:	bl	14dec <__assert_fail@plt+0x3eec>
   14c40:	bl	10cf0 <free@plt>
   14c44:	mov	r0, #0
   14c48:	pop	{r4, pc}
   14c4c:	push	{r4, r5, r6, lr}
   14c50:	umull	r4, r5, r1, r2
   14c54:	adds	r3, r5, #0
   14c58:	movne	r3, #1
   14c5c:	cmp	r4, #0
   14c60:	blt	14c78 <__assert_fail@plt+0x3d78>
   14c64:	cmp	r3, #0
   14c68:	bne	14c78 <__assert_fail@plt+0x3d78>
   14c6c:	mul	r1, r2, r1
   14c70:	pop	{r4, r5, r6, lr}
   14c74:	b	14c00 <__assert_fail@plt+0x3d00>
   14c78:	bl	14dec <__assert_fail@plt+0x3eec>
   14c7c:	push	{r4, r5, r6, r7, r8, lr}
   14c80:	subs	r7, r0, #0
   14c84:	mov	r6, r1
   14c88:	mov	r5, r2
   14c8c:	ldr	r4, [r1]
   14c90:	beq	14cc4 <__assert_fail@plt+0x3dc4>
   14c94:	mov	r1, r2
   14c98:	ldr	r0, [pc, #104]	; 14d08 <__assert_fail@plt+0x3e08>
   14c9c:	bl	15140 <__assert_fail@plt+0x4240>
   14ca0:	cmp	r0, r4
   14ca4:	bls	14ce8 <__assert_fail@plt+0x3de8>
   14ca8:	add	r3, r4, #1
   14cac:	add	r4, r3, r4, lsr #1
   14cb0:	str	r4, [r6]
   14cb4:	mul	r1, r5, r4
   14cb8:	mov	r0, r7
   14cbc:	pop	{r4, r5, r6, r7, r8, lr}
   14cc0:	b	14c00 <__assert_fail@plt+0x3d00>
   14cc4:	cmp	r4, #0
   14cc8:	beq	14cec <__assert_fail@plt+0x3dec>
   14ccc:	umull	r0, r1, r4, r5
   14cd0:	adds	r3, r1, #0
   14cd4:	movne	r3, #1
   14cd8:	cmp	r0, #0
   14cdc:	blt	14ce8 <__assert_fail@plt+0x3de8>
   14ce0:	cmp	r3, #0
   14ce4:	beq	14cb0 <__assert_fail@plt+0x3db0>
   14ce8:	bl	14dec <__assert_fail@plt+0x3eec>
   14cec:	mov	r1, r2
   14cf0:	mov	r0, #64	; 0x40
   14cf4:	bl	15140 <__assert_fail@plt+0x4240>
   14cf8:	cmp	r5, #64	; 0x40
   14cfc:	movls	r4, r0
   14d00:	addhi	r4, r0, #1
   14d04:	b	14ccc <__assert_fail@plt+0x3dcc>
   14d08:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14d0c:	cmp	r0, #0
   14d10:	ldr	r3, [r1]
   14d14:	beq	14d38 <__assert_fail@plt+0x3e38>
   14d18:	ldr	r2, [pc, #60]	; 14d5c <__assert_fail@plt+0x3e5c>
   14d1c:	cmp	r3, r2
   14d20:	bhi	14d54 <__assert_fail@plt+0x3e54>
   14d24:	add	r2, r3, #1
   14d28:	add	r3, r2, r3, lsr #1
   14d2c:	str	r3, [r1]
   14d30:	mov	r1, r3
   14d34:	b	14c00 <__assert_fail@plt+0x3d00>
   14d38:	cmp	r3, #0
   14d3c:	bne	14d50 <__assert_fail@plt+0x3e50>
   14d40:	mov	r3, #64	; 0x40
   14d44:	str	r3, [r1]
   14d48:	mov	r1, r3
   14d4c:	b	14c00 <__assert_fail@plt+0x3d00>
   14d50:	bge	14d2c <__assert_fail@plt+0x3e2c>
   14d54:	push	{r4, lr}
   14d58:	bl	14dec <__assert_fail@plt+0x3eec>
   14d5c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14d60:	push	{r4, lr}
   14d64:	mov	r4, r0
   14d68:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   14d6c:	mov	r2, r4
   14d70:	mov	r1, #0
   14d74:	pop	{r4, lr}
   14d78:	b	10e58 <memset@plt>
   14d7c:	push	{r4, r5, r6, lr}
   14d80:	umull	r4, r5, r0, r1
   14d84:	adds	r3, r5, #0
   14d88:	movne	r3, #1
   14d8c:	cmp	r4, #0
   14d90:	blt	14da8 <__assert_fail@plt+0x3ea8>
   14d94:	cmp	r3, #0
   14d98:	bne	14da8 <__assert_fail@plt+0x3ea8>
   14d9c:	bl	10ca8 <calloc@plt>
   14da0:	cmp	r0, #0
   14da4:	popne	{r4, r5, r6, pc}
   14da8:	bl	14dec <__assert_fail@plt+0x3eec>
   14dac:	push	{r4, r5, r6, lr}
   14db0:	mov	r4, r1
   14db4:	mov	r5, r0
   14db8:	mov	r0, r1
   14dbc:	bl	14ba4 <__assert_fail@plt+0x3ca4>
   14dc0:	mov	r2, r4
   14dc4:	mov	r1, r5
   14dc8:	pop	{r4, r5, r6, lr}
   14dcc:	b	10d08 <memcpy@plt>
   14dd0:	push	{r4, lr}
   14dd4:	mov	r4, r0
   14dd8:	bl	10e34 <strlen@plt>
   14ddc:	add	r1, r0, #1
   14de0:	mov	r0, r4
   14de4:	pop	{r4, lr}
   14de8:	b	14dac <__assert_fail@plt+0x3eac>
   14dec:	ldr	r3, [pc, #44]	; 14e20 <__assert_fail@plt+0x3f20>
   14df0:	push	{r4, lr}
   14df4:	mov	r2, #5
   14df8:	ldr	r1, [pc, #36]	; 14e24 <__assert_fail@plt+0x3f24>
   14dfc:	mov	r0, #0
   14e00:	ldr	r4, [r3]
   14e04:	bl	10d2c <dcgettext@plt>
   14e08:	ldr	r2, [pc, #24]	; 14e28 <__assert_fail@plt+0x3f28>
   14e0c:	mov	r1, #0
   14e10:	mov	r3, r0
   14e14:	mov	r0, r4
   14e18:	bl	10db0 <error@plt>
   14e1c:	bl	10ee8 <abort@plt>
   14e20:	andeq	r6, r2, r8, ror #1
   14e24:	andeq	r5, r1, ip, asr ip
   14e28:	ldrdeq	r5, [r1], -r4
   14e2c:	push	{r4, r5, lr}
   14e30:	sub	sp, sp, #12
   14e34:	mov	r4, r0
   14e38:	bl	10e70 <fileno@plt>
   14e3c:	cmp	r0, #0
   14e40:	mov	r0, r4
   14e44:	blt	14ec0 <__assert_fail@plt+0x3fc0>
   14e48:	bl	10dec <__freading@plt>
   14e4c:	cmp	r0, #0
   14e50:	bne	14e8c <__assert_fail@plt+0x3f8c>
   14e54:	mov	r0, r4
   14e58:	bl	14ecc <__assert_fail@plt+0x3fcc>
   14e5c:	cmp	r0, #0
   14e60:	beq	14ebc <__assert_fail@plt+0x3fbc>
   14e64:	bl	10e40 <__errno_location@plt>
   14e68:	mov	r5, r0
   14e6c:	mov	r0, r4
   14e70:	ldr	r4, [r5]
   14e74:	bl	10e88 <fclose@plt>
   14e78:	cmp	r4, #0
   14e7c:	mvnne	r0, #0
   14e80:	strne	r4, [r5]
   14e84:	add	sp, sp, #12
   14e88:	pop	{r4, r5, pc}
   14e8c:	mov	r0, r4
   14e90:	bl	10e70 <fileno@plt>
   14e94:	mov	r3, #1
   14e98:	str	r3, [sp]
   14e9c:	mov	r2, #0
   14ea0:	mov	r3, #0
   14ea4:	bl	10d80 <lseek64@plt>
   14ea8:	mvn	r3, #0
   14eac:	mvn	r2, #0
   14eb0:	cmp	r1, r3
   14eb4:	cmpeq	r0, r2
   14eb8:	bne	14e54 <__assert_fail@plt+0x3f54>
   14ebc:	mov	r0, r4
   14ec0:	add	sp, sp, #12
   14ec4:	pop	{r4, r5, lr}
   14ec8:	b	10e88 <fclose@plt>
   14ecc:	push	{r4, lr}
   14ed0:	subs	r4, r0, #0
   14ed4:	sub	sp, sp, #8
   14ed8:	beq	14ef4 <__assert_fail@plt+0x3ff4>
   14edc:	bl	10dec <__freading@plt>
   14ee0:	cmp	r0, #0
   14ee4:	beq	14ef4 <__assert_fail@plt+0x3ff4>
   14ee8:	ldr	r3, [r4]
   14eec:	tst	r3, #256	; 0x100
   14ef0:	bne	14f04 <__assert_fail@plt+0x4004>
   14ef4:	mov	r0, r4
   14ef8:	add	sp, sp, #8
   14efc:	pop	{r4, lr}
   14f00:	b	10ce4 <fflush@plt>
   14f04:	mov	r3, #1
   14f08:	str	r3, [sp]
   14f0c:	mov	r2, #0
   14f10:	mov	r3, #0
   14f14:	mov	r0, r4
   14f18:	bl	14f2c <__assert_fail@plt+0x402c>
   14f1c:	mov	r0, r4
   14f20:	add	sp, sp, #8
   14f24:	pop	{r4, lr}
   14f28:	b	10ce4 <fflush@plt>
   14f2c:	push	{r4, r5, r6, r7, r8, lr}
   14f30:	sub	sp, sp, #8
   14f34:	ldmib	r0, {ip, lr}
   14f38:	mov	r4, r0
   14f3c:	ldr	r5, [sp, #32]
   14f40:	cmp	lr, ip
   14f44:	beq	14f5c <__assert_fail@plt+0x405c>
   14f48:	str	r5, [sp, #32]
   14f4c:	mov	r0, r4
   14f50:	add	sp, sp, #8
   14f54:	pop	{r4, r5, r6, r7, r8, lr}
   14f58:	b	10e94 <fseeko64@plt>
   14f5c:	ldr	lr, [r0, #20]
   14f60:	ldr	ip, [r0, #16]
   14f64:	cmp	lr, ip
   14f68:	bne	14f48 <__assert_fail@plt+0x4048>
   14f6c:	ldr	r8, [r0, #36]	; 0x24
   14f70:	cmp	r8, #0
   14f74:	bne	14f48 <__assert_fail@plt+0x4048>
   14f78:	mov	r6, r2
   14f7c:	mov	r7, r3
   14f80:	bl	10e70 <fileno@plt>
   14f84:	mov	r2, r6
   14f88:	mov	r3, r7
   14f8c:	str	r5, [sp]
   14f90:	bl	10d80 <lseek64@plt>
   14f94:	mvn	r3, #0
   14f98:	mvn	r2, #0
   14f9c:	cmp	r1, r3
   14fa0:	cmpeq	r0, r2
   14fa4:	beq	14fc4 <__assert_fail@plt+0x40c4>
   14fa8:	ldr	r3, [r4]
   14fac:	strd	r0, [r4, #80]	; 0x50
   14fb0:	mov	r0, r8
   14fb4:	bic	r3, r3, #16
   14fb8:	str	r3, [r4]
   14fbc:	add	sp, sp, #8
   14fc0:	pop	{r4, r5, r6, r7, r8, pc}
   14fc4:	mvn	r0, #0
   14fc8:	b	14fbc <__assert_fail@plt+0x40bc>
   14fcc:	push	{r4, r5, r6, r7, r8, lr}
   14fd0:	subs	r7, r0, #0
   14fd4:	ldr	r5, [pc, #108]	; 15048 <__assert_fail@plt+0x4148>
   14fd8:	sub	sp, sp, #8
   14fdc:	mov	r8, r1
   14fe0:	ldr	r1, [r5]
   14fe4:	moveq	r7, sp
   14fe8:	str	r1, [sp, #4]
   14fec:	mov	r0, r7
   14ff0:	mov	r1, r8
   14ff4:	mov	r6, r2
   14ff8:	bl	10da4 <mbrtowc@plt>
   14ffc:	cmp	r6, #0
   15000:	cmnne	r0, #3
   15004:	mov	r4, r0
   15008:	bhi	15028 <__assert_fail@plt+0x4128>
   1500c:	ldr	r2, [sp, #4]
   15010:	ldr	r3, [r5]
   15014:	mov	r0, r4
   15018:	cmp	r2, r3
   1501c:	bne	15044 <__assert_fail@plt+0x4144>
   15020:	add	sp, sp, #8
   15024:	pop	{r4, r5, r6, r7, r8, pc}
   15028:	mov	r0, #0
   1502c:	bl	150c0 <__assert_fail@plt+0x41c0>
   15030:	cmp	r0, #0
   15034:	moveq	r4, #1
   15038:	ldrbeq	r3, [r8]
   1503c:	streq	r3, [r7]
   15040:	b	1500c <__assert_fail@plt+0x410c>
   15044:	bl	10d38 <__stack_chk_fail@plt>
   15048:	andeq	r5, r2, r8, lsl #30
   1504c:	push	{r4, r5, r6, lr}
   15050:	mov	r4, r0
   15054:	bl	10d98 <__fpending@plt>
   15058:	ldr	r5, [r4]
   1505c:	and	r5, r5, #32
   15060:	mov	r6, r0
   15064:	mov	r0, r4
   15068:	bl	14e2c <__assert_fail@plt+0x3f2c>
   1506c:	cmp	r5, #0
   15070:	mov	r4, r0
   15074:	bne	150a0 <__assert_fail@plt+0x41a0>
   15078:	cmp	r0, #0
   1507c:	beq	15098 <__assert_fail@plt+0x4198>
   15080:	cmp	r6, #0
   15084:	bne	150b8 <__assert_fail@plt+0x41b8>
   15088:	bl	10e40 <__errno_location@plt>
   1508c:	ldr	r4, [r0]
   15090:	subs	r4, r4, #9
   15094:	mvnne	r4, #0
   15098:	mov	r0, r4
   1509c:	pop	{r4, r5, r6, pc}
   150a0:	cmp	r0, #0
   150a4:	bne	150b8 <__assert_fail@plt+0x41b8>
   150a8:	bl	10e40 <__errno_location@plt>
   150ac:	str	r4, [r0]
   150b0:	mvn	r4, #0
   150b4:	b	15098 <__assert_fail@plt+0x4198>
   150b8:	mvn	r4, #0
   150bc:	b	15098 <__assert_fail@plt+0x4198>
   150c0:	push	{r4, lr}
   150c4:	mov	r1, #0
   150c8:	bl	10eac <setlocale@plt>
   150cc:	subs	r4, r0, #0
   150d0:	beq	150fc <__assert_fail@plt+0x41fc>
   150d4:	ldr	r1, [pc, #40]	; 15104 <__assert_fail@plt+0x4204>
   150d8:	bl	10ccc <strcmp@plt>
   150dc:	cmp	r0, #0
   150e0:	popeq	{r4, pc}
   150e4:	mov	r0, r4
   150e8:	ldr	r1, [pc, #24]	; 15108 <__assert_fail@plt+0x4208>
   150ec:	bl	10ccc <strcmp@plt>
   150f0:	adds	r0, r0, #0
   150f4:	movne	r0, #1
   150f8:	pop	{r4, pc}
   150fc:	mov	r0, #1
   15100:	pop	{r4, pc}
   15104:	andeq	r5, r1, r0, ror ip
   15108:	andeq	r5, r1, r4, ror ip
   1510c:	push	{r4, lr}
   15110:	mov	r0, #14
   15114:	bl	10ec4 <nl_langinfo@plt>
   15118:	cmp	r0, #0
   1511c:	beq	15134 <__assert_fail@plt+0x4234>
   15120:	ldrb	r2, [r0]
   15124:	ldr	r3, [pc, #16]	; 1513c <__assert_fail@plt+0x423c>
   15128:	cmp	r2, #0
   1512c:	moveq	r0, r3
   15130:	pop	{r4, pc}
   15134:	ldr	r0, [pc]	; 1513c <__assert_fail@plt+0x423c>
   15138:	pop	{r4, pc}
   1513c:	andeq	r5, r1, ip, ror ip
   15140:	subs	r2, r1, #1
   15144:	bxeq	lr
   15148:	bcc	15320 <__assert_fail@plt+0x4420>
   1514c:	cmp	r0, r1
   15150:	bls	15304 <__assert_fail@plt+0x4404>
   15154:	tst	r1, r2
   15158:	beq	15310 <__assert_fail@plt+0x4410>
   1515c:	clz	r3, r0
   15160:	clz	r2, r1
   15164:	sub	r3, r2, r3
   15168:	rsbs	r3, r3, #31
   1516c:	addne	r3, r3, r3, lsl #1
   15170:	mov	r2, #0
   15174:	addne	pc, pc, r3, lsl #2
   15178:	nop			; (mov r0, r0)
   1517c:	cmp	r0, r1, lsl #31
   15180:	adc	r2, r2, r2
   15184:	subcs	r0, r0, r1, lsl #31
   15188:	cmp	r0, r1, lsl #30
   1518c:	adc	r2, r2, r2
   15190:	subcs	r0, r0, r1, lsl #30
   15194:	cmp	r0, r1, lsl #29
   15198:	adc	r2, r2, r2
   1519c:	subcs	r0, r0, r1, lsl #29
   151a0:	cmp	r0, r1, lsl #28
   151a4:	adc	r2, r2, r2
   151a8:	subcs	r0, r0, r1, lsl #28
   151ac:	cmp	r0, r1, lsl #27
   151b0:	adc	r2, r2, r2
   151b4:	subcs	r0, r0, r1, lsl #27
   151b8:	cmp	r0, r1, lsl #26
   151bc:	adc	r2, r2, r2
   151c0:	subcs	r0, r0, r1, lsl #26
   151c4:	cmp	r0, r1, lsl #25
   151c8:	adc	r2, r2, r2
   151cc:	subcs	r0, r0, r1, lsl #25
   151d0:	cmp	r0, r1, lsl #24
   151d4:	adc	r2, r2, r2
   151d8:	subcs	r0, r0, r1, lsl #24
   151dc:	cmp	r0, r1, lsl #23
   151e0:	adc	r2, r2, r2
   151e4:	subcs	r0, r0, r1, lsl #23
   151e8:	cmp	r0, r1, lsl #22
   151ec:	adc	r2, r2, r2
   151f0:	subcs	r0, r0, r1, lsl #22
   151f4:	cmp	r0, r1, lsl #21
   151f8:	adc	r2, r2, r2
   151fc:	subcs	r0, r0, r1, lsl #21
   15200:	cmp	r0, r1, lsl #20
   15204:	adc	r2, r2, r2
   15208:	subcs	r0, r0, r1, lsl #20
   1520c:	cmp	r0, r1, lsl #19
   15210:	adc	r2, r2, r2
   15214:	subcs	r0, r0, r1, lsl #19
   15218:	cmp	r0, r1, lsl #18
   1521c:	adc	r2, r2, r2
   15220:	subcs	r0, r0, r1, lsl #18
   15224:	cmp	r0, r1, lsl #17
   15228:	adc	r2, r2, r2
   1522c:	subcs	r0, r0, r1, lsl #17
   15230:	cmp	r0, r1, lsl #16
   15234:	adc	r2, r2, r2
   15238:	subcs	r0, r0, r1, lsl #16
   1523c:	cmp	r0, r1, lsl #15
   15240:	adc	r2, r2, r2
   15244:	subcs	r0, r0, r1, lsl #15
   15248:	cmp	r0, r1, lsl #14
   1524c:	adc	r2, r2, r2
   15250:	subcs	r0, r0, r1, lsl #14
   15254:	cmp	r0, r1, lsl #13
   15258:	adc	r2, r2, r2
   1525c:	subcs	r0, r0, r1, lsl #13
   15260:	cmp	r0, r1, lsl #12
   15264:	adc	r2, r2, r2
   15268:	subcs	r0, r0, r1, lsl #12
   1526c:	cmp	r0, r1, lsl #11
   15270:	adc	r2, r2, r2
   15274:	subcs	r0, r0, r1, lsl #11
   15278:	cmp	r0, r1, lsl #10
   1527c:	adc	r2, r2, r2
   15280:	subcs	r0, r0, r1, lsl #10
   15284:	cmp	r0, r1, lsl #9
   15288:	adc	r2, r2, r2
   1528c:	subcs	r0, r0, r1, lsl #9
   15290:	cmp	r0, r1, lsl #8
   15294:	adc	r2, r2, r2
   15298:	subcs	r0, r0, r1, lsl #8
   1529c:	cmp	r0, r1, lsl #7
   152a0:	adc	r2, r2, r2
   152a4:	subcs	r0, r0, r1, lsl #7
   152a8:	cmp	r0, r1, lsl #6
   152ac:	adc	r2, r2, r2
   152b0:	subcs	r0, r0, r1, lsl #6
   152b4:	cmp	r0, r1, lsl #5
   152b8:	adc	r2, r2, r2
   152bc:	subcs	r0, r0, r1, lsl #5
   152c0:	cmp	r0, r1, lsl #4
   152c4:	adc	r2, r2, r2
   152c8:	subcs	r0, r0, r1, lsl #4
   152cc:	cmp	r0, r1, lsl #3
   152d0:	adc	r2, r2, r2
   152d4:	subcs	r0, r0, r1, lsl #3
   152d8:	cmp	r0, r1, lsl #2
   152dc:	adc	r2, r2, r2
   152e0:	subcs	r0, r0, r1, lsl #2
   152e4:	cmp	r0, r1, lsl #1
   152e8:	adc	r2, r2, r2
   152ec:	subcs	r0, r0, r1, lsl #1
   152f0:	cmp	r0, r1
   152f4:	adc	r2, r2, r2
   152f8:	subcs	r0, r0, r1
   152fc:	mov	r0, r2
   15300:	bx	lr
   15304:	moveq	r0, #1
   15308:	movne	r0, #0
   1530c:	bx	lr
   15310:	clz	r2, r1
   15314:	rsb	r2, r2, #31
   15318:	lsr	r0, r0, r2
   1531c:	bx	lr
   15320:	cmp	r0, #0
   15324:	mvnne	r0, #0
   15328:	b	1534c <__assert_fail@plt+0x444c>
   1532c:	cmp	r1, #0
   15330:	beq	15320 <__assert_fail@plt+0x4420>
   15334:	push	{r0, r1, lr}
   15338:	bl	15140 <__assert_fail@plt+0x4240>
   1533c:	pop	{r1, r2, lr}
   15340:	mul	r3, r2, r0
   15344:	sub	r1, r1, r3
   15348:	bx	lr
   1534c:	push	{r1, lr}
   15350:	mov	r0, #8
   15354:	bl	10cc0 <raise@plt>
   15358:	pop	{r1, pc}
   1535c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15360:	mov	r7, r0
   15364:	ldr	r6, [pc, #72]	; 153b4 <__assert_fail@plt+0x44b4>
   15368:	ldr	r5, [pc, #72]	; 153b8 <__assert_fail@plt+0x44b8>
   1536c:	add	r6, pc, r6
   15370:	add	r5, pc, r5
   15374:	sub	r6, r6, r5
   15378:	mov	r8, r1
   1537c:	mov	r9, r2
   15380:	bl	10c88 <calloc@plt-0x20>
   15384:	asrs	r6, r6, #2
   15388:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1538c:	mov	r4, #0
   15390:	add	r4, r4, #1
   15394:	ldr	r3, [r5], #4
   15398:	mov	r2, r9
   1539c:	mov	r1, r8
   153a0:	mov	r0, r7
   153a4:	blx	r3
   153a8:	cmp	r6, r4
   153ac:	bne	15390 <__assert_fail@plt+0x4490>
   153b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153b4:	muleq	r1, r0, fp
   153b8:	andeq	r0, r1, r8, lsl #23
   153bc:	bx	lr
   153c0:	ldr	r3, [pc, #12]	; 153d4 <__assert_fail@plt+0x44d4>
   153c4:	mov	r1, #0
   153c8:	add	r3, pc, r3
   153cc:	ldr	r2, [r3]
   153d0:	b	10e4c <__cxa_atexit@plt>
   153d4:	andeq	r0, r1, r0, lsl sp

Disassembly of section .fini:

000153d8 <.fini>:
   153d8:	push	{r3, lr}
   153dc:	pop	{r3, pc}
