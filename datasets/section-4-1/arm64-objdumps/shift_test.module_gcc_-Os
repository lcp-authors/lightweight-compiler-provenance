
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//shift_test.module_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_bit64>:
   0:	sub	sp, sp, #0x10
   4:	cmp	w1, #0x3f
   8:	str	x0, [sp, #8]
   c:	b.gt	50 <get_bit64+0x50>
  10:	adrp	x0, 0 <get_bit64>
  14:	mov	w2, #0x8                   	// #8
  18:	ldr	x3, [x0]
  1c:	negs	w0, w1
  20:	sdiv	w2, w1, w2
  24:	and	w0, w0, #0x7
  28:	and	w1, w1, #0x7
  2c:	csneg	w1, w1, w0, mi  // mi = first
  30:	add	x0, sp, #0x8
  34:	ldrb	w1, [x3, w1, sxtw]
  38:	ldrb	w0, [x0, w2, sxtw]
  3c:	and	w0, w0, w1
  40:	tst	w0, #0xff
  44:	cset	w0, ne  // ne = any
  48:	add	sp, sp, #0x10
  4c:	ret
  50:	mov	w0, #0x0                   	// #0
  54:	b	48 <get_bit64+0x48>
	...

0000000000000060 <set_bit64>:
  60:	sub	sp, sp, #0x10
  64:	cmp	w1, #0x3f
  68:	str	x0, [sp, #8]
  6c:	b.gt	ac <set_bit64+0x4c>
  70:	mov	w0, #0x8                   	// #8
  74:	adrp	x2, 0 <get_bit64>
  78:	add	x3, sp, #0x8
  7c:	sdiv	w0, w1, w0
  80:	ldr	x4, [x2]
  84:	negs	w2, w1
  88:	and	w2, w2, #0x7
  8c:	and	w1, w1, #0x7
  90:	sxtw	x0, w0
  94:	csneg	w1, w1, w2, mi  // mi = first
  98:	ldrb	w2, [x3, x0]
  9c:	ldrb	w1, [x4, w1, sxtw]
  a0:	orr	w1, w1, w2
  a4:	strb	w1, [x3, x0]
  a8:	ldr	x0, [sp, #8]
  ac:	add	sp, sp, #0x10
  b0:	ret
  b4:	nop
	...

00000000000000c0 <test64>:
  c0:	sub	sp, sp, #0x60
  c4:	stp	x29, x30, [sp, #16]
  c8:	add	x29, sp, #0x10
  cc:	stp	x19, x20, [sp, #32]
  d0:	mov	x20, x0
  d4:	mov	w19, #0x0                   	// #0
  d8:	stp	x21, x22, [sp, #48]
  dc:	adrp	x21, 0 <get_bit64>
  e0:	add	x21, x21, #0x0
  e4:	stp	x23, x24, [sp, #64]
  e8:	mov	w24, #0x40                  	// #64
  ec:	stp	x25, x26, [sp, #80]
  f0:	adrp	x25, 0 <get_bit64>
  f4:	adrp	x26, 0 <get_bit64>
  f8:	lsl	x6, x20, x19
  fc:	mov	w5, #0x0                   	// #0
 100:	mov	x4, #0x0                   	// #0
 104:	sub	w22, w24, w19
 108:	add	w7, w5, w19
 10c:	cmp	w5, w22
 110:	b.ne	258 <test64+0x198>  // b.any
 114:	adrp	x0, 0 <get_bit64>
 118:	cmp	x6, x4
 11c:	ldr	x5, [x26]
 120:	stp	x6, x4, [sp]
 124:	mov	w7, w19
 128:	ldr	x4, [x0]
 12c:	mov	x6, x20
 130:	ldr	x1, [x21]
 134:	cset	w0, eq  // eq = none
 138:	ldr	x23, [x25]
 13c:	mov	w3, #0x70                  	// #112
 140:	add	x2, x23, #0x8
 144:	bl	0 <grub_test_assert_helper>
 148:	mov	w5, w19
 14c:	lsr	x6, x20, x19
 150:	mov	x4, #0x0                   	// #0
 154:	mov	w1, w5
 158:	mov	x0, x20
 15c:	bl	0 <get_bit64>
 160:	cbz	w0, 174 <test64+0xb4>
 164:	mov	x0, x4
 168:	sub	w1, w5, w19
 16c:	bl	60 <set_bit64>
 170:	mov	x4, x0
 174:	add	w5, w5, #0x1
 178:	cmp	w5, #0x40
 17c:	b.ne	154 <test64+0x94>  // b.any
 180:	adrp	x0, 0 <get_bit64>
 184:	cmp	x6, x4
 188:	stp	x6, x4, [sp]
 18c:	mov	w7, w19
 190:	mov	x6, x20
 194:	ldr	x5, [x0]
 198:	adrp	x0, 0 <get_bit64>
 19c:	ldr	x1, [x21]
 1a0:	add	x2, x23, #0x8
 1a4:	ldr	x4, [x0]
 1a8:	mov	w3, #0x74                  	// #116
 1ac:	cset	w0, eq  // eq = none
 1b0:	bl	0 <grub_test_assert_helper>
 1b4:	mov	w5, w19
 1b8:	asr	x6, x20, x19
 1bc:	mov	x4, #0x0                   	// #0
 1c0:	mov	w1, w5
 1c4:	mov	x0, x20
 1c8:	bl	0 <get_bit64>
 1cc:	cbz	w0, 1e0 <test64+0x120>
 1d0:	mov	x0, x4
 1d4:	sub	w1, w5, w19
 1d8:	bl	60 <set_bit64>
 1dc:	mov	x4, x0
 1e0:	add	w5, w5, #0x1
 1e4:	cmp	w5, #0x40
 1e8:	b.ne	1c0 <test64+0x100>  // b.any
 1ec:	mov	x0, x20
 1f0:	mov	w1, #0x3f                  	// #63
 1f4:	bl	0 <get_bit64>
 1f8:	cbnz	w0, 294 <test64+0x1d4>
 1fc:	adrp	x0, 0 <get_bit64>
 200:	cmp	x6, x4
 204:	stp	x6, x4, [sp]
 208:	mov	w7, w19
 20c:	add	x2, x23, #0x8
 210:	ldr	x5, [x0]
 214:	adrp	x0, 0 <get_bit64>
 218:	ldr	x1, [x21]
 21c:	add	w19, w19, #0x1
 220:	ldr	x4, [x0]
 224:	mov	x6, x20
 228:	cset	w0, eq  // eq = none
 22c:	mov	w3, #0x78                  	// #120
 230:	bl	0 <grub_test_assert_helper>
 234:	cmp	w19, #0x40
 238:	b.ne	f8 <test64+0x38>  // b.any
 23c:	ldp	x29, x30, [sp, #16]
 240:	ldp	x19, x20, [sp, #32]
 244:	ldp	x21, x22, [sp, #48]
 248:	ldp	x23, x24, [sp, #64]
 24c:	ldp	x25, x26, [sp, #80]
 250:	add	sp, sp, #0x60
 254:	ret
 258:	mov	w1, w5
 25c:	mov	x0, x20
 260:	bl	0 <get_bit64>
 264:	cbz	w0, 278 <test64+0x1b8>
 268:	mov	x0, x4
 26c:	mov	w1, w7
 270:	bl	60 <set_bit64>
 274:	mov	x4, x0
 278:	add	w5, w5, #0x1
 27c:	b	104 <test64+0x44>
 280:	mov	w1, w22
 284:	mov	x0, x4
 288:	add	w22, w22, #0x1
 28c:	bl	60 <set_bit64>
 290:	mov	x4, x0
 294:	cmp	w22, #0x40
 298:	b.ne	280 <test64+0x1c0>  // b.any
 29c:	b	1fc <test64+0x13c>
	...

00000000000002e0 <shift_test>:
 2e0:	stp	x29, x30, [sp, #-80]!
 2e4:	mov	x0, #0xffffffffffffffff    	// #-1
 2e8:	mov	x29, sp
 2ec:	stp	x19, x20, [sp, #16]
 2f0:	mov	x20, #0x7                   	// #7
 2f4:	mov	x19, #0x194                 	// #404
 2f8:	stp	x21, x22, [sp, #32]
 2fc:	mov	x21, #0xfa0                 	// #4000
 300:	mov	x22, #0x1                   	// #1
 304:	stp	x23, x24, [sp, #48]
 308:	mov	x23, #0x1d                  	// #29
 30c:	mov	x24, #0x17                  	// #23
 310:	str	x25, [sp, #64]
 314:	bl	c0 <test64>
 318:	mov	x0, #0x1                   	// #1
 31c:	bl	c0 <test64>
 320:	mov	x0, #0x2                   	// #2
 324:	bl	c0 <test64>
 328:	mov	x0, #0x0                   	// #0
 32c:	bl	c0 <test64>
 330:	mov	x0, #0x708                 	// #1800
 334:	mov	x25, #0xd                   	// #13
 338:	movk	x0, #0x506, lsl #16
 33c:	movk	x0, #0x304, lsl #32
 340:	movk	x0, #0x102, lsl #48
 344:	bl	c0 <test64>
 348:	add	x19, x19, x19, lsl #4
 34c:	madd	x19, x20, x25, x19
 350:	mul	x0, x19, x24
 354:	madd	x20, x20, x23, x0
 358:	cmp	x20, #0x0
 35c:	csel	x20, x20, x22, ne  // ne = any
 360:	cmp	x19, #0x0
 364:	csel	x19, x19, x22, ne  // ne = any
 368:	mov	x0, x19
 36c:	bl	c0 <test64>
 370:	mov	x0, x20
 374:	bl	c0 <test64>
 378:	subs	x21, x21, #0x1
 37c:	b.ne	348 <shift_test+0x68>  // b.any
 380:	ldp	x19, x20, [sp, #16]
 384:	ldp	x21, x22, [sp, #32]
 388:	ldp	x23, x24, [sp, #48]
 38c:	ldr	x25, [sp, #64]
 390:	ldp	x29, x30, [sp], #80
 394:	ret

0000000000000398 <grub_mod_init>:
 398:	adrp	x0, 0 <get_bit64>
 39c:	ldr	x1, [x0]
 3a0:	adrp	x0, 0 <get_bit64>
 3a4:	ldr	x0, [x0]
 3a8:	b	0 <grub_test_register>
 3ac:	nop
	...

00000000000003c0 <grub_mod_fini>:
 3c0:	adrp	x0, 0 <get_bit64>
 3c4:	ldr	x0, [x0]
 3c8:	b	0 <grub_test_unregister>
 3cc:	nop
	...
