In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libsupc++.a_gcc_-O0:

array_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv117__array_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv117__array_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

atexit_arm.o:     file format elf64-littleaarch64


atexit_thread.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_thread_atexit:

0000000000000000 <__cxa_thread_atexit>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x2, [sp, #24]
  18:	ldr	x1, [sp, #32]
  1c:	ldr	x0, [sp, #40]
  20:	bl	0 <__cxa_thread_atexit_impl>
  24:	ldp	x29, x30, [sp], #48
  28:	ret

bad_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9bad_allocD2Ev:

0000000000000000 <_ZNSt9bad_allocD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt9bad_allocD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9exceptionD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt9bad_allocD0Ev:

0000000000000000 <_ZNSt9bad_allocD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9bad_allocD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt9bad_alloc4whatEv:

0000000000000000 <_ZNKSt9bad_alloc4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt9bad_alloc4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

bad_array_length.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt9bad_allocC2Ev:

0000000000000000 <_ZNSt9bad_allocC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9bad_allocC1Ev>
  14:	adrp	x0, 0 <_ZTVSt9bad_alloc>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt16bad_array_lengthC2Ev:

0000000000000000 <_ZNSt16bad_array_lengthC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt16bad_array_lengthC1Ev>
  14:	adrp	x0, 0 <_ZNSt16bad_array_lengthC1Ev>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD2Ev:

0000000000000000 <_ZNSt16bad_array_lengthD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt16bad_array_lengthD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9bad_allocD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD0Ev:

0000000000000000 <_ZNSt16bad_array_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt16bad_array_lengthD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt16bad_array_length4whatEv:

0000000000000000 <_ZNKSt16bad_array_length4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt16bad_array_length4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text.__cxa_throw_bad_array_length:

0000000000000000 <__cxa_throw_bad_array_length>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <__cxa_allocate_exception>
  14:	mov	x19, x0
  18:	mov	x0, x19
  1c:	bl	0 <__cxa_throw_bad_array_length>
  20:	adrp	x0, 0 <__cxa_throw_bad_array_length>
  24:	ldr	x2, [x0]
  28:	adrp	x0, 0 <__cxa_throw_bad_array_length>
  2c:	ldr	x1, [x0]
  30:	mov	x0, x19
  34:	bl	0 <__cxa_throw>

bad_array_new.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt20bad_array_new_lengthD2Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt20bad_array_new_lengthD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9bad_allocD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthD0Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt20bad_array_new_lengthD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt20bad_array_new_length4whatEv:

0000000000000000 <_ZNKSt20bad_array_new_length4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt20bad_array_new_length4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

bad_cast.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt8bad_castD2Ev:

0000000000000000 <_ZNSt8bad_castD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt8bad_castD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9exceptionD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt8bad_castD0Ev:

0000000000000000 <_ZNSt8bad_castD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt8bad_castD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt8bad_cast4whatEv:

0000000000000000 <_ZNKSt8bad_cast4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt8bad_cast4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

bad_typeid.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt10bad_typeidD2Ev:

0000000000000000 <_ZNSt10bad_typeidD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt10bad_typeidD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9exceptionD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt10bad_typeidD0Ev:

0000000000000000 <_ZNSt10bad_typeidD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt10bad_typeidD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt10bad_typeid4whatEv:

0000000000000000 <_ZNKSt10bad_typeid4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt10bad_typeid4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_118contained_public_pENS_17__class_type_info10__sub_kindE:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_118contained_public_pENS_17__class_type_info10__sub_kindE>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	and	w0, w0, #0x6
  10:	cmp	w0, #0x6
  14:	cset	w0, eq  // eq = none
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_info15__upcast_resultC2Ei:

0000000000000000 <_ZN10__cxxabiv117__class_type_info15__upcast_resultC1Ei>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	str	xzr, [x0]
  14:	ldr	x0, [sp, #8]
  18:	str	wzr, [x0, #8]
  1c:	ldr	x0, [sp, #8]
  20:	ldr	w1, [sp, #4]
  24:	str	w1, [x0, #12]
  28:	ldr	x0, [sp, #8]
  2c:	str	xzr, [x0, #16]
  30:	nop
  34:	add	sp, sp, #0x10
  38:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv117__class_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x1, [sp, #32]
  20:	bl	0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>
  24:	and	w0, w0, #0xff
  28:	cmp	w0, #0x0
  2c:	b.eq	38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x38>  // b.none
  30:	mov	w0, #0x1                   	// #1
  34:	b	74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x74>
  38:	ldr	w0, [sp, #20]
  3c:	cmp	w0, #0x3
  40:	b.ls	4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>  // b.plast
  44:	mov	w0, #0x0                   	// #0
  48:	b	74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x74>
  4c:	ldr	x0, [sp, #32]
  50:	ldr	x0, [x0]
  54:	add	x0, x0, #0x28
  58:	ldr	x3, [x0]
  5c:	ldr	x2, [sp, #24]
  60:	ldr	x1, [sp, #40]
  64:	ldr	x0, [sp, #32]
  68:	blr	x3
  6c:	and	w0, w0, #0xff
  70:	nop
  74:	ldp	x29, x30, [sp], #48
  78:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	add	x0, sp, #0x38
  18:	mov	w1, #0x10                  	// #16
  1c:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>
  20:	ldr	x0, [sp, #40]
  24:	ldr	x0, [x0]
  28:	add	x0, x0, #0x30
  2c:	ldr	x4, [x0]
  30:	ldr	x0, [sp, #24]
  34:	ldr	x0, [x0]
  38:	add	x1, sp, #0x38
  3c:	mov	x3, x1
  40:	mov	x2, x0
  44:	ldr	x1, [sp, #32]
  48:	ldr	x0, [sp, #40]
  4c:	blr	x4
  50:	ldr	w0, [sp, #64]
  54:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>
  58:	and	w0, w0, #0xff
  5c:	eor	w0, w0, #0x1
  60:	and	w0, w0, #0xff
  64:	cmp	w0, #0x0
  68:	b.eq	74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x74>  // b.none
  6c:	mov	w0, #0x0                   	// #0
  70:	b	84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x84>
  74:	ldr	x1, [sp, #56]
  78:	ldr	x0, [sp, #24]
  7c:	str	x1, [x0]
  80:	mov	w0, #0x1                   	// #1
  84:	ldp	x29, x30, [sp], #80
  88:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #40]
   8:	str	x1, [sp, #32]
   c:	str	x2, [sp, #24]
  10:	str	x3, [sp, #16]
  14:	str	x4, [sp, #8]
  18:	ldr	x1, [sp, #8]
  1c:	ldr	x0, [sp, #24]
  20:	cmp	x1, x0
  24:	b.ne	30 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x30>  // b.any
  28:	mov	w0, #0x6                   	// #6
  2c:	b	34 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x34>
  30:	mov	w0, #0x1                   	// #1
  34:	add	sp, sp, #0x30
  38:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #72]
   c:	str	x1, [sp, #64]
  10:	str	w2, [sp, #60]
  14:	str	x3, [sp, #48]
  18:	str	x4, [sp, #40]
  1c:	str	x5, [sp, #32]
  20:	str	x6, [sp, #24]
  24:	str	x7, [sp, #16]
  28:	ldr	x1, [sp, #40]
  2c:	ldr	x0, [sp, #24]
  30:	cmp	x1, x0
  34:	b.ne	58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>  // b.any
  38:	ldr	x0, [sp, #72]
  3c:	ldr	x1, [sp, #32]
  40:	bl	0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>
  44:	and	w0, w0, #0xff
  48:	cmp	w0, #0x0
  4c:	b.eq	58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>  // b.none
  50:	mov	w0, #0x1                   	// #1
  54:	b	5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x5c>
  58:	mov	w0, #0x0                   	// #0
  5c:	cmp	w0, #0x0
  60:	b.eq	78 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x78>  // b.none
  64:	ldr	x0, [sp, #16]
  68:	ldr	w1, [sp, #60]
  6c:	str	w1, [x0, #12]
  70:	mov	w0, #0x0                   	// #0
  74:	b	c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc0>
  78:	ldr	x0, [sp, #72]
  7c:	ldr	x1, [sp, #48]
  80:	bl	0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>
  84:	and	w0, w0, #0xff
  88:	cmp	w0, #0x0
  8c:	b.eq	bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>  // b.none
  90:	ldr	x0, [sp, #16]
  94:	ldr	x1, [sp, #40]
  98:	str	x1, [x0]
  9c:	ldr	x0, [sp, #16]
  a0:	ldr	w1, [sp, #60]
  a4:	str	w1, [x0, #8]
  a8:	ldr	x0, [sp, #16]
  ac:	mov	w1, #0x1                   	// #1
  b0:	str	w1, [x0, #16]
  b4:	mov	w0, #0x0                   	// #0
  b8:	b	c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc0>
  bc:	mov	w0, #0x0                   	// #0
  c0:	ldp	x29, x30, [sp], #80
  c4:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x1, [sp, #32]
  20:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  24:	and	w0, w0, #0xff
  28:	cmp	w0, #0x0
  2c:	b.eq	5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x5c>  // b.none
  30:	ldr	x0, [sp, #16]
  34:	ldr	x1, [sp, #24]
  38:	str	x1, [x0]
  3c:	ldr	x0, [sp, #16]
  40:	mov	x1, #0x10                  	// #16
  44:	str	x1, [x0, #16]
  48:	ldr	x0, [sp, #16]
  4c:	mov	w1, #0x6                   	// #6
  50:	str	w1, [x0, #8]
  54:	mov	w0, #0x1                   	// #1
  58:	b	60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x60>
  5c:	mov	w0, #0x0                   	// #0
  60:	ldp	x29, x30, [sp], #48
  64:	ret

del_op.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPv:

0000000000000000 <_ZdlPv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <free>
  14:	nop
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

del_ops.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvm:

0000000000000000 <_ZdlPvm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	bl	0 <_ZdlPv>
  18:	nop
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

del_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvRKSt9nothrow_t:

0000000000000000 <_ZdlPvRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	bl	0 <_ZdlPv>
  18:	nop
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

del_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPv:

0000000000000000 <_ZdaPv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZdlPv>
  14:	nop
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

del_opvs.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvm:

0000000000000000 <_ZdaPvm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	bl	0 <_ZdaPv>
  18:	nop
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

del_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvRKSt9nothrow_t:

0000000000000000 <_ZdaPvRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	bl	0 <_ZdaPv>
  18:	nop
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

dyncast.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_118contained_public_pENS_17__class_type_info10__sub_kindE:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_118contained_public_pENS_17__class_type_info10__sub_kindE>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	and	w0, w0, #0x6
  10:	cmp	w0, #0x6
  14:	cset	w0, eq  // eq = none
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_122contained_nonvirtual_pENS_17__class_type_info10__sub_kindE:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_122contained_nonvirtual_pENS_17__class_type_info10__sub_kindE>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w1, [sp, #12]
   c:	mov	w0, #0x5                   	// #5
  10:	and	w0, w1, w0
  14:	cmp	w0, #0x4
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_info16__dyncast_resultC2Ei:

0000000000000000 <_ZN10__cxxabiv117__class_type_info16__dyncast_resultC1Ei>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	str	xzr, [x0]
  14:	ldr	x0, [sp, #8]
  18:	str	wzr, [x0, #8]
  1c:	ldr	x0, [sp, #8]
  20:	str	wzr, [x0, #12]
  24:	ldr	x0, [sp, #8]
  28:	str	wzr, [x0, #16]
  2c:	ldr	x0, [sp, #8]
  30:	ldr	w1, [sp, #4]
  34:	str	w1, [x0, #20]
  38:	nop
  3c:	add	sp, sp, #0x10
  40:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	x4, [sp, #24]
  1c:	ldr	x0, [sp, #48]
  20:	cmp	x0, #0x0
  24:	b.lt	54 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x54>  // b.tstop
  28:	ldr	x1, [sp, #48]
  2c:	ldr	x0, [sp, #40]
  30:	bl	0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_>
  34:	mov	x1, x0
  38:	ldr	x0, [sp, #24]
  3c:	cmp	x0, x1
  40:	b.ne	4c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x4c>  // b.any
  44:	mov	w0, #0x6                   	// #6
  48:	b	94 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x94>
  4c:	mov	w0, #0x1                   	// #1
  50:	b	94 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x94>
  54:	ldr	x0, [sp, #48]
  58:	cmn	x0, #0x2
  5c:	b.ne	68 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	94 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x94>
  68:	ldr	x0, [sp, #56]
  6c:	ldr	x0, [x0]
  70:	add	x0, x0, #0x40
  74:	ldr	x5, [x0]
  78:	ldr	x4, [sp, #24]
  7c:	ldr	x3, [sp, #32]
  80:	ldr	x2, [sp, #40]
  84:	ldr	x1, [sp, #48]
  88:	ldr	x0, [sp, #56]
  8c:	blr	x5
  90:	nop
  94:	ldp	x29, x30, [sp], #64
  98:	ret

Disassembly of section .text.__dynamic_cast:

0000000000000000 <__dynamic_cast>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x0, [x0]
  20:	str	x0, [sp, #120]
  24:	mov	x1, #0xfffffffffffffff0    	// #-16
  28:	ldr	x0, [sp, #120]
  2c:	bl	0 <__dynamic_cast>
  30:	str	x0, [sp, #112]
  34:	ldr	x0, [sp, #112]
  38:	ldr	x0, [x0]
  3c:	mov	x1, x0
  40:	ldr	x0, [sp, #40]
  44:	bl	0 <__dynamic_cast>
  48:	str	x0, [sp, #104]
  4c:	ldr	x0, [sp, #112]
  50:	ldr	x0, [x0, #8]
  54:	str	x0, [sp, #96]
  58:	add	x0, sp, #0x38
  5c:	mov	w1, #0x10                  	// #16
  60:	bl	0 <__dynamic_cast>
  64:	ldr	x0, [sp, #104]
  68:	ldr	x0, [x0]
  6c:	str	x0, [sp, #88]
  70:	mov	x1, #0xfffffffffffffff0    	// #-16
  74:	ldr	x0, [sp, #88]
  78:	bl	0 <__dynamic_cast>
  7c:	str	x0, [sp, #80]
  80:	ldr	x0, [sp, #80]
  84:	ldr	x0, [x0, #8]
  88:	ldr	x1, [sp, #96]
  8c:	cmp	x1, x0
  90:	b.eq	9c <__dynamic_cast+0x9c>  // b.none
  94:	mov	x0, #0x0                   	// #0
  98:	b	194 <__dynamic_cast+0x194>
  9c:	ldr	x0, [sp, #96]
  a0:	ldr	x0, [x0]
  a4:	add	x0, x0, #0x38
  a8:	ldr	x8, [x0]
  ac:	add	x0, sp, #0x38
  b0:	mov	x7, x0
  b4:	ldr	x6, [sp, #40]
  b8:	ldr	x5, [sp, #32]
  bc:	ldr	x4, [sp, #104]
  c0:	ldr	x3, [sp, #24]
  c4:	mov	w2, #0x6                   	// #6
  c8:	ldr	x1, [sp, #16]
  cc:	ldr	x0, [sp, #96]
  d0:	blr	x8
  d4:	ldr	x0, [sp, #56]
  d8:	cmp	x0, #0x0
  dc:	b.ne	e8 <__dynamic_cast+0xe8>  // b.any
  e0:	mov	x0, #0x0                   	// #0
  e4:	b	194 <__dynamic_cast+0x194>
  e8:	ldr	w0, [sp, #72]
  ec:	bl	0 <__dynamic_cast>
  f0:	and	w0, w0, #0xff
  f4:	cmp	w0, #0x0
  f8:	b.eq	104 <__dynamic_cast+0x104>  // b.none
  fc:	ldr	x0, [sp, #56]
 100:	b	194 <__dynamic_cast+0x194>
 104:	ldr	w0, [sp, #68]
 108:	mov	w1, w0
 10c:	ldr	w0, [sp, #64]
 110:	and	w0, w1, w0
 114:	bl	0 <__dynamic_cast>
 118:	and	w0, w0, #0xff
 11c:	cmp	w0, #0x0
 120:	b.eq	12c <__dynamic_cast+0x12c>  // b.none
 124:	ldr	x0, [sp, #56]
 128:	b	194 <__dynamic_cast+0x194>
 12c:	ldr	w0, [sp, #68]
 130:	bl	0 <__dynamic_cast>
 134:	and	w0, w0, #0xff
 138:	cmp	w0, #0x0
 13c:	b.eq	148 <__dynamic_cast+0x148>  // b.none
 140:	mov	x0, #0x0                   	// #0
 144:	b	194 <__dynamic_cast+0x194>
 148:	ldr	w0, [sp, #72]
 14c:	cmp	w0, #0x0
 150:	b.ne	174 <__dynamic_cast+0x174>  // b.any
 154:	ldr	x0, [sp, #56]
 158:	ldr	x4, [sp, #40]
 15c:	ldr	x3, [sp, #32]
 160:	mov	x2, x0
 164:	ldr	x1, [sp, #16]
 168:	ldr	x0, [sp, #24]
 16c:	bl	0 <__dynamic_cast>
 170:	str	w0, [sp, #72]
 174:	ldr	w0, [sp, #72]
 178:	bl	0 <__dynamic_cast>
 17c:	and	w0, w0, #0xff
 180:	cmp	w0, #0x0
 184:	b.eq	190 <__dynamic_cast+0x190>  // b.none
 188:	ldr	x0, [sp, #56]
 18c:	b	194 <__dynamic_cast+0x194>
 190:	mov	x0, #0x0                   	// #0
 194:	ldp	x29, x30, [sp], #128
 198:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIvEEPKT_PKvl:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIvEEPKT_PKvl>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	ldr	x1, [sp, #8]
  14:	add	x0, x1, x0
  18:	add	sp, sp, #0x10
  1c:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerINS0_13vtable_prefixEEEPKT_PKvl:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerINS0_13vtable_prefixEEEPKT_PKvl>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	ldr	x1, [sp, #8]
  14:	add	x0, x1, x0
  18:	add	sp, sp, #0x10
  1c:	ret

eh_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZL18__gthread_active_pv:

0000000000000000 <_ZL18__gthread_active_pv>:
   0:	mov	w1, #0x1                   	// #1
   4:	adrp	x0, 0 <__pthread_key_create>
   8:	ldr	x0, [x0]
   c:	cmp	x0, #0x0
  10:	b.ne	18 <_ZL18__gthread_active_pv+0x18>  // b.any
  14:	mov	w1, #0x0                   	// #0
  18:	and	w0, w1, #0xff
  1c:	ret

Disassembly of section .text._ZL20__gthread_mutex_lockP15pthread_mutex_t:

0000000000000000 <_ZL20__gthread_mutex_lockP15pthread_mutex_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <_ZL20__gthread_mutex_lockP15pthread_mutex_t>
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	30 <_ZL20__gthread_mutex_lockP15pthread_mutex_t+0x30>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <pthread_mutex_lock>
  2c:	b	34 <_ZL20__gthread_mutex_lockP15pthread_mutex_t+0x34>
  30:	mov	w0, #0x0                   	// #0
  34:	ldp	x29, x30, [sp], #32
  38:	ret

Disassembly of section .text._ZL22__gthread_mutex_unlockP15pthread_mutex_t:

0000000000000000 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t>
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	30 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t+0x30>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <pthread_mutex_unlock>
  2c:	b	34 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t+0x34>
  30:	mov	w0, #0x0                   	// #0
  34:	ldp	x29, x30, [sp], #32
  38:	ret

Disassembly of section .text._ZNK9__gnu_cxx24__concurrence_lock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN9__gnu_cxx24__concurrence_lock_errorC1Ev>
  14:	adrp	x0, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorC1Ev>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx30__throw_concurrence_lock_errorEv:

0000000000000000 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  14:	mov	x19, x0
  18:	str	xzr, [x19]
  1c:	mov	x0, x19
  20:	bl	0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  24:	adrp	x0, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  28:	ldr	x2, [x0]
  2c:	adrp	x0, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  30:	ldr	x1, [x0]
  34:	mov	x0, x19
  38:	bl	0 <__cxa_throw>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN9__gnu_cxx26__concurrence_unlock_errorC1Ev>
  14:	adrp	x0, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorC1Ev>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv:

0000000000000000 <_ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <_ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv>
  14:	mov	x19, x0
  18:	str	xzr, [x19]
  1c:	mov	x0, x19
  20:	bl	0 <_ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv>
  24:	adrp	x0, 0 <_ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv>
  28:	ldr	x2, [x0]
  2c:	adrp	x0, 0 <_ZN9__gnu_cxx32__throw_concurrence_unlock_errorEv>
  30:	ldr	x1, [x0]
  34:	mov	x0, x19
  38:	bl	0 <__cxa_throw>

Disassembly of section .text._ZN9__gnu_cxx7__mutexC2Ev:

0000000000000000 <_ZN9__gnu_cxx7__mutexC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	stp	xzr, xzr, [x0]
  10:	stp	xzr, xzr, [x0, #16]
  14:	stp	xzr, xzr, [x0, #32]
  18:	nop
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN9__gnu_cxx7__mutex4lockEv:

0000000000000000 <_ZN9__gnu_cxx7__mutex4lockEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <_ZN9__gnu_cxx7__mutex4lockEv>
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	44 <_ZN9__gnu_cxx7__mutex4lockEv+0x44>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <_ZN9__gnu_cxx7__mutex4lockEv>
  2c:	cmp	w0, #0x0
  30:	cset	w0, ne  // ne = any
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x0
  3c:	b.eq	44 <_ZN9__gnu_cxx7__mutex4lockEv+0x44>  // b.none
  40:	bl	0 <_ZN9__gnu_cxx7__mutex4lockEv>
  44:	nop
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

Disassembly of section .text._ZN9__gnu_cxx7__mutex6unlockEv:

0000000000000000 <_ZN9__gnu_cxx7__mutex6unlockEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <_ZN9__gnu_cxx7__mutex6unlockEv>
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	44 <_ZN9__gnu_cxx7__mutex6unlockEv+0x44>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <_ZN9__gnu_cxx7__mutex6unlockEv>
  2c:	cmp	w0, #0x0
  30:	cset	w0, ne  // ne = any
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x0
  3c:	b.eq	44 <_ZN9__gnu_cxx7__mutex6unlockEv+0x44>  // b.none
  40:	bl	0 <_ZN9__gnu_cxx7__mutex6unlockEv>
  44:	nop
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

Disassembly of section .text._ZN9__gnu_cxx13__scoped_lockC2ERNS_7__mutexE:

0000000000000000 <_ZN9__gnu_cxx13__scoped_lockC1ERNS_7__mutexE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	str	x1, [x0]
  1c:	ldr	x0, [sp, #24]
  20:	ldr	x0, [x0]
  24:	bl	0 <_ZN9__gnu_cxx13__scoped_lockC1ERNS_7__mutexE>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx13__scoped_lockD2Ev:

0000000000000000 <_ZN9__gnu_cxx13__scoped_lockD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	bl	0 <_ZN9__gnu_cxx13__scoped_lockD1Ev>
  18:	b	2c <_ZN9__gnu_cxx13__scoped_lockD1Ev+0x2c>
  1c:	cmn	x1, #0x1
  20:	b.eq	28 <_ZN9__gnu_cxx13__scoped_lockD1Ev+0x28>  // b.none
  24:	bl	0 <_Unwind_Resume>
  28:	bl	0 <__cxa_call_unexpected>
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN12_GLOBAL__N_14poolC2Ev:

0000000000000000 <_ZN12_GLOBAL__N_14poolC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN12_GLOBAL__N_14poolC1Ev>
  14:	ldr	x0, [sp, #24]
  18:	mov	x1, #0x1c00                	// #7168
  1c:	movk	x1, #0x1, lsl #16
  20:	str	x1, [x0, #64]
  24:	ldr	x0, [sp, #24]
  28:	ldr	x0, [x0, #64]
  2c:	bl	0 <malloc>
  30:	mov	x1, x0
  34:	ldr	x0, [sp, #24]
  38:	str	x1, [x0, #56]
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x0, [x0, #56]
  44:	cmp	x0, #0x0
  48:	b.ne	60 <_ZN12_GLOBAL__N_14poolC1Ev+0x60>  // b.any
  4c:	ldr	x0, [sp, #24]
  50:	str	xzr, [x0, #64]
  54:	ldr	x0, [sp, #24]
  58:	str	xzr, [x0, #48]
  5c:	b	a4 <_ZN12_GLOBAL__N_14poolC1Ev+0xa4>
  60:	ldr	x0, [sp, #24]
  64:	ldr	x1, [x0, #56]
  68:	ldr	x0, [sp, #24]
  6c:	str	x1, [x0, #48]
  70:	ldr	x0, [sp, #24]
  74:	ldr	x0, [x0, #48]
  78:	mov	x1, x0
  7c:	mov	x0, #0x10                  	// #16
  80:	bl	0 <_ZN12_GLOBAL__N_14poolC1Ev>
  84:	ldr	x0, [sp, #24]
  88:	ldr	x0, [x0, #48]
  8c:	ldr	x1, [sp, #24]
  90:	ldr	x1, [x1, #64]
  94:	str	x1, [x0]
  98:	ldr	x0, [sp, #24]
  9c:	ldr	x0, [x0, #48]
  a0:	str	xzr, [x0, #8]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret

Disassembly of section .text._ZN12_GLOBAL__N_14pool8allocateEm:

0000000000000000 <_ZN12_GLOBAL__N_14pool8allocateEm>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	str	x1, [sp, #32]
  14:	ldr	x1, [sp, #40]
  18:	add	x0, sp, #0x30
  1c:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
  20:	ldr	x0, [sp, #32]
  24:	add	x0, x0, #0x10
  28:	str	x0, [sp, #32]
  2c:	ldr	x0, [sp, #32]
  30:	cmp	x0, #0xf
  34:	b.hi	40 <_ZN12_GLOBAL__N_14pool8allocateEm+0x40>  // b.pmore
  38:	mov	x0, #0x10                  	// #16
  3c:	str	x0, [sp, #32]
  40:	ldr	x0, [sp, #32]
  44:	add	x0, x0, #0xf
  48:	and	x0, x0, #0xfffffffffffffff0
  4c:	str	x0, [sp, #32]
  50:	ldr	x0, [sp, #40]
  54:	add	x0, x0, #0x30
  58:	str	x0, [sp, #104]
  5c:	ldr	x0, [sp, #104]
  60:	ldr	x0, [x0]
  64:	cmp	x0, #0x0
  68:	b.eq	98 <_ZN12_GLOBAL__N_14pool8allocateEm+0x98>  // b.none
  6c:	ldr	x0, [sp, #104]
  70:	ldr	x0, [x0]
  74:	ldr	x0, [x0]
  78:	ldr	x1, [sp, #32]
  7c:	cmp	x1, x0
  80:	b.ls	98 <_ZN12_GLOBAL__N_14pool8allocateEm+0x98>  // b.plast
  84:	ldr	x0, [sp, #104]
  88:	ldr	x0, [x0]
  8c:	add	x0, x0, #0x8
  90:	str	x0, [sp, #104]
  94:	b	5c <_ZN12_GLOBAL__N_14pool8allocateEm+0x5c>
  98:	ldr	x0, [sp, #104]
  9c:	ldr	x0, [x0]
  a0:	cmp	x0, #0x0
  a4:	b.ne	b0 <_ZN12_GLOBAL__N_14pool8allocateEm+0xb0>  // b.any
  a8:	mov	x19, #0x0                   	// #0
  ac:	b	1c4 <_ZN12_GLOBAL__N_14pool8allocateEm+0x1c4>
  b0:	ldr	x0, [sp, #104]
  b4:	ldr	x0, [x0]
  b8:	ldr	x1, [x0]
  bc:	ldr	x0, [sp, #32]
  c0:	sub	x0, x1, x0
  c4:	cmp	x0, #0xf
  c8:	b.ls	168 <_ZN12_GLOBAL__N_14pool8allocateEm+0x168>  // b.plast
  cc:	ldr	x0, [sp, #104]
  d0:	ldr	x1, [x0]
  d4:	ldr	x0, [sp, #32]
  d8:	add	x0, x1, x0
  dc:	str	x0, [sp, #72]
  e0:	ldr	x0, [sp, #104]
  e4:	ldr	x0, [x0]
  e8:	ldr	x0, [x0]
  ec:	str	x0, [sp, #64]
  f0:	ldr	x0, [sp, #104]
  f4:	ldr	x0, [x0]
  f8:	ldr	x0, [x0, #8]
  fc:	str	x0, [sp, #56]
 100:	ldr	x0, [sp, #72]
 104:	mov	x1, x0
 108:	mov	x0, #0x10                  	// #16
 10c:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
 110:	ldr	x0, [sp, #72]
 114:	ldr	x1, [sp, #56]
 118:	str	x1, [x0, #8]
 11c:	ldr	x1, [sp, #64]
 120:	ldr	x0, [sp, #32]
 124:	sub	x1, x1, x0
 128:	ldr	x0, [sp, #72]
 12c:	str	x1, [x0]
 130:	ldr	x0, [sp, #104]
 134:	ldr	x0, [x0]
 138:	str	x0, [sp, #96]
 13c:	ldr	x0, [sp, #96]
 140:	mov	x1, x0
 144:	mov	x0, #0x10                  	// #16
 148:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
 14c:	ldr	x0, [sp, #96]
 150:	ldr	x1, [sp, #32]
 154:	str	x1, [x0]
 158:	ldr	x0, [sp, #104]
 15c:	ldr	x1, [sp, #72]
 160:	str	x1, [x0]
 164:	b	1bc <_ZN12_GLOBAL__N_14pool8allocateEm+0x1bc>
 168:	ldr	x0, [sp, #104]
 16c:	ldr	x0, [x0]
 170:	ldr	x0, [x0]
 174:	str	x0, [sp, #88]
 178:	ldr	x0, [sp, #104]
 17c:	ldr	x0, [x0]
 180:	ldr	x0, [x0, #8]
 184:	str	x0, [sp, #80]
 188:	ldr	x0, [sp, #104]
 18c:	ldr	x0, [x0]
 190:	str	x0, [sp, #96]
 194:	ldr	x0, [sp, #96]
 198:	mov	x1, x0
 19c:	mov	x0, #0x10                  	// #16
 1a0:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
 1a4:	ldr	x0, [sp, #96]
 1a8:	ldr	x1, [sp, #88]
 1ac:	str	x1, [x0]
 1b0:	ldr	x0, [sp, #104]
 1b4:	ldr	x1, [sp, #80]
 1b8:	str	x1, [x0]
 1bc:	ldr	x0, [sp, #96]
 1c0:	add	x19, x0, #0x10
 1c4:	add	x0, sp, #0x30
 1c8:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
 1cc:	mov	x0, x19
 1d0:	ldr	x19, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #112
 1d8:	ret

Disassembly of section .text._ZN12_GLOBAL__N_14pool4freeEPv:

0000000000000000 <_ZN12_GLOBAL__N_14pool4freeEPv>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #24]
  14:	add	x0, sp, #0x28
  18:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
  1c:	ldr	x0, [sp, #16]
  20:	sub	x0, x0, #0x10
  24:	str	x0, [sp, #72]
  28:	ldr	x0, [sp, #72]
  2c:	ldr	x0, [x0]
  30:	str	x0, [sp, #88]
  34:	ldr	x0, [sp, #24]
  38:	ldr	x0, [x0, #48]
  3c:	cmp	x0, #0x0
  40:	b.eq	60 <_ZN12_GLOBAL__N_14pool4freeEPv+0x60>  // b.none
  44:	ldr	x1, [sp, #72]
  48:	ldr	x0, [sp, #88]
  4c:	add	x1, x1, x0
  50:	ldr	x0, [sp, #24]
  54:	ldr	x0, [x0, #48]
  58:	cmp	x1, x0
  5c:	b.cs	a4 <_ZN12_GLOBAL__N_14pool4freeEPv+0xa4>  // b.hs, b.nlast
  60:	ldr	x0, [sp, #72]
  64:	str	x0, [sp, #48]
  68:	ldr	x0, [sp, #48]
  6c:	mov	x1, x0
  70:	mov	x0, #0x10                  	// #16
  74:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
  78:	ldr	x0, [sp, #48]
  7c:	ldr	x1, [sp, #88]
  80:	str	x1, [x0]
  84:	ldr	x0, [sp, #24]
  88:	ldr	x1, [x0, #48]
  8c:	ldr	x0, [sp, #48]
  90:	str	x1, [x0, #8]
  94:	ldr	x0, [sp, #24]
  98:	ldr	x1, [sp, #48]
  9c:	str	x1, [x0, #48]
  a0:	b	254 <_ZN12_GLOBAL__N_14pool4freeEPv+0x254>
  a4:	ldr	x1, [sp, #72]
  a8:	ldr	x0, [sp, #88]
  ac:	add	x1, x1, x0
  b0:	ldr	x0, [sp, #24]
  b4:	ldr	x0, [x0, #48]
  b8:	cmp	x1, x0
  bc:	b.ne	118 <_ZN12_GLOBAL__N_14pool4freeEPv+0x118>  // b.any
  c0:	ldr	x0, [sp, #72]
  c4:	str	x0, [sp, #56]
  c8:	ldr	x0, [sp, #56]
  cc:	mov	x1, x0
  d0:	mov	x0, #0x10                  	// #16
  d4:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
  d8:	ldr	x0, [sp, #24]
  dc:	ldr	x0, [x0, #48]
  e0:	ldr	x1, [x0]
  e4:	ldr	x0, [sp, #88]
  e8:	add	x1, x1, x0
  ec:	ldr	x0, [sp, #56]
  f0:	str	x1, [x0]
  f4:	ldr	x0, [sp, #24]
  f8:	ldr	x0, [x0, #48]
  fc:	ldr	x1, [x0, #8]
 100:	ldr	x0, [sp, #56]
 104:	str	x1, [x0, #8]
 108:	ldr	x0, [sp, #24]
 10c:	ldr	x1, [sp, #56]
 110:	str	x1, [x0, #48]
 114:	b	254 <_ZN12_GLOBAL__N_14pool4freeEPv+0x254>
 118:	ldr	x0, [sp, #24]
 11c:	add	x0, x0, #0x30
 120:	str	x0, [sp, #80]
 124:	ldr	x0, [sp, #80]
 128:	ldr	x0, [x0]
 12c:	ldr	x0, [x0, #8]
 130:	cmp	x0, #0x0
 134:	b.eq	16c <_ZN12_GLOBAL__N_14pool4freeEPv+0x16c>  // b.none
 138:	ldr	x0, [sp, #80]
 13c:	ldr	x0, [x0]
 140:	ldr	x1, [x0, #8]
 144:	ldr	x2, [sp, #72]
 148:	ldr	x0, [sp, #88]
 14c:	add	x0, x2, x0
 150:	cmp	x1, x0
 154:	b.ls	16c <_ZN12_GLOBAL__N_14pool4freeEPv+0x16c>  // b.plast
 158:	ldr	x0, [sp, #80]
 15c:	ldr	x0, [x0]
 160:	add	x0, x0, #0x8
 164:	str	x0, [sp, #80]
 168:	b	124 <_ZN12_GLOBAL__N_14pool4freeEPv+0x124>
 16c:	ldr	x1, [sp, #72]
 170:	ldr	x0, [sp, #88]
 174:	add	x1, x1, x0
 178:	ldr	x0, [sp, #80]
 17c:	ldr	x0, [x0]
 180:	ldr	x0, [x0, #8]
 184:	cmp	x1, x0
 188:	b.ne	1c4 <_ZN12_GLOBAL__N_14pool4freeEPv+0x1c4>  // b.any
 18c:	ldr	x0, [sp, #80]
 190:	ldr	x0, [x0]
 194:	ldr	x0, [x0, #8]
 198:	ldr	x0, [x0]
 19c:	ldr	x1, [sp, #88]
 1a0:	add	x0, x1, x0
 1a4:	str	x0, [sp, #88]
 1a8:	ldr	x0, [sp, #80]
 1ac:	ldr	x0, [x0]
 1b0:	ldr	x1, [x0, #8]
 1b4:	ldr	x0, [sp, #80]
 1b8:	ldr	x0, [x0]
 1bc:	ldr	x1, [x1, #8]
 1c0:	str	x1, [x0, #8]
 1c4:	ldr	x0, [sp, #80]
 1c8:	ldr	x1, [x0]
 1cc:	ldr	x0, [sp, #80]
 1d0:	ldr	x0, [x0]
 1d4:	ldr	x0, [x0]
 1d8:	add	x0, x1, x0
 1dc:	ldr	x1, [sp, #72]
 1e0:	cmp	x1, x0
 1e4:	b.ne	20c <_ZN12_GLOBAL__N_14pool4freeEPv+0x20c>  // b.any
 1e8:	ldr	x0, [sp, #80]
 1ec:	ldr	x0, [x0]
 1f0:	ldr	x2, [x0]
 1f4:	ldr	x0, [sp, #80]
 1f8:	ldr	x0, [x0]
 1fc:	ldr	x1, [sp, #88]
 200:	add	x1, x2, x1
 204:	str	x1, [x0]
 208:	b	254 <_ZN12_GLOBAL__N_14pool4freeEPv+0x254>
 20c:	ldr	x0, [sp, #72]
 210:	str	x0, [sp, #64]
 214:	ldr	x0, [sp, #64]
 218:	mov	x1, x0
 21c:	mov	x0, #0x10                  	// #16
 220:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
 224:	ldr	x0, [sp, #64]
 228:	ldr	x1, [sp, #88]
 22c:	str	x1, [x0]
 230:	ldr	x0, [sp, #80]
 234:	ldr	x0, [x0]
 238:	ldr	x1, [x0, #8]
 23c:	ldr	x0, [sp, #64]
 240:	str	x1, [x0, #8]
 244:	ldr	x0, [sp, #80]
 248:	ldr	x0, [x0]
 24c:	ldr	x1, [sp, #64]
 250:	str	x1, [x0, #8]
 254:	add	x0, sp, #0x28
 258:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
 25c:	nop
 260:	ldp	x29, x30, [sp], #96
 264:	ret

Disassembly of section .text._ZN12_GLOBAL__N_14pool7in_poolEPv:

0000000000000000 <_ZN12_GLOBAL__N_14pool7in_poolEPv>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	str	x0, [sp, #24]
  14:	ldr	x0, [sp, #8]
  18:	ldr	x0, [x0, #56]
  1c:	ldr	x1, [sp, #24]
  20:	cmp	x1, x0
  24:	b.ls	50 <_ZN12_GLOBAL__N_14pool7in_poolEPv+0x50>  // b.plast
  28:	ldr	x0, [sp, #8]
  2c:	ldr	x1, [x0, #56]
  30:	ldr	x0, [sp, #8]
  34:	ldr	x0, [x0, #64]
  38:	add	x0, x1, x0
  3c:	ldr	x1, [sp, #24]
  40:	cmp	x1, x0
  44:	b.cs	50 <_ZN12_GLOBAL__N_14pool7in_poolEPv+0x50>  // b.hs, b.nlast
  48:	mov	w0, #0x1                   	// #1
  4c:	b	54 <_ZN12_GLOBAL__N_14pool7in_poolEPv+0x54>
  50:	mov	w0, #0x0                   	// #0
  54:	add	sp, sp, #0x20
  58:	ret

Disassembly of section .text._ZN9__gnu_cxx9__freeresEv:

0000000000000000 <_ZN9__gnu_cxx9__freeresEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <_ZN9__gnu_cxx9__freeresEv>
   c:	add	x0, x0, #0x0
  10:	ldr	x0, [x0, #56]
  14:	cmp	x0, #0x0
  18:	b.eq	38 <_ZN9__gnu_cxx9__freeresEv+0x38>  // b.none
  1c:	adrp	x0, 0 <_ZN9__gnu_cxx9__freeresEv>
  20:	add	x0, x0, #0x0
  24:	ldr	x0, [x0, #56]
  28:	bl	0 <free>
  2c:	adrp	x0, 0 <_ZN9__gnu_cxx9__freeresEv>
  30:	add	x0, x0, #0x0
  34:	str	xzr, [x0, #56]
  38:	nop
  3c:	ldp	x29, x30, [sp], #16
  40:	ret

Disassembly of section .text.__cxa_allocate_exception:

0000000000000000 <__cxa_allocate_exception>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	add	x0, x0, #0x80
  14:	str	x0, [sp, #24]
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <malloc>
  20:	str	x0, [sp, #40]
  24:	ldr	x0, [sp, #40]
  28:	cmp	x0, #0x0
  2c:	b.ne	44 <__cxa_allocate_exception+0x44>  // b.any
  30:	ldr	x1, [sp, #24]
  34:	adrp	x0, 0 <__cxa_allocate_exception>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <__cxa_allocate_exception>
  40:	str	x0, [sp, #40]
  44:	ldr	x0, [sp, #40]
  48:	cmp	x0, #0x0
  4c:	b.ne	54 <__cxa_allocate_exception+0x54>  // b.any
  50:	bl	0 <_ZSt9terminatev>
  54:	mov	x2, #0x80                  	// #128
  58:	mov	w1, #0x0                   	// #0
  5c:	ldr	x0, [sp, #40]
  60:	bl	0 <memset>
  64:	ldr	x0, [sp, #40]
  68:	add	x0, x0, #0x80
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

Disassembly of section .text.__cxa_free_exception:

0000000000000000 <__cxa_free_exception>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	sub	x0, x0, #0x80
  14:	str	x0, [sp, #40]
  18:	ldr	x1, [sp, #40]
  1c:	adrp	x0, 0 <__cxa_free_exception>
  20:	add	x0, x0, #0x0
  24:	bl	0 <__cxa_free_exception>
  28:	and	w0, w0, #0xff
  2c:	cmp	w0, #0x0
  30:	b.eq	48 <__cxa_free_exception+0x48>  // b.none
  34:	ldr	x1, [sp, #40]
  38:	adrp	x0, 0 <__cxa_free_exception>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <__cxa_free_exception>
  44:	b	50 <__cxa_free_exception+0x50>
  48:	ldr	x0, [sp, #40]
  4c:	bl	0 <free>
  50:	nop
  54:	ldp	x29, x30, [sp], #48
  58:	ret

Disassembly of section .text.__cxa_allocate_dependent_exception:

0000000000000000 <__cxa_allocate_dependent_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	mov	x0, #0x70                  	// #112
   c:	bl	0 <malloc>
  10:	str	x0, [sp, #24]
  14:	ldr	x0, [sp, #24]
  18:	cmp	x0, #0x0
  1c:	b.ne	34 <__cxa_allocate_dependent_exception+0x34>  // b.any
  20:	mov	x1, #0x70                  	// #112
  24:	adrp	x0, 0 <__cxa_allocate_dependent_exception>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <__cxa_allocate_dependent_exception>
  30:	str	x0, [sp, #24]
  34:	ldr	x0, [sp, #24]
  38:	cmp	x0, #0x0
  3c:	b.ne	44 <__cxa_allocate_dependent_exception+0x44>  // b.any
  40:	bl	0 <_ZSt9terminatev>
  44:	mov	x2, #0x70                  	// #112
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [sp, #24]
  50:	bl	0 <memset>
  54:	ldr	x0, [sp, #24]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

Disassembly of section .text.__cxa_free_dependent_exception:

0000000000000000 <__cxa_free_dependent_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x1, [sp, #24]
  10:	adrp	x0, 0 <__cxa_free_dependent_exception>
  14:	add	x0, x0, #0x0
  18:	bl	0 <__cxa_free_dependent_exception>
  1c:	and	w0, w0, #0xff
  20:	cmp	w0, #0x0
  24:	b.eq	3c <__cxa_free_dependent_exception+0x3c>  // b.none
  28:	ldr	x1, [sp, #24]
  2c:	adrp	x0, 0 <__cxa_free_dependent_exception>
  30:	add	x0, x0, #0x0
  34:	bl	0 <__cxa_free_dependent_exception>
  38:	b	44 <__cxa_free_dependent_exception+0x44>
  3c:	ldr	x0, [sp, #24]
  40:	bl	0 <free>
  44:	nop
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9exceptionD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9exceptionD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._Z41__static_initialization_and_destruction_0ii:

0000000000000000 <_Z41__static_initialization_and_destruction_0ii>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	ldr	w0, [sp, #28]
  14:	cmp	w0, #0x1
  18:	b.ne	38 <_Z41__static_initialization_and_destruction_0ii+0x38>  // b.any
  1c:	ldr	w1, [sp, #24]
  20:	mov	w0, #0xffff                	// #65535
  24:	cmp	w1, w0
  28:	b.ne	38 <_Z41__static_initialization_and_destruction_0ii+0x38>  // b.any
  2c:	adrp	x0, 0 <_Z41__static_initialization_and_destruction_0ii>
  30:	add	x0, x0, #0x0
  34:	bl	0 <_Z41__static_initialization_and_destruction_0ii>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

Disassembly of section .text._GLOBAL__sub_I_eh_alloc.cc:

0000000000000000 <_GLOBAL__sub_I_eh_alloc.cc>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	w1, #0xffff                	// #65535
   c:	mov	w0, #0x1                   	// #1
  10:	bl	0 <_GLOBAL__sub_I_eh_alloc.cc>
  14:	ldp	x29, x30, [sp], #16
  18:	ret

eh_arm.o:     file format elf64-littleaarch64


eh_aux_runtime.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt8bad_castC2Ev:

0000000000000000 <_ZNSt8bad_castC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt8bad_castC1Ev>
  14:	adrp	x0, 0 <_ZTVSt8bad_cast>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt10bad_typeidC2Ev:

0000000000000000 <_ZNSt10bad_typeidC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt10bad_typeidC1Ev>
  14:	adrp	x0, 0 <_ZTVSt10bad_typeid>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt9bad_allocC2Ev:

0000000000000000 <_ZNSt9bad_allocC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9bad_allocC1Ev>
  14:	adrp	x0, 0 <_ZTVSt9bad_alloc>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthC2Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt20bad_array_new_lengthC1Ev>
  14:	adrp	x0, 0 <_ZTVSt20bad_array_new_length>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text.__cxa_bad_cast:

0000000000000000 <__cxa_bad_cast>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <__cxa_allocate_exception>
  14:	mov	x19, x0
  18:	mov	x0, x19
  1c:	bl	0 <__cxa_bad_cast>
  20:	adrp	x0, 0 <_ZNSt8bad_castD1Ev>
  24:	ldr	x2, [x0]
  28:	adrp	x0, 0 <_ZTISt8bad_cast>
  2c:	ldr	x1, [x0]
  30:	mov	x0, x19
  34:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_bad_typeid:

0000000000000000 <__cxa_bad_typeid>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <__cxa_allocate_exception>
  14:	mov	x19, x0
  18:	mov	x0, x19
  1c:	bl	0 <__cxa_bad_typeid>
  20:	adrp	x0, 0 <_ZNSt10bad_typeidD1Ev>
  24:	ldr	x2, [x0]
  28:	adrp	x0, 0 <_ZTISt10bad_typeid>
  2c:	ldr	x1, [x0]
  30:	mov	x0, x19
  34:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_throw_bad_array_new_length:

0000000000000000 <__cxa_throw_bad_array_new_length>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <__cxa_allocate_exception>
  14:	mov	x19, x0
  18:	mov	x0, x19
  1c:	bl	0 <__cxa_throw_bad_array_new_length>
  20:	adrp	x0, 0 <_ZNSt20bad_array_new_lengthD1Ev>
  24:	ldr	x2, [x0]
  28:	adrp	x0, 0 <_ZTISt20bad_array_new_length>
  2c:	ldr	x1, [x0]
  30:	mov	x0, x19
  34:	bl	0 <__cxa_throw>

eh_call.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv1L30__get_exception_header_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L30__get_exception_header_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_gxx_exception_classEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x1, [sp, #8]
   c:	mov	x0, #0x2b00                	// #11008
  10:	movk	x0, #0x432b, lsl #16
  14:	movk	x0, #0x5543, lsl #32
  18:	movk	x0, #0x474e, lsl #48
  1c:	cmp	x1, x0
  20:	b.eq	40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x40>  // b.none
  24:	ldr	x1, [sp, #8]
  28:	mov	x0, #0x2b01                	// #11009
  2c:	movk	x0, #0x432b, lsl #16
  30:	movk	x0, #0x5543, lsl #32
  34:	movk	x0, #0x474e, lsl #48
  38:	cmp	x1, x0
  3c:	b.ne	48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x48>  // b.any
  40:	mov	w0, #0x1                   	// #1
  44:	b	4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x4c>
  48:	mov	w0, #0x0                   	// #0
  4c:	add	sp, sp, #0x10
  50:	ret

Disassembly of section .text._ZL21size_of_encoded_valueh:

0000000000000000 <_ZL21size_of_encoded_valueh>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #31]
   c:	ldrb	w0, [sp, #31]
  10:	cmp	w0, #0xff
  14:	b.ne	20 <_ZL21size_of_encoded_valueh+0x20>  // b.any
  18:	mov	w0, #0x0                   	// #0
  1c:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  20:	ldrb	w0, [sp, #31]
  24:	and	w0, w0, #0x7
  28:	cmp	w0, #0x4
  2c:	b.eq	74 <_ZL21size_of_encoded_valueh+0x74>  // b.none
  30:	cmp	w0, #0x4
  34:	b.gt	7c <_ZL21size_of_encoded_valueh+0x7c>
  38:	cmp	w0, #0x3
  3c:	b.eq	6c <_ZL21size_of_encoded_valueh+0x6c>  // b.none
  40:	cmp	w0, #0x3
  44:	b.gt	7c <_ZL21size_of_encoded_valueh+0x7c>
  48:	cmp	w0, #0x0
  4c:	b.eq	5c <_ZL21size_of_encoded_valueh+0x5c>  // b.none
  50:	cmp	w0, #0x2
  54:	b.eq	64 <_ZL21size_of_encoded_valueh+0x64>  // b.none
  58:	b	7c <_ZL21size_of_encoded_valueh+0x7c>
  5c:	mov	w0, #0x8                   	// #8
  60:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  64:	mov	w0, #0x2                   	// #2
  68:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  6c:	mov	w0, #0x4                   	// #4
  70:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  74:	mov	w0, #0x8                   	// #8
  78:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  7c:	bl	0 <abort>
  80:	ldp	x29, x30, [sp], #32
  84:	ret

Disassembly of section .text._ZL21base_of_encoded_valuehP15_Unwind_Context:

0000000000000000 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #31]
   c:	str	x1, [sp, #16]
  10:	ldrb	w0, [sp, #31]
  14:	cmp	w0, #0xff
  18:	b.ne	24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>  // b.any
  1c:	mov	x0, #0x0                   	// #0
  20:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  24:	ldrb	w0, [sp, #31]
  28:	and	w0, w0, #0x70
  2c:	cmp	w0, #0x50
  30:	b.eq	7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>  // b.none
  34:	cmp	w0, #0x50
  38:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  3c:	cmp	w0, #0x40
  40:	b.eq	9c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x9c>  // b.none
  44:	cmp	w0, #0x40
  48:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  4c:	cmp	w0, #0x30
  50:	b.eq	90 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x90>  // b.none
  54:	cmp	w0, #0x30
  58:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  5c:	cmp	w0, #0x20
  60:	b.eq	84 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x84>  // b.none
  64:	cmp	w0, #0x20
  68:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  6c:	cmp	w0, #0x0
  70:	b.eq	7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>  // b.none
  74:	cmp	w0, #0x10
  78:	b.ne	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>  // b.any
  7c:	mov	x0, #0x0                   	// #0
  80:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  84:	ldr	x0, [sp, #16]
  88:	bl	0 <_Unwind_GetTextRelBase>
  8c:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  90:	ldr	x0, [sp, #16]
  94:	bl	0 <_Unwind_GetDataRelBase>
  98:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  9c:	ldr	x0, [sp, #16]
  a0:	bl	0 <_Unwind_GetRegionStart>
  a4:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  a8:	bl	0 <abort>
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret

Disassembly of section .text._ZL12read_uleb128PKhPm:

0000000000000000 <_ZL12read_uleb128PKhPm>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	str	wzr, [sp, #44]
  10:	str	xzr, [sp, #32]
  14:	ldr	x0, [sp, #8]
  18:	add	x1, x0, #0x1
  1c:	str	x1, [sp, #8]
  20:	ldrb	w0, [x0]
  24:	strb	w0, [sp, #31]
  28:	ldrb	w0, [sp, #31]
  2c:	and	x1, x0, #0x7f
  30:	ldr	w0, [sp, #44]
  34:	lsl	x0, x1, x0
  38:	ldr	x1, [sp, #32]
  3c:	orr	x0, x1, x0
  40:	str	x0, [sp, #32]
  44:	ldr	w0, [sp, #44]
  48:	add	w0, w0, #0x7
  4c:	str	w0, [sp, #44]
  50:	ldrsb	w0, [sp, #31]
  54:	cmp	w0, #0x0
  58:	b.ge	60 <_ZL12read_uleb128PKhPm+0x60>  // b.tcont
  5c:	b	14 <_ZL12read_uleb128PKhPm+0x14>
  60:	ldr	x0, [sp]
  64:	ldr	x1, [sp, #32]
  68:	str	x1, [x0]
  6c:	ldr	x0, [sp, #8]
  70:	add	sp, sp, #0x30
  74:	ret

Disassembly of section .text._ZL12read_sleb128PKhPl:

0000000000000000 <_ZL12read_sleb128PKhPl>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	str	wzr, [sp, #44]
  10:	str	xzr, [sp, #32]
  14:	ldr	x0, [sp, #8]
  18:	add	x1, x0, #0x1
  1c:	str	x1, [sp, #8]
  20:	ldrb	w0, [x0]
  24:	strb	w0, [sp, #31]
  28:	ldrb	w0, [sp, #31]
  2c:	and	x1, x0, #0x7f
  30:	ldr	w0, [sp, #44]
  34:	lsl	x0, x1, x0
  38:	ldr	x1, [sp, #32]
  3c:	orr	x0, x1, x0
  40:	str	x0, [sp, #32]
  44:	ldr	w0, [sp, #44]
  48:	add	w0, w0, #0x7
  4c:	str	w0, [sp, #44]
  50:	ldrsb	w0, [sp, #31]
  54:	cmp	w0, #0x0
  58:	b.ge	60 <_ZL12read_sleb128PKhPl+0x60>  // b.tcont
  5c:	b	14 <_ZL12read_sleb128PKhPl+0x14>
  60:	ldr	w0, [sp, #44]
  64:	cmp	w0, #0x3f
  68:	b.hi	98 <_ZL12read_sleb128PKhPl+0x98>  // b.pmore
  6c:	ldrb	w0, [sp, #31]
  70:	and	w0, w0, #0x40
  74:	cmp	w0, #0x0
  78:	b.eq	98 <_ZL12read_sleb128PKhPl+0x98>  // b.none
  7c:	ldr	w0, [sp, #44]
  80:	mov	x1, #0x1                   	// #1
  84:	lsl	x0, x1, x0
  88:	neg	x0, x0
  8c:	ldr	x1, [sp, #32]
  90:	orr	x0, x1, x0
  94:	str	x0, [sp, #32]
  98:	ldr	x1, [sp, #32]
  9c:	ldr	x0, [sp]
  a0:	str	x1, [x0]
  a4:	ldr	x0, [sp, #8]
  a8:	add	sp, sp, #0x30
  ac:	ret

Disassembly of section .text._ZL28read_encoded_value_with_basehmPKhPm:

0000000000000000 <_ZL28read_encoded_value_with_basehmPKhPm>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #47]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #24]
  1c:	str	x0, [sp, #80]
  20:	ldrb	w0, [sp, #47]
  24:	cmp	w0, #0x50
  28:	b.ne	60 <_ZL28read_encoded_value_with_basehmPKhPm+0x60>  // b.any
  2c:	ldr	x0, [sp, #24]
  30:	str	x0, [sp, #72]
  34:	ldr	x0, [sp, #72]
  38:	add	x0, x0, #0x7
  3c:	and	x0, x0, #0xfffffffffffffff8
  40:	str	x0, [sp, #72]
  44:	ldr	x0, [sp, #72]
  48:	ldr	x0, [x0]
  4c:	str	x0, [sp, #88]
  50:	ldr	x0, [sp, #72]
  54:	add	x0, x0, #0x8
  58:	str	x0, [sp, #24]
  5c:	b	250 <_ZL28read_encoded_value_with_basehmPKhPm+0x250>
  60:	ldrb	w0, [sp, #47]
  64:	and	w0, w0, #0xf
  68:	cmp	w0, #0xc
  6c:	b.eq	1e4 <_ZL28read_encoded_value_with_basehmPKhPm+0x1e4>  // b.none
  70:	cmp	w0, #0xc
  74:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  78:	cmp	w0, #0xb
  7c:	b.eq	1c4 <_ZL28read_encoded_value_with_basehmPKhPm+0x1c4>  // b.none
  80:	cmp	w0, #0xb
  84:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  88:	cmp	w0, #0xa
  8c:	b.eq	1a4 <_ZL28read_encoded_value_with_basehmPKhPm+0x1a4>  // b.none
  90:	cmp	w0, #0xa
  94:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  98:	cmp	w0, #0x9
  9c:	b.eq	128 <_ZL28read_encoded_value_with_basehmPKhPm+0x128>  // b.none
  a0:	cmp	w0, #0x9
  a4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  a8:	cmp	w0, #0x4
  ac:	b.eq	188 <_ZL28read_encoded_value_with_basehmPKhPm+0x188>  // b.none
  b0:	cmp	w0, #0x4
  b4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  b8:	cmp	w0, #0x3
  bc:	b.eq	168 <_ZL28read_encoded_value_with_basehmPKhPm+0x168>  // b.none
  c0:	cmp	w0, #0x3
  c4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  c8:	cmp	w0, #0x2
  cc:	b.eq	148 <_ZL28read_encoded_value_with_basehmPKhPm+0x148>  // b.none
  d0:	cmp	w0, #0x2
  d4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  d8:	cmp	w0, #0x0
  dc:	b.eq	ec <_ZL28read_encoded_value_with_basehmPKhPm+0xec>  // b.none
  e0:	cmp	w0, #0x1
  e4:	b.eq	108 <_ZL28read_encoded_value_with_basehmPKhPm+0x108>  // b.none
  e8:	b	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  ec:	ldr	x0, [sp, #80]
  f0:	ldr	x0, [x0]
  f4:	str	x0, [sp, #88]
  f8:	ldr	x0, [sp, #24]
  fc:	add	x0, x0, #0x8
 100:	str	x0, [sp, #24]
 104:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 108:	add	x0, sp, #0x40
 10c:	mov	x1, x0
 110:	ldr	x0, [sp, #24]
 114:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
 118:	str	x0, [sp, #24]
 11c:	ldr	x0, [sp, #64]
 120:	str	x0, [sp, #88]
 124:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 128:	add	x0, sp, #0x38
 12c:	mov	x1, x0
 130:	ldr	x0, [sp, #24]
 134:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
 138:	str	x0, [sp, #24]
 13c:	ldr	x0, [sp, #56]
 140:	str	x0, [sp, #88]
 144:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 148:	ldr	x0, [sp, #80]
 14c:	ldrh	w0, [x0]
 150:	and	x0, x0, #0xffff
 154:	str	x0, [sp, #88]
 158:	ldr	x0, [sp, #24]
 15c:	add	x0, x0, #0x2
 160:	str	x0, [sp, #24]
 164:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 168:	ldr	x0, [sp, #80]
 16c:	ldr	w0, [x0]
 170:	mov	w0, w0
 174:	str	x0, [sp, #88]
 178:	ldr	x0, [sp, #24]
 17c:	add	x0, x0, #0x4
 180:	str	x0, [sp, #24]
 184:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 188:	ldr	x0, [sp, #80]
 18c:	ldr	x0, [x0]
 190:	str	x0, [sp, #88]
 194:	ldr	x0, [sp, #24]
 198:	add	x0, x0, #0x8
 19c:	str	x0, [sp, #24]
 1a0:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 1a4:	ldr	x0, [sp, #80]
 1a8:	ldrsh	w0, [x0]
 1ac:	sxth	x0, w0
 1b0:	str	x0, [sp, #88]
 1b4:	ldr	x0, [sp, #24]
 1b8:	add	x0, x0, #0x2
 1bc:	str	x0, [sp, #24]
 1c0:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 1c4:	ldr	x0, [sp, #80]
 1c8:	ldr	w0, [x0]
 1cc:	sxtw	x0, w0
 1d0:	str	x0, [sp, #88]
 1d4:	ldr	x0, [sp, #24]
 1d8:	add	x0, x0, #0x4
 1dc:	str	x0, [sp, #24]
 1e0:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 1e4:	ldr	x0, [sp, #80]
 1e8:	ldr	x0, [x0]
 1ec:	str	x0, [sp, #88]
 1f0:	ldr	x0, [sp, #24]
 1f4:	add	x0, x0, #0x8
 1f8:	str	x0, [sp, #24]
 1fc:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 200:	bl	0 <abort>
 204:	ldr	x0, [sp, #88]
 208:	cmp	x0, #0x0
 20c:	b.eq	250 <_ZL28read_encoded_value_with_basehmPKhPm+0x250>  // b.none
 210:	ldrb	w0, [sp, #47]
 214:	and	w0, w0, #0x70
 218:	cmp	w0, #0x10
 21c:	b.ne	228 <_ZL28read_encoded_value_with_basehmPKhPm+0x228>  // b.any
 220:	ldr	x0, [sp, #80]
 224:	b	22c <_ZL28read_encoded_value_with_basehmPKhPm+0x22c>
 228:	ldr	x0, [sp, #32]
 22c:	ldr	x1, [sp, #88]
 230:	add	x0, x1, x0
 234:	str	x0, [sp, #88]
 238:	ldrsb	w0, [sp, #47]
 23c:	cmp	w0, #0x0
 240:	b.ge	250 <_ZL28read_encoded_value_with_basehmPKhPm+0x250>  // b.tcont
 244:	ldr	x0, [sp, #88]
 248:	ldr	x0, [x0]
 24c:	str	x0, [sp, #88]
 250:	ldr	x0, [sp, #16]
 254:	ldr	x1, [sp, #88]
 258:	str	x1, [x0]
 25c:	ldr	x0, [sp, #24]
 260:	ldp	x29, x30, [sp], #96
 264:	ret

Disassembly of section .text.__cxa_call_terminate:

0000000000000000 <__cxa_call_terminate>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	cmp	x0, #0x0
  14:	b.eq	50 <__cxa_call_terminate+0x50>  // b.none
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <__cxa_begin_catch>
  20:	ldr	x0, [sp, #24]
  24:	ldr	x0, [x0]
  28:	bl	0 <__cxa_call_terminate>
  2c:	and	w0, w0, #0xff
  30:	cmp	w0, #0x0
  34:	b.eq	50 <__cxa_call_terminate+0x50>  // b.none
  38:	ldr	x0, [sp, #24]
  3c:	bl	0 <__cxa_call_terminate>
  40:	str	x0, [sp, #40]
  44:	ldr	x0, [sp, #40]
  48:	ldr	x0, [x0, #24]
  4c:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
  50:	bl	0 <_ZSt9terminatev>

eh_catch.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv1L30__get_exception_header_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L30__get_exception_header_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_gxx_exception_classEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x1, [sp, #8]
   c:	mov	x0, #0x2b00                	// #11008
  10:	movk	x0, #0x432b, lsl #16
  14:	movk	x0, #0x5543, lsl #32
  18:	movk	x0, #0x474e, lsl #48
  1c:	cmp	x1, x0
  20:	b.eq	40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x40>  // b.none
  24:	ldr	x1, [sp, #8]
  28:	mov	x0, #0x2b01                	// #11009
  2c:	movk	x0, #0x432b, lsl #16
  30:	movk	x0, #0x5543, lsl #32
  34:	movk	x0, #0x474e, lsl #48
  38:	cmp	x1, x0
  3c:	b.ne	48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x48>  // b.any
  40:	mov	w0, #0x1                   	// #1
  44:	b	4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x4c>
  48:	mov	w0, #0x0                   	// #0
  4c:	add	sp, sp, #0x10
  50:	ret

Disassembly of section .text._ZN10__cxxabiv1L19__gxx_caught_objectEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L19__gxx_caught_objectEP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv1L19__gxx_caught_objectEP17_Unwind_Exception>
  14:	str	x0, [sp, #40]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x0, [x0, #72]
  20:	ldp	x29, x30, [sp], #48
  24:	ret

Disassembly of section .text.__cxa_get_exception_ptr:

0000000000000000 <__cxa_get_exception_ptr>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	str	x0, [sp, #40]
  14:	ldr	x0, [sp, #40]
  18:	bl	0 <__cxa_get_exception_ptr>
  1c:	ldp	x29, x30, [sp], #48
  20:	ret

Disassembly of section .text.__cxa_begin_catch:

0000000000000000 <__cxa_begin_catch>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	str	x0, [sp, #64]
  14:	bl	0 <__cxa_get_globals>
  18:	str	x0, [sp, #56]
  1c:	ldr	x0, [sp, #56]
  20:	ldr	x0, [x0]
  24:	str	x0, [sp, #48]
  28:	ldr	x0, [sp, #64]
  2c:	bl	0 <__cxa_begin_catch>
  30:	str	x0, [sp, #40]
  34:	ldr	x0, [sp, #40]
  38:	ldr	x0, [x0, #80]
  3c:	bl	0 <__cxa_begin_catch>
  40:	and	w0, w0, #0xff
  44:	eor	w0, w0, #0x1
  48:	and	w0, w0, #0xff
  4c:	cmp	w0, #0x0
  50:	b.eq	78 <__cxa_begin_catch+0x78>  // b.none
  54:	ldr	x0, [sp, #48]
  58:	cmp	x0, #0x0
  5c:	b.eq	64 <__cxa_begin_catch+0x64>  // b.none
  60:	bl	0 <_ZSt9terminatev>
  64:	ldr	x0, [sp, #56]
  68:	ldr	x1, [sp, #40]
  6c:	str	x1, [x0]
  70:	mov	x0, #0x0                   	// #0
  74:	b	108 <__cxa_begin_catch+0x108>
  78:	ldr	x0, [sp, #40]
  7c:	ldr	w0, [x0, #40]
  80:	str	w0, [sp, #76]
  84:	ldr	w0, [sp, #76]
  88:	cmp	w0, #0x0
  8c:	b.ge	a4 <__cxa_begin_catch+0xa4>  // b.tcont
  90:	mov	w1, #0x1                   	// #1
  94:	ldr	w0, [sp, #76]
  98:	sub	w0, w1, w0
  9c:	str	w0, [sp, #76]
  a0:	b	b0 <__cxa_begin_catch+0xb0>
  a4:	ldr	w0, [sp, #76]
  a8:	add	w0, w0, #0x1
  ac:	str	w0, [sp, #76]
  b0:	ldr	x0, [sp, #40]
  b4:	ldr	w1, [sp, #76]
  b8:	str	w1, [x0, #40]
  bc:	ldr	x0, [sp, #56]
  c0:	ldr	w0, [x0, #8]
  c4:	sub	w1, w0, #0x1
  c8:	ldr	x0, [sp, #56]
  cc:	str	w1, [x0, #8]
  d0:	ldr	x1, [sp, #40]
  d4:	ldr	x0, [sp, #48]
  d8:	cmp	x1, x0
  dc:	b.eq	f8 <__cxa_begin_catch+0xf8>  // b.none
  e0:	ldr	x0, [sp, #40]
  e4:	ldr	x1, [sp, #48]
  e8:	str	x1, [x0, #32]
  ec:	ldr	x0, [sp, #56]
  f0:	ldr	x1, [sp, #40]
  f4:	str	x1, [x0]
  f8:	ldr	x0, [sp, #64]
  fc:	bl	0 <__cxa_begin_catch>
 100:	str	x0, [sp, #32]
 104:	ldr	x0, [sp, #32]
 108:	ldp	x29, x30, [sp], #80
 10c:	ret

Disassembly of section .text.__cxa_end_catch:

0000000000000000 <__cxa_end_catch>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals_fast>
   c:	str	x0, [sp, #32]
  10:	ldr	x0, [sp, #32]
  14:	ldr	x0, [x0]
  18:	str	x0, [sp, #24]
  1c:	ldr	x0, [sp, #24]
  20:	cmp	x0, #0x0
  24:	b.eq	114 <__cxa_end_catch+0x114>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #80]
  30:	bl	0 <__cxa_end_catch>
  34:	and	w0, w0, #0xff
  38:	eor	w0, w0, #0x1
  3c:	and	w0, w0, #0xff
  40:	cmp	w0, #0x0
  44:	b.eq	60 <__cxa_end_catch+0x60>  // b.none
  48:	ldr	x0, [sp, #32]
  4c:	str	xzr, [x0]
  50:	ldr	x0, [sp, #24]
  54:	add	x0, x0, #0x50
  58:	bl	0 <_Unwind_DeleteException>
  5c:	b	118 <__cxa_end_catch+0x118>
  60:	ldr	x0, [sp, #24]
  64:	ldr	w0, [x0, #40]
  68:	str	w0, [sp, #44]
  6c:	ldr	w0, [sp, #44]
  70:	cmp	w0, #0x0
  74:	b.ge	b0 <__cxa_end_catch+0xb0>  // b.tcont
  78:	ldr	w0, [sp, #44]
  7c:	add	w0, w0, #0x1
  80:	str	w0, [sp, #44]
  84:	ldr	w0, [sp, #44]
  88:	cmp	w0, #0x0
  8c:	cset	w0, eq  // eq = none
  90:	and	w0, w0, #0xff
  94:	cmp	w0, #0x0
  98:	b.eq	104 <__cxa_end_catch+0x104>  // b.none
  9c:	ldr	x0, [sp, #24]
  a0:	ldr	x1, [x0, #32]
  a4:	ldr	x0, [sp, #32]
  a8:	str	x1, [x0]
  ac:	b	104 <__cxa_end_catch+0x104>
  b0:	ldr	w0, [sp, #44]
  b4:	sub	w0, w0, #0x1
  b8:	str	w0, [sp, #44]
  bc:	ldr	w0, [sp, #44]
  c0:	cmp	w0, #0x0
  c4:	cset	w0, eq  // eq = none
  c8:	and	w0, w0, #0xff
  cc:	cmp	w0, #0x0
  d0:	b.eq	f4 <__cxa_end_catch+0xf4>  // b.none
  d4:	ldr	x0, [sp, #24]
  d8:	ldr	x1, [x0, #32]
  dc:	ldr	x0, [sp, #32]
  e0:	str	x1, [x0]
  e4:	ldr	x0, [sp, #24]
  e8:	add	x0, x0, #0x50
  ec:	bl	0 <_Unwind_DeleteException>
  f0:	b	118 <__cxa_end_catch+0x118>
  f4:	ldr	w0, [sp, #44]
  f8:	cmp	w0, #0x0
  fc:	b.ge	104 <__cxa_end_catch+0x104>  // b.tcont
 100:	bl	0 <_ZSt9terminatev>
 104:	ldr	x0, [sp, #24]
 108:	ldr	w1, [sp, #44]
 10c:	str	w1, [x0, #40]
 110:	b	118 <__cxa_end_catch+0x118>
 114:	nop
 118:	ldp	x29, x30, [sp], #48
 11c:	ret

Disassembly of section .text._ZSt18uncaught_exceptionv:

0000000000000000 <_ZSt18uncaught_exceptionv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	str	x0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	ldr	w0, [x0, #8]
  18:	cmp	w0, #0x0
  1c:	cset	w0, ne  // ne = any
  20:	and	w0, w0, #0xff
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZSt19uncaught_exceptionsv:

0000000000000000 <_ZSt19uncaught_exceptionsv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	str	x0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	ldr	w0, [x0, #8]
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

eh_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionD2Ev:

0000000000000000 <_ZNSt9exceptionD1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNSt9exceptionD1Ev>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt9exceptionD0Ev:

0000000000000000 <_ZNSt9exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9exceptionD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNSt13bad_exceptionD2Ev:

0000000000000000 <_ZNSt13bad_exceptionD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt13bad_exceptionD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt13bad_exceptionD1Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt13bad_exceptionD0Ev:

0000000000000000 <_ZNSt13bad_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt13bad_exceptionD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD2Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZN10__cxxabiv115__forced_unwindD1Ev>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD0Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv115__forced_unwindD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD0Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt9exception4whatEv:

0000000000000000 <_ZNKSt9exception4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt9exception4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZNKSt13bad_exception4whatEv:

0000000000000000 <_ZNKSt13bad_exception4whatEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNKSt13bad_exception4whatEv>
   c:	add	x0, x0, #0x0
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZGTtNKSt9exceptionD1Ev:

0000000000000000 <_ZGTtNKSt9exceptionD1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	nop
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZGTtNKSt9exception4whatEv:

0000000000000000 <_ZGTtNKSt9exception4whatEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZGTtNKSt9exception4whatEv>
  14:	ldp	x29, x30, [sp], #32
  18:	ret

Disassembly of section .text._ZGTtNKSt13bad_exceptionD1Ev:

0000000000000000 <_ZGTtNKSt13bad_exceptionD1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	nop
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZGTtNKSt13bad_exception4whatEv:

0000000000000000 <_ZGTtNKSt13bad_exception4whatEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZGTtNKSt13bad_exception4whatEv>
  14:	ldp	x29, x30, [sp], #32
  18:	ret

eh_globals.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN12_GLOBAL__N_110get_globalEv:

0000000000000000 <_ZN12_GLOBAL__N_110get_globalEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <_ZN12_GLOBAL__N_110get_globalEv>
   c:	ldr	x1, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x1
  18:	mrs	x1, tpidr_el0
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

Disassembly of section .text.__cxa_get_globals_fast:

0000000000000000 <__cxa_get_globals_fast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals_fast>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

Disassembly of section .text.__cxa_get_globals:

0000000000000000 <__cxa_get_globals>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

eh_personality.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt13bad_exceptionC2Ev:

0000000000000000 <_ZNSt13bad_exceptionC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt13bad_exceptionC1Ev>
  14:	adrp	x0, 0 <_ZTVSt13bad_exception>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv1L31__get_exception_header_from_objEPv:

0000000000000000 <_ZN10__cxxabiv1L31__get_exception_header_from_objEPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	sub	x0, x0, #0x70
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN10__cxxabiv1L30__get_exception_header_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L30__get_exception_header_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_gxx_exception_classEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x1, [sp, #8]
   c:	mov	x0, #0x2b00                	// #11008
  10:	movk	x0, #0x432b, lsl #16
  14:	movk	x0, #0x5543, lsl #32
  18:	movk	x0, #0x474e, lsl #48
  1c:	cmp	x1, x0
  20:	b.eq	40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x40>  // b.none
  24:	ldr	x1, [sp, #8]
  28:	mov	x0, #0x2b01                	// #11009
  2c:	movk	x0, #0x432b, lsl #16
  30:	movk	x0, #0x5543, lsl #32
  34:	movk	x0, #0x474e, lsl #48
  38:	cmp	x1, x0
  3c:	b.ne	48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x48>  // b.any
  40:	mov	w0, #0x1                   	// #1
  44:	b	4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x4c>
  48:	mov	w0, #0x0                   	// #0
  4c:	add	sp, sp, #0x10
  50:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_dependent_exceptionEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_dependent_exceptionEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	and	x0, x0, #0x1
  10:	cmp	x0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	bl	0 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception>
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	34 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception+0x34>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception>
  2c:	ldr	x0, [x0]
  30:	b	3c <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception+0x3c>
  34:	ldr	x0, [sp, #24]
  38:	add	x0, x0, #0x20
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

Disassembly of section .text._ZN10__cxxabiv1L37__get_object_from_ambiguous_exceptionEPNS_15__cxa_exceptionE:

0000000000000000 <_ZN10__cxxabiv1L37__get_object_from_ambiguous_exceptionEPNS_15__cxa_exceptionE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	add	x0, x0, #0x50
  14:	bl	0 <_ZN10__cxxabiv1L37__get_object_from_ambiguous_exceptionEPNS_15__cxa_exceptionE>
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

Disassembly of section .text._ZL21size_of_encoded_valueh:

0000000000000000 <_ZL21size_of_encoded_valueh>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #31]
   c:	ldrb	w0, [sp, #31]
  10:	cmp	w0, #0xff
  14:	b.ne	20 <_ZL21size_of_encoded_valueh+0x20>  // b.any
  18:	mov	w0, #0x0                   	// #0
  1c:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  20:	ldrb	w0, [sp, #31]
  24:	and	w0, w0, #0x7
  28:	cmp	w0, #0x4
  2c:	b.eq	74 <_ZL21size_of_encoded_valueh+0x74>  // b.none
  30:	cmp	w0, #0x4
  34:	b.gt	7c <_ZL21size_of_encoded_valueh+0x7c>
  38:	cmp	w0, #0x3
  3c:	b.eq	6c <_ZL21size_of_encoded_valueh+0x6c>  // b.none
  40:	cmp	w0, #0x3
  44:	b.gt	7c <_ZL21size_of_encoded_valueh+0x7c>
  48:	cmp	w0, #0x0
  4c:	b.eq	5c <_ZL21size_of_encoded_valueh+0x5c>  // b.none
  50:	cmp	w0, #0x2
  54:	b.eq	64 <_ZL21size_of_encoded_valueh+0x64>  // b.none
  58:	b	7c <_ZL21size_of_encoded_valueh+0x7c>
  5c:	mov	w0, #0x8                   	// #8
  60:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  64:	mov	w0, #0x2                   	// #2
  68:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  6c:	mov	w0, #0x4                   	// #4
  70:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  74:	mov	w0, #0x8                   	// #8
  78:	b	80 <_ZL21size_of_encoded_valueh+0x80>
  7c:	bl	0 <abort>
  80:	ldp	x29, x30, [sp], #32
  84:	ret

Disassembly of section .text._ZL21base_of_encoded_valuehP15_Unwind_Context:

0000000000000000 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #31]
   c:	str	x1, [sp, #16]
  10:	ldrb	w0, [sp, #31]
  14:	cmp	w0, #0xff
  18:	b.ne	24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>  // b.any
  1c:	mov	x0, #0x0                   	// #0
  20:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  24:	ldrb	w0, [sp, #31]
  28:	and	w0, w0, #0x70
  2c:	cmp	w0, #0x50
  30:	b.eq	7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>  // b.none
  34:	cmp	w0, #0x50
  38:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  3c:	cmp	w0, #0x40
  40:	b.eq	9c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x9c>  // b.none
  44:	cmp	w0, #0x40
  48:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  4c:	cmp	w0, #0x30
  50:	b.eq	90 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x90>  // b.none
  54:	cmp	w0, #0x30
  58:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  5c:	cmp	w0, #0x20
  60:	b.eq	84 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x84>  // b.none
  64:	cmp	w0, #0x20
  68:	b.gt	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>
  6c:	cmp	w0, #0x0
  70:	b.eq	7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>  // b.none
  74:	cmp	w0, #0x10
  78:	b.ne	a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xa8>  // b.any
  7c:	mov	x0, #0x0                   	// #0
  80:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  84:	ldr	x0, [sp, #16]
  88:	bl	0 <_Unwind_GetTextRelBase>
  8c:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  90:	ldr	x0, [sp, #16]
  94:	bl	0 <_Unwind_GetDataRelBase>
  98:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  9c:	ldr	x0, [sp, #16]
  a0:	bl	0 <_Unwind_GetRegionStart>
  a4:	b	ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0xac>
  a8:	bl	0 <abort>
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret

Disassembly of section .text._ZL12read_uleb128PKhPm:

0000000000000000 <_ZL12read_uleb128PKhPm>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	str	wzr, [sp, #44]
  10:	str	xzr, [sp, #32]
  14:	ldr	x0, [sp, #8]
  18:	add	x1, x0, #0x1
  1c:	str	x1, [sp, #8]
  20:	ldrb	w0, [x0]
  24:	strb	w0, [sp, #31]
  28:	ldrb	w0, [sp, #31]
  2c:	and	x1, x0, #0x7f
  30:	ldr	w0, [sp, #44]
  34:	lsl	x0, x1, x0
  38:	ldr	x1, [sp, #32]
  3c:	orr	x0, x1, x0
  40:	str	x0, [sp, #32]
  44:	ldr	w0, [sp, #44]
  48:	add	w0, w0, #0x7
  4c:	str	w0, [sp, #44]
  50:	ldrsb	w0, [sp, #31]
  54:	cmp	w0, #0x0
  58:	b.ge	60 <_ZL12read_uleb128PKhPm+0x60>  // b.tcont
  5c:	b	14 <_ZL12read_uleb128PKhPm+0x14>
  60:	ldr	x0, [sp]
  64:	ldr	x1, [sp, #32]
  68:	str	x1, [x0]
  6c:	ldr	x0, [sp, #8]
  70:	add	sp, sp, #0x30
  74:	ret

Disassembly of section .text._ZL12read_sleb128PKhPl:

0000000000000000 <_ZL12read_sleb128PKhPl>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	str	wzr, [sp, #44]
  10:	str	xzr, [sp, #32]
  14:	ldr	x0, [sp, #8]
  18:	add	x1, x0, #0x1
  1c:	str	x1, [sp, #8]
  20:	ldrb	w0, [x0]
  24:	strb	w0, [sp, #31]
  28:	ldrb	w0, [sp, #31]
  2c:	and	x1, x0, #0x7f
  30:	ldr	w0, [sp, #44]
  34:	lsl	x0, x1, x0
  38:	ldr	x1, [sp, #32]
  3c:	orr	x0, x1, x0
  40:	str	x0, [sp, #32]
  44:	ldr	w0, [sp, #44]
  48:	add	w0, w0, #0x7
  4c:	str	w0, [sp, #44]
  50:	ldrsb	w0, [sp, #31]
  54:	cmp	w0, #0x0
  58:	b.ge	60 <_ZL12read_sleb128PKhPl+0x60>  // b.tcont
  5c:	b	14 <_ZL12read_sleb128PKhPl+0x14>
  60:	ldr	w0, [sp, #44]
  64:	cmp	w0, #0x3f
  68:	b.hi	98 <_ZL12read_sleb128PKhPl+0x98>  // b.pmore
  6c:	ldrb	w0, [sp, #31]
  70:	and	w0, w0, #0x40
  74:	cmp	w0, #0x0
  78:	b.eq	98 <_ZL12read_sleb128PKhPl+0x98>  // b.none
  7c:	ldr	w0, [sp, #44]
  80:	mov	x1, #0x1                   	// #1
  84:	lsl	x0, x1, x0
  88:	neg	x0, x0
  8c:	ldr	x1, [sp, #32]
  90:	orr	x0, x1, x0
  94:	str	x0, [sp, #32]
  98:	ldr	x1, [sp, #32]
  9c:	ldr	x0, [sp]
  a0:	str	x1, [x0]
  a4:	ldr	x0, [sp, #8]
  a8:	add	sp, sp, #0x30
  ac:	ret

Disassembly of section .text._ZL28read_encoded_value_with_basehmPKhPm:

0000000000000000 <_ZL28read_encoded_value_with_basehmPKhPm>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #47]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #24]
  1c:	str	x0, [sp, #80]
  20:	ldrb	w0, [sp, #47]
  24:	cmp	w0, #0x50
  28:	b.ne	60 <_ZL28read_encoded_value_with_basehmPKhPm+0x60>  // b.any
  2c:	ldr	x0, [sp, #24]
  30:	str	x0, [sp, #72]
  34:	ldr	x0, [sp, #72]
  38:	add	x0, x0, #0x7
  3c:	and	x0, x0, #0xfffffffffffffff8
  40:	str	x0, [sp, #72]
  44:	ldr	x0, [sp, #72]
  48:	ldr	x0, [x0]
  4c:	str	x0, [sp, #88]
  50:	ldr	x0, [sp, #72]
  54:	add	x0, x0, #0x8
  58:	str	x0, [sp, #24]
  5c:	b	250 <_ZL28read_encoded_value_with_basehmPKhPm+0x250>
  60:	ldrb	w0, [sp, #47]
  64:	and	w0, w0, #0xf
  68:	cmp	w0, #0xc
  6c:	b.eq	1e4 <_ZL28read_encoded_value_with_basehmPKhPm+0x1e4>  // b.none
  70:	cmp	w0, #0xc
  74:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  78:	cmp	w0, #0xb
  7c:	b.eq	1c4 <_ZL28read_encoded_value_with_basehmPKhPm+0x1c4>  // b.none
  80:	cmp	w0, #0xb
  84:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  88:	cmp	w0, #0xa
  8c:	b.eq	1a4 <_ZL28read_encoded_value_with_basehmPKhPm+0x1a4>  // b.none
  90:	cmp	w0, #0xa
  94:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  98:	cmp	w0, #0x9
  9c:	b.eq	128 <_ZL28read_encoded_value_with_basehmPKhPm+0x128>  // b.none
  a0:	cmp	w0, #0x9
  a4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  a8:	cmp	w0, #0x4
  ac:	b.eq	188 <_ZL28read_encoded_value_with_basehmPKhPm+0x188>  // b.none
  b0:	cmp	w0, #0x4
  b4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  b8:	cmp	w0, #0x3
  bc:	b.eq	168 <_ZL28read_encoded_value_with_basehmPKhPm+0x168>  // b.none
  c0:	cmp	w0, #0x3
  c4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  c8:	cmp	w0, #0x2
  cc:	b.eq	148 <_ZL28read_encoded_value_with_basehmPKhPm+0x148>  // b.none
  d0:	cmp	w0, #0x2
  d4:	b.gt	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  d8:	cmp	w0, #0x0
  dc:	b.eq	ec <_ZL28read_encoded_value_with_basehmPKhPm+0xec>  // b.none
  e0:	cmp	w0, #0x1
  e4:	b.eq	108 <_ZL28read_encoded_value_with_basehmPKhPm+0x108>  // b.none
  e8:	b	200 <_ZL28read_encoded_value_with_basehmPKhPm+0x200>
  ec:	ldr	x0, [sp, #80]
  f0:	ldr	x0, [x0]
  f4:	str	x0, [sp, #88]
  f8:	ldr	x0, [sp, #24]
  fc:	add	x0, x0, #0x8
 100:	str	x0, [sp, #24]
 104:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 108:	add	x0, sp, #0x40
 10c:	mov	x1, x0
 110:	ldr	x0, [sp, #24]
 114:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
 118:	str	x0, [sp, #24]
 11c:	ldr	x0, [sp, #64]
 120:	str	x0, [sp, #88]
 124:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 128:	add	x0, sp, #0x38
 12c:	mov	x1, x0
 130:	ldr	x0, [sp, #24]
 134:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
 138:	str	x0, [sp, #24]
 13c:	ldr	x0, [sp, #56]
 140:	str	x0, [sp, #88]
 144:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 148:	ldr	x0, [sp, #80]
 14c:	ldrh	w0, [x0]
 150:	and	x0, x0, #0xffff
 154:	str	x0, [sp, #88]
 158:	ldr	x0, [sp, #24]
 15c:	add	x0, x0, #0x2
 160:	str	x0, [sp, #24]
 164:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 168:	ldr	x0, [sp, #80]
 16c:	ldr	w0, [x0]
 170:	mov	w0, w0
 174:	str	x0, [sp, #88]
 178:	ldr	x0, [sp, #24]
 17c:	add	x0, x0, #0x4
 180:	str	x0, [sp, #24]
 184:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 188:	ldr	x0, [sp, #80]
 18c:	ldr	x0, [x0]
 190:	str	x0, [sp, #88]
 194:	ldr	x0, [sp, #24]
 198:	add	x0, x0, #0x8
 19c:	str	x0, [sp, #24]
 1a0:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 1a4:	ldr	x0, [sp, #80]
 1a8:	ldrsh	w0, [x0]
 1ac:	sxth	x0, w0
 1b0:	str	x0, [sp, #88]
 1b4:	ldr	x0, [sp, #24]
 1b8:	add	x0, x0, #0x2
 1bc:	str	x0, [sp, #24]
 1c0:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 1c4:	ldr	x0, [sp, #80]
 1c8:	ldr	w0, [x0]
 1cc:	sxtw	x0, w0
 1d0:	str	x0, [sp, #88]
 1d4:	ldr	x0, [sp, #24]
 1d8:	add	x0, x0, #0x4
 1dc:	str	x0, [sp, #24]
 1e0:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 1e4:	ldr	x0, [sp, #80]
 1e8:	ldr	x0, [x0]
 1ec:	str	x0, [sp, #88]
 1f0:	ldr	x0, [sp, #24]
 1f4:	add	x0, x0, #0x8
 1f8:	str	x0, [sp, #24]
 1fc:	b	204 <_ZL28read_encoded_value_with_basehmPKhPm+0x204>
 200:	bl	0 <abort>
 204:	ldr	x0, [sp, #88]
 208:	cmp	x0, #0x0
 20c:	b.eq	250 <_ZL28read_encoded_value_with_basehmPKhPm+0x250>  // b.none
 210:	ldrb	w0, [sp, #47]
 214:	and	w0, w0, #0x70
 218:	cmp	w0, #0x10
 21c:	b.ne	228 <_ZL28read_encoded_value_with_basehmPKhPm+0x228>  // b.any
 220:	ldr	x0, [sp, #80]
 224:	b	22c <_ZL28read_encoded_value_with_basehmPKhPm+0x22c>
 228:	ldr	x0, [sp, #32]
 22c:	ldr	x1, [sp, #88]
 230:	add	x0, x1, x0
 234:	str	x0, [sp, #88]
 238:	ldrsb	w0, [sp, #47]
 23c:	cmp	w0, #0x0
 240:	b.ge	250 <_ZL28read_encoded_value_with_basehmPKhPm+0x250>  // b.tcont
 244:	ldr	x0, [sp, #88]
 248:	ldr	x0, [x0]
 24c:	str	x0, [sp, #88]
 250:	ldr	x0, [sp, #16]
 254:	ldr	x1, [sp, #88]
 258:	str	x1, [x0]
 25c:	ldr	x0, [sp, #24]
 260:	ldp	x29, x30, [sp], #96
 264:	ret

Disassembly of section .text._ZL18read_encoded_valueP15_Unwind_ContexthPKhPm:

0000000000000000 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	strb	w1, [sp, #39]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x1, [sp, #40]
  1c:	ldrb	w0, [sp, #39]
  20:	bl	0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  24:	ldr	x3, [sp, #16]
  28:	ldr	x2, [sp, #24]
  2c:	mov	x1, x0
  30:	ldrb	w0, [sp, #39]
  34:	bl	0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

Disassembly of section .text._ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info:

0000000000000000 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #40]
  18:	cmp	x0, #0x0
  1c:	b.eq	30 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>  // b.none
  20:	ldr	x0, [sp, #40]
  24:	bl	0 <_Unwind_GetRegionStart>
  28:	mov	x1, x0
  2c:	b	34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x34>
  30:	mov	x1, #0x0                   	// #0
  34:	ldr	x0, [sp, #24]
  38:	str	x1, [x0]
  3c:	ldr	x0, [sp, #32]
  40:	add	x1, x0, #0x1
  44:	str	x1, [sp, #32]
  48:	ldrb	w0, [x0]
  4c:	strb	w0, [sp, #63]
  50:	ldrb	w0, [sp, #63]
  54:	cmp	w0, #0xff
  58:	b.eq	80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x80>  // b.none
  5c:	ldr	x0, [sp, #24]
  60:	add	x0, x0, #0x8
  64:	mov	x3, x0
  68:	ldr	x2, [sp, #32]
  6c:	ldrb	w1, [sp, #63]
  70:	ldr	x0, [sp, #40]
  74:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  78:	str	x0, [sp, #32]
  7c:	b	90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
  80:	ldr	x0, [sp, #24]
  84:	ldr	x1, [x0]
  88:	ldr	x0, [sp, #24]
  8c:	str	x1, [x0, #8]
  90:	ldr	x0, [sp, #32]
  94:	add	x1, x0, #0x1
  98:	str	x1, [sp, #32]
  9c:	ldrb	w1, [x0]
  a0:	ldr	x0, [sp, #24]
  a4:	strb	w1, [x0, #40]
  a8:	ldr	x0, [sp, #24]
  ac:	ldrb	w0, [x0, #40]
  b0:	cmp	w0, #0xff
  b4:	b.eq	e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe4>  // b.none
  b8:	add	x0, sp, #0x30
  bc:	mov	x1, x0
  c0:	ldr	x0, [sp, #32]
  c4:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  c8:	str	x0, [sp, #32]
  cc:	ldr	x0, [sp, #48]
  d0:	ldr	x1, [sp, #32]
  d4:	add	x1, x1, x0
  d8:	ldr	x0, [sp, #24]
  dc:	str	x1, [x0, #24]
  e0:	b	ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xec>
  e4:	ldr	x0, [sp, #24]
  e8:	str	xzr, [x0, #24]
  ec:	ldr	x0, [sp, #32]
  f0:	add	x1, x0, #0x1
  f4:	str	x1, [sp, #32]
  f8:	ldrb	w1, [x0]
  fc:	ldr	x0, [sp, #24]
 100:	strb	w1, [x0, #41]
 104:	add	x0, sp, #0x30
 108:	mov	x1, x0
 10c:	ldr	x0, [sp, #32]
 110:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 114:	str	x0, [sp, #32]
 118:	ldr	x0, [sp, #48]
 11c:	ldr	x1, [sp, #32]
 120:	add	x1, x1, x0
 124:	ldr	x0, [sp, #24]
 128:	str	x1, [x0, #32]
 12c:	ldr	x0, [sp, #32]
 130:	ldp	x29, x30, [sp], #64
 134:	ret

Disassembly of section .text._ZL15get_ttype_entryP16lsda_header_infom:

0000000000000000 <_ZL15get_ttype_entryP16lsda_header_infom>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldrb	w0, [x0, #40]
  18:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  1c:	mov	w0, w0
  20:	ldr	x1, [sp, #16]
  24:	mul	x0, x1, x0
  28:	str	x0, [sp, #16]
  2c:	ldr	x0, [sp, #24]
  30:	ldrb	w5, [x0, #40]
  34:	ldr	x0, [sp, #24]
  38:	ldr	x4, [x0, #16]
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x1, [x0, #24]
  44:	ldr	x0, [sp, #16]
  48:	neg	x0, x0
  4c:	add	x0, x1, x0
  50:	add	x1, sp, #0x28
  54:	mov	x3, x1
  58:	mov	x2, x0
  5c:	mov	x1, x4
  60:	mov	w0, w5
  64:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  68:	ldr	x0, [sp, #40]
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

Disassembly of section .text._ZL16get_adjusted_ptrPKSt9type_infoS1_PPv:

0000000000000000 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #24]
  18:	ldr	x0, [x0]
  1c:	str	x0, [sp, #56]
  20:	ldr	x0, [sp, #32]
  24:	ldr	x0, [x0]
  28:	add	x0, x0, #0x10
  2c:	ldr	x1, [x0]
  30:	ldr	x0, [sp, #32]
  34:	blr	x1
  38:	and	w0, w0, #0xff
  3c:	cmp	w0, #0x0
  40:	b.eq	50 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x50>  // b.none
  44:	ldr	x0, [sp, #56]
  48:	ldr	x0, [x0]
  4c:	str	x0, [sp, #56]
  50:	ldr	x0, [sp, #40]
  54:	ldr	x0, [x0]
  58:	add	x0, x0, #0x20
  5c:	ldr	x4, [x0]
  60:	add	x0, sp, #0x38
  64:	mov	w3, #0x1                   	// #1
  68:	mov	x2, x0
  6c:	ldr	x1, [sp, #32]
  70:	ldr	x0, [sp, #40]
  74:	blr	x4
  78:	and	w0, w0, #0xff
  7c:	cmp	w0, #0x0
  80:	b.eq	98 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x98>  // b.none
  84:	ldr	x1, [sp, #56]
  88:	ldr	x0, [sp, #24]
  8c:	str	x1, [x0]
  90:	mov	w0, #0x1                   	// #1
  94:	b	9c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x9c>
  98:	mov	w0, #0x0                   	// #0
  9c:	ldp	x29, x30, [sp], #64
  a0:	ret

Disassembly of section .text._ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl:

0000000000000000 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x1, [x0, #24]
  20:	ldr	x0, [sp, #16]
  24:	mvn	x0, x0
  28:	add	x0, x1, x0
  2c:	str	x0, [sp, #72]
  30:	add	x0, sp, #0x38
  34:	mov	x1, x0
  38:	ldr	x0, [sp, #72]
  3c:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  40:	str	x0, [sp, #72]
  44:	ldr	x0, [sp, #56]
  48:	cmp	x0, #0x0
  4c:	b.ne	58 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x58>  // b.any
  50:	mov	w0, #0x0                   	// #0
  54:	b	90 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x90>
  58:	ldr	x0, [sp, #56]
  5c:	mov	x1, x0
  60:	ldr	x0, [sp, #40]
  64:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  68:	str	x0, [sp, #64]
  6c:	add	x0, sp, #0x18
  70:	mov	x2, x0
  74:	ldr	x1, [sp, #32]
  78:	ldr	x0, [sp, #64]
  7c:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  80:	and	w0, w0, #0xff
  84:	cmp	w0, #0x0
  88:	b.eq	30 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x30>  // b.none
  8c:	mov	w0, #0x1                   	// #1
  90:	ldp	x29, x30, [sp], #80
  94:	ret

Disassembly of section .text._ZL21save_caught_exceptionP17_Unwind_ExceptionP15_Unwind_ContextPviPKhmS5_:

0000000000000000 <_ZL21save_caught_exceptionP17_Unwind_ExceptionP15_Unwind_ContextPviPKhmS5_>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #72]
   c:	str	x1, [sp, #64]
  10:	str	x2, [sp, #56]
  14:	str	w3, [sp, #52]
  18:	str	x4, [sp, #40]
  1c:	str	x5, [sp, #32]
  20:	str	x6, [sp, #24]
  24:	ldr	x0, [sp, #72]
  28:	bl	0 <_ZL21save_caught_exceptionP17_Unwind_ExceptionP15_Unwind_ContextPviPKhmS5_>
  2c:	str	x0, [sp, #88]
  30:	ldr	x0, [sp, #88]
  34:	ldr	w1, [sp, #52]
  38:	str	w1, [x0, #44]
  3c:	ldr	x0, [sp, #88]
  40:	ldr	x1, [sp, #24]
  44:	str	x1, [x0, #48]
  48:	ldr	x0, [sp, #88]
  4c:	ldr	x1, [sp, #40]
  50:	str	x1, [x0, #56]
  54:	ldr	x0, [sp, #88]
  58:	ldr	x1, [sp, #56]
  5c:	str	x1, [x0, #72]
  60:	ldr	x0, [sp, #88]
  64:	ldr	x1, [sp, #32]
  68:	str	x1, [x0, #64]
  6c:	nop
  70:	ldp	x29, x30, [sp], #96
  74:	ret

Disassembly of section .text._ZL24restore_caught_exceptionP17_Unwind_ExceptionRiRPKhRm:

0000000000000000 <_ZL24restore_caught_exceptionP17_Unwind_ExceptionRiRPKhRm>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	bl	0 <_ZL24restore_caught_exceptionP17_Unwind_ExceptionRiRPKhRm>
  20:	str	x0, [sp, #56]
  24:	ldr	x0, [sp, #56]
  28:	ldr	w1, [x0, #44]
  2c:	ldr	x0, [sp, #32]
  30:	str	w1, [x0]
  34:	ldr	x0, [sp, #56]
  38:	ldr	x1, [x0, #56]
  3c:	ldr	x0, [sp, #24]
  40:	str	x1, [x0]
  44:	ldr	x0, [sp, #56]
  48:	ldr	x1, [x0, #64]
  4c:	ldr	x0, [sp, #16]
  50:	str	x1, [x0]
  54:	nop
  58:	ldp	x29, x30, [sp], #64
  5c:	ret

Disassembly of section .text._ZL20empty_exception_specP16lsda_header_infol:

0000000000000000 <_ZL20empty_exception_specP16lsda_header_infol>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #24]
  18:	ldr	x0, [sp, #16]
  1c:	mvn	x0, x0
  20:	add	x0, x1, x0
  24:	str	x0, [sp, #40]
  28:	add	x0, sp, #0x20
  2c:	mov	x1, x0
  30:	ldr	x0, [sp, #40]
  34:	bl	0 <_ZL20empty_exception_specP16lsda_header_infol>
  38:	str	x0, [sp, #40]
  3c:	ldr	x0, [sp, #32]
  40:	cmp	x0, #0x0
  44:	cset	w0, eq  // eq = none
  48:	and	w0, w0, #0xff
  4c:	ldp	x29, x30, [sp], #48
  50:	ret

Disassembly of section .text.__gxx_personality_v0:

0000000000000000 <__gxx_personality_v0>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #44]
   c:	str	w1, [sp, #40]
  10:	str	x2, [sp, #32]
  14:	str	x3, [sp, #24]
  18:	str	x4, [sp, #16]
  1c:	str	xzr, [sp, #104]
  20:	str	wzr, [sp, #100]
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <__gxx_personality_v0>
  2c:	str	x0, [sp, #200]
  30:	ldr	w0, [sp, #44]
  34:	cmp	w0, #0x1
  38:	b.eq	44 <__gxx_personality_v0+0x44>  // b.none
  3c:	mov	w0, #0x3                   	// #3
  40:	b	5fc <__gxx_personality_v0+0x5fc>
  44:	ldr	x0, [sp, #32]
  48:	bl	0 <__gxx_personality_v0>
  4c:	and	w0, w0, #0xff
  50:	eor	w0, w0, #0x1
  54:	strb	w0, [sp, #199]
  58:	ldr	w0, [sp, #40]
  5c:	cmp	w0, #0x6
  60:	b.ne	b8 <__gxx_personality_v0+0xb8>  // b.any
  64:	ldrb	w0, [sp, #199]
  68:	eor	w0, w0, #0x1
  6c:	and	w0, w0, #0xff
  70:	cmp	w0, #0x0
  74:	b.eq	b8 <__gxx_personality_v0+0xb8>  // b.none
  78:	add	x2, sp, #0x78
  7c:	add	x1, sp, #0x80
  80:	add	x0, sp, #0x74
  84:	mov	x3, x2
  88:	mov	x2, x1
  8c:	mov	x1, x0
  90:	ldr	x0, [sp, #24]
  94:	bl	0 <__gxx_personality_v0>
  98:	ldr	x0, [sp, #120]
  9c:	cmp	x0, #0x0
  a0:	b.ne	ac <__gxx_personality_v0+0xac>  // b.any
  a4:	mov	w0, #0x1                   	// #1
  a8:	b	b0 <__gxx_personality_v0+0xb0>
  ac:	mov	w0, #0x3                   	// #3
  b0:	str	w0, [sp, #252]
  b4:	b	508 <__gxx_personality_v0+0x508>
  b8:	ldr	x0, [sp, #16]
  bc:	bl	0 <_Unwind_GetLanguageSpecificData>
  c0:	str	x0, [sp, #128]
  c4:	ldr	x0, [sp, #128]
  c8:	cmp	x0, #0x0
  cc:	b.ne	d8 <__gxx_personality_v0+0xd8>  // b.any
  d0:	mov	w0, #0x8                   	// #8
  d4:	b	5fc <__gxx_personality_v0+0x5fc>
  d8:	ldr	x0, [sp, #128]
  dc:	add	x1, sp, #0x88
  e0:	mov	x2, x1
  e4:	mov	x1, x0
  e8:	ldr	x0, [sp, #16]
  ec:	bl	0 <__gxx_personality_v0>
  f0:	str	x0, [sp, #232]
  f4:	ldrb	w0, [sp, #176]
  f8:	ldr	x1, [sp, #16]
  fc:	bl	0 <__gxx_personality_v0>
 100:	str	x0, [sp, #152]
 104:	add	x0, sp, #0x64
 108:	mov	x1, x0
 10c:	ldr	x0, [sp, #16]
 110:	bl	0 <_Unwind_GetIPInfo>
 114:	str	x0, [sp, #224]
 118:	ldr	w0, [sp, #100]
 11c:	cmp	w0, #0x0
 120:	b.ne	130 <__gxx_personality_v0+0x130>  // b.any
 124:	ldr	x0, [sp, #224]
 128:	sub	x0, x0, #0x1
 12c:	str	x0, [sp, #224]
 130:	str	xzr, [sp, #120]
 134:	str	xzr, [sp, #240]
 138:	str	wzr, [sp, #116]
 13c:	ldr	x0, [sp, #168]
 140:	ldr	x1, [sp, #232]
 144:	cmp	x1, x0
 148:	b.cs	238 <__gxx_personality_v0+0x238>  // b.hs, b.nlast
 14c:	ldrb	w1, [sp, #177]
 150:	add	x0, sp, #0x58
 154:	mov	x3, x0
 158:	ldr	x2, [sp, #232]
 15c:	mov	x0, #0x0                   	// #0
 160:	bl	0 <__gxx_personality_v0>
 164:	str	x0, [sp, #232]
 168:	ldrb	w1, [sp, #177]
 16c:	add	x0, sp, #0x50
 170:	mov	x3, x0
 174:	ldr	x2, [sp, #232]
 178:	mov	x0, #0x0                   	// #0
 17c:	bl	0 <__gxx_personality_v0>
 180:	str	x0, [sp, #232]
 184:	ldrb	w1, [sp, #177]
 188:	add	x0, sp, #0x48
 18c:	mov	x3, x0
 190:	ldr	x2, [sp, #232]
 194:	mov	x0, #0x0                   	// #0
 198:	bl	0 <__gxx_personality_v0>
 19c:	str	x0, [sp, #232]
 1a0:	add	x0, sp, #0x40
 1a4:	mov	x1, x0
 1a8:	ldr	x0, [sp, #232]
 1ac:	bl	0 <__gxx_personality_v0>
 1b0:	str	x0, [sp, #232]
 1b4:	ldr	x1, [sp, #136]
 1b8:	ldr	x0, [sp, #88]
 1bc:	add	x0, x1, x0
 1c0:	ldr	x1, [sp, #224]
 1c4:	cmp	x1, x0
 1c8:	b.cs	1d8 <__gxx_personality_v0+0x1d8>  // b.hs, b.nlast
 1cc:	ldr	x0, [sp, #168]
 1d0:	str	x0, [sp, #232]
 1d4:	b	13c <__gxx_personality_v0+0x13c>
 1d8:	ldr	x1, [sp, #136]
 1dc:	ldr	x0, [sp, #88]
 1e0:	add	x1, x1, x0
 1e4:	ldr	x0, [sp, #80]
 1e8:	add	x0, x1, x0
 1ec:	ldr	x1, [sp, #224]
 1f0:	cmp	x1, x0
 1f4:	b.cs	13c <__gxx_personality_v0+0x13c>  // b.hs, b.nlast
 1f8:	ldr	x0, [sp, #72]
 1fc:	cmp	x0, #0x0
 200:	b.eq	214 <__gxx_personality_v0+0x214>  // b.none
 204:	ldr	x1, [sp, #144]
 208:	ldr	x0, [sp, #72]
 20c:	add	x0, x1, x0
 210:	str	x0, [sp, #120]
 214:	ldr	x0, [sp, #64]
 218:	cmp	x0, #0x0
 21c:	b.eq	244 <__gxx_personality_v0+0x244>  // b.none
 220:	ldr	x1, [sp, #168]
 224:	ldr	x0, [sp, #64]
 228:	sub	x0, x0, #0x1
 22c:	add	x0, x1, x0
 230:	str	x0, [sp, #240]
 234:	b	248 <__gxx_personality_v0+0x248>
 238:	mov	w0, #0x1                   	// #1
 23c:	str	w0, [sp, #252]
 240:	b	480 <__gxx_personality_v0+0x480>
 244:	nop
 248:	ldr	x0, [sp, #120]
 24c:	cmp	x0, #0x0
 250:	b.ne	25c <__gxx_personality_v0+0x25c>  // b.any
 254:	str	wzr, [sp, #252]
 258:	b	480 <__gxx_personality_v0+0x480>
 25c:	ldr	x0, [sp, #240]
 260:	cmp	x0, #0x0
 264:	b.ne	274 <__gxx_personality_v0+0x274>  // b.any
 268:	mov	w0, #0x2                   	// #2
 26c:	str	w0, [sp, #252]
 270:	b	480 <__gxx_personality_v0+0x480>
 274:	strb	wzr, [sp, #215]
 278:	strb	wzr, [sp, #214]
 27c:	ldr	w0, [sp, #40]
 280:	and	w0, w0, #0x8
 284:	cmp	w0, #0x0
 288:	b.eq	29c <__gxx_personality_v0+0x29c>  // b.none
 28c:	adrp	x0, 0 <_ZTIN10__cxxabiv115__forced_unwindE>
 290:	ldr	x0, [x0]
 294:	str	x0, [sp, #216]
 298:	b	2d4 <__gxx_personality_v0+0x2d4>
 29c:	ldrb	w0, [sp, #199]
 2a0:	cmp	w0, #0x0
 2a4:	b.eq	2b8 <__gxx_personality_v0+0x2b8>  // b.none
 2a8:	adrp	x0, 0 <_ZTIN10__cxxabiv119__foreign_exceptionE>
 2ac:	ldr	x0, [x0]
 2b0:	str	x0, [sp, #216]
 2b4:	b	2d4 <__gxx_personality_v0+0x2d4>
 2b8:	ldr	x0, [sp, #24]
 2bc:	bl	0 <__gxx_personality_v0>
 2c0:	str	x0, [sp, #104]
 2c4:	ldr	x0, [sp, #104]
 2c8:	bl	0 <__gxx_personality_v0>
 2cc:	ldr	x0, [x0]
 2d0:	str	x0, [sp, #216]
 2d4:	ldr	x0, [sp, #240]
 2d8:	str	x0, [sp, #232]
 2dc:	add	x0, sp, #0x38
 2e0:	mov	x1, x0
 2e4:	ldr	x0, [sp, #232]
 2e8:	bl	0 <__gxx_personality_v0>
 2ec:	str	x0, [sp, #232]
 2f0:	add	x0, sp, #0x30
 2f4:	mov	x1, x0
 2f8:	ldr	x0, [sp, #232]
 2fc:	bl	0 <__gxx_personality_v0>
 300:	ldr	x0, [sp, #56]
 304:	cmp	x0, #0x0
 308:	b.ne	318 <__gxx_personality_v0+0x318>  // b.any
 30c:	mov	w0, #0x1                   	// #1
 310:	strb	w0, [sp, #215]
 314:	b	41c <__gxx_personality_v0+0x41c>
 318:	ldr	x0, [sp, #56]
 31c:	cmp	x0, #0x0
 320:	b.le	390 <__gxx_personality_v0+0x390>
 324:	ldr	x0, [sp, #56]
 328:	mov	x1, x0
 32c:	add	x0, sp, #0x88
 330:	bl	0 <__gxx_personality_v0>
 334:	str	x0, [sp, #184]
 338:	ldr	x0, [sp, #184]
 33c:	cmp	x0, #0x0
 340:	b.eq	370 <__gxx_personality_v0+0x370>  // b.none
 344:	ldr	x0, [sp, #216]
 348:	cmp	x0, #0x0
 34c:	b.eq	378 <__gxx_personality_v0+0x378>  // b.none
 350:	add	x0, sp, #0x68
 354:	mov	x2, x0
 358:	ldr	x1, [sp, #216]
 35c:	ldr	x0, [sp, #184]
 360:	bl	0 <__gxx_personality_v0>
 364:	and	w0, w0, #0xff
 368:	cmp	w0, #0x0
 36c:	b.eq	378 <__gxx_personality_v0+0x378>  // b.none
 370:	mov	w0, #0x1                   	// #1
 374:	b	37c <__gxx_personality_v0+0x37c>
 378:	mov	w0, #0x0                   	// #0
 37c:	cmp	w0, #0x0
 380:	b.eq	41c <__gxx_personality_v0+0x41c>  // b.none
 384:	mov	w0, #0x1                   	// #1
 388:	strb	w0, [sp, #214]
 38c:	b	444 <__gxx_personality_v0+0x444>
 390:	ldr	x0, [sp, #216]
 394:	cmp	x0, #0x0
 398:	b.eq	3ec <__gxx_personality_v0+0x3ec>  // b.none
 39c:	ldr	w0, [sp, #40]
 3a0:	and	w0, w0, #0x8
 3a4:	cmp	w0, #0x0
 3a8:	b.ne	3ec <__gxx_personality_v0+0x3ec>  // b.any
 3ac:	ldrb	w0, [sp, #199]
 3b0:	eor	w0, w0, #0x1
 3b4:	and	w0, w0, #0xff
 3b8:	cmp	w0, #0x0
 3bc:	b.eq	3ec <__gxx_personality_v0+0x3ec>  // b.none
 3c0:	ldr	x1, [sp, #104]
 3c4:	ldr	x2, [sp, #56]
 3c8:	add	x0, sp, #0x88
 3cc:	mov	x3, x2
 3d0:	mov	x2, x1
 3d4:	ldr	x1, [sp, #216]
 3d8:	bl	0 <__gxx_personality_v0>
 3dc:	and	w0, w0, #0xff
 3e0:	eor	w0, w0, #0x1
 3e4:	and	w0, w0, #0xff
 3e8:	b	408 <__gxx_personality_v0+0x408>
 3ec:	ldr	x1, [sp, #56]
 3f0:	add	x0, sp, #0x88
 3f4:	bl	0 <__gxx_personality_v0>
 3f8:	and	w0, w0, #0xff
 3fc:	cmp	w0, #0x0
 400:	cset	w0, ne  // ne = any
 404:	and	w0, w0, #0xff
 408:	cmp	w0, #0x0
 40c:	b.eq	41c <__gxx_personality_v0+0x41c>  // b.none
 410:	mov	w0, #0x1                   	// #1
 414:	strb	w0, [sp, #214]
 418:	b	444 <__gxx_personality_v0+0x444>
 41c:	ldr	x0, [sp, #48]
 420:	cmp	x0, #0x0
 424:	b.eq	440 <__gxx_personality_v0+0x440>  // b.none
 428:	ldr	x0, [sp, #48]
 42c:	mov	x1, x0
 430:	ldr	x0, [sp, #232]
 434:	add	x0, x0, x1
 438:	str	x0, [sp, #240]
 43c:	b	2d4 <__gxx_personality_v0+0x2d4>
 440:	nop
 444:	ldrb	w0, [sp, #214]
 448:	cmp	w0, #0x0
 44c:	b.eq	464 <__gxx_personality_v0+0x464>  // b.none
 450:	ldr	x0, [sp, #56]
 454:	str	w0, [sp, #116]
 458:	mov	w0, #0x3                   	// #3
 45c:	str	w0, [sp, #252]
 460:	b	480 <__gxx_personality_v0+0x480>
 464:	ldrb	w0, [sp, #215]
 468:	cmp	w0, #0x0
 46c:	b.eq	478 <__gxx_personality_v0+0x478>  // b.none
 470:	mov	w0, #0x2                   	// #2
 474:	b	47c <__gxx_personality_v0+0x47c>
 478:	mov	w0, #0x0                   	// #0
 47c:	str	w0, [sp, #252]
 480:	ldr	w0, [sp, #252]
 484:	cmp	w0, #0x0
 488:	b.ne	494 <__gxx_personality_v0+0x494>  // b.any
 48c:	mov	w0, #0x8                   	// #8
 490:	b	5fc <__gxx_personality_v0+0x5fc>
 494:	ldr	w0, [sp, #40]
 498:	and	w0, w0, #0x1
 49c:	cmp	w0, #0x0
 4a0:	b.eq	504 <__gxx_personality_v0+0x504>  // b.none
 4a4:	ldr	w0, [sp, #252]
 4a8:	cmp	w0, #0x2
 4ac:	b.ne	4b8 <__gxx_personality_v0+0x4b8>  // b.any
 4b0:	mov	w0, #0x8                   	// #8
 4b4:	b	5fc <__gxx_personality_v0+0x5fc>
 4b8:	ldrb	w0, [sp, #199]
 4bc:	eor	w0, w0, #0x1
 4c0:	and	w0, w0, #0xff
 4c4:	cmp	w0, #0x0
 4c8:	b.eq	4fc <__gxx_personality_v0+0x4fc>  // b.none
 4cc:	ldr	x0, [sp, #104]
 4d0:	ldr	w1, [sp, #116]
 4d4:	ldr	x2, [sp, #128]
 4d8:	ldr	x3, [sp, #120]
 4dc:	ldr	x6, [sp, #240]
 4e0:	mov	x5, x3
 4e4:	mov	x4, x2
 4e8:	mov	w3, w1
 4ec:	mov	x2, x0
 4f0:	ldr	x1, [sp, #16]
 4f4:	ldr	x0, [sp, #24]
 4f8:	bl	0 <__gxx_personality_v0>
 4fc:	mov	w0, #0x6                   	// #6
 500:	b	5fc <__gxx_personality_v0+0x5fc>
 504:	nop
 508:	ldr	w0, [sp, #40]
 50c:	and	w0, w0, #0x8
 510:	cmp	w0, #0x0
 514:	b.ne	524 <__gxx_personality_v0+0x524>  // b.any
 518:	ldrb	w0, [sp, #199]
 51c:	cmp	w0, #0x0
 520:	b.eq	544 <__gxx_personality_v0+0x544>  // b.none
 524:	ldr	w0, [sp, #252]
 528:	cmp	w0, #0x1
 52c:	b.ne	534 <__gxx_personality_v0+0x534>  // b.any
 530:	bl	0 <_ZSt9terminatev>
 534:	ldr	w0, [sp, #116]
 538:	cmp	w0, #0x0
 53c:	b.ge	5a8 <__gxx_personality_v0+0x5a8>  // b.tcont
 540:	bl	0 <_ZSt10unexpectedv>
 544:	ldr	w0, [sp, #252]
 548:	cmp	w0, #0x1
 54c:	b.ne	558 <__gxx_personality_v0+0x558>  // b.any
 550:	ldr	x0, [sp, #24]
 554:	bl	0 <__cxa_call_terminate>
 558:	ldr	w0, [sp, #116]
 55c:	cmp	w0, #0x0
 560:	b.ge	5ac <__gxx_personality_v0+0x5ac>  // b.tcont
 564:	ldr	x0, [sp, #128]
 568:	add	x1, sp, #0x88
 56c:	mov	x2, x1
 570:	mov	x1, x0
 574:	ldr	x0, [sp, #16]
 578:	bl	0 <__gxx_personality_v0>
 57c:	ldrb	w0, [sp, #176]
 580:	ldr	x1, [sp, #16]
 584:	bl	0 <__gxx_personality_v0>
 588:	str	x0, [sp, #152]
 58c:	ldrb	w0, [sp, #176]
 590:	ldr	x1, [sp, #16]
 594:	bl	0 <__gxx_personality_v0>
 598:	mov	x1, x0
 59c:	ldr	x0, [sp, #200]
 5a0:	str	x1, [x0, #64]
 5a4:	b	5ac <__gxx_personality_v0+0x5ac>
 5a8:	nop
 5ac:	mov	w1, #0x0                   	// #0
 5b0:	ldr	x0, [sp, #24]
 5b4:	mov	x2, x0
 5b8:	ldr	x0, [sp, #16]
 5bc:	bl	0 <_Unwind_SetGR>
 5c0:	mov	w0, #0x1                   	// #1
 5c4:	ldr	w1, [sp, #116]
 5c8:	sxtw	x1, w1
 5cc:	mov	x2, x1
 5d0:	mov	w1, w0
 5d4:	ldr	x0, [sp, #16]
 5d8:	bl	0 <_Unwind_SetGR>
 5dc:	ldr	x0, [sp, #120]
 5e0:	mov	x1, x0
 5e4:	ldr	x0, [sp, #16]
 5e8:	bl	0 <_Unwind_SetIP>
 5ec:	mov	w0, #0x7                   	// #7
 5f0:	b	5fc <__gxx_personality_v0+0x5fc>
 5f4:	bl	0 <__cxa_begin_catch>
 5f8:	bl	0 <_ZSt9terminatev>
 5fc:	ldp	x29, x30, [sp], #256
 600:	ret

Disassembly of section .text._ZZ21__cxa_call_unexpectedEN17end_catch_protectC2Ev:

0000000000000000 <_ZZ21__cxa_call_unexpectedEN17end_catch_protectC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	nop
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZZ21__cxa_call_unexpectedEN17end_catch_protectD2Ev:

0000000000000000 <_ZZ21__cxa_call_unexpectedEN17end_catch_protectD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <__cxa_end_catch>
  10:	nop
  14:	ldp	x29, x30, [sp], #32
  18:	ret

Disassembly of section .text.__cxa_call_unexpected:

0000000000000000 <__cxa_call_unexpected>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	ldr	x0, [sp, #40]
  14:	str	x0, [sp, #168]
  18:	ldr	x0, [sp, #168]
  1c:	bl	0 <__cxa_begin_catch>
  20:	add	x0, sp, #0x60
  24:	bl	0 <__cxa_call_unexpected>
  28:	ldr	x0, [sp, #168]
  2c:	bl	0 <__cxa_call_unexpected>
  30:	str	x0, [sp, #160]
  34:	ldr	x0, [sp, #160]
  38:	ldr	x0, [x0, #56]
  3c:	str	x0, [sp, #152]
  40:	ldr	x0, [sp, #160]
  44:	ldr	w0, [x0, #44]
  48:	sxtw	x0, w0
  4c:	str	x0, [sp, #144]
  50:	ldr	x0, [sp, #160]
  54:	ldr	x0, [x0, #24]
  58:	str	x0, [sp, #136]
  5c:	ldr	x0, [sp, #160]
  60:	ldr	x0, [x0, #64]
  64:	str	x0, [sp, #64]
  68:	ldr	x0, [sp, #160]
  6c:	ldr	x0, [x0, #16]
  70:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  74:	bl	0 <__cxa_begin_catch>
  78:	bl	0 <__cxa_get_globals_fast>
  7c:	str	x0, [sp, #128]
  80:	ldr	x0, [sp, #128]
  84:	ldr	x0, [x0]
  88:	str	x0, [sp, #120]
  8c:	ldr	x0, [sp, #120]
  90:	bl	0 <__cxa_call_unexpected>
  94:	str	x0, [sp, #112]
  98:	add	x0, sp, #0x30
  9c:	mov	x2, x0
  a0:	ldr	x1, [sp, #152]
  a4:	mov	x0, #0x0                   	// #0
  a8:	bl	0 <__cxa_call_unexpected>
  ac:	ldr	x0, [sp, #112]
  b0:	bl	0 <__cxa_call_unexpected>
  b4:	ldr	x1, [x0]
  b8:	add	x0, sp, #0x30
  bc:	ldr	x3, [sp, #144]
  c0:	ldr	x2, [sp, #112]
  c4:	bl	0 <__cxa_call_unexpected>
  c8:	and	w0, w0, #0xff
  cc:	cmp	w0, #0x0
  d0:	b.eq	d8 <__cxa_call_unexpected+0xd8>  // b.none
  d4:	bl	0 <__cxa_rethrow>
  d8:	adrp	x0, 0 <_ZTISt13bad_exception>
  dc:	ldr	x0, [x0]
  e0:	str	x0, [sp, #104]
  e4:	add	x0, sp, #0x30
  e8:	ldr	x3, [sp, #144]
  ec:	mov	x2, #0x0                   	// #0
  f0:	ldr	x1, [sp, #104]
  f4:	bl	0 <__cxa_call_unexpected>
  f8:	and	w0, w0, #0xff
  fc:	cmp	w0, #0x0
 100:	b.eq	130 <__cxa_call_unexpected+0x130>  // b.none
 104:	mov	x0, #0x8                   	// #8
 108:	bl	0 <__cxa_allocate_exception>
 10c:	mov	x19, x0
 110:	mov	x0, x19
 114:	bl	0 <__cxa_call_unexpected>
 118:	adrp	x0, 0 <_ZNSt13bad_exceptionD1Ev>
 11c:	ldr	x2, [x0]
 120:	adrp	x0, 0 <_ZTISt13bad_exception>
 124:	ldr	x1, [x0]
 128:	mov	x0, x19
 12c:	bl	0 <__cxa_throw>
 130:	ldr	x0, [sp, #136]
 134:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
 138:	mov	x19, x0
 13c:	bl	0 <__cxa_end_catch>
 140:	add	x0, sp, #0x60
 144:	bl	0 <__cxa_call_unexpected>
 148:	mov	x0, x19
 14c:	bl	0 <_Unwind_Resume>

eh_ptr.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv1L31__get_exception_header_from_objEPv:

0000000000000000 <_ZN10__cxxabiv1L31__get_exception_header_from_objEPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	sub	x0, x0, #0x70
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN10__cxxabiv1L42__get_refcounted_exception_header_from_objEPv:

0000000000000000 <_ZN10__cxxabiv1L42__get_refcounted_exception_header_from_objEPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	sub	x0, x0, #0x80
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_gxx_exception_classEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x1, [sp, #8]
   c:	mov	x0, #0x2b00                	// #11008
  10:	movk	x0, #0x432b, lsl #16
  14:	movk	x0, #0x5543, lsl #32
  18:	movk	x0, #0x474e, lsl #48
  1c:	cmp	x1, x0
  20:	b.eq	40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x40>  // b.none
  24:	ldr	x1, [sp, #8]
  28:	mov	x0, #0x2b01                	// #11009
  2c:	movk	x0, #0x432b, lsl #16
  30:	movk	x0, #0x5543, lsl #32
  34:	movk	x0, #0x474e, lsl #48
  38:	cmp	x1, x0
  3c:	b.ne	48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x48>  // b.any
  40:	mov	w0, #0x1                   	// #1
  44:	b	4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x4c>
  48:	mov	w0, #0x0                   	// #0
  4c:	add	sp, sp, #0x10
  50:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_dependent_exceptionEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_dependent_exceptionEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	and	x0, x0, #0x1
  10:	cmp	x0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	bl	0 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception>
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	34 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception+0x34>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception>
  2c:	ldr	x0, [x0]
  30:	b	3c <_ZN10__cxxabiv1L20__get_object_from_ueEP17_Unwind_Exception+0x3c>
  34:	ldr	x0, [sp, #24]
  38:	add	x0, x0, #0x20
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

Disassembly of section .text._ZN10__cxxabiv1L37__get_object_from_ambiguous_exceptionEPNS_15__cxa_exceptionE:

0000000000000000 <_ZN10__cxxabiv1L37__get_object_from_ambiguous_exceptionEPNS_15__cxa_exceptionE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	add	x0, x0, #0x50
  14:	bl	0 <_ZN10__cxxabiv1L37__get_object_from_ambiguous_exceptionEPNS_15__cxa_exceptionE>
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	xzr, [x0]
  10:	nop
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EPv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EPv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	str	x1, [x0]
  1c:	ldr	x0, [sp, #24]
  20:	bl	0 <_ZNSt15__exception_ptr13exception_ptrC1EPv>
  24:	nop
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	stp	x1, x2, [sp, #8]
   c:	ldr	x0, [sp, #24]
  10:	str	xzr, [x0]
  14:	nop
  18:	add	sp, sp, #0x20
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2ERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	ldr	x1, [x0]
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrD2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>
  14:	nop
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptraSERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	add	x0, sp, #0x28
  14:	ldr	x1, [sp, #16]
  18:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  1c:	add	x0, sp, #0x28
  20:	ldr	x1, [sp, #24]
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  28:	add	x0, sp, #0x28
  2c:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  30:	ldr	x0, [sp, #24]
  34:	ldp	x29, x30, [sp], #48
  38:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr9_M_addrefEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	cmp	x0, #0x0
  18:	b.eq	4c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0x4c>  // b.none
  1c:	ldr	x0, [sp, #24]
  20:	ldr	x0, [x0]
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv>
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	str	x0, [sp, #32]
  34:	ldr	x0, [sp, #32]
  38:	ldaxr	w1, [x0]
  3c:	add	w1, w1, #0x1
  40:	stlxr	w2, w1, [x0]
  44:	cbnz	w2, 38 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0x38>
  48:	nop
  4c:	nop
  50:	ldp	x29, x30, [sp], #48
  54:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr10_M_releaseEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	cmp	x0, #0x0
  18:	b.eq	94 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x94>  // b.none
  1c:	ldr	x0, [sp, #24]
  20:	ldr	x0, [x0]
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv>
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	str	x0, [sp, #32]
  34:	ldr	x0, [sp, #32]
  38:	ldaxr	w1, [x0]
  3c:	sub	w1, w1, #0x1
  40:	stlxr	w2, w1, [x0]
  44:	cbnz	w2, 38 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x38>
  48:	cmp	w1, #0x0
  4c:	cset	w0, eq  // eq = none
  50:	and	w0, w0, #0xff
  54:	cmp	w0, #0x0
  58:	b.eq	94 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x94>  // b.none
  5c:	ldr	x0, [sp, #40]
  60:	ldr	x0, [x0, #24]
  64:	cmp	x0, #0x0
  68:	b.eq	80 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x80>  // b.none
  6c:	ldr	x0, [sp, #40]
  70:	ldr	x1, [x0, #24]
  74:	ldr	x0, [sp, #24]
  78:	ldr	x0, [x0]
  7c:	blr	x1
  80:	ldr	x0, [sp, #24]
  84:	ldr	x0, [x0]
  88:	bl	0 <__cxa_free_exception>
  8c:	ldr	x0, [sp, #24]
  90:	str	xzr, [x0]
  94:	nop
  98:	ldp	x29, x30, [sp], #48
  9c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr6_M_getEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr6_M_getEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0]
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr4swapERS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr4swapERS0_>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	ldr	x0, [x0]
  14:	str	x0, [sp, #24]
  18:	ldr	x0, [sp]
  1c:	ldr	x1, [x0]
  20:	ldr	x0, [sp, #8]
  24:	str	x1, [x0]
  28:	ldr	x0, [sp]
  2c:	ldr	x1, [sp, #24]
  30:	str	x1, [x0]
  34:	nop
  38:	add	sp, sp, #0x20
  3c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	nop
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrntEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrntEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0]
  10:	cmp	x0, #0x0
  14:	cset	w0, eq  // eq = none
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0]
  10:	cmp	x0, #0x0
  14:	b.ne	24 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv+0x24>  // b.any
  18:	mov	x2, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	b	30 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv+0x30>
  24:	adrp	x0, 0 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>
  28:	ldr	x2, [x0]
  2c:	mov	x3, #0x0                   	// #0
  30:	mov	x0, x2
  34:	mov	x1, x3
  38:	add	sp, sp, #0x10
  3c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	bl	0 <_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv>
  18:	str	x0, [sp, #40]
  1c:	ldr	x0, [sp, #40]
  20:	ldr	x0, [x0]
  24:	ldp	x29, x30, [sp], #48
  28:	ret

Disassembly of section .text._ZNSt15__exception_ptreqERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptreqERKNS_13exception_ptrES2_>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	ldr	x1, [x0]
  14:	ldr	x0, [sp]
  18:	ldr	x0, [x0]
  1c:	cmp	x1, x0
  20:	cset	w0, eq  // eq = none
  24:	and	w0, w0, #0xff
  28:	add	sp, sp, #0x10
  2c:	ret

Disassembly of section .text._ZNSt15__exception_ptrneERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	bl	0 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>
  1c:	and	w0, w0, #0xff
  20:	eor	w0, w0, #0x1
  24:	and	w0, w0, #0xff
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text._ZSt17current_exceptionv:

0000000000000000 <_ZSt17current_exceptionv>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x8
  10:	bl	0 <__cxa_get_globals>
  14:	str	x0, [sp, #40]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x0, [x0]
  20:	str	x0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	cmp	x0, #0x0
  2c:	b.ne	3c <_ZSt17current_exceptionv+0x3c>  // b.any
  30:	mov	x0, x19
  34:	bl	0 <_ZSt17current_exceptionv>
  38:	b	7c <_ZSt17current_exceptionv+0x7c>
  3c:	ldr	x0, [sp, #32]
  40:	ldr	x0, [x0, #80]
  44:	bl	0 <_ZSt17current_exceptionv>
  48:	and	w0, w0, #0xff
  4c:	eor	w0, w0, #0x1
  50:	and	w0, w0, #0xff
  54:	cmp	w0, #0x0
  58:	b.eq	68 <_ZSt17current_exceptionv+0x68>  // b.none
  5c:	mov	x0, x19
  60:	bl	0 <_ZSt17current_exceptionv>
  64:	b	7c <_ZSt17current_exceptionv+0x7c>
  68:	ldr	x0, [sp, #32]
  6c:	bl	0 <_ZSt17current_exceptionv>
  70:	mov	x1, x0
  74:	mov	x0, x19
  78:	bl	0 <_ZSt17current_exceptionv>
  7c:	mov	x0, x19
  80:	ldr	x19, [sp, #16]
  84:	ldp	x29, x30, [sp], #48
  88:	ret

Disassembly of section .text._ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	bl	0 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>
  18:	str	x0, [sp, #56]
  1c:	ldr	x0, [sp, #56]
  20:	ldr	x0, [x0]
  24:	bl	0 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>
  28:	str	x0, [sp, #48]
  2c:	ldr	w0, [sp, #28]
  30:	cmp	w0, #0x1
  34:	b.eq	50 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x50>  // b.none
  38:	ldr	w0, [sp, #28]
  3c:	cmp	w0, #0x0
  40:	b.eq	50 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x50>  // b.none
  44:	ldr	x0, [sp, #48]
  48:	ldr	x0, [x0, #40]
  4c:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
  50:	ldr	x0, [sp, #56]
  54:	bl	0 <__cxa_free_dependent_exception>
  58:	ldr	x0, [sp, #48]
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldaxr	w1, [x0]
  68:	sub	w1, w1, #0x1
  6c:	stlxr	w2, w1, [x0]
  70:	cbnz	w2, 64 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x64>
  74:	cmp	w1, #0x0
  78:	cset	w0, eq  // eq = none
  7c:	and	w0, w0, #0xff
  80:	cmp	w0, #0x0
  84:	b.eq	b8 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0xb8>  // b.none
  88:	ldr	x0, [sp, #48]
  8c:	ldr	x0, [x0, #24]
  90:	cmp	x0, #0x0
  94:	b.eq	ac <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0xac>  // b.none
  98:	ldr	x0, [sp, #48]
  9c:	ldr	x1, [x0, #24]
  a0:	ldr	x0, [sp, #48]
  a4:	add	x0, x0, #0x80
  a8:	blr	x1
  ac:	ldr	x0, [sp, #48]
  b0:	add	x0, x0, #0x80
  b4:	bl	0 <__cxa_free_exception>
  b8:	nop
  bc:	ldp	x29, x30, [sp], #64
  c0:	ret

Disassembly of section .text._ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE:

0000000000000000 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  14:	str	x0, [sp, #72]
  18:	ldr	x0, [sp, #72]
  1c:	bl	0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  20:	str	x0, [sp, #64]
  24:	bl	0 <__cxa_allocate_dependent_exception>
  28:	str	x0, [sp, #56]
  2c:	ldr	x0, [sp, #56]
  30:	ldr	x1, [sp, #72]
  34:	str	x1, [x0]
  38:	ldr	x0, [sp, #64]
  3c:	str	x0, [sp, #40]
  40:	ldr	x0, [sp, #40]
  44:	ldaxr	w1, [x0]
  48:	add	w1, w1, #0x1
  4c:	stlxr	w2, w1, [x0]
  50:	cbnz	w2, 44 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE+0x44>
  54:	nop
  58:	bl	0 <_ZSt14get_unexpectedv>
  5c:	mov	x1, x0
  60:	ldr	x0, [sp, #56]
  64:	str	x1, [x0, #16]
  68:	bl	0 <_ZSt13get_terminatev>
  6c:	mov	x1, x0
  70:	ldr	x0, [sp, #56]
  74:	str	x1, [x0, #24]
  78:	ldr	x0, [sp, #56]
  7c:	mov	x1, #0x2b01                	// #11009
  80:	movk	x1, #0x432b, lsl #16
  84:	movk	x1, #0x5543, lsl #32
  88:	movk	x1, #0x474e, lsl #48
  8c:	str	x1, [x0, #80]
  90:	ldr	x0, [sp, #56]
  94:	adrp	x1, 0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  98:	add	x1, x1, #0x0
  9c:	str	x1, [x0, #88]
  a0:	bl	0 <__cxa_get_globals>
  a4:	str	x0, [sp, #48]
  a8:	ldr	x0, [sp, #48]
  ac:	ldr	w0, [x0, #8]
  b0:	add	w1, w0, #0x1
  b4:	ldr	x0, [sp, #48]
  b8:	str	w1, [x0, #8]
  bc:	ldr	x0, [sp, #56]
  c0:	add	x0, x0, #0x50
  c4:	bl	0 <_Unwind_RaiseException>
  c8:	ldr	x0, [sp, #56]
  cc:	add	x0, x0, #0x50
  d0:	bl	0 <__cxa_begin_catch>
  d4:	bl	0 <_ZSt9terminatev>

eh_term_handler.o:     file format elf64-littleaarch64


eh_terminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv111__terminateEPFvvE:

0000000000000000 <_ZN10__cxxabiv111__terminateEPFvvE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	blr	x0
  14:	bl	0 <abort>
  18:	bl	0 <__cxa_begin_catch>
  1c:	bl	0 <abort>

Disassembly of section .text._ZSt9terminatev:

0000000000000000 <_ZSt9terminatev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt9terminatev>
   c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZN10__cxxabiv112__unexpectedEPFvvE:

0000000000000000 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	blr	x0
  14:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

Disassembly of section .text._ZSt10unexpectedv:

0000000000000000 <_ZSt10unexpectedv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt10unexpectedv>
   c:	bl	0 <_ZSt10unexpectedv>

Disassembly of section .text._ZSt13set_terminatePFvvE:

0000000000000000 <_ZSt13set_terminatePFvvE>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	mov	x2, x0
  10:	adrp	x0, 0 <_ZN10__cxxabiv119__terminate_handlerE>
  14:	ldr	x0, [x0]
  18:	ldaxr	x1, [x0]
  1c:	stlxr	w3, x2, [x0]
  20:	cbnz	w3, 18 <_ZSt13set_terminatePFvvE+0x18>
  24:	mov	x0, x1
  28:	str	x0, [sp, #24]
  2c:	ldr	x0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

Disassembly of section .text._ZSt13get_terminatev:

0000000000000000 <_ZSt13get_terminatev>:
   0:	sub	sp, sp, #0x10
   4:	adrp	x0, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   8:	ldr	x0, [x0]
   c:	ldar	x0, [x0]
  10:	str	x0, [sp, #8]
  14:	ldr	x0, [sp, #8]
  18:	add	sp, sp, #0x10
  1c:	ret

Disassembly of section .text._ZSt14set_unexpectedPFvvE:

0000000000000000 <_ZSt14set_unexpectedPFvvE>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	mov	x2, x0
  10:	adrp	x0, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
  14:	ldr	x0, [x0]
  18:	ldaxr	x1, [x0]
  1c:	stlxr	w3, x2, [x0]
  20:	cbnz	w3, 18 <_ZSt14set_unexpectedPFvvE+0x18>
  24:	mov	x0, x1
  28:	str	x0, [sp, #24]
  2c:	ldr	x0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

Disassembly of section .text._ZSt14get_unexpectedv:

0000000000000000 <_ZSt14get_unexpectedv>:
   0:	sub	sp, sp, #0x10
   4:	adrp	x0, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   8:	ldr	x0, [x0]
   c:	ldar	x0, [x0]
  10:	str	x0, [sp, #8]
  14:	ldr	x0, [sp, #8]
  18:	add	sp, sp, #0x10
  1c:	ret

eh_tm.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv1L42__get_refcounted_exception_header_from_objEPv:

0000000000000000 <_ZN10__cxxabiv1L42__get_refcounted_exception_header_from_objEPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	sub	x0, x0, #0x80
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN10__cxxabiv1L41__get_refcounted_exception_header_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L41__get_refcounted_exception_header_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x80
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_gxx_exception_classEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x1, [sp, #8]
   c:	mov	x0, #0x2b00                	// #11008
  10:	movk	x0, #0x432b, lsl #16
  14:	movk	x0, #0x5543, lsl #32
  18:	movk	x0, #0x474e, lsl #48
  1c:	cmp	x1, x0
  20:	b.eq	40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x40>  // b.none
  24:	ldr	x1, [sp, #8]
  28:	mov	x0, #0x2b01                	// #11009
  2c:	movk	x0, #0x432b, lsl #16
  30:	movk	x0, #0x5543, lsl #32
  34:	movk	x0, #0x474e, lsl #48
  38:	cmp	x1, x0
  3c:	b.ne	48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x48>  // b.any
  40:	mov	w0, #0x1                   	// #1
  44:	b	4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x4c>
  48:	mov	w0, #0x0                   	// #0
  4c:	add	sp, sp, #0x10
  50:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_dependent_exceptionEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_dependent_exceptionEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	and	x0, x0, #0x1
  10:	cmp	x0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZL22free_any_cxa_exceptionP17_Unwind_Exception:

0000000000000000 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>
  14:	str	x0, [sp, #56]
  18:	ldr	x0, [sp, #24]
  1c:	ldr	x0, [x0]
  20:	bl	0 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>
  24:	and	w0, w0, #0xff
  28:	cmp	w0, #0x0
  2c:	b.eq	54 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x54>  // b.none
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>
  38:	str	x0, [sp, #48]
  3c:	ldr	x0, [sp, #48]
  40:	ldr	x0, [x0]
  44:	bl	0 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>
  48:	str	x0, [sp, #56]
  4c:	ldr	x0, [sp, #48]
  50:	bl	0 <__cxa_free_dependent_exception>
  54:	ldr	x0, [sp, #56]
  58:	str	x0, [sp, #40]
  5c:	ldr	x0, [sp, #40]
  60:	ldaxr	w1, [x0]
  64:	sub	w1, w1, #0x1
  68:	stlxr	w2, w1, [x0]
  6c:	cbnz	w2, 60 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x60>
  70:	cmp	w1, #0x0
  74:	cset	w0, eq  // eq = none
  78:	and	w0, w0, #0xff
  7c:	cmp	w0, #0x0
  80:	b.eq	90 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x90>  // b.none
  84:	ldr	x0, [sp, #56]
  88:	add	x0, x0, #0x80
  8c:	bl	0 <__cxa_free_exception>
  90:	nop
  94:	ldp	x29, x30, [sp], #64
  98:	ret

Disassembly of section .text.__cxa_tm_cleanup:

0000000000000000 <__cxa_tm_cleanup>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	w2, [sp, #28]
  14:	bl	0 <__cxa_get_globals_fast>
  18:	str	x0, [sp, #72]
  1c:	ldr	x0, [sp, #40]
  20:	cmp	x0, #0x0
  24:	b.eq	44 <__cxa_tm_cleanup+0x44>  // b.none
  28:	ldr	x0, [sp, #72]
  2c:	ldr	w0, [x0, #8]
  30:	sub	w1, w0, #0x1
  34:	ldr	x0, [sp, #72]
  38:	str	w1, [x0, #8]
  3c:	ldr	x0, [sp, #40]
  40:	bl	0 <__cxa_free_exception>
  44:	ldr	x0, [sp, #32]
  48:	cmp	x0, #0x0
  4c:	b.eq	84 <__cxa_tm_cleanup+0x84>  // b.none
  50:	ldr	x0, [sp, #32]
  54:	str	x0, [sp, #64]
  58:	ldr	x0, [sp, #64]
  5c:	ldr	x0, [x0]
  60:	bl	0 <__cxa_tm_cleanup>
  64:	and	w0, w0, #0xff
  68:	cmp	w0, #0x0
  6c:	b.eq	7c <__cxa_tm_cleanup+0x7c>  // b.none
  70:	ldr	x0, [sp, #64]
  74:	bl	0 <__cxa_tm_cleanup>
  78:	b	84 <__cxa_tm_cleanup+0x84>
  7c:	ldr	x0, [sp, #64]
  80:	bl	0 <_Unwind_DeleteException>
  84:	ldr	w0, [sp, #28]
  88:	cmp	w0, #0x0
  8c:	b.eq	144 <__cxa_tm_cleanup+0x144>  // b.none
  90:	ldr	x0, [sp, #72]
  94:	ldr	x0, [x0]
  98:	str	x0, [sp, #88]
  9c:	ldr	x0, [sp, #88]
  a0:	cmp	x0, #0x0
  a4:	b.eq	140 <__cxa_tm_cleanup+0x140>  // b.none
  a8:	ldr	x0, [sp, #88]
  ac:	add	x0, x0, #0x50
  b0:	str	x0, [sp, #56]
  b4:	ldr	x0, [sp, #56]
  b8:	ldr	x0, [x0]
  bc:	bl	0 <__cxa_tm_cleanup>
  c0:	and	w0, w0, #0xff
  c4:	cmp	w0, #0x0
  c8:	b.eq	e4 <__cxa_tm_cleanup+0xe4>  // b.none
  cc:	ldr	x0, [sp, #88]
  d0:	ldr	x0, [x0, #32]
  d4:	str	x0, [sp, #80]
  d8:	ldr	x0, [sp, #56]
  dc:	bl	0 <__cxa_tm_cleanup>
  e0:	b	f0 <__cxa_tm_cleanup+0xf0>
  e4:	ldr	x0, [sp, #56]
  e8:	bl	0 <_Unwind_DeleteException>
  ec:	str	xzr, [sp, #80]
  f0:	ldr	x0, [sp, #80]
  f4:	str	x0, [sp, #88]
  f8:	ldr	w0, [sp, #28]
  fc:	sub	w0, w0, #0x1
 100:	str	w0, [sp, #28]
 104:	ldr	w0, [sp, #28]
 108:	cmp	w0, #0x0
 10c:	cset	w0, ne  // ne = any
 110:	and	w0, w0, #0xff
 114:	cmp	w0, #0x0
 118:	b.eq	120 <__cxa_tm_cleanup+0x120>  // b.none
 11c:	b	a8 <__cxa_tm_cleanup+0xa8>
 120:	ldr	x0, [sp, #72]
 124:	ldr	x1, [sp, #88]
 128:	str	x1, [x0]
 12c:	b	144 <__cxa_tm_cleanup+0x144>
 130:	cmn	x1, #0x1
 134:	b.eq	13c <__cxa_tm_cleanup+0x13c>  // b.none
 138:	bl	0 <_Unwind_Resume>
 13c:	bl	0 <__cxa_call_unexpected>
 140:	nop
 144:	ldp	x29, x30, [sp], #96
 148:	ret

eh_throw.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv1L42__get_refcounted_exception_header_from_objEPv:

0000000000000000 <_ZN10__cxxabiv1L42__get_refcounted_exception_header_from_objEPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	sub	x0, x0, #0x80
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN10__cxxabiv1L41__get_refcounted_exception_header_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L41__get_refcounted_exception_header_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x80
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_gxx_exception_classEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x1, [sp, #8]
   c:	mov	x0, #0x2b00                	// #11008
  10:	movk	x0, #0x432b, lsl #16
  14:	movk	x0, #0x5543, lsl #32
  18:	movk	x0, #0x474e, lsl #48
  1c:	cmp	x1, x0
  20:	b.eq	40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x40>  // b.none
  24:	ldr	x1, [sp, #8]
  28:	mov	x0, #0x2b01                	// #11009
  2c:	movk	x0, #0x432b, lsl #16
  30:	movk	x0, #0x5543, lsl #32
  34:	movk	x0, #0x474e, lsl #48
  38:	cmp	x1, x0
  3c:	b.ne	48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x48>  // b.any
  40:	mov	w0, #0x1                   	// #1
  44:	b	4c <_ZN10__cxxabiv1L24__is_gxx_exception_classEm+0x4c>
  48:	mov	w0, #0x0                   	// #0
  4c:	add	sp, sp, #0x10
  50:	ret

Disassembly of section .text._ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	bl	0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>
  18:	str	x0, [sp, #40]
  1c:	ldr	w0, [sp, #28]
  20:	cmp	w0, #0x1
  24:	b.eq	40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>  // b.none
  28:	ldr	w0, [sp, #28]
  2c:	cmp	w0, #0x0
  30:	b.eq	40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>  // b.none
  34:	ldr	x0, [sp, #40]
  38:	ldr	x0, [x0, #40]
  3c:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
  40:	ldr	x0, [sp, #40]
  44:	str	x0, [sp, #32]
  48:	ldr	x0, [sp, #32]
  4c:	ldaxr	w1, [x0]
  50:	sub	w1, w1, #0x1
  54:	stlxr	w2, w1, [x0]
  58:	cbnz	w2, 4c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
  5c:	cmp	w1, #0x0
  60:	cset	w0, eq  // eq = none
  64:	and	w0, w0, #0xff
  68:	cmp	w0, #0x0
  6c:	b.eq	a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0xa0>  // b.none
  70:	ldr	x0, [sp, #40]
  74:	ldr	x0, [x0, #24]
  78:	cmp	x0, #0x0
  7c:	b.eq	94 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x94>  // b.none
  80:	ldr	x0, [sp, #40]
  84:	ldr	x1, [x0, #24]
  88:	ldr	x0, [sp, #40]
  8c:	add	x0, x0, #0x80
  90:	blr	x1
  94:	ldr	x0, [sp, #40]
  98:	add	x0, x0, #0x80
  9c:	bl	0 <__cxa_free_exception>
  a0:	nop
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

Disassembly of section .text.__cxa_init_primary_exception:

0000000000000000 <__cxa_init_primary_exception>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #40]
  18:	bl	0 <__cxa_init_primary_exception>
  1c:	str	x0, [sp, #56]
  20:	ldr	x0, [sp, #56]
  24:	str	wzr, [x0]
  28:	ldr	x0, [sp, #56]
  2c:	ldr	x1, [sp, #32]
  30:	str	x1, [x0, #16]
  34:	ldr	x0, [sp, #56]
  38:	ldr	x1, [sp, #24]
  3c:	str	x1, [x0, #24]
  40:	bl	0 <_ZSt14get_unexpectedv>
  44:	mov	x1, x0
  48:	ldr	x0, [sp, #56]
  4c:	str	x1, [x0, #32]
  50:	bl	0 <_ZSt13get_terminatev>
  54:	mov	x1, x0
  58:	ldr	x0, [sp, #56]
  5c:	str	x1, [x0, #40]
  60:	ldr	x0, [sp, #56]
  64:	mov	x1, #0x2b00                	// #11008
  68:	movk	x1, #0x432b, lsl #16
  6c:	movk	x1, #0x5543, lsl #32
  70:	movk	x1, #0x474e, lsl #48
  74:	str	x1, [x0, #96]
  78:	ldr	x0, [sp, #56]
  7c:	adrp	x1, 0 <__cxa_init_primary_exception>
  80:	add	x1, x1, #0x0
  84:	str	x1, [x0, #104]
  88:	ldr	x0, [sp, #56]
  8c:	ldp	x29, x30, [sp], #64
  90:	ret

Disassembly of section .text.__cxa_throw:

0000000000000000 <__cxa_throw>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	bl	0 <__cxa_get_globals>
  18:	str	x0, [sp, #56]
  1c:	ldr	x0, [sp, #56]
  20:	ldr	w0, [x0, #8]
  24:	add	w1, w0, #0x1
  28:	ldr	x0, [sp, #56]
  2c:	str	w1, [x0, #8]
  30:	ldr	x2, [sp, #24]
  34:	ldr	x1, [sp, #32]
  38:	ldr	x0, [sp, #40]
  3c:	bl	0 <__cxa_throw>
  40:	str	x0, [sp, #48]
  44:	ldr	x0, [sp, #48]
  48:	mov	w1, #0x1                   	// #1
  4c:	str	w1, [x0]
  50:	ldr	x0, [sp, #48]
  54:	add	x0, x0, #0x60
  58:	bl	0 <_Unwind_RaiseException>
  5c:	ldr	x0, [sp, #48]
  60:	add	x0, x0, #0x60
  64:	bl	0 <__cxa_begin_catch>
  68:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_rethrow:

0000000000000000 <__cxa_rethrow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	str	x0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x0, [x0]
  18:	str	x0, [sp, #16]
  1c:	ldr	x0, [sp, #24]
  20:	ldr	w0, [x0, #8]
  24:	add	w1, w0, #0x1
  28:	ldr	x0, [sp, #24]
  2c:	str	w1, [x0, #8]
  30:	ldr	x0, [sp, #16]
  34:	cmp	x0, #0x0
  38:	b.eq	94 <__cxa_rethrow+0x94>  // b.none
  3c:	ldr	x0, [sp, #16]
  40:	ldr	x0, [x0, #80]
  44:	bl	0 <__cxa_rethrow>
  48:	and	w0, w0, #0xff
  4c:	eor	w0, w0, #0x1
  50:	and	w0, w0, #0xff
  54:	cmp	w0, #0x0
  58:	b.eq	68 <__cxa_rethrow+0x68>  // b.none
  5c:	ldr	x0, [sp, #24]
  60:	str	xzr, [x0]
  64:	b	7c <__cxa_rethrow+0x7c>
  68:	ldr	x0, [sp, #16]
  6c:	ldr	w0, [x0, #40]
  70:	neg	w1, w0
  74:	ldr	x0, [sp, #16]
  78:	str	w1, [x0, #40]
  7c:	ldr	x0, [sp, #16]
  80:	add	x0, x0, #0x50
  84:	bl	0 <_Unwind_Resume_or_Rethrow>
  88:	ldr	x0, [sp, #16]
  8c:	add	x0, x0, #0x50
  90:	bl	0 <__cxa_begin_catch>
  94:	bl	0 <_ZSt9terminatev>

eh_type.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv1L31__get_exception_header_from_objEPv:

0000000000000000 <_ZN10__cxxabiv1L31__get_exception_header_from_objEPv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	sub	x0, x0, #0x70
  10:	add	sp, sp, #0x10
  14:	ret

Disassembly of section .text._ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception:

0000000000000000 <_ZN10__cxxabiv1L33__get_dependent_exception_from_ueEP17_Unwind_Exception>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x20
  10:	sub	x0, x0, #0x70
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L24__is_dependent_exceptionEm:

0000000000000000 <_ZN10__cxxabiv1L24__is_dependent_exceptionEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	and	x0, x0, #0x1
  10:	cmp	x0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text.__cxa_current_exception_type:

0000000000000000 <__cxa_current_exception_type>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	str	x0, [sp, #32]
  10:	ldr	x0, [sp, #32]
  14:	ldr	x0, [x0]
  18:	str	x0, [sp, #40]
  1c:	ldr	x0, [sp, #40]
  20:	cmp	x0, #0x0
  24:	b.eq	6c <__cxa_current_exception_type+0x6c>  // b.none
  28:	ldr	x0, [sp, #40]
  2c:	ldr	x0, [x0, #80]
  30:	bl	0 <__cxa_current_exception_type>
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x0
  3c:	b.eq	60 <__cxa_current_exception_type+0x60>  // b.none
  40:	ldr	x0, [sp, #40]
  44:	add	x0, x0, #0x50
  48:	bl	0 <__cxa_current_exception_type>
  4c:	str	x0, [sp, #24]
  50:	ldr	x0, [sp, #24]
  54:	ldr	x0, [x0]
  58:	bl	0 <__cxa_current_exception_type>
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldr	x0, [x0]
  68:	b	70 <__cxa_current_exception_type+0x70>
  6c:	mov	x0, #0x0                   	// #0
  70:	ldp	x29, x30, [sp], #48
  74:	ret

eh_unex_handler.o:     file format elf64-littleaarch64


enum_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv116__enum_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv116__enum_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

function_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv120__function_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv120__function_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv120__function_type_info15__is_function_pEv:

0000000000000000 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	mov	w0, #0x1                   	// #1
   c:	add	sp, sp, #0x10
  10:	ret

fundamental_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

guard.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL18__gthread_active_pv:

0000000000000000 <_ZL18__gthread_active_pv>:
   0:	mov	w1, #0x1                   	// #1
   4:	adrp	x0, 0 <__pthread_key_create>
   8:	ldr	x0, [x0]
   c:	cmp	x0, #0x0
  10:	b.ne	18 <_ZL18__gthread_active_pv+0x18>  // b.any
  14:	mov	w1, #0x0                   	// #0
  18:	and	w0, w1, #0xff
  1c:	ret

Disassembly of section .text._Z18__test_and_acquirePl:

0000000000000000 <_Z18__test_and_acquirePl>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	ldarb	w0, [x0]
  18:	and	w0, w0, #0xff
  1c:	strb	w0, [sp, #23]
  20:	add	x0, sp, #0x17
  24:	ldrb	w0, [x0]
  28:	cmp	w0, #0x0
  2c:	cset	w0, ne  // ne = any
  30:	and	w0, w0, #0xff
  34:	add	sp, sp, #0x20
  38:	ret

Disassembly of section .text._Z17__set_and_releasePl:

0000000000000000 <_Z17__set_and_releasePl>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #24]
  10:	mov	w0, #0x1                   	// #1
  14:	strb	w0, [sp, #23]
  18:	ldrb	w1, [sp, #23]
  1c:	ldr	x0, [sp, #24]
  20:	stlrb	w1, [x0]
  24:	nop
  28:	add	sp, sp, #0x20
  2c:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_1L16__guard_test_bitEii:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_1L16__guard_test_bitEii>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	str	w1, [sp, #8]
   c:	str	wzr, [sp, #24]
  10:	ldr	w0, [sp, #8]
  14:	and	w2, w0, #0xff
  18:	ldrsw	x0, [sp, #12]
  1c:	add	x1, sp, #0x18
  20:	strb	w2, [x1, x0]
  24:	ldr	w0, [sp, #24]
  28:	add	sp, sp, #0x20
  2c:	ret

Disassembly of section .text._ZN10__cxxabiv1L21init_in_progress_flagEPl:

0000000000000000 <_ZN10__cxxabiv1L21init_in_progress_flagEPl>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	add	x0, x0, #0x1
  10:	ldrb	w0, [x0]
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv1L25set_init_in_progress_flagEPli:

0000000000000000 <_ZN10__cxxabiv1L25set_init_in_progress_flagEPli>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	add	x0, x0, #0x1
  14:	ldr	w1, [sp, #4]
  18:	and	w1, w1, #0xff
  1c:	strb	w1, [x0]
  20:	nop
  24:	add	sp, sp, #0x10
  28:	ret

Disassembly of section .text._ZN10__cxxabiv1L30throw_recursive_init_exceptionEv:

0000000000000000 <_ZN10__cxxabiv1L30throw_recursive_init_exceptionEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x0, #0x8                   	// #8
  10:	bl	0 <__cxa_allocate_exception>
  14:	mov	x19, x0
  18:	mov	x0, x19
  1c:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
  20:	adrp	x0, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
  24:	ldr	x2, [x0]
  28:	adrp	x0, 0 <_ZTIN9__gnu_cxx20recursive_init_errorE>
  2c:	ldr	x1, [x0]
  30:	mov	x0, x19
  34:	bl	0 <__cxa_throw>

Disassembly of section .text._ZN10__cxxabiv1L7acquireEPl:

0000000000000000 <_ZN10__cxxabiv1L7acquireEPl>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldrb	w0, [x0]
  14:	cmp	w0, #0x0
  18:	b.eq	24 <_ZN10__cxxabiv1L7acquireEPl+0x24>  // b.none
  1c:	mov	w0, #0x0                   	// #0
  20:	b	54 <_ZN10__cxxabiv1L7acquireEPl+0x54>
  24:	ldr	x0, [sp, #24]
  28:	bl	0 <_ZN10__cxxabiv1L7acquireEPl>
  2c:	cmp	w0, #0x0
  30:	cset	w0, ne  // ne = any
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x0
  3c:	b.eq	44 <_ZN10__cxxabiv1L7acquireEPl+0x44>  // b.none
  40:	bl	0 <_ZN10__cxxabiv1L7acquireEPl>
  44:	mov	w1, #0x1                   	// #1
  48:	ldr	x0, [sp, #24]
  4c:	bl	0 <_ZN10__cxxabiv1L7acquireEPl>
  50:	mov	w0, #0x1                   	// #1
  54:	ldp	x29, x30, [sp], #32
  58:	ret

Disassembly of section .text.__cxa_guard_acquire:

0000000000000000 <__cxa_guard_acquire>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <__cxa_guard_acquire>
  14:	and	w0, w0, #0xff
  18:	cmp	w0, #0x0
  1c:	b.eq	28 <__cxa_guard_acquire+0x28>  // b.none
  20:	mov	w0, #0x0                   	// #0
  24:	b	1a4 <__cxa_guard_acquire+0x1a4>
  28:	bl	0 <__cxa_guard_acquire>
  2c:	cmp	w0, #0x0
  30:	cset	w0, ne  // ne = any
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x0
  3c:	b.eq	198 <__cxa_guard_acquire+0x198>  // b.none
  40:	ldr	x0, [sp, #24]
  44:	str	x0, [sp, #56]
  48:	mov	w1, #0x1                   	// #1
  4c:	mov	w0, #0x0                   	// #0
  50:	bl	0 <__cxa_guard_acquire>
  54:	str	w0, [sp, #52]
  58:	mov	w1, #0x1                   	// #1
  5c:	mov	w0, #0x1                   	// #1
  60:	bl	0 <__cxa_guard_acquire>
  64:	str	w0, [sp, #48]
  68:	mov	w1, #0x1                   	// #1
  6c:	mov	w0, #0x2                   	// #2
  70:	bl	0 <__cxa_guard_acquire>
  74:	str	w0, [sp, #44]
  78:	str	wzr, [sp, #36]
  7c:	ldr	w4, [sp, #48]
  80:	ldr	x1, [sp, #56]
  84:	add	x0, sp, #0x24
  88:	ldr	w3, [x0]
  8c:	ldaxr	w2, [x1]
  90:	cmp	w2, w3
  94:	b.ne	a0 <__cxa_guard_acquire+0xa0>  // b.any
  98:	stlxr	w5, w4, [x1]
  9c:	cbnz	w5, 8c <__cxa_guard_acquire+0x8c>
  a0:	cset	w1, eq  // eq = none
  a4:	cmp	w1, #0x0
  a8:	b.ne	b0 <__cxa_guard_acquire+0xb0>  // b.any
  ac:	str	w2, [x0]
  b0:	mov	w0, w1
  b4:	cmp	w0, #0x0
  b8:	b.eq	c4 <__cxa_guard_acquire+0xc4>  // b.none
  bc:	mov	w0, #0x1                   	// #1
  c0:	b	1a4 <__cxa_guard_acquire+0x1a4>
  c4:	ldr	w0, [sp, #36]
  c8:	ldr	w1, [sp, #52]
  cc:	cmp	w1, w0
  d0:	b.ne	dc <__cxa_guard_acquire+0xdc>  // b.any
  d4:	mov	w0, #0x0                   	// #0
  d8:	b	1a4 <__cxa_guard_acquire+0x1a4>
  dc:	ldr	w0, [sp, #36]
  e0:	ldr	w1, [sp, #48]
  e4:	cmp	w1, w0
  e8:	b.ne	170 <__cxa_guard_acquire+0x170>  // b.any
  ec:	ldr	w0, [sp, #36]
  f0:	ldr	w1, [sp, #44]
  f4:	orr	w0, w1, w0
  f8:	str	w0, [sp, #40]
  fc:	ldr	w4, [sp, #40]
 100:	ldr	x1, [sp, #56]
 104:	add	x0, sp, #0x24
 108:	ldr	w3, [x0]
 10c:	ldaxr	w2, [x1]
 110:	cmp	w2, w3
 114:	b.ne	120 <__cxa_guard_acquire+0x120>  // b.any
 118:	stlxr	w5, w4, [x1]
 11c:	cbnz	w5, 10c <__cxa_guard_acquire+0x10c>
 120:	cset	w1, eq  // eq = none
 124:	cmp	w1, #0x0
 128:	b.ne	130 <__cxa_guard_acquire+0x130>  // b.any
 12c:	str	w2, [x0]
 130:	mov	w0, w1
 134:	eor	w0, w0, #0x1
 138:	and	w0, w0, #0xff
 13c:	cmp	w0, #0x0
 140:	b.eq	168 <__cxa_guard_acquire+0x168>  // b.none
 144:	ldr	w0, [sp, #36]
 148:	ldr	w1, [sp, #52]
 14c:	cmp	w1, w0
 150:	b.ne	15c <__cxa_guard_acquire+0x15c>  // b.any
 154:	mov	w0, #0x0                   	// #0
 158:	b	1a4 <__cxa_guard_acquire+0x1a4>
 15c:	ldr	w0, [sp, #36]
 160:	cmp	w0, #0x0
 164:	b.eq	190 <__cxa_guard_acquire+0x190>  // b.none
 168:	ldr	w0, [sp, #40]
 16c:	str	w0, [sp, #36]
 170:	ldr	w0, [sp, #36]
 174:	mov	w4, #0x0                   	// #0
 178:	mov	w3, w0
 17c:	mov	w2, #0x0                   	// #0
 180:	ldr	x1, [sp, #56]
 184:	mov	x0, #0x62                  	// #98
 188:	bl	0 <syscall>
 18c:	b	78 <__cxa_guard_acquire+0x78>
 190:	nop
 194:	b	78 <__cxa_guard_acquire+0x78>
 198:	ldr	x0, [sp, #24]
 19c:	bl	0 <__cxa_guard_acquire>
 1a0:	nop
 1a4:	ldp	x29, x30, [sp], #64
 1a8:	ret

Disassembly of section .text.__cxa_guard_abort:

0000000000000000 <__cxa_guard_abort>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <__cxa_guard_abort>
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	7c <__cxa_guard_abort+0x7c>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	str	x0, [sp, #40]
  2c:	mov	w1, #0x1                   	// #1
  30:	mov	w0, #0x2                   	// #2
  34:	bl	0 <__cxa_guard_abort>
  38:	str	w0, [sp, #36]
  3c:	ldr	x1, [sp, #40]
  40:	ldaxr	w0, [x1]
  44:	stlxr	w2, wzr, [x1]
  48:	cbnz	w2, 40 <__cxa_guard_abort+0x40>
  4c:	str	w0, [sp, #32]
  50:	ldr	w1, [sp, #32]
  54:	ldr	w0, [sp, #36]
  58:	and	w0, w1, w0
  5c:	cmp	w0, #0x0
  60:	b.eq	8c <__cxa_guard_abort+0x8c>  // b.none
  64:	mov	w3, #0x7fffffff            	// #2147483647
  68:	mov	w2, #0x1                   	// #1
  6c:	ldr	x1, [sp, #40]
  70:	mov	x0, #0x62                  	// #98
  74:	bl	0 <syscall>
  78:	b	8c <__cxa_guard_abort+0x8c>
  7c:	mov	w1, #0x0                   	// #0
  80:	ldr	x0, [sp, #24]
  84:	bl	0 <__cxa_guard_abort>
  88:	b	90 <__cxa_guard_abort+0x90>
  8c:	nop
  90:	ldp	x29, x30, [sp], #48
  94:	ret

Disassembly of section .text.__cxa_guard_release:

0000000000000000 <__cxa_guard_release>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	bl	0 <__cxa_guard_release>
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x0
  20:	b.eq	90 <__cxa_guard_release+0x90>  // b.none
  24:	ldr	x0, [sp, #24]
  28:	str	x0, [sp, #56]
  2c:	mov	w1, #0x1                   	// #1
  30:	mov	w0, #0x0                   	// #0
  34:	bl	0 <__cxa_guard_release>
  38:	str	w0, [sp, #52]
  3c:	mov	w1, #0x1                   	// #1
  40:	mov	w0, #0x2                   	// #2
  44:	bl	0 <__cxa_guard_release>
  48:	str	w0, [sp, #48]
  4c:	ldr	w2, [sp, #52]
  50:	ldr	x1, [sp, #56]
  54:	ldaxr	w0, [x1]
  58:	stlxr	w3, w2, [x1]
  5c:	cbnz	w3, 54 <__cxa_guard_release+0x54>
  60:	str	w0, [sp, #44]
  64:	ldr	w1, [sp, #44]
  68:	ldr	w0, [sp, #48]
  6c:	and	w0, w1, w0
  70:	cmp	w0, #0x0
  74:	b.eq	a8 <__cxa_guard_release+0xa8>  // b.none
  78:	mov	w3, #0x7fffffff            	// #2147483647
  7c:	mov	w2, #0x1                   	// #1
  80:	ldr	x1, [sp, #56]
  84:	mov	x0, #0x62                  	// #98
  88:	bl	0 <syscall>
  8c:	b	a8 <__cxa_guard_release+0xa8>
  90:	mov	w1, #0x0                   	// #0
  94:	ldr	x0, [sp, #24]
  98:	bl	0 <__cxa_guard_release>
  9c:	ldr	x0, [sp, #24]
  a0:	bl	0 <__cxa_guard_release>
  a4:	b	ac <__cxa_guard_release+0xac>
  a8:	nop
  ac:	ldp	x29, x30, [sp], #64
  b0:	ret

guard_error.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
  14:	adrp	x0, 0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9exceptionD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

hash_bytes.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN12_GLOBAL__N_114unaligned_loadEPKc:

0000000000000000 <_ZN12_GLOBAL__N_114unaligned_loadEPKc>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0]
  10:	str	x0, [sp, #24]
  14:	ldr	x0, [sp, #24]
  18:	add	sp, sp, #0x20
  1c:	ret

Disassembly of section .text._ZN12_GLOBAL__N_110load_bytesEPKci:

0000000000000000 <_ZN12_GLOBAL__N_110load_bytesEPKci>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	xzr, [sp, #24]
  10:	ldr	w0, [sp, #4]
  14:	sub	w0, w0, #0x1
  18:	str	w0, [sp, #4]
  1c:	ldr	x0, [sp, #24]
  20:	lsl	x1, x0, #8
  24:	ldrsw	x0, [sp, #4]
  28:	ldr	x2, [sp, #8]
  2c:	add	x0, x2, x0
  30:	ldrb	w0, [x0]
  34:	and	x0, x0, #0xff
  38:	add	x0, x1, x0
  3c:	str	x0, [sp, #24]
  40:	ldr	w0, [sp, #4]
  44:	sub	w0, w0, #0x1
  48:	str	w0, [sp, #4]
  4c:	ldr	w0, [sp, #4]
  50:	mvn	w0, w0
  54:	lsr	w0, w0, #31
  58:	and	w0, w0, #0xff
  5c:	cmp	w0, #0x0
  60:	b.eq	68 <_ZN12_GLOBAL__N_110load_bytesEPKci+0x68>  // b.none
  64:	b	1c <_ZN12_GLOBAL__N_110load_bytesEPKci+0x1c>
  68:	ldr	x0, [sp, #24]
  6c:	add	sp, sp, #0x20
  70:	ret

Disassembly of section .text._ZN12_GLOBAL__N_19shift_mixEm:

0000000000000000 <_ZN12_GLOBAL__N_19shift_mixEm>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	lsr	x1, x0, #47
  10:	ldr	x0, [sp, #8]
  14:	eor	x0, x1, x0
  18:	add	sp, sp, #0x10
  1c:	ret

Disassembly of section .text._ZSt11_Hash_bytesPKvmm:

0000000000000000 <_ZSt11_Hash_bytesPKvmm>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #40]
  18:	str	x0, [sp, #88]
  1c:	ldr	x0, [sp, #32]
  20:	and	x0, x0, #0xfffffffffffffff8
  24:	str	x0, [sp, #80]
  28:	ldr	x1, [sp, #88]
  2c:	ldr	x0, [sp, #80]
  30:	add	x0, x1, x0
  34:	str	x0, [sp, #72]
  38:	ldr	x1, [sp, #32]
  3c:	mov	x0, #0xe995                	// #59797
  40:	movk	x0, #0x5bd1, lsl #16
  44:	movk	x0, #0xa793, lsl #32
  48:	movk	x0, #0xc6a4, lsl #48
  4c:	mul	x0, x1, x0
  50:	ldr	x1, [sp, #24]
  54:	eor	x0, x1, x0
  58:	str	x0, [sp, #104]
  5c:	ldr	x0, [sp, #88]
  60:	str	x0, [sp, #96]
  64:	ldr	x1, [sp, #96]
  68:	ldr	x0, [sp, #72]
  6c:	cmp	x1, x0
  70:	b.eq	f0 <_ZSt11_Hash_bytesPKvmm+0xf0>  // b.none
  74:	ldr	x0, [sp, #96]
  78:	bl	0 <_ZSt11_Hash_bytesPKvmm>
  7c:	mov	x1, x0
  80:	mov	x0, #0xe995                	// #59797
  84:	movk	x0, #0x5bd1, lsl #16
  88:	movk	x0, #0xa793, lsl #32
  8c:	movk	x0, #0xc6a4, lsl #48
  90:	mul	x0, x1, x0
  94:	bl	0 <_ZSt11_Hash_bytesPKvmm>
  98:	mov	x1, x0
  9c:	mov	x0, #0xe995                	// #59797
  a0:	movk	x0, #0x5bd1, lsl #16
  a4:	movk	x0, #0xa793, lsl #32
  a8:	movk	x0, #0xc6a4, lsl #48
  ac:	mul	x0, x1, x0
  b0:	str	x0, [sp, #64]
  b4:	ldr	x1, [sp, #104]
  b8:	ldr	x0, [sp, #64]
  bc:	eor	x0, x1, x0
  c0:	str	x0, [sp, #104]
  c4:	ldr	x1, [sp, #104]
  c8:	mov	x0, #0xe995                	// #59797
  cc:	movk	x0, #0x5bd1, lsl #16
  d0:	movk	x0, #0xa793, lsl #32
  d4:	movk	x0, #0xc6a4, lsl #48
  d8:	mul	x0, x1, x0
  dc:	str	x0, [sp, #104]
  e0:	ldr	x0, [sp, #96]
  e4:	add	x0, x0, #0x8
  e8:	str	x0, [sp, #96]
  ec:	b	64 <_ZSt11_Hash_bytesPKvmm+0x64>
  f0:	ldr	x0, [sp, #32]
  f4:	and	x0, x0, #0x7
  f8:	cmp	x0, #0x0
  fc:	b.eq	144 <_ZSt11_Hash_bytesPKvmm+0x144>  // b.none
 100:	ldr	x0, [sp, #32]
 104:	and	w0, w0, #0x7
 108:	mov	w1, w0
 10c:	ldr	x0, [sp, #72]
 110:	bl	0 <_ZSt11_Hash_bytesPKvmm>
 114:	str	x0, [sp, #56]
 118:	ldr	x1, [sp, #104]
 11c:	ldr	x0, [sp, #56]
 120:	eor	x0, x1, x0
 124:	str	x0, [sp, #104]
 128:	ldr	x1, [sp, #104]
 12c:	mov	x0, #0xe995                	// #59797
 130:	movk	x0, #0x5bd1, lsl #16
 134:	movk	x0, #0xa793, lsl #32
 138:	movk	x0, #0xc6a4, lsl #48
 13c:	mul	x0, x1, x0
 140:	str	x0, [sp, #104]
 144:	ldr	x0, [sp, #104]
 148:	bl	0 <_ZSt11_Hash_bytesPKvmm>
 14c:	mov	x1, x0
 150:	mov	x0, #0xe995                	// #59797
 154:	movk	x0, #0x5bd1, lsl #16
 158:	movk	x0, #0xa793, lsl #32
 15c:	movk	x0, #0xc6a4, lsl #48
 160:	mul	x0, x1, x0
 164:	str	x0, [sp, #104]
 168:	ldr	x0, [sp, #104]
 16c:	bl	0 <_ZSt11_Hash_bytesPKvmm>
 170:	str	x0, [sp, #104]
 174:	ldr	x0, [sp, #104]
 178:	ldp	x29, x30, [sp], #112
 17c:	ret

Disassembly of section .text._ZSt15_Fnv_hash_bytesPKvmm:

0000000000000000 <_ZSt15_Fnv_hash_bytesPKvmm>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	ldr	x0, [sp, #24]
  14:	str	x0, [sp, #40]
  18:	ldr	x0, [sp, #16]
  1c:	cmp	x0, #0x0
  20:	b.eq	68 <_ZSt15_Fnv_hash_bytesPKvmm+0x68>  // b.none
  24:	ldr	x0, [sp, #40]
  28:	add	x1, x0, #0x1
  2c:	str	x1, [sp, #40]
  30:	ldrb	w0, [x0]
  34:	and	x0, x0, #0xff
  38:	ldr	x1, [sp, #8]
  3c:	eor	x0, x1, x0
  40:	str	x0, [sp, #8]
  44:	ldr	x1, [sp, #8]
  48:	mov	x0, #0x1b3                 	// #435
  4c:	movk	x0, #0x100, lsl #32
  50:	mul	x0, x1, x0
  54:	str	x0, [sp, #8]
  58:	ldr	x0, [sp, #16]
  5c:	sub	x0, x0, #0x1
  60:	str	x0, [sp, #16]
  64:	b	18 <_ZSt15_Fnv_hash_bytesPKvmm+0x18>
  68:	ldr	x0, [sp, #8]
  6c:	add	sp, sp, #0x30
  70:	ret

nested_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt16nested_exceptionD2Ev:

0000000000000000 <_ZNSt16nested_exceptionD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZNSt16nested_exceptionD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	add	x0, x0, #0x8
  28:	bl	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>
  2c:	nop
  30:	ldp	x29, x30, [sp], #32
  34:	ret

Disassembly of section .text._ZNSt16nested_exceptionD0Ev:

0000000000000000 <_ZNSt16nested_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt16nested_exceptionD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

new_handler.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt15set_new_handlerPFvvE:

0000000000000000 <_ZSt15set_new_handlerPFvvE>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	mov	x2, x0
  10:	adrp	x0, 0 <_ZSt15set_new_handlerPFvvE>
  14:	add	x0, x0, #0x0
  18:	ldaxr	x1, [x0]
  1c:	stlxr	w3, x2, [x0]
  20:	cbnz	w3, 18 <_ZSt15set_new_handlerPFvvE+0x18>
  24:	mov	x0, x1
  28:	str	x0, [sp, #24]
  2c:	ldr	x0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

Disassembly of section .text._ZSt15get_new_handlerv:

0000000000000000 <_ZSt15get_new_handlerv>:
   0:	sub	sp, sp, #0x10
   4:	adrp	x0, 0 <_ZSt15get_new_handlerv>
   8:	add	x0, x0, #0x0
   c:	ldar	x0, [x0]
  10:	str	x0, [sp, #8]
  14:	ldr	x0, [sp, #8]
  18:	add	sp, sp, #0x10
  1c:	ret

new_op.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt9bad_allocC2Ev:

0000000000000000 <_ZNSt9bad_allocC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9bad_allocC1Ev>
  14:	adrp	x0, 0 <_ZTVSt9bad_alloc>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._Znwm:

0000000000000000 <_Znwm>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	ldr	x0, [sp, #40]
  14:	cmp	x0, #0x0
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	and	x0, x0, #0xff
  24:	cmp	x0, #0x0
  28:	b.eq	34 <_Znwm+0x34>  // b.none
  2c:	mov	x0, #0x1                   	// #1
  30:	str	x0, [sp, #40]
  34:	ldr	x0, [sp, #40]
  38:	bl	0 <malloc>
  3c:	str	x0, [sp, #56]
  40:	ldr	x0, [sp, #56]
  44:	cmp	x0, #0x0
  48:	cset	w0, eq  // eq = none
  4c:	and	w0, w0, #0xff
  50:	cmp	w0, #0x0
  54:	b.eq	a4 <_Znwm+0xa4>  // b.none
  58:	bl	0 <_ZSt15get_new_handlerv>
  5c:	str	x0, [sp, #48]
  60:	ldr	x0, [sp, #48]
  64:	cmp	x0, #0x0
  68:	b.ne	98 <_Znwm+0x98>  // b.any
  6c:	mov	x0, #0x8                   	// #8
  70:	bl	0 <__cxa_allocate_exception>
  74:	mov	x19, x0
  78:	mov	x0, x19
  7c:	bl	0 <_Znwm>
  80:	adrp	x0, 0 <_ZNSt9bad_allocD1Ev>
  84:	ldr	x2, [x0]
  88:	adrp	x0, 0 <_ZTISt9bad_alloc>
  8c:	ldr	x1, [x0]
  90:	mov	x0, x19
  94:	bl	0 <__cxa_throw>
  98:	ldr	x0, [sp, #48]
  9c:	blr	x0
  a0:	b	34 <_Znwm+0x34>
  a4:	ldr	x0, [sp, #56]
  a8:	ldr	x19, [sp, #16]
  ac:	ldp	x29, x30, [sp], #64
  b0:	ret

new_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmRKSt9nothrow_t:

0000000000000000 <_ZnwmRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	str	x1, [sp, #32]
  14:	ldr	x0, [sp, #40]
  18:	bl	0 <_Znwm>
  1c:	mov	x19, x0
  20:	nop
  24:	mov	x0, x19
  28:	b	3c <_ZnwmRKSt9nothrow_t+0x3c>
  2c:	bl	0 <__cxa_begin_catch>
  30:	mov	x19, #0x0                   	// #0
  34:	bl	0 <__cxa_end_catch>
  38:	b	24 <_ZnwmRKSt9nothrow_t+0x24>
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #48
  44:	ret

new_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._Znam:

0000000000000000 <_Znam>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_Znwm>
  14:	ldp	x29, x30, [sp], #32
  18:	ret

new_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamRKSt9nothrow_t:

0000000000000000 <_ZnamRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	str	x1, [sp, #32]
  14:	ldr	x0, [sp, #40]
  18:	bl	0 <_Znam>
  1c:	mov	x19, x0
  20:	nop
  24:	mov	x0, x19
  28:	b	3c <_ZnamRKSt9nothrow_t+0x3c>
  2c:	bl	0 <__cxa_begin_catch>
  30:	mov	x19, #0x0                   	// #0
  34:	bl	0 <__cxa_end_catch>
  38:	b	24 <_ZnamRKSt9nothrow_t+0x24>
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #48
  44:	ret

new_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt9bad_allocC2Ev:

0000000000000000 <_ZNSt9bad_allocC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9bad_allocC1Ev>
  14:	adrp	x0, 0 <_ZTVSt9bad_alloc>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZnwmSt11align_val_t:

0000000000000000 <_ZnwmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	str	x1, [sp, #32]
  14:	ldr	x0, [sp, #32]
  18:	str	x0, [sp, #72]
  1c:	ldr	x0, [sp, #72]
  20:	bl	0 <_ZnwmSt11align_val_t>
  24:	and	w0, w0, #0xff
  28:	eor	w0, w0, #0x1
  2c:	and	w0, w0, #0xff
  30:	and	x0, x0, #0xff
  34:	cmp	x0, #0x0
  38:	cset	w0, ne  // ne = any
  3c:	and	w0, w0, #0xff
  40:	cmp	w0, #0x0
  44:	b.eq	74 <_ZnwmSt11align_val_t+0x74>  // b.none
  48:	mov	x0, #0x8                   	// #8
  4c:	bl	0 <__cxa_allocate_exception>
  50:	mov	x19, x0
  54:	mov	x0, x19
  58:	bl	0 <_ZnwmSt11align_val_t>
  5c:	adrp	x0, 0 <_ZNSt9bad_allocD1Ev>
  60:	ldr	x2, [x0]
  64:	adrp	x0, 0 <_ZTISt9bad_alloc>
  68:	ldr	x1, [x0]
  6c:	mov	x0, x19
  70:	bl	0 <__cxa_throw>
  74:	ldr	x0, [sp, #40]
  78:	cmp	x0, #0x0
  7c:	cset	w0, eq  // eq = none
  80:	and	w0, w0, #0xff
  84:	and	x0, x0, #0xff
  88:	cmp	x0, #0x0
  8c:	b.eq	98 <_ZnwmSt11align_val_t+0x98>  // b.none
  90:	mov	x0, #0x1                   	// #1
  94:	str	x0, [sp, #40]
  98:	ldr	x1, [sp, #40]
  9c:	ldr	x0, [sp, #72]
  a0:	add	x0, x1, x0
  a4:	sub	x1, x0, #0x1
  a8:	ldr	x0, [sp, #72]
  ac:	neg	x0, x0
  b0:	and	x0, x1, x0
  b4:	str	x0, [sp, #40]
  b8:	ldr	x1, [sp, #40]
  bc:	ldr	x0, [sp, #72]
  c0:	bl	0 <aligned_alloc>
  c4:	str	x0, [sp, #64]
  c8:	ldr	x0, [sp, #64]
  cc:	cmp	x0, #0x0
  d0:	cset	w0, eq  // eq = none
  d4:	and	w0, w0, #0xff
  d8:	cmp	w0, #0x0
  dc:	b.eq	12c <_ZnwmSt11align_val_t+0x12c>  // b.none
  e0:	bl	0 <_ZSt15get_new_handlerv>
  e4:	str	x0, [sp, #56]
  e8:	ldr	x0, [sp, #56]
  ec:	cmp	x0, #0x0
  f0:	b.ne	120 <_ZnwmSt11align_val_t+0x120>  // b.any
  f4:	mov	x0, #0x8                   	// #8
  f8:	bl	0 <__cxa_allocate_exception>
  fc:	mov	x19, x0
 100:	mov	x0, x19
 104:	bl	0 <_ZnwmSt11align_val_t>
 108:	adrp	x0, 0 <_ZNSt9bad_allocD1Ev>
 10c:	ldr	x2, [x0]
 110:	adrp	x0, 0 <_ZTISt9bad_alloc>
 114:	ldr	x1, [x0]
 118:	mov	x0, x19
 11c:	bl	0 <__cxa_throw>
 120:	ldr	x0, [sp, #56]
 124:	blr	x0
 128:	b	b8 <_ZnwmSt11align_val_t+0xb8>
 12c:	ldr	x0, [sp, #64]
 130:	ldr	x19, [sp, #16]
 134:	ldp	x29, x30, [sp], #80
 138:	ret

Disassembly of section .text._ZSt10__popcountImEiT_:

0000000000000000 <_ZSt10__popcountImEiT_>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	mov	w0, #0x40                  	// #64
   c:	str	w0, [sp, #28]
  10:	ldr	x0, [sp, #8]
  14:	cmp	x0, #0x0
  18:	b.ne	24 <_ZSt10__popcountImEiT_+0x24>  // b.any
  1c:	mov	w0, #0x0                   	// #0
  20:	b	54 <_ZSt10__popcountImEiT_+0x54>
  24:	mov	w0, #0x40                  	// #64
  28:	str	w0, [sp, #24]
  2c:	mov	w0, #0x40                  	// #64
  30:	str	w0, [sp, #20]
  34:	mov	w0, #0x20                  	// #32
  38:	str	w0, [sp, #16]
  3c:	ldr	d0, [sp, #8]
  40:	cnt	v0.8b, v0.8b
  44:	addv	b0, v0.8b
  48:	umov	w0, v0.b[0]
  4c:	and	x0, x0, #0xff
  50:	nop
  54:	add	sp, sp, #0x20
  58:	ret

Disassembly of section .text._ZSt8__ispow2ImEbT_:

0000000000000000 <_ZSt8__ispow2ImEbT_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZSt8__ispow2ImEbT_>
  14:	cmp	w0, #0x1
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	ldp	x29, x30, [sp], #32
  24:	ret

new_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #56]
  10:	str	x1, [sp, #48]
  14:	str	x2, [sp, #40]
  18:	ldr	x1, [sp, #48]
  1c:	ldr	x0, [sp, #56]
  20:	bl	0 <_ZnwmSt11align_val_t>
  24:	mov	x19, x0
  28:	nop
  2c:	mov	x0, x19
  30:	b	44 <_ZnwmSt11align_val_tRKSt9nothrow_t+0x44>
  34:	bl	0 <__cxa_begin_catch>
  38:	mov	x19, #0x0                   	// #0
  3c:	bl	0 <__cxa_end_catch>
  40:	b	2c <_ZnwmSt11align_val_tRKSt9nothrow_t+0x2c>
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret

new_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_t:

0000000000000000 <_ZnamSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	bl	0 <_ZnwmSt11align_val_t>
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

new_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnamSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #56]
  10:	str	x1, [sp, #48]
  14:	str	x2, [sp, #40]
  18:	ldr	x1, [sp, #48]
  1c:	ldr	x0, [sp, #56]
  20:	bl	0 <_ZnamSt11align_val_t>
  24:	mov	x19, x0
  28:	nop
  2c:	mov	x0, x19
  30:	b	44 <_ZnamSt11align_val_tRKSt9nothrow_t+0x44>
  34:	bl	0 <__cxa_begin_catch>
  38:	mov	x19, #0x0                   	// #0
  3c:	bl	0 <__cxa_end_catch>
  40:	b	2c <_ZnamSt11align_val_tRKSt9nothrow_t+0x2c>
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret

del_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_t:

0000000000000000 <_ZdlPvSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	bl	0 <free>
  18:	nop
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

del_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x1, [sp, #32]
  18:	ldr	x0, [sp, #40]
  1c:	bl	0 <_ZdlPvSt11align_val_t>
  20:	nop
  24:	ldp	x29, x30, [sp], #48
  28:	ret

del_opsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvmSt11align_val_t:

0000000000000000 <_ZdlPvmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x1, [sp, #24]
  18:	ldr	x0, [sp, #40]
  1c:	bl	0 <_ZdlPvSt11align_val_t>
  20:	nop
  24:	ldp	x29, x30, [sp], #48
  28:	ret

del_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_t:

0000000000000000 <_ZdaPvSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	bl	0 <_ZdlPvSt11align_val_t>
  1c:	nop
  20:	ldp	x29, x30, [sp], #32
  24:	ret

del_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x1, [sp, #32]
  18:	ldr	x0, [sp, #40]
  1c:	bl	0 <_ZdaPvSt11align_val_t>
  20:	nop
  24:	ldp	x29, x30, [sp], #48
  28:	ret

del_opvsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvmSt11align_val_t:

0000000000000000 <_ZdaPvmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x1, [sp, #24]
  18:	ldr	x0, [sp, #40]
  1c:	bl	0 <_ZdaPvSt11align_val_t>
  20:	nop
  24:	ldp	x29, x30, [sp], #48
  28:	ret

pbase_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZNKSt9type_infoneERKS_:

0000000000000000 <_ZNKSt9type_infoneERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	bl	0 <_ZNKSt9type_infoneERKS_>
  1c:	and	w0, w0, #0xff
  20:	eor	w0, w0, #0x1
  24:	and	w0, w0, #0xff
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x5, [x0, #24]
  20:	ldr	x0, [sp, #40]
  24:	ldr	x0, [x0, #24]
  28:	ldr	x0, [x0]
  2c:	add	x0, x0, #0x20
  30:	ldr	x4, [x0]
  34:	ldr	x0, [sp, #32]
  38:	ldr	x1, [x0, #24]
  3c:	ldr	w0, [sp, #20]
  40:	add	w0, w0, #0x2
  44:	mov	w3, w0
  48:	ldr	x2, [sp, #24]
  4c:	mov	x0, x5
  50:	blr	x4
  54:	and	w0, w0, #0xff
  58:	ldp	x29, x30, [sp], #48
  5c:	ret

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZNSt9type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>
  14:	mov	x1, #0x20                  	// #32
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x1, [sp, #32]
  20:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  24:	and	w0, w0, #0xff
  28:	cmp	w0, #0x0
  2c:	b.eq	38 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x38>  // b.none
  30:	mov	w0, #0x1                   	// #1
  34:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
  38:	adrp	x0, 0 <_ZTIDn>
  3c:	ldr	x1, [x0]
  40:	ldr	x0, [sp, #32]
  44:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  48:	and	w0, w0, #0xff
  4c:	cmp	w0, #0x0
  50:	b.eq	11c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x11c>  // b.none
  54:	ldr	x0, [sp, #40]
  58:	ldr	x0, [x0]
  5c:	sub	x0, x0, #0x8
  60:	ldr	x2, [x0]
  64:	adrp	x0, 0 <_ZTIN10__cxxabiv119__pointer_type_infoE>
  68:	ldr	x1, [x0]
  6c:	mov	x0, x2
  70:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  74:	and	w0, w0, #0xff
  78:	cmp	w0, #0x0
  7c:	b.eq	90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x90>  // b.none
  80:	ldr	x0, [sp, #24]
  84:	str	xzr, [x0]
  88:	mov	w0, #0x1                   	// #1
  8c:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
  90:	ldr	x0, [sp, #40]
  94:	ldr	x0, [x0]
  98:	sub	x0, x0, #0x8
  9c:	ldr	x2, [x0]
  a0:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
  a4:	ldr	x1, [x0]
  a8:	mov	x0, x2
  ac:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  b0:	and	w0, w0, #0xff
  b4:	cmp	w0, #0x0
  b8:	b.eq	11c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x11c>  // b.none
  bc:	ldr	x0, [sp, #40]
  c0:	ldr	x2, [x0, #24]
  c4:	ldr	x0, [sp, #40]
  c8:	ldr	x0, [x0, #24]
  cc:	ldr	x0, [x0]
  d0:	add	x0, x0, #0x18
  d4:	ldr	x1, [x0]
  d8:	mov	x0, x2
  dc:	blr	x1
  e0:	and	w0, w0, #0xff
  e4:	cmp	w0, #0x0
  e8:	b.eq	104 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x104>  // b.none
  ec:	ldr	x0, [sp, #24]
  f0:	adrp	x1, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  f4:	add	x1, x1, #0x0
  f8:	str	x1, [x0]
  fc:	mov	w0, #0x1                   	// #1
 100:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
 104:	ldr	x0, [sp, #24]
 108:	adrp	x1, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 10c:	add	x1, x1, #0x0
 110:	str	x1, [x0]
 114:	mov	w0, #0x1                   	// #1
 118:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
 11c:	ldr	x0, [sp, #40]
 120:	ldr	x0, [x0]
 124:	sub	x0, x0, #0x8
 128:	ldr	x2, [x0]
 12c:	ldr	x0, [sp, #32]
 130:	cmp	x0, #0x0
 134:	b.eq	15c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x15c>  // b.none
 138:	ldr	x0, [x0]
 13c:	ldur	x0, [x0, #-8]
 140:	mov	x1, x0
 144:	mov	x0, x2
 148:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 14c:	and	w0, w0, #0xff
 150:	cmp	w0, #0x0
 154:	b.eq	168 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x168>  // b.none
 158:	b	160 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x160>
 15c:	bl	0 <__cxa_bad_typeid>
 160:	mov	w0, #0x0                   	// #0
 164:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
 168:	ldr	w0, [sp, #20]
 16c:	and	w0, w0, #0x1
 170:	cmp	w0, #0x0
 174:	b.ne	180 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x180>  // b.any
 178:	mov	w0, #0x0                   	// #0
 17c:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
 180:	ldr	x0, [sp, #32]
 184:	str	x0, [sp, #64]
 188:	ldr	x0, [sp, #64]
 18c:	ldr	w0, [x0, #16]
 190:	str	w0, [sp, #76]
 194:	mov	w0, #0x60                  	// #96
 198:	str	w0, [sp, #60]
 19c:	ldr	w0, [sp, #76]
 1a0:	and	w0, w0, #0x60
 1a4:	str	w0, [sp, #56]
 1a8:	ldr	x0, [sp, #40]
 1ac:	ldr	w0, [x0, #16]
 1b0:	and	w0, w0, #0x60
 1b4:	str	w0, [sp, #52]
 1b8:	ldr	w0, [sp, #52]
 1bc:	mvn	w1, w0
 1c0:	ldr	w0, [sp, #56]
 1c4:	and	w0, w1, w0
 1c8:	cmp	w0, #0x0
 1cc:	b.eq	1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>  // b.none
 1d0:	ldr	w1, [sp, #76]
 1d4:	ldr	w0, [sp, #52]
 1d8:	and	w0, w1, w0
 1dc:	str	w0, [sp, #76]
 1e0:	ldr	w0, [sp, #56]
 1e4:	mvn	w1, w0
 1e8:	ldr	w0, [sp, #52]
 1ec:	and	w0, w1, w0
 1f0:	cmp	w0, #0x0
 1f4:	b.eq	200 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x200>  // b.none
 1f8:	mov	w0, #0x0                   	// #0
 1fc:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
 200:	ldr	x0, [sp, #40]
 204:	ldr	w0, [x0, #16]
 208:	mvn	w1, w0
 20c:	ldr	w0, [sp, #76]
 210:	and	w0, w1, w0
 214:	cmp	w0, #0x0
 218:	b.eq	224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>  // b.none
 21c:	mov	w0, #0x0                   	// #0
 220:	b	270 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x270>
 224:	ldr	x0, [sp, #40]
 228:	ldr	w0, [x0, #16]
 22c:	and	w0, w0, #0x1
 230:	cmp	w0, #0x0
 234:	b.ne	244 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x244>  // b.any
 238:	ldr	w0, [sp, #20]
 23c:	and	w0, w0, #0xfffffffe
 240:	str	w0, [sp, #20]
 244:	ldr	x0, [sp, #40]
 248:	ldr	x0, [x0]
 24c:	add	x0, x0, #0x30
 250:	ldr	x4, [x0]
 254:	ldr	w3, [sp, #20]
 258:	ldr	x2, [sp, #24]
 25c:	ldr	x1, [sp, #64]
 260:	ldr	x0, [sp, #40]
 264:	blr	x4
 268:	and	w0, w0, #0xff
 26c:	nop
 270:	ldp	x29, x30, [sp], #80
 274:	ret

pmem_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZNKSt9type_infoneERKS_:

0000000000000000 <_ZNKSt9type_infoneERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	bl	0 <_ZNKSt9type_infoneERKS_>
  1c:	and	w0, w0, #0xff
  20:	eor	w0, w0, #0x1
  24:	and	w0, w0, #0xff
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x5, [x0, #24]
  20:	ldr	x0, [sp, #40]
  24:	ldr	x0, [x0, #24]
  28:	ldr	x0, [x0]
  2c:	add	x0, x0, #0x20
  30:	ldr	x4, [x0]
  34:	ldr	x0, [sp, #32]
  38:	ldr	x1, [x0, #24]
  3c:	ldr	w0, [sp, #20]
  40:	add	w0, w0, #0x2
  44:	mov	w3, w0
  48:	ldr	x2, [sp, #24]
  4c:	mov	x0, x5
  50:	blr	x4
  54:	and	w0, w0, #0xff
  58:	ldp	x29, x30, [sp], #48
  5c:	ret

Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>
  14:	mov	x1, #0x28                  	// #40
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #32]
  1c:	str	x0, [sp, #56]
  20:	ldr	x0, [sp, #40]
  24:	ldr	x0, [x0, #32]
  28:	mov	x2, x0
  2c:	ldr	x0, [sp, #56]
  30:	ldr	x0, [x0, #32]
  34:	mov	x1, x0
  38:	mov	x0, x2
  3c:	bl	0 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>
  40:	and	w0, w0, #0xff
  44:	cmp	w0, #0x0
  48:	b.eq	54 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x54>  // b.none
  4c:	mov	w0, #0x0                   	// #0
  50:	b	70 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x70>
  54:	ldr	x0, [sp, #40]
  58:	ldr	w3, [sp, #20]
  5c:	ldr	x2, [sp, #24]
  60:	ldr	x1, [sp, #56]
  64:	bl	0 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>
  68:	and	w0, w0, #0xff
  6c:	nop
  70:	ldp	x29, x30, [sp], #64
  74:	ret

pointer_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x5, [x0, #24]
  20:	ldr	x0, [sp, #40]
  24:	ldr	x0, [x0, #24]
  28:	ldr	x0, [x0]
  2c:	add	x0, x0, #0x20
  30:	ldr	x4, [x0]
  34:	ldr	x0, [sp, #32]
  38:	ldr	x1, [x0, #24]
  3c:	ldr	w0, [sp, #20]
  40:	add	w0, w0, #0x2
  44:	mov	w3, w0
  48:	ldr	x2, [sp, #24]
  4c:	mov	x0, x5
  50:	blr	x4
  54:	and	w0, w0, #0xff
  58:	ldp	x29, x30, [sp], #48
  5c:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>
  14:	mov	x1, #0x20                  	// #32
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	mov	w0, #0x1                   	// #1
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	w0, [sp, #20]
  1c:	cmp	w0, #0x1
  20:	b.hi	50 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x50>  // b.pmore
  24:	ldr	x0, [sp, #40]
  28:	ldr	x2, [x0, #24]
  2c:	adrp	x0, 0 <_ZTIv>
  30:	ldr	x1, [x0]
  34:	mov	x0, x2
  38:	bl	0 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>
  3c:	and	w0, w0, #0xff
  40:	cmp	w0, #0x0
  44:	b.eq	50 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x50>  // b.none
  48:	mov	w0, #0x1                   	// #1
  4c:	b	54 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x54>
  50:	mov	w0, #0x0                   	// #0
  54:	cmp	w0, #0x0
  58:	b.eq	90 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x90>  // b.none
  5c:	ldr	x0, [sp, #32]
  60:	ldr	x2, [x0, #24]
  64:	ldr	x0, [sp, #32]
  68:	ldr	x0, [x0, #24]
  6c:	ldr	x0, [x0]
  70:	add	x0, x0, #0x18
  74:	ldr	x1, [x0]
  78:	mov	x0, x2
  7c:	blr	x1
  80:	and	w0, w0, #0xff
  84:	eor	w0, w0, #0x1
  88:	and	w0, w0, #0xff
  8c:	b	ac <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xac>
  90:	ldr	x0, [sp, #40]
  94:	ldr	w3, [sp, #20]
  98:	ldr	x2, [sp, #24]
  9c:	ldr	x1, [sp, #32]
  a0:	bl	0 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>
  a4:	and	w0, w0, #0xff
  a8:	nop
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret

pure.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_pure_virtual:

0000000000000000 <__cxa_pure_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x2, #0x1b                  	// #27
   c:	adrp	x0, 0 <__cxa_pure_virtual>
  10:	add	x1, x0, #0x0
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_deleted_virtual:

0000000000000000 <__cxa_deleted_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x2, #0x1e                  	// #30
   c:	adrp	x0, 0 <__cxa_deleted_virtual>
  10:	add	x1, x0, #0x0
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

si_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>
  14:	mov	x1, #0x18                  	// #24
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	x4, [sp, #24]
  1c:	ldr	x1, [sp, #24]
  20:	ldr	x0, [sp, #40]
  24:	cmp	x1, x0
  28:	b.ne	4c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x4c>  // b.any
  2c:	ldr	x0, [sp, #56]
  30:	ldr	x1, [sp, #32]
  34:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
  38:	and	w0, w0, #0xff
  3c:	cmp	w0, #0x0
  40:	b.eq	4c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x4c>  // b.none
  44:	mov	w0, #0x1                   	// #1
  48:	b	50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x50>
  4c:	mov	w0, #0x0                   	// #0
  50:	cmp	w0, #0x0
  54:	b.eq	60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x60>  // b.none
  58:	mov	w0, #0x6                   	// #6
  5c:	b	98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x98>
  60:	ldr	x0, [sp, #56]
  64:	ldr	x6, [x0, #16]
  68:	ldr	x0, [sp, #56]
  6c:	ldr	x0, [x0, #16]
  70:	ldr	x0, [x0]
  74:	add	x0, x0, #0x40
  78:	ldr	x5, [x0]
  7c:	ldr	x4, [sp, #24]
  80:	ldr	x3, [sp, #32]
  84:	ldr	x2, [sp, #40]
  88:	ldr	x1, [sp, #48]
  8c:	mov	x0, x6
  90:	blr	x5
  94:	nop
  98:	ldp	x29, x30, [sp], #64
  9c:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #72]
   c:	str	x1, [sp, #64]
  10:	str	w2, [sp, #60]
  14:	str	x3, [sp, #48]
  18:	str	x4, [sp, #40]
  1c:	str	x5, [sp, #32]
  20:	str	x6, [sp, #24]
  24:	str	x7, [sp, #16]
  28:	ldr	x0, [sp, #72]
  2c:	ldr	x1, [sp, #48]
  30:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x0
  3c:	b.eq	b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>  // b.none
  40:	ldr	x0, [sp, #16]
  44:	ldr	x1, [sp, #40]
  48:	str	x1, [x0]
  4c:	ldr	x0, [sp, #16]
  50:	ldr	w1, [sp, #60]
  54:	str	w1, [x0, #8]
  58:	ldr	x0, [sp, #64]
  5c:	cmp	x0, #0x0
  60:	b.lt	98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x98>  // b.tstop
  64:	ldr	x1, [sp, #64]
  68:	ldr	x0, [sp, #40]
  6c:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  70:	mov	x1, x0
  74:	ldr	x0, [sp, #24]
  78:	cmp	x0, x1
  7c:	b.ne	88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x88>  // b.any
  80:	mov	w0, #0x6                   	// #6
  84:	b	8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
  88:	mov	w0, #0x1                   	// #1
  8c:	ldr	x1, [sp, #16]
  90:	str	w0, [x1, #16]
  94:	b	b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
  98:	ldr	x0, [sp, #64]
  9c:	cmn	x0, #0x2
  a0:	b.ne	b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>  // b.any
  a4:	ldr	x0, [sp, #16]
  a8:	mov	w1, #0x1                   	// #1
  ac:	str	w1, [x0, #16]
  b0:	mov	w0, #0x0                   	// #0
  b4:	b	150 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
  b8:	ldr	x1, [sp, #40]
  bc:	ldr	x0, [sp, #24]
  c0:	cmp	x1, x0
  c4:	b.ne	e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe8>  // b.any
  c8:	ldr	x0, [sp, #72]
  cc:	ldr	x1, [sp, #32]
  d0:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  d4:	and	w0, w0, #0xff
  d8:	cmp	w0, #0x0
  dc:	b.eq	e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe8>  // b.none
  e0:	mov	w0, #0x1                   	// #1
  e4:	b	ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
  e8:	mov	w0, #0x0                   	// #0
  ec:	cmp	w0, #0x0
  f0:	b.eq	108 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>  // b.none
  f4:	ldr	x0, [sp, #16]
  f8:	ldr	w1, [sp, #60]
  fc:	str	w1, [x0, #12]
 100:	mov	w0, #0x0                   	// #0
 104:	b	150 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 108:	ldr	x0, [sp, #72]
 10c:	ldr	x9, [x0, #16]
 110:	ldr	x0, [sp, #72]
 114:	ldr	x0, [x0, #16]
 118:	ldr	x0, [x0]
 11c:	add	x0, x0, #0x38
 120:	ldr	x8, [x0]
 124:	ldr	x7, [sp, #16]
 128:	ldr	x6, [sp, #24]
 12c:	ldr	x5, [sp, #32]
 130:	ldr	x4, [sp, #40]
 134:	ldr	x3, [sp, #48]
 138:	ldr	w2, [sp, #60]
 13c:	ldr	x1, [sp, #64]
 140:	mov	x0, x9
 144:	blr	x8
 148:	and	w0, w0, #0xff
 14c:	nop
 150:	ldp	x29, x30, [sp], #80
 154:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x3, [sp, #16]
  20:	ldr	x2, [sp, #24]
  24:	ldr	x1, [sp, #32]
  28:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  2c:	and	w0, w0, #0xff
  30:	cmp	w0, #0x0
  34:	b.eq	40 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40>  // b.none
  38:	mov	w0, #0x1                   	// #1
  3c:	b	78 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
  40:	ldr	x0, [sp, #40]
  44:	ldr	x5, [x0, #16]
  48:	ldr	x0, [sp, #40]
  4c:	ldr	x0, [x0, #16]
  50:	ldr	x0, [x0]
  54:	add	x0, x0, #0x30
  58:	ldr	x4, [x0]
  5c:	ldr	x3, [sp, #16]
  60:	ldr	x2, [sp, #24]
  64:	ldr	x1, [sp, #32]
  68:	mov	x0, x5
  6c:	blr	x4
  70:	and	w0, w0, #0xff
  74:	nop
  78:	ldp	x29, x30, [sp], #48
  7c:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIvEEPKT_PKvl:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIvEEPKT_PKvl>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	ldr	x1, [sp, #8]
  14:	add	x0, x1, x0
  18:	add	sp, sp, #0x10
  1c:	ret

tinfo.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZNSt9type_infoD2Ev:

0000000000000000 <_ZNSt9type_infoD1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZNSt9type_infoD1Ev>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt9type_infoD0Ev:

0000000000000000 <_ZNSt9type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNKSt9type_info14__is_pointer_pEv:

0000000000000000 <_ZNKSt9type_info14__is_pointer_pEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	mov	w0, #0x0                   	// #0
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZNKSt9type_info15__is_function_pEv:

0000000000000000 <_ZNKSt9type_info15__is_function_pEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	mov	w0, #0x0                   	// #0
   c:	add	sp, sp, #0x10
  10:	ret

Disassembly of section .text._ZNKSt9type_info10__do_catchEPKS_PPvj:

0000000000000000 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x1, [sp, #32]
  1c:	ldr	x0, [sp, #40]
  20:	bl	0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>
  24:	and	w0, w0, #0xff
  28:	ldp	x29, x30, [sp], #48
  2c:	ret

Disassembly of section .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:

0000000000000000 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	mov	w0, #0x0                   	// #0
  14:	add	sp, sp, #0x20
  18:	ret

tinfo2.o:     file format elf64-littleaarch64


vec.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionC2Ev:

0000000000000000 <_ZNSt9exceptionC1Ev>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <_ZTVSt9exception>
   c:	ldr	x0, [x0]
  10:	add	x1, x0, #0x10
  14:	ldr	x0, [sp, #8]
  18:	str	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNSt9bad_allocC2Ev:

0000000000000000 <_ZNSt9bad_allocC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZNSt9bad_allocC1Ev>
  14:	adrp	x0, 0 <_ZTVSt9bad_alloc>
  18:	ldr	x0, [x0]
  1c:	add	x1, x0, #0x10
  20:	ldr	x0, [sp, #24]
  24:	str	x1, [x0]
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0]
  14:	add	x0, x0, #0x50
  18:	bl	0 <__cxa_begin_catch>
  1c:	nop
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC1Ev>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	str	xzr, [x0]
  14:	bl	0 <__cxa_get_globals_fast>
  18:	str	x0, [sp, #40]
  1c:	ldr	x0, [sp, #40]
  20:	ldr	x1, [x0]
  24:	ldr	x0, [sp, #24]
  28:	str	x1, [x0]
  2c:	ldr	x0, [sp, #24]
  30:	ldr	x0, [x0]
  34:	ldr	w1, [x0, #40]
  38:	ldr	x0, [sp, #24]
  3c:	ldr	x0, [x0]
  40:	sub	w1, w1, #0x1
  44:	str	w1, [x0, #40]
  48:	ldr	x0, [sp, #24]
  4c:	ldr	x0, [x0]
  50:	ldr	x1, [x0, #32]
  54:	ldr	x0, [sp, #40]
  58:	str	x1, [x0]
  5c:	ldr	x0, [sp, #40]
  60:	ldr	w0, [x0, #8]
  64:	add	w1, w0, #0x1
  68:	ldr	x0, [sp, #40]
  6c:	str	w1, [x0, #8]
  70:	nop
  74:	ldp	x29, x30, [sp], #48
  78:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #56]
  10:	str	x1, [sp, #48]
  14:	str	x2, [sp, #40]
  18:	ldr	x0, [sp, #48]
  1c:	cmp	x0, #0x0
  20:	b.eq	78 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x78>  // b.none
  24:	mov	x2, #0x0                   	// #0
  28:	ldr	x1, [sp, #56]
  2c:	ldr	x0, [sp, #48]
  30:	umulh	x0, x1, x0
  34:	cmp	x0, #0x0
  38:	b.eq	40 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x40>  // b.none
  3c:	mov	x2, #0x1                   	// #1
  40:	mov	x0, x2
  44:	cmp	x0, #0x0
  48:	b.eq	78 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x78>  // b.none
  4c:	mov	x0, #0x8                   	// #8
  50:	bl	0 <__cxa_allocate_exception>
  54:	mov	x19, x0
  58:	mov	x0, x19
  5c:	bl	0 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm>
  60:	adrp	x0, 0 <_ZNSt9bad_allocD1Ev>
  64:	ldr	x2, [x0]
  68:	adrp	x0, 0 <_ZTISt9bad_alloc>
  6c:	ldr	x1, [x0]
  70:	mov	x0, x19
  74:	bl	0 <__cxa_throw>
  78:	ldr	x1, [sp, #56]
  7c:	ldr	x0, [sp, #48]
  80:	mul	x0, x1, x0
  84:	str	x0, [sp, #72]
  88:	ldr	x1, [sp, #72]
  8c:	ldr	x0, [sp, #40]
  90:	add	x0, x1, x0
  94:	ldr	x1, [sp, #72]
  98:	cmp	x1, x0
  9c:	b.ls	cc <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0xcc>  // b.plast
  a0:	mov	x0, #0x8                   	// #8
  a4:	bl	0 <__cxa_allocate_exception>
  a8:	mov	x19, x0
  ac:	mov	x0, x19
  b0:	bl	0 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm>
  b4:	adrp	x0, 0 <_ZNSt9bad_allocD1Ev>
  b8:	ldr	x2, [x0]
  bc:	adrp	x0, 0 <_ZTISt9bad_alloc>
  c0:	ldr	x1, [x0]
  c4:	mov	x0, x19
  c8:	bl	0 <__cxa_throw>
  cc:	ldr	x1, [sp, #72]
  d0:	ldr	x0, [sp, #40]
  d4:	add	x0, x1, x0
  d8:	ldr	x19, [sp, #16]
  dc:	ldp	x29, x30, [sp], #80
  e0:	ret

Disassembly of section .text.__cxa_vec_new:

0000000000000000 <__cxa_vec_new>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	x4, [sp, #24]
  1c:	adrp	x0, 0 <_ZdaPv>
  20:	ldr	x6, [x0]
  24:	adrp	x0, 0 <_Znam>
  28:	ldr	x5, [x0]
  2c:	ldr	x4, [sp, #24]
  30:	ldr	x3, [sp, #32]
  34:	ldr	x2, [sp, #40]
  38:	ldr	x1, [sp, #48]
  3c:	ldr	x0, [sp, #56]
  40:	bl	0 <__cxa_vec_new>
  44:	ldp	x29, x30, [sp], #64
  48:	ret

Disassembly of section .text.__cxa_vec_new2:

0000000000000000 <__cxa_vec_new2>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #88]
  10:	str	x1, [sp, #80]
  14:	str	x2, [sp, #72]
  18:	str	x3, [sp, #64]
  1c:	str	x4, [sp, #56]
  20:	str	x5, [sp, #48]
  24:	str	x6, [sp, #40]
  28:	ldr	x2, [sp, #72]
  2c:	ldr	x1, [sp, #80]
  30:	ldr	x0, [sp, #88]
  34:	bl	0 <__cxa_vec_new2>
  38:	str	x0, [sp, #112]
  3c:	ldr	x1, [sp, #48]
  40:	ldr	x0, [sp, #112]
  44:	blr	x1
  48:	str	x0, [sp, #120]
  4c:	ldr	x0, [sp, #120]
  50:	cmp	x0, #0x0
  54:	b.ne	60 <__cxa_vec_new2+0x60>  // b.any
  58:	ldr	x0, [sp, #120]
  5c:	b	108 <__cxa_vec_new2+0x108>
  60:	ldr	x0, [sp, #72]
  64:	cmp	x0, #0x0
  68:	b.eq	8c <__cxa_vec_new2+0x8c>  // b.none
  6c:	ldr	x1, [sp, #120]
  70:	ldr	x0, [sp, #72]
  74:	add	x0, x1, x0
  78:	str	x0, [sp, #120]
  7c:	ldr	x0, [sp, #120]
  80:	sub	x0, x0, #0x8
  84:	ldr	x1, [sp, #88]
  88:	str	x1, [x0]
  8c:	ldr	x4, [sp, #56]
  90:	ldr	x3, [sp, #64]
  94:	ldr	x2, [sp, #80]
  98:	ldr	x1, [sp, #88]
  9c:	ldr	x0, [sp, #120]
  a0:	bl	0 <__cxa_vec_new2>
  a4:	ldr	x0, [sp, #120]
  a8:	b	108 <__cxa_vec_new2+0x108>
  ac:	bl	0 <__cxa_begin_catch>
  b0:	add	x0, sp, #0x68
  b4:	bl	0 <__cxa_vec_new2>
  b8:	ldr	x0, [sp, #40]
  bc:	cmp	x0, #0x0
  c0:	b.eq	dc <__cxa_vec_new2+0xdc>  // b.none
  c4:	ldr	x0, [sp, #72]
  c8:	neg	x0, x0
  cc:	ldr	x1, [sp, #120]
  d0:	add	x0, x1, x0
  d4:	ldr	x1, [sp, #40]
  d8:	blr	x1
  dc:	add	x0, sp, #0x68
  e0:	bl	0 <__cxa_vec_new2>
  e4:	bl	0 <__cxa_rethrow>
  e8:	mov	x19, x0
  ec:	add	x0, sp, #0x68
  f0:	bl	0 <__cxa_vec_new2>
  f4:	b	fc <__cxa_vec_new2+0xfc>
  f8:	mov	x19, x0
  fc:	bl	0 <__cxa_end_catch>
 100:	mov	x0, x19
 104:	bl	0 <_Unwind_Resume>
 108:	ldr	x19, [sp, #16]
 10c:	ldp	x29, x30, [sp], #128
 110:	ret

Disassembly of section .text.__cxa_vec_new3:

0000000000000000 <__cxa_vec_new3>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #88]
  10:	str	x1, [sp, #80]
  14:	str	x2, [sp, #72]
  18:	str	x3, [sp, #64]
  1c:	str	x4, [sp, #56]
  20:	str	x5, [sp, #48]
  24:	str	x6, [sp, #40]
  28:	ldr	x2, [sp, #72]
  2c:	ldr	x1, [sp, #80]
  30:	ldr	x0, [sp, #88]
  34:	bl	0 <__cxa_vec_new3>
  38:	str	x0, [sp, #112]
  3c:	ldr	x1, [sp, #48]
  40:	ldr	x0, [sp, #112]
  44:	blr	x1
  48:	str	x0, [sp, #120]
  4c:	ldr	x0, [sp, #120]
  50:	cmp	x0, #0x0
  54:	b.ne	60 <__cxa_vec_new3+0x60>  // b.any
  58:	ldr	x0, [sp, #120]
  5c:	b	10c <__cxa_vec_new3+0x10c>
  60:	ldr	x0, [sp, #72]
  64:	cmp	x0, #0x0
  68:	b.eq	8c <__cxa_vec_new3+0x8c>  // b.none
  6c:	ldr	x1, [sp, #120]
  70:	ldr	x0, [sp, #72]
  74:	add	x0, x1, x0
  78:	str	x0, [sp, #120]
  7c:	ldr	x0, [sp, #120]
  80:	sub	x0, x0, #0x8
  84:	ldr	x1, [sp, #88]
  88:	str	x1, [x0]
  8c:	ldr	x4, [sp, #56]
  90:	ldr	x3, [sp, #64]
  94:	ldr	x2, [sp, #80]
  98:	ldr	x1, [sp, #88]
  9c:	ldr	x0, [sp, #120]
  a0:	bl	0 <__cxa_vec_new3>
  a4:	ldr	x0, [sp, #120]
  a8:	b	10c <__cxa_vec_new3+0x10c>
  ac:	bl	0 <__cxa_begin_catch>
  b0:	add	x0, sp, #0x68
  b4:	bl	0 <__cxa_vec_new3>
  b8:	ldr	x0, [sp, #40]
  bc:	cmp	x0, #0x0
  c0:	b.eq	e0 <__cxa_vec_new3+0xe0>  // b.none
  c4:	ldr	x0, [sp, #72]
  c8:	neg	x0, x0
  cc:	ldr	x1, [sp, #120]
  d0:	add	x0, x1, x0
  d4:	ldr	x2, [sp, #40]
  d8:	ldr	x1, [sp, #112]
  dc:	blr	x2
  e0:	add	x0, sp, #0x68
  e4:	bl	0 <__cxa_vec_new3>
  e8:	bl	0 <__cxa_rethrow>
  ec:	mov	x19, x0
  f0:	add	x0, sp, #0x68
  f4:	bl	0 <__cxa_vec_new3>
  f8:	b	100 <__cxa_vec_new3+0x100>
  fc:	mov	x19, x0
 100:	bl	0 <__cxa_end_catch>
 104:	mov	x0, x19
 108:	bl	0 <_Unwind_Resume>
 10c:	ldr	x19, [sp, #16]
 110:	ldp	x29, x30, [sp], #128
 114:	ret

Disassembly of section .text.__cxa_vec_ctor:

0000000000000000 <__cxa_vec_ctor>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #72]
  10:	str	x1, [sp, #64]
  14:	str	x2, [sp, #56]
  18:	str	x3, [sp, #48]
  1c:	str	x4, [sp, #40]
  20:	str	xzr, [sp, #104]
  24:	ldr	x0, [sp, #72]
  28:	str	x0, [sp, #96]
  2c:	ldr	x0, [sp, #48]
  30:	cmp	x0, #0x0
  34:	b.eq	b0 <__cxa_vec_ctor+0xb0>  // b.none
  38:	ldr	x1, [sp, #104]
  3c:	ldr	x0, [sp, #64]
  40:	cmp	x1, x0
  44:	b.eq	b0 <__cxa_vec_ctor+0xb0>  // b.none
  48:	ldr	x1, [sp, #48]
  4c:	ldr	x0, [sp, #96]
  50:	blr	x1
  54:	ldr	x0, [sp, #104]
  58:	add	x0, x0, #0x1
  5c:	str	x0, [sp, #104]
  60:	ldr	x1, [sp, #96]
  64:	ldr	x0, [sp, #56]
  68:	add	x0, x1, x0
  6c:	str	x0, [sp, #96]
  70:	b	38 <__cxa_vec_ctor+0x38>
  74:	bl	0 <__cxa_begin_catch>
  78:	add	x0, sp, #0x58
  7c:	bl	0 <__cxa_vec_ctor>
  80:	ldr	x3, [sp, #40]
  84:	ldr	x2, [sp, #56]
  88:	ldr	x1, [sp, #104]
  8c:	ldr	x0, [sp, #72]
  90:	bl	0 <__cxa_vec_ctor>
  94:	add	x0, sp, #0x58
  98:	bl	0 <__cxa_vec_ctor>
  9c:	bl	0 <__cxa_rethrow>
  a0:	mov	x19, x0
  a4:	bl	0 <__cxa_end_catch>
  a8:	mov	x0, x19
  ac:	bl	0 <_Unwind_Resume>
  b0:	nop
  b4:	ldr	x19, [sp, #16]
  b8:	ldp	x29, x30, [sp], #112
  bc:	ret

Disassembly of section .text.__cxa_vec_cctor:

0000000000000000 <__cxa_vec_cctor>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #72]
  10:	str	x1, [sp, #64]
  14:	str	x2, [sp, #56]
  18:	str	x3, [sp, #48]
  1c:	str	x4, [sp, #40]
  20:	str	x5, [sp, #32]
  24:	str	xzr, [sp, #104]
  28:	ldr	x0, [sp, #72]
  2c:	str	x0, [sp, #96]
  30:	ldr	x0, [sp, #64]
  34:	str	x0, [sp, #88]
  38:	ldr	x0, [sp, #40]
  3c:	cmp	x0, #0x0
  40:	b.eq	d0 <__cxa_vec_cctor+0xd0>  // b.none
  44:	ldr	x1, [sp, #104]
  48:	ldr	x0, [sp, #56]
  4c:	cmp	x1, x0
  50:	b.eq	d0 <__cxa_vec_cctor+0xd0>  // b.none
  54:	ldr	x2, [sp, #40]
  58:	ldr	x1, [sp, #88]
  5c:	ldr	x0, [sp, #96]
  60:	blr	x2
  64:	ldr	x0, [sp, #104]
  68:	add	x0, x0, #0x1
  6c:	str	x0, [sp, #104]
  70:	ldr	x1, [sp, #88]
  74:	ldr	x0, [sp, #48]
  78:	add	x0, x1, x0
  7c:	str	x0, [sp, #88]
  80:	ldr	x1, [sp, #96]
  84:	ldr	x0, [sp, #48]
  88:	add	x0, x1, x0
  8c:	str	x0, [sp, #96]
  90:	b	44 <__cxa_vec_cctor+0x44>
  94:	bl	0 <__cxa_begin_catch>
  98:	add	x0, sp, #0x50
  9c:	bl	0 <__cxa_vec_cctor>
  a0:	ldr	x3, [sp, #32]
  a4:	ldr	x2, [sp, #48]
  a8:	ldr	x1, [sp, #104]
  ac:	ldr	x0, [sp, #72]
  b0:	bl	0 <__cxa_vec_cctor>
  b4:	add	x0, sp, #0x50
  b8:	bl	0 <__cxa_vec_cctor>
  bc:	bl	0 <__cxa_rethrow>
  c0:	mov	x19, x0
  c4:	bl	0 <__cxa_end_catch>
  c8:	mov	x0, x19
  cc:	bl	0 <_Unwind_Resume>
  d0:	nop
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #112
  dc:	ret

Disassembly of section .text.__cxa_vec_dtor:

0000000000000000 <__cxa_vec_dtor>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #56]
  10:	str	x1, [sp, #48]
  14:	str	x2, [sp, #40]
  18:	str	x3, [sp, #32]
  1c:	ldr	x0, [sp, #32]
  20:	cmp	x0, #0x0
  24:	b.eq	d0 <__cxa_vec_dtor+0xd0>  // b.none
  28:	ldr	x0, [sp, #56]
  2c:	str	x0, [sp, #88]
  30:	ldr	x0, [sp, #48]
  34:	str	x0, [sp, #80]
  38:	ldr	x1, [sp, #48]
  3c:	ldr	x0, [sp, #40]
  40:	mul	x0, x1, x0
  44:	ldr	x1, [sp, #88]
  48:	add	x0, x1, x0
  4c:	str	x0, [sp, #88]
  50:	ldr	x0, [sp, #80]
  54:	sub	x1, x0, #0x1
  58:	str	x1, [sp, #80]
  5c:	cmp	x0, #0x0
  60:	cset	w0, ne  // ne = any
  64:	and	w0, w0, #0xff
  68:	cmp	w0, #0x0
  6c:	b.eq	d0 <__cxa_vec_dtor+0xd0>  // b.none
  70:	ldr	x0, [sp, #40]
  74:	neg	x0, x0
  78:	ldr	x1, [sp, #88]
  7c:	add	x0, x1, x0
  80:	str	x0, [sp, #88]
  84:	ldr	x1, [sp, #32]
  88:	ldr	x0, [sp, #88]
  8c:	blr	x1
  90:	b	50 <__cxa_vec_dtor+0x50>
  94:	bl	0 <__cxa_begin_catch>
  98:	add	x0, sp, #0x48
  9c:	bl	0 <__cxa_vec_dtor>
  a0:	ldr	x3, [sp, #32]
  a4:	ldr	x2, [sp, #40]
  a8:	ldr	x1, [sp, #80]
  ac:	ldr	x0, [sp, #56]
  b0:	bl	0 <__cxa_vec_dtor>
  b4:	add	x0, sp, #0x48
  b8:	bl	0 <__cxa_vec_dtor>
  bc:	bl	0 <__cxa_rethrow>
  c0:	mov	x19, x0
  c4:	bl	0 <__cxa_end_catch>
  c8:	mov	x0, x19
  cc:	bl	0 <_Unwind_Resume>
  d0:	nop
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #96
  dc:	ret

Disassembly of section .text.__cxa_vec_cleanup:

0000000000000000 <__cxa_vec_cleanup>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #16]
  1c:	cmp	x0, #0x0
  20:	b.eq	98 <__cxa_vec_cleanup+0x98>  // b.none
  24:	ldr	x0, [sp, #40]
  28:	str	x0, [sp, #56]
  2c:	ldr	x0, [sp, #32]
  30:	str	x0, [sp, #48]
  34:	ldr	x1, [sp, #32]
  38:	ldr	x0, [sp, #24]
  3c:	mul	x0, x1, x0
  40:	ldr	x1, [sp, #56]
  44:	add	x0, x1, x0
  48:	str	x0, [sp, #56]
  4c:	ldr	x0, [sp, #48]
  50:	sub	x1, x0, #0x1
  54:	str	x1, [sp, #48]
  58:	cmp	x0, #0x0
  5c:	cset	w0, ne  // ne = any
  60:	and	w0, w0, #0xff
  64:	cmp	w0, #0x0
  68:	b.eq	98 <__cxa_vec_cleanup+0x98>  // b.none
  6c:	ldr	x0, [sp, #24]
  70:	neg	x0, x0
  74:	ldr	x1, [sp, #56]
  78:	add	x0, x1, x0
  7c:	str	x0, [sp, #56]
  80:	ldr	x1, [sp, #16]
  84:	ldr	x0, [sp, #56]
  88:	blr	x1
  8c:	b	4c <__cxa_vec_cleanup+0x4c>
  90:	bl	0 <__cxa_begin_catch>
  94:	bl	0 <_ZSt9terminatev>
  98:	nop
  9c:	ldp	x29, x30, [sp], #64
  a0:	ret

Disassembly of section .text.__cxa_vec_delete:

0000000000000000 <__cxa_vec_delete>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	adrp	x0, 0 <_ZdaPv>
  1c:	ldr	x4, [x0]
  20:	ldr	x3, [sp, #16]
  24:	ldr	x2, [sp, #24]
  28:	ldr	x1, [sp, #32]
  2c:	ldr	x0, [sp, #40]
  30:	bl	0 <__cxa_vec_delete>
  34:	nop
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

Disassembly of section .text.__cxa_vec_delete2:

0000000000000000 <__cxa_vec_delete2>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #72]
  10:	str	x1, [sp, #64]
  14:	str	x2, [sp, #56]
  18:	str	x3, [sp, #48]
  1c:	str	x4, [sp, #40]
  20:	ldr	x0, [sp, #72]
  24:	cmp	x0, #0x0
  28:	b.eq	c8 <__cxa_vec_delete2+0xc8>  // b.none
  2c:	ldr	x0, [sp, #72]
  30:	str	x0, [sp, #104]
  34:	ldr	x0, [sp, #56]
  38:	cmp	x0, #0x0
  3c:	b.eq	74 <__cxa_vec_delete2+0x74>  // b.none
  40:	ldr	x0, [sp, #104]
  44:	ldur	x0, [x0, #-8]
  48:	str	x0, [sp, #96]
  4c:	ldr	x0, [sp, #56]
  50:	neg	x0, x0
  54:	ldr	x1, [sp, #104]
  58:	add	x0, x1, x0
  5c:	str	x0, [sp, #104]
  60:	ldr	x3, [sp, #48]
  64:	ldr	x2, [sp, #64]
  68:	ldr	x1, [sp, #96]
  6c:	ldr	x0, [sp, #72]
  70:	bl	0 <__cxa_vec_delete2>
  74:	ldr	x1, [sp, #40]
  78:	ldr	x0, [sp, #104]
  7c:	blr	x1
  80:	b	cc <__cxa_vec_delete2+0xcc>
  84:	bl	0 <__cxa_begin_catch>
  88:	add	x0, sp, #0x58
  8c:	bl	0 <__cxa_vec_delete2>
  90:	ldr	x1, [sp, #40]
  94:	ldr	x0, [sp, #104]
  98:	blr	x1
  9c:	add	x0, sp, #0x58
  a0:	bl	0 <__cxa_vec_delete2>
  a4:	bl	0 <__cxa_rethrow>
  a8:	mov	x19, x0
  ac:	add	x0, sp, #0x58
  b0:	bl	0 <__cxa_vec_delete2>
  b4:	b	bc <__cxa_vec_delete2+0xbc>
  b8:	mov	x19, x0
  bc:	bl	0 <__cxa_end_catch>
  c0:	mov	x0, x19
  c4:	bl	0 <_Unwind_Resume>
  c8:	nop
  cc:	ldr	x19, [sp, #16]
  d0:	ldp	x29, x30, [sp], #112
  d4:	ret

Disassembly of section .text.__cxa_vec_delete3:

0000000000000000 <__cxa_vec_delete3>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #72]
  10:	str	x1, [sp, #64]
  14:	str	x2, [sp, #56]
  18:	str	x3, [sp, #48]
  1c:	str	x4, [sp, #40]
  20:	ldr	x0, [sp, #72]
  24:	cmp	x0, #0x0
  28:	b.eq	ec <__cxa_vec_delete3+0xec>  // b.none
  2c:	ldr	x0, [sp, #72]
  30:	str	x0, [sp, #104]
  34:	str	xzr, [sp, #96]
  38:	ldr	x0, [sp, #56]
  3c:	cmp	x0, #0x0
  40:	b.eq	90 <__cxa_vec_delete3+0x90>  // b.none
  44:	ldr	x0, [sp, #104]
  48:	ldur	x0, [x0, #-8]
  4c:	str	x0, [sp, #88]
  50:	ldr	x0, [sp, #56]
  54:	neg	x0, x0
  58:	ldr	x1, [sp, #104]
  5c:	add	x0, x1, x0
  60:	str	x0, [sp, #104]
  64:	ldr	x1, [sp, #88]
  68:	ldr	x0, [sp, #64]
  6c:	mul	x0, x1, x0
  70:	ldr	x1, [sp, #56]
  74:	add	x0, x1, x0
  78:	str	x0, [sp, #96]
  7c:	ldr	x3, [sp, #48]
  80:	ldr	x2, [sp, #64]
  84:	ldr	x1, [sp, #88]
  88:	ldr	x0, [sp, #72]
  8c:	bl	0 <__cxa_vec_delete3>
  90:	ldr	x2, [sp, #40]
  94:	ldr	x1, [sp, #96]
  98:	ldr	x0, [sp, #104]
  9c:	blr	x2
  a0:	b	f0 <__cxa_vec_delete3+0xf0>
  a4:	bl	0 <__cxa_begin_catch>
  a8:	add	x0, sp, #0x50
  ac:	bl	0 <__cxa_vec_delete3>
  b0:	ldr	x2, [sp, #40]
  b4:	ldr	x1, [sp, #96]
  b8:	ldr	x0, [sp, #104]
  bc:	blr	x2
  c0:	add	x0, sp, #0x50
  c4:	bl	0 <__cxa_vec_delete3>
  c8:	bl	0 <__cxa_rethrow>
  cc:	mov	x19, x0
  d0:	add	x0, sp, #0x50
  d4:	bl	0 <__cxa_vec_delete3>
  d8:	b	e0 <__cxa_vec_delete3+0xe0>
  dc:	mov	x19, x0
  e0:	bl	0 <__cxa_end_catch>
  e4:	mov	x0, x19
  e8:	bl	0 <_Unwind_Resume>
  ec:	nop
  f0:	ldr	x19, [sp, #16]
  f4:	ldp	x29, x30, [sp], #112
  f8:	ret

vmi_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_infoeqERKS_:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [x0, #8]
  18:	ldr	x0, [sp, #16]
  1c:	ldr	x0, [x0, #8]
  20:	cmp	x1, x0
  24:	b.eq	60 <_ZNKSt9type_infoeqERKS_+0x60>  // b.none
  28:	ldr	x0, [sp, #24]
  2c:	ldr	x0, [x0, #8]
  30:	ldrb	w0, [x0]
  34:	cmp	w0, #0x2a
  38:	b.eq	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.none
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x2, [x0, #8]
  44:	ldr	x0, [sp, #16]
  48:	ldr	x0, [x0, #8]
  4c:	mov	x1, x0
  50:	mov	x0, x2
  54:	bl	0 <strcmp>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <_ZNKSt9type_infoeqERKS_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	6c <_ZNKSt9type_infoeqERKS_+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

Disassembly of section .text._ZNK10__cxxabiv122__base_class_type_info14__is_virtual_pEv:

0000000000000000 <_ZNK10__cxxabiv122__base_class_type_info14__is_virtual_pEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0, #8]
  10:	and	x0, x0, #0x1
  14:	cmp	x0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	and	w0, w0, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv122__base_class_type_info13__is_public_pEv:

0000000000000000 <_ZNK10__cxxabiv122__base_class_type_info13__is_public_pEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0, #8]
  10:	and	x0, x0, #0x2
  14:	cmp	x0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	and	w0, w0, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv122__base_class_type_info8__offsetEv:

0000000000000000 <_ZNK10__cxxabiv122__base_class_type_info8__offsetEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0, #8]
  10:	asr	x0, x0, #8
  14:	add	sp, sp, #0x10
  18:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_115convert_to_baseEPKvbl:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_115convert_to_baseEPKvbl>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	strb	w1, [sp, #39]
  10:	str	x2, [sp, #24]
  14:	ldrb	w0, [sp, #39]
  18:	cmp	w0, #0x0
  1c:	b.eq	40 <_ZN10__cxxabiv112_GLOBAL__N_115convert_to_baseEPKvbl+0x40>  // b.none
  20:	ldr	x0, [sp, #40]
  24:	ldr	x0, [x0]
  28:	str	x0, [sp, #56]
  2c:	ldr	x1, [sp, #24]
  30:	ldr	x0, [sp, #56]
  34:	bl	0 <_ZN10__cxxabiv112_GLOBAL__N_115convert_to_baseEPKvbl>
  38:	ldr	x0, [x0]
  3c:	str	x0, [sp, #24]
  40:	ldr	x1, [sp, #24]
  44:	ldr	x0, [sp, #40]
  48:	bl	0 <_ZN10__cxxabiv112_GLOBAL__N_115convert_to_baseEPKvbl>
  4c:	ldp	x29, x30, [sp], #64
  50:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_111contained_pENS_17__class_type_info10__sub_kindE:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_111contained_pENS_17__class_type_info10__sub_kindE>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	cmp	w0, #0x3
  10:	cset	w0, gt
  14:	and	w0, w0, #0xff
  18:	add	sp, sp, #0x10
  1c:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_18public_pENS_17__class_type_info10__sub_kindE:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_18public_pENS_17__class_type_info10__sub_kindE>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	and	w0, w0, #0x2
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_19virtual_pENS_17__class_type_info10__sub_kindE:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_19virtual_pENS_17__class_type_info10__sub_kindE>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	and	w0, w0, #0x1
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	and	w0, w0, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_info15__upcast_resultC2Ei:

0000000000000000 <_ZN10__cxxabiv117__class_type_info15__upcast_resultC1Ei>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	str	xzr, [x0]
  14:	ldr	x0, [sp, #8]
  18:	str	wzr, [x0, #8]
  1c:	ldr	x0, [sp, #8]
  20:	ldr	w1, [sp, #4]
  24:	str	w1, [x0, #12]
  28:	ldr	x0, [sp, #8]
  2c:	str	xzr, [x0, #16]
  30:	nop
  34:	add	sp, sp, #0x10
  38:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_info16__dyncast_resultC2Ei:

0000000000000000 <_ZN10__cxxabiv117__class_type_info16__dyncast_resultC1Ei>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	str	xzr, [x0]
  14:	ldr	x0, [sp, #8]
  18:	str	wzr, [x0, #8]
  1c:	ldr	x0, [sp, #8]
  20:	str	wzr, [x0, #12]
  24:	ldr	x0, [sp, #8]
  28:	str	wzr, [x0, #16]
  2c:	ldr	x0, [sp, #8]
  30:	ldr	w1, [sp, #4]
  34:	str	w1, [x0, #20]
  38:	nop
  3c:	add	sp, sp, #0x10
  40:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	x4, [sp, #24]
  1c:	ldr	x0, [sp, #48]
  20:	cmp	x0, #0x0
  24:	b.lt	54 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x54>  // b.tstop
  28:	ldr	x1, [sp, #48]
  2c:	ldr	x0, [sp, #40]
  30:	bl	0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_>
  34:	mov	x1, x0
  38:	ldr	x0, [sp, #24]
  3c:	cmp	x0, x1
  40:	b.ne	4c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x4c>  // b.any
  44:	mov	w0, #0x6                   	// #6
  48:	b	94 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x94>
  4c:	mov	w0, #0x1                   	// #1
  50:	b	94 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x94>
  54:	ldr	x0, [sp, #48]
  58:	cmn	x0, #0x2
  5c:	b.ne	68 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x68>  // b.any
  60:	mov	w0, #0x1                   	// #1
  64:	b	94 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x94>
  68:	ldr	x0, [sp, #56]
  6c:	ldr	x0, [x0]
  70:	add	x0, x0, #0x40
  74:	ldr	x5, [x0]
  78:	ldr	x4, [sp, #24]
  7c:	ldr	x3, [sp, #32]
  80:	ldr	x2, [sp, #40]
  84:	ldr	x1, [sp, #48]
  88:	ldr	x0, [sp, #56]
  8c:	blr	x5
  90:	nop
  94:	ldp	x29, x30, [sp], #64
  98:	ret

Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
  10:	ldr	x0, [x0]
  14:	add	x1, x0, #0x10
  18:	ldr	x0, [sp, #24]
  1c:	str	x1, [x0]
  20:	ldr	x0, [sp, #24]
  24:	bl	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
  28:	nop
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>
  14:	mov	x1, #0x28                  	// #40
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <_ZdlPvm>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	x4, [sp, #24]
  1c:	ldr	x1, [sp, #40]
  20:	ldr	x0, [sp, #24]
  24:	cmp	x1, x0
  28:	b.ne	4c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x4c>  // b.any
  2c:	ldr	x0, [sp, #56]
  30:	ldr	x1, [sp, #32]
  34:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
  38:	and	w0, w0, #0xff
  3c:	cmp	w0, #0x0
  40:	b.eq	4c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x4c>  // b.none
  44:	mov	w0, #0x1                   	// #1
  48:	b	50 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x50>
  4c:	mov	w0, #0x0                   	// #0
  50:	cmp	w0, #0x0
  54:	b.eq	60 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x60>  // b.none
  58:	mov	w0, #0x6                   	// #6
  5c:	b	1d4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1d4>
  60:	ldr	x0, [sp, #56]
  64:	ldr	w0, [x0, #20]
  68:	mov	w0, w0
  6c:	str	x0, [sp, #104]
  70:	ldr	x0, [sp, #104]
  74:	sub	x1, x0, #0x1
  78:	str	x1, [sp, #104]
  7c:	cmp	x0, #0x0
  80:	cset	w0, ne  // ne = any
  84:	and	w0, w0, #0xff
  88:	cmp	w0, #0x0
  8c:	b.eq	1d0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1d0>  // b.none
  90:	ldr	x0, [sp, #104]
  94:	add	x0, x0, #0x1
  98:	lsl	x0, x0, #4
  9c:	ldr	x1, [sp, #56]
  a0:	add	x0, x1, x0
  a4:	add	x0, x0, #0x8
  a8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
  ac:	and	w0, w0, #0xff
  b0:	eor	w0, w0, #0x1
  b4:	and	w0, w0, #0xff
  b8:	cmp	w0, #0x0
  bc:	b.ne	1c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1c0>  // b.any
  c0:	ldr	x0, [sp, #40]
  c4:	str	x0, [sp, #88]
  c8:	ldr	x0, [sp, #104]
  cc:	add	x0, x0, #0x1
  d0:	lsl	x0, x0, #4
  d4:	ldr	x1, [sp, #56]
  d8:	add	x0, x1, x0
  dc:	add	x0, x0, #0x8
  e0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
  e4:	str	x0, [sp, #80]
  e8:	ldr	x0, [sp, #104]
  ec:	add	x0, x0, #0x1
  f0:	lsl	x0, x0, #4
  f4:	ldr	x1, [sp, #56]
  f8:	add	x0, x1, x0
  fc:	add	x0, x0, #0x8
 100:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
 104:	strb	w0, [sp, #79]
 108:	ldrb	w0, [sp, #79]
 10c:	cmp	w0, #0x0
 110:	b.eq	120 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x120>  // b.none
 114:	ldr	x0, [sp, #48]
 118:	cmn	x0, #0x3
 11c:	b.eq	1c8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1c8>  // b.none
 120:	ldr	x2, [sp, #80]
 124:	ldrb	w1, [sp, #79]
 128:	ldr	x0, [sp, #88]
 12c:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
 130:	str	x0, [sp, #88]
 134:	ldr	x1, [sp, #56]
 138:	ldr	x0, [sp, #104]
 13c:	add	x0, x0, #0x1
 140:	lsl	x0, x0, #4
 144:	add	x0, x1, x0
 148:	ldr	x6, [x0, #8]
 14c:	ldr	x1, [sp, #56]
 150:	ldr	x0, [sp, #104]
 154:	add	x0, x0, #0x1
 158:	lsl	x0, x0, #4
 15c:	add	x0, x1, x0
 160:	ldr	x0, [x0, #8]
 164:	ldr	x0, [x0]
 168:	add	x0, x0, #0x40
 16c:	ldr	x5, [x0]
 170:	ldr	x4, [sp, #24]
 174:	ldr	x3, [sp, #32]
 178:	ldr	x2, [sp, #88]
 17c:	ldr	x1, [sp, #48]
 180:	mov	x0, x6
 184:	blr	x5
 188:	str	w0, [sp, #100]
 18c:	ldr	w0, [sp, #100]
 190:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
 194:	and	w0, w0, #0xff
 198:	cmp	w0, #0x0
 19c:	b.eq	70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x70>  // b.none
 1a0:	ldrb	w0, [sp, #79]
 1a4:	cmp	w0, #0x0
 1a8:	b.eq	1b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1b8>  // b.none
 1ac:	ldr	w0, [sp, #100]
 1b0:	orr	w0, w0, #0x1
 1b4:	str	w0, [sp, #100]
 1b8:	ldr	w0, [sp, #100]
 1bc:	b	1d4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1d4>
 1c0:	nop
 1c4:	b	70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x70>
 1c8:	nop
 1cc:	b	70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x70>
 1d0:	mov	w0, #0x1                   	// #1
 1d4:	ldp	x29, x30, [sp], #112
 1d8:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #72]
   c:	str	x1, [sp, #64]
  10:	str	w2, [sp, #60]
  14:	str	x3, [sp, #48]
  18:	str	x4, [sp, #40]
  1c:	str	x5, [sp, #32]
  20:	str	x6, [sp, #24]
  24:	str	x7, [sp, #16]
  28:	ldr	x0, [sp, #16]
  2c:	ldr	w0, [x0, #20]
  30:	and	w0, w0, #0x10
  34:	cmp	w0, #0x0
  38:	b.eq	50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x50>  // b.none
  3c:	ldr	x0, [sp, #72]
  40:	ldr	w0, [x0, #16]
  44:	mov	w1, w0
  48:	ldr	x0, [sp, #16]
  4c:	str	w1, [x0, #20]
  50:	ldr	x1, [sp, #40]
  54:	ldr	x0, [sp, #24]
  58:	cmp	x1, x0
  5c:	b.ne	80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>  // b.any
  60:	ldr	x0, [sp, #72]
  64:	ldr	x1, [sp, #32]
  68:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  6c:	and	w0, w0, #0xff
  70:	cmp	w0, #0x0
  74:	b.eq	80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>  // b.none
  78:	mov	w0, #0x1                   	// #1
  7c:	b	84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x84>
  80:	mov	w0, #0x0                   	// #0
  84:	cmp	w0, #0x0
  88:	b.eq	a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>  // b.none
  8c:	ldr	x0, [sp, #16]
  90:	ldr	w1, [sp, #60]
  94:	str	w1, [x0, #12]
  98:	mov	w0, #0x0                   	// #0
  9c:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
  a0:	ldr	x0, [sp, #72]
  a4:	ldr	x1, [sp, #48]
  a8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  ac:	and	w0, w0, #0xff
  b0:	cmp	w0, #0x0
  b4:	b.eq	130 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>  // b.none
  b8:	ldr	x0, [sp, #16]
  bc:	ldr	x1, [sp, #40]
  c0:	str	x1, [x0]
  c4:	ldr	x0, [sp, #16]
  c8:	ldr	w1, [sp, #60]
  cc:	str	w1, [x0, #8]
  d0:	ldr	x0, [sp, #64]
  d4:	cmp	x0, #0x0
  d8:	b.lt	110 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x110>  // b.tstop
  dc:	ldr	x1, [sp, #64]
  e0:	ldr	x0, [sp, #40]
  e4:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  e8:	mov	x1, x0
  ec:	ldr	x0, [sp, #24]
  f0:	cmp	x0, x1
  f4:	b.ne	100 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>  // b.any
  f8:	mov	w0, #0x6                   	// #6
  fc:	b	104 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x104>
 100:	mov	w0, #0x1                   	// #1
 104:	ldr	x1, [sp, #16]
 108:	str	w0, [x1, #16]
 10c:	b	128 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 110:	ldr	x0, [sp, #64]
 114:	cmn	x0, #0x2
 118:	b.ne	128 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>  // b.any
 11c:	ldr	x0, [sp, #16]
 120:	mov	w1, #0x1                   	// #1
 124:	str	w1, [x0, #16]
 128:	mov	w0, #0x0                   	// #0
 12c:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 130:	str	xzr, [sp, #168]
 134:	ldr	x0, [sp, #64]
 138:	cmp	x0, #0x0
 13c:	b.lt	158 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>  // b.tstop
 140:	ldr	x0, [sp, #64]
 144:	neg	x0, x0
 148:	mov	x1, x0
 14c:	ldr	x0, [sp, #24]
 150:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 154:	str	x0, [sp, #168]
 158:	mov	w0, #0x1                   	// #1
 15c:	strb	w0, [sp, #167]
 160:	strb	wzr, [sp, #166]
 164:	strb	wzr, [sp, #165]
 168:	ldr	x0, [sp, #72]
 16c:	ldr	w0, [x0, #20]
 170:	mov	w0, w0
 174:	str	x0, [sp, #152]
 178:	ldr	x0, [sp, #152]
 17c:	sub	x1, x0, #0x1
 180:	str	x1, [sp, #152]
 184:	cmp	x0, #0x0
 188:	cset	w0, ne  // ne = any
 18c:	and	w0, w0, #0xff
 190:	cmp	w0, #0x0
 194:	b.eq	78c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78c>  // b.none
 198:	ldr	x0, [sp, #16]
 19c:	ldr	w1, [x0, #20]
 1a0:	add	x0, sp, #0x58
 1a4:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 1a8:	ldr	x0, [sp, #40]
 1ac:	str	x0, [sp, #128]
 1b0:	ldr	w0, [sp, #60]
 1b4:	str	w0, [sp, #148]
 1b8:	ldr	x0, [sp, #152]
 1bc:	add	x0, x0, #0x1
 1c0:	lsl	x0, x0, #4
 1c4:	ldr	x1, [sp, #72]
 1c8:	add	x0, x1, x0
 1cc:	add	x0, x0, #0x8
 1d0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 1d4:	str	x0, [sp, #120]
 1d8:	ldr	x0, [sp, #152]
 1dc:	add	x0, x0, #0x1
 1e0:	lsl	x0, x0, #4
 1e4:	ldr	x1, [sp, #72]
 1e8:	add	x0, x1, x0
 1ec:	add	x0, x0, #0x8
 1f0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 1f4:	strb	w0, [sp, #119]
 1f8:	ldrb	w0, [sp, #119]
 1fc:	cmp	w0, #0x0
 200:	b.eq	210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x210>  // b.none
 204:	ldr	w0, [sp, #148]
 208:	orr	w0, w0, #0x1
 20c:	str	w0, [sp, #148]
 210:	ldr	x2, [sp, #120]
 214:	ldrb	w1, [sp, #119]
 218:	ldr	x0, [sp, #128]
 21c:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 220:	str	x0, [sp, #128]
 224:	ldr	x0, [sp, #168]
 228:	cmp	x0, #0x0
 22c:	b.eq	260 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>  // b.none
 230:	ldr	x1, [sp, #128]
 234:	ldr	x0, [sp, #168]
 238:	cmp	x1, x0
 23c:	cset	w0, hi  // hi = pmore
 240:	strb	w0, [sp, #118]
 244:	ldrb	w1, [sp, #118]
 248:	ldrb	w0, [sp, #167]
 24c:	cmp	w1, w0
 250:	b.ne	260 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>  // b.any
 254:	mov	w0, #0x1                   	// #1
 258:	strb	w0, [sp, #166]
 25c:	b	788 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x788>
 260:	ldr	x0, [sp, #152]
 264:	add	x0, x0, #0x1
 268:	lsl	x0, x0, #4
 26c:	ldr	x1, [sp, #72]
 270:	add	x0, x1, x0
 274:	add	x0, x0, #0x8
 278:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 27c:	and	w0, w0, #0xff
 280:	eor	w0, w0, #0x1
 284:	and	w0, w0, #0xff
 288:	cmp	w0, #0x0
 28c:	b.eq	2bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2bc>  // b.none
 290:	ldr	x0, [sp, #64]
 294:	cmn	x0, #0x2
 298:	b.ne	2b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2b0>  // b.any
 29c:	ldr	x0, [sp, #16]
 2a0:	ldr	w0, [x0, #20]
 2a4:	and	w0, w0, #0x3
 2a8:	cmp	w0, #0x0
 2ac:	b.eq	784 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x784>  // b.none
 2b0:	ldr	w0, [sp, #148]
 2b4:	and	w0, w0, #0xfffffffd
 2b8:	str	w0, [sp, #148]
 2bc:	ldr	x1, [sp, #72]
 2c0:	ldr	x0, [sp, #152]
 2c4:	add	x0, x0, #0x1
 2c8:	lsl	x0, x0, #4
 2cc:	add	x0, x1, x0
 2d0:	ldr	x9, [x0, #8]
 2d4:	ldr	x1, [sp, #72]
 2d8:	ldr	x0, [sp, #152]
 2dc:	add	x0, x0, #0x1
 2e0:	lsl	x0, x0, #4
 2e4:	add	x0, x1, x0
 2e8:	ldr	x0, [x0, #8]
 2ec:	ldr	x0, [x0]
 2f0:	add	x0, x0, #0x38
 2f4:	ldr	x8, [x0]
 2f8:	add	x0, sp, #0x58
 2fc:	mov	x7, x0
 300:	ldr	x6, [sp, #24]
 304:	ldr	x5, [sp, #32]
 308:	ldr	x4, [sp, #128]
 30c:	ldr	x3, [sp, #48]
 310:	ldr	w2, [sp, #148]
 314:	ldr	x1, [sp, #64]
 318:	mov	x0, x9
 31c:	blr	x8
 320:	and	w0, w0, #0xff
 324:	strb	w0, [sp, #117]
 328:	ldr	x0, [sp, #16]
 32c:	ldr	w0, [x0, #12]
 330:	mov	w1, w0
 334:	ldr	w0, [sp, #100]
 338:	orr	w0, w1, w0
 33c:	mov	w1, w0
 340:	ldr	x0, [sp, #16]
 344:	str	w1, [x0, #12]
 348:	ldr	w0, [sp, #104]
 34c:	cmp	w0, #0x6
 350:	b.eq	360 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>  // b.none
 354:	ldr	w0, [sp, #104]
 358:	cmp	w0, #0x2
 35c:	b.ne	38c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>  // b.any
 360:	ldr	x1, [sp, #88]
 364:	ldr	x0, [sp, #16]
 368:	str	x1, [x0]
 36c:	ldr	w1, [sp, #96]
 370:	ldr	x0, [sp, #16]
 374:	str	w1, [x0, #8]
 378:	ldr	w1, [sp, #104]
 37c:	ldr	x0, [sp, #16]
 380:	str	w1, [x0, #16]
 384:	ldrb	w0, [sp, #117]
 388:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 38c:	ldrb	w0, [sp, #165]
 390:	eor	w0, w0, #0x1
 394:	and	w0, w0, #0xff
 398:	cmp	w0, #0x0
 39c:	b.eq	40c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40c>  // b.none
 3a0:	ldr	x0, [sp, #16]
 3a4:	ldr	x0, [x0]
 3a8:	cmp	x0, #0x0
 3ac:	b.ne	40c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40c>  // b.any
 3b0:	ldr	x1, [sp, #88]
 3b4:	ldr	x0, [sp, #16]
 3b8:	str	x1, [x0]
 3bc:	ldr	w1, [sp, #96]
 3c0:	ldr	x0, [sp, #16]
 3c4:	str	w1, [x0, #8]
 3c8:	ldrb	w0, [sp, #117]
 3cc:	strb	w0, [sp, #165]
 3d0:	ldr	x0, [sp, #16]
 3d4:	ldr	x0, [x0]
 3d8:	cmp	x0, #0x0
 3dc:	b.eq	768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x768>  // b.none
 3e0:	ldr	x0, [sp, #16]
 3e4:	ldr	w0, [x0, #12]
 3e8:	cmp	w0, #0x0
 3ec:	b.eq	768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x768>  // b.none
 3f0:	ldr	x0, [sp, #72]
 3f4:	ldr	w0, [x0, #16]
 3f8:	and	w0, w0, #0x1
 3fc:	cmp	w0, #0x0
 400:	b.ne	768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x768>  // b.any
 404:	ldrb	w0, [sp, #165]
 408:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 40c:	ldr	x0, [sp, #16]
 410:	ldr	x0, [x0]
 414:	cmp	x0, #0x0
 418:	b.eq	454 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x454>  // b.none
 41c:	ldr	x0, [sp, #16]
 420:	ldr	x1, [x0]
 424:	ldr	x0, [sp, #88]
 428:	cmp	x1, x0
 42c:	b.ne	454 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x454>  // b.any
 430:	ldr	x0, [sp, #16]
 434:	ldr	w0, [x0, #8]
 438:	mov	w1, w0
 43c:	ldr	w0, [sp, #96]
 440:	orr	w0, w1, w0
 444:	mov	w1, w0
 448:	ldr	x0, [sp, #16]
 44c:	str	w1, [x0, #8]
 450:	b	76c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76c>
 454:	ldr	x0, [sp, #16]
 458:	ldr	x0, [x0]
 45c:	cmp	x0, #0x0
 460:	b.eq	470 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x470>  // b.none
 464:	ldr	x0, [sp, #88]
 468:	cmp	x0, #0x0
 46c:	b.ne	4a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a4>  // b.any
 470:	ldr	x0, [sp, #16]
 474:	ldr	x0, [x0]
 478:	cmp	x0, #0x0
 47c:	b.eq	48c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48c>  // b.none
 480:	ldrb	w0, [sp, #117]
 484:	cmp	w0, #0x0
 488:	b.ne	4a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a4>  // b.any
 48c:	ldr	x0, [sp, #88]
 490:	cmp	x0, #0x0
 494:	b.eq	76c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76c>  // b.none
 498:	ldrb	w0, [sp, #165]
 49c:	cmp	w0, #0x0
 4a0:	b.eq	76c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76c>  // b.none
 4a4:	ldr	w0, [sp, #104]
 4a8:	str	w0, [sp, #144]
 4ac:	ldr	x0, [sp, #16]
 4b0:	ldr	w0, [x0, #16]
 4b4:	str	w0, [sp, #140]
 4b8:	ldr	x0, [sp, #16]
 4bc:	ldr	w0, [x0, #12]
 4c0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 4c4:	and	w0, w0, #0xff
 4c8:	cmp	w0, #0x0
 4cc:	b.eq	50c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x50c>  // b.none
 4d0:	ldr	x0, [sp, #16]
 4d4:	ldr	w0, [x0, #12]
 4d8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 4dc:	and	w0, w0, #0xff
 4e0:	eor	w0, w0, #0x1
 4e4:	and	w0, w0, #0xff
 4e8:	cmp	w0, #0x0
 4ec:	b.ne	504 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x504>  // b.any
 4f0:	ldr	x0, [sp, #16]
 4f4:	ldr	w0, [x0, #20]
 4f8:	and	w0, w0, #0x2
 4fc:	cmp	w0, #0x0
 500:	b.ne	50c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x50c>  // b.any
 504:	mov	w0, #0x1                   	// #1
 508:	b	510 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x510>
 50c:	mov	w0, #0x0                   	// #0
 510:	cmp	w0, #0x0
 514:	b.eq	544 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>  // b.none
 518:	ldr	w0, [sp, #140]
 51c:	cmp	w0, #0x0
 520:	b.ne	52c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x52c>  // b.any
 524:	mov	w0, #0x1                   	// #1
 528:	str	w0, [sp, #140]
 52c:	ldr	w0, [sp, #144]
 530:	cmp	w0, #0x0
 534:	b.ne	668 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x668>  // b.any
 538:	mov	w0, #0x1                   	// #1
 53c:	str	w0, [sp, #144]
 540:	b	668 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x668>
 544:	ldr	w0, [sp, #140]
 548:	cmp	w0, #0x0
 54c:	b.gt	5d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5d8>
 550:	ldr	w0, [sp, #144]
 554:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 558:	and	w0, w0, #0xff
 55c:	cmp	w0, #0x0
 560:	b.eq	59c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x59c>  // b.none
 564:	ldr	w0, [sp, #144]
 568:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 56c:	and	w0, w0, #0xff
 570:	eor	w0, w0, #0x1
 574:	and	w0, w0, #0xff
 578:	cmp	w0, #0x0
 57c:	b.ne	594 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x594>  // b.any
 580:	ldr	x0, [sp, #72]
 584:	ldr	w0, [x0, #16]
 588:	and	w0, w0, #0x2
 58c:	cmp	w0, #0x0
 590:	b.ne	59c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x59c>  // b.any
 594:	mov	w0, #0x1                   	// #1
 598:	b	5a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a0>
 59c:	mov	w0, #0x0                   	// #0
 5a0:	cmp	w0, #0x0
 5a4:	b.eq	5b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b4>  // b.none
 5a8:	mov	w0, #0x1                   	// #1
 5ac:	str	w0, [sp, #140]
 5b0:	b	5d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5d8>
 5b4:	ldr	x0, [sp, #16]
 5b8:	ldr	x0, [x0]
 5bc:	ldr	x4, [sp, #24]
 5c0:	ldr	x3, [sp, #32]
 5c4:	mov	x2, x0
 5c8:	ldr	x1, [sp, #64]
 5cc:	ldr	x0, [sp, #48]
 5d0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 5d4:	str	w0, [sp, #140]
 5d8:	ldr	w0, [sp, #144]
 5dc:	cmp	w0, #0x0
 5e0:	b.gt	668 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x668>
 5e4:	ldr	w0, [sp, #140]
 5e8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 5ec:	and	w0, w0, #0xff
 5f0:	cmp	w0, #0x0
 5f4:	b.eq	630 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x630>  // b.none
 5f8:	ldr	w0, [sp, #140]
 5fc:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 600:	and	w0, w0, #0xff
 604:	eor	w0, w0, #0x1
 608:	and	w0, w0, #0xff
 60c:	cmp	w0, #0x0
 610:	b.ne	628 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x628>  // b.any
 614:	ldr	x0, [sp, #72]
 618:	ldr	w0, [x0, #16]
 61c:	and	w0, w0, #0x2
 620:	cmp	w0, #0x0
 624:	b.ne	630 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x630>  // b.any
 628:	mov	w0, #0x1                   	// #1
 62c:	b	634 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x634>
 630:	mov	w0, #0x0                   	// #0
 634:	cmp	w0, #0x0
 638:	b.eq	648 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x648>  // b.none
 63c:	mov	w0, #0x1                   	// #1
 640:	str	w0, [sp, #144]
 644:	b	668 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x668>
 648:	ldr	x0, [sp, #88]
 64c:	ldr	x4, [sp, #24]
 650:	ldr	x3, [sp, #32]
 654:	mov	x2, x0
 658:	ldr	x1, [sp, #64]
 65c:	ldr	x0, [sp, #48]
 660:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 664:	str	w0, [sp, #144]
 668:	ldr	w1, [sp, #144]
 66c:	ldr	w0, [sp, #140]
 670:	eor	w0, w1, w0
 674:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 678:	and	w0, w0, #0xff
 67c:	cmp	w0, #0x0
 680:	b.eq	710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x710>  // b.none
 684:	ldr	w0, [sp, #144]
 688:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 68c:	and	w0, w0, #0xff
 690:	cmp	w0, #0x0
 694:	b.eq	6bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6bc>  // b.none
 698:	ldr	x1, [sp, #88]
 69c:	ldr	x0, [sp, #16]
 6a0:	str	x1, [x0]
 6a4:	ldr	w1, [sp, #96]
 6a8:	ldr	x0, [sp, #16]
 6ac:	str	w1, [x0, #8]
 6b0:	strb	wzr, [sp, #165]
 6b4:	ldr	w0, [sp, #144]
 6b8:	str	w0, [sp, #140]
 6bc:	ldr	x0, [sp, #16]
 6c0:	ldr	w1, [sp, #140]
 6c4:	str	w1, [x0, #16]
 6c8:	ldr	x0, [sp, #16]
 6cc:	ldr	w0, [x0, #16]
 6d0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 6d4:	and	w0, w0, #0xff
 6d8:	cmp	w0, #0x0
 6dc:	b.eq	6e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e8>  // b.none
 6e0:	mov	w0, #0x0                   	// #0
 6e4:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 6e8:	ldr	x0, [sp, #16]
 6ec:	ldr	w0, [x0, #16]
 6f0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 6f4:	and	w0, w0, #0xff
 6f8:	eor	w0, w0, #0x1
 6fc:	and	w0, w0, #0xff
 700:	cmp	w0, #0x0
 704:	b.eq	76c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76c>  // b.none
 708:	mov	w0, #0x0                   	// #0
 70c:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 710:	ldr	w1, [sp, #144]
 714:	ldr	w0, [sp, #140]
 718:	and	w0, w1, w0
 71c:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 720:	and	w0, w0, #0xff
 724:	cmp	w0, #0x0
 728:	b.eq	748 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x748>  // b.none
 72c:	ldr	x0, [sp, #16]
 730:	str	xzr, [x0]
 734:	ldr	x0, [sp, #16]
 738:	mov	w1, #0x2                   	// #2
 73c:	str	w1, [x0, #16]
 740:	mov	w0, #0x1                   	// #1
 744:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 748:	ldr	x0, [sp, #16]
 74c:	str	xzr, [x0]
 750:	ldr	x0, [sp, #16]
 754:	mov	w1, #0x1                   	// #1
 758:	str	w1, [x0, #16]
 75c:	mov	w0, #0x1                   	// #1
 760:	strb	w0, [sp, #165]
 764:	b	76c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76c>
 768:	nop
 76c:	ldr	x0, [sp, #16]
 770:	ldr	w0, [x0, #12]
 774:	cmp	w0, #0x4
 778:	b.ne	178 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x178>  // b.any
 77c:	ldrb	w0, [sp, #165]
 780:	b	7b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7b0>
 784:	nop
 788:	b	178 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x178>
 78c:	ldrb	w0, [sp, #166]
 790:	cmp	w0, #0x0
 794:	b.eq	7ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7ac>  // b.none
 798:	ldrb	w0, [sp, #167]
 79c:	cmp	w0, #0x0
 7a0:	b.eq	7ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7ac>  // b.none
 7a4:	strb	wzr, [sp, #167]
 7a8:	b	168 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 7ac:	ldrb	w0, [sp, #165]
 7b0:	ldp	x29, x30, [sp], #176
 7b4:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	ldr	x3, [sp, #16]
  20:	ldr	x2, [sp, #24]
  24:	ldr	x1, [sp, #32]
  28:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  2c:	and	w0, w0, #0xff
  30:	cmp	w0, #0x0
  34:	b.eq	40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40>  // b.none
  38:	mov	w0, #0x1                   	// #1
  3c:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
  40:	ldr	x0, [sp, #16]
  44:	ldr	w0, [x0, #12]
  48:	str	w0, [sp, #108]
  4c:	ldr	w0, [sp, #108]
  50:	and	w0, w0, #0x10
  54:	cmp	w0, #0x0
  58:	b.eq	68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>  // b.none
  5c:	ldr	x0, [sp, #40]
  60:	ldr	w0, [x0, #16]
  64:	str	w0, [sp, #108]
  68:	ldr	x0, [sp, #40]
  6c:	ldr	w0, [x0, #20]
  70:	mov	w0, w0
  74:	str	x0, [sp, #96]
  78:	ldr	x0, [sp, #96]
  7c:	sub	x1, x0, #0x1
  80:	str	x1, [sp, #96]
  84:	cmp	x0, #0x0
  88:	cset	w0, ne  // ne = any
  8c:	and	w0, w0, #0xff
  90:	cmp	w0, #0x0
  94:	b.eq	3f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3f8>  // b.none
  98:	add	x0, sp, #0x30
  9c:	ldr	w1, [sp, #108]
  a0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
  a4:	ldr	x0, [sp, #24]
  a8:	str	x0, [sp, #88]
  ac:	ldr	x0, [sp, #96]
  b0:	add	x0, x0, #0x1
  b4:	lsl	x0, x0, #4
  b8:	ldr	x1, [sp, #40]
  bc:	add	x0, x1, x0
  c0:	add	x0, x0, #0x8
  c4:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
  c8:	str	x0, [sp, #80]
  cc:	ldr	x0, [sp, #96]
  d0:	add	x0, x0, #0x1
  d4:	lsl	x0, x0, #4
  d8:	ldr	x1, [sp, #40]
  dc:	add	x0, x1, x0
  e0:	add	x0, x0, #0x8
  e4:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
  e8:	strb	w0, [sp, #79]
  ec:	ldr	x0, [sp, #96]
  f0:	add	x0, x0, #0x1
  f4:	lsl	x0, x0, #4
  f8:	ldr	x1, [sp, #40]
  fc:	add	x0, x1, x0
 100:	add	x0, x0, #0x8
 104:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 108:	strb	w0, [sp, #78]
 10c:	ldrb	w0, [sp, #78]
 110:	eor	w0, w0, #0x1
 114:	and	w0, w0, #0xff
 118:	cmp	w0, #0x0
 11c:	b.eq	130 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x130>  // b.none
 120:	ldr	w0, [sp, #108]
 124:	and	w0, w0, #0x1
 128:	cmp	w0, #0x0
 12c:	b.eq	3f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3f0>  // b.none
 130:	ldr	x0, [sp, #88]
 134:	cmp	x0, #0x0
 138:	b.eq	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>  // b.none
 13c:	ldr	x2, [sp, #80]
 140:	ldrb	w1, [sp, #79]
 144:	ldr	x0, [sp, #88]
 148:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 14c:	str	x0, [sp, #88]
 150:	ldr	x1, [sp, #40]
 154:	ldr	x0, [sp, #96]
 158:	add	x0, x0, #0x1
 15c:	lsl	x0, x0, #4
 160:	add	x0, x1, x0
 164:	ldr	x5, [x0, #8]
 168:	ldr	x1, [sp, #40]
 16c:	ldr	x0, [sp, #96]
 170:	add	x0, x0, #0x1
 174:	lsl	x0, x0, #4
 178:	add	x0, x1, x0
 17c:	ldr	x0, [x0, #8]
 180:	ldr	x0, [x0]
 184:	add	x0, x0, #0x30
 188:	ldr	x4, [x0]
 18c:	add	x0, sp, #0x30
 190:	mov	x3, x0
 194:	ldr	x2, [sp, #88]
 198:	ldr	x1, [sp, #32]
 19c:	mov	x0, x5
 1a0:	blr	x4
 1a4:	and	w0, w0, #0xff
 1a8:	cmp	w0, #0x0
 1ac:	b.eq	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>  // b.none
 1b0:	ldr	x0, [sp, #64]
 1b4:	cmp	x0, #0x10
 1b8:	b.ne	1e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1e4>  // b.any
 1bc:	ldrb	w0, [sp, #79]
 1c0:	cmp	w0, #0x0
 1c4:	b.eq	1e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1e4>  // b.none
 1c8:	ldr	x1, [sp, #40]
 1cc:	ldr	x0, [sp, #96]
 1d0:	add	x0, x0, #0x1
 1d4:	lsl	x0, x0, #4
 1d8:	add	x0, x1, x0
 1dc:	ldr	x0, [x0, #8]
 1e0:	str	x0, [sp, #64]
 1e4:	ldr	w0, [sp, #56]
 1e8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 1ec:	and	w0, w0, #0xff
 1f0:	cmp	w0, #0x0
 1f4:	b.eq	214 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x214>  // b.none
 1f8:	ldrb	w0, [sp, #78]
 1fc:	eor	w0, w0, #0x1
 200:	and	w0, w0, #0xff
 204:	cmp	w0, #0x0
 208:	b.eq	214 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x214>  // b.none
 20c:	mov	w0, #0x1                   	// #1
 210:	b	218 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x218>
 214:	mov	w0, #0x0                   	// #0
 218:	cmp	w0, #0x0
 21c:	b.eq	22c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x22c>  // b.none
 220:	ldr	w0, [sp, #56]
 224:	and	w0, w0, #0xfffffffd
 228:	str	w0, [sp, #56]
 22c:	ldr	x0, [sp, #16]
 230:	ldr	x0, [x0, #16]
 234:	cmp	x0, #0x0
 238:	b.ne	2f4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x2f4>  // b.any
 23c:	ldr	x0, [sp, #16]
 240:	mov	x3, x0
 244:	add	x2, sp, #0x30
 248:	ldp	x0, x1, [x2]
 24c:	stp	x0, x1, [x3]
 250:	ldr	x0, [x2, #16]
 254:	str	x0, [x3, #16]
 258:	ldr	x0, [sp, #16]
 25c:	ldr	w0, [x0, #8]
 260:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 264:	and	w0, w0, #0xff
 268:	eor	w0, w0, #0x1
 26c:	and	w0, w0, #0xff
 270:	cmp	w0, #0x0
 274:	b.eq	280 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x280>  // b.none
 278:	mov	w0, #0x1                   	// #1
 27c:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
 280:	ldr	x0, [sp, #16]
 284:	ldr	w0, [x0, #8]
 288:	and	w0, w0, #0x2
 28c:	cmp	w0, #0x0
 290:	b.eq	2b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x2b0>  // b.none
 294:	ldr	x0, [sp, #40]
 298:	ldr	w0, [x0, #16]
 29c:	and	w0, w0, #0x1
 2a0:	cmp	w0, #0x0
 2a4:	b.ne	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>  // b.any
 2a8:	mov	w0, #0x1                   	// #1
 2ac:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
 2b0:	ldr	x0, [sp, #16]
 2b4:	ldr	w0, [x0, #8]
 2b8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 2bc:	and	w0, w0, #0xff
 2c0:	eor	w0, w0, #0x1
 2c4:	and	w0, w0, #0xff
 2c8:	cmp	w0, #0x0
 2cc:	b.eq	2d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x2d8>  // b.none
 2d0:	mov	w0, #0x1                   	// #1
 2d4:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
 2d8:	ldr	x0, [sp, #40]
 2dc:	ldr	w0, [x0, #16]
 2e0:	and	w0, w0, #0x2
 2e4:	cmp	w0, #0x0
 2e8:	b.ne	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>  // b.any
 2ec:	mov	w0, #0x1                   	// #1
 2f0:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
 2f4:	ldr	x0, [sp, #16]
 2f8:	ldr	x1, [x0]
 2fc:	ldr	x0, [sp, #48]
 300:	cmp	x1, x0
 304:	b.eq	324 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x324>  // b.none
 308:	ldr	x0, [sp, #16]
 30c:	str	xzr, [x0]
 310:	ldr	x0, [sp, #16]
 314:	mov	w1, #0x2                   	// #2
 318:	str	w1, [x0, #8]
 31c:	mov	w0, #0x1                   	// #1
 320:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
 324:	ldr	x0, [sp, #16]
 328:	ldr	x0, [x0]
 32c:	cmp	x0, #0x0
 330:	b.eq	358 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x358>  // b.none
 334:	ldr	x0, [sp, #16]
 338:	ldr	w0, [x0, #8]
 33c:	mov	w1, w0
 340:	ldr	w0, [sp, #56]
 344:	orr	w0, w1, w0
 348:	mov	w1, w0
 34c:	ldr	x0, [sp, #16]
 350:	str	w1, [x0, #8]
 354:	b	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 358:	ldr	x0, [sp, #64]
 35c:	cmp	x0, #0x10
 360:	b.eq	3a4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3a4>  // b.none
 364:	ldr	x0, [sp, #16]
 368:	ldr	x0, [x0, #16]
 36c:	cmp	x0, #0x10
 370:	b.eq	3a4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3a4>  // b.none
 374:	ldr	x0, [sp, #64]
 378:	mov	x2, x0
 37c:	ldr	x0, [sp, #16]
 380:	ldr	x0, [x0, #16]
 384:	mov	x1, x0
 388:	mov	x0, x2
 38c:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 390:	and	w0, w0, #0xff
 394:	eor	w0, w0, #0x1
 398:	and	w0, w0, #0xff
 39c:	cmp	w0, #0x0
 3a0:	b.eq	3ac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3ac>  // b.none
 3a4:	mov	w0, #0x1                   	// #1
 3a8:	b	3b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3b0>
 3ac:	mov	w0, #0x0                   	// #0
 3b0:	cmp	w0, #0x0
 3b4:	b.eq	3cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3cc>  // b.none
 3b8:	ldr	x0, [sp, #16]
 3bc:	mov	w1, #0x2                   	// #2
 3c0:	str	w1, [x0, #8]
 3c4:	mov	w0, #0x1                   	// #1
 3c8:	b	40c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40c>
 3cc:	ldr	x0, [sp, #16]
 3d0:	ldr	w0, [x0, #8]
 3d4:	mov	w1, w0
 3d8:	ldr	w0, [sp, #56]
 3dc:	orr	w0, w1, w0
 3e0:	mov	w1, w0
 3e4:	ldr	x0, [sp, #16]
 3e8:	str	w1, [x0, #8]
 3ec:	b	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 3f0:	nop
 3f4:	b	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 3f8:	ldr	x0, [sp, #16]
 3fc:	ldr	w0, [x0, #8]
 400:	cmp	w0, #0x0
 404:	cset	w0, ne  // ne = any
 408:	and	w0, w0, #0xff
 40c:	ldp	x29, x30, [sp], #112
 410:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIlEEPKT_PKvl:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIlEEPKT_PKvl>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	ldr	x1, [sp, #8]
  14:	add	x0, x1, x0
  18:	add	sp, sp, #0x10
  1c:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIvEEPKT_PKvl:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_114adjust_pointerIvEEPKT_PKvl>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp]
  10:	ldr	x1, [sp, #8]
  14:	add	x0, x1, x0
  18:	add	sp, sp, #0x10
  1c:	ret

vterminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9type_info4nameEv:

0000000000000000 <_ZNKSt9type_info4nameEv>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	ldr	x0, [x0, #8]
  10:	ldrb	w0, [x0]
  14:	cmp	w0, #0x2a
  18:	b.ne	2c <_ZNKSt9type_info4nameEv+0x2c>  // b.any
  1c:	ldr	x0, [sp, #8]
  20:	ldr	x0, [x0, #8]
  24:	add	x0, x0, #0x1
  28:	b	34 <_ZNKSt9type_info4nameEv+0x34>
  2c:	ldr	x0, [sp, #8]
  30:	ldr	x0, [x0, #8]
  34:	add	sp, sp, #0x10
  38:	ret

Disassembly of section .text._ZN9__gnu_cxx27__verbose_terminate_handlerEv:

0000000000000000 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  10:	add	x0, x0, #0x0
  14:	ldrb	w0, [x0]
  18:	cmp	w0, #0x0
  1c:	b.eq	48 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x48>  // b.none
  20:	adrp	x0, 0 <stderr>
  24:	ldr	x0, [x0]
  28:	ldr	x0, [x0]
  2c:	mov	x3, x0
  30:	mov	x2, #0x1d                  	// #29
  34:	mov	x1, #0x1                   	// #1
  38:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <fwrite>
  44:	bl	0 <abort>
  48:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  4c:	add	x0, x0, #0x0
  50:	mov	w1, #0x1                   	// #1
  54:	strb	w1, [x0]
  58:	bl	0 <__cxa_current_exception_type>
  5c:	str	x0, [sp, #72]
  60:	ldr	x0, [sp, #72]
  64:	cmp	x0, #0x0
  68:	b.eq	140 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x140>  // b.none
  6c:	ldr	x0, [sp, #72]
  70:	bl	0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  74:	str	x0, [sp, #64]
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	str	w0, [sp, #36]
  80:	str	xzr, [sp, #56]
  84:	add	x0, sp, #0x24
  88:	mov	x3, x0
  8c:	mov	x2, #0x0                   	// #0
  90:	mov	x1, #0x0                   	// #0
  94:	ldr	x0, [sp, #64]
  98:	bl	0 <__cxa_demangle>
  9c:	str	x0, [sp, #56]
  a0:	adrp	x0, 0 <stderr>
  a4:	ldr	x0, [x0]
  a8:	ldr	x0, [x0]
  ac:	mov	x3, x0
  b0:	mov	x2, #0x30                  	// #48
  b4:	mov	x1, #0x1                   	// #1
  b8:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <fwrite>
  c4:	ldr	w0, [sp, #36]
  c8:	cmp	w0, #0x0
  cc:	b.ne	ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>  // b.any
  d0:	adrp	x0, 0 <stderr>
  d4:	ldr	x0, [x0]
  d8:	ldr	x0, [x0]
  dc:	mov	x1, x0
  e0:	ldr	x0, [sp, #56]
  e4:	bl	0 <fputs>
  e8:	b	104 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>
  ec:	adrp	x0, 0 <stderr>
  f0:	ldr	x0, [x0]
  f4:	ldr	x0, [x0]
  f8:	mov	x1, x0
  fc:	ldr	x0, [sp, #64]
 100:	bl	0 <fputs>
 104:	adrp	x0, 0 <stderr>
 108:	ldr	x0, [x0]
 10c:	ldr	x0, [x0]
 110:	mov	x3, x0
 114:	mov	x2, #0x2                   	// #2
 118:	mov	x1, #0x1                   	// #1
 11c:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 120:	add	x0, x0, #0x0
 124:	bl	0 <fwrite>
 128:	ldr	w0, [sp, #36]
 12c:	cmp	w0, #0x0
 130:	b.ne	13c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x13c>  // b.any
 134:	ldr	x0, [sp, #56]
 138:	bl	0 <free>
 13c:	bl	0 <__cxa_rethrow>
 140:	adrp	x0, 0 <stderr>
 144:	ldr	x0, [x0]
 148:	ldr	x0, [x0]
 14c:	mov	x3, x0
 150:	mov	x2, #0x2d                  	// #45
 154:	mov	x1, #0x1                   	// #1
 158:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <fwrite>
 164:	bl	0 <abort>
 168:	cmp	x1, #0x1
 16c:	b.ne	1f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1f0>  // b.any
 170:	bl	0 <__cxa_begin_catch>
 174:	str	x0, [sp, #48]
 178:	ldr	x0, [sp, #48]
 17c:	ldr	x0, [x0]
 180:	add	x0, x0, #0x10
 184:	ldr	x1, [x0]
 188:	ldr	x0, [sp, #48]
 18c:	blr	x1
 190:	str	x0, [sp, #40]
 194:	adrp	x0, 0 <stderr>
 198:	ldr	x0, [x0]
 19c:	ldr	x0, [x0]
 1a0:	mov	x3, x0
 1a4:	mov	x2, #0xb                   	// #11
 1a8:	mov	x1, #0x1                   	// #1
 1ac:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 1b0:	add	x0, x0, #0x0
 1b4:	bl	0 <fwrite>
 1b8:	adrp	x0, 0 <stderr>
 1bc:	ldr	x0, [x0]
 1c0:	ldr	x0, [x0]
 1c4:	mov	x1, x0
 1c8:	ldr	x0, [sp, #40]
 1cc:	bl	0 <fputs>
 1d0:	adrp	x0, 0 <stderr>
 1d4:	ldr	x0, [x0]
 1d8:	ldr	x0, [x0]
 1dc:	mov	x1, x0
 1e0:	mov	w0, #0xa                   	// #10
 1e4:	bl	0 <fputc>
 1e8:	bl	0 <__cxa_end_catch>
 1ec:	b	164 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x164>
 1f0:	bl	0 <__cxa_begin_catch>
 1f4:	bl	0 <__cxa_end_catch>
 1f8:	b	164 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x164>
 1fc:	mov	x19, x0
 200:	bl	0 <__cxa_end_catch>
 204:	mov	x0, x19
 208:	bl	0 <_Unwind_Resume>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_fnqual_component_type>:
       0:	sub	sp, sp, #0x10
       4:	str	w0, [sp, #12]
       8:	ldr	w0, [sp, #12]
       c:	sub	w0, w0, #0x1c
      10:	cmp	w0, #0x34
      14:	cset	w1, hi  // hi = pmore
      18:	and	w1, w1, #0xff
      1c:	cmp	w1, #0x0
      20:	b.ne	54 <is_fnqual_component_type+0x54>  // b.any
      24:	mov	x1, #0x1                   	// #1
      28:	lsl	x1, x1, x0
      2c:	mov	x0, #0x1f                  	// #31
      30:	movk	x0, #0x1a, lsl #48
      34:	and	x0, x1, x0
      38:	cmp	x0, #0x0
      3c:	cset	w0, ne  // ne = any
      40:	and	w0, w0, #0xff
      44:	cmp	w0, #0x0
      48:	b.eq	54 <is_fnqual_component_type+0x54>  // b.none
      4c:	mov	w0, #0x1                   	// #1
      50:	b	5c <is_fnqual_component_type+0x5c>
      54:	nop
      58:	mov	w0, #0x0                   	// #0
      5c:	add	sp, sp, #0x10
      60:	ret

0000000000000064 <d_fill_name>:
      64:	sub	sp, sp, #0x20
      68:	str	x0, [sp, #24]
      6c:	str	x1, [sp, #16]
      70:	str	w2, [sp, #12]
      74:	ldr	x0, [sp, #24]
      78:	cmp	x0, #0x0
      7c:	b.eq	98 <d_fill_name+0x34>  // b.none
      80:	ldr	x0, [sp, #16]
      84:	cmp	x0, #0x0
      88:	b.eq	98 <d_fill_name+0x34>  // b.none
      8c:	ldr	w0, [sp, #12]
      90:	cmp	w0, #0x0
      94:	b.gt	a0 <d_fill_name+0x3c>
      98:	mov	w0, #0x0                   	// #0
      9c:	b	cc <d_fill_name+0x68>
      a0:	ldr	x0, [sp, #24]
      a4:	str	wzr, [x0, #4]
      a8:	ldr	x0, [sp, #24]
      ac:	str	wzr, [x0]
      b0:	ldr	x0, [sp, #24]
      b4:	ldr	x1, [sp, #16]
      b8:	str	x1, [x0, #8]
      bc:	ldr	x0, [sp, #24]
      c0:	ldr	w1, [sp, #12]
      c4:	str	w1, [x0, #16]
      c8:	mov	w0, #0x1                   	// #1
      cc:	add	sp, sp, #0x20
      d0:	ret

00000000000000d4 <d_fill_extended_operator>:
      d4:	sub	sp, sp, #0x20
      d8:	str	x0, [sp, #24]
      dc:	str	w1, [sp, #20]
      e0:	str	x2, [sp, #8]
      e4:	ldr	x0, [sp, #24]
      e8:	cmp	x0, #0x0
      ec:	b.eq	108 <d_fill_extended_operator+0x34>  // b.none
      f0:	ldr	w0, [sp, #20]
      f4:	cmp	w0, #0x0
      f8:	b.lt	108 <d_fill_extended_operator+0x34>  // b.tstop
      fc:	ldr	x0, [sp, #8]
     100:	cmp	x0, #0x0
     104:	b.ne	110 <d_fill_extended_operator+0x3c>  // b.any
     108:	mov	w0, #0x0                   	// #0
     10c:	b	140 <d_fill_extended_operator+0x6c>
     110:	ldr	x0, [sp, #24]
     114:	str	wzr, [x0, #4]
     118:	ldr	x0, [sp, #24]
     11c:	mov	w1, #0x33                  	// #51
     120:	str	w1, [x0]
     124:	ldr	x0, [sp, #24]
     128:	ldr	w1, [sp, #20]
     12c:	str	w1, [x0, #8]
     130:	ldr	x0, [sp, #24]
     134:	ldr	x1, [sp, #8]
     138:	str	x1, [x0, #16]
     13c:	mov	w0, #0x1                   	// #1
     140:	add	sp, sp, #0x20
     144:	ret

0000000000000148 <d_fill_ctor>:
     148:	sub	sp, sp, #0x20
     14c:	str	x0, [sp, #24]
     150:	str	w1, [sp, #20]
     154:	str	x2, [sp, #8]
     158:	ldr	x0, [sp, #24]
     15c:	cmp	x0, #0x0
     160:	b.eq	188 <d_fill_ctor+0x40>  // b.none
     164:	ldr	x0, [sp, #8]
     168:	cmp	x0, #0x0
     16c:	b.eq	188 <d_fill_ctor+0x40>  // b.none
     170:	ldr	w0, [sp, #20]
     174:	cmp	w0, #0x0
     178:	b.le	188 <d_fill_ctor+0x40>
     17c:	ldr	w0, [sp, #20]
     180:	cmp	w0, #0x5
     184:	b.le	190 <d_fill_ctor+0x48>
     188:	mov	w0, #0x0                   	// #0
     18c:	b	1c0 <d_fill_ctor+0x78>
     190:	ldr	x0, [sp, #24]
     194:	str	wzr, [x0, #4]
     198:	ldr	x0, [sp, #24]
     19c:	mov	w1, #0x7                   	// #7
     1a0:	str	w1, [x0]
     1a4:	ldr	x0, [sp, #24]
     1a8:	ldr	w1, [sp, #20]
     1ac:	str	w1, [x0, #8]
     1b0:	ldr	x0, [sp, #24]
     1b4:	ldr	x1, [sp, #8]
     1b8:	str	x1, [x0, #16]
     1bc:	mov	w0, #0x1                   	// #1
     1c0:	add	sp, sp, #0x20
     1c4:	ret

00000000000001c8 <d_fill_dtor>:
     1c8:	sub	sp, sp, #0x20
     1cc:	str	x0, [sp, #24]
     1d0:	str	w1, [sp, #20]
     1d4:	str	x2, [sp, #8]
     1d8:	ldr	x0, [sp, #24]
     1dc:	cmp	x0, #0x0
     1e0:	b.eq	208 <d_fill_dtor+0x40>  // b.none
     1e4:	ldr	x0, [sp, #8]
     1e8:	cmp	x0, #0x0
     1ec:	b.eq	208 <d_fill_dtor+0x40>  // b.none
     1f0:	ldr	w0, [sp, #20]
     1f4:	cmp	w0, #0x0
     1f8:	b.le	208 <d_fill_dtor+0x40>
     1fc:	ldr	w0, [sp, #20]
     200:	cmp	w0, #0x5
     204:	b.le	210 <d_fill_dtor+0x48>
     208:	mov	w0, #0x0                   	// #0
     20c:	b	240 <d_fill_dtor+0x78>
     210:	ldr	x0, [sp, #24]
     214:	str	wzr, [x0, #4]
     218:	ldr	x0, [sp, #24]
     21c:	mov	w1, #0x8                   	// #8
     220:	str	w1, [x0]
     224:	ldr	x0, [sp, #24]
     228:	ldr	w1, [sp, #20]
     22c:	str	w1, [x0, #8]
     230:	ldr	x0, [sp, #24]
     234:	ldr	x1, [sp, #8]
     238:	str	x1, [x0, #16]
     23c:	mov	w0, #0x1                   	// #1
     240:	add	sp, sp, #0x20
     244:	ret

0000000000000248 <d_make_empty>:
     248:	sub	sp, sp, #0x20
     24c:	str	x0, [sp, #8]
     250:	ldr	x0, [sp, #8]
     254:	ldr	w1, [x0, #40]
     258:	ldr	x0, [sp, #8]
     25c:	ldr	w0, [x0, #44]
     260:	cmp	w1, w0
     264:	b.lt	270 <d_make_empty+0x28>  // b.tstop
     268:	mov	x0, #0x0                   	// #0
     26c:	b	2bc <d_make_empty+0x74>
     270:	ldr	x0, [sp, #8]
     274:	ldr	x2, [x0, #32]
     278:	ldr	x0, [sp, #8]
     27c:	ldr	w0, [x0, #40]
     280:	sxtw	x1, w0
     284:	mov	x0, x1
     288:	lsl	x0, x0, #1
     28c:	add	x0, x0, x1
     290:	lsl	x0, x0, #3
     294:	add	x0, x2, x0
     298:	str	x0, [sp, #24]
     29c:	ldr	x0, [sp, #24]
     2a0:	str	wzr, [x0, #4]
     2a4:	ldr	x0, [sp, #8]
     2a8:	ldr	w0, [x0, #40]
     2ac:	add	w1, w0, #0x1
     2b0:	ldr	x0, [sp, #8]
     2b4:	str	w1, [x0, #40]
     2b8:	ldr	x0, [sp, #24]
     2bc:	add	sp, sp, #0x20
     2c0:	ret

00000000000002c4 <d_make_comp>:
     2c4:	stp	x29, x30, [sp, #-64]!
     2c8:	mov	x29, sp
     2cc:	str	x0, [sp, #40]
     2d0:	str	w1, [sp, #36]
     2d4:	str	x2, [sp, #24]
     2d8:	str	x3, [sp, #16]
     2dc:	ldr	w0, [sp, #36]
     2e0:	sub	w0, w0, #0x1
     2e4:	cmp	w0, #0x4f
     2e8:	b.hi	34c <d_make_comp+0x88>  // b.pmore
     2ec:	adrp	x1, 0 <is_fnqual_component_type>
     2f0:	add	x1, x1, #0x0
     2f4:	ldr	w0, [x1, w0, uxtw #2]
     2f8:	adr	x1, 304 <d_make_comp+0x40>
     2fc:	add	x0, x1, w0, sxtw #2
     300:	br	x0
     304:	ldr	x0, [sp, #24]
     308:	cmp	x0, #0x0
     30c:	b.eq	31c <d_make_comp+0x58>  // b.none
     310:	ldr	x0, [sp, #16]
     314:	cmp	x0, #0x0
     318:	b.ne	35c <d_make_comp+0x98>  // b.any
     31c:	mov	x0, #0x0                   	// #0
     320:	b	3b0 <d_make_comp+0xec>
     324:	ldr	x0, [sp, #24]
     328:	cmp	x0, #0x0
     32c:	b.ne	364 <d_make_comp+0xa0>  // b.any
     330:	mov	x0, #0x0                   	// #0
     334:	b	3b0 <d_make_comp+0xec>
     338:	ldr	x0, [sp, #16]
     33c:	cmp	x0, #0x0
     340:	b.ne	36c <d_make_comp+0xa8>  // b.any
     344:	mov	x0, #0x0                   	// #0
     348:	b	3b0 <d_make_comp+0xec>
     34c:	mov	x0, #0x0                   	// #0
     350:	b	3b0 <d_make_comp+0xec>
     354:	nop
     358:	b	370 <d_make_comp+0xac>
     35c:	nop
     360:	b	370 <d_make_comp+0xac>
     364:	nop
     368:	b	370 <d_make_comp+0xac>
     36c:	nop
     370:	ldr	x0, [sp, #40]
     374:	bl	248 <d_make_empty>
     378:	str	x0, [sp, #56]
     37c:	ldr	x0, [sp, #56]
     380:	cmp	x0, #0x0
     384:	b.eq	3ac <d_make_comp+0xe8>  // b.none
     388:	ldr	x0, [sp, #56]
     38c:	ldr	w1, [sp, #36]
     390:	str	w1, [x0]
     394:	ldr	x0, [sp, #56]
     398:	ldr	x1, [sp, #24]
     39c:	str	x1, [x0, #8]
     3a0:	ldr	x0, [sp, #56]
     3a4:	ldr	x1, [sp, #16]
     3a8:	str	x1, [x0, #16]
     3ac:	ldr	x0, [sp, #56]
     3b0:	ldp	x29, x30, [sp], #64
     3b4:	ret

00000000000003b8 <d_make_demangle_mangled_name>:
     3b8:	stp	x29, x30, [sp, #-32]!
     3bc:	mov	x29, sp
     3c0:	str	x0, [sp, #24]
     3c4:	str	x1, [sp, #16]
     3c8:	ldr	x0, [sp, #24]
     3cc:	ldr	x0, [x0, #24]
     3d0:	ldrb	w0, [x0]
     3d4:	cmp	w0, #0x5f
     3d8:	b.ne	3f4 <d_make_demangle_mangled_name+0x3c>  // b.any
     3dc:	ldr	x0, [sp, #24]
     3e0:	ldr	x0, [x0, #24]
     3e4:	add	x0, x0, #0x1
     3e8:	ldrb	w0, [x0]
     3ec:	cmp	w0, #0x5a
     3f0:	b.eq	410 <d_make_demangle_mangled_name+0x58>  // b.none
     3f4:	ldr	x0, [sp, #16]
     3f8:	bl	0 <strlen>
     3fc:	mov	w2, w0
     400:	ldr	x1, [sp, #16]
     404:	ldr	x0, [sp, #24]
     408:	bl	438 <d_make_name>
     40c:	b	430 <d_make_demangle_mangled_name+0x78>
     410:	ldr	x0, [sp, #24]
     414:	ldr	x0, [x0, #24]
     418:	add	x1, x0, #0x2
     41c:	ldr	x0, [sp, #24]
     420:	str	x1, [x0, #24]
     424:	mov	w1, #0x0                   	// #0
     428:	ldr	x0, [sp, #24]
     42c:	bl	a20 <d_encoding>
     430:	ldp	x29, x30, [sp], #32
     434:	ret

0000000000000438 <d_make_name>:
     438:	stp	x29, x30, [sp, #-64]!
     43c:	mov	x29, sp
     440:	str	x0, [sp, #40]
     444:	str	x1, [sp, #32]
     448:	str	w2, [sp, #28]
     44c:	ldr	x0, [sp, #40]
     450:	bl	248 <d_make_empty>
     454:	str	x0, [sp, #56]
     458:	ldr	w2, [sp, #28]
     45c:	ldr	x1, [sp, #32]
     460:	ldr	x0, [sp, #56]
     464:	bl	64 <d_fill_name>
     468:	cmp	w0, #0x0
     46c:	b.ne	478 <d_make_name+0x40>  // b.any
     470:	mov	x0, #0x0                   	// #0
     474:	b	47c <d_make_name+0x44>
     478:	ldr	x0, [sp, #56]
     47c:	ldp	x29, x30, [sp], #64
     480:	ret

0000000000000484 <d_make_builtin_type>:
     484:	stp	x29, x30, [sp, #-48]!
     488:	mov	x29, sp
     48c:	str	x0, [sp, #24]
     490:	str	x1, [sp, #16]
     494:	ldr	x0, [sp, #16]
     498:	cmp	x0, #0x0
     49c:	b.ne	4a8 <d_make_builtin_type+0x24>  // b.any
     4a0:	mov	x0, #0x0                   	// #0
     4a4:	b	4dc <d_make_builtin_type+0x58>
     4a8:	ldr	x0, [sp, #24]
     4ac:	bl	248 <d_make_empty>
     4b0:	str	x0, [sp, #40]
     4b4:	ldr	x0, [sp, #40]
     4b8:	cmp	x0, #0x0
     4bc:	b.eq	4d8 <d_make_builtin_type+0x54>  // b.none
     4c0:	ldr	x0, [sp, #40]
     4c4:	mov	w1, #0x27                  	// #39
     4c8:	str	w1, [x0]
     4cc:	ldr	x0, [sp, #40]
     4d0:	ldr	x1, [sp, #16]
     4d4:	str	x1, [x0, #8]
     4d8:	ldr	x0, [sp, #40]
     4dc:	ldp	x29, x30, [sp], #48
     4e0:	ret

00000000000004e4 <d_make_operator>:
     4e4:	stp	x29, x30, [sp, #-48]!
     4e8:	mov	x29, sp
     4ec:	str	x0, [sp, #24]
     4f0:	str	x1, [sp, #16]
     4f4:	ldr	x0, [sp, #24]
     4f8:	bl	248 <d_make_empty>
     4fc:	str	x0, [sp, #40]
     500:	ldr	x0, [sp, #40]
     504:	cmp	x0, #0x0
     508:	b.eq	524 <d_make_operator+0x40>  // b.none
     50c:	ldr	x0, [sp, #40]
     510:	mov	w1, #0x32                  	// #50
     514:	str	w1, [x0]
     518:	ldr	x0, [sp, #40]
     51c:	ldr	x1, [sp, #16]
     520:	str	x1, [x0, #8]
     524:	ldr	x0, [sp, #40]
     528:	ldp	x29, x30, [sp], #48
     52c:	ret

0000000000000530 <d_make_extended_operator>:
     530:	stp	x29, x30, [sp, #-64]!
     534:	mov	x29, sp
     538:	str	x0, [sp, #40]
     53c:	str	w1, [sp, #36]
     540:	str	x2, [sp, #24]
     544:	ldr	x0, [sp, #40]
     548:	bl	248 <d_make_empty>
     54c:	str	x0, [sp, #56]
     550:	ldr	x2, [sp, #24]
     554:	ldr	w1, [sp, #36]
     558:	ldr	x0, [sp, #56]
     55c:	bl	d4 <d_fill_extended_operator>
     560:	cmp	w0, #0x0
     564:	b.ne	570 <d_make_extended_operator+0x40>  // b.any
     568:	mov	x0, #0x0                   	// #0
     56c:	b	574 <d_make_extended_operator+0x44>
     570:	ldr	x0, [sp, #56]
     574:	ldp	x29, x30, [sp], #64
     578:	ret

000000000000057c <d_make_default_arg>:
     57c:	stp	x29, x30, [sp, #-64]!
     580:	mov	x29, sp
     584:	str	x0, [sp, #40]
     588:	str	w1, [sp, #36]
     58c:	str	x2, [sp, #24]
     590:	ldr	x0, [sp, #40]
     594:	bl	248 <d_make_empty>
     598:	str	x0, [sp, #56]
     59c:	ldr	x0, [sp, #56]
     5a0:	cmp	x0, #0x0
     5a4:	b.eq	5cc <d_make_default_arg+0x50>  // b.none
     5a8:	ldr	x0, [sp, #56]
     5ac:	mov	w1, #0x47                  	// #71
     5b0:	str	w1, [x0]
     5b4:	ldr	x0, [sp, #56]
     5b8:	ldr	w1, [sp, #36]
     5bc:	str	w1, [x0, #16]
     5c0:	ldr	x0, [sp, #56]
     5c4:	ldr	x1, [sp, #24]
     5c8:	str	x1, [x0, #8]
     5cc:	ldr	x0, [sp, #56]
     5d0:	ldp	x29, x30, [sp], #64
     5d4:	ret

00000000000005d8 <d_make_ctor>:
     5d8:	stp	x29, x30, [sp, #-64]!
     5dc:	mov	x29, sp
     5e0:	str	x0, [sp, #40]
     5e4:	str	w1, [sp, #36]
     5e8:	str	x2, [sp, #24]
     5ec:	ldr	x0, [sp, #40]
     5f0:	bl	248 <d_make_empty>
     5f4:	str	x0, [sp, #56]
     5f8:	ldr	x2, [sp, #24]
     5fc:	ldr	w1, [sp, #36]
     600:	ldr	x0, [sp, #56]
     604:	bl	148 <d_fill_ctor>
     608:	cmp	w0, #0x0
     60c:	b.ne	618 <d_make_ctor+0x40>  // b.any
     610:	mov	x0, #0x0                   	// #0
     614:	b	61c <d_make_ctor+0x44>
     618:	ldr	x0, [sp, #56]
     61c:	ldp	x29, x30, [sp], #64
     620:	ret

0000000000000624 <d_make_dtor>:
     624:	stp	x29, x30, [sp, #-64]!
     628:	mov	x29, sp
     62c:	str	x0, [sp, #40]
     630:	str	w1, [sp, #36]
     634:	str	x2, [sp, #24]
     638:	ldr	x0, [sp, #40]
     63c:	bl	248 <d_make_empty>
     640:	str	x0, [sp, #56]
     644:	ldr	x2, [sp, #24]
     648:	ldr	w1, [sp, #36]
     64c:	ldr	x0, [sp, #56]
     650:	bl	1c8 <d_fill_dtor>
     654:	cmp	w0, #0x0
     658:	b.ne	664 <d_make_dtor+0x40>  // b.any
     65c:	mov	x0, #0x0                   	// #0
     660:	b	668 <d_make_dtor+0x44>
     664:	ldr	x0, [sp, #56]
     668:	ldp	x29, x30, [sp], #64
     66c:	ret

0000000000000670 <d_make_template_param>:
     670:	stp	x29, x30, [sp, #-48]!
     674:	mov	x29, sp
     678:	str	x0, [sp, #24]
     67c:	str	w1, [sp, #20]
     680:	ldr	x0, [sp, #24]
     684:	bl	248 <d_make_empty>
     688:	str	x0, [sp, #40]
     68c:	ldr	x0, [sp, #40]
     690:	cmp	x0, #0x0
     694:	b.eq	6b0 <d_make_template_param+0x40>  // b.none
     698:	ldr	x0, [sp, #40]
     69c:	mov	w1, #0x5                   	// #5
     6a0:	str	w1, [x0]
     6a4:	ldrsw	x1, [sp, #20]
     6a8:	ldr	x0, [sp, #40]
     6ac:	str	x1, [x0, #8]
     6b0:	ldr	x0, [sp, #40]
     6b4:	ldp	x29, x30, [sp], #48
     6b8:	ret

00000000000006bc <d_make_function_param>:
     6bc:	stp	x29, x30, [sp, #-48]!
     6c0:	mov	x29, sp
     6c4:	str	x0, [sp, #24]
     6c8:	str	w1, [sp, #20]
     6cc:	ldr	x0, [sp, #24]
     6d0:	bl	248 <d_make_empty>
     6d4:	str	x0, [sp, #40]
     6d8:	ldr	x0, [sp, #40]
     6dc:	cmp	x0, #0x0
     6e0:	b.eq	6fc <d_make_function_param+0x40>  // b.none
     6e4:	ldr	x0, [sp, #40]
     6e8:	mov	w1, #0x6                   	// #6
     6ec:	str	w1, [x0]
     6f0:	ldrsw	x1, [sp, #20]
     6f4:	ldr	x0, [sp, #40]
     6f8:	str	x1, [x0, #8]
     6fc:	ldr	x0, [sp, #40]
     700:	ldp	x29, x30, [sp], #48
     704:	ret

0000000000000708 <d_make_sub>:
     708:	stp	x29, x30, [sp, #-64]!
     70c:	mov	x29, sp
     710:	str	x0, [sp, #40]
     714:	str	x1, [sp, #32]
     718:	str	w2, [sp, #28]
     71c:	ldr	x0, [sp, #40]
     720:	bl	248 <d_make_empty>
     724:	str	x0, [sp, #56]
     728:	ldr	x0, [sp, #56]
     72c:	cmp	x0, #0x0
     730:	b.eq	758 <d_make_sub+0x50>  // b.none
     734:	ldr	x0, [sp, #56]
     738:	mov	w1, #0x18                  	// #24
     73c:	str	w1, [x0]
     740:	ldr	x0, [sp, #56]
     744:	ldr	x1, [sp, #32]
     748:	str	x1, [x0, #8]
     74c:	ldr	x0, [sp, #56]
     750:	ldr	w1, [sp, #28]
     754:	str	w1, [x0, #16]
     758:	ldr	x0, [sp, #56]
     75c:	ldp	x29, x30, [sp], #64
     760:	ret

0000000000000764 <d_mangled_name>:
     764:	stp	x29, x30, [sp, #-48]!
     768:	mov	x29, sp
     76c:	str	x0, [sp, #24]
     770:	str	w1, [sp, #20]
     774:	ldr	x0, [sp, #24]
     778:	ldr	x0, [x0, #24]
     77c:	ldrb	w0, [x0]
     780:	cmp	w0, #0x5f
     784:	b.ne	7a4 <d_mangled_name+0x40>  // b.any
     788:	ldr	x0, [sp, #24]
     78c:	ldr	x0, [x0, #24]
     790:	add	x1, x0, #0x1
     794:	ldr	x0, [sp, #24]
     798:	str	x1, [x0, #24]
     79c:	mov	w0, #0x0                   	// #0
     7a0:	b	7a8 <d_mangled_name+0x44>
     7a4:	mov	w0, #0x1                   	// #1
     7a8:	cmp	w0, #0x0
     7ac:	b.eq	7c4 <d_mangled_name+0x60>  // b.none
     7b0:	ldr	w0, [sp, #20]
     7b4:	cmp	w0, #0x0
     7b8:	b.eq	7c4 <d_mangled_name+0x60>  // b.none
     7bc:	mov	x0, #0x0                   	// #0
     7c0:	b	8dc <d_mangled_name+0x178>
     7c4:	ldr	x0, [sp, #24]
     7c8:	ldr	x0, [x0, #24]
     7cc:	ldrb	w0, [x0]
     7d0:	cmp	w0, #0x5a
     7d4:	b.ne	7f4 <d_mangled_name+0x90>  // b.any
     7d8:	ldr	x0, [sp, #24]
     7dc:	ldr	x0, [x0, #24]
     7e0:	add	x1, x0, #0x1
     7e4:	ldr	x0, [sp, #24]
     7e8:	str	x1, [x0, #24]
     7ec:	mov	w0, #0x0                   	// #0
     7f0:	b	7f8 <d_mangled_name+0x94>
     7f4:	mov	w0, #0x1                   	// #1
     7f8:	cmp	w0, #0x0
     7fc:	b.eq	808 <d_mangled_name+0xa4>  // b.none
     800:	mov	x0, #0x0                   	// #0
     804:	b	8dc <d_mangled_name+0x178>
     808:	ldr	w1, [sp, #20]
     80c:	ldr	x0, [sp, #24]
     810:	bl	a20 <d_encoding>
     814:	str	x0, [sp, #40]
     818:	ldr	w0, [sp, #20]
     81c:	cmp	w0, #0x0
     820:	b.eq	8d8 <d_mangled_name+0x174>  // b.none
     824:	ldr	x0, [sp, #24]
     828:	ldr	w0, [x0, #16]
     82c:	and	w0, w0, #0x1
     830:	cmp	w0, #0x0
     834:	b.eq	8d8 <d_mangled_name+0x174>  // b.none
     838:	b	84c <d_mangled_name+0xe8>
     83c:	ldr	x1, [sp, #40]
     840:	ldr	x0, [sp, #24]
     844:	bl	534c <d_clone_suffix>
     848:	str	x0, [sp, #40]
     84c:	ldr	x0, [sp, #24]
     850:	ldr	x0, [x0, #24]
     854:	ldrb	w0, [x0]
     858:	cmp	w0, #0x2e
     85c:	b.ne	8d8 <d_mangled_name+0x174>  // b.any
     860:	ldr	x0, [sp, #24]
     864:	ldr	x0, [x0, #24]
     868:	add	x0, x0, #0x1
     86c:	ldrb	w0, [x0]
     870:	cmp	w0, #0x60
     874:	b.ls	890 <d_mangled_name+0x12c>  // b.plast
     878:	ldr	x0, [sp, #24]
     87c:	ldr	x0, [x0, #24]
     880:	add	x0, x0, #0x1
     884:	ldrb	w0, [x0]
     888:	cmp	w0, #0x7a
     88c:	b.ls	83c <d_mangled_name+0xd8>  // b.plast
     890:	ldr	x0, [sp, #24]
     894:	ldr	x0, [x0, #24]
     898:	add	x0, x0, #0x1
     89c:	ldrb	w0, [x0]
     8a0:	cmp	w0, #0x5f
     8a4:	b.eq	83c <d_mangled_name+0xd8>  // b.none
     8a8:	ldr	x0, [sp, #24]
     8ac:	ldr	x0, [x0, #24]
     8b0:	add	x0, x0, #0x1
     8b4:	ldrb	w0, [x0]
     8b8:	cmp	w0, #0x2f
     8bc:	b.ls	8d8 <d_mangled_name+0x174>  // b.plast
     8c0:	ldr	x0, [sp, #24]
     8c4:	ldr	x0, [x0, #24]
     8c8:	add	x0, x0, #0x1
     8cc:	ldrb	w0, [x0]
     8d0:	cmp	w0, #0x39
     8d4:	b.ls	83c <d_mangled_name+0xd8>  // b.plast
     8d8:	ldr	x0, [sp, #40]
     8dc:	ldp	x29, x30, [sp], #48
     8e0:	ret

00000000000008e4 <has_return_type>:
     8e4:	stp	x29, x30, [sp, #-32]!
     8e8:	mov	x29, sp
     8ec:	str	x0, [sp, #24]
     8f0:	ldr	x0, [sp, #24]
     8f4:	cmp	x0, #0x0
     8f8:	b.ne	904 <has_return_type+0x20>  // b.any
     8fc:	mov	w0, #0x0                   	// #0
     900:	b	99c <has_return_type+0xb8>
     904:	ldr	x0, [sp, #24]
     908:	ldr	w0, [x0]
     90c:	cmp	w0, #0x50
     910:	b.hi	95c <has_return_type+0x78>  // b.pmore
     914:	cmp	w0, #0x1c
     918:	b.cs	930 <has_return_type+0x4c>  // b.hs, b.nlast
     91c:	cmp	w0, #0x2
     920:	b.eq	964 <has_return_type+0x80>  // b.none
     924:	cmp	w0, #0x4
     928:	b.eq	974 <has_return_type+0x90>  // b.none
     92c:	b	95c <has_return_type+0x78>
     930:	sub	w0, w0, #0x1c
     934:	mov	x1, #0x1                   	// #1
     938:	lsl	x1, x1, x0
     93c:	mov	x0, #0x1f                  	// #31
     940:	movk	x0, #0x1a, lsl #48
     944:	and	x0, x1, x0
     948:	cmp	x0, #0x0
     94c:	cset	w0, ne  // ne = any
     950:	and	w0, w0, #0xff
     954:	cmp	w0, #0x0
     958:	b.ne	990 <has_return_type+0xac>  // b.any
     95c:	mov	w0, #0x0                   	// #0
     960:	b	99c <has_return_type+0xb8>
     964:	ldr	x0, [sp, #24]
     968:	ldr	x0, [x0, #16]
     96c:	bl	8e4 <has_return_type>
     970:	b	99c <has_return_type+0xb8>
     974:	ldr	x0, [sp, #24]
     978:	ldr	x0, [x0, #8]
     97c:	bl	9a4 <is_ctor_dtor_or_conversion>
     980:	cmp	w0, #0x0
     984:	cset	w0, eq  // eq = none
     988:	and	w0, w0, #0xff
     98c:	b	99c <has_return_type+0xb8>
     990:	ldr	x0, [sp, #24]
     994:	ldr	x0, [x0, #8]
     998:	bl	8e4 <has_return_type>
     99c:	ldp	x29, x30, [sp], #32
     9a0:	ret

00000000000009a4 <is_ctor_dtor_or_conversion>:
     9a4:	stp	x29, x30, [sp, #-32]!
     9a8:	mov	x29, sp
     9ac:	str	x0, [sp, #24]
     9b0:	ldr	x0, [sp, #24]
     9b4:	cmp	x0, #0x0
     9b8:	b.ne	9c4 <is_ctor_dtor_or_conversion+0x20>  // b.any
     9bc:	mov	w0, #0x0                   	// #0
     9c0:	b	a18 <is_ctor_dtor_or_conversion+0x74>
     9c4:	ldr	x0, [sp, #24]
     9c8:	ldr	w0, [x0]
     9cc:	cmp	w0, #0x35
     9d0:	b.eq	a14 <is_ctor_dtor_or_conversion+0x70>  // b.none
     9d4:	cmp	w0, #0x35
     9d8:	b.hi	9fc <is_ctor_dtor_or_conversion+0x58>  // b.pmore
     9dc:	cmp	w0, #0x2
     9e0:	b.hi	9f0 <is_ctor_dtor_or_conversion+0x4c>  // b.pmore
     9e4:	cmp	w0, #0x0
     9e8:	b.ne	a04 <is_ctor_dtor_or_conversion+0x60>  // b.any
     9ec:	b	9fc <is_ctor_dtor_or_conversion+0x58>
     9f0:	sub	w0, w0, #0x7
     9f4:	cmp	w0, #0x1
     9f8:	b.ls	a14 <is_ctor_dtor_or_conversion+0x70>  // b.plast
     9fc:	mov	w0, #0x0                   	// #0
     a00:	b	a18 <is_ctor_dtor_or_conversion+0x74>
     a04:	ldr	x0, [sp, #24]
     a08:	ldr	x0, [x0, #16]
     a0c:	bl	9a4 <is_ctor_dtor_or_conversion>
     a10:	b	a18 <is_ctor_dtor_or_conversion+0x74>
     a14:	mov	w0, #0x1                   	// #1
     a18:	ldp	x29, x30, [sp], #32
     a1c:	ret

0000000000000a20 <d_encoding>:
     a20:	stp	x29, x30, [sp, #-64]!
     a24:	mov	x29, sp
     a28:	str	x0, [sp, #24]
     a2c:	str	w1, [sp, #20]
     a30:	ldr	x0, [sp, #24]
     a34:	ldr	x0, [x0, #24]
     a38:	ldrb	w0, [x0]
     a3c:	strb	w0, [sp, #55]
     a40:	ldrb	w0, [sp, #55]
     a44:	cmp	w0, #0x47
     a48:	b.eq	a58 <d_encoding+0x38>  // b.none
     a4c:	ldrb	w0, [sp, #55]
     a50:	cmp	w0, #0x54
     a54:	b.ne	a68 <d_encoding+0x48>  // b.any
     a58:	ldr	x0, [sp, #24]
     a5c:	bl	1c88 <d_special_name>
     a60:	str	x0, [sp, #56]
     a64:	b	ba8 <d_encoding+0x188>
     a68:	ldr	x0, [sp, #24]
     a6c:	bl	c40 <d_name>
     a70:	str	x0, [sp, #56]
     a74:	ldr	x0, [sp, #56]
     a78:	cmp	x0, #0x0
     a7c:	b.eq	ba8 <d_encoding+0x188>  // b.none
     a80:	ldr	w0, [sp, #20]
     a84:	cmp	w0, #0x0
     a88:	b.eq	b08 <d_encoding+0xe8>  // b.none
     a8c:	ldr	x0, [sp, #24]
     a90:	ldr	w0, [x0, #16]
     a94:	and	w0, w0, #0x1
     a98:	cmp	w0, #0x0
     a9c:	b.ne	b08 <d_encoding+0xe8>  // b.any
     aa0:	b	ab0 <d_encoding+0x90>
     aa4:	ldr	x0, [sp, #56]
     aa8:	ldr	x0, [x0, #8]
     aac:	str	x0, [sp, #56]
     ab0:	ldr	x0, [sp, #56]
     ab4:	ldr	w0, [x0]
     ab8:	bl	0 <is_fnqual_component_type>
     abc:	cmp	w0, #0x0
     ac0:	b.ne	aa4 <d_encoding+0x84>  // b.any
     ac4:	ldr	x0, [sp, #56]
     ac8:	ldr	w0, [x0]
     acc:	cmp	w0, #0x2
     ad0:	b.ne	ba8 <d_encoding+0x188>  // b.any
     ad4:	b	aec <d_encoding+0xcc>
     ad8:	ldr	x0, [sp, #56]
     adc:	ldr	x0, [x0, #16]
     ae0:	ldr	x1, [x0, #8]
     ae4:	ldr	x0, [sp, #56]
     ae8:	str	x1, [x0, #16]
     aec:	ldr	x0, [sp, #56]
     af0:	ldr	x0, [x0, #16]
     af4:	ldr	w0, [x0]
     af8:	bl	0 <is_fnqual_component_type>
     afc:	cmp	w0, #0x0
     b00:	b.ne	ad8 <d_encoding+0xb8>  // b.any
     b04:	b	ba8 <d_encoding+0x188>
     b08:	ldr	x0, [sp, #24]
     b0c:	ldr	x0, [x0, #24]
     b10:	ldrb	w0, [x0]
     b14:	strb	w0, [sp, #55]
     b18:	ldrb	w0, [sp, #55]
     b1c:	cmp	w0, #0x0
     b20:	b.eq	ba8 <d_encoding+0x188>  // b.none
     b24:	ldrb	w0, [sp, #55]
     b28:	cmp	w0, #0x45
     b2c:	b.eq	ba8 <d_encoding+0x188>  // b.none
     b30:	ldr	x0, [sp, #56]
     b34:	bl	8e4 <has_return_type>
     b38:	mov	w1, w0
     b3c:	ldr	x0, [sp, #24]
     b40:	bl	3920 <d_bare_function_type>
     b44:	str	x0, [sp, #40]
     b48:	ldr	x0, [sp, #40]
     b4c:	cmp	x0, #0x0
     b50:	b.eq	ba4 <d_encoding+0x184>  // b.none
     b54:	ldr	w0, [sp, #20]
     b58:	cmp	w0, #0x0
     b5c:	b.ne	b88 <d_encoding+0x168>  // b.any
     b60:	ldr	x0, [sp, #56]
     b64:	ldr	w0, [x0]
     b68:	cmp	w0, #0x2
     b6c:	b.ne	b88 <d_encoding+0x168>  // b.any
     b70:	ldr	x0, [sp, #40]
     b74:	ldr	w0, [x0]
     b78:	cmp	w0, #0x29
     b7c:	b.ne	b88 <d_encoding+0x168>  // b.any
     b80:	ldr	x0, [sp, #40]
     b84:	str	xzr, [x0, #8]
     b88:	ldr	x3, [sp, #40]
     b8c:	ldr	x2, [sp, #56]
     b90:	mov	w1, #0x3                   	// #3
     b94:	ldr	x0, [sp, #24]
     b98:	bl	2c4 <d_make_comp>
     b9c:	str	x0, [sp, #56]
     ba0:	b	ba8 <d_encoding+0x188>
     ba4:	str	xzr, [sp, #56]
     ba8:	ldr	x0, [sp, #56]
     bac:	ldp	x29, x30, [sp], #64
     bb0:	ret

0000000000000bb4 <d_abi_tags>:
     bb4:	stp	x29, x30, [sp, #-64]!
     bb8:	mov	x29, sp
     bbc:	str	x0, [sp, #24]
     bc0:	str	x1, [sp, #16]
     bc4:	ldr	x0, [sp, #24]
     bc8:	ldr	x0, [x0, #64]
     bcc:	str	x0, [sp, #56]
     bd0:	b	c0c <d_abi_tags+0x58>
     bd4:	ldr	x0, [sp, #24]
     bd8:	ldr	x0, [x0, #24]
     bdc:	add	x1, x0, #0x1
     be0:	ldr	x0, [sp, #24]
     be4:	str	x1, [x0, #24]
     be8:	ldr	x0, [sp, #24]
     bec:	bl	13c4 <d_source_name>
     bf0:	str	x0, [sp, #40]
     bf4:	ldr	x3, [sp, #40]
     bf8:	ldr	x2, [sp, #16]
     bfc:	mov	w1, #0x4c                  	// #76
     c00:	ldr	x0, [sp, #24]
     c04:	bl	2c4 <d_make_comp>
     c08:	str	x0, [sp, #16]
     c0c:	ldr	x0, [sp, #24]
     c10:	ldr	x0, [x0, #24]
     c14:	ldrb	w0, [x0]
     c18:	strb	w0, [sp, #55]
     c1c:	ldrb	w0, [sp, #55]
     c20:	cmp	w0, #0x42
     c24:	b.eq	bd4 <d_abi_tags+0x20>  // b.none
     c28:	ldr	x0, [sp, #24]
     c2c:	ldr	x1, [sp, #56]
     c30:	str	x1, [x0, #64]
     c34:	ldr	x0, [sp, #16]
     c38:	ldp	x29, x30, [sp], #64
     c3c:	ret

0000000000000c40 <d_name>:
     c40:	stp	x29, x30, [sp, #-64]!
     c44:	mov	x29, sp
     c48:	str	x19, [sp, #16]
     c4c:	str	x0, [sp, #40]
     c50:	ldr	x0, [sp, #40]
     c54:	ldr	x0, [x0, #24]
     c58:	ldrb	w0, [x0]
     c5c:	strb	w0, [sp, #51]
     c60:	ldrb	w0, [sp, #51]
     c64:	cmp	w0, #0x5a
     c68:	b.eq	ca4 <d_name+0x64>  // b.none
     c6c:	cmp	w0, #0x5a
     c70:	b.gt	db8 <d_name+0x178>
     c74:	cmp	w0, #0x55
     c78:	b.eq	cb0 <d_name+0x70>  // b.none
     c7c:	cmp	w0, #0x55
     c80:	b.gt	db8 <d_name+0x178>
     c84:	cmp	w0, #0x4e
     c88:	b.eq	c98 <d_name+0x58>  // b.none
     c8c:	cmp	w0, #0x53
     c90:	b.eq	cbc <d_name+0x7c>  // b.none
     c94:	b	db8 <d_name+0x178>
     c98:	ldr	x0, [sp, #40]
     c9c:	bl	e24 <d_nested_name>
     ca0:	b	e18 <d_name+0x1d8>
     ca4:	ldr	x0, [sp, #40]
     ca8:	bl	4db4 <d_local_name>
     cac:	b	e18 <d_name+0x1d8>
     cb0:	ldr	x0, [sp, #40]
     cb4:	bl	1180 <d_unqualified_name>
     cb8:	b	e18 <d_name+0x1d8>
     cbc:	ldr	x0, [sp, #40]
     cc0:	ldr	x0, [x0, #24]
     cc4:	add	x0, x0, #0x1
     cc8:	ldrb	w0, [x0]
     ccc:	cmp	w0, #0x74
     cd0:	b.eq	cf0 <d_name+0xb0>  // b.none
     cd4:	mov	w1, #0x0                   	// #0
     cd8:	ldr	x0, [sp, #40]
     cdc:	bl	5560 <d_substitution>
     ce0:	str	x0, [sp, #56]
     ce4:	mov	w0, #0x1                   	// #1
     ce8:	str	w0, [sp, #52]
     cec:	b	d54 <d_name+0x114>
     cf0:	ldr	x0, [sp, #40]
     cf4:	ldr	x0, [x0, #24]
     cf8:	add	x1, x0, #0x2
     cfc:	ldr	x0, [sp, #40]
     d00:	str	x1, [x0, #24]
     d04:	mov	w2, #0x3                   	// #3
     d08:	adrp	x0, 0 <is_fnqual_component_type>
     d0c:	add	x1, x0, #0x0
     d10:	ldr	x0, [sp, #40]
     d14:	bl	438 <d_make_name>
     d18:	mov	x19, x0
     d1c:	ldr	x0, [sp, #40]
     d20:	bl	1180 <d_unqualified_name>
     d24:	mov	x3, x0
     d28:	mov	x2, x19
     d2c:	mov	w1, #0x1                   	// #1
     d30:	ldr	x0, [sp, #40]
     d34:	bl	2c4 <d_make_comp>
     d38:	str	x0, [sp, #56]
     d3c:	ldr	x0, [sp, #40]
     d40:	ldr	w0, [x0, #72]
     d44:	add	w1, w0, #0x3
     d48:	ldr	x0, [sp, #40]
     d4c:	str	w1, [x0, #72]
     d50:	str	wzr, [sp, #52]
     d54:	ldr	x0, [sp, #40]
     d58:	ldr	x0, [x0, #24]
     d5c:	ldrb	w0, [x0]
     d60:	cmp	w0, #0x49
     d64:	b.ne	db0 <d_name+0x170>  // b.any
     d68:	ldr	w0, [sp, #52]
     d6c:	cmp	w0, #0x0
     d70:	b.ne	d90 <d_name+0x150>  // b.any
     d74:	ldr	x1, [sp, #56]
     d78:	ldr	x0, [sp, #40]
     d7c:	bl	54dc <d_add_substitution>
     d80:	cmp	w0, #0x0
     d84:	b.ne	d90 <d_name+0x150>  // b.any
     d88:	mov	x0, #0x0                   	// #0
     d8c:	b	e18 <d_name+0x1d8>
     d90:	ldr	x0, [sp, #40]
     d94:	bl	3e28 <d_template_args>
     d98:	mov	x3, x0
     d9c:	ldr	x2, [sp, #56]
     da0:	mov	w1, #0x4                   	// #4
     da4:	ldr	x0, [sp, #40]
     da8:	bl	2c4 <d_make_comp>
     dac:	str	x0, [sp, #56]
     db0:	ldr	x0, [sp, #56]
     db4:	b	e18 <d_name+0x1d8>
     db8:	ldr	x0, [sp, #40]
     dbc:	bl	1180 <d_unqualified_name>
     dc0:	str	x0, [sp, #56]
     dc4:	ldr	x0, [sp, #40]
     dc8:	ldr	x0, [x0, #24]
     dcc:	ldrb	w0, [x0]
     dd0:	cmp	w0, #0x49
     dd4:	b.ne	e14 <d_name+0x1d4>  // b.any
     dd8:	ldr	x1, [sp, #56]
     ddc:	ldr	x0, [sp, #40]
     de0:	bl	54dc <d_add_substitution>
     de4:	cmp	w0, #0x0
     de8:	b.ne	df4 <d_name+0x1b4>  // b.any
     dec:	mov	x0, #0x0                   	// #0
     df0:	b	e18 <d_name+0x1d8>
     df4:	ldr	x0, [sp, #40]
     df8:	bl	3e28 <d_template_args>
     dfc:	mov	x3, x0
     e00:	ldr	x2, [sp, #56]
     e04:	mov	w1, #0x4                   	// #4
     e08:	ldr	x0, [sp, #40]
     e0c:	bl	2c4 <d_make_comp>
     e10:	str	x0, [sp, #56]
     e14:	ldr	x0, [sp, #56]
     e18:	ldr	x19, [sp, #16]
     e1c:	ldp	x29, x30, [sp], #64
     e20:	ret

0000000000000e24 <d_nested_name>:
     e24:	stp	x29, x30, [sp, #-64]!
     e28:	mov	x29, sp
     e2c:	str	x0, [sp, #24]
     e30:	ldr	x0, [sp, #24]
     e34:	ldr	x0, [x0, #24]
     e38:	ldrb	w0, [x0]
     e3c:	cmp	w0, #0x4e
     e40:	b.ne	e60 <d_nested_name+0x3c>  // b.any
     e44:	ldr	x0, [sp, #24]
     e48:	ldr	x0, [x0, #24]
     e4c:	add	x1, x0, #0x1
     e50:	ldr	x0, [sp, #24]
     e54:	str	x1, [x0, #24]
     e58:	mov	w0, #0x0                   	// #0
     e5c:	b	e64 <d_nested_name+0x40>
     e60:	mov	w0, #0x1                   	// #1
     e64:	cmp	w0, #0x0
     e68:	b.eq	e74 <d_nested_name+0x50>  // b.none
     e6c:	mov	x0, #0x0                   	// #0
     e70:	b	f44 <d_nested_name+0x120>
     e74:	add	x0, sp, #0x28
     e78:	mov	w2, #0x1                   	// #1
     e7c:	mov	x1, x0
     e80:	ldr	x0, [sp, #24]
     e84:	bl	31bc <d_cv_qualifiers>
     e88:	str	x0, [sp, #56]
     e8c:	ldr	x0, [sp, #56]
     e90:	cmp	x0, #0x0
     e94:	b.ne	ea0 <d_nested_name+0x7c>  // b.any
     e98:	mov	x0, #0x0                   	// #0
     e9c:	b	f44 <d_nested_name+0x120>
     ea0:	mov	x1, #0x0                   	// #0
     ea4:	ldr	x0, [sp, #24]
     ea8:	bl	359c <d_ref_qualifier>
     eac:	str	x0, [sp, #48]
     eb0:	ldr	x0, [sp, #24]
     eb4:	bl	f4c <d_prefix>
     eb8:	mov	x1, x0
     ebc:	ldr	x0, [sp, #56]
     ec0:	str	x1, [x0]
     ec4:	ldr	x0, [sp, #56]
     ec8:	ldr	x0, [x0]
     ecc:	cmp	x0, #0x0
     ed0:	b.ne	edc <d_nested_name+0xb8>  // b.any
     ed4:	mov	x0, #0x0                   	// #0
     ed8:	b	f44 <d_nested_name+0x120>
     edc:	ldr	x0, [sp, #48]
     ee0:	cmp	x0, #0x0
     ee4:	b.eq	efc <d_nested_name+0xd8>  // b.none
     ee8:	ldr	x1, [sp, #40]
     eec:	ldr	x0, [sp, #48]
     ef0:	str	x1, [x0, #8]
     ef4:	ldr	x0, [sp, #48]
     ef8:	str	x0, [sp, #40]
     efc:	ldr	x0, [sp, #24]
     f00:	ldr	x0, [x0, #24]
     f04:	ldrb	w0, [x0]
     f08:	cmp	w0, #0x45
     f0c:	b.ne	f2c <d_nested_name+0x108>  // b.any
     f10:	ldr	x0, [sp, #24]
     f14:	ldr	x0, [x0, #24]
     f18:	add	x1, x0, #0x1
     f1c:	ldr	x0, [sp, #24]
     f20:	str	x1, [x0, #24]
     f24:	mov	w0, #0x0                   	// #0
     f28:	b	f30 <d_nested_name+0x10c>
     f2c:	mov	w0, #0x1                   	// #1
     f30:	cmp	w0, #0x0
     f34:	b.eq	f40 <d_nested_name+0x11c>  // b.none
     f38:	mov	x0, #0x0                   	// #0
     f3c:	b	f44 <d_nested_name+0x120>
     f40:	ldr	x0, [sp, #40]
     f44:	ldp	x29, x30, [sp], #64
     f48:	ret

0000000000000f4c <d_prefix>:
     f4c:	stp	x29, x30, [sp, #-64]!
     f50:	mov	x29, sp
     f54:	str	x0, [sp, #24]
     f58:	str	xzr, [sp, #56]
     f5c:	ldr	x0, [sp, #24]
     f60:	ldr	x0, [x0, #24]
     f64:	ldrb	w0, [x0]
     f68:	strb	w0, [sp, #39]
     f6c:	ldrb	w0, [sp, #39]
     f70:	cmp	w0, #0x0
     f74:	b.ne	f80 <d_prefix+0x34>  // b.any
     f78:	mov	x0, #0x0                   	// #0
     f7c:	b	1178 <d_prefix+0x22c>
     f80:	mov	w0, #0x1                   	// #1
     f84:	str	w0, [sp, #52]
     f88:	ldrb	w0, [sp, #39]
     f8c:	cmp	w0, #0x44
     f90:	b.ne	fdc <d_prefix+0x90>  // b.any
     f94:	ldr	x0, [sp, #24]
     f98:	ldr	x0, [x0, #24]
     f9c:	ldrb	w0, [x0, #1]
     fa0:	strb	w0, [sp, #38]
     fa4:	ldrb	w0, [sp, #38]
     fa8:	cmp	w0, #0x54
     fac:	b.eq	fbc <d_prefix+0x70>  // b.none
     fb0:	ldrb	w0, [sp, #38]
     fb4:	cmp	w0, #0x74
     fb8:	b.ne	fcc <d_prefix+0x80>  // b.any
     fbc:	ldr	x0, [sp, #24]
     fc0:	bl	26d4 <d_type>
     fc4:	str	x0, [sp, #40]
     fc8:	b	1108 <d_prefix+0x1bc>
     fcc:	ldr	x0, [sp, #24]
     fd0:	bl	1180 <d_unqualified_name>
     fd4:	str	x0, [sp, #40]
     fd8:	b	1108 <d_prefix+0x1bc>
     fdc:	ldrb	w0, [sp, #39]
     fe0:	cmp	w0, #0x2f
     fe4:	b.ls	ff4 <d_prefix+0xa8>  // b.plast
     fe8:	ldrb	w0, [sp, #39]
     fec:	cmp	w0, #0x39
     ff0:	b.ls	1030 <d_prefix+0xe4>  // b.plast
     ff4:	ldrb	w0, [sp, #39]
     ff8:	cmp	w0, #0x60
     ffc:	b.ls	100c <d_prefix+0xc0>  // b.plast
    1000:	ldrb	w0, [sp, #39]
    1004:	cmp	w0, #0x7a
    1008:	b.ls	1030 <d_prefix+0xe4>  // b.plast
    100c:	ldrb	w0, [sp, #39]
    1010:	cmp	w0, #0x43
    1014:	b.eq	1030 <d_prefix+0xe4>  // b.none
    1018:	ldrb	w0, [sp, #39]
    101c:	cmp	w0, #0x55
    1020:	b.eq	1030 <d_prefix+0xe4>  // b.none
    1024:	ldrb	w0, [sp, #39]
    1028:	cmp	w0, #0x4c
    102c:	b.ne	1040 <d_prefix+0xf4>  // b.any
    1030:	ldr	x0, [sp, #24]
    1034:	bl	1180 <d_unqualified_name>
    1038:	str	x0, [sp, #40]
    103c:	b	1108 <d_prefix+0x1bc>
    1040:	ldrb	w0, [sp, #39]
    1044:	cmp	w0, #0x53
    1048:	b.ne	1060 <d_prefix+0x114>  // b.any
    104c:	mov	w1, #0x1                   	// #1
    1050:	ldr	x0, [sp, #24]
    1054:	bl	5560 <d_substitution>
    1058:	str	x0, [sp, #40]
    105c:	b	1108 <d_prefix+0x1bc>
    1060:	ldrb	w0, [sp, #39]
    1064:	cmp	w0, #0x49
    1068:	b.ne	1098 <d_prefix+0x14c>  // b.any
    106c:	ldr	x0, [sp, #56]
    1070:	cmp	x0, #0x0
    1074:	b.ne	1080 <d_prefix+0x134>  // b.any
    1078:	mov	x0, #0x0                   	// #0
    107c:	b	1178 <d_prefix+0x22c>
    1080:	mov	w0, #0x4                   	// #4
    1084:	str	w0, [sp, #52]
    1088:	ldr	x0, [sp, #24]
    108c:	bl	3e28 <d_template_args>
    1090:	str	x0, [sp, #40]
    1094:	b	1108 <d_prefix+0x1bc>
    1098:	ldrb	w0, [sp, #39]
    109c:	cmp	w0, #0x54
    10a0:	b.ne	10b4 <d_prefix+0x168>  // b.any
    10a4:	ldr	x0, [sp, #24]
    10a8:	bl	3da4 <d_template_param>
    10ac:	str	x0, [sp, #40]
    10b0:	b	1108 <d_prefix+0x1bc>
    10b4:	ldrb	w0, [sp, #39]
    10b8:	cmp	w0, #0x45
    10bc:	b.ne	10c8 <d_prefix+0x17c>  // b.any
    10c0:	ldr	x0, [sp, #56]
    10c4:	b	1178 <d_prefix+0x22c>
    10c8:	ldrb	w0, [sp, #39]
    10cc:	cmp	w0, #0x4d
    10d0:	b.ne	1100 <d_prefix+0x1b4>  // b.any
    10d4:	ldr	x0, [sp, #56]
    10d8:	cmp	x0, #0x0
    10dc:	b.ne	10e8 <d_prefix+0x19c>  // b.any
    10e0:	mov	x0, #0x0                   	// #0
    10e4:	b	1178 <d_prefix+0x22c>
    10e8:	ldr	x0, [sp, #24]
    10ec:	ldr	x0, [x0, #24]
    10f0:	add	x1, x0, #0x1
    10f4:	ldr	x0, [sp, #24]
    10f8:	str	x1, [x0, #24]
    10fc:	b	1174 <d_prefix+0x228>
    1100:	mov	x0, #0x0                   	// #0
    1104:	b	1178 <d_prefix+0x22c>
    1108:	ldr	x0, [sp, #56]
    110c:	cmp	x0, #0x0
    1110:	b.ne	1120 <d_prefix+0x1d4>  // b.any
    1114:	ldr	x0, [sp, #40]
    1118:	str	x0, [sp, #56]
    111c:	b	1138 <d_prefix+0x1ec>
    1120:	ldr	x3, [sp, #40]
    1124:	ldr	x2, [sp, #56]
    1128:	ldr	w1, [sp, #52]
    112c:	ldr	x0, [sp, #24]
    1130:	bl	2c4 <d_make_comp>
    1134:	str	x0, [sp, #56]
    1138:	ldrb	w0, [sp, #39]
    113c:	cmp	w0, #0x53
    1140:	b.eq	f5c <d_prefix+0x10>  // b.none
    1144:	ldr	x0, [sp, #24]
    1148:	ldr	x0, [x0, #24]
    114c:	ldrb	w0, [x0]
    1150:	cmp	w0, #0x45
    1154:	b.eq	f5c <d_prefix+0x10>  // b.none
    1158:	ldr	x1, [sp, #56]
    115c:	ldr	x0, [sp, #24]
    1160:	bl	54dc <d_add_substitution>
    1164:	cmp	w0, #0x0
    1168:	b.ne	f5c <d_prefix+0x10>  // b.any
    116c:	mov	x0, #0x0                   	// #0
    1170:	b	1178 <d_prefix+0x22c>
    1174:	b	f5c <d_prefix+0x10>
    1178:	ldp	x29, x30, [sp], #64
    117c:	ret

0000000000001180 <d_unqualified_name>:
    1180:	stp	x29, x30, [sp, #-48]!
    1184:	mov	x29, sp
    1188:	str	x0, [sp, #24]
    118c:	ldr	x0, [sp, #24]
    1190:	ldr	x0, [x0, #24]
    1194:	ldrb	w0, [x0]
    1198:	strb	w0, [sp, #39]
    119c:	ldrb	w0, [sp, #39]
    11a0:	cmp	w0, #0x2f
    11a4:	b.ls	11c4 <d_unqualified_name+0x44>  // b.plast
    11a8:	ldrb	w0, [sp, #39]
    11ac:	cmp	w0, #0x39
    11b0:	b.hi	11c4 <d_unqualified_name+0x44>  // b.pmore
    11b4:	ldr	x0, [sp, #24]
    11b8:	bl	13c4 <d_source_name>
    11bc:	str	x0, [sp, #40]
    11c0:	b	1394 <d_unqualified_name+0x214>
    11c4:	ldrb	w0, [sp, #39]
    11c8:	cmp	w0, #0x60
    11cc:	b.ls	12b0 <d_unqualified_name+0x130>  // b.plast
    11d0:	ldrb	w0, [sp, #39]
    11d4:	cmp	w0, #0x7a
    11d8:	b.hi	12b0 <d_unqualified_name+0x130>  // b.pmore
    11dc:	ldrb	w0, [sp, #39]
    11e0:	cmp	w0, #0x6f
    11e4:	b.ne	1214 <d_unqualified_name+0x94>  // b.any
    11e8:	ldr	x0, [sp, #24]
    11ec:	ldr	x0, [x0, #24]
    11f0:	add	x0, x0, #0x1
    11f4:	ldrb	w0, [x0]
    11f8:	cmp	w0, #0x6e
    11fc:	b.ne	1214 <d_unqualified_name+0x94>  // b.any
    1200:	ldr	x0, [sp, #24]
    1204:	ldr	x0, [x0, #24]
    1208:	add	x1, x0, #0x2
    120c:	ldr	x0, [sp, #24]
    1210:	str	x1, [x0, #24]
    1214:	ldr	x0, [sp, #24]
    1218:	bl	16f0 <d_operator_name>
    121c:	str	x0, [sp, #40]
    1220:	ldr	x0, [sp, #40]
    1224:	cmp	x0, #0x0
    1228:	b.eq	1390 <d_unqualified_name+0x210>  // b.none
    122c:	ldr	x0, [sp, #40]
    1230:	ldr	w0, [x0]
    1234:	cmp	w0, #0x32
    1238:	b.ne	1390 <d_unqualified_name+0x210>  // b.any
    123c:	ldr	x0, [sp, #24]
    1240:	ldr	w0, [x0, #72]
    1244:	mov	w1, w0
    1248:	ldr	x0, [sp, #40]
    124c:	ldr	x0, [x0, #8]
    1250:	ldr	w0, [x0, #16]
    1254:	add	w0, w1, w0
    1258:	add	w0, w0, #0x7
    125c:	mov	w1, w0
    1260:	ldr	x0, [sp, #24]
    1264:	str	w1, [x0, #72]
    1268:	ldr	x0, [sp, #40]
    126c:	ldr	x0, [x0, #8]
    1270:	ldr	x2, [x0]
    1274:	adrp	x0, 0 <is_fnqual_component_type>
    1278:	add	x1, x0, #0x0
    127c:	mov	x0, x2
    1280:	bl	0 <strcmp>
    1284:	cmp	w0, #0x0
    1288:	b.ne	1390 <d_unqualified_name+0x210>  // b.any
    128c:	ldr	x0, [sp, #24]
    1290:	bl	13c4 <d_source_name>
    1294:	mov	x3, x0
    1298:	ldr	x2, [sp, #40]
    129c:	mov	w1, #0x37                  	// #55
    12a0:	ldr	x0, [sp, #24]
    12a4:	bl	2c4 <d_make_comp>
    12a8:	str	x0, [sp, #40]
    12ac:	b	1390 <d_unqualified_name+0x210>
    12b0:	ldrb	w0, [sp, #39]
    12b4:	cmp	w0, #0x43
    12b8:	b.eq	12c8 <d_unqualified_name+0x148>  // b.none
    12bc:	ldrb	w0, [sp, #39]
    12c0:	cmp	w0, #0x44
    12c4:	b.ne	12d8 <d_unqualified_name+0x158>  // b.any
    12c8:	ldr	x0, [sp, #24]
    12cc:	bl	23a0 <d_ctor_dtor_name>
    12d0:	str	x0, [sp, #40]
    12d4:	b	1394 <d_unqualified_name+0x214>
    12d8:	ldrb	w0, [sp, #39]
    12dc:	cmp	w0, #0x4c
    12e0:	b.ne	1330 <d_unqualified_name+0x1b0>  // b.any
    12e4:	ldr	x0, [sp, #24]
    12e8:	ldr	x0, [x0, #24]
    12ec:	add	x1, x0, #0x1
    12f0:	ldr	x0, [sp, #24]
    12f4:	str	x1, [x0, #24]
    12f8:	ldr	x0, [sp, #24]
    12fc:	bl	13c4 <d_source_name>
    1300:	str	x0, [sp, #40]
    1304:	ldr	x0, [sp, #40]
    1308:	cmp	x0, #0x0
    130c:	b.ne	1318 <d_unqualified_name+0x198>  // b.any
    1310:	mov	x0, #0x0                   	// #0
    1314:	b	13bc <d_unqualified_name+0x23c>
    1318:	ldr	x0, [sp, #24]
    131c:	bl	4fd4 <d_discriminator>
    1320:	cmp	w0, #0x0
    1324:	b.ne	1394 <d_unqualified_name+0x214>  // b.any
    1328:	mov	x0, #0x0                   	// #0
    132c:	b	13bc <d_unqualified_name+0x23c>
    1330:	ldrb	w0, [sp, #39]
    1334:	cmp	w0, #0x55
    1338:	b.ne	1388 <d_unqualified_name+0x208>  // b.any
    133c:	ldr	x0, [sp, #24]
    1340:	ldr	x0, [x0, #24]
    1344:	add	x0, x0, #0x1
    1348:	ldrb	w0, [x0]
    134c:	cmp	w0, #0x6c
    1350:	b.eq	1360 <d_unqualified_name+0x1e0>  // b.none
    1354:	cmp	w0, #0x74
    1358:	b.eq	1370 <d_unqualified_name+0x1f0>  // b.none
    135c:	b	1380 <d_unqualified_name+0x200>
    1360:	ldr	x0, [sp, #24]
    1364:	bl	50c4 <d_lambda>
    1368:	str	x0, [sp, #40]
    136c:	b	1394 <d_unqualified_name+0x214>
    1370:	ldr	x0, [sp, #24]
    1374:	bl	5240 <d_unnamed_type>
    1378:	str	x0, [sp, #40]
    137c:	b	1394 <d_unqualified_name+0x214>
    1380:	mov	x0, #0x0                   	// #0
    1384:	b	13bc <d_unqualified_name+0x23c>
    1388:	mov	x0, #0x0                   	// #0
    138c:	b	13bc <d_unqualified_name+0x23c>
    1390:	nop
    1394:	ldr	x0, [sp, #24]
    1398:	ldr	x0, [x0, #24]
    139c:	ldrb	w0, [x0]
    13a0:	cmp	w0, #0x42
    13a4:	b.ne	13b8 <d_unqualified_name+0x238>  // b.any
    13a8:	ldr	x1, [sp, #40]
    13ac:	ldr	x0, [sp, #24]
    13b0:	bl	bb4 <d_abi_tags>
    13b4:	str	x0, [sp, #40]
    13b8:	ldr	x0, [sp, #40]
    13bc:	ldp	x29, x30, [sp], #48
    13c0:	ret

00000000000013c4 <d_source_name>:
    13c4:	stp	x29, x30, [sp, #-48]!
    13c8:	mov	x29, sp
    13cc:	str	x0, [sp, #24]
    13d0:	ldr	x0, [sp, #24]
    13d4:	bl	1418 <d_number>
    13d8:	str	w0, [sp, #44]
    13dc:	ldr	w0, [sp, #44]
    13e0:	cmp	w0, #0x0
    13e4:	b.gt	13f0 <d_source_name+0x2c>
    13e8:	mov	x0, #0x0                   	// #0
    13ec:	b	1410 <d_source_name+0x4c>
    13f0:	ldr	w1, [sp, #44]
    13f4:	ldr	x0, [sp, #24]
    13f8:	bl	1590 <d_identifier>
    13fc:	str	x0, [sp, #32]
    1400:	ldr	x0, [sp, #24]
    1404:	ldr	x1, [sp, #32]
    1408:	str	x1, [x0, #64]
    140c:	ldr	x0, [sp, #32]
    1410:	ldp	x29, x30, [sp], #48
    1414:	ret

0000000000001418 <d_number>:
    1418:	sub	sp, sp, #0x20
    141c:	str	x0, [sp, #8]
    1420:	str	wzr, [sp, #28]
    1424:	ldr	x0, [sp, #8]
    1428:	ldr	x0, [x0, #24]
    142c:	ldrb	w0, [x0]
    1430:	strb	w0, [sp, #27]
    1434:	ldrb	w0, [sp, #27]
    1438:	cmp	w0, #0x6e
    143c:	b.ne	146c <d_number+0x54>  // b.any
    1440:	mov	w0, #0x1                   	// #1
    1444:	str	w0, [sp, #28]
    1448:	ldr	x0, [sp, #8]
    144c:	ldr	x0, [x0, #24]
    1450:	add	x1, x0, #0x1
    1454:	ldr	x0, [sp, #8]
    1458:	str	x1, [x0, #24]
    145c:	ldr	x0, [sp, #8]
    1460:	ldr	x0, [x0, #24]
    1464:	ldrb	w0, [x0]
    1468:	strb	w0, [sp, #27]
    146c:	str	wzr, [sp, #20]
    1470:	ldrb	w0, [sp, #27]
    1474:	cmp	w0, #0x2f
    1478:	b.ls	1488 <d_number+0x70>  // b.plast
    147c:	ldrb	w0, [sp, #27]
    1480:	cmp	w0, #0x39
    1484:	b.ls	14a8 <d_number+0x90>  // b.plast
    1488:	ldr	w0, [sp, #28]
    148c:	cmp	w0, #0x0
    1490:	b.eq	14a0 <d_number+0x88>  // b.none
    1494:	ldr	w0, [sp, #20]
    1498:	neg	w0, w0
    149c:	str	w0, [sp, #20]
    14a0:	ldr	w0, [sp, #20]
    14a4:	b	1538 <d_number+0x120>
    14a8:	ldrb	w0, [sp, #27]
    14ac:	sub	w0, w0, #0x30
    14b0:	mov	w1, #0x7fffffff            	// #2147483647
    14b4:	sub	w0, w1, w0
    14b8:	mov	w1, #0x6667                	// #26215
    14bc:	movk	w1, #0x6666, lsl #16
    14c0:	smull	x1, w0, w1
    14c4:	lsr	x1, x1, #32
    14c8:	asr	w1, w1, #2
    14cc:	asr	w0, w0, #31
    14d0:	sub	w0, w1, w0
    14d4:	ldr	w1, [sp, #20]
    14d8:	cmp	w1, w0
    14dc:	b.le	14e8 <d_number+0xd0>
    14e0:	mov	w0, #0xffffffff            	// #-1
    14e4:	b	1538 <d_number+0x120>
    14e8:	ldr	w1, [sp, #20]
    14ec:	mov	w0, w1
    14f0:	lsl	w0, w0, #2
    14f4:	add	w0, w0, w1
    14f8:	lsl	w0, w0, #1
    14fc:	mov	w1, w0
    1500:	ldrb	w0, [sp, #27]
    1504:	add	w0, w1, w0
    1508:	sub	w0, w0, #0x30
    150c:	str	w0, [sp, #20]
    1510:	ldr	x0, [sp, #8]
    1514:	ldr	x0, [x0, #24]
    1518:	add	x1, x0, #0x1
    151c:	ldr	x0, [sp, #8]
    1520:	str	x1, [x0, #24]
    1524:	ldr	x0, [sp, #8]
    1528:	ldr	x0, [x0, #24]
    152c:	ldrb	w0, [x0]
    1530:	strb	w0, [sp, #27]
    1534:	b	1470 <d_number+0x58>
    1538:	add	sp, sp, #0x20
    153c:	ret

0000000000001540 <d_number_component>:
    1540:	stp	x29, x30, [sp, #-48]!
    1544:	mov	x29, sp
    1548:	str	x0, [sp, #24]
    154c:	ldr	x0, [sp, #24]
    1550:	bl	248 <d_make_empty>
    1554:	str	x0, [sp, #40]
    1558:	ldr	x0, [sp, #40]
    155c:	cmp	x0, #0x0
    1560:	b.eq	1584 <d_number_component+0x44>  // b.none
    1564:	ldr	x0, [sp, #40]
    1568:	mov	w1, #0x42                  	// #66
    156c:	str	w1, [x0]
    1570:	ldr	x0, [sp, #24]
    1574:	bl	1418 <d_number>
    1578:	sxtw	x1, w0
    157c:	ldr	x0, [sp, #40]
    1580:	str	x1, [x0, #8]
    1584:	ldr	x0, [sp, #40]
    1588:	ldp	x29, x30, [sp], #48
    158c:	ret

0000000000001590 <d_identifier>:
    1590:	stp	x29, x30, [sp, #-48]!
    1594:	mov	x29, sp
    1598:	str	x0, [sp, #24]
    159c:	str	w1, [sp, #20]
    15a0:	ldr	x0, [sp, #24]
    15a4:	ldr	x0, [x0, #24]
    15a8:	str	x0, [sp, #40]
    15ac:	ldr	x0, [sp, #24]
    15b0:	ldr	x1, [x0, #8]
    15b4:	ldr	x0, [sp, #40]
    15b8:	sub	x1, x1, x0
    15bc:	ldrsw	x0, [sp, #20]
    15c0:	cmp	x1, x0
    15c4:	b.ge	15d0 <d_identifier+0x40>  // b.tcont
    15c8:	mov	x0, #0x0                   	// #0
    15cc:	b	16e8 <d_identifier+0x158>
    15d0:	ldr	x0, [sp, #24]
    15d4:	ldr	x1, [x0, #24]
    15d8:	ldrsw	x0, [sp, #20]
    15dc:	add	x1, x1, x0
    15e0:	ldr	x0, [sp, #24]
    15e4:	str	x1, [x0, #24]
    15e8:	ldr	x0, [sp, #24]
    15ec:	ldr	w0, [x0, #16]
    15f0:	and	w0, w0, #0x4
    15f4:	cmp	w0, #0x0
    15f8:	b.eq	1624 <d_identifier+0x94>  // b.none
    15fc:	ldr	x0, [sp, #24]
    1600:	ldr	x0, [x0, #24]
    1604:	ldrb	w0, [x0]
    1608:	cmp	w0, #0x24
    160c:	b.ne	1624 <d_identifier+0x94>  // b.any
    1610:	ldr	x0, [sp, #24]
    1614:	ldr	x0, [x0, #24]
    1618:	add	x1, x0, #0x1
    161c:	ldr	x0, [sp, #24]
    1620:	str	x1, [x0, #24]
    1624:	ldr	w0, [sp, #20]
    1628:	cmp	w0, #0x9
    162c:	b.le	16d8 <d_identifier+0x148>
    1630:	mov	x2, #0x8                   	// #8
    1634:	adrp	x0, 0 <is_fnqual_component_type>
    1638:	add	x1, x0, #0x0
    163c:	ldr	x0, [sp, #40]
    1640:	bl	0 <memcmp>
    1644:	cmp	w0, #0x0
    1648:	b.ne	16d8 <d_identifier+0x148>  // b.any
    164c:	ldr	x0, [sp, #40]
    1650:	add	x0, x0, #0x8
    1654:	str	x0, [sp, #32]
    1658:	ldr	x0, [sp, #32]
    165c:	ldrb	w0, [x0]
    1660:	cmp	w0, #0x2e
    1664:	b.eq	1688 <d_identifier+0xf8>  // b.none
    1668:	ldr	x0, [sp, #32]
    166c:	ldrb	w0, [x0]
    1670:	cmp	w0, #0x5f
    1674:	b.eq	1688 <d_identifier+0xf8>  // b.none
    1678:	ldr	x0, [sp, #32]
    167c:	ldrb	w0, [x0]
    1680:	cmp	w0, #0x24
    1684:	b.ne	16d8 <d_identifier+0x148>  // b.any
    1688:	ldr	x0, [sp, #32]
    168c:	add	x0, x0, #0x1
    1690:	ldrb	w0, [x0]
    1694:	cmp	w0, #0x4e
    1698:	b.ne	16d8 <d_identifier+0x148>  // b.any
    169c:	ldr	x0, [sp, #24]
    16a0:	ldr	w0, [x0, #72]
    16a4:	mov	w1, w0
    16a8:	ldr	w0, [sp, #20]
    16ac:	sub	w0, w1, w0
    16b0:	add	w0, w0, #0x16
    16b4:	mov	w1, w0
    16b8:	ldr	x0, [sp, #24]
    16bc:	str	w1, [x0, #72]
    16c0:	mov	w2, #0x15                  	// #21
    16c4:	adrp	x0, 0 <is_fnqual_component_type>
    16c8:	add	x1, x0, #0x0
    16cc:	ldr	x0, [sp, #24]
    16d0:	bl	438 <d_make_name>
    16d4:	b	16e8 <d_identifier+0x158>
    16d8:	ldr	w2, [sp, #20]
    16dc:	ldr	x1, [sp, #40]
    16e0:	ldr	x0, [sp, #24]
    16e4:	bl	438 <d_make_name>
    16e8:	ldp	x29, x30, [sp], #48
    16ec:	ret

00000000000016f0 <d_operator_name>:
    16f0:	stp	x29, x30, [sp, #-96]!
    16f4:	mov	x29, sp
    16f8:	str	x19, [sp, #16]
    16fc:	str	x0, [sp, #40]
    1700:	ldr	x0, [sp, #40]
    1704:	ldr	x0, [x0, #24]
    1708:	ldrb	w0, [x0]
    170c:	cmp	w0, #0x0
    1710:	b.eq	1730 <d_operator_name+0x40>  // b.none
    1714:	ldr	x0, [sp, #40]
    1718:	ldr	x0, [x0, #24]
    171c:	add	x2, x0, #0x1
    1720:	ldr	x1, [sp, #40]
    1724:	str	x2, [x1, #24]
    1728:	ldrb	w0, [x0]
    172c:	b	1734 <d_operator_name+0x44>
    1730:	mov	w0, #0x0                   	// #0
    1734:	strb	w0, [sp, #79]
    1738:	ldr	x0, [sp, #40]
    173c:	ldr	x0, [x0, #24]
    1740:	ldrb	w0, [x0]
    1744:	cmp	w0, #0x0
    1748:	b.eq	1768 <d_operator_name+0x78>  // b.none
    174c:	ldr	x0, [sp, #40]
    1750:	ldr	x0, [x0, #24]
    1754:	add	x2, x0, #0x1
    1758:	ldr	x1, [sp, #40]
    175c:	str	x2, [x1, #24]
    1760:	ldrb	w0, [x0]
    1764:	b	176c <d_operator_name+0x7c>
    1768:	mov	w0, #0x0                   	// #0
    176c:	strb	w0, [sp, #78]
    1770:	ldrb	w0, [sp, #79]
    1774:	cmp	w0, #0x76
    1778:	b.ne	17b8 <d_operator_name+0xc8>  // b.any
    177c:	ldrb	w0, [sp, #78]
    1780:	cmp	w0, #0x2f
    1784:	b.ls	17b8 <d_operator_name+0xc8>  // b.plast
    1788:	ldrb	w0, [sp, #78]
    178c:	cmp	w0, #0x39
    1790:	b.hi	17b8 <d_operator_name+0xc8>  // b.pmore
    1794:	ldrb	w0, [sp, #78]
    1798:	sub	w19, w0, #0x30
    179c:	ldr	x0, [sp, #40]
    17a0:	bl	13c4 <d_source_name>
    17a4:	mov	x2, x0
    17a8:	mov	w1, w19
    17ac:	ldr	x0, [sp, #40]
    17b0:	bl	530 <d_make_extended_operator>
    17b4:	b	1978 <d_operator_name+0x288>
    17b8:	ldrb	w0, [sp, #79]
    17bc:	cmp	w0, #0x63
    17c0:	b.ne	1860 <d_operator_name+0x170>  // b.any
    17c4:	ldrb	w0, [sp, #78]
    17c8:	cmp	w0, #0x76
    17cc:	b.ne	1860 <d_operator_name+0x170>  // b.any
    17d0:	ldr	x0, [sp, #40]
    17d4:	ldr	w0, [x0, #80]
    17d8:	str	w0, [sp, #72]
    17dc:	ldr	x0, [sp, #40]
    17e0:	ldr	w0, [x0, #76]
    17e4:	cmp	w0, #0x0
    17e8:	cset	w0, eq  // eq = none
    17ec:	and	w0, w0, #0xff
    17f0:	mov	w1, w0
    17f4:	ldr	x0, [sp, #40]
    17f8:	str	w1, [x0, #80]
    17fc:	ldr	x0, [sp, #40]
    1800:	bl	26d4 <d_type>
    1804:	str	x0, [sp, #64]
    1808:	ldr	x0, [sp, #40]
    180c:	ldr	w0, [x0, #80]
    1810:	cmp	w0, #0x0
    1814:	b.eq	1834 <d_operator_name+0x144>  // b.none
    1818:	mov	x3, #0x0                   	// #0
    181c:	ldr	x2, [sp, #64]
    1820:	mov	w1, #0x35                  	// #53
    1824:	ldr	x0, [sp, #40]
    1828:	bl	2c4 <d_make_comp>
    182c:	str	x0, [sp, #88]
    1830:	b	184c <d_operator_name+0x15c>
    1834:	mov	x3, #0x0                   	// #0
    1838:	ldr	x2, [sp, #64]
    183c:	mov	w1, #0x34                  	// #52
    1840:	ldr	x0, [sp, #40]
    1844:	bl	2c4 <d_make_comp>
    1848:	str	x0, [sp, #88]
    184c:	ldr	x0, [sp, #40]
    1850:	ldr	w1, [sp, #72]
    1854:	str	w1, [x0, #80]
    1858:	ldr	x0, [sp, #88]
    185c:	b	1978 <d_operator_name+0x288>
    1860:	str	wzr, [sp, #84]
    1864:	mov	w0, #0x43                  	// #67
    1868:	str	w0, [sp, #80]
    186c:	ldr	w1, [sp, #80]
    1870:	ldr	w0, [sp, #84]
    1874:	sub	w0, w1, w0
    1878:	lsr	w1, w0, #31
    187c:	add	w0, w1, w0
    1880:	asr	w0, w0, #1
    1884:	mov	w1, w0
    1888:	ldr	w0, [sp, #84]
    188c:	add	w0, w0, w1
    1890:	str	w0, [sp, #60]
    1894:	ldrsw	x1, [sp, #60]
    1898:	mov	x0, x1
    189c:	lsl	x0, x0, #1
    18a0:	add	x0, x0, x1
    18a4:	lsl	x0, x0, #3
    18a8:	mov	x1, x0
    18ac:	adrp	x0, 0 <is_fnqual_component_type>
    18b0:	add	x0, x0, #0x0
    18b4:	add	x0, x1, x0
    18b8:	str	x0, [sp, #48]
    18bc:	ldr	x0, [sp, #48]
    18c0:	ldr	x0, [x0]
    18c4:	ldrb	w0, [x0]
    18c8:	ldrb	w1, [sp, #79]
    18cc:	cmp	w1, w0
    18d0:	b.ne	1900 <d_operator_name+0x210>  // b.any
    18d4:	ldr	x0, [sp, #48]
    18d8:	ldr	x0, [x0]
    18dc:	add	x0, x0, #0x1
    18e0:	ldrb	w0, [x0]
    18e4:	ldrb	w1, [sp, #78]
    18e8:	cmp	w1, w0
    18ec:	b.ne	1900 <d_operator_name+0x210>  // b.any
    18f0:	ldr	x1, [sp, #48]
    18f4:	ldr	x0, [sp, #40]
    18f8:	bl	4e4 <d_make_operator>
    18fc:	b	1978 <d_operator_name+0x288>
    1900:	ldr	x0, [sp, #48]
    1904:	ldr	x0, [x0]
    1908:	ldrb	w0, [x0]
    190c:	ldrb	w1, [sp, #79]
    1910:	cmp	w1, w0
    1914:	b.cc	194c <d_operator_name+0x25c>  // b.lo, b.ul, b.last
    1918:	ldr	x0, [sp, #48]
    191c:	ldr	x0, [x0]
    1920:	ldrb	w0, [x0]
    1924:	ldrb	w1, [sp, #79]
    1928:	cmp	w1, w0
    192c:	b.ne	1958 <d_operator_name+0x268>  // b.any
    1930:	ldr	x0, [sp, #48]
    1934:	ldr	x0, [x0]
    1938:	add	x0, x0, #0x1
    193c:	ldrb	w0, [x0]
    1940:	ldrb	w1, [sp, #78]
    1944:	cmp	w1, w0
    1948:	b.cs	1958 <d_operator_name+0x268>  // b.hs, b.nlast
    194c:	ldr	w0, [sp, #60]
    1950:	str	w0, [sp, #80]
    1954:	b	1964 <d_operator_name+0x274>
    1958:	ldr	w0, [sp, #60]
    195c:	add	w0, w0, #0x1
    1960:	str	w0, [sp, #84]
    1964:	ldr	w1, [sp, #84]
    1968:	ldr	w0, [sp, #80]
    196c:	cmp	w1, w0
    1970:	b.ne	186c <d_operator_name+0x17c>  // b.any
    1974:	mov	x0, #0x0                   	// #0
    1978:	ldr	x19, [sp, #16]
    197c:	ldp	x29, x30, [sp], #96
    1980:	ret

0000000000001984 <d_make_character>:
    1984:	stp	x29, x30, [sp, #-48]!
    1988:	mov	x29, sp
    198c:	str	x0, [sp, #24]
    1990:	str	w1, [sp, #20]
    1994:	ldr	x0, [sp, #24]
    1998:	bl	248 <d_make_empty>
    199c:	str	x0, [sp, #40]
    19a0:	ldr	x0, [sp, #40]
    19a4:	cmp	x0, #0x0
    19a8:	b.eq	19c4 <d_make_character+0x40>  // b.none
    19ac:	ldr	x0, [sp, #40]
    19b0:	mov	w1, #0x41                  	// #65
    19b4:	str	w1, [x0]
    19b8:	ldr	x0, [sp, #40]
    19bc:	ldr	w1, [sp, #20]
    19c0:	str	w1, [x0, #8]
    19c4:	ldr	x0, [sp, #40]
    19c8:	ldp	x29, x30, [sp], #48
    19cc:	ret

00000000000019d0 <d_java_resource>:
    19d0:	stp	x29, x30, [sp, #-80]!
    19d4:	mov	x29, sp
    19d8:	str	x0, [sp, #24]
    19dc:	str	xzr, [sp, #72]
    19e0:	str	xzr, [sp, #64]
    19e4:	ldr	x0, [sp, #24]
    19e8:	bl	1418 <d_number>
    19ec:	str	w0, [sp, #60]
    19f0:	ldr	w0, [sp, #60]
    19f4:	cmp	w0, #0x1
    19f8:	b.gt	1a04 <d_java_resource+0x34>
    19fc:	mov	x0, #0x0                   	// #0
    1a00:	b	1c80 <d_java_resource+0x2b0>
    1a04:	ldr	x0, [sp, #24]
    1a08:	ldr	x0, [x0, #24]
    1a0c:	ldrb	w0, [x0]
    1a10:	cmp	w0, #0x0
    1a14:	b.eq	1a38 <d_java_resource+0x68>  // b.none
    1a18:	ldr	x0, [sp, #24]
    1a1c:	ldr	x0, [x0, #24]
    1a20:	add	x2, x0, #0x1
    1a24:	ldr	x1, [sp, #24]
    1a28:	str	x2, [x1, #24]
    1a2c:	ldrb	w0, [x0]
    1a30:	cmp	w0, #0x5f
    1a34:	b.eq	1a40 <d_java_resource+0x70>  // b.none
    1a38:	mov	x0, #0x0                   	// #0
    1a3c:	b	1c80 <d_java_resource+0x2b0>
    1a40:	ldr	w0, [sp, #60]
    1a44:	sub	w0, w0, #0x1
    1a48:	str	w0, [sp, #60]
    1a4c:	ldr	x0, [sp, #24]
    1a50:	ldr	x0, [x0, #24]
    1a54:	str	x0, [sp, #40]
    1a58:	str	wzr, [sp, #56]
    1a5c:	b	1c58 <d_java_resource+0x288>
    1a60:	ldrsw	x0, [sp, #56]
    1a64:	ldr	x1, [sp, #40]
    1a68:	add	x0, x1, x0
    1a6c:	ldrb	w0, [x0]
    1a70:	strb	w0, [sp, #55]
    1a74:	ldrb	w0, [sp, #55]
    1a78:	cmp	w0, #0x0
    1a7c:	b.ne	1a88 <d_java_resource+0xb8>  // b.any
    1a80:	mov	x0, #0x0                   	// #0
    1a84:	b	1c80 <d_java_resource+0x2b0>
    1a88:	ldrb	w0, [sp, #55]
    1a8c:	cmp	w0, #0x24
    1a90:	b.ne	1b74 <d_java_resource+0x1a4>  // b.any
    1a94:	ldr	w0, [sp, #56]
    1a98:	add	w0, w0, #0x1
    1a9c:	str	w0, [sp, #56]
    1aa0:	ldr	w0, [sp, #56]
    1aa4:	add	w1, w0, #0x1
    1aa8:	str	w1, [sp, #56]
    1aac:	sxtw	x0, w0
    1ab0:	ldr	x1, [sp, #40]
    1ab4:	add	x0, x1, x0
    1ab8:	ldrb	w0, [x0]
    1abc:	cmp	w0, #0x5f
    1ac0:	b.eq	1ae8 <d_java_resource+0x118>  // b.none
    1ac4:	cmp	w0, #0x5f
    1ac8:	b.gt	1b00 <d_java_resource+0x130>
    1acc:	cmp	w0, #0x24
    1ad0:	b.eq	1af4 <d_java_resource+0x124>  // b.none
    1ad4:	cmp	w0, #0x53
    1ad8:	b.ne	1b00 <d_java_resource+0x130>  // b.any
    1adc:	mov	w0, #0x2f                  	// #47
    1ae0:	strb	w0, [sp, #55]
    1ae4:	b	1b08 <d_java_resource+0x138>
    1ae8:	mov	w0, #0x2e                  	// #46
    1aec:	strb	w0, [sp, #55]
    1af0:	b	1b08 <d_java_resource+0x138>
    1af4:	mov	w0, #0x24                  	// #36
    1af8:	strb	w0, [sp, #55]
    1afc:	b	1b08 <d_java_resource+0x138>
    1b00:	mov	x0, #0x0                   	// #0
    1b04:	b	1c80 <d_java_resource+0x2b0>
    1b08:	ldrb	w0, [sp, #55]
    1b0c:	mov	w1, w0
    1b10:	ldr	x0, [sp, #24]
    1b14:	bl	1984 <d_make_character>
    1b18:	str	x0, [sp, #64]
    1b1c:	ldr	x0, [sp, #24]
    1b20:	ldr	x1, [x0, #24]
    1b24:	ldrsw	x0, [sp, #56]
    1b28:	add	x1, x1, x0
    1b2c:	ldr	x0, [sp, #24]
    1b30:	str	x1, [x0, #24]
    1b34:	ldr	x0, [sp, #24]
    1b38:	ldr	x0, [x0, #24]
    1b3c:	str	x0, [sp, #40]
    1b40:	ldr	w1, [sp, #60]
    1b44:	ldr	w0, [sp, #56]
    1b48:	sub	w0, w1, w0
    1b4c:	str	w0, [sp, #60]
    1b50:	str	wzr, [sp, #56]
    1b54:	ldr	x0, [sp, #64]
    1b58:	cmp	x0, #0x0
    1b5c:	b.ne	1c14 <d_java_resource+0x244>  // b.any
    1b60:	mov	x0, #0x0                   	// #0
    1b64:	b	1c80 <d_java_resource+0x2b0>
    1b68:	ldr	w0, [sp, #56]
    1b6c:	add	w0, w0, #0x1
    1b70:	str	w0, [sp, #56]
    1b74:	ldr	w1, [sp, #56]
    1b78:	ldr	w0, [sp, #60]
    1b7c:	cmp	w1, w0
    1b80:	b.ge	1bb4 <d_java_resource+0x1e4>  // b.tcont
    1b84:	ldrsw	x0, [sp, #56]
    1b88:	ldr	x1, [sp, #40]
    1b8c:	add	x0, x1, x0
    1b90:	ldrb	w0, [x0]
    1b94:	cmp	w0, #0x0
    1b98:	b.eq	1bb4 <d_java_resource+0x1e4>  // b.none
    1b9c:	ldrsw	x0, [sp, #56]
    1ba0:	ldr	x1, [sp, #40]
    1ba4:	add	x0, x1, x0
    1ba8:	ldrb	w0, [x0]
    1bac:	cmp	w0, #0x24
    1bb0:	b.ne	1b68 <d_java_resource+0x198>  // b.any
    1bb4:	ldr	w2, [sp, #56]
    1bb8:	ldr	x1, [sp, #40]
    1bbc:	ldr	x0, [sp, #24]
    1bc0:	bl	438 <d_make_name>
    1bc4:	str	x0, [sp, #64]
    1bc8:	ldr	x0, [sp, #24]
    1bcc:	ldr	x1, [x0, #24]
    1bd0:	ldrsw	x0, [sp, #56]
    1bd4:	add	x1, x1, x0
    1bd8:	ldr	x0, [sp, #24]
    1bdc:	str	x1, [x0, #24]
    1be0:	ldr	x0, [sp, #24]
    1be4:	ldr	x0, [x0, #24]
    1be8:	str	x0, [sp, #40]
    1bec:	ldr	w1, [sp, #60]
    1bf0:	ldr	w0, [sp, #56]
    1bf4:	sub	w0, w1, w0
    1bf8:	str	w0, [sp, #60]
    1bfc:	str	wzr, [sp, #56]
    1c00:	ldr	x0, [sp, #64]
    1c04:	cmp	x0, #0x0
    1c08:	b.ne	1c14 <d_java_resource+0x244>  // b.any
    1c0c:	mov	x0, #0x0                   	// #0
    1c10:	b	1c80 <d_java_resource+0x2b0>
    1c14:	ldr	x0, [sp, #72]
    1c18:	cmp	x0, #0x0
    1c1c:	b.ne	1c2c <d_java_resource+0x25c>  // b.any
    1c20:	ldr	x0, [sp, #64]
    1c24:	str	x0, [sp, #72]
    1c28:	b	1c58 <d_java_resource+0x288>
    1c2c:	ldr	x3, [sp, #64]
    1c30:	ldr	x2, [sp, #72]
    1c34:	mov	w1, #0x40                  	// #64
    1c38:	ldr	x0, [sp, #24]
    1c3c:	bl	2c4 <d_make_comp>
    1c40:	str	x0, [sp, #72]
    1c44:	ldr	x0, [sp, #72]
    1c48:	cmp	x0, #0x0
    1c4c:	b.ne	1c58 <d_java_resource+0x288>  // b.any
    1c50:	mov	x0, #0x0                   	// #0
    1c54:	b	1c80 <d_java_resource+0x2b0>
    1c58:	ldr	w0, [sp, #60]
    1c5c:	cmp	w0, #0x0
    1c60:	b.gt	1a60 <d_java_resource+0x90>
    1c64:	mov	x3, #0x0                   	// #0
    1c68:	ldr	x2, [sp, #72]
    1c6c:	mov	w1, #0x3f                  	// #63
    1c70:	ldr	x0, [sp, #24]
    1c74:	bl	2c4 <d_make_comp>
    1c78:	str	x0, [sp, #72]
    1c7c:	ldr	x0, [sp, #72]
    1c80:	ldp	x29, x30, [sp], #80
    1c84:	ret

0000000000001c88 <d_special_name>:
    1c88:	stp	x29, x30, [sp, #-64]!
    1c8c:	mov	x29, sp
    1c90:	str	x0, [sp, #24]
    1c94:	ldr	x0, [sp, #24]
    1c98:	ldr	w0, [x0, #72]
    1c9c:	add	w1, w0, #0x14
    1ca0:	ldr	x0, [sp, #24]
    1ca4:	str	w1, [x0, #72]
    1ca8:	ldr	x0, [sp, #24]
    1cac:	ldr	x0, [x0, #24]
    1cb0:	ldrb	w0, [x0]
    1cb4:	cmp	w0, #0x54
    1cb8:	b.ne	1cd8 <d_special_name+0x50>  // b.any
    1cbc:	ldr	x0, [sp, #24]
    1cc0:	ldr	x0, [x0, #24]
    1cc4:	add	x1, x0, #0x1
    1cc8:	ldr	x0, [sp, #24]
    1ccc:	str	x1, [x0, #24]
    1cd0:	mov	w0, #0x1                   	// #1
    1cd4:	b	1cdc <d_special_name+0x54>
    1cd8:	mov	w0, #0x0                   	// #0
    1cdc:	cmp	w0, #0x0
    1ce0:	b.eq	20b0 <d_special_name+0x428>  // b.none
    1ce4:	ldr	x0, [sp, #24]
    1ce8:	ldr	x0, [x0, #24]
    1cec:	ldrb	w0, [x0]
    1cf0:	cmp	w0, #0x0
    1cf4:	b.eq	1d14 <d_special_name+0x8c>  // b.none
    1cf8:	ldr	x0, [sp, #24]
    1cfc:	ldr	x0, [x0, #24]
    1d00:	add	x2, x0, #0x1
    1d04:	ldr	x1, [sp, #24]
    1d08:	str	x2, [x1, #24]
    1d0c:	ldrb	w0, [x0]
    1d10:	b	1d18 <d_special_name+0x90>
    1d14:	mov	w0, #0x0                   	// #0
    1d18:	cmp	w0, #0x76
    1d1c:	b.eq	1ec4 <d_special_name+0x23c>  // b.none
    1d20:	cmp	w0, #0x76
    1d24:	b.gt	20a8 <d_special_name+0x420>
    1d28:	cmp	w0, #0x68
    1d2c:	b.eq	1e84 <d_special_name+0x1fc>  // b.none
    1d30:	cmp	w0, #0x68
    1d34:	b.gt	20a8 <d_special_name+0x420>
    1d38:	cmp	w0, #0x63
    1d3c:	b.eq	1f04 <d_special_name+0x27c>  // b.none
    1d40:	cmp	w0, #0x63
    1d44:	b.gt	20a8 <d_special_name+0x420>
    1d48:	cmp	w0, #0x57
    1d4c:	b.eq	2068 <d_special_name+0x3e0>  // b.none
    1d50:	cmp	w0, #0x57
    1d54:	b.gt	20a8 <d_special_name+0x420>
    1d58:	cmp	w0, #0x56
    1d5c:	b.eq	1ddc <d_special_name+0x154>  // b.none
    1d60:	cmp	w0, #0x56
    1d64:	b.gt	20a8 <d_special_name+0x420>
    1d68:	cmp	w0, #0x54
    1d6c:	b.eq	1e10 <d_special_name+0x188>  // b.none
    1d70:	cmp	w0, #0x54
    1d74:	b.gt	20a8 <d_special_name+0x420>
    1d78:	cmp	w0, #0x53
    1d7c:	b.eq	1e64 <d_special_name+0x1dc>  // b.none
    1d80:	cmp	w0, #0x53
    1d84:	b.gt	20a8 <d_special_name+0x420>
    1d88:	cmp	w0, #0x4a
    1d8c:	b.eq	2028 <d_special_name+0x3a0>  // b.none
    1d90:	cmp	w0, #0x4a
    1d94:	b.gt	20a8 <d_special_name+0x420>
    1d98:	cmp	w0, #0x49
    1d9c:	b.eq	1e44 <d_special_name+0x1bc>  // b.none
    1da0:	cmp	w0, #0x49
    1da4:	b.gt	20a8 <d_special_name+0x420>
    1da8:	cmp	w0, #0x48
    1dac:	b.eq	2048 <d_special_name+0x3c0>  // b.none
    1db0:	cmp	w0, #0x48
    1db4:	b.gt	20a8 <d_special_name+0x420>
    1db8:	cmp	w0, #0x46
    1dbc:	b.eq	2008 <d_special_name+0x380>  // b.none
    1dc0:	cmp	w0, #0x46
    1dc4:	b.gt	20a8 <d_special_name+0x420>
    1dc8:	cmp	w0, #0x41
    1dcc:	b.eq	2088 <d_special_name+0x400>  // b.none
    1dd0:	cmp	w0, #0x43
    1dd4:	b.eq	1f60 <d_special_name+0x2d8>  // b.none
    1dd8:	b	20a8 <d_special_name+0x420>
    1ddc:	ldr	x0, [sp, #24]
    1de0:	ldr	w0, [x0, #72]
    1de4:	sub	w1, w0, #0x5
    1de8:	ldr	x0, [sp, #24]
    1dec:	str	w1, [x0, #72]
    1df0:	ldr	x0, [sp, #24]
    1df4:	bl	26d4 <d_type>
    1df8:	mov	x3, #0x0                   	// #0
    1dfc:	mov	x2, x0
    1e00:	mov	w1, #0x9                   	// #9
    1e04:	ldr	x0, [sp, #24]
    1e08:	bl	2c4 <d_make_comp>
    1e0c:	b	2270 <d_special_name+0x5e8>
    1e10:	ldr	x0, [sp, #24]
    1e14:	ldr	w0, [x0, #72]
    1e18:	sub	w1, w0, #0xa
    1e1c:	ldr	x0, [sp, #24]
    1e20:	str	w1, [x0, #72]
    1e24:	ldr	x0, [sp, #24]
    1e28:	bl	26d4 <d_type>
    1e2c:	mov	x3, #0x0                   	// #0
    1e30:	mov	x2, x0
    1e34:	mov	w1, #0xa                   	// #10
    1e38:	ldr	x0, [sp, #24]
    1e3c:	bl	2c4 <d_make_comp>
    1e40:	b	2270 <d_special_name+0x5e8>
    1e44:	ldr	x0, [sp, #24]
    1e48:	bl	26d4 <d_type>
    1e4c:	mov	x3, #0x0                   	// #0
    1e50:	mov	x2, x0
    1e54:	mov	w1, #0xc                   	// #12
    1e58:	ldr	x0, [sp, #24]
    1e5c:	bl	2c4 <d_make_comp>
    1e60:	b	2270 <d_special_name+0x5e8>
    1e64:	ldr	x0, [sp, #24]
    1e68:	bl	26d4 <d_type>
    1e6c:	mov	x3, #0x0                   	// #0
    1e70:	mov	x2, x0
    1e74:	mov	w1, #0xd                   	// #13
    1e78:	ldr	x0, [sp, #24]
    1e7c:	bl	2c4 <d_make_comp>
    1e80:	b	2270 <d_special_name+0x5e8>
    1e84:	mov	w1, #0x68                  	// #104
    1e88:	ldr	x0, [sp, #24]
    1e8c:	bl	2278 <d_call_offset>
    1e90:	cmp	w0, #0x0
    1e94:	b.ne	1ea0 <d_special_name+0x218>  // b.any
    1e98:	mov	x0, #0x0                   	// #0
    1e9c:	b	2270 <d_special_name+0x5e8>
    1ea0:	mov	w1, #0x0                   	// #0
    1ea4:	ldr	x0, [sp, #24]
    1ea8:	bl	a20 <d_encoding>
    1eac:	mov	x3, #0x0                   	// #0
    1eb0:	mov	x2, x0
    1eb4:	mov	w1, #0xf                   	// #15
    1eb8:	ldr	x0, [sp, #24]
    1ebc:	bl	2c4 <d_make_comp>
    1ec0:	b	2270 <d_special_name+0x5e8>
    1ec4:	mov	w1, #0x76                  	// #118
    1ec8:	ldr	x0, [sp, #24]
    1ecc:	bl	2278 <d_call_offset>
    1ed0:	cmp	w0, #0x0
    1ed4:	b.ne	1ee0 <d_special_name+0x258>  // b.any
    1ed8:	mov	x0, #0x0                   	// #0
    1edc:	b	2270 <d_special_name+0x5e8>
    1ee0:	mov	w1, #0x0                   	// #0
    1ee4:	ldr	x0, [sp, #24]
    1ee8:	bl	a20 <d_encoding>
    1eec:	mov	x3, #0x0                   	// #0
    1ef0:	mov	x2, x0
    1ef4:	mov	w1, #0x10                  	// #16
    1ef8:	ldr	x0, [sp, #24]
    1efc:	bl	2c4 <d_make_comp>
    1f00:	b	2270 <d_special_name+0x5e8>
    1f04:	mov	w1, #0x0                   	// #0
    1f08:	ldr	x0, [sp, #24]
    1f0c:	bl	2278 <d_call_offset>
    1f10:	cmp	w0, #0x0
    1f14:	b.ne	1f20 <d_special_name+0x298>  // b.any
    1f18:	mov	x0, #0x0                   	// #0
    1f1c:	b	2270 <d_special_name+0x5e8>
    1f20:	mov	w1, #0x0                   	// #0
    1f24:	ldr	x0, [sp, #24]
    1f28:	bl	2278 <d_call_offset>
    1f2c:	cmp	w0, #0x0
    1f30:	b.ne	1f3c <d_special_name+0x2b4>  // b.any
    1f34:	mov	x0, #0x0                   	// #0
    1f38:	b	2270 <d_special_name+0x5e8>
    1f3c:	mov	w1, #0x0                   	// #0
    1f40:	ldr	x0, [sp, #24]
    1f44:	bl	a20 <d_encoding>
    1f48:	mov	x3, #0x0                   	// #0
    1f4c:	mov	x2, x0
    1f50:	mov	w1, #0x11                  	// #17
    1f54:	ldr	x0, [sp, #24]
    1f58:	bl	2c4 <d_make_comp>
    1f5c:	b	2270 <d_special_name+0x5e8>
    1f60:	ldr	x0, [sp, #24]
    1f64:	bl	26d4 <d_type>
    1f68:	str	x0, [sp, #48]
    1f6c:	ldr	x0, [sp, #24]
    1f70:	bl	1418 <d_number>
    1f74:	str	w0, [sp, #44]
    1f78:	ldr	w0, [sp, #44]
    1f7c:	cmp	w0, #0x0
    1f80:	b.ge	1f8c <d_special_name+0x304>  // b.tcont
    1f84:	mov	x0, #0x0                   	// #0
    1f88:	b	2270 <d_special_name+0x5e8>
    1f8c:	ldr	x0, [sp, #24]
    1f90:	ldr	x0, [x0, #24]
    1f94:	ldrb	w0, [x0]
    1f98:	cmp	w0, #0x5f
    1f9c:	b.ne	1fbc <d_special_name+0x334>  // b.any
    1fa0:	ldr	x0, [sp, #24]
    1fa4:	ldr	x0, [x0, #24]
    1fa8:	add	x1, x0, #0x1
    1fac:	ldr	x0, [sp, #24]
    1fb0:	str	x1, [x0, #24]
    1fb4:	mov	w0, #0x0                   	// #0
    1fb8:	b	1fc0 <d_special_name+0x338>
    1fbc:	mov	w0, #0x1                   	// #1
    1fc0:	cmp	w0, #0x0
    1fc4:	b.eq	1fd0 <d_special_name+0x348>  // b.none
    1fc8:	mov	x0, #0x0                   	// #0
    1fcc:	b	2270 <d_special_name+0x5e8>
    1fd0:	ldr	x0, [sp, #24]
    1fd4:	bl	26d4 <d_type>
    1fd8:	str	x0, [sp, #32]
    1fdc:	ldr	x0, [sp, #24]
    1fe0:	ldr	w0, [x0, #72]
    1fe4:	add	w1, w0, #0x5
    1fe8:	ldr	x0, [sp, #24]
    1fec:	str	w1, [x0, #72]
    1ff0:	ldr	x3, [sp, #48]
    1ff4:	ldr	x2, [sp, #32]
    1ff8:	mov	w1, #0xb                   	// #11
    1ffc:	ldr	x0, [sp, #24]
    2000:	bl	2c4 <d_make_comp>
    2004:	b	2270 <d_special_name+0x5e8>
    2008:	ldr	x0, [sp, #24]
    200c:	bl	26d4 <d_type>
    2010:	mov	x3, #0x0                   	// #0
    2014:	mov	x2, x0
    2018:	mov	w1, #0xe                   	// #14
    201c:	ldr	x0, [sp, #24]
    2020:	bl	2c4 <d_make_comp>
    2024:	b	2270 <d_special_name+0x5e8>
    2028:	ldr	x0, [sp, #24]
    202c:	bl	26d4 <d_type>
    2030:	mov	x3, #0x0                   	// #0
    2034:	mov	x2, x0
    2038:	mov	w1, #0x12                  	// #18
    203c:	ldr	x0, [sp, #24]
    2040:	bl	2c4 <d_make_comp>
    2044:	b	2270 <d_special_name+0x5e8>
    2048:	ldr	x0, [sp, #24]
    204c:	bl	c40 <d_name>
    2050:	mov	x3, #0x0                   	// #0
    2054:	mov	x2, x0
    2058:	mov	w1, #0x14                  	// #20
    205c:	ldr	x0, [sp, #24]
    2060:	bl	2c4 <d_make_comp>
    2064:	b	2270 <d_special_name+0x5e8>
    2068:	ldr	x0, [sp, #24]
    206c:	bl	c40 <d_name>
    2070:	mov	x3, #0x0                   	// #0
    2074:	mov	x2, x0
    2078:	mov	w1, #0x15                  	// #21
    207c:	ldr	x0, [sp, #24]
    2080:	bl	2c4 <d_make_comp>
    2084:	b	2270 <d_special_name+0x5e8>
    2088:	ldr	x0, [sp, #24]
    208c:	bl	3f98 <d_template_arg>
    2090:	mov	x3, #0x0                   	// #0
    2094:	mov	x2, x0
    2098:	mov	w1, #0x30                  	// #48
    209c:	ldr	x0, [sp, #24]
    20a0:	bl	2c4 <d_make_comp>
    20a4:	b	2270 <d_special_name+0x5e8>
    20a8:	mov	x0, #0x0                   	// #0
    20ac:	b	2270 <d_special_name+0x5e8>
    20b0:	ldr	x0, [sp, #24]
    20b4:	ldr	x0, [x0, #24]
    20b8:	ldrb	w0, [x0]
    20bc:	cmp	w0, #0x47
    20c0:	b.ne	20e0 <d_special_name+0x458>  // b.any
    20c4:	ldr	x0, [sp, #24]
    20c8:	ldr	x0, [x0, #24]
    20cc:	add	x1, x0, #0x1
    20d0:	ldr	x0, [sp, #24]
    20d4:	str	x1, [x0, #24]
    20d8:	mov	w0, #0x1                   	// #1
    20dc:	b	20e4 <d_special_name+0x45c>
    20e0:	mov	w0, #0x0                   	// #0
    20e4:	cmp	w0, #0x0
    20e8:	b.eq	226c <d_special_name+0x5e4>  // b.none
    20ec:	ldr	x0, [sp, #24]
    20f0:	ldr	x0, [x0, #24]
    20f4:	ldrb	w0, [x0]
    20f8:	cmp	w0, #0x0
    20fc:	b.eq	211c <d_special_name+0x494>  // b.none
    2100:	ldr	x0, [sp, #24]
    2104:	ldr	x0, [x0, #24]
    2108:	add	x2, x0, #0x1
    210c:	ldr	x1, [sp, #24]
    2110:	str	x2, [x1, #24]
    2114:	ldrb	w0, [x0]
    2118:	b	2120 <d_special_name+0x498>
    211c:	mov	w0, #0x0                   	// #0
    2120:	cmp	w0, #0x72
    2124:	b.eq	2258 <d_special_name+0x5d0>  // b.none
    2128:	cmp	w0, #0x72
    212c:	b.gt	2264 <d_special_name+0x5dc>
    2130:	cmp	w0, #0x56
    2134:	b.eq	2164 <d_special_name+0x4dc>  // b.none
    2138:	cmp	w0, #0x56
    213c:	b.gt	2264 <d_special_name+0x5dc>
    2140:	cmp	w0, #0x54
    2144:	b.eq	21d4 <d_special_name+0x54c>  // b.none
    2148:	cmp	w0, #0x54
    214c:	b.gt	2264 <d_special_name+0x5dc>
    2150:	cmp	w0, #0x41
    2154:	b.eq	21b0 <d_special_name+0x528>  // b.none
    2158:	cmp	w0, #0x52
    215c:	b.eq	2184 <d_special_name+0x4fc>  // b.none
    2160:	b	2264 <d_special_name+0x5dc>
    2164:	ldr	x0, [sp, #24]
    2168:	bl	c40 <d_name>
    216c:	mov	x3, #0x0                   	// #0
    2170:	mov	x2, x0
    2174:	mov	w1, #0x13                  	// #19
    2178:	ldr	x0, [sp, #24]
    217c:	bl	2c4 <d_make_comp>
    2180:	b	2270 <d_special_name+0x5e8>
    2184:	ldr	x0, [sp, #24]
    2188:	bl	c40 <d_name>
    218c:	str	x0, [sp, #56]
    2190:	ldr	x0, [sp, #24]
    2194:	bl	1540 <d_number_component>
    2198:	mov	x3, x0
    219c:	ldr	x2, [sp, #56]
    21a0:	mov	w1, #0x16                  	// #22
    21a4:	ldr	x0, [sp, #24]
    21a8:	bl	2c4 <d_make_comp>
    21ac:	b	2270 <d_special_name+0x5e8>
    21b0:	mov	w1, #0x0                   	// #0
    21b4:	ldr	x0, [sp, #24]
    21b8:	bl	a20 <d_encoding>
    21bc:	mov	x3, #0x0                   	// #0
    21c0:	mov	x2, x0
    21c4:	mov	w1, #0x17                  	// #23
    21c8:	ldr	x0, [sp, #24]
    21cc:	bl	2c4 <d_make_comp>
    21d0:	b	2270 <d_special_name+0x5e8>
    21d4:	ldr	x0, [sp, #24]
    21d8:	ldr	x0, [x0, #24]
    21dc:	ldrb	w0, [x0]
    21e0:	cmp	w0, #0x0
    21e4:	b.eq	2204 <d_special_name+0x57c>  // b.none
    21e8:	ldr	x0, [sp, #24]
    21ec:	ldr	x0, [x0, #24]
    21f0:	add	x2, x0, #0x1
    21f4:	ldr	x1, [sp, #24]
    21f8:	str	x2, [x1, #24]
    21fc:	ldrb	w0, [x0]
    2200:	b	2208 <d_special_name+0x580>
    2204:	mov	w0, #0x0                   	// #0
    2208:	cmp	w0, #0x6e
    220c:	b.ne	2234 <d_special_name+0x5ac>  // b.any
    2210:	mov	w1, #0x0                   	// #0
    2214:	ldr	x0, [sp, #24]
    2218:	bl	a20 <d_encoding>
    221c:	mov	x3, #0x0                   	// #0
    2220:	mov	x2, x0
    2224:	mov	w1, #0x4a                  	// #74
    2228:	ldr	x0, [sp, #24]
    222c:	bl	2c4 <d_make_comp>
    2230:	b	2270 <d_special_name+0x5e8>
    2234:	mov	w1, #0x0                   	// #0
    2238:	ldr	x0, [sp, #24]
    223c:	bl	a20 <d_encoding>
    2240:	mov	x3, #0x0                   	// #0
    2244:	mov	x2, x0
    2248:	mov	w1, #0x49                  	// #73
    224c:	ldr	x0, [sp, #24]
    2250:	bl	2c4 <d_make_comp>
    2254:	b	2270 <d_special_name+0x5e8>
    2258:	ldr	x0, [sp, #24]
    225c:	bl	19d0 <d_java_resource>
    2260:	b	2270 <d_special_name+0x5e8>
    2264:	mov	x0, #0x0                   	// #0
    2268:	b	2270 <d_special_name+0x5e8>
    226c:	mov	x0, #0x0                   	// #0
    2270:	ldp	x29, x30, [sp], #64
    2274:	ret

0000000000002278 <d_call_offset>:
    2278:	stp	x29, x30, [sp, #-32]!
    227c:	mov	x29, sp
    2280:	str	x0, [sp, #24]
    2284:	str	w1, [sp, #20]
    2288:	ldr	w0, [sp, #20]
    228c:	cmp	w0, #0x0
    2290:	b.ne	22cc <d_call_offset+0x54>  // b.any
    2294:	ldr	x0, [sp, #24]
    2298:	ldr	x0, [x0, #24]
    229c:	ldrb	w0, [x0]
    22a0:	cmp	w0, #0x0
    22a4:	b.eq	22c4 <d_call_offset+0x4c>  // b.none
    22a8:	ldr	x0, [sp, #24]
    22ac:	ldr	x0, [x0, #24]
    22b0:	add	x2, x0, #0x1
    22b4:	ldr	x1, [sp, #24]
    22b8:	str	x2, [x1, #24]
    22bc:	ldrb	w0, [x0]
    22c0:	b	22c8 <d_call_offset+0x50>
    22c4:	mov	w0, #0x0                   	// #0
    22c8:	str	w0, [sp, #20]
    22cc:	ldr	w0, [sp, #20]
    22d0:	cmp	w0, #0x68
    22d4:	b.ne	22e4 <d_call_offset+0x6c>  // b.any
    22d8:	ldr	x0, [sp, #24]
    22dc:	bl	1418 <d_number>
    22e0:	b	2350 <d_call_offset+0xd8>
    22e4:	ldr	w0, [sp, #20]
    22e8:	cmp	w0, #0x76
    22ec:	b.ne	2348 <d_call_offset+0xd0>  // b.any
    22f0:	ldr	x0, [sp, #24]
    22f4:	bl	1418 <d_number>
    22f8:	ldr	x0, [sp, #24]
    22fc:	ldr	x0, [x0, #24]
    2300:	ldrb	w0, [x0]
    2304:	cmp	w0, #0x5f
    2308:	b.ne	2328 <d_call_offset+0xb0>  // b.any
    230c:	ldr	x0, [sp, #24]
    2310:	ldr	x0, [x0, #24]
    2314:	add	x1, x0, #0x1
    2318:	ldr	x0, [sp, #24]
    231c:	str	x1, [x0, #24]
    2320:	mov	w0, #0x0                   	// #0
    2324:	b	232c <d_call_offset+0xb4>
    2328:	mov	w0, #0x1                   	// #1
    232c:	cmp	w0, #0x0
    2330:	b.eq	233c <d_call_offset+0xc4>  // b.none
    2334:	mov	w0, #0x0                   	// #0
    2338:	b	2398 <d_call_offset+0x120>
    233c:	ldr	x0, [sp, #24]
    2340:	bl	1418 <d_number>
    2344:	b	2350 <d_call_offset+0xd8>
    2348:	mov	w0, #0x0                   	// #0
    234c:	b	2398 <d_call_offset+0x120>
    2350:	ldr	x0, [sp, #24]
    2354:	ldr	x0, [x0, #24]
    2358:	ldrb	w0, [x0]
    235c:	cmp	w0, #0x5f
    2360:	b.ne	2380 <d_call_offset+0x108>  // b.any
    2364:	ldr	x0, [sp, #24]
    2368:	ldr	x0, [x0, #24]
    236c:	add	x1, x0, #0x1
    2370:	ldr	x0, [sp, #24]
    2374:	str	x1, [x0, #24]
    2378:	mov	w0, #0x0                   	// #0
    237c:	b	2384 <d_call_offset+0x10c>
    2380:	mov	w0, #0x1                   	// #1
    2384:	cmp	w0, #0x0
    2388:	b.eq	2394 <d_call_offset+0x11c>  // b.none
    238c:	mov	w0, #0x0                   	// #0
    2390:	b	2398 <d_call_offset+0x120>
    2394:	mov	w0, #0x1                   	// #1
    2398:	ldp	x29, x30, [sp], #32
    239c:	ret

00000000000023a0 <d_ctor_dtor_name>:
    23a0:	stp	x29, x30, [sp, #-48]!
    23a4:	mov	x29, sp
    23a8:	str	x0, [sp, #24]
    23ac:	ldr	x0, [sp, #24]
    23b0:	ldr	x0, [x0, #64]
    23b4:	cmp	x0, #0x0
    23b8:	b.eq	2428 <d_ctor_dtor_name+0x88>  // b.none
    23bc:	ldr	x0, [sp, #24]
    23c0:	ldr	x0, [x0, #64]
    23c4:	ldr	w0, [x0]
    23c8:	cmp	w0, #0x0
    23cc:	b.ne	23f4 <d_ctor_dtor_name+0x54>  // b.any
    23d0:	ldr	x0, [sp, #24]
    23d4:	ldr	w1, [x0, #72]
    23d8:	ldr	x0, [sp, #24]
    23dc:	ldr	x0, [x0, #64]
    23e0:	ldr	w0, [x0, #16]
    23e4:	add	w1, w1, w0
    23e8:	ldr	x0, [sp, #24]
    23ec:	str	w1, [x0, #72]
    23f0:	b	2428 <d_ctor_dtor_name+0x88>
    23f4:	ldr	x0, [sp, #24]
    23f8:	ldr	x0, [x0, #64]
    23fc:	ldr	w0, [x0]
    2400:	cmp	w0, #0x18
    2404:	b.ne	2428 <d_ctor_dtor_name+0x88>  // b.any
    2408:	ldr	x0, [sp, #24]
    240c:	ldr	w1, [x0, #72]
    2410:	ldr	x0, [sp, #24]
    2414:	ldr	x0, [x0, #64]
    2418:	ldr	w0, [x0, #16]
    241c:	add	w1, w1, w0
    2420:	ldr	x0, [sp, #24]
    2424:	str	w1, [x0, #72]
    2428:	ldr	x0, [sp, #24]
    242c:	ldr	x0, [x0, #24]
    2430:	ldrb	w0, [x0]
    2434:	cmp	w0, #0x43
    2438:	b.eq	2448 <d_ctor_dtor_name+0xa8>  // b.none
    243c:	cmp	w0, #0x44
    2440:	b.eq	255c <d_ctor_dtor_name+0x1bc>  // b.none
    2444:	b	2624 <d_ctor_dtor_name+0x284>
    2448:	str	wzr, [sp, #40]
    244c:	ldr	x0, [sp, #24]
    2450:	ldr	x0, [x0, #24]
    2454:	add	x0, x0, #0x1
    2458:	ldrb	w0, [x0]
    245c:	cmp	w0, #0x49
    2460:	b.ne	2480 <d_ctor_dtor_name+0xe0>  // b.any
    2464:	mov	w0, #0x1                   	// #1
    2468:	str	w0, [sp, #40]
    246c:	ldr	x0, [sp, #24]
    2470:	ldr	x0, [x0, #24]
    2474:	add	x1, x0, #0x1
    2478:	ldr	x0, [sp, #24]
    247c:	str	x1, [x0, #24]
    2480:	ldr	x0, [sp, #24]
    2484:	ldr	x0, [x0, #24]
    2488:	add	x0, x0, #0x1
    248c:	ldrb	w0, [x0]
    2490:	cmp	w0, #0x35
    2494:	b.eq	2504 <d_ctor_dtor_name+0x164>  // b.none
    2498:	cmp	w0, #0x35
    249c:	b.gt	2510 <d_ctor_dtor_name+0x170>
    24a0:	cmp	w0, #0x34
    24a4:	b.eq	24f8 <d_ctor_dtor_name+0x158>  // b.none
    24a8:	cmp	w0, #0x34
    24ac:	b.gt	2510 <d_ctor_dtor_name+0x170>
    24b0:	cmp	w0, #0x33
    24b4:	b.eq	24ec <d_ctor_dtor_name+0x14c>  // b.none
    24b8:	cmp	w0, #0x33
    24bc:	b.gt	2510 <d_ctor_dtor_name+0x170>
    24c0:	cmp	w0, #0x31
    24c4:	b.eq	24d4 <d_ctor_dtor_name+0x134>  // b.none
    24c8:	cmp	w0, #0x32
    24cc:	b.eq	24e0 <d_ctor_dtor_name+0x140>  // b.none
    24d0:	b	2510 <d_ctor_dtor_name+0x170>
    24d4:	mov	w0, #0x1                   	// #1
    24d8:	str	w0, [sp, #44]
    24dc:	b	2518 <d_ctor_dtor_name+0x178>
    24e0:	mov	w0, #0x2                   	// #2
    24e4:	str	w0, [sp, #44]
    24e8:	b	2518 <d_ctor_dtor_name+0x178>
    24ec:	mov	w0, #0x3                   	// #3
    24f0:	str	w0, [sp, #44]
    24f4:	b	2518 <d_ctor_dtor_name+0x178>
    24f8:	mov	w0, #0x4                   	// #4
    24fc:	str	w0, [sp, #44]
    2500:	b	2518 <d_ctor_dtor_name+0x178>
    2504:	mov	w0, #0x5                   	// #5
    2508:	str	w0, [sp, #44]
    250c:	b	2518 <d_ctor_dtor_name+0x178>
    2510:	mov	x0, #0x0                   	// #0
    2514:	b	2628 <d_ctor_dtor_name+0x288>
    2518:	ldr	x0, [sp, #24]
    251c:	ldr	x0, [x0, #24]
    2520:	add	x1, x0, #0x2
    2524:	ldr	x0, [sp, #24]
    2528:	str	x1, [x0, #24]
    252c:	ldr	w0, [sp, #40]
    2530:	cmp	w0, #0x0
    2534:	b.eq	2540 <d_ctor_dtor_name+0x1a0>  // b.none
    2538:	ldr	x0, [sp, #24]
    253c:	bl	26d4 <d_type>
    2540:	ldr	x0, [sp, #24]
    2544:	ldr	x0, [x0, #64]
    2548:	mov	x2, x0
    254c:	ldr	w1, [sp, #44]
    2550:	ldr	x0, [sp, #24]
    2554:	bl	5d8 <d_make_ctor>
    2558:	b	2628 <d_ctor_dtor_name+0x288>
    255c:	ldr	x0, [sp, #24]
    2560:	ldr	x0, [x0, #24]
    2564:	add	x0, x0, #0x1
    2568:	ldrb	w0, [x0]
    256c:	cmp	w0, #0x35
    2570:	b.eq	25e0 <d_ctor_dtor_name+0x240>  // b.none
    2574:	cmp	w0, #0x35
    2578:	b.gt	25ec <d_ctor_dtor_name+0x24c>
    257c:	cmp	w0, #0x34
    2580:	b.eq	25d4 <d_ctor_dtor_name+0x234>  // b.none
    2584:	cmp	w0, #0x34
    2588:	b.gt	25ec <d_ctor_dtor_name+0x24c>
    258c:	cmp	w0, #0x32
    2590:	b.eq	25c8 <d_ctor_dtor_name+0x228>  // b.none
    2594:	cmp	w0, #0x32
    2598:	b.gt	25ec <d_ctor_dtor_name+0x24c>
    259c:	cmp	w0, #0x30
    25a0:	b.eq	25b0 <d_ctor_dtor_name+0x210>  // b.none
    25a4:	cmp	w0, #0x31
    25a8:	b.eq	25bc <d_ctor_dtor_name+0x21c>  // b.none
    25ac:	b	25ec <d_ctor_dtor_name+0x24c>
    25b0:	mov	w0, #0x1                   	// #1
    25b4:	str	w0, [sp, #36]
    25b8:	b	25f4 <d_ctor_dtor_name+0x254>
    25bc:	mov	w0, #0x2                   	// #2
    25c0:	str	w0, [sp, #36]
    25c4:	b	25f4 <d_ctor_dtor_name+0x254>
    25c8:	mov	w0, #0x3                   	// #3
    25cc:	str	w0, [sp, #36]
    25d0:	b	25f4 <d_ctor_dtor_name+0x254>
    25d4:	mov	w0, #0x4                   	// #4
    25d8:	str	w0, [sp, #36]
    25dc:	b	25f4 <d_ctor_dtor_name+0x254>
    25e0:	mov	w0, #0x5                   	// #5
    25e4:	str	w0, [sp, #36]
    25e8:	b	25f4 <d_ctor_dtor_name+0x254>
    25ec:	mov	x0, #0x0                   	// #0
    25f0:	b	2628 <d_ctor_dtor_name+0x288>
    25f4:	ldr	x0, [sp, #24]
    25f8:	ldr	x0, [x0, #24]
    25fc:	add	x1, x0, #0x2
    2600:	ldr	x0, [sp, #24]
    2604:	str	x1, [x0, #24]
    2608:	ldr	x0, [sp, #24]
    260c:	ldr	x0, [x0, #64]
    2610:	mov	x2, x0
    2614:	ldr	w1, [sp, #36]
    2618:	ldr	x0, [sp, #24]
    261c:	bl	624 <d_make_dtor>
    2620:	b	2628 <d_ctor_dtor_name+0x288>
    2624:	mov	x0, #0x0                   	// #0
    2628:	ldp	x29, x30, [sp], #48
    262c:	ret

0000000000002630 <next_is_type_qual>:
    2630:	sub	sp, sp, #0x20
    2634:	str	x0, [sp, #8]
    2638:	ldr	x0, [sp, #8]
    263c:	ldr	x0, [x0, #24]
    2640:	ldrb	w0, [x0]
    2644:	strb	w0, [sp, #31]
    2648:	ldrb	w0, [sp, #31]
    264c:	cmp	w0, #0x72
    2650:	b.eq	266c <next_is_type_qual+0x3c>  // b.none
    2654:	ldrb	w0, [sp, #31]
    2658:	cmp	w0, #0x56
    265c:	b.eq	266c <next_is_type_qual+0x3c>  // b.none
    2660:	ldrb	w0, [sp, #31]
    2664:	cmp	w0, #0x4b
    2668:	b.ne	2674 <next_is_type_qual+0x44>  // b.any
    266c:	mov	w0, #0x1                   	// #1
    2670:	b	26cc <next_is_type_qual+0x9c>
    2674:	ldrb	w0, [sp, #31]
    2678:	cmp	w0, #0x44
    267c:	b.ne	26c8 <next_is_type_qual+0x98>  // b.any
    2680:	ldr	x0, [sp, #8]
    2684:	ldr	x0, [x0, #24]
    2688:	ldrb	w0, [x0, #1]
    268c:	strb	w0, [sp, #31]
    2690:	ldrb	w0, [sp, #31]
    2694:	cmp	w0, #0x78
    2698:	b.eq	26c0 <next_is_type_qual+0x90>  // b.none
    269c:	ldrb	w0, [sp, #31]
    26a0:	cmp	w0, #0x6f
    26a4:	b.eq	26c0 <next_is_type_qual+0x90>  // b.none
    26a8:	ldrb	w0, [sp, #31]
    26ac:	cmp	w0, #0x4f
    26b0:	b.eq	26c0 <next_is_type_qual+0x90>  // b.none
    26b4:	ldrb	w0, [sp, #31]
    26b8:	cmp	w0, #0x77
    26bc:	b.ne	26c8 <next_is_type_qual+0x98>  // b.any
    26c0:	mov	w0, #0x1                   	// #1
    26c4:	b	26cc <next_is_type_qual+0x9c>
    26c8:	mov	w0, #0x0                   	// #0
    26cc:	add	sp, sp, #0x20
    26d0:	ret

00000000000026d4 <d_type>:
    26d4:	stp	x29, x30, [sp, #-128]!
    26d8:	mov	x29, sp
    26dc:	str	x19, [sp, #16]
    26e0:	str	x0, [sp, #40]
    26e4:	ldr	x0, [sp, #40]
    26e8:	bl	2630 <next_is_type_qual>
    26ec:	cmp	w0, #0x0
    26f0:	b.eq	2800 <d_type+0x12c>  // b.none
    26f4:	add	x0, sp, #0x50
    26f8:	mov	w2, #0x0                   	// #0
    26fc:	mov	x1, x0
    2700:	ldr	x0, [sp, #40]
    2704:	bl	31bc <d_cv_qualifiers>
    2708:	str	x0, [sp, #96]
    270c:	ldr	x0, [sp, #96]
    2710:	cmp	x0, #0x0
    2714:	b.ne	2720 <d_type+0x4c>  // b.any
    2718:	mov	x0, #0x0                   	// #0
    271c:	b	31b0 <d_type+0xadc>
    2720:	ldr	x0, [sp, #40]
    2724:	ldr	x0, [x0, #24]
    2728:	ldrb	w0, [x0]
    272c:	cmp	w0, #0x46
    2730:	b.ne	274c <d_type+0x78>  // b.any
    2734:	ldr	x0, [sp, #40]
    2738:	bl	3664 <d_function_type>
    273c:	mov	x1, x0
    2740:	ldr	x0, [sp, #96]
    2744:	str	x1, [x0]
    2748:	b	2760 <d_type+0x8c>
    274c:	ldr	x0, [sp, #40]
    2750:	bl	26d4 <d_type>
    2754:	mov	x1, x0
    2758:	ldr	x0, [sp, #96]
    275c:	str	x1, [x0]
    2760:	ldr	x0, [sp, #96]
    2764:	ldr	x0, [x0]
    2768:	cmp	x0, #0x0
    276c:	b.ne	2778 <d_type+0xa4>  // b.any
    2770:	mov	x0, #0x0                   	// #0
    2774:	b	31b0 <d_type+0xadc>
    2778:	ldr	x0, [sp, #96]
    277c:	ldr	x0, [x0]
    2780:	ldr	w0, [x0]
    2784:	cmp	w0, #0x20
    2788:	b.eq	27a0 <d_type+0xcc>  // b.none
    278c:	ldr	x0, [sp, #96]
    2790:	ldr	x0, [x0]
    2794:	ldr	w0, [x0]
    2798:	cmp	w0, #0x1f
    279c:	b.ne	27d8 <d_type+0x104>  // b.any
    27a0:	ldr	x0, [sp, #96]
    27a4:	ldr	x0, [x0]
    27a8:	ldr	x0, [x0, #8]
    27ac:	str	x0, [sp, #88]
    27b0:	ldr	x0, [sp, #96]
    27b4:	ldr	x0, [x0]
    27b8:	ldr	x1, [sp, #80]
    27bc:	str	x1, [x0, #8]
    27c0:	ldr	x0, [sp, #96]
    27c4:	ldr	x0, [x0]
    27c8:	str	x0, [sp, #80]
    27cc:	ldr	x0, [sp, #96]
    27d0:	ldr	x1, [sp, #88]
    27d4:	str	x1, [x0]
    27d8:	ldr	x0, [sp, #80]
    27dc:	mov	x1, x0
    27e0:	ldr	x0, [sp, #40]
    27e4:	bl	54dc <d_add_substitution>
    27e8:	cmp	w0, #0x0
    27ec:	b.ne	27f8 <d_type+0x124>  // b.any
    27f0:	mov	x0, #0x0                   	// #0
    27f4:	b	31b0 <d_type+0xadc>
    27f8:	ldr	x0, [sp, #80]
    27fc:	b	31b0 <d_type+0xadc>
    2800:	mov	w0, #0x1                   	// #1
    2804:	str	w0, [sp, #124]
    2808:	ldr	x0, [sp, #40]
    280c:	ldr	x0, [x0, #24]
    2810:	ldrb	w0, [x0]
    2814:	strb	w0, [sp, #123]
    2818:	ldrb	w0, [sp, #123]
    281c:	sub	w0, w0, #0x30
    2820:	cmp	w0, #0x4a
    2824:	b.hi	316c <d_type+0xa98>  // b.pmore
    2828:	adrp	x1, 0 <is_fnqual_component_type>
    282c:	add	x1, x1, #0x0
    2830:	ldr	w0, [x1, w0, uxtw #2]
    2834:	adr	x1, 2840 <d_type+0x16c>
    2838:	add	x0, x1, w0, sxtw #2
    283c:	br	x0
    2840:	ldrb	w0, [sp, #123]
    2844:	sub	w0, w0, #0x61
    2848:	sxtw	x0, w0
    284c:	lsl	x1, x0, #5
    2850:	adrp	x0, 0 <is_fnqual_component_type>
    2854:	add	x0, x0, #0x0
    2858:	add	x0, x1, x0
    285c:	mov	x1, x0
    2860:	ldr	x0, [sp, #40]
    2864:	bl	484 <d_make_builtin_type>
    2868:	str	x0, [sp, #80]
    286c:	ldr	x0, [sp, #40]
    2870:	ldr	w1, [x0, #72]
    2874:	ldr	x0, [sp, #80]
    2878:	ldr	x0, [x0, #8]
    287c:	ldr	w0, [x0, #8]
    2880:	add	w1, w1, w0
    2884:	ldr	x0, [sp, #40]
    2888:	str	w1, [x0, #72]
    288c:	str	wzr, [sp, #124]
    2890:	ldr	x0, [sp, #40]
    2894:	ldr	x0, [x0, #24]
    2898:	add	x1, x0, #0x1
    289c:	ldr	x0, [sp, #40]
    28a0:	str	x1, [x0, #24]
    28a4:	b	3180 <d_type+0xaac>
    28a8:	ldr	x0, [sp, #40]
    28ac:	ldr	x0, [x0, #24]
    28b0:	add	x1, x0, #0x1
    28b4:	ldr	x0, [sp, #40]
    28b8:	str	x1, [x0, #24]
    28bc:	ldr	x0, [sp, #40]
    28c0:	bl	13c4 <d_source_name>
    28c4:	mov	x3, #0x0                   	// #0
    28c8:	mov	x2, x0
    28cc:	mov	w1, #0x28                  	// #40
    28d0:	ldr	x0, [sp, #40]
    28d4:	bl	2c4 <d_make_comp>
    28d8:	str	x0, [sp, #80]
    28dc:	b	3180 <d_type+0xaac>
    28e0:	ldr	x0, [sp, #40]
    28e4:	bl	3664 <d_function_type>
    28e8:	str	x0, [sp, #80]
    28ec:	b	3180 <d_type+0xaac>
    28f0:	ldr	x0, [sp, #40]
    28f4:	bl	39d4 <d_class_enum_type>
    28f8:	str	x0, [sp, #80]
    28fc:	b	3180 <d_type+0xaac>
    2900:	ldr	x0, [sp, #40]
    2904:	bl	39f0 <d_array_type>
    2908:	str	x0, [sp, #80]
    290c:	b	3180 <d_type+0xaac>
    2910:	ldr	x0, [sp, #40]
    2914:	bl	3c5c <d_pointer_to_member_type>
    2918:	str	x0, [sp, #80]
    291c:	b	3180 <d_type+0xaac>
    2920:	ldr	x0, [sp, #40]
    2924:	bl	3da4 <d_template_param>
    2928:	str	x0, [sp, #80]
    292c:	ldr	x0, [sp, #40]
    2930:	ldr	x0, [x0, #24]
    2934:	ldrb	w0, [x0]
    2938:	cmp	w0, #0x49
    293c:	b.ne	3174 <d_type+0xaa0>  // b.any
    2940:	ldr	x0, [sp, #40]
    2944:	ldr	w0, [x0, #80]
    2948:	cmp	w0, #0x0
    294c:	b.ne	2998 <d_type+0x2c4>  // b.any
    2950:	ldr	x0, [sp, #80]
    2954:	mov	x1, x0
    2958:	ldr	x0, [sp, #40]
    295c:	bl	54dc <d_add_substitution>
    2960:	cmp	w0, #0x0
    2964:	b.ne	2970 <d_type+0x29c>  // b.any
    2968:	mov	x0, #0x0                   	// #0
    296c:	b	31b0 <d_type+0xadc>
    2970:	ldr	x19, [sp, #80]
    2974:	ldr	x0, [sp, #40]
    2978:	bl	3e28 <d_template_args>
    297c:	mov	x3, x0
    2980:	mov	x2, x19
    2984:	mov	w1, #0x4                   	// #4
    2988:	ldr	x0, [sp, #40]
    298c:	bl	2c4 <d_make_comp>
    2990:	str	x0, [sp, #80]
    2994:	b	3174 <d_type+0xaa0>
    2998:	add	x0, sp, #0x38
    299c:	mov	x1, x0
    29a0:	ldr	x0, [sp, #40]
    29a4:	bl	591c <d_checkpoint>
    29a8:	ldr	x0, [sp, #40]
    29ac:	bl	3e28 <d_template_args>
    29b0:	str	x0, [sp, #112]
    29b4:	ldr	x0, [sp, #40]
    29b8:	ldr	x0, [x0, #24]
    29bc:	ldrb	w0, [x0]
    29c0:	cmp	w0, #0x49
    29c4:	b.ne	2a08 <d_type+0x334>  // b.any
    29c8:	ldr	x0, [sp, #80]
    29cc:	mov	x1, x0
    29d0:	ldr	x0, [sp, #40]
    29d4:	bl	54dc <d_add_substitution>
    29d8:	cmp	w0, #0x0
    29dc:	b.ne	29e8 <d_type+0x314>  // b.any
    29e0:	mov	x0, #0x0                   	// #0
    29e4:	b	31b0 <d_type+0xadc>
    29e8:	ldr	x0, [sp, #80]
    29ec:	ldr	x3, [sp, #112]
    29f0:	mov	x2, x0
    29f4:	mov	w1, #0x4                   	// #4
    29f8:	ldr	x0, [sp, #40]
    29fc:	bl	2c4 <d_make_comp>
    2a00:	str	x0, [sp, #80]
    2a04:	b	3174 <d_type+0xaa0>
    2a08:	add	x0, sp, #0x38
    2a0c:	mov	x1, x0
    2a10:	ldr	x0, [sp, #40]
    2a14:	bl	5974 <d_backtrack>
    2a18:	b	3174 <d_type+0xaa0>
    2a1c:	ldr	x0, [sp, #40]
    2a20:	ldr	x0, [x0, #24]
    2a24:	ldrb	w0, [x0, #1]
    2a28:	strb	w0, [sp, #111]
    2a2c:	ldrb	w0, [sp, #111]
    2a30:	cmp	w0, #0x2f
    2a34:	b.ls	2a44 <d_type+0x370>  // b.plast
    2a38:	ldrb	w0, [sp, #111]
    2a3c:	cmp	w0, #0x39
    2a40:	b.ls	2a68 <d_type+0x394>  // b.plast
    2a44:	ldrb	w0, [sp, #111]
    2a48:	cmp	w0, #0x5f
    2a4c:	b.eq	2a68 <d_type+0x394>  // b.none
    2a50:	ldrb	w0, [sp, #111]
    2a54:	cmp	w0, #0x40
    2a58:	b.ls	2abc <d_type+0x3e8>  // b.plast
    2a5c:	ldrb	w0, [sp, #111]
    2a60:	cmp	w0, #0x5a
    2a64:	b.hi	2abc <d_type+0x3e8>  // b.pmore
    2a68:	mov	w1, #0x0                   	// #0
    2a6c:	ldr	x0, [sp, #40]
    2a70:	bl	5560 <d_substitution>
    2a74:	str	x0, [sp, #80]
    2a78:	ldr	x0, [sp, #40]
    2a7c:	ldr	x0, [x0, #24]
    2a80:	ldrb	w0, [x0]
    2a84:	cmp	w0, #0x49
    2a88:	b.ne	2ab4 <d_type+0x3e0>  // b.any
    2a8c:	ldr	x19, [sp, #80]
    2a90:	ldr	x0, [sp, #40]
    2a94:	bl	3e28 <d_template_args>
    2a98:	mov	x3, x0
    2a9c:	mov	x2, x19
    2aa0:	mov	w1, #0x4                   	// #4
    2aa4:	ldr	x0, [sp, #40]
    2aa8:	bl	2c4 <d_make_comp>
    2aac:	str	x0, [sp, #80]
    2ab0:	b	2aec <d_type+0x418>
    2ab4:	str	wzr, [sp, #124]
    2ab8:	b	2aec <d_type+0x418>
    2abc:	ldr	x0, [sp, #40]
    2ac0:	bl	39d4 <d_class_enum_type>
    2ac4:	str	x0, [sp, #80]
    2ac8:	ldr	x0, [sp, #80]
    2acc:	cmp	x0, #0x0
    2ad0:	b.eq	317c <d_type+0xaa8>  // b.none
    2ad4:	ldr	x0, [sp, #80]
    2ad8:	ldr	w0, [x0]
    2adc:	cmp	w0, #0x18
    2ae0:	b.ne	317c <d_type+0xaa8>  // b.any
    2ae4:	str	wzr, [sp, #124]
    2ae8:	b	317c <d_type+0xaa8>
    2aec:	b	317c <d_type+0xaa8>
    2af0:	ldr	x0, [sp, #40]
    2af4:	ldr	x0, [x0, #24]
    2af8:	add	x1, x0, #0x1
    2afc:	ldr	x0, [sp, #40]
    2b00:	str	x1, [x0, #24]
    2b04:	ldr	x0, [sp, #40]
    2b08:	bl	26d4 <d_type>
    2b0c:	mov	x3, #0x0                   	// #0
    2b10:	mov	x2, x0
    2b14:	mov	w1, #0x24                  	// #36
    2b18:	ldr	x0, [sp, #40]
    2b1c:	bl	2c4 <d_make_comp>
    2b20:	str	x0, [sp, #80]
    2b24:	b	3180 <d_type+0xaac>
    2b28:	ldr	x0, [sp, #40]
    2b2c:	ldr	x0, [x0, #24]
    2b30:	add	x1, x0, #0x1
    2b34:	ldr	x0, [sp, #40]
    2b38:	str	x1, [x0, #24]
    2b3c:	ldr	x0, [sp, #40]
    2b40:	bl	26d4 <d_type>
    2b44:	mov	x3, #0x0                   	// #0
    2b48:	mov	x2, x0
    2b4c:	mov	w1, #0x22                  	// #34
    2b50:	ldr	x0, [sp, #40]
    2b54:	bl	2c4 <d_make_comp>
    2b58:	str	x0, [sp, #80]
    2b5c:	b	3180 <d_type+0xaac>
    2b60:	ldr	x0, [sp, #40]
    2b64:	ldr	x0, [x0, #24]
    2b68:	add	x1, x0, #0x1
    2b6c:	ldr	x0, [sp, #40]
    2b70:	str	x1, [x0, #24]
    2b74:	ldr	x0, [sp, #40]
    2b78:	bl	26d4 <d_type>
    2b7c:	mov	x3, #0x0                   	// #0
    2b80:	mov	x2, x0
    2b84:	mov	w1, #0x23                  	// #35
    2b88:	ldr	x0, [sp, #40]
    2b8c:	bl	2c4 <d_make_comp>
    2b90:	str	x0, [sp, #80]
    2b94:	b	3180 <d_type+0xaac>
    2b98:	ldr	x0, [sp, #40]
    2b9c:	ldr	x0, [x0, #24]
    2ba0:	add	x1, x0, #0x1
    2ba4:	ldr	x0, [sp, #40]
    2ba8:	str	x1, [x0, #24]
    2bac:	ldr	x0, [sp, #40]
    2bb0:	bl	26d4 <d_type>
    2bb4:	mov	x3, #0x0                   	// #0
    2bb8:	mov	x2, x0
    2bbc:	mov	w1, #0x25                  	// #37
    2bc0:	ldr	x0, [sp, #40]
    2bc4:	bl	2c4 <d_make_comp>
    2bc8:	str	x0, [sp, #80]
    2bcc:	b	3180 <d_type+0xaac>
    2bd0:	ldr	x0, [sp, #40]
    2bd4:	ldr	x0, [x0, #24]
    2bd8:	add	x1, x0, #0x1
    2bdc:	ldr	x0, [sp, #40]
    2be0:	str	x1, [x0, #24]
    2be4:	ldr	x0, [sp, #40]
    2be8:	bl	26d4 <d_type>
    2bec:	mov	x3, #0x0                   	// #0
    2bf0:	mov	x2, x0
    2bf4:	mov	w1, #0x26                  	// #38
    2bf8:	ldr	x0, [sp, #40]
    2bfc:	bl	2c4 <d_make_comp>
    2c00:	str	x0, [sp, #80]
    2c04:	b	3180 <d_type+0xaac>
    2c08:	ldr	x0, [sp, #40]
    2c0c:	ldr	x0, [x0, #24]
    2c10:	add	x1, x0, #0x1
    2c14:	ldr	x0, [sp, #40]
    2c18:	str	x1, [x0, #24]
    2c1c:	ldr	x0, [sp, #40]
    2c20:	bl	13c4 <d_source_name>
    2c24:	str	x0, [sp, #80]
    2c28:	ldr	x0, [sp, #40]
    2c2c:	ldr	x0, [x0, #24]
    2c30:	ldrb	w0, [x0]
    2c34:	cmp	w0, #0x49
    2c38:	b.ne	2c60 <d_type+0x58c>  // b.any
    2c3c:	ldr	x19, [sp, #80]
    2c40:	ldr	x0, [sp, #40]
    2c44:	bl	3e28 <d_template_args>
    2c48:	mov	x3, x0
    2c4c:	mov	x2, x19
    2c50:	mov	w1, #0x4                   	// #4
    2c54:	ldr	x0, [sp, #40]
    2c58:	bl	2c4 <d_make_comp>
    2c5c:	str	x0, [sp, #80]
    2c60:	ldr	x0, [sp, #40]
    2c64:	bl	26d4 <d_type>
    2c68:	mov	x1, x0
    2c6c:	ldr	x0, [sp, #80]
    2c70:	mov	x3, x0
    2c74:	mov	x2, x1
    2c78:	mov	w1, #0x21                  	// #33
    2c7c:	ldr	x0, [sp, #40]
    2c80:	bl	2c4 <d_make_comp>
    2c84:	str	x0, [sp, #80]
    2c88:	b	3180 <d_type+0xaac>
    2c8c:	str	wzr, [sp, #124]
    2c90:	ldr	x0, [sp, #40]
    2c94:	ldr	x0, [x0, #24]
    2c98:	add	x1, x0, #0x1
    2c9c:	ldr	x0, [sp, #40]
    2ca0:	str	x1, [x0, #24]
    2ca4:	ldr	x0, [sp, #40]
    2ca8:	ldr	x0, [x0, #24]
    2cac:	ldrb	w0, [x0]
    2cb0:	cmp	w0, #0x0
    2cb4:	b.eq	2cd4 <d_type+0x600>  // b.none
    2cb8:	ldr	x0, [sp, #40]
    2cbc:	ldr	x0, [x0, #24]
    2cc0:	add	x2, x0, #0x1
    2cc4:	ldr	x1, [sp, #40]
    2cc8:	str	x2, [x1, #24]
    2ccc:	ldrb	w0, [x0]
    2cd0:	b	2cd8 <d_type+0x604>
    2cd4:	mov	w0, #0x0                   	// #0
    2cd8:	strb	w0, [sp, #123]
    2cdc:	ldrb	w0, [sp, #123]
    2ce0:	cmp	w0, #0x76
    2ce4:	b.eq	3110 <d_type+0xa3c>  // b.none
    2ce8:	cmp	w0, #0x76
    2cec:	b.gt	3160 <d_type+0xa8c>
    2cf0:	cmp	w0, #0x75
    2cf4:	b.eq	2f74 <d_type+0x8a0>  // b.none
    2cf8:	cmp	w0, #0x75
    2cfc:	b.gt	3160 <d_type+0xa8c>
    2d00:	cmp	w0, #0x74
    2d04:	b.eq	2dc0 <d_type+0x6ec>  // b.none
    2d08:	cmp	w0, #0x74
    2d0c:	b.gt	3160 <d_type+0xa8c>
    2d10:	cmp	w0, #0x73
    2d14:	b.eq	2fac <d_type+0x8d8>  // b.none
    2d18:	cmp	w0, #0x73
    2d1c:	b.gt	3160 <d_type+0xa8c>
    2d20:	cmp	w0, #0x70
    2d24:	b.eq	2e30 <d_type+0x75c>  // b.none
    2d28:	cmp	w0, #0x70
    2d2c:	b.gt	3160 <d_type+0xa8c>
    2d30:	cmp	w0, #0x6e
    2d34:	b.eq	3128 <d_type+0xa54>  // b.none
    2d38:	cmp	w0, #0x6e
    2d3c:	b.gt	3160 <d_type+0xa8c>
    2d40:	cmp	w0, #0x69
    2d44:	b.eq	2fe4 <d_type+0x910>  // b.none
    2d48:	cmp	w0, #0x69
    2d4c:	b.gt	3160 <d_type+0xa8c>
    2d50:	cmp	w0, #0x68
    2d54:	b.eq	2f3c <d_type+0x868>  // b.none
    2d58:	cmp	w0, #0x68
    2d5c:	b.gt	3160 <d_type+0xa8c>
    2d60:	cmp	w0, #0x66
    2d64:	b.eq	2e94 <d_type+0x7c0>  // b.none
    2d68:	cmp	w0, #0x66
    2d6c:	b.gt	3160 <d_type+0xa8c>
    2d70:	cmp	w0, #0x65
    2d74:	b.eq	2f04 <d_type+0x830>  // b.none
    2d78:	cmp	w0, #0x65
    2d7c:	b.gt	3160 <d_type+0xa8c>
    2d80:	cmp	w0, #0x64
    2d84:	b.eq	2ecc <d_type+0x7f8>  // b.none
    2d88:	cmp	w0, #0x64
    2d8c:	b.gt	3160 <d_type+0xa8c>
    2d90:	cmp	w0, #0x63
    2d94:	b.eq	2e78 <d_type+0x7a4>  // b.none
    2d98:	cmp	w0, #0x63
    2d9c:	b.gt	3160 <d_type+0xa8c>
    2da0:	cmp	w0, #0x61
    2da4:	b.eq	2e5c <d_type+0x788>  // b.none
    2da8:	cmp	w0, #0x61
    2dac:	b.gt	3160 <d_type+0xa8c>
    2db0:	cmp	w0, #0x46
    2db4:	b.eq	301c <d_type+0x948>  // b.none
    2db8:	cmp	w0, #0x54
    2dbc:	b.ne	3160 <d_type+0xa8c>  // b.any
    2dc0:	ldr	x0, [sp, #40]
    2dc4:	bl	4b68 <d_expression>
    2dc8:	mov	x3, #0x0                   	// #0
    2dcc:	mov	x2, x0
    2dd0:	mov	w1, #0x43                  	// #67
    2dd4:	ldr	x0, [sp, #40]
    2dd8:	bl	2c4 <d_make_comp>
    2ddc:	str	x0, [sp, #80]
    2de0:	ldr	x0, [sp, #80]
    2de4:	cmp	x0, #0x0
    2de8:	b.eq	2e24 <d_type+0x750>  // b.none
    2dec:	ldr	x0, [sp, #40]
    2df0:	ldr	x0, [x0, #24]
    2df4:	ldrb	w0, [x0]
    2df8:	cmp	w0, #0x0
    2dfc:	b.eq	2e20 <d_type+0x74c>  // b.none
    2e00:	ldr	x0, [sp, #40]
    2e04:	ldr	x0, [x0, #24]
    2e08:	add	x2, x0, #0x1
    2e0c:	ldr	x1, [sp, #40]
    2e10:	str	x2, [x1, #24]
    2e14:	ldrb	w0, [x0]
    2e18:	cmp	w0, #0x45
    2e1c:	b.eq	2e24 <d_type+0x750>  // b.none
    2e20:	str	xzr, [sp, #80]
    2e24:	mov	w0, #0x1                   	// #1
    2e28:	str	w0, [sp, #124]
    2e2c:	b	3168 <d_type+0xa94>
    2e30:	ldr	x0, [sp, #40]
    2e34:	bl	26d4 <d_type>
    2e38:	mov	x3, #0x0                   	// #0
    2e3c:	mov	x2, x0
    2e40:	mov	w1, #0x4b                  	// #75
    2e44:	ldr	x0, [sp, #40]
    2e48:	bl	2c4 <d_make_comp>
    2e4c:	str	x0, [sp, #80]
    2e50:	mov	w0, #0x1                   	// #1
    2e54:	str	w0, [sp, #124]
    2e58:	b	3168 <d_type+0xa94>
    2e5c:	mov	w2, #0x4                   	// #4
    2e60:	adrp	x0, 0 <is_fnqual_component_type>
    2e64:	add	x1, x0, #0x0
    2e68:	ldr	x0, [sp, #40]
    2e6c:	bl	438 <d_make_name>
    2e70:	str	x0, [sp, #80]
    2e74:	b	3168 <d_type+0xa94>
    2e78:	mov	w2, #0xe                   	// #14
    2e7c:	adrp	x0, 0 <is_fnqual_component_type>
    2e80:	add	x1, x0, #0x0
    2e84:	ldr	x0, [sp, #40]
    2e88:	bl	438 <d_make_name>
    2e8c:	str	x0, [sp, #80]
    2e90:	b	3168 <d_type+0xa94>
    2e94:	adrp	x0, 0 <is_fnqual_component_type>
    2e98:	add	x1, x0, #0x0
    2e9c:	ldr	x0, [sp, #40]
    2ea0:	bl	484 <d_make_builtin_type>
    2ea4:	str	x0, [sp, #80]
    2ea8:	ldr	x0, [sp, #40]
    2eac:	ldr	w1, [x0, #72]
    2eb0:	ldr	x0, [sp, #80]
    2eb4:	ldr	x0, [x0, #8]
    2eb8:	ldr	w0, [x0, #8]
    2ebc:	add	w1, w1, w0
    2ec0:	ldr	x0, [sp, #40]
    2ec4:	str	w1, [x0, #72]
    2ec8:	b	3168 <d_type+0xa94>
    2ecc:	adrp	x0, 0 <is_fnqual_component_type>
    2ed0:	add	x1, x0, #0x0
    2ed4:	ldr	x0, [sp, #40]
    2ed8:	bl	484 <d_make_builtin_type>
    2edc:	str	x0, [sp, #80]
    2ee0:	ldr	x0, [sp, #40]
    2ee4:	ldr	w1, [x0, #72]
    2ee8:	ldr	x0, [sp, #80]
    2eec:	ldr	x0, [x0, #8]
    2ef0:	ldr	w0, [x0, #8]
    2ef4:	add	w1, w1, w0
    2ef8:	ldr	x0, [sp, #40]
    2efc:	str	w1, [x0, #72]
    2f00:	b	3168 <d_type+0xa94>
    2f04:	adrp	x0, 0 <is_fnqual_component_type>
    2f08:	add	x1, x0, #0x0
    2f0c:	ldr	x0, [sp, #40]
    2f10:	bl	484 <d_make_builtin_type>
    2f14:	str	x0, [sp, #80]
    2f18:	ldr	x0, [sp, #40]
    2f1c:	ldr	w1, [x0, #72]
    2f20:	ldr	x0, [sp, #80]
    2f24:	ldr	x0, [x0, #8]
    2f28:	ldr	w0, [x0, #8]
    2f2c:	add	w1, w1, w0
    2f30:	ldr	x0, [sp, #40]
    2f34:	str	w1, [x0, #72]
    2f38:	b	3168 <d_type+0xa94>
    2f3c:	adrp	x0, 0 <is_fnqual_component_type>
    2f40:	add	x1, x0, #0x0
    2f44:	ldr	x0, [sp, #40]
    2f48:	bl	484 <d_make_builtin_type>
    2f4c:	str	x0, [sp, #80]
    2f50:	ldr	x0, [sp, #40]
    2f54:	ldr	w1, [x0, #72]
    2f58:	ldr	x0, [sp, #80]
    2f5c:	ldr	x0, [x0, #8]
    2f60:	ldr	w0, [x0, #8]
    2f64:	add	w1, w1, w0
    2f68:	ldr	x0, [sp, #40]
    2f6c:	str	w1, [x0, #72]
    2f70:	b	3168 <d_type+0xa94>
    2f74:	adrp	x0, 0 <is_fnqual_component_type>
    2f78:	add	x1, x0, #0x0
    2f7c:	ldr	x0, [sp, #40]
    2f80:	bl	484 <d_make_builtin_type>
    2f84:	str	x0, [sp, #80]
    2f88:	ldr	x0, [sp, #40]
    2f8c:	ldr	w1, [x0, #72]
    2f90:	ldr	x0, [sp, #80]
    2f94:	ldr	x0, [x0, #8]
    2f98:	ldr	w0, [x0, #8]
    2f9c:	add	w1, w1, w0
    2fa0:	ldr	x0, [sp, #40]
    2fa4:	str	w1, [x0, #72]
    2fa8:	b	3168 <d_type+0xa94>
    2fac:	adrp	x0, 0 <is_fnqual_component_type>
    2fb0:	add	x1, x0, #0x0
    2fb4:	ldr	x0, [sp, #40]
    2fb8:	bl	484 <d_make_builtin_type>
    2fbc:	str	x0, [sp, #80]
    2fc0:	ldr	x0, [sp, #40]
    2fc4:	ldr	w1, [x0, #72]
    2fc8:	ldr	x0, [sp, #80]
    2fcc:	ldr	x0, [x0, #8]
    2fd0:	ldr	w0, [x0, #8]
    2fd4:	add	w1, w1, w0
    2fd8:	ldr	x0, [sp, #40]
    2fdc:	str	w1, [x0, #72]
    2fe0:	b	3168 <d_type+0xa94>
    2fe4:	adrp	x0, 0 <is_fnqual_component_type>
    2fe8:	add	x1, x0, #0x0
    2fec:	ldr	x0, [sp, #40]
    2ff0:	bl	484 <d_make_builtin_type>
    2ff4:	str	x0, [sp, #80]
    2ff8:	ldr	x0, [sp, #40]
    2ffc:	ldr	w1, [x0, #72]
    3000:	ldr	x0, [sp, #80]
    3004:	ldr	x0, [x0, #8]
    3008:	ldr	w0, [x0, #8]
    300c:	add	w1, w1, w0
    3010:	ldr	x0, [sp, #40]
    3014:	str	w1, [x0, #72]
    3018:	b	3168 <d_type+0xa94>
    301c:	ldr	x0, [sp, #40]
    3020:	bl	248 <d_make_empty>
    3024:	str	x0, [sp, #80]
    3028:	ldr	x0, [sp, #80]
    302c:	mov	w1, #0x2c                  	// #44
    3030:	str	w1, [x0]
    3034:	ldr	x0, [sp, #40]
    3038:	ldr	x0, [x0, #24]
    303c:	ldrb	w0, [x0]
    3040:	cmp	w0, #0x2f
    3044:	b.ls	3064 <d_type+0x990>  // b.plast
    3048:	ldr	x0, [sp, #40]
    304c:	ldr	x0, [x0, #24]
    3050:	ldrb	w0, [x0]
    3054:	cmp	w0, #0x39
    3058:	b.hi	3064 <d_type+0x990>  // b.pmore
    305c:	mov	w1, #0x1                   	// #1
    3060:	b	3068 <d_type+0x994>
    3064:	mov	w1, #0x0                   	// #0
    3068:	ldr	x0, [sp, #80]
    306c:	sxth	w1, w1
    3070:	strh	w1, [x0, #16]
    3074:	ldrsh	w0, [x0, #16]
    3078:	cmp	w0, #0x0
    307c:	b.eq	3088 <d_type+0x9b4>  // b.none
    3080:	ldr	x0, [sp, #40]
    3084:	bl	1418 <d_number>
    3088:	ldr	x19, [sp, #80]
    308c:	ldr	x0, [sp, #40]
    3090:	bl	26d4 <d_type>
    3094:	str	x0, [x19, #8]
    3098:	ldr	x0, [sp, #80]
    309c:	ldr	x0, [x0, #8]
    30a0:	cmp	x0, #0x0
    30a4:	b.ne	30b0 <d_type+0x9dc>  // b.any
    30a8:	mov	x0, #0x0                   	// #0
    30ac:	b	31b0 <d_type+0xadc>
    30b0:	ldr	x0, [sp, #40]
    30b4:	bl	1418 <d_number>
    30b8:	ldr	x0, [sp, #40]
    30bc:	ldr	x0, [x0, #24]
    30c0:	ldrb	w0, [x0]
    30c4:	cmp	w0, #0x0
    30c8:	b.eq	30e8 <d_type+0xa14>  // b.none
    30cc:	ldr	x0, [sp, #40]
    30d0:	ldr	x0, [x0, #24]
    30d4:	add	x2, x0, #0x1
    30d8:	ldr	x1, [sp, #40]
    30dc:	str	x2, [x1, #24]
    30e0:	ldrb	w0, [x0]
    30e4:	b	30ec <d_type+0xa18>
    30e8:	mov	w0, #0x0                   	// #0
    30ec:	strb	w0, [sp, #123]
    30f0:	ldrb	w0, [sp, #123]
    30f4:	cmp	w0, #0x73
    30f8:	cset	w0, eq  // eq = none
    30fc:	and	w1, w0, #0xff
    3100:	ldr	x0, [sp, #80]
    3104:	sxth	w1, w1
    3108:	strh	w1, [x0, #18]
    310c:	b	3168 <d_type+0xa94>
    3110:	ldr	x0, [sp, #40]
    3114:	bl	3b88 <d_vector_type>
    3118:	str	x0, [sp, #80]
    311c:	mov	w0, #0x1                   	// #1
    3120:	str	w0, [sp, #124]
    3124:	b	3168 <d_type+0xa94>
    3128:	adrp	x0, 0 <is_fnqual_component_type>
    312c:	add	x1, x0, #0x0
    3130:	ldr	x0, [sp, #40]
    3134:	bl	484 <d_make_builtin_type>
    3138:	str	x0, [sp, #80]
    313c:	ldr	x0, [sp, #40]
    3140:	ldr	w1, [x0, #72]
    3144:	ldr	x0, [sp, #80]
    3148:	ldr	x0, [x0, #8]
    314c:	ldr	w0, [x0, #8]
    3150:	add	w1, w1, w0
    3154:	ldr	x0, [sp, #40]
    3158:	str	w1, [x0, #72]
    315c:	b	3168 <d_type+0xa94>
    3160:	mov	x0, #0x0                   	// #0
    3164:	b	31b0 <d_type+0xadc>
    3168:	b	3180 <d_type+0xaac>
    316c:	mov	x0, #0x0                   	// #0
    3170:	b	31b0 <d_type+0xadc>
    3174:	nop
    3178:	b	3180 <d_type+0xaac>
    317c:	nop
    3180:	ldr	w0, [sp, #124]
    3184:	cmp	w0, #0x0
    3188:	b.eq	31ac <d_type+0xad8>  // b.none
    318c:	ldr	x0, [sp, #80]
    3190:	mov	x1, x0
    3194:	ldr	x0, [sp, #40]
    3198:	bl	54dc <d_add_substitution>
    319c:	cmp	w0, #0x0
    31a0:	b.ne	31ac <d_type+0xad8>  // b.any
    31a4:	mov	x0, #0x0                   	// #0
    31a8:	b	31b0 <d_type+0xadc>
    31ac:	ldr	x0, [sp, #80]
    31b0:	ldr	x19, [sp, #16]
    31b4:	ldp	x29, x30, [sp], #128
    31b8:	ret

00000000000031bc <d_cv_qualifiers>:
    31bc:	stp	x29, x30, [sp, #-80]!
    31c0:	mov	x29, sp
    31c4:	str	x0, [sp, #40]
    31c8:	str	x1, [sp, #32]
    31cc:	str	w2, [sp, #28]
    31d0:	ldr	x0, [sp, #32]
    31d4:	str	x0, [sp, #72]
    31d8:	ldr	x0, [sp, #40]
    31dc:	ldr	x0, [x0, #24]
    31e0:	ldrb	w0, [x0]
    31e4:	strb	w0, [sp, #71]
    31e8:	b	34d4 <d_cv_qualifiers+0x318>
    31ec:	str	xzr, [sp, #56]
    31f0:	ldr	x0, [sp, #40]
    31f4:	ldr	x0, [x0, #24]
    31f8:	add	x1, x0, #0x1
    31fc:	ldr	x0, [sp, #40]
    3200:	str	x1, [x0, #24]
    3204:	ldrb	w0, [sp, #71]
    3208:	cmp	w0, #0x72
    320c:	b.ne	3248 <d_cv_qualifiers+0x8c>  // b.any
    3210:	ldr	w0, [sp, #28]
    3214:	cmp	w0, #0x0
    3218:	b.eq	3224 <d_cv_qualifiers+0x68>  // b.none
    321c:	mov	w0, #0x1c                  	// #28
    3220:	b	3228 <d_cv_qualifiers+0x6c>
    3224:	mov	w0, #0x19                  	// #25
    3228:	str	w0, [sp, #64]
    322c:	ldr	x0, [sp, #40]
    3230:	ldr	w0, [x0, #72]
    3234:	add	w0, w0, #0x9
    3238:	mov	w1, w0
    323c:	ldr	x0, [sp, #40]
    3240:	str	w1, [x0, #72]
    3244:	b	347c <d_cv_qualifiers+0x2c0>
    3248:	ldrb	w0, [sp, #71]
    324c:	cmp	w0, #0x56
    3250:	b.ne	328c <d_cv_qualifiers+0xd0>  // b.any
    3254:	ldr	w0, [sp, #28]
    3258:	cmp	w0, #0x0
    325c:	b.eq	3268 <d_cv_qualifiers+0xac>  // b.none
    3260:	mov	w0, #0x1d                  	// #29
    3264:	b	326c <d_cv_qualifiers+0xb0>
    3268:	mov	w0, #0x1a                  	// #26
    326c:	str	w0, [sp, #64]
    3270:	ldr	x0, [sp, #40]
    3274:	ldr	w0, [x0, #72]
    3278:	add	w0, w0, #0x9
    327c:	mov	w1, w0
    3280:	ldr	x0, [sp, #40]
    3284:	str	w1, [x0, #72]
    3288:	b	347c <d_cv_qualifiers+0x2c0>
    328c:	ldrb	w0, [sp, #71]
    3290:	cmp	w0, #0x4b
    3294:	b.ne	32d0 <d_cv_qualifiers+0x114>  // b.any
    3298:	ldr	w0, [sp, #28]
    329c:	cmp	w0, #0x0
    32a0:	b.eq	32ac <d_cv_qualifiers+0xf0>  // b.none
    32a4:	mov	w0, #0x1e                  	// #30
    32a8:	b	32b0 <d_cv_qualifiers+0xf4>
    32ac:	mov	w0, #0x1b                  	// #27
    32b0:	str	w0, [sp, #64]
    32b4:	ldr	x0, [sp, #40]
    32b8:	ldr	w0, [x0, #72]
    32bc:	add	w0, w0, #0x6
    32c0:	mov	w1, w0
    32c4:	ldr	x0, [sp, #40]
    32c8:	str	w1, [x0, #72]
    32cc:	b	347c <d_cv_qualifiers+0x2c0>
    32d0:	ldr	x0, [sp, #40]
    32d4:	ldr	x0, [x0, #24]
    32d8:	ldrb	w0, [x0]
    32dc:	cmp	w0, #0x0
    32e0:	b.eq	3300 <d_cv_qualifiers+0x144>  // b.none
    32e4:	ldr	x0, [sp, #40]
    32e8:	ldr	x0, [x0, #24]
    32ec:	add	x2, x0, #0x1
    32f0:	ldr	x1, [sp, #40]
    32f4:	str	x2, [x1, #24]
    32f8:	ldrb	w0, [x0]
    32fc:	b	3304 <d_cv_qualifiers+0x148>
    3300:	mov	w0, #0x0                   	// #0
    3304:	strb	w0, [sp, #71]
    3308:	ldrb	w0, [sp, #71]
    330c:	cmp	w0, #0x78
    3310:	b.ne	3338 <d_cv_qualifiers+0x17c>  // b.any
    3314:	mov	w0, #0x4d                  	// #77
    3318:	str	w0, [sp, #64]
    331c:	ldr	x0, [sp, #40]
    3320:	ldr	w0, [x0, #72]
    3324:	add	w0, w0, #0x11
    3328:	mov	w1, w0
    332c:	ldr	x0, [sp, #40]
    3330:	str	w1, [x0, #72]
    3334:	b	347c <d_cv_qualifiers+0x2c0>
    3338:	ldrb	w0, [sp, #71]
    333c:	cmp	w0, #0x6f
    3340:	b.eq	3350 <d_cv_qualifiers+0x194>  // b.none
    3344:	ldrb	w0, [sp, #71]
    3348:	cmp	w0, #0x4f
    334c:	b.ne	33e0 <d_cv_qualifiers+0x224>  // b.any
    3350:	mov	w0, #0x4f                  	// #79
    3354:	str	w0, [sp, #64]
    3358:	ldr	x0, [sp, #40]
    335c:	ldr	w0, [x0, #72]
    3360:	add	w0, w0, #0x9
    3364:	mov	w1, w0
    3368:	ldr	x0, [sp, #40]
    336c:	str	w1, [x0, #72]
    3370:	ldrb	w0, [sp, #71]
    3374:	cmp	w0, #0x4f
    3378:	b.ne	3478 <d_cv_qualifiers+0x2bc>  // b.any
    337c:	ldr	x0, [sp, #40]
    3380:	bl	4b68 <d_expression>
    3384:	str	x0, [sp, #56]
    3388:	ldr	x0, [sp, #56]
    338c:	cmp	x0, #0x0
    3390:	b.ne	339c <d_cv_qualifiers+0x1e0>  // b.any
    3394:	mov	x0, #0x0                   	// #0
    3398:	b	3594 <d_cv_qualifiers+0x3d8>
    339c:	ldr	x0, [sp, #40]
    33a0:	ldr	x0, [x0, #24]
    33a4:	ldrb	w0, [x0]
    33a8:	cmp	w0, #0x45
    33ac:	b.ne	33cc <d_cv_qualifiers+0x210>  // b.any
    33b0:	ldr	x0, [sp, #40]
    33b4:	ldr	x0, [x0, #24]
    33b8:	add	x1, x0, #0x1
    33bc:	ldr	x0, [sp, #40]
    33c0:	str	x1, [x0, #24]
    33c4:	mov	w0, #0x0                   	// #0
    33c8:	b	33d0 <d_cv_qualifiers+0x214>
    33cc:	mov	w0, #0x1                   	// #1
    33d0:	cmp	w0, #0x0
    33d4:	b.eq	3478 <d_cv_qualifiers+0x2bc>  // b.none
    33d8:	mov	x0, #0x0                   	// #0
    33dc:	b	3594 <d_cv_qualifiers+0x3d8>
    33e0:	ldrb	w0, [sp, #71]
    33e4:	cmp	w0, #0x77
    33e8:	b.ne	3470 <d_cv_qualifiers+0x2b4>  // b.any
    33ec:	mov	w0, #0x50                  	// #80
    33f0:	str	w0, [sp, #64]
    33f4:	ldr	x0, [sp, #40]
    33f8:	ldr	w0, [x0, #72]
    33fc:	add	w0, w0, #0x6
    3400:	mov	w1, w0
    3404:	ldr	x0, [sp, #40]
    3408:	str	w1, [x0, #72]
    340c:	ldr	x0, [sp, #40]
    3410:	bl	37ac <d_parmlist>
    3414:	str	x0, [sp, #56]
    3418:	ldr	x0, [sp, #56]
    341c:	cmp	x0, #0x0
    3420:	b.ne	342c <d_cv_qualifiers+0x270>  // b.any
    3424:	mov	x0, #0x0                   	// #0
    3428:	b	3594 <d_cv_qualifiers+0x3d8>
    342c:	ldr	x0, [sp, #40]
    3430:	ldr	x0, [x0, #24]
    3434:	ldrb	w0, [x0]
    3438:	cmp	w0, #0x45
    343c:	b.ne	345c <d_cv_qualifiers+0x2a0>  // b.any
    3440:	ldr	x0, [sp, #40]
    3444:	ldr	x0, [x0, #24]
    3448:	add	x1, x0, #0x1
    344c:	ldr	x0, [sp, #40]
    3450:	str	x1, [x0, #24]
    3454:	mov	w0, #0x0                   	// #0
    3458:	b	3460 <d_cv_qualifiers+0x2a4>
    345c:	mov	w0, #0x1                   	// #1
    3460:	cmp	w0, #0x0
    3464:	b.eq	347c <d_cv_qualifiers+0x2c0>  // b.none
    3468:	mov	x0, #0x0                   	// #0
    346c:	b	3594 <d_cv_qualifiers+0x3d8>
    3470:	mov	x0, #0x0                   	// #0
    3474:	b	3594 <d_cv_qualifiers+0x3d8>
    3478:	nop
    347c:	ldr	x3, [sp, #56]
    3480:	mov	x2, #0x0                   	// #0
    3484:	ldr	w1, [sp, #64]
    3488:	ldr	x0, [sp, #40]
    348c:	bl	2c4 <d_make_comp>
    3490:	mov	x1, x0
    3494:	ldr	x0, [sp, #32]
    3498:	str	x1, [x0]
    349c:	ldr	x0, [sp, #32]
    34a0:	ldr	x0, [x0]
    34a4:	cmp	x0, #0x0
    34a8:	b.ne	34b4 <d_cv_qualifiers+0x2f8>  // b.any
    34ac:	mov	x0, #0x0                   	// #0
    34b0:	b	3594 <d_cv_qualifiers+0x3d8>
    34b4:	ldr	x0, [sp, #32]
    34b8:	ldr	x0, [x0]
    34bc:	add	x0, x0, #0x8
    34c0:	str	x0, [sp, #32]
    34c4:	ldr	x0, [sp, #40]
    34c8:	ldr	x0, [x0, #24]
    34cc:	ldrb	w0, [x0]
    34d0:	strb	w0, [sp, #71]
    34d4:	ldr	x0, [sp, #40]
    34d8:	bl	2630 <next_is_type_qual>
    34dc:	cmp	w0, #0x0
    34e0:	b.ne	31ec <d_cv_qualifiers+0x30>  // b.any
    34e4:	ldr	w0, [sp, #28]
    34e8:	cmp	w0, #0x0
    34ec:	b.ne	3590 <d_cv_qualifiers+0x3d4>  // b.any
    34f0:	ldrb	w0, [sp, #71]
    34f4:	cmp	w0, #0x46
    34f8:	b.ne	3590 <d_cv_qualifiers+0x3d4>  // b.any
    34fc:	b	3580 <d_cv_qualifiers+0x3c4>
    3500:	ldr	x0, [sp, #72]
    3504:	ldr	x0, [x0]
    3508:	ldr	w0, [x0]
    350c:	cmp	w0, #0x1b
    3510:	b.eq	3558 <d_cv_qualifiers+0x39c>  // b.none
    3514:	cmp	w0, #0x1b
    3518:	b.hi	356c <d_cv_qualifiers+0x3b0>  // b.pmore
    351c:	cmp	w0, #0x19
    3520:	b.eq	3530 <d_cv_qualifiers+0x374>  // b.none
    3524:	cmp	w0, #0x1a
    3528:	b.eq	3544 <d_cv_qualifiers+0x388>  // b.none
    352c:	b	356c <d_cv_qualifiers+0x3b0>
    3530:	ldr	x0, [sp, #72]
    3534:	ldr	x0, [x0]
    3538:	mov	w1, #0x1c                  	// #28
    353c:	str	w1, [x0]
    3540:	b	3570 <d_cv_qualifiers+0x3b4>
    3544:	ldr	x0, [sp, #72]
    3548:	ldr	x0, [x0]
    354c:	mov	w1, #0x1d                  	// #29
    3550:	str	w1, [x0]
    3554:	b	3570 <d_cv_qualifiers+0x3b4>
    3558:	ldr	x0, [sp, #72]
    355c:	ldr	x0, [x0]
    3560:	mov	w1, #0x1e                  	// #30
    3564:	str	w1, [x0]
    3568:	b	3570 <d_cv_qualifiers+0x3b4>
    356c:	nop
    3570:	ldr	x0, [sp, #72]
    3574:	ldr	x0, [x0]
    3578:	add	x0, x0, #0x8
    357c:	str	x0, [sp, #72]
    3580:	ldr	x1, [sp, #72]
    3584:	ldr	x0, [sp, #32]
    3588:	cmp	x1, x0
    358c:	b.ne	3500 <d_cv_qualifiers+0x344>  // b.any
    3590:	ldr	x0, [sp, #32]
    3594:	ldp	x29, x30, [sp], #80
    3598:	ret

000000000000359c <d_ref_qualifier>:
    359c:	stp	x29, x30, [sp, #-48]!
    35a0:	mov	x29, sp
    35a4:	str	x0, [sp, #24]
    35a8:	str	x1, [sp, #16]
    35ac:	ldr	x0, [sp, #16]
    35b0:	str	x0, [sp, #40]
    35b4:	ldr	x0, [sp, #24]
    35b8:	ldr	x0, [x0, #24]
    35bc:	ldrb	w0, [x0]
    35c0:	strb	w0, [sp, #35]
    35c4:	ldrb	w0, [sp, #35]
    35c8:	cmp	w0, #0x52
    35cc:	b.eq	35dc <d_ref_qualifier+0x40>  // b.none
    35d0:	ldrb	w0, [sp, #35]
    35d4:	cmp	w0, #0x4f
    35d8:	b.ne	3658 <d_ref_qualifier+0xbc>  // b.any
    35dc:	ldrb	w0, [sp, #35]
    35e0:	cmp	w0, #0x52
    35e4:	b.ne	360c <d_ref_qualifier+0x70>  // b.any
    35e8:	mov	w0, #0x1f                  	// #31
    35ec:	str	w0, [sp, #36]
    35f0:	ldr	x0, [sp, #24]
    35f4:	ldr	w0, [x0, #72]
    35f8:	add	w0, w0, #0x2
    35fc:	mov	w1, w0
    3600:	ldr	x0, [sp, #24]
    3604:	str	w1, [x0, #72]
    3608:	b	362c <d_ref_qualifier+0x90>
    360c:	mov	w0, #0x20                  	// #32
    3610:	str	w0, [sp, #36]
    3614:	ldr	x0, [sp, #24]
    3618:	ldr	w0, [x0, #72]
    361c:	add	w0, w0, #0x3
    3620:	mov	w1, w0
    3624:	ldr	x0, [sp, #24]
    3628:	str	w1, [x0, #72]
    362c:	ldr	x0, [sp, #24]
    3630:	ldr	x0, [x0, #24]
    3634:	add	x1, x0, #0x1
    3638:	ldr	x0, [sp, #24]
    363c:	str	x1, [x0, #24]
    3640:	mov	x3, #0x0                   	// #0
    3644:	ldr	x2, [sp, #40]
    3648:	ldr	w1, [sp, #36]
    364c:	ldr	x0, [sp, #24]
    3650:	bl	2c4 <d_make_comp>
    3654:	str	x0, [sp, #40]
    3658:	ldr	x0, [sp, #40]
    365c:	ldp	x29, x30, [sp], #48
    3660:	ret

0000000000003664 <d_function_type>:
    3664:	stp	x29, x30, [sp, #-48]!
    3668:	mov	x29, sp
    366c:	str	x0, [sp, #24]
    3670:	str	xzr, [sp, #40]
    3674:	ldr	x0, [sp, #24]
    3678:	ldr	w0, [x0, #16]
    367c:	and	w0, w0, #0x40000
    3680:	cmp	w0, #0x0
    3684:	b.ne	36b4 <d_function_type+0x50>  // b.any
    3688:	ldr	x0, [sp, #24]
    368c:	ldr	w0, [x0, #84]
    3690:	cmp	w0, #0x800
    3694:	b.ls	36a0 <d_function_type+0x3c>  // b.plast
    3698:	mov	x0, #0x0                   	// #0
    369c:	b	37a4 <d_function_type+0x140>
    36a0:	ldr	x0, [sp, #24]
    36a4:	ldr	w0, [x0, #84]
    36a8:	add	w1, w0, #0x1
    36ac:	ldr	x0, [sp, #24]
    36b0:	str	w1, [x0, #84]
    36b4:	ldr	x0, [sp, #24]
    36b8:	ldr	x0, [x0, #24]
    36bc:	ldrb	w0, [x0]
    36c0:	cmp	w0, #0x46
    36c4:	b.ne	36e4 <d_function_type+0x80>  // b.any
    36c8:	ldr	x0, [sp, #24]
    36cc:	ldr	x0, [x0, #24]
    36d0:	add	x1, x0, #0x1
    36d4:	ldr	x0, [sp, #24]
    36d8:	str	x1, [x0, #24]
    36dc:	mov	w0, #0x1                   	// #1
    36e0:	b	36e8 <d_function_type+0x84>
    36e4:	mov	w0, #0x0                   	// #0
    36e8:	cmp	w0, #0x0
    36ec:	b.eq	3778 <d_function_type+0x114>  // b.none
    36f0:	ldr	x0, [sp, #24]
    36f4:	ldr	x0, [x0, #24]
    36f8:	ldrb	w0, [x0]
    36fc:	cmp	w0, #0x59
    3700:	b.ne	3718 <d_function_type+0xb4>  // b.any
    3704:	ldr	x0, [sp, #24]
    3708:	ldr	x0, [x0, #24]
    370c:	add	x1, x0, #0x1
    3710:	ldr	x0, [sp, #24]
    3714:	str	x1, [x0, #24]
    3718:	mov	w1, #0x1                   	// #1
    371c:	ldr	x0, [sp, #24]
    3720:	bl	3920 <d_bare_function_type>
    3724:	str	x0, [sp, #40]
    3728:	ldr	x1, [sp, #40]
    372c:	ldr	x0, [sp, #24]
    3730:	bl	359c <d_ref_qualifier>
    3734:	str	x0, [sp, #40]
    3738:	ldr	x0, [sp, #24]
    373c:	ldr	x0, [x0, #24]
    3740:	ldrb	w0, [x0]
    3744:	cmp	w0, #0x45
    3748:	b.ne	3768 <d_function_type+0x104>  // b.any
    374c:	ldr	x0, [sp, #24]
    3750:	ldr	x0, [x0, #24]
    3754:	add	x1, x0, #0x1
    3758:	ldr	x0, [sp, #24]
    375c:	str	x1, [x0, #24]
    3760:	mov	w0, #0x0                   	// #0
    3764:	b	376c <d_function_type+0x108>
    3768:	mov	w0, #0x1                   	// #1
    376c:	cmp	w0, #0x0
    3770:	b.eq	3778 <d_function_type+0x114>  // b.none
    3774:	str	xzr, [sp, #40]
    3778:	ldr	x0, [sp, #24]
    377c:	ldr	w0, [x0, #16]
    3780:	and	w0, w0, #0x40000
    3784:	cmp	w0, #0x0
    3788:	b.ne	37a0 <d_function_type+0x13c>  // b.any
    378c:	ldr	x0, [sp, #24]
    3790:	ldr	w0, [x0, #84]
    3794:	sub	w1, w0, #0x1
    3798:	ldr	x0, [sp, #24]
    379c:	str	w1, [x0, #84]
    37a0:	ldr	x0, [sp, #40]
    37a4:	ldp	x29, x30, [sp], #48
    37a8:	ret

00000000000037ac <d_parmlist>:
    37ac:	stp	x29, x30, [sp, #-64]!
    37b0:	mov	x29, sp
    37b4:	str	x0, [sp, #24]
    37b8:	str	xzr, [sp, #32]
    37bc:	add	x0, sp, #0x20
    37c0:	str	x0, [sp, #56]
    37c4:	ldr	x0, [sp, #24]
    37c8:	ldr	x0, [x0, #24]
    37cc:	ldrb	w0, [x0]
    37d0:	strb	w0, [sp, #55]
    37d4:	ldrb	w0, [sp, #55]
    37d8:	cmp	w0, #0x0
    37dc:	b.eq	3898 <d_parmlist+0xec>  // b.none
    37e0:	ldrb	w0, [sp, #55]
    37e4:	cmp	w0, #0x45
    37e8:	b.eq	3898 <d_parmlist+0xec>  // b.none
    37ec:	ldrb	w0, [sp, #55]
    37f0:	cmp	w0, #0x2e
    37f4:	b.eq	3898 <d_parmlist+0xec>  // b.none
    37f8:	ldrb	w0, [sp, #55]
    37fc:	cmp	w0, #0x52
    3800:	b.eq	3810 <d_parmlist+0x64>  // b.none
    3804:	ldrb	w0, [sp, #55]
    3808:	cmp	w0, #0x4f
    380c:	b.ne	3828 <d_parmlist+0x7c>  // b.any
    3810:	ldr	x0, [sp, #24]
    3814:	ldr	x0, [x0, #24]
    3818:	add	x0, x0, #0x1
    381c:	ldrb	w0, [x0]
    3820:	cmp	w0, #0x45
    3824:	b.eq	3894 <d_parmlist+0xe8>  // b.none
    3828:	ldr	x0, [sp, #24]
    382c:	bl	26d4 <d_type>
    3830:	str	x0, [sp, #40]
    3834:	ldr	x0, [sp, #40]
    3838:	cmp	x0, #0x0
    383c:	b.ne	3848 <d_parmlist+0x9c>  // b.any
    3840:	mov	x0, #0x0                   	// #0
    3844:	b	3918 <d_parmlist+0x16c>
    3848:	mov	x3, #0x0                   	// #0
    384c:	ldr	x2, [sp, #40]
    3850:	mov	w1, #0x2e                  	// #46
    3854:	ldr	x0, [sp, #24]
    3858:	bl	2c4 <d_make_comp>
    385c:	mov	x1, x0
    3860:	ldr	x0, [sp, #56]
    3864:	str	x1, [x0]
    3868:	ldr	x0, [sp, #56]
    386c:	ldr	x0, [x0]
    3870:	cmp	x0, #0x0
    3874:	b.ne	3880 <d_parmlist+0xd4>  // b.any
    3878:	mov	x0, #0x0                   	// #0
    387c:	b	3918 <d_parmlist+0x16c>
    3880:	ldr	x0, [sp, #56]
    3884:	ldr	x0, [x0]
    3888:	add	x0, x0, #0x10
    388c:	str	x0, [sp, #56]
    3890:	b	37c4 <d_parmlist+0x18>
    3894:	nop
    3898:	ldr	x0, [sp, #32]
    389c:	cmp	x0, #0x0
    38a0:	b.ne	38ac <d_parmlist+0x100>  // b.any
    38a4:	mov	x0, #0x0                   	// #0
    38a8:	b	3918 <d_parmlist+0x16c>
    38ac:	ldr	x0, [sp, #32]
    38b0:	ldr	x0, [x0, #16]
    38b4:	cmp	x0, #0x0
    38b8:	b.ne	3914 <d_parmlist+0x168>  // b.any
    38bc:	ldr	x0, [sp, #32]
    38c0:	ldr	x0, [x0, #8]
    38c4:	ldr	w0, [x0]
    38c8:	cmp	w0, #0x27
    38cc:	b.ne	3914 <d_parmlist+0x168>  // b.any
    38d0:	ldr	x0, [sp, #32]
    38d4:	ldr	x0, [x0, #8]
    38d8:	ldr	x0, [x0, #8]
    38dc:	ldr	w0, [x0, #28]
    38e0:	cmp	w0, #0x9
    38e4:	b.ne	3914 <d_parmlist+0x168>  // b.any
    38e8:	ldr	x0, [sp, #24]
    38ec:	ldr	w1, [x0, #72]
    38f0:	ldr	x0, [sp, #32]
    38f4:	ldr	x0, [x0, #8]
    38f8:	ldr	x0, [x0, #8]
    38fc:	ldr	w0, [x0, #8]
    3900:	sub	w1, w1, w0
    3904:	ldr	x0, [sp, #24]
    3908:	str	w1, [x0, #72]
    390c:	ldr	x0, [sp, #32]
    3910:	str	xzr, [x0, #8]
    3914:	ldr	x0, [sp, #32]
    3918:	ldp	x29, x30, [sp], #64
    391c:	ret

0000000000003920 <d_bare_function_type>:
    3920:	stp	x29, x30, [sp, #-64]!
    3924:	mov	x29, sp
    3928:	str	x0, [sp, #24]
    392c:	str	w1, [sp, #20]
    3930:	ldr	x0, [sp, #24]
    3934:	ldr	x0, [x0, #24]
    3938:	ldrb	w0, [x0]
    393c:	strb	w0, [sp, #55]
    3940:	ldrb	w0, [sp, #55]
    3944:	cmp	w0, #0x4a
    3948:	b.ne	3968 <d_bare_function_type+0x48>  // b.any
    394c:	ldr	x0, [sp, #24]
    3950:	ldr	x0, [x0, #24]
    3954:	add	x1, x0, #0x1
    3958:	ldr	x0, [sp, #24]
    395c:	str	x1, [x0, #24]
    3960:	mov	w0, #0x1                   	// #1
    3964:	str	w0, [sp, #20]
    3968:	ldr	w0, [sp, #20]
    396c:	cmp	w0, #0x0
    3970:	b.eq	3994 <d_bare_function_type+0x74>  // b.none
    3974:	ldr	x0, [sp, #24]
    3978:	bl	26d4 <d_type>
    397c:	str	x0, [sp, #56]
    3980:	ldr	x0, [sp, #56]
    3984:	cmp	x0, #0x0
    3988:	b.ne	3998 <d_bare_function_type+0x78>  // b.any
    398c:	mov	x0, #0x0                   	// #0
    3990:	b	39cc <d_bare_function_type+0xac>
    3994:	str	xzr, [sp, #56]
    3998:	ldr	x0, [sp, #24]
    399c:	bl	37ac <d_parmlist>
    39a0:	str	x0, [sp, #40]
    39a4:	ldr	x0, [sp, #40]
    39a8:	cmp	x0, #0x0
    39ac:	b.ne	39b8 <d_bare_function_type+0x98>  // b.any
    39b0:	mov	x0, #0x0                   	// #0
    39b4:	b	39cc <d_bare_function_type+0xac>
    39b8:	ldr	x3, [sp, #40]
    39bc:	ldr	x2, [sp, #56]
    39c0:	mov	w1, #0x29                  	// #41
    39c4:	ldr	x0, [sp, #24]
    39c8:	bl	2c4 <d_make_comp>
    39cc:	ldp	x29, x30, [sp], #64
    39d0:	ret

00000000000039d4 <d_class_enum_type>:
    39d4:	stp	x29, x30, [sp, #-32]!
    39d8:	mov	x29, sp
    39dc:	str	x0, [sp, #24]
    39e0:	ldr	x0, [sp, #24]
    39e4:	bl	c40 <d_name>
    39e8:	ldp	x29, x30, [sp], #32
    39ec:	ret

00000000000039f0 <d_array_type>:
    39f0:	stp	x29, x30, [sp, #-64]!
    39f4:	mov	x29, sp
    39f8:	str	x0, [sp, #24]
    39fc:	ldr	x0, [sp, #24]
    3a00:	ldr	x0, [x0, #24]
    3a04:	ldrb	w0, [x0]
    3a08:	cmp	w0, #0x41
    3a0c:	b.ne	3a2c <d_array_type+0x3c>  // b.any
    3a10:	ldr	x0, [sp, #24]
    3a14:	ldr	x0, [x0, #24]
    3a18:	add	x1, x0, #0x1
    3a1c:	ldr	x0, [sp, #24]
    3a20:	str	x1, [x0, #24]
    3a24:	mov	w0, #0x0                   	// #0
    3a28:	b	3a30 <d_array_type+0x40>
    3a2c:	mov	w0, #0x1                   	// #1
    3a30:	cmp	w0, #0x0
    3a34:	b.eq	3a40 <d_array_type+0x50>  // b.none
    3a38:	mov	x0, #0x0                   	// #0
    3a3c:	b	3b80 <d_array_type+0x190>
    3a40:	ldr	x0, [sp, #24]
    3a44:	ldr	x0, [x0, #24]
    3a48:	ldrb	w0, [x0]
    3a4c:	strb	w0, [sp, #55]
    3a50:	ldrb	w0, [sp, #55]
    3a54:	cmp	w0, #0x5f
    3a58:	b.ne	3a64 <d_array_type+0x74>  // b.any
    3a5c:	str	xzr, [sp, #56]
    3a60:	b	3b20 <d_array_type+0x130>
    3a64:	ldrb	w0, [sp, #55]
    3a68:	cmp	w0, #0x2f
    3a6c:	b.ls	3afc <d_array_type+0x10c>  // b.plast
    3a70:	ldrb	w0, [sp, #55]
    3a74:	cmp	w0, #0x39
    3a78:	b.hi	3afc <d_array_type+0x10c>  // b.pmore
    3a7c:	ldr	x0, [sp, #24]
    3a80:	ldr	x0, [x0, #24]
    3a84:	str	x0, [sp, #40]
    3a88:	ldr	x0, [sp, #24]
    3a8c:	ldr	x0, [x0, #24]
    3a90:	add	x1, x0, #0x1
    3a94:	ldr	x0, [sp, #24]
    3a98:	str	x1, [x0, #24]
    3a9c:	ldr	x0, [sp, #24]
    3aa0:	ldr	x0, [x0, #24]
    3aa4:	ldrb	w0, [x0]
    3aa8:	strb	w0, [sp, #55]
    3aac:	ldrb	w0, [sp, #55]
    3ab0:	cmp	w0, #0x2f
    3ab4:	b.ls	3ac4 <d_array_type+0xd4>  // b.plast
    3ab8:	ldrb	w0, [sp, #55]
    3abc:	cmp	w0, #0x39
    3ac0:	b.ls	3a88 <d_array_type+0x98>  // b.plast
    3ac4:	ldr	x0, [sp, #24]
    3ac8:	ldr	x1, [x0, #24]
    3acc:	ldr	x0, [sp, #40]
    3ad0:	sub	x0, x1, x0
    3ad4:	mov	w2, w0
    3ad8:	ldr	x1, [sp, #40]
    3adc:	ldr	x0, [sp, #24]
    3ae0:	bl	438 <d_make_name>
    3ae4:	str	x0, [sp, #56]
    3ae8:	ldr	x0, [sp, #56]
    3aec:	cmp	x0, #0x0
    3af0:	b.ne	3b1c <d_array_type+0x12c>  // b.any
    3af4:	mov	x0, #0x0                   	// #0
    3af8:	b	3b80 <d_array_type+0x190>
    3afc:	ldr	x0, [sp, #24]
    3b00:	bl	4b68 <d_expression>
    3b04:	str	x0, [sp, #56]
    3b08:	ldr	x0, [sp, #56]
    3b0c:	cmp	x0, #0x0
    3b10:	b.ne	3b20 <d_array_type+0x130>  // b.any
    3b14:	mov	x0, #0x0                   	// #0
    3b18:	b	3b80 <d_array_type+0x190>
    3b1c:	nop
    3b20:	ldr	x0, [sp, #24]
    3b24:	ldr	x0, [x0, #24]
    3b28:	ldrb	w0, [x0]
    3b2c:	cmp	w0, #0x5f
    3b30:	b.ne	3b50 <d_array_type+0x160>  // b.any
    3b34:	ldr	x0, [sp, #24]
    3b38:	ldr	x0, [x0, #24]
    3b3c:	add	x1, x0, #0x1
    3b40:	ldr	x0, [sp, #24]
    3b44:	str	x1, [x0, #24]
    3b48:	mov	w0, #0x0                   	// #0
    3b4c:	b	3b54 <d_array_type+0x164>
    3b50:	mov	w0, #0x1                   	// #1
    3b54:	cmp	w0, #0x0
    3b58:	b.eq	3b64 <d_array_type+0x174>  // b.none
    3b5c:	mov	x0, #0x0                   	// #0
    3b60:	b	3b80 <d_array_type+0x190>
    3b64:	ldr	x0, [sp, #24]
    3b68:	bl	26d4 <d_type>
    3b6c:	mov	x3, x0
    3b70:	ldr	x2, [sp, #56]
    3b74:	mov	w1, #0x2a                  	// #42
    3b78:	ldr	x0, [sp, #24]
    3b7c:	bl	2c4 <d_make_comp>
    3b80:	ldp	x29, x30, [sp], #64
    3b84:	ret

0000000000003b88 <d_vector_type>:
    3b88:	stp	x29, x30, [sp, #-48]!
    3b8c:	mov	x29, sp
    3b90:	str	x0, [sp, #24]
    3b94:	ldr	x0, [sp, #24]
    3b98:	ldr	x0, [x0, #24]
    3b9c:	ldrb	w0, [x0]
    3ba0:	strb	w0, [sp, #39]
    3ba4:	ldrb	w0, [sp, #39]
    3ba8:	cmp	w0, #0x5f
    3bac:	b.ne	3bd4 <d_vector_type+0x4c>  // b.any
    3bb0:	ldr	x0, [sp, #24]
    3bb4:	ldr	x0, [x0, #24]
    3bb8:	add	x1, x0, #0x1
    3bbc:	ldr	x0, [sp, #24]
    3bc0:	str	x1, [x0, #24]
    3bc4:	ldr	x0, [sp, #24]
    3bc8:	bl	4b68 <d_expression>
    3bcc:	str	x0, [sp, #40]
    3bd0:	b	3be0 <d_vector_type+0x58>
    3bd4:	ldr	x0, [sp, #24]
    3bd8:	bl	1540 <d_number_component>
    3bdc:	str	x0, [sp, #40]
    3be0:	ldr	x0, [sp, #40]
    3be4:	cmp	x0, #0x0
    3be8:	b.ne	3bf4 <d_vector_type+0x6c>  // b.any
    3bec:	mov	x0, #0x0                   	// #0
    3bf0:	b	3c54 <d_vector_type+0xcc>
    3bf4:	ldr	x0, [sp, #24]
    3bf8:	ldr	x0, [x0, #24]
    3bfc:	ldrb	w0, [x0]
    3c00:	cmp	w0, #0x5f
    3c04:	b.ne	3c24 <d_vector_type+0x9c>  // b.any
    3c08:	ldr	x0, [sp, #24]
    3c0c:	ldr	x0, [x0, #24]
    3c10:	add	x1, x0, #0x1
    3c14:	ldr	x0, [sp, #24]
    3c18:	str	x1, [x0, #24]
    3c1c:	mov	w0, #0x0                   	// #0
    3c20:	b	3c28 <d_vector_type+0xa0>
    3c24:	mov	w0, #0x1                   	// #1
    3c28:	cmp	w0, #0x0
    3c2c:	b.eq	3c38 <d_vector_type+0xb0>  // b.none
    3c30:	mov	x0, #0x0                   	// #0
    3c34:	b	3c54 <d_vector_type+0xcc>
    3c38:	ldr	x0, [sp, #24]
    3c3c:	bl	26d4 <d_type>
    3c40:	mov	x3, x0
    3c44:	ldr	x2, [sp, #40]
    3c48:	mov	w1, #0x2d                  	// #45
    3c4c:	ldr	x0, [sp, #24]
    3c50:	bl	2c4 <d_make_comp>
    3c54:	ldp	x29, x30, [sp], #48
    3c58:	ret

0000000000003c5c <d_pointer_to_member_type>:
    3c5c:	stp	x29, x30, [sp, #-48]!
    3c60:	mov	x29, sp
    3c64:	str	x0, [sp, #24]
    3c68:	ldr	x0, [sp, #24]
    3c6c:	ldr	x0, [x0, #24]
    3c70:	ldrb	w0, [x0]
    3c74:	cmp	w0, #0x4d
    3c78:	b.ne	3c98 <d_pointer_to_member_type+0x3c>  // b.any
    3c7c:	ldr	x0, [sp, #24]
    3c80:	ldr	x0, [x0, #24]
    3c84:	add	x1, x0, #0x1
    3c88:	ldr	x0, [sp, #24]
    3c8c:	str	x1, [x0, #24]
    3c90:	mov	w0, #0x0                   	// #0
    3c94:	b	3c9c <d_pointer_to_member_type+0x40>
    3c98:	mov	w0, #0x1                   	// #1
    3c9c:	cmp	w0, #0x0
    3ca0:	b.eq	3cac <d_pointer_to_member_type+0x50>  // b.none
    3ca4:	mov	x0, #0x0                   	// #0
    3ca8:	b	3d00 <d_pointer_to_member_type+0xa4>
    3cac:	ldr	x0, [sp, #24]
    3cb0:	bl	26d4 <d_type>
    3cb4:	str	x0, [sp, #40]
    3cb8:	ldr	x0, [sp, #40]
    3cbc:	cmp	x0, #0x0
    3cc0:	b.ne	3ccc <d_pointer_to_member_type+0x70>  // b.any
    3cc4:	mov	x0, #0x0                   	// #0
    3cc8:	b	3d00 <d_pointer_to_member_type+0xa4>
    3ccc:	ldr	x0, [sp, #24]
    3cd0:	bl	26d4 <d_type>
    3cd4:	str	x0, [sp, #32]
    3cd8:	ldr	x0, [sp, #32]
    3cdc:	cmp	x0, #0x0
    3ce0:	b.ne	3cec <d_pointer_to_member_type+0x90>  // b.any
    3ce4:	mov	x0, #0x0                   	// #0
    3ce8:	b	3d00 <d_pointer_to_member_type+0xa4>
    3cec:	ldr	x3, [sp, #32]
    3cf0:	ldr	x2, [sp, #40]
    3cf4:	mov	w1, #0x2b                  	// #43
    3cf8:	ldr	x0, [sp, #24]
    3cfc:	bl	2c4 <d_make_comp>
    3d00:	ldp	x29, x30, [sp], #48
    3d04:	ret

0000000000003d08 <d_compact_number>:
    3d08:	stp	x29, x30, [sp, #-48]!
    3d0c:	mov	x29, sp
    3d10:	str	x0, [sp, #24]
    3d14:	ldr	x0, [sp, #24]
    3d18:	ldr	x0, [x0, #24]
    3d1c:	ldrb	w0, [x0]
    3d20:	cmp	w0, #0x5f
    3d24:	b.ne	3d30 <d_compact_number+0x28>  // b.any
    3d28:	str	wzr, [sp, #44]
    3d2c:	b	3d5c <d_compact_number+0x54>
    3d30:	ldr	x0, [sp, #24]
    3d34:	ldr	x0, [x0, #24]
    3d38:	ldrb	w0, [x0]
    3d3c:	cmp	w0, #0x6e
    3d40:	b.ne	3d4c <d_compact_number+0x44>  // b.any
    3d44:	mov	w0, #0xffffffff            	// #-1
    3d48:	b	3d9c <d_compact_number+0x94>
    3d4c:	ldr	x0, [sp, #24]
    3d50:	bl	1418 <d_number>
    3d54:	add	w0, w0, #0x1
    3d58:	str	w0, [sp, #44]
    3d5c:	ldr	w0, [sp, #44]
    3d60:	cmp	w0, #0x0
    3d64:	b.lt	3d98 <d_compact_number+0x90>  // b.tstop
    3d68:	ldr	x0, [sp, #24]
    3d6c:	ldr	x0, [x0, #24]
    3d70:	ldrb	w0, [x0]
    3d74:	cmp	w0, #0x5f
    3d78:	b.ne	3d98 <d_compact_number+0x90>  // b.any
    3d7c:	ldr	x0, [sp, #24]
    3d80:	ldr	x0, [x0, #24]
    3d84:	add	x1, x0, #0x1
    3d88:	ldr	x0, [sp, #24]
    3d8c:	str	x1, [x0, #24]
    3d90:	ldr	w0, [sp, #44]
    3d94:	b	3d9c <d_compact_number+0x94>
    3d98:	mov	w0, #0xffffffff            	// #-1
    3d9c:	ldp	x29, x30, [sp], #48
    3da0:	ret

0000000000003da4 <d_template_param>:
    3da4:	stp	x29, x30, [sp, #-48]!
    3da8:	mov	x29, sp
    3dac:	str	x0, [sp, #24]
    3db0:	ldr	x0, [sp, #24]
    3db4:	ldr	x0, [x0, #24]
    3db8:	ldrb	w0, [x0]
    3dbc:	cmp	w0, #0x54
    3dc0:	b.ne	3de0 <d_template_param+0x3c>  // b.any
    3dc4:	ldr	x0, [sp, #24]
    3dc8:	ldr	x0, [x0, #24]
    3dcc:	add	x1, x0, #0x1
    3dd0:	ldr	x0, [sp, #24]
    3dd4:	str	x1, [x0, #24]
    3dd8:	mov	w0, #0x0                   	// #0
    3ddc:	b	3de4 <d_template_param+0x40>
    3de0:	mov	w0, #0x1                   	// #1
    3de4:	cmp	w0, #0x0
    3de8:	b.eq	3df4 <d_template_param+0x50>  // b.none
    3dec:	mov	x0, #0x0                   	// #0
    3df0:	b	3e20 <d_template_param+0x7c>
    3df4:	ldr	x0, [sp, #24]
    3df8:	bl	3d08 <d_compact_number>
    3dfc:	str	w0, [sp, #44]
    3e00:	ldr	w0, [sp, #44]
    3e04:	cmp	w0, #0x0
    3e08:	b.ge	3e14 <d_template_param+0x70>  // b.tcont
    3e0c:	mov	x0, #0x0                   	// #0
    3e10:	b	3e20 <d_template_param+0x7c>
    3e14:	ldr	w1, [sp, #44]
    3e18:	ldr	x0, [sp, #24]
    3e1c:	bl	670 <d_make_template_param>
    3e20:	ldp	x29, x30, [sp], #48
    3e24:	ret

0000000000003e28 <d_template_args>:
    3e28:	stp	x29, x30, [sp, #-32]!
    3e2c:	mov	x29, sp
    3e30:	str	x0, [sp, #24]
    3e34:	ldr	x0, [sp, #24]
    3e38:	ldr	x0, [x0, #24]
    3e3c:	ldrb	w0, [x0]
    3e40:	cmp	w0, #0x49
    3e44:	b.eq	3e64 <d_template_args+0x3c>  // b.none
    3e48:	ldr	x0, [sp, #24]
    3e4c:	ldr	x0, [x0, #24]
    3e50:	ldrb	w0, [x0]
    3e54:	cmp	w0, #0x4a
    3e58:	b.eq	3e64 <d_template_args+0x3c>  // b.none
    3e5c:	mov	x0, #0x0                   	// #0
    3e60:	b	3e80 <d_template_args+0x58>
    3e64:	ldr	x0, [sp, #24]
    3e68:	ldr	x0, [x0, #24]
    3e6c:	add	x1, x0, #0x1
    3e70:	ldr	x0, [sp, #24]
    3e74:	str	x1, [x0, #24]
    3e78:	ldr	x0, [sp, #24]
    3e7c:	bl	3e88 <d_template_args_1>
    3e80:	ldp	x29, x30, [sp], #32
    3e84:	ret

0000000000003e88 <d_template_args_1>:
    3e88:	stp	x29, x30, [sp, #-64]!
    3e8c:	mov	x29, sp
    3e90:	str	x0, [sp, #24]
    3e94:	ldr	x0, [sp, #24]
    3e98:	ldr	x0, [x0, #64]
    3e9c:	str	x0, [sp, #48]
    3ea0:	ldr	x0, [sp, #24]
    3ea4:	ldr	x0, [x0, #24]
    3ea8:	ldrb	w0, [x0]
    3eac:	cmp	w0, #0x45
    3eb0:	b.ne	3ee0 <d_template_args_1+0x58>  // b.any
    3eb4:	ldr	x0, [sp, #24]
    3eb8:	ldr	x0, [x0, #24]
    3ebc:	add	x1, x0, #0x1
    3ec0:	ldr	x0, [sp, #24]
    3ec4:	str	x1, [x0, #24]
    3ec8:	mov	x3, #0x0                   	// #0
    3ecc:	mov	x2, #0x0                   	// #0
    3ed0:	mov	w1, #0x2f                  	// #47
    3ed4:	ldr	x0, [sp, #24]
    3ed8:	bl	2c4 <d_make_comp>
    3edc:	b	3f90 <d_template_args_1+0x108>
    3ee0:	str	xzr, [sp, #32]
    3ee4:	add	x0, sp, #0x20
    3ee8:	str	x0, [sp, #56]
    3eec:	ldr	x0, [sp, #24]
    3ef0:	bl	3f98 <d_template_arg>
    3ef4:	str	x0, [sp, #40]
    3ef8:	ldr	x0, [sp, #40]
    3efc:	cmp	x0, #0x0
    3f00:	b.ne	3f0c <d_template_args_1+0x84>  // b.any
    3f04:	mov	x0, #0x0                   	// #0
    3f08:	b	3f90 <d_template_args_1+0x108>
    3f0c:	mov	x3, #0x0                   	// #0
    3f10:	ldr	x2, [sp, #40]
    3f14:	mov	w1, #0x2f                  	// #47
    3f18:	ldr	x0, [sp, #24]
    3f1c:	bl	2c4 <d_make_comp>
    3f20:	mov	x1, x0
    3f24:	ldr	x0, [sp, #56]
    3f28:	str	x1, [x0]
    3f2c:	ldr	x0, [sp, #56]
    3f30:	ldr	x0, [x0]
    3f34:	cmp	x0, #0x0
    3f38:	b.ne	3f44 <d_template_args_1+0xbc>  // b.any
    3f3c:	mov	x0, #0x0                   	// #0
    3f40:	b	3f90 <d_template_args_1+0x108>
    3f44:	ldr	x0, [sp, #56]
    3f48:	ldr	x0, [x0]
    3f4c:	add	x0, x0, #0x10
    3f50:	str	x0, [sp, #56]
    3f54:	ldr	x0, [sp, #24]
    3f58:	ldr	x0, [x0, #24]
    3f5c:	ldrb	w0, [x0]
    3f60:	cmp	w0, #0x45
    3f64:	b.ne	3eec <d_template_args_1+0x64>  // b.any
    3f68:	ldr	x0, [sp, #24]
    3f6c:	ldr	x0, [x0, #24]
    3f70:	add	x1, x0, #0x1
    3f74:	ldr	x0, [sp, #24]
    3f78:	str	x1, [x0, #24]
    3f7c:	nop
    3f80:	ldr	x0, [sp, #24]
    3f84:	ldr	x1, [sp, #48]
    3f88:	str	x1, [x0, #64]
    3f8c:	ldr	x0, [sp, #32]
    3f90:	ldp	x29, x30, [sp], #64
    3f94:	ret

0000000000003f98 <d_template_arg>:
    3f98:	stp	x29, x30, [sp, #-48]!
    3f9c:	mov	x29, sp
    3fa0:	str	x0, [sp, #24]
    3fa4:	ldr	x0, [sp, #24]
    3fa8:	ldr	x0, [x0, #24]
    3fac:	ldrb	w0, [x0]
    3fb0:	cmp	w0, #0x58
    3fb4:	b.eq	3fe0 <d_template_arg+0x48>  // b.none
    3fb8:	cmp	w0, #0x58
    3fbc:	b.gt	4064 <d_template_arg+0xcc>
    3fc0:	cmp	w0, #0x4a
    3fc4:	b.gt	3fd4 <d_template_arg+0x3c>
    3fc8:	cmp	w0, #0x49
    3fcc:	b.ge	4058 <d_template_arg+0xc0>  // b.tcont
    3fd0:	b	4064 <d_template_arg+0xcc>
    3fd4:	cmp	w0, #0x4c
    3fd8:	b.eq	404c <d_template_arg+0xb4>  // b.none
    3fdc:	b	4064 <d_template_arg+0xcc>
    3fe0:	ldr	x0, [sp, #24]
    3fe4:	ldr	x0, [x0, #24]
    3fe8:	add	x1, x0, #0x1
    3fec:	ldr	x0, [sp, #24]
    3ff0:	str	x1, [x0, #24]
    3ff4:	ldr	x0, [sp, #24]
    3ff8:	bl	4b68 <d_expression>
    3ffc:	str	x0, [sp, #40]
    4000:	ldr	x0, [sp, #24]
    4004:	ldr	x0, [x0, #24]
    4008:	ldrb	w0, [x0]
    400c:	cmp	w0, #0x45
    4010:	b.ne	4030 <d_template_arg+0x98>  // b.any
    4014:	ldr	x0, [sp, #24]
    4018:	ldr	x0, [x0, #24]
    401c:	add	x1, x0, #0x1
    4020:	ldr	x0, [sp, #24]
    4024:	str	x1, [x0, #24]
    4028:	mov	w0, #0x0                   	// #0
    402c:	b	4034 <d_template_arg+0x9c>
    4030:	mov	w0, #0x1                   	// #1
    4034:	cmp	w0, #0x0
    4038:	b.eq	4044 <d_template_arg+0xac>  // b.none
    403c:	mov	x0, #0x0                   	// #0
    4040:	b	406c <d_template_arg+0xd4>
    4044:	ldr	x0, [sp, #40]
    4048:	b	406c <d_template_arg+0xd4>
    404c:	ldr	x0, [sp, #24]
    4050:	bl	4bb0 <d_expr_primary>
    4054:	b	406c <d_template_arg+0xd4>
    4058:	ldr	x0, [sp, #24]
    405c:	bl	3e28 <d_template_args>
    4060:	b	406c <d_template_arg+0xd4>
    4064:	ldr	x0, [sp, #24]
    4068:	bl	26d4 <d_type>
    406c:	ldp	x29, x30, [sp], #48
    4070:	ret

0000000000004074 <d_exprlist>:
    4074:	stp	x29, x30, [sp, #-64]!
    4078:	mov	x29, sp
    407c:	str	x0, [sp, #24]
    4080:	strb	w1, [sp, #23]
    4084:	str	xzr, [sp, #40]
    4088:	add	x0, sp, #0x28
    408c:	str	x0, [sp, #56]
    4090:	ldr	x0, [sp, #24]
    4094:	ldr	x0, [x0, #24]
    4098:	ldrb	w0, [x0]
    409c:	ldrb	w1, [sp, #23]
    40a0:	cmp	w1, w0
    40a4:	b.ne	40d4 <d_exprlist+0x60>  // b.any
    40a8:	ldr	x0, [sp, #24]
    40ac:	ldr	x0, [x0, #24]
    40b0:	add	x1, x0, #0x1
    40b4:	ldr	x0, [sp, #24]
    40b8:	str	x1, [x0, #24]
    40bc:	mov	x3, #0x0                   	// #0
    40c0:	mov	x2, #0x0                   	// #0
    40c4:	mov	w1, #0x2e                  	// #46
    40c8:	ldr	x0, [sp, #24]
    40cc:	bl	2c4 <d_make_comp>
    40d0:	b	4170 <d_exprlist+0xfc>
    40d4:	ldr	x0, [sp, #24]
    40d8:	bl	4b68 <d_expression>
    40dc:	str	x0, [sp, #48]
    40e0:	ldr	x0, [sp, #48]
    40e4:	cmp	x0, #0x0
    40e8:	b.ne	40f4 <d_exprlist+0x80>  // b.any
    40ec:	mov	x0, #0x0                   	// #0
    40f0:	b	4170 <d_exprlist+0xfc>
    40f4:	mov	x3, #0x0                   	// #0
    40f8:	ldr	x2, [sp, #48]
    40fc:	mov	w1, #0x2e                  	// #46
    4100:	ldr	x0, [sp, #24]
    4104:	bl	2c4 <d_make_comp>
    4108:	mov	x1, x0
    410c:	ldr	x0, [sp, #56]
    4110:	str	x1, [x0]
    4114:	ldr	x0, [sp, #56]
    4118:	ldr	x0, [x0]
    411c:	cmp	x0, #0x0
    4120:	b.ne	412c <d_exprlist+0xb8>  // b.any
    4124:	mov	x0, #0x0                   	// #0
    4128:	b	4170 <d_exprlist+0xfc>
    412c:	ldr	x0, [sp, #56]
    4130:	ldr	x0, [x0]
    4134:	add	x0, x0, #0x10
    4138:	str	x0, [sp, #56]
    413c:	ldr	x0, [sp, #24]
    4140:	ldr	x0, [x0, #24]
    4144:	ldrb	w0, [x0]
    4148:	ldrb	w1, [sp, #23]
    414c:	cmp	w1, w0
    4150:	b.ne	40d4 <d_exprlist+0x60>  // b.any
    4154:	ldr	x0, [sp, #24]
    4158:	ldr	x0, [x0, #24]
    415c:	add	x1, x0, #0x1
    4160:	ldr	x0, [sp, #24]
    4164:	str	x1, [x0, #24]
    4168:	nop
    416c:	ldr	x0, [sp, #40]
    4170:	ldp	x29, x30, [sp], #64
    4174:	ret

0000000000004178 <op_is_new_cast>:
    4178:	sub	sp, sp, #0x20
    417c:	str	x0, [sp, #8]
    4180:	ldr	x0, [sp, #8]
    4184:	ldr	x0, [x0, #8]
    4188:	ldr	x0, [x0]
    418c:	str	x0, [sp, #24]
    4190:	ldr	x0, [sp, #24]
    4194:	add	x0, x0, #0x1
    4198:	ldrb	w0, [x0]
    419c:	cmp	w0, #0x63
    41a0:	b.ne	41ec <op_is_new_cast+0x74>  // b.any
    41a4:	ldr	x0, [sp, #24]
    41a8:	ldrb	w0, [x0]
    41ac:	cmp	w0, #0x73
    41b0:	b.eq	41e4 <op_is_new_cast+0x6c>  // b.none
    41b4:	ldr	x0, [sp, #24]
    41b8:	ldrb	w0, [x0]
    41bc:	cmp	w0, #0x64
    41c0:	b.eq	41e4 <op_is_new_cast+0x6c>  // b.none
    41c4:	ldr	x0, [sp, #24]
    41c8:	ldrb	w0, [x0]
    41cc:	cmp	w0, #0x63
    41d0:	b.eq	41e4 <op_is_new_cast+0x6c>  // b.none
    41d4:	ldr	x0, [sp, #24]
    41d8:	ldrb	w0, [x0]
    41dc:	cmp	w0, #0x72
    41e0:	b.ne	41ec <op_is_new_cast+0x74>  // b.any
    41e4:	mov	w0, #0x1                   	// #1
    41e8:	b	41f0 <op_is_new_cast+0x78>
    41ec:	mov	w0, #0x0                   	// #0
    41f0:	add	sp, sp, #0x20
    41f4:	ret

00000000000041f8 <d_expression_1>:
    41f8:	stp	x29, x30, [sp, #-160]!
    41fc:	mov	x29, sp
    4200:	str	x0, [sp, #24]
    4204:	ldr	x0, [sp, #24]
    4208:	ldr	x0, [x0, #24]
    420c:	ldrb	w0, [x0]
    4210:	strb	w0, [sp, #71]
    4214:	ldrb	w0, [sp, #71]
    4218:	cmp	w0, #0x4c
    421c:	b.ne	422c <d_expression_1+0x34>  // b.any
    4220:	ldr	x0, [sp, #24]
    4224:	bl	4bb0 <d_expr_primary>
    4228:	b	4b60 <d_expression_1+0x968>
    422c:	ldrb	w0, [sp, #71]
    4230:	cmp	w0, #0x54
    4234:	b.ne	4244 <d_expression_1+0x4c>  // b.any
    4238:	ldr	x0, [sp, #24]
    423c:	bl	3da4 <d_template_param>
    4240:	b	4b60 <d_expression_1+0x968>
    4244:	ldrb	w0, [sp, #71]
    4248:	cmp	w0, #0x73
    424c:	b.ne	42f4 <d_expression_1+0xfc>  // b.any
    4250:	ldr	x0, [sp, #24]
    4254:	ldr	x0, [x0, #24]
    4258:	add	x0, x0, #0x1
    425c:	ldrb	w0, [x0]
    4260:	cmp	w0, #0x72
    4264:	b.ne	42f4 <d_expression_1+0xfc>  // b.any
    4268:	ldr	x0, [sp, #24]
    426c:	ldr	x0, [x0, #24]
    4270:	add	x1, x0, #0x2
    4274:	ldr	x0, [sp, #24]
    4278:	str	x1, [x0, #24]
    427c:	ldr	x0, [sp, #24]
    4280:	bl	26d4 <d_type>
    4284:	str	x0, [sp, #56]
    4288:	ldr	x0, [sp, #24]
    428c:	bl	1180 <d_unqualified_name>
    4290:	str	x0, [sp, #48]
    4294:	ldr	x0, [sp, #24]
    4298:	ldr	x0, [x0, #24]
    429c:	ldrb	w0, [x0]
    42a0:	cmp	w0, #0x49
    42a4:	b.eq	42c0 <d_expression_1+0xc8>  // b.none
    42a8:	ldr	x3, [sp, #48]
    42ac:	ldr	x2, [sp, #56]
    42b0:	mov	w1, #0x1                   	// #1
    42b4:	ldr	x0, [sp, #24]
    42b8:	bl	2c4 <d_make_comp>
    42bc:	b	4b60 <d_expression_1+0x968>
    42c0:	ldr	x0, [sp, #24]
    42c4:	bl	3e28 <d_template_args>
    42c8:	mov	x3, x0
    42cc:	ldr	x2, [sp, #48]
    42d0:	mov	w1, #0x4                   	// #4
    42d4:	ldr	x0, [sp, #24]
    42d8:	bl	2c4 <d_make_comp>
    42dc:	mov	x3, x0
    42e0:	ldr	x2, [sp, #56]
    42e4:	mov	w1, #0x1                   	// #1
    42e8:	ldr	x0, [sp, #24]
    42ec:	bl	2c4 <d_make_comp>
    42f0:	b	4b60 <d_expression_1+0x968>
    42f4:	ldrb	w0, [sp, #71]
    42f8:	cmp	w0, #0x73
    42fc:	b.ne	434c <d_expression_1+0x154>  // b.any
    4300:	ldr	x0, [sp, #24]
    4304:	ldr	x0, [x0, #24]
    4308:	add	x0, x0, #0x1
    430c:	ldrb	w0, [x0]
    4310:	cmp	w0, #0x70
    4314:	b.ne	434c <d_expression_1+0x154>  // b.any
    4318:	ldr	x0, [sp, #24]
    431c:	ldr	x0, [x0, #24]
    4320:	add	x1, x0, #0x2
    4324:	ldr	x0, [sp, #24]
    4328:	str	x1, [x0, #24]
    432c:	ldr	x0, [sp, #24]
    4330:	bl	41f8 <d_expression_1>
    4334:	mov	x3, #0x0                   	// #0
    4338:	mov	x2, x0
    433c:	mov	w1, #0x4b                  	// #75
    4340:	ldr	x0, [sp, #24]
    4344:	bl	2c4 <d_make_comp>
    4348:	b	4b60 <d_expression_1+0x968>
    434c:	ldrb	w0, [sp, #71]
    4350:	cmp	w0, #0x66
    4354:	b.ne	4400 <d_expression_1+0x208>  // b.any
    4358:	ldr	x0, [sp, #24]
    435c:	ldr	x0, [x0, #24]
    4360:	add	x0, x0, #0x1
    4364:	ldrb	w0, [x0]
    4368:	cmp	w0, #0x70
    436c:	b.ne	4400 <d_expression_1+0x208>  // b.any
    4370:	ldr	x0, [sp, #24]
    4374:	ldr	x0, [x0, #24]
    4378:	add	x1, x0, #0x2
    437c:	ldr	x0, [sp, #24]
    4380:	str	x1, [x0, #24]
    4384:	ldr	x0, [sp, #24]
    4388:	ldr	x0, [x0, #24]
    438c:	ldrb	w0, [x0]
    4390:	cmp	w0, #0x54
    4394:	b.ne	43b4 <d_expression_1+0x1bc>  // b.any
    4398:	ldr	x0, [sp, #24]
    439c:	ldr	x0, [x0, #24]
    43a0:	add	x1, x0, #0x1
    43a4:	ldr	x0, [sp, #24]
    43a8:	str	x1, [x0, #24]
    43ac:	str	wzr, [sp, #156]
    43b0:	b	43f0 <d_expression_1+0x1f8>
    43b4:	ldr	x0, [sp, #24]
    43b8:	bl	3d08 <d_compact_number>
    43bc:	str	w0, [sp, #156]
    43c0:	ldr	w1, [sp, #156]
    43c4:	mov	w0, #0x7fffffff            	// #2147483647
    43c8:	cmp	w1, w0
    43cc:	b.eq	43dc <d_expression_1+0x1e4>  // b.none
    43d0:	ldr	w0, [sp, #156]
    43d4:	cmn	w0, #0x1
    43d8:	b.ne	43e4 <d_expression_1+0x1ec>  // b.any
    43dc:	mov	x0, #0x0                   	// #0
    43e0:	b	4b60 <d_expression_1+0x968>
    43e4:	ldr	w0, [sp, #156]
    43e8:	add	w0, w0, #0x1
    43ec:	str	w0, [sp, #156]
    43f0:	ldr	w1, [sp, #156]
    43f4:	ldr	x0, [sp, #24]
    43f8:	bl	6bc <d_make_function_param>
    43fc:	b	4b60 <d_expression_1+0x968>
    4400:	ldrb	w0, [sp, #71]
    4404:	cmp	w0, #0x2f
    4408:	b.ls	4418 <d_expression_1+0x220>  // b.plast
    440c:	ldrb	w0, [sp, #71]
    4410:	cmp	w0, #0x39
    4414:	b.ls	443c <d_expression_1+0x244>  // b.plast
    4418:	ldrb	w0, [sp, #71]
    441c:	cmp	w0, #0x6f
    4420:	b.ne	44b8 <d_expression_1+0x2c0>  // b.any
    4424:	ldr	x0, [sp, #24]
    4428:	ldr	x0, [x0, #24]
    442c:	add	x0, x0, #0x1
    4430:	ldrb	w0, [x0]
    4434:	cmp	w0, #0x6e
    4438:	b.ne	44b8 <d_expression_1+0x2c0>  // b.any
    443c:	ldrb	w0, [sp, #71]
    4440:	cmp	w0, #0x6f
    4444:	b.ne	445c <d_expression_1+0x264>  // b.any
    4448:	ldr	x0, [sp, #24]
    444c:	ldr	x0, [x0, #24]
    4450:	add	x1, x0, #0x2
    4454:	ldr	x0, [sp, #24]
    4458:	str	x1, [x0, #24]
    445c:	ldr	x0, [sp, #24]
    4460:	bl	1180 <d_unqualified_name>
    4464:	str	x0, [sp, #32]
    4468:	ldr	x0, [sp, #32]
    446c:	cmp	x0, #0x0
    4470:	b.ne	447c <d_expression_1+0x284>  // b.any
    4474:	mov	x0, #0x0                   	// #0
    4478:	b	4b60 <d_expression_1+0x968>
    447c:	ldr	x0, [sp, #24]
    4480:	ldr	x0, [x0, #24]
    4484:	ldrb	w0, [x0]
    4488:	cmp	w0, #0x49
    448c:	b.ne	44b0 <d_expression_1+0x2b8>  // b.any
    4490:	ldr	x0, [sp, #24]
    4494:	bl	3e28 <d_template_args>
    4498:	mov	x3, x0
    449c:	ldr	x2, [sp, #32]
    44a0:	mov	w1, #0x4                   	// #4
    44a4:	ldr	x0, [sp, #24]
    44a8:	bl	2c4 <d_make_comp>
    44ac:	b	4b60 <d_expression_1+0x968>
    44b0:	ldr	x0, [sp, #32]
    44b4:	b	4b60 <d_expression_1+0x968>
    44b8:	ldrb	w0, [sp, #71]
    44bc:	cmp	w0, #0x69
    44c0:	b.eq	44d0 <d_expression_1+0x2d8>  // b.none
    44c4:	ldrb	w0, [sp, #71]
    44c8:	cmp	w0, #0x74
    44cc:	b.ne	455c <d_expression_1+0x364>  // b.any
    44d0:	ldr	x0, [sp, #24]
    44d4:	ldr	x0, [x0, #24]
    44d8:	add	x0, x0, #0x1
    44dc:	ldrb	w0, [x0]
    44e0:	cmp	w0, #0x6c
    44e4:	b.ne	455c <d_expression_1+0x364>  // b.any
    44e8:	str	xzr, [sp, #144]
    44ec:	ldr	x0, [sp, #24]
    44f0:	ldr	x0, [x0, #24]
    44f4:	add	x1, x0, #0x2
    44f8:	ldr	x0, [sp, #24]
    44fc:	str	x1, [x0, #24]
    4500:	ldrb	w0, [sp, #71]
    4504:	cmp	w0, #0x74
    4508:	b.ne	4518 <d_expression_1+0x320>  // b.any
    450c:	ldr	x0, [sp, #24]
    4510:	bl	26d4 <d_type>
    4514:	str	x0, [sp, #144]
    4518:	ldr	x0, [sp, #24]
    451c:	ldr	x0, [x0, #24]
    4520:	add	x0, x0, #0x1
    4524:	ldrb	w0, [x0]
    4528:	cmp	w0, #0x0
    452c:	b.ne	4538 <d_expression_1+0x340>  // b.any
    4530:	mov	x0, #0x0                   	// #0
    4534:	b	4b60 <d_expression_1+0x968>
    4538:	mov	w1, #0x45                  	// #69
    453c:	ldr	x0, [sp, #24]
    4540:	bl	4074 <d_exprlist>
    4544:	mov	x3, x0
    4548:	ldr	x2, [sp, #144]
    454c:	mov	w1, #0x31                  	// #49
    4550:	ldr	x0, [sp, #24]
    4554:	bl	2c4 <d_make_comp>
    4558:	b	4b60 <d_expression_1+0x968>
    455c:	str	xzr, [sp, #136]
    4560:	ldr	x0, [sp, #24]
    4564:	bl	16f0 <d_operator_name>
    4568:	str	x0, [sp, #40]
    456c:	ldr	x0, [sp, #40]
    4570:	cmp	x0, #0x0
    4574:	b.ne	4580 <d_expression_1+0x388>  // b.any
    4578:	mov	x0, #0x0                   	// #0
    457c:	b	4b60 <d_expression_1+0x968>
    4580:	ldr	x0, [sp, #40]
    4584:	ldr	w0, [x0]
    4588:	cmp	w0, #0x32
    458c:	b.ne	45fc <d_expression_1+0x404>  // b.any
    4590:	ldr	x0, [sp, #40]
    4594:	ldr	x0, [x0, #8]
    4598:	ldr	x0, [x0]
    459c:	str	x0, [sp, #136]
    45a0:	ldr	x0, [sp, #24]
    45a4:	ldr	w1, [x0, #72]
    45a8:	ldr	x0, [sp, #40]
    45ac:	ldr	x0, [x0, #8]
    45b0:	ldr	w0, [x0, #16]
    45b4:	sub	w0, w0, #0x2
    45b8:	add	w1, w1, w0
    45bc:	ldr	x0, [sp, #24]
    45c0:	str	w1, [x0, #72]
    45c4:	adrp	x0, 0 <is_fnqual_component_type>
    45c8:	add	x1, x0, #0x0
    45cc:	ldr	x0, [sp, #136]
    45d0:	bl	0 <strcmp>
    45d4:	cmp	w0, #0x0
    45d8:	b.ne	45fc <d_expression_1+0x404>  // b.any
    45dc:	ldr	x0, [sp, #24]
    45e0:	bl	26d4 <d_type>
    45e4:	mov	x3, x0
    45e8:	ldr	x2, [sp, #40]
    45ec:	mov	w1, #0x37                  	// #55
    45f0:	ldr	x0, [sp, #24]
    45f4:	bl	2c4 <d_make_comp>
    45f8:	b	4b60 <d_expression_1+0x968>
    45fc:	ldr	x0, [sp, #40]
    4600:	ldr	w0, [x0]
    4604:	cmp	w0, #0x34
    4608:	b.eq	4650 <d_expression_1+0x458>  // b.none
    460c:	cmp	w0, #0x34
    4610:	b.hi	4624 <d_expression_1+0x42c>  // b.pmore
    4614:	cmp	w0, #0x32
    4618:	b.eq	462c <d_expression_1+0x434>  // b.none
    461c:	cmp	w0, #0x33
    4620:	b.eq	4640 <d_expression_1+0x448>  // b.none
    4624:	mov	x0, #0x0                   	// #0
    4628:	b	4b60 <d_expression_1+0x968>
    462c:	ldr	x0, [sp, #40]
    4630:	ldr	x0, [x0, #8]
    4634:	ldr	w0, [x0, #20]
    4638:	str	w0, [sp, #132]
    463c:	b	465c <d_expression_1+0x464>
    4640:	ldr	x0, [sp, #40]
    4644:	ldr	w0, [x0, #8]
    4648:	str	w0, [sp, #132]
    464c:	b	465c <d_expression_1+0x464>
    4650:	mov	w0, #0x1                   	// #1
    4654:	str	w0, [sp, #132]
    4658:	nop
    465c:	ldr	w0, [sp, #132]
    4660:	cmp	w0, #0x3
    4664:	b.eq	4944 <d_expression_1+0x74c>  // b.none
    4668:	ldr	w0, [sp, #132]
    466c:	cmp	w0, #0x3
    4670:	b.gt	4b5c <d_expression_1+0x964>
    4674:	ldr	w0, [sp, #132]
    4678:	cmp	w0, #0x2
    467c:	b.eq	480c <d_expression_1+0x614>  // b.none
    4680:	ldr	w0, [sp, #132]
    4684:	cmp	w0, #0x2
    4688:	b.gt	4b5c <d_expression_1+0x964>
    468c:	ldr	w0, [sp, #132]
    4690:	cmp	w0, #0x0
    4694:	b.eq	46a8 <d_expression_1+0x4b0>  // b.none
    4698:	ldr	w0, [sp, #132]
    469c:	cmp	w0, #0x1
    46a0:	b.eq	46c0 <d_expression_1+0x4c8>  // b.none
    46a4:	b	4b5c <d_expression_1+0x964>
    46a8:	mov	x3, #0x0                   	// #0
    46ac:	ldr	x2, [sp, #40]
    46b0:	mov	w1, #0x36                  	// #54
    46b4:	ldr	x0, [sp, #24]
    46b8:	bl	2c4 <d_make_comp>
    46bc:	b	4b60 <d_expression_1+0x968>
    46c0:	str	wzr, [sp, #116]
    46c4:	ldr	x0, [sp, #136]
    46c8:	cmp	x0, #0x0
    46cc:	b.eq	4744 <d_expression_1+0x54c>  // b.none
    46d0:	ldr	x0, [sp, #136]
    46d4:	ldrb	w0, [x0]
    46d8:	cmp	w0, #0x70
    46dc:	b.eq	46f0 <d_expression_1+0x4f8>  // b.none
    46e0:	ldr	x0, [sp, #136]
    46e4:	ldrb	w0, [x0]
    46e8:	cmp	w0, #0x6d
    46ec:	b.ne	4744 <d_expression_1+0x54c>  // b.any
    46f0:	ldr	x0, [sp, #136]
    46f4:	add	x0, x0, #0x1
    46f8:	ldrb	w1, [x0]
    46fc:	ldr	x0, [sp, #136]
    4700:	ldrb	w0, [x0]
    4704:	cmp	w1, w0
    4708:	b.ne	4744 <d_expression_1+0x54c>  // b.any
    470c:	ldr	x0, [sp, #24]
    4710:	ldr	x0, [x0, #24]
    4714:	ldrb	w0, [x0]
    4718:	cmp	w0, #0x5f
    471c:	b.ne	473c <d_expression_1+0x544>  // b.any
    4720:	ldr	x0, [sp, #24]
    4724:	ldr	x0, [x0, #24]
    4728:	add	x1, x0, #0x1
    472c:	ldr	x0, [sp, #24]
    4730:	str	x1, [x0, #24]
    4734:	mov	w0, #0x0                   	// #0
    4738:	b	4740 <d_expression_1+0x548>
    473c:	mov	w0, #0x1                   	// #1
    4740:	str	w0, [sp, #116]
    4744:	ldr	x0, [sp, #40]
    4748:	ldr	w0, [x0]
    474c:	cmp	w0, #0x34
    4750:	b.ne	4790 <d_expression_1+0x598>  // b.any
    4754:	ldr	x0, [sp, #24]
    4758:	ldr	x0, [x0, #24]
    475c:	ldrb	w0, [x0]
    4760:	cmp	w0, #0x5f
    4764:	b.ne	4790 <d_expression_1+0x598>  // b.any
    4768:	ldr	x0, [sp, #24]
    476c:	ldr	x0, [x0, #24]
    4770:	add	x1, x0, #0x1
    4774:	ldr	x0, [sp, #24]
    4778:	str	x1, [x0, #24]
    477c:	mov	w1, #0x45                  	// #69
    4780:	ldr	x0, [sp, #24]
    4784:	bl	4074 <d_exprlist>
    4788:	str	x0, [sp, #120]
    478c:	b	47d0 <d_expression_1+0x5d8>
    4790:	ldr	x0, [sp, #136]
    4794:	cmp	x0, #0x0
    4798:	b.eq	47c4 <d_expression_1+0x5cc>  // b.none
    479c:	adrp	x0, 0 <is_fnqual_component_type>
    47a0:	add	x1, x0, #0x0
    47a4:	ldr	x0, [sp, #136]
    47a8:	bl	0 <strcmp>
    47ac:	cmp	w0, #0x0
    47b0:	b.ne	47c4 <d_expression_1+0x5cc>  // b.any
    47b4:	ldr	x0, [sp, #24]
    47b8:	bl	3e88 <d_template_args_1>
    47bc:	str	x0, [sp, #120]
    47c0:	b	47d0 <d_expression_1+0x5d8>
    47c4:	ldr	x0, [sp, #24]
    47c8:	bl	41f8 <d_expression_1>
    47cc:	str	x0, [sp, #120]
    47d0:	ldr	w0, [sp, #116]
    47d4:	cmp	w0, #0x0
    47d8:	b.eq	47f4 <d_expression_1+0x5fc>  // b.none
    47dc:	ldr	x3, [sp, #120]
    47e0:	ldr	x2, [sp, #120]
    47e4:	mov	w1, #0x39                  	// #57
    47e8:	ldr	x0, [sp, #24]
    47ec:	bl	2c4 <d_make_comp>
    47f0:	str	x0, [sp, #120]
    47f4:	ldr	x3, [sp, #120]
    47f8:	ldr	x2, [sp, #40]
    47fc:	mov	w1, #0x37                  	// #55
    4800:	ldr	x0, [sp, #24]
    4804:	bl	2c4 <d_make_comp>
    4808:	b	4b60 <d_expression_1+0x968>
    480c:	ldr	x0, [sp, #136]
    4810:	cmp	x0, #0x0
    4814:	b.ne	4820 <d_expression_1+0x628>  // b.any
    4818:	mov	x0, #0x0                   	// #0
    481c:	b	4b60 <d_expression_1+0x968>
    4820:	ldr	x0, [sp, #40]
    4824:	bl	4178 <op_is_new_cast>
    4828:	cmp	w0, #0x0
    482c:	b.eq	4840 <d_expression_1+0x648>  // b.none
    4830:	ldr	x0, [sp, #24]
    4834:	bl	26d4 <d_type>
    4838:	str	x0, [sp, #104]
    483c:	b	486c <d_expression_1+0x674>
    4840:	ldr	x0, [sp, #136]
    4844:	ldrb	w0, [x0]
    4848:	cmp	w0, #0x66
    484c:	b.ne	4860 <d_expression_1+0x668>  // b.any
    4850:	ldr	x0, [sp, #24]
    4854:	bl	16f0 <d_operator_name>
    4858:	str	x0, [sp, #104]
    485c:	b	486c <d_expression_1+0x674>
    4860:	ldr	x0, [sp, #24]
    4864:	bl	41f8 <d_expression_1>
    4868:	str	x0, [sp, #104]
    486c:	adrp	x0, 0 <is_fnqual_component_type>
    4870:	add	x1, x0, #0x0
    4874:	ldr	x0, [sp, #136]
    4878:	bl	0 <strcmp>
    487c:	cmp	w0, #0x0
    4880:	b.ne	4898 <d_expression_1+0x6a0>  // b.any
    4884:	mov	w1, #0x45                  	// #69
    4888:	ldr	x0, [sp, #24]
    488c:	bl	4074 <d_exprlist>
    4890:	str	x0, [sp, #96]
    4894:	b	4918 <d_expression_1+0x720>
    4898:	adrp	x0, 0 <is_fnqual_component_type>
    489c:	add	x1, x0, #0x0
    48a0:	ldr	x0, [sp, #136]
    48a4:	bl	0 <strcmp>
    48a8:	cmp	w0, #0x0
    48ac:	b.eq	48c8 <d_expression_1+0x6d0>  // b.none
    48b0:	adrp	x0, 0 <is_fnqual_component_type>
    48b4:	add	x1, x0, #0x0
    48b8:	ldr	x0, [sp, #136]
    48bc:	bl	0 <strcmp>
    48c0:	cmp	w0, #0x0
    48c4:	b.ne	490c <d_expression_1+0x714>  // b.any
    48c8:	ldr	x0, [sp, #24]
    48cc:	bl	1180 <d_unqualified_name>
    48d0:	str	x0, [sp, #96]
    48d4:	ldr	x0, [sp, #24]
    48d8:	ldr	x0, [x0, #24]
    48dc:	ldrb	w0, [x0]
    48e0:	cmp	w0, #0x49
    48e4:	b.ne	4918 <d_expression_1+0x720>  // b.any
    48e8:	ldr	x0, [sp, #24]
    48ec:	bl	3e28 <d_template_args>
    48f0:	mov	x3, x0
    48f4:	ldr	x2, [sp, #96]
    48f8:	mov	w1, #0x4                   	// #4
    48fc:	ldr	x0, [sp, #24]
    4900:	bl	2c4 <d_make_comp>
    4904:	str	x0, [sp, #96]
    4908:	b	4918 <d_expression_1+0x720>
    490c:	ldr	x0, [sp, #24]
    4910:	bl	41f8 <d_expression_1>
    4914:	str	x0, [sp, #96]
    4918:	ldr	x3, [sp, #96]
    491c:	ldr	x2, [sp, #104]
    4920:	mov	w1, #0x39                  	// #57
    4924:	ldr	x0, [sp, #24]
    4928:	bl	2c4 <d_make_comp>
    492c:	mov	x3, x0
    4930:	ldr	x2, [sp, #40]
    4934:	mov	w1, #0x38                  	// #56
    4938:	ldr	x0, [sp, #24]
    493c:	bl	2c4 <d_make_comp>
    4940:	b	4b60 <d_expression_1+0x968>
    4944:	ldr	x0, [sp, #136]
    4948:	cmp	x0, #0x0
    494c:	b.ne	4958 <d_expression_1+0x760>  // b.any
    4950:	mov	x0, #0x0                   	// #0
    4954:	b	4b60 <d_expression_1+0x968>
    4958:	adrp	x0, 0 <is_fnqual_component_type>
    495c:	add	x1, x0, #0x0
    4960:	ldr	x0, [sp, #136]
    4964:	bl	0 <strcmp>
    4968:	cmp	w0, #0x0
    496c:	b.ne	49a8 <d_expression_1+0x7b0>  // b.any
    4970:	ldr	x0, [sp, #24]
    4974:	bl	41f8 <d_expression_1>
    4978:	str	x0, [sp, #88]
    497c:	ldr	x0, [sp, #24]
    4980:	bl	41f8 <d_expression_1>
    4984:	str	x0, [sp, #80]
    4988:	ldr	x0, [sp, #24]
    498c:	bl	41f8 <d_expression_1>
    4990:	str	x0, [sp, #72]
    4994:	ldr	x0, [sp, #72]
    4998:	cmp	x0, #0x0
    499c:	b.ne	4b1c <d_expression_1+0x924>  // b.any
    49a0:	mov	x0, #0x0                   	// #0
    49a4:	b	4b60 <d_expression_1+0x968>
    49a8:	ldr	x0, [sp, #136]
    49ac:	ldrb	w0, [x0]
    49b0:	cmp	w0, #0x66
    49b4:	b.ne	49f0 <d_expression_1+0x7f8>  // b.any
    49b8:	ldr	x0, [sp, #24]
    49bc:	bl	16f0 <d_operator_name>
    49c0:	str	x0, [sp, #88]
    49c4:	ldr	x0, [sp, #24]
    49c8:	bl	41f8 <d_expression_1>
    49cc:	str	x0, [sp, #80]
    49d0:	ldr	x0, [sp, #24]
    49d4:	bl	41f8 <d_expression_1>
    49d8:	str	x0, [sp, #72]
    49dc:	ldr	x0, [sp, #72]
    49e0:	cmp	x0, #0x0
    49e4:	b.ne	4b1c <d_expression_1+0x924>  // b.any
    49e8:	mov	x0, #0x0                   	// #0
    49ec:	b	4b60 <d_expression_1+0x968>
    49f0:	ldr	x0, [sp, #136]
    49f4:	ldrb	w0, [x0]
    49f8:	cmp	w0, #0x6e
    49fc:	b.ne	4b14 <d_expression_1+0x91c>  // b.any
    4a00:	ldr	x0, [sp, #136]
    4a04:	add	x0, x0, #0x1
    4a08:	ldrb	w0, [x0]
    4a0c:	cmp	w0, #0x77
    4a10:	b.eq	4a30 <d_expression_1+0x838>  // b.none
    4a14:	ldr	x0, [sp, #136]
    4a18:	add	x0, x0, #0x1
    4a1c:	ldrb	w0, [x0]
    4a20:	cmp	w0, #0x61
    4a24:	b.eq	4a30 <d_expression_1+0x838>  // b.none
    4a28:	mov	x0, #0x0                   	// #0
    4a2c:	b	4b60 <d_expression_1+0x968>
    4a30:	mov	w1, #0x5f                  	// #95
    4a34:	ldr	x0, [sp, #24]
    4a38:	bl	4074 <d_exprlist>
    4a3c:	str	x0, [sp, #88]
    4a40:	ldr	x0, [sp, #24]
    4a44:	bl	26d4 <d_type>
    4a48:	str	x0, [sp, #80]
    4a4c:	ldr	x0, [sp, #24]
    4a50:	ldr	x0, [x0, #24]
    4a54:	ldrb	w0, [x0]
    4a58:	cmp	w0, #0x45
    4a5c:	b.ne	4a7c <d_expression_1+0x884>  // b.any
    4a60:	ldr	x0, [sp, #24]
    4a64:	ldr	x0, [x0, #24]
    4a68:	add	x1, x0, #0x1
    4a6c:	ldr	x0, [sp, #24]
    4a70:	str	x1, [x0, #24]
    4a74:	str	xzr, [sp, #72]
    4a78:	b	4b1c <d_expression_1+0x924>
    4a7c:	ldr	x0, [sp, #24]
    4a80:	ldr	x0, [x0, #24]
    4a84:	ldrb	w0, [x0]
    4a88:	cmp	w0, #0x70
    4a8c:	b.ne	4ad0 <d_expression_1+0x8d8>  // b.any
    4a90:	ldr	x0, [sp, #24]
    4a94:	ldr	x0, [x0, #24]
    4a98:	add	x0, x0, #0x1
    4a9c:	ldrb	w0, [x0]
    4aa0:	cmp	w0, #0x69
    4aa4:	b.ne	4ad0 <d_expression_1+0x8d8>  // b.any
    4aa8:	ldr	x0, [sp, #24]
    4aac:	ldr	x0, [x0, #24]
    4ab0:	add	x1, x0, #0x2
    4ab4:	ldr	x0, [sp, #24]
    4ab8:	str	x1, [x0, #24]
    4abc:	mov	w1, #0x45                  	// #69
    4ac0:	ldr	x0, [sp, #24]
    4ac4:	bl	4074 <d_exprlist>
    4ac8:	str	x0, [sp, #72]
    4acc:	b	4b1c <d_expression_1+0x924>
    4ad0:	ldr	x0, [sp, #24]
    4ad4:	ldr	x0, [x0, #24]
    4ad8:	ldrb	w0, [x0]
    4adc:	cmp	w0, #0x69
    4ae0:	b.ne	4b0c <d_expression_1+0x914>  // b.any
    4ae4:	ldr	x0, [sp, #24]
    4ae8:	ldr	x0, [x0, #24]
    4aec:	add	x0, x0, #0x1
    4af0:	ldrb	w0, [x0]
    4af4:	cmp	w0, #0x6c
    4af8:	b.ne	4b0c <d_expression_1+0x914>  // b.any
    4afc:	ldr	x0, [sp, #24]
    4b00:	bl	41f8 <d_expression_1>
    4b04:	str	x0, [sp, #72]
    4b08:	b	4b1c <d_expression_1+0x924>
    4b0c:	mov	x0, #0x0                   	// #0
    4b10:	b	4b60 <d_expression_1+0x968>
    4b14:	mov	x0, #0x0                   	// #0
    4b18:	b	4b60 <d_expression_1+0x968>
    4b1c:	ldr	x3, [sp, #72]
    4b20:	ldr	x2, [sp, #80]
    4b24:	mov	w1, #0x3c                  	// #60
    4b28:	ldr	x0, [sp, #24]
    4b2c:	bl	2c4 <d_make_comp>
    4b30:	mov	x3, x0
    4b34:	ldr	x2, [sp, #88]
    4b38:	mov	w1, #0x3b                  	// #59
    4b3c:	ldr	x0, [sp, #24]
    4b40:	bl	2c4 <d_make_comp>
    4b44:	mov	x3, x0
    4b48:	ldr	x2, [sp, #40]
    4b4c:	mov	w1, #0x3a                  	// #58
    4b50:	ldr	x0, [sp, #24]
    4b54:	bl	2c4 <d_make_comp>
    4b58:	b	4b60 <d_expression_1+0x968>
    4b5c:	mov	x0, #0x0                   	// #0
    4b60:	ldp	x29, x30, [sp], #160
    4b64:	ret

0000000000004b68 <d_expression>:
    4b68:	stp	x29, x30, [sp, #-48]!
    4b6c:	mov	x29, sp
    4b70:	str	x0, [sp, #24]
    4b74:	ldr	x0, [sp, #24]
    4b78:	ldr	w0, [x0, #76]
    4b7c:	str	w0, [sp, #44]
    4b80:	ldr	x0, [sp, #24]
    4b84:	mov	w1, #0x1                   	// #1
    4b88:	str	w1, [x0, #76]
    4b8c:	ldr	x0, [sp, #24]
    4b90:	bl	41f8 <d_expression_1>
    4b94:	str	x0, [sp, #32]
    4b98:	ldr	x0, [sp, #24]
    4b9c:	ldr	w1, [sp, #44]
    4ba0:	str	w1, [x0, #76]
    4ba4:	ldr	x0, [sp, #32]
    4ba8:	ldp	x29, x30, [sp], #48
    4bac:	ret

0000000000004bb0 <d_expr_primary>:
    4bb0:	stp	x29, x30, [sp, #-64]!
    4bb4:	mov	x29, sp
    4bb8:	str	x0, [sp, #24]
    4bbc:	ldr	x0, [sp, #24]
    4bc0:	ldr	x0, [x0, #24]
    4bc4:	ldrb	w0, [x0]
    4bc8:	cmp	w0, #0x4c
    4bcc:	b.ne	4bec <d_expr_primary+0x3c>  // b.any
    4bd0:	ldr	x0, [sp, #24]
    4bd4:	ldr	x0, [x0, #24]
    4bd8:	add	x1, x0, #0x1
    4bdc:	ldr	x0, [sp, #24]
    4be0:	str	x1, [x0, #24]
    4be4:	mov	w0, #0x0                   	// #0
    4be8:	b	4bf0 <d_expr_primary+0x40>
    4bec:	mov	w0, #0x1                   	// #1
    4bf0:	cmp	w0, #0x0
    4bf4:	b.eq	4c00 <d_expr_primary+0x50>  // b.none
    4bf8:	mov	x0, #0x0                   	// #0
    4bfc:	b	4dac <d_expr_primary+0x1fc>
    4c00:	ldr	x0, [sp, #24]
    4c04:	ldr	x0, [x0, #24]
    4c08:	ldrb	w0, [x0]
    4c0c:	cmp	w0, #0x5f
    4c10:	b.eq	4c28 <d_expr_primary+0x78>  // b.none
    4c14:	ldr	x0, [sp, #24]
    4c18:	ldr	x0, [x0, #24]
    4c1c:	ldrb	w0, [x0]
    4c20:	cmp	w0, #0x5a
    4c24:	b.ne	4c3c <d_expr_primary+0x8c>  // b.any
    4c28:	mov	w1, #0x0                   	// #0
    4c2c:	ldr	x0, [sp, #24]
    4c30:	bl	764 <d_mangled_name>
    4c34:	str	x0, [sp, #56]
    4c38:	b	4d64 <d_expr_primary+0x1b4>
    4c3c:	ldr	x0, [sp, #24]
    4c40:	bl	26d4 <d_type>
    4c44:	str	x0, [sp, #40]
    4c48:	ldr	x0, [sp, #40]
    4c4c:	cmp	x0, #0x0
    4c50:	b.ne	4c5c <d_expr_primary+0xac>  // b.any
    4c54:	mov	x0, #0x0                   	// #0
    4c58:	b	4dac <d_expr_primary+0x1fc>
    4c5c:	ldr	x0, [sp, #40]
    4c60:	ldr	w0, [x0]
    4c64:	cmp	w0, #0x27
    4c68:	b.ne	4ca0 <d_expr_primary+0xf0>  // b.any
    4c6c:	ldr	x0, [sp, #40]
    4c70:	ldr	x0, [x0, #8]
    4c74:	ldr	w0, [x0, #28]
    4c78:	cmp	w0, #0x0
    4c7c:	b.eq	4ca0 <d_expr_primary+0xf0>  // b.none
    4c80:	ldr	x0, [sp, #24]
    4c84:	ldr	w1, [x0, #72]
    4c88:	ldr	x0, [sp, #40]
    4c8c:	ldr	x0, [x0, #8]
    4c90:	ldr	w0, [x0, #8]
    4c94:	sub	w1, w1, w0
    4c98:	ldr	x0, [sp, #24]
    4c9c:	str	w1, [x0, #72]
    4ca0:	mov	w0, #0x3d                  	// #61
    4ca4:	str	w0, [sp, #52]
    4ca8:	ldr	x0, [sp, #24]
    4cac:	ldr	x0, [x0, #24]
    4cb0:	ldrb	w0, [x0]
    4cb4:	cmp	w0, #0x6e
    4cb8:	b.ne	4cd8 <d_expr_primary+0x128>  // b.any
    4cbc:	mov	w0, #0x3e                  	// #62
    4cc0:	str	w0, [sp, #52]
    4cc4:	ldr	x0, [sp, #24]
    4cc8:	ldr	x0, [x0, #24]
    4ccc:	add	x1, x0, #0x1
    4cd0:	ldr	x0, [sp, #24]
    4cd4:	str	x1, [x0, #24]
    4cd8:	ldr	x0, [sp, #24]
    4cdc:	ldr	x0, [x0, #24]
    4ce0:	str	x0, [sp, #32]
    4ce4:	b	4d18 <d_expr_primary+0x168>
    4ce8:	ldr	x0, [sp, #24]
    4cec:	ldr	x0, [x0, #24]
    4cf0:	ldrb	w0, [x0]
    4cf4:	cmp	w0, #0x0
    4cf8:	b.ne	4d04 <d_expr_primary+0x154>  // b.any
    4cfc:	mov	x0, #0x0                   	// #0
    4d00:	b	4dac <d_expr_primary+0x1fc>
    4d04:	ldr	x0, [sp, #24]
    4d08:	ldr	x0, [x0, #24]
    4d0c:	add	x1, x0, #0x1
    4d10:	ldr	x0, [sp, #24]
    4d14:	str	x1, [x0, #24]
    4d18:	ldr	x0, [sp, #24]
    4d1c:	ldr	x0, [x0, #24]
    4d20:	ldrb	w0, [x0]
    4d24:	cmp	w0, #0x45
    4d28:	b.ne	4ce8 <d_expr_primary+0x138>  // b.any
    4d2c:	ldr	x0, [sp, #24]
    4d30:	ldr	x1, [x0, #24]
    4d34:	ldr	x0, [sp, #32]
    4d38:	sub	x0, x1, x0
    4d3c:	mov	w2, w0
    4d40:	ldr	x1, [sp, #32]
    4d44:	ldr	x0, [sp, #24]
    4d48:	bl	438 <d_make_name>
    4d4c:	mov	x3, x0
    4d50:	ldr	x2, [sp, #40]
    4d54:	ldr	w1, [sp, #52]
    4d58:	ldr	x0, [sp, #24]
    4d5c:	bl	2c4 <d_make_comp>
    4d60:	str	x0, [sp, #56]
    4d64:	ldr	x0, [sp, #24]
    4d68:	ldr	x0, [x0, #24]
    4d6c:	ldrb	w0, [x0]
    4d70:	cmp	w0, #0x45
    4d74:	b.ne	4d94 <d_expr_primary+0x1e4>  // b.any
    4d78:	ldr	x0, [sp, #24]
    4d7c:	ldr	x0, [x0, #24]
    4d80:	add	x1, x0, #0x1
    4d84:	ldr	x0, [sp, #24]
    4d88:	str	x1, [x0, #24]
    4d8c:	mov	w0, #0x0                   	// #0
    4d90:	b	4d98 <d_expr_primary+0x1e8>
    4d94:	mov	w0, #0x1                   	// #1
    4d98:	cmp	w0, #0x0
    4d9c:	b.eq	4da8 <d_expr_primary+0x1f8>  // b.none
    4da0:	mov	x0, #0x0                   	// #0
    4da4:	b	4dac <d_expr_primary+0x1fc>
    4da8:	ldr	x0, [sp, #56]
    4dac:	ldp	x29, x30, [sp], #64
    4db0:	ret

0000000000004db4 <d_local_name>:
    4db4:	stp	x29, x30, [sp, #-64]!
    4db8:	mov	x29, sp
    4dbc:	str	x0, [sp, #24]
    4dc0:	ldr	x0, [sp, #24]
    4dc4:	ldr	x0, [x0, #24]
    4dc8:	ldrb	w0, [x0]
    4dcc:	cmp	w0, #0x5a
    4dd0:	b.ne	4df0 <d_local_name+0x3c>  // b.any
    4dd4:	ldr	x0, [sp, #24]
    4dd8:	ldr	x0, [x0, #24]
    4ddc:	add	x1, x0, #0x1
    4de0:	ldr	x0, [sp, #24]
    4de4:	str	x1, [x0, #24]
    4de8:	mov	w0, #0x0                   	// #0
    4dec:	b	4df4 <d_local_name+0x40>
    4df0:	mov	w0, #0x1                   	// #1
    4df4:	cmp	w0, #0x0
    4df8:	b.eq	4e04 <d_local_name+0x50>  // b.none
    4dfc:	mov	x0, #0x0                   	// #0
    4e00:	b	4fcc <d_local_name+0x218>
    4e04:	mov	w1, #0x0                   	// #0
    4e08:	ldr	x0, [sp, #24]
    4e0c:	bl	a20 <d_encoding>
    4e10:	str	x0, [sp, #40]
    4e14:	ldr	x0, [sp, #40]
    4e18:	cmp	x0, #0x0
    4e1c:	b.ne	4e28 <d_local_name+0x74>  // b.any
    4e20:	mov	x0, #0x0                   	// #0
    4e24:	b	4fcc <d_local_name+0x218>
    4e28:	ldr	x0, [sp, #24]
    4e2c:	ldr	x0, [x0, #24]
    4e30:	ldrb	w0, [x0]
    4e34:	cmp	w0, #0x45
    4e38:	b.ne	4e58 <d_local_name+0xa4>  // b.any
    4e3c:	ldr	x0, [sp, #24]
    4e40:	ldr	x0, [x0, #24]
    4e44:	add	x1, x0, #0x1
    4e48:	ldr	x0, [sp, #24]
    4e4c:	str	x1, [x0, #24]
    4e50:	mov	w0, #0x0                   	// #0
    4e54:	b	4e5c <d_local_name+0xa8>
    4e58:	mov	w0, #0x1                   	// #1
    4e5c:	cmp	w0, #0x0
    4e60:	b.eq	4e6c <d_local_name+0xb8>  // b.none
    4e64:	mov	x0, #0x0                   	// #0
    4e68:	b	4fcc <d_local_name+0x218>
    4e6c:	ldr	x0, [sp, #24]
    4e70:	ldr	x0, [x0, #24]
    4e74:	ldrb	w0, [x0]
    4e78:	cmp	w0, #0x73
    4e7c:	b.ne	4ec8 <d_local_name+0x114>  // b.any
    4e80:	ldr	x0, [sp, #24]
    4e84:	ldr	x0, [x0, #24]
    4e88:	add	x1, x0, #0x1
    4e8c:	ldr	x0, [sp, #24]
    4e90:	str	x1, [x0, #24]
    4e94:	ldr	x0, [sp, #24]
    4e98:	bl	4fd4 <d_discriminator>
    4e9c:	cmp	w0, #0x0
    4ea0:	b.ne	4eac <d_local_name+0xf8>  // b.any
    4ea4:	mov	x0, #0x0                   	// #0
    4ea8:	b	4fcc <d_local_name+0x218>
    4eac:	mov	w2, #0xe                   	// #14
    4eb0:	adrp	x0, 0 <is_fnqual_component_type>
    4eb4:	add	x1, x0, #0x0
    4eb8:	ldr	x0, [sp, #24]
    4ebc:	bl	438 <d_make_name>
    4ec0:	str	x0, [sp, #56]
    4ec4:	b	4f88 <d_local_name+0x1d4>
    4ec8:	mov	w0, #0xffffffff            	// #-1
    4ecc:	str	w0, [sp, #52]
    4ed0:	ldr	x0, [sp, #24]
    4ed4:	ldr	x0, [x0, #24]
    4ed8:	ldrb	w0, [x0]
    4edc:	cmp	w0, #0x64
    4ee0:	b.ne	4f18 <d_local_name+0x164>  // b.any
    4ee4:	ldr	x0, [sp, #24]
    4ee8:	ldr	x0, [x0, #24]
    4eec:	add	x1, x0, #0x1
    4ef0:	ldr	x0, [sp, #24]
    4ef4:	str	x1, [x0, #24]
    4ef8:	ldr	x0, [sp, #24]
    4efc:	bl	3d08 <d_compact_number>
    4f00:	str	w0, [sp, #52]
    4f04:	ldr	w0, [sp, #52]
    4f08:	cmp	w0, #0x0
    4f0c:	b.ge	4f18 <d_local_name+0x164>  // b.tcont
    4f10:	mov	x0, #0x0                   	// #0
    4f14:	b	4fcc <d_local_name+0x218>
    4f18:	ldr	x0, [sp, #24]
    4f1c:	bl	c40 <d_name>
    4f20:	str	x0, [sp, #56]
    4f24:	ldr	x0, [sp, #56]
    4f28:	cmp	x0, #0x0
    4f2c:	b.eq	4f68 <d_local_name+0x1b4>  // b.none
    4f30:	ldr	x0, [sp, #56]
    4f34:	ldr	w0, [x0]
    4f38:	cmp	w0, #0x46
    4f3c:	b.eq	4f68 <d_local_name+0x1b4>  // b.none
    4f40:	ldr	x0, [sp, #56]
    4f44:	ldr	w0, [x0]
    4f48:	cmp	w0, #0x48
    4f4c:	b.eq	4f68 <d_local_name+0x1b4>  // b.none
    4f50:	ldr	x0, [sp, #24]
    4f54:	bl	4fd4 <d_discriminator>
    4f58:	cmp	w0, #0x0
    4f5c:	b.ne	4f68 <d_local_name+0x1b4>  // b.any
    4f60:	mov	x0, #0x0                   	// #0
    4f64:	b	4fcc <d_local_name+0x218>
    4f68:	ldr	w0, [sp, #52]
    4f6c:	cmp	w0, #0x0
    4f70:	b.lt	4f88 <d_local_name+0x1d4>  // b.tstop
    4f74:	ldr	x2, [sp, #56]
    4f78:	ldr	w1, [sp, #52]
    4f7c:	ldr	x0, [sp, #24]
    4f80:	bl	57c <d_make_default_arg>
    4f84:	str	x0, [sp, #56]
    4f88:	ldr	x0, [sp, #40]
    4f8c:	ldr	w0, [x0]
    4f90:	cmp	w0, #0x3
    4f94:	b.ne	4fb8 <d_local_name+0x204>  // b.any
    4f98:	ldr	x0, [sp, #40]
    4f9c:	ldr	x0, [x0, #16]
    4fa0:	ldr	w0, [x0]
    4fa4:	cmp	w0, #0x29
    4fa8:	b.ne	4fb8 <d_local_name+0x204>  // b.any
    4fac:	ldr	x0, [sp, #40]
    4fb0:	ldr	x0, [x0, #16]
    4fb4:	str	xzr, [x0, #8]
    4fb8:	ldr	x3, [sp, #56]
    4fbc:	ldr	x2, [sp, #40]
    4fc0:	mov	w1, #0x2                   	// #2
    4fc4:	ldr	x0, [sp, #24]
    4fc8:	bl	2c4 <d_make_comp>
    4fcc:	ldp	x29, x30, [sp], #64
    4fd0:	ret

0000000000004fd4 <d_discriminator>:
    4fd4:	stp	x29, x30, [sp, #-48]!
    4fd8:	mov	x29, sp
    4fdc:	str	x0, [sp, #24]
    4fe0:	mov	w0, #0x1                   	// #1
    4fe4:	str	w0, [sp, #44]
    4fe8:	ldr	x0, [sp, #24]
    4fec:	ldr	x0, [x0, #24]
    4ff0:	ldrb	w0, [x0]
    4ff4:	cmp	w0, #0x5f
    4ff8:	b.eq	5004 <d_discriminator+0x30>  // b.none
    4ffc:	mov	w0, #0x1                   	// #1
    5000:	b	50bc <d_discriminator+0xe8>
    5004:	ldr	x0, [sp, #24]
    5008:	ldr	x0, [x0, #24]
    500c:	add	x1, x0, #0x1
    5010:	ldr	x0, [sp, #24]
    5014:	str	x1, [x0, #24]
    5018:	ldr	x0, [sp, #24]
    501c:	ldr	x0, [x0, #24]
    5020:	ldrb	w0, [x0]
    5024:	cmp	w0, #0x5f
    5028:	b.ne	504c <d_discriminator+0x78>  // b.any
    502c:	ldr	w0, [sp, #44]
    5030:	add	w0, w0, #0x1
    5034:	str	w0, [sp, #44]
    5038:	ldr	x0, [sp, #24]
    503c:	ldr	x0, [x0, #24]
    5040:	add	x1, x0, #0x1
    5044:	ldr	x0, [sp, #24]
    5048:	str	x1, [x0, #24]
    504c:	ldr	x0, [sp, #24]
    5050:	bl	1418 <d_number>
    5054:	str	w0, [sp, #40]
    5058:	ldr	w0, [sp, #40]
    505c:	cmp	w0, #0x0
    5060:	b.ge	506c <d_discriminator+0x98>  // b.tcont
    5064:	mov	w0, #0x0                   	// #0
    5068:	b	50bc <d_discriminator+0xe8>
    506c:	ldr	w0, [sp, #44]
    5070:	cmp	w0, #0x1
    5074:	b.le	50b8 <d_discriminator+0xe4>
    5078:	ldr	w0, [sp, #40]
    507c:	cmp	w0, #0x9
    5080:	b.le	50b8 <d_discriminator+0xe4>
    5084:	ldr	x0, [sp, #24]
    5088:	ldr	x0, [x0, #24]
    508c:	ldrb	w0, [x0]
    5090:	cmp	w0, #0x5f
    5094:	b.ne	50b0 <d_discriminator+0xdc>  // b.any
    5098:	ldr	x0, [sp, #24]
    509c:	ldr	x0, [x0, #24]
    50a0:	add	x1, x0, #0x1
    50a4:	ldr	x0, [sp, #24]
    50a8:	str	x1, [x0, #24]
    50ac:	b	50b8 <d_discriminator+0xe4>
    50b0:	mov	w0, #0x0                   	// #0
    50b4:	b	50bc <d_discriminator+0xe8>
    50b8:	mov	w0, #0x1                   	// #1
    50bc:	ldp	x29, x30, [sp], #48
    50c0:	ret

00000000000050c4 <d_lambda>:
    50c4:	stp	x29, x30, [sp, #-64]!
    50c8:	mov	x29, sp
    50cc:	str	x0, [sp, #24]
    50d0:	ldr	x0, [sp, #24]
    50d4:	ldr	x0, [x0, #24]
    50d8:	ldrb	w0, [x0]
    50dc:	cmp	w0, #0x55
    50e0:	b.ne	5100 <d_lambda+0x3c>  // b.any
    50e4:	ldr	x0, [sp, #24]
    50e8:	ldr	x0, [x0, #24]
    50ec:	add	x1, x0, #0x1
    50f0:	ldr	x0, [sp, #24]
    50f4:	str	x1, [x0, #24]
    50f8:	mov	w0, #0x0                   	// #0
    50fc:	b	5104 <d_lambda+0x40>
    5100:	mov	w0, #0x1                   	// #1
    5104:	cmp	w0, #0x0
    5108:	b.eq	5114 <d_lambda+0x50>  // b.none
    510c:	mov	x0, #0x0                   	// #0
    5110:	b	5238 <d_lambda+0x174>
    5114:	ldr	x0, [sp, #24]
    5118:	ldr	x0, [x0, #24]
    511c:	ldrb	w0, [x0]
    5120:	cmp	w0, #0x6c
    5124:	b.ne	5144 <d_lambda+0x80>  // b.any
    5128:	ldr	x0, [sp, #24]
    512c:	ldr	x0, [x0, #24]
    5130:	add	x1, x0, #0x1
    5134:	ldr	x0, [sp, #24]
    5138:	str	x1, [x0, #24]
    513c:	mov	w0, #0x0                   	// #0
    5140:	b	5148 <d_lambda+0x84>
    5144:	mov	w0, #0x1                   	// #1
    5148:	cmp	w0, #0x0
    514c:	b.eq	5158 <d_lambda+0x94>  // b.none
    5150:	mov	x0, #0x0                   	// #0
    5154:	b	5238 <d_lambda+0x174>
    5158:	ldr	x0, [sp, #24]
    515c:	bl	37ac <d_parmlist>
    5160:	str	x0, [sp, #56]
    5164:	ldr	x0, [sp, #56]
    5168:	cmp	x0, #0x0
    516c:	b.ne	5178 <d_lambda+0xb4>  // b.any
    5170:	mov	x0, #0x0                   	// #0
    5174:	b	5238 <d_lambda+0x174>
    5178:	ldr	x0, [sp, #24]
    517c:	ldr	x0, [x0, #24]
    5180:	ldrb	w0, [x0]
    5184:	cmp	w0, #0x45
    5188:	b.ne	51a8 <d_lambda+0xe4>  // b.any
    518c:	ldr	x0, [sp, #24]
    5190:	ldr	x0, [x0, #24]
    5194:	add	x1, x0, #0x1
    5198:	ldr	x0, [sp, #24]
    519c:	str	x1, [x0, #24]
    51a0:	mov	w0, #0x0                   	// #0
    51a4:	b	51ac <d_lambda+0xe8>
    51a8:	mov	w0, #0x1                   	// #1
    51ac:	cmp	w0, #0x0
    51b0:	b.eq	51bc <d_lambda+0xf8>  // b.none
    51b4:	mov	x0, #0x0                   	// #0
    51b8:	b	5238 <d_lambda+0x174>
    51bc:	ldr	x0, [sp, #24]
    51c0:	bl	3d08 <d_compact_number>
    51c4:	str	w0, [sp, #52]
    51c8:	ldr	w0, [sp, #52]
    51cc:	cmp	w0, #0x0
    51d0:	b.ge	51dc <d_lambda+0x118>  // b.tcont
    51d4:	mov	x0, #0x0                   	// #0
    51d8:	b	5238 <d_lambda+0x174>
    51dc:	ldr	x0, [sp, #24]
    51e0:	bl	248 <d_make_empty>
    51e4:	str	x0, [sp, #40]
    51e8:	ldr	x0, [sp, #40]
    51ec:	cmp	x0, #0x0
    51f0:	b.eq	5218 <d_lambda+0x154>  // b.none
    51f4:	ldr	x0, [sp, #40]
    51f8:	mov	w1, #0x46                  	// #70
    51fc:	str	w1, [x0]
    5200:	ldr	x0, [sp, #40]
    5204:	ldr	x1, [sp, #56]
    5208:	str	x1, [x0, #8]
    520c:	ldr	x0, [sp, #40]
    5210:	ldr	w1, [sp, #52]
    5214:	str	w1, [x0, #16]
    5218:	ldr	x1, [sp, #40]
    521c:	ldr	x0, [sp, #24]
    5220:	bl	54dc <d_add_substitution>
    5224:	cmp	w0, #0x0
    5228:	b.ne	5234 <d_lambda+0x170>  // b.any
    522c:	mov	x0, #0x0                   	// #0
    5230:	b	5238 <d_lambda+0x174>
    5234:	ldr	x0, [sp, #40]
    5238:	ldp	x29, x30, [sp], #64
    523c:	ret

0000000000005240 <d_unnamed_type>:
    5240:	stp	x29, x30, [sp, #-48]!
    5244:	mov	x29, sp
    5248:	str	x0, [sp, #24]
    524c:	ldr	x0, [sp, #24]
    5250:	ldr	x0, [x0, #24]
    5254:	ldrb	w0, [x0]
    5258:	cmp	w0, #0x55
    525c:	b.ne	527c <d_unnamed_type+0x3c>  // b.any
    5260:	ldr	x0, [sp, #24]
    5264:	ldr	x0, [x0, #24]
    5268:	add	x1, x0, #0x1
    526c:	ldr	x0, [sp, #24]
    5270:	str	x1, [x0, #24]
    5274:	mov	w0, #0x0                   	// #0
    5278:	b	5280 <d_unnamed_type+0x40>
    527c:	mov	w0, #0x1                   	// #1
    5280:	cmp	w0, #0x0
    5284:	b.eq	5290 <d_unnamed_type+0x50>  // b.none
    5288:	mov	x0, #0x0                   	// #0
    528c:	b	5344 <d_unnamed_type+0x104>
    5290:	ldr	x0, [sp, #24]
    5294:	ldr	x0, [x0, #24]
    5298:	ldrb	w0, [x0]
    529c:	cmp	w0, #0x74
    52a0:	b.ne	52c0 <d_unnamed_type+0x80>  // b.any
    52a4:	ldr	x0, [sp, #24]
    52a8:	ldr	x0, [x0, #24]
    52ac:	add	x1, x0, #0x1
    52b0:	ldr	x0, [sp, #24]
    52b4:	str	x1, [x0, #24]
    52b8:	mov	w0, #0x0                   	// #0
    52bc:	b	52c4 <d_unnamed_type+0x84>
    52c0:	mov	w0, #0x1                   	// #1
    52c4:	cmp	w0, #0x0
    52c8:	b.eq	52d4 <d_unnamed_type+0x94>  // b.none
    52cc:	mov	x0, #0x0                   	// #0
    52d0:	b	5344 <d_unnamed_type+0x104>
    52d4:	ldr	x0, [sp, #24]
    52d8:	bl	3d08 <d_compact_number>
    52dc:	str	w0, [sp, #44]
    52e0:	ldr	w0, [sp, #44]
    52e4:	cmp	w0, #0x0
    52e8:	b.ge	52f4 <d_unnamed_type+0xb4>  // b.tcont
    52ec:	mov	x0, #0x0                   	// #0
    52f0:	b	5344 <d_unnamed_type+0x104>
    52f4:	ldr	x0, [sp, #24]
    52f8:	bl	248 <d_make_empty>
    52fc:	str	x0, [sp, #32]
    5300:	ldr	x0, [sp, #32]
    5304:	cmp	x0, #0x0
    5308:	b.eq	5324 <d_unnamed_type+0xe4>  // b.none
    530c:	ldr	x0, [sp, #32]
    5310:	mov	w1, #0x48                  	// #72
    5314:	str	w1, [x0]
    5318:	ldrsw	x1, [sp, #44]
    531c:	ldr	x0, [sp, #32]
    5320:	str	x1, [x0, #8]
    5324:	ldr	x1, [sp, #32]
    5328:	ldr	x0, [sp, #24]
    532c:	bl	54dc <d_add_substitution>
    5330:	cmp	w0, #0x0
    5334:	b.ne	5340 <d_unnamed_type+0x100>  // b.any
    5338:	mov	x0, #0x0                   	// #0
    533c:	b	5344 <d_unnamed_type+0x104>
    5340:	ldr	x0, [sp, #32]
    5344:	ldp	x29, x30, [sp], #48
    5348:	ret

000000000000534c <d_clone_suffix>:
    534c:	stp	x29, x30, [sp, #-64]!
    5350:	mov	x29, sp
    5354:	str	x0, [sp, #24]
    5358:	str	x1, [sp, #16]
    535c:	ldr	x0, [sp, #24]
    5360:	ldr	x0, [x0, #24]
    5364:	str	x0, [sp, #48]
    5368:	ldr	x0, [sp, #48]
    536c:	str	x0, [sp, #56]
    5370:	ldr	x0, [sp, #56]
    5374:	ldrb	w0, [x0]
    5378:	cmp	w0, #0x2e
    537c:	b.ne	5448 <d_clone_suffix+0xfc>  // b.any
    5380:	ldr	x0, [sp, #56]
    5384:	add	x0, x0, #0x1
    5388:	ldrb	w0, [x0]
    538c:	cmp	w0, #0x60
    5390:	b.ls	53a8 <d_clone_suffix+0x5c>  // b.plast
    5394:	ldr	x0, [sp, #56]
    5398:	add	x0, x0, #0x1
    539c:	ldrb	w0, [x0]
    53a0:	cmp	w0, #0x7a
    53a4:	b.ls	53bc <d_clone_suffix+0x70>  // b.plast
    53a8:	ldr	x0, [sp, #56]
    53ac:	add	x0, x0, #0x1
    53b0:	ldrb	w0, [x0]
    53b4:	cmp	w0, #0x5f
    53b8:	b.ne	5448 <d_clone_suffix+0xfc>  // b.any
    53bc:	ldr	x0, [sp, #56]
    53c0:	add	x0, x0, #0x2
    53c4:	str	x0, [sp, #56]
    53c8:	b	53d8 <d_clone_suffix+0x8c>
    53cc:	ldr	x0, [sp, #56]
    53d0:	add	x0, x0, #0x1
    53d4:	str	x0, [sp, #56]
    53d8:	ldr	x0, [sp, #56]
    53dc:	ldrb	w0, [x0]
    53e0:	cmp	w0, #0x60
    53e4:	b.ls	53f8 <d_clone_suffix+0xac>  // b.plast
    53e8:	ldr	x0, [sp, #56]
    53ec:	ldrb	w0, [x0]
    53f0:	cmp	w0, #0x7a
    53f4:	b.ls	53cc <d_clone_suffix+0x80>  // b.plast
    53f8:	ldr	x0, [sp, #56]
    53fc:	ldrb	w0, [x0]
    5400:	cmp	w0, #0x5f
    5404:	b.eq	53cc <d_clone_suffix+0x80>  // b.none
    5408:	b	5448 <d_clone_suffix+0xfc>
    540c:	ldr	x0, [sp, #56]
    5410:	add	x0, x0, #0x2
    5414:	str	x0, [sp, #56]
    5418:	b	5428 <d_clone_suffix+0xdc>
    541c:	ldr	x0, [sp, #56]
    5420:	add	x0, x0, #0x1
    5424:	str	x0, [sp, #56]
    5428:	ldr	x0, [sp, #56]
    542c:	ldrb	w0, [x0]
    5430:	cmp	w0, #0x2f
    5434:	b.ls	5448 <d_clone_suffix+0xfc>  // b.plast
    5438:	ldr	x0, [sp, #56]
    543c:	ldrb	w0, [x0]
    5440:	cmp	w0, #0x39
    5444:	b.ls	541c <d_clone_suffix+0xd0>  // b.plast
    5448:	ldr	x0, [sp, #56]
    544c:	ldrb	w0, [x0]
    5450:	cmp	w0, #0x2e
    5454:	b.ne	5480 <d_clone_suffix+0x134>  // b.any
    5458:	ldr	x0, [sp, #56]
    545c:	add	x0, x0, #0x1
    5460:	ldrb	w0, [x0]
    5464:	cmp	w0, #0x2f
    5468:	b.ls	5480 <d_clone_suffix+0x134>  // b.plast
    546c:	ldr	x0, [sp, #56]
    5470:	add	x0, x0, #0x1
    5474:	ldrb	w0, [x0]
    5478:	cmp	w0, #0x39
    547c:	b.ls	540c <d_clone_suffix+0xc0>  // b.plast
    5480:	ldr	x0, [sp, #24]
    5484:	ldr	x0, [x0, #24]
    5488:	ldr	x2, [sp, #56]
    548c:	ldr	x1, [sp, #48]
    5490:	sub	x1, x2, x1
    5494:	add	x1, x0, x1
    5498:	ldr	x0, [sp, #24]
    549c:	str	x1, [x0, #24]
    54a0:	ldr	x1, [sp, #56]
    54a4:	ldr	x0, [sp, #48]
    54a8:	sub	x0, x1, x0
    54ac:	mov	w2, w0
    54b0:	ldr	x1, [sp, #48]
    54b4:	ldr	x0, [sp, #24]
    54b8:	bl	438 <d_make_name>
    54bc:	str	x0, [sp, #40]
    54c0:	ldr	x3, [sp, #40]
    54c4:	ldr	x2, [sp, #16]
    54c8:	mov	w1, #0x4e                  	// #78
    54cc:	ldr	x0, [sp, #24]
    54d0:	bl	2c4 <d_make_comp>
    54d4:	ldp	x29, x30, [sp], #64
    54d8:	ret

00000000000054dc <d_add_substitution>:
    54dc:	sub	sp, sp, #0x10
    54e0:	str	x0, [sp, #8]
    54e4:	str	x1, [sp]
    54e8:	ldr	x0, [sp]
    54ec:	cmp	x0, #0x0
    54f0:	b.ne	54fc <d_add_substitution+0x20>  // b.any
    54f4:	mov	w0, #0x0                   	// #0
    54f8:	b	5558 <d_add_substitution+0x7c>
    54fc:	ldr	x0, [sp, #8]
    5500:	ldr	w1, [x0, #56]
    5504:	ldr	x0, [sp, #8]
    5508:	ldr	w0, [x0, #60]
    550c:	cmp	w1, w0
    5510:	b.lt	551c <d_add_substitution+0x40>  // b.tstop
    5514:	mov	w0, #0x0                   	// #0
    5518:	b	5558 <d_add_substitution+0x7c>
    551c:	ldr	x0, [sp, #8]
    5520:	ldr	x1, [x0, #48]
    5524:	ldr	x0, [sp, #8]
    5528:	ldr	w0, [x0, #56]
    552c:	sxtw	x0, w0
    5530:	lsl	x0, x0, #3
    5534:	add	x0, x1, x0
    5538:	ldr	x1, [sp]
    553c:	str	x1, [x0]
    5540:	ldr	x0, [sp, #8]
    5544:	ldr	w0, [x0, #56]
    5548:	add	w1, w0, #0x1
    554c:	ldr	x0, [sp, #8]
    5550:	str	w1, [x0, #56]
    5554:	mov	w0, #0x1                   	// #1
    5558:	add	sp, sp, #0x10
    555c:	ret

0000000000005560 <d_substitution>:
    5560:	stp	x29, x30, [sp, #-96]!
    5564:	mov	x29, sp
    5568:	str	x0, [sp, #24]
    556c:	str	w1, [sp, #20]
    5570:	ldr	x0, [sp, #24]
    5574:	ldr	x0, [x0, #24]
    5578:	ldrb	w0, [x0]
    557c:	cmp	w0, #0x53
    5580:	b.ne	55a0 <d_substitution+0x40>  // b.any
    5584:	ldr	x0, [sp, #24]
    5588:	ldr	x0, [x0, #24]
    558c:	add	x1, x0, #0x1
    5590:	ldr	x0, [sp, #24]
    5594:	str	x1, [x0, #24]
    5598:	mov	w0, #0x0                   	// #0
    559c:	b	55a4 <d_substitution+0x44>
    55a0:	mov	w0, #0x1                   	// #1
    55a4:	cmp	w0, #0x0
    55a8:	b.eq	55b4 <d_substitution+0x54>  // b.none
    55ac:	mov	x0, #0x0                   	// #0
    55b0:	b	5914 <d_substitution+0x3b4>
    55b4:	ldr	x0, [sp, #24]
    55b8:	ldr	x0, [x0, #24]
    55bc:	ldrb	w0, [x0]
    55c0:	cmp	w0, #0x0
    55c4:	b.eq	55e4 <d_substitution+0x84>  // b.none
    55c8:	ldr	x0, [sp, #24]
    55cc:	ldr	x0, [x0, #24]
    55d0:	add	x2, x0, #0x1
    55d4:	ldr	x1, [sp, #24]
    55d8:	str	x2, [x1, #24]
    55dc:	ldrb	w0, [x0]
    55e0:	b	55e8 <d_substitution+0x88>
    55e4:	mov	w0, #0x0                   	// #0
    55e8:	strb	w0, [sp, #95]
    55ec:	ldrb	w0, [sp, #95]
    55f0:	cmp	w0, #0x5f
    55f4:	b.eq	5628 <d_substitution+0xc8>  // b.none
    55f8:	ldrb	w0, [sp, #95]
    55fc:	cmp	w0, #0x2f
    5600:	b.ls	5610 <d_substitution+0xb0>  // b.plast
    5604:	ldrb	w0, [sp, #95]
    5608:	cmp	w0, #0x39
    560c:	b.ls	5628 <d_substitution+0xc8>  // b.plast
    5610:	ldrb	w0, [sp, #95]
    5614:	cmp	w0, #0x40
    5618:	b.ls	5774 <d_substitution+0x214>  // b.plast
    561c:	ldrb	w0, [sp, #95]
    5620:	cmp	w0, #0x5a
    5624:	b.hi	5774 <d_substitution+0x214>  // b.pmore
    5628:	str	wzr, [sp, #88]
    562c:	ldrb	w0, [sp, #95]
    5630:	cmp	w0, #0x5f
    5634:	b.eq	5738 <d_substitution+0x1d8>  // b.none
    5638:	ldrb	w0, [sp, #95]
    563c:	cmp	w0, #0x2f
    5640:	b.ls	567c <d_substitution+0x11c>  // b.plast
    5644:	ldrb	w0, [sp, #95]
    5648:	cmp	w0, #0x39
    564c:	b.hi	567c <d_substitution+0x11c>  // b.pmore
    5650:	ldr	w1, [sp, #88]
    5654:	mov	w0, w1
    5658:	lsl	w0, w0, #3
    565c:	add	w0, w0, w1
    5660:	lsl	w0, w0, #2
    5664:	mov	w1, w0
    5668:	ldrb	w0, [sp, #95]
    566c:	add	w0, w1, w0
    5670:	sub	w0, w0, #0x30
    5674:	str	w0, [sp, #84]
    5678:	b	56c8 <d_substitution+0x168>
    567c:	ldrb	w0, [sp, #95]
    5680:	cmp	w0, #0x40
    5684:	b.ls	56c0 <d_substitution+0x160>  // b.plast
    5688:	ldrb	w0, [sp, #95]
    568c:	cmp	w0, #0x5a
    5690:	b.hi	56c0 <d_substitution+0x160>  // b.pmore
    5694:	ldr	w1, [sp, #88]
    5698:	mov	w0, w1
    569c:	lsl	w0, w0, #3
    56a0:	add	w0, w0, w1
    56a4:	lsl	w0, w0, #2
    56a8:	mov	w1, w0
    56ac:	ldrb	w0, [sp, #95]
    56b0:	add	w0, w1, w0
    56b4:	sub	w0, w0, #0x37
    56b8:	str	w0, [sp, #84]
    56bc:	b	56c8 <d_substitution+0x168>
    56c0:	mov	x0, #0x0                   	// #0
    56c4:	b	5914 <d_substitution+0x3b4>
    56c8:	ldr	w1, [sp, #84]
    56cc:	ldr	w0, [sp, #88]
    56d0:	cmp	w1, w0
    56d4:	b.cs	56e0 <d_substitution+0x180>  // b.hs, b.nlast
    56d8:	mov	x0, #0x0                   	// #0
    56dc:	b	5914 <d_substitution+0x3b4>
    56e0:	ldr	w0, [sp, #84]
    56e4:	str	w0, [sp, #88]
    56e8:	ldr	x0, [sp, #24]
    56ec:	ldr	x0, [x0, #24]
    56f0:	ldrb	w0, [x0]
    56f4:	cmp	w0, #0x0
    56f8:	b.eq	5718 <d_substitution+0x1b8>  // b.none
    56fc:	ldr	x0, [sp, #24]
    5700:	ldr	x0, [x0, #24]
    5704:	add	x2, x0, #0x1
    5708:	ldr	x1, [sp, #24]
    570c:	str	x2, [x1, #24]
    5710:	ldrb	w0, [x0]
    5714:	b	571c <d_substitution+0x1bc>
    5718:	mov	w0, #0x0                   	// #0
    571c:	strb	w0, [sp, #95]
    5720:	ldrb	w0, [sp, #95]
    5724:	cmp	w0, #0x5f
    5728:	b.ne	5638 <d_substitution+0xd8>  // b.any
    572c:	ldr	w0, [sp, #88]
    5730:	add	w0, w0, #0x1
    5734:	str	w0, [sp, #88]
    5738:	ldr	x0, [sp, #24]
    573c:	ldr	w0, [x0, #56]
    5740:	mov	w1, w0
    5744:	ldr	w0, [sp, #88]
    5748:	cmp	w0, w1
    574c:	b.cc	5758 <d_substitution+0x1f8>  // b.lo, b.ul, b.last
    5750:	mov	x0, #0x0                   	// #0
    5754:	b	5914 <d_substitution+0x3b4>
    5758:	ldr	x0, [sp, #24]
    575c:	ldr	x1, [x0, #48]
    5760:	ldr	w0, [sp, #88]
    5764:	lsl	x0, x0, #3
    5768:	add	x0, x1, x0
    576c:	ldr	x0, [x0]
    5770:	b	5914 <d_substitution+0x3b4>
    5774:	ldr	x0, [sp, #24]
    5778:	ldr	w0, [x0, #16]
    577c:	and	w0, w0, #0x8
    5780:	cmp	w0, #0x0
    5784:	cset	w0, ne  // ne = any
    5788:	and	w0, w0, #0xff
    578c:	str	w0, [sp, #80]
    5790:	ldr	w0, [sp, #80]
    5794:	cmp	w0, #0x0
    5798:	b.ne	57d8 <d_substitution+0x278>  // b.any
    579c:	ldr	w0, [sp, #20]
    57a0:	cmp	w0, #0x0
    57a4:	b.eq	57d8 <d_substitution+0x278>  // b.none
    57a8:	ldr	x0, [sp, #24]
    57ac:	ldr	x0, [x0, #24]
    57b0:	ldrb	w0, [x0]
    57b4:	strb	w0, [sp, #47]
    57b8:	ldrb	w0, [sp, #47]
    57bc:	cmp	w0, #0x43
    57c0:	b.eq	57d0 <d_substitution+0x270>  // b.none
    57c4:	ldrb	w0, [sp, #47]
    57c8:	cmp	w0, #0x44
    57cc:	b.ne	57d8 <d_substitution+0x278>  // b.any
    57d0:	mov	w0, #0x1                   	// #1
    57d4:	str	w0, [sp, #80]
    57d8:	adrp	x0, 0 <is_fnqual_component_type>
    57dc:	add	x0, x0, #0x0
    57e0:	str	x0, [sp, #32]
    57e4:	adrp	x0, 0 <is_fnqual_component_type>
    57e8:	add	x0, x0, #0x0
    57ec:	str	x0, [sp, #72]
    57f0:	b	5900 <d_substitution+0x3a0>
    57f4:	ldr	x0, [sp, #72]
    57f8:	ldrb	w0, [x0]
    57fc:	ldrb	w1, [sp, #95]
    5800:	cmp	w1, w0
    5804:	b.ne	58f4 <d_substitution+0x394>  // b.any
    5808:	ldr	x0, [sp, #72]
    580c:	ldr	x0, [x0, #40]
    5810:	cmp	x0, #0x0
    5814:	b.eq	5840 <d_substitution+0x2e0>  // b.none
    5818:	ldr	x0, [sp, #72]
    581c:	ldr	x1, [x0, #40]
    5820:	ldr	x0, [sp, #72]
    5824:	ldr	w0, [x0, #48]
    5828:	mov	w2, w0
    582c:	ldr	x0, [sp, #24]
    5830:	bl	708 <d_make_sub>
    5834:	mov	x1, x0
    5838:	ldr	x0, [sp, #24]
    583c:	str	x1, [x0, #64]
    5840:	ldr	w0, [sp, #80]
    5844:	cmp	w0, #0x0
    5848:	b.eq	5868 <d_substitution+0x308>  // b.none
    584c:	ldr	x0, [sp, #72]
    5850:	ldr	x0, [x0, #24]
    5854:	str	x0, [sp, #64]
    5858:	ldr	x0, [sp, #72]
    585c:	ldr	w0, [x0, #32]
    5860:	str	w0, [sp, #60]
    5864:	b	5880 <d_substitution+0x320>
    5868:	ldr	x0, [sp, #72]
    586c:	ldr	x0, [x0, #8]
    5870:	str	x0, [sp, #64]
    5874:	ldr	x0, [sp, #72]
    5878:	ldr	w0, [x0, #16]
    587c:	str	w0, [sp, #60]
    5880:	ldr	x0, [sp, #24]
    5884:	ldr	w1, [x0, #72]
    5888:	ldr	w0, [sp, #60]
    588c:	add	w1, w1, w0
    5890:	ldr	x0, [sp, #24]
    5894:	str	w1, [x0, #72]
    5898:	ldr	w2, [sp, #60]
    589c:	ldr	x1, [sp, #64]
    58a0:	ldr	x0, [sp, #24]
    58a4:	bl	708 <d_make_sub>
    58a8:	str	x0, [sp, #48]
    58ac:	ldr	x0, [sp, #24]
    58b0:	ldr	x0, [x0, #24]
    58b4:	ldrb	w0, [x0]
    58b8:	cmp	w0, #0x42
    58bc:	b.ne	58ec <d_substitution+0x38c>  // b.any
    58c0:	ldr	x1, [sp, #48]
    58c4:	ldr	x0, [sp, #24]
    58c8:	bl	bb4 <d_abi_tags>
    58cc:	str	x0, [sp, #48]
    58d0:	ldr	x1, [sp, #48]
    58d4:	ldr	x0, [sp, #24]
    58d8:	bl	54dc <d_add_substitution>
    58dc:	cmp	w0, #0x0
    58e0:	b.ne	58ec <d_substitution+0x38c>  // b.any
    58e4:	mov	x0, #0x0                   	// #0
    58e8:	b	5914 <d_substitution+0x3b4>
    58ec:	ldr	x0, [sp, #48]
    58f0:	b	5914 <d_substitution+0x3b4>
    58f4:	ldr	x0, [sp, #72]
    58f8:	add	x0, x0, #0x38
    58fc:	str	x0, [sp, #72]
    5900:	ldr	x1, [sp, #72]
    5904:	ldr	x0, [sp, #32]
    5908:	cmp	x1, x0
    590c:	b.cc	57f4 <d_substitution+0x294>  // b.lo, b.ul, b.last
    5910:	mov	x0, #0x0                   	// #0
    5914:	ldp	x29, x30, [sp], #96
    5918:	ret

000000000000591c <d_checkpoint>:
    591c:	sub	sp, sp, #0x10
    5920:	str	x0, [sp, #8]
    5924:	str	x1, [sp]
    5928:	ldr	x0, [sp, #8]
    592c:	ldr	x1, [x0, #24]
    5930:	ldr	x0, [sp]
    5934:	str	x1, [x0]
    5938:	ldr	x0, [sp, #8]
    593c:	ldr	w1, [x0, #40]
    5940:	ldr	x0, [sp]
    5944:	str	w1, [x0, #8]
    5948:	ldr	x0, [sp, #8]
    594c:	ldr	w1, [x0, #56]
    5950:	ldr	x0, [sp]
    5954:	str	w1, [x0, #12]
    5958:	ldr	x0, [sp, #8]
    595c:	ldr	w1, [x0, #72]
    5960:	ldr	x0, [sp]
    5964:	str	w1, [x0, #16]
    5968:	nop
    596c:	add	sp, sp, #0x10
    5970:	ret

0000000000005974 <d_backtrack>:
    5974:	sub	sp, sp, #0x10
    5978:	str	x0, [sp, #8]
    597c:	str	x1, [sp]
    5980:	ldr	x0, [sp]
    5984:	ldr	x1, [x0]
    5988:	ldr	x0, [sp, #8]
    598c:	str	x1, [x0, #24]
    5990:	ldr	x0, [sp]
    5994:	ldr	w1, [x0, #8]
    5998:	ldr	x0, [sp, #8]
    599c:	str	w1, [x0, #40]
    59a0:	ldr	x0, [sp]
    59a4:	ldr	w1, [x0, #12]
    59a8:	ldr	x0, [sp, #8]
    59ac:	str	w1, [x0, #56]
    59b0:	ldr	x0, [sp]
    59b4:	ldr	w1, [x0, #16]
    59b8:	ldr	x0, [sp, #8]
    59bc:	str	w1, [x0, #72]
    59c0:	nop
    59c4:	add	sp, sp, #0x10
    59c8:	ret

00000000000059cc <d_growable_string_init>:
    59cc:	stp	x29, x30, [sp, #-32]!
    59d0:	mov	x29, sp
    59d4:	str	x0, [sp, #24]
    59d8:	str	x1, [sp, #16]
    59dc:	ldr	x0, [sp, #24]
    59e0:	str	xzr, [x0]
    59e4:	ldr	x0, [sp, #24]
    59e8:	str	xzr, [x0, #8]
    59ec:	ldr	x0, [sp, #24]
    59f0:	str	xzr, [x0, #16]
    59f4:	ldr	x0, [sp, #24]
    59f8:	str	wzr, [x0, #24]
    59fc:	ldr	x0, [sp, #16]
    5a00:	cmp	x0, #0x0
    5a04:	b.eq	5a14 <d_growable_string_init+0x48>  // b.none
    5a08:	ldr	x1, [sp, #16]
    5a0c:	ldr	x0, [sp, #24]
    5a10:	bl	5a20 <d_growable_string_resize>
    5a14:	nop
    5a18:	ldp	x29, x30, [sp], #32
    5a1c:	ret

0000000000005a20 <d_growable_string_resize>:
    5a20:	stp	x29, x30, [sp, #-48]!
    5a24:	mov	x29, sp
    5a28:	str	x0, [sp, #24]
    5a2c:	str	x1, [sp, #16]
    5a30:	ldr	x0, [sp, #24]
    5a34:	ldr	w0, [x0, #24]
    5a38:	cmp	w0, #0x0
    5a3c:	b.ne	5af4 <d_growable_string_resize+0xd4>  // b.any
    5a40:	ldr	x0, [sp, #24]
    5a44:	ldr	x0, [x0, #16]
    5a48:	cmp	x0, #0x0
    5a4c:	b.eq	5a5c <d_growable_string_resize+0x3c>  // b.none
    5a50:	ldr	x0, [sp, #24]
    5a54:	ldr	x0, [x0, #16]
    5a58:	b	5a60 <d_growable_string_resize+0x40>
    5a5c:	mov	x0, #0x2                   	// #2
    5a60:	str	x0, [sp, #40]
    5a64:	b	5a74 <d_growable_string_resize+0x54>
    5a68:	ldr	x0, [sp, #40]
    5a6c:	lsl	x0, x0, #1
    5a70:	str	x0, [sp, #40]
    5a74:	ldr	x1, [sp, #40]
    5a78:	ldr	x0, [sp, #16]
    5a7c:	cmp	x1, x0
    5a80:	b.cc	5a68 <d_growable_string_resize+0x48>  // b.lo, b.ul, b.last
    5a84:	ldr	x0, [sp, #24]
    5a88:	ldr	x0, [x0]
    5a8c:	ldr	x1, [sp, #40]
    5a90:	bl	0 <realloc>
    5a94:	str	x0, [sp, #32]
    5a98:	ldr	x0, [sp, #32]
    5a9c:	cmp	x0, #0x0
    5aa0:	b.ne	5ad8 <d_growable_string_resize+0xb8>  // b.any
    5aa4:	ldr	x0, [sp, #24]
    5aa8:	ldr	x0, [x0]
    5aac:	bl	0 <free>
    5ab0:	ldr	x0, [sp, #24]
    5ab4:	str	xzr, [x0]
    5ab8:	ldr	x0, [sp, #24]
    5abc:	str	xzr, [x0, #8]
    5ac0:	ldr	x0, [sp, #24]
    5ac4:	str	xzr, [x0, #16]
    5ac8:	ldr	x0, [sp, #24]
    5acc:	mov	w1, #0x1                   	// #1
    5ad0:	str	w1, [x0, #24]
    5ad4:	b	5af8 <d_growable_string_resize+0xd8>
    5ad8:	ldr	x0, [sp, #24]
    5adc:	ldr	x1, [sp, #32]
    5ae0:	str	x1, [x0]
    5ae4:	ldr	x0, [sp, #24]
    5ae8:	ldr	x1, [sp, #40]
    5aec:	str	x1, [x0, #16]
    5af0:	b	5af8 <d_growable_string_resize+0xd8>
    5af4:	nop
    5af8:	ldp	x29, x30, [sp], #48
    5afc:	ret

0000000000005b00 <d_growable_string_append_buffer>:
    5b00:	stp	x29, x30, [sp, #-64]!
    5b04:	mov	x29, sp
    5b08:	str	x0, [sp, #40]
    5b0c:	str	x1, [sp, #32]
    5b10:	str	x2, [sp, #24]
    5b14:	ldr	x0, [sp, #40]
    5b18:	ldr	x1, [x0, #8]
    5b1c:	ldr	x0, [sp, #24]
    5b20:	add	x0, x1, x0
    5b24:	add	x0, x0, #0x1
    5b28:	str	x0, [sp, #56]
    5b2c:	ldr	x0, [sp, #40]
    5b30:	ldr	x0, [x0, #16]
    5b34:	ldr	x1, [sp, #56]
    5b38:	cmp	x1, x0
    5b3c:	b.ls	5b4c <d_growable_string_append_buffer+0x4c>  // b.plast
    5b40:	ldr	x1, [sp, #56]
    5b44:	ldr	x0, [sp, #40]
    5b48:	bl	5a20 <d_growable_string_resize>
    5b4c:	ldr	x0, [sp, #40]
    5b50:	ldr	w0, [x0, #24]
    5b54:	cmp	w0, #0x0
    5b58:	b.ne	5bb8 <d_growable_string_append_buffer+0xb8>  // b.any
    5b5c:	ldr	x0, [sp, #40]
    5b60:	ldr	x1, [x0]
    5b64:	ldr	x0, [sp, #40]
    5b68:	ldr	x0, [x0, #8]
    5b6c:	add	x0, x1, x0
    5b70:	ldr	x2, [sp, #24]
    5b74:	ldr	x1, [sp, #32]
    5b78:	bl	0 <memcpy>
    5b7c:	ldr	x0, [sp, #40]
    5b80:	ldr	x1, [x0]
    5b84:	ldr	x0, [sp, #40]
    5b88:	ldr	x2, [x0, #8]
    5b8c:	ldr	x0, [sp, #24]
    5b90:	add	x0, x2, x0
    5b94:	add	x0, x1, x0
    5b98:	strb	wzr, [x0]
    5b9c:	ldr	x0, [sp, #40]
    5ba0:	ldr	x1, [x0, #8]
    5ba4:	ldr	x0, [sp, #24]
    5ba8:	add	x1, x1, x0
    5bac:	ldr	x0, [sp, #40]
    5bb0:	str	x1, [x0, #8]
    5bb4:	b	5bbc <d_growable_string_append_buffer+0xbc>
    5bb8:	nop
    5bbc:	ldp	x29, x30, [sp], #64
    5bc0:	ret

0000000000005bc4 <d_growable_string_callback_adapter>:
    5bc4:	stp	x29, x30, [sp, #-64]!
    5bc8:	mov	x29, sp
    5bcc:	str	x0, [sp, #40]
    5bd0:	str	x1, [sp, #32]
    5bd4:	str	x2, [sp, #24]
    5bd8:	ldr	x0, [sp, #24]
    5bdc:	str	x0, [sp, #56]
    5be0:	ldr	x2, [sp, #32]
    5be4:	ldr	x1, [sp, #40]
    5be8:	ldr	x0, [sp, #56]
    5bec:	bl	5b00 <d_growable_string_append_buffer>
    5bf0:	nop
    5bf4:	ldp	x29, x30, [sp], #64
    5bf8:	ret

0000000000005bfc <d_count_templates_scopes>:
    5bfc:	stp	x29, x30, [sp, #-32]!
    5c00:	mov	x29, sp
    5c04:	str	x0, [sp, #24]
    5c08:	str	x1, [sp, #16]
    5c0c:	ldr	x0, [sp, #16]
    5c10:	cmp	x0, #0x0
    5c14:	b.eq	5d78 <d_count_templates_scopes+0x17c>  // b.none
    5c18:	ldr	x0, [sp, #16]
    5c1c:	ldr	w0, [x0]
    5c20:	cmp	w0, #0x50
    5c24:	b.hi	5d8c <d_count_templates_scopes+0x190>  // b.pmore
    5c28:	adrp	x1, 0 <is_fnqual_component_type>
    5c2c:	add	x1, x1, #0x0
    5c30:	ldr	w0, [x1, w0, uxtw #2]
    5c34:	adr	x1, 5c40 <d_count_templates_scopes+0x44>
    5c38:	add	x0, x1, w0, sxtw #2
    5c3c:	br	x0
    5c40:	ldr	x0, [sp, #24]
    5c44:	ldr	w0, [x0, #364]
    5c48:	add	w1, w0, #0x1
    5c4c:	ldr	x0, [sp, #24]
    5c50:	str	w1, [x0, #364]
    5c54:	b	5c84 <d_count_templates_scopes+0x88>
    5c58:	ldr	x0, [sp, #16]
    5c5c:	ldr	x0, [x0, #8]
    5c60:	ldr	w0, [x0]
    5c64:	cmp	w0, #0x5
    5c68:	b.ne	5c80 <d_count_templates_scopes+0x84>  // b.any
    5c6c:	ldr	x0, [sp, #24]
    5c70:	ldr	w0, [x0, #348]
    5c74:	add	w1, w0, #0x1
    5c78:	ldr	x0, [sp, #24]
    5c7c:	str	w1, [x0, #348]
    5c80:	nop
    5c84:	ldr	x0, [sp, #24]
    5c88:	ldr	w0, [x0, #308]
    5c8c:	cmp	w0, #0x800
    5c90:	b.gt	5d88 <d_count_templates_scopes+0x18c>
    5c94:	ldr	x0, [sp, #24]
    5c98:	ldr	w0, [x0, #308]
    5c9c:	add	w1, w0, #0x1
    5ca0:	ldr	x0, [sp, #24]
    5ca4:	str	w1, [x0, #308]
    5ca8:	ldr	x0, [sp, #16]
    5cac:	ldr	x0, [x0, #8]
    5cb0:	mov	x1, x0
    5cb4:	ldr	x0, [sp, #24]
    5cb8:	bl	5bfc <d_count_templates_scopes>
    5cbc:	ldr	x0, [sp, #16]
    5cc0:	ldr	x0, [x0, #16]
    5cc4:	mov	x1, x0
    5cc8:	ldr	x0, [sp, #24]
    5ccc:	bl	5bfc <d_count_templates_scopes>
    5cd0:	ldr	x0, [sp, #24]
    5cd4:	ldr	w0, [x0, #308]
    5cd8:	sub	w1, w0, #0x1
    5cdc:	ldr	x0, [sp, #24]
    5ce0:	str	w1, [x0, #308]
    5ce4:	b	5d8c <d_count_templates_scopes+0x190>
    5ce8:	ldr	x0, [sp, #16]
    5cec:	ldr	x0, [x0, #16]
    5cf0:	mov	x1, x0
    5cf4:	ldr	x0, [sp, #24]
    5cf8:	bl	5bfc <d_count_templates_scopes>
    5cfc:	b	5d8c <d_count_templates_scopes+0x190>
    5d00:	ldr	x0, [sp, #16]
    5d04:	ldr	x0, [x0, #16]
    5d08:	mov	x1, x0
    5d0c:	ldr	x0, [sp, #24]
    5d10:	bl	5bfc <d_count_templates_scopes>
    5d14:	b	5d8c <d_count_templates_scopes+0x190>
    5d18:	ldr	x0, [sp, #16]
    5d1c:	ldr	x0, [x0, #16]
    5d20:	mov	x1, x0
    5d24:	ldr	x0, [sp, #24]
    5d28:	bl	5bfc <d_count_templates_scopes>
    5d2c:	b	5d8c <d_count_templates_scopes+0x190>
    5d30:	ldr	x0, [sp, #16]
    5d34:	ldr	x0, [x0, #8]
    5d38:	mov	x1, x0
    5d3c:	ldr	x0, [sp, #24]
    5d40:	bl	5bfc <d_count_templates_scopes>
    5d44:	b	5d8c <d_count_templates_scopes+0x190>
    5d48:	ldr	x0, [sp, #16]
    5d4c:	ldr	x0, [x0, #8]
    5d50:	mov	x1, x0
    5d54:	ldr	x0, [sp, #24]
    5d58:	bl	5bfc <d_count_templates_scopes>
    5d5c:	b	5d8c <d_count_templates_scopes+0x190>
    5d60:	ldr	x0, [sp, #16]
    5d64:	ldr	x0, [x0, #8]
    5d68:	mov	x1, x0
    5d6c:	ldr	x0, [sp, #24]
    5d70:	bl	5bfc <d_count_templates_scopes>
    5d74:	b	5d8c <d_count_templates_scopes+0x190>
    5d78:	nop
    5d7c:	b	5d8c <d_count_templates_scopes+0x190>
    5d80:	nop
    5d84:	b	5d8c <d_count_templates_scopes+0x190>
    5d88:	nop
    5d8c:	ldp	x29, x30, [sp], #32
    5d90:	ret

0000000000005d94 <d_print_init>:
    5d94:	stp	x29, x30, [sp, #-48]!
    5d98:	mov	x29, sp
    5d9c:	str	x0, [sp, #40]
    5da0:	str	x1, [sp, #32]
    5da4:	str	x2, [sp, #24]
    5da8:	str	x3, [sp, #16]
    5dac:	ldr	x0, [sp, #40]
    5db0:	str	xzr, [x0, #256]
    5db4:	ldr	x0, [sp, #40]
    5db8:	strb	wzr, [x0, #264]
    5dbc:	ldr	x0, [sp, #40]
    5dc0:	str	xzr, [x0, #288]
    5dc4:	ldr	x0, [sp, #40]
    5dc8:	str	xzr, [x0, #296]
    5dcc:	ldr	x0, [sp, #40]
    5dd0:	str	wzr, [x0, #316]
    5dd4:	ldr	x0, [sp, #40]
    5dd8:	str	xzr, [x0, #320]
    5ddc:	ldr	x0, [sp, #40]
    5de0:	ldr	x1, [sp, #32]
    5de4:	str	x1, [x0, #272]
    5de8:	ldr	x0, [sp, #40]
    5dec:	ldr	x1, [sp, #24]
    5df0:	str	x1, [x0, #280]
    5df4:	ldr	x0, [sp, #40]
    5df8:	str	wzr, [x0, #304]
    5dfc:	ldr	x0, [sp, #40]
    5e00:	str	wzr, [x0, #308]
    5e04:	ldr	x0, [sp, #40]
    5e08:	str	wzr, [x0, #312]
    5e0c:	ldr	x0, [sp, #40]
    5e10:	str	xzr, [x0, #328]
    5e14:	ldr	x0, [sp, #40]
    5e18:	str	xzr, [x0, #336]
    5e1c:	ldr	x0, [sp, #40]
    5e20:	str	wzr, [x0, #344]
    5e24:	ldr	x0, [sp, #40]
    5e28:	str	wzr, [x0, #348]
    5e2c:	ldr	x0, [sp, #40]
    5e30:	str	xzr, [x0, #352]
    5e34:	ldr	x0, [sp, #40]
    5e38:	str	wzr, [x0, #360]
    5e3c:	ldr	x0, [sp, #40]
    5e40:	str	wzr, [x0, #364]
    5e44:	ldr	x1, [sp, #16]
    5e48:	ldr	x0, [sp, #40]
    5e4c:	bl	5bfc <d_count_templates_scopes>
    5e50:	ldr	x0, [sp, #40]
    5e54:	ldr	w0, [x0, #308]
    5e58:	cmp	w0, #0x7ff
    5e5c:	b.gt	5e68 <d_print_init+0xd4>
    5e60:	ldr	x0, [sp, #40]
    5e64:	str	wzr, [x0, #308]
    5e68:	ldr	x0, [sp, #40]
    5e6c:	ldr	w1, [x0, #364]
    5e70:	ldr	x0, [sp, #40]
    5e74:	ldr	w0, [x0, #348]
    5e78:	mul	w1, w1, w0
    5e7c:	ldr	x0, [sp, #40]
    5e80:	str	w1, [x0, #364]
    5e84:	ldr	x0, [sp, #40]
    5e88:	str	xzr, [x0, #368]
    5e8c:	nop
    5e90:	ldp	x29, x30, [sp], #48
    5e94:	ret

0000000000005e98 <d_print_error>:
    5e98:	sub	sp, sp, #0x10
    5e9c:	str	x0, [sp, #8]
    5ea0:	ldr	x0, [sp, #8]
    5ea4:	mov	w1, #0x1                   	// #1
    5ea8:	str	w1, [x0, #304]
    5eac:	nop
    5eb0:	add	sp, sp, #0x10
    5eb4:	ret

0000000000005eb8 <d_print_saw_error>:
    5eb8:	sub	sp, sp, #0x10
    5ebc:	str	x0, [sp, #8]
    5ec0:	ldr	x0, [sp, #8]
    5ec4:	ldr	w0, [x0, #304]
    5ec8:	cmp	w0, #0x0
    5ecc:	cset	w0, ne  // ne = any
    5ed0:	and	w0, w0, #0xff
    5ed4:	add	sp, sp, #0x10
    5ed8:	ret

0000000000005edc <d_print_flush>:
    5edc:	stp	x29, x30, [sp, #-32]!
    5ee0:	mov	x29, sp
    5ee4:	str	x0, [sp, #24]
    5ee8:	ldr	x0, [sp, #24]
    5eec:	ldr	x0, [x0, #256]
    5ef0:	ldr	x1, [sp, #24]
    5ef4:	strb	wzr, [x1, x0]
    5ef8:	ldr	x0, [sp, #24]
    5efc:	ldr	x3, [x0, #272]
    5f00:	ldr	x4, [sp, #24]
    5f04:	ldr	x0, [sp, #24]
    5f08:	ldr	x1, [x0, #256]
    5f0c:	ldr	x0, [sp, #24]
    5f10:	ldr	x0, [x0, #280]
    5f14:	mov	x2, x0
    5f18:	mov	x0, x4
    5f1c:	blr	x3
    5f20:	ldr	x0, [sp, #24]
    5f24:	str	xzr, [x0, #256]
    5f28:	ldr	x0, [sp, #24]
    5f2c:	ldr	x0, [x0, #320]
    5f30:	add	x1, x0, #0x1
    5f34:	ldr	x0, [sp, #24]
    5f38:	str	x1, [x0, #320]
    5f3c:	nop
    5f40:	ldp	x29, x30, [sp], #32
    5f44:	ret

0000000000005f48 <d_append_char>:
    5f48:	stp	x29, x30, [sp, #-32]!
    5f4c:	mov	x29, sp
    5f50:	str	x0, [sp, #24]
    5f54:	strb	w1, [sp, #23]
    5f58:	ldr	x0, [sp, #24]
    5f5c:	ldr	x0, [x0, #256]
    5f60:	cmp	x0, #0xff
    5f64:	b.ne	5f70 <d_append_char+0x28>  // b.any
    5f68:	ldr	x0, [sp, #24]
    5f6c:	bl	5edc <d_print_flush>
    5f70:	ldr	x0, [sp, #24]
    5f74:	ldr	x0, [x0, #256]
    5f78:	add	x2, x0, #0x1
    5f7c:	ldr	x1, [sp, #24]
    5f80:	str	x2, [x1, #256]
    5f84:	ldr	x1, [sp, #24]
    5f88:	ldrb	w2, [sp, #23]
    5f8c:	strb	w2, [x1, x0]
    5f90:	ldr	x0, [sp, #24]
    5f94:	ldrb	w1, [sp, #23]
    5f98:	strb	w1, [x0, #264]
    5f9c:	nop
    5fa0:	ldp	x29, x30, [sp], #32
    5fa4:	ret

0000000000005fa8 <d_append_buffer>:
    5fa8:	stp	x29, x30, [sp, #-64]!
    5fac:	mov	x29, sp
    5fb0:	str	x0, [sp, #40]
    5fb4:	str	x1, [sp, #32]
    5fb8:	str	x2, [sp, #24]
    5fbc:	str	xzr, [sp, #56]
    5fc0:	b	5fec <d_append_buffer+0x44>
    5fc4:	ldr	x1, [sp, #32]
    5fc8:	ldr	x0, [sp, #56]
    5fcc:	add	x0, x1, x0
    5fd0:	ldrb	w0, [x0]
    5fd4:	mov	w1, w0
    5fd8:	ldr	x0, [sp, #40]
    5fdc:	bl	5f48 <d_append_char>
    5fe0:	ldr	x0, [sp, #56]
    5fe4:	add	x0, x0, #0x1
    5fe8:	str	x0, [sp, #56]
    5fec:	ldr	x1, [sp, #56]
    5ff0:	ldr	x0, [sp, #24]
    5ff4:	cmp	x1, x0
    5ff8:	b.cc	5fc4 <d_append_buffer+0x1c>  // b.lo, b.ul, b.last
    5ffc:	nop
    6000:	nop
    6004:	ldp	x29, x30, [sp], #64
    6008:	ret

000000000000600c <d_append_string>:
    600c:	stp	x29, x30, [sp, #-32]!
    6010:	mov	x29, sp
    6014:	str	x0, [sp, #24]
    6018:	str	x1, [sp, #16]
    601c:	ldr	x0, [sp, #16]
    6020:	bl	0 <strlen>
    6024:	mov	x2, x0
    6028:	ldr	x1, [sp, #16]
    602c:	ldr	x0, [sp, #24]
    6030:	bl	5fa8 <d_append_buffer>
    6034:	nop
    6038:	ldp	x29, x30, [sp], #32
    603c:	ret

0000000000006040 <d_append_num>:
    6040:	stp	x29, x30, [sp, #-64]!
    6044:	mov	x29, sp
    6048:	str	x0, [sp, #24]
    604c:	str	w1, [sp, #20]
    6050:	add	x3, sp, #0x20
    6054:	ldr	w2, [sp, #20]
    6058:	adrp	x0, 0 <is_fnqual_component_type>
    605c:	add	x1, x0, #0x0
    6060:	mov	x0, x3
    6064:	bl	0 <sprintf>
    6068:	add	x0, sp, #0x20
    606c:	mov	x1, x0
    6070:	ldr	x0, [sp, #24]
    6074:	bl	600c <d_append_string>
    6078:	nop
    607c:	ldp	x29, x30, [sp], #64
    6080:	ret

0000000000006084 <d_last_char>:
    6084:	sub	sp, sp, #0x10
    6088:	str	x0, [sp, #8]
    608c:	ldr	x0, [sp, #8]
    6090:	ldrb	w0, [x0, #264]
    6094:	add	sp, sp, #0x10
    6098:	ret

000000000000609c <d_print_callback>:
    609c:	sub	sp, sp, #0x260
    60a0:	stp	x29, x30, [sp]
    60a4:	mov	x29, sp
    60a8:	stp	x19, x20, [sp, #16]
    60ac:	stp	x21, x22, [sp, #32]
    60b0:	stp	x23, x24, [sp, #48]
    60b4:	stp	x25, x26, [sp, #64]
    60b8:	str	x27, [sp, #80]
    60bc:	str	w0, [x29, #188]
    60c0:	str	x1, [x29, #176]
    60c4:	str	x2, [x29, #168]
    60c8:	str	x3, [x29, #160]
    60cc:	add	x0, x29, #0xc8
    60d0:	ldr	x3, [x29, #176]
    60d4:	ldr	x2, [x29, #160]
    60d8:	ldr	x1, [x29, #168]
    60dc:	bl	5d94 <d_print_init>
    60e0:	mov	x0, sp
    60e4:	mov	x19, x0
    60e8:	ldr	w0, [x29, #548]
    60ec:	mov	w1, #0x1                   	// #1
    60f0:	cmp	w0, #0x0
    60f4:	csel	w0, w0, w1, gt
    60f8:	sxtw	x1, w0
    60fc:	sub	x1, x1, #0x1
    6100:	str	x1, [x29, #600]
    6104:	sxtw	x1, w0
    6108:	str	x1, [x29, #144]
    610c:	str	xzr, [x29, #152]
    6110:	ldp	x2, x3, [x29, #144]
    6114:	mov	x1, x2
    6118:	lsr	x1, x1, #57
    611c:	mov	x4, x3
    6120:	lsl	x27, x4, #7
    6124:	orr	x27, x1, x27
    6128:	mov	x1, x2
    612c:	lsl	x26, x1, #7
    6130:	sxtw	x1, w0
    6134:	str	x1, [x29, #128]
    6138:	str	xzr, [x29, #136]
    613c:	ldp	x2, x3, [x29, #128]
    6140:	mov	x1, x2
    6144:	lsr	x1, x1, #57
    6148:	mov	x4, x3
    614c:	lsl	x25, x4, #7
    6150:	orr	x25, x1, x25
    6154:	mov	x1, x2
    6158:	lsl	x24, x1, #7
    615c:	sxtw	x0, w0
    6160:	lsl	x0, x0, #4
    6164:	add	x0, x0, #0xf
    6168:	lsr	x0, x0, #4
    616c:	lsl	x0, x0, #4
    6170:	sub	sp, sp, x0
    6174:	mov	x0, sp
    6178:	add	x0, x0, #0x7
    617c:	lsr	x0, x0, #3
    6180:	lsl	x0, x0, #3
    6184:	str	x0, [x29, #592]
    6188:	ldr	w0, [x29, #564]
    618c:	mov	w1, #0x1                   	// #1
    6190:	cmp	w0, #0x0
    6194:	csel	w0, w0, w1, gt
    6198:	sxtw	x1, w0
    619c:	sub	x1, x1, #0x1
    61a0:	str	x1, [x29, #584]
    61a4:	sxtw	x1, w0
    61a8:	str	x1, [x29, #112]
    61ac:	str	xzr, [x29, #120]
    61b0:	ldp	x2, x3, [x29, #112]
    61b4:	mov	x1, x2
    61b8:	lsr	x1, x1, #57
    61bc:	mov	x4, x3
    61c0:	lsl	x23, x4, #7
    61c4:	orr	x23, x1, x23
    61c8:	mov	x1, x2
    61cc:	lsl	x22, x1, #7
    61d0:	sxtw	x1, w0
    61d4:	str	x1, [x29, #96]
    61d8:	str	xzr, [x29, #104]
    61dc:	ldp	x2, x3, [x29, #96]
    61e0:	mov	x1, x2
    61e4:	lsr	x1, x1, #57
    61e8:	mov	x4, x3
    61ec:	lsl	x21, x4, #7
    61f0:	orr	x21, x1, x21
    61f4:	mov	x1, x2
    61f8:	lsl	x20, x1, #7
    61fc:	sxtw	x0, w0
    6200:	lsl	x0, x0, #4
    6204:	add	x0, x0, #0xf
    6208:	lsr	x0, x0, #4
    620c:	lsl	x0, x0, #4
    6210:	sub	sp, sp, x0
    6214:	mov	x0, sp
    6218:	add	x0, x0, #0x7
    621c:	lsr	x0, x0, #3
    6220:	lsl	x0, x0, #3
    6224:	str	x0, [x29, #576]
    6228:	ldr	x0, [x29, #592]
    622c:	str	x0, [x29, #536]
    6230:	ldr	x0, [x29, #576]
    6234:	str	x0, [x29, #552]
    6238:	add	x0, x29, #0xc8
    623c:	ldr	x2, [x29, #176]
    6240:	ldr	w1, [x29, #188]
    6244:	bl	8d78 <d_print_comp>
    6248:	mov	sp, x19
    624c:	add	x0, x29, #0xc8
    6250:	bl	5edc <d_print_flush>
    6254:	add	x0, x29, #0xc8
    6258:	bl	5eb8 <d_print_saw_error>
    625c:	cmp	w0, #0x0
    6260:	cset	w0, eq  // eq = none
    6264:	and	w0, w0, #0xff
    6268:	mov	sp, x29
    626c:	ldp	x19, x20, [sp, #16]
    6270:	ldp	x21, x22, [sp, #32]
    6274:	ldp	x23, x24, [sp, #48]
    6278:	ldp	x25, x26, [sp, #64]
    627c:	ldr	x27, [sp, #80]
    6280:	ldp	x29, x30, [sp]
    6284:	add	sp, sp, #0x260
    6288:	ret

000000000000628c <d_print>:
    628c:	stp	x29, x30, [sp, #-80]!
    6290:	mov	x29, sp
    6294:	str	w0, [sp, #44]
    6298:	str	x1, [sp, #32]
    629c:	str	w2, [sp, #40]
    62a0:	str	x3, [sp, #24]
    62a4:	ldrsw	x1, [sp, #40]
    62a8:	add	x0, sp, #0x30
    62ac:	bl	59cc <d_growable_string_init>
    62b0:	add	x0, sp, #0x30
    62b4:	mov	x3, x0
    62b8:	adrp	x0, 0 <is_fnqual_component_type>
    62bc:	add	x2, x0, #0x0
    62c0:	ldr	x1, [sp, #32]
    62c4:	ldr	w0, [sp, #44]
    62c8:	bl	609c <d_print_callback>
    62cc:	cmp	w0, #0x0
    62d0:	b.ne	62ec <d_print+0x60>  // b.any
    62d4:	ldr	x0, [sp, #48]
    62d8:	bl	0 <free>
    62dc:	ldr	x0, [sp, #24]
    62e0:	str	xzr, [x0]
    62e4:	mov	x0, #0x0                   	// #0
    62e8:	b	6310 <d_print+0x84>
    62ec:	ldr	w0, [sp, #72]
    62f0:	cmp	w0, #0x0
    62f4:	b.ne	6300 <d_print+0x74>  // b.any
    62f8:	ldr	x0, [sp, #64]
    62fc:	b	6304 <d_print+0x78>
    6300:	mov	x0, #0x1                   	// #1
    6304:	ldr	x1, [sp, #24]
    6308:	str	x0, [x1]
    630c:	ldr	x0, [sp, #48]
    6310:	ldp	x29, x30, [sp], #80
    6314:	ret

0000000000006318 <d_index_template_argument>:
    6318:	sub	sp, sp, #0x20
    631c:	str	x0, [sp, #8]
    6320:	str	w1, [sp, #4]
    6324:	ldr	w0, [sp, #4]
    6328:	cmp	w0, #0x0
    632c:	b.ge	6338 <d_index_template_argument+0x20>  // b.tcont
    6330:	ldr	x0, [sp, #8]
    6334:	b	63bc <d_index_template_argument+0xa4>
    6338:	ldr	x0, [sp, #8]
    633c:	str	x0, [sp, #24]
    6340:	b	6380 <d_index_template_argument+0x68>
    6344:	ldr	x0, [sp, #24]
    6348:	ldr	w0, [x0]
    634c:	cmp	w0, #0x2f
    6350:	b.eq	635c <d_index_template_argument+0x44>  // b.none
    6354:	mov	x0, #0x0                   	// #0
    6358:	b	63bc <d_index_template_argument+0xa4>
    635c:	ldr	w0, [sp, #4]
    6360:	cmp	w0, #0x0
    6364:	b.le	6390 <d_index_template_argument+0x78>
    6368:	ldr	w0, [sp, #4]
    636c:	sub	w0, w0, #0x1
    6370:	str	w0, [sp, #4]
    6374:	ldr	x0, [sp, #24]
    6378:	ldr	x0, [x0, #16]
    637c:	str	x0, [sp, #24]
    6380:	ldr	x0, [sp, #24]
    6384:	cmp	x0, #0x0
    6388:	b.ne	6344 <d_index_template_argument+0x2c>  // b.any
    638c:	b	6394 <d_index_template_argument+0x7c>
    6390:	nop
    6394:	ldr	w0, [sp, #4]
    6398:	cmp	w0, #0x0
    639c:	b.ne	63ac <d_index_template_argument+0x94>  // b.any
    63a0:	ldr	x0, [sp, #24]
    63a4:	cmp	x0, #0x0
    63a8:	b.ne	63b4 <d_index_template_argument+0x9c>  // b.any
    63ac:	mov	x0, #0x0                   	// #0
    63b0:	b	63bc <d_index_template_argument+0xa4>
    63b4:	ldr	x0, [sp, #24]
    63b8:	ldr	x0, [x0, #8]
    63bc:	add	sp, sp, #0x20
    63c0:	ret

00000000000063c4 <d_lookup_template_argument>:
    63c4:	stp	x29, x30, [sp, #-32]!
    63c8:	mov	x29, sp
    63cc:	str	x0, [sp, #24]
    63d0:	str	x1, [sp, #16]
    63d4:	ldr	x0, [sp, #24]
    63d8:	ldr	x0, [x0, #288]
    63dc:	cmp	x0, #0x0
    63e0:	b.ne	63f4 <d_lookup_template_argument+0x30>  // b.any
    63e4:	ldr	x0, [sp, #24]
    63e8:	bl	5e98 <d_print_error>
    63ec:	mov	x0, #0x0                   	// #0
    63f0:	b	6418 <d_lookup_template_argument+0x54>
    63f4:	ldr	x0, [sp, #24]
    63f8:	ldr	x0, [x0, #288]
    63fc:	ldr	x0, [x0, #8]
    6400:	ldr	x2, [x0, #16]
    6404:	ldr	x0, [sp, #16]
    6408:	ldr	x0, [x0, #8]
    640c:	mov	w1, w0
    6410:	mov	x0, x2
    6414:	bl	6318 <d_index_template_argument>
    6418:	ldp	x29, x30, [sp], #32
    641c:	ret

0000000000006420 <d_find_pack>:
    6420:	stp	x29, x30, [sp, #-48]!
    6424:	mov	x29, sp
    6428:	str	x0, [sp, #24]
    642c:	str	x1, [sp, #16]
    6430:	ldr	x0, [sp, #16]
    6434:	cmp	x0, #0x0
    6438:	b.ne	6444 <d_find_pack+0x24>  // b.any
    643c:	mov	x0, #0x0                   	// #0
    6440:	b	65dc <d_find_pack+0x1bc>
    6444:	ldr	x0, [sp, #16]
    6448:	ldr	w0, [x0]
    644c:	cmp	w0, #0x4c
    6450:	b.hi	659c <d_find_pack+0x17c>  // b.pmore
    6454:	cmp	w0, #0x18
    6458:	b.cs	64a0 <d_find_pack+0x80>  // b.hs, b.nlast
    645c:	cmp	w0, #0x8
    6460:	b.eq	6584 <d_find_pack+0x164>  // b.none
    6464:	cmp	w0, #0x8
    6468:	b.hi	659c <d_find_pack+0x17c>  // b.pmore
    646c:	cmp	w0, #0x7
    6470:	b.eq	656c <d_find_pack+0x14c>  // b.none
    6474:	cmp	w0, #0x7
    6478:	b.hi	659c <d_find_pack+0x17c>  // b.pmore
    647c:	cmp	w0, #0x6
    6480:	b.eq	654c <d_find_pack+0x12c>  // b.none
    6484:	cmp	w0, #0x6
    6488:	b.hi	659c <d_find_pack+0x17c>  // b.pmore
    648c:	cmp	w0, #0x0
    6490:	b.eq	654c <d_find_pack+0x12c>  // b.none
    6494:	cmp	w0, #0x5
    6498:	b.eq	6508 <d_find_pack+0xe8>  // b.none
    649c:	b	659c <d_find_pack+0x17c>
    64a0:	sub	w0, w0, #0x18
    64a4:	mov	x1, #0x1                   	// #1
    64a8:	lsl	x0, x1, x0
    64ac:	mov	x1, #0x8001                	// #32769
    64b0:	movk	x1, #0x410, lsl #16
    64b4:	movk	x1, #0xc600, lsl #32
    64b8:	movk	x1, #0x11, lsl #48
    64bc:	and	x1, x0, x1
    64c0:	cmp	x1, #0x0
    64c4:	cset	w1, ne  // ne = any
    64c8:	and	w1, w1, #0xff
    64cc:	cmp	w1, #0x0
    64d0:	b.ne	654c <d_find_pack+0x12c>  // b.any
    64d4:	and	x1, x0, #0x8000000
    64d8:	cmp	x1, #0x0
    64dc:	cset	w1, ne  // ne = any
    64e0:	and	w1, w1, #0xff
    64e4:	cmp	w1, #0x0
    64e8:	b.ne	6554 <d_find_pack+0x134>  // b.any
    64ec:	and	x0, x0, #0x8000000000000
    64f0:	cmp	x0, #0x0
    64f4:	cset	w0, ne  // ne = any
    64f8:	and	w0, w0, #0xff
    64fc:	cmp	w0, #0x0
    6500:	b.ne	6544 <d_find_pack+0x124>  // b.any
    6504:	b	659c <d_find_pack+0x17c>
    6508:	ldr	x1, [sp, #16]
    650c:	ldr	x0, [sp, #24]
    6510:	bl	63c4 <d_lookup_template_argument>
    6514:	str	x0, [sp, #40]
    6518:	ldr	x0, [sp, #40]
    651c:	cmp	x0, #0x0
    6520:	b.eq	653c <d_find_pack+0x11c>  // b.none
    6524:	ldr	x0, [sp, #40]
    6528:	ldr	w0, [x0]
    652c:	cmp	w0, #0x2f
    6530:	b.ne	653c <d_find_pack+0x11c>  // b.any
    6534:	ldr	x0, [sp, #40]
    6538:	b	65dc <d_find_pack+0x1bc>
    653c:	mov	x0, #0x0                   	// #0
    6540:	b	65dc <d_find_pack+0x1bc>
    6544:	mov	x0, #0x0                   	// #0
    6548:	b	65dc <d_find_pack+0x1bc>
    654c:	mov	x0, #0x0                   	// #0
    6550:	b	65dc <d_find_pack+0x1bc>
    6554:	ldr	x0, [sp, #16]
    6558:	ldr	x0, [x0, #16]
    655c:	mov	x1, x0
    6560:	ldr	x0, [sp, #24]
    6564:	bl	6420 <d_find_pack>
    6568:	b	65dc <d_find_pack+0x1bc>
    656c:	ldr	x0, [sp, #16]
    6570:	ldr	x0, [x0, #16]
    6574:	mov	x1, x0
    6578:	ldr	x0, [sp, #24]
    657c:	bl	6420 <d_find_pack>
    6580:	b	65dc <d_find_pack+0x1bc>
    6584:	ldr	x0, [sp, #16]
    6588:	ldr	x0, [x0, #16]
    658c:	mov	x1, x0
    6590:	ldr	x0, [sp, #24]
    6594:	bl	6420 <d_find_pack>
    6598:	b	65dc <d_find_pack+0x1bc>
    659c:	ldr	x0, [sp, #16]
    65a0:	ldr	x0, [x0, #8]
    65a4:	mov	x1, x0
    65a8:	ldr	x0, [sp, #24]
    65ac:	bl	6420 <d_find_pack>
    65b0:	str	x0, [sp, #40]
    65b4:	ldr	x0, [sp, #40]
    65b8:	cmp	x0, #0x0
    65bc:	b.eq	65c8 <d_find_pack+0x1a8>  // b.none
    65c0:	ldr	x0, [sp, #40]
    65c4:	b	65dc <d_find_pack+0x1bc>
    65c8:	ldr	x0, [sp, #16]
    65cc:	ldr	x0, [x0, #16]
    65d0:	mov	x1, x0
    65d4:	ldr	x0, [sp, #24]
    65d8:	bl	6420 <d_find_pack>
    65dc:	ldp	x29, x30, [sp], #48
    65e0:	ret

00000000000065e4 <d_pack_length>:
    65e4:	sub	sp, sp, #0x20
    65e8:	str	x0, [sp, #8]
    65ec:	str	wzr, [sp, #28]
    65f0:	b	660c <d_pack_length+0x28>
    65f4:	ldr	w0, [sp, #28]
    65f8:	add	w0, w0, #0x1
    65fc:	str	w0, [sp, #28]
    6600:	ldr	x0, [sp, #8]
    6604:	ldr	x0, [x0, #16]
    6608:	str	x0, [sp, #8]
    660c:	ldr	x0, [sp, #8]
    6610:	cmp	x0, #0x0
    6614:	b.eq	6638 <d_pack_length+0x54>  // b.none
    6618:	ldr	x0, [sp, #8]
    661c:	ldr	w0, [x0]
    6620:	cmp	w0, #0x2f
    6624:	b.ne	6638 <d_pack_length+0x54>  // b.any
    6628:	ldr	x0, [sp, #8]
    662c:	ldr	x0, [x0, #8]
    6630:	cmp	x0, #0x0
    6634:	b.ne	65f4 <d_pack_length+0x10>  // b.any
    6638:	ldr	w0, [sp, #28]
    663c:	add	sp, sp, #0x20
    6640:	ret

0000000000006644 <d_args_length>:
    6644:	stp	x29, x30, [sp, #-64]!
    6648:	mov	x29, sp
    664c:	str	x0, [sp, #24]
    6650:	str	x1, [sp, #16]
    6654:	str	wzr, [sp, #60]
    6658:	b	66d0 <d_args_length+0x8c>
    665c:	ldr	x0, [sp, #16]
    6660:	ldr	x0, [x0, #8]
    6664:	str	x0, [sp, #48]
    6668:	ldr	x0, [sp, #48]
    666c:	cmp	x0, #0x0
    6670:	b.eq	66f0 <d_args_length+0xac>  // b.none
    6674:	ldr	x0, [sp, #48]
    6678:	ldr	w0, [x0]
    667c:	cmp	w0, #0x4b
    6680:	b.ne	66b8 <d_args_length+0x74>  // b.any
    6684:	ldr	x0, [sp, #48]
    6688:	ldr	x0, [x0, #8]
    668c:	mov	x1, x0
    6690:	ldr	x0, [sp, #24]
    6694:	bl	6420 <d_find_pack>
    6698:	str	x0, [sp, #40]
    669c:	ldr	x0, [sp, #40]
    66a0:	bl	65e4 <d_pack_length>
    66a4:	mov	w1, w0
    66a8:	ldr	w0, [sp, #60]
    66ac:	add	w0, w0, w1
    66b0:	str	w0, [sp, #60]
    66b4:	b	66c4 <d_args_length+0x80>
    66b8:	ldr	w0, [sp, #60]
    66bc:	add	w0, w0, #0x1
    66c0:	str	w0, [sp, #60]
    66c4:	ldr	x0, [sp, #16]
    66c8:	ldr	x0, [x0, #16]
    66cc:	str	x0, [sp, #16]
    66d0:	ldr	x0, [sp, #16]
    66d4:	cmp	x0, #0x0
    66d8:	b.eq	66f4 <d_args_length+0xb0>  // b.none
    66dc:	ldr	x0, [sp, #16]
    66e0:	ldr	w0, [x0]
    66e4:	cmp	w0, #0x2f
    66e8:	b.eq	665c <d_args_length+0x18>  // b.none
    66ec:	b	66f4 <d_args_length+0xb0>
    66f0:	nop
    66f4:	ldr	w0, [sp, #60]
    66f8:	ldp	x29, x30, [sp], #64
    66fc:	ret

0000000000006700 <d_print_subexpr>:
    6700:	stp	x29, x30, [sp, #-64]!
    6704:	mov	x29, sp
    6708:	str	x0, [sp, #40]
    670c:	str	w1, [sp, #36]
    6710:	str	x2, [sp, #24]
    6714:	str	wzr, [sp, #60]
    6718:	ldr	x0, [sp, #24]
    671c:	ldr	w0, [x0]
    6720:	cmp	w0, #0x0
    6724:	b.eq	6758 <d_print_subexpr+0x58>  // b.none
    6728:	ldr	x0, [sp, #24]
    672c:	ldr	w0, [x0]
    6730:	cmp	w0, #0x1
    6734:	b.eq	6758 <d_print_subexpr+0x58>  // b.none
    6738:	ldr	x0, [sp, #24]
    673c:	ldr	w0, [x0]
    6740:	cmp	w0, #0x31
    6744:	b.eq	6758 <d_print_subexpr+0x58>  // b.none
    6748:	ldr	x0, [sp, #24]
    674c:	ldr	w0, [x0]
    6750:	cmp	w0, #0x6
    6754:	b.ne	6760 <d_print_subexpr+0x60>  // b.any
    6758:	mov	w0, #0x1                   	// #1
    675c:	str	w0, [sp, #60]
    6760:	ldr	w0, [sp, #60]
    6764:	cmp	w0, #0x0
    6768:	b.ne	6778 <d_print_subexpr+0x78>  // b.any
    676c:	mov	w1, #0x28                  	// #40
    6770:	ldr	x0, [sp, #40]
    6774:	bl	5f48 <d_append_char>
    6778:	ldr	x2, [sp, #24]
    677c:	ldr	w1, [sp, #36]
    6780:	ldr	x0, [sp, #40]
    6784:	bl	8d78 <d_print_comp>
    6788:	ldr	w0, [sp, #60]
    678c:	cmp	w0, #0x0
    6790:	b.ne	67a0 <d_print_subexpr+0xa0>  // b.any
    6794:	mov	w1, #0x29                  	// #41
    6798:	ldr	x0, [sp, #40]
    679c:	bl	5f48 <d_append_char>
    67a0:	nop
    67a4:	ldp	x29, x30, [sp], #64
    67a8:	ret

00000000000067ac <d_save_scope>:
    67ac:	stp	x29, x30, [sp, #-64]!
    67b0:	mov	x29, sp
    67b4:	str	x0, [sp, #24]
    67b8:	str	x1, [sp, #16]
    67bc:	ldr	x0, [sp, #24]
    67c0:	ldr	w1, [x0, #344]
    67c4:	ldr	x0, [sp, #24]
    67c8:	ldr	w0, [x0, #348]
    67cc:	cmp	w1, w0
    67d0:	b.lt	67e0 <d_save_scope+0x34>  // b.tstop
    67d4:	ldr	x0, [sp, #24]
    67d8:	bl	5e98 <d_print_error>
    67dc:	b	68d8 <d_save_scope+0x12c>
    67e0:	ldr	x0, [sp, #24]
    67e4:	ldr	x1, [x0, #336]
    67e8:	ldr	x0, [sp, #24]
    67ec:	ldr	w0, [x0, #344]
    67f0:	sxtw	x0, w0
    67f4:	lsl	x0, x0, #4
    67f8:	add	x0, x1, x0
    67fc:	str	x0, [sp, #40]
    6800:	ldr	x0, [sp, #24]
    6804:	ldr	w0, [x0, #344]
    6808:	add	w1, w0, #0x1
    680c:	ldr	x0, [sp, #24]
    6810:	str	w1, [x0, #344]
    6814:	ldr	x0, [sp, #40]
    6818:	ldr	x1, [sp, #16]
    681c:	str	x1, [x0]
    6820:	ldr	x0, [sp, #40]
    6824:	add	x0, x0, #0x8
    6828:	str	x0, [sp, #48]
    682c:	ldr	x0, [sp, #24]
    6830:	ldr	x0, [x0, #288]
    6834:	str	x0, [sp, #56]
    6838:	b	68c4 <d_save_scope+0x118>
    683c:	ldr	x0, [sp, #24]
    6840:	ldr	w1, [x0, #360]
    6844:	ldr	x0, [sp, #24]
    6848:	ldr	w0, [x0, #364]
    684c:	cmp	w1, w0
    6850:	b.lt	6860 <d_save_scope+0xb4>  // b.tstop
    6854:	ldr	x0, [sp, #24]
    6858:	bl	5e98 <d_print_error>
    685c:	b	68d8 <d_save_scope+0x12c>
    6860:	ldr	x0, [sp, #24]
    6864:	ldr	x1, [x0, #352]
    6868:	ldr	x0, [sp, #24]
    686c:	ldr	w0, [x0, #360]
    6870:	sxtw	x0, w0
    6874:	lsl	x0, x0, #4
    6878:	add	x0, x1, x0
    687c:	str	x0, [sp, #32]
    6880:	ldr	x0, [sp, #24]
    6884:	ldr	w0, [x0, #360]
    6888:	add	w1, w0, #0x1
    688c:	ldr	x0, [sp, #24]
    6890:	str	w1, [x0, #360]
    6894:	ldr	x0, [sp, #56]
    6898:	ldr	x1, [x0, #8]
    689c:	ldr	x0, [sp, #32]
    68a0:	str	x1, [x0, #8]
    68a4:	ldr	x0, [sp, #48]
    68a8:	ldr	x1, [sp, #32]
    68ac:	str	x1, [x0]
    68b0:	ldr	x0, [sp, #32]
    68b4:	str	x0, [sp, #48]
    68b8:	ldr	x0, [sp, #56]
    68bc:	ldr	x0, [x0]
    68c0:	str	x0, [sp, #56]
    68c4:	ldr	x0, [sp, #56]
    68c8:	cmp	x0, #0x0
    68cc:	b.ne	683c <d_save_scope+0x90>  // b.any
    68d0:	ldr	x0, [sp, #48]
    68d4:	str	xzr, [x0]
    68d8:	ldp	x29, x30, [sp], #64
    68dc:	ret

00000000000068e0 <d_get_saved_scope>:
    68e0:	sub	sp, sp, #0x20
    68e4:	str	x0, [sp, #8]
    68e8:	str	x1, [sp]
    68ec:	str	wzr, [sp, #28]
    68f0:	b	693c <d_get_saved_scope+0x5c>
    68f4:	ldr	x0, [sp, #8]
    68f8:	ldr	x1, [x0, #336]
    68fc:	ldrsw	x0, [sp, #28]
    6900:	lsl	x0, x0, #4
    6904:	add	x0, x1, x0
    6908:	ldr	x0, [x0]
    690c:	ldr	x1, [sp]
    6910:	cmp	x1, x0
    6914:	b.ne	6930 <d_get_saved_scope+0x50>  // b.any
    6918:	ldr	x0, [sp, #8]
    691c:	ldr	x1, [x0, #336]
    6920:	ldrsw	x0, [sp, #28]
    6924:	lsl	x0, x0, #4
    6928:	add	x0, x1, x0
    692c:	b	6954 <d_get_saved_scope+0x74>
    6930:	ldr	w0, [sp, #28]
    6934:	add	w0, w0, #0x1
    6938:	str	w0, [sp, #28]
    693c:	ldr	x0, [sp, #8]
    6940:	ldr	w0, [x0, #344]
    6944:	ldr	w1, [sp, #28]
    6948:	cmp	w1, w0
    694c:	b.lt	68f4 <d_get_saved_scope+0x14>  // b.tstop
    6950:	mov	x0, #0x0                   	// #0
    6954:	add	sp, sp, #0x20
    6958:	ret

000000000000695c <d_maybe_print_fold_expression>:
    695c:	stp	x29, x30, [sp, #-96]!
    6960:	mov	x29, sp
    6964:	str	x0, [sp, #40]
    6968:	str	w1, [sp, #36]
    696c:	str	x2, [sp, #24]
    6970:	ldr	x0, [sp, #24]
    6974:	ldr	x0, [x0, #8]
    6978:	ldr	x0, [x0, #8]
    697c:	ldr	x0, [x0]
    6980:	str	x0, [sp, #72]
    6984:	ldr	x0, [sp, #72]
    6988:	ldrb	w0, [x0]
    698c:	cmp	w0, #0x66
    6990:	b.eq	699c <d_maybe_print_fold_expression+0x40>  // b.none
    6994:	mov	w0, #0x0                   	// #0
    6998:	b	6b40 <d_maybe_print_fold_expression+0x1e4>
    699c:	ldr	x0, [sp, #24]
    69a0:	ldr	x0, [x0, #16]
    69a4:	str	x0, [sp, #64]
    69a8:	ldr	x0, [sp, #64]
    69ac:	ldr	x0, [x0, #8]
    69b0:	str	x0, [sp, #56]
    69b4:	ldr	x0, [sp, #64]
    69b8:	ldr	x0, [x0, #16]
    69bc:	str	x0, [sp, #88]
    69c0:	str	xzr, [sp, #80]
    69c4:	ldr	x0, [sp, #88]
    69c8:	ldr	w0, [x0]
    69cc:	cmp	w0, #0x3c
    69d0:	b.ne	69ec <d_maybe_print_fold_expression+0x90>  // b.any
    69d4:	ldr	x0, [sp, #88]
    69d8:	ldr	x0, [x0, #16]
    69dc:	str	x0, [sp, #80]
    69e0:	ldr	x0, [sp, #88]
    69e4:	ldr	x0, [x0, #8]
    69e8:	str	x0, [sp, #88]
    69ec:	ldr	x0, [sp, #40]
    69f0:	ldr	w0, [x0, #316]
    69f4:	str	w0, [sp, #52]
    69f8:	ldr	x0, [sp, #40]
    69fc:	mov	w1, #0xffffffff            	// #-1
    6a00:	str	w1, [x0, #316]
    6a04:	ldr	x0, [sp, #72]
    6a08:	add	x0, x0, #0x1
    6a0c:	ldrb	w0, [x0]
    6a10:	cmp	w0, #0x72
    6a14:	b.eq	6a84 <d_maybe_print_fold_expression+0x128>  // b.none
    6a18:	cmp	w0, #0x72
    6a1c:	b.gt	6b30 <d_maybe_print_fold_expression+0x1d4>
    6a20:	cmp	w0, #0x6c
    6a24:	b.eq	6a44 <d_maybe_print_fold_expression+0xe8>  // b.none
    6a28:	cmp	w0, #0x6c
    6a2c:	b.gt	6b30 <d_maybe_print_fold_expression+0x1d4>
    6a30:	cmp	w0, #0x4c
    6a34:	b.eq	6ac4 <d_maybe_print_fold_expression+0x168>  // b.none
    6a38:	cmp	w0, #0x52
    6a3c:	b.eq	6ac4 <d_maybe_print_fold_expression+0x168>  // b.none
    6a40:	b	6b30 <d_maybe_print_fold_expression+0x1d4>
    6a44:	adrp	x0, 0 <is_fnqual_component_type>
    6a48:	add	x1, x0, #0x0
    6a4c:	ldr	x0, [sp, #40]
    6a50:	bl	600c <d_append_string>
    6a54:	ldr	x2, [sp, #56]
    6a58:	ldr	w1, [sp, #36]
    6a5c:	ldr	x0, [sp, #40]
    6a60:	bl	9934 <d_print_expr_op>
    6a64:	ldr	x2, [sp, #88]
    6a68:	ldr	w1, [sp, #36]
    6a6c:	ldr	x0, [sp, #40]
    6a70:	bl	6700 <d_print_subexpr>
    6a74:	mov	w1, #0x29                  	// #41
    6a78:	ldr	x0, [sp, #40]
    6a7c:	bl	5f48 <d_append_char>
    6a80:	b	6b30 <d_maybe_print_fold_expression+0x1d4>
    6a84:	mov	w1, #0x28                  	// #40
    6a88:	ldr	x0, [sp, #40]
    6a8c:	bl	5f48 <d_append_char>
    6a90:	ldr	x2, [sp, #88]
    6a94:	ldr	w1, [sp, #36]
    6a98:	ldr	x0, [sp, #40]
    6a9c:	bl	6700 <d_print_subexpr>
    6aa0:	ldr	x2, [sp, #56]
    6aa4:	ldr	w1, [sp, #36]
    6aa8:	ldr	x0, [sp, #40]
    6aac:	bl	9934 <d_print_expr_op>
    6ab0:	adrp	x0, 0 <is_fnqual_component_type>
    6ab4:	add	x1, x0, #0x0
    6ab8:	ldr	x0, [sp, #40]
    6abc:	bl	600c <d_append_string>
    6ac0:	b	6b30 <d_maybe_print_fold_expression+0x1d4>
    6ac4:	mov	w1, #0x28                  	// #40
    6ac8:	ldr	x0, [sp, #40]
    6acc:	bl	5f48 <d_append_char>
    6ad0:	ldr	x2, [sp, #88]
    6ad4:	ldr	w1, [sp, #36]
    6ad8:	ldr	x0, [sp, #40]
    6adc:	bl	6700 <d_print_subexpr>
    6ae0:	ldr	x2, [sp, #56]
    6ae4:	ldr	w1, [sp, #36]
    6ae8:	ldr	x0, [sp, #40]
    6aec:	bl	9934 <d_print_expr_op>
    6af0:	adrp	x0, 0 <is_fnqual_component_type>
    6af4:	add	x1, x0, #0x0
    6af8:	ldr	x0, [sp, #40]
    6afc:	bl	600c <d_append_string>
    6b00:	ldr	x2, [sp, #56]
    6b04:	ldr	w1, [sp, #36]
    6b08:	ldr	x0, [sp, #40]
    6b0c:	bl	9934 <d_print_expr_op>
    6b10:	ldr	x2, [sp, #80]
    6b14:	ldr	w1, [sp, #36]
    6b18:	ldr	x0, [sp, #40]
    6b1c:	bl	6700 <d_print_subexpr>
    6b20:	mov	w1, #0x29                  	// #41
    6b24:	ldr	x0, [sp, #40]
    6b28:	bl	5f48 <d_append_char>
    6b2c:	nop
    6b30:	ldr	x0, [sp, #40]
    6b34:	ldr	w1, [sp, #52]
    6b38:	str	w1, [x0, #316]
    6b3c:	mov	w0, #0x1                   	// #1
    6b40:	ldp	x29, x30, [sp], #96
    6b44:	ret

0000000000006b48 <d_print_comp_inner>:
    6b48:	sub	sp, sp, #0x200
    6b4c:	stp	x29, x30, [sp]
    6b50:	mov	x29, sp
    6b54:	str	x0, [sp, #40]
    6b58:	str	w1, [sp, #36]
    6b5c:	str	x2, [sp, #24]
    6b60:	str	xzr, [sp, #504]
    6b64:	str	wzr, [sp, #492]
    6b68:	ldr	x0, [sp, #24]
    6b6c:	cmp	x0, #0x0
    6b70:	b.ne	6b80 <d_print_comp_inner+0x38>  // b.any
    6b74:	ldr	x0, [sp, #40]
    6b78:	bl	5e98 <d_print_error>
    6b7c:	b	8d6c <d_print_comp_inner+0x2224>
    6b80:	ldr	x0, [sp, #40]
    6b84:	bl	5eb8 <d_print_saw_error>
    6b88:	cmp	w0, #0x0
    6b8c:	b.ne	8d18 <d_print_comp_inner+0x21d0>  // b.any
    6b90:	ldr	x0, [sp, #24]
    6b94:	ldr	w0, [x0]
    6b98:	cmp	w0, #0x50
    6b9c:	b.hi	8d0c <d_print_comp_inner+0x21c4>  // b.pmore
    6ba0:	adrp	x1, 0 <is_fnqual_component_type>
    6ba4:	add	x1, x1, #0x0
    6ba8:	ldr	w0, [x1, w0, uxtw #2]
    6bac:	adr	x1, 6bb8 <d_print_comp_inner+0x70>
    6bb0:	add	x0, x1, w0, sxtw #2
    6bb4:	br	x0
    6bb8:	ldr	w0, [sp, #36]
    6bbc:	and	w0, w0, #0x4
    6bc0:	cmp	w0, #0x0
    6bc4:	b.ne	6bec <d_print_comp_inner+0xa4>  // b.any
    6bc8:	ldr	x0, [sp, #24]
    6bcc:	ldr	x1, [x0, #8]
    6bd0:	ldr	x0, [sp, #24]
    6bd4:	ldr	w0, [x0, #16]
    6bd8:	sxtw	x0, w0
    6bdc:	mov	x2, x0
    6be0:	ldr	x0, [sp, #40]
    6be4:	bl	5fa8 <d_append_buffer>
    6be8:	b	8d6c <d_print_comp_inner+0x2224>
    6bec:	ldr	x0, [sp, #24]
    6bf0:	ldr	x1, [x0, #8]
    6bf4:	ldr	x0, [sp, #24]
    6bf8:	ldr	w0, [x0, #16]
    6bfc:	mov	w2, w0
    6c00:	ldr	x0, [sp, #40]
    6c04:	bl	8e58 <d_print_java_identifier>
    6c08:	b	8d6c <d_print_comp_inner+0x2224>
    6c0c:	ldr	x0, [sp, #24]
    6c10:	ldr	x0, [x0, #8]
    6c14:	mov	x2, x0
    6c18:	ldr	w1, [sp, #36]
    6c1c:	ldr	x0, [sp, #40]
    6c20:	bl	8d78 <d_print_comp>
    6c24:	adrp	x0, 0 <is_fnqual_component_type>
    6c28:	add	x1, x0, #0x0
    6c2c:	ldr	x0, [sp, #40]
    6c30:	bl	600c <d_append_string>
    6c34:	ldr	x0, [sp, #24]
    6c38:	ldr	x0, [x0, #16]
    6c3c:	mov	x2, x0
    6c40:	ldr	w1, [sp, #36]
    6c44:	ldr	x0, [sp, #40]
    6c48:	bl	8d78 <d_print_comp>
    6c4c:	mov	w1, #0x5d                  	// #93
    6c50:	ldr	x0, [sp, #40]
    6c54:	bl	5f48 <d_append_char>
    6c58:	b	8d6c <d_print_comp_inner+0x2224>
    6c5c:	ldr	x0, [sp, #24]
    6c60:	ldr	x0, [x0, #8]
    6c64:	mov	x2, x0
    6c68:	ldr	w1, [sp, #36]
    6c6c:	ldr	x0, [sp, #40]
    6c70:	bl	8d78 <d_print_comp>
    6c74:	ldr	w0, [sp, #36]
    6c78:	and	w0, w0, #0x4
    6c7c:	cmp	w0, #0x0
    6c80:	b.ne	6c98 <d_print_comp_inner+0x150>  // b.any
    6c84:	adrp	x0, 0 <is_fnqual_component_type>
    6c88:	add	x1, x0, #0x0
    6c8c:	ldr	x0, [sp, #40]
    6c90:	bl	600c <d_append_string>
    6c94:	b	6ca4 <d_print_comp_inner+0x15c>
    6c98:	mov	w1, #0x2e                  	// #46
    6c9c:	ldr	x0, [sp, #40]
    6ca0:	bl	5f48 <d_append_char>
    6ca4:	ldr	x0, [sp, #24]
    6ca8:	ldr	x0, [x0, #16]
    6cac:	str	x0, [sp, #480]
    6cb0:	ldr	x0, [sp, #480]
    6cb4:	ldr	w0, [x0]
    6cb8:	cmp	w0, #0x47
    6cbc:	b.ne	6d04 <d_print_comp_inner+0x1bc>  // b.any
    6cc0:	adrp	x0, 0 <is_fnqual_component_type>
    6cc4:	add	x1, x0, #0x0
    6cc8:	ldr	x0, [sp, #40]
    6ccc:	bl	600c <d_append_string>
    6cd0:	ldr	x0, [sp, #480]
    6cd4:	ldr	w0, [x0, #16]
    6cd8:	add	w0, w0, #0x1
    6cdc:	mov	w1, w0
    6ce0:	ldr	x0, [sp, #40]
    6ce4:	bl	6040 <d_append_num>
    6ce8:	adrp	x0, 0 <is_fnqual_component_type>
    6cec:	add	x1, x0, #0x0
    6cf0:	ldr	x0, [sp, #40]
    6cf4:	bl	600c <d_append_string>
    6cf8:	ldr	x0, [sp, #480]
    6cfc:	ldr	x0, [x0, #8]
    6d00:	str	x0, [sp, #480]
    6d04:	ldr	x2, [sp, #480]
    6d08:	ldr	w1, [sp, #36]
    6d0c:	ldr	x0, [sp, #40]
    6d10:	bl	8d78 <d_print_comp>
    6d14:	b	8d6c <d_print_comp_inner+0x2224>
    6d18:	ldr	x0, [sp, #40]
    6d1c:	ldr	x0, [x0, #296]
    6d20:	str	x0, [sp, #192]
    6d24:	ldr	x0, [sp, #40]
    6d28:	str	xzr, [x0, #296]
    6d2c:	str	wzr, [sp, #468]
    6d30:	ldr	x0, [sp, #24]
    6d34:	ldr	x0, [x0, #8]
    6d38:	str	x0, [sp, #472]
    6d3c:	b	6df0 <d_print_comp_inner+0x2a8>
    6d40:	ldr	w0, [sp, #468]
    6d44:	cmp	w0, #0x3
    6d48:	b.ls	6d58 <d_print_comp_inner+0x210>  // b.plast
    6d4c:	ldr	x0, [sp, #40]
    6d50:	bl	5e98 <d_print_error>
    6d54:	b	8d6c <d_print_comp_inner+0x2224>
    6d58:	ldr	x0, [sp, #40]
    6d5c:	ldr	x2, [x0, #296]
    6d60:	ldr	w0, [sp, #468]
    6d64:	lsl	x0, x0, #5
    6d68:	add	x1, sp, #0x30
    6d6c:	str	x2, [x1, x0]
    6d70:	add	x1, sp, #0x30
    6d74:	ldr	w0, [sp, #468]
    6d78:	lsl	x0, x0, #5
    6d7c:	add	x1, x1, x0
    6d80:	ldr	x0, [sp, #40]
    6d84:	str	x1, [x0, #296]
    6d88:	ldr	w0, [sp, #468]
    6d8c:	lsl	x0, x0, #5
    6d90:	add	x1, sp, #0x38
    6d94:	ldr	x2, [sp, #472]
    6d98:	str	x2, [x1, x0]
    6d9c:	ldr	w0, [sp, #468]
    6da0:	lsl	x0, x0, #5
    6da4:	add	x1, sp, #0x40
    6da8:	str	wzr, [x1, x0]
    6dac:	ldr	x0, [sp, #40]
    6db0:	ldr	x2, [x0, #288]
    6db4:	ldr	w0, [sp, #468]
    6db8:	lsl	x0, x0, #5
    6dbc:	add	x1, sp, #0x48
    6dc0:	str	x2, [x1, x0]
    6dc4:	ldr	w0, [sp, #468]
    6dc8:	add	w0, w0, #0x1
    6dcc:	str	w0, [sp, #468]
    6dd0:	ldr	x0, [sp, #472]
    6dd4:	ldr	w0, [x0]
    6dd8:	bl	0 <is_fnqual_component_type>
    6ddc:	cmp	w0, #0x0
    6de0:	b.eq	6e00 <d_print_comp_inner+0x2b8>  // b.none
    6de4:	ldr	x0, [sp, #472]
    6de8:	ldr	x0, [x0, #8]
    6dec:	str	x0, [sp, #472]
    6df0:	ldr	x0, [sp, #472]
    6df4:	cmp	x0, #0x0
    6df8:	b.ne	6d40 <d_print_comp_inner+0x1f8>  // b.any
    6dfc:	b	6e04 <d_print_comp_inner+0x2bc>
    6e00:	nop
    6e04:	ldr	x0, [sp, #472]
    6e08:	cmp	x0, #0x0
    6e0c:	b.ne	6e1c <d_print_comp_inner+0x2d4>  // b.any
    6e10:	ldr	x0, [sp, #40]
    6e14:	bl	5e98 <d_print_error>
    6e18:	b	8d6c <d_print_comp_inner+0x2224>
    6e1c:	ldr	x0, [sp, #472]
    6e20:	ldr	w0, [x0]
    6e24:	cmp	w0, #0x2
    6e28:	b.ne	6f7c <d_print_comp_inner+0x434>  // b.any
    6e2c:	ldr	x0, [sp, #472]
    6e30:	ldr	x0, [x0, #16]
    6e34:	str	x0, [sp, #472]
    6e38:	ldr	x0, [sp, #472]
    6e3c:	ldr	w0, [x0]
    6e40:	cmp	w0, #0x47
    6e44:	b.ne	6e54 <d_print_comp_inner+0x30c>  // b.any
    6e48:	ldr	x0, [sp, #472]
    6e4c:	ldr	x0, [x0, #8]
    6e50:	str	x0, [sp, #472]
    6e54:	ldr	x0, [sp, #472]
    6e58:	cmp	x0, #0x0
    6e5c:	b.ne	6f68 <d_print_comp_inner+0x420>  // b.any
    6e60:	ldr	x0, [sp, #40]
    6e64:	bl	5e98 <d_print_error>
    6e68:	b	8d6c <d_print_comp_inner+0x2224>
    6e6c:	ldr	w0, [sp, #468]
    6e70:	cmp	w0, #0x3
    6e74:	b.ls	6e84 <d_print_comp_inner+0x33c>  // b.plast
    6e78:	ldr	x0, [sp, #40]
    6e7c:	bl	5e98 <d_print_error>
    6e80:	b	8d6c <d_print_comp_inner+0x2224>
    6e84:	ldr	w0, [sp, #468]
    6e88:	sub	w1, w0, #0x1
    6e8c:	ldr	w0, [sp, #468]
    6e90:	lsl	x2, x0, #5
    6e94:	add	x3, sp, #0x30
    6e98:	mov	w0, w1
    6e9c:	lsl	x0, x0, #5
    6ea0:	add	x1, sp, #0x30
    6ea4:	add	x2, x3, x2
    6ea8:	add	x3, x1, x0
    6eac:	ldp	x0, x1, [x3]
    6eb0:	stp	x0, x1, [x2]
    6eb4:	ldp	x0, x1, [x3, #16]
    6eb8:	stp	x0, x1, [x2, #16]
    6ebc:	ldr	w0, [sp, #468]
    6ec0:	sub	w0, w0, #0x1
    6ec4:	add	x1, sp, #0x30
    6ec8:	mov	w0, w0
    6ecc:	lsl	x0, x0, #5
    6ed0:	add	x2, x1, x0
    6ed4:	ldr	w0, [sp, #468]
    6ed8:	lsl	x0, x0, #5
    6edc:	add	x1, sp, #0x30
    6ee0:	str	x2, [x1, x0]
    6ee4:	add	x1, sp, #0x30
    6ee8:	ldr	w0, [sp, #468]
    6eec:	lsl	x0, x0, #5
    6ef0:	add	x1, x1, x0
    6ef4:	ldr	x0, [sp, #40]
    6ef8:	str	x1, [x0, #296]
    6efc:	ldr	w0, [sp, #468]
    6f00:	sub	w0, w0, #0x1
    6f04:	mov	w0, w0
    6f08:	lsl	x0, x0, #5
    6f0c:	add	x1, sp, #0x38
    6f10:	ldr	x2, [sp, #472]
    6f14:	str	x2, [x1, x0]
    6f18:	ldr	w0, [sp, #468]
    6f1c:	sub	w0, w0, #0x1
    6f20:	mov	w0, w0
    6f24:	lsl	x0, x0, #5
    6f28:	add	x1, sp, #0x40
    6f2c:	str	wzr, [x1, x0]
    6f30:	ldr	w0, [sp, #468]
    6f34:	sub	w1, w0, #0x1
    6f38:	ldr	x0, [sp, #40]
    6f3c:	ldr	x2, [x0, #288]
    6f40:	mov	w0, w1
    6f44:	lsl	x0, x0, #5
    6f48:	add	x1, sp, #0x48
    6f4c:	str	x2, [x1, x0]
    6f50:	ldr	w0, [sp, #468]
    6f54:	add	w0, w0, #0x1
    6f58:	str	w0, [sp, #468]
    6f5c:	ldr	x0, [sp, #472]
    6f60:	ldr	x0, [x0, #8]
    6f64:	str	x0, [sp, #472]
    6f68:	ldr	x0, [sp, #472]
    6f6c:	ldr	w0, [x0]
    6f70:	bl	0 <is_fnqual_component_type>
    6f74:	cmp	w0, #0x0
    6f78:	b.ne	6e6c <d_print_comp_inner+0x324>  // b.any
    6f7c:	ldr	x0, [sp, #472]
    6f80:	ldr	w0, [x0]
    6f84:	cmp	w0, #0x4
    6f88:	b.ne	6fac <d_print_comp_inner+0x464>  // b.any
    6f8c:	ldr	x0, [sp, #40]
    6f90:	ldr	x0, [x0, #288]
    6f94:	str	x0, [sp, #176]
    6f98:	ldr	x0, [sp, #40]
    6f9c:	add	x1, sp, #0xb0
    6fa0:	str	x1, [x0, #288]
    6fa4:	ldr	x0, [sp, #472]
    6fa8:	str	x0, [sp, #184]
    6fac:	ldr	x0, [sp, #24]
    6fb0:	ldr	x0, [x0, #16]
    6fb4:	mov	x2, x0
    6fb8:	ldr	w1, [sp, #36]
    6fbc:	ldr	x0, [sp, #40]
    6fc0:	bl	8d78 <d_print_comp>
    6fc4:	ldr	x0, [sp, #472]
    6fc8:	ldr	w0, [x0]
    6fcc:	cmp	w0, #0x4
    6fd0:	b.ne	7034 <d_print_comp_inner+0x4ec>  // b.any
    6fd4:	ldr	x1, [sp, #176]
    6fd8:	ldr	x0, [sp, #40]
    6fdc:	str	x1, [x0, #288]
    6fe0:	b	7034 <d_print_comp_inner+0x4ec>
    6fe4:	ldr	w0, [sp, #468]
    6fe8:	sub	w0, w0, #0x1
    6fec:	str	w0, [sp, #468]
    6ff0:	ldr	w0, [sp, #468]
    6ff4:	lsl	x0, x0, #5
    6ff8:	add	x1, sp, #0x40
    6ffc:	ldr	w0, [x1, x0]
    7000:	cmp	w0, #0x0
    7004:	b.ne	7034 <d_print_comp_inner+0x4ec>  // b.any
    7008:	mov	w1, #0x20                  	// #32
    700c:	ldr	x0, [sp, #40]
    7010:	bl	5f48 <d_append_char>
    7014:	ldr	w0, [sp, #468]
    7018:	lsl	x0, x0, #5
    701c:	add	x1, sp, #0x38
    7020:	ldr	x0, [x1, x0]
    7024:	mov	x2, x0
    7028:	ldr	w1, [sp, #36]
    702c:	ldr	x0, [sp, #40]
    7030:	bl	92f4 <d_print_mod>
    7034:	ldr	w0, [sp, #468]
    7038:	cmp	w0, #0x0
    703c:	b.ne	6fe4 <d_print_comp_inner+0x49c>  // b.any
    7040:	ldr	x0, [sp, #40]
    7044:	ldr	x1, [sp, #192]
    7048:	str	x1, [x0, #296]
    704c:	b	8d6c <d_print_comp_inner+0x2224>
    7050:	ldr	x0, [sp, #40]
    7054:	ldr	x0, [x0, #368]
    7058:	str	x0, [sp, #216]
    705c:	ldr	x0, [sp, #40]
    7060:	ldr	x1, [sp, #24]
    7064:	str	x1, [x0, #368]
    7068:	ldr	x0, [sp, #40]
    706c:	ldr	x0, [x0, #296]
    7070:	str	x0, [sp, #208]
    7074:	ldr	x0, [sp, #40]
    7078:	str	xzr, [x0, #296]
    707c:	ldr	x0, [sp, #24]
    7080:	ldr	x0, [x0, #8]
    7084:	str	x0, [sp, #200]
    7088:	ldr	w0, [sp, #36]
    708c:	and	w0, w0, #0x4
    7090:	cmp	w0, #0x0
    7094:	b.eq	7108 <d_print_comp_inner+0x5c0>  // b.none
    7098:	ldr	x0, [sp, #200]
    709c:	ldr	w0, [x0]
    70a0:	cmp	w0, #0x0
    70a4:	b.ne	7108 <d_print_comp_inner+0x5c0>  // b.any
    70a8:	ldr	x0, [sp, #200]
    70ac:	ldr	w0, [x0, #16]
    70b0:	cmp	w0, #0x6
    70b4:	b.ne	7108 <d_print_comp_inner+0x5c0>  // b.any
    70b8:	ldr	x0, [sp, #200]
    70bc:	ldr	x3, [x0, #8]
    70c0:	mov	x2, #0x6                   	// #6
    70c4:	adrp	x0, 0 <is_fnqual_component_type>
    70c8:	add	x1, x0, #0x0
    70cc:	mov	x0, x3
    70d0:	bl	0 <strncmp>
    70d4:	cmp	w0, #0x0
    70d8:	b.ne	7108 <d_print_comp_inner+0x5c0>  // b.any
    70dc:	ldr	x0, [sp, #24]
    70e0:	ldr	x0, [x0, #16]
    70e4:	mov	x2, x0
    70e8:	ldr	w1, [sp, #36]
    70ec:	ldr	x0, [sp, #40]
    70f0:	bl	8d78 <d_print_comp>
    70f4:	adrp	x0, 0 <is_fnqual_component_type>
    70f8:	add	x1, x0, #0x0
    70fc:	ldr	x0, [sp, #40]
    7100:	bl	600c <d_append_string>
    7104:	b	7188 <d_print_comp_inner+0x640>
    7108:	ldr	x2, [sp, #200]
    710c:	ldr	w1, [sp, #36]
    7110:	ldr	x0, [sp, #40]
    7114:	bl	8d78 <d_print_comp>
    7118:	ldr	x0, [sp, #40]
    711c:	bl	6084 <d_last_char>
    7120:	and	w0, w0, #0xff
    7124:	cmp	w0, #0x3c
    7128:	b.ne	7138 <d_print_comp_inner+0x5f0>  // b.any
    712c:	mov	w1, #0x20                  	// #32
    7130:	ldr	x0, [sp, #40]
    7134:	bl	5f48 <d_append_char>
    7138:	mov	w1, #0x3c                  	// #60
    713c:	ldr	x0, [sp, #40]
    7140:	bl	5f48 <d_append_char>
    7144:	ldr	x0, [sp, #24]
    7148:	ldr	x0, [x0, #16]
    714c:	mov	x2, x0
    7150:	ldr	w1, [sp, #36]
    7154:	ldr	x0, [sp, #40]
    7158:	bl	8d78 <d_print_comp>
    715c:	ldr	x0, [sp, #40]
    7160:	bl	6084 <d_last_char>
    7164:	and	w0, w0, #0xff
    7168:	cmp	w0, #0x3e
    716c:	b.ne	717c <d_print_comp_inner+0x634>  // b.any
    7170:	mov	w1, #0x20                  	// #32
    7174:	ldr	x0, [sp, #40]
    7178:	bl	5f48 <d_append_char>
    717c:	mov	w1, #0x3e                  	// #62
    7180:	ldr	x0, [sp, #40]
    7184:	bl	5f48 <d_append_char>
    7188:	ldr	x0, [sp, #40]
    718c:	ldr	x1, [sp, #208]
    7190:	str	x1, [x0, #296]
    7194:	ldr	x0, [sp, #40]
    7198:	ldr	x1, [sp, #216]
    719c:	str	x1, [x0, #368]
    71a0:	b	8d6c <d_print_comp_inner+0x2224>
    71a4:	ldr	x0, [sp, #40]
    71a8:	ldr	w0, [x0, #312]
    71ac:	cmp	w0, #0x0
    71b0:	b.eq	71e4 <d_print_comp_inner+0x69c>  // b.none
    71b4:	mov	x2, #0x5                   	// #5
    71b8:	adrp	x0, 0 <is_fnqual_component_type>
    71bc:	add	x1, x0, #0x0
    71c0:	ldr	x0, [sp, #40]
    71c4:	bl	5fa8 <d_append_buffer>
    71c8:	ldr	x0, [sp, #24]
    71cc:	ldr	x0, [x0, #8]
    71d0:	add	w0, w0, #0x1
    71d4:	mov	w1, w0
    71d8:	ldr	x0, [sp, #40]
    71dc:	bl	6040 <d_append_num>
    71e0:	b	8d6c <d_print_comp_inner+0x2224>
    71e4:	ldr	x1, [sp, #24]
    71e8:	ldr	x0, [sp, #40]
    71ec:	bl	63c4 <d_lookup_template_argument>
    71f0:	str	x0, [sp, #456]
    71f4:	ldr	x0, [sp, #456]
    71f8:	cmp	x0, #0x0
    71fc:	b.eq	7228 <d_print_comp_inner+0x6e0>  // b.none
    7200:	ldr	x0, [sp, #456]
    7204:	ldr	w0, [x0]
    7208:	cmp	w0, #0x2f
    720c:	b.ne	7228 <d_print_comp_inner+0x6e0>  // b.any
    7210:	ldr	x0, [sp, #40]
    7214:	ldr	w0, [x0, #316]
    7218:	mov	w1, w0
    721c:	ldr	x0, [sp, #456]
    7220:	bl	6318 <d_index_template_argument>
    7224:	str	x0, [sp, #456]
    7228:	ldr	x0, [sp, #456]
    722c:	cmp	x0, #0x0
    7230:	b.ne	7240 <d_print_comp_inner+0x6f8>  // b.any
    7234:	ldr	x0, [sp, #40]
    7238:	bl	5e98 <d_print_error>
    723c:	b	8d6c <d_print_comp_inner+0x2224>
    7240:	ldr	x0, [sp, #40]
    7244:	ldr	x0, [x0, #288]
    7248:	str	x0, [sp, #224]
    724c:	ldr	x0, [sp, #224]
    7250:	ldr	x1, [x0]
    7254:	ldr	x0, [sp, #40]
    7258:	str	x1, [x0, #288]
    725c:	ldr	x2, [sp, #456]
    7260:	ldr	w1, [sp, #36]
    7264:	ldr	x0, [sp, #40]
    7268:	bl	8d78 <d_print_comp>
    726c:	ldr	x0, [sp, #40]
    7270:	ldr	x1, [sp, #224]
    7274:	str	x1, [x0, #288]
    7278:	b	8d6c <d_print_comp_inner+0x2224>
    727c:	adrp	x0, 0 <is_fnqual_component_type>
    7280:	add	x1, x0, #0x0
    7284:	ldr	x0, [sp, #40]
    7288:	bl	600c <d_append_string>
    728c:	ldr	x0, [sp, #24]
    7290:	ldr	x0, [x0, #8]
    7294:	mov	x2, x0
    7298:	ldr	w1, [sp, #36]
    729c:	ldr	x0, [sp, #40]
    72a0:	bl	8d78 <d_print_comp>
    72a4:	b	8d6c <d_print_comp_inner+0x2224>
    72a8:	ldr	x0, [sp, #24]
    72ac:	ldr	x0, [x0, #16]
    72b0:	mov	x2, x0
    72b4:	ldr	w1, [sp, #36]
    72b8:	ldr	x0, [sp, #40]
    72bc:	bl	8d78 <d_print_comp>
    72c0:	b	8d6c <d_print_comp_inner+0x2224>
    72c4:	mov	w1, #0x7e                  	// #126
    72c8:	ldr	x0, [sp, #40]
    72cc:	bl	5f48 <d_append_char>
    72d0:	ldr	x0, [sp, #24]
    72d4:	ldr	x0, [x0, #16]
    72d8:	mov	x2, x0
    72dc:	ldr	w1, [sp, #36]
    72e0:	ldr	x0, [sp, #40]
    72e4:	bl	8d78 <d_print_comp>
    72e8:	b	8d6c <d_print_comp_inner+0x2224>
    72ec:	adrp	x0, 0 <is_fnqual_component_type>
    72f0:	add	x1, x0, #0x0
    72f4:	ldr	x0, [sp, #40]
    72f8:	bl	600c <d_append_string>
    72fc:	ldr	x0, [sp, #24]
    7300:	ldr	x0, [x0, #8]
    7304:	mov	x2, x0
    7308:	ldr	w1, [sp, #36]
    730c:	ldr	x0, [sp, #40]
    7310:	bl	8d78 <d_print_comp>
    7314:	b	8d6c <d_print_comp_inner+0x2224>
    7318:	adrp	x0, 0 <is_fnqual_component_type>
    731c:	add	x1, x0, #0x0
    7320:	ldr	x0, [sp, #40]
    7324:	bl	600c <d_append_string>
    7328:	ldr	x0, [sp, #24]
    732c:	ldr	x0, [x0, #8]
    7330:	mov	x2, x0
    7334:	ldr	w1, [sp, #36]
    7338:	ldr	x0, [sp, #40]
    733c:	bl	8d78 <d_print_comp>
    7340:	b	8d6c <d_print_comp_inner+0x2224>
    7344:	adrp	x0, 0 <is_fnqual_component_type>
    7348:	add	x1, x0, #0x0
    734c:	ldr	x0, [sp, #40]
    7350:	bl	600c <d_append_string>
    7354:	ldr	x0, [sp, #24]
    7358:	ldr	x0, [x0, #8]
    735c:	mov	x2, x0
    7360:	ldr	w1, [sp, #36]
    7364:	ldr	x0, [sp, #40]
    7368:	bl	8d78 <d_print_comp>
    736c:	adrp	x0, 0 <is_fnqual_component_type>
    7370:	add	x1, x0, #0x0
    7374:	ldr	x0, [sp, #40]
    7378:	bl	600c <d_append_string>
    737c:	ldr	x0, [sp, #24]
    7380:	ldr	x0, [x0, #16]
    7384:	mov	x2, x0
    7388:	ldr	w1, [sp, #36]
    738c:	ldr	x0, [sp, #40]
    7390:	bl	8d78 <d_print_comp>
    7394:	b	8d6c <d_print_comp_inner+0x2224>
    7398:	adrp	x0, 0 <is_fnqual_component_type>
    739c:	add	x1, x0, #0x0
    73a0:	ldr	x0, [sp, #40]
    73a4:	bl	600c <d_append_string>
    73a8:	ldr	x0, [sp, #24]
    73ac:	ldr	x0, [x0, #8]
    73b0:	mov	x2, x0
    73b4:	ldr	w1, [sp, #36]
    73b8:	ldr	x0, [sp, #40]
    73bc:	bl	8d78 <d_print_comp>
    73c0:	b	8d6c <d_print_comp_inner+0x2224>
    73c4:	adrp	x0, 0 <is_fnqual_component_type>
    73c8:	add	x1, x0, #0x0
    73cc:	ldr	x0, [sp, #40]
    73d0:	bl	600c <d_append_string>
    73d4:	ldr	x0, [sp, #24]
    73d8:	ldr	x0, [x0, #8]
    73dc:	mov	x2, x0
    73e0:	ldr	w1, [sp, #36]
    73e4:	ldr	x0, [sp, #40]
    73e8:	bl	8d78 <d_print_comp>
    73ec:	b	8d6c <d_print_comp_inner+0x2224>
    73f0:	adrp	x0, 0 <is_fnqual_component_type>
    73f4:	add	x1, x0, #0x0
    73f8:	ldr	x0, [sp, #40]
    73fc:	bl	600c <d_append_string>
    7400:	ldr	x0, [sp, #24]
    7404:	ldr	x0, [x0, #8]
    7408:	mov	x2, x0
    740c:	ldr	w1, [sp, #36]
    7410:	ldr	x0, [sp, #40]
    7414:	bl	8d78 <d_print_comp>
    7418:	b	8d6c <d_print_comp_inner+0x2224>
    741c:	adrp	x0, 0 <is_fnqual_component_type>
    7420:	add	x1, x0, #0x0
    7424:	ldr	x0, [sp, #40]
    7428:	bl	600c <d_append_string>
    742c:	ldr	x0, [sp, #24]
    7430:	ldr	x0, [x0, #8]
    7434:	mov	x2, x0
    7438:	ldr	w1, [sp, #36]
    743c:	ldr	x0, [sp, #40]
    7440:	bl	8d78 <d_print_comp>
    7444:	b	8d6c <d_print_comp_inner+0x2224>
    7448:	adrp	x0, 0 <is_fnqual_component_type>
    744c:	add	x1, x0, #0x0
    7450:	ldr	x0, [sp, #40]
    7454:	bl	600c <d_append_string>
    7458:	ldr	x0, [sp, #24]
    745c:	ldr	x0, [x0, #8]
    7460:	mov	x2, x0
    7464:	ldr	w1, [sp, #36]
    7468:	ldr	x0, [sp, #40]
    746c:	bl	8d78 <d_print_comp>
    7470:	b	8d6c <d_print_comp_inner+0x2224>
    7474:	adrp	x0, 0 <is_fnqual_component_type>
    7478:	add	x1, x0, #0x0
    747c:	ldr	x0, [sp, #40]
    7480:	bl	600c <d_append_string>
    7484:	ldr	x0, [sp, #24]
    7488:	ldr	x0, [x0, #8]
    748c:	mov	x2, x0
    7490:	ldr	w1, [sp, #36]
    7494:	ldr	x0, [sp, #40]
    7498:	bl	8d78 <d_print_comp>
    749c:	b	8d6c <d_print_comp_inner+0x2224>
    74a0:	adrp	x0, 0 <is_fnqual_component_type>
    74a4:	add	x1, x0, #0x0
    74a8:	ldr	x0, [sp, #40]
    74ac:	bl	600c <d_append_string>
    74b0:	ldr	x0, [sp, #24]
    74b4:	ldr	x0, [x0, #8]
    74b8:	mov	x2, x0
    74bc:	ldr	w1, [sp, #36]
    74c0:	ldr	x0, [sp, #40]
    74c4:	bl	8d78 <d_print_comp>
    74c8:	b	8d6c <d_print_comp_inner+0x2224>
    74cc:	adrp	x0, 0 <is_fnqual_component_type>
    74d0:	add	x1, x0, #0x0
    74d4:	ldr	x0, [sp, #40]
    74d8:	bl	600c <d_append_string>
    74dc:	ldr	x0, [sp, #24]
    74e0:	ldr	x0, [x0, #8]
    74e4:	mov	x2, x0
    74e8:	ldr	w1, [sp, #36]
    74ec:	ldr	x0, [sp, #40]
    74f0:	bl	8d78 <d_print_comp>
    74f4:	b	8d6c <d_print_comp_inner+0x2224>
    74f8:	adrp	x0, 0 <is_fnqual_component_type>
    74fc:	add	x1, x0, #0x0
    7500:	ldr	x0, [sp, #40]
    7504:	bl	600c <d_append_string>
    7508:	ldr	x0, [sp, #24]
    750c:	ldr	x0, [x0, #8]
    7510:	mov	x2, x0
    7514:	ldr	w1, [sp, #36]
    7518:	ldr	x0, [sp, #40]
    751c:	bl	8d78 <d_print_comp>
    7520:	b	8d6c <d_print_comp_inner+0x2224>
    7524:	adrp	x0, 0 <is_fnqual_component_type>
    7528:	add	x1, x0, #0x0
    752c:	ldr	x0, [sp, #40]
    7530:	bl	600c <d_append_string>
    7534:	ldr	x0, [sp, #24]
    7538:	ldr	x0, [x0, #8]
    753c:	mov	x2, x0
    7540:	ldr	w1, [sp, #36]
    7544:	ldr	x0, [sp, #40]
    7548:	bl	8d78 <d_print_comp>
    754c:	b	8d6c <d_print_comp_inner+0x2224>
    7550:	adrp	x0, 0 <is_fnqual_component_type>
    7554:	add	x1, x0, #0x0
    7558:	ldr	x0, [sp, #40]
    755c:	bl	600c <d_append_string>
    7560:	ldr	x0, [sp, #24]
    7564:	ldr	x0, [x0, #16]
    7568:	mov	x2, x0
    756c:	ldr	w1, [sp, #36]
    7570:	ldr	x0, [sp, #40]
    7574:	bl	8d78 <d_print_comp>
    7578:	adrp	x0, 0 <is_fnqual_component_type>
    757c:	add	x1, x0, #0x0
    7580:	ldr	x0, [sp, #40]
    7584:	bl	600c <d_append_string>
    7588:	ldr	x0, [sp, #24]
    758c:	ldr	x0, [x0, #8]
    7590:	mov	x2, x0
    7594:	ldr	w1, [sp, #36]
    7598:	ldr	x0, [sp, #40]
    759c:	bl	8d78 <d_print_comp>
    75a0:	b	8d6c <d_print_comp_inner+0x2224>
    75a4:	adrp	x0, 0 <is_fnqual_component_type>
    75a8:	add	x1, x0, #0x0
    75ac:	ldr	x0, [sp, #40]
    75b0:	bl	600c <d_append_string>
    75b4:	ldr	x0, [sp, #24]
    75b8:	ldr	x0, [x0, #8]
    75bc:	mov	x2, x0
    75c0:	ldr	w1, [sp, #36]
    75c4:	ldr	x0, [sp, #40]
    75c8:	bl	8d78 <d_print_comp>
    75cc:	b	8d6c <d_print_comp_inner+0x2224>
    75d0:	adrp	x0, 0 <is_fnqual_component_type>
    75d4:	add	x1, x0, #0x0
    75d8:	ldr	x0, [sp, #40]
    75dc:	bl	600c <d_append_string>
    75e0:	ldr	x0, [sp, #24]
    75e4:	ldr	x0, [x0, #8]
    75e8:	mov	x2, x0
    75ec:	ldr	w1, [sp, #36]
    75f0:	ldr	x0, [sp, #40]
    75f4:	bl	8d78 <d_print_comp>
    75f8:	b	8d6c <d_print_comp_inner+0x2224>
    75fc:	adrp	x0, 0 <is_fnqual_component_type>
    7600:	add	x1, x0, #0x0
    7604:	ldr	x0, [sp, #40]
    7608:	bl	600c <d_append_string>
    760c:	ldr	x0, [sp, #24]
    7610:	ldr	x0, [x0, #8]
    7614:	mov	x2, x0
    7618:	ldr	w1, [sp, #36]
    761c:	ldr	x0, [sp, #40]
    7620:	bl	8d78 <d_print_comp>
    7624:	b	8d6c <d_print_comp_inner+0x2224>
    7628:	ldr	x0, [sp, #24]
    762c:	ldr	x1, [x0, #8]
    7630:	ldr	x0, [sp, #24]
    7634:	ldr	w0, [x0, #16]
    7638:	sxtw	x0, w0
    763c:	mov	x2, x0
    7640:	ldr	x0, [sp, #40]
    7644:	bl	5fa8 <d_append_buffer>
    7648:	b	8d6c <d_print_comp_inner+0x2224>
    764c:	ldr	x0, [sp, #40]
    7650:	ldr	x0, [x0, #296]
    7654:	str	x0, [sp, #448]
    7658:	b	76ec <d_print_comp_inner+0xba4>
    765c:	ldr	x0, [sp, #448]
    7660:	ldr	w0, [x0, #16]
    7664:	cmp	w0, #0x0
    7668:	b.ne	76e0 <d_print_comp_inner+0xb98>  // b.any
    766c:	ldr	x0, [sp, #448]
    7670:	ldr	x0, [x0, #8]
    7674:	ldr	w0, [x0]
    7678:	cmp	w0, #0x19
    767c:	b.eq	76a8 <d_print_comp_inner+0xb60>  // b.none
    7680:	ldr	x0, [sp, #448]
    7684:	ldr	x0, [x0, #8]
    7688:	ldr	w0, [x0]
    768c:	cmp	w0, #0x1a
    7690:	b.eq	76a8 <d_print_comp_inner+0xb60>  // b.none
    7694:	ldr	x0, [sp, #448]
    7698:	ldr	x0, [x0, #8]
    769c:	ldr	w0, [x0]
    76a0:	cmp	w0, #0x1b
    76a4:	b.ne	76fc <d_print_comp_inner+0xbb4>  // b.any
    76a8:	ldr	x0, [sp, #448]
    76ac:	ldr	x0, [x0, #8]
    76b0:	ldr	w1, [x0]
    76b4:	ldr	x0, [sp, #24]
    76b8:	ldr	w0, [x0]
    76bc:	cmp	w1, w0
    76c0:	b.ne	76e0 <d_print_comp_inner+0xb98>  // b.any
    76c4:	ldr	x0, [sp, #24]
    76c8:	ldr	x0, [x0, #8]
    76cc:	mov	x2, x0
    76d0:	ldr	w1, [sp, #36]
    76d4:	ldr	x0, [sp, #40]
    76d8:	bl	8d78 <d_print_comp>
    76dc:	b	8d6c <d_print_comp_inner+0x2224>
    76e0:	ldr	x0, [sp, #448]
    76e4:	ldr	x0, [x0]
    76e8:	str	x0, [sp, #448]
    76ec:	ldr	x0, [sp, #448]
    76f0:	cmp	x0, #0x0
    76f4:	b.ne	765c <d_print_comp_inner+0xb14>  // b.any
    76f8:	b	78e4 <d_print_comp_inner+0xd9c>
    76fc:	nop
    7700:	b	78e4 <d_print_comp_inner+0xd9c>
    7704:	ldr	x0, [sp, #24]
    7708:	ldr	x0, [x0, #8]
    770c:	str	x0, [sp, #440]
    7710:	ldr	x0, [sp, #40]
    7714:	ldr	w0, [x0, #312]
    7718:	cmp	w0, #0x0
    771c:	b.ne	788c <d_print_comp_inner+0xd44>  // b.any
    7720:	ldr	x0, [sp, #440]
    7724:	ldr	w0, [x0]
    7728:	cmp	w0, #0x5
    772c:	b.ne	788c <d_print_comp_inner+0xd44>  // b.any
    7730:	ldr	x1, [sp, #440]
    7734:	ldr	x0, [sp, #40]
    7738:	bl	68e0 <d_get_saved_scope>
    773c:	str	x0, [sp, #240]
    7740:	ldr	x0, [sp, #240]
    7744:	cmp	x0, #0x0
    7748:	b.ne	776c <d_print_comp_inner+0xc24>  // b.any
    774c:	ldr	x1, [sp, #440]
    7750:	ldr	x0, [sp, #40]
    7754:	bl	67ac <d_save_scope>
    7758:	ldr	x0, [sp, #40]
    775c:	bl	5eb8 <d_print_saw_error>
    7760:	cmp	w0, #0x0
    7764:	b.eq	7810 <d_print_comp_inner+0xcc8>  // b.none
    7768:	b	8d6c <d_print_comp_inner+0x2224>
    776c:	str	wzr, [sp, #420]
    7770:	ldr	x0, [sp, #40]
    7774:	ldr	x0, [x0, #328]
    7778:	str	x0, [sp, #424]
    777c:	b	77d4 <d_print_comp_inner+0xc8c>
    7780:	ldr	x0, [sp, #424]
    7784:	ldr	x0, [x0]
    7788:	ldr	x1, [sp, #440]
    778c:	cmp	x1, x0
    7790:	b.eq	77bc <d_print_comp_inner+0xc74>  // b.none
    7794:	ldr	x0, [sp, #424]
    7798:	ldr	x0, [x0]
    779c:	ldr	x1, [sp, #24]
    77a0:	cmp	x1, x0
    77a4:	b.ne	77c8 <d_print_comp_inner+0xc80>  // b.any
    77a8:	ldr	x0, [sp, #40]
    77ac:	ldr	x0, [x0, #328]
    77b0:	ldr	x1, [sp, #424]
    77b4:	cmp	x1, x0
    77b8:	b.eq	77c8 <d_print_comp_inner+0xc80>  // b.none
    77bc:	mov	w0, #0x1                   	// #1
    77c0:	str	w0, [sp, #420]
    77c4:	b	77e0 <d_print_comp_inner+0xc98>
    77c8:	ldr	x0, [sp, #424]
    77cc:	ldr	x0, [x0, #8]
    77d0:	str	x0, [sp, #424]
    77d4:	ldr	x0, [sp, #424]
    77d8:	cmp	x0, #0x0
    77dc:	b.ne	7780 <d_print_comp_inner+0xc38>  // b.any
    77e0:	ldr	w0, [sp, #420]
    77e4:	cmp	w0, #0x0
    77e8:	b.ne	7810 <d_print_comp_inner+0xcc8>  // b.any
    77ec:	ldr	x0, [sp, #40]
    77f0:	ldr	x0, [x0, #288]
    77f4:	str	x0, [sp, #496]
    77f8:	ldr	x0, [sp, #240]
    77fc:	ldr	x1, [x0, #8]
    7800:	ldr	x0, [sp, #40]
    7804:	str	x1, [x0, #288]
    7808:	mov	w0, #0x1                   	// #1
    780c:	str	w0, [sp, #492]
    7810:	ldr	x1, [sp, #440]
    7814:	ldr	x0, [sp, #40]
    7818:	bl	63c4 <d_lookup_template_argument>
    781c:	str	x0, [sp, #432]
    7820:	ldr	x0, [sp, #432]
    7824:	cmp	x0, #0x0
    7828:	b.eq	7854 <d_print_comp_inner+0xd0c>  // b.none
    782c:	ldr	x0, [sp, #432]
    7830:	ldr	w0, [x0]
    7834:	cmp	w0, #0x2f
    7838:	b.ne	7854 <d_print_comp_inner+0xd0c>  // b.any
    783c:	ldr	x0, [sp, #40]
    7840:	ldr	w0, [x0, #316]
    7844:	mov	w1, w0
    7848:	ldr	x0, [sp, #432]
    784c:	bl	6318 <d_index_template_argument>
    7850:	str	x0, [sp, #432]
    7854:	ldr	x0, [sp, #432]
    7858:	cmp	x0, #0x0
    785c:	b.ne	7884 <d_print_comp_inner+0xd3c>  // b.any
    7860:	ldr	w0, [sp, #492]
    7864:	cmp	w0, #0x0
    7868:	b.eq	7878 <d_print_comp_inner+0xd30>  // b.none
    786c:	ldr	x0, [sp, #40]
    7870:	ldr	x1, [sp, #496]
    7874:	str	x1, [x0, #288]
    7878:	ldr	x0, [sp, #40]
    787c:	bl	5e98 <d_print_error>
    7880:	b	8d6c <d_print_comp_inner+0x2224>
    7884:	ldr	x0, [sp, #432]
    7888:	str	x0, [sp, #440]
    788c:	ldr	x0, [sp, #440]
    7890:	ldr	w0, [x0]
    7894:	cmp	w0, #0x23
    7898:	b.eq	78b4 <d_print_comp_inner+0xd6c>  // b.none
    789c:	ldr	x0, [sp, #440]
    78a0:	ldr	w1, [x0]
    78a4:	ldr	x0, [sp, #24]
    78a8:	ldr	w0, [x0]
    78ac:	cmp	w1, w0
    78b0:	b.ne	78c0 <d_print_comp_inner+0xd78>  // b.any
    78b4:	ldr	x0, [sp, #440]
    78b8:	str	x0, [sp, #24]
    78bc:	b	78e4 <d_print_comp_inner+0xd9c>
    78c0:	ldr	x0, [sp, #440]
    78c4:	ldr	w0, [x0]
    78c8:	cmp	w0, #0x24
    78cc:	b.ne	78e0 <d_print_comp_inner+0xd98>  // b.any
    78d0:	ldr	x0, [sp, #440]
    78d4:	ldr	x0, [x0, #8]
    78d8:	str	x0, [sp, #504]
    78dc:	b	78e4 <d_print_comp_inner+0xd9c>
    78e0:	nop
    78e4:	ldr	x0, [sp, #40]
    78e8:	ldr	x0, [x0, #296]
    78ec:	str	x0, [sp, #48]
    78f0:	ldr	x0, [sp, #40]
    78f4:	add	x1, sp, #0x30
    78f8:	str	x1, [x0, #296]
    78fc:	ldr	x0, [sp, #24]
    7900:	str	x0, [sp, #56]
    7904:	str	wzr, [sp, #64]
    7908:	ldr	x0, [sp, #40]
    790c:	ldr	x0, [x0, #288]
    7910:	str	x0, [sp, #72]
    7914:	ldr	x0, [sp, #504]
    7918:	cmp	x0, #0x0
    791c:	b.ne	792c <d_print_comp_inner+0xde4>  // b.any
    7920:	ldr	x0, [sp, #24]
    7924:	ldr	x0, [x0, #8]
    7928:	str	x0, [sp, #504]
    792c:	ldr	x2, [sp, #504]
    7930:	ldr	w1, [sp, #36]
    7934:	ldr	x0, [sp, #40]
    7938:	bl	8d78 <d_print_comp>
    793c:	ldr	w0, [sp, #64]
    7940:	cmp	w0, #0x0
    7944:	b.ne	7958 <d_print_comp_inner+0xe10>  // b.any
    7948:	ldr	x2, [sp, #24]
    794c:	ldr	w1, [sp, #36]
    7950:	ldr	x0, [sp, #40]
    7954:	bl	92f4 <d_print_mod>
    7958:	ldr	x1, [sp, #48]
    795c:	ldr	x0, [sp, #40]
    7960:	str	x1, [x0, #296]
    7964:	ldr	w0, [sp, #492]
    7968:	cmp	w0, #0x0
    796c:	b.eq	8d20 <d_print_comp_inner+0x21d8>  // b.none
    7970:	ldr	x0, [sp, #40]
    7974:	ldr	x1, [sp, #496]
    7978:	str	x1, [x0, #288]
    797c:	b	8d20 <d_print_comp_inner+0x21d8>
    7980:	ldr	w0, [sp, #36]
    7984:	and	w0, w0, #0x4
    7988:	cmp	w0, #0x0
    798c:	b.ne	79bc <d_print_comp_inner+0xe74>  // b.any
    7990:	ldr	x0, [sp, #24]
    7994:	ldr	x0, [x0, #8]
    7998:	ldr	x1, [x0]
    799c:	ldr	x0, [sp, #24]
    79a0:	ldr	x0, [x0, #8]
    79a4:	ldr	w0, [x0, #8]
    79a8:	sxtw	x0, w0
    79ac:	mov	x2, x0
    79b0:	ldr	x0, [sp, #40]
    79b4:	bl	5fa8 <d_append_buffer>
    79b8:	b	8d6c <d_print_comp_inner+0x2224>
    79bc:	ldr	x0, [sp, #24]
    79c0:	ldr	x0, [x0, #8]
    79c4:	ldr	x1, [x0, #16]
    79c8:	ldr	x0, [sp, #24]
    79cc:	ldr	x0, [x0, #8]
    79d0:	ldr	w0, [x0, #24]
    79d4:	sxtw	x0, w0
    79d8:	mov	x2, x0
    79dc:	ldr	x0, [sp, #40]
    79e0:	bl	5fa8 <d_append_buffer>
    79e4:	b	8d6c <d_print_comp_inner+0x2224>
    79e8:	ldr	x0, [sp, #24]
    79ec:	ldr	x0, [x0, #8]
    79f0:	mov	x2, x0
    79f4:	ldr	w1, [sp, #36]
    79f8:	ldr	x0, [sp, #40]
    79fc:	bl	8d78 <d_print_comp>
    7a00:	b	8d6c <d_print_comp_inner+0x2224>
    7a04:	ldr	w0, [sp, #36]
    7a08:	and	w0, w0, #0x20
    7a0c:	cmp	w0, #0x0
    7a10:	b.eq	7a34 <d_print_comp_inner+0xeec>  // b.none
    7a14:	ldr	w0, [sp, #36]
    7a18:	and	w1, w0, #0xffffff9f
    7a1c:	ldr	x0, [sp, #40]
    7a20:	ldr	x0, [x0, #296]
    7a24:	mov	x3, x0
    7a28:	ldr	x2, [sp, #24]
    7a2c:	ldr	x0, [sp, #40]
    7a30:	bl	95a8 <d_print_function_type>
    7a34:	ldr	x0, [sp, #24]
    7a38:	ldr	x0, [x0, #8]
    7a3c:	cmp	x0, #0x0
    7a40:	b.eq	7a74 <d_print_comp_inner+0xf2c>  // b.none
    7a44:	ldr	w0, [sp, #36]
    7a48:	and	w0, w0, #0x20
    7a4c:	cmp	w0, #0x0
    7a50:	b.eq	7a74 <d_print_comp_inner+0xf2c>  // b.none
    7a54:	ldr	w0, [sp, #36]
    7a58:	and	w1, w0, #0xffffff9f
    7a5c:	ldr	x0, [sp, #24]
    7a60:	ldr	x0, [x0, #8]
    7a64:	mov	x2, x0
    7a68:	ldr	x0, [sp, #40]
    7a6c:	bl	8d78 <d_print_comp>
    7a70:	b	7b14 <d_print_comp_inner+0xfcc>
    7a74:	ldr	x0, [sp, #24]
    7a78:	ldr	x0, [x0, #8]
    7a7c:	cmp	x0, #0x0
    7a80:	b.eq	7b14 <d_print_comp_inner+0xfcc>  // b.none
    7a84:	ldr	w0, [sp, #36]
    7a88:	and	w0, w0, #0x40
    7a8c:	cmp	w0, #0x0
    7a90:	b.ne	7b14 <d_print_comp_inner+0xfcc>  // b.any
    7a94:	ldr	x0, [sp, #40]
    7a98:	ldr	x0, [x0, #296]
    7a9c:	str	x0, [sp, #48]
    7aa0:	ldr	x0, [sp, #40]
    7aa4:	add	x1, sp, #0x30
    7aa8:	str	x1, [x0, #296]
    7aac:	ldr	x0, [sp, #24]
    7ab0:	str	x0, [sp, #56]
    7ab4:	str	wzr, [sp, #64]
    7ab8:	ldr	x0, [sp, #40]
    7abc:	ldr	x0, [x0, #288]
    7ac0:	str	x0, [sp, #72]
    7ac4:	ldr	w0, [sp, #36]
    7ac8:	and	w1, w0, #0xffffff9f
    7acc:	ldr	x0, [sp, #24]
    7ad0:	ldr	x0, [x0, #8]
    7ad4:	mov	x2, x0
    7ad8:	ldr	x0, [sp, #40]
    7adc:	bl	8d78 <d_print_comp>
    7ae0:	ldr	x1, [sp, #48]
    7ae4:	ldr	x0, [sp, #40]
    7ae8:	str	x1, [x0, #296]
    7aec:	ldr	w0, [sp, #64]
    7af0:	cmp	w0, #0x0
    7af4:	b.ne	8d28 <d_print_comp_inner+0x21e0>  // b.any
    7af8:	ldr	w0, [sp, #36]
    7afc:	and	w0, w0, #0x20
    7b00:	cmp	w0, #0x0
    7b04:	b.ne	7b14 <d_print_comp_inner+0xfcc>  // b.any
    7b08:	mov	w1, #0x20                  	// #32
    7b0c:	ldr	x0, [sp, #40]
    7b10:	bl	5f48 <d_append_char>
    7b14:	ldr	w0, [sp, #36]
    7b18:	and	w0, w0, #0x20
    7b1c:	cmp	w0, #0x0
    7b20:	b.ne	8d30 <d_print_comp_inner+0x21e8>  // b.any
    7b24:	ldr	w0, [sp, #36]
    7b28:	and	w1, w0, #0xffffff9f
    7b2c:	ldr	x0, [sp, #40]
    7b30:	ldr	x0, [x0, #296]
    7b34:	mov	x3, x0
    7b38:	ldr	x2, [sp, #24]
    7b3c:	ldr	x0, [sp, #40]
    7b40:	bl	95a8 <d_print_function_type>
    7b44:	b	8d30 <d_print_comp_inner+0x21e8>
    7b48:	ldr	x0, [sp, #40]
    7b4c:	ldr	x0, [x0, #296]
    7b50:	str	x0, [sp, #248]
    7b54:	ldr	x0, [sp, #248]
    7b58:	str	x0, [sp, #48]
    7b5c:	ldr	x0, [sp, #40]
    7b60:	add	x1, sp, #0x30
    7b64:	str	x1, [x0, #296]
    7b68:	ldr	x0, [sp, #24]
    7b6c:	str	x0, [sp, #56]
    7b70:	str	wzr, [sp, #64]
    7b74:	ldr	x0, [sp, #40]
    7b78:	ldr	x0, [x0, #288]
    7b7c:	str	x0, [sp, #72]
    7b80:	mov	w0, #0x1                   	// #1
    7b84:	str	w0, [sp, #416]
    7b88:	ldr	x0, [sp, #248]
    7b8c:	str	x0, [sp, #408]
    7b90:	b	7c34 <d_print_comp_inner+0x10ec>
    7b94:	ldr	x0, [sp, #408]
    7b98:	ldr	w0, [x0, #16]
    7b9c:	cmp	w0, #0x0
    7ba0:	b.ne	7c28 <d_print_comp_inner+0x10e0>  // b.any
    7ba4:	ldr	w0, [sp, #416]
    7ba8:	cmp	w0, #0x3
    7bac:	b.ls	7bbc <d_print_comp_inner+0x1074>  // b.plast
    7bb0:	ldr	x0, [sp, #40]
    7bb4:	bl	5e98 <d_print_error>
    7bb8:	b	8d6c <d_print_comp_inner+0x2224>
    7bbc:	ldr	w0, [sp, #416]
    7bc0:	lsl	x0, x0, #5
    7bc4:	add	x1, sp, #0x30
    7bc8:	ldr	x3, [sp, #408]
    7bcc:	add	x2, x1, x0
    7bd0:	ldp	x0, x1, [x3]
    7bd4:	stp	x0, x1, [x2]
    7bd8:	ldp	x0, x1, [x3, #16]
    7bdc:	stp	x0, x1, [x2, #16]
    7be0:	ldr	x0, [sp, #40]
    7be4:	ldr	x2, [x0, #296]
    7be8:	ldr	w0, [sp, #416]
    7bec:	lsl	x0, x0, #5
    7bf0:	add	x1, sp, #0x30
    7bf4:	str	x2, [x1, x0]
    7bf8:	add	x1, sp, #0x30
    7bfc:	ldr	w0, [sp, #416]
    7c00:	lsl	x0, x0, #5
    7c04:	add	x1, x1, x0
    7c08:	ldr	x0, [sp, #40]
    7c0c:	str	x1, [x0, #296]
    7c10:	ldr	x0, [sp, #408]
    7c14:	mov	w1, #0x1                   	// #1
    7c18:	str	w1, [x0, #16]
    7c1c:	ldr	w0, [sp, #416]
    7c20:	add	w0, w0, #0x1
    7c24:	str	w0, [sp, #416]
    7c28:	ldr	x0, [sp, #408]
    7c2c:	ldr	x0, [x0]
    7c30:	str	x0, [sp, #408]
    7c34:	ldr	x0, [sp, #408]
    7c38:	cmp	x0, #0x0
    7c3c:	b.eq	7c7c <d_print_comp_inner+0x1134>  // b.none
    7c40:	ldr	x0, [sp, #408]
    7c44:	ldr	x0, [x0, #8]
    7c48:	ldr	w0, [x0]
    7c4c:	cmp	w0, #0x19
    7c50:	b.eq	7b94 <d_print_comp_inner+0x104c>  // b.none
    7c54:	ldr	x0, [sp, #408]
    7c58:	ldr	x0, [x0, #8]
    7c5c:	ldr	w0, [x0]
    7c60:	cmp	w0, #0x1a
    7c64:	b.eq	7b94 <d_print_comp_inner+0x104c>  // b.none
    7c68:	ldr	x0, [sp, #408]
    7c6c:	ldr	x0, [x0, #8]
    7c70:	ldr	w0, [x0]
    7c74:	cmp	w0, #0x1b
    7c78:	b.eq	7b94 <d_print_comp_inner+0x104c>  // b.none
    7c7c:	ldr	x0, [sp, #24]
    7c80:	ldr	x0, [x0, #16]
    7c84:	mov	x2, x0
    7c88:	ldr	w1, [sp, #36]
    7c8c:	ldr	x0, [sp, #40]
    7c90:	bl	8d78 <d_print_comp>
    7c94:	ldr	x0, [sp, #40]
    7c98:	ldr	x1, [sp, #248]
    7c9c:	str	x1, [x0, #296]
    7ca0:	ldr	w0, [sp, #64]
    7ca4:	cmp	w0, #0x0
    7ca8:	b.ne	8d38 <d_print_comp_inner+0x21f0>  // b.any
    7cac:	b	7cdc <d_print_comp_inner+0x1194>
    7cb0:	ldr	w0, [sp, #416]
    7cb4:	sub	w0, w0, #0x1
    7cb8:	str	w0, [sp, #416]
    7cbc:	ldr	w0, [sp, #416]
    7cc0:	lsl	x0, x0, #5
    7cc4:	add	x1, sp, #0x38
    7cc8:	ldr	x0, [x1, x0]
    7ccc:	mov	x2, x0
    7cd0:	ldr	w1, [sp, #36]
    7cd4:	ldr	x0, [sp, #40]
    7cd8:	bl	92f4 <d_print_mod>
    7cdc:	ldr	w0, [sp, #416]
    7ce0:	cmp	w0, #0x1
    7ce4:	b.hi	7cb0 <d_print_comp_inner+0x1168>  // b.pmore
    7ce8:	ldr	x0, [sp, #40]
    7cec:	ldr	x0, [x0, #296]
    7cf0:	mov	x3, x0
    7cf4:	ldr	x2, [sp, #24]
    7cf8:	ldr	w1, [sp, #36]
    7cfc:	ldr	x0, [sp, #40]
    7d00:	bl	97f4 <d_print_array_type>
    7d04:	b	8d6c <d_print_comp_inner+0x2224>
    7d08:	ldr	x0, [sp, #40]
    7d0c:	ldr	x0, [x0, #296]
    7d10:	str	x0, [sp, #48]
    7d14:	ldr	x0, [sp, #40]
    7d18:	add	x1, sp, #0x30
    7d1c:	str	x1, [x0, #296]
    7d20:	ldr	x0, [sp, #24]
    7d24:	str	x0, [sp, #56]
    7d28:	str	wzr, [sp, #64]
    7d2c:	ldr	x0, [sp, #40]
    7d30:	ldr	x0, [x0, #288]
    7d34:	str	x0, [sp, #72]
    7d38:	ldr	x0, [sp, #24]
    7d3c:	ldr	x0, [x0, #16]
    7d40:	mov	x2, x0
    7d44:	ldr	w1, [sp, #36]
    7d48:	ldr	x0, [sp, #40]
    7d4c:	bl	8d78 <d_print_comp>
    7d50:	ldr	w0, [sp, #64]
    7d54:	cmp	w0, #0x0
    7d58:	b.ne	7d6c <d_print_comp_inner+0x1224>  // b.any
    7d5c:	ldr	x2, [sp, #24]
    7d60:	ldr	w1, [sp, #36]
    7d64:	ldr	x0, [sp, #40]
    7d68:	bl	92f4 <d_print_mod>
    7d6c:	ldr	x1, [sp, #48]
    7d70:	ldr	x0, [sp, #40]
    7d74:	str	x1, [x0, #296]
    7d78:	b	8d6c <d_print_comp_inner+0x2224>
    7d7c:	ldr	x0, [sp, #24]
    7d80:	ldrsh	w0, [x0, #18]
    7d84:	cmp	w0, #0x0
    7d88:	b.eq	7d9c <d_print_comp_inner+0x1254>  // b.none
    7d8c:	adrp	x0, 0 <is_fnqual_component_type>
    7d90:	add	x1, x0, #0x0
    7d94:	ldr	x0, [sp, #40]
    7d98:	bl	600c <d_append_string>
    7d9c:	ldr	x0, [sp, #24]
    7da0:	ldr	x0, [x0, #8]
    7da4:	ldr	x1, [x0, #8]
    7da8:	adrp	x0, 0 <is_fnqual_component_type>
    7dac:	add	x0, x0, #0x0
    7db0:	cmp	x1, x0
    7db4:	b.eq	7ddc <d_print_comp_inner+0x1294>  // b.none
    7db8:	ldr	x0, [sp, #24]
    7dbc:	ldr	x0, [x0, #8]
    7dc0:	mov	x2, x0
    7dc4:	ldr	w1, [sp, #36]
    7dc8:	ldr	x0, [sp, #40]
    7dcc:	bl	8d78 <d_print_comp>
    7dd0:	mov	w1, #0x20                  	// #32
    7dd4:	ldr	x0, [sp, #40]
    7dd8:	bl	5f48 <d_append_char>
    7ddc:	ldr	x0, [sp, #24]
    7de0:	ldrsh	w0, [x0, #16]
    7de4:	cmp	w0, #0x0
    7de8:	b.eq	7e00 <d_print_comp_inner+0x12b8>  // b.none
    7dec:	adrp	x0, 0 <is_fnqual_component_type>
    7df0:	add	x1, x0, #0x0
    7df4:	ldr	x0, [sp, #40]
    7df8:	bl	600c <d_append_string>
    7dfc:	b	8d6c <d_print_comp_inner+0x2224>
    7e00:	adrp	x0, 0 <is_fnqual_component_type>
    7e04:	add	x1, x0, #0x0
    7e08:	ldr	x0, [sp, #40]
    7e0c:	bl	600c <d_append_string>
    7e10:	b	8d6c <d_print_comp_inner+0x2224>
    7e14:	ldr	x0, [sp, #24]
    7e18:	ldr	x0, [x0, #8]
    7e1c:	cmp	x0, #0x0
    7e20:	b.eq	7e3c <d_print_comp_inner+0x12f4>  // b.none
    7e24:	ldr	x0, [sp, #24]
    7e28:	ldr	x0, [x0, #8]
    7e2c:	mov	x2, x0
    7e30:	ldr	w1, [sp, #36]
    7e34:	ldr	x0, [sp, #40]
    7e38:	bl	8d78 <d_print_comp>
    7e3c:	ldr	x0, [sp, #24]
    7e40:	ldr	x0, [x0, #16]
    7e44:	cmp	x0, #0x0
    7e48:	b.eq	8d40 <d_print_comp_inner+0x21f8>  // b.none
    7e4c:	ldr	x0, [sp, #40]
    7e50:	ldr	x0, [x0, #256]
    7e54:	cmp	x0, #0xfd
    7e58:	b.ls	7e64 <d_print_comp_inner+0x131c>  // b.plast
    7e5c:	ldr	x0, [sp, #40]
    7e60:	bl	5edc <d_print_flush>
    7e64:	adrp	x0, 0 <is_fnqual_component_type>
    7e68:	add	x1, x0, #0x0
    7e6c:	ldr	x0, [sp, #40]
    7e70:	bl	600c <d_append_string>
    7e74:	ldr	x0, [sp, #40]
    7e78:	ldr	x0, [x0, #256]
    7e7c:	str	x0, [sp, #264]
    7e80:	ldr	x0, [sp, #40]
    7e84:	ldr	x0, [x0, #320]
    7e88:	str	x0, [sp, #256]
    7e8c:	ldr	x0, [sp, #24]
    7e90:	ldr	x0, [x0, #16]
    7e94:	mov	x2, x0
    7e98:	ldr	w1, [sp, #36]
    7e9c:	ldr	x0, [sp, #40]
    7ea0:	bl	8d78 <d_print_comp>
    7ea4:	ldr	x0, [sp, #40]
    7ea8:	ldr	x0, [x0, #320]
    7eac:	ldr	x1, [sp, #256]
    7eb0:	cmp	x1, x0
    7eb4:	b.ne	8d40 <d_print_comp_inner+0x21f8>  // b.any
    7eb8:	ldr	x0, [sp, #40]
    7ebc:	ldr	x0, [x0, #256]
    7ec0:	ldr	x1, [sp, #264]
    7ec4:	cmp	x1, x0
    7ec8:	b.ne	8d40 <d_print_comp_inner+0x21f8>  // b.any
    7ecc:	ldr	x0, [sp, #40]
    7ed0:	ldr	x0, [x0, #256]
    7ed4:	sub	x1, x0, #0x2
    7ed8:	ldr	x0, [sp, #40]
    7edc:	str	x1, [x0, #256]
    7ee0:	b	8d40 <d_print_comp_inner+0x21f8>
    7ee4:	ldr	x0, [sp, #24]
    7ee8:	ldr	x0, [x0, #8]
    7eec:	str	x0, [sp, #280]
    7ef0:	ldr	x0, [sp, #24]
    7ef4:	ldr	x0, [x0, #16]
    7ef8:	str	x0, [sp, #272]
    7efc:	ldr	x0, [sp, #280]
    7f00:	cmp	x0, #0x0
    7f04:	b.eq	7f18 <d_print_comp_inner+0x13d0>  // b.none
    7f08:	ldr	x2, [sp, #280]
    7f0c:	ldr	w1, [sp, #36]
    7f10:	ldr	x0, [sp, #40]
    7f14:	bl	8d78 <d_print_comp>
    7f18:	mov	w1, #0x7b                  	// #123
    7f1c:	ldr	x0, [sp, #40]
    7f20:	bl	5f48 <d_append_char>
    7f24:	ldr	x2, [sp, #272]
    7f28:	ldr	w1, [sp, #36]
    7f2c:	ldr	x0, [sp, #40]
    7f30:	bl	8d78 <d_print_comp>
    7f34:	mov	w1, #0x7d                  	// #125
    7f38:	ldr	x0, [sp, #40]
    7f3c:	bl	5f48 <d_append_char>
    7f40:	b	8d6c <d_print_comp_inner+0x2224>
    7f44:	ldr	x0, [sp, #24]
    7f48:	ldr	x0, [x0, #8]
    7f4c:	str	x0, [sp, #288]
    7f50:	ldr	x0, [sp, #288]
    7f54:	ldr	w0, [x0, #16]
    7f58:	str	w0, [sp, #404]
    7f5c:	adrp	x0, 0 <is_fnqual_component_type>
    7f60:	add	x1, x0, #0x0
    7f64:	ldr	x0, [sp, #40]
    7f68:	bl	600c <d_append_string>
    7f6c:	ldr	x0, [sp, #288]
    7f70:	ldr	x0, [x0, #8]
    7f74:	ldrb	w0, [x0]
    7f78:	cmp	w0, #0x60
    7f7c:	b.ls	7fa0 <d_print_comp_inner+0x1458>  // b.plast
    7f80:	ldr	x0, [sp, #288]
    7f84:	ldr	x0, [x0, #8]
    7f88:	ldrb	w0, [x0]
    7f8c:	cmp	w0, #0x7a
    7f90:	b.hi	7fa0 <d_print_comp_inner+0x1458>  // b.pmore
    7f94:	mov	w1, #0x20                  	// #32
    7f98:	ldr	x0, [sp, #40]
    7f9c:	bl	5f48 <d_append_char>
    7fa0:	ldr	x0, [sp, #288]
    7fa4:	ldr	x1, [x0, #8]
    7fa8:	ldrsw	x0, [sp, #404]
    7fac:	sub	x0, x0, #0x1
    7fb0:	add	x0, x1, x0
    7fb4:	ldrb	w0, [x0]
    7fb8:	cmp	w0, #0x20
    7fbc:	b.ne	7fcc <d_print_comp_inner+0x1484>  // b.any
    7fc0:	ldr	w0, [sp, #404]
    7fc4:	sub	w0, w0, #0x1
    7fc8:	str	w0, [sp, #404]
    7fcc:	ldr	x0, [sp, #288]
    7fd0:	ldr	x0, [x0, #8]
    7fd4:	ldrsw	x1, [sp, #404]
    7fd8:	mov	x2, x1
    7fdc:	mov	x1, x0
    7fe0:	ldr	x0, [sp, #40]
    7fe4:	bl	5fa8 <d_append_buffer>
    7fe8:	b	8d6c <d_print_comp_inner+0x2224>
    7fec:	adrp	x0, 0 <is_fnqual_component_type>
    7ff0:	add	x1, x0, #0x0
    7ff4:	ldr	x0, [sp, #40]
    7ff8:	bl	600c <d_append_string>
    7ffc:	ldr	x0, [sp, #24]
    8000:	ldr	x0, [x0, #16]
    8004:	mov	x2, x0
    8008:	ldr	w1, [sp, #36]
    800c:	ldr	x0, [sp, #40]
    8010:	bl	8d78 <d_print_comp>
    8014:	b	8d6c <d_print_comp_inner+0x2224>
    8018:	adrp	x0, 0 <is_fnqual_component_type>
    801c:	add	x1, x0, #0x0
    8020:	ldr	x0, [sp, #40]
    8024:	bl	600c <d_append_string>
    8028:	ldr	x2, [sp, #24]
    802c:	ldr	w1, [sp, #36]
    8030:	ldr	x0, [sp, #40]
    8034:	bl	99d8 <d_print_conversion>
    8038:	b	8d6c <d_print_comp_inner+0x2224>
    803c:	ldr	x0, [sp, #24]
    8040:	ldr	x0, [x0, #8]
    8044:	mov	x2, x0
    8048:	ldr	w1, [sp, #36]
    804c:	ldr	x0, [sp, #40]
    8050:	bl	9934 <d_print_expr_op>
    8054:	b	8d6c <d_print_comp_inner+0x2224>
    8058:	ldr	x0, [sp, #24]
    805c:	ldr	x0, [x0, #8]
    8060:	str	x0, [sp, #312]
    8064:	ldr	x0, [sp, #24]
    8068:	ldr	x0, [x0, #16]
    806c:	str	x0, [sp, #392]
    8070:	str	xzr, [sp, #384]
    8074:	ldr	x0, [sp, #312]
    8078:	ldr	w0, [x0]
    807c:	cmp	w0, #0x32
    8080:	b.ne	8130 <d_print_comp_inner+0x15e8>  // b.any
    8084:	ldr	x0, [sp, #312]
    8088:	ldr	x0, [x0, #8]
    808c:	ldr	x0, [x0]
    8090:	str	x0, [sp, #384]
    8094:	adrp	x0, 0 <is_fnqual_component_type>
    8098:	add	x1, x0, #0x0
    809c:	ldr	x0, [sp, #384]
    80a0:	bl	0 <strcmp>
    80a4:	cmp	w0, #0x0
    80a8:	b.ne	80f0 <d_print_comp_inner+0x15a8>  // b.any
    80ac:	ldr	x0, [sp, #392]
    80b0:	ldr	w0, [x0]
    80b4:	cmp	w0, #0x3
    80b8:	b.ne	80f0 <d_print_comp_inner+0x15a8>  // b.any
    80bc:	ldr	x0, [sp, #392]
    80c0:	ldr	x0, [x0, #8]
    80c4:	ldr	w0, [x0]
    80c8:	cmp	w0, #0x1
    80cc:	b.ne	80f0 <d_print_comp_inner+0x15a8>  // b.any
    80d0:	ldr	x0, [sp, #392]
    80d4:	ldr	x0, [x0, #16]
    80d8:	ldr	w0, [x0]
    80dc:	cmp	w0, #0x29
    80e0:	b.ne	80f0 <d_print_comp_inner+0x15a8>  // b.any
    80e4:	ldr	x0, [sp, #392]
    80e8:	ldr	x0, [x0, #8]
    80ec:	str	x0, [sp, #392]
    80f0:	ldr	x0, [sp, #392]
    80f4:	ldr	w0, [x0]
    80f8:	cmp	w0, #0x39
    80fc:	b.ne	8130 <d_print_comp_inner+0x15e8>  // b.any
    8100:	ldr	x0, [sp, #392]
    8104:	ldr	x0, [x0, #8]
    8108:	str	x0, [sp, #392]
    810c:	ldr	x2, [sp, #392]
    8110:	ldr	w1, [sp, #36]
    8114:	ldr	x0, [sp, #40]
    8118:	bl	6700 <d_print_subexpr>
    811c:	ldr	x2, [sp, #312]
    8120:	ldr	w1, [sp, #36]
    8124:	ldr	x0, [sp, #40]
    8128:	bl	9934 <d_print_expr_op>
    812c:	b	8d6c <d_print_comp_inner+0x2224>
    8130:	ldr	x0, [sp, #384]
    8134:	cmp	x0, #0x0
    8138:	b.eq	8180 <d_print_comp_inner+0x1638>  // b.none
    813c:	adrp	x0, 0 <is_fnqual_component_type>
    8140:	add	x1, x0, #0x0
    8144:	ldr	x0, [sp, #384]
    8148:	bl	0 <strcmp>
    814c:	cmp	w0, #0x0
    8150:	b.ne	8180 <d_print_comp_inner+0x1638>  // b.any
    8154:	ldr	x1, [sp, #392]
    8158:	ldr	x0, [sp, #40]
    815c:	bl	6420 <d_find_pack>
    8160:	str	x0, [sp, #304]
    8164:	ldr	x0, [sp, #304]
    8168:	bl	65e4 <d_pack_length>
    816c:	str	w0, [sp, #300]
    8170:	ldr	w1, [sp, #300]
    8174:	ldr	x0, [sp, #40]
    8178:	bl	6040 <d_append_num>
    817c:	b	8d6c <d_print_comp_inner+0x2224>
    8180:	ldr	x0, [sp, #384]
    8184:	cmp	x0, #0x0
    8188:	b.eq	81c4 <d_print_comp_inner+0x167c>  // b.none
    818c:	adrp	x0, 0 <is_fnqual_component_type>
    8190:	add	x1, x0, #0x0
    8194:	ldr	x0, [sp, #384]
    8198:	bl	0 <strcmp>
    819c:	cmp	w0, #0x0
    81a0:	b.ne	81c4 <d_print_comp_inner+0x167c>  // b.any
    81a4:	ldr	x1, [sp, #392]
    81a8:	ldr	x0, [sp, #40]
    81ac:	bl	6644 <d_args_length>
    81b0:	str	w0, [sp, #296]
    81b4:	ldr	w1, [sp, #296]
    81b8:	ldr	x0, [sp, #40]
    81bc:	bl	6040 <d_append_num>
    81c0:	b	8d6c <d_print_comp_inner+0x2224>
    81c4:	ldr	x0, [sp, #312]
    81c8:	ldr	w0, [x0]
    81cc:	cmp	w0, #0x34
    81d0:	b.eq	81e8 <d_print_comp_inner+0x16a0>  // b.none
    81d4:	ldr	x2, [sp, #312]
    81d8:	ldr	w1, [sp, #36]
    81dc:	ldr	x0, [sp, #40]
    81e0:	bl	9934 <d_print_expr_op>
    81e4:	b	8210 <d_print_comp_inner+0x16c8>
    81e8:	mov	w1, #0x28                  	// #40
    81ec:	ldr	x0, [sp, #40]
    81f0:	bl	5f48 <d_append_char>
    81f4:	ldr	x2, [sp, #312]
    81f8:	ldr	w1, [sp, #36]
    81fc:	ldr	x0, [sp, #40]
    8200:	bl	99a0 <d_print_cast>
    8204:	mov	w1, #0x29                  	// #41
    8208:	ldr	x0, [sp, #40]
    820c:	bl	5f48 <d_append_char>
    8210:	ldr	x0, [sp, #384]
    8214:	cmp	x0, #0x0
    8218:	b.eq	8248 <d_print_comp_inner+0x1700>  // b.none
    821c:	adrp	x0, 0 <is_fnqual_component_type>
    8220:	add	x1, x0, #0x0
    8224:	ldr	x0, [sp, #384]
    8228:	bl	0 <strcmp>
    822c:	cmp	w0, #0x0
    8230:	b.ne	8248 <d_print_comp_inner+0x1700>  // b.any
    8234:	ldr	x2, [sp, #392]
    8238:	ldr	w1, [sp, #36]
    823c:	ldr	x0, [sp, #40]
    8240:	bl	8d78 <d_print_comp>
    8244:	b	82ac <d_print_comp_inner+0x1764>
    8248:	ldr	x0, [sp, #384]
    824c:	cmp	x0, #0x0
    8250:	b.eq	8298 <d_print_comp_inner+0x1750>  // b.none
    8254:	adrp	x0, 0 <is_fnqual_component_type>
    8258:	add	x1, x0, #0x0
    825c:	ldr	x0, [sp, #384]
    8260:	bl	0 <strcmp>
    8264:	cmp	w0, #0x0
    8268:	b.ne	8298 <d_print_comp_inner+0x1750>  // b.any
    826c:	mov	w1, #0x28                  	// #40
    8270:	ldr	x0, [sp, #40]
    8274:	bl	5f48 <d_append_char>
    8278:	ldr	x2, [sp, #392]
    827c:	ldr	w1, [sp, #36]
    8280:	ldr	x0, [sp, #40]
    8284:	bl	8d78 <d_print_comp>
    8288:	mov	w1, #0x29                  	// #41
    828c:	ldr	x0, [sp, #40]
    8290:	bl	5f48 <d_append_char>
    8294:	b	82ac <d_print_comp_inner+0x1764>
    8298:	ldr	x2, [sp, #392]
    829c:	ldr	w1, [sp, #36]
    82a0:	ldr	x0, [sp, #40]
    82a4:	bl	6700 <d_print_subexpr>
    82a8:	b	8d6c <d_print_comp_inner+0x2224>
    82ac:	b	8d6c <d_print_comp_inner+0x2224>
    82b0:	ldr	x0, [sp, #24]
    82b4:	ldr	x0, [x0, #16]
    82b8:	ldr	w0, [x0]
    82bc:	cmp	w0, #0x39
    82c0:	b.eq	82d0 <d_print_comp_inner+0x1788>  // b.none
    82c4:	ldr	x0, [sp, #40]
    82c8:	bl	5e98 <d_print_error>
    82cc:	b	8d6c <d_print_comp_inner+0x2224>
    82d0:	ldr	x0, [sp, #24]
    82d4:	ldr	x0, [x0, #8]
    82d8:	bl	4178 <op_is_new_cast>
    82dc:	cmp	w0, #0x0
    82e0:	b.eq	8360 <d_print_comp_inner+0x1818>  // b.none
    82e4:	ldr	x0, [sp, #24]
    82e8:	ldr	x0, [x0, #8]
    82ec:	mov	x2, x0
    82f0:	ldr	w1, [sp, #36]
    82f4:	ldr	x0, [sp, #40]
    82f8:	bl	9934 <d_print_expr_op>
    82fc:	mov	w1, #0x3c                  	// #60
    8300:	ldr	x0, [sp, #40]
    8304:	bl	5f48 <d_append_char>
    8308:	ldr	x0, [sp, #24]
    830c:	ldr	x0, [x0, #16]
    8310:	ldr	x0, [x0, #8]
    8314:	mov	x2, x0
    8318:	ldr	w1, [sp, #36]
    831c:	ldr	x0, [sp, #40]
    8320:	bl	8d78 <d_print_comp>
    8324:	adrp	x0, 0 <is_fnqual_component_type>
    8328:	add	x1, x0, #0x0
    832c:	ldr	x0, [sp, #40]
    8330:	bl	600c <d_append_string>
    8334:	ldr	x0, [sp, #24]
    8338:	ldr	x0, [x0, #16]
    833c:	ldr	x0, [x0, #16]
    8340:	mov	x2, x0
    8344:	ldr	w1, [sp, #36]
    8348:	ldr	x0, [sp, #40]
    834c:	bl	8d78 <d_print_comp>
    8350:	mov	w1, #0x29                  	// #41
    8354:	ldr	x0, [sp, #40]
    8358:	bl	5f48 <d_append_char>
    835c:	b	8d6c <d_print_comp_inner+0x2224>
    8360:	ldr	x2, [sp, #24]
    8364:	ldr	w1, [sp, #36]
    8368:	ldr	x0, [sp, #40]
    836c:	bl	695c <d_maybe_print_fold_expression>
    8370:	cmp	w0, #0x0
    8374:	b.ne	8d48 <d_print_comp_inner+0x2200>  // b.any
    8378:	ldr	x0, [sp, #24]
    837c:	ldr	x0, [x0, #8]
    8380:	ldr	w0, [x0]
    8384:	cmp	w0, #0x32
    8388:	b.ne	83cc <d_print_comp_inner+0x1884>  // b.any
    838c:	ldr	x0, [sp, #24]
    8390:	ldr	x0, [x0, #8]
    8394:	ldr	x0, [x0, #8]
    8398:	ldr	w0, [x0, #16]
    839c:	cmp	w0, #0x1
    83a0:	b.ne	83cc <d_print_comp_inner+0x1884>  // b.any
    83a4:	ldr	x0, [sp, #24]
    83a8:	ldr	x0, [x0, #8]
    83ac:	ldr	x0, [x0, #8]
    83b0:	ldr	x0, [x0, #8]
    83b4:	ldrb	w0, [x0]
    83b8:	cmp	w0, #0x3e
    83bc:	b.ne	83cc <d_print_comp_inner+0x1884>  // b.any
    83c0:	mov	w1, #0x28                  	// #40
    83c4:	ldr	x0, [sp, #40]
    83c8:	bl	5f48 <d_append_char>
    83cc:	ldr	x0, [sp, #24]
    83d0:	ldr	x0, [x0, #8]
    83d4:	ldr	x0, [x0, #8]
    83d8:	ldr	x2, [x0]
    83dc:	adrp	x0, 0 <is_fnqual_component_type>
    83e0:	add	x1, x0, #0x0
    83e4:	mov	x0, x2
    83e8:	bl	0 <strcmp>
    83ec:	cmp	w0, #0x0
    83f0:	b.ne	8454 <d_print_comp_inner+0x190c>  // b.any
    83f4:	ldr	x0, [sp, #24]
    83f8:	ldr	x0, [x0, #16]
    83fc:	ldr	x0, [x0, #8]
    8400:	ldr	w0, [x0]
    8404:	cmp	w0, #0x3
    8408:	b.ne	8454 <d_print_comp_inner+0x190c>  // b.any
    840c:	ldr	x0, [sp, #24]
    8410:	ldr	x0, [x0, #16]
    8414:	ldr	x0, [x0, #8]
    8418:	str	x0, [sp, #320]
    841c:	ldr	x0, [sp, #320]
    8420:	ldr	x0, [x0, #16]
    8424:	ldr	w0, [x0]
    8428:	cmp	w0, #0x29
    842c:	b.eq	8438 <d_print_comp_inner+0x18f0>  // b.none
    8430:	ldr	x0, [sp, #40]
    8434:	bl	5e98 <d_print_error>
    8438:	ldr	x0, [sp, #320]
    843c:	ldr	x0, [x0, #8]
    8440:	mov	x2, x0
    8444:	ldr	w1, [sp, #36]
    8448:	ldr	x0, [sp, #40]
    844c:	bl	6700 <d_print_subexpr>
    8450:	b	8470 <d_print_comp_inner+0x1928>
    8454:	ldr	x0, [sp, #24]
    8458:	ldr	x0, [x0, #16]
    845c:	ldr	x0, [x0, #8]
    8460:	mov	x2, x0
    8464:	ldr	w1, [sp, #36]
    8468:	ldr	x0, [sp, #40]
    846c:	bl	6700 <d_print_subexpr>
    8470:	ldr	x0, [sp, #24]
    8474:	ldr	x0, [x0, #8]
    8478:	ldr	x0, [x0, #8]
    847c:	ldr	x2, [x0]
    8480:	adrp	x0, 0 <is_fnqual_component_type>
    8484:	add	x1, x0, #0x0
    8488:	mov	x0, x2
    848c:	bl	0 <strcmp>
    8490:	cmp	w0, #0x0
    8494:	b.ne	84d0 <d_print_comp_inner+0x1988>  // b.any
    8498:	mov	w1, #0x5b                  	// #91
    849c:	ldr	x0, [sp, #40]
    84a0:	bl	5f48 <d_append_char>
    84a4:	ldr	x0, [sp, #24]
    84a8:	ldr	x0, [x0, #16]
    84ac:	ldr	x0, [x0, #16]
    84b0:	mov	x2, x0
    84b4:	ldr	w1, [sp, #36]
    84b8:	ldr	x0, [sp, #40]
    84bc:	bl	8d78 <d_print_comp>
    84c0:	mov	w1, #0x5d                  	// #93
    84c4:	ldr	x0, [sp, #40]
    84c8:	bl	5f48 <d_append_char>
    84cc:	b	852c <d_print_comp_inner+0x19e4>
    84d0:	ldr	x0, [sp, #24]
    84d4:	ldr	x0, [x0, #8]
    84d8:	ldr	x0, [x0, #8]
    84dc:	ldr	x2, [x0]
    84e0:	adrp	x0, 0 <is_fnqual_component_type>
    84e4:	add	x1, x0, #0x0
    84e8:	mov	x0, x2
    84ec:	bl	0 <strcmp>
    84f0:	cmp	w0, #0x0
    84f4:	b.eq	8510 <d_print_comp_inner+0x19c8>  // b.none
    84f8:	ldr	x0, [sp, #24]
    84fc:	ldr	x0, [x0, #8]
    8500:	mov	x2, x0
    8504:	ldr	w1, [sp, #36]
    8508:	ldr	x0, [sp, #40]
    850c:	bl	9934 <d_print_expr_op>
    8510:	ldr	x0, [sp, #24]
    8514:	ldr	x0, [x0, #16]
    8518:	ldr	x0, [x0, #16]
    851c:	mov	x2, x0
    8520:	ldr	w1, [sp, #36]
    8524:	ldr	x0, [sp, #40]
    8528:	bl	6700 <d_print_subexpr>
    852c:	ldr	x0, [sp, #24]
    8530:	ldr	x0, [x0, #8]
    8534:	ldr	w0, [x0]
    8538:	cmp	w0, #0x32
    853c:	b.ne	8d50 <d_print_comp_inner+0x2208>  // b.any
    8540:	ldr	x0, [sp, #24]
    8544:	ldr	x0, [x0, #8]
    8548:	ldr	x0, [x0, #8]
    854c:	ldr	w0, [x0, #16]
    8550:	cmp	w0, #0x1
    8554:	b.ne	8d50 <d_print_comp_inner+0x2208>  // b.any
    8558:	ldr	x0, [sp, #24]
    855c:	ldr	x0, [x0, #8]
    8560:	ldr	x0, [x0, #8]
    8564:	ldr	x0, [x0, #8]
    8568:	ldrb	w0, [x0]
    856c:	cmp	w0, #0x3e
    8570:	b.ne	8d50 <d_print_comp_inner+0x2208>  // b.any
    8574:	mov	w1, #0x29                  	// #41
    8578:	ldr	x0, [sp, #40]
    857c:	bl	5f48 <d_append_char>
    8580:	b	8d50 <d_print_comp_inner+0x2208>
    8584:	ldr	x0, [sp, #40]
    8588:	bl	5e98 <d_print_error>
    858c:	b	8d6c <d_print_comp_inner+0x2224>
    8590:	ldr	x0, [sp, #24]
    8594:	ldr	x0, [x0, #16]
    8598:	ldr	w0, [x0]
    859c:	cmp	w0, #0x3b
    85a0:	b.ne	85bc <d_print_comp_inner+0x1a74>  // b.any
    85a4:	ldr	x0, [sp, #24]
    85a8:	ldr	x0, [x0, #16]
    85ac:	ldr	x0, [x0, #16]
    85b0:	ldr	w0, [x0]
    85b4:	cmp	w0, #0x3c
    85b8:	b.eq	85c8 <d_print_comp_inner+0x1a80>  // b.none
    85bc:	ldr	x0, [sp, #40]
    85c0:	bl	5e98 <d_print_error>
    85c4:	b	8d6c <d_print_comp_inner+0x2224>
    85c8:	ldr	x2, [sp, #24]
    85cc:	ldr	w1, [sp, #36]
    85d0:	ldr	x0, [sp, #40]
    85d4:	bl	695c <d_maybe_print_fold_expression>
    85d8:	cmp	w0, #0x0
    85dc:	b.ne	8d58 <d_print_comp_inner+0x2210>  // b.any
    85e0:	ldr	x0, [sp, #24]
    85e4:	ldr	x0, [x0, #8]
    85e8:	str	x0, [sp, #352]
    85ec:	ldr	x0, [sp, #24]
    85f0:	ldr	x0, [x0, #16]
    85f4:	ldr	x0, [x0, #8]
    85f8:	str	x0, [sp, #344]
    85fc:	ldr	x0, [sp, #24]
    8600:	ldr	x0, [x0, #16]
    8604:	ldr	x0, [x0, #16]
    8608:	ldr	x0, [x0, #8]
    860c:	str	x0, [sp, #336]
    8610:	ldr	x0, [sp, #24]
    8614:	ldr	x0, [x0, #16]
    8618:	ldr	x0, [x0, #16]
    861c:	ldr	x0, [x0, #16]
    8620:	str	x0, [sp, #328]
    8624:	ldr	x0, [sp, #352]
    8628:	ldr	x0, [x0, #8]
    862c:	ldr	x2, [x0]
    8630:	adrp	x0, 0 <is_fnqual_component_type>
    8634:	add	x1, x0, #0x0
    8638:	mov	x0, x2
    863c:	bl	0 <strcmp>
    8640:	cmp	w0, #0x0
    8644:	b.ne	869c <d_print_comp_inner+0x1b54>  // b.any
    8648:	ldr	x2, [sp, #344]
    864c:	ldr	w1, [sp, #36]
    8650:	ldr	x0, [sp, #40]
    8654:	bl	6700 <d_print_subexpr>
    8658:	ldr	x2, [sp, #352]
    865c:	ldr	w1, [sp, #36]
    8660:	ldr	x0, [sp, #40]
    8664:	bl	9934 <d_print_expr_op>
    8668:	ldr	x2, [sp, #336]
    866c:	ldr	w1, [sp, #36]
    8670:	ldr	x0, [sp, #40]
    8674:	bl	6700 <d_print_subexpr>
    8678:	adrp	x0, 0 <is_fnqual_component_type>
    867c:	add	x1, x0, #0x0
    8680:	ldr	x0, [sp, #40]
    8684:	bl	600c <d_append_string>
    8688:	ldr	x2, [sp, #328]
    868c:	ldr	w1, [sp, #36]
    8690:	ldr	x0, [sp, #40]
    8694:	bl	6700 <d_print_subexpr>
    8698:	b	8d60 <d_print_comp_inner+0x2218>
    869c:	adrp	x0, 0 <is_fnqual_component_type>
    86a0:	add	x1, x0, #0x0
    86a4:	ldr	x0, [sp, #40]
    86a8:	bl	600c <d_append_string>
    86ac:	ldr	x0, [sp, #344]
    86b0:	ldr	x0, [x0, #8]
    86b4:	cmp	x0, #0x0
    86b8:	b.eq	86d8 <d_print_comp_inner+0x1b90>  // b.none
    86bc:	ldr	x2, [sp, #344]
    86c0:	ldr	w1, [sp, #36]
    86c4:	ldr	x0, [sp, #40]
    86c8:	bl	6700 <d_print_subexpr>
    86cc:	mov	w1, #0x20                  	// #32
    86d0:	ldr	x0, [sp, #40]
    86d4:	bl	5f48 <d_append_char>
    86d8:	ldr	x2, [sp, #336]
    86dc:	ldr	w1, [sp, #36]
    86e0:	ldr	x0, [sp, #40]
    86e4:	bl	8d78 <d_print_comp>
    86e8:	ldr	x0, [sp, #328]
    86ec:	cmp	x0, #0x0
    86f0:	b.eq	8d60 <d_print_comp_inner+0x2218>  // b.none
    86f4:	ldr	x2, [sp, #328]
    86f8:	ldr	w1, [sp, #36]
    86fc:	ldr	x0, [sp, #40]
    8700:	bl	6700 <d_print_subexpr>
    8704:	b	8d60 <d_print_comp_inner+0x2218>
    8708:	ldr	x0, [sp, #40]
    870c:	bl	5e98 <d_print_error>
    8710:	b	8d6c <d_print_comp_inner+0x2224>
    8714:	str	wzr, [sp, #380]
    8718:	ldr	x0, [sp, #24]
    871c:	ldr	x0, [x0, #8]
    8720:	ldr	w0, [x0]
    8724:	cmp	w0, #0x27
    8728:	b.ne	8908 <d_print_comp_inner+0x1dc0>  // b.any
    872c:	ldr	x0, [sp, #24]
    8730:	ldr	x0, [x0, #8]
    8734:	ldr	x0, [x0, #8]
    8738:	ldr	w0, [x0, #28]
    873c:	str	w0, [sp, #380]
    8740:	ldr	w0, [sp, #380]
    8744:	cmp	w0, #0x6
    8748:	b.hi	875c <d_print_comp_inner+0x1c14>  // b.pmore
    874c:	ldr	w0, [sp, #380]
    8750:	cmp	w0, #0x0
    8754:	b.ne	876c <d_print_comp_inner+0x1c24>  // b.any
    8758:	b	8914 <d_print_comp_inner+0x1dcc>
    875c:	ldr	w0, [sp, #380]
    8760:	cmp	w0, #0x7
    8764:	b.eq	887c <d_print_comp_inner+0x1d34>  // b.none
    8768:	b	8914 <d_print_comp_inner+0x1dcc>
    876c:	ldr	x0, [sp, #24]
    8770:	ldr	x0, [x0, #16]
    8774:	ldr	w0, [x0]
    8778:	cmp	w0, #0x0
    877c:	b.ne	8910 <d_print_comp_inner+0x1dc8>  // b.any
    8780:	ldr	x0, [sp, #24]
    8784:	ldr	w0, [x0]
    8788:	cmp	w0, #0x3e
    878c:	b.ne	879c <d_print_comp_inner+0x1c54>  // b.any
    8790:	mov	w1, #0x2d                  	// #45
    8794:	ldr	x0, [sp, #40]
    8798:	bl	5f48 <d_append_char>
    879c:	ldr	x0, [sp, #24]
    87a0:	ldr	x0, [x0, #16]
    87a4:	mov	x2, x0
    87a8:	ldr	w1, [sp, #36]
    87ac:	ldr	x0, [sp, #40]
    87b0:	bl	8d78 <d_print_comp>
    87b4:	ldr	w0, [sp, #380]
    87b8:	cmp	w0, #0x6
    87bc:	b.eq	8860 <d_print_comp_inner+0x1d18>  // b.none
    87c0:	ldr	w0, [sp, #380]
    87c4:	cmp	w0, #0x6
    87c8:	b.hi	8874 <d_print_comp_inner+0x1d2c>  // b.pmore
    87cc:	ldr	w0, [sp, #380]
    87d0:	cmp	w0, #0x5
    87d4:	b.eq	884c <d_print_comp_inner+0x1d04>  // b.none
    87d8:	ldr	w0, [sp, #380]
    87dc:	cmp	w0, #0x5
    87e0:	b.hi	8874 <d_print_comp_inner+0x1d2c>  // b.pmore
    87e4:	ldr	w0, [sp, #380]
    87e8:	cmp	w0, #0x4
    87ec:	b.eq	8838 <d_print_comp_inner+0x1cf0>  // b.none
    87f0:	ldr	w0, [sp, #380]
    87f4:	cmp	w0, #0x4
    87f8:	b.hi	8874 <d_print_comp_inner+0x1d2c>  // b.pmore
    87fc:	ldr	w0, [sp, #380]
    8800:	cmp	w0, #0x2
    8804:	b.eq	8818 <d_print_comp_inner+0x1cd0>  // b.none
    8808:	ldr	w0, [sp, #380]
    880c:	cmp	w0, #0x3
    8810:	b.eq	8828 <d_print_comp_inner+0x1ce0>  // b.none
    8814:	b	8874 <d_print_comp_inner+0x1d2c>
    8818:	mov	w1, #0x75                  	// #117
    881c:	ldr	x0, [sp, #40]
    8820:	bl	5f48 <d_append_char>
    8824:	b	8878 <d_print_comp_inner+0x1d30>
    8828:	mov	w1, #0x6c                  	// #108
    882c:	ldr	x0, [sp, #40]
    8830:	bl	5f48 <d_append_char>
    8834:	b	8878 <d_print_comp_inner+0x1d30>
    8838:	adrp	x0, 0 <is_fnqual_component_type>
    883c:	add	x1, x0, #0x0
    8840:	ldr	x0, [sp, #40]
    8844:	bl	600c <d_append_string>
    8848:	b	8878 <d_print_comp_inner+0x1d30>
    884c:	adrp	x0, 0 <is_fnqual_component_type>
    8850:	add	x1, x0, #0x0
    8854:	ldr	x0, [sp, #40]
    8858:	bl	600c <d_append_string>
    885c:	b	8878 <d_print_comp_inner+0x1d30>
    8860:	adrp	x0, 0 <is_fnqual_component_type>
    8864:	add	x1, x0, #0x0
    8868:	ldr	x0, [sp, #40]
    886c:	bl	600c <d_append_string>
    8870:	b	8878 <d_print_comp_inner+0x1d30>
    8874:	nop
    8878:	b	8d6c <d_print_comp_inner+0x2224>
    887c:	ldr	x0, [sp, #24]
    8880:	ldr	x0, [x0, #16]
    8884:	ldr	w0, [x0]
    8888:	cmp	w0, #0x0
    888c:	b.ne	8900 <d_print_comp_inner+0x1db8>  // b.any
    8890:	ldr	x0, [sp, #24]
    8894:	ldr	x0, [x0, #16]
    8898:	ldr	w0, [x0, #16]
    889c:	cmp	w0, #0x1
    88a0:	b.ne	8900 <d_print_comp_inner+0x1db8>  // b.any
    88a4:	ldr	x0, [sp, #24]
    88a8:	ldr	w0, [x0]
    88ac:	cmp	w0, #0x3d
    88b0:	b.ne	8900 <d_print_comp_inner+0x1db8>  // b.any
    88b4:	ldr	x0, [sp, #24]
    88b8:	ldr	x0, [x0, #16]
    88bc:	ldr	x0, [x0, #8]
    88c0:	ldrb	w0, [x0]
    88c4:	cmp	w0, #0x30
    88c8:	b.eq	88d8 <d_print_comp_inner+0x1d90>  // b.none
    88cc:	cmp	w0, #0x31
    88d0:	b.eq	88ec <d_print_comp_inner+0x1da4>  // b.none
    88d4:	b	8904 <d_print_comp_inner+0x1dbc>
    88d8:	adrp	x0, 0 <is_fnqual_component_type>
    88dc:	add	x1, x0, #0x0
    88e0:	ldr	x0, [sp, #40]
    88e4:	bl	600c <d_append_string>
    88e8:	b	8d6c <d_print_comp_inner+0x2224>
    88ec:	adrp	x0, 0 <is_fnqual_component_type>
    88f0:	add	x1, x0, #0x0
    88f4:	ldr	x0, [sp, #40]
    88f8:	bl	600c <d_append_string>
    88fc:	b	8d6c <d_print_comp_inner+0x2224>
    8900:	nop
    8904:	b	8914 <d_print_comp_inner+0x1dcc>
    8908:	nop
    890c:	b	8914 <d_print_comp_inner+0x1dcc>
    8910:	nop
    8914:	mov	w1, #0x28                  	// #40
    8918:	ldr	x0, [sp, #40]
    891c:	bl	5f48 <d_append_char>
    8920:	ldr	x0, [sp, #24]
    8924:	ldr	x0, [x0, #8]
    8928:	mov	x2, x0
    892c:	ldr	w1, [sp, #36]
    8930:	ldr	x0, [sp, #40]
    8934:	bl	8d78 <d_print_comp>
    8938:	mov	w1, #0x29                  	// #41
    893c:	ldr	x0, [sp, #40]
    8940:	bl	5f48 <d_append_char>
    8944:	ldr	x0, [sp, #24]
    8948:	ldr	w0, [x0]
    894c:	cmp	w0, #0x3e
    8950:	b.ne	8960 <d_print_comp_inner+0x1e18>  // b.any
    8954:	mov	w1, #0x2d                  	// #45
    8958:	ldr	x0, [sp, #40]
    895c:	bl	5f48 <d_append_char>
    8960:	ldr	w0, [sp, #380]
    8964:	cmp	w0, #0x8
    8968:	b.ne	8978 <d_print_comp_inner+0x1e30>  // b.any
    896c:	mov	w1, #0x5b                  	// #91
    8970:	ldr	x0, [sp, #40]
    8974:	bl	5f48 <d_append_char>
    8978:	ldr	x0, [sp, #24]
    897c:	ldr	x0, [x0, #16]
    8980:	mov	x2, x0
    8984:	ldr	w1, [sp, #36]
    8988:	ldr	x0, [sp, #40]
    898c:	bl	8d78 <d_print_comp>
    8990:	ldr	w0, [sp, #380]
    8994:	cmp	w0, #0x8
    8998:	b.ne	8d68 <d_print_comp_inner+0x2220>  // b.any
    899c:	mov	w1, #0x5d                  	// #93
    89a0:	ldr	x0, [sp, #40]
    89a4:	bl	5f48 <d_append_char>
    89a8:	b	8d68 <d_print_comp_inner+0x2220>
    89ac:	ldr	x0, [sp, #24]
    89b0:	ldr	x0, [x0, #8]
    89b4:	mov	w1, w0
    89b8:	ldr	x0, [sp, #40]
    89bc:	bl	6040 <d_append_num>
    89c0:	b	8d6c <d_print_comp_inner+0x2224>
    89c4:	adrp	x0, 0 <is_fnqual_component_type>
    89c8:	add	x1, x0, #0x0
    89cc:	ldr	x0, [sp, #40]
    89d0:	bl	600c <d_append_string>
    89d4:	ldr	x0, [sp, #24]
    89d8:	ldr	x0, [x0, #8]
    89dc:	mov	x2, x0
    89e0:	ldr	w1, [sp, #36]
    89e4:	ldr	x0, [sp, #40]
    89e8:	bl	8d78 <d_print_comp>
    89ec:	b	8d6c <d_print_comp_inner+0x2224>
    89f0:	ldr	x0, [sp, #24]
    89f4:	ldr	x0, [x0, #8]
    89f8:	mov	x2, x0
    89fc:	ldr	w1, [sp, #36]
    8a00:	ldr	x0, [sp, #40]
    8a04:	bl	8d78 <d_print_comp>
    8a08:	ldr	x0, [sp, #24]
    8a0c:	ldr	x0, [x0, #16]
    8a10:	mov	x2, x0
    8a14:	ldr	w1, [sp, #36]
    8a18:	ldr	x0, [sp, #40]
    8a1c:	bl	8d78 <d_print_comp>
    8a20:	b	8d6c <d_print_comp_inner+0x2224>
    8a24:	ldr	x0, [sp, #24]
    8a28:	ldr	w0, [x0, #8]
    8a2c:	and	w0, w0, #0xff
    8a30:	mov	w1, w0
    8a34:	ldr	x0, [sp, #40]
    8a38:	bl	5f48 <d_append_char>
    8a3c:	b	8d6c <d_print_comp_inner+0x2224>
    8a40:	adrp	x0, 0 <is_fnqual_component_type>
    8a44:	add	x1, x0, #0x0
    8a48:	ldr	x0, [sp, #40]
    8a4c:	bl	600c <d_append_string>
    8a50:	ldr	x0, [sp, #24]
    8a54:	ldr	x0, [x0, #8]
    8a58:	mov	x2, x0
    8a5c:	ldr	w1, [sp, #36]
    8a60:	ldr	x0, [sp, #40]
    8a64:	bl	8d78 <d_print_comp>
    8a68:	mov	w1, #0x29                  	// #41
    8a6c:	ldr	x0, [sp, #40]
    8a70:	bl	5f48 <d_append_char>
    8a74:	b	8d6c <d_print_comp_inner+0x2224>
    8a78:	ldr	x0, [sp, #24]
    8a7c:	ldr	x0, [x0, #8]
    8a80:	mov	x1, x0
    8a84:	ldr	x0, [sp, #40]
    8a88:	bl	6420 <d_find_pack>
    8a8c:	str	x0, [sp, #368]
    8a90:	ldr	x0, [sp, #368]
    8a94:	cmp	x0, #0x0
    8a98:	b.ne	8ac8 <d_print_comp_inner+0x1f80>  // b.any
    8a9c:	ldr	x0, [sp, #24]
    8aa0:	ldr	x0, [x0, #8]
    8aa4:	mov	x2, x0
    8aa8:	ldr	w1, [sp, #36]
    8aac:	ldr	x0, [sp, #40]
    8ab0:	bl	6700 <d_print_subexpr>
    8ab4:	adrp	x0, 0 <is_fnqual_component_type>
    8ab8:	add	x1, x0, #0x0
    8abc:	ldr	x0, [sp, #40]
    8ac0:	bl	600c <d_append_string>
    8ac4:	b	8d6c <d_print_comp_inner+0x2224>
    8ac8:	ldr	x0, [sp, #368]
    8acc:	bl	65e4 <d_pack_length>
    8ad0:	str	w0, [sp, #364]
    8ad4:	ldr	x0, [sp, #24]
    8ad8:	ldr	x0, [x0, #8]
    8adc:	str	x0, [sp, #24]
    8ae0:	str	wzr, [sp, #376]
    8ae4:	b	8b34 <d_print_comp_inner+0x1fec>
    8ae8:	ldr	x0, [sp, #40]
    8aec:	ldr	w1, [sp, #376]
    8af0:	str	w1, [x0, #316]
    8af4:	ldr	x2, [sp, #24]
    8af8:	ldr	w1, [sp, #36]
    8afc:	ldr	x0, [sp, #40]
    8b00:	bl	8d78 <d_print_comp>
    8b04:	ldr	w0, [sp, #364]
    8b08:	sub	w0, w0, #0x1
    8b0c:	ldr	w1, [sp, #376]
    8b10:	cmp	w1, w0
    8b14:	b.ge	8b28 <d_print_comp_inner+0x1fe0>  // b.tcont
    8b18:	adrp	x0, 0 <is_fnqual_component_type>
    8b1c:	add	x1, x0, #0x0
    8b20:	ldr	x0, [sp, #40]
    8b24:	bl	600c <d_append_string>
    8b28:	ldr	w0, [sp, #376]
    8b2c:	add	w0, w0, #0x1
    8b30:	str	w0, [sp, #376]
    8b34:	ldr	w1, [sp, #376]
    8b38:	ldr	w0, [sp, #364]
    8b3c:	cmp	w1, w0
    8b40:	b.lt	8ae8 <d_print_comp_inner+0x1fa0>  // b.tstop
    8b44:	b	8d6c <d_print_comp_inner+0x2224>
    8b48:	ldr	x0, [sp, #24]
    8b4c:	ldr	x0, [x0, #8]
    8b50:	str	x0, [sp, #232]
    8b54:	ldr	x0, [sp, #232]
    8b58:	cmp	x0, #0x0
    8b5c:	b.ne	8b74 <d_print_comp_inner+0x202c>  // b.any
    8b60:	adrp	x0, 0 <is_fnqual_component_type>
    8b64:	add	x1, x0, #0x0
    8b68:	ldr	x0, [sp, #40]
    8b6c:	bl	600c <d_append_string>
    8b70:	b	8d6c <d_print_comp_inner+0x2224>
    8b74:	adrp	x0, 0 <is_fnqual_component_type>
    8b78:	add	x1, x0, #0x0
    8b7c:	ldr	x0, [sp, #40]
    8b80:	bl	600c <d_append_string>
    8b84:	ldr	x0, [sp, #232]
    8b88:	mov	w1, w0
    8b8c:	ldr	x0, [sp, #40]
    8b90:	bl	6040 <d_append_num>
    8b94:	mov	w1, #0x7d                  	// #125
    8b98:	ldr	x0, [sp, #40]
    8b9c:	bl	5f48 <d_append_char>
    8ba0:	b	8d6c <d_print_comp_inner+0x2224>
    8ba4:	adrp	x0, 0 <is_fnqual_component_type>
    8ba8:	add	x1, x0, #0x0
    8bac:	ldr	x0, [sp, #40]
    8bb0:	bl	600c <d_append_string>
    8bb4:	ldr	x0, [sp, #24]
    8bb8:	ldr	x0, [x0, #8]
    8bbc:	mov	x2, x0
    8bc0:	ldr	w1, [sp, #36]
    8bc4:	ldr	x0, [sp, #40]
    8bc8:	bl	8d78 <d_print_comp>
    8bcc:	b	8d6c <d_print_comp_inner+0x2224>
    8bd0:	adrp	x0, 0 <is_fnqual_component_type>
    8bd4:	add	x1, x0, #0x0
    8bd8:	ldr	x0, [sp, #40]
    8bdc:	bl	600c <d_append_string>
    8be0:	ldr	x0, [sp, #24]
    8be4:	ldr	x0, [x0, #8]
    8be8:	mov	x2, x0
    8bec:	ldr	w1, [sp, #36]
    8bf0:	ldr	x0, [sp, #40]
    8bf4:	bl	8d78 <d_print_comp>
    8bf8:	b	8d6c <d_print_comp_inner+0x2224>
    8bfc:	adrp	x0, 0 <is_fnqual_component_type>
    8c00:	add	x1, x0, #0x0
    8c04:	ldr	x0, [sp, #40]
    8c08:	bl	600c <d_append_string>
    8c0c:	ldr	x0, [sp, #40]
    8c10:	ldr	w0, [x0, #312]
    8c14:	add	w1, w0, #0x1
    8c18:	ldr	x0, [sp, #40]
    8c1c:	str	w1, [x0, #312]
    8c20:	ldr	x0, [sp, #24]
    8c24:	ldr	x0, [x0, #8]
    8c28:	mov	x2, x0
    8c2c:	ldr	w1, [sp, #36]
    8c30:	ldr	x0, [sp, #40]
    8c34:	bl	8d78 <d_print_comp>
    8c38:	ldr	x0, [sp, #40]
    8c3c:	ldr	w0, [x0, #312]
    8c40:	sub	w1, w0, #0x1
    8c44:	ldr	x0, [sp, #40]
    8c48:	str	w1, [x0, #312]
    8c4c:	adrp	x0, 0 <is_fnqual_component_type>
    8c50:	add	x1, x0, #0x0
    8c54:	ldr	x0, [sp, #40]
    8c58:	bl	600c <d_append_string>
    8c5c:	ldr	x0, [sp, #24]
    8c60:	ldr	w0, [x0, #16]
    8c64:	add	w0, w0, #0x1
    8c68:	mov	w1, w0
    8c6c:	ldr	x0, [sp, #40]
    8c70:	bl	6040 <d_append_num>
    8c74:	mov	w1, #0x7d                  	// #125
    8c78:	ldr	x0, [sp, #40]
    8c7c:	bl	5f48 <d_append_char>
    8c80:	b	8d6c <d_print_comp_inner+0x2224>
    8c84:	adrp	x0, 0 <is_fnqual_component_type>
    8c88:	add	x1, x0, #0x0
    8c8c:	ldr	x0, [sp, #40]
    8c90:	bl	600c <d_append_string>
    8c94:	ldr	x0, [sp, #24]
    8c98:	ldr	x0, [x0, #8]
    8c9c:	add	w0, w0, #0x1
    8ca0:	mov	w1, w0
    8ca4:	ldr	x0, [sp, #40]
    8ca8:	bl	6040 <d_append_num>
    8cac:	mov	w1, #0x7d                  	// #125
    8cb0:	ldr	x0, [sp, #40]
    8cb4:	bl	5f48 <d_append_char>
    8cb8:	b	8d6c <d_print_comp_inner+0x2224>
    8cbc:	ldr	x0, [sp, #24]
    8cc0:	ldr	x0, [x0, #8]
    8cc4:	mov	x2, x0
    8cc8:	ldr	w1, [sp, #36]
    8ccc:	ldr	x0, [sp, #40]
    8cd0:	bl	8d78 <d_print_comp>
    8cd4:	adrp	x0, 0 <is_fnqual_component_type>
    8cd8:	add	x1, x0, #0x0
    8cdc:	ldr	x0, [sp, #40]
    8ce0:	bl	600c <d_append_string>
    8ce4:	ldr	x0, [sp, #24]
    8ce8:	ldr	x0, [x0, #16]
    8cec:	mov	x2, x0
    8cf0:	ldr	w1, [sp, #36]
    8cf4:	ldr	x0, [sp, #40]
    8cf8:	bl	8d78 <d_print_comp>
    8cfc:	mov	w1, #0x5d                  	// #93
    8d00:	ldr	x0, [sp, #40]
    8d04:	bl	5f48 <d_append_char>
    8d08:	b	8d6c <d_print_comp_inner+0x2224>
    8d0c:	ldr	x0, [sp, #40]
    8d10:	bl	5e98 <d_print_error>
    8d14:	b	8d6c <d_print_comp_inner+0x2224>
    8d18:	nop
    8d1c:	b	8d6c <d_print_comp_inner+0x2224>
    8d20:	nop
    8d24:	b	8d6c <d_print_comp_inner+0x2224>
    8d28:	nop
    8d2c:	b	8d6c <d_print_comp_inner+0x2224>
    8d30:	nop
    8d34:	b	8d6c <d_print_comp_inner+0x2224>
    8d38:	nop
    8d3c:	b	8d6c <d_print_comp_inner+0x2224>
    8d40:	nop
    8d44:	b	8d6c <d_print_comp_inner+0x2224>
    8d48:	nop
    8d4c:	b	8d6c <d_print_comp_inner+0x2224>
    8d50:	nop
    8d54:	b	8d6c <d_print_comp_inner+0x2224>
    8d58:	nop
    8d5c:	b	8d6c <d_print_comp_inner+0x2224>
    8d60:	nop
    8d64:	b	8d6c <d_print_comp_inner+0x2224>
    8d68:	nop
    8d6c:	ldp	x29, x30, [sp]
    8d70:	add	sp, sp, #0x200
    8d74:	ret

0000000000008d78 <d_print_comp>:
    8d78:	stp	x29, x30, [sp, #-64]!
    8d7c:	mov	x29, sp
    8d80:	str	x0, [sp, #40]
    8d84:	str	w1, [sp, #36]
    8d88:	str	x2, [sp, #24]
    8d8c:	ldr	x0, [sp, #24]
    8d90:	cmp	x0, #0x0
    8d94:	b.eq	8db8 <d_print_comp+0x40>  // b.none
    8d98:	ldr	x0, [sp, #24]
    8d9c:	ldr	w0, [x0, #4]
    8da0:	cmp	w0, #0x1
    8da4:	b.gt	8db8 <d_print_comp+0x40>
    8da8:	ldr	x0, [sp, #40]
    8dac:	ldr	w0, [x0, #308]
    8db0:	cmp	w0, #0x400
    8db4:	b.le	8dc4 <d_print_comp+0x4c>
    8db8:	ldr	x0, [sp, #40]
    8dbc:	bl	5e98 <d_print_error>
    8dc0:	b	8e50 <d_print_comp+0xd8>
    8dc4:	ldr	x0, [sp, #24]
    8dc8:	ldr	w0, [x0, #4]
    8dcc:	add	w1, w0, #0x1
    8dd0:	ldr	x0, [sp, #24]
    8dd4:	str	w1, [x0, #4]
    8dd8:	ldr	x0, [sp, #40]
    8ddc:	ldr	w0, [x0, #308]
    8de0:	add	w1, w0, #0x1
    8de4:	ldr	x0, [sp, #40]
    8de8:	str	w1, [x0, #308]
    8dec:	ldr	x0, [sp, #24]
    8df0:	str	x0, [sp, #48]
    8df4:	ldr	x0, [sp, #40]
    8df8:	ldr	x0, [x0, #328]
    8dfc:	str	x0, [sp, #56]
    8e00:	ldr	x0, [sp, #40]
    8e04:	add	x1, sp, #0x30
    8e08:	str	x1, [x0, #328]
    8e0c:	ldr	x2, [sp, #24]
    8e10:	ldr	w1, [sp, #36]
    8e14:	ldr	x0, [sp, #40]
    8e18:	bl	6b48 <d_print_comp_inner>
    8e1c:	ldr	x1, [sp, #56]
    8e20:	ldr	x0, [sp, #40]
    8e24:	str	x1, [x0, #328]
    8e28:	ldr	x0, [sp, #24]
    8e2c:	ldr	w0, [x0, #4]
    8e30:	sub	w1, w0, #0x1
    8e34:	ldr	x0, [sp, #24]
    8e38:	str	w1, [x0, #4]
    8e3c:	ldr	x0, [sp, #40]
    8e40:	ldr	w0, [x0, #308]
    8e44:	sub	w1, w0, #0x1
    8e48:	ldr	x0, [sp, #40]
    8e4c:	str	w1, [x0, #308]
    8e50:	ldp	x29, x30, [sp], #64
    8e54:	ret

0000000000008e58 <d_print_java_identifier>:
    8e58:	stp	x29, x30, [sp, #-96]!
    8e5c:	mov	x29, sp
    8e60:	str	x0, [sp, #40]
    8e64:	str	x1, [sp, #32]
    8e68:	str	w2, [sp, #28]
    8e6c:	ldrsw	x0, [sp, #28]
    8e70:	ldr	x1, [sp, #32]
    8e74:	add	x0, x1, x0
    8e78:	str	x0, [sp, #56]
    8e7c:	ldr	x0, [sp, #32]
    8e80:	str	x0, [sp, #88]
    8e84:	b	901c <d_print_java_identifier+0x1c4>
    8e88:	ldr	x1, [sp, #56]
    8e8c:	ldr	x0, [sp, #88]
    8e90:	sub	x0, x1, x0
    8e94:	cmp	x0, #0x3
    8e98:	b.le	8ffc <d_print_java_identifier+0x1a4>
    8e9c:	ldr	x0, [sp, #88]
    8ea0:	ldrb	w0, [x0]
    8ea4:	cmp	w0, #0x5f
    8ea8:	b.ne	8ffc <d_print_java_identifier+0x1a4>  // b.any
    8eac:	ldr	x0, [sp, #88]
    8eb0:	add	x0, x0, #0x1
    8eb4:	ldrb	w0, [x0]
    8eb8:	cmp	w0, #0x5f
    8ebc:	b.ne	8ffc <d_print_java_identifier+0x1a4>  // b.any
    8ec0:	ldr	x0, [sp, #88]
    8ec4:	add	x0, x0, #0x2
    8ec8:	ldrb	w0, [x0]
    8ecc:	cmp	w0, #0x55
    8ed0:	b.ne	8ffc <d_print_java_identifier+0x1a4>  // b.any
    8ed4:	str	xzr, [sp, #80]
    8ed8:	ldr	x0, [sp, #88]
    8edc:	add	x0, x0, #0x3
    8ee0:	str	x0, [sp, #72]
    8ee4:	b	8fa0 <d_print_java_identifier+0x148>
    8ee8:	ldr	x0, [sp, #72]
    8eec:	ldrb	w0, [x0]
    8ef0:	cmp	w0, #0x2f
    8ef4:	b.ls	8f1c <d_print_java_identifier+0xc4>  // b.plast
    8ef8:	ldr	x0, [sp, #72]
    8efc:	ldrb	w0, [x0]
    8f00:	cmp	w0, #0x39
    8f04:	b.hi	8f1c <d_print_java_identifier+0xc4>  // b.pmore
    8f08:	ldr	x0, [sp, #72]
    8f0c:	ldrb	w0, [x0]
    8f10:	sub	w0, w0, #0x30
    8f14:	str	w0, [sp, #68]
    8f18:	b	8f80 <d_print_java_identifier+0x128>
    8f1c:	ldr	x0, [sp, #72]
    8f20:	ldrb	w0, [x0]
    8f24:	cmp	w0, #0x40
    8f28:	b.ls	8f50 <d_print_java_identifier+0xf8>  // b.plast
    8f2c:	ldr	x0, [sp, #72]
    8f30:	ldrb	w0, [x0]
    8f34:	cmp	w0, #0x46
    8f38:	b.hi	8f50 <d_print_java_identifier+0xf8>  // b.pmore
    8f3c:	ldr	x0, [sp, #72]
    8f40:	ldrb	w0, [x0]
    8f44:	sub	w0, w0, #0x37
    8f48:	str	w0, [sp, #68]
    8f4c:	b	8f80 <d_print_java_identifier+0x128>
    8f50:	ldr	x0, [sp, #72]
    8f54:	ldrb	w0, [x0]
    8f58:	cmp	w0, #0x60
    8f5c:	b.ls	8fb0 <d_print_java_identifier+0x158>  // b.plast
    8f60:	ldr	x0, [sp, #72]
    8f64:	ldrb	w0, [x0]
    8f68:	cmp	w0, #0x66
    8f6c:	b.hi	8fb0 <d_print_java_identifier+0x158>  // b.pmore
    8f70:	ldr	x0, [sp, #72]
    8f74:	ldrb	w0, [x0]
    8f78:	sub	w0, w0, #0x57
    8f7c:	str	w0, [sp, #68]
    8f80:	ldr	x0, [sp, #80]
    8f84:	lsl	x1, x0, #4
    8f88:	ldrsw	x0, [sp, #68]
    8f8c:	add	x0, x1, x0
    8f90:	str	x0, [sp, #80]
    8f94:	ldr	x0, [sp, #72]
    8f98:	add	x0, x0, #0x1
    8f9c:	str	x0, [sp, #72]
    8fa0:	ldr	x1, [sp, #72]
    8fa4:	ldr	x0, [sp, #56]
    8fa8:	cmp	x1, x0
    8fac:	b.cc	8ee8 <d_print_java_identifier+0x90>  // b.lo, b.ul, b.last
    8fb0:	ldr	x1, [sp, #72]
    8fb4:	ldr	x0, [sp, #56]
    8fb8:	cmp	x1, x0
    8fbc:	b.cs	8ffc <d_print_java_identifier+0x1a4>  // b.hs, b.nlast
    8fc0:	ldr	x0, [sp, #72]
    8fc4:	ldrb	w0, [x0]
    8fc8:	cmp	w0, #0x5f
    8fcc:	b.ne	8ffc <d_print_java_identifier+0x1a4>  // b.any
    8fd0:	ldr	x0, [sp, #80]
    8fd4:	cmp	x0, #0xff
    8fd8:	b.hi	8ffc <d_print_java_identifier+0x1a4>  // b.pmore
    8fdc:	ldr	x0, [sp, #80]
    8fe0:	and	w0, w0, #0xff
    8fe4:	mov	w1, w0
    8fe8:	ldr	x0, [sp, #40]
    8fec:	bl	5f48 <d_append_char>
    8ff0:	ldr	x0, [sp, #72]
    8ff4:	str	x0, [sp, #88]
    8ff8:	b	9010 <d_print_java_identifier+0x1b8>
    8ffc:	ldr	x0, [sp, #88]
    9000:	ldrb	w0, [x0]
    9004:	mov	w1, w0
    9008:	ldr	x0, [sp, #40]
    900c:	bl	5f48 <d_append_char>
    9010:	ldr	x0, [sp, #88]
    9014:	add	x0, x0, #0x1
    9018:	str	x0, [sp, #88]
    901c:	ldr	x1, [sp, #88]
    9020:	ldr	x0, [sp, #56]
    9024:	cmp	x1, x0
    9028:	b.cc	8e88 <d_print_java_identifier+0x30>  // b.lo, b.ul, b.last
    902c:	nop
    9030:	nop
    9034:	ldp	x29, x30, [sp], #96
    9038:	ret

000000000000903c <d_print_mod_list>:
    903c:	stp	x29, x30, [sp, #-80]!
    9040:	mov	x29, sp
    9044:	str	x0, [sp, #40]
    9048:	str	w1, [sp, #36]
    904c:	str	x2, [sp, #24]
    9050:	str	w3, [sp, #32]
    9054:	ldr	x0, [sp, #24]
    9058:	cmp	x0, #0x0
    905c:	b.eq	92e8 <d_print_mod_list+0x2ac>  // b.none
    9060:	ldr	x0, [sp, #40]
    9064:	bl	5eb8 <d_print_saw_error>
    9068:	cmp	w0, #0x0
    906c:	b.ne	92e8 <d_print_mod_list+0x2ac>  // b.any
    9070:	ldr	x0, [sp, #24]
    9074:	ldr	w0, [x0, #16]
    9078:	cmp	w0, #0x0
    907c:	b.ne	90a4 <d_print_mod_list+0x68>  // b.any
    9080:	ldr	w0, [sp, #32]
    9084:	cmp	w0, #0x0
    9088:	b.ne	90c4 <d_print_mod_list+0x88>  // b.any
    908c:	ldr	x0, [sp, #24]
    9090:	ldr	x0, [x0, #8]
    9094:	ldr	w0, [x0]
    9098:	bl	0 <is_fnqual_component_type>
    909c:	cmp	w0, #0x0
    90a0:	b.eq	90c4 <d_print_mod_list+0x88>  // b.none
    90a4:	ldr	x0, [sp, #24]
    90a8:	ldr	x0, [x0]
    90ac:	ldr	w3, [sp, #32]
    90b0:	mov	x2, x0
    90b4:	ldr	w1, [sp, #36]
    90b8:	ldr	x0, [sp, #40]
    90bc:	bl	903c <d_print_mod_list>
    90c0:	b	92ec <d_print_mod_list+0x2b0>
    90c4:	ldr	x0, [sp, #24]
    90c8:	mov	w1, #0x1                   	// #1
    90cc:	str	w1, [x0, #16]
    90d0:	ldr	x0, [sp, #40]
    90d4:	ldr	x0, [x0, #288]
    90d8:	str	x0, [sp, #64]
    90dc:	ldr	x0, [sp, #24]
    90e0:	ldr	x1, [x0, #24]
    90e4:	ldr	x0, [sp, #40]
    90e8:	str	x1, [x0, #288]
    90ec:	ldr	x0, [sp, #24]
    90f0:	ldr	x0, [x0, #8]
    90f4:	ldr	w0, [x0]
    90f8:	cmp	w0, #0x29
    90fc:	b.ne	9134 <d_print_mod_list+0xf8>  // b.any
    9100:	ldr	x0, [sp, #24]
    9104:	ldr	x1, [x0, #8]
    9108:	ldr	x0, [sp, #24]
    910c:	ldr	x0, [x0]
    9110:	mov	x3, x0
    9114:	mov	x2, x1
    9118:	ldr	w1, [sp, #36]
    911c:	ldr	x0, [sp, #40]
    9120:	bl	95a8 <d_print_function_type>
    9124:	ldr	x0, [sp, #40]
    9128:	ldr	x1, [sp, #64]
    912c:	str	x1, [x0, #288]
    9130:	b	92ec <d_print_mod_list+0x2b0>
    9134:	ldr	x0, [sp, #24]
    9138:	ldr	x0, [x0, #8]
    913c:	ldr	w0, [x0]
    9140:	cmp	w0, #0x2a
    9144:	b.ne	917c <d_print_mod_list+0x140>  // b.any
    9148:	ldr	x0, [sp, #24]
    914c:	ldr	x1, [x0, #8]
    9150:	ldr	x0, [sp, #24]
    9154:	ldr	x0, [x0]
    9158:	mov	x3, x0
    915c:	mov	x2, x1
    9160:	ldr	w1, [sp, #36]
    9164:	ldr	x0, [sp, #40]
    9168:	bl	97f4 <d_print_array_type>
    916c:	ldr	x0, [sp, #40]
    9170:	ldr	x1, [sp, #64]
    9174:	str	x1, [x0, #288]
    9178:	b	92ec <d_print_mod_list+0x2b0>
    917c:	ldr	x0, [sp, #24]
    9180:	ldr	x0, [x0, #8]
    9184:	ldr	w0, [x0]
    9188:	cmp	w0, #0x2
    918c:	b.ne	92a4 <d_print_mod_list+0x268>  // b.any
    9190:	ldr	x0, [sp, #40]
    9194:	ldr	x0, [x0, #296]
    9198:	str	x0, [sp, #56]
    919c:	ldr	x0, [sp, #40]
    91a0:	str	xzr, [x0, #296]
    91a4:	ldr	x0, [sp, #24]
    91a8:	ldr	x0, [x0, #8]
    91ac:	ldr	x0, [x0, #8]
    91b0:	mov	x2, x0
    91b4:	ldr	w1, [sp, #36]
    91b8:	ldr	x0, [sp, #40]
    91bc:	bl	8d78 <d_print_comp>
    91c0:	ldr	x0, [sp, #40]
    91c4:	ldr	x1, [sp, #56]
    91c8:	str	x1, [x0, #296]
    91cc:	ldr	w0, [sp, #36]
    91d0:	and	w0, w0, #0x4
    91d4:	cmp	w0, #0x0
    91d8:	b.ne	91f0 <d_print_mod_list+0x1b4>  // b.any
    91dc:	adrp	x0, 0 <is_fnqual_component_type>
    91e0:	add	x1, x0, #0x0
    91e4:	ldr	x0, [sp, #40]
    91e8:	bl	600c <d_append_string>
    91ec:	b	91fc <d_print_mod_list+0x1c0>
    91f0:	mov	w1, #0x2e                  	// #46
    91f4:	ldr	x0, [sp, #40]
    91f8:	bl	5f48 <d_append_char>
    91fc:	ldr	x0, [sp, #24]
    9200:	ldr	x0, [x0, #8]
    9204:	ldr	x0, [x0, #16]
    9208:	str	x0, [sp, #72]
    920c:	ldr	x0, [sp, #72]
    9210:	ldr	w0, [x0]
    9214:	cmp	w0, #0x47
    9218:	b.ne	9270 <d_print_mod_list+0x234>  // b.any
    921c:	adrp	x0, 0 <is_fnqual_component_type>
    9220:	add	x1, x0, #0x0
    9224:	ldr	x0, [sp, #40]
    9228:	bl	600c <d_append_string>
    922c:	ldr	x0, [sp, #72]
    9230:	ldr	w0, [x0, #16]
    9234:	add	w0, w0, #0x1
    9238:	mov	w1, w0
    923c:	ldr	x0, [sp, #40]
    9240:	bl	6040 <d_append_num>
    9244:	adrp	x0, 0 <is_fnqual_component_type>
    9248:	add	x1, x0, #0x0
    924c:	ldr	x0, [sp, #40]
    9250:	bl	600c <d_append_string>
    9254:	ldr	x0, [sp, #72]
    9258:	ldr	x0, [x0, #8]
    925c:	str	x0, [sp, #72]
    9260:	b	9270 <d_print_mod_list+0x234>
    9264:	ldr	x0, [sp, #72]
    9268:	ldr	x0, [x0, #8]
    926c:	str	x0, [sp, #72]
    9270:	ldr	x0, [sp, #72]
    9274:	ldr	w0, [x0]
    9278:	bl	0 <is_fnqual_component_type>
    927c:	cmp	w0, #0x0
    9280:	b.ne	9264 <d_print_mod_list+0x228>  // b.any
    9284:	ldr	x2, [sp, #72]
    9288:	ldr	w1, [sp, #36]
    928c:	ldr	x0, [sp, #40]
    9290:	bl	8d78 <d_print_comp>
    9294:	ldr	x0, [sp, #40]
    9298:	ldr	x1, [sp, #64]
    929c:	str	x1, [x0, #288]
    92a0:	b	92ec <d_print_mod_list+0x2b0>
    92a4:	ldr	x0, [sp, #24]
    92a8:	ldr	x0, [x0, #8]
    92ac:	mov	x2, x0
    92b0:	ldr	w1, [sp, #36]
    92b4:	ldr	x0, [sp, #40]
    92b8:	bl	92f4 <d_print_mod>
    92bc:	ldr	x0, [sp, #40]
    92c0:	ldr	x1, [sp, #64]
    92c4:	str	x1, [x0, #288]
    92c8:	ldr	x0, [sp, #24]
    92cc:	ldr	x0, [x0]
    92d0:	ldr	w3, [sp, #32]
    92d4:	mov	x2, x0
    92d8:	ldr	w1, [sp, #36]
    92dc:	ldr	x0, [sp, #40]
    92e0:	bl	903c <d_print_mod_list>
    92e4:	b	92ec <d_print_mod_list+0x2b0>
    92e8:	nop
    92ec:	ldp	x29, x30, [sp], #80
    92f0:	ret

00000000000092f4 <d_print_mod>:
    92f4:	stp	x29, x30, [sp, #-48]!
    92f8:	mov	x29, sp
    92fc:	str	x0, [sp, #40]
    9300:	str	w1, [sp, #36]
    9304:	str	x2, [sp, #24]
    9308:	ldr	x0, [sp, #24]
    930c:	ldr	w0, [x0]
    9310:	sub	w0, w0, #0x3
    9314:	cmp	w0, #0x4d
    9318:	b.hi	9578 <d_print_mod+0x284>  // b.pmore
    931c:	adrp	x1, 0 <is_fnqual_component_type>
    9320:	add	x1, x1, #0x0
    9324:	ldr	w0, [x1, w0, uxtw #2]
    9328:	adr	x1, 9334 <d_print_mod+0x40>
    932c:	add	x0, x1, w0, sxtw #2
    9330:	br	x0
    9334:	adrp	x0, 0 <is_fnqual_component_type>
    9338:	add	x1, x0, #0x0
    933c:	ldr	x0, [sp, #40]
    9340:	bl	600c <d_append_string>
    9344:	b	95a0 <d_print_mod+0x2ac>
    9348:	adrp	x0, 0 <is_fnqual_component_type>
    934c:	add	x1, x0, #0x0
    9350:	ldr	x0, [sp, #40]
    9354:	bl	600c <d_append_string>
    9358:	b	95a0 <d_print_mod+0x2ac>
    935c:	adrp	x0, 0 <is_fnqual_component_type>
    9360:	add	x1, x0, #0x0
    9364:	ldr	x0, [sp, #40]
    9368:	bl	600c <d_append_string>
    936c:	b	95a0 <d_print_mod+0x2ac>
    9370:	adrp	x0, 0 <is_fnqual_component_type>
    9374:	add	x1, x0, #0x0
    9378:	ldr	x0, [sp, #40]
    937c:	bl	600c <d_append_string>
    9380:	b	95a0 <d_print_mod+0x2ac>
    9384:	adrp	x0, 0 <is_fnqual_component_type>
    9388:	add	x1, x0, #0x0
    938c:	ldr	x0, [sp, #40]
    9390:	bl	600c <d_append_string>
    9394:	ldr	x0, [sp, #24]
    9398:	ldr	x0, [x0, #16]
    939c:	cmp	x0, #0x0
    93a0:	b.eq	958c <d_print_mod+0x298>  // b.none
    93a4:	mov	w1, #0x28                  	// #40
    93a8:	ldr	x0, [sp, #40]
    93ac:	bl	5f48 <d_append_char>
    93b0:	ldr	x0, [sp, #24]
    93b4:	ldr	x0, [x0, #16]
    93b8:	mov	x2, x0
    93bc:	ldr	w1, [sp, #36]
    93c0:	ldr	x0, [sp, #40]
    93c4:	bl	8d78 <d_print_comp>
    93c8:	mov	w1, #0x29                  	// #41
    93cc:	ldr	x0, [sp, #40]
    93d0:	bl	5f48 <d_append_char>
    93d4:	b	958c <d_print_mod+0x298>
    93d8:	adrp	x0, 0 <is_fnqual_component_type>
    93dc:	add	x1, x0, #0x0
    93e0:	ldr	x0, [sp, #40]
    93e4:	bl	600c <d_append_string>
    93e8:	ldr	x0, [sp, #24]
    93ec:	ldr	x0, [x0, #16]
    93f0:	cmp	x0, #0x0
    93f4:	b.eq	9594 <d_print_mod+0x2a0>  // b.none
    93f8:	mov	w1, #0x28                  	// #40
    93fc:	ldr	x0, [sp, #40]
    9400:	bl	5f48 <d_append_char>
    9404:	ldr	x0, [sp, #24]
    9408:	ldr	x0, [x0, #16]
    940c:	mov	x2, x0
    9410:	ldr	w1, [sp, #36]
    9414:	ldr	x0, [sp, #40]
    9418:	bl	8d78 <d_print_comp>
    941c:	mov	w1, #0x29                  	// #41
    9420:	ldr	x0, [sp, #40]
    9424:	bl	5f48 <d_append_char>
    9428:	b	9594 <d_print_mod+0x2a0>
    942c:	mov	w1, #0x20                  	// #32
    9430:	ldr	x0, [sp, #40]
    9434:	bl	5f48 <d_append_char>
    9438:	ldr	x0, [sp, #24]
    943c:	ldr	x0, [x0, #16]
    9440:	mov	x2, x0
    9444:	ldr	w1, [sp, #36]
    9448:	ldr	x0, [sp, #40]
    944c:	bl	8d78 <d_print_comp>
    9450:	b	95a0 <d_print_mod+0x2ac>
    9454:	ldr	w0, [sp, #36]
    9458:	and	w0, w0, #0x4
    945c:	cmp	w0, #0x0
    9460:	b.ne	959c <d_print_mod+0x2a8>  // b.any
    9464:	mov	w1, #0x2a                  	// #42
    9468:	ldr	x0, [sp, #40]
    946c:	bl	5f48 <d_append_char>
    9470:	b	959c <d_print_mod+0x2a8>
    9474:	mov	w1, #0x20                  	// #32
    9478:	ldr	x0, [sp, #40]
    947c:	bl	5f48 <d_append_char>
    9480:	mov	w1, #0x26                  	// #38
    9484:	ldr	x0, [sp, #40]
    9488:	bl	5f48 <d_append_char>
    948c:	b	95a0 <d_print_mod+0x2ac>
    9490:	mov	w1, #0x20                  	// #32
    9494:	ldr	x0, [sp, #40]
    9498:	bl	5f48 <d_append_char>
    949c:	adrp	x0, 0 <is_fnqual_component_type>
    94a0:	add	x1, x0, #0x0
    94a4:	ldr	x0, [sp, #40]
    94a8:	bl	600c <d_append_string>
    94ac:	b	95a0 <d_print_mod+0x2ac>
    94b0:	adrp	x0, 0 <is_fnqual_component_type>
    94b4:	add	x1, x0, #0x0
    94b8:	ldr	x0, [sp, #40]
    94bc:	bl	600c <d_append_string>
    94c0:	b	95a0 <d_print_mod+0x2ac>
    94c4:	adrp	x0, 0 <is_fnqual_component_type>
    94c8:	add	x1, x0, #0x0
    94cc:	ldr	x0, [sp, #40]
    94d0:	bl	600c <d_append_string>
    94d4:	b	95a0 <d_print_mod+0x2ac>
    94d8:	ldr	x0, [sp, #40]
    94dc:	bl	6084 <d_last_char>
    94e0:	and	w0, w0, #0xff
    94e4:	cmp	w0, #0x28
    94e8:	b.eq	94f8 <d_print_mod+0x204>  // b.none
    94ec:	mov	w1, #0x20                  	// #32
    94f0:	ldr	x0, [sp, #40]
    94f4:	bl	5f48 <d_append_char>
    94f8:	ldr	x0, [sp, #24]
    94fc:	ldr	x0, [x0, #8]
    9500:	mov	x2, x0
    9504:	ldr	w1, [sp, #36]
    9508:	ldr	x0, [sp, #40]
    950c:	bl	8d78 <d_print_comp>
    9510:	adrp	x0, 0 <is_fnqual_component_type>
    9514:	add	x1, x0, #0x0
    9518:	ldr	x0, [sp, #40]
    951c:	bl	600c <d_append_string>
    9520:	b	95a0 <d_print_mod+0x2ac>
    9524:	ldr	x0, [sp, #24]
    9528:	ldr	x0, [x0, #8]
    952c:	mov	x2, x0
    9530:	ldr	w1, [sp, #36]
    9534:	ldr	x0, [sp, #40]
    9538:	bl	8d78 <d_print_comp>
    953c:	b	95a0 <d_print_mod+0x2ac>
    9540:	adrp	x0, 0 <is_fnqual_component_type>
    9544:	add	x1, x0, #0x0
    9548:	ldr	x0, [sp, #40]
    954c:	bl	600c <d_append_string>
    9550:	ldr	x0, [sp, #24]
    9554:	ldr	x0, [x0, #8]
    9558:	mov	x2, x0
    955c:	ldr	w1, [sp, #36]
    9560:	ldr	x0, [sp, #40]
    9564:	bl	8d78 <d_print_comp>
    9568:	mov	w1, #0x29                  	// #41
    956c:	ldr	x0, [sp, #40]
    9570:	bl	5f48 <d_append_char>
    9574:	b	95a0 <d_print_mod+0x2ac>
    9578:	ldr	x2, [sp, #24]
    957c:	ldr	w1, [sp, #36]
    9580:	ldr	x0, [sp, #40]
    9584:	bl	8d78 <d_print_comp>
    9588:	b	95a0 <d_print_mod+0x2ac>
    958c:	nop
    9590:	b	95a0 <d_print_mod+0x2ac>
    9594:	nop
    9598:	b	95a0 <d_print_mod+0x2ac>
    959c:	nop
    95a0:	ldp	x29, x30, [sp], #48
    95a4:	ret

00000000000095a8 <d_print_function_type>:
    95a8:	stp	x29, x30, [sp, #-80]!
    95ac:	mov	x29, sp
    95b0:	str	x0, [sp, #40]
    95b4:	str	w1, [sp, #36]
    95b8:	str	x2, [sp, #24]
    95bc:	str	x3, [sp, #16]
    95c0:	str	wzr, [sp, #76]
    95c4:	str	wzr, [sp, #72]
    95c8:	ldr	x0, [sp, #16]
    95cc:	str	x0, [sp, #64]
    95d0:	b	96ac <d_print_function_type+0x104>
    95d4:	ldr	x0, [sp, #64]
    95d8:	ldr	w0, [x0, #16]
    95dc:	cmp	w0, #0x0
    95e0:	b.ne	96bc <d_print_function_type+0x114>  // b.any
    95e4:	ldr	x0, [sp, #64]
    95e8:	ldr	x0, [x0, #8]
    95ec:	ldr	w0, [x0]
    95f0:	sub	w0, w0, #0x19
    95f4:	cmp	w0, #0x37
    95f8:	cset	w1, hi  // hi = pmore
    95fc:	and	w1, w1, #0xff
    9600:	cmp	w1, #0x0
    9604:	b.ne	9688 <d_print_function_type+0xe0>  // b.any
    9608:	mov	x1, #0x1                   	// #1
    960c:	lsl	x0, x1, x0
    9610:	mov	x1, #0xf8                  	// #248
    9614:	movk	x1, #0xd0, lsl #48
    9618:	and	x1, x0, x1
    961c:	cmp	x1, #0x0
    9620:	cset	w1, ne  // ne = any
    9624:	and	w1, w1, #0xff
    9628:	cmp	w1, #0x0
    962c:	b.ne	9690 <d_print_function_type+0xe8>  // b.any
    9630:	mov	x1, #0x3107                	// #12551
    9634:	movk	x1, #0x4, lsl #16
    9638:	and	x1, x0, x1
    963c:	cmp	x1, #0x0
    9640:	cset	w1, ne  // ne = any
    9644:	and	w1, w1, #0xff
    9648:	cmp	w1, #0x0
    964c:	b.ne	9674 <d_print_function_type+0xcc>  // b.any
    9650:	and	x0, x0, #0xe00
    9654:	cmp	x0, #0x0
    9658:	cset	w0, ne  // ne = any
    965c:	and	w0, w0, #0xff
    9660:	cmp	w0, #0x0
    9664:	b.eq	9688 <d_print_function_type+0xe0>  // b.none
    9668:	mov	w0, #0x1                   	// #1
    966c:	str	w0, [sp, #76]
    9670:	b	9694 <d_print_function_type+0xec>
    9674:	mov	w0, #0x1                   	// #1
    9678:	str	w0, [sp, #72]
    967c:	mov	w0, #0x1                   	// #1
    9680:	str	w0, [sp, #76]
    9684:	b	9694 <d_print_function_type+0xec>
    9688:	nop
    968c:	b	9694 <d_print_function_type+0xec>
    9690:	nop
    9694:	ldr	w0, [sp, #76]
    9698:	cmp	w0, #0x0
    969c:	b.ne	96c4 <d_print_function_type+0x11c>  // b.any
    96a0:	ldr	x0, [sp, #64]
    96a4:	ldr	x0, [x0]
    96a8:	str	x0, [sp, #64]
    96ac:	ldr	x0, [sp, #64]
    96b0:	cmp	x0, #0x0
    96b4:	b.ne	95d4 <d_print_function_type+0x2c>  // b.any
    96b8:	b	96c8 <d_print_function_type+0x120>
    96bc:	nop
    96c0:	b	96c8 <d_print_function_type+0x120>
    96c4:	nop
    96c8:	ldr	w0, [sp, #76]
    96cc:	cmp	w0, #0x0
    96d0:	b.eq	9748 <d_print_function_type+0x1a0>  // b.none
    96d4:	ldr	w0, [sp, #72]
    96d8:	cmp	w0, #0x0
    96dc:	b.ne	9710 <d_print_function_type+0x168>  // b.any
    96e0:	ldr	x0, [sp, #40]
    96e4:	bl	6084 <d_last_char>
    96e8:	and	w0, w0, #0xff
    96ec:	cmp	w0, #0x28
    96f0:	b.eq	9710 <d_print_function_type+0x168>  // b.none
    96f4:	ldr	x0, [sp, #40]
    96f8:	bl	6084 <d_last_char>
    96fc:	and	w0, w0, #0xff
    9700:	cmp	w0, #0x2a
    9704:	b.eq	9710 <d_print_function_type+0x168>  // b.none
    9708:	mov	w0, #0x1                   	// #1
    970c:	str	w0, [sp, #72]
    9710:	ldr	w0, [sp, #72]
    9714:	cmp	w0, #0x0
    9718:	b.eq	973c <d_print_function_type+0x194>  // b.none
    971c:	ldr	x0, [sp, #40]
    9720:	bl	6084 <d_last_char>
    9724:	and	w0, w0, #0xff
    9728:	cmp	w0, #0x20
    972c:	b.eq	973c <d_print_function_type+0x194>  // b.none
    9730:	mov	w1, #0x20                  	// #32
    9734:	ldr	x0, [sp, #40]
    9738:	bl	5f48 <d_append_char>
    973c:	mov	w1, #0x28                  	// #40
    9740:	ldr	x0, [sp, #40]
    9744:	bl	5f48 <d_append_char>
    9748:	ldr	x0, [sp, #40]
    974c:	ldr	x0, [x0, #296]
    9750:	str	x0, [sp, #56]
    9754:	ldr	x0, [sp, #40]
    9758:	str	xzr, [x0, #296]
    975c:	mov	w3, #0x0                   	// #0
    9760:	ldr	x2, [sp, #16]
    9764:	ldr	w1, [sp, #36]
    9768:	ldr	x0, [sp, #40]
    976c:	bl	903c <d_print_mod_list>
    9770:	ldr	w0, [sp, #76]
    9774:	cmp	w0, #0x0
    9778:	b.eq	9788 <d_print_function_type+0x1e0>  // b.none
    977c:	mov	w1, #0x29                  	// #41
    9780:	ldr	x0, [sp, #40]
    9784:	bl	5f48 <d_append_char>
    9788:	mov	w1, #0x28                  	// #40
    978c:	ldr	x0, [sp, #40]
    9790:	bl	5f48 <d_append_char>
    9794:	ldr	x0, [sp, #24]
    9798:	ldr	x0, [x0, #16]
    979c:	cmp	x0, #0x0
    97a0:	b.eq	97bc <d_print_function_type+0x214>  // b.none
    97a4:	ldr	x0, [sp, #24]
    97a8:	ldr	x0, [x0, #16]
    97ac:	mov	x2, x0
    97b0:	ldr	w1, [sp, #36]
    97b4:	ldr	x0, [sp, #40]
    97b8:	bl	8d78 <d_print_comp>
    97bc:	mov	w1, #0x29                  	// #41
    97c0:	ldr	x0, [sp, #40]
    97c4:	bl	5f48 <d_append_char>
    97c8:	mov	w3, #0x1                   	// #1
    97cc:	ldr	x2, [sp, #16]
    97d0:	ldr	w1, [sp, #36]
    97d4:	ldr	x0, [sp, #40]
    97d8:	bl	903c <d_print_mod_list>
    97dc:	ldr	x0, [sp, #40]
    97e0:	ldr	x1, [sp, #56]
    97e4:	str	x1, [x0, #296]
    97e8:	nop
    97ec:	ldp	x29, x30, [sp], #80
    97f0:	ret

00000000000097f4 <d_print_array_type>:
    97f4:	stp	x29, x30, [sp, #-64]!
    97f8:	mov	x29, sp
    97fc:	str	x0, [sp, #40]
    9800:	str	w1, [sp, #36]
    9804:	str	x2, [sp, #24]
    9808:	str	x3, [sp, #16]
    980c:	mov	w0, #0x1                   	// #1
    9810:	str	w0, [sp, #60]
    9814:	ldr	x0, [sp, #16]
    9818:	cmp	x0, #0x0
    981c:	b.eq	98d0 <d_print_array_type+0xdc>  // b.none
    9820:	str	wzr, [sp, #56]
    9824:	ldr	x0, [sp, #16]
    9828:	str	x0, [sp, #48]
    982c:	b	987c <d_print_array_type+0x88>
    9830:	ldr	x0, [sp, #48]
    9834:	ldr	w0, [x0, #16]
    9838:	cmp	w0, #0x0
    983c:	b.ne	9870 <d_print_array_type+0x7c>  // b.any
    9840:	ldr	x0, [sp, #48]
    9844:	ldr	x0, [x0, #8]
    9848:	ldr	w0, [x0]
    984c:	cmp	w0, #0x2a
    9850:	b.ne	985c <d_print_array_type+0x68>  // b.any
    9854:	str	wzr, [sp, #60]
    9858:	b	9888 <d_print_array_type+0x94>
    985c:	mov	w0, #0x1                   	// #1
    9860:	str	w0, [sp, #56]
    9864:	mov	w0, #0x1                   	// #1
    9868:	str	w0, [sp, #60]
    986c:	b	9888 <d_print_array_type+0x94>
    9870:	ldr	x0, [sp, #48]
    9874:	ldr	x0, [x0]
    9878:	str	x0, [sp, #48]
    987c:	ldr	x0, [sp, #48]
    9880:	cmp	x0, #0x0
    9884:	b.ne	9830 <d_print_array_type+0x3c>  // b.any
    9888:	ldr	w0, [sp, #56]
    988c:	cmp	w0, #0x0
    9890:	b.eq	98a4 <d_print_array_type+0xb0>  // b.none
    9894:	adrp	x0, 0 <is_fnqual_component_type>
    9898:	add	x1, x0, #0x0
    989c:	ldr	x0, [sp, #40]
    98a0:	bl	600c <d_append_string>
    98a4:	mov	w3, #0x0                   	// #0
    98a8:	ldr	x2, [sp, #16]
    98ac:	ldr	w1, [sp, #36]
    98b0:	ldr	x0, [sp, #40]
    98b4:	bl	903c <d_print_mod_list>
    98b8:	ldr	w0, [sp, #56]
    98bc:	cmp	w0, #0x0
    98c0:	b.eq	98d0 <d_print_array_type+0xdc>  // b.none
    98c4:	mov	w1, #0x29                  	// #41
    98c8:	ldr	x0, [sp, #40]
    98cc:	bl	5f48 <d_append_char>
    98d0:	ldr	w0, [sp, #60]
    98d4:	cmp	w0, #0x0
    98d8:	b.eq	98e8 <d_print_array_type+0xf4>  // b.none
    98dc:	mov	w1, #0x20                  	// #32
    98e0:	ldr	x0, [sp, #40]
    98e4:	bl	5f48 <d_append_char>
    98e8:	mov	w1, #0x5b                  	// #91
    98ec:	ldr	x0, [sp, #40]
    98f0:	bl	5f48 <d_append_char>
    98f4:	ldr	x0, [sp, #24]
    98f8:	ldr	x0, [x0, #8]
    98fc:	cmp	x0, #0x0
    9900:	b.eq	991c <d_print_array_type+0x128>  // b.none
    9904:	ldr	x0, [sp, #24]
    9908:	ldr	x0, [x0, #8]
    990c:	mov	x2, x0
    9910:	ldr	w1, [sp, #36]
    9914:	ldr	x0, [sp, #40]
    9918:	bl	8d78 <d_print_comp>
    991c:	mov	w1, #0x5d                  	// #93
    9920:	ldr	x0, [sp, #40]
    9924:	bl	5f48 <d_append_char>
    9928:	nop
    992c:	ldp	x29, x30, [sp], #64
    9930:	ret

0000000000009934 <d_print_expr_op>:
    9934:	stp	x29, x30, [sp, #-48]!
    9938:	mov	x29, sp
    993c:	str	x0, [sp, #40]
    9940:	str	w1, [sp, #36]
    9944:	str	x2, [sp, #24]
    9948:	ldr	x0, [sp, #24]
    994c:	ldr	w0, [x0]
    9950:	cmp	w0, #0x32
    9954:	b.ne	9984 <d_print_expr_op+0x50>  // b.any
    9958:	ldr	x0, [sp, #24]
    995c:	ldr	x0, [x0, #8]
    9960:	ldr	x1, [x0, #8]
    9964:	ldr	x0, [sp, #24]
    9968:	ldr	x0, [x0, #8]
    996c:	ldr	w0, [x0, #16]
    9970:	sxtw	x0, w0
    9974:	mov	x2, x0
    9978:	ldr	x0, [sp, #40]
    997c:	bl	5fa8 <d_append_buffer>
    9980:	b	9994 <d_print_expr_op+0x60>
    9984:	ldr	x2, [sp, #24]
    9988:	ldr	w1, [sp, #36]
    998c:	ldr	x0, [sp, #40]
    9990:	bl	8d78 <d_print_comp>
    9994:	nop
    9998:	ldp	x29, x30, [sp], #48
    999c:	ret

00000000000099a0 <d_print_cast>:
    99a0:	stp	x29, x30, [sp, #-48]!
    99a4:	mov	x29, sp
    99a8:	str	x0, [sp, #40]
    99ac:	str	w1, [sp, #36]
    99b0:	str	x2, [sp, #24]
    99b4:	ldr	x0, [sp, #24]
    99b8:	ldr	x0, [x0, #8]
    99bc:	mov	x2, x0
    99c0:	ldr	w1, [sp, #36]
    99c4:	ldr	x0, [sp, #40]
    99c8:	bl	8d78 <d_print_comp>
    99cc:	nop
    99d0:	ldp	x29, x30, [sp], #48
    99d4:	ret

00000000000099d8 <d_print_conversion>:
    99d8:	stp	x29, x30, [sp, #-64]!
    99dc:	mov	x29, sp
    99e0:	str	x0, [sp, #40]
    99e4:	str	w1, [sp, #36]
    99e8:	str	x2, [sp, #24]
    99ec:	ldr	x0, [sp, #40]
    99f0:	ldr	x0, [x0, #368]
    99f4:	cmp	x0, #0x0
    99f8:	b.eq	9a20 <d_print_conversion+0x48>  // b.none
    99fc:	ldr	x0, [sp, #40]
    9a00:	ldr	x0, [x0, #288]
    9a04:	str	x0, [sp, #48]
    9a08:	ldr	x0, [sp, #40]
    9a0c:	add	x1, sp, #0x30
    9a10:	str	x1, [x0, #288]
    9a14:	ldr	x0, [sp, #40]
    9a18:	ldr	x0, [x0, #368]
    9a1c:	str	x0, [sp, #56]
    9a20:	ldr	x0, [sp, #24]
    9a24:	ldr	x0, [x0, #8]
    9a28:	ldr	w0, [x0]
    9a2c:	cmp	w0, #0x4
    9a30:	b.eq	9a6c <d_print_conversion+0x94>  // b.none
    9a34:	ldr	x0, [sp, #24]
    9a38:	ldr	x0, [x0, #8]
    9a3c:	mov	x2, x0
    9a40:	ldr	w1, [sp, #36]
    9a44:	ldr	x0, [sp, #40]
    9a48:	bl	8d78 <d_print_comp>
    9a4c:	ldr	x0, [sp, #40]
    9a50:	ldr	x0, [x0, #368]
    9a54:	cmp	x0, #0x0
    9a58:	b.eq	9b18 <d_print_conversion+0x140>  // b.none
    9a5c:	ldr	x1, [sp, #48]
    9a60:	ldr	x0, [sp, #40]
    9a64:	str	x1, [x0, #288]
    9a68:	b	9b18 <d_print_conversion+0x140>
    9a6c:	ldr	x0, [sp, #24]
    9a70:	ldr	x0, [x0, #8]
    9a74:	ldr	x0, [x0, #8]
    9a78:	mov	x2, x0
    9a7c:	ldr	w1, [sp, #36]
    9a80:	ldr	x0, [sp, #40]
    9a84:	bl	8d78 <d_print_comp>
    9a88:	ldr	x0, [sp, #40]
    9a8c:	ldr	x0, [x0, #368]
    9a90:	cmp	x0, #0x0
    9a94:	b.eq	9aa4 <d_print_conversion+0xcc>  // b.none
    9a98:	ldr	x1, [sp, #48]
    9a9c:	ldr	x0, [sp, #40]
    9aa0:	str	x1, [x0, #288]
    9aa4:	ldr	x0, [sp, #40]
    9aa8:	bl	6084 <d_last_char>
    9aac:	and	w0, w0, #0xff
    9ab0:	cmp	w0, #0x3c
    9ab4:	b.ne	9ac4 <d_print_conversion+0xec>  // b.any
    9ab8:	mov	w1, #0x20                  	// #32
    9abc:	ldr	x0, [sp, #40]
    9ac0:	bl	5f48 <d_append_char>
    9ac4:	mov	w1, #0x3c                  	// #60
    9ac8:	ldr	x0, [sp, #40]
    9acc:	bl	5f48 <d_append_char>
    9ad0:	ldr	x0, [sp, #24]
    9ad4:	ldr	x0, [x0, #8]
    9ad8:	ldr	x0, [x0, #16]
    9adc:	mov	x2, x0
    9ae0:	ldr	w1, [sp, #36]
    9ae4:	ldr	x0, [sp, #40]
    9ae8:	bl	8d78 <d_print_comp>
    9aec:	ldr	x0, [sp, #40]
    9af0:	bl	6084 <d_last_char>
    9af4:	and	w0, w0, #0xff
    9af8:	cmp	w0, #0x3e
    9afc:	b.ne	9b0c <d_print_conversion+0x134>  // b.any
    9b00:	mov	w1, #0x20                  	// #32
    9b04:	ldr	x0, [sp, #40]
    9b08:	bl	5f48 <d_append_char>
    9b0c:	mov	w1, #0x3e                  	// #62
    9b10:	ldr	x0, [sp, #40]
    9b14:	bl	5f48 <d_append_char>
    9b18:	nop
    9b1c:	ldp	x29, x30, [sp], #64
    9b20:	ret

0000000000009b24 <d_init_info>:
    9b24:	sub	sp, sp, #0x20
    9b28:	str	x0, [sp, #24]
    9b2c:	str	w1, [sp, #20]
    9b30:	str	x2, [sp, #8]
    9b34:	str	x3, [sp]
    9b38:	ldr	x0, [sp]
    9b3c:	ldr	x1, [sp, #24]
    9b40:	str	x1, [x0]
    9b44:	ldr	x1, [sp, #24]
    9b48:	ldr	x0, [sp, #8]
    9b4c:	add	x1, x1, x0
    9b50:	ldr	x0, [sp]
    9b54:	str	x1, [x0, #8]
    9b58:	ldr	x0, [sp]
    9b5c:	ldr	w1, [sp, #20]
    9b60:	str	w1, [x0, #16]
    9b64:	ldr	x0, [sp]
    9b68:	ldr	x1, [sp, #24]
    9b6c:	str	x1, [x0, #24]
    9b70:	ldr	x0, [sp, #8]
    9b74:	lsl	w0, w0, #1
    9b78:	mov	w1, w0
    9b7c:	ldr	x0, [sp]
    9b80:	str	w1, [x0, #44]
    9b84:	ldr	x0, [sp]
    9b88:	str	wzr, [x0, #40]
    9b8c:	ldr	x0, [sp, #8]
    9b90:	mov	w1, w0
    9b94:	ldr	x0, [sp]
    9b98:	str	w1, [x0, #60]
    9b9c:	ldr	x0, [sp]
    9ba0:	str	wzr, [x0, #56]
    9ba4:	ldr	x0, [sp]
    9ba8:	str	xzr, [x0, #64]
    9bac:	ldr	x0, [sp]
    9bb0:	str	wzr, [x0, #72]
    9bb4:	ldr	x0, [sp]
    9bb8:	str	wzr, [x0, #76]
    9bbc:	ldr	x0, [sp]
    9bc0:	str	wzr, [x0, #80]
    9bc4:	ldr	x0, [sp]
    9bc8:	str	wzr, [x0, #84]
    9bcc:	nop
    9bd0:	add	sp, sp, #0x20
    9bd4:	ret

0000000000009bd8 <d_demangle_callback>:
    9bd8:	stp	x29, x30, [sp, #-400]!
    9bdc:	mov	x29, sp
    9be0:	stp	x19, x20, [sp, #16]
    9be4:	stp	x21, x22, [sp, #32]
    9be8:	stp	x23, x24, [sp, #48]
    9bec:	stp	x25, x26, [sp, #64]
    9bf0:	stp	x27, x28, [sp, #80]
    9bf4:	str	x0, [x29, #248]
    9bf8:	str	w1, [x29, #244]
    9bfc:	str	x2, [x29, #232]
    9c00:	str	x3, [x29, #224]
    9c04:	ldr	x0, [x29, #248]
    9c08:	ldrb	w0, [x0]
    9c0c:	cmp	w0, #0x5f
    9c10:	b.ne	9c34 <d_demangle_callback+0x5c>  // b.any
    9c14:	ldr	x0, [x29, #248]
    9c18:	add	x0, x0, #0x1
    9c1c:	ldrb	w0, [x0]
    9c20:	cmp	w0, #0x5a
    9c24:	b.ne	9c34 <d_demangle_callback+0x5c>  // b.any
    9c28:	mov	w0, #0x1                   	// #1
    9c2c:	str	w0, [x29, #388]
    9c30:	b	9d0c <d_demangle_callback+0x134>
    9c34:	mov	x2, #0x8                   	// #8
    9c38:	adrp	x0, 0 <is_fnqual_component_type>
    9c3c:	add	x1, x0, #0x0
    9c40:	ldr	x0, [x29, #248]
    9c44:	bl	0 <strncmp>
    9c48:	cmp	w0, #0x0
    9c4c:	b.ne	9cf0 <d_demangle_callback+0x118>  // b.any
    9c50:	ldr	x0, [x29, #248]
    9c54:	add	x0, x0, #0x8
    9c58:	ldrb	w0, [x0]
    9c5c:	cmp	w0, #0x2e
    9c60:	b.eq	9c8c <d_demangle_callback+0xb4>  // b.none
    9c64:	ldr	x0, [x29, #248]
    9c68:	add	x0, x0, #0x8
    9c6c:	ldrb	w0, [x0]
    9c70:	cmp	w0, #0x5f
    9c74:	b.eq	9c8c <d_demangle_callback+0xb4>  // b.none
    9c78:	ldr	x0, [x29, #248]
    9c7c:	add	x0, x0, #0x8
    9c80:	ldrb	w0, [x0]
    9c84:	cmp	w0, #0x24
    9c88:	b.ne	9cf0 <d_demangle_callback+0x118>  // b.any
    9c8c:	ldr	x0, [x29, #248]
    9c90:	add	x0, x0, #0x9
    9c94:	ldrb	w0, [x0]
    9c98:	cmp	w0, #0x44
    9c9c:	b.eq	9cb4 <d_demangle_callback+0xdc>  // b.none
    9ca0:	ldr	x0, [x29, #248]
    9ca4:	add	x0, x0, #0x9
    9ca8:	ldrb	w0, [x0]
    9cac:	cmp	w0, #0x49
    9cb0:	b.ne	9cf0 <d_demangle_callback+0x118>  // b.any
    9cb4:	ldr	x0, [x29, #248]
    9cb8:	add	x0, x0, #0xa
    9cbc:	ldrb	w0, [x0]
    9cc0:	cmp	w0, #0x5f
    9cc4:	b.ne	9cf0 <d_demangle_callback+0x118>  // b.any
    9cc8:	ldr	x0, [x29, #248]
    9ccc:	add	x0, x0, #0x9
    9cd0:	ldrb	w0, [x0]
    9cd4:	cmp	w0, #0x49
    9cd8:	b.ne	9ce4 <d_demangle_callback+0x10c>  // b.any
    9cdc:	mov	w0, #0x2                   	// #2
    9ce0:	b	9ce8 <d_demangle_callback+0x110>
    9ce4:	mov	w0, #0x3                   	// #3
    9ce8:	str	w0, [x29, #388]
    9cec:	b	9d0c <d_demangle_callback+0x134>
    9cf0:	ldr	w0, [x29, #244]
    9cf4:	and	w0, w0, #0x10
    9cf8:	cmp	w0, #0x0
    9cfc:	b.ne	9d08 <d_demangle_callback+0x130>  // b.any
    9d00:	mov	w0, #0x0                   	// #0
    9d04:	b	a064 <d_demangle_callback+0x48c>
    9d08:	str	wzr, [x29, #388]
    9d0c:	ldr	x0, [x29, #248]
    9d10:	bl	0 <strlen>
    9d14:	mov	x1, x0
    9d18:	add	x0, x29, #0x100
    9d1c:	mov	x3, x0
    9d20:	mov	x2, x1
    9d24:	ldr	w1, [x29, #244]
    9d28:	ldr	x0, [x29, #248]
    9d2c:	bl	9b24 <d_init_info>
    9d30:	ldr	w0, [x29, #244]
    9d34:	and	w0, w0, #0x40000
    9d38:	cmp	w0, #0x0
    9d3c:	b.ne	9d54 <d_demangle_callback+0x17c>  // b.any
    9d40:	ldr	w0, [x29, #300]
    9d44:	cmp	w0, #0x800
    9d48:	b.ls	9d54 <d_demangle_callback+0x17c>  // b.plast
    9d4c:	mov	w0, #0x0                   	// #0
    9d50:	b	a064 <d_demangle_callback+0x48c>
    9d54:	mov	x0, sp
    9d58:	mov	x28, x0
    9d5c:	ldr	w2, [x29, #300]
    9d60:	sxtw	x0, w2
    9d64:	sub	x0, x0, #0x1
    9d68:	str	x0, [x29, #376]
    9d6c:	sxtw	x0, w2
    9d70:	str	x0, [x29, #176]
    9d74:	str	xzr, [x29, #184]
    9d78:	ldp	x4, x5, [x29, #176]
    9d7c:	mov	x0, x4
    9d80:	mov	x1, x5
    9d84:	lsr	x3, x0, #63
    9d88:	lsl	x27, x1, #1
    9d8c:	orr	x27, x3, x27
    9d90:	lsl	x26, x0, #1
    9d94:	mov	x0, x26
    9d98:	mov	x1, x27
    9d9c:	mov	x3, x4
    9da0:	adds	x3, x0, x3
    9da4:	mov	x4, x5
    9da8:	adc	x0, x1, x4
    9dac:	str	x3, [x29, #112]
    9db0:	str	x0, [x29, #120]
    9db4:	ldp	x4, x5, [x29, #112]
    9db8:	mov	x0, x4
    9dbc:	lsr	x0, x0, #58
    9dc0:	mov	x1, x5
    9dc4:	lsl	x25, x1, #6
    9dc8:	orr	x25, x0, x25
    9dcc:	mov	x0, x4
    9dd0:	lsl	x24, x0, #6
    9dd4:	sxtw	x1, w2
    9dd8:	mov	x0, x1
    9ddc:	lsl	x0, x0, #1
    9de0:	add	x0, x0, x1
    9de4:	lsl	x0, x0, #3
    9de8:	sxtw	x0, w2
    9dec:	str	x0, [x29, #160]
    9df0:	str	xzr, [x29, #168]
    9df4:	ldp	x4, x5, [x29, #160]
    9df8:	mov	x0, x4
    9dfc:	mov	x1, x5
    9e00:	lsr	x3, x0, #63
    9e04:	lsl	x23, x1, #1
    9e08:	orr	x23, x3, x23
    9e0c:	lsl	x22, x0, #1
    9e10:	mov	x0, x22
    9e14:	mov	x1, x23
    9e18:	mov	x3, x4
    9e1c:	adds	x3, x0, x3
    9e20:	mov	x4, x5
    9e24:	adc	x0, x1, x4
    9e28:	str	x3, [x29, #96]
    9e2c:	str	x0, [x29, #104]
    9e30:	ldp	x4, x5, [x29, #96]
    9e34:	mov	x0, x4
    9e38:	lsr	x0, x0, #58
    9e3c:	mov	x1, x5
    9e40:	lsl	x21, x1, #6
    9e44:	orr	x21, x0, x21
    9e48:	mov	x0, x4
    9e4c:	lsl	x20, x0, #6
    9e50:	sxtw	x1, w2
    9e54:	mov	x0, x1
    9e58:	lsl	x0, x0, #1
    9e5c:	add	x0, x0, x1
    9e60:	lsl	x0, x0, #3
    9e64:	add	x0, x0, #0xf
    9e68:	lsr	x0, x0, #4
    9e6c:	lsl	x0, x0, #4
    9e70:	sub	sp, sp, x0
    9e74:	mov	x0, sp
    9e78:	add	x0, x0, #0x7
    9e7c:	lsr	x0, x0, #3
    9e80:	lsl	x0, x0, #3
    9e84:	str	x0, [x29, #368]
    9e88:	ldr	w0, [x29, #316]
    9e8c:	sxtw	x1, w0
    9e90:	sub	x1, x1, #0x1
    9e94:	str	x1, [x29, #360]
    9e98:	sxtw	x1, w0
    9e9c:	str	x1, [x29, #144]
    9ea0:	str	xzr, [x29, #152]
    9ea4:	ldp	x2, x3, [x29, #144]
    9ea8:	mov	x1, x2
    9eac:	lsr	x1, x1, #58
    9eb0:	mov	x4, x3
    9eb4:	lsl	x4, x4, #6
    9eb8:	str	x4, [x29, #216]
    9ebc:	ldr	x4, [x29, #216]
    9ec0:	orr	x1, x1, x4
    9ec4:	str	x1, [x29, #216]
    9ec8:	mov	x1, x2
    9ecc:	lsl	x1, x1, #6
    9ed0:	str	x1, [x29, #208]
    9ed4:	sxtw	x1, w0
    9ed8:	str	x1, [x29, #128]
    9edc:	str	xzr, [x29, #136]
    9ee0:	ldp	x2, x3, [x29, #128]
    9ee4:	mov	x1, x2
    9ee8:	lsr	x1, x1, #58
    9eec:	mov	x4, x3
    9ef0:	lsl	x4, x4, #6
    9ef4:	str	x4, [x29, #200]
    9ef8:	ldr	x4, [x29, #200]
    9efc:	orr	x1, x1, x4
    9f00:	str	x1, [x29, #200]
    9f04:	mov	x1, x2
    9f08:	lsl	x1, x1, #6
    9f0c:	str	x1, [x29, #192]
    9f10:	sxtw	x0, w0
    9f14:	lsl	x0, x0, #3
    9f18:	add	x0, x0, #0xf
    9f1c:	lsr	x0, x0, #4
    9f20:	lsl	x0, x0, #4
    9f24:	sub	sp, sp, x0
    9f28:	mov	x0, sp
    9f2c:	add	x0, x0, #0x7
    9f30:	lsr	x0, x0, #3
    9f34:	lsl	x0, x0, #3
    9f38:	str	x0, [x29, #352]
    9f3c:	ldr	x0, [x29, #368]
    9f40:	str	x0, [x29, #288]
    9f44:	ldr	x0, [x29, #352]
    9f48:	str	x0, [x29, #304]
    9f4c:	ldr	w0, [x29, #388]
    9f50:	cmp	w0, #0x3
    9f54:	b.hi	a008 <d_demangle_callback+0x430>  // b.pmore
    9f58:	ldr	w0, [x29, #388]
    9f5c:	cmp	w0, #0x2
    9f60:	b.cs	9fa4 <d_demangle_callback+0x3cc>  // b.hs, b.nlast
    9f64:	ldr	w0, [x29, #388]
    9f68:	cmp	w0, #0x0
    9f6c:	b.eq	9f80 <d_demangle_callback+0x3a8>  // b.none
    9f70:	ldr	w0, [x29, #388]
    9f74:	cmp	w0, #0x1
    9f78:	b.eq	9f90 <d_demangle_callback+0x3b8>  // b.none
    9f7c:	b	a008 <d_demangle_callback+0x430>
    9f80:	add	x0, x29, #0x100
    9f84:	bl	26d4 <d_type>
    9f88:	str	x0, [x29, #392]
    9f8c:	b	a00c <d_demangle_callback+0x434>
    9f90:	add	x0, x29, #0x100
    9f94:	mov	w1, #0x1                   	// #1
    9f98:	bl	764 <d_mangled_name>
    9f9c:	str	x0, [x29, #392]
    9fa0:	b	a00c <d_demangle_callback+0x434>
    9fa4:	ldr	x0, [x29, #280]
    9fa8:	add	x0, x0, #0xb
    9fac:	str	x0, [x29, #280]
    9fb0:	ldr	w0, [x29, #388]
    9fb4:	cmp	w0, #0x2
    9fb8:	b.ne	9fc4 <d_demangle_callback+0x3ec>  // b.any
    9fbc:	mov	w19, #0x44                  	// #68
    9fc0:	b	9fc8 <d_demangle_callback+0x3f0>
    9fc4:	mov	w19, #0x45                  	// #69
    9fc8:	ldr	x1, [x29, #280]
    9fcc:	add	x0, x29, #0x100
    9fd0:	bl	3b8 <d_make_demangle_mangled_name>
    9fd4:	mov	x1, x0
    9fd8:	add	x0, x29, #0x100
    9fdc:	mov	x3, #0x0                   	// #0
    9fe0:	mov	x2, x1
    9fe4:	mov	w1, w19
    9fe8:	bl	2c4 <d_make_comp>
    9fec:	str	x0, [x29, #392]
    9ff0:	ldr	x19, [x29, #280]
    9ff4:	ldr	x0, [x29, #280]
    9ff8:	bl	0 <strlen>
    9ffc:	add	x0, x19, x0
    a000:	str	x0, [x29, #280]
    a004:	b	a00c <d_demangle_callback+0x434>
    a008:	bl	0 <abort>
    a00c:	ldr	w0, [x29, #244]
    a010:	and	w0, w0, #0x1
    a014:	cmp	w0, #0x0
    a018:	b.eq	a030 <d_demangle_callback+0x458>  // b.none
    a01c:	ldr	x0, [x29, #280]
    a020:	ldrb	w0, [x0]
    a024:	cmp	w0, #0x0
    a028:	b.eq	a030 <d_demangle_callback+0x458>  // b.none
    a02c:	str	xzr, [x29, #392]
    a030:	ldr	x0, [x29, #392]
    a034:	cmp	x0, #0x0
    a038:	b.eq	a054 <d_demangle_callback+0x47c>  // b.none
    a03c:	ldr	x3, [x29, #224]
    a040:	ldr	x2, [x29, #232]
    a044:	ldr	x1, [x29, #392]
    a048:	ldr	w0, [x29, #244]
    a04c:	bl	609c <d_print_callback>
    a050:	b	a058 <d_demangle_callback+0x480>
    a054:	mov	w0, #0x0                   	// #0
    a058:	str	w0, [x29, #348]
    a05c:	mov	sp, x28
    a060:	ldr	w0, [x29, #348]
    a064:	mov	sp, x29
    a068:	ldp	x19, x20, [sp, #16]
    a06c:	ldp	x21, x22, [sp, #32]
    a070:	ldp	x23, x24, [sp, #48]
    a074:	ldp	x25, x26, [sp, #64]
    a078:	ldp	x27, x28, [sp, #80]
    a07c:	ldp	x29, x30, [sp], #400
    a080:	ret

000000000000a084 <d_demangle>:
    a084:	stp	x29, x30, [sp, #-96]!
    a088:	mov	x29, sp
    a08c:	str	x0, [sp, #40]
    a090:	str	w1, [sp, #36]
    a094:	str	x2, [sp, #24]
    a098:	add	x0, sp, #0x38
    a09c:	mov	x1, #0x0                   	// #0
    a0a0:	bl	59cc <d_growable_string_init>
    a0a4:	add	x0, sp, #0x38
    a0a8:	mov	x3, x0
    a0ac:	adrp	x0, 0 <is_fnqual_component_type>
    a0b0:	add	x2, x0, #0x0
    a0b4:	ldr	w1, [sp, #36]
    a0b8:	ldr	x0, [sp, #40]
    a0bc:	bl	9bd8 <d_demangle_callback>
    a0c0:	str	w0, [sp, #92]
    a0c4:	ldr	w0, [sp, #92]
    a0c8:	cmp	w0, #0x0
    a0cc:	b.ne	a0e8 <d_demangle+0x64>  // b.any
    a0d0:	ldr	x0, [sp, #56]
    a0d4:	bl	0 <free>
    a0d8:	ldr	x0, [sp, #24]
    a0dc:	str	xzr, [x0]
    a0e0:	mov	x0, #0x0                   	// #0
    a0e4:	b	a10c <d_demangle+0x88>
    a0e8:	ldr	w0, [sp, #80]
    a0ec:	cmp	w0, #0x0
    a0f0:	b.ne	a0fc <d_demangle+0x78>  // b.any
    a0f4:	ldr	x0, [sp, #72]
    a0f8:	b	a100 <d_demangle+0x7c>
    a0fc:	mov	x0, #0x1                   	// #1
    a100:	ldr	x1, [sp, #24]
    a104:	str	x0, [x1]
    a108:	ldr	x0, [sp, #56]
    a10c:	ldp	x29, x30, [sp], #96
    a110:	ret

000000000000a114 <__cxa_demangle>:
    a114:	stp	x29, x30, [sp, #-64]!
    a118:	mov	x29, sp
    a11c:	str	x0, [sp, #40]
    a120:	str	x1, [sp, #32]
    a124:	str	x2, [sp, #24]
    a128:	str	x3, [sp, #16]
    a12c:	ldr	x0, [sp, #40]
    a130:	cmp	x0, #0x0
    a134:	b.ne	a158 <__cxa_demangle+0x44>  // b.any
    a138:	ldr	x0, [sp, #16]
    a13c:	cmp	x0, #0x0
    a140:	b.eq	a150 <__cxa_demangle+0x3c>  // b.none
    a144:	ldr	x0, [sp, #16]
    a148:	mov	w1, #0xfffffffd            	// #-3
    a14c:	str	w1, [x0]
    a150:	mov	x0, #0x0                   	// #0
    a154:	b	a280 <__cxa_demangle+0x16c>
    a158:	ldr	x0, [sp, #32]
    a15c:	cmp	x0, #0x0
    a160:	b.eq	a190 <__cxa_demangle+0x7c>  // b.none
    a164:	ldr	x0, [sp, #24]
    a168:	cmp	x0, #0x0
    a16c:	b.ne	a190 <__cxa_demangle+0x7c>  // b.any
    a170:	ldr	x0, [sp, #16]
    a174:	cmp	x0, #0x0
    a178:	b.eq	a188 <__cxa_demangle+0x74>  // b.none
    a17c:	ldr	x0, [sp, #16]
    a180:	mov	w1, #0xfffffffd            	// #-3
    a184:	str	w1, [x0]
    a188:	mov	x0, #0x0                   	// #0
    a18c:	b	a280 <__cxa_demangle+0x16c>
    a190:	add	x0, sp, #0x30
    a194:	mov	x2, x0
    a198:	mov	w1, #0x11                  	// #17
    a19c:	ldr	x0, [sp, #40]
    a1a0:	bl	a084 <d_demangle>
    a1a4:	str	x0, [sp, #56]
    a1a8:	ldr	x0, [sp, #56]
    a1ac:	cmp	x0, #0x0
    a1b0:	b.ne	a1f0 <__cxa_demangle+0xdc>  // b.any
    a1b4:	ldr	x0, [sp, #16]
    a1b8:	cmp	x0, #0x0
    a1bc:	b.eq	a1e8 <__cxa_demangle+0xd4>  // b.none
    a1c0:	ldr	x0, [sp, #48]
    a1c4:	cmp	x0, #0x1
    a1c8:	b.ne	a1dc <__cxa_demangle+0xc8>  // b.any
    a1cc:	ldr	x0, [sp, #16]
    a1d0:	mov	w1, #0xffffffff            	// #-1
    a1d4:	str	w1, [x0]
    a1d8:	b	a1e8 <__cxa_demangle+0xd4>
    a1dc:	ldr	x0, [sp, #16]
    a1e0:	mov	w1, #0xfffffffe            	// #-2
    a1e4:	str	w1, [x0]
    a1e8:	mov	x0, #0x0                   	// #0
    a1ec:	b	a280 <__cxa_demangle+0x16c>
    a1f0:	ldr	x0, [sp, #32]
    a1f4:	cmp	x0, #0x0
    a1f8:	b.ne	a218 <__cxa_demangle+0x104>  // b.any
    a1fc:	ldr	x0, [sp, #24]
    a200:	cmp	x0, #0x0
    a204:	b.eq	a268 <__cxa_demangle+0x154>  // b.none
    a208:	ldr	x1, [sp, #48]
    a20c:	ldr	x0, [sp, #24]
    a210:	str	x1, [x0]
    a214:	b	a268 <__cxa_demangle+0x154>
    a218:	ldr	x0, [sp, #56]
    a21c:	bl	0 <strlen>
    a220:	mov	x1, x0
    a224:	ldr	x0, [sp, #24]
    a228:	ldr	x0, [x0]
    a22c:	cmp	x1, x0
    a230:	b.cs	a254 <__cxa_demangle+0x140>  // b.hs, b.nlast
    a234:	ldr	x1, [sp, #56]
    a238:	ldr	x0, [sp, #32]
    a23c:	bl	0 <strcpy>
    a240:	ldr	x0, [sp, #56]
    a244:	bl	0 <free>
    a248:	ldr	x0, [sp, #32]
    a24c:	str	x0, [sp, #56]
    a250:	b	a268 <__cxa_demangle+0x154>
    a254:	ldr	x0, [sp, #32]
    a258:	bl	0 <free>
    a25c:	ldr	x1, [sp, #48]
    a260:	ldr	x0, [sp, #24]
    a264:	str	x1, [x0]
    a268:	ldr	x0, [sp, #16]
    a26c:	cmp	x0, #0x0
    a270:	b.eq	a27c <__cxa_demangle+0x168>  // b.none
    a274:	ldr	x0, [sp, #16]
    a278:	str	wzr, [x0]
    a27c:	ldr	x0, [sp, #56]
    a280:	ldp	x29, x30, [sp], #64
    a284:	ret

000000000000a288 <__gcclibcxx_demangle_callback>:
    a288:	stp	x29, x30, [sp, #-64]!
    a28c:	mov	x29, sp
    a290:	str	x0, [sp, #40]
    a294:	str	x1, [sp, #32]
    a298:	str	x2, [sp, #24]
    a29c:	ldr	x0, [sp, #40]
    a2a0:	cmp	x0, #0x0
    a2a4:	b.eq	a2b4 <__gcclibcxx_demangle_callback+0x2c>  // b.none
    a2a8:	ldr	x0, [sp, #32]
    a2ac:	cmp	x0, #0x0
    a2b0:	b.ne	a2bc <__gcclibcxx_demangle_callback+0x34>  // b.any
    a2b4:	mov	w0, #0xfffffffd            	// #-3
    a2b8:	b	a2ec <__gcclibcxx_demangle_callback+0x64>
    a2bc:	ldr	x3, [sp, #24]
    a2c0:	ldr	x2, [sp, #32]
    a2c4:	mov	w1, #0x11                  	// #17
    a2c8:	ldr	x0, [sp, #40]
    a2cc:	bl	9bd8 <d_demangle_callback>
    a2d0:	str	w0, [sp, #60]
    a2d4:	ldr	w0, [sp, #60]
    a2d8:	cmp	w0, #0x0
    a2dc:	b.ne	a2e8 <__gcclibcxx_demangle_callback+0x60>  // b.any
    a2e0:	mov	w0, #0xfffffffe            	// #-2
    a2e4:	b	a2ec <__gcclibcxx_demangle_callback+0x64>
    a2e8:	mov	w0, #0x0                   	// #0
    a2ec:	ldp	x29, x30, [sp], #64
    a2f0:	ret
