
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libmpc.so.3.1.0_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000004958 <.init>:
    4958:	stp	x29, x30, [sp, #-16]!
    495c:	mov	x29, sp
    4960:	bl	55d0 <mpfr_get_emin_min@plt+0x10>
    4964:	ldp	x29, x30, [sp], #16
    4968:	ret

Disassembly of section .plt:

0000000000004970 <mpfr_set_underflow@plt-0x20>:
    4970:	stp	x16, x30, [sp, #-16]!
    4974:	adrp	x16, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    4978:	ldr	x17, [x16, #4088]
    497c:	add	x16, x16, #0xff8
    4980:	br	x17
    4984:	nop
    4988:	nop
    498c:	nop

0000000000004990 <mpfr_set_underflow@plt>:
    4990:	adrp	x16, 26000 <mpfr_set_underflow>
    4994:	ldr	x17, [x16]
    4998:	add	x16, x16, #0x0
    499c:	br	x17

00000000000049a0 <__gmpz_get_si@plt>:
    49a0:	adrp	x16, 26000 <mpfr_set_underflow>
    49a4:	ldr	x17, [x16, #8]
    49a8:	add	x16, x16, #0x8
    49ac:	br	x17

00000000000049b0 <mpfr_set_ld@plt>:
    49b0:	adrp	x16, 26000 <mpfr_set_underflow>
    49b4:	ldr	x17, [x16, #16]
    49b8:	add	x16, x16, #0x10
    49bc:	br	x17

00000000000049c0 <mpfr_mul_ui@plt>:
    49c0:	adrp	x16, 26000 <mpfr_set_underflow>
    49c4:	ldr	x17, [x16, #24]
    49c8:	add	x16, x16, #0x18
    49cc:	br	x17

00000000000049d0 <mpfr_mul_q@plt>:
    49d0:	adrp	x16, 26000 <mpfr_set_underflow>
    49d4:	ldr	x17, [x16, #32]
    49d8:	add	x16, x16, #0x20
    49dc:	br	x17

00000000000049e0 <mpfr_set_si_2exp@plt>:
    49e0:	adrp	x16, 26000 <mpfr_set_underflow>
    49e4:	ldr	x17, [x16, #40]
    49e8:	add	x16, x16, #0x28
    49ec:	br	x17

00000000000049f0 <__gmpz_scan1@plt>:
    49f0:	adrp	x16, 26000 <mpfr_set_underflow>
    49f4:	ldr	x17, [x16, #48]
    49f8:	add	x16, x16, #0x30
    49fc:	br	x17

0000000000004a00 <strlen@plt>:
    4a00:	adrp	x16, 26000 <mpfr_set_underflow>
    4a04:	ldr	x17, [x16, #56]
    4a08:	add	x16, x16, #0x38
    4a0c:	br	x17

0000000000004a10 <mpc_clear@plt>:
    4a10:	adrp	x16, 26000 <mpfr_set_underflow>
    4a14:	ldr	x17, [x16, #64]
    4a18:	add	x16, x16, #0x40
    4a1c:	br	x17

0000000000004a20 <mpfr_cosh@plt>:
    4a20:	adrp	x16, 26000 <mpfr_set_underflow>
    4a24:	ldr	x17, [x16, #72]
    4a28:	add	x16, x16, #0x48
    4a2c:	br	x17

0000000000004a30 <mpfr_tanh@plt>:
    4a30:	adrp	x16, 26000 <mpfr_set_underflow>
    4a34:	ldr	x17, [x16, #80]
    4a38:	add	x16, x16, #0x50
    4a3c:	br	x17

0000000000004a40 <mpfr_set_nan@plt>:
    4a40:	adrp	x16, 26000 <mpfr_set_underflow>
    4a44:	ldr	x17, [x16, #88]
    4a48:	add	x16, x16, #0x58
    4a4c:	br	x17

0000000000004a50 <mpfr_clear_overflow@plt>:
    4a50:	adrp	x16, 26000 <mpfr_set_underflow>
    4a54:	ldr	x17, [x16, #96]
    4a58:	add	x16, x16, #0x60
    4a5c:	br	x17

0000000000004a60 <mpfr_sub@plt>:
    4a60:	adrp	x16, 26000 <mpfr_set_underflow>
    4a64:	ldr	x17, [x16, #104]
    4a68:	add	x16, x16, #0x68
    4a6c:	br	x17

0000000000004a70 <mpfr_mul_2si@plt>:
    4a70:	adrp	x16, 26000 <mpfr_set_underflow>
    4a74:	ldr	x17, [x16, #112]
    4a78:	add	x16, x16, #0x70
    4a7c:	br	x17

0000000000004a80 <mpfr_const_pi@plt>:
    4a80:	adrp	x16, 26000 <mpfr_set_underflow>
    4a84:	ldr	x17, [x16, #120]
    4a88:	add	x16, x16, #0x78
    4a8c:	br	x17

0000000000004a90 <mpfr_fmms@plt>:
    4a90:	adrp	x16, 26000 <mpfr_set_underflow>
    4a94:	ldr	x17, [x16, #128]
    4a98:	add	x16, x16, #0x80
    4a9c:	br	x17

0000000000004aa0 <mpfr_init@plt>:
    4aa0:	adrp	x16, 26000 <mpfr_set_underflow>
    4aa4:	ldr	x17, [x16, #136]
    4aa8:	add	x16, x16, #0x88
    4aac:	br	x17

0000000000004ab0 <mpfr_tan@plt>:
    4ab0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ab4:	ldr	x17, [x16, #144]
    4ab8:	add	x16, x16, #0x90
    4abc:	br	x17

0000000000004ac0 <mpfr_strtofr@plt>:
    4ac0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ac4:	ldr	x17, [x16, #152]
    4ac8:	add	x16, x16, #0x98
    4acc:	br	x17

0000000000004ad0 <__gmpz_sub_ui@plt>:
    4ad0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ad4:	ldr	x17, [x16, #160]
    4ad8:	add	x16, x16, #0xa0
    4adc:	br	x17

0000000000004ae0 <__gmp_get_memory_functions@plt>:
    4ae0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ae4:	ldr	x17, [x16, #168]
    4ae8:	add	x16, x16, #0xa8
    4aec:	br	x17

0000000000004af0 <__gmpz_sqrt@plt>:
    4af0:	adrp	x16, 26000 <mpfr_set_underflow>
    4af4:	ldr	x17, [x16, #176]
    4af8:	add	x16, x16, #0xb0
    4afc:	br	x17

0000000000004b00 <mpfr_set_erangeflag@plt>:
    4b00:	adrp	x16, 26000 <mpfr_set_underflow>
    4b04:	ldr	x17, [x16, #184]
    4b08:	add	x16, x16, #0xb8
    4b0c:	br	x17

0000000000004b10 <__gmpz_set_ui@plt>:
    4b10:	adrp	x16, 26000 <mpfr_set_underflow>
    4b14:	ldr	x17, [x16, #192]
    4b18:	add	x16, x16, #0xc0
    4b1c:	br	x17

0000000000004b20 <__cxa_finalize@plt>:
    4b20:	adrp	x16, 26000 <mpfr_set_underflow>
    4b24:	ldr	x17, [x16, #200]
    4b28:	add	x16, x16, #0xc8
    4b2c:	br	x17

0000000000004b30 <sprintf@plt>:
    4b30:	adrp	x16, 26000 <mpfr_set_underflow>
    4b34:	ldr	x17, [x16, #208]
    4b38:	add	x16, x16, #0xd0
    4b3c:	br	x17

0000000000004b40 <mpc_sqrt@plt>:
    4b40:	adrp	x16, 26000 <mpfr_set_underflow>
    4b44:	ldr	x17, [x16, #216]
    4b48:	add	x16, x16, #0xd8
    4b4c:	br	x17

0000000000004b50 <mpfr_get_d@plt>:
    4b50:	adrp	x16, 26000 <mpfr_set_underflow>
    4b54:	ldr	x17, [x16, #224]
    4b58:	add	x16, x16, #0xe0
    4b5c:	br	x17

0000000000004b60 <mpfr_set_f@plt>:
    4b60:	adrp	x16, 26000 <mpfr_set_underflow>
    4b64:	ldr	x17, [x16, #232]
    4b68:	add	x16, x16, #0xe8
    4b6c:	br	x17

0000000000004b70 <mpfr_mul@plt>:
    4b70:	adrp	x16, 26000 <mpfr_set_underflow>
    4b74:	ldr	x17, [x16, #240]
    4b78:	add	x16, x16, #0xf0
    4b7c:	br	x17

0000000000004b80 <mpfr_neg@plt>:
    4b80:	adrp	x16, 26000 <mpfr_set_underflow>
    4b84:	ldr	x17, [x16, #248]
    4b88:	add	x16, x16, #0xf8
    4b8c:	br	x17

0000000000004b90 <mpfr_pow@plt>:
    4b90:	adrp	x16, 26000 <mpfr_set_underflow>
    4b94:	ldr	x17, [x16, #256]
    4b98:	add	x16, x16, #0x100
    4b9c:	br	x17

0000000000004ba0 <fputc@plt>:
    4ba0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ba4:	ldr	x17, [x16, #264]
    4ba8:	add	x16, x16, #0x108
    4bac:	br	x17

0000000000004bb0 <mpfr_nextbelow@plt>:
    4bb0:	adrp	x16, 26000 <mpfr_set_underflow>
    4bb4:	ldr	x17, [x16, #272]
    4bb8:	add	x16, x16, #0x110
    4bbc:	br	x17

0000000000004bc0 <__gmpz_sub@plt>:
    4bc0:	adrp	x16, 26000 <mpfr_set_underflow>
    4bc4:	ldr	x17, [x16, #280]
    4bc8:	add	x16, x16, #0x118
    4bcc:	br	x17

0000000000004bd0 <mpfr_get_z@plt>:
    4bd0:	adrp	x16, 26000 <mpfr_set_underflow>
    4bd4:	ldr	x17, [x16, #288]
    4bd8:	add	x16, x16, #0x120
    4bdc:	br	x17

0000000000004be0 <mpfr_sinh_cosh@plt>:
    4be0:	adrp	x16, 26000 <mpfr_set_underflow>
    4be4:	ldr	x17, [x16, #296]
    4be8:	add	x16, x16, #0x128
    4bec:	br	x17

0000000000004bf0 <mpc_alloc_str@plt>:
    4bf0:	adrp	x16, 26000 <mpfr_set_underflow>
    4bf4:	ldr	x17, [x16, #304]
    4bf8:	add	x16, x16, #0x130
    4bfc:	br	x17

0000000000004c00 <mpc_set_prec@plt>:
    4c00:	adrp	x16, 26000 <mpfr_set_underflow>
    4c04:	ldr	x17, [x16, #312]
    4c08:	add	x16, x16, #0x138
    4c0c:	br	x17

0000000000004c10 <mpfr_set_exp@plt>:
    4c10:	adrp	x16, 26000 <mpfr_set_underflow>
    4c14:	ldr	x17, [x16, #320]
    4c18:	add	x16, x16, #0x140
    4c1c:	br	x17

0000000000004c20 <mpc_tan@plt>:
    4c20:	adrp	x16, 26000 <mpfr_set_underflow>
    4c24:	ldr	x17, [x16, #328]
    4c28:	add	x16, x16, #0x148
    4c2c:	br	x17

0000000000004c30 <mpfr_set_d@plt>:
    4c30:	adrp	x16, 26000 <mpfr_set_underflow>
    4c34:	ldr	x17, [x16, #336]
    4c38:	add	x16, x16, #0x150
    4c3c:	br	x17

0000000000004c40 <__gmpz_divisible_2exp_p@plt>:
    4c40:	adrp	x16, 26000 <mpfr_set_underflow>
    4c44:	ldr	x17, [x16, #344]
    4c48:	add	x16, x16, #0x158
    4c4c:	br	x17

0000000000004c50 <__ctype_tolower_loc@plt>:
    4c50:	adrp	x16, 26000 <mpfr_set_underflow>
    4c54:	ldr	x17, [x16, #352]
    4c58:	add	x16, x16, #0x160
    4c5c:	br	x17

0000000000004c60 <__gmpz_fits_slong_p@plt>:
    4c60:	adrp	x16, 26000 <mpfr_set_underflow>
    4c64:	ldr	x17, [x16, #360]
    4c68:	add	x16, x16, #0x168
    4c6c:	br	x17

0000000000004c70 <localeconv@plt>:
    4c70:	adrp	x16, 26000 <mpfr_set_underflow>
    4c74:	ldr	x17, [x16, #368]
    4c78:	add	x16, x16, #0x170
    4c7c:	br	x17

0000000000004c80 <mpfr_set_prec@plt>:
    4c80:	adrp	x16, 26000 <mpfr_set_underflow>
    4c84:	ldr	x17, [x16, #376]
    4c88:	add	x16, x16, #0x178
    4c8c:	br	x17

0000000000004c90 <mpfr_fmma@plt>:
    4c90:	adrp	x16, 26000 <mpfr_set_underflow>
    4c94:	ldr	x17, [x16, #384]
    4c98:	add	x16, x16, #0x180
    4c9c:	br	x17

0000000000004ca0 <mpfr_atan2@plt>:
    4ca0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ca4:	ldr	x17, [x16, #392]
    4ca8:	add	x16, x16, #0x188
    4cac:	br	x17

0000000000004cb0 <mpfr_cmp_ui_2exp@plt>:
    4cb0:	adrp	x16, 26000 <mpfr_set_underflow>
    4cb4:	ldr	x17, [x16, #400]
    4cb8:	add	x16, x16, #0x190
    4cbc:	br	x17

0000000000004cc0 <__gmpz_divexact@plt>:
    4cc0:	adrp	x16, 26000 <mpfr_set_underflow>
    4cc4:	ldr	x17, [x16, #408]
    4cc8:	add	x16, x16, #0x198
    4ccc:	br	x17

0000000000004cd0 <mpc_add@plt>:
    4cd0:	adrp	x16, 26000 <mpfr_set_underflow>
    4cd4:	ldr	x17, [x16, #416]
    4cd8:	add	x16, x16, #0x1a0
    4cdc:	br	x17

0000000000004ce0 <mpc_set_ui@plt>:
    4ce0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ce4:	ldr	x17, [x16, #424]
    4ce8:	add	x16, x16, #0x1a8
    4cec:	br	x17

0000000000004cf0 <mpc_init2@plt>:
    4cf0:	adrp	x16, 26000 <mpfr_set_underflow>
    4cf4:	ldr	x17, [x16, #432]
    4cf8:	add	x16, x16, #0x1b0
    4cfc:	br	x17

0000000000004d00 <__gmpz_set@plt>:
    4d00:	adrp	x16, 26000 <mpfr_set_underflow>
    4d04:	ldr	x17, [x16, #440]
    4d08:	add	x16, x16, #0x1b8
    4d0c:	br	x17

0000000000004d10 <mpfr_set_zero@plt>:
    4d10:	adrp	x16, 26000 <mpfr_set_underflow>
    4d14:	ldr	x17, [x16, #448]
    4d18:	add	x16, x16, #0x1c0
    4d1c:	br	x17

0000000000004d20 <mpc_ceil_log2@plt>:
    4d20:	adrp	x16, 26000 <mpfr_set_underflow>
    4d24:	ldr	x17, [x16, #456]
    4d28:	add	x16, x16, #0x1c8
    4d2c:	br	x17

0000000000004d30 <__gmpz_tstbit@plt>:
    4d30:	adrp	x16, 26000 <mpfr_set_underflow>
    4d34:	ldr	x17, [x16, #464]
    4d38:	add	x16, x16, #0x1d0
    4d3c:	br	x17

0000000000004d40 <__gmpz_mul@plt>:
    4d40:	adrp	x16, 26000 <mpfr_set_underflow>
    4d44:	ldr	x17, [x16, #472]
    4d48:	add	x16, x16, #0x1d8
    4d4c:	br	x17

0000000000004d50 <mpc_set_ld_ld@plt>:
    4d50:	adrp	x16, 26000 <mpfr_set_underflow>
    4d54:	ldr	x17, [x16, #480]
    4d58:	add	x16, x16, #0x1e0
    4d5c:	br	x17

0000000000004d60 <mpfr_clear@plt>:
    4d60:	adrp	x16, 26000 <mpfr_set_underflow>
    4d64:	ldr	x17, [x16, #488]
    4d68:	add	x16, x16, #0x1e8
    4d6c:	br	x17

0000000000004d70 <__gmpfr_set_sj@plt>:
    4d70:	adrp	x16, 26000 <mpfr_set_underflow>
    4d74:	ldr	x17, [x16, #496]
    4d78:	add	x16, x16, #0x1f0
    4d7c:	br	x17

0000000000004d80 <mpfr_log@plt>:
    4d80:	adrp	x16, 26000 <mpfr_set_underflow>
    4d84:	ldr	x17, [x16, #504]
    4d88:	add	x16, x16, #0x1f8
    4d8c:	br	x17

0000000000004d90 <mpfr_atanh@plt>:
    4d90:	adrp	x16, 26000 <mpfr_set_underflow>
    4d94:	ldr	x17, [x16, #512]
    4d98:	add	x16, x16, #0x200
    4d9c:	br	x17

0000000000004da0 <__gmpz_swap@plt>:
    4da0:	adrp	x16, 26000 <mpfr_set_underflow>
    4da4:	ldr	x17, [x16, #520]
    4da8:	add	x16, x16, #0x208
    4dac:	br	x17

0000000000004db0 <mpc_log@plt>:
    4db0:	adrp	x16, 26000 <mpfr_set_underflow>
    4db4:	ldr	x17, [x16, #528]
    4db8:	add	x16, x16, #0x210
    4dbc:	br	x17

0000000000004dc0 <mpfr_asinh@plt>:
    4dc0:	adrp	x16, 26000 <mpfr_set_underflow>
    4dc4:	ldr	x17, [x16, #536]
    4dc8:	add	x16, x16, #0x218
    4dcc:	br	x17

0000000000004dd0 <mpc_fix_inf@plt>:
    4dd0:	adrp	x16, 26000 <mpfr_set_underflow>
    4dd4:	ldr	x17, [x16, #544]
    4dd8:	add	x16, x16, #0x220
    4ddc:	br	x17

0000000000004de0 <strcat@plt>:
    4de0:	adrp	x16, 26000 <mpfr_set_underflow>
    4de4:	ldr	x17, [x16, #552]
    4de8:	add	x16, x16, #0x228
    4dec:	br	x17

0000000000004df0 <mpc_pow_usi@plt>:
    4df0:	adrp	x16, 26000 <mpfr_set_underflow>
    4df4:	ldr	x17, [x16, #560]
    4df8:	add	x16, x16, #0x230
    4dfc:	br	x17

0000000000004e00 <mpfr_nextabove@plt>:
    4e00:	adrp	x16, 26000 <mpfr_set_underflow>
    4e04:	ldr	x17, [x16, #568]
    4e08:	add	x16, x16, #0x238
    4e0c:	br	x17

0000000000004e10 <__gmpz_fdiv_q_2exp@plt>:
    4e10:	adrp	x16, 26000 <mpfr_set_underflow>
    4e14:	ldr	x17, [x16, #576]
    4e18:	add	x16, x16, #0x240
    4e1c:	br	x17

0000000000004e20 <mpfr_clear_underflow@plt>:
    4e20:	adrp	x16, 26000 <mpfr_set_underflow>
    4e24:	ldr	x17, [x16, #584]
    4e28:	add	x16, x16, #0x248
    4e2c:	br	x17

0000000000004e30 <mpfr_integer_p@plt>:
    4e30:	adrp	x16, 26000 <mpfr_set_underflow>
    4e34:	ldr	x17, [x16, #592]
    4e38:	add	x16, x16, #0x250
    4e3c:	br	x17

0000000000004e40 <mpfr_asin@plt>:
    4e40:	adrp	x16, 26000 <mpfr_set_underflow>
    4e44:	ldr	x17, [x16, #600]
    4e48:	add	x16, x16, #0x258
    4e4c:	br	x17

0000000000004e50 <mpc_set_ld@plt>:
    4e50:	adrp	x16, 26000 <mpfr_set_underflow>
    4e54:	ldr	x17, [x16, #608]
    4e58:	add	x16, x16, #0x260
    4e5c:	br	x17

0000000000004e60 <mpfr_add@plt>:
    4e60:	adrp	x16, 26000 <mpfr_set_underflow>
    4e64:	ldr	x17, [x16, #616]
    4e68:	add	x16, x16, #0x268
    4e6c:	br	x17

0000000000004e70 <mpfr_clears@plt>:
    4e70:	adrp	x16, 26000 <mpfr_set_underflow>
    4e74:	ldr	x17, [x16, #624]
    4e78:	add	x16, x16, #0x270
    4e7c:	br	x17

0000000000004e80 <mpfr_set@plt>:
    4e80:	adrp	x16, 26000 <mpfr_set_underflow>
    4e84:	ldr	x17, [x16, #632]
    4e88:	add	x16, x16, #0x278
    4e8c:	br	x17

0000000000004e90 <__gmpz_mul_2exp@plt>:
    4e90:	adrp	x16, 26000 <mpfr_set_underflow>
    4e94:	ldr	x17, [x16, #640]
    4e98:	add	x16, x16, #0x280
    4e9c:	br	x17

0000000000004ea0 <mpc_norm@plt>:
    4ea0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ea4:	ldr	x17, [x16, #648]
    4ea8:	add	x16, x16, #0x288
    4eac:	br	x17

0000000000004eb0 <mpc_mul_naive@plt>:
    4eb0:	adrp	x16, 26000 <mpfr_set_underflow>
    4eb4:	ldr	x17, [x16, #656]
    4eb8:	add	x16, x16, #0x290
    4ebc:	br	x17

0000000000004ec0 <mpfr_set_z@plt>:
    4ec0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ec4:	ldr	x17, [x16, #664]
    4ec8:	add	x16, x16, #0x298
    4ecc:	br	x17

0000000000004ed0 <mpc_mul@plt>:
    4ed0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ed4:	ldr	x17, [x16, #672]
    4ed8:	add	x16, x16, #0x2a0
    4edc:	br	x17

0000000000004ee0 <mpfr_add_ui@plt>:
    4ee0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ee4:	ldr	x17, [x16, #680]
    4ee8:	add	x16, x16, #0x2a8
    4eec:	br	x17

0000000000004ef0 <mpc_set_nan@plt>:
    4ef0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ef4:	ldr	x17, [x16, #688]
    4ef8:	add	x16, x16, #0x2b0
    4efc:	br	x17

0000000000004f00 <mpc_strtoc@plt>:
    4f00:	adrp	x16, 26000 <mpfr_set_underflow>
    4f04:	ldr	x17, [x16, #696]
    4f08:	add	x16, x16, #0x2b8
    4f0c:	br	x17

0000000000004f10 <__gmpz_addmul@plt>:
    4f10:	adrp	x16, 26000 <mpfr_set_underflow>
    4f14:	ldr	x17, [x16, #704]
    4f18:	add	x16, x16, #0x2c0
    4f1c:	br	x17

0000000000004f20 <getc@plt>:
    4f20:	adrp	x16, 26000 <mpfr_set_underflow>
    4f24:	ldr	x17, [x16, #712]
    4f28:	add	x16, x16, #0x2c8
    4f2c:	br	x17

0000000000004f30 <mpc_sqr@plt>:
    4f30:	adrp	x16, 26000 <mpfr_set_underflow>
    4f34:	ldr	x17, [x16, #720]
    4f38:	add	x16, x16, #0x2d0
    4f3c:	br	x17

0000000000004f40 <mpfr_mul_2ui@plt>:
    4f40:	adrp	x16, 26000 <mpfr_set_underflow>
    4f44:	ldr	x17, [x16, #728]
    4f48:	add	x16, x16, #0x2d8
    4f4c:	br	x17

0000000000004f50 <mpc_sin@plt>:
    4f50:	adrp	x16, 26000 <mpfr_set_underflow>
    4f54:	ldr	x17, [x16, #736]
    4f58:	add	x16, x16, #0x2e0
    4f5c:	br	x17

0000000000004f60 <mpc_conj@plt>:
    4f60:	adrp	x16, 26000 <mpfr_set_underflow>
    4f64:	ldr	x17, [x16, #744]
    4f68:	add	x16, x16, #0x2e8
    4f6c:	br	x17

0000000000004f70 <mpfr_ui_div@plt>:
    4f70:	adrp	x16, 26000 <mpfr_set_underflow>
    4f74:	ldr	x17, [x16, #752]
    4f78:	add	x16, x16, #0x2f0
    4f7c:	br	x17

0000000000004f80 <mpfr_sinh@plt>:
    4f80:	adrp	x16, 26000 <mpfr_set_underflow>
    4f84:	ldr	x17, [x16, #760]
    4f88:	add	x16, x16, #0x2f8
    4f8c:	br	x17

0000000000004f90 <mpc_set_d_d@plt>:
    4f90:	adrp	x16, 26000 <mpfr_set_underflow>
    4f94:	ldr	x17, [x16, #768]
    4f98:	add	x16, x16, #0x300
    4f9c:	br	x17

0000000000004fa0 <__gmpz_add_ui@plt>:
    4fa0:	adrp	x16, 26000 <mpfr_set_underflow>
    4fa4:	ldr	x17, [x16, #776]
    4fa8:	add	x16, x16, #0x308
    4fac:	br	x17

0000000000004fb0 <__gmpq_clear@plt>:
    4fb0:	adrp	x16, 26000 <mpfr_set_underflow>
    4fb4:	ldr	x17, [x16, #784]
    4fb8:	add	x16, x16, #0x310
    4fbc:	br	x17

0000000000004fc0 <__gmon_start__@plt>:
    4fc0:	adrp	x16, 26000 <mpfr_set_underflow>
    4fc4:	ldr	x17, [x16, #792]
    4fc8:	add	x16, x16, #0x318
    4fcc:	br	x17

0000000000004fd0 <mpfr_acos@plt>:
    4fd0:	adrp	x16, 26000 <mpfr_set_underflow>
    4fd4:	ldr	x17, [x16, #800]
    4fd8:	add	x16, x16, #0x320
    4fdc:	br	x17

0000000000004fe0 <mpfr_cmp_si_2exp@plt>:
    4fe0:	adrp	x16, 26000 <mpfr_set_underflow>
    4fe4:	ldr	x17, [x16, #808]
    4fe8:	add	x16, x16, #0x328
    4fec:	br	x17

0000000000004ff0 <mpc_free_str@plt>:
    4ff0:	adrp	x16, 26000 <mpfr_set_underflow>
    4ff4:	ldr	x17, [x16, #816]
    4ff8:	add	x16, x16, #0x330
    4ffc:	br	x17

0000000000005000 <abort@plt>:
    5000:	adrp	x16, 26000 <mpfr_set_underflow>
    5004:	ldr	x17, [x16, #824]
    5008:	add	x16, x16, #0x338
    500c:	br	x17

0000000000005010 <mpfr_sqr@plt>:
    5010:	adrp	x16, 26000 <mpfr_set_underflow>
    5014:	ldr	x17, [x16, #832]
    5018:	add	x16, x16, #0x340
    501c:	br	x17

0000000000005020 <mpc_set_si@plt>:
    5020:	adrp	x16, 26000 <mpfr_set_underflow>
    5024:	ldr	x17, [x16, #840]
    5028:	add	x16, x16, #0x348
    502c:	br	x17

0000000000005030 <mpfr_div_2si@plt>:
    5030:	adrp	x16, 26000 <mpfr_set_underflow>
    5034:	ldr	x17, [x16, #848]
    5038:	add	x16, x16, #0x350
    503c:	br	x17

0000000000005040 <mpc_set_ui_ui@plt>:
    5040:	adrp	x16, 26000 <mpfr_set_underflow>
    5044:	ldr	x17, [x16, #856]
    5048:	add	x16, x16, #0x358
    504c:	br	x17

0000000000005050 <mpfr_cos@plt>:
    5050:	adrp	x16, 26000 <mpfr_set_underflow>
    5054:	ldr	x17, [x16, #864]
    5058:	add	x16, x16, #0x360
    505c:	br	x17

0000000000005060 <mpfr_get_emin@plt>:
    5060:	adrp	x16, 26000 <mpfr_set_underflow>
    5064:	ldr	x17, [x16, #872]
    5068:	add	x16, x16, #0x368
    506c:	br	x17

0000000000005070 <mpc_acos@plt>:
    5070:	adrp	x16, 26000 <mpfr_set_underflow>
    5074:	ldr	x17, [x16, #880]
    5078:	add	x16, x16, #0x370
    507c:	br	x17

0000000000005080 <mpfr_sin@plt>:
    5080:	adrp	x16, 26000 <mpfr_set_underflow>
    5084:	ldr	x17, [x16, #888]
    5088:	add	x16, x16, #0x378
    508c:	br	x17

0000000000005090 <mpfr_swap@plt>:
    5090:	adrp	x16, 26000 <mpfr_set_underflow>
    5094:	ldr	x17, [x16, #896]
    5098:	add	x16, x16, #0x380
    509c:	br	x17

00000000000050a0 <mpc_set_z@plt>:
    50a0:	adrp	x16, 26000 <mpfr_set_underflow>
    50a4:	ldr	x17, [x16, #904]
    50a8:	add	x16, x16, #0x388
    50ac:	br	x17

00000000000050b0 <__gmpz_ui_pow_ui@plt>:
    50b0:	adrp	x16, 26000 <mpfr_set_underflow>
    50b4:	ldr	x17, [x16, #912]
    50b8:	add	x16, x16, #0x390
    50bc:	br	x17

00000000000050c0 <mpfr_get_str@plt>:
    50c0:	adrp	x16, 26000 <mpfr_set_underflow>
    50c4:	ldr	x17, [x16, #920]
    50c8:	add	x16, x16, #0x398
    50cc:	br	x17

00000000000050d0 <mpc_fix_zero@plt>:
    50d0:	adrp	x16, 26000 <mpfr_set_underflow>
    50d4:	ldr	x17, [x16, #928]
    50d8:	add	x16, x16, #0x3a0
    50dc:	br	x17

00000000000050e0 <mpfr_acosh@plt>:
    50e0:	adrp	x16, 26000 <mpfr_set_underflow>
    50e4:	ldr	x17, [x16, #936]
    50e8:	add	x16, x16, #0x3a8
    50ec:	br	x17

00000000000050f0 <mpfr_sub_ui@plt>:
    50f0:	adrp	x16, 26000 <mpfr_set_underflow>
    50f4:	ldr	x17, [x16, #944]
    50f8:	add	x16, x16, #0x3b0
    50fc:	br	x17

0000000000005100 <__gmpq_set_ui@plt>:
    5100:	adrp	x16, 26000 <mpfr_set_underflow>
    5104:	ldr	x17, [x16, #952]
    5108:	add	x16, x16, #0x3b8
    510c:	br	x17

0000000000005110 <mpfr_get_ld@plt>:
    5110:	adrp	x16, 26000 <mpfr_set_underflow>
    5114:	ldr	x17, [x16, #960]
    5118:	add	x16, x16, #0x3c0
    511c:	br	x17

0000000000005120 <mpfr_set_inf@plt>:
    5120:	adrp	x16, 26000 <mpfr_set_underflow>
    5124:	ldr	x17, [x16, #968]
    5128:	add	x16, x16, #0x3c8
    512c:	br	x17

0000000000005130 <mpfr_set_ui_2exp@plt>:
    5130:	adrp	x16, 26000 <mpfr_set_underflow>
    5134:	ldr	x17, [x16, #976]
    5138:	add	x16, x16, #0x3d0
    513c:	br	x17

0000000000005140 <mpc_sin_cos@plt>:
    5140:	adrp	x16, 26000 <mpfr_set_underflow>
    5144:	ldr	x17, [x16, #984]
    5148:	add	x16, x16, #0x3d8
    514c:	br	x17

0000000000005150 <mpfr_div@plt>:
    5150:	adrp	x16, 26000 <mpfr_set_underflow>
    5154:	ldr	x17, [x16, #992]
    5158:	add	x16, x16, #0x3e0
    515c:	br	x17

0000000000005160 <mpc_mul_fr@plt>:
    5160:	adrp	x16, 26000 <mpfr_set_underflow>
    5164:	ldr	x17, [x16, #1000]
    5168:	add	x16, x16, #0x3e8
    516c:	br	x17

0000000000005170 <__ctype_b_loc@plt>:
    5170:	adrp	x16, 26000 <mpfr_set_underflow>
    5174:	ldr	x17, [x16, #1008]
    5178:	add	x16, x16, #0x3f0
    517c:	br	x17

0000000000005180 <__gmpz_clear@plt>:
    5180:	adrp	x16, 26000 <mpfr_set_underflow>
    5184:	ldr	x17, [x16, #1016]
    5188:	add	x16, x16, #0x3f8
    518c:	br	x17

0000000000005190 <__gmpfr_out_str@plt>:
    5190:	adrp	x16, 26000 <mpfr_set_underflow>
    5194:	ldr	x17, [x16, #1024]
    5198:	add	x16, x16, #0x400
    519c:	br	x17

00000000000051a0 <mpc_abs@plt>:
    51a0:	adrp	x16, 26000 <mpfr_set_underflow>
    51a4:	ldr	x17, [x16, #1032]
    51a8:	add	x16, x16, #0x408
    51ac:	br	x17

00000000000051b0 <mpfr_atan@plt>:
    51b0:	adrp	x16, 26000 <mpfr_set_underflow>
    51b4:	ldr	x17, [x16, #1040]
    51b8:	add	x16, x16, #0x410
    51bc:	br	x17

00000000000051c0 <mpfr_nexttoward@plt>:
    51c0:	adrp	x16, 26000 <mpfr_set_underflow>
    51c4:	ldr	x17, [x16, #1048]
    51c8:	add	x16, x16, #0x418
    51cc:	br	x17

00000000000051d0 <mpfr_set4@plt>:
    51d0:	adrp	x16, 26000 <mpfr_set_underflow>
    51d4:	ldr	x17, [x16, #1056]
    51d8:	add	x16, x16, #0x420
    51dc:	br	x17

00000000000051e0 <mpfr_log1p@plt>:
    51e0:	adrp	x16, 26000 <mpfr_set_underflow>
    51e4:	ldr	x17, [x16, #1064]
    51e8:	add	x16, x16, #0x428
    51ec:	br	x17

00000000000051f0 <mpfr_sgn@plt>:
    51f0:	adrp	x16, 26000 <mpfr_set_underflow>
    51f4:	ldr	x17, [x16, #1072]
    51f8:	add	x16, x16, #0x430
    51fc:	br	x17

0000000000005200 <mpfr_get_emax@plt>:
    5200:	adrp	x16, 26000 <mpfr_set_underflow>
    5204:	ldr	x17, [x16, #1080]
    5208:	add	x16, x16, #0x438
    520c:	br	x17

0000000000005210 <ungetc@plt>:
    5210:	adrp	x16, 26000 <mpfr_set_underflow>
    5214:	ldr	x17, [x16, #1088]
    5218:	add	x16, x16, #0x440
    521c:	br	x17

0000000000005220 <__gmpz_tdiv_q_2exp@plt>:
    5220:	adrp	x16, 26000 <mpfr_set_underflow>
    5224:	ldr	x17, [x16, #1096]
    5228:	add	x16, x16, #0x448
    522c:	br	x17

0000000000005230 <mpfr_exp@plt>:
    5230:	adrp	x16, 26000 <mpfr_set_underflow>
    5234:	ldr	x17, [x16, #1104]
    5238:	add	x16, x16, #0x450
    523c:	br	x17

0000000000005240 <mpc_pow@plt>:
    5240:	adrp	x16, 26000 <mpfr_set_underflow>
    5244:	ldr	x17, [x16, #1112]
    5248:	add	x16, x16, #0x458
    524c:	br	x17

0000000000005250 <mpc_div@plt>:
    5250:	adrp	x16, 26000 <mpfr_set_underflow>
    5254:	ldr	x17, [x16, #1120]
    5258:	add	x16, x16, #0x460
    525c:	br	x17

0000000000005260 <mpfr_add_si@plt>:
    5260:	adrp	x16, 26000 <mpfr_set_underflow>
    5264:	ldr	x17, [x16, #1128]
    5268:	add	x16, x16, #0x468
    526c:	br	x17

0000000000005270 <mpfr_set_si@plt>:
    5270:	adrp	x16, 26000 <mpfr_set_underflow>
    5274:	ldr	x17, [x16, #1136]
    5278:	add	x16, x16, #0x470
    527c:	br	x17

0000000000005280 <mpfr_sqrt_ui@plt>:
    5280:	adrp	x16, 26000 <mpfr_set_underflow>
    5284:	ldr	x17, [x16, #1144]
    5288:	add	x16, x16, #0x478
    528c:	br	x17

0000000000005290 <mpfr_set_q@plt>:
    5290:	adrp	x16, 26000 <mpfr_set_underflow>
    5294:	ldr	x17, [x16, #1152]
    5298:	add	x16, x16, #0x480
    529c:	br	x17

00000000000052a0 <mpc_exp@plt>:
    52a0:	adrp	x16, 26000 <mpfr_set_underflow>
    52a4:	ldr	x17, [x16, #1160]
    52a8:	add	x16, x16, #0x488
    52ac:	br	x17

00000000000052b0 <__gmpq_init@plt>:
    52b0:	adrp	x16, 26000 <mpfr_set_underflow>
    52b4:	ldr	x17, [x16, #1168]
    52b8:	add	x16, x16, #0x490
    52bc:	br	x17

00000000000052c0 <mpc_set_si_si@plt>:
    52c0:	adrp	x16, 26000 <mpfr_set_underflow>
    52c4:	ldr	x17, [x16, #1176]
    52c8:	add	x16, x16, #0x498
    52cc:	br	x17

00000000000052d0 <__gmpz_submul@plt>:
    52d0:	adrp	x16, 26000 <mpfr_set_underflow>
    52d4:	ldr	x17, [x16, #1184]
    52d8:	add	x16, x16, #0x4a0
    52dc:	br	x17

00000000000052e0 <mpfr_free_str@plt>:
    52e0:	adrp	x16, 26000 <mpfr_set_underflow>
    52e4:	ldr	x17, [x16, #1192]
    52e8:	add	x16, x16, #0x4a8
    52ec:	br	x17

00000000000052f0 <mpfr_underflow_p@plt>:
    52f0:	adrp	x16, 26000 <mpfr_set_underflow>
    52f4:	ldr	x17, [x16, #1200]
    52f8:	add	x16, x16, #0x4b0
    52fc:	br	x17

0000000000005300 <__gmpz_cmp@plt>:
    5300:	adrp	x16, 26000 <mpfr_set_underflow>
    5304:	ldr	x17, [x16, #1208]
    5308:	add	x16, x16, #0x4b8
    530c:	br	x17

0000000000005310 <mpc_cmp_si_si@plt>:
    5310:	adrp	x16, 26000 <mpfr_set_underflow>
    5314:	ldr	x17, [x16, #1216]
    5318:	add	x16, x16, #0x4c0
    531c:	br	x17

0000000000005320 <mpfr_div_2ui@plt>:
    5320:	adrp	x16, 26000 <mpfr_set_underflow>
    5324:	ldr	x17, [x16, #1224]
    5328:	add	x16, x16, #0x4c8
    532c:	br	x17

0000000000005330 <mpc_realloc_str@plt>:
    5330:	adrp	x16, 26000 <mpfr_set_underflow>
    5334:	ldr	x17, [x16, #1232]
    5338:	add	x16, x16, #0x4d0
    533c:	br	x17

0000000000005340 <strcpy@plt>:
    5340:	adrp	x16, 26000 <mpfr_set_underflow>
    5344:	ldr	x17, [x16, #1240]
    5348:	add	x16, x16, #0x4d8
    534c:	br	x17

0000000000005350 <mpfr_sqrt@plt>:
    5350:	adrp	x16, 26000 <mpfr_set_underflow>
    5354:	ldr	x17, [x16, #1248]
    5358:	add	x16, x16, #0x4e0
    535c:	br	x17

0000000000005360 <mpfr_mul_si@plt>:
    5360:	adrp	x16, 26000 <mpfr_set_underflow>
    5364:	ldr	x17, [x16, #1256]
    5368:	add	x16, x16, #0x4e8
    536c:	br	x17

0000000000005370 <mpfr_prec_round@plt>:
    5370:	adrp	x16, 26000 <mpfr_set_underflow>
    5374:	ldr	x17, [x16, #1264]
    5378:	add	x16, x16, #0x4f0
    537c:	br	x17

0000000000005380 <mpc_set_str@plt>:
    5380:	adrp	x16, 26000 <mpfr_set_underflow>
    5384:	ldr	x17, [x16, #1272]
    5388:	add	x16, x16, #0x4f8
    538c:	br	x17

0000000000005390 <mpfr_min_prec@plt>:
    5390:	adrp	x16, 26000 <mpfr_set_underflow>
    5394:	ldr	x17, [x16, #1280]
    5398:	add	x16, x16, #0x500
    539c:	br	x17

00000000000053a0 <mpfr_cmp3@plt>:
    53a0:	adrp	x16, 26000 <mpfr_set_underflow>
    53a4:	ldr	x17, [x16, #1288]
    53a8:	add	x16, x16, #0x508
    53ac:	br	x17

00000000000053b0 <mpfr_cmpabs@plt>:
    53b0:	adrp	x16, 26000 <mpfr_set_underflow>
    53b4:	ldr	x17, [x16, #1296]
    53b8:	add	x16, x16, #0x510
    53bc:	br	x17

00000000000053c0 <mpc_init3@plt>:
    53c0:	adrp	x16, 26000 <mpfr_set_underflow>
    53c4:	ldr	x17, [x16, #1304]
    53c8:	add	x16, x16, #0x518
    53cc:	br	x17

00000000000053d0 <__gmpz_add@plt>:
    53d0:	adrp	x16, 26000 <mpfr_set_underflow>
    53d4:	ldr	x17, [x16, #1312]
    53d8:	add	x16, x16, #0x520
    53dc:	br	x17

00000000000053e0 <mpc_cos@plt>:
    53e0:	adrp	x16, 26000 <mpfr_set_underflow>
    53e4:	ldr	x17, [x16, #1320]
    53e8:	add	x16, x16, #0x528
    53ec:	br	x17

00000000000053f0 <set_pi_over_2@plt>:
    53f0:	adrp	x16, 26000 <mpfr_set_underflow>
    53f4:	ldr	x17, [x16, #1328]
    53f8:	add	x16, x16, #0x530
    53fc:	br	x17

0000000000005400 <__gmpfr_set_uj@plt>:
    5400:	adrp	x16, 26000 <mpfr_set_underflow>
    5404:	ldr	x17, [x16, #1336]
    5408:	add	x16, x16, #0x538
    540c:	br	x17

0000000000005410 <mpc_atan@plt>:
    5410:	adrp	x16, 26000 <mpfr_set_underflow>
    5414:	ldr	x17, [x16, #1344]
    5418:	add	x16, x16, #0x540
    541c:	br	x17

0000000000005420 <__gmpn_perfect_square_p@plt>:
    5420:	adrp	x16, 26000 <mpfr_set_underflow>
    5424:	ldr	x17, [x16, #1352]
    5428:	add	x16, x16, #0x548
    542c:	br	x17

0000000000005430 <mpfr_ui_sub@plt>:
    5430:	adrp	x16, 26000 <mpfr_set_underflow>
    5434:	ldr	x17, [x16, #1360]
    5438:	add	x16, x16, #0x550
    543c:	br	x17

0000000000005440 <mpfr_init2@plt>:
    5440:	adrp	x16, 26000 <mpfr_set_underflow>
    5444:	ldr	x17, [x16, #1368]
    5448:	add	x16, x16, #0x558
    544c:	br	x17

0000000000005450 <mpfr_can_round@plt>:
    5450:	adrp	x16, 26000 <mpfr_set_underflow>
    5454:	ldr	x17, [x16, #1376]
    5458:	add	x16, x16, #0x560
    545c:	br	x17

0000000000005460 <mpc_set_d@plt>:
    5460:	adrp	x16, 26000 <mpfr_set_underflow>
    5464:	ldr	x17, [x16, #1384]
    5468:	add	x16, x16, #0x568
    546c:	br	x17

0000000000005470 <mpfr_get_z_2exp@plt>:
    5470:	adrp	x16, 26000 <mpfr_set_underflow>
    5474:	ldr	x17, [x16, #1392]
    5478:	add	x16, x16, #0x570
    547c:	br	x17

0000000000005480 <mpc_asin@plt>:
    5480:	adrp	x16, 26000 <mpfr_set_underflow>
    5484:	ldr	x17, [x16, #1400]
    5488:	add	x16, x16, #0x578
    548c:	br	x17

0000000000005490 <mpfr_set_overflow@plt>:
    5490:	adrp	x16, 26000 <mpfr_set_underflow>
    5494:	ldr	x17, [x16, #1408]
    5498:	add	x16, x16, #0x580
    549c:	br	x17

00000000000054a0 <__gmpz_init@plt>:
    54a0:	adrp	x16, 26000 <mpfr_set_underflow>
    54a4:	ldr	x17, [x16, #1416]
    54a8:	add	x16, x16, #0x588
    54ac:	br	x17

00000000000054b0 <__gmpz_sizeinbase@plt>:
    54b0:	adrp	x16, 26000 <mpfr_set_underflow>
    54b4:	ldr	x17, [x16, #1424]
    54b8:	add	x16, x16, #0x590
    54bc:	br	x17

00000000000054c0 <__gmpz_set_si@plt>:
    54c0:	adrp	x16, 26000 <mpfr_set_underflow>
    54c4:	ldr	x17, [x16, #1432]
    54c8:	add	x16, x16, #0x598
    54cc:	br	x17

00000000000054d0 <mpfr_number_p@plt>:
    54d0:	adrp	x16, 26000 <mpfr_set_underflow>
    54d4:	ldr	x17, [x16, #1440]
    54d8:	add	x16, x16, #0x5a0
    54dc:	br	x17

00000000000054e0 <mpfr_overflow_p@plt>:
    54e0:	adrp	x16, 26000 <mpfr_set_underflow>
    54e4:	ldr	x17, [x16, #1448]
    54e8:	add	x16, x16, #0x5a8
    54ec:	br	x17

00000000000054f0 <mpc_set_fr_fr@plt>:
    54f0:	adrp	x16, 26000 <mpfr_set_underflow>
    54f4:	ldr	x17, [x16, #1456]
    54f8:	add	x16, x16, #0x5b0
    54fc:	br	x17

0000000000005500 <mpfr_urandomb@plt>:
    5500:	adrp	x16, 26000 <mpfr_set_underflow>
    5504:	ldr	x17, [x16, #1464]
    5508:	add	x16, x16, #0x5b8
    550c:	br	x17

0000000000005510 <mpfr_set_ui@plt>:
    5510:	adrp	x16, 26000 <mpfr_set_underflow>
    5514:	ldr	x17, [x16, #1472]
    5518:	add	x16, x16, #0x5c0
    551c:	br	x17

0000000000005520 <mpfr_sin_cos@plt>:
    5520:	adrp	x16, 26000 <mpfr_set_underflow>
    5524:	ldr	x17, [x16, #1480]
    5528:	add	x16, x16, #0x5c8
    552c:	br	x17

0000000000005530 <mpc_div_2ui@plt>:
    5530:	adrp	x16, 26000 <mpfr_set_underflow>
    5534:	ldr	x17, [x16, #1488]
    5538:	add	x16, x16, #0x5d0
    553c:	br	x17

0000000000005540 <mpfr_inits2@plt>:
    5540:	adrp	x16, 26000 <mpfr_set_underflow>
    5544:	ldr	x17, [x16, #1496]
    5548:	add	x16, x16, #0x5d8
    554c:	br	x17

0000000000005550 <mpfr_div_ui@plt>:
    5550:	adrp	x16, 26000 <mpfr_set_underflow>
    5554:	ldr	x17, [x16, #1504]
    5558:	add	x16, x16, #0x5e0
    555c:	br	x17

0000000000005560 <mpc_fma_naive@plt>:
    5560:	adrp	x16, 26000 <mpfr_set_underflow>
    5564:	ldr	x17, [x16, #1512]
    5568:	add	x16, x16, #0x5e8
    556c:	br	x17

0000000000005570 <__gmpq_mul_2exp@plt>:
    5570:	adrp	x16, 26000 <mpfr_set_underflow>
    5574:	ldr	x17, [x16, #1520]
    5578:	add	x16, x16, #0x5f0
    557c:	br	x17

0000000000005580 <mpc_set@plt>:
    5580:	adrp	x16, 26000 <mpfr_set_underflow>
    5584:	ldr	x17, [x16, #1528]
    5588:	add	x16, x16, #0x5f8
    558c:	br	x17

0000000000005590 <mpfr_hypot@plt>:
    5590:	adrp	x16, 26000 <mpfr_set_underflow>
    5594:	ldr	x17, [x16, #1536]
    5598:	add	x16, x16, #0x600
    559c:	br	x17

00000000000055a0 <fprintf@plt>:
    55a0:	adrp	x16, 26000 <mpfr_set_underflow>
    55a4:	ldr	x17, [x16, #1544]
    55a8:	add	x16, x16, #0x608
    55ac:	br	x17

00000000000055b0 <mpc_ui_div@plt>:
    55b0:	adrp	x16, 26000 <mpfr_set_underflow>
    55b4:	ldr	x17, [x16, #1552]
    55b8:	add	x16, x16, #0x610
    55bc:	br	x17

00000000000055c0 <mpfr_get_emin_min@plt>:
    55c0:	adrp	x16, 26000 <mpfr_set_underflow>
    55c4:	ldr	x17, [x16, #1560]
    55c8:	add	x16, x16, #0x618
    55cc:	br	x17

Disassembly of section .text:

00000000000055d0 <mpc_abs@@Base-0xd4>:
    55d0:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    55d4:	ldr	x0, [x0, #4048]
    55d8:	cbz	x0, 55e0 <mpfr_get_emin_min@plt+0x20>
    55dc:	b	4fc0 <__gmon_start__@plt>
    55e0:	ret
    55e4:	nop
    55e8:	adrp	x0, 26000 <mpc_ui_ui_sub@@Base+0x13e64>
    55ec:	add	x0, x0, #0x628
    55f0:	adrp	x1, 26000 <mpc_ui_ui_sub@@Base+0x13e64>
    55f4:	add	x1, x1, #0x628
    55f8:	cmp	x1, x0
    55fc:	b.eq	5614 <mpfr_get_emin_min@plt+0x54>  // b.none
    5600:	adrp	x1, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    5604:	ldr	x1, [x1, #3992]
    5608:	cbz	x1, 5614 <mpfr_get_emin_min@plt+0x54>
    560c:	mov	x16, x1
    5610:	br	x16
    5614:	ret
    5618:	adrp	x0, 26000 <mpc_ui_ui_sub@@Base+0x13e64>
    561c:	add	x0, x0, #0x628
    5620:	adrp	x1, 26000 <mpc_ui_ui_sub@@Base+0x13e64>
    5624:	add	x1, x1, #0x628
    5628:	sub	x1, x1, x0
    562c:	lsr	x2, x1, #63
    5630:	add	x1, x2, x1, asr #3
    5634:	cmp	xzr, x1, asr #1
    5638:	asr	x1, x1, #1
    563c:	b.eq	5654 <mpfr_get_emin_min@plt+0x94>  // b.none
    5640:	adrp	x2, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    5644:	ldr	x2, [x2, #4064]
    5648:	cbz	x2, 5654 <mpfr_get_emin_min@plt+0x94>
    564c:	mov	x16, x2
    5650:	br	x16
    5654:	ret
    5658:	stp	x29, x30, [sp, #-32]!
    565c:	mov	x29, sp
    5660:	str	x19, [sp, #16]
    5664:	adrp	x19, 26000 <mpc_ui_ui_sub@@Base+0x13e64>
    5668:	ldrb	w0, [x19, #1576]
    566c:	cbnz	w0, 5694 <mpfr_get_emin_min@plt+0xd4>
    5670:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    5674:	ldr	x0, [x0, #4000]
    5678:	cbz	x0, 5688 <mpfr_get_emin_min@plt+0xc8>
    567c:	adrp	x0, 26000 <mpc_ui_ui_sub@@Base+0x13e64>
    5680:	ldr	x0, [x0, #1568]
    5684:	bl	4b20 <__cxa_finalize@plt>
    5688:	bl	55e8 <mpfr_get_emin_min@plt+0x28>
    568c:	mov	w0, #0x1                   	// #1
    5690:	strb	w0, [x19, #1576]
    5694:	ldr	x19, [sp, #16]
    5698:	ldp	x29, x30, [sp], #32
    569c:	ret
    56a0:	b	5618 <mpfr_get_emin_min@plt+0x58>

00000000000056a4 <mpc_abs@@Base>:
    56a4:	mov	w3, w2
    56a8:	add	x2, x1, #0x20
    56ac:	b	5590 <mpfr_hypot@plt>

00000000000056b0 <mpc_acos@@Base>:
    56b0:	stp	x29, x30, [sp, #-208]!
    56b4:	mov	x29, sp
    56b8:	stp	x21, x22, [sp, #32]
    56bc:	mov	x21, x1
    56c0:	ldr	x1, [x1, #16]
    56c4:	stp	x19, x20, [sp, #16]
    56c8:	mov	x20, x0
    56cc:	stp	x23, x24, [sp, #48]
    56d0:	mov	w19, w2
    56d4:	mov	x24, #0x8000000000000003    	// #-9223372036854775805
    56d8:	stp	x25, x26, [sp, #64]
    56dc:	mov	x26, #0x2                   	// #2
    56e0:	movk	x26, #0x8000, lsl #48
    56e4:	stp	x27, x28, [sp, #80]
    56e8:	cmp	x1, x26
    56ec:	ldr	x25, [x21, #48]
    56f0:	b.eq	5734 <mpc_acos@@Base+0x84>  // b.none
    56f4:	cmp	x25, x26
    56f8:	b.ne	579c <mpc_acos@@Base+0xec>  // b.any
    56fc:	cmp	x1, x24
    5700:	b.ne	573c <mpc_acos@@Base+0x8c>  // b.any
    5704:	ldr	w0, [x21, #40]
    5708:	mov	w1, #0xffffffff            	// #-1
    570c:	cmp	w0, #0x0
    5710:	add	x0, x20, #0x20
    5714:	cneg	w1, w1, lt  // lt = tstop
    5718:	bl	5120 <mpfr_set_inf@plt>
    571c:	mov	x0, x20
    5720:	mov	w19, #0x0                   	// #0
    5724:	bl	4a40 <mpfr_set_nan@plt>
    5728:	cmp	w19, #0x0
    572c:	cset	w0, ne  // ne = any
    5730:	b	5770 <mpc_acos@@Base+0xc0>
    5734:	cmp	x25, x24
    5738:	b	5700 <mpc_acos@@Base+0x50>
    573c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    5740:	add	x21, x20, #0x20
    5744:	cmp	x1, x0
    5748:	b.ne	578c <mpc_acos@@Base+0xdc>  // b.any
    574c:	and	w2, w19, #0xf
    5750:	mov	w1, #0x1                   	// #1
    5754:	mov	x0, x20
    5758:	bl	53f0 <set_pi_over_2@plt>
    575c:	mov	w19, w0
    5760:	mov	x0, x21
    5764:	bl	4a40 <mpfr_set_nan@plt>
    5768:	tbz	w19, #31, 5728 <mpc_acos@@Base+0x78>
    576c:	mov	w0, #0x2                   	// #2
    5770:	ldp	x19, x20, [sp, #16]
    5774:	ldp	x21, x22, [sp, #32]
    5778:	ldp	x23, x24, [sp, #48]
    577c:	ldp	x25, x26, [sp, #64]
    5780:	ldp	x27, x28, [sp, #80]
    5784:	ldp	x29, x30, [sp], #208
    5788:	ret
    578c:	mov	x0, x20
    5790:	bl	4a40 <mpfr_set_nan@plt>
    5794:	mov	x0, x21
    5798:	b	5720 <mpc_acos@@Base+0x70>
    579c:	cmp	x1, x24
    57a0:	b.eq	57bc <mpc_acos@@Base+0x10c>  // b.none
    57a4:	cmp	x25, x24
    57a8:	b.ne	58dc <mpc_acos@@Base+0x22c>  // b.any
    57ac:	and	w2, w2, #0xf
    57b0:	mov	w1, #0x1                   	// #1
    57b4:	bl	53f0 <set_pi_over_2@plt>
    57b8:	b	58d4 <mpc_acos@@Base+0x224>
    57bc:	ldr	w2, [x21, #8]
    57c0:	cmp	x25, x1
    57c4:	b.ne	58ac <mpc_acos@@Base+0x1fc>  // b.any
    57c8:	and	w19, w19, #0xf
    57cc:	cmp	w2, #0x0
    57d0:	b.le	581c <mpc_acos@@Base+0x16c>
    57d4:	mov	w2, w19
    57d8:	mov	w1, #0x1                   	// #1
    57dc:	bl	53f0 <set_pi_over_2@plt>
    57e0:	mov	w19, w0
    57e4:	mov	x1, x20
    57e8:	mov	x0, x20
    57ec:	mov	w3, #0x0                   	// #0
    57f0:	mov	x2, #0x1                   	// #1
    57f4:	bl	5320 <mpfr_div_2ui@plt>
    57f8:	ldr	w0, [x21, #40]
    57fc:	mov	w1, #0xffffffff            	// #-1
    5800:	cmp	w0, #0x0
    5804:	add	x0, x20, #0x20
    5808:	cneg	w1, w1, lt  // lt = tstop
    580c:	bl	5120 <mpfr_set_inf@plt>
    5810:	cmp	w19, #0x0
    5814:	b.ge	572c <mpc_acos@@Base+0x7c>  // b.tcont
    5818:	b	576c <mpc_acos@@Base+0xbc>
    581c:	add	x22, sp, #0x90
    5820:	mov	x0, x22
    5824:	bl	4aa0 <mpfr_init@plt>
    5828:	ldr	x24, [x20]
    582c:	mov	x23, x24
    5830:	mov	x0, x23
    5834:	bl	4d20 <mpc_ceil_log2@plt>
    5838:	add	x23, x23, x0
    583c:	mov	x0, x22
    5840:	mov	x1, x23
    5844:	bl	4c80 <mpfr_set_prec@plt>
    5848:	mov	w1, #0x3                   	// #3
    584c:	mov	x0, x22
    5850:	bl	4a80 <mpfr_const_pi@plt>
    5854:	mov	x1, x22
    5858:	mov	w3, #0x3                   	// #3
    585c:	mov	x2, #0x3                   	// #3
    5860:	mov	x0, x22
    5864:	bl	49c0 <mpfr_mul_ui@plt>
    5868:	cmp	w19, #0x0
    586c:	mov	w3, w19
    5870:	cinc	x4, x24, eq  // eq = none
    5874:	sub	x1, x23, #0x1
    5878:	mov	x0, x22
    587c:	mov	w2, #0x3                   	// #3
    5880:	bl	5450 <mpfr_can_round@plt>
    5884:	cbz	w0, 5830 <mpc_acos@@Base+0x180>
    5888:	mov	w3, w19
    588c:	mov	x1, x22
    5890:	mov	x2, #0x2                   	// #2
    5894:	mov	x0, x20
    5898:	bl	5320 <mpfr_div_2ui@plt>
    589c:	mov	w19, w0
    58a0:	mov	x0, x22
    58a4:	bl	4d60 <mpfr_clear@plt>
    58a8:	b	57f8 <mpc_acos@@Base+0x148>
    58ac:	cmp	w2, #0x0
    58b0:	b.le	58cc <mpc_acos@@Base+0x21c>
    58b4:	mov	w0, #0x1                   	// #1
    58b8:	mov	w19, #0x0                   	// #0
    58bc:	str	w0, [x20, #8]
    58c0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    58c4:	str	x0, [x20, #16]
    58c8:	b	57f8 <mpc_acos@@Base+0x148>
    58cc:	and	w1, w19, #0xf
    58d0:	bl	4a80 <mpfr_const_pi@plt>
    58d4:	mov	w19, w0
    58d8:	b	57f8 <mpc_acos@@Base+0x148>
    58dc:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    58e0:	cmp	x25, x2
    58e4:	b.ne	5a68 <mpc_acos@@Base+0x3b8>  // b.any
    58e8:	ldr	w22, [x21, #40]
    58ec:	mov	x0, x21
    58f0:	mov	x2, #0x0                   	// #0
    58f4:	mov	x1, #0x1                   	// #1
    58f8:	add	x23, x20, #0x20
    58fc:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    5900:	cmp	w0, #0x0
    5904:	b.le	598c <mpc_acos@@Base+0x2dc>
    5908:	asr	w2, w19, #4
    590c:	tbz	w22, #31, 595c <mpc_acos@@Base+0x2ac>
    5910:	mov	x1, x21
    5914:	mov	x0, x23
    5918:	bl	50e0 <mpfr_acosh@plt>
    591c:	mov	w19, w0
    5920:	mov	w0, #0x1                   	// #1
    5924:	str	w0, [x20, #8]
    5928:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    592c:	str	x0, [x20, #16]
    5930:	mov	w21, #0x0                   	// #0
    5934:	tbz	w22, #31, 59f4 <mpc_acos@@Base+0x344>
    5938:	cmp	w21, #0x0
    593c:	cset	w1, ne  // ne = any
    5940:	cmp	w19, #0x0
    5944:	mov	w2, #0x4                   	// #4
    5948:	csel	w2, w19, w2, eq  // eq = none
    594c:	mov	w0, #0x8                   	// #8
    5950:	csel	w19, w2, w0, ge  // ge = tcont
    5954:	orr	w0, w1, w19
    5958:	b	5770 <mpc_acos@@Base+0xc0>
    595c:	cmp	w2, #0x2
    5960:	b.eq	5984 <mpc_acos@@Base+0x2d4>  // b.none
    5964:	cmp	w2, #0x3
    5968:	mov	w0, #0x2                   	// #2
    596c:	csel	w2, w2, w0, ne  // ne = any
    5970:	mov	x1, x21
    5974:	mov	x0, x23
    5978:	bl	50e0 <mpfr_acosh@plt>
    597c:	neg	w19, w0
    5980:	b	5920 <mpc_acos@@Base+0x270>
    5984:	mov	w2, #0x3                   	// #3
    5988:	b	5970 <mpc_acos@@Base+0x2c0>
    598c:	mov	x0, x21
    5990:	mov	x2, #0x0                   	// #0
    5994:	mov	x1, #0xffffffffffffffff    	// #-1
    5998:	and	w24, w19, #0xf
    599c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    59a0:	tbz	w0, #31, 5a40 <mpc_acos@@Base+0x390>
    59a4:	ldp	x0, x1, [x21]
    59a8:	stp	x0, x1, [sp, #144]
    59ac:	add	x25, sp, #0x90
    59b0:	ldp	x0, x1, [x21, #16]
    59b4:	mov	w2, #0x0                   	// #0
    59b8:	stp	x0, x1, [sp, #160]
    59bc:	mov	x1, x25
    59c0:	mov	x0, x25
    59c4:	bl	4b80 <mpfr_neg@plt>
    59c8:	asr	w2, w19, #4
    59cc:	tbz	w22, #31, 5a10 <mpc_acos@@Base+0x360>
    59d0:	mov	x1, x25
    59d4:	mov	x0, x23
    59d8:	bl	50e0 <mpfr_acosh@plt>
    59dc:	mov	w19, w0
    59e0:	mov	w1, w24
    59e4:	mov	x0, x20
    59e8:	bl	4a80 <mpfr_const_pi@plt>
    59ec:	mov	w21, w0
    59f0:	tbnz	w22, #31, 5a04 <mpc_acos@@Base+0x354>
    59f4:	mov	x1, x20
    59f8:	mov	x0, x20
    59fc:	mov	w2, #0x0                   	// #0
    5a00:	bl	4f60 <mpc_conj@plt>
    5a04:	tbz	w21, #31, 5938 <mpc_acos@@Base+0x288>
    5a08:	mov	w1, #0x2                   	// #2
    5a0c:	b	5940 <mpc_acos@@Base+0x290>
    5a10:	cmp	w2, #0x2
    5a14:	b.eq	5a38 <mpc_acos@@Base+0x388>  // b.none
    5a18:	cmp	w2, #0x3
    5a1c:	mov	w0, #0x2                   	// #2
    5a20:	csel	w2, w2, w0, ne  // ne = any
    5a24:	mov	x1, x25
    5a28:	mov	x0, x23
    5a2c:	bl	50e0 <mpfr_acosh@plt>
    5a30:	neg	w19, w0
    5a34:	b	59e0 <mpc_acos@@Base+0x330>
    5a38:	mov	w2, #0x3                   	// #3
    5a3c:	b	5a24 <mpc_acos@@Base+0x374>
    5a40:	mov	x1, x21
    5a44:	mov	w2, w24
    5a48:	mov	x0, x20
    5a4c:	bl	4fd0 <mpfr_acos@plt>
    5a50:	mov	w19, #0x0                   	// #0
    5a54:	mov	w21, w0
    5a58:	mov	w0, #0x1                   	// #1
    5a5c:	str	w0, [x23, #8]
    5a60:	str	x25, [x23, #16]
    5a64:	b	59f0 <mpc_acos@@Base+0x340>
    5a68:	asr	w23, w19, #4
    5a6c:	cmp	x1, x2
    5a70:	b.ne	5af0 <mpc_acos@@Base+0x440>  // b.any
    5a74:	mov	w1, #0x1                   	// #1
    5a78:	and	w2, w19, #0xf
    5a7c:	bl	53f0 <set_pi_over_2@plt>
    5a80:	mov	w22, w0
    5a84:	add	x1, x21, #0x20
    5a88:	add	x0, x20, #0x20
    5a8c:	cmp	w23, #0x2
    5a90:	b.eq	5ae8 <mpc_acos@@Base+0x438>  // b.none
    5a94:	cmp	w23, #0x3
    5a98:	mov	w2, #0x2                   	// #2
    5a9c:	csel	w23, w23, w2, ne  // ne = any
    5aa0:	mov	w2, w23
    5aa4:	bl	4dc0 <mpfr_asinh@plt>
    5aa8:	mov	x1, x20
    5aac:	mov	w21, w0
    5ab0:	mov	w2, #0x0                   	// #0
    5ab4:	mov	x0, x20
    5ab8:	bl	4f60 <mpc_conj@plt>
    5abc:	cmp	w22, #0x0
    5ac0:	mov	w0, #0x2                   	// #2
    5ac4:	cset	w19, ne  // ne = any
    5ac8:	mov	w1, #0x4                   	// #4
    5acc:	csel	w19, w19, w0, ge  // ge = tcont
    5ad0:	cmp	w21, #0x0
    5ad4:	csel	w1, w21, w1, eq  // eq = none
    5ad8:	mov	w0, #0x8                   	// #8
    5adc:	csel	w21, w1, w0, le
    5ae0:	orr	w0, w19, w21
    5ae4:	b	5770 <mpc_acos@@Base+0xc0>
    5ae8:	mov	w23, #0x3                   	// #3
    5aec:	b	5aa0 <mpc_acos@@Base+0x3f0>
    5af0:	ldr	x2, [x20, #32]
    5af4:	add	x22, sp, #0x90
    5af8:	ldr	x25, [x20]
    5afc:	mov	x0, x22
    5b00:	mov	x1, x25
    5b04:	bl	53c0 <mpc_init3@plt>
    5b08:	cmp	w23, #0x1
    5b0c:	b.ne	5be4 <mpc_acos@@Base+0x534>  // b.any
    5b10:	ldr	x0, [x21, #48]
    5b14:	cmp	x0, x24
    5b18:	b.ge	5b30 <mpc_acos@@Base+0x480>  // b.tcont
    5b1c:	cmp	x0, x26
    5b20:	b.ne	5b28 <mpc_acos@@Base+0x478>  // b.any
    5b24:	bl	4b00 <mpfr_set_erangeflag@plt>
    5b28:	mov	w23, #0x2                   	// #2
    5b2c:	b	5b40 <mpc_acos@@Base+0x490>
    5b30:	ldr	w0, [x21, #40]
    5b34:	cmp	w0, #0x0
    5b38:	cset	w23, gt
    5b3c:	add	w23, w23, #0x2
    5b40:	lsl	w0, w23, #4
    5b44:	add	x24, sp, #0x70
    5b48:	mov	x1, x25
    5b4c:	mov	x23, x25
    5b50:	mov	w26, #0x0                   	// #0
    5b54:	mov	x28, #0x8000000000000003    	// #-9223372036854775805
    5b58:	str	w0, [sp, #100]
    5b5c:	mov	x0, x24
    5b60:	bl	5440 <mpfr_init2@plt>
    5b64:	add	w26, w26, #0x1
    5b68:	cmp	w26, #0x2
    5b6c:	b.gt	5c04 <mpc_acos@@Base+0x554>
    5b70:	mov	x0, x23
    5b74:	bl	4d20 <mpc_ceil_log2@plt>
    5b78:	add	x0, x0, #0x3
    5b7c:	add	x23, x23, x0
    5b80:	mov	x0, x22
    5b84:	mov	x1, x23
    5b88:	bl	4c80 <mpfr_set_prec@plt>
    5b8c:	mov	x1, x23
    5b90:	mov	x0, x24
    5b94:	bl	4c80 <mpfr_set_prec@plt>
    5b98:	mov	w2, #0x0                   	// #0
    5b9c:	mov	w1, #0x1                   	// #1
    5ba0:	mov	x0, x24
    5ba4:	bl	53f0 <set_pi_over_2@plt>
    5ba8:	ldr	w2, [sp, #100]
    5bac:	mov	x1, x21
    5bb0:	mov	x0, x22
    5bb4:	bl	5480 <mpc_asin@plt>
    5bb8:	mov	w27, w0
    5bbc:	ldr	x1, [sp, #192]
    5bc0:	cmp	x1, x28
    5bc4:	b.ge	5c10 <mpc_acos@@Base+0x560>  // b.tcont
    5bc8:	mov	x0, #0x2                   	// #2
    5bcc:	movk	x0, #0x8000, lsl #48
    5bd0:	cmp	x1, x0
    5bd4:	b.ne	5bdc <mpc_acos@@Base+0x52c>  // b.any
    5bd8:	bl	4b00 <mpfr_set_erangeflag@plt>
    5bdc:	mov	w1, #0x0                   	// #0
    5be0:	b	5c14 <mpc_acos@@Base+0x564>
    5be4:	cmp	w23, #0x2
    5be8:	b.eq	5bfc <mpc_acos@@Base+0x54c>  // b.none
    5bec:	cmp	w23, #0x3
    5bf0:	mov	w0, #0x2                   	// #2
    5bf4:	csel	w23, w23, w0, ne  // ne = any
    5bf8:	b	5b40 <mpc_acos@@Base+0x490>
    5bfc:	mov	w23, #0x3                   	// #3
    5c00:	b	5b40 <mpc_acos@@Base+0x490>
    5c04:	mov	x0, #0x2                   	// #2
    5c08:	sdiv	x0, x23, x0
    5c0c:	b	5b7c <mpc_acos@@Base+0x4cc>
    5c10:	ldr	w1, [sp, #184]
    5c14:	ldr	x2, [x21, #48]
    5c18:	cmp	x2, x28
    5c1c:	b.ge	5c64 <mpc_acos@@Base+0x5b4>  // b.tcont
    5c20:	mov	x0, #0x2                   	// #2
    5c24:	movk	x0, #0x8000, lsl #48
    5c28:	cmp	x2, x0
    5c2c:	b.ne	5c34 <mpc_acos@@Base+0x584>  // b.any
    5c30:	bl	4b00 <mpfr_set_erangeflag@plt>
    5c34:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    5c38:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    5c3c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    5c40:	add	x4, x4, #0x5b0
    5c44:	ldr	x0, [x0, #4008]
    5c48:	add	x2, x2, #0x5ec
    5c4c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    5c50:	add	x1, x1, #0x5f3
    5c54:	mov	w3, #0xca                  	// #202
    5c58:	ldr	x0, [x0]
    5c5c:	bl	55a0 <fprintf@plt>
    5c60:	bl	5000 <abort@plt>
    5c64:	ldr	w2, [x21, #40]
    5c68:	mul	w1, w1, w2
    5c6c:	cmp	w1, #0x0
    5c70:	b.le	5c34 <mpc_acos@@Base+0x584>
    5c74:	asr	w0, w27, #2
    5c78:	cmp	w0, #0x2
    5c7c:	b.eq	5d64 <mpc_acos@@Base+0x6b4>  // b.none
    5c80:	cmp	w0, #0x0
    5c84:	cset	w27, ne  // ne = any
    5c88:	ldr	x4, [sp, #160]
    5c8c:	mov	w3, #0x0                   	// #0
    5c90:	mov	x2, x22
    5c94:	mov	x1, x24
    5c98:	mov	x0, x22
    5c9c:	str	x4, [sp, #104]
    5ca0:	bl	4a60 <mpfr_sub@plt>
    5ca4:	ldr	x3, [sp, #160]
    5ca8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    5cac:	cmp	x3, x0
    5cb0:	b.eq	5b64 <mpc_acos@@Base+0x4b4>  // b.none
    5cb4:	ldr	x4, [sp, #104]
    5cb8:	mov	x0, #0x2                   	// #2
    5cbc:	add	x1, x22, #0x20
    5cc0:	mov	w2, #0x0                   	// #0
    5cc4:	cmp	x4, #0x1
    5cc8:	csinc	x4, x0, x4, le
    5ccc:	mov	x0, x1
    5cd0:	sub	x3, x4, x3
    5cd4:	str	x3, [sp, #104]
    5cd8:	bl	4b80 <mpfr_neg@plt>
    5cdc:	ldr	x3, [sp, #104]
    5ce0:	tst	x19, #0xf
    5ce4:	cinc	x4, x25, eq  // eq = none
    5ce8:	mov	x0, x22
    5cec:	cmp	x3, #0x0
    5cf0:	mov	w2, #0x0                   	// #0
    5cf4:	csel	x1, x3, xzr, ge  // ge = tcont
    5cf8:	mov	w3, #0x1                   	// #1
    5cfc:	sub	x1, x23, x1
    5d00:	bl	5450 <mpfr_can_round@plt>
    5d04:	cbz	w0, 5b64 <mpc_acos@@Base+0x4b4>
    5d08:	mov	w2, w19
    5d0c:	mov	x1, x22
    5d10:	mov	x0, x20
    5d14:	bl	5580 <mpc_set@plt>
    5d18:	and	w0, w0, #0x3
    5d1c:	cmp	w0, #0x2
    5d20:	b.eq	5d6c <mpc_acos@@Base+0x6bc>  // b.none
    5d24:	cmp	w0, #0x0
    5d28:	cset	w19, ne  // ne = any
    5d2c:	mov	x0, x22
    5d30:	bl	4a10 <mpc_clear@plt>
    5d34:	mov	x0, x24
    5d38:	bl	4d60 <mpfr_clear@plt>
    5d3c:	cmn	w19, #0x1
    5d40:	b.ne	5d48 <mpc_acos@@Base+0x698>  // b.any
    5d44:	mov	w19, #0x2                   	// #2
    5d48:	cmp	w27, #0x1
    5d4c:	b.eq	5d74 <mpc_acos@@Base+0x6c4>  // b.none
    5d50:	cmp	w27, #0x0
    5d54:	mov	w0, #0x4                   	// #4
    5d58:	csel	w27, w27, w0, eq  // eq = none
    5d5c:	orr	w0, w19, w27
    5d60:	b	5770 <mpc_acos@@Base+0xc0>
    5d64:	mov	w27, #0xffffffff            	// #-1
    5d68:	b	5c88 <mpc_acos@@Base+0x5d8>
    5d6c:	mov	w19, #0xffffffff            	// #-1
    5d70:	b	5d2c <mpc_acos@@Base+0x67c>
    5d74:	mov	w27, #0x8                   	// #8
    5d78:	b	5d5c <mpc_acos@@Base+0x6ac>

0000000000005d7c <mpc_acosh@@Base>:
    5d7c:	stp	x29, x30, [sp, #-144]!
    5d80:	mov	x29, sp
    5d84:	stp	x21, x22, [sp, #32]
    5d88:	mov	w22, w2
    5d8c:	ldr	x2, [x1, #16]
    5d90:	stp	x19, x20, [sp, #16]
    5d94:	mov	x19, x1
    5d98:	mov	x20, x0
    5d9c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    5da0:	cmp	x2, x1
    5da4:	b.ne	5ddc <mpc_acosh@@Base+0x60>  // b.any
    5da8:	ldr	x2, [x19, #48]
    5dac:	add	x1, x1, #0x1
    5db0:	cmp	x2, x1
    5db4:	b.ne	5ddc <mpc_acosh@@Base+0x60>  // b.any
    5db8:	mov	w19, #0x0                   	// #0
    5dbc:	bl	4a40 <mpfr_set_nan@plt>
    5dc0:	add	x0, x20, #0x20
    5dc4:	bl	4a40 <mpfr_set_nan@plt>
    5dc8:	mov	w0, w19
    5dcc:	ldp	x19, x20, [sp, #16]
    5dd0:	ldp	x21, x22, [sp, #32]
    5dd4:	ldp	x29, x30, [sp], #144
    5dd8:	ret
    5ddc:	ldr	x2, [x20]
    5de0:	add	x21, sp, #0x50
    5de4:	ldr	x1, [x20, #32]
    5de8:	mov	x0, x21
    5dec:	bl	53c0 <mpc_init3@plt>
    5df0:	ldr	w1, [x19, #40]
    5df4:	asr	w0, w22, #4
    5df8:	tbz	w1, #31, 5ea4 <mpc_acosh@@Base+0x128>
    5dfc:	cmp	w0, #0x2
    5e00:	b.eq	5e9c <mpc_acosh@@Base+0x120>  // b.none
    5e04:	cmp	w0, #0x3
    5e08:	mov	w1, #0x2                   	// #2
    5e0c:	csel	w0, w0, w1, ne  // ne = any
    5e10:	ubfiz	w2, w22, #4, #4
    5e14:	mov	x1, x19
    5e18:	add	w2, w2, w0
    5e1c:	mov	x0, x21
    5e20:	bl	5070 <mpc_acos@plt>
    5e24:	mov	w19, w0
    5e28:	ldp	x2, x3, [sp, #112]
    5e2c:	ldp	x4, x5, [sp, #80]
    5e30:	stp	x2, x3, [sp, #80]
    5e34:	ldp	x2, x3, [sp, #128]
    5e38:	stp	x4, x5, [sp, #112]
    5e3c:	ldp	x0, x1, [sp, #96]
    5e40:	stp	x0, x1, [sp, #128]
    5e44:	add	x1, x21, #0x20
    5e48:	stp	x2, x3, [sp, #96]
    5e4c:	mov	x0, x1
    5e50:	mov	w2, #0x0                   	// #0
    5e54:	bl	4b80 <mpfr_neg@plt>
    5e58:	asr	w1, w19, #2
    5e5c:	cmp	w1, #0x2
    5e60:	b.eq	5e6c <mpc_acosh@@Base+0xf0>  // b.none
    5e64:	cmp	w1, #0x0
    5e68:	cset	w1, ne  // ne = any
    5e6c:	tbnz	w19, #0, 5f44 <mpc_acosh@@Base+0x1c8>
    5e70:	ands	w19, w19, #0x3
    5e74:	mov	w0, #0x4                   	// #4
    5e78:	csel	w19, w19, w0, eq  // eq = none
    5e7c:	orr	w19, w1, w19
    5e80:	mov	w2, w22
    5e84:	mov	x1, x21
    5e88:	mov	x0, x20
    5e8c:	bl	5580 <mpc_set@plt>
    5e90:	mov	x0, x21
    5e94:	bl	4a10 <mpc_clear@plt>
    5e98:	b	5dc8 <mpc_acosh@@Base+0x4c>
    5e9c:	mov	w0, #0x3                   	// #3
    5ea0:	b	5e10 <mpc_acosh@@Base+0x94>
    5ea4:	and	w1, w22, #0xf
    5ea8:	cmp	w1, #0x2
    5eac:	b.eq	5f34 <mpc_acosh@@Base+0x1b8>  // b.none
    5eb0:	cmp	w1, #0x3
    5eb4:	ubfiz	w2, w22, #4, #4
    5eb8:	mov	w1, #0x20                  	// #32
    5ebc:	csel	w2, w2, w1, ne  // ne = any
    5ec0:	add	w2, w0, w2
    5ec4:	mov	x1, x19
    5ec8:	mov	x0, x21
    5ecc:	bl	5070 <mpc_acos@plt>
    5ed0:	ldp	x2, x3, [sp, #112]
    5ed4:	mov	w19, w0
    5ed8:	ldp	x4, x5, [sp, #80]
    5edc:	stp	x2, x3, [sp, #80]
    5ee0:	ldp	x2, x3, [sp, #128]
    5ee4:	stp	x4, x5, [sp, #112]
    5ee8:	ldp	x0, x1, [sp, #96]
    5eec:	stp	x2, x3, [sp, #96]
    5ef0:	mov	w2, #0x0                   	// #0
    5ef4:	stp	x0, x1, [sp, #128]
    5ef8:	mov	x1, x21
    5efc:	mov	x0, x21
    5f00:	bl	4b80 <mpfr_neg@plt>
    5f04:	asr	w0, w19, #2
    5f08:	tst	w0, #0xfffffffd
    5f0c:	b.ne	5f3c <mpc_acosh@@Base+0x1c0>  // b.any
    5f10:	cmp	w0, #0x0
    5f14:	cset	w1, ne  // ne = any
    5f18:	and	w19, w19, #0x3
    5f1c:	cmp	w19, #0x2
    5f20:	b.eq	5f44 <mpc_acosh@@Base+0x1c8>  // b.none
    5f24:	cmp	w19, #0x0
    5f28:	mov	w0, #0x4                   	// #4
    5f2c:	csel	w19, w19, w0, eq  // eq = none
    5f30:	b	5e7c <mpc_acosh@@Base+0x100>
    5f34:	mov	w2, #0x30                  	// #48
    5f38:	b	5ec0 <mpc_acosh@@Base+0x144>
    5f3c:	mov	w1, #0x2                   	// #2
    5f40:	b	5f18 <mpc_acosh@@Base+0x19c>
    5f44:	mov	w19, #0x8                   	// #8
    5f48:	b	5e7c <mpc_acosh@@Base+0x100>

0000000000005f4c <mpc_add@@Base>:
    5f4c:	stp	x29, x30, [sp, #-64]!
    5f50:	mov	x29, sp
    5f54:	stp	x19, x20, [sp, #16]
    5f58:	mov	w20, w3
    5f5c:	and	w3, w3, #0xf
    5f60:	stp	x21, x22, [sp, #32]
    5f64:	mov	x21, x0
    5f68:	mov	x22, x1
    5f6c:	str	x23, [sp, #48]
    5f70:	mov	x23, x2
    5f74:	bl	4e60 <mpfr_add@plt>
    5f78:	mov	w19, w0
    5f7c:	asr	w3, w20, #4
    5f80:	add	x2, x23, #0x20
    5f84:	add	x1, x22, #0x20
    5f88:	add	x0, x21, #0x20
    5f8c:	bl	4e60 <mpfr_add@plt>
    5f90:	cmp	w19, #0x0
    5f94:	mov	w2, #0x2                   	// #2
    5f98:	cset	w1, ne  // ne = any
    5f9c:	csel	w1, w1, w2, ge  // ge = tcont
    5fa0:	cmp	w0, #0x0
    5fa4:	mov	w2, #0x4                   	// #4
    5fa8:	csel	w2, w0, w2, eq  // eq = none
    5fac:	mov	w0, #0x8                   	// #8
    5fb0:	csel	w0, w2, w0, ge  // ge = tcont
    5fb4:	orr	w0, w1, w0
    5fb8:	ldp	x19, x20, [sp, #16]
    5fbc:	ldp	x21, x22, [sp, #32]
    5fc0:	ldr	x23, [sp, #48]
    5fc4:	ldp	x29, x30, [sp], #64
    5fc8:	ret

0000000000005fcc <mpc_add_fr@@Base>:
    5fcc:	stp	x29, x30, [sp, #-48]!
    5fd0:	mov	x29, sp
    5fd4:	stp	x19, x20, [sp, #16]
    5fd8:	mov	x20, x1
    5fdc:	stp	x21, x22, [sp, #32]
    5fe0:	mov	x22, x0
    5fe4:	mov	w21, w3
    5fe8:	and	w3, w3, #0xf
    5fec:	bl	4e60 <mpfr_add@plt>
    5ff0:	ldr	w3, [x20, #40]
    5ff4:	mov	w19, w0
    5ff8:	asr	w2, w21, #4
    5ffc:	add	x1, x20, #0x20
    6000:	add	x0, x22, #0x20
    6004:	bl	51d0 <mpfr_set4@plt>
    6008:	cmp	w19, #0x0
    600c:	mov	w2, #0x2                   	// #2
    6010:	cset	w1, ne  // ne = any
    6014:	csel	w1, w1, w2, ge  // ge = tcont
    6018:	cmp	w0, #0x0
    601c:	mov	w2, #0x4                   	// #4
    6020:	csel	w2, w0, w2, eq  // eq = none
    6024:	mov	w0, #0x8                   	// #8
    6028:	csel	w0, w2, w0, ge  // ge = tcont
    602c:	orr	w0, w1, w0
    6030:	ldp	x19, x20, [sp, #16]
    6034:	ldp	x21, x22, [sp, #32]
    6038:	ldp	x29, x30, [sp], #48
    603c:	ret

0000000000006040 <mpc_add_si@@Base>:
    6040:	stp	x29, x30, [sp, #-48]!
    6044:	mov	x29, sp
    6048:	stp	x19, x20, [sp, #16]
    604c:	mov	x20, x1
    6050:	stp	x21, x22, [sp, #32]
    6054:	mov	x22, x0
    6058:	mov	w21, w3
    605c:	and	w3, w3, #0xf
    6060:	bl	5260 <mpfr_add_si@plt>
    6064:	ldr	w3, [x20, #40]
    6068:	mov	w19, w0
    606c:	asr	w2, w21, #4
    6070:	add	x1, x20, #0x20
    6074:	add	x0, x22, #0x20
    6078:	bl	51d0 <mpfr_set4@plt>
    607c:	cmp	w19, #0x0
    6080:	mov	w2, #0x2                   	// #2
    6084:	cset	w1, ne  // ne = any
    6088:	csel	w1, w1, w2, ge  // ge = tcont
    608c:	cmp	w0, #0x0
    6090:	mov	w2, #0x4                   	// #4
    6094:	csel	w2, w0, w2, eq  // eq = none
    6098:	mov	w0, #0x8                   	// #8
    609c:	csel	w0, w2, w0, ge  // ge = tcont
    60a0:	orr	w0, w1, w0
    60a4:	ldp	x19, x20, [sp, #16]
    60a8:	ldp	x21, x22, [sp, #32]
    60ac:	ldp	x29, x30, [sp], #48
    60b0:	ret

00000000000060b4 <mpc_add_ui@@Base>:
    60b4:	stp	x29, x30, [sp, #-48]!
    60b8:	mov	x29, sp
    60bc:	stp	x19, x20, [sp, #16]
    60c0:	mov	x20, x1
    60c4:	stp	x21, x22, [sp, #32]
    60c8:	mov	x22, x0
    60cc:	mov	w21, w3
    60d0:	and	w3, w3, #0xf
    60d4:	bl	4ee0 <mpfr_add_ui@plt>
    60d8:	ldr	w3, [x20, #40]
    60dc:	mov	w19, w0
    60e0:	asr	w2, w21, #4
    60e4:	add	x1, x20, #0x20
    60e8:	add	x0, x22, #0x20
    60ec:	bl	51d0 <mpfr_set4@plt>
    60f0:	cmp	w19, #0x0
    60f4:	mov	w2, #0x2                   	// #2
    60f8:	cset	w1, ne  // ne = any
    60fc:	csel	w1, w1, w2, ge  // ge = tcont
    6100:	cmp	w0, #0x0
    6104:	mov	w2, #0x4                   	// #4
    6108:	csel	w2, w0, w2, eq  // eq = none
    610c:	mov	w0, #0x8                   	// #8
    6110:	csel	w0, w2, w0, ge  // ge = tcont
    6114:	orr	w0, w1, w0
    6118:	ldp	x19, x20, [sp, #16]
    611c:	ldp	x21, x22, [sp, #32]
    6120:	ldp	x29, x30, [sp], #48
    6124:	ret

0000000000006128 <mpc_arg@@Base>:
    6128:	mov	w3, w2
    612c:	mov	x2, x1
    6130:	add	x1, x1, #0x20
    6134:	b	4ca0 <mpfr_atan2@plt>

0000000000006138 <mpc_asin@@Base>:
    6138:	stp	x29, x30, [sp, #-256]!
    613c:	mov	x29, sp
    6140:	stp	x21, x22, [sp, #32]
    6144:	mov	w21, w2
    6148:	mov	x2, #0x2                   	// #2
    614c:	ldr	x22, [x1, #16]
    6150:	stp	x19, x20, [sp, #16]
    6154:	movk	x2, #0x8000, lsl #48
    6158:	stp	x23, x24, [sp, #48]
    615c:	mov	x19, x1
    6160:	mov	x20, x0
    6164:	stp	x25, x26, [sp, #64]
    6168:	cmp	x22, x2
    616c:	stp	x27, x28, [sp, #80]
    6170:	ldr	x24, [x1, #48]
    6174:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    6178:	b.eq	61d0 <mpc_asin@@Base+0x98>  // b.none
    617c:	cmp	x24, x2
    6180:	b.ne	6214 <mpc_asin@@Base+0xdc>  // b.any
    6184:	cmp	x22, x1
    6188:	b.ne	61d8 <mpc_asin@@Base+0xa0>  // b.any
    618c:	mov	x0, x20
    6190:	bl	4a40 <mpfr_set_nan@plt>
    6194:	ldr	w0, [x19, #40]
    6198:	mov	w1, #0x1                   	// #1
    619c:	cmp	w0, #0x0
    61a0:	add	x0, x20, #0x20
    61a4:	cneg	w1, w1, lt  // lt = tstop
    61a8:	bl	5120 <mpfr_set_inf@plt>
    61ac:	mov	w19, #0x0                   	// #0
    61b0:	mov	w0, w19
    61b4:	ldp	x19, x20, [sp, #16]
    61b8:	ldp	x21, x22, [sp, #32]
    61bc:	ldp	x23, x24, [sp, #48]
    61c0:	ldp	x25, x26, [sp, #64]
    61c4:	ldp	x27, x28, [sp, #80]
    61c8:	ldp	x29, x30, [sp], #256
    61cc:	ret
    61d0:	cmp	x24, x1
    61d4:	b	6188 <mpc_asin@@Base+0x50>
    61d8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    61dc:	add	x21, x20, #0x20
    61e0:	cmp	x22, x0
    61e4:	b.ne	6208 <mpc_asin@@Base+0xd0>  // b.any
    61e8:	ldr	w3, [x19, #8]
    61ec:	mov	x1, x19
    61f0:	mov	x0, x20
    61f4:	mov	w2, #0x0                   	// #0
    61f8:	bl	51d0 <mpfr_set4@plt>
    61fc:	mov	x0, x21
    6200:	bl	4a40 <mpfr_set_nan@plt>
    6204:	b	61ac <mpc_asin@@Base+0x74>
    6208:	mov	x0, x20
    620c:	bl	4a40 <mpfr_set_nan@plt>
    6210:	b	61fc <mpc_asin@@Base+0xc4>
    6214:	cmp	x22, x1
    6218:	b.eq	625c <mpc_asin@@Base+0x124>  // b.none
    621c:	cmp	x24, x1
    6220:	b.ne	62b4 <mpc_asin@@Base+0x17c>  // b.any
    6224:	ldr	w1, [x19, #8]
    6228:	mov	w21, #0x1                   	// #1
    622c:	cmp	w1, #0x0
    6230:	cneg	w1, w21, lt  // lt = tstop
    6234:	bl	4d10 <mpfr_set_zero@plt>
    6238:	ldr	w0, [x19, #40]
    623c:	cmp	w0, #0x0
    6240:	add	x0, x20, #0x20
    6244:	cneg	w1, w21, lt  // lt = tstop
    6248:	mov	w21, #0x0                   	// #0
    624c:	bl	5120 <mpfr_set_inf@plt>
    6250:	cmp	w21, #0x0
    6254:	cset	w19, ne  // ne = any
    6258:	b	61b0 <mpc_asin@@Base+0x78>
    625c:	ldr	w1, [x19, #8]
    6260:	and	w2, w21, #0xf
    6264:	mov	w23, #0x1                   	// #1
    6268:	cmp	w1, #0x0
    626c:	cneg	w1, w23, lt  // lt = tstop
    6270:	bl	53f0 <set_pi_over_2@plt>
    6274:	mov	w21, w0
    6278:	ldr	w0, [x19, #40]
    627c:	cmp	w0, #0x0
    6280:	add	x0, x20, #0x20
    6284:	cneg	w1, w23, lt  // lt = tstop
    6288:	bl	5120 <mpfr_set_inf@plt>
    628c:	cmp	x24, x22
    6290:	b.ne	62a8 <mpc_asin@@Base+0x170>  // b.any
    6294:	mov	x1, x20
    6298:	mov	x0, x20
    629c:	mov	w3, #0x0                   	// #0
    62a0:	mov	x2, #0x1                   	// #1
    62a4:	bl	5320 <mpfr_div_2ui@plt>
    62a8:	tbz	w21, #31, 6250 <mpc_asin@@Base+0x118>
    62ac:	mov	w19, #0x2                   	// #2
    62b0:	b	61b0 <mpc_asin@@Base+0x78>
    62b4:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    62b8:	cmp	x24, x1
    62bc:	b.ne	6448 <mpc_asin@@Base+0x310>  // b.any
    62c0:	ldr	w23, [x19, #40]
    62c4:	mov	x0, x19
    62c8:	mov	x2, #0x0                   	// #0
    62cc:	mov	x1, #0x1                   	// #1
    62d0:	add	x22, x20, #0x20
    62d4:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    62d8:	and	w25, w21, #0xf
    62dc:	cmp	w0, #0x0
    62e0:	b.le	636c <mpc_asin@@Base+0x234>
    62e4:	asr	w2, w21, #4
    62e8:	tbz	w23, #31, 6358 <mpc_asin@@Base+0x220>
    62ec:	cmp	w2, #0x2
    62f0:	b.eq	6350 <mpc_asin@@Base+0x218>  // b.none
    62f4:	cmp	w2, #0x3
    62f8:	mov	w0, #0x2                   	// #2
    62fc:	csel	w2, w2, w0, ne  // ne = any
    6300:	mov	x1, x19
    6304:	mov	x0, x22
    6308:	bl	50e0 <mpfr_acosh@plt>
    630c:	neg	w21, w0
    6310:	ldr	w0, [x19, #8]
    6314:	mov	w2, w25
    6318:	mov	w1, #0x1                   	// #1
    631c:	cmp	w0, #0x0
    6320:	mov	x0, x20
    6324:	cneg	w1, w1, lt  // lt = tstop
    6328:	bl	53f0 <set_pi_over_2@plt>
    632c:	mov	w19, w0
    6330:	tbz	w23, #31, 6344 <mpc_asin@@Base+0x20c>
    6334:	mov	x1, x20
    6338:	mov	x0, x20
    633c:	mov	w2, #0x0                   	// #0
    6340:	bl	4f60 <mpc_conj@plt>
    6344:	tbz	w19, #31, 6424 <mpc_asin@@Base+0x2ec>
    6348:	mov	w0, #0x2                   	// #2
    634c:	b	642c <mpc_asin@@Base+0x2f4>
    6350:	mov	w2, #0x3                   	// #3
    6354:	b	6300 <mpc_asin@@Base+0x1c8>
    6358:	mov	x1, x19
    635c:	mov	x0, x22
    6360:	bl	50e0 <mpfr_acosh@plt>
    6364:	mov	w21, w0
    6368:	b	6310 <mpc_asin@@Base+0x1d8>
    636c:	mov	x0, x19
    6370:	mov	x2, #0x0                   	// #0
    6374:	mov	x1, #0xffffffffffffffff    	// #-1
    6378:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    637c:	tbz	w0, #31, 63d8 <mpc_asin@@Base+0x2a0>
    6380:	ldp	x0, x1, [x19]
    6384:	stp	x0, x1, [sp, #192]
    6388:	add	x24, sp, #0xc0
    638c:	ldp	x0, x1, [x19, #16]
    6390:	mov	w2, #0x0                   	// #0
    6394:	stp	x0, x1, [sp, #208]
    6398:	mov	x1, x24
    639c:	mov	x0, x24
    63a0:	bl	4b80 <mpfr_neg@plt>
    63a4:	asr	w2, w21, #4
    63a8:	tbz	w23, #31, 63d0 <mpc_asin@@Base+0x298>
    63ac:	cmp	w2, #0x2
    63b0:	b.eq	63c8 <mpc_asin@@Base+0x290>  // b.none
    63b4:	cmp	w2, #0x3
    63b8:	mov	w0, #0x2                   	// #2
    63bc:	csel	w2, w2, w0, ne  // ne = any
    63c0:	mov	x1, x24
    63c4:	b	6304 <mpc_asin@@Base+0x1cc>
    63c8:	mov	w2, #0x3                   	// #3
    63cc:	b	63c0 <mpc_asin@@Base+0x288>
    63d0:	mov	x1, x24
    63d4:	b	635c <mpc_asin@@Base+0x224>
    63d8:	mov	w0, #0x1                   	// #1
    63dc:	str	w0, [x22, #8]
    63e0:	str	x24, [x22, #16]
    63e4:	tbz	w23, #31, 63f8 <mpc_asin@@Base+0x2c0>
    63e8:	mov	x1, x22
    63ec:	mov	x0, x22
    63f0:	mov	w2, #0x0                   	// #0
    63f4:	bl	4b80 <mpfr_neg@plt>
    63f8:	mov	x1, x19
    63fc:	mov	w2, w25
    6400:	mov	x0, x20
    6404:	bl	4e40 <mpfr_asin@plt>
    6408:	mov	w19, w0
    640c:	tbz	w0, #31, 6420 <mpc_asin@@Base+0x2e8>
    6410:	mov	w0, #0x2                   	// #2
    6414:	mov	w19, #0x0                   	// #0
    6418:	orr	w19, w19, w0
    641c:	b	61b0 <mpc_asin@@Base+0x78>
    6420:	mov	w21, #0x0                   	// #0
    6424:	cmp	w19, #0x0
    6428:	cset	w0, ne  // ne = any
    642c:	cmp	w21, #0x0
    6430:	b.lt	6440 <mpc_asin@@Base+0x308>  // b.tstop
    6434:	b.eq	6414 <mpc_asin@@Base+0x2dc>  // b.none
    6438:	mov	w19, #0x4                   	// #4
    643c:	b	6418 <mpc_asin@@Base+0x2e0>
    6440:	mov	w19, #0x8                   	// #8
    6444:	b	6418 <mpc_asin@@Base+0x2e0>
    6448:	asr	w2, w21, #4
    644c:	str	w2, [sp, #120]
    6450:	cmp	x22, x1
    6454:	add	x28, x19, #0x20
    6458:	b.ne	64a8 <mpc_asin@@Base+0x370>  // b.any
    645c:	ldr	w1, [x19, #8]
    6460:	mov	w2, #0x1                   	// #1
    6464:	str	w2, [x0, #8]
    6468:	str	x22, [x0, #16]
    646c:	tbz	w1, #31, 647c <mpc_asin@@Base+0x344>
    6470:	mov	x1, x0
    6474:	mov	w2, #0x0                   	// #0
    6478:	bl	4b80 <mpfr_neg@plt>
    647c:	ldr	w2, [sp, #120]
    6480:	mov	x1, x28
    6484:	add	x0, x20, #0x20
    6488:	bl	4dc0 <mpfr_asinh@plt>
    648c:	mov	w19, w0
    6490:	cmp	w0, #0x0
    6494:	mov	w0, #0x4                   	// #4
    6498:	csel	w0, w19, w0, eq  // eq = none
    649c:	mov	w19, #0x8                   	// #8
    64a0:	csel	w19, w0, w19, ge  // ge = tcont
    64a4:	b	61b0 <mpc_asin@@Base+0x78>
    64a8:	ldr	x0, [x0]
    64ac:	str	x0, [sp, #96]
    64b0:	ldr	x0, [x20, #32]
    64b4:	str	x0, [sp, #104]
    64b8:	and	w0, w21, #0xf
    64bc:	str	w0, [sp, #124]
    64c0:	ldr	x0, [sp, #96]
    64c4:	add	x22, sp, #0xc0
    64c8:	ldr	x1, [sp, #104]
    64cc:	add	x24, x22, #0x20
    64d0:	add	x27, sp, #0xa0
    64d4:	mov	w26, #0x0                   	// #0
    64d8:	cmp	x0, x1
    64dc:	csel	x23, x0, x1, ge  // ge = tcont
    64e0:	mov	x0, x22
    64e4:	mov	x1, x23
    64e8:	bl	4cf0 <mpc_init2@plt>
    64ec:	add	w26, w26, #0x1
    64f0:	cmp	w26, #0x2
    64f4:	b.gt	6624 <mpc_asin@@Base+0x4ec>
    64f8:	mov	x0, x23
    64fc:	bl	4d20 <mpc_ceil_log2@plt>
    6500:	add	x0, x0, #0x3
    6504:	add	x23, x23, x0
    6508:	mov	x0, x22
    650c:	mov	x1, x23
    6510:	bl	4c80 <mpfr_set_prec@plt>
    6514:	mov	x0, x24
    6518:	mov	x1, x23
    651c:	bl	4c80 <mpfr_set_prec@plt>
    6520:	ldr	w0, [sp, #124]
    6524:	cmp	w0, #0x0
    6528:	cset	x0, eq  // eq = none
    652c:	str	x0, [sp, #112]
    6530:	cmp	w26, #0x1
    6534:	b.ne	6668 <mpc_asin@@Base+0x530>  // b.any
    6538:	ldr	x0, [x19, #48]
    653c:	tbz	x0, #63, 6668 <mpc_asin@@Base+0x530>
    6540:	mov	x1, #0x2                   	// #2
    6544:	sdiv	x0, x0, x1
    6548:	ldr	x1, [sp, #192]
    654c:	neg	x0, x0
    6550:	cmp	x0, x1
    6554:	b.lt	6668 <mpc_asin@@Base+0x530>  // b.tstop
    6558:	mov	w1, #0x0                   	// #0
    655c:	mov	x0, x22
    6560:	bl	4a80 <mpfr_const_pi@plt>
    6564:	mov	x1, x22
    6568:	mov	w3, #0x0                   	// #0
    656c:	mov	x2, #0x1                   	// #1
    6570:	mov	x0, x22
    6574:	bl	5320 <mpfr_div_2ui@plt>
    6578:	ldr	x1, [sp, #192]
    657c:	mov	w3, w26
    6580:	ldr	x4, [x20]
    6584:	mov	w2, #0x0                   	// #0
    6588:	ldr	x0, [sp, #112]
    658c:	add	x4, x0, x4
    6590:	mov	x0, x22
    6594:	bl	5450 <mpfr_can_round@plt>
    6598:	cbz	w0, 6668 <mpc_asin@@Base+0x530>
    659c:	ldp	x0, x1, [x28]
    65a0:	stp	x0, x1, [x27]
    65a4:	ldp	x0, x1, [x28, #16]
    65a8:	stp	x0, x1, [x27, #16]
    65ac:	ldr	w0, [x19, #40]
    65b0:	tbz	w0, #31, 65c4 <mpc_asin@@Base+0x48c>
    65b4:	mov	x1, x27
    65b8:	mov	x0, x27
    65bc:	mov	w2, #0x0                   	// #0
    65c0:	bl	4b80 <mpfr_neg@plt>
    65c4:	mov	x1, x27
    65c8:	mov	x0, x24
    65cc:	mov	w2, #0x0                   	// #0
    65d0:	bl	5350 <mpfr_sqrt@plt>
    65d4:	mov	w25, w0
    65d8:	ldr	w0, [x19, #40]
    65dc:	tbz	w0, #31, 65f0 <mpc_asin@@Base+0x4b8>
    65e0:	mov	x1, x24
    65e4:	mov	x0, x24
    65e8:	mov	w2, #0x0                   	// #0
    65ec:	bl	4b80 <mpfr_neg@plt>
    65f0:	cbnz	w25, 663c <mpc_asin@@Base+0x504>
    65f4:	ldr	w0, [x19, #40]
    65f8:	tbz	w0, #31, 6630 <mpc_asin@@Base+0x4f8>
    65fc:	add	x0, x22, #0x20
    6600:	bl	4bb0 <mpfr_nextbelow@plt>
    6604:	mov	w2, w21
    6608:	mov	x1, x22
    660c:	mov	x0, x20
    6610:	bl	5580 <mpc_set@plt>
    6614:	mov	w19, w0
    6618:	mov	x0, x22
    661c:	bl	4a10 <mpc_clear@plt>
    6620:	b	61b0 <mpc_asin@@Base+0x78>
    6624:	mov	x0, #0x2                   	// #2
    6628:	sdiv	x0, x23, x0
    662c:	b	6504 <mpc_asin@@Base+0x3cc>
    6630:	add	x0, x22, #0x20
    6634:	bl	4e00 <mpfr_nextabove@plt>
    6638:	b	6604 <mpc_asin@@Base+0x4cc>
    663c:	ldr	w0, [sp, #120]
    6640:	mov	w3, #0x1                   	// #1
    6644:	ldr	x4, [x20, #32]
    6648:	cmp	w0, #0x0
    664c:	ldr	x1, [sp, #224]
    6650:	mov	x0, x24
    6654:	cinc	x4, x4, eq  // eq = none
    6658:	mov	w2, #0x4                   	// #4
    665c:	sub	x1, x1, #0x1
    6660:	bl	5450 <mpfr_can_round@plt>
    6664:	cbnz	w0, 6604 <mpc_asin@@Base+0x4cc>
    6668:	mov	x1, x19
    666c:	mov	w2, #0x0                   	// #0
    6670:	mov	x0, x22
    6674:	bl	4f30 <mpc_sqr@plt>
    6678:	mov	w3, #0x0                   	// #0
    667c:	mov	x2, x22
    6680:	ldr	x0, [sp, #208]
    6684:	mov	x1, #0x1                   	// #1
    6688:	str	x0, [sp, #128]
    668c:	mov	x0, x22
    6690:	bl	5430 <mpfr_ui_sub@plt>
    6694:	mov	x1, x24
    6698:	mov	w2, #0x0                   	// #0
    669c:	mov	x0, x24
    66a0:	bl	4b80 <mpfr_neg@plt>
    66a4:	ldr	x6, [sp, #208]
    66a8:	mov	x1, x22
    66ac:	ldr	x7, [sp, #240]
    66b0:	mov	w2, #0x0                   	// #0
    66b4:	mov	x0, x22
    66b8:	stp	x7, x6, [sp, #144]
    66bc:	bl	4b40 <mpc_sqrt@plt>
    66c0:	ldr	x5, [sp, #208]
    66c4:	mov	x2, x28
    66c8:	mov	x1, x22
    66cc:	mov	w3, #0x0                   	// #0
    66d0:	mov	x0, x22
    66d4:	str	x5, [sp, #136]
    66d8:	ldr	x25, [sp, #240]
    66dc:	bl	4a60 <mpfr_sub@plt>
    66e0:	mov	x2, x19
    66e4:	mov	x1, x24
    66e8:	mov	w3, #0x0                   	// #0
    66ec:	mov	x0, x24
    66f0:	bl	4e60 <mpfr_add@plt>
    66f4:	mov	x0, x22
    66f8:	bl	51f0 <mpfr_sgn@plt>
    66fc:	cbz	w0, 64ec <mpc_asin@@Base+0x3b4>
    6700:	mov	x0, x24
    6704:	bl	51f0 <mpfr_sgn@plt>
    6708:	cbz	w0, 64ec <mpc_asin@@Base+0x3b4>
    670c:	ldp	x0, x5, [sp, #128]
    6710:	ldp	x7, x6, [sp, #144]
    6714:	ldr	x2, [sp, #208]
    6718:	ldr	x3, [sp, #240]
    671c:	sub	x8, x5, x2
    6720:	subs	x0, x0, x6
    6724:	sub	x1, x7, x23
    6728:	csel	x0, x0, xzr, pl  // pl = nfrst
    672c:	sub	x1, x1, #0x1
    6730:	add	x0, x0, x6
    6734:	sub	x4, x25, x3
    6738:	sub	x0, x0, x23
    673c:	cmp	x1, x0
    6740:	csel	x0, x1, x0, ge  // ge = tcont
    6744:	cmp	x6, x7
    6748:	csel	x6, x6, x7, ge  // ge = tcont
    674c:	mov	x1, #0x2                   	// #2
    6750:	lsl	x0, x0, #1
    6754:	cmp	x5, x25
    6758:	sub	x0, x0, x6
    675c:	csel	x5, x5, x25, le
    6760:	add	x0, x0, #0x1
    6764:	sdiv	x0, x0, x1
    6768:	mov	x1, x22
    676c:	sub	x0, x0, x5
    6770:	adds	x0, x0, x23
    6774:	csel	x0, x0, xzr, pl  // pl = nfrst
    6778:	cmp	x4, x8
    677c:	csel	x4, x4, x8, ge  // ge = tcont
    6780:	add	x0, x0, #0x1
    6784:	adds	x0, x4, x0
    6788:	csel	x0, x0, xzr, pl  // pl = nfrst
    678c:	cmp	x2, x3
    6790:	csel	x3, x2, x3, ge  // ge = tcont
    6794:	add	x0, x0, #0x1
    6798:	sub	x25, x3, x23
    679c:	mov	w2, #0x0                   	// #0
    67a0:	add	x25, x25, x0
    67a4:	mov	x0, x22
    67a8:	str	x3, [sp, #128]
    67ac:	bl	4db0 <mpc_log@plt>
    67b0:	ldr	x3, [sp, #128]
    67b4:	ldr	x0, [sp, #208]
    67b8:	sub	x3, x3, #0x1
    67bc:	ldr	x1, [sp, #240]
    67c0:	sub	x25, x25, x3
    67c4:	cmp	x0, x1
    67c8:	csel	x0, x0, x1, le
    67cc:	mov	x1, x24
    67d0:	sub	x25, x25, x0
    67d4:	mov	x0, x22
    67d8:	adds	x25, x25, x23
    67dc:	csel	x25, x25, xzr, pl  // pl = nfrst
    67e0:	add	x25, x25, #0x1
    67e4:	bl	5090 <mpfr_swap@plt>
    67e8:	sub	x25, x23, x25
    67ec:	mov	x1, x24
    67f0:	mov	w2, #0x0                   	// #0
    67f4:	mov	x0, x24
    67f8:	bl	4b80 <mpfr_neg@plt>
    67fc:	ldr	x0, [sp, #96]
    6800:	mov	w3, #0x1                   	// #1
    6804:	ldr	x1, [sp, #112]
    6808:	mov	w2, #0x0                   	// #0
    680c:	add	x4, x0, x1
    6810:	mov	x1, x25
    6814:	mov	x0, x22
    6818:	bl	5450 <mpfr_can_round@plt>
    681c:	cbz	w0, 64ec <mpc_asin@@Base+0x3b4>
    6820:	ldr	w0, [sp, #120]
    6824:	mov	x1, x25
    6828:	mov	w3, #0x1                   	// #1
    682c:	mov	w2, #0x0                   	// #0
    6830:	cmp	w0, #0x0
    6834:	ldr	x0, [sp, #104]
    6838:	cinc	x4, x0, eq  // eq = none
    683c:	mov	x0, x24
    6840:	bl	5450 <mpfr_can_round@plt>
    6844:	cbz	w0, 64ec <mpc_asin@@Base+0x3b4>
    6848:	b	6604 <mpc_asin@@Base+0x4cc>

000000000000684c <mpc_asinh@@Base>:
    684c:	stp	x29, x30, [sp, #-208]!
    6850:	mov	x29, sp
    6854:	stp	x19, x20, [sp, #16]
    6858:	mov	w19, w2
    685c:	add	x20, sp, #0x90
    6860:	ldp	x2, x3, [x1, #32]
    6864:	stp	x2, x3, [sp, #80]
    6868:	ldp	x2, x3, [x1, #48]
    686c:	stp	x2, x3, [sp, #96]
    6870:	ldp	x2, x3, [x1]
    6874:	stp	x21, x22, [sp, #32]
    6878:	mov	x21, x0
    687c:	ldp	x0, x1, [x1, #16]
    6880:	add	x22, sp, #0x50
    6884:	stp	x2, x3, [sp, #112]
    6888:	mov	w2, #0x0                   	// #0
    688c:	stp	x0, x1, [sp, #128]
    6890:	mov	x1, x22
    6894:	mov	x0, x22
    6898:	bl	4b80 <mpfr_neg@plt>
    689c:	ldr	x2, [x21]
    68a0:	mov	x0, x20
    68a4:	ldr	x1, [x21, #32]
    68a8:	bl	53c0 <mpc_init3@plt>
    68ac:	asr	w1, w19, #4
    68b0:	cmp	w1, #0x2
    68b4:	b.eq	695c <mpc_asinh@@Base+0x110>  // b.none
    68b8:	cmp	w1, #0x3
    68bc:	mov	w0, #0x2                   	// #2
    68c0:	csel	w1, w1, w0, ne  // ne = any
    68c4:	ubfiz	w2, w19, #4, #4
    68c8:	mov	x0, x20
    68cc:	add	w2, w2, w1
    68d0:	mov	x1, x22
    68d4:	bl	5480 <mpc_asin@plt>
    68d8:	mov	w19, w0
    68dc:	ldp	x4, x5, [sp, #176]
    68e0:	ldp	x2, x3, [sp, #144]
    68e4:	stp	x4, x5, [sp, #144]
    68e8:	ldp	x4, x5, [sp, #192]
    68ec:	stp	x2, x3, [sp, #176]
    68f0:	mov	w2, #0x0                   	// #0
    68f4:	ldp	x0, x1, [sp, #160]
    68f8:	stp	x0, x1, [sp, #192]
    68fc:	add	x1, x20, #0x20
    6900:	stp	x4, x5, [sp, #160]
    6904:	mov	x0, x1
    6908:	bl	4b80 <mpfr_neg@plt>
    690c:	mov	x1, x20
    6910:	mov	w2, #0x0                   	// #0
    6914:	mov	x0, x21
    6918:	bl	5580 <mpc_set@plt>
    691c:	mov	x0, x20
    6920:	bl	4a10 <mpc_clear@plt>
    6924:	asr	w0, w19, #2
    6928:	cmp	w0, #0x2
    692c:	b.eq	6938 <mpc_asinh@@Base+0xec>  // b.none
    6930:	cmp	w0, #0x0
    6934:	cset	w0, ne  // ne = any
    6938:	tbnz	w19, #0, 6964 <mpc_asinh@@Base+0x118>
    693c:	ands	w19, w19, #0x3
    6940:	mov	w1, #0x4                   	// #4
    6944:	csel	w19, w19, w1, eq  // eq = none
    6948:	orr	w0, w0, w19
    694c:	ldp	x19, x20, [sp, #16]
    6950:	ldp	x21, x22, [sp, #32]
    6954:	ldp	x29, x30, [sp], #208
    6958:	ret
    695c:	mov	w1, #0x3                   	// #3
    6960:	b	68c4 <mpc_asinh@@Base+0x78>
    6964:	mov	w19, #0x8                   	// #8
    6968:	b	6948 <mpc_asinh@@Base+0xfc>

000000000000696c <set_pi_over_2@@Base>:
    696c:	stp	x29, x30, [sp, #-48]!
    6970:	mov	x29, sp
    6974:	stp	x19, x20, [sp, #16]
    6978:	mov	x19, x0
    697c:	str	x21, [sp, #32]
    6980:	mov	w21, w1
    6984:	mov	w1, w2
    6988:	tbz	w21, #31, 69a0 <set_pi_over_2@@Base+0x34>
    698c:	cmp	w2, #0x2
    6990:	b.eq	69ec <set_pi_over_2@@Base+0x80>  // b.none
    6994:	cmp	w2, #0x3
    6998:	mov	w0, #0x2                   	// #2
    699c:	csel	w1, w2, w0, ne  // ne = any
    69a0:	mov	x0, x19
    69a4:	bl	4a80 <mpfr_const_pi@plt>
    69a8:	mov	x1, x19
    69ac:	mov	w20, w0
    69b0:	mov	w3, #0x0                   	// #0
    69b4:	mov	x0, x19
    69b8:	mov	x2, #0x1                   	// #1
    69bc:	bl	5320 <mpfr_div_2ui@plt>
    69c0:	tbz	w21, #31, 69d8 <set_pi_over_2@@Base+0x6c>
    69c4:	neg	w20, w20
    69c8:	mov	x1, x19
    69cc:	mov	x0, x19
    69d0:	mov	w2, #0x0                   	// #0
    69d4:	bl	4b80 <mpfr_neg@plt>
    69d8:	mov	w0, w20
    69dc:	ldp	x19, x20, [sp, #16]
    69e0:	ldr	x21, [sp, #32]
    69e4:	ldp	x29, x30, [sp], #48
    69e8:	ret
    69ec:	mov	w1, #0x3                   	// #3
    69f0:	b	69a0 <set_pi_over_2@@Base+0x34>

00000000000069f4 <mpc_atan@@Base>:
    69f4:	stp	x29, x30, [sp, #-304]!
    69f8:	mov	x3, #0x2                   	// #2
    69fc:	movk	x3, #0x8000, lsl #48
    6a00:	mov	x29, sp
    6a04:	stp	x25, x26, [sp, #64]
    6a08:	mov	w25, w2
    6a0c:	ldr	w26, [x1, #8]
    6a10:	ldr	x2, [x1, #16]
    6a14:	stp	x19, x20, [sp, #16]
    6a18:	mov	x19, x0
    6a1c:	stp	x21, x22, [sp, #32]
    6a20:	mov	x20, x1
    6a24:	ldr	w22, [x1, #40]
    6a28:	stp	x23, x24, [sp, #48]
    6a2c:	cmp	x2, x3
    6a30:	stp	x27, x28, [sp, #80]
    6a34:	b.eq	6a9c <mpc_atan@@Base+0xa8>  // b.none
    6a38:	ldr	x21, [x1, #48]
    6a3c:	lsr	w24, w26, #31
    6a40:	cmp	x21, x3
    6a44:	mov	x3, #0x8000000000000003    	// #-9223372036854775805
    6a48:	b.ne	6af8 <mpc_atan@@Base+0x104>  // b.any
    6a4c:	cmp	x2, x3
    6a50:	add	x19, x0, #0x20
    6a54:	b.ne	6ae8 <mpc_atan@@Base+0xf4>  // b.any
    6a58:	neg	w1, w24
    6a5c:	and	w2, w25, #0xf
    6a60:	bl	53f0 <set_pi_over_2@plt>
    6a64:	mov	w1, #0x1                   	// #1
    6a68:	str	w1, [x19, #8]
    6a6c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    6a70:	str	x1, [x19, #16]
    6a74:	tbz	w0, #31, 6adc <mpc_atan@@Base+0xe8>
    6a78:	mov	w19, #0x2                   	// #2
    6a7c:	mov	w0, w19
    6a80:	ldp	x19, x20, [sp, #16]
    6a84:	ldp	x21, x22, [sp, #32]
    6a88:	ldp	x23, x24, [sp, #48]
    6a8c:	ldp	x25, x26, [sp, #64]
    6a90:	ldp	x27, x28, [sp, #80]
    6a94:	ldp	x29, x30, [sp], #304
    6a98:	ret
    6a9c:	bl	4a40 <mpfr_set_nan@plt>
    6aa0:	ldr	x1, [x20, #48]
    6aa4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    6aa8:	and	x1, x1, #0xfffffffffffffffd
    6aac:	cmp	x1, x0
    6ab0:	add	x0, x19, #0x20
    6ab4:	b.ne	6af0 <mpc_atan@@Base+0xfc>  // b.any
    6ab8:	mov	w2, #0x1                   	// #1
    6abc:	str	w2, [x0, #8]
    6ac0:	str	x1, [x0, #16]
    6ac4:	tbz	w22, #31, 6ad8 <mpc_atan@@Base+0xe4>
    6ac8:	mov	x1, x19
    6acc:	mov	x0, x19
    6ad0:	mov	w2, #0x0                   	// #0
    6ad4:	bl	4f60 <mpc_conj@plt>
    6ad8:	mov	w0, #0x0                   	// #0
    6adc:	cmp	w0, #0x0
    6ae0:	cset	w19, ne  // ne = any
    6ae4:	b	6a7c <mpc_atan@@Base+0x88>
    6ae8:	bl	4a40 <mpfr_set_nan@plt>
    6aec:	mov	x0, x19
    6af0:	bl	4a40 <mpfr_set_nan@plt>
    6af4:	b	6ad8 <mpc_atan@@Base+0xe4>
    6af8:	cmp	x2, x3
    6afc:	b.eq	6b08 <mpc_atan@@Base+0x114>  // b.none
    6b00:	cmp	x21, x3
    6b04:	b.ne	6b4c <mpc_atan@@Base+0x158>  // b.any
    6b08:	and	w2, w25, #0xf
    6b0c:	neg	w1, w24
    6b10:	mov	x0, x19
    6b14:	bl	53f0 <set_pi_over_2@plt>
    6b18:	mov	w20, w0
    6b1c:	mov	w0, #0x1                   	// #1
    6b20:	str	w0, [x19, #40]
    6b24:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    6b28:	str	x0, [x19, #48]
    6b2c:	tbz	w22, #31, 6b40 <mpc_atan@@Base+0x14c>
    6b30:	mov	x1, x19
    6b34:	mov	x0, x19
    6b38:	mov	w2, #0x0                   	// #0
    6b3c:	bl	4f60 <mpc_conj@plt>
    6b40:	cmp	w20, #0x0
    6b44:	b.ge	6ae0 <mpc_atan@@Base+0xec>  // b.tcont
    6b48:	b	6a78 <mpc_atan@@Base+0x84>
    6b4c:	mov	x3, #0x8000000000000001    	// #-9223372036854775807
    6b50:	cmp	x21, x3
    6b54:	b.ne	6b74 <mpc_atan@@Base+0x180>  // b.any
    6b58:	and	w2, w25, #0xf
    6b5c:	bl	51b0 <mpfr_atan@plt>
    6b60:	mov	w20, w0
    6b64:	mov	w0, #0x1                   	// #1
    6b68:	str	w0, [x19, #40]
    6b6c:	str	x21, [x19, #48]
    6b70:	b	6b2c <mpc_atan@@Base+0x138>
    6b74:	add	x27, x1, #0x20
    6b78:	cmp	x2, x3
    6b7c:	b.ne	6de8 <mpc_atan@@Base+0x3f4>  // b.any
    6b80:	mov	x2, #0x0                   	// #0
    6b84:	tbz	w22, #31, 6be8 <mpc_atan@@Base+0x1f4>
    6b88:	mov	x0, x27
    6b8c:	mov	x1, #0xffffffffffffffff    	// #-1
    6b90:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6b94:	neg	w23, w0
    6b98:	cmp	w23, #0x0
    6b9c:	b.ge	6bfc <mpc_atan@@Base+0x208>  // b.tcont
    6ba0:	mov	w0, #0x1                   	// #1
    6ba4:	str	w0, [x19, #8]
    6ba8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    6bac:	str	x0, [x19, #16]
    6bb0:	tbz	w26, #31, 6bc4 <mpc_atan@@Base+0x1d0>
    6bb4:	mov	x1, x19
    6bb8:	mov	x0, x19
    6bbc:	mov	w2, #0x0                   	// #0
    6bc0:	bl	4b80 <mpfr_neg@plt>
    6bc4:	add	x0, x19, #0x20
    6bc8:	asr	w2, w25, #4
    6bcc:	mov	x1, x27
    6bd0:	bl	4d90 <mpfr_atanh@plt>
    6bd4:	mov	w19, w0
    6bd8:	mov	w23, #0x0                   	// #0
    6bdc:	cmp	w23, #0x0
    6be0:	cset	w0, ne  // ne = any
    6be4:	b	6da8 <mpc_atan@@Base+0x3b4>
    6be8:	mov	x0, x27
    6bec:	mov	x1, #0x1                   	// #1
    6bf0:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6bf4:	mov	w23, w0
    6bf8:	b	6b98 <mpc_atan@@Base+0x1a4>
    6bfc:	b.ne	6c2c <mpc_atan@@Base+0x238>  // b.any
    6c00:	cmp	w26, #0x0
    6c04:	mov	x0, x19
    6c08:	mov	w20, #0x1                   	// #1
    6c0c:	cneg	w1, w20, lt  // lt = tstop
    6c10:	bl	4d10 <mpfr_set_zero@plt>
    6c14:	cmp	w22, #0x0
    6c18:	add	x0, x19, #0x20
    6c1c:	cneg	w1, w20, lt  // lt = tstop
    6c20:	mov	w19, #0x0                   	// #0
    6c24:	bl	5120 <mpfr_set_inf@plt>
    6c28:	b	6bdc <mpc_atan@@Base+0x1e8>
    6c2c:	add	x20, sp, #0xf0
    6c30:	add	x21, sp, #0x110
    6c34:	mov	x0, x20
    6c38:	bl	4aa0 <mpfr_init@plt>
    6c3c:	mov	x0, x21
    6c40:	bl	4aa0 <mpfr_init@plt>
    6c44:	ldr	x28, [x19, #32]
    6c48:	cmp	w22, #0x0
    6c4c:	mov	w23, #0x2                   	// #2
    6c50:	mov	w0, #0x3                   	// #3
    6c54:	asr	w26, w25, #4
    6c58:	csel	w23, w23, w0, ge  // ge = tcont
    6c5c:	mov	x22, x28
    6c60:	mov	x0, x22
    6c64:	bl	4d20 <mpc_ceil_log2@plt>
    6c68:	add	x0, x0, #0x2
    6c6c:	add	x22, x22, x0
    6c70:	mov	x0, x20
    6c74:	mov	x1, x22
    6c78:	bl	4c80 <mpfr_set_prec@plt>
    6c7c:	mov	x1, x22
    6c80:	mov	x0, x21
    6c84:	bl	4c80 <mpfr_set_prec@plt>
    6c88:	mov	w3, w23
    6c8c:	mov	x2, x27
    6c90:	mov	x1, #0x1                   	// #1
    6c94:	mov	x0, x20
    6c98:	bl	4f70 <mpfr_ui_div@plt>
    6c9c:	str	w0, [sp, #96]
    6ca0:	ldr	x0, [sp, #256]
    6ca4:	mov	x1, x20
    6ca8:	mov	w2, #0x2                   	// #2
    6cac:	str	x0, [sp, #104]
    6cb0:	mov	x0, x21
    6cb4:	bl	5010 <mpfr_sqr@plt>
    6cb8:	mov	x0, x21
    6cbc:	mov	x2, #0x0                   	// #0
    6cc0:	mov	x1, #0x1                   	// #1
    6cc4:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6cc8:	cmp	w0, #0x0
    6ccc:	b.le	6d00 <mpc_atan@@Base+0x30c>
    6cd0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    6cd4:	add	x4, x4, #0x614
    6cd8:	mov	w3, #0xba                  	// #186
    6cdc:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    6ce0:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    6ce4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    6ce8:	add	x2, x2, #0x62c
    6cec:	ldr	x0, [x0, #4008]
    6cf0:	add	x1, x1, #0x5f3
    6cf4:	ldr	x0, [x0]
    6cf8:	bl	55a0 <fprintf@plt>
    6cfc:	bl	5000 <abort@plt>
    6d00:	mov	x0, x21
    6d04:	mov	x2, #0x0                   	// #0
    6d08:	mov	x1, #0x1                   	// #1
    6d0c:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6d10:	cbz	w0, 6c60 <mpc_atan@@Base+0x26c>
    6d14:	mov	w3, #0x1                   	// #1
    6d18:	mov	x2, x21
    6d1c:	mov	x1, #0x1                   	// #1
    6d20:	mov	x0, x21
    6d24:	bl	5430 <mpfr_ui_sub@plt>
    6d28:	mov	w2, w23
    6d2c:	mov	x1, x20
    6d30:	mov	x0, x20
    6d34:	bl	4d90 <mpfr_atanh@plt>
    6d38:	ldr	w1, [sp, #96]
    6d3c:	ldr	x2, [sp, #104]
    6d40:	orr	w0, w1, w0
    6d44:	ldr	x1, [sp, #256]
    6d48:	sub	x1, x2, x1
    6d4c:	ldr	x2, [sp, #288]
    6d50:	add	x1, x1, #0x1
    6d54:	subs	x1, x1, x2
    6d58:	mov	x2, #0x1                   	// #1
    6d5c:	csinc	x1, x2, x1, mi  // mi = first
    6d60:	cbnz	w0, 6dc4 <mpc_atan@@Base+0x3d0>
    6d64:	and	w2, w25, #0xf
    6d68:	neg	w1, w24
    6d6c:	mov	x0, x19
    6d70:	bl	53f0 <set_pi_over_2@plt>
    6d74:	ldr	w3, [sp, #248]
    6d78:	mov	w2, w26
    6d7c:	mov	x1, x20
    6d80:	mov	w23, w0
    6d84:	add	x0, x19, #0x20
    6d88:	bl	51d0 <mpfr_set4@plt>
    6d8c:	mov	w19, w0
    6d90:	mov	x0, x20
    6d94:	bl	4d60 <mpfr_clear@plt>
    6d98:	mov	x0, x21
    6d9c:	bl	4d60 <mpfr_clear@plt>
    6da0:	tbz	w23, #31, 6bdc <mpc_atan@@Base+0x1e8>
    6da4:	mov	w0, #0x2                   	// #2
    6da8:	cmp	w19, #0x0
    6dac:	mov	w1, #0x4                   	// #4
    6db0:	csel	w1, w19, w1, eq  // eq = none
    6db4:	mov	w19, #0x8                   	// #8
    6db8:	csel	w19, w1, w19, ge  // ge = tcont
    6dbc:	orr	w19, w0, w19
    6dc0:	b	6a7c <mpc_atan@@Base+0x88>
    6dc4:	cmp	w26, #0x0
    6dc8:	mov	w2, w23
    6dcc:	cinc	x4, x28, eq  // eq = none
    6dd0:	sub	x1, x22, x1
    6dd4:	mov	x0, x20
    6dd8:	mov	w3, #0x1                   	// #1
    6ddc:	bl	5450 <mpfr_can_round@plt>
    6de0:	cbz	w0, 6c60 <mpc_atan@@Base+0x26c>
    6de4:	b	6d64 <mpc_atan@@Base+0x370>
    6de8:	add	x24, sp, #0xf0
    6dec:	add	x26, sp, #0xd0
    6df0:	add	x22, sp, #0xb0
    6df4:	add	x21, sp, #0x90
    6df8:	mov	x4, x24
    6dfc:	mov	x3, x26
    6e00:	mov	x2, x22
    6e04:	mov	x1, x21
    6e08:	mov	x5, #0x0                   	// #0
    6e0c:	mov	x0, #0x1                   	// #1
    6e10:	bl	5540 <mpfr_inits2@plt>
    6e14:	add	x0, sp, #0x110
    6e18:	str	x0, [sp, #128]
    6e1c:	ldp	x0, x1, [x20]
    6e20:	stp	x0, x1, [sp, #272]
    6e24:	mov	w2, #0x0                   	// #0
    6e28:	ldp	x0, x1, [x20, #16]
    6e2c:	stp	x0, x1, [sp, #288]
    6e30:	ldr	x1, [sp, #128]
    6e34:	mov	x0, x1
    6e38:	bl	4b80 <mpfr_neg@plt>
    6e3c:	ldr	x0, [x20, #16]
    6e40:	str	x0, [sp, #120]
    6e44:	ldr	x0, [x19]
    6e48:	str	x0, [sp, #104]
    6e4c:	ldr	x23, [x20, #48]
    6e50:	cmp	x23, #0x0
    6e54:	b.gt	6e98 <mpc_atan@@Base+0x4a4>
    6e58:	ldr	x1, [sp, #104]
    6e5c:	neg	x0, x23
    6e60:	cmp	x0, x1
    6e64:	sub	x23, x1, x23
    6e68:	csel	x23, x23, x1, ge  // ge = tcont
    6e6c:	ldr	x1, [sp, #120]
    6e70:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6e74:	cmp	x1, x0
    6e78:	b.ge	6ea0 <mpc_atan@@Base+0x4ac>  // b.tcont
    6e7c:	mov	x0, #0x2                   	// #2
    6e80:	movk	x0, #0x8000, lsl #48
    6e84:	cmp	x1, x0
    6e88:	b.ne	6e90 <mpc_atan@@Base+0x49c>  // b.any
    6e8c:	bl	4b00 <mpfr_set_erangeflag@plt>
    6e90:	mov	w0, #0x2                   	// #2
    6e94:	b	6eb0 <mpc_atan@@Base+0x4bc>
    6e98:	ldr	x23, [sp, #104]
    6e9c:	b	6e6c <mpc_atan@@Base+0x478>
    6ea0:	ldr	w0, [x20, #8]
    6ea4:	cmp	w0, #0x0
    6ea8:	cset	w0, gt
    6eac:	add	w0, w0, #0x2
    6eb0:	str	w0, [sp, #116]
    6eb4:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    6eb8:	ldr	x0, [x20, #16]
    6ebc:	cmp	x0, x1
    6ec0:	b.ge	6ee0 <mpc_atan@@Base+0x4ec>  // b.tcont
    6ec4:	mov	x1, #0x2                   	// #2
    6ec8:	movk	x1, #0x8000, lsl #48
    6ecc:	cmp	x0, x1
    6ed0:	b.ne	6ed8 <mpc_atan@@Base+0x4e4>  // b.any
    6ed4:	bl	4b00 <mpfr_set_erangeflag@plt>
    6ed8:	mov	w0, #0x3                   	// #3
    6edc:	b	6ef0 <mpc_atan@@Base+0x4fc>
    6ee0:	ldr	w0, [x20, #8]
    6ee4:	mvn	w0, w0
    6ee8:	lsr	w0, w0, #31
    6eec:	add	w0, w0, #0x2
    6ef0:	str	w0, [sp, #96]
    6ef4:	mov	x0, x23
    6ef8:	bl	4d20 <mpc_ceil_log2@plt>
    6efc:	add	x0, x0, #0x2
    6f00:	add	x23, x23, x0
    6f04:	mov	x0, x21
    6f08:	mov	x1, x23
    6f0c:	bl	4c80 <mpfr_set_prec@plt>
    6f10:	mov	x1, x23
    6f14:	mov	x0, x22
    6f18:	bl	4c80 <mpfr_set_prec@plt>
    6f1c:	mov	x1, x23
    6f20:	mov	x0, x26
    6f24:	bl	4c80 <mpfr_set_prec@plt>
    6f28:	ldr	w3, [sp, #116]
    6f2c:	mov	x2, x27
    6f30:	mov	x0, x21
    6f34:	mov	x1, #0x1                   	// #1
    6f38:	bl	5430 <mpfr_ui_sub@plt>
    6f3c:	ldr	x28, [sp, #160]
    6f40:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6f44:	cmp	x28, x0
    6f48:	b.ge	6f84 <mpc_atan@@Base+0x590>  // b.tcont
    6f4c:	mov	x0, #0x2                   	// #2
    6f50:	movk	x0, #0x8000, lsl #48
    6f54:	cmp	x28, x0
    6f58:	b.ne	6f60 <mpc_atan@@Base+0x56c>  // b.any
    6f5c:	bl	4b00 <mpfr_set_erangeflag@plt>
    6f60:	mov	x0, x27
    6f64:	mov	x2, #0x0                   	// #0
    6f68:	mov	x1, #0x1                   	// #1
    6f6c:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6f70:	cbz	w0, 6ffc <mpc_atan@@Base+0x608>
    6f74:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    6f78:	mov	w3, #0x113                 	// #275
    6f7c:	add	x4, x4, #0x633
    6f80:	b	6cdc <mpc_atan@@Base+0x2e8>
    6f84:	ldr	w0, [sp, #152]
    6f88:	cbz	w0, 6f60 <mpc_atan@@Base+0x56c>
    6f8c:	mov	x2, x21
    6f90:	mov	x1, x20
    6f94:	mov	w3, #0x2                   	// #2
    6f98:	mov	x0, x26
    6f9c:	bl	4ca0 <mpfr_atan2@plt>
    6fa0:	ldr	w3, [sp, #96]
    6fa4:	mov	x1, x27
    6fa8:	mov	x0, x21
    6fac:	mov	x2, #0x1                   	// #1
    6fb0:	bl	4ee0 <mpfr_add_ui@plt>
    6fb4:	ldr	x4, [sp, #160]
    6fb8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6fbc:	cmp	x4, x0
    6fc0:	b.ge	7004 <mpc_atan@@Base+0x610>  // b.tcont
    6fc4:	mov	x0, #0x2                   	// #2
    6fc8:	movk	x0, #0x8000, lsl #48
    6fcc:	cmp	x4, x0
    6fd0:	b.ne	6fd8 <mpc_atan@@Base+0x5e4>  // b.any
    6fd4:	bl	4b00 <mpfr_set_erangeflag@plt>
    6fd8:	mov	x0, x27
    6fdc:	mov	x2, #0x0                   	// #0
    6fe0:	mov	x1, #0xffffffffffffffff    	// #-1
    6fe4:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6fe8:	cbz	w0, 7220 <mpc_atan@@Base+0x82c>
    6fec:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    6ff0:	mov	w3, #0x122                 	// #290
    6ff4:	add	x4, x4, #0x659
    6ff8:	b	6cdc <mpc_atan@@Base+0x2e8>
    6ffc:	mov	x28, #0x2                   	// #2
    7000:	b	6f8c <mpc_atan@@Base+0x598>
    7004:	ldr	w0, [sp, #152]
    7008:	cbz	w0, 6fd8 <mpc_atan@@Base+0x5e4>
    700c:	ldr	x1, [sp, #128]
    7010:	mov	x2, x21
    7014:	mov	w3, #0x3                   	// #3
    7018:	mov	x0, x22
    701c:	str	x4, [sp, #136]
    7020:	bl	4ca0 <mpfr_atan2@plt>
    7024:	ldr	x4, [sp, #136]
    7028:	mov	x2, x22
    702c:	mov	x1, x26
    7030:	mov	w3, #0x2                   	// #2
    7034:	cmp	x28, x4
    7038:	mov	x0, x26
    703c:	csel	x4, x28, x4, le
    7040:	str	x4, [sp, #136]
    7044:	bl	4a60 <mpfr_sub@plt>
    7048:	ldr	x0, [sp, #120]
    704c:	mov	w3, #0x2                   	// #2
    7050:	ldr	x4, [sp, #136]
    7054:	add	x28, x0, #0x5
    7058:	ldr	x1, [sp, #224]
    705c:	sub	x28, x28, x4
    7060:	mov	x2, #0x1                   	// #1
    7064:	mov	x0, x26
    7068:	subs	x28, x28, x1
    706c:	mov	x1, x26
    7070:	csel	x28, x28, xzr, pl  // pl = nfrst
    7074:	bl	5320 <mpfr_div_2ui@plt>
    7078:	tst	x25, #0xf
    707c:	add	x1, x28, #0x1
    7080:	ldr	x0, [sp, #104]
    7084:	sub	x1, x23, x1
    7088:	mov	w3, #0x3                   	// #3
    708c:	mov	w2, #0x2                   	// #2
    7090:	cinc	x4, x0, eq  // eq = none
    7094:	mov	x0, x26
    7098:	bl	5450 <mpfr_can_round@plt>
    709c:	cbz	w0, 6ef4 <mpc_atan@@Base+0x500>
    70a0:	ldr	x28, [x19, #32]
    70a4:	cmp	wzr, w25, lsr #4
    70a8:	mov	x23, #0x2                   	// #2
    70ac:	cinc	x0, x28, eq  // eq = none
    70b0:	str	x0, [sp, #96]
    70b4:	mov	x0, x28
    70b8:	bl	4d20 <mpc_ceil_log2@plt>
    70bc:	add	x0, x0, x23
    70c0:	add	x28, x28, x0
    70c4:	mov	x0, x21
    70c8:	mov	x1, x28
    70cc:	bl	4c80 <mpfr_set_prec@plt>
    70d0:	mov	x1, x28
    70d4:	mov	x0, x22
    70d8:	bl	4c80 <mpfr_set_prec@plt>
    70dc:	mov	x1, x28
    70e0:	mov	x0, x24
    70e4:	bl	4c80 <mpfr_set_prec@plt>
    70e8:	mov	w3, #0x4                   	// #4
    70ec:	mov	x1, x27
    70f0:	mov	x2, #0x1                   	// #1
    70f4:	mov	x0, x21
    70f8:	bl	4ee0 <mpfr_add_ui@plt>
    70fc:	mov	x1, x21
    7100:	mov	w2, #0x2                   	// #2
    7104:	mov	x0, x21
    7108:	bl	5010 <mpfr_sqr@plt>
    710c:	mov	x1, x20
    7110:	mov	w2, #0x2                   	// #2
    7114:	mov	x0, x24
    7118:	bl	5010 <mpfr_sqr@plt>
    711c:	mov	w3, #0x2                   	// #2
    7120:	mov	x2, x24
    7124:	mov	x1, x21
    7128:	mov	x0, x21
    712c:	bl	4e60 <mpfr_add@plt>
    7130:	mov	x1, x21
    7134:	mov	w2, #0x2                   	// #2
    7138:	mov	x0, x21
    713c:	bl	4d80 <mpfr_log@plt>
    7140:	mov	w3, #0x1                   	// #1
    7144:	mov	x2, x27
    7148:	mov	x1, #0x1                   	// #1
    714c:	mov	x0, x22
    7150:	bl	5430 <mpfr_ui_sub@plt>
    7154:	mov	x1, x22
    7158:	mov	w2, #0x1                   	// #1
    715c:	mov	x0, x22
    7160:	bl	5010 <mpfr_sqr@plt>
    7164:	mov	x0, x24
    7168:	bl	4bb0 <mpfr_nextbelow@plt>
    716c:	mov	w3, #0x1                   	// #1
    7170:	mov	x2, x24
    7174:	mov	x1, x22
    7178:	mov	x0, x22
    717c:	bl	4e60 <mpfr_add@plt>
    7180:	mov	x1, x22
    7184:	mov	w2, #0x1                   	// #1
    7188:	mov	x0, x22
    718c:	bl	4d80 <mpfr_log@plt>
    7190:	mov	x2, x22
    7194:	mov	x1, x21
    7198:	mov	x0, x24
    719c:	mov	w3, #0x2                   	// #2
    71a0:	bl	4a60 <mpfr_sub@plt>
    71a4:	ldr	x2, [sp, #256]
    71a8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    71ac:	cmp	x2, x0
    71b0:	b.eq	70b4 <mpc_atan@@Base+0x6c0>  // b.none
    71b4:	ldr	x23, [sp, #160]
    71b8:	mov	x1, #0x3                   	// #3
    71bc:	ldr	x0, [sp, #192]
    71c0:	sub	x1, x1, x2
    71c4:	cmp	x0, x23
    71c8:	csel	x0, x0, x23, ge  // ge = tcont
    71cc:	mov	x23, #0xffffffffffffffff    	// #-1
    71d0:	sub	x0, x0, x2
    71d4:	add	x0, x0, #0x1
    71d8:	cmp	x0, x1
    71dc:	b.gt	7228 <mpc_atan@@Base+0x834>
    71e0:	cmp	x1, #0x0
    71e4:	csel	x23, x1, x23, ge  // ge = tcont
    71e8:	mov	x1, x24
    71ec:	mov	x0, x24
    71f0:	mov	w3, #0x0                   	// #0
    71f4:	mov	x2, #0x2                   	// #2
    71f8:	bl	5320 <mpfr_div_2ui@plt>
    71fc:	add	x23, x23, #0x2
    7200:	ldr	x0, [sp, #256]
    7204:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7208:	cmp	x0, x1
    720c:	b.ne	7234 <mpc_atan@@Base+0x840>  // b.any
    7210:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    7214:	mov	w3, #0x17b                 	// #379
    7218:	add	x4, x4, #0x680
    721c:	b	6cdc <mpc_atan@@Base+0x2e8>
    7220:	mov	x4, x28
    7224:	b	700c <mpc_atan@@Base+0x618>
    7228:	cmp	x0, #0x0
    722c:	csel	x23, x0, x23, ge  // ge = tcont
    7230:	b	71e8 <mpc_atan@@Base+0x7f4>
    7234:	ldr	x4, [sp, #96]
    7238:	sub	x1, x28, x23
    723c:	mov	x0, x24
    7240:	mov	w3, #0x3                   	// #3
    7244:	mov	w2, #0x2                   	// #2
    7248:	bl	5450 <mpfr_can_round@plt>
    724c:	cbz	w0, 70b4 <mpc_atan@@Base+0x6c0>
    7250:	mov	w3, w25
    7254:	mov	x2, x24
    7258:	mov	x1, x26
    725c:	mov	x0, x19
    7260:	bl	54f0 <mpc_set_fr_fr@plt>
    7264:	mov	w19, w0
    7268:	mov	x3, x24
    726c:	mov	x2, x26
    7270:	mov	x1, x22
    7274:	mov	x0, x21
    7278:	mov	x4, #0x0                   	// #0
    727c:	bl	4e70 <mpfr_clears@plt>
    7280:	b	6a7c <mpc_atan@@Base+0x88>

0000000000007284 <mpc_atanh@@Base>:
    7284:	stp	x29, x30, [sp, #-208]!
    7288:	mov	x29, sp
    728c:	stp	x21, x22, [sp, #32]
    7290:	mov	w22, w2
    7294:	mov	x21, x0
    7298:	ldp	x2, x3, [x1, #32]
    729c:	stp	x2, x3, [sp, #80]
    72a0:	ldp	x2, x3, [x1, #48]
    72a4:	stp	x2, x3, [sp, #96]
    72a8:	ldp	x2, x3, [x1]
    72ac:	stp	x19, x20, [sp, #16]
    72b0:	add	x19, sp, #0x50
    72b4:	ldp	x0, x1, [x1, #16]
    72b8:	stp	x2, x3, [sp, #112]
    72bc:	mov	w2, #0x0                   	// #0
    72c0:	stp	x0, x1, [sp, #128]
    72c4:	mov	x1, x19
    72c8:	mov	x0, x19
    72cc:	bl	4b80 <mpfr_neg@plt>
    72d0:	add	x20, sp, #0x90
    72d4:	ldr	x2, [x21]
    72d8:	mov	x0, x20
    72dc:	ldr	x1, [x21, #32]
    72e0:	bl	53c0 <mpc_init3@plt>
    72e4:	asr	w1, w22, #4
    72e8:	cmp	w1, #0x2
    72ec:	b.eq	7394 <mpc_atanh@@Base+0x110>  // b.none
    72f0:	cmp	w1, #0x3
    72f4:	mov	w0, #0x2                   	// #2
    72f8:	csel	w1, w1, w0, ne  // ne = any
    72fc:	ubfiz	w2, w22, #4, #4
    7300:	mov	x0, x20
    7304:	add	w2, w2, w1
    7308:	mov	x1, x19
    730c:	bl	5410 <mpc_atan@plt>
    7310:	mov	w19, w0
    7314:	ldp	x2, x3, [sp, #176]
    7318:	ldp	x4, x5, [sp, #144]
    731c:	stp	x2, x3, [sp, #144]
    7320:	ldp	x2, x3, [sp, #192]
    7324:	stp	x4, x5, [sp, #176]
    7328:	ldp	x0, x1, [sp, #160]
    732c:	stp	x0, x1, [sp, #192]
    7330:	add	x1, x20, #0x20
    7334:	stp	x2, x3, [sp, #160]
    7338:	mov	x0, x1
    733c:	mov	w2, #0x0                   	// #0
    7340:	bl	4b80 <mpfr_neg@plt>
    7344:	mov	w2, w22
    7348:	mov	x1, x20
    734c:	mov	x0, x21
    7350:	bl	5580 <mpc_set@plt>
    7354:	mov	x0, x20
    7358:	bl	4a10 <mpc_clear@plt>
    735c:	asr	w0, w19, #2
    7360:	cmp	w0, #0x2
    7364:	b.eq	7370 <mpc_atanh@@Base+0xec>  // b.none
    7368:	cmp	w0, #0x0
    736c:	cset	w0, ne  // ne = any
    7370:	tbnz	w19, #0, 739c <mpc_atanh@@Base+0x118>
    7374:	ands	w19, w19, #0x3
    7378:	mov	w1, #0x4                   	// #4
    737c:	csel	w19, w19, w1, eq  // eq = none
    7380:	orr	w0, w0, w19
    7384:	ldp	x19, x20, [sp, #16]
    7388:	ldp	x21, x22, [sp, #32]
    738c:	ldp	x29, x30, [sp], #208
    7390:	ret
    7394:	mov	w1, #0x3                   	// #3
    7398:	b	72fc <mpc_atanh@@Base+0x78>
    739c:	mov	w19, #0x8                   	// #8
    73a0:	b	7380 <mpc_atanh@@Base+0xfc>

00000000000073a4 <mpc_clear@@Base>:
    73a4:	stp	x29, x30, [sp, #-32]!
    73a8:	mov	x29, sp
    73ac:	str	x19, [sp, #16]
    73b0:	mov	x19, x0
    73b4:	bl	4d60 <mpfr_clear@plt>
    73b8:	add	x0, x19, #0x20
    73bc:	ldr	x19, [sp, #16]
    73c0:	ldp	x29, x30, [sp], #32
    73c4:	b	4d60 <mpfr_clear@plt>

00000000000073c8 <mpc_cmp@@Base>:
    73c8:	stp	x29, x30, [sp, #-48]!
    73cc:	mov	w2, #0x1                   	// #1
    73d0:	mov	x29, sp
    73d4:	stp	x19, x20, [sp, #16]
    73d8:	mov	x20, x0
    73dc:	str	x21, [sp, #32]
    73e0:	mov	x21, x1
    73e4:	bl	53a0 <mpfr_cmp3@plt>
    73e8:	mov	w19, w0
    73ec:	add	x1, x21, #0x20
    73f0:	add	x0, x20, #0x20
    73f4:	mov	w2, #0x1                   	// #1
    73f8:	bl	53a0 <mpfr_cmp3@plt>
    73fc:	cmp	w19, #0x0
    7400:	mov	w2, #0x2                   	// #2
    7404:	cset	w1, ne  // ne = any
    7408:	csel	w1, w1, w2, ge  // ge = tcont
    740c:	cmp	w0, #0x0
    7410:	mov	w2, #0x4                   	// #4
    7414:	csel	w2, w0, w2, eq  // eq = none
    7418:	mov	w0, #0x8                   	// #8
    741c:	csel	w0, w2, w0, ge  // ge = tcont
    7420:	orr	w0, w1, w0
    7424:	ldp	x19, x20, [sp, #16]
    7428:	ldr	x21, [sp, #32]
    742c:	ldp	x29, x30, [sp], #48
    7430:	ret

0000000000007434 <mpc_cmp_abs@@Base>:
    7434:	stp	x29, x30, [sp, #-272]!
    7438:	mov	x29, sp
    743c:	ldr	x3, [x0, #16]
    7440:	stp	x19, x20, [sp, #16]
    7444:	mov	x20, x0
    7448:	stp	x21, x22, [sp, #32]
    744c:	mov	x0, #0x2                   	// #2
    7450:	movk	x0, #0x8000, lsl #48
    7454:	stp	x23, x24, [sp, #48]
    7458:	cmp	x3, x0
    745c:	stp	x25, x26, [sp, #64]
    7460:	b.eq	748c <mpc_cmp_abs@@Base+0x58>  // b.none
    7464:	ldr	x4, [x20, #48]
    7468:	cmp	x4, x0
    746c:	b.eq	748c <mpc_cmp_abs@@Base+0x58>  // b.none
    7470:	ldr	x2, [x1, #16]
    7474:	mov	x19, x1
    7478:	cmp	x2, x0
    747c:	b.eq	748c <mpc_cmp_abs@@Base+0x58>  // b.none
    7480:	ldr	x1, [x1, #48]
    7484:	cmp	x1, x0
    7488:	b.ne	74c0 <mpc_cmp_abs@@Base+0x8c>  // b.any
    748c:	add	x20, sp, #0xd0
    7490:	mov	x0, x20
    7494:	bl	4aa0 <mpfr_init@plt>
    7498:	mov	x0, x20
    749c:	bl	4a40 <mpfr_set_nan@plt>
    74a0:	mov	x1, x20
    74a4:	mov	x0, x20
    74a8:	mov	w2, #0x1                   	// #1
    74ac:	bl	53a0 <mpfr_cmp3@plt>
    74b0:	mov	w19, w0
    74b4:	mov	x0, x20
    74b8:	bl	4d60 <mpfr_clear@plt>
    74bc:	b	74e8 <mpc_cmp_abs@@Base+0xb4>
    74c0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    74c4:	cmp	x3, x0
    74c8:	mov	x3, x0
    74cc:	b.eq	74d8 <mpc_cmp_abs@@Base+0xa4>  // b.none
    74d0:	cmp	x4, x0
    74d4:	b.ne	7504 <mpc_cmp_abs@@Base+0xd0>  // b.any
    74d8:	cmp	x2, x3
    74dc:	b.eq	773c <mpc_cmp_abs@@Base+0x308>  // b.none
    74e0:	cmp	x1, x3
    74e4:	cset	w19, ne  // ne = any
    74e8:	mov	w0, w19
    74ec:	ldp	x19, x20, [sp, #16]
    74f0:	ldp	x21, x22, [sp, #32]
    74f4:	ldp	x23, x24, [sp, #48]
    74f8:	ldp	x25, x26, [sp, #64]
    74fc:	ldp	x29, x30, [sp], #272
    7500:	ret
    7504:	cmp	x2, x0
    7508:	b.eq	7744 <mpc_cmp_abs@@Base+0x310>  // b.none
    750c:	cmp	x1, x0
    7510:	b.eq	7744 <mpc_cmp_abs@@Base+0x310>  // b.none
    7514:	ldp	x0, x1, [x20]
    7518:	stp	x0, x1, [sp, #144]
    751c:	add	x21, sp, #0x90
    7520:	ldp	x0, x1, [x20, #16]
    7524:	stp	x0, x1, [sp, #160]
    7528:	ldp	x0, x1, [x20, #32]
    752c:	stp	x0, x1, [sp, #176]
    7530:	ldp	x0, x1, [x20, #48]
    7534:	stp	x0, x1, [sp, #192]
    7538:	ldp	x0, x1, [x19]
    753c:	stp	x0, x1, [sp, #208]
    7540:	ldp	x0, x1, [x19, #16]
    7544:	stp	x0, x1, [sp, #224]
    7548:	ldp	x0, x1, [x19, #32]
    754c:	stp	x0, x1, [sp, #240]
    7550:	ldp	x0, x1, [x19, #48]
    7554:	stp	x0, x1, [sp, #256]
    7558:	ldr	w0, [x20, #8]
    755c:	tbz	w0, #31, 7570 <mpc_cmp_abs@@Base+0x13c>
    7560:	mov	x1, x21
    7564:	mov	x0, x21
    7568:	mov	w2, #0x0                   	// #0
    756c:	bl	4b80 <mpfr_neg@plt>
    7570:	ldr	w0, [x20, #40]
    7574:	tbz	w0, #31, 7588 <mpc_cmp_abs@@Base+0x154>
    7578:	add	x1, x21, #0x20
    757c:	mov	w2, #0x0                   	// #0
    7580:	mov	x0, x1
    7584:	bl	4b80 <mpfr_neg@plt>
    7588:	ldr	w0, [x19, #8]
    758c:	add	x22, sp, #0xd0
    7590:	tbz	w0, #31, 75a4 <mpc_cmp_abs@@Base+0x170>
    7594:	mov	x1, x22
    7598:	mov	x0, x22
    759c:	mov	w2, #0x0                   	// #0
    75a0:	bl	4b80 <mpfr_neg@plt>
    75a4:	ldr	w0, [x19, #40]
    75a8:	tbz	w0, #31, 75bc <mpc_cmp_abs@@Base+0x188>
    75ac:	add	x1, x22, #0x20
    75b0:	mov	w2, #0x0                   	// #0
    75b4:	mov	x0, x1
    75b8:	bl	4b80 <mpfr_neg@plt>
    75bc:	add	x19, x21, #0x20
    75c0:	mov	x0, x21
    75c4:	mov	x1, x19
    75c8:	mov	w2, #0x1                   	// #1
    75cc:	bl	53a0 <mpfr_cmp3@plt>
    75d0:	cmp	w0, #0x0
    75d4:	b.le	75e4 <mpc_cmp_abs@@Base+0x1b0>
    75d8:	mov	x1, x19
    75dc:	mov	x0, x21
    75e0:	bl	5090 <mpfr_swap@plt>
    75e4:	add	x19, x22, #0x20
    75e8:	mov	x0, x22
    75ec:	mov	x1, x19
    75f0:	mov	w2, #0x1                   	// #1
    75f4:	bl	53a0 <mpfr_cmp3@plt>
    75f8:	cmp	w0, #0x0
    75fc:	b.le	760c <mpc_cmp_abs@@Base+0x1d8>
    7600:	mov	x1, x19
    7604:	mov	x0, x22
    7608:	bl	5090 <mpfr_swap@plt>
    760c:	mov	x1, x22
    7610:	mov	w2, #0x1                   	// #1
    7614:	mov	x0, x21
    7618:	bl	53a0 <mpfr_cmp3@plt>
    761c:	add	x1, x22, #0x20
    7620:	mov	w2, w0
    7624:	add	x0, x21, #0x20
    7628:	cbnz	w2, 763c <mpc_cmp_abs@@Base+0x208>
    762c:	mov	w2, #0x1                   	// #1
    7630:	bl	53a0 <mpfr_cmp3@plt>
    7634:	mov	w19, w0
    7638:	b	74e8 <mpc_cmp_abs@@Base+0xb4>
    763c:	mov	w2, #0x1                   	// #1
    7640:	bl	53a0 <mpfr_cmp3@plt>
    7644:	cbnz	w0, 7658 <mpc_cmp_abs@@Base+0x224>
    7648:	mov	x1, x22
    764c:	mov	x0, x21
    7650:	mov	w2, #0x1                   	// #1
    7654:	b	7630 <mpc_cmp_abs@@Base+0x1fc>
    7658:	add	x24, sp, #0x50
    765c:	add	x23, sp, #0x70
    7660:	mov	x0, x24
    7664:	bl	4aa0 <mpfr_init@plt>
    7668:	mov	x0, x23
    766c:	bl	4aa0 <mpfr_init@plt>
    7670:	ldr	x0, [sp, #144]
    7674:	ldr	x20, [sp, #176]
    7678:	ldr	x1, [sp, #208]
    767c:	cmp	x20, x0
    7680:	csel	x20, x20, x0, ge  // ge = tcont
    7684:	ldr	x0, [sp, #240]
    7688:	cmp	x0, x1
    768c:	csel	x0, x0, x1, ge  // ge = tcont
    7690:	cmp	x20, x0
    7694:	csel	x20, x20, x0, ge  // ge = tcont
    7698:	mov	x0, #0x1387                	// #4999
    769c:	cmp	x20, x0
    76a0:	b.le	7720 <mpc_cmp_abs@@Base+0x2ec>
    76a4:	mov	x0, #0x64                  	// #100
    76a8:	sdiv	x20, x20, x0
    76ac:	mov	x1, x20
    76b0:	mov	x0, x24
    76b4:	bl	4c80 <mpfr_set_prec@plt>
    76b8:	mov	x1, x20
    76bc:	mov	x0, x23
    76c0:	bl	4c80 <mpfr_set_prec@plt>
    76c4:	mov	x1, x21
    76c8:	mov	w2, #0x3                   	// #3
    76cc:	mov	x0, x24
    76d0:	bl	4ea0 <mpc_norm@plt>
    76d4:	mov	x1, x22
    76d8:	mov	w2, #0x3                   	// #3
    76dc:	mov	w26, w0
    76e0:	mov	x0, x23
    76e4:	bl	4ea0 <mpc_norm@plt>
    76e8:	mov	w25, w0
    76ec:	mov	x1, x23
    76f0:	mov	x0, x24
    76f4:	mov	w2, #0x1                   	// #1
    76f8:	bl	53a0 <mpfr_cmp3@plt>
    76fc:	mov	w19, w0
    7700:	cbnz	w0, 7710 <mpc_cmp_abs@@Base+0x2dc>
    7704:	cbnz	w26, 7728 <mpc_cmp_abs@@Base+0x2f4>
    7708:	cmp	w25, #0x0
    770c:	csetm	w19, ne  // ne = any
    7710:	mov	x0, x24
    7714:	bl	4d60 <mpfr_clear@plt>
    7718:	mov	x0, x23
    771c:	b	74b8 <mpc_cmp_abs@@Base+0x84>
    7720:	mov	x20, #0x32                  	// #50
    7724:	b	76ac <mpc_cmp_abs@@Base+0x278>
    7728:	cbz	w25, 7734 <mpc_cmp_abs@@Base+0x300>
    772c:	lsl	x20, x20, #1
    7730:	b	76ac <mpc_cmp_abs@@Base+0x278>
    7734:	mov	w19, #0x1                   	// #1
    7738:	b	7710 <mpc_cmp_abs@@Base+0x2dc>
    773c:	mov	w19, #0x0                   	// #0
    7740:	b	74e8 <mpc_cmp_abs@@Base+0xb4>
    7744:	mov	w19, #0xffffffff            	// #-1
    7748:	b	74e8 <mpc_cmp_abs@@Base+0xb4>

000000000000774c <mpc_cmp_si_si@@Base>:
    774c:	stp	x29, x30, [sp, #-48]!
    7750:	mov	x29, sp
    7754:	stp	x19, x20, [sp, #16]
    7758:	mov	x20, x0
    775c:	str	x21, [sp, #32]
    7760:	mov	x21, x2
    7764:	mov	x2, #0x0                   	// #0
    7768:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    776c:	mov	x1, x21
    7770:	mov	w19, w0
    7774:	mov	x2, #0x0                   	// #0
    7778:	add	x0, x20, #0x20
    777c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    7780:	cmp	w19, #0x0
    7784:	mov	w2, #0x2                   	// #2
    7788:	cset	w1, ne  // ne = any
    778c:	csel	w1, w1, w2, ge  // ge = tcont
    7790:	cmp	w0, #0x0
    7794:	mov	w2, #0x4                   	// #4
    7798:	csel	w2, w0, w2, eq  // eq = none
    779c:	mov	w0, #0x8                   	// #8
    77a0:	csel	w0, w2, w0, ge  // ge = tcont
    77a4:	orr	w0, w1, w0
    77a8:	ldp	x19, x20, [sp, #16]
    77ac:	ldr	x21, [sp, #32]
    77b0:	ldp	x29, x30, [sp], #48
    77b4:	ret

00000000000077b8 <mpc_conj@@Base>:
    77b8:	stp	x29, x30, [sp, #-48]!
    77bc:	mov	x29, sp
    77c0:	ldr	w3, [x1, #8]
    77c4:	stp	x21, x22, [sp, #32]
    77c8:	mov	w21, w2
    77cc:	mov	x22, x0
    77d0:	and	w2, w2, #0xf
    77d4:	stp	x19, x20, [sp, #16]
    77d8:	mov	x20, x1
    77dc:	bl	51d0 <mpfr_set4@plt>
    77e0:	mov	w19, w0
    77e4:	asr	w2, w21, #4
    77e8:	add	x1, x20, #0x20
    77ec:	add	x0, x22, #0x20
    77f0:	bl	4b80 <mpfr_neg@plt>
    77f4:	cmp	w19, #0x0
    77f8:	mov	w2, #0x2                   	// #2
    77fc:	cset	w1, ne  // ne = any
    7800:	csel	w1, w1, w2, ge  // ge = tcont
    7804:	cmp	w0, #0x0
    7808:	mov	w2, #0x4                   	// #4
    780c:	csel	w2, w0, w2, eq  // eq = none
    7810:	mov	w0, #0x8                   	// #8
    7814:	csel	w0, w2, w0, ge  // ge = tcont
    7818:	orr	w0, w1, w0
    781c:	ldp	x19, x20, [sp, #16]
    7820:	ldp	x21, x22, [sp, #32]
    7824:	ldp	x29, x30, [sp], #48
    7828:	ret

000000000000782c <mpc_cos@@Base>:
    782c:	stp	x29, x30, [sp, #-16]!
    7830:	mov	w4, w2
    7834:	mov	w3, #0x0                   	// #0
    7838:	mov	x29, sp
    783c:	mov	x2, x1
    7840:	mov	x1, x0
    7844:	mov	x0, #0x0                   	// #0
    7848:	bl	5140 <mpc_sin_cos@plt>
    784c:	ldp	x29, x30, [sp], #16
    7850:	asr	w0, w0, #4
    7854:	ret

0000000000007858 <mpc_cosh@@Base>:
    7858:	stp	x29, x30, [sp, #-112]!
    785c:	mov	x29, sp
    7860:	str	x21, [sp, #32]
    7864:	mov	w21, w2
    7868:	ldp	x2, x3, [x1, #32]
    786c:	stp	x2, x3, [sp, #48]
    7870:	ldp	x2, x3, [x1, #48]
    7874:	stp	x2, x3, [sp, #64]
    7878:	ldp	x2, x3, [x1]
    787c:	stp	x19, x20, [sp, #16]
    7880:	mov	x20, x0
    7884:	ldp	x0, x1, [x1, #16]
    7888:	add	x19, sp, #0x30
    788c:	stp	x2, x3, [sp, #80]
    7890:	mov	w2, #0x0                   	// #0
    7894:	stp	x0, x1, [sp, #96]
    7898:	mov	x1, x19
    789c:	mov	x0, x19
    78a0:	bl	4b80 <mpfr_neg@plt>
    78a4:	mov	w2, w21
    78a8:	mov	x1, x19
    78ac:	mov	x0, x20
    78b0:	bl	53e0 <mpc_cos@plt>
    78b4:	ldp	x19, x20, [sp, #16]
    78b8:	ldr	x21, [sp, #32]
    78bc:	ldp	x29, x30, [sp], #112
    78c0:	ret

00000000000078c4 <mpc_div_2si@@Base>:
    78c4:	stp	x29, x30, [sp, #-64]!
    78c8:	mov	x29, sp
    78cc:	stp	x19, x20, [sp, #16]
    78d0:	mov	w20, w3
    78d4:	and	w3, w3, #0xf
    78d8:	stp	x21, x22, [sp, #32]
    78dc:	mov	x21, x0
    78e0:	mov	x22, x1
    78e4:	str	x23, [sp, #48]
    78e8:	mov	x23, x2
    78ec:	bl	5030 <mpfr_div_2si@plt>
    78f0:	mov	w19, w0
    78f4:	asr	w3, w20, #4
    78f8:	mov	x2, x23
    78fc:	add	x1, x22, #0x20
    7900:	add	x0, x21, #0x20
    7904:	bl	5030 <mpfr_div_2si@plt>
    7908:	cmp	w19, #0x0
    790c:	mov	w2, #0x2                   	// #2
    7910:	cset	w1, ne  // ne = any
    7914:	csel	w1, w1, w2, ge  // ge = tcont
    7918:	cmp	w0, #0x0
    791c:	mov	w2, #0x4                   	// #4
    7920:	csel	w2, w0, w2, eq  // eq = none
    7924:	mov	w0, #0x8                   	// #8
    7928:	csel	w0, w2, w0, ge  // ge = tcont
    792c:	orr	w0, w1, w0
    7930:	ldp	x19, x20, [sp, #16]
    7934:	ldp	x21, x22, [sp, #32]
    7938:	ldr	x23, [sp, #48]
    793c:	ldp	x29, x30, [sp], #64
    7940:	ret

0000000000007944 <mpc_div_2ui@@Base>:
    7944:	stp	x29, x30, [sp, #-64]!
    7948:	mov	x29, sp
    794c:	stp	x19, x20, [sp, #16]
    7950:	mov	w20, w3
    7954:	and	w3, w3, #0xf
    7958:	stp	x21, x22, [sp, #32]
    795c:	mov	x21, x0
    7960:	mov	x22, x1
    7964:	str	x23, [sp, #48]
    7968:	mov	x23, x2
    796c:	bl	5320 <mpfr_div_2ui@plt>
    7970:	mov	w19, w0
    7974:	asr	w3, w20, #4
    7978:	mov	x2, x23
    797c:	add	x1, x22, #0x20
    7980:	add	x0, x21, #0x20
    7984:	bl	5320 <mpfr_div_2ui@plt>
    7988:	cmp	w19, #0x0
    798c:	mov	w2, #0x2                   	// #2
    7990:	cset	w1, ne  // ne = any
    7994:	csel	w1, w1, w2, ge  // ge = tcont
    7998:	cmp	w0, #0x0
    799c:	mov	w2, #0x4                   	// #4
    79a0:	csel	w2, w0, w2, eq  // eq = none
    79a4:	mov	w0, #0x8                   	// #8
    79a8:	csel	w0, w2, w0, ge  // ge = tcont
    79ac:	orr	w0, w1, w0
    79b0:	ldp	x19, x20, [sp, #16]
    79b4:	ldp	x21, x22, [sp, #32]
    79b8:	ldr	x23, [sp, #48]
    79bc:	ldp	x29, x30, [sp], #64
    79c0:	ret

00000000000079c4 <mpc_div@@Base>:
    79c4:	stp	x29, x30, [sp, #-464]!
    79c8:	mov	x29, sp
    79cc:	stp	x19, x20, [sp, #16]
    79d0:	mov	x19, x0
    79d4:	mov	w0, w3
    79d8:	and	w0, w0, #0xf
    79dc:	str	w0, [sp, #116]
    79e0:	mov	w0, w3
    79e4:	stp	x21, x22, [sp, #32]
    79e8:	mov	x20, x1
    79ec:	asr	w0, w0, #4
    79f0:	str	w0, [sp, #120]
    79f4:	ldr	x0, [x2, #16]
    79f8:	stp	x23, x24, [sp, #48]
    79fc:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7a00:	stp	x25, x26, [sp, #64]
    7a04:	cmp	x0, x1
    7a08:	mov	x26, x2
    7a0c:	stp	x27, x28, [sp, #80]
    7a10:	str	w3, [sp, #128]
    7a14:	b.ne	7a84 <mpc_div@@Base+0xc0>  // b.any
    7a18:	ldr	x1, [x2, #48]
    7a1c:	cmp	x1, x0
    7a20:	b.ne	7a84 <mpc_div@@Base+0xc0>  // b.any
    7a24:	ldr	w0, [x2, #8]
    7a28:	add	x21, sp, #0x190
    7a2c:	mov	w1, #0x1                   	// #1
    7a30:	cmp	w0, #0x0
    7a34:	mov	x0, x21
    7a38:	cneg	w22, w1, lt  // lt = tstop
    7a3c:	mov	x1, #0x1                   	// #1
    7a40:	bl	5440 <mpfr_init2@plt>
    7a44:	mov	w1, w22
    7a48:	mov	x0, x21
    7a4c:	bl	5120 <mpfr_set_inf@plt>
    7a50:	ldr	w3, [sp, #116]
    7a54:	mov	x2, x20
    7a58:	mov	x1, x21
    7a5c:	mov	x0, x19
    7a60:	bl	4b70 <mpfr_mul@plt>
    7a64:	ldr	w3, [sp, #120]
    7a68:	add	x2, x20, #0x20
    7a6c:	mov	x1, x21
    7a70:	add	x0, x19, #0x20
    7a74:	bl	4b70 <mpfr_mul@plt>
    7a78:	mov	x0, x21
    7a7c:	bl	4d60 <mpfr_clear@plt>
    7a80:	b	7da8 <mpc_div@@Base+0x3e4>
    7a84:	ldr	x1, [x20, #16]
    7a88:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7a8c:	cmp	x1, x0
    7a90:	b.eq	7aa0 <mpc_div@@Base+0xdc>  // b.none
    7a94:	ldr	x1, [x20, #48]
    7a98:	cmp	x1, x0
    7a9c:	b.ne	7db0 <mpc_div@@Base+0x3ec>  // b.any
    7aa0:	mov	x0, x26
    7aa4:	bl	54d0 <mpfr_number_p@plt>
    7aa8:	cbz	w0, 7db0 <mpc_div@@Base+0x3ec>
    7aac:	add	x21, x26, #0x20
    7ab0:	mov	x0, x21
    7ab4:	bl	54d0 <mpfr_number_p@plt>
    7ab8:	cbz	w0, 7db0 <mpc_div@@Base+0x3ec>
    7abc:	ldr	x1, [x20, #16]
    7ac0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7ac4:	cmp	x1, x0
    7ac8:	b.ne	7bc8 <mpc_div@@Base+0x204>  // b.any
    7acc:	ldr	w0, [x20, #8]
    7ad0:	mov	w22, #0x1                   	// #1
    7ad4:	cmp	w0, #0x0
    7ad8:	cneg	w22, w22, lt  // lt = tstop
    7adc:	ldr	x1, [x20, #48]
    7ae0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7ae4:	cmp	x1, x0
    7ae8:	b.ne	7bd0 <mpc_div@@Base+0x20c>  // b.any
    7aec:	ldr	w0, [x20, #40]
    7af0:	mov	w20, #0x1                   	// #1
    7af4:	cmp	w0, #0x0
    7af8:	cneg	w20, w20, lt  // lt = tstop
    7afc:	cmp	w22, #0x0
    7b00:	ccmp	w20, #0x0, #0x4, ne  // ne = any
    7b04:	b.ne	7bf8 <mpc_div@@Base+0x234>  // b.any
    7b08:	ldr	x3, [x26, #16]
    7b0c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7b10:	cmp	x3, x0
    7b14:	b.eq	7bd8 <mpc_div@@Base+0x214>  // b.none
    7b18:	ldr	w0, [x26, #8]
    7b1c:	mov	w1, #0x1                   	// #1
    7b20:	cmp	w0, #0x0
    7b24:	cneg	w1, w1, lt  // lt = tstop
    7b28:	ldr	x2, [x26, #48]
    7b2c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7b30:	mul	w1, w22, w1
    7b34:	cmp	x2, x0
    7b38:	b.eq	7be0 <mpc_div@@Base+0x21c>  // b.none
    7b3c:	ldr	w4, [x26, #40]
    7b40:	mov	w0, #0x1                   	// #1
    7b44:	cmp	w4, #0x0
    7b48:	cneg	w0, w0, lt  // lt = tstop
    7b4c:	madd	w23, w20, w0, w1
    7b50:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7b54:	cmp	x3, x0
    7b58:	b.eq	7be8 <mpc_div@@Base+0x224>  // b.none
    7b5c:	ldr	w1, [x26, #8]
    7b60:	mov	w0, #0x1                   	// #1
    7b64:	cmp	w1, #0x0
    7b68:	cneg	w0, w0, lt  // lt = tstop
    7b6c:	mul	w20, w20, w0
    7b70:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7b74:	cmp	x2, x0
    7b78:	b.eq	7bf0 <mpc_div@@Base+0x22c>  // b.none
    7b7c:	ldr	w1, [x26, #40]
    7b80:	mov	w0, #0x1                   	// #1
    7b84:	cmp	w1, #0x0
    7b88:	cneg	w0, w0, lt  // lt = tstop
    7b8c:	msub	w22, w22, w0, w20
    7b90:	cbnz	w23, 7d90 <mpc_div@@Base+0x3cc>
    7b94:	mov	x0, x19
    7b98:	bl	4a40 <mpfr_set_nan@plt>
    7b9c:	add	x0, x19, #0x20
    7ba0:	cbnz	w22, 7da0 <mpc_div@@Base+0x3dc>
    7ba4:	bl	4a40 <mpfr_set_nan@plt>
    7ba8:	mov	w0, w22
    7bac:	ldp	x19, x20, [sp, #16]
    7bb0:	ldp	x21, x22, [sp, #32]
    7bb4:	ldp	x23, x24, [sp, #48]
    7bb8:	ldp	x25, x26, [sp, #64]
    7bbc:	ldp	x27, x28, [sp, #80]
    7bc0:	ldp	x29, x30, [sp], #464
    7bc4:	ret
    7bc8:	mov	w22, #0x0                   	// #0
    7bcc:	b	7adc <mpc_div@@Base+0x118>
    7bd0:	mov	w20, #0x0                   	// #0
    7bd4:	b	7afc <mpc_div@@Base+0x138>
    7bd8:	mov	w1, #0x0                   	// #0
    7bdc:	b	7b28 <mpc_div@@Base+0x164>
    7be0:	mov	w0, #0x0                   	// #0
    7be4:	b	7b4c <mpc_div@@Base+0x188>
    7be8:	mov	w0, #0x0                   	// #0
    7bec:	b	7b6c <mpc_div@@Base+0x1a8>
    7bf0:	mov	w0, #0x0                   	// #0
    7bf4:	b	7b8c <mpc_div@@Base+0x1c8>
    7bf8:	add	x24, sp, #0x190
    7bfc:	mov	x1, #0x2                   	// #2
    7c00:	mov	x0, x24
    7c04:	bl	5440 <mpfr_init2@plt>
    7c08:	cmp	w22, #0x1
    7c0c:	mov	w3, #0x0                   	// #0
    7c10:	b.ne	7ccc <mpc_div@@Base+0x308>  // b.any
    7c14:	mov	x2, x21
    7c18:	mov	x1, x26
    7c1c:	mov	x0, x24
    7c20:	cmp	w20, #0x1
    7c24:	b.ne	7c68 <mpc_div@@Base+0x2a4>  // b.any
    7c28:	bl	4e60 <mpfr_add@plt>
    7c2c:	ldr	x1, [sp, #416]
    7c30:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7c34:	cmp	x1, x0
    7c38:	b.eq	7c60 <mpc_div@@Base+0x29c>  // b.none
    7c3c:	ldr	w0, [sp, #408]
    7c40:	cmp	w0, #0x0
    7c44:	cneg	w23, w20, lt  // lt = tstop
    7c48:	mov	x2, x21
    7c4c:	mov	x1, x26
    7c50:	mov	w3, #0x0                   	// #0
    7c54:	mov	x0, x24
    7c58:	bl	4a60 <mpfr_sub@plt>
    7c5c:	b	7d14 <mpc_div@@Base+0x350>
    7c60:	mov	w23, #0x0                   	// #0
    7c64:	b	7c48 <mpc_div@@Base+0x284>
    7c68:	bl	4a60 <mpfr_sub@plt>
    7c6c:	ldr	x1, [sp, #416]
    7c70:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7c74:	cmp	x1, x0
    7c78:	b.eq	7cc4 <mpc_div@@Base+0x300>  // b.none
    7c7c:	ldr	w0, [sp, #408]
    7c80:	cmp	w0, #0x0
    7c84:	cneg	w23, w22, lt  // lt = tstop
    7c88:	mov	x1, x26
    7c8c:	mov	x2, x21
    7c90:	mov	x0, x24
    7c94:	mov	w3, #0x0                   	// #0
    7c98:	bl	4e60 <mpfr_add@plt>
    7c9c:	ldr	x1, [sp, #416]
    7ca0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7ca4:	cmp	x1, x0
    7ca8:	b.eq	7d88 <mpc_div@@Base+0x3c4>  // b.none
    7cac:	ldr	w0, [sp, #408]
    7cb0:	cmp	w0, #0x0
    7cb4:	csinv	w22, w22, wzr, lt  // lt = tstop
    7cb8:	mov	x0, x24
    7cbc:	bl	4d60 <mpfr_clear@plt>
    7cc0:	b	7b90 <mpc_div@@Base+0x1cc>
    7cc4:	mov	w23, #0x0                   	// #0
    7cc8:	b	7c88 <mpc_div@@Base+0x2c4>
    7ccc:	cmp	w20, #0x1
    7cd0:	b.ne	7d40 <mpc_div@@Base+0x37c>  // b.any
    7cd4:	mov	x1, x21
    7cd8:	mov	x2, x26
    7cdc:	mov	x0, x24
    7ce0:	bl	4a60 <mpfr_sub@plt>
    7ce4:	ldr	x1, [sp, #416]
    7ce8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7cec:	cmp	x1, x0
    7cf0:	b.eq	7d38 <mpc_div@@Base+0x374>  // b.none
    7cf4:	ldr	w0, [sp, #408]
    7cf8:	cmp	w0, #0x0
    7cfc:	cneg	w23, w20, lt  // lt = tstop
    7d00:	mov	x2, x21
    7d04:	mov	x1, x26
    7d08:	mov	x0, x24
    7d0c:	mov	w3, #0x0                   	// #0
    7d10:	bl	4e60 <mpfr_add@plt>
    7d14:	ldr	x1, [sp, #416]
    7d18:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7d1c:	cmp	x1, x0
    7d20:	b.eq	7d88 <mpc_div@@Base+0x3c4>  // b.none
    7d24:	ldr	w0, [sp, #408]
    7d28:	mov	w22, #0x1                   	// #1
    7d2c:	cmp	w0, #0x0
    7d30:	cneg	w22, w22, lt  // lt = tstop
    7d34:	b	7cb8 <mpc_div@@Base+0x2f4>
    7d38:	mov	w23, #0x0                   	// #0
    7d3c:	b	7d00 <mpc_div@@Base+0x33c>
    7d40:	mov	x1, x26
    7d44:	mov	x2, x21
    7d48:	mov	x0, x24
    7d4c:	bl	4e60 <mpfr_add@plt>
    7d50:	ldr	x1, [sp, #416]
    7d54:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7d58:	cmp	x1, x0
    7d5c:	b.eq	7d80 <mpc_div@@Base+0x3bc>  // b.none
    7d60:	ldr	w0, [sp, #408]
    7d64:	mov	w1, #0xffffffff            	// #-1
    7d68:	cmp	w0, #0x0
    7d6c:	cneg	w23, w1, lt  // lt = tstop
    7d70:	mov	x2, x26
    7d74:	mov	x1, x21
    7d78:	mov	w3, #0x0                   	// #0
    7d7c:	b	7c54 <mpc_div@@Base+0x290>
    7d80:	mov	w23, #0x0                   	// #0
    7d84:	b	7d70 <mpc_div@@Base+0x3ac>
    7d88:	mov	w22, #0x0                   	// #0
    7d8c:	b	7cb8 <mpc_div@@Base+0x2f4>
    7d90:	mov	w1, w23
    7d94:	mov	x0, x19
    7d98:	bl	5120 <mpfr_set_inf@plt>
    7d9c:	b	7b9c <mpc_div@@Base+0x1d8>
    7da0:	mov	w1, w22
    7da4:	bl	5120 <mpfr_set_inf@plt>
    7da8:	mov	w22, #0x0                   	// #0
    7dac:	b	7ba8 <mpc_div@@Base+0x1e4>
    7db0:	mov	x0, x20
    7db4:	bl	54d0 <mpfr_number_p@plt>
    7db8:	cbz	w0, 8018 <mpc_div@@Base+0x654>
    7dbc:	add	x0, x20, #0x20
    7dc0:	str	x0, [sp, #96]
    7dc4:	bl	54d0 <mpfr_number_p@plt>
    7dc8:	cbz	w0, 8018 <mpc_div@@Base+0x654>
    7dcc:	ldr	x1, [x26, #16]
    7dd0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7dd4:	cmp	x1, x0
    7dd8:	b.eq	7de8 <mpc_div@@Base+0x424>  // b.none
    7ddc:	ldr	x1, [x26, #48]
    7de0:	cmp	x1, x0
    7de4:	b.ne	8018 <mpc_div@@Base+0x654>  // b.any
    7de8:	add	x22, sp, #0xb0
    7dec:	mov	x1, #0x2                   	// #2
    7df0:	mov	x0, x22
    7df4:	add	x21, sp, #0xd0
    7df8:	bl	5440 <mpfr_init2@plt>
    7dfc:	add	x28, sp, #0x130
    7e00:	mov	x0, x21
    7e04:	mov	x1, #0x2                   	// #2
    7e08:	bl	5440 <mpfr_init2@plt>
    7e0c:	add	x27, sp, #0x150
    7e10:	mov	x0, x28
    7e14:	mov	x1, #0x2                   	// #2
    7e18:	bl	5440 <mpfr_init2@plt>
    7e1c:	add	x25, sp, #0x190
    7e20:	mov	x0, x27
    7e24:	mov	x1, #0x2                   	// #2
    7e28:	bl	5440 <mpfr_init2@plt>
    7e2c:	add	x24, sp, #0xf0
    7e30:	mov	x0, x25
    7e34:	mov	x1, #0x2                   	// #2
    7e38:	bl	5440 <mpfr_init2@plt>
    7e3c:	add	x23, sp, #0x110
    7e40:	ldr	x1, [x20]
    7e44:	mov	w4, #0x1                   	// #1
    7e48:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7e4c:	str	w4, [sp, #408]
    7e50:	str	x0, [sp, #416]
    7e54:	mov	x0, x24
    7e58:	bl	5440 <mpfr_init2@plt>
    7e5c:	ldr	x1, [x20, #32]
    7e60:	mov	x0, x23
    7e64:	bl	5440 <mpfr_init2@plt>
    7e68:	ldr	x1, [x26, #16]
    7e6c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7e70:	mov	w3, #0x0                   	// #0
    7e74:	mov	x2, #0x0                   	// #0
    7e78:	cmp	x1, x0
    7e7c:	mov	x0, x22
    7e80:	cset	x1, eq  // eq = none
    7e84:	bl	5130 <mpfr_set_ui_2exp@plt>
    7e88:	ldr	x1, [x26, #16]
    7e8c:	mov	x0, #0x2                   	// #2
    7e90:	movk	x0, #0x8000, lsl #48
    7e94:	mov	w4, #0x1                   	// #1
    7e98:	cmp	x1, x0
    7e9c:	b.ne	7ff8 <mpc_div@@Base+0x634>  // b.any
    7ea0:	mov	w3, w4
    7ea4:	mov	x1, x22
    7ea8:	mov	w2, #0x0                   	// #0
    7eac:	mov	x0, x22
    7eb0:	bl	51d0 <mpfr_set4@plt>
    7eb4:	ldr	x1, [x26, #48]
    7eb8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7ebc:	mov	w3, #0x0                   	// #0
    7ec0:	mov	x2, #0x0                   	// #0
    7ec4:	cmp	x1, x0
    7ec8:	mov	x0, x21
    7ecc:	cset	x1, eq  // eq = none
    7ed0:	bl	5130 <mpfr_set_ui_2exp@plt>
    7ed4:	ldr	x1, [x26, #48]
    7ed8:	mov	x0, #0x2                   	// #2
    7edc:	movk	x0, #0x8000, lsl #48
    7ee0:	cmp	x1, x0
    7ee4:	b.ne	8000 <mpc_div@@Base+0x63c>  // b.any
    7ee8:	mov	w3, #0x1                   	// #1
    7eec:	mov	x1, x21
    7ef0:	mov	w2, #0x0                   	// #0
    7ef4:	mov	x0, x21
    7ef8:	bl	51d0 <mpfr_set4@plt>
    7efc:	mov	x1, x20
    7f00:	mov	x2, x22
    7f04:	mov	w3, #0x0                   	// #0
    7f08:	mov	x0, x24
    7f0c:	bl	4b70 <mpfr_mul@plt>
    7f10:	add	x1, x20, #0x20
    7f14:	mov	x2, x21
    7f18:	mov	w3, #0x0                   	// #0
    7f1c:	mov	x0, x23
    7f20:	bl	4b70 <mpfr_mul@plt>
    7f24:	mov	x2, x23
    7f28:	mov	x1, x24
    7f2c:	mov	w3, #0x0                   	// #0
    7f30:	mov	x0, x28
    7f34:	bl	4e60 <mpfr_add@plt>
    7f38:	add	x1, x20, #0x20
    7f3c:	mov	x2, x22
    7f40:	mov	w3, #0x0                   	// #0
    7f44:	mov	x0, x23
    7f48:	bl	4b70 <mpfr_mul@plt>
    7f4c:	mov	x1, x20
    7f50:	mov	x2, x21
    7f54:	mov	w3, #0x0                   	// #0
    7f58:	mov	x0, x24
    7f5c:	bl	4b70 <mpfr_mul@plt>
    7f60:	mov	x1, x23
    7f64:	mov	x2, x24
    7f68:	mov	x0, x27
    7f6c:	mov	w3, #0x0                   	// #0
    7f70:	bl	4a60 <mpfr_sub@plt>
    7f74:	ldr	x1, [sp, #320]
    7f78:	mov	x0, #0x2                   	// #2
    7f7c:	movk	x0, #0x8000, lsl #48
    7f80:	mov	x20, x0
    7f84:	cmp	x1, x0
    7f88:	b.ne	8008 <mpc_div@@Base+0x644>  // b.any
    7f8c:	mov	w3, #0x1                   	// #1
    7f90:	mov	x1, x25
    7f94:	mov	x0, x19
    7f98:	mov	w2, #0x0                   	// #0
    7f9c:	bl	51d0 <mpfr_set4@plt>
    7fa0:	ldr	x1, [sp, #352]
    7fa4:	add	x0, x19, #0x20
    7fa8:	cmp	x1, x20
    7fac:	b.ne	8010 <mpc_div@@Base+0x64c>  // b.any
    7fb0:	mov	w3, #0x1                   	// #1
    7fb4:	mov	x1, x25
    7fb8:	mov	w2, #0x0                   	// #0
    7fbc:	bl	51d0 <mpfr_set4@plt>
    7fc0:	mov	x0, x22
    7fc4:	bl	4d60 <mpfr_clear@plt>
    7fc8:	mov	x0, x21
    7fcc:	bl	4d60 <mpfr_clear@plt>
    7fd0:	mov	x0, x28
    7fd4:	bl	4d60 <mpfr_clear@plt>
    7fd8:	mov	x0, x27
    7fdc:	bl	4d60 <mpfr_clear@plt>
    7fe0:	mov	x0, x25
    7fe4:	bl	4d60 <mpfr_clear@plt>
    7fe8:	mov	x0, x24
    7fec:	bl	4d60 <mpfr_clear@plt>
    7ff0:	mov	x0, x23
    7ff4:	b	7a7c <mpc_div@@Base+0xb8>
    7ff8:	ldr	w3, [x26, #8]
    7ffc:	b	7ea4 <mpc_div@@Base+0x4e0>
    8000:	ldr	w3, [x26, #40]
    8004:	b	7eec <mpc_div@@Base+0x528>
    8008:	ldr	w3, [sp, #312]
    800c:	b	7f90 <mpc_div@@Base+0x5cc>
    8010:	ldr	w3, [sp, #344]
    8014:	b	7fb4 <mpc_div@@Base+0x5f0>
    8018:	mov	x0, x20
    801c:	bl	54d0 <mpfr_number_p@plt>
    8020:	cbnz	w0, 8030 <mpc_div@@Base+0x66c>
    8024:	mov	x0, x19
    8028:	bl	4ef0 <mpc_set_nan@plt>
    802c:	b	7da8 <mpc_div@@Base+0x3e4>
    8030:	add	x24, x20, #0x20
    8034:	mov	x0, x24
    8038:	bl	54d0 <mpfr_number_p@plt>
    803c:	cbz	w0, 8024 <mpc_div@@Base+0x660>
    8040:	mov	x0, x26
    8044:	bl	54d0 <mpfr_number_p@plt>
    8048:	cbz	w0, 8024 <mpc_div@@Base+0x660>
    804c:	add	x27, x26, #0x20
    8050:	mov	x0, x27
    8054:	bl	54d0 <mpfr_number_p@plt>
    8058:	cbz	w0, 8024 <mpc_div@@Base+0x660>
    805c:	ldr	x28, [x26, #48]
    8060:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
    8064:	cmp	x28, x22
    8068:	b.ne	8164 <mpc_div@@Base+0x7a0>  // b.any
    806c:	ldr	w0, [x20, #8]
    8070:	mov	w27, #0x1                   	// #1
    8074:	ldr	w3, [sp, #120]
    8078:	add	x22, x19, #0x20
    807c:	cmp	w0, #0x0
    8080:	ldr	w0, [x20, #40]
    8084:	cneg	w23, w27, lt  // lt = tstop
    8088:	mov	x1, x24
    808c:	cmp	w0, #0x0
    8090:	ldr	w0, [x26, #8]
    8094:	cneg	w25, w27, lt  // lt = tstop
    8098:	mov	x2, x26
    809c:	cmp	w0, #0x0
    80a0:	cneg	w0, w27, lt  // lt = tstop
    80a4:	str	w0, [sp, #96]
    80a8:	ldr	w0, [x26, #40]
    80ac:	cmp	w0, #0x0
    80b0:	mov	x0, x22
    80b4:	cneg	w21, w27, lt  // lt = tstop
    80b8:	bl	5150 <mpfr_div@plt>
    80bc:	mov	w24, w0
    80c0:	ldr	w3, [sp, #116]
    80c4:	mov	x1, x20
    80c8:	mov	x2, x26
    80cc:	mov	x0, x19
    80d0:	bl	5150 <mpfr_div@plt>
    80d4:	mov	w20, w0
    80d8:	ldr	x0, [x19, #16]
    80dc:	cmp	x0, x28
    80e0:	b.ne	8104 <mpc_div@@Base+0x740>  // b.any
    80e4:	ldr	w0, [sp, #96]
    80e8:	mov	x1, x19
    80ec:	mov	w2, #0x0                   	// #0
    80f0:	cmp	w23, w0
    80f4:	mov	x0, x19
    80f8:	ccmp	w25, w21, #0x4, ne  // ne = any
    80fc:	cneg	w3, w27, ne  // ne = any
    8100:	bl	51d0 <mpfr_set4@plt>
    8104:	ldr	x1, [x19, #48]
    8108:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    810c:	cmp	x1, x0
    8110:	b.ne	8138 <mpc_div@@Base+0x774>  // b.any
    8114:	ldr	w0, [sp, #96]
    8118:	mov	w3, #0x1                   	// #1
    811c:	mov	x1, x22
    8120:	mov	w2, #0x0                   	// #0
    8124:	cmp	w0, w25
    8128:	mov	x0, x22
    812c:	ccmp	w23, w21, #0x0, ne  // ne = any
    8130:	cneg	w3, w3, eq  // eq = none
    8134:	bl	51d0 <mpfr_set4@plt>
    8138:	cmp	w20, #0x0
    813c:	mov	w0, #0x2                   	// #2
    8140:	cset	w22, ne  // ne = any
    8144:	csel	w22, w22, w0, ge  // ge = tcont
    8148:	cmp	w24, #0x0
    814c:	mov	w0, #0x4                   	// #4
    8150:	csel	w0, w24, w0, eq  // eq = none
    8154:	mov	w24, #0x8                   	// #8
    8158:	csel	w24, w0, w24, ge  // ge = tcont
    815c:	orr	w22, w22, w24
    8160:	b	7ba8 <mpc_div@@Base+0x1e4>
    8164:	ldr	x0, [x26, #16]
    8168:	add	x21, sp, #0x150
    816c:	cmp	x0, x22
    8170:	b.ne	82f0 <mpc_div@@Base+0x92c>  // b.any
    8174:	cmp	x19, x20
    8178:	ldr	w1, [x20, #8]
    817c:	cset	w4, eq  // eq = none
    8180:	cmp	x26, x19
    8184:	csinc	w25, w4, wzr, ne  // ne = any
    8188:	mov	w23, #0x1                   	// #1
    818c:	ldr	x0, [x20, #16]
    8190:	cmp	w25, #0x0
    8194:	str	x0, [sp, #104]
    8198:	add	x0, sp, #0x190
    819c:	csel	x22, x0, x19, ne  // ne = any
    81a0:	cmp	w1, #0x0
    81a4:	cneg	w1, w23, lt  // lt = tstop
    81a8:	str	w1, [sp, #96]
    81ac:	ldr	w1, [x20, #40]
    81b0:	cmp	w1, #0x0
    81b4:	ldr	w1, [x26, #8]
    81b8:	cneg	w28, w23, lt  // lt = tstop
    81bc:	cmp	w1, #0x0
    81c0:	cneg	w1, w23, lt  // lt = tstop
    81c4:	str	w1, [sp, #112]
    81c8:	ldr	w1, [x26, #40]
    81cc:	cmp	w1, #0x0
    81d0:	cneg	w23, w23, lt  // lt = tstop
    81d4:	cbz	w25, 81e4 <mpc_div@@Base+0x820>
    81d8:	ldr	x1, [x19]
    81dc:	ldr	x2, [x19, #32]
    81e0:	bl	53c0 <mpc_init3@plt>
    81e4:	ldr	w3, [sp, #116]
    81e8:	mov	x2, x21
    81ec:	ldp	x0, x1, [x26, #32]
    81f0:	stp	x0, x1, [sp, #336]
    81f4:	ldp	x0, x1, [x27, #16]
    81f8:	stp	x0, x1, [sp, #352]
    81fc:	mov	x1, x24
    8200:	mov	x0, x22
    8204:	bl	5150 <mpfr_div@plt>
    8208:	mov	w24, w0
    820c:	mov	x1, x21
    8210:	mov	w2, #0x0                   	// #0
    8214:	mov	x0, x21
    8218:	bl	4b80 <mpfr_neg@plt>
    821c:	ldr	w3, [sp, #120]
    8220:	mov	x1, x20
    8224:	mov	x2, x21
    8228:	add	x0, x22, #0x20
    822c:	bl	5150 <mpfr_div@plt>
    8230:	mov	w20, w0
    8234:	cbz	w25, 8254 <mpc_div@@Base+0x890>
    8238:	add	x21, sp, #0x190
    823c:	mov	w2, #0x0                   	// #0
    8240:	mov	x1, x21
    8244:	mov	x0, x19
    8248:	bl	5580 <mpc_set@plt>
    824c:	mov	x0, x21
    8250:	bl	4a10 <mpc_clear@plt>
    8254:	ldr	x1, [x19, #16]
    8258:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    825c:	cmp	x1, x0
    8260:	b.ne	828c <mpc_div@@Base+0x8c8>  // b.any
    8264:	ldr	w0, [sp, #96]
    8268:	mov	w3, #0x1                   	// #1
    826c:	ldr	w1, [sp, #112]
    8270:	mov	w2, #0x0                   	// #0
    8274:	cmp	w0, w1
    8278:	mov	x1, x19
    827c:	ccmp	w28, w23, #0x4, ne  // ne = any
    8280:	mov	x0, x19
    8284:	cneg	w3, w3, ne  // ne = any
    8288:	bl	51d0 <mpfr_set4@plt>
    828c:	ldr	x1, [sp, #104]
    8290:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    8294:	cmp	x1, x0
    8298:	b.ne	82c4 <mpc_div@@Base+0x900>  // b.any
    829c:	ldr	w0, [sp, #112]
    82a0:	add	x1, x19, #0x20
    82a4:	mov	w3, #0x1                   	// #1
    82a8:	mov	w2, #0x0                   	// #0
    82ac:	cmp	w0, w28
    82b0:	ldr	w0, [sp, #96]
    82b4:	ccmp	w0, w23, #0x0, ne  // ne = any
    82b8:	mov	x0, x1
    82bc:	cneg	w3, w3, eq  // eq = none
    82c0:	bl	51d0 <mpfr_set4@plt>
    82c4:	cmp	w24, #0x0
    82c8:	mov	w0, #0x2                   	// #2
    82cc:	cset	w22, ne  // ne = any
    82d0:	csel	w22, w22, w0, ge  // ge = tcont
    82d4:	cmp	w20, #0x0
    82d8:	mov	w0, #0x4                   	// #4
    82dc:	csel	w0, w20, w0, eq  // eq = none
    82e0:	mov	w20, #0x8                   	// #8
    82e4:	csel	w20, w0, w20, ge  // ge = tcont
    82e8:	orr	w22, w22, w20
    82ec:	b	7ba8 <mpc_div@@Base+0x1e4>
    82f0:	ldr	x0, [x19]
    82f4:	mov	x1, #0x2                   	// #2
    82f8:	ldr	x25, [x19, #32]
    82fc:	add	x28, sp, #0x130
    8300:	mov	w24, #0x0                   	// #0
    8304:	cmp	x25, x0
    8308:	csel	x25, x25, x0, ge  // ge = tcont
    830c:	mov	x0, x21
    8310:	bl	4cf0 <mpc_init2@plt>
    8314:	mov	x0, x28
    8318:	bl	4aa0 <mpfr_init@plt>
    831c:	add	x0, sp, #0x190
    8320:	str	x0, [sp, #160]
    8324:	ldp	x0, x1, [x26]
    8328:	stp	x0, x1, [sp, #400]
    832c:	mov	w2, #0x0                   	// #0
    8330:	ldp	x0, x1, [x26, #16]
    8334:	stp	x0, x1, [sp, #416]
    8338:	ldp	x0, x1, [x26, #32]
    833c:	stp	x0, x1, [sp, #432]
    8340:	ldp	x0, x1, [x27, #16]
    8344:	stp	x0, x1, [sp, #448]
    8348:	mov	w27, #0x0                   	// #0
    834c:	ldr	x0, [sp, #160]
    8350:	add	x1, x0, #0x20
    8354:	mov	x0, x1
    8358:	bl	4b80 <mpfr_neg@plt>
    835c:	bl	52f0 <mpfr_underflow_p@plt>
    8360:	str	w0, [sp, #168]
    8364:	bl	54e0 <mpfr_overflow_p@plt>
    8368:	str	wzr, [sp, #96]
    836c:	str	wzr, [sp, #104]
    8370:	str	wzr, [sp, #112]
    8374:	str	wzr, [sp, #136]
    8378:	str	x22, [sp, #144]
    837c:	str	w0, [sp, #172]
    8380:	ldr	w0, [sp, #136]
    8384:	add	w0, w0, #0x1
    8388:	str	w0, [sp, #136]
    838c:	cmp	w0, #0x2
    8390:	b.gt	84fc <mpc_div@@Base+0xb38>
    8394:	mov	x0, x25
    8398:	bl	4d20 <mpc_ceil_log2@plt>
    839c:	add	x0, x0, #0x5
    83a0:	add	x25, x25, x0
    83a4:	mov	x0, x21
    83a8:	mov	x1, x25
    83ac:	bl	4c00 <mpc_set_prec@plt>
    83b0:	mov	x1, x25
    83b4:	mov	x0, x28
    83b8:	bl	4c80 <mpfr_set_prec@plt>
    83bc:	bl	4e20 <mpfr_clear_underflow@plt>
    83c0:	bl	4a50 <mpfr_clear_overflow@plt>
    83c4:	mov	x1, x26
    83c8:	mov	w2, #0x2                   	// #2
    83cc:	mov	x0, x28
    83d0:	bl	4ea0 <mpc_norm@plt>
    83d4:	str	w0, [sp, #156]
    83d8:	bl	52f0 <mpfr_underflow_p@plt>
    83dc:	str	w0, [sp, #124]
    83e0:	bl	54e0 <mpfr_overflow_p@plt>
    83e4:	str	w0, [sp, #140]
    83e8:	ldr	w0, [sp, #124]
    83ec:	cbz	w0, 8400 <mpc_div@@Base+0xa3c>
    83f0:	mov	w0, #0x1                   	// #1
    83f4:	str	w0, [sp, #312]
    83f8:	ldr	x0, [sp, #144]
    83fc:	str	x0, [sp, #320]
    8400:	bl	4e20 <mpfr_clear_underflow@plt>
    8404:	bl	4a50 <mpfr_clear_overflow@plt>
    8408:	ldr	x2, [sp, #160]
    840c:	mov	x1, x20
    8410:	mov	x0, x21
    8414:	mov	w3, #0x11                  	// #17
    8418:	bl	4ed0 <mpc_mul@plt>
    841c:	and	w1, w0, #0x3
    8420:	cmp	w1, #0x2
    8424:	b.eq	8508 <mpc_div@@Base+0xb44>  // b.none
    8428:	cmp	w1, #0x0
    842c:	cset	w23, ne  // ne = any
    8430:	asr	w0, w0, #2
    8434:	cmp	w0, #0x2
    8438:	b.eq	8510 <mpc_div@@Base+0xb4c>  // b.none
    843c:	cmp	w0, #0x0
    8440:	cset	w22, ne  // ne = any
    8444:	bl	52f0 <mpfr_underflow_p@plt>
    8448:	str	w0, [sp, #152]
    844c:	bl	54e0 <mpfr_overflow_p@plt>
    8450:	str	w0, [sp, #132]
    8454:	mov	w0, w0
    8458:	cbz	w0, 85e8 <mpc_div@@Base+0xc24>
    845c:	ldr	x0, [sp, #352]
    8460:	mov	x20, #0x8000000000000003    	// #-9223372036854775805
    8464:	cmp	x0, x20
    8468:	b.ge	8518 <mpc_div@@Base+0xb54>  // b.tcont
    846c:	mov	x1, #0x2                   	// #2
    8470:	movk	x1, #0x8000, lsl #48
    8474:	cmp	x0, x1
    8478:	b.ne	8480 <mpc_div@@Base+0xabc>  // b.any
    847c:	bl	4b00 <mpfr_set_erangeflag@plt>
    8480:	ldr	x0, [sp, #384]
    8484:	mov	x20, #0x8000000000000003    	// #-9223372036854775805
    8488:	cmp	x0, x20
    848c:	b.ge	857c <mpc_div@@Base+0xbb8>  // b.tcont
    8490:	mov	x1, #0x2                   	// #2
    8494:	movk	x1, #0x8000, lsl #48
    8498:	cmp	x0, x1
    849c:	b.ne	84a4 <mpc_div@@Base+0xae0>  // b.any
    84a0:	bl	4b00 <mpfr_set_erangeflag@plt>
    84a4:	ldr	w2, [sp, #128]
    84a8:	mov	x1, x21
    84ac:	mov	x0, x19
    84b0:	bl	5580 <mpc_set@plt>
    84b4:	ldr	w0, [sp, #96]
    84b8:	cbnz	w0, 84d0 <mpc_div@@Base+0xb0c>
    84bc:	ldr	w0, [sp, #124]
    84c0:	cmp	w0, #0x0
    84c4:	ldr	w0, [sp, #152]
    84c8:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    84cc:	b.ne	88fc <mpc_div@@Base+0xf38>  // b.any
    84d0:	ldr	x0, [sp, #352]
    84d4:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    84d8:	cmp	x0, x1
    84dc:	b.ge	8874 <mpc_div@@Base+0xeb0>  // b.tcont
    84e0:	mov	x1, #0x2                   	// #2
    84e4:	movk	x1, #0x8000, lsl #48
    84e8:	cmp	x0, x1
    84ec:	b.ne	84f4 <mpc_div@@Base+0xb30>  // b.any
    84f0:	bl	4b00 <mpfr_set_erangeflag@plt>
    84f4:	mov	w1, #0x0                   	// #0
    84f8:	b	8878 <mpc_div@@Base+0xeb4>
    84fc:	mov	x0, #0x2                   	// #2
    8500:	sdiv	x0, x25, x0
    8504:	b	83a0 <mpc_div@@Base+0x9dc>
    8508:	mov	w23, #0xffffffff            	// #-1
    850c:	b	8430 <mpc_div@@Base+0xa6c>
    8510:	mov	w22, #0xffffffff            	// #-1
    8514:	b	8444 <mpc_div@@Base+0xa80>
    8518:	ldr	w25, [sp, #344]
    851c:	cmp	w25, #0x0
    8520:	b.le	8558 <mpc_div@@Base+0xb94>
    8524:	mov	x0, x21
    8528:	bl	4e00 <mpfr_nextabove@plt>
    852c:	ldr	x0, [sp, #352]
    8530:	cmp	x0, x20
    8534:	mov	x0, x21
    8538:	cset	w20, eq  // eq = none
    853c:	bl	4bb0 <mpfr_nextbelow@plt>
    8540:	cbz	w20, 8480 <mpc_div@@Base+0xabc>
    8544:	mov	w1, w25
    8548:	mov	x0, x21
    854c:	bl	5120 <mpfr_set_inf@plt>
    8550:	str	w20, [sp, #96]
    8554:	b	8480 <mpc_div@@Base+0xabc>
    8558:	b.eq	8480 <mpc_div@@Base+0xabc>  // b.none
    855c:	mov	x0, x21
    8560:	bl	4bb0 <mpfr_nextbelow@plt>
    8564:	ldr	x0, [sp, #352]
    8568:	cmp	x0, x20
    856c:	mov	x0, x21
    8570:	cset	w20, eq  // eq = none
    8574:	bl	4e00 <mpfr_nextabove@plt>
    8578:	b	8540 <mpc_div@@Base+0xb7c>
    857c:	ldr	w25, [sp, #376]
    8580:	cmp	w25, #0x0
    8584:	b.le	85c0 <mpc_div@@Base+0xbfc>
    8588:	add	x27, x21, #0x20
    858c:	mov	x0, x27
    8590:	bl	4e00 <mpfr_nextabove@plt>
    8594:	ldr	x0, [sp, #384]
    8598:	cmp	x0, x20
    859c:	mov	x0, x27
    85a0:	cset	w20, eq  // eq = none
    85a4:	bl	4bb0 <mpfr_nextbelow@plt>
    85a8:	cbz	w20, 84a4 <mpc_div@@Base+0xae0>
    85ac:	mov	w1, w25
    85b0:	add	x0, x21, #0x20
    85b4:	bl	5120 <mpfr_set_inf@plt>
    85b8:	str	w20, [sp, #104]
    85bc:	b	84a4 <mpc_div@@Base+0xae0>
    85c0:	b.eq	84a4 <mpc_div@@Base+0xae0>  // b.none
    85c4:	add	x27, x21, #0x20
    85c8:	mov	x0, x27
    85cc:	bl	4bb0 <mpfr_nextbelow@plt>
    85d0:	ldr	x0, [sp, #384]
    85d4:	cmp	x0, x20
    85d8:	mov	x0, x27
    85dc:	cset	w20, eq  // eq = none
    85e0:	bl	4e00 <mpfr_nextabove@plt>
    85e4:	b	85a8 <mpc_div@@Base+0xbe4>
    85e8:	ldr	w0, [sp, #156]
    85ec:	cbnz	w0, 8754 <mpc_div@@Base+0xd90>
    85f0:	cmp	w23, #0x0
    85f4:	ccmp	w22, #0x0, #0x4, ne  // ne = any
    85f8:	b.ne	8754 <mpc_div@@Base+0xd90>  // b.any
    85fc:	bl	4e20 <mpfr_clear_underflow@plt>
    8600:	bl	4a50 <mpfr_clear_overflow@plt>
    8604:	mov	x2, x28
    8608:	mov	x1, x21
    860c:	mov	w3, #0x1                   	// #1
    8610:	mov	x0, x21
    8614:	bl	5150 <mpfr_div@plt>
    8618:	orr	w23, w23, w0
    861c:	bl	52f0 <mpfr_underflow_p@plt>
    8620:	str	w0, [sp, #112]
    8624:	bl	54e0 <mpfr_overflow_p@plt>
    8628:	str	w0, [sp, #96]
    862c:	cbnz	w23, 86b0 <mpc_div@@Base+0xcec>
    8630:	bl	4e20 <mpfr_clear_underflow@plt>
    8634:	add	x23, x21, #0x20
    8638:	bl	4a50 <mpfr_clear_overflow@plt>
    863c:	mov	x2, x28
    8640:	mov	x1, x23
    8644:	mov	w3, #0x1                   	// #1
    8648:	mov	x0, x23
    864c:	bl	5150 <mpfr_div@plt>
    8650:	orr	w22, w22, w0
    8654:	bl	52f0 <mpfr_underflow_p@plt>
    8658:	mov	w24, w0
    865c:	bl	54e0 <mpfr_overflow_p@plt>
    8660:	str	w0, [sp, #104]
    8664:	cmp	w22, #0x0
    8668:	ccmp	w24, #0x0, #0x0, ne  // ne = any
    866c:	b.ne	8854 <mpc_div@@Base+0xe90>  // b.any
    8670:	ldr	w0, [sp, #104]
    8674:	cbnz	w0, 885c <mpc_div@@Base+0xe98>
    8678:	ldr	w0, [sp, #120]
    867c:	sub	x1, x25, #0x4
    8680:	ldr	x4, [x19, #32]
    8684:	cmp	w0, #0x0
    8688:	mov	w3, #0x1                   	// #1
    868c:	mov	x0, x23
    8690:	cinc	x4, x4, eq  // eq = none
    8694:	mov	w2, #0x0                   	// #0
    8698:	bl	5450 <mpfr_can_round@plt>
    869c:	cmp	w0, #0x0
    86a0:	cset	w27, ne  // ne = any
    86a4:	mov	w24, #0x0                   	// #0
    86a8:	mov	w0, #0x1                   	// #1
    86ac:	b	86f0 <mpc_div@@Base+0xd2c>
    86b0:	ldr	w1, [sp, #96]
    86b4:	ldr	w0, [sp, #112]
    86b8:	orr	w0, w0, w1
    86bc:	cbnz	w0, 8630 <mpc_div@@Base+0xc6c>
    86c0:	ldr	w0, [sp, #116]
    86c4:	sub	x1, x25, #0x4
    86c8:	ldr	x4, [x19]
    86cc:	cmp	w0, #0x0
    86d0:	mov	w3, #0x1                   	// #1
    86d4:	mov	x0, x21
    86d8:	cinc	x4, x4, eq  // eq = none
    86dc:	mov	w2, #0x0                   	// #0
    86e0:	bl	5450 <mpfr_can_round@plt>
    86e4:	cbnz	w0, 8630 <mpc_div@@Base+0xc6c>
    86e8:	str	wzr, [sp, #96]
    86ec:	str	wzr, [sp, #112]
    86f0:	eor	w0, w0, #0x1
    86f4:	eor	w1, w27, #0x1
    86f8:	orr	w0, w0, w1
    86fc:	cbz	w0, 8718 <mpc_div@@Base+0xd54>
    8700:	ldr	w1, [sp, #140]
    8704:	ldr	w0, [sp, #124]
    8708:	orr	w0, w0, w1
    870c:	ldr	w1, [sp, #152]
    8710:	orr	w0, w0, w1
    8714:	cbz	w0, 8380 <mpc_div@@Base+0x9bc>
    8718:	ldr	w2, [sp, #128]
    871c:	mov	x1, x21
    8720:	mov	x0, x19
    8724:	bl	5580 <mpc_set@plt>
    8728:	and	w1, w0, #0x3
    872c:	cmp	w1, #0x2
    8730:	b.eq	8864 <mpc_div@@Base+0xea0>  // b.none
    8734:	cmp	w1, #0x0
    8738:	cset	w23, ne  // ne = any
    873c:	asr	w0, w0, #2
    8740:	cmp	w0, #0x2
    8744:	b.eq	886c <mpc_div@@Base+0xea8>  // b.none
    8748:	cmp	w0, #0x0
    874c:	cset	w22, ne  // ne = any
    8750:	b	84b4 <mpc_div@@Base+0xaf0>
    8754:	mov	x1, #0x1                   	// #1
    8758:	mov	x2, x28
    875c:	mov	x0, x28
    8760:	mov	w3, #0x1                   	// #1
    8764:	bl	4f70 <mpfr_ui_div@plt>
    8768:	ldr	w1, [sp, #156]
    876c:	orr	w0, w0, w1
    8770:	cbz	w0, 8798 <mpc_div@@Base+0xdd4>
    8774:	ldr	x1, [sp, #144]
    8778:	ldr	x0, [sp, #352]
    877c:	cmp	x0, x1
    8780:	cset	w0, ne  // ne = any
    8784:	orr	w23, w23, w0
    8788:	ldr	x0, [sp, #384]
    878c:	cmp	x0, x1
    8790:	cset	w0, ne  // ne = any
    8794:	orr	w22, w22, w0
    8798:	bl	4e20 <mpfr_clear_underflow@plt>
    879c:	bl	4a50 <mpfr_clear_overflow@plt>
    87a0:	mov	x2, x28
    87a4:	mov	x1, x21
    87a8:	mov	w3, #0x1                   	// #1
    87ac:	mov	x0, x21
    87b0:	bl	4b70 <mpfr_mul@plt>
    87b4:	orr	w23, w23, w0
    87b8:	bl	52f0 <mpfr_underflow_p@plt>
    87bc:	str	w0, [sp, #112]
    87c0:	bl	54e0 <mpfr_overflow_p@plt>
    87c4:	str	w0, [sp, #96]
    87c8:	cbnz	w23, 8818 <mpc_div@@Base+0xe54>
    87cc:	bl	4e20 <mpfr_clear_underflow@plt>
    87d0:	add	x23, x21, #0x20
    87d4:	bl	4a50 <mpfr_clear_overflow@plt>
    87d8:	mov	x2, x28
    87dc:	mov	x1, x23
    87e0:	mov	w3, #0x1                   	// #1
    87e4:	mov	x0, x23
    87e8:	bl	4b70 <mpfr_mul@plt>
    87ec:	orr	w22, w22, w0
    87f0:	bl	52f0 <mpfr_underflow_p@plt>
    87f4:	mov	w24, w0
    87f8:	bl	54e0 <mpfr_overflow_p@plt>
    87fc:	str	w0, [sp, #104]
    8800:	cmp	w22, #0x0
    8804:	ccmp	w24, #0x0, #0x0, ne  // ne = any
    8808:	b.eq	8670 <mpc_div@@Base+0xcac>  // b.none
    880c:	mov	w27, #0x1                   	// #1
    8810:	mov	w0, w27
    8814:	b	86f0 <mpc_div@@Base+0xd2c>
    8818:	ldr	w1, [sp, #96]
    881c:	ldr	w0, [sp, #112]
    8820:	orr	w0, w0, w1
    8824:	cbnz	w0, 87cc <mpc_div@@Base+0xe08>
    8828:	ldr	w0, [sp, #116]
    882c:	sub	x1, x25, #0x4
    8830:	ldr	x4, [x19]
    8834:	cmp	w0, #0x0
    8838:	mov	w3, #0x1                   	// #1
    883c:	mov	x0, x21
    8840:	cinc	x4, x4, eq  // eq = none
    8844:	mov	w2, #0x0                   	// #0
    8848:	bl	5450 <mpfr_can_round@plt>
    884c:	cbnz	w0, 87cc <mpc_div@@Base+0xe08>
    8850:	b	86e8 <mpc_div@@Base+0xd24>
    8854:	mov	w27, #0x1                   	// #1
    8858:	b	86a8 <mpc_div@@Base+0xce4>
    885c:	mov	w24, #0x0                   	// #0
    8860:	b	880c <mpc_div@@Base+0xe48>
    8864:	mov	w23, #0xffffffff            	// #-1
    8868:	b	873c <mpc_div@@Base+0xd78>
    886c:	mov	w22, #0xffffffff            	// #-1
    8870:	b	84b4 <mpc_div@@Base+0xaf0>
    8874:	ldr	w1, [sp, #344]
    8878:	mov	x0, x19
    887c:	bl	5120 <mpfr_set_inf@plt>
    8880:	ldr	x0, [sp, #352]
    8884:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    8888:	cmp	x0, x1
    888c:	b.ge	88ac <mpc_div@@Base+0xee8>  // b.tcont
    8890:	mov	x1, #0x2                   	// #2
    8894:	movk	x1, #0x8000, lsl #48
    8898:	cmp	x0, x1
    889c:	b.ne	88a4 <mpc_div@@Base+0xee0>  // b.any
    88a0:	bl	4b00 <mpfr_set_erangeflag@plt>
    88a4:	mov	w23, #0x0                   	// #0
    88a8:	b	88b0 <mpc_div@@Base+0xeec>
    88ac:	ldr	w23, [sp, #344]
    88b0:	ldr	w0, [sp, #104]
    88b4:	cbnz	w0, 88cc <mpc_div@@Base+0xf08>
    88b8:	ldr	w0, [sp, #124]
    88bc:	cmp	w0, #0x0
    88c0:	ldr	w0, [sp, #152]
    88c4:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    88c8:	b.ne	893c <mpc_div@@Base+0xf78>  // b.any
    88cc:	ldr	x1, [sp, #384]
    88d0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    88d4:	add	x19, x19, #0x20
    88d8:	cmp	x1, x0
    88dc:	b.ge	8974 <mpc_div@@Base+0xfb0>  // b.tcont
    88e0:	mov	x0, #0x2                   	// #2
    88e4:	movk	x0, #0x8000, lsl #48
    88e8:	cmp	x1, x0
    88ec:	b.ne	88f4 <mpc_div@@Base+0xf30>  // b.any
    88f0:	bl	4b00 <mpfr_set_erangeflag@plt>
    88f4:	mov	w1, #0x0                   	// #0
    88f8:	b	8978 <mpc_div@@Base+0xfb4>
    88fc:	ldr	w0, [sp, #112]
    8900:	cbnz	w0, 8918 <mpc_div@@Base+0xf54>
    8904:	ldr	w0, [sp, #140]
    8908:	cmp	w0, #0x0
    890c:	ldr	w0, [sp, #132]
    8910:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    8914:	b.ne	8934 <mpc_div@@Base+0xf70>  // b.any
    8918:	ldr	w0, [sp, #344]
    891c:	mov	w1, #0xffffffff            	// #-1
    8920:	cmp	w0, #0x0
    8924:	mov	x0, x19
    8928:	cneg	w23, w1, lt  // lt = tstop
    892c:	cneg	w1, w1, ge  // ge = tcont
    8930:	bl	4d10 <mpfr_set_zero@plt>
    8934:	ldr	w0, [sp, #104]
    8938:	cbnz	w0, 88cc <mpc_div@@Base+0xf08>
    893c:	cbnz	w24, 8954 <mpc_div@@Base+0xf90>
    8940:	ldr	w0, [sp, #140]
    8944:	cmp	w0, #0x0
    8948:	ldr	w0, [sp, #132]
    894c:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    8950:	b.ne	89b0 <mpc_div@@Base+0xfec>  // b.any
    8954:	ldr	w0, [sp, #376]
    8958:	mov	w1, #0xffffffff            	// #-1
    895c:	cmp	w0, #0x0
    8960:	add	x0, x19, #0x20
    8964:	cneg	w22, w1, lt  // lt = tstop
    8968:	cneg	w1, w1, ge  // ge = tcont
    896c:	bl	4d10 <mpfr_set_zero@plt>
    8970:	b	89b0 <mpc_div@@Base+0xfec>
    8974:	ldr	w1, [sp, #376]
    8978:	mov	x0, x19
    897c:	bl	5120 <mpfr_set_inf@plt>
    8980:	ldr	x0, [sp, #384]
    8984:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    8988:	cmp	x0, x1
    898c:	b.ge	89ac <mpc_div@@Base+0xfe8>  // b.tcont
    8990:	mov	x1, #0x2                   	// #2
    8994:	movk	x1, #0x8000, lsl #48
    8998:	cmp	x0, x1
    899c:	b.ne	89a4 <mpc_div@@Base+0xfe0>  // b.any
    89a0:	bl	4b00 <mpfr_set_erangeflag@plt>
    89a4:	mov	w22, #0x0                   	// #0
    89a8:	b	89b0 <mpc_div@@Base+0xfec>
    89ac:	ldr	w22, [sp, #376]
    89b0:	mov	x0, x21
    89b4:	bl	4a10 <mpc_clear@plt>
    89b8:	mov	x0, x28
    89bc:	bl	4d60 <mpfr_clear@plt>
    89c0:	ldr	w0, [sp, #168]
    89c4:	cbz	w0, 89cc <mpc_div@@Base+0x1008>
    89c8:	bl	4990 <mpfr_set_underflow@plt>
    89cc:	ldr	w0, [sp, #172]
    89d0:	cbz	w0, 89d8 <mpc_div@@Base+0x1014>
    89d4:	bl	5490 <mpfr_set_overflow@plt>
    89d8:	cmp	w23, #0x0
    89dc:	mov	w1, #0x2                   	// #2
    89e0:	cset	w0, ne  // ne = any
    89e4:	csel	w0, w0, w1, ge  // ge = tcont
    89e8:	cmp	w22, #0x0
    89ec:	mov	w1, #0x4                   	// #4
    89f0:	csel	w1, w22, w1, eq  // eq = none
    89f4:	mov	w22, #0x8                   	// #8
    89f8:	csel	w22, w1, w22, ge  // ge = tcont
    89fc:	orr	w22, w0, w22
    8a00:	b	7ba8 <mpc_div@@Base+0x1e4>

0000000000008a04 <mpc_div_fr@@Base>:
    8a04:	stp	x29, x30, [sp, #-112]!
    8a08:	mov	x29, sp
    8a0c:	stp	x21, x22, [sp, #32]
    8a10:	mov	x22, x0
    8a14:	str	x25, [sp, #64]
    8a18:	mov	x25, x22
    8a1c:	stp	x19, x20, [sp, #16]
    8a20:	mov	x19, x1
    8a24:	add	x20, sp, #0x50
    8a28:	ldr	x1, [x25], #32
    8a2c:	mov	x0, x20
    8a30:	stp	x23, x24, [sp, #48]
    8a34:	mov	x23, x2
    8a38:	mov	w24, w3
    8a3c:	bl	5440 <mpfr_init2@plt>
    8a40:	and	w3, w24, #0xf
    8a44:	mov	x2, x23
    8a48:	mov	x1, x19
    8a4c:	mov	x0, x20
    8a50:	bl	5150 <mpfr_div@plt>
    8a54:	mov	w21, w0
    8a58:	asr	w3, w24, #4
    8a5c:	mov	x2, x23
    8a60:	add	x1, x19, #0x20
    8a64:	mov	x0, x25
    8a68:	bl	5150 <mpfr_div@plt>
    8a6c:	mov	w19, w0
    8a70:	ldr	w3, [sp, #88]
    8a74:	mov	x1, x20
    8a78:	mov	w2, #0x0                   	// #0
    8a7c:	mov	x0, x22
    8a80:	bl	51d0 <mpfr_set4@plt>
    8a84:	mov	x0, x20
    8a88:	bl	4d60 <mpfr_clear@plt>
    8a8c:	cmp	w21, #0x0
    8a90:	mov	w1, #0x2                   	// #2
    8a94:	cset	w0, ne  // ne = any
    8a98:	csel	w0, w0, w1, ge  // ge = tcont
    8a9c:	cmp	w19, #0x0
    8aa0:	mov	w1, #0x4                   	// #4
    8aa4:	csel	w1, w19, w1, eq  // eq = none
    8aa8:	mov	w19, #0x8                   	// #8
    8aac:	csel	w19, w1, w19, ge  // ge = tcont
    8ab0:	orr	w0, w0, w19
    8ab4:	ldp	x19, x20, [sp, #16]
    8ab8:	ldp	x21, x22, [sp, #32]
    8abc:	ldp	x23, x24, [sp, #48]
    8ac0:	ldr	x25, [sp, #64]
    8ac4:	ldp	x29, x30, [sp], #112
    8ac8:	ret

0000000000008acc <mpc_div_ui@@Base>:
    8acc:	stp	x29, x30, [sp, #-64]!
    8ad0:	mov	x29, sp
    8ad4:	stp	x19, x20, [sp, #16]
    8ad8:	mov	w20, w3
    8adc:	and	w3, w3, #0xf
    8ae0:	stp	x21, x22, [sp, #32]
    8ae4:	mov	x21, x0
    8ae8:	mov	x22, x1
    8aec:	str	x23, [sp, #48]
    8af0:	mov	x23, x2
    8af4:	bl	5550 <mpfr_div_ui@plt>
    8af8:	mov	w19, w0
    8afc:	asr	w3, w20, #4
    8b00:	mov	x2, x23
    8b04:	add	x1, x22, #0x20
    8b08:	add	x0, x21, #0x20
    8b0c:	bl	5550 <mpfr_div_ui@plt>
    8b10:	cmp	w19, #0x0
    8b14:	mov	w2, #0x2                   	// #2
    8b18:	cset	w1, ne  // ne = any
    8b1c:	csel	w1, w1, w2, ge  // ge = tcont
    8b20:	cmp	w0, #0x0
    8b24:	mov	w2, #0x4                   	// #4
    8b28:	csel	w2, w0, w2, eq  // eq = none
    8b2c:	mov	w0, #0x8                   	// #8
    8b30:	csel	w0, w2, w0, ge  // ge = tcont
    8b34:	orr	w0, w1, w0
    8b38:	ldp	x19, x20, [sp, #16]
    8b3c:	ldp	x21, x22, [sp, #32]
    8b40:	ldr	x23, [sp, #48]
    8b44:	ldp	x29, x30, [sp], #64
    8b48:	ret

0000000000008b4c <mpc_exp@@Base>:
    8b4c:	stp	x29, x30, [sp, #-224]!
    8b50:	mov	x29, sp
    8b54:	ldr	x4, [x1, #16]
    8b58:	stp	x19, x20, [sp, #16]
    8b5c:	stp	x21, x22, [sp, #32]
    8b60:	mov	w22, w2
    8b64:	mov	x2, #0x2                   	// #2
    8b68:	stp	x23, x24, [sp, #48]
    8b6c:	movk	x2, #0x8000, lsl #48
    8b70:	mov	x21, x0
    8b74:	stp	x25, x26, [sp, #64]
    8b78:	cmp	x4, x2
    8b7c:	stp	x27, x28, [sp, #80]
    8b80:	ldr	x3, [x1, #48]
    8b84:	b.eq	8bbc <mpc_exp@@Base+0x70>  // b.none
    8b88:	mov	x20, x1
    8b8c:	cmp	x3, x2
    8b90:	b.ne	8c10 <mpc_exp@@Base+0xc4>  // b.any
    8b94:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    8b98:	cmp	x4, x1
    8b9c:	b.ne	8c04 <mpc_exp@@Base+0xb8>  // b.any
    8ba0:	ldr	w1, [x20, #8]
    8ba4:	tbz	w1, #31, 8bec <mpc_exp@@Base+0xa0>
    8ba8:	mov	w3, #0x0                   	// #0
    8bac:	mov	x2, #0x0                   	// #0
    8bb0:	mov	x1, #0x0                   	// #0
    8bb4:	bl	5040 <mpc_set_ui_ui@plt>
    8bb8:	b	8bd0 <mpc_exp@@Base+0x84>
    8bbc:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    8bc0:	cmp	x3, x2
    8bc4:	b.ne	8c04 <mpc_exp@@Base+0xb8>  // b.any
    8bc8:	mov	w2, #0x0                   	// #0
    8bcc:	bl	5580 <mpc_set@plt>
    8bd0:	ldp	x19, x20, [sp, #16]
    8bd4:	ldp	x21, x22, [sp, #32]
    8bd8:	ldp	x23, x24, [sp, #48]
    8bdc:	ldp	x25, x26, [sp, #64]
    8be0:	ldp	x27, x28, [sp, #80]
    8be4:	ldp	x29, x30, [sp], #224
    8be8:	ret
    8bec:	mov	w1, #0x1                   	// #1
    8bf0:	bl	5120 <mpfr_set_inf@plt>
    8bf4:	add	x0, x21, #0x20
    8bf8:	bl	4a40 <mpfr_set_nan@plt>
    8bfc:	mov	w0, #0x0                   	// #0
    8c00:	b	8bd0 <mpc_exp@@Base+0x84>
    8c04:	mov	x0, x21
    8c08:	bl	4a40 <mpfr_set_nan@plt>
    8c0c:	b	8bf4 <mpc_exp@@Base+0xa8>
    8c10:	mov	x26, #0x8000000000000001    	// #-9223372036854775807
    8c14:	add	x23, x0, #0x20
    8c18:	cmp	x3, x26
    8c1c:	b.ne	8c6c <mpc_exp@@Base+0x120>  // b.any
    8c20:	and	w2, w22, #0xf
    8c24:	bl	5230 <mpfr_exp@plt>
    8c28:	ldr	w3, [x20, #40]
    8c2c:	mov	w21, w0
    8c30:	asr	w2, w22, #4
    8c34:	add	x1, x20, #0x20
    8c38:	mov	x0, x23
    8c3c:	bl	51d0 <mpfr_set4@plt>
    8c40:	cmp	w21, #0x0
    8c44:	mov	w1, #0x2                   	// #2
    8c48:	cset	w19, ne  // ne = any
    8c4c:	csel	w19, w19, w1, ge  // ge = tcont
    8c50:	cmp	w0, #0x0
    8c54:	mov	w1, #0x4                   	// #4
    8c58:	csel	w1, w0, w1, eq  // eq = none
    8c5c:	mov	w0, #0x8                   	// #8
    8c60:	csel	w0, w1, w0, ge  // ge = tcont
    8c64:	orr	w0, w0, w19
    8c68:	b	8bd0 <mpc_exp@@Base+0x84>
    8c6c:	cmp	x4, x26
    8c70:	b.ne	8c9c <mpc_exp@@Base+0x150>  // b.any
    8c74:	add	x20, x1, #0x20
    8c78:	and	w2, w22, #0xf
    8c7c:	mov	x1, x20
    8c80:	bl	5050 <mpfr_cos@plt>
    8c84:	asr	w2, w22, #4
    8c88:	mov	w21, w0
    8c8c:	mov	x1, x20
    8c90:	mov	x0, x23
    8c94:	bl	5080 <mpfr_sin@plt>
    8c98:	b	8c40 <mpc_exp@@Base+0xf4>
    8c9c:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    8ca0:	cmp	x4, x1
    8ca4:	b.ne	8de0 <mpc_exp@@Base+0x294>  // b.any
    8ca8:	add	x19, sp, #0x80
    8cac:	mov	x1, #0x2                   	// #2
    8cb0:	mov	x0, x19
    8cb4:	bl	5440 <mpfr_init2@plt>
    8cb8:	ldr	w0, [x20, #8]
    8cbc:	tbz	w0, #31, 8d48 <mpc_exp@@Base+0x1fc>
    8cc0:	mov	w0, #0x1                   	// #1
    8cc4:	str	w0, [sp, #136]
    8cc8:	str	x26, [sp, #144]
    8ccc:	ldr	x1, [x20, #48]
    8cd0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8cd4:	cmp	x1, x0
    8cd8:	b.ne	8d68 <mpc_exp@@Base+0x21c>  // b.any
    8cdc:	ldr	w20, [x20, #8]
    8ce0:	mov	x0, x21
    8ce4:	ldr	w3, [sp, #136]
    8ce8:	mov	x1, x19
    8cec:	mov	w2, #0x0                   	// #0
    8cf0:	bl	51d0 <mpfr_set4@plt>
    8cf4:	mov	w21, w0
    8cf8:	tbz	w20, #31, 8d58 <mpc_exp@@Base+0x20c>
    8cfc:	ldr	w3, [sp, #136]
    8d00:	mov	x1, x19
    8d04:	mov	x0, x23
    8d08:	mov	w2, #0x0                   	// #0
    8d0c:	bl	51d0 <mpfr_set4@plt>
    8d10:	mov	w20, w0
    8d14:	mov	x0, x19
    8d18:	bl	4d60 <mpfr_clear@plt>
    8d1c:	cmp	w21, #0x0
    8d20:	mov	w0, #0x2                   	// #2
    8d24:	cset	w19, ne  // ne = any
    8d28:	mov	w1, #0x4                   	// #4
    8d2c:	csel	w19, w19, w0, ge  // ge = tcont
    8d30:	cmp	w20, #0x0
    8d34:	csel	w1, w20, w1, eq  // eq = none
    8d38:	mov	w0, #0x8                   	// #8
    8d3c:	csel	w20, w1, w0, ge  // ge = tcont
    8d40:	orr	w0, w19, w20
    8d44:	b	8bd0 <mpc_exp@@Base+0x84>
    8d48:	mov	x0, x19
    8d4c:	mov	w1, #0x1                   	// #1
    8d50:	bl	5120 <mpfr_set_inf@plt>
    8d54:	b	8ccc <mpc_exp@@Base+0x180>
    8d58:	mov	x0, x23
    8d5c:	mov	w20, #0x0                   	// #0
    8d60:	bl	4a40 <mpfr_set_nan@plt>
    8d64:	b	8d14 <mpc_exp@@Base+0x1c8>
    8d68:	add	x22, sp, #0xa0
    8d6c:	add	x24, sp, #0xc0
    8d70:	mov	x0, x22
    8d74:	mov	x1, #0x2                   	// #2
    8d78:	bl	5440 <mpfr_init2@plt>
    8d7c:	mov	x0, x24
    8d80:	mov	x1, #0x2                   	// #2
    8d84:	bl	5440 <mpfr_init2@plt>
    8d88:	add	x2, x20, #0x20
    8d8c:	mov	x1, x22
    8d90:	mov	x0, x24
    8d94:	mov	w3, #0x0                   	// #0
    8d98:	bl	5520 <mpfr_sin_cos@plt>
    8d9c:	ldr	w3, [sp, #168]
    8da0:	mov	x1, x19
    8da4:	mov	x0, x21
    8da8:	mov	w2, #0x0                   	// #0
    8dac:	bl	51d0 <mpfr_set4@plt>
    8db0:	mov	w21, w0
    8db4:	ldr	w3, [sp, #200]
    8db8:	mov	x1, x19
    8dbc:	mov	w2, #0x0                   	// #0
    8dc0:	mov	x0, x23
    8dc4:	bl	51d0 <mpfr_set4@plt>
    8dc8:	mov	w20, w0
    8dcc:	mov	x0, x24
    8dd0:	bl	4d60 <mpfr_clear@plt>
    8dd4:	mov	x0, x22
    8dd8:	bl	4d60 <mpfr_clear@plt>
    8ddc:	b	8d14 <mpc_exp@@Base+0x1c8>
    8de0:	cmp	x3, x1
    8de4:	b.ne	8df4 <mpc_exp@@Base+0x2a8>  // b.any
    8de8:	bl	4a40 <mpfr_set_nan@plt>
    8dec:	mov	x0, x23
    8df0:	b	8bf8 <mpc_exp@@Base+0xac>
    8df4:	ldr	x0, [x0]
    8df8:	neg	x3, x3
    8dfc:	ldr	x19, [x21, #32]
    8e00:	add	x27, sp, #0x80
    8e04:	mov	x1, #0x2                   	// #2
    8e08:	add	x25, sp, #0xa0
    8e0c:	cmp	x19, x0
    8e10:	add	x24, sp, #0xc0
    8e14:	csel	x0, x19, x0, ge  // ge = tcont
    8e18:	cmp	x4, #0x0
    8e1c:	csneg	x19, xzr, x4, ge  // ge = tcont
    8e20:	asr	w28, w22, #4
    8e24:	cmp	x3, x19
    8e28:	and	w22, w22, #0xf
    8e2c:	csel	x3, x3, x19, ge  // ge = tcont
    8e30:	add	x19, x3, x0
    8e34:	mov	x0, x27
    8e38:	bl	5440 <mpfr_init2@plt>
    8e3c:	mov	x0, x25
    8e40:	mov	x1, #0x2                   	// #2
    8e44:	bl	5440 <mpfr_init2@plt>
    8e48:	mov	x0, x24
    8e4c:	mov	x1, #0x2                   	// #2
    8e50:	bl	5440 <mpfr_init2@plt>
    8e54:	bl	52f0 <mpfr_underflow_p@plt>
    8e58:	str	w0, [sp, #112]
    8e5c:	bl	54e0 <mpfr_overflow_p@plt>
    8e60:	str	w0, [sp, #116]
    8e64:	cmp	w28, #0x0
    8e68:	cset	x0, eq  // eq = none
    8e6c:	str	x0, [sp, #104]
    8e70:	add	x0, x20, #0x20
    8e74:	str	x0, [sp, #120]
    8e78:	mov	x0, x19
    8e7c:	bl	4d20 <mpc_ceil_log2@plt>
    8e80:	add	x0, x0, #0x5
    8e84:	add	x19, x19, x0
    8e88:	mov	x0, x27
    8e8c:	mov	x1, x19
    8e90:	bl	4c80 <mpfr_set_prec@plt>
    8e94:	mov	x1, x19
    8e98:	mov	x0, x25
    8e9c:	bl	4c80 <mpfr_set_prec@plt>
    8ea0:	mov	x1, x19
    8ea4:	mov	x0, x24
    8ea8:	bl	4c80 <mpfr_set_prec@plt>
    8eac:	bl	4a50 <mpfr_clear_overflow@plt>
    8eb0:	bl	4e20 <mpfr_clear_underflow@plt>
    8eb4:	mov	x1, x20
    8eb8:	mov	w2, #0x0                   	// #0
    8ebc:	mov	x0, x27
    8ec0:	bl	5230 <mpfr_exp@plt>
    8ec4:	ldr	x2, [sp, #120]
    8ec8:	mov	x1, x25
    8ecc:	mov	w3, #0x0                   	// #0
    8ed0:	mov	x0, x24
    8ed4:	bl	5520 <mpfr_sin_cos@plt>
    8ed8:	mov	x2, x27
    8edc:	mov	x1, x25
    8ee0:	mov	w3, #0x0                   	// #0
    8ee4:	mov	x0, x25
    8ee8:	bl	4b70 <mpfr_mul@plt>
    8eec:	bl	54e0 <mpfr_overflow_p@plt>
    8ef0:	cbz	w0, 8f70 <mpc_exp@@Base+0x424>
    8ef4:	mov	x2, x27
    8ef8:	mov	x1, x24
    8efc:	mov	w3, #0x0                   	// #0
    8f00:	mov	x0, x24
    8f04:	bl	4b70 <mpfr_mul@plt>
    8f08:	bl	54e0 <mpfr_overflow_p@plt>
    8f0c:	cbz	w0, 8fa4 <mpc_exp@@Base+0x458>
    8f10:	ldr	w3, [sp, #168]
    8f14:	mov	w2, w22
    8f18:	mov	x1, x25
    8f1c:	mov	x0, x21
    8f20:	bl	51d0 <mpfr_set4@plt>
    8f24:	mov	w20, w0
    8f28:	ldr	w3, [sp, #200]
    8f2c:	mov	w2, w28
    8f30:	mov	x1, x24
    8f34:	mov	x0, x23
    8f38:	bl	51d0 <mpfr_set4@plt>
    8f3c:	mov	w19, w0
    8f40:	bl	54e0 <mpfr_overflow_p@plt>
    8f44:	cbnz	w0, 8fd8 <mpc_exp@@Base+0x48c>
    8f48:	bl	52f0 <mpfr_underflow_p@plt>
    8f4c:	cbz	w0, 8ff8 <mpc_exp@@Base+0x4ac>
    8f50:	mov	w1, w22
    8f54:	mov	x0, x21
    8f58:	bl	50d0 <mpc_fix_zero@plt>
    8f5c:	mov	w20, w0
    8f60:	mov	w1, w28
    8f64:	mov	x0, x23
    8f68:	bl	50d0 <mpc_fix_zero@plt>
    8f6c:	b	8ff4 <mpc_exp@@Base+0x4a8>
    8f70:	ldr	x0, [sp, #144]
    8f74:	cmp	x0, x26
    8f78:	b.eq	8ef4 <mpc_exp@@Base+0x3a8>  // b.none
    8f7c:	cmp	w22, #0x0
    8f80:	sub	x1, x19, #0x2
    8f84:	ldr	x4, [x21]
    8f88:	mov	x0, x25
    8f8c:	mov	w3, #0x1                   	// #1
    8f90:	mov	w2, #0x0                   	// #0
    8f94:	cinc	x4, x4, eq  // eq = none
    8f98:	bl	5450 <mpfr_can_round@plt>
    8f9c:	cbnz	w0, 8ef4 <mpc_exp@@Base+0x3a8>
    8fa0:	b	8e78 <mpc_exp@@Base+0x32c>
    8fa4:	ldr	x0, [sp, #144]
    8fa8:	cmp	x0, x26
    8fac:	b.eq	8f10 <mpc_exp@@Base+0x3c4>  // b.none
    8fb0:	ldr	x4, [x21, #32]
    8fb4:	sub	x1, x19, #0x2
    8fb8:	ldr	x0, [sp, #104]
    8fbc:	mov	w3, #0x1                   	// #1
    8fc0:	mov	w2, #0x0                   	// #0
    8fc4:	add	x4, x0, x4
    8fc8:	mov	x0, x24
    8fcc:	bl	5450 <mpfr_can_round@plt>
    8fd0:	cbz	w0, 8e78 <mpc_exp@@Base+0x32c>
    8fd4:	b	8f10 <mpc_exp@@Base+0x3c4>
    8fd8:	mov	w1, w22
    8fdc:	mov	x0, x21
    8fe0:	bl	4dd0 <mpc_fix_inf@plt>
    8fe4:	mov	w20, w0
    8fe8:	mov	w1, w28
    8fec:	mov	x0, x23
    8ff0:	bl	4dd0 <mpc_fix_inf@plt>
    8ff4:	mov	w19, w0
    8ff8:	mov	x0, x27
    8ffc:	bl	4d60 <mpfr_clear@plt>
    9000:	mov	x0, x25
    9004:	bl	4d60 <mpfr_clear@plt>
    9008:	mov	x0, x24
    900c:	bl	4d60 <mpfr_clear@plt>
    9010:	ldr	w0, [sp, #112]
    9014:	cbz	w0, 901c <mpc_exp@@Base+0x4d0>
    9018:	bl	4990 <mpfr_set_underflow@plt>
    901c:	ldr	w0, [sp, #116]
    9020:	cbz	w0, 9028 <mpc_exp@@Base+0x4dc>
    9024:	bl	5490 <mpfr_set_overflow@plt>
    9028:	cmp	w20, #0x0
    902c:	mov	w1, #0x2                   	// #2
    9030:	cset	w0, ne  // ne = any
    9034:	csel	w0, w0, w1, ge  // ge = tcont
    9038:	cmp	w19, #0x0
    903c:	mov	w1, #0x4                   	// #4
    9040:	csel	w1, w19, w1, eq  // eq = none
    9044:	mov	w19, #0x8                   	// #8
    9048:	csel	w19, w1, w19, ge  // ge = tcont
    904c:	b	8c64 <mpc_exp@@Base+0x118>
    9050:	ldr	x3, [x0, #16]
    9054:	mov	x4, #0x8000000000000003    	// #-9223372036854775805
    9058:	cmp	x3, x4
    905c:	b.gt	9068 <mpc_exp@@Base+0x51c>
    9060:	ldr	x0, [x1]
    9064:	ret
    9068:	ldr	x2, [x1, #16]
    906c:	ldr	x0, [x0]
    9070:	cmp	x2, x4
    9074:	b.le	9064 <mpc_exp@@Base+0x518>
    9078:	ldr	x1, [x1]
    907c:	cmp	x3, x2
    9080:	csel	x4, x3, x2, ge  // ge = tcont
    9084:	sub	x3, x3, x0
    9088:	sub	x2, x2, x1
    908c:	add	x4, x4, #0x1
    9090:	cmp	x2, x3
    9094:	csel	x2, x2, x3, le
    9098:	sub	x0, x4, x2
    909c:	b	9064 <mpc_exp@@Base+0x518>

00000000000090a0 <mpc_fma_naive@@Base>:
    90a0:	stp	x29, x30, [sp, #-256]!
    90a4:	mov	x29, sp
    90a8:	stp	x19, x20, [sp, #16]
    90ac:	mov	x19, x1
    90b0:	mov	x20, x3
    90b4:	stp	x25, x26, [sp, #64]
    90b8:	mov	x26, x0
    90bc:	add	x25, sp, #0x60
    90c0:	ldr	x0, [x2]
    90c4:	stp	x21, x22, [sp, #32]
    90c8:	mov	x21, x2
    90cc:	ldr	x1, [x1]
    90d0:	stp	x23, x24, [sp, #48]
    90d4:	add	x24, sp, #0x80
    90d8:	add	x1, x1, x0
    90dc:	mov	x0, x25
    90e0:	stp	x27, x28, [sp, #80]
    90e4:	mov	w27, w4
    90e8:	add	x28, x2, #0x20
    90ec:	bl	5440 <mpfr_init2@plt>
    90f0:	add	x23, sp, #0xa0
    90f4:	ldr	x1, [x19]
    90f8:	add	x22, sp, #0xc0
    90fc:	ldr	x0, [x21, #32]
    9100:	add	x1, x1, x0
    9104:	mov	x0, x24
    9108:	bl	5440 <mpfr_init2@plt>
    910c:	ldr	x0, [x21]
    9110:	ldr	x1, [x19, #32]
    9114:	add	x1, x1, x0
    9118:	mov	x0, x23
    911c:	bl	5440 <mpfr_init2@plt>
    9120:	ldr	x1, [x19, #32]
    9124:	ldr	x0, [x21, #32]
    9128:	add	x1, x1, x0
    912c:	mov	x0, x22
    9130:	bl	5440 <mpfr_init2@plt>
    9134:	mov	x2, x21
    9138:	mov	x1, x19
    913c:	mov	w3, #0x1                   	// #1
    9140:	mov	x0, x25
    9144:	bl	4b70 <mpfr_mul@plt>
    9148:	mov	x2, x28
    914c:	mov	x1, x19
    9150:	mov	w3, #0x1                   	// #1
    9154:	add	x19, x19, #0x20
    9158:	mov	x0, x24
    915c:	bl	4b70 <mpfr_mul@plt>
    9160:	mov	x2, x21
    9164:	mov	x1, x19
    9168:	mov	w3, #0x1                   	// #1
    916c:	mov	x0, x23
    9170:	bl	4b70 <mpfr_mul@plt>
    9174:	and	w21, w27, #0xf
    9178:	mov	x2, x28
    917c:	mov	w3, #0x1                   	// #1
    9180:	mov	x1, x19
    9184:	mov	x0, x22
    9188:	bl	4b70 <mpfr_mul@plt>
    918c:	add	x19, sp, #0xe0
    9190:	mov	x1, x22
    9194:	mov	x0, x25
    9198:	bl	9050 <mpc_exp@@Base+0x504>
    919c:	mov	x6, x0
    91a0:	mov	x1, x20
    91a4:	mov	x0, x25
    91a8:	bl	9050 <mpc_exp@@Base+0x504>
    91ac:	mov	x5, x0
    91b0:	mov	x1, x20
    91b4:	mov	x0, x22
    91b8:	bl	9050 <mpc_exp@@Base+0x504>
    91bc:	cmp	x5, x0
    91c0:	mov	x28, x0
    91c4:	csel	x0, x5, x0, le
    91c8:	cmp	x6, x0
    91cc:	b.gt	9208 <mpc_fma_naive@@Base+0x168>
    91d0:	mov	x1, x6
    91d4:	mov	x0, x19
    91d8:	bl	5440 <mpfr_init2@plt>
    91dc:	mov	x2, x22
    91e0:	mov	w3, #0x1                   	// #1
    91e4:	mov	x1, x25
    91e8:	mov	x0, x19
    91ec:	bl	4a60 <mpfr_sub@plt>
    91f0:	mov	w3, w21
    91f4:	mov	x2, x20
    91f8:	mov	x1, x19
    91fc:	mov	x0, x26
    9200:	bl	4e60 <mpfr_add@plt>
    9204:	b	9244 <mpc_fma_naive@@Base+0x1a4>
    9208:	cmp	x5, x28
    920c:	b.gt	9334 <mpc_fma_naive@@Base+0x294>
    9210:	mov	x1, x5
    9214:	mov	x0, x19
    9218:	bl	5440 <mpfr_init2@plt>
    921c:	mov	x2, x20
    9220:	mov	x1, x25
    9224:	mov	w3, #0x1                   	// #1
    9228:	mov	x0, x19
    922c:	bl	4e60 <mpfr_add@plt>
    9230:	mov	w3, w21
    9234:	mov	x2, x22
    9238:	mov	x1, x19
    923c:	mov	x0, x26
    9240:	bl	4a60 <mpfr_sub@plt>
    9244:	mov	x1, x23
    9248:	mov	w21, w0
    924c:	mov	x0, x24
    9250:	bl	9050 <mpc_exp@@Base+0x504>
    9254:	mov	x6, x0
    9258:	add	x20, x20, #0x20
    925c:	mov	x1, x20
    9260:	mov	x0, x24
    9264:	add	x26, x26, #0x20
    9268:	asr	w27, w27, #4
    926c:	bl	9050 <mpc_exp@@Base+0x504>
    9270:	mov	x5, x0
    9274:	mov	x1, x20
    9278:	mov	x0, x23
    927c:	bl	9050 <mpc_exp@@Base+0x504>
    9280:	cmp	x5, x0
    9284:	csel	x1, x5, x0, le
    9288:	cmp	x6, x1
    928c:	b.gt	9360 <mpc_fma_naive@@Base+0x2c0>
    9290:	mov	x1, x6
    9294:	mov	x0, x19
    9298:	bl	4c80 <mpfr_set_prec@plt>
    929c:	mov	x2, x23
    92a0:	mov	w3, #0x1                   	// #1
    92a4:	mov	x1, x24
    92a8:	mov	x0, x19
    92ac:	bl	4e60 <mpfr_add@plt>
    92b0:	mov	w3, w27
    92b4:	mov	x2, x20
    92b8:	mov	x1, x19
    92bc:	mov	x0, x26
    92c0:	bl	4e60 <mpfr_add@plt>
    92c4:	mov	w20, w0
    92c8:	mov	x0, x25
    92cc:	bl	4d60 <mpfr_clear@plt>
    92d0:	mov	x0, x24
    92d4:	bl	4d60 <mpfr_clear@plt>
    92d8:	mov	x0, x23
    92dc:	bl	4d60 <mpfr_clear@plt>
    92e0:	mov	x0, x22
    92e4:	bl	4d60 <mpfr_clear@plt>
    92e8:	mov	x0, x19
    92ec:	bl	4d60 <mpfr_clear@plt>
    92f0:	cmp	w21, #0x0
    92f4:	mov	w1, #0x2                   	// #2
    92f8:	cset	w0, ne  // ne = any
    92fc:	csel	w0, w0, w1, ge  // ge = tcont
    9300:	cmp	w20, #0x0
    9304:	mov	w1, #0x4                   	// #4
    9308:	csel	w1, w20, w1, eq  // eq = none
    930c:	mov	w20, #0x8                   	// #8
    9310:	csel	w20, w1, w20, ge  // ge = tcont
    9314:	orr	w0, w0, w20
    9318:	ldp	x19, x20, [sp, #16]
    931c:	ldp	x21, x22, [sp, #32]
    9320:	ldp	x23, x24, [sp, #48]
    9324:	ldp	x25, x26, [sp, #64]
    9328:	ldp	x27, x28, [sp, #80]
    932c:	ldp	x29, x30, [sp], #256
    9330:	ret
    9334:	mov	x1, x28
    9338:	mov	x0, x19
    933c:	bl	5440 <mpfr_init2@plt>
    9340:	mov	x2, x22
    9344:	mov	w3, #0x1                   	// #1
    9348:	mov	x1, x20
    934c:	mov	x0, x19
    9350:	bl	4a60 <mpfr_sub@plt>
    9354:	mov	w3, w21
    9358:	mov	x2, x25
    935c:	b	91f8 <mpc_fma_naive@@Base+0x158>
    9360:	cmp	x5, x0
    9364:	b.gt	9394 <mpc_fma_naive@@Base+0x2f4>
    9368:	mov	x1, x5
    936c:	mov	x0, x19
    9370:	bl	4c80 <mpfr_set_prec@plt>
    9374:	mov	x2, x20
    9378:	mov	w3, #0x1                   	// #1
    937c:	mov	x1, x24
    9380:	mov	x0, x19
    9384:	bl	4e60 <mpfr_add@plt>
    9388:	mov	w3, w27
    938c:	mov	x2, x23
    9390:	b	92b8 <mpc_fma_naive@@Base+0x218>
    9394:	mov	x1, x28
    9398:	mov	x0, x19
    939c:	bl	4c80 <mpfr_set_prec@plt>
    93a0:	mov	x2, x23
    93a4:	mov	w3, #0x1                   	// #1
    93a8:	mov	x1, x20
    93ac:	mov	x0, x19
    93b0:	bl	4e60 <mpfr_add@plt>
    93b4:	mov	w3, w27
    93b8:	mov	x2, x24
    93bc:	b	92b8 <mpc_fma_naive@@Base+0x218>

00000000000093c0 <mpc_fma@@Base>:
    93c0:	stp	x29, x30, [sp, #-208]!
    93c4:	mov	x29, sp
    93c8:	stp	x19, x20, [sp, #16]
    93cc:	stp	x21, x22, [sp, #32]
    93d0:	mov	x21, x0
    93d4:	mov	x22, x1
    93d8:	mov	x0, x1
    93dc:	stp	x23, x24, [sp, #48]
    93e0:	mov	x23, x2
    93e4:	mov	x24, x3
    93e8:	stp	x25, x26, [sp, #64]
    93ec:	mov	w25, w4
    93f0:	stp	x27, x28, [sp, #80]
    93f4:	bl	54d0 <mpfr_number_p@plt>
    93f8:	cbz	w0, 95c4 <mpc_fma@@Base+0x204>
    93fc:	add	x0, x22, #0x20
    9400:	bl	54d0 <mpfr_number_p@plt>
    9404:	cbz	w0, 95c4 <mpc_fma@@Base+0x204>
    9408:	mov	x0, x23
    940c:	bl	54d0 <mpfr_number_p@plt>
    9410:	cbz	w0, 95c4 <mpc_fma@@Base+0x204>
    9414:	add	x0, x23, #0x20
    9418:	bl	54d0 <mpfr_number_p@plt>
    941c:	cbz	w0, 95c4 <mpc_fma@@Base+0x204>
    9420:	mov	x0, x24
    9424:	bl	54d0 <mpfr_number_p@plt>
    9428:	cbz	w0, 95c4 <mpc_fma@@Base+0x204>
    942c:	add	x0, x24, #0x20
    9430:	bl	54d0 <mpfr_number_p@plt>
    9434:	cbz	w0, 95c4 <mpc_fma@@Base+0x204>
    9438:	ldr	x0, [x21]
    943c:	str	x0, [sp, #104]
    9440:	ldr	x26, [x21, #32]
    9444:	add	x28, sp, #0x90
    9448:	bl	4d20 <mpc_ceil_log2@plt>
    944c:	mov	w27, #0x0                   	// #0
    9450:	ldr	x1, [sp, #104]
    9454:	add	x19, x0, x1
    9458:	mov	x0, x26
    945c:	bl	4d20 <mpc_ceil_log2@plt>
    9460:	add	x20, x0, x26
    9464:	add	x19, x19, #0xa
    9468:	add	x20, x20, #0xa
    946c:	mov	x0, x28
    9470:	mov	x2, x20
    9474:	mov	x1, x19
    9478:	bl	53c0 <mpc_init3@plt>
    947c:	cmp	wzr, w25, lsr #4
    9480:	cinc	x0, x26, eq  // eq = none
    9484:	str	x0, [sp, #112]
    9488:	mov	w0, #0x2                   	// #2
    948c:	mov	w26, #0x0                   	// #0
    9490:	str	w0, [sp, #120]
    9494:	and	w0, w25, #0xf
    9498:	str	w0, [sp, #124]
    949c:	mov	x2, x23
    94a0:	mov	x1, x22
    94a4:	mov	x0, x28
    94a8:	mov	w3, #0x11                  	// #17
    94ac:	bl	4ed0 <mpc_mul@plt>
    94b0:	ldr	x6, [sp, #160]
    94b4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    94b8:	cmp	x6, x0
    94bc:	b.ne	94c8 <mpc_fma@@Base+0x108>  // b.any
    94c0:	mov	w19, #0x0                   	// #0
    94c4:	b	95b0 <mpc_fma@@Base+0x1f0>
    94c8:	ldr	x5, [sp, #192]
    94cc:	stp	x5, x6, [sp, #128]
    94d0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    94d4:	cmp	x5, x0
    94d8:	b.eq	94c0 <mpc_fma@@Base+0x100>  // b.none
    94dc:	mov	x1, x28
    94e0:	mov	x2, x24
    94e4:	mov	x0, x28
    94e8:	mov	w3, #0x11                  	// #17
    94ec:	bl	4cd0 <mpc_add@plt>
    94f0:	ldr	x1, [sp, #160]
    94f4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    94f8:	cmp	x1, x0
    94fc:	b.eq	94c0 <mpc_fma@@Base+0x100>  // b.none
    9500:	ldr	x0, [sp, #192]
    9504:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    9508:	cmp	x0, x2
    950c:	b.eq	94c0 <mpc_fma@@Base+0x100>  // b.none
    9510:	ldp	x5, x6, [sp, #128]
    9514:	subs	x6, x6, x1
    9518:	csel	x6, x6, xzr, pl  // pl = nfrst
    951c:	subs	x5, x5, x0
    9520:	csel	x5, x5, xzr, pl  // pl = nfrst
    9524:	add	x6, x6, #0x1
    9528:	add	x5, x5, #0x1
    952c:	cmp	x19, x6
    9530:	b.lt	9600 <mpc_fma@@Base+0x240>  // b.tstop
    9534:	ldr	w0, [sp, #124]
    9538:	sub	x1, x19, x6
    953c:	mov	w3, #0x1                   	// #1
    9540:	mov	w2, #0x0                   	// #0
    9544:	cmp	w0, #0x0
    9548:	stp	x6, x5, [sp, #128]
    954c:	ldr	x0, [sp, #104]
    9550:	cinc	x4, x0, eq  // eq = none
    9554:	mov	x0, x28
    9558:	bl	5450 <mpfr_can_round@plt>
    955c:	mov	w27, w0
    9560:	ldp	x6, x5, [sp, #128]
    9564:	cmp	x20, x5
    9568:	b.lt	9608 <mpc_fma@@Base+0x248>  // b.tstop
    956c:	ldr	x4, [sp, #112]
    9570:	sub	x1, x20, x5
    9574:	add	x0, x28, #0x20
    9578:	mov	w3, #0x1                   	// #1
    957c:	mov	w2, #0x0                   	// #0
    9580:	stp	x5, x6, [sp, #128]
    9584:	bl	5450 <mpfr_can_round@plt>
    9588:	cmp	w27, #0x0
    958c:	mov	w26, w0
    9590:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    9594:	ldp	x5, x6, [sp, #128]
    9598:	b.eq	960c <mpc_fma@@Base+0x24c>  // b.none
    959c:	mov	w2, w25
    95a0:	mov	x1, x28
    95a4:	mov	x0, x21
    95a8:	bl	5580 <mpc_set@plt>
    95ac:	mov	w19, w0
    95b0:	mov	x0, x28
    95b4:	bl	4a10 <mpc_clear@plt>
    95b8:	cmp	w27, #0x0
    95bc:	ccmp	w26, #0x0, #0x4, ne  // ne = any
    95c0:	b.ne	95e0 <mpc_fma@@Base+0x220>  // b.any
    95c4:	mov	w4, w25
    95c8:	mov	x3, x24
    95cc:	mov	x2, x23
    95d0:	mov	x1, x22
    95d4:	mov	x0, x21
    95d8:	bl	5560 <mpc_fma_naive@plt>
    95dc:	mov	w19, w0
    95e0:	mov	w0, w19
    95e4:	ldp	x19, x20, [sp, #16]
    95e8:	ldp	x21, x22, [sp, #32]
    95ec:	ldp	x23, x24, [sp, #48]
    95f0:	ldp	x25, x26, [sp, #64]
    95f4:	ldp	x27, x28, [sp, #80]
    95f8:	ldp	x29, x30, [sp], #208
    95fc:	ret
    9600:	mov	w27, #0x0                   	// #0
    9604:	b	9564 <mpc_fma@@Base+0x1a4>
    9608:	mov	w26, #0x0                   	// #0
    960c:	ldr	w0, [sp, #120]
    9610:	cmp	w0, #0x1
    9614:	b.eq	94c0 <mpc_fma@@Base+0x100>  // b.none
    9618:	cmp	w27, #0x0
    961c:	mov	x0, x19
    9620:	ccmp	x6, #0x1, #0x4, eq  // eq = none
    9624:	add	x19, x19, x6
    9628:	csel	x19, x19, x0, gt
    962c:	cmp	w26, #0x0
    9630:	ccmp	x5, #0x1, #0x4, eq  // eq = none
    9634:	mov	x0, x20
    9638:	add	x20, x20, x5
    963c:	mov	x1, x19
    9640:	csel	x20, x20, x0, gt
    9644:	mov	x0, x28
    9648:	bl	4c80 <mpfr_set_prec@plt>
    964c:	add	x0, x28, #0x20
    9650:	mov	x1, x20
    9654:	bl	4c80 <mpfr_set_prec@plt>
    9658:	mov	w0, #0x1                   	// #1
    965c:	str	w0, [sp, #120]
    9660:	b	949c <mpc_fma@@Base+0xdc>

0000000000009664 <mpc_fr_div@@Base>:
    9664:	stp	x29, x30, [sp, #-128]!
    9668:	mov	x29, sp
    966c:	stp	x19, x20, [sp, #16]
    9670:	mov	x20, x0
    9674:	add	x19, sp, #0x40
    9678:	stp	x21, x22, [sp, #32]
    967c:	mov	x21, x2
    9680:	mov	w22, w3
    9684:	ldp	x2, x3, [x1]
    9688:	stp	x2, x3, [sp, #64]
    968c:	ldp	x0, x1, [x1, #16]
    9690:	str	x23, [sp, #48]
    9694:	add	x23, sp, #0x60
    9698:	stp	x0, x1, [sp, #80]
    969c:	mov	x0, x23
    96a0:	bl	4aa0 <mpfr_init@plt>
    96a4:	mov	w3, w22
    96a8:	mov	x2, x21
    96ac:	mov	x1, x19
    96b0:	mov	w0, #0x1                   	// #1
    96b4:	str	w0, [sp, #104]
    96b8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    96bc:	str	x0, [sp, #112]
    96c0:	mov	x0, x20
    96c4:	bl	5250 <mpc_div@plt>
    96c8:	mov	w19, w0
    96cc:	mov	x0, x23
    96d0:	bl	4d60 <mpfr_clear@plt>
    96d4:	mov	w0, w19
    96d8:	ldp	x19, x20, [sp, #16]
    96dc:	ldp	x21, x22, [sp, #32]
    96e0:	ldr	x23, [sp, #48]
    96e4:	ldp	x29, x30, [sp], #128
    96e8:	ret

00000000000096ec <mpc_fr_sub@@Base>:
    96ec:	stp	x29, x30, [sp, #-48]!
    96f0:	mov	x29, sp
    96f4:	stp	x19, x20, [sp, #16]
    96f8:	mov	w20, w3
    96fc:	and	w3, w3, #0xf
    9700:	stp	x21, x22, [sp, #32]
    9704:	mov	x22, x2
    9708:	mov	x21, x0
    970c:	bl	4a60 <mpfr_sub@plt>
    9710:	mov	w19, w0
    9714:	asr	w2, w20, #4
    9718:	add	x1, x22, #0x20
    971c:	add	x0, x21, #0x20
    9720:	bl	4b80 <mpfr_neg@plt>
    9724:	cmp	w19, #0x0
    9728:	mov	w2, #0x2                   	// #2
    972c:	cset	w1, ne  // ne = any
    9730:	csel	w1, w1, w2, ge  // ge = tcont
    9734:	cmp	w0, #0x0
    9738:	mov	w2, #0x4                   	// #4
    973c:	csel	w2, w0, w2, eq  // eq = none
    9740:	mov	w0, #0x8                   	// #8
    9744:	csel	w0, w2, w0, ge  // ge = tcont
    9748:	orr	w0, w1, w0
    974c:	ldp	x19, x20, [sp, #16]
    9750:	ldp	x21, x22, [sp, #32]
    9754:	ldp	x29, x30, [sp], #48
    9758:	ret

000000000000975c <mpc_get_prec2@@Base>:
    975c:	ldr	x3, [x2]
    9760:	str	x3, [x0]
    9764:	ldr	x0, [x2, #32]
    9768:	str	x0, [x1]
    976c:	ret

0000000000009770 <mpc_get_prec@@Base>:
    9770:	ldr	x1, [x0]
    9774:	ldr	x0, [x0, #32]
    9778:	cmp	x0, x1
    977c:	csel	x0, x1, xzr, eq  // eq = none
    9780:	ret

0000000000009784 <mpc_get_version@@Base>:
    9784:	adrp	x0, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9788:	add	x0, x0, #0x691
    978c:	ret
    9790:	stp	x29, x30, [sp, #-80]!
    9794:	mov	x29, sp
    9798:	stp	x23, x24, [sp, #48]
    979c:	mov	x23, x2
    97a0:	ldr	x2, [x2, #16]
    97a4:	stp	x19, x20, [sp, #16]
    97a8:	stp	x21, x22, [sp, #32]
    97ac:	mov	w22, w0
    97b0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    97b4:	cmp	x2, x0
    97b8:	b.ne	9800 <mpc_get_version@@Base+0x7c>  // b.any
    97bc:	mov	x0, #0x3                   	// #3
    97c0:	bl	4bf0 <mpc_alloc_str@plt>
    97c4:	mov	x19, x0
    97c8:	ldr	w0, [x23, #8]
    97cc:	mov	w1, #0x2b                  	// #43
    97d0:	cmp	w0, #0x0
    97d4:	mov	w0, #0x2d                  	// #45
    97d8:	csel	w0, w0, w1, lt  // lt = tstop
    97dc:	strb	w0, [x19]
    97e0:	mov	w0, #0x30                  	// #48
    97e4:	sturh	w0, [x19, #1]
    97e8:	mov	x0, x19
    97ec:	ldp	x19, x20, [sp, #16]
    97f0:	ldp	x21, x22, [sp, #32]
    97f4:	ldp	x23, x24, [sp, #48]
    97f8:	ldp	x29, x30, [sp], #80
    97fc:	ret
    9800:	mov	w5, w3
    9804:	mov	x4, x23
    9808:	mov	x3, x1
    980c:	mov	w2, w22
    9810:	add	x1, sp, #0x48
    9814:	mov	x0, #0x0                   	// #0
    9818:	bl	50c0 <mpfr_get_str@plt>
    981c:	mov	x20, x0
    9820:	cbnz	x0, 9854 <mpc_get_version@@Base+0xd0>
    9824:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    9828:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    982c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9830:	add	x4, x4, #0x697
    9834:	ldr	x0, [x0, #4008]
    9838:	add	x2, x2, #0x6a4
    983c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9840:	add	x1, x1, #0x5f3
    9844:	mov	w3, #0xc8                  	// #200
    9848:	ldr	x0, [x0]
    984c:	bl	55a0 <fprintf@plt>
    9850:	bl	5000 <abort@plt>
    9854:	mov	x0, x23
    9858:	ldr	x21, [sp, #72]
    985c:	bl	54d0 <mpfr_number_p@plt>
    9860:	mov	w19, w0
    9864:	mov	x0, x20
    9868:	bl	4a00 <strlen@plt>
    986c:	mov	x2, x0
    9870:	cbnz	w19, 9894 <mpc_get_version@@Base+0x110>
    9874:	add	x0, x0, #0x1
    9878:	bl	4bf0 <mpc_alloc_str@plt>
    987c:	mov	x1, x20
    9880:	mov	x19, x0
    9884:	bl	5340 <strcpy@plt>
    9888:	mov	x0, x20
    988c:	bl	52e0 <mpfr_free_str@plt>
    9890:	b	97e8 <mpc_get_version@@Base+0x64>
    9894:	ldrb	w0, [x20]
    9898:	sub	x21, x21, #0x1
    989c:	cmp	w0, #0x2d
    98a0:	cset	w23, eq  // eq = none
    98a4:	cmp	w0, #0x2b
    98a8:	csinc	w23, w23, wzr, ne  // ne = any
    98ac:	cmp	w22, #0x10
    98b0:	b.ne	98b8 <mpc_get_version@@Base+0x134>  // b.any
    98b4:	lsl	x21, x21, #2
    98b8:	cmp	x21, #0x0
    98bc:	cbnz	x21, 993c <mpc_get_version@@Base+0x1b8>
    98c0:	add	x0, x2, #0x2
    98c4:	bl	4bf0 <mpc_alloc_str@plt>
    98c8:	mov	x19, x0
    98cc:	ldrb	w0, [x20]
    98d0:	strb	w0, [x19]
    98d4:	cbnz	w23, 9980 <mpc_get_version@@Base+0x1fc>
    98d8:	add	x24, x20, #0x1
    98dc:	add	x23, x19, #0x1
    98e0:	bl	4c70 <localeconv@plt>
    98e4:	ldr	x0, [x0]
    98e8:	mov	x1, x24
    98ec:	ldrb	w0, [x0]
    98f0:	strb	w0, [x23]
    98f4:	mov	x0, x19
    98f8:	strb	wzr, [x23, #1]
    98fc:	bl	4de0 <strcat@plt>
    9900:	cbz	x21, 9888 <mpc_get_version@@Base+0x104>
    9904:	mov	x0, x20
    9908:	bl	4a00 <strlen@plt>
    990c:	add	x2, x0, #0x1
    9910:	cmp	w22, #0xa
    9914:	add	x1, x19, x2
    9918:	add	x0, x1, #0x1
    991c:	b.eq	9994 <mpc_get_version@@Base+0x210>  // b.none
    9920:	cmp	w22, #0x10
    9924:	b.eq	9930 <mpc_get_version@@Base+0x1ac>  // b.none
    9928:	cmp	w22, #0x2
    992c:	b.ne	99b4 <mpc_get_version@@Base+0x230>  // b.any
    9930:	mov	w2, #0x70                  	// #112
    9934:	strb	w2, [x1]
    9938:	b	999c <mpc_get_version@@Base+0x218>
    993c:	add	x0, x2, #0x5
    9940:	b.ge	9970 <mpc_get_version@@Base+0x1ec>  // b.tcont
    9944:	cmn	x21, #0xa
    9948:	b.ge	9978 <mpc_get_version@@Base+0x1f4>  // b.tcont
    994c:	mov	x1, #0xfffffffffffffff6    	// #-10
    9950:	add	x0, x2, #0x6
    9954:	sdiv	x1, x21, x1
    9958:	mov	x2, #0xa                   	// #10
    995c:	cmp	x1, #0x9
    9960:	b.le	98c4 <mpc_get_version@@Base+0x140>
    9964:	udiv	x1, x1, x2
    9968:	add	x0, x0, #0x1
    996c:	b	995c <mpc_get_version@@Base+0x1d8>
    9970:	mov	x1, x21
    9974:	b	9958 <mpc_get_version@@Base+0x1d4>
    9978:	neg	x1, x21
    997c:	b	9958 <mpc_get_version@@Base+0x1d4>
    9980:	ldrb	w0, [x20, #1]
    9984:	add	x24, x20, #0x2
    9988:	add	x23, x19, #0x2
    998c:	strb	w0, [x19, #1]
    9990:	b	98e0 <mpc_get_version@@Base+0x15c>
    9994:	mov	w3, #0x65                  	// #101
    9998:	strb	w3, [x19, x2]
    999c:	strb	wzr, [x1, #1]
    99a0:	mov	x2, x21
    99a4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    99a8:	add	x1, x1, #0x6ac
    99ac:	bl	4b30 <sprintf@plt>
    99b0:	b	9888 <mpc_get_version@@Base+0x104>
    99b4:	mov	w2, #0x40                  	// #64
    99b8:	b	9934 <mpc_get_version@@Base+0x1b0>

00000000000099bc <mpc_get_dc@@Base>:
    99bc:	stp	x29, x30, [sp, #-48]!
    99c0:	mov	x29, sp
    99c4:	stp	x19, x20, [sp, #16]
    99c8:	mov	x19, x0
    99cc:	mov	w20, w1
    99d0:	add	x0, x0, #0x20
    99d4:	asr	w1, w1, #4
    99d8:	str	d8, [sp, #32]
    99dc:	bl	4b50 <mpfr_get_d@plt>
    99e0:	fmov	d8, d0
    99e4:	and	w1, w20, #0xf
    99e8:	mov	x0, x19
    99ec:	bl	4b50 <mpfr_get_d@plt>
    99f0:	movi	d1, #0x0
    99f4:	ldp	x19, x20, [sp, #16]
    99f8:	fmadd	d0, d8, d1, d0
    99fc:	fmov	d1, d8
    9a00:	ldr	d8, [sp, #32]
    9a04:	ldp	x29, x30, [sp], #48
    9a08:	ret

0000000000009a0c <mpc_get_ldc@@Base>:
    9a0c:	stp	x29, x30, [sp, #-64]!
    9a10:	mov	x29, sp
    9a14:	stp	x19, x20, [sp, #16]
    9a18:	mov	x19, x0
    9a1c:	mov	w20, w1
    9a20:	add	x0, x0, #0x20
    9a24:	asr	w1, w1, #4
    9a28:	bl	5110 <mpfr_get_ld@plt>
    9a2c:	str	q0, [sp, #32]
    9a30:	and	w1, w20, #0xf
    9a34:	mov	x0, x19
    9a38:	bl	5110 <mpfr_get_ld@plt>
    9a3c:	str	q0, [sp, #48]
    9a40:	movi	v1.2d, #0x0
    9a44:	ldr	q2, [sp, #32]
    9a48:	mov	v0.16b, v2.16b
    9a4c:	bl	12d48 <mpc_ui_ui_sub@@Base+0xbac>
    9a50:	ldr	q4, [sp, #48]
    9a54:	mov	v1.16b, v4.16b
    9a58:	bl	12220 <mpc_ui_ui_sub@@Base+0x84>
    9a5c:	ldr	q2, [sp, #32]
    9a60:	ldp	x19, x20, [sp, #16]
    9a64:	mov	v1.16b, v2.16b
    9a68:	ldp	x29, x30, [sp], #64
    9a6c:	ret

0000000000009a70 <mpc_get_str@@Base>:
    9a70:	stp	x29, x30, [sp, #-64]!
    9a74:	mov	x29, sp
    9a78:	stp	x19, x20, [sp, #16]
    9a7c:	mov	w20, w3
    9a80:	sub	w3, w0, #0x2
    9a84:	stp	x21, x22, [sp, #32]
    9a88:	cmp	w3, #0x22
    9a8c:	str	x23, [sp, #48]
    9a90:	b.hi	9b88 <mpc_get_str@@Base+0x118>  // b.pmore
    9a94:	mov	w19, w0
    9a98:	and	w3, w20, #0xf
    9a9c:	mov	x22, x1
    9aa0:	mov	x23, x2
    9aa4:	bl	9790 <mpc_get_version@@Base+0xc>
    9aa8:	mov	x21, x0
    9aac:	asr	w3, w20, #4
    9ab0:	add	x2, x23, #0x20
    9ab4:	mov	x1, x22
    9ab8:	mov	w0, w19
    9abc:	bl	9790 <mpc_get_version@@Base+0xc>
    9ac0:	mov	x20, x0
    9ac4:	mov	x0, x21
    9ac8:	bl	4a00 <strlen@plt>
    9acc:	mov	x19, x0
    9ad0:	mov	x0, x20
    9ad4:	bl	4a00 <strlen@plt>
    9ad8:	add	x0, x19, x0
    9adc:	add	x0, x0, #0x4
    9ae0:	bl	4bf0 <mpc_alloc_str@plt>
    9ae4:	mov	x19, x0
    9ae8:	cbnz	x0, 9b1c <mpc_get_str@@Base+0xac>
    9aec:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    9af0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9af4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9af8:	add	x4, x4, #0x6b1
    9afc:	ldr	x0, [x0, #4008]
    9b00:	add	x2, x2, #0x6a4
    9b04:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9b08:	add	x1, x1, #0x5f3
    9b0c:	mov	w3, #0xe0                  	// #224
    9b10:	ldr	x0, [x0]
    9b14:	bl	55a0 <fprintf@plt>
    9b18:	bl	5000 <abort@plt>
    9b1c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9b20:	add	x1, x1, #0x6c5
    9b24:	bl	5340 <strcpy@plt>
    9b28:	mov	x1, x21
    9b2c:	mov	x0, x19
    9b30:	bl	4de0 <strcat@plt>
    9b34:	mov	x0, x19
    9b38:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9b3c:	add	x1, x1, #0x6c7
    9b40:	bl	4de0 <strcat@plt>
    9b44:	mov	x1, x20
    9b48:	mov	x0, x19
    9b4c:	bl	4de0 <strcat@plt>
    9b50:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9b54:	add	x1, x1, #0x8a0
    9b58:	mov	x0, x19
    9b5c:	bl	4de0 <strcat@plt>
    9b60:	mov	x0, x21
    9b64:	bl	4ff0 <mpc_free_str@plt>
    9b68:	mov	x0, x20
    9b6c:	bl	4ff0 <mpc_free_str@plt>
    9b70:	mov	x0, x19
    9b74:	ldp	x19, x20, [sp, #16]
    9b78:	ldp	x21, x22, [sp, #32]
    9b7c:	ldr	x23, [sp, #48]
    9b80:	ldp	x29, x30, [sp], #64
    9b84:	ret
    9b88:	mov	x19, #0x0                   	// #0
    9b8c:	b	9b70 <mpc_get_str@@Base+0x100>

0000000000009b90 <mpc_imag@@Base>:
    9b90:	ldr	w3, [x1, #40]
    9b94:	add	x1, x1, #0x20
    9b98:	b	51d0 <mpfr_set4@plt>

0000000000009b9c <mpc_init2@@Base>:
    9b9c:	stp	x29, x30, [sp, #-32]!
    9ba0:	mov	x29, sp
    9ba4:	stp	x19, x20, [sp, #16]
    9ba8:	mov	x19, x0
    9bac:	mov	x20, x1
    9bb0:	bl	5440 <mpfr_init2@plt>
    9bb4:	mov	x1, x20
    9bb8:	add	x0, x19, #0x20
    9bbc:	ldp	x19, x20, [sp, #16]
    9bc0:	ldp	x29, x30, [sp], #32
    9bc4:	b	5440 <mpfr_init2@plt>

0000000000009bc8 <mpc_init3@@Base>:
    9bc8:	stp	x29, x30, [sp, #-32]!
    9bcc:	mov	x29, sp
    9bd0:	stp	x19, x20, [sp, #16]
    9bd4:	mov	x20, x2
    9bd8:	mov	x19, x0
    9bdc:	bl	5440 <mpfr_init2@plt>
    9be0:	mov	x1, x20
    9be4:	add	x0, x19, #0x20
    9be8:	ldp	x19, x20, [sp, #16]
    9bec:	ldp	x29, x30, [sp], #32
    9bf0:	b	5440 <mpfr_init2@plt>
    9bf4:	stp	x29, x30, [sp, #-48]!
    9bf8:	mov	x29, sp
    9bfc:	stp	x19, x20, [sp, #16]
    9c00:	mov	x20, x0
    9c04:	str	x21, [sp, #32]
    9c08:	bl	4f20 <getc@plt>
    9c0c:	mov	w19, w0
    9c10:	mov	x21, #0x0                   	// #0
    9c14:	cmn	w19, #0x1
    9c18:	b.eq	9c3c <mpc_init3@@Base+0x74>  // b.none
    9c1c:	bl	5170 <__ctype_b_loc@plt>
    9c20:	ldr	x0, [x0]
    9c24:	ubfiz	x1, x19, #1, #8
    9c28:	ldrh	w0, [x0, x1]
    9c2c:	tbnz	w0, #13, 9c50 <mpc_init3@@Base+0x88>
    9c30:	mov	x1, x20
    9c34:	mov	w0, w19
    9c38:	bl	5210 <ungetc@plt>
    9c3c:	mov	x0, x21
    9c40:	ldp	x19, x20, [sp, #16]
    9c44:	ldr	x21, [sp, #32]
    9c48:	ldp	x29, x30, [sp], #48
    9c4c:	ret
    9c50:	mov	x0, x20
    9c54:	add	x21, x21, #0x1
    9c58:	bl	4f20 <getc@plt>
    9c5c:	mov	w19, w0
    9c60:	b	9c14 <mpc_init3@@Base+0x4c>
    9c64:	stp	x29, x30, [sp, #-96]!
    9c68:	mov	x29, sp
    9c6c:	stp	x19, x20, [sp, #16]
    9c70:	stp	x21, x22, [sp, #32]
    9c74:	mov	x21, x0
    9c78:	mov	x0, #0x64                  	// #100
    9c7c:	stp	x23, x24, [sp, #48]
    9c80:	mov	x22, #0x0                   	// #0
    9c84:	mov	x24, #0x64                  	// #100
    9c88:	stp	x25, x26, [sp, #64]
    9c8c:	str	x27, [sp, #80]
    9c90:	bl	4bf0 <mpc_alloc_str@plt>
    9c94:	mov	x19, x0
    9c98:	mov	x0, x21
    9c9c:	bl	4f20 <getc@plt>
    9ca0:	mov	w20, w0
    9ca4:	cmn	w20, #0x1
    9ca8:	add	x23, x22, #0x1
    9cac:	cset	w0, ne  // ne = any
    9cb0:	cmp	w20, #0xa
    9cb4:	csel	w25, w0, wzr, ne  // ne = any
    9cb8:	cbz	w25, 9d90 <mpc_init3@@Base+0x1c8>
    9cbc:	bl	5170 <__ctype_b_loc@plt>
    9cc0:	ldr	x0, [x0]
    9cc4:	ubfiz	x1, x20, #1, #8
    9cc8:	and	w2, w20, #0xff
    9ccc:	ldrh	w0, [x0, x1]
    9cd0:	tbnz	w0, #13, 9ce0 <mpc_init3@@Base+0x118>
    9cd4:	sub	w0, w20, #0x28
    9cd8:	cmp	w0, #0x1
    9cdc:	b.hi	9d54 <mpc_init3@@Base+0x18c>  // b.pmore
    9ce0:	mov	x0, x19
    9ce4:	mov	x2, x23
    9ce8:	mov	x1, x24
    9cec:	bl	5330 <mpc_realloc_str@plt>
    9cf0:	strb	wzr, [x0, x22]
    9cf4:	mov	x19, x0
    9cf8:	cbz	x22, 9f6c <mpc_init3@@Base+0x3a4>
    9cfc:	cmp	w20, #0x28
    9d00:	b.ne	9fa0 <mpc_init3@@Base+0x3d8>  // b.any
    9d04:	cmp	x22, #0x3
    9d08:	b.ne	9d98 <mpc_init3@@Base+0x1d0>  // b.any
    9d0c:	bl	4c50 <__ctype_tolower_loc@plt>
    9d10:	ldrb	w1, [x19]
    9d14:	ldr	x0, [x0]
    9d18:	ldr	w1, [x0, x1, lsl #2]
    9d1c:	cmp	w1, #0x6e
    9d20:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9d24:	ldrb	w1, [x19, #1]
    9d28:	ldr	w1, [x0, x1, lsl #2]
    9d2c:	cmp	w1, #0x61
    9d30:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9d34:	ldrb	w1, [x19, #2]
    9d38:	ldr	w0, [x0, x1, lsl #2]
    9d3c:	cmp	w0, #0x6e
    9d40:	b.eq	9df0 <mpc_init3@@Base+0x228>  // b.none
    9d44:	mov	x1, x21
    9d48:	mov	w0, #0x28                  	// #40
    9d4c:	bl	5210 <ungetc@plt>
    9d50:	b	9f6c <mpc_init3@@Base+0x3a4>
    9d54:	strb	w2, [x19, x22]
    9d58:	cmp	x24, x23
    9d5c:	b.ne	9d7c <mpc_init3@@Base+0x1b4>  // b.any
    9d60:	lsl	x20, x24, #1
    9d64:	mov	x1, x24
    9d68:	mov	x0, x19
    9d6c:	mov	x2, x20
    9d70:	mov	x24, x20
    9d74:	bl	5330 <mpc_realloc_str@plt>
    9d78:	mov	x19, x0
    9d7c:	mov	x0, x21
    9d80:	mov	x22, x23
    9d84:	bl	4f20 <getc@plt>
    9d88:	mov	w20, w0
    9d8c:	b	9ca4 <mpc_init3@@Base+0xdc>
    9d90:	mov	w25, w0
    9d94:	b	9ce0 <mpc_init3@@Base+0x118>
    9d98:	cmp	x22, #0x5
    9d9c:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9da0:	ldrb	w0, [x0]
    9da4:	cmp	w0, #0x40
    9da8:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9dac:	bl	4c50 <__ctype_tolower_loc@plt>
    9db0:	ldrb	w1, [x19, #1]
    9db4:	ldr	x0, [x0]
    9db8:	ldr	w1, [x0, x1, lsl #2]
    9dbc:	cmp	w1, #0x6e
    9dc0:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9dc4:	ldrb	w1, [x19, #2]
    9dc8:	ldr	w1, [x0, x1, lsl #2]
    9dcc:	cmp	w1, #0x61
    9dd0:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9dd4:	ldrb	w1, [x19, #3]
    9dd8:	ldr	w0, [x0, x1, lsl #2]
    9ddc:	cmp	w0, #0x6e
    9de0:	b.ne	9d44 <mpc_init3@@Base+0x17c>  // b.any
    9de4:	ldrb	w0, [x19, #4]
    9de8:	cmp	w0, #0x40
    9dec:	b	9d40 <mpc_init3@@Base+0x178>
    9df0:	mov	x0, #0x64                  	// #100
    9df4:	bl	4bf0 <mpc_alloc_str@plt>
    9df8:	mov	x24, x0
    9dfc:	mov	x0, x21
    9e00:	bl	4f20 <getc@plt>
    9e04:	mov	w20, w0
    9e08:	bl	5170 <__ctype_b_loc@plt>
    9e0c:	mov	x26, x0
    9e10:	mov	x27, #0x64                  	// #100
    9e14:	mov	x25, #0x0                   	// #0
    9e18:	ldr	x2, [x26]
    9e1c:	ubfiz	x0, x20, #1, #8
    9e20:	and	w1, w20, #0xff
    9e24:	ldrh	w0, [x2, x0]
    9e28:	add	x2, x25, #0x1
    9e2c:	tbnz	w0, #3, 9edc <mpc_init3@@Base+0x314>
    9e30:	cmp	w20, #0x5f
    9e34:	b.eq	9edc <mpc_init3@@Base+0x314>  // b.none
    9e38:	mov	x0, x24
    9e3c:	mov	x1, x27
    9e40:	bl	5330 <mpc_realloc_str@plt>
    9e44:	strb	wzr, [x0, x25]
    9e48:	mov	x24, x0
    9e4c:	cmn	w20, #0x1
    9e50:	b.eq	9e60 <mpc_init3@@Base+0x298>  // b.none
    9e54:	mov	x1, x21
    9e58:	mov	w0, w20
    9e5c:	bl	5210 <ungetc@plt>
    9e60:	mov	x0, x24
    9e64:	bl	4a00 <strlen@plt>
    9e68:	add	x20, x22, x0
    9e6c:	add	x25, x20, #0x1
    9e70:	cmp	x25, x23
    9e74:	b.cc	9e94 <mpc_init3@@Base+0x2cc>  // b.lo, b.ul, b.last
    9e78:	add	x26, x20, #0x2
    9e7c:	mov	x1, x23
    9e80:	mov	x0, x19
    9e84:	mov	x2, x26
    9e88:	mov	x23, x26
    9e8c:	bl	5330 <mpc_realloc_str@plt>
    9e90:	mov	x19, x0
    9e94:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9e98:	mov	x2, x24
    9e9c:	add	x1, x1, #0x6c9
    9ea0:	add	x0, x19, x22
    9ea4:	bl	4b30 <sprintf@plt>
    9ea8:	tbz	w0, #31, 9f14 <mpc_init3@@Base+0x34c>
    9eac:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9eb0:	add	x4, x4, #0x6cd
    9eb4:	mov	w3, #0x88                  	// #136
    9eb8:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    9ebc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9ec0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9ec4:	add	x2, x2, #0x6d6
    9ec8:	ldr	x0, [x0, #4008]
    9ecc:	add	x1, x1, #0x5f3
    9ed0:	ldr	x0, [x0]
    9ed4:	bl	55a0 <fprintf@plt>
    9ed8:	bl	5000 <abort@plt>
    9edc:	strb	w1, [x24, x25]
    9ee0:	cmp	x2, x27
    9ee4:	mov	x25, x2
    9ee8:	b.ne	9f04 <mpc_init3@@Base+0x33c>  // b.any
    9eec:	lsl	x27, x2, #1
    9ef0:	mov	x0, x24
    9ef4:	mov	x2, x27
    9ef8:	mov	x1, x25
    9efc:	bl	5330 <mpc_realloc_str@plt>
    9f00:	mov	x24, x0
    9f04:	mov	x0, x21
    9f08:	bl	4f20 <getc@plt>
    9f0c:	mov	w20, w0
    9f10:	b	9e18 <mpc_init3@@Base+0x250>
    9f14:	add	x0, x22, w0, sxtw
    9f18:	cmp	x0, x25
    9f1c:	b.eq	9f30 <mpc_init3@@Base+0x368>  // b.none
    9f20:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    9f24:	mov	w3, #0x8a                  	// #138
    9f28:	add	x4, x4, #0x6e0
    9f2c:	b	9eb8 <mpc_init3@@Base+0x2f0>
    9f30:	mov	x0, x21
    9f34:	bl	4f20 <getc@plt>
    9f38:	mov	w22, w0
    9f3c:	cmp	w0, #0x29
    9f40:	b.ne	9f8c <mpc_init3@@Base+0x3c4>  // b.any
    9f44:	add	x2, x20, #0x3
    9f48:	mov	x0, x19
    9f4c:	mov	x1, x23
    9f50:	bl	5330 <mpc_realloc_str@plt>
    9f54:	add	x20, x0, x20
    9f58:	mov	x19, x0
    9f5c:	strb	w22, [x0, x25]
    9f60:	strb	wzr, [x20, #2]
    9f64:	mov	x0, x24
    9f68:	bl	4ff0 <mpc_free_str@plt>
    9f6c:	mov	x0, x19
    9f70:	ldp	x19, x20, [sp, #16]
    9f74:	ldp	x21, x22, [sp, #32]
    9f78:	ldp	x23, x24, [sp, #48]
    9f7c:	ldp	x25, x26, [sp, #64]
    9f80:	ldr	x27, [sp, #80]
    9f84:	ldp	x29, x30, [sp], #96
    9f88:	ret
    9f8c:	cmn	w0, #0x1
    9f90:	b.eq	9f64 <mpc_init3@@Base+0x39c>  // b.none
    9f94:	mov	x1, x21
    9f98:	bl	5210 <ungetc@plt>
    9f9c:	b	9f64 <mpc_init3@@Base+0x39c>
    9fa0:	cbz	w25, 9f6c <mpc_init3@@Base+0x3a4>
    9fa4:	mov	x1, x21
    9fa8:	mov	w0, w20
    9fac:	b	9d4c <mpc_init3@@Base+0x184>

0000000000009fb0 <mpc_inp_str@@Base>:
    9fb0:	stp	x29, x30, [sp, #-112]!
    9fb4:	mov	x29, sp
    9fb8:	stp	x19, x20, [sp, #16]
    9fbc:	stp	x21, x22, [sp, #32]
    9fc0:	mov	x21, x0
    9fc4:	stp	x23, x24, [sp, #48]
    9fc8:	mov	x23, x2
    9fcc:	stp	x25, x26, [sp, #64]
    9fd0:	stp	x27, x28, [sp, #80]
    9fd4:	stp	w3, w4, [sp, #104]
    9fd8:	cbnz	x1, a07c <mpc_inp_str@@Base+0xcc>
    9fdc:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    9fe0:	ldr	x0, [x0, #4040]
    9fe4:	ldr	x19, [x0]
    9fe8:	mov	x0, x19
    9fec:	bl	9bf4 <mpc_init3@@Base+0x2c>
    9ff0:	mov	x28, x0
    9ff4:	mov	x0, x19
    9ff8:	bl	4f20 <getc@plt>
    9ffc:	cmn	w0, #0x1
    a000:	b.eq	a1f8 <mpc_inp_str@@Base+0x248>  // b.none
    a004:	cmp	w0, #0x28
    a008:	b.ne	a1d8 <mpc_inp_str@@Base+0x228>  // b.any
    a00c:	mov	x0, x19
    a010:	bl	9bf4 <mpc_init3@@Base+0x2c>
    a014:	mov	x28, x0
    a018:	mov	x0, x19
    a01c:	bl	9c64 <mpc_init3@@Base+0x9c>
    a020:	mov	x22, x0
    a024:	bl	4a00 <strlen@plt>
    a028:	add	x20, x0, #0x1
    a02c:	mov	x0, x19
    a030:	bl	4f20 <getc@plt>
    a034:	mov	w24, w0
    a038:	bl	5170 <__ctype_b_loc@plt>
    a03c:	ldr	x0, [x0]
    a040:	ldrh	w0, [x0, w24, sxtw #1]
    a044:	tbnz	w0, #13, a084 <mpc_inp_str@@Base+0xd4>
    a048:	cmn	w24, #0x1
    a04c:	b.eq	a05c <mpc_inp_str@@Base+0xac>  // b.none
    a050:	mov	x1, x19
    a054:	mov	w0, w24
    a058:	bl	5210 <ungetc@plt>
    a05c:	mov	x0, x22
    a060:	bl	4ff0 <mpc_free_str@plt>
    a064:	mov	x0, x21
    a068:	bl	4a40 <mpfr_set_nan@plt>
    a06c:	add	x0, x21, #0x20
    a070:	mov	w19, #0xffffffff            	// #-1
    a074:	bl	4a40 <mpfr_set_nan@plt>
    a078:	b	a198 <mpc_inp_str@@Base+0x1e8>
    a07c:	mov	x19, x1
    a080:	b	9fe8 <mpc_inp_str@@Base+0x38>
    a084:	mov	x1, x19
    a088:	mov	w0, w24
    a08c:	bl	5210 <ungetc@plt>
    a090:	mov	x0, x19
    a094:	bl	9bf4 <mpc_init3@@Base+0x2c>
    a098:	add	x28, x28, x0
    a09c:	mov	x0, x19
    a0a0:	bl	9c64 <mpc_init3@@Base+0x9c>
    a0a4:	mov	x24, x0
    a0a8:	bl	4a00 <strlen@plt>
    a0ac:	add	x20, x20, x0
    a0b0:	add	x27, x20, #0x2
    a0b4:	mov	x0, x27
    a0b8:	bl	4bf0 <mpc_alloc_str@plt>
    a0bc:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    a0c0:	mov	x25, x0
    a0c4:	mov	x3, x24
    a0c8:	mov	x2, x22
    a0cc:	add	x1, x1, #0x6eb
    a0d0:	bl	4b30 <sprintf@plt>
    a0d4:	tbz	w0, #31, a108 <mpc_inp_str@@Base+0x158>
    a0d8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    a0dc:	add	x4, x4, #0x6cd
    a0e0:	mov	w3, #0xca                  	// #202
    a0e4:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    a0e8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    a0ec:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    a0f0:	add	x2, x2, #0x6d6
    a0f4:	ldr	x0, [x0, #4008]
    a0f8:	add	x1, x1, #0x5f3
    a0fc:	ldr	x0, [x0]
    a100:	bl	55a0 <fprintf@plt>
    a104:	bl	5000 <abort@plt>
    a108:	add	x26, x20, #0x1
    a10c:	cmp	x26, w0, sxtw
    a110:	b.eq	a124 <mpc_inp_str@@Base+0x174>  // b.none
    a114:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    a118:	mov	w3, #0xcc                  	// #204
    a11c:	add	x4, x4, #0x6f2
    a120:	b	a0e4 <mpc_inp_str@@Base+0x134>
    a124:	mov	x0, x22
    a128:	bl	4ff0 <mpc_free_str@plt>
    a12c:	mov	x0, x24
    a130:	bl	4ff0 <mpc_free_str@plt>
    a134:	mov	x0, x19
    a138:	bl	9bf4 <mpc_init3@@Base+0x2c>
    a13c:	add	x28, x28, x0
    a140:	mov	x0, x19
    a144:	bl	4f20 <getc@plt>
    a148:	mov	w22, w0
    a14c:	cmp	w0, #0x29
    a150:	b.ne	a1c4 <mpc_inp_str@@Base+0x214>  // b.any
    a154:	add	x2, x20, #0x3
    a158:	mov	x0, x25
    a15c:	mov	x1, x27
    a160:	mov	x20, x26
    a164:	bl	5330 <mpc_realloc_str@plt>
    a168:	mov	x25, x0
    a16c:	strb	w22, [x0, x26]
    a170:	strb	wzr, [x0, x27]
    a174:	ldp	w2, w3, [sp, #104]
    a178:	mov	x1, x25
    a17c:	mov	x0, x21
    a180:	bl	5380 <mpc_set_str@plt>
    a184:	mov	w19, w0
    a188:	mov	x0, x25
    a18c:	bl	4ff0 <mpc_free_str@plt>
    a190:	cmn	w19, #0x1
    a194:	b.eq	a064 <mpc_inp_str@@Base+0xb4>  // b.none
    a198:	cbz	x23, a1a4 <mpc_inp_str@@Base+0x1f4>
    a19c:	add	x28, x28, x20
    a1a0:	str	x28, [x23]
    a1a4:	mov	w0, w19
    a1a8:	ldp	x19, x20, [sp, #16]
    a1ac:	ldp	x21, x22, [sp, #32]
    a1b0:	ldp	x23, x24, [sp, #48]
    a1b4:	ldp	x25, x26, [sp, #64]
    a1b8:	ldp	x27, x28, [sp, #80]
    a1bc:	ldp	x29, x30, [sp], #112
    a1c0:	ret
    a1c4:	cmn	w0, #0x1
    a1c8:	b.eq	a174 <mpc_inp_str@@Base+0x1c4>  // b.none
    a1cc:	mov	x1, x19
    a1d0:	bl	5210 <ungetc@plt>
    a1d4:	b	a174 <mpc_inp_str@@Base+0x1c4>
    a1d8:	mov	x1, x19
    a1dc:	bl	5210 <ungetc@plt>
    a1e0:	mov	x0, x19
    a1e4:	bl	9c64 <mpc_init3@@Base+0x9c>
    a1e8:	mov	x25, x0
    a1ec:	bl	4a00 <strlen@plt>
    a1f0:	mov	x20, x0
    a1f4:	b	a174 <mpc_inp_str@@Base+0x1c4>
    a1f8:	mov	x20, #0x0                   	// #0
    a1fc:	b	a064 <mpc_inp_str@@Base+0xb4>

000000000000a200 <mpc_log@@Base>:
    a200:	stp	x29, x30, [sp, #-192]!
    a204:	mov	x29, sp
    a208:	stp	x19, x20, [sp, #16]
    a20c:	mov	x19, x0
    a210:	mov	x20, x1
    a214:	mov	x0, x1
    a218:	stp	x21, x22, [sp, #32]
    a21c:	mov	w21, w2
    a220:	stp	x23, x24, [sp, #48]
    a224:	add	x24, x19, #0x20
    a228:	stp	x25, x26, [sp, #64]
    a22c:	stp	x27, x28, [sp, #80]
    a230:	bl	54d0 <mpfr_number_p@plt>
    a234:	cbnz	w0, a294 <mpc_log@@Base+0x94>
    a238:	ldr	x0, [x20, #16]
    a23c:	mov	x1, #0x2                   	// #2
    a240:	movk	x1, #0x8000, lsl #48
    a244:	cmp	x0, x1
    a248:	ldr	x2, [x20, #48]
    a24c:	b.ne	a310 <mpc_log@@Base+0x110>  // b.any
    a250:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a254:	cmp	x2, x0
    a258:	b.ne	a324 <mpc_log@@Base+0x124>  // b.any
    a25c:	mov	x0, x19
    a260:	mov	w1, #0x1                   	// #1
    a264:	bl	5120 <mpfr_set_inf@plt>
    a268:	mov	w20, #0x0                   	// #0
    a26c:	mov	x0, x24
    a270:	bl	4a40 <mpfr_set_nan@plt>
    a274:	mov	w0, w20
    a278:	ldp	x19, x20, [sp, #16]
    a27c:	ldp	x21, x22, [sp, #32]
    a280:	ldp	x23, x24, [sp, #48]
    a284:	ldp	x25, x26, [sp, #64]
    a288:	ldp	x27, x28, [sp, #80]
    a28c:	ldp	x29, x30, [sp], #192
    a290:	ret
    a294:	add	x26, x20, #0x20
    a298:	mov	x0, x26
    a29c:	bl	54d0 <mpfr_number_p@plt>
    a2a0:	cbz	w0, a238 <mpc_log@@Base+0x38>
    a2a4:	mov	x0, x20
    a2a8:	bl	51f0 <mpfr_sgn@plt>
    a2ac:	asr	w22, w21, #4
    a2b0:	mov	w23, w0
    a2b4:	mov	x0, x26
    a2b8:	bl	51f0 <mpfr_sgn@plt>
    a2bc:	cbnz	w0, a434 <mpc_log@@Base+0x234>
    a2c0:	cmp	w23, #0x0
    a2c4:	cbnz	w23, a36c <mpc_log@@Base+0x16c>
    a2c8:	mov	x2, x20
    a2cc:	mov	w3, w22
    a2d0:	mov	x1, x26
    a2d4:	mov	x0, x24
    a2d8:	bl	4ca0 <mpfr_atan2@plt>
    a2dc:	mov	w20, w0
    a2e0:	mov	w1, #0xffffffff            	// #-1
    a2e4:	mov	x0, x19
    a2e8:	bl	5120 <mpfr_set_inf@plt>
    a2ec:	cmp	w23, #0x0
    a2f0:	cset	w1, ne  // ne = any
    a2f4:	cmp	w20, #0x0
    a2f8:	mov	w0, #0x4                   	// #4
    a2fc:	csel	w0, w20, w0, eq  // eq = none
    a300:	mov	w20, #0x8                   	// #8
    a304:	csel	w20, w0, w20, ge  // ge = tcont
    a308:	orr	w20, w1, w20
    a30c:	b	a274 <mpc_log@@Base+0x74>
    a310:	cmp	x2, x1
    a314:	b.ne	a330 <mpc_log@@Base+0x130>  // b.any
    a318:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    a31c:	cmp	x0, x1
    a320:	b	a258 <mpc_log@@Base+0x58>
    a324:	mov	x0, x19
    a328:	bl	4a40 <mpfr_set_nan@plt>
    a32c:	b	a268 <mpc_log@@Base+0x68>
    a330:	mov	x2, x20
    a334:	asr	w3, w21, #4
    a338:	add	x1, x20, #0x20
    a33c:	mov	x0, x24
    a340:	bl	4ca0 <mpfr_atan2@plt>
    a344:	mov	w20, w0
    a348:	mov	w1, #0x1                   	// #1
    a34c:	mov	x0, x19
    a350:	bl	5120 <mpfr_set_inf@plt>
    a354:	cmp	w20, #0x0
    a358:	mov	w0, #0x4                   	// #4
    a35c:	csel	w0, w20, w0, eq  // eq = none
    a360:	mov	w20, #0x8                   	// #8
    a364:	csel	w20, w0, w20, ge  // ge = tcont
    a368:	b	a274 <mpc_log@@Base+0x74>
    a36c:	and	w21, w21, #0xf
    a370:	b.le	a3ac <mpc_log@@Base+0x1ac>
    a374:	mov	x1, x20
    a378:	mov	w2, w21
    a37c:	mov	x0, x19
    a380:	bl	4d80 <mpfr_log@plt>
    a384:	ldr	w3, [x20, #40]
    a388:	mov	w23, w0
    a38c:	mov	w2, w22
    a390:	mov	x1, x26
    a394:	mov	x0, x24
    a398:	bl	51d0 <mpfr_set4@plt>
    a39c:	mov	w20, w0
    a3a0:	tbz	w23, #31, a2ec <mpc_log@@Base+0xec>
    a3a4:	mov	w1, #0x2                   	// #2
    a3a8:	b	a2f4 <mpc_log@@Base+0xf4>
    a3ac:	ldr	w25, [x20, #40]
    a3b0:	tbz	w25, #31, a3c8 <mpc_log@@Base+0x1c8>
    a3b4:	cmp	w22, #0x2
    a3b8:	b.eq	a42c <mpc_log@@Base+0x22c>  // b.none
    a3bc:	cmp	w22, #0x3
    a3c0:	mov	w0, #0x2                   	// #2
    a3c4:	csel	w22, w22, w0, ne  // ne = any
    a3c8:	ldp	x2, x3, [x20]
    a3cc:	stp	x2, x3, [sp, #160]
    a3d0:	add	x1, sp, #0xa0
    a3d4:	ldp	x2, x3, [x20, #16]
    a3d8:	mov	x0, x1
    a3dc:	mov	x20, x1
    a3e0:	stp	x2, x3, [sp, #176]
    a3e4:	mov	w2, #0x0                   	// #0
    a3e8:	bl	4b80 <mpfr_neg@plt>
    a3ec:	mov	w2, w21
    a3f0:	mov	x1, x20
    a3f4:	mov	x0, x19
    a3f8:	bl	4d80 <mpfr_log@plt>
    a3fc:	mov	w1, w22
    a400:	mov	w23, w0
    a404:	mov	x0, x24
    a408:	bl	4a80 <mpfr_const_pi@plt>
    a40c:	mov	w20, w0
    a410:	tbz	w25, #31, a3a0 <mpc_log@@Base+0x1a0>
    a414:	mov	x1, x19
    a418:	mov	x0, x19
    a41c:	mov	w2, #0x0                   	// #0
    a420:	neg	w20, w20
    a424:	bl	4f60 <mpc_conj@plt>
    a428:	b	a3a0 <mpc_log@@Base+0x1a0>
    a42c:	mov	w22, #0x3                   	// #3
    a430:	b	a3c8 <mpc_log@@Base+0x1c8>
    a434:	and	w21, w21, #0xf
    a438:	cbnz	w23, a538 <mpc_log@@Base+0x338>
    a43c:	cmp	w0, #0x0
    a440:	b.le	a4a8 <mpc_log@@Base+0x2a8>
    a444:	mov	w2, w21
    a448:	mov	x1, x26
    a44c:	mov	x0, x19
    a450:	bl	4d80 <mpfr_log@plt>
    a454:	mov	w1, w22
    a458:	mov	w21, w0
    a45c:	mov	x0, x24
    a460:	bl	4a80 <mpfr_const_pi@plt>
    a464:	mov	x1, x24
    a468:	mov	w19, w0
    a46c:	mov	w3, #0x0                   	// #0
    a470:	mov	x0, x24
    a474:	mov	x2, #0x1                   	// #1
    a478:	bl	5320 <mpfr_div_2ui@plt>
    a47c:	cmp	w21, #0x0
    a480:	mov	w0, #0x2                   	// #2
    a484:	cset	w20, ne  // ne = any
    a488:	csel	w20, w20, w0, ge  // ge = tcont
    a48c:	cmp	w19, #0x0
    a490:	mov	w0, #0x4                   	// #4
    a494:	csel	w0, w19, w0, eq  // eq = none
    a498:	mov	w19, #0x8                   	// #8
    a49c:	csel	w19, w0, w19, ge  // ge = tcont
    a4a0:	orr	w20, w20, w19
    a4a4:	b	a274 <mpc_log@@Base+0x74>
    a4a8:	ldp	x2, x3, [x20, #32]
    a4ac:	stp	x2, x3, [sp, #160]
    a4b0:	add	x1, sp, #0xa0
    a4b4:	ldp	x2, x3, [x26, #16]
    a4b8:	mov	x20, x1
    a4bc:	mov	x0, x1
    a4c0:	stp	x2, x3, [sp, #176]
    a4c4:	mov	w2, #0x0                   	// #0
    a4c8:	bl	4b80 <mpfr_neg@plt>
    a4cc:	mov	w2, w21
    a4d0:	mov	x1, x20
    a4d4:	mov	x0, x19
    a4d8:	bl	4d80 <mpfr_log@plt>
    a4dc:	cmp	w22, #0x2
    a4e0:	mov	w21, w0
    a4e4:	b.eq	a530 <mpc_log@@Base+0x330>  // b.none
    a4e8:	cmp	w22, #0x3
    a4ec:	mov	w0, #0x2                   	// #2
    a4f0:	csel	w22, w22, w0, ne  // ne = any
    a4f4:	mov	w1, w22
    a4f8:	mov	x0, x24
    a4fc:	bl	4a80 <mpfr_const_pi@plt>
    a500:	mov	w19, w0
    a504:	mov	w3, #0x0                   	// #0
    a508:	mov	x1, x24
    a50c:	mov	x2, #0x1                   	// #1
    a510:	mov	x0, x24
    a514:	bl	5320 <mpfr_div_2ui@plt>
    a518:	neg	w19, w19
    a51c:	mov	x1, x24
    a520:	mov	x0, x24
    a524:	mov	w2, #0x0                   	// #0
    a528:	bl	4b80 <mpfr_neg@plt>
    a52c:	b	a47c <mpc_log@@Base+0x27c>
    a530:	mov	w22, #0x3                   	// #3
    a534:	b	a4f4 <mpc_log@@Base+0x2f4>
    a538:	add	x23, sp, #0xa0
    a53c:	mov	x1, #0x2                   	// #2
    a540:	mov	x0, x23
    a544:	mov	w27, #0x1                   	// #1
    a548:	mov	w28, w27
    a54c:	ldr	x25, [x19]
    a550:	bl	5440 <mpfr_init2@plt>
    a554:	mov	w0, #0x0                   	// #0
    a558:	cmp	w0, #0x0
    a55c:	ccmp	w27, #0x2, #0x0, eq  // eq = none
    a560:	b.le	a5d8 <mpc_log@@Base+0x3d8>
    a564:	cbz	w0, a614 <mpc_log@@Base+0x414>
    a568:	mov	w27, #0x0                   	// #0
    a56c:	mov	w3, w22
    a570:	mov	x2, x20
    a574:	mov	x1, x26
    a578:	mov	x0, x24
    a57c:	bl	4ca0 <mpfr_atan2@plt>
    a580:	mov	w22, w0
    a584:	cbz	w27, a80c <mpc_log@@Base+0x60c>
    a588:	bl	55c0 <mpfr_get_emin_min@plt>
    a58c:	sub	x2, x0, #0x2
    a590:	mov	w3, w21
    a594:	mov	x0, x19
    a598:	mov	x1, #0x1                   	// #1
    a59c:	bl	5130 <mpfr_set_ui_2exp@plt>
    a5a0:	mov	w19, w0
    a5a4:	mov	x0, x23
    a5a8:	bl	4d60 <mpfr_clear@plt>
    a5ac:	cmp	w19, #0x0
    a5b0:	mov	w0, #0x2                   	// #2
    a5b4:	cset	w20, ne  // ne = any
    a5b8:	csel	w20, w20, w0, ge  // ge = tcont
    a5bc:	cmp	w22, #0x0
    a5c0:	mov	w0, #0x4                   	// #4
    a5c4:	csel	w0, w22, w0, eq  // eq = none
    a5c8:	mov	w22, #0x8                   	// #8
    a5cc:	csel	w22, w0, w22, ge  // ge = tcont
    a5d0:	orr	w20, w20, w22
    a5d4:	b	a274 <mpc_log@@Base+0x74>
    a5d8:	mov	x0, x25
    a5dc:	bl	4d20 <mpc_ceil_log2@plt>
    a5e0:	add	x0, x0, #0x4
    a5e4:	add	x25, x25, x0
    a5e8:	mov	x0, x23
    a5ec:	mov	x1, x25
    a5f0:	bl	4c80 <mpfr_set_prec@plt>
    a5f4:	mov	x1, x20
    a5f8:	mov	x0, x23
    a5fc:	mov	w2, #0x0                   	// #0
    a600:	bl	51a0 <mpc_abs@plt>
    a604:	ldr	x0, [sp, #176]
    a608:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    a60c:	cmp	x0, x1
    a610:	b.ne	a758 <mpc_log@@Base+0x558>  // b.any
    a614:	add	x25, sp, #0x80
    a618:	mov	x1, #0x2                   	// #2
    a61c:	mov	x0, x25
    a620:	ldr	x27, [x19]
    a624:	bl	5440 <mpfr_init2@plt>
    a628:	mov	x1, x26
    a62c:	mov	x0, x20
    a630:	bl	53b0 <mpfr_cmpabs@plt>
    a634:	tbz	w0, #31, a7ac <mpc_log@@Base+0x5ac>
    a638:	mov	x28, x26
    a63c:	str	x20, [sp, #112]
    a640:	mov	x0, x27
    a644:	bl	4d20 <mpc_ceil_log2@plt>
    a648:	add	x0, x0, #0x4
    a64c:	add	x27, x27, x0
    a650:	mov	x0, x25
    a654:	mov	x1, x27
    a658:	bl	4c80 <mpfr_set_prec@plt>
    a65c:	mov	x1, x27
    a660:	mov	x0, x23
    a664:	bl	4c80 <mpfr_set_prec@plt>
    a668:	ldr	x1, [sp, #112]
    a66c:	mov	w3, #0x3                   	// #3
    a670:	mov	x2, x28
    a674:	mov	x0, x25
    a678:	bl	5150 <mpfr_div@plt>
    a67c:	mov	x1, x25
    a680:	mov	w2, #0x3                   	// #3
    a684:	mov	x0, x25
    a688:	bl	5010 <mpfr_sqr@plt>
    a68c:	mov	x1, x25
    a690:	mov	w2, #0x3                   	// #3
    a694:	mov	x0, x25
    a698:	bl	51e0 <mpfr_log1p@plt>
    a69c:	mov	x1, x25
    a6a0:	mov	w3, #0x3                   	// #3
    a6a4:	mov	x2, #0x1                   	// #1
    a6a8:	mov	x0, x25
    a6ac:	bl	5320 <mpfr_div_2ui@plt>
    a6b0:	mov	w3, #0x1                   	// #1
    a6b4:	mov	x1, x28
    a6b8:	mov	w2, #0x0                   	// #0
    a6bc:	mov	x0, x23
    a6c0:	bl	51d0 <mpfr_set4@plt>
    a6c4:	mov	x1, x23
    a6c8:	mov	w2, #0x0                   	// #0
    a6cc:	mov	x0, x23
    a6d0:	bl	4d80 <mpfr_log@plt>
    a6d4:	ldr	w5, [sp, #168]
    a6d8:	mov	x2, x25
    a6dc:	ldr	x4, [sp, #176]
    a6e0:	mov	x1, x23
    a6e4:	mov	x0, x23
    a6e8:	mov	w3, #0x0                   	// #0
    a6ec:	str	w5, [sp, #108]
    a6f0:	str	x4, [sp, #120]
    a6f4:	bl	4e60 <mpfr_add@plt>
    a6f8:	ldr	w5, [sp, #108]
    a6fc:	tbz	w5, #31, a7b8 <mpc_log@@Base+0x5b8>
    a700:	ldr	x4, [sp, #120]
    a704:	ldr	x0, [sp, #144]
    a708:	sub	x1, x4, #0x1
    a70c:	ldr	x2, [sp, #176]
    a710:	add	x3, x0, #0x4
    a714:	add	w0, w0, #0x7
    a718:	sub	x1, x1, x2
    a71c:	sub	w4, w4, w2
    a720:	cmp	x3, x1
    a724:	csinc	w0, w0, w4, ge  // ge = tcont
    a728:	mov	x2, #0x0                   	// #0
    a72c:	mov	x1, #0xffffffffffffffff    	// #-1
    a730:	str	w0, [sp, #108]
    a734:	mov	x0, x28
    a738:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    a73c:	cbnz	w0, a7c0 <mpc_log@@Base+0x5c0>
    a740:	ldr	x1, [sp, #176]
    a744:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a748:	cmp	x1, x0
    a74c:	b.ne	a7d4 <mpc_log@@Base+0x5d4>  // b.any
    a750:	mov	w27, #0x1                   	// #1
    a754:	b	a800 <mpc_log@@Base+0x600>
    a758:	mov	x1, x23
    a75c:	mov	x0, x23
    a760:	mov	w2, #0x0                   	// #0
    a764:	bl	4d80 <mpfr_log@plt>
    a768:	ldr	x0, [sp, #176]
    a76c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    a770:	cmp	x0, x1
    a774:	b.eq	a614 <mpc_log@@Base+0x414>  // b.none
    a778:	sub	w1, w28, w0
    a77c:	cmp	x0, #0x0
    a780:	csel	w1, w1, w28, lt  // lt = tstop
    a784:	cmp	w21, #0x0
    a788:	ldr	x4, [x19]
    a78c:	sub	x1, x25, w1, sxtw
    a790:	mov	x0, x23
    a794:	add	w27, w27, #0x1
    a798:	cinc	x4, x4, eq  // eq = none
    a79c:	mov	w3, #0x1                   	// #1
    a7a0:	mov	w2, #0x0                   	// #0
    a7a4:	bl	5450 <mpfr_can_round@plt>
    a7a8:	b	a558 <mpc_log@@Base+0x358>
    a7ac:	mov	x28, x20
    a7b0:	str	x26, [sp, #112]
    a7b4:	b	a640 <mpc_log@@Base+0x440>
    a7b8:	mov	w0, #0x5                   	// #5
    a7bc:	b	a728 <mpc_log@@Base+0x528>
    a7c0:	mov	x0, x28
    a7c4:	mov	x2, #0x0                   	// #0
    a7c8:	mov	x1, #0x1                   	// #1
    a7cc:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    a7d0:	cbz	w0, a740 <mpc_log@@Base+0x540>
    a7d4:	ldr	w0, [sp, #108]
    a7d8:	cmp	w21, #0x0
    a7dc:	ldr	x4, [x19]
    a7e0:	mov	w3, #0x1                   	// #1
    a7e4:	sub	x1, x27, w0, sxtw
    a7e8:	mov	w2, #0x0                   	// #0
    a7ec:	mov	x0, x23
    a7f0:	cinc	x4, x4, eq  // eq = none
    a7f4:	bl	5450 <mpfr_can_round@plt>
    a7f8:	cbz	w0, a640 <mpc_log@@Base+0x440>
    a7fc:	mov	w27, #0x0                   	// #0
    a800:	mov	x0, x25
    a804:	bl	4d60 <mpfr_clear@plt>
    a808:	b	a56c <mpc_log@@Base+0x36c>
    a80c:	ldr	w3, [sp, #168]
    a810:	mov	w2, w21
    a814:	mov	x1, x23
    a818:	mov	x0, x19
    a81c:	bl	51d0 <mpfr_set4@plt>
    a820:	b	a5a0 <mpc_log@@Base+0x3a0>
    a824:	stp	x29, x30, [sp, #-32]!
    a828:	mov	w3, #0x0                   	// #0
    a82c:	mov	x2, #0x0                   	// #0
    a830:	mov	x29, sp
    a834:	mov	x1, #0xa                   	// #10
    a838:	str	x19, [sp, #16]
    a83c:	mov	x19, x0
    a840:	bl	5130 <mpfr_set_ui_2exp@plt>
    a844:	mov	x1, x19
    a848:	mov	x0, x19
    a84c:	ldr	x19, [sp, #16]
    a850:	mov	w2, #0x0                   	// #0
    a854:	ldp	x29, x30, [sp], #32
    a858:	b	4d80 <mpfr_log@plt>

000000000000a85c <mpc_log10@@Base>:
    a85c:	stp	x29, x30, [sp, #-256]!
    a860:	mov	x29, sp
    a864:	stp	x23, x24, [sp, #48]
    a868:	mov	x23, x0
    a86c:	add	x24, sp, #0xa0
    a870:	mov	x0, x24
    a874:	stp	x19, x20, [sp, #16]
    a878:	add	x19, sp, #0xc0
    a87c:	stp	x21, x22, [sp, #32]
    a880:	add	x20, sp, #0x80
    a884:	add	x22, sp, #0x90
    a888:	stp	x25, x26, [sp, #64]
    a88c:	mov	w26, w2
    a890:	stp	x27, x28, [sp, #80]
    a894:	mov	x27, x1
    a898:	mov	x1, #0x2                   	// #2
    a89c:	bl	5440 <mpfr_init2@plt>
    a8a0:	mov	w28, #0x0                   	// #0
    a8a4:	mov	x0, x19
    a8a8:	mov	x1, #0x2                   	// #2
    a8ac:	bl	4cf0 <mpc_init2@plt>
    a8b0:	str	wzr, [sp, #108]
    a8b4:	ldr	x0, [x23]
    a8b8:	ldr	x21, [x23, #32]
    a8bc:	cmp	x21, x0
    a8c0:	csel	x21, x21, x0, ge  // ge = tcont
    a8c4:	asr	w0, w26, #4
    a8c8:	cmp	w0, #0x0
    a8cc:	str	w0, [sp, #116]
    a8d0:	cset	x0, eq  // eq = none
    a8d4:	str	x0, [sp, #120]
    a8d8:	ldr	w0, [sp, #108]
    a8dc:	add	w0, w0, #0x1
    a8e0:	str	w0, [sp, #108]
    a8e4:	cmp	w0, #0x2
    a8e8:	b.gt	aa1c <mpc_log10@@Base+0x1c0>
    a8ec:	mov	x0, x21
    a8f0:	bl	4d20 <mpc_ceil_log2@plt>
    a8f4:	add	x0, x0, #0x4
    a8f8:	add	x21, x21, x0
    a8fc:	mov	x0, x24
    a900:	mov	x1, x21
    a904:	bl	4c80 <mpfr_set_prec@plt>
    a908:	mov	x1, x21
    a90c:	mov	x0, x19
    a910:	bl	4c00 <mpc_set_prec@plt>
    a914:	add	x25, x19, #0x20
    a918:	mov	w2, w26
    a91c:	mov	x1, x27
    a920:	mov	x0, x19
    a924:	bl	4db0 <mpc_log@plt>
    a928:	str	w0, [sp, #112]
    a92c:	mov	x0, x25
    a930:	bl	54d0 <mpfr_number_p@plt>
    a934:	cbz	w0, aa28 <mpc_log10@@Base+0x1cc>
    a938:	ldr	x1, [sp, #240]
    a93c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a940:	cmp	x1, x0
    a944:	b.eq	aa28 <mpc_log10@@Base+0x1cc>  // b.none
    a948:	mov	x0, x24
    a94c:	bl	a824 <mpc_log@@Base+0x624>
    a950:	mov	x2, x24
    a954:	mov	x1, x25
    a958:	mov	w3, #0x0                   	// #0
    a95c:	mov	x0, x25
    a960:	bl	5150 <mpfr_div@plt>
    a964:	ldr	x4, [x23, #32]
    a968:	sub	x1, x21, #0x2
    a96c:	ldr	x0, [sp, #120]
    a970:	mov	w3, #0x1                   	// #1
    a974:	mov	w2, #0x0                   	// #0
    a978:	add	x4, x0, x4
    a97c:	mov	x0, x25
    a980:	bl	5450 <mpfr_can_round@plt>
    a984:	mov	w1, w0
    a988:	cbz	w0, a8d8 <mpc_log10@@Base+0x7c>
    a98c:	mov	w25, #0x0                   	// #0
    a990:	mov	x0, x19
    a994:	str	w1, [sp, #100]
    a998:	bl	54d0 <mpfr_number_p@plt>
    a99c:	ldr	w1, [sp, #100]
    a9a0:	cbz	w0, aa34 <mpc_log10@@Base+0x1d8>
    a9a4:	ldr	x2, [sp, #208]
    a9a8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a9ac:	cmp	x2, x0
    a9b0:	b.eq	aa34 <mpc_log10@@Base+0x1d8>  // b.none
    a9b4:	cbz	w25, a9c0 <mpc_log10@@Base+0x164>
    a9b8:	mov	x0, x24
    a9bc:	bl	a824 <mpc_log@@Base+0x624>
    a9c0:	mov	x2, x24
    a9c4:	mov	x1, x19
    a9c8:	mov	w3, #0x0                   	// #0
    a9cc:	mov	x0, x19
    a9d0:	bl	5150 <mpfr_div@plt>
    a9d4:	tst	x26, #0xf
    a9d8:	sub	x1, x21, #0x2
    a9dc:	ldr	x4, [x23]
    a9e0:	mov	x0, x19
    a9e4:	mov	w3, #0x1                   	// #1
    a9e8:	mov	w2, #0x0                   	// #0
    a9ec:	cinc	x4, x4, eq  // eq = none
    a9f0:	bl	5450 <mpfr_can_round@plt>
    a9f4:	mov	w1, w0
    a9f8:	str	wzr, [sp, #104]
    a9fc:	orr	w0, w1, w28
    aa00:	str	w0, [sp, #100]
    aa04:	cbnz	w0, ab58 <mpc_log10@@Base+0x2fc>
    aa08:	mov	x0, x27
    aa0c:	bl	4e30 <mpfr_integer_p@plt>
    aa10:	cbnz	w0, aa40 <mpc_log10@@Base+0x1e4>
    aa14:	mov	w28, #0x0                   	// #0
    aa18:	b	a8d8 <mpc_log10@@Base+0x7c>
    aa1c:	mov	x0, #0x2                   	// #2
    aa20:	sdiv	x0, x21, x0
    aa24:	b	a8f8 <mpc_log10@@Base+0x9c>
    aa28:	mov	w25, #0x1                   	// #1
    aa2c:	mov	w1, w25
    aa30:	b	a990 <mpc_log10@@Base+0x134>
    aa34:	mov	w0, #0x1                   	// #1
    aa38:	str	w0, [sp, #104]
    aa3c:	b	a9fc <mpc_log10@@Base+0x1a0>
    aa40:	add	x28, x27, #0x20
    aa44:	mov	x0, x28
    aa48:	bl	4e30 <mpfr_integer_p@plt>
    aa4c:	cbz	w0, aa14 <mpc_log10@@Base+0x1b8>
    aa50:	mov	x0, x20
    aa54:	bl	54a0 <__gmpz_init@plt>
    aa58:	mov	x0, x22
    aa5c:	bl	54a0 <__gmpz_init@plt>
    aa60:	mov	x1, x27
    aa64:	mov	w2, #0x0                   	// #0
    aa68:	mov	x0, x20
    aa6c:	bl	4bd0 <mpfr_get_z@plt>
    aa70:	mov	x1, x28
    aa74:	mov	w2, #0x0                   	// #0
    aa78:	mov	x0, x22
    aa7c:	bl	4bd0 <mpfr_get_z@plt>
    aa80:	mov	x2, x20
    aa84:	mov	x1, x20
    aa88:	mov	x0, x20
    aa8c:	bl	4d40 <__gmpz_mul@plt>
    aa90:	mov	x2, x22
    aa94:	mov	x1, x22
    aa98:	mov	x0, x22
    aa9c:	bl	4d40 <__gmpz_mul@plt>
    aaa0:	mov	x2, x22
    aaa4:	mov	x1, x20
    aaa8:	mov	x0, x20
    aaac:	bl	53d0 <__gmpz_add@plt>
    aab0:	mov	x1, #0x0                   	// #0
    aab4:	mov	x0, x20
    aab8:	bl	49f0 <__gmpz_scan1@plt>
    aabc:	mov	x28, x0
    aac0:	mov	w1, #0xa                   	// #10
    aac4:	mov	x0, x20
    aac8:	bl	54b0 <__gmpz_sizeinbase@plt>
    aacc:	add	x1, x28, #0x1
    aad0:	cmp	x1, x0
    aad4:	b.eq	aae4 <mpc_log10@@Base+0x288>  // b.none
    aad8:	add	x1, x28, #0x2
    aadc:	cmp	x1, x0
    aae0:	b.ne	ab3c <mpc_log10@@Base+0x2e0>  // b.any
    aae4:	mov	x2, x28
    aae8:	mov	x1, x20
    aaec:	mov	x0, x20
    aaf0:	bl	4e10 <__gmpz_fdiv_q_2exp@plt>
    aaf4:	mov	x2, x28
    aaf8:	mov	x0, x22
    aafc:	mov	x1, #0x5                   	// #5
    ab00:	bl	50b0 <__gmpz_ui_pow_ui@plt>
    ab04:	mov	x1, x20
    ab08:	mov	x0, x22
    ab0c:	bl	5300 <__gmpz_cmp@plt>
    ab10:	cbnz	w0, ab3c <mpc_log10@@Base+0x2e0>
    ab14:	mov	x0, x19
    ab18:	mov	x1, #0x40                  	// #64
    ab1c:	bl	4c80 <mpfr_set_prec@plt>
    ab20:	mov	x1, x28
    ab24:	mov	x0, x19
    ab28:	mov	w3, #0x0                   	// #0
    ab2c:	mov	x2, #0xffffffffffffffff    	// #-1
    ab30:	bl	5130 <mpfr_set_ui_2exp@plt>
    ab34:	mov	w0, #0x1                   	// #1
    ab38:	str	w0, [sp, #100]
    ab3c:	mov	x0, x20
    ab40:	bl	5180 <__gmpz_clear@plt>
    ab44:	mov	x0, x22
    ab48:	bl	5180 <__gmpz_clear@plt>
    ab4c:	ldr	w1, [sp, #100]
    ab50:	mov	w0, #0x1                   	// #1
    ab54:	mov	w28, w0
    ab58:	cbz	w1, a8d8 <mpc_log10@@Base+0x7c>
    ab5c:	ldr	w3, [sp, #200]
    ab60:	and	w2, w26, #0xf
    ab64:	mov	x1, x19
    ab68:	mov	x0, x23
    ab6c:	bl	51d0 <mpfr_set4@plt>
    ab70:	mov	w21, w0
    ab74:	ldr	w0, [sp, #104]
    ab78:	cbz	w0, ab94 <mpc_log10@@Base+0x338>
    ab7c:	ldr	w0, [sp, #112]
    ab80:	and	w0, w0, #0x3
    ab84:	cmp	w0, #0x2
    ab88:	b.eq	ac1c <mpc_log10@@Base+0x3c0>  // b.none
    ab8c:	cmp	w0, #0x0
    ab90:	cset	w21, ne  // ne = any
    ab94:	ldr	w2, [sp, #116]
    ab98:	add	x1, x19, #0x20
    ab9c:	ldr	w3, [sp, #232]
    aba0:	add	x0, x23, #0x20
    aba4:	bl	51d0 <mpfr_set4@plt>
    aba8:	mov	w20, w0
    abac:	cbz	w25, abc8 <mpc_log10@@Base+0x36c>
    abb0:	ldr	w0, [sp, #112]
    abb4:	asr	w0, w0, #2
    abb8:	cmp	w0, #0x2
    abbc:	b.eq	ac24 <mpc_log10@@Base+0x3c8>  // b.none
    abc0:	cmp	w0, #0x0
    abc4:	cset	w20, ne  // ne = any
    abc8:	mov	x0, x24
    abcc:	bl	4d60 <mpfr_clear@plt>
    abd0:	mov	x0, x19
    abd4:	bl	4a10 <mpc_clear@plt>
    abd8:	cmp	w21, #0x0
    abdc:	mov	w1, #0x2                   	// #2
    abe0:	cset	w0, ne  // ne = any
    abe4:	csel	w0, w0, w1, ge  // ge = tcont
    abe8:	cmp	w20, #0x0
    abec:	mov	w1, #0x4                   	// #4
    abf0:	csel	w1, w20, w1, eq  // eq = none
    abf4:	mov	w20, #0x8                   	// #8
    abf8:	csel	w20, w1, w20, ge  // ge = tcont
    abfc:	orr	w0, w0, w20
    ac00:	ldp	x19, x20, [sp, #16]
    ac04:	ldp	x21, x22, [sp, #32]
    ac08:	ldp	x23, x24, [sp, #48]
    ac0c:	ldp	x25, x26, [sp, #64]
    ac10:	ldp	x27, x28, [sp, #80]
    ac14:	ldp	x29, x30, [sp], #256
    ac18:	ret
    ac1c:	mov	w21, #0xffffffff            	// #-1
    ac20:	b	ab94 <mpc_log10@@Base+0x338>
    ac24:	mov	w20, #0xffffffff            	// #-1
    ac28:	b	abc8 <mpc_log10@@Base+0x36c>

000000000000ac2c <mpc_alloc_str@@Base>:
    ac2c:	stp	x29, x30, [sp, #-48]!
    ac30:	mov	x2, #0x0                   	// #0
    ac34:	mov	x1, #0x0                   	// #0
    ac38:	mov	x29, sp
    ac3c:	str	x19, [sp, #16]
    ac40:	mov	x19, x0
    ac44:	add	x0, sp, #0x28
    ac48:	bl	4ae0 <__gmp_get_memory_functions@plt>
    ac4c:	ldr	x1, [sp, #40]
    ac50:	mov	x0, x19
    ac54:	blr	x1
    ac58:	ldr	x19, [sp, #16]
    ac5c:	ldp	x29, x30, [sp], #48
    ac60:	ret

000000000000ac64 <mpc_realloc_str@@Base>:
    ac64:	stp	x29, x30, [sp, #-64]!
    ac68:	mov	x29, sp
    ac6c:	stp	x19, x20, [sp, #16]
    ac70:	mov	x19, x0
    ac74:	mov	x20, x1
    ac78:	mov	x0, #0x0                   	// #0
    ac7c:	add	x1, sp, #0x38
    ac80:	str	x21, [sp, #32]
    ac84:	mov	x21, x2
    ac88:	mov	x2, #0x0                   	// #0
    ac8c:	bl	4ae0 <__gmp_get_memory_functions@plt>
    ac90:	ldr	x3, [sp, #56]
    ac94:	mov	x2, x21
    ac98:	mov	x1, x20
    ac9c:	mov	x0, x19
    aca0:	blr	x3
    aca4:	ldp	x19, x20, [sp, #16]
    aca8:	ldr	x21, [sp, #32]
    acac:	ldp	x29, x30, [sp], #64
    acb0:	ret

000000000000acb4 <mpc_free_str@@Base>:
    acb4:	stp	x29, x30, [sp, #-48]!
    acb8:	mov	x1, #0x0                   	// #0
    acbc:	add	x2, sp, #0x28
    acc0:	mov	x29, sp
    acc4:	str	x19, [sp, #16]
    acc8:	mov	x19, x0
    accc:	mov	x0, #0x0                   	// #0
    acd0:	bl	4ae0 <__gmp_get_memory_functions@plt>
    acd4:	mov	x0, x19
    acd8:	bl	4a00 <strlen@plt>
    acdc:	ldr	x2, [sp, #40]
    ace0:	add	x1, x0, #0x1
    ace4:	mov	x0, x19
    ace8:	blr	x2
    acec:	ldr	x19, [sp, #16]
    acf0:	ldp	x29, x30, [sp], #48
    acf4:	ret

000000000000acf8 <mpc_mul_2si@@Base>:
    acf8:	stp	x29, x30, [sp, #-64]!
    acfc:	mov	x29, sp
    ad00:	stp	x19, x20, [sp, #16]
    ad04:	mov	w20, w3
    ad08:	and	w3, w3, #0xf
    ad0c:	stp	x21, x22, [sp, #32]
    ad10:	mov	x21, x0
    ad14:	mov	x22, x1
    ad18:	str	x23, [sp, #48]
    ad1c:	mov	x23, x2
    ad20:	bl	4a70 <mpfr_mul_2si@plt>
    ad24:	mov	w19, w0
    ad28:	asr	w3, w20, #4
    ad2c:	mov	x2, x23
    ad30:	add	x1, x22, #0x20
    ad34:	add	x0, x21, #0x20
    ad38:	bl	4a70 <mpfr_mul_2si@plt>
    ad3c:	cmp	w19, #0x0
    ad40:	mov	w2, #0x2                   	// #2
    ad44:	cset	w1, ne  // ne = any
    ad48:	csel	w1, w1, w2, ge  // ge = tcont
    ad4c:	cmp	w0, #0x0
    ad50:	mov	w2, #0x4                   	// #4
    ad54:	csel	w2, w0, w2, eq  // eq = none
    ad58:	mov	w0, #0x8                   	// #8
    ad5c:	csel	w0, w2, w0, ge  // ge = tcont
    ad60:	orr	w0, w1, w0
    ad64:	ldp	x19, x20, [sp, #16]
    ad68:	ldp	x21, x22, [sp, #32]
    ad6c:	ldr	x23, [sp, #48]
    ad70:	ldp	x29, x30, [sp], #64
    ad74:	ret

000000000000ad78 <mpc_mul_2ui@@Base>:
    ad78:	stp	x29, x30, [sp, #-64]!
    ad7c:	mov	x29, sp
    ad80:	stp	x19, x20, [sp, #16]
    ad84:	mov	w20, w3
    ad88:	and	w3, w3, #0xf
    ad8c:	stp	x21, x22, [sp, #32]
    ad90:	mov	x21, x0
    ad94:	mov	x22, x1
    ad98:	str	x23, [sp, #48]
    ad9c:	mov	x23, x2
    ada0:	bl	4f40 <mpfr_mul_2ui@plt>
    ada4:	mov	w19, w0
    ada8:	asr	w3, w20, #4
    adac:	mov	x2, x23
    adb0:	add	x1, x22, #0x20
    adb4:	add	x0, x21, #0x20
    adb8:	bl	4f40 <mpfr_mul_2ui@plt>
    adbc:	cmp	w19, #0x0
    adc0:	mov	w2, #0x2                   	// #2
    adc4:	cset	w1, ne  // ne = any
    adc8:	csel	w1, w1, w2, ge  // ge = tcont
    adcc:	cmp	w0, #0x0
    add0:	mov	w2, #0x4                   	// #4
    add4:	csel	w2, w0, w2, eq  // eq = none
    add8:	mov	w0, #0x8                   	// #8
    addc:	csel	w0, w2, w0, ge  // ge = tcont
    ade0:	orr	w0, w1, w0
    ade4:	ldp	x19, x20, [sp, #16]
    ade8:	ldp	x21, x22, [sp, #32]
    adec:	ldr	x23, [sp, #48]
    adf0:	ldp	x29, x30, [sp], #64
    adf4:	ret

000000000000adf8 <mpc_mul_naive@@Base>:
    adf8:	stp	x29, x30, [sp, #-160]!
    adfc:	mov	x29, sp
    ae00:	stp	x19, x20, [sp, #16]
    ae04:	mov	x20, x1
    ae08:	mov	x19, x0
    ae0c:	ldr	x1, [x1, #16]
    ae10:	stp	x21, x22, [sp, #32]
    ae14:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ae18:	stp	x23, x24, [sp, #48]
    ae1c:	cmp	x1, x0
    ae20:	stp	x25, x26, [sp, #64]
    ae24:	stp	x27, x28, [sp, #80]
    ae28:	b.le	ae54 <mpc_mul_naive@@Base+0x5c>
    ae2c:	ldr	x1, [x20, #48]
    ae30:	cmp	x1, x0
    ae34:	b.le	ae54 <mpc_mul_naive@@Base+0x5c>
    ae38:	ldr	x1, [x2, #16]
    ae3c:	mov	x21, x2
    ae40:	cmp	x1, x0
    ae44:	b.le	ae54 <mpc_mul_naive@@Base+0x5c>
    ae48:	ldr	x1, [x2, #48]
    ae4c:	cmp	x1, x0
    ae50:	b.gt	ae84 <mpc_mul_naive@@Base+0x8c>
    ae54:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    ae58:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    ae5c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    ae60:	add	x4, x4, #0x701
    ae64:	ldr	x0, [x0, #4008]
    ae68:	add	x2, x2, #0x78e
    ae6c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    ae70:	add	x1, x1, #0x5f3
    ae74:	mov	w3, #0x174                 	// #372
    ae78:	ldr	x0, [x0]
    ae7c:	bl	55a0 <fprintf@plt>
    ae80:	bl	5000 <abort@plt>
    ae84:	cmp	x20, x19
    ae88:	mov	w22, w3
    ae8c:	cset	w25, eq  // eq = none
    ae90:	cmp	x2, x19
    ae94:	csinc	w25, w25, wzr, ne  // ne = any
    ae98:	add	x23, sp, #0x60
    ae9c:	cbz	w25, af90 <mpc_mul_naive@@Base+0x198>
    aea0:	ldr	x1, [x19]
    aea4:	mov	x0, x23
    aea8:	ldr	x2, [x19, #32]
    aeac:	bl	53c0 <mpc_init3@plt>
    aeb0:	add	x27, x20, #0x20
    aeb4:	add	x26, x21, #0x20
    aeb8:	and	w24, w22, #0xf
    aebc:	mov	x4, x26
    aec0:	mov	w5, w24
    aec4:	mov	x3, x27
    aec8:	mov	x2, x21
    aecc:	mov	x1, x20
    aed0:	mov	x0, x23
    aed4:	bl	4a90 <mpfr_fmms@plt>
    aed8:	tbnz	w0, #31, afb4 <mpc_mul_naive@@Base+0x1bc>
    aedc:	mov	w5, w24
    aee0:	mov	x4, x26
    aee4:	mov	x3, x27
    aee8:	mov	x2, x21
    aeec:	mov	x1, x20
    aef0:	mov	x0, x23
    aef4:	bl	4a90 <mpfr_fmms@plt>
    aef8:	cmp	w0, #0x0
    aefc:	cset	w24, ne  // ne = any
    af00:	asr	w22, w22, #4
    af04:	add	x28, x23, #0x20
    af08:	mov	w5, w22
    af0c:	mov	x4, x21
    af10:	mov	x3, x27
    af14:	mov	x2, x26
    af18:	mov	x1, x20
    af1c:	mov	x0, x28
    af20:	bl	4c90 <mpfr_fmma@plt>
    af24:	tbnz	w0, #31, afbc <mpc_mul_naive@@Base+0x1c4>
    af28:	mov	x1, x20
    af2c:	mov	w5, w22
    af30:	mov	x4, x21
    af34:	mov	x3, x27
    af38:	mov	x2, x26
    af3c:	mov	x0, x28
    af40:	bl	4c90 <mpfr_fmma@plt>
    af44:	cmp	w0, #0x0
    af48:	mov	w1, #0x4                   	// #4
    af4c:	csel	w0, w0, w1, eq  // eq = none
    af50:	orr	w24, w24, w0
    af54:	mov	x1, x23
    af58:	mov	x0, x19
    af5c:	mov	w2, #0x0                   	// #0
    af60:	bl	5580 <mpc_set@plt>
    af64:	cbz	w25, af70 <mpc_mul_naive@@Base+0x178>
    af68:	mov	x0, x23
    af6c:	bl	4a10 <mpc_clear@plt>
    af70:	mov	w0, w24
    af74:	ldp	x19, x20, [sp, #16]
    af78:	ldp	x21, x22, [sp, #32]
    af7c:	ldp	x23, x24, [sp, #48]
    af80:	ldp	x25, x26, [sp, #64]
    af84:	ldp	x27, x28, [sp, #80]
    af88:	ldp	x29, x30, [sp], #160
    af8c:	ret
    af90:	ldp	x0, x1, [x19]
    af94:	stp	x0, x1, [sp, #96]
    af98:	ldp	x0, x1, [x19, #16]
    af9c:	stp	x0, x1, [sp, #112]
    afa0:	ldp	x0, x1, [x19, #32]
    afa4:	stp	x0, x1, [sp, #128]
    afa8:	ldp	x0, x1, [x19, #48]
    afac:	stp	x0, x1, [sp, #144]
    afb0:	b	aeb0 <mpc_mul_naive@@Base+0xb8>
    afb4:	mov	w24, #0x2                   	// #2
    afb8:	b	af00 <mpc_mul_naive@@Base+0x108>
    afbc:	mov	w0, #0x8                   	// #8
    afc0:	b	af50 <mpc_mul_naive@@Base+0x158>
    afc4:	stp	x29, x30, [sp, #-144]!
    afc8:	cmp	x0, x1
    afcc:	mov	x29, sp
    afd0:	stp	x19, x20, [sp, #16]
    afd4:	mov	x19, x0
    afd8:	mov	x20, x2
    afdc:	stp	x21, x22, [sp, #32]
    afe0:	cset	w22, eq  // eq = none
    afe4:	cmp	x0, x2
    afe8:	stp	x23, x24, [sp, #48]
    afec:	csinc	w22, w22, wzr, ne  // ne = any
    aff0:	mov	x24, x1
    aff4:	stp	x25, x26, [sp, #64]
    aff8:	mov	w23, w3
    affc:	add	x21, sp, #0x50
    b000:	cbz	w22, b144 <mpc_mul_naive@@Base+0x34c>
    b004:	ldr	x1, [x19]
    b008:	mov	x0, x21
    b00c:	ldr	x2, [x19, #32]
    b010:	bl	53c0 <mpc_init3@plt>
    b014:	ldr	w1, [x20, #8]
    b018:	mov	w0, #0x1                   	// #1
    b01c:	cmp	w1, #0x0
    b020:	ldr	w1, [x24, #40]
    b024:	cneg	w2, w0, lt  // lt = tstop
    b028:	cmp	w1, #0x0
    b02c:	cneg	w1, w0, lt  // lt = tstop
    b030:	cmp	w2, w1
    b034:	b.eq	b168 <mpc_mul_naive@@Base+0x370>  // b.none
    b038:	ldr	w1, [x20, #40]
    b03c:	ldr	w2, [x24, #8]
    b040:	cmp	w1, #0x0
    b044:	cneg	w1, w0, lt  // lt = tstop
    b048:	cmp	w2, #0x0
    b04c:	cneg	w0, w0, lt  // lt = tstop
    b050:	cmp	w1, w0
    b054:	cset	w26, ne  // ne = any
    b058:	and	w3, w23, #0xf
    b05c:	add	x1, x24, #0x20
    b060:	add	x20, x20, #0x20
    b064:	cmp	w3, #0x2
    b068:	b.eq	b170 <mpc_mul_naive@@Base+0x378>  // b.none
    b06c:	cmp	w3, #0x3
    b070:	mov	w0, #0x2                   	// #2
    b074:	csel	w3, w3, w0, ne  // ne = any
    b078:	mov	x2, x20
    b07c:	mov	x0, x21
    b080:	bl	4b70 <mpfr_mul@plt>
    b084:	asr	w23, w23, #4
    b088:	mov	x1, x21
    b08c:	mov	w2, #0x0                   	// #0
    b090:	mov	w25, w0
    b094:	mov	x0, x21
    b098:	bl	4b80 <mpfr_neg@plt>
    b09c:	mov	w3, w23
    b0a0:	mov	x2, x20
    b0a4:	mov	x1, x24
    b0a8:	add	x0, x21, #0x20
    b0ac:	bl	4b70 <mpfr_mul@plt>
    b0b0:	mov	w20, w0
    b0b4:	mov	x1, x21
    b0b8:	mov	x0, x19
    b0bc:	mov	w2, #0x0                   	// #0
    b0c0:	bl	5580 <mpc_set@plt>
    b0c4:	ldr	x1, [x19, #48]
    b0c8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    b0cc:	cmp	x1, x0
    b0d0:	b.ne	b0f8 <mpc_mul_naive@@Base+0x300>  // b.any
    b0d4:	add	x1, x19, #0x20
    b0d8:	cmp	w23, #0x3
    b0dc:	b.eq	b178 <mpc_mul_naive@@Base+0x380>  // b.none
    b0e0:	cmp	w26, #0x0
    b0e4:	mov	w3, #0x1                   	// #1
    b0e8:	cneg	w3, w3, ne  // ne = any
    b0ec:	mov	x0, x1
    b0f0:	mov	w2, #0x0                   	// #0
    b0f4:	bl	51d0 <mpfr_set4@plt>
    b0f8:	cbz	w22, b104 <mpc_mul_naive@@Base+0x30c>
    b0fc:	mov	x0, x21
    b100:	bl	4a10 <mpc_clear@plt>
    b104:	cmp	w25, #0x0
    b108:	mov	w1, #0x2                   	// #2
    b10c:	cset	w0, ne  // ne = any
    b110:	csel	w0, w0, w1, le
    b114:	cmp	w20, #0x0
    b118:	mov	w1, #0x4                   	// #4
    b11c:	csel	w1, w20, w1, eq  // eq = none
    b120:	mov	w20, #0x8                   	// #8
    b124:	csel	w20, w1, w20, ge  // ge = tcont
    b128:	orr	w0, w0, w20
    b12c:	ldp	x19, x20, [sp, #16]
    b130:	ldp	x21, x22, [sp, #32]
    b134:	ldp	x23, x24, [sp, #48]
    b138:	ldp	x25, x26, [sp, #64]
    b13c:	ldp	x29, x30, [sp], #144
    b140:	ret
    b144:	ldp	x0, x1, [x0]
    b148:	stp	x0, x1, [sp, #80]
    b14c:	ldp	x0, x1, [x19, #16]
    b150:	stp	x0, x1, [sp, #96]
    b154:	ldp	x0, x1, [x19, #32]
    b158:	stp	x0, x1, [sp, #112]
    b15c:	ldp	x0, x1, [x19, #48]
    b160:	stp	x0, x1, [sp, #128]
    b164:	b	b014 <mpc_mul_naive@@Base+0x21c>
    b168:	mov	w26, #0x0                   	// #0
    b16c:	b	b058 <mpc_mul_naive@@Base+0x260>
    b170:	mov	w3, #0x3                   	// #3
    b174:	b	b078 <mpc_mul_naive@@Base+0x280>
    b178:	mov	w3, #0xffffffff            	// #-1
    b17c:	b	b0ec <mpc_mul_naive@@Base+0x2f4>

000000000000b180 <mpc_mul_karatsuba@@Base>:
    b180:	stp	x29, x30, [sp, #-400]!
    b184:	cmp	x0, x1
    b188:	mov	x29, sp
    b18c:	stp	x19, x20, [sp, #16]
    b190:	mov	x19, x0
    b194:	cset	w0, eq  // eq = none
    b198:	cmp	x19, x2
    b19c:	stp	x21, x22, [sp, #32]
    b1a0:	csinc	w0, w0, wzr, ne  // ne = any
    b1a4:	stp	x23, x24, [sp, #48]
    b1a8:	stp	x25, x26, [sp, #64]
    b1ac:	stp	x27, x28, [sp, #80]
    b1b0:	stp	x1, x2, [sp, #128]
    b1b4:	str	w3, [sp, #156]
    b1b8:	str	w0, [sp, #192]
    b1bc:	cbz	w0, b274 <mpc_mul_karatsuba@@Base+0xf4>
    b1c0:	ldr	x1, [x19]
    b1c4:	add	x0, sp, #0x150
    b1c8:	ldr	x2, [x19, #32]
    b1cc:	bl	53c0 <mpc_init3@plt>
    b1d0:	ldp	x23, x25, [sp, #128]
    b1d4:	add	x24, x23, #0x20
    b1d8:	add	x26, x25, #0x20
    b1dc:	mov	x1, x24
    b1e0:	mov	x0, x23
    b1e4:	bl	53b0 <mpfr_cmpabs@plt>
    b1e8:	tbz	w0, #31, b298 <mpc_mul_karatsuba@@Base+0x118>
    b1ec:	mov	x23, x24
    b1f0:	mov	w0, #0xffffffff            	// #-1
    b1f4:	ldr	x24, [sp, #128]
    b1f8:	str	w0, [sp, #152]
    b1fc:	mov	w0, #0x1                   	// #1
    b200:	str	w0, [sp, #104]
    b204:	ldr	x0, [sp, #136]
    b208:	mov	x1, x26
    b20c:	bl	53b0 <mpfr_cmpabs@plt>
    b210:	tbz	w0, #31, b2a8 <mpc_mul_karatsuba@@Base+0x128>
    b214:	ldr	w0, [sp, #104]
    b218:	mov	x25, x26
    b21c:	ldr	x26, [sp, #136]
    b220:	add	w0, w0, #0x1
    b224:	str	w0, [sp, #104]
    b228:	mov	w0, #0xffffffff            	// #-1
    b22c:	str	w0, [sp, #116]
    b230:	ldr	x0, [sp, #104]
    b234:	ldr	x27, [x19]
    b238:	ldr	x28, [x19, #32]
    b23c:	tbz	w0, #0, b2b0 <mpc_mul_karatsuba@@Base+0x130>
    b240:	ldr	w0, [sp, #156]
    b244:	str	x28, [sp, #176]
    b248:	asr	w0, w0, #4
    b24c:	str	w0, [sp, #120]
    b250:	ldr	w0, [sp, #120]
    b254:	cmp	w0, #0x2
    b258:	b.eq	b3c0 <mpc_mul_karatsuba@@Base+0x240>  // b.none
    b25c:	ldr	w1, [sp, #120]
    b260:	cmp	w0, #0x3
    b264:	mov	w0, #0x2                   	// #2
    b268:	csel	w0, w1, w0, ne  // ne = any
    b26c:	str	w0, [sp, #120]
    b270:	b	b2c8 <mpc_mul_karatsuba@@Base+0x148>
    b274:	ldp	x0, x1, [x19]
    b278:	stp	x0, x1, [sp, #336]
    b27c:	ldp	x0, x1, [x19, #16]
    b280:	stp	x0, x1, [sp, #352]
    b284:	ldp	x0, x1, [x19, #32]
    b288:	stp	x0, x1, [sp, #368]
    b28c:	ldp	x0, x1, [x19, #48]
    b290:	stp	x0, x1, [sp, #384]
    b294:	b	b1d0 <mpc_mul_karatsuba@@Base+0x50>
    b298:	mov	w0, #0x1                   	// #1
    b29c:	str	wzr, [sp, #104]
    b2a0:	str	w0, [sp, #152]
    b2a4:	b	b204 <mpc_mul_karatsuba@@Base+0x84>
    b2a8:	mov	w0, #0x1                   	// #1
    b2ac:	b	b22c <mpc_mul_karatsuba@@Base+0xac>
    b2b0:	ldr	w0, [sp, #156]
    b2b4:	str	x27, [sp, #176]
    b2b8:	and	w0, w0, #0xf
    b2bc:	str	w0, [sp, #120]
    b2c0:	ldr	w0, [sp, #104]
    b2c4:	cbnz	w0, b250 <mpc_mul_karatsuba@@Base+0xd0>
    b2c8:	ldr	x1, [x23]
    b2cc:	add	x20, sp, #0xf0
    b2d0:	ldr	x0, [x26]
    b2d4:	add	x21, sp, #0x110
    b2d8:	add	x22, sp, #0xd0
    b2dc:	add	x0, x1, x0
    b2e0:	str	x0, [sp, #160]
    b2e4:	mov	x1, x0
    b2e8:	mov	x0, x20
    b2ec:	bl	5440 <mpfr_init2@plt>
    b2f0:	ldr	x1, [x24]
    b2f4:	ldr	x0, [x25]
    b2f8:	add	x0, x1, x0
    b2fc:	str	x0, [sp, #168]
    b300:	mov	x1, x0
    b304:	mov	x0, x21
    b308:	bl	5440 <mpfr_init2@plt>
    b30c:	mov	x0, x22
    b310:	mov	x1, #0x2                   	// #2
    b314:	bl	5440 <mpfr_init2@plt>
    b318:	add	x0, sp, #0x130
    b31c:	mov	x1, #0x2                   	// #2
    b320:	bl	5440 <mpfr_init2@plt>
    b324:	mov	x2, x26
    b328:	mov	x1, x23
    b32c:	mov	x0, x20
    b330:	mov	w3, #0x0                   	// #0
    b334:	bl	4b70 <mpfr_mul@plt>
    b338:	cbz	w0, b3c8 <mpc_mul_karatsuba@@Base+0x248>
    b33c:	mov	w23, #0x0                   	// #0
    b340:	mov	w25, #0x0                   	// #0
    b344:	mov	w24, #0x0                   	// #0
    b348:	mov	x0, x22
    b34c:	bl	4d60 <mpfr_clear@plt>
    b350:	mov	x0, x20
    b354:	bl	4d60 <mpfr_clear@plt>
    b358:	mov	x0, x21
    b35c:	bl	4d60 <mpfr_clear@plt>
    b360:	add	x0, sp, #0x130
    b364:	bl	4d60 <mpfr_clear@plt>
    b368:	ldr	w0, [sp, #192]
    b36c:	cbz	w0, b378 <mpc_mul_karatsuba@@Base+0x1f8>
    b370:	add	x0, sp, #0x150
    b374:	bl	4a10 <mpc_clear@plt>
    b378:	cbz	w24, ba04 <mpc_mul_karatsuba@@Base+0x884>
    b37c:	cmp	w25, #0x0
    b380:	mov	w1, #0x2                   	// #2
    b384:	cset	w0, ne  // ne = any
    b388:	csel	w0, w0, w1, ge  // ge = tcont
    b38c:	cmp	w23, #0x0
    b390:	mov	w1, #0x4                   	// #4
    b394:	csel	w1, w23, w1, eq  // eq = none
    b398:	mov	w23, #0x8                   	// #8
    b39c:	csel	w23, w1, w23, ge  // ge = tcont
    b3a0:	orr	w0, w0, w23
    b3a4:	ldp	x19, x20, [sp, #16]
    b3a8:	ldp	x21, x22, [sp, #32]
    b3ac:	ldp	x23, x24, [sp, #48]
    b3b0:	ldp	x25, x26, [sp, #64]
    b3b4:	ldp	x27, x28, [sp, #80]
    b3b8:	ldp	x29, x30, [sp], #400
    b3bc:	ret
    b3c0:	mov	w0, #0x3                   	// #3
    b3c4:	b	b26c <mpc_mul_karatsuba@@Base+0xec>
    b3c8:	ldr	w0, [sp, #152]
    b3cc:	cmn	w0, #0x1
    b3d0:	b.ne	b3e4 <mpc_mul_karatsuba@@Base+0x264>  // b.any
    b3d4:	mov	x1, x20
    b3d8:	mov	x0, x20
    b3dc:	mov	w2, #0x0                   	// #0
    b3e0:	bl	4b80 <mpfr_neg@plt>
    b3e4:	mov	x2, x25
    b3e8:	mov	x1, x24
    b3ec:	mov	x0, x21
    b3f0:	mov	w3, #0x0                   	// #0
    b3f4:	bl	4b70 <mpfr_mul@plt>
    b3f8:	str	w0, [sp, #124]
    b3fc:	mov	w0, w0
    b400:	cbnz	w0, b33c <mpc_mul_karatsuba@@Base+0x1bc>
    b404:	ldr	w0, [sp, #116]
    b408:	cmn	w0, #0x1
    b40c:	b.ne	b420 <mpc_mul_karatsuba@@Base+0x2a0>  // b.any
    b410:	mov	x1, x21
    b414:	mov	x0, x21
    b418:	mov	w2, #0x0                   	// #0
    b41c:	bl	4b80 <mpfr_neg@plt>
    b420:	mov	x1, x21
    b424:	mov	x0, x20
    b428:	bl	53b0 <mpfr_cmpabs@plt>
    b42c:	cmp	w0, #0x0
    b430:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
    b434:	ldr	x1, [sp, #256]
    b438:	b.le	b4a8 <mpc_mul_karatsuba@@Base+0x328>
    b43c:	cmp	x1, x2
    b440:	b.ge	b460 <mpc_mul_karatsuba@@Base+0x2e0>  // b.tcont
    b444:	mov	x0, #0x2                   	// #2
    b448:	movk	x0, #0x8000, lsl #48
    b44c:	cmp	x1, x0
    b450:	b.ne	b458 <mpc_mul_karatsuba@@Base+0x2d8>  // b.any
    b454:	bl	4b00 <mpfr_set_erangeflag@plt>
    b458:	mov	w0, #0x0                   	// #0
    b45c:	b	b468 <mpc_mul_karatsuba@@Base+0x2e8>
    b460:	ldr	w0, [sp, #248]
    b464:	lsl	w0, w0, #1
    b468:	ldr	x1, [sp, #288]
    b46c:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
    b470:	cmp	x1, x2
    b474:	b.ge	b49c <mpc_mul_karatsuba@@Base+0x31c>  // b.tcont
    b478:	mov	x2, #0x2                   	// #2
    b47c:	movk	x2, #0x8000, lsl #48
    b480:	cmp	x1, x2
    b484:	b.ne	b7dc <mpc_mul_karatsuba@@Base+0x65c>  // b.any
    b488:	str	w0, [sp, #96]
    b48c:	bl	4b00 <mpfr_set_erangeflag@plt>
    b490:	ldr	w0, [sp, #96]
    b494:	mov	w1, #0x0                   	// #0
    b498:	b	b4a0 <mpc_mul_karatsuba@@Base+0x320>
    b49c:	ldr	w1, [sp, #280]
    b4a0:	sub	w0, w0, w1
    b4a4:	b	b50c <mpc_mul_karatsuba@@Base+0x38c>
    b4a8:	b.ne	b798 <mpc_mul_karatsuba@@Base+0x618>  // b.any
    b4ac:	cmp	x1, x2
    b4b0:	b.ge	b780 <mpc_mul_karatsuba@@Base+0x600>  // b.tcont
    b4b4:	mov	x2, #0x2                   	// #2
    b4b8:	movk	x2, #0x8000, lsl #48
    b4bc:	cmp	x1, x2
    b4c0:	b.ne	b788 <mpc_mul_karatsuba@@Base+0x608>  // b.any
    b4c4:	str	w0, [sp, #96]
    b4c8:	bl	4b00 <mpfr_set_erangeflag@plt>
    b4cc:	ldr	w0, [sp, #96]
    b4d0:	mov	w1, #0x0                   	// #0
    b4d4:	ldr	x2, [sp, #288]
    b4d8:	mov	x3, #0x8000000000000003    	// #-9223372036854775805
    b4dc:	cmp	x2, x3
    b4e0:	b.ge	b790 <mpc_mul_karatsuba@@Base+0x610>  // b.tcont
    b4e4:	mov	x3, #0x2                   	// #2
    b4e8:	movk	x3, #0x8000, lsl #48
    b4ec:	cmp	x2, x3
    b4f0:	b.ne	b508 <mpc_mul_karatsuba@@Base+0x388>  // b.any
    b4f4:	str	w1, [sp, #96]
    b4f8:	str	w0, [sp, #144]
    b4fc:	bl	4b00 <mpfr_set_erangeflag@plt>
    b500:	ldr	w1, [sp, #96]
    b504:	ldr	w0, [sp, #144]
    b508:	sub	w0, w1, w0
    b50c:	ldr	x1, [x23, #16]
    b510:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
    b514:	cmp	x1, x2
    b518:	b.ge	b7e4 <mpc_mul_karatsuba@@Base+0x664>  // b.tcont
    b51c:	mov	x2, #0x2                   	// #2
    b520:	movk	x2, #0x8000, lsl #48
    b524:	cmp	x1, x2
    b528:	b.ne	b7ec <mpc_mul_karatsuba@@Base+0x66c>  // b.any
    b52c:	str	w0, [sp, #96]
    b530:	bl	4b00 <mpfr_set_erangeflag@plt>
    b534:	ldr	w0, [sp, #96]
    b538:	mov	w1, #0x0                   	// #0
    b53c:	ldr	w2, [sp, #152]
    b540:	mov	x3, #0x8000000000000003    	// #-9223372036854775805
    b544:	mul	w2, w2, w1
    b548:	ldr	w1, [sp, #116]
    b54c:	mul	w2, w2, w1
    b550:	ldr	x1, [x25, #16]
    b554:	cmp	x1, x3
    b558:	b.ge	b7f4 <mpc_mul_karatsuba@@Base+0x674>  // b.tcont
    b55c:	mov	x3, #0x2                   	// #2
    b560:	movk	x3, #0x8000, lsl #48
    b564:	cmp	x1, x3
    b568:	b.ne	b7fc <mpc_mul_karatsuba@@Base+0x67c>  // b.any
    b56c:	str	w2, [sp, #96]
    b570:	str	w0, [sp, #144]
    b574:	bl	4b00 <mpfr_set_erangeflag@plt>
    b578:	ldr	w2, [sp, #96]
    b57c:	mov	w1, #0x0                   	// #0
    b580:	ldr	w0, [sp, #144]
    b584:	mul	w2, w2, w1
    b588:	mul	w0, w0, w2
    b58c:	tbz	w0, #31, b5cc <mpc_mul_karatsuba@@Base+0x44c>
    b590:	mov	x1, x21
    b594:	mov	x0, x20
    b598:	str	w2, [sp, #96]
    b59c:	bl	5090 <mpfr_swap@plt>
    b5a0:	ldr	w0, [sp, #152]
    b5a4:	ldr	w1, [sp, #116]
    b5a8:	str	w0, [sp, #116]
    b5ac:	mov	x0, x24
    b5b0:	ldr	w2, [sp, #96]
    b5b4:	mov	x24, x26
    b5b8:	mov	x26, x0
    b5bc:	mov	x0, x23
    b5c0:	mov	x23, x25
    b5c4:	mov	x25, x0
    b5c8:	str	w1, [sp, #152]
    b5cc:	cmp	x28, x27
    b5d0:	mov	w1, #0x2                   	// #2
    b5d4:	csel	x0, x28, x27, ge  // ge = tcont
    b5d8:	cmp	w2, #0x0
    b5dc:	add	x27, sp, #0x130
    b5e0:	str	x0, [sp, #96]
    b5e4:	mov	w0, #0x3                   	// #3
    b5e8:	csel	w0, w1, w0, gt
    b5ec:	str	wzr, [sp, #196]
    b5f0:	str	w0, [sp, #200]
    b5f4:	add	x0, sp, #0xd0
    b5f8:	str	x0, [sp, #184]
    b5fc:	ldr	x0, [sp, #96]
    b600:	bl	4d20 <mpc_ceil_log2@plt>
    b604:	add	x0, x0, #0x3
    b608:	ldr	x1, [sp, #96]
    b60c:	add	x0, x1, x0
    b610:	str	x0, [sp, #96]
    b614:	mov	x1, x0
    b618:	mov	x0, x22
    b61c:	bl	4c80 <mpfr_set_prec@plt>
    b620:	ldr	x1, [sp, #96]
    b624:	mov	x0, x27
    b628:	bl	4c80 <mpfr_set_prec@plt>
    b62c:	ldr	w0, [sp, #152]
    b630:	mov	x2, x23
    b634:	mov	x1, x24
    b638:	mov	w3, #0x4                   	// #4
    b63c:	cmn	w0, #0x1
    b640:	mov	x0, x22
    b644:	b.ne	b804 <mpc_mul_karatsuba@@Base+0x684>  // b.any
    b648:	bl	4a60 <mpfr_sub@plt>
    b64c:	mov	w28, w0
    b650:	ldr	w0, [sp, #116]
    b654:	mov	x2, x26
    b658:	mov	x1, x25
    b65c:	cmn	w0, #0x1
    b660:	mov	w3, #0x4                   	// #4
    b664:	mov	x0, x27
    b668:	b.ne	b80c <mpc_mul_karatsuba@@Base+0x68c>  // b.any
    b66c:	bl	4e60 <mpfr_add@plt>
    b670:	orr	w28, w28, w0
    b674:	ldr	w0, [sp, #116]
    b678:	cmn	w0, #0x1
    b67c:	b.ne	b690 <mpc_mul_karatsuba@@Base+0x510>  // b.any
    b680:	mov	x1, x27
    b684:	mov	x0, x27
    b688:	mov	w2, #0x0                   	// #0
    b68c:	bl	4b80 <mpfr_neg@plt>
    b690:	ldr	x0, [sp, #96]
    b694:	cbnz	w28, b814 <mpc_mul_karatsuba@@Base+0x694>
    b698:	lsl	x0, x0, #1
    b69c:	mov	w2, #0x0                   	// #0
    b6a0:	mov	x1, x0
    b6a4:	str	x0, [sp, #144]
    b6a8:	mov	x0, x22
    b6ac:	bl	5370 <mpfr_prec_round@plt>
    b6b0:	mov	x2, x27
    b6b4:	mov	x1, x22
    b6b8:	mov	x0, x22
    b6bc:	mov	w3, #0x4                   	// #4
    b6c0:	bl	4b70 <mpfr_mul@plt>
    b6c4:	orr	w28, w28, w0
    b6c8:	cbnz	w28, b718 <mpc_mul_karatsuba@@Base+0x598>
    b6cc:	ldr	x1, [sp, #256]
    b6d0:	ldr	x0, [sp, #288]
    b6d4:	ldr	x2, [sp, #168]
    b6d8:	subs	x1, x1, x0
    b6dc:	ldr	x0, [sp, #160]
    b6e0:	cneg	x1, x1, mi  // mi = first
    b6e4:	cmp	x0, x2
    b6e8:	csel	x0, x0, x2, ge  // ge = tcont
    b6ec:	add	x1, x1, x0
    b6f0:	ldr	x0, [sp, #144]
    b6f4:	add	x1, x1, #0x1
    b6f8:	cmp	x0, x1
    b6fc:	csel	x1, x0, x1, le
    b700:	ldr	x0, [sp, #96]
    b704:	cmp	x1, x0
    b708:	b.le	b718 <mpc_mul_karatsuba@@Base+0x598>
    b70c:	mov	x0, x27
    b710:	mov	w2, #0x0                   	// #0
    b714:	bl	5370 <mpfr_prec_round@plt>
    b718:	ldr	w3, [sp, #200]
    b71c:	mov	x1, x20
    b720:	mov	x2, x21
    b724:	mov	x0, x27
    b728:	bl	4a60 <mpfr_sub@plt>
    b72c:	orr	w28, w28, w0
    b730:	ldr	x0, [sp, #224]
    b734:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    b738:	cmp	x0, x1
    b73c:	b.ge	b81c <mpc_mul_karatsuba@@Base+0x69c>  // b.tcont
    b740:	mov	x1, #0x2                   	// #2
    b744:	movk	x1, #0x8000, lsl #48
    b748:	cmp	x0, x1
    b74c:	b.ne	b754 <mpc_mul_karatsuba@@Base+0x5d4>  // b.any
    b750:	bl	4b00 <mpfr_set_erangeflag@plt>
    b754:	ldr	x0, [sp, #320]
    b758:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    b75c:	cmp	x0, x1
    b760:	b.ge	b82c <mpc_mul_karatsuba@@Base+0x6ac>  // b.tcont
    b764:	mov	x1, #0x2                   	// #2
    b768:	movk	x1, #0x8000, lsl #48
    b76c:	cmp	x0, x1
    b770:	b.ne	b778 <mpc_mul_karatsuba@@Base+0x5f8>  // b.any
    b774:	bl	4b00 <mpfr_set_erangeflag@plt>
    b778:	mov	w5, #0x3                   	// #3
    b77c:	b	b83c <mpc_mul_karatsuba@@Base+0x6bc>
    b780:	ldr	w1, [sp, #248]
    b784:	b	b4d4 <mpc_mul_karatsuba@@Base+0x354>
    b788:	mov	w1, #0x0                   	// #0
    b78c:	b	b4d4 <mpc_mul_karatsuba@@Base+0x354>
    b790:	ldr	w0, [sp, #280]
    b794:	b	b508 <mpc_mul_karatsuba@@Base+0x388>
    b798:	cmp	x1, x2
    b79c:	b.ge	b7bc <mpc_mul_karatsuba@@Base+0x63c>  // b.tcont
    b7a0:	mov	x0, #0x2                   	// #2
    b7a4:	movk	x0, #0x8000, lsl #48
    b7a8:	cmp	x1, x0
    b7ac:	b.ne	b7b4 <mpc_mul_karatsuba@@Base+0x634>  // b.any
    b7b0:	bl	4b00 <mpfr_set_erangeflag@plt>
    b7b4:	mov	w0, #0x0                   	// #0
    b7b8:	b	b7c0 <mpc_mul_karatsuba@@Base+0x640>
    b7bc:	ldr	w0, [sp, #248]
    b7c0:	ldr	x1, [sp, #288]
    b7c4:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
    b7c8:	cmp	x1, x2
    b7cc:	b.lt	b478 <mpc_mul_karatsuba@@Base+0x2f8>  // b.tstop
    b7d0:	ldr	w1, [sp, #280]
    b7d4:	lsl	w1, w1, #1
    b7d8:	b	b4a0 <mpc_mul_karatsuba@@Base+0x320>
    b7dc:	mov	w1, #0x0                   	// #0
    b7e0:	b	b4a0 <mpc_mul_karatsuba@@Base+0x320>
    b7e4:	ldr	w1, [x23, #8]
    b7e8:	b	b53c <mpc_mul_karatsuba@@Base+0x3bc>
    b7ec:	mov	w1, #0x0                   	// #0
    b7f0:	b	b53c <mpc_mul_karatsuba@@Base+0x3bc>
    b7f4:	ldr	w1, [x25, #8]
    b7f8:	b	b584 <mpc_mul_karatsuba@@Base+0x404>
    b7fc:	mov	w1, #0x0                   	// #0
    b800:	b	b584 <mpc_mul_karatsuba@@Base+0x404>
    b804:	bl	4e60 <mpfr_add@plt>
    b808:	b	b64c <mpc_mul_karatsuba@@Base+0x4cc>
    b80c:	bl	4a60 <mpfr_sub@plt>
    b810:	b	b670 <mpc_mul_karatsuba@@Base+0x4f0>
    b814:	str	x0, [sp, #144]
    b818:	b	b6b0 <mpc_mul_karatsuba@@Base+0x530>
    b81c:	ldr	w0, [sp, #216]
    b820:	cbz	w0, b754 <mpc_mul_karatsuba@@Base+0x5d4>
    b824:	ldr	w5, [sp, #200]
    b828:	b	b83c <mpc_mul_karatsuba@@Base+0x6bc>
    b82c:	ldr	w0, [sp, #312]
    b830:	cmp	w0, #0x0
    b834:	cset	w5, le
    b838:	add	w5, w5, #0x2
    b83c:	ldr	x1, [sp, #184]
    b840:	mov	w3, w5
    b844:	mov	x2, x27
    b848:	str	w5, [sp, #204]
    b84c:	mov	x0, x1
    b850:	bl	4e60 <mpfr_add@plt>
    b854:	orr	w28, w28, w0
    b858:	ldr	w5, [sp, #204]
    b85c:	cbz	w28, b940 <mpc_mul_karatsuba@@Base+0x7c0>
    b860:	ldr	w0, [sp, #120]
    b864:	mov	w2, w5
    b868:	mov	w3, #0x1                   	// #1
    b86c:	cmp	w0, #0x0
    b870:	ldr	x0, [sp, #176]
    b874:	cinc	x4, x0, eq  // eq = none
    b878:	ldr	x0, [sp, #144]
    b87c:	sub	x1, x0, #0x3
    b880:	ldr	x0, [sp, #184]
    b884:	bl	5450 <mpfr_can_round@plt>
    b888:	cmp	w0, #0x0
    b88c:	ldr	w1, [sp, #196]
    b890:	mov	w2, #0x1                   	// #1
    b894:	str	w2, [sp, #196]
    b898:	eor	w1, w1, #0x1
    b89c:	csel	w1, w1, wzr, eq  // eq = none
    b8a0:	cbnz	w1, b5fc <mpc_mul_karatsuba@@Base+0x47c>
    b8a4:	cbz	w0, b33c <mpc_mul_karatsuba@@Base+0x1bc>
    b8a8:	ldr	x0, [sp, #224]
    b8ac:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    b8b0:	cmp	x0, x1
    b8b4:	b.ge	b934 <mpc_mul_karatsuba@@Base+0x7b4>  // b.tcont
    b8b8:	mov	x1, #0x2                   	// #2
    b8bc:	movk	x1, #0x8000, lsl #48
    b8c0:	cmp	x0, x1
    b8c4:	b.ne	b8cc <mpc_mul_karatsuba@@Base+0x74c>  // b.any
    b8c8:	bl	4b00 <mpfr_set_erangeflag@plt>
    b8cc:	ldr	w0, [sp, #156]
    b8d0:	add	x24, sp, #0x150
    b8d4:	and	w25, w0, #0xf
    b8d8:	asr	w26, w0, #4
    b8dc:	ldr	w0, [sp, #104]
    b8e0:	cbnz	w0, b954 <mpc_mul_karatsuba@@Base+0x7d4>
    b8e4:	ldr	w3, [sp, #216]
    b8e8:	mov	w2, w25
    b8ec:	mov	x1, x22
    b8f0:	mov	x0, x24
    b8f4:	bl	51d0 <mpfr_set4@plt>
    b8f8:	mov	w25, w0
    b8fc:	mov	w3, w26
    b900:	add	x0, x24, #0x20
    b904:	mov	x2, x21
    b908:	mov	x1, x20
    b90c:	cbnz	w25, b948 <mpc_mul_karatsuba@@Base+0x7c8>
    b910:	bl	4e60 <mpfr_add@plt>
    b914:	ldr	w25, [sp, #124]
    b918:	mov	w23, w0
    b91c:	mov	x1, x24
    b920:	mov	x0, x19
    b924:	mov	w2, #0x0                   	// #0
    b928:	mov	w24, #0x1                   	// #1
    b92c:	bl	5580 <mpc_set@plt>
    b930:	b	b348 <mpc_mul_karatsuba@@Base+0x1c8>
    b934:	ldr	w0, [sp, #216]
    b938:	str	w0, [sp, #124]
    b93c:	b	b8cc <mpc_mul_karatsuba@@Base+0x74c>
    b940:	str	wzr, [sp, #124]
    b944:	b	b8cc <mpc_mul_karatsuba@@Base+0x74c>
    b948:	bl	4e60 <mpfr_add@plt>
    b94c:	mov	w23, w0
    b950:	b	b91c <mpc_mul_karatsuba@@Base+0x79c>
    b954:	ldr	w0, [sp, #104]
    b958:	cmp	w0, #0x1
    b95c:	b.ne	b99c <mpc_mul_karatsuba@@Base+0x81c>  // b.any
    b960:	mov	w2, w26
    b964:	mov	x1, x22
    b968:	add	x0, x24, #0x20
    b96c:	bl	4b80 <mpfr_neg@plt>
    b970:	mov	w23, w0
    b974:	cbnz	w0, b980 <mpc_mul_karatsuba@@Base+0x800>
    b978:	ldr	w0, [sp, #124]
    b97c:	neg	w23, w0
    b980:	mov	w3, w25
    b984:	mov	x2, x21
    b988:	mov	x1, x20
    b98c:	mov	x0, x24
    b990:	bl	4e60 <mpfr_add@plt>
    b994:	mov	w25, w0
    b998:	b	b91c <mpc_mul_karatsuba@@Base+0x79c>
    b99c:	mov	w2, w25
    b9a0:	mov	x1, x22
    b9a4:	mov	x0, x24
    b9a8:	bl	4b80 <mpfr_neg@plt>
    b9ac:	mov	w25, w0
    b9b0:	cbnz	w0, b9bc <mpc_mul_karatsuba@@Base+0x83c>
    b9b4:	ldr	w0, [sp, #124]
    b9b8:	neg	w25, w0
    b9bc:	cmp	w26, #0x2
    b9c0:	b.eq	b9fc <mpc_mul_karatsuba@@Base+0x87c>  // b.none
    b9c4:	cmp	w26, #0x3
    b9c8:	mov	w3, #0x2                   	// #2
    b9cc:	csel	w3, w26, w3, ne  // ne = any
    b9d0:	add	x27, x24, #0x20
    b9d4:	mov	x2, x21
    b9d8:	mov	x1, x20
    b9dc:	mov	x0, x27
    b9e0:	bl	4e60 <mpfr_add@plt>
    b9e4:	neg	w23, w0
    b9e8:	mov	w2, w26
    b9ec:	mov	x1, x27
    b9f0:	mov	x0, x27
    b9f4:	bl	4b80 <mpfr_neg@plt>
    b9f8:	b	b91c <mpc_mul_karatsuba@@Base+0x79c>
    b9fc:	mov	w3, #0x3                   	// #3
    ba00:	b	b9d0 <mpc_mul_karatsuba@@Base+0x850>
    ba04:	ldp	x1, x2, [sp, #128]
    ba08:	mov	x0, x19
    ba0c:	ldr	w3, [sp, #156]
    ba10:	bl	4eb0 <mpc_mul_naive@plt>
    ba14:	b	b3a4 <mpc_mul_karatsuba@@Base+0x224>
    ba18:	stp	x29, x30, [sp, #-32]!
    ba1c:	mov	w4, #0x1                   	// #1
    ba20:	mov	x9, x1
    ba24:	mov	x29, sp
    ba28:	stp	x19, x20, [sp, #16]
    ba2c:	mov	x20, x0
    ba30:	ldr	w0, [x1, #8]
    ba34:	ldr	x11, [x1, #16]
    ba38:	cmp	w0, #0x0
    ba3c:	ldr	w0, [x1, #40]
    ba40:	cneg	w7, w4, lt  // lt = tstop
    ba44:	mov	x1, #0x2                   	// #2
    ba48:	cmp	w0, #0x0
    ba4c:	ldr	w0, [x2, #8]
    ba50:	cneg	w8, w4, lt  // lt = tstop
    ba54:	movk	x1, #0x8000, lsl #48
    ba58:	cmp	w0, #0x0
    ba5c:	ldr	w0, [x2, #40]
    ba60:	cneg	w6, w4, lt  // lt = tstop
    ba64:	cmp	w0, #0x0
    ba68:	cneg	w4, w4, lt  // lt = tstop
    ba6c:	cmp	x11, x1
    ba70:	b.eq	bac0 <mpc_mul_karatsuba@@Base+0x940>  // b.none
    ba74:	ldr	x5, [x9, #48]
    ba78:	cmp	x5, x1
    ba7c:	b.eq	bac0 <mpc_mul_karatsuba@@Base+0x940>  // b.none
    ba80:	ldr	x0, [x2, #16]
    ba84:	cmp	x0, x1
    ba88:	b.eq	bac0 <mpc_mul_karatsuba@@Base+0x940>  // b.none
    ba8c:	ldr	x3, [x2, #48]
    ba90:	cmp	x3, x1
    ba94:	b.eq	bac0 <mpc_mul_karatsuba@@Base+0x940>  // b.none
    ba98:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    ba9c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    baa0:	cmp	x11, x10
    baa4:	b.ne	bbd4 <mpc_mul_karatsuba@@Base+0xa54>  // b.any
    baa8:	cmp	x0, x1
    baac:	b.eq	bbb8 <mpc_mul_karatsuba@@Base+0xa38>  // b.none
    bab0:	cmp	x5, x11
    bab4:	b.ne	bca0 <mpc_mul_karatsuba@@Base+0xb20>  // b.any
    bab8:	cmp	x3, x1
    babc:	b.ne	bcb0 <mpc_mul_karatsuba@@Base+0xb30>  // b.any
    bac0:	mov	w19, #0x0                   	// #0
    bac4:	mov	w1, #0x0                   	// #0
    bac8:	b	bae8 <mpc_mul_karatsuba@@Base+0x968>
    bacc:	cmp	x3, x11
    bad0:	b.ne	bcc0 <mpc_mul_karatsuba@@Base+0xb40>  // b.any
    bad4:	mov	w1, #0x0                   	// #0
    bad8:	mov	x3, #0x8000000000000003    	// #-9223372036854775805
    badc:	cmp	x0, x3
    bae0:	b.eq	bce4 <mpc_mul_karatsuba@@Base+0xb64>  // b.none
    bae4:	mul	w19, w7, w4
    bae8:	orr	w5, w1, w19
    baec:	cbnz	w5, bb90 <mpc_mul_karatsuba@@Base+0xa10>
    baf0:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    baf4:	add	x0, x11, x0
    baf8:	cmp	x0, #0x1
    bafc:	b.ls	bc64 <mpc_mul_karatsuba@@Base+0xae4>  // b.plast
    bb00:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    bb04:	cmp	x11, x0
    bb08:	cset	w3, eq  // eq = none
    bb0c:	ldr	x1, [x9, #48]
    bb10:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    bb14:	add	x0, x1, x0
    bb18:	cmp	x0, #0x1
    bb1c:	b.ls	bb2c <mpc_mul_karatsuba@@Base+0x9ac>  // b.plast
    bb20:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    bb24:	cmp	x1, x0
    bb28:	cset	w5, eq  // eq = none
    bb2c:	ldr	x1, [x2, #16]
    bb30:	ldr	x0, [x2, #48]
    bb34:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
    bb38:	cmp	x1, x2
    bb3c:	mov	x9, x2
    bb40:	b.eq	bc6c <mpc_mul_karatsuba@@Base+0xaec>  // b.none
    bb44:	cmp	x0, x2
    bb48:	b.eq	bc6c <mpc_mul_karatsuba@@Base+0xaec>  // b.none
    bb4c:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
    bb50:	add	x1, x1, x2
    bb54:	cmp	x1, #0x1
    bb58:	add	x0, x0, x2
    bb5c:	cset	w19, hi  // hi = pmore
    bb60:	cmp	x0, #0x1
    bb64:	cset	w0, hi  // hi = pmore
    bb68:	mul	w2, w7, w3
    bb6c:	mul	w5, w8, w5
    bb70:	mul	w1, w2, w6
    bb74:	mul	w3, w5, w4
    bb78:	mul	w5, w5, w6
    bb7c:	mul	w2, w2, w4
    bb80:	mul	w1, w1, w19
    bb84:	msub	w1, w3, w0, w1
    bb88:	mul	w19, w5, w19
    bb8c:	madd	w19, w2, w0, w19
    bb90:	mov	x0, x20
    bb94:	cbnz	w1, bc80 <mpc_mul_karatsuba@@Base+0xb00>
    bb98:	bl	4a40 <mpfr_set_nan@plt>
    bb9c:	add	x0, x20, #0x20
    bba0:	cbnz	w19, bc88 <mpc_mul_karatsuba@@Base+0xb08>
    bba4:	bl	4a40 <mpfr_set_nan@plt>
    bba8:	mov	w0, #0x0                   	// #0
    bbac:	ldp	x19, x20, [sp, #16]
    bbb0:	ldp	x29, x30, [sp], #32
    bbb4:	ret
    bbb8:	mov	w1, #0x0                   	// #0
    bbbc:	b	bcc4 <mpc_mul_karatsuba@@Base+0xb44>
    bbc0:	mul	w0, w7, w4
    bbc4:	mul	w3, w8, w6
    bbc8:	cmp	w0, w3
    bbcc:	b.ne	bce4 <mpc_mul_karatsuba@@Base+0xb64>  // b.any
    bbd0:	b	bae4 <mpc_mul_karatsuba@@Base+0x964>
    bbd4:	cmp	x3, x1
    bbd8:	b.eq	bc54 <mpc_mul_karatsuba@@Base+0xad4>  // b.none
    bbdc:	cmp	x11, x1
    bbe0:	b.ne	bc04 <mpc_mul_karatsuba@@Base+0xa84>  // b.any
    bbe4:	cmp	x0, x10
    bbe8:	b.ne	bc1c <mpc_mul_karatsuba@@Base+0xa9c>  // b.any
    bbec:	mov	w1, #0x0                   	// #0
    bbf0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    bbf4:	cmp	x3, x0
    bbf8:	b.eq	bce4 <mpc_mul_karatsuba@@Base+0xb64>  // b.none
    bbfc:	mul	w19, w8, w6
    bc00:	b	bae8 <mpc_mul_karatsuba@@Base+0x968>
    bc04:	cmp	x0, x10
    bc08:	b.ne	bc1c <mpc_mul_karatsuba@@Base+0xa9c>  // b.any
    bc0c:	mul	w1, w7, w6
    bc10:	mul	w5, w8, w4
    bc14:	cmp	w1, w5
    bc18:	b.eq	bc5c <mpc_mul_karatsuba@@Base+0xadc>  // b.none
    bc1c:	mneg	w1, w8, w4
    bc20:	mov	x5, #0x8000000000000001    	// #-9223372036854775807
    bc24:	cmp	x0, x5
    bc28:	b.eq	bce4 <mpc_mul_karatsuba@@Base+0xb64>  // b.none
    bc2c:	cmp	x11, x5
    bc30:	b.eq	bbf0 <mpc_mul_karatsuba@@Base+0xa70>  // b.none
    bc34:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    bc38:	cmp	x3, x0
    bc3c:	b.ne	bbfc <mpc_mul_karatsuba@@Base+0xa7c>  // b.any
    bc40:	mul	w0, w7, w4
    bc44:	mul	w3, w8, w6
    bc48:	cmp	w0, w3
    bc4c:	b.ne	bce4 <mpc_mul_karatsuba@@Base+0xb64>  // b.any
    bc50:	b	bbfc <mpc_mul_karatsuba@@Base+0xa7c>
    bc54:	mov	w1, #0x0                   	// #0
    bc58:	b	bc20 <mpc_mul_karatsuba@@Base+0xaa0>
    bc5c:	mov	w1, #0x0                   	// #0
    bc60:	b	bc34 <mpc_mul_karatsuba@@Base+0xab4>
    bc64:	mov	w3, #0x0                   	// #0
    bc68:	b	bb0c <mpc_mul_karatsuba@@Base+0x98c>
    bc6c:	cmp	x1, x9
    bc70:	cset	w19, eq  // eq = none
    bc74:	cmp	x0, x9
    bc78:	cset	w0, eq  // eq = none
    bc7c:	b	bb68 <mpc_mul_karatsuba@@Base+0x9e8>
    bc80:	bl	5120 <mpfr_set_inf@plt>
    bc84:	b	bb9c <mpc_mul_karatsuba@@Base+0xa1c>
    bc88:	mov	w1, w19
    bc8c:	bl	5120 <mpfr_set_inf@plt>
    bc90:	b	bba8 <mpc_mul_karatsuba@@Base+0xa28>
    bc94:	cmp	x5, x10
    bc98:	b.eq	bad8 <mpc_mul_karatsuba@@Base+0x958>  // b.none
    bc9c:	b	bae4 <mpc_mul_karatsuba@@Base+0x964>
    bca0:	cmp	x5, x1
    bca4:	b.eq	bacc <mpc_mul_karatsuba@@Base+0x94c>  // b.none
    bca8:	cmp	x3, x11
    bcac:	b.ne	bcc0 <mpc_mul_karatsuba@@Base+0xb40>  // b.any
    bcb0:	mul	w1, w7, w6
    bcb4:	mul	w10, w8, w4
    bcb8:	cmp	w1, w10
    bcbc:	b.eq	bbb8 <mpc_mul_karatsuba@@Base+0xa38>  // b.none
    bcc0:	mul	w1, w7, w6
    bcc4:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    bcc8:	cmp	x3, x10
    bccc:	b.eq	bce4 <mpc_mul_karatsuba@@Base+0xb64>  // b.none
    bcd0:	mov	x3, #0x8000000000000003    	// #-9223372036854775805
    bcd4:	cmp	x5, x3
    bcd8:	b.ne	bc94 <mpc_mul_karatsuba@@Base+0xb14>  // b.any
    bcdc:	cmp	x0, x10
    bce0:	b.ne	bbc0 <mpc_mul_karatsuba@@Base+0xa40>  // b.any
    bce4:	mov	w19, #0x0                   	// #0
    bce8:	b	bae8 <mpc_mul_karatsuba@@Base+0x968>
    bcec:	stp	x29, x30, [sp, #-80]!
    bcf0:	mov	x29, sp
    bcf4:	ldr	w6, [x1, #8]
    bcf8:	ldr	w5, [x1, #40]
    bcfc:	cmp	w6, #0x0
    bd00:	stp	x19, x20, [sp, #16]
    bd04:	mov	w19, #0x1                   	// #1
    bd08:	stp	x25, x26, [sp, #64]
    bd0c:	cneg	w26, w19, lt  // lt = tstop
    bd10:	cmp	w5, #0x0
    bd14:	ldr	w5, [x2, #8]
    bd18:	mov	x20, x0
    bd1c:	ldr	w4, [x2, #40]
    bd20:	stp	x23, x24, [sp, #48]
    bd24:	cneg	w24, w19, lt  // lt = tstop
    bd28:	cmp	w5, #0x0
    bd2c:	cneg	w23, w19, lt  // lt = tstop
    bd30:	cmp	w4, #0x0
    bd34:	cneg	w25, w19, lt  // lt = tstop
    bd38:	stp	x21, x22, [sp, #32]
    bd3c:	mov	w21, w3
    bd40:	bl	5160 <mpc_mul_fr@plt>
    bd44:	mov	w22, w0
    bd48:	ldr	x1, [x20, #16]
    bd4c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    bd50:	cmp	x1, x0
    bd54:	b.ne	bd80 <mpc_mul_karatsuba@@Base+0xc00>  // b.any
    bd58:	and	w0, w21, #0xf
    bd5c:	cmp	w0, #0x3
    bd60:	b.eq	bdd8 <mpc_mul_karatsuba@@Base+0xc58>  // b.none
    bd64:	cmp	w26, w23
    bd68:	ccmp	w24, w25, #0x0, ne  // ne = any
    bd6c:	cneg	w3, w19, eq  // eq = none
    bd70:	mov	x1, x20
    bd74:	mov	x0, x20
    bd78:	mov	w2, #0x0                   	// #0
    bd7c:	bl	51d0 <mpfr_set4@plt>
    bd80:	ldr	x1, [x20, #48]
    bd84:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    bd88:	cmp	x1, x0
    bd8c:	b.ne	bdbc <mpc_mul_karatsuba@@Base+0xc3c>  // b.any
    bd90:	asr	w21, w21, #4
    bd94:	add	x1, x20, #0x20
    bd98:	cmp	w21, #0x3
    bd9c:	b.eq	bde0 <mpc_mul_karatsuba@@Base+0xc60>  // b.none
    bda0:	cmp	w26, w25
    bda4:	mov	w3, #0x1                   	// #1
    bda8:	ccmp	w24, w23, #0x4, ne  // ne = any
    bdac:	cneg	w3, w3, ne  // ne = any
    bdb0:	mov	x0, x1
    bdb4:	mov	w2, #0x0                   	// #0
    bdb8:	bl	51d0 <mpfr_set4@plt>
    bdbc:	mov	w0, w22
    bdc0:	ldp	x19, x20, [sp, #16]
    bdc4:	ldp	x21, x22, [sp, #32]
    bdc8:	ldp	x23, x24, [sp, #48]
    bdcc:	ldp	x25, x26, [sp, #64]
    bdd0:	ldp	x29, x30, [sp], #80
    bdd4:	ret
    bdd8:	mov	w3, #0xffffffff            	// #-1
    bddc:	b	bd70 <mpc_mul_karatsuba@@Base+0xbf0>
    bde0:	mov	w3, #0xffffffff            	// #-1
    bde4:	b	bdb0 <mpc_mul_karatsuba@@Base+0xc30>

000000000000bde8 <mpc_mul@@Base>:
    bde8:	stp	x29, x30, [sp, #-32]!
    bdec:	mov	x7, #0x8000000000000003    	// #-9223372036854775805
    bdf0:	mov	x4, x2
    bdf4:	mov	x29, sp
    bdf8:	ldr	x5, [x1, #16]
    bdfc:	str	x19, [sp, #16]
    be00:	mov	x19, x0
    be04:	cmp	x5, x7
    be08:	b.eq	be18 <mpc_mul@@Base+0x30>  // b.none
    be0c:	ldr	x9, [x1, #48]
    be10:	cmp	x9, x7
    be14:	b.ne	be2c <mpc_mul@@Base+0x44>  // b.any
    be18:	mov	x2, x4
    be1c:	mov	x0, x19
    be20:	ldr	x19, [sp, #16]
    be24:	ldp	x29, x30, [sp], #32
    be28:	b	ba18 <mpc_mul_karatsuba@@Base+0x898>
    be2c:	ldr	x2, [x2, #16]
    be30:	cmp	x2, x7
    be34:	b.eq	be44 <mpc_mul@@Base+0x5c>  // b.none
    be38:	ldr	x8, [x4, #48]
    be3c:	cmp	x8, x7
    be40:	b.ne	be50 <mpc_mul@@Base+0x68>  // b.any
    be44:	mov	x2, x1
    be48:	mov	x1, x4
    be4c:	b	be1c <mpc_mul@@Base+0x34>
    be50:	mov	x7, #0x2                   	// #2
    be54:	movk	x7, #0x8000, lsl #48
    be58:	cmp	x5, x7
    be5c:	b.eq	bf98 <mpc_mul@@Base+0x1b0>  // b.none
    be60:	cmp	x9, x7
    be64:	b.eq	bf98 <mpc_mul@@Base+0x1b0>  // b.none
    be68:	cmp	x2, x7
    be6c:	b.eq	bf98 <mpc_mul@@Base+0x1b0>  // b.none
    be70:	cmp	x8, x7
    be74:	b.eq	bf98 <mpc_mul@@Base+0x1b0>  // b.none
    be78:	mov	x7, #0x8000000000000001    	// #-9223372036854775807
    be7c:	cmp	x9, x7
    be80:	b.ne	be98 <mpc_mul@@Base+0xb0>  // b.any
    be84:	mov	x2, x1
    be88:	mov	x1, x4
    be8c:	ldr	x19, [sp, #16]
    be90:	ldp	x29, x30, [sp], #32
    be94:	b	bcec <mpc_mul_karatsuba@@Base+0xb6c>
    be98:	mov	w6, w3
    be9c:	cmp	x8, x7
    bea0:	b.ne	beac <mpc_mul@@Base+0xc4>  // b.any
    bea4:	mov	x2, x4
    bea8:	b	be8c <mpc_mul@@Base+0xa4>
    beac:	cmp	x5, x7
    beb0:	b.ne	becc <mpc_mul@@Base+0xe4>  // b.any
    beb4:	mov	x2, x1
    beb8:	mov	x1, x4
    bebc:	mov	x0, x19
    bec0:	ldr	x19, [sp, #16]
    bec4:	ldp	x29, x30, [sp], #32
    bec8:	b	afc4 <mpc_mul_naive@@Base+0x1cc>
    becc:	cmp	x2, x7
    bed0:	b.ne	bedc <mpc_mul@@Base+0xf4>  // b.any
    bed4:	mov	x2, x4
    bed8:	b	bebc <mpc_mul@@Base+0xd4>
    bedc:	ldr	x3, [x1]
    bee0:	subs	x5, x5, x9
    bee4:	ldr	x0, [x1, #32]
    bee8:	cneg	x5, x5, mi  // mi = first
    beec:	mov	x7, #0x2                   	// #2
    bef0:	cmp	x0, x3
    bef4:	csel	x3, x0, x3, ge  // ge = tcont
    bef8:	sdiv	x3, x3, x7
    befc:	cmp	x5, x3
    bf00:	b.gt	bf28 <mpc_mul@@Base+0x140>
    bf04:	ldr	x3, [x4]
    bf08:	subs	x2, x2, x8
    bf0c:	ldr	x0, [x4, #32]
    bf10:	cneg	x2, x2, mi  // mi = first
    bf14:	cmp	x0, x3
    bf18:	csel	x0, x0, x3, ge  // ge = tcont
    bf1c:	sdiv	x0, x0, x7
    bf20:	cmp	x2, x0
    bf24:	b.le	bf40 <mpc_mul@@Base+0x158>
    bf28:	mov	x0, x19
    bf2c:	mov	w3, w6
    bf30:	ldr	x19, [sp, #16]
    bf34:	mov	x2, x4
    bf38:	ldp	x29, x30, [sp], #32
    bf3c:	b	4eb0 <mpc_mul_naive@plt>
    bf40:	ldr	x2, [x19]
    bf44:	adrp	x5, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    bf48:	ldr	x0, [x19, #32]
    bf4c:	ldr	x5, [x5, #4032]
    bf50:	cmp	x0, x2
    bf54:	csel	x0, x0, x2, ge  // ge = tcont
    bf58:	adrp	x2, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    bf5c:	ldr	x2, [x2, #4056]
    bf60:	ldr	w3, [x2]
    bf64:	mov	w2, #0x17                  	// #23
    bf68:	smull	x3, w3, w2
    bf6c:	adrp	x2, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    bf70:	cmp	x0, x3
    bf74:	mov	w3, w6
    bf78:	ldr	x0, [x2, #4016]
    bf7c:	mov	x2, x4
    bf80:	csel	x5, x5, x0, le
    bf84:	mov	x0, x19
    bf88:	ldr	x19, [sp, #16]
    bf8c:	mov	x16, x5
    bf90:	ldp	x29, x30, [sp], #32
    bf94:	br	x16
    bf98:	mov	x0, x19
    bf9c:	bl	4a40 <mpfr_set_nan@plt>
    bfa0:	add	x0, x19, #0x20
    bfa4:	bl	4a40 <mpfr_set_nan@plt>
    bfa8:	mov	w0, #0x0                   	// #0
    bfac:	ldr	x19, [sp, #16]
    bfb0:	ldp	x29, x30, [sp], #32
    bfb4:	ret

000000000000bfb8 <mpc_mul_fr@@Base>:
    bfb8:	stp	x29, x30, [sp, #-96]!
    bfbc:	cmp	x0, x2
    bfc0:	mov	x29, sp
    bfc4:	stp	x19, x20, [sp, #16]
    bfc8:	mov	x20, x0
    bfcc:	mov	x19, x1
    bfd0:	stp	x21, x22, [sp, #32]
    bfd4:	mov	x21, x2
    bfd8:	stp	x23, x24, [sp, #48]
    bfdc:	mov	w24, w3
    bfe0:	add	x23, sp, #0x40
    bfe4:	b.ne	c084 <mpc_mul_fr@@Base+0xcc>  // b.any
    bfe8:	ldr	x1, [x20]
    bfec:	mov	x0, x23
    bff0:	bl	5440 <mpfr_init2@plt>
    bff4:	mov	x1, x19
    bff8:	and	w3, w24, #0xf
    bffc:	mov	x2, x21
    c000:	mov	x0, x23
    c004:	bl	4b70 <mpfr_mul@plt>
    c008:	mov	w22, w0
    c00c:	add	x1, x19, #0x20
    c010:	asr	w3, w24, #4
    c014:	mov	x2, x21
    c018:	add	x0, x20, #0x20
    c01c:	bl	4b70 <mpfr_mul@plt>
    c020:	mov	w19, w0
    c024:	ldr	w3, [sp, #72]
    c028:	mov	x1, x23
    c02c:	mov	x0, x20
    c030:	mov	w2, #0x0                   	// #0
    c034:	bl	51d0 <mpfr_set4@plt>
    c038:	cmp	x20, x21
    c03c:	b.ne	c048 <mpc_mul_fr@@Base+0x90>  // b.any
    c040:	mov	x0, x23
    c044:	bl	4d60 <mpfr_clear@plt>
    c048:	cmp	w22, #0x0
    c04c:	mov	w1, #0x2                   	// #2
    c050:	cset	w0, ne  // ne = any
    c054:	csel	w0, w0, w1, ge  // ge = tcont
    c058:	cmp	w19, #0x0
    c05c:	mov	w1, #0x4                   	// #4
    c060:	csel	w1, w19, w1, eq  // eq = none
    c064:	mov	w19, #0x8                   	// #8
    c068:	csel	w19, w1, w19, ge  // ge = tcont
    c06c:	orr	w0, w0, w19
    c070:	ldp	x19, x20, [sp, #16]
    c074:	ldp	x21, x22, [sp, #32]
    c078:	ldp	x23, x24, [sp, #48]
    c07c:	ldp	x29, x30, [sp], #96
    c080:	ret
    c084:	ldp	x0, x1, [x0]
    c088:	stp	x0, x1, [sp, #64]
    c08c:	ldp	x0, x1, [x20, #16]
    c090:	stp	x0, x1, [sp, #80]
    c094:	b	bff4 <mpc_mul_fr@@Base+0x3c>

000000000000c098 <mpc_mul_i@@Base>:
    c098:	stp	x29, x30, [sp, #-112]!
    c09c:	mov	x29, sp
    c0a0:	stp	x19, x20, [sp, #16]
    c0a4:	mov	x19, x1
    c0a8:	mov	x20, x0
    c0ac:	stp	x21, x22, [sp, #32]
    c0b0:	mov	w21, w2
    c0b4:	ldr	x2, [x1]
    c0b8:	stp	x23, x24, [sp, #48]
    c0bc:	add	x24, x0, #0x20
    c0c0:	ldr	x1, [x0, #32]
    c0c4:	str	x25, [sp, #64]
    c0c8:	cmp	x2, x1
    c0cc:	b.ne	c174 <mpc_mul_i@@Base+0xdc>  // b.any
    c0d0:	ldr	x1, [x0]
    c0d4:	ldr	x2, [x19, #32]
    c0d8:	cmp	x2, x1
    c0dc:	b.ne	c174 <mpc_mul_i@@Base+0xdc>  // b.any
    c0e0:	cmp	x19, x0
    c0e4:	b.ne	c144 <mpc_mul_i@@Base+0xac>  // b.any
    c0e8:	mov	x1, x24
    c0ec:	bl	5090 <mpfr_swap@plt>
    c0f0:	mov	w2, #0x0                   	// #0
    c0f4:	tbnz	w21, #31, c16c <mpc_mul_i@@Base+0xd4>
    c0f8:	mov	x1, x20
    c0fc:	mov	w19, #0x0                   	// #0
    c100:	mov	w21, #0x0                   	// #0
    c104:	mov	x0, x1
    c108:	bl	4b80 <mpfr_neg@plt>
    c10c:	cmp	w21, #0x0
    c110:	cset	w0, ne  // ne = any
    c114:	cmp	w19, #0x0
    c118:	mov	w1, #0x4                   	// #4
    c11c:	csel	w1, w19, w1, eq  // eq = none
    c120:	mov	w19, #0x8                   	// #8
    c124:	csel	w19, w1, w19, ge  // ge = tcont
    c128:	orr	w0, w0, w19
    c12c:	ldp	x19, x20, [sp, #16]
    c130:	ldp	x21, x22, [sp, #32]
    c134:	ldp	x23, x24, [sp, #48]
    c138:	ldr	x25, [sp, #64]
    c13c:	ldp	x29, x30, [sp], #112
    c140:	ret
    c144:	ldr	w3, [x19, #40]
    c148:	add	x1, x19, #0x20
    c14c:	mov	w2, #0x0                   	// #0
    c150:	bl	51d0 <mpfr_set4@plt>
    c154:	ldr	w3, [x19, #8]
    c158:	mov	x1, x19
    c15c:	mov	x0, x24
    c160:	mov	w2, #0x0                   	// #0
    c164:	bl	51d0 <mpfr_set4@plt>
    c168:	b	c0f0 <mpc_mul_i@@Base+0x58>
    c16c:	mov	x1, x24
    c170:	b	c0fc <mpc_mul_i@@Base+0x64>
    c174:	add	x22, x19, #0x20
    c178:	and	w23, w3, #0xf
    c17c:	asr	w25, w3, #4
    c180:	cmp	x19, x20
    c184:	b.ne	c218 <mpc_mul_i@@Base+0x180>  // b.any
    c188:	ldr	x1, [x20]
    c18c:	add	x19, sp, #0x50
    c190:	mov	x0, x19
    c194:	bl	5440 <mpfr_init2@plt>
    c198:	tbnz	w21, #31, c1ec <mpc_mul_i@@Base+0x154>
    c19c:	mov	w2, w23
    c1a0:	mov	x1, x22
    c1a4:	mov	x0, x19
    c1a8:	bl	4b80 <mpfr_neg@plt>
    c1ac:	ldr	w3, [x20, #8]
    c1b0:	mov	w21, w0
    c1b4:	mov	w2, w25
    c1b8:	mov	x1, x20
    c1bc:	mov	x0, x24
    c1c0:	bl	51d0 <mpfr_set4@plt>
    c1c4:	mov	w19, w0
    c1c8:	mov	x0, x20
    c1cc:	bl	4d60 <mpfr_clear@plt>
    c1d0:	ldp	x0, x1, [sp, #80]
    c1d4:	stp	x0, x1, [x20]
    c1d8:	ldp	x0, x1, [sp, #96]
    c1dc:	stp	x0, x1, [x20, #16]
    c1e0:	tbz	w21, #31, c10c <mpc_mul_i@@Base+0x74>
    c1e4:	mov	w0, #0x2                   	// #2
    c1e8:	b	c114 <mpc_mul_i@@Base+0x7c>
    c1ec:	ldr	w3, [x20, #40]
    c1f0:	mov	w2, w23
    c1f4:	mov	x1, x22
    c1f8:	mov	x0, x19
    c1fc:	bl	51d0 <mpfr_set4@plt>
    c200:	mov	w21, w0
    c204:	mov	w2, w25
    c208:	mov	x1, x20
    c20c:	mov	x0, x24
    c210:	bl	4b80 <mpfr_neg@plt>
    c214:	b	c1c4 <mpc_mul_i@@Base+0x12c>
    c218:	tbnz	w21, #31, c24c <mpc_mul_i@@Base+0x1b4>
    c21c:	mov	w2, w23
    c220:	mov	x1, x22
    c224:	mov	x0, x20
    c228:	bl	4b80 <mpfr_neg@plt>
    c22c:	ldr	w3, [x19, #8]
    c230:	mov	w21, w0
    c234:	mov	w2, w25
    c238:	mov	x1, x19
    c23c:	mov	x0, x24
    c240:	bl	51d0 <mpfr_set4@plt>
    c244:	mov	w19, w0
    c248:	b	c1e0 <mpc_mul_i@@Base+0x148>
    c24c:	ldr	w3, [x19, #40]
    c250:	mov	w2, w23
    c254:	mov	x1, x22
    c258:	mov	x0, x20
    c25c:	bl	51d0 <mpfr_set4@plt>
    c260:	mov	w21, w0
    c264:	mov	w2, w25
    c268:	mov	x1, x19
    c26c:	mov	x0, x24
    c270:	bl	4b80 <mpfr_neg@plt>
    c274:	b	c244 <mpc_mul_i@@Base+0x1ac>

000000000000c278 <mpc_mul_si@@Base>:
    c278:	stp	x29, x30, [sp, #-64]!
    c27c:	mov	x29, sp
    c280:	stp	x19, x20, [sp, #16]
    c284:	mov	w20, w3
    c288:	and	w3, w3, #0xf
    c28c:	stp	x21, x22, [sp, #32]
    c290:	mov	x21, x0
    c294:	mov	x22, x1
    c298:	str	x23, [sp, #48]
    c29c:	mov	x23, x2
    c2a0:	bl	5360 <mpfr_mul_si@plt>
    c2a4:	mov	w19, w0
    c2a8:	asr	w3, w20, #4
    c2ac:	mov	x2, x23
    c2b0:	add	x1, x22, #0x20
    c2b4:	add	x0, x21, #0x20
    c2b8:	bl	5360 <mpfr_mul_si@plt>
    c2bc:	cmp	w19, #0x0
    c2c0:	mov	w2, #0x2                   	// #2
    c2c4:	cset	w1, ne  // ne = any
    c2c8:	csel	w1, w1, w2, ge  // ge = tcont
    c2cc:	cmp	w0, #0x0
    c2d0:	mov	w2, #0x4                   	// #4
    c2d4:	csel	w2, w0, w2, eq  // eq = none
    c2d8:	mov	w0, #0x8                   	// #8
    c2dc:	csel	w0, w2, w0, ge  // ge = tcont
    c2e0:	orr	w0, w1, w0
    c2e4:	ldp	x19, x20, [sp, #16]
    c2e8:	ldp	x21, x22, [sp, #32]
    c2ec:	ldr	x23, [sp, #48]
    c2f0:	ldp	x29, x30, [sp], #64
    c2f4:	ret

000000000000c2f8 <mpc_mul_ui@@Base>:
    c2f8:	stp	x29, x30, [sp, #-64]!
    c2fc:	mov	x29, sp
    c300:	stp	x19, x20, [sp, #16]
    c304:	mov	w20, w3
    c308:	and	w3, w3, #0xf
    c30c:	stp	x21, x22, [sp, #32]
    c310:	mov	x21, x0
    c314:	mov	x22, x1
    c318:	str	x23, [sp, #48]
    c31c:	mov	x23, x2
    c320:	bl	49c0 <mpfr_mul_ui@plt>
    c324:	mov	w19, w0
    c328:	asr	w3, w20, #4
    c32c:	mov	x2, x23
    c330:	add	x1, x22, #0x20
    c334:	add	x0, x21, #0x20
    c338:	bl	49c0 <mpfr_mul_ui@plt>
    c33c:	cmp	w19, #0x0
    c340:	mov	w2, #0x2                   	// #2
    c344:	cset	w1, ne  // ne = any
    c348:	csel	w1, w1, w2, ge  // ge = tcont
    c34c:	cmp	w0, #0x0
    c350:	mov	w2, #0x4                   	// #4
    c354:	csel	w2, w0, w2, eq  // eq = none
    c358:	mov	w0, #0x8                   	// #8
    c35c:	csel	w0, w2, w0, ge  // ge = tcont
    c360:	orr	w0, w1, w0
    c364:	ldp	x19, x20, [sp, #16]
    c368:	ldp	x21, x22, [sp, #32]
    c36c:	ldr	x23, [sp, #48]
    c370:	ldp	x29, x30, [sp], #64
    c374:	ret

000000000000c378 <mpc_neg@@Base>:
    c378:	stp	x29, x30, [sp, #-48]!
    c37c:	mov	x29, sp
    c380:	stp	x19, x20, [sp, #16]
    c384:	mov	w20, w2
    c388:	and	w2, w2, #0xf
    c38c:	stp	x21, x22, [sp, #32]
    c390:	mov	x21, x0
    c394:	mov	x22, x1
    c398:	bl	4b80 <mpfr_neg@plt>
    c39c:	mov	w19, w0
    c3a0:	asr	w2, w20, #4
    c3a4:	add	x1, x22, #0x20
    c3a8:	add	x0, x21, #0x20
    c3ac:	bl	4b80 <mpfr_neg@plt>
    c3b0:	cmp	w19, #0x0
    c3b4:	mov	w2, #0x2                   	// #2
    c3b8:	cset	w1, ne  // ne = any
    c3bc:	csel	w1, w1, w2, ge  // ge = tcont
    c3c0:	cmp	w0, #0x0
    c3c4:	mov	w2, #0x4                   	// #4
    c3c8:	csel	w2, w0, w2, eq  // eq = none
    c3cc:	mov	w0, #0x8                   	// #8
    c3d0:	csel	w0, w2, w0, ge  // ge = tcont
    c3d4:	orr	w0, w1, w0
    c3d8:	ldp	x19, x20, [sp, #16]
    c3dc:	ldp	x21, x22, [sp, #32]
    c3e0:	ldp	x29, x30, [sp], #48
    c3e4:	ret

000000000000c3e8 <mpc_norm@@Base>:
    c3e8:	stp	x29, x30, [sp, #-208]!
    c3ec:	mov	x29, sp
    c3f0:	stp	x19, x20, [sp, #16]
    c3f4:	mov	x19, x0
    c3f8:	mov	x0, x1
    c3fc:	stp	x21, x22, [sp, #32]
    c400:	mov	x22, x1
    c404:	stp	x23, x24, [sp, #48]
    c408:	mov	w23, w2
    c40c:	stp	x25, x26, [sp, #64]
    c410:	stp	x27, x28, [sp, #80]
    c414:	bl	54d0 <mpfr_number_p@plt>
    c418:	cbnz	w0, c434 <mpc_norm@@Base+0x4c>
    c41c:	mov	w2, w23
    c420:	mov	x1, x22
    c424:	mov	x0, x19
    c428:	bl	51a0 <mpc_abs@plt>
    c42c:	mov	w22, w0
    c430:	b	c470 <mpc_norm@@Base+0x88>
    c434:	add	x27, x22, #0x20
    c438:	mov	x0, x27
    c43c:	bl	54d0 <mpfr_number_p@plt>
    c440:	cbz	w0, c41c <mpc_norm@@Base+0x34>
    c444:	ldr	x2, [x22, #16]
    c448:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    c44c:	ldr	x0, [x22, #48]
    c450:	cmp	x2, x1
    c454:	b.ne	c4a4 <mpc_norm@@Base+0xbc>  // b.any
    c458:	cmp	x0, x2
    c45c:	b.ne	c490 <mpc_norm@@Base+0xa8>  // b.any
    c460:	mov	w1, #0x1                   	// #1
    c464:	mov	w22, #0x0                   	// #0
    c468:	str	w1, [x19, #8]
    c46c:	str	x0, [x19, #16]
    c470:	mov	w0, w22
    c474:	ldp	x19, x20, [sp, #16]
    c478:	ldp	x21, x22, [sp, #32]
    c47c:	ldp	x23, x24, [sp, #48]
    c480:	ldp	x25, x26, [sp, #64]
    c484:	ldp	x27, x28, [sp, #80]
    c488:	ldp	x29, x30, [sp], #208
    c48c:	ret
    c490:	mov	w2, w23
    c494:	mov	x1, x27
    c498:	mov	x0, x19
    c49c:	bl	5010 <mpfr_sqr@plt>
    c4a0:	b	c42c <mpc_norm@@Base+0x44>
    c4a4:	cmp	x0, x1
    c4a8:	b.ne	c4b8 <mpc_norm@@Base+0xd0>  // b.any
    c4ac:	mov	w2, w23
    c4b0:	mov	x1, x22
    c4b4:	b	c498 <mpc_norm@@Base+0xb0>
    c4b8:	add	x20, sp, #0x70
    c4bc:	add	x21, sp, #0x90
    c4c0:	mov	x0, x20
    c4c4:	add	x26, sp, #0xb0
    c4c8:	ldr	x28, [x19]
    c4cc:	bl	4aa0 <mpfr_init@plt>
    c4d0:	mov	x0, x21
    c4d4:	bl	4aa0 <mpfr_init@plt>
    c4d8:	mov	x0, x26
    c4dc:	bl	4aa0 <mpfr_init@plt>
    c4e0:	bl	52f0 <mpfr_underflow_p@plt>
    c4e4:	str	w0, [sp, #100]
    c4e8:	bl	54e0 <mpfr_overflow_p@plt>
    c4ec:	str	w0, [sp, #104]
    c4f0:	bl	4e20 <mpfr_clear_underflow@plt>
    c4f4:	bl	4a50 <mpfr_clear_overflow@plt>
    c4f8:	mov	w0, #0x2                   	// #2
    c4fc:	mov	w1, #0x0                   	// #0
    c500:	str	w0, [sp, #96]
    c504:	mov	x0, x28
    c508:	str	w1, [sp, #108]
    c50c:	bl	4d20 <mpc_ceil_log2@plt>
    c510:	add	x0, x0, #0x3
    c514:	ldr	w1, [sp, #108]
    c518:	add	x28, x28, x0
    c51c:	ldr	x25, [x22]
    c520:	ldr	x24, [x22, #32]
    c524:	lsl	x25, x25, #1
    c528:	cbz	w1, c610 <mpc_norm@@Base+0x228>
    c52c:	lsl	x24, x24, #1
    c530:	mov	x1, x25
    c534:	mov	x0, x20
    c538:	bl	4c80 <mpfr_set_prec@plt>
    c53c:	mov	x1, x24
    c540:	mov	x0, x21
    c544:	bl	4c80 <mpfr_set_prec@plt>
    c548:	mov	x1, x22
    c54c:	mov	w2, #0x3                   	// #3
    c550:	mov	x0, x20
    c554:	bl	5010 <mpfr_sqr@plt>
    c558:	mov	w3, w0
    c55c:	mov	x1, x27
    c560:	mov	x0, x21
    c564:	mov	w2, #0x3                   	// #3
    c568:	str	w3, [sp, #108]
    c56c:	bl	5010 <mpfr_sqr@plt>
    c570:	ldr	w3, [sp, #108]
    c574:	orr	w3, w3, w0
    c578:	cbz	w3, c5f8 <mpc_norm@@Base+0x210>
    c57c:	mov	x1, x28
    c580:	mov	x0, x26
    c584:	bl	4c80 <mpfr_set_prec@plt>
    c588:	mov	x2, x21
    c58c:	mov	x1, x20
    c590:	mov	x0, x26
    c594:	mov	w3, #0x3                   	// #3
    c598:	bl	4e60 <mpfr_add@plt>
    c59c:	ldr	w0, [sp, #96]
    c5a0:	cmp	w0, #0x1
    c5a4:	b.ne	c628 <mpc_norm@@Base+0x240>  // b.any
    c5a8:	bl	54e0 <mpfr_overflow_p@plt>
    c5ac:	cbnz	w0, c658 <mpc_norm@@Base+0x270>
    c5b0:	bl	52f0 <mpfr_underflow_p@plt>
    c5b4:	cbz	w0, c7f0 <mpc_norm@@Base+0x408>
    c5b8:	bl	5060 <mpfr_get_emin@plt>
    c5bc:	mov	x28, x0
    c5c0:	ldr	x2, [sp, #128]
    c5c4:	cmn	x2, #0x9
    c5c8:	b.lt	c68c <mpc_norm@@Base+0x2a4>  // b.tstop
    c5cc:	sub	x25, x2, x25, lsl #1
    c5d0:	cmp	x25, x0
    c5d4:	b.le	c68c <mpc_norm@@Base+0x2a4>
    c5d8:	mov	x0, x21
    c5dc:	mov	x1, #0x1                   	// #1
    c5e0:	bl	4c80 <mpfr_set_prec@plt>
    c5e4:	sub	x2, x28, #0x1
    c5e8:	mov	x0, x21
    c5ec:	mov	w3, #0x1                   	// #1
    c5f0:	mov	x1, #0x1                   	// #1
    c5f4:	bl	5130 <mpfr_set_ui_2exp@plt>
    c5f8:	mov	w3, w23
    c5fc:	mov	x2, x21
    c600:	mov	x1, x20
    c604:	mov	x0, x19
    c608:	bl	4e60 <mpfr_add@plt>
    c60c:	b	c684 <mpc_norm@@Base+0x29c>
    c610:	cmp	x25, x28
    c614:	lsl	x24, x24, #1
    c618:	csel	x25, x25, x28, le
    c61c:	cmp	x24, x28
    c620:	csel	x24, x24, x28, le
    c624:	b	c530 <mpc_norm@@Base+0x148>
    c628:	cmp	w23, #0x0
    c62c:	sub	x1, x28, #0x2
    c630:	ldr	x4, [x19]
    c634:	mov	x0, x26
    c638:	mov	w3, #0x2                   	// #2
    c63c:	mov	w2, #0x3                   	// #3
    c640:	cinc	x4, x4, eq  // eq = none
    c644:	bl	5450 <mpfr_can_round@plt>
    c648:	mov	w1, #0x1                   	// #1
    c64c:	str	w1, [sp, #96]
    c650:	cbz	w0, c504 <mpc_norm@@Base+0x11c>
    c654:	b	c5a8 <mpc_norm@@Base+0x1c0>
    c658:	mov	w3, #0x0                   	// #0
    c65c:	mov	x2, #0x0                   	// #0
    c660:	mov	x1, #0x1                   	// #1
    c664:	mov	x0, x19
    c668:	bl	5130 <mpfr_set_ui_2exp@plt>
    c66c:	bl	5200 <mpfr_get_emax@plt>
    c670:	mov	x2, x0
    c674:	mov	w3, w23
    c678:	mov	x1, x19
    c67c:	mov	x0, x19
    c680:	bl	4f40 <mpfr_mul_2ui@plt>
    c684:	mov	w22, w0
    c688:	b	c794 <mpc_norm@@Base+0x3ac>
    c68c:	ldr	x0, [sp, #160]
    c690:	cmn	x0, #0x9
    c694:	b.lt	c6c4 <mpc_norm@@Base+0x2dc>  // b.tstop
    c698:	sub	x24, x0, x24, lsl #1
    c69c:	cmp	x24, x28
    c6a0:	b.le	c6c4 <mpc_norm@@Base+0x2dc>
    c6a4:	mov	x0, x20
    c6a8:	mov	x1, #0x1                   	// #1
    c6ac:	bl	4c80 <mpfr_set_prec@plt>
    c6b0:	sub	x2, x28, #0x1
    c6b4:	mov	x0, x20
    c6b8:	mov	w3, #0x1                   	// #1
    c6bc:	mov	x1, #0x1                   	// #1
    c6c0:	b	c5f4 <mpc_norm@@Base+0x20c>
    c6c4:	ldr	x1, [x22, #48]
    c6c8:	ldr	x0, [x22, #16]
    c6cc:	neg	x4, x1
    c6d0:	and	x1, x1, #0x1
    c6d4:	neg	x3, x0
    c6d8:	and	x25, x0, #0x1
    c6dc:	add	x25, x25, x1
    c6e0:	lsr	x0, x4, #1
    c6e4:	add	x0, x0, x3, lsr #1
    c6e8:	mov	w3, #0x0                   	// #0
    c6ec:	add	x25, x0, x25, lsr #1
    c6f0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    c6f4:	cmp	x2, x0
    c6f8:	lsl	x24, x25, #1
    c6fc:	b.ne	c7c8 <mpc_norm@@Base+0x3e0>  // b.any
    c700:	mov	x2, x25
    c704:	mov	x1, x22
    c708:	mov	x0, x20
    c70c:	bl	4f40 <mpfr_mul_2ui@plt>
    c710:	mov	x1, x20
    c714:	mov	x0, x20
    c718:	mov	w2, #0x0                   	// #0
    c71c:	bl	5010 <mpfr_sqr@plt>
    c720:	ldr	x1, [sp, #160]
    c724:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    c728:	mov	w3, #0x0                   	// #0
    c72c:	cmp	x1, x0
    c730:	b.ne	c7dc <mpc_norm@@Base+0x3f4>  // b.any
    c734:	mov	x2, x25
    c738:	mov	x1, x27
    c73c:	mov	x0, x21
    c740:	bl	4f40 <mpfr_mul_2ui@plt>
    c744:	mov	x1, x21
    c748:	mov	x0, x21
    c74c:	mov	w2, #0x0                   	// #0
    c750:	bl	5010 <mpfr_sqr@plt>
    c754:	mov	w3, w23
    c758:	mov	x2, x21
    c75c:	mov	x1, x20
    c760:	mov	x0, x19
    c764:	bl	4e60 <mpfr_add@plt>
    c768:	mov	w22, w0
    c76c:	bl	4e20 <mpfr_clear_underflow@plt>
    c770:	mov	x1, x19
    c774:	mov	w3, w23
    c778:	mov	x2, x24
    c77c:	mov	x0, x19
    c780:	bl	5320 <mpfr_div_2ui@plt>
    c784:	mov	w19, w0
    c788:	bl	52f0 <mpfr_underflow_p@plt>
    c78c:	cmp	w0, #0x0
    c790:	csel	w22, w22, w19, eq  // eq = none
    c794:	ldr	w0, [sp, #100]
    c798:	cbz	w0, c7a0 <mpc_norm@@Base+0x3b8>
    c79c:	bl	4990 <mpfr_set_underflow@plt>
    c7a0:	ldr	w0, [sp, #104]
    c7a4:	cbz	w0, c7ac <mpc_norm@@Base+0x3c4>
    c7a8:	bl	5490 <mpfr_set_overflow@plt>
    c7ac:	mov	x0, x20
    c7b0:	bl	4d60 <mpfr_clear@plt>
    c7b4:	mov	x0, x21
    c7b8:	bl	4d60 <mpfr_clear@plt>
    c7bc:	mov	x0, x26
    c7c0:	bl	4d60 <mpfr_clear@plt>
    c7c4:	b	c470 <mpc_norm@@Base+0x88>
    c7c8:	mov	x2, x24
    c7cc:	mov	x1, x20
    c7d0:	mov	x0, x20
    c7d4:	bl	4f40 <mpfr_mul_2ui@plt>
    c7d8:	b	c720 <mpc_norm@@Base+0x338>
    c7dc:	mov	x2, x24
    c7e0:	mov	x1, x21
    c7e4:	mov	x0, x21
    c7e8:	bl	4f40 <mpfr_mul_2ui@plt>
    c7ec:	b	c754 <mpc_norm@@Base+0x36c>
    c7f0:	ldr	w3, [sp, #184]
    c7f4:	mov	w2, w23
    c7f8:	mov	x1, x26
    c7fc:	mov	x0, x19
    c800:	bl	51d0 <mpfr_set4@plt>
    c804:	b	c684 <mpc_norm@@Base+0x29c>

000000000000c808 <mpc_out_str@@Base>:
    c808:	stp	x29, x30, [sp, #-64]!
    c80c:	mov	x29, sp
    c810:	stp	x19, x20, [sp, #16]
    c814:	mov	w20, w4
    c818:	stp	x21, x22, [sp, #32]
    c81c:	mov	w22, w1
    c820:	stp	x23, x24, [sp, #48]
    c824:	mov	x23, x2
    c828:	mov	x24, x3
    c82c:	cbnz	x0, c8b8 <mpc_out_str@@Base+0xb0>
    c830:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    c834:	ldr	x0, [x0, #4024]
    c838:	ldr	x19, [x0]
    c83c:	mov	x1, x19
    c840:	and	w20, w20, #0xf
    c844:	mov	w0, #0x28                  	// #40
    c848:	bl	4ba0 <fputc@plt>
    c84c:	mov	w4, w20
    c850:	mov	x3, x24
    c854:	mov	x2, x23
    c858:	mov	w1, w22
    c85c:	mov	x0, x19
    c860:	bl	5190 <__gmpfr_out_str@plt>
    c864:	mov	x1, x19
    c868:	mov	x21, x0
    c86c:	mov	w0, #0x20                  	// #32
    c870:	bl	4ba0 <fputc@plt>
    c874:	mov	w4, w20
    c878:	add	x3, x24, #0x20
    c87c:	mov	x2, x23
    c880:	mov	w1, w22
    c884:	mov	x0, x19
    c888:	bl	5190 <__gmpfr_out_str@plt>
    c88c:	mov	x1, x19
    c890:	mov	x20, x0
    c894:	mov	w0, #0x29                  	// #41
    c898:	bl	4ba0 <fputc@plt>
    c89c:	add	x0, x21, x20
    c8a0:	add	x0, x0, #0x3
    c8a4:	ldp	x19, x20, [sp, #16]
    c8a8:	ldp	x21, x22, [sp, #32]
    c8ac:	ldp	x23, x24, [sp, #48]
    c8b0:	ldp	x29, x30, [sp], #64
    c8b4:	ret
    c8b8:	mov	x19, x0
    c8bc:	b	c83c <mpc_out_str@@Base+0x34>
    c8c0:	ldr	x2, [x0, #16]
    c8c4:	add	x1, x1, x2
    c8c8:	cmp	x1, #0x0
    c8cc:	b.le	c920 <mpc_out_str@@Base+0x118>
    c8d0:	ldr	x2, [x0]
    c8d4:	cmp	x1, x2
    c8d8:	b.gt	c920 <mpc_out_str@@Base+0x118>
    c8dc:	adrp	x3, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    c8e0:	sub	x2, x2, #0x1
    c8e4:	ldr	x5, [x0, #24]
    c8e8:	ldr	x3, [x3, #4056]
    c8ec:	ldr	w4, [x3]
    c8f0:	sxtw	x3, w4
    c8f4:	sdiv	x2, x2, x3
    c8f8:	sdiv	x0, x1, x3
    c8fc:	madd	x2, x2, x3, x3
    c900:	sub	x2, x2, x1
    c904:	msub	x1, x0, x3, x1
    c908:	sdiv	x2, x2, x3
    c90c:	ldr	x0, [x5, x2, lsl #3]
    c910:	cbnz	x1, c928 <mpc_out_str@@Base+0x120>
    c914:	mvn	x0, x0
    c918:	and	w0, w0, #0x1
    c91c:	cbz	w0, c950 <mpc_out_str@@Base+0x148>
    c920:	mov	w0, #0x0                   	// #0
    c924:	b	c95c <mpc_out_str@@Base+0x154>
    c928:	sub	w1, w1, #0x1
    c92c:	sub	w4, w4, #0x1
    c930:	lsl	x0, x0, x1
    c934:	mov	x1, #0x1                   	// #1
    c938:	lsl	x4, x1, x4
    c93c:	cmp	x0, x4
    c940:	cset	w0, ne  // ne = any
    c944:	b	c91c <mpc_out_str@@Base+0x114>
    c948:	ldr	x0, [x5, x2, lsl #3]
    c94c:	cbnz	x0, c920 <mpc_out_str@@Base+0x118>
    c950:	subs	x2, x2, #0x1
    c954:	b.pl	c948 <mpc_out_str@@Base+0x140>  // b.nfrst
    c958:	mov	w0, #0x1                   	// #1
    c95c:	ret
    c960:	stp	x29, x30, [sp, #-80]!
    c964:	mov	x29, sp
    c968:	stp	x21, x22, [sp, #32]
    c96c:	add	x22, sp, #0x40
    c970:	mov	x21, x0
    c974:	mov	x0, x22
    c978:	stp	x19, x20, [sp, #16]
    c97c:	mov	x19, x3
    c980:	mov	w20, w2
    c984:	str	x23, [sp, #48]
    c988:	mov	w23, w1
    c98c:	bl	54a0 <__gmpz_init@plt>
    c990:	mov	x1, x19
    c994:	mov	x0, x22
    c998:	bl	5470 <mpfr_get_z_2exp@plt>
    c99c:	mov	x19, x0
    c9a0:	mov	x1, #0x0                   	// #0
    c9a4:	mov	x0, x22
    c9a8:	bl	49f0 <__gmpz_scan1@plt>
    c9ac:	mov	x2, x0
    c9b0:	add	x19, x0, x19
    c9b4:	mov	x1, x22
    c9b8:	mov	x0, x22
    c9bc:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    c9c0:	cmp	x19, #0x1
    c9c4:	b.gt	ca60 <mpc_out_str@@Base+0x258>
    c9c8:	b.ne	ca28 <mpc_out_str@@Base+0x220>  // b.any
    c9cc:	mov	x0, x22
    c9d0:	mov	x1, #0x0                   	// #0
    c9d4:	bl	4d30 <__gmpz_tstbit@plt>
    c9d8:	lsl	w3, w0, #1
    c9dc:	ldr	x1, [x21, #16]
    c9e0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    c9e4:	cmp	x1, x0
    c9e8:	b.ne	cab8 <mpc_out_str@@Base+0x2b0>  // b.any
    c9ec:	and	w0, w3, #0xfffffffd
    c9f0:	cmp	w0, #0x1
    c9f4:	b.eq	ca68 <mpc_out_str@@Base+0x260>  // b.none
    c9f8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    c9fc:	add	x4, x4, #0x794
    ca00:	mov	w3, #0x89                  	// #137
    ca04:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    ca08:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    ca0c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    ca10:	add	x2, x2, #0x7ad
    ca14:	ldr	x0, [x0, #4008]
    ca18:	add	x1, x1, #0x5f3
    ca1c:	ldr	x0, [x0]
    ca20:	bl	55a0 <fprintf@plt>
    ca24:	bl	5000 <abort@plt>
    ca28:	cbnz	x19, ca9c <mpc_out_str@@Base+0x294>
    ca2c:	mov	x1, #0x1                   	// #1
    ca30:	mov	x0, x22
    ca34:	bl	4d30 <__gmpz_tstbit@plt>
    ca38:	mov	w19, w0
    ca3c:	mov	x1, #0x0                   	// #0
    ca40:	mov	x0, x22
    ca44:	bl	4d30 <__gmpz_tstbit@plt>
    ca48:	add	w3, w0, w19, lsl #1
    ca4c:	ldr	w0, [sp, #68]
    ca50:	tbz	w0, #31, c9dc <mpc_out_str@@Base+0x1d4>
    ca54:	mov	w0, #0x4                   	// #4
    ca58:	sub	w3, w0, w3
    ca5c:	b	c9dc <mpc_out_str@@Base+0x1d4>
    ca60:	mov	w3, #0x0                   	// #0
    ca64:	b	c9dc <mpc_out_str@@Base+0x1d4>
    ca68:	eor	w0, w23, #0x1
    ca6c:	cmp	w3, #0x3
    ca70:	and	w0, w0, #0x1
    ca74:	csel	w0, w0, wzr, eq  // eq = none
    ca78:	cbnz	w0, ca8c <mpc_out_str@@Base+0x284>
    ca7c:	cmp	w3, #0x1
    ca80:	and	w20, w23, #0x1
    ca84:	csel	w20, w20, wzr, eq  // eq = none
    ca88:	cbz	w20, ca9c <mpc_out_str@@Base+0x294>
    ca8c:	mov	x1, x21
    ca90:	mov	w2, #0x1                   	// #1
    ca94:	mov	x0, x1
    ca98:	bl	4b80 <mpfr_neg@plt>
    ca9c:	mov	x0, x22
    caa0:	bl	5180 <__gmpz_clear@plt>
    caa4:	ldp	x19, x20, [sp, #16]
    caa8:	ldp	x21, x22, [sp, #32]
    caac:	ldr	x23, [sp, #48]
    cab0:	ldp	x29, x30, [sp], #80
    cab4:	ret
    cab8:	ldr	x1, [x21, #48]
    cabc:	cmp	x1, x0
    cac0:	b.ne	ca9c <mpc_out_str@@Base+0x294>  // b.any
    cac4:	tst	w3, #0xfffffffd
    cac8:	b.eq	cadc <mpc_out_str@@Base+0x2d4>  // b.none
    cacc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    cad0:	mov	w3, #0x93                  	// #147
    cad4:	add	x4, x4, #0x7b3
    cad8:	b	ca04 <mpc_out_str@@Base+0x1fc>
    cadc:	cmp	w3, #0x0
    cae0:	ccmp	w20, w23, #0x0, eq  // eq = none
    cae4:	b.eq	cafc <mpc_out_str@@Base+0x2f4>  // b.none
    cae8:	eor	w20, w20, w23
    caec:	cmp	w3, #0x2
    caf0:	and	w20, w20, #0x1
    caf4:	csel	w20, w20, wzr, eq  // eq = none
    caf8:	cbz	w20, ca9c <mpc_out_str@@Base+0x294>
    cafc:	add	x1, x21, #0x20
    cb00:	mov	w2, #0x1                   	// #1
    cb04:	b	ca94 <mpc_out_str@@Base+0x28c>

000000000000cb08 <mpc_pow@@Base>:
    cb08:	sub	sp, sp, #0x210
    cb0c:	stp	x29, x30, [sp]
    cb10:	mov	x29, sp
    cb14:	stp	x21, x22, [sp, #32]
    cb18:	mov	x22, x1
    cb1c:	mov	x21, x2
    cb20:	stp	x19, x20, [sp, #16]
    cb24:	mov	x20, x0
    cb28:	stp	x23, x24, [sp, #48]
    cb2c:	stp	x25, x26, [sp, #64]
    cb30:	stp	x27, x28, [sp, #80]
    cb34:	str	w3, [sp, #108]
    cb38:	bl	52f0 <mpfr_underflow_p@plt>
    cb3c:	str	w0, [sp, #228]
    cb40:	bl	54e0 <mpfr_overflow_p@plt>
    cb44:	str	w0, [sp, #248]
    cb48:	ldr	x0, [x22, #48]
    cb4c:	str	x0, [sp, #136]
    cb50:	ldr	x0, [x21, #48]
    cb54:	str	x0, [sp, #96]
    cb58:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    cb5c:	ldr	x1, [sp, #96]
    cb60:	cmp	x1, x0
    cb64:	b.ne	cc84 <mpc_pow@@Base+0x17c>  // b.any
    cb68:	ldr	x0, [x21, #16]
    cb6c:	cmp	x0, x1
    cb70:	b.ne	cc84 <mpc_pow@@Base+0x17c>  // b.any
    cb74:	ldr	x1, [sp, #136]
    cb78:	cmp	x1, x0
    cb7c:	b.ne	cbc8 <mpc_pow@@Base+0xc0>  // b.any
    cb80:	ldr	x0, [x22, #16]
    cb84:	cmp	x0, x1
    cb88:	b.ne	cbc8 <mpc_pow@@Base+0xc0>  // b.any
    cb8c:	mov	w19, #0x0                   	// #0
    cb90:	mov	x0, x20
    cb94:	mov	w3, #0x0                   	// #0
    cb98:	mov	x2, #0x0                   	// #0
    cb9c:	mov	x1, #0x1                   	// #1
    cba0:	bl	5040 <mpc_set_ui_ui@plt>
    cba4:	mov	w0, w19
    cba8:	ldp	x29, x30, [sp]
    cbac:	ldp	x19, x20, [sp, #16]
    cbb0:	ldp	x21, x22, [sp, #32]
    cbb4:	ldp	x23, x24, [sp, #48]
    cbb8:	ldp	x25, x26, [sp, #64]
    cbbc:	ldp	x27, x28, [sp, #80]
    cbc0:	add	sp, sp, #0x210
    cbc4:	ret
    cbc8:	add	x23, sp, #0x1d0
    cbcc:	mov	x0, x23
    cbd0:	bl	4aa0 <mpfr_init@plt>
    cbd4:	mov	x1, x22
    cbd8:	mov	w2, #0x0                   	// #0
    cbdc:	mov	x0, x23
    cbe0:	bl	4ea0 <mpc_norm@plt>
    cbe4:	mov	x1, #0x1                   	// #1
    cbe8:	mov	w19, w0
    cbec:	mov	x2, #0x0                   	// #0
    cbf0:	mov	x0, x23
    cbf4:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    cbf8:	cmp	w0, #0x0
    cbfc:	ccmp	w19, #0x0, #0x4, eq  // eq = none
    cc00:	neg	w19, w19
    cc04:	csel	w1, w19, w0, ne  // ne = any
    cc08:	cmp	w1, #0x0
    cc0c:	b.ge	cc20 <mpc_pow@@Base+0x118>  // b.tcont
    cc10:	ldr	w21, [x21, #40]
    cc14:	mvn	w21, w21
    cc18:	lsr	w21, w21, #31
    cc1c:	b	cc34 <mpc_pow@@Base+0x12c>
    cc20:	b.ne	cc7c <mpc_pow@@Base+0x174>  // b.any
    cc24:	ldr	w21, [x21, #8]
    cc28:	ldr	w0, [x22, #40]
    cc2c:	lsr	w21, w21, #31
    cc30:	eor	w21, w21, w0, lsr #31
    cc34:	ldr	w3, [sp, #108]
    cc38:	mov	x0, x20
    cc3c:	mov	x2, #0x0                   	// #0
    cc40:	mov	x1, #0x1                   	// #1
    cc44:	bl	5040 <mpc_set_ui_ui@plt>
    cc48:	mov	w19, w0
    cc4c:	ldr	w0, [sp, #108]
    cc50:	asr	w3, w0, #4
    cc54:	cmp	w3, #0x3
    cc58:	b.eq	cc60 <mpc_pow@@Base+0x158>  // b.none
    cc5c:	cbz	w21, cc70 <mpc_pow@@Base+0x168>
    cc60:	mov	x1, x20
    cc64:	mov	x0, x20
    cc68:	mov	w2, #0x0                   	// #0
    cc6c:	bl	4f60 <mpc_conj@plt>
    cc70:	mov	x0, x23
    cc74:	bl	4d60 <mpfr_clear@plt>
    cc78:	b	cba4 <mpc_pow@@Base+0x9c>
    cc7c:	ldr	w21, [x21, #40]
    cc80:	b	cc18 <mpc_pow@@Base+0x110>
    cc84:	mov	x0, x22
    cc88:	bl	54d0 <mpfr_number_p@plt>
    cc8c:	cbnz	w0, cce4 <mpc_pow@@Base+0x1dc>
    cc90:	add	x23, sp, #0x1d0
    cc94:	mov	x1, #0x2                   	// #2
    cc98:	mov	x0, x23
    cc9c:	bl	4cf0 <mpc_init2@plt>
    cca0:	mov	x1, x22
    cca4:	mov	x0, x23
    cca8:	mov	w2, #0x0                   	// #0
    ccac:	bl	4db0 <mpc_log@plt>
    ccb0:	mov	x2, x21
    ccb4:	mov	x1, x23
    ccb8:	mov	w3, #0x0                   	// #0
    ccbc:	mov	x0, x23
    ccc0:	bl	4ed0 <mpc_mul@plt>
    ccc4:	ldr	w2, [sp, #108]
    ccc8:	mov	x1, x23
    cccc:	mov	x0, x20
    ccd0:	bl	52a0 <mpc_exp@plt>
    ccd4:	mov	w19, w0
    ccd8:	mov	x0, x23
    ccdc:	bl	4a10 <mpc_clear@plt>
    cce0:	b	cba4 <mpc_pow@@Base+0x9c>
    cce4:	add	x0, x22, #0x20
    cce8:	str	x0, [sp, #216]
    ccec:	bl	54d0 <mpfr_number_p@plt>
    ccf0:	cbz	w0, cc90 <mpc_pow@@Base+0x188>
    ccf4:	mov	x0, x21
    ccf8:	bl	54d0 <mpfr_number_p@plt>
    ccfc:	cbz	w0, cc90 <mpc_pow@@Base+0x188>
    cd00:	add	x0, x21, #0x20
    cd04:	bl	54d0 <mpfr_number_p@plt>
    cd08:	cbz	w0, cc90 <mpc_pow@@Base+0x188>
    cd0c:	ldr	x0, [sp, #136]
    cd10:	mov	x19, #0x8000000000000001    	// #-9223372036854775807
    cd14:	cmp	x0, x19
    cd18:	b.ne	ceac <mpc_pow@@Base+0x3a4>  // b.any
    cd1c:	ldr	x0, [x22, #16]
    cd20:	ldr	x1, [sp, #136]
    cd24:	cmp	x0, x1
    cd28:	b.eq	cc90 <mpc_pow@@Base+0x188>  // b.none
    cd2c:	mov	x1, #0x1                   	// #1
    cd30:	mov	x0, x22
    cd34:	mov	x2, #0x0                   	// #0
    cd38:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    cd3c:	ldr	w1, [sp, #108]
    cd40:	asr	w23, w1, #4
    cd44:	cbnz	w0, cd90 <mpc_pow@@Base+0x288>
    cd48:	ldr	w24, [x21, #8]
    cd4c:	mov	x2, x1
    cd50:	ldr	w21, [x22, #40]
    cd54:	mov	x0, x20
    cd58:	mov	x1, #0x1                   	// #1
    cd5c:	bl	4ce0 <mpc_set_ui@plt>
    cd60:	lsr	w24, w24, #31
    cd64:	mov	w19, w0
    cd68:	lsr	w21, w21, #31
    cd6c:	cmp	w23, #0x3
    cd70:	b.eq	cd7c <mpc_pow@@Base+0x274>  // b.none
    cd74:	cmp	w24, w21
    cd78:	b.eq	cba4 <mpc_pow@@Base+0x9c>  // b.none
    cd7c:	mov	x1, x20
    cd80:	mov	x0, x20
    cd84:	mov	w2, #0x0                   	// #0
    cd88:	bl	4f60 <mpc_conj@plt>
    cd8c:	b	cba4 <mpc_pow@@Base+0x9c>
    cd90:	ldr	x0, [sp, #96]
    cd94:	ldr	x1, [sp, #136]
    cd98:	cmp	x0, x1
    cd9c:	b.ne	ce1c <mpc_pow@@Base+0x314>  // b.any
    cda0:	mov	x0, x21
    cda4:	bl	4e30 <mpfr_integer_p@plt>
    cda8:	cbz	w0, ce10 <mpc_pow@@Base+0x308>
    cdac:	ldr	w0, [sp, #108]
    cdb0:	mov	x1, x22
    cdb4:	ldr	w25, [x21, #8]
    cdb8:	mov	x2, x21
    cdbc:	ldr	w24, [x22, #40]
    cdc0:	and	w3, w0, #0xf
    cdc4:	mov	x0, x20
    cdc8:	bl	4b90 <mpfr_pow@plt>
    cdcc:	add	x1, x20, #0x20
    cdd0:	cmp	w0, #0x0
    cdd4:	cset	w19, ne  // ne = any
    cdd8:	mov	w0, #0x2                   	// #2
    cddc:	csel	w19, w19, w0, ge  // ge = tcont
    cde0:	mov	w0, #0x1                   	// #1
    cde4:	str	w0, [x1, #8]
    cde8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    cdec:	str	x0, [x1, #16]
    cdf0:	lsr	w25, w25, #31
    cdf4:	lsr	w24, w24, #31
    cdf8:	cmp	w23, #0x3
    cdfc:	b.ne	ce98 <mpc_pow@@Base+0x390>  // b.any
    ce00:	mov	w2, w23
    ce04:	mov	x0, x1
    ce08:	bl	4b80 <mpfr_neg@plt>
    ce0c:	b	cba4 <mpc_pow@@Base+0x9c>
    ce10:	mov	x0, x22
    ce14:	bl	51f0 <mpfr_sgn@plt>
    ce18:	tbz	w0, #31, cdac <mpc_pow@@Base+0x2a4>
    ce1c:	mov	x0, x22
    ce20:	mov	x2, #0x0                   	// #0
    ce24:	mov	x1, #0xffffffffffffffff    	// #-1
    ce28:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    ce2c:	cbnz	w0, cea4 <mpc_pow@@Base+0x39c>
    ce30:	mov	x0, x21
    ce34:	bl	4e30 <mpfr_integer_p@plt>
    ce38:	cmp	w0, #0x0
    ce3c:	cset	w0, ne  // ne = any
    ce40:	str	w0, [sp, #148]
    ce44:	mov	x0, x22
    ce48:	bl	51f0 <mpfr_sgn@plt>
    ce4c:	tbz	w0, #31, d084 <mpc_pow@@Base+0x57c>
    ce50:	mov	x0, x21
    ce54:	mov	x1, #0x1                   	// #1
    ce58:	bl	c8c0 <mpc_out_str@@Base+0xb8>
    ce5c:	str	w0, [sp, #104]
    ce60:	mov	w0, w0
    ce64:	cbz	w0, cee8 <mpc_pow@@Base+0x3e0>
    ce68:	ldr	x1, [sp, #96]
    ce6c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    ce70:	cmp	x1, x0
    ce74:	b.eq	d08c <mpc_pow@@Base+0x584>  // b.none
    ce78:	mov	x0, x22
    ce7c:	mov	x2, #0x0                   	// #0
    ce80:	mov	x1, #0xffffffffffffffff    	// #-1
    ce84:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    ce88:	cmp	w0, #0x0
    ce8c:	cset	w0, eq  // eq = none
    ce90:	str	w0, [sp, #104]
    ce94:	b	cee8 <mpc_pow@@Base+0x3e0>
    ce98:	cmp	w25, w24
    ce9c:	b.ne	ce00 <mpc_pow@@Base+0x2f8>  // b.any
    cea0:	b	cba4 <mpc_pow@@Base+0x9c>
    cea4:	str	wzr, [sp, #148]
    cea8:	b	ce44 <mpc_pow@@Base+0x33c>
    ceac:	mov	x0, x22
    ceb0:	mov	x2, #0x1                   	// #1
    ceb4:	mov	x1, #0x0                   	// #0
    ceb8:	bl	5310 <mpc_cmp_si_si@plt>
    cebc:	cbnz	w0, cffc <mpc_pow@@Base+0x4f4>
    cec0:	mov	x0, x21
    cec4:	bl	4e30 <mpfr_integer_p@plt>
    cec8:	cbz	w0, d028 <mpc_pow@@Base+0x520>
    cecc:	mov	x1, #0x0                   	// #0
    ced0:	mov	x0, x21
    ced4:	bl	c8c0 <mpc_out_str@@Base+0xb8>
    ced8:	cbnz	w0, d040 <mpc_pow@@Base+0x538>
    cedc:	mov	w0, #0x1                   	// #1
    cee0:	str	wzr, [sp, #104]
    cee4:	str	w0, [sp, #148]
    cee8:	ldr	x25, [x20]
    ceec:	add	x23, sp, #0x1d0
    cef0:	ldr	x19, [x20, #32]
    cef4:	mov	x1, #0x40                  	// #64
    cef8:	add	x24, sp, #0x190
    cefc:	cmp	x25, x19
    cf00:	csel	x0, x25, x19, ge  // ge = tcont
    cf04:	add	x0, x0, #0xc
    cf08:	cmp	x0, #0x40
    cf0c:	csel	x28, x0, x1, ge  // ge = tcont
    cf10:	mov	x0, x23
    cf14:	mov	x1, x28
    cf18:	bl	4cf0 <mpc_init2@plt>
    cf1c:	mov	x1, x28
    cf20:	mov	x0, x24
    cf24:	bl	4cf0 <mpc_init2@plt>
    cf28:	str	x23, [sp, #120]
    cf2c:	ldr	w0, [sp, #108]
    cf30:	ldr	x1, [x20, #32]
    cf34:	ands	w0, w0, #0xf
    cf38:	str	w0, [sp, #160]
    cf3c:	cinc	x0, x25, eq  // eq = none
    cf40:	str	x0, [sp, #232]
    cf44:	ldr	w0, [sp, #108]
    cf48:	str	x24, [sp, #152]
    cf4c:	asr	w0, w0, #4
    cf50:	str	w0, [sp, #144]
    cf54:	cmp	w0, #0x0
    cf58:	cinc	x0, x19, eq  // eq = none
    cf5c:	str	x0, [sp, #240]
    cf60:	ldr	x0, [x20]
    cf64:	mov	w19, #0xfffffffe            	// #-2
    cf68:	cmp	x1, x0
    cf6c:	csel	x0, x1, x0, ge  // ge = tcont
    cf70:	str	x0, [sp, #112]
    cf74:	ldr	x1, [x22, #16]
    cf78:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    cf7c:	cmp	x1, x0
    cf80:	cset	w0, eq  // eq = none
    cf84:	str	w0, [sp, #224]
    cf88:	add	x0, sp, #0x110
    cf8c:	str	x0, [sp, #128]
    cf90:	add	x0, x23, #0x20
    cf94:	str	x0, [sp, #200]
    cf98:	ldr	x0, [sp, #152]
    cf9c:	mov	x1, x22
    cfa0:	mov	w2, #0x0                   	// #0
    cfa4:	bl	4db0 <mpc_log@plt>
    cfa8:	ldr	x1, [sp, #152]
    cfac:	mov	x2, x21
    cfb0:	mov	w3, #0x0                   	// #0
    cfb4:	mov	x0, x1
    cfb8:	bl	4ed0 <mpc_mul@plt>
    cfbc:	ldr	x24, [sp, #416]
    cfc0:	ldr	x1, [sp, #448]
    cfc4:	cmp	x24, x1
    cfc8:	csel	x24, x24, x1, ge  // ge = tcont
    cfcc:	cmp	x24, #0x0
    cfd0:	csel	x24, x24, xzr, ge  // ge = tcont
    cfd4:	cmp	x28, x24
    cfd8:	b.gt	d094 <mpc_pow@@Base+0x58c>
    cfdc:	add	x28, x28, #0x40
    cfe0:	ldr	x0, [sp, #152]
    cfe4:	mov	x1, x28
    cfe8:	bl	4c00 <mpc_set_prec@plt>
    cfec:	ldr	x0, [sp, #120]
    cff0:	mov	x1, x28
    cff4:	bl	4c00 <mpc_set_prec@plt>
    cff8:	b	cf98 <mpc_pow@@Base+0x490>
    cffc:	mov	x0, x22
    d000:	mov	x2, #0xffffffffffffffff    	// #-1
    d004:	mov	x1, #0x0                   	// #0
    d008:	bl	5310 <mpc_cmp_si_si@plt>
    d00c:	cbz	w0, cec0 <mpc_pow@@Base+0x3b8>
    d010:	mov	x0, x22
    d014:	bl	51f0 <mpfr_sgn@plt>
    d018:	cbnz	w0, d028 <mpc_pow@@Base+0x520>
    d01c:	ldr	x0, [sp, #96]
    d020:	cmp	x0, x19
    d024:	b.eq	cec0 <mpc_pow@@Base+0x3b8>  // b.none
    d028:	add	x1, x22, #0x20
    d02c:	mov	x0, x22
    d030:	bl	53b0 <mpfr_cmpabs@plt>
    d034:	cbz	w0, d050 <mpc_pow@@Base+0x548>
    d038:	str	wzr, [sp, #104]
    d03c:	b	d048 <mpc_pow@@Base+0x540>
    d040:	mov	w0, #0x1                   	// #1
    d044:	str	w0, [sp, #104]
    d048:	str	wzr, [sp, #148]
    d04c:	b	cee8 <mpc_pow@@Base+0x3e0>
    d050:	ldr	x1, [sp, #96]
    d054:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    d058:	cmp	x1, x0
    d05c:	b.ne	d038 <mpc_pow@@Base+0x530>  // b.any
    d060:	mov	x0, x21
    d064:	bl	4e30 <mpfr_integer_p@plt>
    d068:	cbz	w0, d038 <mpc_pow@@Base+0x530>
    d06c:	mov	x0, x21
    d070:	mov	x1, #0x0                   	// #0
    d074:	bl	c8c0 <mpc_out_str@@Base+0xb8>
    d078:	cbnz	w0, d038 <mpc_pow@@Base+0x530>
    d07c:	mov	x1, #0xffffffffffffffff    	// #-1
    d080:	b	ced0 <mpc_pow@@Base+0x3c8>
    d084:	str	wzr, [sp, #104]
    d088:	b	cee8 <mpc_pow@@Base+0x3e0>
    d08c:	mov	w0, #0x1                   	// #1
    d090:	b	ce90 <mpc_pow@@Base+0x388>
    d094:	bl	4a50 <mpfr_clear_overflow@plt>
    d098:	bl	4e20 <mpfr_clear_underflow@plt>
    d09c:	ldr	x0, [sp, #120]
    d0a0:	mov	w2, #0x0                   	// #0
    d0a4:	ldr	x1, [sp, #152]
    d0a8:	bl	52a0 <mpc_exp@plt>
    d0ac:	mov	w23, w0
    d0b0:	bl	52f0 <mpfr_underflow_p@plt>
    d0b4:	cbz	w0, d180 <mpc_pow@@Base+0x678>
    d0b8:	ldr	x1, [sp, #120]
    d0bc:	mov	x0, x20
    d0c0:	mov	w2, #0x0                   	// #0
    d0c4:	bl	5580 <mpc_set@plt>
    d0c8:	and	w0, w23, #0x3
    d0cc:	cmp	w0, #0x2
    d0d0:	b.ne	d1c8 <mpc_pow@@Base+0x6c0>  // b.any
    d0d4:	mov	w22, #0xffffffff            	// #-1
    d0d8:	asr	w23, w23, #2
    d0dc:	cmp	w23, #0x2
    d0e0:	b.eq	d1d4 <mpc_pow@@Base+0x6cc>  // b.none
    d0e4:	cmp	w23, #0x0
    d0e8:	cset	w21, ne  // ne = any
    d0ec:	ldr	x1, [x20, #16]
    d0f0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    d0f4:	cmp	x1, x0
    d0f8:	b.ne	d10c <mpc_pow@@Base+0x604>  // b.any
    d0fc:	ldr	w1, [sp, #160]
    d100:	mov	x0, x20
    d104:	bl	4dd0 <mpc_fix_inf@plt>
    d108:	mov	w22, w0
    d10c:	ldr	x1, [x20, #48]
    d110:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    d114:	cmp	x1, x0
    d118:	b.ne	d12c <mpc_pow@@Base+0x624>  // b.any
    d11c:	ldr	w1, [sp, #144]
    d120:	add	x0, x20, #0x20
    d124:	bl	4dd0 <mpc_fix_inf@plt>
    d128:	mov	w21, w0
    d12c:	cmp	w22, #0x0
    d130:	mov	w19, #0x2                   	// #2
    d134:	cset	w0, ne  // ne = any
    d138:	mov	w1, #0x4                   	// #4
    d13c:	csel	w0, w0, w19, ge  // ge = tcont
    d140:	cmp	w21, #0x0
    d144:	csel	w1, w21, w1, eq  // eq = none
    d148:	mov	w21, #0x8                   	// #8
    d14c:	csel	w21, w1, w21, ge  // ge = tcont
    d150:	orr	w19, w0, w21
    d154:	add	x0, sp, #0x190
    d158:	bl	4a10 <mpc_clear@plt>
    d15c:	add	x0, sp, #0x1d0
    d160:	bl	4a10 <mpc_clear@plt>
    d164:	ldr	w0, [sp, #228]
    d168:	cbz	w0, d170 <mpc_pow@@Base+0x668>
    d16c:	bl	4990 <mpfr_set_underflow@plt>
    d170:	ldr	w0, [sp, #248]
    d174:	cbz	w0, cba4 <mpc_pow@@Base+0x9c>
    d178:	bl	5490 <mpfr_set_overflow@plt>
    d17c:	b	cba4 <mpc_pow@@Base+0x9c>
    d180:	bl	54e0 <mpfr_overflow_p@plt>
    d184:	str	w0, [sp, #164]
    d188:	mov	w0, w0
    d18c:	cbnz	w0, d0b8 <mpc_pow@@Base+0x5b0>
    d190:	ldr	x0, [sp, #480]
    d194:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    d198:	ldr	x1, [sp, #512]
    d19c:	cmp	x0, x2
    d1a0:	b.eq	dd54 <mpc_pow@@Base+0x124c>  // b.none
    d1a4:	cmp	x1, x2
    d1a8:	b.eq	d258 <mpc_pow@@Base+0x750>  // b.none
    d1ac:	cmp	x0, x1
    d1b0:	b.gt	d1dc <mpc_pow@@Base+0x6d4>
    d1b4:	mov	x2, x0
    d1b8:	mov	x0, x1
    d1bc:	sub	x0, x0, x2
    d1c0:	stp	x0, xzr, [sp, #168]
    d1c4:	b	d1e4 <mpc_pow@@Base+0x6dc>
    d1c8:	cmp	w0, #0x0
    d1cc:	cset	w22, ne  // ne = any
    d1d0:	b	d0d8 <mpc_pow@@Base+0x5d0>
    d1d4:	mov	w21, #0xffffffff            	// #-1
    d1d8:	b	d0ec <mpc_pow@@Base+0x5e4>
    d1dc:	sub	x0, x0, x1
    d1e0:	stp	xzr, x0, [sp, #168]
    d1e4:	ldr	w0, [sp, #104]
    d1e8:	cbz	w0, d260 <mpc_pow@@Base+0x758>
    d1ec:	ldr	w0, [sp, #148]
    d1f0:	cbz	w0, d2d8 <mpc_pow@@Base+0x7d0>
    d1f4:	add	x23, sp, #0x170
    d1f8:	ldr	w19, [x22, #40]
    d1fc:	ldr	w24, [x22, #8]
    d200:	mov	x0, x23
    d204:	bl	4aa0 <mpfr_init@plt>
    d208:	mov	x1, x22
    d20c:	mov	w2, #0x0                   	// #0
    d210:	mov	x0, x23
    d214:	bl	4ea0 <mpc_norm@plt>
    d218:	mov	x1, #0x1                   	// #1
    d21c:	mov	w22, w0
    d220:	mov	x2, #0x0                   	// #0
    d224:	mov	x0, x23
    d228:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    d22c:	cmp	w0, #0x0
    d230:	ccmp	w22, #0x0, #0x4, eq  // eq = none
    d234:	neg	w22, w22
    d238:	csel	w1, w22, w0, ne  // ne = any
    d23c:	lsr	w19, w19, #31
    d240:	cmp	w1, #0x0
    d244:	b.ge	dbc8 <mpc_pow@@Base+0x10c0>  // b.tcont
    d248:	ldr	w22, [x21, #40]
    d24c:	mvn	w22, w22
    d250:	lsr	w22, w22, #31
    d254:	b	dbd4 <mpc_pow@@Base+0x10cc>
    d258:	mov	x2, x0
    d25c:	b	d1bc <mpc_pow@@Base+0x6b4>
    d260:	ldr	x1, [sp, #168]
    d264:	add	x0, x24, #0x3
    d268:	add	x0, x0, x1
    d26c:	cmp	x0, x28
    d270:	b.ge	d29c <mpc_pow@@Base+0x794>  // b.tcont
    d274:	ldr	x0, [sp, #168]
    d278:	sub	x1, x28, x24
    d27c:	sub	x1, x1, #0x3
    d280:	mov	w3, #0x1                   	// #1
    d284:	sub	x1, x1, x0
    d288:	mov	w2, #0x0                   	// #0
    d28c:	ldr	x0, [sp, #120]
    d290:	ldr	x4, [sp, #232]
    d294:	bl	5450 <mpfr_can_round@plt>
    d298:	cbnz	w0, d1ec <mpc_pow@@Base+0x6e4>
    d29c:	ldr	x0, [sp, #120]
    d2a0:	bl	54d0 <mpfr_number_p@plt>
    d2a4:	cbnz	w0, d334 <mpc_pow@@Base+0x82c>
    d2a8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    d2ac:	add	x4, x4, #0x7cc
    d2b0:	mov	w3, #0x2d6                 	// #726
    d2b4:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    d2b8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    d2bc:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    d2c0:	add	x2, x2, #0x7ad
    d2c4:	ldr	x0, [x0, #4008]
    d2c8:	add	x1, x1, #0x5f3
    d2cc:	ldr	x0, [x0]
    d2d0:	bl	55a0 <fprintf@plt>
    d2d4:	bl	5000 <abort@plt>
    d2d8:	ldr	x1, [sp, #176]
    d2dc:	add	x0, x24, #0x3
    d2e0:	add	x0, x0, x1
    d2e4:	cmp	x0, x28
    d2e8:	b.ge	dd48 <mpc_pow@@Base+0x1240>  // b.tcont
    d2ec:	ldr	x0, [sp, #176]
    d2f0:	sub	x1, x28, x24
    d2f4:	sub	x1, x1, #0x3
    d2f8:	mov	w3, #0x1                   	// #1
    d2fc:	sub	x1, x1, x0
    d300:	mov	w2, #0x0                   	// #0
    d304:	ldr	x0, [sp, #200]
    d308:	ldr	x4, [sp, #240]
    d30c:	bl	5450 <mpfr_can_round@plt>
    d310:	cbz	w0, dd48 <mpc_pow@@Base+0x1240>
    d314:	ldr	w0, [sp, #104]
    d318:	cbnz	w0, dcc4 <mpc_pow@@Base+0x11bc>
    d31c:	ldr	w2, [sp, #108]
    d320:	mov	x0, x20
    d324:	ldr	x1, [sp, #120]
    d328:	bl	5580 <mpc_set@plt>
    d32c:	mov	w19, w0
    d330:	b	d154 <mpc_pow@@Base+0x64c>
    d334:	ldr	w0, [sp, #148]
    d338:	cbnz	w0, d358 <mpc_pow@@Base+0x850>
    d33c:	ldr	x0, [sp, #200]
    d340:	bl	54d0 <mpfr_number_p@plt>
    d344:	cbnz	w0, d358 <mpc_pow@@Base+0x850>
    d348:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    d34c:	mov	w3, #0x2d8                 	// #728
    d350:	add	x4, x4, #0x7f5
    d354:	b	d2b4 <mpc_pow@@Base+0x7ac>
    d358:	cmn	w19, #0x2
    d35c:	b.ne	dbbc <mpc_pow@@Base+0x10b4>  // b.any
    d360:	ldr	x1, [sp, #96]
    d364:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    d368:	cmp	x1, x0
    d36c:	b.ne	d5a8 <mpc_pow@@Base+0xaa0>  // b.any
    d370:	ldr	x0, [sp, #112]
    d374:	ldr	x24, [x22, #16]
    d378:	lsl	x0, x0, #1
    d37c:	str	x0, [sp, #112]
    d380:	ldr	w0, [x22, #8]
    d384:	cmp	x24, x1
    d388:	str	w0, [sp, #252]
    d38c:	ldr	w0, [x22, #40]
    d390:	str	w0, [sp, #256]
    d394:	cset	w0, eq  // eq = none
    d398:	str	w0, [sp, #260]
    d39c:	cmp	x21, x20
    d3a0:	b.eq	d3b0 <mpc_pow@@Base+0x8a8>  // b.none
    d3a4:	add	x0, x20, #0x20
    d3a8:	cmp	x21, x0
    d3ac:	b.ne	d3dc <mpc_pow@@Base+0x8d4>  // b.any
    d3b0:	ldr	x1, [x21]
    d3b4:	add	x23, sp, #0x170
    d3b8:	mov	x0, x23
    d3bc:	bl	5440 <mpfr_init2@plt>
    d3c0:	ldr	w3, [x21, #8]
    d3c4:	mov	x1, x21
    d3c8:	mov	x0, x23
    d3cc:	mov	w2, #0x0                   	// #0
    d3d0:	bl	51d0 <mpfr_set4@plt>
    d3d4:	mov	w0, #0x1                   	// #1
    d3d8:	str	w0, [sp, #164]
    d3dc:	ldr	x0, [sp, #128]
    d3e0:	add	x23, sp, #0x140
    d3e4:	add	x26, sp, #0x150
    d3e8:	bl	54a0 <__gmpz_init@plt>
    d3ec:	add	x0, sp, #0x120
    d3f0:	bl	54a0 <__gmpz_init@plt>
    d3f4:	add	x0, sp, #0x130
    d3f8:	bl	54a0 <__gmpz_init@plt>
    d3fc:	mov	x0, x23
    d400:	bl	54a0 <__gmpz_init@plt>
    d404:	mov	x0, x26
    d408:	bl	54a0 <__gmpz_init@plt>
    d40c:	add	x0, sp, #0x160
    d410:	bl	54a0 <__gmpz_init@plt>
    d414:	ldr	x0, [sp, #128]
    d418:	mov	x1, x21
    d41c:	bl	5470 <mpfr_get_z_2exp@plt>
    d420:	mov	x25, x0
    d424:	ldr	x0, [sp, #128]
    d428:	mov	x1, #0x0                   	// #0
    d42c:	bl	49f0 <__gmpz_scan1@plt>
    d430:	mov	x2, x0
    d434:	ldr	x1, [sp, #128]
    d438:	add	x0, x0, x25
    d43c:	str	x0, [sp, #184]
    d440:	mov	x0, x1
    d444:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d448:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    d44c:	cmp	x24, x0
    d450:	b.ne	d4cc <mpc_pow@@Base+0x9c4>  // b.any
    d454:	mov	x0, x23
    d458:	mov	x23, #0x0                   	// #0
    d45c:	mov	x1, #0x0                   	// #0
    d460:	bl	4b10 <__gmpz_set_ui@plt>
    d464:	ldr	x0, [x22, #48]
    d468:	mov	x27, #0x8000000000000001    	// #-9223372036854775807
    d46c:	cmp	x0, x27
    d470:	b.ne	d4e0 <mpc_pow@@Base+0x9d8>  // b.any
    d474:	mov	x25, x23
    d478:	mov	x0, x26
    d47c:	mov	x1, #0x0                   	// #0
    d480:	bl	4b10 <__gmpz_set_ui@plt>
    d484:	mov	x23, x25
    d488:	ldr	w0, [sp, #324]
    d48c:	cbnz	w0, d5f0 <mpc_pow@@Base+0xae8>
    d490:	add	x25, sp, #0x150
    d494:	mov	x1, #0x0                   	// #0
    d498:	mov	x0, x25
    d49c:	bl	49f0 <__gmpz_scan1@plt>
    d4a0:	mov	x27, x0
    d4a4:	mov	x2, x0
    d4a8:	add	x27, x27, x23
    d4ac:	mov	x1, x25
    d4b0:	mov	x0, x25
    d4b4:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d4b8:	add	x23, sp, #0x120
    d4bc:	add	x24, sp, #0x140
    d4c0:	add	x25, sp, #0x150
    d4c4:	add	x26, sp, #0x130
    d4c8:	b	d724 <mpc_pow@@Base+0xc1c>
    d4cc:	mov	x0, x23
    d4d0:	mov	x1, x22
    d4d4:	bl	5470 <mpfr_get_z_2exp@plt>
    d4d8:	mov	x23, x0
    d4dc:	b	d464 <mpc_pow@@Base+0x95c>
    d4e0:	ldr	x1, [sp, #216]
    d4e4:	mov	x0, x26
    d4e8:	bl	5470 <mpfr_get_z_2exp@plt>
    d4ec:	mov	x25, x0
    d4f0:	cmp	x24, x27
    d4f4:	b.eq	d484 <mpc_pow@@Base+0x97c>  // b.none
    d4f8:	cmp	x0, x23
    d4fc:	b.le	d5bc <mpc_pow@@Base+0xab4>
    d500:	sub	x2, x0, x23
    d504:	mov	x1, x26
    d508:	mov	x0, x26
    d50c:	bl	4e90 <__gmpz_mul_2exp@plt>
    d510:	mov	w1, #0x2                   	// #2
    d514:	mov	x0, x26
    d518:	bl	54b0 <__gmpz_sizeinbase@plt>
    d51c:	ldr	x1, [sp, #112]
    d520:	cmp	x1, x0
    d524:	b.ge	d488 <mpc_pow@@Base+0x980>  // b.tcont
    d528:	ldr	x0, [sp, #128]
    d52c:	bl	5180 <__gmpz_clear@plt>
    d530:	add	x0, sp, #0x120
    d534:	bl	5180 <__gmpz_clear@plt>
    d538:	add	x0, sp, #0x130
    d53c:	bl	5180 <__gmpz_clear@plt>
    d540:	add	x0, sp, #0x140
    d544:	bl	5180 <__gmpz_clear@plt>
    d548:	add	x0, sp, #0x150
    d54c:	bl	5180 <__gmpz_clear@plt>
    d550:	add	x0, sp, #0x160
    d554:	bl	5180 <__gmpz_clear@plt>
    d558:	ldr	w0, [sp, #260]
    d55c:	cmp	w19, #0x0
    d560:	ccmp	w0, #0x0, #0x4, ge  // ge = tcont
    d564:	b.eq	d590 <mpc_pow@@Base+0xa88>  // b.none
    d568:	ldr	w0, [sp, #164]
    d56c:	add	x3, sp, #0x170
    d570:	cmp	w0, #0x0
    d574:	ldr	w0, [sp, #256]
    d578:	csel	x3, x3, x21, ne  // ne = any
    d57c:	lsr	w2, w0, #31
    d580:	ldr	w0, [sp, #252]
    d584:	lsr	w1, w0, #31
    d588:	mov	x0, x20
    d58c:	bl	c960 <mpc_out_str@@Base+0x158>
    d590:	ldr	w0, [sp, #164]
    d594:	cbz	w0, d5a0 <mpc_pow@@Base+0xa98>
    d598:	add	x0, sp, #0x170
    d59c:	bl	4d60 <mpfr_clear@plt>
    d5a0:	cmn	w19, #0x2
    d5a4:	b.cc	d154 <mpc_pow@@Base+0x64c>  // b.lo, b.ul, b.last
    d5a8:	ldp	x0, x1, [sp, #168]
    d5ac:	add	x0, x0, x1
    d5b0:	add	x0, x0, #0x40
    d5b4:	add	x28, x28, x0
    d5b8:	b	cfe0 <mpc_pow@@Base+0x4d8>
    d5bc:	b.ge	d488 <mpc_pow@@Base+0x980>  // b.tcont
    d5c0:	sub	x2, x23, x25
    d5c4:	add	x0, sp, #0x140
    d5c8:	mov	x1, x0
    d5cc:	mov	x23, x0
    d5d0:	bl	4e90 <__gmpz_mul_2exp@plt>
    d5d4:	mov	w1, #0x2                   	// #2
    d5d8:	mov	x0, x23
    d5dc:	bl	54b0 <__gmpz_sizeinbase@plt>
    d5e0:	ldr	x1, [sp, #112]
    d5e4:	cmp	x1, x0
    d5e8:	b.ge	d484 <mpc_pow@@Base+0x97c>  // b.tcont
    d5ec:	b	d528 <mpc_pow@@Base+0xa20>
    d5f0:	add	x26, sp, #0x140
    d5f4:	mov	x1, #0x0                   	// #0
    d5f8:	mov	x0, x26
    d5fc:	bl	49f0 <__gmpz_scan1@plt>
    d600:	ldr	w25, [sp, #340]
    d604:	mov	x24, x0
    d608:	cbnz	w25, d624 <mpc_pow@@Base+0xb1c>
    d60c:	mov	x2, x0
    d610:	mov	x1, x26
    d614:	mov	x0, x1
    d618:	add	x27, x24, x23
    d61c:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d620:	b	d4b8 <mpc_pow@@Base+0x9b0>
    d624:	add	x25, sp, #0x150
    d628:	mov	x1, #0x0                   	// #0
    d62c:	mov	x0, x25
    d630:	bl	49f0 <__gmpz_scan1@plt>
    d634:	cmp	x0, x24
    d638:	mov	x1, x26
    d63c:	csel	x24, x0, x24, ls  // ls = plast
    d640:	mov	x0, x26
    d644:	mov	x2, x24
    d648:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d64c:	mov	x2, x24
    d650:	mov	x1, x25
    d654:	b	d614 <mpc_pow@@Base+0xb0c>
    d658:	tbz	w27, #0, d680 <mpc_pow@@Base+0xb78>
    d65c:	sub	x27, x27, #0x1
    d660:	mov	x1, x24
    d664:	mov	x0, x24
    d668:	mov	x2, #0x1                   	// #1
    d66c:	bl	4e90 <__gmpz_mul_2exp@plt>
    d670:	mov	x1, x25
    d674:	mov	x0, x25
    d678:	mov	x2, #0x1                   	// #1
    d67c:	bl	4e90 <__gmpz_mul_2exp@plt>
    d680:	ldr	w0, [sp, #340]
    d684:	cbnz	w0, d88c <mpc_pow@@Base+0xd84>
    d688:	ldr	w0, [sp, #324]
    d68c:	tbnz	w0, #31, d6a0 <mpc_pow@@Base+0xb98>
    d690:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    d694:	mov	w3, #0x3c                  	// #60
    d698:	add	x4, x4, #0x81e
    d69c:	b	d2b4 <mpc_pow@@Base+0x7ac>
    d6a0:	mov	x1, x24
    d6a4:	mov	x0, x26
    d6a8:	bl	4d00 <__gmpz_set@plt>
    d6ac:	ldr	w0, [sp, #308]
    d6b0:	neg	w1, w0
    d6b4:	str	w1, [sp, #308]
    d6b8:	sxtw	x1, w1
    d6bc:	tbnz	w0, #31, d6d4 <mpc_pow@@Base+0xbcc>
    d6c0:	mvn	x0, x1
    d6c4:	lsr	x0, x0, #63
    d6c8:	cbnz	w0, d6e0 <mpc_pow@@Base+0xbd8>
    d6cc:	mov	w19, #0xffffffff            	// #-1
    d6d0:	b	d528 <mpc_pow@@Base+0xa20>
    d6d4:	ldr	x0, [sp, #312]
    d6d8:	bl	5420 <__gmpn_perfect_square_p@plt>
    d6dc:	b	d6c8 <mpc_pow@@Base+0xbc0>
    d6e0:	mov	x1, x26
    d6e4:	mov	x0, x26
    d6e8:	bl	4af0 <__gmpz_sqrt@plt>
    d6ec:	mov	x0, x23
    d6f0:	mov	x1, #0x0                   	// #0
    d6f4:	bl	4b10 <__gmpz_set_ui@plt>
    d6f8:	mov	x1, x24
    d6fc:	mov	x0, x23
    d700:	bl	4da0 <__gmpz_swap@plt>
    d704:	mov	x0, x26
    d708:	mov	x1, x25
    d70c:	bl	4da0 <__gmpz_swap@plt>
    d710:	mov	x0, #0x2                   	// #2
    d714:	sdiv	x27, x27, x0
    d718:	ldr	x0, [sp, #184]
    d71c:	add	x0, x0, #0x1
    d720:	str	x0, [sp, #184]
    d724:	ldr	x0, [sp, #184]
    d728:	tbnz	x0, #63, d658 <mpc_pow@@Base+0xb50>
    d72c:	ldr	w0, [sp, #276]
    d730:	tbz	w0, #31, d79c <mpc_pow@@Base+0xc94>
    d734:	mov	x2, x24
    d738:	mov	x1, x24
    d73c:	mov	x0, x23
    d740:	bl	4d40 <__gmpz_mul@plt>
    d744:	add	x2, sp, #0x150
    d748:	mov	x0, x23
    d74c:	mov	x1, x2
    d750:	bl	4f10 <__gmpz_addmul@plt>
    d754:	mov	x1, #0x0                   	// #0
    d758:	mov	x0, x23
    d75c:	bl	49f0 <__gmpz_scan1@plt>
    d760:	mov	x24, x0
    d764:	mov	w1, #0x2                   	// #2
    d768:	mov	x0, x23
    d76c:	bl	54b0 <__gmpz_sizeinbase@plt>
    d770:	add	x1, x24, #0x1
    d774:	cmp	x0, x1
    d778:	b.ne	d6cc <mpc_pow@@Base+0xbc4>  // b.any
    d77c:	ldr	w0, [sp, #340]
    d780:	neg	x2, x27
    d784:	sub	x27, x2, x24
    d788:	neg	w0, w0
    d78c:	str	w0, [sp, #340]
    d790:	ldr	w0, [sp, #276]
    d794:	neg	w0, w0
    d798:	str	w0, [sp, #276]
    d79c:	ldr	x0, [sp, #128]
    d7a0:	mov	w1, #0x2                   	// #2
    d7a4:	add	x25, sp, #0x120
    d7a8:	add	x24, sp, #0x130
    d7ac:	mov	x23, x27
    d7b0:	bl	54b0 <__gmpz_sizeinbase@plt>
    d7b4:	mov	x26, x0
    d7b8:	add	x0, sp, #0x140
    d7bc:	mov	x2, x0
    d7c0:	mov	x1, x0
    d7c4:	mov	x0, x25
    d7c8:	str	x2, [sp, #208]
    d7cc:	bl	4d00 <__gmpz_set@plt>
    d7d0:	mov	x0, x24
    d7d4:	add	x1, sp, #0x150
    d7d8:	bl	4d00 <__gmpz_set@plt>
    d7dc:	sub	x0, x26, #0x2
    d7e0:	add	x26, sp, #0x160
    d7e4:	str	x0, [sp, #192]
    d7e8:	ldr	x0, [sp, #192]
    d7ec:	cmn	x0, #0x1
    d7f0:	b.ne	d968 <mpc_pow@@Base+0xe60>  // b.any
    d7f4:	ldr	x3, [sp, #184]
    d7f8:	add	x25, sp, #0x120
    d7fc:	add	x27, sp, #0x130
    d800:	add	x24, sp, #0x160
    d804:	cbnz	x3, dae8 <mpc_pow@@Base+0xfe0>
    d808:	ldr	w2, [sp, #160]
    d80c:	mov	x1, x25
    d810:	mov	x0, x20
    d814:	add	x25, x20, #0x20
    d818:	bl	4ec0 <mpfr_set_z@plt>
    d81c:	cmp	w0, #0x0
    d820:	ldr	w2, [sp, #144]
    d824:	cset	w19, ne  // ne = any
    d828:	mov	w0, #0x2                   	// #2
    d82c:	mov	x1, x27
    d830:	csel	w19, w19, w0, ge  // ge = tcont
    d834:	mov	x0, x25
    d838:	bl	4ec0 <mpfr_set_z@plt>
    d83c:	tbnz	w0, #31, dbb4 <mpc_pow@@Base+0x10ac>
    d840:	ldr	w2, [sp, #144]
    d844:	mov	x1, x27
    d848:	mov	x0, x25
    d84c:	bl	4ec0 <mpfr_set_z@plt>
    d850:	cmp	w0, #0x0
    d854:	mov	w1, #0x4                   	// #4
    d858:	csel	w0, w0, w1, eq  // eq = none
    d85c:	ldr	w3, [sp, #160]
    d860:	mov	x2, x23
    d864:	mov	x1, x20
    d868:	orr	w19, w19, w0
    d86c:	mov	x0, x20
    d870:	bl	4a70 <mpfr_mul_2si@plt>
    d874:	ldr	w3, [sp, #144]
    d878:	mov	x2, x23
    d87c:	mov	x1, x25
    d880:	mov	x0, x25
    d884:	bl	4a70 <mpfr_mul_2si@plt>
    d888:	b	d528 <mpc_pow@@Base+0xa20>
    d88c:	mov	x0, x25
    d890:	mov	x1, #0x1                   	// #1
    d894:	bl	4c40 <__gmpz_divisible_2exp_p@plt>
    d898:	cbz	w0, d6cc <mpc_pow@@Base+0xbc4>
    d89c:	mov	x2, x24
    d8a0:	mov	x1, x24
    d8a4:	mov	x0, x23
    d8a8:	bl	4d40 <__gmpz_mul@plt>
    d8ac:	mov	x1, x25
    d8b0:	mov	x2, x25
    d8b4:	mov	x0, x23
    d8b8:	bl	4f10 <__gmpz_addmul@plt>
    d8bc:	ldrsw	x1, [sp, #292]
    d8c0:	cmp	x1, #0x0
    d8c4:	b.gt	d950 <mpc_pow@@Base+0xe48>
    d8c8:	cset	w0, eq  // eq = none
    d8cc:	cbz	w0, d6cc <mpc_pow@@Base+0xbc4>
    d8d0:	mov	x1, x23
    d8d4:	mov	x0, x23
    d8d8:	bl	4af0 <__gmpz_sqrt@plt>
    d8dc:	mov	x2, x23
    d8e0:	mov	x1, x24
    d8e4:	mov	x0, x23
    d8e8:	bl	53d0 <__gmpz_add@plt>
    d8ec:	mov	x0, x23
    d8f0:	mov	x1, #0x1                   	// #1
    d8f4:	bl	4c40 <__gmpz_divisible_2exp_p@plt>
    d8f8:	cbz	w0, d6cc <mpc_pow@@Base+0xbc4>
    d8fc:	mov	x1, x23
    d900:	mov	x0, x23
    d904:	mov	x2, #0x1                   	// #1
    d908:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d90c:	ldrsw	x1, [sp, #292]
    d910:	cmp	x1, #0x0
    d914:	b.gt	d95c <mpc_pow@@Base+0xe54>
    d918:	cset	w0, eq  // eq = none
    d91c:	cbz	w0, d6cc <mpc_pow@@Base+0xbc4>
    d920:	mov	x1, x23
    d924:	mov	x0, x23
    d928:	bl	4af0 <__gmpz_sqrt@plt>
    d92c:	mov	x1, x25
    d930:	mov	x0, x26
    d934:	mov	x2, #0x1                   	// #1
    d938:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d93c:	mov	x2, x23
    d940:	mov	x1, x26
    d944:	mov	x0, x26
    d948:	bl	4cc0 <__gmpz_divexact@plt>
    d94c:	b	d6f8 <mpc_pow@@Base+0xbf0>
    d950:	ldr	x0, [sp, #296]
    d954:	bl	5420 <__gmpn_perfect_square_p@plt>
    d958:	b	d8cc <mpc_pow@@Base+0xdc4>
    d95c:	ldr	x0, [sp, #296]
    d960:	bl	5420 <__gmpn_perfect_square_p@plt>
    d964:	b	d91c <mpc_pow@@Base+0xe14>
    d968:	mov	x2, x24
    d96c:	mov	x1, x25
    d970:	mov	x0, x26
    d974:	bl	4d40 <__gmpz_mul@plt>
    d978:	mov	x2, x25
    d97c:	mov	x1, x25
    d980:	mov	x0, x25
    d984:	bl	4d40 <__gmpz_mul@plt>
    d988:	mov	x2, x24
    d98c:	mov	x1, x24
    d990:	mov	x0, x25
    d994:	bl	52d0 <__gmpz_submul@plt>
    d998:	mov	x1, x26
    d99c:	mov	x0, x24
    d9a0:	mov	x2, #0x1                   	// #1
    d9a4:	bl	4e90 <__gmpz_mul_2exp@plt>
    d9a8:	ldr	x0, [sp, #128]
    d9ac:	lsl	x23, x23, #1
    d9b0:	ldr	x1, [sp, #192]
    d9b4:	bl	4d30 <__gmpz_tstbit@plt>
    d9b8:	cbz	w0, da18 <mpc_pow@@Base+0xf10>
    d9bc:	ldr	x2, [sp, #208]
    d9c0:	mov	x1, x25
    d9c4:	mov	x0, x26
    d9c8:	add	x23, x23, x27
    d9cc:	bl	4d40 <__gmpz_mul@plt>
    d9d0:	add	x3, sp, #0x150
    d9d4:	mov	x1, x24
    d9d8:	mov	x2, x3
    d9dc:	mov	x0, x26
    d9e0:	str	x3, [sp, #264]
    d9e4:	bl	52d0 <__gmpz_submul@plt>
    d9e8:	ldr	x2, [sp, #208]
    d9ec:	mov	x1, x24
    d9f0:	mov	x0, x24
    d9f4:	bl	4d40 <__gmpz_mul@plt>
    d9f8:	ldr	x3, [sp, #264]
    d9fc:	mov	x1, x25
    da00:	mov	x0, x24
    da04:	mov	x2, x3
    da08:	bl	4f10 <__gmpz_addmul@plt>
    da0c:	mov	x1, x26
    da10:	mov	x0, x25
    da14:	bl	4da0 <__gmpz_swap@plt>
    da18:	ldr	w0, [sp, #292]
    da1c:	cbnz	w0, da40 <mpc_pow@@Base+0xf38>
    da20:	mov	x0, x24
    da24:	mov	x1, #0x0                   	// #0
    da28:	bl	49f0 <__gmpz_scan1@plt>
    da2c:	mov	x2, x0
    da30:	str	x0, [sp, #264]
    da34:	mov	x1, x24
    da38:	mov	x0, x24
    da3c:	b	da6c <mpc_pow@@Base+0xf64>
    da40:	ldr	w3, [sp, #308]
    da44:	mov	x0, x25
    da48:	mov	x1, #0x0                   	// #0
    da4c:	str	w3, [sp, #264]
    da50:	bl	49f0 <__gmpz_scan1@plt>
    da54:	mov	x2, x0
    da58:	ldr	w3, [sp, #264]
    da5c:	str	x0, [sp, #264]
    da60:	cbnz	w3, dab8 <mpc_pow@@Base+0xfb0>
    da64:	mov	x1, x25
    da68:	mov	x0, x25
    da6c:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    da70:	ldr	x2, [sp, #264]
    da74:	mov	w1, #0x2                   	// #2
    da78:	mov	x0, x25
    da7c:	add	x23, x2, x23
    da80:	bl	54b0 <__gmpz_sizeinbase@plt>
    da84:	ldr	x1, [sp, #112]
    da88:	cmp	x1, x0
    da8c:	b.lt	d528 <mpc_pow@@Base+0xa20>  // b.tstop
    da90:	mov	w1, #0x2                   	// #2
    da94:	mov	x0, x24
    da98:	bl	54b0 <__gmpz_sizeinbase@plt>
    da9c:	ldr	x1, [sp, #192]
    daa0:	sub	x1, x1, #0x1
    daa4:	str	x1, [sp, #192]
    daa8:	ldr	x1, [sp, #112]
    daac:	cmp	x1, x0
    dab0:	b.ge	d7e8 <mpc_pow@@Base+0xce0>  // b.tcont
    dab4:	b	d528 <mpc_pow@@Base+0xa20>
    dab8:	mov	x1, #0x0                   	// #0
    dabc:	mov	x0, x24
    dac0:	bl	49f0 <__gmpz_scan1@plt>
    dac4:	ldr	x2, [sp, #264]
    dac8:	mov	x1, x25
    dacc:	cmp	x0, x2
    dad0:	csel	x2, x0, x2, ls  // ls = plast
    dad4:	mov	x0, x25
    dad8:	str	x2, [sp, #264]
    dadc:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    dae0:	ldr	x2, [sp, #264]
    dae4:	b	da34 <mpc_pow@@Base+0xf2c>
    dae8:	mov	x2, x27
    daec:	mov	x1, x25
    daf0:	mov	x0, x24
    daf4:	str	x3, [sp, #184]
    daf8:	bl	4d40 <__gmpz_mul@plt>
    dafc:	lsl	x23, x23, #1
    db00:	mov	x2, x25
    db04:	mov	x1, x25
    db08:	mov	x0, x25
    db0c:	bl	4d40 <__gmpz_mul@plt>
    db10:	mov	x2, x27
    db14:	mov	x1, x27
    db18:	mov	x0, x25
    db1c:	bl	52d0 <__gmpz_submul@plt>
    db20:	mov	x2, #0x1                   	// #1
    db24:	mov	x1, x24
    db28:	mov	x0, x27
    db2c:	bl	4e90 <__gmpz_mul_2exp@plt>
    db30:	mov	x1, #0x0                   	// #0
    db34:	mov	x0, x25
    db38:	bl	49f0 <__gmpz_scan1@plt>
    db3c:	mov	x26, x0
    db40:	mov	x1, #0x0                   	// #0
    db44:	mov	x0, x27
    db48:	bl	49f0 <__gmpz_scan1@plt>
    db4c:	cmp	x26, x0
    db50:	csel	x26, x26, x0, ls  // ls = plast
    db54:	mov	x1, x25
    db58:	mov	x2, x26
    db5c:	mov	x0, x25
    db60:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    db64:	add	x23, x26, x23
    db68:	mov	x2, x26
    db6c:	mov	x1, x27
    db70:	mov	x0, x27
    db74:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    db78:	mov	w1, #0x2                   	// #2
    db7c:	mov	x0, x25
    db80:	bl	54b0 <__gmpz_sizeinbase@plt>
    db84:	ldr	x1, [sp, #112]
    db88:	cmp	x1, x0
    db8c:	b.lt	d528 <mpc_pow@@Base+0xa20>  // b.tstop
    db90:	mov	w1, #0x2                   	// #2
    db94:	mov	x0, x27
    db98:	bl	54b0 <__gmpz_sizeinbase@plt>
    db9c:	ldr	x1, [sp, #112]
    dba0:	ldr	x3, [sp, #184]
    dba4:	cmp	x1, x0
    dba8:	sub	x3, x3, #0x1
    dbac:	b.ge	d804 <mpc_pow@@Base+0xcfc>  // b.tcont
    dbb0:	b	d528 <mpc_pow@@Base+0xa20>
    dbb4:	mov	w0, #0x8                   	// #8
    dbb8:	b	d85c <mpc_pow@@Base+0xd54>
    dbbc:	add	x28, x28, x28, asr #1
    dbc0:	mov	w19, #0xffffffff            	// #-1
    dbc4:	b	cfe0 <mpc_pow@@Base+0x4d8>
    dbc8:	b.ne	dc78 <mpc_pow@@Base+0x1170>  // b.any
    dbcc:	ldr	w22, [x21, #8]
    dbd0:	eor	w22, w19, w22, lsr #31
    dbd4:	ldr	x1, [x21]
    dbd8:	mov	x0, x23
    dbdc:	bl	4c80 <mpfr_set_prec@plt>
    dbe0:	ldr	w3, [x21, #8]
    dbe4:	mov	x1, x21
    dbe8:	mov	w2, #0x0                   	// #0
    dbec:	mov	x0, x23
    dbf0:	bl	51d0 <mpfr_set4@plt>
    dbf4:	ldr	w2, [sp, #160]
    dbf8:	mov	x0, x20
    dbfc:	ldr	w3, [sp, #472]
    dc00:	ldr	x1, [sp, #120]
    dc04:	bl	51d0 <mpfr_set4@plt>
    dc08:	mov	w21, w0
    dc0c:	ldr	x1, [sp, #96]
    dc10:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    dc14:	cmp	x1, x0
    dc18:	add	x1, x20, #0x20
    dc1c:	b.ne	dc80 <mpc_pow@@Base+0x1178>  // b.any
    dc20:	ldr	w0, [sp, #224]
    dc24:	ldr	x2, [sp, #96]
    dc28:	cmp	w0, #0x0
    dc2c:	ldr	x0, [sp, #136]
    dc30:	ccmp	x0, x2, #0x4, eq  // eq = none
    dc34:	b.ne	dc80 <mpc_pow@@Base+0x1178>  // b.any
    dc38:	mov	w0, #0x1                   	// #1
    dc3c:	str	w0, [x1, #8]
    dc40:	mov	x0, x2
    dc44:	str	x0, [x1, #16]
    dc48:	mov	w2, w19
    dc4c:	mov	x0, x20
    dc50:	mov	x3, x23
    dc54:	lsr	w1, w24, #31
    dc58:	bl	c960 <mpc_out_str@@Base+0x158>
    dc5c:	cmp	w21, #0x0
    dc60:	mov	w0, #0x2                   	// #2
    dc64:	cset	w19, ne  // ne = any
    dc68:	csel	w19, w19, w0, ge  // ge = tcont
    dc6c:	mov	x0, x23
    dc70:	bl	4d60 <mpfr_clear@plt>
    dc74:	b	d154 <mpc_pow@@Base+0x64c>
    dc78:	ldr	w22, [x21, #40]
    dc7c:	b	d250 <mpc_pow@@Base+0x748>
    dc80:	cmp	w21, #0x0
    dc84:	mov	w0, #0x2                   	// #2
    dc88:	cset	w19, ne  // ne = any
    dc8c:	csel	w19, w19, w0, ge  // ge = tcont
    dc90:	mov	w0, #0x1                   	// #1
    dc94:	str	w0, [x1, #8]
    dc98:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    dc9c:	str	x0, [x1, #16]
    dca0:	ldr	w0, [sp, #144]
    dca4:	cmp	w0, #0x3
    dca8:	b.eq	dcb0 <mpc_pow@@Base+0x11a8>  // b.none
    dcac:	cbz	w22, dc6c <mpc_pow@@Base+0x1164>
    dcb0:	mov	x1, x20
    dcb4:	mov	x0, x20
    dcb8:	mov	w2, #0x0                   	// #0
    dcbc:	bl	4f60 <mpc_conj@plt>
    dcc0:	b	dc6c <mpc_pow@@Base+0x1164>
    dcc4:	ldr	w2, [sp, #144]
    dcc8:	add	x0, x20, #0x20
    dccc:	ldr	w3, [sp, #504]
    dcd0:	ldr	x1, [sp, #200]
    dcd4:	bl	51d0 <mpfr_set4@plt>
    dcd8:	mov	w19, w0
    dcdc:	ldr	w1, [sp, #224]
    dce0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    dce4:	mov	w2, #0x1                   	// #1
    dce8:	cmp	w1, #0x0
    dcec:	ldr	x1, [sp, #96]
    dcf0:	ccmp	x1, x0, #0x0, ne  // ne = any
    dcf4:	b.ne	dd3c <mpc_pow@@Base+0x1234>  // b.any
    dcf8:	ldr	w1, [x22, #8]
    dcfc:	mov	x3, x21
    dd00:	str	w2, [x20, #8]
    dd04:	mov	w2, #0x0                   	// #0
    dd08:	str	x0, [x20, #16]
    dd0c:	mov	x0, x20
    dd10:	lsr	w1, w1, #31
    dd14:	bl	c960 <mpc_out_str@@Base+0x158>
    dd18:	cmp	w19, #0x0
    dd1c:	b.lt	dd2c <mpc_pow@@Base+0x1224>  // b.tstop
    dd20:	b.ne	dd34 <mpc_pow@@Base+0x122c>  // b.any
    dd24:	mov	w19, #0x0                   	// #0
    dd28:	b	d154 <mpc_pow@@Base+0x64c>
    dd2c:	mov	w19, #0x8                   	// #8
    dd30:	b	d154 <mpc_pow@@Base+0x64c>
    dd34:	mov	w19, #0x4                   	// #4
    dd38:	b	d154 <mpc_pow@@Base+0x64c>
    dd3c:	str	w2, [x20, #8]
    dd40:	str	x0, [x20, #16]
    dd44:	b	dd18 <mpc_pow@@Base+0x1210>
    dd48:	ldr	w0, [sp, #104]
    dd4c:	cbnz	w0, d33c <mpc_pow@@Base+0x834>
    dd50:	b	d29c <mpc_pow@@Base+0x794>
    dd54:	cmp	x1, x0
    dd58:	b.eq	d258 <mpc_pow@@Base+0x750>  // b.none
    dd5c:	mov	x0, x1
    dd60:	b	d1b4 <mpc_pow@@Base+0x6ac>

000000000000dd64 <mpc_pow_fr@@Base>:
    dd64:	stp	x29, x30, [sp, #-128]!
    dd68:	mov	x29, sp
    dd6c:	stp	x19, x20, [sp, #16]
    dd70:	mov	x20, x0
    dd74:	add	x19, sp, #0x40
    dd78:	stp	x21, x22, [sp, #32]
    dd7c:	mov	x21, x1
    dd80:	mov	w22, w3
    dd84:	ldp	x0, x1, [x2]
    dd88:	stp	x0, x1, [sp, #64]
    dd8c:	ldp	x0, x1, [x2, #16]
    dd90:	str	x23, [sp, #48]
    dd94:	add	x23, sp, #0x60
    dd98:	stp	x0, x1, [sp, #80]
    dd9c:	mov	x0, x23
    dda0:	mov	x1, #0x1                   	// #1
    dda4:	bl	5440 <mpfr_init2@plt>
    dda8:	mov	w3, w22
    ddac:	mov	x2, x19
    ddb0:	mov	x1, x21
    ddb4:	mov	w0, #0x1                   	// #1
    ddb8:	str	w0, [sp, #104]
    ddbc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    ddc0:	str	x0, [sp, #112]
    ddc4:	mov	x0, x20
    ddc8:	bl	5240 <mpc_pow@plt>
    ddcc:	mov	w19, w0
    ddd0:	mov	x0, x23
    ddd4:	bl	4d60 <mpfr_clear@plt>
    ddd8:	mov	w0, w19
    dddc:	ldp	x19, x20, [sp, #16]
    dde0:	ldp	x21, x22, [sp, #32]
    dde4:	ldr	x23, [sp, #48]
    dde8:	ldp	x29, x30, [sp], #128
    ddec:	ret

000000000000ddf0 <mpc_pow_ld@@Base>:
    ddf0:	stp	x29, x30, [sp, #-128]!
    ddf4:	mov	x29, sp
    ddf8:	stp	x19, x20, [sp, #16]
    ddfc:	add	x19, sp, #0x40
    de00:	mov	x20, x0
    de04:	mov	x0, x19
    de08:	stp	x21, x22, [sp, #32]
    de0c:	mov	x21, x1
    de10:	mov	w22, w2
    de14:	mov	x1, #0x71                  	// #113
    de18:	mov	x2, #0x1                   	// #1
    de1c:	str	q0, [sp, #48]
    de20:	bl	53c0 <mpc_init3@plt>
    de24:	ldr	q0, [sp, #48]
    de28:	mov	x0, x19
    de2c:	mov	w1, #0x0                   	// #0
    de30:	bl	4e50 <mpc_set_ld@plt>
    de34:	mov	w3, w22
    de38:	mov	x2, x19
    de3c:	mov	x1, x21
    de40:	mov	x0, x20
    de44:	bl	5240 <mpc_pow@plt>
    de48:	mov	w20, w0
    de4c:	mov	x0, x19
    de50:	bl	4a10 <mpc_clear@plt>
    de54:	mov	w0, w20
    de58:	ldp	x19, x20, [sp, #16]
    de5c:	ldp	x21, x22, [sp, #32]
    de60:	ldp	x29, x30, [sp], #128
    de64:	ret

000000000000de68 <mpc_pow_d@@Base>:
    de68:	stp	x29, x30, [sp, #-128]!
    de6c:	mov	x29, sp
    de70:	str	d8, [sp, #48]
    de74:	fmov	d8, d0
    de78:	stp	x19, x20, [sp, #16]
    de7c:	add	x19, sp, #0x40
    de80:	mov	x20, x0
    de84:	mov	x0, x19
    de88:	stp	x21, x22, [sp, #32]
    de8c:	mov	x21, x1
    de90:	mov	w22, w2
    de94:	mov	x1, #0x35                  	// #53
    de98:	mov	x2, #0x1                   	// #1
    de9c:	bl	53c0 <mpc_init3@plt>
    dea0:	fmov	d0, d8
    dea4:	mov	x0, x19
    dea8:	mov	w1, #0x0                   	// #0
    deac:	bl	5460 <mpc_set_d@plt>
    deb0:	mov	w3, w22
    deb4:	mov	x2, x19
    deb8:	mov	x1, x21
    debc:	mov	x0, x20
    dec0:	bl	5240 <mpc_pow@plt>
    dec4:	mov	w20, w0
    dec8:	mov	x0, x19
    decc:	bl	4a10 <mpc_clear@plt>
    ded0:	mov	w0, w20
    ded4:	ldr	d8, [sp, #48]
    ded8:	ldp	x19, x20, [sp, #16]
    dedc:	ldp	x21, x22, [sp, #32]
    dee0:	ldp	x29, x30, [sp], #128
    dee4:	ret

000000000000dee8 <mpc_pow_si@@Base>:
    dee8:	mov	w4, w3
    deec:	tbnz	x2, #63, def8 <mpc_pow_si@@Base+0x10>
    def0:	mov	w3, #0x1                   	// #1
    def4:	b	4df0 <mpc_pow_usi@plt>
    def8:	neg	x2, x2
    defc:	mov	w3, #0xffffffff            	// #-1
    df00:	b	def4 <mpc_pow_si@@Base+0xc>
    df04:	stp	x29, x30, [sp, #-128]!
    df08:	mov	x29, sp
    df0c:	stp	x19, x20, [sp, #16]
    df10:	add	x19, sp, #0x40
    df14:	mov	x20, x2
    df18:	mov	x2, #0x1                   	// #1
    df1c:	stp	x21, x22, [sp, #32]
    df20:	mov	x21, x0
    df24:	mov	x22, x1
    df28:	mov	x0, x19
    df2c:	mov	x1, #0x40                  	// #64
    df30:	stp	x23, x24, [sp, #48]
    df34:	mov	w24, w3
    df38:	mov	w23, w4
    df3c:	bl	53c0 <mpc_init3@plt>
    df40:	cmp	w24, #0x0
    df44:	mov	w2, #0x0                   	// #0
    df48:	b.le	df90 <mpc_pow_si@@Base+0xa8>
    df4c:	mov	x1, x20
    df50:	mov	x0, x19
    df54:	bl	4ce0 <mpc_set_ui@plt>
    df58:	mov	w3, w23
    df5c:	mov	x2, x19
    df60:	mov	x1, x22
    df64:	mov	x0, x21
    df68:	bl	5240 <mpc_pow@plt>
    df6c:	mov	w20, w0
    df70:	mov	x0, x19
    df74:	bl	4a10 <mpc_clear@plt>
    df78:	mov	w0, w20
    df7c:	ldp	x19, x20, [sp, #16]
    df80:	ldp	x21, x22, [sp, #32]
    df84:	ldp	x23, x24, [sp, #48]
    df88:	ldp	x29, x30, [sp], #128
    df8c:	ret
    df90:	neg	x1, x20
    df94:	mov	x0, x19
    df98:	bl	5020 <mpc_set_si@plt>
    df9c:	b	df58 <mpc_pow_si@@Base+0x70>

000000000000dfa0 <mpc_pow_usi@@Base>:
    dfa0:	stp	x29, x30, [sp, #-288]!
    dfa4:	mov	x29, sp
    dfa8:	stp	x19, x20, [sp, #16]
    dfac:	mov	x20, x1
    dfb0:	stp	x21, x22, [sp, #32]
    dfb4:	mov	x22, x0
    dfb8:	mov	x21, x2
    dfbc:	mov	x0, x1
    dfc0:	stp	x23, x24, [sp, #48]
    dfc4:	mov	w24, w4
    dfc8:	stp	x25, x26, [sp, #64]
    dfcc:	mov	w25, w3
    dfd0:	stp	x27, x28, [sp, #80]
    dfd4:	bl	54d0 <mpfr_number_p@plt>
    dfd8:	cbnz	w0, dff8 <mpc_pow_usi@@Base+0x58>
    dfdc:	mov	w4, w24
    dfe0:	mov	w3, w25
    dfe4:	mov	x2, x21
    dfe8:	mov	x1, x20
    dfec:	mov	x0, x22
    dff0:	bl	df04 <mpc_pow_si@@Base+0x1c>
    dff4:	b	e044 <mpc_pow_usi@@Base+0xa4>
    dff8:	add	x0, x20, #0x20
    dffc:	bl	54d0 <mpfr_number_p@plt>
    e000:	cbz	w0, dfdc <mpc_pow_usi@@Base+0x3c>
    e004:	ldr	x19, [x20, #16]
    e008:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e00c:	cmp	x19, x0
    e010:	b.eq	dfdc <mpc_pow_usi@@Base+0x3c>  // b.none
    e014:	ldr	x23, [x20, #48]
    e018:	cmp	x23, x0
    e01c:	b.eq	dfdc <mpc_pow_usi@@Base+0x3c>  // b.none
    e020:	cbz	x21, dfdc <mpc_pow_usi@@Base+0x3c>
    e024:	cmp	x21, #0x1
    e028:	b.ne	e080 <mpc_pow_usi@@Base+0xe0>  // b.any
    e02c:	cmp	w25, #0x0
    e030:	b.le	e068 <mpc_pow_usi@@Base+0xc8>
    e034:	mov	w2, w24
    e038:	mov	x1, x20
    e03c:	mov	x0, x22
    e040:	bl	5580 <mpc_set@plt>
    e044:	mov	w20, w0
    e048:	mov	w0, w20
    e04c:	ldp	x19, x20, [sp, #16]
    e050:	ldp	x21, x22, [sp, #32]
    e054:	ldp	x23, x24, [sp, #48]
    e058:	ldp	x25, x26, [sp, #64]
    e05c:	ldp	x27, x28, [sp, #80]
    e060:	ldp	x29, x30, [sp], #288
    e064:	ret
    e068:	mov	w3, w24
    e06c:	mov	x2, x20
    e070:	mov	x1, x21
    e074:	mov	x0, x22
    e078:	bl	55b0 <mpc_ui_div@plt>
    e07c:	b	e044 <mpc_pow_usi@@Base+0xa4>
    e080:	cmp	w25, #0x0
    e084:	ccmp	x21, #0x2, #0x0, gt
    e088:	b.ne	e0a0 <mpc_pow_usi@@Base+0x100>  // b.any
    e08c:	mov	w2, w24
    e090:	mov	x1, x20
    e094:	mov	x0, x22
    e098:	bl	4f30 <mpc_sqr@plt>
    e09c:	b	e044 <mpc_pow_usi@@Base+0xa4>
    e0a0:	cmp	x19, x23
    e0a4:	csel	x26, x19, x23, ge  // ge = tcont
    e0a8:	bl	5200 <mpfr_get_emax@plt>
    e0ac:	sdiv	x0, x0, x21
    e0b0:	cmp	x26, x0
    e0b4:	b.gt	dfdc <mpc_pow_usi@@Base+0x3c>
    e0b8:	cmp	x19, x23
    e0bc:	neg	x0, x23
    e0c0:	csneg	x19, x0, x19, ge  // ge = tcont
    e0c4:	bl	5060 <mpfr_get_emin@plt>
    e0c8:	neg	x0, x0
    e0cc:	sdiv	x0, x0, x21
    e0d0:	cmp	x0, x19
    e0d4:	b.lt	dfdc <mpc_pow_usi@@Base+0x3c>  // b.tstop
    e0d8:	and	x0, x21, x21, lsr #1
    e0dc:	str	x0, [sp, #96]
    e0e0:	mov	x0, x21
    e0e4:	mov	x26, #0x0                   	// #0
    e0e8:	cmp	x0, #0x3
    e0ec:	b.hi	e20c <mpc_pow_usi@@Base+0x26c>  // b.pmore
    e0f0:	add	x0, x26, #0x2
    e0f4:	str	x0, [sp, #112]
    e0f8:	ldr	x0, [x22]
    e0fc:	add	x19, sp, #0xa0
    e100:	ldr	x23, [x22, #32]
    e104:	cmp	x23, x0
    e108:	csel	x23, x23, x0, ge  // ge = tcont
    e10c:	add	x0, x26, #0x2
    e110:	add	x23, x23, x0
    e114:	mov	x0, x19
    e118:	add	x23, x23, #0x20
    e11c:	mov	x1, x23
    e120:	bl	4cf0 <mpc_init2@plt>
    e124:	ldr	x0, [sp, #96]
    e128:	cbz	x0, e138 <mpc_pow_usi@@Base+0x198>
    e12c:	mov	x1, x23
    e130:	add	x0, sp, #0xe0
    e134:	bl	4cf0 <mpc_init2@plt>
    e138:	cmp	wzr, w24, lsr #4
    e13c:	lsr	x0, x21, x26
    e140:	and	x0, x0, #0x1
    e144:	str	x0, [sp, #128]
    e148:	cset	x0, eq  // eq = none
    e14c:	add	x28, sp, #0xe0
    e150:	str	x0, [sp, #136]
    e154:	mov	w0, #0x2                   	// #2
    e158:	str	w0, [sp, #108]
    e15c:	add	x0, x26, #0x5
    e160:	str	x0, [sp, #120]
    e164:	mov	x1, x20
    e168:	mov	x0, x19
    e16c:	mov	w2, #0x0                   	// #0
    e170:	bl	4f30 <mpc_sqr@plt>
    e174:	ldr	x0, [sp, #96]
    e178:	cbz	x0, e1a8 <mpc_pow_usi@@Base+0x208>
    e17c:	mov	x2, x20
    e180:	mov	x1, x19
    e184:	mov	x0, x28
    e188:	mov	w3, #0x0                   	// #0
    e18c:	bl	4ed0 <mpc_mul@plt>
    e190:	ldr	x0, [sp, #128]
    e194:	cbz	x0, e1a8 <mpc_pow_usi@@Base+0x208>
    e198:	mov	x1, x28
    e19c:	mov	x0, x19
    e1a0:	mov	w2, #0x0                   	// #0
    e1a4:	bl	5580 <mpc_set@plt>
    e1a8:	mov	x3, x26
    e1ac:	sub	x27, x3, #0x1
    e1b0:	cmp	x3, #0x0
    e1b4:	b.gt	e218 <mpc_pow_usi@@Base+0x278>
    e1b8:	tbz	w25, #31, e1d0 <mpc_pow_usi@@Base+0x230>
    e1bc:	mov	x2, x19
    e1c0:	mov	x0, x19
    e1c4:	mov	w3, #0x0                   	// #0
    e1c8:	mov	x1, #0x1                   	// #1
    e1cc:	bl	55b0 <mpc_ui_div@plt>
    e1d0:	ldr	x5, [sp, #176]
    e1d4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e1d8:	cmp	x5, x0
    e1dc:	b.eq	e1f0 <mpc_pow_usi@@Base+0x250>  // b.none
    e1e0:	ldr	x0, [sp, #208]
    e1e4:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    e1e8:	cmp	x0, x1
    e1ec:	b.ne	e288 <mpc_pow_usi@@Base+0x2e8>  // b.any
    e1f0:	mov	w4, w24
    e1f4:	mov	w3, w25
    e1f8:	mov	x2, x21
    e1fc:	mov	x1, x20
    e200:	mov	x0, x22
    e204:	bl	df04 <mpc_pow_si@@Base+0x1c>
    e208:	b	e324 <mpc_pow_usi@@Base+0x384>
    e20c:	add	x26, x26, #0x1
    e210:	lsr	x0, x0, #1
    e214:	b	e0e8 <mpc_pow_usi@@Base+0x148>
    e218:	mov	x1, x19
    e21c:	mov	x0, x19
    e220:	mov	w2, #0x0                   	// #0
    e224:	str	x3, [sp, #144]
    e228:	bl	4f30 <mpc_sqr@plt>
    e22c:	lsr	x1, x21, x27
    e230:	tbz	w1, #0, e274 <mpc_pow_usi@@Base+0x2d4>
    e234:	cmp	x27, #0x0
    e238:	b.le	e27c <mpc_pow_usi@@Base+0x2dc>
    e23c:	sub	w0, w27, #0x1
    e240:	ldr	x3, [sp, #144]
    e244:	lsr	x0, x21, x0
    e248:	tbz	w0, #0, e27c <mpc_pow_usi@@Base+0x2dc>
    e24c:	sub	x27, x3, #0x2
    e250:	mov	w2, #0x0                   	// #0
    e254:	mov	x1, x19
    e258:	mov	x0, x19
    e25c:	bl	4f30 <mpc_sqr@plt>
    e260:	mov	x2, x28
    e264:	mov	w3, #0x0                   	// #0
    e268:	mov	x1, x19
    e26c:	mov	x0, x19
    e270:	bl	4ed0 <mpc_mul@plt>
    e274:	mov	x3, x27
    e278:	b	e1ac <mpc_pow_usi@@Base+0x20c>
    e27c:	mov	x2, x20
    e280:	mov	w3, #0x0                   	// #0
    e284:	b	e268 <mpc_pow_usi@@Base+0x2c8>
    e288:	sub	x5, x5, x0
    e28c:	cmp	x5, #0x0
    e290:	b.le	e2a8 <mpc_pow_usi@@Base+0x308>
    e294:	ldr	x1, [sp, #120]
    e298:	ldr	x0, [sp, #112]
    e29c:	add	x6, x0, x5
    e2a0:	add	x6, x6, #0x3
    e2a4:	b	e2bc <mpc_pow_usi@@Base+0x31c>
    e2a8:	ldr	x0, [sp, #112]
    e2ac:	sub	x1, x0, x5
    e2b0:	add	x1, x1, #0x3
    e2b4:	b.eq	e298 <mpc_pow_usi@@Base+0x2f8>  // b.none
    e2b8:	ldr	x6, [sp, #120]
    e2bc:	tst	x24, #0xf
    e2c0:	ldr	x4, [x22]
    e2c4:	sub	x1, x23, x1
    e2c8:	mov	x0, x19
    e2cc:	mov	w3, #0x1                   	// #1
    e2d0:	cinc	x4, x4, eq  // eq = none
    e2d4:	mov	w2, #0x0                   	// #0
    e2d8:	stp	x6, x5, [sp, #144]
    e2dc:	bl	5450 <mpfr_can_round@plt>
    e2e0:	ldp	x6, x5, [sp, #144]
    e2e4:	cbz	w0, e344 <mpc_pow_usi@@Base+0x3a4>
    e2e8:	ldr	x4, [x22, #32]
    e2ec:	sub	x1, x23, x6
    e2f0:	ldr	x0, [sp, #136]
    e2f4:	mov	w3, #0x1                   	// #1
    e2f8:	mov	w2, #0x0                   	// #0
    e2fc:	str	x5, [sp, #144]
    e300:	add	x4, x0, x4
    e304:	add	x0, x19, #0x20
    e308:	bl	5450 <mpfr_can_round@plt>
    e30c:	ldr	x5, [sp, #144]
    e310:	cbz	w0, e344 <mpc_pow_usi@@Base+0x3a4>
    e314:	mov	w2, w24
    e318:	mov	x1, x19
    e31c:	mov	x0, x22
    e320:	bl	5580 <mpc_set@plt>
    e324:	mov	w20, w0
    e328:	mov	x0, x19
    e32c:	bl	4a10 <mpc_clear@plt>
    e330:	ldr	x0, [sp, #96]
    e334:	cbz	x0, e048 <mpc_pow_usi@@Base+0xa8>
    e338:	add	x0, sp, #0xe0
    e33c:	bl	4a10 <mpc_clear@plt>
    e340:	b	e048 <mpc_pow_usi@@Base+0xa8>
    e344:	ldr	w0, [sp, #108]
    e348:	cmp	w0, #0x1
    e34c:	b.eq	e1f0 <mpc_pow_usi@@Base+0x250>  // b.none
    e350:	ldr	x1, [x22]
    e354:	cmp	x5, #0x0
    e358:	ldr	x0, [x22, #32]
    e35c:	cneg	x5, x5, lt  // lt = tstop
    e360:	cmp	x0, x1
    e364:	csel	x0, x0, x1, ge  // ge = tcont
    e368:	cmp	x5, x0
    e36c:	b.ge	e1f0 <mpc_pow_usi@@Base+0x250>  // b.tcont
    e370:	ldr	x1, [x20]
    e374:	ldr	x0, [x20, #32]
    e378:	cmp	x0, x1
    e37c:	csel	x0, x0, x1, ge  // ge = tcont
    e380:	add	x23, x23, x0
    e384:	mov	x0, x19
    e388:	mov	x1, x23
    e38c:	bl	4c00 <mpc_set_prec@plt>
    e390:	ldr	x0, [sp, #96]
    e394:	cbz	x0, e3a4 <mpc_pow_usi@@Base+0x404>
    e398:	mov	x1, x23
    e39c:	mov	x0, x28
    e3a0:	bl	4c00 <mpc_set_prec@plt>
    e3a4:	mov	w0, #0x1                   	// #1
    e3a8:	str	w0, [sp, #108]
    e3ac:	b	e164 <mpc_pow_usi@@Base+0x1c4>

000000000000e3b0 <mpc_pow_ui@@Base>:
    e3b0:	mov	w4, w3
    e3b4:	mov	w3, #0x1                   	// #1
    e3b8:	b	4df0 <mpc_pow_usi@plt>

000000000000e3bc <mpc_pow_z@@Base>:
    e3bc:	stp	x29, x30, [sp, #-128]!
    e3c0:	mov	x29, sp
    e3c4:	stp	x19, x20, [sp, #16]
    e3c8:	mov	x19, x2
    e3cc:	stp	x21, x22, [sp, #32]
    e3d0:	mov	x21, x0
    e3d4:	mov	x22, x1
    e3d8:	mov	x0, x2
    e3dc:	mov	w1, #0x2                   	// #2
    e3e0:	stp	x23, x24, [sp, #48]
    e3e4:	mov	w23, w3
    e3e8:	bl	54b0 <__gmpz_sizeinbase@plt>
    e3ec:	mov	x24, x0
    e3f0:	ldr	w0, [x19, #4]
    e3f4:	tbnz	w0, #31, e440 <mpc_pow_z@@Base+0x84>
    e3f8:	cmp	w0, #0x1
    e3fc:	b.gt	e464 <mpc_pow_z@@Base+0xa8>
    e400:	ldr	x1, [x19, #8]
    e404:	cmp	w0, #0x0
    e408:	mov	w4, w23
    e40c:	mov	w3, #0x1                   	// #1
    e410:	ldr	x2, [x1]
    e414:	csel	x2, x2, xzr, ne  // ne = any
    e418:	mov	x1, x22
    e41c:	mov	x0, x21
    e420:	bl	4df0 <mpc_pow_usi@plt>
    e424:	mov	w19, w0
    e428:	mov	w0, w19
    e42c:	ldp	x19, x20, [sp, #16]
    e430:	ldp	x21, x22, [sp, #32]
    e434:	ldp	x23, x24, [sp, #48]
    e438:	ldp	x29, x30, [sp], #128
    e43c:	ret
    e440:	mov	x0, x19
    e444:	bl	4c60 <__gmpz_fits_slong_p@plt>
    e448:	cbz	w0, e464 <mpc_pow_z@@Base+0xa8>
    e44c:	mov	x0, x19
    e450:	bl	49a0 <__gmpz_get_si@plt>
    e454:	mov	w4, w23
    e458:	neg	x2, x0
    e45c:	mov	w3, #0xffffffff            	// #-1
    e460:	b	e418 <mpc_pow_z@@Base+0x5c>
    e464:	cmp	x24, #0x0
    e468:	add	x20, sp, #0x40
    e46c:	mov	x0, x20
    e470:	mov	x2, #0x1                   	// #1
    e474:	csel	x1, x24, x2, gt
    e478:	bl	53c0 <mpc_init3@plt>
    e47c:	mov	x1, x19
    e480:	mov	x0, x20
    e484:	mov	w2, #0x0                   	// #0
    e488:	bl	50a0 <mpc_set_z@plt>
    e48c:	mov	w3, w23
    e490:	mov	x2, x20
    e494:	mov	x1, x22
    e498:	mov	x0, x21
    e49c:	bl	5240 <mpc_pow@plt>
    e4a0:	mov	w19, w0
    e4a4:	mov	x0, x20
    e4a8:	bl	4a10 <mpc_clear@plt>
    e4ac:	b	e428 <mpc_pow_z@@Base+0x6c>

000000000000e4b0 <mpc_proj@@Base>:
    e4b0:	stp	x29, x30, [sp, #-32]!
    e4b4:	mov	x3, #0x8000000000000003    	// #-9223372036854775805
    e4b8:	mov	x29, sp
    e4bc:	ldr	x4, [x1, #16]
    e4c0:	stp	x19, x20, [sp, #16]
    e4c4:	mov	x20, x0
    e4c8:	mov	x19, x1
    e4cc:	cmp	x4, x3
    e4d0:	b.eq	e4ec <mpc_proj@@Base+0x3c>  // b.none
    e4d4:	ldr	x4, [x1, #48]
    e4d8:	cmp	x4, x3
    e4dc:	b.eq	e4ec <mpc_proj@@Base+0x3c>  // b.none
    e4e0:	ldp	x19, x20, [sp, #16]
    e4e4:	ldp	x29, x30, [sp], #32
    e4e8:	b	5580 <mpc_set@plt>
    e4ec:	mov	x0, x20
    e4f0:	mov	w1, #0x1                   	// #1
    e4f4:	bl	5120 <mpfr_set_inf@plt>
    e4f8:	ldr	w0, [x19, #40]
    e4fc:	mov	w1, #0x1                   	// #1
    e500:	cmp	w0, #0x0
    e504:	add	x0, x20, #0x20
    e508:	cneg	w1, w1, lt  // lt = tstop
    e50c:	bl	4d10 <mpfr_set_zero@plt>
    e510:	mov	w0, #0x0                   	// #0
    e514:	ldp	x19, x20, [sp, #16]
    e518:	ldp	x29, x30, [sp], #32
    e51c:	ret

000000000000e520 <mpc_real@@Base>:
    e520:	ldr	w3, [x1, #8]
    e524:	b	51d0 <mpfr_set4@plt>

000000000000e528 <mpc_rootofunity@@Base>:
    e528:	stp	x29, x30, [sp, #-224]!
    e52c:	mov	x29, sp
    e530:	stp	x19, x20, [sp, #16]
    e534:	stp	x21, x22, [sp, #32]
    e538:	stp	x23, x24, [sp, #48]
    e53c:	stp	x25, x26, [sp, #64]
    e540:	stp	x27, x28, [sp, #80]
    e544:	mov	x27, x0
    e548:	cbnz	x1, e578 <mpc_rootofunity@@Base+0x50>
    e54c:	bl	4a40 <mpfr_set_nan@plt>
    e550:	add	x0, x27, #0x20
    e554:	bl	4a40 <mpfr_set_nan@plt>
    e558:	mov	w0, #0x0                   	// #0
    e55c:	ldp	x19, x20, [sp, #16]
    e560:	ldp	x21, x22, [sp, #32]
    e564:	ldp	x23, x24, [sp, #48]
    e568:	ldp	x25, x26, [sp, #64]
    e56c:	ldp	x27, x28, [sp, #80]
    e570:	ldp	x29, x30, [sp], #224
    e574:	ret
    e578:	udiv	x19, x2, x1
    e57c:	mov	x0, x1
    e580:	msub	x19, x19, x1, x2
    e584:	mov	x4, x19
    e588:	udiv	x2, x4, x0
    e58c:	msub	x2, x2, x0, x4
    e590:	mov	x4, x0
    e594:	cbz	x2, e5a0 <mpc_rootofunity@@Base+0x78>
    e598:	mov	x0, x2
    e59c:	b	e588 <mpc_rootofunity@@Base+0x60>
    e5a0:	udiv	x20, x1, x0
    e5a4:	cmp	x20, #0x1
    e5a8:	b.ne	e5f8 <mpc_rootofunity@@Base+0xd0>  // b.any
    e5ac:	cmp	x19, x0
    e5b0:	b.cc	e5e4 <mpc_rootofunity@@Base+0xbc>  // b.lo, b.ul, b.last
    e5b4:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e5b8:	add	x4, x4, #0x834
    e5bc:	mov	w3, #0x40                  	// #64
    e5c0:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    e5c4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e5c8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e5cc:	add	x2, x2, #0x83b
    e5d0:	ldr	x0, [x0, #4008]
    e5d4:	add	x1, x1, #0x5f3
    e5d8:	ldr	x0, [x0]
    e5dc:	bl	55a0 <fprintf@plt>
    e5e0:	bl	5000 <abort@plt>
    e5e4:	mov	x1, x20
    e5e8:	mov	x2, #0x0                   	// #0
    e5ec:	mov	x0, x27
    e5f0:	bl	5040 <mpc_set_ui_ui@plt>
    e5f4:	b	e55c <mpc_rootofunity@@Base+0x34>
    e5f8:	udiv	x19, x19, x0
    e5fc:	cmp	x20, #0x2
    e600:	b.ne	e630 <mpc_rootofunity@@Base+0x108>  // b.any
    e604:	cmp	x19, #0x1
    e608:	b.eq	e61c <mpc_rootofunity@@Base+0xf4>  // b.none
    e60c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e610:	mov	w3, #0x46                  	// #70
    e614:	add	x4, x4, #0x849
    e618:	b	e5c0 <mpc_rootofunity@@Base+0x98>
    e61c:	mov	x2, #0x0                   	// #0
    e620:	mov	x1, #0xffffffffffffffff    	// #-1
    e624:	mov	x0, x27
    e628:	bl	52c0 <mpc_set_si_si@plt>
    e62c:	b	e55c <mpc_rootofunity@@Base+0x34>
    e630:	cmp	x20, #0x4
    e634:	b.ne	e674 <mpc_rootofunity@@Base+0x14c>  // b.any
    e638:	and	x0, x19, #0xfffffffffffffffd
    e63c:	cmp	x0, #0x1
    e640:	b.eq	e654 <mpc_rootofunity@@Base+0x12c>  // b.none
    e644:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e648:	mov	w3, #0x4d                  	// #77
    e64c:	add	x4, x4, #0x850
    e650:	b	e5c0 <mpc_rootofunity@@Base+0x98>
    e654:	cmp	x19, #0x1
    e658:	b.ne	e668 <mpc_rootofunity@@Base+0x140>  // b.any
    e65c:	mov	x2, x19
    e660:	mov	x1, #0x0                   	// #0
    e664:	b	e5ec <mpc_rootofunity@@Base+0xc4>
    e668:	mov	x2, #0xffffffffffffffff    	// #-1
    e66c:	mov	x1, #0x0                   	// #0
    e670:	b	e624 <mpc_rootofunity@@Base+0xfc>
    e674:	cmp	x20, #0x3
    e678:	and	w21, w3, #0xf
    e67c:	ccmp	x20, #0x6, #0x4, ne  // ne = any
    e680:	asr	w28, w3, #4
    e684:	b.ne	e774 <mpc_rootofunity@@Base+0x24c>  // b.any
    e688:	cmp	x20, #0x3
    e68c:	b.ne	e744 <mpc_rootofunity@@Base+0x21c>  // b.any
    e690:	sub	x0, x19, #0x1
    e694:	cmp	x0, #0x1
    e698:	b.hi	e75c <mpc_rootofunity@@Base+0x234>  // b.pmore
    e69c:	mov	x1, #0xffffffffffffffff    	// #-1
    e6a0:	mov	w3, w21
    e6a4:	mov	x2, #0x0                   	// #0
    e6a8:	mov	x0, x27
    e6ac:	bl	49e0 <mpfr_set_si_2exp@plt>
    e6b0:	mov	w2, w28
    e6b4:	mov	w21, w0
    e6b8:	cmp	x19, #0x1
    e6bc:	b.eq	e6d4 <mpc_rootofunity@@Base+0x1ac>  // b.none
    e6c0:	cmp	w28, #0x2
    e6c4:	b.eq	e76c <mpc_rootofunity@@Base+0x244>  // b.none
    e6c8:	cmp	w28, #0x3
    e6cc:	mov	w0, #0x2                   	// #2
    e6d0:	csel	w2, w28, w0, ne  // ne = any
    e6d4:	add	x22, x27, #0x20
    e6d8:	mov	x1, #0x3                   	// #3
    e6dc:	mov	x0, x22
    e6e0:	bl	5280 <mpfr_sqrt_ui@plt>
    e6e4:	mov	x1, x27
    e6e8:	mov	w20, w0
    e6ec:	mov	w3, #0x0                   	// #0
    e6f0:	mov	x0, x27
    e6f4:	mov	x2, #0x1                   	// #1
    e6f8:	bl	5530 <mpc_div_2ui@plt>
    e6fc:	cmp	x19, #0x1
    e700:	b.eq	e718 <mpc_rootofunity@@Base+0x1f0>  // b.none
    e704:	mov	x1, x22
    e708:	mov	w2, #0x0                   	// #0
    e70c:	neg	w20, w20
    e710:	mov	x0, x1
    e714:	bl	4b80 <mpfr_neg@plt>
    e718:	cmp	w21, #0x0
    e71c:	mov	w0, #0x2                   	// #2
    e720:	cset	w1, ne  // ne = any
    e724:	csel	w0, w1, w0, ge  // ge = tcont
    e728:	cmp	w20, #0x0
    e72c:	mov	w1, #0x4                   	// #4
    e730:	csel	w1, w20, w1, eq  // eq = none
    e734:	mov	w20, #0x8                   	// #8
    e738:	csel	w20, w1, w20, ge  // ge = tcont
    e73c:	orr	w0, w0, w20
    e740:	b	e55c <mpc_rootofunity@@Base+0x34>
    e744:	cmp	x20, #0x6
    e748:	b.ne	e75c <mpc_rootofunity@@Base+0x234>  // b.any
    e74c:	and	x0, x19, #0xfffffffffffffffb
    e750:	mov	x1, #0x1                   	// #1
    e754:	cmp	x0, x1
    e758:	b.eq	e6a0 <mpc_rootofunity@@Base+0x178>  // b.none
    e75c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e760:	mov	w3, #0x55                  	// #85
    e764:	add	x4, x4, #0x861
    e768:	b	e5c0 <mpc_rootofunity@@Base+0x98>
    e76c:	mov	w2, #0x3                   	// #3
    e770:	b	e6d4 <mpc_rootofunity@@Base+0x1ac>
    e774:	cmp	x20, #0xc
    e778:	b.ne	e858 <mpc_rootofunity@@Base+0x330>  // b.any
    e77c:	cmp	x19, #0xb
    e780:	b.hi	e790 <mpc_rootofunity@@Base+0x268>  // b.pmore
    e784:	mov	x0, #0x8a2                 	// #2210
    e788:	lsr	x0, x0, x19
    e78c:	tbnz	w0, #0, e7a0 <mpc_rootofunity@@Base+0x278>
    e790:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e794:	mov	w3, #0x6f                  	// #111
    e798:	add	x4, x4, #0x8a2
    e79c:	b	e5c0 <mpc_rootofunity@@Base+0x98>
    e7a0:	and	x22, x19, #0xfffffffffffffffd
    e7a4:	mov	w2, w21
    e7a8:	cmp	x22, #0x5
    e7ac:	b.ne	e7c4 <mpc_rootofunity@@Base+0x29c>  // b.any
    e7b0:	cmp	w21, #0x2
    e7b4:	b.eq	e850 <mpc_rootofunity@@Base+0x328>  // b.none
    e7b8:	cmp	w21, #0x3
    e7bc:	mov	w2, #0x2                   	// #2
    e7c0:	csel	w2, w21, w2, ne  // ne = any
    e7c4:	mov	x1, #0x3                   	// #3
    e7c8:	mov	x0, x27
    e7cc:	bl	5280 <mpfr_sqrt_ui@plt>
    e7d0:	mov	w20, w0
    e7d4:	cmp	x19, #0x6
    e7d8:	mov	w3, w28
    e7dc:	mov	x2, #0x0                   	// #0
    e7e0:	add	x0, x27, #0x20
    e7e4:	mov	x1, #0xffffffffffffffff    	// #-1
    e7e8:	cneg	x1, x1, cc  // cc = lo, ul, last
    e7ec:	bl	49e0 <mpfr_set_si_2exp@plt>
    e7f0:	mov	w19, w0
    e7f4:	mov	x1, x27
    e7f8:	mov	x0, x27
    e7fc:	mov	w3, #0x0                   	// #0
    e800:	mov	x2, #0x1                   	// #1
    e804:	bl	5530 <mpc_div_2ui@plt>
    e808:	cmp	x22, #0x5
    e80c:	b.ne	e824 <mpc_rootofunity@@Base+0x2fc>  // b.any
    e810:	neg	w20, w20
    e814:	mov	x1, x27
    e818:	mov	x0, x27
    e81c:	mov	w2, #0x0                   	// #0
    e820:	bl	4b80 <mpfr_neg@plt>
    e824:	cmp	w20, #0x0
    e828:	mov	w0, #0x2                   	// #2
    e82c:	cset	w1, ne  // ne = any
    e830:	csel	w0, w1, w0, ge  // ge = tcont
    e834:	cmp	w19, #0x0
    e838:	mov	w1, #0x4                   	// #4
    e83c:	csel	w1, w19, w1, eq  // eq = none
    e840:	mov	w19, #0x8                   	// #8
    e844:	csel	w19, w1, w19, ge  // ge = tcont
    e848:	orr	w0, w0, w19
    e84c:	b	e55c <mpc_rootofunity@@Base+0x34>
    e850:	mov	w2, #0x3                   	// #3
    e854:	b	e7c4 <mpc_rootofunity@@Base+0x29c>
    e858:	cmp	x20, #0x8
    e85c:	b.ne	e93c <mpc_rootofunity@@Base+0x414>  // b.any
    e860:	and	x0, x19, #0xfffffffffffffff9
    e864:	cmp	x0, #0x1
    e868:	b.eq	e87c <mpc_rootofunity@@Base+0x354>  // b.none
    e86c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    e870:	mov	w3, #0x86                  	// #134
    e874:	add	x4, x4, #0x8c8
    e878:	b	e5c0 <mpc_rootofunity@@Base+0x98>
    e87c:	cmp	x19, #0x3
    e880:	mov	w2, w21
    e884:	cset	w22, eq  // eq = none
    e888:	cmp	x19, #0x5
    e88c:	csinc	w22, w22, wzr, ne  // ne = any
    e890:	cbz	w22, e8a8 <mpc_rootofunity@@Base+0x380>
    e894:	cmp	w21, #0x2
    e898:	b.eq	e92c <mpc_rootofunity@@Base+0x404>  // b.none
    e89c:	cmp	w21, #0x3
    e8a0:	mov	w2, #0x2                   	// #2
    e8a4:	csel	w2, w21, w2, ne  // ne = any
    e8a8:	cmp	x19, #0x4
    e8ac:	b.ls	e8c4 <mpc_rootofunity@@Base+0x39c>  // b.plast
    e8b0:	cmp	w28, #0x2
    e8b4:	b.eq	e934 <mpc_rootofunity@@Base+0x40c>  // b.none
    e8b8:	cmp	w28, #0x3
    e8bc:	mov	w0, #0x2                   	// #2
    e8c0:	csel	w28, w28, w0, ne  // ne = any
    e8c4:	mov	x1, #0x2                   	// #2
    e8c8:	mov	x0, x27
    e8cc:	add	x23, x27, #0x20
    e8d0:	bl	5280 <mpfr_sqrt_ui@plt>
    e8d4:	mov	w2, w28
    e8d8:	mov	x1, #0x2                   	// #2
    e8dc:	mov	w21, w0
    e8e0:	mov	x0, x23
    e8e4:	bl	5280 <mpfr_sqrt_ui@plt>
    e8e8:	mov	w20, w0
    e8ec:	mov	x1, x27
    e8f0:	mov	x0, x27
    e8f4:	mov	w3, #0x0                   	// #0
    e8f8:	mov	x2, #0x1                   	// #1
    e8fc:	bl	5530 <mpc_div_2ui@plt>
    e900:	cbz	w22, e918 <mpc_rootofunity@@Base+0x3f0>
    e904:	neg	w21, w21
    e908:	mov	x1, x27
    e90c:	mov	x0, x27
    e910:	mov	w2, #0x0                   	// #0
    e914:	bl	4b80 <mpfr_neg@plt>
    e918:	cmp	x19, #0x4
    e91c:	b.ls	e718 <mpc_rootofunity@@Base+0x1f0>  // b.plast
    e920:	mov	x1, x23
    e924:	mov	w2, #0x0                   	// #0
    e928:	b	e70c <mpc_rootofunity@@Base+0x1e4>
    e92c:	mov	w2, #0x3                   	// #3
    e930:	b	e8a8 <mpc_rootofunity@@Base+0x380>
    e934:	mov	w28, #0x3                   	// #3
    e938:	b	e8c4 <mpc_rootofunity@@Base+0x39c>
    e93c:	ldr	x0, [x27]
    e940:	add	x23, sp, #0x80
    e944:	ldr	x22, [x27, #32]
    e948:	mov	x1, #0x43                  	// #67
    e94c:	add	x26, sp, #0xa0
    e950:	add	x25, sp, #0xc0
    e954:	cmp	x22, x0
    e958:	add	x24, sp, #0x60
    e95c:	csel	x22, x22, x0, ge  // ge = tcont
    e960:	mov	x0, x23
    e964:	bl	5440 <mpfr_init2@plt>
    e968:	mov	x0, x26
    e96c:	mov	x1, #0x43                  	// #67
    e970:	bl	5440 <mpfr_init2@plt>
    e974:	mov	x1, #0x43                  	// #67
    e978:	mov	x0, x25
    e97c:	bl	5440 <mpfr_init2@plt>
    e980:	mov	x0, x24
    e984:	bl	52b0 <__gmpq_init@plt>
    e988:	mov	x2, x20
    e98c:	mov	x1, x19
    e990:	mov	x0, x24
    e994:	bl	5100 <__gmpq_set_ui@plt>
    e998:	mov	x1, x24
    e99c:	mov	x0, x24
    e9a0:	mov	x2, #0x1                   	// #1
    e9a4:	bl	5570 <__gmpq_mul_2exp@plt>
    e9a8:	cmp	w28, #0x0
    e9ac:	mov	x19, #0x4                   	// #4
    e9b0:	cset	x20, eq  // eq = none
    e9b4:	mov	x0, x22
    e9b8:	bl	4d20 <mpc_ceil_log2@plt>
    e9bc:	add	x0, x0, #0x5
    e9c0:	add	x22, x22, x0
    e9c4:	mov	x0, x23
    e9c8:	mov	x1, x22
    e9cc:	bl	4c80 <mpfr_set_prec@plt>
    e9d0:	mov	x1, x22
    e9d4:	mov	x0, x26
    e9d8:	bl	4c80 <mpfr_set_prec@plt>
    e9dc:	mov	x1, x22
    e9e0:	mov	x0, x25
    e9e4:	bl	4c80 <mpfr_set_prec@plt>
    e9e8:	mov	w1, #0x0                   	// #0
    e9ec:	mov	x0, x23
    e9f0:	bl	4a80 <mpfr_const_pi@plt>
    e9f4:	mov	x2, x24
    e9f8:	mov	x1, x23
    e9fc:	mov	w3, #0x0                   	// #0
    ea00:	mov	x0, x23
    ea04:	bl	49d0 <mpfr_mul_q@plt>
    ea08:	mov	x2, x23
    ea0c:	mov	x1, x25
    ea10:	mov	w3, #0x0                   	// #0
    ea14:	mov	x0, x26
    ea18:	bl	5520 <mpfr_sin_cos@plt>
    ea1c:	ldr	x1, [sp, #208]
    ea20:	cmp	w21, #0x0
    ea24:	ldr	x4, [x27]
    ea28:	sub	x1, x19, x1
    ea2c:	mov	x0, x25
    ea30:	sub	x1, x22, x1
    ea34:	cinc	x4, x4, eq  // eq = none
    ea38:	mov	w3, #0x1                   	// #1
    ea3c:	mov	w2, #0x0                   	// #0
    ea40:	bl	5450 <mpfr_can_round@plt>
    ea44:	cbz	w0, e9b4 <mpc_rootofunity@@Base+0x48c>
    ea48:	ldr	x1, [sp, #176]
    ea4c:	mov	x0, x26
    ea50:	ldr	x4, [x27, #32]
    ea54:	sub	x1, x19, x1
    ea58:	sub	x1, x22, x1
    ea5c:	mov	w3, #0x1                   	// #1
    ea60:	add	x4, x20, x4
    ea64:	mov	w2, #0x0                   	// #0
    ea68:	bl	5450 <mpfr_can_round@plt>
    ea6c:	cbz	w0, e9b4 <mpc_rootofunity@@Base+0x48c>
    ea70:	ldr	w3, [sp, #200]
    ea74:	mov	w2, w21
    ea78:	mov	x1, x25
    ea7c:	mov	x0, x27
    ea80:	bl	51d0 <mpfr_set4@plt>
    ea84:	mov	w20, w0
    ea88:	ldr	w3, [sp, #168]
    ea8c:	mov	w2, w28
    ea90:	mov	x1, x26
    ea94:	add	x0, x27, #0x20
    ea98:	bl	51d0 <mpfr_set4@plt>
    ea9c:	mov	w19, w0
    eaa0:	mov	x0, x23
    eaa4:	bl	4d60 <mpfr_clear@plt>
    eaa8:	mov	x0, x26
    eaac:	bl	4d60 <mpfr_clear@plt>
    eab0:	mov	x0, x25
    eab4:	bl	4d60 <mpfr_clear@plt>
    eab8:	mov	x0, x24
    eabc:	bl	4fb0 <__gmpq_clear@plt>
    eac0:	b	e824 <mpc_rootofunity@@Base+0x2fc>

000000000000eac4 <mpc_urandom@@Base>:
    eac4:	stp	x29, x30, [sp, #-48]!
    eac8:	mov	x29, sp
    eacc:	stp	x19, x20, [sp, #16]
    ead0:	mov	x20, x0
    ead4:	str	x21, [sp, #32]
    ead8:	mov	x21, x1
    eadc:	bl	5500 <mpfr_urandomb@plt>
    eae0:	mov	w19, w0
    eae4:	mov	x1, x21
    eae8:	add	x0, x20, #0x20
    eaec:	bl	5500 <mpfr_urandomb@plt>
    eaf0:	cmp	w19, #0x0
    eaf4:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    eaf8:	cset	w0, ne  // ne = any
    eafc:	ldp	x19, x20, [sp, #16]
    eb00:	ldr	x21, [sp, #32]
    eb04:	ldp	x29, x30, [sp], #48
    eb08:	ret

000000000000eb0c <mpc_set@@Base>:
    eb0c:	stp	x29, x30, [sp, #-48]!
    eb10:	mov	x29, sp
    eb14:	ldr	w3, [x1, #8]
    eb18:	stp	x19, x20, [sp, #16]
    eb1c:	mov	x19, x1
    eb20:	stp	x21, x22, [sp, #32]
    eb24:	mov	x22, x0
    eb28:	mov	w21, w2
    eb2c:	and	w2, w2, #0xf
    eb30:	bl	51d0 <mpfr_set4@plt>
    eb34:	ldr	w3, [x19, #40]
    eb38:	mov	w20, w0
    eb3c:	asr	w2, w21, #4
    eb40:	add	x1, x19, #0x20
    eb44:	add	x0, x22, #0x20
    eb48:	bl	51d0 <mpfr_set4@plt>
    eb4c:	cmp	w20, #0x0
    eb50:	mov	w2, #0x2                   	// #2
    eb54:	cset	w1, ne  // ne = any
    eb58:	csel	w1, w1, w2, ge  // ge = tcont
    eb5c:	cmp	w0, #0x0
    eb60:	mov	w2, #0x4                   	// #4
    eb64:	csel	w2, w0, w2, eq  // eq = none
    eb68:	mov	w0, #0x8                   	// #8
    eb6c:	csel	w0, w2, w0, ge  // ge = tcont
    eb70:	orr	w0, w1, w0
    eb74:	ldp	x19, x20, [sp, #16]
    eb78:	ldp	x21, x22, [sp, #32]
    eb7c:	ldp	x29, x30, [sp], #48
    eb80:	ret

000000000000eb84 <mpc_set_prec@@Base>:
    eb84:	stp	x29, x30, [sp, #-32]!
    eb88:	mov	x29, sp
    eb8c:	stp	x19, x20, [sp, #16]
    eb90:	mov	x19, x0
    eb94:	mov	x20, x1
    eb98:	bl	4c80 <mpfr_set_prec@plt>
    eb9c:	mov	x1, x20
    eba0:	add	x0, x19, #0x20
    eba4:	ldp	x19, x20, [sp, #16]
    eba8:	ldp	x29, x30, [sp], #32
    ebac:	b	4c80 <mpfr_set_prec@plt>

000000000000ebb0 <mpc_set_str@@Base>:
    ebb0:	stp	x29, x30, [sp, #-48]!
    ebb4:	mov	w4, w3
    ebb8:	mov	w3, w2
    ebbc:	mov	x29, sp
    ebc0:	add	x2, sp, #0x28
    ebc4:	stp	x19, x20, [sp, #16]
    ebc8:	mov	x20, x0
    ebcc:	bl	4f00 <mpc_strtoc@plt>
    ebd0:	cmn	w0, #0x1
    ebd4:	b.ne	ebfc <mpc_set_str@@Base+0x4c>  // b.any
    ebd8:	mov	w19, #0xffffffff            	// #-1
    ebdc:	mov	x0, x20
    ebe0:	bl	4a40 <mpfr_set_nan@plt>
    ebe4:	add	x0, x20, #0x20
    ebe8:	bl	4a40 <mpfr_set_nan@plt>
    ebec:	mov	w0, w19
    ebf0:	ldp	x19, x20, [sp, #16]
    ebf4:	ldp	x29, x30, [sp], #48
    ebf8:	ret
    ebfc:	mov	w19, w0
    ec00:	bl	5170 <__ctype_b_loc@plt>
    ec04:	ldr	x3, [x0]
    ec08:	ldr	x1, [sp, #40]
    ec0c:	ldrb	w2, [x1]
    ec10:	ldrb	w0, [x1]
    ec14:	ldrh	w2, [x3, x2, lsl #1]
    ec18:	tbnz	w2, #13, ec24 <mpc_set_str@@Base+0x74>
    ec1c:	cbz	w0, ebec <mpc_set_str@@Base+0x3c>
    ec20:	b	ebd8 <mpc_set_str@@Base+0x28>
    ec24:	add	x1, x1, #0x1
    ec28:	str	x1, [sp, #40]
    ec2c:	b	ec08 <mpc_set_str@@Base+0x58>

000000000000ec30 <mpc_set_fr@@Base>:
    ec30:	stp	x29, x30, [sp, #-32]!
    ec34:	and	w2, w2, #0xf
    ec38:	mov	x29, sp
    ec3c:	str	x19, [sp, #16]
    ec40:	mov	x19, x0
    ec44:	bl	4e80 <mpfr_set@plt>
    ec48:	cmp	w0, #0x0
    ec4c:	mov	w2, #0x1                   	// #1
    ec50:	cset	w1, ne  // ne = any
    ec54:	str	w2, [x19, #40]
    ec58:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    ec5c:	str	x2, [x19, #48]
    ec60:	mov	w0, #0x2                   	// #2
    ec64:	csel	w0, w1, w0, ge  // ge = tcont
    ec68:	ldr	x19, [sp, #16]
    ec6c:	ldp	x29, x30, [sp], #32
    ec70:	ret

000000000000ec74 <mpc_set_d@@Base>:
    ec74:	stp	x29, x30, [sp, #-32]!
    ec78:	and	w1, w1, #0xf
    ec7c:	mov	x29, sp
    ec80:	str	x19, [sp, #16]
    ec84:	mov	x19, x0
    ec88:	bl	4c30 <mpfr_set_d@plt>
    ec8c:	cmp	w0, #0x0
    ec90:	mov	w2, #0x1                   	// #1
    ec94:	cset	w1, ne  // ne = any
    ec98:	str	w2, [x19, #40]
    ec9c:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    eca0:	str	x2, [x19, #48]
    eca4:	mov	w0, #0x2                   	// #2
    eca8:	csel	w0, w1, w0, ge  // ge = tcont
    ecac:	ldr	x19, [sp, #16]
    ecb0:	ldp	x29, x30, [sp], #32
    ecb4:	ret

000000000000ecb8 <mpc_set_ld@@Base>:
    ecb8:	stp	x29, x30, [sp, #-32]!
    ecbc:	and	w1, w1, #0xf
    ecc0:	mov	x29, sp
    ecc4:	str	x19, [sp, #16]
    ecc8:	mov	x19, x0
    eccc:	bl	49b0 <mpfr_set_ld@plt>
    ecd0:	cmp	w0, #0x0
    ecd4:	mov	w2, #0x1                   	// #1
    ecd8:	cset	w1, ne  // ne = any
    ecdc:	str	w2, [x19, #40]
    ece0:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    ece4:	str	x2, [x19, #48]
    ece8:	mov	w0, #0x2                   	// #2
    ecec:	csel	w0, w1, w0, ge  // ge = tcont
    ecf0:	ldr	x19, [sp, #16]
    ecf4:	ldp	x29, x30, [sp], #32
    ecf8:	ret

000000000000ecfc <mpc_set_ui@@Base>:
    ecfc:	stp	x29, x30, [sp, #-32]!
    ed00:	and	w2, w2, #0xf
    ed04:	mov	x29, sp
    ed08:	str	x19, [sp, #16]
    ed0c:	mov	x19, x0
    ed10:	bl	5510 <mpfr_set_ui@plt>
    ed14:	cmp	w0, #0x0
    ed18:	mov	w2, #0x1                   	// #1
    ed1c:	cset	w1, ne  // ne = any
    ed20:	str	w2, [x19, #40]
    ed24:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    ed28:	str	x2, [x19, #48]
    ed2c:	mov	w0, #0x2                   	// #2
    ed30:	csel	w0, w1, w0, ge  // ge = tcont
    ed34:	ldr	x19, [sp, #16]
    ed38:	ldp	x29, x30, [sp], #32
    ed3c:	ret

000000000000ed40 <mpc_set_si@@Base>:
    ed40:	stp	x29, x30, [sp, #-32]!
    ed44:	and	w2, w2, #0xf
    ed48:	mov	x29, sp
    ed4c:	str	x19, [sp, #16]
    ed50:	mov	x19, x0
    ed54:	bl	5270 <mpfr_set_si@plt>
    ed58:	cmp	w0, #0x0
    ed5c:	mov	w2, #0x1                   	// #1
    ed60:	cset	w1, ne  // ne = any
    ed64:	str	w2, [x19, #40]
    ed68:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    ed6c:	str	x2, [x19, #48]
    ed70:	mov	w0, #0x2                   	// #2
    ed74:	csel	w0, w1, w0, ge  // ge = tcont
    ed78:	ldr	x19, [sp, #16]
    ed7c:	ldp	x29, x30, [sp], #32
    ed80:	ret

000000000000ed84 <mpc_set_z@@Base>:
    ed84:	stp	x29, x30, [sp, #-32]!
    ed88:	and	w2, w2, #0xf
    ed8c:	mov	x29, sp
    ed90:	str	x19, [sp, #16]
    ed94:	mov	x19, x0
    ed98:	bl	4ec0 <mpfr_set_z@plt>
    ed9c:	cmp	w0, #0x0
    eda0:	mov	w2, #0x1                   	// #1
    eda4:	cset	w1, ne  // ne = any
    eda8:	str	w2, [x19, #40]
    edac:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    edb0:	str	x2, [x19, #48]
    edb4:	mov	w0, #0x2                   	// #2
    edb8:	csel	w0, w1, w0, ge  // ge = tcont
    edbc:	ldr	x19, [sp, #16]
    edc0:	ldp	x29, x30, [sp], #32
    edc4:	ret

000000000000edc8 <mpc_set_q@@Base>:
    edc8:	stp	x29, x30, [sp, #-32]!
    edcc:	and	w2, w2, #0xf
    edd0:	mov	x29, sp
    edd4:	str	x19, [sp, #16]
    edd8:	mov	x19, x0
    eddc:	bl	5290 <mpfr_set_q@plt>
    ede0:	cmp	w0, #0x0
    ede4:	mov	w2, #0x1                   	// #1
    ede8:	cset	w1, ne  // ne = any
    edec:	str	w2, [x19, #40]
    edf0:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    edf4:	str	x2, [x19, #48]
    edf8:	mov	w0, #0x2                   	// #2
    edfc:	csel	w0, w1, w0, ge  // ge = tcont
    ee00:	ldr	x19, [sp, #16]
    ee04:	ldp	x29, x30, [sp], #32
    ee08:	ret

000000000000ee0c <mpc_set_f@@Base>:
    ee0c:	stp	x29, x30, [sp, #-32]!
    ee10:	and	w2, w2, #0xf
    ee14:	mov	x29, sp
    ee18:	str	x19, [sp, #16]
    ee1c:	mov	x19, x0
    ee20:	bl	4b60 <mpfr_set_f@plt>
    ee24:	cmp	w0, #0x0
    ee28:	mov	w2, #0x1                   	// #1
    ee2c:	cset	w1, ne  // ne = any
    ee30:	str	w2, [x19, #40]
    ee34:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    ee38:	str	x2, [x19, #48]
    ee3c:	mov	w0, #0x2                   	// #2
    ee40:	csel	w0, w1, w0, ge  // ge = tcont
    ee44:	ldr	x19, [sp, #16]
    ee48:	ldp	x29, x30, [sp], #32
    ee4c:	ret

000000000000ee50 <mpc_set_uj@@Base>:
    ee50:	stp	x29, x30, [sp, #-32]!
    ee54:	and	w2, w2, #0xf
    ee58:	mov	x29, sp
    ee5c:	str	x19, [sp, #16]
    ee60:	mov	x19, x0
    ee64:	bl	5400 <__gmpfr_set_uj@plt>
    ee68:	cmp	w0, #0x0
    ee6c:	mov	w2, #0x1                   	// #1
    ee70:	cset	w1, ne  // ne = any
    ee74:	str	w2, [x19, #40]
    ee78:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    ee7c:	str	x2, [x19, #48]
    ee80:	mov	w0, #0x2                   	// #2
    ee84:	csel	w0, w1, w0, ge  // ge = tcont
    ee88:	ldr	x19, [sp, #16]
    ee8c:	ldp	x29, x30, [sp], #32
    ee90:	ret

000000000000ee94 <mpc_set_sj@@Base>:
    ee94:	stp	x29, x30, [sp, #-32]!
    ee98:	and	w2, w2, #0xf
    ee9c:	mov	x29, sp
    eea0:	str	x19, [sp, #16]
    eea4:	mov	x19, x0
    eea8:	bl	4d70 <__gmpfr_set_sj@plt>
    eeac:	cmp	w0, #0x0
    eeb0:	mov	w2, #0x1                   	// #1
    eeb4:	cset	w1, ne  // ne = any
    eeb8:	str	w2, [x19, #40]
    eebc:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    eec0:	str	x2, [x19, #48]
    eec4:	mov	w0, #0x2                   	// #2
    eec8:	csel	w0, w1, w0, ge  // ge = tcont
    eecc:	ldr	x19, [sp, #16]
    eed0:	ldp	x29, x30, [sp], #32
    eed4:	ret

000000000000eed8 <mpc_set_dc@@Base>:
    eed8:	b	4f90 <mpc_set_d_d@plt>

000000000000eedc <mpc_set_ldc@@Base>:
    eedc:	b	4d50 <mpc_set_ld_ld@plt>

000000000000eee0 <mpc_set_nan@@Base>:
    eee0:	stp	x29, x30, [sp, #-32]!
    eee4:	mov	x29, sp
    eee8:	str	x19, [sp, #16]
    eeec:	mov	x19, x0
    eef0:	bl	4a40 <mpfr_set_nan@plt>
    eef4:	add	x0, x19, #0x20
    eef8:	ldr	x19, [sp, #16]
    eefc:	ldp	x29, x30, [sp], #32
    ef00:	b	4a40 <mpfr_set_nan@plt>

000000000000ef04 <mpc_set_d_d@@Base>:
    ef04:	stp	x29, x30, [sp, #-48]!
    ef08:	mov	x29, sp
    ef0c:	str	d8, [sp, #40]
    ef10:	fmov	d8, d1
    ef14:	stp	x19, x20, [sp, #16]
    ef18:	mov	w20, w1
    ef1c:	and	w1, w1, #0xf
    ef20:	str	x21, [sp, #32]
    ef24:	mov	x21, x0
    ef28:	bl	4c30 <mpfr_set_d@plt>
    ef2c:	fmov	d0, d8
    ef30:	mov	w19, w0
    ef34:	asr	w1, w20, #4
    ef38:	add	x0, x21, #0x20
    ef3c:	bl	4c30 <mpfr_set_d@plt>
    ef40:	cmp	w19, #0x0
    ef44:	mov	w2, #0x2                   	// #2
    ef48:	cset	w1, ne  // ne = any
    ef4c:	ldr	d8, [sp, #40]
    ef50:	csel	w1, w1, w2, ge  // ge = tcont
    ef54:	cmp	w0, #0x0
    ef58:	mov	w2, #0x4                   	// #4
    ef5c:	csel	w2, w0, w2, eq  // eq = none
    ef60:	mov	w0, #0x8                   	// #8
    ef64:	csel	w0, w2, w0, ge  // ge = tcont
    ef68:	orr	w0, w1, w0
    ef6c:	ldp	x19, x20, [sp, #16]
    ef70:	ldr	x21, [sp, #32]
    ef74:	ldp	x29, x30, [sp], #48
    ef78:	ret

000000000000ef7c <mpc_set_f_f@@Base>:
    ef7c:	stp	x29, x30, [sp, #-48]!
    ef80:	mov	x29, sp
    ef84:	stp	x19, x20, [sp, #16]
    ef88:	mov	w20, w3
    ef8c:	stp	x21, x22, [sp, #32]
    ef90:	mov	x21, x0
    ef94:	mov	x22, x2
    ef98:	and	w2, w3, #0xf
    ef9c:	bl	4b60 <mpfr_set_f@plt>
    efa0:	asr	w2, w20, #4
    efa4:	mov	w19, w0
    efa8:	mov	x1, x22
    efac:	add	x0, x21, #0x20
    efb0:	bl	4b60 <mpfr_set_f@plt>
    efb4:	cmp	w19, #0x0
    efb8:	mov	w2, #0x2                   	// #2
    efbc:	cset	w1, ne  // ne = any
    efc0:	csel	w1, w1, w2, ge  // ge = tcont
    efc4:	cmp	w0, #0x0
    efc8:	mov	w2, #0x4                   	// #4
    efcc:	csel	w2, w0, w2, eq  // eq = none
    efd0:	mov	w0, #0x8                   	// #8
    efd4:	csel	w0, w2, w0, ge  // ge = tcont
    efd8:	orr	w0, w1, w0
    efdc:	ldp	x19, x20, [sp, #16]
    efe0:	ldp	x21, x22, [sp, #32]
    efe4:	ldp	x29, x30, [sp], #48
    efe8:	ret

000000000000efec <mpc_set_fr_fr@@Base>:
    efec:	stp	x29, x30, [sp, #-48]!
    eff0:	mov	x29, sp
    eff4:	stp	x19, x20, [sp, #16]
    eff8:	mov	w20, w3
    effc:	stp	x21, x22, [sp, #32]
    f000:	mov	x21, x0
    f004:	mov	x22, x2
    f008:	and	w2, w3, #0xf
    f00c:	bl	4e80 <mpfr_set@plt>
    f010:	asr	w2, w20, #4
    f014:	mov	w19, w0
    f018:	mov	x1, x22
    f01c:	add	x0, x21, #0x20
    f020:	bl	4e80 <mpfr_set@plt>
    f024:	cmp	w19, #0x0
    f028:	mov	w2, #0x2                   	// #2
    f02c:	cset	w1, ne  // ne = any
    f030:	csel	w1, w1, w2, ge  // ge = tcont
    f034:	cmp	w0, #0x0
    f038:	mov	w2, #0x4                   	// #4
    f03c:	csel	w2, w0, w2, eq  // eq = none
    f040:	mov	w0, #0x8                   	// #8
    f044:	csel	w0, w2, w0, ge  // ge = tcont
    f048:	orr	w0, w1, w0
    f04c:	ldp	x19, x20, [sp, #16]
    f050:	ldp	x21, x22, [sp, #32]
    f054:	ldp	x29, x30, [sp], #48
    f058:	ret

000000000000f05c <mpc_set_ld_ld@@Base>:
    f05c:	stp	x29, x30, [sp, #-64]!
    f060:	mov	x29, sp
    f064:	stp	x19, x20, [sp, #16]
    f068:	mov	w20, w1
    f06c:	and	w1, w1, #0xf
    f070:	str	x21, [sp, #32]
    f074:	mov	x21, x0
    f078:	str	q1, [sp, #48]
    f07c:	bl	49b0 <mpfr_set_ld@plt>
    f080:	ldr	q2, [sp, #48]
    f084:	mov	w19, w0
    f088:	asr	w1, w20, #4
    f08c:	add	x0, x21, #0x20
    f090:	mov	v0.16b, v2.16b
    f094:	bl	49b0 <mpfr_set_ld@plt>
    f098:	cmp	w19, #0x0
    f09c:	mov	w2, #0x2                   	// #2
    f0a0:	cset	w1, ne  // ne = any
    f0a4:	csel	w1, w1, w2, ge  // ge = tcont
    f0a8:	cmp	w0, #0x0
    f0ac:	mov	w2, #0x4                   	// #4
    f0b0:	csel	w2, w0, w2, eq  // eq = none
    f0b4:	mov	w0, #0x8                   	// #8
    f0b8:	csel	w0, w2, w0, ge  // ge = tcont
    f0bc:	orr	w0, w1, w0
    f0c0:	ldp	x19, x20, [sp, #16]
    f0c4:	ldr	x21, [sp, #32]
    f0c8:	ldp	x29, x30, [sp], #64
    f0cc:	ret

000000000000f0d0 <mpc_set_q_q@@Base>:
    f0d0:	stp	x29, x30, [sp, #-48]!
    f0d4:	mov	x29, sp
    f0d8:	stp	x19, x20, [sp, #16]
    f0dc:	mov	w20, w3
    f0e0:	stp	x21, x22, [sp, #32]
    f0e4:	mov	x21, x0
    f0e8:	mov	x22, x2
    f0ec:	and	w2, w3, #0xf
    f0f0:	bl	5290 <mpfr_set_q@plt>
    f0f4:	asr	w2, w20, #4
    f0f8:	mov	w19, w0
    f0fc:	mov	x1, x22
    f100:	add	x0, x21, #0x20
    f104:	bl	5290 <mpfr_set_q@plt>
    f108:	cmp	w19, #0x0
    f10c:	mov	w2, #0x2                   	// #2
    f110:	cset	w1, ne  // ne = any
    f114:	csel	w1, w1, w2, ge  // ge = tcont
    f118:	cmp	w0, #0x0
    f11c:	mov	w2, #0x4                   	// #4
    f120:	csel	w2, w0, w2, eq  // eq = none
    f124:	mov	w0, #0x8                   	// #8
    f128:	csel	w0, w2, w0, ge  // ge = tcont
    f12c:	orr	w0, w1, w0
    f130:	ldp	x19, x20, [sp, #16]
    f134:	ldp	x21, x22, [sp, #32]
    f138:	ldp	x29, x30, [sp], #48
    f13c:	ret

000000000000f140 <mpc_set_si_si@@Base>:
    f140:	stp	x29, x30, [sp, #-48]!
    f144:	mov	x29, sp
    f148:	stp	x19, x20, [sp, #16]
    f14c:	mov	w20, w3
    f150:	stp	x21, x22, [sp, #32]
    f154:	mov	x21, x0
    f158:	mov	x22, x2
    f15c:	and	w2, w3, #0xf
    f160:	bl	5270 <mpfr_set_si@plt>
    f164:	asr	w2, w20, #4
    f168:	mov	w19, w0
    f16c:	mov	x1, x22
    f170:	add	x0, x21, #0x20
    f174:	bl	5270 <mpfr_set_si@plt>
    f178:	cmp	w19, #0x0
    f17c:	mov	w2, #0x2                   	// #2
    f180:	cset	w1, ne  // ne = any
    f184:	csel	w1, w1, w2, ge  // ge = tcont
    f188:	cmp	w0, #0x0
    f18c:	mov	w2, #0x4                   	// #4
    f190:	csel	w2, w0, w2, eq  // eq = none
    f194:	mov	w0, #0x8                   	// #8
    f198:	csel	w0, w2, w0, ge  // ge = tcont
    f19c:	orr	w0, w1, w0
    f1a0:	ldp	x19, x20, [sp, #16]
    f1a4:	ldp	x21, x22, [sp, #32]
    f1a8:	ldp	x29, x30, [sp], #48
    f1ac:	ret

000000000000f1b0 <mpc_set_ui_ui@@Base>:
    f1b0:	stp	x29, x30, [sp, #-48]!
    f1b4:	mov	x29, sp
    f1b8:	stp	x19, x20, [sp, #16]
    f1bc:	mov	w20, w3
    f1c0:	stp	x21, x22, [sp, #32]
    f1c4:	mov	x21, x0
    f1c8:	mov	x22, x2
    f1cc:	and	w2, w3, #0xf
    f1d0:	bl	5510 <mpfr_set_ui@plt>
    f1d4:	asr	w2, w20, #4
    f1d8:	mov	w19, w0
    f1dc:	mov	x1, x22
    f1e0:	add	x0, x21, #0x20
    f1e4:	bl	5510 <mpfr_set_ui@plt>
    f1e8:	cmp	w19, #0x0
    f1ec:	mov	w2, #0x2                   	// #2
    f1f0:	cset	w1, ne  // ne = any
    f1f4:	csel	w1, w1, w2, ge  // ge = tcont
    f1f8:	cmp	w0, #0x0
    f1fc:	mov	w2, #0x4                   	// #4
    f200:	csel	w2, w0, w2, eq  // eq = none
    f204:	mov	w0, #0x8                   	// #8
    f208:	csel	w0, w2, w0, ge  // ge = tcont
    f20c:	orr	w0, w1, w0
    f210:	ldp	x19, x20, [sp, #16]
    f214:	ldp	x21, x22, [sp, #32]
    f218:	ldp	x29, x30, [sp], #48
    f21c:	ret

000000000000f220 <mpc_set_z_z@@Base>:
    f220:	stp	x29, x30, [sp, #-48]!
    f224:	mov	x29, sp
    f228:	stp	x19, x20, [sp, #16]
    f22c:	mov	w20, w3
    f230:	stp	x21, x22, [sp, #32]
    f234:	mov	x21, x0
    f238:	mov	x22, x2
    f23c:	and	w2, w3, #0xf
    f240:	bl	4ec0 <mpfr_set_z@plt>
    f244:	asr	w2, w20, #4
    f248:	mov	w19, w0
    f24c:	mov	x1, x22
    f250:	add	x0, x21, #0x20
    f254:	bl	4ec0 <mpfr_set_z@plt>
    f258:	cmp	w19, #0x0
    f25c:	mov	w2, #0x2                   	// #2
    f260:	cset	w1, ne  // ne = any
    f264:	csel	w1, w1, w2, ge  // ge = tcont
    f268:	cmp	w0, #0x0
    f26c:	mov	w2, #0x4                   	// #4
    f270:	csel	w2, w0, w2, eq  // eq = none
    f274:	mov	w0, #0x8                   	// #8
    f278:	csel	w0, w2, w0, ge  // ge = tcont
    f27c:	orr	w0, w1, w0
    f280:	ldp	x19, x20, [sp, #16]
    f284:	ldp	x21, x22, [sp, #32]
    f288:	ldp	x29, x30, [sp], #48
    f28c:	ret

000000000000f290 <mpc_set_uj_uj@@Base>:
    f290:	stp	x29, x30, [sp, #-48]!
    f294:	mov	x29, sp
    f298:	stp	x19, x20, [sp, #16]
    f29c:	mov	w20, w3
    f2a0:	stp	x21, x22, [sp, #32]
    f2a4:	mov	x21, x0
    f2a8:	mov	x22, x2
    f2ac:	and	w2, w3, #0xf
    f2b0:	bl	5400 <__gmpfr_set_uj@plt>
    f2b4:	asr	w2, w20, #4
    f2b8:	mov	w19, w0
    f2bc:	mov	x1, x22
    f2c0:	add	x0, x21, #0x20
    f2c4:	bl	5400 <__gmpfr_set_uj@plt>
    f2c8:	cmp	w19, #0x0
    f2cc:	mov	w2, #0x2                   	// #2
    f2d0:	cset	w1, ne  // ne = any
    f2d4:	csel	w1, w1, w2, ge  // ge = tcont
    f2d8:	cmp	w0, #0x0
    f2dc:	mov	w2, #0x4                   	// #4
    f2e0:	csel	w2, w0, w2, eq  // eq = none
    f2e4:	mov	w0, #0x8                   	// #8
    f2e8:	csel	w0, w2, w0, ge  // ge = tcont
    f2ec:	orr	w0, w1, w0
    f2f0:	ldp	x19, x20, [sp, #16]
    f2f4:	ldp	x21, x22, [sp, #32]
    f2f8:	ldp	x29, x30, [sp], #48
    f2fc:	ret

000000000000f300 <mpc_set_sj_sj@@Base>:
    f300:	stp	x29, x30, [sp, #-48]!
    f304:	mov	x29, sp
    f308:	stp	x19, x20, [sp, #16]
    f30c:	mov	w20, w3
    f310:	stp	x21, x22, [sp, #32]
    f314:	mov	x21, x0
    f318:	mov	x22, x2
    f31c:	and	w2, w3, #0xf
    f320:	bl	4d70 <__gmpfr_set_sj@plt>
    f324:	asr	w2, w20, #4
    f328:	mov	w19, w0
    f32c:	mov	x1, x22
    f330:	add	x0, x21, #0x20
    f334:	bl	4d70 <__gmpfr_set_sj@plt>
    f338:	cmp	w19, #0x0
    f33c:	mov	w2, #0x2                   	// #2
    f340:	cset	w1, ne  // ne = any
    f344:	csel	w1, w1, w2, ge  // ge = tcont
    f348:	cmp	w0, #0x0
    f34c:	mov	w2, #0x4                   	// #4
    f350:	csel	w2, w0, w2, eq  // eq = none
    f354:	mov	w0, #0x8                   	// #8
    f358:	csel	w0, w2, w0, ge  // ge = tcont
    f35c:	orr	w0, w1, w0
    f360:	ldp	x19, x20, [sp, #16]
    f364:	ldp	x21, x22, [sp, #32]
    f368:	ldp	x29, x30, [sp], #48
    f36c:	ret

000000000000f370 <mpc_sin@@Base>:
    f370:	stp	x29, x30, [sp, #-16]!
    f374:	mov	w3, w2
    f378:	mov	w4, #0x0                   	// #0
    f37c:	mov	x29, sp
    f380:	mov	x2, x1
    f384:	mov	x1, #0x0                   	// #0
    f388:	bl	5140 <mpc_sin_cos@plt>
    f38c:	and	w0, w0, #0xf
    f390:	ldp	x29, x30, [sp], #16
    f394:	ret

000000000000f398 <mpc_fix_inf@@Base>:
    f398:	stp	x29, x30, [sp, #-32]!
    f39c:	mov	x29, sp
    f3a0:	ldr	x2, [x0, #16]
    f3a4:	str	x19, [sp, #16]
    f3a8:	mov	x19, x0
    f3ac:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f3b0:	cmp	x2, x0
    f3b4:	b.eq	f3e8 <mpc_fix_inf@@Base+0x50>  // b.none
    f3b8:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
    f3bc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    f3c0:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    f3c4:	add	x4, x4, #0x8ed
    f3c8:	ldr	x0, [x0, #4008]
    f3cc:	add	x2, x2, #0x8fc
    f3d0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
    f3d4:	add	x1, x1, #0x5f3
    f3d8:	mov	w3, #0x115                 	// #277
    f3dc:	ldr	x0, [x0]
    f3e0:	bl	55a0 <fprintf@plt>
    f3e4:	bl	5000 <abort@plt>
    f3e8:	ldr	w0, [x19, #8]
    f3ec:	cmp	w1, #0x1
    f3f0:	b.eq	f448 <mpc_fix_inf@@Base+0xb0>  // b.none
    f3f4:	tbz	w0, #31, f434 <mpc_fix_inf@@Base+0x9c>
    f3f8:	cmp	w1, #0x2
    f3fc:	b.ne	f458 <mpc_fix_inf@@Base+0xc0>  // b.any
    f400:	mov	x0, x19
    f404:	bl	4e00 <mpfr_nextabove@plt>
    f408:	ldr	x0, [x19, #16]
    f40c:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    f410:	cmp	x0, x1
    f414:	b.ge	f450 <mpc_fix_inf@@Base+0xb8>  // b.tcont
    f418:	mov	x1, #0x2                   	// #2
    f41c:	movk	x1, #0x8000, lsl #48
    f420:	cmp	x0, x1
    f424:	b.ne	f42c <mpc_fix_inf@@Base+0x94>  // b.any
    f428:	bl	4b00 <mpfr_set_erangeflag@plt>
    f42c:	mov	w0, #0x0                   	// #0
    f430:	b	f458 <mpc_fix_inf@@Base+0xc0>
    f434:	cmp	w1, #0x3
    f438:	b.ne	f458 <mpc_fix_inf@@Base+0xc0>  // b.any
    f43c:	mov	x0, x19
    f440:	bl	4bb0 <mpfr_nextbelow@plt>
    f444:	b	f408 <mpc_fix_inf@@Base+0x70>
    f448:	tbnz	w0, #31, f400 <mpc_fix_inf@@Base+0x68>
    f44c:	b	f43c <mpc_fix_inf@@Base+0xa4>
    f450:	ldr	w2, [x19, #8]
    f454:	neg	w0, w2
    f458:	ldr	x19, [sp, #16]
    f45c:	ldp	x29, x30, [sp], #32
    f460:	ret

000000000000f464 <mpc_fix_zero@@Base>:
    f464:	stp	x29, x30, [sp, #-16]!
    f468:	mov	x29, sp
    f46c:	ldr	w2, [x0, #8]
    f470:	tbz	w2, #31, f488 <mpc_fix_zero@@Base+0x24>
    f474:	cmp	w1, #0x3
    f478:	b.ne	f494 <mpc_fix_zero@@Base+0x30>  // b.any
    f47c:	bl	4bb0 <mpfr_nextbelow@plt>
    f480:	mov	w0, #0xffffffff            	// #-1
    f484:	b	f498 <mpc_fix_zero@@Base+0x34>
    f488:	cmp	w1, #0x2
    f48c:	b.ne	f480 <mpc_fix_zero@@Base+0x1c>  // b.any
    f490:	bl	4e00 <mpfr_nextabove@plt>
    f494:	mov	w0, #0x1                   	// #1
    f498:	ldp	x29, x30, [sp], #16
    f49c:	ret

000000000000f4a0 <mpc_sin_cos@@Base>:
    f4a0:	stp	x29, x30, [sp, #-384]!
    f4a4:	mov	x29, sp
    f4a8:	stp	x19, x20, [sp, #16]
    f4ac:	mov	x19, x0
    f4b0:	mov	x20, x1
    f4b4:	mov	x0, x2
    f4b8:	stp	x21, x22, [sp, #32]
    f4bc:	mov	w22, w3
    f4c0:	stp	x23, x24, [sp, #48]
    f4c4:	stp	x25, x26, [sp, #64]
    f4c8:	stp	x27, x28, [sp, #80]
    f4cc:	mov	x27, x2
    f4d0:	str	w4, [sp, #104]
    f4d4:	bl	54d0 <mpfr_number_p@plt>
    f4d8:	cbnz	w0, f5d8 <mpc_sin_cos@@Base+0x138>
    f4dc:	cmp	x27, x19
    f4e0:	cset	w23, eq  // eq = none
    f4e4:	cmp	x27, x20
    f4e8:	csinc	w23, w23, wzr, ne  // ne = any
    f4ec:	cbz	w23, f6f4 <mpc_sin_cos@@Base+0x254>
    f4f0:	ldr	x1, [x27]
    f4f4:	add	x21, sp, #0x140
    f4f8:	ldr	x2, [x27, #32]
    f4fc:	mov	x0, x21
    f500:	bl	53c0 <mpc_init3@plt>
    f504:	mov	x1, x27
    f508:	mov	x0, x21
    f50c:	mov	w2, #0x0                   	// #0
    f510:	bl	5580 <mpc_set@plt>
    f514:	cbz	x19, f574 <mpc_sin_cos@@Base+0xd4>
    f518:	ldr	x0, [sp, #336]
    f51c:	mov	x1, #0x2                   	// #2
    f520:	movk	x1, #0x8000, lsl #48
    f524:	cmp	x0, x1
    f528:	b.eq	f538 <mpc_sin_cos@@Base+0x98>  // b.none
    f52c:	ldr	x2, [sp, #368]
    f530:	cmp	x2, x1
    f534:	b.ne	f72c <mpc_sin_cos@@Base+0x28c>  // b.any
    f538:	add	x1, sp, #0x140
    f53c:	mov	w2, w22
    f540:	mov	x0, x19
    f544:	bl	5580 <mpc_set@plt>
    f548:	ldr	x0, [sp, #368]
    f54c:	mov	x1, #0x2                   	// #2
    f550:	movk	x1, #0x8000, lsl #48
    f554:	cmp	x0, x1
    f558:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    f55c:	b.ne	f718 <mpc_sin_cos@@Base+0x278>  // b.any
    f560:	ldr	x0, [sp, #336]
    f564:	cmp	x0, x1
    f568:	b.eq	f574 <mpc_sin_cos@@Base+0xd4>  // b.none
    f56c:	mov	x0, x19
    f570:	bl	4a40 <mpfr_set_nan@plt>
    f574:	cbz	x20, f838 <mpc_sin_cos@@Base+0x398>
    f578:	ldr	x0, [sp, #336]
    f57c:	mov	x21, #0x2                   	// #2
    f580:	movk	x21, #0x8000, lsl #48
    f584:	add	x19, x20, #0x20
    f588:	cmp	x0, x21
    f58c:	ldr	x1, [sp, #368]
    f590:	b.ne	f804 <mpc_sin_cos@@Base+0x364>  // b.any
    f594:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f598:	cmp	x1, x0
    f59c:	b.ne	f7f8 <mpc_sin_cos@@Base+0x358>  // b.any
    f5a0:	mov	x0, x20
    f5a4:	mov	w1, #0x1                   	// #1
    f5a8:	bl	5120 <mpfr_set_inf@plt>
    f5ac:	ldr	x1, [sp, #368]
    f5b0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    f5b4:	cmp	x1, x0
    f5b8:	b.ne	f8d8 <mpc_sin_cos@@Base+0x438>  // b.any
    f5bc:	ldr	w3, [sp, #360]
    f5c0:	ldr	w0, [sp, #104]
    f5c4:	add	x1, sp, #0x160
    f5c8:	asr	w2, w0, #4
    f5cc:	mov	x0, x19
    f5d0:	bl	51d0 <mpfr_set4@plt>
    f5d4:	b	f838 <mpc_sin_cos@@Base+0x398>
    f5d8:	add	x0, x27, #0x20
    f5dc:	str	x0, [sp, #128]
    f5e0:	bl	54d0 <mpfr_number_p@plt>
    f5e4:	cbz	w0, f4dc <mpc_sin_cos@@Base+0x3c>
    f5e8:	ldr	x0, [x27, #48]
    f5ec:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    f5f0:	cmp	x0, x1
    f5f4:	b.ne	fa4c <mpc_sin_cos@@Base+0x5ac>  // b.any
    f5f8:	ldr	w25, [x27, #40]
    f5fc:	add	x24, sp, #0x120
    f600:	cbz	x19, fa14 <mpc_sin_cos@@Base+0x574>
    f604:	ldr	x1, [x19]
    f608:	mov	x0, x24
    f60c:	add	x23, sp, #0x140
    f610:	bl	5440 <mpfr_init2@plt>
    f614:	cbz	x20, fa1c <mpc_sin_cos@@Base+0x57c>
    f618:	ldr	x1, [x20]
    f61c:	mov	x0, x23
    f620:	bl	5440 <mpfr_init2@plt>
    f624:	and	w2, w22, #0xf
    f628:	mov	x1, x27
    f62c:	mov	x0, x24
    f630:	bl	5080 <mpfr_sin@plt>
    f634:	mov	w22, w0
    f638:	ldr	w0, [sp, #104]
    f63c:	mov	x1, x27
    f640:	and	w2, w0, #0xf
    f644:	mov	x0, x23
    f648:	bl	5050 <mpfr_cos@plt>
    f64c:	mov	w21, w0
    f650:	cbz	x19, fa30 <mpc_sin_cos@@Base+0x590>
    f654:	ldr	w3, [sp, #296]
    f658:	mov	x1, x24
    f65c:	mov	w2, #0x0                   	// #0
    f660:	mov	x0, x19
    f664:	bl	51d0 <mpfr_set4@plt>
    f668:	ldr	w2, [sp, #328]
    f66c:	add	x0, x19, #0x20
    f670:	mov	w1, #0xffffffff            	// #-1
    f674:	tbz	w25, #31, fa24 <mpc_sin_cos@@Base+0x584>
    f678:	cmp	w2, #0x0
    f67c:	cneg	w1, w1, lt  // lt = tstop
    f680:	bl	4d10 <mpfr_set_zero@plt>
    f684:	cbz	x20, fa44 <mpc_sin_cos@@Base+0x5a4>
    f688:	ldr	w3, [sp, #328]
    f68c:	mov	x1, x23
    f690:	mov	w2, #0x0                   	// #0
    f694:	mov	x0, x20
    f698:	bl	51d0 <mpfr_set4@plt>
    f69c:	ldr	w2, [sp, #296]
    f6a0:	add	x0, x20, #0x20
    f6a4:	mov	w1, #0xffffffff            	// #-1
    f6a8:	tbz	w25, #31, fa38 <mpc_sin_cos@@Base+0x598>
    f6ac:	cmp	w2, w1
    f6b0:	cneg	w1, w1, gt
    f6b4:	bl	4d10 <mpfr_set_zero@plt>
    f6b8:	mov	x0, x24
    f6bc:	bl	4d60 <mpfr_clear@plt>
    f6c0:	mov	x0, x23
    f6c4:	bl	4d60 <mpfr_clear@plt>
    f6c8:	cmp	w22, #0x0
    f6cc:	mov	w0, #0x2                   	// #2
    f6d0:	cset	w19, ne  // ne = any
    f6d4:	mov	w1, #0x10                  	// #16
    f6d8:	csel	w19, w19, w0, ge  // ge = tcont
    f6dc:	cmp	w21, #0x0
    f6e0:	csel	w1, w21, w1, eq  // eq = none
    f6e4:	mov	w0, #0x20                  	// #32
    f6e8:	csel	w21, w1, w0, ge  // ge = tcont
    f6ec:	orr	w0, w21, w19
    f6f0:	b	f848 <mpc_sin_cos@@Base+0x3a8>
    f6f4:	ldp	x0, x1, [x27]
    f6f8:	stp	x0, x1, [sp, #320]
    f6fc:	ldp	x0, x1, [x27, #16]
    f700:	stp	x0, x1, [sp, #336]
    f704:	ldp	x0, x1, [x27, #32]
    f708:	stp	x0, x1, [sp, #352]
    f70c:	ldp	x0, x1, [x27, #48]
    f710:	stp	x0, x1, [sp, #368]
    f714:	b	f514 <mpc_sin_cos@@Base+0x74>
    f718:	and	x0, x0, #0xfffffffffffffffd
    f71c:	cmp	x0, x1
    f720:	b.eq	f574 <mpc_sin_cos@@Base+0xd4>  // b.none
    f724:	add	x0, x19, #0x20
    f728:	b	f570 <mpc_sin_cos@@Base+0xd0>
    f72c:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    f730:	cmp	x0, x1
    f734:	b.ne	f76c <mpc_sin_cos@@Base+0x2cc>  // b.any
    f738:	mov	x0, x19
    f73c:	bl	4a40 <mpfr_set_nan@plt>
    f740:	ldr	x1, [sp, #368]
    f744:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    f748:	add	x0, x19, #0x20
    f74c:	and	x1, x1, #0xfffffffffffffffd
    f750:	cmp	x1, x2
    f754:	b.ne	f570 <mpc_sin_cos@@Base+0xd0>  // b.any
    f758:	ldr	w3, [sp, #360]
    f75c:	asr	w2, w22, #4
    f760:	add	x1, sp, #0x160
    f764:	bl	51d0 <mpfr_set4@plt>
    f768:	b	f574 <mpc_sin_cos@@Base+0xd4>
    f76c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    f770:	add	x24, sp, #0x140
    f774:	cmp	x0, x1
    f778:	b.ne	f790 <mpc_sin_cos@@Base+0x2f0>  // b.any
    f77c:	mov	w2, w22
    f780:	mov	x1, x24
    f784:	mov	x0, x19
    f788:	bl	5580 <mpc_set@plt>
    f78c:	b	f574 <mpc_sin_cos@@Base+0xd4>
    f790:	add	x22, sp, #0x100
    f794:	add	x21, sp, #0x120
    f798:	mov	x0, x22
    f79c:	mov	x1, #0x2                   	// #2
    f7a0:	bl	5440 <mpfr_init2@plt>
    f7a4:	mov	x0, x21
    f7a8:	mov	x1, #0x2                   	// #2
    f7ac:	bl	5440 <mpfr_init2@plt>
    f7b0:	mov	x2, x24
    f7b4:	mov	w3, #0x1                   	// #1
    f7b8:	mov	x1, x21
    f7bc:	mov	x0, x22
    f7c0:	bl	5520 <mpfr_sin_cos@plt>
    f7c4:	ldr	w1, [sp, #264]
    f7c8:	mov	x0, x19
    f7cc:	bl	5120 <mpfr_set_inf@plt>
    f7d0:	ldr	w0, [sp, #360]
    f7d4:	ldr	w1, [sp, #296]
    f7d8:	mul	w1, w1, w0
    f7dc:	add	x0, x19, #0x20
    f7e0:	bl	5120 <mpfr_set_inf@plt>
    f7e4:	mov	x0, x22
    f7e8:	bl	4d60 <mpfr_clear@plt>
    f7ec:	mov	x0, x21
    f7f0:	bl	4d60 <mpfr_clear@plt>
    f7f4:	b	f574 <mpc_sin_cos@@Base+0xd4>
    f7f8:	mov	x0, x20
    f7fc:	bl	4a40 <mpfr_set_nan@plt>
    f800:	b	f5ac <mpc_sin_cos@@Base+0x10c>
    f804:	cmp	x1, x21
    f808:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
    f80c:	b.ne	f870 <mpc_sin_cos@@Base+0x3d0>  // b.any
    f810:	cmp	x0, x2
    f814:	b.ne	f864 <mpc_sin_cos@@Base+0x3c4>  // b.any
    f818:	ldr	w3, [sp, #328]
    f81c:	add	x1, sp, #0x140
    f820:	ldr	w0, [sp, #104]
    f824:	asr	w2, w0, #4
    f828:	mov	x0, x19
    f82c:	bl	51d0 <mpfr_set4@plt>
    f830:	mov	x0, x20
    f834:	bl	4a40 <mpfr_set_nan@plt>
    f838:	cbz	w23, f844 <mpc_sin_cos@@Base+0x3a4>
    f83c:	add	x0, sp, #0x140
    f840:	bl	4a10 <mpc_clear@plt>
    f844:	mov	w0, #0x0                   	// #0
    f848:	ldp	x19, x20, [sp, #16]
    f84c:	ldp	x21, x22, [sp, #32]
    f850:	ldp	x23, x24, [sp, #48]
    f854:	ldp	x25, x26, [sp, #64]
    f858:	ldp	x27, x28, [sp, #80]
    f85c:	ldp	x29, x30, [sp], #384
    f860:	ret
    f864:	mov	x0, x19
    f868:	bl	4a40 <mpfr_set_nan@plt>
    f86c:	b	f830 <mpc_sin_cos@@Base+0x390>
    f870:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
    f874:	cmp	x0, x25
    f878:	b.ne	f8e0 <mpc_sin_cos@@Base+0x440>  // b.any
    f87c:	ldr	w21, [sp, #328]
    f880:	cmp	x1, x0
    f884:	ldr	w22, [sp, #360]
    f888:	mvn	w21, w21
    f88c:	lsr	w22, w22, #31
    f890:	lsr	w21, w21, #31
    f894:	b.ne	f8cc <mpc_sin_cos@@Base+0x42c>  // b.any
    f898:	cmp	w21, w22
    f89c:	mov	w1, #0x1                   	// #1
    f8a0:	mov	x0, x20
    f8a4:	cneg	w1, w1, ne  // ne = any
    f8a8:	bl	5120 <mpfr_set_inf@plt>
    f8ac:	ldr	x1, [sp, #368]
    f8b0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    f8b4:	cmp	x1, x0
    f8b8:	b.ne	f8d8 <mpc_sin_cos@@Base+0x438>  // b.any
    f8bc:	cmp	w21, w22
    f8c0:	mov	w3, #0x1                   	// #1
    f8c4:	cneg	w3, w3, ne  // ne = any
    f8c8:	b	f5c0 <mpc_sin_cos@@Base+0x120>
    f8cc:	mov	x0, x20
    f8d0:	bl	4a40 <mpfr_set_nan@plt>
    f8d4:	b	f8ac <mpc_sin_cos@@Base+0x40c>
    f8d8:	mov	x0, x19
    f8dc:	b	f834 <mpc_sin_cos@@Base+0x394>
    f8e0:	cmp	x0, x2
    f8e4:	add	x26, sp, #0x140
    f8e8:	b.ne	f92c <mpc_sin_cos@@Base+0x48c>  // b.any
    f8ec:	ldr	w1, [sp, #328]
    f8f0:	mov	w21, #0x1                   	// #1
    f8f4:	ldr	w0, [sp, #360]
    f8f8:	mvn	w1, w1
    f8fc:	lsr	w0, w0, #31
    f900:	cmp	w0, w1, lsr #31
    f904:	ldr	w0, [sp, #104]
    f908:	cneg	w3, w21, ne  // ne = any
    f90c:	mov	x1, x26
    f910:	asr	w2, w0, #4
    f914:	mov	x0, x19
    f918:	bl	51d0 <mpfr_set4@plt>
    f91c:	mov	w1, w21
    f920:	mov	x0, x20
    f924:	bl	5120 <mpfr_set_inf@plt>
    f928:	b	f838 <mpc_sin_cos@@Base+0x398>
    f92c:	add	x22, sp, #0x120
    f930:	add	x24, sp, #0x100
    f934:	mov	x0, x22
    f938:	mov	x1, #0x2                   	// #2
    f93c:	bl	5440 <mpfr_init2@plt>
    f940:	mov	x0, x24
    f944:	mov	x1, #0x2                   	// #2
    f948:	bl	5440 <mpfr_init2@plt>
    f94c:	mov	x2, x26
    f950:	mov	x1, x22
    f954:	mov	x0, x24
    f958:	mov	w3, #0x0                   	// #0
    f95c:	bl	5520 <mpfr_sin_cos@plt>
    f960:	ldr	x0, [sp, #304]
    f964:	cmp	x0, x25
    f968:	b.ge	f980 <mpc_sin_cos@@Base+0x4e0>  // b.tcont
    f96c:	cmp	x0, x21
    f970:	b.ne	f978 <mpc_sin_cos@@Base+0x4d8>  // b.any
    f974:	bl	4b00 <mpfr_set_erangeflag@plt>
    f978:	mov	w1, #0x0                   	// #0
    f97c:	b	f984 <mpc_sin_cos@@Base+0x4e4>
    f980:	ldr	w1, [sp, #296]
    f984:	mov	x0, x20
    f988:	bl	5120 <mpfr_set_inf@plt>
    f98c:	ldr	x0, [sp, #368]
    f990:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    f994:	cmp	x0, x1
    f998:	b.ge	f9b8 <mpc_sin_cos@@Base+0x518>  // b.tcont
    f99c:	mov	x1, #0x2                   	// #2
    f9a0:	movk	x1, #0x8000, lsl #48
    f9a4:	cmp	x0, x1
    f9a8:	b.ne	f9b0 <mpc_sin_cos@@Base+0x510>  // b.any
    f9ac:	bl	4b00 <mpfr_set_erangeflag@plt>
    f9b0:	mov	w20, #0x0                   	// #0
    f9b4:	b	f9bc <mpc_sin_cos@@Base+0x51c>
    f9b8:	ldr	w20, [sp, #360]
    f9bc:	ldr	x0, [sp, #272]
    f9c0:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    f9c4:	cmp	x0, x1
    f9c8:	b.ge	f9e8 <mpc_sin_cos@@Base+0x548>  // b.tcont
    f9cc:	mov	x1, #0x2                   	// #2
    f9d0:	movk	x1, #0x8000, lsl #48
    f9d4:	cmp	x0, x1
    f9d8:	b.ne	f9e0 <mpc_sin_cos@@Base+0x540>  // b.any
    f9dc:	bl	4b00 <mpfr_set_erangeflag@plt>
    f9e0:	mov	w0, #0x0                   	// #0
    f9e4:	b	f9ec <mpc_sin_cos@@Base+0x54c>
    f9e8:	ldr	w0, [sp, #264]
    f9ec:	cmp	w20, w0
    f9f0:	mov	w1, #0x1                   	// #1
    f9f4:	cneg	w1, w1, eq  // eq = none
    f9f8:	mov	x0, x19
    f9fc:	bl	5120 <mpfr_set_inf@plt>
    fa00:	mov	x0, x24
    fa04:	bl	4d60 <mpfr_clear@plt>
    fa08:	mov	x0, x22
    fa0c:	bl	4d60 <mpfr_clear@plt>
    fa10:	b	f838 <mpc_sin_cos@@Base+0x398>
    fa14:	mov	x1, #0x2                   	// #2
    fa18:	b	f608 <mpc_sin_cos@@Base+0x168>
    fa1c:	mov	x1, #0x2                   	// #2
    fa20:	b	f61c <mpc_sin_cos@@Base+0x17c>
    fa24:	cmp	w2, w1
    fa28:	cneg	w1, w1, gt
    fa2c:	b	f680 <mpc_sin_cos@@Base+0x1e0>
    fa30:	mov	w22, #0x0                   	// #0
    fa34:	b	f684 <mpc_sin_cos@@Base+0x1e4>
    fa38:	cmp	w2, #0x0
    fa3c:	cneg	w1, w1, lt  // lt = tstop
    fa40:	b	f6b4 <mpc_sin_cos@@Base+0x214>
    fa44:	mov	w21, #0x0                   	// #0
    fa48:	b	f6b8 <mpc_sin_cos@@Base+0x218>
    fa4c:	ldr	x2, [x27, #16]
    fa50:	cmp	x2, x1
    fa54:	b.ne	fb80 <mpc_sin_cos@@Base+0x6e0>  // b.any
    fa58:	cmp	x27, x19
    fa5c:	cset	w23, eq  // eq = none
    fa60:	cmp	x27, x20
    fa64:	csinc	w23, w23, wzr, ne  // ne = any
    fa68:	cbz	w23, fb4c <mpc_sin_cos@@Base+0x6ac>
    fa6c:	ldr	x1, [x27]
    fa70:	add	x21, sp, #0x140
    fa74:	ldr	x2, [x27, #32]
    fa78:	mov	x0, x21
    fa7c:	bl	53c0 <mpc_init3@plt>
    fa80:	mov	x1, x27
    fa84:	mov	x0, x21
    fa88:	mov	w2, #0x0                   	// #0
    fa8c:	bl	5580 <mpc_set@plt>
    fa90:	cbz	x19, fb70 <mpc_sin_cos@@Base+0x6d0>
    fa94:	ldr	w3, [sp, #328]
    fa98:	add	x21, sp, #0x140
    fa9c:	mov	x1, x21
    faa0:	mov	w2, #0x0                   	// #0
    faa4:	mov	x0, x19
    faa8:	bl	51d0 <mpfr_set4@plt>
    faac:	add	x1, x21, #0x20
    fab0:	asr	w2, w22, #4
    fab4:	add	x0, x19, #0x20
    fab8:	bl	4f80 <mpfr_sinh@plt>
    fabc:	mov	w21, w0
    fac0:	cbz	x20, fb78 <mpc_sin_cos@@Base+0x6d8>
    fac4:	ldr	w0, [sp, #104]
    fac8:	add	x1, sp, #0x160
    facc:	and	w2, w0, #0xf
    fad0:	mov	x0, x20
    fad4:	bl	4a20 <mpfr_cosh@plt>
    fad8:	mov	w19, w0
    fadc:	add	x1, x20, #0x20
    fae0:	mov	w0, #0x1                   	// #1
    fae4:	ldr	w2, [sp, #328]
    fae8:	str	w0, [x1, #8]
    faec:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    faf0:	str	x0, [x1, #16]
    faf4:	mvn	w2, w2
    faf8:	ldr	w0, [sp, #360]
    fafc:	lsr	w0, w0, #31
    fb00:	cmp	w0, w2, lsr #31
    fb04:	b.eq	fb14 <mpc_sin_cos@@Base+0x674>  // b.none
    fb08:	mov	x0, x1
    fb0c:	mov	w2, #0x0                   	// #0
    fb10:	bl	4b80 <mpfr_neg@plt>
    fb14:	cbz	w23, fb20 <mpc_sin_cos@@Base+0x680>
    fb18:	add	x0, sp, #0x140
    fb1c:	bl	4a10 <mpc_clear@plt>
    fb20:	cmp	w21, #0x0
    fb24:	mov	w0, #0x4                   	// #4
    fb28:	csel	w0, w21, w0, eq  // eq = none
    fb2c:	mov	w21, #0x8                   	// #8
    fb30:	csel	w21, w0, w21, ge  // ge = tcont
    fb34:	cmp	w19, #0x0
    fb38:	mov	w1, #0x10                  	// #16
    fb3c:	csel	w1, w19, w1, eq  // eq = none
    fb40:	mov	w0, #0x20                  	// #32
    fb44:	csel	w19, w1, w0, ge  // ge = tcont
    fb48:	b	f6ec <mpc_sin_cos@@Base+0x24c>
    fb4c:	ldp	x0, x1, [x27]
    fb50:	stp	x0, x1, [sp, #320]
    fb54:	ldp	x0, x1, [x27, #16]
    fb58:	stp	x0, x1, [sp, #336]
    fb5c:	ldp	x0, x1, [x27, #32]
    fb60:	stp	x0, x1, [sp, #352]
    fb64:	ldp	x0, x1, [x27, #48]
    fb68:	stp	x0, x1, [sp, #368]
    fb6c:	b	fa90 <mpc_sin_cos@@Base+0x5f0>
    fb70:	mov	w21, #0x0                   	// #0
    fb74:	b	fac0 <mpc_sin_cos@@Base+0x620>
    fb78:	mov	w19, #0x0                   	// #0
    fb7c:	b	fb14 <mpc_sin_cos@@Base+0x674>
    fb80:	cbz	x19, ff20 <mpc_sin_cos@@Base+0xa80>
    fb84:	ldr	x1, [x19]
    fb88:	ldr	x21, [x19, #32]
    fb8c:	ldr	x3, [x27]
    fb90:	cmp	x21, x1
    fb94:	csel	x21, x21, x1, ge  // ge = tcont
    fb98:	mov	x1, #0x2                   	// #2
    fb9c:	cmp	x21, #0x2
    fba0:	csel	x21, x21, x1, ge  // ge = tcont
    fba4:	ldr	x1, [x27, #32]
    fba8:	cmp	x1, x3
    fbac:	csel	x1, x1, x3, ge  // ge = tcont
    fbb0:	cmp	x1, x21
    fbb4:	b.gt	fbdc <mpc_sin_cos@@Base+0x73c>
    fbb8:	cmp	x0, x2
    fbbc:	csel	x0, x0, x2, ge  // ge = tcont
    fbc0:	tbz	x0, #63, fbdc <mpc_sin_cos@@Base+0x73c>
    fbc4:	mov	x1, #0xfffffffffffffffe    	// #-2
    fbc8:	mul	x0, x0, x1
    fbcc:	add	x1, x0, #0x2
    fbd0:	cmp	x1, x21
    fbd4:	b.lt	fbdc <mpc_sin_cos@@Base+0x73c>  // b.tstop
    fbd8:	add	x21, x0, #0x3
    fbdc:	cbz	x20, fbf8 <mpc_sin_cos@@Base+0x758>
    fbe0:	ldr	x1, [x20]
    fbe4:	ldr	x0, [x20, #32]
    fbe8:	cmp	x0, x1
    fbec:	csel	x0, x0, x1, ge  // ge = tcont
    fbf0:	cmp	x21, x0
    fbf4:	csel	x21, x21, x0, ge  // ge = tcont
    fbf8:	add	x23, sp, #0xa0
    fbfc:	mov	x1, #0x2                   	// #2
    fc00:	mov	x0, x23
    fc04:	add	x24, sp, #0xc0
    fc08:	bl	5440 <mpfr_init2@plt>
    fc0c:	add	x28, sp, #0x100
    fc10:	mov	x0, x24
    fc14:	mov	x1, #0x2                   	// #2
    fc18:	bl	5440 <mpfr_init2@plt>
    fc1c:	add	x25, sp, #0x120
    fc20:	add	x0, sp, #0xe0
    fc24:	mov	x1, #0x2                   	// #2
    fc28:	str	x0, [sp, #96]
    fc2c:	bl	5440 <mpfr_init2@plt>
    fc30:	mov	x0, x28
    fc34:	mov	x1, #0x2                   	// #2
    fc38:	bl	5440 <mpfr_init2@plt>
    fc3c:	add	x26, sp, #0x140
    fc40:	mov	x0, x25
    fc44:	mov	x1, #0x2                   	// #2
    fc48:	bl	5440 <mpfr_init2@plt>
    fc4c:	mov	x0, x26
    fc50:	mov	x1, #0x2                   	// #2
    fc54:	bl	5440 <mpfr_init2@plt>
    fc58:	asr	w0, w22, #4
    fc5c:	stp	wzr, w0, [sp, #112]
    fc60:	cmp	w0, #0x0
    fc64:	cset	x0, eq  // eq = none
    fc68:	str	x0, [sp, #136]
    fc6c:	ldr	w0, [sp, #104]
    fc70:	asr	w0, w0, #4
    fc74:	str	w0, [sp, #108]
    fc78:	cmp	w0, #0x0
    fc7c:	cset	x0, eq  // eq = none
    fc80:	str	x0, [sp, #144]
    fc84:	and	w0, w22, #0xf
    fc88:	str	w0, [sp, #152]
    fc8c:	ldr	w0, [sp, #104]
    fc90:	and	w0, w0, #0xf
    fc94:	str	w0, [sp, #156]
    fc98:	ldr	w0, [sp, #112]
    fc9c:	add	w0, w0, #0x1
    fca0:	str	w0, [sp, #112]
    fca4:	cmp	w0, #0x2
    fca8:	b.gt	ff28 <mpc_sin_cos@@Base+0xa88>
    fcac:	mov	x0, x21
    fcb0:	bl	4d20 <mpc_ceil_log2@plt>
    fcb4:	add	x0, x0, #0x5
    fcb8:	add	x21, x21, x0
    fcbc:	mov	x0, x23
    fcc0:	mov	x1, x21
    fcc4:	bl	4c80 <mpfr_set_prec@plt>
    fcc8:	mov	x1, x21
    fccc:	mov	x0, x24
    fcd0:	bl	4c80 <mpfr_set_prec@plt>
    fcd4:	ldr	x0, [sp, #96]
    fcd8:	mov	x1, x21
    fcdc:	bl	4c80 <mpfr_set_prec@plt>
    fce0:	mov	x1, x21
    fce4:	mov	x0, x28
    fce8:	bl	4c80 <mpfr_set_prec@plt>
    fcec:	mov	x1, x21
    fcf0:	mov	x0, x25
    fcf4:	bl	4c80 <mpfr_set_prec@plt>
    fcf8:	mov	x1, x21
    fcfc:	mov	x0, x26
    fd00:	bl	4c80 <mpfr_set_prec@plt>
    fd04:	mov	x2, x27
    fd08:	mov	x1, x24
    fd0c:	mov	w3, #0x0                   	// #0
    fd10:	mov	x0, x23
    fd14:	bl	5520 <mpfr_sin_cos@plt>
    fd18:	ldr	x0, [sp, #96]
    fd1c:	mov	x1, x28
    fd20:	ldr	x2, [sp, #128]
    fd24:	mov	w3, #0x0                   	// #0
    fd28:	bl	4be0 <mpfr_sinh_cosh@plt>
    fd2c:	cbnz	x19, ff34 <mpc_sin_cos@@Base+0xa94>
    fd30:	mov	w0, #0x1                   	// #1
    fd34:	cmp	x20, #0x0
    fd38:	cset	w1, ne  // ne = any
    fd3c:	str	w1, [sp, #120]
    fd40:	and	w1, w0, #0x1
    fd44:	csel	w1, w1, wzr, ne  // ne = any
    fd48:	str	w1, [sp, #124]
    fd4c:	cbz	w1, 10020 <mpc_sin_cos@@Base+0xb80>
    fd50:	mov	x2, x28
    fd54:	mov	x1, x24
    fd58:	mov	w3, #0x0                   	// #0
    fd5c:	mov	x0, x24
    fd60:	bl	4b70 <mpfr_mul@plt>
    fd64:	mov	x0, x24
    fd68:	bl	54d0 <mpfr_number_p@plt>
    fd6c:	cbnz	w0, ffcc <mpc_sin_cos@@Base+0xb2c>
    fd70:	ldr	x2, [sp, #96]
    fd74:	mov	x1, x23
    fd78:	mov	w3, #0x0                   	// #0
    fd7c:	mov	x0, x23
    fd80:	bl	4b70 <mpfr_mul@plt>
    fd84:	mov	x1, x23
    fd88:	mov	w2, #0x0                   	// #0
    fd8c:	mov	x0, x23
    fd90:	bl	4b80 <mpfr_neg@plt>
    fd94:	mov	x0, x23
    fd98:	bl	54d0 <mpfr_number_p@plt>
    fd9c:	cbnz	w0, fff8 <mpc_sin_cos@@Base+0xb58>
    fda0:	cbz	x19, fe4c <mpc_sin_cos@@Base+0x9ac>
    fda4:	ldr	w0, [sp, #124]
    fda8:	str	w0, [sp, #120]
    fdac:	ldr	w3, [sp, #296]
    fdb0:	and	w22, w22, #0xf
    fdb4:	mov	x1, x25
    fdb8:	mov	w2, w22
    fdbc:	mov	x0, x19
    fdc0:	bl	51d0 <mpfr_set4@plt>
    fdc4:	mov	w21, w0
    fdc8:	ldr	x1, [sp, #304]
    fdcc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    fdd0:	cmp	x1, x0
    fdd4:	b.ne	fde8 <mpc_sin_cos@@Base+0x948>  // b.any
    fdd8:	mov	w1, w22
    fddc:	mov	x0, x19
    fde0:	bl	4dd0 <mpc_fix_inf@plt>
    fde4:	mov	w21, w0
    fde8:	ldr	w2, [sp, #116]
    fdec:	add	x19, x19, #0x20
    fdf0:	ldr	w3, [sp, #328]
    fdf4:	mov	x1, x26
    fdf8:	mov	x0, x19
    fdfc:	bl	51d0 <mpfr_set4@plt>
    fe00:	ldr	x2, [sp, #336]
    fe04:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    fe08:	cmp	x2, x1
    fe0c:	b.ne	fe1c <mpc_sin_cos@@Base+0x97c>  // b.any
    fe10:	ldr	w1, [sp, #116]
    fe14:	mov	x0, x19
    fe18:	bl	4dd0 <mpc_fix_inf@plt>
    fe1c:	cmp	w21, #0x0
    fe20:	mov	w1, #0x2                   	// #2
    fe24:	cset	w19, ne  // ne = any
    fe28:	csel	w19, w19, w1, ge  // ge = tcont
    fe2c:	cmp	w0, #0x0
    fe30:	mov	w1, #0x4                   	// #4
    fe34:	csel	w1, w0, w1, eq  // eq = none
    fe38:	mov	w0, #0x8                   	// #8
    fe3c:	csel	w0, w1, w0, ge  // ge = tcont
    fe40:	orr	w19, w19, w0
    fe44:	ldr	w0, [sp, #120]
    fe48:	cbz	w0, 10030 <mpc_sin_cos@@Base+0xb90>
    fe4c:	ldr	w3, [sp, #200]
    fe50:	mov	x1, x24
    fe54:	ldr	w0, [sp, #104]
    fe58:	and	w21, w0, #0xf
    fe5c:	mov	x0, x20
    fe60:	mov	w2, w21
    fe64:	bl	51d0 <mpfr_set4@plt>
    fe68:	ldr	x1, [sp, #208]
    fe6c:	mov	w22, w0
    fe70:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    fe74:	cmp	x1, x0
    fe78:	b.ne	fe8c <mpc_sin_cos@@Base+0x9ec>  // b.any
    fe7c:	mov	w1, w21
    fe80:	mov	x0, x20
    fe84:	bl	4dd0 <mpc_fix_inf@plt>
    fe88:	mov	w22, w0
    fe8c:	ldr	w2, [sp, #108]
    fe90:	add	x20, x20, #0x20
    fe94:	ldr	w3, [sp, #168]
    fe98:	mov	x1, x23
    fe9c:	mov	x0, x20
    fea0:	bl	51d0 <mpfr_set4@plt>
    fea4:	ldr	x2, [sp, #176]
    fea8:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
    feac:	cmp	x2, x1
    feb0:	b.ne	fec0 <mpc_sin_cos@@Base+0xa20>  // b.any
    feb4:	ldr	w1, [sp, #108]
    feb8:	mov	x0, x20
    febc:	bl	4dd0 <mpc_fix_inf@plt>
    fec0:	cmp	w22, #0x0
    fec4:	mov	w1, #0x2                   	// #2
    fec8:	cset	w21, ne  // ne = any
    fecc:	csel	w21, w21, w1, ge  // ge = tcont
    fed0:	cmp	w0, #0x0
    fed4:	mov	w1, #0x4                   	// #4
    fed8:	csel	w1, w0, w1, eq  // eq = none
    fedc:	mov	w0, #0x8                   	// #8
    fee0:	csel	w0, w1, w0, ge  // ge = tcont
    fee4:	orr	w21, w21, w0
    fee8:	mov	x0, x23
    feec:	bl	4d60 <mpfr_clear@plt>
    fef0:	mov	x0, x24
    fef4:	bl	4d60 <mpfr_clear@plt>
    fef8:	ldr	x0, [sp, #96]
    fefc:	bl	4d60 <mpfr_clear@plt>
    ff00:	mov	x0, x28
    ff04:	bl	4d60 <mpfr_clear@plt>
    ff08:	mov	x0, x25
    ff0c:	bl	4d60 <mpfr_clear@plt>
    ff10:	mov	x0, x26
    ff14:	bl	4d60 <mpfr_clear@plt>
    ff18:	orr	w0, w19, w21, lsl #4
    ff1c:	b	f848 <mpc_sin_cos@@Base+0x3a8>
    ff20:	mov	x21, #0x2                   	// #2
    ff24:	b	fbdc <mpc_sin_cos@@Base+0x73c>
    ff28:	mov	x0, #0x2                   	// #2
    ff2c:	sdiv	x0, x21, x0
    ff30:	b	fcb8 <mpc_sin_cos@@Base+0x818>
    ff34:	mov	x2, x28
    ff38:	mov	x1, x23
    ff3c:	mov	w3, #0x0                   	// #0
    ff40:	mov	x0, x25
    ff44:	bl	4b70 <mpfr_mul@plt>
    ff48:	mov	x0, x25
    ff4c:	bl	54d0 <mpfr_number_p@plt>
    ff50:	cbnz	w0, ffa0 <mpc_sin_cos@@Base+0xb00>
    ff54:	ldr	x2, [sp, #96]
    ff58:	mov	x1, x24
    ff5c:	mov	w3, #0x0                   	// #0
    ff60:	mov	x0, x26
    ff64:	bl	4b70 <mpfr_mul@plt>
    ff68:	mov	x0, x26
    ff6c:	bl	54d0 <mpfr_number_p@plt>
    ff70:	cbz	w0, fd30 <mpc_sin_cos@@Base+0x890>
    ff74:	ldr	x4, [x19, #32]
    ff78:	sub	x1, x21, #0x2
    ff7c:	ldr	x0, [sp, #136]
    ff80:	mov	w3, #0x1                   	// #1
    ff84:	mov	w2, #0x0                   	// #0
    ff88:	add	x4, x0, x4
    ff8c:	mov	x0, x26
    ff90:	bl	5450 <mpfr_can_round@plt>
    ff94:	cmp	w0, #0x0
    ff98:	cset	w0, ne  // ne = any
    ff9c:	b	fd34 <mpc_sin_cos@@Base+0x894>
    ffa0:	ldr	w0, [sp, #152]
    ffa4:	sub	x1, x21, #0x2
    ffa8:	ldr	x4, [x19]
    ffac:	cmp	w0, #0x0
    ffb0:	mov	w3, #0x1                   	// #1
    ffb4:	mov	x0, x25
    ffb8:	cinc	x4, x4, eq  // eq = none
    ffbc:	mov	w2, #0x0                   	// #0
    ffc0:	bl	5450 <mpfr_can_round@plt>
    ffc4:	cbnz	w0, ff54 <mpc_sin_cos@@Base+0xab4>
    ffc8:	b	fd34 <mpc_sin_cos@@Base+0x894>
    ffcc:	ldr	w0, [sp, #156]
    ffd0:	sub	x1, x21, #0x2
    ffd4:	ldr	x4, [x20]
    ffd8:	cmp	w0, #0x0
    ffdc:	mov	w3, #0x1                   	// #1
    ffe0:	mov	x0, x24
    ffe4:	cinc	x4, x4, eq  // eq = none
    ffe8:	mov	w2, #0x0                   	// #0
    ffec:	bl	5450 <mpfr_can_round@plt>
    fff0:	cbnz	w0, fd70 <mpc_sin_cos@@Base+0x8d0>
    fff4:	b	fc98 <mpc_sin_cos@@Base+0x7f8>
    fff8:	ldr	x4, [x20, #32]
    fffc:	sub	x1, x21, #0x2
   10000:	ldr	x0, [sp, #144]
   10004:	mov	w3, #0x1                   	// #1
   10008:	mov	w2, #0x0                   	// #0
   1000c:	add	x4, x0, x4
   10010:	mov	x0, x23
   10014:	bl	5450 <mpfr_can_round@plt>
   10018:	cbz	w0, fc98 <mpc_sin_cos@@Base+0x7f8>
   1001c:	b	fda0 <mpc_sin_cos@@Base+0x900>
   10020:	cbz	w0, fc98 <mpc_sin_cos@@Base+0x7f8>
   10024:	cbnz	x19, fdac <mpc_sin_cos@@Base+0x90c>
   10028:	mov	w19, #0x0                   	// #0
   1002c:	b	fe44 <mpc_sin_cos@@Base+0x9a4>
   10030:	mov	w21, #0x0                   	// #0
   10034:	b	fee8 <mpc_sin_cos@@Base+0xa48>

0000000000010038 <mpc_sinh@@Base>:
   10038:	stp	x29, x30, [sp, #-160]!
   1003c:	mov	x29, sp
   10040:	stp	x19, x20, [sp, #16]
   10044:	mov	x19, x0
   10048:	ldp	x4, x5, [x1, #32]
   1004c:	stp	x4, x5, [sp, #32]
   10050:	ldp	x4, x5, [x1, #48]
   10054:	stp	x4, x5, [sp, #48]
   10058:	ldp	x4, x5, [x1]
   1005c:	stp	x4, x5, [sp, #64]
   10060:	ldp	x0, x1, [x1, #16]
   10064:	stp	x0, x1, [sp, #80]
   10068:	ldp	x0, x1, [x19, #32]
   1006c:	stp	x0, x1, [sp, #96]
   10070:	ldp	x0, x1, [x19, #48]
   10074:	stp	x0, x1, [sp, #112]
   10078:	ldp	x0, x1, [x19]
   1007c:	stp	x0, x1, [sp, #128]
   10080:	ldp	x0, x1, [x19, #16]
   10084:	stp	x0, x1, [sp, #144]
   10088:	ubfiz	w0, w2, #4, #4
   1008c:	add	x1, sp, #0x20
   10090:	add	w2, w0, w2, asr #4
   10094:	add	x0, sp, #0x60
   10098:	bl	4f50 <mpc_sin@plt>
   1009c:	asr	w1, w0, #2
   100a0:	ldp	x2, x3, [sp, #128]
   100a4:	stp	x2, x3, [x19]
   100a8:	cmp	w1, #0x2
   100ac:	ldp	x2, x3, [sp, #144]
   100b0:	stp	x2, x3, [x19, #16]
   100b4:	ldp	x2, x3, [sp, #96]
   100b8:	stp	x2, x3, [x19, #32]
   100bc:	ldp	x2, x3, [sp, #112]
   100c0:	stp	x2, x3, [x19, #48]
   100c4:	b.eq	100d0 <mpc_sinh@@Base+0x98>  // b.none
   100c8:	cmp	w1, #0x0
   100cc:	cset	w1, ne  // ne = any
   100d0:	and	w0, w0, #0x3
   100d4:	cmp	w0, #0x2
   100d8:	b.eq	100f8 <mpc_sinh@@Base+0xc0>  // b.none
   100dc:	cmp	w0, #0x0
   100e0:	mov	w2, #0x4                   	// #4
   100e4:	csel	w0, w0, w2, eq  // eq = none
   100e8:	orr	w0, w1, w0
   100ec:	ldp	x19, x20, [sp, #16]
   100f0:	ldp	x29, x30, [sp], #160
   100f4:	ret
   100f8:	mov	w0, #0x8                   	// #8
   100fc:	b	100e8 <mpc_sinh@@Base+0xb0>
   10100:	stp	x29, x30, [sp, #-208]!
   10104:	mov	x29, sp
   10108:	stp	x25, x26, [sp, #64]
   1010c:	mov	x25, x1
   10110:	mov	w26, w3
   10114:	ldr	x1, [x1]
   10118:	stp	x23, x24, [sp, #48]
   1011c:	mov	x24, x2
   10120:	stp	x21, x22, [sp, #32]
   10124:	add	x22, sp, #0x90
   10128:	mov	x23, x0
   1012c:	lsl	x1, x1, #1
   10130:	mov	x0, x22
   10134:	stp	x19, x20, [sp, #16]
   10138:	add	x21, sp, #0xb0
   1013c:	stp	x27, x28, [sp, #80]
   10140:	bl	5440 <mpfr_init2@plt>
   10144:	mov	x0, x21
   10148:	ldr	x1, [x24]
   1014c:	lsl	x1, x1, #1
   10150:	bl	5440 <mpfr_init2@plt>
   10154:	mov	x1, x25
   10158:	mov	w2, #0x0                   	// #0
   1015c:	mov	x0, x22
   10160:	bl	5010 <mpfr_sqr@plt>
   10164:	mov	x1, x24
   10168:	mov	w2, #0x0                   	// #0
   1016c:	mov	x0, x21
   10170:	bl	5010 <mpfr_sqr@plt>
   10174:	mov	x1, x22
   10178:	mov	w3, w26
   1017c:	mov	x2, x21
   10180:	mov	x0, x23
   10184:	bl	4a60 <mpfr_sub@plt>
   10188:	mov	w27, w0
   1018c:	ldr	x0, [x23, #16]
   10190:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   10194:	cmp	x0, x1
   10198:	b.ne	10208 <mpc_sinh@@Base+0x1d0>  // b.any
   1019c:	ldr	w0, [x23, #8]
   101a0:	mov	x1, #0x1                   	// #1
   101a4:	mov	w3, #0x0                   	// #0
   101a8:	mov	x2, #0x0                   	// #0
   101ac:	cmp	w0, #0x0
   101b0:	mov	x0, x23
   101b4:	cneg	x1, x1, lt  // lt = tstop
   101b8:	bl	49e0 <mpfr_set_si_2exp@plt>
   101bc:	bl	5200 <mpfr_get_emax@plt>
   101c0:	mov	x2, x0
   101c4:	mov	w3, w26
   101c8:	mov	x1, x23
   101cc:	mov	x0, x23
   101d0:	bl	4f40 <mpfr_mul_2ui@plt>
   101d4:	mov	w27, w0
   101d8:	mov	x0, x22
   101dc:	bl	4d60 <mpfr_clear@plt>
   101e0:	mov	x0, x21
   101e4:	bl	4d60 <mpfr_clear@plt>
   101e8:	mov	w0, w27
   101ec:	ldp	x19, x20, [sp, #16]
   101f0:	ldp	x21, x22, [sp, #32]
   101f4:	ldp	x23, x24, [sp, #48]
   101f8:	ldp	x25, x26, [sp, #64]
   101fc:	ldp	x27, x28, [sp, #80]
   10200:	ldp	x29, x30, [sp], #208
   10204:	ret
   10208:	ldr	x3, [sp, #160]
   1020c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   10210:	ldr	x2, [sp, #192]
   10214:	cmp	x3, x1
   10218:	b.ne	10238 <mpc_sinh@@Base+0x200>  // b.any
   1021c:	cmp	x2, x3
   10220:	b.eq	10260 <mpc_sinh@@Base+0x228>  // b.none
   10224:	ldr	w1, [sp, #152]
   10228:	mov	w0, #0x1                   	// #1
   1022c:	cmn	w1, #0x1
   10230:	cneg	w27, w0, gt
   10234:	b	101d8 <mpc_sinh@@Base+0x1a0>
   10238:	cmp	x2, x1
   1023c:	b.ne	10250 <mpc_sinh@@Base+0x218>  // b.any
   10240:	ldr	w1, [sp, #184]
   10244:	mov	w0, #0xffffffff            	// #-1
   10248:	cmp	w1, w0
   1024c:	b	10230 <mpc_sinh@@Base+0x1f8>
   10250:	mov	x1, #0x2                   	// #2
   10254:	movk	x1, #0x8000, lsl #48
   10258:	cmp	x0, x1
   1025c:	b.ne	101d8 <mpc_sinh@@Base+0x1a0>  // b.any
   10260:	ldr	x0, [x24, #16]
   10264:	mov	x1, #0x0                   	// #0
   10268:	str	x0, [sp, #96]
   1026c:	mov	x0, x25
   10270:	ldr	x28, [x25, #16]
   10274:	bl	4c10 <mpfr_set_exp@plt>
   10278:	mov	x1, #0x0                   	// #0
   1027c:	add	x20, sp, #0x70
   10280:	mov	x0, x24
   10284:	bl	4c10 <mpfr_set_exp@plt>
   10288:	add	x19, sp, #0x80
   1028c:	mov	x0, x20
   10290:	bl	54a0 <__gmpz_init@plt>
   10294:	mov	x0, x19
   10298:	bl	54a0 <__gmpz_init@plt>
   1029c:	mov	x1, x28
   102a0:	mov	x0, x20
   102a4:	bl	54c0 <__gmpz_set_si@plt>
   102a8:	mov	x2, #0x1                   	// #1
   102ac:	mov	x1, x20
   102b0:	mov	x0, x20
   102b4:	bl	4e90 <__gmpz_mul_2exp@plt>
   102b8:	ldr	x1, [sp, #96]
   102bc:	mov	x0, x19
   102c0:	bl	54c0 <__gmpz_set_si@plt>
   102c4:	mov	x1, x19
   102c8:	mov	x0, x19
   102cc:	mov	x2, #0x1                   	// #1
   102d0:	bl	4e90 <__gmpz_mul_2exp@plt>
   102d4:	mov	x1, x25
   102d8:	mov	w2, #0x0                   	// #0
   102dc:	mov	x0, x22
   102e0:	bl	5010 <mpfr_sqr@plt>
   102e4:	ldr	x2, [sp, #160]
   102e8:	mov	x1, x20
   102ec:	mov	x0, x20
   102f0:	neg	x2, x2
   102f4:	bl	4ad0 <__gmpz_sub_ui@plt>
   102f8:	mov	x1, #0x0                   	// #0
   102fc:	mov	x0, x22
   10300:	bl	4c10 <mpfr_set_exp@plt>
   10304:	mov	x1, x24
   10308:	mov	w2, #0x0                   	// #0
   1030c:	mov	x0, x21
   10310:	bl	5010 <mpfr_sqr@plt>
   10314:	ldr	x2, [sp, #192]
   10318:	mov	x1, x19
   1031c:	mov	x0, x19
   10320:	neg	x2, x2
   10324:	bl	4ad0 <__gmpz_sub_ui@plt>
   10328:	mov	x1, #0x0                   	// #0
   1032c:	mov	x0, x21
   10330:	bl	4c10 <mpfr_set_exp@plt>
   10334:	ldr	x1, [x23, #16]
   10338:	mov	x0, #0x2                   	// #2
   1033c:	movk	x0, #0x8000, lsl #48
   10340:	cmp	x1, x0
   10344:	b.ne	1046c <mpc_sinh@@Base+0x434>  // b.any
   10348:	bl	5200 <mpfr_get_emax@plt>
   1034c:	mov	x27, x0
   10350:	mov	x1, x19
   10354:	mov	x0, x20
   10358:	bl	5300 <__gmpz_cmp@plt>
   1035c:	mov	x1, x27
   10360:	tbnz	w0, #31, 10418 <mpc_sinh@@Base+0x3e0>
   10364:	mov	x0, x22
   10368:	bl	4c10 <mpfr_set_exp@plt>
   1036c:	mov	x2, x27
   10370:	mov	x1, x20
   10374:	mov	x0, x20
   10378:	bl	4ad0 <__gmpz_sub_ui@plt>
   1037c:	mov	x1, x19
   10380:	mov	x0, x19
   10384:	mov	x2, x20
   10388:	bl	4bc0 <__gmpz_sub@plt>
   1038c:	ldr	x0, [sp, #136]
   10390:	ldr	x1, [x0]
   10394:	ldr	w0, [sp, #132]
   10398:	cmp	w0, #0x0
   1039c:	mov	x0, x21
   103a0:	csel	x1, x1, xzr, ne  // ne = any
   103a4:	bl	4c10 <mpfr_set_exp@plt>
   103a8:	mov	w3, w26
   103ac:	mov	x2, x21
   103b0:	mov	x1, x22
   103b4:	mov	x0, x23
   103b8:	bl	4a60 <mpfr_sub@plt>
   103bc:	mov	w27, w0
   103c0:	ldr	x0, [sp, #120]
   103c4:	mov	w3, w26
   103c8:	mov	x1, x23
   103cc:	ldr	x2, [x0]
   103d0:	ldr	w0, [sp, #116]
   103d4:	cmp	w0, #0x0
   103d8:	mov	x0, x23
   103dc:	csel	x2, x2, xzr, ne  // ne = any
   103e0:	bl	4f40 <mpfr_mul_2ui@plt>
   103e4:	cmp	w0, #0x0
   103e8:	csel	w27, w27, w0, eq  // eq = none
   103ec:	mov	x0, x20
   103f0:	bl	5180 <__gmpz_clear@plt>
   103f4:	mov	x0, x19
   103f8:	bl	5180 <__gmpz_clear@plt>
   103fc:	mov	x1, x28
   10400:	mov	x0, x25
   10404:	bl	4c10 <mpfr_set_exp@plt>
   10408:	ldr	x1, [sp, #96]
   1040c:	mov	x0, x24
   10410:	bl	4c10 <mpfr_set_exp@plt>
   10414:	b	101d8 <mpc_sinh@@Base+0x1a0>
   10418:	mov	x0, x21
   1041c:	bl	4c10 <mpfr_set_exp@plt>
   10420:	mov	x2, x27
   10424:	mov	x1, x19
   10428:	mov	x0, x19
   1042c:	bl	4ad0 <__gmpz_sub_ui@plt>
   10430:	mov	x2, x19
   10434:	mov	x1, x20
   10438:	mov	x0, x20
   1043c:	bl	4bc0 <__gmpz_sub@plt>
   10440:	ldr	x0, [sp, #120]
   10444:	ldr	x1, [x0]
   10448:	ldr	w0, [sp, #116]
   1044c:	cmp	w0, #0x0
   10450:	mov	x0, x22
   10454:	csel	x1, x1, xzr, ne  // ne = any
   10458:	bl	4c10 <mpfr_set_exp@plt>
   1045c:	mov	x1, x19
   10460:	mov	x0, x20
   10464:	bl	4d00 <__gmpz_set@plt>
   10468:	b	103a8 <mpc_sinh@@Base+0x370>
   1046c:	bl	5060 <mpfr_get_emin@plt>
   10470:	mov	x3, x0
   10474:	mov	x1, x19
   10478:	mov	x0, x20
   1047c:	str	x3, [sp, #104]
   10480:	bl	5300 <__gmpz_cmp@plt>
   10484:	cmp	w0, #0x0
   10488:	ldr	x3, [sp, #104]
   1048c:	neg	x27, x3
   10490:	mov	x1, x3
   10494:	b.gt	1051c <mpc_sinh@@Base+0x4e4>
   10498:	mov	x0, x22
   1049c:	bl	4c10 <mpfr_set_exp@plt>
   104a0:	mov	x2, x27
   104a4:	mov	x1, x20
   104a8:	mov	x0, x20
   104ac:	bl	4fa0 <__gmpz_add_ui@plt>
   104b0:	mov	x1, x19
   104b4:	mov	x2, x20
   104b8:	mov	x0, x19
   104bc:	bl	4bc0 <__gmpz_sub@plt>
   104c0:	mov	x0, x19
   104c4:	bl	49a0 <__gmpz_get_si@plt>
   104c8:	mov	x1, x0
   104cc:	mov	x0, x21
   104d0:	bl	4c10 <mpfr_set_exp@plt>
   104d4:	mov	w3, w26
   104d8:	mov	x2, x21
   104dc:	mov	x1, x22
   104e0:	mov	x0, x23
   104e4:	bl	4a60 <mpfr_sub@plt>
   104e8:	mov	w27, w0
   104ec:	ldr	w0, [sp, #116]
   104f0:	mov	w3, w26
   104f4:	neg	w1, w0
   104f8:	str	w1, [sp, #116]
   104fc:	ldr	x1, [sp, #120]
   10500:	cmp	w0, #0x0
   10504:	mov	x0, x23
   10508:	ldr	x2, [x1]
   1050c:	mov	x1, x23
   10510:	csel	x2, x2, xzr, ne  // ne = any
   10514:	bl	5320 <mpfr_div_2ui@plt>
   10518:	b	103e4 <mpc_sinh@@Base+0x3ac>
   1051c:	mov	x0, x21
   10520:	bl	4c10 <mpfr_set_exp@plt>
   10524:	mov	x2, x27
   10528:	mov	x1, x19
   1052c:	mov	x0, x19
   10530:	bl	4fa0 <__gmpz_add_ui@plt>
   10534:	mov	x2, x19
   10538:	mov	x1, x20
   1053c:	mov	x0, x20
   10540:	bl	4bc0 <__gmpz_sub@plt>
   10544:	mov	x0, x20
   10548:	bl	49a0 <__gmpz_get_si@plt>
   1054c:	mov	x1, x0
   10550:	mov	x0, x22
   10554:	bl	4c10 <mpfr_set_exp@plt>
   10558:	mov	x1, x19
   1055c:	mov	x0, x20
   10560:	bl	4d00 <__gmpz_set@plt>
   10564:	b	104d4 <mpc_sinh@@Base+0x49c>

0000000000010568 <mpc_sqr@@Base>:
   10568:	stp	x29, x30, [sp, #-208]!
   1056c:	mov	x29, sp
   10570:	stp	x19, x20, [sp, #16]
   10574:	mov	x19, x0
   10578:	mov	w20, w2
   1057c:	mov	x0, x1
   10580:	stp	x21, x22, [sp, #32]
   10584:	stp	x23, x24, [sp, #48]
   10588:	stp	x25, x26, [sp, #64]
   1058c:	stp	x27, x28, [sp, #80]
   10590:	mov	x28, x1
   10594:	bl	54d0 <mpfr_number_p@plt>
   10598:	cbnz	w0, 105e4 <mpc_sqr@@Base+0x7c>
   1059c:	ldr	x0, [x28, #16]
   105a0:	mov	x2, #0x2                   	// #2
   105a4:	movk	x2, #0x8000, lsl #48
   105a8:	add	x20, x19, #0x20
   105ac:	cmp	x0, x2
   105b0:	b.ne	10660 <mpc_sqr@@Base+0xf8>  // b.any
   105b4:	mov	x0, x19
   105b8:	bl	4a40 <mpfr_set_nan@plt>
   105bc:	mov	x0, x20
   105c0:	bl	4a40 <mpfr_set_nan@plt>
   105c4:	mov	w0, #0x0                   	// #0
   105c8:	ldp	x19, x20, [sp, #16]
   105cc:	ldp	x21, x22, [sp, #32]
   105d0:	ldp	x23, x24, [sp, #48]
   105d4:	ldp	x25, x26, [sp, #64]
   105d8:	ldp	x27, x28, [sp, #80]
   105dc:	ldp	x29, x30, [sp], #208
   105e0:	ret
   105e4:	add	x25, x28, #0x20
   105e8:	mov	x0, x25
   105ec:	bl	54d0 <mpfr_number_p@plt>
   105f0:	cbz	w0, 1059c <mpc_sqr@@Base+0x34>
   105f4:	ldr	x23, [x28, #48]
   105f8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   105fc:	cmp	x23, x0
   10600:	b.ne	1070c <mpc_sqr@@Base+0x1a4>  // b.any
   10604:	ldr	w21, [x28, #8]
   10608:	and	w2, w20, #0xf
   1060c:	ldr	w22, [x28, #40]
   10610:	mov	x1, x28
   10614:	mov	x0, x19
   10618:	mvn	w21, w21
   1061c:	bl	5010 <mpfr_sqr@plt>
   10620:	mov	w20, w0
   10624:	mov	w0, #0x1                   	// #1
   10628:	str	w0, [x19, #40]
   1062c:	str	x23, [x19, #48]
   10630:	lsr	w21, w21, #31
   10634:	lsr	w22, w22, #31
   10638:	cmp	w21, w22
   1063c:	b.ne	10650 <mpc_sqr@@Base+0xe8>  // b.any
   10640:	mov	x1, x19
   10644:	mov	x0, x19
   10648:	mov	w2, #0x0                   	// #0
   1064c:	bl	4f60 <mpc_conj@plt>
   10650:	cmp	w20, #0x0
   10654:	b.ge	10794 <mpc_sqr@@Base+0x22c>  // b.tcont
   10658:	mov	w0, #0x2                   	// #2
   1065c:	b	105c8 <mpc_sqr@@Base+0x60>
   10660:	ldr	x1, [x28, #48]
   10664:	cmp	x1, x2
   10668:	b.eq	105b4 <mpc_sqr@@Base+0x4c>  // b.none
   1066c:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
   10670:	cmp	x0, x2
   10674:	b.ne	106d8 <mpc_sqr@@Base+0x170>  // b.any
   10678:	cmp	x1, x0
   1067c:	b.ne	1069c <mpc_sqr@@Base+0x134>  // b.any
   10680:	ldr	w0, [x28, #40]
   10684:	ldr	w1, [x28, #8]
   10688:	mul	w1, w1, w0
   1068c:	mov	x0, x20
   10690:	bl	5120 <mpfr_set_inf@plt>
   10694:	mov	x0, x19
   10698:	b	105c0 <mpc_sqr@@Base+0x58>
   1069c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   106a0:	cmp	x1, x0
   106a4:	b.ne	106c0 <mpc_sqr@@Base+0x158>  // b.any
   106a8:	mov	x0, x20
   106ac:	bl	4a40 <mpfr_set_nan@plt>
   106b0:	mov	w1, #0x1                   	// #1
   106b4:	mov	x0, x19
   106b8:	bl	5120 <mpfr_set_inf@plt>
   106bc:	b	105c4 <mpc_sqr@@Base+0x5c>
   106c0:	ldr	w0, [x28, #40]
   106c4:	ldr	w1, [x28, #8]
   106c8:	mul	w1, w1, w0
   106cc:	mov	x0, x20
   106d0:	bl	5120 <mpfr_set_inf@plt>
   106d4:	b	106b0 <mpc_sqr@@Base+0x148>
   106d8:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   106dc:	cmp	x0, x1
   106e0:	b.ne	106f4 <mpc_sqr@@Base+0x18c>  // b.any
   106e4:	mov	x0, x20
   106e8:	bl	4a40 <mpfr_set_nan@plt>
   106ec:	mov	w1, #0xffffffff            	// #-1
   106f0:	b	106b4 <mpc_sqr@@Base+0x14c>
   106f4:	ldr	w0, [x28, #40]
   106f8:	ldr	w1, [x28, #8]
   106fc:	mul	w1, w1, w0
   10700:	mov	x0, x20
   10704:	bl	5120 <mpfr_set_inf@plt>
   10708:	b	106ec <mpc_sqr@@Base+0x184>
   1070c:	ldr	x1, [x28, #16]
   10710:	cmp	x1, x0
   10714:	b.ne	107a4 <mpc_sqr@@Base+0x23c>  // b.any
   10718:	ldr	w21, [x28, #8]
   1071c:	and	w2, w20, #0xf
   10720:	ldr	w22, [x28, #40]
   10724:	cmp	w2, #0x2
   10728:	mvn	w21, w21
   1072c:	lsr	w22, w22, #31
   10730:	lsr	w21, w21, #31
   10734:	b.eq	1079c <mpc_sqr@@Base+0x234>  // b.none
   10738:	cmp	w2, #0x3
   1073c:	mov	w0, #0x2                   	// #2
   10740:	csel	w2, w2, w0, ne  // ne = any
   10744:	mov	x1, x25
   10748:	mov	x0, x19
   1074c:	bl	5010 <mpfr_sqr@plt>
   10750:	mov	w20, w0
   10754:	mov	x1, x19
   10758:	mov	x0, x19
   1075c:	mov	w2, #0x0                   	// #0
   10760:	bl	4b80 <mpfr_neg@plt>
   10764:	mov	w0, #0x1                   	// #1
   10768:	str	w0, [x19, #40]
   1076c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10770:	str	x0, [x19, #48]
   10774:	cmp	w21, w22
   10778:	b.ne	1078c <mpc_sqr@@Base+0x224>  // b.any
   1077c:	mov	x1, x19
   10780:	mov	x0, x19
   10784:	mov	w2, #0x0                   	// #0
   10788:	bl	4f60 <mpc_conj@plt>
   1078c:	cmp	w20, #0x0
   10790:	b.gt	10658 <mpc_sqr@@Base+0xf0>
   10794:	cset	w0, ne  // ne = any
   10798:	b	105c8 <mpc_sqr@@Base+0x60>
   1079c:	mov	w2, #0x3                   	// #3
   107a0:	b	10744 <mpc_sqr@@Base+0x1dc>
   107a4:	cmp	x28, x19
   107a8:	add	x22, sp, #0xb0
   107ac:	ldr	x21, [x19]
   107b0:	ldr	x23, [x19, #32]
   107b4:	b.ne	108b0 <mpc_sqr@@Base+0x348>  // b.any
   107b8:	mov	x1, x21
   107bc:	mov	x0, x22
   107c0:	bl	5440 <mpfr_init2@plt>
   107c4:	ldr	w3, [x28, #8]
   107c8:	mov	x1, x28
   107cc:	mov	x0, x22
   107d0:	mov	w2, #0x0                   	// #0
   107d4:	bl	51d0 <mpfr_set4@plt>
   107d8:	ldr	x0, [x28, #16]
   107dc:	ldr	x1, [x28, #48]
   107e0:	ldr	x2, [x28]
   107e4:	subs	x0, x0, x1
   107e8:	ldr	x1, [x28, #32]
   107ec:	cneg	x0, x0, mi  // mi = first
   107f0:	cmp	x1, x2
   107f4:	csel	x1, x1, x2, ge  // ge = tcont
   107f8:	mov	x2, #0x2                   	// #2
   107fc:	sdiv	x1, x1, x2
   10800:	cmp	x0, x1
   10804:	b.le	108c4 <mpc_sqr@@Base+0x35c>
   10808:	and	w3, w20, #0xf
   1080c:	mov	x2, x25
   10810:	mov	x1, x22
   10814:	mov	x0, x19
   10818:	bl	10100 <mpc_sinh@@Base+0xc8>
   1081c:	mov	w21, w0
   10820:	bl	52f0 <mpfr_underflow_p@plt>
   10824:	asr	w20, w20, #4
   10828:	mov	w24, w0
   1082c:	bl	4e20 <mpfr_clear_underflow@plt>
   10830:	mov	w3, w20
   10834:	mov	x2, x25
   10838:	mov	x1, x22
   1083c:	add	x26, x19, #0x20
   10840:	mov	x0, x26
   10844:	bl	4b70 <mpfr_mul@plt>
   10848:	mov	w23, w0
   1084c:	bl	52f0 <mpfr_underflow_p@plt>
   10850:	cbnz	w0, 1086c <mpc_sqr@@Base+0x304>
   10854:	mov	w3, w20
   10858:	mov	x1, x26
   1085c:	mov	x0, x26
   10860:	mov	x2, #0x1                   	// #1
   10864:	bl	4f40 <mpfr_mul_2ui@plt>
   10868:	orr	w23, w23, w0
   1086c:	cbz	w24, 10874 <mpc_sqr@@Base+0x30c>
   10870:	bl	4990 <mpfr_set_underflow@plt>
   10874:	cmp	x28, x19
   10878:	b.ne	10884 <mpc_sqr@@Base+0x31c>  // b.any
   1087c:	mov	x0, x22
   10880:	bl	4d60 <mpfr_clear@plt>
   10884:	cmp	w21, #0x0
   10888:	mov	w0, #0x2                   	// #2
   1088c:	cset	w1, ne  // ne = any
   10890:	mov	w2, #0x4                   	// #4
   10894:	csel	w1, w1, w0, ge  // ge = tcont
   10898:	cmp	w23, #0x0
   1089c:	csel	w2, w23, w2, eq  // eq = none
   108a0:	mov	w0, #0x8                   	// #8
   108a4:	csel	w23, w2, w0, ge  // ge = tcont
   108a8:	orr	w0, w1, w23
   108ac:	b	105c8 <mpc_sqr@@Base+0x60>
   108b0:	ldp	x0, x1, [x28]
   108b4:	stp	x0, x1, [sp, #176]
   108b8:	ldp	x0, x1, [x28, #16]
   108bc:	stp	x0, x1, [sp, #192]
   108c0:	b	107d8 <mpc_sqr@@Base+0x270>
   108c4:	cmp	x23, x21
   108c8:	add	x26, sp, #0x90
   108cc:	csel	x21, x23, x21, ge  // ge = tcont
   108d0:	add	x23, sp, #0x70
   108d4:	mov	x0, x23
   108d8:	and	w27, w20, #0xf
   108dc:	bl	4aa0 <mpfr_init@plt>
   108e0:	mov	x0, x26
   108e4:	bl	4aa0 <mpfr_init@plt>
   108e8:	bl	5060 <mpfr_get_emin@plt>
   108ec:	str	x0, [sp, #104]
   108f0:	mov	x0, x21
   108f4:	bl	4d20 <mpc_ceil_log2@plt>
   108f8:	add	x0, x0, #0x5
   108fc:	add	x21, x21, x0
   10900:	mov	x0, x23
   10904:	mov	x1, x21
   10908:	bl	4c80 <mpfr_set_prec@plt>
   1090c:	mov	x1, x21
   10910:	mov	x0, x26
   10914:	bl	4c80 <mpfr_set_prec@plt>
   10918:	mov	x2, x25
   1091c:	mov	x1, x22
   10920:	mov	w3, #0x4                   	// #4
   10924:	mov	x0, x23
   10928:	bl	4e60 <mpfr_add@plt>
   1092c:	mov	w24, w0
   10930:	mov	x1, x22
   10934:	mov	x2, x25
   10938:	mov	x0, x26
   1093c:	mov	w3, #0x4                   	// #4
   10940:	bl	4a60 <mpfr_sub@plt>
   10944:	orr	w24, w24, w0
   10948:	ldr	x0, [sp, #128]
   1094c:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   10950:	cmp	x0, x1
   10954:	b.ge	10994 <mpc_sqr@@Base+0x42c>  // b.tcont
   10958:	mov	x1, #0x2                   	// #2
   1095c:	movk	x1, #0x8000, lsl #48
   10960:	cmp	x0, x1
   10964:	b.ne	1096c <mpc_sqr@@Base+0x404>  // b.any
   10968:	bl	4b00 <mpfr_set_erangeflag@plt>
   1096c:	mov	w0, #0x1                   	// #1
   10970:	mov	w21, #0x0                   	// #0
   10974:	str	w0, [x19, #8]
   10978:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   1097c:	str	x0, [x19, #16]
   10980:	mov	x0, x23
   10984:	bl	4d60 <mpfr_clear@plt>
   10988:	mov	x0, x26
   1098c:	bl	4d60 <mpfr_clear@plt>
   10990:	b	10820 <mpc_sqr@@Base+0x2b8>
   10994:	ldr	w0, [sp, #120]
   10998:	cbz	w0, 1096c <mpc_sqr@@Base+0x404>
   1099c:	ldr	x0, [sp, #160]
   109a0:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   109a4:	cmp	x0, x1
   109a8:	b.lt	10958 <mpc_sqr@@Base+0x3f0>  // b.tstop
   109ac:	ldr	w0, [sp, #152]
   109b0:	cbz	w0, 1096c <mpc_sqr@@Base+0x404>
   109b4:	mov	x1, x23
   109b8:	mov	x2, x26
   109bc:	mov	x0, x23
   109c0:	mov	w3, #0x4                   	// #4
   109c4:	bl	4b70 <mpfr_mul@plt>
   109c8:	orr	w24, w24, w0
   109cc:	ldr	x1, [sp, #104]
   109d0:	ldr	x0, [sp, #128]
   109d4:	cmp	x0, x1
   109d8:	b.eq	109e8 <mpc_sqr@@Base+0x480>  // b.none
   109dc:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   109e0:	cmp	x0, x1
   109e4:	b.ne	10a04 <mpc_sqr@@Base+0x49c>  // b.any
   109e8:	mov	w3, w27
   109ec:	mov	x2, x25
   109f0:	mov	x1, x22
   109f4:	mov	x0, x19
   109f8:	bl	10100 <mpc_sinh@@Base+0xc8>
   109fc:	mov	w21, w0
   10a00:	b	10980 <mpc_sqr@@Base+0x418>
   10a04:	cmp	w27, #0x0
   10a08:	sub	x1, x21, #0x3
   10a0c:	ldr	x4, [x19]
   10a10:	mov	x0, x23
   10a14:	mov	w3, #0x1                   	// #1
   10a18:	mov	w2, #0x4                   	// #4
   10a1c:	cinc	x4, x4, eq  // eq = none
   10a20:	bl	5450 <mpfr_can_round@plt>
   10a24:	cmp	w24, #0x0
   10a28:	cset	w1, eq  // eq = none
   10a2c:	orr	w1, w1, w0
   10a30:	cbz	w1, 108f0 <mpc_sqr@@Base+0x388>
   10a34:	ldr	w3, [sp, #120]
   10a38:	mov	w2, w27
   10a3c:	mov	x1, x23
   10a40:	mov	x0, x19
   10a44:	bl	51d0 <mpfr_set4@plt>
   10a48:	cmp	w0, #0x0
   10a4c:	csel	w21, w0, w24, ne  // ne = any
   10a50:	b	10980 <mpc_sqr@@Base+0x418>

0000000000010a54 <mpc_sqrt@@Base>:
   10a54:	stp	x29, x30, [sp, #-240]!
   10a58:	mov	x29, sp
   10a5c:	stp	x23, x24, [sp, #48]
   10a60:	mov	x23, x1
   10a64:	stp	x19, x20, [sp, #16]
   10a68:	mov	x19, x0
   10a6c:	mov	x0, x1
   10a70:	stp	x21, x22, [sp, #32]
   10a74:	mov	w22, w2
   10a78:	stp	x25, x26, [sp, #64]
   10a7c:	mov	w26, #0x2                   	// #2
   10a80:	stp	x27, x28, [sp, #80]
   10a84:	bl	51f0 <mpfr_sgn@plt>
   10a88:	str	w0, [sp, #96]
   10a8c:	add	x0, x23, #0x20
   10a90:	str	x0, [sp, #144]
   10a94:	bl	51f0 <mpfr_sgn@plt>
   10a98:	str	w0, [sp, #108]
   10a9c:	ldr	w0, [x23, #40]
   10aa0:	cmp	w0, #0x0
   10aa4:	mov	w0, #0x3                   	// #3
   10aa8:	csetm	w1, lt  // lt = tstop
   10aac:	csel	w26, w26, w0, ge  // ge = tcont
   10ab0:	mov	x0, x23
   10ab4:	str	w1, [sp, #136]
   10ab8:	bl	54d0 <mpfr_number_p@plt>
   10abc:	cbnz	w0, 10af0 <mpc_sqrt@@Base+0x9c>
   10ac0:	ldr	x1, [x23, #48]
   10ac4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   10ac8:	cmp	x1, x0
   10acc:	b.ne	10b28 <mpc_sqrt@@Base+0xd4>  // b.any
   10ad0:	mov	x0, x19
   10ad4:	mov	w1, #0x1                   	// #1
   10ad8:	bl	5120 <mpfr_set_inf@plt>
   10adc:	ldr	w1, [sp, #136]
   10ae0:	add	x0, x19, #0x20
   10ae4:	bl	5120 <mpfr_set_inf@plt>
   10ae8:	mov	w24, #0x0                   	// #0
   10aec:	b	10b80 <mpc_sqrt@@Base+0x12c>
   10af0:	add	x0, x23, #0x20
   10af4:	bl	54d0 <mpfr_number_p@plt>
   10af8:	cbz	w0, 10ac0 <mpc_sqrt@@Base+0x6c>
   10afc:	ldr	w0, [sp, #108]
   10b00:	cbnz	w0, 10d28 <mpc_sqrt@@Base+0x2d4>
   10b04:	ldr	w0, [sp, #96]
   10b08:	cmp	w0, #0x0
   10b0c:	cbnz	w0, 10c28 <mpc_sqrt@@Base+0x1d4>
   10b10:	mov	x0, x19
   10b14:	mov	w3, #0x0                   	// #0
   10b18:	mov	x2, #0x0                   	// #0
   10b1c:	mov	x1, #0x0                   	// #0
   10b20:	bl	5040 <mpc_set_ui_ui@plt>
   10b24:	b	10bc8 <mpc_sqrt@@Base+0x174>
   10b28:	ldr	x2, [x23, #16]
   10b2c:	cmp	x2, x0
   10b30:	b.ne	10bfc <mpc_sqrt@@Base+0x1a8>  // b.any
   10b34:	ldr	w0, [x23, #8]
   10b38:	tbz	w0, #31, 10ba0 <mpc_sqrt@@Base+0x14c>
   10b3c:	ldr	x0, [sp, #144]
   10b40:	add	x20, x19, #0x20
   10b44:	bl	54d0 <mpfr_number_p@plt>
   10b48:	mov	w24, w0
   10b4c:	cbz	w0, 10b6c <mpc_sqrt@@Base+0x118>
   10b50:	mov	w0, #0x1                   	// #1
   10b54:	str	w0, [x19, #8]
   10b58:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10b5c:	ldr	w1, [sp, #136]
   10b60:	str	x0, [x19, #16]
   10b64:	mov	x0, x20
   10b68:	b	10ae4 <mpc_sqrt@@Base+0x90>
   10b6c:	mov	x0, x19
   10b70:	bl	4a40 <mpfr_set_nan@plt>
   10b74:	ldr	w1, [sp, #136]
   10b78:	mov	x0, x20
   10b7c:	bl	5120 <mpfr_set_inf@plt>
   10b80:	mov	w0, w24
   10b84:	ldp	x19, x20, [sp, #16]
   10b88:	ldp	x21, x22, [sp, #32]
   10b8c:	ldp	x23, x24, [sp, #48]
   10b90:	ldp	x25, x26, [sp, #64]
   10b94:	ldp	x27, x28, [sp, #80]
   10b98:	ldp	x29, x30, [sp], #240
   10b9c:	ret
   10ba0:	add	x0, x23, #0x20
   10ba4:	bl	54d0 <mpfr_number_p@plt>
   10ba8:	cbz	w0, 10be4 <mpc_sqrt@@Base+0x190>
   10bac:	mov	w1, #0x1                   	// #1
   10bb0:	mov	x0, x19
   10bb4:	bl	5120 <mpfr_set_inf@plt>
   10bb8:	mov	w1, #0x1                   	// #1
   10bbc:	str	w1, [x19, #40]
   10bc0:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   10bc4:	str	x1, [x19, #48]
   10bc8:	ldr	w0, [sp, #136]
   10bcc:	cbz	w0, 10ae8 <mpc_sqrt@@Base+0x94>
   10bd0:	mov	x1, x19
   10bd4:	mov	x0, x19
   10bd8:	mov	w2, #0x0                   	// #0
   10bdc:	bl	4f60 <mpc_conj@plt>
   10be0:	b	10ae8 <mpc_sqrt@@Base+0x94>
   10be4:	mov	w2, w22
   10be8:	mov	x1, x23
   10bec:	mov	x0, x19
   10bf0:	bl	5580 <mpc_set@plt>
   10bf4:	mov	w24, w0
   10bf8:	b	10b80 <mpc_sqrt@@Base+0x12c>
   10bfc:	mov	x0, #0x2                   	// #2
   10c00:	movk	x0, #0x8000, lsl #48
   10c04:	cmp	x2, x0
   10c08:	b.eq	10c14 <mpc_sqrt@@Base+0x1c0>  // b.none
   10c0c:	cmp	x1, x0
   10c10:	b.ne	10afc <mpc_sqrt@@Base+0xa8>  // b.any
   10c14:	mov	x0, x19
   10c18:	bl	4a40 <mpfr_set_nan@plt>
   10c1c:	add	x0, x19, #0x20
   10c20:	bl	4a40 <mpfr_set_nan@plt>
   10c24:	b	10ae8 <mpc_sqrt@@Base+0x94>
   10c28:	add	x24, x19, #0x20
   10c2c:	b.le	10c80 <mpc_sqrt@@Base+0x22c>
   10c30:	and	w2, w22, #0xf
   10c34:	mov	x1, x23
   10c38:	mov	x0, x19
   10c3c:	bl	5350 <mpfr_sqrt@plt>
   10c40:	mov	w20, w0
   10c44:	mov	w0, #0x1                   	// #1
   10c48:	str	w0, [x24, #8]
   10c4c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10c50:	str	x0, [x24, #16]
   10c54:	ldr	w0, [sp, #136]
   10c58:	cbz	w0, 10c6c <mpc_sqrt@@Base+0x218>
   10c5c:	mov	x1, x19
   10c60:	mov	x0, x19
   10c64:	mov	w2, #0x0                   	// #0
   10c68:	bl	4f60 <mpc_conj@plt>
   10c6c:	cmp	w20, #0x0
   10c70:	mov	w0, #0x2                   	// #2
   10c74:	cset	w24, ne  // ne = any
   10c78:	csel	w24, w24, w0, ge  // ge = tcont
   10c7c:	b	10b80 <mpc_sqrt@@Base+0x12c>
   10c80:	ldr	x1, [x23]
   10c84:	add	x21, sp, #0xb0
   10c88:	mov	x0, x21
   10c8c:	bl	5440 <mpfr_init2@plt>
   10c90:	mov	w2, #0x0                   	// #0
   10c94:	mov	x1, x23
   10c98:	mov	x0, x21
   10c9c:	bl	4b80 <mpfr_neg@plt>
   10ca0:	ldr	w0, [sp, #136]
   10ca4:	asr	w2, w22, #4
   10ca8:	cbz	w0, 10d14 <mpc_sqrt@@Base+0x2c0>
   10cac:	cmp	w2, #0x2
   10cb0:	b.eq	10d0c <mpc_sqrt@@Base+0x2b8>  // b.none
   10cb4:	cmp	w2, #0x3
   10cb8:	mov	w0, #0x2                   	// #2
   10cbc:	csel	w2, w2, w0, ne  // ne = any
   10cc0:	mov	x1, x21
   10cc4:	mov	x0, x24
   10cc8:	bl	5350 <mpfr_sqrt@plt>
   10ccc:	neg	w20, w0
   10cd0:	mov	x1, x24
   10cd4:	mov	x0, x24
   10cd8:	mov	w2, #0x0                   	// #0
   10cdc:	bl	4b80 <mpfr_neg@plt>
   10ce0:	mov	w0, #0x1                   	// #1
   10ce4:	str	w0, [x19, #8]
   10ce8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10cec:	str	x0, [x19, #16]
   10cf0:	mov	x0, x21
   10cf4:	bl	4d60 <mpfr_clear@plt>
   10cf8:	cmp	w20, #0x0
   10cfc:	b.lt	114c0 <mpc_sqrt@@Base+0xa6c>  // b.tstop
   10d00:	b.eq	10ae8 <mpc_sqrt@@Base+0x94>  // b.none
   10d04:	mov	w24, #0x4                   	// #4
   10d08:	b	10b80 <mpc_sqrt@@Base+0x12c>
   10d0c:	mov	w2, #0x3                   	// #3
   10d10:	b	10cc0 <mpc_sqrt@@Base+0x26c>
   10d14:	mov	x1, x21
   10d18:	mov	x0, x24
   10d1c:	bl	5350 <mpfr_sqrt@plt>
   10d20:	mov	w20, w0
   10d24:	b	10ce0 <mpc_sqrt@@Base+0x28c>
   10d28:	ldr	w0, [sp, #96]
   10d2c:	asr	w24, w22, #4
   10d30:	and	w27, w22, #0xf
   10d34:	add	x25, x19, #0x20
   10d38:	add	x20, sp, #0xd0
   10d3c:	cbnz	w0, 10e30 <mpc_sqrt@@Base+0x3dc>
   10d40:	ldp	x0, x1, [x23, #32]
   10d44:	stp	x0, x1, [sp, #208]
   10d48:	mov	w3, #0x0                   	// #0
   10d4c:	ldr	x0, [sp, #144]
   10d50:	mov	x2, #0x1                   	// #1
   10d54:	ldp	x0, x1, [x0, #16]
   10d58:	stp	x0, x1, [sp, #224]
   10d5c:	mov	x1, x20
   10d60:	mov	x0, x20
   10d64:	bl	5320 <mpfr_div_2ui@plt>
   10d68:	ldr	w0, [sp, #108]
   10d6c:	cmp	w0, #0x0
   10d70:	b.le	10dc8 <mpc_sqrt@@Base+0x374>
   10d74:	mov	w2, w27
   10d78:	mov	x1, x20
   10d7c:	mov	x0, x19
   10d80:	bl	5350 <mpfr_sqrt@plt>
   10d84:	mov	w2, w24
   10d88:	mov	w21, w0
   10d8c:	mov	x1, x20
   10d90:	mov	x0, x25
   10d94:	bl	5350 <mpfr_sqrt@plt>
   10d98:	mov	w19, w0
   10d9c:	cmp	w21, #0x0
   10da0:	mov	w0, #0x2                   	// #2
   10da4:	cset	w24, ne  // ne = any
   10da8:	csel	w24, w24, w0, ge  // ge = tcont
   10dac:	cmp	w19, #0x0
   10db0:	mov	w0, #0x4                   	// #4
   10db4:	csel	w0, w19, w0, eq  // eq = none
   10db8:	mov	w19, #0x8                   	// #8
   10dbc:	csel	w19, w0, w19, ge  // ge = tcont
   10dc0:	orr	w24, w24, w19
   10dc4:	b	10b80 <mpc_sqrt@@Base+0x12c>
   10dc8:	mov	x1, x20
   10dcc:	mov	w2, #0x0                   	// #0
   10dd0:	mov	x0, x20
   10dd4:	bl	4b80 <mpfr_neg@plt>
   10dd8:	mov	w2, w27
   10ddc:	mov	x1, x20
   10de0:	mov	x0, x19
   10de4:	bl	5350 <mpfr_sqrt@plt>
   10de8:	cmp	w24, #0x2
   10dec:	mov	w21, w0
   10df0:	b.eq	10e28 <mpc_sqrt@@Base+0x3d4>  // b.none
   10df4:	cmp	w24, #0x3
   10df8:	mov	w0, #0x2                   	// #2
   10dfc:	csel	w24, w24, w0, ne  // ne = any
   10e00:	mov	w2, w24
   10e04:	mov	x1, x20
   10e08:	mov	x0, x25
   10e0c:	bl	5350 <mpfr_sqrt@plt>
   10e10:	mov	x1, x25
   10e14:	neg	w19, w0
   10e18:	mov	w2, #0x0                   	// #0
   10e1c:	mov	x0, x25
   10e20:	bl	4b80 <mpfr_neg@plt>
   10e24:	b	10d9c <mpc_sqrt@@Base+0x348>
   10e28:	mov	w24, #0x3                   	// #3
   10e2c:	b	10e00 <mpc_sqrt@@Base+0x3ac>
   10e30:	ldr	x0, [x19]
   10e34:	add	x21, sp, #0xb0
   10e38:	ldr	x1, [x19, #32]
   10e3c:	cmp	x1, x0
   10e40:	csel	x0, x1, x0, ge  // ge = tcont
   10e44:	str	x0, [sp, #112]
   10e48:	mov	x0, x21
   10e4c:	bl	4aa0 <mpfr_init@plt>
   10e50:	mov	x0, x20
   10e54:	bl	4aa0 <mpfr_init@plt>
   10e58:	ldr	w0, [sp, #96]
   10e5c:	ldr	x1, [x19, #32]
   10e60:	cmp	w0, #0x0
   10e64:	ldr	x0, [x19]
   10e68:	b.le	1115c <mpc_sqrt@@Base+0x708>
   10e6c:	str	x0, [sp, #120]
   10e70:	cmp	w24, #0x1
   10e74:	b.ne	11154 <mpc_sqrt@@Base+0x700>  // b.any
   10e78:	ldr	w0, [sp, #108]
   10e7c:	cmp	w0, #0x0
   10e80:	cset	w0, gt
   10e84:	add	w0, w0, #0x2
   10e88:	str	w0, [sp, #100]
   10e8c:	str	w27, [sp, #104]
   10e90:	str	x1, [sp, #128]
   10e94:	mov	w22, #0x1                   	// #1
   10e98:	str	wzr, [sp, #156]
   10e9c:	str	wzr, [sp, #172]
   10ea0:	str	wzr, [sp, #140]
   10ea4:	ldr	w0, [sp, #156]
   10ea8:	add	w0, w0, #0x1
   10eac:	str	w0, [sp, #156]
   10eb0:	cmp	w0, #0x2
   10eb4:	ldr	x0, [sp, #112]
   10eb8:	b.gt	111c8 <mpc_sqrt@@Base+0x774>
   10ebc:	bl	4d20 <mpc_ceil_log2@plt>
   10ec0:	add	x0, x0, #0x4
   10ec4:	ldr	x1, [sp, #112]
   10ec8:	add	x0, x1, x0
   10ecc:	str	x0, [sp, #112]
   10ed0:	mov	x1, x0
   10ed4:	mov	x0, x21
   10ed8:	bl	4c80 <mpfr_set_prec@plt>
   10edc:	ldr	x1, [sp, #112]
   10ee0:	mov	x0, x20
   10ee4:	bl	4c80 <mpfr_set_prec@plt>
   10ee8:	mov	x1, x23
   10eec:	mov	w2, #0x3                   	// #3
   10ef0:	mov	x0, x21
   10ef4:	bl	51a0 <mpc_abs@plt>
   10ef8:	mov	w28, w0
   10efc:	ldr	w0, [sp, #96]
   10f00:	mov	x2, x23
   10f04:	mov	x1, x21
   10f08:	mov	w3, #0x3                   	// #3
   10f0c:	tbz	w0, #31, 111d4 <mpc_sqrt@@Base+0x780>
   10f10:	mov	x0, x21
   10f14:	bl	4a60 <mpfr_sub@plt>
   10f18:	mov	w3, #0x3                   	// #3
   10f1c:	orr	w28, w28, w0
   10f20:	mov	x1, x21
   10f24:	mov	x2, #0x1                   	// #1
   10f28:	mov	x0, x21
   10f2c:	bl	5320 <mpfr_div_2ui@plt>
   10f30:	mov	x1, x21
   10f34:	mov	w2, #0x3                   	// #3
   10f38:	orr	w28, w28, w0
   10f3c:	mov	x0, x21
   10f40:	bl	5350 <mpfr_sqrt@plt>
   10f44:	orr	w0, w28, w0
   10f48:	str	w0, [sp, #152]
   10f4c:	mov	x0, x21
   10f50:	bl	5390 <mpfr_min_prec@plt>
   10f54:	str	x0, [sp, #160]
   10f58:	ldr	x0, [sp, #112]
   10f5c:	ldr	x2, [sp, #120]
   10f60:	sub	x1, x0, #0x2
   10f64:	ldr	x0, [sp, #160]
   10f68:	cmp	x0, x2
   10f6c:	ldr	w0, [sp, #104]
   10f70:	b.le	111e0 <mpc_sqrt@@Base+0x78c>
   10f74:	cmp	w0, #0x0
   10f78:	mov	w3, #0x2                   	// #2
   10f7c:	cinc	x4, x2, eq  // eq = none
   10f80:	mov	w2, #0x3                   	// #3
   10f84:	mov	x0, x21
   10f88:	bl	5450 <mpfr_can_round@plt>
   10f8c:	mov	w28, w0
   10f90:	ldr	w0, [sp, #152]
   10f94:	cmp	w0, #0x0
   10f98:	cset	w0, ne  // ne = any
   10f9c:	str	w0, [sp, #168]
   10fa0:	ldr	w0, [sp, #152]
   10fa4:	cmp	w0, #0x0
   10fa8:	ccmp	w28, #0x0, #0x0, ne  // ne = any
   10fac:	b.eq	1104c <mpc_sqrt@@Base+0x5f8>  // b.none
   10fb0:	ldr	x1, [sp, #144]
   10fb4:	mov	w3, w26
   10fb8:	mov	x2, x21
   10fbc:	mov	x0, x20
   10fc0:	bl	5150 <mpfr_div@plt>
   10fc4:	cmp	w0, #0x0
   10fc8:	mov	w22, w0
   10fcc:	ldr	w0, [sp, #168]
   10fd0:	ccmp	w0, #0x0, #0x4, eq  // eq = none
   10fd4:	b.eq	10fe8 <mpc_sqrt@@Base+0x594>  // b.none
   10fd8:	ldr	w0, [sp, #136]
   10fdc:	cmp	w0, #0x0
   10fe0:	mov	w0, #0x1                   	// #1
   10fe4:	cneg	w22, w0, ne  // ne = any
   10fe8:	mov	x1, x20
   10fec:	mov	w3, w26
   10ff0:	mov	x2, #0x1                   	// #1
   10ff4:	mov	x0, x20
   10ff8:	bl	5320 <mpfr_div_2ui@plt>
   10ffc:	orr	w22, w22, w0
   11000:	mov	x0, x20
   11004:	bl	5390 <mpfr_min_prec@plt>
   11008:	ldr	x1, [sp, #128]
   1100c:	ldr	x2, [sp, #128]
   11010:	cmp	x0, x1
   11014:	cset	w1, le
   11018:	str	w1, [sp, #172]
   1101c:	ldr	x1, [sp, #112]
   11020:	cmp	x0, x2
   11024:	ldr	w0, [sp, #100]
   11028:	sub	x1, x1, #0x3
   1102c:	b.le	111fc <mpc_sqrt@@Base+0x7a8>
   11030:	cmp	w0, #0x0
   11034:	mov	w3, #0x1                   	// #1
   11038:	cinc	x4, x2, eq  // eq = none
   1103c:	mov	w2, w26
   11040:	mov	x0, x20
   11044:	bl	5450 <mpfr_can_round@plt>
   11048:	str	w0, [sp, #140]
   1104c:	ldr	w0, [sp, #168]
   11050:	cmp	w28, #0x0
   11054:	ccmp	w0, #0x0, #0x4, eq  // eq = none
   11058:	b.ne	10ea4 <mpc_sqrt@@Base+0x450>  // b.any
   1105c:	ldr	w0, [sp, #140]
   11060:	cmp	w22, #0x0
   11064:	cset	w28, ne  // ne = any
   11068:	cmp	w0, #0x0
   1106c:	ccmp	w28, #0x0, #0x4, eq  // eq = none
   11070:	b.ne	10ea0 <mpc_sqrt@@Base+0x44c>  // b.any
   11074:	ldr	w0, [sp, #96]
   11078:	cmp	w0, #0x0
   1107c:	b.le	11214 <mpc_sqrt@@Base+0x7c0>
   11080:	ldr	w3, [sp, #184]
   11084:	mov	w2, w27
   11088:	mov	x1, x21
   1108c:	mov	x0, x19
   11090:	bl	51d0 <mpfr_set4@plt>
   11094:	mov	w23, w0
   11098:	ldr	w3, [sp, #216]
   1109c:	mov	w2, w24
   110a0:	mov	x1, x20
   110a4:	mov	x0, x25
   110a8:	bl	51d0 <mpfr_set4@plt>
   110ac:	mov	w24, w0
   110b0:	ldr	w0, [sp, #168]
   110b4:	ldr	x1, [sp, #120]
   110b8:	cmp	w0, #0x0
   110bc:	ldr	x0, [sp, #160]
   110c0:	ccmp	x0, x1, #0x0, ne  // ne = any
   110c4:	b.gt	110ec <mpc_sqrt@@Base+0x698>
   110c8:	ldr	w0, [sp, #104]
   110cc:	cbnz	w0, 11270 <mpc_sqrt@@Base+0x81c>
   110d0:	ldr	w0, [sp, #96]
   110d4:	cmp	w0, #0x0
   110d8:	b.gt	1138c <mpc_sqrt@@Base+0x938>
   110dc:	ldr	w0, [sp, #108]
   110e0:	cmp	w0, #0x0
   110e4:	ldr	w0, [sp, #152]
   110e8:	cneg	w24, w0, le
   110ec:	ldr	w0, [sp, #172]
   110f0:	tst	w28, w0
   110f4:	b.eq	11118 <mpc_sqrt@@Base+0x6c4>  // b.none
   110f8:	ldr	w0, [sp, #100]
   110fc:	cbnz	w0, 1139c <mpc_sqrt@@Base+0x948>
   11100:	ldr	w0, [sp, #96]
   11104:	cmp	w0, #0x0
   11108:	b.gt	114b8 <mpc_sqrt@@Base+0xa64>
   1110c:	ldr	w0, [sp, #108]
   11110:	cmp	w0, #0x0
   11114:	cneg	w23, w22, le
   11118:	mov	x0, x21
   1111c:	bl	4d60 <mpfr_clear@plt>
   11120:	mov	x0, x20
   11124:	bl	4d60 <mpfr_clear@plt>
   11128:	cmp	w23, #0x0
   1112c:	mov	w1, #0x2                   	// #2
   11130:	cset	w0, ne  // ne = any
   11134:	csel	w0, w0, w1, ge  // ge = tcont
   11138:	cmp	w24, #0x0
   1113c:	mov	w1, #0x4                   	// #4
   11140:	csel	w1, w24, w1, eq  // eq = none
   11144:	mov	w24, #0x8                   	// #8
   11148:	csel	w24, w1, w24, ge  // ge = tcont
   1114c:	orr	w24, w0, w24
   11150:	b	10b80 <mpc_sqrt@@Base+0x12c>
   11154:	str	w24, [sp, #100]
   11158:	b	10e8c <mpc_sqrt@@Base+0x438>
   1115c:	stp	x1, x0, [sp, #120]
   11160:	ldr	w0, [sp, #108]
   11164:	cmp	w0, #0x0
   11168:	b.le	11184 <mpc_sqrt@@Base+0x730>
   1116c:	cmp	w27, #0x1
   11170:	mov	w0, #0x3                   	// #3
   11174:	str	w24, [sp, #104]
   11178:	csel	w0, w27, w0, ne  // ne = any
   1117c:	str	w0, [sp, #100]
   11180:	b	10e94 <mpc_sqrt@@Base+0x440>
   11184:	cmp	w24, #0x2
   11188:	b.eq	111b8 <mpc_sqrt@@Base+0x764>  // b.none
   1118c:	cmp	w24, #0x3
   11190:	mov	w0, #0x2                   	// #2
   11194:	csel	w0, w24, w0, ne  // ne = any
   11198:	str	w0, [sp, #104]
   1119c:	cmp	w27, #0x2
   111a0:	b.eq	111c0 <mpc_sqrt@@Base+0x76c>  // b.none
   111a4:	mov	w2, #0xd                   	// #13
   111a8:	and	w22, w22, w2
   111ac:	cmp	w22, #0x1
   111b0:	mov	w0, #0x2                   	// #2
   111b4:	b	11178 <mpc_sqrt@@Base+0x724>
   111b8:	mov	w0, #0x3                   	// #3
   111bc:	b	11198 <mpc_sqrt@@Base+0x744>
   111c0:	mov	w0, #0x3                   	// #3
   111c4:	b	1117c <mpc_sqrt@@Base+0x728>
   111c8:	mov	x1, #0x2                   	// #2
   111cc:	sdiv	x0, x0, x1
   111d0:	b	10ec4 <mpc_sqrt@@Base+0x470>
   111d4:	mov	x0, x21
   111d8:	bl	4e60 <mpfr_add@plt>
   111dc:	b	10f18 <mpc_sqrt@@Base+0x4c4>
   111e0:	ldr	x4, [sp, #120]
   111e4:	cbnz	w0, 111f0 <mpc_sqrt@@Base+0x79c>
   111e8:	mov	w3, #0x0                   	// #0
   111ec:	b	10f80 <mpc_sqrt@@Base+0x52c>
   111f0:	mov	w3, #0x3                   	// #3
   111f4:	mov	w2, w3
   111f8:	b	10f84 <mpc_sqrt@@Base+0x530>
   111fc:	ldr	x4, [sp, #128]
   11200:	cbnz	w0, 1120c <mpc_sqrt@@Base+0x7b8>
   11204:	mov	w3, #0x0                   	// #0
   11208:	b	1103c <mpc_sqrt@@Base+0x5e8>
   1120c:	mov	w3, w26
   11210:	b	1103c <mpc_sqrt@@Base+0x5e8>
   11214:	ldr	w0, [sp, #108]
   11218:	cmp	w0, #0x0
   1121c:	b.le	11248 <mpc_sqrt@@Base+0x7f4>
   11220:	ldr	w3, [sp, #216]
   11224:	mov	w2, w27
   11228:	mov	x1, x20
   1122c:	mov	x0, x19
   11230:	bl	51d0 <mpfr_set4@plt>
   11234:	mov	w23, w0
   11238:	ldr	w3, [sp, #184]
   1123c:	mov	w2, w24
   11240:	mov	x1, x21
   11244:	b	110a4 <mpc_sqrt@@Base+0x650>
   11248:	mov	w2, w27
   1124c:	mov	x1, x20
   11250:	mov	x0, x19
   11254:	bl	4b80 <mpfr_neg@plt>
   11258:	mov	w2, w24
   1125c:	mov	w23, w0
   11260:	mov	x1, x21
   11264:	mov	x0, x25
   11268:	bl	4b80 <mpfr_neg@plt>
   1126c:	b	110ac <mpc_sqrt@@Base+0x658>
   11270:	ldr	w0, [sp, #96]
   11274:	cmp	w0, #0x0
   11278:	b.le	112d4 <mpc_sqrt@@Base+0x880>
   1127c:	ldr	w0, [sp, #104]
   11280:	cmp	w0, #0x2
   11284:	b.ne	11394 <mpc_sqrt@@Base+0x940>  // b.any
   11288:	ldr	x0, [x19, #16]
   1128c:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   11290:	cmp	x0, x1
   11294:	b.ge	112b8 <mpc_sqrt@@Base+0x864>  // b.tcont
   11298:	mov	x1, #0x2                   	// #2
   1129c:	movk	x1, #0x8000, lsl #48
   112a0:	cmp	x0, x1
   112a4:	b.ne	112ac <mpc_sqrt@@Base+0x858>  // b.any
   112a8:	bl	4b00 <mpfr_set_erangeflag@plt>
   112ac:	mov	x0, x19
   112b0:	bl	4bb0 <mpfr_nextbelow@plt>
   112b4:	b	112cc <mpc_sqrt@@Base+0x878>
   112b8:	ldr	w0, [x19, #8]
   112bc:	cmp	w0, #0x0
   112c0:	b.le	112ac <mpc_sqrt@@Base+0x858>
   112c4:	mov	x0, x19
   112c8:	bl	4e00 <mpfr_nextabove@plt>
   112cc:	mov	w23, #0x1                   	// #1
   112d0:	b	110ec <mpc_sqrt@@Base+0x698>
   112d4:	ldr	w0, [sp, #108]
   112d8:	cmp	w0, #0x0
   112dc:	ldr	w0, [sp, #104]
   112e0:	b.le	11338 <mpc_sqrt@@Base+0x8e4>
   112e4:	cmp	w0, #0x2
   112e8:	b.ne	11384 <mpc_sqrt@@Base+0x930>  // b.any
   112ec:	ldr	x0, [x19, #48]
   112f0:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   112f4:	cmp	x0, x1
   112f8:	b.ge	1131c <mpc_sqrt@@Base+0x8c8>  // b.tcont
   112fc:	mov	x1, #0x2                   	// #2
   11300:	movk	x1, #0x8000, lsl #48
   11304:	cmp	x0, x1
   11308:	b.ne	11310 <mpc_sqrt@@Base+0x8bc>  // b.any
   1130c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11310:	mov	x0, x25
   11314:	bl	4bb0 <mpfr_nextbelow@plt>
   11318:	b	11330 <mpc_sqrt@@Base+0x8dc>
   1131c:	ldr	w0, [x19, #40]
   11320:	cmp	w0, #0x0
   11324:	b.le	11310 <mpc_sqrt@@Base+0x8bc>
   11328:	mov	x0, x25
   1132c:	bl	4e00 <mpfr_nextabove@plt>
   11330:	mov	w24, #0x1                   	// #1
   11334:	b	110ec <mpc_sqrt@@Base+0x698>
   11338:	cmp	w0, #0x2
   1133c:	b.ne	11330 <mpc_sqrt@@Base+0x8dc>  // b.any
   11340:	ldr	x0, [x19, #48]
   11344:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   11348:	cmp	x0, x1
   1134c:	b.ge	11370 <mpc_sqrt@@Base+0x91c>  // b.tcont
   11350:	mov	x1, #0x2                   	// #2
   11354:	movk	x1, #0x8000, lsl #48
   11358:	cmp	x0, x1
   1135c:	b.ne	11364 <mpc_sqrt@@Base+0x910>  // b.any
   11360:	bl	4b00 <mpfr_set_erangeflag@plt>
   11364:	mov	x0, x25
   11368:	bl	4bb0 <mpfr_nextbelow@plt>
   1136c:	b	11384 <mpc_sqrt@@Base+0x930>
   11370:	ldr	w0, [x19, #40]
   11374:	cmp	w0, #0x0
   11378:	b.le	11364 <mpc_sqrt@@Base+0x910>
   1137c:	mov	x0, x25
   11380:	bl	4e00 <mpfr_nextabove@plt>
   11384:	mov	w24, #0xffffffff            	// #-1
   11388:	b	110ec <mpc_sqrt@@Base+0x698>
   1138c:	ldr	w23, [sp, #152]
   11390:	b	110ec <mpc_sqrt@@Base+0x698>
   11394:	mov	w23, #0xffffffff            	// #-1
   11398:	b	110ec <mpc_sqrt@@Base+0x698>
   1139c:	ldr	w0, [sp, #96]
   113a0:	cmp	w0, #0x0
   113a4:	b.le	11400 <mpc_sqrt@@Base+0x9ac>
   113a8:	ldr	w0, [sp, #100]
   113ac:	cmp	w26, w0
   113b0:	b.eq	114b8 <mpc_sqrt@@Base+0xa64>  // b.none
   113b4:	ldr	x0, [x19, #48]
   113b8:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   113bc:	neg	w24, w22
   113c0:	cmp	x0, x1
   113c4:	b.ge	113e8 <mpc_sqrt@@Base+0x994>  // b.tcont
   113c8:	mov	x1, #0x2                   	// #2
   113cc:	movk	x1, #0x8000, lsl #48
   113d0:	cmp	x0, x1
   113d4:	b.ne	113dc <mpc_sqrt@@Base+0x988>  // b.any
   113d8:	bl	4b00 <mpfr_set_erangeflag@plt>
   113dc:	mov	x0, x25
   113e0:	bl	4e00 <mpfr_nextabove@plt>
   113e4:	b	11118 <mpc_sqrt@@Base+0x6c4>
   113e8:	ldr	w0, [x19, #40]
   113ec:	cmp	w0, #0x0
   113f0:	b.le	113dc <mpc_sqrt@@Base+0x988>
   113f4:	mov	x0, x25
   113f8:	bl	4bb0 <mpfr_nextbelow@plt>
   113fc:	b	11118 <mpc_sqrt@@Base+0x6c4>
   11400:	ldr	w0, [sp, #108]
   11404:	cmp	w0, #0x0
   11408:	ldr	w0, [sp, #100]
   1140c:	b.le	1145c <mpc_sqrt@@Base+0xa08>
   11410:	cmp	w26, w0
   11414:	b.eq	114b0 <mpc_sqrt@@Base+0xa5c>  // b.none
   11418:	ldr	x0, [x19, #16]
   1141c:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   11420:	neg	w23, w22
   11424:	cmp	x0, x1
   11428:	b.ge	11448 <mpc_sqrt@@Base+0x9f4>  // b.tcont
   1142c:	mov	x1, #0x2                   	// #2
   11430:	movk	x1, #0x8000, lsl #48
   11434:	cmp	x0, x1
   11438:	b.ne	11440 <mpc_sqrt@@Base+0x9ec>  // b.any
   1143c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11440:	mov	x0, x19
   11444:	b	113e0 <mpc_sqrt@@Base+0x98c>
   11448:	ldr	w0, [x19, #8]
   1144c:	cmp	w0, #0x0
   11450:	b.le	11440 <mpc_sqrt@@Base+0x9ec>
   11454:	mov	x0, x19
   11458:	b	113f8 <mpc_sqrt@@Base+0x9a4>
   1145c:	cmp	w26, w0
   11460:	b.ne	1146c <mpc_sqrt@@Base+0xa18>  // b.any
   11464:	neg	w23, w22
   11468:	b	11118 <mpc_sqrt@@Base+0x6c4>
   1146c:	ldr	x0, [x19, #16]
   11470:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   11474:	cmp	x0, x1
   11478:	b.ge	1149c <mpc_sqrt@@Base+0xa48>  // b.tcont
   1147c:	mov	x1, #0x2                   	// #2
   11480:	movk	x1, #0x8000, lsl #48
   11484:	cmp	x0, x1
   11488:	b.ne	11490 <mpc_sqrt@@Base+0xa3c>  // b.any
   1148c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11490:	mov	x0, x19
   11494:	bl	4e00 <mpfr_nextabove@plt>
   11498:	b	114b0 <mpc_sqrt@@Base+0xa5c>
   1149c:	ldr	w0, [x19, #8]
   114a0:	cmp	w0, #0x0
   114a4:	b.le	11490 <mpc_sqrt@@Base+0xa3c>
   114a8:	mov	x0, x19
   114ac:	bl	4bb0 <mpfr_nextbelow@plt>
   114b0:	mov	w23, w22
   114b4:	b	11118 <mpc_sqrt@@Base+0x6c4>
   114b8:	mov	w24, w22
   114bc:	b	11118 <mpc_sqrt@@Base+0x6c4>
   114c0:	mov	w24, #0x8                   	// #8
   114c4:	b	10b80 <mpc_sqrt@@Base+0x12c>
   114c8:	stp	x29, x30, [sp, #-32]!
   114cc:	mov	x29, sp
   114d0:	str	x19, [sp, #16]
   114d4:	mov	x19, x0
   114d8:	bl	5170 <__ctype_b_loc@plt>
   114dc:	ldr	x2, [x0]
   114e0:	ldr	x1, [x19]
   114e4:	ldrb	w0, [x1]
   114e8:	ldrh	w0, [x2, x0, lsl #1]
   114ec:	tbnz	w0, #13, 114fc <mpc_sqrt@@Base+0xaa8>
   114f0:	ldr	x19, [sp, #16]
   114f4:	ldp	x29, x30, [sp], #32
   114f8:	ret
   114fc:	add	x1, x1, #0x1
   11500:	str	x1, [x19]
   11504:	b	114e0 <mpc_sqrt@@Base+0xa8c>

0000000000011508 <mpc_strtoc@@Base>:
   11508:	stp	x29, x30, [sp, #-128]!
   1150c:	cmp	w3, #0x24
   11510:	ccmp	x1, #0x0, #0x4, le
   11514:	mov	x29, sp
   11518:	stp	x19, x20, [sp, #16]
   1151c:	mov	x20, x2
   11520:	stp	x21, x22, [sp, #32]
   11524:	mov	x22, x0
   11528:	stp	x23, x24, [sp, #48]
   1152c:	mov	x23, x1
   11530:	add	x24, x0, #0x20
   11534:	stp	x25, x26, [sp, #64]
   11538:	stp	x27, x28, [sp, #80]
   1153c:	b.eq	1168c <mpc_strtoc@@Base+0x184>  // b.none
   11540:	mov	w21, w3
   11544:	cmp	w3, #0x1
   11548:	b.eq	1168c <mpc_strtoc@@Base+0x184>  // b.none
   1154c:	add	x27, sp, #0x70
   11550:	mov	w26, w4
   11554:	mov	x0, x27
   11558:	str	x1, [sp, #112]
   1155c:	bl	114c8 <mpc_sqrt@@Base+0xa74>
   11560:	ldr	x0, [sp, #112]
   11564:	ldrb	w1, [x0]
   11568:	cmp	w1, #0x28
   1156c:	b.ne	11610 <mpc_strtoc@@Base+0x108>  // b.any
   11570:	add	x0, x0, #0x1
   11574:	mov	w19, #0x1                   	// #1
   11578:	str	x0, [sp, #112]
   1157c:	ldr	x1, [sp, #112]
   11580:	add	x28, sp, #0x78
   11584:	and	w4, w26, #0xf
   11588:	mov	w3, w21
   1158c:	mov	x2, x28
   11590:	mov	x0, x22
   11594:	bl	4ac0 <mpfr_strtofr@plt>
   11598:	mov	w25, w0
   1159c:	ldp	x0, x1, [sp, #112]
   115a0:	cmp	x1, x0
   115a4:	b.eq	1168c <mpc_strtoc@@Base+0x184>  // b.none
   115a8:	str	x1, [sp, #112]
   115ac:	cbnz	w19, 11618 <mpc_strtoc@@Base+0x110>
   115b0:	mov	w0, #0x1                   	// #1
   115b4:	str	w0, [x24, #8]
   115b8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   115bc:	str	x0, [x24, #16]
   115c0:	cbz	x20, 115cc <mpc_strtoc@@Base+0xc4>
   115c4:	ldr	x0, [sp, #112]
   115c8:	str	x0, [x20]
   115cc:	cmp	w25, #0x0
   115d0:	mov	w0, #0x2                   	// #2
   115d4:	cset	w1, ne  // ne = any
   115d8:	csel	w0, w1, w0, ge  // ge = tcont
   115dc:	cmp	w19, #0x0
   115e0:	mov	w1, #0x4                   	// #4
   115e4:	csel	w1, w19, w1, eq  // eq = none
   115e8:	mov	w19, #0x8                   	// #8
   115ec:	csel	w19, w1, w19, ge  // ge = tcont
   115f0:	orr	w0, w0, w19
   115f4:	ldp	x19, x20, [sp, #16]
   115f8:	ldp	x21, x22, [sp, #32]
   115fc:	ldp	x23, x24, [sp, #48]
   11600:	ldp	x25, x26, [sp, #64]
   11604:	ldp	x27, x28, [sp, #80]
   11608:	ldp	x29, x30, [sp], #128
   1160c:	ret
   11610:	mov	w19, #0x0                   	// #0
   11614:	b	1157c <mpc_strtoc@@Base+0x74>
   11618:	str	x1, [sp, #104]
   1161c:	bl	5170 <__ctype_b_loc@plt>
   11620:	ldr	x1, [sp, #104]
   11624:	ldr	x0, [x0]
   11628:	ldrb	w1, [x1]
   1162c:	ldrh	w0, [x0, x1, lsl #1]
   11630:	tbz	w0, #13, 1168c <mpc_strtoc@@Base+0x184>
   11634:	mov	x0, x27
   11638:	bl	114c8 <mpc_sqrt@@Base+0xa74>
   1163c:	ldr	x1, [sp, #112]
   11640:	asr	w4, w26, #4
   11644:	mov	w3, w21
   11648:	mov	x2, x28
   1164c:	mov	x0, x24
   11650:	bl	4ac0 <mpfr_strtofr@plt>
   11654:	mov	w19, w0
   11658:	ldp	x1, x0, [sp, #112]
   1165c:	cmp	x0, x1
   11660:	b.eq	1168c <mpc_strtoc@@Base+0x184>  // b.none
   11664:	str	x0, [sp, #112]
   11668:	mov	x0, x27
   1166c:	bl	114c8 <mpc_sqrt@@Base+0xa74>
   11670:	ldr	x0, [sp, #112]
   11674:	ldrb	w1, [x0]
   11678:	cmp	w1, #0x29
   1167c:	b.ne	1168c <mpc_strtoc@@Base+0x184>  // b.any
   11680:	add	x0, x0, #0x1
   11684:	str	x0, [sp, #112]
   11688:	b	115c0 <mpc_strtoc@@Base+0xb8>
   1168c:	cbz	x20, 11694 <mpc_strtoc@@Base+0x18c>
   11690:	str	x23, [x20]
   11694:	mov	x0, x22
   11698:	bl	4a40 <mpfr_set_nan@plt>
   1169c:	mov	x0, x24
   116a0:	bl	4a40 <mpfr_set_nan@plt>
   116a4:	mov	w0, #0xffffffff            	// #-1
   116a8:	b	115f4 <mpc_strtoc@@Base+0xec>

00000000000116ac <mpc_sub@@Base>:
   116ac:	stp	x29, x30, [sp, #-64]!
   116b0:	mov	x29, sp
   116b4:	stp	x19, x20, [sp, #16]
   116b8:	mov	w20, w3
   116bc:	and	w3, w3, #0xf
   116c0:	stp	x21, x22, [sp, #32]
   116c4:	mov	x21, x0
   116c8:	mov	x22, x1
   116cc:	str	x23, [sp, #48]
   116d0:	mov	x23, x2
   116d4:	bl	4a60 <mpfr_sub@plt>
   116d8:	mov	w19, w0
   116dc:	asr	w3, w20, #4
   116e0:	add	x2, x23, #0x20
   116e4:	add	x1, x22, #0x20
   116e8:	add	x0, x21, #0x20
   116ec:	bl	4a60 <mpfr_sub@plt>
   116f0:	cmp	w19, #0x0
   116f4:	mov	w2, #0x2                   	// #2
   116f8:	cset	w1, ne  // ne = any
   116fc:	csel	w1, w1, w2, ge  // ge = tcont
   11700:	cmp	w0, #0x0
   11704:	mov	w2, #0x4                   	// #4
   11708:	csel	w2, w0, w2, eq  // eq = none
   1170c:	mov	w0, #0x8                   	// #8
   11710:	csel	w0, w2, w0, ge  // ge = tcont
   11714:	orr	w0, w1, w0
   11718:	ldp	x19, x20, [sp, #16]
   1171c:	ldp	x21, x22, [sp, #32]
   11720:	ldr	x23, [sp, #48]
   11724:	ldp	x29, x30, [sp], #64
   11728:	ret

000000000001172c <mpc_sub_fr@@Base>:
   1172c:	stp	x29, x30, [sp, #-48]!
   11730:	mov	x29, sp
   11734:	stp	x19, x20, [sp, #16]
   11738:	mov	x20, x1
   1173c:	stp	x21, x22, [sp, #32]
   11740:	mov	x22, x0
   11744:	mov	w21, w3
   11748:	and	w3, w3, #0xf
   1174c:	bl	4a60 <mpfr_sub@plt>
   11750:	ldr	w3, [x20, #40]
   11754:	mov	w19, w0
   11758:	asr	w2, w21, #4
   1175c:	add	x1, x20, #0x20
   11760:	add	x0, x22, #0x20
   11764:	bl	51d0 <mpfr_set4@plt>
   11768:	cmp	w19, #0x0
   1176c:	mov	w2, #0x2                   	// #2
   11770:	cset	w1, ne  // ne = any
   11774:	csel	w1, w1, w2, ge  // ge = tcont
   11778:	cmp	w0, #0x0
   1177c:	mov	w2, #0x4                   	// #4
   11780:	csel	w2, w0, w2, eq  // eq = none
   11784:	mov	w0, #0x8                   	// #8
   11788:	csel	w0, w2, w0, ge  // ge = tcont
   1178c:	orr	w0, w1, w0
   11790:	ldp	x19, x20, [sp, #16]
   11794:	ldp	x21, x22, [sp, #32]
   11798:	ldp	x29, x30, [sp], #48
   1179c:	ret

00000000000117a0 <mpc_sub_ui@@Base>:
   117a0:	stp	x29, x30, [sp, #-48]!
   117a4:	mov	x29, sp
   117a8:	stp	x19, x20, [sp, #16]
   117ac:	mov	x20, x1
   117b0:	stp	x21, x22, [sp, #32]
   117b4:	mov	x22, x0
   117b8:	mov	w21, w3
   117bc:	and	w3, w3, #0xf
   117c0:	bl	50f0 <mpfr_sub_ui@plt>
   117c4:	ldr	w3, [x20, #40]
   117c8:	mov	w19, w0
   117cc:	asr	w2, w21, #4
   117d0:	add	x1, x20, #0x20
   117d4:	add	x0, x22, #0x20
   117d8:	bl	51d0 <mpfr_set4@plt>
   117dc:	cmp	w19, #0x0
   117e0:	mov	w2, #0x2                   	// #2
   117e4:	cset	w1, ne  // ne = any
   117e8:	csel	w1, w1, w2, ge  // ge = tcont
   117ec:	cmp	w0, #0x0
   117f0:	mov	w2, #0x4                   	// #4
   117f4:	csel	w2, w0, w2, eq  // eq = none
   117f8:	mov	w0, #0x8                   	// #8
   117fc:	csel	w0, w2, w0, ge  // ge = tcont
   11800:	orr	w0, w1, w0
   11804:	ldp	x19, x20, [sp, #16]
   11808:	ldp	x21, x22, [sp, #32]
   1180c:	ldp	x29, x30, [sp], #48
   11810:	ret

0000000000011814 <mpc_swap@@Base>:
   11814:	stp	x29, x30, [sp, #-32]!
   11818:	mov	x29, sp
   1181c:	stp	x19, x20, [sp, #16]
   11820:	mov	x19, x0
   11824:	mov	x20, x1
   11828:	bl	5090 <mpfr_swap@plt>
   1182c:	add	x1, x20, #0x20
   11830:	add	x0, x19, #0x20
   11834:	ldp	x19, x20, [sp, #16]
   11838:	ldp	x29, x30, [sp], #32
   1183c:	b	5090 <mpfr_swap@plt>

0000000000011840 <mpc_tan@@Base>:
   11840:	stp	x29, x30, [sp, #-272]!
   11844:	mov	x29, sp
   11848:	stp	x19, x20, [sp, #16]
   1184c:	mov	x19, x0
   11850:	mov	x20, x1
   11854:	mov	x0, x1
   11858:	stp	x21, x22, [sp, #32]
   1185c:	stp	x23, x24, [sp, #48]
   11860:	mov	w23, w2
   11864:	stp	x25, x26, [sp, #64]
   11868:	stp	x27, x28, [sp, #80]
   1186c:	bl	54d0 <mpfr_number_p@plt>
   11870:	cbnz	w0, 118dc <mpc_tan@@Base+0x9c>
   11874:	ldr	x0, [x20, #16]
   11878:	mov	x2, #0x2                   	// #2
   1187c:	movk	x2, #0x8000, lsl #48
   11880:	cmp	x0, x2
   11884:	ldr	x1, [x20, #48]
   11888:	b.ne	1193c <mpc_tan@@Base+0xfc>  // b.any
   1188c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   11890:	cmp	x1, x0
   11894:	b.ne	11928 <mpc_tan@@Base+0xe8>  // b.any
   11898:	ldr	w0, [x20, #40]
   1189c:	mov	w3, w23
   118a0:	mov	x2, #0x1                   	// #1
   118a4:	mov	x1, #0x0                   	// #0
   118a8:	cmp	w0, #0x0
   118ac:	mov	x0, x19
   118b0:	cneg	x2, x2, lt  // lt = tstop
   118b4:	bl	52c0 <mpc_set_si_si@plt>
   118b8:	mov	w22, w0
   118bc:	mov	w0, w22
   118c0:	ldp	x19, x20, [sp, #16]
   118c4:	ldp	x21, x22, [sp, #32]
   118c8:	ldp	x23, x24, [sp, #48]
   118cc:	ldp	x25, x26, [sp, #64]
   118d0:	ldp	x27, x28, [sp, #80]
   118d4:	ldp	x29, x30, [sp], #272
   118d8:	ret
   118dc:	add	x22, x20, #0x20
   118e0:	mov	x0, x22
   118e4:	bl	54d0 <mpfr_number_p@plt>
   118e8:	cbz	w0, 11874 <mpc_tan@@Base+0x34>
   118ec:	ldr	x1, [x20, #16]
   118f0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   118f4:	asr	w26, w23, #4
   118f8:	cmp	x1, x0
   118fc:	b.ne	11aa8 <mpc_tan@@Base+0x268>  // b.any
   11900:	ldr	w3, [x20, #8]
   11904:	and	w2, w23, #0xf
   11908:	mov	x1, x20
   1190c:	mov	x0, x19
   11910:	bl	51d0 <mpfr_set4@plt>
   11914:	mov	w2, w26
   11918:	mov	x1, x22
   1191c:	add	x0, x19, #0x20
   11920:	bl	4a30 <mpfr_tanh@plt>
   11924:	b	119cc <mpc_tan@@Base+0x18c>
   11928:	mov	x0, x19
   1192c:	bl	4a40 <mpfr_set_nan@plt>
   11930:	add	x0, x19, #0x20
   11934:	bl	4a40 <mpfr_set_nan@plt>
   11938:	b	119d8 <mpc_tan@@Base+0x198>
   1193c:	cmp	x1, x2
   11940:	b.ne	11968 <mpc_tan@@Base+0x128>  // b.any
   11944:	mov	x0, x20
   11948:	bl	51f0 <mpfr_sgn@plt>
   1194c:	mov	w22, w0
   11950:	cbnz	w0, 11928 <mpc_tan@@Base+0xe8>
   11954:	mov	w2, w23
   11958:	mov	x1, x20
   1195c:	mov	x0, x19
   11960:	bl	5580 <mpc_set@plt>
   11964:	b	118bc <mpc_tan@@Base+0x7c>
   11968:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
   1196c:	add	x22, x19, #0x20
   11970:	cmp	x0, x2
   11974:	b.ne	11a00 <mpc_tan@@Base+0x1c0>  // b.any
   11978:	cmp	x1, x0
   1197c:	b.ne	119f0 <mpc_tan@@Base+0x1b0>  // b.any
   11980:	ldr	w0, [x20, #8]
   11984:	mov	w3, #0x1                   	// #1
   11988:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   1198c:	str	w3, [x19, #8]
   11990:	cmp	w0, #0x0
   11994:	str	x1, [x19, #16]
   11998:	cneg	w3, w3, lt  // lt = tstop
   1199c:	mov	x1, x19
   119a0:	mov	w2, #0x0                   	// #0
   119a4:	mov	x0, x19
   119a8:	bl	51d0 <mpfr_set4@plt>
   119ac:	ldr	w0, [x20, #40]
   119b0:	mov	x1, #0x1                   	// #1
   119b4:	asr	w3, w23, #4
   119b8:	mov	x2, #0x0                   	// #0
   119bc:	cmp	w0, #0x0
   119c0:	mov	x0, x22
   119c4:	cneg	x1, x1, lt  // lt = tstop
   119c8:	bl	49e0 <mpfr_set_si_2exp@plt>
   119cc:	cmp	w0, #0x0
   119d0:	b.lt	119e0 <mpc_tan@@Base+0x1a0>  // b.tstop
   119d4:	b.ne	119e8 <mpc_tan@@Base+0x1a8>  // b.any
   119d8:	mov	w22, #0x0                   	// #0
   119dc:	b	118bc <mpc_tan@@Base+0x7c>
   119e0:	mov	w22, #0x8                   	// #8
   119e4:	b	118bc <mpc_tan@@Base+0x7c>
   119e8:	mov	w22, #0x4                   	// #4
   119ec:	b	118bc <mpc_tan@@Base+0x7c>
   119f0:	mov	x0, x19
   119f4:	bl	4a40 <mpfr_set_nan@plt>
   119f8:	mov	x0, x22
   119fc:	b	11934 <mpc_tan@@Base+0xf4>
   11a00:	add	x21, sp, #0x90
   11a04:	add	x24, sp, #0xd0
   11a08:	mov	x0, x21
   11a0c:	bl	4aa0 <mpfr_init@plt>
   11a10:	mov	x0, x24
   11a14:	bl	4aa0 <mpfr_init@plt>
   11a18:	mov	x2, x20
   11a1c:	mov	x1, x21
   11a20:	mov	x0, x24
   11a24:	mov	w3, #0x0                   	// #0
   11a28:	bl	5520 <mpfr_sin_cos@plt>
   11a2c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11a30:	str	x0, [x19, #16]
   11a34:	ldr	w0, [sp, #216]
   11a38:	mov	w3, #0x1                   	// #1
   11a3c:	ldr	w1, [sp, #152]
   11a40:	mov	w2, #0x0                   	// #0
   11a44:	str	w3, [x19, #8]
   11a48:	lsr	w0, w0, #31
   11a4c:	cmp	w0, w1, lsr #31
   11a50:	mov	x1, x19
   11a54:	cneg	w3, w3, ne  // ne = any
   11a58:	mov	x0, x19
   11a5c:	bl	51d0 <mpfr_set4@plt>
   11a60:	ldr	w0, [x20, #40]
   11a64:	asr	w3, w23, #4
   11a68:	mov	x2, #0x0                   	// #0
   11a6c:	mov	x1, #0x1                   	// #1
   11a70:	cmp	w0, #0x0
   11a74:	mov	x0, x22
   11a78:	cneg	x1, x1, lt  // lt = tstop
   11a7c:	bl	49e0 <mpfr_set_si_2exp@plt>
   11a80:	cmp	w0, #0x0
   11a84:	mov	w1, #0x4                   	// #4
   11a88:	csel	w1, w0, w1, eq  // eq = none
   11a8c:	mov	w0, #0x8                   	// #8
   11a90:	csel	w22, w1, w0, ge  // ge = tcont
   11a94:	mov	x0, x24
   11a98:	bl	4d60 <mpfr_clear@plt>
   11a9c:	mov	x0, x21
   11aa0:	bl	4d60 <mpfr_clear@plt>
   11aa4:	b	118bc <mpc_tan@@Base+0x7c>
   11aa8:	ldr	x1, [x20, #48]
   11aac:	cmp	x1, x0
   11ab0:	b.ne	11af0 <mpc_tan@@Base+0x2b0>  // b.any
   11ab4:	and	w2, w23, #0xf
   11ab8:	mov	x1, x20
   11abc:	mov	x0, x19
   11ac0:	bl	4ab0 <mpfr_tan@plt>
   11ac4:	ldr	w3, [x20, #40]
   11ac8:	mov	w21, w0
   11acc:	mov	x1, x22
   11ad0:	mov	w2, w26
   11ad4:	add	x0, x19, #0x20
   11ad8:	bl	51d0 <mpfr_set4@plt>
   11adc:	cmp	w21, #0x0
   11ae0:	mov	w0, #0x2                   	// #2
   11ae4:	cset	w22, ne  // ne = any
   11ae8:	csel	w22, w22, w0, ge  // ge = tcont
   11aec:	b	118bc <mpc_tan@@Base+0x7c>
   11af0:	ldr	x0, [x19]
   11af4:	add	x21, sp, #0x90
   11af8:	ldr	x22, [x19, #32]
   11afc:	add	x25, sp, #0xd0
   11b00:	mov	x1, #0x2                   	// #2
   11b04:	mov	x27, #0x2                   	// #2
   11b08:	cmp	x22, x0
   11b0c:	add	x28, x21, #0x20
   11b10:	csel	x22, x22, x0, ge  // ge = tcont
   11b14:	mov	x0, x21
   11b18:	mov	x24, #0x8000000000000003    	// #-9223372036854775805
   11b1c:	movk	x27, #0x8000, lsl #48
   11b20:	bl	4cf0 <mpc_init2@plt>
   11b24:	mov	x0, x25
   11b28:	mov	x1, #0x2                   	// #2
   11b2c:	bl	4cf0 <mpc_init2@plt>
   11b30:	cmp	w26, #0x0
   11b34:	cset	x0, eq  // eq = none
   11b38:	str	x0, [sp, #136]
   11b3c:	mov	x0, #0x7                   	// #7
   11b40:	str	x0, [sp, #96]
   11b44:	add	x0, x25, #0x20
   11b48:	str	x0, [sp, #128]
   11b4c:	mov	x0, x22
   11b50:	bl	4d20 <mpc_ceil_log2@plt>
   11b54:	ldr	x1, [sp, #96]
   11b58:	add	x0, x0, x1
   11b5c:	add	x22, x22, x0
   11b60:	mov	x0, x21
   11b64:	mov	x1, x22
   11b68:	bl	4c00 <mpc_set_prec@plt>
   11b6c:	mov	x1, x22
   11b70:	mov	x0, x25
   11b74:	bl	4c00 <mpc_set_prec@plt>
   11b78:	mov	w4, #0x11                  	// #17
   11b7c:	mov	x2, x20
   11b80:	mov	w3, w4
   11b84:	mov	x1, x25
   11b88:	mov	x0, x21
   11b8c:	bl	5140 <mpc_sin_cos@plt>
   11b90:	ldr	x0, [sp, #160]
   11b94:	cmp	x0, x24
   11b98:	b.ge	11bbc <mpc_tan@@Base+0x37c>  // b.tcont
   11b9c:	cmp	x0, x27
   11ba0:	b.ne	11ba8 <mpc_tan@@Base+0x368>  // b.any
   11ba4:	bl	4b00 <mpfr_set_erangeflag@plt>
   11ba8:	mov	x0, x21
   11bac:	bl	4bb0 <mpfr_nextbelow@plt>
   11bb0:	b	11bd0 <mpc_tan@@Base+0x390>
   11bb4:	str	x22, [sp, #96]
   11bb8:	b	11b4c <mpc_tan@@Base+0x30c>
   11bbc:	ldr	w0, [sp, #152]
   11bc0:	cmp	w0, #0x0
   11bc4:	b.le	11ba8 <mpc_tan@@Base+0x368>
   11bc8:	mov	x0, x21
   11bcc:	bl	4e00 <mpfr_nextabove@plt>
   11bd0:	ldr	x0, [sp, #192]
   11bd4:	cmp	x0, x24
   11bd8:	b.ge	11bf4 <mpc_tan@@Base+0x3b4>  // b.tcont
   11bdc:	cmp	x0, x27
   11be0:	b.ne	11be8 <mpc_tan@@Base+0x3a8>  // b.any
   11be4:	bl	4b00 <mpfr_set_erangeflag@plt>
   11be8:	mov	x0, x28
   11bec:	bl	4bb0 <mpfr_nextbelow@plt>
   11bf0:	b	11c08 <mpc_tan@@Base+0x3c8>
   11bf4:	ldr	w0, [sp, #184]
   11bf8:	cmp	w0, #0x0
   11bfc:	b.le	11be8 <mpc_tan@@Base+0x3a8>
   11c00:	mov	x0, x28
   11c04:	bl	4e00 <mpfr_nextabove@plt>
   11c08:	ldr	x0, [sp, #224]
   11c0c:	cmp	x0, x24
   11c10:	b.ge	11c2c <mpc_tan@@Base+0x3ec>  // b.tcont
   11c14:	cmp	x0, x27
   11c18:	b.ne	11c20 <mpc_tan@@Base+0x3e0>  // b.any
   11c1c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11c20:	mov	x0, x25
   11c24:	bl	4bb0 <mpfr_nextbelow@plt>
   11c28:	b	11c40 <mpc_tan@@Base+0x400>
   11c2c:	ldr	w0, [sp, #216]
   11c30:	cmp	w0, #0x0
   11c34:	b.le	11c20 <mpc_tan@@Base+0x3e0>
   11c38:	mov	x0, x25
   11c3c:	bl	4e00 <mpfr_nextabove@plt>
   11c40:	ldr	x0, [sp, #256]
   11c44:	cmp	x0, x24
   11c48:	b.ge	11c64 <mpc_tan@@Base+0x424>  // b.tcont
   11c4c:	cmp	x0, x27
   11c50:	b.ne	11c58 <mpc_tan@@Base+0x418>  // b.any
   11c54:	bl	4b00 <mpfr_set_erangeflag@plt>
   11c58:	ldr	x0, [sp, #128]
   11c5c:	bl	4bb0 <mpfr_nextbelow@plt>
   11c60:	b	11c78 <mpc_tan@@Base+0x438>
   11c64:	ldr	w0, [sp, #248]
   11c68:	cmp	w0, #0x0
   11c6c:	b.le	11c58 <mpc_tan@@Base+0x418>
   11c70:	ldr	x0, [sp, #128]
   11c74:	bl	4e00 <mpfr_nextabove@plt>
   11c78:	ldr	x0, [sp, #160]
   11c7c:	str	x0, [sp, #96]
   11c80:	mov	x4, #0x8000000000000001    	// #-9223372036854775807
   11c84:	cmp	x0, x4
   11c88:	b.ne	11cbc <mpc_tan@@Base+0x47c>  // b.any
   11c8c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
   11c90:	add	x4, x4, #0x906
   11c94:	mov	w3, #0xc9                  	// #201
   11c98:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12e64>
   11c9c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xe64>
   11ca0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xe64>
   11ca4:	add	x2, x2, #0x62d
   11ca8:	ldr	x0, [x0, #4008]
   11cac:	add	x1, x1, #0x5f3
   11cb0:	ldr	x0, [x0]
   11cb4:	bl	55a0 <fprintf@plt>
   11cb8:	bl	5000 <abort@plt>
   11cbc:	ldr	x0, [sp, #96]
   11cc0:	cmp	x0, x24
   11cc4:	b.eq	11cf4 <mpc_tan@@Base+0x4b4>  // b.none
   11cc8:	ldr	x0, [sp, #192]
   11ccc:	cmp	x0, x24
   11cd0:	b.eq	11cf4 <mpc_tan@@Base+0x4b4>  // b.none
   11cd4:	ldr	x0, [sp, #224]
   11cd8:	str	x0, [sp, #104]
   11cdc:	cmp	x0, x24
   11ce0:	b.eq	11cf4 <mpc_tan@@Base+0x4b4>  // b.none
   11ce4:	ldr	x0, [sp, #256]
   11ce8:	str	x0, [sp, #112]
   11cec:	cmp	x0, x24
   11cf0:	b.ne	11e98 <mpc_tan@@Base+0x658>  // b.any
   11cf4:	mov	w0, #0x1                   	// #1
   11cf8:	str	w0, [x19, #8]
   11cfc:	ldr	x1, [sp, #96]
   11d00:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11d04:	str	x0, [x19, #16]
   11d08:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   11d0c:	cmp	x1, x0
   11d10:	b.ge	11d30 <mpc_tan@@Base+0x4f0>  // b.tcont
   11d14:	mov	x0, #0x2                   	// #2
   11d18:	movk	x0, #0x8000, lsl #48
   11d1c:	cmp	x1, x0
   11d20:	b.ne	11d28 <mpc_tan@@Base+0x4e8>  // b.any
   11d24:	bl	4b00 <mpfr_set_erangeflag@plt>
   11d28:	mov	w0, #0x0                   	// #0
   11d2c:	b	11d34 <mpc_tan@@Base+0x4f4>
   11d30:	ldr	w0, [sp, #152]
   11d34:	ldr	x1, [sp, #224]
   11d38:	mov	x2, #0x8000000000000003    	// #-9223372036854775805
   11d3c:	cmp	x1, x2
   11d40:	b.ge	11d60 <mpc_tan@@Base+0x520>  // b.tcont
   11d44:	mov	x0, #0x2                   	// #2
   11d48:	movk	x0, #0x8000, lsl #48
   11d4c:	cmp	x1, x0
   11d50:	b.ne	11d58 <mpc_tan@@Base+0x518>  // b.any
   11d54:	bl	4b00 <mpfr_set_erangeflag@plt>
   11d58:	mov	w24, #0xffffffff            	// #-1
   11d5c:	b	11d80 <mpc_tan@@Base+0x540>
   11d60:	ldr	w1, [sp, #216]
   11d64:	mul	w0, w0, w1
   11d68:	tbz	w0, #31, 11d58 <mpc_tan@@Base+0x518>
   11d6c:	mov	w24, #0x1                   	// #1
   11d70:	mov	x1, x19
   11d74:	mov	x0, x19
   11d78:	mov	w2, #0x0                   	// #0
   11d7c:	bl	4b80 <mpfr_neg@plt>
   11d80:	ldr	x0, [x20, #48]
   11d84:	mov	x1, #0x8000000000000003    	// #-9223372036854775805
   11d88:	add	x22, x19, #0x20
   11d8c:	cmp	x0, x1
   11d90:	b.ge	11dc4 <mpc_tan@@Base+0x584>  // b.tcont
   11d94:	mov	x1, #0x2                   	// #2
   11d98:	movk	x1, #0x8000, lsl #48
   11d9c:	cmp	x0, x1
   11da0:	b.ne	11da8 <mpc_tan@@Base+0x568>  // b.any
   11da4:	bl	4b00 <mpfr_set_erangeflag@plt>
   11da8:	mov	x0, x22
   11dac:	mov	w3, #0x0                   	// #0
   11db0:	mov	x2, #0x0                   	// #0
   11db4:	mov	x1, #0xffffffffffffffff    	// #-1
   11db8:	mov	w20, #0xffffffff            	// #-1
   11dbc:	bl	49e0 <mpfr_set_si_2exp@plt>
   11dc0:	b	11de8 <mpc_tan@@Base+0x5a8>
   11dc4:	ldr	w0, [x20, #40]
   11dc8:	cmp	w0, #0x0
   11dcc:	b.le	11da8 <mpc_tan@@Base+0x568>
   11dd0:	mov	w20, #0x1                   	// #1
   11dd4:	mov	x0, x22
   11dd8:	mov	w3, #0x0                   	// #0
   11ddc:	mov	x2, #0x0                   	// #0
   11de0:	mov	x1, #0x1                   	// #1
   11de4:	bl	5130 <mpfr_set_ui_2exp@plt>
   11de8:	cmp	w26, #0x1
   11dec:	b.eq	11e0c <mpc_tan@@Base+0x5cc>  // b.none
   11df0:	ldr	w0, [x19, #40]
   11df4:	tbz	w0, #31, 11e04 <mpc_tan@@Base+0x5c4>
   11df8:	cmp	w26, #0x2
   11dfc:	b.eq	11e0c <mpc_tan@@Base+0x5cc>  // b.none
   11e00:	tbnz	w0, #31, 11e1c <mpc_tan@@Base+0x5dc>
   11e04:	cmp	w26, #0x3
   11e08:	b.ne	11e1c <mpc_tan@@Base+0x5dc>  // b.any
   11e0c:	neg	w20, w20
   11e10:	mov	x1, x19
   11e14:	mov	x0, x22
   11e18:	bl	51c0 <mpfr_nexttoward@plt>
   11e1c:	ldr	x1, [x19, #16]
   11e20:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11e24:	cmp	x1, x0
   11e28:	b.ne	11e3c <mpc_tan@@Base+0x5fc>  // b.any
   11e2c:	and	w1, w23, #0xf
   11e30:	mov	x0, x19
   11e34:	bl	50d0 <mpc_fix_zero@plt>
   11e38:	mov	w24, w0
   11e3c:	ldr	x1, [x19, #48]
   11e40:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11e44:	cmp	x1, x0
   11e48:	b.ne	11e5c <mpc_tan@@Base+0x61c>  // b.any
   11e4c:	mov	w1, w26
   11e50:	mov	x0, x22
   11e54:	bl	50d0 <mpc_fix_zero@plt>
   11e58:	mov	w20, w0
   11e5c:	cmp	w24, #0x0
   11e60:	mov	w0, #0x2                   	// #2
   11e64:	cset	w22, ne  // ne = any
   11e68:	csel	w22, w22, w0, ge  // ge = tcont
   11e6c:	cmp	w20, #0x0
   11e70:	mov	w0, #0x4                   	// #4
   11e74:	csel	w0, w20, w0, eq  // eq = none
   11e78:	mov	w20, #0x8                   	// #8
   11e7c:	csel	w20, w0, w20, ge  // ge = tcont
   11e80:	orr	w22, w22, w20
   11e84:	mov	x0, x21
   11e88:	bl	4a10 <mpc_clear@plt>
   11e8c:	mov	x0, x25
   11e90:	bl	4a10 <mpc_clear@plt>
   11e94:	b	118bc <mpc_tan@@Base+0x7c>
   11e98:	mov	x2, x25
   11e9c:	mov	x1, x21
   11ea0:	mov	x0, x21
   11ea4:	mov	w3, #0x11                  	// #17
   11ea8:	bl	5250 <mpc_div@plt>
   11eac:	str	w0, [sp, #120]
   11eb0:	ldr	x0, [sp, #160]
   11eb4:	mov	x4, #0x8000000000000001    	// #-9223372036854775807
   11eb8:	cmp	x0, x4
   11ebc:	b.eq	11bb4 <mpc_tan@@Base+0x374>  // b.none
   11ec0:	ldr	x1, [sp, #192]
   11ec4:	cmp	x1, x4
   11ec8:	b.eq	11bb4 <mpc_tan@@Base+0x374>  // b.none
   11ecc:	ldr	x1, [sp, #120]
   11ed0:	tst	x1, #0x3
   11ed4:	b.eq	11f0c <mpc_tan@@Base+0x6cc>  // b.none
   11ed8:	cmp	x0, x24
   11edc:	b.ge	11ef8 <mpc_tan@@Base+0x6b8>  // b.tcont
   11ee0:	cmp	x0, x27
   11ee4:	b.ne	11eec <mpc_tan@@Base+0x6ac>  // b.any
   11ee8:	bl	4b00 <mpfr_set_erangeflag@plt>
   11eec:	mov	x0, x21
   11ef0:	bl	4bb0 <mpfr_nextbelow@plt>
   11ef4:	b	11f0c <mpc_tan@@Base+0x6cc>
   11ef8:	ldr	w0, [sp, #152]
   11efc:	cmp	w0, #0x0
   11f00:	b.le	11eec <mpc_tan@@Base+0x6ac>
   11f04:	mov	x0, x21
   11f08:	bl	4e00 <mpfr_nextabove@plt>
   11f0c:	ldr	w0, [sp, #120]
   11f10:	cmp	wzr, w0, lsr #2
   11f14:	b.eq	11f50 <mpc_tan@@Base+0x710>  // b.none
   11f18:	ldr	x0, [sp, #192]
   11f1c:	cmp	x0, x24
   11f20:	b.ge	11f3c <mpc_tan@@Base+0x6fc>  // b.tcont
   11f24:	cmp	x0, x27
   11f28:	b.ne	11f30 <mpc_tan@@Base+0x6f0>  // b.any
   11f2c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11f30:	mov	x0, x28
   11f34:	bl	4bb0 <mpfr_nextbelow@plt>
   11f38:	b	11f50 <mpc_tan@@Base+0x710>
   11f3c:	ldr	w0, [sp, #184]
   11f40:	cmp	w0, #0x0
   11f44:	b.le	11f30 <mpc_tan@@Base+0x6f0>
   11f48:	mov	x0, x28
   11f4c:	bl	4e00 <mpfr_nextabove@plt>
   11f50:	ldr	x0, [sp, #160]
   11f54:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   11f58:	cmp	x0, x1
   11f5c:	b.ne	11f70 <mpc_tan@@Base+0x730>  // b.any
   11f60:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xe64>
   11f64:	mov	w3, #0x107                 	// #263
   11f68:	add	x4, x4, #0x906
   11f6c:	b	11c98 <mpc_tan@@Base+0x458>
   11f70:	ldp	x2, x1, [sp, #104]
   11f74:	sub	x1, x2, x1, lsl #1
   11f78:	neg	x2, x2
   11f7c:	cmp	x1, x2
   11f80:	csel	x1, x1, x2, ge  // ge = tcont
   11f84:	ldr	x2, [sp, #96]
   11f88:	sub	x0, x2, x0
   11f8c:	add	x1, x1, x0
   11f90:	cmp	x1, #0x1
   11f94:	b.le	12000 <mpc_tan@@Base+0x7c0>
   11f98:	add	x2, x1, #0x5
   11f9c:	cmp	x1, #0x2
   11fa0:	mov	x0, #0x8                   	// #8
   11fa4:	csel	x0, x2, x0, ne  // ne = any
   11fa8:	str	x0, [sp, #96]
   11fac:	mov	x0, x21
   11fb0:	bl	54d0 <mpfr_number_p@plt>
   11fb4:	cbnz	w0, 12008 <mpc_tan@@Base+0x7c8>
   11fb8:	mov	x0, x28
   11fbc:	bl	54d0 <mpfr_number_p@plt>
   11fc0:	cbz	w0, 11fe8 <mpc_tan@@Base+0x7a8>
   11fc4:	ldr	x4, [x19, #32]
   11fc8:	sub	x1, x22, #0x6
   11fcc:	ldr	x0, [sp, #136]
   11fd0:	mov	w3, #0x1                   	// #1
   11fd4:	mov	w2, #0x0                   	// #0
   11fd8:	add	x4, x0, x4
   11fdc:	mov	x0, x28
   11fe0:	bl	5450 <mpfr_can_round@plt>
   11fe4:	cbz	w0, 11b4c <mpc_tan@@Base+0x30c>
   11fe8:	mov	w2, w23
   11fec:	mov	x1, x21
   11ff0:	mov	x0, x19
   11ff4:	bl	5580 <mpc_set@plt>
   11ff8:	mov	w22, w0
   11ffc:	b	11e84 <mpc_tan@@Base+0x644>
   12000:	mov	x0, #0x7                   	// #7
   12004:	b	11fa8 <mpc_tan@@Base+0x768>
   12008:	tst	x23, #0xf
   1200c:	mov	w3, #0x1                   	// #1
   12010:	ldr	x4, [x19]
   12014:	mov	w2, #0x0                   	// #0
   12018:	ldr	x0, [sp, #96]
   1201c:	cinc	x4, x4, eq  // eq = none
   12020:	sub	x1, x22, x0
   12024:	mov	x0, x21
   12028:	bl	5450 <mpfr_can_round@plt>
   1202c:	cbnz	w0, 11fb8 <mpc_tan@@Base+0x778>
   12030:	b	11b4c <mpc_tan@@Base+0x30c>

0000000000012034 <mpc_tanh@@Base>:
   12034:	stp	x29, x30, [sp, #-160]!
   12038:	mov	x29, sp
   1203c:	stp	x19, x20, [sp, #16]
   12040:	mov	x19, x0
   12044:	ldp	x4, x5, [x1, #32]
   12048:	stp	x4, x5, [sp, #32]
   1204c:	ldp	x4, x5, [x1, #48]
   12050:	stp	x4, x5, [sp, #48]
   12054:	ldp	x4, x5, [x1]
   12058:	stp	x4, x5, [sp, #64]
   1205c:	ldp	x0, x1, [x1, #16]
   12060:	stp	x0, x1, [sp, #80]
   12064:	ldp	x0, x1, [x19, #32]
   12068:	stp	x0, x1, [sp, #96]
   1206c:	ldp	x0, x1, [x19, #48]
   12070:	stp	x0, x1, [sp, #112]
   12074:	ldp	x0, x1, [x19]
   12078:	stp	x0, x1, [sp, #128]
   1207c:	ldp	x0, x1, [x19, #16]
   12080:	stp	x0, x1, [sp, #144]
   12084:	ubfiz	w0, w2, #4, #4
   12088:	add	x1, sp, #0x20
   1208c:	add	w2, w0, w2, asr #4
   12090:	add	x0, sp, #0x60
   12094:	bl	4c20 <mpc_tan@plt>
   12098:	asr	w1, w0, #2
   1209c:	ldp	x2, x3, [sp, #128]
   120a0:	stp	x2, x3, [x19]
   120a4:	cmp	w1, #0x2
   120a8:	ldp	x2, x3, [sp, #144]
   120ac:	stp	x2, x3, [x19, #16]
   120b0:	ldp	x2, x3, [sp, #96]
   120b4:	stp	x2, x3, [x19, #32]
   120b8:	ldp	x2, x3, [sp, #112]
   120bc:	stp	x2, x3, [x19, #48]
   120c0:	b.eq	120cc <mpc_tanh@@Base+0x98>  // b.none
   120c4:	cmp	w1, #0x0
   120c8:	cset	w1, ne  // ne = any
   120cc:	and	w0, w0, #0x3
   120d0:	cmp	w0, #0x2
   120d4:	b.eq	120f4 <mpc_tanh@@Base+0xc0>  // b.none
   120d8:	cmp	w0, #0x0
   120dc:	mov	w2, #0x4                   	// #4
   120e0:	csel	w0, w0, w2, eq  // eq = none
   120e4:	orr	w0, w1, w0
   120e8:	ldp	x19, x20, [sp, #16]
   120ec:	ldp	x29, x30, [sp], #160
   120f0:	ret
   120f4:	mov	w0, #0x8                   	// #8
   120f8:	b	120e4 <mpc_tanh@@Base+0xb0>

00000000000120fc <mpc_ceil_log2@@Base>:
   120fc:	mov	x1, x0
   12100:	mov	x0, #0x0                   	// #0
   12104:	cmp	x1, #0x1
   12108:	b.gt	12110 <mpc_ceil_log2@@Base+0x14>
   1210c:	ret
   12110:	add	x1, x1, #0x1
   12114:	add	x0, x0, #0x1
   12118:	asr	x1, x1, #1
   1211c:	b	12104 <mpc_ceil_log2@@Base+0x8>

0000000000012120 <mpc_ui_div@@Base>:
   12120:	stp	x29, x30, [sp, #-128]!
   12124:	mov	x29, sp
   12128:	stp	x19, x20, [sp, #16]
   1212c:	add	x19, sp, #0x40
   12130:	mov	w20, w3
   12134:	stp	x21, x22, [sp, #32]
   12138:	mov	x22, x2
   1213c:	mov	x21, x0
   12140:	mov	x0, x19
   12144:	str	x23, [sp, #48]
   12148:	mov	x23, x1
   1214c:	mov	x1, #0x40                  	// #64
   12150:	bl	4cf0 <mpc_init2@plt>
   12154:	mov	w2, w20
   12158:	mov	x1, x23
   1215c:	mov	x0, x19
   12160:	bl	4ce0 <mpc_set_ui@plt>
   12164:	mov	w3, w20
   12168:	mov	x2, x22
   1216c:	mov	x1, x19
   12170:	mov	x0, x21
   12174:	bl	5250 <mpc_div@plt>
   12178:	mov	w20, w0
   1217c:	mov	x0, x19
   12180:	bl	4a10 <mpc_clear@plt>
   12184:	mov	w0, w20
   12188:	ldp	x19, x20, [sp, #16]
   1218c:	ldp	x21, x22, [sp, #32]
   12190:	ldr	x23, [sp, #48]
   12194:	ldp	x29, x30, [sp], #128
   12198:	ret

000000000001219c <mpc_ui_ui_sub@@Base>:
   1219c:	stp	x29, x30, [sp, #-64]!
   121a0:	mov	x29, sp
   121a4:	stp	x19, x20, [sp, #16]
   121a8:	mov	x20, x3
   121ac:	and	w3, w4, #0xf
   121b0:	stp	x21, x22, [sp, #32]
   121b4:	mov	w21, w4
   121b8:	mov	x22, x0
   121bc:	str	x23, [sp, #48]
   121c0:	mov	x23, x2
   121c4:	mov	x2, x20
   121c8:	bl	5430 <mpfr_ui_sub@plt>
   121cc:	asr	w3, w21, #4
   121d0:	mov	w19, w0
   121d4:	add	x2, x20, #0x20
   121d8:	mov	x1, x23
   121dc:	add	x0, x22, #0x20
   121e0:	bl	5430 <mpfr_ui_sub@plt>
   121e4:	cmp	w19, #0x0
   121e8:	mov	w2, #0x2                   	// #2
   121ec:	cset	w1, ne  // ne = any
   121f0:	csel	w1, w1, w2, ge  // ge = tcont
   121f4:	cmp	w0, #0x0
   121f8:	mov	w2, #0x4                   	// #4
   121fc:	csel	w2, w0, w2, eq  // eq = none
   12200:	mov	w0, #0x8                   	// #8
   12204:	csel	w0, w2, w0, ge  // ge = tcont
   12208:	orr	w0, w1, w0
   1220c:	ldp	x19, x20, [sp, #16]
   12210:	ldp	x21, x22, [sp, #32]
   12214:	ldr	x23, [sp, #48]
   12218:	ldp	x29, x30, [sp], #64
   1221c:	ret
   12220:	stp	x29, x30, [sp, #-48]!
   12224:	mov	x29, sp
   12228:	str	q0, [sp, #16]
   1222c:	str	q1, [sp, #32]
   12230:	ldp	x6, x1, [sp, #16]
   12234:	ldp	x0, x3, [sp, #32]
   12238:	mrs	x15, fpcr
   1223c:	lsr	x7, x1, #63
   12240:	mov	x10, x0
   12244:	ubfiz	x4, x3, #3, #48
   12248:	lsr	x5, x3, #63
   1224c:	mov	x12, x7
   12250:	ubfiz	x2, x1, #3, #48
   12254:	orr	x4, x4, x0, lsr #61
   12258:	ubfx	x8, x1, #48, #15
   1225c:	ubfx	x0, x3, #48, #15
   12260:	and	w7, w7, #0xff
   12264:	mov	x16, x12
   12268:	cmp	x12, x5
   1226c:	and	w11, w5, #0xff
   12270:	orr	x2, x2, x6, lsr #61
   12274:	mov	x1, x8
   12278:	lsl	x9, x6, #3
   1227c:	mov	x3, x0
   12280:	lsl	x13, x10, #3
   12284:	b.eq	12430 <mpc_ui_ui_sub@@Base+0x294>  // b.none
   12288:	sub	w0, w8, w0
   1228c:	cmp	w0, #0x0
   12290:	b.le	123dc <mpc_ui_ui_sub@@Base+0x240>
   12294:	cbz	x3, 12490 <mpc_ui_ui_sub@@Base+0x2f4>
   12298:	orr	x4, x4, #0x8000000000000
   1229c:	mov	x3, #0x7fff                	// #32767
   122a0:	cmp	x1, x3
   122a4:	b.eq	12694 <mpc_ui_ui_sub@@Base+0x4f8>  // b.none
   122a8:	cmp	w0, #0x74
   122ac:	b.gt	12718 <mpc_ui_ui_sub@@Base+0x57c>
   122b0:	cmp	w0, #0x3f
   122b4:	b.gt	12878 <mpc_ui_ui_sub@@Base+0x6dc>
   122b8:	mov	w3, #0x40                  	// #64
   122bc:	sub	w3, w3, w0
   122c0:	lsr	x6, x13, x0
   122c4:	lsl	x13, x13, x3
   122c8:	cmp	x13, #0x0
   122cc:	cset	x5, ne  // ne = any
   122d0:	lsl	x3, x4, x3
   122d4:	orr	x3, x3, x6
   122d8:	lsr	x0, x4, x0
   122dc:	orr	x3, x3, x5
   122e0:	sub	x2, x2, x0
   122e4:	subs	x9, x9, x3
   122e8:	sbc	x2, x2, xzr
   122ec:	and	x3, x2, #0x7ffffffffffff
   122f0:	tbz	x2, #51, 124d0 <mpc_ui_ui_sub@@Base+0x334>
   122f4:	cbz	x3, 126fc <mpc_ui_ui_sub@@Base+0x560>
   122f8:	clz	x0, x3
   122fc:	sub	w0, w0, #0xc
   12300:	neg	w2, w0
   12304:	lsl	x4, x3, x0
   12308:	lsl	x3, x9, x0
   1230c:	lsr	x9, x9, x2
   12310:	orr	x2, x9, x4
   12314:	cmp	x1, w0, sxtw
   12318:	sxtw	x4, w0
   1231c:	b.gt	126dc <mpc_ui_ui_sub@@Base+0x540>
   12320:	sub	w1, w0, w1
   12324:	add	w0, w1, #0x1
   12328:	cmp	w0, #0x3f
   1232c:	b.gt	12840 <mpc_ui_ui_sub@@Base+0x6a4>
   12330:	mov	w1, #0x40                  	// #64
   12334:	sub	w1, w1, w0
   12338:	lsr	x4, x3, x0
   1233c:	lsl	x3, x3, x1
   12340:	cmp	x3, #0x0
   12344:	lsl	x9, x2, x1
   12348:	cset	x1, ne  // ne = any
   1234c:	orr	x9, x9, x4
   12350:	lsr	x2, x2, x0
   12354:	orr	x9, x9, x1
   12358:	orr	x8, x9, x2
   1235c:	cbz	x8, 124e4 <mpc_ui_ui_sub@@Base+0x348>
   12360:	and	x0, x9, #0x7
   12364:	mov	x1, #0x0                   	// #0
   12368:	mov	w5, #0x1                   	// #1
   1236c:	cbz	x0, 12728 <mpc_ui_ui_sub@@Base+0x58c>
   12370:	and	x3, x15, #0xc00000
   12374:	cmp	x3, #0x400, lsl #12
   12378:	b.eq	1266c <mpc_ui_ui_sub@@Base+0x4d0>  // b.none
   1237c:	cmp	x3, #0x800, lsl #12
   12380:	b.eq	1264c <mpc_ui_ui_sub@@Base+0x4b0>  // b.none
   12384:	cbz	x3, 12678 <mpc_ui_ui_sub@@Base+0x4dc>
   12388:	and	x3, x2, #0x8000000000000
   1238c:	mov	w0, #0x10                  	// #16
   12390:	cbz	w5, 12398 <mpc_ui_ui_sub@@Base+0x1fc>
   12394:	orr	w0, w0, #0x8
   12398:	cbz	x3, 126b0 <mpc_ui_ui_sub@@Base+0x514>
   1239c:	add	x1, x1, #0x1
   123a0:	mov	x3, #0x7fff                	// #32767
   123a4:	cmp	x1, x3
   123a8:	b.eq	12594 <mpc_ui_ui_sub@@Base+0x3f8>  // b.none
   123ac:	and	w1, w1, #0x7fff
   123b0:	extr	x8, x2, x9, #3
   123b4:	ubfx	x2, x2, #3, #48
   123b8:	mov	x5, #0x0                   	// #0
   123bc:	orr	w1, w1, w7, lsl #15
   123c0:	bfxil	x5, x2, #0, #48
   123c4:	fmov	d0, x8
   123c8:	bfi	x5, x1, #48, #16
   123cc:	fmov	v0.d[1], x5
   123d0:	cbnz	w0, 125f0 <mpc_ui_ui_sub@@Base+0x454>
   123d4:	ldp	x29, x30, [sp], #48
   123d8:	ret
   123dc:	mov	x14, x5
   123e0:	b.eq	124fc <mpc_ui_ui_sub@@Base+0x360>  // b.none
   123e4:	cbnz	x8, 12780 <mpc_ui_ui_sub@@Base+0x5e4>
   123e8:	orr	x1, x2, x9
   123ec:	cbz	x1, 124ac <mpc_ui_ui_sub@@Base+0x310>
   123f0:	cmn	w0, #0x1
   123f4:	b.eq	12b9c <mpc_ui_ui_sub@@Base+0xa00>  // b.none
   123f8:	mov	x1, #0x7fff                	// #32767
   123fc:	mvn	w0, w0
   12400:	cmp	x3, x1
   12404:	b.ne	12794 <mpc_ui_ui_sub@@Base+0x5f8>  // b.any
   12408:	orr	x0, x4, x13
   1240c:	cbnz	x0, 12af4 <mpc_ui_ui_sub@@Base+0x958>
   12410:	mov	x16, x14
   12414:	nop
   12418:	mov	x4, #0x0                   	// #0
   1241c:	fmov	d0, x4
   12420:	lsl	x16, x16, #63
   12424:	orr	x5, x16, #0x7fff000000000000
   12428:	fmov	v0.d[1], x5
   1242c:	b	123d4 <mpc_ui_ui_sub@@Base+0x238>
   12430:	sub	w5, w8, w0
   12434:	cmp	w5, #0x0
   12438:	b.le	12604 <mpc_ui_ui_sub@@Base+0x468>
   1243c:	cbz	x0, 12544 <mpc_ui_ui_sub@@Base+0x3a8>
   12440:	orr	x4, x4, #0x8000000000000
   12444:	mov	x0, #0x7fff                	// #32767
   12448:	cmp	x1, x0
   1244c:	b.eq	12694 <mpc_ui_ui_sub@@Base+0x4f8>  // b.none
   12450:	cmp	w5, #0x74
   12454:	b.gt	12828 <mpc_ui_ui_sub@@Base+0x68c>
   12458:	cmp	w5, #0x3f
   1245c:	b.gt	12928 <mpc_ui_ui_sub@@Base+0x78c>
   12460:	mov	w0, #0x40                  	// #64
   12464:	sub	w0, w0, w5
   12468:	lsr	x6, x13, x5
   1246c:	lsl	x13, x13, x0
   12470:	cmp	x13, #0x0
   12474:	lsl	x0, x4, x0
   12478:	cset	x3, ne  // ne = any
   1247c:	orr	x0, x0, x6
   12480:	lsr	x4, x4, x5
   12484:	orr	x0, x0, x3
   12488:	add	x2, x2, x4
   1248c:	b	12834 <mpc_ui_ui_sub@@Base+0x698>
   12490:	orr	x3, x4, x13
   12494:	cbz	x3, 12804 <mpc_ui_ui_sub@@Base+0x668>
   12498:	subs	w0, w0, #0x1
   1249c:	b.ne	1229c <mpc_ui_ui_sub@@Base+0x100>  // b.any
   124a0:	subs	x9, x9, x13
   124a4:	sbc	x2, x2, x4
   124a8:	b	122ec <mpc_ui_ui_sub@@Base+0x150>
   124ac:	mov	x0, #0x7fff                	// #32767
   124b0:	cmp	x3, x0
   124b4:	b.eq	12be8 <mpc_ui_ui_sub@@Base+0xa4c>  // b.none
   124b8:	mov	w7, w11
   124bc:	mov	x2, x4
   124c0:	mov	x9, x13
   124c4:	mov	x1, x3
   124c8:	mov	x12, x5
   124cc:	nop
   124d0:	orr	x8, x9, x2
   124d4:	and	x0, x9, #0x7
   124d8:	mov	w5, #0x0                   	// #0
   124dc:	cbnz	x1, 1236c <mpc_ui_ui_sub@@Base+0x1d0>
   124e0:	cbnz	x8, 12360 <mpc_ui_ui_sub@@Base+0x1c4>
   124e4:	mov	x2, #0x0                   	// #0
   124e8:	mov	x1, #0x0                   	// #0
   124ec:	mov	w0, #0x0                   	// #0
   124f0:	and	x2, x2, #0xffffffffffff
   124f4:	and	w1, w1, #0x7fff
   124f8:	b	123b8 <mpc_ui_ui_sub@@Base+0x21c>
   124fc:	add	x5, x8, #0x1
   12500:	tst	x5, #0x7ffe
   12504:	b.ne	127d4 <mpc_ui_ui_sub@@Base+0x638>  // b.any
   12508:	orr	x5, x2, x9
   1250c:	orr	x8, x4, x13
   12510:	cbnz	x1, 12994 <mpc_ui_ui_sub@@Base+0x7f8>
   12514:	cbz	x5, 12a3c <mpc_ui_ui_sub@@Base+0x8a0>
   12518:	cbz	x8, 12a50 <mpc_ui_ui_sub@@Base+0x8b4>
   1251c:	subs	x5, x9, x13
   12520:	cmp	x9, x13
   12524:	sbc	x3, x2, x4
   12528:	tbz	x3, #51, 12c1c <mpc_ui_ui_sub@@Base+0xa80>
   1252c:	subs	x9, x13, x9
   12530:	mov	w7, w11
   12534:	sbc	x2, x4, x2
   12538:	mov	x12, x14
   1253c:	orr	x8, x9, x2
   12540:	b	1235c <mpc_ui_ui_sub@@Base+0x1c0>
   12544:	orr	x0, x4, x13
   12548:	cbz	x0, 12a1c <mpc_ui_ui_sub@@Base+0x880>
   1254c:	subs	w5, w5, #0x1
   12550:	b.ne	12444 <mpc_ui_ui_sub@@Base+0x2a8>  // b.any
   12554:	adds	x9, x9, x13
   12558:	adc	x2, x4, x2
   1255c:	nop
   12560:	tbz	x2, #51, 124d0 <mpc_ui_ui_sub@@Base+0x334>
   12564:	add	x1, x1, #0x1
   12568:	mov	x0, #0x7fff                	// #32767
   1256c:	cmp	x1, x0
   12570:	b.eq	12a5c <mpc_ui_ui_sub@@Base+0x8c0>  // b.none
   12574:	and	x0, x9, #0x1
   12578:	and	x3, x2, #0xfff7ffffffffffff
   1257c:	orr	x9, x0, x9, lsr #1
   12580:	mov	w5, #0x0                   	// #0
   12584:	orr	x9, x9, x2, lsl #63
   12588:	lsr	x2, x3, #1
   1258c:	and	x0, x9, #0x7
   12590:	b	1236c <mpc_ui_ui_sub@@Base+0x1d0>
   12594:	and	x3, x15, #0xc00000
   12598:	cbz	x3, 125d0 <mpc_ui_ui_sub@@Base+0x434>
   1259c:	cmp	x3, #0x400, lsl #12
   125a0:	b.eq	125c8 <mpc_ui_ui_sub@@Base+0x42c>  // b.none
   125a4:	cmp	x3, #0x800, lsl #12
   125a8:	csel	w12, w12, wzr, eq  // eq = none
   125ac:	cbnz	w12, 125d0 <mpc_ui_ui_sub@@Base+0x434>
   125b0:	mov	w1, #0x14                  	// #20
   125b4:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
   125b8:	orr	w0, w0, w1
   125bc:	mov	x8, #0xffffffffffffffff    	// #-1
   125c0:	mov	x1, #0x7ffe                	// #32766
   125c4:	b	124f0 <mpc_ui_ui_sub@@Base+0x354>
   125c8:	cbnz	x12, 125b0 <mpc_ui_ui_sub@@Base+0x414>
   125cc:	nop
   125d0:	mov	w1, #0x14                  	// #20
   125d4:	and	x16, x7, #0xff
   125d8:	orr	w0, w0, w1
   125dc:	mov	x4, #0x0                   	// #0
   125e0:	fmov	d0, x4
   125e4:	lsl	x16, x16, #63
   125e8:	orr	x5, x16, #0x7fff000000000000
   125ec:	fmov	v0.d[1], x5
   125f0:	str	q0, [sp, #16]
   125f4:	bl	13530 <mpc_ui_ui_sub@@Base+0x1394>
   125f8:	ldr	q0, [sp, #16]
   125fc:	ldp	x29, x30, [sp], #48
   12600:	ret
   12604:	b.eq	12744 <mpc_ui_ui_sub@@Base+0x5a8>  // b.none
   12608:	cbnz	x8, 128c8 <mpc_ui_ui_sub@@Base+0x72c>
   1260c:	orr	x0, x2, x9
   12610:	cbz	x0, 12b34 <mpc_ui_ui_sub@@Base+0x998>
   12614:	cmn	w5, #0x1
   12618:	b.eq	12c94 <mpc_ui_ui_sub@@Base+0xaf8>  // b.none
   1261c:	mov	x0, #0x7fff                	// #32767
   12620:	mvn	w5, w5
   12624:	cmp	x3, x0
   12628:	b.ne	128dc <mpc_ui_ui_sub@@Base+0x740>  // b.any
   1262c:	orr	x0, x4, x13
   12630:	cbz	x0, 12418 <mpc_ui_ui_sub@@Base+0x27c>
   12634:	lsr	x5, x4, #50
   12638:	mov	x9, x13
   1263c:	eor	x5, x5, #0x1
   12640:	mov	x2, x4
   12644:	and	w5, w5, #0x1
   12648:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   1264c:	mov	w0, #0x10                  	// #16
   12650:	cbz	x12, 1265c <mpc_ui_ui_sub@@Base+0x4c0>
   12654:	adds	x9, x9, #0x8
   12658:	cinc	x2, x2, cs  // cs = hs, nlast
   1265c:	and	x3, x2, #0x8000000000000
   12660:	cbz	w5, 12398 <mpc_ui_ui_sub@@Base+0x1fc>
   12664:	orr	w0, w0, #0x8
   12668:	b	12398 <mpc_ui_ui_sub@@Base+0x1fc>
   1266c:	mov	w0, #0x10                  	// #16
   12670:	cbnz	x12, 1265c <mpc_ui_ui_sub@@Base+0x4c0>
   12674:	b	12654 <mpc_ui_ui_sub@@Base+0x4b8>
   12678:	and	x3, x9, #0xf
   1267c:	mov	w0, #0x10                  	// #16
   12680:	cmp	x3, #0x4
   12684:	b.eq	1265c <mpc_ui_ui_sub@@Base+0x4c0>  // b.none
   12688:	adds	x9, x9, #0x4
   1268c:	cinc	x2, x2, cs  // cs = hs, nlast
   12690:	b	1265c <mpc_ui_ui_sub@@Base+0x4c0>
   12694:	orr	x0, x2, x9
   12698:	cbz	x0, 12418 <mpc_ui_ui_sub@@Base+0x27c>
   1269c:	lsr	x5, x2, #50
   126a0:	eor	x5, x5, #0x1
   126a4:	and	w5, w5, #0x1
   126a8:	mov	w0, w5
   126ac:	mov	x1, #0x7fff                	// #32767
   126b0:	mov	x3, #0x7fff                	// #32767
   126b4:	extr	x8, x2, x9, #3
   126b8:	cmp	x1, x3
   126bc:	lsr	x2, x2, #3
   126c0:	b.ne	124f0 <mpc_ui_ui_sub@@Base+0x354>  // b.any
   126c4:	orr	x1, x8, x2
   126c8:	cbz	x1, 12d34 <mpc_ui_ui_sub@@Base+0xb98>
   126cc:	orr	x2, x2, #0x800000000000
   126d0:	mov	w1, #0x7fff                	// #32767
   126d4:	and	x2, x2, #0xffffffffffff
   126d8:	b	123b8 <mpc_ui_ui_sub@@Base+0x21c>
   126dc:	mov	x9, x3
   126e0:	and	x2, x2, #0xfff7ffffffffffff
   126e4:	sub	x1, x1, x4
   126e8:	orr	x8, x9, x2
   126ec:	and	x0, x9, #0x7
   126f0:	mov	w5, #0x0                   	// #0
   126f4:	cbz	x1, 124e0 <mpc_ui_ui_sub@@Base+0x344>
   126f8:	b	1236c <mpc_ui_ui_sub@@Base+0x1d0>
   126fc:	clz	x2, x9
   12700:	add	w0, w2, #0x34
   12704:	cmp	w0, #0x3f
   12708:	b.le	12300 <mpc_ui_ui_sub@@Base+0x164>
   1270c:	sub	w2, w2, #0xc
   12710:	lsl	x2, x9, x2
   12714:	b	12314 <mpc_ui_ui_sub@@Base+0x178>
   12718:	orr	x4, x4, x13
   1271c:	cmp	x4, #0x0
   12720:	cset	x3, ne  // ne = any
   12724:	b	122e4 <mpc_ui_ui_sub@@Base+0x148>
   12728:	and	x3, x2, #0x8000000000000
   1272c:	mov	w0, #0x0                   	// #0
   12730:	cbz	w5, 12398 <mpc_ui_ui_sub@@Base+0x1fc>
   12734:	mov	w0, #0x0                   	// #0
   12738:	tbz	w15, #11, 12398 <mpc_ui_ui_sub@@Base+0x1fc>
   1273c:	orr	w0, w0, #0x8
   12740:	b	12398 <mpc_ui_ui_sub@@Base+0x1fc>
   12744:	add	x0, x8, #0x1
   12748:	tst	x0, #0x7ffe
   1274c:	b.ne	12954 <mpc_ui_ui_sub@@Base+0x7b8>  // b.any
   12750:	orr	x0, x2, x9
   12754:	cbnz	x8, 12b10 <mpc_ui_ui_sub@@Base+0x974>
   12758:	orr	x8, x4, x13
   1275c:	cbz	x0, 12b64 <mpc_ui_ui_sub@@Base+0x9c8>
   12760:	cbz	x8, 12a50 <mpc_ui_ui_sub@@Base+0x8b4>
   12764:	adds	x9, x9, x13
   12768:	adc	x2, x4, x2
   1276c:	tbz	x2, #51, 1253c <mpc_ui_ui_sub@@Base+0x3a0>
   12770:	and	x2, x2, #0xfff7ffffffffffff
   12774:	and	x0, x9, #0x7
   12778:	mov	x1, #0x1                   	// #1
   1277c:	b	1236c <mpc_ui_ui_sub@@Base+0x1d0>
   12780:	mov	x1, #0x7fff                	// #32767
   12784:	neg	w0, w0
   12788:	orr	x2, x2, #0x8000000000000
   1278c:	cmp	x3, x1
   12790:	b.eq	12408 <mpc_ui_ui_sub@@Base+0x26c>  // b.none
   12794:	cmp	w0, #0x74
   12798:	b.gt	128a4 <mpc_ui_ui_sub@@Base+0x708>
   1279c:	cmp	w0, #0x3f
   127a0:	b.gt	12ac0 <mpc_ui_ui_sub@@Base+0x924>
   127a4:	mov	w1, #0x40                  	// #64
   127a8:	sub	w1, w1, w0
   127ac:	lsr	x5, x9, x0
   127b0:	lsl	x9, x9, x1
   127b4:	cmp	x9, #0x0
   127b8:	lsl	x9, x2, x1
   127bc:	cset	x1, ne  // ne = any
   127c0:	orr	x9, x9, x5
   127c4:	lsr	x0, x2, x0
   127c8:	orr	x9, x9, x1
   127cc:	sub	x4, x4, x0
   127d0:	b	128b0 <mpc_ui_ui_sub@@Base+0x714>
   127d4:	subs	x5, x9, x13
   127d8:	cmp	x9, x13
   127dc:	sbc	x3, x2, x4
   127e0:	tbnz	x3, #51, 1297c <mpc_ui_ui_sub@@Base+0x7e0>
   127e4:	orr	x8, x5, x3
   127e8:	cbnz	x8, 12aa8 <mpc_ui_ui_sub@@Base+0x90c>
   127ec:	and	x15, x15, #0xc00000
   127f0:	mov	x2, #0x0                   	// #0
   127f4:	cmp	x15, #0x800, lsl #12
   127f8:	mov	x1, #0x0                   	// #0
   127fc:	cset	w7, eq  // eq = none
   12800:	b	124f0 <mpc_ui_ui_sub@@Base+0x354>
   12804:	mov	x0, #0x7fff                	// #32767
   12808:	cmp	x8, x0
   1280c:	b.ne	124d0 <mpc_ui_ui_sub@@Base+0x334>  // b.any
   12810:	orr	x0, x2, x9
   12814:	cbnz	x0, 1269c <mpc_ui_ui_sub@@Base+0x500>
   12818:	mov	x2, #0x0                   	// #0
   1281c:	mov	x8, #0x0                   	// #0
   12820:	mov	w0, #0x0                   	// #0
   12824:	b	126c4 <mpc_ui_ui_sub@@Base+0x528>
   12828:	orr	x4, x4, x13
   1282c:	cmp	x4, #0x0
   12830:	cset	x0, ne  // ne = any
   12834:	adds	x9, x0, x9
   12838:	cinc	x2, x2, cs  // cs = hs, nlast
   1283c:	b	12560 <mpc_ui_ui_sub@@Base+0x3c4>
   12840:	mov	w4, #0x80                  	// #128
   12844:	sub	w4, w4, w0
   12848:	cmp	w0, #0x40
   1284c:	sub	w9, w1, #0x3f
   12850:	lsl	x0, x2, x4
   12854:	orr	x0, x3, x0
   12858:	csel	x3, x0, x3, ne  // ne = any
   1285c:	lsr	x9, x2, x9
   12860:	cmp	x3, #0x0
   12864:	mov	x2, #0x0                   	// #0
   12868:	cset	x0, ne  // ne = any
   1286c:	orr	x9, x0, x9
   12870:	mov	x8, x9
   12874:	b	1235c <mpc_ui_ui_sub@@Base+0x1c0>
   12878:	mov	w5, #0x80                  	// #128
   1287c:	sub	w5, w5, w0
   12880:	subs	w0, w0, #0x40
   12884:	lsl	x5, x4, x5
   12888:	orr	x5, x13, x5
   1288c:	csel	x13, x5, x13, ne  // ne = any
   12890:	lsr	x4, x4, x0
   12894:	cmp	x13, #0x0
   12898:	cset	x3, ne  // ne = any
   1289c:	orr	x3, x3, x4
   128a0:	b	122e4 <mpc_ui_ui_sub@@Base+0x148>
   128a4:	orr	x2, x2, x9
   128a8:	cmp	x2, #0x0
   128ac:	cset	x9, ne  // ne = any
   128b0:	subs	x9, x13, x9
   128b4:	mov	w7, w11
   128b8:	sbc	x2, x4, xzr
   128bc:	mov	x1, x3
   128c0:	mov	x12, x14
   128c4:	b	122ec <mpc_ui_ui_sub@@Base+0x150>
   128c8:	mov	x0, #0x7fff                	// #32767
   128cc:	neg	w5, w5
   128d0:	orr	x2, x2, #0x8000000000000
   128d4:	cmp	x3, x0
   128d8:	b.eq	1262c <mpc_ui_ui_sub@@Base+0x490>  // b.none
   128dc:	cmp	w5, #0x74
   128e0:	b.gt	12ab0 <mpc_ui_ui_sub@@Base+0x914>
   128e4:	cmp	w5, #0x3f
   128e8:	b.gt	12b70 <mpc_ui_ui_sub@@Base+0x9d4>
   128ec:	mov	w1, #0x40                  	// #64
   128f0:	sub	w1, w1, w5
   128f4:	lsr	x6, x9, x5
   128f8:	lsl	x9, x9, x1
   128fc:	cmp	x9, #0x0
   12900:	cset	x0, ne  // ne = any
   12904:	lsl	x9, x2, x1
   12908:	orr	x9, x9, x6
   1290c:	lsr	x5, x2, x5
   12910:	orr	x9, x9, x0
   12914:	add	x4, x4, x5
   12918:	adds	x9, x9, x13
   1291c:	mov	x1, x3
   12920:	cinc	x2, x4, cs  // cs = hs, nlast
   12924:	b	12560 <mpc_ui_ui_sub@@Base+0x3c4>
   12928:	mov	w0, #0x80                  	// #128
   1292c:	sub	w0, w0, w5
   12930:	subs	w5, w5, #0x40
   12934:	lsl	x0, x4, x0
   12938:	orr	x0, x13, x0
   1293c:	csel	x13, x0, x13, ne  // ne = any
   12940:	lsr	x4, x4, x5
   12944:	cmp	x13, #0x0
   12948:	cset	x0, ne  // ne = any
   1294c:	orr	x0, x0, x4
   12950:	b	12834 <mpc_ui_ui_sub@@Base+0x698>
   12954:	mov	x1, #0x7fff                	// #32767
   12958:	cmp	x0, x1
   1295c:	b.eq	12bb8 <mpc_ui_ui_sub@@Base+0xa1c>  // b.none
   12960:	adds	x9, x9, x13
   12964:	mov	x1, x0
   12968:	adc	x2, x4, x2
   1296c:	ubfx	x0, x9, #1, #3
   12970:	extr	x9, x2, x9, #1
   12974:	lsr	x2, x2, #1
   12978:	b	1236c <mpc_ui_ui_sub@@Base+0x1d0>
   1297c:	cmp	x13, x9
   12980:	mov	w7, w11
   12984:	sbc	x3, x4, x2
   12988:	sub	x9, x13, x9
   1298c:	mov	x12, x14
   12990:	b	122f4 <mpc_ui_ui_sub@@Base+0x158>
   12994:	mov	x12, #0x7fff                	// #32767
   12998:	cmp	x1, x12
   1299c:	b.eq	129c8 <mpc_ui_ui_sub@@Base+0x82c>  // b.none
   129a0:	cmp	x3, x12
   129a4:	b.eq	12bf8 <mpc_ui_ui_sub@@Base+0xa5c>  // b.none
   129a8:	cbnz	x5, 129e0 <mpc_ui_ui_sub@@Base+0x844>
   129ac:	mov	w5, w0
   129b0:	cbnz	x8, 12cd8 <mpc_ui_ui_sub@@Base+0xb3c>
   129b4:	mov	w7, #0x0                   	// #0
   129b8:	mov	x2, #0xffffffffffff        	// #281474976710655
   129bc:	mov	w0, #0x1                   	// #1
   129c0:	mov	x8, #0xffffffffffffffff    	// #-1
   129c4:	b	126cc <mpc_ui_ui_sub@@Base+0x530>
   129c8:	cbz	x5, 12cf4 <mpc_ui_ui_sub@@Base+0xb58>
   129cc:	lsr	x0, x2, #50
   129d0:	cmp	x3, x1
   129d4:	eor	x0, x0, #0x1
   129d8:	and	w0, w0, #0x1
   129dc:	b.eq	12bf8 <mpc_ui_ui_sub@@Base+0xa5c>  // b.none
   129e0:	cbz	x8, 12c14 <mpc_ui_ui_sub@@Base+0xa78>
   129e4:	bfi	x6, x2, #61, #3
   129e8:	lsr	x3, x2, #3
   129ec:	tbz	x2, #50, 12a08 <mpc_ui_ui_sub@@Base+0x86c>
   129f0:	lsr	x1, x4, #3
   129f4:	tbnz	x4, #50, 12a08 <mpc_ui_ui_sub@@Base+0x86c>
   129f8:	mov	x6, x10
   129fc:	mov	w7, w11
   12a00:	bfi	x6, x4, #61, #3
   12a04:	mov	x3, x1
   12a08:	extr	x2, x3, x6, #61
   12a0c:	bfi	x6, x2, #61, #3
   12a10:	lsr	x2, x2, #3
   12a14:	mov	x8, x6
   12a18:	b	126c4 <mpc_ui_ui_sub@@Base+0x528>
   12a1c:	mov	x0, #0x7fff                	// #32767
   12a20:	cmp	x8, x0
   12a24:	b.ne	124d0 <mpc_ui_ui_sub@@Base+0x334>  // b.any
   12a28:	orr	x0, x2, x9
   12a2c:	cbz	x0, 12818 <mpc_ui_ui_sub@@Base+0x67c>
   12a30:	lsr	x5, x2, #50
   12a34:	eor	w5, w5, #0x1
   12a38:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12a3c:	cbz	x8, 12b50 <mpc_ui_ui_sub@@Base+0x9b4>
   12a40:	mov	w7, w11
   12a44:	mov	x2, x4
   12a48:	mov	x9, x13
   12a4c:	mov	x12, x14
   12a50:	mov	x1, #0x0                   	// #0
   12a54:	mov	x3, #0x0                   	// #0
   12a58:	b	12734 <mpc_ui_ui_sub@@Base+0x598>
   12a5c:	ands	x3, x15, #0xc00000
   12a60:	b.eq	12aec <mpc_ui_ui_sub@@Base+0x950>  // b.none
   12a64:	cmp	x3, #0x400, lsl #12
   12a68:	eor	w0, w7, #0x1
   12a6c:	cset	w1, eq  // eq = none
   12a70:	tst	w1, w0
   12a74:	b.ne	12d10 <mpc_ui_ui_sub@@Base+0xb74>  // b.any
   12a78:	cmp	x3, #0x800, lsl #12
   12a7c:	b.eq	12cbc <mpc_ui_ui_sub@@Base+0xb20>  // b.none
   12a80:	cmp	x3, #0x400, lsl #12
   12a84:	mov	w0, #0x14                  	// #20
   12a88:	b.ne	12598 <mpc_ui_ui_sub@@Base+0x3fc>  // b.any
   12a8c:	mov	x2, #0xffffffffffffffff    	// #-1
   12a90:	mov	x1, #0x7ffe                	// #32766
   12a94:	mov	x9, x2
   12a98:	mov	w5, #0x0                   	// #0
   12a9c:	mov	w0, #0x14                  	// #20
   12aa0:	cbnz	x12, 1265c <mpc_ui_ui_sub@@Base+0x4c0>
   12aa4:	b	12654 <mpc_ui_ui_sub@@Base+0x4b8>
   12aa8:	mov	x9, x5
   12aac:	b	122f4 <mpc_ui_ui_sub@@Base+0x158>
   12ab0:	orr	x2, x2, x9
   12ab4:	cmp	x2, #0x0
   12ab8:	cset	x9, ne  // ne = any
   12abc:	b	12918 <mpc_ui_ui_sub@@Base+0x77c>
   12ac0:	mov	w1, #0x80                  	// #128
   12ac4:	sub	w1, w1, w0
   12ac8:	subs	w0, w0, #0x40
   12acc:	lsl	x1, x2, x1
   12ad0:	orr	x1, x9, x1
   12ad4:	csel	x9, x1, x9, ne  // ne = any
   12ad8:	lsr	x2, x2, x0
   12adc:	cmp	x9, #0x0
   12ae0:	cset	x9, ne  // ne = any
   12ae4:	orr	x9, x9, x2
   12ae8:	b	128b0 <mpc_ui_ui_sub@@Base+0x714>
   12aec:	mov	w0, #0x14                  	// #20
   12af0:	b	125dc <mpc_ui_ui_sub@@Base+0x440>
   12af4:	lsr	x5, x4, #50
   12af8:	mov	w7, w11
   12afc:	eor	x5, x5, #0x1
   12b00:	mov	x9, x13
   12b04:	and	w5, w5, #0x1
   12b08:	mov	x2, x4
   12b0c:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12b10:	mov	x8, #0x7fff                	// #32767
   12b14:	cmp	x1, x8
   12b18:	b.eq	12c38 <mpc_ui_ui_sub@@Base+0xa9c>  // b.none
   12b1c:	cmp	x3, x8
   12b20:	b.eq	12cac <mpc_ui_ui_sub@@Base+0xb10>  // b.none
   12b24:	cbnz	x0, 12c50 <mpc_ui_ui_sub@@Base+0xab4>
   12b28:	mov	x2, x4
   12b2c:	mov	x9, x13
   12b30:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12b34:	mov	x0, #0x7fff                	// #32767
   12b38:	cmp	x3, x0
   12b3c:	b.eq	12ce8 <mpc_ui_ui_sub@@Base+0xb4c>  // b.none
   12b40:	mov	x2, x4
   12b44:	mov	x9, x13
   12b48:	mov	x1, x3
   12b4c:	b	124d0 <mpc_ui_ui_sub@@Base+0x334>
   12b50:	and	x15, x15, #0xc00000
   12b54:	mov	x2, #0x0                   	// #0
   12b58:	cmp	x15, #0x800, lsl #12
   12b5c:	cset	w7, eq  // eq = none
   12b60:	b	124f0 <mpc_ui_ui_sub@@Base+0x354>
   12b64:	mov	x2, x4
   12b68:	mov	x9, x13
   12b6c:	b	1235c <mpc_ui_ui_sub@@Base+0x1c0>
   12b70:	mov	w0, #0x80                  	// #128
   12b74:	sub	w0, w0, w5
   12b78:	subs	w5, w5, #0x40
   12b7c:	lsl	x0, x2, x0
   12b80:	orr	x0, x9, x0
   12b84:	csel	x9, x0, x9, ne  // ne = any
   12b88:	lsr	x2, x2, x5
   12b8c:	cmp	x9, #0x0
   12b90:	cset	x9, ne  // ne = any
   12b94:	orr	x9, x9, x2
   12b98:	b	12918 <mpc_ui_ui_sub@@Base+0x77c>
   12b9c:	cmp	x13, x9
   12ba0:	mov	w7, w11
   12ba4:	sbc	x2, x4, x2
   12ba8:	sub	x9, x13, x9
   12bac:	mov	x1, x3
   12bb0:	mov	x12, x5
   12bb4:	b	122ec <mpc_ui_ui_sub@@Base+0x150>
   12bb8:	ands	x3, x15, #0xc00000
   12bbc:	b.eq	12aec <mpc_ui_ui_sub@@Base+0x950>  // b.none
   12bc0:	cmp	x3, #0x400, lsl #12
   12bc4:	eor	w0, w7, #0x1
   12bc8:	csel	w0, w0, wzr, eq  // eq = none
   12bcc:	cbnz	w0, 12d10 <mpc_ui_ui_sub@@Base+0xb74>
   12bd0:	cmp	x3, #0x800, lsl #12
   12bd4:	b.ne	12a80 <mpc_ui_ui_sub@@Base+0x8e4>  // b.any
   12bd8:	cbz	x12, 12cc0 <mpc_ui_ui_sub@@Base+0xb24>
   12bdc:	mov	w0, #0x14                  	// #20
   12be0:	mov	x16, #0x1                   	// #1
   12be4:	b	125dc <mpc_ui_ui_sub@@Base+0x440>
   12be8:	orr	x0, x4, x13
   12bec:	cbnz	x0, 12af4 <mpc_ui_ui_sub@@Base+0x958>
   12bf0:	mov	w7, w11
   12bf4:	b	12818 <mpc_ui_ui_sub@@Base+0x67c>
   12bf8:	cbz	x8, 12d04 <mpc_ui_ui_sub@@Base+0xb68>
   12bfc:	tst	x4, #0x4000000000000
   12c00:	csinc	w0, w0, wzr, ne  // ne = any
   12c04:	cbnz	x5, 129e4 <mpc_ui_ui_sub@@Base+0x848>
   12c08:	mov	w7, w11
   12c0c:	mov	x2, x4
   12c10:	mov	x9, x13
   12c14:	mov	w5, w0
   12c18:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12c1c:	orr	x8, x5, x3
   12c20:	cbz	x8, 12b50 <mpc_ui_ui_sub@@Base+0x9b4>
   12c24:	and	x0, x5, #0x7
   12c28:	mov	x9, x5
   12c2c:	mov	x2, x3
   12c30:	mov	w5, #0x1                   	// #1
   12c34:	b	1236c <mpc_ui_ui_sub@@Base+0x1d0>
   12c38:	cbz	x0, 12ca4 <mpc_ui_ui_sub@@Base+0xb08>
   12c3c:	lsr	x5, x2, #50
   12c40:	cmp	x3, x1
   12c44:	eor	x5, x5, #0x1
   12c48:	and	w5, w5, #0x1
   12c4c:	b.eq	12d1c <mpc_ui_ui_sub@@Base+0xb80>  // b.none
   12c50:	orr	x13, x4, x13
   12c54:	cbz	x13, 126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12c58:	bfi	x6, x2, #61, #3
   12c5c:	lsr	x0, x2, #3
   12c60:	tbz	x2, #50, 12c7c <mpc_ui_ui_sub@@Base+0xae0>
   12c64:	lsr	x1, x4, #3
   12c68:	tbnz	x4, #50, 12c7c <mpc_ui_ui_sub@@Base+0xae0>
   12c6c:	and	x6, x10, #0x1fffffffffffffff
   12c70:	mov	w7, w11
   12c74:	orr	x6, x6, x4, lsl #61
   12c78:	mov	x0, x1
   12c7c:	extr	x2, x0, x6, #61
   12c80:	mov	w0, w5
   12c84:	bfi	x6, x2, #61, #3
   12c88:	lsr	x2, x2, #3
   12c8c:	mov	x8, x6
   12c90:	b	126c4 <mpc_ui_ui_sub@@Base+0x528>
   12c94:	adds	x9, x9, x13
   12c98:	mov	x1, x3
   12c9c:	adc	x2, x4, x2
   12ca0:	b	12560 <mpc_ui_ui_sub@@Base+0x3c4>
   12ca4:	cmp	x3, x1
   12ca8:	b.ne	12b28 <mpc_ui_ui_sub@@Base+0x98c>  // b.any
   12cac:	orr	x1, x4, x13
   12cb0:	cbnz	x1, 12d24 <mpc_ui_ui_sub@@Base+0xb88>
   12cb4:	cbz	x0, 12818 <mpc_ui_ui_sub@@Base+0x67c>
   12cb8:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12cbc:	cbnz	x16, 12bdc <mpc_ui_ui_sub@@Base+0xa40>
   12cc0:	mov	x2, #0xffffffffffffffff    	// #-1
   12cc4:	mov	w7, #0x0                   	// #0
   12cc8:	mov	x9, x2
   12ccc:	mov	x1, #0x7ffe                	// #32766
   12cd0:	mov	w0, #0x14                  	// #20
   12cd4:	b	1239c <mpc_ui_ui_sub@@Base+0x200>
   12cd8:	mov	w7, w11
   12cdc:	mov	x2, x4
   12ce0:	mov	x9, x13
   12ce4:	b	126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12ce8:	orr	x0, x4, x13
   12cec:	cbz	x0, 12818 <mpc_ui_ui_sub@@Base+0x67c>
   12cf0:	b	12634 <mpc_ui_ui_sub@@Base+0x498>
   12cf4:	cmp	x3, x1
   12cf8:	b.eq	12bf8 <mpc_ui_ui_sub@@Base+0xa5c>  // b.none
   12cfc:	mov	w5, #0x0                   	// #0
   12d00:	b	129b0 <mpc_ui_ui_sub@@Base+0x814>
   12d04:	cbnz	x5, 12c14 <mpc_ui_ui_sub@@Base+0xa78>
   12d08:	mov	w5, w0
   12d0c:	b	129b0 <mpc_ui_ui_sub@@Base+0x814>
   12d10:	mov	w0, #0x14                  	// #20
   12d14:	mov	x16, #0x0                   	// #0
   12d18:	b	125dc <mpc_ui_ui_sub@@Base+0x440>
   12d1c:	orr	x1, x4, x13
   12d20:	cbz	x1, 126a8 <mpc_ui_ui_sub@@Base+0x50c>
   12d24:	tst	x4, #0x4000000000000
   12d28:	csinc	w5, w5, wzr, ne  // ne = any
   12d2c:	cbnz	x0, 12c58 <mpc_ui_ui_sub@@Base+0xabc>
   12d30:	b	12b28 <mpc_ui_ui_sub@@Base+0x98c>
   12d34:	mov	x8, #0x0                   	// #0
   12d38:	mov	w1, #0x7fff                	// #32767
   12d3c:	mov	x2, #0x0                   	// #0
   12d40:	b	123b8 <mpc_ui_ui_sub@@Base+0x21c>
   12d44:	nop
   12d48:	stp	x29, x30, [sp, #-80]!
   12d4c:	mov	x29, sp
   12d50:	str	q0, [sp, #48]
   12d54:	str	q1, [sp, #64]
   12d58:	ldp	x1, x0, [sp, #48]
   12d5c:	ldp	x6, x2, [sp, #64]
   12d60:	mrs	x11, fpcr
   12d64:	lsr	x3, x0, #63
   12d68:	ubfx	x7, x0, #0, #48
   12d6c:	and	w12, w3, #0xff
   12d70:	mov	x14, x3
   12d74:	ubfx	x3, x0, #48, #15
   12d78:	cbz	w3, 13120 <mpc_ui_ui_sub@@Base+0xf84>
   12d7c:	mov	w4, #0x7fff                	// #32767
   12d80:	cmp	w3, w4
   12d84:	b.eq	131c4 <mpc_ui_ui_sub@@Base+0x1028>  // b.none
   12d88:	and	x3, x3, #0xffff
   12d8c:	extr	x4, x7, x1, #61
   12d90:	mov	x18, #0xffffffffffffc001    	// #-16383
   12d94:	orr	x7, x4, #0x8000000000000
   12d98:	add	x3, x3, x18
   12d9c:	lsl	x5, x1, #3
   12da0:	mov	x16, #0x0                   	// #0
   12da4:	mov	x1, #0x0                   	// #0
   12da8:	mov	w0, #0x0                   	// #0
   12dac:	lsr	x8, x2, #63
   12db0:	ubfx	x4, x2, #0, #48
   12db4:	and	w15, w8, #0xff
   12db8:	mov	x13, x8
   12dbc:	ubfx	x9, x2, #48, #15
   12dc0:	cbz	w9, 13180 <mpc_ui_ui_sub@@Base+0xfe4>
   12dc4:	mov	w8, #0x7fff                	// #32767
   12dc8:	cmp	w9, w8
   12dcc:	b.eq	12e50 <mpc_ui_ui_sub@@Base+0xcb4>  // b.none
   12dd0:	and	x9, x9, #0xffff
   12dd4:	mov	x17, #0xffffffffffffc001    	// #-16383
   12dd8:	add	x9, x9, x17
   12ddc:	extr	x2, x4, x6, #61
   12de0:	add	x9, x9, x3
   12de4:	lsl	x6, x6, #3
   12de8:	orr	x4, x2, #0x8000000000000
   12dec:	mov	x2, #0x0                   	// #0
   12df0:	eor	w8, w12, w15
   12df4:	cmp	x1, #0xa
   12df8:	and	w10, w8, #0xff
   12dfc:	add	x3, x9, #0x1
   12e00:	and	x8, x8, #0xff
   12e04:	b.le	12e88 <mpc_ui_ui_sub@@Base+0xcec>
   12e08:	cmp	x1, #0xb
   12e0c:	b.eq	13520 <mpc_ui_ui_sub@@Base+0x1384>  // b.none
   12e10:	mov	w15, w12
   12e14:	mov	x13, x14
   12e18:	mov	w10, w15
   12e1c:	cmp	x16, #0x2
   12e20:	b.eq	131e4 <mpc_ui_ui_sub@@Base+0x1048>  // b.none
   12e24:	mov	x4, x7
   12e28:	mov	x6, x5
   12e2c:	mov	x2, x16
   12e30:	mov	x8, x13
   12e34:	cmp	x2, #0x3
   12e38:	b.ne	12ea4 <mpc_ui_ui_sub@@Base+0xd08>  // b.any
   12e3c:	orr	x4, x4, #0x800000000000
   12e40:	mov	x5, x6
   12e44:	and	x4, x4, #0xffffffffffff
   12e48:	mov	w1, #0x7fff                	// #32767
   12e4c:	b	12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   12e50:	mov	x8, #0x7fff                	// #32767
   12e54:	orr	x2, x4, x6
   12e58:	add	x9, x3, x8
   12e5c:	cbnz	x2, 12edc <mpc_ui_ui_sub@@Base+0xd40>
   12e60:	eor	w8, w12, w15
   12e64:	orr	x1, x1, #0x2
   12e68:	and	w10, w8, #0xff
   12e6c:	cmp	x1, #0xa
   12e70:	add	x3, x3, #0x8, lsl #12
   12e74:	and	x8, x8, #0xff
   12e78:	mov	x6, #0x0                   	// #0
   12e7c:	b.gt	13494 <mpc_ui_ui_sub@@Base+0x12f8>
   12e80:	mov	x4, #0x0                   	// #0
   12e84:	mov	x2, #0x2                   	// #2
   12e88:	cmp	x1, #0x2
   12e8c:	b.gt	12f04 <mpc_ui_ui_sub@@Base+0xd68>
   12e90:	sub	x1, x1, #0x1
   12e94:	cmp	x1, #0x1
   12e98:	b.hi	12f40 <mpc_ui_ui_sub@@Base+0xda4>  // b.pmore
   12e9c:	cmp	x2, #0x2
   12ea0:	b.eq	131e4 <mpc_ui_ui_sub@@Base+0x1048>  // b.none
   12ea4:	cmp	x2, #0x1
   12ea8:	b.ne	130a0 <mpc_ui_ui_sub@@Base+0xf04>  // b.any
   12eac:	mov	w1, #0x0                   	// #0
   12eb0:	mov	x4, #0x0                   	// #0
   12eb4:	mov	x5, #0x0                   	// #0
   12eb8:	mov	x3, #0x0                   	// #0
   12ebc:	orr	w1, w1, w10, lsl #15
   12ec0:	bfxil	x3, x4, #0, #48
   12ec4:	fmov	d0, x5
   12ec8:	bfi	x3, x1, #48, #16
   12ecc:	fmov	v0.d[1], x3
   12ed0:	cbnz	w0, 13310 <mpc_ui_ui_sub@@Base+0x1174>
   12ed4:	ldp	x29, x30, [sp], #80
   12ed8:	ret
   12edc:	tst	x4, #0x800000000000
   12ee0:	eor	w8, w12, w15
   12ee4:	orr	x1, x1, #0x3
   12ee8:	csinc	w0, w0, wzr, ne  // ne = any
   12eec:	and	w10, w8, #0xff
   12ef0:	add	x3, x3, #0x8, lsl #12
   12ef4:	cmp	x1, #0xa
   12ef8:	and	x8, x8, #0xff
   12efc:	mov	x2, #0x3                   	// #3
   12f00:	b.gt	13514 <mpc_ui_ui_sub@@Base+0x1378>
   12f04:	mov	x12, #0x1                   	// #1
   12f08:	mov	x14, #0x530                 	// #1328
   12f0c:	lsl	x1, x12, x1
   12f10:	tst	x1, x14
   12f14:	b.ne	13114 <mpc_ui_ui_sub@@Base+0xf78>  // b.any
   12f18:	mov	x14, #0x240                 	// #576
   12f1c:	tst	x1, x14
   12f20:	b.ne	130fc <mpc_ui_ui_sub@@Base+0xf60>  // b.any
   12f24:	mov	x12, #0x88                  	// #136
   12f28:	tst	x1, x12
   12f2c:	b.eq	12f40 <mpc_ui_ui_sub@@Base+0xda4>  // b.none
   12f30:	mov	x7, x4
   12f34:	mov	x5, x6
   12f38:	mov	x16, x2
   12f3c:	b	12e18 <mpc_ui_ui_sub@@Base+0xc7c>
   12f40:	lsr	x13, x5, #32
   12f44:	and	x12, x6, #0xffffffff
   12f48:	and	x15, x5, #0xffffffff
   12f4c:	lsr	x6, x6, #32
   12f50:	and	x18, x4, #0xffffffff
   12f54:	lsr	x2, x4, #32
   12f58:	mul	x4, x13, x12
   12f5c:	stp	x21, x22, [sp, #32]
   12f60:	lsr	x22, x7, #32
   12f64:	and	x5, x7, #0xffffffff
   12f68:	mul	x16, x12, x15
   12f6c:	madd	x7, x6, x15, x4
   12f70:	stp	x19, x20, [sp, #16]
   12f74:	mul	x1, x13, x18
   12f78:	mul	x17, x15, x18
   12f7c:	and	x30, x16, #0xffffffff
   12f80:	madd	x15, x2, x15, x1
   12f84:	add	x16, x7, x16, lsr #32
   12f88:	mul	x21, x22, x12
   12f8c:	cmp	x4, x16
   12f90:	mul	x20, x22, x18
   12f94:	mov	x14, #0x100000000           	// #4294967296
   12f98:	mul	x19, x13, x6
   12f9c:	add	x15, x15, x17, lsr #32
   12fa0:	mul	x12, x12, x5
   12fa4:	and	x17, x17, #0xffffffff
   12fa8:	mul	x18, x5, x18
   12fac:	add	x4, x19, x14
   12fb0:	madd	x7, x6, x5, x21
   12fb4:	csel	x19, x4, x19, hi  // hi = pmore
   12fb8:	madd	x5, x2, x5, x20
   12fbc:	cmp	x1, x15
   12fc0:	mul	x13, x13, x2
   12fc4:	add	x17, x17, x15, lsl #32
   12fc8:	mul	x6, x6, x22
   12fcc:	add	x7, x7, x12, lsr #32
   12fd0:	add	x5, x5, x18, lsr #32
   12fd4:	add	x4, x13, x14
   12fd8:	mul	x2, x2, x22
   12fdc:	csel	x13, x4, x13, hi  // hi = pmore
   12fe0:	and	x1, x18, #0xffffffff
   12fe4:	cmp	x21, x7
   12fe8:	add	x4, x6, x14
   12fec:	add	x30, x30, x16, lsl #32
   12ff0:	csel	x6, x4, x6, hi  // hi = pmore
   12ff4:	add	x13, x13, x15, lsr #32
   12ff8:	cmp	x20, x5
   12ffc:	add	x1, x1, x5, lsl #32
   13000:	add	x16, x17, x16, lsr #32
   13004:	add	x14, x2, x14
   13008:	csel	x2, x14, x2, hi  // hi = pmore
   1300c:	add	x16, x19, x16
   13010:	adds	x1, x1, x13
   13014:	and	x12, x12, #0xffffffff
   13018:	cset	x13, cs  // cs = hs, nlast
   1301c:	cmp	x16, x17
   13020:	cset	x4, cc  // cc = lo, ul, last
   13024:	add	x12, x12, x7, lsl #32
   13028:	adds	x1, x1, x4
   1302c:	lsr	x5, x5, #32
   13030:	cset	x4, cs  // cs = hs, nlast
   13034:	cmp	x13, #0x0
   13038:	ccmp	x4, #0x0, #0x0, eq  // eq = none
   1303c:	add	x7, x6, x7, lsr #32
   13040:	cinc	x5, x5, ne  // ne = any
   13044:	adds	x6, x16, x12
   13048:	cset	x4, cs  // cs = hs, nlast
   1304c:	adds	x1, x1, x7
   13050:	cset	x7, cs  // cs = hs, nlast
   13054:	adds	x4, x1, x4
   13058:	cset	x1, cs  // cs = hs, nlast
   1305c:	cmp	x7, #0x0
   13060:	orr	x30, x30, x6, lsl #13
   13064:	ccmp	x1, #0x0, #0x0, eq  // eq = none
   13068:	cinc	x1, x2, ne  // ne = any
   1306c:	cmp	x30, #0x0
   13070:	add	x1, x1, x5
   13074:	cset	x2, ne  // ne = any
   13078:	orr	x6, x2, x6, lsr #51
   1307c:	orr	x6, x6, x4, lsl #13
   13080:	extr	x4, x1, x4, #51
   13084:	tbz	x1, #39, 13398 <mpc_ui_ui_sub@@Base+0x11fc>
   13088:	ldp	x19, x20, [sp, #16]
   1308c:	and	x1, x6, #0x1
   13090:	ldp	x21, x22, [sp, #32]
   13094:	orr	x6, x1, x6, lsr #1
   13098:	orr	x6, x6, x4, lsl #63
   1309c:	lsr	x4, x4, #1
   130a0:	mov	x1, #0x3fff                	// #16383
   130a4:	add	x2, x3, x1
   130a8:	cmp	x2, #0x0
   130ac:	b.le	13244 <mpc_ui_ui_sub@@Base+0x10a8>
   130b0:	tst	x6, #0x7
   130b4:	b.eq	130d4 <mpc_ui_ui_sub@@Base+0xf38>  // b.none
   130b8:	and	x1, x11, #0xc00000
   130bc:	orr	w0, w0, #0x10
   130c0:	cmp	x1, #0x400, lsl #12
   130c4:	b.eq	1348c <mpc_ui_ui_sub@@Base+0x12f0>  // b.none
   130c8:	cmp	x1, #0x800, lsl #12
   130cc:	b.eq	13434 <mpc_ui_ui_sub@@Base+0x1298>  // b.none
   130d0:	cbz	x1, 1341c <mpc_ui_ui_sub@@Base+0x1280>
   130d4:	tbz	x4, #52, 130e0 <mpc_ui_ui_sub@@Base+0xf44>
   130d8:	and	x4, x4, #0xffefffffffffffff
   130dc:	add	x2, x3, #0x4, lsl #12
   130e0:	mov	x1, #0x7ffe                	// #32766
   130e4:	cmp	x2, x1
   130e8:	b.gt	1336c <mpc_ui_ui_sub@@Base+0x11d0>
   130ec:	and	w1, w2, #0x7fff
   130f0:	extr	x5, x4, x6, #3
   130f4:	ubfx	x4, x4, #3, #48
   130f8:	b	12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   130fc:	mov	w0, w12
   13100:	mov	w10, #0x0                   	// #0
   13104:	mov	x4, #0xffffffffffff        	// #281474976710655
   13108:	mov	x5, #0xffffffffffffffff    	// #-1
   1310c:	mov	w1, #0x7fff                	// #32767
   13110:	b	12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   13114:	mov	w15, w10
   13118:	mov	x13, x8
   1311c:	b	12e18 <mpc_ui_ui_sub@@Base+0xc7c>
   13120:	orr	x5, x7, x1
   13124:	cbz	x5, 1322c <mpc_ui_ui_sub@@Base+0x1090>
   13128:	cbz	x7, 13348 <mpc_ui_ui_sub@@Base+0x11ac>
   1312c:	clz	x0, x7
   13130:	sub	x4, x0, #0xf
   13134:	add	w5, w4, #0x3
   13138:	mov	w3, #0x3d                  	// #61
   1313c:	sub	w3, w3, w4
   13140:	lsl	x4, x7, x5
   13144:	lsr	x3, x1, x3
   13148:	orr	x7, x3, x4
   1314c:	lsl	x5, x1, x5
   13150:	lsr	x8, x2, #63
   13154:	mov	x3, #0xffffffffffffc011    	// #-16367
   13158:	ubfx	x4, x2, #0, #48
   1315c:	sub	x3, x3, x0
   13160:	and	w15, w8, #0xff
   13164:	mov	x13, x8
   13168:	ubfx	x9, x2, #48, #15
   1316c:	mov	x1, #0x0                   	// #0
   13170:	mov	x16, #0x0                   	// #0
   13174:	mov	w0, #0x0                   	// #0
   13178:	cbnz	w9, 12dc4 <mpc_ui_ui_sub@@Base+0xc28>
   1317c:	nop
   13180:	orr	x2, x4, x6
   13184:	cbz	x2, 131f4 <mpc_ui_ui_sub@@Base+0x1058>
   13188:	cbz	x4, 13324 <mpc_ui_ui_sub@@Base+0x1188>
   1318c:	clz	x9, x4
   13190:	sub	x2, x9, #0xf
   13194:	add	w10, w2, #0x3
   13198:	mov	w8, #0x3d                  	// #61
   1319c:	sub	w8, w8, w2
   131a0:	lsl	x2, x4, x10
   131a4:	lsr	x8, x6, x8
   131a8:	orr	x4, x8, x2
   131ac:	lsl	x6, x6, x10
   131b0:	sub	x9, x3, x9
   131b4:	mov	x10, #0xffffffffffffc011    	// #-16367
   131b8:	mov	x2, #0x0                   	// #0
   131bc:	add	x9, x9, x10
   131c0:	b	12df0 <mpc_ui_ui_sub@@Base+0xc54>
   131c4:	orr	x5, x7, x1
   131c8:	cbnz	x5, 1320c <mpc_ui_ui_sub@@Base+0x1070>
   131cc:	mov	x7, #0x0                   	// #0
   131d0:	mov	x1, #0x8                   	// #8
   131d4:	mov	x3, #0x7fff                	// #32767
   131d8:	mov	x16, #0x2                   	// #2
   131dc:	mov	w0, #0x0                   	// #0
   131e0:	b	12dac <mpc_ui_ui_sub@@Base+0xc10>
   131e4:	mov	w1, #0x7fff                	// #32767
   131e8:	mov	x4, #0x0                   	// #0
   131ec:	mov	x5, #0x0                   	// #0
   131f0:	b	12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   131f4:	orr	x1, x1, #0x1
   131f8:	mov	x9, x3
   131fc:	mov	x4, #0x0                   	// #0
   13200:	mov	x6, #0x0                   	// #0
   13204:	mov	x2, #0x1                   	// #1
   13208:	b	12df0 <mpc_ui_ui_sub@@Base+0xc54>
   1320c:	lsr	x0, x7, #47
   13210:	mov	x5, x1
   13214:	eor	x0, x0, #0x1
   13218:	mov	x1, #0xc                   	// #12
   1321c:	and	w0, w0, #0x1
   13220:	mov	x3, #0x7fff                	// #32767
   13224:	mov	x16, #0x3                   	// #3
   13228:	b	12dac <mpc_ui_ui_sub@@Base+0xc10>
   1322c:	mov	x7, #0x0                   	// #0
   13230:	mov	x1, #0x4                   	// #4
   13234:	mov	x3, #0x0                   	// #0
   13238:	mov	x16, #0x1                   	// #1
   1323c:	mov	w0, #0x0                   	// #0
   13240:	b	12dac <mpc_ui_ui_sub@@Base+0xc10>
   13244:	mov	x1, #0x1                   	// #1
   13248:	sub	x2, x1, x2
   1324c:	cmp	x2, #0x74
   13250:	b.gt	132c8 <mpc_ui_ui_sub@@Base+0x112c>
   13254:	cmp	x2, #0x3f
   13258:	b.le	133a8 <mpc_ui_ui_sub@@Base+0x120c>
   1325c:	mov	w1, #0x80                  	// #128
   13260:	sub	w1, w1, w2
   13264:	cmp	x2, #0x40
   13268:	sub	w2, w2, #0x40
   1326c:	lsl	x1, x4, x1
   13270:	orr	x1, x6, x1
   13274:	csel	x6, x1, x6, ne  // ne = any
   13278:	lsr	x2, x4, x2
   1327c:	cmp	x6, #0x0
   13280:	cset	x5, ne  // ne = any
   13284:	orr	x5, x5, x2
   13288:	ands	x2, x5, #0x7
   1328c:	b.eq	133dc <mpc_ui_ui_sub@@Base+0x1240>  // b.none
   13290:	mov	x2, #0x0                   	// #0
   13294:	and	x11, x11, #0xc00000
   13298:	orr	w0, w0, #0x10
   1329c:	cmp	x11, #0x400, lsl #12
   132a0:	b.eq	134ec <mpc_ui_ui_sub@@Base+0x1350>  // b.none
   132a4:	cmp	x11, #0x800, lsl #12
   132a8:	b.eq	13500 <mpc_ui_ui_sub@@Base+0x1364>  // b.none
   132ac:	cbz	x11, 13444 <mpc_ui_ui_sub@@Base+0x12a8>
   132b0:	tbnz	x2, #51, 1345c <mpc_ui_ui_sub@@Base+0x12c0>
   132b4:	ubfx	x4, x2, #3, #48
   132b8:	extr	x5, x2, x5, #3
   132bc:	orr	w0, w0, #0x8
   132c0:	mov	w1, #0x0                   	// #0
   132c4:	b	132f8 <mpc_ui_ui_sub@@Base+0x115c>
   132c8:	orr	x5, x6, x4
   132cc:	cbz	x5, 132ec <mpc_ui_ui_sub@@Base+0x1150>
   132d0:	and	x11, x11, #0xc00000
   132d4:	orr	w0, w0, #0x10
   132d8:	cmp	x11, #0x400, lsl #12
   132dc:	sub	x5, x1, x8
   132e0:	b.eq	132ec <mpc_ui_ui_sub@@Base+0x1150>  // b.none
   132e4:	cmp	x11, #0x800, lsl #12
   132e8:	csel	x5, x8, xzr, eq  // eq = none
   132ec:	orr	w0, w0, #0x8
   132f0:	mov	w1, #0x0                   	// #0
   132f4:	mov	x4, #0x0                   	// #0
   132f8:	mov	x3, #0x0                   	// #0
   132fc:	fmov	d0, x5
   13300:	bfxil	x3, x4, #0, #48
   13304:	bfi	x3, x1, #48, #15
   13308:	bfi	x3, x10, #63, #1
   1330c:	fmov	v0.d[1], x3
   13310:	str	q0, [sp, #48]
   13314:	bl	13530 <mpc_ui_ui_sub@@Base+0x1394>
   13318:	ldr	q0, [sp, #48]
   1331c:	ldp	x29, x30, [sp], #80
   13320:	ret
   13324:	clz	x9, x6
   13328:	add	x2, x9, #0x31
   1332c:	add	x9, x9, #0x40
   13330:	cmp	x2, #0x3c
   13334:	b.le	13194 <mpc_ui_ui_sub@@Base+0xff8>
   13338:	sub	w2, w2, #0x3d
   1333c:	lsl	x4, x6, x2
   13340:	mov	x6, #0x0                   	// #0
   13344:	b	131b0 <mpc_ui_ui_sub@@Base+0x1014>
   13348:	clz	x3, x1
   1334c:	add	x4, x3, #0x31
   13350:	add	x0, x3, #0x40
   13354:	cmp	x4, #0x3c
   13358:	b.le	13134 <mpc_ui_ui_sub@@Base+0xf98>
   1335c:	sub	w4, w4, #0x3d
   13360:	mov	x5, #0x0                   	// #0
   13364:	lsl	x7, x1, x4
   13368:	b	13150 <mpc_ui_ui_sub@@Base+0xfb4>
   1336c:	and	x5, x11, #0xc00000
   13370:	cmp	x5, #0x400, lsl #12
   13374:	b.eq	13470 <mpc_ui_ui_sub@@Base+0x12d4>  // b.none
   13378:	cmp	x5, #0x800, lsl #12
   1337c:	b.eq	13400 <mpc_ui_ui_sub@@Base+0x1264>  // b.none
   13380:	cbz	x5, 133f4 <mpc_ui_ui_sub@@Base+0x1258>
   13384:	mov	x4, #0xffffffffffff        	// #281474976710655
   13388:	mov	x5, #0xffffffffffffffff    	// #-1
   1338c:	mov	w2, #0x14                  	// #20
   13390:	orr	w0, w0, w2
   13394:	b	132f8 <mpc_ui_ui_sub@@Base+0x115c>
   13398:	mov	x3, x9
   1339c:	ldp	x19, x20, [sp, #16]
   133a0:	ldp	x21, x22, [sp, #32]
   133a4:	b	130a0 <mpc_ui_ui_sub@@Base+0xf04>
   133a8:	mov	w1, #0x40                  	// #64
   133ac:	sub	w1, w1, w2
   133b0:	lsr	x3, x6, x2
   133b4:	lsl	x6, x6, x1
   133b8:	cmp	x6, #0x0
   133bc:	lsl	x5, x4, x1
   133c0:	cset	x1, ne  // ne = any
   133c4:	orr	x5, x5, x3
   133c8:	lsr	x2, x4, x2
   133cc:	orr	x5, x5, x1
   133d0:	tst	x5, #0x7
   133d4:	b.ne	13294 <mpc_ui_ui_sub@@Base+0x10f8>  // b.any
   133d8:	tbnz	x2, #51, 1350c <mpc_ui_ui_sub@@Base+0x1370>
   133dc:	ubfx	x4, x2, #3, #48
   133e0:	extr	x5, x2, x5, #3
   133e4:	mov	w1, #0x0                   	// #0
   133e8:	tbz	w11, #11, 12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   133ec:	orr	w0, w0, #0x8
   133f0:	b	132f8 <mpc_ui_ui_sub@@Base+0x115c>
   133f4:	mov	w1, #0x7fff                	// #32767
   133f8:	mov	x4, #0x0                   	// #0
   133fc:	b	1338c <mpc_ui_ui_sub@@Base+0x11f0>
   13400:	cmp	x8, #0x0
   13404:	mov	w2, #0x7fff                	// #32767
   13408:	mov	x4, #0xffffffffffff        	// #281474976710655
   1340c:	csel	w1, w1, w2, eq  // eq = none
   13410:	csel	x4, x4, xzr, eq  // eq = none
   13414:	csetm	x5, eq  // eq = none
   13418:	b	1338c <mpc_ui_ui_sub@@Base+0x11f0>
   1341c:	and	x1, x6, #0xf
   13420:	cmp	x1, #0x4
   13424:	b.eq	130d4 <mpc_ui_ui_sub@@Base+0xf38>  // b.none
   13428:	adds	x6, x6, #0x4
   1342c:	cinc	x4, x4, cs  // cs = hs, nlast
   13430:	b	130d4 <mpc_ui_ui_sub@@Base+0xf38>
   13434:	cbz	x8, 130d4 <mpc_ui_ui_sub@@Base+0xf38>
   13438:	adds	x6, x6, #0x8
   1343c:	cinc	x4, x4, cs  // cs = hs, nlast
   13440:	b	130d4 <mpc_ui_ui_sub@@Base+0xf38>
   13444:	and	x1, x5, #0xf
   13448:	cmp	x1, #0x4
   1344c:	b.eq	13458 <mpc_ui_ui_sub@@Base+0x12bc>  // b.none
   13450:	adds	x5, x5, #0x4
   13454:	cinc	x2, x2, cs  // cs = hs, nlast
   13458:	tbz	x2, #51, 132b4 <mpc_ui_ui_sub@@Base+0x1118>
   1345c:	orr	w0, w0, #0x8
   13460:	mov	w1, #0x1                   	// #1
   13464:	mov	x4, #0x0                   	// #0
   13468:	mov	x5, #0x0                   	// #0
   1346c:	b	132f8 <mpc_ui_ui_sub@@Base+0x115c>
   13470:	cmp	x8, #0x0
   13474:	mov	w2, #0x7fff                	// #32767
   13478:	mov	x4, #0xffffffffffff        	// #281474976710655
   1347c:	csel	w1, w1, w2, ne  // ne = any
   13480:	csel	x4, x4, xzr, ne  // ne = any
   13484:	csetm	x5, ne  // ne = any
   13488:	b	1338c <mpc_ui_ui_sub@@Base+0x11f0>
   1348c:	cbnz	x8, 130d4 <mpc_ui_ui_sub@@Base+0xf38>
   13490:	b	13438 <mpc_ui_ui_sub@@Base+0x129c>
   13494:	mov	x4, #0x2                   	// #2
   13498:	cmp	x1, #0xf
   1349c:	b.ne	134c0 <mpc_ui_ui_sub@@Base+0x1324>  // b.any
   134a0:	tbz	x7, #47, 134d8 <mpc_ui_ui_sub@@Base+0x133c>
   134a4:	tbnz	x2, #47, 134d8 <mpc_ui_ui_sub@@Base+0x133c>
   134a8:	orr	x4, x2, #0x800000000000
   134ac:	mov	w10, w15
   134b0:	and	x4, x4, #0xffffffffffff
   134b4:	mov	x5, x6
   134b8:	mov	w1, #0x7fff                	// #32767
   134bc:	b	12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   134c0:	cmp	x1, #0xb
   134c4:	b.ne	12e10 <mpc_ui_ui_sub@@Base+0xc74>  // b.any
   134c8:	mov	x7, x2
   134cc:	mov	x5, x6
   134d0:	mov	x16, x4
   134d4:	b	12e18 <mpc_ui_ui_sub@@Base+0xc7c>
   134d8:	orr	x4, x7, #0x800000000000
   134dc:	mov	w10, w12
   134e0:	and	x4, x4, #0xffffffffffff
   134e4:	mov	w1, #0x7fff                	// #32767
   134e8:	b	12eb8 <mpc_ui_ui_sub@@Base+0xd1c>
   134ec:	cbnz	x8, 13458 <mpc_ui_ui_sub@@Base+0x12bc>
   134f0:	adds	x5, x5, #0x8
   134f4:	cinc	x2, x2, cs  // cs = hs, nlast
   134f8:	tbnz	x2, #51, 1345c <mpc_ui_ui_sub@@Base+0x12c0>
   134fc:	b	132b4 <mpc_ui_ui_sub@@Base+0x1118>
   13500:	cbnz	x8, 134f0 <mpc_ui_ui_sub@@Base+0x1354>
   13504:	tbnz	x2, #51, 1345c <mpc_ui_ui_sub@@Base+0x12c0>
   13508:	b	132b4 <mpc_ui_ui_sub@@Base+0x1118>
   1350c:	orr	w0, w0, #0x10
   13510:	b	1345c <mpc_ui_ui_sub@@Base+0x12c0>
   13514:	mov	x2, x4
   13518:	mov	x4, #0x3                   	// #3
   1351c:	b	13498 <mpc_ui_ui_sub@@Base+0x12fc>
   13520:	mov	w10, w15
   13524:	mov	x8, x13
   13528:	b	12e34 <mpc_ui_ui_sub@@Base+0xc98>
   1352c:	nop
   13530:	tbz	w0, #0, 13540 <mpc_ui_ui_sub@@Base+0x13a4>
   13534:	movi	v1.2s, #0x0
   13538:	fdiv	s0, s1, s1
   1353c:	mrs	x1, fpsr
   13540:	tbz	w0, #1, 13554 <mpc_ui_ui_sub@@Base+0x13b8>
   13544:	fmov	s1, #1.000000000000000000e+00
   13548:	movi	v2.2s, #0x0
   1354c:	fdiv	s0, s1, s2
   13550:	mrs	x1, fpsr
   13554:	tbz	w0, #2, 13574 <mpc_ui_ui_sub@@Base+0x13d8>
   13558:	mov	w2, #0xc5ae                	// #50606
   1355c:	mov	w1, #0x7f7fffff            	// #2139095039
   13560:	movk	w2, #0x749d, lsl #16
   13564:	fmov	s1, w1
   13568:	fmov	s2, w2
   1356c:	fadd	s0, s1, s2
   13570:	mrs	x1, fpsr
   13574:	tbz	w0, #3, 13584 <mpc_ui_ui_sub@@Base+0x13e8>
   13578:	movi	v1.2s, #0x80, lsl #16
   1357c:	fmul	s0, s1, s1
   13580:	mrs	x1, fpsr
   13584:	tbz	w0, #4, 1359c <mpc_ui_ui_sub@@Base+0x1400>
   13588:	mov	w0, #0x7f7fffff            	// #2139095039
   1358c:	fmov	s2, #1.000000000000000000e+00
   13590:	fmov	s1, w0
   13594:	fsub	s0, s1, s2
   13598:	mrs	x0, fpsr
   1359c:	ret

Disassembly of section .fini:

00000000000135a0 <.fini>:
   135a0:	stp	x29, x30, [sp, #-16]!
   135a4:	mov	x29, sp
   135a8:	ldp	x29, x30, [sp], #16
   135ac:	ret
