
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libffi.so.7.1.0_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001970 <.init>:
    1970:	stp	x29, x30, [sp, #-16]!
    1974:	mov	x29, sp
    1978:	bl	1c50 <ffi_prep_java_raw_closure_loc@plt+0x10>
    197c:	ldp	x29, x30, [sp], #16
    1980:	ret

Disassembly of section .plt:

0000000000001990 <memcpy@plt-0x20>:
    1990:	stp	x16, x30, [sp, #-16]!
    1994:	adrp	x16, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    1998:	ldr	x17, [x16, #4088]
    199c:	add	x16, x16, #0xff8
    19a0:	br	x17
    19a4:	nop
    19a8:	nop
    19ac:	nop

00000000000019b0 <memcpy@plt>:
    19b0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19b4:	ldr	x17, [x16]
    19b8:	add	x16, x16, #0x0
    19bc:	br	x17

00000000000019c0 <ffi_prep_closure_loc@plt>:
    19c0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19c4:	ldr	x17, [x16, #8]
    19c8:	add	x16, x16, #0x8
    19cc:	br	x17

00000000000019d0 <strlen@plt>:
    19d0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19d4:	ldr	x17, [x16, #16]
    19d8:	add	x16, x16, #0x10
    19dc:	br	x17

00000000000019e0 <ffi_java_raw_to_ptrarray@plt>:
    19e0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19e4:	ldr	x17, [x16, #24]
    19e8:	add	x16, x16, #0x18
    19ec:	br	x17

00000000000019f0 <__cxa_finalize@plt>:
    19f0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19f4:	ldr	x17, [x16, #32]
    19f8:	add	x16, x16, #0x20
    19fc:	br	x17

0000000000001a00 <statfs@plt>:
    1a00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a04:	ldr	x17, [x16, #40]
    1a08:	add	x16, x16, #0x28
    1a0c:	br	x17

0000000000001a10 <fclose@plt>:
    1a10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a14:	ldr	x17, [x16, #48]
    1a18:	add	x16, x16, #0x30
    1a1c:	br	x17

0000000000001a20 <fopen@plt>:
    1a20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a24:	ldr	x17, [x16, #56]
    1a28:	add	x16, x16, #0x38
    1a2c:	br	x17

0000000000001a30 <open@plt>:
    1a30:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a34:	ldr	x17, [x16, #64]
    1a38:	add	x16, x16, #0x40
    1a3c:	br	x17

0000000000001a40 <strncmp@plt>:
    1a40:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a44:	ldr	x17, [x16, #72]
    1a48:	add	x16, x16, #0x48
    1a4c:	br	x17

0000000000001a50 <memset@plt>:
    1a50:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a54:	ldr	x17, [x16, #80]
    1a58:	add	x16, x16, #0x50
    1a5c:	br	x17

0000000000001a60 <ffi_raw_to_ptrarray@plt>:
    1a60:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a64:	ldr	x17, [x16, #88]
    1a68:	add	x16, x16, #0x58
    1a6c:	br	x17

0000000000001a70 <ffi_prep_raw_closure_loc@plt>:
    1a70:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a74:	ldr	x17, [x16, #96]
    1a78:	add	x16, x16, #0x60
    1a7c:	br	x17

0000000000001a80 <setmntent@plt>:
    1a80:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a84:	ldr	x17, [x16, #104]
    1a88:	add	x16, x16, #0x68
    1a8c:	br	x17

0000000000001a90 <endmntent@plt>:
    1a90:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a94:	ldr	x17, [x16, #112]
    1a98:	add	x16, x16, #0x70
    1a9c:	br	x17

0000000000001aa0 <pthread_mutex_init@plt>:
    1aa0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1aa4:	ldr	x17, [x16, #120]
    1aa8:	add	x16, x16, #0x78
    1aac:	br	x17

0000000000001ab0 <close@plt>:
    1ab0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ab4:	ldr	x17, [x16, #128]
    1ab8:	add	x16, x16, #0x80
    1abc:	br	x17

0000000000001ac0 <__gmon_start__@plt>:
    1ac0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ac4:	ldr	x17, [x16, #136]
    1ac8:	add	x16, x16, #0x88
    1acc:	br	x17

0000000000001ad0 <write@plt>:
    1ad0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ad4:	ldr	x17, [x16, #144]
    1ad8:	add	x16, x16, #0x90
    1adc:	br	x17

0000000000001ae0 <abort@plt>:
    1ae0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ae4:	ldr	x17, [x16, #152]
    1ae8:	add	x16, x16, #0x98
    1aec:	br	x17

0000000000001af0 <mkostemp@plt>:
    1af0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1af4:	ldr	x17, [x16, #160]
    1af8:	add	x16, x16, #0xa0
    1afc:	br	x17

0000000000001b00 <access@plt>:
    1b00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b04:	ldr	x17, [x16, #168]
    1b08:	add	x16, x16, #0xa8
    1b0c:	br	x17

0000000000001b10 <mmap@plt>:
    1b10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b14:	ldr	x17, [x16, #176]
    1b18:	add	x16, x16, #0xb0
    1b1c:	br	x17

0000000000001b20 <free@plt>:
    1b20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b24:	ldr	x17, [x16, #184]
    1b28:	add	x16, x16, #0xb8
    1b2c:	br	x17

0000000000001b30 <ffi_java_raw_size@plt>:
    1b30:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b34:	ldr	x17, [x16, #192]
    1b38:	add	x16, x16, #0xc0
    1b3c:	br	x17

0000000000001b40 <ffi_raw_size@plt>:
    1b40:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b44:	ldr	x17, [x16, #200]
    1b48:	add	x16, x16, #0xc8
    1b4c:	br	x17

0000000000001b50 <ffi_ptrarray_to_raw@plt>:
    1b50:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b54:	ldr	x17, [x16, #208]
    1b58:	add	x16, x16, #0xd0
    1b5c:	br	x17

0000000000001b60 <hasmntopt@plt>:
    1b60:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b64:	ldr	x17, [x16, #216]
    1b68:	add	x16, x16, #0xd8
    1b6c:	br	x17

0000000000001b70 <strchr@plt>:
    1b70:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b74:	ldr	x17, [x16, #224]
    1b78:	add	x16, x16, #0xe0
    1b7c:	br	x17

0000000000001b80 <munmap@plt>:
    1b80:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b84:	ldr	x17, [x16, #232]
    1b88:	add	x16, x16, #0xe8
    1b8c:	br	x17

0000000000001b90 <ffi_call@plt>:
    1b90:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b94:	ldr	x17, [x16, #240]
    1b98:	add	x16, x16, #0xf0
    1b9c:	br	x17

0000000000001ba0 <sysconf@plt>:
    1ba0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ba4:	ldr	x17, [x16, #248]
    1ba8:	add	x16, x16, #0xf8
    1bac:	br	x17

0000000000001bb0 <getmntent_r@plt>:
    1bb0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1bb4:	ldr	x17, [x16, #256]
    1bb8:	add	x16, x16, #0x100
    1bbc:	br	x17

0000000000001bc0 <ftruncate@plt>:
    1bc0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1bc4:	ldr	x17, [x16, #264]
    1bc8:	add	x16, x16, #0x108
    1bcc:	br	x17

0000000000001bd0 <__errno_location@plt>:
    1bd0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1bd4:	ldr	x17, [x16, #272]
    1bd8:	add	x16, x16, #0x110
    1bdc:	br	x17

0000000000001be0 <getenv@plt>:
    1be0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1be4:	ldr	x17, [x16, #280]
    1be8:	add	x16, x16, #0x118
    1bec:	br	x17

0000000000001bf0 <ffi_java_ptrarray_to_raw@plt>:
    1bf0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1bf4:	ldr	x17, [x16, #288]
    1bf8:	add	x16, x16, #0x120
    1bfc:	br	x17

0000000000001c00 <pthread_mutex_lock@plt>:
    1c00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1c04:	ldr	x17, [x16, #296]
    1c08:	add	x16, x16, #0x128
    1c0c:	br	x17

0000000000001c10 <__getdelim@plt>:
    1c10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1c14:	ldr	x17, [x16, #304]
    1c18:	add	x16, x16, #0x130
    1c1c:	br	x17

0000000000001c20 <pthread_mutex_unlock@plt>:
    1c20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1c24:	ldr	x17, [x16, #312]
    1c28:	add	x16, x16, #0x138
    1c2c:	br	x17

0000000000001c30 <unlink@plt>:
    1c30:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1c34:	ldr	x17, [x16, #320]
    1c38:	add	x16, x16, #0x140
    1c3c:	br	x17

0000000000001c40 <ffi_prep_java_raw_closure_loc@plt>:
    1c40:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1c44:	ldr	x17, [x16, #328]
    1c48:	add	x16, x16, #0x148
    1c4c:	br	x17

Disassembly of section .text:

0000000000001c50 <ffi_prep_cif@@LIBFFI_BASE_7.0-0x2c0>:
    1c50:	adrp	x0, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    1c54:	ldr	x0, [x0, #4056]
    1c58:	cbz	x0, 1c60 <ffi_prep_java_raw_closure_loc@plt+0x20>
    1c5c:	b	1ac0 <__gmon_start__@plt>
    1c60:	ret
    1c64:	nop
    1c68:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1c6c:	add	x0, x0, #0x190
    1c70:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    1c74:	add	x1, x1, #0x190
    1c78:	cmp	x1, x0
    1c7c:	b.eq	1c94 <ffi_prep_java_raw_closure_loc@plt+0x54>  // b.none
    1c80:	adrp	x1, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    1c84:	ldr	x1, [x1, #4040]
    1c88:	cbz	x1, 1c94 <ffi_prep_java_raw_closure_loc@plt+0x54>
    1c8c:	mov	x16, x1
    1c90:	br	x16
    1c94:	ret
    1c98:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1c9c:	add	x0, x0, #0x190
    1ca0:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    1ca4:	add	x1, x1, #0x190
    1ca8:	sub	x1, x1, x0
    1cac:	lsr	x2, x1, #63
    1cb0:	add	x1, x2, x1, asr #3
    1cb4:	cmp	xzr, x1, asr #1
    1cb8:	asr	x1, x1, #1
    1cbc:	b.eq	1cd4 <ffi_prep_java_raw_closure_loc@plt+0x94>  // b.none
    1cc0:	adrp	x2, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    1cc4:	ldr	x2, [x2, #4064]
    1cc8:	cbz	x2, 1cd4 <ffi_prep_java_raw_closure_loc@plt+0x94>
    1ccc:	mov	x16, x2
    1cd0:	br	x16
    1cd4:	ret
    1cd8:	stp	x29, x30, [sp, #-32]!
    1cdc:	mov	x29, sp
    1ce0:	str	x19, [sp, #16]
    1ce4:	adrp	x19, 17000 <memcpy@GLIBC_2.17>
    1ce8:	ldrb	w0, [x19, #400]
    1cec:	cbnz	w0, 1d14 <ffi_prep_java_raw_closure_loc@plt+0xd4>
    1cf0:	adrp	x0, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    1cf4:	ldr	x0, [x0, #4048]
    1cf8:	cbz	x0, 1d08 <ffi_prep_java_raw_closure_loc@plt+0xc8>
    1cfc:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1d00:	ldr	x0, [x0, #336]
    1d04:	bl	19f0 <__cxa_finalize@plt>
    1d08:	bl	1c68 <ffi_prep_java_raw_closure_loc@plt+0x28>
    1d0c:	mov	w0, #0x1                   	// #1
    1d10:	strb	w0, [x19, #400]
    1d14:	ldr	x19, [sp, #16]
    1d18:	ldp	x29, x30, [sp], #32
    1d1c:	ret
    1d20:	b	1c98 <ffi_prep_java_raw_closure_loc@plt+0x58>
    1d24:	nop
    1d28:	cbz	x0, 1e14 <ffi_prep_java_raw_closure_loc@plt+0x1d4>
    1d2c:	stp	x29, x30, [sp, #-48]!
    1d30:	mov	x29, sp
    1d34:	stp	x19, x20, [sp, #16]
    1d38:	mov	x19, x0
    1d3c:	ldr	x20, [x0, #16]
    1d40:	str	x21, [sp, #32]
    1d44:	cbz	x20, 1dd4 <ffi_prep_java_raw_closure_loc@plt+0x194>
    1d48:	ldr	x0, [x20]
    1d4c:	str	xzr, [x19]
    1d50:	strh	wzr, [x19, #8]
    1d54:	mov	x21, x1
    1d58:	cbnz	x0, 1dc0 <ffi_prep_java_raw_closure_loc@plt+0x180>
    1d5c:	b	1e1c <ffi_prep_java_raw_closure_loc@plt+0x1dc>
    1d60:	ldr	x5, [x20]
    1d64:	mov	x1, x21
    1d68:	ldr	x2, [x19]
    1d6c:	ldrh	w4, [x5, #8]
    1d70:	sub	x2, x2, #0x1
    1d74:	sub	w0, w4, #0x1
    1d78:	sxtw	x0, w0
    1d7c:	orr	x2, x2, x0
    1d80:	add	x2, x2, #0x1
    1d84:	str	x2, [x19]
    1d88:	cbz	x21, 1d98 <ffi_prep_java_raw_closure_loc@plt+0x158>
    1d8c:	str	x2, [x1], #8
    1d90:	ldr	x2, [x19]
    1d94:	mov	x21, x1
    1d98:	ldrh	w3, [x19, #8]
    1d9c:	ldr	x1, [x5]
    1da0:	cmp	w3, w4
    1da4:	ldr	x0, [x20, #8]!
    1da8:	csel	w3, w3, w4, cs  // cs = hs, nlast
    1dac:	add	x2, x2, x1
    1db0:	str	x2, [x19]
    1db4:	strh	w3, [x19, #8]
    1db8:	and	w3, w3, #0xffff
    1dbc:	cbz	x0, 1de8 <ffi_prep_java_raw_closure_loc@plt+0x1a8>
    1dc0:	ldr	x1, [x0]
    1dc4:	cbnz	x1, 1d60 <ffi_prep_java_raw_closure_loc@plt+0x120>
    1dc8:	mov	x1, #0x0                   	// #0
    1dcc:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1dd0:	cbz	w0, 1d60 <ffi_prep_java_raw_closure_loc@plt+0x120>
    1dd4:	mov	w0, #0x1                   	// #1
    1dd8:	ldp	x19, x20, [sp, #16]
    1ddc:	ldr	x21, [sp, #32]
    1de0:	ldp	x29, x30, [sp], #48
    1de4:	ret
    1de8:	sub	w3, w3, #0x1
    1dec:	sub	x2, x2, #0x1
    1df0:	sxtw	x3, w3
    1df4:	orr	x2, x3, x2
    1df8:	adds	x2, x2, #0x1
    1dfc:	str	x2, [x19]
    1e00:	cset	w0, eq  // eq = none
    1e04:	ldp	x19, x20, [sp, #16]
    1e08:	ldr	x21, [sp, #32]
    1e0c:	ldp	x29, x30, [sp], #48
    1e10:	ret
    1e14:	mov	w0, #0x1                   	// #1
    1e18:	ret
    1e1c:	mov	x2, #0x0                   	// #0
    1e20:	mov	w0, #0x1                   	// #1
    1e24:	str	x2, [x19]
    1e28:	b	1e04 <ffi_prep_java_raw_closure_loc@plt+0x1c4>
    1e2c:	nop
    1e30:	cmp	w1, #0x1
    1e34:	b.ne	1f08 <ffi_prep_java_raw_closure_loc@plt+0x2c8>  // b.any
    1e38:	stp	x29, x30, [sp, #-16]!
    1e3c:	mov	x9, x0
    1e40:	mov	x29, sp
    1e44:	ldr	x0, [x5]
    1e48:	stp	w1, w4, [x9]
    1e4c:	stp	x6, x5, [x9, #8]
    1e50:	str	wzr, [x9, #28]
    1e54:	cbz	x0, 1ed0 <ffi_prep_java_raw_closure_loc@plt+0x290>
    1e58:	ldrh	w0, [x5, #10]
    1e5c:	cmp	w0, #0xd
    1e60:	cset	w7, eq  // eq = none
    1e64:	lsl	w7, w7, #3
    1e68:	cbz	w4, 1ef8 <ffi_prep_java_raw_closure_loc@plt+0x2b8>
    1e6c:	sub	w8, w4, #0x1
    1e70:	add	x8, x8, #0x1
    1e74:	add	x8, x6, x8, lsl #3
    1e78:	b	1eb0 <ffi_prep_java_raw_closure_loc@plt+0x270>
    1e7c:	ldrh	w2, [x0, #8]
    1e80:	sub	w3, w7, #0x1
    1e84:	sub	w1, w1, #0x1
    1e88:	add	x6, x6, #0x8
    1e8c:	sub	w2, w2, #0x1
    1e90:	orr	w1, w1, #0x7
    1e94:	tst	w2, w7
    1e98:	orr	w2, w3, w2
    1e9c:	csinc	w7, w7, w2, eq  // eq = none
    1ea0:	add	w1, w1, #0x1
    1ea4:	add	w7, w7, w1
    1ea8:	cmp	x6, x8
    1eac:	b.eq	1ef8 <ffi_prep_java_raw_closure_loc@plt+0x2b8>  // b.none
    1eb0:	ldr	x0, [x6]
    1eb4:	ldr	x1, [x0]
    1eb8:	cbnz	x1, 1e7c <ffi_prep_java_raw_closure_loc@plt+0x23c>
    1ebc:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1ec0:	cbnz	w0, 1eec <ffi_prep_java_raw_closure_loc@plt+0x2ac>
    1ec4:	ldr	x0, [x6]
    1ec8:	ldr	x1, [x0]
    1ecc:	b	1e7c <ffi_prep_java_raw_closure_loc@plt+0x23c>
    1ed0:	mov	x0, x5
    1ed4:	mov	x1, #0x0                   	// #0
    1ed8:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1edc:	cbnz	w0, 1eec <ffi_prep_java_raw_closure_loc@plt+0x2ac>
    1ee0:	ldr	w4, [x9, #4]
    1ee4:	ldp	x6, x5, [x9, #8]
    1ee8:	b	1e58 <ffi_prep_java_raw_closure_loc@plt+0x218>
    1eec:	mov	w0, #0x1                   	// #1
    1ef0:	ldp	x29, x30, [sp], #16
    1ef4:	ret
    1ef8:	str	w7, [x9, #24]
    1efc:	mov	x0, x9
    1f00:	ldp	x29, x30, [sp], #16
    1f04:	b	5718 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12e8>
    1f08:	mov	w0, #0x2                   	// #2
    1f0c:	ret

0000000000001f10 <ffi_prep_cif@@LIBFFI_BASE_7.0>:
    1f10:	mov	x5, x3
    1f14:	mov	x6, x4
    1f18:	mov	w3, w2
    1f1c:	mov	w4, w2
    1f20:	mov	w2, #0x0                   	// #0
    1f24:	b	1e30 <ffi_prep_java_raw_closure_loc@plt+0x1f0>

0000000000001f28 <ffi_prep_cif_var@@LIBFFI_BASE_7.0>:
    1f28:	mov	w6, w3
    1f2c:	mov	x7, x4
    1f30:	mov	w3, w2
    1f34:	mov	w4, w6
    1f38:	mov	w2, #0x1                   	// #1
    1f3c:	mov	x6, x5
    1f40:	mov	x5, x7
    1f44:	b	1e30 <ffi_prep_java_raw_closure_loc@plt+0x1f0>

0000000000001f48 <ffi_prep_closure@@LIBFFI_CLOSURE_7.0>:
    1f48:	mov	x4, x0
    1f4c:	b	19c0 <ffi_prep_closure_loc@plt>

0000000000001f50 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1>:
    1f50:	cmp	w0, #0x1
    1f54:	mov	x3, x1
    1f58:	b.ne	1f78 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x28>  // b.any
    1f5c:	ldrh	w1, [x1, #10]
    1f60:	cmp	w1, #0xd
    1f64:	b.eq	1f6c <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x1c>  // b.none
    1f68:	ret
    1f6c:	mov	x1, x2
    1f70:	mov	x0, x3
    1f74:	b	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1f78:	mov	w0, #0x2                   	// #2
    1f7c:	ret

0000000000001f80 <ffi_raw_size@@LIBFFI_BASE_7.0>:
    1f80:	ldr	w1, [x0, #4]
    1f84:	ldr	x2, [x0, #8]
    1f88:	subs	w1, w1, #0x1
    1f8c:	mov	x0, #0x0                   	// #0
    1f90:	b.mi	1fd0 <ffi_raw_size@@LIBFFI_BASE_7.0+0x50>  // b.first
    1f94:	nop
    1f98:	ldr	x3, [x2]
    1f9c:	add	x5, x0, #0x1
    1fa0:	add	x0, x0, #0x8
    1fa4:	ldrh	w4, [x3, #10]
    1fa8:	cmp	w4, #0xd
    1fac:	b.eq	1fc0 <ffi_raw_size@@LIBFFI_BASE_7.0+0x40>  // b.none
    1fb0:	ldr	x0, [x3]
    1fb4:	sub	x0, x0, #0x1
    1fb8:	orr	x0, x0, #0x7
    1fbc:	add	x0, x0, x5
    1fc0:	sub	w1, w1, #0x1
    1fc4:	add	x2, x2, #0x8
    1fc8:	cmn	w1, #0x1
    1fcc:	b.ne	1f98 <ffi_raw_size@@LIBFFI_BASE_7.0+0x18>  // b.any
    1fd0:	ret
    1fd4:	nop

0000000000001fd8 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    1fd8:	ldr	w5, [x0, #4]
    1fdc:	ldr	x4, [x0, #8]
    1fe0:	cbz	w5, 2040 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>
    1fe4:	mov	x0, #0x0                   	// #0
    1fe8:	b	201c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x44>
    1fec:	cmp	w3, #0xf
    1ff0:	b.eq	202c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x54>  // b.none
    1ff4:	str	x1, [x2, x0, lsl #3]
    1ff8:	ldr	x3, [x4, x0, lsl #3]
    1ffc:	add	x0, x0, #0x1
    2000:	cmp	w5, w0
    2004:	ldr	x3, [x3]
    2008:	sub	x3, x3, #0x1
    200c:	orr	x3, x3, #0x7
    2010:	add	x3, x3, #0x1
    2014:	add	x1, x1, x3
    2018:	b.ls	2040 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>  // b.plast
    201c:	ldr	x3, [x4, x0, lsl #3]
    2020:	ldrh	w3, [x3, #10]
    2024:	cmp	w3, #0xd
    2028:	b.ne	1fec <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.any
    202c:	ldr	x3, [x1], #8
    2030:	str	x3, [x2, x0, lsl #3]
    2034:	add	x0, x0, #0x1
    2038:	cmp	w5, w0
    203c:	b.hi	201c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x44>  // b.pmore
    2040:	ret
    2044:	nop

0000000000002048 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    2048:	stp	x29, x30, [sp, #-48]!
    204c:	mov	x29, sp
    2050:	ldr	w5, [x0, #4]
    2054:	stp	x21, x22, [sp, #32]
    2058:	ldr	x21, [x0, #8]
    205c:	cbz	w5, 20dc <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x94>
    2060:	mov	x22, x0
    2064:	mov	x4, x2
    2068:	stp	x19, x20, [sp, #16]
    206c:	mov	x20, x1
    2070:	mov	x19, #0x0                   	// #0
    2074:	b	209c <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x54>
    2078:	cmp	w3, #0x7
    207c:	b.eq	2168 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x120>  // b.none
    2080:	cmp	w3, #0x8
    2084:	b.ne	2128 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xe0>  // b.any
    2088:	ldrsh	x0, [x1]
    208c:	str	x0, [x4], #8
    2090:	add	x19, x19, #0x1
    2094:	cmp	w5, w19
    2098:	b.ls	20d8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x90>  // b.plast
    209c:	ldr	x2, [x21, x19, lsl #3]
    20a0:	ldr	x1, [x20, x19, lsl #3]
    20a4:	ldrh	w3, [x2, #10]
    20a8:	cmp	w3, #0x9
    20ac:	b.eq	215c <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x114>  // b.none
    20b0:	b.ls	2078 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x30>  // b.plast
    20b4:	cmp	w3, #0xe
    20b8:	b.eq	2150 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x108>  // b.none
    20bc:	b.ls	20e8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xa0>  // b.plast
    20c0:	cmp	w3, #0xf
    20c4:	b.ne	20f8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xb0>  // b.any
    20c8:	str	x1, [x4], #8
    20cc:	add	x19, x19, #0x1
    20d0:	cmp	w5, w19
    20d4:	b.hi	209c <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x54>  // b.pmore
    20d8:	ldp	x19, x20, [sp, #16]
    20dc:	ldp	x21, x22, [sp, #32]
    20e0:	ldp	x29, x30, [sp], #48
    20e4:	ret
    20e8:	cmp	w3, #0xa
    20ec:	b.eq	2174 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x12c>  // b.none
    20f0:	cmp	w3, #0xd
    20f4:	b.eq	20c8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x80>  // b.none
    20f8:	ldr	x2, [x2]
    20fc:	mov	x0, x4
    2100:	bl	19b0 <memcpy@plt>
    2104:	mov	x4, x0
    2108:	ldr	x0, [x21, x19, lsl #3]
    210c:	ldr	w5, [x22, #4]
    2110:	ldr	x1, [x0]
    2114:	sub	x1, x1, #0x1
    2118:	orr	x1, x1, #0x7
    211c:	add	x1, x1, #0x1
    2120:	add	x4, x4, x1
    2124:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2128:	cmp	w3, #0x5
    212c:	b.eq	2144 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xfc>  // b.none
    2130:	cmp	w3, #0x6
    2134:	b.ne	20f8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xb0>  // b.any
    2138:	ldrsb	x0, [x1]
    213c:	str	x0, [x4], #8
    2140:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2144:	ldrb	w0, [x1]
    2148:	str	x0, [x4], #8
    214c:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2150:	ldr	x0, [x1]
    2154:	str	x0, [x4], #8
    2158:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    215c:	ldr	w0, [x1]
    2160:	str	x0, [x4], #8
    2164:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2168:	ldrh	w0, [x1]
    216c:	str	x0, [x4], #8
    2170:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2174:	ldrsw	x0, [x1]
    2178:	str	x0, [x4], #8
    217c:	b	2090 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2180:	stp	x29, x30, [sp, #-48]!
    2184:	mov	x29, sp
    2188:	stp	x19, x20, [sp, #16]
    218c:	mov	x20, x3
    2190:	mov	x19, x0
    2194:	stp	x21, x22, [sp, #32]
    2198:	mov	x21, x1
    219c:	mov	x22, x2
    21a0:	bl	1b40 <ffi_raw_size@plt>
    21a4:	add	x4, x0, #0xf
    21a8:	and	x2, x4, #0xfffffffffffffff0
    21ac:	mov	x1, x22
    21b0:	sub	sp, sp, x2
    21b4:	mov	x0, x19
    21b8:	mov	x22, sp
    21bc:	mov	x2, x22
    21c0:	bl	1b50 <ffi_ptrarray_to_raw@plt>
    21c4:	ldp	x4, x3, [x20, #48]
    21c8:	mov	x2, x22
    21cc:	mov	x1, x21
    21d0:	mov	x0, x19
    21d4:	blr	x4
    21d8:	mov	sp, x29
    21dc:	ldp	x19, x20, [sp, #16]
    21e0:	ldp	x21, x22, [sp, #32]
    21e4:	ldp	x29, x30, [sp], #48
    21e8:	ret
    21ec:	nop

00000000000021f0 <ffi_raw_call@@LIBFFI_BASE_7.0>:
    21f0:	stp	x29, x30, [sp, #-48]!
    21f4:	mov	x29, sp
    21f8:	stp	x19, x20, [sp, #16]
    21fc:	mov	x20, x1
    2200:	mov	x1, x3
    2204:	ldr	w3, [x0, #4]
    2208:	mov	x19, x0
    220c:	stp	x21, x22, [sp, #32]
    2210:	mov	x21, x2
    2214:	lsl	x3, x3, #3
    2218:	add	x3, x3, #0xf
    221c:	and	x3, x3, #0xffffffff0
    2220:	sub	sp, sp, x3
    2224:	mov	x22, sp
    2228:	mov	x2, x22
    222c:	bl	1a60 <ffi_raw_to_ptrarray@plt>
    2230:	mov	x3, x22
    2234:	mov	x2, x21
    2238:	mov	x1, x20
    223c:	mov	x0, x19
    2240:	bl	1b90 <ffi_call@plt>
    2244:	mov	sp, x29
    2248:	ldp	x19, x20, [sp, #16]
    224c:	ldp	x21, x22, [sp, #32]
    2250:	ldp	x29, x30, [sp], #48
    2254:	ret

0000000000002258 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    2258:	stp	x29, x30, [sp, #-48]!
    225c:	mov	x29, sp
    2260:	stp	x19, x20, [sp, #16]
    2264:	mov	x20, x3
    2268:	mov	x19, x0
    226c:	mov	x3, x4
    2270:	str	x21, [sp, #32]
    2274:	mov	x21, x2
    2278:	adrp	x2, 2000 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x28>
    227c:	add	x2, x2, #0x180
    2280:	bl	19c0 <ffi_prep_closure_loc@plt>
    2284:	cbnz	w0, 228c <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x34>
    2288:	stp	x21, x20, [x19, #48]
    228c:	ldp	x19, x20, [sp, #16]
    2290:	ldr	x21, [sp, #32]
    2294:	ldp	x29, x30, [sp], #48
    2298:	ret
    229c:	nop

00000000000022a0 <ffi_prep_raw_closure@@LIBFFI_CLOSURE_7.0>:
    22a0:	mov	x4, x0
    22a4:	b	1a70 <ffi_prep_raw_closure_loc@plt>

00000000000022a8 <ffi_java_raw_size@@LIBFFI_BASE_7.0>:
    22a8:	ldr	w2, [x0, #4]
    22ac:	ldr	x3, [x0, #8]
    22b0:	subs	w2, w2, #0x1
    22b4:	mov	x0, #0x0                   	// #0
    22b8:	b.mi	230c <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x64>  // b.first
    22bc:	nop
    22c0:	ldr	x1, [x3]
    22c4:	ldrh	w1, [x1, #10]
    22c8:	cmp	w1, #0xc
    22cc:	b.hi	22f8 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x50>  // b.pmore
    22d0:	cmp	w1, #0xa
    22d4:	b.hi	22e0 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x38>  // b.pmore
    22d8:	cmp	w1, #0x3
    22dc:	b.ne	2304 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x5c>  // b.any
    22e0:	add	x0, x0, #0x10
    22e4:	sub	w2, w2, #0x1
    22e8:	add	x3, x3, #0x8
    22ec:	cmn	w2, #0x1
    22f0:	b.ne	22c0 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x18>  // b.any
    22f4:	ret
    22f8:	and	w1, w1, #0xfffffffd
    22fc:	cmp	w1, #0xd
    2300:	b.eq	2310 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x68>  // b.none
    2304:	add	x0, x0, #0x8
    2308:	b	22e4 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x3c>
    230c:	ret
    2310:	stp	x29, x30, [sp, #-16]!
    2314:	mov	x29, sp
    2318:	bl	1ae0 <abort@plt>
    231c:	nop

0000000000002320 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    2320:	ldr	w4, [x0, #4]
    2324:	ldr	x5, [x0, #8]
    2328:	cbz	w4, 237c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x5c>
    232c:	mov	x0, #0x0                   	// #0
    2330:	b	2358 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x38>
    2334:	cmp	w3, #0xa
    2338:	b.hi	2380 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x60>  // b.pmore
    233c:	cmp	w3, #0x3
    2340:	b.eq	2380 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x60>  // b.none
    2344:	str	x1, [x2, x0, lsl #3]
    2348:	add	x1, x1, #0x8
    234c:	add	x0, x0, #0x1
    2350:	cmp	w4, w0
    2354:	b.ls	237c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x5c>  // b.plast
    2358:	ldr	x3, [x5, x0, lsl #3]
    235c:	ldrh	w3, [x3, #10]
    2360:	cmp	w3, #0xc
    2364:	b.ls	2334 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.plast
    2368:	cmp	w3, #0xf
    236c:	b.ne	2344 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x24>  // b.any
    2370:	stp	x29, x30, [sp, #-16]!
    2374:	mov	x29, sp
    2378:	bl	1ae0 <abort@plt>
    237c:	ret
    2380:	str	x1, [x2, x0, lsl #3]
    2384:	add	x1, x1, #0x10
    2388:	b	234c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x2c>
    238c:	nop

0000000000002390 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    2390:	ldr	w4, [x0, #4]
    2394:	ldr	x5, [x0, #8]
    2398:	cbz	w4, 241c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x8c>
    239c:	mov	x3, #0x0                   	// #0
    23a0:	b	23d4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x44>
    23a4:	cmp	w0, #0x5
    23a8:	b.eq	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xf8>  // b.none
    23ac:	b.ls	2420 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x90>  // b.plast
    23b0:	cmp	w0, #0x6
    23b4:	b.eq	2468 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xd8>  // b.none
    23b8:	ldr	x0, [x1, x3, lsl #3]
    23bc:	ldrh	w0, [x0]
    23c0:	str	x0, [x2], #8
    23c4:	nop
    23c8:	add	x3, x3, #0x1
    23cc:	cmp	w4, w3
    23d0:	b.ls	241c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x8c>  // b.plast
    23d4:	ldr	x0, [x5, x3, lsl #3]
    23d8:	ldrh	w0, [x0, #10]
    23dc:	cmp	w0, #0x8
    23e0:	b.eq	2478 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xe8>  // b.none
    23e4:	b.ls	23a4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x14>  // b.plast
    23e8:	cmp	w0, #0xa
    23ec:	b.eq	2498 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x108>  // b.none
    23f0:	b.ls	2438 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xa8>  // b.plast
    23f4:	cmp	w0, #0xc
    23f8:	b.ls	2458 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc8>  // b.plast
    23fc:	cmp	w0, #0xe
    2400:	b.ne	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>  // b.any
    2404:	ldr	x0, [x1, x3, lsl #3]
    2408:	add	x3, x3, #0x1
    240c:	cmp	w4, w3
    2410:	ldr	x0, [x0]
    2414:	str	x0, [x2], #8
    2418:	b.hi	23d4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x44>  // b.pmore
    241c:	ret
    2420:	cmp	w0, #0x2
    2424:	b.ne	2450 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc0>  // b.any
    2428:	ldr	x0, [x1, x3, lsl #3]
    242c:	ldr	s0, [x0]
    2430:	str	s0, [x2], #8
    2434:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2438:	cmp	w0, #0x9
    243c:	b.ne	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>  // b.any
    2440:	ldr	x0, [x1, x3, lsl #3]
    2444:	ldr	w0, [x0]
    2448:	str	x0, [x2], #8
    244c:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2450:	cmp	w0, #0x3
    2454:	b.ne	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>  // b.any
    2458:	ldr	x0, [x1, x3, lsl #3]
    245c:	ldr	x0, [x0]
    2460:	str	x0, [x2], #16
    2464:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2468:	ldr	x0, [x1, x3, lsl #3]
    246c:	ldrsb	x0, [x0]
    2470:	str	x0, [x2], #8
    2474:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2478:	ldr	x0, [x1, x3, lsl #3]
    247c:	ldrsh	x0, [x0]
    2480:	str	x0, [x2], #8
    2484:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2488:	ldr	x0, [x1, x3, lsl #3]
    248c:	ldrb	w0, [x0]
    2490:	str	x0, [x2], #8
    2494:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2498:	ldr	x0, [x1, x3, lsl #3]
    249c:	ldrsw	x0, [x0]
    24a0:	str	x0, [x2], #8
    24a4:	b	23c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    24a8:	stp	x29, x30, [sp, #-48]!
    24ac:	mov	x29, sp
    24b0:	stp	x19, x20, [sp, #16]
    24b4:	mov	x20, x3
    24b8:	mov	x19, x0
    24bc:	stp	x21, x22, [sp, #32]
    24c0:	mov	x21, x1
    24c4:	mov	x22, x2
    24c8:	bl	1b30 <ffi_java_raw_size@plt>
    24cc:	add	x4, x0, #0xf
    24d0:	and	x2, x4, #0xfffffffffffffff0
    24d4:	mov	x1, x22
    24d8:	sub	sp, sp, x2
    24dc:	mov	x0, x19
    24e0:	mov	x22, sp
    24e4:	mov	x2, x22
    24e8:	bl	1bf0 <ffi_java_ptrarray_to_raw@plt>
    24ec:	ldp	x4, x3, [x20, #48]
    24f0:	mov	x2, x22
    24f4:	mov	x1, x21
    24f8:	mov	x0, x19
    24fc:	blr	x4
    2500:	mov	sp, x29
    2504:	ldp	x19, x20, [sp, #16]
    2508:	ldp	x21, x22, [sp, #32]
    250c:	ldp	x29, x30, [sp], #48
    2510:	ret
    2514:	nop

0000000000002518 <ffi_java_raw_call@@LIBFFI_BASE_7.0>:
    2518:	stp	x29, x30, [sp, #-48]!
    251c:	mov	x29, sp
    2520:	stp	x19, x20, [sp, #16]
    2524:	mov	x20, x1
    2528:	mov	x1, x3
    252c:	ldr	w3, [x0, #4]
    2530:	mov	x19, x0
    2534:	stp	x21, x22, [sp, #32]
    2538:	mov	x21, x2
    253c:	lsl	x3, x3, #3
    2540:	add	x3, x3, #0xf
    2544:	and	x3, x3, #0xffffffff0
    2548:	sub	sp, sp, x3
    254c:	mov	x22, sp
    2550:	mov	x2, x22
    2554:	bl	19e0 <ffi_java_raw_to_ptrarray@plt>
    2558:	mov	x3, x22
    255c:	mov	x2, x21
    2560:	mov	x1, x20
    2564:	mov	x0, x19
    2568:	bl	1b90 <ffi_call@plt>
    256c:	mov	sp, x29
    2570:	ldp	x19, x20, [sp, #16]
    2574:	ldp	x21, x22, [sp, #32]
    2578:	ldp	x29, x30, [sp], #48
    257c:	ret

0000000000002580 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    2580:	stp	x29, x30, [sp, #-48]!
    2584:	mov	x29, sp
    2588:	stp	x19, x20, [sp, #16]
    258c:	mov	x20, x3
    2590:	mov	x19, x0
    2594:	mov	x3, x4
    2598:	str	x21, [sp, #32]
    259c:	mov	x21, x2
    25a0:	adrp	x2, 2000 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x28>
    25a4:	add	x2, x2, #0x4a8
    25a8:	bl	19c0 <ffi_prep_closure_loc@plt>
    25ac:	cbnz	w0, 25b4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x34>
    25b0:	stp	x21, x20, [x19, #48]
    25b4:	ldp	x19, x20, [sp, #16]
    25b8:	ldr	x21, [sp, #32]
    25bc:	ldp	x29, x30, [sp], #48
    25c0:	ret
    25c4:	nop

00000000000025c8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0>:
    25c8:	mov	x4, x0
    25cc:	b	1c40 <ffi_prep_java_raw_closure_loc@plt>
    25d0:	stp	x29, x30, [sp, #-48]!
    25d4:	adrp	x2, 17000 <memcpy@GLIBC_2.17>
    25d8:	add	x2, x2, #0x198
    25dc:	mov	x29, sp
    25e0:	add	x2, x2, #0x398
    25e4:	str	x19, [sp, #16]
    25e8:	mov	x19, x0
    25ec:	nop
    25f0:	ldr	x3, [x2]
    25f4:	cmp	x19, x3
    25f8:	b.cc	260c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x44>  // b.lo, b.ul, b.last
    25fc:	ldr	x0, [x2, #8]
    2600:	add	x3, x3, x0
    2604:	cmp	x19, x3
    2608:	b.cc	2624 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x5c>  // b.lo, b.ul, b.last
    260c:	ldr	x2, [x2, #16]
    2610:	cbnz	x2, 25f0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x28>
    2614:	mov	x0, x19
    2618:	ldr	x19, [sp, #16]
    261c:	ldp	x29, x30, [sp], #48
    2620:	b	1b80 <munmap@plt>
    2624:	ldr	x0, [x2, #24]
    2628:	add	x0, x19, x0
    262c:	cmp	x19, x0
    2630:	b.eq	2614 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4c>  // b.none
    2634:	str	x1, [sp, #40]
    2638:	bl	1b80 <munmap@plt>
    263c:	ldr	x1, [sp, #40]
    2640:	cbz	w0, 2614 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4c>
    2644:	ldr	x19, [sp, #16]
    2648:	ldp	x29, x30, [sp], #48
    264c:	ret
    2650:	stp	x29, x30, [sp, #-32]!
    2654:	mov	w1, #0x4082                	// #16514
    2658:	movk	w1, #0x48, lsl #16
    265c:	mov	x29, sp
    2660:	mov	w2, #0x1c0                 	// #448
    2664:	stp	x19, x20, [sp, #16]
    2668:	mov	x20, x0
    266c:	bl	1a30 <open@plt>
    2670:	mov	w19, w0
    2674:	cmn	w0, #0x1
    2678:	b.ne	2694 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0xcc>  // b.any
    267c:	bl	1bd0 <__errno_location@plt>
    2680:	ldr	w1, [x0]
    2684:	cmp	w1, #0x5f
    2688:	sub	w1, w1, #0x15
    268c:	ccmp	w1, #0x1, #0x0, ne  // ne = any
    2690:	b.ls	26a8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0xe0>  // b.plast
    2694:	mov	sp, x29
    2698:	mov	w0, w19
    269c:	ldp	x19, x20, [sp, #16]
    26a0:	ldp	x29, x30, [sp], #32
    26a4:	ret
    26a8:	str	wzr, [x0]
    26ac:	mov	x0, x20
    26b0:	bl	19d0 <strlen@plt>
    26b4:	sxtw	x19, w0
    26b8:	add	x0, x19, #0x1a
    26bc:	mov	x1, x20
    26c0:	and	x0, x0, #0xfffffffffffffff0
    26c4:	mov	x2, x19
    26c8:	sub	sp, sp, x0
    26cc:	mov	x20, sp
    26d0:	mov	x0, x20
    26d4:	bl	19b0 <memcpy@plt>
    26d8:	adrp	x2, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    26dc:	add	x2, x2, #0x148
    26e0:	add	x3, x20, x19
    26e4:	mov	x0, x20
    26e8:	mov	w1, #0x80000               	// #524288
    26ec:	ldr	x4, [x2]
    26f0:	str	x4, [x20, x19]
    26f4:	ldur	w2, [x2, #7]
    26f8:	stur	w2, [x3, #7]
    26fc:	bl	1af0 <mkostemp@plt>
    2700:	mov	w19, w0
    2704:	cmn	w0, #0x1
    2708:	b.eq	2694 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0xcc>  // b.none
    270c:	mov	x0, x20
    2710:	bl	1c30 <unlink@plt>
    2714:	mov	sp, x29
    2718:	mov	w0, w19
    271c:	ldp	x19, x20, [sp, #16]
    2720:	ldp	x29, x30, [sp], #32
    2724:	ret
    2728:	stp	x29, x30, [sp, #-16]!
    272c:	mov	x29, sp
    2730:	bl	1be0 <getenv@plt>
    2734:	cbz	x0, 2740 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x178>
    2738:	ldp	x29, x30, [sp], #16
    273c:	b	2650 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x88>
    2740:	mov	w0, #0xffffffff            	// #-1
    2744:	ldp	x29, x30, [sp], #16
    2748:	ret
    274c:	nop
    2750:	stp	x29, x30, [sp, #-48]!
    2754:	mov	x3, #0xffffffffffffffff    	// #-1
    2758:	mov	x2, #0x200000              	// #2097152
    275c:	mov	x29, sp
    2760:	stp	x19, x20, [sp, #16]
    2764:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    2768:	add	x19, x20, #0x198
    276c:	mov	w1, #0x7                   	// #7
    2770:	str	x21, [sp, #32]
    2774:	add	x0, x19, #0x3e8
    2778:	str	x3, [x19, #976]
    277c:	str	x2, [x19, #984]
    2780:	str	w1, [x19, #992]
    2784:	bl	1c00 <pthread_mutex_lock@plt>
    2788:	ldr	x0, [x19, #952]
    278c:	cbz	x0, 27ec <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x224>
    2790:	add	x21, x20, #0x198
    2794:	add	x0, x21, #0x3e8
    2798:	bl	1c20 <pthread_mutex_unlock@plt>
    279c:	mov	w0, #0x1e                  	// #30
    27a0:	bl	1ba0 <sysconf@plt>
    27a4:	mov	x19, x0
    27a8:	mov	w0, #0x1e                  	// #30
    27ac:	str	x19, [x21, #960]
    27b0:	bl	1ba0 <sysconf@plt>
    27b4:	mov	x2, x19
    27b8:	cbnz	x0, 2810 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x248>
    27bc:	add	x20, x20, #0x198
    27c0:	sub	x1, x2, #0x1
    27c4:	sub	x0, x19, #0x1
    27c8:	and	x1, x1, x2
    27cc:	and	x19, x0, x19
    27d0:	str	x2, [x20, #968]
    27d4:	orr	x19, x1, x19
    27d8:	cbnz	x19, 2820 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x258>
    27dc:	ldp	x19, x20, [sp, #16]
    27e0:	ldr	x21, [sp, #32]
    27e4:	ldp	x29, x30, [sp], #48
    27e8:	ret
    27ec:	mov	x2, #0x5858                	// #22616
    27f0:	add	x0, x19, #0x368
    27f4:	movk	x2, #0x5858, lsl #16
    27f8:	mov	x1, #0x0                   	// #0
    27fc:	str	x2, [x19, #952]
    2800:	bl	1aa0 <pthread_mutex_init@plt>
    2804:	ldr	w0, [x19, #992]
    2808:	str	w0, [x19, #864]
    280c:	b	2790 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x1c8>
    2810:	mov	w0, #0x1e                  	// #30
    2814:	bl	1ba0 <sysconf@plt>
    2818:	mov	x2, x0
    281c:	b	27bc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x1f4>
    2820:	bl	1ae0 <abort@plt>
    2824:	nop
    2828:	mov	x12, #0x3070                	// #12400
    282c:	sub	sp, sp, x12
    2830:	stp	x29, x30, [sp]
    2834:	mov	x29, sp
    2838:	stp	x23, x24, [sp, #48]
    283c:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    2840:	add	x0, x24, #0x198
    2844:	stp	x21, x22, [sp, #32]
    2848:	adrp	x23, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    284c:	add	x22, sp, #0x70
    2850:	ldr	x21, [x0, #1048]
    2854:	add	x23, x23, #0x160
    2858:	stp	x19, x20, [sp, #16]
    285c:	adrp	x20, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    2860:	add	x19, sp, #0x48
    2864:	add	x20, x20, #0x158
    2868:	mov	x2, x22
    286c:	mov	x1, x19
    2870:	mov	x0, x21
    2874:	mov	w3, #0x3000                	// #12288
    2878:	bl	1bb0 <getmntent_r@plt>
    287c:	cbz	x0, 28e0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x318>
    2880:	mov	x1, x20
    2884:	mov	x0, x19
    2888:	bl	1b60 <hasmntopt@plt>
    288c:	cbnz	x0, 2868 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x2a0>
    2890:	mov	x1, x23
    2894:	mov	x0, x19
    2898:	bl	1b60 <hasmntopt@plt>
    289c:	cbnz	x0, 2868 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x2a0>
    28a0:	ldr	x0, [sp, #80]
    28a4:	mov	w1, #0x2                   	// #2
    28a8:	bl	1b00 <access@plt>
    28ac:	cbnz	w0, 2868 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x2a0>
    28b0:	ldr	x0, [sp, #80]
    28b4:	bl	2650 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x88>
    28b8:	cmn	w0, #0x1
    28bc:	add	x1, x24, #0x198
    28c0:	b.ne	28e4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x31c>  // b.any
    28c4:	ldr	x21, [x1, #1048]
    28c8:	mov	x2, x22
    28cc:	mov	x1, x19
    28d0:	mov	w3, #0x3000                	// #12288
    28d4:	mov	x0, x21
    28d8:	bl	1bb0 <getmntent_r@plt>
    28dc:	cbnz	x0, 2880 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x2b8>
    28e0:	mov	w0, #0xffffffff            	// #-1
    28e4:	mov	x12, #0x3070                	// #12400
    28e8:	ldp	x29, x30, [sp]
    28ec:	ldp	x19, x20, [sp, #16]
    28f0:	ldp	x21, x22, [sp, #32]
    28f4:	ldp	x23, x24, [sp, #48]
    28f8:	add	sp, sp, x12
    28fc:	ret
    2900:	stp	x29, x30, [sp, #-32]!
    2904:	mov	x29, sp
    2908:	stp	x19, x20, [sp, #16]
    290c:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    2910:	add	x1, x20, #0x198
    2914:	mov	x19, x0
    2918:	ldr	x2, [x1, #1056]
    291c:	ldr	x0, [x1, #1048]
    2920:	cmp	x2, x19
    2924:	b.eq	2950 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x388>  // b.none
    2928:	cbz	x0, 2930 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x368>
    292c:	bl	1a90 <endmntent@plt>
    2930:	add	x20, x20, #0x198
    2934:	str	x19, [x20, #1056]
    2938:	cbz	x19, 2960 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x398>
    293c:	mov	x0, x19
    2940:	adrp	x1, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    2944:	add	x1, x1, #0x168
    2948:	bl	1a80 <setmntent@plt>
    294c:	str	x0, [x20, #1048]
    2950:	cbz	x0, 2964 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x39c>
    2954:	ldp	x19, x20, [sp, #16]
    2958:	ldp	x29, x30, [sp], #32
    295c:	b	2828 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x260>
    2960:	str	xzr, [x20, #1048]
    2964:	mov	w0, #0xffffffff            	// #-1
    2968:	ldp	x19, x20, [sp, #16]
    296c:	ldp	x29, x30, [sp], #32
    2970:	ret
    2974:	nop
    2978:	stp	x29, x30, [sp, #-96]!
    297c:	mov	x29, sp
    2980:	stp	x23, x24, [sp, #48]
    2984:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    2988:	stp	x19, x20, [sp, #16]
    298c:	ldr	w19, [x23, #392]
    2990:	stp	x21, x22, [sp, #32]
    2994:	mov	x21, x0
    2998:	cmn	w19, #0x1
    299c:	stp	x25, x26, [sp, #64]
    29a0:	adrp	x22, 17000 <memcpy@GLIBC_2.17>
    29a4:	stp	x27, x28, [sp, #80]
    29a8:	b.ne	29fc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x434>  // b.any
    29ac:	add	x2, x22, #0x198
    29b0:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    29b4:	adrp	x1, 2000 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x28>
    29b8:	add	x0, x0, #0x170
    29bc:	add	x1, x1, #0x728
    29c0:	adrp	x20, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    29c4:	str	wzr, [x2, #1064]
    29c8:	add	x20, x20, #0xd18
    29cc:	add	x24, x22, #0x198
    29d0:	blr	x1
    29d4:	mov	w19, w0
    29d8:	ldr	w1, [x24, #1064]
    29dc:	cmn	w0, #0x1
    29e0:	sbfiz	x0, x1, #1, #32
    29e4:	add	x0, x0, w1, sxtw
    29e8:	add	x2, x20, x0, lsl #3
    29ec:	ldr	w2, [x2, #16]
    29f0:	cbz	w2, 2ab0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4e8>
    29f4:	b.eq	2aa0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4d8>  // b.none
    29f8:	str	w19, [x23, #392]
    29fc:	add	x27, x22, #0x198
    2a00:	mov	x24, x21
    2a04:	mov	x26, sp
    2a08:	ldr	x20, [x27, #1080]
    2a0c:	ldr	x25, [x27, #1072]
    2a10:	cbz	x20, 2bd4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x60c>
    2a14:	add	x0, x20, #0xf
    2a18:	mov	x2, x20
    2a1c:	and	x0, x0, #0xfffffffffffffff0
    2a20:	mov	w1, #0x0                   	// #0
    2a24:	sub	sp, sp, x0
    2a28:	mov	x0, sp
    2a2c:	bl	1a50 <memset@plt>
    2a30:	cmp	x21, #0x0
    2a34:	mov	x28, sp
    2a38:	b.le	2ae4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x51c>
    2a3c:	add	x27, x22, #0x198
    2a40:	b	2a50 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x488>
    2a44:	cmp	x24, #0x0
    2a48:	b.le	2ae0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x518>
    2a4c:	ldr	x20, [x27, #1080]
    2a50:	cmp	x24, x20
    2a54:	csel	x20, x24, x20, ls  // ls = plast
    2a58:	mov	x1, x28
    2a5c:	mov	w0, w19
    2a60:	mov	x2, x20
    2a64:	sub	x24, x24, x20
    2a68:	bl	1ad0 <write@plt>
    2a6c:	cmp	x20, x0
    2a70:	b.le	2a44 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x47c>
    2a74:	mov	sp, x26
    2a78:	mov	x20, #0xffffffffffffffff    	// #-1
    2a7c:	mov	sp, x29
    2a80:	mov	x0, x20
    2a84:	ldp	x19, x20, [sp, #16]
    2a88:	ldp	x21, x22, [sp, #32]
    2a8c:	ldp	x23, x24, [sp, #48]
    2a90:	ldp	x25, x26, [sp, #64]
    2a94:	ldp	x27, x28, [sp, #80]
    2a98:	ldp	x29, x30, [sp], #96
    2a9c:	ret
    2aa0:	ldr	x1, [x20, x0, lsl #3]
    2aa4:	mov	x0, #0x0                   	// #0
    2aa8:	blr	x1
    2aac:	ldr	w1, [x24, #1064]
    2ab0:	add	w1, w1, #0x1
    2ab4:	str	w1, [x24, #1064]
    2ab8:	cmp	w1, #0x7
    2abc:	sbfiz	x0, x1, #1, #32
    2ac0:	b.eq	2ba8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x5e0>  // b.none
    2ac4:	add	x1, x0, w1, sxtw
    2ac8:	cmn	w19, #0x1
    2acc:	b.ne	29f8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x430>  // b.any
    2ad0:	add	x0, x20, x1, lsl #3
    2ad4:	ldr	x1, [x20, x1, lsl #3]
    2ad8:	ldr	x0, [x0, #8]
    2adc:	b	29d0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x408>
    2ae0:	ldr	w19, [x23, #392]
    2ae4:	mov	x5, x25
    2ae8:	mov	w4, w19
    2aec:	mov	sp, x26
    2af0:	mov	x1, x21
    2af4:	mov	w3, #0x1                   	// #1
    2af8:	mov	w2, #0x5                   	// #5
    2afc:	mov	x0, #0x0                   	// #0
    2b00:	bl	1b10 <mmap@plt>
    2b04:	mov	x24, x0
    2b08:	cmn	x0, #0x1
    2b0c:	b.eq	2be8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x620>  // b.none
    2b10:	cbnz	x25, 2b60 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x598>
    2b14:	add	x20, x22, #0x198
    2b18:	adrp	x1, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    2b1c:	add	x1, x1, #0xd18
    2b20:	ldrsw	x0, [x20, #1064]
    2b24:	add	x0, x0, x0, lsl #1
    2b28:	lsl	x0, x0, #3
    2b2c:	add	x2, x1, x0
    2b30:	ldr	w2, [x2, #16]
    2b34:	cbz	w2, 2b60 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x598>
    2b38:	ldr	x1, [x1, x0]
    2b3c:	mov	x0, #0x0                   	// #0
    2b40:	blr	x1
    2b44:	ldr	w19, [x23, #392]
    2b48:	ldr	w0, [x20, #1064]
    2b4c:	add	w0, w0, #0x1
    2b50:	str	w0, [x20, #1064]
    2b54:	cmp	w0, #0x7
    2b58:	b.eq	2c30 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x668>  // b.none
    2b5c:	nop
    2b60:	mov	x5, x25
    2b64:	mov	w4, w19
    2b68:	mov	x1, x21
    2b6c:	mov	w3, #0x1                   	// #1
    2b70:	mov	w2, #0x3                   	// #3
    2b74:	mov	x0, #0x0                   	// #0
    2b78:	bl	1b10 <mmap@plt>
    2b7c:	mov	x20, x0
    2b80:	cmn	x0, #0x1
    2b84:	b.eq	2c38 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x670>  // b.none
    2b88:	add	x22, x22, #0x198
    2b8c:	add	x1, x0, x21
    2b90:	sub	x24, x24, x0
    2b94:	ldr	x0, [x22, #1072]
    2b98:	stur	x24, [x1, #-8]
    2b9c:	add	x21, x0, x21
    2ba0:	str	x21, [x22, #1072]
    2ba4:	b	2a7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4b4>
    2ba8:	str	w19, [x23, #392]
    2bac:	cmn	w19, #0x1
    2bb0:	str	wzr, [x24, #1064]
    2bb4:	mov	x20, #0xffffffffffffffff    	// #-1
    2bb8:	b.eq	2a7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4b4>  // b.none
    2bbc:	add	x27, x22, #0x198
    2bc0:	mov	x24, x21
    2bc4:	mov	x26, sp
    2bc8:	ldr	x20, [x27, #1080]
    2bcc:	ldr	x25, [x27, #1072]
    2bd0:	cbnz	x20, 2a14 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x44c>
    2bd4:	mov	w0, #0x1e                  	// #30
    2bd8:	bl	1ba0 <sysconf@plt>
    2bdc:	mov	x20, x0
    2be0:	str	x0, [x27, #1080]
    2be4:	b	2a14 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x44c>
    2be8:	cbnz	x25, 2c1c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x654>
    2bec:	mov	w0, w19
    2bf0:	bl	1ab0 <close@plt>
    2bf4:	add	x0, x22, #0x198
    2bf8:	adrp	x20, 16000 <ffi_type_void@@LIBFFI_BASE_7.0+0xfed0>
    2bfc:	add	x1, x20, #0xd18
    2c00:	ldrsw	x0, [x0, #1064]
    2c04:	add	x0, x0, x0, lsl #1
    2c08:	lsl	x0, x0, #3
    2c0c:	add	x2, x1, x0
    2c10:	ldr	x1, [x1, x0]
    2c14:	ldr	x0, [x2, #8]
    2c18:	b	29c8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x400>
    2c1c:	mov	x1, x25
    2c20:	mov	w0, w19
    2c24:	mov	x20, x24
    2c28:	bl	1bc0 <ftruncate@plt>
    2c2c:	b	2a7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4b4>
    2c30:	str	wzr, [x20, #1064]
    2c34:	b	2b60 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x598>
    2c38:	mov	x1, x21
    2c3c:	mov	x0, x24
    2c40:	bl	1b80 <munmap@plt>
    2c44:	mov	x1, x25
    2c48:	mov	w0, w19
    2c4c:	bl	1bc0 <ftruncate@plt>
    2c50:	b	2a7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4b4>
    2c54:	nop
    2c58:	stp	x29, x30, [sp, #-224]!
    2c5c:	mov	x29, sp
    2c60:	stp	x21, x22, [sp, #32]
    2c64:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    2c68:	stp	x19, x20, [sp, #16]
    2c6c:	mov	x20, x0
    2c70:	ldr	w0, [x21, #392]
    2c74:	cmn	w0, #0x1
    2c78:	b.eq	2cac <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6e4>  // b.none
    2c7c:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    2c80:	add	x0, x1, #0x198
    2c84:	ldr	x0, [x0, #1072]
    2c88:	cbz	x0, 2cc4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6fc>
    2c8c:	mov	x0, x20
    2c90:	bl	2978 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3b0>
    2c94:	mov	x19, x0
    2c98:	mov	x0, x19
    2c9c:	ldp	x19, x20, [sp, #16]
    2ca0:	ldp	x21, x22, [sp, #32]
    2ca4:	ldp	x29, x30, [sp], #224
    2ca8:	ret
    2cac:	add	x19, x21, #0x188
    2cb0:	ldr	w0, [x19, #4]
    2cb4:	cmp	w0, #0x0
    2cb8:	b.lt	2d00 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x738>  // b.tstop
    2cbc:	b.eq	2dd4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x80c>  // b.none
    2cc0:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    2cc4:	add	x1, x1, #0x198
    2cc8:	add	x19, x1, #0x440
    2ccc:	mov	x0, x19
    2cd0:	bl	1c00 <pthread_mutex_lock@plt>
    2cd4:	mov	x0, x20
    2cd8:	bl	2978 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3b0>
    2cdc:	mov	x1, x0
    2ce0:	mov	x0, x19
    2ce4:	mov	x19, x1
    2ce8:	bl	1c20 <pthread_mutex_unlock@plt>
    2cec:	mov	x0, x19
    2cf0:	ldp	x19, x20, [sp, #16]
    2cf4:	ldp	x21, x22, [sp, #32]
    2cf8:	ldp	x29, x30, [sp], #224
    2cfc:	ret
    2d00:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    2d04:	add	x1, sp, #0x68
    2d08:	add	x0, x0, #0x178
    2d0c:	stp	xzr, xzr, [sp, #88]
    2d10:	bl	1a00 <statfs@plt>
    2d14:	tbnz	w0, #31, 2d2c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x764>
    2d18:	ldr	x1, [sp, #104]
    2d1c:	mov	w0, #0xff8c                	// #65420
    2d20:	movk	w0, #0xf97c, lsl #16
    2d24:	cmp	w1, w0
    2d28:	b.eq	2e58 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x890>  // b.none
    2d2c:	adrp	x1, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    2d30:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    2d34:	add	x1, x1, #0x168
    2d38:	add	x0, x0, #0x188
    2d3c:	bl	1a20 <fopen@plt>
    2d40:	mov	x22, x0
    2d44:	cbz	x0, 2e68 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x8a0>
    2d48:	stp	x23, x24, [sp, #48]
    2d4c:	adrp	x23, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    2d50:	add	x24, sp, #0x58
    2d54:	add	x23, x23, #0x198
    2d58:	str	x25, [sp, #64]
    2d5c:	add	x25, sp, #0x60
    2d60:	b	2d94 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x7cc>
    2d64:	mov	x0, x19
    2d68:	bl	1b70 <strchr@plt>
    2d6c:	mov	w1, #0x20                  	// #32
    2d70:	cbz	x0, 2db4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x7ec>
    2d74:	add	x0, x0, #0x1
    2d78:	bl	1b70 <strchr@plt>
    2d7c:	mov	x1, x23
    2d80:	cbz	x0, 2db4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x7ec>
    2d84:	add	x0, x0, #0x1
    2d88:	mov	x2, #0xa                   	// #10
    2d8c:	bl	1a40 <strncmp@plt>
    2d90:	cbz	w0, 2e30 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x868>
    2d94:	mov	x1, x25
    2d98:	mov	x3, x22
    2d9c:	mov	x0, x24
    2da0:	mov	w2, #0xa                   	// #10
    2da4:	bl	1c10 <__getdelim@plt>
    2da8:	mov	w1, #0x20                  	// #32
    2dac:	ldr	x19, [sp, #88]
    2db0:	tbz	x0, #63, 2d64 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x79c>
    2db4:	mov	x0, x19
    2db8:	bl	1b20 <free@plt>
    2dbc:	mov	x0, x22
    2dc0:	bl	1a10 <fclose@plt>
    2dc4:	add	x0, x21, #0x188
    2dc8:	ldp	x23, x24, [sp, #48]
    2dcc:	ldr	x25, [sp, #64]
    2dd0:	str	wzr, [x0, #4]
    2dd4:	mov	x1, x20
    2dd8:	mov	x5, #0x0                   	// #0
    2ddc:	mov	w4, #0xffffffff            	// #-1
    2de0:	mov	w3, #0x22                  	// #34
    2de4:	mov	w2, #0x7                   	// #7
    2de8:	mov	x0, #0x0                   	// #0
    2dec:	bl	1b10 <mmap@plt>
    2df0:	mov	x19, x0
    2df4:	cmn	x0, #0x1
    2df8:	b.ne	2c98 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6d0>  // b.any
    2dfc:	bl	1bd0 <__errno_location@plt>
    2e00:	ldr	w0, [x0]
    2e04:	cmp	w0, #0x1
    2e08:	ccmp	w0, #0xd, #0x4, ne  // ne = any
    2e0c:	b.ne	2c98 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6d0>  // b.any
    2e10:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    2e14:	add	x0, x1, #0x198
    2e18:	ldr	x0, [x0, #1072]
    2e1c:	cbz	x0, 2cc4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6fc>
    2e20:	ldr	w0, [x21, #392]
    2e24:	cmn	w0, #0x1
    2e28:	b.eq	2cc4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6fc>  // b.none
    2e2c:	b	2c8c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6c4>
    2e30:	mov	x0, x19
    2e34:	bl	1b20 <free@plt>
    2e38:	mov	x0, x22
    2e3c:	bl	1a10 <fclose@plt>
    2e40:	add	x0, x21, #0x188
    2e44:	mov	w1, #0x1                   	// #1
    2e48:	ldp	x23, x24, [sp, #48]
    2e4c:	ldr	x25, [sp, #64]
    2e50:	str	w1, [x0, #4]
    2e54:	b	2e10 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x848>
    2e58:	mov	w0, #0x1                   	// #1
    2e5c:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    2e60:	str	w0, [x19, #4]
    2e64:	b	2cc4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6fc>
    2e68:	add	x0, x21, #0x188
    2e6c:	str	wzr, [x0, #4]
    2e70:	b	2dd4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x80c>
    2e74:	nop

0000000000002e78 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0>:
    2e78:	stp	x29, x30, [sp, #-64]!
    2e7c:	mov	x29, sp
    2e80:	stp	x19, x20, [sp, #16]
    2e84:	cbz	x1, 30d0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x258>
    2e88:	mov	x20, x0
    2e8c:	adrp	x19, 17000 <memcpy@GLIBC_2.17>
    2e90:	add	x0, x19, #0x198
    2e94:	stp	x21, x22, [sp, #32]
    2e98:	mov	x22, x1
    2e9c:	ldr	x0, [x0, #960]
    2ea0:	cbz	x0, 30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x26c>
    2ea4:	add	x0, x19, #0x198
    2ea8:	ldr	w1, [x0, #864]
    2eac:	tbnz	w1, #1, 30c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x248>
    2eb0:	cmp	x20, #0xf0
    2eb4:	b.hi	30ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x274>  // b.pmore
    2eb8:	cmp	x20, #0x16
    2ebc:	b.hi	2f94 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11c>  // b.pmore
    2ec0:	ldr	w3, [x19, #408]
    2ec4:	mov	w1, #0x4                   	// #4
    2ec8:	add	x4, x19, #0x198
    2ecc:	mov	x20, #0x4                   	// #4
    2ed0:	mov	x21, #0x20                  	// #32
    2ed4:	lsr	w0, w3, w1
    2ed8:	tst	x0, #0x3
    2edc:	b.eq	2fb8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x140>  // b.none
    2ee0:	mvn	w0, w0
    2ee4:	and	x0, x0, #0x1
    2ee8:	add	x20, x0, x20
    2eec:	add	x0, x4, x20, lsl #4
    2ef0:	add	x0, x0, #0x40
    2ef4:	ldr	x1, [x0, #16]
    2ef8:	ldr	x2, [x1, #16]
    2efc:	cmp	x0, x2
    2f00:	b.eq	320c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x394>  // b.none
    2f04:	ldr	x3, [x4, #24]
    2f08:	cmp	x2, x3
    2f0c:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    2f10:	str	x2, [x0, #16]
    2f14:	str	x0, [x2, #24]
    2f18:	lsl	x0, x20, #3
    2f1c:	add	x20, x1, #0x10
    2f20:	add	x2, x1, x0
    2f24:	orr	x0, x0, #0x3
    2f28:	str	x0, [x1, #8]
    2f2c:	ldr	x0, [x2, #8]
    2f30:	orr	x0, x0, #0x1
    2f34:	str	x0, [x2, #8]
    2f38:	add	x0, x19, #0x198
    2f3c:	ldr	w1, [x0, #864]
    2f40:	tbnz	w1, #1, 30b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x23c>
    2f44:	add	x0, x19, #0x198
    2f48:	add	x0, x0, #0x398
    2f4c:	b	2f58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe0>
    2f50:	ldr	x0, [x0, #16]
    2f54:	cbz	x0, 43d8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1560>
    2f58:	ldr	x2, [x0]
    2f5c:	cmp	x2, x20
    2f60:	b.hi	2f50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd8>  // b.pmore
    2f64:	ldr	x3, [x0, #8]
    2f68:	add	x2, x2, x3
    2f6c:	cmp	x20, x2
    2f70:	b.cs	2f50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd8>  // b.hs, b.nlast
    2f74:	ldr	x0, [x0, #24]
    2f78:	add	x0, x20, x0
    2f7c:	str	x0, [x22]
    2f80:	mov	x0, x20
    2f84:	ldp	x19, x20, [sp, #16]
    2f88:	ldp	x21, x22, [sp, #32]
    2f8c:	ldp	x29, x30, [sp], #64
    2f90:	ret
    2f94:	add	x20, x20, #0xf
    2f98:	ldr	w3, [x19, #408]
    2f9c:	and	x21, x20, #0xfffffffffffffff8
    2fa0:	add	x4, x19, #0x198
    2fa4:	lsr	x20, x20, #3
    2fa8:	mov	w1, w20
    2fac:	lsr	w0, w3, w1
    2fb0:	tst	x0, #0x3
    2fb4:	b.ne	2ee0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x68>  // b.any
    2fb8:	ldr	x2, [x4, #8]
    2fbc:	cmp	x21, x2
    2fc0:	b.ls	31cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x354>  // b.plast
    2fc4:	cbz	w0, 3220 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3a8>
    2fc8:	mov	w6, #0x1                   	// #1
    2fcc:	lsl	w0, w0, w1
    2fd0:	lsl	w1, w6, w1
    2fd4:	neg	w5, w1, lsl #1
    2fd8:	orr	w1, w5, w1, lsl #1
    2fdc:	and	w0, w1, w0
    2fe0:	neg	w1, w0
    2fe4:	ands	w0, w1, w0
    2fe8:	rbit	w0, w0
    2fec:	clz	w0, w0
    2ff0:	csinv	w0, w0, wzr, ne  // ne = any
    2ff4:	add	x1, x4, w0, sxtw #4
    2ff8:	sxtw	x7, w0
    2ffc:	add	x1, x1, #0x40
    3000:	ldr	x20, [x1, #16]
    3004:	ldr	x5, [x20, #16]
    3008:	cmp	x1, x5
    300c:	b.eq	3a68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbf0>  // b.none
    3010:	ldr	x0, [x4, #24]
    3014:	cmp	x5, x0
    3018:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    301c:	str	x5, [x1, #16]
    3020:	str	x1, [x5, #24]
    3024:	lsl	x1, x7, #3
    3028:	sub	x0, x1, x21
    302c:	add	x3, x20, x1
    3030:	cmp	x0, #0x1f
    3034:	b.ls	3b1c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xca4>  // b.plast
    3038:	add	x4, x20, x21
    303c:	orr	x21, x21, #0x3
    3040:	str	x21, [x20, #8]
    3044:	orr	x1, x0, #0x1
    3048:	str	x1, [x4, #8]
    304c:	str	x0, [x20, x7, lsl #3]
    3050:	cbz	x2, 3098 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x220>
    3054:	lsr	x2, x2, #3
    3058:	add	x5, x19, #0x198
    305c:	ldr	w6, [x19, #408]
    3060:	mov	w3, #0x1                   	// #1
    3064:	add	x1, x5, x2, lsl #4
    3068:	lsl	w3, w3, w2
    306c:	add	x1, x1, #0x40
    3070:	tst	w6, w3
    3074:	ldr	x2, [x5, #32]
    3078:	b.eq	33ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x534>  // b.none
    307c:	ldr	x3, [x1, #16]
    3080:	ldr	x5, [x5, #24]
    3084:	cmp	x3, x5
    3088:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    308c:	str	x2, [x1, #16]
    3090:	str	x2, [x3, #24]
    3094:	stp	x3, x1, [x2, #16]
    3098:	add	x1, x19, #0x198
    309c:	add	x20, x20, #0x10
    30a0:	str	x0, [x1, #8]
    30a4:	str	x4, [x1, #32]
    30a8:	add	x0, x19, #0x198
    30ac:	ldr	w1, [x0, #864]
    30b0:	tbz	w1, #1, 2f44 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcc>
    30b4:	add	x0, x0, #0x368
    30b8:	bl	1c20 <pthread_mutex_unlock@plt>
    30bc:	b	2f44 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcc>
    30c0:	add	x0, x0, #0x368
    30c4:	bl	1c00 <pthread_mutex_lock@plt>
    30c8:	cbz	w0, 2eb0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x38>
    30cc:	ldp	x21, x22, [sp, #32]
    30d0:	mov	x20, #0x0                   	// #0
    30d4:	mov	x0, x20
    30d8:	ldp	x19, x20, [sp, #16]
    30dc:	ldp	x29, x30, [sp], #64
    30e0:	ret
    30e4:	bl	2750 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x188>
    30e8:	b	2ea4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c>
    30ec:	add	x3, x19, #0x198
    30f0:	cmn	x20, #0x81
    30f4:	ldr	x2, [x3, #8]
    30f8:	b.ls	3178 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x300>  // b.plast
    30fc:	cmn	x2, #0x1
    3100:	mov	x21, #0xffffffffffffffff    	// #-1
    3104:	b.eq	3464 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5ec>  // b.none
    3108:	add	x0, x19, #0x198
    310c:	ldr	x0, [x0, #960]
    3110:	cbz	x0, 3680 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x808>
    3114:	add	x0, x19, #0x198
    3118:	add	x20, x0, #0x3b8
    311c:	ldr	w2, [x0, #864]
    3120:	ldr	x0, [x0, #968]
    3124:	neg	x1, x0
    3128:	tbz	w2, #0, 3138 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c0>
    312c:	ldr	x2, [x20, #24]
    3130:	cmp	x2, x21
    3134:	b.ls	33bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x544>  // b.plast
    3138:	add	x20, x21, #0x49
    313c:	add	x20, x20, x0
    3140:	and	x20, x20, x1
    3144:	cmp	x20, x21
    3148:	b.hi	3688 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x810>  // b.pmore
    314c:	bl	1bd0 <__errno_location@plt>
    3150:	add	x19, x19, #0x198
    3154:	mov	w1, #0xc                   	// #12
    3158:	str	w1, [x0]
    315c:	ldr	w0, [x19, #864]
    3160:	tbz	w0, #1, 30cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x254>
    3164:	add	x0, x19, #0x368
    3168:	mov	x20, #0x0                   	// #0
    316c:	bl	1c20 <pthread_mutex_unlock@plt>
    3170:	ldp	x21, x22, [sp, #32]
    3174:	b	30d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x25c>
    3178:	ldr	w8, [x3, #4]
    317c:	add	x20, x20, #0xf
    3180:	and	x21, x20, #0xfffffffffffffff8
    3184:	cbnz	w8, 3490 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x618>
    3188:	cmp	x21, x2
    318c:	b.ls	31cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x354>  // b.plast
    3190:	add	x1, x19, #0x198
    3194:	ldr	x0, [x1, #16]
    3198:	cmp	x21, x0
    319c:	b.cs	3108 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x290>  // b.hs, b.nlast
    31a0:	ldr	x2, [x1, #40]
    31a4:	sub	x0, x0, x21
    31a8:	str	x0, [x1, #16]
    31ac:	orr	x0, x0, #0x1
    31b0:	add	x3, x2, x21
    31b4:	str	x3, [x1, #40]
    31b8:	orr	x21, x21, #0x3
    31bc:	add	x20, x2, #0x10
    31c0:	str	x0, [x3, #8]
    31c4:	str	x21, [x2, #8]
    31c8:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    31cc:	add	x1, x19, #0x198
    31d0:	sub	x0, x2, x21
    31d4:	cmp	x0, #0x1f
    31d8:	ldr	x20, [x1, #32]
    31dc:	add	x3, x20, x2
    31e0:	b.ls	3c3c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdc4>  // b.plast
    31e4:	add	x3, x20, x21
    31e8:	str	x0, [x1, #8]
    31ec:	str	x3, [x1, #32]
    31f0:	orr	x1, x0, #0x1
    31f4:	orr	x21, x21, #0x3
    31f8:	str	x1, [x3, #8]
    31fc:	str	x0, [x20, x2]
    3200:	add	x20, x20, #0x10
    3204:	stur	x21, [x20, #-8]
    3208:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    320c:	mov	w0, #0x1                   	// #1
    3210:	lsl	w0, w0, w20
    3214:	bic	w3, w3, w0
    3218:	str	w3, [x19, #408]
    321c:	b	2f18 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa0>
    3220:	ldr	w7, [x4, #4]
    3224:	cbz	w7, 3190 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>
    3228:	neg	w0, w7
    322c:	ands	w0, w0, w7
    3230:	rbit	w0, w0
    3234:	clz	w0, w0
    3238:	csinv	w0, w0, wzr, ne  // ne = any
    323c:	add	x4, x4, w0, sxtw #3
    3240:	ldr	x5, [x4, #592]
    3244:	mov	x10, x5
    3248:	ldr	x4, [x5, #8]
    324c:	and	x4, x4, #0xfffffffffffffffc
    3250:	sub	x4, x4, x21
    3254:	b	3278 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x400>
    3258:	ldr	x0, [x1, #8]
    325c:	mov	x5, x1
    3260:	and	x0, x0, #0xfffffffffffffffc
    3264:	sub	x0, x0, x21
    3268:	cmp	x0, x4
    326c:	csel	x6, x4, x0, cs  // cs = hs, nlast
    3270:	csel	x10, x10, x1, cs  // cs = hs, nlast
    3274:	mov	x4, x6
    3278:	ldr	x1, [x5, #32]
    327c:	cbnz	x1, 3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3e0>
    3280:	ldr	x1, [x5, #40]
    3284:	cbnz	x1, 3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3e0>
    3288:	add	x5, x19, #0x198
    328c:	ldr	x8, [x5, #24]
    3290:	cmp	x8, x10
    3294:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3298:	add	x11, x10, x21
    329c:	cmp	x11, x10
    32a0:	b.ls	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.plast
    32a4:	ldr	x1, [x10, #24]
    32a8:	ldr	x9, [x10, #48]
    32ac:	cmp	x1, x10
    32b0:	b.eq	3f0c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1094>  // b.none
    32b4:	ldr	x0, [x10, #16]
    32b8:	cmp	x8, x0
    32bc:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    32c0:	str	x1, [x0, #24]
    32c4:	str	x0, [x1, #16]
    32c8:	cbz	x9, 333c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c4>
    32cc:	ldr	x0, [x10, #56]
    32d0:	add	x5, x19, #0x198
    32d4:	add	x0, x0, #0x4a
    32d8:	ldr	x6, [x5, x0, lsl #3]
    32dc:	cmp	x6, x10
    32e0:	b.eq	3fcc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1154>  // b.none
    32e4:	cmp	x8, x9
    32e8:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    32ec:	ldr	x0, [x9, #32]
    32f0:	cmp	x0, x10
    32f4:	b.eq	3fd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x115c>  // b.none
    32f8:	str	x1, [x9, #40]
    32fc:	cbz	x1, 333c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c4>
    3300:	cmp	x8, x1
    3304:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3308:	ldr	x0, [x10, #32]
    330c:	str	x9, [x1, #48]
    3310:	cbz	x0, 3324 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4ac>
    3314:	cmp	x8, x0
    3318:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    331c:	str	x0, [x1, #32]
    3320:	str	x1, [x0, #48]
    3324:	ldr	x0, [x10, #40]
    3328:	cbz	x0, 333c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c4>
    332c:	cmp	x8, x0
    3330:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3334:	str	x0, [x1, #40]
    3338:	str	x1, [x0, #48]
    333c:	cmp	x4, #0x1f
    3340:	b.ls	3ee8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1070>  // b.plast
    3344:	orr	x20, x21, #0x3
    3348:	str	x20, [x10, #8]
    334c:	orr	x0, x4, #0x1
    3350:	str	x0, [x11, #8]
    3354:	str	x4, [x11, x4]
    3358:	cbz	x2, 3398 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x520>
    335c:	lsr	x2, x2, #3
    3360:	add	x5, x19, #0x198
    3364:	mov	w1, #0x1                   	// #1
    3368:	add	x0, x5, x2, lsl #4
    336c:	lsl	w2, w1, w2
    3370:	add	x0, x0, #0x40
    3374:	tst	w3, w2
    3378:	ldr	x1, [x5, #32]
    337c:	b.ne	3f88 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1110>  // b.any
    3380:	orr	w3, w3, w2
    3384:	mov	x2, x0
    3388:	str	w3, [x19, #408]
    338c:	str	x1, [x0, #16]
    3390:	str	x1, [x2, #24]
    3394:	stp	x2, x0, [x1, #16]
    3398:	add	x0, x19, #0x198
    339c:	add	x20, x10, #0x10
    33a0:	str	x4, [x0, #8]
    33a4:	str	x11, [x0, #32]
    33a8:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    33ac:	orr	w6, w6, w3
    33b0:	mov	x3, x1
    33b4:	str	w6, [x19, #408]
    33b8:	b	308c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x214>
    33bc:	str	x23, [sp, #48]
    33c0:	add	x23, x0, #0x37
    33c4:	add	x23, x23, x21
    33c8:	and	x23, x23, x1
    33cc:	cmp	x23, x21
    33d0:	b.ls	3ea0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>  // b.plast
    33d4:	mov	x0, x23
    33d8:	bl	2c58 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x690>
    33dc:	cmn	x0, #0x1
    33e0:	b.eq	3fdc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1164>  // b.none
    33e4:	tst	x0, #0x7
    33e8:	add	x20, x0, #0x10
    33ec:	b.eq	3fbc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1144>  // b.none
    33f0:	neg	x1, x20
    33f4:	and	x1, x1, #0x7
    33f8:	add	x2, x0, x1
    33fc:	sub	x3, x23, x1
    3400:	add	x20, x2, #0x10
    3404:	orr	x1, x1, #0x1
    3408:	sub	x4, x3, #0x20
    340c:	add	x5, x19, #0x198
    3410:	add	x6, x2, x4
    3414:	add	x3, x2, x3
    3418:	orr	x4, x4, #0x2
    341c:	stp	x1, x4, [x2]
    3420:	mov	x1, #0xb                   	// #11
    3424:	str	x1, [x6, #8]
    3428:	ldr	x1, [x5, #24]
    342c:	stur	xzr, [x3, #-16]
    3430:	cmp	x0, x1
    3434:	b.cs	343c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5c4>  // b.hs, b.nlast
    3438:	str	x0, [x5, #24]
    343c:	add	x0, x19, #0x198
    3440:	ldr	x2, [x0, #848]
    3444:	ldr	x1, [x0, #856]
    3448:	add	x23, x23, x2
    344c:	str	x23, [x0, #848]
    3450:	cmp	x23, x1
    3454:	b.ls	3fac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1134>  // b.plast
    3458:	str	x23, [x0, #856]
    345c:	ldr	x23, [sp, #48]
    3460:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    3464:	ldr	x20, [x3, #32]
    3468:	sub	x3, x20, #0x1
    346c:	add	x0, x19, #0x198
    3470:	add	x20, x20, #0x10
    3474:	str	xzr, [x0, #8]
    3478:	str	xzr, [x0, #32]
    347c:	stur	x2, [x20, #-8]
    3480:	ldr	x0, [x3, #8]
    3484:	orr	x0, x0, #0x1
    3488:	str	x0, [x3, #8]
    348c:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    3490:	mov	x0, #0xffff                	// #65535
    3494:	neg	x7, x21
    3498:	cmp	x0, x21, lsr #8
    349c:	lsr	x0, x21, #8
    34a0:	b.cs	3cdc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe64>  // b.hs, b.nlast
    34a4:	ldr	x1, [x3, #840]
    34a8:	mov	x4, x21
    34ac:	mov	x9, #0x1f                  	// #31
    34b0:	cbz	x1, 3188 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x310>
    34b4:	mov	x5, #0x0                   	// #0
    34b8:	mov	x20, #0x0                   	// #0
    34bc:	b	34c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x64c>
    34c0:	lsl	x4, x4, #1
    34c4:	ldr	x0, [x1, #8]
    34c8:	and	x0, x0, #0xfffffffffffffffc
    34cc:	sub	x6, x0, x21
    34d0:	cmp	x6, x7
    34d4:	b.cs	34e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x66c>  // b.hs, b.nlast
    34d8:	cbz	x6, 3d74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xefc>
    34dc:	mov	x7, x6
    34e0:	mov	x20, x1
    34e4:	lsr	x3, x4, #63
    34e8:	add	x3, x3, #0x4
    34ec:	ldr	x0, [x1, #40]
    34f0:	ldr	x1, [x1, x3, lsl #3]
    34f4:	cmp	x0, #0x0
    34f8:	ccmp	x0, x1, #0x4, ne  // ne = any
    34fc:	csel	x5, x5, x0, eq  // eq = none
    3500:	cbnz	x1, 34c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x648>
    3504:	orr	x0, x20, x5
    3508:	cbz	x0, 3bf4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd7c>
    350c:	cbz	x5, 403c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11c4>
    3510:	ldr	x0, [x5, #8]
    3514:	mov	x6, x7
    3518:	mov	x1, x5
    351c:	and	x0, x0, #0xfffffffffffffffc
    3520:	b	3530 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6b8>
    3524:	ldr	x0, [x3, #8]
    3528:	mov	x1, x3
    352c:	and	x0, x0, #0xfffffffffffffffc
    3530:	ldr	x3, [x1, #32]
    3534:	sub	x0, x0, x21
    3538:	cmp	x6, x0
    353c:	csel	x4, x6, x0, ls  // ls = plast
    3540:	csel	x20, x20, x1, ls  // ls = plast
    3544:	mov	x6, x4
    3548:	cbnz	x3, 3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6ac>
    354c:	ldr	x3, [x1, #40]
    3550:	cbnz	x3, 3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6ac>
    3554:	cbz	x20, 3188 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x310>
    3558:	sub	x0, x2, x21
    355c:	cmp	x0, x6
    3560:	b.ls	3188 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x310>  // b.plast
    3564:	add	x1, x19, #0x198
    3568:	ldr	x5, [x1, #24]
    356c:	cmp	x20, x5
    3570:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    3574:	add	x3, x20, x21
    3578:	cmp	x20, x3
    357c:	b.cs	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.hs, b.nlast
    3580:	ldr	x2, [x20, #24]
    3584:	ldr	x7, [x20, #48]
    3588:	cmp	x20, x2
    358c:	b.eq	3ea8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>  // b.none
    3590:	ldr	x0, [x20, #16]
    3594:	cmp	x5, x0
    3598:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    359c:	str	x2, [x0, #24]
    35a0:	str	x0, [x2, #16]
    35a4:	cbz	x7, 3618 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7a0>
    35a8:	ldr	x0, [x20, #56]
    35ac:	add	x1, x19, #0x198
    35b0:	add	x0, x0, #0x4a
    35b4:	ldr	x4, [x1, x0, lsl #3]
    35b8:	cmp	x20, x4
    35bc:	b.eq	3f48 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10d0>  // b.none
    35c0:	cmp	x5, x7
    35c4:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    35c8:	ldr	x0, [x7, #32]
    35cc:	cmp	x20, x0
    35d0:	b.eq	3fb4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x113c>  // b.none
    35d4:	str	x2, [x7, #40]
    35d8:	cbz	x2, 3618 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7a0>
    35dc:	cmp	x5, x2
    35e0:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    35e4:	ldr	x0, [x20, #32]
    35e8:	str	x7, [x2, #48]
    35ec:	cbz	x0, 3600 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x788>
    35f0:	cmp	x5, x0
    35f4:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    35f8:	str	x0, [x2, #32]
    35fc:	str	x2, [x0, #48]
    3600:	ldr	x0, [x20, #40]
    3604:	cbz	x0, 3618 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7a0>
    3608:	cmp	x5, x0
    360c:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3610:	str	x0, [x2, #40]
    3614:	str	x2, [x0, #48]
    3618:	cmp	x6, #0x1f
    361c:	b.ls	3e7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1004>  // b.plast
    3620:	orr	x21, x21, #0x3
    3624:	str	x21, [x20, #8]
    3628:	orr	x0, x6, #0x1
    362c:	str	x0, [x3, #8]
    3630:	str	x6, [x3, x6]
    3634:	cmp	x6, #0xff
    3638:	lsr	x4, x6, #3
    363c:	b.hi	3d7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf04>  // b.pmore
    3640:	ldr	w1, [x19, #408]
    3644:	add	x0, x19, #0x198
    3648:	add	x0, x0, x4, lsl #4
    364c:	mov	w2, #0x1                   	// #1
    3650:	lsl	w2, w2, w4
    3654:	add	x0, x0, #0x40
    3658:	tst	w1, w2
    365c:	b.ne	3f78 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1100>  // b.any
    3660:	orr	w2, w1, w2
    3664:	mov	x1, x0
    3668:	str	w2, [x19, #408]
    366c:	str	x3, [x0, #16]
    3670:	add	x20, x20, #0x10
    3674:	str	x3, [x1, #24]
    3678:	stp	x1, x0, [x3, #16]
    367c:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    3680:	bl	2750 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x188>
    3684:	b	3114 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x29c>
    3688:	mov	x0, x20
    368c:	bl	2c58 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x690>
    3690:	cmn	x0, #0x1
    3694:	b.eq	314c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2d4>  // b.none
    3698:	add	x2, x19, #0x198
    369c:	ldr	x1, [x2, #848]
    36a0:	ldr	x3, [x2, #856]
    36a4:	add	x1, x20, x1
    36a8:	str	x1, [x2, #848]
    36ac:	cmp	x1, x3
    36b0:	b.ls	36b8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x840>  // b.plast
    36b4:	str	x1, [x2, #856]
    36b8:	add	x1, x19, #0x198
    36bc:	ldr	x6, [x1, #40]
    36c0:	cbz	x6, 3a84 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0c>
    36c4:	add	x1, x1, #0x398
    36c8:	ldp	x3, x2, [x1]
    36cc:	add	x4, x3, x2
    36d0:	cmp	x0, x4
    36d4:	b.eq	39f0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb78>  // b.none
    36d8:	ldr	x1, [x1, #16]
    36dc:	cbnz	x1, 36c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x850>
    36e0:	add	x4, x0, x20
    36e4:	add	x1, x19, #0x198
    36e8:	ldr	x2, [x1, #24]
    36ec:	cmp	x0, x2
    36f0:	b.cs	36f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x880>  // b.hs, b.nlast
    36f4:	str	x0, [x1, #24]
    36f8:	add	x1, x19, #0x198
    36fc:	add	x1, x1, #0x398
    3700:	ldr	x2, [x1]
    3704:	cmp	x2, x4
    3708:	b.eq	38c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa4c>  // b.none
    370c:	ldr	x1, [x1, #16]
    3710:	cbnz	x1, 3700 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x888>
    3714:	add	x1, x19, #0x198
    3718:	add	x1, x1, #0x398
    371c:	b	3728 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8b0>
    3720:	ldr	x1, [x1, #16]
    3724:	cbz	x1, 43cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1554>
    3728:	ldr	x2, [x1]
    372c:	cmp	x2, x6
    3730:	b.hi	3720 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8a8>  // b.pmore
    3734:	ldr	x3, [x1, #8]
    3738:	add	x2, x2, x3
    373c:	cmp	x2, x6
    3740:	b.ls	3720 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8a8>  // b.plast
    3744:	sub	x1, x2, #0x3f
    3748:	mov	x5, #0xffffffffffffffb1    	// #-79
    374c:	neg	x7, x1
    3750:	add	x3, x6, #0x20
    3754:	and	x7, x7, #0x7
    3758:	tst	x1, #0x7
    375c:	add	x7, x7, x5
    3760:	sub	x4, x20, #0x48
    3764:	csel	x7, x7, x5, ne  // ne = any
    3768:	add	x1, x0, #0x10
    376c:	add	x7, x2, x7
    3770:	cmp	x7, x3
    3774:	csel	x7, x7, x6, cs  // cs = hs, nlast
    3778:	tst	x0, #0x7
    377c:	add	x10, x7, #0x10
    3780:	b.eq	3a78 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc00>  // b.none
    3784:	neg	x1, x1
    3788:	and	x1, x1, #0x7
    378c:	add	x5, x0, x1
    3790:	sub	x1, x4, x1
    3794:	add	x3, x19, #0x198
    3798:	add	x4, x0, x4
    379c:	add	x9, x3, #0x398
    37a0:	orr	x14, x1, #0x1
    37a4:	mov	x13, #0x48                  	// #72
    37a8:	mov	x12, #0x2b                  	// #43
    37ac:	str	x1, [x3, #16]
    37b0:	sub	x8, x20, #0x8
    37b4:	str	x5, [x3, #40]
    37b8:	add	x11, x0, x8
    37bc:	str	x14, [x5, #8]
    37c0:	str	x13, [x4, #8]
    37c4:	ldr	x1, [x3, #984]
    37c8:	str	x1, [x3, #48]
    37cc:	ldp	x4, x5, [x9]
    37d0:	stp	x4, x5, [x7, #16]
    37d4:	ldp	x4, x5, [x9, #16]
    37d8:	str	x12, [x7, #8]
    37dc:	stp	x4, x5, [x10, #16]
    37e0:	str	x20, [x3, #928]
    37e4:	str	x0, [x3, #920]
    37e8:	ldr	x1, [x0, x8]
    37ec:	str	x1, [x3, #944]
    37f0:	ldr	x4, [x11, x1]
    37f4:	cmp	x1, x4
    37f8:	b.ne	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.any
    37fc:	add	x1, x7, #0x30
    3800:	str	xzr, [x0, x8]
    3804:	mov	x0, #0xb                   	// #11
    3808:	str	x10, [x3, #936]
    380c:	nop
    3810:	str	x0, [x1], #8
    3814:	cmp	x2, x1
    3818:	b.hi	3810 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x998>  // b.pmore
    381c:	cmp	x7, x6
    3820:	b.eq	3be8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd70>  // b.none
    3824:	ldr	x0, [x7, #8]
    3828:	sub	x2, x7, x6
    382c:	orr	x1, x2, #0x1
    3830:	cmp	x2, #0xff
    3834:	and	x0, x0, #0xfffffffffffffffe
    3838:	str	x0, [x7, #8]
    383c:	str	x1, [x6, #8]
    3840:	lsr	x3, x2, #3
    3844:	str	x2, [x7]
    3848:	b.hi	3b38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcc0>  // b.pmore
    384c:	ldr	w2, [x19, #408]
    3850:	add	x4, x19, #0x198
    3854:	add	x0, x4, x3, lsl #4
    3858:	mov	w1, #0x1                   	// #1
    385c:	lsl	w1, w1, w3
    3860:	add	x0, x0, #0x40
    3864:	tst	w2, w1
    3868:	b.ne	3d5c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xee4>  // b.any
    386c:	orr	w1, w2, w1
    3870:	mov	x2, x0
    3874:	str	w1, [x19, #408]
    3878:	add	x1, x19, #0x198
    387c:	str	x6, [x0, #16]
    3880:	str	x6, [x2, #24]
    3884:	stp	x2, x0, [x6, #16]
    3888:	ldr	x1, [x1, #16]
    388c:	cmp	x1, x21
    3890:	b.ls	314c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2d4>  // b.plast
    3894:	add	x0, x19, #0x198
    3898:	sub	x1, x1, x21
    389c:	orr	x3, x21, #0x3
    38a0:	orr	x4, x1, #0x1
    38a4:	ldr	x2, [x0, #40]
    38a8:	str	x1, [x0, #16]
    38ac:	add	x21, x2, x21
    38b0:	str	x21, [x0, #40]
    38b4:	add	x20, x2, #0x10
    38b8:	str	x4, [x21, #8]
    38bc:	str	x3, [x2, #8]
    38c0:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    38c4:	ldur	x3, [x4, #-8]
    38c8:	ldr	x2, [x1, #24]
    38cc:	cmp	x3, x2
    38d0:	b.ne	3714 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x89c>  // b.any
    38d4:	neg	x3, x0
    38d8:	tst	x0, #0x7
    38dc:	ldr	x5, [x1, #8]
    38e0:	and	x3, x3, #0x7
    38e4:	add	x3, x0, x3
    38e8:	neg	x2, x4
    38ec:	add	x20, x5, x20
    38f0:	stp	x0, x20, [x1]
    38f4:	csel	x0, x3, x0, ne  // ne = any
    38f8:	and	x2, x2, #0x7
    38fc:	tst	x4, #0x7
    3900:	add	x2, x4, x2
    3904:	orr	x1, x21, #0x3
    3908:	csel	x4, x2, x4, ne  // ne = any
    390c:	str	x1, [x0, #8]
    3910:	sub	x3, x4, x0
    3914:	cmp	x4, x6
    3918:	sub	x3, x3, x21
    391c:	add	x20, x0, x21
    3920:	b.eq	40e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1270>  // b.none
    3924:	add	x5, x19, #0x198
    3928:	ldr	x1, [x5, #32]
    392c:	cmp	x1, x4
    3930:	b.eq	40c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x124c>  // b.none
    3934:	ldr	x1, [x4, #8]
    3938:	tbnz	w1, #1, 398c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb14>
    393c:	cmp	x1, #0xff
    3940:	and	x7, x1, #0xfffffffffffffffc
    3944:	lsr	x2, x1, #3
    3948:	ldr	x1, [x4, #24]
    394c:	b.hi	4264 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>  // b.pmore
    3950:	ldr	x6, [x4, #16]
    3954:	cmp	x6, x1
    3958:	b.eq	424c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13d4>  // b.none
    395c:	add	x2, x5, x2, lsl #4
    3960:	add	x2, x2, #0x40
    3964:	cmp	x6, x2
    3968:	b.ne	43b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x153c>  // b.any
    396c:	add	x2, x19, #0x198
    3970:	ldr	x2, [x2, #24]
    3974:	cmp	x2, x1
    3978:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    397c:	str	x1, [x6, #24]
    3980:	str	x6, [x1, #16]
    3984:	add	x4, x4, x7
    3988:	add	x3, x3, x7
    398c:	ldr	x2, [x4, #8]
    3990:	orr	x1, x3, #0x1
    3994:	cmp	x3, #0xff
    3998:	lsr	x5, x3, #3
    399c:	and	x2, x2, #0xfffffffffffffffe
    39a0:	str	x2, [x4, #8]
    39a4:	str	x1, [x20, #8]
    39a8:	str	x3, [x20, x3]
    39ac:	b.hi	410c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1294>  // b.pmore
    39b0:	ldr	w2, [x19, #408]
    39b4:	add	x4, x19, #0x198
    39b8:	add	x1, x4, x5, lsl #4
    39bc:	mov	w3, #0x1                   	// #1
    39c0:	lsl	w3, w3, w5
    39c4:	add	x1, x1, #0x40
    39c8:	tst	w2, w3
    39cc:	b.ne	41bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1344>  // b.any
    39d0:	orr	w3, w2, w3
    39d4:	mov	x2, x1
    39d8:	str	w3, [x19, #408]
    39dc:	str	x20, [x1, #16]
    39e0:	str	x20, [x2, #24]
    39e4:	stp	x2, x1, [x20, #16]
    39e8:	add	x20, x0, #0x10
    39ec:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    39f0:	add	x4, x0, x20
    39f4:	ldr	x5, [x1, #24]
    39f8:	ldur	x7, [x4, #-8]
    39fc:	cmp	x7, x5
    3a00:	b.ne	36e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x86c>  // b.any
    3a04:	cmp	x3, x6
    3a08:	b.hi	36e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x86c>  // b.pmore
    3a0c:	cmp	x0, x6
    3a10:	b.ls	36e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x86c>  // b.plast
    3a14:	add	x3, x19, #0x198
    3a18:	neg	x0, x6
    3a1c:	and	x0, x0, #0x7
    3a20:	ands	x4, x6, #0x7
    3a24:	csel	x4, x0, x4, ne  // ne = any
    3a28:	add	x2, x20, x2
    3a2c:	ldr	x0, [x3, #16]
    3a30:	add	x5, x6, x4
    3a34:	str	x2, [x1, #8]
    3a38:	mov	x2, #0x48                  	// #72
    3a3c:	add	x1, x20, x0
    3a40:	str	x5, [x3, #40]
    3a44:	add	x6, x6, x1
    3a48:	sub	x1, x1, x4
    3a4c:	str	x1, [x3, #16]
    3a50:	orr	x0, x1, #0x1
    3a54:	str	x0, [x5, #8]
    3a58:	str	x2, [x6, #8]
    3a5c:	ldr	x0, [x3, #984]
    3a60:	str	x0, [x3, #48]
    3a64:	b	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa14>
    3a68:	lsl	w0, w6, w0
    3a6c:	bic	w3, w3, w0
    3a70:	str	w3, [x19, #408]
    3a74:	b	3024 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1ac>
    3a78:	mov	x1, x4
    3a7c:	mov	x5, x0
    3a80:	b	3794 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x91c>
    3a84:	sub	x4, x20, #0x8
    3a88:	str	x20, [x1, #928]
    3a8c:	add	x3, x0, x4
    3a90:	str	x0, [x1, #24]
    3a94:	str	x0, [x1, #920]
    3a98:	ldr	x2, [x0, x4]
    3a9c:	str	x2, [x1, #944]
    3aa0:	ldr	x3, [x3, x2]
    3aa4:	cmp	x2, x3
    3aa8:	b.ne	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.any
    3aac:	add	x2, x1, #0x40
    3ab0:	add	x3, x1, #0x240
    3ab4:	str	xzr, [x0, x4]
    3ab8:	ldr	x4, [x1, #952]
    3abc:	str	x4, [x1, #56]
    3ac0:	stp	x2, x2, [x2, #16]
    3ac4:	add	x2, x2, #0x10
    3ac8:	cmp	x3, x2
    3acc:	b.ne	3ac0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc48>  // b.any
    3ad0:	sub	x20, x20, #0x48
    3ad4:	tst	x0, #0x7
    3ad8:	add	x1, x0, #0x10
    3adc:	b.eq	3c44 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdcc>  // b.none
    3ae0:	neg	x1, x1
    3ae4:	and	x1, x1, #0x7
    3ae8:	add	x3, x0, x1
    3aec:	sub	x1, x20, x1
    3af0:	add	x2, x19, #0x198
    3af4:	add	x20, x0, x20
    3af8:	orr	x0, x1, #0x1
    3afc:	mov	x4, #0x48                  	// #72
    3b00:	str	x1, [x2, #16]
    3b04:	str	x3, [x2, #40]
    3b08:	str	x0, [x3, #8]
    3b0c:	str	x4, [x20, #8]
    3b10:	ldr	x0, [x2, #984]
    3b14:	str	x0, [x2, #48]
    3b18:	b	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa14>
    3b1c:	orr	x1, x1, #0x3
    3b20:	str	x1, [x20, #8]
    3b24:	add	x20, x20, #0x10
    3b28:	ldr	x0, [x3, #8]
    3b2c:	orr	x0, x0, #0x1
    3b30:	str	x0, [x3, #8]
    3b34:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    3b38:	mov	x1, #0xffff                	// #65535
    3b3c:	lsr	x0, x2, #8
    3b40:	cmp	x1, x2, lsr #8
    3b44:	b.cc	3cc8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe50>  // b.lo, b.ul, b.last
    3b48:	sub	w1, w0, #0x100
    3b4c:	mov	w3, #0x1                   	// #1
    3b50:	lsr	w1, w1, #16
    3b54:	and	w1, w1, #0x8
    3b58:	lsl	w0, w0, w1
    3b5c:	sub	w4, w0, #0x1, lsl #12
    3b60:	lsr	w4, w4, #16
    3b64:	and	w4, w4, #0x4
    3b68:	orr	w1, w1, w4
    3b6c:	lsl	w0, w0, w4
    3b70:	sub	w4, w0, #0x4, lsl #12
    3b74:	lsr	w4, w4, #16
    3b78:	and	w4, w4, #0x2
    3b7c:	add	w1, w1, w4
    3b80:	lsl	w0, w0, w4
    3b84:	lsr	w0, w0, #15
    3b88:	sub	w0, w0, w1
    3b8c:	add	w1, w0, #0x15
    3b90:	add	w0, w0, #0xe
    3b94:	lsr	x1, x2, x1
    3b98:	lsl	w0, w0, #1
    3b9c:	and	x1, x1, #0x1
    3ba0:	add	x0, x1, x0
    3ba4:	add	x5, x0, #0x4a
    3ba8:	lsl	w4, w3, w0
    3bac:	lsl	x7, x5, #3
    3bb0:	add	x1, x19, #0x198
    3bb4:	stp	xzr, xzr, [x6, #32]
    3bb8:	str	x0, [x6, #56]
    3bbc:	ldr	w3, [x1, #4]
    3bc0:	tst	w3, w4
    3bc4:	b.ne	3c50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdd8>  // b.any
    3bc8:	str	x6, [x1, x5, lsl #3]
    3bcc:	add	x7, x1, x7
    3bd0:	orr	w3, w3, w4
    3bd4:	str	w3, [x1, #4]
    3bd8:	str	x7, [x6, #48]
    3bdc:	ldr	x1, [x1, #16]
    3be0:	stp	x6, x6, [x6, #16]
    3be4:	b	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa14>
    3be8:	add	x0, x19, #0x198
    3bec:	ldr	x1, [x0, #16]
    3bf0:	b	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa14>
    3bf4:	mov	w0, #0xfffffffe            	// #-2
    3bf8:	lsl	w0, w0, w9
    3bfc:	ands	w0, w0, w8
    3c00:	b.eq	3188 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x310>  // b.none
    3c04:	neg	w1, w0
    3c08:	add	x3, x19, #0x198
    3c0c:	ands	w0, w1, w0
    3c10:	rbit	w0, w0
    3c14:	clz	w0, w0
    3c18:	csinv	w0, w0, wzr, ne  // ne = any
    3c1c:	add	x0, x3, w0, sxtw #3
    3c20:	ldr	x1, [x0, #592]
    3c24:	cbz	x1, 3188 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x310>
    3c28:	ldr	x0, [x1, #8]
    3c2c:	mov	x6, x7
    3c30:	mov	x20, #0x0                   	// #0
    3c34:	and	x0, x0, #0xfffffffffffffffc
    3c38:	b	3530 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6b8>
    3c3c:	orr	x2, x2, #0x3
    3c40:	b	346c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5f4>
    3c44:	mov	x1, x20
    3c48:	mov	x3, x0
    3c4c:	b	3af0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc78>
    3c50:	lsr	x4, x0, #1
    3c54:	mov	w3, #0x39                  	// #57
    3c58:	sub	w3, w3, w4
    3c5c:	cmp	x0, #0x1f
    3c60:	ldr	x1, [x1, x5, lsl #3]
    3c64:	lsl	x3, x2, x3
    3c68:	csel	x3, x3, x2, ne  // ne = any
    3c6c:	b	3c88 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    3c70:	lsr	x0, x3, #63
    3c74:	lsl	x3, x3, #1
    3c78:	add	x0, x0, #0x4
    3c7c:	ldr	x4, [x1, x0, lsl #3]
    3c80:	cbz	x4, 3f50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10d8>
    3c84:	mov	x1, x4
    3c88:	ldr	x0, [x1, #8]
    3c8c:	and	x0, x0, #0xfffffffffffffffc
    3c90:	cmp	x2, x0
    3c94:	b.ne	3c70 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdf8>  // b.any
    3c98:	add	x2, x19, #0x198
    3c9c:	ldr	x0, [x1, #16]
    3ca0:	ldr	x3, [x2, #24]
    3ca4:	cmp	x1, x3
    3ca8:	ccmp	x0, x3, #0x0, cs  // cs = hs, nlast
    3cac:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    3cb0:	str	x6, [x0, #24]
    3cb4:	str	x6, [x1, #16]
    3cb8:	stp	x0, x1, [x6, #16]
    3cbc:	str	xzr, [x6, #48]
    3cc0:	ldr	x1, [x2, #16]
    3cc4:	b	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa14>
    3cc8:	mov	w4, #0x80000000            	// #-2147483648
    3ccc:	mov	x7, #0x348                 	// #840
    3cd0:	mov	x0, #0x1f                  	// #31
    3cd4:	mov	x5, #0x69                  	// #105
    3cd8:	b	3bb0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd38>
    3cdc:	sub	w1, w0, #0x100
    3ce0:	lsr	w1, w1, #16
    3ce4:	and	w1, w1, #0x8
    3ce8:	lsl	w0, w0, w1
    3cec:	sub	w4, w0, #0x1, lsl #12
    3cf0:	lsr	w4, w4, #16
    3cf4:	and	w4, w4, #0x4
    3cf8:	orr	w1, w1, w4
    3cfc:	lsl	w0, w0, w4
    3d00:	sub	w4, w0, #0x4, lsl #12
    3d04:	lsr	w4, w4, #16
    3d08:	and	w4, w4, #0x2
    3d0c:	add	w1, w1, w4
    3d10:	lsl	w0, w0, w4
    3d14:	lsr	w0, w0, #15
    3d18:	sub	w0, w0, w1
    3d1c:	add	w9, w0, #0x15
    3d20:	add	w0, w0, #0xe
    3d24:	lsr	x9, x21, x9
    3d28:	lsl	w0, w0, #1
    3d2c:	and	x9, x9, #0x1
    3d30:	add	x9, x9, x0
    3d34:	add	x0, x9, #0x4a
    3d38:	ldr	x1, [x3, x0, lsl #3]
    3d3c:	cbz	x1, 3bf4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd7c>
    3d40:	lsr	x0, x9, #1
    3d44:	mov	w4, #0x39                  	// #57
    3d48:	sub	w4, w4, w0
    3d4c:	cmp	x9, #0x1f
    3d50:	lsl	x4, x21, x4
    3d54:	csel	x4, x4, x21, ne  // ne = any
    3d58:	b	34b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x63c>
    3d5c:	ldr	x2, [x0, #16]
    3d60:	ldr	x1, [x4, #24]
    3d64:	cmp	x2, x1
    3d68:	b.cs	3878 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa00>  // b.hs, b.nlast
    3d6c:	str	x23, [sp, #48]
    3d70:	bl	1ae0 <abort@plt>
    3d74:	mov	x20, x1
    3d78:	b	3530 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6b8>
    3d7c:	mov	x1, #0xffff                	// #65535
    3d80:	lsr	x0, x6, #8
    3d84:	cmp	x1, x6, lsr #8
    3d88:	b.cc	3f98 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1120>  // b.lo, b.ul, b.last
    3d8c:	sub	w1, w0, #0x100
    3d90:	mov	w4, #0x1                   	// #1
    3d94:	lsr	w1, w1, #16
    3d98:	and	w1, w1, #0x8
    3d9c:	lsl	w0, w0, w1
    3da0:	sub	w2, w0, #0x1, lsl #12
    3da4:	lsr	w2, w2, #16
    3da8:	and	w2, w2, #0x4
    3dac:	orr	w1, w1, w2
    3db0:	lsl	w0, w0, w2
    3db4:	sub	w2, w0, #0x4, lsl #12
    3db8:	lsr	w2, w2, #16
    3dbc:	and	w2, w2, #0x2
    3dc0:	add	w1, w1, w2
    3dc4:	lsl	w0, w0, w2
    3dc8:	lsr	w0, w0, #15
    3dcc:	sub	w0, w0, w1
    3dd0:	add	w1, w0, #0x15
    3dd4:	add	w0, w0, #0xe
    3dd8:	lsr	x1, x6, x1
    3ddc:	lsl	w0, w0, #1
    3de0:	and	x1, x1, #0x1
    3de4:	add	x0, x1, x0
    3de8:	add	x7, x0, #0x4a
    3dec:	lsl	w2, w4, w0
    3df0:	lsl	x4, x7, #3
    3df4:	add	x1, x19, #0x198
    3df8:	stp	xzr, xzr, [x3, #32]
    3dfc:	str	x0, [x3, #56]
    3e00:	ldr	w8, [x1, #4]
    3e04:	tst	w8, w2
    3e08:	b.eq	400c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1194>  // b.none
    3e0c:	lsr	x4, x0, #1
    3e10:	mov	w2, #0x39                  	// #57
    3e14:	sub	w2, w2, w4
    3e18:	cmp	x0, #0x1f
    3e1c:	ldr	x1, [x1, x7, lsl #3]
    3e20:	lsl	x2, x6, x2
    3e24:	csel	x2, x2, x6, ne  // ne = any
    3e28:	b	3e44 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfcc>
    3e2c:	lsr	x0, x2, #63
    3e30:	lsl	x2, x2, #1
    3e34:	add	x0, x0, #0x4
    3e38:	ldr	x4, [x1, x0, lsl #3]
    3e3c:	cbz	x4, 3fec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1174>
    3e40:	mov	x1, x4
    3e44:	ldr	x0, [x1, #8]
    3e48:	and	x0, x0, #0xfffffffffffffffc
    3e4c:	cmp	x0, x6
    3e50:	b.ne	3e2c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfb4>  // b.any
    3e54:	ldr	x0, [x1, #16]
    3e58:	cmp	x5, x0
    3e5c:	ccmp	x5, x1, #0x2, ls  // ls = plast
    3e60:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3e64:	str	x3, [x0, #24]
    3e68:	add	x20, x20, #0x10
    3e6c:	str	x3, [x1, #16]
    3e70:	stp	x0, x1, [x3, #16]
    3e74:	str	xzr, [x3, #48]
    3e78:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    3e7c:	add	x6, x21, x6
    3e80:	add	x1, x20, x6
    3e84:	orr	x6, x6, #0x3
    3e88:	add	x20, x20, #0x10
    3e8c:	ldr	x0, [x1, #8]
    3e90:	stur	x6, [x20, #-8]
    3e94:	orr	x0, x0, #0x1
    3e98:	str	x0, [x1, #8]
    3e9c:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    3ea0:	ldr	x23, [sp, #48]
    3ea4:	b	3138 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c0>
    3ea8:	ldr	x0, [x20, #40]
    3eac:	cbz	x0, 402c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11b4>
    3eb0:	add	x1, x20, #0x28
    3eb4:	nop
    3eb8:	mov	x4, x1
    3ebc:	mov	x2, x0
    3ec0:	add	x1, x0, #0x28
    3ec4:	ldr	x0, [x0, #40]
    3ec8:	cbnz	x0, 3eb8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1040>
    3ecc:	ldr	x0, [x2, #32]
    3ed0:	add	x1, x2, #0x20
    3ed4:	cbnz	x0, 3eb8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1040>
    3ed8:	cmp	x5, x4
    3edc:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3ee0:	str	xzr, [x4]
    3ee4:	b	35a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x72c>
    3ee8:	add	x4, x21, x4
    3eec:	add	x20, x10, #0x10
    3ef0:	add	x1, x10, x4
    3ef4:	orr	x4, x4, #0x3
    3ef8:	ldr	x0, [x1, #8]
    3efc:	str	x4, [x10, #8]
    3f00:	orr	x0, x0, #0x1
    3f04:	str	x0, [x1, #8]
    3f08:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    3f0c:	ldr	x0, [x10, #40]
    3f10:	cbz	x0, 4044 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11cc>
    3f14:	add	x5, x10, #0x28
    3f18:	mov	x6, x5
    3f1c:	mov	x1, x0
    3f20:	add	x5, x0, #0x28
    3f24:	ldr	x0, [x0, #40]
    3f28:	cbnz	x0, 3f18 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10a0>
    3f2c:	ldr	x0, [x1, #32]
    3f30:	add	x5, x1, #0x20
    3f34:	cbnz	x0, 3f18 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10a0>
    3f38:	cmp	x8, x6
    3f3c:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3f40:	str	xzr, [x6]
    3f44:	b	32c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x450>
    3f48:	str	x2, [x1, x0, lsl #3]
    3f4c:	b	35dc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x764>
    3f50:	add	x3, x19, #0x198
    3f54:	add	x2, x1, x0, lsl #3
    3f58:	ldr	x4, [x3, #24]
    3f5c:	cmp	x4, x2
    3f60:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3f64:	str	x6, [x1, x0, lsl #3]
    3f68:	stp	x6, x6, [x6, #16]
    3f6c:	str	x1, [x6, #48]
    3f70:	ldr	x1, [x3, #16]
    3f74:	b	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa14>
    3f78:	ldr	x1, [x0, #16]
    3f7c:	cmp	x5, x1
    3f80:	b.ls	366c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7f4>  // b.plast
    3f84:	b	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>
    3f88:	ldr	x2, [x0, #16]
    3f8c:	cmp	x8, x2
    3f90:	b.ls	338c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x514>  // b.plast
    3f94:	b	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>
    3f98:	mov	x4, #0x348                 	// #840
    3f9c:	mov	w2, #0x80000000            	// #-2147483648
    3fa0:	mov	x0, #0x1f                  	// #31
    3fa4:	mov	x7, #0x69                  	// #105
    3fa8:	b	3df4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf7c>
    3fac:	ldr	x23, [sp, #48]
    3fb0:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    3fb4:	str	x2, [x7, #32]
    3fb8:	b	35d8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x760>
    3fbc:	mov	x2, x0
    3fc0:	mov	x3, x23
    3fc4:	mov	x1, #0x1                   	// #1
    3fc8:	b	3408 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x590>
    3fcc:	str	x1, [x5, x0, lsl #3]
    3fd0:	b	3300 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x488>
    3fd4:	str	x1, [x9, #32]
    3fd8:	b	32fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x484>
    3fdc:	ldr	x0, [x20, #16]
    3fe0:	ldr	x23, [sp, #48]
    3fe4:	neg	x1, x0
    3fe8:	b	3138 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c0>
    3fec:	add	x2, x1, x0, lsl #3
    3ff0:	cmp	x5, x2
    3ff4:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    3ff8:	str	x3, [x1, x0, lsl #3]
    3ffc:	add	x20, x20, #0x10
    4000:	stp	x3, x3, [x3, #16]
    4004:	str	x1, [x3, #48]
    4008:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    400c:	str	x3, [x1, x7, lsl #3]
    4010:	orr	w2, w8, w2
    4014:	add	x4, x1, x4
    4018:	add	x20, x20, #0x10
    401c:	str	w2, [x1, #4]
    4020:	stp	x3, x3, [x3, #16]
    4024:	str	x4, [x3, #48]
    4028:	b	30a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x230>
    402c:	ldr	x0, [x20, #32]
    4030:	cbz	x0, 4054 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11dc>
    4034:	add	x1, x20, #0x20
    4038:	b	3eb8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1040>
    403c:	mov	x6, x7
    4040:	b	3554 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6dc>
    4044:	ldr	x0, [x10, #32]
    4048:	cbz	x0, 408c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    404c:	add	x5, x10, #0x20
    4050:	b	3f18 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10a0>
    4054:	cbz	x7, 3618 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7a0>
    4058:	ldr	x2, [x20, #56]
    405c:	add	x4, x2, #0x4a
    4060:	ldr	x0, [x1, x4, lsl #3]
    4064:	cmp	x0, x20
    4068:	b.eq	4074 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11fc>  // b.none
    406c:	mov	x2, #0x0                   	// #0
    4070:	b	35c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x748>
    4074:	mov	w0, #0x1                   	// #1
    4078:	str	xzr, [x1, x4, lsl #3]
    407c:	lsl	w0, w0, w2
    4080:	bic	w8, w8, w0
    4084:	str	w8, [x1, #4]
    4088:	b	3618 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7a0>
    408c:	cbz	x9, 333c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c4>
    4090:	ldr	x1, [x10, #56]
    4094:	add	x6, x1, #0x4a
    4098:	ldr	x0, [x5, x6, lsl #3]
    409c:	cmp	x10, x0
    40a0:	b.eq	40ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1234>  // b.none
    40a4:	mov	x1, #0x0                   	// #0
    40a8:	b	32e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x46c>
    40ac:	mov	w0, #0x1                   	// #1
    40b0:	str	xzr, [x5, x6, lsl #3]
    40b4:	lsl	w0, w0, w1
    40b8:	bic	w7, w7, w0
    40bc:	str	w7, [x5, #4]
    40c0:	b	333c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c4>
    40c4:	ldr	x1, [x5, #8]
    40c8:	str	x20, [x5, #32]
    40cc:	add	x3, x3, x1
    40d0:	str	x3, [x5, #8]
    40d4:	orr	x1, x3, #0x1
    40d8:	str	x1, [x20, #8]
    40dc:	str	x3, [x20, x3]
    40e0:	add	x20, x0, #0x10
    40e4:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    40e8:	add	x2, x19, #0x198
    40ec:	ldr	x1, [x2, #16]
    40f0:	str	x20, [x2, #40]
    40f4:	add	x3, x3, x1
    40f8:	str	x3, [x2, #16]
    40fc:	orr	x3, x3, #0x1
    4100:	str	x3, [x20, #8]
    4104:	add	x20, x0, #0x10
    4108:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    410c:	lsr	x1, x3, #8
    4110:	mov	x5, #0xffff                	// #65535
    4114:	sub	w2, w1, #0x100
    4118:	cmp	x1, x5
    411c:	add	x4, x19, #0x198
    4120:	mov	x7, #0x1f                  	// #31
    4124:	lsr	w2, w2, #16
    4128:	stp	xzr, xzr, [x20, #32]
    412c:	and	w2, w2, #0x8
    4130:	ldr	w6, [x4, #4]
    4134:	mov	w8, #0x1                   	// #1
    4138:	lsl	w1, w1, w2
    413c:	sub	w5, w1, #0x1, lsl #12
    4140:	lsr	w5, w5, #16
    4144:	and	w5, w5, #0x4
    4148:	orr	w2, w2, w5
    414c:	lsl	w1, w1, w5
    4150:	sub	w5, w1, #0x4, lsl #12
    4154:	lsr	w5, w5, #16
    4158:	and	w5, w5, #0x2
    415c:	add	w2, w2, w5
    4160:	lsl	w1, w1, w5
    4164:	lsr	w1, w1, #15
    4168:	sub	w1, w1, w2
    416c:	add	w2, w1, #0x15
    4170:	add	w1, w1, #0xe
    4174:	lsr	x2, x3, x2
    4178:	lsl	w1, w1, #1
    417c:	and	x2, x2, #0x1
    4180:	add	x1, x2, x1
    4184:	csel	x1, x1, x7, ls  // ls = plast
    4188:	str	x1, [x20, #56]
    418c:	lsl	w8, w8, w1
    4190:	tst	w6, w8
    4194:	b.ne	41d0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1358>  // b.any
    4198:	add	x1, x1, #0x4a
    419c:	orr	w6, w6, w8
    41a0:	str	w6, [x4, #4]
    41a4:	add	x2, x4, x1, lsl #3
    41a8:	str	x20, [x4, x1, lsl #3]
    41ac:	stp	x20, x20, [x20, #16]
    41b0:	str	x2, [x20, #48]
    41b4:	add	x20, x0, #0x10
    41b8:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    41bc:	ldr	x2, [x1, #16]
    41c0:	ldr	x3, [x4, #24]
    41c4:	cmp	x2, x3
    41c8:	b.cs	39dc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb64>  // b.hs, b.nlast
    41cc:	b	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>
    41d0:	lsr	x5, x1, #1
    41d4:	cmp	x1, #0x1f
    41d8:	mov	w2, #0x39                  	// #57
    41dc:	add	x1, x1, #0x4a
    41e0:	sub	w2, w2, w5
    41e4:	csel	w2, w2, wzr, ne  // ne = any
    41e8:	ldr	x1, [x4, x1, lsl #3]
    41ec:	lsl	x2, x3, x2
    41f0:	b	420c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1394>
    41f4:	lsr	x4, x2, #63
    41f8:	lsl	x2, x2, #1
    41fc:	add	x4, x4, #0x4
    4200:	ldr	x5, [x1, x4, lsl #3]
    4204:	cbz	x5, 430c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1494>
    4208:	mov	x1, x5
    420c:	ldr	x4, [x1, #8]
    4210:	and	x4, x4, #0xfffffffffffffffc
    4214:	cmp	x3, x4
    4218:	b.ne	41f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x137c>  // b.any
    421c:	add	x3, x19, #0x198
    4220:	ldr	x2, [x1, #16]
    4224:	ldr	x3, [x3, #24]
    4228:	cmp	x2, x3
    422c:	ccmp	x1, x3, #0x0, cs  // cs = hs, nlast
    4230:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    4234:	str	x20, [x2, #24]
    4238:	str	x20, [x1, #16]
    423c:	stp	x2, x1, [x20, #16]
    4240:	str	xzr, [x20, #48]
    4244:	add	x20, x0, #0x10
    4248:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    424c:	ldr	w5, [x19, #408]
    4250:	mov	w1, #0x1                   	// #1
    4254:	lsl	w1, w1, w2
    4258:	bic	w1, w5, w1
    425c:	str	w1, [x19, #408]
    4260:	b	3984 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>
    4264:	cmp	x1, x4
    4268:	ldr	x6, [x4, #48]
    426c:	b.eq	4334 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14bc>  // b.none
    4270:	ldr	x2, [x4, #16]
    4274:	ldr	x5, [x5, #24]
    4278:	cmp	x2, x5
    427c:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    4280:	str	x1, [x2, #24]
    4284:	str	x2, [x1, #16]
    4288:	cbz	x6, 3984 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>
    428c:	ldr	x5, [x4, #56]
    4290:	add	x2, x19, #0x198
    4294:	add	x8, x5, #0x4a
    4298:	ldr	x9, [x2, x8, lsl #3]
    429c:	cmp	x9, x4
    42a0:	b.eq	4394 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x151c>  // b.none
    42a4:	ldr	x2, [x2, #24]
    42a8:	cmp	x6, x2
    42ac:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    42b0:	ldr	x2, [x6, #32]
    42b4:	cmp	x2, x4
    42b8:	b.eq	438c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1514>  // b.none
    42bc:	str	x1, [x6, #40]
    42c0:	cbz	x1, 3984 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>
    42c4:	add	x2, x19, #0x198
    42c8:	ldr	x5, [x2, #24]
    42cc:	cmp	x1, x5
    42d0:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    42d4:	ldr	x2, [x4, #32]
    42d8:	str	x6, [x1, #48]
    42dc:	cbz	x2, 42f0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1478>
    42e0:	cmp	x5, x2
    42e4:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    42e8:	str	x2, [x1, #32]
    42ec:	str	x1, [x2, #48]
    42f0:	ldr	x2, [x4, #40]
    42f4:	cbz	x2, 3984 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>
    42f8:	cmp	x5, x2
    42fc:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    4300:	str	x2, [x1, #40]
    4304:	str	x1, [x2, #48]
    4308:	b	3984 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>
    430c:	add	x3, x19, #0x198
    4310:	add	x2, x1, x4, lsl #3
    4314:	ldr	x3, [x3, #24]
    4318:	cmp	x3, x2
    431c:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    4320:	str	x20, [x1, x4, lsl #3]
    4324:	stp	x20, x20, [x20, #16]
    4328:	str	x1, [x20, #48]
    432c:	add	x20, x0, #0x10
    4330:	b	2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc0>
    4334:	ldr	x1, [x1, #40]
    4338:	cbz	x1, 437c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1504>
    433c:	add	x5, x4, #0x28
    4340:	mov	x2, x1
    4344:	mov	x8, x5
    4348:	mov	x1, x2
    434c:	add	x5, x2, #0x28
    4350:	ldr	x2, [x2, #40]
    4354:	cbnz	x2, 4344 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14cc>
    4358:	ldr	x2, [x1, #32]
    435c:	add	x5, x1, #0x20
    4360:	cbnz	x2, 4344 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14cc>
    4364:	add	x2, x19, #0x198
    4368:	ldr	x2, [x2, #24]
    436c:	cmp	x2, x8
    4370:	b.hi	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.pmore
    4374:	str	xzr, [x8]
    4378:	b	4288 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1410>
    437c:	ldr	x1, [x4, #32]
    4380:	cbz	x1, 4288 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1410>
    4384:	add	x5, x4, #0x20
    4388:	b	4340 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14c8>
    438c:	str	x1, [x6, #32]
    4390:	b	42c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1448>
    4394:	str	x1, [x2, x8, lsl #3]
    4398:	cbnz	x1, 42c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x144c>
    439c:	ldr	w6, [x2, #4]
    43a0:	mov	w1, #0x1                   	// #1
    43a4:	lsl	w1, w1, w5
    43a8:	bic	w1, w6, w1
    43ac:	str	w1, [x2, #4]
    43b0:	b	3984 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>
    43b4:	ldr	x5, [x5, #24]
    43b8:	cmp	x6, x5
    43bc:	b.cc	3d6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xef4>  // b.lo, b.ul, b.last
    43c0:	cmp	x2, x1
    43c4:	b.eq	397c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb04>  // b.none
    43c8:	b	396c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xaf4>
    43cc:	ldr	x0, [x1]
    43d0:	str	x23, [sp, #48]
    43d4:	brk	#0x3e8
    43d8:	ldr	x0, [x0, #24]
    43dc:	str	x23, [sp, #48]
    43e0:	brk	#0x3e8
    43e4:	nop
    43e8:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    43ec:	add	x1, x1, #0x198
    43f0:	add	x1, x1, #0x398
    43f4:	nop
    43f8:	ldr	x2, [x1]
    43fc:	cmp	x0, x2
    4400:	b.cc	4414 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x159c>  // b.lo, b.ul, b.last
    4404:	ldr	x3, [x1, #8]
    4408:	add	x2, x2, x3
    440c:	cmp	x0, x2
    4410:	b.cc	4420 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15a8>  // b.lo, b.ul, b.last
    4414:	ldr	x1, [x1, #16]
    4418:	cbnz	x1, 43f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1580>
    441c:	ret
    4420:	ldr	x1, [x1, #24]
    4424:	add	x0, x0, x1
    4428:	ret
    442c:	nop

0000000000004430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0>:
    4430:	cbz	x0, 46d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2a4>
    4434:	stp	x29, x30, [sp, #-96]!
    4438:	mov	x29, sp
    443c:	stp	x19, x20, [sp, #16]
    4440:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    4444:	stp	x21, x22, [sp, #32]
    4448:	mov	x21, x0
    444c:	add	x0, x20, #0x198
    4450:	sub	x19, x21, #0x10
    4454:	ldr	x0, [x0, #960]
    4458:	cbz	x0, 46c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x290>
    445c:	add	x0, x20, #0x198
    4460:	ldr	w1, [x0, #864]
    4464:	tbnz	w1, #1, 46a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x274>
    4468:	add	x22, x20, #0x198
    446c:	ldr	x5, [x22, #24]
    4470:	cmp	x19, x5
    4474:	b.cc	4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8c>  // b.lo, b.ul, b.last
    4478:	ldur	x0, [x21, #-8]
    447c:	tbz	w0, #1, 4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8c>
    4480:	and	x1, x0, #0xfffffffffffffffc
    4484:	add	x2, x19, x1
    4488:	tbnz	w0, #0, 44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    448c:	ldur	x0, [x21, #-16]
    4490:	tbnz	w0, #0, 48f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4c4>
    4494:	sub	x19, x19, x0
    4498:	add	x1, x1, x0
    449c:	cmp	x5, x19
    44a0:	b.hi	4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8c>  // b.pmore
    44a4:	ldr	x3, [x22, #32]
    44a8:	cmp	x19, x3
    44ac:	b.eq	4730 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x300>  // b.none
    44b0:	cmp	x0, #0xff
    44b4:	lsr	x0, x0, #3
    44b8:	ldr	x3, [x19, #24]
    44bc:	b.hi	4824 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3f4>  // b.pmore
    44c0:	ldr	x4, [x19, #16]
    44c4:	cmp	x4, x3
    44c8:	b.eq	49e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5b0>  // b.none
    44cc:	add	x0, x22, x0, lsl #4
    44d0:	add	x0, x0, #0x40
    44d4:	cmp	x4, x0
    44d8:	b.ne	4d30 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x900>  // b.any
    44dc:	cmp	x5, x3
    44e0:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    44e4:	nop
    44e8:	str	x3, [x4, #24]
    44ec:	str	x4, [x3, #16]
    44f0:	cmp	x2, x19
    44f4:	b.ls	4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8c>  // b.plast
    44f8:	ldr	x0, [x2, #8]
    44fc:	tbz	w0, #0, 4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8c>
    4500:	and	x21, x0, #0x2
    4504:	tbnz	w0, #1, 4588 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x158>
    4508:	add	x4, x20, #0x198
    450c:	ldp	x7, x3, [x4, #32]
    4510:	cmp	x2, x3
    4514:	b.eq	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x520>  // b.none
    4518:	cmp	x2, x7
    451c:	b.eq	4920 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4f0>  // b.none
    4520:	and	x0, x0, #0xfffffffffffffffc
    4524:	add	x1, x1, x0
    4528:	cmp	x0, #0xff
    452c:	lsr	x0, x0, #3
    4530:	ldr	x3, [x2, #24]
    4534:	b.hi	478c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x35c>  // b.pmore
    4538:	ldr	x2, [x2, #16]
    453c:	cmp	x2, x3
    4540:	b.eq	498c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x55c>  // b.none
    4544:	add	x0, x4, x0, lsl #4
    4548:	add	x0, x0, #0x40
    454c:	cmp	x2, x0
    4550:	b.ne	4d1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8ec>  // b.any
    4554:	cmp	x5, x3
    4558:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    455c:	nop
    4560:	str	x3, [x2, #24]
    4564:	str	x2, [x3, #16]
    4568:	orr	x0, x1, #0x1
    456c:	str	x0, [x19, #8]
    4570:	str	x1, [x19, x1]
    4574:	cmp	x19, x7
    4578:	b.ne	459c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x16c>  // b.any
    457c:	add	x0, x20, #0x198
    4580:	str	x1, [x0, #8]
    4584:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4588:	and	x0, x0, #0xfffffffffffffffe
    458c:	str	x0, [x2, #8]
    4590:	orr	x0, x1, #0x1
    4594:	str	x0, [x19, #8]
    4598:	str	x1, [x19, x1]
    459c:	cmp	x1, #0xff
    45a0:	lsr	x2, x1, #3
    45a4:	b.ls	46d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2a8>  // b.plast
    45a8:	mov	x2, #0xffff                	// #65535
    45ac:	lsr	x0, x1, #8
    45b0:	cmp	x2, x1, lsr #8
    45b4:	b.cc	4778 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x348>  // b.lo, b.ul, b.last
    45b8:	sub	w3, w0, #0x100
    45bc:	mov	w4, #0x1                   	// #1
    45c0:	lsr	w3, w3, #16
    45c4:	and	w3, w3, #0x8
    45c8:	lsl	w0, w0, w3
    45cc:	sub	w2, w0, #0x1, lsl #12
    45d0:	lsr	w2, w2, #16
    45d4:	and	w2, w2, #0x4
    45d8:	orr	w3, w3, w2
    45dc:	lsl	w2, w0, w2
    45e0:	sub	w0, w2, #0x4, lsl #12
    45e4:	lsr	w0, w0, #16
    45e8:	and	w0, w0, #0x2
    45ec:	add	w3, w3, w0
    45f0:	lsl	w0, w2, w0
    45f4:	lsr	w0, w0, #15
    45f8:	sub	w0, w0, w3
    45fc:	add	w2, w0, #0x15
    4600:	add	w0, w0, #0xe
    4604:	lsr	x2, x1, x2
    4608:	lsl	w0, w0, #1
    460c:	and	x2, x2, #0x1
    4610:	add	x0, x2, x0
    4614:	add	x6, x0, #0x4a
    4618:	lsl	w2, w4, w0
    461c:	lsl	x7, x6, #3
    4620:	add	x3, x20, #0x198
    4624:	stp	xzr, xzr, [x19, #32]
    4628:	str	x0, [x19, #56]
    462c:	ldr	w4, [x3, #4]
    4630:	tst	w4, w2
    4634:	b.eq	48bc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x48c>  // b.none
    4638:	lsr	x4, x0, #1
    463c:	mov	w2, #0x39                  	// #57
    4640:	sub	w2, w2, w4
    4644:	cmp	x0, #0x1f
    4648:	ldr	x3, [x3, x6, lsl #3]
    464c:	lsl	x2, x1, x2
    4650:	csel	x2, x2, x1, ne  // ne = any
    4654:	b	4670 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x240>
    4658:	lsr	x0, x2, #63
    465c:	lsl	x2, x2, #1
    4660:	add	x0, x0, #0x4
    4664:	ldr	x4, [x3, x0, lsl #3]
    4668:	cbz	x4, 48d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4a8>
    466c:	mov	x3, x4
    4670:	ldr	x0, [x3, #8]
    4674:	and	x0, x0, #0xfffffffffffffffc
    4678:	cmp	x1, x0
    467c:	b.ne	4658 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x228>  // b.any
    4680:	ldr	x0, [x3, #16]
    4684:	cmp	x5, x0
    4688:	ccmp	x5, x3, #0x2, ls  // ls = plast
    468c:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4690:	str	x19, [x0, #24]
    4694:	str	x19, [x3, #16]
    4698:	stp	x0, x3, [x19, #16]
    469c:	str	xzr, [x19, #48]
    46a0:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    46a4:	add	x0, x0, #0x368
    46a8:	bl	1c00 <pthread_mutex_lock@plt>
    46ac:	cbz	w0, 4468 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x38>
    46b0:	ldp	x19, x20, [sp, #16]
    46b4:	ldp	x21, x22, [sp, #32]
    46b8:	ldp	x29, x30, [sp], #96
    46bc:	ret
    46c0:	bl	2750 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x188>
    46c4:	add	x0, x20, #0x198
    46c8:	ldr	w1, [x0, #864]
    46cc:	tbz	w1, #1, 4468 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x38>
    46d0:	b	46a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x274>
    46d4:	ret
    46d8:	ldr	w3, [x20, #408]
    46dc:	add	x0, x20, #0x198
    46e0:	add	x0, x0, x2, lsl #4
    46e4:	mov	w1, #0x1                   	// #1
    46e8:	lsl	w1, w1, w2
    46ec:	add	x0, x0, #0x40
    46f0:	tst	w3, w1
    46f4:	b.ne	475c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x32c>  // b.any
    46f8:	mov	x2, x0
    46fc:	orr	w1, w3, w1
    4700:	str	w1, [x20, #408]
    4704:	str	x19, [x0, #16]
    4708:	str	x19, [x2, #24]
    470c:	stp	x2, x0, [x19, #16]
    4710:	add	x20, x20, #0x198
    4714:	ldr	w0, [x20, #864]
    4718:	tbz	w0, #1, 46b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x280>
    471c:	add	x0, x20, #0x368
    4720:	ldp	x19, x20, [sp, #16]
    4724:	ldp	x21, x22, [sp, #32]
    4728:	ldp	x29, x30, [sp], #96
    472c:	b	1c20 <pthread_mutex_unlock@plt>
    4730:	ldr	x0, [x2, #8]
    4734:	and	x3, x0, #0x3
    4738:	cmp	x3, #0x3
    473c:	b.ne	44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>  // b.any
    4740:	str	x1, [x22, #8]
    4744:	and	x0, x0, #0xfffffffffffffffe
    4748:	str	x0, [x2, #8]
    474c:	orr	x0, x1, #0x1
    4750:	str	x0, [x19, #8]
    4754:	str	x1, [x2]
    4758:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    475c:	ldr	x2, [x0, #16]
    4760:	cmp	x5, x2
    4764:	b.ls	4704 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2d4>  // b.plast
    4768:	stp	x23, x24, [sp, #48]
    476c:	stp	x25, x26, [sp, #64]
    4770:	stp	x27, x28, [sp, #80]
    4774:	bl	1ae0 <abort@plt>
    4778:	mov	w2, #0x80000000            	// #-2147483648
    477c:	mov	x7, #0x348                 	// #840
    4780:	mov	x0, #0x1f                  	// #31
    4784:	mov	x6, #0x69                  	// #105
    4788:	b	4620 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1f0>
    478c:	cmp	x2, x3
    4790:	ldr	x8, [x2, #48]
    4794:	b.eq	49a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x574>  // b.none
    4798:	ldr	x0, [x2, #16]
    479c:	cmp	x5, x0
    47a0:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    47a4:	str	x3, [x0, #24]
    47a8:	str	x0, [x3, #16]
    47ac:	cbz	x8, 4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    47b0:	ldr	x0, [x2, #56]
    47b4:	add	x4, x20, #0x198
    47b8:	add	x0, x0, #0x4a
    47bc:	ldr	x6, [x4, x0, lsl #3]
    47c0:	cmp	x2, x6
    47c4:	b.eq	4940 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x510>  // b.none
    47c8:	cmp	x5, x8
    47cc:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    47d0:	ldr	x0, [x8, #32]
    47d4:	cmp	x2, x0
    47d8:	b.eq	4a44 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x614>  // b.none
    47dc:	str	x3, [x8, #40]
    47e0:	cbz	x3, 4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    47e4:	cmp	x5, x3
    47e8:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    47ec:	ldr	x0, [x2, #32]
    47f0:	str	x8, [x3, #48]
    47f4:	cbz	x0, 4808 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3d8>
    47f8:	cmp	x5, x0
    47fc:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4800:	str	x0, [x3, #32]
    4804:	str	x3, [x0, #48]
    4808:	ldr	x0, [x2, #40]
    480c:	cbz	x0, 4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    4810:	cmp	x5, x0
    4814:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4818:	str	x0, [x3, #40]
    481c:	str	x3, [x0, #48]
    4820:	b	4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    4824:	cmp	x19, x3
    4828:	ldr	x7, [x19, #48]
    482c:	b.eq	49f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5c8>  // b.none
    4830:	ldr	x0, [x19, #16]
    4834:	cmp	x5, x0
    4838:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    483c:	str	x3, [x0, #24]
    4840:	str	x0, [x3, #16]
    4844:	cbz	x7, 44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4848:	ldr	x0, [x19, #56]
    484c:	add	x4, x20, #0x198
    4850:	add	x0, x0, #0x4a
    4854:	ldr	x6, [x4, x0, lsl #3]
    4858:	cmp	x19, x6
    485c:	b.eq	4948 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x518>  // b.none
    4860:	cmp	x5, x7
    4864:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4868:	ldr	x0, [x7, #32]
    486c:	cmp	x19, x0
    4870:	b.eq	4a4c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x61c>  // b.none
    4874:	str	x3, [x7, #40]
    4878:	cbz	x3, 44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    487c:	cmp	x5, x3
    4880:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4884:	ldr	x0, [x19, #32]
    4888:	str	x7, [x3, #48]
    488c:	cbz	x0, 48a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x470>
    4890:	cmp	x5, x0
    4894:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4898:	str	x0, [x3, #32]
    489c:	str	x3, [x0, #48]
    48a0:	ldr	x0, [x19, #40]
    48a4:	cbz	x0, 44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    48a8:	cmp	x5, x0
    48ac:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    48b0:	str	x0, [x3, #40]
    48b4:	str	x3, [x0, #48]
    48b8:	b	44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    48bc:	str	x19, [x3, x6, lsl #3]
    48c0:	orr	w2, w4, w2
    48c4:	add	x7, x3, x7
    48c8:	str	w2, [x3, #4]
    48cc:	stp	x19, x19, [x19, #16]
    48d0:	str	x7, [x19, #48]
    48d4:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    48d8:	add	x1, x3, x0, lsl #3
    48dc:	cmp	x5, x1
    48e0:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    48e4:	str	x19, [x3, x0, lsl #3]
    48e8:	stp	x19, x19, [x19, #16]
    48ec:	str	x3, [x19, #48]
    48f0:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    48f4:	and	x0, x0, #0xfffffffffffffffe
    48f8:	add	x1, x1, x0
    48fc:	sub	x0, x19, x0
    4900:	add	x19, x1, #0x20
    4904:	mov	x1, x19
    4908:	bl	25d0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x8>
    490c:	cbnz	w0, 4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4910:	ldr	x0, [x22, #848]
    4914:	sub	x0, x0, x19
    4918:	str	x0, [x22, #848]
    491c:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4920:	ldr	x0, [x4, #8]
    4924:	str	x19, [x4, #32]
    4928:	add	x1, x1, x0
    492c:	str	x1, [x4, #8]
    4930:	orr	x0, x1, #0x1
    4934:	str	x0, [x19, #8]
    4938:	str	x1, [x19, x1]
    493c:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4940:	str	x3, [x4, x0, lsl #3]
    4944:	b	47e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3b4>
    4948:	str	x3, [x4, x0, lsl #3]
    494c:	b	487c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x44c>
    4950:	ldr	x0, [x4, #16]
    4954:	stp	x23, x24, [sp, #48]
    4958:	cmp	x19, x7
    495c:	add	x1, x1, x0
    4960:	str	x1, [x4, #16]
    4964:	str	x19, [x4, #40]
    4968:	orr	x0, x1, #0x1
    496c:	str	x0, [x19, #8]
    4970:	b.eq	4a38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x608>  // b.none
    4974:	add	x23, x20, #0x198
    4978:	ldr	x0, [x23, #48]
    497c:	cmp	x1, x0
    4980:	b.hi	4a54 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x624>  // b.pmore
    4984:	ldp	x23, x24, [sp, #48]
    4988:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    498c:	ldr	w3, [x20, #408]
    4990:	mov	w2, #0x1                   	// #1
    4994:	lsl	w0, w2, w0
    4998:	bic	w0, w3, w0
    499c:	str	w0, [x20, #408]
    49a0:	b	4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    49a4:	ldr	x0, [x2, #40]
    49a8:	add	x4, x2, #0x28
    49ac:	cbz	x0, 4cf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8c0>
    49b0:	mov	x6, x4
    49b4:	mov	x3, x0
    49b8:	add	x4, x0, #0x28
    49bc:	ldr	x0, [x0, #40]
    49c0:	cbnz	x0, 49b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x580>
    49c4:	ldr	x0, [x3, #32]
    49c8:	add	x4, x3, #0x20
    49cc:	cbnz	x0, 49b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x580>
    49d0:	cmp	x5, x6
    49d4:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    49d8:	str	xzr, [x6]
    49dc:	b	47ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x37c>
    49e0:	ldr	w4, [x20, #408]
    49e4:	mov	w3, #0x1                   	// #1
    49e8:	lsl	w0, w3, w0
    49ec:	bic	w0, w4, w0
    49f0:	str	w0, [x20, #408]
    49f4:	b	44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    49f8:	ldr	x0, [x19, #40]
    49fc:	add	x4, x19, #0x28
    4a00:	cbz	x0, 4d00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8d0>
    4a04:	nop
    4a08:	mov	x6, x4
    4a0c:	mov	x3, x0
    4a10:	add	x4, x0, #0x28
    4a14:	ldr	x0, [x0, #40]
    4a18:	cbnz	x0, 4a08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5d8>
    4a1c:	ldr	x0, [x3, #32]
    4a20:	add	x4, x3, #0x20
    4a24:	cbnz	x0, 4a08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5d8>
    4a28:	cmp	x5, x6
    4a2c:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4a30:	str	xzr, [x6]
    4a34:	b	4844 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x414>
    4a38:	str	xzr, [x4, #8]
    4a3c:	str	xzr, [x4, #32]
    4a40:	b	4974 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x544>
    4a44:	str	x3, [x8, #32]
    4a48:	b	47e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3b0>
    4a4c:	str	x3, [x7, #32]
    4a50:	b	4878 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x448>
    4a54:	stp	x25, x26, [sp, #64]
    4a58:	cmp	x1, #0x48
    4a5c:	b.ls	4aec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6bc>  // b.plast
    4a60:	add	x23, x23, #0x398
    4a64:	b	4a70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x640>
    4a68:	ldr	x23, [x23, #16]
    4a6c:	cbz	x23, 4fb0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb80>
    4a70:	ldr	x0, [x23]
    4a74:	cmp	x19, x0
    4a78:	b.cc	4a68 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x638>  // b.lo, b.ul, b.last
    4a7c:	ldr	x4, [x23, #8]
    4a80:	add	x3, x0, x4
    4a84:	cmp	x19, x3
    4a88:	b.cs	4a68 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x638>  // b.hs, b.nlast
    4a8c:	add	x2, x20, #0x198
    4a90:	ldr	x5, [x2, #968]
    4a94:	sub	x22, x5, #0x49
    4a98:	add	x1, x22, x1
    4a9c:	udiv	x22, x1, x5
    4aa0:	sub	x22, x22, #0x1
    4aa4:	mul	x22, x22, x5
    4aa8:	cmp	x22, x4
    4aac:	b.hi	4aec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6bc>  // b.pmore
    4ab0:	add	x1, x2, #0x398
    4ab4:	nop
    4ab8:	cmp	x0, x1
    4abc:	b.hi	4ac8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x698>  // b.pmore
    4ac0:	cmp	x3, x1
    4ac4:	b.hi	4aec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6bc>  // b.pmore
    4ac8:	ldr	x1, [x1, #16]
    4acc:	cbnz	x1, 4ab8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x688>
    4ad0:	sub	x4, x4, x22
    4ad4:	mov	x1, x22
    4ad8:	add	x0, x0, x4
    4adc:	bl	25d0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x8>
    4ae0:	cmp	x22, #0x0
    4ae4:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    4ae8:	b.eq	4f30 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb00>  // b.none
    4aec:	add	x0, x20, #0x198
    4af0:	mov	x22, #0x0                   	// #0
    4af4:	ldr	x25, [x0, #936]
    4af8:	cbz	x25, 4d58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x928>
    4afc:	stp	x27, x28, [sp, #80]
    4b00:	add	x28, x20, #0x198
    4b04:	add	x24, x28, #0x398
    4b08:	ldr	x0, [x25]
    4b0c:	mov	x27, x25
    4b10:	ldr	x25, [x25, #16]
    4b14:	neg	x19, x0
    4b18:	and	x19, x19, #0x7
    4b1c:	tst	x0, #0x7
    4b20:	add	x19, x0, x19
    4b24:	csel	x19, x19, x0, ne  // ne = any
    4b28:	ldr	x2, [x19, #8]
    4b2c:	tbnz	w2, #1, 4c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x804>
    4b30:	ldr	x23, [x27, #8]
    4b34:	and	x26, x2, #0xfffffffffffffffc
    4b38:	add	x3, x19, x26
    4b3c:	sub	x2, x23, #0x48
    4b40:	add	x2, x0, x2
    4b44:	cmp	x3, x2
    4b48:	b.cc	4c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x804>  // b.lo, b.ul, b.last
    4b4c:	ldr	x2, [x28, #32]
    4b50:	cmp	x2, x19
    4b54:	b.eq	4d10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8e0>  // b.none
    4b58:	ldr	x3, [x19, #24]
    4b5c:	ldr	x7, [x19, #48]
    4b60:	cmp	x3, x19
    4b64:	b.eq	4d70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x940>  // b.none
    4b68:	ldr	x2, [x19, #16]
    4b6c:	ldr	x4, [x28, #24]
    4b70:	cmp	x2, x4
    4b74:	b.cc	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.lo, b.ul, b.last
    4b78:	str	x3, [x2, #24]
    4b7c:	str	x2, [x3, #16]
    4b80:	cbz	x7, 4bf4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c4>
    4b84:	ldr	x2, [x19, #56]
    4b88:	add	x2, x2, #0x4a
    4b8c:	ldr	x4, [x28, x2, lsl #3]
    4b90:	cmp	x4, x19
    4b94:	b.eq	4e50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa20>  // b.none
    4b98:	ldr	x2, [x28, #24]
    4b9c:	cmp	x7, x2
    4ba0:	b.cc	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.lo, b.ul, b.last
    4ba4:	ldr	x4, [x7, #32]
    4ba8:	cmp	x4, x19
    4bac:	b.eq	4ee8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xab8>  // b.none
    4bb0:	str	x3, [x7, #40]
    4bb4:	cbz	x3, 4bf4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c4>
    4bb8:	cmp	x3, x2
    4bbc:	b.cc	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.lo, b.ul, b.last
    4bc0:	ldr	x4, [x19, #32]
    4bc4:	str	x7, [x3, #48]
    4bc8:	cbz	x4, 4bdc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7ac>
    4bcc:	cmp	x4, x2
    4bd0:	b.cc	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.lo, b.ul, b.last
    4bd4:	str	x4, [x3, #32]
    4bd8:	str	x3, [x4, #48]
    4bdc:	ldr	x4, [x19, #40]
    4be0:	cbz	x4, 4bf4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c4>
    4be4:	cmp	x4, x2
    4be8:	b.cc	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.lo, b.ul, b.last
    4bec:	str	x4, [x3, #40]
    4bf0:	str	x3, [x4, #48]
    4bf4:	mov	x1, x23
    4bf8:	bl	25d0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x8>
    4bfc:	cbnz	w0, 4c3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x80c>
    4c00:	ldr	x0, [x28, #848]
    4c04:	add	x21, x21, x23
    4c08:	sub	x0, x0, x23
    4c0c:	str	x0, [x28, #848]
    4c10:	str	x25, [x24, #16]
    4c14:	nop
    4c18:	cbnz	x25, 4b08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6d8>
    4c1c:	cmn	x21, x22
    4c20:	b.eq	4d54 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x924>  // b.none
    4c24:	ldp	x23, x24, [sp, #48]
    4c28:	ldp	x25, x26, [sp, #64]
    4c2c:	ldp	x27, x28, [sp, #80]
    4c30:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4c34:	mov	x24, x27
    4c38:	b	4c18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7e8>
    4c3c:	cmp	xzr, x26, lsr #8
    4c40:	lsr	x0, x26, #8
    4c44:	b.eq	4d44 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x914>  // b.none
    4c48:	mov	x1, #0xffff                	// #65535
    4c4c:	cmp	x0, x1
    4c50:	b.hi	4e5c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa2c>  // b.pmore
    4c54:	sub	w1, w0, #0x100
    4c58:	lsr	w1, w1, #16
    4c5c:	and	w1, w1, #0x8
    4c60:	lsl	w0, w0, w1
    4c64:	sub	w2, w0, #0x1, lsl #12
    4c68:	lsr	w2, w2, #16
    4c6c:	and	w2, w2, #0x4
    4c70:	orr	w1, w1, w2
    4c74:	lsl	w0, w0, w2
    4c78:	sub	w2, w0, #0x4, lsl #12
    4c7c:	lsr	w2, w2, #16
    4c80:	and	w2, w2, #0x2
    4c84:	add	w1, w1, w2
    4c88:	lsl	w0, w0, w2
    4c8c:	lsr	w0, w0, #15
    4c90:	sub	w0, w0, w1
    4c94:	add	w1, w0, #0x15
    4c98:	add	w0, w0, #0xe
    4c9c:	lsr	x1, x26, x1
    4ca0:	lsl	w0, w0, #1
    4ca4:	and	x1, x1, #0x1
    4ca8:	add	x0, x1, x0
    4cac:	mov	w1, #0x1                   	// #1
    4cb0:	add	x4, x0, #0x4a
    4cb4:	lsl	w3, w1, w0
    4cb8:	lsl	x2, x4, #3
    4cbc:	ldr	w1, [x28, #4]
    4cc0:	stp	xzr, xzr, [x19, #32]
    4cc4:	tst	w1, w3
    4cc8:	str	x0, [x19, #56]
    4ccc:	b.ne	4ddc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9ac>  // b.any
    4cd0:	str	x19, [x28, x4, lsl #3]
    4cd4:	orr	w1, w1, w3
    4cd8:	add	x2, x28, x2
    4cdc:	mov	x24, x27
    4ce0:	str	w1, [x28, #4]
    4ce4:	stp	x19, x19, [x19, #16]
    4ce8:	str	x2, [x19, #48]
    4cec:	b	4c18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7e8>
    4cf0:	ldr	x0, [x2, #32]
    4cf4:	cbz	x0, 4e70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa40>
    4cf8:	add	x4, x2, #0x20
    4cfc:	b	49b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x580>
    4d00:	ldr	x0, [x19, #32]
    4d04:	cbz	x0, 4eac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa7c>
    4d08:	add	x4, x19, #0x20
    4d0c:	b	4a08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5d8>
    4d10:	str	xzr, [x28, #8]
    4d14:	str	xzr, [x28, #32]
    4d18:	b	4bf4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c4>
    4d1c:	cmp	x5, x2
    4d20:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4d24:	cmp	x0, x3
    4d28:	b.eq	4560 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x130>  // b.none
    4d2c:	b	4554 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x124>
    4d30:	cmp	x5, x4
    4d34:	b.hi	4768 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x338>  // b.pmore
    4d38:	cmp	x0, x3
    4d3c:	b.eq	44e8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8>  // b.none
    4d40:	b	44dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xac>
    4d44:	mov	w3, #0x1                   	// #1
    4d48:	mov	x2, #0x250                 	// #592
    4d4c:	mov	x4, #0x4a                  	// #74
    4d50:	b	4cbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x88c>
    4d54:	ldp	x27, x28, [sp, #80]
    4d58:	add	x0, x20, #0x198
    4d5c:	mov	x1, #0xffffffffffffffff    	// #-1
    4d60:	ldp	x23, x24, [sp, #48]
    4d64:	ldp	x25, x26, [sp, #64]
    4d68:	str	x1, [x0, #48]
    4d6c:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4d70:	ldr	x2, [x19, #40]
    4d74:	add	x4, x19, #0x28
    4d78:	cbnz	x2, 4da8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x978>
    4d7c:	ldr	x2, [x19, #32]
    4d80:	cbnz	x2, 4da4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x974>
    4d84:	cbz	x7, 4bf4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c4>
    4d88:	ldr	x2, [x19, #56]
    4d8c:	add	x3, x2, #0x4a
    4d90:	ldr	x4, [x28, x3, lsl #3]
    4d94:	cmp	x4, x19
    4d98:	b.eq	4f14 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xae4>  // b.none
    4d9c:	mov	x3, #0x0                   	// #0
    4da0:	b	4b98 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x768>
    4da4:	add	x4, x19, #0x20
    4da8:	mov	x5, x4
    4dac:	mov	x3, x2
    4db0:	add	x4, x2, #0x28
    4db4:	ldr	x2, [x2, #40]
    4db8:	cbnz	x2, 4da8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x978>
    4dbc:	ldr	x2, [x3, #32]
    4dc0:	add	x4, x3, #0x20
    4dc4:	cbnz	x2, 4da8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x978>
    4dc8:	ldr	x2, [x28, #24]
    4dcc:	cmp	x2, x5
    4dd0:	b.hi	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.pmore
    4dd4:	str	xzr, [x5]
    4dd8:	b	4b80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x750>
    4ddc:	lsr	x1, x0, #1
    4de0:	cmp	x0, #0x1f
    4de4:	mov	w0, #0x39                  	// #57
    4de8:	sub	w1, w0, w1
    4dec:	csel	w1, w1, wzr, ne  // ne = any
    4df0:	ldr	x2, [x28, x4, lsl #3]
    4df4:	lsl	x1, x26, x1
    4df8:	b	4e14 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9e4>
    4dfc:	lsr	x0, x1, #63
    4e00:	lsl	x1, x1, #1
    4e04:	add	x0, x0, #0x4
    4e08:	ldr	x3, [x2, x0, lsl #3]
    4e0c:	cbz	x3, 4ef0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xac0>
    4e10:	mov	x2, x3
    4e14:	ldr	x0, [x2, #8]
    4e18:	and	x0, x0, #0xfffffffffffffffc
    4e1c:	cmp	x26, x0
    4e20:	b.ne	4dfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9cc>  // b.any
    4e24:	ldr	x1, [x28, #24]
    4e28:	ldr	x0, [x2, #16]
    4e2c:	cmp	x2, x1
    4e30:	ccmp	x0, x1, #0x0, cs  // cs = hs, nlast
    4e34:	b.cc	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.lo, b.ul, b.last
    4e38:	str	x19, [x0, #24]
    4e3c:	mov	x24, x27
    4e40:	str	x19, [x2, #16]
    4e44:	stp	x0, x2, [x19, #16]
    4e48:	str	xzr, [x19, #48]
    4e4c:	b	4c18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7e8>
    4e50:	str	x3, [x28, x2, lsl #3]
    4e54:	ldr	x2, [x28, #24]
    4e58:	b	4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x788>
    4e5c:	mov	w3, #0x80000000            	// #-2147483648
    4e60:	mov	x2, #0x348                 	// #840
    4e64:	mov	x0, #0x1f                  	// #31
    4e68:	mov	x4, #0x69                  	// #105
    4e6c:	b	4cbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x88c>
    4e70:	cbz	x8, 4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    4e74:	ldr	x9, [x2, #56]
    4e78:	add	x4, x20, #0x198
    4e7c:	mov	x3, #0x0                   	// #0
    4e80:	add	x6, x9, #0x4a
    4e84:	ldr	x0, [x4, x6, lsl #3]
    4e88:	cmp	x2, x0
    4e8c:	b.ne	47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x398>  // b.any
    4e90:	ldr	w2, [x4, #4]
    4e94:	mov	w0, #0x1                   	// #1
    4e98:	lsl	w0, w0, w9
    4e9c:	str	xzr, [x4, x6, lsl #3]
    4ea0:	bic	w0, w2, w0
    4ea4:	str	w0, [x4, #4]
    4ea8:	b	4568 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>
    4eac:	cbz	x7, 44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4eb0:	ldr	x8, [x19, #56]
    4eb4:	add	x4, x20, #0x198
    4eb8:	mov	x3, #0x0                   	// #0
    4ebc:	add	x6, x8, #0x4a
    4ec0:	ldr	x0, [x4, x6, lsl #3]
    4ec4:	cmp	x19, x0
    4ec8:	b.ne	4860 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x430>  // b.any
    4ecc:	ldr	w3, [x4, #4]
    4ed0:	mov	w0, #0x1                   	// #1
    4ed4:	lsl	w0, w0, w8
    4ed8:	str	xzr, [x4, x6, lsl #3]
    4edc:	bic	w0, w3, w0
    4ee0:	str	w0, [x4, #4]
    4ee4:	b	44f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4ee8:	str	x3, [x7, #32]
    4eec:	b	4bb4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x784>
    4ef0:	ldr	x3, [x28, #24]
    4ef4:	add	x1, x2, x0, lsl #3
    4ef8:	cmp	x3, x1
    4efc:	b.hi	4774 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.pmore
    4f00:	str	x19, [x2, x0, lsl #3]
    4f04:	mov	x24, x27
    4f08:	stp	x19, x19, [x19, #16]
    4f0c:	str	x2, [x19, #48]
    4f10:	b	4c18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7e8>
    4f14:	ldr	w4, [x28, #4]
    4f18:	mov	w1, #0x1                   	// #1
    4f1c:	lsl	w2, w1, w2
    4f20:	str	xzr, [x28, x3, lsl #3]
    4f24:	bic	w2, w4, w2
    4f28:	str	w2, [x28, #4]
    4f2c:	b	4bf4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c4>
    4f30:	add	x2, x20, #0x198
    4f34:	ldr	x0, [x23, #8]
    4f38:	ldr	x3, [x2, #848]
    4f3c:	sub	x0, x0, x22
    4f40:	ldr	x1, [x2, #16]
    4f44:	str	x0, [x23, #8]
    4f48:	ldr	x0, [x2, #40]
    4f4c:	sub	x3, x3, x22
    4f50:	str	x3, [x2, #848]
    4f54:	sub	x1, x1, x22
    4f58:	add	x2, x0, #0x10
    4f5c:	ands	x3, x0, #0x7
    4f60:	b.eq	4f6c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb3c>  // b.none
    4f64:	neg	x3, x2
    4f68:	and	x3, x3, #0x7
    4f6c:	add	x2, x20, #0x198
    4f70:	add	x4, x0, x3
    4f74:	add	x0, x0, x1
    4f78:	sub	x1, x1, x3
    4f7c:	orr	x5, x1, #0x1
    4f80:	mov	x3, #0x48                  	// #72
    4f84:	str	x1, [x2, #16]
    4f88:	str	x4, [x2, #40]
    4f8c:	ldr	x25, [x2, #936]
    4f90:	str	x5, [x4, #8]
    4f94:	str	x3, [x0, #8]
    4f98:	ldr	x0, [x2, #984]
    4f9c:	str	x0, [x2, #48]
    4fa0:	cbnz	x25, 4afc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6cc>
    4fa4:	ldp	x23, x24, [sp, #48]
    4fa8:	ldp	x25, x26, [sp, #64]
    4fac:	b	4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    4fb0:	stp	x27, x28, [sp, #80]
    4fb4:	ldr	x0, [x23, #8]
    4fb8:	brk	#0x3e8
    4fbc:	stp	x23, x24, [sp, #48]
    4fc0:	stp	x25, x26, [sp, #64]
    4fc4:	stp	x27, x28, [sp, #80]
    4fc8:	bl	1ae0 <abort@plt>
    4fcc:	nop
    4fd0:	cbz	x0, 5020 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbf0>
    4fd4:	ldr	x1, [x0]
    4fd8:	cbz	x1, 5020 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbf0>
    4fdc:	stp	x29, x30, [sp, #-32]!
    4fe0:	mov	x29, sp
    4fe4:	str	x19, [sp, #16]
    4fe8:	add	x19, x0, #0x8
    4fec:	ldrh	w0, [x1, #10]
    4ff0:	and	w2, w0, #0xfffffffd
    4ff4:	cmp	w2, #0xd
    4ff8:	b.ne	5008 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd8>  // b.any
    4ffc:	ldr	x0, [x1, #16]
    5000:	bl	4fd0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xba0>
    5004:	tbnz	w0, #31, 5014 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbe4>
    5008:	ldr	x19, [sp, #16]
    500c:	ldp	x29, x30, [sp], #32
    5010:	ret
    5014:	ldr	x1, [x19], #8
    5018:	cbnz	x1, 4fec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbbc>
    501c:	b	5008 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd8>
    5020:	mov	w0, #0xffffffff            	// #-1
    5024:	ret
    5028:	cbz	x0, 5088 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc58>
    502c:	ldr	x2, [x0]
    5030:	cbz	x2, 5088 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc58>
    5034:	stp	x29, x30, [sp, #-32]!
    5038:	mov	x29, sp
    503c:	stp	x19, x20, [sp, #16]
    5040:	mov	w20, w1
    5044:	add	x19, x0, #0x8
    5048:	b	505c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc2c>
    504c:	cmp	w0, w20
    5050:	b.ne	50a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc70>  // b.any
    5054:	ldr	x2, [x19], #8
    5058:	cbz	x2, 5090 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc60>
    505c:	ldrh	w0, [x2, #10]
    5060:	and	w3, w0, #0xfffffffd
    5064:	cmp	w3, #0xd
    5068:	b.ne	504c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>  // b.any
    506c:	ldr	x0, [x2, #16]
    5070:	mov	w1, w20
    5074:	bl	5028 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbf8>
    5078:	cbnz	w0, 5054 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc24>
    507c:	ldp	x19, x20, [sp, #16]
    5080:	ldp	x29, x30, [sp], #32
    5084:	ret
    5088:	mov	w0, #0x1                   	// #1
    508c:	ret
    5090:	mov	w0, #0x1                   	// #1
    5094:	ldp	x19, x20, [sp, #16]
    5098:	ldp	x29, x30, [sp], #32
    509c:	ret
    50a0:	mov	w0, #0x0                   	// #0
    50a4:	ldp	x19, x20, [sp, #16]
    50a8:	ldp	x29, x30, [sp], #32
    50ac:	ret
    50b0:	ldrh	w1, [x0, #10]
    50b4:	mov	x2, x0
    50b8:	cmp	w1, #0xd
    50bc:	b.eq	5120 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcf0>  // b.none
    50c0:	b.hi	50e8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb8>  // b.pmore
    50c4:	sub	w2, w1, #0x2
    50c8:	mov	w0, #0x0                   	// #0
    50cc:	and	w2, w2, #0xffff
    50d0:	cmp	w2, #0x2
    50d4:	b.hi	511c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcec>  // b.pmore
    50d8:	mov	w4, w1
    50dc:	mov	w0, #0x3                   	// #3
    50e0:	add	w0, w0, w4, lsl #2
    50e4:	ret
    50e8:	cmp	w1, #0xf
    50ec:	mov	w0, #0x0                   	// #0
    50f0:	b.ne	50e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb4>  // b.any
    50f4:	ldr	x1, [x2, #16]
    50f8:	ldr	x1, [x1]
    50fc:	ldrh	w1, [x1, #10]
    5100:	sub	w2, w1, #0x2
    5104:	cmp	w2, #0x2
    5108:	b.hi	50e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb4>  // b.pmore
    510c:	mov	w4, w1
    5110:	mov	w0, #0x2                   	// #2
    5114:	add	w0, w0, w4, lsl #2
    5118:	b	50e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb4>
    511c:	ret
    5120:	ldr	x9, [x2]
    5124:	mov	w0, #0x0                   	// #0
    5128:	sub	x1, x9, #0x4
    512c:	cmp	x1, #0x3c
    5130:	b.hi	50e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb4>  // b.pmore
    5134:	stp	x29, x30, [sp, #-16]!
    5138:	mov	x29, sp
    513c:	ldr	x6, [x2, #16]
    5140:	ldr	x3, [x6]
    5144:	ldrh	w5, [x3, #10]
    5148:	and	w8, w5, #0xfffffffd
    514c:	mov	w4, w5
    5150:	cmp	w8, #0xd
    5154:	b.ne	5178 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd48>  // b.any
    5158:	add	x7, x6, #0x8
    515c:	mov	x0, x3
    5160:	b	5168 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd38>
    5164:	ldr	x0, [x7], #8
    5168:	ldr	x0, [x0, #16]
    516c:	bl	4fd0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xba0>
    5170:	mov	w4, w0
    5174:	tbnz	w0, #31, 5164 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd34>
    5178:	cmp	w4, #0x3
    517c:	b.eq	519c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd6c>  // b.none
    5180:	cmp	w4, #0x4
    5184:	b.eq	5204 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdd4>  // b.none
    5188:	cmp	w4, #0x2
    518c:	mov	w0, #0x0                   	// #0
    5190:	b.eq	51f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdc4>  // b.none
    5194:	ldp	x29, x30, [sp], #16
    5198:	ret
    519c:	tst	x9, #0x7
    51a0:	mov	w0, #0x0                   	// #0
    51a4:	b.ne	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>  // b.any
    51a8:	lsr	x9, x9, #3
    51ac:	cmp	x9, #0x4
    51b0:	mov	w0, #0x0                   	// #0
    51b4:	b.hi	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>  // b.pmore
    51b8:	add	x6, x6, #0x8
    51bc:	b	51d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xda8>
    51c0:	cmp	w4, w5
    51c4:	b.ne	5228 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdf8>  // b.any
    51c8:	ldr	x3, [x6], #8
    51cc:	cbz	x3, 5218 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xde8>
    51d0:	ldrh	w5, [x3, #10]
    51d4:	and	w8, w5, #0xfffffffd
    51d8:	cmp	w8, #0xd
    51dc:	b.ne	51c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd90>  // b.any
    51e0:	ldr	x0, [x3, #16]
    51e4:	mov	w1, w4
    51e8:	bl	5028 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbf8>
    51ec:	cbnz	w0, 51c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd98>
    51f0:	b	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>
    51f4:	tst	x9, #0x3
    51f8:	b.ne	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>  // b.any
    51fc:	lsr	x9, x9, #2
    5200:	b	51ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd7c>
    5204:	tst	x9, #0xf
    5208:	mov	w0, #0x0                   	// #0
    520c:	b.ne	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>  // b.any
    5210:	lsr	x9, x9, #4
    5214:	b	51b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd88>
    5218:	mov	w0, #0x4                   	// #4
    521c:	sub	w0, w0, w9
    5220:	add	w0, w0, w4, lsl #2
    5224:	b	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>
    5228:	mov	w0, #0x0                   	// #0
    522c:	b	5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd64>
    5230:	stp	x29, x30, [sp, #-176]!
    5234:	mov	x29, sp
    5238:	stp	x23, x24, [sp, #48]
    523c:	mov	x24, x0
    5240:	stp	x27, x28, [sp, #80]
    5244:	ldr	w28, [x0, #24]
    5248:	ldr	x0, [x0, #16]
    524c:	stp	x4, x1, [x29, #120]
    5250:	ldr	w1, [x24, #28]
    5254:	stp	x19, x20, [sp, #16]
    5258:	mov	x20, x3
    525c:	ldr	x0, [x0]
    5260:	stp	x21, x22, [sp, #32]
    5264:	stp	x25, x26, [sp, #64]
    5268:	str	x0, [x29, #104]
    526c:	str	x2, [x29, #136]
    5270:	str	w1, [x29, #152]
    5274:	tbz	w1, #5, 534c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf1c>
    5278:	cbz	x2, 5688 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1258>
    527c:	add	x0, x28, #0xef
    5280:	str	x2, [x29, #144]
    5284:	and	x0, x0, #0x1fffffff0
    5288:	sub	sp, sp, x0
    528c:	mov	x21, sp
    5290:	add	x0, x21, #0xc0
    5294:	str	x0, [x29, #160]
    5298:	add	x0, x0, x28
    529c:	str	x0, [x29, #112]
    52a0:	ldr	w0, [x24, #4]
    52a4:	cmp	w0, #0x0
    52a8:	b.le	5404 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfd4>
    52ac:	sub	w7, w0, #0x1
    52b0:	mov	x22, #0x0                   	// #0
    52b4:	add	x7, x7, #0x1
    52b8:	mov	x19, #0x0                   	// #0
    52bc:	mov	w26, #0x0                   	// #0
    52c0:	mov	x23, #0x1                   	// #1
    52c4:	lsl	x27, x7, #3
    52c8:	mov	x28, #0x5fe2                	// #24546
    52cc:	mov	x25, #0xa01c                	// #40988
    52d0:	str	wzr, [x29, #168]
    52d4:	b	5328 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xef8>
    52d8:	lsl	x6, x23, x4
    52dc:	tst	x6, x28
    52e0:	b.eq	5388 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf58>  // b.none
    52e4:	cmp	w4, #0x8
    52e8:	b.eq	5624 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11f4>  // b.none
    52ec:	b.hi	54ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x107c>  // b.pmore
    52f0:	cmp	w4, #0x6
    52f4:	b.eq	562c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11fc>  // b.none
    52f8:	cmp	w4, #0x7
    52fc:	b.ne	5458 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1028>  // b.any
    5300:	ldrh	w1, [x14]
    5304:	nop
    5308:	cmp	w26, #0x7
    530c:	b.hi	5478 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1048>  // b.pmore
    5310:	add	x0, x21, w26, uxtw #3
    5314:	add	w26, w26, #0x1
    5318:	str	x1, [x0, #128]
    531c:	add	x22, x22, #0x8
    5320:	cmp	x22, x27
    5324:	b.eq	5404 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfd4>  // b.none
    5328:	ldr	x0, [x24, #8]
    532c:	add	x18, x20, x22
    5330:	ldr	x14, [x20, x22]
    5334:	ldr	x10, [x0, x22]
    5338:	ldrh	w4, [x10, #10]
    533c:	ldr	x15, [x10]
    5340:	cmp	w4, #0xf
    5344:	b.ls	52d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xea8>  // b.plast
    5348:	bl	1ae0 <abort@plt>
    534c:	ldr	x0, [x29, #136]
    5350:	cbz	x0, 56c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1290>
    5354:	ldr	x0, [x29, #152]
    5358:	tbz	w0, #6, 563c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x120c>
    535c:	add	x0, x28, #0xff
    5360:	and	x0, x0, #0x1fffffff0
    5364:	sub	sp, sp, x0
    5368:	mov	x21, sp
    536c:	add	x0, x21, #0xc0
    5370:	str	x0, [x29, #160]
    5374:	add	x27, x0, x28
    5378:	str	x27, [x29, #112]
    537c:	add	x0, x27, #0x20
    5380:	str	x0, [x29, #144]
    5384:	b	52a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe70>
    5388:	tst	x6, x25
    538c:	b.eq	5450 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1020>  // b.none
    5390:	mov	x0, x10
    5394:	bl	50b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc80>
    5398:	cbz	w0, 54e8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10b8>
    539c:	mov	w2, #0x4                   	// #4
    53a0:	and	w1, w0, #0x3
    53a4:	sub	w1, w2, w1
    53a8:	ldr	w2, [x29, #168]
    53ac:	add	w1, w1, w2
    53b0:	cmp	w1, #0x8
    53b4:	b.ls	555c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x112c>  // b.plast
    53b8:	ldrh	w4, [x10, #8]
    53bc:	mov	w1, #0x8                   	// #8
    53c0:	str	w1, [x29, #168]
    53c4:	mov	x1, #0x8                   	// #8
    53c8:	cmp	x4, #0x8
    53cc:	sub	x0, x19, #0x1
    53d0:	csel	x4, x4, x1, cs  // cs = hs, nlast
    53d4:	sub	x4, x4, #0x1
    53d8:	orr	x0, x4, x0
    53dc:	add	x4, x0, #0x1
    53e0:	ldr	x0, [x29, #160]
    53e4:	add	x19, x15, x4
    53e8:	add	x0, x0, x4
    53ec:	mov	x2, x15
    53f0:	mov	x1, x14
    53f4:	add	x22, x22, #0x8
    53f8:	bl	19b0 <memcpy@plt>
    53fc:	cmp	x22, x27
    5400:	b.ne	5328 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xef8>  // b.any
    5404:	ldp	x1, x5, [x29, #112]
    5408:	mov	x0, x21
    540c:	ldr	w19, [x29, #152]
    5410:	ldr	x2, [x29, #128]
    5414:	mov	w4, w19
    5418:	ldr	x3, [x29, #144]
    541c:	bl	5c40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x330>
    5420:	tbz	w19, #6, 5430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1000>
    5424:	ldp	x0, x1, [x29, #136]
    5428:	ldr	x2, [x29, #104]
    542c:	bl	19b0 <memcpy@plt>
    5430:	mov	sp, x29
    5434:	ldp	x19, x20, [sp, #16]
    5438:	ldp	x21, x22, [sp, #32]
    543c:	ldp	x23, x24, [sp, #48]
    5440:	ldp	x25, x26, [sp, #64]
    5444:	ldp	x27, x28, [sp, #80]
    5448:	ldp	x29, x30, [sp], #176
    544c:	ret
    5450:	tbnz	w6, #0, 531c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>
    5454:	bl	1ae0 <abort@plt>
    5458:	cmp	w4, #0x1
    545c:	b.eq	5634 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1204>  // b.none
    5460:	cmp	w4, #0x5
    5464:	b.ne	5348 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf18>  // b.any
    5468:	ldrb	w1, [x14]
    546c:	cmp	w26, #0x7
    5470:	b.ls	5310 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xee0>  // b.plast
    5474:	nop
    5478:	ldrh	w0, [x10, #8]
    547c:	mov	x2, #0x8                   	// #8
    5480:	sub	x19, x19, #0x1
    5484:	mov	w26, #0x8                   	// #8
    5488:	cmp	x0, #0x8
    548c:	csel	x0, x0, x2, cs  // cs = hs, nlast
    5490:	sub	x0, x0, #0x1
    5494:	orr	x0, x0, x19
    5498:	ldr	x2, [x29, #160]
    549c:	add	x0, x0, #0x1
    54a0:	add	x19, x0, x15
    54a4:	str	x1, [x2, x0]
    54a8:	b	531c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>
    54ac:	cmp	w4, #0xa
    54b0:	b.eq	5634 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1204>  // b.none
    54b4:	b.ls	54d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10a8>  // b.plast
    54b8:	cmp	w4, #0xc
    54bc:	b.hi	54c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>  // b.pmore
    54c0:	ldr	x1, [x14]
    54c4:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    54c8:	cmp	w4, #0xe
    54cc:	b.ne	5348 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf18>  // b.any
    54d0:	ldr	x1, [x14]
    54d4:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    54d8:	cmp	w4, #0x9
    54dc:	b.ne	5348 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf18>  // b.any
    54e0:	ldr	w1, [x14]
    54e4:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    54e8:	cmp	x15, #0x10
    54ec:	b.hi	5518 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10e8>  // b.pmore
    54f0:	add	x1, x15, #0x7
    54f4:	mov	w0, w26
    54f8:	lsr	x1, x1, #3
    54fc:	add	x2, x0, x1
    5500:	cmp	x2, #0x8
    5504:	b.hi	5528 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10f8>  // b.pmore
    5508:	add	x0, x0, #0x10
    550c:	add	w26, w26, w1
    5510:	add	x0, x21, x0, lsl #3
    5514:	b	53ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfbc>
    5518:	mov	x14, x18
    551c:	mov	x15, #0x8                   	// #8
    5520:	ldr	x1, [x14]
    5524:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    5528:	ldrh	w0, [x10, #8]
    552c:	mov	x1, #0x8                   	// #8
    5530:	sub	x19, x19, #0x1
    5534:	mov	w26, #0x8                   	// #8
    5538:	cmp	x0, #0x8
    553c:	csel	x0, x0, x1, cs  // cs = hs, nlast
    5540:	sub	x0, x0, #0x1
    5544:	ldr	x1, [x29, #160]
    5548:	orr	x0, x0, x19
    554c:	add	x0, x0, #0x1
    5550:	add	x19, x15, x0
    5554:	add	x0, x1, x0
    5558:	b	53ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfbc>
    555c:	ldr	x3, [x29, #168]
    5560:	sub	w0, w0, #0x8
    5564:	mov	w2, #0xc                   	// #12
    5568:	ubfiz	x3, x3, #4, #32
    556c:	smull	x0, w0, w2
    5570:	add	x3, x21, x3
    5574:	adr	x2, 5580 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1150>
    5578:	add	x2, x2, x0
    557c:	br	x2
    5580:	ldp	s16, s17, [x14]
    5584:	ldp	s18, s19, [x14, #8]
    5588:	b	560c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11dc>
    558c:	ldp	s16, s17, [x14]
    5590:	ldr	s18, [x14, #8]
    5594:	b	5610 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e0>
    5598:	ldp	s16, s17, [x14]
    559c:	b	5614 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e4>
    55a0:	nop
    55a4:	ldr	s16, [x14]
    55a8:	b	5618 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e8>
    55ac:	nop
    55b0:	ldp	d16, d17, [x14]
    55b4:	ldp	d18, d19, [x14, #16]
    55b8:	b	560c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11dc>
    55bc:	ldp	d16, d17, [x14]
    55c0:	ldr	d18, [x14, #16]
    55c4:	b	5610 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e0>
    55c8:	ldp	d16, d17, [x14]
    55cc:	b	5614 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e4>
    55d0:	nop
    55d4:	ldr	d16, [x14]
    55d8:	b	5618 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e8>
    55dc:	nop
    55e0:	ldp	q16, q17, [x14]
    55e4:	ldp	q18, q19, [x14, #32]
    55e8:	b	560c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11dc>
    55ec:	ldp	q16, q17, [x14]
    55f0:	ldr	q18, [x14, #32]
    55f4:	b	5610 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e0>
    55f8:	ldp	q16, q17, [x14]
    55fc:	b	5614 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e4>
    5600:	nop
    5604:	ldr	q16, [x14]
    5608:	b	5618 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e8>
    560c:	str	q19, [x3, #48]
    5610:	str	q18, [x3, #32]
    5614:	str	q17, [x3, #16]
    5618:	str	q16, [x3]
    561c:	str	w1, [x29, #168]
    5620:	b	531c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>
    5624:	ldrsh	x1, [x14]
    5628:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    562c:	ldrsb	x1, [x14]
    5630:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    5634:	ldrsw	x1, [x14]
    5638:	b	5308 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed8>
    563c:	add	x1, x28, #0xef
    5640:	ldr	w0, [x24, #4]
    5644:	and	x1, x1, #0x1fffffff0
    5648:	sub	sp, sp, x1
    564c:	cmp	w0, #0x0
    5650:	mov	x21, sp
    5654:	add	x1, x21, #0xc0
    5658:	str	x1, [x29, #160]
    565c:	ldr	x2, [x29, #136]
    5660:	add	x1, x1, x28
    5664:	str	x1, [x29, #112]
    5668:	str	x2, [x29, #144]
    566c:	b.gt	52ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe7c>
    5670:	ldp	x1, x5, [x29, #112]
    5674:	mov	x0, x21
    5678:	ldp	x2, x3, [x29, #128]
    567c:	ldr	w4, [x29, #152]
    5680:	bl	5c40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x330>
    5684:	b	5430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1000>
    5688:	ldr	x1, [x29, #104]
    568c:	add	x0, x1, x28
    5690:	add	x0, x0, #0xef
    5694:	and	x0, x0, #0xfffffffffffffff0
    5698:	sub	sp, sp, x0
    569c:	mov	x21, sp
    56a0:	add	x0, x21, #0xc0
    56a4:	str	x0, [x29, #160]
    56a8:	add	x0, x0, x28
    56ac:	str	x0, [x29, #112]
    56b0:	mov	x27, x0
    56b4:	cbnz	x1, 537c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf4c>
    56b8:	str	xzr, [x29, #144]
    56bc:	b	52a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe70>
    56c0:	add	x1, x28, #0xef
    56c4:	ldr	w2, [x29, #152]
    56c8:	and	x1, x1, #0x1fffffff0
    56cc:	ldr	w0, [x24, #4]
    56d0:	sub	sp, sp, x1
    56d4:	and	w2, w2, #0x80
    56d8:	mov	x21, sp
    56dc:	str	xzr, [x29, #144]
    56e0:	add	x1, x21, #0xc0
    56e4:	str	w2, [x29, #152]
    56e8:	str	x1, [x29, #160]
    56ec:	add	x1, x1, x28
    56f0:	str	x1, [x29, #112]
    56f4:	cmp	w0, #0x0
    56f8:	b.gt	52ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe7c>
    56fc:	ldp	x1, x5, [x29, #112]
    5700:	mov	x0, x21
    5704:	ldr	w4, [x29, #152]
    5708:	mov	x3, #0x0                   	// #0
    570c:	ldr	x2, [x29, #128]
    5710:	bl	5c40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x330>
    5714:	b	5430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1000>
    5718:	stp	x29, x30, [sp, #-16]!
    571c:	mov	x14, x0
    5720:	mov	x29, sp
    5724:	ldr	x10, [x0, #16]
    5728:	ldr	w15, [x0, #24]
    572c:	ldrh	w1, [x10, #10]
    5730:	cmp	w1, #0x8
    5734:	b.eq	584c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x141c>  // b.none
    5738:	b.hi	57a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1378>  // b.pmore
    573c:	cmp	w1, #0x5
    5740:	b.eq	5844 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1414>  // b.none
    5744:	b.ls	57d0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a0>  // b.plast
    5748:	cmp	w1, #0x6
    574c:	mov	w11, #0x16                  	// #22
    5750:	mov	w0, #0x1a                  	// #26
    5754:	csel	w11, w11, w0, ne  // ne = any
    5758:	ldr	w12, [x14, #4]
    575c:	cmp	w12, #0x0
    5760:	b.le	578c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x135c>
    5764:	mov	x10, #0x0                   	// #0
    5768:	ldr	x13, [x14, #8]
    576c:	b	577c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x134c>
    5770:	add	x10, x10, #0x1
    5774:	cmp	w12, w10
    5778:	b.le	578c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x135c>
    577c:	ldr	x0, [x13, x10, lsl #3]
    5780:	bl	50b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc80>
    5784:	cbz	w0, 5770 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1340>
    5788:	orr	w11, w11, #0x80
    578c:	sub	w1, w15, #0x1
    5790:	mov	w0, #0x0                   	// #0
    5794:	orr	w1, w1, #0xf
    5798:	add	w1, w1, #0x1
    579c:	stp	w1, w11, [x14, #24]
    57a0:	ldp	x29, x30, [sp], #16
    57a4:	ret
    57a8:	cmp	w1, #0xc
    57ac:	b.hi	5828 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13f8>  // b.pmore
    57b0:	cmp	w1, #0xa
    57b4:	mov	w11, #0x1                   	// #1
    57b8:	b.hi	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>  // b.pmore
    57bc:	cmp	w1, #0x9
    57c0:	mov	w11, #0x1e                  	// #30
    57c4:	mov	w0, #0x18                  	// #24
    57c8:	csel	w11, w11, w0, ne  // ne = any
    57cc:	b	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>
    57d0:	mov	w11, #0x0                   	// #0
    57d4:	cbz	w1, 5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>
    57d8:	cmp	w1, #0x1
    57dc:	mov	w11, #0x1e                  	// #30
    57e0:	b.eq	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>  // b.none
    57e4:	sub	w1, w1, #0x2
    57e8:	and	w1, w1, #0xffff
    57ec:	cmp	w1, #0x2
    57f0:	b.hi	5840 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1410>  // b.pmore
    57f4:	mov	x0, x10
    57f8:	bl	50b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc80>
    57fc:	mov	w11, w0
    5800:	cbnz	w0, 5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>
    5804:	ldr	x0, [x10]
    5808:	cmp	x0, #0x10
    580c:	b.hi	5854 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1424>  // b.pmore
    5810:	mov	w11, #0x2                   	// #2
    5814:	b.eq	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>  // b.none
    5818:	cmp	x0, #0x8
    581c:	mov	w11, #0x42                  	// #66
    5820:	csinc	w11, w11, wzr, ne  // ne = any
    5824:	b	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>
    5828:	cmp	w1, #0xe
    582c:	mov	w11, #0x1                   	// #1
    5830:	b.eq	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>  // b.none
    5834:	and	w1, w1, #0xfffffffd
    5838:	cmp	w1, #0xd
    583c:	b.eq	57f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13c4>  // b.none
    5840:	bl	1ae0 <abort@plt>
    5844:	mov	w11, #0x14                  	// #20
    5848:	b	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>
    584c:	mov	w11, #0x1c                  	// #28
    5850:	b	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>
    5854:	add	w15, w15, #0x8
    5858:	mov	w11, #0x20                  	// #32
    585c:	b	5758 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1328>

0000000000005860 <ffi_call@@LIBFFI_BASE_7.0>:
    5860:	mov	x4, #0x0                   	// #0
    5864:	b	5230 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe00>

0000000000005868 <ffi_call_go@@LIBFFI_GO_CLOSURE_7.0>:
    5868:	b	5230 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe00>
    586c:	nop

0000000000005870 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0>:
    5870:	stp	x29, x30, [sp, #-48]!
    5874:	mov	x29, sp
    5878:	stp	x19, x20, [sp, #16]
    587c:	mov	x20, x1
    5880:	ldr	w1, [x1]
    5884:	cmp	w1, #0x1
    5888:	b.ne	5900 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0+0x90>  // b.any
    588c:	stp	x21, x22, [sp, #32]
    5890:	mov	x22, x2
    5894:	mov	x21, x3
    5898:	adrp	x2, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f0>
    589c:	ldr	w3, [x20, #28]
    58a0:	add	x2, x2, #0x1f0
    58a4:	adrp	x5, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd0>
    58a8:	adrp	x4, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd0>
    58ac:	add	x5, x5, #0xdd0
    58b0:	tst	x3, #0x80
    58b4:	add	x4, x4, #0xdb0
    58b8:	ldp	x2, x3, [x2]
    58bc:	csel	x4, x4, x5, ne  // ne = any
    58c0:	mov	x19, x0
    58c4:	add	x1, x0, #0x18
    58c8:	stp	x2, x3, [x0]
    58cc:	str	x4, [x0, #16]
    58d0:	bl	5f68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x658>
    58d4:	mov	x0, x19
    58d8:	bl	43e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1570>
    58dc:	add	x1, x0, #0x18
    58e0:	bl	5f68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x658>
    58e4:	stp	x20, x22, [x19, #24]
    58e8:	mov	w0, #0x0                   	// #0
    58ec:	str	x21, [x19, #40]
    58f0:	ldp	x19, x20, [sp, #16]
    58f4:	ldp	x21, x22, [sp, #32]
    58f8:	ldp	x29, x30, [sp], #48
    58fc:	ret
    5900:	mov	w0, #0x2                   	// #2
    5904:	ldp	x19, x20, [sp, #16]
    5908:	ldp	x29, x30, [sp], #48
    590c:	ret

0000000000005910 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0>:
    5910:	mov	x3, x0
    5914:	ldr	w0, [x1]
    5918:	cmp	w0, #0x1
    591c:	b.ne	594c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c>  // b.any
    5920:	ldr	w6, [x1, #28]
    5924:	adrp	x5, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd0>
    5928:	adrp	x4, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd0>
    592c:	add	x5, x5, #0xf40
    5930:	add	x4, x4, #0xf20
    5934:	mov	w0, #0x0                   	// #0
    5938:	tst	x6, #0x80
    593c:	stp	x1, x2, [x3, #8]
    5940:	csel	x1, x4, x5, ne  // ne = any
    5944:	str	x1, [x3]
    5948:	ret
    594c:	mov	w0, #0x2                   	// #2
    5950:	ret
    5954:	nop
    5958:	stp	x29, x30, [sp, #-112]!
    595c:	mov	x13, x5
    5960:	mov	x29, sp
    5964:	stp	x23, x24, [sp, #48]
    5968:	mov	x23, x0
    596c:	ldr	w0, [x0, #4]
    5970:	stp	x6, x1, [x29, #96]
    5974:	cmp	w0, #0x0
    5978:	ubfiz	x1, x0, #3, #32
    597c:	stp	x19, x20, [sp, #16]
    5980:	add	x1, x1, #0xf
    5984:	and	x1, x1, #0xffffffff0
    5988:	stp	x21, x22, [sp, #32]
    598c:	mov	x19, x2
    5990:	stp	x25, x26, [sp, #64]
    5994:	stp	x27, x28, [sp, #80]
    5998:	sub	sp, sp, x1
    599c:	mov	x28, sp
    59a0:	b.le	5a38 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x128>
    59a4:	sub	w24, w0, #0x1
    59a8:	mov	x14, x3
    59ac:	add	x24, x24, #0x1
    59b0:	mov	x12, x4
    59b4:	mov	x10, #0x0                   	// #0
    59b8:	mov	x20, #0x0                   	// #0
    59bc:	lsl	x24, x24, #3
    59c0:	mov	w15, #0x0                   	// #0
    59c4:	mov	w25, #0x0                   	// #0
    59c8:	mov	x18, #0x1                   	// #1
    59cc:	mov	x27, #0x5fe2                	// #24546
    59d0:	mov	x21, #0x8                   	// #8
    59d4:	mov	x26, #0xa01c                	// #40988
    59d8:	ldr	x0, [x23, #8]
    59dc:	ldr	x11, [x0, x10]
    59e0:	ldrh	w7, [x11, #10]
    59e4:	ldr	x22, [x11]
    59e8:	cmp	w7, #0xf
    59ec:	b.hi	5ae4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d4>  // b.pmore
    59f0:	lsl	x7, x18, x7
    59f4:	tst	x7, x27
    59f8:	b.eq	5a80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x170>  // b.none
    59fc:	cmp	w25, #0x7
    5a00:	b.ls	5b1c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x20c>  // b.plast
    5a04:	cmp	x22, #0x8
    5a08:	sub	x3, x20, #0x1
    5a0c:	csel	x7, x22, x21, cs  // cs = hs, nlast
    5a10:	mov	w25, #0x8                   	// #8
    5a14:	sub	x7, x7, #0x1
    5a18:	orr	x7, x7, x3
    5a1c:	add	x7, x7, #0x1
    5a20:	add	x20, x22, x7
    5a24:	add	x7, x12, x7
    5a28:	str	x7, [x28, x10]
    5a2c:	add	x10, x10, #0x8
    5a30:	cmp	x24, x10
    5a34:	b.ne	59d8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xc8>  // b.any
    5a38:	ldp	x0, x4, [x29, #96]
    5a3c:	mov	x3, x19
    5a40:	ldr	w21, [x23, #28]
    5a44:	mov	x2, x28
    5a48:	tst	x21, #0x20
    5a4c:	csel	x13, x13, x0, eq  // eq = none
    5a50:	mov	x0, x23
    5a54:	mov	x1, x13
    5a58:	blr	x4
    5a5c:	mov	sp, x29
    5a60:	mov	w0, w21
    5a64:	ldp	x19, x20, [sp, #16]
    5a68:	ldp	x21, x22, [sp, #32]
    5a6c:	ldp	x23, x24, [sp, #48]
    5a70:	ldp	x25, x26, [sp, #64]
    5a74:	ldp	x27, x28, [sp, #80]
    5a78:	ldp	x29, x30, [sp], #112
    5a7c:	ret
    5a80:	tst	x7, x26
    5a84:	b.eq	5ae0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d0>  // b.none
    5a88:	mov	x0, x11
    5a8c:	bl	50b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc80>
    5a90:	cbz	w0, 5ae8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d8>
    5a94:	and	w4, w0, #0x3
    5a98:	mov	w1, #0x4                   	// #4
    5a9c:	sub	w4, w1, w4
    5aa0:	mov	w5, w15
    5aa4:	add	x6, x5, w4, sxtw
    5aa8:	cmp	x6, #0x8
    5aac:	b.ls	5b80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x270>  // b.plast
    5ab0:	ldrh	w0, [x11, #8]
    5ab4:	sub	x3, x20, #0x1
    5ab8:	mov	w15, #0x8                   	// #8
    5abc:	cmp	x0, #0x8
    5ac0:	csel	x0, x0, x21, cs  // cs = hs, nlast
    5ac4:	sub	x0, x0, #0x1
    5ac8:	orr	x0, x0, x3
    5acc:	add	x0, x0, #0x1
    5ad0:	add	x20, x22, x0
    5ad4:	add	x0, x12, x0
    5ad8:	str	x0, [x28, x10]
    5adc:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5ae0:	tbnz	w7, #0, 5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5ae4:	bl	1ae0 <abort@plt>
    5ae8:	cmp	x22, #0x10
    5aec:	b.ls	5b30 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x220>  // b.plast
    5af0:	cmp	w25, #0x7
    5af4:	b.ls	5b6c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x25c>  // b.plast
    5af8:	sub	x3, x20, #0x1
    5afc:	mov	w25, #0x8                   	// #8
    5b00:	orr	x3, x3, #0x7
    5b04:	add	x0, x3, #0x1
    5b08:	add	x20, x3, #0x9
    5b0c:	add	x0, x12, x0
    5b10:	ldr	x0, [x0]
    5b14:	str	x0, [x28, x10]
    5b18:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5b1c:	ubfiz	x1, x25, #3, #32
    5b20:	add	w25, w25, #0x1
    5b24:	add	x1, x1, #0x80
    5b28:	add	x7, x14, x1
    5b2c:	b	5a28 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x118>
    5b30:	add	x0, x22, #0x7
    5b34:	mov	w4, w25
    5b38:	lsr	x0, x0, #3
    5b3c:	add	x5, x4, x0
    5b40:	cmp	x5, #0x8
    5b44:	b.hi	5b5c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x24c>  // b.pmore
    5b48:	add	x4, x4, #0x10
    5b4c:	add	w25, w25, w0
    5b50:	add	x4, x14, x4, lsl #3
    5b54:	str	x4, [x28, x10]
    5b58:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5b5c:	ldrh	w0, [x11, #8]
    5b60:	sub	x3, x20, #0x1
    5b64:	mov	w25, #0x8                   	// #8
    5b68:	b	5abc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1ac>
    5b6c:	ubfiz	x0, x25, #3, #32
    5b70:	add	w25, w25, #0x1
    5b74:	add	x0, x0, #0x80
    5b78:	add	x0, x14, x0
    5b7c:	b	5b10 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x200>
    5b80:	add	x5, x14, x5, lsl #4
    5b84:	add	w15, w15, w4
    5b88:	cmp	w0, #0xc
    5b8c:	b.eq	5bfc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2ec>  // b.none
    5b90:	b.gt	5bb4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2a4>
    5b94:	cmp	w0, #0x9
    5b98:	b.eq	5c10 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x300>  // b.none
    5b9c:	cmp	w0, #0xa
    5ba0:	b.eq	5c24 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x314>  // b.none
    5ba4:	cmp	w0, #0x8
    5ba8:	b.eq	5bd4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2c4>  // b.none
    5bac:	str	x5, [x28, x10]
    5bb0:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5bb4:	cmp	w0, #0xd
    5bb8:	b.eq	5be8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2d8>  // b.none
    5bbc:	cmp	w0, #0xe
    5bc0:	b.ne	5bac <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x29c>  // b.any
    5bc4:	ldp	q16, q17, [x5]
    5bc8:	st2	{v16.d, v17.d}[0], [x5]
    5bcc:	str	x5, [x28, x10]
    5bd0:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5bd4:	ldp	q16, q17, [x5]
    5bd8:	ldp	q18, q19, [x5, #32]
    5bdc:	st4	{v16.s-v19.s}[0], [x5]
    5be0:	str	x5, [x28, x10]
    5be4:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5be8:	ldp	q16, q17, [x5]
    5bec:	ldr	q18, [x5, #32]
    5bf0:	st3	{v16.d-v18.d}[0], [x5]
    5bf4:	str	x5, [x28, x10]
    5bf8:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5bfc:	ldp	q16, q17, [x5]
    5c00:	ldp	q18, q19, [x5, #32]
    5c04:	st4	{v16.d-v19.d}[0], [x5]
    5c08:	str	x5, [x28, x10]
    5c0c:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5c10:	ldp	q16, q17, [x5]
    5c14:	ldr	q18, [x5, #32]
    5c18:	st3	{v16.s-v18.s}[0], [x5]
    5c1c:	str	x5, [x28, x10]
    5c20:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5c24:	ldp	q16, q17, [x5]
    5c28:	st2	{v16.s, v17.s}[0], [x5]
    5c2c:	str	x5, [x28, x10]
    5c30:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    5c34:	nop
    5c38:	nop
    5c3c:	nop
    5c40:	stp	x29, x30, [x1]
    5c44:	mov	x29, x1
    5c48:	mov	sp, x0
    5c4c:	mov	x9, x2
    5c50:	mov	x8, x3
    5c54:	mov	x18, x5
    5c58:	stp	x3, x4, [x29, #16]
    5c5c:	tbz	w4, #7, 5c70 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x360>
    5c60:	ldp	q0, q1, [sp]
    5c64:	ldp	q2, q3, [sp, #32]
    5c68:	ldp	q4, q5, [sp, #64]
    5c6c:	ldp	q6, q7, [sp, #96]
    5c70:	ldp	x0, x1, [sp, #128]
    5c74:	ldp	x2, x3, [sp, #144]
    5c78:	ldp	x4, x5, [sp, #160]
    5c7c:	ldp	x6, x7, [sp, #176]
    5c80:	add	sp, sp, #0xc0
    5c84:	blr	x9
    5c88:	ldp	x3, x4, [x29, #16]
    5c8c:	mov	sp, x29
    5c90:	ldp	x29, x30, [x29]
    5c94:	adr	x5, 5cb0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3a0>
    5c98:	and	w4, w4, #0x1f
    5c9c:	add	x5, x5, x4, lsl #3
    5ca0:	br	x5
    5ca4:	nop
    5ca8:	nop
    5cac:	nop
    5cb0:	ret
    5cb4:	nop
    5cb8:	str	x0, [x3]
    5cbc:	ret
    5cc0:	stp	x0, x1, [x3]
    5cc4:	ret
    5cc8:	brk	#0x3e8
    5ccc:	ret
    5cd0:	brk	#0x3e8
    5cd4:	ret
    5cd8:	brk	#0x3e8
    5cdc:	ret
    5ce0:	brk	#0x3e8
    5ce4:	ret
    5ce8:	brk	#0x3e8
    5cec:	ret
    5cf0:	st4	{v0.s-v3.s}[0], [x3]
    5cf4:	ret
    5cf8:	st3	{v0.s-v2.s}[0], [x3]
    5cfc:	ret
    5d00:	stp	s0, s1, [x3]
    5d04:	ret
    5d08:	str	s0, [x3]
    5d0c:	ret
    5d10:	st4	{v0.d-v3.d}[0], [x3]
    5d14:	ret
    5d18:	st3	{v0.d-v2.d}[0], [x3]
    5d1c:	ret
    5d20:	stp	d0, d1, [x3]
    5d24:	ret
    5d28:	str	d0, [x3]
    5d2c:	ret
    5d30:	str	q3, [x3, #48]
    5d34:	nop
    5d38:	str	q2, [x3, #32]
    5d3c:	nop
    5d40:	stp	q0, q1, [x3]
    5d44:	ret
    5d48:	str	q0, [x3]
    5d4c:	ret
    5d50:	uxtb	w0, w0
    5d54:	str	x0, [x3]
    5d58:	ret
    5d5c:	nop
    5d60:	uxth	w0, w0
    5d64:	str	x0, [x3]
    5d68:	ret
    5d6c:	nop
    5d70:	mov	w0, w0
    5d74:	str	x0, [x3]
    5d78:	ret
    5d7c:	nop
    5d80:	sxtb	x0, w0
    5d84:	str	x0, [x3]
    5d88:	ret
    5d8c:	nop
    5d90:	sxth	x0, w0
    5d94:	str	x0, [x3]
    5d98:	ret
    5d9c:	nop
    5da0:	sxtw	x0, w0
    5da4:	str	x0, [x3]
    5da8:	ret
    5dac:	nop
    5db0:	stp	x29, x30, [sp, #-272]!
    5db4:	stp	q0, q1, [sp, #16]
    5db8:	stp	q2, q3, [sp, #48]
    5dbc:	stp	q4, q5, [sp, #80]
    5dc0:	stp	q6, q7, [sp, #112]
    5dc4:	b	5dd4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x4c4>
    5dc8:	nop
    5dcc:	nop
    5dd0:	stp	x29, x30, [sp, #-272]!
    5dd4:	mov	x29, sp
    5dd8:	stp	x0, x1, [sp, #144]
    5ddc:	stp	x2, x3, [sp, #160]
    5de0:	stp	x4, x5, [sp, #176]
    5de4:	stp	x6, x7, [sp, #192]
    5de8:	ldp	x0, x1, [x17, #24]
    5dec:	ldr	x2, [x17, #40]
    5df0:	add	x3, sp, #0x10
    5df4:	add	x4, sp, #0x110
    5df8:	add	x5, sp, #0xd0
    5dfc:	mov	x6, x8
    5e00:	bl	5958 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x48>
    5e04:	adr	x1, 5e20 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x510>
    5e08:	and	w0, w0, #0x1f
    5e0c:	add	x1, x1, x0, lsl #3
    5e10:	add	x3, sp, #0xd0
    5e14:	br	x1
    5e18:	nop
    5e1c:	nop
    5e20:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5e24:	nop
    5e28:	ldr	x0, [x3]
    5e2c:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5e30:	ldp	x0, x1, [x3]
    5e34:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5e38:	brk	#0x3e8
    5e3c:	nop
    5e40:	brk	#0x3e8
    5e44:	nop
    5e48:	brk	#0x3e8
    5e4c:	nop
    5e50:	brk	#0x3e8
    5e54:	nop
    5e58:	brk	#0x3e8
    5e5c:	nop
    5e60:	ldr	s3, [x3, #12]
    5e64:	nop
    5e68:	ldr	s2, [x3, #8]
    5e6c:	nop
    5e70:	ldp	s0, s1, [x3]
    5e74:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5e78:	ldr	s0, [x3]
    5e7c:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5e80:	ldr	d3, [x3, #24]
    5e84:	nop
    5e88:	ldr	d2, [x3, #16]
    5e8c:	nop
    5e90:	ldp	d0, d1, [x3]
    5e94:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5e98:	ldr	d0, [x3]
    5e9c:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5ea0:	ldr	q3, [x3, #48]
    5ea4:	nop
    5ea8:	ldr	q2, [x3, #32]
    5eac:	nop
    5eb0:	ldp	q0, q1, [x3]
    5eb4:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5eb8:	ldr	q0, [x3]
    5ebc:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5ec0:	ldrb	w0, [x3]
    5ec4:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5ec8:	brk	#0x3e8
    5ecc:	nop
    5ed0:	ldrh	w0, [x3]
    5ed4:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5ed8:	brk	#0x3e8
    5edc:	nop
    5ee0:	ldr	w0, [x3]
    5ee4:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5ee8:	brk	#0x3e8
    5eec:	nop
    5ef0:	ldrsb	x0, [x3]
    5ef4:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5ef8:	brk	#0x3e8
    5efc:	nop
    5f00:	ldrsh	x0, [x3]
    5f04:	b	5f18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x608>
    5f08:	brk	#0x3e8
    5f0c:	nop
    5f10:	ldrsw	x0, [x3]
    5f14:	nop
    5f18:	ldp	x29, x30, [sp], #272
    5f1c:	ret
    5f20:	stp	x29, x30, [sp, #-272]!
    5f24:	stp	q0, q1, [sp, #16]
    5f28:	stp	q2, q3, [sp, #48]
    5f2c:	stp	q4, q5, [sp, #80]
    5f30:	stp	q6, q7, [sp, #112]
    5f34:	b	5f44 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x634>
    5f38:	nop
    5f3c:	nop
    5f40:	stp	x29, x30, [sp, #-272]!
    5f44:	mov	x29, sp
    5f48:	stp	x0, x1, [sp, #144]
    5f4c:	stp	x2, x3, [sp, #160]
    5f50:	stp	x4, x5, [sp, #176]
    5f54:	stp	x6, x7, [sp, #192]
    5f58:	ldp	x0, x1, [x18, #8]
    5f5c:	mov	x2, x18
    5f60:	b	5df0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x4e0>
    5f64:	nop
    5f68:	b	5f70 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x660>
    5f6c:	nop
    5f70:	adrp	x3, 17000 <memcpy@GLIBC_2.17>
    5f74:	ldr	w2, [x3, #1544]
    5f78:	cbnz	w2, 5f88 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x678>
    5f7c:	mrs	x4, ctr_el0
    5f80:	mov	w2, w4
    5f84:	str	w4, [x3, #1544]
    5f88:	ubfx	x4, x2, #16, #4
    5f8c:	mov	w3, #0x4                   	// #4
    5f90:	and	w5, w2, #0xf
    5f94:	lsl	w4, w3, w4
    5f98:	sub	w2, w4, #0x1
    5f9c:	bic	x2, x0, x2
    5fa0:	sxtw	x4, w4
    5fa4:	cmp	x2, x1
    5fa8:	lsl	w3, w3, w5
    5fac:	b.cs	5fc0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6b0>  // b.hs, b.nlast
    5fb0:	dc	cvau, x2
    5fb4:	add	x2, x2, x4
    5fb8:	cmp	x1, x2
    5fbc:	b.hi	5fb0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a0>  // b.pmore
    5fc0:	dsb	ish
    5fc4:	sub	w2, w3, #0x1
    5fc8:	sxtw	x3, w3
    5fcc:	bic	x0, x0, x2
    5fd0:	cmp	x1, x0
    5fd4:	b.ls	5fe8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6d8>  // b.plast
    5fd8:	ic	ivau, x0
    5fdc:	add	x0, x0, x3
    5fe0:	cmp	x1, x0
    5fe4:	b.hi	5fd8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6c8>  // b.pmore
    5fe8:	dsb	ish
    5fec:	isb
    5ff0:	ret

Disassembly of section .fini:

0000000000005ff4 <.fini>:
    5ff4:	stp	x29, x30, [sp, #-16]!
    5ff8:	mov	x29, sp
    5ffc:	ldp	x29, x30, [sp], #16
    6000:	ret
