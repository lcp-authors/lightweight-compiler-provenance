
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//bswap_test.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes16>:
   0:	sub	sp, sp, #0x10
   4:	strh	w0, [sp, #14]
   8:	ldrh	w0, [sp, #14]
   c:	lsl	w0, w0, #8
  10:	sxth	w1, w0
  14:	ldrh	w0, [sp, #14]
  18:	lsr	w0, w0, #8
  1c:	and	w0, w0, #0xffff
  20:	sxth	w0, w0
  24:	orr	w0, w1, w0
  28:	sxth	w0, w0
  2c:	and	w0, w0, #0xffff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <grub_swap_bytes32>:
  38:	sub	sp, sp, #0x10
  3c:	str	w0, [sp, #12]
  40:	ldr	w0, [sp, #12]
  44:	rev	w0, w0
  48:	add	sp, sp, #0x10
  4c:	ret

0000000000000050 <grub_swap_bytes64>:
  50:	sub	sp, sp, #0x10
  54:	str	x0, [sp, #8]
  58:	ldr	x0, [sp, #8]
  5c:	rev	x0, x0
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <test16>:
  68:	sub	sp, sp, #0x50
  6c:	stp	x29, x30, [sp, #16]
  70:	add	x29, sp, #0x10
  74:	strh	w0, [sp, #46]
  78:	ldrh	w0, [sp, #46]
  7c:	bl	0 <grub_swap_bytes16>
  80:	and	w0, w0, #0xffff
  84:	strh	w0, [sp, #54]
  88:	ldrh	w0, [sp, #54]
  8c:	bl	0 <grub_swap_bytes16>
  90:	strh	w0, [sp, #74]
  94:	ldrh	w0, [sp, #46]
  98:	ldrh	w1, [sp, #74]
  9c:	cmp	w1, w0
  a0:	cset	w0, eq  // eq = none
  a4:	and	w0, w0, #0xff
  a8:	mov	w8, w0
  ac:	ldrh	w0, [sp, #46]
  b0:	and	x1, x0, #0xffff
  b4:	ldrh	w0, [sp, #54]
  b8:	and	x2, x0, #0xffff
  bc:	ldrh	w0, [sp, #74]
  c0:	str	x0, [sp]
  c4:	mov	x7, x2
  c8:	mov	x6, x1
  cc:	adrp	x0, 0 <grub_swap_bytes16>
  d0:	add	x0, x0, #0x0
  d4:	ldr	x5, [x0]
  d8:	adrp	x0, 0 <grub_swap_bytes16>
  dc:	add	x0, x0, #0x0
  e0:	ldr	x4, [x0]
  e4:	mov	w3, #0x25                  	// #37
  e8:	adrp	x0, 0 <grub_swap_bytes16>
  ec:	add	x0, x0, #0x0
  f0:	ldr	x2, [x0]
  f4:	adrp	x0, 0 <grub_swap_bytes16>
  f8:	add	x0, x0, #0x0
  fc:	ldr	x1, [x0]
 100:	mov	w0, w8
 104:	bl	0 <grub_test_assert_helper>
 108:	add	x0, sp, #0x2e
 10c:	str	x0, [sp, #64]
 110:	add	x0, sp, #0x36
 114:	str	x0, [sp, #56]
 118:	str	wzr, [sp, #76]
 11c:	b	1bc <test16+0x154>
 120:	ldrsw	x0, [sp, #76]
 124:	ldr	x1, [sp, #64]
 128:	add	x0, x1, x0
 12c:	ldrb	w1, [x0]
 130:	mov	w2, #0x1                   	// #1
 134:	ldr	w0, [sp, #76]
 138:	sub	w0, w2, w0
 13c:	sxtw	x0, w0
 140:	ldr	x2, [sp, #56]
 144:	add	x0, x2, x0
 148:	ldrb	w0, [x0]
 14c:	cmp	w1, w0
 150:	cset	w0, eq  // eq = none
 154:	and	w0, w0, #0xff
 158:	mov	w8, w0
 15c:	ldrh	w0, [sp, #46]
 160:	and	x0, x0, #0xffff
 164:	ldrh	w1, [sp, #54]
 168:	and	x1, x1, #0xffff
 16c:	mov	x7, x1
 170:	mov	x6, x0
 174:	adrp	x0, 0 <grub_swap_bytes16>
 178:	add	x0, x0, #0x0
 17c:	ldr	x5, [x0]
 180:	adrp	x0, 0 <grub_swap_bytes16>
 184:	add	x0, x0, #0x0
 188:	ldr	x4, [x0]
 18c:	mov	w3, #0x2b                  	// #43
 190:	adrp	x0, 0 <grub_swap_bytes16>
 194:	add	x0, x0, #0x0
 198:	ldr	x2, [x0]
 19c:	adrp	x0, 0 <grub_swap_bytes16>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	x1, [x0]
 1a8:	mov	w0, w8
 1ac:	bl	0 <grub_test_assert_helper>
 1b0:	ldr	w0, [sp, #76]
 1b4:	add	w0, w0, #0x1
 1b8:	str	w0, [sp, #76]
 1bc:	ldr	w0, [sp, #76]
 1c0:	cmp	w0, #0x1
 1c4:	b.le	120 <test16+0xb8>
 1c8:	nop
 1cc:	nop
 1d0:	ldp	x29, x30, [sp, #16]
 1d4:	add	sp, sp, #0x50
 1d8:	ret
 1dc:	nop
	...

0000000000000210 <test32>:
 210:	sub	sp, sp, #0x50
 214:	stp	x29, x30, [sp, #16]
 218:	add	x29, sp, #0x10
 21c:	str	w0, [sp, #44]
 220:	ldr	w0, [sp, #44]
 224:	bl	38 <grub_swap_bytes32>
 228:	str	w0, [sp, #52]
 22c:	ldr	w0, [sp, #52]
 230:	bl	38 <grub_swap_bytes32>
 234:	str	w0, [sp, #72]
 238:	ldr	w0, [sp, #44]
 23c:	ldr	w1, [sp, #72]
 240:	cmp	w1, w0
 244:	cset	w0, eq  // eq = none
 248:	and	w0, w0, #0xff
 24c:	mov	w8, w0
 250:	ldr	w0, [sp, #44]
 254:	mov	w1, w0
 258:	ldr	w0, [sp, #52]
 25c:	mov	w2, w0
 260:	ldr	w0, [sp, #72]
 264:	str	x0, [sp]
 268:	mov	x7, x2
 26c:	mov	x6, x1
 270:	adrp	x0, 0 <grub_swap_bytes16>
 274:	add	x0, x0, #0x0
 278:	ldr	x5, [x0]
 27c:	adrp	x0, 0 <grub_swap_bytes16>
 280:	add	x0, x0, #0x0
 284:	ldr	x4, [x0]
 288:	mov	w3, #0x39                  	// #57
 28c:	adrp	x0, 0 <grub_swap_bytes16>
 290:	add	x0, x0, #0x0
 294:	ldr	x2, [x0]
 298:	adrp	x0, 0 <grub_swap_bytes16>
 29c:	add	x0, x0, #0x0
 2a0:	ldr	x1, [x0]
 2a4:	mov	w0, w8
 2a8:	bl	0 <grub_test_assert_helper>
 2ac:	add	x0, sp, #0x2c
 2b0:	str	x0, [sp, #64]
 2b4:	add	x0, sp, #0x34
 2b8:	str	x0, [sp, #56]
 2bc:	str	wzr, [sp, #76]
 2c0:	b	360 <test32+0x150>
 2c4:	ldrsw	x0, [sp, #76]
 2c8:	ldr	x1, [sp, #64]
 2cc:	add	x0, x1, x0
 2d0:	ldrb	w1, [x0]
 2d4:	mov	w2, #0x3                   	// #3
 2d8:	ldr	w0, [sp, #76]
 2dc:	sub	w0, w2, w0
 2e0:	sxtw	x0, w0
 2e4:	ldr	x2, [sp, #56]
 2e8:	add	x0, x2, x0
 2ec:	ldrb	w0, [x0]
 2f0:	cmp	w1, w0
 2f4:	cset	w0, eq  // eq = none
 2f8:	and	w0, w0, #0xff
 2fc:	mov	w8, w0
 300:	ldr	w0, [sp, #44]
 304:	mov	w0, w0
 308:	ldr	w1, [sp, #52]
 30c:	mov	w1, w1
 310:	mov	x7, x1
 314:	mov	x6, x0
 318:	adrp	x0, 0 <grub_swap_bytes16>
 31c:	add	x0, x0, #0x0
 320:	ldr	x5, [x0]
 324:	adrp	x0, 0 <grub_swap_bytes16>
 328:	add	x0, x0, #0x0
 32c:	ldr	x4, [x0]
 330:	mov	w3, #0x3f                  	// #63
 334:	adrp	x0, 0 <grub_swap_bytes16>
 338:	add	x0, x0, #0x0
 33c:	ldr	x2, [x0]
 340:	adrp	x0, 0 <grub_swap_bytes16>
 344:	add	x0, x0, #0x0
 348:	ldr	x1, [x0]
 34c:	mov	w0, w8
 350:	bl	0 <grub_test_assert_helper>
 354:	ldr	w0, [sp, #76]
 358:	add	w0, w0, #0x1
 35c:	str	w0, [sp, #76]
 360:	ldr	w0, [sp, #76]
 364:	cmp	w0, #0x3
 368:	b.le	2c4 <test32+0xb4>
 36c:	nop
 370:	nop
 374:	ldp	x29, x30, [sp, #16]
 378:	add	sp, sp, #0x50
 37c:	ret
	...

00000000000003b0 <test64>:
 3b0:	sub	sp, sp, #0x60
 3b4:	stp	x29, x30, [sp, #16]
 3b8:	add	x29, sp, #0x10
 3bc:	str	x0, [sp, #40]
 3c0:	ldr	x0, [sp, #40]
 3c4:	bl	50 <grub_swap_bytes64>
 3c8:	str	x0, [sp, #56]
 3cc:	ldr	x0, [sp, #56]
 3d0:	bl	50 <grub_swap_bytes64>
 3d4:	str	x0, [sp, #80]
 3d8:	ldr	x0, [sp, #40]
 3dc:	ldr	x1, [sp, #80]
 3e0:	cmp	x1, x0
 3e4:	cset	w0, eq  // eq = none
 3e8:	and	w0, w0, #0xff
 3ec:	mov	w8, w0
 3f0:	ldr	x0, [sp, #40]
 3f4:	mov	x1, x0
 3f8:	ldr	x0, [sp, #56]
 3fc:	mov	x2, x0
 400:	ldr	x0, [sp, #80]
 404:	str	x0, [sp]
 408:	mov	x7, x2
 40c:	mov	x6, x1
 410:	adrp	x0, 0 <grub_swap_bytes16>
 414:	add	x0, x0, #0x0
 418:	ldr	x5, [x0]
 41c:	adrp	x0, 0 <grub_swap_bytes16>
 420:	add	x0, x0, #0x0
 424:	ldr	x4, [x0]
 428:	mov	w3, #0x4d                  	// #77
 42c:	adrp	x0, 0 <grub_swap_bytes16>
 430:	add	x0, x0, #0x0
 434:	ldr	x2, [x0]
 438:	adrp	x0, 0 <grub_swap_bytes16>
 43c:	add	x0, x0, #0x0
 440:	ldr	x1, [x0]
 444:	mov	w0, w8
 448:	bl	0 <grub_test_assert_helper>
 44c:	add	x0, sp, #0x28
 450:	str	x0, [sp, #72]
 454:	add	x0, sp, #0x38
 458:	str	x0, [sp, #64]
 45c:	str	wzr, [sp, #92]
 460:	b	4fc <test64+0x14c>
 464:	ldrsw	x0, [sp, #92]
 468:	ldr	x1, [sp, #72]
 46c:	add	x0, x1, x0
 470:	ldrb	w1, [x0]
 474:	mov	w2, #0x7                   	// #7
 478:	ldr	w0, [sp, #92]
 47c:	sub	w0, w2, w0
 480:	sxtw	x0, w0
 484:	ldr	x2, [sp, #64]
 488:	add	x0, x2, x0
 48c:	ldrb	w0, [x0]
 490:	cmp	w1, w0
 494:	cset	w0, eq  // eq = none
 498:	and	w0, w0, #0xff
 49c:	mov	w8, w0
 4a0:	ldr	x0, [sp, #40]
 4a4:	mov	x1, x0
 4a8:	ldr	x0, [sp, #56]
 4ac:	mov	x7, x0
 4b0:	mov	x6, x1
 4b4:	adrp	x0, 0 <grub_swap_bytes16>
 4b8:	add	x0, x0, #0x0
 4bc:	ldr	x5, [x0]
 4c0:	adrp	x0, 0 <grub_swap_bytes16>
 4c4:	add	x0, x0, #0x0
 4c8:	ldr	x4, [x0]
 4cc:	mov	w3, #0x53                  	// #83
 4d0:	adrp	x0, 0 <grub_swap_bytes16>
 4d4:	add	x0, x0, #0x0
 4d8:	ldr	x2, [x0]
 4dc:	adrp	x0, 0 <grub_swap_bytes16>
 4e0:	add	x0, x0, #0x0
 4e4:	ldr	x1, [x0]
 4e8:	mov	w0, w8
 4ec:	bl	0 <grub_test_assert_helper>
 4f0:	ldr	w0, [sp, #92]
 4f4:	add	w0, w0, #0x1
 4f8:	str	w0, [sp, #92]
 4fc:	ldr	w0, [sp, #92]
 500:	cmp	w0, #0x3
 504:	b.le	464 <test64+0xb4>
 508:	nop
 50c:	nop
 510:	ldp	x29, x30, [sp, #16]
 514:	add	sp, sp, #0x60
 518:	ret
 51c:	nop
	...

0000000000000550 <test_all>:
 550:	stp	x29, x30, [sp, #-32]!
 554:	mov	x29, sp
 558:	str	x0, [sp, #24]
 55c:	ldr	x0, [sp, #24]
 560:	bl	3b0 <test64>
 564:	ldr	x0, [sp, #24]
 568:	bl	210 <test32>
 56c:	ldr	x0, [sp, #24]
 570:	and	w0, w0, #0xffff
 574:	bl	68 <test16>
 578:	nop
 57c:	ldp	x29, x30, [sp], #32
 580:	ret

0000000000000584 <bswap_test>:
 584:	stp	x29, x30, [sp, #-48]!
 588:	mov	x29, sp
 58c:	mov	x0, #0x194                 	// #404
 590:	str	x0, [sp, #40]
 594:	mov	x0, #0x7                   	// #7
 598:	str	x0, [sp, #32]
 59c:	str	xzr, [sp, #24]
 5a0:	b	5c8 <bswap_test+0x44>
 5a4:	adrp	x0, 0 <grub_swap_bytes16>
 5a8:	add	x0, x0, #0x0
 5ac:	ldr	x0, [x0]
 5b0:	ldr	x1, [sp, #24]
 5b4:	ldr	x0, [x0, x1, lsl #3]
 5b8:	bl	550 <test_all>
 5bc:	ldr	x0, [sp, #24]
 5c0:	add	x0, x0, #0x1
 5c4:	str	x0, [sp, #24]
 5c8:	ldr	x0, [sp, #24]
 5cc:	cmp	x0, #0x4
 5d0:	b.ls	5a4 <bswap_test+0x20>  // b.plast
 5d4:	str	xzr, [sp, #24]
 5d8:	b	688 <bswap_test+0x104>
 5dc:	ldr	x1, [sp, #40]
 5e0:	mov	x0, x1
 5e4:	lsl	x0, x0, #4
 5e8:	add	x2, x0, x1
 5ec:	ldr	x1, [sp, #32]
 5f0:	mov	x0, x1
 5f4:	lsl	x0, x0, #1
 5f8:	add	x0, x0, x1
 5fc:	lsl	x0, x0, #2
 600:	add	x0, x0, x1
 604:	add	x0, x2, x0
 608:	str	x0, [sp, #40]
 60c:	ldr	x1, [sp, #40]
 610:	mov	x0, x1
 614:	lsl	x0, x0, #1
 618:	add	x0, x0, x1
 61c:	lsl	x0, x0, #3
 620:	sub	x2, x0, x1
 624:	ldr	x1, [sp, #32]
 628:	mov	x0, x1
 62c:	lsl	x0, x0, #3
 630:	sub	x0, x0, x1
 634:	lsl	x0, x0, #2
 638:	add	x0, x0, x1
 63c:	add	x0, x2, x0
 640:	str	x0, [sp, #32]
 644:	ldr	x0, [sp, #32]
 648:	cmp	x0, #0x0
 64c:	b.ne	658 <bswap_test+0xd4>  // b.any
 650:	mov	x0, #0x1                   	// #1
 654:	str	x0, [sp, #32]
 658:	ldr	x0, [sp, #40]
 65c:	cmp	x0, #0x0
 660:	b.ne	66c <bswap_test+0xe8>  // b.any
 664:	mov	x0, #0x1                   	// #1
 668:	str	x0, [sp, #40]
 66c:	ldr	x0, [sp, #40]
 670:	bl	550 <test_all>
 674:	ldr	x0, [sp, #32]
 678:	bl	550 <test_all>
 67c:	ldr	x0, [sp, #24]
 680:	add	x0, x0, #0x1
 684:	str	x0, [sp, #24]
 688:	ldr	x1, [sp, #24]
 68c:	mov	x0, #0x9c3f                	// #39999
 690:	cmp	x1, x0
 694:	b.ls	5dc <bswap_test+0x58>  // b.plast
 698:	nop
 69c:	nop
 6a0:	ldp	x29, x30, [sp], #48
 6a4:	ret
	...

00000000000006b0 <grub_mod_init>:
 6b0:	stp	x29, x30, [sp, #-32]!
 6b4:	mov	x29, sp
 6b8:	str	x0, [sp, #24]
 6bc:	adrp	x0, 0 <grub_swap_bytes16>
 6c0:	add	x0, x0, #0x0
 6c4:	ldr	x1, [x0]
 6c8:	adrp	x0, 0 <grub_swap_bytes16>
 6cc:	add	x0, x0, #0x0
 6d0:	ldr	x0, [x0]
 6d4:	bl	0 <grub_test_register>
 6d8:	nop
 6dc:	ldp	x29, x30, [sp], #32
 6e0:	ret
 6e4:	nop
	...

00000000000006f8 <grub_mod_fini>:
 6f8:	stp	x29, x30, [sp, #-16]!
 6fc:	mov	x29, sp
 700:	adrp	x0, 0 <grub_swap_bytes16>
 704:	add	x0, x0, #0x0
 708:	ldr	x0, [x0]
 70c:	bl	0 <grub_test_unregister>
 710:	nop
 714:	ldp	x29, x30, [sp], #16
 718:	ret
 71c:	nop
	...
