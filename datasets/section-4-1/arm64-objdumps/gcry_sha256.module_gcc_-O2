
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_sha256.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <sha256_init>:
   0:	mov	x4, #0xe667                	// #58983
   4:	mov	x3, #0xf372                	// #62322
   8:	mov	x2, #0x527f                	// #21119
   c:	mov	x1, #0xd9ab                	// #55723
  10:	movk	x4, #0x6a09, lsl #16
  14:	movk	x3, #0x3c6e, lsl #16
  18:	movk	x2, #0x510e, lsl #16
  1c:	movk	x1, #0x1f83, lsl #16
  20:	movk	x4, #0xae85, lsl #32
  24:	movk	x3, #0xf53a, lsl #32
  28:	movk	x2, #0x688c, lsl #32
  2c:	movk	x1, #0xcd19, lsl #32
  30:	movk	x4, #0xbb67, lsl #48
  34:	movk	x3, #0xa54f, lsl #48
  38:	movk	x2, #0x9b05, lsl #48
  3c:	movk	x1, #0x5be0, lsl #48
  40:	stp	x4, x3, [x0]
  44:	stp	x2, x1, [x0, #16]
  48:	str	wzr, [x0, #32]
  4c:	str	wzr, [x0, #100]
  50:	ret
  54:	nop

0000000000000058 <sha224_init>:
  58:	mov	x4, #0x9ed8                	// #40664
  5c:	mov	x3, #0xdd17                	// #56599
  60:	mov	x2, #0xb31                 	// #2865
  64:	mov	x1, #0x8fa7                	// #36775
  68:	movk	x4, #0xc105, lsl #16
  6c:	movk	x3, #0x3070, lsl #16
  70:	movk	x2, #0xffc0, lsl #16
  74:	movk	x1, #0x64f9, lsl #16
  78:	movk	x4, #0xd507, lsl #32
  7c:	movk	x3, #0x5939, lsl #32
  80:	movk	x2, #0x1511, lsl #32
  84:	movk	x1, #0x4fa4, lsl #32
  88:	movk	x4, #0x367c, lsl #48
  8c:	movk	x3, #0xf70e, lsl #48
  90:	movk	x2, #0x6858, lsl #48
  94:	movk	x1, #0xbefa, lsl #48
  98:	stp	x4, x3, [x0]
  9c:	stp	x2, x1, [x0, #16]
  a0:	str	wzr, [x0, #32]
  a4:	str	wzr, [x0, #100]
  a8:	ret
  ac:	nop

00000000000000b0 <transform>:
  b0:	stp	x29, x30, [sp, #-432]!
  b4:	add	x5, x1, #0x40
  b8:	mov	x29, sp
  bc:	stp	x21, x22, [sp, #32]
  c0:	mov	x21, x0
  c4:	add	x0, sp, #0x70
  c8:	stp	x23, x24, [sp, #48]
  cc:	ldp	w24, w23, [x21, #16]
  d0:	stp	x25, x26, [sp, #64]
  d4:	ldp	w26, w25, [x21, #8]
  d8:	stp	x27, x28, [sp, #80]
  dc:	ldp	w28, w27, [x21]
  e0:	stp	x19, x20, [sp, #16]
  e4:	ldp	w22, w2, [x21, #24]
  e8:	str	w2, [sp, #100]
  ec:	nop
  f0:	ldrb	w2, [x1]
  f4:	add	x1, x1, #0x4
  f8:	ldurb	w3, [x1, #-3]
  fc:	ldurb	w4, [x1, #-2]
 100:	cmp	x1, x5
 104:	strb	w4, [x0, #1]
 108:	strb	w3, [x0, #2]
 10c:	strb	w2, [x0, #3]
 110:	ldurb	w2, [x1, #-1]
 114:	strb	w2, [x0], #4
 118:	b.ne	f0 <transform+0x40>  // b.any
 11c:	mov	x1, #0x1                   	// #1
 120:	lsl	x0, x1, #2
 124:	add	x2, sp, #0x70
 128:	add	x2, x2, x0
 12c:	add	x3, sp, #0xb0
 130:	add	x0, x3, x0
 134:	add	x1, x1, #0x1
 138:	cmp	x1, #0x11
 13c:	ldur	w2, [x2, #-4]
 140:	stur	w2, [x0, #-4]
 144:	b.ne	120 <transform+0x70>  // b.any
 148:	mov	x16, x3
 14c:	add	x7, x3, #0xc0
 150:	mov	x1, x3
 154:	nop
 158:	ldp	w6, w2, [x1]
 15c:	add	x1, x1, #0x4
 160:	ldr	w0, [x1, #52]
 164:	ldr	w3, [x1, #32]
 168:	ror	w4, w2, #18
 16c:	eor	w4, w4, w2, ror #7
 170:	ror	w5, w0, #19
 174:	eor	w5, w5, w0, ror #17
 178:	eor	w2, w4, w2, lsr #3
 17c:	eor	w0, w5, w0, lsr #10
 180:	add	w0, w0, w2
 184:	add	w2, w3, w6
 188:	add	w0, w0, w2
 18c:	str	w0, [x1, #60]
 190:	cmp	x7, x1
 194:	b.ne	158 <transform+0xa8>  // b.any
 198:	adrp	x0, 0 <sha256_init>
 19c:	ldr	w15, [sp, #100]
 1a0:	mov	w14, #0x5ed5                	// #24277
 1a4:	mov	w13, #0x82a4                	// #33444
 1a8:	ldr	x18, [x0]
 1ac:	mov	w12, #0x11f1                	// #4593
 1b0:	mov	w11, #0xc25b                	// #49755
 1b4:	mov	w10, #0xdba5                	// #56229
 1b8:	mov	w9, #0xfbcf                	// #64463
 1bc:	mov	w17, #0x4491                	// #17553
 1c0:	mov	w19, #0x2f98                	// #12184
 1c4:	add	x20, sp, #0x1b0
 1c8:	mov	w3, w22
 1cc:	mov	w1, w23
 1d0:	mov	w2, w24
 1d4:	mov	w5, w25
 1d8:	add	x18, x18, #0x20
 1dc:	mov	w4, w26
 1e0:	mov	w6, w27
 1e4:	mov	w7, w28
 1e8:	mov	w8, w15
 1ec:	movk	w14, #0xab1c, lsl #16
 1f0:	movk	w13, #0x923f, lsl #16
 1f4:	movk	w12, #0x59f1, lsl #16
 1f8:	movk	w11, #0x3956, lsl #16
 1fc:	movk	w10, #0xe9b5, lsl #16
 200:	movk	w9, #0xb5c0, lsl #16
 204:	movk	w17, #0x7137, lsl #16
 208:	movk	w19, #0x428a, lsl #16
 20c:	str	x21, [sp, #104]
 210:	b	228 <transform+0x178>
 214:	ldp	w19, w17, [x18]
 218:	ldp	w9, w10, [x18, #8]
 21c:	ldp	w11, w12, [x18, #16]
 220:	ldp	w13, w14, [x18, #24]
 224:	add	x18, x18, #0x20
 228:	eor	w15, w1, w3
 22c:	ror	w0, w2, #11
 230:	eor	w0, w0, w2, ror #6
 234:	and	w15, w15, w2
 238:	eor	w0, w0, w2, ror #25
 23c:	eor	w15, w15, w3
 240:	add	w19, w8, w19
 244:	add	w8, w0, w15
 248:	ldp	w0, w21, [x16]
 24c:	add	w8, w8, w19
 250:	eor	w19, w2, w1
 254:	orr	w30, w7, w6
 258:	add	w8, w8, w0
 25c:	add	w3, w3, w21
 260:	add	w0, w8, w5
 264:	and	w30, w30, w4
 268:	and	w19, w19, w0
 26c:	ror	w15, w7, #13
 270:	eor	w19, w19, w1
 274:	ror	w5, w0, #11
 278:	eor	w5, w5, w0, ror #6
 27c:	eor	w15, w15, w7, ror #2
 280:	eor	w5, w5, w0, ror #25
 284:	eor	w15, w15, w7, ror #22
 288:	add	w5, w5, w19
 28c:	and	w19, w7, w6
 290:	add	w3, w5, w3
 294:	orr	w19, w30, w19
 298:	add	w17, w3, w17
 29c:	eor	w3, w0, w2
 2a0:	add	w4, w17, w4
 2a4:	ldr	w5, [x16, #8]
 2a8:	and	w3, w3, w4
 2ac:	add	w15, w15, w19
 2b0:	eor	w3, w3, w2
 2b4:	ror	w30, w4, #11
 2b8:	eor	w30, w30, w4, ror #6
 2bc:	add	w1, w1, w5
 2c0:	eor	w30, w30, w4, ror #25
 2c4:	add	w8, w15, w8
 2c8:	add	w3, w30, w3
 2cc:	ldr	w19, [x16, #16]
 2d0:	add	w1, w3, w1
 2d4:	ror	w3, w8, #13
 2d8:	add	w9, w1, w9
 2dc:	orr	w1, w8, w7
 2e0:	add	w15, w9, w6
 2e4:	eor	w3, w3, w8, ror #2
 2e8:	and	w6, w1, w6
 2ec:	and	w1, w8, w7
 2f0:	orr	w1, w6, w1
 2f4:	eor	w3, w3, w8, ror #22
 2f8:	eor	w6, w0, w4
 2fc:	ror	w5, w15, #11
 300:	add	w3, w3, w1
 304:	eor	w5, w5, w15, ror #6
 308:	ldr	w1, [x16, #12]
 30c:	and	w6, w6, w15
 310:	add	w3, w3, w17
 314:	eor	w6, w6, w0
 318:	eor	w5, w5, w15, ror #25
 31c:	add	w2, w2, w1
 320:	add	w5, w5, w6
 324:	ror	w1, w3, #13
 328:	orr	w6, w8, w3
 32c:	add	w2, w5, w2
 330:	add	w10, w2, w10
 334:	and	w5, w6, w7
 338:	eor	w1, w1, w3, ror #2
 33c:	and	w6, w8, w3
 340:	add	w17, w10, w7
 344:	orr	w2, w5, w6
 348:	eor	w1, w1, w3, ror #22
 34c:	eor	w6, w4, w15
 350:	add	w1, w1, w2
 354:	ror	w5, w17, #11
 358:	add	w1, w1, w9
 35c:	eor	w5, w5, w17, ror #6
 360:	and	w9, w6, w17
 364:	orr	w7, w3, w1
 368:	eor	w6, w9, w4
 36c:	ror	w2, w1, #13
 370:	eor	w5, w5, w17, ror #25
 374:	and	w9, w3, w1
 378:	and	w7, w7, w8
 37c:	add	w0, w0, w19
 380:	eor	w2, w2, w1, ror #2
 384:	add	w5, w5, w6
 388:	add	w5, w5, w0
 38c:	orr	w6, w7, w9
 390:	eor	w2, w2, w1, ror #22
 394:	add	w11, w5, w11
 398:	add	w2, w2, w6
 39c:	add	w8, w8, w11
 3a0:	add	w2, w2, w10
 3a4:	eor	w7, w15, w17
 3a8:	orr	w5, w1, w2
 3ac:	ror	w6, w8, #11
 3b0:	ldr	w9, [x16, #20]
 3b4:	ror	w0, w2, #13
 3b8:	and	w10, w1, w2
 3bc:	and	w5, w5, w3
 3c0:	eor	w0, w0, w2, ror #2
 3c4:	eor	w6, w6, w8, ror #6
 3c8:	and	w7, w7, w8
 3cc:	orr	w5, w5, w10
 3d0:	eor	w7, w7, w15
 3d4:	eor	w0, w0, w2, ror #22
 3d8:	eor	w6, w6, w8, ror #25
 3dc:	add	w0, w0, w5
 3e0:	add	w6, w6, w7
 3e4:	add	w4, w4, w9
 3e8:	add	w5, w0, w11
 3ec:	add	w4, w6, w4
 3f0:	add	w12, w4, w12
 3f4:	orr	w7, w2, w5
 3f8:	add	w3, w3, w12
 3fc:	ror	w4, w5, #13
 400:	and	w0, w2, w5
 404:	and	w7, w7, w1
 408:	eor	w4, w4, w5, ror #2
 40c:	orr	w7, w7, w0
 410:	eor	w4, w4, w5, ror #22
 414:	eor	w0, w17, w8
 418:	add	w4, w4, w7
 41c:	ror	w6, w3, #6
 420:	ldr	w7, [x16, #24]
 424:	eor	w6, w6, w3, ror #11
 428:	and	w0, w0, w3
 42c:	add	w4, w4, w12
 430:	eor	w0, w0, w17
 434:	eor	w6, w6, w3, ror #25
 438:	add	w6, w6, w0
 43c:	add	w15, w15, w7
 440:	add	w15, w6, w15
 444:	orr	w0, w5, w4
 448:	and	w0, w0, w2
 44c:	ror	w6, w4, #2
 450:	add	w13, w15, w13
 454:	and	w7, w5, w4
 458:	eor	w6, w6, w4, ror #13
 45c:	add	w1, w1, w13
 460:	orr	w0, w0, w7
 464:	eor	w6, w6, w4, ror #22
 468:	add	w6, w6, w0
 46c:	eor	w9, w8, w3
 470:	add	w6, w6, w13
 474:	ror	w7, w1, #6
 478:	ldr	w11, [x16, #28]
 47c:	eor	w7, w7, w1, ror #11
 480:	and	w9, w9, w1
 484:	eor	w0, w7, w1, ror #25
 488:	orr	w10, w4, w6
 48c:	eor	w7, w9, w8
 490:	add	w17, w17, w11
 494:	ror	w9, w6, #2
 498:	add	w7, w0, w7
 49c:	and	w11, w4, w6
 4a0:	eor	w0, w9, w6, ror #13
 4a4:	and	w10, w10, w5
 4a8:	add	w7, w7, w17
 4ac:	orr	w9, w10, w11
 4b0:	eor	w0, w0, w6, ror #22
 4b4:	add	w14, w7, w14
 4b8:	add	x16, x16, #0x20
 4bc:	add	w7, w0, w9
 4c0:	cmp	x20, x16
 4c4:	add	w2, w2, w14
 4c8:	add	w7, w7, w14
 4cc:	b.ne	214 <transform+0x164>  // b.any
 4d0:	ldr	x21, [sp, #104]
 4d4:	add	w7, w28, w7
 4d8:	ldr	w0, [sp, #100]
 4dc:	add	w6, w27, w6
 4e0:	add	w4, w26, w4
 4e4:	add	w5, w25, w5
 4e8:	add	w2, w24, w2
 4ec:	add	w1, w23, w1
 4f0:	add	w3, w22, w3
 4f4:	add	w15, w0, w8
 4f8:	ldp	x19, x20, [sp, #16]
 4fc:	ldp	x23, x24, [sp, #48]
 500:	ldp	x25, x26, [sp, #64]
 504:	ldp	x27, x28, [sp, #80]
 508:	stp	w7, w6, [x21]
 50c:	stp	w4, w5, [x21, #8]
 510:	stp	w2, w1, [x21, #16]
 514:	stp	w3, w15, [x21, #24]
 518:	ldp	x21, x22, [sp, #32]
 51c:	ldp	x29, x30, [sp], #432
 520:	ret
 524:	nop
	...

0000000000000530 <sha256_read>:
 530:	add	x0, x0, #0x24
 534:	ret

0000000000000538 <sha256_write>:
 538:	stp	x29, x30, [sp, #-48]!
 53c:	mov	x29, sp
 540:	stp	x19, x20, [sp, #16]
 544:	mov	x20, x1
 548:	ldr	w1, [x0, #100]
 54c:	stp	x21, x22, [sp, #32]
 550:	mov	x19, x0
 554:	mov	x21, x2
 558:	cmp	w1, #0x40
 55c:	b.eq	67c <sha256_write+0x144>  // b.none
 560:	cbz	x20, 63c <sha256_write+0x104>
 564:	mov	w2, w1
 568:	cbz	w1, 5b0 <sha256_write+0x78>
 56c:	sxtw	x0, w1
 570:	add	x3, x19, #0x24
 574:	cbnz	x21, 594 <sha256_write+0x5c>
 578:	b	64c <sha256_write+0x114>
 57c:	str	w2, [x19, #100]
 580:	subs	x21, x21, #0x1
 584:	ldrb	w1, [x20], #1
 588:	strb	w1, [x3, x0]
 58c:	add	x0, x0, #0x1
 590:	b.eq	64c <sha256_write+0x114>  // b.none
 594:	add	w2, w0, #0x1
 598:	cmp	w0, #0x3f
 59c:	b.le	57c <sha256_write+0x44>
 5a0:	mov	x0, x19
 5a4:	mov	x2, #0x0                   	// #0
 5a8:	mov	x1, #0x0                   	// #0
 5ac:	bl	538 <sha256_write>
 5b0:	cmp	x21, #0x3f
 5b4:	b.ls	6a4 <sha256_write+0x16c>  // b.plast
 5b8:	sub	x22, x21, #0x40
 5bc:	and	x22, x22, #0xffffffffffffffc0
 5c0:	add	x22, x22, #0x40
 5c4:	add	x22, x20, x22
 5c8:	mov	x1, x20
 5cc:	mov	x0, x19
 5d0:	bl	b0 <transform>
 5d4:	str	wzr, [x19, #100]
 5d8:	ldr	w0, [x19, #32]
 5dc:	add	x20, x20, #0x40
 5e0:	cmp	x20, x22
 5e4:	add	w0, w0, #0x1
 5e8:	str	w0, [x19, #32]
 5ec:	b.ne	5c8 <sha256_write+0x90>  // b.any
 5f0:	and	x21, x21, #0x3f
 5f4:	mov	w0, #0x148                 	// #328
 5f8:	bl	0 <_gcry_burn_stack>
 5fc:	cbz	x21, 63c <sha256_write+0x104>
 600:	ldrsw	x0, [x19, #100]
 604:	add	x2, x19, #0x24
 608:	mov	x1, x0
 60c:	add	x21, x0, x21
 610:	sub	x22, x22, x0
 614:	b	630 <sha256_write+0xf8>
 618:	str	w0, [x19, #100]
 61c:	ldrb	w0, [x22, x1]
 620:	strb	w0, [x2, x1]
 624:	add	x1, x1, #0x1
 628:	cmp	x1, x21
 62c:	b.eq	63c <sha256_write+0x104>  // b.none
 630:	add	w0, w1, #0x1
 634:	cmp	w1, #0x3f
 638:	b.le	618 <sha256_write+0xe0>
 63c:	ldp	x19, x20, [sp, #16]
 640:	ldp	x21, x22, [sp, #32]
 644:	ldp	x29, x30, [sp], #48
 648:	ret
 64c:	cmp	w2, #0x40
 650:	b.ne	63c <sha256_write+0x104>  // b.any
 654:	add	x1, x19, #0x24
 658:	mov	x0, x19
 65c:	bl	b0 <transform>
 660:	mov	w0, #0x148                 	// #328
 664:	bl	0 <_gcry_burn_stack>
 668:	str	wzr, [x19, #100]
 66c:	ldr	w0, [x19, #32]
 670:	add	w0, w0, #0x1
 674:	str	w0, [x19, #32]
 678:	b	63c <sha256_write+0x104>
 67c:	add	x1, x0, #0x24
 680:	bl	b0 <transform>
 684:	mov	w0, #0x148                 	// #328
 688:	bl	0 <_gcry_burn_stack>
 68c:	str	wzr, [x19, #100]
 690:	ldr	w0, [x19, #32]
 694:	add	w0, w0, #0x1
 698:	str	w0, [x19, #32]
 69c:	cbnz	x20, 5b0 <sha256_write+0x78>
 6a0:	b	63c <sha256_write+0x104>
 6a4:	mov	x22, x20
 6a8:	b	5f4 <sha256_write+0xbc>
 6ac:	nop

00000000000006b0 <sha256_final>:
 6b0:	stp	x29, x30, [sp, #-48]!
 6b4:	mov	x2, #0x0                   	// #0
 6b8:	mov	x1, #0x0                   	// #0
 6bc:	mov	x29, sp
 6c0:	stp	x19, x20, [sp, #16]
 6c4:	mov	x19, x0
 6c8:	add	x20, x19, #0x24
 6cc:	stp	x21, x22, [sp, #32]
 6d0:	bl	538 <sha256_write>
 6d4:	ldr	w0, [x19, #32]
 6d8:	ldr	w2, [x19, #100]
 6dc:	lsl	w21, w0, #6
 6e0:	add	w1, w2, #0x1
 6e4:	adds	w21, w2, w21
 6e8:	str	w1, [x19, #100]
 6ec:	cset	w3, cs  // cs = hs, nlast
 6f0:	cmp	w2, #0x37
 6f4:	add	w0, w3, w0, lsr #26
 6f8:	lsl	w22, w21, #3
 6fc:	add	x2, x19, w2, sxtw
 700:	extr	w21, w0, w21, #29
 704:	mov	w0, #0xffffff80            	// #-128
 708:	b.gt	7b0 <sha256_final+0x100>
 70c:	strb	w0, [x2, #36]
 710:	cmp	w1, #0x37
 714:	b.gt	738 <sha256_final+0x88>
 718:	sxtw	x1, w1
 71c:	nop
 720:	strb	wzr, [x20, x1]
 724:	add	x1, x1, #0x1
 728:	cmp	w1, #0x37
 72c:	b.le	720 <sha256_final+0x70>
 730:	mov	w0, #0x38                  	// #56
 734:	str	w0, [x19, #100]
 738:	mov	x1, x20
 73c:	rev16	w21, w21
 740:	rev	w22, w22
 744:	strh	wzr, [x19, #92]
 748:	strh	w21, [x19, #94]
 74c:	mov	x0, x19
 750:	str	w22, [x19, #96]
 754:	bl	b0 <transform>
 758:	mov	w0, #0x148                 	// #328
 75c:	bl	0 <_gcry_burn_stack>
 760:	ldp	w7, w6, [x19]
 764:	ldp	w5, w4, [x19, #8]
 768:	rev	w7, w7
 76c:	ldp	w3, w2, [x19, #16]
 770:	rev	w6, w6
 774:	ldp	w1, w0, [x19, #24]
 778:	rev	w5, w5
 77c:	rev	w4, w4
 780:	rev	w3, w3
 784:	rev	w2, w2
 788:	rev	w1, w1
 78c:	rev	w0, w0
 790:	stp	w7, w6, [x19, #36]
 794:	stp	w5, w4, [x19, #44]
 798:	stp	w3, w2, [x19, #52]
 79c:	stp	w1, w0, [x19, #60]
 7a0:	ldp	x19, x20, [sp, #16]
 7a4:	ldp	x21, x22, [sp, #32]
 7a8:	ldp	x29, x30, [sp], #48
 7ac:	ret
 7b0:	strb	w0, [x2, #36]
 7b4:	cmp	w1, #0x3f
 7b8:	b.gt	7d8 <sha256_final+0x128>
 7bc:	sxtw	x1, w1
 7c0:	strb	wzr, [x20, x1]
 7c4:	add	x1, x1, #0x1
 7c8:	cmp	w1, #0x3f
 7cc:	b.le	7c0 <sha256_final+0x110>
 7d0:	mov	w0, #0x40                  	// #64
 7d4:	str	w0, [x19, #100]
 7d8:	mov	x0, x19
 7dc:	mov	x2, #0x0                   	// #0
 7e0:	mov	x1, #0x0                   	// #0
 7e4:	bl	538 <sha256_write>
 7e8:	mov	x0, x20
 7ec:	mov	x2, #0x38                  	// #56
 7f0:	mov	w1, #0x0                   	// #0
 7f4:	bl	0 <grub_memset>
 7f8:	b	738 <sha256_final+0x88>
 7fc:	nop

0000000000000800 <grub_mod_init>:
 800:	stp	x29, x30, [sp, #-32]!
 804:	adrp	x0, 0 <sha256_init>
 808:	mov	x29, sp
 80c:	str	x19, [sp, #16]
 810:	ldr	x19, [x0]
 814:	mov	x0, x19
 818:	bl	0 <grub_md_register>
 81c:	add	x0, x19, #0x60
 820:	ldr	x19, [sp, #16]
 824:	ldp	x29, x30, [sp], #32
 828:	b	0 <grub_md_register>
 82c:	nop
	...

0000000000000838 <grub_mod_fini>:
 838:	stp	x29, x30, [sp, #-32]!
 83c:	adrp	x0, 0 <sha256_init>
 840:	mov	x29, sp
 844:	str	x19, [sp, #16]
 848:	ldr	x19, [x0]
 84c:	mov	x0, x19
 850:	bl	0 <grub_md_unregister>
 854:	add	x0, x19, #0x60
 858:	ldr	x19, [sp, #16]
 85c:	ldp	x29, x30, [sp], #32
 860:	b	0 <grub_md_unregister>
 864:	nop
	...
