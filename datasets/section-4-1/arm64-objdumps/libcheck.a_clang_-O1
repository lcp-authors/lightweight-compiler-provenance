In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_clang_-O1:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	mov	w0, #0x10                  	// #16
  10:	mov	x29, sp
  14:	bl	0 <emalloc>
  18:	adrp	x8, 0 <suite_create>
  1c:	add	x8, x8, #0x0
  20:	cmp	x19, #0x0
  24:	csel	x8, x8, x19, eq  // eq = none
  28:	mov	x20, x0
  2c:	str	x8, [x0]
  30:	bl	0 <check_list_create>
  34:	str	x0, [x20, #8]
  38:	mov	x0, x20
  3c:	ldp	x20, x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <suite_tcase>:
  48:	stp	x29, x30, [sp, #-32]!
  4c:	stp	x20, x19, [sp, #16]
  50:	mov	x29, sp
  54:	cbz	x0, a4 <suite_tcase+0x5c>
  58:	ldr	x20, [x0, #8]
  5c:	mov	x19, x1
  60:	mov	x0, x20
  64:	bl	0 <check_list_front>
  68:	mov	x0, x20
  6c:	bl	0 <check_list_at_end>
  70:	cbnz	w0, 98 <suite_tcase+0x50>
  74:	mov	x0, x20
  78:	bl	0 <check_list_val>
  7c:	ldr	x1, [x0]
  80:	mov	x0, x19
  84:	bl	0 <strcmp>
  88:	cbz	w0, a0 <suite_tcase+0x58>
  8c:	mov	x0, x20
  90:	bl	0 <check_list_advance>
  94:	b	68 <suite_tcase+0x20>
  98:	mov	w0, wzr
  9c:	b	a4 <suite_tcase+0x5c>
  a0:	mov	w0, #0x1                   	// #1
  a4:	ldp	x20, x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret

00000000000000b0 <tcase_create>:
  b0:	str	d8, [sp, #-48]!
  b4:	stp	x20, x19, [sp, #32]
  b8:	mov	x20, x0
  bc:	mov	w0, #0x48                  	// #72
  c0:	stp	x29, x30, [sp, #16]
  c4:	mov	x29, sp
  c8:	bl	0 <emalloc>
  cc:	adrp	x8, 0 <suite_create>
  d0:	add	x8, x8, #0x0
  d4:	cmp	x20, #0x0
  d8:	csel	x8, x8, x20, eq  // eq = none
  dc:	mov	x19, x0
  e0:	str	x8, [x0]
  e4:	adrp	x0, 0 <suite_create>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <getenv>
  f0:	cbz	x0, 130 <tcase_create+0x80>
  f4:	add	x1, x29, #0x8
  f8:	mov	x20, x0
  fc:	str	xzr, [x29, #8]
 100:	bl	0 <strtod>
 104:	fcmp	d0, #0.0
 108:	fmov	d8, #4.000000000000000000e+00
 10c:	b.lt	134 <tcase_create+0x84>  // b.tstop
 110:	ldr	x8, [x29, #8]
 114:	cmp	x8, x20
 118:	b.eq	134 <tcase_create+0x84>  // b.none
 11c:	ldrb	w8, [x8]
 120:	fmov	d1, #4.000000000000000000e+00
 124:	cmp	w8, #0x0
 128:	fcsel	d8, d0, d1, eq  // eq = none
 12c:	b	134 <tcase_create+0x84>
 130:	fmov	d8, #4.000000000000000000e+00
 134:	adrp	x0, 0 <suite_create>
 138:	add	x0, x0, #0x0
 13c:	bl	0 <getenv>
 140:	cbz	x0, 178 <tcase_create+0xc8>
 144:	add	x1, x29, #0x8
 148:	mov	x20, x0
 14c:	str	xzr, [x29, #8]
 150:	bl	0 <strtod>
 154:	fcmp	d0, #0.0
 158:	b.lt	178 <tcase_create+0xc8>  // b.tstop
 15c:	ldr	x8, [x29, #8]
 160:	cmp	x8, x20
 164:	b.eq	178 <tcase_create+0xc8>  // b.none
 168:	ldrb	w8, [x8]
 16c:	fmul	d0, d8, d0
 170:	cmp	w8, #0x0
 174:	fcsel	d8, d0, d8, eq  // eq = none
 178:	mov	x9, #0xcd6500000000        	// #225833675390976
 17c:	frintm	d0, d8
 180:	movk	x9, #0x41cd, lsl #48
 184:	fsub	d0, d8, d0
 188:	fmov	d1, x9
 18c:	fmul	d0, d0, d1
 190:	fcvtms	x8, d8
 194:	fcvtzs	x9, d0
 198:	stp	x8, x9, [x19, #8]
 19c:	bl	0 <check_list_create>
 1a0:	str	x0, [x19, #24]
 1a4:	bl	0 <check_list_create>
 1a8:	str	x0, [x19, #32]
 1ac:	bl	0 <check_list_create>
 1b0:	str	x0, [x19, #48]
 1b4:	bl	0 <check_list_create>
 1b8:	str	x0, [x19, #40]
 1bc:	bl	0 <check_list_create>
 1c0:	str	x0, [x19, #56]
 1c4:	bl	0 <check_list_create>
 1c8:	str	x0, [x19, #64]
 1cc:	mov	x0, x19
 1d0:	ldp	x20, x19, [sp, #32]
 1d4:	ldp	x29, x30, [sp, #16]
 1d8:	ldr	d8, [sp], #48
 1dc:	ret

00000000000001e0 <tag_string_to_list>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	str	x21, [sp, #16]
 1e8:	stp	x20, x19, [sp, #32]
 1ec:	mov	x29, sp
 1f0:	mov	x20, x0
 1f4:	bl	0 <check_list_create>
 1f8:	mov	x19, x0
 1fc:	cbz	x20, 24c <tag_string_to_list+0x6c>
 200:	mov	x0, x20
 204:	bl	0 <strdup>
 208:	adrp	x1, 0 <suite_create>
 20c:	add	x1, x1, #0x0
 210:	mov	x20, x0
 214:	bl	0 <strtok>
 218:	cbz	x0, 244 <tag_string_to_list+0x64>
 21c:	adrp	x21, 0 <suite_create>
 220:	add	x21, x21, #0x0
 224:	bl	0 <strdup>
 228:	mov	x1, x0
 22c:	mov	x0, x19
 230:	bl	0 <check_list_add_end>
 234:	mov	x0, xzr
 238:	mov	x1, x21
 23c:	bl	0 <strtok>
 240:	cbnz	x0, 224 <tag_string_to_list+0x44>
 244:	mov	x0, x20
 248:	bl	0 <free>
 24c:	mov	x0, x19
 250:	ldp	x20, x19, [sp, #32]
 254:	ldr	x21, [sp, #16]
 258:	ldp	x29, x30, [sp], #48
 25c:	ret

0000000000000260 <tcase_set_tags>:
 260:	stp	x29, x30, [sp, #-32]!
 264:	stp	x20, x19, [sp, #16]
 268:	mov	x19, x0
 26c:	ldr	x0, [x0, #64]
 270:	mov	x20, x1
 274:	mov	x29, sp
 278:	cbz	x0, 290 <tcase_set_tags+0x30>
 27c:	adrp	x1, 0 <free>
 280:	add	x1, x1, #0x0
 284:	bl	0 <check_list_apply>
 288:	ldr	x0, [x19, #64]
 28c:	bl	0 <check_list_free>
 290:	mov	x0, x20
 294:	bl	1e0 <tag_string_to_list>
 298:	str	x0, [x19, #64]
 29c:	ldp	x20, x19, [sp, #16]
 2a0:	ldp	x29, x30, [sp], #32
 2a4:	ret

00000000000002a8 <tcase_matching_tag>:
 2a8:	stp	x29, x30, [sp, #-48]!
 2ac:	str	x21, [sp, #16]
 2b0:	stp	x20, x19, [sp, #32]
 2b4:	mov	x29, sp
 2b8:	cbz	x1, 328 <tcase_matching_tag+0x80>
 2bc:	mov	x20, x0
 2c0:	mov	x0, x1
 2c4:	mov	x19, x1
 2c8:	bl	0 <check_list_front>
 2cc:	b	2d8 <tcase_matching_tag+0x30>
 2d0:	mov	x0, x19
 2d4:	bl	0 <check_list_advance>
 2d8:	mov	x0, x19
 2dc:	bl	0 <check_list_at_end>
 2e0:	cbnz	w0, 328 <tcase_matching_tag+0x80>
 2e4:	ldr	x0, [x20, #64]
 2e8:	bl	0 <check_list_front>
 2ec:	ldr	x0, [x20, #64]
 2f0:	bl	0 <check_list_at_end>
 2f4:	cbnz	w0, 2d0 <tcase_matching_tag+0x28>
 2f8:	ldr	x0, [x20, #64]
 2fc:	bl	0 <check_list_val>
 300:	mov	x21, x0
 304:	mov	x0, x19
 308:	bl	0 <check_list_val>
 30c:	mov	x1, x0
 310:	mov	x0, x21
 314:	bl	0 <strcmp>
 318:	cbz	w0, 330 <tcase_matching_tag+0x88>
 31c:	ldr	x0, [x20, #64]
 320:	bl	0 <check_list_advance>
 324:	b	2ec <tcase_matching_tag+0x44>
 328:	mov	w0, wzr
 32c:	b	334 <tcase_matching_tag+0x8c>
 330:	mov	w0, #0x1                   	// #1
 334:	ldp	x20, x19, [sp, #32]
 338:	ldr	x21, [sp, #16]
 33c:	ldp	x29, x30, [sp], #48
 340:	ret

0000000000000344 <suite_add_tcase>:
 344:	stp	x29, x30, [sp, #-32]!
 348:	stp	x20, x19, [sp, #16]
 34c:	mov	x29, sp
 350:	cbz	x0, 37c <suite_add_tcase+0x38>
 354:	mov	x19, x1
 358:	cbz	x1, 37c <suite_add_tcase+0x38>
 35c:	mov	x20, x0
 360:	ldr	x0, [x0, #8]
 364:	mov	x1, x19
 368:	bl	0 <check_list_contains>
 36c:	cbnz	w0, 37c <suite_add_tcase+0x38>
 370:	ldr	x0, [x20, #8]
 374:	mov	x1, x19
 378:	bl	0 <check_list_add_end>
 37c:	ldp	x20, x19, [sp, #16]
 380:	ldp	x29, x30, [sp], #32
 384:	ret

0000000000000388 <_tcase_add_test>:
 388:	stp	x29, x30, [sp, #-64]!
 38c:	stp	x24, x23, [sp, #16]
 390:	stp	x22, x21, [sp, #32]
 394:	stp	x20, x19, [sp, #48]
 398:	mov	x29, sp
 39c:	cbz	x0, 3e0 <_tcase_add_test+0x58>
 3a0:	mov	x24, x1
 3a4:	cbz	x1, 3e0 <_tcase_add_test+0x58>
 3a8:	mov	x21, x0
 3ac:	mov	w0, #0x18                  	// #24
 3b0:	mov	w20, w5
 3b4:	mov	w23, w4
 3b8:	mov	w19, w3
 3bc:	mov	w22, w2
 3c0:	bl	0 <emalloc>
 3c4:	str	x24, [x0]
 3c8:	stp	w23, w20, [x0, #8]
 3cc:	str	w22, [x0, #16]
 3d0:	strb	w19, [x0, #20]
 3d4:	mov	x1, x0
 3d8:	ldr	x0, [x21, #24]
 3dc:	bl	0 <check_list_add_end>
 3e0:	ldp	x20, x19, [sp, #48]
 3e4:	ldp	x22, x21, [sp, #32]
 3e8:	ldp	x24, x23, [sp, #16]
 3ec:	ldp	x29, x30, [sp], #64
 3f0:	ret

00000000000003f4 <tcase_add_unchecked_fixture>:
 3f4:	stp	x29, x30, [sp, #-16]!
 3f8:	mov	w3, wzr
 3fc:	mov	x29, sp
 400:	bl	40c <tcase_add_fixture>
 404:	ldp	x29, x30, [sp], #16
 408:	ret

000000000000040c <tcase_add_fixture>:
 40c:	stp	x29, x30, [sp, #-48]!
 410:	stp	x22, x21, [sp, #16]
 414:	stp	x20, x19, [sp, #32]
 418:	mov	w19, w3
 41c:	mov	x20, x2
 420:	mov	x21, x0
 424:	mov	x29, sp
 428:	cbz	x1, 458 <tcase_add_fixture+0x4c>
 42c:	cmp	w19, #0x0
 430:	mov	w8, #0x30                  	// #48
 434:	mov	w9, #0x20                  	// #32
 438:	csel	x8, x9, x8, eq  // eq = none
 43c:	ldr	x22, [x21, x8]
 440:	mov	x0, x1
 444:	mov	w1, w19
 448:	bl	a80 <fixture_create>
 44c:	mov	x1, x0
 450:	mov	x0, x22
 454:	bl	0 <check_list_add_end>
 458:	cbz	x20, 488 <tcase_add_fixture+0x7c>
 45c:	cmp	w19, #0x0
 460:	mov	w8, #0x38                  	// #56
 464:	mov	w9, #0x28                  	// #40
 468:	csel	x8, x9, x8, eq  // eq = none
 46c:	ldr	x21, [x21, x8]
 470:	mov	x0, x20
 474:	mov	w1, w19
 478:	bl	a80 <fixture_create>
 47c:	mov	x1, x0
 480:	mov	x0, x21
 484:	bl	0 <check_list_add_front>
 488:	ldp	x20, x19, [sp, #32]
 48c:	ldp	x22, x21, [sp, #16]
 490:	ldp	x29, x30, [sp], #48
 494:	ret

0000000000000498 <tcase_add_checked_fixture>:
 498:	stp	x29, x30, [sp, #-16]!
 49c:	mov	w3, #0x1                   	// #1
 4a0:	mov	x29, sp
 4a4:	bl	40c <tcase_add_fixture>
 4a8:	ldp	x29, x30, [sp], #16
 4ac:	ret

00000000000004b0 <tcase_set_timeout>:
 4b0:	fcmp	d0, #0.0
 4b4:	b.lt	544 <tcase_set_timeout+0x94>  // b.tstop
 4b8:	str	d8, [sp, #-48]!
 4bc:	stp	x20, x19, [sp, #32]
 4c0:	mov	x19, x0
 4c4:	adrp	x0, 0 <suite_create>
 4c8:	add	x0, x0, #0x0
 4cc:	stp	x29, x30, [sp, #16]
 4d0:	mov	x29, sp
 4d4:	mov	v8.16b, v0.16b
 4d8:	bl	0 <getenv>
 4dc:	cbz	x0, 514 <tcase_set_timeout+0x64>
 4e0:	add	x1, x29, #0x8
 4e4:	mov	x20, x0
 4e8:	str	xzr, [x29, #8]
 4ec:	bl	0 <strtod>
 4f0:	fcmp	d0, #0.0
 4f4:	b.lt	514 <tcase_set_timeout+0x64>  // b.tstop
 4f8:	ldr	x8, [x29, #8]
 4fc:	cmp	x8, x20
 500:	b.eq	514 <tcase_set_timeout+0x64>  // b.none
 504:	ldrb	w8, [x8]
 508:	fmul	d0, d0, d8
 50c:	cmp	w8, #0x0
 510:	fcsel	d8, d0, d8, eq  // eq = none
 514:	mov	x9, #0xcd6500000000        	// #225833675390976
 518:	frintm	d0, d8
 51c:	movk	x9, #0x41cd, lsl #48
 520:	fsub	d0, d8, d0
 524:	fmov	d1, x9
 528:	fmul	d0, d0, d1
 52c:	fcvtms	x8, d8
 530:	fcvtzs	x9, d0
 534:	stp	x8, x9, [x19, #8]
 538:	ldp	x20, x19, [sp, #32]
 53c:	ldp	x29, x30, [sp, #16]
 540:	ldr	d8, [sp], #48
 544:	ret

0000000000000548 <tcase_fn_start>:
 548:	stp	x29, x30, [sp, #-48]!
 54c:	str	x21, [sp, #16]
 550:	mov	x21, x0
 554:	mov	w0, #0x2                   	// #2
 558:	stp	x20, x19, [sp, #32]
 55c:	mov	x29, sp
 560:	mov	w19, w2
 564:	mov	x20, x1
 568:	bl	0 <send_ctx_info>
 56c:	mov	x0, x20
 570:	mov	w1, w19
 574:	bl	0 <send_loc_info>
 578:	adrp	x8, 8 <suite_create+0x8>
 57c:	str	x21, [x8]
 580:	ldp	x20, x19, [sp, #32]
 584:	ldr	x21, [sp, #16]
 588:	ldp	x29, x30, [sp], #48
 58c:	ret

0000000000000590 <tcase_name>:
 590:	adrp	x8, 8 <suite_create+0x8>
 594:	ldr	x0, [x8]
 598:	ret

000000000000059c <_mark_point>:
 59c:	stp	x29, x30, [sp, #-16]!
 5a0:	mov	x29, sp
 5a4:	bl	0 <send_loc_info>
 5a8:	ldp	x29, x30, [sp], #16
 5ac:	ret

00000000000005b0 <_ck_assert_failed>:
 5b0:	stp	x29, x30, [sp, #-32]!
 5b4:	stp	x28, x19, [sp, #16]
 5b8:	mov	x29, sp
 5bc:	sub	sp, sp, #0x2, lsl #12
 5c0:	sub	sp, sp, #0xf0
 5c4:	mov	x19, x2
 5c8:	stp	x3, x4, [sp, #136]
 5cc:	stp	x5, x6, [sp, #152]
 5d0:	str	x7, [sp, #168]
 5d4:	stp	q1, q2, [sp, #16]
 5d8:	stp	q3, q4, [sp, #48]
 5dc:	str	q0, [sp]
 5e0:	stp	q5, q6, [sp, #80]
 5e4:	str	q7, [sp, #112]
 5e8:	bl	0 <send_loc_info>
 5ec:	mov	x9, #0xffffffffffffffd8    	// #-40
 5f0:	mov	x10, sp
 5f4:	add	x11, sp, #0x88
 5f8:	movk	x9, #0xff80, lsl #32
 5fc:	add	x12, x29, #0x20
 600:	mov	x8, #0xffffffffffffffd8    	// #-40
 604:	add	x10, x10, #0x80
 608:	add	x11, x11, #0x28
 60c:	stp	x10, x9, [x29, #-16]
 610:	stp	x12, x11, [x29, #-32]
 614:	tbz	w8, #31, 63c <_ck_assert_failed+0x8c>
 618:	add	w9, w8, #0x8
 61c:	cmp	w9, #0x0
 620:	stur	w9, [x29, #-8]
 624:	b.gt	63c <_ck_assert_failed+0x8c>
 628:	ldur	x9, [x29, #-24]
 62c:	add	x8, x9, x8
 630:	ldr	x2, [x8]
 634:	cbnz	x2, 650 <_ck_assert_failed+0xa0>
 638:	b	66c <_ck_assert_failed+0xbc>
 63c:	ldur	x8, [x29, #-32]
 640:	add	x9, x8, #0x8
 644:	stur	x9, [x29, #-32]
 648:	ldr	x2, [x8]
 64c:	cbz	x2, 66c <_ck_assert_failed+0xbc>
 650:	ldp	q0, q1, [x29, #-32]
 654:	add	x0, sp, #0xd0
 658:	add	x3, sp, #0xb0
 65c:	mov	w1, #0x2000                	// #8192
 660:	add	x19, sp, #0xd0
 664:	stp	q0, q1, [sp, #176]
 668:	bl	0 <vsnprintf>
 66c:	mov	x0, x19
 670:	bl	0 <send_failure_info>
 674:	bl	694 <cur_fork_status>
 678:	cmp	w0, #0x1
 67c:	b.ne	684 <_ck_assert_failed+0xd4>  // b.any
 680:	bl	0 <_exit>
 684:	adrp	x0, 0 <error_jmp_buffer>
 688:	add	x0, x0, #0x0
 68c:	mov	w1, #0x1                   	// #1
 690:	bl	0 <longjmp>

0000000000000694 <cur_fork_status>:
 694:	adrp	x8, 0 <suite_create>
 698:	ldr	w0, [x8]
 69c:	ret

00000000000006a0 <srunner_create>:
 6a0:	stp	x29, x30, [sp, #-32]!
 6a4:	stp	x20, x19, [sp, #16]
 6a8:	mov	x20, x0
 6ac:	mov	w0, #0x40                  	// #64
 6b0:	mov	x29, sp
 6b4:	bl	0 <emalloc>
 6b8:	mov	x19, x0
 6bc:	bl	0 <check_list_create>
 6c0:	str	x0, [x19]
 6c4:	cbz	x20, 6d0 <srunner_create+0x30>
 6c8:	mov	x1, x20
 6cc:	bl	0 <check_list_add_end>
 6d0:	mov	w0, #0xc                   	// #12
 6d4:	bl	0 <emalloc>
 6d8:	str	x0, [x19, #8]
 6dc:	str	wzr, [x0, #8]
 6e0:	ldr	x8, [x19, #8]
 6e4:	str	xzr, [x8]
 6e8:	bl	0 <check_list_create>
 6ec:	movi	v0.2d, #0x0
 6f0:	str	x0, [x19, #16]
 6f4:	stur	q0, [x19, #24]
 6f8:	stur	q0, [x19, #40]
 6fc:	str	wzr, [x19, #56]
 700:	mov	x0, x19
 704:	ldp	x20, x19, [sp, #16]
 708:	ldp	x29, x30, [sp], #32
 70c:	ret

0000000000000710 <srunner_add_suite>:
 710:	cbz	x1, 728 <srunner_add_suite+0x18>
 714:	stp	x29, x30, [sp, #-16]!
 718:	ldr	x0, [x0]
 71c:	mov	x29, sp
 720:	bl	0 <check_list_add_end>
 724:	ldp	x29, x30, [sp], #16
 728:	ret

000000000000072c <srunner_free>:
 72c:	cbz	x0, 7c8 <srunner_free+0x9c>
 730:	stp	x29, x30, [sp, #-32]!
 734:	stp	x20, x19, [sp, #16]
 738:	mov	x19, x0
 73c:	ldr	x0, [x0, #8]
 740:	mov	x29, sp
 744:	bl	0 <free>
 748:	ldr	x20, [x19]
 74c:	mov	x0, x20
 750:	bl	0 <check_list_front>
 754:	mov	x0, x20
 758:	bl	0 <check_list_at_end>
 75c:	cbnz	w0, 778 <srunner_free+0x4c>
 760:	mov	x0, x20
 764:	bl	0 <check_list_val>
 768:	bl	7cc <suite_free>
 76c:	mov	x0, x20
 770:	bl	0 <check_list_advance>
 774:	b	754 <srunner_free+0x28>
 778:	ldr	x0, [x19]
 77c:	bl	0 <check_list_free>
 780:	ldr	x20, [x19, #16]
 784:	mov	x0, x20
 788:	bl	0 <check_list_front>
 78c:	mov	x0, x20
 790:	bl	0 <check_list_at_end>
 794:	cbnz	w0, 7b0 <srunner_free+0x84>
 798:	mov	x0, x20
 79c:	bl	0 <check_list_val>
 7a0:	bl	82c <tr_free>
 7a4:	mov	x0, x20
 7a8:	bl	0 <check_list_advance>
 7ac:	b	78c <srunner_free+0x60>
 7b0:	ldr	x0, [x19, #16]
 7b4:	bl	0 <check_list_free>
 7b8:	mov	x0, x19
 7bc:	bl	0 <free>
 7c0:	ldp	x20, x19, [sp, #16]
 7c4:	ldp	x29, x30, [sp], #32
 7c8:	ret

00000000000007cc <suite_free>:
 7cc:	cbz	x0, 828 <suite_free+0x5c>
 7d0:	stp	x29, x30, [sp, #-32]!
 7d4:	stp	x20, x19, [sp, #16]
 7d8:	ldr	x20, [x0, #8]
 7dc:	mov	x19, x0
 7e0:	mov	x29, sp
 7e4:	mov	x0, x20
 7e8:	bl	0 <check_list_front>
 7ec:	mov	x0, x20
 7f0:	bl	0 <check_list_at_end>
 7f4:	cbnz	w0, 810 <suite_free+0x44>
 7f8:	mov	x0, x20
 7fc:	bl	0 <check_list_val>
 800:	bl	ab0 <tcase_free>
 804:	mov	x0, x20
 808:	bl	0 <check_list_advance>
 80c:	b	7ec <suite_free+0x20>
 810:	ldr	x0, [x19, #8]
 814:	bl	0 <check_list_free>
 818:	mov	x0, x19
 81c:	bl	0 <free>
 820:	ldp	x20, x19, [sp, #16]
 824:	ldp	x29, x30, [sp], #32
 828:	ret

000000000000082c <tr_free>:
 82c:	stp	x29, x30, [sp, #-32]!
 830:	str	x19, [sp, #16]
 834:	mov	x19, x0
 838:	ldr	x0, [x0, #8]
 83c:	mov	x29, sp
 840:	bl	0 <free>
 844:	ldr	x0, [x19, #48]
 848:	bl	0 <free>
 84c:	mov	x0, x19
 850:	bl	0 <free>
 854:	ldr	x19, [sp, #16]
 858:	ldp	x29, x30, [sp], #32
 85c:	ret

0000000000000860 <srunner_ntests_failed>:
 860:	ldr	x8, [x0, #8]
 864:	ldp	w9, w8, [x8, #4]
 868:	add	w0, w8, w9
 86c:	ret

0000000000000870 <srunner_ntests_run>:
 870:	ldr	x8, [x0, #8]
 874:	ldr	w0, [x8]
 878:	ret

000000000000087c <srunner_failures>:
 87c:	stp	x29, x30, [sp, #-48]!
 880:	stp	x22, x21, [sp, #16]
 884:	stp	x20, x19, [sp, #32]
 888:	mov	x29, sp
 88c:	mov	x19, x0
 890:	bl	860 <srunner_ntests_failed>
 894:	sbfiz	x0, x0, #3, #32
 898:	bl	0 <emalloc>
 89c:	ldr	x20, [x19, #16]
 8a0:	mov	x19, x0
 8a4:	mov	x0, x20
 8a8:	bl	0 <check_list_front>
 8ac:	mov	x0, x20
 8b0:	bl	0 <check_list_at_end>
 8b4:	cbz	w0, 8cc <srunner_failures+0x50>
 8b8:	mov	x0, x19
 8bc:	ldp	x20, x19, [sp, #32]
 8c0:	ldp	x22, x21, [sp, #16]
 8c4:	ldp	x29, x30, [sp], #48
 8c8:	ret
 8cc:	mov	w22, wzr
 8d0:	b	8e8 <srunner_failures+0x6c>
 8d4:	mov	x0, x20
 8d8:	bl	0 <check_list_advance>
 8dc:	mov	x0, x20
 8e0:	bl	0 <check_list_at_end>
 8e4:	cbnz	w0, 8b8 <srunner_failures+0x3c>
 8e8:	mov	x0, x20
 8ec:	bl	0 <check_list_val>
 8f0:	mov	x21, x0
 8f4:	ldr	w0, [x0]
 8f8:	bl	910 <non_pass>
 8fc:	cbz	w0, 8d4 <srunner_failures+0x58>
 900:	add	w8, w22, #0x1
 904:	str	x21, [x19, w22, sxtw #3]
 908:	mov	w22, w8
 90c:	b	8d4 <srunner_failures+0x58>

0000000000000910 <non_pass>:
 910:	cmp	w0, #0x1
 914:	cset	w0, ne  // ne = any
 918:	ret

000000000000091c <srunner_results>:
 91c:	stp	x29, x30, [sp, #-48]!
 920:	str	x21, [sp, #16]
 924:	stp	x20, x19, [sp, #32]
 928:	mov	x29, sp
 92c:	mov	x19, x0
 930:	bl	870 <srunner_ntests_run>
 934:	sbfiz	x0, x0, #3, #32
 938:	bl	0 <emalloc>
 93c:	ldr	x20, [x19, #16]
 940:	mov	x19, x0
 944:	mov	x0, x20
 948:	bl	0 <check_list_front>
 94c:	mov	x0, x20
 950:	bl	0 <check_list_at_end>
 954:	cbnz	w0, 97c <srunner_results+0x60>
 958:	mov	x21, x19
 95c:	mov	x0, x20
 960:	bl	0 <check_list_val>
 964:	str	x0, [x21], #8
 968:	mov	x0, x20
 96c:	bl	0 <check_list_advance>
 970:	mov	x0, x20
 974:	bl	0 <check_list_at_end>
 978:	cbz	w0, 95c <srunner_results+0x40>
 97c:	mov	x0, x19
 980:	ldp	x20, x19, [sp, #32]
 984:	ldr	x21, [sp, #16]
 988:	ldp	x29, x30, [sp], #48
 98c:	ret

0000000000000990 <tr_create>:
 990:	stp	x29, x30, [sp, #-32]!
 994:	mov	w0, #0x38                  	// #56
 998:	str	x19, [sp, #16]
 99c:	mov	x29, sp
 9a0:	bl	0 <emalloc>
 9a4:	mov	x19, x0
 9a8:	bl	9bc <tr_init>
 9ac:	mov	x0, x19
 9b0:	ldr	x19, [sp, #16]
 9b4:	ldp	x29, x30, [sp], #32
 9b8:	ret

00000000000009bc <tr_init>:
 9bc:	mov	w8, #0xffffffff            	// #-1
 9c0:	stp	xzr, xzr, [x0]
 9c4:	stp	xzr, xzr, [x0, #40]
 9c8:	str	xzr, [x0, #32]
 9cc:	str	w8, [x0, #16]
 9d0:	str	w8, [x0, #24]
 9d4:	ret

00000000000009d8 <tr_msg>:
 9d8:	ldr	x0, [x0, #48]
 9dc:	ret

00000000000009e0 <tr_lno>:
 9e0:	ldr	w0, [x0, #16]
 9e4:	ret

00000000000009e8 <tr_lfile>:
 9e8:	ldr	x0, [x0, #8]
 9ec:	ret

00000000000009f0 <tr_rtype>:
 9f0:	ldr	w0, [x0]
 9f4:	ret

00000000000009f8 <tr_ctx>:
 9f8:	ldr	w0, [x0, #4]
 9fc:	ret

0000000000000a00 <tr_tcname>:
 a00:	ldr	x0, [x0, #32]
 a04:	ret

0000000000000a08 <set_fork_status>:
 a08:	stp	x29, x30, [sp, #-16]!
 a0c:	cmp	w0, #0x2
 a10:	mov	x29, sp
 a14:	b.hi	a28 <set_fork_status+0x20>  // b.pmore
 a18:	adrp	x8, 0 <suite_create>
 a1c:	str	w0, [x8]
 a20:	ldp	x29, x30, [sp], #16
 a24:	ret
 a28:	adrp	x0, 0 <suite_create>
 a2c:	adrp	x1, 0 <suite_create>
 a30:	add	x0, x0, #0x0
 a34:	add	x1, x1, #0x0
 a38:	mov	w2, #0x24a                 	// #586
 a3c:	bl	0 <eprintf>

0000000000000a40 <check_get_clockid>:
 a40:	sub	sp, sp, #0x20
 a44:	add	x2, sp, #0x8
 a48:	mov	w0, #0x1                   	// #1
 a4c:	mov	x1, xzr
 a50:	stp	x29, x30, [sp, #16]
 a54:	add	x29, sp, #0x10
 a58:	bl	0 <timer_create>
 a5c:	cbz	w0, a68 <check_get_clockid+0x28>
 a60:	mov	w0, wzr
 a64:	b	a74 <check_get_clockid+0x34>
 a68:	ldr	x0, [sp, #8]
 a6c:	bl	0 <timer_delete>
 a70:	mov	w0, #0x1                   	// #1
 a74:	ldp	x29, x30, [sp, #16]
 a78:	add	sp, sp, #0x20
 a7c:	ret

0000000000000a80 <fixture_create>:
 a80:	stp	x29, x30, [sp, #-32]!
 a84:	stp	x20, x19, [sp, #16]
 a88:	mov	x20, x0
 a8c:	mov	w0, #0x10                  	// #16
 a90:	mov	x29, sp
 a94:	mov	w19, w1
 a98:	bl	0 <emalloc>
 a9c:	str	x20, [x0, #8]
 aa0:	str	w19, [x0]
 aa4:	ldp	x20, x19, [sp, #16]
 aa8:	ldp	x29, x30, [sp], #32
 aac:	ret

0000000000000ab0 <tcase_free>:
 ab0:	stp	x29, x30, [sp, #-32]!
 ab4:	stp	x20, x19, [sp, #16]
 ab8:	mov	x19, x0
 abc:	ldr	x0, [x0, #24]
 ac0:	adrp	x20, 0 <free>
 ac4:	add	x20, x20, #0x0
 ac8:	mov	x1, x20
 acc:	mov	x29, sp
 ad0:	bl	0 <check_list_apply>
 ad4:	ldr	x0, [x19, #32]
 ad8:	mov	x1, x20
 adc:	bl	0 <check_list_apply>
 ae0:	ldr	x0, [x19, #48]
 ae4:	mov	x1, x20
 ae8:	bl	0 <check_list_apply>
 aec:	ldr	x0, [x19, #40]
 af0:	mov	x1, x20
 af4:	bl	0 <check_list_apply>
 af8:	ldr	x0, [x19, #56]
 afc:	mov	x1, x20
 b00:	bl	0 <check_list_apply>
 b04:	ldr	x0, [x19, #64]
 b08:	mov	x1, x20
 b0c:	bl	0 <check_list_apply>
 b10:	ldr	x0, [x19, #24]
 b14:	bl	0 <check_list_free>
 b18:	ldr	x0, [x19, #32]
 b1c:	bl	0 <check_list_free>
 b20:	ldr	x0, [x19, #48]
 b24:	bl	0 <check_list_free>
 b28:	ldr	x0, [x19, #40]
 b2c:	bl	0 <check_list_free>
 b30:	ldr	x0, [x19, #56]
 b34:	bl	0 <check_list_free>
 b38:	ldr	x0, [x19, #64]
 b3c:	bl	0 <check_list_free>
 b40:	mov	x0, x19
 b44:	bl	0 <free>
 b48:	ldp	x20, x19, [sp, #16]
 b4c:	ldp	x29, x30, [sp], #32
 b50:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	sub	sp, sp, #0x130
   4:	stp	x22, x21, [sp, #272]
   8:	adrp	x22, 0 <stderr>
   c:	stp	x20, x19, [sp, #288]
  10:	mov	x19, x0
  14:	ldr	x0, [x22]
  18:	stp	x29, x30, [sp, #240]
  1c:	add	x29, sp, #0xf0
  20:	str	x28, [sp, #256]
  24:	mov	w20, w2
  28:	mov	x21, x1
  2c:	stp	x3, x4, [x29, #-104]
  30:	stp	x5, x6, [x29, #-88]
  34:	stur	x7, [x29, #-72]
  38:	stp	q1, q2, [sp, #16]
  3c:	stp	q3, q4, [sp, #48]
  40:	str	q0, [sp]
  44:	stp	q5, q6, [sp, #80]
  48:	str	q7, [sp, #112]
  4c:	bl	0 <fflush>
  50:	ldr	x0, [x22]
  54:	adrp	x1, 0 <eprintf>
  58:	add	x1, x1, #0x0
  5c:	mov	x2, x21
  60:	mov	w3, w20
  64:	bl	0 <fprintf>
  68:	sub	x9, x29, #0x68
  6c:	mov	x10, sp
  70:	mov	x11, #0xffffffffffffffd8    	// #-40
  74:	add	x8, x29, #0x40
  78:	movk	x11, #0xff80, lsl #32
  7c:	add	x9, x9, #0x28
  80:	add	x10, x10, #0x80
  84:	stp	x8, x9, [x29, #-32]
  88:	stp	x10, x11, [x29, #-16]
  8c:	ldp	q0, q1, [x29, #-32]
  90:	ldr	x0, [x22]
  94:	sub	x2, x29, #0x40
  98:	mov	x1, x19
  9c:	stp	q0, q1, [x29, #-64]
  a0:	bl	0 <vfprintf>
  a4:	ldrb	w8, [x19]
  a8:	cbz	w8, e8 <eprintf+0xe8>
  ac:	mov	x0, x19
  b0:	bl	0 <strlen>
  b4:	add	x8, x0, x19
  b8:	ldurb	w8, [x8, #-1]
  bc:	cmp	w8, #0x3a
  c0:	b.ne	e8 <eprintf+0xe8>  // b.any
  c4:	ldr	x19, [x22]
  c8:	bl	0 <__errno_location>
  cc:	ldr	w0, [x0]
  d0:	bl	0 <strerror>
  d4:	adrp	x1, 0 <eprintf>
  d8:	mov	x2, x0
  dc:	add	x1, x1, #0x0
  e0:	mov	x0, x19
  e4:	bl	0 <fprintf>
  e8:	ldr	x1, [x22]
  ec:	mov	w0, #0xa                   	// #10
  f0:	bl	0 <fputc>
  f4:	mov	w0, #0x2                   	// #2
  f8:	bl	0 <exit>

00000000000000fc <emalloc>:
  fc:	stp	x29, x30, [sp, #-32]!
 100:	str	x19, [sp, #16]
 104:	mov	x29, sp
 108:	mov	x19, x0
 10c:	bl	0 <malloc>
 110:	cbz	x0, 120 <emalloc+0x24>
 114:	ldr	x19, [sp, #16]
 118:	ldp	x29, x30, [sp], #32
 11c:	ret
 120:	adrp	x0, 0 <eprintf>
 124:	adrp	x1, 0 <eprintf>
 128:	add	x0, x0, #0x0
 12c:	add	x1, x1, #0x0
 130:	mov	w2, #0x3e                  	// #62
 134:	mov	x3, x19
 138:	bl	0 <eprintf>

000000000000013c <erealloc>:
 13c:	stp	x29, x30, [sp, #-32]!
 140:	str	x19, [sp, #16]
 144:	mov	x29, sp
 148:	mov	x19, x1
 14c:	bl	0 <realloc>
 150:	cbz	x0, 160 <erealloc+0x24>
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	adrp	x0, 0 <eprintf>
 164:	adrp	x1, 0 <eprintf>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	mov	w2, #0x48                  	// #72
 174:	mov	x3, x19
 178:	bl	0 <eprintf>

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_list_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x18                  	// #24
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	bl	0 <emalloc>
  14:	mov	x8, #0x100000000           	// #4294967296
  18:	mov	x19, x0
  1c:	str	x8, [x0]
  20:	mov	w0, #0x8                   	// #8
  24:	bl	0 <emalloc>
  28:	mov	x8, #0xffffffffffffffff    	// #-1
  2c:	stp	x8, x0, [x19, #8]
  30:	mov	x0, x19
  34:	ldr	x19, [sp, #16]
  38:	ldp	x29, x30, [sp], #32
  3c:	ret

0000000000000040 <check_list_add_front>:
  40:	cbz	x0, 98 <check_list_add_front+0x58>
  44:	stp	x29, x30, [sp, #-32]!
  48:	stp	x20, x19, [sp, #16]
  4c:	mov	x29, sp
  50:	mov	x19, x1
  54:	mov	x20, x0
  58:	bl	9c <maybe_grow>
  5c:	ldr	x1, [x20, #16]
  60:	ldr	w8, [x20]
  64:	add	x0, x1, #0x8
  68:	lsl	x2, x8, #3
  6c:	bl	0 <memmove>
  70:	ldr	w8, [x20, #12]
  74:	ldr	w9, [x20]
  78:	ldr	x10, [x20, #16]
  7c:	add	w8, w8, #0x1
  80:	add	w9, w9, #0x1
  84:	stp	wzr, w8, [x20, #8]
  88:	str	w9, [x20]
  8c:	str	x19, [x10]
  90:	ldp	x20, x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <maybe_grow>:
  9c:	stp	x29, x30, [sp, #-32]!
  a0:	str	x19, [sp, #16]
  a4:	ldp	w9, w8, [x0]
  a8:	mov	x29, sp
  ac:	cmp	w9, w8
  b0:	b.cc	d0 <maybe_grow+0x34>  // b.lo, b.ul, b.last
  b4:	mov	x19, x0
  b8:	ldr	x0, [x0, #16]
  bc:	lsl	w8, w8, #1
  c0:	lsl	x1, x8, #3
  c4:	str	w8, [x19, #4]
  c8:	bl	0 <erealloc>
  cc:	str	x0, [x19, #16]
  d0:	ldr	x19, [sp, #16]
  d4:	ldp	x29, x30, [sp], #32
  d8:	ret

00000000000000dc <check_list_add_end>:
  dc:	cbz	x0, 120 <check_list_add_end+0x44>
  e0:	stp	x29, x30, [sp, #-32]!
  e4:	stp	x20, x19, [sp, #16]
  e8:	mov	x29, sp
  ec:	mov	x19, x1
  f0:	mov	x20, x0
  f4:	bl	9c <maybe_grow>
  f8:	ldrsw	x8, [x20, #12]
  fc:	ldr	w9, [x20]
 100:	ldr	x10, [x20, #16]
 104:	add	x8, x8, #0x1
 108:	add	w9, w9, #0x1
 10c:	stp	w8, w8, [x20, #8]
 110:	str	w9, [x20]
 114:	str	x19, [x10, x8, lsl #3]
 118:	ldp	x20, x19, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret

0000000000000124 <check_list_at_end>:
 124:	ldr	w8, [x0, #8]
 128:	cmn	w8, #0x1
 12c:	b.eq	140 <check_list_at_end+0x1c>  // b.none
 130:	ldr	w9, [x0, #12]
 134:	cmp	w8, w9
 138:	cset	w0, gt
 13c:	ret
 140:	mov	w0, #0x1                   	// #1
 144:	ret

0000000000000148 <check_list_front>:
 148:	ldr	w8, [x0, #8]
 14c:	cmn	w8, #0x1
 150:	b.eq	158 <check_list_front+0x10>  // b.none
 154:	str	wzr, [x0, #8]
 158:	ret

000000000000015c <check_list_free>:
 15c:	cbz	x0, 188 <check_list_free+0x2c>
 160:	stp	x29, x30, [sp, #-32]!
 164:	str	x19, [sp, #16]
 168:	mov	x19, x0
 16c:	ldr	x0, [x0, #16]
 170:	mov	x29, sp
 174:	bl	0 <free>
 178:	mov	x0, x19
 17c:	bl	0 <free>
 180:	ldr	x19, [sp, #16]
 184:	ldp	x29, x30, [sp], #32
 188:	ret

000000000000018c <check_list_val>:
 18c:	cbz	x0, 1b8 <check_list_val+0x2c>
 190:	ldrsw	x8, [x0, #8]
 194:	cmn	w8, #0x1
 198:	b.eq	1a8 <check_list_val+0x1c>  // b.none
 19c:	ldr	w9, [x0, #12]
 1a0:	cmp	w8, w9
 1a4:	b.le	1b0 <check_list_val+0x24>
 1a8:	mov	x0, xzr
 1ac:	ret
 1b0:	ldr	x9, [x0, #16]
 1b4:	ldr	x0, [x9, x8, lsl #3]
 1b8:	ret

00000000000001bc <check_list_advance>:
 1bc:	stp	x29, x30, [sp, #-32]!
 1c0:	str	x19, [sp, #16]
 1c4:	mov	x29, sp
 1c8:	cbz	x0, 1e4 <check_list_advance+0x28>
 1cc:	mov	x19, x0
 1d0:	bl	124 <check_list_at_end>
 1d4:	cbnz	w0, 1e4 <check_list_advance+0x28>
 1d8:	ldr	w8, [x19, #8]
 1dc:	add	w8, w8, #0x1
 1e0:	str	w8, [x19, #8]
 1e4:	ldr	x19, [sp, #16]
 1e8:	ldp	x29, x30, [sp], #32
 1ec:	ret

00000000000001f0 <check_list_apply>:
 1f0:	stp	x29, x30, [sp, #-32]!
 1f4:	stp	x20, x19, [sp, #16]
 1f8:	mov	x29, sp
 1fc:	cbz	x0, 234 <check_list_apply+0x44>
 200:	mov	x19, x1
 204:	cbz	x1, 234 <check_list_apply+0x44>
 208:	mov	x20, x0
 20c:	bl	148 <check_list_front>
 210:	mov	x0, x20
 214:	bl	124 <check_list_at_end>
 218:	cbnz	w0, 234 <check_list_apply+0x44>
 21c:	mov	x0, x20
 220:	bl	18c <check_list_val>
 224:	blr	x19
 228:	mov	x0, x20
 22c:	bl	1bc <check_list_advance>
 230:	b	210 <check_list_apply+0x20>
 234:	ldp	x20, x19, [sp, #16]
 238:	ldp	x29, x30, [sp], #32
 23c:	ret

0000000000000240 <check_list_contains>:
 240:	stp	x29, x30, [sp, #-32]!
 244:	stp	x20, x19, [sp, #16]
 248:	mov	x29, sp
 24c:	mov	x19, x1
 250:	mov	x20, x0
 254:	bl	148 <check_list_front>
 258:	mov	x0, x20
 25c:	bl	124 <check_list_at_end>
 260:	cbnz	w0, 280 <check_list_contains+0x40>
 264:	mov	x0, x20
 268:	bl	18c <check_list_val>
 26c:	cmp	x0, x19
 270:	b.eq	288 <check_list_contains+0x48>  // b.none
 274:	mov	x0, x20
 278:	bl	1bc <check_list_advance>
 27c:	b	258 <check_list_contains+0x18>
 280:	mov	w0, wzr
 284:	b	28c <check_list_contains+0x4c>
 288:	mov	w0, #0x1                   	// #1
 28c:	ldp	x20, x19, [sp, #16]
 290:	ldp	x29, x30, [sp], #32
 294:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_set_log>:
   0:	ldr	x8, [x0, #24]
   4:	cbz	x8, c <srunner_set_log+0xc>
   8:	ret
   c:	str	x1, [x0, #24]
  10:	ret

0000000000000014 <srunner_has_log>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	30 <srunner_log_fname>
  20:	cmp	x0, #0x0
  24:	cset	w0, ne  // ne = any
  28:	ldp	x29, x30, [sp], #16
  2c:	ret

0000000000000030 <srunner_log_fname>:
  30:	stp	x29, x30, [sp, #-16]!
  34:	ldr	x0, [x0, #24]
  38:	mov	x29, sp
  3c:	cbz	x0, 48 <srunner_log_fname+0x18>
  40:	ldp	x29, x30, [sp], #16
  44:	ret
  48:	adrp	x0, 0 <srunner_set_log>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <getenv>
  54:	ldp	x29, x30, [sp], #16
  58:	ret

000000000000005c <srunner_set_xml>:
  5c:	ldr	x8, [x0, #32]
  60:	cbz	x8, 68 <srunner_set_xml+0xc>
  64:	ret
  68:	str	x1, [x0, #32]
  6c:	ret

0000000000000070 <srunner_has_xml>:
  70:	stp	x29, x30, [sp, #-16]!
  74:	mov	x29, sp
  78:	bl	8c <srunner_xml_fname>
  7c:	cmp	x0, #0x0
  80:	cset	w0, ne  // ne = any
  84:	ldp	x29, x30, [sp], #16
  88:	ret

000000000000008c <srunner_xml_fname>:
  8c:	stp	x29, x30, [sp, #-16]!
  90:	ldr	x0, [x0, #32]
  94:	mov	x29, sp
  98:	cbz	x0, a4 <srunner_xml_fname+0x18>
  9c:	ldp	x29, x30, [sp], #16
  a0:	ret
  a4:	adrp	x0, 0 <srunner_set_log>
  a8:	add	x0, x0, #0x0
  ac:	bl	0 <getenv>
  b0:	ldp	x29, x30, [sp], #16
  b4:	ret

00000000000000b8 <srunner_set_tap>:
  b8:	ldr	x8, [x0, #40]
  bc:	cbz	x8, c4 <srunner_set_tap+0xc>
  c0:	ret
  c4:	str	x1, [x0, #40]
  c8:	ret

00000000000000cc <srunner_has_tap>:
  cc:	stp	x29, x30, [sp, #-16]!
  d0:	mov	x29, sp
  d4:	bl	e8 <srunner_tap_fname>
  d8:	cmp	x0, #0x0
  dc:	cset	w0, ne  // ne = any
  e0:	ldp	x29, x30, [sp], #16
  e4:	ret

00000000000000e8 <srunner_tap_fname>:
  e8:	stp	x29, x30, [sp, #-16]!
  ec:	ldr	x0, [x0, #40]
  f0:	mov	x29, sp
  f4:	cbz	x0, 100 <srunner_tap_fname+0x18>
  f8:	ldp	x29, x30, [sp], #16
  fc:	ret
 100:	adrp	x0, 0 <srunner_set_log>
 104:	add	x0, x0, #0x0
 108:	bl	0 <getenv>
 10c:	ldp	x29, x30, [sp], #16
 110:	ret

0000000000000114 <srunner_register_lfun>:
 114:	stp	x29, x30, [sp, #-64]!
 118:	stp	x20, x19, [sp, #48]
 11c:	mov	x19, x0
 120:	mov	w0, #0x18                  	// #24
 124:	stp	x24, x23, [sp, #16]
 128:	stp	x22, x21, [sp, #32]
 12c:	mov	x29, sp
 130:	mov	w22, w4
 134:	mov	x21, x3
 138:	mov	w20, w2
 13c:	mov	x23, x1
 140:	bl	0 <emalloc>
 144:	cmp	w22, #0x4
 148:	mov	x24, x0
 14c:	b.ne	158 <srunner_register_lfun+0x44>  // b.any
 150:	bl	0 <get_env_printmode>
 154:	mov	w22, w0
 158:	stp	x23, x21, [x24]
 15c:	stp	w20, w22, [x24, #16]
 160:	ldr	x0, [x19, #48]
 164:	mov	x1, x24
 168:	bl	0 <check_list_add_end>
 16c:	ldp	x20, x19, [sp, #48]
 170:	ldp	x22, x21, [sp, #32]
 174:	ldp	x24, x23, [sp, #16]
 178:	ldp	x29, x30, [sp], #64
 17c:	ret

0000000000000180 <log_srunner_start>:
 180:	stp	x29, x30, [sp, #-16]!
 184:	mov	w2, #0x2                   	// #2
 188:	mov	x1, xzr
 18c:	mov	x29, sp
 190:	bl	19c <srunner_send_evt>
 194:	ldp	x29, x30, [sp], #16
 198:	ret

000000000000019c <srunner_send_evt>:
 19c:	stp	x29, x30, [sp, #-64]!
 1a0:	stp	x22, x21, [sp, #32]
 1a4:	stp	x20, x19, [sp, #48]
 1a8:	ldr	x21, [x0, #48]
 1ac:	mov	x20, x0
 1b0:	str	x23, [sp, #16]
 1b4:	mov	x29, sp
 1b8:	mov	x0, x21
 1bc:	mov	w19, w2
 1c0:	mov	x22, x1
 1c4:	bl	0 <check_list_front>
 1c8:	mov	x0, x21
 1cc:	bl	0 <check_list_at_end>
 1d0:	cbnz	w0, 214 <srunner_send_evt+0x78>
 1d4:	mov	x0, x21
 1d8:	bl	0 <check_list_val>
 1dc:	mov	x23, x0
 1e0:	ldr	x0, [x0]
 1e4:	bl	0 <fflush>
 1e8:	ldp	x1, x8, [x23]
 1ec:	ldr	w2, [x23, #20]
 1f0:	mov	x0, x20
 1f4:	mov	x3, x22
 1f8:	mov	w4, w19
 1fc:	blr	x8
 200:	ldr	x0, [x23]
 204:	bl	0 <fflush>
 208:	mov	x0, x21
 20c:	bl	0 <check_list_advance>
 210:	b	1c8 <srunner_send_evt+0x2c>
 214:	ldp	x20, x19, [sp, #48]
 218:	ldp	x22, x21, [sp, #32]
 21c:	ldr	x23, [sp, #16]
 220:	ldp	x29, x30, [sp], #64
 224:	ret

0000000000000228 <log_srunner_end>:
 228:	stp	x29, x30, [sp, #-16]!
 22c:	mov	w2, #0x4                   	// #4
 230:	mov	x1, xzr
 234:	mov	x29, sp
 238:	bl	19c <srunner_send_evt>
 23c:	ldp	x29, x30, [sp], #16
 240:	ret

0000000000000244 <log_suite_start>:
 244:	stp	x29, x30, [sp, #-16]!
 248:	mov	w2, #0x3                   	// #3
 24c:	mov	x29, sp
 250:	bl	19c <srunner_send_evt>
 254:	ldp	x29, x30, [sp], #16
 258:	ret

000000000000025c <log_suite_end>:
 25c:	stp	x29, x30, [sp, #-16]!
 260:	mov	w2, #0x5                   	// #5
 264:	mov	x29, sp
 268:	bl	19c <srunner_send_evt>
 26c:	ldp	x29, x30, [sp], #16
 270:	ret

0000000000000274 <log_test_start>:
 274:	sub	sp, sp, #0x90
 278:	stp	x29, x30, [sp, #112]
 27c:	ldr	x8, [x2]
 280:	ldr	x3, [x1]
 284:	adrp	x2, 0 <srunner_set_log>
 288:	str	x19, [sp, #128]
 28c:	ldr	x4, [x8]
 290:	mov	x19, x0
 294:	add	x2, x2, #0x0
 298:	add	x0, sp, #0xc
 29c:	mov	w1, #0x63                  	// #99
 2a0:	add	x29, sp, #0x70
 2a4:	bl	0 <snprintf>
 2a8:	add	x1, sp, #0xc
 2ac:	mov	w2, #0x6                   	// #6
 2b0:	mov	x0, x19
 2b4:	bl	19c <srunner_send_evt>
 2b8:	ldr	x19, [sp, #128]
 2bc:	ldp	x29, x30, [sp, #112]
 2c0:	add	sp, sp, #0x90
 2c4:	ret

00000000000002c8 <log_test_end>:
 2c8:	stp	x29, x30, [sp, #-16]!
 2cc:	mov	w2, #0x7                   	// #7
 2d0:	mov	x29, sp
 2d4:	bl	19c <srunner_send_evt>
 2d8:	ldp	x29, x30, [sp], #16
 2dc:	ret

00000000000002e0 <stdout_lfun>:
 2e0:	stp	x29, x30, [sp, #-16]!
 2e4:	cmp	w4, #0x7
 2e8:	mov	x29, sp
 2ec:	b.hi	374 <stdout_lfun+0x94>  // b.pmore
 2f0:	adrp	x10, 0 <srunner_set_log>
 2f4:	mov	w9, w4
 2f8:	add	x10, x10, #0x0
 2fc:	adr	x11, 310 <stdout_lfun+0x30>
 300:	ldrb	w12, [x10, x9]
 304:	add	x11, x11, x12, lsl #2
 308:	mov	x8, x1
 30c:	br	x11
 310:	ldp	x29, x30, [sp], #16
 314:	ret
 318:	cbz	w2, 310 <stdout_lfun+0x30>
 31c:	mov	x1, x0
 320:	mov	x0, x8
 324:	bl	0 <srunner_fprint>
 328:	ldp	x29, x30, [sp], #16
 32c:	ret
 330:	cbz	w2, 310 <stdout_lfun+0x30>
 334:	adrp	x0, 0 <srunner_set_log>
 338:	add	x0, x0, #0x0
 33c:	mov	w1, #0x11                  	// #17
 340:	mov	w2, #0x1                   	// #1
 344:	mov	x3, x8
 348:	bl	0 <fwrite>
 34c:	ldp	x29, x30, [sp], #16
 350:	ret
 354:	cbz	w2, 310 <stdout_lfun+0x30>
 358:	ldr	x2, [x3]
 35c:	adrp	x1, 0 <srunner_set_log>
 360:	add	x1, x1, #0x0
 364:	mov	x0, x8
 368:	bl	0 <fprintf>
 36c:	ldp	x29, x30, [sp], #16
 370:	ret
 374:	adrp	x0, 0 <srunner_set_log>
 378:	adrp	x1, 0 <srunner_set_log>
 37c:	add	x0, x0, #0x0
 380:	add	x1, x1, #0x0
 384:	mov	w2, #0xdc                  	// #220
 388:	bl	0 <eprintf>

000000000000038c <lfile_lfun>:
 38c:	stp	x29, x30, [sp, #-32]!
 390:	cmp	w4, #0x7
 394:	stp	x20, x19, [sp, #16]
 398:	mov	x29, sp
 39c:	b.hi	428 <lfile_lfun+0x9c>  // b.pmore
 3a0:	adrp	x9, 0 <srunner_set_log>
 3a4:	mov	w8, w4
 3a8:	add	x9, x9, #0x0
 3ac:	adr	x10, 3c0 <lfile_lfun+0x34>
 3b0:	ldrb	w11, [x9, x8]
 3b4:	add	x10, x10, x11, lsl #2
 3b8:	mov	x19, x1
 3bc:	br	x10
 3c0:	ldp	x20, x19, [sp, #16]
 3c4:	ldp	x29, x30, [sp], #32
 3c8:	ret
 3cc:	mov	w2, #0x3                   	// #3
 3d0:	mov	x0, x19
 3d4:	mov	x1, x3
 3d8:	bl	0 <tr_fprint>
 3dc:	b	3c0 <lfile_lfun+0x34>
 3e0:	ldr	x2, [x3]
 3e4:	adrp	x1, 0 <srunner_set_log>
 3e8:	add	x1, x1, #0x0
 3ec:	mov	x0, x19
 3f0:	bl	0 <fprintf>
 3f4:	b	3c0 <lfile_lfun+0x34>
 3f8:	mov	x20, x0
 3fc:	adrp	x0, 0 <srunner_set_log>
 400:	add	x0, x0, #0x0
 404:	mov	w1, #0x1c                  	// #28
 408:	mov	w2, #0x1                   	// #1
 40c:	mov	x3, x19
 410:	bl	0 <fwrite>
 414:	mov	w2, #0x1                   	// #1
 418:	mov	x0, x19
 41c:	mov	x1, x20
 420:	bl	0 <srunner_fprint>
 424:	b	3c0 <lfile_lfun+0x34>
 428:	adrp	x0, 0 <srunner_set_log>
 42c:	adrp	x1, 0 <srunner_set_log>
 430:	add	x0, x0, #0x0
 434:	add	x1, x1, #0x0
 438:	mov	w2, #0x103                 	// #259
 43c:	bl	0 <eprintf>

0000000000000440 <xml_lfun>:
 440:	sub	sp, sp, #0x80
 444:	adrp	x8, 0 <srunner_set_log>
 448:	ldrb	w8, [x8]
 44c:	str	x21, [sp, #96]
 450:	stp	x20, x19, [sp, #112]
 454:	mov	w21, w4
 458:	mov	x20, x3
 45c:	mov	x19, x1
 460:	stp	x29, x30, [sp, #80]
 464:	add	x29, sp, #0x50
 468:	cbnz	w8, 4b4 <xml_lfun+0x74>
 46c:	sub	x0, x29, #0x10
 470:	mov	x1, xzr
 474:	bl	0 <gettimeofday>
 478:	bl	0 <check_get_clockid>
 47c:	adrp	x1, 0 <srunner_set_log>
 480:	add	x1, x1, #0x0
 484:	bl	0 <clock_gettime>
 488:	sub	x0, x29, #0x10
 48c:	add	x1, sp, #0x8
 490:	bl	0 <localtime_r>
 494:	cbz	x0, 4b4 <xml_lfun+0x74>
 498:	adrp	x0, 0 <srunner_set_log>
 49c:	adrp	x2, 0 <srunner_set_log>
 4a0:	add	x0, x0, #0x0
 4a4:	add	x2, x2, #0x0
 4a8:	add	x3, sp, #0x8
 4ac:	mov	w1, #0x14                  	// #20
 4b0:	bl	0 <strftime>
 4b4:	cmp	w21, #0x7
 4b8:	b.hi	604 <xml_lfun+0x1c4>  // b.pmore
 4bc:	adrp	x9, 0 <srunner_set_log>
 4c0:	mov	w8, w21
 4c4:	add	x9, x9, #0x0
 4c8:	adr	x10, 4d8 <xml_lfun+0x98>
 4cc:	ldrb	w11, [x9, x8]
 4d0:	add	x10, x10, x11, lsl #2
 4d4:	br	x10
 4d8:	adrp	x1, 0 <srunner_set_log>
 4dc:	adrp	x2, 0 <srunner_set_log>
 4e0:	add	x1, x1, #0x0
 4e4:	add	x2, x2, #0x0
 4e8:	mov	x0, x19
 4ec:	bl	0 <fprintf>
 4f0:	b	5f0 <xml_lfun+0x1b0>
 4f4:	stp	xzr, xzr, [sp, #8]
 4f8:	bl	0 <check_get_clockid>
 4fc:	add	x1, sp, #0x8
 500:	bl	0 <clock_gettime>
 504:	adrp	x8, 0 <srunner_set_log>
 508:	add	x8, x8, #0x0
 50c:	ldp	x9, x10, [sp, #8]
 510:	ldp	x12, x8, [x8]
 514:	mov	x11, #0xf7cf                	// #63439
 518:	movk	x11, #0xe353, lsl #16
 51c:	movk	x11, #0x9ba5, lsl #32
 520:	sub	x9, x9, x12
 524:	mov	x12, #0x831                 	// #2097
 528:	movk	x12, #0x1cac, lsl #16
 52c:	movk	x11, #0x20c4, lsl #48
 530:	movk	x12, #0x645a, lsl #32
 534:	smulh	x10, x10, x11
 538:	movk	x12, #0xdf3b, lsl #48
 53c:	mov	w11, #0x4240                	// #16960
 540:	smulh	x8, x8, x12
 544:	asr	x12, x10, #7
 548:	movk	w11, #0xf, lsl #16
 54c:	add	x10, x12, x10, lsr #63
 550:	asr	x12, x8, #7
 554:	madd	x9, x9, x11, x10
 558:	add	x8, x12, x8, lsr #63
 55c:	add	x8, x9, x8
 560:	mov	x9, #0x34db                	// #13531
 564:	movk	x9, #0xd7b6, lsl #16
 568:	movk	x9, #0xde82, lsl #32
 56c:	movk	x9, #0x431b, lsl #48
 570:	umulh	x9, x8, x9
 574:	lsr	x2, x9, #18
 578:	adrp	x1, 0 <srunner_set_log>
 57c:	msub	x3, x2, x11, x8
 580:	add	x1, x1, #0x0
 584:	mov	x0, x19
 588:	bl	0 <fprintf>
 58c:	b	5f0 <xml_lfun+0x1b0>
 590:	mov	w2, #0x3                   	// #3
 594:	mov	x0, x19
 598:	mov	x1, x20
 59c:	bl	0 <tr_xmlprint>
 5a0:	b	5f0 <xml_lfun+0x1b0>
 5a4:	adrp	x0, 0 <srunner_set_log>
 5a8:	add	x0, x0, #0x0
 5ac:	mov	w1, #0x15                  	// #21
 5b0:	mov	w2, #0x1                   	// #1
 5b4:	mov	x3, x19
 5b8:	bl	0 <fwrite>
 5bc:	ldr	x1, [x20]
 5c0:	mov	x0, x19
 5c4:	bl	0 <fprint_xml_esc>
 5c8:	adrp	x0, 0 <srunner_set_log>
 5cc:	add	x0, x0, #0x0
 5d0:	mov	w1, #0x9                   	// #9
 5d4:	b	5e4 <xml_lfun+0x1a4>
 5d8:	adrp	x0, 0 <srunner_set_log>
 5dc:	add	x0, x0, #0x0
 5e0:	mov	w1, #0xb                   	// #11
 5e4:	mov	w2, #0x1                   	// #1
 5e8:	mov	x3, x19
 5ec:	bl	0 <fwrite>
 5f0:	ldp	x20, x19, [sp, #112]
 5f4:	ldr	x21, [sp, #96]
 5f8:	ldp	x29, x30, [sp, #80]
 5fc:	add	sp, sp, #0x80
 600:	ret
 604:	adrp	x0, 0 <srunner_set_log>
 608:	adrp	x1, 0 <srunner_set_log>
 60c:	add	x0, x0, #0x0
 610:	add	x1, x1, #0x0
 614:	mov	w2, #0x14f                 	// #335
 618:	bl	0 <eprintf>

000000000000061c <tap_lfun>:
 61c:	stp	x29, x30, [sp, #-32]!
 620:	cmp	w4, #0x7
 624:	str	x19, [sp, #16]
 628:	mov	x29, sp
 62c:	b.hi	6d8 <tap_lfun+0xbc>  // b.pmore
 630:	adrp	x9, 0 <srunner_set_log>
 634:	mov	w8, w4
 638:	add	x9, x9, #0x0
 63c:	adr	x10, 650 <tap_lfun+0x34>
 640:	ldrb	w11, [x9, x8]
 644:	add	x10, x10, x11, lsl #2
 648:	mov	x19, x1
 64c:	br	x10
 650:	adrp	x8, 0 <srunner_set_log>
 654:	str	wzr, [x8]
 658:	b	6cc <tap_lfun+0xb0>
 65c:	adrp	x9, 0 <srunner_set_log>
 660:	ldr	w8, [x9]
 664:	adrp	x10, 0 <srunner_set_log>
 668:	adrp	x11, 0 <srunner_set_log>
 66c:	add	x10, x10, #0x0
 670:	add	w8, w8, #0x1
 674:	str	w8, [x9]
 678:	ldr	w9, [x3]
 67c:	ldr	x4, [x3, #8]
 680:	ldp	x5, x6, [x3, #32]
 684:	ldr	x7, [x3, #48]
 688:	add	x11, x11, #0x0
 68c:	cmp	w9, #0x1
 690:	adrp	x1, 0 <srunner_set_log>
 694:	csel	x2, x11, x10, eq  // eq = none
 698:	add	x1, x1, #0x0
 69c:	mov	x0, x19
 6a0:	mov	w3, w8
 6a4:	bl	0 <fprintf>
 6a8:	b	6c4 <tap_lfun+0xa8>
 6ac:	adrp	x8, 0 <srunner_set_log>
 6b0:	ldr	w2, [x8]
 6b4:	adrp	x1, 0 <srunner_set_log>
 6b8:	add	x1, x1, #0x0
 6bc:	mov	x0, x19
 6c0:	bl	0 <fprintf>
 6c4:	mov	x0, x19
 6c8:	bl	0 <fflush>
 6cc:	ldr	x19, [sp, #16]
 6d0:	ldp	x29, x30, [sp], #32
 6d4:	ret
 6d8:	adrp	x0, 0 <srunner_set_log>
 6dc:	adrp	x1, 0 <srunner_set_log>
 6e0:	add	x0, x0, #0x0
 6e4:	add	x1, x1, #0x0
 6e8:	mov	w2, #0x17c                 	// #380
 6ec:	bl	0 <eprintf>

00000000000006f0 <srunner_open_lfile>:
 6f0:	stp	x29, x30, [sp, #-32]!
 6f4:	str	x19, [sp, #16]
 6f8:	mov	x29, sp
 6fc:	mov	x19, x0
 700:	bl	14 <srunner_has_log>
 704:	cbz	w0, 718 <srunner_open_lfile+0x28>
 708:	mov	x0, x19
 70c:	bl	30 <srunner_log_fname>
 710:	bl	728 <srunner_open_file>
 714:	b	71c <srunner_open_lfile+0x2c>
 718:	mov	x0, xzr
 71c:	ldr	x19, [sp, #16]
 720:	ldp	x29, x30, [sp], #32
 724:	ret

0000000000000728 <srunner_open_file>:
 728:	stp	x29, x30, [sp, #-32]!
 72c:	adrp	x1, 0 <srunner_set_log>
 730:	add	x1, x1, #0x0
 734:	str	x19, [sp, #16]
 738:	mov	x29, sp
 73c:	mov	x19, x0
 740:	bl	0 <strcmp>
 744:	cbz	w0, 778 <srunner_open_file+0x50>
 748:	adrp	x1, 0 <srunner_set_log>
 74c:	add	x1, x1, #0x0
 750:	mov	x0, x19
 754:	bl	0 <fopen>
 758:	cbnz	x0, 780 <srunner_open_file+0x58>
 75c:	adrp	x0, 0 <srunner_set_log>
 760:	adrp	x1, 0 <srunner_set_log>
 764:	add	x0, x0, #0x0
 768:	add	x1, x1, #0x0
 76c:	mov	w2, #0x1cd                 	// #461
 770:	mov	x3, x19
 774:	bl	0 <eprintf>
 778:	adrp	x8, 0 <stdout>
 77c:	ldr	x0, [x8]
 780:	ldr	x19, [sp, #16]
 784:	ldp	x29, x30, [sp], #32
 788:	ret

000000000000078c <srunner_open_xmlfile>:
 78c:	stp	x29, x30, [sp, #-32]!
 790:	str	x19, [sp, #16]
 794:	mov	x29, sp
 798:	mov	x19, x0
 79c:	bl	70 <srunner_has_xml>
 7a0:	cbz	w0, 7b4 <srunner_open_xmlfile+0x28>
 7a4:	mov	x0, x19
 7a8:	bl	8c <srunner_xml_fname>
 7ac:	bl	728 <srunner_open_file>
 7b0:	b	7b8 <srunner_open_xmlfile+0x2c>
 7b4:	mov	x0, xzr
 7b8:	ldr	x19, [sp, #16]
 7bc:	ldp	x29, x30, [sp], #32
 7c0:	ret

00000000000007c4 <srunner_open_tapfile>:
 7c4:	stp	x29, x30, [sp, #-32]!
 7c8:	str	x19, [sp, #16]
 7cc:	mov	x29, sp
 7d0:	mov	x19, x0
 7d4:	bl	cc <srunner_has_tap>
 7d8:	cbz	w0, 7ec <srunner_open_tapfile+0x28>
 7dc:	mov	x0, x19
 7e0:	bl	e8 <srunner_tap_fname>
 7e4:	bl	728 <srunner_open_file>
 7e8:	b	7f0 <srunner_open_tapfile+0x2c>
 7ec:	mov	x0, xzr
 7f0:	ldr	x19, [sp, #16]
 7f4:	ldp	x29, x30, [sp], #32
 7f8:	ret

00000000000007fc <srunner_init_logging>:
 7fc:	stp	x29, x30, [sp, #-48]!
 800:	str	x21, [sp, #16]
 804:	stp	x20, x19, [sp, #32]
 808:	mov	x29, sp
 80c:	mov	w20, w1
 810:	mov	x19, x0
 814:	bl	0 <check_list_create>
 818:	str	x0, [x19, #48]
 81c:	adrp	x21, 0 <stdout>
 820:	ldr	x1, [x21]
 824:	adrp	x3, 2e0 <stdout_lfun>
 828:	add	x3, x3, #0x0
 82c:	mov	x0, x19
 830:	mov	w2, wzr
 834:	mov	w4, w20
 838:	bl	114 <srunner_register_lfun>
 83c:	mov	x0, x19
 840:	bl	6f0 <srunner_open_lfile>
 844:	cbz	x0, 86c <srunner_init_logging+0x70>
 848:	ldr	x8, [x21]
 84c:	adrp	x3, 38c <lfile_lfun>
 850:	mov	x1, x0
 854:	add	x3, x3, #0x0
 858:	cmp	x0, x8
 85c:	cset	w2, ne  // ne = any
 860:	mov	x0, x19
 864:	mov	w4, w20
 868:	bl	114 <srunner_register_lfun>
 86c:	mov	x0, x19
 870:	bl	78c <srunner_open_xmlfile>
 874:	cbz	x0, 89c <srunner_init_logging+0xa0>
 878:	ldr	x8, [x21]
 87c:	adrp	x3, 440 <xml_lfun>
 880:	mov	x1, x0
 884:	add	x3, x3, #0x0
 888:	cmp	x0, x8
 88c:	cset	w2, ne  // ne = any
 890:	mov	x0, x19
 894:	mov	w4, w20
 898:	bl	114 <srunner_register_lfun>
 89c:	mov	x0, x19
 8a0:	bl	7c4 <srunner_open_tapfile>
 8a4:	cbz	x0, 8cc <srunner_init_logging+0xd0>
 8a8:	ldr	x8, [x21]
 8ac:	adrp	x3, 61c <tap_lfun>
 8b0:	mov	x1, x0
 8b4:	add	x3, x3, #0x0
 8b8:	cmp	x0, x8
 8bc:	cset	w2, ne  // ne = any
 8c0:	mov	x0, x19
 8c4:	mov	w4, w20
 8c8:	bl	114 <srunner_register_lfun>
 8cc:	mov	x0, x19
 8d0:	mov	x1, xzr
 8d4:	mov	w2, wzr
 8d8:	bl	19c <srunner_send_evt>
 8dc:	ldp	x20, x19, [sp, #32]
 8e0:	ldr	x21, [sp, #16]
 8e4:	ldp	x29, x30, [sp], #48
 8e8:	ret

00000000000008ec <srunner_end_logging>:
 8ec:	stp	x29, x30, [sp, #-48]!
 8f0:	mov	w2, #0x1                   	// #1
 8f4:	mov	x1, xzr
 8f8:	str	x21, [sp, #16]
 8fc:	stp	x20, x19, [sp, #32]
 900:	mov	x29, sp
 904:	mov	x19, x0
 908:	bl	19c <srunner_send_evt>
 90c:	ldr	x20, [x19, #48]
 910:	mov	x0, x20
 914:	bl	0 <check_list_front>
 918:	b	92c <srunner_end_logging+0x40>
 91c:	mov	x0, x21
 920:	bl	0 <free>
 924:	mov	x0, x20
 928:	bl	0 <check_list_advance>
 92c:	mov	x0, x20
 930:	bl	0 <check_list_at_end>
 934:	cbnz	w0, 970 <srunner_end_logging+0x84>
 938:	mov	x0, x20
 93c:	bl	0 <check_list_val>
 940:	ldr	w8, [x0, #16]
 944:	mov	x21, x0
 948:	cbz	w8, 91c <srunner_end_logging+0x30>
 94c:	ldr	x0, [x21]
 950:	bl	0 <fclose>
 954:	cbz	w0, 91c <srunner_end_logging+0x30>
 958:	adrp	x0, 0 <srunner_set_log>
 95c:	adrp	x1, 0 <srunner_set_log>
 960:	add	x0, x0, #0x0
 964:	add	x1, x1, #0x0
 968:	mov	w2, #0x224                 	// #548
 96c:	bl	0 <eprintf>
 970:	mov	x0, x20
 974:	bl	0 <check_list_free>
 978:	str	xzr, [x19, #48]
 97c:	ldp	x20, x19, [sp, #32]
 980:	ldr	x21, [sp, #16]
 984:	ldp	x29, x30, [sp], #48
 988:	ret

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <send_failure_info>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	bl	0 <strdup>
  10:	str	x0, [sp, #8]
  14:	bl	38 <get_pipe>
  18:	add	x2, sp, #0x8
  1c:	mov	w1, #0x1                   	// #1
  20:	bl	0 <ppack>
  24:	ldr	x0, [sp, #8]
  28:	bl	0 <free>
  2c:	ldp	x29, x30, [sp, #16]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <get_pipe>:
  38:	stp	x29, x30, [sp, #-16]!
  3c:	adrp	x8, 0 <send_failure_info>
  40:	ldr	x0, [x8]
  44:	mov	x29, sp
  48:	cbnz	x0, 58 <get_pipe+0x20>
  4c:	adrp	x8, 0 <send_failure_info>
  50:	ldr	x0, [x8]
  54:	cbz	x0, 60 <get_pipe+0x28>
  58:	ldp	x29, x30, [sp], #16
  5c:	ret
  60:	adrp	x0, 0 <send_failure_info>
  64:	adrp	x1, 0 <send_failure_info>
  68:	add	x0, x0, #0x0
  6c:	add	x1, x1, #0x0
  70:	mov	w2, #0x50                  	// #80
  74:	bl	0 <eprintf>

0000000000000078 <send_duration_info>:
  78:	sub	sp, sp, #0x20
  7c:	stp	x29, x30, [sp, #16]
  80:	add	x29, sp, #0x10
  84:	str	w0, [sp, #8]
  88:	bl	38 <get_pipe>
  8c:	add	x2, sp, #0x8
  90:	mov	w1, #0x3                   	// #3
  94:	bl	0 <ppack>
  98:	ldp	x29, x30, [sp, #16]
  9c:	add	sp, sp, #0x20
  a0:	ret

00000000000000a4 <send_loc_info>:
  a4:	sub	sp, sp, #0x30
  a8:	stp	x29, x30, [sp, #16]
  ac:	str	x19, [sp, #32]
  b0:	add	x29, sp, #0x10
  b4:	mov	w19, w1
  b8:	bl	0 <strdup>
  bc:	str	x0, [sp, #8]
  c0:	str	w19, [sp]
  c4:	bl	38 <get_pipe>
  c8:	mov	x2, sp
  cc:	mov	w1, #0x2                   	// #2
  d0:	bl	0 <ppack>
  d4:	ldr	x0, [sp, #8]
  d8:	bl	0 <free>
  dc:	ldr	x19, [sp, #32]
  e0:	ldp	x29, x30, [sp, #16]
  e4:	add	sp, sp, #0x30
  e8:	ret

00000000000000ec <send_ctx_info>:
  ec:	sub	sp, sp, #0x20
  f0:	stp	x29, x30, [sp, #16]
  f4:	add	x29, sp, #0x10
  f8:	str	w0, [sp, #8]
  fc:	bl	38 <get_pipe>
 100:	add	x2, sp, #0x8
 104:	mov	w1, wzr
 108:	bl	0 <ppack>
 10c:	ldp	x29, x30, [sp, #16]
 110:	add	sp, sp, #0x20
 114:	ret

0000000000000118 <receive_test_result>:
 118:	stp	x29, x30, [sp, #-32]!
 11c:	stp	x20, x19, [sp, #16]
 120:	mov	x29, sp
 124:	mov	w19, w0
 128:	bl	38 <get_pipe>
 12c:	cbz	x0, 178 <receive_test_result+0x60>
 130:	mov	x20, x0
 134:	bl	0 <rewind>
 138:	mov	x0, x20
 13c:	bl	0 <punpack>
 140:	cbz	x0, 190 <receive_test_result+0x78>
 144:	mov	x20, x0
 148:	bl	1a8 <teardown_pipe>
 14c:	bl	23c <setup_pipe>
 150:	mov	x0, x20
 154:	mov	w1, w19
 158:	bl	2dc <construct_test_result>
 15c:	mov	x19, x0
 160:	mov	x0, x20
 164:	bl	0 <rcvmsg_free>
 168:	mov	x0, x19
 16c:	ldp	x20, x19, [sp, #16]
 170:	ldp	x29, x30, [sp], #32
 174:	ret
 178:	adrp	x0, 0 <send_failure_info>
 17c:	adrp	x1, 0 <send_failure_info>
 180:	add	x0, x0, #0x0
 184:	add	x1, x1, #0x0
 188:	mov	w2, #0x7f                  	// #127
 18c:	bl	0 <eprintf>
 190:	adrp	x0, 0 <send_failure_info>
 194:	adrp	x1, 0 <send_failure_info>
 198:	add	x0, x0, #0x0
 19c:	add	x1, x1, #0x0
 1a0:	mov	w2, #0x85                  	// #133
 1a4:	bl	0 <eprintf>

00000000000001a8 <teardown_pipe>:
 1a8:	stp	x29, x30, [sp, #-32]!
 1ac:	stp	x20, x19, [sp, #16]
 1b0:	adrp	x20, 0 <send_failure_info>
 1b4:	ldr	x0, [x20]
 1b8:	mov	x29, sp
 1bc:	cbz	x0, 1e8 <teardown_pipe+0x40>
 1c0:	bl	0 <fclose>
 1c4:	adrp	x19, 0 <send_failure_info>
 1c8:	ldr	x0, [x19]
 1cc:	str	xzr, [x20]
 1d0:	cbz	x0, 218 <teardown_pipe+0x70>
 1d4:	bl	0 <unlink>
 1d8:	ldr	x0, [x19]
 1dc:	bl	0 <free>
 1e0:	str	xzr, [x19]
 1e4:	b	218 <teardown_pipe+0x70>
 1e8:	adrp	x20, 0 <send_failure_info>
 1ec:	ldr	x0, [x20]
 1f0:	cbz	x0, 224 <teardown_pipe+0x7c>
 1f4:	bl	0 <fclose>
 1f8:	adrp	x19, 0 <send_failure_info>
 1fc:	ldr	x0, [x19]
 200:	str	xzr, [x20]
 204:	cbz	x0, 218 <teardown_pipe+0x70>
 208:	bl	0 <unlink>
 20c:	ldr	x0, [x19]
 210:	bl	0 <free>
 214:	str	xzr, [x19]
 218:	ldp	x20, x19, [sp, #16]
 21c:	ldp	x29, x30, [sp], #32
 220:	ret
 224:	adrp	x0, 0 <send_failure_info>
 228:	adrp	x1, 0 <send_failure_info>
 22c:	add	x0, x0, #0x0
 230:	add	x1, x1, #0x0
 234:	mov	w2, #0x16a                 	// #362
 238:	bl	0 <eprintf>

000000000000023c <setup_pipe>:
 23c:	stp	x29, x30, [sp, #-32]!
 240:	str	x19, [sp, #16]
 244:	adrp	x19, 0 <send_failure_info>
 248:	ldr	x8, [x19]
 24c:	mov	x29, sp
 250:	cbz	x8, 28c <setup_pipe+0x50>
 254:	adrp	x19, 0 <send_failure_info>
 258:	ldr	x8, [x19]
 25c:	cbnz	x8, 2ac <setup_pipe+0x70>
 260:	adrp	x0, 0 <send_failure_info>
 264:	add	x0, x0, #0x0
 268:	bl	3b0 <open_tmp_file>
 26c:	str	x0, [x19]
 270:	cbnz	x0, 2a0 <setup_pipe+0x64>
 274:	adrp	x0, 0 <send_failure_info>
 278:	adrp	x1, 0 <send_failure_info>
 27c:	add	x0, x0, #0x0
 280:	add	x1, x1, #0x0
 284:	mov	w2, #0x146                 	// #326
 288:	bl	0 <eprintf>
 28c:	adrp	x0, 0 <send_failure_info>
 290:	add	x0, x0, #0x0
 294:	bl	3b0 <open_tmp_file>
 298:	str	x0, [x19]
 29c:	cbz	x0, 2c4 <setup_pipe+0x88>
 2a0:	ldr	x19, [sp, #16]
 2a4:	ldp	x29, x30, [sp], #32
 2a8:	ret
 2ac:	adrp	x0, 0 <send_failure_info>
 2b0:	adrp	x1, 0 <send_failure_info>
 2b4:	add	x0, x0, #0x0
 2b8:	add	x1, x1, #0x0
 2bc:	mov	w2, #0x14d                 	// #333
 2c0:	bl	0 <eprintf>
 2c4:	adrp	x0, 0 <send_failure_info>
 2c8:	adrp	x1, 0 <send_failure_info>
 2cc:	add	x0, x0, #0x0
 2d0:	add	x1, x1, #0x0
 2d4:	mov	w2, #0x13d                 	// #317
 2d8:	bl	0 <eprintf>

00000000000002dc <construct_test_result>:
 2dc:	stp	x29, x30, [sp, #-48]!
 2e0:	str	x21, [sp, #16]
 2e4:	stp	x20, x19, [sp, #32]
 2e8:	mov	x29, sp
 2ec:	cbz	x0, 328 <construct_test_result+0x4c>
 2f0:	mov	w21, w1
 2f4:	mov	x20, x0
 2f8:	bl	0 <tr_create>
 2fc:	mov	x19, x0
 300:	cbnz	w21, 330 <construct_test_result+0x54>
 304:	ldr	x8, [x20, #40]
 308:	cbnz	x8, 330 <construct_test_result+0x54>
 30c:	ldr	w8, [x20]
 310:	cmp	w8, #0x1
 314:	b.ne	354 <construct_test_result+0x78>  // b.any
 318:	mov	w1, #0x1                   	// #1
 31c:	str	w1, [x19, #4]
 320:	str	xzr, [x19, #48]
 324:	b	368 <construct_test_result+0x8c>
 328:	mov	x19, xzr
 32c:	b	374 <construct_test_result+0x98>
 330:	ldr	w8, [x20, #4]
 334:	cbnz	w8, 33c <construct_test_result+0x60>
 338:	ldr	w8, [x20]
 33c:	str	w8, [x19, #4]
 340:	ldr	x8, [x20, #40]
 344:	str	x8, [x19, #48]
 348:	str	xzr, [x20, #40]
 34c:	ldr	w1, [x19, #4]
 350:	b	368 <construct_test_result+0x8c>
 354:	mov	w1, #0x2                   	// #2
 358:	str	w1, [x19, #4]
 35c:	str	xzr, [x19, #48]
 360:	ldr	w8, [x20, #48]
 364:	str	w8, [x19, #24]
 368:	mov	x0, x19
 36c:	mov	x2, x20
 370:	bl	440 <tr_set_loc_by_ctx>
 374:	mov	x0, x19
 378:	ldp	x20, x19, [sp, #32]
 37c:	ldr	x21, [sp, #16]
 380:	ldp	x29, x30, [sp], #48
 384:	ret

0000000000000388 <setup_messaging>:
 388:	stp	x29, x30, [sp, #-16]!
 38c:	mov	x29, sp
 390:	bl	23c <setup_pipe>
 394:	ldp	x29, x30, [sp], #16
 398:	ret

000000000000039c <teardown_messaging>:
 39c:	stp	x29, x30, [sp, #-16]!
 3a0:	mov	x29, sp
 3a4:	bl	1a8 <teardown_pipe>
 3a8:	ldp	x29, x30, [sp], #16
 3ac:	ret

00000000000003b0 <open_tmp_file>:
 3b0:	stp	x29, x30, [sp, #-32]!
 3b4:	stp	x20, x19, [sp, #16]
 3b8:	mov	x19, x0
 3bc:	str	xzr, [x0]
 3c0:	adrp	x0, 0 <send_failure_info>
 3c4:	add	x0, x0, #0x0
 3c8:	mov	x29, sp
 3cc:	bl	0 <getenv>
 3d0:	adrp	x8, 0 <send_failure_info>
 3d4:	add	x8, x8, #0x0
 3d8:	cmp	x0, #0x0
 3dc:	csel	x1, x8, x0, eq  // eq = none
 3e0:	adrp	x0, 0 <send_failure_info>
 3e4:	add	x0, x0, #0x0
 3e8:	bl	0 <ck_strdup_printf>
 3ec:	str	x0, [x19]
 3f0:	bl	0 <mkstemp>
 3f4:	tbnz	w0, #31, 42c <open_tmp_file+0x7c>
 3f8:	adrp	x1, 0 <send_failure_info>
 3fc:	add	x1, x1, #0x0
 400:	bl	0 <fdopen>
 404:	ldr	x8, [x19]
 408:	mov	x20, x0
 40c:	mov	x0, x8
 410:	bl	0 <unlink>
 414:	cbz	x20, 41c <open_tmp_file+0x6c>
 418:	cbnz	w0, 430 <open_tmp_file+0x80>
 41c:	ldr	x0, [x19]
 420:	bl	0 <free>
 424:	str	xzr, [x19]
 428:	b	430 <open_tmp_file+0x80>
 42c:	mov	x20, xzr
 430:	mov	x0, x20
 434:	ldp	x20, x19, [sp, #16]
 438:	ldp	x29, x30, [sp], #32
 43c:	ret

0000000000000440 <tr_set_loc_by_ctx>:
 440:	cmp	w1, #0x2
 444:	b.ne	450 <tr_set_loc_by_ctx+0x10>  // b.any
 448:	ldr	x8, [x2, #24]!
 44c:	b	454 <tr_set_loc_by_ctx+0x14>
 450:	ldr	x8, [x2, #8]!
 454:	str	x8, [x0, #8]
 458:	add	x8, x2, #0x8
 45c:	ldr	w9, [x8]
 460:	mov	w10, #0xffffffff            	// #-1
 464:	str	w9, [x0, #16]
 468:	str	xzr, [x2]
 46c:	str	w10, [x8]
 470:	ret

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_set_max_msg_size>:
   0:	adrp	x8, 0 <check_set_max_msg_size>
   4:	str	x0, [x8]
   8:	ret

000000000000000c <pack>:
   c:	stp	x29, x30, [sp, #-48]!
  10:	str	x21, [sp, #16]
  14:	stp	x20, x19, [sp, #32]
  18:	mov	x29, sp
  1c:	cbz	x1, 54 <pack+0x48>
  20:	mov	x19, x2
  24:	cbz	x2, 5c <pack+0x50>
  28:	mov	x20, x1
  2c:	mov	w1, #0x7e                  	// #126
  30:	mov	w21, w0
  34:	bl	70 <check_type>
  38:	adrp	x8, 0 <check_set_max_msg_size>
  3c:	add	x8, x8, #0x0
  40:	ldr	x8, [x8, w21, uxtw #3]
  44:	mov	x0, x20
  48:	mov	x1, x19
  4c:	blr	x8
  50:	b	60 <pack+0x54>
  54:	mov	w0, #0xffffffff            	// #-1
  58:	b	60 <pack+0x54>
  5c:	mov	w0, wzr
  60:	ldp	x20, x19, [sp, #32]
  64:	ldr	x21, [sp, #16]
  68:	ldp	x29, x30, [sp], #48
  6c:	ret

0000000000000070 <check_type>:
  70:	cmp	w0, #0x4
  74:	b.cs	7c <check_type+0xc>  // b.hs, b.nlast
  78:	ret
  7c:	stp	x29, x30, [sp, #-16]!
  80:	mov	w3, w0
  84:	mov	w2, w1
  88:	adrp	x0, 0 <check_set_max_msg_size>
  8c:	adrp	x1, 0 <check_set_max_msg_size>
  90:	add	x0, x0, #0x0
  94:	add	x1, x1, #0x0
  98:	mov	x29, sp
  9c:	bl	0 <eprintf>

00000000000000a0 <upack>:
  a0:	stp	x29, x30, [sp, #-48]!
  a4:	mov	x29, sp
  a8:	str	x21, [sp, #16]
  ac:	stp	x20, x19, [sp, #32]
  b0:	str	x0, [x29, #24]
  b4:	cbz	x0, 100 <upack+0x60>
  b8:	mov	x19, x0
  bc:	add	x0, x29, #0x18
  c0:	mov	x21, x2
  c4:	mov	x20, x1
  c8:	bl	114 <upack_type>
  cc:	mov	w1, #0x8e                  	// #142
  d0:	str	w0, [x21]
  d4:	bl	70 <check_type>
  d8:	ldr	w8, [x21]
  dc:	adrp	x9, 0 <check_set_max_msg_size>
  e0:	add	x9, x9, #0x0
  e4:	add	x0, x29, #0x18
  e8:	ldr	x8, [x9, x8, lsl #3]
  ec:	mov	x1, x20
  f0:	blr	x8
  f4:	ldr	w8, [x29, #24]
  f8:	sub	w0, w8, w19
  fc:	b	104 <upack+0x64>
 100:	mov	w0, #0xffffffff            	// #-1
 104:	ldp	x20, x19, [sp, #32]
 108:	ldr	x21, [sp, #16]
 10c:	ldp	x29, x30, [sp], #48
 110:	ret

0000000000000114 <upack_type>:
 114:	stp	x29, x30, [sp, #-16]!
 118:	mov	x29, sp
 11c:	bl	828 <upack_int>
 120:	ldp	x29, x30, [sp], #16
 124:	ret

0000000000000128 <ppack>:
 128:	sub	sp, sp, #0x120
 12c:	stp	x29, x30, [sp, #224]
 130:	add	x29, sp, #0xe0
 134:	mov	w8, w1
 138:	stp	x20, x19, [sp, #272]
 13c:	mov	x19, x0
 140:	add	x1, x29, #0x18
 144:	mov	w0, w8
 148:	str	x28, [sp, #240]
 14c:	stp	x22, x21, [sp, #256]
 150:	str	xzr, [x29, #24]
 154:	bl	c <pack>
 158:	sxtw	x20, w0
 15c:	bl	224 <get_max_msg_size>
 160:	cmp	x0, x20
 164:	b.cc	1e8 <ppack+0xc0>  // b.lo, b.ul, b.last
 168:	mov	x0, sp
 16c:	mov	w1, wzr
 170:	bl	0 <__sigsetjmp>
 174:	cbnz	w0, 200 <ppack+0xd8>
 178:	mov	x0, sp
 17c:	bl	0 <__pthread_register_cancel>
 180:	adrp	x21, 0 <check_set_max_msg_size>
 184:	add	x21, x21, #0x0
 188:	mov	x0, x21
 18c:	bl	0 <pthread_mutex_lock>
 190:	ldr	x0, [x29, #24]
 194:	mov	w1, #0x1                   	// #1
 198:	mov	x2, x20
 19c:	mov	x3, x19
 1a0:	bl	0 <fwrite>
 1a4:	mov	x22, x0
 1a8:	mov	x0, x19
 1ac:	bl	0 <fflush>
 1b0:	mov	x0, x21
 1b4:	bl	0 <pthread_mutex_unlock>
 1b8:	mov	x0, sp
 1bc:	bl	0 <__pthread_unregister_cancel>
 1c0:	cmp	x22, x20
 1c4:	b.ne	20c <ppack+0xe4>  // b.any
 1c8:	ldr	x0, [x29, #24]
 1cc:	bl	0 <free>
 1d0:	ldp	x20, x19, [sp, #272]
 1d4:	ldp	x22, x21, [sp, #256]
 1d8:	ldr	x28, [sp, #240]
 1dc:	ldp	x29, x30, [sp, #224]
 1e0:	add	sp, sp, #0x120
 1e4:	ret
 1e8:	adrp	x0, 0 <check_set_max_msg_size>
 1ec:	adrp	x1, 0 <check_set_max_msg_size>
 1f0:	add	x0, x0, #0x0
 1f4:	add	x1, x1, #0x0
 1f8:	mov	w2, #0x146                 	// #326
 1fc:	bl	0 <eprintf>
 200:	bl	26c <ppack_cleanup>
 204:	mov	x0, sp
 208:	bl	0 <__pthread_unwind_next>
 20c:	adrp	x0, 0 <check_set_max_msg_size>
 210:	adrp	x1, 0 <check_set_max_msg_size>
 214:	add	x0, x0, #0x0
 218:	add	x1, x1, #0x0
 21c:	mov	w2, #0x14f                 	// #335
 220:	bl	0 <eprintf>

0000000000000224 <get_max_msg_size>:
 224:	stp	x29, x30, [sp, #-16]!
 228:	adrp	x0, 0 <check_set_max_msg_size>
 22c:	add	x0, x0, #0x0
 230:	mov	x29, sp
 234:	bl	0 <getenv>
 238:	cbz	x0, 248 <get_max_msg_size+0x24>
 23c:	mov	w2, #0xa                   	// #10
 240:	mov	x1, xzr
 244:	bl	0 <strtoul>
 248:	adrp	x8, 0 <check_set_max_msg_size>
 24c:	ldr	x8, [x8]
 250:	cmp	x0, #0x0
 254:	mov	w9, #0x1000                	// #4096
 258:	csel	x8, x8, x0, eq  // eq = none
 25c:	cmp	x8, #0x0
 260:	csel	x0, x9, x8, eq  // eq = none
 264:	ldp	x29, x30, [sp], #16
 268:	ret

000000000000026c <ppack_cleanup>:
 26c:	stp	x29, x30, [sp, #-16]!
 270:	adrp	x0, 0 <check_set_max_msg_size>
 274:	add	x0, x0, #0x0
 278:	mov	x29, sp
 27c:	bl	0 <pthread_mutex_unlock>
 280:	ldp	x29, x30, [sp], #16
 284:	ret

0000000000000288 <rcvmsg_free>:
 288:	stp	x29, x30, [sp, #-32]!
 28c:	str	x19, [sp, #16]
 290:	mov	x19, x0
 294:	ldr	x0, [x0, #8]
 298:	mov	x29, sp
 29c:	bl	0 <free>
 2a0:	ldr	x0, [x19, #24]
 2a4:	bl	0 <free>
 2a8:	ldr	x0, [x19, #40]
 2ac:	bl	0 <free>
 2b0:	mov	x0, x19
 2b4:	bl	0 <free>
 2b8:	ldr	x19, [sp, #16]
 2bc:	ldp	x29, x30, [sp], #32
 2c0:	ret

00000000000002c4 <punpack>:
 2c4:	stp	x29, x30, [sp, #-64]!
 2c8:	stp	x24, x23, [sp, #16]
 2cc:	stp	x22, x21, [sp, #32]
 2d0:	stp	x20, x19, [sp, #48]
 2d4:	mov	x29, sp
 2d8:	mov	x20, x0
 2dc:	bl	3c0 <rcvmsg_create>
 2e0:	mov	x19, x0
 2e4:	bl	224 <get_max_msg_size>
 2e8:	lsl	x0, x0, #1
 2ec:	bl	0 <emalloc>
 2f0:	mov	x21, x0
 2f4:	bl	224 <get_max_msg_size>
 2f8:	lsl	w1, w0, #1
 2fc:	mov	x0, x20
 300:	mov	x2, x21
 304:	bl	404 <read_buf>
 308:	cmp	w0, #0x1
 30c:	b.lt	374 <punpack+0xb0>  // b.tstop
 310:	mov	w23, w0
 314:	mov	w22, w0
 318:	b	324 <punpack+0x60>
 31c:	cmp	w22, #0x0
 320:	b.le	374 <punpack+0xb0>
 324:	mov	x0, x21
 328:	mov	x1, x19
 32c:	bl	464 <get_result>
 330:	sxtw	x8, w22
 334:	sxtw	x24, w0
 338:	sub	x22, x8, x24
 33c:	tbnz	w22, #31, 3a8 <punpack+0xe4>
 340:	add	x1, x21, x24
 344:	mov	x0, x21
 348:	mov	x2, x22
 34c:	bl	0 <memmove>
 350:	cmp	w23, #0x1
 354:	b.lt	31c <punpack+0x58>  // b.tstop
 358:	add	x2, x21, x22
 35c:	mov	x0, x20
 360:	mov	w1, w24
 364:	bl	404 <read_buf>
 368:	mov	w23, w0
 36c:	add	w22, w0, w22
 370:	b	31c <punpack+0x58>
 374:	mov	x0, x21
 378:	bl	0 <free>
 37c:	ldr	w8, [x19]
 380:	cbnz	w8, 390 <punpack+0xcc>
 384:	mov	x0, x19
 388:	bl	0 <free>
 38c:	mov	x19, xzr
 390:	mov	x0, x19
 394:	ldp	x20, x19, [sp, #48]
 398:	ldp	x22, x21, [sp, #32]
 39c:	ldp	x24, x23, [sp, #16]
 3a0:	ldp	x29, x30, [sp], #64
 3a4:	ret
 3a8:	adrp	x0, 0 <check_set_max_msg_size>
 3ac:	adrp	x1, 0 <check_set_max_msg_size>
 3b0:	add	x0, x0, #0x0
 3b4:	add	x1, x1, #0x0
 3b8:	mov	w2, #0x1e6                 	// #486
 3bc:	bl	0 <eprintf>

00000000000003c0 <rcvmsg_create>:
 3c0:	stp	x29, x30, [sp, #-32]!
 3c4:	mov	w0, #0x38                  	// #56
 3c8:	str	x19, [sp, #16]
 3cc:	mov	x29, sp
 3d0:	bl	0 <emalloc>
 3d4:	mov	w8, #0xffffffff            	// #-1
 3d8:	mov	x19, x0
 3dc:	str	xzr, [x0]
 3e0:	str	xzr, [x0, #40]
 3e4:	str	w8, [x0, #48]
 3e8:	bl	8bc <reset_rcv_test>
 3ec:	mov	x0, x19
 3f0:	bl	8cc <reset_rcv_fixture>
 3f4:	mov	x0, x19
 3f8:	ldr	x19, [sp, #16]
 3fc:	ldp	x29, x30, [sp], #32
 400:	ret

0000000000000404 <read_buf>:
 404:	stp	x29, x30, [sp, #-32]!
 408:	stp	x20, x19, [sp, #16]
 40c:	mov	x8, x2
 410:	mov	x20, x0
 414:	sxtw	x2, w1
 418:	mov	w1, #0x1                   	// #1
 41c:	mov	x0, x8
 420:	mov	x3, x20
 424:	mov	x29, sp
 428:	bl	0 <fread>
 42c:	mov	x19, x0
 430:	mov	x0, x20
 434:	bl	0 <ferror>
 438:	cbnz	w0, 44c <read_buf+0x48>
 43c:	mov	w0, w19
 440:	ldp	x20, x19, [sp, #16]
 444:	ldp	x29, x30, [sp], #32
 448:	ret
 44c:	adrp	x0, 0 <check_set_max_msg_size>
 450:	adrp	x1, 0 <check_set_max_msg_size>
 454:	add	x0, x0, #0x0
 458:	add	x1, x1, #0x0
 45c:	mov	w2, #0x15a                 	// #346
 460:	bl	0 <eprintf>

0000000000000464 <get_result>:
 464:	sub	sp, sp, #0x40
 468:	stp	x29, x30, [sp, #32]
 46c:	add	x29, sp, #0x20
 470:	stp	x20, x19, [sp, #48]
 474:	mov	x20, x1
 478:	add	x1, sp, #0x8
 47c:	sub	x2, x29, #0x4
 480:	bl	a0 <upack>
 484:	cmn	w0, #0x1
 488:	b.eq	538 <get_result+0xd4>  // b.none
 48c:	mov	w19, w0
 490:	ldur	w0, [x29, #-4]
 494:	cmp	w0, #0x3
 498:	b.hi	51c <get_result+0xb8>  // b.pmore
 49c:	adrp	x8, 0 <check_set_max_msg_size>
 4a0:	add	x8, x8, #0x0
 4a4:	adr	x9, 4b4 <get_result+0x50>
 4a8:	ldrb	w10, [x8, x0]
 4ac:	add	x9, x9, x10, lsl #2
 4b0:	br	x9
 4b4:	ldr	w1, [sp, #8]
 4b8:	mov	x0, x20
 4bc:	bl	8dc <rcvmsg_update_ctx>
 4c0:	b	524 <get_result+0xc0>
 4c4:	ldr	w8, [x20, #4]
 4c8:	cbnz	w8, 4dc <get_result+0x78>
 4cc:	ldr	x1, [sp, #16]
 4d0:	ldr	w2, [sp, #8]
 4d4:	mov	x0, x20
 4d8:	bl	918 <rcvmsg_update_loc>
 4dc:	ldr	x0, [sp, #16]
 4e0:	bl	0 <free>
 4e4:	b	524 <get_result+0xc0>
 4e8:	ldr	x8, [x20, #40]
 4ec:	cbnz	x8, 504 <get_result+0xa0>
 4f0:	ldr	x0, [sp, #8]
 4f4:	bl	0 <strdup>
 4f8:	ldr	w8, [x20]
 4fc:	str	x0, [x20, #40]
 500:	str	w8, [x20, #4]
 504:	ldr	x0, [sp, #8]
 508:	bl	0 <free>
 50c:	b	524 <get_result+0xc0>
 510:	ldr	w8, [sp, #8]
 514:	str	w8, [x20, #48]
 518:	b	524 <get_result+0xc0>
 51c:	mov	w1, #0x194                 	// #404
 520:	bl	70 <check_type>
 524:	mov	w0, w19
 528:	ldp	x20, x19, [sp, #48]
 52c:	ldp	x29, x30, [sp, #32]
 530:	add	sp, sp, #0x40
 534:	ret
 538:	adrp	x0, 0 <check_set_max_msg_size>
 53c:	adrp	x1, 0 <check_set_max_msg_size>
 540:	add	x0, x0, #0x0
 544:	add	x1, x1, #0x0
 548:	mov	w2, #0x16a                 	// #362
 54c:	bl	0 <eprintf>

0000000000000550 <pack_ctx>:
 550:	sub	sp, sp, #0x30
 554:	stp	x20, x19, [sp, #32]
 558:	mov	x20, x0
 55c:	mov	w0, #0x8                   	// #8
 560:	stp	x29, x30, [sp, #16]
 564:	add	x29, sp, #0x10
 568:	mov	x19, x1
 56c:	bl	0 <emalloc>
 570:	str	x0, [sp, #8]
 574:	str	x0, [x20]
 578:	add	x0, sp, #0x8
 57c:	mov	w1, wzr
 580:	bl	6e4 <pack_type>
 584:	ldr	w1, [x19]
 588:	add	x0, sp, #0x8
 58c:	bl	6f8 <pack_int>
 590:	ldp	x20, x19, [sp, #32]
 594:	ldp	x29, x30, [sp, #16]
 598:	mov	w0, #0x8                   	// #8
 59c:	add	sp, sp, #0x30
 5a0:	ret

00000000000005a4 <pack_fail>:
 5a4:	stp	x29, x30, [sp, #-48]!
 5a8:	stp	x20, x19, [sp, #32]
 5ac:	ldr	x8, [x1]
 5b0:	str	x21, [sp, #16]
 5b4:	mov	x19, x1
 5b8:	mov	x21, x0
 5bc:	mov	x29, sp
 5c0:	cbz	x8, 5d4 <pack_fail+0x30>
 5c4:	mov	x0, x8
 5c8:	bl	0 <strlen>
 5cc:	add	w20, w0, #0x8
 5d0:	b	5d8 <pack_fail+0x34>
 5d4:	mov	w20, #0x8                   	// #8
 5d8:	sxtw	x0, w20
 5dc:	bl	0 <emalloc>
 5e0:	str	x0, [x29, #24]
 5e4:	str	x0, [x21]
 5e8:	add	x0, x29, #0x18
 5ec:	mov	w1, #0x1                   	// #1
 5f0:	bl	6e4 <pack_type>
 5f4:	ldr	x1, [x19]
 5f8:	add	x0, x29, #0x18
 5fc:	bl	714 <pack_str>
 600:	mov	w0, w20
 604:	ldp	x20, x19, [sp, #32]
 608:	ldr	x21, [sp, #16]
 60c:	ldp	x29, x30, [sp], #48
 610:	ret

0000000000000614 <pack_loc>:
 614:	stp	x29, x30, [sp, #-48]!
 618:	stp	x20, x19, [sp, #32]
 61c:	ldr	x8, [x1, #8]
 620:	str	x21, [sp, #16]
 624:	mov	x19, x1
 628:	mov	x21, x0
 62c:	mov	x29, sp
 630:	cbz	x8, 644 <pack_loc+0x30>
 634:	mov	x0, x8
 638:	bl	0 <strlen>
 63c:	add	w20, w0, #0xc
 640:	b	648 <pack_loc+0x34>
 644:	mov	w20, #0xc                   	// #12
 648:	sxtw	x0, w20
 64c:	bl	0 <emalloc>
 650:	str	x0, [x29, #24]
 654:	str	x0, [x21]
 658:	add	x0, x29, #0x18
 65c:	mov	w1, #0x2                   	// #2
 660:	bl	6e4 <pack_type>
 664:	ldr	x1, [x19, #8]
 668:	add	x0, x29, #0x18
 66c:	bl	714 <pack_str>
 670:	ldr	w1, [x19]
 674:	add	x0, x29, #0x18
 678:	bl	6f8 <pack_int>
 67c:	mov	w0, w20
 680:	ldp	x20, x19, [sp, #32]
 684:	ldr	x21, [sp, #16]
 688:	ldp	x29, x30, [sp], #48
 68c:	ret

0000000000000690 <pack_duration>:
 690:	sub	sp, sp, #0x30
 694:	stp	x20, x19, [sp, #32]
 698:	mov	x20, x0
 69c:	mov	w0, #0x8                   	// #8
 6a0:	stp	x29, x30, [sp, #16]
 6a4:	add	x29, sp, #0x10
 6a8:	mov	x19, x1
 6ac:	bl	0 <emalloc>
 6b0:	str	x0, [sp, #8]
 6b4:	str	x0, [x20]
 6b8:	add	x0, sp, #0x8
 6bc:	mov	w1, #0x3                   	// #3
 6c0:	bl	6e4 <pack_type>
 6c4:	ldr	w1, [x19]
 6c8:	add	x0, sp, #0x8
 6cc:	bl	6f8 <pack_int>
 6d0:	ldp	x20, x19, [sp, #32]
 6d4:	ldp	x29, x30, [sp, #16]
 6d8:	mov	w0, #0x8                   	// #8
 6dc:	add	sp, sp, #0x30
 6e0:	ret

00000000000006e4 <pack_type>:
 6e4:	stp	x29, x30, [sp, #-16]!
 6e8:	mov	x29, sp
 6ec:	bl	6f8 <pack_int>
 6f0:	ldp	x29, x30, [sp], #16
 6f4:	ret

00000000000006f8 <pack_int>:
 6f8:	ldr	x8, [x0]
 6fc:	rev	w9, w1
 700:	str	w9, [x8]
 704:	ldr	x8, [x0]
 708:	add	x8, x8, #0x4
 70c:	str	x8, [x0]
 710:	ret

0000000000000714 <pack_str>:
 714:	stp	x29, x30, [sp, #-48]!
 718:	stp	x20, x19, [sp, #32]
 71c:	mov	x20, x1
 720:	mov	x19, x0
 724:	str	x21, [sp, #16]
 728:	mov	x29, sp
 72c:	cbz	x1, 740 <pack_str+0x2c>
 730:	mov	x0, x20
 734:	bl	0 <strlen>
 738:	mov	x21, x0
 73c:	b	744 <pack_str+0x30>
 740:	mov	w21, wzr
 744:	mov	x0, x19
 748:	mov	w1, w21
 74c:	bl	6f8 <pack_int>
 750:	cmp	w21, #0x1
 754:	b.lt	778 <pack_str+0x64>  // b.tstop
 758:	ldr	x0, [x19]
 75c:	sxtw	x21, w21
 760:	mov	x1, x20
 764:	mov	x2, x21
 768:	bl	0 <memcpy>
 76c:	ldr	x8, [x19]
 770:	add	x8, x8, x21
 774:	str	x8, [x19]
 778:	ldp	x20, x19, [sp, #32]
 77c:	ldr	x21, [sp, #16]
 780:	ldp	x29, x30, [sp], #48
 784:	ret

0000000000000788 <upack_ctx>:
 788:	stp	x29, x30, [sp, #-32]!
 78c:	str	x19, [sp, #16]
 790:	mov	x29, sp
 794:	mov	x19, x1
 798:	bl	828 <upack_int>
 79c:	str	w0, [x19]
 7a0:	ldr	x19, [sp, #16]
 7a4:	ldp	x29, x30, [sp], #32
 7a8:	ret

00000000000007ac <upack_fail>:
 7ac:	stp	x29, x30, [sp, #-32]!
 7b0:	str	x19, [sp, #16]
 7b4:	mov	x29, sp
 7b8:	mov	x19, x1
 7bc:	bl	840 <upack_str>
 7c0:	str	x0, [x19]
 7c4:	ldr	x19, [sp, #16]
 7c8:	ldp	x29, x30, [sp], #32
 7cc:	ret

00000000000007d0 <upack_loc>:
 7d0:	stp	x29, x30, [sp, #-32]!
 7d4:	stp	x20, x19, [sp, #16]
 7d8:	mov	x29, sp
 7dc:	mov	x19, x1
 7e0:	mov	x20, x0
 7e4:	bl	840 <upack_str>
 7e8:	str	x0, [x19, #8]
 7ec:	mov	x0, x20
 7f0:	bl	828 <upack_int>
 7f4:	str	w0, [x19]
 7f8:	ldp	x20, x19, [sp, #16]
 7fc:	ldp	x29, x30, [sp], #32
 800:	ret

0000000000000804 <upack_duration>:
 804:	stp	x29, x30, [sp, #-32]!
 808:	str	x19, [sp, #16]
 80c:	mov	x29, sp
 810:	mov	x19, x1
 814:	bl	828 <upack_int>
 818:	str	w0, [x19]
 81c:	ldr	x19, [sp, #16]
 820:	ldp	x29, x30, [sp], #32
 824:	ret

0000000000000828 <upack_int>:
 828:	ldr	x9, [x0]
 82c:	ldr	w8, [x9], #4
 830:	rev	w8, w8
 834:	str	x9, [x0]
 838:	mov	w0, w8
 83c:	ret

0000000000000840 <upack_str>:
 840:	stp	x29, x30, [sp, #-48]!
 844:	str	x21, [sp, #16]
 848:	stp	x20, x19, [sp, #32]
 84c:	mov	x29, sp
 850:	mov	x19, x0
 854:	bl	828 <upack_int>
 858:	cmp	w0, #0x1
 85c:	b.lt	898 <upack_str+0x58>  // b.tstop
 860:	add	w8, w0, #0x1
 864:	mov	w21, w0
 868:	sxtw	x0, w8
 86c:	bl	0 <emalloc>
 870:	ldr	x1, [x19]
 874:	sxtw	x21, w21
 878:	mov	x2, x21
 87c:	mov	x20, x0
 880:	bl	0 <memcpy>
 884:	strb	wzr, [x20, x21]
 888:	ldr	x8, [x19]
 88c:	add	x8, x8, x21
 890:	str	x8, [x19]
 894:	b	8a8 <upack_str+0x68>
 898:	mov	w0, #0x1                   	// #1
 89c:	bl	0 <emalloc>
 8a0:	mov	x20, x0
 8a4:	strb	wzr, [x0]
 8a8:	mov	x0, x20
 8ac:	ldp	x20, x19, [sp, #32]
 8b0:	ldr	x21, [sp, #16]
 8b4:	ldp	x29, x30, [sp], #48
 8b8:	ret

00000000000008bc <reset_rcv_test>:
 8bc:	mov	w8, #0xffffffff            	// #-1
 8c0:	str	w8, [x0, #32]
 8c4:	str	xzr, [x0, #24]
 8c8:	ret

00000000000008cc <reset_rcv_fixture>:
 8cc:	mov	w8, #0xffffffff            	// #-1
 8d0:	str	w8, [x0, #16]
 8d4:	str	xzr, [x0, #8]
 8d8:	ret

00000000000008dc <rcvmsg_update_ctx>:
 8dc:	stp	x29, x30, [sp, #-32]!
 8e0:	stp	x20, x19, [sp, #16]
 8e4:	ldr	w8, [x0]
 8e8:	mov	x19, x0
 8ec:	mov	w20, w1
 8f0:	mov	x29, sp
 8f4:	cbz	w8, 908 <rcvmsg_update_ctx+0x2c>
 8f8:	ldr	x0, [x19, #8]
 8fc:	bl	0 <free>
 900:	mov	x0, x19
 904:	bl	8cc <reset_rcv_fixture>
 908:	str	w20, [x19]
 90c:	ldp	x20, x19, [sp, #16]
 910:	ldp	x29, x30, [sp], #32
 914:	ret

0000000000000918 <rcvmsg_update_loc>:
 918:	stp	x29, x30, [sp, #-48]!
 91c:	stp	x20, x19, [sp, #32]
 920:	ldr	w8, [x0]
 924:	str	x21, [sp, #16]
 928:	mov	w20, w2
 92c:	mov	x19, x0
 930:	cmp	w8, #0x2
 934:	mov	x21, x1
 938:	mov	x29, sp
 93c:	b.ne	948 <rcvmsg_update_loc+0x30>  // b.any
 940:	ldr	x0, [x19, #24]!
 944:	b	94c <rcvmsg_update_loc+0x34>
 948:	ldr	x0, [x19, #8]!
 94c:	bl	0 <free>
 950:	add	x8, x19, #0x8
 954:	mov	x0, x21
 958:	str	w20, [x8]
 95c:	bl	0 <strdup>
 960:	str	x0, [x19]
 964:	ldp	x20, x19, [sp, #32]
 968:	ldr	x21, [sp, #16]
 96c:	ldp	x29, x30, [sp], #48
 970:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_print>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <stdout>
   8:	ldr	x8, [x8]
   c:	mov	w2, w1
  10:	mov	x1, x0
  14:	mov	x29, sp
  18:	mov	x0, x8
  1c:	bl	28 <srunner_fprint>
  20:	ldp	x29, x30, [sp], #16
  24:	ret

0000000000000028 <srunner_fprint>:
  28:	stp	x29, x30, [sp, #-48]!
  2c:	str	x21, [sp, #16]
  30:	stp	x20, x19, [sp, #32]
  34:	mov	w20, w2
  38:	mov	x19, x1
  3c:	cmp	w2, #0x4
  40:	mov	x21, x0
  44:	mov	x29, sp
  48:	b.ne	54 <srunner_fprint+0x2c>  // b.any
  4c:	bl	84 <get_env_printmode>
  50:	mov	w20, w0
  54:	mov	x0, x21
  58:	mov	x1, x19
  5c:	mov	w2, w20
  60:	bl	100 <srunner_fprint_summary>
  64:	mov	x0, x21
  68:	mov	x1, x19
  6c:	mov	w2, w20
  70:	bl	148 <srunner_fprint_results>
  74:	ldp	x20, x19, [sp, #32]
  78:	ldr	x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret

0000000000000084 <get_env_printmode>:
  84:	stp	x29, x30, [sp, #-32]!
  88:	adrp	x0, 0 <srunner_print>
  8c:	add	x0, x0, #0x0
  90:	str	x19, [sp, #16]
  94:	mov	x29, sp
  98:	bl	0 <getenv>
  9c:	cbz	x0, e8 <get_env_printmode+0x64>
  a0:	adrp	x1, 0 <srunner_print>
  a4:	add	x1, x1, #0x0
  a8:	mov	x19, x0
  ac:	bl	0 <strcmp>
  b0:	cbz	w0, f4 <get_env_printmode+0x70>
  b4:	adrp	x1, 0 <srunner_print>
  b8:	add	x1, x1, #0x0
  bc:	mov	x0, x19
  c0:	bl	0 <strcmp>
  c4:	cbz	w0, f0 <get_env_printmode+0x6c>
  c8:	adrp	x1, 0 <srunner_print>
  cc:	add	x1, x1, #0x0
  d0:	mov	x0, x19
  d4:	bl	0 <strcmp>
  d8:	cmp	w0, #0x0
  dc:	mov	w8, #0x2                   	// #2
  e0:	cinc	w0, w8, eq  // eq = none
  e4:	b	f4 <get_env_printmode+0x70>
  e8:	mov	w0, #0x2                   	// #2
  ec:	b	f4 <get_env_printmode+0x70>
  f0:	mov	w0, #0x1                   	// #1
  f4:	ldr	x19, [sp, #16]
  f8:	ldp	x29, x30, [sp], #32
  fc:	ret

0000000000000100 <srunner_fprint_summary>:
 100:	cbz	w2, 144 <srunner_fprint_summary+0x44>
 104:	stp	x29, x30, [sp, #-32]!
 108:	stp	x20, x19, [sp, #16]
 10c:	mov	x19, x0
 110:	mov	x0, x1
 114:	mov	x29, sp
 118:	bl	0 <sr_stat_str>
 11c:	mov	x20, x0
 120:	adrp	x1, 0 <srunner_print>
 124:	add	x1, x1, #0x0
 128:	mov	x0, x19
 12c:	mov	x2, x20
 130:	bl	0 <fprintf>
 134:	mov	x0, x20
 138:	bl	0 <free>
 13c:	ldp	x20, x19, [sp, #16]
 140:	ldp	x29, x30, [sp], #32
 144:	ret

0000000000000148 <srunner_fprint_results>:
 148:	stp	x29, x30, [sp, #-48]!
 14c:	stp	x20, x19, [sp, #32]
 150:	ldr	x20, [x1, #16]
 154:	str	x21, [sp, #16]
 158:	mov	x21, x0
 15c:	mov	x29, sp
 160:	mov	x0, x20
 164:	mov	w19, w2
 168:	bl	0 <check_list_front>
 16c:	mov	x0, x20
 170:	bl	0 <check_list_at_end>
 174:	cbnz	w0, 19c <srunner_fprint_results+0x54>
 178:	mov	x0, x20
 17c:	bl	0 <check_list_val>
 180:	mov	x1, x0
 184:	mov	x0, x21
 188:	mov	w2, w19
 18c:	bl	300 <tr_fprint>
 190:	mov	x0, x20
 194:	bl	0 <check_list_advance>
 198:	b	16c <srunner_fprint_results+0x24>
 19c:	ldp	x20, x19, [sp, #32]
 1a0:	ldr	x21, [sp, #16]
 1a4:	ldp	x29, x30, [sp], #48
 1a8:	ret

00000000000001ac <fprint_xml_esc>:
 1ac:	stp	x29, x30, [sp, #-96]!
 1b0:	stp	x28, x27, [sp, #16]
 1b4:	stp	x26, x25, [sp, #32]
 1b8:	stp	x24, x23, [sp, #48]
 1bc:	stp	x22, x21, [sp, #64]
 1c0:	adrp	x21, 0 <srunner_print>
 1c4:	adrp	x27, 0 <srunner_print>
 1c8:	adrp	x22, 0 <srunner_print>
 1cc:	adrp	x23, 0 <srunner_print>
 1d0:	adrp	x24, 0 <srunner_print>
 1d4:	adrp	x25, 0 <srunner_print>
 1d8:	adrp	x26, 0 <srunner_print>
 1dc:	stp	x20, x19, [sp, #80]
 1e0:	mov	x19, x1
 1e4:	mov	x20, x0
 1e8:	add	x21, x21, #0x0
 1ec:	mov	w28, #0x2600                	// #9728
 1f0:	add	x27, x27, #0x0
 1f4:	add	x22, x22, #0x0
 1f8:	add	x23, x23, #0x0
 1fc:	add	x24, x24, #0x0
 200:	add	x25, x25, #0x0
 204:	add	x26, x26, #0x0
 208:	mov	x29, sp
 20c:	b	228 <fprint_xml_esc+0x7c>
 210:	mov	w1, #0x6                   	// #6
 214:	mov	w2, #0x1                   	// #1
 218:	mov	x0, x22
 21c:	mov	x3, x20
 220:	bl	0 <fwrite>
 224:	add	x19, x19, #0x1
 228:	ldrb	w2, [x19]
 22c:	sub	w8, w2, #0x22
 230:	cmp	w8, #0x1c
 234:	b.hi	288 <fprint_xml_esc+0xdc>  // b.pmore
 238:	adr	x9, 210 <fprint_xml_esc+0x64>
 23c:	ldrb	w10, [x27, x8]
 240:	add	x9, x9, x10, lsl #2
 244:	br	x9
 248:	mov	w1, #0x5                   	// #5
 24c:	mov	w2, #0x1                   	// #1
 250:	mov	x0, x23
 254:	b	21c <fprint_xml_esc+0x70>
 258:	mov	w1, #0x6                   	// #6
 25c:	mov	w2, #0x1                   	// #1
 260:	mov	x0, x24
 264:	b	21c <fprint_xml_esc+0x70>
 268:	mov	w1, #0x4                   	// #4
 26c:	mov	w2, #0x1                   	// #1
 270:	mov	x0, x25
 274:	b	21c <fprint_xml_esc+0x70>
 278:	mov	w1, #0x4                   	// #4
 27c:	mov	w2, #0x1                   	// #1
 280:	mov	x0, x26
 284:	b	21c <fprint_xml_esc+0x70>
 288:	cbz	w2, 2e4 <fprint_xml_esc+0x138>
 28c:	sub	w8, w2, #0x20
 290:	cmp	w8, #0x5e
 294:	b.hi	2ac <fprint_xml_esc+0x100>  // b.pmore
 298:	mov	w0, w2
 29c:	mov	x1, x20
 2a0:	bl	0 <fputc>
 2a4:	add	x19, x19, #0x1
 2a8:	b	228 <fprint_xml_esc+0x7c>
 2ac:	cmp	w2, #0xd
 2b0:	b.hi	2d8 <fprint_xml_esc+0x12c>  // b.pmore
 2b4:	mov	w8, #0x1                   	// #1
 2b8:	lsl	w8, w8, w2
 2bc:	tst	w8, w28
 2c0:	b.eq	2d8 <fprint_xml_esc+0x12c>  // b.none
 2c4:	mov	x0, x20
 2c8:	mov	x1, x21
 2cc:	bl	0 <fprintf>
 2d0:	add	x19, x19, #0x1
 2d4:	b	228 <fprint_xml_esc+0x7c>
 2d8:	cmp	w2, #0x20
 2dc:	b.cs	2c4 <fprint_xml_esc+0x118>  // b.hs, b.nlast
 2e0:	b	2d0 <fprint_xml_esc+0x124>
 2e4:	ldp	x20, x19, [sp, #80]
 2e8:	ldp	x22, x21, [sp, #64]
 2ec:	ldp	x24, x23, [sp, #48]
 2f0:	ldp	x26, x25, [sp, #32]
 2f4:	ldp	x28, x27, [sp, #16]
 2f8:	ldp	x29, x30, [sp], #96
 2fc:	ret

0000000000000300 <tr_fprint>:
 300:	stp	x29, x30, [sp, #-32]!
 304:	stp	x20, x19, [sp, #16]
 308:	mov	x20, x1
 30c:	cmp	w2, #0x4
 310:	mov	x19, x0
 314:	mov	x29, sp
 318:	b.ne	324 <tr_fprint+0x24>  // b.any
 31c:	bl	84 <get_env_printmode>
 320:	mov	w2, w0
 324:	cmp	w2, #0x3
 328:	b.cc	338 <tr_fprint+0x38>  // b.lo, b.ul, b.last
 32c:	ldr	w8, [x20]
 330:	cmp	w8, #0x1
 334:	b.eq	34c <tr_fprint+0x4c>  // b.none
 338:	cmp	w2, #0x2
 33c:	b.cc	374 <tr_fprint+0x74>  // b.lo, b.ul, b.last
 340:	ldr	w8, [x20]
 344:	cmp	w8, #0x1
 348:	b.eq	374 <tr_fprint+0x74>  // b.none
 34c:	mov	x0, x20
 350:	bl	0 <tr_str>
 354:	mov	x20, x0
 358:	adrp	x1, 0 <srunner_print>
 35c:	add	x1, x1, #0x0
 360:	mov	x0, x19
 364:	mov	x2, x20
 368:	bl	0 <fprintf>
 36c:	mov	x0, x20
 370:	bl	0 <free>
 374:	ldp	x20, x19, [sp, #16]
 378:	ldp	x29, x30, [sp], #32
 37c:	ret

0000000000000380 <tr_xmlprint>:
 380:	sub	sp, sp, #0x50
 384:	stp	x29, x30, [sp, #16]
 388:	stp	x22, x21, [sp, #48]
 38c:	stp	x20, x19, [sp, #64]
 390:	ldr	w8, [x1]
 394:	mov	x20, x1
 398:	mov	x19, x0
 39c:	str	x23, [sp, #32]
 3a0:	cmp	w8, #0x3
 3a4:	add	x29, sp, #0x10
 3a8:	b.eq	424 <tr_xmlprint+0xa4>  // b.none
 3ac:	cmp	w8, #0x2
 3b0:	b.eq	3d0 <tr_xmlprint+0x50>  // b.none
 3b4:	cmp	w8, #0x1
 3b8:	b.ne	5dc <tr_xmlprint+0x25c>  // b.any
 3bc:	mov	x8, #0x7573                	// #30067
 3c0:	movk	x8, #0x6363, lsl #16
 3c4:	movk	x8, #0x7365, lsl #32
 3c8:	movk	x8, #0x73, lsl #48
 3cc:	b	3e0 <tr_xmlprint+0x60>
 3d0:	mov	x8, #0x6166                	// #24934
 3d4:	movk	x8, #0x6c69, lsl #16
 3d8:	movk	x8, #0x7275, lsl #32
 3dc:	movk	x8, #0x65, lsl #48
 3e0:	str	x8, [sp]
 3e4:	ldr	x21, [x20, #8]
 3e8:	cbz	x21, 440 <tr_xmlprint+0xc0>
 3ec:	mov	w1, #0x2f                  	// #47
 3f0:	mov	x0, x21
 3f4:	bl	0 <strrchr>
 3f8:	mov	x22, x0
 3fc:	cbz	x0, 448 <tr_xmlprint+0xc8>
 400:	cbz	x22, 45c <tr_xmlprint+0xdc>
 404:	mov	x0, x21
 408:	bl	0 <strdup>
 40c:	ldr	x8, [x20, #8]
 410:	mov	x21, x0
 414:	sub	x8, x22, x8
 418:	add	x22, x22, #0x1
 41c:	strb	wzr, [x0, x8]
 420:	b	470 <tr_xmlprint+0xf0>
 424:	mov	w9, #0x7265                	// #29285
 428:	mov	w8, #0x72                  	// #114
 42c:	movk	w9, #0x6f72, lsl #16
 430:	strh	w8, [sp, #4]
 434:	str	w9, [sp]
 438:	ldr	x21, [x20, #8]
 43c:	cbnz	x21, 3ec <tr_xmlprint+0x6c>
 440:	mov	x22, xzr
 444:	b	470 <tr_xmlprint+0xf0>
 448:	mov	w1, #0x5c                  	// #92
 44c:	mov	x0, x21
 450:	bl	0 <strrchr>
 454:	mov	x22, x0
 458:	cbnz	x22, 404 <tr_xmlprint+0x84>
 45c:	adrp	x0, 0 <srunner_print>
 460:	add	x0, x0, #0x0
 464:	bl	0 <strdup>
 468:	ldr	x22, [x20, #8]
 46c:	mov	x21, x0
 470:	adrp	x1, 0 <srunner_print>
 474:	add	x1, x1, #0x0
 478:	mov	x2, sp
 47c:	mov	x0, x19
 480:	bl	0 <fprintf>
 484:	adrp	x23, 0 <srunner_print>
 488:	add	x23, x23, #0x0
 48c:	cmp	x21, #0x0
 490:	adrp	x1, 0 <srunner_print>
 494:	csel	x2, x23, x21, eq  // eq = none
 498:	add	x1, x1, #0x0
 49c:	mov	x0, x19
 4a0:	bl	0 <fprintf>
 4a4:	ldr	w3, [x20, #16]
 4a8:	cmp	x22, #0x0
 4ac:	adrp	x1, 0 <srunner_print>
 4b0:	csel	x2, x23, x22, eq  // eq = none
 4b4:	add	x1, x1, #0x0
 4b8:	mov	x0, x19
 4bc:	bl	0 <fprintf>
 4c0:	ldr	x2, [x20, #40]
 4c4:	adrp	x1, 0 <srunner_print>
 4c8:	add	x1, x1, #0x0
 4cc:	mov	x0, x19
 4d0:	bl	0 <fprintf>
 4d4:	ldr	w2, [x20, #20]
 4d8:	adrp	x1, 0 <srunner_print>
 4dc:	add	x1, x1, #0x0
 4e0:	mov	x0, x19
 4e4:	bl	0 <fprintf>
 4e8:	ldrsw	x8, [x20, #24]
 4ec:	mov	w9, #0xde83                	// #56963
 4f0:	movk	w9, #0x431b, lsl #16
 4f4:	mov	w10, #0x4240                	// #16960
 4f8:	mul	x9, x8, x9
 4fc:	lsr	x11, x9, #32
 500:	lsr	x9, x9, #63
 504:	movk	w10, #0xf, lsl #16
 508:	add	w9, w9, w11, asr #18
 50c:	cmp	w8, #0x0
 510:	msub	w8, w9, w10, w8
 514:	adrp	x1, 0 <srunner_print>
 518:	csinv	w2, w9, wzr, ge  // ge = tcont
 51c:	csel	w3, wzr, w8, lt  // lt = tstop
 520:	add	x1, x1, #0x0
 524:	mov	x0, x19
 528:	bl	0 <fprintf>
 52c:	adrp	x0, 0 <srunner_print>
 530:	add	x0, x0, #0x0
 534:	mov	w1, #0x13                  	// #19
 538:	mov	w2, #0x1                   	// #1
 53c:	mov	x3, x19
 540:	bl	0 <fwrite>
 544:	ldr	x1, [x20, #32]
 548:	mov	x0, x19
 54c:	bl	1ac <fprint_xml_esc>
 550:	adrp	x0, 0 <srunner_print>
 554:	add	x0, x0, #0x0
 558:	mov	w1, #0xf                   	// #15
 55c:	mov	w2, #0x1                   	// #1
 560:	mov	x3, x19
 564:	bl	0 <fwrite>
 568:	adrp	x0, 0 <srunner_print>
 56c:	add	x0, x0, #0x0
 570:	mov	w1, #0xf                   	// #15
 574:	mov	w2, #0x1                   	// #1
 578:	mov	x3, x19
 57c:	bl	0 <fwrite>
 580:	ldr	x1, [x20, #48]
 584:	mov	x0, x19
 588:	bl	1ac <fprint_xml_esc>
 58c:	adrp	x0, 0 <srunner_print>
 590:	add	x0, x0, #0x0
 594:	mov	w1, #0xb                   	// #11
 598:	mov	w2, #0x1                   	// #1
 59c:	mov	x3, x19
 5a0:	bl	0 <fwrite>
 5a4:	adrp	x0, 0 <srunner_print>
 5a8:	add	x0, x0, #0x0
 5ac:	mov	w1, #0xc                   	// #12
 5b0:	mov	w2, #0x1                   	// #1
 5b4:	mov	x3, x19
 5b8:	bl	0 <fwrite>
 5bc:	mov	x0, x21
 5c0:	bl	0 <free>
 5c4:	ldp	x20, x19, [sp, #64]
 5c8:	ldp	x22, x21, [sp, #48]
 5cc:	ldr	x23, [sp, #32]
 5d0:	ldp	x29, x30, [sp, #16]
 5d4:	add	sp, sp, #0x50
 5d8:	ret
 5dc:	bl	0 <abort>

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_fork_status>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	str	x19, [sp, #16]
       8:	ldr	w19, [x0, #56]
       c:	mov	x29, sp
      10:	cbnz	w19, 3c <srunner_fork_status+0x3c>
      14:	adrp	x0, 0 <srunner_fork_status>
      18:	add	x0, x0, #0x0
      1c:	bl	0 <getenv>
      20:	mov	w19, #0x1                   	// #1
      24:	cbz	x0, 3c <srunner_fork_status+0x3c>
      28:	adrp	x1, 0 <srunner_fork_status>
      2c:	add	x1, x1, #0x0
      30:	bl	0 <strcmp>
      34:	cmp	w0, #0x0
      38:	cinc	w19, w19, eq  // eq = none
      3c:	mov	w0, w19
      40:	ldr	x19, [sp, #16]
      44:	ldp	x29, x30, [sp], #32
      48:	ret

000000000000004c <srunner_set_fork_status>:
      4c:	str	w1, [x0, #56]
      50:	ret

0000000000000054 <srunner_run_all>:
      54:	stp	x29, x30, [sp, #-16]!
      58:	mov	w3, w1
      5c:	mov	x1, xzr
      60:	mov	x2, xzr
      64:	mov	x29, sp
      68:	bl	74 <srunner_run>
      6c:	ldp	x29, x30, [sp], #16
      70:	ret

0000000000000074 <srunner_run>:
      74:	stp	x29, x30, [sp, #-16]!
      78:	mov	w5, w3
      7c:	mov	x3, xzr
      80:	mov	x4, xzr
      84:	mov	x29, sp
      88:	bl	94 <srunner_run_tagged>
      8c:	ldp	x29, x30, [sp], #16
      90:	ret

0000000000000094 <srunner_run_tagged>:
      94:	stp	x29, x30, [sp, #-96]!
      98:	stp	x24, x23, [sp, #48]
      9c:	stp	x22, x21, [sp, #64]
      a0:	stp	x20, x19, [sp, #80]
      a4:	mov	w19, w5
      a8:	mov	x21, x4
      ac:	mov	x22, x3
      b0:	mov	x23, x2
      b4:	mov	x24, x1
      b8:	mov	x20, x0
      bc:	str	x27, [sp, #16]
      c0:	stp	x26, x25, [sp, #32]
      c4:	mov	x29, sp
      c8:	cbz	x2, e0 <srunner_run_tagged+0x4c>
      cc:	cbz	x24, f4 <srunner_run_tagged+0x60>
      d0:	cbz	x22, 108 <srunner_run_tagged+0x74>
      d4:	cbz	x21, 11c <srunner_run_tagged+0x88>
      d8:	cbnz	x20, 130 <srunner_run_tagged+0x9c>
      dc:	b	250 <srunner_run_tagged+0x1bc>
      e0:	adrp	x0, 0 <srunner_fork_status>
      e4:	add	x0, x0, #0x0
      e8:	bl	0 <getenv>
      ec:	mov	x23, x0
      f0:	cbnz	x24, d0 <srunner_run_tagged+0x3c>
      f4:	adrp	x0, 0 <srunner_fork_status>
      f8:	add	x0, x0, #0x0
      fc:	bl	0 <getenv>
     100:	mov	x24, x0
     104:	cbnz	x22, d4 <srunner_run_tagged+0x40>
     108:	adrp	x0, 0 <srunner_fork_status>
     10c:	add	x0, x0, #0x0
     110:	bl	0 <getenv>
     114:	mov	x22, x0
     118:	cbnz	x21, d8 <srunner_run_tagged+0x44>
     11c:	adrp	x0, 0 <srunner_fork_status>
     120:	add	x0, x0, #0x0
     124:	bl	0 <getenv>
     128:	mov	x21, x0
     12c:	cbz	x20, 250 <srunner_run_tagged+0x1bc>
     130:	cmp	w19, #0x5
     134:	b.cs	26c <srunner_run_tagged+0x1d8>  // b.hs, b.nlast
     138:	adrp	x25, 0 <srunner_fork_status>
     13c:	adrp	x1, 0 <srunner_fork_status>
     140:	adrp	x27, 0 <srunner_fork_status>
     144:	add	x25, x25, #0x0
     148:	add	x1, x1, #0x0
     14c:	movi	v0.2d, #0x0
     150:	add	x27, x27, #0x0
     154:	mov	w0, #0xe                   	// #14
     158:	mov	x2, x25
     15c:	str	xzr, [x1, #144]
     160:	stp	q0, q0, [x1, #112]
     164:	stp	q0, q0, [x1, #80]
     168:	stp	q0, q0, [x1, #48]
     16c:	stp	q0, q0, [x1, #16]
     170:	str	q0, [x1]
     174:	str	x27, [x1]
     178:	bl	0 <sigaction>
     17c:	adrp	x26, 0 <srunner_fork_status>
     180:	adrp	x1, 0 <srunner_fork_status>
     184:	add	x26, x26, #0x0
     188:	add	x1, x1, #0x0
     18c:	movi	v0.2d, #0x0
     190:	mov	w0, #0x2                   	// #2
     194:	mov	x2, x26
     198:	stp	q0, q0, [x1]
     19c:	stp	q0, q0, [x1, #32]
     1a0:	stp	q0, q0, [x1, #64]
     1a4:	stp	q0, q0, [x1, #96]
     1a8:	str	q0, [x1, #128]
     1ac:	str	xzr, [x1, #144]
     1b0:	str	x27, [x1]
     1b4:	bl	0 <sigaction>
     1b8:	adrp	x1, 0 <srunner_fork_status>
     1bc:	add	x1, x1, #0x0
     1c0:	movi	v0.2d, #0x0
     1c4:	stp	q0, q0, [x1]
     1c8:	str	x27, [x1]
     1cc:	adrp	x27, 0 <srunner_fork_status>
     1d0:	add	x27, x27, #0x0
     1d4:	mov	w0, #0xf                   	// #15
     1d8:	mov	x2, x27
     1dc:	stp	q0, q0, [x1, #32]
     1e0:	stp	q0, q0, [x1, #64]
     1e4:	stp	q0, q0, [x1, #96]
     1e8:	str	q0, [x1, #128]
     1ec:	str	xzr, [x1, #144]
     1f0:	bl	0 <sigaction>
     1f4:	mov	x0, x20
     1f8:	mov	w1, w19
     1fc:	bl	340 <srunner_run_init>
     200:	mov	x0, x20
     204:	mov	x1, x24
     208:	mov	x2, x23
     20c:	mov	x3, x22
     210:	mov	x4, x21
     214:	bl	380 <srunner_iterate_suites>
     218:	mov	x0, x20
     21c:	bl	51c <srunner_run_end>
     220:	mov	w0, #0xe                   	// #14
     224:	mov	x1, x25
     228:	mov	x2, xzr
     22c:	bl	0 <sigaction>
     230:	mov	w0, #0x2                   	// #2
     234:	mov	x1, x26
     238:	mov	x2, xzr
     23c:	bl	0 <sigaction>
     240:	mov	w0, #0xf                   	// #15
     244:	mov	x1, x27
     248:	mov	x2, xzr
     24c:	bl	0 <sigaction>
     250:	ldp	x20, x19, [sp, #80]
     254:	ldp	x22, x21, [sp, #64]
     258:	ldp	x24, x23, [sp, #48]
     25c:	ldp	x26, x25, [sp, #32]
     260:	ldr	x27, [sp, #16]
     264:	ldp	x29, x30, [sp], #96
     268:	ret
     26c:	adrp	x0, 0 <srunner_fork_status>
     270:	adrp	x1, 0 <srunner_fork_status>
     274:	add	x0, x0, #0x0
     278:	add	x1, x1, #0x0
     27c:	mov	w2, #0x31e                 	// #798
     280:	mov	w3, w19
     284:	bl	0 <eprintf>

0000000000000288 <sig_handler>:
     288:	stp	x29, x30, [sp, #-32]!
     28c:	stp	x20, x19, [sp, #16]
     290:	mov	w19, w0
     294:	cmp	w0, #0x2
     298:	mov	x29, sp
     29c:	b.eq	2e8 <sig_handler+0x60>  // b.none
     2a0:	cmp	w19, #0xf
     2a4:	b.eq	2cc <sig_handler+0x44>  // b.none
     2a8:	cmp	w19, #0xe
     2ac:	b.ne	324 <sig_handler+0x9c>  // b.any
     2b0:	adrp	x8, 0 <srunner_fork_status>
     2b4:	ldr	w0, [x8]
     2b8:	adrp	x8, 0 <srunner_fork_status>
     2bc:	mov	w9, #0x1                   	// #1
     2c0:	strb	w9, [x8]
     2c4:	mov	w1, #0x9                   	// #9
     2c8:	b	314 <sig_handler+0x8c>
     2cc:	adrp	x1, 0 <srunner_fork_status>
     2d0:	add	x1, x1, #0x0
     2d4:	mov	w0, #0xf                   	// #15
     2d8:	mov	x2, xzr
     2dc:	mov	w20, #0xf                   	// #15
     2e0:	bl	0 <sigaction>
     2e4:	b	2fc <sig_handler+0x74>
     2e8:	adrp	x1, 0 <srunner_fork_status>
     2ec:	add	x1, x1, #0x0
     2f0:	mov	x2, xzr
     2f4:	bl	0 <sigaction>
     2f8:	mov	w20, #0x9                   	// #9
     2fc:	adrp	x8, 0 <srunner_fork_status>
     300:	ldr	w0, [x8]
     304:	mov	w1, w20
     308:	bl	0 <killpg>
     30c:	bl	0 <getpgrp>
     310:	mov	w1, w19
     314:	bl	0 <killpg>
     318:	ldp	x20, x19, [sp, #16]
     31c:	ldp	x29, x30, [sp], #32
     320:	ret
     324:	adrp	x0, 0 <srunner_fork_status>
     328:	adrp	x1, 0 <srunner_fork_status>
     32c:	add	x0, x0, #0x0
     330:	add	x1, x1, #0x0
     334:	mov	w2, #0x8e                  	// #142
     338:	mov	w3, w19
     33c:	bl	0 <eprintf>

0000000000000340 <srunner_run_init>:
     340:	stp	x29, x30, [sp, #-32]!
     344:	stp	x20, x19, [sp, #16]
     348:	mov	x29, sp
     34c:	mov	w19, w1
     350:	mov	x20, x0
     354:	bl	0 <srunner_fork_status>
     358:	bl	0 <set_fork_status>
     35c:	bl	0 <setup_messaging>
     360:	mov	x0, x20
     364:	mov	w1, w19
     368:	bl	0 <srunner_init_logging>
     36c:	mov	x0, x20
     370:	bl	0 <log_srunner_start>
     374:	ldp	x20, x19, [sp, #16]
     378:	ldp	x29, x30, [sp], #32
     37c:	ret

0000000000000380 <srunner_iterate_suites>:
     380:	sub	sp, sp, #0x70
     384:	stp	x29, x30, [sp, #16]
     388:	stp	x28, x27, [sp, #32]
     38c:	stp	x26, x25, [sp, #48]
     390:	stp	x24, x23, [sp, #64]
     394:	stp	x22, x21, [sp, #80]
     398:	stp	x20, x19, [sp, #96]
     39c:	ldr	x25, [x0]
     3a0:	mov	x24, x0
     3a4:	mov	x0, x3
     3a8:	add	x29, sp, #0x10
     3ac:	mov	x21, x4
     3b0:	mov	x22, x3
     3b4:	mov	x23, x2
     3b8:	mov	x26, x1
     3bc:	bl	0 <tag_string_to_list>
     3c0:	mov	x19, x0
     3c4:	mov	x0, x21
     3c8:	bl	0 <tag_string_to_list>
     3cc:	mov	x20, x0
     3d0:	mov	x0, x25
     3d4:	bl	0 <check_list_front>
     3d8:	mov	x0, x25
     3dc:	bl	0 <check_list_at_end>
     3e0:	cbz	w0, 434 <srunner_iterate_suites+0xb4>
     3e4:	adrp	x21, 0 <free>
     3e8:	add	x21, x21, #0x0
     3ec:	mov	x0, x19
     3f0:	mov	x1, x21
     3f4:	bl	0 <check_list_apply>
     3f8:	mov	x0, x20
     3fc:	mov	x1, x21
     400:	bl	0 <check_list_apply>
     404:	mov	x0, x19
     408:	bl	0 <check_list_free>
     40c:	mov	x0, x20
     410:	bl	0 <check_list_free>
     414:	ldp	x20, x19, [sp, #96]
     418:	ldp	x22, x21, [sp, #80]
     41c:	ldp	x24, x23, [sp, #64]
     420:	ldp	x26, x25, [sp, #48]
     424:	ldp	x28, x27, [sp, #32]
     428:	ldp	x29, x30, [sp, #16]
     42c:	add	sp, sp, #0x70
     430:	ret
     434:	str	x26, [sp, #8]
     438:	b	460 <srunner_iterate_suites+0xe0>
     43c:	mov	x0, x24
     440:	mov	x1, x27
     444:	bl	0 <log_suite_end>
     448:	ldr	x26, [sp, #8]
     44c:	mov	x0, x25
     450:	bl	0 <check_list_advance>
     454:	mov	x0, x25
     458:	bl	0 <check_list_at_end>
     45c:	cbnz	w0, 3e4 <srunner_iterate_suites+0x64>
     460:	mov	x0, x25
     464:	bl	0 <check_list_val>
     468:	mov	x27, x0
     46c:	cbz	x26, 480 <srunner_iterate_suites+0x100>
     470:	ldr	x1, [x27]
     474:	mov	x0, x26
     478:	bl	0 <strcmp>
     47c:	cbnz	w0, 44c <srunner_iterate_suites+0xcc>
     480:	cbz	x23, 494 <srunner_iterate_suites+0x114>
     484:	mov	x0, x27
     488:	mov	x1, x23
     48c:	bl	0 <suite_tcase>
     490:	cbz	w0, 44c <srunner_iterate_suites+0xcc>
     494:	mov	x0, x24
     498:	mov	x1, x27
     49c:	bl	0 <log_suite_start>
     4a0:	ldr	x28, [x27, #8]
     4a4:	mov	x0, x28
     4a8:	bl	0 <check_list_front>
     4ac:	b	4c4 <srunner_iterate_suites+0x144>
     4b0:	mov	x0, x24
     4b4:	mov	x1, x26
     4b8:	bl	618 <srunner_run_tcase>
     4bc:	mov	x0, x28
     4c0:	bl	0 <check_list_advance>
     4c4:	mov	x0, x28
     4c8:	bl	0 <check_list_at_end>
     4cc:	cbnz	w0, 43c <srunner_iterate_suites+0xbc>
     4d0:	mov	x0, x28
     4d4:	bl	0 <check_list_val>
     4d8:	mov	x26, x0
     4dc:	cbz	x23, 4f0 <srunner_iterate_suites+0x170>
     4e0:	ldr	x1, [x26]
     4e4:	mov	x0, x23
     4e8:	bl	0 <strcmp>
     4ec:	cbnz	w0, 4bc <srunner_iterate_suites+0x13c>
     4f0:	cbz	x22, 504 <srunner_iterate_suites+0x184>
     4f4:	mov	x0, x26
     4f8:	mov	x1, x19
     4fc:	bl	0 <tcase_matching_tag>
     500:	cbz	w0, 4bc <srunner_iterate_suites+0x13c>
     504:	cbz	x21, 4b0 <srunner_iterate_suites+0x130>
     508:	mov	x0, x26
     50c:	mov	x1, x20
     510:	bl	0 <tcase_matching_tag>
     514:	cbnz	w0, 4bc <srunner_iterate_suites+0x13c>
     518:	b	4b0 <srunner_iterate_suites+0x130>

000000000000051c <srunner_run_end>:
     51c:	stp	x29, x30, [sp, #-32]!
     520:	str	x19, [sp, #16]
     524:	mov	x29, sp
     528:	mov	x19, x0
     52c:	bl	0 <log_srunner_end>
     530:	mov	x0, x19
     534:	bl	0 <srunner_end_logging>
     538:	bl	0 <teardown_messaging>
     53c:	mov	w0, #0x1                   	// #1
     540:	bl	0 <set_fork_status>
     544:	ldr	x19, [sp, #16]
     548:	ldp	x29, x30, [sp], #32
     54c:	ret

0000000000000550 <check_fork>:
     550:	stp	x29, x30, [sp, #-32]!
     554:	str	x19, [sp, #16]
     558:	mov	x29, sp
     55c:	bl	0 <fork>
     560:	mov	w19, w0
     564:	tbnz	w0, #31, 578 <check_fork+0x28>
     568:	adrp	x8, 0 <srunner_fork_status>
     56c:	ldr	w1, [x8]
     570:	mov	w0, w19
     574:	bl	0 <setpgid>
     578:	mov	w0, w19
     57c:	ldr	x19, [sp, #16]
     580:	ldp	x29, x30, [sp], #32
     584:	ret

0000000000000588 <check_waitpid_and_exit>:
     588:	stp	x29, x30, [sp, #-32]!
     58c:	cmp	w0, #0x1
     590:	str	x19, [sp, #16]
     594:	mov	x29, sp
     598:	b.lt	5c8 <check_waitpid_and_exit+0x40>  // b.tstop
     59c:	mov	w19, w0
     5a0:	add	x1, x29, #0x1c
     5a4:	mov	w0, w19
     5a8:	mov	w2, wzr
     5ac:	bl	0 <waitpid>
     5b0:	cmn	w0, #0x1
     5b4:	b.eq	5a0 <check_waitpid_and_exit+0x18>  // b.none
     5b8:	ldr	w0, [x29, #28]
     5bc:	mov	w1, wzr
     5c0:	bl	5d8 <waserror>
     5c4:	cbnz	w0, 5d0 <check_waitpid_and_exit+0x48>
     5c8:	mov	w0, wzr
     5cc:	bl	0 <exit>
     5d0:	mov	w0, #0x1                   	// #1
     5d4:	bl	0 <exit>

00000000000005d8 <waserror>:
     5d8:	and	w8, w0, #0x7f
     5dc:	mov	w9, #0x1000000             	// #16777216
     5e0:	mov	w10, #0x1ffffff             	// #33554431
     5e4:	add	w9, w9, w8, lsl #24
     5e8:	cmp	w9, w10
     5ec:	cset	w9, gt
     5f0:	tst	w0, #0x7f
     5f4:	cset	w10, eq  // eq = none
     5f8:	cmp	w8, w1
     5fc:	cset	w8, ne  // ne = any
     600:	tst	w0, #0xff00
     604:	cset	w11, ne  // ne = any
     608:	and	w10, w10, w11
     60c:	and	w8, w8, w9
     610:	orr	w0, w10, w8
     614:	ret

0000000000000618 <srunner_run_tcase>:
     618:	stp	x29, x30, [sp, #-32]!
     61c:	stp	x20, x19, [sp, #16]
     620:	mov	x29, sp
     624:	mov	x19, x1
     628:	mov	x20, x0
     62c:	bl	658 <srunner_run_unchecked_setup>
     630:	cbz	w0, 64c <srunner_run_tcase+0x34>
     634:	mov	x0, x20
     638:	mov	x1, x19
     63c:	bl	6d0 <srunner_iterate_tcase_tfuns>
     640:	mov	x0, x20
     644:	mov	x1, x19
     648:	bl	7e8 <srunner_run_unchecked_teardown>
     64c:	ldp	x20, x19, [sp, #16]
     650:	ldp	x29, x30, [sp], #32
     654:	ret

0000000000000658 <srunner_run_unchecked_setup>:
     658:	stp	x29, x30, [sp, #-32]!
     65c:	stp	x20, x19, [sp, #16]
     660:	mov	x19, x0
     664:	mov	w0, #0x2                   	// #2
     668:	mov	x29, sp
     66c:	mov	x20, x1
     670:	bl	0 <set_fork_status>
     674:	ldr	x0, [x20, #32]
     678:	ldr	x2, [x20]
     67c:	adrp	x3, 0 <srunner_fork_status>
     680:	add	x3, x3, #0x0
     684:	mov	w1, #0x2                   	// #2
     688:	bl	814 <srunner_run_setup>
     68c:	mov	x20, x0
     690:	mov	x0, x19
     694:	bl	0 <srunner_fork_status>
     698:	bl	0 <set_fork_status>
     69c:	cbz	x20, 6ac <srunner_run_unchecked_setup+0x54>
     6a0:	ldr	w8, [x20]
     6a4:	cmp	w8, #0x1
     6a8:	b.ne	6b4 <srunner_run_unchecked_setup+0x5c>  // b.any
     6ac:	mov	w0, #0x1                   	// #1
     6b0:	b	6c4 <srunner_run_unchecked_setup+0x6c>
     6b4:	mov	x0, x19
     6b8:	mov	x1, x20
     6bc:	bl	934 <srunner_add_failure>
     6c0:	mov	w0, wzr
     6c4:	ldp	x20, x19, [sp, #16]
     6c8:	ldp	x29, x30, [sp], #32
     6cc:	ret

00000000000006d0 <srunner_iterate_tcase_tfuns>:
     6d0:	stp	x29, x30, [sp, #-64]!
     6d4:	stp	x24, x23, [sp, #16]
     6d8:	stp	x22, x21, [sp, #32]
     6dc:	stp	x20, x19, [sp, #48]
     6e0:	ldr	x20, [x1, #24]
     6e4:	mov	x21, x0
     6e8:	mov	x29, sp
     6ec:	mov	x19, x1
     6f0:	mov	x0, x20
     6f4:	bl	0 <check_list_front>
     6f8:	b	704 <srunner_iterate_tcase_tfuns+0x34>
     6fc:	mov	x0, x20
     700:	bl	0 <check_list_advance>
     704:	mov	x0, x20
     708:	bl	0 <check_list_at_end>
     70c:	cbnz	w0, 7bc <srunner_iterate_tcase_tfuns+0xec>
     710:	mov	x0, x20
     714:	bl	0 <check_list_val>
     718:	ldp	w23, w8, [x0, #8]
     71c:	cmp	w23, w8
     720:	b.ge	6fc <srunner_iterate_tcase_tfuns+0x2c>  // b.tcont
     724:	mov	x22, x0
     728:	b	73c <srunner_iterate_tcase_tfuns+0x6c>
     72c:	ldr	w8, [x22, #12]
     730:	add	w23, w23, #0x1
     734:	cmp	w23, w8
     738:	b.ge	6fc <srunner_iterate_tcase_tfuns+0x2c>  // b.tcont
     73c:	mov	x0, x21
     740:	mov	x1, x19
     744:	mov	x2, x22
     748:	bl	0 <log_test_start>
     74c:	mov	x0, x21
     750:	bl	0 <srunner_fork_status>
     754:	cmp	w0, #0x2
     758:	b.eq	784 <srunner_iterate_tcase_tfuns+0xb4>  // b.none
     75c:	cmp	w0, #0x1
     760:	b.ne	7d0 <srunner_iterate_tcase_tfuns+0x100>  // b.any
     764:	mov	x0, x21
     768:	mov	x1, x19
     76c:	mov	x2, x22
     770:	mov	w3, w23
     774:	bl	a64 <tcase_run_tfun_fork>
     778:	mov	x24, x0
     77c:	cbnz	x0, 7a0 <srunner_iterate_tcase_tfuns+0xd0>
     780:	b	72c <srunner_iterate_tcase_tfuns+0x5c>
     784:	mov	x0, x21
     788:	mov	x1, x19
     78c:	mov	x2, x22
     790:	mov	w3, w23
     794:	bl	c78 <tcase_run_tfun_nofork>
     798:	mov	x24, x0
     79c:	cbz	x0, 72c <srunner_iterate_tcase_tfuns+0x5c>
     7a0:	mov	x0, x21
     7a4:	mov	x1, x24
     7a8:	bl	934 <srunner_add_failure>
     7ac:	mov	x0, x21
     7b0:	mov	x1, x24
     7b4:	bl	0 <log_test_end>
     7b8:	b	72c <srunner_iterate_tcase_tfuns+0x5c>
     7bc:	ldp	x20, x19, [sp, #48]
     7c0:	ldp	x22, x21, [sp, #32]
     7c4:	ldp	x24, x23, [sp, #16]
     7c8:	ldp	x29, x30, [sp], #64
     7cc:	ret
     7d0:	adrp	x0, 0 <srunner_fork_status>
     7d4:	adrp	x1, 0 <srunner_fork_status>
     7d8:	add	x0, x0, #0x0
     7dc:	add	x1, x1, #0x0
     7e0:	mov	w2, #0x10b                 	// #267
     7e4:	bl	0 <eprintf>

00000000000007e8 <srunner_run_unchecked_teardown>:
     7e8:	stp	x29, x30, [sp, #-32]!
     7ec:	str	x19, [sp, #16]
     7f0:	ldr	x19, [x1, #40]
     7f4:	mov	x29, sp
     7f8:	bl	0 <srunner_fork_status>
     7fc:	mov	w1, w0
     800:	mov	x0, x19
     804:	bl	e74 <srunner_run_teardown>
     808:	ldr	x19, [sp, #16]
     80c:	ldp	x29, x30, [sp], #32
     810:	ret

0000000000000814 <srunner_run_setup>:
     814:	stp	x29, x30, [sp, #-80]!
     818:	stp	x22, x21, [sp, #48]
     81c:	stp	x20, x19, [sp, #64]
     820:	mov	x19, x3
     824:	mov	x20, x2
     828:	mov	w21, w1
     82c:	cmp	w1, #0x1
     830:	mov	x22, x0
     834:	str	x25, [sp, #16]
     838:	stp	x24, x23, [sp, #32]
     83c:	mov	x29, sp
     840:	b.ne	84c <srunner_run_setup+0x38>  // b.any
     844:	mov	w0, #0x1                   	// #1
     848:	bl	0 <send_ctx_info>
     84c:	mov	x0, x22
     850:	bl	0 <check_list_front>
     854:	mov	x0, x22
     858:	bl	0 <check_list_at_end>
     85c:	mov	x24, xzr
     860:	cbnz	w0, 918 <srunner_run_setup+0x104>
     864:	adrp	x23, 0 <error_jmp_buffer>
     868:	add	x23, x23, #0x0
     86c:	mov	x0, x22
     870:	bl	0 <check_list_val>
     874:	cmp	w21, #0x2
     878:	mov	x25, x0
     87c:	b.ne	8e8 <srunner_run_setup+0xd4>  // b.any
     880:	mov	w0, #0x1                   	// #1
     884:	bl	0 <send_ctx_info>
     888:	mov	x0, x23
     88c:	bl	0 <_setjmp>
     890:	cbnz	w0, 89c <srunner_run_setup+0x88>
     894:	ldr	x8, [x25, #8]
     898:	blr	x8
     89c:	mov	w3, #0xffffffff            	// #-1
     8a0:	mov	x0, x20
     8a4:	mov	x1, x19
     8a8:	mov	w2, wzr
     8ac:	bl	998 <receive_result_info_nofork>
     8b0:	ldr	w8, [x0]
     8b4:	mov	x24, x0
     8b8:	cmp	w8, #0x1
     8bc:	b.ne	8fc <srunner_run_setup+0xe8>  // b.any
     8c0:	ldr	x0, [x24, #8]
     8c4:	bl	0 <free>
     8c8:	ldr	x0, [x24, #48]
     8cc:	bl	0 <free>
     8d0:	mov	x0, x24
     8d4:	bl	0 <free>
     8d8:	mov	x24, xzr
     8dc:	mov	w8, #0x1                   	// #1
     8e0:	cbnz	w8, 904 <srunner_run_setup+0xf0>
     8e4:	b	918 <srunner_run_setup+0x104>
     8e8:	ldr	x8, [x25, #8]
     8ec:	blr	x8
     8f0:	mov	w8, #0x1                   	// #1
     8f4:	cbnz	w8, 904 <srunner_run_setup+0xf0>
     8f8:	b	918 <srunner_run_setup+0x104>
     8fc:	mov	w8, wzr
     900:	cbz	w8, 918 <srunner_run_setup+0x104>
     904:	mov	x0, x22
     908:	bl	0 <check_list_advance>
     90c:	mov	x0, x22
     910:	bl	0 <check_list_at_end>
     914:	cbz	w0, 86c <srunner_run_setup+0x58>
     918:	mov	x0, x24
     91c:	ldp	x20, x19, [sp, #64]
     920:	ldp	x22, x21, [sp, #48]
     924:	ldp	x24, x23, [sp, #32]
     928:	ldr	x25, [sp, #16]
     92c:	ldp	x29, x30, [sp], #80
     930:	ret

0000000000000934 <srunner_add_failure>:
     934:	stp	x29, x30, [sp, #-32]!
     938:	stp	x20, x19, [sp, #16]
     93c:	mov	x19, x0
     940:	ldr	x0, [x0, #16]
     944:	mov	x29, sp
     948:	mov	x20, x1
     94c:	bl	0 <check_list_add_end>
     950:	ldr	x8, [x19, #8]
     954:	ldr	w9, [x8]
     958:	add	w9, w9, #0x1
     95c:	str	w9, [x8]
     960:	ldr	w9, [x20]
     964:	cmp	w9, #0x3
     968:	b.eq	97c <srunner_add_failure+0x48>  // b.none
     96c:	cmp	w9, #0x2
     970:	b.ne	98c <srunner_add_failure+0x58>  // b.any
     974:	add	x8, x8, #0x4
     978:	b	980 <srunner_add_failure+0x4c>
     97c:	add	x8, x8, #0x8
     980:	ldr	w9, [x8]
     984:	add	w9, w9, #0x1
     988:	str	w9, [x8]
     98c:	ldp	x20, x19, [sp, #16]
     990:	ldp	x29, x30, [sp], #32
     994:	ret

0000000000000998 <receive_result_info_nofork>:
     998:	stp	x29, x30, [sp, #-64]!
     99c:	str	x23, [sp, #16]
     9a0:	mov	x23, x0
     9a4:	mov	w0, wzr
     9a8:	stp	x22, x21, [sp, #32]
     9ac:	stp	x20, x19, [sp, #48]
     9b0:	mov	x29, sp
     9b4:	mov	w19, w3
     9b8:	mov	w20, w2
     9bc:	mov	x21, x1
     9c0:	bl	0 <receive_test_result>
     9c4:	cbz	x0, 9f0 <receive_result_info_nofork+0x58>
     9c8:	mov	x22, x0
     9cc:	stp	x23, x21, [x0, #32]
     9d0:	stp	w20, w19, [x0, #20]
     9d4:	bl	a08 <set_nofork_info>
     9d8:	mov	x0, x22
     9dc:	ldp	x20, x19, [sp, #48]
     9e0:	ldp	x22, x21, [sp, #32]
     9e4:	ldr	x23, [sp, #16]
     9e8:	ldp	x29, x30, [sp], #64
     9ec:	ret
     9f0:	adrp	x0, 0 <srunner_fork_status>
     9f4:	adrp	x1, 0 <srunner_fork_status>
     9f8:	add	x0, x0, #0x0
     9fc:	add	x1, x1, #0x0
     a00:	mov	w2, #0x1b8                 	// #440
     a04:	bl	0 <eprintf>

0000000000000a08 <set_nofork_info>:
     a08:	stp	x29, x30, [sp, #-32]!
     a0c:	ldr	x8, [x0, #48]
     a10:	str	x19, [sp, #16]
     a14:	mov	x19, x0
     a18:	mov	x29, sp
     a1c:	cbz	x8, a2c <set_nofork_info+0x24>
     a20:	mov	w8, #0x2                   	// #2
     a24:	str	w8, [x19]
     a28:	b	a3c <set_nofork_info+0x34>
     a2c:	mov	w8, #0x1                   	// #1
     a30:	str	w8, [x19]
     a34:	bl	a48 <pass_msg>
     a38:	str	x0, [x19, #48]
     a3c:	ldr	x19, [sp, #16]
     a40:	ldp	x29, x30, [sp], #32
     a44:	ret

0000000000000a48 <pass_msg>:
     a48:	stp	x29, x30, [sp, #-16]!
     a4c:	adrp	x0, 0 <srunner_fork_status>
     a50:	add	x0, x0, #0x0
     a54:	mov	x29, sp
     a58:	bl	0 <strdup>
     a5c:	ldp	x29, x30, [sp], #16
     a60:	ret

0000000000000a64 <tcase_run_tfun_fork>:
     a64:	sub	sp, sp, #0x90
     a68:	stp	x29, x30, [sp, #80]
     a6c:	add	x29, sp, #0x50
     a70:	str	x23, [sp, #96]
     a74:	stp	x22, x21, [sp, #112]
     a78:	stp	x20, x19, [sp, #128]
     a7c:	mov	w20, w3
     a80:	mov	x21, x2
     a84:	mov	x19, x1
     a88:	mov	x23, x0
     a8c:	str	wzr, [x29, #28]
     a90:	stp	xzr, xzr, [x29, #-16]
     a94:	stp	xzr, xzr, [x29, #-32]
     a98:	bl	0 <fork>
     a9c:	cbz	w0, b58 <tcase_run_tfun_fork+0xf4>
     aa0:	mov	w22, w0
     aa4:	cmn	w0, #0x1
     aa8:	b.eq	c30 <tcase_run_tfun_fork+0x1cc>  // b.none
     aac:	adrp	x8, 0 <srunner_fork_status>
     ab0:	adrp	x9, 0 <srunner_fork_status>
     ab4:	str	w22, [x8]
     ab8:	strb	wzr, [x9]
     abc:	bl	0 <check_get_clockid>
     ac0:	add	x2, sp, #0x28
     ac4:	mov	x1, xzr
     ac8:	bl	0 <timer_create>
     acc:	cbnz	w0, c48 <tcase_run_tfun_fork+0x1e4>
     ad0:	ldur	q0, [x19, #8]
     ad4:	ldr	x0, [sp, #40]
     ad8:	add	x2, sp, #0x8
     adc:	mov	w1, wzr
     ae0:	mov	x3, xzr
     ae4:	stur	q0, [sp, #24]
     ae8:	stp	xzr, xzr, [sp, #8]
     aec:	bl	0 <timer_settime>
     af0:	cbnz	w0, c60 <tcase_run_tfun_fork+0x1fc>
     af4:	add	x1, x29, #0x1c
     af8:	mov	w0, w22
     afc:	mov	w2, wzr
     b00:	bl	0 <waitpid>
     b04:	cmn	w0, #0x1
     b08:	b.eq	af4 <tcase_run_tfun_fork+0x90>  // b.none
     b0c:	ldr	x0, [sp, #40]
     b10:	bl	0 <timer_delete>
     b14:	mov	w1, #0x9                   	// #9
     b18:	mov	w0, w22
     b1c:	bl	0 <killpg>
     b20:	ldr	x8, [x21]
     b24:	ldr	x0, [x19]
     b28:	ldr	w3, [x29, #28]
     b2c:	ldr	w4, [x21, #16]
     b30:	ldr	x1, [x8]
     b34:	ldrb	w5, [x21, #20]
     b38:	mov	w2, w20
     b3c:	bl	de0 <receive_result_info_fork>
     b40:	ldp	x20, x19, [sp, #128]
     b44:	ldp	x22, x21, [sp, #112]
     b48:	ldr	x23, [sp, #96]
     b4c:	ldp	x29, x30, [sp, #80]
     b50:	add	sp, sp, #0x90
     b54:	ret
     b58:	mov	w1, wzr
     b5c:	bl	0 <setpgid>
     b60:	bl	0 <getpgrp>
     b64:	adrp	x8, 0 <srunner_fork_status>
     b68:	str	w0, [x8]
     b6c:	mov	x0, x23
     b70:	mov	x1, x19
     b74:	bl	d88 <tcase_run_checked_setup>
     b78:	bl	0 <free>
     b7c:	bl	0 <check_get_clockid>
     b80:	sub	x1, x29, #0x10
     b84:	bl	0 <clock_gettime>
     b88:	ldr	x8, [x21]
     b8c:	ldr	x0, [x8]
     b90:	ldr	x1, [x8, #16]
     b94:	ldr	w2, [x8, #24]
     b98:	bl	0 <tcase_fn_start>
     b9c:	ldr	x8, [x21]
     ba0:	mov	w0, w20
     ba4:	ldr	x8, [x8, #8]
     ba8:	blr	x8
     bac:	bl	0 <check_get_clockid>
     bb0:	sub	x1, x29, #0x20
     bb4:	bl	0 <clock_gettime>
     bb8:	mov	x0, x19
     bbc:	bl	dc4 <tcase_run_checked_teardown>
     bc0:	ldur	w8, [x29, #-32]
     bc4:	ldur	w9, [x29, #-16]
     bc8:	ldur	x10, [x29, #-24]
     bcc:	ldur	x11, [x29, #-8]
     bd0:	sub	w8, w8, w9
     bd4:	mov	x9, #0xf7cf                	// #63439
     bd8:	movk	x9, #0xe353, lsl #16
     bdc:	movk	x9, #0x9ba5, lsl #32
     be0:	movk	x9, #0x20c4, lsl #48
     be4:	smulh	x9, x10, x9
     be8:	mov	x10, #0x831                 	// #2097
     bec:	movk	x10, #0x1cac, lsl #16
     bf0:	movk	x10, #0x645a, lsl #32
     bf4:	movk	x10, #0xdf3b, lsl #48
     bf8:	smulh	x10, x11, x10
     bfc:	lsr	x11, x9, #63
     c00:	lsr	x9, x9, #7
     c04:	add	w9, w9, w11
     c08:	mov	w11, #0x4240                	// #16960
     c0c:	movk	w11, #0xf, lsl #16
     c10:	madd	w8, w8, w11, w9
     c14:	lsr	x9, x10, #63
     c18:	lsr	x10, x10, #7
     c1c:	add	w9, w10, w9
     c20:	add	w0, w8, w9
     c24:	bl	0 <send_duration_info>
     c28:	mov	w0, wzr
     c2c:	bl	0 <exit>
     c30:	adrp	x0, 0 <srunner_fork_status>
     c34:	adrp	x1, 0 <srunner_fork_status>
     c38:	add	x0, x0, #0x0
     c3c:	add	x1, x1, #0x0
     c40:	mov	w2, #0x1e5                 	// #485
     c44:	bl	0 <eprintf>
     c48:	adrp	x0, 0 <srunner_fork_status>
     c4c:	adrp	x1, 0 <srunner_fork_status>
     c50:	add	x0, x0, #0x0
     c54:	add	x1, x1, #0x0
     c58:	mov	w2, #0x218                 	// #536
     c5c:	bl	0 <eprintf>
     c60:	adrp	x0, 0 <srunner_fork_status>
     c64:	adrp	x1, 0 <srunner_fork_status>
     c68:	add	x0, x0, #0x0
     c6c:	add	x1, x1, #0x0
     c70:	mov	w2, #0x210                 	// #528
     c74:	bl	0 <eprintf>

0000000000000c78 <tcase_run_tfun_nofork>:
     c78:	sub	sp, sp, #0x50
     c7c:	stp	x29, x30, [sp, #32]
     c80:	str	x21, [sp, #48]
     c84:	stp	x20, x19, [sp, #64]
     c88:	add	x29, sp, #0x20
     c8c:	mov	w19, w3
     c90:	mov	x20, x2
     c94:	mov	x21, x1
     c98:	stp	xzr, xzr, [sp, #16]
     c9c:	stp	xzr, xzr, [sp]
     ca0:	bl	d88 <tcase_run_checked_setup>
     ca4:	cbnz	x0, d74 <tcase_run_tfun_nofork+0xfc>
     ca8:	bl	0 <check_get_clockid>
     cac:	add	x1, sp, #0x10
     cb0:	bl	0 <clock_gettime>
     cb4:	adrp	x0, 0 <error_jmp_buffer>
     cb8:	add	x0, x0, #0x0
     cbc:	bl	0 <_setjmp>
     cc0:	cbnz	w0, ce8 <tcase_run_tfun_nofork+0x70>
     cc4:	ldr	x8, [x20]
     cc8:	ldr	x0, [x8]
     ccc:	ldr	x1, [x8, #16]
     cd0:	ldr	w2, [x8, #24]
     cd4:	bl	0 <tcase_fn_start>
     cd8:	ldr	x8, [x20]
     cdc:	mov	w0, w19
     ce0:	ldr	x8, [x8, #8]
     ce4:	blr	x8
     ce8:	bl	0 <check_get_clockid>
     cec:	mov	x1, sp
     cf0:	bl	0 <clock_gettime>
     cf4:	mov	x0, x21
     cf8:	bl	dc4 <tcase_run_checked_teardown>
     cfc:	ldr	w8, [sp]
     d00:	ldr	w9, [sp, #16]
     d04:	ldr	x11, [sp, #8]
     d08:	ldr	x12, [sp, #24]
     d0c:	ldr	x10, [x20]
     d10:	sub	w8, w8, w9
     d14:	mov	x9, #0xf7cf                	// #63439
     d18:	movk	x9, #0xe353, lsl #16
     d1c:	movk	x9, #0x9ba5, lsl #32
     d20:	movk	x9, #0x20c4, lsl #48
     d24:	smulh	x9, x11, x9
     d28:	mov	x11, #0x831                 	// #2097
     d2c:	movk	x11, #0x1cac, lsl #16
     d30:	movk	x11, #0x645a, lsl #32
     d34:	movk	x11, #0xdf3b, lsl #48
     d38:	smulh	x11, x12, x11
     d3c:	lsr	x12, x9, #63
     d40:	lsr	x9, x9, #7
     d44:	add	w9, w9, w12
     d48:	mov	w12, #0x4240                	// #16960
     d4c:	ldr	x0, [x21]
     d50:	movk	w12, #0xf, lsl #16
     d54:	ldr	x1, [x10]
     d58:	madd	w8, w8, w12, w9
     d5c:	lsr	x9, x11, #63
     d60:	lsr	x10, x11, #7
     d64:	add	w9, w10, w9
     d68:	add	w3, w8, w9
     d6c:	mov	w2, w19
     d70:	bl	998 <receive_result_info_nofork>
     d74:	ldp	x20, x19, [sp, #64]
     d78:	ldr	x21, [sp, #48]
     d7c:	ldp	x29, x30, [sp, #32]
     d80:	add	sp, sp, #0x50
     d84:	ret

0000000000000d88 <tcase_run_checked_setup>:
     d88:	stp	x29, x30, [sp, #-32]!
     d8c:	stp	x20, x19, [sp, #16]
     d90:	ldr	x20, [x1, #48]
     d94:	mov	x29, sp
     d98:	mov	x19, x1
     d9c:	bl	0 <srunner_fork_status>
     da0:	ldr	x2, [x19]
     da4:	adrp	x3, 0 <srunner_fork_status>
     da8:	mov	w1, w0
     dac:	add	x3, x3, #0x0
     db0:	mov	x0, x20
     db4:	bl	814 <srunner_run_setup>
     db8:	ldp	x20, x19, [sp, #16]
     dbc:	ldp	x29, x30, [sp], #32
     dc0:	ret

0000000000000dc4 <tcase_run_checked_teardown>:
     dc4:	stp	x29, x30, [sp, #-16]!
     dc8:	ldr	x0, [x0, #56]
     dcc:	mov	w1, #0x2                   	// #2
     dd0:	mov	x29, sp
     dd4:	bl	e74 <srunner_run_teardown>
     dd8:	ldp	x29, x30, [sp], #16
     ddc:	ret

0000000000000de0 <receive_result_info_fork>:
     de0:	stp	x29, x30, [sp, #-80]!
     de4:	stp	x24, x23, [sp, #32]
     de8:	mov	x23, x1
     dec:	mov	x24, x0
     df0:	mov	w0, w3
     df4:	mov	w1, w4
     df8:	str	x25, [sp, #16]
     dfc:	stp	x22, x21, [sp, #48]
     e00:	stp	x20, x19, [sp, #64]
     e04:	mov	x29, sp
     e08:	mov	w19, w5
     e0c:	mov	w20, w4
     e10:	mov	w21, w3
     e14:	mov	w22, w2
     e18:	bl	5d8 <waserror>
     e1c:	bl	0 <receive_test_result>
     e20:	cbz	x0, e5c <receive_result_info_fork+0x7c>
     e24:	mov	w1, w21
     e28:	mov	w2, w20
     e2c:	mov	w3, w19
     e30:	mov	x25, x0
     e34:	stp	x24, x23, [x0, #32]
     e38:	str	w22, [x0, #20]
     e3c:	bl	f00 <set_fork_info>
     e40:	mov	x0, x25
     e44:	ldp	x20, x19, [sp, #64]
     e48:	ldp	x22, x21, [sp, #48]
     e4c:	ldp	x24, x23, [sp, #32]
     e50:	ldr	x25, [sp, #16]
     e54:	ldp	x29, x30, [sp], #80
     e58:	ret
     e5c:	adrp	x0, 0 <srunner_fork_status>
     e60:	adrp	x1, 0 <srunner_fork_status>
     e64:	add	x0, x0, #0x0
     e68:	add	x1, x1, #0x0
     e6c:	mov	w2, #0x22c                 	// #556
     e70:	bl	0 <eprintf>

0000000000000e74 <srunner_run_teardown>:
     e74:	stp	x29, x30, [sp, #-48]!
     e78:	stp	x22, x21, [sp, #16]
     e7c:	stp	x20, x19, [sp, #32]
     e80:	mov	x29, sp
     e84:	mov	w19, w1
     e88:	mov	x20, x0
     e8c:	bl	0 <check_list_front>
     e90:	mov	x0, x20
     e94:	bl	0 <check_list_at_end>
     e98:	cbz	w0, eac <srunner_run_teardown+0x38>
     e9c:	ldp	x20, x19, [sp, #32]
     ea0:	ldp	x22, x21, [sp, #16]
     ea4:	ldp	x29, x30, [sp], #48
     ea8:	ret
     eac:	adrp	x21, 0 <error_jmp_buffer>
     eb0:	add	x21, x21, #0x0
     eb4:	b	ed4 <srunner_run_teardown+0x60>
     eb8:	ldr	x8, [x22, #8]
     ebc:	blr	x8
     ec0:	mov	x0, x20
     ec4:	bl	0 <check_list_advance>
     ec8:	mov	x0, x20
     ecc:	bl	0 <check_list_at_end>
     ed0:	cbnz	w0, e9c <srunner_run_teardown+0x28>
     ed4:	mov	x0, x20
     ed8:	bl	0 <check_list_val>
     edc:	mov	x22, x0
     ee0:	mov	w0, #0x3                   	// #3
     ee4:	bl	0 <send_ctx_info>
     ee8:	cmp	w19, #0x2
     eec:	b.ne	eb8 <srunner_run_teardown+0x44>  // b.any
     ef0:	mov	x0, x21
     ef4:	bl	0 <_setjmp>
     ef8:	cbz	w0, eb8 <srunner_run_teardown+0x44>
     efc:	b	e9c <srunner_run_teardown+0x28>

0000000000000f00 <set_fork_info>:
     f00:	stp	x29, x30, [sp, #-48]!
     f04:	stp	x20, x19, [sp, #32]
     f08:	and	w20, w1, #0x7f
     f0c:	mov	w8, #0x1000000             	// #16777216
     f10:	add	w8, w8, w20, lsl #24
     f14:	mov	w9, #0x2000000             	// #33554432
     f18:	stp	x22, x21, [sp, #16]
     f1c:	mov	w21, w2
     f20:	cmp	w8, w9
     f24:	mov	x19, x0
     f28:	mov	x29, sp
     f2c:	b.lt	f5c <set_fork_info+0x5c>  // b.tstop
     f30:	cmp	w20, w21
     f34:	b.ne	f8c <set_fork_info+0x8c>  // b.any
     f38:	adrp	x8, 0 <srunner_fork_status>
     f3c:	ldrb	w8, [x8]
     f40:	cmp	w8, #0x1
     f44:	b.ne	fc4 <set_fork_info+0xc4>  // b.any
     f48:	ldr	x0, [x19, #48]
     f4c:	mov	w8, #0x3                   	// #3
     f50:	str	w8, [x19]
     f54:	cbnz	x0, fa0 <set_fork_info+0xa0>
     f58:	b	fa4 <set_fork_info+0xa4>
     f5c:	lsr	w22, w1, #8
     f60:	cbz	w21, fb4 <set_fork_info+0xb4>
     f64:	cbnz	w20, ff4 <set_fork_info+0xf4>
     f68:	ldr	x0, [x19, #48]
     f6c:	cbz	x0, f74 <set_fork_info+0x74>
     f70:	bl	0 <free>
     f74:	sxtb	w0, w22
     f78:	bl	115c <exit_msg>
     f7c:	str	x0, [x19, #48]
     f80:	mov	w8, #0x2                   	// #2
     f84:	str	w8, [x19]
     f88:	b	ff4 <set_fork_info+0xf4>
     f8c:	ldr	x0, [x19, #48]
     f90:	mov	w8, #0x3                   	// #3
     f94:	str	w8, [x19]
     f98:	cbz	w21, fe0 <set_fork_info+0xe0>
     f9c:	cbz	x0, fa4 <set_fork_info+0xa4>
     fa0:	bl	0 <free>
     fa4:	mov	w0, w20
     fa8:	mov	w1, w21
     fac:	bl	101c <signal_error_msg>
     fb0:	b	ff0 <set_fork_info+0xf0>
     fb4:	cbnz	w20, ff4 <set_fork_info+0xf4>
     fb8:	sxtb	w0, w22
     fbc:	cmp	w0, w3, sxtb
     fc0:	b.ne	1004 <set_fork_info+0x104>  // b.any
     fc4:	ldr	x0, [x19, #48]
     fc8:	mov	w8, #0x1                   	// #1
     fcc:	str	w8, [x19]
     fd0:	cbz	x0, fd8 <set_fork_info+0xd8>
     fd4:	bl	0 <free>
     fd8:	bl	a48 <pass_msg>
     fdc:	b	ff0 <set_fork_info+0xf0>
     fe0:	cbz	x0, fe8 <set_fork_info+0xe8>
     fe4:	bl	0 <free>
     fe8:	mov	w0, w20
     fec:	bl	10e0 <signal_msg>
     ff0:	str	x0, [x19, #48]
     ff4:	ldp	x20, x19, [sp, #32]
     ff8:	ldp	x22, x21, [sp, #16]
     ffc:	ldp	x29, x30, [sp], #48
    1000:	ret
    1004:	ldr	x8, [x19, #48]
    1008:	cbnz	x8, f80 <set_fork_info+0x80>
    100c:	mov	w8, #0x3                   	// #3
    1010:	str	w8, [x19]
    1014:	bl	115c <exit_msg>
    1018:	b	ff0 <set_fork_info+0xf0>

000000000000101c <signal_error_msg>:
    101c:	stp	x29, x30, [sp, #-64]!
    1020:	stp	x22, x21, [sp, #32]
    1024:	mov	w22, w0
    1028:	mov	w0, #0x64                  	// #100
    102c:	str	x23, [sp, #16]
    1030:	stp	x20, x19, [sp, #48]
    1034:	mov	x29, sp
    1038:	mov	w20, w1
    103c:	bl	0 <emalloc>
    1040:	mov	x19, x0
    1044:	mov	w0, w22
    1048:	bl	0 <strsignal>
    104c:	bl	0 <strdup>
    1050:	mov	x21, x0
    1054:	mov	w0, w20
    1058:	bl	0 <strsignal>
    105c:	bl	0 <strdup>
    1060:	adrp	x8, 0 <srunner_fork_status>
    1064:	ldrb	w8, [x8]
    1068:	mov	x23, x0
    106c:	cmp	w8, #0x1
    1070:	b.ne	1094 <signal_error_msg+0x78>  // b.any
    1074:	adrp	x2, 0 <srunner_fork_status>
    1078:	add	x2, x2, #0x0
    107c:	mov	w1, #0x64                  	// #100
    1080:	mov	x0, x19
    1084:	mov	w3, w20
    1088:	mov	x4, x23
    108c:	bl	0 <snprintf>
    1090:	b	10b8 <signal_error_msg+0x9c>
    1094:	adrp	x2, 0 <srunner_fork_status>
    1098:	add	x2, x2, #0x0
    109c:	mov	w1, #0x64                  	// #100
    10a0:	mov	x0, x19
    10a4:	mov	w3, w22
    10a8:	mov	x4, x21
    10ac:	mov	w5, w20
    10b0:	mov	x6, x23
    10b4:	bl	0 <snprintf>
    10b8:	mov	x0, x21
    10bc:	bl	0 <free>
    10c0:	mov	x0, x23
    10c4:	bl	0 <free>
    10c8:	mov	x0, x19
    10cc:	ldp	x20, x19, [sp, #48]
    10d0:	ldp	x22, x21, [sp, #32]
    10d4:	ldr	x23, [sp, #16]
    10d8:	ldp	x29, x30, [sp], #64
    10dc:	ret

00000000000010e0 <signal_msg>:
    10e0:	stp	x29, x30, [sp, #-32]!
    10e4:	stp	x20, x19, [sp, #16]
    10e8:	mov	w20, w0
    10ec:	mov	w0, #0x64                  	// #100
    10f0:	mov	x29, sp
    10f4:	bl	0 <emalloc>
    10f8:	adrp	x8, 0 <srunner_fork_status>
    10fc:	ldrb	w8, [x8]
    1100:	mov	x19, x0
    1104:	cmp	w8, #0x1
    1108:	b.ne	1128 <signal_msg+0x48>  // b.any
    110c:	adrp	x8, 0 <srunner_fork_status>
    1110:	add	x8, x8, #0x0
    1114:	ldur	x9, [x8, #13]
    1118:	ldr	q0, [x8]
    111c:	stur	x9, [x19, #13]
    1120:	str	q0, [x19]
    1124:	b	114c <signal_msg+0x6c>
    1128:	mov	w0, w20
    112c:	bl	0 <strsignal>
    1130:	adrp	x2, 0 <srunner_fork_status>
    1134:	mov	x4, x0
    1138:	add	x2, x2, #0x0
    113c:	mov	w1, #0x64                  	// #100
    1140:	mov	x0, x19
    1144:	mov	w3, w20
    1148:	bl	0 <snprintf>
    114c:	mov	x0, x19
    1150:	ldp	x20, x19, [sp, #16]
    1154:	ldp	x29, x30, [sp], #32
    1158:	ret

000000000000115c <exit_msg>:
    115c:	stp	x29, x30, [sp, #-32]!
    1160:	stp	x20, x19, [sp, #16]
    1164:	mov	w19, w0
    1168:	mov	w0, #0x64                  	// #100
    116c:	mov	x29, sp
    1170:	bl	0 <emalloc>
    1174:	adrp	x2, 0 <srunner_fork_status>
    1178:	add	x2, x2, #0x0
    117c:	mov	w1, #0x64                  	// #100
    1180:	mov	w3, w19
    1184:	mov	x20, x0
    1188:	bl	0 <snprintf>
    118c:	mov	x0, x20
    1190:	ldp	x20, x19, [sp, #16]
    1194:	ldp	x29, x30, [sp], #32
    1198:	ret

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_str>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #16]
   8:	stp	x22, x21, [sp, #32]
   c:	stp	x20, x19, [sp, #48]
  10:	ldr	w8, [x0]
  14:	ldr	x20, [x0, #8]
  18:	ldr	w21, [x0, #16]
  1c:	adrp	x9, 0 <tr_str>
  20:	adrp	x10, 0 <tr_str>
  24:	add	x9, x9, #0x0
  28:	add	x10, x10, #0x0
  2c:	cmp	w8, #0x3
  30:	add	x29, sp, #0x10
  34:	mov	x19, x0
  38:	csel	x22, x10, x9, eq  // eq = none
  3c:	bl	17c <tr_type_str>
  40:	ldp	x4, x5, [x19, #32]
  44:	ldr	w6, [x19, #20]
  48:	ldr	x8, [x19, #48]
  4c:	mov	x3, x0
  50:	adrp	x0, 0 <tr_str>
  54:	add	x0, x0, #0x0
  58:	mov	x1, x20
  5c:	mov	w2, w21
  60:	mov	x7, x22
  64:	str	x8, [sp]
  68:	bl	80 <ck_strdup_printf>
  6c:	ldp	x20, x19, [sp, #48]
  70:	ldp	x22, x21, [sp, #32]
  74:	ldp	x29, x30, [sp, #16]
  78:	add	sp, sp, #0x40
  7c:	ret

0000000000000080 <ck_strdup_printf>:
  80:	sub	sp, sp, #0x160
  84:	stp	x29, x30, [sp, #256]
  88:	stp	x20, x19, [sp, #336]
  8c:	add	x29, sp, #0x100
  90:	mov	x19, x0
  94:	mov	w0, #0x64                  	// #100
  98:	str	x28, [sp, #272]
  9c:	stp	x26, x25, [sp, #288]
  a0:	stp	x24, x23, [sp, #304]
  a4:	stp	x22, x21, [sp, #320]
  a8:	stp	x1, x2, [x29, #-120]
  ac:	stp	x3, x4, [x29, #-104]
  b0:	stp	x5, x6, [x29, #-88]
  b4:	stur	x7, [x29, #-72]
  b8:	stp	q0, q1, [sp]
  bc:	stp	q2, q3, [sp, #32]
  c0:	stp	q4, q5, [sp, #64]
  c4:	stp	q6, q7, [sp, #96]
  c8:	mov	w20, #0x64                  	// #100
  cc:	bl	0 <emalloc>
  d0:	mov	x23, #0xffffffffffffffc8    	// #-56
  d4:	mov	x8, sp
  d8:	sub	x9, x29, #0x78
  dc:	mov	x21, x0
  e0:	movk	x23, #0xff80, lsl #32
  e4:	add	x24, x29, #0x60
  e8:	add	x25, x8, #0x80
  ec:	add	x26, x9, #0x38
  f0:	b	11c <ck_strdup_printf+0x9c>
  f4:	sxtw	x8, w0
  f8:	lsl	x9, x20, #1
  fc:	cmp	w0, #0x0
 100:	csinc	x20, x9, x8, lt  // lt = tstop
 104:	mov	x0, x21
 108:	mov	x1, x20
 10c:	bl	0 <erealloc>
 110:	mov	x21, x0
 114:	mov	w8, #0x1                   	// #1
 118:	tbz	w8, #0, 158 <ck_strdup_printf+0xd8>
 11c:	stp	x25, x23, [x29, #-16]
 120:	stp	x24, x26, [x29, #-32]
 124:	ldp	q0, q1, [x29, #-32]
 128:	sub	x3, x29, #0x40
 12c:	mov	x0, x21
 130:	mov	x1, x20
 134:	mov	x2, x19
 138:	stp	q0, q1, [x29, #-64]
 13c:	bl	0 <vsnprintf>
 140:	tbnz	w0, #31, f4 <ck_strdup_printf+0x74>
 144:	cmp	w0, w20
 148:	b.ge	f4 <ck_strdup_printf+0x74>  // b.tcont
 14c:	mov	w8, wzr
 150:	mov	x22, x21
 154:	tbnz	w8, #0, 11c <ck_strdup_printf+0x9c>
 158:	mov	x0, x22
 15c:	ldp	x20, x19, [sp, #336]
 160:	ldp	x22, x21, [sp, #320]
 164:	ldp	x24, x23, [sp, #304]
 168:	ldp	x26, x25, [sp, #288]
 16c:	ldr	x28, [sp, #272]
 170:	ldp	x29, x30, [sp, #256]
 174:	add	sp, sp, #0x160
 178:	ret

000000000000017c <tr_type_str>:
 17c:	ldr	w8, [x0, #4]
 180:	cmp	w8, #0x2
 184:	b.ne	1a8 <tr_type_str+0x2c>  // b.any
 188:	ldr	w8, [x0]
 18c:	sub	w8, w8, #0x1
 190:	cmp	w8, #0x2
 194:	b.hi	1b4 <tr_type_str+0x38>  // b.pmore
 198:	adrp	x9, 0 <tr_str>
 19c:	add	x9, x9, #0x0
 1a0:	ldr	x0, [x9, w8, sxtw #3]
 1a4:	ret
 1a8:	adrp	x0, 0 <tr_str>
 1ac:	add	x0, x0, #0x0
 1b0:	ret
 1b4:	mov	x0, xzr
 1b8:	ret

00000000000001bc <tr_short_str>:
 1bc:	stp	x29, x30, [sp, #-16]!
 1c0:	ldr	w8, [x0]
 1c4:	ldr	x1, [x0, #8]
 1c8:	ldr	w2, [x0, #16]
 1cc:	ldr	x4, [x0, #48]
 1d0:	adrp	x9, 0 <tr_str>
 1d4:	adrp	x10, 0 <tr_str>
 1d8:	add	x9, x9, #0x0
 1dc:	add	x10, x10, #0x0
 1e0:	cmp	w8, #0x3
 1e4:	adrp	x0, 0 <tr_str>
 1e8:	csel	x3, x10, x9, eq  // eq = none
 1ec:	add	x0, x0, #0x0
 1f0:	mov	x29, sp
 1f4:	bl	80 <ck_strdup_printf>
 1f8:	ldp	x29, x30, [sp], #16
 1fc:	ret

0000000000000200 <sr_stat_str>:
 200:	stp	x29, x30, [sp, #-32]!
 204:	str	x19, [sp, #16]
 208:	ldr	x19, [x0, #8]
 20c:	mov	x29, sp
 210:	mov	x0, x19
 214:	bl	23c <percent_passed>
 218:	ldp	w2, w3, [x19]
 21c:	ldr	w4, [x19, #8]
 220:	mov	w1, w0
 224:	adrp	x0, 0 <tr_str>
 228:	add	x0, x0, #0x0
 22c:	bl	80 <ck_strdup_printf>
 230:	ldr	x19, [sp, #16]
 234:	ldp	x29, x30, [sp], #32
 238:	ret

000000000000023c <percent_passed>:
 23c:	ldr	w8, [x0, #4]
 240:	cbnz	w8, 24c <percent_passed+0x10>
 244:	ldr	w9, [x0, #8]
 248:	cbz	w9, 288 <percent_passed+0x4c>
 24c:	ldr	w9, [x0]
 250:	cbz	w9, 280 <percent_passed+0x44>
 254:	ldr	w10, [x0, #8]
 258:	sub	w8, w9, w8
 25c:	scvtf	s0, w9
 260:	sub	w8, w8, w10
 264:	scvtf	s1, w8
 268:	mov	w8, #0x42c80000            	// #1120403456
 26c:	fdiv	s0, s1, s0
 270:	fmov	s1, w8
 274:	fmul	s0, s0, s1
 278:	fcvtzs	w0, s0
 27c:	ret
 280:	mov	w0, wzr
 284:	ret
 288:	mov	w0, #0x64                  	// #100
 28c:	ret

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <ck_do_nothing>
   8:	adrp	x1, 0 <ck_do_nothing>
   c:	adrp	x3, 0 <ck_do_nothing>
  10:	add	x0, x0, #0x0
  14:	add	x1, x1, #0x0
  18:	add	x3, x3, #0x0
  1c:	mov	w2, #0x1a                  	// #26
  20:	mov	x29, sp
  24:	bl	0 <__assert_fail>
