In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_clang_-O0:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	adrp	x8, 0 <e2p_feature2string>
  10:	add	x8, x8, #0x0
  14:	stur	w0, [x29, #-12]
  18:	stur	w1, [x29, #-16]
  1c:	str	x8, [sp, #24]
  20:	ldr	x8, [sp, #24]
  24:	ldr	x8, [x8, #8]
  28:	cbz	x8, 74 <e2p_feature2string+0x74>
  2c:	ldur	w8, [x29, #-12]
  30:	ldr	x9, [sp, #24]
  34:	ldr	w10, [x9]
  38:	cmp	w8, w10
  3c:	b.ne	64 <e2p_feature2string+0x64>  // b.any
  40:	ldur	w8, [x29, #-16]
  44:	ldr	x9, [sp, #24]
  48:	ldr	w10, [x9, #4]
  4c:	cmp	w8, w10
  50:	b.ne	64 <e2p_feature2string+0x64>  // b.any
  54:	ldr	x8, [sp, #24]
  58:	ldr	x8, [x8, #8]
  5c:	stur	x8, [x29, #-8]
  60:	b	120 <e2p_feature2string+0x120>
  64:	ldr	x8, [sp, #24]
  68:	add	x8, x8, #0x10
  6c:	str	x8, [sp, #24]
  70:	b	20 <e2p_feature2string+0x20>
  74:	ldur	w8, [x29, #-12]
  78:	str	w8, [sp, #12]
  7c:	cbz	w8, a4 <e2p_feature2string+0xa4>
  80:	b	84 <e2p_feature2string+0x84>
  84:	ldr	w8, [sp, #12]
  88:	cmp	w8, #0x1
  8c:	b.eq	b0 <e2p_feature2string+0xb0>  // b.none
  90:	b	94 <e2p_feature2string+0x94>
  94:	ldr	w8, [sp, #12]
  98:	cmp	w8, #0x2
  9c:	b.eq	bc <e2p_feature2string+0xbc>  // b.none
  a0:	b	c8 <e2p_feature2string+0xc8>
  a4:	mov	w8, #0x43                  	// #67
  a8:	strb	w8, [sp, #23]
  ac:	b	d0 <e2p_feature2string+0xd0>
  b0:	mov	w8, #0x49                  	// #73
  b4:	strb	w8, [sp, #23]
  b8:	b	d0 <e2p_feature2string+0xd0>
  bc:	mov	w8, #0x52                  	// #82
  c0:	strb	w8, [sp, #23]
  c4:	b	d0 <e2p_feature2string+0xd0>
  c8:	mov	w8, #0x3f                  	// #63
  cc:	strb	w8, [sp, #23]
  d0:	str	wzr, [sp, #16]
  d4:	ldur	w8, [x29, #-16]
  d8:	lsr	w8, w8, #1
  dc:	stur	w8, [x29, #-16]
  e0:	cbz	w8, f4 <e2p_feature2string+0xf4>
  e4:	ldr	w8, [sp, #16]
  e8:	add	w8, w8, #0x1
  ec:	str	w8, [sp, #16]
  f0:	b	d4 <e2p_feature2string+0xd4>
  f4:	ldrb	w2, [sp, #23]
  f8:	ldr	w3, [sp, #16]
  fc:	adrp	x8, 0 <e2p_feature2string>
 100:	add	x8, x8, #0x0
 104:	mov	x0, x8
 108:	adrp	x1, 0 <e2p_feature2string>
 10c:	add	x1, x1, #0x0
 110:	str	x8, [sp]
 114:	bl	0 <sprintf>
 118:	ldr	x8, [sp]
 11c:	stur	x8, [x29, #-8]
 120:	ldur	x0, [x29, #-8]
 124:	ldp	x29, x30, [sp, #48]
 128:	add	sp, sp, #0x40
 12c:	ret

0000000000000130 <e2p_string2feature>:
 130:	sub	sp, sp, #0x50
 134:	stp	x29, x30, [sp, #64]
 138:	add	x29, sp, #0x40
 13c:	adrp	x8, 0 <e2p_feature2string>
 140:	add	x8, x8, #0x0
 144:	stur	x0, [x29, #-16]
 148:	stur	x1, [x29, #-24]
 14c:	str	x2, [sp, #32]
 150:	str	x8, [sp, #24]
 154:	ldr	x8, [sp, #24]
 158:	ldr	x8, [x8, #8]
 15c:	cbz	x8, 1ac <e2p_string2feature+0x7c>
 160:	ldur	x0, [x29, #-16]
 164:	ldr	x8, [sp, #24]
 168:	ldr	x1, [x8, #8]
 16c:	bl	0 <strcasecmp>
 170:	cbnz	w0, 19c <e2p_string2feature+0x6c>
 174:	ldr	x8, [sp, #24]
 178:	ldr	w9, [x8]
 17c:	ldur	x8, [x29, #-24]
 180:	str	w9, [x8]
 184:	ldr	x8, [sp, #24]
 188:	ldr	w9, [x8, #4]
 18c:	ldr	x8, [sp, #32]
 190:	str	w9, [x8]
 194:	stur	wzr, [x29, #-4]
 198:	b	2f8 <e2p_string2feature+0x1c8>
 19c:	ldr	x8, [sp, #24]
 1a0:	add	x8, x8, #0x10
 1a4:	str	x8, [sp, #24]
 1a8:	b	154 <e2p_string2feature+0x24>
 1ac:	ldur	x0, [x29, #-16]
 1b0:	adrp	x1, 0 <e2p_feature2string>
 1b4:	add	x1, x1, #0x0
 1b8:	mov	x2, #0x8                   	// #8
 1bc:	bl	0 <strncasecmp>
 1c0:	cbz	w0, 1d0 <e2p_string2feature+0xa0>
 1c4:	mov	w8, #0x1                   	// #1
 1c8:	stur	w8, [x29, #-4]
 1cc:	b	2f8 <e2p_string2feature+0x1c8>
 1d0:	ldur	x8, [x29, #-16]
 1d4:	ldrb	w9, [x8, #8]
 1d8:	cmp	w9, #0x43
 1dc:	str	w9, [sp, #8]
 1e0:	b.eq	238 <e2p_string2feature+0x108>  // b.none
 1e4:	b	1e8 <e2p_string2feature+0xb8>
 1e8:	ldr	w8, [sp, #8]
 1ec:	cmp	w8, #0x49
 1f0:	b.eq	244 <e2p_string2feature+0x114>  // b.none
 1f4:	b	1f8 <e2p_string2feature+0xc8>
 1f8:	ldr	w8, [sp, #8]
 1fc:	cmp	w8, #0x52
 200:	b.eq	254 <e2p_string2feature+0x124>  // b.none
 204:	b	208 <e2p_string2feature+0xd8>
 208:	ldr	w8, [sp, #8]
 20c:	cmp	w8, #0x63
 210:	b.eq	238 <e2p_string2feature+0x108>  // b.none
 214:	b	218 <e2p_string2feature+0xe8>
 218:	ldr	w8, [sp, #8]
 21c:	cmp	w8, #0x69
 220:	b.eq	244 <e2p_string2feature+0x114>  // b.none
 224:	b	228 <e2p_string2feature+0xf8>
 228:	ldr	w8, [sp, #8]
 22c:	cmp	w8, #0x72
 230:	b.eq	254 <e2p_string2feature+0x124>  // b.none
 234:	b	264 <e2p_string2feature+0x134>
 238:	ldur	x8, [x29, #-24]
 23c:	str	wzr, [x8]
 240:	b	270 <e2p_string2feature+0x140>
 244:	ldur	x8, [x29, #-24]
 248:	mov	w9, #0x1                   	// #1
 24c:	str	w9, [x8]
 250:	b	270 <e2p_string2feature+0x140>
 254:	ldur	x8, [x29, #-24]
 258:	mov	w9, #0x2                   	// #2
 25c:	str	w9, [x8]
 260:	b	270 <e2p_string2feature+0x140>
 264:	mov	w8, #0x1                   	// #1
 268:	stur	w8, [x29, #-4]
 26c:	b	2f8 <e2p_string2feature+0x1c8>
 270:	ldur	x8, [x29, #-16]
 274:	ldrb	w9, [x8, #9]
 278:	cbnz	w9, 288 <e2p_string2feature+0x158>
 27c:	mov	w8, #0x1                   	// #1
 280:	stur	w8, [x29, #-4]
 284:	b	2f8 <e2p_string2feature+0x1c8>
 288:	ldur	x8, [x29, #-16]
 28c:	add	x0, x8, #0x9
 290:	add	x1, sp, #0x10
 294:	mov	w2, #0xa                   	// #10
 298:	bl	0 <strtol>
 29c:	str	w0, [sp, #12]
 2a0:	ldr	w9, [sp, #12]
 2a4:	cmp	w9, #0x1f
 2a8:	b.gt	2bc <e2p_string2feature+0x18c>
 2ac:	ldr	w8, [sp, #12]
 2b0:	cmp	w8, #0x0
 2b4:	cset	w8, ge  // ge = tcont
 2b8:	tbnz	w8, #0, 2c8 <e2p_string2feature+0x198>
 2bc:	mov	w8, #0x1                   	// #1
 2c0:	stur	w8, [x29, #-4]
 2c4:	b	2f8 <e2p_string2feature+0x1c8>
 2c8:	ldr	x8, [sp, #16]
 2cc:	ldrb	w9, [x8]
 2d0:	cbz	w9, 2e0 <e2p_string2feature+0x1b0>
 2d4:	mov	w8, #0x1                   	// #1
 2d8:	stur	w8, [x29, #-4]
 2dc:	b	2f8 <e2p_string2feature+0x1c8>
 2e0:	ldr	w8, [sp, #12]
 2e4:	mov	w9, #0x1                   	// #1
 2e8:	lsl	w8, w9, w8
 2ec:	ldr	x10, [sp, #32]
 2f0:	str	w8, [x10]
 2f4:	stur	wzr, [x29, #-4]
 2f8:	ldur	w0, [x29, #-4]
 2fc:	ldp	x29, x30, [sp, #64]
 300:	add	sp, sp, #0x50
 304:	ret

0000000000000308 <e2p_jrnl_feature2string>:
 308:	sub	sp, sp, #0x40
 30c:	stp	x29, x30, [sp, #48]
 310:	add	x29, sp, #0x30
 314:	adrp	x8, 0 <e2p_feature2string>
 318:	add	x8, x8, #0x0
 31c:	stur	w0, [x29, #-12]
 320:	stur	w1, [x29, #-16]
 324:	str	x8, [sp, #24]
 328:	ldr	x8, [sp, #24]
 32c:	ldr	x8, [x8, #8]
 330:	cbz	x8, 37c <e2p_jrnl_feature2string+0x74>
 334:	ldur	w8, [x29, #-12]
 338:	ldr	x9, [sp, #24]
 33c:	ldr	w10, [x9]
 340:	cmp	w8, w10
 344:	b.ne	36c <e2p_jrnl_feature2string+0x64>  // b.any
 348:	ldur	w8, [x29, #-16]
 34c:	ldr	x9, [sp, #24]
 350:	ldr	w10, [x9, #4]
 354:	cmp	w8, w10
 358:	b.ne	36c <e2p_jrnl_feature2string+0x64>  // b.any
 35c:	ldr	x8, [sp, #24]
 360:	ldr	x8, [x8, #8]
 364:	stur	x8, [x29, #-8]
 368:	b	428 <e2p_jrnl_feature2string+0x120>
 36c:	ldr	x8, [sp, #24]
 370:	add	x8, x8, #0x10
 374:	str	x8, [sp, #24]
 378:	b	328 <e2p_jrnl_feature2string+0x20>
 37c:	ldur	w8, [x29, #-12]
 380:	str	w8, [sp, #12]
 384:	cbz	w8, 3ac <e2p_jrnl_feature2string+0xa4>
 388:	b	38c <e2p_jrnl_feature2string+0x84>
 38c:	ldr	w8, [sp, #12]
 390:	cmp	w8, #0x1
 394:	b.eq	3b8 <e2p_jrnl_feature2string+0xb0>  // b.none
 398:	b	39c <e2p_jrnl_feature2string+0x94>
 39c:	ldr	w8, [sp, #12]
 3a0:	cmp	w8, #0x2
 3a4:	b.eq	3c4 <e2p_jrnl_feature2string+0xbc>  // b.none
 3a8:	b	3d0 <e2p_jrnl_feature2string+0xc8>
 3ac:	mov	w8, #0x43                  	// #67
 3b0:	strb	w8, [sp, #23]
 3b4:	b	3d8 <e2p_jrnl_feature2string+0xd0>
 3b8:	mov	w8, #0x49                  	// #73
 3bc:	strb	w8, [sp, #23]
 3c0:	b	3d8 <e2p_jrnl_feature2string+0xd0>
 3c4:	mov	w8, #0x52                  	// #82
 3c8:	strb	w8, [sp, #23]
 3cc:	b	3d8 <e2p_jrnl_feature2string+0xd0>
 3d0:	mov	w8, #0x3f                  	// #63
 3d4:	strb	w8, [sp, #23]
 3d8:	str	wzr, [sp, #16]
 3dc:	ldur	w8, [x29, #-16]
 3e0:	lsr	w8, w8, #1
 3e4:	stur	w8, [x29, #-16]
 3e8:	cbz	w8, 3fc <e2p_jrnl_feature2string+0xf4>
 3ec:	ldr	w8, [sp, #16]
 3f0:	add	w8, w8, #0x1
 3f4:	str	w8, [sp, #16]
 3f8:	b	3dc <e2p_jrnl_feature2string+0xd4>
 3fc:	ldrb	w2, [sp, #23]
 400:	ldr	w3, [sp, #16]
 404:	adrp	x8, 0 <e2p_feature2string>
 408:	add	x8, x8, #0x0
 40c:	mov	x0, x8
 410:	adrp	x1, 0 <e2p_feature2string>
 414:	add	x1, x1, #0x0
 418:	str	x8, [sp]
 41c:	bl	0 <sprintf>
 420:	ldr	x8, [sp]
 424:	stur	x8, [x29, #-8]
 428:	ldur	x0, [x29, #-8]
 42c:	ldp	x29, x30, [sp, #48]
 430:	add	sp, sp, #0x40
 434:	ret

0000000000000438 <e2p_jrnl_string2feature>:
 438:	sub	sp, sp, #0x50
 43c:	stp	x29, x30, [sp, #64]
 440:	add	x29, sp, #0x40
 444:	adrp	x8, 0 <e2p_feature2string>
 448:	add	x8, x8, #0x0
 44c:	stur	x0, [x29, #-16]
 450:	stur	x1, [x29, #-24]
 454:	str	x2, [sp, #32]
 458:	str	x8, [sp, #24]
 45c:	ldr	x8, [sp, #24]
 460:	ldr	x8, [x8, #8]
 464:	cbz	x8, 4b4 <e2p_jrnl_string2feature+0x7c>
 468:	ldur	x0, [x29, #-16]
 46c:	ldr	x8, [sp, #24]
 470:	ldr	x1, [x8, #8]
 474:	bl	0 <strcasecmp>
 478:	cbnz	w0, 4a4 <e2p_jrnl_string2feature+0x6c>
 47c:	ldr	x8, [sp, #24]
 480:	ldr	w9, [x8]
 484:	ldur	x8, [x29, #-24]
 488:	str	w9, [x8]
 48c:	ldr	x8, [sp, #24]
 490:	ldr	w9, [x8, #4]
 494:	ldr	x8, [sp, #32]
 498:	str	w9, [x8]
 49c:	stur	wzr, [x29, #-4]
 4a0:	b	600 <e2p_jrnl_string2feature+0x1c8>
 4a4:	ldr	x8, [sp, #24]
 4a8:	add	x8, x8, #0x10
 4ac:	str	x8, [sp, #24]
 4b0:	b	45c <e2p_jrnl_string2feature+0x24>
 4b4:	ldur	x0, [x29, #-16]
 4b8:	adrp	x1, 0 <e2p_feature2string>
 4bc:	add	x1, x1, #0x0
 4c0:	mov	x2, #0x8                   	// #8
 4c4:	bl	0 <strncasecmp>
 4c8:	cbz	w0, 4d8 <e2p_jrnl_string2feature+0xa0>
 4cc:	mov	w8, #0x1                   	// #1
 4d0:	stur	w8, [x29, #-4]
 4d4:	b	600 <e2p_jrnl_string2feature+0x1c8>
 4d8:	ldur	x8, [x29, #-16]
 4dc:	ldrb	w9, [x8, #8]
 4e0:	cmp	w9, #0x43
 4e4:	str	w9, [sp, #8]
 4e8:	b.eq	540 <e2p_jrnl_string2feature+0x108>  // b.none
 4ec:	b	4f0 <e2p_jrnl_string2feature+0xb8>
 4f0:	ldr	w8, [sp, #8]
 4f4:	cmp	w8, #0x49
 4f8:	b.eq	54c <e2p_jrnl_string2feature+0x114>  // b.none
 4fc:	b	500 <e2p_jrnl_string2feature+0xc8>
 500:	ldr	w8, [sp, #8]
 504:	cmp	w8, #0x52
 508:	b.eq	55c <e2p_jrnl_string2feature+0x124>  // b.none
 50c:	b	510 <e2p_jrnl_string2feature+0xd8>
 510:	ldr	w8, [sp, #8]
 514:	cmp	w8, #0x63
 518:	b.eq	540 <e2p_jrnl_string2feature+0x108>  // b.none
 51c:	b	520 <e2p_jrnl_string2feature+0xe8>
 520:	ldr	w8, [sp, #8]
 524:	cmp	w8, #0x69
 528:	b.eq	54c <e2p_jrnl_string2feature+0x114>  // b.none
 52c:	b	530 <e2p_jrnl_string2feature+0xf8>
 530:	ldr	w8, [sp, #8]
 534:	cmp	w8, #0x72
 538:	b.eq	55c <e2p_jrnl_string2feature+0x124>  // b.none
 53c:	b	56c <e2p_jrnl_string2feature+0x134>
 540:	ldur	x8, [x29, #-24]
 544:	str	wzr, [x8]
 548:	b	578 <e2p_jrnl_string2feature+0x140>
 54c:	ldur	x8, [x29, #-24]
 550:	mov	w9, #0x1                   	// #1
 554:	str	w9, [x8]
 558:	b	578 <e2p_jrnl_string2feature+0x140>
 55c:	ldur	x8, [x29, #-24]
 560:	mov	w9, #0x2                   	// #2
 564:	str	w9, [x8]
 568:	b	578 <e2p_jrnl_string2feature+0x140>
 56c:	mov	w8, #0x1                   	// #1
 570:	stur	w8, [x29, #-4]
 574:	b	600 <e2p_jrnl_string2feature+0x1c8>
 578:	ldur	x8, [x29, #-16]
 57c:	ldrb	w9, [x8, #9]
 580:	cbnz	w9, 590 <e2p_jrnl_string2feature+0x158>
 584:	mov	w8, #0x1                   	// #1
 588:	stur	w8, [x29, #-4]
 58c:	b	600 <e2p_jrnl_string2feature+0x1c8>
 590:	ldur	x8, [x29, #-16]
 594:	add	x0, x8, #0x9
 598:	add	x1, sp, #0x10
 59c:	mov	w2, #0xa                   	// #10
 5a0:	bl	0 <strtol>
 5a4:	str	w0, [sp, #12]
 5a8:	ldr	w9, [sp, #12]
 5ac:	cmp	w9, #0x1f
 5b0:	b.gt	5c4 <e2p_jrnl_string2feature+0x18c>
 5b4:	ldr	w8, [sp, #12]
 5b8:	cmp	w8, #0x0
 5bc:	cset	w8, ge  // ge = tcont
 5c0:	tbnz	w8, #0, 5d0 <e2p_jrnl_string2feature+0x198>
 5c4:	mov	w8, #0x1                   	// #1
 5c8:	stur	w8, [x29, #-4]
 5cc:	b	600 <e2p_jrnl_string2feature+0x1c8>
 5d0:	ldr	x8, [sp, #16]
 5d4:	ldrb	w9, [x8]
 5d8:	cbz	w9, 5e8 <e2p_jrnl_string2feature+0x1b0>
 5dc:	mov	w8, #0x1                   	// #1
 5e0:	stur	w8, [x29, #-4]
 5e4:	b	600 <e2p_jrnl_string2feature+0x1c8>
 5e8:	ldr	w8, [sp, #12]
 5ec:	mov	w9, #0x1                   	// #1
 5f0:	lsl	w8, w9, w8
 5f4:	ldr	x10, [sp, #32]
 5f8:	str	w8, [x10]
 5fc:	stur	wzr, [x29, #-4]
 600:	ldur	w0, [x29, #-4]
 604:	ldp	x29, x30, [sp, #64]
 608:	add	sp, sp, #0x50
 60c:	ret

0000000000000610 <e2p_edit_feature2>:
 610:	sub	sp, sp, #0x80
 614:	stp	x29, x30, [sp, #112]
 618:	add	x29, sp, #0x70
 61c:	stur	x0, [x29, #-16]
 620:	stur	x1, [x29, #-24]
 624:	stur	x2, [x29, #-32]
 628:	stur	x3, [x29, #-40]
 62c:	stur	x4, [x29, #-48]
 630:	str	x5, [sp, #56]
 634:	str	wzr, [sp, #16]
 638:	ldur	x8, [x29, #-40]
 63c:	cbnz	x8, 648 <e2p_edit_feature2+0x38>
 640:	ldur	x8, [x29, #-32]
 644:	stur	x8, [x29, #-40]
 648:	ldur	x8, [x29, #-48]
 64c:	cbz	x8, 658 <e2p_edit_feature2+0x48>
 650:	ldur	x8, [x29, #-48]
 654:	str	wzr, [x8]
 658:	ldr	x8, [sp, #56]
 65c:	cbz	x8, 668 <e2p_edit_feature2+0x58>
 660:	ldr	x8, [sp, #56]
 664:	str	wzr, [x8]
 668:	ldur	x0, [x29, #-16]
 66c:	bl	0 <strlen>
 670:	add	x0, x0, #0x1
 674:	bl	0 <malloc>
 678:	str	x0, [sp, #40]
 67c:	ldr	x8, [sp, #40]
 680:	cbnz	x8, 690 <e2p_edit_feature2+0x80>
 684:	mov	w8, #0x1                   	// #1
 688:	stur	w8, [x29, #-4]
 68c:	b	90c <e2p_edit_feature2+0x2fc>
 690:	ldr	x0, [sp, #40]
 694:	ldur	x1, [x29, #-16]
 698:	bl	0 <strcpy>
 69c:	ldr	x8, [sp, #40]
 6a0:	str	x8, [sp, #48]
 6a4:	ldr	x8, [sp, #48]
 6a8:	mov	w9, #0x0                   	// #0
 6ac:	str	w9, [sp, #12]
 6b0:	cbz	x8, 6c8 <e2p_edit_feature2+0xb8>
 6b4:	ldr	x8, [sp, #48]
 6b8:	ldrb	w9, [x8]
 6bc:	cmp	w9, #0x0
 6c0:	cset	w9, ne  // ne = any
 6c4:	str	w9, [sp, #12]
 6c8:	ldr	w8, [sp, #12]
 6cc:	tbnz	w8, #0, 6d4 <e2p_edit_feature2+0xc4>
 6d0:	b	8fc <e2p_edit_feature2+0x2ec>
 6d4:	str	wzr, [sp, #28]
 6d8:	ldr	x0, [sp, #48]
 6dc:	bl	91c <skip_over_blanks>
 6e0:	str	x0, [sp, #48]
 6e4:	ldr	x0, [sp, #48]
 6e8:	bl	98c <skip_over_word>
 6ec:	str	x0, [sp, #32]
 6f0:	ldr	x8, [sp, #32]
 6f4:	ldrb	w9, [x8]
 6f8:	cbnz	w9, 708 <e2p_edit_feature2+0xf8>
 6fc:	mov	x8, xzr
 700:	str	x8, [sp, #32]
 704:	b	714 <e2p_edit_feature2+0x104>
 708:	ldr	x8, [sp, #32]
 70c:	mov	w9, #0x0                   	// #0
 710:	strb	w9, [x8]
 714:	ldr	x0, [sp, #48]
 718:	adrp	x1, 0 <e2p_feature2string>
 71c:	add	x1, x1, #0x0
 720:	bl	0 <strcasecmp>
 724:	cbz	w0, 73c <e2p_edit_feature2+0x12c>
 728:	ldr	x0, [sp, #48]
 72c:	adrp	x1, 0 <e2p_feature2string>
 730:	add	x1, x1, #0x0
 734:	bl	0 <strcasecmp>
 738:	cbnz	w0, 758 <e2p_edit_feature2+0x148>
 73c:	ldur	x8, [x29, #-24]
 740:	str	wzr, [x8]
 744:	ldur	x8, [x29, #-24]
 748:	str	wzr, [x8, #4]
 74c:	ldur	x8, [x29, #-24]
 750:	str	wzr, [x8, #8]
 754:	b	8d0 <e2p_edit_feature2+0x2c0>
 758:	ldr	x8, [sp, #48]
 75c:	ldrb	w9, [x8]
 760:	cmp	w9, #0x2b
 764:	str	w9, [sp, #8]
 768:	b.eq	7a4 <e2p_edit_feature2+0x194>  // b.none
 76c:	b	770 <e2p_edit_feature2+0x160>
 770:	ldr	w8, [sp, #8]
 774:	cmp	w8, #0x2d
 778:	b.eq	798 <e2p_edit_feature2+0x188>  // b.none
 77c:	b	780 <e2p_edit_feature2+0x170>
 780:	ldr	w8, [sp, #8]
 784:	cmp	w8, #0x5e
 788:	cset	w9, eq  // eq = none
 78c:	eor	w9, w9, #0x1
 790:	tbnz	w9, #0, 7b0 <e2p_edit_feature2+0x1a0>
 794:	b	798 <e2p_edit_feature2+0x188>
 798:	ldr	w8, [sp, #28]
 79c:	add	w8, w8, #0x1
 7a0:	str	w8, [sp, #28]
 7a4:	ldr	x8, [sp, #48]
 7a8:	add	x8, x8, #0x1
 7ac:	str	x8, [sp, #48]
 7b0:	ldr	x0, [sp, #48]
 7b4:	add	x1, sp, #0x14
 7b8:	add	x2, sp, #0x18
 7bc:	bl	130 <e2p_string2feature>
 7c0:	cbz	w0, 7d0 <e2p_edit_feature2+0x1c0>
 7c4:	mov	w8, #0x1                   	// #1
 7c8:	str	w8, [sp, #16]
 7cc:	b	8fc <e2p_edit_feature2+0x2ec>
 7d0:	ldr	w8, [sp, #28]
 7d4:	cbz	w8, 858 <e2p_edit_feature2+0x248>
 7d8:	ldur	x8, [x29, #-40]
 7dc:	cbz	x8, 830 <e2p_edit_feature2+0x220>
 7e0:	ldur	x8, [x29, #-40]
 7e4:	ldrsw	x9, [sp, #20]
 7e8:	ldr	w10, [x8, x9, lsl #2]
 7ec:	ldr	w11, [sp, #24]
 7f0:	and	w10, w10, w11
 7f4:	cbnz	w10, 830 <e2p_edit_feature2+0x220>
 7f8:	mov	w8, #0x1                   	// #1
 7fc:	str	w8, [sp, #16]
 800:	ldur	x9, [x29, #-48]
 804:	cbz	x9, 818 <e2p_edit_feature2+0x208>
 808:	ldr	w8, [sp, #20]
 80c:	orr	w8, w8, #0x80
 810:	ldur	x9, [x29, #-48]
 814:	str	w8, [x9]
 818:	ldr	x8, [sp, #56]
 81c:	cbz	x8, 82c <e2p_edit_feature2+0x21c>
 820:	ldr	w8, [sp, #24]
 824:	ldr	x9, [sp, #56]
 828:	str	w8, [x9]
 82c:	b	8fc <e2p_edit_feature2+0x2ec>
 830:	ldr	w8, [sp, #24]
 834:	ldur	x9, [x29, #-24]
 838:	ldrsw	x10, [sp, #20]
 83c:	mov	x11, #0x4                   	// #4
 840:	mul	x10, x11, x10
 844:	add	x9, x9, x10
 848:	ldr	w12, [x9]
 84c:	bic	w8, w12, w8
 850:	str	w8, [x9]
 854:	b	8d0 <e2p_edit_feature2+0x2c0>
 858:	ldur	x8, [x29, #-32]
 85c:	cbz	x8, 8ac <e2p_edit_feature2+0x29c>
 860:	ldur	x8, [x29, #-32]
 864:	ldrsw	x9, [sp, #20]
 868:	ldr	w10, [x8, x9, lsl #2]
 86c:	ldr	w11, [sp, #24]
 870:	and	w10, w10, w11
 874:	cbnz	w10, 8ac <e2p_edit_feature2+0x29c>
 878:	mov	w8, #0x1                   	// #1
 87c:	str	w8, [sp, #16]
 880:	ldur	x9, [x29, #-48]
 884:	cbz	x9, 894 <e2p_edit_feature2+0x284>
 888:	ldr	w8, [sp, #20]
 88c:	ldur	x9, [x29, #-48]
 890:	str	w8, [x9]
 894:	ldr	x8, [sp, #56]
 898:	cbz	x8, 8a8 <e2p_edit_feature2+0x298>
 89c:	ldr	w8, [sp, #24]
 8a0:	ldr	x9, [sp, #56]
 8a4:	str	w8, [x9]
 8a8:	b	8fc <e2p_edit_feature2+0x2ec>
 8ac:	ldr	w8, [sp, #24]
 8b0:	ldur	x9, [x29, #-24]
 8b4:	ldrsw	x10, [sp, #20]
 8b8:	mov	x11, #0x4                   	// #4
 8bc:	mul	x10, x11, x10
 8c0:	add	x9, x9, x10
 8c4:	ldr	w12, [x9]
 8c8:	orr	w8, w12, w8
 8cc:	str	w8, [x9]
 8d0:	ldr	x8, [sp, #32]
 8d4:	cbz	x8, 8e8 <e2p_edit_feature2+0x2d8>
 8d8:	ldr	x8, [sp, #32]
 8dc:	add	x8, x8, #0x1
 8e0:	str	x8, [sp]
 8e4:	b	8f0 <e2p_edit_feature2+0x2e0>
 8e8:	mov	x8, xzr
 8ec:	str	x8, [sp]
 8f0:	ldr	x8, [sp]
 8f4:	str	x8, [sp, #48]
 8f8:	b	6a4 <e2p_edit_feature2+0x94>
 8fc:	ldr	x0, [sp, #40]
 900:	bl	0 <free>
 904:	ldr	w8, [sp, #16]
 908:	stur	w8, [x29, #-4]
 90c:	ldur	w0, [x29, #-4]
 910:	ldp	x29, x30, [sp, #112]
 914:	add	sp, sp, #0x80
 918:	ret

000000000000091c <skip_over_blanks>:
 91c:	sub	sp, sp, #0x20
 920:	stp	x29, x30, [sp, #16]
 924:	add	x29, sp, #0x10
 928:	str	x0, [sp, #8]
 92c:	ldr	x8, [sp, #8]
 930:	ldrb	w9, [x8]
 934:	mov	w10, #0x0                   	// #0
 938:	str	w10, [sp, #4]
 93c:	cbz	w9, 960 <skip_over_blanks+0x44>
 940:	bl	0 <__ctype_b_loc>
 944:	ldr	x8, [x0]
 948:	ldr	x9, [sp, #8]
 94c:	ldrb	w10, [x9]
 950:	ldrh	w10, [x8, w10, sxtw #1]
 954:	tst	w10, #0x2000
 958:	cset	w10, ne  // ne = any
 95c:	str	w10, [sp, #4]
 960:	ldr	w8, [sp, #4]
 964:	tbnz	w8, #0, 96c <skip_over_blanks+0x50>
 968:	b	97c <skip_over_blanks+0x60>
 96c:	ldr	x8, [sp, #8]
 970:	add	x8, x8, #0x1
 974:	str	x8, [sp, #8]
 978:	b	92c <skip_over_blanks+0x10>
 97c:	ldr	x0, [sp, #8]
 980:	ldp	x29, x30, [sp, #16]
 984:	add	sp, sp, #0x20
 988:	ret

000000000000098c <skip_over_word>:
 98c:	sub	sp, sp, #0x20
 990:	stp	x29, x30, [sp, #16]
 994:	add	x29, sp, #0x10
 998:	str	x0, [sp, #8]
 99c:	ldr	x8, [sp, #8]
 9a0:	ldrb	w9, [x8]
 9a4:	mov	w10, #0x0                   	// #0
 9a8:	str	w10, [sp, #4]
 9ac:	cbz	w9, 9e8 <skip_over_word+0x5c>
 9b0:	bl	0 <__ctype_b_loc>
 9b4:	ldr	x8, [x0]
 9b8:	ldr	x9, [sp, #8]
 9bc:	ldrb	w10, [x9]
 9c0:	ldrh	w10, [x8, w10, sxtw #1]
 9c4:	and	w10, w10, #0x2000
 9c8:	mov	w11, #0x0                   	// #0
 9cc:	str	w11, [sp, #4]
 9d0:	cbnz	w10, 9e8 <skip_over_word+0x5c>
 9d4:	ldr	x8, [sp, #8]
 9d8:	ldrb	w9, [x8]
 9dc:	cmp	w9, #0x2c
 9e0:	cset	w9, ne  // ne = any
 9e4:	str	w9, [sp, #4]
 9e8:	ldr	w8, [sp, #4]
 9ec:	tbnz	w8, #0, 9f4 <skip_over_word+0x68>
 9f0:	b	a04 <skip_over_word+0x78>
 9f4:	ldr	x8, [sp, #8]
 9f8:	add	x8, x8, #0x1
 9fc:	str	x8, [sp, #8]
 a00:	b	99c <skip_over_word+0x10>
 a04:	ldr	x0, [sp, #8]
 a08:	ldp	x29, x30, [sp, #16]
 a0c:	add	sp, sp, #0x20
 a10:	ret

0000000000000a14 <e2p_edit_feature>:
 a14:	sub	sp, sp, #0x30
 a18:	stp	x29, x30, [sp, #32]
 a1c:	add	x29, sp, #0x20
 a20:	mov	x8, xzr
 a24:	stur	x0, [x29, #-8]
 a28:	str	x1, [sp, #16]
 a2c:	str	x2, [sp, #8]
 a30:	ldur	x0, [x29, #-8]
 a34:	ldr	x1, [sp, #16]
 a38:	ldr	x2, [sp, #8]
 a3c:	mov	x3, x8
 a40:	mov	x4, x8
 a44:	mov	x5, x8
 a48:	bl	610 <e2p_edit_feature2>
 a4c:	ldp	x29, x30, [sp, #32]
 a50:	add	sp, sp, #0x30
 a54:	ret

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #176]
   8:	add	x29, sp, #0xb0
   c:	add	x8, sp, #0x18
  10:	stur	x0, [x29, #-16]
  14:	stur	x1, [x29, #-24]
  18:	str	wzr, [sp, #8]
  1c:	ldur	x0, [x29, #-16]
  20:	mov	x1, x8
  24:	bl	0 <lstat>
  28:	cbnz	w0, 50 <fgetflags+0x50>
  2c:	ldr	w8, [sp, #40]
  30:	and	w8, w8, #0xf000
  34:	cmp	w8, #0x8, lsl #12
  38:	b.eq	50 <fgetflags+0x50>  // b.none
  3c:	ldr	w8, [sp, #40]
  40:	and	w8, w8, #0xf000
  44:	cmp	w8, #0x4, lsl #12
  48:	b.eq	50 <fgetflags+0x50>  // b.none
  4c:	b	ec <fgetflags+0xec>
  50:	ldur	x0, [x29, #-16]
  54:	mov	w1, #0x800                 	// #2048
  58:	bl	0 <open>
  5c:	str	w0, [sp, #20]
  60:	ldr	w8, [sp, #20]
  64:	mov	w9, #0xffffffff            	// #-1
  68:	cmp	w8, w9
  6c:	b.ne	7c <fgetflags+0x7c>  // b.any
  70:	mov	w8, #0xffffffff            	// #-1
  74:	stur	w8, [x29, #-4]
  78:	b	100 <fgetflags+0x100>
  7c:	ldr	w0, [sp, #20]
  80:	mov	x1, #0x6601                	// #26113
  84:	movk	x1, #0x8008, lsl #16
  88:	add	x2, sp, #0xc
  8c:	bl	0 <ioctl>
  90:	str	w0, [sp, #16]
  94:	ldr	w8, [sp, #16]
  98:	mov	w9, #0xffffffff            	// #-1
  9c:	cmp	w8, w9
  a0:	b.ne	b0 <fgetflags+0xb0>  // b.any
  a4:	bl	0 <__errno_location>
  a8:	ldr	w8, [x0]
  ac:	str	w8, [sp, #8]
  b0:	ldrsw	x8, [sp, #12]
  b4:	ldur	x9, [x29, #-24]
  b8:	str	x8, [x9]
  bc:	ldr	w0, [sp, #20]
  c0:	bl	0 <close>
  c4:	ldr	w10, [sp, #8]
  c8:	cbz	w10, e0 <fgetflags+0xe0>
  cc:	ldr	w8, [sp, #8]
  d0:	str	w8, [sp, #4]
  d4:	bl	0 <__errno_location>
  d8:	ldr	w8, [sp, #4]
  dc:	str	w8, [x0]
  e0:	ldr	w8, [sp, #16]
  e4:	stur	w8, [x29, #-4]
  e8:	b	100 <fgetflags+0x100>
  ec:	bl	0 <__errno_location>
  f0:	mov	w8, #0x5f                  	// #95
  f4:	str	w8, [x0]
  f8:	mov	w8, #0xffffffff            	// #-1
  fc:	stur	w8, [x29, #-4]
 100:	ldur	w0, [x29, #-4]
 104:	ldp	x29, x30, [sp, #176]
 108:	add	sp, sp, #0xc0
 10c:	ret

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #176]
   8:	add	x29, sp, #0xb0
   c:	add	x8, sp, #0x8
  10:	stur	x0, [x29, #-16]
  14:	stur	x1, [x29, #-24]
  18:	stur	wzr, [x29, #-40]
  1c:	ldur	x0, [x29, #-16]
  20:	mov	x1, x8
  24:	bl	0 <lstat>
  28:	cbnz	w0, 50 <fsetflags+0x50>
  2c:	ldr	w8, [sp, #24]
  30:	and	w8, w8, #0xf000
  34:	cmp	w8, #0x8, lsl #12
  38:	b.eq	50 <fsetflags+0x50>  // b.none
  3c:	ldr	w8, [sp, #24]
  40:	and	w8, w8, #0xf000
  44:	cmp	w8, #0x4, lsl #12
  48:	b.eq	50 <fsetflags+0x50>  // b.none
  4c:	b	e8 <fsetflags+0xe8>
  50:	ldur	x0, [x29, #-16]
  54:	mov	w1, #0x800                 	// #2048
  58:	bl	0 <open>
  5c:	stur	w0, [x29, #-28]
  60:	ldur	w8, [x29, #-28]
  64:	mov	w9, #0xffffffff            	// #-1
  68:	cmp	w8, w9
  6c:	b.ne	7c <fsetflags+0x7c>  // b.any
  70:	mov	w8, #0xffffffff            	// #-1
  74:	stur	w8, [x29, #-4]
  78:	b	fc <fsetflags+0xfc>
  7c:	ldur	x8, [x29, #-24]
  80:	sub	x2, x29, #0x24
  84:	stur	w8, [x29, #-36]
  88:	ldur	w0, [x29, #-28]
  8c:	mov	x1, #0x6602                	// #26114
  90:	movk	x1, #0x4008, lsl #16
  94:	bl	0 <ioctl>
  98:	stur	w0, [x29, #-32]
  9c:	ldur	w8, [x29, #-32]
  a0:	mov	w9, #0xffffffff            	// #-1
  a4:	cmp	w8, w9
  a8:	b.ne	b8 <fsetflags+0xb8>  // b.any
  ac:	bl	0 <__errno_location>
  b0:	ldr	w8, [x0]
  b4:	stur	w8, [x29, #-40]
  b8:	ldur	w0, [x29, #-28]
  bc:	bl	0 <close>
  c0:	ldur	w8, [x29, #-40]
  c4:	cbz	w8, dc <fsetflags+0xdc>
  c8:	ldur	w8, [x29, #-40]
  cc:	str	w8, [sp, #4]
  d0:	bl	0 <__errno_location>
  d4:	ldr	w8, [sp, #4]
  d8:	str	w8, [x0]
  dc:	ldur	w8, [x29, #-32]
  e0:	stur	w8, [x29, #-4]
  e4:	b	fc <fsetflags+0xfc>
  e8:	bl	0 <__errno_location>
  ec:	mov	w8, #0x5f                  	// #95
  f0:	str	w8, [x0]
  f4:	mov	w8, #0xffffffff            	// #-1
  f8:	stur	w8, [x29, #-4]
  fc:	ldur	w0, [x29, #-4]
 100:	ldp	x29, x30, [sp, #176]
 104:	add	sp, sp, #0xc0
 108:	ret

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	mov	w8, #0xffffffff            	// #-1
  10:	mov	w9, #0x800                 	// #2048
  14:	stur	x0, [x29, #-16]
  18:	str	x1, [sp, #24]
  1c:	str	w8, [sp, #20]
  20:	str	w8, [sp, #16]
  24:	str	wzr, [sp, #8]
  28:	ldur	x0, [x29, #-16]
  2c:	mov	w1, w9
  30:	str	w8, [sp, #4]
  34:	bl	0 <open>
  38:	str	w0, [sp, #12]
  3c:	ldr	w8, [sp, #12]
  40:	ldr	w9, [sp, #4]
  44:	cmp	w8, w9
  48:	b.ne	58 <fgetversion+0x58>  // b.any
  4c:	mov	w8, #0xffffffff            	// #-1
  50:	stur	w8, [x29, #-4]
  54:	b	d8 <fgetversion+0xd8>
  58:	ldr	w0, [sp, #12]
  5c:	mov	x1, #0x7601                	// #30209
  60:	movk	x1, #0x8008, lsl #16
  64:	add	x2, sp, #0x14
  68:	bl	0 <ioctl>
  6c:	str	w0, [sp, #16]
  70:	ldr	w8, [sp, #16]
  74:	mov	w9, #0xffffffff            	// #-1
  78:	cmp	w8, w9
  7c:	b.ne	8c <fgetversion+0x8c>  // b.any
  80:	bl	0 <__errno_location>
  84:	ldr	w8, [x0]
  88:	str	w8, [sp, #8]
  8c:	ldr	w0, [sp, #12]
  90:	bl	0 <close>
  94:	ldr	w8, [sp, #16]
  98:	mov	w9, #0xffffffff            	// #-1
  9c:	cmp	w8, w9
  a0:	b.ne	b8 <fgetversion+0xb8>  // b.any
  a4:	ldr	w8, [sp, #8]
  a8:	str	w8, [sp]
  ac:	bl	0 <__errno_location>
  b0:	ldr	w8, [sp]
  b4:	str	w8, [x0]
  b8:	ldr	w8, [sp, #16]
  bc:	cbnz	w8, d0 <fgetversion+0xd0>
  c0:	ldr	w8, [sp, #20]
  c4:	mov	w9, w8
  c8:	ldr	x10, [sp, #24]
  cc:	str	x9, [x10]
  d0:	ldr	w8, [sp, #16]
  d4:	stur	w8, [x29, #-4]
  d8:	ldur	w0, [x29, #-4]
  dc:	ldp	x29, x30, [sp, #48]
  e0:	add	sp, sp, #0x40
  e4:	ret

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	mov	w8, #0x800                 	// #2048
  10:	mov	w9, #0xffffffff            	// #-1
  14:	stur	x0, [x29, #-16]
  18:	str	x1, [sp, #24]
  1c:	str	wzr, [sp, #8]
  20:	ldur	x0, [x29, #-16]
  24:	mov	w1, w8
  28:	str	w9, [sp, #4]
  2c:	bl	0 <open>
  30:	str	w0, [sp, #20]
  34:	ldr	w8, [sp, #20]
  38:	ldr	w9, [sp, #4]
  3c:	cmp	w8, w9
  40:	b.ne	50 <fsetversion+0x50>  // b.any
  44:	mov	w8, #0xffffffff            	// #-1
  48:	stur	w8, [x29, #-4]
  4c:	b	b8 <fsetversion+0xb8>
  50:	ldr	x8, [sp, #24]
  54:	add	x2, sp, #0xc
  58:	str	w8, [sp, #12]
  5c:	ldr	w0, [sp, #20]
  60:	mov	x1, #0x7602                	// #30210
  64:	movk	x1, #0x4008, lsl #16
  68:	bl	0 <ioctl>
  6c:	str	w0, [sp, #16]
  70:	ldr	w8, [sp, #16]
  74:	mov	w9, #0xffffffff            	// #-1
  78:	cmp	w8, w9
  7c:	b.ne	8c <fsetversion+0x8c>  // b.any
  80:	bl	0 <__errno_location>
  84:	ldr	w8, [x0]
  88:	str	w8, [sp, #8]
  8c:	ldr	w0, [sp, #20]
  90:	bl	0 <close>
  94:	ldr	w8, [sp, #8]
  98:	cbz	w8, b0 <fsetversion+0xb0>
  9c:	ldr	w8, [sp, #8]
  a0:	str	w8, [sp]
  a4:	bl	0 <__errno_location>
  a8:	ldr	w8, [sp]
  ac:	str	w8, [x0]
  b0:	ldr	w8, [sp, #16]
  b4:	stur	w8, [x29, #-4]
  b8:	ldur	w0, [x29, #-4]
  bc:	ldp	x29, x30, [sp, #48]
  c0:	add	sp, sp, #0x40
  c4:	ret

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x29, x30, [sp, #160]
   8:	add	x29, sp, #0xa0
   c:	add	x8, sp, #0x10
  10:	stur	w0, [x29, #-8]
  14:	stur	x1, [x29, #-16]
  18:	ldur	w0, [x29, #-8]
  1c:	mov	x1, x8
  20:	bl	0 <fstat>
  24:	cbnz	w0, 4c <getflags+0x4c>
  28:	ldr	w8, [sp, #32]
  2c:	and	w8, w8, #0xf000
  30:	cmp	w8, #0x8, lsl #12
  34:	b.eq	4c <getflags+0x4c>  // b.none
  38:	ldr	w8, [sp, #32]
  3c:	and	w8, w8, #0xf000
  40:	cmp	w8, #0x4, lsl #12
  44:	b.eq	4c <getflags+0x4c>  // b.none
  48:	b	7c <getflags+0x7c>
  4c:	ldur	w0, [x29, #-8]
  50:	mov	x1, #0x6601                	// #26113
  54:	movk	x1, #0x8008, lsl #16
  58:	add	x2, sp, #0x8
  5c:	bl	0 <ioctl>
  60:	str	w0, [sp, #12]
  64:	ldrsw	x8, [sp, #8]
  68:	ldur	x9, [x29, #-16]
  6c:	str	x8, [x9]
  70:	ldr	w10, [sp, #12]
  74:	stur	w10, [x29, #-4]
  78:	b	90 <getflags+0x90>
  7c:	bl	0 <__errno_location>
  80:	mov	w8, #0x5f                  	// #95
  84:	str	w8, [x0]
  88:	mov	w8, #0xffffffff            	// #-1
  8c:	stur	w8, [x29, #-4]
  90:	ldur	w0, [x29, #-4]
  94:	ldp	x29, x30, [sp, #160]
  98:	add	sp, sp, #0xb0
  9c:	ret

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	mov	x8, #0x7601                	// #30209
  10:	movk	x8, #0x8008, lsl #16
  14:	add	x2, sp, #0x8
  18:	stur	w0, [x29, #-4]
  1c:	str	x1, [sp, #16]
  20:	ldur	w0, [x29, #-4]
  24:	mov	x1, x8
  28:	bl	0 <ioctl>
  2c:	str	w0, [sp, #12]
  30:	ldrsw	x8, [sp, #8]
  34:	ldr	x9, [sp, #16]
  38:	str	x8, [x9]
  3c:	ldr	w0, [sp, #12]
  40:	ldp	x29, x30, [sp, #32]
  44:	add	sp, sp, #0x30
  48:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	adrp	x8, 0 <e2p_hash2string>
  10:	add	x8, x8, #0x0
  14:	stur	w0, [x29, #-12]
  18:	str	x8, [sp, #8]
  1c:	ldr	x8, [sp, #8]
  20:	ldr	x8, [x8, #8]
  24:	cbz	x8, 5c <e2p_hash2string+0x5c>
  28:	ldur	w8, [x29, #-12]
  2c:	ldr	x9, [sp, #8]
  30:	ldr	w10, [x9]
  34:	cmp	w8, w10
  38:	b.ne	4c <e2p_hash2string+0x4c>  // b.any
  3c:	ldr	x8, [sp, #8]
  40:	ldr	x8, [x8, #8]
  44:	stur	x8, [x29, #-8]
  48:	b	84 <e2p_hash2string+0x84>
  4c:	ldr	x8, [sp, #8]
  50:	add	x8, x8, #0x10
  54:	str	x8, [sp, #8]
  58:	b	1c <e2p_hash2string+0x1c>
  5c:	ldur	w2, [x29, #-12]
  60:	adrp	x8, 0 <e2p_hash2string>
  64:	add	x8, x8, #0x0
  68:	mov	x0, x8
  6c:	adrp	x1, 0 <e2p_hash2string>
  70:	add	x1, x1, #0x0
  74:	str	x8, [sp]
  78:	bl	0 <sprintf>
  7c:	ldr	x8, [sp]
  80:	stur	x8, [x29, #-8]
  84:	ldur	x0, [x29, #-8]
  88:	ldp	x29, x30, [sp, #32]
  8c:	add	sp, sp, #0x30
  90:	ret

0000000000000094 <e2p_string2hash>:
  94:	sub	sp, sp, #0x40
  98:	stp	x29, x30, [sp, #48]
  9c:	add	x29, sp, #0x30
  a0:	adrp	x8, 0 <e2p_hash2string>
  a4:	add	x8, x8, #0x0
  a8:	stur	x0, [x29, #-16]
  ac:	str	x8, [sp, #24]
  b0:	ldr	x8, [sp, #24]
  b4:	ldr	x8, [x8, #8]
  b8:	cbz	x8, f0 <e2p_string2hash+0x5c>
  bc:	ldur	x0, [x29, #-16]
  c0:	ldr	x8, [sp, #24]
  c4:	ldr	x1, [x8, #8]
  c8:	bl	0 <strcasecmp>
  cc:	cbnz	w0, e0 <e2p_string2hash+0x4c>
  d0:	ldr	x8, [sp, #24]
  d4:	ldr	w9, [x8]
  d8:	stur	w9, [x29, #-4]
  dc:	b	18c <e2p_string2hash+0xf8>
  e0:	ldr	x8, [sp, #24]
  e4:	add	x8, x8, #0x10
  e8:	str	x8, [sp, #24]
  ec:	b	b0 <e2p_string2hash+0x1c>
  f0:	ldur	x0, [x29, #-16]
  f4:	adrp	x1, 0 <e2p_hash2string>
  f8:	add	x1, x1, #0x0
  fc:	mov	x2, #0x8                   	// #8
 100:	bl	0 <strncasecmp>
 104:	cbz	w0, 114 <e2p_string2hash+0x80>
 108:	mov	w8, #0xffffffff            	// #-1
 10c:	stur	w8, [x29, #-4]
 110:	b	18c <e2p_string2hash+0xf8>
 114:	ldur	x8, [x29, #-16]
 118:	ldrb	w9, [x8, #8]
 11c:	cbnz	w9, 12c <e2p_string2hash+0x98>
 120:	mov	w8, #0xffffffff            	// #-1
 124:	stur	w8, [x29, #-4]
 128:	b	18c <e2p_string2hash+0xf8>
 12c:	ldur	x8, [x29, #-16]
 130:	add	x0, x8, #0x8
 134:	add	x1, sp, #0x10
 138:	mov	w2, #0xa                   	// #10
 13c:	bl	0 <strtol>
 140:	str	w0, [sp, #12]
 144:	ldr	w9, [sp, #12]
 148:	cmp	w9, #0xff
 14c:	b.gt	160 <e2p_string2hash+0xcc>
 150:	ldr	w8, [sp, #12]
 154:	cmp	w8, #0x0
 158:	cset	w8, ge  // ge = tcont
 15c:	tbnz	w8, #0, 16c <e2p_string2hash+0xd8>
 160:	mov	w8, #0xffffffff            	// #-1
 164:	stur	w8, [x29, #-4]
 168:	b	18c <e2p_string2hash+0xf8>
 16c:	ldr	x8, [sp, #16]
 170:	ldrb	w9, [x8]
 174:	cbz	w9, 184 <e2p_string2hash+0xf0>
 178:	mov	w8, #0xffffffff            	// #-1
 17c:	stur	w8, [x29, #-4]
 180:	b	18c <e2p_string2hash+0xf8>
 184:	ldr	w8, [sp, #12]
 188:	stur	w8, [x29, #-4]
 18c:	ldur	w0, [x29, #-4]
 190:	ldp	x29, x30, [sp, #48]
 194:	add	sp, sp, #0x40
 198:	ret

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	sub	sp, sp, #0x60
   4:	stp	x29, x30, [sp, #80]
   8:	add	x29, sp, #0x50
   c:	mov	w8, #0xffffffff            	// #-1
  10:	mov	w9, #0x3                   	// #3
  14:	stur	x0, [x29, #-16]
  18:	stur	x1, [x29, #-24]
  1c:	stur	x2, [x29, #-32]
  20:	str	w8, [sp, #20]
  24:	str	wzr, [sp, #12]
  28:	ldur	x0, [x29, #-16]
  2c:	mov	w1, w9
  30:	str	w8, [sp, #8]
  34:	bl	0 <pathconf>
  38:	str	w0, [sp, #20]
  3c:	ldr	w8, [sp, #20]
  40:	ldr	w9, [sp, #8]
  44:	cmp	w8, w9
  48:	b.ne	54 <iterate_on_dir+0x54>  // b.any
  4c:	mov	w8, #0xe                   	// #14
  50:	str	w8, [sp, #20]
  54:	ldrsw	x8, [sp, #20]
  58:	add	x8, x8, #0x118
  5c:	str	w8, [sp, #20]
  60:	ldr	w8, [sp, #20]
  64:	add	w8, w8, #0x1
  68:	mov	w0, w8
  6c:	sxtw	x0, w0
  70:	bl	0 <malloc>
  74:	str	x0, [sp, #32]
  78:	ldr	x9, [sp, #32]
  7c:	cbnz	x9, 8c <iterate_on_dir+0x8c>
  80:	mov	w8, #0xffffffff            	// #-1
  84:	stur	w8, [x29, #-4]
  88:	b	158 <iterate_on_dir+0x158>
  8c:	ldr	x0, [sp, #32]
  90:	ldr	w8, [sp, #20]
  94:	add	w8, w8, #0x1
  98:	mov	w1, w8
  9c:	sxtw	x2, w1
  a0:	mov	w8, wzr
  a4:	mov	w1, w8
  a8:	bl	0 <memset>
  ac:	ldur	x0, [x29, #-16]
  b0:	bl	0 <opendir>
  b4:	str	x0, [sp, #40]
  b8:	ldr	x9, [sp, #40]
  bc:	cbnz	x9, d4 <iterate_on_dir+0xd4>
  c0:	ldr	x0, [sp, #32]
  c4:	bl	0 <free>
  c8:	mov	w8, #0xffffffff            	// #-1
  cc:	stur	w8, [x29, #-4]
  d0:	b	158 <iterate_on_dir+0x158>
  d4:	ldr	x0, [sp, #40]
  d8:	bl	0 <readdir>
  dc:	str	x0, [sp, #24]
  e0:	cbz	x0, 140 <iterate_on_dir+0x140>
  e4:	ldr	x8, [sp, #24]
  e8:	ldrh	w9, [x8, #16]
  ec:	str	w9, [sp, #16]
  f0:	ldr	w9, [sp, #16]
  f4:	ldr	w10, [sp, #20]
  f8:	cmp	w9, w10
  fc:	b.le	108 <iterate_on_dir+0x108>
 100:	ldr	w8, [sp, #20]
 104:	str	w8, [sp, #16]
 108:	ldr	x0, [sp, #32]
 10c:	ldr	x1, [sp, #24]
 110:	ldrsw	x2, [sp, #16]
 114:	bl	0 <memcpy>
 118:	ldur	x8, [x29, #-24]
 11c:	ldur	x0, [x29, #-16]
 120:	ldr	x1, [sp, #32]
 124:	ldur	x2, [x29, #-32]
 128:	blr	x8
 12c:	cbz	w0, 13c <iterate_on_dir+0x13c>
 130:	ldr	w8, [sp, #12]
 134:	add	w8, w8, #0x1
 138:	str	w8, [sp, #12]
 13c:	b	d4 <iterate_on_dir+0xd4>
 140:	ldr	x0, [sp, #32]
 144:	bl	0 <free>
 148:	ldr	x0, [sp, #40]
 14c:	bl	0 <closedir>
 150:	ldr	w8, [sp, #12]
 154:	stur	w8, [x29, #-4]
 158:	ldur	w0, [x29, #-4]
 15c:	ldp	x29, x30, [sp, #80]
 160:	add	sp, sp, #0x60
 164:	ret

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	str	x28, [sp, #16]
       8:	mov	x29, sp
       c:	sub	sp, sp, #0x200
      10:	stur	x0, [x29, #-8]
      14:	stur	x1, [x29, #-16]
      18:	ldur	x8, [x29, #-8]
      1c:	ldr	w9, [x8, #40]
      20:	ldur	x8, [x29, #-8]
      24:	ldr	w10, [x8, #76]
      28:	stur	w9, [x29, #-140]
      2c:	cbnz	w10, 3c <list_super2+0x3c>
      30:	mov	w8, #0x80                  	// #128
      34:	stur	w8, [x29, #-144]
      38:	b	48 <list_super2+0x48>
      3c:	ldur	x8, [x29, #-8]
      40:	ldrh	w9, [x8, #88]
      44:	stur	w9, [x29, #-144]
      48:	ldur	w8, [x29, #-144]
      4c:	ldur	w9, [x29, #-140]
      50:	mul	w8, w9, w8
      54:	ldur	x10, [x29, #-8]
      58:	ldr	w11, [x10, #24]
      5c:	mov	w12, #0x400                 	// #1024
      60:	lsl	w11, w12, w11
      64:	add	w8, w8, w11
      68:	subs	w8, w8, #0x1
      6c:	ldur	x10, [x29, #-8]
      70:	ldr	w11, [x10, #24]
      74:	lsl	w11, w12, w11
      78:	udiv	w8, w8, w11
      7c:	stur	w8, [x29, #-20]
      80:	ldur	x10, [x29, #-8]
      84:	ldrb	w8, [x10, #120]
      88:	cbz	w8, c0 <list_super2+0xc0>
      8c:	sub	x8, x29, #0x64
      90:	mov	x0, x8
      94:	mov	w9, wzr
      98:	mov	w1, w9
      9c:	mov	x2, #0x50                  	// #80
      a0:	stur	x8, [x29, #-152]
      a4:	bl	0 <memset>
      a8:	ldur	x8, [x29, #-8]
      ac:	add	x1, x8, #0x78
      b0:	ldur	x0, [x29, #-152]
      b4:	mov	x2, #0x10                  	// #16
      b8:	bl	0 <strncpy>
      bc:	b	d0 <list_super2+0xd0>
      c0:	sub	x0, x29, #0x64
      c4:	adrp	x1, 0 <list_super2>
      c8:	add	x1, x1, #0x0
      cc:	bl	0 <strcpy>
      d0:	ldur	x0, [x29, #-16]
      d4:	adrp	x1, 0 <list_super2>
      d8:	add	x1, x1, #0x0
      dc:	sub	x2, x29, #0x64
      e0:	bl	0 <fprintf>
      e4:	ldur	x8, [x29, #-8]
      e8:	ldrb	w9, [x8, #136]
      ec:	cbz	w9, 124 <list_super2+0x124>
      f0:	sub	x8, x29, #0x64
      f4:	mov	x0, x8
      f8:	mov	w9, wzr
      fc:	mov	w1, w9
     100:	mov	x2, #0x50                  	// #80
     104:	stur	x8, [x29, #-160]
     108:	bl	0 <memset>
     10c:	ldur	x8, [x29, #-8]
     110:	add	x1, x8, #0x88
     114:	ldur	x0, [x29, #-160]
     118:	mov	x2, #0x40                  	// #64
     11c:	bl	0 <strncpy>
     120:	b	134 <list_super2+0x134>
     124:	sub	x0, x29, #0x64
     128:	adrp	x1, 0 <list_super2>
     12c:	add	x1, x1, #0x0
     130:	bl	0 <strcpy>
     134:	ldur	x0, [x29, #-16]
     138:	adrp	x1, 0 <list_super2>
     13c:	add	x1, x1, #0x0
     140:	sub	x2, x29, #0x64
     144:	bl	0 <fprintf>
     148:	ldur	x8, [x29, #-16]
     14c:	ldur	x9, [x29, #-8]
     150:	add	x9, x9, #0x68
     154:	mov	x0, x9
     158:	stur	x8, [x29, #-168]
     15c:	bl	0 <e2p_uuid2str>
     160:	ldur	x8, [x29, #-168]
     164:	stur	x0, [x29, #-176]
     168:	mov	x0, x8
     16c:	adrp	x1, 0 <list_super2>
     170:	add	x1, x1, #0x0
     174:	ldur	x2, [x29, #-176]
     178:	bl	0 <fprintf>
     17c:	ldur	x8, [x29, #-16]
     180:	ldur	x9, [x29, #-8]
     184:	ldrh	w2, [x9, #56]
     188:	mov	x0, x8
     18c:	adrp	x1, 0 <list_super2>
     190:	add	x1, x1, #0x0
     194:	bl	0 <fprintf>
     198:	ldur	x8, [x29, #-16]
     19c:	ldur	x9, [x29, #-8]
     1a0:	ldr	w2, [x9, #76]
     1a4:	mov	x0, x8
     1a8:	adrp	x1, 0 <list_super2>
     1ac:	add	x1, x1, #0x0
     1b0:	bl	0 <fprintf>
     1b4:	ldur	x8, [x29, #-8]
     1b8:	ldr	w10, [x8, #76]
     1bc:	cbnz	w10, 1d4 <list_super2+0x1d4>
     1c0:	ldur	x0, [x29, #-16]
     1c4:	adrp	x1, 0 <list_super2>
     1c8:	add	x1, x1, #0x0
     1cc:	bl	0 <fprintf>
     1d0:	b	208 <list_super2+0x208>
     1d4:	ldur	x8, [x29, #-8]
     1d8:	ldr	w9, [x8, #76]
     1dc:	cmp	w9, #0x1
     1e0:	b.ne	1f8 <list_super2+0x1f8>  // b.any
     1e4:	ldur	x0, [x29, #-16]
     1e8:	adrp	x1, 0 <list_super2>
     1ec:	add	x1, x1, #0x0
     1f0:	bl	0 <fprintf>
     1f4:	b	208 <list_super2+0x208>
     1f8:	ldur	x0, [x29, #-16]
     1fc:	adrp	x1, 0 <list_super2>
     200:	add	x1, x1, #0x0
     204:	bl	0 <fprintf>
     208:	ldur	x0, [x29, #-8]
     20c:	ldur	x1, [x29, #-16]
     210:	bl	1010 <print_features>
     214:	ldur	x0, [x29, #-8]
     218:	ldur	x1, [x29, #-16]
     21c:	bl	1130 <print_super_flags>
     220:	ldur	x0, [x29, #-8]
     224:	ldur	x1, [x29, #-16]
     228:	bl	1224 <print_mntopts>
     22c:	ldur	x8, [x29, #-8]
     230:	ldrb	w9, [x8, #512]
     234:	cbz	w9, 250 <list_super2+0x250>
     238:	ldur	x0, [x29, #-16]
     23c:	ldur	x8, [x29, #-8]
     240:	add	x2, x8, #0x200
     244:	adrp	x1, 0 <list_super2>
     248:	add	x1, x1, #0x0
     24c:	bl	0 <fprintf>
     250:	ldur	x0, [x29, #-16]
     254:	adrp	x1, 0 <list_super2>
     258:	add	x1, x1, #0x0
     25c:	bl	0 <fprintf>
     260:	ldur	x8, [x29, #-16]
     264:	ldur	x9, [x29, #-8]
     268:	ldrh	w1, [x9, #58]
     26c:	mov	x0, x8
     270:	bl	0 <print_fs_state>
     274:	ldur	x0, [x29, #-16]
     278:	adrp	x8, 0 <list_super2>
     27c:	add	x8, x8, #0x0
     280:	mov	x1, x8
     284:	stur	x8, [x29, #-184]
     288:	bl	0 <fprintf>
     28c:	ldur	x8, [x29, #-16]
     290:	mov	x0, x8
     294:	adrp	x1, 0 <list_super2>
     298:	add	x1, x1, #0x0
     29c:	bl	0 <fprintf>
     2a0:	ldur	x8, [x29, #-16]
     2a4:	ldur	x9, [x29, #-8]
     2a8:	ldrh	w1, [x9, #60]
     2ac:	mov	x0, x8
     2b0:	bl	0 <print_fs_errors>
     2b4:	ldur	x0, [x29, #-16]
     2b8:	ldur	x1, [x29, #-184]
     2bc:	bl	0 <fprintf>
     2c0:	ldur	x8, [x29, #-8]
     2c4:	ldr	w10, [x8, #72]
     2c8:	mov	w0, w10
     2cc:	bl	0 <e2p_os2string>
     2d0:	stur	x0, [x29, #-112]
     2d4:	ldur	x0, [x29, #-16]
     2d8:	ldur	x2, [x29, #-112]
     2dc:	adrp	x1, 0 <list_super2>
     2e0:	add	x1, x1, #0x0
     2e4:	bl	0 <fprintf>
     2e8:	ldur	x8, [x29, #-112]
     2ec:	mov	x0, x8
     2f0:	bl	0 <free>
     2f4:	ldur	x0, [x29, #-16]
     2f8:	ldur	x8, [x29, #-8]
     2fc:	ldr	w2, [x8]
     300:	adrp	x1, 0 <list_super2>
     304:	add	x1, x1, #0x0
     308:	bl	0 <fprintf>
     30c:	ldur	x8, [x29, #-16]
     310:	ldur	x9, [x29, #-8]
     314:	mov	x0, x9
     318:	stur	x8, [x29, #-192]
     31c:	bl	136c <e2p_blocks_count>
     320:	ldur	x8, [x29, #-192]
     324:	stur	x0, [x29, #-200]
     328:	mov	x0, x8
     32c:	adrp	x1, 0 <list_super2>
     330:	add	x1, x1, #0x0
     334:	ldur	x2, [x29, #-200]
     338:	bl	0 <fprintf>
     33c:	ldur	x8, [x29, #-16]
     340:	ldur	x9, [x29, #-8]
     344:	mov	x0, x9
     348:	stur	x8, [x29, #-208]
     34c:	bl	13d0 <e2p_r_blocks_count>
     350:	ldur	x8, [x29, #-208]
     354:	stur	x0, [x29, #-216]
     358:	mov	x0, x8
     35c:	adrp	x1, 0 <list_super2>
     360:	add	x1, x1, #0x0
     364:	ldur	x2, [x29, #-216]
     368:	bl	0 <fprintf>
     36c:	ldur	x8, [x29, #-8]
     370:	ldr	w10, [x8, #584]
     374:	cbz	w10, 390 <list_super2+0x390>
     378:	ldur	x0, [x29, #-16]
     37c:	ldur	x8, [x29, #-8]
     380:	ldr	w2, [x8, #584]
     384:	adrp	x1, 0 <list_super2>
     388:	add	x1, x1, #0x0
     38c:	bl	0 <fprintf>
     390:	ldur	x0, [x29, #-16]
     394:	ldur	x8, [x29, #-8]
     398:	stur	x0, [x29, #-224]
     39c:	mov	x0, x8
     3a0:	bl	1434 <e2p_free_blocks_count>
     3a4:	ldur	x8, [x29, #-224]
     3a8:	stur	x0, [x29, #-232]
     3ac:	mov	x0, x8
     3b0:	adrp	x1, 0 <list_super2>
     3b4:	add	x1, x1, #0x0
     3b8:	ldur	x2, [x29, #-232]
     3bc:	bl	0 <fprintf>
     3c0:	ldur	x8, [x29, #-16]
     3c4:	ldur	x9, [x29, #-8]
     3c8:	ldr	w2, [x9, #16]
     3cc:	mov	x0, x8
     3d0:	adrp	x1, 0 <list_super2>
     3d4:	add	x1, x1, #0x0
     3d8:	bl	0 <fprintf>
     3dc:	ldur	x8, [x29, #-16]
     3e0:	ldur	x9, [x29, #-8]
     3e4:	ldr	w2, [x9, #20]
     3e8:	mov	x0, x8
     3ec:	adrp	x1, 0 <list_super2>
     3f0:	add	x1, x1, #0x0
     3f4:	bl	0 <fprintf>
     3f8:	ldur	x8, [x29, #-16]
     3fc:	ldur	x9, [x29, #-8]
     400:	ldr	w10, [x9, #24]
     404:	mov	w11, #0x400                 	// #1024
     408:	lsl	w2, w11, w10
     40c:	mov	x0, x8
     410:	adrp	x1, 0 <list_super2>
     414:	add	x1, x1, #0x0
     418:	bl	0 <fprintf>
     41c:	ldur	x8, [x29, #-8]
     420:	mov	x0, x8
     424:	bl	1498 <ext2fs_has_feature_bigalloc>
     428:	cbz	w0, 450 <list_super2+0x450>
     42c:	ldur	x0, [x29, #-16]
     430:	ldur	x8, [x29, #-8]
     434:	ldr	w9, [x8, #28]
     438:	mov	w10, #0x400                 	// #1024
     43c:	lsl	w2, w10, w9
     440:	adrp	x1, 0 <list_super2>
     444:	add	x1, x1, #0x0
     448:	bl	0 <fprintf>
     44c:	b	470 <list_super2+0x470>
     450:	ldur	x0, [x29, #-16]
     454:	ldur	x8, [x29, #-8]
     458:	ldr	w9, [x8, #28]
     45c:	mov	w10, #0x400                 	// #1024
     460:	lsl	w2, w10, w9
     464:	adrp	x1, 0 <list_super2>
     468:	add	x1, x1, #0x0
     46c:	bl	0 <fprintf>
     470:	ldur	x0, [x29, #-8]
     474:	bl	14bc <ext2fs_has_feature_64bit>
     478:	cbz	w0, 494 <list_super2+0x494>
     47c:	ldur	x0, [x29, #-16]
     480:	ldur	x8, [x29, #-8]
     484:	ldrh	w2, [x8, #254]
     488:	adrp	x1, 0 <list_super2>
     48c:	add	x1, x1, #0x0
     490:	bl	0 <fprintf>
     494:	ldur	x8, [x29, #-8]
     498:	ldrh	w9, [x8, #206]
     49c:	cbz	w9, 4b8 <list_super2+0x4b8>
     4a0:	ldur	x0, [x29, #-16]
     4a4:	ldur	x8, [x29, #-8]
     4a8:	ldrh	w2, [x8, #206]
     4ac:	adrp	x1, 0 <list_super2>
     4b0:	add	x1, x1, #0x0
     4b4:	bl	0 <fprintf>
     4b8:	ldur	x0, [x29, #-16]
     4bc:	ldur	x8, [x29, #-8]
     4c0:	ldr	w2, [x8, #32]
     4c4:	adrp	x1, 0 <list_super2>
     4c8:	add	x1, x1, #0x0
     4cc:	bl	0 <fprintf>
     4d0:	ldur	x8, [x29, #-8]
     4d4:	mov	x0, x8
     4d8:	bl	1498 <ext2fs_has_feature_bigalloc>
     4dc:	cbz	w0, 4fc <list_super2+0x4fc>
     4e0:	ldur	x0, [x29, #-16]
     4e4:	ldur	x8, [x29, #-8]
     4e8:	ldr	w2, [x8, #36]
     4ec:	adrp	x1, 0 <list_super2>
     4f0:	add	x1, x1, #0x0
     4f4:	bl	0 <fprintf>
     4f8:	b	514 <list_super2+0x514>
     4fc:	ldur	x0, [x29, #-16]
     500:	ldur	x8, [x29, #-8]
     504:	ldr	w2, [x8, #36]
     508:	adrp	x1, 0 <list_super2>
     50c:	add	x1, x1, #0x0
     510:	bl	0 <fprintf>
     514:	ldur	x0, [x29, #-16]
     518:	ldur	x8, [x29, #-8]
     51c:	ldr	w2, [x8, #40]
     520:	adrp	x1, 0 <list_super2>
     524:	add	x1, x1, #0x0
     528:	bl	0 <fprintf>
     52c:	ldur	x8, [x29, #-16]
     530:	ldur	w2, [x29, #-20]
     534:	mov	x0, x8
     538:	adrp	x1, 0 <list_super2>
     53c:	add	x1, x1, #0x0
     540:	bl	0 <fprintf>
     544:	ldur	x8, [x29, #-8]
     548:	ldrh	w9, [x8, #356]
     54c:	cbz	w9, 568 <list_super2+0x568>
     550:	ldur	x0, [x29, #-16]
     554:	ldur	x8, [x29, #-8]
     558:	ldrh	w2, [x8, #356]
     55c:	adrp	x1, 0 <list_super2>
     560:	add	x1, x1, #0x0
     564:	bl	0 <fprintf>
     568:	ldur	x8, [x29, #-8]
     56c:	ldr	w9, [x8, #368]
     570:	cbz	w9, 58c <list_super2+0x58c>
     574:	ldur	x0, [x29, #-16]
     578:	ldur	x8, [x29, #-8]
     57c:	ldr	w2, [x8, #368]
     580:	adrp	x1, 0 <list_super2>
     584:	add	x1, x1, #0x0
     588:	bl	0 <fprintf>
     58c:	ldur	x8, [x29, #-8]
     590:	ldr	w9, [x8, #260]
     594:	cbz	w9, 5b0 <list_super2+0x5b0>
     598:	ldur	x0, [x29, #-16]
     59c:	ldur	x8, [x29, #-8]
     5a0:	ldr	w2, [x8, #260]
     5a4:	adrp	x1, 0 <list_super2>
     5a8:	add	x1, x1, #0x0
     5ac:	bl	0 <fprintf>
     5b0:	ldur	x8, [x29, #-8]
     5b4:	ldrb	w9, [x8, #372]
     5b8:	cbz	w9, 5dc <list_super2+0x5dc>
     5bc:	ldur	x0, [x29, #-16]
     5c0:	ldur	x8, [x29, #-8]
     5c4:	ldrb	w9, [x8, #372]
     5c8:	mov	w10, #0x1                   	// #1
     5cc:	lsl	w2, w10, w9
     5d0:	adrp	x1, 0 <list_super2>
     5d4:	add	x1, x1, #0x0
     5d8:	bl	0 <fprintf>
     5dc:	ldur	x8, [x29, #-8]
     5e0:	ldr	w9, [x8, #264]
     5e4:	cbz	w9, 624 <list_super2+0x624>
     5e8:	ldur	x8, [x29, #-8]
     5ec:	ldr	w9, [x8, #264]
     5f0:	mov	w8, w9
     5f4:	sub	x0, x29, #0x78
     5f8:	stur	x8, [x29, #-120]
     5fc:	ldur	x8, [x29, #-16]
     600:	stur	x8, [x29, #-240]
     604:	bl	0 <ctime>
     608:	ldur	x8, [x29, #-240]
     60c:	stur	x0, [x29, #-248]
     610:	mov	x0, x8
     614:	adrp	x1, 0 <list_super2>
     618:	add	x1, x1, #0x0
     61c:	ldur	x2, [x29, #-248]
     620:	bl	0 <fprintf>
     624:	ldur	x8, [x29, #-8]
     628:	ldr	w9, [x8, #44]
     62c:	mov	w8, w9
     630:	stur	x8, [x29, #-120]
     634:	ldur	x0, [x29, #-16]
     638:	ldur	x8, [x29, #-8]
     63c:	ldr	w9, [x8, #44]
     640:	str	x0, [sp, #256]
     644:	cbz	w9, 658 <list_super2+0x658>
     648:	sub	x0, x29, #0x78
     64c:	bl	0 <ctime>
     650:	str	x0, [sp, #248]
     654:	b	664 <list_super2+0x664>
     658:	adrp	x8, 0 <list_super2>
     65c:	add	x8, x8, #0x0
     660:	str	x8, [sp, #248]
     664:	ldr	x8, [sp, #248]
     668:	ldr	x0, [sp, #256]
     66c:	adrp	x1, 0 <list_super2>
     670:	add	x1, x1, #0x0
     674:	mov	x2, x8
     678:	bl	0 <fprintf>
     67c:	ldur	x8, [x29, #-8]
     680:	ldr	w9, [x8, #48]
     684:	mov	w8, w9
     688:	sub	x10, x29, #0x78
     68c:	stur	x8, [x29, #-120]
     690:	ldur	x8, [x29, #-16]
     694:	mov	x0, x10
     698:	str	x10, [sp, #240]
     69c:	str	x8, [sp, #232]
     6a0:	bl	0 <ctime>
     6a4:	ldr	x8, [sp, #232]
     6a8:	str	x0, [sp, #224]
     6ac:	mov	x0, x8
     6b0:	adrp	x1, 0 <list_super2>
     6b4:	add	x1, x1, #0x0
     6b8:	ldr	x2, [sp, #224]
     6bc:	bl	0 <fprintf>
     6c0:	ldur	x8, [x29, #-16]
     6c4:	ldur	x10, [x29, #-8]
     6c8:	ldrh	w2, [x10, #52]
     6cc:	mov	x0, x8
     6d0:	adrp	x1, 0 <list_super2>
     6d4:	add	x1, x1, #0x0
     6d8:	bl	0 <fprintf>
     6dc:	ldur	x8, [x29, #-16]
     6e0:	ldur	x10, [x29, #-8]
     6e4:	ldrsh	w2, [x10, #54]
     6e8:	mov	x0, x8
     6ec:	adrp	x1, 0 <list_super2>
     6f0:	add	x1, x1, #0x0
     6f4:	bl	0 <fprintf>
     6f8:	ldur	x8, [x29, #-8]
     6fc:	ldr	w9, [x8, #64]
     700:	mov	w8, w9
     704:	stur	x8, [x29, #-120]
     708:	ldur	x8, [x29, #-16]
     70c:	ldr	x10, [sp, #240]
     710:	mov	x0, x10
     714:	str	x8, [sp, #216]
     718:	bl	0 <ctime>
     71c:	ldr	x8, [sp, #216]
     720:	str	x0, [sp, #208]
     724:	mov	x0, x8
     728:	adrp	x1, 0 <list_super2>
     72c:	add	x1, x1, #0x0
     730:	ldr	x2, [sp, #208]
     734:	bl	0 <fprintf>
     738:	ldur	x8, [x29, #-16]
     73c:	ldur	x10, [x29, #-8]
     740:	ldr	w2, [x10, #68]
     744:	ldur	x10, [x29, #-8]
     748:	ldr	w9, [x10, #68]
     74c:	mov	w0, w9
     750:	str	x8, [sp, #200]
     754:	str	w2, [sp, #196]
     758:	bl	14e0 <interval_string>
     75c:	ldr	x8, [sp, #200]
     760:	str	x0, [sp, #184]
     764:	mov	x0, x8
     768:	adrp	x1, 0 <list_super2>
     76c:	add	x1, x1, #0x0
     770:	ldr	w2, [sp, #196]
     774:	ldr	x3, [sp, #184]
     778:	bl	0 <fprintf>
     77c:	ldur	x8, [x29, #-8]
     780:	ldr	w9, [x8, #68]
     784:	cbz	w9, 7d4 <list_super2+0x7d4>
     788:	ldur	x8, [x29, #-8]
     78c:	ldr	w9, [x8, #64]
     790:	ldur	x8, [x29, #-8]
     794:	ldr	w10, [x8, #68]
     798:	add	w9, w9, w10
     79c:	mov	w8, w9
     7a0:	ubfx	x8, x8, #0, #32
     7a4:	sub	x0, x29, #0x88
     7a8:	stur	x8, [x29, #-136]
     7ac:	ldur	x8, [x29, #-16]
     7b0:	str	x8, [sp, #176]
     7b4:	bl	0 <ctime>
     7b8:	ldr	x8, [sp, #176]
     7bc:	str	x0, [sp, #168]
     7c0:	mov	x0, x8
     7c4:	adrp	x1, 0 <list_super2>
     7c8:	add	x1, x1, #0x0
     7cc:	ldr	x2, [sp, #168]
     7d0:	bl	0 <fprintf>
     7d4:	ldur	x8, [x29, #-8]
     7d8:	ldr	x8, [x8, #376]
     7dc:	cbz	x8, 8e8 <list_super2+0x8e8>
     7e0:	ldur	x0, [x29, #-16]
     7e4:	adrp	x1, 0 <list_super2>
     7e8:	add	x1, x1, #0x0
     7ec:	bl	0 <fprintf>
     7f0:	ldur	x8, [x29, #-8]
     7f4:	ldr	x8, [x8, #376]
     7f8:	cmp	x8, #0x2, lsl #12
     7fc:	b.cs	81c <list_super2+0x81c>  // b.hs, b.nlast
     800:	ldur	x0, [x29, #-16]
     804:	ldur	x8, [x29, #-8]
     808:	ldr	x2, [x8, #376]
     80c:	adrp	x1, 0 <list_super2>
     810:	add	x1, x1, #0x0
     814:	bl	0 <fprintf>
     818:	b	8e8 <list_super2+0x8e8>
     81c:	ldur	x8, [x29, #-8]
     820:	ldr	x8, [x8, #376]
     824:	cmp	x8, #0x800, lsl #12
     828:	b.cs	850 <list_super2+0x850>  // b.hs, b.nlast
     82c:	ldur	x0, [x29, #-16]
     830:	ldur	x8, [x29, #-8]
     834:	ldr	x8, [x8, #376]
     838:	add	x8, x8, #0x200
     83c:	lsr	x2, x8, #10
     840:	adrp	x1, 0 <list_super2>
     844:	add	x1, x1, #0x0
     848:	bl	0 <fprintf>
     84c:	b	8e8 <list_super2+0x8e8>
     850:	ldur	x8, [x29, #-8]
     854:	ldr	x8, [x8, #376]
     858:	mov	x9, #0x200000000           	// #8589934592
     85c:	cmp	x8, x9
     860:	b.cs	888 <list_super2+0x888>  // b.hs, b.nlast
     864:	ldur	x0, [x29, #-16]
     868:	ldur	x8, [x29, #-8]
     86c:	ldr	x8, [x8, #376]
     870:	add	x8, x8, #0x80, lsl #12
     874:	lsr	x2, x8, #20
     878:	adrp	x1, 0 <list_super2>
     87c:	add	x1, x1, #0x0
     880:	bl	0 <fprintf>
     884:	b	8e8 <list_super2+0x8e8>
     888:	ldur	x8, [x29, #-8]
     88c:	ldr	x8, [x8, #376]
     890:	mov	x9, #0x80000000000         	// #8796093022208
     894:	cmp	x8, x9
     898:	b.cs	8c4 <list_super2+0x8c4>  // b.hs, b.nlast
     89c:	ldur	x0, [x29, #-16]
     8a0:	ldur	x8, [x29, #-8]
     8a4:	ldr	x8, [x8, #376]
     8a8:	mov	x9, #0x20000000            	// #536870912
     8ac:	add	x8, x8, x9
     8b0:	lsr	x2, x8, #30
     8b4:	adrp	x1, 0 <list_super2>
     8b8:	add	x1, x1, #0x0
     8bc:	bl	0 <fprintf>
     8c0:	b	8e8 <list_super2+0x8e8>
     8c4:	ldur	x0, [x29, #-16]
     8c8:	ldur	x8, [x29, #-8]
     8cc:	ldr	x8, [x8, #376]
     8d0:	mov	x9, #0x8000000000          	// #549755813888
     8d4:	add	x8, x8, x9
     8d8:	lsr	x2, x8, #40
     8dc:	adrp	x1, 0 <list_super2>
     8e0:	add	x1, x1, #0x0
     8e4:	bl	0 <fprintf>
     8e8:	ldur	x0, [x29, #-16]
     8ec:	adrp	x1, 0 <list_super2>
     8f0:	add	x1, x1, #0x0
     8f4:	bl	0 <fprintf>
     8f8:	ldur	x8, [x29, #-8]
     8fc:	ldrh	w9, [x8, #80]
     900:	ldur	x1, [x29, #-16]
     904:	mov	w0, w9
     908:	bl	1774 <print_user>
     90c:	ldur	x0, [x29, #-16]
     910:	adrp	x1, 0 <list_super2>
     914:	add	x1, x1, #0x0
     918:	bl	0 <fprintf>
     91c:	ldur	x8, [x29, #-8]
     920:	ldrh	w9, [x8, #82]
     924:	ldur	x1, [x29, #-16]
     928:	mov	w0, w9
     92c:	bl	17f0 <print_group>
     930:	ldur	x8, [x29, #-8]
     934:	ldr	w9, [x8, #76]
     938:	cmp	w9, #0x1
     93c:	b.cc	9bc <list_super2+0x9bc>  // b.lo, b.ul, b.last
     940:	ldur	x0, [x29, #-16]
     944:	ldur	x8, [x29, #-8]
     948:	ldr	w2, [x8, #84]
     94c:	adrp	x1, 0 <list_super2>
     950:	add	x1, x1, #0x0
     954:	bl	0 <fprintf>
     958:	ldur	x8, [x29, #-16]
     95c:	ldur	x9, [x29, #-8]
     960:	ldrh	w2, [x9, #88]
     964:	mov	x0, x8
     968:	adrp	x1, 0 <list_super2>
     96c:	add	x1, x1, #0x0
     970:	bl	0 <fprintf>
     974:	ldur	x8, [x29, #-8]
     978:	ldrh	w10, [x8, #348]
     97c:	cbz	w10, 998 <list_super2+0x998>
     980:	ldur	x0, [x29, #-16]
     984:	ldur	x8, [x29, #-8]
     988:	ldrh	w2, [x8, #348]
     98c:	adrp	x1, 0 <list_super2>
     990:	add	x1, x1, #0x0
     994:	bl	0 <fprintf>
     998:	ldur	x8, [x29, #-8]
     99c:	ldrh	w9, [x8, #350]
     9a0:	cbz	w9, 9bc <list_super2+0x9bc>
     9a4:	ldur	x0, [x29, #-16]
     9a8:	ldur	x8, [x29, #-8]
     9ac:	ldrh	w2, [x8, #350]
     9b0:	adrp	x1, 0 <list_super2>
     9b4:	add	x1, x1, #0x0
     9b8:	bl	0 <fprintf>
     9bc:	ldur	x8, [x29, #-8]
     9c0:	add	x0, x8, #0xd0
     9c4:	bl	0 <e2p_is_null_uuid>
     9c8:	cbnz	w0, a00 <list_super2+0xa00>
     9cc:	ldur	x0, [x29, #-16]
     9d0:	ldur	x8, [x29, #-8]
     9d4:	add	x8, x8, #0xd0
     9d8:	str	x0, [sp, #160]
     9dc:	mov	x0, x8
     9e0:	bl	0 <e2p_uuid2str>
     9e4:	ldr	x8, [sp, #160]
     9e8:	str	x0, [sp, #152]
     9ec:	mov	x0, x8
     9f0:	adrp	x1, 0 <list_super2>
     9f4:	add	x1, x1, #0x0
     9f8:	ldr	x2, [sp, #152]
     9fc:	bl	0 <fprintf>
     a00:	ldur	x8, [x29, #-8]
     a04:	ldr	w9, [x8, #224]
     a08:	cbz	w9, a24 <list_super2+0xa24>
     a0c:	ldur	x0, [x29, #-16]
     a10:	ldur	x8, [x29, #-8]
     a14:	ldr	w2, [x8, #224]
     a18:	adrp	x1, 0 <list_super2>
     a1c:	add	x1, x1, #0x0
     a20:	bl	0 <fprintf>
     a24:	ldur	x8, [x29, #-8]
     a28:	ldr	w9, [x8, #228]
     a2c:	cbz	w9, a48 <list_super2+0xa48>
     a30:	ldur	x0, [x29, #-16]
     a34:	ldur	x8, [x29, #-8]
     a38:	ldr	w2, [x8, #228]
     a3c:	adrp	x1, 0 <list_super2>
     a40:	add	x1, x1, #0x0
     a44:	bl	0 <fprintf>
     a48:	ldur	x8, [x29, #-8]
     a4c:	ldr	w9, [x8, #232]
     a50:	cbz	w9, a6c <list_super2+0xa6c>
     a54:	ldur	x0, [x29, #-16]
     a58:	ldur	x8, [x29, #-8]
     a5c:	ldr	w2, [x8, #232]
     a60:	adrp	x1, 0 <list_super2>
     a64:	add	x1, x1, #0x0
     a68:	bl	0 <fprintf>
     a6c:	ldur	x0, [x29, #-8]
     a70:	bl	186c <ext2fs_has_feature_dir_index>
     a74:	cbnz	w0, a84 <list_super2+0xa84>
     a78:	ldur	x8, [x29, #-8]
     a7c:	ldrb	w9, [x8, #252]
     a80:	cbz	w9, ab8 <list_super2+0xab8>
     a84:	ldur	x0, [x29, #-16]
     a88:	ldur	x8, [x29, #-8]
     a8c:	ldrb	w9, [x8, #252]
     a90:	str	x0, [sp, #144]
     a94:	mov	w0, w9
     a98:	bl	0 <e2p_hash2string>
     a9c:	ldr	x8, [sp, #144]
     aa0:	str	x0, [sp, #136]
     aa4:	mov	x0, x8
     aa8:	adrp	x1, 0 <list_super2>
     aac:	add	x1, x1, #0x0
     ab0:	ldr	x2, [sp, #136]
     ab4:	bl	0 <fprintf>
     ab8:	ldur	x8, [x29, #-8]
     abc:	add	x0, x8, #0xec
     ac0:	bl	0 <e2p_is_null_uuid>
     ac4:	cbnz	w0, afc <list_super2+0xafc>
     ac8:	ldur	x0, [x29, #-16]
     acc:	ldur	x8, [x29, #-8]
     ad0:	add	x8, x8, #0xec
     ad4:	str	x0, [sp, #128]
     ad8:	mov	x0, x8
     adc:	bl	0 <e2p_uuid2str>
     ae0:	ldr	x8, [sp, #128]
     ae4:	str	x0, [sp, #120]
     ae8:	mov	x0, x8
     aec:	adrp	x1, 0 <list_super2>
     af0:	add	x1, x1, #0x0
     af4:	ldr	x2, [sp, #120]
     af8:	bl	0 <fprintf>
     afc:	ldur	x8, [x29, #-8]
     b00:	ldrb	w9, [x8, #253]
     b04:	cbz	w9, b60 <list_super2+0xb60>
     b08:	ldur	x0, [x29, #-16]
     b0c:	adrp	x1, 0 <list_super2>
     b10:	add	x1, x1, #0x0
     b14:	bl	0 <fprintf>
     b18:	ldur	x8, [x29, #-8]
     b1c:	ldrb	w9, [x8, #253]
     b20:	cmp	w9, #0x1
     b24:	cset	w9, eq  // eq = none
     b28:	eor	w9, w9, #0x1
     b2c:	tbnz	w9, #0, b48 <list_super2+0xb48>
     b30:	b	b34 <list_super2+0xb34>
     b34:	ldur	x0, [x29, #-16]
     b38:	adrp	x1, 0 <list_super2>
     b3c:	add	x1, x1, #0x0
     b40:	bl	0 <fprintf>
     b44:	b	b60 <list_super2+0xb60>
     b48:	ldur	x0, [x29, #-16]
     b4c:	ldur	x8, [x29, #-8]
     b50:	ldrb	w2, [x8, #253]
     b54:	adrp	x1, 0 <list_super2>
     b58:	add	x1, x1, #0x0
     b5c:	bl	0 <fprintf>
     b60:	ldur	x8, [x29, #-8]
     b64:	ldr	w9, [x8, #588]
     b68:	cbnz	w9, b78 <list_super2+0xb78>
     b6c:	ldur	x8, [x29, #-8]
     b70:	ldr	w9, [x8, #592]
     b74:	cbz	w9, bdc <list_super2+0xbdc>
     b78:	ldur	x0, [x29, #-16]
     b7c:	adrp	x1, 0 <list_super2>
     b80:	add	x1, x1, #0x0
     b84:	bl	0 <fprintf>
     b88:	ldur	x8, [x29, #-8]
     b8c:	ldr	w9, [x8, #588]
     b90:	cbz	w9, bac <list_super2+0xbac>
     b94:	ldur	x0, [x29, #-16]
     b98:	ldur	x8, [x29, #-8]
     b9c:	ldr	w2, [x8, #588]
     ba0:	adrp	x1, 0 <list_super2>
     ba4:	add	x1, x1, #0x0
     ba8:	bl	0 <fprintf>
     bac:	ldur	x8, [x29, #-8]
     bb0:	ldr	w9, [x8, #592]
     bb4:	cbz	w9, bd0 <list_super2+0xbd0>
     bb8:	ldur	x0, [x29, #-16]
     bbc:	ldur	x8, [x29, #-8]
     bc0:	ldr	w2, [x8, #592]
     bc4:	adrp	x1, 0 <list_super2>
     bc8:	add	x1, x1, #0x0
     bcc:	bl	0 <fprintf>
     bd0:	ldur	x1, [x29, #-16]
     bd4:	mov	w0, #0xa                   	// #10
     bd8:	bl	0 <fputc>
     bdc:	ldur	x8, [x29, #-8]
     be0:	ldr	w9, [x8, #384]
     be4:	cbz	w9, c38 <list_super2+0xc38>
     be8:	ldur	x0, [x29, #-16]
     bec:	ldur	x8, [x29, #-8]
     bf0:	ldr	w2, [x8, #384]
     bf4:	adrp	x1, 0 <list_super2>
     bf8:	add	x1, x1, #0x0
     bfc:	bl	0 <fprintf>
     c00:	ldur	x8, [x29, #-16]
     c04:	ldur	x9, [x29, #-8]
     c08:	ldr	w2, [x9, #388]
     c0c:	mov	x0, x8
     c10:	adrp	x1, 0 <list_super2>
     c14:	add	x1, x1, #0x0
     c18:	bl	0 <fprintf>
     c1c:	ldur	x8, [x29, #-16]
     c20:	ldur	x9, [x29, #-8]
     c24:	ldr	x2, [x9, #392]
     c28:	mov	x0, x8
     c2c:	adrp	x1, 0 <list_super2>
     c30:	add	x1, x1, #0x0
     c34:	bl	0 <fprintf>
     c38:	ldur	x8, [x29, #-8]
     c3c:	ldr	w9, [x8, #400]
     c40:	cbz	w9, c5c <list_super2+0xc5c>
     c44:	ldur	x0, [x29, #-16]
     c48:	ldur	x8, [x29, #-8]
     c4c:	ldr	w2, [x8, #400]
     c50:	adrp	x1, 0 <list_super2>
     c54:	add	x1, x1, #0x0
     c58:	bl	0 <fprintf>
     c5c:	ldur	x8, [x29, #-8]
     c60:	ldr	w9, [x8, #404]
     c64:	cbz	w9, c80 <list_super2+0xc80>
     c68:	ldur	x0, [x29, #-16]
     c6c:	ldur	x8, [x29, #-8]
     c70:	ldr	w2, [x8, #404]
     c74:	adrp	x1, 0 <list_super2>
     c78:	add	x1, x1, #0x0
     c7c:	bl	0 <fprintf>
     c80:	ldur	x8, [x29, #-8]
     c84:	ldr	w9, [x8, #408]
     c88:	cbz	w9, d64 <list_super2+0xd64>
     c8c:	ldur	x8, [x29, #-8]
     c90:	ldr	w9, [x8, #408]
     c94:	mov	w8, w9
     c98:	sub	x0, x29, #0x78
     c9c:	stur	x8, [x29, #-120]
     ca0:	ldur	x8, [x29, #-16]
     ca4:	str	x8, [sp, #112]
     ca8:	bl	0 <ctime>
     cac:	ldr	x8, [sp, #112]
     cb0:	str	x0, [sp, #104]
     cb4:	mov	x0, x8
     cb8:	adrp	x1, 0 <list_super2>
     cbc:	add	x1, x1, #0x0
     cc0:	ldr	x2, [sp, #104]
     cc4:	bl	0 <fprintf>
     cc8:	sub	x8, x29, #0x64
     ccc:	mov	x0, x8
     cd0:	mov	w9, wzr
     cd4:	mov	w1, w9
     cd8:	mov	x2, #0x50                  	// #80
     cdc:	str	x8, [sp, #96]
     ce0:	bl	0 <memset>
     ce4:	ldur	x8, [x29, #-8]
     ce8:	add	x1, x8, #0x1a8
     cec:	ldr	x0, [sp, #96]
     cf0:	mov	x2, #0x20                  	// #32
     cf4:	bl	0 <strncpy>
     cf8:	ldur	x8, [x29, #-16]
     cfc:	mov	x0, x8
     d00:	adrp	x1, 0 <list_super2>
     d04:	add	x1, x1, #0x0
     d08:	ldr	x2, [sp, #96]
     d0c:	bl	0 <fprintf>
     d10:	ldur	x8, [x29, #-16]
     d14:	ldur	x10, [x29, #-8]
     d18:	ldr	w2, [x10, #456]
     d1c:	mov	x0, x8
     d20:	adrp	x1, 0 <list_super2>
     d24:	add	x1, x1, #0x0
     d28:	bl	0 <fprintf>
     d2c:	ldur	x8, [x29, #-16]
     d30:	ldur	x10, [x29, #-8]
     d34:	ldr	w2, [x10, #412]
     d38:	mov	x0, x8
     d3c:	adrp	x1, 0 <list_super2>
     d40:	add	x1, x1, #0x0
     d44:	bl	0 <fprintf>
     d48:	ldur	x8, [x29, #-16]
     d4c:	ldur	x10, [x29, #-8]
     d50:	ldr	x2, [x10, #416]
     d54:	mov	x0, x8
     d58:	adrp	x1, 0 <list_super2>
     d5c:	add	x1, x1, #0x0
     d60:	bl	0 <fprintf>
     d64:	ldur	x8, [x29, #-8]
     d68:	ldr	w9, [x8, #460]
     d6c:	cbz	w9, e48 <list_super2+0xe48>
     d70:	ldur	x8, [x29, #-8]
     d74:	ldr	w9, [x8, #460]
     d78:	mov	w8, w9
     d7c:	sub	x0, x29, #0x78
     d80:	stur	x8, [x29, #-120]
     d84:	ldur	x8, [x29, #-16]
     d88:	str	x8, [sp, #88]
     d8c:	bl	0 <ctime>
     d90:	ldr	x8, [sp, #88]
     d94:	str	x0, [sp, #80]
     d98:	mov	x0, x8
     d9c:	adrp	x1, 0 <list_super2>
     da0:	add	x1, x1, #0x0
     da4:	ldr	x2, [sp, #80]
     da8:	bl	0 <fprintf>
     dac:	sub	x8, x29, #0x64
     db0:	mov	x0, x8
     db4:	mov	w9, wzr
     db8:	mov	w1, w9
     dbc:	mov	x2, #0x50                  	// #80
     dc0:	str	x8, [sp, #72]
     dc4:	bl	0 <memset>
     dc8:	ldur	x8, [x29, #-8]
     dcc:	add	x1, x8, #0x1e0
     dd0:	ldr	x0, [sp, #72]
     dd4:	mov	x2, #0x20                  	// #32
     dd8:	bl	0 <strncpy>
     ddc:	ldur	x8, [x29, #-16]
     de0:	mov	x0, x8
     de4:	adrp	x1, 0 <list_super2>
     de8:	add	x1, x1, #0x0
     dec:	ldr	x2, [sp, #72]
     df0:	bl	0 <fprintf>
     df4:	ldur	x8, [x29, #-16]
     df8:	ldur	x10, [x29, #-8]
     dfc:	ldr	w2, [x10, #468]
     e00:	mov	x0, x8
     e04:	adrp	x1, 0 <list_super2>
     e08:	add	x1, x1, #0x0
     e0c:	bl	0 <fprintf>
     e10:	ldur	x8, [x29, #-16]
     e14:	ldur	x10, [x29, #-8]
     e18:	ldr	w2, [x10, #464]
     e1c:	mov	x0, x8
     e20:	adrp	x1, 0 <list_super2>
     e24:	add	x1, x1, #0x0
     e28:	bl	0 <fprintf>
     e2c:	ldur	x8, [x29, #-16]
     e30:	ldur	x10, [x29, #-8]
     e34:	ldr	x2, [x10, #472]
     e38:	mov	x0, x8
     e3c:	adrp	x1, 0 <list_super2>
     e40:	add	x1, x1, #0x0
     e44:	bl	0 <fprintf>
     e48:	ldur	x0, [x29, #-8]
     e4c:	bl	1890 <ext2fs_has_feature_mmp>
     e50:	cbz	w0, e88 <list_super2+0xe88>
     e54:	ldur	x0, [x29, #-16]
     e58:	ldur	x8, [x29, #-8]
     e5c:	ldr	x2, [x8, #360]
     e60:	adrp	x1, 0 <list_super2>
     e64:	add	x1, x1, #0x0
     e68:	bl	0 <fprintf>
     e6c:	ldur	x8, [x29, #-16]
     e70:	ldur	x9, [x29, #-8]
     e74:	ldrh	w2, [x9, #358]
     e78:	mov	x0, x8
     e7c:	adrp	x1, 0 <list_super2>
     e80:	add	x1, x1, #0x0
     e84:	bl	0 <fprintf>
     e88:	stur	wzr, [x29, #-124]
     e8c:	ldur	w8, [x29, #-124]
     e90:	cmp	w8, #0x3
     e94:	b.cs	efc <list_super2+0xefc>  // b.hs, b.nlast
     e98:	ldur	x0, [x29, #-8]
     e9c:	ldur	w1, [x29, #-124]
     ea0:	bl	18b4 <quota_sb_inump>
     ea4:	ldr	w8, [x0]
     ea8:	cbz	w8, eec <list_super2+0xeec>
     eac:	ldur	x0, [x29, #-16]
     eb0:	ldur	w8, [x29, #-124]
     eb4:	str	x0, [sp, #64]
     eb8:	mov	w0, w8
     ebc:	bl	1934 <quota_type2prefix>
     ec0:	ldur	x9, [x29, #-8]
     ec4:	ldur	w1, [x29, #-124]
     ec8:	str	x0, [sp, #56]
     ecc:	mov	x0, x9
     ed0:	bl	18b4 <quota_sb_inump>
     ed4:	ldr	w3, [x0]
     ed8:	ldr	x0, [sp, #64]
     edc:	adrp	x1, 0 <list_super2>
     ee0:	add	x1, x1, #0x0
     ee4:	ldr	x2, [sp, #56]
     ee8:	bl	0 <fprintf>
     eec:	ldur	w8, [x29, #-124]
     ef0:	add	w8, w8, #0x1
     ef4:	stur	w8, [x29, #-124]
     ef8:	b	e8c <list_super2+0xe8c>
     efc:	ldur	x0, [x29, #-8]
     f00:	bl	1964 <ext2fs_has_feature_metadata_csum>
     f04:	cbz	w0, f58 <list_super2+0xf58>
     f08:	ldur	x0, [x29, #-16]
     f0c:	ldur	x8, [x29, #-8]
     f10:	ldrb	w9, [x8, #373]
     f14:	str	x0, [sp, #48]
     f18:	mov	w0, w9
     f1c:	bl	1988 <checksum_type>
     f20:	ldr	x8, [sp, #48]
     f24:	str	x0, [sp, #40]
     f28:	mov	x0, x8
     f2c:	adrp	x1, 0 <list_super2>
     f30:	add	x1, x1, #0x0
     f34:	ldr	x2, [sp, #40]
     f38:	bl	0 <fprintf>
     f3c:	ldur	x8, [x29, #-16]
     f40:	ldur	x10, [x29, #-8]
     f44:	ldr	w2, [x10, #1020]
     f48:	mov	x0, x8
     f4c:	adrp	x1, 0 <list_super2>
     f50:	add	x1, x1, #0x0
     f54:	bl	0 <fprintf>
     f58:	ldur	x8, [x29, #-8]
     f5c:	add	x0, x8, #0x258
     f60:	bl	0 <e2p_is_null_uuid>
     f64:	cbnz	w0, f9c <list_super2+0xf9c>
     f68:	ldur	x0, [x29, #-16]
     f6c:	ldur	x8, [x29, #-8]
     f70:	add	x8, x8, #0x258
     f74:	str	x0, [sp, #32]
     f78:	mov	x0, x8
     f7c:	bl	0 <e2p_uuid2str>
     f80:	ldr	x8, [sp, #32]
     f84:	str	x0, [sp, #24]
     f88:	mov	x0, x8
     f8c:	adrp	x1, 0 <list_super2>
     f90:	add	x1, x1, #0x0
     f94:	ldr	x2, [sp, #24]
     f98:	bl	0 <fprintf>
     f9c:	ldur	x0, [x29, #-8]
     fa0:	bl	19d4 <ext2fs_has_feature_csum_seed>
     fa4:	cbz	w0, fc0 <list_super2+0xfc0>
     fa8:	ldur	x0, [x29, #-16]
     fac:	ldur	x8, [x29, #-8]
     fb0:	ldr	w2, [x8, #624]
     fb4:	adrp	x1, 0 <list_super2>
     fb8:	add	x1, x1, #0x0
     fbc:	bl	0 <fprintf>
     fc0:	ldur	x0, [x29, #-8]
     fc4:	bl	19f8 <ext2fs_has_feature_casefold>
     fc8:	cbz	w0, 1000 <list_super2+0x1000>
     fcc:	ldur	x0, [x29, #-16]
     fd0:	ldur	x8, [x29, #-8]
     fd4:	ldrh	w9, [x8, #636]
     fd8:	str	x0, [sp, #16]
     fdc:	mov	w0, w9
     fe0:	bl	0 <e2p_encoding2str>
     fe4:	ldr	x8, [sp, #16]
     fe8:	str	x0, [sp, #8]
     fec:	mov	x0, x8
     ff0:	adrp	x1, 0 <list_super2>
     ff4:	add	x1, x1, #0x0
     ff8:	ldr	x2, [sp, #8]
     ffc:	bl	0 <fprintf>
    1000:	add	sp, sp, #0x200
    1004:	ldr	x28, [sp, #16]
    1008:	ldp	x29, x30, [sp], #32
    100c:	ret

0000000000001010 <print_features>:
    1010:	sub	sp, sp, #0x50
    1014:	stp	x29, x30, [sp, #64]
    1018:	add	x29, sp, #0x40
    101c:	adrp	x8, 0 <list_super2>
    1020:	add	x8, x8, #0x0
    1024:	stur	x0, [x29, #-8]
    1028:	stur	x1, [x29, #-16]
    102c:	stur	wzr, [x29, #-28]
    1030:	ldur	x9, [x29, #-8]
    1034:	add	x9, x9, #0x5c
    1038:	str	x9, [sp, #24]
    103c:	ldur	x0, [x29, #-16]
    1040:	mov	x1, x8
    1044:	bl	0 <fprintf>
    1048:	stur	wzr, [x29, #-20]
    104c:	ldur	w8, [x29, #-20]
    1050:	cmp	w8, #0x3
    1054:	b.ge	10fc <print_features+0xec>  // b.tcont
    1058:	stur	wzr, [x29, #-24]
    105c:	mov	w8, #0x1                   	// #1
    1060:	str	w8, [sp, #20]
    1064:	ldur	w8, [x29, #-24]
    1068:	cmp	w8, #0x20
    106c:	b.ge	10e0 <print_features+0xd0>  // b.tcont
    1070:	ldr	x8, [sp, #24]
    1074:	ldr	w9, [x8]
    1078:	ldr	w10, [sp, #20]
    107c:	and	w9, w9, w10
    1080:	cbz	w9, 10c4 <print_features+0xb4>
    1084:	ldur	x0, [x29, #-16]
    1088:	ldur	w8, [x29, #-20]
    108c:	ldr	w1, [sp, #20]
    1090:	str	x0, [sp, #8]
    1094:	mov	w0, w8
    1098:	bl	0 <e2p_feature2string>
    109c:	ldr	x9, [sp, #8]
    10a0:	str	x0, [sp]
    10a4:	mov	x0, x9
    10a8:	adrp	x1, 0 <list_super2>
    10ac:	add	x1, x1, #0x0
    10b0:	ldr	x2, [sp]
    10b4:	bl	0 <fprintf>
    10b8:	ldur	w8, [x29, #-28]
    10bc:	add	w8, w8, #0x1
    10c0:	stur	w8, [x29, #-28]
    10c4:	ldur	w8, [x29, #-24]
    10c8:	add	w8, w8, #0x1
    10cc:	stur	w8, [x29, #-24]
    10d0:	ldr	w8, [sp, #20]
    10d4:	lsl	w8, w8, #1
    10d8:	str	w8, [sp, #20]
    10dc:	b	1064 <print_features+0x54>
    10e0:	ldur	w8, [x29, #-20]
    10e4:	add	w8, w8, #0x1
    10e8:	stur	w8, [x29, #-20]
    10ec:	ldr	x9, [sp, #24]
    10f0:	add	x9, x9, #0x4
    10f4:	str	x9, [sp, #24]
    10f8:	b	104c <print_features+0x3c>
    10fc:	ldur	w8, [x29, #-28]
    1100:	cbnz	w8, 1114 <print_features+0x104>
    1104:	ldur	x0, [x29, #-16]
    1108:	adrp	x1, 0 <list_super2>
    110c:	add	x1, x1, #0x0
    1110:	bl	0 <fprintf>
    1114:	ldur	x0, [x29, #-16]
    1118:	adrp	x1, 0 <list_super2>
    111c:	add	x1, x1, #0x0
    1120:	bl	0 <fprintf>
    1124:	ldp	x29, x30, [sp, #64]
    1128:	add	sp, sp, #0x50
    112c:	ret

0000000000001130 <print_super_flags>:
    1130:	sub	sp, sp, #0x30
    1134:	stp	x29, x30, [sp, #32]
    1138:	add	x29, sp, #0x20
    113c:	stur	x0, [x29, #-8]
    1140:	str	x1, [sp, #16]
    1144:	str	wzr, [sp, #12]
    1148:	ldur	x8, [x29, #-8]
    114c:	ldr	w9, [x8, #352]
    1150:	cbnz	w9, 1158 <print_super_flags+0x28>
    1154:	b	1218 <print_super_flags+0xe8>
    1158:	ldr	x1, [sp, #16]
    115c:	adrp	x0, 0 <list_super2>
    1160:	add	x0, x0, #0x0
    1164:	bl	0 <fputs>
    1168:	ldur	x8, [x29, #-8]
    116c:	ldr	w9, [x8, #352]
    1170:	and	w9, w9, #0x1
    1174:	cbz	w9, 1194 <print_super_flags+0x64>
    1178:	ldr	x1, [sp, #16]
    117c:	adrp	x0, 0 <list_super2>
    1180:	add	x0, x0, #0x0
    1184:	bl	0 <fputs>
    1188:	ldr	w8, [sp, #12]
    118c:	add	w8, w8, #0x1
    1190:	str	w8, [sp, #12]
    1194:	ldur	x8, [x29, #-8]
    1198:	ldr	w9, [x8, #352]
    119c:	and	w9, w9, #0x2
    11a0:	cbz	w9, 11c0 <print_super_flags+0x90>
    11a4:	ldr	x1, [sp, #16]
    11a8:	adrp	x0, 0 <list_super2>
    11ac:	add	x0, x0, #0x0
    11b0:	bl	0 <fputs>
    11b4:	ldr	w8, [sp, #12]
    11b8:	add	w8, w8, #0x1
    11bc:	str	w8, [sp, #12]
    11c0:	ldur	x8, [x29, #-8]
    11c4:	ldr	w9, [x8, #352]
    11c8:	and	w9, w9, #0x4
    11cc:	cbz	w9, 11ec <print_super_flags+0xbc>
    11d0:	ldr	x1, [sp, #16]
    11d4:	adrp	x0, 0 <list_super2>
    11d8:	add	x0, x0, #0x0
    11dc:	bl	0 <fputs>
    11e0:	ldr	w8, [sp, #12]
    11e4:	add	w8, w8, #0x1
    11e8:	str	w8, [sp, #12]
    11ec:	ldr	w8, [sp, #12]
    11f0:	cbz	w8, 1208 <print_super_flags+0xd8>
    11f4:	ldr	x1, [sp, #16]
    11f8:	adrp	x0, 0 <list_super2>
    11fc:	add	x0, x0, #0x0
    1200:	bl	0 <fputs>
    1204:	b	1218 <print_super_flags+0xe8>
    1208:	ldr	x1, [sp, #16]
    120c:	adrp	x0, 0 <list_super2>
    1210:	add	x0, x0, #0x0
    1214:	bl	0 <fputs>
    1218:	ldp	x29, x30, [sp, #32]
    121c:	add	sp, sp, #0x30
    1220:	ret

0000000000001224 <print_mntopts>:
    1224:	sub	sp, sp, #0x50
    1228:	stp	x29, x30, [sp, #64]
    122c:	add	x29, sp, #0x40
    1230:	adrp	x8, 0 <list_super2>
    1234:	add	x8, x8, #0x0
    1238:	stur	x0, [x29, #-8]
    123c:	stur	x1, [x29, #-16]
    1240:	stur	wzr, [x29, #-24]
    1244:	ldur	x9, [x29, #-8]
    1248:	ldr	w10, [x9, #256]
    124c:	stur	w10, [x29, #-28]
    1250:	ldur	x0, [x29, #-16]
    1254:	mov	x1, x8
    1258:	bl	0 <fprintf>
    125c:	ldur	w10, [x29, #-28]
    1260:	and	w10, w10, #0x60
    1264:	cbz	w10, 12a8 <print_mntopts+0x84>
    1268:	ldur	x0, [x29, #-16]
    126c:	ldur	w8, [x29, #-28]
    1270:	and	w8, w8, #0x60
    1274:	str	x0, [sp, #24]
    1278:	mov	w0, w8
    127c:	bl	0 <e2p_mntopt2string>
    1280:	ldr	x9, [sp, #24]
    1284:	str	x0, [sp, #16]
    1288:	mov	x0, x9
    128c:	adrp	x1, 0 <list_super2>
    1290:	add	x1, x1, #0x0
    1294:	ldr	x2, [sp, #16]
    1298:	bl	0 <fprintf>
    129c:	ldur	w8, [x29, #-24]
    12a0:	add	w8, w8, #0x1
    12a4:	stur	w8, [x29, #-24]
    12a8:	stur	wzr, [x29, #-20]
    12ac:	mov	w8, #0x1                   	// #1
    12b0:	str	w8, [sp, #32]
    12b4:	ldur	w8, [x29, #-20]
    12b8:	cmp	w8, #0x20
    12bc:	b.ge	1338 <print_mntopts+0x114>  // b.tcont
    12c0:	ldr	w8, [sp, #32]
    12c4:	and	w8, w8, #0x60
    12c8:	cbz	w8, 12d0 <print_mntopts+0xac>
    12cc:	b	131c <print_mntopts+0xf8>
    12d0:	ldur	w8, [x29, #-28]
    12d4:	ldr	w9, [sp, #32]
    12d8:	and	w8, w8, w9
    12dc:	cbz	w8, 131c <print_mntopts+0xf8>
    12e0:	ldur	x0, [x29, #-16]
    12e4:	ldr	w8, [sp, #32]
    12e8:	str	x0, [sp, #8]
    12ec:	mov	w0, w8
    12f0:	bl	0 <e2p_mntopt2string>
    12f4:	ldr	x9, [sp, #8]
    12f8:	str	x0, [sp]
    12fc:	mov	x0, x9
    1300:	adrp	x1, 0 <list_super2>
    1304:	add	x1, x1, #0x0
    1308:	ldr	x2, [sp]
    130c:	bl	0 <fprintf>
    1310:	ldur	w8, [x29, #-24]
    1314:	add	w8, w8, #0x1
    1318:	stur	w8, [x29, #-24]
    131c:	ldur	w8, [x29, #-20]
    1320:	add	w8, w8, #0x1
    1324:	stur	w8, [x29, #-20]
    1328:	ldr	w8, [sp, #32]
    132c:	lsl	w8, w8, #1
    1330:	str	w8, [sp, #32]
    1334:	b	12b4 <print_mntopts+0x90>
    1338:	ldur	w8, [x29, #-24]
    133c:	cbnz	w8, 1350 <print_mntopts+0x12c>
    1340:	ldur	x0, [x29, #-16]
    1344:	adrp	x1, 0 <list_super2>
    1348:	add	x1, x1, #0x0
    134c:	bl	0 <fprintf>
    1350:	ldur	x0, [x29, #-16]
    1354:	adrp	x1, 0 <list_super2>
    1358:	add	x1, x1, #0x0
    135c:	bl	0 <fprintf>
    1360:	ldp	x29, x30, [sp, #64]
    1364:	add	sp, sp, #0x50
    1368:	ret

000000000000136c <e2p_blocks_count>:
    136c:	sub	sp, sp, #0x30
    1370:	stp	x29, x30, [sp, #32]
    1374:	add	x29, sp, #0x20
    1378:	stur	x0, [x29, #-8]
    137c:	ldur	x8, [x29, #-8]
    1380:	ldr	w9, [x8, #4]
    1384:	mov	w8, w9
    1388:	ldur	x0, [x29, #-8]
    138c:	str	x8, [sp, #16]
    1390:	bl	14bc <ext2fs_has_feature_64bit>
    1394:	cbz	w0, 13b0 <e2p_blocks_count+0x44>
    1398:	ldur	x8, [x29, #-8]
    139c:	ldr	w9, [x8, #336]
    13a0:	mov	w8, w9
    13a4:	lsl	x8, x8, #32
    13a8:	str	x8, [sp, #8]
    13ac:	b	13b8 <e2p_blocks_count+0x4c>
    13b0:	mov	x8, xzr
    13b4:	str	x8, [sp, #8]
    13b8:	ldr	x8, [sp, #8]
    13bc:	ldr	x9, [sp, #16]
    13c0:	orr	x0, x9, x8
    13c4:	ldp	x29, x30, [sp, #32]
    13c8:	add	sp, sp, #0x30
    13cc:	ret

00000000000013d0 <e2p_r_blocks_count>:
    13d0:	sub	sp, sp, #0x30
    13d4:	stp	x29, x30, [sp, #32]
    13d8:	add	x29, sp, #0x20
    13dc:	stur	x0, [x29, #-8]
    13e0:	ldur	x8, [x29, #-8]
    13e4:	ldr	w9, [x8, #8]
    13e8:	mov	w8, w9
    13ec:	ldur	x0, [x29, #-8]
    13f0:	str	x8, [sp, #16]
    13f4:	bl	14bc <ext2fs_has_feature_64bit>
    13f8:	cbz	w0, 1414 <e2p_r_blocks_count+0x44>
    13fc:	ldur	x8, [x29, #-8]
    1400:	ldr	w9, [x8, #340]
    1404:	mov	w8, w9
    1408:	lsl	x8, x8, #32
    140c:	str	x8, [sp, #8]
    1410:	b	141c <e2p_r_blocks_count+0x4c>
    1414:	mov	x8, xzr
    1418:	str	x8, [sp, #8]
    141c:	ldr	x8, [sp, #8]
    1420:	ldr	x9, [sp, #16]
    1424:	orr	x0, x9, x8
    1428:	ldp	x29, x30, [sp, #32]
    142c:	add	sp, sp, #0x30
    1430:	ret

0000000000001434 <e2p_free_blocks_count>:
    1434:	sub	sp, sp, #0x30
    1438:	stp	x29, x30, [sp, #32]
    143c:	add	x29, sp, #0x20
    1440:	stur	x0, [x29, #-8]
    1444:	ldur	x8, [x29, #-8]
    1448:	ldr	w9, [x8, #12]
    144c:	mov	w8, w9
    1450:	ldur	x0, [x29, #-8]
    1454:	str	x8, [sp, #16]
    1458:	bl	14bc <ext2fs_has_feature_64bit>
    145c:	cbz	w0, 1478 <e2p_free_blocks_count+0x44>
    1460:	ldur	x8, [x29, #-8]
    1464:	ldr	w9, [x8, #344]
    1468:	mov	w8, w9
    146c:	lsl	x8, x8, #32
    1470:	str	x8, [sp, #8]
    1474:	b	1480 <e2p_free_blocks_count+0x4c>
    1478:	mov	x8, xzr
    147c:	str	x8, [sp, #8]
    1480:	ldr	x8, [sp, #8]
    1484:	ldr	x9, [sp, #16]
    1488:	orr	x0, x9, x8
    148c:	ldp	x29, x30, [sp, #32]
    1490:	add	sp, sp, #0x30
    1494:	ret

0000000000001498 <ext2fs_has_feature_bigalloc>:
    1498:	sub	sp, sp, #0x10
    149c:	str	x0, [sp, #8]
    14a0:	ldr	x8, [sp, #8]
    14a4:	ldr	w9, [x8, #100]
    14a8:	tst	w9, #0x200
    14ac:	cset	w9, ne  // ne = any
    14b0:	and	w0, w9, #0x1
    14b4:	add	sp, sp, #0x10
    14b8:	ret

00000000000014bc <ext2fs_has_feature_64bit>:
    14bc:	sub	sp, sp, #0x10
    14c0:	str	x0, [sp, #8]
    14c4:	ldr	x8, [sp, #8]
    14c8:	ldr	w9, [x8, #96]
    14cc:	tst	w9, #0x80
    14d0:	cset	w9, ne  // ne = any
    14d4:	and	w0, w9, #0x1
    14d8:	add	sp, sp, #0x10
    14dc:	ret

00000000000014e0 <interval_string>:
    14e0:	sub	sp, sp, #0x50
    14e4:	stp	x29, x30, [sp, #64]
    14e8:	add	x29, sp, #0x40
    14ec:	mov	w8, #0x0                   	// #0
    14f0:	adrp	x9, 0 <list_super2>
    14f4:	add	x9, x9, #0x0
    14f8:	adrp	x10, 0 <list_super2>
    14fc:	add	x10, x10, #0x0
    1500:	adrp	x11, 0 <list_super2>
    1504:	add	x11, x11, #0x0
    1508:	adrp	x12, 0 <list_super2>
    150c:	add	x12, x12, #0x0
    1510:	adrp	x13, 0 <list_super2>
    1514:	add	x13, x13, #0x0
    1518:	stur	w0, [x29, #-12]
    151c:	strb	w8, [x9]
    1520:	ldur	w8, [x29, #-12]
    1524:	str	x9, [sp, #32]
    1528:	str	x10, [sp, #24]
    152c:	str	x11, [sp, #16]
    1530:	str	x12, [sp, #8]
    1534:	str	x13, [sp]
    1538:	cbnz	w8, 154c <interval_string+0x6c>
    153c:	adrp	x8, 0 <list_super2>
    1540:	add	x8, x8, #0x0
    1544:	stur	x8, [x29, #-8]
    1548:	b	1764 <interval_string+0x284>
    154c:	ldur	w8, [x29, #-12]
    1550:	mov	w9, #0x8d00                	// #36096
    1554:	movk	w9, #0x27, lsl #16
    1558:	cmp	w8, w9
    155c:	b.cc	15b0 <interval_string+0xd0>  // b.lo, b.ul, b.last
    1560:	ldur	w8, [x29, #-12]
    1564:	mov	w9, #0x8d00                	// #36096
    1568:	movk	w9, #0x27, lsl #16
    156c:	udiv	w8, w8, w9
    1570:	stur	w8, [x29, #-24]
    1574:	ldur	w8, [x29, #-24]
    1578:	mul	w8, w8, w9
    157c:	ldur	w9, [x29, #-12]
    1580:	subs	w8, w9, w8
    1584:	stur	w8, [x29, #-12]
    1588:	ldur	w2, [x29, #-24]
    158c:	ldur	w8, [x29, #-24]
    1590:	cmp	w8, #0x1
    1594:	ldr	x10, [sp, #24]
    1598:	ldr	x11, [sp, #16]
    159c:	csel	x3, x10, x11, gt
    15a0:	ldr	x0, [sp, #32]
    15a4:	adrp	x1, 0 <list_super2>
    15a8:	add	x1, x1, #0x0
    15ac:	bl	0 <sprintf>
    15b0:	ldur	w8, [x29, #-12]
    15b4:	mov	w9, #0x3a80                	// #14976
    15b8:	movk	w9, #0x9, lsl #16
    15bc:	cmp	w8, w9
    15c0:	b.cc	1638 <interval_string+0x158>  // b.lo, b.ul, b.last
    15c4:	ldur	w8, [x29, #-12]
    15c8:	mov	w9, #0x3a80                	// #14976
    15cc:	movk	w9, #0x9, lsl #16
    15d0:	udiv	w8, w8, w9
    15d4:	stur	w8, [x29, #-24]
    15d8:	ldur	w8, [x29, #-24]
    15dc:	mul	w8, w8, w9
    15e0:	ldur	w9, [x29, #-12]
    15e4:	subs	w8, w9, w8
    15e8:	stur	w8, [x29, #-12]
    15ec:	ldr	x10, [sp, #32]
    15f0:	ldrb	w8, [x10]
    15f4:	cmp	w8, #0x0
    15f8:	ldr	x11, [sp, #8]
    15fc:	ldr	x12, [sp, #16]
    1600:	csel	x2, x11, x12, ne  // ne = any
    1604:	ldur	w3, [x29, #-24]
    1608:	ldur	w8, [x29, #-24]
    160c:	cmp	w8, #0x1
    1610:	ldr	x13, [sp, #24]
    1614:	csel	x4, x13, x12, gt
    1618:	ldr	x0, [sp]
    161c:	adrp	x1, 0 <list_super2>
    1620:	add	x1, x1, #0x0
    1624:	bl	0 <sprintf>
    1628:	ldr	x10, [sp, #32]
    162c:	mov	x0, x10
    1630:	ldr	x1, [sp]
    1634:	bl	0 <strcat>
    1638:	ldur	w8, [x29, #-12]
    163c:	mov	w9, #0x5180                	// #20864
    1640:	movk	w9, #0x1, lsl #16
    1644:	cmp	w8, w9
    1648:	b.cc	16c0 <interval_string+0x1e0>  // b.lo, b.ul, b.last
    164c:	ldur	w8, [x29, #-12]
    1650:	mov	w9, #0x5180                	// #20864
    1654:	movk	w9, #0x1, lsl #16
    1658:	udiv	w8, w8, w9
    165c:	stur	w8, [x29, #-24]
    1660:	ldur	w8, [x29, #-24]
    1664:	mul	w8, w8, w9
    1668:	ldur	w9, [x29, #-12]
    166c:	subs	w8, w9, w8
    1670:	stur	w8, [x29, #-12]
    1674:	ldr	x10, [sp, #32]
    1678:	ldrb	w8, [x10]
    167c:	cmp	w8, #0x0
    1680:	ldr	x11, [sp, #8]
    1684:	ldr	x12, [sp, #16]
    1688:	csel	x2, x11, x12, ne  // ne = any
    168c:	ldur	w3, [x29, #-24]
    1690:	ldur	w8, [x29, #-24]
    1694:	cmp	w8, #0x1
    1698:	ldr	x13, [sp, #24]
    169c:	csel	x4, x13, x12, gt
    16a0:	ldr	x0, [sp]
    16a4:	adrp	x1, 0 <list_super2>
    16a8:	add	x1, x1, #0x0
    16ac:	bl	0 <sprintf>
    16b0:	ldr	x10, [sp, #32]
    16b4:	mov	x0, x10
    16b8:	ldr	x1, [sp]
    16bc:	bl	0 <strcat>
    16c0:	ldur	w8, [x29, #-12]
    16c4:	cmp	w8, #0x0
    16c8:	cset	w8, ls  // ls = plast
    16cc:	tbnz	w8, #0, 175c <interval_string+0x27c>
    16d0:	ldur	w8, [x29, #-12]
    16d4:	mov	w9, #0xe10                 	// #3600
    16d8:	udiv	w8, w8, w9
    16dc:	stur	w8, [x29, #-16]
    16e0:	ldur	w8, [x29, #-16]
    16e4:	mul	w8, w8, w9
    16e8:	ldur	w9, [x29, #-12]
    16ec:	subs	w8, w9, w8
    16f0:	stur	w8, [x29, #-12]
    16f4:	ldur	w8, [x29, #-12]
    16f8:	mov	w9, #0x3c                  	// #60
    16fc:	udiv	w8, w8, w9
    1700:	stur	w8, [x29, #-20]
    1704:	ldur	w8, [x29, #-20]
    1708:	mul	w8, w8, w9
    170c:	ldur	w9, [x29, #-12]
    1710:	subs	w8, w9, w8
    1714:	stur	w8, [x29, #-12]
    1718:	ldr	x10, [sp, #32]
    171c:	ldrb	w8, [x10]
    1720:	cmp	w8, #0x0
    1724:	ldr	x11, [sp, #8]
    1728:	ldr	x12, [sp, #16]
    172c:	csel	x2, x11, x12, ne  // ne = any
    1730:	ldur	w3, [x29, #-16]
    1734:	ldur	w4, [x29, #-20]
    1738:	ldur	w5, [x29, #-12]
    173c:	ldr	x0, [sp]
    1740:	adrp	x1, 0 <list_super2>
    1744:	add	x1, x1, #0x0
    1748:	bl	0 <sprintf>
    174c:	ldr	x10, [sp, #32]
    1750:	mov	x0, x10
    1754:	ldr	x1, [sp]
    1758:	bl	0 <strcat>
    175c:	ldr	x8, [sp, #32]
    1760:	stur	x8, [x29, #-8]
    1764:	ldur	x0, [x29, #-8]
    1768:	ldp	x29, x30, [sp, #64]
    176c:	add	sp, sp, #0x50
    1770:	ret

0000000000001774 <print_user>:
    1774:	sub	sp, sp, #0x30
    1778:	stp	x29, x30, [sp, #32]
    177c:	add	x29, sp, #0x20
    1780:	adrp	x8, 0 <list_super2>
    1784:	add	x8, x8, #0x0
    1788:	sturh	w0, [x29, #-2]
    178c:	str	x1, [sp, #16]
    1790:	ldr	x0, [sp, #16]
    1794:	ldurh	w2, [x29, #-2]
    1798:	mov	x1, x8
    179c:	bl	0 <fprintf>
    17a0:	ldurh	w9, [x29, #-2]
    17a4:	mov	w0, w9
    17a8:	bl	0 <getpwuid>
    17ac:	str	x0, [sp, #8]
    17b0:	ldr	x8, [sp, #8]
    17b4:	cbnz	x8, 17cc <print_user+0x58>
    17b8:	ldr	x0, [sp, #16]
    17bc:	adrp	x1, 0 <list_super2>
    17c0:	add	x1, x1, #0x0
    17c4:	bl	0 <fprintf>
    17c8:	b	17e4 <print_user+0x70>
    17cc:	ldr	x0, [sp, #16]
    17d0:	ldr	x8, [sp, #8]
    17d4:	ldr	x2, [x8]
    17d8:	adrp	x1, 0 <list_super2>
    17dc:	add	x1, x1, #0x0
    17e0:	bl	0 <fprintf>
    17e4:	ldp	x29, x30, [sp, #32]
    17e8:	add	sp, sp, #0x30
    17ec:	ret

00000000000017f0 <print_group>:
    17f0:	sub	sp, sp, #0x30
    17f4:	stp	x29, x30, [sp, #32]
    17f8:	add	x29, sp, #0x20
    17fc:	adrp	x8, 0 <list_super2>
    1800:	add	x8, x8, #0x0
    1804:	sturh	w0, [x29, #-2]
    1808:	str	x1, [sp, #16]
    180c:	ldr	x0, [sp, #16]
    1810:	ldurh	w2, [x29, #-2]
    1814:	mov	x1, x8
    1818:	bl	0 <fprintf>
    181c:	ldurh	w9, [x29, #-2]
    1820:	mov	w0, w9
    1824:	bl	0 <getgrgid>
    1828:	str	x0, [sp, #8]
    182c:	ldr	x8, [sp, #8]
    1830:	cbnz	x8, 1848 <print_group+0x58>
    1834:	ldr	x0, [sp, #16]
    1838:	adrp	x1, 0 <list_super2>
    183c:	add	x1, x1, #0x0
    1840:	bl	0 <fprintf>
    1844:	b	1860 <print_group+0x70>
    1848:	ldr	x0, [sp, #16]
    184c:	ldr	x8, [sp, #8]
    1850:	ldr	x2, [x8]
    1854:	adrp	x1, 0 <list_super2>
    1858:	add	x1, x1, #0x0
    185c:	bl	0 <fprintf>
    1860:	ldp	x29, x30, [sp, #32]
    1864:	add	sp, sp, #0x30
    1868:	ret

000000000000186c <ext2fs_has_feature_dir_index>:
    186c:	sub	sp, sp, #0x10
    1870:	str	x0, [sp, #8]
    1874:	ldr	x8, [sp, #8]
    1878:	ldr	w9, [x8, #92]
    187c:	tst	w9, #0x20
    1880:	cset	w9, ne  // ne = any
    1884:	and	w0, w9, #0x1
    1888:	add	sp, sp, #0x10
    188c:	ret

0000000000001890 <ext2fs_has_feature_mmp>:
    1890:	sub	sp, sp, #0x10
    1894:	str	x0, [sp, #8]
    1898:	ldr	x8, [sp, #8]
    189c:	ldr	w9, [x8, #96]
    18a0:	tst	w9, #0x100
    18a4:	cset	w9, ne  // ne = any
    18a8:	and	w0, w9, #0x1
    18ac:	add	sp, sp, #0x10
    18b0:	ret

00000000000018b4 <quota_sb_inump>:
    18b4:	sub	sp, sp, #0x20
    18b8:	str	x0, [sp, #16]
    18bc:	str	w1, [sp, #12]
    18c0:	ldr	w8, [sp, #12]
    18c4:	str	w8, [sp, #8]
    18c8:	cbz	w8, 18f0 <quota_sb_inump+0x3c>
    18cc:	b	18d0 <quota_sb_inump+0x1c>
    18d0:	ldr	w8, [sp, #8]
    18d4:	cmp	w8, #0x1
    18d8:	b.eq	1900 <quota_sb_inump+0x4c>  // b.none
    18dc:	b	18e0 <quota_sb_inump+0x2c>
    18e0:	ldr	w8, [sp, #8]
    18e4:	cmp	w8, #0x2
    18e8:	b.eq	1910 <quota_sb_inump+0x5c>  // b.none
    18ec:	b	1920 <quota_sb_inump+0x6c>
    18f0:	ldr	x8, [sp, #16]
    18f4:	add	x8, x8, #0x240
    18f8:	str	x8, [sp, #24]
    18fc:	b	1928 <quota_sb_inump+0x74>
    1900:	ldr	x8, [sp, #16]
    1904:	add	x8, x8, #0x244
    1908:	str	x8, [sp, #24]
    190c:	b	1928 <quota_sb_inump+0x74>
    1910:	ldr	x8, [sp, #16]
    1914:	add	x8, x8, #0x26c
    1918:	str	x8, [sp, #24]
    191c:	b	1928 <quota_sb_inump+0x74>
    1920:	mov	x8, xzr
    1924:	str	x8, [sp, #24]
    1928:	ldr	x0, [sp, #24]
    192c:	add	sp, sp, #0x20
    1930:	ret

0000000000001934 <quota_type2prefix>:
    1934:	sub	sp, sp, #0x10
    1938:	adrp	x8, 0 <list_super2>
    193c:	add	x8, x8, #0x0
    1940:	str	w0, [sp, #12]
    1944:	ldr	w9, [sp, #12]
    1948:	mov	w10, w9
    194c:	mov	x11, #0x8                   	// #8
    1950:	mul	x10, x11, x10
    1954:	add	x8, x8, x10
    1958:	ldr	x0, [x8]
    195c:	add	sp, sp, #0x10
    1960:	ret

0000000000001964 <ext2fs_has_feature_metadata_csum>:
    1964:	sub	sp, sp, #0x10
    1968:	str	x0, [sp, #8]
    196c:	ldr	x8, [sp, #8]
    1970:	ldr	w9, [x8, #100]
    1974:	tst	w9, #0x400
    1978:	cset	w9, ne  // ne = any
    197c:	and	w0, w9, #0x1
    1980:	add	sp, sp, #0x10
    1984:	ret

0000000000001988 <checksum_type>:
    1988:	sub	sp, sp, #0x10
    198c:	mov	w8, #0x1                   	// #1
    1990:	strb	w0, [sp, #7]
    1994:	ldrb	w9, [sp, #7]
    1998:	cmp	w9, #0x1
    199c:	cset	w9, eq  // eq = none
    19a0:	eor	w8, w9, w8
    19a4:	tbnz	w8, #0, 19bc <checksum_type+0x34>
    19a8:	b	19ac <checksum_type+0x24>
    19ac:	adrp	x8, 0 <list_super2>
    19b0:	add	x8, x8, #0x0
    19b4:	str	x8, [sp, #8]
    19b8:	b	19c8 <checksum_type+0x40>
    19bc:	adrp	x8, 0 <list_super2>
    19c0:	add	x8, x8, #0x0
    19c4:	str	x8, [sp, #8]
    19c8:	ldr	x0, [sp, #8]
    19cc:	add	sp, sp, #0x10
    19d0:	ret

00000000000019d4 <ext2fs_has_feature_csum_seed>:
    19d4:	sub	sp, sp, #0x10
    19d8:	str	x0, [sp, #8]
    19dc:	ldr	x8, [sp, #8]
    19e0:	ldr	w9, [x8, #96]
    19e4:	tst	w9, #0x2000
    19e8:	cset	w9, ne  // ne = any
    19ec:	and	w0, w9, #0x1
    19f0:	add	sp, sp, #0x10
    19f4:	ret

00000000000019f8 <ext2fs_has_feature_casefold>:
    19f8:	sub	sp, sp, #0x10
    19fc:	str	x0, [sp, #8]
    1a00:	ldr	x8, [sp, #8]
    1a04:	ldr	w9, [x8, #96]
    1a08:	tst	w9, #0x20000
    1a0c:	cset	w9, ne  // ne = any
    1a10:	and	w0, w9, #0x1
    1a14:	add	sp, sp, #0x10
    1a18:	ret

0000000000001a1c <list_super>:
    1a1c:	sub	sp, sp, #0x20
    1a20:	stp	x29, x30, [sp, #16]
    1a24:	add	x29, sp, #0x10
    1a28:	adrp	x8, 0 <stdout>
    1a2c:	add	x8, x8, #0x0
    1a30:	str	x0, [sp, #8]
    1a34:	ldr	x0, [sp, #8]
    1a38:	ldr	x1, [x8]
    1a3c:	bl	0 <list_super2>
    1a40:	ldp	x29, x30, [sp, #16]
    1a44:	add	sp, sp, #0x20
    1a48:	ret

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	sub	sp, sp, #0x100
   4:	stp	x29, x30, [sp, #240]
   8:	add	x29, sp, #0xf0
   c:	adrp	x8, 0 <e2p_list_journal_super>
  10:	add	x8, x8, #0x0
  14:	adrp	x9, 0 <e2p_list_journal_super>
  18:	add	x9, x9, #0x0
  1c:	stur	x0, [x29, #-8]
  20:	stur	x1, [x29, #-16]
  24:	stur	w2, [x29, #-20]
  28:	stur	w3, [x29, #-24]
  2c:	ldur	x10, [x29, #-16]
  30:	stur	x10, [x29, #-32]
  34:	stur	wzr, [x29, #-60]
  38:	ldur	x0, [x29, #-8]
  3c:	mov	x1, x8
  40:	mov	x2, x9
  44:	bl	0 <fprintf>
  48:	stur	wzr, [x29, #-64]
  4c:	ldur	x8, [x29, #-32]
  50:	add	x8, x8, #0x24
  54:	stur	x8, [x29, #-40]
  58:	ldur	w8, [x29, #-64]
  5c:	cmp	w8, #0x3
  60:	b.cs	114 <e2p_list_journal_super+0x114>  // b.hs, b.nlast
  64:	ldur	x8, [x29, #-40]
  68:	ldr	w0, [x8]
  6c:	bl	4dc <e2p_swab32>
  70:	stur	w0, [x29, #-44]
  74:	stur	wzr, [x29, #-56]
  78:	mov	w9, #0x1                   	// #1
  7c:	stur	w9, [x29, #-48]
  80:	ldur	w8, [x29, #-56]
  84:	cmp	w8, #0x20
  88:	b.ge	f8 <e2p_list_journal_super+0xf8>  // b.tcont
  8c:	ldur	w8, [x29, #-44]
  90:	ldur	w9, [x29, #-48]
  94:	and	w8, w8, w9
  98:	cbz	w8, dc <e2p_list_journal_super+0xdc>
  9c:	ldur	x0, [x29, #-8]
  a0:	ldur	w8, [x29, #-64]
  a4:	ldur	w1, [x29, #-48]
  a8:	stur	x0, [x29, #-80]
  ac:	mov	w0, w8
  b0:	bl	0 <e2p_jrnl_feature2string>
  b4:	ldur	x9, [x29, #-80]
  b8:	stur	x0, [x29, #-88]
  bc:	mov	x0, x9
  c0:	adrp	x1, 0 <e2p_list_journal_super>
  c4:	add	x1, x1, #0x0
  c8:	ldur	x2, [x29, #-88]
  cc:	bl	0 <fprintf>
  d0:	ldur	w8, [x29, #-60]
  d4:	add	w8, w8, #0x1
  d8:	stur	w8, [x29, #-60]
  dc:	ldur	w8, [x29, #-56]
  e0:	add	w8, w8, #0x1
  e4:	stur	w8, [x29, #-56]
  e8:	ldur	w8, [x29, #-48]
  ec:	lsl	w8, w8, #1
  f0:	stur	w8, [x29, #-48]
  f4:	b	80 <e2p_list_journal_super+0x80>
  f8:	ldur	w8, [x29, #-64]
  fc:	add	w8, w8, #0x1
 100:	stur	w8, [x29, #-64]
 104:	ldur	x9, [x29, #-40]
 108:	add	x9, x9, #0x4
 10c:	stur	x9, [x29, #-40]
 110:	b	58 <e2p_list_journal_super+0x58>
 114:	ldur	w8, [x29, #-60]
 118:	cbnz	w8, 12c <e2p_list_journal_super+0x12c>
 11c:	ldur	x0, [x29, #-8]
 120:	adrp	x1, 0 <e2p_list_journal_super>
 124:	add	x1, x1, #0x0
 128:	bl	0 <fprintf>
 12c:	ldur	x1, [x29, #-8]
 130:	mov	w0, #0xa                   	// #10
 134:	bl	0 <fputc>
 138:	ldur	x1, [x29, #-8]
 13c:	adrp	x8, 0 <e2p_list_journal_super>
 140:	add	x8, x8, #0x0
 144:	mov	x0, x8
 148:	bl	0 <fputs>
 14c:	ldur	x8, [x29, #-32]
 150:	ldr	w9, [x8, #12]
 154:	mov	w0, w9
 158:	bl	0 <ntohl>
 15c:	mov	w9, #0x400                 	// #1024
 160:	udiv	w9, w0, w9
 164:	ldur	x8, [x29, #-32]
 168:	ldr	w0, [x8, #16]
 16c:	stur	w9, [x29, #-92]
 170:	bl	0 <ntohl>
 174:	ldur	w9, [x29, #-92]
 178:	mul	w10, w9, w0
 17c:	stur	w10, [x29, #-52]
 180:	ldur	w10, [x29, #-52]
 184:	cmp	w10, #0x2, lsl #12
 188:	b.cs	1a4 <e2p_list_journal_super+0x1a4>  // b.hs, b.nlast
 18c:	ldur	x0, [x29, #-8]
 190:	ldur	w2, [x29, #-52]
 194:	adrp	x1, 0 <e2p_list_journal_super>
 198:	add	x1, x1, #0x0
 19c:	bl	0 <fprintf>
 1a0:	b	1bc <e2p_list_journal_super+0x1bc>
 1a4:	ldur	x0, [x29, #-8]
 1a8:	ldur	w8, [x29, #-52]
 1ac:	lsr	w2, w8, #10
 1b0:	adrp	x1, 0 <e2p_list_journal_super>
 1b4:	add	x1, x1, #0x0
 1b8:	bl	0 <fprintf>
 1bc:	ldur	x8, [x29, #-32]
 1c0:	ldr	w0, [x8, #64]
 1c4:	bl	0 <ntohl>
 1c8:	stur	w0, [x29, #-68]
 1cc:	ldur	w9, [x29, #-20]
 1d0:	ldur	x8, [x29, #-32]
 1d4:	ldr	w0, [x8, #12]
 1d8:	stur	w9, [x29, #-96]
 1dc:	bl	0 <ntohl>
 1e0:	ldur	w9, [x29, #-96]
 1e4:	cmp	w9, w0
 1e8:	b.eq	220 <e2p_list_journal_super+0x220>  // b.none
 1ec:	ldur	x0, [x29, #-8]
 1f0:	ldur	x8, [x29, #-32]
 1f4:	ldr	w9, [x8, #12]
 1f8:	stur	x0, [x29, #-104]
 1fc:	mov	w0, w9
 200:	bl	0 <ntohl>
 204:	ldur	x8, [x29, #-104]
 208:	stur	w0, [x29, #-108]
 20c:	mov	x0, x8
 210:	adrp	x1, 0 <e2p_list_journal_super>
 214:	add	x1, x1, #0x0
 218:	ldur	w2, [x29, #-108]
 21c:	bl	0 <fprintf>
 220:	ldur	x0, [x29, #-8]
 224:	ldur	x8, [x29, #-32]
 228:	ldr	w9, [x8, #16]
 22c:	str	x0, [sp, #120]
 230:	mov	w0, w9
 234:	bl	0 <ntohl>
 238:	ldr	x8, [sp, #120]
 23c:	str	w0, [sp, #116]
 240:	mov	x0, x8
 244:	adrp	x1, 0 <e2p_list_journal_super>
 248:	add	x1, x1, #0x0
 24c:	ldr	w2, [sp, #116]
 250:	bl	0 <fprintf>
 254:	ldur	x8, [x29, #-32]
 258:	ldr	w9, [x8, #20]
 25c:	mov	w0, w9
 260:	bl	0 <ntohl>
 264:	cmp	w0, #0x1
 268:	b.eq	2a0 <e2p_list_journal_super+0x2a0>  // b.none
 26c:	ldur	x0, [x29, #-8]
 270:	ldur	x8, [x29, #-32]
 274:	ldr	w9, [x8, #20]
 278:	str	x0, [sp, #104]
 27c:	mov	w0, w9
 280:	bl	0 <ntohl>
 284:	ldr	x8, [sp, #104]
 288:	str	w0, [sp, #100]
 28c:	mov	x0, x8
 290:	adrp	x1, 0 <e2p_list_journal_super>
 294:	add	x1, x1, #0x0
 298:	ldr	w2, [sp, #100]
 29c:	bl	0 <fprintf>
 2a0:	ldur	x0, [x29, #-8]
 2a4:	ldur	x8, [x29, #-32]
 2a8:	ldr	w9, [x8, #24]
 2ac:	str	x0, [sp, #88]
 2b0:	mov	w0, w9
 2b4:	bl	0 <ntohl>
 2b8:	ldur	x8, [x29, #-32]
 2bc:	ldr	w9, [x8, #28]
 2c0:	str	w0, [sp, #84]
 2c4:	mov	w0, w9
 2c8:	bl	0 <ntohl>
 2cc:	ldr	x8, [sp, #88]
 2d0:	str	w0, [sp, #80]
 2d4:	mov	x0, x8
 2d8:	adrp	x1, 0 <e2p_list_journal_super>
 2dc:	add	x1, x1, #0x0
 2e0:	ldr	w2, [sp, #84]
 2e4:	ldr	w3, [sp, #80]
 2e8:	bl	0 <fprintf>
 2ec:	ldur	w9, [x29, #-68]
 2f0:	cmp	w9, #0x1
 2f4:	b.eq	30c <e2p_list_journal_super+0x30c>  // b.none
 2f8:	ldur	x0, [x29, #-8]
 2fc:	ldur	w2, [x29, #-68]
 300:	adrp	x1, 0 <e2p_list_journal_super>
 304:	add	x1, x1, #0x0
 308:	bl	0 <fprintf>
 30c:	ldur	x8, [x29, #-32]
 310:	ldr	w9, [x8, #36]
 314:	mov	w0, #0x1                   	// #1
 318:	str	w9, [sp, #76]
 31c:	bl	4dc <e2p_swab32>
 320:	ldr	w9, [sp, #76]
 324:	and	w10, w9, w0
 328:	cbz	w10, 344 <e2p_list_journal_super+0x344>
 32c:	ldur	x0, [x29, #-8]
 330:	adrp	x1, 0 <e2p_list_journal_super>
 334:	add	x1, x1, #0x0
 338:	adrp	x2, 0 <e2p_list_journal_super>
 33c:	add	x2, x2, #0x0
 340:	bl	0 <fprintf>
 344:	ldur	x8, [x29, #-32]
 348:	ldr	w9, [x8, #40]
 34c:	mov	w0, #0x10                  	// #16
 350:	str	w9, [sp, #72]
 354:	bl	4dc <e2p_swab32>
 358:	ldr	w9, [sp, #72]
 35c:	and	w10, w9, w0
 360:	cbnz	w10, 384 <e2p_list_journal_super+0x384>
 364:	ldur	x8, [x29, #-32]
 368:	ldr	w9, [x8, #40]
 36c:	mov	w0, #0x8                   	// #8
 370:	str	w9, [sp, #68]
 374:	bl	4dc <e2p_swab32>
 378:	ldr	w9, [sp, #68]
 37c:	and	w10, w9, w0
 380:	cbz	w10, 3d0 <e2p_list_journal_super+0x3d0>
 384:	ldur	x0, [x29, #-8]
 388:	ldur	x8, [x29, #-32]
 38c:	ldrb	w9, [x8, #80]
 390:	str	x0, [sp, #56]
 394:	mov	w0, w9
 398:	bl	518 <journal_checksum_type_str>
 39c:	ldur	x8, [x29, #-32]
 3a0:	ldr	w9, [x8, #252]
 3a4:	str	x0, [sp, #48]
 3a8:	mov	w0, w9
 3ac:	bl	4dc <e2p_swab32>
 3b0:	ldr	x8, [sp, #56]
 3b4:	str	w0, [sp, #44]
 3b8:	mov	x0, x8
 3bc:	adrp	x1, 0 <e2p_list_journal_super>
 3c0:	add	x1, x1, #0x0
 3c4:	ldr	x2, [sp, #48]
 3c8:	ldr	w3, [sp, #44]
 3cc:	bl	0 <fprintf>
 3d0:	ldur	w8, [x29, #-68]
 3d4:	cmp	w8, #0x1
 3d8:	b.hi	3ec <e2p_list_journal_super+0x3ec>  // b.pmore
 3dc:	ldur	x8, [x29, #-32]
 3e0:	add	x0, x8, #0x100
 3e4:	bl	0 <e2p_is_null_uuid>
 3e8:	cbnz	w0, 490 <e2p_list_journal_super+0x490>
 3ec:	stur	wzr, [x29, #-64]
 3f0:	ldur	w8, [x29, #-64]
 3f4:	ldur	w9, [x29, #-68]
 3f8:	mov	w10, #0x0                   	// #0
 3fc:	cmp	w8, w9
 400:	str	w10, [sp, #40]
 404:	b.cs	418 <e2p_list_journal_super+0x418>  // b.hs, b.nlast
 408:	ldur	w8, [x29, #-64]
 40c:	cmp	w8, #0x30
 410:	cset	w8, cc  // cc = lo, ul, last
 414:	str	w8, [sp, #40]
 418:	ldr	w8, [sp, #40]
 41c:	tbnz	w8, #0, 424 <e2p_list_journal_super+0x424>
 420:	b	490 <e2p_list_journal_super+0x490>
 424:	ldur	w8, [x29, #-64]
 428:	adrp	x9, 0 <e2p_list_journal_super>
 42c:	add	x9, x9, #0x0
 430:	adrp	x10, 0 <e2p_list_journal_super>
 434:	add	x10, x10, #0x0
 438:	cmp	w8, #0x0
 43c:	csel	x0, x10, x9, ne  // ne = any
 440:	ldur	x9, [x29, #-32]
 444:	add	x9, x9, #0x100
 448:	ldur	w8, [x29, #-64]
 44c:	mov	w11, #0x10                  	// #16
 450:	mul	w8, w8, w11
 454:	mov	w10, w8
 458:	ubfx	x10, x10, #0, #32
 45c:	add	x9, x9, x10
 460:	str	x0, [sp, #32]
 464:	mov	x0, x9
 468:	bl	0 <e2p_uuid2str>
 46c:	ldr	x9, [sp, #32]
 470:	str	x0, [sp, #24]
 474:	mov	x0, x9
 478:	ldr	x1, [sp, #24]
 47c:	bl	0 <printf>
 480:	ldur	w8, [x29, #-64]
 484:	add	w8, w8, #0x1
 488:	stur	w8, [x29, #-64]
 48c:	b	3f0 <e2p_list_journal_super+0x3f0>
 490:	ldur	x8, [x29, #-32]
 494:	ldr	w9, [x8, #32]
 498:	cbz	w9, 4d0 <e2p_list_journal_super+0x4d0>
 49c:	ldur	x0, [x29, #-8]
 4a0:	ldur	x8, [x29, #-32]
 4a4:	ldr	w9, [x8, #32]
 4a8:	str	x0, [sp, #16]
 4ac:	mov	w0, w9
 4b0:	bl	0 <ntohl>
 4b4:	ldr	x8, [sp, #16]
 4b8:	str	w0, [sp, #12]
 4bc:	mov	x0, x8
 4c0:	adrp	x1, 0 <e2p_list_journal_super>
 4c4:	add	x1, x1, #0x0
 4c8:	ldr	w2, [sp, #12]
 4cc:	bl	0 <fprintf>
 4d0:	ldp	x29, x30, [sp, #240]
 4d4:	add	sp, sp, #0x100
 4d8:	ret

00000000000004dc <e2p_swab32>:
 4dc:	sub	sp, sp, #0x10
 4e0:	str	w0, [sp, #12]
 4e4:	ldr	w8, [sp, #12]
 4e8:	ldr	w9, [sp, #12]
 4ec:	lsr	w9, w9, #8
 4f0:	and	w9, w9, #0xff00
 4f4:	orr	w8, w9, w8, lsr #24
 4f8:	ldr	w9, [sp, #12]
 4fc:	lsl	w9, w9, #8
 500:	and	w9, w9, #0xff0000
 504:	orr	w8, w8, w9
 508:	ldr	w9, [sp, #12]
 50c:	orr	w0, w8, w9, lsl #24
 510:	add	sp, sp, #0x10
 514:	ret

0000000000000518 <journal_checksum_type_str>:
 518:	sub	sp, sp, #0x10
 51c:	strb	w0, [sp, #7]
 520:	ldrb	w8, [sp, #7]
 524:	cmp	w8, #0x4
 528:	cset	w8, eq  // eq = none
 52c:	eor	w8, w8, #0x1
 530:	tbnz	w8, #0, 548 <journal_checksum_type_str+0x30>
 534:	b	538 <journal_checksum_type_str+0x20>
 538:	adrp	x8, 0 <e2p_list_journal_super>
 53c:	add	x8, x8, #0x0
 540:	str	x8, [sp, #8]
 544:	b	554 <journal_checksum_type_str+0x3c>
 548:	adrp	x8, 0 <e2p_list_journal_super>
 54c:	add	x8, x8, #0x0
 550:	str	x8, [sp, #8]
 554:	ldr	x0, [sp, #8]
 558:	add	sp, sp, #0x10
 55c:	ret

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	adrp	x8, 0 <e2p_mntopt2string>
  10:	add	x8, x8, #0x0
  14:	stur	w0, [x29, #-12]
  18:	str	x8, [sp, #24]
  1c:	ldr	x8, [sp, #24]
  20:	ldr	x8, [x8, #8]
  24:	cbz	x8, 5c <e2p_mntopt2string+0x5c>
  28:	ldur	w8, [x29, #-12]
  2c:	ldr	x9, [sp, #24]
  30:	ldr	w10, [x9]
  34:	cmp	w8, w10
  38:	b.ne	4c <e2p_mntopt2string+0x4c>  // b.any
  3c:	ldr	x8, [sp, #24]
  40:	ldr	x8, [x8, #8]
  44:	stur	x8, [x29, #-8]
  48:	b	a8 <e2p_mntopt2string+0xa8>
  4c:	ldr	x8, [sp, #24]
  50:	add	x8, x8, #0x10
  54:	str	x8, [sp, #24]
  58:	b	1c <e2p_mntopt2string+0x1c>
  5c:	str	wzr, [sp, #20]
  60:	ldur	w8, [x29, #-12]
  64:	lsr	w8, w8, #1
  68:	stur	w8, [x29, #-12]
  6c:	cbz	w8, 80 <e2p_mntopt2string+0x80>
  70:	ldr	w8, [sp, #20]
  74:	add	w8, w8, #0x1
  78:	str	w8, [sp, #20]
  7c:	b	60 <e2p_mntopt2string+0x60>
  80:	ldr	w2, [sp, #20]
  84:	adrp	x8, 0 <e2p_mntopt2string>
  88:	add	x8, x8, #0x0
  8c:	mov	x0, x8
  90:	adrp	x1, 0 <e2p_mntopt2string>
  94:	add	x1, x1, #0x0
  98:	str	x8, [sp, #8]
  9c:	bl	0 <sprintf>
  a0:	ldr	x8, [sp, #8]
  a4:	stur	x8, [x29, #-8]
  a8:	ldur	x0, [x29, #-8]
  ac:	ldp	x29, x30, [sp, #48]
  b0:	add	sp, sp, #0x40
  b4:	ret

00000000000000b8 <e2p_string2mntopt>:
  b8:	sub	sp, sp, #0x40
  bc:	stp	x29, x30, [sp, #48]
  c0:	add	x29, sp, #0x30
  c4:	adrp	x8, 0 <e2p_mntopt2string>
  c8:	add	x8, x8, #0x0
  cc:	stur	x0, [x29, #-16]
  d0:	str	x1, [sp, #24]
  d4:	str	x8, [sp, #16]
  d8:	ldr	x8, [sp, #16]
  dc:	ldr	x8, [x8, #8]
  e0:	cbz	x8, 120 <e2p_string2mntopt+0x68>
  e4:	ldur	x0, [x29, #-16]
  e8:	ldr	x8, [sp, #16]
  ec:	ldr	x1, [x8, #8]
  f0:	bl	0 <strcasecmp>
  f4:	cbnz	w0, 110 <e2p_string2mntopt+0x58>
  f8:	ldr	x8, [sp, #16]
  fc:	ldr	w9, [x8]
 100:	ldr	x8, [sp, #24]
 104:	str	w9, [x8]
 108:	stur	wzr, [x29, #-4]
 10c:	b	1cc <e2p_string2mntopt+0x114>
 110:	ldr	x8, [sp, #16]
 114:	add	x8, x8, #0x10
 118:	str	x8, [sp, #16]
 11c:	b	d8 <e2p_string2mntopt+0x20>
 120:	ldur	x0, [x29, #-16]
 124:	adrp	x1, 0 <e2p_mntopt2string>
 128:	add	x1, x1, #0x0
 12c:	mov	x2, #0x7                   	// #7
 130:	bl	0 <strncasecmp>
 134:	cbz	w0, 144 <e2p_string2mntopt+0x8c>
 138:	mov	w8, #0x1                   	// #1
 13c:	stur	w8, [x29, #-4]
 140:	b	1cc <e2p_string2mntopt+0x114>
 144:	ldur	x8, [x29, #-16]
 148:	ldrb	w9, [x8, #8]
 14c:	cbnz	w9, 15c <e2p_string2mntopt+0xa4>
 150:	mov	w8, #0x1                   	// #1
 154:	stur	w8, [x29, #-4]
 158:	b	1cc <e2p_string2mntopt+0x114>
 15c:	ldur	x8, [x29, #-16]
 160:	add	x0, x8, #0x8
 164:	add	x1, sp, #0x8
 168:	mov	w2, #0xa                   	// #10
 16c:	bl	0 <strtol>
 170:	str	w0, [sp, #4]
 174:	ldr	w9, [sp, #4]
 178:	cmp	w9, #0x1f
 17c:	b.gt	190 <e2p_string2mntopt+0xd8>
 180:	ldr	w8, [sp, #4]
 184:	cmp	w8, #0x0
 188:	cset	w8, ge  // ge = tcont
 18c:	tbnz	w8, #0, 19c <e2p_string2mntopt+0xe4>
 190:	mov	w8, #0x1                   	// #1
 194:	stur	w8, [x29, #-4]
 198:	b	1cc <e2p_string2mntopt+0x114>
 19c:	ldr	x8, [sp, #8]
 1a0:	ldrb	w9, [x8]
 1a4:	cbz	w9, 1b4 <e2p_string2mntopt+0xfc>
 1a8:	mov	w8, #0x1                   	// #1
 1ac:	stur	w8, [x29, #-4]
 1b0:	b	1cc <e2p_string2mntopt+0x114>
 1b4:	ldr	w8, [sp, #4]
 1b8:	mov	w9, #0x1                   	// #1
 1bc:	lsl	w8, w9, w8
 1c0:	ldr	x10, [sp, #24]
 1c4:	str	w8, [x10]
 1c8:	stur	wzr, [x29, #-4]
 1cc:	ldur	w0, [x29, #-4]
 1d0:	ldp	x29, x30, [sp, #48]
 1d4:	add	sp, sp, #0x40
 1d8:	ret

00000000000001dc <e2p_edit_mntopts>:
 1dc:	sub	sp, sp, #0x70
 1e0:	stp	x29, x30, [sp, #96]
 1e4:	add	x29, sp, #0x60
 1e8:	stur	x0, [x29, #-16]
 1ec:	stur	x1, [x29, #-24]
 1f0:	stur	w2, [x29, #-28]
 1f4:	str	wzr, [sp, #28]
 1f8:	ldur	x0, [x29, #-16]
 1fc:	bl	0 <strlen>
 200:	add	x0, x0, #0x1
 204:	bl	0 <malloc>
 208:	str	x0, [sp, #48]
 20c:	ldr	x8, [sp, #48]
 210:	cbnz	x8, 220 <e2p_edit_mntopts+0x44>
 214:	mov	w8, #0x1                   	// #1
 218:	stur	w8, [x29, #-4]
 21c:	b	3c8 <e2p_edit_mntopts+0x1ec>
 220:	ldr	x0, [sp, #48]
 224:	ldur	x1, [x29, #-16]
 228:	bl	0 <strcpy>
 22c:	ldr	x8, [sp, #48]
 230:	stur	x8, [x29, #-40]
 234:	ldur	x8, [x29, #-40]
 238:	mov	w9, #0x0                   	// #0
 23c:	str	w9, [sp, #24]
 240:	cbz	x8, 258 <e2p_edit_mntopts+0x7c>
 244:	ldur	x8, [x29, #-40]
 248:	ldrb	w9, [x8]
 24c:	cmp	w9, #0x0
 250:	cset	w9, ne  // ne = any
 254:	str	w9, [sp, #24]
 258:	ldr	w8, [sp, #24]
 25c:	tbnz	w8, #0, 264 <e2p_edit_mntopts+0x88>
 260:	b	3b8 <e2p_edit_mntopts+0x1dc>
 264:	str	wzr, [sp, #36]
 268:	ldur	x0, [x29, #-40]
 26c:	bl	3d8 <skip_over_blanks>
 270:	stur	x0, [x29, #-40]
 274:	ldur	x0, [x29, #-40]
 278:	bl	448 <skip_over_word>
 27c:	str	x0, [sp, #40]
 280:	ldr	x8, [sp, #40]
 284:	ldrb	w9, [x8]
 288:	cbnz	w9, 298 <e2p_edit_mntopts+0xbc>
 28c:	mov	x8, xzr
 290:	str	x8, [sp, #40]
 294:	b	2a4 <e2p_edit_mntopts+0xc8>
 298:	ldr	x8, [sp, #40]
 29c:	mov	w9, #0x0                   	// #0
 2a0:	strb	w9, [x8]
 2a4:	ldur	x8, [x29, #-40]
 2a8:	ldrb	w9, [x8]
 2ac:	cmp	w9, #0x2b
 2b0:	str	w9, [sp, #20]
 2b4:	b.eq	2f0 <e2p_edit_mntopts+0x114>  // b.none
 2b8:	b	2bc <e2p_edit_mntopts+0xe0>
 2bc:	ldr	w8, [sp, #20]
 2c0:	cmp	w8, #0x2d
 2c4:	b.eq	2e4 <e2p_edit_mntopts+0x108>  // b.none
 2c8:	b	2cc <e2p_edit_mntopts+0xf0>
 2cc:	ldr	w8, [sp, #20]
 2d0:	cmp	w8, #0x5e
 2d4:	cset	w9, eq  // eq = none
 2d8:	eor	w9, w9, #0x1
 2dc:	tbnz	w9, #0, 2fc <e2p_edit_mntopts+0x120>
 2e0:	b	2e4 <e2p_edit_mntopts+0x108>
 2e4:	ldr	w8, [sp, #36]
 2e8:	add	w8, w8, #0x1
 2ec:	str	w8, [sp, #36]
 2f0:	ldur	x8, [x29, #-40]
 2f4:	add	x8, x8, #0x1
 2f8:	stur	x8, [x29, #-40]
 2fc:	ldur	x0, [x29, #-40]
 300:	add	x1, sp, #0x20
 304:	bl	b8 <e2p_string2mntopt>
 308:	cbz	w0, 318 <e2p_edit_mntopts+0x13c>
 30c:	mov	w8, #0x1                   	// #1
 310:	str	w8, [sp, #28]
 314:	b	3b8 <e2p_edit_mntopts+0x1dc>
 318:	ldur	w8, [x29, #-28]
 31c:	cbz	w8, 33c <e2p_edit_mntopts+0x160>
 320:	ldur	w8, [x29, #-28]
 324:	ldr	w9, [sp, #32]
 328:	and	w8, w8, w9
 32c:	cbnz	w8, 33c <e2p_edit_mntopts+0x160>
 330:	mov	w8, #0x1                   	// #1
 334:	str	w8, [sp, #28]
 338:	b	3b8 <e2p_edit_mntopts+0x1dc>
 33c:	ldr	w8, [sp, #32]
 340:	and	w8, w8, #0x60
 344:	cbz	w8, 358 <e2p_edit_mntopts+0x17c>
 348:	ldur	x8, [x29, #-24]
 34c:	ldr	w9, [x8]
 350:	and	w9, w9, #0xffffff9f
 354:	str	w9, [x8]
 358:	ldr	w8, [sp, #36]
 35c:	cbz	w8, 378 <e2p_edit_mntopts+0x19c>
 360:	ldr	w8, [sp, #32]
 364:	ldur	x9, [x29, #-24]
 368:	ldr	w10, [x9]
 36c:	bic	w8, w10, w8
 370:	str	w8, [x9]
 374:	b	38c <e2p_edit_mntopts+0x1b0>
 378:	ldr	w8, [sp, #32]
 37c:	ldur	x9, [x29, #-24]
 380:	ldr	w10, [x9]
 384:	orr	w8, w10, w8
 388:	str	w8, [x9]
 38c:	ldr	x8, [sp, #40]
 390:	cbz	x8, 3a4 <e2p_edit_mntopts+0x1c8>
 394:	ldr	x8, [sp, #40]
 398:	add	x8, x8, #0x1
 39c:	str	x8, [sp, #8]
 3a0:	b	3ac <e2p_edit_mntopts+0x1d0>
 3a4:	mov	x8, xzr
 3a8:	str	x8, [sp, #8]
 3ac:	ldr	x8, [sp, #8]
 3b0:	stur	x8, [x29, #-40]
 3b4:	b	234 <e2p_edit_mntopts+0x58>
 3b8:	ldr	x0, [sp, #48]
 3bc:	bl	0 <free>
 3c0:	ldr	w8, [sp, #28]
 3c4:	stur	w8, [x29, #-4]
 3c8:	ldur	w0, [x29, #-4]
 3cc:	ldp	x29, x30, [sp, #96]
 3d0:	add	sp, sp, #0x70
 3d4:	ret

00000000000003d8 <skip_over_blanks>:
 3d8:	sub	sp, sp, #0x20
 3dc:	stp	x29, x30, [sp, #16]
 3e0:	add	x29, sp, #0x10
 3e4:	str	x0, [sp, #8]
 3e8:	ldr	x8, [sp, #8]
 3ec:	ldrb	w9, [x8]
 3f0:	mov	w10, #0x0                   	// #0
 3f4:	str	w10, [sp, #4]
 3f8:	cbz	w9, 41c <skip_over_blanks+0x44>
 3fc:	bl	0 <__ctype_b_loc>
 400:	ldr	x8, [x0]
 404:	ldr	x9, [sp, #8]
 408:	ldrb	w10, [x9]
 40c:	ldrh	w10, [x8, w10, sxtw #1]
 410:	tst	w10, #0x2000
 414:	cset	w10, ne  // ne = any
 418:	str	w10, [sp, #4]
 41c:	ldr	w8, [sp, #4]
 420:	tbnz	w8, #0, 428 <skip_over_blanks+0x50>
 424:	b	438 <skip_over_blanks+0x60>
 428:	ldr	x8, [sp, #8]
 42c:	add	x8, x8, #0x1
 430:	str	x8, [sp, #8]
 434:	b	3e8 <skip_over_blanks+0x10>
 438:	ldr	x0, [sp, #8]
 43c:	ldp	x29, x30, [sp, #16]
 440:	add	sp, sp, #0x20
 444:	ret

0000000000000448 <skip_over_word>:
 448:	sub	sp, sp, #0x20
 44c:	stp	x29, x30, [sp, #16]
 450:	add	x29, sp, #0x10
 454:	str	x0, [sp, #8]
 458:	ldr	x8, [sp, #8]
 45c:	ldrb	w9, [x8]
 460:	mov	w10, #0x0                   	// #0
 464:	str	w10, [sp, #4]
 468:	cbz	w9, 4a4 <skip_over_word+0x5c>
 46c:	bl	0 <__ctype_b_loc>
 470:	ldr	x8, [x0]
 474:	ldr	x9, [sp, #8]
 478:	ldrb	w10, [x9]
 47c:	ldrh	w10, [x8, w10, sxtw #1]
 480:	and	w10, w10, #0x2000
 484:	mov	w11, #0x0                   	// #0
 488:	str	w11, [sp, #4]
 48c:	cbnz	w10, 4a4 <skip_over_word+0x5c>
 490:	ldr	x8, [sp, #8]
 494:	ldrb	w9, [x8]
 498:	cmp	w9, #0x2c
 49c:	cset	w9, ne  // ne = any
 4a0:	str	w9, [sp, #4]
 4a4:	ldr	w8, [sp, #4]
 4a8:	tbnz	w8, #0, 4b0 <skip_over_word+0x68>
 4ac:	b	4c0 <skip_over_word+0x78>
 4b0:	ldr	x8, [sp, #8]
 4b4:	add	x8, x8, #0x1
 4b8:	str	x8, [sp, #8]
 4bc:	b	458 <skip_over_word+0x10>
 4c0:	ldr	x0, [sp, #8]
 4c4:	ldp	x29, x30, [sp, #16]
 4c8:	add	sp, sp, #0x20
 4cc:	ret

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	mov	w8, wzr
  10:	add	x9, sp, #0x10
  14:	stur	x0, [x29, #-16]
  18:	stur	w1, [x29, #-20]
  1c:	ldur	x0, [x29, #-16]
  20:	mov	x1, x9
  24:	mov	w2, w8
  28:	bl	0 <strtoull>
  2c:	str	x0, [sp, #8]
  30:	ldr	x9, [sp, #16]
  34:	ldrb	w8, [x9]
  38:	cbz	w8, 50 <parse_num_blocks2+0x50>
  3c:	ldr	x8, [sp, #16]
  40:	ldrb	w9, [x8, #1]
  44:	cbz	w9, 50 <parse_num_blocks2+0x50>
  48:	stur	xzr, [x29, #-8]
  4c:	b	1a8 <parse_num_blocks2+0x1a8>
  50:	ldr	x8, [sp, #16]
  54:	ldrb	w9, [x8]
  58:	str	w9, [sp, #4]
  5c:	cbz	w9, 194 <parse_num_blocks2+0x194>
  60:	b	64 <parse_num_blocks2+0x64>
  64:	ldr	w8, [sp, #4]
  68:	cmp	w8, #0x47
  6c:	b.eq	108 <parse_num_blocks2+0x108>  // b.none
  70:	b	74 <parse_num_blocks2+0x74>
  74:	ldr	w8, [sp, #4]
  78:	cmp	w8, #0x4b
  7c:	b.eq	120 <parse_num_blocks2+0x120>  // b.none
  80:	b	84 <parse_num_blocks2+0x84>
  84:	ldr	w8, [sp, #4]
  88:	cmp	w8, #0x4d
  8c:	b.eq	114 <parse_num_blocks2+0x114>  // b.none
  90:	b	94 <parse_num_blocks2+0x94>
  94:	ldr	w8, [sp, #4]
  98:	cmp	w8, #0x54
  9c:	b.eq	fc <parse_num_blocks2+0xfc>  // b.none
  a0:	b	a4 <parse_num_blocks2+0xa4>
  a4:	ldr	w8, [sp, #4]
  a8:	cmp	w8, #0x67
  ac:	b.eq	108 <parse_num_blocks2+0x108>  // b.none
  b0:	b	b4 <parse_num_blocks2+0xb4>
  b4:	ldr	w8, [sp, #4]
  b8:	cmp	w8, #0x6b
  bc:	b.eq	120 <parse_num_blocks2+0x120>  // b.none
  c0:	b	c4 <parse_num_blocks2+0xc4>
  c4:	ldr	w8, [sp, #4]
  c8:	cmp	w8, #0x6d
  cc:	b.eq	114 <parse_num_blocks2+0x114>  // b.none
  d0:	b	d4 <parse_num_blocks2+0xd4>
  d4:	ldr	w8, [sp, #4]
  d8:	cmp	w8, #0x73
  dc:	b.eq	158 <parse_num_blocks2+0x158>  // b.none
  e0:	b	e4 <parse_num_blocks2+0xe4>
  e4:	ldr	w8, [sp, #4]
  e8:	cmp	w8, #0x74
  ec:	cset	w9, eq  // eq = none
  f0:	eor	w9, w9, #0x1
  f4:	tbnz	w9, #0, 198 <parse_num_blocks2+0x198>
  f8:	b	fc <parse_num_blocks2+0xfc>
  fc:	ldr	x8, [sp, #8]
 100:	lsl	x8, x8, #10
 104:	str	x8, [sp, #8]
 108:	ldr	x8, [sp, #8]
 10c:	lsl	x8, x8, #10
 110:	str	x8, [sp, #8]
 114:	ldr	x8, [sp, #8]
 118:	lsl	x8, x8, #10
 11c:	str	x8, [sp, #8]
 120:	ldur	w8, [x29, #-20]
 124:	cmp	w8, #0x0
 128:	cset	w8, ge  // ge = tcont
 12c:	tbnz	w8, #0, 140 <parse_num_blocks2+0x140>
 130:	ldr	x8, [sp, #8]
 134:	lsl	x8, x8, #10
 138:	str	x8, [sp, #8]
 13c:	b	154 <parse_num_blocks2+0x154>
 140:	ldur	w8, [x29, #-20]
 144:	mov	w9, w8
 148:	ldr	x10, [sp, #8]
 14c:	lsr	x9, x10, x9
 150:	str	x9, [sp, #8]
 154:	b	1a0 <parse_num_blocks2+0x1a0>
 158:	ldur	w8, [x29, #-20]
 15c:	cmp	w8, #0x0
 160:	cset	w8, ge  // ge = tcont
 164:	tbnz	w8, #0, 178 <parse_num_blocks2+0x178>
 168:	ldr	x8, [sp, #8]
 16c:	lsl	x8, x8, #9
 170:	str	x8, [sp, #8]
 174:	b	190 <parse_num_blocks2+0x190>
 178:	ldur	w8, [x29, #-20]
 17c:	add	w8, w8, #0x1
 180:	ldr	x9, [sp, #8]
 184:	mov	w10, w8
 188:	lsr	x9, x9, x10
 18c:	str	x9, [sp, #8]
 190:	b	1a0 <parse_num_blocks2+0x1a0>
 194:	b	1a0 <parse_num_blocks2+0x1a0>
 198:	stur	xzr, [x29, #-8]
 19c:	b	1a8 <parse_num_blocks2+0x1a8>
 1a0:	ldr	x8, [sp, #8]
 1a4:	stur	x8, [x29, #-8]
 1a8:	ldur	x0, [x29, #-8]
 1ac:	ldp	x29, x30, [sp, #48]
 1b0:	add	sp, sp, #0x40
 1b4:	ret

00000000000001b8 <parse_num_blocks>:
 1b8:	sub	sp, sp, #0x20
 1bc:	stp	x29, x30, [sp, #16]
 1c0:	add	x29, sp, #0x10
 1c4:	str	x0, [sp, #8]
 1c8:	str	w1, [sp, #4]
 1cc:	ldr	x0, [sp, #8]
 1d0:	ldr	w1, [sp, #4]
 1d4:	bl	0 <parse_num_blocks2>
 1d8:	ldp	x29, x30, [sp, #16]
 1dc:	add	sp, sp, #0x20
 1e0:	ret

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	str	x0, [sp, #8]
  10:	strh	w1, [sp, #6]
  14:	ldrh	w8, [sp, #6]
  18:	cmp	w8, #0x1
  1c:	str	w8, [sp]
  20:	b.eq	48 <print_fs_errors+0x48>  // b.none
  24:	b	28 <print_fs_errors+0x28>
  28:	ldr	w8, [sp]
  2c:	cmp	w8, #0x2
  30:	b.eq	5c <print_fs_errors+0x5c>  // b.none
  34:	b	38 <print_fs_errors+0x38>
  38:	ldr	w8, [sp]
  3c:	cmp	w8, #0x3
  40:	b.eq	70 <print_fs_errors+0x70>  // b.none
  44:	b	84 <print_fs_errors+0x84>
  48:	ldr	x0, [sp, #8]
  4c:	adrp	x1, 0 <print_fs_errors>
  50:	add	x1, x1, #0x0
  54:	bl	0 <fprintf>
  58:	b	94 <print_fs_errors+0x94>
  5c:	ldr	x0, [sp, #8]
  60:	adrp	x1, 0 <print_fs_errors>
  64:	add	x1, x1, #0x0
  68:	bl	0 <fprintf>
  6c:	b	94 <print_fs_errors+0x94>
  70:	ldr	x0, [sp, #8]
  74:	adrp	x1, 0 <print_fs_errors>
  78:	add	x1, x1, #0x0
  7c:	bl	0 <fprintf>
  80:	b	94 <print_fs_errors+0x94>
  84:	ldr	x0, [sp, #8]
  88:	adrp	x1, 0 <print_fs_errors>
  8c:	add	x1, x1, #0x0
  90:	bl	0 <fprintf>
  94:	ldp	x29, x30, [sp, #16]
  98:	add	sp, sp, #0x20
  9c:	ret

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	mov	w8, #0x1                   	// #1
  10:	adrp	x9, 0 <print_flags>
  14:	add	x9, x9, #0x0
  18:	stur	x0, [x29, #-8]
  1c:	stur	x1, [x29, #-16]
  20:	stur	w2, [x29, #-20]
  24:	ldur	w10, [x29, #-20]
  28:	and	w10, w10, #0x1
  2c:	str	w10, [sp, #24]
  30:	str	w8, [sp, #12]
  34:	str	x9, [sp, #16]
  38:	ldr	x8, [sp, #16]
  3c:	ldr	x8, [x8]
  40:	cbz	x8, d0 <print_flags+0xd0>
  44:	ldur	x8, [x29, #-16]
  48:	ldr	x9, [sp, #16]
  4c:	ldr	x9, [x9]
  50:	and	x8, x8, x9
  54:	cbz	x8, a8 <print_flags+0xa8>
  58:	ldr	w8, [sp, #24]
  5c:	cbz	w8, 94 <print_flags+0x94>
  60:	ldr	w8, [sp, #12]
  64:	cbz	w8, 70 <print_flags+0x70>
  68:	str	wzr, [sp, #12]
  6c:	b	80 <print_flags+0x80>
  70:	ldur	x1, [x29, #-8]
  74:	adrp	x0, 0 <print_flags>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <fputs>
  80:	ldr	x8, [sp, #16]
  84:	ldr	x0, [x8, #16]
  88:	ldur	x1, [x29, #-8]
  8c:	bl	0 <fputs>
  90:	b	a4 <print_flags+0xa4>
  94:	ldr	x8, [sp, #16]
  98:	ldr	x0, [x8, #8]
  9c:	ldur	x1, [x29, #-8]
  a0:	bl	0 <fputs>
  a4:	b	c0 <print_flags+0xc0>
  a8:	ldr	w8, [sp, #24]
  ac:	cbnz	w8, c0 <print_flags+0xc0>
  b0:	ldur	x1, [x29, #-8]
  b4:	adrp	x0, 0 <print_flags>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <fputs>
  c0:	ldr	x8, [sp, #16]
  c4:	add	x8, x8, #0x18
  c8:	str	x8, [sp, #16]
  cc:	b	38 <print_flags+0x38>
  d0:	ldr	w8, [sp, #24]
  d4:	cbz	w8, f0 <print_flags+0xf0>
  d8:	ldr	w8, [sp, #12]
  dc:	cbz	w8, f0 <print_flags+0xf0>
  e0:	ldur	x1, [x29, #-8]
  e4:	adrp	x0, 0 <print_flags>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <fputs>
  f0:	ldp	x29, x30, [sp, #48]
  f4:	add	sp, sp, #0x40
  f8:	ret

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	str	x0, [sp, #8]
  10:	strh	w1, [sp, #6]
  14:	ldrh	w8, [sp, #6]
  18:	and	w8, w8, #0x1
  1c:	cbz	w8, 34 <print_fs_state+0x34>
  20:	ldr	x0, [sp, #8]
  24:	adrp	x1, 0 <print_fs_state>
  28:	add	x1, x1, #0x0
  2c:	bl	0 <fprintf>
  30:	b	44 <print_fs_state+0x44>
  34:	ldr	x0, [sp, #8]
  38:	adrp	x1, 0 <print_fs_state>
  3c:	add	x1, x1, #0x0
  40:	bl	0 <fprintf>
  44:	ldrh	w8, [sp, #6]
  48:	and	w8, w8, #0x2
  4c:	cbz	w8, 60 <print_fs_state+0x60>
  50:	ldr	x0, [sp, #8]
  54:	adrp	x1, 0 <print_fs_state>
  58:	add	x1, x1, #0x0
  5c:	bl	0 <fprintf>
  60:	ldp	x29, x30, [sp, #16]
  64:	add	sp, sp, #0x20
  68:	ret

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x29, x30, [sp, #160]
   8:	add	x29, sp, #0xa0
   c:	sub	x8, x29, #0x10
  10:	add	x9, sp, #0x10
  14:	stur	w0, [x29, #-8]
  18:	str	x1, [x8]
  1c:	ldur	w0, [x29, #-8]
  20:	mov	x1, x9
  24:	str	x8, [sp]
  28:	bl	0 <fstat>
  2c:	cbnz	w0, 68 <setflags+0x68>
  30:	ldr	w8, [sp, #32]
  34:	and	w8, w8, #0xf000
  38:	cmp	w8, #0x8, lsl #12
  3c:	b.eq	68 <setflags+0x68>  // b.none
  40:	ldr	w8, [sp, #32]
  44:	and	w8, w8, #0xf000
  48:	cmp	w8, #0x4, lsl #12
  4c:	b.eq	68 <setflags+0x68>  // b.none
  50:	bl	0 <__errno_location>
  54:	mov	w8, #0x5f                  	// #95
  58:	str	w8, [x0]
  5c:	mov	w8, #0xffffffff            	// #-1
  60:	stur	w8, [x29, #-4]
  64:	b	8c <setflags+0x8c>
  68:	ldr	x8, [sp]
  6c:	ldr	x9, [x8]
  70:	add	x2, sp, #0xc
  74:	str	w9, [sp, #12]
  78:	ldur	w0, [x29, #-8]
  7c:	mov	x1, #0x6602                	// #26114
  80:	movk	x1, #0x4008, lsl #16
  84:	bl	0 <ioctl>
  88:	stur	w0, [x29, #-4]
  8c:	ldur	w0, [x29, #-4]
  90:	ldp	x29, x30, [sp, #160]
  94:	add	sp, sp, #0xb0
  98:	ret

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	mov	x8, #0x7602                	// #30210
  10:	movk	x8, #0x4008, lsl #16
  14:	add	x2, sp, #0xc
  18:	stur	w0, [x29, #-4]
  1c:	str	x1, [sp, #16]
  20:	ldr	x9, [sp, #16]
  24:	str	w9, [sp, #12]
  28:	ldur	w0, [x29, #-4]
  2c:	mov	x1, x8
  30:	bl	0 <ioctl>
  34:	ldp	x29, x30, [sp, #32]
  38:	add	sp, sp, #0x30
  3c:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #16]
   8:	str	wzr, [sp, #4]
   c:	ldr	x8, [sp, #16]
  10:	str	x8, [sp, #8]
  14:	ldr	w8, [sp, #4]
  18:	cmp	w8, #0x10
  1c:	b.ge	4c <e2p_is_null_uuid+0x4c>  // b.tcont
  20:	ldr	x8, [sp, #8]
  24:	add	x9, x8, #0x1
  28:	str	x9, [sp, #8]
  2c:	ldrb	w10, [x8]
  30:	cbz	w10, 3c <e2p_is_null_uuid+0x3c>
  34:	str	wzr, [sp, #28]
  38:	b	54 <e2p_is_null_uuid+0x54>
  3c:	ldr	w8, [sp, #4]
  40:	add	w8, w8, #0x1
  44:	str	w8, [sp, #4]
  48:	b	14 <e2p_is_null_uuid+0x14>
  4c:	mov	w8, #0x1                   	// #1
  50:	str	w8, [sp, #28]
  54:	ldr	w0, [sp, #28]
  58:	add	sp, sp, #0x20
  5c:	ret

0000000000000060 <e2p_uuid_to_str>:
  60:	sub	sp, sp, #0x60
  64:	stp	x29, x30, [sp, #80]
  68:	add	x29, sp, #0x50
  6c:	adrp	x8, 0 <e2p_is_null_uuid>
  70:	add	x8, x8, #0x0
  74:	sub	x9, x29, #0x20
  78:	stur	x0, [x29, #-8]
  7c:	stur	x1, [x29, #-16]
  80:	ldur	x0, [x29, #-8]
  84:	mov	x1, x9
  88:	str	x8, [sp, #40]
  8c:	bl	108 <e2p_unpack_uuid>
  90:	ldur	x0, [x29, #-16]
  94:	ldur	w2, [x29, #-32]
  98:	ldurh	w3, [x29, #-28]
  9c:	ldurh	w4, [x29, #-26]
  a0:	mov	x8, #0x8                   	// #8
  a4:	ldurh	w10, [x29, #-24]
  a8:	asr	w5, w10, w8
  ac:	ldurh	w8, [x29, #-24]
  b0:	and	w6, w8, #0xff
  b4:	ldurb	w7, [x29, #-22]
  b8:	ldurb	w8, [x29, #-21]
  bc:	ldurb	w10, [x29, #-20]
  c0:	ldurb	w11, [x29, #-19]
  c4:	ldurb	w12, [x29, #-18]
  c8:	ldurb	w13, [x29, #-17]
  cc:	ldr	x1, [sp, #40]
  d0:	mov	x9, sp
  d4:	str	w8, [x9]
  d8:	mov	x9, sp
  dc:	str	w10, [x9, #8]
  e0:	mov	x9, sp
  e4:	str	w11, [x9, #16]
  e8:	mov	x9, sp
  ec:	str	w12, [x9, #24]
  f0:	mov	x9, sp
  f4:	str	w13, [x9, #32]
  f8:	bl	0 <sprintf>
  fc:	ldp	x29, x30, [sp, #80]
 100:	add	sp, sp, #0x60
 104:	ret

0000000000000108 <e2p_unpack_uuid>:
 108:	sub	sp, sp, #0x20
 10c:	str	x0, [sp, #24]
 110:	str	x1, [sp, #16]
 114:	ldr	x8, [sp, #24]
 118:	str	x8, [sp, #8]
 11c:	ldr	x8, [sp, #8]
 120:	add	x9, x8, #0x1
 124:	str	x9, [sp, #8]
 128:	ldrb	w10, [x8]
 12c:	str	w10, [sp, #4]
 130:	ldr	w10, [sp, #4]
 134:	ldr	x8, [sp, #8]
 138:	add	x9, x8, #0x1
 13c:	str	x9, [sp, #8]
 140:	ldrb	w11, [x8]
 144:	orr	w10, w11, w10, lsl #8
 148:	str	w10, [sp, #4]
 14c:	ldr	w10, [sp, #4]
 150:	ldr	x8, [sp, #8]
 154:	add	x9, x8, #0x1
 158:	str	x9, [sp, #8]
 15c:	ldrb	w11, [x8]
 160:	orr	w10, w11, w10, lsl #8
 164:	str	w10, [sp, #4]
 168:	ldr	w10, [sp, #4]
 16c:	ldr	x8, [sp, #8]
 170:	add	x9, x8, #0x1
 174:	str	x9, [sp, #8]
 178:	ldrb	w11, [x8]
 17c:	orr	w10, w11, w10, lsl #8
 180:	str	w10, [sp, #4]
 184:	ldr	w10, [sp, #4]
 188:	ldr	x8, [sp, #16]
 18c:	str	w10, [x8]
 190:	ldr	x8, [sp, #8]
 194:	add	x9, x8, #0x1
 198:	str	x9, [sp, #8]
 19c:	ldrb	w10, [x8]
 1a0:	str	w10, [sp, #4]
 1a4:	ldr	w10, [sp, #4]
 1a8:	ldr	x8, [sp, #8]
 1ac:	add	x9, x8, #0x1
 1b0:	str	x9, [sp, #8]
 1b4:	ldrb	w11, [x8]
 1b8:	orr	w10, w11, w10, lsl #8
 1bc:	str	w10, [sp, #4]
 1c0:	ldr	w10, [sp, #4]
 1c4:	ldr	x8, [sp, #16]
 1c8:	strh	w10, [x8, #4]
 1cc:	ldr	x8, [sp, #8]
 1d0:	add	x9, x8, #0x1
 1d4:	str	x9, [sp, #8]
 1d8:	ldrb	w10, [x8]
 1dc:	str	w10, [sp, #4]
 1e0:	ldr	w10, [sp, #4]
 1e4:	ldr	x8, [sp, #8]
 1e8:	add	x9, x8, #0x1
 1ec:	str	x9, [sp, #8]
 1f0:	ldrb	w11, [x8]
 1f4:	orr	w10, w11, w10, lsl #8
 1f8:	str	w10, [sp, #4]
 1fc:	ldr	w10, [sp, #4]
 200:	ldr	x8, [sp, #16]
 204:	strh	w10, [x8, #6]
 208:	ldr	x8, [sp, #8]
 20c:	add	x9, x8, #0x1
 210:	str	x9, [sp, #8]
 214:	ldrb	w10, [x8]
 218:	str	w10, [sp, #4]
 21c:	ldr	w10, [sp, #4]
 220:	ldr	x8, [sp, #8]
 224:	add	x9, x8, #0x1
 228:	str	x9, [sp, #8]
 22c:	ldrb	w11, [x8]
 230:	orr	w10, w11, w10, lsl #8
 234:	str	w10, [sp, #4]
 238:	ldr	w10, [sp, #4]
 23c:	ldr	x8, [sp, #16]
 240:	strh	w10, [x8, #8]
 244:	ldr	x8, [sp, #16]
 248:	ldr	x9, [sp, #8]
 24c:	ldr	w10, [x9]
 250:	stur	w10, [x8, #10]
 254:	ldrh	w10, [x9, #4]
 258:	strh	w10, [x8, #14]
 25c:	add	sp, sp, #0x20
 260:	ret

0000000000000264 <e2p_uuid2str>:
 264:	sub	sp, sp, #0x30
 268:	stp	x29, x30, [sp, #32]
 26c:	add	x29, sp, #0x20
 270:	str	x0, [sp, #16]
 274:	ldr	x0, [sp, #16]
 278:	bl	0 <e2p_is_null_uuid>
 27c:	cbz	w0, 290 <e2p_uuid2str+0x2c>
 280:	adrp	x8, 0 <e2p_is_null_uuid>
 284:	add	x8, x8, #0x0
 288:	stur	x8, [x29, #-8]
 28c:	b	2b0 <e2p_uuid2str+0x4c>
 290:	ldr	x0, [sp, #16]
 294:	adrp	x8, 0 <e2p_is_null_uuid>
 298:	add	x8, x8, #0x0
 29c:	mov	x1, x8
 2a0:	str	x8, [sp, #8]
 2a4:	bl	60 <e2p_uuid_to_str>
 2a8:	ldr	x8, [sp, #8]
 2ac:	stur	x8, [x29, #-8]
 2b0:	ldur	x0, [x29, #-8]
 2b4:	ldp	x29, x30, [sp, #32]
 2b8:	add	sp, sp, #0x30
 2bc:	ret

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	stur	w0, [x29, #-4]
  10:	ldur	w8, [x29, #-4]
  14:	cmp	w8, #0x0
  18:	cset	w8, lt  // lt = tstop
  1c:	tbnz	w8, #0, 50 <e2p_os2string+0x50>
  20:	ldur	w8, [x29, #-4]
  24:	cmp	w8, #0x4
  28:	b.gt	50 <e2p_os2string+0x50>
  2c:	ldursw	x8, [x29, #-4]
  30:	mov	x9, #0x8                   	// #8
  34:	mul	x8, x9, x8
  38:	adrp	x9, 0 <e2p_os2string>
  3c:	add	x9, x9, #0x0
  40:	add	x8, x9, x8
  44:	ldr	x8, [x8]
  48:	str	x8, [sp, #16]
  4c:	b	5c <e2p_os2string+0x5c>
  50:	adrp	x8, 0 <e2p_os2string>
  54:	add	x8, x8, #0x0
  58:	str	x8, [sp, #16]
  5c:	ldr	x0, [sp, #16]
  60:	bl	0 <strlen>
  64:	add	x0, x0, #0x1
  68:	bl	0 <malloc>
  6c:	str	x0, [sp, #8]
  70:	ldr	x8, [sp, #8]
  74:	cbz	x8, 84 <e2p_os2string+0x84>
  78:	ldr	x0, [sp, #8]
  7c:	ldr	x1, [sp, #16]
  80:	bl	0 <strcpy>
  84:	ldr	x0, [sp, #8]
  88:	ldp	x29, x30, [sp, #32]
  8c:	add	sp, sp, #0x30
  90:	ret

0000000000000094 <e2p_string2os>:
  94:	sub	sp, sp, #0x30
  98:	stp	x29, x30, [sp, #32]
  9c:	add	x29, sp, #0x20
  a0:	adrp	x8, 0 <e2p_os2string>
  a4:	add	x8, x8, #0x0
  a8:	str	x0, [sp, #16]
  ac:	str	wzr, [sp, #4]
  b0:	str	x8, [sp, #8]
  b4:	ldr	x8, [sp, #8]
  b8:	ldr	x8, [x8]
  bc:	cbz	x8, fc <e2p_string2os+0x68>
  c0:	ldr	x0, [sp, #16]
  c4:	ldr	x8, [sp, #8]
  c8:	ldr	x1, [x8]
  cc:	bl	0 <strcasecmp>
  d0:	cbnz	w0, e0 <e2p_string2os+0x4c>
  d4:	ldr	w8, [sp, #4]
  d8:	stur	w8, [x29, #-4]
  dc:	b	104 <e2p_string2os+0x70>
  e0:	ldr	x8, [sp, #8]
  e4:	add	x8, x8, #0x8
  e8:	str	x8, [sp, #8]
  ec:	ldr	w9, [sp, #4]
  f0:	add	w9, w9, #0x1
  f4:	str	w9, [sp, #4]
  f8:	b	b4 <e2p_string2os+0x20>
  fc:	mov	w8, #0xffffffff            	// #-1
 100:	stur	w8, [x29, #-4]
 104:	ldur	w0, [x29, #-4]
 108:	ldp	x29, x30, [sp, #32]
 10c:	add	sp, sp, #0x30
 110:	ret

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	sub	sp, sp, #0x10
   4:	mov	w8, #0xff000000            	// #-16777216
   8:	str	w0, [sp, #8]
   c:	str	w1, [sp, #4]
  10:	str	w8, [sp]
  14:	ldr	w8, [sp, #8]
  18:	cbnz	w8, 24 <e2p_percent+0x24>
  1c:	str	wzr, [sp, #12]
  20:	b	9c <e2p_percent+0x9c>
  24:	ldr	w8, [sp, #8]
  28:	mov	w9, #0x64                  	// #100
  2c:	sdiv	w10, w9, w8
  30:	mul	w8, w10, w8
  34:	subs	w8, w9, w8
  38:	cbnz	w8, 58 <e2p_percent+0x58>
  3c:	ldr	w8, [sp, #4]
  40:	ldr	w9, [sp, #8]
  44:	mov	w10, #0x64                  	// #100
  48:	sdiv	w9, w10, w9
  4c:	udiv	w8, w8, w9
  50:	str	w8, [sp, #12]
  54:	b	9c <e2p_percent+0x9c>
  58:	ldr	w8, [sp]
  5c:	ldr	w9, [sp, #4]
  60:	and	w8, w8, w9
  64:	cbz	w8, 84 <e2p_percent+0x84>
  68:	ldr	w8, [sp, #4]
  6c:	mov	w9, #0x64                  	// #100
  70:	udiv	w8, w8, w9
  74:	ldr	w9, [sp, #8]
  78:	mul	w8, w8, w9
  7c:	str	w8, [sp, #12]
  80:	b	9c <e2p_percent+0x9c>
  84:	ldr	w8, [sp, #4]
  88:	ldr	w9, [sp, #8]
  8c:	mul	w8, w8, w9
  90:	mov	w9, #0x64                  	// #100
  94:	udiv	w8, w8, w9
  98:	str	w8, [sp, #12]
  9c:	ldr	w0, [sp, #12]
  a0:	add	sp, sp, #0x10
  a4:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	adrp	x8, 0 <e2p_encmode2string>
  10:	add	x8, x8, #0x0
  14:	stur	w0, [x29, #-12]
  18:	str	x8, [sp, #8]
  1c:	ldr	x8, [sp, #8]
  20:	ldr	x8, [x8, #8]
  24:	cbz	x8, 5c <e2p_encmode2string+0x5c>
  28:	ldur	w8, [x29, #-12]
  2c:	ldr	x9, [sp, #8]
  30:	ldr	w10, [x9]
  34:	cmp	w8, w10
  38:	b.ne	4c <e2p_encmode2string+0x4c>  // b.any
  3c:	ldr	x8, [sp, #8]
  40:	ldr	x8, [x8, #8]
  44:	stur	x8, [x29, #-8]
  48:	b	84 <e2p_encmode2string+0x84>
  4c:	ldr	x8, [sp, #8]
  50:	add	x8, x8, #0x10
  54:	str	x8, [sp, #8]
  58:	b	1c <e2p_encmode2string+0x1c>
  5c:	ldur	w2, [x29, #-12]
  60:	adrp	x8, 0 <e2p_encmode2string>
  64:	add	x8, x8, #0x0
  68:	mov	x0, x8
  6c:	adrp	x1, 0 <e2p_encmode2string>
  70:	add	x1, x1, #0x0
  74:	str	x8, [sp]
  78:	bl	0 <sprintf>
  7c:	ldr	x8, [sp]
  80:	stur	x8, [x29, #-8]
  84:	ldur	x0, [x29, #-8]
  88:	ldp	x29, x30, [sp, #32]
  8c:	add	sp, sp, #0x30
  90:	ret

0000000000000094 <e2p_string2encmode>:
  94:	sub	sp, sp, #0x40
  98:	stp	x29, x30, [sp, #48]
  9c:	add	x29, sp, #0x30
  a0:	adrp	x8, 0 <e2p_encmode2string>
  a4:	add	x8, x8, #0x0
  a8:	stur	x0, [x29, #-16]
  ac:	str	x8, [sp, #24]
  b0:	ldr	x8, [sp, #24]
  b4:	ldr	x8, [x8, #8]
  b8:	cbz	x8, f0 <e2p_string2encmode+0x5c>
  bc:	ldur	x0, [x29, #-16]
  c0:	ldr	x8, [sp, #24]
  c4:	ldr	x1, [x8, #8]
  c8:	bl	0 <strcasecmp>
  cc:	cbnz	w0, e0 <e2p_string2encmode+0x4c>
  d0:	ldr	x8, [sp, #24]
  d4:	ldr	w9, [x8]
  d8:	stur	w9, [x29, #-4]
  dc:	b	18c <e2p_string2encmode+0xf8>
  e0:	ldr	x8, [sp, #24]
  e4:	add	x8, x8, #0x10
  e8:	str	x8, [sp, #24]
  ec:	b	b0 <e2p_string2encmode+0x1c>
  f0:	ldur	x0, [x29, #-16]
  f4:	adrp	x1, 0 <e2p_encmode2string>
  f8:	add	x1, x1, #0x0
  fc:	mov	x2, #0x9                   	// #9
 100:	bl	0 <strncasecmp>
 104:	cbz	w0, 114 <e2p_string2encmode+0x80>
 108:	mov	w8, #0xffffffff            	// #-1
 10c:	stur	w8, [x29, #-4]
 110:	b	18c <e2p_string2encmode+0xf8>
 114:	ldur	x8, [x29, #-16]
 118:	ldrb	w9, [x8, #9]
 11c:	cbnz	w9, 12c <e2p_string2encmode+0x98>
 120:	mov	w8, #0xffffffff            	// #-1
 124:	stur	w8, [x29, #-4]
 128:	b	18c <e2p_string2encmode+0xf8>
 12c:	ldur	x8, [x29, #-16]
 130:	add	x0, x8, #0x9
 134:	add	x1, sp, #0x10
 138:	mov	w2, #0xa                   	// #10
 13c:	bl	0 <strtol>
 140:	str	w0, [sp, #12]
 144:	ldr	w9, [sp, #12]
 148:	cmp	w9, #0xff
 14c:	b.gt	160 <e2p_string2encmode+0xcc>
 150:	ldr	w8, [sp, #12]
 154:	cmp	w8, #0x0
 158:	cset	w8, ge  // ge = tcont
 15c:	tbnz	w8, #0, 16c <e2p_string2encmode+0xd8>
 160:	mov	w8, #0xffffffff            	// #-1
 164:	stur	w8, [x29, #-4]
 168:	b	18c <e2p_string2encmode+0xf8>
 16c:	ldr	x8, [sp, #16]
 170:	ldrb	w9, [x8]
 174:	cbz	w9, 184 <e2p_string2encmode+0xf0>
 178:	mov	w8, #0xffffffff            	// #-1
 17c:	stur	w8, [x29, #-4]
 180:	b	18c <e2p_string2encmode+0xf8>
 184:	ldr	w8, [sp, #12]
 188:	stur	w8, [x29, #-4]
 18c:	ldur	w0, [x29, #-4]
 190:	ldp	x29, x30, [sp, #48]
 194:	add	sp, sp, #0x40
 198:	ret

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	sub	sp, sp, #0x60
   4:	stp	x29, x30, [sp, #80]
   8:	add	x29, sp, #0x50
   c:	mov	w8, #0x800                 	// #2048
  10:	mov	w9, #0xffffffff            	// #-1
  14:	stur	x0, [x29, #-16]
  18:	stur	x1, [x29, #-24]
  1c:	stur	wzr, [x29, #-36]
  20:	ldur	x0, [x29, #-16]
  24:	mov	w1, w8
  28:	str	w9, [sp, #12]
  2c:	bl	0 <open>
  30:	stur	w0, [x29, #-28]
  34:	ldur	w8, [x29, #-28]
  38:	ldr	w9, [sp, #12]
  3c:	cmp	w8, w9
  40:	b.ne	50 <fgetproject+0x50>  // b.any
  44:	mov	w8, #0xffffffff            	// #-1
  48:	stur	w8, [x29, #-4]
  4c:	b	b8 <fgetproject+0xb8>
  50:	ldur	w0, [x29, #-28]
  54:	mov	x1, #0x581f                	// #22559
  58:	movk	x1, #0x801c, lsl #16
  5c:	add	x2, sp, #0x10
  60:	bl	0 <ioctl>
  64:	stur	w0, [x29, #-32]
  68:	ldur	w8, [x29, #-32]
  6c:	cbnz	w8, 80 <fgetproject+0x80>
  70:	ldr	w8, [sp, #28]
  74:	mov	w9, w8
  78:	ldur	x10, [x29, #-24]
  7c:	str	x9, [x10]
  80:	bl	0 <__errno_location>
  84:	ldr	w8, [x0]
  88:	stur	w8, [x29, #-36]
  8c:	ldur	w0, [x29, #-28]
  90:	bl	0 <close>
  94:	ldur	w8, [x29, #-36]
  98:	cbz	w8, b0 <fgetproject+0xb0>
  9c:	ldur	w8, [x29, #-36]
  a0:	str	w8, [sp, #8]
  a4:	bl	0 <__errno_location>
  a8:	ldr	w8, [sp, #8]
  ac:	str	w8, [x0]
  b0:	ldur	w8, [x29, #-32]
  b4:	stur	w8, [x29, #-4]
  b8:	ldur	w0, [x29, #-4]
  bc:	ldp	x29, x30, [sp, #80]
  c0:	add	sp, sp, #0x60
  c4:	ret

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	sub	sp, sp, #0x60
   4:	stp	x29, x30, [sp, #80]
   8:	add	x29, sp, #0x50
   c:	mov	w8, #0x800                 	// #2048
  10:	mov	w9, #0xffffffff            	// #-1
  14:	stur	x0, [x29, #-16]
  18:	stur	x1, [x29, #-24]
  1c:	stur	wzr, [x29, #-36]
  20:	ldur	x0, [x29, #-16]
  24:	mov	w1, w8
  28:	str	w9, [sp, #12]
  2c:	bl	0 <open>
  30:	stur	w0, [x29, #-28]
  34:	ldur	w8, [x29, #-28]
  38:	ldr	w9, [sp, #12]
  3c:	cmp	w8, w9
  40:	b.ne	50 <fsetproject+0x50>  // b.any
  44:	mov	w8, #0xffffffff            	// #-1
  48:	stur	w8, [x29, #-4]
  4c:	b	f0 <fsetproject+0xf0>
  50:	ldur	w0, [x29, #-28]
  54:	mov	x1, #0x581f                	// #22559
  58:	movk	x1, #0x801c, lsl #16
  5c:	add	x2, sp, #0x10
  60:	bl	0 <ioctl>
  64:	stur	w0, [x29, #-32]
  68:	ldur	w8, [x29, #-32]
  6c:	mov	w9, #0xffffffff            	// #-1
  70:	cmp	w8, w9
  74:	b.ne	88 <fsetproject+0x88>  // b.any
  78:	bl	0 <__errno_location>
  7c:	ldr	w8, [x0]
  80:	stur	w8, [x29, #-36]
  84:	b	c4 <fsetproject+0xc4>
  88:	ldur	x8, [x29, #-24]
  8c:	add	x2, sp, #0x10
  90:	str	w8, [sp, #28]
  94:	ldur	w0, [x29, #-28]
  98:	mov	x1, #0x5820                	// #22560
  9c:	movk	x1, #0x401c, lsl #16
  a0:	bl	0 <ioctl>
  a4:	stur	w0, [x29, #-32]
  a8:	ldur	w8, [x29, #-32]
  ac:	mov	w9, #0xffffffff            	// #-1
  b0:	cmp	w8, w9
  b4:	b.ne	c4 <fsetproject+0xc4>  // b.any
  b8:	bl	0 <__errno_location>
  bc:	ldr	w8, [x0]
  c0:	stur	w8, [x29, #-36]
  c4:	ldur	w0, [x29, #-28]
  c8:	bl	0 <close>
  cc:	ldur	w8, [x29, #-36]
  d0:	cbz	w8, e8 <fsetproject+0xe8>
  d4:	ldur	w8, [x29, #-36]
  d8:	str	w8, [sp, #8]
  dc:	bl	0 <__errno_location>
  e0:	ldr	w8, [sp, #8]
  e4:	str	w8, [x0]
  e8:	ldur	w8, [x29, #-32]
  ec:	stur	w8, [x29, #-4]
  f0:	ldur	w0, [x29, #-4]
  f4:	ldp	x29, x30, [sp, #80]
  f8:	add	sp, sp, #0x60
  fc:	ret

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	str	x0, [sp, #16]
  10:	str	wzr, [sp, #12]
  14:	ldr	w8, [sp, #12]
  18:	mov	w9, w8
  1c:	cmp	x9, #0x2
  20:	b.cs	88 <e2p_str2encoding+0x88>  // b.hs, b.nlast
  24:	ldr	x0, [sp, #16]
  28:	ldr	w8, [sp, #12]
  2c:	mov	w9, w8
  30:	mov	x10, #0x10                  	// #16
  34:	mul	x9, x10, x9
  38:	adrp	x10, 0 <e2p_str2encoding>
  3c:	add	x10, x10, #0x0
  40:	add	x9, x10, x9
  44:	ldr	x1, [x9]
  48:	bl	0 <strcmp>
  4c:	cbnz	w0, 78 <e2p_str2encoding+0x78>
  50:	ldr	w8, [sp, #12]
  54:	mov	w9, w8
  58:	mov	x10, #0x10                  	// #16
  5c:	mul	x9, x10, x9
  60:	adrp	x10, 0 <e2p_str2encoding>
  64:	add	x10, x10, #0x0
  68:	add	x9, x10, x9
  6c:	ldrh	w8, [x9, #8]
  70:	stur	w8, [x29, #-4]
  74:	b	90 <e2p_str2encoding+0x90>
  78:	ldr	w8, [sp, #12]
  7c:	add	w8, w8, #0x1
  80:	str	w8, [sp, #12]
  84:	b	14 <e2p_str2encoding+0x14>
  88:	mov	w8, #0xffffffea            	// #-22
  8c:	stur	w8, [x29, #-4]
  90:	ldur	w0, [x29, #-4]
  94:	ldp	x29, x30, [sp, #32]
  98:	add	sp, sp, #0x30
  9c:	ret

00000000000000a0 <e2p_encoding2str>:
  a0:	sub	sp, sp, #0x30
  a4:	stp	x29, x30, [sp, #32]
  a8:	add	x29, sp, #0x20
  ac:	stur	w0, [x29, #-12]
  b0:	str	wzr, [sp, #16]
  b4:	ldr	w8, [sp, #16]
  b8:	mov	w9, w8
  bc:	cmp	x9, #0x2
  c0:	b.cs	128 <e2p_encoding2str+0x88>  // b.hs, b.nlast
  c4:	ldr	w8, [sp, #16]
  c8:	mov	w9, w8
  cc:	mov	x10, #0x10                  	// #16
  d0:	mul	x9, x10, x9
  d4:	adrp	x10, 0 <e2p_str2encoding>
  d8:	add	x10, x10, #0x0
  dc:	add	x9, x10, x9
  e0:	ldrh	w8, [x9, #8]
  e4:	ldur	w11, [x29, #-12]
  e8:	cmp	w8, w11
  ec:	b.ne	118 <e2p_encoding2str+0x78>  // b.any
  f0:	ldr	w8, [sp, #16]
  f4:	mov	w9, w8
  f8:	mov	x10, #0x10                  	// #16
  fc:	mul	x9, x10, x9
 100:	adrp	x10, 0 <e2p_str2encoding>
 104:	add	x10, x10, #0x0
 108:	add	x9, x10, x9
 10c:	ldr	x9, [x9]
 110:	stur	x9, [x29, #-8]
 114:	b	150 <e2p_encoding2str+0xb0>
 118:	ldr	w8, [sp, #16]
 11c:	add	w8, w8, #0x1
 120:	str	w8, [sp, #16]
 124:	b	b4 <e2p_encoding2str+0x14>
 128:	ldur	w2, [x29, #-12]
 12c:	adrp	x8, 0 <e2p_str2encoding>
 130:	add	x8, x8, #0x0
 134:	mov	x0, x8
 138:	adrp	x1, 0 <e2p_str2encoding>
 13c:	add	x1, x1, #0x0
 140:	str	x8, [sp, #8]
 144:	bl	0 <sprintf>
 148:	ldr	x8, [sp, #8]
 14c:	stur	x8, [x29, #-8]
 150:	ldur	x0, [x29, #-8]
 154:	ldp	x29, x30, [sp, #32]
 158:	add	sp, sp, #0x30
 15c:	ret

0000000000000160 <e2p_get_encoding_flags>:
 160:	sub	sp, sp, #0x10
 164:	str	w0, [sp, #8]
 168:	str	wzr, [sp, #4]
 16c:	ldr	w8, [sp, #4]
 170:	mov	w9, w8
 174:	cmp	x9, #0x2
 178:	b.cs	1e0 <e2p_get_encoding_flags+0x80>  // b.hs, b.nlast
 17c:	ldr	w8, [sp, #4]
 180:	mov	w9, w8
 184:	mov	x10, #0x10                  	// #16
 188:	mul	x9, x10, x9
 18c:	adrp	x10, 0 <e2p_str2encoding>
 190:	add	x10, x10, #0x0
 194:	add	x9, x10, x9
 198:	ldrh	w8, [x9, #8]
 19c:	ldr	w11, [sp, #8]
 1a0:	cmp	w8, w11
 1a4:	b.ne	1d0 <e2p_get_encoding_flags+0x70>  // b.any
 1a8:	ldr	w8, [sp, #4]
 1ac:	mov	w9, w8
 1b0:	mov	x10, #0x10                  	// #16
 1b4:	mul	x9, x10, x9
 1b8:	adrp	x10, 0 <e2p_str2encoding>
 1bc:	add	x10, x10, #0x0
 1c0:	add	x9, x10, x9
 1c4:	ldrh	w8, [x9, #10]
 1c8:	str	w8, [sp, #12]
 1cc:	b	1e4 <e2p_get_encoding_flags+0x84>
 1d0:	ldr	w8, [sp, #4]
 1d4:	add	w8, w8, #0x1
 1d8:	str	w8, [sp, #4]
 1dc:	b	16c <e2p_get_encoding_flags+0xc>
 1e0:	str	wzr, [sp, #12]
 1e4:	ldr	w0, [sp, #12]
 1e8:	add	sp, sp, #0x10
 1ec:	ret

00000000000001f0 <e2p_str2encoding_flags>:
 1f0:	sub	sp, sp, #0x40
 1f4:	stp	x29, x30, [sp, #48]
 1f8:	add	x29, sp, #0x30
 1fc:	adrp	x8, 0 <e2p_str2encoding>
 200:	add	x8, x8, #0x0
 204:	stur	w0, [x29, #-8]
 208:	stur	x1, [x29, #-16]
 20c:	str	x2, [sp, #24]
 210:	ldur	x0, [x29, #-16]
 214:	mov	x1, x8
 218:	bl	0 <strtok>
 21c:	str	x0, [sp, #16]
 220:	str	wzr, [sp]
 224:	ldur	w9, [x29, #-8]
 228:	cmp	w9, #0x1
 22c:	b.eq	23c <e2p_str2encoding_flags+0x4c>  // b.none
 230:	mov	w8, #0xffffffea            	// #-22
 234:	stur	w8, [x29, #-4]
 238:	b	338 <e2p_str2encoding_flags+0x148>
 23c:	ldr	x8, [sp, #16]
 240:	cbz	x8, 334 <e2p_str2encoding_flags+0x144>
 244:	str	wzr, [sp]
 248:	ldr	x1, [sp, #16]
 24c:	adrp	x0, 0 <e2p_str2encoding>
 250:	add	x0, x0, #0x0
 254:	mov	x2, #0x2                   	// #2
 258:	bl	0 <strncmp>
 25c:	cbnz	w0, 274 <e2p_str2encoding_flags+0x84>
 260:	mov	w8, #0x1                   	// #1
 264:	str	w8, [sp]
 268:	ldr	x9, [sp, #16]
 26c:	add	x9, x9, #0x2
 270:	str	x9, [sp, #16]
 274:	str	wzr, [sp, #4]
 278:	ldr	w8, [sp, #4]
 27c:	mov	w9, w8
 280:	cmp	x9, #0x1
 284:	b.cs	30c <e2p_str2encoding_flags+0x11c>  // b.hs, b.nlast
 288:	ldr	w8, [sp, #4]
 28c:	mov	w9, w8
 290:	mov	x10, #0x10                  	// #16
 294:	mul	x9, x10, x9
 298:	adrp	x10, 0 <e2p_str2encoding>
 29c:	add	x10, x10, #0x0
 2a0:	add	x9, x10, x9
 2a4:	str	x9, [sp, #8]
 2a8:	ldr	x9, [sp, #8]
 2ac:	ldr	x0, [x9, #8]
 2b0:	ldr	x1, [sp, #16]
 2b4:	bl	0 <strcmp>
 2b8:	cbnz	w0, 2fc <e2p_str2encoding_flags+0x10c>
 2bc:	ldr	w8, [sp]
 2c0:	cbz	w8, 2e0 <e2p_str2encoding_flags+0xf0>
 2c4:	ldr	x8, [sp, #8]
 2c8:	ldrh	w9, [x8]
 2cc:	ldr	x8, [sp, #24]
 2d0:	ldrh	w10, [x8]
 2d4:	bic	w9, w10, w9
 2d8:	strh	w9, [x8]
 2dc:	b	2f8 <e2p_str2encoding_flags+0x108>
 2e0:	ldr	x8, [sp, #8]
 2e4:	ldrh	w9, [x8]
 2e8:	ldr	x8, [sp, #24]
 2ec:	ldrh	w10, [x8]
 2f0:	orr	w9, w10, w9
 2f4:	strh	w9, [x8]
 2f8:	b	318 <e2p_str2encoding_flags+0x128>
 2fc:	ldr	w8, [sp, #4]
 300:	add	w8, w8, #0x1
 304:	str	w8, [sp, #4]
 308:	b	278 <e2p_str2encoding_flags+0x88>
 30c:	mov	w8, #0xffffffea            	// #-22
 310:	stur	w8, [x29, #-4]
 314:	b	338 <e2p_str2encoding_flags+0x148>
 318:	mov	x8, xzr
 31c:	mov	x0, x8
 320:	adrp	x1, 0 <e2p_str2encoding>
 324:	add	x1, x1, #0x0
 328:	bl	0 <strtok>
 32c:	str	x0, [sp, #16]
 330:	b	23c <e2p_str2encoding_flags+0x4c>
 334:	stur	wzr, [x29, #-4]
 338:	ldur	w0, [x29, #-4]
 33c:	ldp	x29, x30, [sp, #48]
 340:	add	sp, sp, #0x40
 344:	ret
