In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libsupc++.a_gcc_-Os:

array_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__array_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__array_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

atexit_arm.o:     file format elf64-littleaarch64


atexit_thread.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_thread_atexit:

0000000000000000 <__cxa_thread_atexit>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_thread_atexit_impl>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

bad_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9bad_alloc4whatEv:

0000000000000000 <_ZNKSt9bad_alloc4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9bad_alloc4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9bad_allocD2Ev:

0000000000000000 <_ZNSt9bad_allocD1Ev>:
   0:	adrp	x1, 0 <_ZNSt9bad_allocD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt9bad_allocD0Ev:

0000000000000000 <_ZNSt9bad_allocD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9bad_allocD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_array_length.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt16bad_array_length4whatEv:

0000000000000000 <_ZNKSt16bad_array_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt16bad_array_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD2Ev:

0000000000000000 <_ZNSt16bad_array_lengthD1Ev>:
   0:	adrp	x1, 0 <_ZNSt16bad_array_lengthD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9bad_allocD2Ev>

Disassembly of section .text._ZNSt16bad_array_lengthD0Ev:

0000000000000000 <_ZNSt16bad_array_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16bad_array_lengthD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text.unlikely.__cxa_throw_bad_array_length:

0000000000000000 <__cxa_throw_bad_array_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <__cxa_throw_bad_array_length>
  14:	adrp	x2, 0 <__cxa_throw_bad_array_length>
  18:	ldr	x1, [x1]
  1c:	ldr	x2, [x2]
  20:	add	x1, x1, #0x10
  24:	str	x1, [x0]
  28:	adrp	x1, 0 <__cxa_throw_bad_array_length>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

bad_array_new.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt20bad_array_new_length4whatEv:

0000000000000000 <_ZNKSt20bad_array_new_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt20bad_array_new_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthD2Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD1Ev>:
   0:	adrp	x1, 0 <_ZNSt20bad_array_new_lengthD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9bad_allocD2Ev>

Disassembly of section .text._ZNSt20bad_array_new_lengthD0Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt20bad_array_new_lengthD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_cast.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt8bad_cast4whatEv:

0000000000000000 <_ZNKSt8bad_cast4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt8bad_cast4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt8bad_castD2Ev:

0000000000000000 <_ZNSt8bad_castD1Ev>:
   0:	adrp	x1, 0 <_ZNSt8bad_castD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt8bad_castD0Ev:

0000000000000000 <_ZNSt8bad_castD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt8bad_castD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_typeid.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt10bad_typeid4whatEv:

0000000000000000 <_ZNKSt10bad_typeid4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt10bad_typeid4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt10bad_typeidD2Ev:

0000000000000000 <_ZNSt10bad_typeidD1Ev>:
   0:	adrp	x1, 0 <_ZNSt10bad_typeidD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt10bad_typeidD0Ev:

0000000000000000 <_ZNSt10bad_typeidD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt10bad_typeidD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x2
  10:	mov	x2, #0x1000000000          	// #68719476736
  14:	str	x2, [sp, #48]
  18:	ldr	x2, [x0]
  1c:	str	xzr, [sp, #40]
  20:	str	xzr, [sp, #56]
  24:	add	x3, sp, #0x28
  28:	ldr	x4, [x2, #48]
  2c:	ldr	x2, [x19]
  30:	blr	x4
  34:	ldr	w0, [sp, #48]
  38:	and	w0, w0, #0x6
  3c:	cmp	w0, #0x6
  40:	b.ne	5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>  // b.any
  44:	ldr	x0, [sp, #40]
  48:	str	x0, [x19]
  4c:	mov	w0, #0x1                   	// #1
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #64
  58:	ret
  5c:	mov	w0, #0x0                   	// #0
  60:	b	50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x50>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   0:	cmp	x4, x2
   4:	mov	w0, #0x6                   	// #6
   8:	csinc	w0, w0, wzr, eq  // eq = none
   c:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_infoeqERKS_.isra.0:

0000000000000000 <_ZNKSt9type_infoeqERKS_.isra.0>:
   0:	cmp	x0, x1
   4:	b.eq	30 <_ZNKSt9type_infoeqERKS_.isra.0+0x30>  // b.none
   8:	ldrb	w2, [x0]
   c:	cmp	w2, #0x2a
  10:	b.eq	38 <_ZNKSt9type_infoeqERKS_.isra.0+0x38>  // b.none
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	cset	w0, eq  // eq = none
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	mov	w0, #0x1                   	// #1
  34:	ret
  38:	mov	w0, #0x0                   	// #0
  3c:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x4, x6
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w20, w2
  14:	mov	x19, x7
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x3
  20:	mov	x21, x4
  24:	str	x23, [sp, #48]
  28:	ldr	x23, [x0, #8]
  2c:	b.ne	60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>  // b.any
  30:	ldr	x1, [x5, #8]
  34:	mov	x0, x23
  38:	bl	0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>
  3c:	tst	w0, #0xff
  40:	b.eq	60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>  // b.none
  44:	str	w20, [x19, #12]
  48:	mov	w0, #0x0                   	// #0
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldr	x23, [sp, #48]
  58:	ldp	x29, x30, [sp], #64
  5c:	ret
  60:	ldr	x1, [x22, #8]
  64:	mov	x0, x23
  68:	bl	0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>
  6c:	tst	w0, #0xff
  70:	b.eq	48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>  // b.none
  74:	mov	w0, #0x1                   	// #1
  78:	str	x21, [x19]
  7c:	str	w20, [x19, #8]
  80:	str	w0, [x19, #16]
  84:	b	48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	x0, [x0, #8]
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x2
  14:	ldr	x1, [x1, #8]
  18:	mov	x19, x3
  1c:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  20:	tst	w0, #0xff
  24:	b.eq	3c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x3c>  // b.none
  28:	mov	x1, #0x10                  	// #16
  2c:	str	x20, [x19]
  30:	str	x1, [x19, #16]
  34:	mov	w1, #0x6                   	// #6
  38:	str	w1, [x19, #8]
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	ldr	x0, [x0, #8]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	ldr	x1, [x1, #8]
  24:	mov	w22, w3
  28:	bl	0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>
  2c:	tst	w0, #0xff
  30:	b.ne	64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>  // b.any
  34:	cmp	w22, #0x3
  38:	b.hi	64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>  // b.pmore
  3c:	ldr	x0, [x19]
  40:	mov	x2, x21
  44:	mov	x1, x20
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x3, [x0, #40]
  50:	mov	x0, x19
  54:	ldp	x19, x20, [sp, #16]
  58:	mov	x16, x3
  5c:	ldp	x29, x30, [sp], #48
  60:	br	x16
  64:	ldp	x19, x20, [sp, #16]
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

del_op.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPv:

0000000000000000 <_ZdlPv>:
   0:	b	0 <free>

del_ops.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvm:

0000000000000000 <_ZdlPvm>:
   0:	b	0 <_ZdlPv>

del_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvRKSt9nothrow_t:

0000000000000000 <_ZdlPvRKSt9nothrow_t>:
   0:	b	0 <_ZdlPv>

del_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPv:

0000000000000000 <_ZdaPv>:
   0:	b	0 <_ZdlPv>

del_opvs.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvm:

0000000000000000 <_ZdaPvm>:
   0:	b	0 <_ZdaPv>

del_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvRKSt9nothrow_t:

0000000000000000 <_ZdaPvRKSt9nothrow_t>:
   0:	b	0 <_ZdaPv>

dyncast.o:     file format elf64-littleaarch64


Disassembly of section .text.__dynamic_cast:

0000000000000000 <__dynamic_cast>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x1
  10:	mov	x21, x2
  14:	ldr	x1, [x0]
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x19, x0
  20:	mov	x2, #0x1000000000          	// #68719476736
  24:	ldp	x0, x1, [x1, #-16]
  28:	str	x2, [sp, #72]
  2c:	stp	xzr, xzr, [sp, #56]
  30:	add	x4, x19, x0
  34:	ldr	x0, [x19, x0]
  38:	ldur	x0, [x0, #-8]
  3c:	cmp	x0, x1
  40:	b.eq	58 <__dynamic_cast+0x58>  // b.none
  44:	mov	x0, #0x0                   	// #0
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #80
  54:	ret
  58:	ldr	x1, [x0]
  5c:	mov	x20, x3
  60:	add	x7, sp, #0x38
  64:	mov	x6, x19
  68:	mov	x5, x22
  6c:	mov	x3, x21
  70:	ldr	x8, [x1, #56]
  74:	mov	w2, #0x6                   	// #6
  78:	mov	x1, x20
  7c:	blr	x8
  80:	ldr	x0, [sp, #56]
  84:	cbz	x0, 44 <__dynamic_cast+0x44>
  88:	ldr	w3, [sp, #72]
  8c:	and	w1, w3, #0x6
  90:	cmp	w1, #0x6
  94:	b.eq	48 <__dynamic_cast+0x48>  // b.none
  98:	ldp	w2, w1, [sp, #64]
  9c:	and	w2, w1, w2
  a0:	and	w2, w2, #0x6
  a4:	cmp	w2, #0x6
  a8:	b.eq	48 <__dynamic_cast+0x48>  // b.none
  ac:	mov	w2, #0x5                   	// #5
  b0:	and	w1, w1, w2
  b4:	cmp	w1, #0x4
  b8:	b.eq	44 <__dynamic_cast+0x44>  // b.none
  bc:	cbnz	w3, 44 <__dynamic_cast+0x44>
  c0:	tbnz	x20, #63, e8 <__dynamic_cast+0xe8>
  c4:	add	x3, x0, x20
  c8:	mov	w0, #0x6                   	// #6
  cc:	cmp	x19, x3
  d0:	csinc	w0, w0, wzr, eq  // eq = none
  d4:	and	w0, w0, #0x6
  d8:	cmp	w0, #0x6
  dc:	b.ne	44 <__dynamic_cast+0x44>  // b.any
  e0:	ldr	x0, [sp, #56]
  e4:	b	48 <__dynamic_cast+0x48>
  e8:	cmn	x20, #0x2
  ec:	b.eq	114 <__dynamic_cast+0x114>  // b.none
  f0:	ldr	x1, [x21]
  f4:	mov	x2, x0
  f8:	mov	x4, x19
  fc:	mov	x3, x22
 100:	mov	x0, x21
 104:	ldr	x5, [x1, #64]
 108:	mov	x1, x20
 10c:	blr	x5
 110:	b	d4 <__dynamic_cast+0xd4>
 114:	mov	w0, #0x1                   	// #1
 118:	b	d4 <__dynamic_cast+0xd4>

eh_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK9__gnu_cxx24__concurrence_lock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx7__mutex4lockEv:

0000000000000000 <_ZN9__gnu_cxx7__mutex4lockEv>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbz	x1, 50 <_ZN9__gnu_cxx7__mutex4lockEv+0x50>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <pthread_mutex_lock>
  18:	cbz	w0, 48 <_ZN9__gnu_cxx7__mutex4lockEv+0x48>
  1c:	mov	x0, #0x8                   	// #8
  20:	bl	0 <_ZN9__gnu_cxx7__mutex4lockEv>
  24:	adrp	x1, 0 <_ZN9__gnu_cxx7__mutex4lockEv>
  28:	adrp	x2, 0 <_ZN9__gnu_cxx7__mutex4lockEv>
  2c:	ldr	x1, [x1]
  30:	ldr	x2, [x2]
  34:	add	x1, x1, #0x10
  38:	str	x1, [x0]
  3c:	adrp	x1, 0 <_ZN9__gnu_cxx7__mutex4lockEv>
  40:	ldr	x1, [x1]
  44:	bl	0 <__cxa_throw>
  48:	ldp	x29, x30, [sp], #16
  4c:	ret
  50:	ret

Disassembly of section .text._ZN9__gnu_cxx13__scoped_lockD2Ev:

0000000000000000 <_ZN9__gnu_cxx13__scoped_lockD1Ev>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbz	x1, 64 <_ZN9__gnu_cxx13__scoped_lockD1Ev+0x64>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	ldr	x0, [x0]
  18:	bl	0 <pthread_mutex_unlock>
  1c:	cbz	w0, 5c <_ZN9__gnu_cxx13__scoped_lockD1Ev+0x5c>
  20:	mov	x0, #0x8                   	// #8
  24:	bl	0 <_ZN9__gnu_cxx13__scoped_lockD1Ev>
  28:	adrp	x1, 0 <_ZN9__gnu_cxx13__scoped_lockD1Ev>
  2c:	adrp	x2, 0 <_ZN9__gnu_cxx13__scoped_lockD1Ev>
  30:	ldr	x1, [x1]
  34:	ldr	x2, [x2]
  38:	add	x1, x1, #0x10
  3c:	str	x1, [x0]
  40:	adrp	x1, 0 <_ZN9__gnu_cxx13__scoped_lockD1Ev>
  44:	ldr	x1, [x1]
  48:	bl	0 <__cxa_throw>
  4c:	cmn	x1, #0x1
  50:	b.eq	58 <_ZN9__gnu_cxx13__scoped_lockD1Ev+0x58>  // b.none
  54:	bl	0 <_Unwind_Resume>
  58:	bl	0 <__cxa_call_unexpected>
  5c:	ldp	x29, x30, [sp], #16
  60:	ret
  64:	ret

Disassembly of section .text._ZN12_GLOBAL__N_14pool4freeEPv.constprop.0:

0000000000000000 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	str	x21, [sp, #32]
  14:	adrp	x21, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  18:	add	x19, x21, #0x0
  1c:	str	x19, [sp, #56]
  20:	mov	x0, x19
  24:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  28:	sub	x2, x20, #0x10
  2c:	ldr	x0, [x19, #48]
  30:	cbz	x0, 44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x44>
  34:	ldur	x1, [x20, #-16]
  38:	add	x3, x2, x1
  3c:	cmp	x0, x3
  40:	b.ls	68 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>  // b.plast
  44:	add	x21, x21, #0x0
  48:	stur	x0, [x20, #-8]
  4c:	str	x2, [x21, #48]
  50:	add	x0, sp, #0x38
  54:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldr	x21, [sp, #32]
  60:	ldp	x29, x30, [sp], #64
  64:	ret
  68:	b.ne	84 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x84>  // b.any
  6c:	ldr	x3, [x0, #8]
  70:	ldr	x0, [x0]
  74:	add	x1, x0, x1
  78:	stp	x1, x3, [x20, #-16]
  7c:	str	x2, [x19, #48]
  80:	b	50 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
  84:	add	x19, x19, #0x30
  88:	ldr	x4, [x0, #8]
  8c:	cbz	x4, b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
  90:	cmp	x3, x4
  94:	b.cs	a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa4>  // b.hs, b.nlast
  98:	add	x19, x0, #0x8
  9c:	mov	x0, x4
  a0:	b	88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
  a4:	b.ne	b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>  // b.any
  a8:	ldp	x4, x3, [x3]
  ac:	str	x3, [x0, #8]
  b0:	add	x1, x1, x4
  b4:	ldr	x0, [x19]
  b8:	ldr	x3, [x0]
  bc:	add	x4, x0, x3
  c0:	cmp	x2, x4
  c4:	b.ne	d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xd4>  // b.any
  c8:	add	x1, x3, x1
  cc:	str	x1, [x0]
  d0:	b	50 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
  d4:	ldr	x0, [x0, #8]
  d8:	stp	x1, x0, [x20, #-16]
  dc:	ldr	x0, [x19]
  e0:	str	x2, [x0, #8]
  e4:	b	50 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>

Disassembly of section .text._ZN12_GLOBAL__N_14pool8allocateEm.constprop.0:

0000000000000000 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	adrp	x0, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  14:	add	x20, x0, #0x0
  18:	str	x20, [sp, #40]
  1c:	mov	x0, x20
  20:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  24:	mov	x0, x20
  28:	adds	x1, x19, #0x10
  2c:	mov	x19, #0x10                  	// #16
  30:	csel	x1, x1, x19, cc  // cc = lo, ul, last
  34:	add	x1, x1, #0xf
  38:	ldr	x19, [x0, #48]!
  3c:	and	x1, x1, #0xfffffffffffffff0
  40:	cbz	x19, 78 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x78>
  44:	ldp	x2, x3, [x19]
  48:	cmp	x1, x2
  4c:	b.ls	90 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x90>  // b.plast
  50:	add	x0, x19, #0x8
  54:	mov	x19, x3
  58:	b	40 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x40>
  5c:	add	x4, x19, x1
  60:	str	x3, [x4, #8]
  64:	str	x2, [x19, x1]
  68:	ldr	x19, [x0]
  6c:	str	x1, [x19]
  70:	str	x4, [x0]
  74:	add	x19, x19, #0x10
  78:	add	x0, sp, #0x28
  7c:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  80:	mov	x0, x19
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #48
  8c:	ret
  90:	sub	x2, x2, x1
  94:	cmp	x2, #0xf
  98:	b.hi	5c <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x5c>  // b.pmore
  9c:	str	x3, [x0]
  a0:	b	74 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x74>

Disassembly of section .text._ZN9__gnu_cxx9__freeresEv:

0000000000000000 <_ZN9__gnu_cxx9__freeresEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <_ZN9__gnu_cxx9__freeresEv>
  10:	add	x19, x19, #0x0
  14:	ldr	x0, [x19, #56]
  18:	cbz	x0, 24 <_ZN9__gnu_cxx9__freeresEv+0x24>
  1c:	bl	0 <free>
  20:	str	xzr, [x19, #56]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text.__cxa_allocate_exception:

0000000000000000 <__cxa_allocate_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	add	x19, x0, #0x80
  10:	mov	x0, x19
  14:	bl	0 <malloc>
  18:	cbnz	x0, 30 <__cxa_allocate_exception+0x30>
  1c:	mov	x0, x19
  20:	bl	0 <__cxa_allocate_exception>
  24:	mov	x3, x0
  28:	cbnz	x0, 34 <__cxa_allocate_exception+0x34>
  2c:	bl	0 <_ZSt9terminatev>
  30:	mov	x3, x0
  34:	mov	x0, x3
  38:	mov	x2, #0x80                  	// #128
  3c:	mov	w1, #0x0                   	// #0
  40:	bl	0 <memset>
  44:	add	x0, x0, #0x80
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

Disassembly of section .text.__cxa_free_exception:

0000000000000000 <__cxa_free_exception>:
   0:	adrp	x2, 0 <__cxa_free_exception>
   4:	add	x2, x2, #0x0
   8:	sub	x0, x0, #0x80
   c:	ldr	x1, [x2, #56]
  10:	cmp	x0, x1
  14:	b.ls	3c <__cxa_free_exception+0x3c>  // b.plast
  18:	ldr	x2, [x2, #64]
  1c:	add	x1, x1, x2
  20:	cmp	x0, x1
  24:	b.cs	3c <__cxa_free_exception+0x3c>  // b.hs, b.nlast
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <__cxa_free_exception>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	b	0 <free>

Disassembly of section .text.__cxa_allocate_dependent_exception:

0000000000000000 <__cxa_allocate_dependent_exception>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x70                  	// #112
   8:	mov	x29, sp
   c:	bl	0 <malloc>
  10:	cbnz	x0, 24 <__cxa_allocate_dependent_exception+0x24>
  14:	mov	x0, #0x70                  	// #112
  18:	bl	0 <__cxa_allocate_dependent_exception>
  1c:	cbnz	x0, 24 <__cxa_allocate_dependent_exception+0x24>
  20:	bl	0 <_ZSt9terminatev>
  24:	stp	xzr, xzr, [x0]
  28:	stp	xzr, xzr, [x0, #16]
  2c:	stp	xzr, xzr, [x0, #32]
  30:	stp	xzr, xzr, [x0, #48]
  34:	stp	xzr, xzr, [x0, #64]
  38:	stp	xzr, xzr, [x0, #80]
  3c:	stp	xzr, xzr, [x0, #96]
  40:	ldp	x29, x30, [sp], #16
  44:	ret

Disassembly of section .text.__cxa_free_dependent_exception:

0000000000000000 <__cxa_free_dependent_exception>:
   0:	adrp	x3, 0 <__cxa_free_dependent_exception>
   4:	add	x3, x3, #0x0
   8:	mov	x1, x0
   c:	ldr	x2, [x3, #56]
  10:	cmp	x0, x2
  14:	b.ls	3c <__cxa_free_dependent_exception+0x3c>  // b.plast
  18:	ldr	x3, [x3, #64]
  1c:	add	x2, x2, x3
  20:	cmp	x0, x2
  24:	b.cs	3c <__cxa_free_dependent_exception+0x3c>  // b.hs, b.nlast
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <__cxa_free_dependent_exception>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	mov	x0, x1
  40:	b	0 <free>

Disassembly of section .text.startup._GLOBAL__sub_I_eh_alloc.cc:

0000000000000000 <_GLOBAL__sub_I_eh_alloc.cc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <_GLOBAL__sub_I_eh_alloc.cc>
  10:	add	x19, x19, #0x0
  14:	mov	x20, #0x1c00                	// #7168
  18:	movk	x20, #0x1, lsl #16
  1c:	mov	x0, x20
  20:	stp	xzr, xzr, [x19]
  24:	stp	xzr, xzr, [x19, #16]
  28:	stp	xzr, xzr, [x19, #32]
  2c:	str	x20, [x19, #64]
  30:	bl	0 <malloc>
  34:	str	x0, [x19, #56]
  38:	cbnz	x0, 50 <_GLOBAL__sub_I_eh_alloc.cc+0x50>
  3c:	str	xzr, [x19, #48]
  40:	str	xzr, [x19, #64]
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	stp	x20, xzr, [x0]
  54:	str	x0, [x19, #48]
  58:	b	44 <_GLOBAL__sub_I_eh_alloc.cc+0x44>

eh_arm.o:     file format elf64-littleaarch64


eh_aux_runtime.o:     file format elf64-littleaarch64


Disassembly of section .text.unlikely.__cxa_bad_cast:

0000000000000000 <__cxa_bad_cast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <_ZTVSt8bad_cast>
  14:	adrp	x2, 0 <_ZNSt8bad_castD1Ev>
  18:	ldr	x1, [x1]
  1c:	ldr	x2, [x2]
  20:	add	x1, x1, #0x10
  24:	str	x1, [x0]
  28:	adrp	x1, 0 <_ZTISt8bad_cast>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.unlikely.__cxa_bad_typeid:

0000000000000000 <__cxa_bad_typeid>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <_ZTVSt10bad_typeid>
  14:	adrp	x2, 0 <_ZNSt10bad_typeidD1Ev>
  18:	ldr	x1, [x1]
  1c:	ldr	x2, [x2]
  20:	add	x1, x1, #0x10
  24:	str	x1, [x0]
  28:	adrp	x1, 0 <_ZTISt10bad_typeid>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.unlikely.__cxa_throw_bad_array_new_length:

0000000000000000 <__cxa_throw_bad_array_new_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <_ZTVSt20bad_array_new_length>
  14:	adrp	x2, 0 <_ZNSt20bad_array_new_lengthD1Ev>
  18:	ldr	x1, [x1]
  1c:	ldr	x2, [x2]
  20:	add	x1, x1, #0x10
  24:	str	x1, [x0]
  28:	adrp	x1, 0 <_ZTISt20bad_array_new_length>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

eh_call.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_call_terminate:

0000000000000000 <__cxa_call_terminate>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	cbz	x0, 40 <__cxa_call_terminate+0x40>
  10:	mov	x19, x0
  14:	bl	0 <__cxa_begin_catch>
  18:	mov	x1, #0xd500                	// #54528
  1c:	movk	x1, #0xbcd4, lsl #16
  20:	ldr	x0, [x19]
  24:	movk	x1, #0xaabc, lsl #32
  28:	movk	x1, #0xb8b1, lsl #48
  2c:	add	x0, x0, x1
  30:	cmp	x0, #0x1
  34:	b.hi	40 <__cxa_call_terminate+0x40>  // b.pmore
  38:	ldur	x0, [x19, #-56]
  3c:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
  40:	bl	0 <_ZSt9terminatev>

eh_catch.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_exception_ptr:

0000000000000000 <__cxa_get_exception_ptr>:
   0:	ldur	x0, [x0, #-8]
   4:	ret

Disassembly of section .text.__cxa_begin_catch:

0000000000000000 <__cxa_begin_catch>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals>
  14:	mov	x1, x0
  18:	mov	x2, x19
  1c:	mov	x4, #0xd500                	// #54528
  20:	movk	x4, #0xbcd4, lsl #16
  24:	movk	x4, #0xaabc, lsl #32
  28:	ldr	x3, [x2], #-80
  2c:	movk	x4, #0xb8b1, lsl #48
  30:	ldr	x0, [x0]
  34:	add	x3, x3, x4
  38:	cmp	x3, #0x1
  3c:	b.ls	58 <__cxa_begin_catch+0x58>  // b.plast
  40:	cbz	x0, 48 <__cxa_begin_catch+0x48>
  44:	bl	0 <_ZSt9terminatev>
  48:	str	x2, [x1]
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	ldur	w3, [x19, #-40]
  5c:	mov	w4, #0x1                   	// #1
  60:	cmp	w3, #0x0
  64:	sub	w4, w4, w3
  68:	csinc	w3, w4, w3, lt  // lt = tstop
  6c:	stur	w3, [x19, #-40]
  70:	ldr	w3, [x1, #8]
  74:	cmp	x0, x2
  78:	sub	w3, w3, #0x1
  7c:	str	w3, [x1, #8]
  80:	b.eq	8c <__cxa_begin_catch+0x8c>  // b.none
  84:	stur	x0, [x19, #-48]
  88:	str	x2, [x1]
  8c:	ldur	x0, [x19, #-8]
  90:	b	4c <__cxa_begin_catch+0x4c>

Disassembly of section .text.__cxa_end_catch:

0000000000000000 <__cxa_end_catch>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals_fast>
   c:	ldr	x2, [x0]
  10:	cbz	x2, 60 <__cxa_end_catch+0x60>
  14:	mov	x3, #0xd500                	// #54528
  18:	ldr	x1, [x2, #80]
  1c:	movk	x3, #0xbcd4, lsl #16
  20:	movk	x3, #0xaabc, lsl #32
  24:	movk	x3, #0xb8b1, lsl #48
  28:	add	x1, x1, x3
  2c:	cmp	x1, #0x1
  30:	b.ls	44 <__cxa_end_catch+0x44>  // b.plast
  34:	str	xzr, [x0]
  38:	ldp	x29, x30, [sp], #16
  3c:	add	x0, x2, #0x50
  40:	b	0 <_Unwind_DeleteException>
  44:	ldr	w1, [x2, #40]
  48:	tbz	w1, #31, 68 <__cxa_end_catch+0x68>
  4c:	adds	w1, w1, #0x1
  50:	b.ne	5c <__cxa_end_catch+0x5c>  // b.any
  54:	ldr	x3, [x2, #32]
  58:	str	x3, [x0]
  5c:	str	w1, [x2, #40]
  60:	ldp	x29, x30, [sp], #16
  64:	ret
  68:	subs	w1, w1, #0x1
  6c:	b.ne	7c <__cxa_end_catch+0x7c>  // b.any
  70:	ldr	x1, [x2, #32]
  74:	str	x1, [x0]
  78:	b	38 <__cxa_end_catch+0x38>
  7c:	cmn	w1, #0x1
  80:	b.ne	5c <__cxa_end_catch+0x5c>  // b.any
  84:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZSt18uncaught_exceptionv:

0000000000000000 <_ZSt18uncaught_exceptionv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	cmp	w0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	ret

Disassembly of section .text._ZSt19uncaught_exceptionsv:

0000000000000000 <_ZSt19uncaught_exceptionsv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	ret

eh_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionD2Ev:

0000000000000000 <_ZNSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZNSt13bad_exceptionD2Ev:

0000000000000000 <_ZNSt13bad_exceptionD1Ev>:
   0:	adrp	x1, 0 <_ZNSt13bad_exceptionD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt13bad_exceptionD1Ev>

Disassembly of section .text._ZNKSt9exception4whatEv:

0000000000000000 <_ZNKSt9exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNKSt13bad_exception4whatEv:

0000000000000000 <_ZNKSt13bad_exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt13bad_exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9exceptionD0Ev:

0000000000000000 <_ZNSt9exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNSt13bad_exceptionD0Ev:

0000000000000000 <_ZNSt13bad_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt13bad_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD2Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD0Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv115__forced_unwindD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD0Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZGTtNKSt9exceptionD1Ev:

0000000000000000 <_ZGTtNKSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt9exception4whatEv:

0000000000000000 <_ZGTtNKSt9exception4whatEv>:
   0:	b	0 <_ZGTtNKSt9exception4whatEv>

Disassembly of section .text._ZGTtNKSt13bad_exceptionD1Ev:

0000000000000000 <_ZGTtNKSt13bad_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt13bad_exception4whatEv:

0000000000000000 <_ZGTtNKSt13bad_exception4whatEv>:
   0:	b	0 <_ZGTtNKSt13bad_exception4whatEv>

eh_globals.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_globals_fast:

0000000000000000 <__cxa_get_globals_fast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <__cxa_get_globals_fast>
   8:	ldr	x1, [x0]
   c:	add	x0, x0, #0x0
  10:	blr	x1
  14:	mrs	x1, tpidr_el0
  18:	mov	x29, sp
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

Disassembly of section .text.__cxa_get_globals:

0000000000000000 <__cxa_get_globals>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <__cxa_get_globals>
   8:	ldr	x1, [x0]
   c:	add	x0, x0, #0x0
  10:	blr	x1
  14:	mrs	x1, tpidr_el0
  18:	mov	x29, sp
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

eh_personality.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL12read_uleb128PKhPm:

0000000000000000 <_ZL12read_uleb128PKhPm>:
   0:	mov	x2, #0x0                   	// #0
   4:	mov	w3, #0x0                   	// #0
   8:	ldrb	w5, [x0], #1
   c:	and	x4, x5, #0x7f
  10:	lsl	x4, x4, x3
  14:	add	w3, w3, #0x7
  18:	orr	x2, x2, x4
  1c:	tbnz	w5, #7, 8 <_ZL12read_uleb128PKhPm+0x8>
  20:	str	x2, [x1]
  24:	ret

Disassembly of section .text._ZL12read_sleb128PKhPl:

0000000000000000 <_ZL12read_sleb128PKhPl>:
   0:	mov	x2, #0x0                   	// #0
   4:	mov	w3, #0x0                   	// #0
   8:	ldrb	w4, [x0], #1
   c:	and	x5, x4, #0x7f
  10:	lsl	x5, x5, x3
  14:	add	w3, w3, #0x7
  18:	orr	x2, x2, x5
  1c:	tbnz	w4, #7, 8 <_ZL12read_sleb128PKhPl+0x8>
  20:	cmp	w3, #0x3f
  24:	b.hi	38 <_ZL12read_sleb128PKhPl+0x38>  // b.pmore
  28:	tbz	w4, #6, 38 <_ZL12read_sleb128PKhPl+0x38>
  2c:	mov	x4, #0xffffffffffffffff    	// #-1
  30:	lsl	x3, x4, x3
  34:	orr	x2, x2, x3
  38:	str	x2, [x1]
  3c:	ret

Disassembly of section .text._ZL16get_adjusted_ptrPKSt9type_infoS1_PPv:

0000000000000000 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x21, [sp, #32]
   c:	mov	x21, x0
  10:	ldr	x0, [x2]
  14:	str	x0, [sp, #56]
  18:	ldr	x0, [x1]
  1c:	stp	x19, x20, [sp, #16]
  20:	mov	x19, x1
  24:	mov	x20, x2
  28:	ldr	x1, [x0, #16]
  2c:	mov	x0, x19
  30:	blr	x1
  34:	tst	w0, #0xff
  38:	b.eq	48 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x48>  // b.none
  3c:	ldr	x0, [sp, #56]
  40:	ldr	x0, [x0]
  44:	str	x0, [sp, #56]
  48:	ldr	x0, [x21]
  4c:	add	x2, sp, #0x38
  50:	mov	x1, x19
  54:	mov	w3, #0x1                   	// #1
  58:	ldr	x4, [x0, #32]
  5c:	mov	x0, x21
  60:	blr	x4
  64:	tst	w0, #0xff
  68:	b.eq	74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>  // b.none
  6c:	ldr	x1, [sp, #56]
  70:	str	x1, [x20]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldr	x21, [sp, #32]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret

Disassembly of section .text._ZL28read_encoded_value_with_basehmPKhPm:

0000000000000000 <_ZL28read_encoded_value_with_basehmPKhPm>:
   0:	and	w8, w0, #0xff
   4:	mov	x6, x2
   8:	mov	x9, x3
   c:	cmp	w8, #0x50
  10:	b.ne	28 <_ZL28read_encoded_value_with_basehmPKhPm+0x28>  // b.any
  14:	add	x0, x2, #0x7
  18:	and	x0, x0, #0xfffffffffffffff8
  1c:	ldr	x4, [x0], #8
  20:	str	x4, [x3]
  24:	ret
  28:	stp	x29, x30, [sp, #-32]!
  2c:	mov	x7, x1
  30:	and	w1, w8, #0xf
  34:	mov	x29, sp
  38:	cmp	w1, #0xc
  3c:	b.hi	dc <_ZL28read_encoded_value_with_basehmPKhPm+0xdc>  // b.pmore
  40:	adrp	x0, 0 <_ZL28read_encoded_value_with_basehmPKhPm>
  44:	add	x0, x0, #0x0
  48:	ldrb	w0, [x0, w1, uxtw]
  4c:	adr	x1, 58 <_ZL28read_encoded_value_with_basehmPKhPm+0x58>
  50:	add	x0, x1, w0, sxtb #2
  54:	br	x0
  58:	add	x1, sp, #0x18
  5c:	mov	x0, x2
  60:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
  64:	ldr	x4, [sp, #24]
  68:	cbz	x4, 84 <_ZL28read_encoded_value_with_basehmPKhPm+0x84>
  6c:	and	w1, w8, #0x70
  70:	cmp	w1, #0x10
  74:	csel	x7, x6, x7, eq  // eq = none
  78:	add	x4, x4, x7
  7c:	tbz	w8, #7, 84 <_ZL28read_encoded_value_with_basehmPKhPm+0x84>
  80:	ldr	x4, [x4]
  84:	str	x4, [x9]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret
  90:	add	x1, sp, #0x18
  94:	mov	x0, x2
  98:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
  9c:	b	64 <_ZL28read_encoded_value_with_basehmPKhPm+0x64>
  a0:	mov	x0, x2
  a4:	ldrh	w4, [x0], #2
  a8:	b	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>
  ac:	mov	x0, x2
  b0:	ldr	w4, [x0], #4
  b4:	b	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>
  b8:	mov	x0, x2
  bc:	ldrsh	x4, [x0], #2
  c0:	b	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>
  c4:	mov	x0, x2
  c8:	ldrsw	x4, [x0], #4
  cc:	b	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>
  d0:	mov	x0, x2
  d4:	ldr	x4, [x0], #8
  d8:	b	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>
  dc:	bl	0 <abort>

Disassembly of section .text._ZL15get_ttype_entryP16lsda_header_infom:

0000000000000000 <_ZL15get_ttype_entryP16lsda_header_infom>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x5, x0
   8:	mov	x29, sp
   c:	ldrb	w0, [x0, #40]
  10:	cmp	w0, #0xff
  14:	b.eq	70 <_ZL15get_ttype_entryP16lsda_header_infom+0x70>  // b.none
  18:	and	w3, w0, #0x7
  1c:	cmp	w3, #0x4
  20:	b.hi	6c <_ZL15get_ttype_entryP16lsda_header_infom+0x6c>  // b.pmore
  24:	adrp	x2, 0 <_ZL15get_ttype_entryP16lsda_header_infom>
  28:	add	x2, x2, #0x0
  2c:	ldrb	w2, [x2, w3, uxtw]
  30:	adr	x3, 3c <_ZL15get_ttype_entryP16lsda_header_infom+0x3c>
  34:	add	x2, x3, w2, sxtb #2
  38:	br	x2
  3c:	mov	w3, #0x2                   	// #2
  40:	ldr	x2, [x5, #24]
  44:	mov	w4, w3
  48:	add	x3, sp, #0x18
  4c:	msub	x2, x4, x1, x2
  50:	ldr	x1, [x5, #16]
  54:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  58:	ldr	x0, [sp, #24]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	mov	w3, #0x4                   	// #4
  68:	b	40 <_ZL15get_ttype_entryP16lsda_header_infom+0x40>
  6c:	bl	0 <abort>
  70:	mov	w3, #0x0                   	// #0
  74:	b	40 <_ZL15get_ttype_entryP16lsda_header_infom+0x40>
  78:	mov	w3, #0x8                   	// #8
  7c:	b	40 <_ZL15get_ttype_entryP16lsda_header_infom+0x40>

Disassembly of section .text._ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl:

0000000000000000 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mvn	x3, x3
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x0
  14:	ldr	x19, [x0, #24]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x1
  20:	add	x22, sp, #0x48
  24:	add	x19, x19, x3
  28:	str	x23, [sp, #48]
  2c:	add	x23, sp, #0x58
  30:	str	x2, [sp, #72]
  34:	mov	x1, x23
  38:	mov	x0, x19
  3c:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  40:	mov	x19, x0
  44:	ldr	x1, [sp, #88]
  48:	cbz	x1, 7c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x7c>
  4c:	mov	x0, x20
  50:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  54:	mov	x2, x22
  58:	mov	x1, x21
  5c:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  60:	ands	w0, w0, #0xff
  64:	b.eq	34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>  // b.none
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldr	x23, [sp, #48]
  74:	ldp	x29, x30, [sp], #96
  78:	ret
  7c:	mov	w0, #0x0                   	// #0
  80:	b	68 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x68>

Disassembly of section .text._ZL21base_of_encoded_valuehP15_Unwind_Context:

0000000000000000 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   0:	and	w2, w0, #0xff
   4:	cmp	w2, #0xff
   8:	b.eq	50 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>  // b.none
   c:	mov	x0, x1
  10:	and	w1, w2, #0x70
  14:	cmp	w1, #0x30
  18:	b.eq	5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>  // b.none
  1c:	b.hi	40 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>  // b.pmore
  20:	cmp	w1, #0x20
  24:	b.eq	58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>  // b.none
  28:	b.hi	34 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>  // b.pmore
  2c:	tst	w2, #0x60
  30:	b.eq	50 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>  // b.none
  34:	stp	x29, x30, [sp, #-16]!
  38:	mov	x29, sp
  3c:	bl	0 <abort>
  40:	cmp	w1, #0x40
  44:	b.eq	60 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x60>  // b.none
  48:	cmp	w1, #0x50
  4c:	b.ne	34 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>  // b.any
  50:	mov	x0, #0x0                   	// #0
  54:	ret
  58:	b	0 <_Unwind_GetTextRelBase>
  5c:	b	0 <_Unwind_GetDataRelBase>
  60:	b	0 <_Unwind_GetRegionStart>

Disassembly of section .text._ZL18read_encoded_valueP15_Unwind_ContexthPKhPm:

0000000000000000 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x21, [sp, #32]
   c:	and	w21, w1, #0xff
  10:	mov	x1, x0
  14:	mov	w0, w21
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x19, x2
  20:	mov	x20, x3
  24:	bl	0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  28:	mov	x1, x0
  2c:	mov	x3, x20
  30:	mov	x2, x19
  34:	mov	w0, w21
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldr	x21, [sp, #32]
  40:	ldp	x29, x30, [sp], #48
  44:	b	0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>

Disassembly of section .text._ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info:

0000000000000000 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	str	x21, [sp, #32]
  18:	mov	x21, x0
  1c:	cbz	x0, 98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x98>
  20:	bl	0 <_Unwind_GetRegionStart>
  24:	mov	x2, x0
  28:	mov	x0, x19
  2c:	str	x2, [x20]
  30:	ldrb	w1, [x0], #1
  34:	cmp	w1, #0xff
  38:	b.eq	a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>  // b.none
  3c:	mov	x2, x0
  40:	add	x3, x20, #0x8
  44:	mov	x0, x21
  48:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  4c:	ldrb	w1, [x0], #1
  50:	strb	w1, [x20, #40]
  54:	cmp	w1, #0xff
  58:	add	x1, sp, #0x38
  5c:	b.eq	a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>  // b.none
  60:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  64:	ldr	x2, [sp, #56]
  68:	add	x2, x0, x2
  6c:	str	x2, [x20, #24]
  70:	ldrb	w2, [x0], #1
  74:	strb	w2, [x20, #41]
  78:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  7c:	ldr	x1, [sp, #56]
  80:	ldr	x21, [sp, #32]
  84:	add	x1, x0, x1
  88:	str	x1, [x20, #32]
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x29, x30, [sp], #64
  94:	ret
  98:	mov	x2, #0x0                   	// #0
  9c:	b	28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
  a0:	str	x2, [x20, #8]
  a4:	b	4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4c>
  a8:	str	xzr, [x20, #24]
  ac:	b	70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x70>

Disassembly of section .text.__gxx_personality_v0:

0000000000000000 <__gxx_personality_v0>:
   0:	stp	x29, x30, [sp, #-240]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	x21, x22, [sp, #32]
  14:	stp	x23, x24, [sp, #48]
  18:	stp	x25, x26, [sp, #64]
  1c:	stp	x27, x28, [sp, #80]
  20:	str	wzr, [sp, #148]
  24:	str	xzr, [sp, #152]
  28:	b.ne	3b0 <__gxx_personality_v0+0x3b0>  // b.any
  2c:	mov	x23, #0xd500                	// #54528
  30:	cmp	w1, #0x6
  34:	movk	x23, #0xbcd4, lsl #16
  38:	mov	w26, w1
  3c:	movk	x23, #0xaabc, lsl #32
  40:	mov	x19, x3
  44:	movk	x23, #0xb8b1, lsl #48
  48:	add	x23, x2, x23
  4c:	cset	w2, eq  // eq = none
  50:	cmp	x23, #0x1
  54:	cset	w1, ls  // ls = plast
  58:	mov	x20, x4
  5c:	ands	w1, w2, w1
  60:	str	w1, [sp, #120]
  64:	b.eq	94 <__gxx_personality_v0+0x94>  // b.none
  68:	ldp	x25, x21, [x3, #-24]
  6c:	mov	w1, #0x3                   	// #3
  70:	ldur	w22, [x3, #-36]
  74:	cmp	x21, #0x0
  78:	csel	w0, w0, w1, eq  // eq = none
  7c:	tbnz	w26, #3, 88 <__gxx_personality_v0+0x88>
  80:	cmp	x23, #0x1
  84:	b.ls	338 <__gxx_personality_v0+0x338>  // b.plast
  88:	cmp	w0, #0x1
  8c:	b.ne	328 <__gxx_personality_v0+0x328>  // b.any
  90:	bl	0 <_ZSt9terminatev>
  94:	mov	x0, x4
  98:	bl	0 <_Unwind_GetLanguageSpecificData>
  9c:	mov	x25, x0
  a0:	cbnz	x0, c4 <__gxx_personality_v0+0xc4>
  a4:	mov	w0, #0x8                   	// #8
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x21, x22, [sp, #32]
  b0:	ldp	x23, x24, [sp, #48]
  b4:	ldp	x25, x26, [sp, #64]
  b8:	ldp	x27, x28, [sp, #80]
  bc:	ldp	x29, x30, [sp], #240
  c0:	ret
  c4:	add	x27, sp, #0xc0
  c8:	mov	x1, x0
  cc:	mov	x2, x27
  d0:	mov	x0, x20
  d4:	bl	0 <__gxx_personality_v0>
  d8:	mov	x21, x0
  dc:	ldrb	w0, [sp, #232]
  e0:	mov	x1, x20
  e4:	add	x24, sp, #0xa0
  e8:	add	x28, sp, #0xb8
  ec:	bl	0 <__gxx_personality_v0>
  f0:	str	x0, [sp, #208]
  f4:	add	x1, sp, #0x94
  f8:	mov	x0, x20
  fc:	bl	0 <_Unwind_GetIPInfo>
 100:	ldr	w1, [sp, #148]
 104:	cmp	w1, #0x0
 108:	cset	x22, eq  // eq = none
 10c:	sub	x22, x0, x22
 110:	add	x0, sp, #0xa8
 114:	str	x0, [sp, #104]
 118:	add	x0, sp, #0xb0
 11c:	str	x0, [sp, #112]
 120:	ldr	x0, [sp, #224]
 124:	cmp	x0, x21
 128:	b.ls	2ec <__gxx_personality_v0+0x2ec>  // b.plast
 12c:	ldrb	w1, [sp, #233]
 130:	mov	x2, x21
 134:	mov	x3, x24
 138:	mov	x0, #0x0                   	// #0
 13c:	bl	0 <__gxx_personality_v0>
 140:	mov	x2, x0
 144:	ldrb	w1, [sp, #233]
 148:	mov	x0, #0x0                   	// #0
 14c:	ldr	x3, [sp, #104]
 150:	bl	0 <__gxx_personality_v0>
 154:	mov	x2, x0
 158:	ldrb	w1, [sp, #233]
 15c:	mov	x0, #0x0                   	// #0
 160:	ldr	x3, [sp, #112]
 164:	bl	0 <__gxx_personality_v0>
 168:	mov	x1, x28
 16c:	bl	0 <__gxx_personality_v0>
 170:	mov	x21, x0
 174:	ldr	x0, [sp, #160]
 178:	ldr	x1, [sp, #192]
 17c:	add	x1, x1, x0
 180:	cmp	x1, x22
 184:	b.ls	190 <__gxx_personality_v0+0x190>  // b.plast
 188:	ldr	x21, [sp, #224]
 18c:	b	120 <__gxx_personality_v0+0x120>
 190:	ldr	x0, [sp, #168]
 194:	add	x1, x1, x0
 198:	cmp	x1, x22
 19c:	b.ls	120 <__gxx_personality_v0+0x120>  // b.plast
 1a0:	ldr	x21, [sp, #176]
 1a4:	cbz	x21, 1b0 <__gxx_personality_v0+0x1b0>
 1a8:	ldr	x0, [sp, #200]
 1ac:	add	x21, x21, x0
 1b0:	ldr	x0, [sp, #184]
 1b4:	cbz	x0, 3cc <__gxx_personality_v0+0x3cc>
 1b8:	ldr	x24, [sp, #224]
 1bc:	cbz	x21, a4 <__gxx_personality_v0+0xa4>
 1c0:	sub	x0, x0, #0x1
 1c4:	adds	x24, x24, x0
 1c8:	b.eq	3c0 <__gxx_personality_v0+0x3c0>  // b.none
 1cc:	and	w0, w26, #0x8
 1d0:	str	w0, [sp, #124]
 1d4:	tbnz	w26, #3, 25c <__gxx_personality_v0+0x25c>
 1d8:	cmp	x23, #0x1
 1dc:	b.hi	268 <__gxx_personality_v0+0x268>  // b.pmore
 1e0:	ldr	x0, [x19]
 1e4:	tbz	w0, #0, 254 <__gxx_personality_v0+0x254>
 1e8:	ldur	x0, [x19, #-80]
 1ec:	ldur	x22, [x0, #-112]
 1f0:	str	x0, [sp, #152]
 1f4:	add	x0, sp, #0x98
 1f8:	str	x0, [sp, #136]
 1fc:	ldr	x1, [sp, #104]
 200:	mov	x0, x24
 204:	bl	0 <__gxx_personality_v0>
 208:	str	x0, [sp, #128]
 20c:	ldr	x1, [sp, #112]
 210:	bl	0 <__gxx_personality_v0>
 214:	ldr	x1, [sp, #168]
 218:	cmp	x1, #0x0
 21c:	cbz	x1, 2e0 <__gxx_personality_v0+0x2e0>
 220:	b.le	274 <__gxx_personality_v0+0x274>
 224:	mov	x0, x27
 228:	bl	0 <__gxx_personality_v0>
 22c:	cbz	x0, 248 <__gxx_personality_v0+0x248>
 230:	cbz	x22, 2a8 <__gxx_personality_v0+0x2a8>
 234:	ldr	x2, [sp, #136]
 238:	mov	x1, x22
 23c:	bl	0 <__gxx_personality_v0>
 240:	tst	w0, #0xff
 244:	b.eq	2a8 <__gxx_personality_v0+0x2a8>  // b.none
 248:	ldr	w22, [sp, #168]
 24c:	mov	w0, #0x3                   	// #3
 250:	b	2fc <__gxx_personality_v0+0x2fc>
 254:	add	x0, x19, #0x20
 258:	b	1ec <__gxx_personality_v0+0x1ec>
 25c:	adrp	x22, 0 <_ZTIN10__cxxabiv115__forced_unwindE>
 260:	ldr	x22, [x22]
 264:	b	1f4 <__gxx_personality_v0+0x1f4>
 268:	adrp	x22, 0 <_ZTIN10__cxxabiv119__foreign_exceptionE>
 26c:	ldr	x22, [x22]
 270:	b	1f4 <__gxx_personality_v0+0x1f4>
 274:	cbz	x22, 2bc <__gxx_personality_v0+0x2bc>
 278:	ldr	w0, [sp, #124]
 27c:	cbnz	w0, 2bc <__gxx_personality_v0+0x2bc>
 280:	cmp	x23, #0x1
 284:	b.hi	2bc <__gxx_personality_v0+0x2bc>  // b.pmore
 288:	ldr	x2, [sp, #152]
 28c:	mov	x3, x1
 290:	mov	x0, x27
 294:	mov	x1, x22
 298:	bl	0 <__gxx_personality_v0>
 29c:	and	w0, w0, #0xff
 2a0:	eor	w0, w0, #0x1
 2a4:	cbnz	w0, 248 <__gxx_personality_v0+0x248>
 2a8:	ldr	x0, [sp, #176]
 2ac:	cbz	x0, 3b8 <__gxx_personality_v0+0x3b8>
 2b0:	ldr	x1, [sp, #128]
 2b4:	add	x24, x1, x0
 2b8:	b	1fc <__gxx_personality_v0+0x1fc>
 2bc:	ldr	x2, [sp, #216]
 2c0:	mvn	x0, x1
 2c4:	mov	x1, x28
 2c8:	add	x0, x2, x0
 2cc:	bl	0 <__gxx_personality_v0>
 2d0:	ldr	x0, [sp, #184]
 2d4:	cmp	x0, #0x0
 2d8:	cset	w0, eq  // eq = none
 2dc:	b	2a4 <__gxx_personality_v0+0x2a4>
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	str	w0, [sp, #120]
 2e8:	b	2a8 <__gxx_personality_v0+0x2a8>
 2ec:	mov	w22, #0x0                   	// #0
 2f0:	mov	x21, #0x0                   	// #0
 2f4:	mov	x24, #0x0                   	// #0
 2f8:	mov	w0, #0x1                   	// #1
 2fc:	tbz	w26, #0, 7c <__gxx_personality_v0+0x7c>
 300:	cmp	w0, #0x2
 304:	b.eq	a4 <__gxx_personality_v0+0xa4>  // b.none
 308:	cmp	x23, #0x1
 30c:	b.hi	320 <__gxx_personality_v0+0x320>  // b.pmore
 310:	ldr	x0, [sp, #152]
 314:	stur	w22, [x19, #-36]
 318:	stp	x24, x25, [x19, #-32]
 31c:	stp	x21, x0, [x19, #-16]
 320:	mov	w0, #0x6                   	// #6
 324:	b	a8 <__gxx_personality_v0+0xa8>
 328:	tbz	w22, #31, 37c <__gxx_personality_v0+0x37c>
 32c:	bl	0 <_ZSt10unexpectedv>
 330:	bl	0 <__cxa_begin_catch>
 334:	b	90 <__gxx_personality_v0+0x90>
 338:	cmp	w0, #0x1
 33c:	b.ne	348 <__gxx_personality_v0+0x348>  // b.any
 340:	mov	x0, x19
 344:	bl	0 <__cxa_call_terminate>
 348:	tbz	w22, #31, 37c <__gxx_personality_v0+0x37c>
 34c:	add	x2, sp, #0xc0
 350:	mov	x1, x25
 354:	mov	x0, x20
 358:	bl	0 <__gxx_personality_v0>
 35c:	ldrb	w0, [sp, #232]
 360:	mov	x1, x20
 364:	bl	0 <__gxx_personality_v0>
 368:	str	x0, [sp, #208]
 36c:	ldrb	w0, [sp, #232]
 370:	mov	x1, x20
 374:	bl	0 <__gxx_personality_v0>
 378:	stur	x0, [x19, #-16]
 37c:	mov	x2, x19
 380:	mov	x0, x20
 384:	mov	w1, #0x0                   	// #0
 388:	bl	0 <_Unwind_SetGR>
 38c:	sxtw	x2, w22
 390:	mov	x0, x20
 394:	mov	w1, #0x1                   	// #1
 398:	bl	0 <_Unwind_SetGR>
 39c:	mov	x0, x20
 3a0:	mov	x1, x21
 3a4:	bl	0 <_Unwind_SetIP>
 3a8:	mov	w0, #0x7                   	// #7
 3ac:	b	a8 <__gxx_personality_v0+0xa8>
 3b0:	mov	w0, #0x3                   	// #3
 3b4:	b	a8 <__gxx_personality_v0+0xa8>
 3b8:	ldr	w0, [sp, #120]
 3bc:	cbz	w0, a4 <__gxx_personality_v0+0xa4>
 3c0:	mov	w22, #0x0                   	// #0
 3c4:	mov	w0, #0x2                   	// #2
 3c8:	b	2fc <__gxx_personality_v0+0x2fc>
 3cc:	cbz	x21, a4 <__gxx_personality_v0+0xa4>
 3d0:	mov	w22, #0x0                   	// #0
 3d4:	mov	x24, #0x0                   	// #0
 3d8:	b	3c4 <__gxx_personality_v0+0x3c4>

Disassembly of section .text.__cxa_call_unexpected:

0000000000000000 <__cxa_call_unexpected>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	str	x23, [sp, #48]
  18:	bl	0 <__cxa_begin_catch>
  1c:	ldp	x23, x0, [x19, #-24]
  20:	str	x0, [sp, #80]
  24:	ldur	x0, [x19, #-64]
  28:	ldur	w20, [x19, #-36]
  2c:	ldur	x22, [x19, #-56]
  30:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  34:	bl	0 <__cxa_begin_catch>
  38:	bl	0 <__cxa_get_globals_fast>
  3c:	ldr	x2, [x0]
  40:	ldr	x0, [x2, #80]
  44:	tbz	w0, #0, 64 <__cxa_call_unexpected+0x64>
  48:	ldr	x19, [x2]
  4c:	add	x21, sp, #0x40
  50:	mov	x2, x21
  54:	mov	x1, x23
  58:	mov	x0, #0x0                   	// #0
  5c:	bl	0 <__cxa_call_unexpected>
  60:	b	6c <__cxa_call_unexpected+0x6c>
  64:	add	x19, x2, #0x70
  68:	b	4c <__cxa_call_unexpected+0x4c>
  6c:	ldur	x1, [x19, #-112]
  70:	sxtw	x20, w20
  74:	mov	x3, x20
  78:	mov	x2, x19
  7c:	mov	x0, x21
  80:	bl	0 <__cxa_call_unexpected>
  84:	tst	w0, #0xff
  88:	b.eq	a4 <__cxa_call_unexpected+0xa4>  // b.none
  8c:	bl	0 <__cxa_rethrow>
  90:	mov	x19, x0
  94:	bl	0 <__cxa_end_catch>
  98:	bl	0 <__cxa_end_catch>
  9c:	mov	x0, x19
  a0:	bl	0 <_Unwind_Resume>
  a4:	adrp	x19, 0 <_ZTISt13bad_exception>
  a8:	mov	x3, x20
  ac:	mov	x0, x21
  b0:	mov	x2, #0x0                   	// #0
  b4:	ldr	x1, [x19]
  b8:	bl	0 <__cxa_call_unexpected>
  bc:	tst	w0, #0xff
  c0:	b.eq	ec <__cxa_call_unexpected+0xec>  // b.none
  c4:	mov	x0, #0x8                   	// #8
  c8:	bl	0 <__cxa_allocate_exception>
  cc:	adrp	x1, 0 <_ZTVSt13bad_exception>
  d0:	adrp	x2, 0 <_ZNSt13bad_exceptionD1Ev>
  d4:	ldr	x1, [x1]
  d8:	ldr	x2, [x2]
  dc:	add	x1, x1, #0x10
  e0:	str	x1, [x0]
  e4:	ldr	x1, [x19]
  e8:	bl	0 <__cxa_throw>
  ec:	mov	x0, x22
  f0:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_ptr.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv>:
   0:	ret

Disassembly of section .text._ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	ldur	x19, [x1, #-80]
  14:	b.ls	20 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x20>  // b.plast
  18:	ldur	x0, [x19, #-88]
  1c:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
  20:	sub	x0, x1, #0x50
  24:	bl	0 <__cxa_free_dependent_exception>
  28:	sub	x0, x19, #0x80
  2c:	ldaxr	w1, [x0]
  30:	sub	w1, w1, #0x1
  34:	stlxr	w2, w1, [x0]
  38:	cbnz	w2, 2c <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x2c>
  3c:	cbnz	w1, 60 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
  40:	ldur	x1, [x19, #-104]
  44:	cbz	x1, 50 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x50>
  48:	mov	x0, x19
  4c:	blr	x1
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	b	0 <__cxa_free_exception>
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1Ev>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr9_M_addrefEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv>:
   0:	ldr	x0, [x0]
   4:	cbz	x0, 1c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0x1c>
   8:	sub	x0, x0, #0x80
   c:	ldaxr	w1, [x0]
  10:	add	w1, w1, #0x1
  14:	stlxr	w2, w1, [x0]
  18:	cbnz	w2, c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0xc>
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EPv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EPv>:
   0:	str	x1, [x0]
   4:	b	0 <_ZNSt15__exception_ptr13exception_ptrC1EPv>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2ERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>:
   0:	ldr	x1, [x1]
   4:	str	x1, [x0]
   8:	b	0 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr10_M_releaseEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0]
  14:	cbz	x0, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  18:	sub	x1, x0, #0x80
  1c:	ldaxr	w2, [x1]
  20:	sub	w2, w2, #0x1
  24:	stlxr	w3, w2, [x1]
  28:	cbnz	w3, 1c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x1c>
  2c:	cbnz	w2, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  30:	ldur	x1, [x0, #-104]
  34:	cbz	x1, 40 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x40>
  38:	ldr	x0, [x19]
  3c:	blr	x1
  40:	ldr	x0, [x19]
  44:	bl	0 <__cxa_free_exception>
  48:	str	xzr, [x19]
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrD2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrD1Ev>:
   0:	b	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr6_M_getEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr6_M_getEv>:
   0:	ldr	x0, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr4swapERS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr4swapERS0_>:
   0:	ldr	x3, [x1]
   4:	ldr	x2, [x0]
   8:	str	x3, [x0]
   c:	str	x2, [x1]
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptraSERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	add	x20, sp, #0x28
  10:	mov	x19, x0
  14:	mov	x0, x20
  18:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  1c:	mov	x1, x19
  20:	mov	x0, x20
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  28:	mov	x0, x20
  2c:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  30:	mov	x0, x19
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrntEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrntEv>:
   0:	ldr	x0, [x0]
   4:	cmp	x0, #0x0
   8:	cset	w0, eq  // eq = none
   c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>:
   0:	ldr	x1, [x0]
   4:	adrp	x0, 0 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>
   8:	ldr	x0, [x0]
   c:	cmp	x1, #0x0
  10:	mov	x1, #0x0                   	// #0
  14:	csel	x0, x0, xzr, ne  // ne = any
  18:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv>:
   0:	ldr	x0, [x0]
   4:	ldur	x0, [x0, #-112]
   8:	ret

Disassembly of section .text._ZNSt15__exception_ptreqERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptreqERKNS_13exception_ptrES2_>:
   0:	ldr	x2, [x0]
   4:	ldr	x0, [x1]
   8:	cmp	x2, x0
   c:	cset	w0, eq  // eq = none
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptrneERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>
   c:	and	w0, w0, #0xff
  10:	eor	w0, w0, #0x1
  14:	ldp	x29, x30, [sp], #16
  18:	ret

Disassembly of section .text._ZSt17current_exceptionv:

0000000000000000 <_ZSt17current_exceptionv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x8
  10:	bl	0 <__cxa_get_globals>
  14:	ldr	x1, [x0]
  18:	cbnz	x1, 34 <_ZSt17current_exceptionv+0x34>
  1c:	mov	x0, x19
  20:	bl	0 <_ZSt17current_exceptionv>
  24:	mov	x0, x19
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	mov	x0, #0xd500                	// #54528
  38:	ldr	x2, [x1, #80]
  3c:	movk	x0, #0xbcd4, lsl #16
  40:	movk	x0, #0xaabc, lsl #32
  44:	movk	x0, #0xb8b1, lsl #48
  48:	add	x0, x2, x0
  4c:	cmp	x0, #0x1
  50:	b.hi	1c <_ZSt17current_exceptionv+0x1c>  // b.pmore
  54:	tbz	w2, #0, 68 <_ZSt17current_exceptionv+0x68>
  58:	ldr	x1, [x1]
  5c:	mov	x0, x19
  60:	bl	0 <_ZSt17current_exceptionv>
  64:	b	24 <_ZSt17current_exceptionv+0x24>
  68:	add	x1, x1, #0x70
  6c:	b	5c <_ZSt17current_exceptionv+0x5c>

Disassembly of section .text._ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE:

0000000000000000 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	bl	0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  10:	mov	x20, x0
  14:	bl	0 <__cxa_allocate_dependent_exception>
  18:	mov	x19, x0
  1c:	str	x20, [x0]
  20:	sub	x20, x20, #0x80
  24:	ldaxr	w0, [x20]
  28:	add	w0, w0, #0x1
  2c:	stlxr	w1, w0, [x20]
  30:	cbnz	w1, 24 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE+0x24>
  34:	bl	0 <_ZSt14get_unexpectedv>
  38:	str	x0, [x19, #16]
  3c:	add	x19, x19, #0x50
  40:	bl	0 <_ZSt13get_terminatev>
  44:	stur	x0, [x19, #-56]
  48:	mov	x0, #0x2b01                	// #11009
  4c:	movk	x0, #0x432b, lsl #16
  50:	movk	x0, #0x5543, lsl #32
  54:	movk	x0, #0x474e, lsl #48
  58:	str	x0, [x19]
  5c:	adrp	x0, 0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  60:	add	x0, x0, #0x0
  64:	str	x0, [x19, #8]
  68:	bl	0 <__cxa_get_globals>
  6c:	ldr	w1, [x0, #8]
  70:	add	w1, w1, #0x1
  74:	str	w1, [x0, #8]
  78:	mov	x0, x19
  7c:	bl	0 <_Unwind_RaiseException>
  80:	mov	x0, x19
  84:	bl	0 <__cxa_begin_catch>
  88:	bl	0 <_ZSt9terminatev>

eh_term_handler.o:     file format elf64-littleaarch64


eh_terminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv111__terminateEPFvvE:

0000000000000000 <_ZN10__cxxabiv111__terminateEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	b	14 <_ZN10__cxxabiv111__terminateEPFvvE+0x14>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <abort>

Disassembly of section .text._ZSt13set_terminatePFvvE:

0000000000000000 <_ZSt13set_terminatePFvvE>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	mov	x2, x0
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt13set_terminatePFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt13get_terminatev:

0000000000000000 <_ZSt13get_terminatev>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt9terminatev:

0000000000000000 <_ZSt9terminatev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt9terminatev>
   c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZN10__cxxabiv112__unexpectedEPFvvE:

0000000000000000 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

Disassembly of section .text._ZSt14set_unexpectedPFvvE:

0000000000000000 <_ZSt14set_unexpectedPFvvE>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	mov	x2, x0
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt14set_unexpectedPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt14get_unexpectedv:

0000000000000000 <_ZSt14get_unexpectedv>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt10unexpectedv:

0000000000000000 <_ZSt10unexpectedv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt10unexpectedv>
   c:	bl	0 <_ZSt10unexpectedv>

eh_tm.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL22free_any_cxa_exceptionP17_Unwind_Exception:

0000000000000000 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	x1, [x0]
   c:	str	x19, [sp, #16]
  10:	tbnz	w1, #0, 3c <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x3c>
  14:	sub	x19, x0, #0x60
  18:	ldaxr	w0, [x19]
  1c:	sub	w0, w0, #0x1
  20:	stlxr	w1, w0, [x19]
  24:	cbnz	w1, 18 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x18>
  28:	cbnz	w0, 50 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x50>
  2c:	add	x0, x19, #0x80
  30:	ldr	x19, [sp, #16]
  34:	ldp	x29, x30, [sp], #32
  38:	b	0 <__cxa_free_exception>
  3c:	ldur	x19, [x0, #-80]
  40:	sub	x0, x0, #0x50
  44:	sub	x19, x19, #0x80
  48:	bl	0 <__cxa_free_dependent_exception>
  4c:	b	18 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x18>
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret

Disassembly of section .text.__cxa_tm_cleanup:

0000000000000000 <__cxa_tm_cleanup>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x22, x0
  18:	mov	w21, w2
  1c:	bl	0 <__cxa_get_globals_fast>
  20:	mov	x20, x0
  24:	cbz	x22, 3c <__cxa_tm_cleanup+0x3c>
  28:	ldr	w0, [x0, #8]
  2c:	sub	w0, w0, #0x1
  30:	str	w0, [x20, #8]
  34:	mov	x0, x22
  38:	bl	0 <__cxa_free_exception>
  3c:	cbz	x19, 68 <__cxa_tm_cleanup+0x68>
  40:	mov	x1, #0xd500                	// #54528
  44:	ldr	x0, [x19]
  48:	movk	x1, #0xbcd4, lsl #16
  4c:	movk	x1, #0xaabc, lsl #32
  50:	movk	x1, #0xb8b1, lsl #48
  54:	add	x0, x0, x1
  58:	cmp	x0, #0x1
  5c:	mov	x0, x19
  60:	b.hi	bc <__cxa_tm_cleanup+0xbc>  // b.pmore
  64:	bl	0 <__cxa_tm_cleanup>
  68:	cbz	w21, ac <__cxa_tm_cleanup+0xac>
  6c:	ldr	x19, [x20]
  70:	cbz	x19, ac <__cxa_tm_cleanup+0xac>
  74:	mov	x22, #0xd500                	// #54528
  78:	movk	x22, #0xbcd4, lsl #16
  7c:	movk	x22, #0xaabc, lsl #32
  80:	movk	x22, #0xb8b1, lsl #48
  84:	ldr	x1, [x19, #80]
  88:	add	x0, x19, #0x50
  8c:	add	x1, x1, x22
  90:	cmp	x1, #0x1
  94:	b.hi	c4 <__cxa_tm_cleanup+0xc4>  // b.pmore
  98:	ldr	x19, [x19, #32]
  9c:	bl	0 <__cxa_tm_cleanup>
  a0:	subs	w21, w21, #0x1
  a4:	b.ne	84 <__cxa_tm_cleanup+0x84>  // b.any
  a8:	str	x19, [x20]
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret
  bc:	bl	0 <_Unwind_DeleteException>
  c0:	b	68 <__cxa_tm_cleanup+0x68>
  c4:	bl	0 <_Unwind_DeleteException>
  c8:	mov	x19, #0x0                   	// #0
  cc:	b	a0 <__cxa_tm_cleanup+0xa0>
  d0:	cmn	x1, #0x1
  d4:	b.eq	dc <__cxa_tm_cleanup+0xdc>  // b.none
  d8:	bl	0 <_Unwind_Resume>
  dc:	bl	0 <__cxa_call_unexpected>

eh_throw.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	b.ls	1c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x1c>  // b.plast
  14:	ldur	x0, [x1, #-56]
  18:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>
  1c:	sub	x0, x1, #0x60
  20:	ldaxr	w2, [x0]
  24:	sub	w2, w2, #0x1
  28:	stlxr	w3, w2, [x0]
  2c:	cbnz	w3, 20 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x20>
  30:	cbnz	w2, 58 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
  34:	ldur	x2, [x1, #-72]
  38:	add	x19, x1, #0x20
  3c:	cbz	x2, 48 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x48>
  40:	mov	x0, x19
  44:	blr	x2
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	b	0 <__cxa_free_exception>
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret

Disassembly of section .text.__cxa_init_primary_exception:

0000000000000000 <__cxa_init_primary_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	sub	x20, x0, #0x80
  14:	stur	wzr, [x0, #-128]
  18:	stp	x1, x2, [x0, #-112]
  1c:	bl	0 <_ZSt14get_unexpectedv>
  20:	stur	x0, [x19, #-96]
  24:	bl	0 <_ZSt13get_terminatev>
  28:	stur	x0, [x19, #-88]
  2c:	mov	x0, #0x2b00                	// #11008
  30:	movk	x0, #0x432b, lsl #16
  34:	movk	x0, #0x5543, lsl #32
  38:	movk	x0, #0x474e, lsl #48
  3c:	stur	x0, [x19, #-32]
  40:	adrp	x0, 0 <__cxa_init_primary_exception>
  44:	add	x0, x0, #0x0
  48:	stur	x0, [x19, #-24]
  4c:	mov	x0, x20
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret

Disassembly of section .text.__cxa_throw:

0000000000000000 <__cxa_throw>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <__cxa_get_globals>
  20:	ldr	w1, [x0, #8]
  24:	mov	x2, x21
  28:	add	w1, w1, #0x1
  2c:	str	w1, [x0, #8]
  30:	mov	x1, x20
  34:	mov	x0, x19
  38:	bl	0 <__cxa_throw>
  3c:	mov	x19, x0
  40:	mov	w0, #0x1                   	// #1
  44:	str	w0, [x19], #96
  48:	mov	x0, x19
  4c:	bl	0 <_Unwind_RaiseException>
  50:	mov	x0, x19
  54:	bl	0 <__cxa_begin_catch>
  58:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_rethrow:

0000000000000000 <__cxa_rethrow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	bl	0 <__cxa_get_globals>
  10:	ldr	w2, [x0, #8]
  14:	ldr	x1, [x0]
  18:	add	w2, w2, #0x1
  1c:	str	w2, [x0, #8]
  20:	cbz	x1, 5c <__cxa_rethrow+0x5c>
  24:	mov	x3, #0xd500                	// #54528
  28:	ldr	x2, [x1, #80]
  2c:	movk	x3, #0xbcd4, lsl #16
  30:	movk	x3, #0xaabc, lsl #32
  34:	movk	x3, #0xb8b1, lsl #48
  38:	add	x2, x2, x3
  3c:	cmp	x2, #0x1
  40:	b.ls	60 <__cxa_rethrow+0x60>  // b.plast
  44:	str	xzr, [x0]
  48:	add	x19, x1, #0x50
  4c:	mov	x0, x19
  50:	bl	0 <_Unwind_Resume_or_Rethrow>
  54:	mov	x0, x19
  58:	bl	0 <__cxa_begin_catch>
  5c:	bl	0 <_ZSt9terminatev>
  60:	ldr	w0, [x1, #40]
  64:	neg	w0, w0
  68:	str	w0, [x1, #40]
  6c:	b	48 <__cxa_rethrow+0x48>

eh_type.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_current_exception_type:

0000000000000000 <__cxa_current_exception_type>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	x0, [x0]
  10:	cbz	x0, 28 <__cxa_current_exception_type+0x28>
  14:	ldr	x2, [x0, #80]
  18:	ldr	x1, [x0]
  1c:	tbz	w2, #0, 24 <__cxa_current_exception_type+0x24>
  20:	sub	x0, x1, #0x70
  24:	ldr	x0, [x0]
  28:	ldp	x29, x30, [sp], #16
  2c:	ret

eh_unex_handler.o:     file format elf64-littleaarch64


enum_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv116__enum_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv116__enum_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

function_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv120__function_type_info15__is_function_pEv:

0000000000000000 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__function_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__function_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

fundamental_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

guard.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_guard_acquire:

0000000000000000 <__cxa_guard_acquire>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	ldarb	w0, [x0]
  18:	tst	w0, #0xff
  1c:	b.eq	34 <__cxa_guard_acquire+0x34>  // b.none
  20:	mov	w0, #0x0                   	// #0
  24:	ldp	x19, x20, [sp, #16]
  28:	ldp	x21, x22, [sp, #32]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	adrp	x0, 0 <__pthread_key_create>
  38:	ldr	x0, [x0]
  3c:	cbz	x0, b4 <__cxa_guard_acquire+0xb4>
  40:	mov	w20, #0x100                 	// #256
  44:	orr	w22, w20, #0x10000
  48:	mov	w21, #0x1                   	// #1
  4c:	ldaxr	w3, [x19]
  50:	cbnz	w3, 5c <__cxa_guard_acquire+0x5c>
  54:	stlxr	w0, w20, [x19]
  58:	cbnz	w0, 4c <__cxa_guard_acquire+0x4c>
  5c:	cmp	w3, #0x0
  60:	b.eq	f4 <__cxa_guard_acquire+0xf4>  // b.none
  64:	cmp	w21, w3
  68:	b.eq	20 <__cxa_guard_acquire+0x20>  // b.none
  6c:	cmp	w20, w3
  70:	b.ne	9c <__cxa_guard_acquire+0x9c>  // b.any
  74:	mov	w3, w22
  78:	ldaxr	w0, [x19]
  7c:	cmp	w0, #0x100
  80:	b.ne	8c <__cxa_guard_acquire+0x8c>  // b.any
  84:	stlxr	w1, w22, [x19]
  88:	cbnz	w1, 78 <__cxa_guard_acquire+0x78>
  8c:	b.eq	9c <__cxa_guard_acquire+0x9c>  // b.none
  90:	cmp	w21, w0
  94:	b.eq	20 <__cxa_guard_acquire+0x20>  // b.none
  98:	cbz	w0, 4c <__cxa_guard_acquire+0x4c>
  9c:	mov	x1, x19
  a0:	mov	w4, #0x0                   	// #0
  a4:	mov	w2, #0x0                   	// #0
  a8:	mov	x0, #0x62                  	// #98
  ac:	bl	0 <syscall>
  b0:	b	4c <__cxa_guard_acquire+0x4c>
  b4:	ldrb	w0, [x19]
  b8:	cbnz	w0, 20 <__cxa_guard_acquire+0x20>
  bc:	ldrb	w0, [x19, #1]
  c0:	cbz	w0, ec <__cxa_guard_acquire+0xec>
  c4:	mov	x0, #0x8                   	// #8
  c8:	bl	0 <__cxa_allocate_exception>
  cc:	mov	x19, x0
  d0:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
  d4:	adrp	x2, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
  d8:	adrp	x1, 0 <_ZTIN9__gnu_cxx20recursive_init_errorE>
  dc:	mov	x0, x19
  e0:	ldr	x2, [x2]
  e4:	ldr	x1, [x1]
  e8:	bl	0 <__cxa_throw>
  ec:	mov	w0, #0x1                   	// #1
  f0:	strb	w0, [x19, #1]
  f4:	mov	w0, #0x1                   	// #1
  f8:	b	24 <__cxa_guard_acquire+0x24>

Disassembly of section .text.__cxa_guard_abort:

0000000000000000 <__cxa_guard_abort>:
   0:	mov	x1, x0
   4:	adrp	x0, 0 <__pthread_key_create>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 30 <__cxa_guard_abort+0x30>
  10:	ldaxr	w0, [x1]
  14:	stlxr	w2, wzr, [x1]
  18:	cbnz	w2, 10 <__cxa_guard_abort+0x10>
  1c:	tbz	w0, #16, 34 <__cxa_guard_abort+0x34>
  20:	mov	w3, #0x7fffffff            	// #2147483647
  24:	mov	w2, #0x1                   	// #1
  28:	mov	x0, #0x62                  	// #98
  2c:	b	0 <syscall>
  30:	strb	wzr, [x1, #1]
  34:	ret

Disassembly of section .text.__cxa_guard_release:

0000000000000000 <__cxa_guard_release>:
   0:	mov	x1, x0
   4:	adrp	x0, 0 <__pthread_key_create>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 30 <__cxa_guard_release+0x30>
  10:	mov	w2, #0x1                   	// #1
  14:	ldaxr	w0, [x1]
  18:	stlxr	w3, w2, [x1]
  1c:	cbnz	w3, 14 <__cxa_guard_release+0x14>
  20:	tbz	w0, #16, 3c <__cxa_guard_release+0x3c>
  24:	mov	w3, #0x7fffffff            	// #2147483647
  28:	mov	x0, #0x62                  	// #98
  2c:	b	0 <syscall>
  30:	strb	wzr, [x1, #1]
  34:	mov	w0, #0x1                   	// #1
  38:	stlrb	w0, [x1]
  3c:	ret

guard_error.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	ret

hash_bytes.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt11_Hash_bytesPKvmm:

0000000000000000 <_ZSt11_Hash_bytesPKvmm>:
   0:	and	x6, x1, #0xfffffffffffffff8
   4:	mov	x5, x0
   8:	add	x6, x0, x6
   c:	mov	x0, #0xe995                	// #59797
  10:	movk	x0, #0x5bd1, lsl #16
  14:	movk	x0, #0xa793, lsl #32
  18:	movk	x0, #0xc6a4, lsl #48
  1c:	mul	x3, x1, x0
  20:	eor	x2, x3, x2
  24:	mov	x3, x0
  28:	cmp	x5, x6
  2c:	b.eq	4c <_ZSt11_Hash_bytesPKvmm+0x4c>  // b.none
  30:	ldr	x4, [x5], #8
  34:	mul	x4, x4, x3
  38:	eor	x4, x4, x4, lsr #47
  3c:	mul	x4, x4, x3
  40:	eor	x2, x4, x2
  44:	mul	x2, x2, x3
  48:	b	28 <_ZSt11_Hash_bytesPKvmm+0x28>
  4c:	ands	x1, x1, #0x7
  50:	b.eq	78 <_ZSt11_Hash_bytesPKvmm+0x78>  // b.none
  54:	sub	w1, w1, #0x1
  58:	mov	x0, #0x0                   	// #0
  5c:	sxtw	x1, w1
  60:	ldrb	w4, [x6, x1]
  64:	sub	x1, x1, #0x1
  68:	add	x0, x4, x0, lsl #8
  6c:	tbz	w1, #31, 60 <_ZSt11_Hash_bytesPKvmm+0x60>
  70:	eor	x2, x2, x0
  74:	mul	x2, x2, x3
  78:	eor	x2, x2, x2, lsr #47
  7c:	mul	x0, x2, x3
  80:	eor	x0, x0, x0, lsr #47
  84:	ret

Disassembly of section .text._ZSt15_Fnv_hash_bytesPKvmm:

0000000000000000 <_ZSt15_Fnv_hash_bytesPKvmm>:
   0:	mov	x4, x0
   4:	mov	x5, #0x1b3                 	// #435
   8:	mov	x0, x2
   c:	mov	x3, #0x0                   	// #0
  10:	movk	x5, #0x100, lsl #32
  14:	cmp	x1, x3
  18:	b.eq	30 <_ZSt15_Fnv_hash_bytesPKvmm+0x30>  // b.none
  1c:	ldrb	w2, [x4, x3]
  20:	add	x3, x3, #0x1
  24:	eor	x2, x2, x0
  28:	mul	x0, x2, x5
  2c:	b	14 <_ZSt15_Fnv_hash_bytesPKvmm+0x14>
  30:	ret

nested_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt16nested_exceptionD2Ev:

0000000000000000 <_ZNSt16nested_exceptionD1Ev>:
   0:	adrp	x1, 0 <_ZNSt16nested_exceptionD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0], #8
  10:	b	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>

Disassembly of section .text._ZNSt16nested_exceptionD0Ev:

0000000000000000 <_ZNSt16nested_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16nested_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

new_handler.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt15set_new_handlerPFvvE:

0000000000000000 <_ZSt15set_new_handlerPFvvE>:
   0:	adrp	x1, 0 <_ZSt15set_new_handlerPFvvE>
   4:	mov	x2, x0
   8:	add	x1, x1, #0x0
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt15set_new_handlerPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt15get_new_handlerv:

0000000000000000 <_ZSt15get_new_handlerv>:
   0:	adrp	x0, 0 <_ZSt15get_new_handlerv>
   4:	add	x0, x0, #0x0
   8:	ldar	x0, [x0]
   c:	ret

new_op.o:     file format elf64-littleaarch64


Disassembly of section .text._Znwm:

0000000000000000 <_Znwm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	x0, #0x0
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	csinc	x19, x0, xzr, ne  // ne = any
  14:	mov	x0, x19
  18:	bl	0 <malloc>
  1c:	cbnz	x0, 5c <_Znwm+0x5c>
  20:	bl	0 <_ZSt15get_new_handlerv>
  24:	cbnz	x0, 54 <_Znwm+0x54>
  28:	mov	x0, #0x8                   	// #8
  2c:	bl	0 <__cxa_allocate_exception>
  30:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  34:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  38:	ldr	x1, [x1]
  3c:	ldr	x2, [x2]
  40:	add	x1, x1, #0x10
  44:	str	x1, [x0]
  48:	adrp	x1, 0 <_ZTISt9bad_alloc>
  4c:	ldr	x1, [x1]
  50:	bl	0 <__cxa_throw>
  54:	blr	x0
  58:	b	14 <_Znwm+0x14>
  5c:	ldr	x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret

new_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmRKSt9nothrow_t:

0000000000000000 <_ZnwmRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znwm>
   c:	b	1c <_ZnwmRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

new_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._Znam:

0000000000000000 <_Znam>:
   0:	b	0 <_Znwm>

new_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamRKSt9nothrow_t:

0000000000000000 <_ZnamRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znam>
   c:	b	1c <_ZnamRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

new_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_t:

0000000000000000 <_ZnwmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	d8, [sp, #24]
   c:	fmov	d8, x1
  10:	str	x19, [sp, #16]
  14:	cnt	v0.8b, v8.8b
  18:	addv	b0, v0.8b
  1c:	umov	w1, v0.b[0]
  20:	cmp	w1, #0x1
  24:	b.eq	54 <_ZnwmSt11align_val_t+0x54>  // b.none
  28:	mov	x0, #0x8                   	// #8
  2c:	bl	0 <__cxa_allocate_exception>
  30:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  34:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  38:	ldr	x1, [x1]
  3c:	ldr	x2, [x2]
  40:	add	x1, x1, #0x10
  44:	str	x1, [x0]
  48:	adrp	x1, 0 <_ZTISt9bad_alloc>
  4c:	ldr	x1, [x1]
  50:	bl	0 <__cxa_throw>
  54:	fmov	x1, d8
  58:	cmp	x0, #0x0
  5c:	csinc	x0, x0, xzr, ne  // ne = any
  60:	sub	x0, x0, #0x1
  64:	add	x0, x0, x1
  68:	neg	x19, x1
  6c:	and	x19, x19, x0
  70:	fmov	x0, d8
  74:	mov	x1, x19
  78:	bl	0 <aligned_alloc>
  7c:	cbnz	x0, 90 <_ZnwmSt11align_val_t+0x90>
  80:	bl	0 <_ZSt15get_new_handlerv>
  84:	cbz	x0, 28 <_ZnwmSt11align_val_t+0x28>
  88:	blr	x0
  8c:	b	70 <_ZnwmSt11align_val_t+0x70>
  90:	ldr	x19, [sp, #16]
  94:	ldr	d8, [sp, #24]
  98:	ldp	x29, x30, [sp], #32
  9c:	ret

new_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnwmSt11align_val_t>
   c:	b	1c <_ZnwmSt11align_val_tRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

new_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_t:

0000000000000000 <_ZnamSt11align_val_t>:
   0:	b	0 <_ZnwmSt11align_val_t>

new_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnamSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnamSt11align_val_t>
   c:	b	1c <_ZnamSt11align_val_tRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

del_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_t:

0000000000000000 <_ZdlPvSt11align_val_t>:
   0:	b	0 <free>

del_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
   0:	b	0 <_ZdlPvSt11align_val_t>

del_opsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvmSt11align_val_t:

0000000000000000 <_ZdlPvmSt11align_val_t>:
   0:	mov	x1, x2
   4:	b	0 <_ZdlPvSt11align_val_t>

del_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_t:

0000000000000000 <_ZdaPvSt11align_val_t>:
   0:	b	0 <_ZdlPvSt11align_val_t>

del_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
   0:	b	0 <_ZdaPvSt11align_val_t>

del_opvsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvmSt11align_val_t:

0000000000000000 <_ZdaPvmSt11align_val_t>:
   0:	mov	x1, x2
   4:	b	0 <_ZdaPvSt11align_val_t>

pbase_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	ldr	x0, [x0, #24]
   4:	add	w3, w3, #0x2
   8:	ldr	x1, [x1, #24]
   c:	ldr	x4, [x0]
  10:	ldr	x4, [x4, #32]
  14:	mov	x16, x4
  18:	br	x16

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x20                  	// #32
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_infoeqERKS_.isra.0:

0000000000000000 <_ZNKSt9type_infoeqERKS_.isra.0>:
   0:	cmp	x0, x1
   4:	b.eq	30 <_ZNKSt9type_infoeqERKS_.isra.0+0x30>  // b.none
   8:	ldrb	w2, [x0]
   c:	cmp	w2, #0x2a
  10:	b.eq	38 <_ZNKSt9type_infoeqERKS_.isra.0+0x38>  // b.none
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	cset	w0, eq  // eq = none
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	mov	w0, #0x1                   	// #1
  34:	ret
  38:	mov	w0, #0x0                   	// #0
  3c:	ret

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	ldr	x0, [x0, #8]
  14:	stp	x23, x24, [sp, #48]
  18:	mov	w23, w3
  1c:	ldr	x24, [x1, #8]
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x21, x1
  28:	mov	x22, x2
  2c:	mov	x1, x24
  30:	stp	x25, x26, [sp, #64]
  34:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  38:	ands	w19, w0, #0xff
  3c:	b.ne	8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>  // b.any
  40:	adrp	x0, 0 <_ZTIDn>
  44:	ldr	x0, [x0]
  48:	ldr	x1, [x0, #8]
  4c:	mov	x0, x24
  50:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  54:	tst	w0, #0xff
  58:	ldr	x24, [x20]
  5c:	ldur	x1, [x24, #-8]
  60:	ldr	x26, [x1, #8]
  64:	b.eq	100 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x100>  // b.none
  68:	adrp	x0, 0 <_ZTIN10__cxxabiv119__pointer_type_infoE>
  6c:	ldr	x0, [x0]
  70:	ldr	x1, [x0, #8]
  74:	mov	x0, x26
  78:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  7c:	ands	w0, w0, #0xff
  80:	b.eq	a8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xa8>  // b.none
  84:	mov	w19, w0
  88:	str	xzr, [x22]
  8c:	mov	w0, w19
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x21, x22, [sp, #32]
  98:	ldp	x23, x24, [sp, #48]
  9c:	ldp	x25, x26, [sp, #64]
  a0:	ldp	x29, x30, [sp], #80
  a4:	ret
  a8:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
  ac:	ldr	x0, [x0]
  b0:	ldr	x1, [x0, #8]
  b4:	mov	x0, x26
  b8:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  bc:	ands	w25, w0, #0xff
  c0:	b.eq	100 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x100>  // b.none
  c4:	ldr	x0, [x20, #24]
  c8:	ldr	x1, [x0]
  cc:	ldr	x1, [x1, #24]
  d0:	blr	x1
  d4:	ands	w19, w0, #0xff
  d8:	b.eq	ec <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xec>  // b.none
  dc:	adrp	x0, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  e0:	add	x0, x0, #0x0
  e4:	str	x0, [x22]
  e8:	b	8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>
  ec:	adrp	x0, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  f0:	mov	w19, w25
  f4:	add	x0, x0, #0x0
  f8:	str	x0, [x22]
  fc:	b	8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>
 100:	ldr	x0, [x21]
 104:	ldur	x0, [x0, #-8]
 108:	ldr	x1, [x0, #8]
 10c:	mov	x0, x26
 110:	bl	0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 114:	tst	w0, #0xff
 118:	b.eq	184 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x184>  // b.none
 11c:	tbz	w23, #0, 8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>
 120:	ldr	w2, [x20, #16]
 124:	ldr	w1, [x21, #16]
 128:	and	w3, w2, #0x60
 12c:	and	w0, w1, #0x60
 130:	bics	wzr, w0, w3
 134:	b.eq	13c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x13c>  // b.none
 138:	and	w1, w1, w3
 13c:	bic	w0, w3, w0
 140:	bic	w1, w1, w2
 144:	orr	w0, w0, w1
 148:	cbnz	w0, 8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>
 14c:	tbnz	w2, #0, 154 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x154>
 150:	and	w23, w23, #0xfffffffe
 154:	mov	w3, w23
 158:	mov	x2, x22
 15c:	mov	x1, x21
 160:	mov	x0, x20
 164:	ldp	x19, x20, [sp, #16]
 168:	ldp	x21, x22, [sp, #32]
 16c:	ldr	x4, [x24, #48]
 170:	ldp	x23, x24, [sp, #48]
 174:	mov	x16, x4
 178:	ldp	x25, x26, [sp, #64]
 17c:	ldp	x29, x30, [sp], #80
 180:	br	x16
 184:	mov	w19, #0x0                   	// #0
 188:	b	8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>

pmem_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x28                  	// #40
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	ldr	x0, [x0, #32]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	ldr	x1, [x1, #32]
  24:	mov	w22, w3
  28:	ldr	x0, [x0, #8]
  2c:	ldr	x1, [x1, #8]
  30:	cmp	x0, x1
  34:	b.eq	4c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x4c>  // b.none
  38:	ldrb	w2, [x0]
  3c:	cmp	w2, #0x2a
  40:	b.eq	78 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x78>  // b.none
  44:	bl	0 <strcmp>
  48:	cbnz	w0, 78 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x78>
  4c:	ldr	x0, [x20, #24]
  50:	add	w3, w22, #0x2
  54:	mov	x2, x21
  58:	ldp	x21, x22, [sp, #32]
  5c:	ldr	x1, [x0]
  60:	ldr	x4, [x1, #32]
  64:	ldr	x1, [x19, #24]
  68:	mov	x16, x4
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	br	x16
  78:	mov	w0, #0x0                   	// #0
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldp	x29, x30, [sp], #48
  88:	ret

pointer_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x20                  	// #32
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	cmp	w3, #0x1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x1
  14:	mov	w20, w3
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x2
  20:	ldr	x21, [x0, #24]
  24:	b.hi	7c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>  // b.pmore
  28:	adrp	x1, 0 <_ZTIv>
  2c:	ldr	x0, [x21, #8]
  30:	ldr	x1, [x1]
  34:	ldr	x1, [x1, #8]
  38:	cmp	x0, x1
  3c:	b.eq	54 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x54>  // b.none
  40:	ldrb	w2, [x0]
  44:	cmp	w2, #0x2a
  48:	b.eq	7c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>  // b.none
  4c:	bl	0 <strcmp>
  50:	cbnz	w0, 7c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>
  54:	ldr	x0, [x19, #24]
  58:	ldr	x1, [x0]
  5c:	ldr	x1, [x1, #24]
  60:	blr	x1
  64:	and	w0, w0, #0xff
  68:	eor	w0, w0, #0x1
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	ldp	x29, x30, [sp], #48
  78:	ret
  7c:	ldr	x0, [x21]
  80:	add	w3, w20, #0x2
  84:	mov	x2, x22
  88:	ldr	x1, [x19, #24]
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldr	x4, [x0, #32]
  94:	mov	x0, x21
  98:	ldp	x21, x22, [sp, #32]
  9c:	mov	x16, x4
  a0:	ldp	x29, x30, [sp], #48
  a4:	br	x16

pure.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_pure_virtual:

0000000000000000 <__cxa_pure_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <__cxa_pure_virtual>
   8:	add	x1, x1, #0x0
   c:	mov	x2, #0x1b                  	// #27
  10:	mov	x29, sp
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_deleted_virtual:

0000000000000000 <__cxa_deleted_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <__cxa_deleted_virtual>
   8:	add	x1, x1, #0x0
   c:	mov	x2, #0x1e                  	// #30
  10:	mov	x29, sp
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

si_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x18                  	// #24
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_infoeqERKS_.isra.0:

0000000000000000 <_ZNKSt9type_infoeqERKS_.isra.0>:
   0:	cmp	x0, x1
   4:	b.eq	30 <_ZNKSt9type_infoeqERKS_.isra.0+0x30>  // b.none
   8:	ldrb	w2, [x0]
   c:	cmp	w2, #0x2a
  10:	b.eq	38 <_ZNKSt9type_infoeqERKS_.isra.0+0x38>  // b.none
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	cset	w0, eq  // eq = none
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	mov	w0, #0x1                   	// #1
  34:	ret
  38:	mov	w0, #0x0                   	// #0
  3c:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x4, x2
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x2
  14:	mov	x20, x3
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x0
  20:	mov	x21, x4
  24:	str	x23, [sp, #48]
  28:	mov	x23, x1
  2c:	b.ne	44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x44>  // b.any
  30:	ldr	x1, [x3, #8]
  34:	ldr	x0, [x0, #8]
  38:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
  3c:	tst	w0, #0xff
  40:	b.ne	78 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x78>  // b.any
  44:	ldr	x0, [x22, #16]
  48:	mov	x4, x21
  4c:	mov	x3, x20
  50:	mov	x2, x19
  54:	ldp	x19, x20, [sp, #16]
  58:	ldr	x1, [x0]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldr	x5, [x1, #64]
  64:	mov	x1, x23
  68:	ldr	x23, [sp, #48]
  6c:	mov	x16, x5
  70:	ldp	x29, x30, [sp], #64
  74:	br	x16
  78:	mov	w0, #0x6                   	// #6
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldr	x23, [sp, #48]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x1
  10:	ldr	x1, [x3, #8]
  14:	stp	x27, x28, [sp, #80]
  18:	mov	x27, x5
  1c:	ldr	x28, [x0, #8]
  20:	stp	x19, x20, [sp, #16]
  24:	mov	x19, x4
  28:	mov	x20, x7
  2c:	stp	x23, x24, [sp, #48]
  30:	mov	x24, x0
  34:	mov	w23, w2
  38:	mov	x0, x28
  3c:	stp	x25, x26, [sp, #64]
  40:	mov	x26, x3
  44:	mov	x25, x6
  48:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  4c:	ands	w21, w0, #0xff
  50:	b.eq	8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>  // b.none
  54:	str	x19, [x20]
  58:	str	w23, [x20, #8]
  5c:	tbnz	x22, #63, 7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
  60:	add	x19, x19, x22
  64:	mov	w0, #0x6                   	// #6
  68:	cmp	x25, x19
  6c:	csinc	w0, w0, wzr, eq  // eq = none
  70:	str	w0, [x20, #16]
  74:	mov	w21, #0x0                   	// #0
  78:	b	ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xac>
  7c:	cmn	x22, #0x2
  80:	b.ne	74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x74>  // b.any
  84:	mov	w0, #0x1                   	// #1
  88:	b	70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
  8c:	cmp	x19, x25
  90:	b.ne	cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>  // b.any
  94:	ldr	x1, [x27, #8]
  98:	mov	x0, x28
  9c:	bl	0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  a0:	tst	w0, #0xff
  a4:	b.eq	cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>  // b.none
  a8:	str	w23, [x20, #12]
  ac:	mov	w0, w21
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x23, x24, [sp, #48]
  bc:	ldp	x25, x26, [sp, #64]
  c0:	ldp	x27, x28, [sp, #80]
  c4:	ldp	x29, x30, [sp], #96
  c8:	ret
  cc:	ldr	x0, [x24, #16]
  d0:	mov	x7, x20
  d4:	mov	x6, x25
  d8:	mov	x5, x27
  dc:	mov	x4, x19
  e0:	mov	x3, x26
  e4:	ldr	x1, [x0]
  e8:	mov	w2, w23
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x23, x24, [sp, #48]
  f4:	ldr	x8, [x1, #56]
  f8:	mov	x1, x22
  fc:	ldp	x21, x22, [sp, #32]
 100:	mov	x16, x8
 104:	ldp	x25, x26, [sp, #64]
 108:	ldp	x27, x28, [sp, #80]
 10c:	ldp	x29, x30, [sp], #96
 110:	br	x16

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x0
  1c:	mov	x21, x3
  20:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  24:	tst	w0, #0xff
  28:	b.ne	58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>  // b.any
  2c:	ldr	x0, [x22, #16]
  30:	mov	x3, x21
  34:	mov	x2, x20
  38:	ldp	x21, x22, [sp, #32]
  3c:	ldr	x1, [x0]
  40:	ldr	x4, [x1, #48]
  44:	mov	x1, x19
  48:	ldp	x19, x20, [sp, #16]
  4c:	mov	x16, x4
  50:	ldp	x29, x30, [sp], #48
  54:	br	x16
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret

tinfo.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9type_infoD2Ev:

0000000000000000 <_ZNSt9type_infoD1Ev>:
   0:	ret

Disassembly of section .text._ZNKSt9type_info14__is_pointer_pEv:

0000000000000000 <_ZNKSt9type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:

0000000000000000 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNSt9type_infoD0Ev:

0000000000000000 <_ZNSt9type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_info10__do_catchEPKS_PPvj:

0000000000000000 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   0:	ldr	x0, [x0, #8]
   4:	ldr	x1, [x1, #8]
   8:	cmp	x0, x1
   c:	b.eq	38 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x38>  // b.none
  10:	ldrb	w2, [x0]
  14:	cmp	w2, #0x2a
  18:	b.eq	40 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x40>  // b.none
  1c:	stp	x29, x30, [sp, #-16]!
  20:	mov	x29, sp
  24:	bl	0 <strcmp>
  28:	cmp	w0, #0x0
  2c:	cset	w0, eq  // eq = none
  30:	ldp	x29, x30, [sp], #16
  34:	ret
  38:	mov	w0, #0x1                   	// #1
  3c:	ret
  40:	mov	w0, #0x0                   	// #0
  44:	ret

tinfo2.o:     file format elf64-littleaarch64


vec.o:     file format elf64-littleaarch64


Disassembly of section .text.unlikely._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals_fast>
  14:	ldr	x1, [x0]
  18:	str	x1, [x19]
  1c:	ldr	x19, [sp, #16]
  20:	ldr	w2, [x1, #40]
  24:	sub	w2, w2, #0x1
  28:	str	w2, [x1, #40]
  2c:	ldr	x1, [x1, #32]
  30:	str	x1, [x0]
  34:	ldr	w1, [x0, #8]
  38:	add	w1, w1, #0x1
  3c:	str	w1, [x0, #8]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

Disassembly of section .text.unlikely._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionD1Ev>:
   0:	ldr	x0, [x0]
   4:	add	x0, x0, #0x50
   8:	b	0 <__cxa_begin_catch>

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cbz	x1, 40 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x40>
   c:	umulh	x3, x0, x1
  10:	cbz	x3, 40 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x40>
  14:	mov	x0, #0x8                   	// #8
  18:	bl	0 <__cxa_allocate_exception>
  1c:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  20:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  24:	ldr	x1, [x1]
  28:	ldr	x2, [x2]
  2c:	add	x1, x1, #0x10
  30:	str	x1, [x0]
  34:	adrp	x1, 0 <_ZTISt9bad_alloc>
  38:	ldr	x1, [x1]
  3c:	bl	0 <__cxa_throw>
  40:	mul	x1, x1, x0
  44:	adds	x0, x1, x2
  48:	b.cs	14 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x14>  // b.hs, b.nlast
  4c:	ldp	x29, x30, [sp], #16
  50:	ret

Disassembly of section .text.__cxa_vec_cleanup:

0000000000000000 <__cxa_vec_cleanup>:
   0:	cbz	x3, 54 <__cxa_vec_cleanup+0x54>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	madd	x19, x1, x2, x0
  14:	mov	x20, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	mov	x22, x3
  24:	cbz	x20, 44 <__cxa_vec_cleanup+0x44>
  28:	sub	x19, x19, x21
  2c:	mov	x0, x19
  30:	blr	x22
  34:	sub	x20, x20, #0x1
  38:	b	24 <__cxa_vec_cleanup+0x24>
  3c:	bl	0 <__cxa_begin_catch>
  40:	bl	0 <_ZSt9terminatev>
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldp	x29, x30, [sp], #48
  50:	ret
  54:	ret

Disassembly of section .text.__cxa_vec_ctor:

0000000000000000 <__cxa_vec_ctor>:
   0:	cbz	x3, ac <__cxa_vec_ctor+0xac>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, #0x0                   	// #0
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	mov	x22, x3
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x23, x4
  2c:	mov	x24, x0
  30:	str	x25, [sp, #64]
  34:	mov	x25, x1
  38:	cmp	x20, x25
  3c:	b.eq	94 <__cxa_vec_ctor+0x94>  // b.none
  40:	mov	x0, x24
  44:	blr	x22
  48:	add	x20, x20, #0x1
  4c:	add	x24, x24, x21
  50:	b	38 <__cxa_vec_ctor+0x38>
  54:	bl	0 <__cxa_begin_catch>
  58:	add	x22, sp, #0x58
  5c:	mov	x0, x22
  60:	bl	0 <__cxa_vec_ctor>
  64:	mov	x0, x19
  68:	mov	x3, x23
  6c:	mov	x2, x21
  70:	mov	x1, x20
  74:	bl	0 <__cxa_vec_ctor>
  78:	mov	x0, x22
  7c:	bl	0 <__cxa_vec_ctor>
  80:	bl	0 <__cxa_rethrow>
  84:	mov	x19, x0
  88:	bl	0 <__cxa_end_catch>
  8c:	mov	x0, x19
  90:	bl	0 <_Unwind_Resume>
  94:	ldp	x19, x20, [sp, #16]
  98:	ldp	x21, x22, [sp, #32]
  9c:	ldp	x23, x24, [sp, #48]
  a0:	ldr	x25, [sp, #64]
  a4:	ldp	x29, x30, [sp], #96
  a8:	ret
  ac:	ret

Disassembly of section .text.__cxa_vec_new2:

0000000000000000 <__cxa_vec_new2>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x5
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x6
  1c:	mov	x22, x0
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x1
  28:	mov	x24, x3
  2c:	str	x25, [sp, #64]
  30:	mov	x25, x4
  34:	bl	0 <__cxa_vec_new2>
  38:	blr	x19
  3c:	mov	x19, x0
  40:	cbz	x0, b8 <__cxa_vec_new2+0xb8>
  44:	cbz	x20, 50 <__cxa_vec_new2+0x50>
  48:	add	x19, x0, x20
  4c:	stur	x22, [x19, #-8]
  50:	mov	x4, x25
  54:	mov	x3, x24
  58:	mov	x2, x23
  5c:	mov	x1, x22
  60:	mov	x0, x19
  64:	bl	0 <__cxa_vec_new2>
  68:	b	b8 <__cxa_vec_new2+0xb8>
  6c:	add	x22, sp, #0x58
  70:	bl	0 <__cxa_begin_catch>
  74:	mov	x0, x22
  78:	bl	0 <__cxa_vec_new2>
  7c:	cbnz	x21, 94 <__cxa_vec_new2+0x94>
  80:	mov	x0, x22
  84:	bl	0 <__cxa_vec_new2>
  88:	bl	0 <__cxa_rethrow>
  8c:	mov	x19, x0
  90:	b	ac <__cxa_vec_new2+0xac>
  94:	sub	x0, x19, x20
  98:	blr	x21
  9c:	b	80 <__cxa_vec_new2+0x80>
  a0:	mov	x19, x0
  a4:	mov	x0, x22
  a8:	bl	0 <__cxa_vec_new2>
  ac:	bl	0 <__cxa_end_catch>
  b0:	mov	x0, x19
  b4:	bl	0 <_Unwind_Resume>
  b8:	mov	x0, x19
  bc:	ldp	x19, x20, [sp, #16]
  c0:	ldp	x21, x22, [sp, #32]
  c4:	ldp	x23, x24, [sp, #48]
  c8:	ldr	x25, [sp, #64]
  cc:	ldp	x29, x30, [sp], #96
  d0:	ret

Disassembly of section .text.__cxa_vec_new:

0000000000000000 <__cxa_vec_new>:
   0:	adrp	x6, 0 <_ZdaPv>
   4:	adrp	x5, 0 <_Znam>
   8:	ldr	x6, [x6]
   c:	ldr	x5, [x5]
  10:	b	0 <__cxa_vec_new>

Disassembly of section .text.__cxa_vec_new3:

0000000000000000 <__cxa_vec_new3>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x5
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x6
  1c:	mov	x22, x0
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x24, x1
  28:	stp	x25, x26, [sp, #64]
  2c:	mov	x25, x3
  30:	mov	x26, x4
  34:	bl	0 <__cxa_vec_new3>
  38:	mov	x23, x0
  3c:	blr	x19
  40:	mov	x19, x0
  44:	cbz	x0, c0 <__cxa_vec_new3+0xc0>
  48:	cbz	x20, 54 <__cxa_vec_new3+0x54>
  4c:	add	x19, x0, x20
  50:	stur	x22, [x19, #-8]
  54:	mov	x4, x26
  58:	mov	x3, x25
  5c:	mov	x2, x24
  60:	mov	x1, x22
  64:	mov	x0, x19
  68:	bl	0 <__cxa_vec_new3>
  6c:	b	c0 <__cxa_vec_new3+0xc0>
  70:	add	x22, sp, #0x58
  74:	bl	0 <__cxa_begin_catch>
  78:	mov	x0, x22
  7c:	bl	0 <__cxa_vec_new3>
  80:	cbnz	x21, 98 <__cxa_vec_new3+0x98>
  84:	mov	x0, x22
  88:	bl	0 <__cxa_vec_new3>
  8c:	bl	0 <__cxa_rethrow>
  90:	mov	x19, x0
  94:	b	b4 <__cxa_vec_new3+0xb4>
  98:	mov	x1, x23
  9c:	sub	x0, x19, x20
  a0:	blr	x21
  a4:	b	84 <__cxa_vec_new3+0x84>
  a8:	mov	x19, x0
  ac:	mov	x0, x22
  b0:	bl	0 <__cxa_vec_new3>
  b4:	bl	0 <__cxa_end_catch>
  b8:	mov	x0, x19
  bc:	bl	0 <_Unwind_Resume>
  c0:	mov	x0, x19
  c4:	ldp	x19, x20, [sp, #16]
  c8:	ldp	x21, x22, [sp, #32]
  cc:	ldp	x23, x24, [sp, #48]
  d0:	ldp	x25, x26, [sp, #64]
  d4:	ldp	x29, x30, [sp], #96
  d8:	ret

Disassembly of section .text.__cxa_vec_cctor:

0000000000000000 <__cxa_vec_cctor>:
   0:	cbz	x4, b8 <__cxa_vec_cctor+0xb8>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x1
  14:	mov	x19, x3
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x0
  20:	mov	x22, #0x0                   	// #0
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x23, x4
  2c:	mov	x24, x5
  30:	stp	x25, x26, [sp, #64]
  34:	mov	x26, x2
  38:	mov	x25, x0
  3c:	cmp	x22, x26
  40:	b.eq	a0 <__cxa_vec_cctor+0xa0>  // b.none
  44:	mov	x1, x20
  48:	mov	x0, x25
  4c:	blr	x23
  50:	add	x22, x22, #0x1
  54:	add	x20, x20, x19
  58:	add	x25, x25, x19
  5c:	b	3c <__cxa_vec_cctor+0x3c>
  60:	bl	0 <__cxa_begin_catch>
  64:	add	x20, sp, #0x58
  68:	mov	x0, x20
  6c:	bl	0 <__cxa_vec_cctor>
  70:	mov	x0, x21
  74:	mov	x3, x24
  78:	mov	x2, x19
  7c:	mov	x1, x22
  80:	bl	0 <__cxa_vec_cctor>
  84:	mov	x0, x20
  88:	bl	0 <__cxa_vec_cctor>
  8c:	bl	0 <__cxa_rethrow>
  90:	mov	x19, x0
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x21, x22, [sp, #32]
  a8:	ldp	x23, x24, [sp, #48]
  ac:	ldp	x25, x26, [sp, #64]
  b0:	ldp	x29, x30, [sp], #96
  b4:	ret
  b8:	ret

Disassembly of section .text.__cxa_vec_dtor:

0000000000000000 <__cxa_vec_dtor>:
   0:	cbz	x3, 9c <__cxa_vec_dtor+0x9c>
   4:	stp	x29, x30, [sp, #-80]!
   8:	mov	x29, sp
   c:	str	x23, [sp, #48]
  10:	madd	x23, x1, x2, x0
  14:	stp	x19, x20, [sp, #16]
  18:	mov	x20, x2
  1c:	sub	x19, x1, #0x1
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x22, x0
  28:	mov	x21, x3
  2c:	cmn	x19, #0x1
  30:	b.eq	88 <__cxa_vec_dtor+0x88>  // b.none
  34:	sub	x23, x23, x20
  38:	mov	x0, x23
  3c:	blr	x21
  40:	sub	x19, x19, #0x1
  44:	b	2c <__cxa_vec_dtor+0x2c>
  48:	bl	0 <__cxa_begin_catch>
  4c:	add	x23, sp, #0x48
  50:	mov	x0, x23
  54:	bl	0 <__cxa_vec_dtor>
  58:	mov	x0, x22
  5c:	mov	x3, x21
  60:	mov	x2, x20
  64:	mov	x1, x19
  68:	bl	0 <__cxa_vec_dtor>
  6c:	mov	x0, x23
  70:	bl	0 <__cxa_vec_dtor>
  74:	bl	0 <__cxa_rethrow>
  78:	mov	x19, x0
  7c:	bl	0 <__cxa_end_catch>
  80:	mov	x0, x19
  84:	bl	0 <_Unwind_Resume>
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldr	x23, [sp, #48]
  94:	ldp	x29, x30, [sp], #80
  98:	ret
  9c:	ret

Disassembly of section .text.__cxa_vec_delete2:

0000000000000000 <__cxa_vec_delete2>:
   0:	cbz	x0, 90 <__cxa_vec_delete2+0x90>
   4:	stp	x29, x30, [sp, #-64]!
   8:	mov	x5, x0
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x20, x4
  18:	str	x21, [sp, #32]
  1c:	cbz	x2, 34 <__cxa_vec_delete2+0x34>
  20:	sub	x19, x0, x2
  24:	mov	x2, x1
  28:	ldur	x1, [x0, #-8]
  2c:	bl	0 <__cxa_vec_delete2>
  30:	mov	x5, x19
  34:	mov	x0, x5
  38:	blr	x20
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldr	x21, [sp, #32]
  44:	ldp	x29, x30, [sp], #64
  48:	ret
  4c:	bl	0 <__cxa_begin_catch>
  50:	add	x21, sp, #0x38
  54:	mov	x0, x21
  58:	bl	0 <__cxa_vec_delete2>
  5c:	mov	x0, x19
  60:	blr	x20
  64:	mov	x0, x21
  68:	bl	0 <__cxa_vec_delete2>
  6c:	bl	0 <__cxa_rethrow>
  70:	mov	x19, x0
  74:	b	84 <__cxa_vec_delete2+0x84>
  78:	mov	x19, x0
  7c:	mov	x0, x21
  80:	bl	0 <__cxa_vec_delete2>
  84:	bl	0 <__cxa_end_catch>
  88:	mov	x0, x19
  8c:	bl	0 <_Unwind_Resume>
  90:	ret

Disassembly of section .text.__cxa_vec_delete:

0000000000000000 <__cxa_vec_delete>:
   0:	adrp	x4, 0 <_ZdaPv>
   4:	ldr	x4, [x4]
   8:	b	0 <__cxa_vec_delete>

Disassembly of section .text.__cxa_vec_delete3:

0000000000000000 <__cxa_vec_delete3>:
   0:	cbz	x0, a0 <__cxa_vec_delete3+0xa0>
   4:	stp	x29, x30, [sp, #-64]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x2
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x4
  20:	cbz	x2, 3c <__cxa_vec_delete3+0x3c>
  24:	mov	x6, x1
  28:	mov	x2, x1
  2c:	ldur	x1, [x0, #-8]
  30:	sub	x19, x0, x20
  34:	madd	x20, x1, x6, x20
  38:	bl	0 <__cxa_vec_delete3>
  3c:	mov	x1, x20
  40:	mov	x0, x19
  44:	blr	x21
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #64
  54:	ret
  58:	bl	0 <__cxa_begin_catch>
  5c:	add	x22, sp, #0x38
  60:	mov	x0, x22
  64:	bl	0 <__cxa_vec_delete3>
  68:	mov	x1, x20
  6c:	mov	x0, x19
  70:	blr	x21
  74:	mov	x0, x22
  78:	bl	0 <__cxa_vec_delete3>
  7c:	bl	0 <__cxa_rethrow>
  80:	mov	x19, x0
  84:	b	94 <__cxa_vec_delete3+0x94>
  88:	mov	x19, x0
  8c:	mov	x0, x22
  90:	bl	0 <__cxa_vec_delete3>
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>
  a0:	ret

vmi_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x28                  	// #40
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_infoeqERKS_.isra.0:

0000000000000000 <_ZNKSt9type_infoeqERKS_.isra.0>:
   0:	cmp	x0, x1
   4:	b.eq	30 <_ZNKSt9type_infoeqERKS_.isra.0+0x30>  // b.none
   8:	ldrb	w2, [x0]
   c:	cmp	w2, #0x2a
  10:	b.eq	38 <_ZNKSt9type_infoeqERKS_.isra.0+0x38>  // b.none
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	cset	w0, eq  // eq = none
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	mov	w0, #0x1                   	// #1
  34:	ret
  38:	mov	w0, #0x0                   	// #0
  3c:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	cmp	x2, x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x2
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x1
  20:	mov	x22, x3
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x23, x4
  2c:	str	x25, [sp, #64]
  30:	b.ne	48 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x48>  // b.any
  34:	ldr	x0, [x0, #8]
  38:	ldr	x1, [x3, #8]
  3c:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>
  40:	tst	w0, #0xff
  44:	b.ne	cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xcc>  // b.any
  48:	ldr	w24, [x19, #20]
  4c:	add	x19, x19, x24, lsl #4
  50:	cbz	x24, d4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xd4>
  54:	ldr	x0, [x19, #16]
  58:	tbz	w0, #1, c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>
  5c:	asr	x2, x0, #8
  60:	and	w25, w0, #0x1
  64:	tbz	w0, #0, 78 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x78>
  68:	cmn	x21, #0x3
  6c:	b.eq	c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>  // b.none
  70:	ldr	x0, [x20]
  74:	ldr	x2, [x0, x2]
  78:	mov	x4, x23
  7c:	ldr	x0, [x19, #8]
  80:	mov	x3, x22
  84:	add	x2, x20, x2
  88:	ldr	x1, [x0]
  8c:	ldr	x5, [x1, #64]
  90:	mov	x1, x21
  94:	blr	x5
  98:	cmp	w0, #0x3
  9c:	b.le	c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>
  a0:	cbz	w25, a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>
  a4:	orr	w0, w0, #0x1
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x21, x22, [sp, #32]
  b0:	ldp	x23, x24, [sp, #48]
  b4:	ldr	x25, [sp, #64]
  b8:	ldp	x29, x30, [sp], #80
  bc:	ret
  c0:	sub	x24, x24, #0x1
  c4:	sub	x19, x19, #0x10
  c8:	b	50 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x50>
  cc:	mov	w0, #0x6                   	// #6
  d0:	b	a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>
  d4:	mov	w0, #0x1                   	// #1
  d8:	b	a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_>:
   0:	tbnz	x1, #63, 18 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x18>
   4:	add	x5, x2, x1
   8:	mov	w0, #0x6                   	// #6
   c:	cmp	x4, x5
  10:	csinc	w0, w0, wzr, eq  // eq = none
  14:	ret
  18:	cmn	x1, #0x2
  1c:	b.eq	30 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x30>  // b.none
  20:	ldr	x5, [x0]
  24:	ldr	x5, [x5, #64]
  28:	mov	x16, x5
  2c:	br	x16
  30:	mov	w0, #0x1                   	// #1
  34:	b	14 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcElPKvPKS0_S2_+0x14>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	w0, [x7, #20]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x20, x6
  1c:	mov	x21, x4
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x22, x7
  28:	mov	x23, x3
  2c:	stp	x25, x26, [sp, #64]
  30:	mov	x24, x5
  34:	stp	x27, x28, [sp, #80]
  38:	mov	x28, x1
  3c:	str	w2, [sp, #96]
  40:	tbz	w0, #4, 4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
  44:	ldr	w0, [x19, #16]
  48:	str	w0, [x7, #20]
  4c:	cmp	x21, x20
  50:	ldr	x25, [x19, #8]
  54:	b.ne	7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>  // b.any
  58:	ldr	x1, [x24, #8]
  5c:	mov	x0, x25
  60:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  64:	tst	w0, #0xff
  68:	b.eq	7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>  // b.none
  6c:	ldr	w0, [sp, #96]
  70:	str	w0, [x22, #12]
  74:	mov	w26, #0x0                   	// #0
  78:	b	1b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b8>
  7c:	ldr	x1, [x23, #8]
  80:	mov	x0, x25
  84:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
  88:	tst	w0, #0xff
  8c:	b.eq	c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>  // b.none
  90:	ldr	w0, [sp, #96]
  94:	str	x21, [x22]
  98:	str	w0, [x22, #8]
  9c:	tbnz	x28, #63, b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
  a0:	add	x21, x21, x28
  a4:	mov	w0, #0x6                   	// #6
  a8:	cmp	x20, x21
  ac:	csinc	w0, w0, wzr, eq  // eq = none
  b0:	str	w0, [x22, #16]
  b4:	b	74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x74>
  b8:	cmn	x28, #0x2
  bc:	b.ne	74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x74>  // b.any
  c0:	mov	w0, #0x1                   	// #1
  c4:	b	b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
  c8:	sub	x0, x20, x28
  cc:	cmp	x28, #0x0
  d0:	csel	x0, x0, xzr, ge  // ge = tcont
  d4:	str	x0, [sp, #104]
  d8:	mov	w0, #0x1                   	// #1
  dc:	mov	w26, #0x0                   	// #0
  e0:	str	w0, [sp, #100]
  e4:	add	x0, sp, #0x88
  e8:	str	x0, [sp, #112]
  ec:	str	wzr, [sp, #120]
  f0:	ldr	w27, [x19, #20]
  f4:	add	x25, x19, x27, lsl #4
  f8:	cbz	x27, 38c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
  fc:	ldr	x0, [x25, #16]
 100:	stp	xzr, xzr, [sp, #136]
 104:	ldr	w1, [x22, #20]
 108:	stp	wzr, w1, [sp, #152]
 10c:	ldr	w2, [sp, #96]
 110:	asr	x4, x0, #8
 114:	tbz	w0, #0, 124 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x124>
 118:	ldr	x3, [x21]
 11c:	orr	w2, w2, #0x1
 120:	ldr	x4, [x3, x4]
 124:	add	x4, x21, x4
 128:	ldr	x3, [sp, #104]
 12c:	cbz	x3, 144 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
 130:	cmp	x3, x4
 134:	ldr	w5, [sp, #100]
 138:	cset	w3, cc  // cc = lo, ul, last
 13c:	cmp	w3, w5
 140:	b.eq	37c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x37c>  // b.none
 144:	tbnz	w0, #1, 15c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15c>
 148:	cmn	x28, #0x2
 14c:	b.ne	158 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>  // b.any
 150:	tst	x1, #0x3
 154:	b.eq	384 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x384>  // b.none
 158:	and	w2, w2, #0xfffffffd
 15c:	ldr	x0, [x25, #8]
 160:	mov	x5, x24
 164:	ldr	x7, [sp, #112]
 168:	mov	x3, x23
 16c:	ldr	x1, [x0]
 170:	mov	x6, x20
 174:	ldr	x12, [x1, #56]
 178:	mov	x1, x28
 17c:	blr	x12
 180:	and	w0, w0, #0xff
 184:	ldp	w2, w5, [sp, #148]
 188:	ldr	w1, [x22, #12]
 18c:	ldr	x3, [sp, #136]
 190:	orr	w1, w1, w2
 194:	str	w1, [x22, #12]
 198:	and	w2, w5, #0xfffffffb
 19c:	cmp	w2, #0x2
 1a0:	b.ne	1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d8>  // b.any
 1a4:	ldr	w1, [sp, #144]
 1a8:	str	x3, [x22]
 1ac:	str	w1, [x22, #8]
 1b0:	str	w5, [x22, #16]
 1b4:	mov	w26, w0
 1b8:	mov	w0, w26
 1bc:	ldp	x19, x20, [sp, #16]
 1c0:	ldp	x21, x22, [sp, #32]
 1c4:	ldp	x23, x24, [sp, #48]
 1c8:	ldp	x25, x26, [sp, #64]
 1cc:	ldp	x27, x28, [sp, #80]
 1d0:	ldp	x29, x30, [sp], #160
 1d4:	ret
 1d8:	ldr	x2, [x22]
 1dc:	cbnz	w26, 21c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x21c>
 1e0:	cbnz	x2, 220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x220>
 1e4:	ldr	w2, [sp, #144]
 1e8:	str	x3, [x22]
 1ec:	str	w2, [x22, #8]
 1f0:	cbz	x3, 200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 1f4:	cbz	w1, 200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 1f8:	ldr	w1, [x19, #16]
 1fc:	tbz	w1, #0, 1b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 200:	ldr	w1, [x22, #12]
 204:	cmp	w1, #0x4
 208:	b.eq	1b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>  // b.none
 20c:	sub	x27, x27, #0x1
 210:	sub	x25, x25, #0x10
 214:	mov	w26, w0
 218:	b	f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 21c:	cbz	x2, 2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 220:	cmp	x3, x2
 224:	b.ne	240 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>  // b.any
 228:	ldr	w0, [x22, #8]
 22c:	ldr	w1, [sp, #144]
 230:	orr	w0, w0, w1
 234:	str	w0, [x22, #8]
 238:	mov	w0, w26
 23c:	b	200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 240:	cbnz	x3, 248 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 244:	cbz	w0, 238 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 248:	ldr	w6, [x22, #16]
 24c:	cmp	w1, #0x3
 250:	b.le	260 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>
 254:	tbz	w1, #0, 2e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e8>
 258:	ldr	w0, [x22, #20]
 25c:	tbz	w0, #1, 2e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e8>
 260:	cmp	w6, #0x0
 264:	b.gt	29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x29c>
 268:	cmp	w5, #0x3
 26c:	b.le	27c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x27c>
 270:	tbz	w5, #0, 338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 274:	ldr	w0, [x19, #16]
 278:	tbz	w0, #1, 338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 27c:	mov	x4, x20
 280:	mov	x3, x24
 284:	mov	x1, x28
 288:	mov	x0, x23
 28c:	str	w5, [sp, #124]
 290:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 294:	ldr	w5, [sp, #124]
 298:	mov	w6, w0
 29c:	cmp	w5, #0x0
 2a0:	b.gt	2f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 2a4:	cmp	w6, #0x3
 2a8:	b.le	2b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2b8>
 2ac:	tbz	w6, #0, 340 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x340>
 2b0:	ldr	w0, [x19, #16]
 2b4:	tbz	w0, #1, 340 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x340>
 2b8:	ldr	x2, [sp, #136]
 2bc:	mov	x4, x20
 2c0:	mov	x3, x24
 2c4:	mov	x1, x28
 2c8:	mov	x0, x23
 2cc:	str	w6, [sp, #124]
 2d0:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>
 2d4:	mov	w5, w0
 2d8:	ldr	w6, [sp, #124]
 2dc:	b	2f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 2e0:	cbnz	x3, 248 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 2e4:	b	238 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 2e8:	cmp	w6, #0x0
 2ec:	csinc	w6, w6, wzr, ne  // ne = any
 2f0:	cmp	w5, #0x0
 2f4:	csinc	w5, w5, wzr, ne  // ne = any
 2f8:	eor	w0, w5, w6
 2fc:	cmp	w0, #0x3
 300:	b.le	350 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 304:	cmp	w5, #0x3
 308:	b.le	348 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 30c:	ldr	x0, [sp, #136]
 310:	str	x0, [x22]
 314:	ldr	w0, [sp, #144]
 318:	mov	w6, w5
 31c:	str	w0, [x22, #8]
 320:	mov	w0, #0x0                   	// #0
 324:	str	w6, [x22, #16]
 328:	tbnz	w6, #1, 330 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x330>
 32c:	tbnz	w6, #0, 200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 330:	mov	w0, #0x0                   	// #0
 334:	b	1b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 338:	mov	w6, #0x1                   	// #1
 33c:	b	2f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 340:	mov	w5, #0x1                   	// #1
 344:	b	2f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 348:	mov	w0, w26
 34c:	b	324 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 350:	str	xzr, [x22]
 354:	and	w5, w5, w6
 358:	cmp	w5, #0x3
 35c:	b.le	370 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x370>
 360:	mov	w0, #0x2                   	// #2
 364:	str	w0, [x22, #16]
 368:	mov	w0, #0x1                   	// #1
 36c:	b	1b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 370:	mov	w0, #0x1                   	// #1
 374:	str	w0, [x22, #16]
 378:	b	200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 37c:	mov	w0, #0x1                   	// #1
 380:	str	w0, [sp, #120]
 384:	mov	w0, w26
 388:	b	20c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20c>
 38c:	ldr	w1, [sp, #120]
 390:	ldr	w0, [sp, #100]
 394:	ands	w0, w0, w1
 398:	str	w0, [sp, #120]
 39c:	b.eq	1b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b8>  // b.none
 3a0:	str	wzr, [sp, #100]
 3a4:	b	f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf0>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x3
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	stp	x23, x24, [sp, #48]
  1c:	mov	x24, x1
  20:	mov	x23, x2
  24:	stp	x25, x26, [sp, #64]
  28:	stp	x27, x28, [sp, #80]
  2c:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  30:	ands	w20, w0, #0xff
  34:	b.ne	12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>  // b.any
  38:	ldr	w26, [x19, #12]
  3c:	tbz	w26, #4, 44 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x44>
  40:	ldr	w26, [x21, #16]
  44:	ldr	w27, [x21, #20]
  48:	add	x28, sp, #0x78
  4c:	and	w25, w26, #0x1
  50:	add	x22, x21, x27, lsl #4
  54:	cbz	x27, 1c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1c8>
  58:	ldr	x4, [x22, #16]
  5c:	str	xzr, [sp, #120]
  60:	stp	wzr, w26, [sp, #128]
  64:	str	xzr, [sp, #136]
  68:	and	w5, w4, #0x1
  6c:	and	x6, x4, #0x2
  70:	tbnz	w4, #1, 84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
  74:	cbnz	w25, 84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
  78:	sub	x27, x27, #0x1
  7c:	sub	x22, x22, #0x10
  80:	b	54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x54>
  84:	cbz	x23, 14c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14c>
  88:	asr	x4, x4, #8
  8c:	cbz	w5, 98 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x98>
  90:	ldr	x0, [x23]
  94:	ldr	x4, [x0, x4]
  98:	add	x2, x23, x4
  9c:	ldr	x0, [x22, #8]
  a0:	str	w5, [sp, #100]
  a4:	str	x6, [sp, #104]
  a8:	mov	x3, x28
  ac:	ldr	x1, [x0]
  b0:	ldr	x4, [x1, #48]
  b4:	mov	x1, x24
  b8:	blr	x4
  bc:	ands	w20, w0, #0xff
  c0:	b.eq	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>  // b.none
  c4:	ldr	x0, [sp, #136]
  c8:	ldr	w5, [sp, #100]
  cc:	cmp	x0, #0x10
  d0:	ldr	x6, [sp, #104]
  d4:	b.ne	e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>  // b.any
  d8:	cbz	w5, e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
  dc:	ldr	x0, [x22, #8]
  e0:	str	x0, [sp, #136]
  e4:	ldr	w0, [sp, #128]
  e8:	cmp	w0, #0x3
  ec:	b.le	fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
  f0:	cbnz	x6, fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
  f4:	and	w0, w0, #0xfffffffd
  f8:	str	w0, [sp, #128]
  fc:	ldr	x0, [x19, #16]
 100:	cbnz	x0, 164 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x164>
 104:	ldp	x0, x1, [x28]
 108:	stp	x0, x1, [x19]
 10c:	ldr	x0, [x28, #16]
 110:	str	x0, [x19, #16]
 114:	ldr	w0, [x19, #8]
 118:	cmp	w0, #0x3
 11c:	b.le	12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>
 120:	tbz	w0, #1, 154 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 124:	ldr	w0, [x21, #16]
 128:	tbnz	w0, #0, 78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 12c:	mov	w0, w20
 130:	ldp	x19, x20, [sp, #16]
 134:	ldp	x21, x22, [sp, #32]
 138:	ldp	x23, x24, [sp, #48]
 13c:	ldp	x25, x26, [sp, #64]
 140:	ldp	x27, x28, [sp, #80]
 144:	ldp	x29, x30, [sp], #144
 148:	ret
 14c:	mov	x2, #0x0                   	// #0
 150:	b	9c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9c>
 154:	tbz	w0, #0, 12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>
 158:	ldr	w0, [x21, #16]
 15c:	tbnz	w0, #1, 78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 160:	b	12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>
 164:	ldr	x1, [x19]
 168:	ldr	x2, [sp, #120]
 16c:	cmp	x1, x2
 170:	b.eq	184 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x184>  // b.none
 174:	str	xzr, [x19]
 178:	mov	w0, #0x2                   	// #2
 17c:	str	w0, [x19, #8]
 180:	b	12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>
 184:	cbz	x1, 19c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x19c>
 188:	ldr	w0, [x19, #8]
 18c:	ldr	w1, [sp, #128]
 190:	orr	w0, w0, w1
 194:	str	w0, [x19, #8]
 198:	b	78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 19c:	ldr	x2, [sp, #136]
 1a0:	cmp	x2, #0x10
 1a4:	b.eq	178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>  // b.none
 1a8:	cmp	x0, #0x10
 1ac:	b.eq	178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>  // b.none
 1b0:	ldr	x1, [x0, #8]
 1b4:	ldr	x0, [x2, #8]
 1b8:	bl	0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>
 1bc:	tst	w0, #0xff
 1c0:	b.ne	188 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x188>  // b.any
 1c4:	b	178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>
 1c8:	ldr	w0, [x19, #8]
 1cc:	cmp	w0, #0x0
 1d0:	cset	w20, ne  // ne = any
 1d4:	b	12c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12c>

vterminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx27__verbose_terminate_handlerEv:

0000000000000000 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
   8:	mov	x29, sp
   c:	ldrb	w1, [x0]
  10:	stp	x19, x20, [sp, #16]
  14:	adrp	x19, 0 <stderr>
  18:	stp	x21, x22, [sp, #32]
  1c:	cbz	w1, 38 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x38>
  20:	ldr	x19, [x19]
  24:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  28:	add	x0, x0, #0x0
  2c:	ldr	x1, [x19]
  30:	bl	0 <fputs>
  34:	bl	0 <abort>
  38:	mov	w1, #0x1                   	// #1
  3c:	strb	w1, [x0]
  40:	bl	0 <__cxa_current_exception_type>
  44:	cbz	x0, 108 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>
  48:	ldr	x20, [x0, #8]
  4c:	ldrb	w0, [x20]
  50:	cmp	w0, #0x2a
  54:	b.ne	5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x5c>  // b.any
  58:	add	x20, x20, #0x1
  5c:	mov	w0, #0xffffffff            	// #-1
  60:	add	x3, sp, #0x3c
  64:	mov	x2, #0x0                   	// #0
  68:	mov	x1, #0x0                   	// #0
  6c:	str	w0, [sp, #60]
  70:	mov	x0, x20
  74:	bl	0 <__cxa_demangle>
  78:	mov	x21, x0
  7c:	ldr	x22, [x19]
  80:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  84:	add	x0, x0, #0x0
  88:	ldr	x1, [x22]
  8c:	bl	0 <fputs>
  90:	ldr	w0, [sp, #60]
  94:	ldr	x1, [x22]
  98:	cbnz	w0, 100 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>
  9c:	mov	x0, x21
  a0:	bl	0 <fputs>
  a4:	ldr	x0, [x19]
  a8:	ldr	x1, [x0]
  ac:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  b0:	add	x0, x0, #0x0
  b4:	bl	0 <fputs>
  b8:	ldr	w0, [sp, #60]
  bc:	cbnz	w0, c8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc8>
  c0:	mov	x0, x21
  c4:	bl	0 <free>
  c8:	bl	0 <__cxa_rethrow>
  cc:	cmp	x1, #0x1
  d0:	b.ne	144 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x144>  // b.any
  d4:	bl	0 <__cxa_begin_catch>
  d8:	ldr	x1, [x0]
  dc:	ldr	x1, [x1, #16]
  e0:	blr	x1
  e4:	mov	x20, x0
  e8:	ldr	x0, [x19]
  ec:	ldr	x1, [x0]
  f0:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  f4:	add	x0, x0, #0x0
  f8:	bl	0 <fputs>
  fc:	b	11c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x11c>
 100:	mov	x0, x20
 104:	b	a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa0>
 108:	ldr	x19, [x19]
 10c:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 110:	add	x0, x0, #0x0
 114:	ldr	x1, [x19]
 118:	b	30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x30>
 11c:	ldr	x0, [x19]
 120:	ldr	x1, [x0]
 124:	mov	x0, x20
 128:	bl	0 <fputs>
 12c:	ldr	x19, [x19]
 130:	mov	w0, #0xa                   	// #10
 134:	ldr	x1, [x19]
 138:	bl	0 <fputc>
 13c:	bl	0 <__cxa_end_catch>
 140:	b	34 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x34>
 144:	bl	0 <__cxa_begin_catch>
 148:	bl	0 <__cxa_end_catch>
 14c:	b	34 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x34>
 150:	mov	x19, x0
 154:	bl	0 <__cxa_end_catch>
 158:	mov	x0, x19
 15c:	bl	0 <_Unwind_Resume>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_fnqual_component_type>:
       0:	sub	w0, w0, #0x1c
       4:	cmp	w0, #0x34
       8:	b.hi	28 <is_fnqual_component_type+0x28>  // b.pmore
       c:	mov	x1, #0x1                   	// #1
      10:	lsl	x0, x1, x0
      14:	mov	x1, #0x1f                  	// #31
      18:	movk	x1, #0x1a, lsl #48
      1c:	tst	x0, x1
      20:	cset	w0, ne  // ne = any
      24:	ret
      28:	mov	w0, #0x0                   	// #0
      2c:	b	24 <is_fnqual_component_type+0x24>

0000000000000030 <d_make_empty>:
      30:	mov	x1, x0
      34:	ldp	w2, w0, [x0, #40]
      38:	cmp	w2, w0
      3c:	b.ge	5c <d_make_empty+0x2c>  // b.tcont
      40:	ldr	x3, [x1, #32]
      44:	mov	w0, #0x18                  	// #24
      48:	smaddl	x0, w2, w0, x3
      4c:	add	w2, w2, #0x1
      50:	str	wzr, [x0, #4]
      54:	str	w2, [x1, #40]
      58:	ret
      5c:	mov	x0, #0x0                   	// #0
      60:	b	58 <d_make_empty+0x28>

0000000000000064 <d_make_comp>:
      64:	mov	x5, x2
      68:	sub	w2, w1, #0x1
      6c:	cmp	w2, #0x4f
      70:	b.hi	a0 <d_make_comp+0x3c>  // b.pmore
      74:	mov	w6, w1
      78:	mov	x4, x3
      7c:	adrp	x1, 0 <is_fnqual_component_type>
      80:	add	x1, x1, #0x0
      84:	ldrb	w1, [x1, w2, uxtw]
      88:	adr	x2, 94 <d_make_comp+0x30>
      8c:	add	x1, x2, w1, sxtb #2
      90:	br	x1
      94:	cmp	x5, #0x0
      98:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      9c:	b.ne	ac <d_make_comp+0x48>  // b.any
      a0:	mov	x0, #0x0                   	// #0
      a4:	ret
      a8:	cbz	x5, a0 <d_make_comp+0x3c>
      ac:	stp	x29, x30, [sp, #-16]!
      b0:	mov	x29, sp
      b4:	bl	30 <d_make_empty>
      b8:	cbz	x0, c4 <d_make_comp+0x60>
      bc:	str	w6, [x0]
      c0:	stp	x5, x4, [x0, #8]
      c4:	ldp	x29, x30, [sp], #16
      c8:	ret
      cc:	cbnz	x3, ac <d_make_comp+0x48>
      d0:	b	a0 <d_make_comp+0x3c>

00000000000000d4 <d_make_name>:
      d4:	mov	x5, x1
      d8:	mov	w4, w2
      dc:	stp	x29, x30, [sp, #-16]!
      e0:	mov	x29, sp
      e4:	bl	30 <d_make_empty>
      e8:	cmp	x0, #0x0
      ec:	ccmp	x5, #0x0, #0x4, ne  // ne = any
      f0:	b.eq	10c <d_make_name+0x38>  // b.none
      f4:	cmp	w4, #0x0
      f8:	b.le	10c <d_make_name+0x38>
      fc:	stp	xzr, x5, [x0]
     100:	str	w4, [x0, #16]
     104:	ldp	x29, x30, [sp], #16
     108:	ret
     10c:	mov	x0, #0x0                   	// #0
     110:	b	104 <d_make_name+0x30>

0000000000000114 <d_make_builtin_type>:
     114:	mov	x4, x1
     118:	stp	x29, x30, [sp, #-16]!
     11c:	mov	x29, sp
     120:	bl	30 <d_make_empty>
     124:	cbz	x0, 134 <d_make_builtin_type+0x20>
     128:	mov	w1, #0x27                  	// #39
     12c:	str	w1, [x0]
     130:	str	x4, [x0, #8]
     134:	ldp	x29, x30, [sp], #16
     138:	ret

000000000000013c <d_ref_qualifier>:
     13c:	ldr	x4, [x0, #24]
     140:	mov	x2, x1
     144:	mov	w3, #0x4f                  	// #79
     148:	ldrb	w1, [x4]
     14c:	cmp	w1, #0x52
     150:	ccmp	w1, w3, #0x4, ne  // ne = any
     154:	b.ne	18c <d_ref_qualifier+0x50>  // b.any
     158:	ldr	w3, [x0, #72]
     15c:	cmp	w1, #0x52
     160:	b.ne	180 <d_ref_qualifier+0x44>  // b.any
     164:	add	w3, w3, #0x2
     168:	mov	w1, #0x1f                  	// #31
     16c:	add	x4, x4, #0x1
     170:	str	x4, [x0, #24]
     174:	str	w3, [x0, #72]
     178:	mov	x3, #0x0                   	// #0
     17c:	b	64 <d_make_comp>
     180:	add	w3, w3, #0x3
     184:	mov	w1, #0x20                  	// #32
     188:	b	16c <d_ref_qualifier+0x30>
     18c:	mov	x0, x2
     190:	ret

0000000000000194 <d_add_substitution>:
     194:	cbz	x1, 1bc <d_add_substitution+0x28>
     198:	ldp	w2, w3, [x0, #56]
     19c:	cmp	w2, w3
     1a0:	b.ge	1bc <d_add_substitution+0x28>  // b.tcont
     1a4:	ldr	x3, [x0, #48]
     1a8:	str	x1, [x3, w2, sxtw #3]
     1ac:	add	w2, w2, #0x1
     1b0:	str	w2, [x0, #56]
     1b4:	mov	w0, #0x1                   	// #1
     1b8:	ret
     1bc:	mov	w0, #0x0                   	// #0
     1c0:	b	1b8 <d_add_substitution+0x24>

00000000000001c4 <d_count_templates_scopes>:
     1c4:	stp	x29, x30, [sp, #-32]!
     1c8:	mov	x29, sp
     1cc:	stp	x19, x20, [sp, #16]
     1d0:	mov	x19, x1
     1d4:	mov	x20, x0
     1d8:	adrp	x1, 0 <is_fnqual_component_type>
     1dc:	add	x1, x1, #0x0
     1e0:	cbz	x19, 248 <d_count_templates_scopes+0x84>
     1e4:	ldr	w0, [x19]
     1e8:	sub	w0, w0, #0x1
     1ec:	cmp	w0, #0x4f
     1f0:	b.hi	248 <d_count_templates_scopes+0x84>  // b.pmore
     1f4:	ldrb	w0, [x1, w0, uxtw]
     1f8:	adr	x2, 204 <d_count_templates_scopes+0x40>
     1fc:	add	x0, x2, w0, sxtb #2
     200:	br	x0
     204:	ldr	w0, [x20, #364]
     208:	add	w0, w0, #0x1
     20c:	str	w0, [x20, #364]
     210:	ldr	w0, [x20, #308]
     214:	cmp	w0, #0x800
     218:	b.gt	248 <d_count_templates_scopes+0x84>
     21c:	ldr	x1, [x19, #8]
     220:	add	w0, w0, #0x1
     224:	str	w0, [x20, #308]
     228:	mov	x0, x20
     22c:	bl	1c4 <d_count_templates_scopes>
     230:	ldr	x1, [x19, #16]
     234:	mov	x0, x20
     238:	bl	1c4 <d_count_templates_scopes>
     23c:	ldr	w0, [x20, #308]
     240:	sub	w0, w0, #0x1
     244:	str	w0, [x20, #308]
     248:	ldp	x19, x20, [sp, #16]
     24c:	ldp	x29, x30, [sp], #32
     250:	ret
     254:	ldr	x0, [x19, #8]
     258:	ldr	w0, [x0]
     25c:	cmp	w0, #0x5
     260:	b.ne	210 <d_count_templates_scopes+0x4c>  // b.any
     264:	ldr	w0, [x20, #348]
     268:	add	w0, w0, #0x1
     26c:	str	w0, [x20, #348]
     270:	b	210 <d_count_templates_scopes+0x4c>
     274:	ldr	x19, [x19, #16]
     278:	b	1e0 <d_count_templates_scopes+0x1c>
     27c:	ldr	x19, [x19, #8]
     280:	b	1e0 <d_count_templates_scopes+0x1c>

0000000000000284 <d_print_flush>:
     284:	stp	x29, x30, [sp, #-32]!
     288:	mov	x29, sp
     28c:	ldr	x1, [x0, #256]
     290:	str	x19, [sp, #16]
     294:	mov	x19, x0
     298:	strb	wzr, [x0, x1]
     29c:	ldp	x3, x2, [x0, #272]
     2a0:	blr	x3
     2a4:	str	xzr, [x19, #256]
     2a8:	ldr	x0, [x19, #320]
     2ac:	add	x0, x0, #0x1
     2b0:	str	x0, [x19, #320]
     2b4:	ldr	x19, [sp, #16]
     2b8:	ldp	x29, x30, [sp], #32
     2bc:	ret

00000000000002c0 <d_append_char>:
     2c0:	stp	x29, x30, [sp, #-32]!
     2c4:	mov	x29, sp
     2c8:	stp	x19, x20, [sp, #16]
     2cc:	and	w20, w1, #0xff
     2d0:	mov	x19, x0
     2d4:	ldr	x1, [x0, #256]
     2d8:	cmp	x1, #0xff
     2dc:	b.ne	2e4 <d_append_char+0x24>  // b.any
     2e0:	bl	284 <d_print_flush>
     2e4:	ldr	x0, [x19, #256]
     2e8:	add	x1, x0, #0x1
     2ec:	str	x1, [x19, #256]
     2f0:	strb	w20, [x19, x0]
     2f4:	strb	w20, [x19, #264]
     2f8:	ldp	x19, x20, [sp, #16]
     2fc:	ldp	x29, x30, [sp], #32
     300:	ret

0000000000000304 <d_append_buffer>:
     304:	stp	x29, x30, [sp, #-48]!
     308:	mov	x29, sp
     30c:	stp	x19, x20, [sp, #16]
     310:	mov	x19, x1
     314:	add	x20, x1, x2
     318:	str	x21, [sp, #32]
     31c:	mov	x21, x0
     320:	cmp	x19, x20
     324:	b.ne	338 <d_append_buffer+0x34>  // b.any
     328:	ldp	x19, x20, [sp, #16]
     32c:	ldr	x21, [sp, #32]
     330:	ldp	x29, x30, [sp], #48
     334:	ret
     338:	ldrb	w1, [x19], #1
     33c:	mov	x0, x21
     340:	bl	2c0 <d_append_char>
     344:	b	320 <d_append_buffer+0x1c>

0000000000000348 <d_pack_length>:
     348:	mov	x1, x0
     34c:	mov	w0, #0x0                   	// #0
     350:	cbz	x1, 368 <d_pack_length+0x20>
     354:	ldr	w2, [x1]
     358:	cmp	w2, #0x2f
     35c:	b.ne	368 <d_pack_length+0x20>  // b.any
     360:	ldr	x2, [x1, #8]
     364:	cbnz	x2, 36c <d_pack_length+0x24>
     368:	ret
     36c:	add	w0, w0, #0x1
     370:	ldr	x1, [x1, #16]
     374:	b	350 <d_pack_length+0x8>

0000000000000378 <d_append_string>:
     378:	stp	x29, x30, [sp, #-32]!
     37c:	mov	x29, sp
     380:	stp	x19, x20, [sp, #16]
     384:	mov	x20, x0
     388:	mov	x19, x1
     38c:	mov	x0, x1
     390:	bl	0 <strlen>
     394:	mov	x1, x19
     398:	mov	x2, x0
     39c:	mov	x0, x20
     3a0:	ldp	x19, x20, [sp, #16]
     3a4:	ldp	x29, x30, [sp], #32
     3a8:	b	304 <d_append_buffer>

00000000000003ac <d_append_num>:
     3ac:	stp	x29, x30, [sp, #-64]!
     3b0:	mov	w2, w1
     3b4:	adrp	x1, 0 <is_fnqual_component_type>
     3b8:	mov	x29, sp
     3bc:	stp	x19, x20, [sp, #16]
     3c0:	add	x19, sp, #0x20
     3c4:	mov	x20, x0
     3c8:	add	x1, x1, #0x0
     3cc:	mov	x0, x19
     3d0:	bl	0 <sprintf>
     3d4:	mov	x1, x19
     3d8:	mov	x0, x20
     3dc:	bl	378 <d_append_string>
     3e0:	ldp	x19, x20, [sp, #16]
     3e4:	ldp	x29, x30, [sp], #64
     3e8:	ret

00000000000003ec <d_number.isra.0>:
     3ec:	mov	x1, x0
     3f0:	ldr	x0, [x0]
     3f4:	ldrb	w3, [x0]
     3f8:	cmp	w3, #0x6e
     3fc:	b.ne	438 <d_number.isra.0+0x4c>  // b.any
     400:	add	x2, x0, #0x1
     404:	str	x2, [x1]
     408:	mov	w5, #0x1                   	// #1
     40c:	ldrb	w3, [x0, #1]
     410:	mov	w0, #0x0                   	// #0
     414:	mov	w6, #0x7fffffff            	// #2147483647
     418:	mov	w4, #0xa                   	// #10
     41c:	sub	w2, w3, #0x30
     420:	and	w7, w2, #0xff
     424:	cmp	w7, #0x9
     428:	b.ls	440 <d_number.isra.0+0x54>  // b.plast
     42c:	cbz	w5, 434 <d_number.isra.0+0x48>
     430:	neg	w0, w0
     434:	ret
     438:	mov	w5, #0x0                   	// #0
     43c:	b	410 <d_number.isra.0+0x24>
     440:	sub	w2, w6, w2
     444:	udiv	w2, w2, w4
     448:	cmp	w2, w0
     44c:	b.lt	46c <d_number.isra.0+0x80>  // b.tstop
     450:	ldr	x2, [x1]
     454:	madd	w0, w0, w4, w3
     458:	add	x3, x2, #0x1
     45c:	str	x3, [x1]
     460:	sub	w0, w0, #0x30
     464:	ldrb	w3, [x2, #1]
     468:	b	41c <d_number.isra.0+0x30>
     46c:	mov	w0, #0xffffffff            	// #-1
     470:	b	434 <d_number.isra.0+0x48>

0000000000000474 <d_number_component>:
     474:	mov	x4, x0
     478:	stp	x29, x30, [sp, #-16]!
     47c:	mov	x29, sp
     480:	bl	30 <d_make_empty>
     484:	mov	x8, x0
     488:	cbz	x0, 4a4 <d_number_component+0x30>
     48c:	mov	w0, #0x42                  	// #66
     490:	str	w0, [x8]
     494:	add	x0, x4, #0x18
     498:	bl	3ec <d_number.isra.0>
     49c:	sxtw	x0, w0
     4a0:	str	x0, [x8, #8]
     4a4:	mov	x0, x8
     4a8:	ldp	x29, x30, [sp], #16
     4ac:	ret

00000000000004b0 <d_compact_number>:
     4b0:	mov	x8, x0
     4b4:	ldr	x0, [x0, #24]
     4b8:	ldrb	w0, [x0]
     4bc:	cmp	w0, #0x5f
     4c0:	b.eq	514 <d_compact_number+0x64>  // b.none
     4c4:	cmp	w0, #0x6e
     4c8:	b.ne	4e0 <d_compact_number+0x30>  // b.any
     4cc:	mov	w0, #0xffffffff            	// #-1
     4d0:	ret
     4d4:	mov	w0, #0xffffffff            	// #-1
     4d8:	ldp	x29, x30, [sp], #16
     4dc:	ret
     4e0:	stp	x29, x30, [sp, #-16]!
     4e4:	add	x0, x8, #0x18
     4e8:	mov	x29, sp
     4ec:	bl	3ec <d_number.isra.0>
     4f0:	adds	w0, w0, #0x1
     4f4:	b.mi	4d4 <d_compact_number+0x24>  // b.first
     4f8:	ldr	x1, [x8, #24]
     4fc:	ldrb	w2, [x1]
     500:	cmp	w2, #0x5f
     504:	b.ne	4d4 <d_compact_number+0x24>  // b.any
     508:	add	x1, x1, #0x1
     50c:	str	x1, [x8, #24]
     510:	b	4d8 <d_compact_number+0x28>
     514:	ldr	x1, [x8, #24]
     518:	mov	w0, #0x0                   	// #0
     51c:	ldrb	w2, [x1]
     520:	cmp	w2, #0x5f
     524:	b.ne	4cc <d_compact_number+0x1c>  // b.any
     528:	add	x1, x1, #0x1
     52c:	str	x1, [x8, #24]
     530:	ret

0000000000000534 <d_template_param>:
     534:	ldr	x1, [x0, #24]
     538:	ldrb	w2, [x1]
     53c:	cmp	w2, #0x54
     540:	b.eq	558 <d_template_param+0x24>  // b.none
     544:	mov	x0, #0x0                   	// #0
     548:	ret
     54c:	mov	x0, #0x0                   	// #0
     550:	ldp	x29, x30, [sp], #16
     554:	ret
     558:	stp	x29, x30, [sp, #-16]!
     55c:	add	x1, x1, #0x1
     560:	mov	x9, x0
     564:	mov	x29, sp
     568:	str	x1, [x0, #24]
     56c:	bl	4b0 <d_compact_number>
     570:	sxtw	x4, w0
     574:	tbnz	w4, #31, 54c <d_template_param+0x18>
     578:	mov	x0, x9
     57c:	bl	30 <d_make_empty>
     580:	cbz	x0, 550 <d_template_param+0x1c>
     584:	mov	w1, #0x5                   	// #5
     588:	str	w1, [x0]
     58c:	str	x4, [x0, #8]
     590:	b	550 <d_template_param+0x1c>

0000000000000594 <d_source_name>:
     594:	stp	x29, x30, [sp, #-48]!
     598:	mov	x29, sp
     59c:	stp	x19, x20, [sp, #16]
     5a0:	mov	x19, x0
     5a4:	add	x0, x0, #0x18
     5a8:	str	x21, [sp, #32]
     5ac:	bl	3ec <d_number.isra.0>
     5b0:	cmp	w0, #0x0
     5b4:	b.le	694 <d_source_name+0x100>
     5b8:	mov	w20, w0
     5bc:	sxtw	x1, w0
     5c0:	ldr	x0, [x19, #8]
     5c4:	ldr	x21, [x19, #24]
     5c8:	sub	x0, x0, x21
     5cc:	cmp	x0, w20, sxtw
     5d0:	b.lt	68c <d_source_name+0xf8>  // b.tstop
     5d4:	ldr	w2, [x19, #16]
     5d8:	add	x0, x21, x1
     5dc:	str	x0, [x19, #24]
     5e0:	tbz	w2, #2, 5f8 <d_source_name+0x64>
     5e4:	ldrb	w1, [x21, x1]
     5e8:	cmp	w1, #0x24
     5ec:	b.ne	5f8 <d_source_name+0x64>  // b.any
     5f0:	add	x0, x0, #0x1
     5f4:	str	x0, [x19, #24]
     5f8:	cmp	w20, #0x9
     5fc:	b.le	680 <d_source_name+0xec>
     600:	adrp	x1, 0 <is_fnqual_component_type>
     604:	mov	x0, x21
     608:	add	x1, x1, #0x0
     60c:	mov	x2, #0x8                   	// #8
     610:	bl	0 <memcmp>
     614:	cbnz	w0, 680 <d_source_name+0xec>
     618:	ldrb	w0, [x21, #8]
     61c:	sub	w0, w0, #0x24
     620:	and	w0, w0, #0xff
     624:	cmp	w0, #0x3b
     628:	b.hi	680 <d_source_name+0xec>  // b.pmore
     62c:	mov	x1, #0x401                 	// #1025
     630:	movk	x1, #0x800, lsl #48
     634:	lsr	x0, x1, x0
     638:	tbz	w0, #0, 680 <d_source_name+0xec>
     63c:	ldrb	w0, [x21, #9]
     640:	cmp	w0, #0x4e
     644:	b.ne	680 <d_source_name+0xec>  // b.any
     648:	ldr	w0, [x19, #72]
     64c:	adrp	x1, 0 <is_fnqual_component_type>
     650:	add	x1, x1, #0x0
     654:	mov	w2, #0x15                  	// #21
     658:	add	w0, w0, #0x16
     65c:	sub	w20, w0, w20
     660:	str	w20, [x19, #72]
     664:	mov	x0, x19
     668:	bl	d4 <d_make_name>
     66c:	str	x0, [x19, #64]
     670:	ldp	x19, x20, [sp, #16]
     674:	ldr	x21, [sp, #32]
     678:	ldp	x29, x30, [sp], #48
     67c:	ret
     680:	mov	w2, w20
     684:	mov	x1, x21
     688:	b	664 <d_source_name+0xd0>
     68c:	mov	x0, #0x0                   	// #0
     690:	b	66c <d_source_name+0xd8>
     694:	mov	x0, #0x0                   	// #0
     698:	b	670 <d_source_name+0xdc>

000000000000069c <d_abi_tags>:
     69c:	stp	x29, x30, [sp, #-48]!
     6a0:	mov	x29, sp
     6a4:	str	x21, [sp, #32]
     6a8:	ldr	x21, [x0, #64]
     6ac:	stp	x19, x20, [sp, #16]
     6b0:	mov	x19, x0
     6b4:	mov	x20, x1
     6b8:	ldr	x0, [x19, #24]
     6bc:	ldrb	w1, [x0]
     6c0:	cmp	w1, #0x42
     6c4:	b.eq	6e0 <d_abi_tags+0x44>  // b.none
     6c8:	str	x21, [x19, #64]
     6cc:	mov	x0, x20
     6d0:	ldp	x19, x20, [sp, #16]
     6d4:	ldr	x21, [sp, #32]
     6d8:	ldp	x29, x30, [sp], #48
     6dc:	ret
     6e0:	add	x0, x0, #0x1
     6e4:	str	x0, [x19, #24]
     6e8:	mov	x0, x19
     6ec:	bl	594 <d_source_name>
     6f0:	mov	x3, x0
     6f4:	mov	x2, x20
     6f8:	mov	x0, x19
     6fc:	mov	w1, #0x4c                  	// #76
     700:	bl	64 <d_make_comp>
     704:	mov	x20, x0
     708:	b	6b8 <d_abi_tags+0x1c>

000000000000070c <d_call_offset>:
     70c:	mov	x8, x0
     710:	cbnz	w1, 740 <d_call_offset+0x34>
     714:	ldr	x0, [x0, #24]
     718:	ldrb	w1, [x0]
     71c:	cbnz	w1, 734 <d_call_offset+0x28>
     720:	mov	w0, #0x0                   	// #0
     724:	ret
     728:	mov	w0, #0x0                   	// #0
     72c:	ldp	x29, x30, [sp], #16
     730:	ret
     734:	add	x1, x0, #0x1
     738:	str	x1, [x8, #24]
     73c:	ldrb	w1, [x0]
     740:	stp	x29, x30, [sp, #-16]!
     744:	cmp	w1, #0x68
     748:	mov	x29, sp
     74c:	b.ne	778 <d_call_offset+0x6c>  // b.any
     750:	add	x0, x8, #0x18
     754:	bl	3ec <d_number.isra.0>
     758:	ldr	x0, [x8, #24]
     75c:	ldrb	w1, [x0]
     760:	cmp	w1, #0x5f
     764:	b.ne	728 <d_call_offset+0x1c>  // b.any
     768:	add	x0, x0, #0x1
     76c:	str	x0, [x8, #24]
     770:	mov	w0, #0x1                   	// #1
     774:	b	72c <d_call_offset+0x20>
     778:	cmp	w1, #0x76
     77c:	b.ne	728 <d_call_offset+0x1c>  // b.any
     780:	add	x9, x8, #0x18
     784:	mov	x0, x9
     788:	bl	3ec <d_number.isra.0>
     78c:	ldr	x0, [x8, #24]
     790:	ldrb	w1, [x0]
     794:	cmp	w1, #0x5f
     798:	b.ne	728 <d_call_offset+0x1c>  // b.any
     79c:	add	x0, x0, #0x1
     7a0:	str	x0, [x8, #24]
     7a4:	mov	x0, x9
     7a8:	b	754 <d_call_offset+0x48>

00000000000007ac <next_is_type_qual.isra.0>:
     7ac:	ldrb	w2, [x0]
     7b0:	sub	w1, w2, #0x4b
     7b4:	and	w1, w1, #0xff
     7b8:	cmp	w1, #0x27
     7bc:	b.ls	7d0 <next_is_type_qual.isra.0+0x24>  // b.plast
     7c0:	cmp	w2, #0x44
     7c4:	b.eq	7e4 <next_is_type_qual.isra.0+0x38>  // b.none
     7c8:	mov	w0, #0x0                   	// #0
     7cc:	ret
     7d0:	mov	x0, #0x801                 	// #2049
     7d4:	movk	x0, #0x80, lsl #32
     7d8:	lsr	x0, x0, x1
     7dc:	and	w0, w0, #0x1
     7e0:	b	7cc <next_is_type_qual.isra.0+0x20>
     7e4:	ldrb	w0, [x0, #1]
     7e8:	and	w1, w0, #0xffffffdf
     7ec:	sub	w0, w0, #0x77
     7f0:	and	w0, w0, #0xff
     7f4:	cmp	w1, #0x4f
     7f8:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     7fc:	cset	w0, ls  // ls = plast
     800:	b	7cc <next_is_type_qual.isra.0+0x20>

0000000000000804 <op_is_new_cast.isra.0>:
     804:	ldr	x0, [x0]
     808:	ldrb	w1, [x0, #1]
     80c:	cmp	w1, #0x63
     810:	b.ne	83c <op_is_new_cast.isra.0+0x38>  // b.any
     814:	ldrb	w0, [x0]
     818:	sub	w1, w0, #0x63
     81c:	and	w1, w1, #0xff
     820:	cmp	w1, #0x1
     824:	b.ls	844 <op_is_new_cast.isra.0+0x40>  // b.plast
     828:	sub	w0, w0, #0x72
     82c:	and	w0, w0, #0xff
     830:	cmp	w0, #0x1
     834:	cset	w0, ls  // ls = plast
     838:	ret
     83c:	mov	w0, #0x0                   	// #0
     840:	b	838 <op_is_new_cast.isra.0+0x34>
     844:	mov	w0, #0x1                   	// #1
     848:	b	838 <op_is_new_cast.isra.0+0x34>

000000000000084c <d_discriminator>:
     84c:	mov	x8, x0
     850:	ldr	x0, [x0, #24]
     854:	ldrb	w1, [x0]
     858:	cmp	w1, #0x5f
     85c:	b.eq	868 <d_discriminator+0x1c>  // b.none
     860:	mov	w0, #0x1                   	// #1
     864:	ret
     868:	stp	x29, x30, [sp, #-16]!
     86c:	add	x1, x0, #0x1
     870:	mov	x29, sp
     874:	str	x1, [x8, #24]
     878:	ldrb	w1, [x0, #1]
     87c:	cmp	w1, #0x5f
     880:	b.ne	8cc <d_discriminator+0x80>  // b.any
     884:	add	x0, x0, #0x2
     888:	mov	w9, #0x2                   	// #2
     88c:	str	x0, [x8, #24]
     890:	add	x0, x8, #0x18
     894:	bl	3ec <d_number.isra.0>
     898:	tbnz	w0, #31, 8d4 <d_discriminator+0x88>
     89c:	cmp	w9, #0x1
     8a0:	ccmp	w0, #0x9, #0x4, gt
     8a4:	b.le	8c0 <d_discriminator+0x74>
     8a8:	ldr	x0, [x8, #24]
     8ac:	ldrb	w1, [x0]
     8b0:	cmp	w1, #0x5f
     8b4:	b.ne	8d4 <d_discriminator+0x88>  // b.any
     8b8:	add	x0, x0, #0x1
     8bc:	str	x0, [x8, #24]
     8c0:	mov	w0, #0x1                   	// #1
     8c4:	ldp	x29, x30, [sp], #16
     8c8:	ret
     8cc:	mov	w9, #0x1                   	// #1
     8d0:	b	890 <d_discriminator+0x44>
     8d4:	mov	w0, #0x0                   	// #0
     8d8:	b	8c4 <d_discriminator+0x78>

00000000000008dc <d_index_template_argument.part.0>:
     8dc:	cbnz	x0, 8e4 <d_index_template_argument.part.0+0x8>
     8e0:	ret
     8e4:	ldr	w2, [x0]
     8e8:	cmp	w2, #0x2f
     8ec:	b.ne	910 <d_index_template_argument.part.0+0x34>  // b.any
     8f0:	cmp	w1, #0x0
     8f4:	b.le	904 <d_index_template_argument.part.0+0x28>
     8f8:	sub	w1, w1, #0x1
     8fc:	ldr	x0, [x0, #16]
     900:	b	8dc <d_index_template_argument.part.0>
     904:	b.ne	910 <d_index_template_argument.part.0+0x34>  // b.any
     908:	ldr	x0, [x0, #8]
     90c:	b	8e0 <d_index_template_argument.part.0+0x4>
     910:	mov	x0, #0x0                   	// #0
     914:	b	8e0 <d_index_template_argument.part.0+0x4>

0000000000000918 <d_growable_string_callback_adapter>:
     918:	stp	x29, x30, [sp, #-48]!
     91c:	mov	x29, sp
     920:	stp	x19, x20, [sp, #16]
     924:	mov	x19, x2
     928:	stp	x21, x22, [sp, #32]
     92c:	mov	x22, x0
     930:	mov	x21, x1
     934:	ldp	x0, x20, [x2, #8]
     938:	add	x1, x1, #0x1
     93c:	add	x1, x1, x0
     940:	cmp	x1, x20
     944:	b.ls	9ac <d_growable_string_callback_adapter+0x94>  // b.plast
     948:	ldr	w0, [x2, #24]
     94c:	cbnz	w0, 98c <d_growable_string_callback_adapter+0x74>
     950:	cmp	x20, #0x0
     954:	mov	x0, #0x2                   	// #2
     958:	csel	x20, x20, x0, ne  // ne = any
     95c:	cmp	x1, x20
     960:	b.hi	99c <d_growable_string_callback_adapter+0x84>  // b.pmore
     964:	ldr	x0, [x19]
     968:	mov	x1, x20
     96c:	bl	0 <realloc>
     970:	cbnz	x0, 9a4 <d_growable_string_callback_adapter+0x8c>
     974:	ldr	x0, [x19]
     978:	bl	0 <free>
     97c:	stp	xzr, xzr, [x19]
     980:	mov	w0, #0x1                   	// #1
     984:	str	xzr, [x19, #16]
     988:	str	w0, [x19, #24]
     98c:	ldp	x19, x20, [sp, #16]
     990:	ldp	x21, x22, [sp, #32]
     994:	ldp	x29, x30, [sp], #48
     998:	ret
     99c:	lsl	x20, x20, #1
     9a0:	b	95c <d_growable_string_callback_adapter+0x44>
     9a4:	str	x0, [x19]
     9a8:	str	x20, [x19, #16]
     9ac:	ldr	w0, [x19, #24]
     9b0:	cbnz	w0, 98c <d_growable_string_callback_adapter+0x74>
     9b4:	ldp	x3, x0, [x19]
     9b8:	mov	x2, x21
     9bc:	mov	x1, x22
     9c0:	add	x0, x3, x0
     9c4:	bl	0 <memcpy>
     9c8:	ldp	x0, x1, [x19]
     9cc:	add	x0, x0, x21
     9d0:	strb	wzr, [x0, x1]
     9d4:	ldr	x1, [x19, #8]
     9d8:	add	x21, x1, x21
     9dc:	str	x21, [x19, #8]
     9e0:	b	98c <d_growable_string_callback_adapter+0x74>

00000000000009e4 <d_lookup_template_argument.isra.0>:
     9e4:	mov	x2, x0
     9e8:	ldr	x0, [x0, #288]
     9ec:	cbnz	x0, 9fc <d_lookup_template_argument.isra.0+0x18>
     9f0:	mov	w1, #0x1                   	// #1
     9f4:	str	w1, [x2, #304]
     9f8:	ret
     9fc:	ldr	x1, [x1]
     a00:	ldr	x0, [x0, #8]
     a04:	ldr	x0, [x0, #16]
     a08:	tbnz	w1, #31, 9f8 <d_lookup_template_argument.isra.0+0x14>
     a0c:	b	8dc <d_index_template_argument.part.0>

0000000000000a10 <d_find_pack>:
     a10:	stp	x29, x30, [sp, #-64]!
     a14:	mov	x29, sp
     a18:	str	x23, [sp, #48]
     a1c:	mov	x23, #0x8001                	// #32769
     a20:	movk	x23, #0x410, lsl #16
     a24:	stp	x19, x20, [sp, #16]
     a28:	movk	x23, #0xc600, lsl #32
     a2c:	mov	x20, x0
     a30:	mov	x19, x1
     a34:	stp	x21, x22, [sp, #32]
     a38:	adrp	x21, 0 <is_fnqual_component_type>
     a3c:	add	x21, x21, #0x0
     a40:	mov	x22, #0x1                   	// #1
     a44:	movk	x23, #0x19, lsl #48
     a48:	cbz	x19, ad0 <d_find_pack+0xc0>
     a4c:	ldr	w1, [x19]
     a50:	cmp	w1, #0x8
     a54:	b.ls	a90 <d_find_pack+0x80>  // b.plast
     a58:	sub	w1, w1, #0x18
     a5c:	cmp	w1, #0x34
     a60:	b.ls	a78 <d_find_pack+0x68>  // b.plast
     a64:	ldr	x1, [x19, #8]
     a68:	mov	x0, x20
     a6c:	bl	a10 <d_find_pack>
     a70:	cbz	x0, a88 <d_find_pack+0x78>
     a74:	b	abc <d_find_pack+0xac>
     a78:	lsl	x1, x22, x1
     a7c:	tst	x1, x23
     a80:	b.ne	ad0 <d_find_pack+0xc0>  // b.any
     a84:	tbz	w1, #27, a64 <d_find_pack+0x54>
     a88:	ldr	x19, [x19, #16]
     a8c:	b	a48 <d_find_pack+0x38>
     a90:	ldrb	w0, [x21, w1, uxtw]
     a94:	adr	x1, aa0 <d_find_pack+0x90>
     a98:	add	x0, x1, w0, sxtb #2
     a9c:	br	x0
     aa0:	add	x1, x19, #0x8
     aa4:	mov	x0, x20
     aa8:	bl	9e4 <d_lookup_template_argument.isra.0>
     aac:	cbz	x0, ad0 <d_find_pack+0xc0>
     ab0:	ldr	w1, [x0]
     ab4:	cmp	w1, #0x2f
     ab8:	b.ne	ad0 <d_find_pack+0xc0>  // b.any
     abc:	ldp	x19, x20, [sp, #16]
     ac0:	ldp	x21, x22, [sp, #32]
     ac4:	ldr	x23, [sp, #48]
     ac8:	ldp	x29, x30, [sp], #64
     acc:	ret
     ad0:	mov	x0, #0x0                   	// #0
     ad4:	b	abc <d_find_pack+0xac>

0000000000000ad8 <d_substitution>:
     ad8:	stp	x29, x30, [sp, #-32]!
     adc:	mov	x29, sp
     ae0:	ldr	x2, [x0, #24]
     ae4:	str	x19, [sp, #16]
     ae8:	mov	x19, x0
     aec:	ldrb	w0, [x2]
     af0:	cmp	w0, #0x53
     af4:	b.ne	cac <d_substitution+0x1d4>  // b.any
     af8:	add	x0, x2, #0x1
     afc:	str	x0, [x19, #24]
     b00:	ldrb	w0, [x2, #1]
     b04:	cbz	w0, bd8 <d_substitution+0x100>
     b08:	add	x0, x2, #0x2
     b0c:	str	x0, [x19, #24]
     b10:	ldrb	w0, [x2, #1]
     b14:	sub	w2, w0, #0x30
     b18:	and	w2, w2, #0xff
     b1c:	cmp	w2, #0x2f
     b20:	b.hi	bd8 <d_substitution+0x100>  // b.pmore
     b24:	mov	w3, #0xfffe03ff            	// #-130049
     b28:	movk	x3, #0x87ff, lsl #32
     b2c:	lsr	x2, x3, x2
     b30:	tbz	w2, #0, bd8 <d_substitution+0x100>
     b34:	cmp	w0, #0x5f
     b38:	b.ne	bb0 <d_substitution+0xd8>  // b.any
     b3c:	mov	w0, #0x0                   	// #0
     b40:	ldr	w1, [x19, #56]
     b44:	cmp	w1, w0
     b48:	b.ls	cac <d_substitution+0x1d4>  // b.plast
     b4c:	ldr	x1, [x19, #48]
     b50:	ldr	x1, [x1, w0, uxtw #3]
     b54:	mov	x0, x1
     b58:	ldr	x19, [sp, #16]
     b5c:	ldp	x29, x30, [sp], #32
     b60:	ret
     b64:	mov	w2, w1
     b68:	sub	w1, w0, #0x30
     b6c:	and	w1, w1, #0xff
     b70:	cmp	w1, #0x9
     b74:	b.hi	bbc <d_substitution+0xe4>  // b.pmore
     b78:	madd	w0, w2, w3, w0
     b7c:	sub	w1, w0, #0x30
     b80:	cmp	w2, w1
     b84:	b.hi	cac <d_substitution+0x1d4>  // b.pmore
     b88:	ldr	x2, [x19, #24]
     b8c:	ldrb	w0, [x2]
     b90:	cbz	w0, b64 <d_substitution+0x8c>
     b94:	add	x0, x2, #0x1
     b98:	str	x0, [x19, #24]
     b9c:	ldrb	w0, [x2]
     ba0:	cmp	w0, #0x5f
     ba4:	b.ne	b64 <d_substitution+0x8c>  // b.any
     ba8:	add	w0, w1, #0x1
     bac:	b	b40 <d_substitution+0x68>
     bb0:	mov	w2, #0x0                   	// #0
     bb4:	mov	w3, #0x24                  	// #36
     bb8:	b	b68 <d_substitution+0x90>
     bbc:	sub	w1, w0, #0x41
     bc0:	and	w1, w1, #0xff
     bc4:	cmp	w1, #0x19
     bc8:	b.hi	cac <d_substitution+0x1d4>  // b.pmore
     bcc:	madd	w0, w2, w3, w0
     bd0:	sub	w1, w0, #0x37
     bd4:	b	b80 <d_substitution+0xa8>
     bd8:	ldr	w5, [x19, #16]
     bdc:	and	w1, w1, #0x1
     be0:	ands	w2, w5, #0x8
     be4:	csel	w1, w1, wzr, eq  // eq = none
     be8:	ubfx	x5, x5, #3, #1
     bec:	cbz	w1, c08 <d_substitution+0x130>
     bf0:	ldr	x1, [x19, #24]
     bf4:	ldrb	w1, [x1]
     bf8:	sub	w1, w1, #0x43
     bfc:	and	w1, w1, #0xff
     c00:	cmp	w1, #0x1
     c04:	csinc	w5, w5, wzr, hi  // hi = pmore
     c08:	adrp	x4, 0 <is_fnqual_component_type>
     c0c:	add	x4, x4, #0x0
     c10:	mov	x1, #0x7                   	// #7
     c14:	ldrb	w2, [x4]
     c18:	cmp	w2, w0
     c1c:	b.ne	cc0 <d_substitution+0x1e8>  // b.any
     c20:	ldr	x6, [x4, #40]
     c24:	cbz	x6, c4c <d_substitution+0x174>
     c28:	ldr	w7, [x4, #48]
     c2c:	mov	x0, x19
     c30:	bl	30 <d_make_empty>
     c34:	cbz	x0, c48 <d_substitution+0x170>
     c38:	mov	w1, #0x18                  	// #24
     c3c:	str	w1, [x0]
     c40:	str	x6, [x0, #8]
     c44:	str	w7, [x0, #16]
     c48:	str	x0, [x19, #64]
     c4c:	cbz	w5, cb4 <d_substitution+0x1dc>
     c50:	ldr	x5, [x4, #24]
     c54:	ldr	w4, [x4, #32]
     c58:	ldr	w0, [x19, #72]
     c5c:	add	w0, w0, w4
     c60:	str	w0, [x19, #72]
     c64:	mov	x0, x19
     c68:	bl	30 <d_make_empty>
     c6c:	mov	x1, x0
     c70:	cbz	x0, c84 <d_substitution+0x1ac>
     c74:	mov	w0, #0x18                  	// #24
     c78:	str	w0, [x1]
     c7c:	str	x5, [x1, #8]
     c80:	str	w4, [x1, #16]
     c84:	ldr	x0, [x19, #24]
     c88:	ldrb	w0, [x0]
     c8c:	cmp	w0, #0x42
     c90:	b.ne	b54 <d_substitution+0x7c>  // b.any
     c94:	mov	x0, x19
     c98:	bl	69c <d_abi_tags>
     c9c:	mov	x1, x0
     ca0:	mov	x0, x19
     ca4:	bl	194 <d_add_substitution>
     ca8:	cbnz	w0, b54 <d_substitution+0x7c>
     cac:	mov	x1, #0x0                   	// #0
     cb0:	b	b54 <d_substitution+0x7c>
     cb4:	ldr	x5, [x4, #8]
     cb8:	ldr	w4, [x4, #16]
     cbc:	b	c58 <d_substitution+0x180>
     cc0:	add	x4, x4, #0x38
     cc4:	subs	x1, x1, #0x1
     cc8:	b.ne	c14 <d_substitution+0x13c>  // b.any
     ccc:	b	cac <d_substitution+0x1d4>

0000000000000cd0 <d_expr_primary>:
     cd0:	ldr	x1, [x0, #24]
     cd4:	ldrb	w2, [x1]
     cd8:	cmp	w2, #0x4c
     cdc:	b.eq	cf8 <d_expr_primary+0x28>  // b.none
     ce0:	mov	x0, #0x0                   	// #0
     ce4:	ret
     ce8:	mov	x0, #0x0                   	// #0
     cec:	ldr	x19, [sp, #16]
     cf0:	ldp	x29, x30, [sp], #32
     cf4:	ret
     cf8:	stp	x29, x30, [sp, #-32]!
     cfc:	add	x2, x1, #0x1
     d00:	mov	w3, #0x5a                  	// #90
     d04:	mov	x29, sp
     d08:	str	x19, [sp, #16]
     d0c:	mov	x19, x0
     d10:	str	x2, [x0, #24]
     d14:	ldrb	w2, [x1, #1]
     d18:	cmp	w2, #0x5f
     d1c:	ccmp	w2, w3, #0x4, ne  // ne = any
     d20:	b.ne	d74 <d_expr_primary+0xa4>  // b.any
     d24:	cmp	w2, #0x5f
     d28:	b.ne	d34 <d_expr_primary+0x64>  // b.any
     d2c:	add	x1, x1, #0x2
     d30:	str	x1, [x0, #24]
     d34:	ldr	x0, [x19, #24]
     d38:	ldrb	w1, [x0]
     d3c:	cmp	w1, #0x5a
     d40:	b.ne	e14 <d_expr_primary+0x144>  // b.any
     d44:	add	x0, x0, #0x1
     d48:	str	x0, [x19, #24]
     d4c:	mov	w1, #0x0                   	// #0
     d50:	mov	x0, x19
     d54:	bl	2a90 <d_encoding>
     d58:	ldr	x1, [x19, #24]
     d5c:	ldrb	w2, [x1]
     d60:	cmp	w2, #0x45
     d64:	b.ne	ce8 <d_expr_primary+0x18>  // b.any
     d68:	add	x1, x1, #0x1
     d6c:	str	x1, [x19, #24]
     d70:	b	cec <d_expr_primary+0x1c>
     d74:	bl	14cc <d_type>
     d78:	mov	x6, x0
     d7c:	cbz	x0, ce8 <d_expr_primary+0x18>
     d80:	ldr	w0, [x0]
     d84:	cmp	w0, #0x27
     d88:	b.ne	da8 <d_expr_primary+0xd8>  // b.any
     d8c:	ldr	x1, [x6, #8]
     d90:	ldr	w0, [x1, #28]
     d94:	cbz	w0, da8 <d_expr_primary+0xd8>
     d98:	ldr	w1, [x1, #8]
     d9c:	ldr	w0, [x19, #72]
     da0:	sub	w0, w0, w1
     da4:	str	w0, [x19, #72]
     da8:	ldr	x0, [x19, #24]
     dac:	ldrb	w1, [x0]
     db0:	cmp	w1, #0x6e
     db4:	b.ne	dfc <d_expr_primary+0x12c>  // b.any
     db8:	add	x0, x0, #0x1
     dbc:	mov	w7, #0x3e                  	// #62
     dc0:	str	x0, [x19, #24]
     dc4:	ldr	x1, [x19, #24]
     dc8:	ldr	x2, [x19, #24]
     dcc:	ldrb	w0, [x2]
     dd0:	cmp	w0, #0x45
     dd4:	b.ne	e04 <d_expr_primary+0x134>  // b.any
     dd8:	sub	w2, w2, w1
     ddc:	mov	x0, x19
     de0:	bl	d4 <d_make_name>
     de4:	mov	x3, x0
     de8:	mov	x2, x6
     dec:	mov	w1, w7
     df0:	mov	x0, x19
     df4:	bl	64 <d_make_comp>
     df8:	b	d58 <d_expr_primary+0x88>
     dfc:	mov	w7, #0x3d                  	// #61
     e00:	b	dc4 <d_expr_primary+0xf4>
     e04:	cbz	w0, ce8 <d_expr_primary+0x18>
     e08:	add	x2, x2, #0x1
     e0c:	str	x2, [x19, #24]
     e10:	b	dc8 <d_expr_primary+0xf8>
     e14:	mov	x0, #0x0                   	// #0
     e18:	b	d58 <d_expr_primary+0x88>

0000000000000e1c <d_expression_1>:
     e1c:	ldr	x1, [x0, #24]
     e20:	ldrb	w2, [x1]
     e24:	cmp	w2, #0x4c
     e28:	b.ne	e30 <d_expression_1+0x14>  // b.any
     e2c:	b	cd0 <d_expr_primary>
     e30:	cmp	w2, #0x54
     e34:	b.ne	e3c <d_expression_1+0x20>  // b.any
     e38:	b	534 <d_template_param>
     e3c:	stp	x29, x30, [sp, #-48]!
     e40:	cmp	w2, #0x73
     e44:	mov	x29, sp
     e48:	stp	x19, x20, [sp, #16]
     e4c:	mov	x19, x0
     e50:	stp	x21, x22, [sp, #32]
     e54:	b.ne	ef8 <d_expression_1+0xdc>  // b.any
     e58:	ldrb	w3, [x1, #1]
     e5c:	cmp	w3, #0x72
     e60:	b.ne	ed4 <d_expression_1+0xb8>  // b.any
     e64:	add	x1, x1, #0x2
     e68:	str	x1, [x0, #24]
     e6c:	bl	14cc <d_type>
     e70:	mov	x20, x0
     e74:	mov	x0, x19
     e78:	bl	22f0 <d_unqualified_name>
     e7c:	mov	x21, x0
     e80:	ldr	x0, [x19, #24]
     e84:	ldrb	w0, [x0]
     e88:	cmp	w0, #0x49
     e8c:	b.eq	eb0 <d_expression_1+0x94>  // b.none
     e90:	mov	x3, x21
     e94:	mov	x2, x20
     e98:	mov	w1, #0x1                   	// #1
     e9c:	mov	x0, x19
     ea0:	ldp	x19, x20, [sp, #16]
     ea4:	ldp	x21, x22, [sp, #32]
     ea8:	ldp	x29, x30, [sp], #48
     eac:	b	64 <d_make_comp>
     eb0:	mov	x0, x19
     eb4:	bl	1d04 <d_template_args>
     eb8:	mov	x3, x0
     ebc:	mov	x2, x21
     ec0:	mov	x0, x19
     ec4:	mov	w1, #0x4                   	// #4
     ec8:	bl	64 <d_make_comp>
     ecc:	mov	x3, x0
     ed0:	b	e94 <d_expression_1+0x78>
     ed4:	cmp	w3, #0x70
     ed8:	b.ne	fe4 <d_expression_1+0x1c8>  // b.any
     edc:	add	x1, x1, #0x2
     ee0:	str	x1, [x0, #24]
     ee4:	bl	e1c <d_expression_1>
     ee8:	mov	x2, x0
     eec:	mov	x3, #0x0                   	// #0
     ef0:	mov	w1, #0x4b                  	// #75
     ef4:	b	e9c <d_expression_1+0x80>
     ef8:	cmp	w2, #0x66
     efc:	b.ne	f80 <d_expression_1+0x164>  // b.any
     f00:	ldrb	w3, [x1, #1]
     f04:	cmp	w3, #0x70
     f08:	b.ne	fe4 <d_expression_1+0x1c8>  // b.any
     f0c:	add	x2, x1, #0x2
     f10:	str	x2, [x0, #24]
     f14:	ldrb	w2, [x1, #2]
     f18:	cmp	w2, #0x54
     f1c:	b.ne	f60 <d_expression_1+0x144>  // b.any
     f20:	add	x1, x1, #0x3
     f24:	mov	w4, #0x0                   	// #0
     f28:	str	x1, [x0, #24]
     f2c:	mov	x0, x19
     f30:	bl	30 <d_make_empty>
     f34:	mov	x20, x0
     f38:	cbz	x0, f4c <d_expression_1+0x130>
     f3c:	sxtw	x4, w4
     f40:	mov	w0, #0x6                   	// #6
     f44:	str	w0, [x20]
     f48:	str	x4, [x20, #8]
     f4c:	mov	x0, x20
     f50:	ldp	x19, x20, [sp, #16]
     f54:	ldp	x21, x22, [sp, #32]
     f58:	ldp	x29, x30, [sp], #48
     f5c:	ret
     f60:	bl	4b0 <d_compact_number>
     f64:	mvn	x1, x0
     f68:	tst	x1, #0x7fffffff
     f6c:	b.ne	f78 <d_expression_1+0x15c>  // b.any
     f70:	mov	x20, #0x0                   	// #0
     f74:	b	f4c <d_expression_1+0x130>
     f78:	add	w4, w0, #0x1
     f7c:	b	f2c <d_expression_1+0x110>
     f80:	sub	w0, w2, #0x30
     f84:	and	w0, w0, #0xff
     f88:	cmp	w0, #0x9
     f8c:	b.ls	fac <d_expression_1+0x190>  // b.plast
     f90:	cmp	w2, #0x6f
     f94:	b.ne	fe4 <d_expression_1+0x1c8>  // b.any
     f98:	ldrb	w0, [x1, #1]
     f9c:	cmp	w0, #0x6e
     fa0:	b.ne	104c <d_expression_1+0x230>  // b.any
     fa4:	add	x1, x1, #0x2
     fa8:	str	x1, [x19, #24]
     fac:	mov	x0, x19
     fb0:	bl	22f0 <d_unqualified_name>
     fb4:	mov	x20, x0
     fb8:	cbz	x0, f70 <d_expression_1+0x154>
     fbc:	ldr	x0, [x19, #24]
     fc0:	ldrb	w0, [x0]
     fc4:	cmp	w0, #0x49
     fc8:	b.ne	f4c <d_expression_1+0x130>  // b.any
     fcc:	mov	x0, x19
     fd0:	bl	1d04 <d_template_args>
     fd4:	mov	x2, x20
     fd8:	mov	x3, x0
     fdc:	mov	w1, #0x4                   	// #4
     fe0:	b	e9c <d_expression_1+0x80>
     fe4:	cmp	w2, #0x69
     fe8:	mov	w0, #0x74                  	// #116
     fec:	ccmp	w2, w0, #0x4, ne  // ne = any
     ff0:	b.ne	104c <d_expression_1+0x230>  // b.any
     ff4:	ldrb	w0, [x1, #1]
     ff8:	cmp	w0, #0x6c
     ffc:	b.ne	104c <d_expression_1+0x230>  // b.any
    1000:	add	x1, x1, #0x2
    1004:	str	x1, [x19, #24]
    1008:	cmp	w2, #0x74
    100c:	b.ne	1044 <d_expression_1+0x228>  // b.any
    1010:	mov	x0, x19
    1014:	bl	14cc <d_type>
    1018:	mov	x20, x0
    101c:	ldr	x0, [x19, #24]
    1020:	ldrb	w0, [x0, #1]
    1024:	cbz	w0, f70 <d_expression_1+0x154>
    1028:	mov	w1, #0x45                  	// #69
    102c:	mov	x0, x19
    1030:	bl	1418 <d_exprlist>
    1034:	mov	x3, x0
    1038:	mov	x2, x20
    103c:	mov	w1, #0x31                  	// #49
    1040:	b	e9c <d_expression_1+0x80>
    1044:	mov	x20, #0x0                   	// #0
    1048:	b	101c <d_expression_1+0x200>
    104c:	mov	x0, x19
    1050:	bl	1d30 <d_operator_name>
    1054:	mov	x20, x0
    1058:	cbz	x0, f70 <d_expression_1+0x154>
    105c:	ldr	w0, [x0]
    1060:	cmp	w0, #0x32
    1064:	b.ne	10b4 <d_expression_1+0x298>  // b.any
    1068:	ldr	x0, [x20, #8]
    106c:	ldr	x21, [x0]
    1070:	ldr	w0, [x0, #16]
    1074:	sub	w1, w0, #0x2
    1078:	ldr	w0, [x19, #72]
    107c:	add	w0, w0, w1
    1080:	str	w0, [x19, #72]
    1084:	adrp	x1, 0 <is_fnqual_component_type>
    1088:	mov	x0, x21
    108c:	add	x1, x1, #0x0
    1090:	bl	0 <strcmp>
    1094:	ldr	x1, [x20, #8]
    1098:	cbnz	w0, 10ec <d_expression_1+0x2d0>
    109c:	mov	x0, x19
    10a0:	bl	14cc <d_type>
    10a4:	mov	x3, x0
    10a8:	mov	x2, x20
    10ac:	mov	w1, #0x37                  	// #55
    10b0:	b	e9c <d_expression_1+0x80>
    10b4:	cmp	w0, #0x34
    10b8:	b.eq	1194 <d_expression_1+0x378>  // b.none
    10bc:	b.hi	f70 <d_expression_1+0x154>  // b.pmore
    10c0:	cmp	w0, #0x33
    10c4:	b.ne	f70 <d_expression_1+0x154>  // b.any
    10c8:	ldr	w1, [x20, #8]
    10cc:	cmp	w1, #0x3
    10d0:	b.hi	f70 <d_expression_1+0x154>  // b.pmore
    10d4:	adrp	x0, 0 <is_fnqual_component_type>
    10d8:	add	x0, x0, #0x0
    10dc:	ldrb	w0, [x0, w1, uxtw]
    10e0:	adr	x1, 10ec <d_expression_1+0x2d0>
    10e4:	add	x0, x1, w0, sxtb #2
    10e8:	br	x0
    10ec:	ldr	w22, [x1, #20]
    10f0:	cmp	w22, #0x3
    10f4:	b.hi	f70 <d_expression_1+0x154>  // b.pmore
    10f8:	adrp	x0, 0 <is_fnqual_component_type>
    10fc:	add	x0, x0, #0x0
    1100:	ldrb	w0, [x0, w22, uxtw]
    1104:	adr	x1, 1110 <d_expression_1+0x2f4>
    1108:	add	x0, x1, w0, sxtb #2
    110c:	br	x0
    1110:	mov	x2, x20
    1114:	mov	x3, #0x0                   	// #0
    1118:	mov	w1, #0x36                  	// #54
    111c:	b	e9c <d_expression_1+0x80>
    1120:	ldrb	w0, [x21]
    1124:	mov	w1, #0x6d                  	// #109
    1128:	cmp	w0, #0x70
    112c:	ccmp	w0, w1, #0x4, ne  // ne = any
    1130:	b.ne	1158 <d_expression_1+0x33c>  // b.any
    1134:	ldrb	w1, [x21, #1]
    1138:	cmp	w1, w0
    113c:	b.ne	1158 <d_expression_1+0x33c>  // b.any
    1140:	ldr	x0, [x19, #24]
    1144:	ldrb	w1, [x0]
    1148:	cmp	w1, #0x5f
    114c:	b.ne	115c <d_expression_1+0x340>  // b.any
    1150:	add	x0, x0, #0x1
    1154:	str	x0, [x19, #24]
    1158:	mov	w22, #0x0                   	// #0
    115c:	adrp	x1, 0 <is_fnqual_component_type>
    1160:	mov	x0, x21
    1164:	add	x1, x1, #0x0
    1168:	bl	0 <strcmp>
    116c:	cbnz	w0, 11c0 <d_expression_1+0x3a4>
    1170:	mov	x0, x19
    1174:	bl	1c4c <d_template_args_1>
    1178:	mov	x3, x0
    117c:	cbz	w22, 10a8 <d_expression_1+0x28c>
    1180:	mov	x2, x0
    1184:	mov	w1, #0x39                  	// #57
    1188:	mov	x0, x19
    118c:	bl	64 <d_make_comp>
    1190:	b	10a4 <d_expression_1+0x288>
    1194:	ldr	x0, [x19, #24]
    1198:	ldrb	w1, [x0]
    119c:	cmp	w1, #0x5f
    11a0:	b.ne	11bc <d_expression_1+0x3a0>  // b.any
    11a4:	add	x0, x0, #0x1
    11a8:	str	x0, [x19, #24]
    11ac:	mov	w1, #0x45                  	// #69
    11b0:	mov	x0, x19
    11b4:	bl	1418 <d_exprlist>
    11b8:	b	10a4 <d_expression_1+0x288>
    11bc:	mov	w22, #0x0                   	// #0
    11c0:	mov	x0, x19
    11c4:	bl	e1c <d_expression_1>
    11c8:	b	1178 <d_expression_1+0x35c>
    11cc:	ldr	x0, [x20, #8]
    11d0:	bl	804 <op_is_new_cast.isra.0>
    11d4:	cbz	w0, 122c <d_expression_1+0x410>
    11d8:	mov	x0, x19
    11dc:	bl	14cc <d_type>
    11e0:	mov	x22, x0
    11e4:	adrp	x1, 0 <is_fnqual_component_type>
    11e8:	mov	x0, x21
    11ec:	add	x1, x1, #0x0
    11f0:	bl	0 <strcmp>
    11f4:	cbnz	w0, 124c <d_expression_1+0x430>
    11f8:	mov	x0, x19
    11fc:	mov	w1, #0x45                  	// #69
    1200:	bl	1418 <d_exprlist>
    1204:	mov	x21, x0
    1208:	mov	x3, x21
    120c:	mov	x2, x22
    1210:	mov	w1, #0x39                  	// #57
    1214:	mov	x0, x19
    1218:	bl	64 <d_make_comp>
    121c:	mov	x3, x0
    1220:	mov	x2, x20
    1224:	mov	w1, #0x38                  	// #56
    1228:	b	e9c <d_expression_1+0x80>
    122c:	ldrb	w0, [x21]
    1230:	cmp	w0, #0x66
    1234:	mov	x0, x19
    1238:	b.ne	1244 <d_expression_1+0x428>  // b.any
    123c:	bl	1d30 <d_operator_name>
    1240:	b	11e0 <d_expression_1+0x3c4>
    1244:	bl	e1c <d_expression_1>
    1248:	b	11e0 <d_expression_1+0x3c4>
    124c:	adrp	x1, 0 <is_fnqual_component_type>
    1250:	mov	x0, x21
    1254:	add	x1, x1, #0x0
    1258:	bl	0 <strcmp>
    125c:	cbz	w0, 1274 <d_expression_1+0x458>
    1260:	adrp	x1, 0 <is_fnqual_component_type>
    1264:	mov	x0, x21
    1268:	add	x1, x1, #0x0
    126c:	bl	0 <strcmp>
    1270:	cbnz	w0, 12b0 <d_expression_1+0x494>
    1274:	mov	x0, x19
    1278:	bl	22f0 <d_unqualified_name>
    127c:	mov	x21, x0
    1280:	ldr	x0, [x19, #24]
    1284:	ldrb	w0, [x0]
    1288:	cmp	w0, #0x49
    128c:	b.ne	1208 <d_expression_1+0x3ec>  // b.any
    1290:	mov	x0, x19
    1294:	bl	1d04 <d_template_args>
    1298:	mov	x2, x21
    129c:	mov	x3, x0
    12a0:	mov	w1, #0x4                   	// #4
    12a4:	mov	x0, x19
    12a8:	bl	64 <d_make_comp>
    12ac:	b	1204 <d_expression_1+0x3e8>
    12b0:	mov	x0, x19
    12b4:	bl	e1c <d_expression_1>
    12b8:	b	1204 <d_expression_1+0x3e8>
    12bc:	adrp	x1, 0 <is_fnqual_component_type>
    12c0:	mov	x0, x21
    12c4:	add	x1, x1, #0x0
    12c8:	bl	0 <strcmp>
    12cc:	cbnz	w0, 132c <d_expression_1+0x510>
    12d0:	mov	x0, x19
    12d4:	bl	e1c <d_expression_1>
    12d8:	mov	x21, x0
    12dc:	mov	x0, x19
    12e0:	bl	e1c <d_expression_1>
    12e4:	mov	x22, x0
    12e8:	mov	x0, x19
    12ec:	bl	e1c <d_expression_1>
    12f0:	cbz	x0, f70 <d_expression_1+0x154>
    12f4:	mov	x3, x0
    12f8:	mov	x2, x22
    12fc:	mov	w1, #0x3c                  	// #60
    1300:	mov	x0, x19
    1304:	bl	64 <d_make_comp>
    1308:	mov	x3, x0
    130c:	mov	x2, x21
    1310:	mov	w1, #0x3b                  	// #59
    1314:	mov	x0, x19
    1318:	bl	64 <d_make_comp>
    131c:	mov	x2, x20
    1320:	mov	x3, x0
    1324:	mov	w1, #0x3a                  	// #58
    1328:	b	e9c <d_expression_1+0x80>
    132c:	ldrb	w0, [x21]
    1330:	cmp	w0, #0x66
    1334:	b.ne	1344 <d_expression_1+0x528>  // b.any
    1338:	mov	x0, x19
    133c:	bl	1d30 <d_operator_name>
    1340:	b	12d8 <d_expression_1+0x4bc>
    1344:	cmp	w0, #0x6e
    1348:	b.ne	f70 <d_expression_1+0x154>  // b.any
    134c:	ldrb	w0, [x21, #1]
    1350:	mov	w1, #0x61                  	// #97
    1354:	cmp	w0, #0x77
    1358:	ccmp	w0, w1, #0x4, ne  // ne = any
    135c:	b.ne	f70 <d_expression_1+0x154>  // b.any
    1360:	mov	w1, #0x5f                  	// #95
    1364:	mov	x0, x19
    1368:	bl	1418 <d_exprlist>
    136c:	mov	x21, x0
    1370:	mov	x0, x19
    1374:	bl	14cc <d_type>
    1378:	mov	x22, x0
    137c:	ldr	x0, [x19, #24]
    1380:	ldrb	w1, [x0]
    1384:	cmp	w1, #0x45
    1388:	b.ne	139c <d_expression_1+0x580>  // b.any
    138c:	add	x0, x0, #0x1
    1390:	str	x0, [x19, #24]
    1394:	mov	x0, #0x0                   	// #0
    1398:	b	12f4 <d_expression_1+0x4d8>
    139c:	cmp	w1, #0x70
    13a0:	b.ne	13c8 <d_expression_1+0x5ac>  // b.any
    13a4:	ldrb	w1, [x0, #1]
    13a8:	cmp	w1, #0x69
    13ac:	b.ne	f70 <d_expression_1+0x154>  // b.any
    13b0:	add	x0, x0, #0x2
    13b4:	str	x0, [x19, #24]
    13b8:	mov	w1, #0x45                  	// #69
    13bc:	mov	x0, x19
    13c0:	bl	1418 <d_exprlist>
    13c4:	b	12f4 <d_expression_1+0x4d8>
    13c8:	cmp	w1, #0x69
    13cc:	b.ne	f70 <d_expression_1+0x154>  // b.any
    13d0:	ldrb	w0, [x0, #1]
    13d4:	cmp	w0, #0x6c
    13d8:	b.ne	f70 <d_expression_1+0x154>  // b.any
    13dc:	mov	x0, x19
    13e0:	bl	e1c <d_expression_1>
    13e4:	b	12f4 <d_expression_1+0x4d8>

00000000000013e8 <d_expression>:
    13e8:	stp	x29, x30, [sp, #-32]!
    13ec:	mov	w1, #0x1                   	// #1
    13f0:	mov	x29, sp
    13f4:	stp	x19, x20, [sp, #16]
    13f8:	mov	x19, x0
    13fc:	ldr	w20, [x0, #76]
    1400:	str	w1, [x0, #76]
    1404:	bl	e1c <d_expression_1>
    1408:	str	w20, [x19, #76]
    140c:	ldp	x19, x20, [sp, #16]
    1410:	ldp	x29, x30, [sp], #32
    1414:	ret

0000000000001418 <d_exprlist>:
    1418:	stp	x29, x30, [sp, #-64]!
    141c:	mov	x29, sp
    1420:	ldr	x2, [x0, #24]
    1424:	stp	x19, x20, [sp, #16]
    1428:	mov	x19, x0
    142c:	str	x21, [sp, #32]
    1430:	str	xzr, [sp, #56]
    1434:	ldrb	w3, [x2]
    1438:	cmp	w3, w1, uxtb
    143c:	b.ne	1464 <d_exprlist+0x4c>  // b.any
    1440:	add	x2, x2, #0x1
    1444:	mov	x3, #0x0                   	// #0
    1448:	ldr	x21, [sp, #32]
    144c:	str	x2, [x0, #24]
    1450:	ldp	x19, x20, [sp, #16]
    1454:	mov	w1, #0x2e                  	// #46
    1458:	ldp	x29, x30, [sp], #64
    145c:	mov	x2, #0x0                   	// #0
    1460:	b	64 <d_make_comp>
    1464:	and	w21, w1, #0xff
    1468:	add	x20, sp, #0x38
    146c:	mov	x0, x19
    1470:	bl	13e8 <d_expression>
    1474:	mov	x2, x0
    1478:	cbnz	x0, 1490 <d_exprlist+0x78>
    147c:	mov	x0, #0x0                   	// #0
    1480:	ldp	x19, x20, [sp, #16]
    1484:	ldr	x21, [sp, #32]
    1488:	ldp	x29, x30, [sp], #64
    148c:	ret
    1490:	mov	x0, x19
    1494:	mov	x3, #0x0                   	// #0
    1498:	mov	w1, #0x2e                  	// #46
    149c:	bl	64 <d_make_comp>
    14a0:	str	x0, [x20]
    14a4:	cbz	x0, 147c <d_exprlist+0x64>
    14a8:	add	x20, x0, #0x10
    14ac:	ldr	x0, [x19, #24]
    14b0:	ldrb	w1, [x0]
    14b4:	cmp	w1, w21
    14b8:	b.ne	146c <d_exprlist+0x54>  // b.any
    14bc:	add	x0, x0, #0x1
    14c0:	str	x0, [x19, #24]
    14c4:	ldr	x0, [sp, #56]
    14c8:	b	1480 <d_exprlist+0x68>

00000000000014cc <d_type>:
    14cc:	stp	x29, x30, [sp, #-80]!
    14d0:	mov	x29, sp
    14d4:	ldr	x3, [x0, #24]
    14d8:	stp	x19, x20, [sp, #16]
    14dc:	mov	x19, x0
    14e0:	mov	x0, x3
    14e4:	stp	x21, x22, [sp, #32]
    14e8:	str	x23, [sp, #48]
    14ec:	bl	7ac <next_is_type_qual.isra.0>
    14f0:	cbz	w0, 158c <d_type+0xc0>
    14f4:	add	x1, sp, #0x48
    14f8:	mov	x0, x19
    14fc:	mov	w2, #0x0                   	// #0
    1500:	bl	1f80 <d_cv_qualifiers>
    1504:	mov	x20, x0
    1508:	cbnz	x0, 1524 <d_type+0x58>
    150c:	mov	x0, #0x0                   	// #0
    1510:	ldp	x19, x20, [sp, #16]
    1514:	ldp	x21, x22, [sp, #32]
    1518:	ldr	x23, [sp, #48]
    151c:	ldp	x29, x30, [sp], #80
    1520:	ret
    1524:	ldr	x0, [x19, #24]
    1528:	ldrb	w0, [x0]
    152c:	cmp	w0, #0x46
    1530:	mov	x0, x19
    1534:	b.ne	1584 <d_type+0xb8>  // b.any
    1538:	bl	2238 <d_function_type>
    153c:	str	x0, [x20]
    1540:	ldr	x0, [x20]
    1544:	cbz	x0, 150c <d_type+0x40>
    1548:	ldr	w1, [x0]
    154c:	sub	w1, w1, #0x1f
    1550:	cmp	w1, #0x1
    1554:	b.hi	1570 <d_type+0xa4>  // b.pmore
    1558:	ldr	x2, [sp, #72]
    155c:	ldr	x1, [x0, #8]
    1560:	str	x2, [x0, #8]
    1564:	ldr	x0, [x20]
    1568:	str	x0, [sp, #72]
    156c:	str	x1, [x20]
    1570:	ldr	x1, [sp, #72]
    1574:	mov	x0, x19
    1578:	bl	194 <d_add_substitution>
    157c:	cbnz	w0, 15f8 <d_type+0x12c>
    1580:	b	150c <d_type+0x40>
    1584:	bl	14cc <d_type>
    1588:	b	153c <d_type+0x70>
    158c:	ldrb	w0, [x3]
    1590:	sub	w2, w0, #0x30
    1594:	cmp	w2, #0x4a
    1598:	b.hi	150c <d_type+0x40>  // b.pmore
    159c:	adrp	x1, 0 <is_fnqual_component_type>
    15a0:	add	x1, x1, #0x0
    15a4:	ldrh	w1, [x1, w2, uxtw #1]
    15a8:	adr	x2, 15b4 <d_type+0xe8>
    15ac:	add	x1, x2, w1, sxth #2
    15b0:	br	x1
    15b4:	sub	w0, w0, #0x61
    15b8:	adrp	x1, 0 <is_fnqual_component_type>
    15bc:	add	x1, x1, #0x0
    15c0:	sbfiz	x0, x0, #5, #32
    15c4:	add	x1, x1, #0x188
    15c8:	add	x1, x1, x0
    15cc:	mov	x0, x19
    15d0:	bl	114 <d_make_builtin_type>
    15d4:	str	x0, [sp, #72]
    15d8:	ldr	x1, [x0, #8]
    15dc:	ldr	w0, [x19, #72]
    15e0:	ldr	w1, [x1, #8]
    15e4:	add	w0, w0, w1
    15e8:	str	w0, [x19, #72]
    15ec:	ldr	x0, [x19, #24]
    15f0:	add	x0, x0, #0x1
    15f4:	str	x0, [x19, #24]
    15f8:	ldr	x0, [sp, #72]
    15fc:	b	1510 <d_type+0x44>
    1600:	add	x3, x3, #0x1
    1604:	str	x3, [x19, #24]
    1608:	mov	x0, x19
    160c:	bl	594 <d_source_name>
    1610:	mov	x2, x0
    1614:	mov	x3, #0x0                   	// #0
    1618:	mov	w1, #0x28                  	// #40
    161c:	mov	x0, x19
    1620:	bl	64 <d_make_comp>
    1624:	b	1630 <d_type+0x164>
    1628:	mov	x0, x19
    162c:	bl	2238 <d_function_type>
    1630:	str	x0, [sp, #72]
    1634:	b	1570 <d_type+0xa4>
    1638:	mov	x0, x19
    163c:	bl	2660 <d_name>
    1640:	b	1630 <d_type+0x164>
    1644:	add	x1, x3, #0x1
    1648:	str	x1, [x19, #24]
    164c:	ldrb	w0, [x3, #1]
    1650:	cmp	w0, #0x5f
    1654:	b.eq	16b0 <d_type+0x1e4>  // b.none
    1658:	sub	w0, w0, #0x30
    165c:	and	w0, w0, #0xff
    1660:	cmp	w0, #0x9
    1664:	b.hi	16a4 <d_type+0x1d8>  // b.pmore
    1668:	ldr	x0, [x19, #24]
    166c:	add	x2, x0, #0x1
    1670:	str	x2, [x19, #24]
    1674:	ldrb	w0, [x0, #1]
    1678:	sub	w0, w0, #0x30
    167c:	and	w0, w0, #0xff
    1680:	cmp	w0, #0x9
    1684:	b.ls	1668 <d_type+0x19c>  // b.plast
    1688:	sub	w2, w2, w1
    168c:	mov	x0, x19
    1690:	bl	d4 <d_make_name>
    1694:	mov	x20, x0
    1698:	cbnz	x0, 16b4 <d_type+0x1e8>
    169c:	mov	x0, #0x0                   	// #0
    16a0:	b	1630 <d_type+0x164>
    16a4:	mov	x0, x19
    16a8:	bl	13e8 <d_expression>
    16ac:	b	1694 <d_type+0x1c8>
    16b0:	mov	x20, #0x0                   	// #0
    16b4:	ldr	x0, [x19, #24]
    16b8:	ldrb	w1, [x0]
    16bc:	cmp	w1, #0x5f
    16c0:	b.ne	169c <d_type+0x1d0>  // b.any
    16c4:	add	x0, x0, #0x1
    16c8:	str	x0, [x19, #24]
    16cc:	mov	x0, x19
    16d0:	bl	14cc <d_type>
    16d4:	mov	x3, x0
    16d8:	mov	x2, x20
    16dc:	mov	w1, #0x2a                  	// #42
    16e0:	b	161c <d_type+0x150>
    16e4:	add	x3, x3, #0x1
    16e8:	str	x3, [x19, #24]
    16ec:	mov	x0, x19
    16f0:	bl	14cc <d_type>
    16f4:	mov	x20, x0
    16f8:	cbz	x0, 169c <d_type+0x1d0>
    16fc:	mov	x0, x19
    1700:	bl	14cc <d_type>
    1704:	mov	x3, x0
    1708:	cbz	x0, 169c <d_type+0x1d0>
    170c:	mov	x2, x20
    1710:	mov	w1, #0x2b                  	// #43
    1714:	b	161c <d_type+0x150>
    1718:	mov	x0, x19
    171c:	bl	534 <d_template_param>
    1720:	ldr	x20, [x19, #24]
    1724:	str	x0, [sp, #72]
    1728:	mov	x1, x0
    172c:	ldrb	w0, [x20]
    1730:	cmp	w0, #0x49
    1734:	b.ne	1570 <d_type+0xa4>  // b.any
    1738:	ldr	w0, [x19, #80]
    173c:	cbnz	w0, 1764 <d_type+0x298>
    1740:	mov	x0, x19
    1744:	bl	194 <d_add_substitution>
    1748:	cbz	w0, 150c <d_type+0x40>
    174c:	ldr	x20, [sp, #72]
    1750:	mov	x0, x19
    1754:	bl	1d04 <d_template_args>
    1758:	mov	x3, x0
    175c:	mov	x2, x20
    1760:	b	17a4 <d_type+0x2d8>
    1764:	ldr	w23, [x19, #40]
    1768:	mov	x0, x19
    176c:	ldr	w22, [x19, #56]
    1770:	ldr	w21, [x19, #72]
    1774:	bl	1d04 <d_template_args>
    1778:	mov	x4, x0
    177c:	ldr	x0, [x19, #24]
    1780:	ldrb	w0, [x0]
    1784:	cmp	w0, #0x49
    1788:	b.ne	17ac <d_type+0x2e0>  // b.any
    178c:	ldr	x1, [sp, #72]
    1790:	mov	x0, x19
    1794:	bl	194 <d_add_substitution>
    1798:	cbz	w0, 150c <d_type+0x40>
    179c:	ldr	x2, [sp, #72]
    17a0:	mov	x3, x4
    17a4:	mov	w1, #0x4                   	// #4
    17a8:	b	161c <d_type+0x150>
    17ac:	str	x20, [x19, #24]
    17b0:	str	w23, [x19, #40]
    17b4:	str	w22, [x19, #56]
    17b8:	str	w21, [x19, #72]
    17bc:	b	1570 <d_type+0xa4>
    17c0:	ldrb	w0, [x3, #1]
    17c4:	sub	w0, w0, #0x30
    17c8:	and	w0, w0, #0xff
    17cc:	cmp	w0, #0x2f
    17d0:	b.hi	17e4 <d_type+0x318>  // b.pmore
    17d4:	mov	w1, #0xfffe03ff            	// #-130049
    17d8:	movk	x1, #0x87ff, lsl #32
    17dc:	lsr	x0, x1, x0
    17e0:	tbnz	w0, #0, 1804 <d_type+0x338>
    17e4:	mov	x0, x19
    17e8:	bl	2660 <d_name>
    17ec:	str	x0, [sp, #72]
    17f0:	cbz	x0, 1570 <d_type+0xa4>
    17f4:	ldr	w0, [x0]
    17f8:	cmp	w0, #0x18
    17fc:	b.ne	1570 <d_type+0xa4>  // b.any
    1800:	b	15f8 <d_type+0x12c>
    1804:	mov	x0, x19
    1808:	mov	w1, #0x0                   	// #0
    180c:	bl	ad8 <d_substitution>
    1810:	mov	x20, x0
    1814:	ldr	x0, [x19, #24]
    1818:	str	x20, [sp, #72]
    181c:	ldrb	w0, [x0]
    1820:	cmp	w0, #0x49
    1824:	b.ne	15f8 <d_type+0x12c>  // b.any
    1828:	b	1750 <d_type+0x284>
    182c:	add	x3, x3, #0x1
    1830:	str	x3, [x19, #24]
    1834:	mov	x0, x19
    1838:	bl	14cc <d_type>
    183c:	mov	x2, x0
    1840:	mov	x3, #0x0                   	// #0
    1844:	mov	w1, #0x24                  	// #36
    1848:	b	161c <d_type+0x150>
    184c:	add	x3, x3, #0x1
    1850:	str	x3, [x19, #24]
    1854:	mov	x0, x19
    1858:	bl	14cc <d_type>
    185c:	mov	x2, x0
    1860:	mov	x3, #0x0                   	// #0
    1864:	mov	w1, #0x22                  	// #34
    1868:	b	161c <d_type+0x150>
    186c:	add	x3, x3, #0x1
    1870:	str	x3, [x19, #24]
    1874:	mov	x0, x19
    1878:	bl	14cc <d_type>
    187c:	mov	x2, x0
    1880:	mov	x3, #0x0                   	// #0
    1884:	mov	w1, #0x23                  	// #35
    1888:	b	161c <d_type+0x150>
    188c:	add	x3, x3, #0x1
    1890:	str	x3, [x19, #24]
    1894:	mov	x0, x19
    1898:	bl	14cc <d_type>
    189c:	mov	x2, x0
    18a0:	mov	x3, #0x0                   	// #0
    18a4:	mov	w1, #0x25                  	// #37
    18a8:	b	161c <d_type+0x150>
    18ac:	add	x3, x3, #0x1
    18b0:	str	x3, [x19, #24]
    18b4:	mov	x0, x19
    18b8:	bl	14cc <d_type>
    18bc:	mov	x2, x0
    18c0:	mov	x3, #0x0                   	// #0
    18c4:	mov	w1, #0x26                  	// #38
    18c8:	b	161c <d_type+0x150>
    18cc:	add	x3, x3, #0x1
    18d0:	str	x3, [x19, #24]
    18d4:	mov	x0, x19
    18d8:	bl	594 <d_source_name>
    18dc:	mov	x20, x0
    18e0:	ldr	x0, [x19, #24]
    18e4:	str	x20, [sp, #72]
    18e8:	ldrb	w0, [x0]
    18ec:	cmp	w0, #0x49
    18f0:	b.ne	1914 <d_type+0x448>  // b.any
    18f4:	mov	x0, x19
    18f8:	bl	1d04 <d_template_args>
    18fc:	mov	x2, x20
    1900:	mov	x3, x0
    1904:	mov	w1, #0x4                   	// #4
    1908:	mov	x0, x19
    190c:	bl	64 <d_make_comp>
    1910:	str	x0, [sp, #72]
    1914:	mov	x0, x19
    1918:	bl	14cc <d_type>
    191c:	mov	w1, #0x21                  	// #33
    1920:	mov	x2, x0
    1924:	ldr	x3, [sp, #72]
    1928:	b	161c <d_type+0x150>
    192c:	add	x0, x3, #0x1
    1930:	str	x0, [x19, #24]
    1934:	ldrb	w0, [x3, #1]
    1938:	cbz	w0, 150c <d_type+0x40>
    193c:	add	x0, x3, #0x2
    1940:	str	x0, [x19, #24]
    1944:	ldrb	w0, [x3, #1]
    1948:	cmp	w0, #0x46
    194c:	b.eq	1aa4 <d_type+0x5d8>  // b.none
    1950:	sub	w0, w0, #0x54
    1954:	and	w1, w0, #0xff
    1958:	cmp	w1, #0x22
    195c:	b.hi	150c <d_type+0x40>  // b.pmore
    1960:	cmp	w0, #0x22
    1964:	b.hi	150c <d_type+0x40>  // b.pmore
    1968:	adrp	x1, 0 <is_fnqual_component_type>
    196c:	add	x1, x1, #0x0
    1970:	ldrh	w0, [x1, w0, uxtw #1]
    1974:	adr	x1, 1980 <d_type+0x4b4>
    1978:	add	x0, x1, w0, sxth #2
    197c:	br	x0
    1980:	mov	x0, x19
    1984:	bl	13e8 <d_expression>
    1988:	mov	x3, #0x0                   	// #0
    198c:	mov	x2, x0
    1990:	mov	w1, #0x43                  	// #67
    1994:	mov	x0, x19
    1998:	bl	64 <d_make_comp>
    199c:	str	x0, [sp, #72]
    19a0:	cbz	x0, 1570 <d_type+0xa4>
    19a4:	ldr	x0, [x19, #24]
    19a8:	ldrb	w1, [x0]
    19ac:	cbnz	w1, 19b8 <d_type+0x4ec>
    19b0:	str	xzr, [sp, #72]
    19b4:	b	1570 <d_type+0xa4>
    19b8:	add	x1, x0, #0x1
    19bc:	str	x1, [x19, #24]
    19c0:	ldrb	w0, [x0]
    19c4:	cmp	w0, #0x45
    19c8:	b.ne	19b0 <d_type+0x4e4>  // b.any
    19cc:	b	1570 <d_type+0xa4>
    19d0:	mov	x0, x19
    19d4:	bl	14cc <d_type>
    19d8:	mov	x3, #0x0                   	// #0
    19dc:	mov	x2, x0
    19e0:	mov	w1, #0x4b                  	// #75
    19e4:	b	161c <d_type+0x150>
    19e8:	adrp	x1, 0 <is_fnqual_component_type>
    19ec:	add	x1, x1, #0x0
    19f0:	mov	w2, #0x4                   	// #4
    19f4:	mov	x0, x19
    19f8:	bl	d4 <d_make_name>
    19fc:	str	x0, [sp, #72]
    1a00:	b	15f8 <d_type+0x12c>
    1a04:	adrp	x1, 0 <is_fnqual_component_type>
    1a08:	mov	w2, #0xe                   	// #14
    1a0c:	add	x1, x1, #0x0
    1a10:	b	19f4 <d_type+0x528>
    1a14:	adrp	x1, 0 <is_fnqual_component_type>
    1a18:	add	x1, x1, #0x0
    1a1c:	add	x1, x1, #0x4c8
    1a20:	mov	x0, x19
    1a24:	bl	114 <d_make_builtin_type>
    1a28:	str	x0, [sp, #72]
    1a2c:	ldr	x1, [x0, #8]
    1a30:	ldr	w0, [x19, #72]
    1a34:	ldr	w1, [x1, #8]
    1a38:	add	w0, w0, w1
    1a3c:	str	w0, [x19, #72]
    1a40:	b	15f8 <d_type+0x12c>
    1a44:	adrp	x1, 0 <is_fnqual_component_type>
    1a48:	add	x1, x1, #0x0
    1a4c:	add	x1, x1, #0x4e8
    1a50:	b	1a20 <d_type+0x554>
    1a54:	adrp	x1, 0 <is_fnqual_component_type>
    1a58:	add	x1, x1, #0x0
    1a5c:	add	x1, x1, #0x508
    1a60:	b	1a20 <d_type+0x554>
    1a64:	adrp	x1, 0 <is_fnqual_component_type>
    1a68:	add	x1, x1, #0x0
    1a6c:	add	x1, x1, #0x528
    1a70:	b	1a20 <d_type+0x554>
    1a74:	adrp	x1, 0 <is_fnqual_component_type>
    1a78:	add	x1, x1, #0x0
    1a7c:	add	x1, x1, #0x548
    1a80:	b	1a20 <d_type+0x554>
    1a84:	adrp	x1, 0 <is_fnqual_component_type>
    1a88:	add	x1, x1, #0x0
    1a8c:	add	x1, x1, #0x568
    1a90:	b	1a20 <d_type+0x554>
    1a94:	adrp	x1, 0 <is_fnqual_component_type>
    1a98:	add	x1, x1, #0x0
    1a9c:	add	x1, x1, #0x588
    1aa0:	b	1a20 <d_type+0x554>
    1aa4:	mov	x0, x19
    1aa8:	bl	30 <d_make_empty>
    1aac:	mov	w1, #0x2c                  	// #44
    1ab0:	str	x0, [sp, #72]
    1ab4:	str	w1, [x0]
    1ab8:	ldr	x1, [x19, #24]
    1abc:	ldrb	w1, [x1]
    1ac0:	sub	w1, w1, #0x30
    1ac4:	and	w1, w1, #0xff
    1ac8:	cmp	w1, #0x9
    1acc:	cset	w2, ls  // ls = plast
    1ad0:	strh	w2, [x0, #16]
    1ad4:	b.hi	1ae0 <d_type+0x614>  // b.pmore
    1ad8:	add	x0, x19, #0x18
    1adc:	bl	3ec <d_number.isra.0>
    1ae0:	ldr	x20, [sp, #72]
    1ae4:	mov	x0, x19
    1ae8:	bl	14cc <d_type>
    1aec:	str	x0, [x20, #8]
    1af0:	ldr	x0, [sp, #72]
    1af4:	ldr	x0, [x0, #8]
    1af8:	cbz	x0, 150c <d_type+0x40>
    1afc:	add	x0, x19, #0x18
    1b00:	bl	3ec <d_number.isra.0>
    1b04:	ldr	x1, [x19, #24]
    1b08:	ldrb	w0, [x1]
    1b0c:	cbz	w0, 1b1c <d_type+0x650>
    1b10:	add	x0, x1, #0x1
    1b14:	str	x0, [x19, #24]
    1b18:	ldrb	w0, [x1]
    1b1c:	cmp	w0, #0x73
    1b20:	ldr	x0, [sp, #72]
    1b24:	cset	w1, eq  // eq = none
    1b28:	strh	w1, [x0, #18]
    1b2c:	b	15f8 <d_type+0x12c>
    1b30:	ldrb	w0, [x3, #2]
    1b34:	cmp	w0, #0x5f
    1b38:	b.ne	1b94 <d_type+0x6c8>  // b.any
    1b3c:	add	x3, x3, #0x3
    1b40:	str	x3, [x19, #24]
    1b44:	mov	x0, x19
    1b48:	bl	13e8 <d_expression>
    1b4c:	mov	x20, x0
    1b50:	cbz	x0, 1b8c <d_type+0x6c0>
    1b54:	ldr	x0, [x19, #24]
    1b58:	ldrb	w1, [x0]
    1b5c:	cmp	w1, #0x5f
    1b60:	b.ne	1ba0 <d_type+0x6d4>  // b.any
    1b64:	add	x0, x0, #0x1
    1b68:	str	x0, [x19, #24]
    1b6c:	mov	x0, x19
    1b70:	bl	14cc <d_type>
    1b74:	mov	x3, x0
    1b78:	mov	x2, x20
    1b7c:	mov	x0, x19
    1b80:	mov	w1, #0x2d                  	// #45
    1b84:	bl	64 <d_make_comp>
    1b88:	mov	x20, x0
    1b8c:	str	x20, [sp, #72]
    1b90:	b	1570 <d_type+0xa4>
    1b94:	mov	x0, x19
    1b98:	bl	474 <d_number_component>
    1b9c:	b	1b4c <d_type+0x680>
    1ba0:	mov	x20, #0x0                   	// #0
    1ba4:	b	1b8c <d_type+0x6c0>
    1ba8:	adrp	x1, 0 <is_fnqual_component_type>
    1bac:	add	x1, x1, #0x0
    1bb0:	add	x1, x1, #0x5a8
    1bb4:	b	1a20 <d_type+0x554>

0000000000001bb8 <d_template_arg>:
    1bb8:	ldr	x2, [x0, #24]
    1bbc:	ldrb	w1, [x2]
    1bc0:	cmp	w1, #0x4c
    1bc4:	b.eq	1c34 <d_template_arg+0x7c>  // b.none
    1bc8:	stp	x29, x30, [sp, #-32]!
    1bcc:	mov	x29, sp
    1bd0:	str	x19, [sp, #16]
    1bd4:	mov	x19, x0
    1bd8:	b.hi	1bfc <d_template_arg+0x44>  // b.pmore
    1bdc:	sub	w1, w1, #0x49
    1be0:	and	w1, w1, #0xff
    1be4:	cmp	w1, #0x1
    1be8:	b.ls	1c38 <d_template_arg+0x80>  // b.plast
    1bec:	mov	x0, x19
    1bf0:	ldr	x19, [sp, #16]
    1bf4:	ldp	x29, x30, [sp], #32
    1bf8:	b	14cc <d_type>
    1bfc:	cmp	w1, #0x58
    1c00:	b.ne	1bec <d_template_arg+0x34>  // b.any
    1c04:	add	x2, x2, #0x1
    1c08:	str	x2, [x0, #24]
    1c0c:	bl	13e8 <d_expression>
    1c10:	ldr	x1, [x19, #24]
    1c14:	ldrb	w2, [x1]
    1c18:	cmp	w2, #0x45
    1c1c:	b.ne	1c44 <d_template_arg+0x8c>  // b.any
    1c20:	add	x1, x1, #0x1
    1c24:	str	x1, [x19, #24]
    1c28:	ldr	x19, [sp, #16]
    1c2c:	ldp	x29, x30, [sp], #32
    1c30:	ret
    1c34:	b	cd0 <d_expr_primary>
    1c38:	ldr	x19, [sp, #16]
    1c3c:	ldp	x29, x30, [sp], #32
    1c40:	b	1d04 <d_template_args>
    1c44:	mov	x0, #0x0                   	// #0
    1c48:	b	1c28 <d_template_arg+0x70>

0000000000001c4c <d_template_args_1>:
    1c4c:	stp	x29, x30, [sp, #-64]!
    1c50:	mov	x29, sp
    1c54:	ldr	x1, [x0, #24]
    1c58:	stp	x19, x20, [sp, #16]
    1c5c:	mov	x19, x0
    1c60:	str	x21, [sp, #32]
    1c64:	ldr	x21, [x0, #64]
    1c68:	ldrb	w2, [x1]
    1c6c:	cmp	w2, #0x45
    1c70:	b.ne	1c98 <d_template_args_1+0x4c>  // b.any
    1c74:	add	x1, x1, #0x1
    1c78:	mov	x3, #0x0                   	// #0
    1c7c:	ldr	x21, [sp, #32]
    1c80:	str	x1, [x0, #24]
    1c84:	ldp	x19, x20, [sp, #16]
    1c88:	mov	x2, #0x0                   	// #0
    1c8c:	ldp	x29, x30, [sp], #64
    1c90:	mov	w1, #0x2f                  	// #47
    1c94:	b	64 <d_make_comp>
    1c98:	add	x20, sp, #0x38
    1c9c:	str	xzr, [sp, #56]
    1ca0:	mov	x0, x19
    1ca4:	bl	1bb8 <d_template_arg>
    1ca8:	mov	x2, x0
    1cac:	cbnz	x0, 1cc4 <d_template_args_1+0x78>
    1cb0:	mov	x0, #0x0                   	// #0
    1cb4:	ldp	x19, x20, [sp, #16]
    1cb8:	ldr	x21, [sp, #32]
    1cbc:	ldp	x29, x30, [sp], #64
    1cc0:	ret
    1cc4:	mov	x0, x19
    1cc8:	mov	x3, #0x0                   	// #0
    1ccc:	mov	w1, #0x2f                  	// #47
    1cd0:	bl	64 <d_make_comp>
    1cd4:	str	x0, [x20]
    1cd8:	cbz	x0, 1cb0 <d_template_args_1+0x64>
    1cdc:	add	x20, x0, #0x10
    1ce0:	ldr	x0, [x19, #24]
    1ce4:	ldrb	w1, [x0]
    1ce8:	cmp	w1, #0x45
    1cec:	b.ne	1ca0 <d_template_args_1+0x54>  // b.any
    1cf0:	add	x0, x0, #0x1
    1cf4:	str	x0, [x19, #24]
    1cf8:	str	x21, [x19, #64]
    1cfc:	ldr	x0, [sp, #56]
    1d00:	b	1cb4 <d_template_args_1+0x68>

0000000000001d04 <d_template_args>:
    1d04:	ldr	x3, [x0, #24]
    1d08:	ldrb	w1, [x3]
    1d0c:	sub	w1, w1, #0x49
    1d10:	and	w1, w1, #0xff
    1d14:	cmp	w1, #0x1
    1d18:	b.hi	1d28 <d_template_args+0x24>  // b.pmore
    1d1c:	add	x3, x3, #0x1
    1d20:	str	x3, [x0, #24]
    1d24:	b	1c4c <d_template_args_1>
    1d28:	mov	x0, #0x0                   	// #0
    1d2c:	ret

0000000000001d30 <d_operator_name>:
    1d30:	stp	x29, x30, [sp, #-32]!
    1d34:	mov	x29, sp
    1d38:	stp	x19, x20, [sp, #16]
    1d3c:	mov	x19, x0
    1d40:	ldr	x0, [x0, #24]
    1d44:	ldrb	w2, [x0]
    1d48:	cbz	w2, 1d58 <d_operator_name+0x28>
    1d4c:	add	x1, x0, #0x1
    1d50:	str	x1, [x19, #24]
    1d54:	ldrb	w2, [x0]
    1d58:	ldr	x0, [x19, #24]
    1d5c:	ldrb	w3, [x0]
    1d60:	cbz	w3, 1e14 <d_operator_name+0xe4>
    1d64:	add	x1, x0, #0x1
    1d68:	str	x1, [x19, #24]
    1d6c:	cmp	w2, #0x76
    1d70:	ldrb	w3, [x0]
    1d74:	b.ne	1dc0 <d_operator_name+0x90>  // b.any
    1d78:	sub	w20, w3, #0x30
    1d7c:	and	w0, w20, #0xff
    1d80:	cmp	w0, #0x9
    1d84:	b.hi	1e14 <d_operator_name+0xe4>  // b.pmore
    1d88:	mov	x0, x19
    1d8c:	bl	594 <d_source_name>
    1d90:	mov	x4, x0
    1d94:	mov	x0, x19
    1d98:	bl	30 <d_make_empty>
    1d9c:	cbz	x0, 1e98 <d_operator_name+0x168>
    1da0:	cbz	x4, 1e98 <d_operator_name+0x168>
    1da4:	mov	x1, #0x33                  	// #51
    1da8:	str	x1, [x0]
    1dac:	str	w20, [x0, #8]
    1db0:	str	x4, [x0, #16]
    1db4:	ldp	x19, x20, [sp, #16]
    1db8:	ldp	x29, x30, [sp], #32
    1dbc:	ret
    1dc0:	cmp	w2, #0x63
    1dc4:	mov	w0, #0x76                  	// #118
    1dc8:	ccmp	w3, w0, #0x0, eq  // eq = none
    1dcc:	b.ne	1e14 <d_operator_name+0xe4>  // b.any
    1dd0:	ldp	w0, w20, [x19, #76]
    1dd4:	cmp	w0, #0x0
    1dd8:	cset	w0, eq  // eq = none
    1ddc:	str	w0, [x19, #80]
    1de0:	mov	x0, x19
    1de4:	bl	14cc <d_type>
    1de8:	mov	x2, x0
    1dec:	ldr	w0, [x19, #80]
    1df0:	mov	x3, #0x0                   	// #0
    1df4:	cbz	w0, 1e0c <d_operator_name+0xdc>
    1df8:	mov	w1, #0x35                  	// #53
    1dfc:	mov	x0, x19
    1e00:	bl	64 <d_make_comp>
    1e04:	str	w20, [x19, #80]
    1e08:	b	1db4 <d_operator_name+0x84>
    1e0c:	mov	w1, #0x34                  	// #52
    1e10:	b	1dfc <d_operator_name+0xcc>
    1e14:	adrp	x1, 0 <is_fnqual_component_type>
    1e18:	add	x1, x1, #0x0
    1e1c:	add	x1, x1, #0x5c8
    1e20:	mov	w5, #0x43                  	// #67
    1e24:	mov	w4, #0x0                   	// #0
    1e28:	mov	w7, #0x2                   	// #2
    1e2c:	mov	w8, #0x18                  	// #24
    1e30:	sub	w0, w5, w4
    1e34:	sdiv	w0, w0, w7
    1e38:	add	w0, w0, w4
    1e3c:	smull	x6, w0, w8
    1e40:	add	x9, x1, x6
    1e44:	ldr	x6, [x1, x6]
    1e48:	ldrb	w10, [x6]
    1e4c:	cmp	w10, w2
    1e50:	b.ne	1e84 <d_operator_name+0x154>  // b.any
    1e54:	ldrb	w6, [x6, #1]
    1e58:	cmp	w6, w3
    1e5c:	b.ne	1e84 <d_operator_name+0x154>  // b.any
    1e60:	mov	x0, x19
    1e64:	bl	30 <d_make_empty>
    1e68:	cbz	x0, 1db4 <d_operator_name+0x84>
    1e6c:	mov	w1, #0x32                  	// #50
    1e70:	str	w1, [x0]
    1e74:	str	x9, [x0, #8]
    1e78:	b	1db4 <d_operator_name+0x84>
    1e7c:	mov	w5, w0
    1e80:	b	1e30 <d_operator_name+0x100>
    1e84:	b.hi	1e90 <d_operator_name+0x160>  // b.pmore
    1e88:	add	w4, w0, #0x1
    1e8c:	mov	w0, w5
    1e90:	cmp	w4, w0
    1e94:	b.ne	1e7c <d_operator_name+0x14c>  // b.any
    1e98:	mov	x0, #0x0                   	// #0
    1e9c:	b	1db4 <d_operator_name+0x84>

0000000000001ea0 <d_parmlist>:
    1ea0:	stp	x29, x30, [sp, #-64]!
    1ea4:	mov	x29, sp
    1ea8:	stp	x19, x20, [sp, #16]
    1eac:	mov	x19, x0
    1eb0:	add	x20, sp, #0x38
    1eb4:	str	x21, [sp, #32]
    1eb8:	mov	w21, #0x4f                  	// #79
    1ebc:	str	xzr, [sp, #56]
    1ec0:	ldr	x1, [x19, #24]
    1ec4:	ldrb	w0, [x1]
    1ec8:	cmp	w0, #0x45
    1ecc:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    1ed0:	b.eq	1f38 <d_parmlist+0x98>  // b.none
    1ed4:	cmp	w0, #0x2e
    1ed8:	b.eq	1f38 <d_parmlist+0x98>  // b.none
    1edc:	cmp	w0, #0x52
    1ee0:	ccmp	w0, w21, #0x4, ne  // ne = any
    1ee4:	b.ne	1ef4 <d_parmlist+0x54>  // b.any
    1ee8:	ldrb	w0, [x1, #1]
    1eec:	cmp	w0, #0x45
    1ef0:	b.eq	1f38 <d_parmlist+0x98>  // b.none
    1ef4:	mov	x0, x19
    1ef8:	bl	14cc <d_type>
    1efc:	mov	x2, x0
    1f00:	cbnz	x0, 1f18 <d_parmlist+0x78>
    1f04:	mov	x0, #0x0                   	// #0
    1f08:	ldp	x19, x20, [sp, #16]
    1f0c:	ldr	x21, [sp, #32]
    1f10:	ldp	x29, x30, [sp], #64
    1f14:	ret
    1f18:	mov	x0, x19
    1f1c:	mov	x3, #0x0                   	// #0
    1f20:	mov	w1, #0x2e                  	// #46
    1f24:	bl	64 <d_make_comp>
    1f28:	str	x0, [x20]
    1f2c:	cbz	x0, 1f04 <d_parmlist+0x64>
    1f30:	add	x20, x0, #0x10
    1f34:	b	1ec0 <d_parmlist+0x20>
    1f38:	ldr	x0, [sp, #56]
    1f3c:	cbz	x0, 1f04 <d_parmlist+0x64>
    1f40:	ldr	x1, [x0, #16]
    1f44:	cbnz	x1, 1f08 <d_parmlist+0x68>
    1f48:	ldr	x1, [x0, #8]
    1f4c:	ldr	w2, [x1]
    1f50:	cmp	w2, #0x27
    1f54:	b.ne	1f08 <d_parmlist+0x68>  // b.any
    1f58:	ldr	x2, [x1, #8]
    1f5c:	ldr	w1, [x2, #28]
    1f60:	cmp	w1, #0x9
    1f64:	b.ne	1f08 <d_parmlist+0x68>  // b.any
    1f68:	ldr	w2, [x2, #8]
    1f6c:	ldr	w1, [x19, #72]
    1f70:	sub	w1, w1, w2
    1f74:	str	w1, [x19, #72]
    1f78:	str	xzr, [x0, #8]
    1f7c:	b	1f08 <d_parmlist+0x68>

0000000000001f80 <d_cv_qualifiers>:
    1f80:	stp	x29, x30, [sp, #-80]!
    1f84:	cmp	w2, #0x0
    1f88:	mov	x29, sp
    1f8c:	stp	x19, x20, [sp, #16]
    1f90:	mov	x19, x0
    1f94:	mov	x20, x1
    1f98:	ldr	x0, [x0, #24]
    1f9c:	stp	x21, x22, [sp, #32]
    1fa0:	mov	w21, w2
    1fa4:	stp	x23, x24, [sp, #48]
    1fa8:	mov	x22, x1
    1fac:	mov	w24, #0x1d                  	// #29
    1fb0:	str	x25, [sp, #64]
    1fb4:	mov	w25, #0x1e                  	// #30
    1fb8:	mov	w23, #0x1c                  	// #28
    1fbc:	ldrb	w3, [x0]
    1fc0:	mov	w0, #0x1b                  	// #27
    1fc4:	csel	w25, w25, w0, ne  // ne = any
    1fc8:	mov	w0, #0x1a                  	// #26
    1fcc:	csel	w24, w24, w0, ne  // ne = any
    1fd0:	mov	w0, #0x19                  	// #25
    1fd4:	csel	w23, w23, w0, ne  // ne = any
    1fd8:	ldr	x4, [x19, #24]
    1fdc:	mov	x0, x4
    1fe0:	bl	7ac <next_is_type_qual.isra.0>
    1fe4:	cbnz	w0, 203c <d_cv_qualifiers+0xbc>
    1fe8:	cmp	w3, #0x46
    1fec:	eor	w21, w21, #0x1
    1ff0:	cset	w0, eq  // eq = none
    1ff4:	tst	w21, w0
    1ff8:	b.eq	21a8 <d_cv_qualifiers+0x228>  // b.none
    1ffc:	mov	w1, #0x1d                  	// #29
    2000:	mov	w2, #0x1e                  	// #30
    2004:	mov	w3, #0x1c                  	// #28
    2008:	cmp	x22, x20
    200c:	b.eq	20a8 <d_cv_qualifiers+0x128>  // b.none
    2010:	ldr	x20, [x20]
    2014:	ldr	w0, [x20]
    2018:	cmp	w0, #0x1a
    201c:	b.eq	21b0 <d_cv_qualifiers+0x230>  // b.none
    2020:	cmp	w0, #0x1b
    2024:	b.eq	21b8 <d_cv_qualifiers+0x238>  // b.none
    2028:	cmp	w0, #0x19
    202c:	b.ne	2034 <d_cv_qualifiers+0xb4>  // b.any
    2030:	str	w3, [x20]
    2034:	add	x20, x20, #0x8
    2038:	b	2008 <d_cv_qualifiers+0x88>
    203c:	add	x0, x4, #0x1
    2040:	str	x0, [x19, #24]
    2044:	cmp	w3, #0x72
    2048:	b.ne	2064 <d_cv_qualifiers+0xe4>  // b.any
    204c:	ldr	w0, [x19, #72]
    2050:	mov	w1, w23
    2054:	add	w0, w0, #0x9
    2058:	str	w0, [x19, #72]
    205c:	mov	x3, #0x0                   	// #0
    2060:	b	20ec <d_cv_qualifiers+0x16c>
    2064:	cmp	w3, #0x56
    2068:	b.ne	2080 <d_cv_qualifiers+0x100>  // b.any
    206c:	ldr	w0, [x19, #72]
    2070:	mov	w1, w24
    2074:	add	w0, w0, #0x9
    2078:	str	w0, [x19, #72]
    207c:	b	205c <d_cv_qualifiers+0xdc>
    2080:	cmp	w3, #0x4b
    2084:	b.ne	209c <d_cv_qualifiers+0x11c>  // b.any
    2088:	ldr	w0, [x19, #72]
    208c:	mov	w1, w25
    2090:	add	w0, w0, #0x6
    2094:	str	w0, [x19, #72]
    2098:	b	205c <d_cv_qualifiers+0xdc>
    209c:	ldrb	w0, [x4, #1]
    20a0:	cbnz	w0, 20c4 <d_cv_qualifiers+0x144>
    20a4:	mov	x20, #0x0                   	// #0
    20a8:	mov	x0, x20
    20ac:	ldp	x19, x20, [sp, #16]
    20b0:	ldp	x21, x22, [sp, #32]
    20b4:	ldp	x23, x24, [sp, #48]
    20b8:	ldr	x25, [sp, #64]
    20bc:	ldp	x29, x30, [sp], #80
    20c0:	ret
    20c4:	add	x0, x4, #0x2
    20c8:	str	x0, [x19, #24]
    20cc:	ldrb	w0, [x4, #1]
    20d0:	cmp	w0, #0x78
    20d4:	b.ne	2110 <d_cv_qualifiers+0x190>  // b.any
    20d8:	ldr	w0, [x19, #72]
    20dc:	mov	x3, #0x0                   	// #0
    20e0:	mov	w1, #0x4d                  	// #77
    20e4:	add	w0, w0, #0x11
    20e8:	str	w0, [x19, #72]
    20ec:	mov	x0, x19
    20f0:	mov	x2, #0x0                   	// #0
    20f4:	bl	64 <d_make_comp>
    20f8:	str	x0, [x22]
    20fc:	cbz	x0, 20a4 <d_cv_qualifiers+0x124>
    2100:	add	x22, x0, #0x8
    2104:	ldr	x0, [x19, #24]
    2108:	ldrb	w3, [x0]
    210c:	b	1fd8 <d_cv_qualifiers+0x58>
    2110:	and	w2, w0, #0xffffffdf
    2114:	and	w1, w2, #0xff
    2118:	cmp	w2, #0x4f
    211c:	b.ne	2164 <d_cv_qualifiers+0x1e4>  // b.any
    2120:	ldr	w2, [x19, #72]
    2124:	cmp	w0, #0x4f
    2128:	add	w2, w2, #0x9
    212c:	str	w2, [x19, #72]
    2130:	b.ne	205c <d_cv_qualifiers+0xdc>  // b.any
    2134:	mov	x0, x19
    2138:	bl	13e8 <d_expression>
    213c:	mov	x3, x0
    2140:	cbz	x0, 20a4 <d_cv_qualifiers+0x124>
    2144:	ldr	x0, [x19, #24]
    2148:	ldrb	w1, [x0]
    214c:	cmp	w1, #0x45
    2150:	b.ne	20a4 <d_cv_qualifiers+0x124>  // b.any
    2154:	add	x0, x0, #0x1
    2158:	mov	w1, #0x4f                  	// #79
    215c:	str	x0, [x19, #24]
    2160:	b	20ec <d_cv_qualifiers+0x16c>
    2164:	cmp	w0, #0x77
    2168:	b.ne	20a4 <d_cv_qualifiers+0x124>  // b.any
    216c:	ldr	w0, [x19, #72]
    2170:	add	w0, w0, #0x6
    2174:	str	w0, [x19, #72]
    2178:	mov	x0, x19
    217c:	bl	1ea0 <d_parmlist>
    2180:	mov	x3, x0
    2184:	cbz	x0, 20a4 <d_cv_qualifiers+0x124>
    2188:	ldr	x0, [x19, #24]
    218c:	ldrb	w1, [x0]
    2190:	cmp	w1, #0x45
    2194:	b.ne	20a4 <d_cv_qualifiers+0x124>  // b.any
    2198:	add	x0, x0, #0x1
    219c:	mov	w1, #0x50                  	// #80
    21a0:	str	x0, [x19, #24]
    21a4:	b	20ec <d_cv_qualifiers+0x16c>
    21a8:	mov	x20, x22
    21ac:	b	20a8 <d_cv_qualifiers+0x128>
    21b0:	str	w1, [x20]
    21b4:	b	2034 <d_cv_qualifiers+0xb4>
    21b8:	str	w2, [x20]
    21bc:	b	2034 <d_cv_qualifiers+0xb4>

00000000000021c0 <d_bare_function_type>:
    21c0:	stp	x29, x30, [sp, #-32]!
    21c4:	mov	x29, sp
    21c8:	stp	x19, x20, [sp, #16]
    21cc:	mov	x19, x0
    21d0:	ldr	x0, [x0, #24]
    21d4:	ldrb	w2, [x0]
    21d8:	cmp	w2, #0x4a
    21dc:	b.ne	2208 <d_bare_function_type+0x48>  // b.any
    21e0:	add	x0, x0, #0x1
    21e4:	str	x0, [x19, #24]
    21e8:	mov	x0, x19
    21ec:	bl	14cc <d_type>
    21f0:	mov	x20, x0
    21f4:	cbnz	x0, 2210 <d_bare_function_type+0x50>
    21f8:	mov	x0, #0x0                   	// #0
    21fc:	ldp	x19, x20, [sp, #16]
    2200:	ldp	x29, x30, [sp], #32
    2204:	ret
    2208:	cbnz	w1, 21e8 <d_bare_function_type+0x28>
    220c:	mov	x20, #0x0                   	// #0
    2210:	mov	x0, x19
    2214:	bl	1ea0 <d_parmlist>
    2218:	mov	x3, x0
    221c:	cbz	x0, 21f8 <d_bare_function_type+0x38>
    2220:	mov	x2, x20
    2224:	mov	x0, x19
    2228:	ldp	x19, x20, [sp, #16]
    222c:	mov	w1, #0x29                  	// #41
    2230:	ldp	x29, x30, [sp], #32
    2234:	b	64 <d_make_comp>

0000000000002238 <d_function_type>:
    2238:	stp	x29, x30, [sp, #-32]!
    223c:	mov	x29, sp
    2240:	str	x19, [sp, #16]
    2244:	mov	x19, x0
    2248:	ldr	w0, [x0, #16]
    224c:	tbnz	w0, #18, 2264 <d_function_type+0x2c>
    2250:	ldr	w0, [x19, #84]
    2254:	cmp	w0, #0x800
    2258:	b.hi	22e8 <d_function_type+0xb0>  // b.pmore
    225c:	add	w0, w0, #0x1
    2260:	str	w0, [x19, #84]
    2264:	ldr	x0, [x19, #24]
    2268:	ldrb	w1, [x0]
    226c:	cmp	w1, #0x46
    2270:	b.eq	2298 <d_function_type+0x60>  // b.none
    2274:	mov	x0, #0x0                   	// #0
    2278:	ldr	w1, [x19, #16]
    227c:	tbnz	w1, #18, 228c <d_function_type+0x54>
    2280:	ldr	w1, [x19, #84]
    2284:	sub	w1, w1, #0x1
    2288:	str	w1, [x19, #84]
    228c:	ldr	x19, [sp, #16]
    2290:	ldp	x29, x30, [sp], #32
    2294:	ret
    2298:	add	x1, x0, #0x1
    229c:	str	x1, [x19, #24]
    22a0:	add	x0, x0, #0x2
    22a4:	ldurb	w2, [x0, #-1]
    22a8:	cmp	w2, #0x59
    22ac:	csel	x0, x0, x1, eq  // eq = none
    22b0:	str	x0, [x19, #24]
    22b4:	mov	w1, #0x1                   	// #1
    22b8:	mov	x0, x19
    22bc:	bl	21c0 <d_bare_function_type>
    22c0:	mov	x1, x0
    22c4:	mov	x0, x19
    22c8:	bl	13c <d_ref_qualifier>
    22cc:	ldr	x1, [x19, #24]
    22d0:	ldrb	w2, [x1]
    22d4:	cmp	w2, #0x45
    22d8:	b.ne	2274 <d_function_type+0x3c>  // b.any
    22dc:	add	x1, x1, #0x1
    22e0:	str	x1, [x19, #24]
    22e4:	b	2278 <d_function_type+0x40>
    22e8:	mov	x0, #0x0                   	// #0
    22ec:	b	228c <d_function_type+0x54>

00000000000022f0 <d_unqualified_name>:
    22f0:	stp	x29, x30, [sp, #-48]!
    22f4:	mov	x29, sp
    22f8:	ldr	x1, [x0, #24]
    22fc:	stp	x19, x20, [sp, #16]
    2300:	mov	x20, x0
    2304:	str	x21, [sp, #32]
    2308:	ldrb	w2, [x1]
    230c:	sub	w3, w2, #0x30
    2310:	and	w3, w3, #0xff
    2314:	cmp	w3, #0x9
    2318:	b.hi	234c <d_unqualified_name+0x5c>  // b.pmore
    231c:	bl	594 <d_source_name>
    2320:	mov	x19, x0
    2324:	ldr	x0, [x20, #24]
    2328:	ldrb	w0, [x0]
    232c:	cmp	w0, #0x42
    2330:	b.ne	2554 <d_unqualified_name+0x264>  // b.any
    2334:	mov	x1, x19
    2338:	mov	x0, x20
    233c:	ldp	x19, x20, [sp, #16]
    2340:	ldr	x21, [sp, #32]
    2344:	ldp	x29, x30, [sp], #48
    2348:	b	69c <d_abi_tags>
    234c:	sub	w3, w2, #0x61
    2350:	and	w3, w3, #0xff
    2354:	cmp	w3, #0x19
    2358:	b.hi	23e0 <d_unqualified_name+0xf0>  // b.pmore
    235c:	cmp	w2, #0x6f
    2360:	b.ne	2378 <d_unqualified_name+0x88>  // b.any
    2364:	ldrb	w0, [x1, #1]
    2368:	cmp	w0, #0x6e
    236c:	b.ne	2378 <d_unqualified_name+0x88>  // b.any
    2370:	add	x1, x1, #0x2
    2374:	str	x1, [x20, #24]
    2378:	mov	x0, x20
    237c:	bl	1d30 <d_operator_name>
    2380:	mov	x19, x0
    2384:	cbz	x0, 2430 <d_unqualified_name+0x140>
    2388:	ldr	w0, [x0]
    238c:	cmp	w0, #0x32
    2390:	b.ne	2324 <d_unqualified_name+0x34>  // b.any
    2394:	ldr	x2, [x19, #8]
    2398:	ldr	w0, [x20, #72]
    239c:	ldr	w1, [x2, #16]
    23a0:	add	w0, w0, #0x7
    23a4:	add	w0, w0, w1
    23a8:	str	w0, [x20, #72]
    23ac:	ldr	x0, [x2]
    23b0:	adrp	x1, 0 <is_fnqual_component_type>
    23b4:	add	x1, x1, #0x0
    23b8:	bl	0 <strcmp>
    23bc:	cbnz	w0, 2324 <d_unqualified_name+0x34>
    23c0:	mov	x0, x20
    23c4:	bl	594 <d_source_name>
    23c8:	mov	x2, x19
    23cc:	mov	x3, x0
    23d0:	mov	w1, #0x37                  	// #55
    23d4:	mov	x0, x20
    23d8:	bl	64 <d_make_comp>
    23dc:	b	2320 <d_unqualified_name+0x30>
    23e0:	sub	w3, w2, #0x43
    23e4:	and	w3, w3, #0xff
    23e8:	cmp	w3, #0x1
    23ec:	b.hi	2534 <d_unqualified_name+0x244>  // b.pmore
    23f0:	ldr	x4, [x0, #64]
    23f4:	cbz	x4, 241c <d_unqualified_name+0x12c>
    23f8:	ldr	w0, [x4]
    23fc:	cbnz	w0, 2414 <d_unqualified_name+0x124>
    2400:	ldr	w2, [x4, #16]
    2404:	ldr	w0, [x20, #72]
    2408:	add	w0, w0, w2
    240c:	str	w0, [x20, #72]
    2410:	b	241c <d_unqualified_name+0x12c>
    2414:	cmp	w0, #0x18
    2418:	b.eq	2400 <d_unqualified_name+0x110>  // b.none
    241c:	ldrb	w0, [x1]
    2420:	cmp	w0, #0x43
    2424:	b.eq	2438 <d_unqualified_name+0x148>  // b.none
    2428:	cmp	w0, #0x44
    242c:	b.eq	24b8 <d_unqualified_name+0x1c8>  // b.none
    2430:	mov	x19, #0x0                   	// #0
    2434:	b	2324 <d_unqualified_name+0x34>
    2438:	ldrb	w0, [x1, #1]
    243c:	cmp	w0, #0x49
    2440:	b.ne	24b0 <d_unqualified_name+0x1c0>  // b.any
    2444:	add	x1, x1, #0x1
    2448:	mov	w2, #0x1                   	// #1
    244c:	str	x1, [x20, #24]
    2450:	ldr	x0, [x20, #24]
    2454:	ldrb	w21, [x0, #1]
    2458:	sub	w1, w21, #0x31
    245c:	and	w1, w1, #0xff
    2460:	cmp	w1, #0x4
    2464:	b.hi	2430 <d_unqualified_name+0x140>  // b.pmore
    2468:	add	x0, x0, #0x2
    246c:	str	x0, [x20, #24]
    2470:	cbz	w2, 247c <d_unqualified_name+0x18c>
    2474:	mov	x0, x20
    2478:	bl	14cc <d_type>
    247c:	ldr	x4, [x20, #64]
    2480:	mov	x0, x20
    2484:	bl	30 <d_make_empty>
    2488:	cmp	x0, #0x0
    248c:	mov	x19, x0
    2490:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    2494:	b.eq	2430 <d_unqualified_name+0x140>  // b.none
    2498:	mov	x0, #0x7                   	// #7
    249c:	str	x0, [x19]
    24a0:	sub	w0, w21, #0x30
    24a4:	str	w0, [x19, #8]
    24a8:	str	x4, [x19, #16]
    24ac:	b	2324 <d_unqualified_name+0x34>
    24b0:	mov	w2, #0x0                   	// #0
    24b4:	b	2450 <d_unqualified_name+0x160>
    24b8:	ldrb	w0, [x1, #1]
    24bc:	sub	w0, w0, #0x30
    24c0:	cmp	w0, #0x5
    24c4:	b.hi	2430 <d_unqualified_name+0x140>  // b.pmore
    24c8:	adrp	x2, 0 <is_fnqual_component_type>
    24cc:	add	x2, x2, #0x0
    24d0:	ldrb	w0, [x2, w0, uxtw]
    24d4:	adr	x2, 24e0 <d_unqualified_name+0x1f0>
    24d8:	add	x0, x2, w0, sxtb #2
    24dc:	br	x0
    24e0:	mov	w5, #0x2                   	// #2
    24e4:	add	x1, x1, #0x2
    24e8:	str	x1, [x20, #24]
    24ec:	mov	x0, x20
    24f0:	bl	30 <d_make_empty>
    24f4:	cmp	x0, #0x0
    24f8:	mov	x19, x0
    24fc:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    2500:	b.eq	2430 <d_unqualified_name+0x140>  // b.none
    2504:	mov	x0, #0x8                   	// #8
    2508:	str	x0, [x19]
    250c:	str	w5, [x19, #8]
    2510:	b	24a8 <d_unqualified_name+0x1b8>
    2514:	mov	w5, #0x3                   	// #3
    2518:	b	24e4 <d_unqualified_name+0x1f4>
    251c:	mov	w5, #0x4                   	// #4
    2520:	b	24e4 <d_unqualified_name+0x1f4>
    2524:	mov	w5, #0x5                   	// #5
    2528:	b	24e4 <d_unqualified_name+0x1f4>
    252c:	mov	w5, #0x1                   	// #1
    2530:	b	24e4 <d_unqualified_name+0x1f4>
    2534:	cmp	w2, #0x4c
    2538:	b.ne	2578 <d_unqualified_name+0x288>  // b.any
    253c:	add	x1, x1, #0x1
    2540:	str	x1, [x0, #24]
    2544:	bl	594 <d_source_name>
    2548:	mov	x19, x0
    254c:	cbnz	x0, 2568 <d_unqualified_name+0x278>
    2550:	mov	x19, #0x0                   	// #0
    2554:	mov	x0, x19
    2558:	ldp	x19, x20, [sp, #16]
    255c:	ldr	x21, [sp, #32]
    2560:	ldp	x29, x30, [sp], #48
    2564:	ret
    2568:	mov	x0, x20
    256c:	bl	84c <d_discriminator>
    2570:	cbnz	w0, 2324 <d_unqualified_name+0x34>
    2574:	b	2550 <d_unqualified_name+0x260>
    2578:	cmp	w2, #0x55
    257c:	b.ne	2550 <d_unqualified_name+0x260>  // b.any
    2580:	ldrb	w2, [x1, #1]
    2584:	cmp	w2, #0x6c
    2588:	b.eq	25dc <d_unqualified_name+0x2ec>  // b.none
    258c:	cmp	w2, #0x74
    2590:	b.ne	2550 <d_unqualified_name+0x260>  // b.any
    2594:	add	x2, x1, #0x1
    2598:	str	x2, [x0, #24]
    259c:	ldrb	w2, [x1, #1]
    25a0:	cmp	w2, #0x74
    25a4:	b.ne	2430 <d_unqualified_name+0x140>  // b.any
    25a8:	add	x1, x1, #0x2
    25ac:	str	x1, [x0, #24]
    25b0:	bl	4b0 <d_compact_number>
    25b4:	sxtw	x4, w0
    25b8:	tbnz	w4, #31, 2430 <d_unqualified_name+0x140>
    25bc:	mov	x0, x20
    25c0:	bl	30 <d_make_empty>
    25c4:	mov	x19, x0
    25c8:	cbz	x0, 264c <d_unqualified_name+0x35c>
    25cc:	mov	w0, #0x48                  	// #72
    25d0:	str	w0, [x19]
    25d4:	str	x4, [x19, #8]
    25d8:	b	264c <d_unqualified_name+0x35c>
    25dc:	add	x2, x1, #0x1
    25e0:	str	x2, [x0, #24]
    25e4:	ldrb	w2, [x1, #1]
    25e8:	cmp	w2, #0x6c
    25ec:	b.ne	2430 <d_unqualified_name+0x140>  // b.any
    25f0:	add	x1, x1, #0x2
    25f4:	str	x1, [x0, #24]
    25f8:	bl	1ea0 <d_parmlist>
    25fc:	mov	x9, x0
    2600:	cbz	x0, 2430 <d_unqualified_name+0x140>
    2604:	ldr	x0, [x20, #24]
    2608:	ldrb	w1, [x0]
    260c:	cmp	w1, #0x45
    2610:	b.ne	2430 <d_unqualified_name+0x140>  // b.any
    2614:	add	x0, x0, #0x1
    2618:	str	x0, [x20, #24]
    261c:	mov	x0, x20
    2620:	bl	4b0 <d_compact_number>
    2624:	mov	w4, w0
    2628:	tbnz	w0, #31, 2430 <d_unqualified_name+0x140>
    262c:	mov	x0, x20
    2630:	bl	30 <d_make_empty>
    2634:	mov	x19, x0
    2638:	cbz	x0, 264c <d_unqualified_name+0x35c>
    263c:	mov	w0, #0x46                  	// #70
    2640:	str	w0, [x19]
    2644:	str	x9, [x19, #8]
    2648:	str	w4, [x19, #16]
    264c:	mov	x1, x19
    2650:	mov	x0, x20
    2654:	bl	194 <d_add_substitution>
    2658:	cbnz	w0, 2324 <d_unqualified_name+0x34>
    265c:	b	2430 <d_unqualified_name+0x140>

0000000000002660 <d_name>:
    2660:	stp	x29, x30, [sp, #-96]!
    2664:	mov	x29, sp
    2668:	ldr	x1, [x0, #24]
    266c:	stp	x19, x20, [sp, #16]
    2670:	stp	x21, x22, [sp, #32]
    2674:	stp	x23, x24, [sp, #48]
    2678:	str	x25, [sp, #64]
    267c:	ldrb	w2, [x1]
    2680:	cmp	w2, #0x55
    2684:	b.eq	29ec <d_name+0x38c>  // b.none
    2688:	mov	x19, x0
    268c:	b.hi	26d0 <d_name+0x70>  // b.pmore
    2690:	cmp	w2, #0x4e
    2694:	b.eq	2774 <d_name+0x114>  // b.none
    2698:	cmp	w2, #0x53
    269c:	b.eq	29f8 <d_name+0x398>  // b.none
    26a0:	mov	x0, x19
    26a4:	bl	22f0 <d_unqualified_name>
    26a8:	mov	x20, x0
    26ac:	ldr	x0, [x19, #24]
    26b0:	ldrb	w0, [x0]
    26b4:	cmp	w0, #0x49
    26b8:	b.ne	2940 <d_name+0x2e0>  // b.any
    26bc:	mov	x1, x20
    26c0:	mov	x0, x19
    26c4:	bl	194 <d_add_substitution>
    26c8:	cbnz	w0, 2a28 <d_name+0x3c8>
    26cc:	b	2790 <d_name+0x130>
    26d0:	cmp	w2, #0x5a
    26d4:	b.ne	26a0 <d_name+0x40>  // b.any
    26d8:	add	x1, x1, #0x1
    26dc:	str	x1, [x0, #24]
    26e0:	mov	w1, #0x0                   	// #0
    26e4:	bl	2a90 <d_encoding>
    26e8:	mov	x20, x0
    26ec:	cbz	x0, 2790 <d_name+0x130>
    26f0:	ldr	x1, [x19, #24]
    26f4:	ldrb	w0, [x1]
    26f8:	cmp	w0, #0x45
    26fc:	b.ne	2790 <d_name+0x130>  // b.any
    2700:	add	x0, x1, #0x1
    2704:	str	x0, [x19, #24]
    2708:	ldrb	w0, [x1, #1]
    270c:	cmp	w0, #0x73
    2710:	b.ne	295c <d_name+0x2fc>  // b.any
    2714:	add	x1, x1, #0x2
    2718:	str	x1, [x19, #24]
    271c:	mov	x0, x19
    2720:	bl	84c <d_discriminator>
    2724:	cbz	w0, 2790 <d_name+0x130>
    2728:	mov	x0, x19
    272c:	mov	w2, #0xe                   	// #14
    2730:	adrp	x1, 0 <is_fnqual_component_type>
    2734:	add	x1, x1, #0x0
    2738:	bl	d4 <d_make_name>
    273c:	mov	x3, x0
    2740:	ldr	w0, [x20]
    2744:	cmp	w0, #0x3
    2748:	b.ne	2760 <d_name+0x100>  // b.any
    274c:	ldr	x0, [x20, #16]
    2750:	ldr	w1, [x0]
    2754:	cmp	w1, #0x29
    2758:	b.ne	2760 <d_name+0x100>  // b.any
    275c:	str	xzr, [x0, #8]
    2760:	mov	x2, x20
    2764:	mov	w1, #0x2                   	// #2
    2768:	mov	x0, x19
    276c:	bl	64 <d_make_comp>
    2770:	b	29f0 <d_name+0x390>
    2774:	add	x1, x1, #0x1
    2778:	str	x1, [x0, #24]
    277c:	mov	w2, #0x1                   	// #1
    2780:	add	x1, sp, #0x58
    2784:	bl	1f80 <d_cv_qualifiers>
    2788:	mov	x21, x0
    278c:	cbnz	x0, 2798 <d_name+0x138>
    2790:	mov	x20, #0x0                   	// #0
    2794:	b	2940 <d_name+0x2e0>
    2798:	mov	x24, #0x3ff                 	// #1023
    279c:	mov	x0, x19
    27a0:	mov	x1, #0x0                   	// #0
    27a4:	movk	x24, #0x1008, lsl #16
    27a8:	bl	13c <d_ref_qualifier>
    27ac:	mov	x22, x0
    27b0:	mov	x25, #0x0                   	// #0
    27b4:	mov	w23, #0x1                   	// #1
    27b8:	movk	x24, #0x20, lsl #32
    27bc:	ldr	x1, [x19, #24]
    27c0:	ldrb	w20, [x1]
    27c4:	cbnz	w20, 27d0 <d_name+0x170>
    27c8:	str	xzr, [x21]
    27cc:	b	2790 <d_name+0x130>
    27d0:	cmp	w20, #0x44
    27d4:	b.ne	2828 <d_name+0x1c8>  // b.any
    27d8:	ldrb	w0, [x1, #1]
    27dc:	and	w0, w0, #0xffffffdf
    27e0:	and	w0, w0, #0xff
    27e4:	cmp	w0, #0x54
    27e8:	mov	x0, x19
    27ec:	b.ne	2820 <d_name+0x1c0>  // b.any
    27f0:	bl	14cc <d_type>
    27f4:	mov	x4, x0
    27f8:	cbnz	x25, 2894 <d_name+0x234>
    27fc:	ldr	x0, [x19, #24]
    2800:	ldrb	w0, [x0]
    2804:	cmp	w0, #0x45
    2808:	b.eq	287c <d_name+0x21c>  // b.none
    280c:	mov	x1, x4
    2810:	mov	x0, x19
    2814:	bl	194 <d_add_substitution>
    2818:	cbnz	w0, 287c <d_name+0x21c>
    281c:	b	27c8 <d_name+0x168>
    2820:	bl	22f0 <d_unqualified_name>
    2824:	b	27f4 <d_name+0x194>
    2828:	sub	w0, w20, #0x30
    282c:	and	w2, w0, #0xff
    2830:	cmp	w2, #0x26
    2834:	lsr	x0, x24, x0
    2838:	sub	w2, w20, #0x61
    283c:	mvn	x0, x0
    2840:	and	w2, w2, #0xff
    2844:	and	w0, w0, #0x1
    2848:	csel	w0, w0, w23, cc  // cc = lo, ul, last
    284c:	cmp	w2, #0x19
    2850:	cset	w2, ls  // ls = plast
    2854:	eor	w0, w0, #0x1
    2858:	orr	w0, w2, w0
    285c:	cbnz	w0, 2884 <d_name+0x224>
    2860:	cmp	w20, #0x53
    2864:	b.ne	289c <d_name+0x23c>  // b.any
    2868:	mov	x0, x19
    286c:	mov	w1, #0x1                   	// #1
    2870:	bl	ad8 <d_substitution>
    2874:	mov	x4, x0
    2878:	cbnz	x25, 2894 <d_name+0x234>
    287c:	mov	x25, x4
    2880:	b	27bc <d_name+0x15c>
    2884:	mov	x0, x19
    2888:	bl	22f0 <d_unqualified_name>
    288c:	mov	x4, x0
    2890:	cbz	x25, 28cc <d_name+0x26c>
    2894:	mov	w1, #0x1                   	// #1
    2898:	b	28b8 <d_name+0x258>
    289c:	cmp	w20, #0x49
    28a0:	b.ne	28d8 <d_name+0x278>  // b.any
    28a4:	cbz	x25, 27c8 <d_name+0x168>
    28a8:	mov	x0, x19
    28ac:	bl	1d04 <d_template_args>
    28b0:	mov	x4, x0
    28b4:	mov	w1, #0x4                   	// #4
    28b8:	mov	x3, x4
    28bc:	mov	x2, x25
    28c0:	mov	x0, x19
    28c4:	bl	64 <d_make_comp>
    28c8:	mov	x4, x0
    28cc:	cmp	w20, #0x53
    28d0:	b.ne	27fc <d_name+0x19c>  // b.any
    28d4:	b	287c <d_name+0x21c>
    28d8:	cmp	w20, #0x54
    28dc:	b.ne	28ec <d_name+0x28c>  // b.any
    28e0:	mov	x0, x19
    28e4:	bl	534 <d_template_param>
    28e8:	b	27f4 <d_name+0x194>
    28ec:	cmp	w20, #0x45
    28f0:	b.eq	2910 <d_name+0x2b0>  // b.none
    28f4:	cmp	w20, #0x4d
    28f8:	b.ne	27c8 <d_name+0x168>  // b.any
    28fc:	cbz	x25, 27c8 <d_name+0x168>
    2900:	add	x1, x1, #0x1
    2904:	mov	x4, x25
    2908:	str	x1, [x19, #24]
    290c:	b	287c <d_name+0x21c>
    2910:	str	x25, [x21]
    2914:	cbz	x25, 2790 <d_name+0x130>
    2918:	cbz	x22, 2928 <d_name+0x2c8>
    291c:	ldr	x0, [sp, #88]
    2920:	str	x0, [x22, #8]
    2924:	str	x22, [sp, #88]
    2928:	ldrb	w0, [x1]
    292c:	cmp	w0, #0x45
    2930:	b.ne	2790 <d_name+0x130>  // b.any
    2934:	ldr	x20, [sp, #88]
    2938:	add	x1, x1, #0x1
    293c:	str	x1, [x19, #24]
    2940:	mov	x0, x20
    2944:	ldp	x19, x20, [sp, #16]
    2948:	ldp	x21, x22, [sp, #32]
    294c:	ldp	x23, x24, [sp, #48]
    2950:	ldr	x25, [sp, #64]
    2954:	ldp	x29, x30, [sp], #96
    2958:	ret
    295c:	cmp	w0, #0x64
    2960:	b.ne	299c <d_name+0x33c>  // b.any
    2964:	add	x1, x1, #0x2
    2968:	str	x1, [x19, #24]
    296c:	mov	x0, x19
    2970:	bl	4b0 <d_compact_number>
    2974:	mov	w21, w0
    2978:	tbnz	w0, #31, 2790 <d_name+0x130>
    297c:	mov	x0, x19
    2980:	bl	2660 <d_name>
    2984:	mov	x10, x0
    2988:	cbnz	x0, 29a4 <d_name+0x344>
    298c:	cmn	w21, #0x1
    2990:	b.ne	29c8 <d_name+0x368>  // b.any
    2994:	mov	x3, x10
    2998:	b	2740 <d_name+0xe0>
    299c:	mov	w21, #0xffffffff            	// #-1
    29a0:	b	297c <d_name+0x31c>
    29a4:	ldr	w0, [x0]
    29a8:	cmp	w0, #0x46
    29ac:	b.eq	298c <d_name+0x32c>  // b.none
    29b0:	cmp	w0, #0x48
    29b4:	b.eq	298c <d_name+0x32c>  // b.none
    29b8:	mov	x0, x19
    29bc:	bl	84c <d_discriminator>
    29c0:	cbnz	w0, 298c <d_name+0x32c>
    29c4:	b	2790 <d_name+0x130>
    29c8:	mov	x0, x19
    29cc:	bl	30 <d_make_empty>
    29d0:	mov	x3, x0
    29d4:	cbz	x0, 2740 <d_name+0xe0>
    29d8:	mov	w0, #0x47                  	// #71
    29dc:	str	w0, [x3]
    29e0:	str	x10, [x3, #8]
    29e4:	str	w21, [x3, #16]
    29e8:	b	2740 <d_name+0xe0>
    29ec:	bl	22f0 <d_unqualified_name>
    29f0:	mov	x20, x0
    29f4:	b	2940 <d_name+0x2e0>
    29f8:	ldrb	w2, [x1, #1]
    29fc:	cmp	w2, #0x74
    2a00:	b.eq	2a40 <d_name+0x3e0>  // b.none
    2a04:	mov	w1, #0x0                   	// #0
    2a08:	bl	ad8 <d_substitution>
    2a0c:	mov	x20, x0
    2a10:	mov	w0, #0x1                   	// #1
    2a14:	ldr	x1, [x19, #24]
    2a18:	ldrb	w1, [x1]
    2a1c:	cmp	w1, #0x49
    2a20:	b.ne	2940 <d_name+0x2e0>  // b.any
    2a24:	cbz	w0, 26bc <d_name+0x5c>
    2a28:	mov	x0, x19
    2a2c:	bl	1d04 <d_template_args>
    2a30:	mov	x2, x20
    2a34:	mov	x3, x0
    2a38:	mov	w1, #0x4                   	// #4
    2a3c:	b	2768 <d_name+0x108>
    2a40:	add	x1, x1, #0x2
    2a44:	str	x1, [x0, #24]
    2a48:	adrp	x1, 0 <is_fnqual_component_type>
    2a4c:	add	x1, x1, #0x0
    2a50:	mov	w2, #0x3                   	// #3
    2a54:	bl	d4 <d_make_name>
    2a58:	mov	x20, x0
    2a5c:	mov	x0, x19
    2a60:	bl	22f0 <d_unqualified_name>
    2a64:	mov	x3, x0
    2a68:	mov	x2, x20
    2a6c:	mov	x0, x19
    2a70:	mov	w1, #0x1                   	// #1
    2a74:	bl	64 <d_make_comp>
    2a78:	mov	x20, x0
    2a7c:	ldr	w0, [x19, #72]
    2a80:	add	w0, w0, #0x3
    2a84:	str	w0, [x19, #72]
    2a88:	mov	w0, #0x0                   	// #0
    2a8c:	b	2a14 <d_name+0x3b4>

0000000000002a90 <d_encoding>:
    2a90:	stp	x29, x30, [sp, #-48]!
    2a94:	mov	w3, #0x54                  	// #84
    2a98:	mov	x29, sp
    2a9c:	ldr	x2, [x0, #24]
    2aa0:	stp	x19, x20, [sp, #16]
    2aa4:	mov	x19, x0
    2aa8:	str	x21, [sp, #32]
    2aac:	mov	w21, w1
    2ab0:	ldrb	w1, [x2]
    2ab4:	cmp	w1, #0x47
    2ab8:	ccmp	w1, w3, #0x4, ne  // ne = any
    2abc:	b.ne	2f38 <d_encoding+0x4a8>  // b.any
    2ac0:	ldr	w3, [x0, #72]
    2ac4:	add	w1, w3, #0x14
    2ac8:	str	w1, [x0, #72]
    2acc:	ldrb	w1, [x2]
    2ad0:	cmp	w1, #0x54
    2ad4:	b.ne	2b00 <d_encoding+0x70>  // b.any
    2ad8:	add	x1, x2, #0x1
    2adc:	str	x1, [x0, #24]
    2ae0:	ldrb	w1, [x2, #1]
    2ae4:	cbnz	w1, 2b60 <d_encoding+0xd0>
    2ae8:	mov	x20, #0x0                   	// #0
    2aec:	mov	x0, x20
    2af0:	ldp	x19, x20, [sp, #16]
    2af4:	ldr	x21, [sp, #32]
    2af8:	ldp	x29, x30, [sp], #48
    2afc:	ret
    2b00:	cmp	w1, #0x47
    2b04:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2b08:	add	x1, x2, #0x1
    2b0c:	str	x1, [x0, #24]
    2b10:	ldrb	w1, [x2, #1]
    2b14:	cbz	w1, 2ae8 <d_encoding+0x58>
    2b18:	add	x1, x2, #0x2
    2b1c:	str	x1, [x0, #24]
    2b20:	ldrb	w1, [x2, #1]
    2b24:	cmp	w1, #0x54
    2b28:	b.eq	2e84 <d_encoding+0x3f4>  // b.none
    2b2c:	b.hi	2d84 <d_encoding+0x2f4>  // b.pmore
    2b30:	cmp	w1, #0x41
    2b34:	b.eq	2e6c <d_encoding+0x3dc>  // b.none
    2b38:	cmp	w1, #0x52
    2b3c:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2b40:	bl	2660 <d_name>
    2b44:	mov	x9, x0
    2b48:	mov	x0, x19
    2b4c:	bl	474 <d_number_component>
    2b50:	mov	x3, x0
    2b54:	mov	x2, x9
    2b58:	mov	w1, #0x16                  	// #22
    2b5c:	b	2c0c <d_encoding+0x17c>
    2b60:	add	x1, x2, #0x2
    2b64:	str	x1, [x0, #24]
    2b68:	ldrb	w1, [x2, #1]
    2b6c:	cmp	w1, #0x57
    2b70:	b.hi	2ba0 <d_encoding+0x110>  // b.pmore
    2b74:	cmp	w1, #0x40
    2b78:	b.ls	2ae8 <d_encoding+0x58>  // b.plast
    2b7c:	sub	w1, w1, #0x41
    2b80:	cmp	w1, #0x16
    2b84:	b.hi	2ae8 <d_encoding+0x58>  // b.pmore
    2b88:	adrp	x0, 0 <is_fnqual_component_type>
    2b8c:	add	x0, x0, #0x0
    2b90:	ldrb	w0, [x0, w1, uxtw]
    2b94:	adr	x1, 2ba0 <d_encoding+0x110>
    2b98:	add	x0, x1, w0, sxtb #2
    2b9c:	br	x0
    2ba0:	cmp	w1, #0x68
    2ba4:	b.eq	2c70 <d_encoding+0x1e0>  // b.none
    2ba8:	cmp	w1, #0x76
    2bac:	b.eq	2c94 <d_encoding+0x204>  // b.none
    2bb0:	cmp	w1, #0x63
    2bb4:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2bb8:	mov	w1, #0x0                   	// #0
    2bbc:	bl	70c <d_call_offset>
    2bc0:	cbz	w0, 2ae8 <d_encoding+0x58>
    2bc4:	mov	x0, x19
    2bc8:	mov	w1, #0x0                   	// #0
    2bcc:	bl	70c <d_call_offset>
    2bd0:	cbz	w0, 2ae8 <d_encoding+0x58>
    2bd4:	mov	w1, #0x0                   	// #0
    2bd8:	mov	x0, x19
    2bdc:	bl	2a90 <d_encoding>
    2be0:	mov	x2, x0
    2be4:	mov	x3, #0x0                   	// #0
    2be8:	mov	w1, #0x11                  	// #17
    2bec:	b	2c0c <d_encoding+0x17c>
    2bf0:	add	w3, w3, #0xf
    2bf4:	str	w3, [x19, #72]
    2bf8:	mov	x0, x19
    2bfc:	bl	14cc <d_type>
    2c00:	mov	x2, x0
    2c04:	mov	x3, #0x0                   	// #0
    2c08:	mov	w1, #0x9                   	// #9
    2c0c:	mov	x0, x19
    2c10:	ldp	x19, x20, [sp, #16]
    2c14:	ldr	x21, [sp, #32]
    2c18:	ldp	x29, x30, [sp], #48
    2c1c:	b	64 <d_make_comp>
    2c20:	add	w3, w3, #0xa
    2c24:	str	w3, [x19, #72]
    2c28:	mov	x0, x19
    2c2c:	bl	14cc <d_type>
    2c30:	mov	x2, x0
    2c34:	mov	x3, #0x0                   	// #0
    2c38:	mov	w1, #0xa                   	// #10
    2c3c:	b	2c0c <d_encoding+0x17c>
    2c40:	mov	x0, x19
    2c44:	bl	14cc <d_type>
    2c48:	mov	x3, #0x0                   	// #0
    2c4c:	mov	x2, x0
    2c50:	mov	w1, #0xc                   	// #12
    2c54:	b	2c0c <d_encoding+0x17c>
    2c58:	mov	x0, x19
    2c5c:	bl	14cc <d_type>
    2c60:	mov	x3, #0x0                   	// #0
    2c64:	mov	x2, x0
    2c68:	mov	w1, #0xd                   	// #13
    2c6c:	b	2c0c <d_encoding+0x17c>
    2c70:	bl	70c <d_call_offset>
    2c74:	cbz	w0, 2ae8 <d_encoding+0x58>
    2c78:	mov	w1, #0x0                   	// #0
    2c7c:	mov	x0, x19
    2c80:	bl	2a90 <d_encoding>
    2c84:	mov	x2, x0
    2c88:	mov	x3, #0x0                   	// #0
    2c8c:	mov	w1, #0xf                   	// #15
    2c90:	b	2c0c <d_encoding+0x17c>
    2c94:	bl	70c <d_call_offset>
    2c98:	cbz	w0, 2ae8 <d_encoding+0x58>
    2c9c:	mov	w1, #0x0                   	// #0
    2ca0:	mov	x0, x19
    2ca4:	bl	2a90 <d_encoding>
    2ca8:	mov	x2, x0
    2cac:	mov	x3, #0x0                   	// #0
    2cb0:	mov	w1, #0x10                  	// #16
    2cb4:	b	2c0c <d_encoding+0x17c>
    2cb8:	mov	x0, x19
    2cbc:	bl	14cc <d_type>
    2cc0:	mov	x20, x0
    2cc4:	add	x0, x19, #0x18
    2cc8:	bl	3ec <d_number.isra.0>
    2ccc:	tbnz	w0, #31, 2ae8 <d_encoding+0x58>
    2cd0:	ldr	x1, [x19, #24]
    2cd4:	ldrb	w0, [x1]
    2cd8:	cmp	w0, #0x5f
    2cdc:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2ce0:	add	x1, x1, #0x1
    2ce4:	str	x1, [x19, #24]
    2ce8:	mov	x0, x19
    2cec:	bl	14cc <d_type>
    2cf0:	mov	x2, x0
    2cf4:	ldr	w1, [x19, #72]
    2cf8:	mov	x3, x20
    2cfc:	add	w1, w1, #0x5
    2d00:	str	w1, [x19, #72]
    2d04:	mov	w1, #0xb                   	// #11
    2d08:	b	2c0c <d_encoding+0x17c>
    2d0c:	mov	x0, x19
    2d10:	bl	14cc <d_type>
    2d14:	mov	x3, #0x0                   	// #0
    2d18:	mov	x2, x0
    2d1c:	mov	w1, #0xe                   	// #14
    2d20:	b	2c0c <d_encoding+0x17c>
    2d24:	mov	x0, x19
    2d28:	bl	14cc <d_type>
    2d2c:	mov	x3, #0x0                   	// #0
    2d30:	mov	x2, x0
    2d34:	mov	w1, #0x12                  	// #18
    2d38:	b	2c0c <d_encoding+0x17c>
    2d3c:	mov	x0, x19
    2d40:	bl	2660 <d_name>
    2d44:	mov	x3, #0x0                   	// #0
    2d48:	mov	x2, x0
    2d4c:	mov	w1, #0x14                  	// #20
    2d50:	b	2c0c <d_encoding+0x17c>
    2d54:	mov	x0, x19
    2d58:	bl	2660 <d_name>
    2d5c:	mov	x3, #0x0                   	// #0
    2d60:	mov	x2, x0
    2d64:	mov	w1, #0x15                  	// #21
    2d68:	b	2c0c <d_encoding+0x17c>
    2d6c:	mov	x0, x19
    2d70:	bl	1bb8 <d_template_arg>
    2d74:	mov	x3, #0x0                   	// #0
    2d78:	mov	x2, x0
    2d7c:	mov	w1, #0x30                  	// #48
    2d80:	b	2c0c <d_encoding+0x17c>
    2d84:	cmp	w1, #0x56
    2d88:	b.eq	2e58 <d_encoding+0x3c8>  // b.none
    2d8c:	cmp	w1, #0x72
    2d90:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2d94:	add	x0, x0, #0x18
    2d98:	bl	3ec <d_number.isra.0>
    2d9c:	cmp	w0, #0x1
    2da0:	b.le	2ae8 <d_encoding+0x58>
    2da4:	ldr	x1, [x19, #24]
    2da8:	ldrb	w2, [x1]
    2dac:	cbz	w2, 2ae8 <d_encoding+0x58>
    2db0:	add	x7, x1, #0x1
    2db4:	str	x7, [x19, #24]
    2db8:	ldrb	w1, [x1]
    2dbc:	cmp	w1, #0x5f
    2dc0:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2dc4:	sub	w8, w0, #0x1
    2dc8:	mov	x9, #0x0                   	// #0
    2dcc:	mov	w10, #0x41                  	// #65
    2dd0:	ldrb	w0, [x7]
    2dd4:	cbz	w0, 2ae8 <d_encoding+0x58>
    2dd8:	cmp	w0, #0x24
    2ddc:	b.ne	2eec <d_encoding+0x45c>  // b.any
    2de0:	ldrb	w4, [x7, #1]
    2de4:	cmp	w4, #0x53
    2de8:	b.eq	2edc <d_encoding+0x44c>  // b.none
    2dec:	cmp	w4, #0x5f
    2df0:	b.eq	2ee4 <d_encoding+0x454>  // b.none
    2df4:	cmp	w4, #0x24
    2df8:	b.ne	2ae8 <d_encoding+0x58>  // b.any
    2dfc:	mov	x0, x19
    2e00:	bl	30 <d_make_empty>
    2e04:	cbz	x0, 2e10 <d_encoding+0x380>
    2e08:	str	w10, [x0]
    2e0c:	str	w4, [x0, #8]
    2e10:	ldr	x7, [x19, #24]
    2e14:	sub	w8, w8, #0x2
    2e18:	add	x7, x7, #0x2
    2e1c:	str	x7, [x19, #24]
    2e20:	cbz	x0, 2ae8 <d_encoding+0x58>
    2e24:	cbz	x9, 2e40 <d_encoding+0x3b0>
    2e28:	mov	x3, x0
    2e2c:	mov	x2, x9
    2e30:	mov	x0, x19
    2e34:	mov	w1, #0x40                  	// #64
    2e38:	bl	64 <d_make_comp>
    2e3c:	cbz	x0, 2ae8 <d_encoding+0x58>
    2e40:	cmp	w8, #0x0
    2e44:	b.gt	2ed4 <d_encoding+0x444>
    2e48:	mov	x2, x0
    2e4c:	mov	x3, #0x0                   	// #0
    2e50:	mov	w1, #0x3f                  	// #63
    2e54:	b	2c0c <d_encoding+0x17c>
    2e58:	bl	2660 <d_name>
    2e5c:	mov	x2, x0
    2e60:	mov	x3, #0x0                   	// #0
    2e64:	mov	w1, #0x13                  	// #19
    2e68:	b	2c0c <d_encoding+0x17c>
    2e6c:	mov	w1, #0x0                   	// #0
    2e70:	bl	2a90 <d_encoding>
    2e74:	mov	x3, #0x0                   	// #0
    2e78:	mov	x2, x0
    2e7c:	mov	w1, #0x17                  	// #23
    2e80:	b	2c0c <d_encoding+0x17c>
    2e84:	ldrb	w1, [x2, #2]
    2e88:	cbz	w1, 2eb8 <d_encoding+0x428>
    2e8c:	add	x1, x2, #0x3
    2e90:	str	x1, [x0, #24]
    2e94:	ldrb	w1, [x2, #2]
    2e98:	cmp	w1, #0x6e
    2e9c:	b.ne	2eb8 <d_encoding+0x428>  // b.any
    2ea0:	mov	w1, #0x0                   	// #0
    2ea4:	bl	2a90 <d_encoding>
    2ea8:	mov	x3, #0x0                   	// #0
    2eac:	mov	x2, x0
    2eb0:	mov	w1, #0x4a                  	// #74
    2eb4:	b	2c0c <d_encoding+0x17c>
    2eb8:	mov	w1, #0x0                   	// #0
    2ebc:	mov	x0, x19
    2ec0:	bl	2a90 <d_encoding>
    2ec4:	mov	x2, x0
    2ec8:	mov	x3, #0x0                   	// #0
    2ecc:	mov	w1, #0x49                  	// #73
    2ed0:	b	2c0c <d_encoding+0x17c>
    2ed4:	mov	x9, x0
    2ed8:	b	2dd0 <d_encoding+0x340>
    2edc:	mov	w4, #0x2f                  	// #47
    2ee0:	b	2dfc <d_encoding+0x36c>
    2ee4:	mov	w4, #0x2e                  	// #46
    2ee8:	b	2dfc <d_encoding+0x36c>
    2eec:	mov	x0, #0x0                   	// #0
    2ef0:	ldrb	w1, [x7, x0]
    2ef4:	mov	w6, w0
    2ef8:	cbz	w1, 2f14 <d_encoding+0x484>
    2efc:	cmp	w1, #0x24
    2f00:	b.eq	2f14 <d_encoding+0x484>  // b.none
    2f04:	add	x0, x0, #0x1
    2f08:	add	w6, w6, #0x1
    2f0c:	cmp	w8, w0
    2f10:	b.gt	2ef0 <d_encoding+0x460>
    2f14:	mov	x1, x7
    2f18:	mov	w2, w6
    2f1c:	mov	x0, x19
    2f20:	bl	d4 <d_make_name>
    2f24:	ldr	x7, [x19, #24]
    2f28:	sub	w8, w8, w6
    2f2c:	add	x7, x7, w6, sxtw
    2f30:	str	x7, [x19, #24]
    2f34:	b	2e20 <d_encoding+0x390>
    2f38:	bl	2660 <d_name>
    2f3c:	mov	x20, x0
    2f40:	cbz	x0, 2ae8 <d_encoding+0x58>
    2f44:	cbz	w21, 2f50 <d_encoding+0x4c0>
    2f48:	ldr	w0, [x19, #16]
    2f4c:	tbz	w0, #0, 2fa0 <d_encoding+0x510>
    2f50:	ldr	x0, [x19, #24]
    2f54:	ldrb	w0, [x0]
    2f58:	cmp	w0, #0x45
    2f5c:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    2f60:	b.eq	2aec <d_encoding+0x5c>  // b.none
    2f64:	mov	x3, #0x1f                  	// #31
    2f68:	mov	x2, x20
    2f6c:	mov	x1, #0x1                   	// #1
    2f70:	movk	x3, #0x1a, lsl #48
    2f74:	ldr	w0, [x2]
    2f78:	cmp	w0, #0x4
    2f7c:	b.eq	2ff4 <d_encoding+0x564>  // b.none
    2f80:	b.hi	2fd4 <d_encoding+0x544>  // b.pmore
    2f84:	cmp	w0, #0x2
    2f88:	b.ne	2f94 <d_encoding+0x504>  // b.any
    2f8c:	ldr	x2, [x2, #16]
    2f90:	cbnz	x2, 2f74 <d_encoding+0x4e4>
    2f94:	mov	w1, #0x0                   	// #0
    2f98:	b	3030 <d_encoding+0x5a0>
    2f9c:	ldr	x20, [x20, #8]
    2fa0:	ldr	w2, [x20]
    2fa4:	mov	w0, w2
    2fa8:	bl	0 <is_fnqual_component_type>
    2fac:	cbnz	w0, 2f9c <d_encoding+0x50c>
    2fb0:	cmp	w2, #0x2
    2fb4:	b.ne	2aec <d_encoding+0x5c>  // b.any
    2fb8:	ldr	x2, [x20, #16]
    2fbc:	ldr	w0, [x2]
    2fc0:	bl	0 <is_fnqual_component_type>
    2fc4:	cbz	w0, 2aec <d_encoding+0x5c>
    2fc8:	ldr	x0, [x2, #8]
    2fcc:	str	x0, [x20, #16]
    2fd0:	b	2fb8 <d_encoding+0x528>
    2fd4:	sub	w0, w0, #0x1c
    2fd8:	cmp	w0, #0x34
    2fdc:	b.hi	2f94 <d_encoding+0x504>  // b.pmore
    2fe0:	lsl	x0, x1, x0
    2fe4:	tst	x0, x3
    2fe8:	b.eq	2f94 <d_encoding+0x504>  // b.none
    2fec:	ldr	x2, [x2, #8]
    2ff0:	b	2f90 <d_encoding+0x500>
    2ff4:	ldr	x1, [x2, #8]
    2ff8:	cbz	x1, 301c <d_encoding+0x58c>
    2ffc:	ldr	w0, [x1]
    3000:	cmp	w0, #0x8
    3004:	b.hi	3024 <d_encoding+0x594>  // b.pmore
    3008:	cmp	w0, #0x6
    300c:	b.hi	3074 <d_encoding+0x5e4>  // b.pmore
    3010:	sub	w0, w0, #0x1
    3014:	cmp	w0, #0x1
    3018:	b.ls	306c <d_encoding+0x5dc>  // b.plast
    301c:	mov	w0, #0x0                   	// #0
    3020:	b	302c <d_encoding+0x59c>
    3024:	cmp	w0, #0x35
    3028:	cset	w0, eq  // eq = none
    302c:	eor	w1, w0, #0x1
    3030:	mov	x0, x19
    3034:	bl	21c0 <d_bare_function_type>
    3038:	mov	x3, x0
    303c:	cbz	x0, 2ae8 <d_encoding+0x58>
    3040:	cbnz	w21, 3060 <d_encoding+0x5d0>
    3044:	ldr	w0, [x20]
    3048:	cmp	w0, #0x2
    304c:	b.ne	3060 <d_encoding+0x5d0>  // b.any
    3050:	ldr	w0, [x3]
    3054:	cmp	w0, #0x29
    3058:	b.ne	3060 <d_encoding+0x5d0>  // b.any
    305c:	str	xzr, [x3, #8]
    3060:	mov	x2, x20
    3064:	mov	w1, #0x3                   	// #3
    3068:	b	2c0c <d_encoding+0x17c>
    306c:	ldr	x1, [x1, #16]
    3070:	b	2ff8 <d_encoding+0x568>
    3074:	mov	w0, #0x1                   	// #1
    3078:	b	302c <d_encoding+0x59c>

000000000000307c <d_print_comp_inner>:
    307c:	stp	x29, x30, [sp, #-224]!
    3080:	mov	x29, sp
    3084:	stp	x19, x20, [sp, #16]
    3088:	mov	x19, x0
    308c:	stp	x21, x22, [sp, #32]
    3090:	stp	x23, x24, [sp, #48]
    3094:	str	x25, [sp, #64]
    3098:	cbnz	x2, 30bc <d_print_comp_inner+0x40>
    309c:	mov	w0, #0x1                   	// #1
    30a0:	str	w0, [x19, #304]
    30a4:	ldp	x19, x20, [sp, #16]
    30a8:	ldp	x21, x22, [sp, #32]
    30ac:	ldp	x23, x24, [sp, #48]
    30b0:	ldr	x25, [sp, #64]
    30b4:	ldp	x29, x30, [sp], #224
    30b8:	ret
    30bc:	ldr	w22, [x0, #304]
    30c0:	cbnz	w22, 30a4 <d_print_comp_inner+0x28>
    30c4:	ldr	w0, [x2]
    30c8:	mov	x20, x2
    30cc:	cmp	w0, #0x50
    30d0:	b.hi	4280 <d_print_comp_inner+0x1204>  // b.pmore
    30d4:	mov	w21, w1
    30d8:	adrp	x1, 0 <is_fnqual_component_type>
    30dc:	add	x1, x1, #0x0
    30e0:	ldrh	w1, [x1, w0, uxtw #1]
    30e4:	adr	x2, 30f0 <d_print_comp_inner+0x74>
    30e8:	add	x1, x2, w1, sxth #2
    30ec:	br	x1
    30f0:	ldrsw	x2, [x20, #16]
    30f4:	ldr	x20, [x20, #8]
    30f8:	tbnz	w21, #2, 310c <d_print_comp_inner+0x90>
    30fc:	mov	x1, x20
    3100:	mov	x0, x19
    3104:	bl	304 <d_append_buffer>
    3108:	b	30a4 <d_print_comp_inner+0x28>
    310c:	add	x21, x20, x2
    3110:	cmp	x21, x20
    3114:	b.ls	30a4 <d_print_comp_inner+0x28>  // b.plast
    3118:	sub	x0, x21, x20
    311c:	ldrb	w3, [x20]
    3120:	cmp	x0, #0x3
    3124:	b.le	3158 <d_print_comp_inner+0xdc>
    3128:	cmp	w3, #0x5f
    312c:	b.ne	3158 <d_print_comp_inner+0xdc>  // b.any
    3130:	ldrb	w0, [x20, #1]
    3134:	cmp	w0, #0x5f
    3138:	b.ne	3158 <d_print_comp_inner+0xdc>  // b.any
    313c:	ldrb	w0, [x20, #2]
    3140:	cmp	w0, #0x55
    3144:	b.ne	3158 <d_print_comp_inner+0xdc>  // b.any
    3148:	add	x22, x20, #0x3
    314c:	mov	x1, #0x0                   	// #0
    3150:	cmp	x21, x22
    3154:	b.hi	316c <d_print_comp_inner+0xf0>  // b.pmore
    3158:	mov	w1, w3
    315c:	mov	x0, x19
    3160:	mov	x22, x20
    3164:	bl	2c0 <d_append_char>
    3168:	b	31d4 <d_print_comp_inner+0x158>
    316c:	ldrb	w2, [x22]
    3170:	sub	w0, w2, #0x30
    3174:	and	w4, w0, #0xff
    3178:	cmp	w4, #0x9
    317c:	b.ls	3194 <d_print_comp_inner+0x118>  // b.plast
    3180:	sub	w0, w2, #0x41
    3184:	and	w0, w0, #0xff
    3188:	cmp	w0, #0x5
    318c:	b.hi	31a4 <d_print_comp_inner+0x128>  // b.pmore
    3190:	sub	w0, w2, #0x37
    3194:	sxtw	x0, w0
    3198:	add	x22, x22, #0x1
    319c:	add	x1, x0, x1, lsl #4
    31a0:	b	3150 <d_print_comp_inner+0xd4>
    31a4:	sub	w0, w2, #0x61
    31a8:	and	w0, w0, #0xff
    31ac:	cmp	w0, #0x5
    31b0:	b.hi	31bc <d_print_comp_inner+0x140>  // b.pmore
    31b4:	sub	w0, w2, #0x57
    31b8:	b	3194 <d_print_comp_inner+0x118>
    31bc:	cmp	w2, #0x5f
    31c0:	b.ne	3158 <d_print_comp_inner+0xdc>  // b.any
    31c4:	cmp	x1, #0xff
    31c8:	b.hi	3158 <d_print_comp_inner+0xdc>  // b.pmore
    31cc:	mov	x0, x19
    31d0:	bl	2c0 <d_append_char>
    31d4:	add	x20, x22, #0x1
    31d8:	b	3110 <d_print_comp_inner+0x94>
    31dc:	ldr	x2, [x20, #8]
    31e0:	mov	w1, w21
    31e4:	mov	x0, x19
    31e8:	bl	4888 <d_print_comp>
    31ec:	mov	x0, x19
    31f0:	adrp	x1, 0 <is_fnqual_component_type>
    31f4:	add	x1, x1, #0x0
    31f8:	bl	378 <d_append_string>
    31fc:	ldr	x2, [x20, #16]
    3200:	mov	w1, w21
    3204:	mov	x0, x19
    3208:	bl	4888 <d_print_comp>
    320c:	mov	x0, x19
    3210:	mov	w1, #0x5d                  	// #93
    3214:	bl	2c0 <d_append_char>
    3218:	b	30a4 <d_print_comp_inner+0x28>
    321c:	ldr	x2, [x20, #8]
    3220:	mov	w1, w21
    3224:	mov	x0, x19
    3228:	bl	4888 <d_print_comp>
    322c:	tbnz	w21, #2, 3298 <d_print_comp_inner+0x21c>
    3230:	adrp	x1, 0 <is_fnqual_component_type>
    3234:	mov	x0, x19
    3238:	add	x1, x1, #0x0
    323c:	bl	378 <d_append_string>
    3240:	ldr	x20, [x20, #16]
    3244:	ldr	w0, [x20]
    3248:	cmp	w0, #0x47
    324c:	b.ne	3284 <d_print_comp_inner+0x208>  // b.any
    3250:	mov	x0, x19
    3254:	adrp	x1, 0 <is_fnqual_component_type>
    3258:	add	x1, x1, #0x0
    325c:	bl	378 <d_append_string>
    3260:	ldr	w1, [x20, #16]
    3264:	mov	x0, x19
    3268:	add	w1, w1, #0x1
    326c:	bl	3ac <d_append_num>
    3270:	mov	x0, x19
    3274:	adrp	x1, 0 <is_fnqual_component_type>
    3278:	add	x1, x1, #0x0
    327c:	bl	378 <d_append_string>
    3280:	ldr	x20, [x20, #8]
    3284:	mov	x2, x20
    3288:	mov	w1, w21
    328c:	mov	x0, x19
    3290:	bl	4888 <d_print_comp>
    3294:	b	30a4 <d_print_comp_inner+0x28>
    3298:	mov	x0, x19
    329c:	mov	w1, #0x2e                  	// #46
    32a0:	bl	2c0 <d_append_char>
    32a4:	b	3240 <d_print_comp_inner+0x1c4>
    32a8:	add	x3, sp, #0x60
    32ac:	mov	w23, #0x0                   	// #0
    32b0:	mov	x2, x3
    32b4:	ldr	x22, [x20, #8]
    32b8:	ldr	x24, [x19, #296]
    32bc:	str	xzr, [x19, #296]
    32c0:	cbz	x22, 32cc <d_print_comp_inner+0x250>
    32c4:	cmp	w23, #0x4
    32c8:	b.ne	32d8 <d_print_comp_inner+0x25c>  // b.any
    32cc:	mov	w0, #0x1                   	// #1
    32d0:	str	w0, [x19, #304]
    32d4:	b	30a4 <d_print_comp_inner+0x28>
    32d8:	str	wzr, [x3, #16]
    32dc:	add	w23, w23, #0x1
    32e0:	ldp	x4, x0, [x19, #288]
    32e4:	stp	x0, x22, [x3]
    32e8:	ldr	w5, [x22]
    32ec:	str	x4, [x3, #24]
    32f0:	str	x3, [x19, #296]
    32f4:	mov	w0, w5
    32f8:	bl	0 <is_fnqual_component_type>
    32fc:	add	x3, x3, #0x20
    3300:	cbz	w0, 47d8 <d_print_comp_inner+0x175c>
    3304:	ldr	x22, [x22, #8]
    3308:	b	32c0 <d_print_comp_inner+0x244>
    330c:	cmp	w23, #0x4
    3310:	b.eq	32cc <d_print_comp_inner+0x250>  // b.none
    3314:	ldp	x0, x1, [x2, #-32]
    3318:	stur	x22, [x2, #-24]
    331c:	stp	x0, x1, [x2]
    3320:	sub	x3, x2, #0x20
    3324:	add	w23, w23, #0x1
    3328:	ldp	x0, x1, [x2, #-16]
    332c:	stur	wzr, [x2, #-16]
    3330:	stp	x4, x3, [x2, #-8]
    3334:	stp	x0, x1, [x2, #16]
    3338:	ldr	x22, [x22, #8]
    333c:	str	x2, [x19, #296]
    3340:	add	x2, x2, #0x20
    3344:	b	4800 <d_print_comp_inner+0x1784>
    3348:	ldr	x22, [x20, #8]
    334c:	ldr	x24, [x19, #296]
    3350:	str	xzr, [x19, #296]
    3354:	ldr	x23, [x19, #368]
    3358:	str	x20, [x19, #368]
    335c:	tbz	w21, #2, 33b8 <d_print_comp_inner+0x33c>
    3360:	ldr	w0, [x22]
    3364:	cbnz	w0, 33b8 <d_print_comp_inner+0x33c>
    3368:	ldr	w0, [x22, #16]
    336c:	cmp	w0, #0x6
    3370:	b.ne	33b8 <d_print_comp_inner+0x33c>  // b.any
    3374:	ldr	x0, [x22, #8]
    3378:	adrp	x1, 0 <is_fnqual_component_type>
    337c:	mov	x2, #0x6                   	// #6
    3380:	add	x1, x1, #0x0
    3384:	bl	0 <strncmp>
    3388:	cbnz	w0, 33b8 <d_print_comp_inner+0x33c>
    338c:	ldr	x2, [x20, #16]
    3390:	mov	w1, w21
    3394:	mov	x0, x19
    3398:	bl	4888 <d_print_comp>
    339c:	adrp	x1, 0 <is_fnqual_component_type>
    33a0:	mov	x0, x19
    33a4:	add	x1, x1, #0x0
    33a8:	bl	378 <d_append_string>
    33ac:	str	x24, [x19, #296]
    33b0:	str	x23, [x19, #368]
    33b4:	b	30a4 <d_print_comp_inner+0x28>
    33b8:	mov	x0, x19
    33bc:	mov	x2, x22
    33c0:	mov	w1, w21
    33c4:	bl	4888 <d_print_comp>
    33c8:	ldrb	w0, [x19, #264]
    33cc:	cmp	w0, #0x3c
    33d0:	b.ne	33e0 <d_print_comp_inner+0x364>  // b.any
    33d4:	mov	x0, x19
    33d8:	mov	w1, #0x20                  	// #32
    33dc:	bl	2c0 <d_append_char>
    33e0:	mov	x0, x19
    33e4:	mov	w1, #0x3c                  	// #60
    33e8:	bl	2c0 <d_append_char>
    33ec:	ldr	x2, [x20, #16]
    33f0:	mov	x0, x19
    33f4:	mov	w1, w21
    33f8:	bl	4888 <d_print_comp>
    33fc:	ldrb	w0, [x19, #264]
    3400:	cmp	w0, #0x3e
    3404:	b.ne	3414 <d_print_comp_inner+0x398>  // b.any
    3408:	mov	x0, x19
    340c:	mov	w1, #0x20                  	// #32
    3410:	bl	2c0 <d_append_char>
    3414:	mov	x0, x19
    3418:	mov	w1, #0x3e                  	// #62
    341c:	bl	2c0 <d_append_char>
    3420:	b	33ac <d_print_comp_inner+0x330>
    3424:	ldr	w0, [x19, #312]
    3428:	cbz	w0, 3454 <d_print_comp_inner+0x3d8>
    342c:	mov	x0, x19
    3430:	mov	x2, #0x5                   	// #5
    3434:	adrp	x1, 0 <is_fnqual_component_type>
    3438:	add	x1, x1, #0x0
    343c:	bl	304 <d_append_buffer>
    3440:	ldr	x1, [x20, #8]
    3444:	mov	x0, x19
    3448:	add	w1, w1, #0x1
    344c:	bl	3ac <d_append_num>
    3450:	b	30a4 <d_print_comp_inner+0x28>
    3454:	add	x1, x20, #0x8
    3458:	mov	x0, x19
    345c:	bl	9e4 <d_lookup_template_argument.isra.0>
    3460:	mov	x2, x0
    3464:	cbz	x0, 309c <d_print_comp_inner+0x20>
    3468:	ldr	w1, [x0]
    346c:	cmp	w1, #0x2f
    3470:	b.ne	3488 <d_print_comp_inner+0x40c>  // b.any
    3474:	ldr	w1, [x19, #316]
    3478:	tbnz	w1, #31, 3488 <d_print_comp_inner+0x40c>
    347c:	bl	8dc <d_index_template_argument.part.0>
    3480:	mov	x2, x0
    3484:	cbz	x0, 309c <d_print_comp_inner+0x20>
    3488:	ldr	x20, [x19, #288]
    348c:	mov	w1, w21
    3490:	ldr	x0, [x20]
    3494:	str	x0, [x19, #288]
    3498:	mov	x0, x19
    349c:	bl	4888 <d_print_comp>
    34a0:	str	x20, [x19, #288]
    34a4:	b	30a4 <d_print_comp_inner+0x28>
    34a8:	mov	x0, x19
    34ac:	adrp	x1, 0 <is_fnqual_component_type>
    34b0:	add	x1, x1, #0x0
    34b4:	bl	378 <d_append_string>
    34b8:	ldr	x2, [x20, #8]
    34bc:	mov	w1, w21
    34c0:	mov	x0, x19
    34c4:	bl	4888 <d_print_comp>
    34c8:	b	30a4 <d_print_comp_inner+0x28>
    34cc:	ldr	x2, [x20, #16]
    34d0:	mov	w1, w21
    34d4:	mov	x0, x19
    34d8:	bl	4888 <d_print_comp>
    34dc:	b	30a4 <d_print_comp_inner+0x28>
    34e0:	mov	x0, x19
    34e4:	mov	w1, #0x7e                  	// #126
    34e8:	bl	2c0 <d_append_char>
    34ec:	ldr	x2, [x20, #16]
    34f0:	mov	w1, w21
    34f4:	mov	x0, x19
    34f8:	bl	4888 <d_print_comp>
    34fc:	b	30a4 <d_print_comp_inner+0x28>
    3500:	mov	x0, x19
    3504:	adrp	x1, 0 <is_fnqual_component_type>
    3508:	add	x1, x1, #0x0
    350c:	bl	378 <d_append_string>
    3510:	ldr	x2, [x20, #8]
    3514:	mov	w1, w21
    3518:	mov	x0, x19
    351c:	bl	4888 <d_print_comp>
    3520:	b	30a4 <d_print_comp_inner+0x28>
    3524:	mov	x0, x19
    3528:	adrp	x1, 0 <is_fnqual_component_type>
    352c:	add	x1, x1, #0x0
    3530:	bl	378 <d_append_string>
    3534:	ldr	x2, [x20, #8]
    3538:	mov	w1, w21
    353c:	mov	x0, x19
    3540:	bl	4888 <d_print_comp>
    3544:	b	30a4 <d_print_comp_inner+0x28>
    3548:	mov	x0, x19
    354c:	adrp	x1, 0 <is_fnqual_component_type>
    3550:	add	x1, x1, #0x0
    3554:	bl	378 <d_append_string>
    3558:	ldr	x2, [x20, #8]
    355c:	mov	w1, w21
    3560:	mov	x0, x19
    3564:	bl	4888 <d_print_comp>
    3568:	mov	x0, x19
    356c:	adrp	x1, 0 <is_fnqual_component_type>
    3570:	add	x1, x1, #0x0
    3574:	bl	378 <d_append_string>
    3578:	ldr	x2, [x20, #16]
    357c:	mov	w1, w21
    3580:	mov	x0, x19
    3584:	bl	4888 <d_print_comp>
    3588:	b	30a4 <d_print_comp_inner+0x28>
    358c:	mov	x0, x19
    3590:	adrp	x1, 0 <is_fnqual_component_type>
    3594:	add	x1, x1, #0x0
    3598:	bl	378 <d_append_string>
    359c:	ldr	x2, [x20, #8]
    35a0:	mov	w1, w21
    35a4:	mov	x0, x19
    35a8:	bl	4888 <d_print_comp>
    35ac:	b	30a4 <d_print_comp_inner+0x28>
    35b0:	mov	x0, x19
    35b4:	adrp	x1, 0 <is_fnqual_component_type>
    35b8:	add	x1, x1, #0x0
    35bc:	bl	378 <d_append_string>
    35c0:	ldr	x2, [x20, #8]
    35c4:	mov	w1, w21
    35c8:	mov	x0, x19
    35cc:	bl	4888 <d_print_comp>
    35d0:	b	30a4 <d_print_comp_inner+0x28>
    35d4:	mov	x0, x19
    35d8:	adrp	x1, 0 <is_fnqual_component_type>
    35dc:	add	x1, x1, #0x0
    35e0:	bl	378 <d_append_string>
    35e4:	ldr	x2, [x20, #8]
    35e8:	mov	w1, w21
    35ec:	mov	x0, x19
    35f0:	bl	4888 <d_print_comp>
    35f4:	b	30a4 <d_print_comp_inner+0x28>
    35f8:	mov	x0, x19
    35fc:	adrp	x1, 0 <is_fnqual_component_type>
    3600:	add	x1, x1, #0x0
    3604:	bl	378 <d_append_string>
    3608:	ldr	x2, [x20, #8]
    360c:	mov	w1, w21
    3610:	mov	x0, x19
    3614:	bl	4888 <d_print_comp>
    3618:	b	30a4 <d_print_comp_inner+0x28>
    361c:	mov	x0, x19
    3620:	adrp	x1, 0 <is_fnqual_component_type>
    3624:	add	x1, x1, #0x0
    3628:	bl	378 <d_append_string>
    362c:	ldr	x2, [x20, #8]
    3630:	mov	w1, w21
    3634:	mov	x0, x19
    3638:	bl	4888 <d_print_comp>
    363c:	b	30a4 <d_print_comp_inner+0x28>
    3640:	mov	x0, x19
    3644:	adrp	x1, 0 <is_fnqual_component_type>
    3648:	add	x1, x1, #0x0
    364c:	bl	378 <d_append_string>
    3650:	ldr	x2, [x20, #8]
    3654:	mov	w1, w21
    3658:	mov	x0, x19
    365c:	bl	4888 <d_print_comp>
    3660:	b	30a4 <d_print_comp_inner+0x28>
    3664:	mov	x0, x19
    3668:	adrp	x1, 0 <is_fnqual_component_type>
    366c:	add	x1, x1, #0x0
    3670:	bl	378 <d_append_string>
    3674:	ldr	x2, [x20, #8]
    3678:	mov	w1, w21
    367c:	mov	x0, x19
    3680:	bl	4888 <d_print_comp>
    3684:	b	30a4 <d_print_comp_inner+0x28>
    3688:	mov	x0, x19
    368c:	adrp	x1, 0 <is_fnqual_component_type>
    3690:	add	x1, x1, #0x0
    3694:	bl	378 <d_append_string>
    3698:	ldr	x2, [x20, #8]
    369c:	mov	w1, w21
    36a0:	mov	x0, x19
    36a4:	bl	4888 <d_print_comp>
    36a8:	b	30a4 <d_print_comp_inner+0x28>
    36ac:	mov	x0, x19
    36b0:	adrp	x1, 0 <is_fnqual_component_type>
    36b4:	add	x1, x1, #0x0
    36b8:	bl	378 <d_append_string>
    36bc:	ldr	x2, [x20, #8]
    36c0:	mov	w1, w21
    36c4:	mov	x0, x19
    36c8:	bl	4888 <d_print_comp>
    36cc:	b	30a4 <d_print_comp_inner+0x28>
    36d0:	mov	x0, x19
    36d4:	adrp	x1, 0 <is_fnqual_component_type>
    36d8:	add	x1, x1, #0x0
    36dc:	bl	378 <d_append_string>
    36e0:	ldr	x2, [x20, #8]
    36e4:	mov	w1, w21
    36e8:	mov	x0, x19
    36ec:	bl	4888 <d_print_comp>
    36f0:	b	30a4 <d_print_comp_inner+0x28>
    36f4:	mov	x0, x19
    36f8:	adrp	x1, 0 <is_fnqual_component_type>
    36fc:	add	x1, x1, #0x0
    3700:	bl	378 <d_append_string>
    3704:	ldr	x2, [x20, #16]
    3708:	mov	w1, w21
    370c:	mov	x0, x19
    3710:	bl	4888 <d_print_comp>
    3714:	mov	x0, x19
    3718:	adrp	x1, 0 <is_fnqual_component_type>
    371c:	add	x1, x1, #0x0
    3720:	bl	378 <d_append_string>
    3724:	ldr	x2, [x20, #8]
    3728:	mov	w1, w21
    372c:	mov	x0, x19
    3730:	bl	4888 <d_print_comp>
    3734:	b	30a4 <d_print_comp_inner+0x28>
    3738:	mov	x0, x19
    373c:	adrp	x1, 0 <is_fnqual_component_type>
    3740:	add	x1, x1, #0x0
    3744:	bl	378 <d_append_string>
    3748:	ldr	x2, [x20, #8]
    374c:	mov	w1, w21
    3750:	mov	x0, x19
    3754:	bl	4888 <d_print_comp>
    3758:	b	30a4 <d_print_comp_inner+0x28>
    375c:	mov	x0, x19
    3760:	adrp	x1, 0 <is_fnqual_component_type>
    3764:	add	x1, x1, #0x0
    3768:	bl	378 <d_append_string>
    376c:	ldr	x2, [x20, #8]
    3770:	mov	w1, w21
    3774:	mov	x0, x19
    3778:	bl	4888 <d_print_comp>
    377c:	b	30a4 <d_print_comp_inner+0x28>
    3780:	mov	x0, x19
    3784:	adrp	x1, 0 <is_fnqual_component_type>
    3788:	add	x1, x1, #0x0
    378c:	bl	378 <d_append_string>
    3790:	ldr	x2, [x20, #8]
    3794:	mov	w1, w21
    3798:	mov	x0, x19
    379c:	bl	4888 <d_print_comp>
    37a0:	b	30a4 <d_print_comp_inner+0x28>
    37a4:	ldrsw	x2, [x20, #16]
    37a8:	mov	x0, x19
    37ac:	ldr	x1, [x20, #8]
    37b0:	bl	304 <d_append_buffer>
    37b4:	b	30a4 <d_print_comp_inner+0x28>
    37b8:	ldr	x2, [x19, #296]
    37bc:	cbnz	x2, 3820 <d_print_comp_inner+0x7a4>
    37c0:	mov	w22, #0x0                   	// #0
    37c4:	ldr	x0, [x19, #296]
    37c8:	stp	x0, x20, [sp, #96]
    37cc:	add	x0, sp, #0x60
    37d0:	str	x0, [x19, #296]
    37d4:	ldr	x0, [x19, #288]
    37d8:	str	wzr, [sp, #112]
    37dc:	str	x0, [sp, #120]
    37e0:	cbnz	x2, 37e8 <d_print_comp_inner+0x76c>
    37e4:	ldr	x2, [x20, #8]
    37e8:	mov	x0, x19
    37ec:	mov	w1, w21
    37f0:	bl	4888 <d_print_comp>
    37f4:	ldr	w0, [sp, #112]
    37f8:	cbnz	w0, 380c <d_print_comp_inner+0x790>
    37fc:	mov	x2, x20
    3800:	mov	w1, w21
    3804:	mov	x0, x19
    3808:	bl	4914 <d_print_mod>
    380c:	ldr	x0, [sp, #96]
    3810:	str	x0, [x19, #296]
    3814:	cbz	w22, 30a4 <d_print_comp_inner+0x28>
    3818:	str	x23, [x19, #288]
    381c:	b	30a4 <d_print_comp_inner+0x28>
    3820:	ldr	w22, [x2, #16]
    3824:	cbnz	w22, 3858 <d_print_comp_inner+0x7dc>
    3828:	ldr	x1, [x2, #8]
    382c:	ldr	w1, [x1]
    3830:	sub	w3, w1, #0x19
    3834:	cmp	w3, #0x2
    3838:	b.hi	39d0 <d_print_comp_inner+0x954>  // b.pmore
    383c:	cmp	w0, w1
    3840:	b.ne	3858 <d_print_comp_inner+0x7dc>  // b.any
    3844:	ldr	x2, [x20, #8]
    3848:	mov	w1, w21
    384c:	mov	x0, x19
    3850:	bl	4888 <d_print_comp>
    3854:	b	30a4 <d_print_comp_inner+0x28>
    3858:	ldr	x2, [x2]
    385c:	b	37bc <d_print_comp_inner+0x740>
    3860:	ldr	w22, [x19, #312]
    3864:	ldr	x2, [x20, #8]
    3868:	cbnz	w22, 39a0 <d_print_comp_inner+0x924>
    386c:	ldr	w0, [x2]
    3870:	cmp	w0, #0x5
    3874:	b.ne	39a4 <d_print_comp_inner+0x928>  // b.any
    3878:	ldr	w0, [x19, #344]
    387c:	mov	x1, #0x0                   	// #0
    3880:	cmp	w0, w1
    3884:	b.gt	38a0 <d_print_comp_inner+0x824>
    3888:	ldr	w1, [x19, #348]
    388c:	cmp	w0, w1
    3890:	b.lt	38c8 <d_print_comp_inner+0x84c>  // b.tstop
    3894:	mov	w0, #0x1                   	// #1
    3898:	str	w0, [x19, #304]
    389c:	b	30a4 <d_print_comp_inner+0x28>
    38a0:	ldr	x4, [x19, #336]
    38a4:	lsl	x3, x1, #4
    38a8:	ldr	x3, [x4, x3]
    38ac:	add	x5, x4, x1, lsl #4
    38b0:	add	x1, x1, #0x1
    38b4:	cmp	x2, x3
    38b8:	b.ne	3880 <d_print_comp_inner+0x804>  // b.any
    38bc:	ldr	x1, [x19, #328]
    38c0:	mov	x0, x1
    38c4:	b	3988 <d_print_comp_inner+0x90c>
    38c8:	ldr	x3, [x19, #336]
    38cc:	sbfiz	x4, x0, #4, #32
    38d0:	add	x1, x3, w0, sxtw #4
    38d4:	add	w0, w0, #0x1
    38d8:	str	w0, [x19, #344]
    38dc:	add	x0, x1, #0x8
    38e0:	str	x2, [x3, x4]
    38e4:	ldr	x4, [x19, #288]
    38e8:	cbnz	x4, 3930 <d_print_comp_inner+0x8b4>
    38ec:	str	xzr, [x0]
    38f0:	add	x1, x2, #0x8
    38f4:	mov	x0, x19
    38f8:	bl	9e4 <d_lookup_template_argument.isra.0>
    38fc:	mov	x2, x0
    3900:	cbz	x0, 3924 <d_print_comp_inner+0x8a8>
    3904:	ldr	w1, [x0]
    3908:	cmp	w1, #0x2f
    390c:	b.ne	39a4 <d_print_comp_inner+0x928>  // b.any
    3910:	ldr	w1, [x19, #316]
    3914:	tbnz	w1, #31, 39a4 <d_print_comp_inner+0x928>
    3918:	bl	8dc <d_index_template_argument.part.0>
    391c:	mov	x2, x0
    3920:	cbnz	x0, 39a4 <d_print_comp_inner+0x928>
    3924:	cbz	w22, 309c <d_print_comp_inner+0x20>
    3928:	str	x23, [x19, #288]
    392c:	b	309c <d_print_comp_inner+0x20>
    3930:	ldr	w3, [x19, #360]
    3934:	ldr	w1, [x19, #364]
    3938:	cmp	w3, w1
    393c:	b.ge	3894 <d_print_comp_inner+0x818>  // b.tcont
    3940:	ldr	x1, [x19, #352]
    3944:	add	x1, x1, w3, sxtw #4
    3948:	add	w3, w3, #0x1
    394c:	str	w3, [x19, #360]
    3950:	ldr	x3, [x4, #8]
    3954:	str	x3, [x1, #8]
    3958:	str	x1, [x0]
    395c:	mov	x0, x1
    3960:	ldr	x4, [x4]
    3964:	b	38e8 <d_print_comp_inner+0x86c>
    3968:	ldr	x3, [x0]
    396c:	cmp	x3, x2
    3970:	b.eq	38f0 <d_print_comp_inner+0x874>  // b.none
    3974:	cmp	x3, x20
    3978:	b.ne	3984 <d_print_comp_inner+0x908>  // b.any
    397c:	cmp	x0, x1
    3980:	b.ne	38f0 <d_print_comp_inner+0x874>  // b.any
    3984:	ldr	x0, [x0, #8]
    3988:	cbnz	x0, 3968 <d_print_comp_inner+0x8ec>
    398c:	ldr	x0, [x5, #8]
    3990:	mov	w22, #0x1                   	// #1
    3994:	ldr	x23, [x19, #288]
    3998:	str	x0, [x19, #288]
    399c:	b	38f0 <d_print_comp_inner+0x874>
    39a0:	mov	w22, #0x0                   	// #0
    39a4:	ldr	w0, [x2]
    39a8:	cmp	w0, #0x23
    39ac:	b.eq	39d8 <d_print_comp_inner+0x95c>  // b.none
    39b0:	ldr	w1, [x20]
    39b4:	cmp	w0, w1
    39b8:	b.eq	39d8 <d_print_comp_inner+0x95c>  // b.none
    39bc:	cmp	w0, #0x24
    39c0:	b.ne	39d0 <d_print_comp_inner+0x954>  // b.any
    39c4:	ldr	x2, [x2, #8]
    39c8:	b	37c4 <d_print_comp_inner+0x748>
    39cc:	mov	w22, #0x0                   	// #0
    39d0:	mov	x2, #0x0                   	// #0
    39d4:	b	37c4 <d_print_comp_inner+0x748>
    39d8:	mov	x20, x2
    39dc:	b	39d0 <d_print_comp_inner+0x954>
    39e0:	ldr	x0, [x20, #8]
    39e4:	tbnz	w21, #2, 39fc <d_print_comp_inner+0x980>
    39e8:	ldrsw	x2, [x0, #8]
    39ec:	ldr	x1, [x0]
    39f0:	mov	x0, x19
    39f4:	bl	304 <d_append_buffer>
    39f8:	b	30a4 <d_print_comp_inner+0x28>
    39fc:	ldrsw	x2, [x0, #24]
    3a00:	ldr	x1, [x0, #16]
    3a04:	mov	x0, x19
    3a08:	bl	304 <d_append_buffer>
    3a0c:	b	30a4 <d_print_comp_inner+0x28>
    3a10:	ldr	x2, [x20, #8]
    3a14:	mov	w1, w21
    3a18:	mov	x0, x19
    3a1c:	bl	4888 <d_print_comp>
    3a20:	b	30a4 <d_print_comp_inner+0x28>
    3a24:	and	w22, w21, #0x20
    3a28:	tbz	w21, #5, 3a40 <d_print_comp_inner+0x9c4>
    3a2c:	ldr	x3, [x19, #296]
    3a30:	add	x2, x20, #0x10
    3a34:	and	w1, w21, #0xffffff9f
    3a38:	mov	x0, x19
    3a3c:	bl	4adc <d_print_function_type.isra.0>
    3a40:	ldr	x2, [x20, #8]
    3a44:	cbz	x2, 3ab8 <d_print_comp_inner+0xa3c>
    3a48:	and	w1, w21, #0xffffff9f
    3a4c:	cbz	w22, 3a5c <d_print_comp_inner+0x9e0>
    3a50:	mov	x0, x19
    3a54:	bl	4888 <d_print_comp>
    3a58:	b	30a4 <d_print_comp_inner+0x28>
    3a5c:	tbnz	w21, #6, 3aa0 <d_print_comp_inner+0xa24>
    3a60:	ldr	x0, [x19, #296]
    3a64:	stp	x0, x20, [sp, #96]
    3a68:	add	x0, sp, #0x60
    3a6c:	str	x0, [x19, #296]
    3a70:	ldr	x0, [x19, #288]
    3a74:	str	wzr, [sp, #112]
    3a78:	str	x0, [sp, #120]
    3a7c:	mov	x0, x19
    3a80:	bl	4888 <d_print_comp>
    3a84:	ldr	x0, [sp, #96]
    3a88:	str	x0, [x19, #296]
    3a8c:	ldr	w0, [sp, #112]
    3a90:	cbnz	w0, 30a4 <d_print_comp_inner+0x28>
    3a94:	mov	x0, x19
    3a98:	mov	w1, #0x20                  	// #32
    3a9c:	bl	2c0 <d_append_char>
    3aa0:	ldr	x3, [x19, #296]
    3aa4:	add	x2, x20, #0x10
    3aa8:	and	w1, w21, #0xffffff9f
    3aac:	mov	x0, x19
    3ab0:	bl	4adc <d_print_function_type.isra.0>
    3ab4:	b	30a4 <d_print_comp_inner+0x28>
    3ab8:	cbnz	w22, 30a4 <d_print_comp_inner+0x28>
    3abc:	b	3aa0 <d_print_comp_inner+0xa24>
    3ac0:	ldp	x0, x23, [x19, #288]
    3ac4:	mov	w22, #0x1                   	// #1
    3ac8:	mov	w6, w22
    3acc:	str	x0, [sp, #120]
    3ad0:	add	x4, sp, #0x60
    3ad4:	stp	x23, x20, [sp, #96]
    3ad8:	str	wzr, [sp, #112]
    3adc:	mov	x0, x23
    3ae0:	str	x4, [x19, #296]
    3ae4:	cbz	x0, 3afc <d_print_comp_inner+0xa80>
    3ae8:	ldr	x1, [x0, #8]
    3aec:	ldr	w1, [x1]
    3af0:	sub	w1, w1, #0x19
    3af4:	cmp	w1, #0x2
    3af8:	b.ls	3b3c <d_print_comp_inner+0xac0>  // b.plast
    3afc:	ldr	x2, [x20, #16]
    3b00:	mov	x0, x19
    3b04:	mov	w1, w21
    3b08:	bl	4888 <d_print_comp>
    3b0c:	str	x23, [x19, #296]
    3b10:	ldr	w0, [sp, #112]
    3b14:	cbnz	w0, 30a4 <d_print_comp_inner+0x28>
    3b18:	add	x23, sp, #0x68
    3b1c:	cmp	w22, #0x1
    3b20:	b.ne	3b8c <d_print_comp_inner+0xb10>  // b.any
    3b24:	ldr	x3, [x19, #296]
    3b28:	add	x2, x20, #0x8
    3b2c:	mov	w1, w21
    3b30:	mov	x0, x19
    3b34:	bl	4d90 <d_print_array_type.isra.0>
    3b38:	b	30a4 <d_print_comp_inner+0x28>
    3b3c:	ldr	w1, [x0, #16]
    3b40:	cbnz	w1, 3b84 <d_print_comp_inner+0xb08>
    3b44:	cmp	w22, #0x3
    3b48:	b.ls	3b58 <d_print_comp_inner+0xadc>  // b.plast
    3b4c:	mov	w0, #0x1                   	// #1
    3b50:	str	w0, [x19, #304]
    3b54:	b	30a4 <d_print_comp_inner+0x28>
    3b58:	ubfiz	x5, x22, #5, #32
    3b5c:	add	w22, w22, #0x1
    3b60:	add	x1, x4, x5
    3b64:	ldp	x2, x3, [x0]
    3b68:	stp	x2, x3, [x1]
    3b6c:	ldp	x2, x3, [x0, #16]
    3b70:	stp	x2, x3, [x1, #16]
    3b74:	ldr	x2, [x19, #296]
    3b78:	str	x2, [x4, x5]
    3b7c:	str	x1, [x19, #296]
    3b80:	str	w6, [x0, #16]
    3b84:	ldr	x0, [x0]
    3b88:	b	3ae4 <d_print_comp_inner+0xa68>
    3b8c:	sub	w22, w22, #0x1
    3b90:	mov	w1, w21
    3b94:	ubfiz	x0, x22, #5, #32
    3b98:	ldr	x2, [x23, x0]
    3b9c:	mov	x0, x19
    3ba0:	bl	4914 <d_print_mod>
    3ba4:	b	3b1c <d_print_comp_inner+0xaa0>
    3ba8:	ldr	x2, [x20, #16]
    3bac:	mov	w1, w21
    3bb0:	ldr	x0, [x19, #296]
    3bb4:	stp	x0, x20, [sp, #96]
    3bb8:	add	x0, sp, #0x60
    3bbc:	str	x0, [x19, #296]
    3bc0:	ldr	x0, [x19, #288]
    3bc4:	str	wzr, [sp, #112]
    3bc8:	str	x0, [sp, #120]
    3bcc:	mov	x0, x19
    3bd0:	bl	4888 <d_print_comp>
    3bd4:	ldr	w0, [sp, #112]
    3bd8:	cbnz	w0, 3bec <d_print_comp_inner+0xb70>
    3bdc:	mov	x2, x20
    3be0:	mov	w1, w21
    3be4:	mov	x0, x19
    3be8:	bl	4914 <d_print_mod>
    3bec:	ldr	x0, [sp, #96]
    3bf0:	str	x0, [x19, #296]
    3bf4:	b	30a4 <d_print_comp_inner+0x28>
    3bf8:	ldrsh	w0, [x20, #18]
    3bfc:	cbz	w0, 3c10 <d_print_comp_inner+0xb94>
    3c00:	adrp	x1, 0 <is_fnqual_component_type>
    3c04:	mov	x0, x19
    3c08:	add	x1, x1, #0x0
    3c0c:	bl	378 <d_append_string>
    3c10:	ldr	x2, [x20, #8]
    3c14:	adrp	x0, 0 <is_fnqual_component_type>
    3c18:	add	x0, x0, #0x0
    3c1c:	add	x0, x0, #0x288
    3c20:	ldr	x1, [x2, #8]
    3c24:	cmp	x1, x0
    3c28:	b.eq	3c44 <d_print_comp_inner+0xbc8>  // b.none
    3c2c:	mov	w1, w21
    3c30:	mov	x0, x19
    3c34:	bl	4888 <d_print_comp>
    3c38:	mov	x0, x19
    3c3c:	mov	w1, #0x20                  	// #32
    3c40:	bl	2c0 <d_append_char>
    3c44:	ldrsh	w0, [x20, #16]
    3c48:	cbz	w0, 3c60 <d_print_comp_inner+0xbe4>
    3c4c:	mov	x0, x19
    3c50:	adrp	x1, 0 <is_fnqual_component_type>
    3c54:	add	x1, x1, #0x0
    3c58:	bl	378 <d_append_string>
    3c5c:	b	30a4 <d_print_comp_inner+0x28>
    3c60:	mov	x0, x19
    3c64:	adrp	x1, 0 <is_fnqual_component_type>
    3c68:	add	x1, x1, #0x0
    3c6c:	bl	378 <d_append_string>
    3c70:	b	30a4 <d_print_comp_inner+0x28>
    3c74:	ldr	x2, [x20, #8]
    3c78:	cbz	x2, 3c88 <d_print_comp_inner+0xc0c>
    3c7c:	mov	w1, w21
    3c80:	mov	x0, x19
    3c84:	bl	4888 <d_print_comp>
    3c88:	ldr	x0, [x20, #16]
    3c8c:	cbz	x0, 30a4 <d_print_comp_inner+0x28>
    3c90:	ldr	x0, [x19, #256]
    3c94:	cmp	x0, #0xfd
    3c98:	b.ls	3ca4 <d_print_comp_inner+0xc28>  // b.plast
    3c9c:	mov	x0, x19
    3ca0:	bl	284 <d_print_flush>
    3ca4:	mov	x0, x19
    3ca8:	adrp	x1, 0 <is_fnqual_component_type>
    3cac:	add	x1, x1, #0x0
    3cb0:	bl	378 <d_append_string>
    3cb4:	ldr	x2, [x20, #16]
    3cb8:	mov	x0, x19
    3cbc:	mov	w1, w21
    3cc0:	ldr	x22, [x19, #256]
    3cc4:	ldr	x23, [x19, #320]
    3cc8:	bl	4888 <d_print_comp>
    3ccc:	ldr	x0, [x19, #320]
    3cd0:	cmp	x0, x23
    3cd4:	b.ne	30a4 <d_print_comp_inner+0x28>  // b.any
    3cd8:	ldr	x0, [x19, #256]
    3cdc:	cmp	x0, x22
    3ce0:	b.ne	30a4 <d_print_comp_inner+0x28>  // b.any
    3ce4:	sub	x0, x0, #0x2
    3ce8:	str	x0, [x19, #256]
    3cec:	b	30a4 <d_print_comp_inner+0x28>
    3cf0:	ldp	x2, x20, [x20, #8]
    3cf4:	cbz	x2, 3d04 <d_print_comp_inner+0xc88>
    3cf8:	mov	w1, w21
    3cfc:	mov	x0, x19
    3d00:	bl	4888 <d_print_comp>
    3d04:	mov	x0, x19
    3d08:	mov	w1, #0x7b                  	// #123
    3d0c:	bl	2c0 <d_append_char>
    3d10:	mov	x2, x20
    3d14:	mov	w1, w21
    3d18:	mov	x0, x19
    3d1c:	bl	4888 <d_print_comp>
    3d20:	mov	x0, x19
    3d24:	mov	w1, #0x7d                  	// #125
    3d28:	bl	2c0 <d_append_char>
    3d2c:	b	30a4 <d_print_comp_inner+0x28>
    3d30:	ldr	x21, [x20, #8]
    3d34:	mov	x0, x19
    3d38:	adrp	x1, 0 <is_fnqual_component_type>
    3d3c:	add	x1, x1, #0x0
    3d40:	ldr	w20, [x21, #16]
    3d44:	bl	378 <d_append_string>
    3d48:	ldr	x0, [x21, #8]
    3d4c:	ldrb	w0, [x0]
    3d50:	sub	w0, w0, #0x61
    3d54:	and	w0, w0, #0xff
    3d58:	cmp	w0, #0x19
    3d5c:	b.hi	3d6c <d_print_comp_inner+0xcf0>  // b.pmore
    3d60:	mov	x0, x19
    3d64:	mov	w1, #0x20                  	// #32
    3d68:	bl	2c0 <d_append_char>
    3d6c:	ldr	x1, [x21, #8]
    3d70:	add	x0, x1, w20, sxtw
    3d74:	ldurb	w0, [x0, #-1]
    3d78:	cmp	w0, #0x20
    3d7c:	cset	w0, eq  // eq = none
    3d80:	sub	w20, w20, w0
    3d84:	mov	x0, x19
    3d88:	sxtw	x2, w20
    3d8c:	bl	304 <d_append_buffer>
    3d90:	b	30a4 <d_print_comp_inner+0x28>
    3d94:	mov	x0, x19
    3d98:	adrp	x1, 0 <is_fnqual_component_type>
    3d9c:	add	x1, x1, #0x0
    3da0:	bl	378 <d_append_string>
    3da4:	ldr	x2, [x20, #16]
    3da8:	mov	w1, w21
    3dac:	mov	x0, x19
    3db0:	bl	4888 <d_print_comp>
    3db4:	b	30a4 <d_print_comp_inner+0x28>
    3db8:	mov	x0, x19
    3dbc:	adrp	x1, 0 <is_fnqual_component_type>
    3dc0:	add	x1, x1, #0x0
    3dc4:	bl	378 <d_append_string>
    3dc8:	ldr	x0, [x19, #368]
    3dcc:	cbz	x0, 3de0 <d_print_comp_inner+0xd64>
    3dd0:	ldr	x1, [x19, #288]
    3dd4:	stp	x1, x0, [sp, #96]
    3dd8:	add	x1, sp, #0x60
    3ddc:	str	x1, [x19, #288]
    3de0:	ldr	x2, [x20, #8]
    3de4:	ldr	w0, [x2]
    3de8:	cmp	w0, #0x4
    3dec:	b.eq	3e10 <d_print_comp_inner+0xd94>  // b.none
    3df0:	mov	x0, x19
    3df4:	mov	w1, w21
    3df8:	bl	4888 <d_print_comp>
    3dfc:	ldr	x0, [x19, #368]
    3e00:	cbz	x0, 30a4 <d_print_comp_inner+0x28>
    3e04:	ldr	x0, [sp, #96]
    3e08:	str	x0, [x19, #288]
    3e0c:	b	30a4 <d_print_comp_inner+0x28>
    3e10:	ldr	x2, [x2, #8]
    3e14:	mov	x0, x19
    3e18:	mov	w1, w21
    3e1c:	bl	4888 <d_print_comp>
    3e20:	ldr	x0, [x19, #368]
    3e24:	cbz	x0, 3e30 <d_print_comp_inner+0xdb4>
    3e28:	ldr	x0, [sp, #96]
    3e2c:	str	x0, [x19, #288]
    3e30:	ldrb	w0, [x19, #264]
    3e34:	cmp	w0, #0x3c
    3e38:	b.ne	3e48 <d_print_comp_inner+0xdcc>  // b.any
    3e3c:	mov	x0, x19
    3e40:	mov	w1, #0x20                  	// #32
    3e44:	bl	2c0 <d_append_char>
    3e48:	mov	x0, x19
    3e4c:	mov	w1, #0x3c                  	// #60
    3e50:	bl	2c0 <d_append_char>
    3e54:	ldr	x0, [x20, #8]
    3e58:	mov	w1, w21
    3e5c:	ldr	x2, [x0, #16]
    3e60:	mov	x0, x19
    3e64:	bl	4888 <d_print_comp>
    3e68:	ldrb	w0, [x19, #264]
    3e6c:	cmp	w0, #0x3e
    3e70:	b.ne	3e80 <d_print_comp_inner+0xe04>  // b.any
    3e74:	mov	x0, x19
    3e78:	mov	w1, #0x20                  	// #32
    3e7c:	bl	2c0 <d_append_char>
    3e80:	mov	x0, x19
    3e84:	mov	w1, #0x3e                  	// #62
    3e88:	bl	2c0 <d_append_char>
    3e8c:	b	30a4 <d_print_comp_inner+0x28>
    3e90:	ldr	x2, [x20, #8]
    3e94:	mov	w1, w21
    3e98:	mov	x0, x19
    3e9c:	bl	4e78 <d_print_expr_op>
    3ea0:	b	30a4 <d_print_comp_inner+0x28>
    3ea4:	ldp	x23, x20, [x20, #8]
    3ea8:	ldr	w0, [x23]
    3eac:	cmp	w0, #0x32
    3eb0:	b.ne	3f60 <d_print_comp_inner+0xee4>  // b.any
    3eb4:	ldr	x0, [x23, #8]
    3eb8:	adrp	x1, 0 <is_fnqual_component_type>
    3ebc:	add	x1, x1, #0x0
    3ec0:	ldr	x22, [x0]
    3ec4:	mov	x0, x22
    3ec8:	bl	0 <strcmp>
    3ecc:	cbnz	w0, 3efc <d_print_comp_inner+0xe80>
    3ed0:	ldr	w0, [x20]
    3ed4:	cmp	w0, #0x3
    3ed8:	b.ne	3efc <d_print_comp_inner+0xe80>  // b.any
    3edc:	ldr	x0, [x20, #8]
    3ee0:	ldr	w1, [x0]
    3ee4:	cmp	w1, #0x1
    3ee8:	b.ne	3efc <d_print_comp_inner+0xe80>  // b.any
    3eec:	ldr	x1, [x20, #16]
    3ef0:	ldr	w1, [x1]
    3ef4:	cmp	w1, #0x29
    3ef8:	csel	x20, x20, x0, ne  // ne = any
    3efc:	ldr	w0, [x20]
    3f00:	cmp	w0, #0x39
    3f04:	b.ne	3f2c <d_print_comp_inner+0xeb0>  // b.any
    3f08:	ldr	x2, [x20, #8]
    3f0c:	mov	w1, w21
    3f10:	mov	x0, x19
    3f14:	bl	4e98 <d_print_subexpr>
    3f18:	mov	x2, x23
    3f1c:	mov	w1, w21
    3f20:	mov	x0, x19
    3f24:	bl	4e78 <d_print_expr_op>
    3f28:	b	30a4 <d_print_comp_inner+0x28>
    3f2c:	adrp	x1, 0 <is_fnqual_component_type>
    3f30:	mov	x0, x22
    3f34:	add	x1, x1, #0x0
    3f38:	bl	0 <strcmp>
    3f3c:	cbnz	w0, 3f94 <d_print_comp_inner+0xf18>
    3f40:	mov	x1, x20
    3f44:	mov	x0, x19
    3f48:	bl	a10 <d_find_pack>
    3f4c:	bl	348 <d_pack_length>
    3f50:	mov	w1, w0
    3f54:	mov	x0, x19
    3f58:	bl	3ac <d_append_num>
    3f5c:	b	30a4 <d_print_comp_inner+0x28>
    3f60:	cmp	w0, #0x34
    3f64:	b.eq	4000 <d_print_comp_inner+0xf84>  // b.none
    3f68:	mov	x22, #0x0                   	// #0
    3f6c:	mov	x2, x23
    3f70:	mov	w1, w21
    3f74:	mov	x0, x19
    3f78:	bl	4e78 <d_print_expr_op>
    3f7c:	cbnz	x22, 402c <d_print_comp_inner+0xfb0>
    3f80:	mov	x2, x20
    3f84:	mov	w1, w21
    3f88:	mov	x0, x19
    3f8c:	bl	4e98 <d_print_subexpr>
    3f90:	b	30a4 <d_print_comp_inner+0x28>
    3f94:	mov	x0, x22
    3f98:	adrp	x1, 0 <is_fnqual_component_type>
    3f9c:	add	x1, x1, #0x0
    3fa0:	bl	0 <strcmp>
    3fa4:	mov	w3, w0
    3fa8:	cbnz	w0, 3f6c <d_print_comp_inner+0xef0>
    3fac:	ldr	w0, [x20]
    3fb0:	cmp	w0, #0x2f
    3fb4:	b.ne	3fe8 <d_print_comp_inner+0xf6c>  // b.any
    3fb8:	ldr	x0, [x20, #8]
    3fbc:	cbz	x0, 3fe8 <d_print_comp_inner+0xf6c>
    3fc0:	ldr	w1, [x0]
    3fc4:	cmp	w1, #0x4b
    3fc8:	b.ne	3ff8 <d_print_comp_inner+0xf7c>  // b.any
    3fcc:	ldr	x1, [x0, #8]
    3fd0:	mov	x0, x19
    3fd4:	bl	a10 <d_find_pack>
    3fd8:	bl	348 <d_pack_length>
    3fdc:	add	w3, w3, w0
    3fe0:	ldr	x20, [x20, #16]
    3fe4:	cbnz	x20, 3fac <d_print_comp_inner+0xf30>
    3fe8:	mov	w1, w3
    3fec:	mov	x0, x19
    3ff0:	bl	3ac <d_append_num>
    3ff4:	b	30a4 <d_print_comp_inner+0x28>
    3ff8:	add	w3, w3, #0x1
    3ffc:	b	3fe0 <d_print_comp_inner+0xf64>
    4000:	mov	x0, x19
    4004:	mov	w1, #0x28                  	// #40
    4008:	bl	2c0 <d_append_char>
    400c:	ldr	x2, [x23, #8]
    4010:	mov	w1, w21
    4014:	mov	x0, x19
    4018:	bl	4888 <d_print_comp>
    401c:	mov	x0, x19
    4020:	mov	w1, #0x29                  	// #41
    4024:	bl	2c0 <d_append_char>
    4028:	b	3f80 <d_print_comp_inner+0xf04>
    402c:	adrp	x1, 0 <is_fnqual_component_type>
    4030:	mov	x0, x22
    4034:	add	x1, x1, #0x0
    4038:	bl	0 <strcmp>
    403c:	cbnz	w0, 4054 <d_print_comp_inner+0xfd8>
    4040:	mov	x2, x20
    4044:	mov	w1, w21
    4048:	mov	x0, x19
    404c:	bl	4888 <d_print_comp>
    4050:	b	30a4 <d_print_comp_inner+0x28>
    4054:	adrp	x1, 0 <is_fnqual_component_type>
    4058:	mov	x0, x22
    405c:	add	x1, x1, #0x0
    4060:	bl	0 <strcmp>
    4064:	cbnz	w0, 3f80 <d_print_comp_inner+0xf04>
    4068:	mov	x0, x19
    406c:	mov	w1, #0x28                  	// #40
    4070:	bl	2c0 <d_append_char>
    4074:	mov	x2, x20
    4078:	mov	w1, w21
    407c:	mov	x0, x19
    4080:	bl	4888 <d_print_comp>
    4084:	mov	x0, x19
    4088:	mov	w1, #0x29                  	// #41
    408c:	bl	2c0 <d_append_char>
    4090:	b	30a4 <d_print_comp_inner+0x28>
    4094:	ldr	x0, [x20, #16]
    4098:	ldr	w0, [x0]
    409c:	cmp	w0, #0x39
    40a0:	b.ne	309c <d_print_comp_inner+0x20>  // b.any
    40a4:	ldr	x2, [x20, #8]
    40a8:	ldr	x0, [x2, #8]
    40ac:	bl	804 <op_is_new_cast.isra.0>
    40b0:	cbz	w0, 4114 <d_print_comp_inner+0x1098>
    40b4:	mov	w1, w21
    40b8:	mov	x0, x19
    40bc:	bl	4e78 <d_print_expr_op>
    40c0:	mov	x0, x19
    40c4:	mov	w1, #0x3c                  	// #60
    40c8:	bl	2c0 <d_append_char>
    40cc:	ldr	x0, [x20, #16]
    40d0:	mov	w1, w21
    40d4:	ldr	x2, [x0, #8]
    40d8:	mov	x0, x19
    40dc:	bl	4888 <d_print_comp>
    40e0:	mov	x0, x19
    40e4:	adrp	x1, 0 <is_fnqual_component_type>
    40e8:	add	x1, x1, #0x0
    40ec:	bl	378 <d_append_string>
    40f0:	ldr	x0, [x20, #16]
    40f4:	mov	w1, w21
    40f8:	ldr	x2, [x0, #16]
    40fc:	mov	x0, x19
    4100:	bl	4888 <d_print_comp>
    4104:	mov	x0, x19
    4108:	mov	w1, #0x29                  	// #41
    410c:	bl	2c0 <d_append_char>
    4110:	b	30a4 <d_print_comp_inner+0x28>
    4114:	mov	x2, x20
    4118:	mov	w1, w21
    411c:	mov	x0, x19
    4120:	bl	4f24 <d_maybe_print_fold_expression>
    4124:	cbnz	w0, 30a4 <d_print_comp_inner+0x28>
    4128:	ldr	x0, [x20, #8]
    412c:	ldr	w1, [x0]
    4130:	cmp	w1, #0x32
    4134:	b.ne	4164 <d_print_comp_inner+0x10e8>  // b.any
    4138:	ldr	x0, [x0, #8]
    413c:	ldr	w1, [x0, #16]
    4140:	cmp	w1, #0x1
    4144:	b.ne	4164 <d_print_comp_inner+0x10e8>  // b.any
    4148:	ldr	x0, [x0, #8]
    414c:	ldrb	w0, [x0]
    4150:	cmp	w0, #0x3e
    4154:	b.ne	4164 <d_print_comp_inner+0x10e8>  // b.any
    4158:	mov	x0, x19
    415c:	mov	w1, #0x28                  	// #40
    4160:	bl	2c0 <d_append_char>
    4164:	ldr	x0, [x20, #8]
    4168:	adrp	x24, 0 <is_fnqual_component_type>
    416c:	add	x1, x24, #0x0
    4170:	ldr	x0, [x0, #8]
    4174:	ldr	x0, [x0]
    4178:	bl	0 <strcmp>
    417c:	ldr	x1, [x20, #16]
    4180:	ldr	x2, [x1, #8]
    4184:	cbnz	w0, 41b0 <d_print_comp_inner+0x1134>
    4188:	ldr	w0, [x2]
    418c:	cmp	w0, #0x3
    4190:	b.ne	41b0 <d_print_comp_inner+0x1134>  // b.any
    4194:	ldr	x0, [x2, #16]
    4198:	ldr	w0, [x0]
    419c:	cmp	w0, #0x29
    41a0:	b.eq	41ac <d_print_comp_inner+0x1130>  // b.none
    41a4:	mov	w0, #0x1                   	// #1
    41a8:	str	w0, [x19, #304]
    41ac:	ldr	x2, [x2, #8]
    41b0:	mov	w1, w21
    41b4:	mov	x0, x19
    41b8:	bl	4e98 <d_print_subexpr>
    41bc:	ldr	x22, [x20, #8]
    41c0:	adrp	x1, 0 <is_fnqual_component_type>
    41c4:	add	x1, x1, #0x0
    41c8:	ldr	x0, [x22, #8]
    41cc:	ldr	x23, [x0]
    41d0:	mov	x0, x23
    41d4:	bl	0 <strcmp>
    41d8:	cbnz	w0, 4248 <d_print_comp_inner+0x11cc>
    41dc:	mov	x0, x19
    41e0:	mov	w1, #0x5b                  	// #91
    41e4:	bl	2c0 <d_append_char>
    41e8:	ldr	x0, [x20, #16]
    41ec:	mov	w1, w21
    41f0:	ldr	x2, [x0, #16]
    41f4:	mov	x0, x19
    41f8:	bl	4888 <d_print_comp>
    41fc:	mov	x0, x19
    4200:	mov	w1, #0x5d                  	// #93
    4204:	bl	2c0 <d_append_char>
    4208:	ldr	x0, [x20, #8]
    420c:	ldr	w1, [x0]
    4210:	cmp	w1, #0x32
    4214:	b.ne	30a4 <d_print_comp_inner+0x28>  // b.any
    4218:	ldr	x0, [x0, #8]
    421c:	ldr	w1, [x0, #16]
    4220:	cmp	w1, #0x1
    4224:	b.ne	30a4 <d_print_comp_inner+0x28>  // b.any
    4228:	ldr	x0, [x0, #8]
    422c:	ldrb	w0, [x0]
    4230:	cmp	w0, #0x3e
    4234:	b.ne	30a4 <d_print_comp_inner+0x28>  // b.any
    4238:	mov	x0, x19
    423c:	mov	w1, #0x29                  	// #41
    4240:	bl	2c0 <d_append_char>
    4244:	b	30a4 <d_print_comp_inner+0x28>
    4248:	add	x1, x24, #0x0
    424c:	mov	x0, x23
    4250:	bl	0 <strcmp>
    4254:	cbz	w0, 4268 <d_print_comp_inner+0x11ec>
    4258:	mov	x2, x22
    425c:	mov	w1, w21
    4260:	mov	x0, x19
    4264:	bl	4e78 <d_print_expr_op>
    4268:	ldr	x0, [x20, #16]
    426c:	mov	w1, w21
    4270:	ldr	x2, [x0, #16]
    4274:	mov	x0, x19
    4278:	bl	4e98 <d_print_subexpr>
    427c:	b	4208 <d_print_comp_inner+0x118c>
    4280:	mov	w0, #0x1                   	// #1
    4284:	str	w0, [x19, #304]
    4288:	b	30a4 <d_print_comp_inner+0x28>
    428c:	ldr	x0, [x20, #16]
    4290:	ldr	w1, [x0]
    4294:	cmp	w1, #0x3b
    4298:	b.ne	309c <d_print_comp_inner+0x20>  // b.any
    429c:	ldr	x0, [x0, #16]
    42a0:	ldr	w0, [x0]
    42a4:	cmp	w0, #0x3c
    42a8:	b.ne	309c <d_print_comp_inner+0x20>  // b.any
    42ac:	mov	x2, x20
    42b0:	mov	w1, w21
    42b4:	mov	x0, x19
    42b8:	bl	4f24 <d_maybe_print_fold_expression>
    42bc:	cbnz	w0, 30a4 <d_print_comp_inner+0x28>
    42c0:	ldp	x22, x0, [x20, #8]
    42c4:	adrp	x1, 0 <is_fnqual_component_type>
    42c8:	add	x1, x1, #0x0
    42cc:	ldp	x20, x0, [x0, #8]
    42d0:	ldp	x24, x23, [x0, #8]
    42d4:	ldr	x0, [x22, #8]
    42d8:	ldr	x0, [x0]
    42dc:	bl	0 <strcmp>
    42e0:	cbnz	w0, 4338 <d_print_comp_inner+0x12bc>
    42e4:	mov	x2, x20
    42e8:	mov	w1, w21
    42ec:	mov	x0, x19
    42f0:	bl	4e98 <d_print_subexpr>
    42f4:	mov	x2, x22
    42f8:	mov	w1, w21
    42fc:	mov	x0, x19
    4300:	bl	4e78 <d_print_expr_op>
    4304:	mov	x2, x24
    4308:	mov	w1, w21
    430c:	mov	x0, x19
    4310:	bl	4e98 <d_print_subexpr>
    4314:	mov	x0, x19
    4318:	adrp	x1, 0 <is_fnqual_component_type>
    431c:	add	x1, x1, #0x0
    4320:	bl	378 <d_append_string>
    4324:	mov	x2, x23
    4328:	mov	w1, w21
    432c:	mov	x0, x19
    4330:	bl	4e98 <d_print_subexpr>
    4334:	b	30a4 <d_print_comp_inner+0x28>
    4338:	mov	x0, x19
    433c:	adrp	x1, 0 <is_fnqual_component_type>
    4340:	add	x1, x1, #0x0
    4344:	bl	378 <d_append_string>
    4348:	ldr	x0, [x20, #8]
    434c:	cbz	x0, 436c <d_print_comp_inner+0x12f0>
    4350:	mov	x2, x20
    4354:	mov	w1, w21
    4358:	mov	x0, x19
    435c:	bl	4e98 <d_print_subexpr>
    4360:	mov	x0, x19
    4364:	mov	w1, #0x20                  	// #32
    4368:	bl	2c0 <d_append_char>
    436c:	mov	x2, x24
    4370:	mov	w1, w21
    4374:	mov	x0, x19
    4378:	bl	4888 <d_print_comp>
    437c:	cbz	x23, 30a4 <d_print_comp_inner+0x28>
    4380:	mov	x2, x23
    4384:	mov	w1, w21
    4388:	mov	x0, x19
    438c:	bl	4e98 <d_print_subexpr>
    4390:	b	30a4 <d_print_comp_inner+0x28>
    4394:	ldr	x1, [x20, #8]
    4398:	ldr	w2, [x1]
    439c:	cmp	w2, #0x27
    43a0:	b.ne	454c <d_print_comp_inner+0x14d0>  // b.any
    43a4:	ldr	x1, [x1, #8]
    43a8:	ldr	w22, [x1, #28]
    43ac:	cmp	w22, #0x6
    43b0:	b.hi	440c <d_print_comp_inner+0x1390>  // b.pmore
    43b4:	cbz	w22, 4414 <d_print_comp_inner+0x1398>
    43b8:	ldr	x1, [x20, #16]
    43bc:	ldr	w1, [x1]
    43c0:	cbnz	w1, 4414 <d_print_comp_inner+0x1398>
    43c4:	cmp	w0, #0x3e
    43c8:	b.ne	43d8 <d_print_comp_inner+0x135c>  // b.any
    43cc:	mov	x0, x19
    43d0:	mov	w1, #0x2d                  	// #45
    43d4:	bl	2c0 <d_append_char>
    43d8:	ldr	x2, [x20, #16]
    43dc:	mov	w1, w21
    43e0:	mov	x0, x19
    43e4:	sub	w22, w22, #0x2
    43e8:	bl	4888 <d_print_comp>
    43ec:	cmp	w22, #0x4
    43f0:	b.hi	30a4 <d_print_comp_inner+0x28>  // b.pmore
    43f4:	adrp	x0, 0 <is_fnqual_component_type>
    43f8:	add	x0, x0, #0x0
    43fc:	ldrb	w0, [x0, w22, uxtw]
    4400:	adr	x1, 440c <d_print_comp_inner+0x1390>
    4404:	add	x0, x1, w0, sxtb #2
    4408:	br	x0
    440c:	cmp	w22, #0x7
    4410:	b.eq	44ec <d_print_comp_inner+0x1470>  // b.none
    4414:	mov	x0, x19
    4418:	mov	w1, #0x28                  	// #40
    441c:	bl	2c0 <d_append_char>
    4420:	ldr	x2, [x20, #8]
    4424:	mov	w1, w21
    4428:	mov	x0, x19
    442c:	bl	4888 <d_print_comp>
    4430:	mov	x0, x19
    4434:	mov	w1, #0x29                  	// #41
    4438:	bl	2c0 <d_append_char>
    443c:	ldr	w0, [x20]
    4440:	cmp	w0, #0x3e
    4444:	b.ne	4454 <d_print_comp_inner+0x13d8>  // b.any
    4448:	mov	x0, x19
    444c:	mov	w1, #0x2d                  	// #45
    4450:	bl	2c0 <d_append_char>
    4454:	cmp	w22, #0x8
    4458:	b.ne	4468 <d_print_comp_inner+0x13ec>  // b.any
    445c:	mov	x0, x19
    4460:	mov	w1, #0x5b                  	// #91
    4464:	bl	2c0 <d_append_char>
    4468:	ldr	x2, [x20, #16]
    446c:	mov	w1, w21
    4470:	mov	x0, x19
    4474:	bl	4888 <d_print_comp>
    4478:	cmp	w22, #0x8
    447c:	b.ne	30a4 <d_print_comp_inner+0x28>  // b.any
    4480:	mov	x0, x19
    4484:	mov	w1, #0x5d                  	// #93
    4488:	bl	2c0 <d_append_char>
    448c:	b	30a4 <d_print_comp_inner+0x28>
    4490:	mov	x0, x19
    4494:	mov	w1, #0x75                  	// #117
    4498:	bl	2c0 <d_append_char>
    449c:	b	30a4 <d_print_comp_inner+0x28>
    44a0:	mov	x0, x19
    44a4:	mov	w1, #0x6c                  	// #108
    44a8:	bl	2c0 <d_append_char>
    44ac:	b	30a4 <d_print_comp_inner+0x28>
    44b0:	mov	x0, x19
    44b4:	adrp	x1, 0 <is_fnqual_component_type>
    44b8:	add	x1, x1, #0x0
    44bc:	bl	378 <d_append_string>
    44c0:	b	30a4 <d_print_comp_inner+0x28>
    44c4:	mov	x0, x19
    44c8:	adrp	x1, 0 <is_fnqual_component_type>
    44cc:	add	x1, x1, #0x0
    44d0:	bl	378 <d_append_string>
    44d4:	b	30a4 <d_print_comp_inner+0x28>
    44d8:	mov	x0, x19
    44dc:	adrp	x1, 0 <is_fnqual_component_type>
    44e0:	add	x1, x1, #0x0
    44e4:	bl	378 <d_append_string>
    44e8:	b	30a4 <d_print_comp_inner+0x28>
    44ec:	ldr	x1, [x20, #16]
    44f0:	ldr	w2, [x1]
    44f4:	cbnz	w2, 4414 <d_print_comp_inner+0x1398>
    44f8:	ldr	w2, [x1, #16]
    44fc:	cmp	w2, #0x1
    4500:	b.ne	4414 <d_print_comp_inner+0x1398>  // b.any
    4504:	cmp	w0, #0x3d
    4508:	b.ne	4414 <d_print_comp_inner+0x1398>  // b.any
    450c:	ldr	x0, [x1, #8]
    4510:	ldrb	w0, [x0]
    4514:	cmp	w0, #0x30
    4518:	b.eq	4538 <d_print_comp_inner+0x14bc>  // b.none
    451c:	cmp	w0, #0x31
    4520:	b.ne	4414 <d_print_comp_inner+0x1398>  // b.any
    4524:	mov	x0, x19
    4528:	adrp	x1, 0 <is_fnqual_component_type>
    452c:	add	x1, x1, #0x0
    4530:	bl	378 <d_append_string>
    4534:	b	30a4 <d_print_comp_inner+0x28>
    4538:	mov	x0, x19
    453c:	adrp	x1, 0 <is_fnqual_component_type>
    4540:	add	x1, x1, #0x0
    4544:	bl	378 <d_append_string>
    4548:	b	30a4 <d_print_comp_inner+0x28>
    454c:	mov	w22, #0x0                   	// #0
    4550:	b	4414 <d_print_comp_inner+0x1398>
    4554:	ldr	w1, [x20, #8]
    4558:	mov	x0, x19
    455c:	bl	3ac <d_append_num>
    4560:	b	30a4 <d_print_comp_inner+0x28>
    4564:	mov	x0, x19
    4568:	adrp	x1, 0 <is_fnqual_component_type>
    456c:	add	x1, x1, #0x0
    4570:	bl	378 <d_append_string>
    4574:	ldr	x2, [x20, #8]
    4578:	mov	w1, w21
    457c:	mov	x0, x19
    4580:	bl	4888 <d_print_comp>
    4584:	b	30a4 <d_print_comp_inner+0x28>
    4588:	ldr	x2, [x20, #8]
    458c:	mov	w1, w21
    4590:	mov	x0, x19
    4594:	bl	4888 <d_print_comp>
    4598:	ldr	x2, [x20, #16]
    459c:	mov	w1, w21
    45a0:	mov	x0, x19
    45a4:	bl	4888 <d_print_comp>
    45a8:	b	30a4 <d_print_comp_inner+0x28>
    45ac:	ldrb	w1, [x20, #8]
    45b0:	mov	x0, x19
    45b4:	bl	2c0 <d_append_char>
    45b8:	b	30a4 <d_print_comp_inner+0x28>
    45bc:	mov	x0, x19
    45c0:	adrp	x1, 0 <is_fnqual_component_type>
    45c4:	add	x1, x1, #0x0
    45c8:	bl	378 <d_append_string>
    45cc:	ldr	x2, [x20, #8]
    45d0:	mov	w1, w21
    45d4:	mov	x0, x19
    45d8:	bl	4888 <d_print_comp>
    45dc:	mov	x0, x19
    45e0:	mov	w1, #0x29                  	// #41
    45e4:	bl	2c0 <d_append_char>
    45e8:	b	30a4 <d_print_comp_inner+0x28>
    45ec:	ldr	x1, [x20, #8]
    45f0:	mov	x0, x19
    45f4:	bl	a10 <d_find_pack>
    45f8:	cbnz	x0, 4620 <d_print_comp_inner+0x15a4>
    45fc:	ldr	x2, [x20, #8]
    4600:	mov	w1, w21
    4604:	mov	x0, x19
    4608:	bl	4e98 <d_print_subexpr>
    460c:	mov	x0, x19
    4610:	adrp	x1, 0 <is_fnqual_component_type>
    4614:	add	x1, x1, #0x0
    4618:	bl	378 <d_append_string>
    461c:	b	30a4 <d_print_comp_inner+0x28>
    4620:	bl	348 <d_pack_length>
    4624:	mov	w23, w0
    4628:	sub	w25, w0, #0x1
    462c:	ldr	x24, [x20, #8]
    4630:	adrp	x20, 0 <is_fnqual_component_type>
    4634:	add	x20, x20, #0x0
    4638:	cmp	w22, w23
    463c:	b.ge	30a4 <d_print_comp_inner+0x28>  // b.tcont
    4640:	str	w22, [x19, #316]
    4644:	mov	x2, x24
    4648:	mov	w1, w21
    464c:	mov	x0, x19
    4650:	bl	4888 <d_print_comp>
    4654:	cmp	w25, w22
    4658:	b.le	4668 <d_print_comp_inner+0x15ec>
    465c:	mov	x1, x20
    4660:	mov	x0, x19
    4664:	bl	378 <d_append_string>
    4668:	add	w22, w22, #0x1
    466c:	b	4638 <d_print_comp_inner+0x15bc>
    4670:	ldr	x20, [x20, #8]
    4674:	cbnz	x20, 468c <d_print_comp_inner+0x1610>
    4678:	mov	x0, x19
    467c:	adrp	x1, 0 <is_fnqual_component_type>
    4680:	add	x1, x1, #0x0
    4684:	bl	378 <d_append_string>
    4688:	b	30a4 <d_print_comp_inner+0x28>
    468c:	mov	x0, x19
    4690:	adrp	x1, 0 <is_fnqual_component_type>
    4694:	add	x1, x1, #0x0
    4698:	bl	378 <d_append_string>
    469c:	mov	w1, w20
    46a0:	mov	x0, x19
    46a4:	bl	3ac <d_append_num>
    46a8:	mov	x0, x19
    46ac:	mov	w1, #0x7d                  	// #125
    46b0:	bl	2c0 <d_append_char>
    46b4:	b	30a4 <d_print_comp_inner+0x28>
    46b8:	mov	x0, x19
    46bc:	adrp	x1, 0 <is_fnqual_component_type>
    46c0:	add	x1, x1, #0x0
    46c4:	bl	378 <d_append_string>
    46c8:	ldr	x2, [x20, #8]
    46cc:	mov	w1, w21
    46d0:	mov	x0, x19
    46d4:	bl	4888 <d_print_comp>
    46d8:	b	30a4 <d_print_comp_inner+0x28>
    46dc:	mov	x0, x19
    46e0:	adrp	x1, 0 <is_fnqual_component_type>
    46e4:	add	x1, x1, #0x0
    46e8:	bl	378 <d_append_string>
    46ec:	ldr	x2, [x20, #8]
    46f0:	mov	w1, w21
    46f4:	mov	x0, x19
    46f8:	bl	4888 <d_print_comp>
    46fc:	b	30a4 <d_print_comp_inner+0x28>
    4700:	mov	x0, x19
    4704:	adrp	x1, 0 <is_fnqual_component_type>
    4708:	add	x1, x1, #0x0
    470c:	bl	378 <d_append_string>
    4710:	ldr	w0, [x19, #312]
    4714:	mov	w1, w21
    4718:	ldr	x2, [x20, #8]
    471c:	add	w0, w0, #0x1
    4720:	str	w0, [x19, #312]
    4724:	mov	x0, x19
    4728:	bl	4888 <d_print_comp>
    472c:	ldr	w0, [x19, #312]
    4730:	adrp	x1, 0 <is_fnqual_component_type>
    4734:	add	x1, x1, #0x0
    4738:	sub	w0, w0, #0x1
    473c:	str	w0, [x19, #312]
    4740:	mov	x0, x19
    4744:	bl	378 <d_append_string>
    4748:	ldr	w1, [x20, #16]
    474c:	mov	x0, x19
    4750:	add	w1, w1, #0x1
    4754:	bl	3ac <d_append_num>
    4758:	mov	x0, x19
    475c:	mov	w1, #0x7d                  	// #125
    4760:	bl	2c0 <d_append_char>
    4764:	b	30a4 <d_print_comp_inner+0x28>
    4768:	mov	x0, x19
    476c:	adrp	x1, 0 <is_fnqual_component_type>
    4770:	add	x1, x1, #0x0
    4774:	bl	378 <d_append_string>
    4778:	ldr	x1, [x20, #8]
    477c:	mov	x0, x19
    4780:	add	w1, w1, #0x1
    4784:	bl	3ac <d_append_num>
    4788:	mov	x0, x19
    478c:	mov	w1, #0x7d                  	// #125
    4790:	bl	2c0 <d_append_char>
    4794:	b	30a4 <d_print_comp_inner+0x28>
    4798:	ldr	x2, [x20, #8]
    479c:	mov	w1, w21
    47a0:	mov	x0, x19
    47a4:	bl	4888 <d_print_comp>
    47a8:	mov	x0, x19
    47ac:	adrp	x1, 0 <is_fnqual_component_type>
    47b0:	add	x1, x1, #0x0
    47b4:	bl	378 <d_append_string>
    47b8:	ldr	x2, [x20, #16]
    47bc:	mov	w1, w21
    47c0:	mov	x0, x19
    47c4:	bl	4888 <d_print_comp>
    47c8:	mov	x0, x19
    47cc:	mov	w1, #0x5d                  	// #93
    47d0:	bl	2c0 <d_append_char>
    47d4:	b	30a4 <d_print_comp_inner+0x28>
    47d8:	cmp	w5, #0x2
    47dc:	b.ne	480c <d_print_comp_inner+0x1790>  // b.any
    47e0:	ldr	x22, [x22, #16]
    47e4:	ldr	w0, [x22]
    47e8:	cmp	w0, #0x47
    47ec:	b.ne	47f8 <d_print_comp_inner+0x177c>  // b.any
    47f0:	ldr	x22, [x22, #8]
    47f4:	cbz	x22, 32cc <d_print_comp_inner+0x250>
    47f8:	ubfiz	x0, x23, #5, #32
    47fc:	add	x2, x2, x0
    4800:	ldr	w0, [x22]
    4804:	bl	0 <is_fnqual_component_type>
    4808:	cbnz	w0, 330c <d_print_comp_inner+0x290>
    480c:	ldr	w0, [x22]
    4810:	cmp	w0, #0x4
    4814:	b.ne	4824 <d_print_comp_inner+0x17a8>  // b.any
    4818:	add	x0, sp, #0x50
    481c:	stp	x4, x22, [sp, #80]
    4820:	str	x0, [x19, #288]
    4824:	ldr	x2, [x20, #16]
    4828:	mov	x0, x19
    482c:	mov	w1, w21
    4830:	bl	4888 <d_print_comp>
    4834:	ldr	w0, [x22]
    4838:	cmp	w0, #0x4
    483c:	b.ne	4848 <d_print_comp_inner+0x17cc>  // b.any
    4840:	ldr	x0, [sp, #80]
    4844:	str	x0, [x19, #288]
    4848:	add	x22, sp, #0x70
    484c:	add	x25, sp, #0x68
    4850:	sub	w23, w23, #0x1
    4854:	ubfiz	x20, x23, #5, #32
    4858:	ldr	w0, [x22, x20]
    485c:	cbnz	w0, 487c <d_print_comp_inner+0x1800>
    4860:	mov	x0, x19
    4864:	mov	w1, #0x20                  	// #32
    4868:	bl	2c0 <d_append_char>
    486c:	ldr	x2, [x25, x20]
    4870:	mov	w1, w21
    4874:	mov	x0, x19
    4878:	bl	4914 <d_print_mod>
    487c:	cbnz	w23, 4850 <d_print_comp_inner+0x17d4>
    4880:	str	x24, [x19, #296]
    4884:	b	30a4 <d_print_comp_inner+0x28>

0000000000004888 <d_print_comp>:
    4888:	stp	x29, x30, [sp, #-48]!
    488c:	mov	x29, sp
    4890:	stp	x19, x20, [sp, #16]
    4894:	mov	x19, x0
    4898:	cbz	x2, 48b8 <d_print_comp+0x30>
    489c:	ldr	w4, [x2, #4]
    48a0:	mov	x20, x2
    48a4:	cmp	w4, #0x1
    48a8:	b.gt	48b8 <d_print_comp+0x30>
    48ac:	ldr	w3, [x0, #308]
    48b0:	cmp	w3, #0x400
    48b4:	b.le	48cc <d_print_comp+0x44>
    48b8:	mov	w0, #0x1                   	// #1
    48bc:	str	w0, [x19, #304]
    48c0:	ldp	x19, x20, [sp, #16]
    48c4:	ldp	x29, x30, [sp], #48
    48c8:	ret
    48cc:	add	w4, w4, #0x1
    48d0:	add	w3, w3, #0x1
    48d4:	str	w4, [x2, #4]
    48d8:	str	w3, [x0, #308]
    48dc:	ldr	x3, [x0, #328]
    48e0:	stp	x2, x3, [sp, #32]
    48e4:	add	x3, sp, #0x20
    48e8:	str	x3, [x0, #328]
    48ec:	bl	307c <d_print_comp_inner>
    48f0:	ldr	x0, [sp, #40]
    48f4:	str	x0, [x19, #328]
    48f8:	ldr	w0, [x20, #4]
    48fc:	sub	w0, w0, #0x1
    4900:	str	w0, [x20, #4]
    4904:	ldr	w0, [x19, #308]
    4908:	sub	w0, w0, #0x1
    490c:	str	w0, [x19, #308]
    4910:	b	48c0 <d_print_comp+0x38>

0000000000004914 <d_print_mod>:
    4914:	stp	x29, x30, [sp, #-48]!
    4918:	mov	x29, sp
    491c:	stp	x19, x20, [sp, #16]
    4920:	mov	x20, x2
    4924:	ldr	w2, [x2]
    4928:	str	x21, [sp, #32]
    492c:	cmp	w2, #0x3
    4930:	b.eq	4a98 <d_print_mod+0x184>  // b.none
    4934:	sub	w2, w2, #0x19
    4938:	mov	x19, x0
    493c:	mov	w21, w1
    4940:	cmp	w2, #0x37
    4944:	b.hi	4ac4 <d_print_mod+0x1b0>  // b.pmore
    4948:	adrp	x0, 0 <is_fnqual_component_type>
    494c:	add	x0, x0, #0x0
    4950:	ldrb	w0, [x0, w2, uxtw]
    4954:	adr	x1, 4960 <d_print_mod+0x4c>
    4958:	add	x0, x1, w0, sxtb #2
    495c:	br	x0
    4960:	adrp	x1, 0 <is_fnqual_component_type>
    4964:	add	x1, x1, #0x0
    4968:	mov	x0, x19
    496c:	ldp	x19, x20, [sp, #16]
    4970:	ldr	x21, [sp, #32]
    4974:	ldp	x29, x30, [sp], #48
    4978:	b	378 <d_append_string>
    497c:	adrp	x1, 0 <is_fnqual_component_type>
    4980:	add	x1, x1, #0x0
    4984:	b	4968 <d_print_mod+0x54>
    4988:	adrp	x1, 0 <is_fnqual_component_type>
    498c:	add	x1, x1, #0x0
    4990:	b	4968 <d_print_mod+0x54>
    4994:	adrp	x1, 0 <is_fnqual_component_type>
    4998:	add	x1, x1, #0x0
    499c:	b	4968 <d_print_mod+0x54>
    49a0:	adrp	x1, 0 <is_fnqual_component_type>
    49a4:	add	x1, x1, #0x0
    49a8:	mov	x0, x19
    49ac:	bl	378 <d_append_string>
    49b0:	ldr	x0, [x20, #16]
    49b4:	cbz	x0, 4acc <d_print_mod+0x1b8>
    49b8:	mov	x0, x19
    49bc:	mov	w1, #0x28                  	// #40
    49c0:	bl	2c0 <d_append_char>
    49c4:	ldr	x2, [x20, #16]
    49c8:	mov	w1, w21
    49cc:	mov	x0, x19
    49d0:	bl	4888 <d_print_comp>
    49d4:	mov	w1, #0x29                  	// #41
    49d8:	b	4a0c <d_print_mod+0xf8>
    49dc:	adrp	x1, 0 <is_fnqual_component_type>
    49e0:	add	x1, x1, #0x0
    49e4:	b	49a8 <d_print_mod+0x94>
    49e8:	mov	x0, x19
    49ec:	mov	w1, #0x20                  	// #32
    49f0:	bl	2c0 <d_append_char>
    49f4:	ldr	x2, [x20, #16]
    49f8:	mov	w1, w21
    49fc:	mov	x0, x19
    4a00:	b	4a9c <d_print_mod+0x188>
    4a04:	tbnz	w21, #2, 4acc <d_print_mod+0x1b8>
    4a08:	mov	w1, #0x2a                  	// #42
    4a0c:	mov	x0, x19
    4a10:	ldp	x19, x20, [sp, #16]
    4a14:	ldr	x21, [sp, #32]
    4a18:	ldp	x29, x30, [sp], #48
    4a1c:	b	2c0 <d_append_char>
    4a20:	mov	x0, x19
    4a24:	mov	w1, #0x20                  	// #32
    4a28:	bl	2c0 <d_append_char>
    4a2c:	mov	w1, #0x26                  	// #38
    4a30:	b	4a0c <d_print_mod+0xf8>
    4a34:	mov	x0, x19
    4a38:	mov	w1, #0x20                  	// #32
    4a3c:	bl	2c0 <d_append_char>
    4a40:	adrp	x1, 0 <is_fnqual_component_type>
    4a44:	add	x1, x1, #0x0
    4a48:	b	4968 <d_print_mod+0x54>
    4a4c:	adrp	x1, 0 <is_fnqual_component_type>
    4a50:	add	x1, x1, #0x0
    4a54:	b	4968 <d_print_mod+0x54>
    4a58:	adrp	x1, 0 <is_fnqual_component_type>
    4a5c:	add	x1, x1, #0x0
    4a60:	b	4968 <d_print_mod+0x54>
    4a64:	ldrb	w0, [x19, #264]
    4a68:	cmp	w0, #0x28
    4a6c:	b.eq	4a7c <d_print_mod+0x168>  // b.none
    4a70:	mov	x0, x19
    4a74:	mov	w1, #0x20                  	// #32
    4a78:	bl	2c0 <d_append_char>
    4a7c:	ldr	x2, [x20, #8]
    4a80:	mov	w1, w21
    4a84:	mov	x0, x19
    4a88:	bl	4888 <d_print_comp>
    4a8c:	adrp	x1, 0 <is_fnqual_component_type>
    4a90:	add	x1, x1, #0x0
    4a94:	b	4968 <d_print_mod+0x54>
    4a98:	ldr	x2, [x20, #8]
    4a9c:	ldp	x19, x20, [sp, #16]
    4aa0:	ldr	x21, [sp, #32]
    4aa4:	ldp	x29, x30, [sp], #48
    4aa8:	b	4888 <d_print_comp>
    4aac:	mov	x0, x19
    4ab0:	adrp	x1, 0 <is_fnqual_component_type>
    4ab4:	add	x1, x1, #0x0
    4ab8:	bl	378 <d_append_string>
    4abc:	ldr	x2, [x20, #8]
    4ac0:	b	49c8 <d_print_mod+0xb4>
    4ac4:	mov	x2, x20
    4ac8:	b	49f8 <d_print_mod+0xe4>
    4acc:	ldp	x19, x20, [sp, #16]
    4ad0:	ldr	x21, [sp, #32]
    4ad4:	ldp	x29, x30, [sp], #48
    4ad8:	ret

0000000000004adc <d_print_function_type.isra.0>:
    4adc:	stp	x29, x30, [sp, #-64]!
    4ae0:	mov	x29, sp
    4ae4:	stp	x19, x20, [sp, #16]
    4ae8:	mov	x19, x0
    4aec:	mov	w20, w1
    4af0:	mov	x0, x3
    4af4:	stp	x21, x22, [sp, #32]
    4af8:	mov	x22, x2
    4afc:	mov	x21, x3
    4b00:	adrp	x2, 0 <is_fnqual_component_type>
    4b04:	add	x2, x2, #0x0
    4b08:	stp	x23, x24, [sp, #48]
    4b0c:	cbnz	x0, 4b18 <d_print_function_type.isra.0+0x3c>
    4b10:	mov	w23, #0x0                   	// #0
    4b14:	b	4b88 <d_print_function_type.isra.0+0xac>
    4b18:	ldr	w1, [x0, #16]
    4b1c:	cbnz	w1, 4b10 <d_print_function_type.isra.0+0x34>
    4b20:	ldr	x1, [x0, #8]
    4b24:	ldr	w1, [x1]
    4b28:	sub	w1, w1, #0x19
    4b2c:	cmp	w1, #0x12
    4b30:	b.hi	4b44 <d_print_function_type.isra.0+0x68>  // b.pmore
    4b34:	ldrb	w1, [x2, w1, uxtw]
    4b38:	adr	x3, 4b44 <d_print_function_type.isra.0+0x68>
    4b3c:	add	x1, x3, w1, sxtb #2
    4b40:	br	x1
    4b44:	ldr	x0, [x0]
    4b48:	b	4b0c <d_print_function_type.isra.0+0x30>
    4b4c:	ldrb	w0, [x19, #264]
    4b50:	and	w0, w0, #0xfffffffd
    4b54:	and	w0, w0, #0xff
    4b58:	cmp	w0, #0x28
    4b5c:	b.eq	4b78 <d_print_function_type.isra.0+0x9c>  // b.none
    4b60:	ldrb	w0, [x19, #264]
    4b64:	cmp	w0, #0x20
    4b68:	b.eq	4b78 <d_print_function_type.isra.0+0x9c>  // b.none
    4b6c:	mov	x0, x19
    4b70:	mov	w1, #0x20                  	// #32
    4b74:	bl	2c0 <d_append_char>
    4b78:	mov	w23, #0x1                   	// #1
    4b7c:	mov	x0, x19
    4b80:	mov	w1, #0x28                  	// #40
    4b84:	bl	2c0 <d_append_char>
    4b88:	ldr	x24, [x19, #296]
    4b8c:	str	xzr, [x19, #296]
    4b90:	mov	x2, x21
    4b94:	mov	w1, w20
    4b98:	mov	x0, x19
    4b9c:	mov	w3, #0x0                   	// #0
    4ba0:	bl	4c0c <d_print_mod_list>
    4ba4:	cbz	w23, 4bb4 <d_print_function_type.isra.0+0xd8>
    4ba8:	mov	x0, x19
    4bac:	mov	w1, #0x29                  	// #41
    4bb0:	bl	2c0 <d_append_char>
    4bb4:	mov	x0, x19
    4bb8:	mov	w1, #0x28                  	// #40
    4bbc:	bl	2c0 <d_append_char>
    4bc0:	ldr	x2, [x22]
    4bc4:	cbz	x2, 4bd4 <d_print_function_type.isra.0+0xf8>
    4bc8:	mov	w1, w20
    4bcc:	mov	x0, x19
    4bd0:	bl	4888 <d_print_comp>
    4bd4:	mov	x0, x19
    4bd8:	mov	w1, #0x29                  	// #41
    4bdc:	bl	2c0 <d_append_char>
    4be0:	mov	x2, x21
    4be4:	mov	w1, w20
    4be8:	mov	x0, x19
    4bec:	mov	w3, #0x1                   	// #1
    4bf0:	bl	4c0c <d_print_mod_list>
    4bf4:	ldp	x21, x22, [sp, #32]
    4bf8:	str	x24, [x19, #296]
    4bfc:	ldp	x19, x20, [sp, #16]
    4c00:	ldp	x23, x24, [sp, #48]
    4c04:	ldp	x29, x30, [sp], #64
    4c08:	ret

0000000000004c0c <d_print_mod_list>:
    4c0c:	stp	x29, x30, [sp, #-64]!
    4c10:	mov	x29, sp
    4c14:	stp	x19, x20, [sp, #16]
    4c18:	mov	x19, x0
    4c1c:	mov	x20, x2
    4c20:	stp	x21, x22, [sp, #32]
    4c24:	mov	w21, w1
    4c28:	stp	x23, x24, [sp, #48]
    4c2c:	mov	w23, w3
    4c30:	mov	w24, #0x1                   	// #1
    4c34:	cbz	x20, 4c98 <d_print_mod_list+0x8c>
    4c38:	ldr	w0, [x19, #304]
    4c3c:	cbnz	w0, 4c98 <d_print_mod_list+0x8c>
    4c40:	ldr	w0, [x20, #16]
    4c44:	cbnz	w0, 4c60 <d_print_mod_list+0x54>
    4c48:	ldr	x2, [x20, #8]
    4c4c:	ldr	w4, [x2]
    4c50:	cbnz	w23, 4c68 <d_print_mod_list+0x5c>
    4c54:	mov	w0, w4
    4c58:	bl	0 <is_fnqual_component_type>
    4c5c:	cbz	w0, 4c68 <d_print_mod_list+0x5c>
    4c60:	ldr	x20, [x20]
    4c64:	b	4c34 <d_print_mod_list+0x28>
    4c68:	ldr	x0, [x20, #24]
    4c6c:	cmp	w4, #0x29
    4c70:	ldr	x22, [x19, #288]
    4c74:	str	w24, [x20, #16]
    4c78:	str	x0, [x19, #288]
    4c7c:	b.ne	4cac <d_print_mod_list+0xa0>  // b.any
    4c80:	ldr	x3, [x20]
    4c84:	add	x2, x2, #0x10
    4c88:	mov	w1, w21
    4c8c:	mov	x0, x19
    4c90:	bl	4adc <d_print_function_type.isra.0>
    4c94:	str	x22, [x19, #288]
    4c98:	ldp	x19, x20, [sp, #16]
    4c9c:	ldp	x21, x22, [sp, #32]
    4ca0:	ldp	x23, x24, [sp, #48]
    4ca4:	ldp	x29, x30, [sp], #64
    4ca8:	ret
    4cac:	cmp	w4, #0x2a
    4cb0:	b.ne	4ccc <d_print_mod_list+0xc0>  // b.any
    4cb4:	ldr	x3, [x20]
    4cb8:	add	x2, x2, #0x8
    4cbc:	mov	w1, w21
    4cc0:	mov	x0, x19
    4cc4:	bl	4d90 <d_print_array_type.isra.0>
    4cc8:	b	4c94 <d_print_mod_list+0x88>
    4ccc:	cmp	w4, #0x2
    4cd0:	b.ne	4d7c <d_print_mod_list+0x170>  // b.any
    4cd4:	ldr	x2, [x2, #8]
    4cd8:	mov	w1, w21
    4cdc:	ldr	x23, [x19, #296]
    4ce0:	str	xzr, [x19, #296]
    4ce4:	mov	x0, x19
    4ce8:	bl	4888 <d_print_comp>
    4cec:	str	x23, [x19, #296]
    4cf0:	tbnz	w21, #2, 4d6c <d_print_mod_list+0x160>
    4cf4:	adrp	x1, 0 <is_fnqual_component_type>
    4cf8:	mov	x0, x19
    4cfc:	add	x1, x1, #0x0
    4d00:	bl	378 <d_append_string>
    4d04:	ldr	x0, [x20, #8]
    4d08:	ldr	x20, [x0, #16]
    4d0c:	ldr	w0, [x20]
    4d10:	cmp	w0, #0x47
    4d14:	b.ne	4d4c <d_print_mod_list+0x140>  // b.any
    4d18:	mov	x0, x19
    4d1c:	adrp	x1, 0 <is_fnqual_component_type>
    4d20:	add	x1, x1, #0x0
    4d24:	bl	378 <d_append_string>
    4d28:	ldr	w1, [x20, #16]
    4d2c:	mov	x0, x19
    4d30:	add	w1, w1, #0x1
    4d34:	bl	3ac <d_append_num>
    4d38:	adrp	x1, 0 <is_fnqual_component_type>
    4d3c:	mov	x0, x19
    4d40:	add	x1, x1, #0x0
    4d44:	bl	378 <d_append_string>
    4d48:	ldr	x20, [x20, #8]
    4d4c:	ldr	w0, [x20]
    4d50:	bl	0 <is_fnqual_component_type>
    4d54:	cbnz	w0, 4d48 <d_print_mod_list+0x13c>
    4d58:	mov	x2, x20
    4d5c:	mov	w1, w21
    4d60:	mov	x0, x19
    4d64:	bl	4888 <d_print_comp>
    4d68:	b	4c94 <d_print_mod_list+0x88>
    4d6c:	mov	x0, x19
    4d70:	mov	w1, #0x2e                  	// #46
    4d74:	bl	2c0 <d_append_char>
    4d78:	b	4d04 <d_print_mod_list+0xf8>
    4d7c:	mov	w1, w21
    4d80:	mov	x0, x19
    4d84:	bl	4914 <d_print_mod>
    4d88:	str	x22, [x19, #288]
    4d8c:	b	4c60 <d_print_mod_list+0x54>

0000000000004d90 <d_print_array_type.isra.0>:
    4d90:	stp	x29, x30, [sp, #-64]!
    4d94:	mov	x29, sp
    4d98:	stp	x19, x20, [sp, #16]
    4d9c:	mov	x19, x0
    4da0:	stp	x21, x22, [sp, #32]
    4da4:	mov	w21, w1
    4da8:	stp	x23, x24, [sp, #48]
    4dac:	mov	x24, x2
    4db0:	cbnz	x3, 4dfc <d_print_array_type.isra.0+0x6c>
    4db4:	mov	x0, x19
    4db8:	mov	w1, #0x20                  	// #32
    4dbc:	bl	2c0 <d_append_char>
    4dc0:	mov	x0, x19
    4dc4:	mov	w1, #0x5b                  	// #91
    4dc8:	bl	2c0 <d_append_char>
    4dcc:	ldr	x2, [x24]
    4dd0:	cbz	x2, 4de0 <d_print_array_type.isra.0+0x50>
    4dd4:	mov	w1, w21
    4dd8:	mov	x0, x19
    4ddc:	bl	4888 <d_print_comp>
    4de0:	mov	x0, x19
    4de4:	mov	w1, #0x5d                  	// #93
    4de8:	ldp	x19, x20, [sp, #16]
    4dec:	ldp	x21, x22, [sp, #32]
    4df0:	ldp	x23, x24, [sp, #48]
    4df4:	ldp	x29, x30, [sp], #64
    4df8:	b	2c0 <d_append_char>
    4dfc:	mov	x20, x3
    4e00:	mov	x0, x3
    4e04:	ldr	w22, [x0, #16]
    4e08:	cbnz	w22, 4e34 <d_print_array_type.isra.0+0xa4>
    4e0c:	ldr	x0, [x0, #8]
    4e10:	ldr	w0, [x0]
    4e14:	cmp	w0, #0x2a
    4e18:	b.eq	4e70 <d_print_array_type.isra.0+0xe0>  // b.none
    4e1c:	mov	x0, x19
    4e20:	adrp	x1, 0 <is_fnqual_component_type>
    4e24:	mov	w23, #0x1                   	// #1
    4e28:	add	x1, x1, #0x0
    4e2c:	bl	378 <d_append_string>
    4e30:	b	4e40 <d_print_array_type.isra.0+0xb0>
    4e34:	ldr	x0, [x0]
    4e38:	cbnz	x0, 4e04 <d_print_array_type.isra.0+0x74>
    4e3c:	mov	w23, #0x0                   	// #0
    4e40:	mov	w22, #0x1                   	// #1
    4e44:	mov	x2, x20
    4e48:	mov	w1, w21
    4e4c:	mov	x0, x19
    4e50:	mov	w3, #0x0                   	// #0
    4e54:	bl	4c0c <d_print_mod_list>
    4e58:	cbz	w23, 4e68 <d_print_array_type.isra.0+0xd8>
    4e5c:	mov	x0, x19
    4e60:	mov	w1, #0x29                  	// #41
    4e64:	bl	2c0 <d_append_char>
    4e68:	cbnz	w22, 4db4 <d_print_array_type.isra.0+0x24>
    4e6c:	b	4dc0 <d_print_array_type.isra.0+0x30>
    4e70:	mov	w23, #0x0                   	// #0
    4e74:	b	4e44 <d_print_array_type.isra.0+0xb4>

0000000000004e78 <d_print_expr_op>:
    4e78:	ldr	w4, [x2]
    4e7c:	cmp	w4, #0x32
    4e80:	b.ne	4e94 <d_print_expr_op+0x1c>  // b.any
    4e84:	ldr	x1, [x2, #8]
    4e88:	ldrsw	x2, [x1, #16]
    4e8c:	ldr	x1, [x1, #8]
    4e90:	b	304 <d_append_buffer>
    4e94:	b	4888 <d_print_comp>

0000000000004e98 <d_print_subexpr>:
    4e98:	stp	x29, x30, [sp, #-48]!
    4e9c:	mov	x29, sp
    4ea0:	stp	x19, x20, [sp, #16]
    4ea4:	mov	x19, x0
    4ea8:	mov	x20, x2
    4eac:	stp	x21, x22, [sp, #32]
    4eb0:	mov	w21, w1
    4eb4:	ldr	w1, [x2]
    4eb8:	cmp	w1, #0x31
    4ebc:	b.hi	4ed0 <d_print_subexpr+0x38>  // b.pmore
    4ec0:	mov	x0, #0x43                  	// #67
    4ec4:	movk	x0, #0x2, lsl #48
    4ec8:	lsr	x0, x0, x1
    4ecc:	tbnz	w0, #0, 4f0c <d_print_subexpr+0x74>
    4ed0:	mov	w22, #0x0                   	// #0
    4ed4:	mov	x0, x19
    4ed8:	mov	w1, #0x28                  	// #40
    4edc:	bl	2c0 <d_append_char>
    4ee0:	mov	x2, x20
    4ee4:	mov	w1, w21
    4ee8:	mov	x0, x19
    4eec:	bl	4888 <d_print_comp>
    4ef0:	cbnz	w22, 4f14 <d_print_subexpr+0x7c>
    4ef4:	mov	x0, x19
    4ef8:	mov	w1, #0x29                  	// #41
    4efc:	ldp	x19, x20, [sp, #16]
    4f00:	ldp	x21, x22, [sp, #32]
    4f04:	ldp	x29, x30, [sp], #48
    4f08:	b	2c0 <d_append_char>
    4f0c:	mov	w22, #0x1                   	// #1
    4f10:	b	4ee0 <d_print_subexpr+0x48>
    4f14:	ldp	x19, x20, [sp, #16]
    4f18:	ldp	x21, x22, [sp, #32]
    4f1c:	ldp	x29, x30, [sp], #48
    4f20:	ret

0000000000004f24 <d_maybe_print_fold_expression>:
    4f24:	stp	x29, x30, [sp, #-64]!
    4f28:	mov	x29, sp
    4f2c:	stp	x19, x20, [sp, #16]
    4f30:	mov	x19, x0
    4f34:	mov	w20, w1
    4f38:	ldr	x0, [x2, #8]
    4f3c:	stp	x21, x22, [sp, #32]
    4f40:	stp	x23, x24, [sp, #48]
    4f44:	ldr	x0, [x0, #8]
    4f48:	ldr	x0, [x0]
    4f4c:	ldrb	w1, [x0]
    4f50:	cmp	w1, #0x66
    4f54:	b.ne	50a0 <d_maybe_print_fold_expression+0x17c>  // b.any
    4f58:	ldr	x1, [x2, #16]
    4f5c:	ldp	x22, x21, [x1, #8]
    4f60:	ldr	w1, [x21]
    4f64:	cmp	w1, #0x3c
    4f68:	b.ne	4fbc <d_maybe_print_fold_expression+0x98>  // b.any
    4f6c:	ldr	x23, [x21, #16]
    4f70:	ldr	x21, [x21, #8]
    4f74:	mov	w1, #0xffffffff            	// #-1
    4f78:	ldr	w24, [x19, #316]
    4f7c:	str	w1, [x19, #316]
    4f80:	ldrb	w0, [x0, #1]
    4f84:	cmp	w0, #0x6c
    4f88:	b.eq	500c <d_maybe_print_fold_expression+0xe8>  // b.none
    4f8c:	b.hi	4fc4 <d_maybe_print_fold_expression+0xa0>  // b.pmore
    4f90:	cmp	w0, #0x4c
    4f94:	b.eq	504c <d_maybe_print_fold_expression+0x128>  // b.none
    4f98:	cmp	w0, #0x52
    4f9c:	b.eq	504c <d_maybe_print_fold_expression+0x128>  // b.none
    4fa0:	mov	w0, #0x1                   	// #1
    4fa4:	str	w24, [x19, #316]
    4fa8:	ldp	x19, x20, [sp, #16]
    4fac:	ldp	x21, x22, [sp, #32]
    4fb0:	ldp	x23, x24, [sp, #48]
    4fb4:	ldp	x29, x30, [sp], #64
    4fb8:	ret
    4fbc:	mov	x23, #0x0                   	// #0
    4fc0:	b	4f74 <d_maybe_print_fold_expression+0x50>
    4fc4:	cmp	w0, #0x72
    4fc8:	b.ne	4fa0 <d_maybe_print_fold_expression+0x7c>  // b.any
    4fcc:	mov	x0, x19
    4fd0:	mov	w1, #0x28                  	// #40
    4fd4:	bl	2c0 <d_append_char>
    4fd8:	mov	x2, x21
    4fdc:	mov	w1, w20
    4fe0:	mov	x0, x19
    4fe4:	bl	4e98 <d_print_subexpr>
    4fe8:	mov	x2, x22
    4fec:	mov	w1, w20
    4ff0:	mov	x0, x19
    4ff4:	bl	4e78 <d_print_expr_op>
    4ff8:	mov	x0, x19
    4ffc:	adrp	x1, 0 <is_fnqual_component_type>
    5000:	add	x1, x1, #0x0
    5004:	bl	378 <d_append_string>
    5008:	b	4fa0 <d_maybe_print_fold_expression+0x7c>
    500c:	mov	x0, x19
    5010:	adrp	x1, 0 <is_fnqual_component_type>
    5014:	add	x1, x1, #0x0
    5018:	bl	378 <d_append_string>
    501c:	mov	x2, x22
    5020:	mov	w1, w20
    5024:	mov	x0, x19
    5028:	bl	4e78 <d_print_expr_op>
    502c:	mov	x2, x21
    5030:	mov	w1, w20
    5034:	mov	x0, x19
    5038:	bl	4e98 <d_print_subexpr>
    503c:	mov	x0, x19
    5040:	mov	w1, #0x29                  	// #41
    5044:	bl	2c0 <d_append_char>
    5048:	b	4fa0 <d_maybe_print_fold_expression+0x7c>
    504c:	mov	x0, x19
    5050:	mov	w1, #0x28                  	// #40
    5054:	bl	2c0 <d_append_char>
    5058:	mov	x2, x21
    505c:	mov	w1, w20
    5060:	mov	x0, x19
    5064:	bl	4e98 <d_print_subexpr>
    5068:	mov	x2, x22
    506c:	mov	w1, w20
    5070:	mov	x0, x19
    5074:	bl	4e78 <d_print_expr_op>
    5078:	mov	x0, x19
    507c:	adrp	x1, 0 <is_fnqual_component_type>
    5080:	add	x1, x1, #0x0
    5084:	bl	378 <d_append_string>
    5088:	mov	x2, x22
    508c:	mov	w1, w20
    5090:	mov	x0, x19
    5094:	bl	4e78 <d_print_expr_op>
    5098:	mov	x2, x23
    509c:	b	5030 <d_maybe_print_fold_expression+0x10c>
    50a0:	mov	w0, #0x0                   	// #0
    50a4:	b	4fa8 <d_maybe_print_fold_expression+0x84>

00000000000050a8 <d_demangle_callback.constprop.0>:
    50a8:	sub	sp, sp, #0x220
    50ac:	stp	x29, x30, [sp]
    50b0:	mov	x29, sp
    50b4:	stp	x19, x20, [sp, #16]
    50b8:	mov	x19, x0
    50bc:	stp	x21, x22, [sp, #32]
    50c0:	mov	x22, x1
    50c4:	mov	x21, x2
    50c8:	stp	x23, x24, [sp, #48]
    50cc:	str	x25, [sp, #64]
    50d0:	ldrb	w24, [x0]
    50d4:	cmp	w24, #0x5f
    50d8:	b.ne	50e8 <d_demangle_callback.constprop.0+0x40>  // b.any
    50dc:	ldrb	w0, [x0, #1]
    50e0:	cmp	w0, #0x5a
    50e4:	b.eq	5238 <d_demangle_callback.constprop.0+0x190>  // b.none
    50e8:	adrp	x1, 0 <is_fnqual_component_type>
    50ec:	mov	x0, x19
    50f0:	add	x1, x1, #0x0
    50f4:	mov	x2, #0x8                   	// #8
    50f8:	bl	0 <strncmp>
    50fc:	cbnz	w0, 5240 <d_demangle_callback.constprop.0+0x198>
    5100:	ldrb	w0, [x19, #8]
    5104:	sub	w0, w0, #0x24
    5108:	and	w0, w0, #0xff
    510c:	cmp	w0, #0x3b
    5110:	b.hi	5240 <d_demangle_callback.constprop.0+0x198>  // b.pmore
    5114:	mov	x1, #0x401                 	// #1025
    5118:	movk	x1, #0x800, lsl #48
    511c:	lsr	x0, x1, x0
    5120:	tbz	w0, #0, 5240 <d_demangle_callback.constprop.0+0x198>
    5124:	ldrb	w0, [x19, #9]
    5128:	mov	w1, #0x49                  	// #73
    512c:	cmp	w0, #0x44
    5130:	ccmp	w0, w1, #0x4, ne  // ne = any
    5134:	b.ne	5240 <d_demangle_callback.constprop.0+0x198>  // b.any
    5138:	ldrb	w1, [x19, #10]
    513c:	cmp	w1, #0x5f
    5140:	b.ne	5240 <d_demangle_callback.constprop.0+0x198>  // b.any
    5144:	cmp	w0, #0x49
    5148:	cset	w20, ne  // ne = any
    514c:	add	w20, w20, #0x2
    5150:	mov	x0, x19
    5154:	bl	0 <strlen>
    5158:	add	x1, x19, x0
    515c:	stp	x19, x1, [x29, #80]
    5160:	mov	w1, #0x11                  	// #17
    5164:	str	w1, [x29, #96]
    5168:	lsl	w1, w0, #1
    516c:	str	x19, [x29, #104]
    5170:	cmp	w1, #0x800
    5174:	str	wzr, [x29, #120]
    5178:	str	w1, [x29, #124]
    517c:	stp	wzr, w0, [x29, #136]
    5180:	stp	xzr, xzr, [x29, #144]
    5184:	str	xzr, [x29, #160]
    5188:	b.hi	547c <d_demangle_callback.constprop.0+0x3d4>  // b.pmore
    518c:	mov	x23, sp
    5190:	mov	w2, #0x18                  	// #24
    5194:	sbfiz	x0, x0, #3, #32
    5198:	cmp	w20, #0x1
    519c:	add	x0, x0, #0xf
    51a0:	smsubl	x1, w1, w2, x23
    51a4:	and	x0, x0, #0xfffffffffffffff0
    51a8:	str	x1, [x29, #112]
    51ac:	mov	sp, x1
    51b0:	sub	sp, sp, x0
    51b4:	mov	x0, sp
    51b8:	str	x0, [x29, #128]
    51bc:	b.eq	5338 <d_demangle_callback.constprop.0+0x290>  // b.none
    51c0:	sub	w0, w20, #0x2
    51c4:	add	x24, x29, #0x50
    51c8:	cmp	w0, #0x1
    51cc:	b.hi	5248 <d_demangle_callback.constprop.0+0x1a0>  // b.pmore
    51d0:	cmp	w20, #0x2
    51d4:	ldrb	w0, [x19, #11]
    51d8:	add	x25, x19, #0xb
    51dc:	str	x25, [x29, #104]
    51e0:	cset	w20, ne  // ne = any
    51e4:	cmp	w0, #0x5f
    51e8:	add	w20, w20, #0x44
    51ec:	b.eq	5450 <d_demangle_callback.constprop.0+0x3a8>  // b.none
    51f0:	mov	x0, x25
    51f4:	bl	0 <strlen>
    51f8:	mov	x1, x25
    51fc:	mov	w2, w0
    5200:	mov	x0, x24
    5204:	bl	d4 <d_make_name>
    5208:	mov	x2, x0
    520c:	mov	w1, w20
    5210:	mov	x3, #0x0                   	// #0
    5214:	mov	x0, x24
    5218:	bl	64 <d_make_comp>
    521c:	mov	x19, x0
    5220:	ldr	x20, [x29, #104]
    5224:	mov	x0, x20
    5228:	bl	0 <strlen>
    522c:	add	x20, x20, x0
    5230:	str	x20, [x29, #104]
    5234:	b	5254 <d_demangle_callback.constprop.0+0x1ac>
    5238:	mov	w20, #0x1                   	// #1
    523c:	b	5150 <d_demangle_callback.constprop.0+0xa8>
    5240:	mov	w20, #0x0                   	// #0
    5244:	b	5150 <d_demangle_callback.constprop.0+0xa8>
    5248:	mov	x0, x24
    524c:	bl	14cc <d_type>
    5250:	mov	x19, x0
    5254:	ldr	x0, [x29, #104]
    5258:	ldrb	w0, [x0]
    525c:	cbnz	w0, 5474 <d_demangle_callback.constprop.0+0x3cc>
    5260:	cbz	x19, 5474 <d_demangle_callback.constprop.0+0x3cc>
    5264:	add	x20, x29, #0xa8
    5268:	mov	x1, x19
    526c:	mov	x0, x20
    5270:	str	xzr, [x29, #424]
    5274:	strb	wzr, [x29, #432]
    5278:	stp	x22, x21, [x29, #440]
    527c:	stp	xzr, xzr, [x29, #456]
    5280:	stp	xzr, xzr, [x29, #472]
    5284:	stp	xzr, xzr, [x29, #488]
    5288:	stp	xzr, xzr, [x29, #504]
    528c:	str	xzr, [x29, #520]
    5290:	str	xzr, [x29, #528]
    5294:	bl	1c4 <d_count_templates_scopes>
    5298:	ldr	w0, [x29, #476]
    529c:	cmp	w0, #0x7ff
    52a0:	b.gt	52a8 <d_demangle_callback.constprop.0+0x200>
    52a4:	str	wzr, [x29, #476]
    52a8:	ldr	w2, [x29, #516]
    52ac:	mov	w0, #0x1                   	// #1
    52b0:	ldr	w1, [x29, #532]
    52b4:	mov	x21, sp
    52b8:	cmp	w2, #0x0
    52bc:	str	xzr, [x29, #536]
    52c0:	mul	w1, w2, w1
    52c4:	csel	w2, w2, w0, gt
    52c8:	str	w1, [x29, #532]
    52cc:	cmp	w1, #0x0
    52d0:	sub	sp, sp, w2, sxtw #4
    52d4:	csel	w1, w1, w0, gt
    52d8:	mov	x2, sp
    52dc:	str	x2, [x29, #504]
    52e0:	mov	x2, x19
    52e4:	sub	sp, sp, w1, sxtw #4
    52e8:	mov	w1, #0x11                  	// #17
    52ec:	mov	x0, sp
    52f0:	str	x0, [x29, #520]
    52f4:	mov	x0, x20
    52f8:	bl	4888 <d_print_comp>
    52fc:	mov	x0, x20
    5300:	mov	sp, x21
    5304:	bl	284 <d_print_flush>
    5308:	ldr	w0, [x29, #472]
    530c:	cmp	w0, #0x0
    5310:	cset	w0, eq  // eq = none
    5314:	mov	sp, x23
    5318:	mov	sp, x29
    531c:	ldp	x29, x30, [sp]
    5320:	ldp	x19, x20, [sp, #16]
    5324:	ldp	x21, x22, [sp, #32]
    5328:	ldp	x23, x24, [sp, #48]
    532c:	ldr	x25, [sp, #64]
    5330:	add	sp, sp, #0x220
    5334:	ret
    5338:	cmp	w24, #0x5f
    533c:	b.eq	5348 <d_demangle_callback.constprop.0+0x2a0>  // b.none
    5340:	mov	x19, #0x0                   	// #0
    5344:	b	5254 <d_demangle_callback.constprop.0+0x1ac>
    5348:	add	x0, x19, #0x1
    534c:	str	x0, [x29, #104]
    5350:	ldrb	w0, [x19, #1]
    5354:	cmp	w0, #0x5a
    5358:	b.ne	5340 <d_demangle_callback.constprop.0+0x298>  // b.any
    535c:	add	x24, x29, #0x50
    5360:	add	x19, x19, #0x2
    5364:	mov	w1, w20
    5368:	mov	x0, x24
    536c:	str	x19, [x29, #104]
    5370:	bl	2a90 <d_encoding>
    5374:	mov	x19, x0
    5378:	ldr	w0, [x29, #96]
    537c:	tbz	w0, #0, 5254 <d_demangle_callback.constprop.0+0x1ac>
    5380:	ldr	x1, [x29, #104]
    5384:	ldrb	w0, [x1]
    5388:	cmp	w0, #0x2e
    538c:	b.ne	5254 <d_demangle_callback.constprop.0+0x1ac>  // b.any
    5390:	ldrb	w0, [x1, #1]
    5394:	sub	w2, w0, #0x61
    5398:	cmp	w0, #0x5f
    539c:	and	w2, w2, #0xff
    53a0:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    53a4:	b.ls	53c0 <d_demangle_callback.constprop.0+0x318>  // b.plast
    53a8:	sub	w0, w0, #0x30
    53ac:	and	w0, w0, #0xff
    53b0:	cmp	w0, #0x9
    53b4:	b.hi	5254 <d_demangle_callback.constprop.0+0x1ac>  // b.pmore
    53b8:	mov	x0, x1
    53bc:	b	53dc <d_demangle_callback.constprop.0+0x334>
    53c0:	add	x0, x1, #0x2
    53c4:	ldrb	w3, [x0]
    53c8:	sub	w2, w3, #0x61
    53cc:	cmp	w3, #0x5f
    53d0:	and	w2, w2, #0xff
    53d4:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    53d8:	b.ls	5428 <d_demangle_callback.constprop.0+0x380>  // b.plast
    53dc:	ldrb	w2, [x0]
    53e0:	cmp	w2, #0x2e
    53e4:	b.ne	53fc <d_demangle_callback.constprop.0+0x354>  // b.any
    53e8:	ldrb	w2, [x0, #1]
    53ec:	sub	w2, w2, #0x30
    53f0:	and	w2, w2, #0xff
    53f4:	cmp	w2, #0x9
    53f8:	b.ls	5430 <d_demangle_callback.constprop.0+0x388>  // b.plast
    53fc:	sub	w2, w0, w1
    5400:	str	x0, [x29, #104]
    5404:	mov	x0, x24
    5408:	bl	d4 <d_make_name>
    540c:	mov	x2, x19
    5410:	mov	x3, x0
    5414:	mov	w1, #0x4e                  	// #78
    5418:	mov	x0, x24
    541c:	bl	64 <d_make_comp>
    5420:	mov	x19, x0
    5424:	b	5380 <d_demangle_callback.constprop.0+0x2d8>
    5428:	add	x0, x0, #0x1
    542c:	b	53c4 <d_demangle_callback.constprop.0+0x31c>
    5430:	add	x0, x0, #0x2
    5434:	ldrb	w2, [x0]
    5438:	sub	w2, w2, #0x30
    543c:	and	w2, w2, #0xff
    5440:	cmp	w2, #0x9
    5444:	b.hi	53dc <d_demangle_callback.constprop.0+0x334>  // b.pmore
    5448:	add	x0, x0, #0x1
    544c:	b	5434 <d_demangle_callback.constprop.0+0x38c>
    5450:	ldrb	w0, [x19, #12]
    5454:	cmp	w0, #0x5a
    5458:	b.ne	51f0 <d_demangle_callback.constprop.0+0x148>  // b.any
    545c:	add	x19, x19, #0xd
    5460:	mov	x0, x24
    5464:	mov	w1, #0x0                   	// #0
    5468:	str	x19, [x29, #104]
    546c:	bl	2a90 <d_encoding>
    5470:	b	5208 <d_demangle_callback.constprop.0+0x160>
    5474:	mov	w0, #0x0                   	// #0
    5478:	b	5314 <d_demangle_callback.constprop.0+0x26c>
    547c:	mov	w0, #0x0                   	// #0
    5480:	b	5318 <d_demangle_callback.constprop.0+0x270>

0000000000005484 <__cxa_demangle>:
    5484:	stp	x29, x30, [sp, #-96]!
    5488:	mov	x29, sp
    548c:	stp	x19, x20, [sp, #16]
    5490:	mov	x19, x3
    5494:	stp	x21, x22, [sp, #32]
    5498:	str	x23, [sp, #48]
    549c:	cbnz	x0, 54cc <__cxa_demangle+0x48>
    54a0:	cbnz	x19, 54c0 <__cxa_demangle+0x3c>
    54a4:	mov	x20, #0x0                   	// #0
    54a8:	mov	x0, x20
    54ac:	ldp	x19, x20, [sp, #16]
    54b0:	ldp	x21, x22, [sp, #32]
    54b4:	ldr	x23, [sp, #48]
    54b8:	ldp	x29, x30, [sp], #96
    54bc:	ret
    54c0:	mov	w0, #0xfffffffd            	// #-3
    54c4:	str	w0, [x19]
    54c8:	b	54a4 <__cxa_demangle+0x20>
    54cc:	cmp	x1, #0x0
    54d0:	mov	x22, x1
    54d4:	mov	x21, x2
    54d8:	ccmp	x2, #0x0, #0x0, ne  // ne = any
    54dc:	b.eq	54a0 <__cxa_demangle+0x1c>  // b.none
    54e0:	adrp	x1, 0 <is_fnqual_component_type>
    54e4:	add	x2, sp, #0x40
    54e8:	add	x1, x1, #0x0
    54ec:	stp	xzr, xzr, [sp, #64]
    54f0:	str	xzr, [sp, #80]
    54f4:	str	wzr, [sp, #88]
    54f8:	bl	50a8 <d_demangle_callback.constprop.0>
    54fc:	cbnz	w0, 5514 <__cxa_demangle+0x90>
    5500:	ldr	x0, [sp, #64]
    5504:	bl	0 <free>
    5508:	cbz	x19, 54a4 <__cxa_demangle+0x20>
    550c:	mov	w0, #0xfffffffe            	// #-2
    5510:	b	54c4 <__cxa_demangle+0x40>
    5514:	ldr	x20, [sp, #64]
    5518:	ldr	w0, [sp, #88]
    551c:	ldr	x23, [sp, #80]
    5520:	cmp	w0, #0x0
    5524:	csinc	x23, x23, xzr, eq  // eq = none
    5528:	cbnz	x20, 5544 <__cxa_demangle+0xc0>
    552c:	cbz	x19, 54a4 <__cxa_demangle+0x20>
    5530:	cmp	x23, #0x1
    5534:	b.ne	550c <__cxa_demangle+0x88>  // b.any
    5538:	mov	w0, #0xffffffff            	// #-1
    553c:	str	w0, [x19]
    5540:	b	54a8 <__cxa_demangle+0x24>
    5544:	cbnz	x22, 5554 <__cxa_demangle+0xd0>
    5548:	cbz	x21, 5580 <__cxa_demangle+0xfc>
    554c:	str	x23, [x21]
    5550:	b	5580 <__cxa_demangle+0xfc>
    5554:	mov	x0, x20
    5558:	bl	0 <strlen>
    555c:	ldr	x1, [x21]
    5560:	cmp	x0, x1
    5564:	b.cs	558c <__cxa_demangle+0x108>  // b.hs, b.nlast
    5568:	mov	x1, x20
    556c:	mov	x0, x22
    5570:	bl	0 <strcpy>
    5574:	mov	x0, x20
    5578:	mov	x20, x22
    557c:	bl	0 <free>
    5580:	cbz	x19, 54a8 <__cxa_demangle+0x24>
    5584:	str	wzr, [x19]
    5588:	b	54a8 <__cxa_demangle+0x24>
    558c:	mov	x0, x22
    5590:	bl	0 <free>
    5594:	b	554c <__cxa_demangle+0xc8>

0000000000005598 <__gcclibcxx_demangle_callback>:
    5598:	cmp	x0, #0x0
    559c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    55a0:	b.eq	55c4 <__gcclibcxx_demangle_callback+0x2c>  // b.none
    55a4:	stp	x29, x30, [sp, #-16]!
    55a8:	mov	x29, sp
    55ac:	bl	50a8 <d_demangle_callback.constprop.0>
    55b0:	cmp	w0, #0x0
    55b4:	ldp	x29, x30, [sp], #16
    55b8:	mov	w0, #0xfffffffe            	// #-2
    55bc:	csel	w0, wzr, w0, ne  // ne = any
    55c0:	ret
    55c4:	mov	w0, #0xfffffffd            	// #-3
    55c8:	ret
