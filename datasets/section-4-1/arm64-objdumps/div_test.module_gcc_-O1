
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//div_test.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <test32s>:
   0:	cbnz	w1, 8 <test32s+0x8>
   4:	ret
   8:	sub	sp, sp, #0x60
   c:	stp	x29, x30, [sp, #16]
  10:	add	x29, sp, #0x10
  14:	stp	x19, x20, [sp, #32]
  18:	stp	x21, x22, [sp, #48]
  1c:	stp	x23, x24, [sp, #64]
  20:	mov	w20, w0
  24:	mov	w19, w1
  28:	sxtw	x23, w0
  2c:	sxtw	x22, w1
  30:	add	x2, sp, #0x58
  34:	mov	x1, x22
  38:	mov	x0, x23
  3c:	bl	0 <grub_divmod64s>
  40:	mov	x21, x0
  44:	cmp	w20, #0x0
  48:	b.le	18c <test32s+0x18c>
  4c:	ldr	x1, [sp, #88]
  50:	mvn	x1, x1
  54:	lsr	x0, x1, #63
  58:	ldr	x1, [sp, #88]
  5c:	str	x1, [sp]
  60:	mov	x7, x22
  64:	mov	x6, x23
  68:	adrp	x1, 0 <test32s>
  6c:	ldr	x5, [x1]
  70:	adrp	x1, 0 <test32s>
  74:	ldr	x4, [x1]
  78:	mov	w3, #0x72                  	// #114
  7c:	adrp	x1, 0 <test32s>
  80:	ldr	x2, [x1]
  84:	adrp	x1, 0 <test32s>
  88:	ldr	x1, [x1]
  8c:	bl	0 <grub_test_assert_helper>
  90:	cmp	w20, #0x0
  94:	cset	w1, le
  98:	cmp	w19, #0x0
  9c:	cset	w0, gt
  a0:	cmp	w0, w1, uxtb
  a4:	b.eq	19c <test32s+0x19c>  // b.none
  a8:	mvn	x0, x21
  ac:	lsr	x0, x0, #63
  b0:	adrp	x1, 0 <test32s>
  b4:	ldr	x24, [x1]
  b8:	adrp	x1, 0 <test32s>
  bc:	ldr	x20, [x1]
  c0:	str	x21, [sp]
  c4:	mov	x7, x22
  c8:	mov	x6, x23
  cc:	adrp	x1, 0 <test32s>
  d0:	ldr	x5, [x1]
  d4:	adrp	x1, 0 <test32s>
  d8:	ldr	x4, [x1]
  dc:	mov	w3, #0x74                  	// #116
  e0:	mov	x2, x24
  e4:	mov	x1, x20
  e8:	bl	0 <grub_test_assert_helper>
  ec:	ldr	x1, [sp, #88]
  f0:	cmp	w19, #0x0
  f4:	cneg	w19, w19, lt  // lt = tstop
  f8:	cmp	x1, #0x0
  fc:	cneg	x0, x1, lt  // lt = tstop
 100:	cmp	x19, x0
 104:	str	x1, [sp]
 108:	mov	x7, x22
 10c:	mov	x6, x23
 110:	adrp	x0, 0 <test32s>
 114:	ldr	x5, [x0]
 118:	adrp	x0, 0 <test32s>
 11c:	ldr	x4, [x0]
 120:	mov	w3, #0x76                  	// #118
 124:	mov	x2, x24
 128:	mov	x1, x20
 12c:	cset	w0, gt
 130:	bl	0 <grub_test_assert_helper>
 134:	ldr	x0, [sp, #88]
 138:	madd	x1, x22, x21, x0
 13c:	cmp	x1, x23
 140:	str	x23, [sp, #8]
 144:	str	x0, [sp]
 148:	mov	x7, x22
 14c:	mov	x6, x21
 150:	adrp	x0, 0 <test32s>
 154:	ldr	x5, [x0]
 158:	adrp	x0, 0 <test32s>
 15c:	ldr	x4, [x0]
 160:	mov	w3, #0x78                  	// #120
 164:	mov	x2, x24
 168:	mov	x1, x20
 16c:	cset	w0, eq  // eq = none
 170:	bl	0 <grub_test_assert_helper>
 174:	ldp	x19, x20, [sp, #32]
 178:	ldp	x21, x22, [sp, #48]
 17c:	ldp	x23, x24, [sp, #64]
 180:	ldp	x29, x30, [sp, #16]
 184:	add	sp, sp, #0x60
 188:	ret
 18c:	ldr	x0, [sp, #88]
 190:	cmp	x0, #0x0
 194:	cset	w0, le
 198:	b	58 <test32s+0x58>
 19c:	cmp	x21, #0x0
 1a0:	cset	w0, le
 1a4:	b	b0 <test32s+0xb0>
	...

00000000000001f8 <test64s>:
 1f8:	sub	sp, sp, #0x60
 1fc:	stp	x29, x30, [sp, #16]
 200:	add	x29, sp, #0x10
 204:	stp	x19, x20, [sp, #32]
 208:	stp	x21, x22, [sp, #48]
 20c:	stp	x23, x24, [sp, #64]
 210:	mov	x20, x0
 214:	mov	x19, x1
 218:	add	x2, sp, #0x58
 21c:	bl	0 <grub_divmod64s>
 220:	mov	x22, x0
 224:	cmp	x20, #0x0
 228:	b.le	3e0 <test64s+0x1e8>
 22c:	ldr	x0, [sp, #88]
 230:	mvn	x0, x0
 234:	lsr	x0, x0, #63
 238:	adrp	x1, 0 <test32s>
 23c:	ldr	x2, [x1]
 240:	ldr	x1, [sp, #88]
 244:	str	x1, [sp]
 248:	mov	x7, x19
 24c:	mov	x6, x20
 250:	adrp	x1, 0 <test32s>
 254:	ldr	x5, [x1]
 258:	adrp	x1, 0 <test32s>
 25c:	ldr	x4, [x1]
 260:	mov	w3, #0x87                  	// #135
 264:	add	x2, x2, #0x8
 268:	adrp	x1, 0 <test32s>
 26c:	ldr	x1, [x1]
 270:	bl	0 <grub_test_assert_helper>
 274:	cmp	x20, #0x0
 278:	cset	w1, le
 27c:	cmp	x19, #0x0
 280:	cset	w0, gt
 284:	cmp	w0, w1, uxtb
 288:	b.eq	3f0 <test64s+0x1f8>  // b.none
 28c:	mvn	x0, x22
 290:	lsr	x0, x0, #63
 294:	adrp	x1, 0 <test32s>
 298:	ldr	x21, [x1]
 29c:	add	x21, x21, #0x8
 2a0:	adrp	x1, 0 <test32s>
 2a4:	ldr	x23, [x1]
 2a8:	str	x22, [sp]
 2ac:	mov	x7, x19
 2b0:	mov	x6, x20
 2b4:	adrp	x1, 0 <test32s>
 2b8:	ldr	x5, [x1]
 2bc:	adrp	x1, 0 <test32s>
 2c0:	ldr	x4, [x1]
 2c4:	mov	w3, #0x89                  	// #137
 2c8:	mov	x2, x21
 2cc:	mov	x1, x23
 2d0:	bl	0 <grub_test_assert_helper>
 2d4:	ldr	x0, [sp, #88]
 2d8:	cmp	x19, #0x0
 2dc:	cneg	x2, x19, lt  // lt = tstop
 2e0:	cmp	x0, #0x0
 2e4:	cneg	x1, x0, lt  // lt = tstop
 2e8:	cmp	x2, x1
 2ec:	str	x0, [sp]
 2f0:	mov	x7, x19
 2f4:	mov	x6, x20
 2f8:	adrp	x0, 0 <test32s>
 2fc:	ldr	x5, [x0]
 300:	adrp	x0, 0 <test32s>
 304:	ldr	x4, [x0]
 308:	mov	w3, #0x8b                  	// #139
 30c:	mov	x2, x21
 310:	mov	x1, x23
 314:	cset	w0, gt
 318:	bl	0 <grub_test_assert_helper>
 31c:	ldr	x0, [sp, #88]
 320:	madd	x1, x19, x22, x0
 324:	cmp	x1, x20
 328:	str	x20, [sp, #8]
 32c:	str	x0, [sp]
 330:	mov	x7, x19
 334:	mov	x6, x22
 338:	adrp	x0, 0 <test32s>
 33c:	ldr	x5, [x0]
 340:	adrp	x0, 0 <test32s>
 344:	ldr	x4, [x0]
 348:	mov	w3, #0x8d                  	// #141
 34c:	mov	x2, x21
 350:	mov	x1, x23
 354:	cset	w0, eq  // eq = none
 358:	bl	0 <grub_test_assert_helper>
 35c:	sdiv	x24, x20, x19
 360:	cmp	x24, x22
 364:	mov	x7, x19
 368:	mov	x6, x20
 36c:	adrp	x0, 0 <test32s>
 370:	ldr	x5, [x0]
 374:	adrp	x0, 0 <test32s>
 378:	ldr	x4, [x0]
 37c:	mov	w3, #0x90                  	// #144
 380:	mov	x2, x21
 384:	mov	x1, x23
 388:	cset	w0, eq  // eq = none
 38c:	bl	0 <grub_test_assert_helper>
 390:	msub	x24, x24, x19, x20
 394:	ldr	x0, [sp, #88]
 398:	cmp	x24, x0
 39c:	mov	x7, x19
 3a0:	mov	x6, x20
 3a4:	adrp	x0, 0 <test32s>
 3a8:	ldr	x5, [x0]
 3ac:	adrp	x0, 0 <test32s>
 3b0:	ldr	x4, [x0]
 3b4:	mov	w3, #0x92                  	// #146
 3b8:	mov	x2, x21
 3bc:	mov	x1, x23
 3c0:	cset	w0, eq  // eq = none
 3c4:	bl	0 <grub_test_assert_helper>
 3c8:	ldp	x19, x20, [sp, #32]
 3cc:	ldp	x21, x22, [sp, #48]
 3d0:	ldp	x23, x24, [sp, #64]
 3d4:	ldp	x29, x30, [sp, #16]
 3d8:	add	sp, sp, #0x60
 3dc:	ret
 3e0:	ldr	x0, [sp, #88]
 3e4:	cmp	x0, #0x0
 3e8:	cset	w0, le
 3ec:	b	238 <test64s+0x40>
 3f0:	cmp	x22, #0x0
 3f4:	cset	w0, le
 3f8:	b	294 <test64s+0x9c>
 3fc:	nop
	...

0000000000000470 <test_all>:
 470:	sub	sp, sp, #0x90
 474:	stp	x29, x30, [sp, #16]
 478:	add	x29, sp, #0x10
 47c:	stp	x19, x20, [sp, #32]
 480:	stp	x21, x22, [sp, #48]
 484:	stp	x23, x24, [sp, #64]
 488:	stp	x25, x26, [sp, #80]
 48c:	stp	x27, x28, [sp, #96]
 490:	mov	x19, x0
 494:	mov	x20, x1
 498:	add	x2, sp, #0x88
 49c:	bl	0 <grub_divmod64>
 4a0:	mov	x25, x0
 4a4:	ldr	x0, [sp, #136]
 4a8:	adrp	x1, 0 <test32s>
 4ac:	ldr	x21, [x1]
 4b0:	add	x21, x21, #0x10
 4b4:	adrp	x1, 0 <test32s>
 4b8:	ldr	x22, [x1]
 4bc:	cmp	x20, x0
 4c0:	str	x0, [sp]
 4c4:	mov	x7, x20
 4c8:	mov	x6, x19
 4cc:	adrp	x0, 0 <test32s>
 4d0:	ldr	x5, [x0]
 4d4:	adrp	x0, 0 <test32s>
 4d8:	ldr	x4, [x0]
 4dc:	mov	w3, #0x41                  	// #65
 4e0:	mov	x2, x21
 4e4:	mov	x1, x22
 4e8:	cset	w0, hi  // hi = pmore
 4ec:	bl	0 <grub_test_assert_helper>
 4f0:	ldr	x0, [sp, #136]
 4f4:	madd	x1, x20, x25, x0
 4f8:	cmp	x1, x19
 4fc:	str	x19, [sp, #8]
 500:	str	x0, [sp]
 504:	mov	x7, x20
 508:	mov	x6, x25
 50c:	adrp	x0, 0 <test32s>
 510:	ldr	x5, [x0]
 514:	adrp	x0, 0 <test32s>
 518:	ldr	x4, [x0]
 51c:	mov	w3, #0x43                  	// #67
 520:	mov	x2, x21
 524:	mov	x1, x22
 528:	cset	w0, eq  // eq = none
 52c:	bl	0 <grub_test_assert_helper>
 530:	lsr	x24, x25, #32
 534:	lsr	x23, x20, #32
 538:	adrp	x0, 0 <test32s>
 53c:	ldr	x27, [x0]
 540:	mul	x0, x24, x23
 544:	cmp	x0, #0x0
 548:	mov	x7, x20
 54c:	mov	x6, x19
 550:	mov	x5, x27
 554:	adrp	x0, 0 <test32s>
 558:	ldr	x4, [x0]
 55c:	mov	w3, #0x46                  	// #70
 560:	mov	x2, x21
 564:	mov	x1, x22
 568:	cset	w0, eq  // eq = none
 56c:	bl	0 <grub_test_assert_helper>
 570:	and	x26, x20, #0xffffffff
 574:	mul	x24, x24, x26
 578:	mov	x28, #0xffffffff            	// #4294967295
 57c:	cmp	x24, x28
 580:	mov	x7, x20
 584:	mov	x6, x19
 588:	mov	x5, x27
 58c:	adrp	x0, 0 <test32s>
 590:	ldr	x4, [x0]
 594:	mov	w3, #0x49                  	// #73
 598:	mov	x2, x21
 59c:	mov	x1, x22
 5a0:	cset	w0, ls  // ls = plast
 5a4:	bl	0 <grub_test_assert_helper>
 5a8:	lsl	x24, x24, #32
 5ac:	and	x0, x25, x28
 5b0:	str	x0, [sp, #120]
 5b4:	mul	x23, x23, x0
 5b8:	cmp	x23, x28
 5bc:	mov	x7, x20
 5c0:	mov	x6, x19
 5c4:	mov	x5, x27
 5c8:	adrp	x0, 0 <test32s>
 5cc:	ldr	x4, [x0]
 5d0:	mov	w3, #0x4d                  	// #77
 5d4:	mov	x2, x21
 5d8:	mov	x1, x22
 5dc:	cset	w0, ls  // ls = plast
 5e0:	bl	0 <grub_test_assert_helper>
 5e4:	lsl	x23, x23, #32
 5e8:	adrp	x0, 0 <test32s>
 5ec:	ldr	x28, [x0]
 5f0:	mvn	x0, x23
 5f4:	cmp	x24, x0
 5f8:	mov	x7, x20
 5fc:	mov	x6, x19
 600:	mov	x5, x27
 604:	mov	x4, x28
 608:	mov	w3, #0x50                  	// #80
 60c:	mov	x2, x21
 610:	mov	x1, x22
 614:	cset	w0, ls  // ls = plast
 618:	bl	0 <grub_test_assert_helper>
 61c:	add	x23, x24, x23
 620:	ldr	x0, [sp, #120]
 624:	mul	x24, x26, x0
 628:	mvn	x0, x24
 62c:	cmp	x23, x0
 630:	mov	x7, x20
 634:	mov	x6, x19
 638:	mov	x5, x27
 63c:	mov	x4, x28
 640:	mov	w3, #0x54                  	// #84
 644:	mov	x2, x21
 648:	mov	x1, x22
 64c:	cset	w0, ls  // ls = plast
 650:	bl	0 <grub_test_assert_helper>
 654:	add	x23, x23, x24
 658:	ldr	x0, [sp, #136]
 65c:	mvn	x0, x0
 660:	cmp	x23, x0
 664:	mov	x7, x20
 668:	mov	x6, x19
 66c:	mov	x5, x27
 670:	adrp	x0, 0 <test32s>
 674:	ldr	x4, [x0]
 678:	mov	w3, #0x57                  	// #87
 67c:	mov	x2, x21
 680:	mov	x1, x22
 684:	cset	w0, ls  // ls = plast
 688:	bl	0 <grub_test_assert_helper>
 68c:	ldr	x24, [sp, #136]
 690:	add	x23, x23, x24
 694:	cmp	x23, x19
 698:	mov	x7, x20
 69c:	mov	x6, x19
 6a0:	adrp	x0, 0 <test32s>
 6a4:	ldr	x5, [x0]
 6a8:	adrp	x0, 0 <test32s>
 6ac:	ldr	x4, [x0]
 6b0:	mov	w3, #0x5a                  	// #90
 6b4:	mov	x2, x21
 6b8:	mov	x1, x22
 6bc:	cset	w0, eq  // eq = none
 6c0:	bl	0 <grub_test_assert_helper>
 6c4:	udiv	x23, x19, x20
 6c8:	cmp	x23, x25
 6cc:	mov	x7, x20
 6d0:	mov	x6, x19
 6d4:	adrp	x0, 0 <test32s>
 6d8:	ldr	x5, [x0]
 6dc:	adrp	x0, 0 <test32s>
 6e0:	ldr	x4, [x0]
 6e4:	mov	w3, #0x5d                  	// #93
 6e8:	mov	x2, x21
 6ec:	mov	x1, x22
 6f0:	cset	w0, eq  // eq = none
 6f4:	bl	0 <grub_test_assert_helper>
 6f8:	msub	x23, x23, x20, x19
 6fc:	ldr	x0, [sp, #136]
 700:	cmp	x23, x0
 704:	mov	x7, x20
 708:	mov	x6, x19
 70c:	adrp	x0, 0 <test32s>
 710:	ldr	x5, [x0]
 714:	adrp	x0, 0 <test32s>
 718:	ldr	x4, [x0]
 71c:	mov	w3, #0x5f                  	// #95
 720:	mov	x2, x21
 724:	mov	x1, x22
 728:	cset	w0, eq  // eq = none
 72c:	bl	0 <grub_test_assert_helper>
 730:	cbnz	w20, 7c4 <test_all+0x354>
 734:	mov	x1, x20
 738:	mov	x0, x19
 73c:	bl	1f8 <test64s>
 740:	mov	w1, w20
 744:	mov	w0, w19
 748:	bl	0 <test32s>
 74c:	neg	x23, x20
 750:	mov	x1, x23
 754:	mov	x0, x19
 758:	bl	1f8 <test64s>
 75c:	neg	w21, w20
 760:	mov	w1, w21
 764:	mov	w0, w19
 768:	bl	0 <test32s>
 76c:	neg	x22, x19
 770:	mov	x1, x20
 774:	mov	x0, x22
 778:	bl	1f8 <test64s>
 77c:	neg	w19, w19
 780:	mov	w1, w20
 784:	mov	w0, w19
 788:	bl	0 <test32s>
 78c:	mov	x1, x23
 790:	mov	x0, x22
 794:	bl	1f8 <test64s>
 798:	mov	w1, w21
 79c:	mov	w0, w19
 7a0:	bl	0 <test32s>
 7a4:	ldp	x19, x20, [sp, #32]
 7a8:	ldp	x21, x22, [sp, #48]
 7ac:	ldp	x23, x24, [sp, #64]
 7b0:	ldp	x25, x26, [sp, #80]
 7b4:	ldp	x27, x28, [sp, #96]
 7b8:	ldp	x29, x30, [sp, #16]
 7bc:	add	sp, sp, #0x90
 7c0:	ret
 7c4:	and	x21, x19, #0xffffffff
 7c8:	add	x2, sp, #0x88
 7cc:	mov	x1, x26
 7d0:	mov	x0, x21
 7d4:	bl	0 <grub_divmod64>
 7d8:	mov	x24, x0
 7dc:	ldr	x0, [sp, #136]
 7e0:	adrp	x1, 0 <test32s>
 7e4:	ldr	x22, [x1]
 7e8:	add	x22, x22, #0x18
 7ec:	adrp	x1, 0 <test32s>
 7f0:	ldr	x23, [x1]
 7f4:	cmp	x0, x26
 7f8:	str	x0, [sp]
 7fc:	mov	x7, x26
 800:	mov	x6, x21
 804:	adrp	x0, 0 <test32s>
 808:	ldr	x5, [x0]
 80c:	adrp	x0, 0 <test32s>
 810:	ldr	x4, [x0]
 814:	mov	w3, #0x28                  	// #40
 818:	mov	x2, x22
 81c:	mov	x1, x23
 820:	cset	w0, cc  // cc = lo, ul, last
 824:	bl	0 <grub_test_assert_helper>
 828:	ldr	x0, [sp, #136]
 82c:	madd	x1, x24, x26, x0
 830:	cmp	x1, x21
 834:	str	x21, [sp, #8]
 838:	str	x0, [sp]
 83c:	mov	x7, x26
 840:	mov	x6, x24
 844:	adrp	x0, 0 <test32s>
 848:	ldr	x5, [x0]
 84c:	adrp	x0, 0 <test32s>
 850:	ldr	x4, [x0]
 854:	mov	w3, #0x2a                  	// #42
 858:	mov	x2, x22
 85c:	mov	x1, x23
 860:	cset	w0, eq  // eq = none
 864:	bl	0 <grub_test_assert_helper>
 868:	adrp	x0, 0 <test32s>
 86c:	ldr	x25, [x0]
 870:	cmp	xzr, x24, lsr #32
 874:	mov	x7, x26
 878:	mov	x6, x21
 87c:	mov	x5, x25
 880:	adrp	x0, 0 <test32s>
 884:	ldr	x4, [x0]
 888:	mov	w3, #0x2d                  	// #45
 88c:	mov	x2, x22
 890:	mov	x1, x23
 894:	cset	w0, eq  // eq = none
 898:	bl	0 <grub_test_assert_helper>
 89c:	ldr	w0, [sp, #140]
 8a0:	cmp	x0, #0x0
 8a4:	mov	x7, x26
 8a8:	mov	x6, x21
 8ac:	mov	x5, x25
 8b0:	adrp	x0, 0 <test32s>
 8b4:	ldr	x4, [x0]
 8b8:	mov	w3, #0x2f                  	// #47
 8bc:	mov	x2, x22
 8c0:	mov	x1, x23
 8c4:	cset	w0, eq  // eq = none
 8c8:	bl	0 <grub_test_assert_helper>
 8cc:	udiv	w25, w19, w20
 8d0:	cmp	x24, w25, uxtw
 8d4:	mov	x7, x26
 8d8:	mov	x6, x21
 8dc:	adrp	x0, 0 <test32s>
 8e0:	ldr	x5, [x0]
 8e4:	adrp	x0, 0 <test32s>
 8e8:	ldr	x4, [x0]
 8ec:	mov	w3, #0x35                  	// #53
 8f0:	mov	x2, x22
 8f4:	mov	x1, x23
 8f8:	cset	w0, eq  // eq = none
 8fc:	bl	0 <grub_test_assert_helper>
 900:	msub	w25, w25, w20, w19
 904:	ldr	x0, [sp, #136]
 908:	cmp	x25, x0
 90c:	mov	x7, x26
 910:	mov	x6, x21
 914:	adrp	x0, 0 <test32s>
 918:	ldr	x5, [x0]
 91c:	adrp	x0, 0 <test32s>
 920:	ldr	x4, [x0]
 924:	mov	w3, #0x37                  	// #55
 928:	mov	x2, x22
 92c:	mov	x1, x23
 930:	cset	w0, eq  // eq = none
 934:	bl	0 <grub_test_assert_helper>
 938:	b	734 <test_all+0x2c4>
 93c:	nop
	...

00000000000009e0 <div_test>:
 9e0:	stp	x29, x30, [sp, #-48]!
 9e4:	mov	x29, sp
 9e8:	stp	x19, x20, [sp, #16]
 9ec:	stp	x21, x22, [sp, #32]
 9f0:	mov	x1, #0x1                   	// #1
 9f4:	mov	x0, #0xffffffffffffffff    	// #-1
 9f8:	bl	470 <test_all>
 9fc:	mov	x1, #0xffffffffffffffff    	// #-1
 a00:	mov	x0, #0x1                   	// #1
 a04:	bl	470 <test_all>
 a08:	mov	x1, #0xffffffffffffffff    	// #-1
 a0c:	mov	x0, x1
 a10:	bl	470 <test_all>
 a14:	mov	x1, #0x1                   	// #1
 a18:	mov	x0, x1
 a1c:	bl	470 <test_all>
 a20:	mov	x1, #0x1                   	// #1
 a24:	mov	x0, #0x2                   	// #2
 a28:	bl	470 <test_all>
 a2c:	mov	x20, #0x9c40                	// #40000
 a30:	mov	x19, #0x7                   	// #7
 a34:	mov	x22, #0x194                 	// #404
 a38:	mov	x21, #0x1                   	// #1
 a3c:	add	x22, x22, x22, lsl #4
 a40:	add	x0, x19, x19, lsl #1
 a44:	add	x0, x19, x0, lsl #2
 a48:	add	x0, x0, x22
 a4c:	lsl	x1, x19, #3
 a50:	sub	x1, x1, x19
 a54:	add	x19, x19, x1, lsl #2
 a58:	add	x1, x0, x0, lsl #1
 a5c:	lsl	x1, x1, #3
 a60:	sub	x1, x1, x0
 a64:	adds	x19, x1, x19
 a68:	csel	x19, x19, x21, ne  // ne = any
 a6c:	cmp	x0, #0x0
 a70:	csel	x22, x0, x21, ne  // ne = any
 a74:	mov	x1, x19
 a78:	mov	x0, x22
 a7c:	bl	470 <test_all>
 a80:	subs	x20, x20, #0x1
 a84:	b.ne	a3c <div_test+0x5c>  // b.any
 a88:	ldp	x19, x20, [sp, #16]
 a8c:	ldp	x21, x22, [sp, #32]
 a90:	ldp	x29, x30, [sp], #48
 a94:	ret

0000000000000a98 <grub_mod_init>:
 a98:	stp	x29, x30, [sp, #-16]!
 a9c:	mov	x29, sp
 aa0:	adrp	x0, 0 <test32s>
 aa4:	ldr	x1, [x0]
 aa8:	adrp	x0, 0 <test32s>
 aac:	ldr	x0, [x0]
 ab0:	bl	0 <grub_test_register>
 ab4:	ldp	x29, x30, [sp], #16
 ab8:	ret
 abc:	nop
	...

0000000000000ad0 <grub_mod_fini>:
 ad0:	stp	x29, x30, [sp, #-16]!
 ad4:	mov	x29, sp
 ad8:	adrp	x0, 0 <test32s>
 adc:	ldr	x0, [x0]
 ae0:	bl	0 <grub_test_unregister>
 ae4:	ldp	x29, x30, [sp], #16
 ae8:	ret
 aec:	nop
	...
