
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000014e8 <.init>:
    14e8:	stp	x29, x30, [sp, #-16]!
    14ec:	mov	x29, sp
    14f0:	bl	17e0 <ferror@plt+0x10>
    14f4:	ldp	x29, x30, [sp], #16
    14f8:	ret

Disassembly of section .plt:

0000000000001500 <memcpy@plt-0x20>:
    1500:	stp	x16, x30, [sp, #-16]!
    1504:	adrp	x16, 22000 <BZ2_bzerror@@Base+0x11200>
    1508:	ldr	x17, [x16, #4088]
    150c:	add	x16, x16, #0xff8
    1510:	br	x17
    1514:	nop
    1518:	nop
    151c:	nop

0000000000001520 <memcpy@plt>:
    1520:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1524:	ldr	x17, [x16]
    1528:	add	x16, x16, #0x0
    152c:	br	x17

0000000000001530 <memmove@plt>:
    1530:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1534:	ldr	x17, [x16, #8]
    1538:	add	x16, x16, #0x8
    153c:	br	x17

0000000000001540 <strlen@plt>:
    1540:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1544:	ldr	x17, [x16, #16]
    1548:	add	x16, x16, #0x10
    154c:	br	x17

0000000000001550 <BZ2_hbMakeCodeLengths@plt>:
    1550:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1554:	ldr	x17, [x16, #24]
    1558:	add	x16, x16, #0x18
    155c:	br	x17

0000000000001560 <exit@plt>:
    1560:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1564:	ldr	x17, [x16, #32]
    1568:	add	x16, x16, #0x20
    156c:	br	x17

0000000000001570 <__cxa_finalize@plt>:
    1570:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1574:	ldr	x17, [x16, #40]
    1578:	add	x16, x16, #0x28
    157c:	br	x17

0000000000001580 <BZ2_bzlibVersion@plt>:
    1580:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1584:	ldr	x17, [x16, #48]
    1588:	add	x16, x16, #0x30
    158c:	br	x17

0000000000001590 <fputc@plt>:
    1590:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1594:	ldr	x17, [x16, #56]
    1598:	add	x16, x16, #0x38
    159c:	br	x17

00000000000015a0 <fclose@plt>:
    15a0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #64]
    15a8:	add	x16, x16, #0x40
    15ac:	br	x17

00000000000015b0 <malloc@plt>:
    15b0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #72]
    15b8:	add	x16, x16, #0x48
    15bc:	br	x17

00000000000015c0 <BZ2_bzDecompressInit@plt>:
    15c0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #80]
    15c8:	add	x16, x16, #0x50
    15cc:	br	x17

00000000000015d0 <BZ2_bzDecompressEnd@plt>:
    15d0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #88]
    15d8:	add	x16, x16, #0x58
    15dc:	br	x17

00000000000015e0 <BZ2_bzReadClose@plt>:
    15e0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #96]
    15e8:	add	x16, x16, #0x60
    15ec:	br	x17

00000000000015f0 <fgetc@plt>:
    15f0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #104]
    15f8:	add	x16, x16, #0x68
    15fc:	br	x17

0000000000001600 <memset@plt>:
    1600:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1604:	ldr	x17, [x16, #112]
    1608:	add	x16, x16, #0x70
    160c:	br	x17

0000000000001610 <fdopen@plt>:
    1610:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1614:	ldr	x17, [x16, #120]
    1618:	add	x16, x16, #0x78
    161c:	br	x17

0000000000001620 <BZ2_bzWriteOpen@plt>:
    1620:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1624:	ldr	x17, [x16, #128]
    1628:	add	x16, x16, #0x80
    162c:	br	x17

0000000000001630 <BZ2_bzCompressInit@plt>:
    1630:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1634:	ldr	x17, [x16, #136]
    1638:	add	x16, x16, #0x88
    163c:	br	x17

0000000000001640 <BZ2_bzCompressEnd@plt>:
    1640:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1644:	ldr	x17, [x16, #144]
    1648:	add	x16, x16, #0x90
    164c:	br	x17

0000000000001650 <BZ2_hbCreateDecodeTables@plt>:
    1650:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1654:	ldr	x17, [x16, #152]
    1658:	add	x16, x16, #0x98
    165c:	br	x17

0000000000001660 <__gmon_start__@plt>:
    1660:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1664:	ldr	x17, [x16, #160]
    1668:	add	x16, x16, #0xa0
    166c:	br	x17

0000000000001670 <BZ2_decompress@plt>:
    1670:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1674:	ldr	x17, [x16, #168]
    1678:	add	x16, x16, #0xa8
    167c:	br	x17

0000000000001680 <BZ2_bzWriteClose@plt>:
    1680:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1684:	ldr	x17, [x16, #176]
    1688:	add	x16, x16, #0xb0
    168c:	br	x17

0000000000001690 <BZ2_bzCompress@plt>:
    1690:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1694:	ldr	x17, [x16, #184]
    1698:	add	x16, x16, #0xb8
    169c:	br	x17

00000000000016a0 <BZ2_bzWrite@plt>:
    16a0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    16a4:	ldr	x17, [x16, #192]
    16a8:	add	x16, x16, #0xc0
    16ac:	br	x17

00000000000016b0 <__ctype_b_loc@plt>:
    16b0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    16b4:	ldr	x17, [x16, #200]
    16b8:	add	x16, x16, #0xc8
    16bc:	br	x17

00000000000016c0 <BZ2_compressBlock@plt>:
    16c0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    16c4:	ldr	x17, [x16, #208]
    16c8:	add	x16, x16, #0xd0
    16cc:	br	x17

00000000000016d0 <fread@plt>:
    16d0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    16d4:	ldr	x17, [x16, #216]
    16d8:	add	x16, x16, #0xd8
    16dc:	br	x17

00000000000016e0 <BZ2_bsInitWrite@plt>:
    16e0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    16e4:	ldr	x17, [x16, #224]
    16e8:	add	x16, x16, #0xe0
    16ec:	br	x17

00000000000016f0 <free@plt>:
    16f0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    16f4:	ldr	x17, [x16, #232]
    16f8:	add	x16, x16, #0xe8
    16fc:	br	x17

0000000000001700 <ungetc@plt>:
    1700:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1704:	ldr	x17, [x16, #240]
    1708:	add	x16, x16, #0xf0
    170c:	br	x17

0000000000001710 <BZ2_bzDecompress@plt>:
    1710:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1714:	ldr	x17, [x16, #248]
    1718:	add	x16, x16, #0xf8
    171c:	br	x17

0000000000001720 <BZ2_blockSort@plt>:
    1720:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1724:	ldr	x17, [x16, #256]
    1728:	add	x16, x16, #0x100
    172c:	br	x17

0000000000001730 <BZ2_bzWriteClose64@plt>:
    1730:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1734:	ldr	x17, [x16, #264]
    1738:	add	x16, x16, #0x108
    173c:	br	x17

0000000000001740 <BZ2_indexIntoF@plt>:
    1740:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1744:	ldr	x17, [x16, #272]
    1748:	add	x16, x16, #0x110
    174c:	br	x17

0000000000001750 <BZ2_hbAssignCodes@plt>:
    1750:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1754:	ldr	x17, [x16, #280]
    1758:	add	x16, x16, #0x118
    175c:	br	x17

0000000000001760 <fwrite@plt>:
    1760:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1764:	ldr	x17, [x16, #288]
    1768:	add	x16, x16, #0x120
    176c:	br	x17

0000000000001770 <fflush@plt>:
    1770:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1774:	ldr	x17, [x16, #296]
    1778:	add	x16, x16, #0x128
    177c:	br	x17

0000000000001780 <fopen64@plt>:
    1780:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1784:	ldr	x17, [x16, #304]
    1788:	add	x16, x16, #0x130
    178c:	br	x17

0000000000001790 <BZ2_bzReadOpen@plt>:
    1790:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    1794:	ldr	x17, [x16, #312]
    1798:	add	x16, x16, #0x138
    179c:	br	x17

00000000000017a0 <BZ2_bzRead@plt>:
    17a0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    17a4:	ldr	x17, [x16, #320]
    17a8:	add	x16, x16, #0x140
    17ac:	br	x17

00000000000017b0 <BZ2_bz__AssertH__fail@plt>:
    17b0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    17b4:	ldr	x17, [x16, #328]
    17b8:	add	x16, x16, #0x148
    17bc:	br	x17

00000000000017c0 <fprintf@plt>:
    17c0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    17c4:	ldr	x17, [x16, #336]
    17c8:	add	x16, x16, #0x150
    17cc:	br	x17

00000000000017d0 <ferror@plt>:
    17d0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    17d4:	ldr	x17, [x16, #344]
    17d8:	add	x16, x16, #0x158
    17dc:	br	x17

Disassembly of section .text:

00000000000017e0 <BZ2_blockSort@@Base-0x27f0>:
    17e0:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    17e4:	ldr	x0, [x0, #4048]
    17e8:	cbz	x0, 17f0 <ferror@plt+0x20>
    17ec:	b	1660 <__gmon_start__@plt>
    17f0:	ret
    17f4:	nop
    17f8:	adrp	x0, 23000 <BZ2_bzerror@@Base+0x12200>
    17fc:	add	x0, x0, #0xd68
    1800:	adrp	x1, 23000 <BZ2_bzerror@@Base+0x12200>
    1804:	add	x1, x1, #0xd68
    1808:	cmp	x1, x0
    180c:	b.eq	1824 <ferror@plt+0x54>  // b.none
    1810:	adrp	x1, 22000 <BZ2_bzerror@@Base+0x11200>
    1814:	ldr	x1, [x1, #3992]
    1818:	cbz	x1, 1824 <ferror@plt+0x54>
    181c:	mov	x16, x1
    1820:	br	x16
    1824:	ret
    1828:	adrp	x0, 23000 <BZ2_bzerror@@Base+0x12200>
    182c:	add	x0, x0, #0xd68
    1830:	adrp	x1, 23000 <BZ2_bzerror@@Base+0x12200>
    1834:	add	x1, x1, #0xd68
    1838:	sub	x1, x1, x0
    183c:	lsr	x2, x1, #63
    1840:	add	x1, x2, x1, asr #3
    1844:	cmp	xzr, x1, asr #1
    1848:	asr	x1, x1, #1
    184c:	b.eq	1864 <ferror@plt+0x94>  // b.none
    1850:	adrp	x2, 22000 <BZ2_bzerror@@Base+0x11200>
    1854:	ldr	x2, [x2, #4056]
    1858:	cbz	x2, 1864 <ferror@plt+0x94>
    185c:	mov	x16, x2
    1860:	br	x16
    1864:	ret
    1868:	stp	x29, x30, [sp, #-32]!
    186c:	mov	x29, sp
    1870:	str	x19, [sp, #16]
    1874:	adrp	x19, 23000 <BZ2_bzerror@@Base+0x12200>
    1878:	ldrb	w0, [x19, #3432]
    187c:	cbnz	w0, 18a4 <ferror@plt+0xd4>
    1880:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    1884:	ldr	x0, [x0, #4000]
    1888:	cbz	x0, 1898 <ferror@plt+0xc8>
    188c:	adrp	x0, 23000 <BZ2_bzerror@@Base+0x12200>
    1890:	ldr	x0, [x0, #352]
    1894:	bl	1570 <__cxa_finalize@plt>
    1898:	bl	17f8 <ferror@plt+0x28>
    189c:	mov	w0, #0x1                   	// #1
    18a0:	strb	w0, [x19, #3432]
    18a4:	ldr	x19, [sp, #16]
    18a8:	ldp	x29, x30, [sp], #32
    18ac:	ret
    18b0:	b	1828 <ferror@plt+0x58>
    18b4:	nop
    18b8:	sub	sp, sp, #0xbc0
    18bc:	cmp	w4, #0x3
    18c0:	stp	x29, x30, [sp]
    18c4:	mov	x29, sp
    18c8:	stp	x19, x20, [sp, #16]
    18cc:	mov	x19, x0
    18d0:	mov	x20, x1
    18d4:	stp	x21, x22, [sp, #32]
    18d8:	mov	x21, x2
    18dc:	stp	x23, x24, [sp, #48]
    18e0:	stp	x25, x26, [sp, #64]
    18e4:	mov	w25, w3
    18e8:	stp	x27, x28, [sp, #80]
    18ec:	str	w4, [sp, #132]
    18f0:	b.gt	2390 <ferror@plt+0xbc0>
    18f4:	add	x23, sp, #0x7b8
    18f8:	mov	x2, #0x404                 	// #1028
    18fc:	mov	x0, x23
    1900:	mov	w1, #0x0                   	// #0
    1904:	bl	1600 <memset@plt>
    1908:	cmp	w25, #0x0
    190c:	b.le	1938 <ferror@plt+0x168>
    1910:	sub	w3, w25, #0x1
    1914:	mov	x1, x20
    1918:	add	x3, x3, #0x1
    191c:	add	x3, x3, x20
    1920:	ldrb	w2, [x1], #1
    1924:	cmp	x3, x1
    1928:	ldr	w0, [x23, x2, lsl #2]
    192c:	add	w0, w0, #0x1
    1930:	str	w0, [x23, x2, lsl #2]
    1934:	b.ne	1920 <ferror@plt+0x150>  // b.any
    1938:	add	x0, sp, #0x3b8
    193c:	mov	x1, x23
    1940:	mov	x2, #0x400                 	// #1024
    1944:	str	x0, [sp, #136]
    1948:	bl	1520 <memcpy@plt>
    194c:	mov	x22, x23
    1950:	ldr	w1, [sp, #1976]
    1954:	add	x0, x23, #0x4
    1958:	add	x3, x23, #0x404
    195c:	nop
    1960:	ldr	w2, [x0]
    1964:	add	w1, w1, w2
    1968:	str	w1, [x0], #4
    196c:	cmp	x3, x0
    1970:	b.ne	1960 <ferror@plt+0x190>  // b.any
    1974:	cmp	w25, #0x0
    1978:	add	w3, w25, #0x1f
    197c:	csel	w3, w3, w25, lt  // lt = tstop
    1980:	asr	w3, w3, #5
    1984:	b.le	23fc <ferror@plt+0xc2c>
    1988:	mov	x0, #0x0                   	// #0
    198c:	nop
    1990:	ldrb	w2, [x20, x0]
    1994:	ldr	w1, [x23, x2, lsl #2]
    1998:	sub	w1, w1, #0x1
    199c:	str	w1, [x23, x2, lsl #2]
    19a0:	str	w0, [x19, w1, sxtw #2]
    19a4:	add	x0, x0, #0x1
    19a8:	cmp	w25, w0
    19ac:	b.gt	1990 <ferror@plt+0x1c0>
    19b0:	add	w2, w3, #0x1
    19b4:	cmn	w25, #0x3f
    19b8:	add	x2, x2, #0x1
    19bc:	mov	x3, #0x4                   	// #4
    19c0:	mov	x0, x21
    19c4:	mov	w1, #0x0                   	// #0
    19c8:	lsl	x2, x2, #2
    19cc:	csel	x2, x2, x3, ge  // ge = tcont
    19d0:	bl	1600 <memset@plt>
    19d4:	add	x3, x23, #0x400
    19d8:	mov	w5, #0x1                   	// #1
    19dc:	nop
    19e0:	ldr	w1, [x22], #4
    19e4:	cmp	x3, x22
    19e8:	asr	w0, w1, #5
    19ec:	lsl	w1, w5, w1
    19f0:	sxtw	x0, w0
    19f4:	ldr	w2, [x21, x0, lsl #2]
    19f8:	orr	w1, w2, w1
    19fc:	str	w1, [x21, x0, lsl #2]
    1a00:	b.ne	19e0 <ferror@plt+0x210>  // b.any
    1a04:	mov	w1, w25
    1a08:	add	w8, w25, #0x40
    1a0c:	mov	w6, #0x1                   	// #1
    1a10:	asr	w3, w1, #5
    1a14:	add	w0, w1, #0x1
    1a18:	lsl	w5, w6, w1
    1a1c:	add	w1, w1, #0x2
    1a20:	sxtw	x3, w3
    1a24:	asr	w2, w0, #5
    1a28:	lsl	w0, w6, w0
    1a2c:	cmp	w8, w1
    1a30:	sxtw	x2, w2
    1a34:	ldr	w4, [x21, x3, lsl #2]
    1a38:	orr	w4, w4, w5
    1a3c:	str	w4, [x21, x3, lsl #2]
    1a40:	ldr	w3, [x21, x2, lsl #2]
    1a44:	bic	w0, w3, w0
    1a48:	str	w0, [x21, x2, lsl #2]
    1a4c:	b.ne	1a10 <ferror@plt+0x240>  // b.any
    1a50:	add	x15, sp, #0x98
    1a54:	add	x4, sp, #0x228
    1a58:	mov	w12, #0x1                   	// #1
    1a5c:	nop
    1a60:	ldr	w0, [sp, #132]
    1a64:	cmp	w0, #0x3
    1a68:	b.gt	2360 <ferror@plt+0xb90>
    1a6c:	cmp	w25, #0x0
    1a70:	mov	x0, #0x0                   	// #0
    1a74:	mov	w5, #0x0                   	// #0
    1a78:	mov	w6, #0x1                   	// #1
    1a7c:	b.le	1ab4 <ferror@plt+0x2e4>
    1a80:	asr	w3, w0, #5
    1a84:	ldr	w1, [x19, x0, lsl #2]
    1a88:	lsl	w2, w6, w0
    1a8c:	ldr	w3, [x21, w3, sxtw #2]
    1a90:	tst	w2, w3
    1a94:	csel	w5, w5, w0, eq  // eq = none
    1a98:	subs	w1, w1, w12
    1a9c:	add	x0, x0, #0x1
    1aa0:	add	w2, w25, w1
    1aa4:	b.mi	2298 <ferror@plt+0xac8>  // b.first
    1aa8:	str	w5, [x20, w1, sxtw #2]
    1aac:	cmp	w25, w0
    1ab0:	b.gt	1a80 <ferror@plt+0x2b0>
    1ab4:	mov	w27, w12
    1ab8:	mov	x23, x15
    1abc:	mov	x26, x4
    1ac0:	mov	w24, #0xffffffff            	// #-1
    1ac4:	str	wzr, [sp, #128]
    1ac8:	add	w0, w24, #0x1
    1acc:	mov	w4, #0x1                   	// #1
    1ad0:	and	w3, w0, #0x1f
    1ad4:	asr	w2, w0, #5
    1ad8:	lsl	w1, w4, w3
    1adc:	ldr	w2, [x21, w2, sxtw #2]
    1ae0:	tst	w1, w2
    1ae4:	b.eq	1c80 <ferror@plt+0x4b0>  // b.none
    1ae8:	cbz	w3, 21a0 <ferror@plt+0x9d0>
    1aec:	mov	w22, w0
    1af0:	add	w0, w0, #0x1
    1af4:	and	w3, w0, #0x1f
    1af8:	asr	w2, w0, #5
    1afc:	lsl	w1, w4, w3
    1b00:	ldr	w2, [x21, w2, sxtw #2]
    1b04:	tst	w1, w2
    1b08:	b.ne	1ae8 <ferror@plt+0x318>  // b.any
    1b0c:	cmp	w25, w22
    1b10:	b.le	1c90 <ferror@plt+0x4c0>
    1b14:	mov	w1, w0
    1b18:	mov	w5, #0x1                   	// #1
    1b1c:	nop
    1b20:	cbz	w3, 2204 <ferror@plt+0xa34>
    1b24:	mov	w24, w1
    1b28:	add	w1, w1, #0x1
    1b2c:	and	w3, w1, #0x1f
    1b30:	asr	w2, w1, #5
    1b34:	lsl	w4, w5, w3
    1b38:	ldr	w2, [x21, w2, sxtw #2]
    1b3c:	tst	w4, w2
    1b40:	b.eq	1b20 <ferror@plt+0x350>  // b.none
    1b44:	cmp	w25, w24
    1b48:	b.le	1c90 <ferror@plt+0x4c0>
    1b4c:	cmp	w1, w0
    1b50:	b.le	1ac8 <ferror@plt+0x2f8>
    1b54:	sub	w0, w1, w0
    1b58:	ldr	w1, [sp, #128]
    1b5c:	add	w0, w0, #0x1
    1b60:	mov	w6, #0x0                   	// #0
    1b64:	add	w0, w1, w0
    1b68:	mov	w7, #0x1                   	// #1
    1b6c:	str	w0, [sp, #128]
    1b70:	mov	x0, x23
    1b74:	mov	w28, w24
    1b78:	mov	w4, w22
    1b7c:	mov	w23, w6
    1b80:	mov	x6, x21
    1b84:	mov	w21, w22
    1b88:	str	w22, [sp, #152]
    1b8c:	sxtw	x22, w7
    1b90:	mov	w7, w25
    1b94:	mov	w25, w24
    1b98:	str	w24, [sp, #552]
    1b9c:	mov	x24, x0
    1ba0:	mov	x8, #0xfffffffffffffff0    	// #-16
    1ba4:	nop
    1ba8:	sub	w0, w28, w21
    1bac:	sub	w10, w22, #0x1
    1bb0:	cmp	w0, #0x9
    1bb4:	b.le	1dec <ferror@plt+0x61c>
    1bb8:	mov	w0, #0x1dc5                	// #7621
    1bbc:	mul	w23, w23, w0
    1bc0:	mov	w0, #0xaaab                	// #43691
    1bc4:	movk	w0, #0xaaaa, lsl #16
    1bc8:	add	w23, w23, #0x1
    1bcc:	and	w23, w23, #0x7fff
    1bd0:	umull	x0, w23, w0
    1bd4:	lsr	x0, x0, #33
    1bd8:	add	w0, w0, w0, lsl #1
    1bdc:	subs	w0, w23, w0
    1be0:	b.ne	22a8 <ferror@plt+0xad8>  // b.any
    1be4:	ldr	w0, [x19, w21, sxtw #2]
    1be8:	ldr	w13, [x20, x0, lsl #2]
    1bec:	cmp	w21, w28
    1bf0:	b.gt	1d98 <ferror@plt+0x5c8>
    1bf4:	sbfiz	x17, x21, #2, #32
    1bf8:	sxtw	x18, w21
    1bfc:	add	x16, x19, x17
    1c00:	mov	w0, w21
    1c04:	mov	x15, x16
    1c08:	mov	x11, x16
    1c0c:	mov	w5, w28
    1c10:	mov	w14, w21
    1c14:	mov	w3, w28
    1c18:	ldr	w2, [x11]
    1c1c:	mov	w12, w0
    1c20:	ldr	w1, [x20, w2, uxtw #2]
    1c24:	sub	w1, w1, w13
    1c28:	cmp	w1, #0x0
    1c2c:	cbz	w1, 2174 <ferror@plt+0x9a4>
    1c30:	b.le	2194 <ferror@plt+0x9c4>
    1c34:	cmp	w0, w3
    1c38:	b.gt	1d90 <ferror@plt+0x5c0>
    1c3c:	add	x2, x19, w3, sxtw #2
    1c40:	b	1c54 <ferror@plt+0x484>
    1c44:	b.mi	1d70 <ferror@plt+0x5a0>  // b.first
    1c48:	sub	x2, x2, #0x4
    1c4c:	cmp	w0, w3
    1c50:	b.gt	1d90 <ferror@plt+0x5c0>
    1c54:	ldr	w9, [x2]
    1c58:	sub	w3, w3, #0x1
    1c5c:	ldr	w1, [x20, w9, uxtw #2]
    1c60:	subs	w1, w1, w13
    1c64:	cbnz	w1, 1c44 <ferror@plt+0x474>
    1c68:	sxtw	x1, w5
    1c6c:	sub	w5, w5, #0x1
    1c70:	ldr	w30, [x19, x1, lsl #2]
    1c74:	str	w30, [x2]
    1c78:	str	w9, [x19, x1, lsl #2]
    1c7c:	b	1c48 <ferror@plt+0x478>
    1c80:	mov	w22, w24
    1c84:	cmp	w25, w22
    1c88:	b.gt	1b14 <ferror@plt+0x344>
    1c8c:	nop
    1c90:	ldr	w0, [sp, #132]
    1c94:	mov	w12, w27
    1c98:	mov	x15, x23
    1c9c:	mov	x4, x26
    1ca0:	cmp	w0, #0x3
    1ca4:	b.le	1cd4 <ferror@plt+0x504>
    1ca8:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    1cac:	ldr	w2, [sp, #128]
    1cb0:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    1cb4:	add	x1, x1, #0xe78
    1cb8:	ldr	x0, [x0, #4008]
    1cbc:	str	w27, [sp, #108]
    1cc0:	stp	x23, x26, [sp, #112]
    1cc4:	ldr	x0, [x0]
    1cc8:	bl	17c0 <fprintf@plt>
    1ccc:	ldp	x15, x4, [sp, #112]
    1cd0:	ldr	w12, [sp, #108]
    1cd4:	ldr	w0, [sp, #128]
    1cd8:	lsl	w12, w12, #1
    1cdc:	cmp	w0, #0x0
    1ce0:	ccmp	w25, w12, #0x1, ne  // ne = any
    1ce4:	b.ge	1a60 <ferror@plt+0x290>  // b.tcont
    1ce8:	ldr	w0, [sp, #132]
    1cec:	cmp	w0, #0x3
    1cf0:	b.gt	23d8 <ferror@plt+0xc08>
    1cf4:	cmp	w25, #0x0
    1cf8:	b.le	1d50 <ferror@plt+0x580>
    1cfc:	ldr	w1, [sp, #952]
    1d00:	mov	x3, #0x0                   	// #0
    1d04:	ldr	x4, [sp, #136]
    1d08:	mov	w2, #0x0                   	// #0
    1d0c:	mov	x5, #0x0                   	// #0
    1d10:	mov	x0, x5
    1d14:	cbnz	w1, 1d2c <ferror@plt+0x55c>
    1d18:	add	w2, w0, #0x1
    1d1c:	add	x0, x0, #0x1
    1d20:	ldr	w1, [x4, x0, lsl #2]
    1d24:	cbz	w1, 1d18 <ferror@plt+0x548>
    1d28:	sxtw	x5, w2
    1d2c:	ldr	w0, [x19, x3, lsl #2]
    1d30:	sub	w1, w1, #0x1
    1d34:	str	w1, [x4, x5, lsl #2]
    1d38:	add	x3, x3, #0x1
    1d3c:	cmp	w25, w3
    1d40:	strb	w2, [x20, x0]
    1d44:	b.gt	1d10 <ferror@plt+0x540>
    1d48:	cmp	w2, #0xff
    1d4c:	b.gt	23b4 <ferror@plt+0xbe4>
    1d50:	ldp	x29, x30, [sp]
    1d54:	ldp	x19, x20, [sp, #16]
    1d58:	ldp	x21, x22, [sp, #32]
    1d5c:	ldp	x23, x24, [sp, #48]
    1d60:	ldp	x25, x26, [sp, #64]
    1d64:	ldp	x27, x28, [sp, #80]
    1d68:	add	sp, sp, #0xbc0
    1d6c:	ret
    1d70:	add	w12, w0, #0x1
    1d74:	ldr	w1, [x11]
    1d78:	mov	w0, w12
    1d7c:	str	w9, [x11]
    1d80:	str	w1, [x2]
    1d84:	add	x11, x11, #0x4
    1d88:	cmp	w0, w3
    1d8c:	b.le	1c18 <ferror@plt+0x448>
    1d90:	cmp	w14, w5
    1d94:	b.le	1f44 <ferror@plt+0x774>
    1d98:	cbz	w10, 1eec <ferror@plt+0x71c>
    1d9c:	sub	w0, w22, #0x2
    1da0:	sxtw	x22, w10
    1da4:	sxtw	x0, w0
    1da8:	ldr	w21, [x24, x0, lsl #2]
    1dac:	ldr	w28, [x26, x0, lsl #2]
    1db0:	cmp	w22, #0x62
    1db4:	b.le	1ba8 <ferror@plt+0x3d8>
    1db8:	mov	w0, #0x3ec                 	// #1004
    1dbc:	str	w4, [sp, #108]
    1dc0:	str	x6, [sp, #112]
    1dc4:	str	w7, [sp, #120]
    1dc8:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    1dcc:	sub	w0, w28, w21
    1dd0:	ldr	w4, [sp, #108]
    1dd4:	ldr	w7, [sp, #120]
    1dd8:	sub	w10, w22, #0x1
    1ddc:	cmp	w0, #0x9
    1de0:	mov	x8, #0xfffffffffffffff0    	// #-16
    1de4:	ldr	x6, [sp, #112]
    1de8:	b.gt	1bb8 <ferror@plt+0x3e8>
    1dec:	cmp	w21, w28
    1df0:	b.eq	1d98 <ferror@plt+0x5c8>  // b.none
    1df4:	cmp	w0, #0x3
    1df8:	b.le	1e70 <ferror@plt+0x6a0>
    1dfc:	sub	w12, w28, #0x4
    1e00:	cmp	w12, w21
    1e04:	b.lt	1e70 <ferror@plt+0x6a0>  // b.tstop
    1e08:	sxtw	x12, w12
    1e0c:	mov	w11, w28
    1e10:	ldr	w13, [x19, x12, lsl #2]
    1e14:	add	x0, x8, w11, sxtw #2
    1e18:	add	x3, x19, x12, lsl #2
    1e1c:	cmp	w11, w28
    1e20:	add	x0, x19, x0
    1e24:	mov	w1, w11
    1e28:	ldr	w9, [x20, w13, sxtw #2]
    1e2c:	b.le	1e44 <ferror@plt+0x674>
    1e30:	b	1e5c <ferror@plt+0x68c>
    1e34:	str	w2, [x0]
    1e38:	cmp	w1, w28
    1e3c:	add	x0, x3, #0x10
    1e40:	b.gt	2278 <ferror@plt+0xaa8>
    1e44:	ldr	w2, [x0, #16]
    1e48:	add	w1, w1, #0x4
    1e4c:	mov	x3, x0
    1e50:	ldr	w5, [x20, w2, uxtw #2]
    1e54:	cmp	w9, w5
    1e58:	b.hi	1e34 <ferror@plt+0x664>  // b.pmore
    1e5c:	str	w13, [x3]
    1e60:	sub	x12, x12, #0x1
    1e64:	cmp	w21, w12
    1e68:	sub	w11, w11, #0x1
    1e6c:	b.le	1e10 <ferror@plt+0x640>
    1e70:	sub	w11, w28, #0x1
    1e74:	mov	w9, w28
    1e78:	cmp	w11, w21
    1e7c:	mov	x14, #0xfffffffffffffffc    	// #-4
    1e80:	sxtw	x11, w11
    1e84:	b.lt	1d98 <ferror@plt+0x5c8>  // b.tstop
    1e88:	ldr	w13, [x19, x11, lsl #2]
    1e8c:	add	x0, x14, w9, sxtw #2
    1e90:	add	x3, x19, x11, lsl #2
    1e94:	cmp	w9, w28
    1e98:	add	x0, x19, x0
    1e9c:	mov	w1, w9
    1ea0:	ldr	w12, [x20, w13, sxtw #2]
    1ea4:	b.le	1ebc <ferror@plt+0x6ec>
    1ea8:	b	1ed4 <ferror@plt+0x704>
    1eac:	str	w2, [x0]
    1eb0:	cmp	w1, w28
    1eb4:	add	x0, x3, #0x4
    1eb8:	b.gt	2258 <ferror@plt+0xa88>
    1ebc:	ldr	w2, [x0, #4]
    1ec0:	add	w1, w1, #0x1
    1ec4:	mov	x3, x0
    1ec8:	ldr	w5, [x20, w2, uxtw #2]
    1ecc:	cmp	w12, w5
    1ed0:	b.hi	1eac <ferror@plt+0x6dc>  // b.pmore
    1ed4:	str	w13, [x3]
    1ed8:	sub	x11, x11, #0x1
    1edc:	cmp	w21, w11
    1ee0:	sub	w9, w9, #0x1
    1ee4:	b.le	1e88 <ferror@plt+0x6b8>
    1ee8:	cbnz	w10, 1d9c <ferror@plt+0x5cc>
    1eec:	mov	x23, x24
    1ef0:	sxtw	x22, w4
    1ef4:	mov	w24, w25
    1ef8:	mov	w25, w7
    1efc:	mov	x21, x6
    1f00:	mov	w1, #0xffffffff            	// #-1
    1f04:	mov	w6, #0x1                   	// #1
    1f08:	ldr	w4, [x19, x22, lsl #2]
    1f0c:	asr	w0, w22, #5
    1f10:	mov	w3, w1
    1f14:	lsl	w5, w6, w22
    1f18:	sxtw	x0, w0
    1f1c:	add	x22, x22, #0x1
    1f20:	ldr	w1, [x20, x4, lsl #2]
    1f24:	cmp	w1, w3
    1f28:	b.eq	1f38 <ferror@plt+0x768>  // b.none
    1f2c:	ldr	w2, [x21, x0, lsl #2]
    1f30:	orr	w2, w2, w5
    1f34:	str	w2, [x21, x0, lsl #2]
    1f38:	cmp	w24, w22
    1f3c:	b.ge	1f08 <ferror@plt+0x738>  // b.tcont
    1f40:	b	1ac8 <ferror@plt+0x2f8>
    1f44:	sub	w2, w12, w14
    1f48:	sub	w0, w14, w21
    1f4c:	cmp	w2, w0
    1f50:	csel	w2, w2, w0, le
    1f54:	cmp	w2, #0x0
    1f58:	sub	w9, w12, w2
    1f5c:	b.le	2034 <ferror@plt+0x864>
    1f60:	sxtw	x0, w9
    1f64:	add	x30, x17, #0x10
    1f68:	add	x11, x0, #0x4
    1f6c:	sub	w13, w2, #0x1
    1f70:	lsl	x11, x11, #2
    1f74:	sub	x1, x11, #0x10
    1f78:	cmp	x1, x30
    1f7c:	ccmp	x17, x11, #0x0, lt  // lt = tstop
    1f80:	ccmp	w13, #0x4, #0x0, ge  // ge = tcont
    1f84:	b.ls	2324 <ferror@plt+0xb54>  // b.plast
    1f88:	lsr	w11, w2, #2
    1f8c:	add	x1, x19, x1
    1f90:	mov	x0, #0x0                   	// #0
    1f94:	lsl	x11, x11, #4
    1f98:	ldr	q1, [x1, x0]
    1f9c:	ldr	q0, [x16, x0]
    1fa0:	str	q1, [x16, x0]
    1fa4:	str	q0, [x1, x0]
    1fa8:	add	x0, x0, #0x10
    1fac:	cmp	x11, x0
    1fb0:	b.ne	1f98 <ferror@plt+0x7c8>  // b.any
    1fb4:	and	w0, w2, #0xfffffffc
    1fb8:	cmp	w0, w2
    1fbc:	add	w9, w9, w0
    1fc0:	sub	w2, w2, w0
    1fc4:	add	w0, w0, w21
    1fc8:	b.eq	2034 <ferror@plt+0x864>  // b.none
    1fcc:	sxtw	x1, w9
    1fd0:	sxtw	x11, w0
    1fd4:	cmp	w2, #0x1
    1fd8:	add	w9, w9, #0x1
    1fdc:	add	w0, w0, #0x1
    1fe0:	ldr	w15, [x19, x1, lsl #2]
    1fe4:	ldr	w13, [x19, x11, lsl #2]
    1fe8:	str	w15, [x19, x11, lsl #2]
    1fec:	str	w13, [x19, x1, lsl #2]
    1ff0:	b.eq	2034 <ferror@plt+0x864>  // b.none
    1ff4:	sxtw	x1, w9
    1ff8:	sxtw	x11, w0
    1ffc:	cmp	w2, #0x2
    2000:	sbfiz	x9, x9, #2, #32
    2004:	sbfiz	x0, x0, #2, #32
    2008:	ldr	w13, [x19, x1, lsl #2]
    200c:	ldr	w2, [x19, x11, lsl #2]
    2010:	str	w13, [x19, x11, lsl #2]
    2014:	str	w2, [x19, x1, lsl #2]
    2018:	b.eq	2034 <ferror@plt+0x864>  // b.none
    201c:	add	x1, x9, #0x4
    2020:	add	x0, x0, #0x4
    2024:	ldr	w9, [x19, x1]
    2028:	ldr	w2, [x19, x0]
    202c:	str	w9, [x19, x0]
    2030:	str	w2, [x19, x1]
    2034:	sub	w3, w5, w3
    2038:	sub	w5, w28, w5
    203c:	cmp	w5, w3
    2040:	csel	w5, w5, w3, le
    2044:	sub	w11, w28, w5
    2048:	cmp	w5, #0x0
    204c:	add	w9, w11, #0x1
    2050:	b.le	2134 <ferror@plt+0x964>
    2054:	sxtw	x0, w9
    2058:	sbfiz	x2, x12, #2, #32
    205c:	add	x0, x0, #0x4
    2060:	add	x15, x2, #0x10
    2064:	sub	w13, w5, #0x1
    2068:	sxtw	x16, w12
    206c:	lsl	x0, x0, #2
    2070:	sub	x1, x0, #0x10
    2074:	cmp	x1, x15
    2078:	ccmp	x2, x0, #0x0, lt  // lt = tstop
    207c:	ccmp	w13, #0x4, #0x0, ge  // ge = tcont
    2080:	b.ls	22e8 <ferror@plt+0xb18>  // b.plast
    2084:	lsr	w11, w5, #2
    2088:	add	x2, x19, x2
    208c:	add	x1, x19, x1
    2090:	mov	x0, #0x0                   	// #0
    2094:	lsl	x11, x11, #4
    2098:	ldr	q1, [x1, x0]
    209c:	ldr	q0, [x2, x0]
    20a0:	str	q1, [x2, x0]
    20a4:	str	q0, [x1, x0]
    20a8:	add	x0, x0, #0x10
    20ac:	cmp	x11, x0
    20b0:	b.ne	2098 <ferror@plt+0x8c8>  // b.any
    20b4:	and	w0, w5, #0xfffffffc
    20b8:	cmp	w0, w5
    20bc:	add	w9, w9, w0
    20c0:	sub	w5, w5, w0
    20c4:	add	w0, w12, w0
    20c8:	b.eq	2134 <ferror@plt+0x964>  // b.none
    20cc:	sxtw	x1, w9
    20d0:	sxtw	x2, w0
    20d4:	cmp	w5, #0x1
    20d8:	add	w9, w9, #0x1
    20dc:	add	w0, w0, #0x1
    20e0:	ldr	w13, [x19, x1, lsl #2]
    20e4:	ldr	w11, [x19, x2, lsl #2]
    20e8:	str	w13, [x19, x2, lsl #2]
    20ec:	str	w11, [x19, x1, lsl #2]
    20f0:	b.eq	2134 <ferror@plt+0x964>  // b.none
    20f4:	sxtw	x1, w9
    20f8:	sxtw	x2, w0
    20fc:	cmp	w5, #0x2
    2100:	sbfiz	x9, x9, #2, #32
    2104:	sbfiz	x0, x0, #2, #32
    2108:	ldr	w11, [x19, x1, lsl #2]
    210c:	ldr	w5, [x19, x2, lsl #2]
    2110:	str	w11, [x19, x2, lsl #2]
    2114:	str	w5, [x19, x1, lsl #2]
    2118:	b.eq	2134 <ferror@plt+0x964>  // b.none
    211c:	add	x1, x9, #0x4
    2120:	add	x0, x0, #0x4
    2124:	ldr	w5, [x19, x1]
    2128:	ldr	w2, [x19, x0]
    212c:	str	w5, [x19, x0]
    2130:	str	w2, [x19, x1]
    2134:	add	w0, w12, w21
    2138:	sub	w3, w28, w3
    213c:	sub	w0, w0, w14
    2140:	add	w1, w3, #0x1
    2144:	sub	w0, w0, #0x1
    2148:	sub	w3, w28, w1
    214c:	sub	w5, w0, w21
    2150:	add	w2, w22, #0x1
    2154:	cmp	w5, w3
    2158:	b.le	22bc <ferror@plt+0xaec>
    215c:	str	w0, [x26, w10, sxtw #2]
    2160:	mov	w21, w1
    2164:	str	w1, [x24, x22, lsl #2]
    2168:	str	w28, [x26, x22, lsl #2]
    216c:	sxtw	x22, w2
    2170:	b	1db0 <ferror@plt+0x5e0>
    2174:	sxtw	x1, w14
    2178:	add	w0, w0, #0x1
    217c:	add	w14, w14, #0x1
    2180:	mov	w12, w0
    2184:	ldr	w9, [x19, x1, lsl #2]
    2188:	str	w9, [x11]
    218c:	str	w2, [x19, x1, lsl #2]
    2190:	b	1d84 <ferror@plt+0x5b4>
    2194:	add	w0, w0, #0x1
    2198:	mov	w12, w0
    219c:	b	1d84 <ferror@plt+0x5b4>
    21a0:	cmn	w2, #0x1
    21a4:	b.ne	21d8 <ferror@plt+0xa08>  // b.any
    21a8:	mov	w22, w0
    21ac:	add	w0, w0, #0x20
    21b0:	asr	w1, w0, #5
    21b4:	ldr	w2, [x21, w1, sxtw #2]
    21b8:	cmn	w2, #0x1
    21bc:	b.eq	21a8 <ferror@plt+0x9d8>  // b.none
    21c0:	and	w3, w0, #0x1f
    21c4:	mov	w1, #0x1                   	// #1
    21c8:	add	w22, w22, #0x1f
    21cc:	lsl	w1, w1, w3
    21d0:	tst	w1, w2
    21d4:	b.eq	1b0c <ferror@plt+0x33c>  // b.none
    21d8:	mov	w4, #0x1                   	// #1
    21dc:	nop
    21e0:	mov	w22, w0
    21e4:	add	w0, w0, #0x1
    21e8:	and	w3, w0, #0x1f
    21ec:	asr	w2, w0, #5
    21f0:	lsl	w1, w4, w3
    21f4:	ldr	w2, [x21, w2, sxtw #2]
    21f8:	tst	w1, w2
    21fc:	b.ne	21e0 <ferror@plt+0xa10>  // b.any
    2200:	b	1b0c <ferror@plt+0x33c>
    2204:	cbnz	w2, 2358 <ferror@plt+0xb88>
    2208:	add	w1, w1, #0x20
    220c:	asr	w2, w1, #5
    2210:	ldr	w2, [x21, w2, sxtw #2]
    2214:	cbz	w2, 2208 <ferror@plt+0xa38>
    2218:	and	w5, w1, #0x1f
    221c:	mov	w3, #0x1                   	// #1
    2220:	sub	w24, w1, #0x1
    2224:	mov	w4, w3
    2228:	lsl	w3, w3, w5
    222c:	tst	w3, w2
    2230:	b.ne	1b44 <ferror@plt+0x374>  // b.any
    2234:	nop
    2238:	mov	w24, w1
    223c:	add	w1, w1, #0x1
    2240:	asr	w2, w1, #5
    2244:	lsl	w3, w4, w1
    2248:	ldr	w2, [x21, w2, sxtw #2]
    224c:	tst	w3, w2
    2250:	b.eq	2238 <ferror@plt+0xa68>  // b.none
    2254:	b	1b44 <ferror@plt+0x374>
    2258:	add	x1, x14, w1, sxtw #2
    225c:	sub	x11, x11, #0x1
    2260:	add	x3, x19, x1
    2264:	cmp	w21, w11
    2268:	sub	w9, w9, #0x1
    226c:	str	w13, [x3]
    2270:	b.le	1e88 <ferror@plt+0x6b8>
    2274:	b	1ee8 <ferror@plt+0x718>
    2278:	add	x1, x8, w1, sxtw #2
    227c:	sub	x12, x12, #0x1
    2280:	add	x3, x19, x1
    2284:	cmp	w21, w12
    2288:	sub	w11, w11, #0x1
    228c:	str	w13, [x3]
    2290:	b.le	1e10 <ferror@plt+0x640>
    2294:	b	1e70 <ferror@plt+0x6a0>
    2298:	str	w5, [x20, w2, sxtw #2]
    229c:	cmp	w25, w0
    22a0:	b.gt	1a80 <ferror@plt+0x2b0>
    22a4:	b	1ab4 <ferror@plt+0x2e4>
    22a8:	cmp	w0, #0x1
    22ac:	b.eq	22d4 <ferror@plt+0xb04>  // b.none
    22b0:	ldr	w0, [x19, w28, sxtw #2]
    22b4:	ldr	w13, [x20, x0, lsl #2]
    22b8:	b	1bec <ferror@plt+0x41c>
    22bc:	str	w1, [x24, w10, sxtw #2]
    22c0:	mov	w28, w0
    22c4:	str	w0, [x26, x22, lsl #2]
    22c8:	str	w21, [x24, x22, lsl #2]
    22cc:	sxtw	x22, w2
    22d0:	b	1db0 <ferror@plt+0x5e0>
    22d4:	add	w0, w21, w28
    22d8:	asr	w0, w0, #1
    22dc:	ldr	w0, [x19, w0, sxtw #2]
    22e0:	ldr	w13, [x20, x0, lsl #2]
    22e4:	b	1bec <ferror@plt+0x41c>
    22e8:	add	x13, x16, w13, uxtw
    22ec:	sxtw	x5, w11
    22f0:	add	x1, x19, #0x4
    22f4:	add	x0, x19, x2
    22f8:	sub	x5, x5, x16
    22fc:	add	x2, x1, x13, lsl #2
    2300:	mov	x1, x0
    2304:	ldr	w9, [x1], #4
    2308:	cmp	x2, x1
    230c:	ldr	w11, [x1, x5, lsl #2]
    2310:	str	w11, [x0]
    2314:	mov	x0, x1
    2318:	str	w9, [x1, x5, lsl #2]
    231c:	b.ne	2300 <ferror@plt+0xb30>  // b.any
    2320:	b	2134 <ferror@plt+0x964>
    2324:	add	x13, x18, w13, uxtw
    2328:	add	x1, x19, #0x4
    232c:	sub	x18, x0, x18
    2330:	add	x0, x1, x13, lsl #2
    2334:	nop
    2338:	ldr	w2, [x15, x18, lsl #2]
    233c:	ldr	w1, [x15]
    2340:	str	w2, [x15]
    2344:	str	w1, [x15, x18, lsl #2]
    2348:	add	x15, x15, #0x4
    234c:	cmp	x0, x15
    2350:	b.ne	2338 <ferror@plt+0xb68>  // b.any
    2354:	b	2034 <ferror@plt+0x864>
    2358:	mov	w5, #0x0                   	// #0
    235c:	b	221c <ferror@plt+0xa4c>
    2360:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    2364:	mov	w2, w12
    2368:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    236c:	add	x1, x1, #0xe60
    2370:	ldr	x0, [x0, #4008]
    2374:	str	w12, [sp, #108]
    2378:	stp	x15, x4, [sp, #112]
    237c:	ldr	x0, [x0]
    2380:	bl	17c0 <fprintf@plt>
    2384:	ldr	w12, [sp, #108]
    2388:	ldp	x15, x4, [sp, #112]
    238c:	b	1a6c <ferror@plt+0x29c>
    2390:	adrp	x3, 22000 <BZ2_bzerror@@Base+0x11200>
    2394:	adrp	x0, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    2398:	mov	x2, #0x1b                  	// #27
    239c:	mov	x1, #0x1                   	// #1
    23a0:	ldr	x3, [x3, #4008]
    23a4:	add	x0, x0, #0xe40
    23a8:	ldr	x3, [x3]
    23ac:	bl	1760 <fwrite@plt>
    23b0:	b	18f4 <ferror@plt+0x124>
    23b4:	ldp	x29, x30, [sp]
    23b8:	mov	w0, #0x3ed                 	// #1005
    23bc:	ldp	x19, x20, [sp, #16]
    23c0:	ldp	x21, x22, [sp, #32]
    23c4:	ldp	x23, x24, [sp, #48]
    23c8:	ldp	x25, x26, [sp, #64]
    23cc:	ldp	x27, x28, [sp, #80]
    23d0:	add	sp, sp, #0xbc0
    23d4:	b	17b0 <BZ2_bz__AssertH__fail@plt>
    23d8:	adrp	x3, 22000 <BZ2_bzerror@@Base+0x11200>
    23dc:	adrp	x0, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    23e0:	mov	x2, #0x21                  	// #33
    23e4:	mov	x1, #0x1                   	// #1
    23e8:	ldr	x3, [x3, #4008]
    23ec:	add	x0, x0, #0xe90
    23f0:	ldr	x3, [x3]
    23f4:	bl	1760 <fwrite@plt>
    23f8:	b	1cf4 <ferror@plt+0x524>
    23fc:	cmn	w25, #0x3f
    2400:	b.lt	19d4 <ferror@plt+0x204>  // b.tstop
    2404:	b	19b0 <ferror@plt+0x1e0>
    2408:	mov	x12, #0x1300                	// #4864
    240c:	sub	sp, sp, x12
    2410:	cmp	w5, #0x3
    2414:	stp	x29, x30, [sp]
    2418:	mov	x29, sp
    241c:	stp	x19, x20, [sp, #16]
    2420:	stp	x21, x22, [sp, #32]
    2424:	stp	x23, x24, [sp, #48]
    2428:	stp	x25, x26, [sp, #64]
    242c:	mov	x25, x1
    2430:	stp	x27, x28, [sp, #80]
    2434:	str	x3, [sp, #152]
    2438:	str	x0, [sp, #168]
    243c:	str	x6, [sp, #192]
    2440:	str	w4, [sp, #236]
    2444:	str	w5, [sp, #272]
    2448:	str	x2, [sp, #296]
    244c:	b.gt	3f54 <ferror@plt+0x2784>
    2450:	ldr	x19, [sp, #152]
    2454:	mov	w2, #0x40004               	// #262148
    2458:	mov	w1, #0x0                   	// #0
    245c:	mov	x0, x19
    2460:	bl	1600 <memset@plt>
    2464:	ldr	w2, [sp, #236]
    2468:	ldrb	w0, [x25]
    246c:	sub	w3, w2, #0x1
    2470:	str	w3, [sp, #312]
    2474:	cmp	w3, #0x2
    2478:	lsl	w0, w0, #8
    247c:	b.le	3fb0 <ferror@plt+0x27e0>
    2480:	sub	w5, w2, #0x4
    2484:	sbfiz	x2, x3, #1, #32
    2488:	ldr	x6, [sp, #296]
    248c:	lsr	w5, w5, #2
    2490:	add	x4, x2, #0x2
    2494:	add	x3, x25, w3, sxtw
    2498:	sub	x1, x6, #0xa
    249c:	sub	x4, x4, w5, uxtw #3
    24a0:	add	x4, x4, x1
    24a4:	add	x2, x6, x2
    24a8:	mov	x1, x19
    24ac:	nop
    24b0:	strh	wzr, [x2]
    24b4:	sub	x2, x2, #0x8
    24b8:	sub	x3, x3, #0x4
    24bc:	ldrb	w6, [x3, #4]
    24c0:	lsl	w6, w6, #8
    24c4:	orr	w0, w6, w0, asr #8
    24c8:	sxtw	x7, w0
    24cc:	ldr	w6, [x1, x7, lsl #2]
    24d0:	add	w6, w6, #0x1
    24d4:	str	w6, [x1, x7, lsl #2]
    24d8:	strh	wzr, [x2, #6]
    24dc:	ldrb	w6, [x3, #3]
    24e0:	lsl	w6, w6, #8
    24e4:	orr	w0, w6, w0, asr #8
    24e8:	sxtw	x7, w0
    24ec:	ldr	w6, [x1, x7, lsl #2]
    24f0:	add	w6, w6, #0x1
    24f4:	str	w6, [x1, x7, lsl #2]
    24f8:	strh	wzr, [x2, #4]
    24fc:	ldrb	w6, [x3, #2]
    2500:	lsl	w6, w6, #8
    2504:	orr	w0, w6, w0, asr #8
    2508:	sxtw	x7, w0
    250c:	ldr	w6, [x1, x7, lsl #2]
    2510:	add	w6, w6, #0x1
    2514:	str	w6, [x1, x7, lsl #2]
    2518:	strh	wzr, [x2, #2]
    251c:	cmp	x4, x2
    2520:	ldrb	w6, [x3, #1]
    2524:	lsl	w6, w6, #8
    2528:	orr	w0, w6, w0, asr #8
    252c:	sxtw	x7, w0
    2530:	ldr	w6, [x1, x7, lsl #2]
    2534:	add	w6, w6, #0x1
    2538:	str	w6, [x1, x7, lsl #2]
    253c:	b.ne	24b0 <ferror@plt+0xce0>  // b.any
    2540:	ldr	w1, [sp, #236]
    2544:	sub	w1, w1, #0x5
    2548:	sub	w5, w1, w5, lsl #2
    254c:	tbnz	w5, #31, 25c8 <ferror@plt+0xdf8>
    2550:	ldr	x6, [sp, #296]
    2554:	sub	w2, w5, #0x1
    2558:	ldr	x4, [sp, #152]
    255c:	strh	wzr, [x6, w5, sxtw #1]
    2560:	ldrb	w1, [x25, w5, sxtw]
    2564:	lsl	w1, w1, #8
    2568:	orr	w0, w1, w0, asr #8
    256c:	sxtw	x3, w0
    2570:	ldr	w1, [x4, x3, lsl #2]
    2574:	add	w1, w1, #0x1
    2578:	str	w1, [x4, x3, lsl #2]
    257c:	cbz	w5, 25c8 <ferror@plt+0xdf8>
    2580:	strh	wzr, [x6, w2, sxtw #1]
    2584:	cmp	w5, #0x2
    2588:	ldrb	w1, [x25, w2, sxtw]
    258c:	lsl	w1, w1, #8
    2590:	orr	w0, w1, w0, asr #8
    2594:	sxtw	x2, w0
    2598:	ldr	w1, [x4, x2, lsl #2]
    259c:	add	w1, w1, #0x1
    25a0:	str	w1, [x4, x2, lsl #2]
    25a4:	b.ne	25c8 <ferror@plt+0xdf8>  // b.any
    25a8:	strh	wzr, [x6]
    25ac:	ldrb	w1, [x25]
    25b0:	lsl	w1, w1, #8
    25b4:	orr	w0, w1, w0, asr #8
    25b8:	sxtw	x0, w0
    25bc:	ldr	w1, [x4, x0, lsl #2]
    25c0:	add	w1, w1, #0x1
    25c4:	str	w1, [x4, x0, lsl #2]
    25c8:	ldrsw	x1, [sp, #236]
    25cc:	add	x4, x25, #0x22
    25d0:	ldr	x2, [sp, #296]
    25d4:	add	x0, x1, #0x22
    25d8:	add	x7, x25, x0
    25dc:	add	x3, x25, x1
    25e0:	lsl	x0, x0, #1
    25e4:	add	x1, x1, #0x10
    25e8:	sub	x6, x0, #0x44
    25ec:	add	x0, x2, x0
    25f0:	add	x2, x2, x6
    25f4:	add	x5, x25, #0x10
    25f8:	cmp	x4, x2
    25fc:	ccmp	x25, x0, #0x2, hi  // hi = pmore
    2600:	cset	w4, cs  // cs = hs, nlast
    2604:	cmp	x2, x7
    2608:	ccmp	x3, x0, #0x2, cc  // cc = lo, ul, last
    260c:	cset	w7, cs  // cs = hs, nlast
    2610:	cmp	x1, #0x0
    2614:	ccmp	x5, x3, #0x0, gt
    2618:	and	w1, w4, w7
    261c:	cset	w4, ls  // ls = plast
    2620:	tst	w4, w1
    2624:	b.eq	3f90 <ferror@plt+0x27c0>  // b.none
    2628:	ldr	w5, [sp, #236]
    262c:	ldr	q1, [x25]
    2630:	add	w1, w5, #0x21
    2634:	movi	v0.4s, #0x0
    2638:	add	w4, w5, #0x20
    263c:	str	q1, [x25, w5, sxtw]
    2640:	ldr	x5, [sp, #296]
    2644:	str	q0, [x5, x6]
    2648:	str	q0, [x2, #16]
    264c:	ldr	q1, [x25, #16]
    2650:	str	q1, [x3, #16]
    2654:	stp	q0, q0, [x2, #32]
    2658:	ldrb	w3, [x25, #32]
    265c:	strb	w3, [x25, w4, sxtw]
    2660:	sturh	wzr, [x0, #-4]
    2664:	mov	w0, w1
    2668:	ldrb	w2, [x25, #33]
    266c:	strb	w2, [x25, w1, sxtw]
    2670:	strh	wzr, [x5, w0, sxtw #1]
    2674:	ldr	w0, [sp, #272]
    2678:	cmp	w0, #0x3
    267c:	b.gt	3f30 <ferror@plt+0x2760>
    2680:	ldr	x1, [sp, #152]
    2684:	mov	x0, x1
    2688:	add	x3, x1, #0x40, lsl #12
    268c:	add	x3, x3, #0x4
    2690:	ldr	w1, [x0], #4
    2694:	nop
    2698:	ldr	w2, [x0]
    269c:	add	w1, w1, w2
    26a0:	str	w1, [x0], #4
    26a4:	cmp	x3, x0
    26a8:	b.ne	2698 <ferror@plt+0xec8>  // b.any
    26ac:	ldrb	w0, [x25]
    26b0:	ldr	w1, [sp, #312]
    26b4:	ubfiz	w0, w0, #8, #8
    26b8:	cmp	w1, #0x2
    26bc:	b.le	3fb8 <ferror@plt+0x27e8>
    26c0:	ldr	x2, [sp, #152]
    26c4:	add	x3, x25, w1, sxtw
    26c8:	ldr	x5, [sp, #168]
    26cc:	nop
    26d0:	lsr	w0, w0, #8
    26d4:	ldrb	w4, [x3]
    26d8:	sub	w9, w1, #0x1
    26dc:	sub	w8, w1, #0x2
    26e0:	sub	w7, w1, #0x3
    26e4:	sub	x3, x3, #0x4
    26e8:	orr	w6, w0, w4, lsl #8
    26ec:	lsr	w4, w6, #8
    26f0:	ldr	w0, [x2, x6, lsl #2]
    26f4:	sub	w0, w0, #0x1
    26f8:	str	w0, [x2, x6, lsl #2]
    26fc:	str	w1, [x5, w0, sxtw #2]
    2700:	sub	w1, w1, #0x4
    2704:	cmp	w1, #0x2
    2708:	ldrb	w0, [x3, #3]
    270c:	orr	w6, w4, w0, lsl #8
    2710:	lsr	w4, w6, #8
    2714:	ldr	w0, [x2, x6, lsl #2]
    2718:	sub	w0, w0, #0x1
    271c:	str	w0, [x2, x6, lsl #2]
    2720:	str	w9, [x5, w0, sxtw #2]
    2724:	ldrb	w0, [x3, #2]
    2728:	orr	w6, w4, w0, lsl #8
    272c:	lsr	w4, w6, #8
    2730:	ldr	w0, [x2, x6, lsl #2]
    2734:	sub	w0, w0, #0x1
    2738:	str	w0, [x2, x6, lsl #2]
    273c:	str	w8, [x5, w0, sxtw #2]
    2740:	ldrb	w0, [x3, #1]
    2744:	orr	w6, w4, w0, lsl #8
    2748:	mov	x0, x6
    274c:	ldr	w4, [x2, x6, lsl #2]
    2750:	sub	w4, w4, #0x1
    2754:	str	w4, [x2, x6, lsl #2]
    2758:	str	w7, [x5, w4, sxtw #2]
    275c:	b.gt	26d0 <ferror@plt+0xf00>
    2760:	ldr	w2, [sp, #236]
    2764:	sub	w1, w2, #0x4
    2768:	sub	w2, w2, #0x5
    276c:	neg	w1, w1, lsr #2
    2770:	add	w1, w2, w1, lsl #2
    2774:	tbnz	w1, #31, 27e4 <ferror@plt+0x1014>
    2778:	ldrb	w2, [x25, w1, sxtw]
    277c:	lsr	w0, w0, #8
    2780:	ldr	x5, [sp, #152]
    2784:	sub	w3, w1, #0x1
    2788:	orr	w4, w0, w2, lsl #8
    278c:	ldr	x6, [sp, #168]
    2790:	ldr	w0, [x5, x4, lsl #2]
    2794:	sub	w0, w0, #0x1
    2798:	str	w0, [x5, x4, lsl #2]
    279c:	str	w1, [x6, w0, sxtw #2]
    27a0:	cbz	w1, 27e4 <ferror@plt+0x1014>
    27a4:	ldrb	w0, [x25, w3, sxtw]
    27a8:	ubfx	x2, x4, #8, #16
    27ac:	cmp	w1, #0x2
    27b0:	orr	w2, w2, w0, lsl #8
    27b4:	ldr	w0, [x5, x2, lsl #2]
    27b8:	sub	w0, w0, #0x1
    27bc:	str	w0, [x5, x2, lsl #2]
    27c0:	str	w3, [x6, w0, sxtw #2]
    27c4:	b.ne	27e4 <ferror@plt+0x1014>  // b.any
    27c8:	ldrb	w0, [x25]
    27cc:	ubfx	x1, x2, #8, #16
    27d0:	orr	w0, w1, w0, lsl #8
    27d4:	ldr	w1, [x5, x0, lsl #2]
    27d8:	sub	w1, w1, #0x1
    27dc:	str	w1, [x5, x0, lsl #2]
    27e0:	str	wzr, [x6, w1, sxtw #2]
    27e4:	add	x0, sp, #0x150
    27e8:	mov	x2, #0x100                 	// #256
    27ec:	mov	w1, #0x0                   	// #0
    27f0:	str	x0, [sp, #256]
    27f4:	bl	1600 <memset@plt>
    27f8:	adrp	x2, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    27fc:	add	x15, sp, #0x700
    2800:	movi	v2.4s, #0x4
    2804:	mov	x0, x15
    2808:	ldr	q0, [x2, #4000]
    280c:	add	x1, x15, #0x400
    2810:	str	x15, [sp, #304]
    2814:	str	x1, [sp, #320]
    2818:	mov	v1.16b, v0.16b
    281c:	add	v0.4s, v0.4s, v2.4s
    2820:	str	q1, [x0], #16
    2824:	cmp	x1, x0
    2828:	b.ne	2818 <ferror@plt+0x1048>  // b.any
    282c:	ldr	x5, [sp, #152]
    2830:	mov	w16, #0x5556                	// #21846
    2834:	mov	w6, #0x16c                 	// #364
    2838:	movk	w16, #0x5555, lsl #16
    283c:	nop
    2840:	smull	x0, w6, w16
    2844:	mov	x17, #0x0                   	// #0
    2848:	lsr	x0, x0, #32
    284c:	sub	w6, w0, w6, asr #31
    2850:	neg	w11, w6
    2854:	sxtw	x12, w6
    2858:	add	x13, x15, w6, sxtw #2
    285c:	nop
    2860:	ldr	w14, [x13]
    2864:	mov	w4, w12
    2868:	mov	x3, x13
    286c:	sub	x10, x17, x12
    2870:	add	w0, w14, #0x1
    2874:	lsl	w1, w14, #8
    2878:	lsl	w0, w0, #8
    287c:	ldr	w1, [x5, w1, sxtw #2]
    2880:	ldr	w9, [x5, w0, sxtw #2]
    2884:	sub	w9, w9, w1
    2888:	b	289c <ferror@plt+0x10cc>
    288c:	str	w2, [x3]
    2890:	cmp	w4, w6
    2894:	add	x3, x3, w11, sxtw #2
    2898:	b.lt	3928 <ferror@plt+0x2158>  // b.tstop
    289c:	ldr	w2, [x3, x10, lsl #2]
    28a0:	mov	w7, w4
    28a4:	sub	w4, w4, w6
    28a8:	add	w1, w2, #0x1
    28ac:	lsl	w0, w2, #8
    28b0:	lsl	w1, w1, #8
    28b4:	ldr	w8, [x5, w0, sxtw #2]
    28b8:	ldr	w0, [x5, w1, sxtw #2]
    28bc:	sub	w0, w0, w8
    28c0:	cmp	w0, w9
    28c4:	b.hi	288c <ferror@plt+0x10bc>  // b.pmore
    28c8:	str	w14, [x15, w7, sxtw #2]
    28cc:	add	x12, x12, #0x1
    28d0:	cmp	w12, #0xff
    28d4:	add	x17, x17, #0x1
    28d8:	add	x13, x13, #0x4
    28dc:	b.le	2860 <ferror@plt+0x1090>
    28e0:	cmp	w6, #0x1
    28e4:	b.ne	2840 <ferror@plt+0x1070>  // b.any
    28e8:	add	x0, x15, #0x3fc
    28ec:	mov	x26, x25
    28f0:	str	x0, [sp, #328]
    28f4:	add	x0, sp, #0x250
    28f8:	str	wzr, [sp, #228]
    28fc:	str	x0, [sp, #240]
    2900:	add	x0, sp, #0x3e0
    2904:	str	x0, [sp, #248]
    2908:	ldr	x0, [sp, #304]
    290c:	mov	x24, x26
    2910:	add	x1, sp, #0x570
    2914:	str	wzr, [sp, #140]
    2918:	str	x1, [sp, #216]
    291c:	ldr	w0, [x0]
    2920:	str	w0, [sp, #208]
    2924:	lsl	w0, w0, #8
    2928:	str	w0, [sp, #224]
    292c:	nop
    2930:	ldr	w0, [sp, #140]
    2934:	ldr	w1, [sp, #208]
    2938:	cmp	w1, w0
    293c:	b.eq	3658 <ferror@plt+0x1e88>  // b.none
    2940:	ldr	w1, [sp, #224]
    2944:	ldr	x3, [sp, #152]
    2948:	add	w0, w0, w1
    294c:	sxtw	x2, w0
    2950:	str	x2, [sp, #160]
    2954:	add	x1, x3, w0, sxtw #2
    2958:	ldr	w0, [x3, x2, lsl #2]
    295c:	tbnz	w0, #21, 364c <ferror@plt+0x1e7c>
    2960:	ldr	w1, [x1, #4]
    2964:	and	w2, w0, #0xffdfffff
    2968:	str	w2, [sp, #184]
    296c:	and	w1, w1, #0xffdfffff
    2970:	sub	w28, w1, #0x1
    2974:	cmp	w2, w28
    2978:	b.ge	364c <ferror@plt+0x1e7c>  // b.tcont
    297c:	ldr	w0, [sp, #272]
    2980:	sub	w20, w28, w2
    2984:	str	w20, [sp, #232]
    2988:	cmp	w0, #0x3
    298c:	b.gt	3af4 <ferror@plt+0x2324>
    2990:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    2994:	add	x1, x1, #0xfb0
    2998:	mov	w0, #0x2                   	// #2
    299c:	mov	x25, x24
    29a0:	mov	w26, w0
    29a4:	mov	w24, w28
    29a8:	str	x1, [sp, #200]
    29ac:	mov	w19, #0x1                   	// #1
    29b0:	ldr	w1, [sp, #184]
    29b4:	str	wzr, [sp, #212]
    29b8:	str	w1, [sp, #592]
    29bc:	str	w28, [sp, #992]
    29c0:	str	w0, [sp, #1392]
    29c4:	cmp	w26, #0xe
    29c8:	ccmp	w20, #0x13, #0x4, le
    29cc:	b.gt	3948 <ferror@plt+0x2178>
    29d0:	add	w0, w20, #0x1
    29d4:	cmp	w0, #0x1
    29d8:	b.le	3618 <ferror@plt+0x1e48>
    29dc:	cmp	w0, #0x4
    29e0:	b.le	3e58 <ferror@plt+0x2688>
    29e4:	cmp	w0, #0xd
    29e8:	b.le	3e60 <ferror@plt+0x2690>
    29ec:	cmp	w0, #0x28
    29f0:	b.le	3e68 <ferror@plt+0x2698>
    29f4:	cmp	w0, #0x79
    29f8:	b.le	3e70 <ferror@plt+0x26a0>
    29fc:	cmp	w0, #0x16c
    2a00:	b.le	3e78 <ferror@plt+0x26a8>
    2a04:	cmp	w0, #0x445
    2a08:	b.le	3e8c <ferror@plt+0x26bc>
    2a0c:	cmp	w0, #0xcd0
    2a10:	b.le	3e94 <ferror@plt+0x26c4>
    2a14:	mov	w1, #0x2671                	// #9841
    2a18:	cmp	w0, w1
    2a1c:	b.le	3e9c <ferror@plt+0x26cc>
    2a20:	mov	w1, #0x7354                	// #29524
    2a24:	cmp	w0, w1
    2a28:	b.le	3ea4 <ferror@plt+0x26d4>
    2a2c:	mov	w1, #0x59fd                	// #23037
    2a30:	movk	w1, #0x1, lsl #16
    2a34:	cmp	w0, w1
    2a38:	b.le	3eac <ferror@plt+0x26dc>
    2a3c:	mov	w1, #0xdf8                 	// #3576
    2a40:	movk	w1, #0x4, lsl #16
    2a44:	cmp	w0, w1
    2a48:	b.le	3eb4 <ferror@plt+0x26e4>
    2a4c:	mov	w1, #0x29e9                	// #10729
    2a50:	movk	w1, #0xc, lsl #16
    2a54:	cmp	w0, w1
    2a58:	cset	w0, gt
    2a5c:	add	w0, w0, #0xb
    2a60:	ldrsw	x9, [sp, #184]
    2a64:	sxtw	x0, w0
    2a68:	str	x0, [sp, #144]
    2a6c:	add	x9, x9, #0x2
    2a70:	str	w24, [sp, #188]
    2a74:	lsl	x0, x9, #2
    2a78:	str	x0, [sp, #176]
    2a7c:	ldp	x22, x0, [sp, #192]
    2a80:	ldr	x1, [sp, #144]
    2a84:	ldr	w21, [sp, #188]
    2a88:	ldr	w30, [x0, x1, lsl #2]
    2a8c:	ldp	x1, x0, [sp, #168]
    2a90:	add	x5, x1, x0
    2a94:	ldr	w0, [sp, #184]
    2a98:	add	w20, w30, w0
    2a9c:	neg	w0, w30
    2aa0:	add	w19, w20, #0x2
    2aa4:	add	w24, w20, #0x1
    2aa8:	add	x2, x1, w20, sxtw #2
    2aac:	mov	w28, w20
    2ab0:	add	x2, x2, #0x8
    2ab4:	sbfiz	x27, x0, #2, #32
    2ab8:	sxtw	x0, w30
    2abc:	str	x0, [sp, #96]
    2ac0:	cmp	w28, w21
    2ac4:	b.gt	3604 <ferror@plt+0x1e34>
    2ac8:	ldur	w6, [x2, #-8]
    2acc:	sub	x3, x5, #0x8
    2ad0:	mov	w4, w28
    2ad4:	add	w0, w6, w26
    2ad8:	add	w7, w6, w26
    2adc:	add	w1, w0, #0x9
    2ae0:	add	w11, w0, #0x1
    2ae4:	add	w10, w0, #0x2
    2ae8:	add	w9, w0, #0x3
    2aec:	add	w12, w0, #0x4
    2af0:	add	w14, w0, #0x5
    2af4:	add	w15, w0, #0x6
    2af8:	add	w16, w0, #0x7
    2afc:	add	w23, w0, #0x8
    2b00:	add	x7, x25, x7
    2b04:	str	x1, [sp, #104]
    2b08:	add	w1, w0, #0xa
    2b0c:	str	x1, [sp, #112]
    2b10:	add	w1, w0, #0xb
    2b14:	str	x1, [sp, #120]
    2b18:	ldr	w1, [x3]
    2b1c:	mov	w18, w4
    2b20:	ldrb	w8, [x7]
    2b24:	sub	w4, w4, w30
    2b28:	add	w1, w26, w1
    2b2c:	mov	x13, x3
    2b30:	ldrb	w17, [x25, w1, uxtw]
    2b34:	cmp	w17, w8
    2b38:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2b3c:	add	w8, w1, #0x1
    2b40:	ldrb	w17, [x25, x11]
    2b44:	ldrb	w8, [x25, w8, uxtw]
    2b48:	cmp	w8, w17
    2b4c:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2b50:	add	w8, w1, #0x2
    2b54:	ldrb	w17, [x25, x10]
    2b58:	ldrb	w8, [x25, w8, uxtw]
    2b5c:	cmp	w8, w17
    2b60:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2b64:	add	w8, w1, #0x3
    2b68:	ldrb	w17, [x25, x9]
    2b6c:	ldrb	w8, [x25, w8, uxtw]
    2b70:	cmp	w8, w17
    2b74:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2b78:	add	w8, w1, #0x4
    2b7c:	ldrb	w17, [x25, x12]
    2b80:	ldrb	w8, [x25, w8, uxtw]
    2b84:	cmp	w8, w17
    2b88:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2b8c:	add	w8, w1, #0x5
    2b90:	ldrb	w17, [x25, x14]
    2b94:	ldrb	w8, [x25, w8, uxtw]
    2b98:	cmp	w8, w17
    2b9c:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2ba0:	add	w8, w1, #0x6
    2ba4:	ldrb	w17, [x25, x15]
    2ba8:	ldrb	w8, [x25, w8, uxtw]
    2bac:	cmp	w8, w17
    2bb0:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2bb4:	add	w8, w1, #0x7
    2bb8:	ldrb	w17, [x25, x16]
    2bbc:	ldrb	w8, [x25, w8, uxtw]
    2bc0:	cmp	w8, w17
    2bc4:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2bc8:	add	w8, w1, #0x8
    2bcc:	ldrb	w17, [x25, x23]
    2bd0:	ldrb	w8, [x25, w8, uxtw]
    2bd4:	cmp	w8, w17
    2bd8:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2bdc:	ldr	x17, [sp, #104]
    2be0:	add	w8, w1, #0x9
    2be4:	ldrb	w17, [x25, x17]
    2be8:	ldrb	w8, [x25, w8, uxtw]
    2bec:	cmp	w8, w17
    2bf0:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2bf4:	ldr	x17, [sp, #112]
    2bf8:	add	w8, w1, #0xa
    2bfc:	ldrb	w17, [x25, x17]
    2c00:	ldrb	w8, [x25, w8, uxtw]
    2c04:	cmp	w8, w17
    2c08:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2c0c:	ldr	x17, [sp, #120]
    2c10:	add	w8, w1, #0xb
    2c14:	ldrb	w17, [x25, x17]
    2c18:	ldrb	w8, [x25, w8, uxtw]
    2c1c:	cmp	w8, w17
    2c20:	b.ne	2e38 <ferror@plt+0x1668>  // b.any
    2c24:	ldr	w8, [sp, #236]
    2c28:	add	w17, w0, #0xc
    2c2c:	str	x3, [sp, #280]
    2c30:	add	w1, w1, #0xc
    2c34:	add	w8, w8, #0x8
    2c38:	str	w18, [sp, #292]
    2c3c:	ldr	w18, [sp, #236]
    2c40:	ldr	x3, [sp, #296]
    2c44:	str	w0, [sp, #288]
    2c48:	mov	w0, w8
    2c4c:	str	x27, [sp, #128]
    2c50:	str	w30, [sp, #264]
    2c54:	str	w20, [sp, #276]
    2c58:	ldrb	w30, [x25, w1, uxtw]
    2c5c:	mov	w20, w1
    2c60:	ldrb	w27, [x25, w17, uxtw]
    2c64:	mov	w8, w17
    2c68:	cmp	w30, w27
    2c6c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2c70:	ldrh	w20, [x3, x20, lsl #1]
    2c74:	ldrh	w8, [x3, x8, lsl #1]
    2c78:	cmp	w20, w8
    2c7c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2c80:	add	w20, w1, #0x1
    2c84:	add	w8, w17, #0x1
    2c88:	add	w30, w1, #0x1
    2c8c:	add	w27, w17, #0x1
    2c90:	ldrb	w20, [x25, w20, uxtw]
    2c94:	ldrb	w8, [x25, w8, uxtw]
    2c98:	cmp	w20, w8
    2c9c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2ca0:	ldrh	w8, [x3, x30, lsl #1]
    2ca4:	ldrh	w20, [x3, x27, lsl #1]
    2ca8:	cmp	w8, w20
    2cac:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2cb0:	add	w30, w1, #0x2
    2cb4:	add	w8, w17, #0x2
    2cb8:	add	w27, w1, #0x2
    2cbc:	add	w20, w17, #0x2
    2cc0:	ldrb	w30, [x25, w30, uxtw]
    2cc4:	ldrb	w8, [x25, w8, uxtw]
    2cc8:	cmp	w30, w8
    2ccc:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2cd0:	ldrh	w8, [x3, x27, lsl #1]
    2cd4:	ldrh	w20, [x3, x20, lsl #1]
    2cd8:	cmp	w8, w20
    2cdc:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2ce0:	add	w30, w1, #0x3
    2ce4:	add	w8, w17, #0x3
    2ce8:	add	w27, w1, #0x3
    2cec:	add	w20, w17, #0x3
    2cf0:	ldrb	w30, [x25, w30, uxtw]
    2cf4:	ldrb	w8, [x25, w8, uxtw]
    2cf8:	cmp	w30, w8
    2cfc:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d00:	ldrh	w8, [x3, x27, lsl #1]
    2d04:	ldrh	w20, [x3, x20, lsl #1]
    2d08:	cmp	w8, w20
    2d0c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d10:	add	w20, w1, #0x4
    2d14:	add	w8, w17, #0x4
    2d18:	add	w30, w1, #0x4
    2d1c:	add	w27, w17, #0x4
    2d20:	ldrb	w20, [x25, w20, uxtw]
    2d24:	ldrb	w8, [x25, w8, uxtw]
    2d28:	cmp	w20, w8
    2d2c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d30:	ldrh	w8, [x3, x30, lsl #1]
    2d34:	ldrh	w20, [x3, x27, lsl #1]
    2d38:	cmp	w8, w20
    2d3c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d40:	add	w30, w1, #0x5
    2d44:	add	w8, w17, #0x5
    2d48:	add	w27, w1, #0x5
    2d4c:	add	w20, w17, #0x5
    2d50:	ldrb	w30, [x25, w30, uxtw]
    2d54:	ldrb	w8, [x25, w8, uxtw]
    2d58:	cmp	w30, w8
    2d5c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d60:	ldrh	w8, [x3, x27, lsl #1]
    2d64:	ldrh	w20, [x3, x20, lsl #1]
    2d68:	cmp	w8, w20
    2d6c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d70:	add	w30, w1, #0x6
    2d74:	add	w8, w17, #0x6
    2d78:	add	w27, w1, #0x6
    2d7c:	add	w20, w17, #0x6
    2d80:	ldrb	w30, [x25, w30, uxtw]
    2d84:	ldrb	w8, [x25, w8, uxtw]
    2d88:	cmp	w30, w8
    2d8c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2d90:	ldrh	w8, [x3, x27, lsl #1]
    2d94:	ldrh	w20, [x3, x20, lsl #1]
    2d98:	cmp	w8, w20
    2d9c:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2da0:	add	w30, w1, #0x7
    2da4:	add	w8, w17, #0x7
    2da8:	add	w27, w1, #0x7
    2dac:	add	w20, w17, #0x7
    2db0:	ldrb	w30, [x25, w30, uxtw]
    2db4:	ldrb	w8, [x25, w8, uxtw]
    2db8:	cmp	w30, w8
    2dbc:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2dc0:	ldrh	w8, [x3, x27, lsl #1]
    2dc4:	ldrh	w20, [x3, x20, lsl #1]
    2dc8:	cmp	w8, w20
    2dcc:	b.ne	2e20 <ferror@plt+0x1650>  // b.any
    2dd0:	ldr	w8, [x22]
    2dd4:	add	w1, w1, #0x8
    2dd8:	add	w17, w17, #0x8
    2ddc:	cmp	w1, w18
    2de0:	sub	w8, w8, #0x1
    2de4:	sub	w20, w1, w18
    2de8:	str	w8, [x22]
    2dec:	csel	w1, w20, w1, cs  // cs = hs, nlast
    2df0:	sub	w8, w17, w18
    2df4:	cmp	w17, w18
    2df8:	csel	w17, w8, w17, cs  // cs = hs, nlast
    2dfc:	subs	w0, w0, #0x8
    2e00:	b.pl	2c58 <ferror@plt+0x1488>  // b.nfrst
    2e04:	ldr	x0, [sp, #168]
    2e08:	ldr	w8, [sp, #292]
    2e0c:	ldr	w30, [sp, #264]
    2e10:	ldr	w20, [sp, #276]
    2e14:	add	x8, x0, w8, sxtw #2
    2e18:	ldr	x27, [sp, #128]
    2e1c:	b	2e60 <ferror@plt+0x1690>
    2e20:	ldr	w30, [sp, #264]
    2e24:	ldr	w20, [sp, #276]
    2e28:	ldr	w0, [sp, #288]
    2e2c:	ldr	x27, [sp, #128]
    2e30:	ldr	x3, [sp, #280]
    2e34:	nop
    2e38:	cset	w1, hi  // hi = pmore
    2e3c:	add	x8, x3, w30, sxtw #2
    2e40:	cbz	w1, 2e60 <ferror@plt+0x1690>
    2e44:	ldr	x8, [sp, #96]
    2e48:	cmp	w20, w4
    2e4c:	ldr	w1, [x3]
    2e50:	str	w1, [x3, x8, lsl #2]
    2e54:	add	x3, x3, x27
    2e58:	b.le	2b18 <ferror@plt+0x1348>
    2e5c:	mov	x8, x13
    2e60:	str	w6, [x8]
    2e64:	cmp	w24, w21
    2e68:	mov	w6, w24
    2e6c:	b.gt	3604 <ferror@plt+0x1e34>
    2e70:	mov	x3, x2
    2e74:	sub	x4, x5, #0x4
    2e78:	ldr	w8, [x3, #-4]!
    2e7c:	add	w0, w8, w26
    2e80:	add	w9, w8, w26
    2e84:	add	w1, w0, #0x8
    2e88:	str	x1, [sp, #104]
    2e8c:	add	w1, w0, #0x9
    2e90:	add	w12, w0, #0x1
    2e94:	add	w11, w0, #0x2
    2e98:	add	w10, w0, #0x3
    2e9c:	add	w13, w0, #0x4
    2ea0:	add	w15, w0, #0x5
    2ea4:	add	w16, w0, #0x6
    2ea8:	add	w23, w0, #0x7
    2eac:	add	x9, x25, x9
    2eb0:	str	x1, [sp, #112]
    2eb4:	add	w1, w0, #0xa
    2eb8:	str	x1, [sp, #120]
    2ebc:	add	w1, w0, #0xb
    2ec0:	str	x1, [sp, #128]
    2ec4:	nop
    2ec8:	ldr	w1, [x4]
    2ecc:	mov	w18, w6
    2ed0:	ldrb	w7, [x9]
    2ed4:	sub	w6, w6, w30
    2ed8:	add	w1, w26, w1
    2edc:	mov	x14, x4
    2ee0:	ldrb	w17, [x25, w1, uxtw]
    2ee4:	cmp	w17, w7
    2ee8:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2eec:	add	w7, w1, #0x1
    2ef0:	ldrb	w17, [x25, x12]
    2ef4:	ldrb	w7, [x25, w7, uxtw]
    2ef8:	cmp	w7, w17
    2efc:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f00:	add	w7, w1, #0x2
    2f04:	ldrb	w17, [x25, x11]
    2f08:	ldrb	w7, [x25, w7, uxtw]
    2f0c:	cmp	w7, w17
    2f10:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f14:	add	w7, w1, #0x3
    2f18:	ldrb	w17, [x25, x10]
    2f1c:	ldrb	w7, [x25, w7, uxtw]
    2f20:	cmp	w7, w17
    2f24:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f28:	add	w7, w1, #0x4
    2f2c:	ldrb	w17, [x25, x13]
    2f30:	ldrb	w7, [x25, w7, uxtw]
    2f34:	cmp	w7, w17
    2f38:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f3c:	add	w7, w1, #0x5
    2f40:	ldrb	w17, [x25, x15]
    2f44:	ldrb	w7, [x25, w7, uxtw]
    2f48:	cmp	w7, w17
    2f4c:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f50:	add	w7, w1, #0x6
    2f54:	ldrb	w17, [x25, x16]
    2f58:	ldrb	w7, [x25, w7, uxtw]
    2f5c:	cmp	w7, w17
    2f60:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f64:	add	w7, w1, #0x7
    2f68:	ldrb	w17, [x25, x23]
    2f6c:	ldrb	w7, [x25, w7, uxtw]
    2f70:	cmp	w7, w17
    2f74:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f78:	ldr	x17, [sp, #104]
    2f7c:	add	w7, w1, #0x8
    2f80:	ldrb	w17, [x25, x17]
    2f84:	ldrb	w7, [x25, w7, uxtw]
    2f88:	cmp	w7, w17
    2f8c:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2f90:	ldr	x17, [sp, #112]
    2f94:	add	w7, w1, #0x9
    2f98:	ldrb	w17, [x25, x17]
    2f9c:	ldrb	w7, [x25, w7, uxtw]
    2fa0:	cmp	w7, w17
    2fa4:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2fa8:	ldr	x17, [sp, #120]
    2fac:	add	w7, w1, #0xa
    2fb0:	ldrb	w17, [x25, x17]
    2fb4:	ldrb	w7, [x25, w7, uxtw]
    2fb8:	cmp	w7, w17
    2fbc:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2fc0:	ldr	x17, [sp, #128]
    2fc4:	add	w7, w1, #0xb
    2fc8:	ldrb	w17, [x25, x17]
    2fcc:	ldrb	w7, [x25, w7, uxtw]
    2fd0:	cmp	w7, w17
    2fd4:	b.ne	31e8 <ferror@plt+0x1a18>  // b.any
    2fd8:	ldr	w7, [sp, #236]
    2fdc:	add	w17, w0, #0xc
    2fe0:	str	x27, [sp, #264]
    2fe4:	add	x27, sp, #0x11c
    2fe8:	add	w7, w7, #0x8
    2fec:	add	w1, w1, #0xc
    2ff0:	str	w18, [sp, #316]
    2ff4:	stp	w30, w20, [x27, #-8]
    2ff8:	ldr	w20, [sp, #236]
    2ffc:	stp	w28, w0, [x27, #4]
    3000:	mov	w0, w7
    3004:	ldr	x7, [sp, #296]
    3008:	mov	w27, w1
    300c:	ldrb	w30, [x25, w1, uxtw]
    3010:	mov	w18, w17
    3014:	ldrb	w28, [x25, w17, uxtw]
    3018:	cmp	w30, w28
    301c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3020:	ldrh	w27, [x7, x27, lsl #1]
    3024:	ldrh	w18, [x7, x18, lsl #1]
    3028:	cmp	w27, w18
    302c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3030:	add	w30, w1, #0x1
    3034:	add	w18, w17, #0x1
    3038:	add	w28, w1, #0x1
    303c:	add	w27, w17, #0x1
    3040:	ldrb	w30, [x25, w30, uxtw]
    3044:	ldrb	w18, [x25, w18, uxtw]
    3048:	cmp	w30, w18
    304c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3050:	ldrh	w18, [x7, x28, lsl #1]
    3054:	ldrh	w27, [x7, x27, lsl #1]
    3058:	cmp	w18, w27
    305c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3060:	add	w30, w1, #0x2
    3064:	add	w18, w17, #0x2
    3068:	add	w28, w1, #0x2
    306c:	add	w27, w17, #0x2
    3070:	ldrb	w30, [x25, w30, uxtw]
    3074:	ldrb	w18, [x25, w18, uxtw]
    3078:	cmp	w30, w18
    307c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3080:	ldrh	w18, [x7, x28, lsl #1]
    3084:	ldrh	w27, [x7, x27, lsl #1]
    3088:	cmp	w18, w27
    308c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3090:	add	w30, w1, #0x3
    3094:	add	w18, w17, #0x3
    3098:	add	w28, w1, #0x3
    309c:	add	w27, w17, #0x3
    30a0:	ldrb	w30, [x25, w30, uxtw]
    30a4:	ldrb	w18, [x25, w18, uxtw]
    30a8:	cmp	w30, w18
    30ac:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    30b0:	ldrh	w18, [x7, x28, lsl #1]
    30b4:	ldrh	w27, [x7, x27, lsl #1]
    30b8:	cmp	w18, w27
    30bc:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    30c0:	add	w30, w1, #0x4
    30c4:	add	w18, w17, #0x4
    30c8:	add	w28, w1, #0x4
    30cc:	add	w27, w17, #0x4
    30d0:	ldrb	w30, [x25, w30, uxtw]
    30d4:	ldrb	w18, [x25, w18, uxtw]
    30d8:	cmp	w30, w18
    30dc:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    30e0:	ldrh	w18, [x7, x28, lsl #1]
    30e4:	ldrh	w27, [x7, x27, lsl #1]
    30e8:	cmp	w18, w27
    30ec:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    30f0:	add	w30, w1, #0x5
    30f4:	add	w18, w17, #0x5
    30f8:	add	w28, w1, #0x5
    30fc:	add	w27, w17, #0x5
    3100:	ldrb	w30, [x25, w30, uxtw]
    3104:	ldrb	w18, [x25, w18, uxtw]
    3108:	cmp	w30, w18
    310c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3110:	ldrh	w18, [x7, x28, lsl #1]
    3114:	ldrh	w27, [x7, x27, lsl #1]
    3118:	cmp	w18, w27
    311c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3120:	add	w30, w1, #0x6
    3124:	add	w18, w17, #0x6
    3128:	add	w28, w1, #0x6
    312c:	add	w27, w17, #0x6
    3130:	ldrb	w30, [x25, w30, uxtw]
    3134:	ldrb	w18, [x25, w18, uxtw]
    3138:	cmp	w30, w18
    313c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3140:	ldrh	w18, [x7, x28, lsl #1]
    3144:	ldrh	w27, [x7, x27, lsl #1]
    3148:	cmp	w18, w27
    314c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3150:	add	w30, w1, #0x7
    3154:	add	w18, w17, #0x7
    3158:	add	w28, w1, #0x7
    315c:	add	w27, w17, #0x7
    3160:	ldrb	w30, [x25, w30, uxtw]
    3164:	ldrb	w18, [x25, w18, uxtw]
    3168:	cmp	w30, w18
    316c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3170:	ldrh	w18, [x7, x28, lsl #1]
    3174:	ldrh	w27, [x7, x27, lsl #1]
    3178:	cmp	w18, w27
    317c:	b.ne	31d4 <ferror@plt+0x1a04>  // b.any
    3180:	ldr	w18, [x22]
    3184:	add	w1, w1, #0x8
    3188:	add	w17, w17, #0x8
    318c:	cmp	w1, w20
    3190:	sub	w18, w18, #0x1
    3194:	sub	w27, w1, w20
    3198:	str	w18, [x22]
    319c:	csel	w1, w27, w1, cs  // cs = hs, nlast
    31a0:	sub	w18, w17, w20
    31a4:	cmp	w17, w20
    31a8:	csel	w17, w18, w17, cs  // cs = hs, nlast
    31ac:	subs	w0, w0, #0x8
    31b0:	b.pl	3008 <ferror@plt+0x1838>  // b.nfrst
    31b4:	ldr	x0, [sp, #168]
    31b8:	ldr	w7, [sp, #316]
    31bc:	ldr	w30, [sp, #276]
    31c0:	ldr	w20, [sp, #280]
    31c4:	ldr	w28, [sp, #288]
    31c8:	add	x7, x0, w7, sxtw #2
    31cc:	ldr	x27, [sp, #264]
    31d0:	b	3210 <ferror@plt+0x1a40>
    31d4:	add	x1, sp, #0x11c
    31d8:	ldr	x27, [sp, #264]
    31dc:	ldp	w30, w20, [x1, #-8]
    31e0:	ldp	w28, w0, [x1, #4]
    31e4:	nop
    31e8:	cset	w1, hi  // hi = pmore
    31ec:	mov	x7, x3
    31f0:	cbz	w1, 3210 <ferror@plt+0x1a40>
    31f4:	ldr	w1, [x4]
    31f8:	cmp	w20, w6
    31fc:	str	w1, [x3]
    3200:	add	x4, x4, x27
    3204:	add	x3, x7, x27
    3208:	b.le	2ec8 <ferror@plt+0x16f8>
    320c:	mov	x7, x14
    3210:	str	w8, [x7]
    3214:	cmp	w19, w21
    3218:	mov	w4, w19
    321c:	b.gt	3604 <ferror@plt+0x1e34>
    3220:	ldr	w7, [x2]
    3224:	mov	x9, x2
    3228:	mov	x3, x5
    322c:	add	w0, w7, w26
    3230:	add	w8, w7, w26
    3234:	add	w1, w0, #0x8
    3238:	str	x1, [sp, #104]
    323c:	add	w1, w0, #0x9
    3240:	add	w12, w0, #0x1
    3244:	add	w11, w0, #0x2
    3248:	add	w10, w0, #0x3
    324c:	add	w13, w0, #0x4
    3250:	add	w15, w0, #0x5
    3254:	add	w16, w0, #0x6
    3258:	add	w23, w0, #0x7
    325c:	add	x8, x25, x8
    3260:	str	x1, [sp, #112]
    3264:	add	w1, w0, #0xa
    3268:	str	x1, [sp, #120]
    326c:	add	w1, w0, #0xb
    3270:	str	x1, [sp, #128]
    3274:	nop
    3278:	ldr	w1, [x3]
    327c:	mov	w18, w4
    3280:	ldrb	w6, [x8]
    3284:	sub	w4, w4, w30
    3288:	add	w1, w26, w1
    328c:	mov	x14, x3
    3290:	ldrb	w17, [x25, w1, uxtw]
    3294:	cmp	w17, w6
    3298:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    329c:	add	w6, w1, #0x1
    32a0:	ldrb	w17, [x25, x12]
    32a4:	ldrb	w6, [x25, w6, uxtw]
    32a8:	cmp	w6, w17
    32ac:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    32b0:	add	w6, w1, #0x2
    32b4:	ldrb	w17, [x25, x11]
    32b8:	ldrb	w6, [x25, w6, uxtw]
    32bc:	cmp	w6, w17
    32c0:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    32c4:	add	w6, w1, #0x3
    32c8:	ldrb	w17, [x25, x10]
    32cc:	ldrb	w6, [x25, w6, uxtw]
    32d0:	cmp	w6, w17
    32d4:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    32d8:	add	w6, w1, #0x4
    32dc:	ldrb	w17, [x25, x13]
    32e0:	ldrb	w6, [x25, w6, uxtw]
    32e4:	cmp	w6, w17
    32e8:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    32ec:	add	w6, w1, #0x5
    32f0:	ldrb	w17, [x25, x15]
    32f4:	ldrb	w6, [x25, w6, uxtw]
    32f8:	cmp	w6, w17
    32fc:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3300:	add	w6, w1, #0x6
    3304:	ldrb	w17, [x25, x16]
    3308:	ldrb	w6, [x25, w6, uxtw]
    330c:	cmp	w6, w17
    3310:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3314:	add	w6, w1, #0x7
    3318:	ldrb	w17, [x25, x23]
    331c:	ldrb	w6, [x25, w6, uxtw]
    3320:	cmp	w6, w17
    3324:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3328:	ldr	x17, [sp, #104]
    332c:	add	w6, w1, #0x8
    3330:	ldrb	w17, [x25, x17]
    3334:	ldrb	w6, [x25, w6, uxtw]
    3338:	cmp	w6, w17
    333c:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3340:	ldr	x17, [sp, #112]
    3344:	add	w6, w1, #0x9
    3348:	ldrb	w17, [x25, x17]
    334c:	ldrb	w6, [x25, w6, uxtw]
    3350:	cmp	w6, w17
    3354:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3358:	ldr	x17, [sp, #120]
    335c:	add	w6, w1, #0xa
    3360:	ldrb	w17, [x25, x17]
    3364:	ldrb	w6, [x25, w6, uxtw]
    3368:	cmp	w6, w17
    336c:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3370:	ldr	x17, [sp, #128]
    3374:	add	w6, w1, #0xb
    3378:	ldrb	w17, [x25, x17]
    337c:	ldrb	w6, [x25, w6, uxtw]
    3380:	cmp	w6, w17
    3384:	b.ne	3598 <ferror@plt+0x1dc8>  // b.any
    3388:	ldr	w6, [sp, #236]
    338c:	add	w17, w0, #0xc
    3390:	str	x27, [sp, #264]
    3394:	add	x27, sp, #0x11c
    3398:	add	w6, w6, #0x8
    339c:	add	w1, w1, #0xc
    33a0:	str	w18, [sp, #316]
    33a4:	stp	w30, w20, [x27, #-8]
    33a8:	ldr	w20, [sp, #236]
    33ac:	stp	w28, w0, [x27, #4]
    33b0:	mov	w0, w6
    33b4:	ldr	x6, [sp, #296]
    33b8:	mov	w27, w1
    33bc:	ldrb	w30, [x25, w1, uxtw]
    33c0:	mov	w18, w17
    33c4:	ldrb	w28, [x25, w17, uxtw]
    33c8:	cmp	w30, w28
    33cc:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    33d0:	ldrh	w27, [x6, x27, lsl #1]
    33d4:	ldrh	w18, [x6, x18, lsl #1]
    33d8:	cmp	w27, w18
    33dc:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    33e0:	add	w30, w1, #0x1
    33e4:	add	w18, w17, #0x1
    33e8:	add	w28, w1, #0x1
    33ec:	add	w27, w17, #0x1
    33f0:	ldrb	w30, [x25, w30, uxtw]
    33f4:	ldrb	w18, [x25, w18, uxtw]
    33f8:	cmp	w30, w18
    33fc:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3400:	ldrh	w18, [x6, x28, lsl #1]
    3404:	ldrh	w27, [x6, x27, lsl #1]
    3408:	cmp	w18, w27
    340c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3410:	add	w30, w1, #0x2
    3414:	add	w18, w17, #0x2
    3418:	add	w28, w1, #0x2
    341c:	add	w27, w17, #0x2
    3420:	ldrb	w30, [x25, w30, uxtw]
    3424:	ldrb	w18, [x25, w18, uxtw]
    3428:	cmp	w30, w18
    342c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3430:	ldrh	w18, [x6, x28, lsl #1]
    3434:	ldrh	w27, [x6, x27, lsl #1]
    3438:	cmp	w18, w27
    343c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3440:	add	w30, w1, #0x3
    3444:	add	w18, w17, #0x3
    3448:	add	w28, w1, #0x3
    344c:	add	w27, w17, #0x3
    3450:	ldrb	w30, [x25, w30, uxtw]
    3454:	ldrb	w18, [x25, w18, uxtw]
    3458:	cmp	w30, w18
    345c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3460:	ldrh	w18, [x6, x28, lsl #1]
    3464:	ldrh	w27, [x6, x27, lsl #1]
    3468:	cmp	w18, w27
    346c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3470:	add	w30, w1, #0x4
    3474:	add	w18, w17, #0x4
    3478:	add	w28, w1, #0x4
    347c:	add	w27, w17, #0x4
    3480:	ldrb	w30, [x25, w30, uxtw]
    3484:	ldrb	w18, [x25, w18, uxtw]
    3488:	cmp	w30, w18
    348c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3490:	ldrh	w18, [x6, x28, lsl #1]
    3494:	ldrh	w27, [x6, x27, lsl #1]
    3498:	cmp	w18, w27
    349c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    34a0:	add	w30, w1, #0x5
    34a4:	add	w18, w17, #0x5
    34a8:	add	w28, w1, #0x5
    34ac:	add	w27, w17, #0x5
    34b0:	ldrb	w30, [x25, w30, uxtw]
    34b4:	ldrb	w18, [x25, w18, uxtw]
    34b8:	cmp	w30, w18
    34bc:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    34c0:	ldrh	w18, [x6, x28, lsl #1]
    34c4:	ldrh	w27, [x6, x27, lsl #1]
    34c8:	cmp	w18, w27
    34cc:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    34d0:	add	w27, w1, #0x6
    34d4:	add	w18, w17, #0x6
    34d8:	add	w30, w1, #0x6
    34dc:	add	w28, w17, #0x6
    34e0:	ldrb	w27, [x25, w27, uxtw]
    34e4:	ldrb	w18, [x25, w18, uxtw]
    34e8:	cmp	w27, w18
    34ec:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    34f0:	ldrh	w18, [x6, x30, lsl #1]
    34f4:	ldrh	w27, [x6, x28, lsl #1]
    34f8:	cmp	w18, w27
    34fc:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3500:	add	w30, w1, #0x7
    3504:	add	w18, w17, #0x7
    3508:	add	w28, w1, #0x7
    350c:	add	w27, w17, #0x7
    3510:	ldrb	w30, [x25, w30, uxtw]
    3514:	ldrb	w18, [x25, w18, uxtw]
    3518:	cmp	w30, w18
    351c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3520:	ldrh	w18, [x6, x28, lsl #1]
    3524:	ldrh	w27, [x6, x27, lsl #1]
    3528:	cmp	w18, w27
    352c:	b.ne	3584 <ferror@plt+0x1db4>  // b.any
    3530:	ldr	w18, [x22]
    3534:	add	w1, w1, #0x8
    3538:	add	w17, w17, #0x8
    353c:	cmp	w1, w20
    3540:	sub	w18, w18, #0x1
    3544:	sub	w27, w1, w20
    3548:	str	w18, [x22]
    354c:	csel	w1, w27, w1, cs  // cs = hs, nlast
    3550:	sub	w18, w17, w20
    3554:	cmp	w17, w20
    3558:	csel	w17, w18, w17, cs  // cs = hs, nlast
    355c:	subs	w0, w0, #0x8
    3560:	b.pl	33b8 <ferror@plt+0x1be8>  // b.nfrst
    3564:	ldr	x0, [sp, #168]
    3568:	ldr	w6, [sp, #316]
    356c:	ldr	w30, [sp, #276]
    3570:	ldr	w20, [sp, #280]
    3574:	ldr	w28, [sp, #288]
    3578:	add	x6, x0, w6, sxtw #2
    357c:	ldr	x27, [sp, #264]
    3580:	b	35c0 <ferror@plt+0x1df0>
    3584:	add	x1, sp, #0x11c
    3588:	ldr	x27, [sp, #264]
    358c:	ldp	w30, w20, [x1, #-8]
    3590:	ldp	w28, w0, [x1, #4]
    3594:	nop
    3598:	cset	w1, hi  // hi = pmore
    359c:	mov	x6, x9
    35a0:	cbz	w1, 35c0 <ferror@plt+0x1df0>
    35a4:	ldr	w1, [x3]
    35a8:	cmp	w20, w4
    35ac:	str	w1, [x9]
    35b0:	add	x3, x3, x27
    35b4:	add	x9, x6, x27
    35b8:	b.le	3278 <ferror@plt+0x1aa8>
    35bc:	mov	x6, x14
    35c0:	str	w7, [x6]
    35c4:	add	w28, w28, #0x3
    35c8:	add	w19, w19, #0x3
    35cc:	add	x5, x5, #0xc
    35d0:	ldr	w0, [x22]
    35d4:	add	x2, x2, #0xc
    35d8:	add	w24, w24, #0x3
    35dc:	tbz	w0, #31, 2ac0 <ferror@plt+0x12f0>
    35e0:	mov	x12, #0x1300                	// #4864
    35e4:	ldp	x29, x30, [sp]
    35e8:	ldp	x19, x20, [sp, #16]
    35ec:	ldp	x21, x22, [sp, #32]
    35f0:	ldp	x23, x24, [sp, #48]
    35f4:	ldp	x25, x26, [sp, #64]
    35f8:	ldp	x27, x28, [sp, #80]
    35fc:	add	sp, sp, x12
    3600:	ret
    3604:	ldr	x0, [sp, #144]
    3608:	sub	x0, x0, #0x1
    360c:	str	x0, [sp, #144]
    3610:	cmn	w0, #0x1
    3614:	b.ne	2a7c <ferror@plt+0x12ac>  // b.any
    3618:	ldr	x0, [sp, #192]
    361c:	ldr	w0, [x0]
    3620:	tbnz	w0, #31, 35e0 <ferror@plt+0x1e10>
    3624:	ldr	w0, [sp, #212]
    3628:	cbnz	w0, 3fc0 <ferror@plt+0x27f0>
    362c:	ldr	w0, [sp, #232]
    3630:	mov	x24, x25
    3634:	add	w1, w0, #0x1
    3638:	ldp	x0, x2, [sp, #152]
    363c:	ldr	w0, [x0, x2, lsl #2]
    3640:	ldr	w2, [sp, #228]
    3644:	add	w1, w2, w1
    3648:	str	w1, [sp, #228]
    364c:	ldp	x1, x2, [sp, #152]
    3650:	orr	w0, w0, #0x200000
    3654:	str	w0, [x1, x2, lsl #2]
    3658:	ldr	w0, [sp, #140]
    365c:	add	w0, w0, #0x1
    3660:	str	w0, [sp, #140]
    3664:	cmp	w0, #0x100
    3668:	b.ne	2930 <ferror@plt+0x1160>  // b.any
    366c:	ldr	w1, [sp, #208]
    3670:	mov	x26, x24
    3674:	ldr	x0, [sp, #256]
    3678:	sxtw	x20, w1
    367c:	ldrb	w0, [x0, w1, sxtw]
    3680:	cbnz	w0, 3f78 <ferror@plt+0x27a8>
    3684:	ldr	x0, [sp, #152]
    3688:	lsl	x21, x20, #2
    368c:	add	x7, sp, #0xb00
    3690:	add	x6, sp, #0xf00
    3694:	add	x19, x0, x21
    3698:	mov	x2, #0x1                   	// #1
    369c:	mov	x3, x19
    36a0:	ldp	w4, w0, [x3]
    36a4:	lsl	x1, x2, #2
    36a8:	add	x5, x6, x1
    36ac:	add	x1, x7, x1
    36b0:	and	w0, w0, #0xffdfffff
    36b4:	and	w4, w4, #0xffdfffff
    36b8:	sub	w0, w0, #0x1
    36bc:	add	x2, x2, #0x1
    36c0:	stur	w4, [x1, #-4]
    36c4:	cmp	x2, #0x101
    36c8:	stur	w0, [x5, #-4]
    36cc:	add	x3, x3, #0x400
    36d0:	b.ne	36a0 <ferror@plt+0x1ed0>  // b.any
    36d4:	ldrsw	x22, [sp, #224]
    36d8:	lsl	x4, x20, #2
    36dc:	ldr	x0, [sp, #152]
    36e0:	ldr	w3, [x7, x20, lsl #2]
    36e4:	ldr	w1, [x0, x22, lsl #2]
    36e8:	and	w1, w1, #0xffdfffff
    36ec:	cmp	w1, w3
    36f0:	b.ge	3744 <ferror@plt+0x1f74>  // b.tcont
    36f4:	ldr	x5, [sp, #168]
    36f8:	sxtw	x1, w1
    36fc:	nop
    3700:	ldr	w0, [x5, x1, lsl #2]
    3704:	ldr	w2, [sp, #236]
    3708:	subs	w0, w0, #0x1
    370c:	add	w2, w0, w2
    3710:	csel	w0, w2, w0, mi  // mi = first
    3714:	ldr	x8, [sp, #256]
    3718:	ldrb	w3, [x26, w0, sxtw]
    371c:	ldrb	w2, [x8, w3, sxtw]
    3720:	cbnz	w2, 3b20 <ferror@plt+0x2350>
    3724:	ldr	w2, [x7, x3, lsl #2]
    3728:	add	x1, x1, #0x1
    372c:	add	w8, w2, #0x1
    3730:	str	w8, [x7, x3, lsl #2]
    3734:	ldr	w3, [x7, x4]
    3738:	str	w0, [x5, w2, sxtw #2]
    373c:	cmp	w3, w1
    3740:	b.gt	3700 <ferror@plt+0x1f30>
    3744:	ldr	w0, [sp, #208]
    3748:	lsl	x5, x20, #2
    374c:	ldr	x1, [sp, #152]
    3750:	add	w23, w0, #0x1
    3754:	ldr	w0, [x6, x20, lsl #2]
    3758:	lsl	w23, w23, #8
    375c:	sxtw	x23, w23
    3760:	ldr	w1, [x1, x23, lsl #2]
    3764:	and	w1, w1, #0xffdfffff
    3768:	sub	w1, w1, #0x1
    376c:	cmp	w1, w0
    3770:	b.le	37c4 <ferror@plt+0x1ff4>
    3774:	ldr	x7, [sp, #168]
    3778:	sxtw	x1, w1
    377c:	nop
    3780:	ldr	w0, [x7, x1, lsl #2]
    3784:	ldr	w2, [sp, #236]
    3788:	subs	w0, w0, #0x1
    378c:	add	w2, w0, w2
    3790:	csel	w0, w2, w0, mi  // mi = first
    3794:	ldr	x8, [sp, #256]
    3798:	ldrb	w4, [x26, w0, sxtw]
    379c:	ldrb	w2, [x8, w4, sxtw]
    37a0:	cbnz	w2, 3b34 <ferror@plt+0x2364>
    37a4:	ldr	w2, [x6, x4, lsl #2]
    37a8:	sub	x1, x1, #0x1
    37ac:	sub	w8, w2, #0x1
    37b0:	str	w8, [x6, x4, lsl #2]
    37b4:	str	w0, [x7, w2, sxtw #2]
    37b8:	ldr	w0, [x6, x5]
    37bc:	cmp	w0, w1
    37c0:	b.lt	3780 <ferror@plt+0x1fb0>  // b.tstop
    37c4:	sub	w1, w3, #0x1
    37c8:	cmp	w1, w0
    37cc:	b.eq	37e8 <ferror@plt+0x2018>  // b.none
    37d0:	ldr	w1, [sp, #312]
    37d4:	cmp	w3, #0x0
    37d8:	ccmp	w1, w0, #0x0, eq  // eq = none
    37dc:	b.eq	37e8 <ferror@plt+0x2018>  // b.none
    37e0:	mov	w0, #0x3ef                 	// #1007
    37e4:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    37e8:	ldr	x0, [sp, #152]
    37ec:	add	x0, x0, #0x40, lsl #12
    37f0:	add	x21, x0, x21
    37f4:	nop
    37f8:	ldr	w0, [x19]
    37fc:	orr	w0, w0, #0x200000
    3800:	str	w0, [x19]
    3804:	add	x19, x19, #0x400
    3808:	cmp	x21, x19
    380c:	b.ne	37f8 <ferror@plt+0x2028>  // b.any
    3810:	ldr	w2, [sp, #208]
    3814:	mov	w0, #0x1                   	// #1
    3818:	ldr	x1, [sp, #256]
    381c:	strb	w0, [x1, w2, sxtw]
    3820:	ldr	x1, [sp, #304]
    3824:	ldr	x0, [sp, #328]
    3828:	cmp	x0, x1
    382c:	b.eq	38d8 <ferror@plt+0x2108>  // b.none
    3830:	ldr	x0, [sp, #152]
    3834:	mov	w3, #0xfffe                	// #65534
    3838:	ldr	w4, [x0, x22, lsl #2]
    383c:	ldr	w0, [x0, x23, lsl #2]
    3840:	and	w4, w4, #0xffdfffff
    3844:	and	w0, w0, #0xffdfffff
    3848:	sub	w0, w0, w4
    384c:	sub	w6, w0, #0x1
    3850:	cmp	w0, w3
    3854:	b.le	3f84 <ferror@plt+0x27b4>
    3858:	mov	w1, #0x0                   	// #0
    385c:	add	w1, w1, #0x1
    3860:	asr	w2, w0, w1
    3864:	cmp	w2, w3
    3868:	b.gt	385c <ferror@plt+0x208c>
    386c:	ldr	x0, [sp, #168]
    3870:	ldr	w8, [sp, #236]
    3874:	ldr	x5, [sp, #296]
    3878:	add	x4, x0, w4, sxtw #2
    387c:	sxtw	x0, w6
    3880:	ldr	w3, [x4, x0, lsl #2]
    3884:	asr	w2, w0, w1
    3888:	and	w2, w2, #0xffff
    388c:	sub	x0, x0, #0x1
    3890:	add	w7, w8, w3
    3894:	cmp	w3, #0x21
    3898:	strh	w2, [x5, w3, sxtw #1]
    389c:	b.gt	38a4 <ferror@plt+0x20d4>
    38a0:	strh	w2, [x5, w7, sxtw #1]
    38a4:	tbz	w0, #31, 3880 <ferror@plt+0x20b0>
    38a8:	asr	w1, w6, w1
    38ac:	mov	w0, #0xffff                	// #65535
    38b0:	cmp	w1, w0
    38b4:	b.le	38c0 <ferror@plt+0x20f0>
    38b8:	mov	w0, #0x3ea                 	// #1002
    38bc:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    38c0:	ldr	x0, [sp, #304]
    38c4:	ldr	x1, [sp, #320]
    38c8:	add	x0, x0, #0x4
    38cc:	str	x0, [sp, #304]
    38d0:	cmp	x1, x0
    38d4:	b.ne	2908 <ferror@plt+0x1138>  // b.any
    38d8:	ldr	w0, [sp, #272]
    38dc:	cmp	w0, #0x3
    38e0:	b.le	35e0 <ferror@plt+0x1e10>
    38e4:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    38e8:	ldr	w3, [sp, #228]
    38ec:	ldp	x29, x30, [sp]
    38f0:	mov	x12, #0x1300                	// #4864
    38f4:	ldr	x0, [x0, #4008]
    38f8:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    38fc:	ldp	x19, x20, [sp, #16]
    3900:	add	x1, x1, #0xf10
    3904:	ldp	x21, x22, [sp, #32]
    3908:	ldp	x23, x24, [sp, #48]
    390c:	ldp	x25, x26, [sp, #64]
    3910:	ldp	x27, x28, [sp, #80]
    3914:	ldr	w2, [sp, #236]
    3918:	ldr	x0, [x0]
    391c:	sub	w4, w2, w3
    3920:	add	sp, sp, x12
    3924:	b	17c0 <fprintf@plt>
    3928:	mov	w7, w4
    392c:	add	x12, x12, #0x1
    3930:	cmp	w12, #0xff
    3934:	add	x17, x17, #0x1
    3938:	add	x13, x13, #0x4
    393c:	str	w14, [x15, w7, sxtw #2]
    3940:	b.le	2860 <ferror@plt+0x1090>
    3944:	b	28e0 <ferror@plt+0x1110>
    3948:	ldr	w2, [sp, #184]
    394c:	ldr	x1, [sp, #168]
    3950:	add	w0, w2, w24
    3954:	sxtw	x9, w2
    3958:	sbfiz	x13, x2, #2, #32
    395c:	asr	w0, w0, #1
    3960:	add	x11, x1, x13
    3964:	ldr	w3, [x1, w24, sxtw #2]
    3968:	ldr	w2, [x1, x9, lsl #2]
    396c:	add	w3, w26, w3
    3970:	ldr	w1, [x1, w0, sxtw #2]
    3974:	add	w2, w26, w2
    3978:	add	w1, w26, w1
    397c:	ldrb	w6, [x25, w3, uxtw]
    3980:	ldrb	w0, [x25, w2, uxtw]
    3984:	ldrb	w1, [x25, w1, uxtw]
    3988:	cmp	w0, w6
    398c:	csel	w2, w0, w6, ls  // ls = plast
    3990:	csel	w6, w6, w0, ls  // ls = plast
    3994:	cmp	w1, w6
    3998:	b.cs	39a8 <ferror@plt+0x21d8>  // b.hs, b.nlast
    399c:	cmp	w2, w1
    39a0:	csel	w1, w2, w1, hi  // hi = pmore
    39a4:	and	w6, w1, #0xff
    39a8:	ldr	w1, [sp, #184]
    39ac:	cmp	w1, w24
    39b0:	b.gt	3a5c <ferror@plt+0x228c>
    39b4:	mov	w4, w1
    39b8:	sub	w0, w0, w6
    39bc:	mov	x12, x11
    39c0:	mov	x7, x11
    39c4:	mov	w5, w24
    39c8:	mov	w10, w1
    39cc:	mov	w2, w24
    39d0:	mov	w8, w4
    39d4:	cmp	w0, #0x0
    39d8:	ldr	x14, [sp, #168]
    39dc:	cbz	w0, 3ac4 <ferror@plt+0x22f4>
    39e0:	b.le	3ae8 <ferror@plt+0x2318>
    39e4:	cmp	w4, w2
    39e8:	b.gt	3a54 <ferror@plt+0x2284>
    39ec:	add	x1, x14, w2, sxtw #2
    39f0:	b	3a04 <ferror@plt+0x2234>
    39f4:	b.mi	3a34 <ferror@plt+0x2264>  // b.first
    39f8:	sub	x1, x1, #0x4
    39fc:	cmp	w4, w2
    3a00:	b.gt	3a54 <ferror@plt+0x2284>
    3a04:	ldr	w3, [x1]
    3a08:	sub	w2, w2, #0x1
    3a0c:	add	w0, w26, w3
    3a10:	ldrb	w0, [x25, w0, uxtw]
    3a14:	subs	w0, w0, w6
    3a18:	cbnz	w0, 39f4 <ferror@plt+0x2224>
    3a1c:	sxtw	x0, w5
    3a20:	sub	w5, w5, #0x1
    3a24:	ldr	w15, [x14, x0, lsl #2]
    3a28:	str	w15, [x1]
    3a2c:	str	w3, [x14, x0, lsl #2]
    3a30:	b	39f8 <ferror@plt+0x2228>
    3a34:	add	w8, w4, #0x1
    3a38:	ldr	w0, [x7]
    3a3c:	mov	w4, w8
    3a40:	str	w3, [x7]
    3a44:	str	w0, [x1]
    3a48:	add	x7, x7, #0x4
    3a4c:	cmp	w4, w2
    3a50:	b.le	3aa8 <ferror@plt+0x22d8>
    3a54:	cmp	w10, w5
    3a58:	b.le	3b48 <ferror@plt+0x2378>
    3a5c:	ldr	w2, [sp, #212]
    3a60:	add	w0, w26, #0x1
    3a64:	ldr	x1, [sp, #216]
    3a68:	str	w0, [x1, w2, sxtw #2]
    3a6c:	ldrsw	x0, [sp, #212]
    3a70:	ldr	x1, [sp, #240]
    3a74:	ldr	w1, [x1, x0, lsl #2]
    3a78:	str	w1, [sp, #184]
    3a7c:	ldr	x1, [sp, #248]
    3a80:	ldr	w24, [x1, x0, lsl #2]
    3a84:	ldr	x1, [sp, #216]
    3a88:	ldr	w26, [x1, x0, lsl #2]
    3a8c:	cmp	w19, #0x61
    3a90:	b.le	3a9c <ferror@plt+0x22cc>
    3a94:	mov	w0, #0x3e9                 	// #1001
    3a98:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    3a9c:	ldr	w0, [sp, #184]
    3aa0:	sub	w20, w24, w0
    3aa4:	b	29c4 <ferror@plt+0x11f4>
    3aa8:	ldr	w0, [x14, w4, sxtw #2]
    3aac:	mov	w8, w4
    3ab0:	add	w0, w26, w0
    3ab4:	ldrb	w0, [x25, w0, uxtw]
    3ab8:	sub	w0, w0, w6
    3abc:	cmp	w0, #0x0
    3ac0:	cbnz	w0, 39e0 <ferror@plt+0x2210>
    3ac4:	sxtw	x0, w10
    3ac8:	ldr	w1, [x7]
    3acc:	add	w4, w4, #0x1
    3ad0:	add	w10, w10, #0x1
    3ad4:	mov	w8, w4
    3ad8:	ldr	w3, [x14, x0, lsl #2]
    3adc:	str	w3, [x7]
    3ae0:	str	w1, [x14, x0, lsl #2]
    3ae4:	b	3a48 <ferror@plt+0x2278>
    3ae8:	add	w4, w4, #0x1
    3aec:	mov	w8, w4
    3af0:	b	3a48 <ferror@plt+0x2278>
    3af4:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    3af8:	ldr	w3, [sp, #140]
    3afc:	ldr	w2, [sp, #208]
    3b00:	add	w5, w20, #0x1
    3b04:	ldr	x0, [x0, #4008]
    3b08:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    3b0c:	ldr	w4, [sp, #228]
    3b10:	add	x1, x1, #0xee0
    3b14:	ldr	x0, [x0]
    3b18:	bl	17c0 <fprintf@plt>
    3b1c:	b	2990 <ferror@plt+0x11c0>
    3b20:	ldr	w3, [x7, x4]
    3b24:	add	x1, x1, #0x1
    3b28:	cmp	w3, w1
    3b2c:	b.gt	3700 <ferror@plt+0x1f30>
    3b30:	b	3744 <ferror@plt+0x1f74>
    3b34:	ldr	w0, [x6, x5]
    3b38:	sub	x1, x1, #0x1
    3b3c:	cmp	w0, w1
    3b40:	b.lt	3780 <ferror@plt+0x1fb0>  // b.tstop
    3b44:	b	37c4 <ferror@plt+0x1ff4>
    3b48:	ldr	w0, [sp, #184]
    3b4c:	sub	w3, w8, w10
    3b50:	sub	w0, w10, w0
    3b54:	cmp	w3, w0
    3b58:	csel	w3, w3, w0, le
    3b5c:	cmp	w3, #0x0
    3b60:	sub	w6, w8, w3
    3b64:	b.le	3c4c <ferror@plt+0x247c>
    3b68:	sxtw	x7, w6
    3b6c:	add	x14, x13, #0x10
    3b70:	add	x4, x7, #0x4
    3b74:	sub	w0, w3, #0x1
    3b78:	lsl	x4, x4, #2
    3b7c:	sub	x1, x4, #0x10
    3b80:	cmp	x1, x14
    3b84:	ccmp	x13, x4, #0x0, lt  // lt = tstop
    3b88:	ccmp	w0, #0x4, #0x0, ge  // ge = tcont
    3b8c:	b.ls	3efc <ferror@plt+0x272c>  // b.plast
    3b90:	lsr	w4, w3, #2
    3b94:	ldr	x0, [sp, #168]
    3b98:	lsl	x4, x4, #4
    3b9c:	add	x1, x0, x1
    3ba0:	mov	x0, #0x0                   	// #0
    3ba4:	nop
    3ba8:	ldr	q1, [x1, x0]
    3bac:	ldr	q0, [x11, x0]
    3bb0:	str	q1, [x11, x0]
    3bb4:	str	q0, [x1, x0]
    3bb8:	add	x0, x0, #0x10
    3bbc:	cmp	x4, x0
    3bc0:	b.ne	3ba8 <ferror@plt+0x23d8>  // b.any
    3bc4:	ldr	w1, [sp, #184]
    3bc8:	and	w0, w3, #0xfffffffc
    3bcc:	cmp	w0, w3
    3bd0:	add	w6, w6, w0
    3bd4:	sub	w3, w3, w0
    3bd8:	add	w0, w1, w0
    3bdc:	b.eq	3c4c <ferror@plt+0x247c>  // b.none
    3be0:	ldr	x11, [sp, #168]
    3be4:	sxtw	x1, w6
    3be8:	sxtw	x4, w0
    3bec:	cmp	w3, #0x1
    3bf0:	add	w6, w6, #0x1
    3bf4:	add	w0, w0, #0x1
    3bf8:	ldr	w9, [x11, x1, lsl #2]
    3bfc:	ldr	w7, [x11, x4, lsl #2]
    3c00:	str	w9, [x11, x4, lsl #2]
    3c04:	str	w7, [x11, x1, lsl #2]
    3c08:	b.eq	3c4c <ferror@plt+0x247c>  // b.none
    3c0c:	sxtw	x1, w6
    3c10:	sxtw	x4, w0
    3c14:	cmp	w3, #0x2
    3c18:	sbfiz	x6, x6, #2, #32
    3c1c:	sbfiz	x0, x0, #2, #32
    3c20:	ldr	w7, [x11, x1, lsl #2]
    3c24:	ldr	w3, [x11, x4, lsl #2]
    3c28:	str	w7, [x11, x4, lsl #2]
    3c2c:	str	w3, [x11, x1, lsl #2]
    3c30:	b.eq	3c4c <ferror@plt+0x247c>  // b.none
    3c34:	add	x1, x6, #0x4
    3c38:	add	x0, x0, #0x4
    3c3c:	ldr	w4, [x11, x1]
    3c40:	ldr	w3, [x11, x0]
    3c44:	str	w4, [x11, x0]
    3c48:	str	w3, [x11, x1]
    3c4c:	sub	w2, w5, w2
    3c50:	sub	w1, w24, w5
    3c54:	cmp	w1, w2
    3c58:	csel	w4, w1, w2, le
    3c5c:	sub	w5, w24, w4
    3c60:	cmp	w4, #0x0
    3c64:	add	w6, w5, #0x1
    3c68:	b.le	3d58 <ferror@plt+0x2588>
    3c6c:	sxtw	x3, w6
    3c70:	sbfiz	x0, x8, #2, #32
    3c74:	add	x3, x3, #0x4
    3c78:	add	x9, x0, #0x10
    3c7c:	sub	w7, w4, #0x1
    3c80:	lsl	x3, x3, #2
    3c84:	sub	x1, x3, #0x10
    3c88:	cmp	x1, x9
    3c8c:	sxtw	x9, w8
    3c90:	ccmp	x0, x3, #0x0, lt  // lt = tstop
    3c94:	ccmp	w7, #0x4, #0x0, ge  // ge = tcont
    3c98:	b.ls	3ebc <ferror@plt+0x26ec>  // b.plast
    3c9c:	ldr	x7, [sp, #168]
    3ca0:	lsr	w5, w4, #2
    3ca4:	add	x1, x7, x1
    3ca8:	lsl	x5, x5, #4
    3cac:	add	x3, x7, x0
    3cb0:	mov	x0, #0x0                   	// #0
    3cb4:	nop
    3cb8:	ldr	q1, [x1, x0]
    3cbc:	ldr	q0, [x3, x0]
    3cc0:	str	q1, [x3, x0]
    3cc4:	str	q0, [x1, x0]
    3cc8:	add	x0, x0, #0x10
    3ccc:	cmp	x5, x0
    3cd0:	b.ne	3cb8 <ferror@plt+0x24e8>  // b.any
    3cd4:	and	w0, w4, #0xfffffffc
    3cd8:	add	w6, w6, w0
    3cdc:	cmp	w0, w4
    3ce0:	sub	w1, w4, w0
    3ce4:	add	w0, w8, w0
    3ce8:	b.eq	3d58 <ferror@plt+0x2588>  // b.none
    3cec:	ldr	x9, [sp, #168]
    3cf0:	sxtw	x3, w6
    3cf4:	sxtw	x4, w0
    3cf8:	cmp	w1, #0x1
    3cfc:	add	w6, w6, #0x1
    3d00:	add	w0, w0, #0x1
    3d04:	ldr	w7, [x9, x3, lsl #2]
    3d08:	ldr	w5, [x9, x4, lsl #2]
    3d0c:	str	w7, [x9, x4, lsl #2]
    3d10:	str	w5, [x9, x3, lsl #2]
    3d14:	b.eq	3d58 <ferror@plt+0x2588>  // b.none
    3d18:	sxtw	x3, w6
    3d1c:	sxtw	x4, w0
    3d20:	cmp	w1, #0x2
    3d24:	sbfiz	x6, x6, #2, #32
    3d28:	sbfiz	x0, x0, #2, #32
    3d2c:	ldr	w5, [x9, x3, lsl #2]
    3d30:	ldr	w1, [x9, x4, lsl #2]
    3d34:	str	w5, [x9, x4, lsl #2]
    3d38:	str	w1, [x9, x3, lsl #2]
    3d3c:	b.eq	3d58 <ferror@plt+0x2588>  // b.none
    3d40:	add	x1, x6, #0x4
    3d44:	add	x0, x0, #0x4
    3d48:	ldr	w4, [x9, x1]
    3d4c:	ldr	w3, [x9, x0]
    3d50:	str	w4, [x9, x0]
    3d54:	str	w3, [x9, x1]
    3d58:	ldr	w9, [sp, #184]
    3d5c:	sub	w2, w24, w2
    3d60:	add	w7, w2, #0x1
    3d64:	add	w4, w26, #0x1
    3d68:	add	w8, w8, w9
    3d6c:	sub	w1, w24, w7
    3d70:	sub	w10, w8, w10
    3d74:	mov	w8, w24
    3d78:	sub	w3, w10, #0x1
    3d7c:	sub	w0, w3, w9
    3d80:	cmp	w0, w1
    3d84:	b.lt	3da8 <ferror@plt+0x25d8>  // b.tstop
    3d88:	mov	w6, w0
    3d8c:	mov	w5, w7
    3d90:	mov	w0, w1
    3d94:	mov	w8, w3
    3d98:	mov	w1, w6
    3d9c:	mov	w7, w9
    3da0:	mov	w3, w24
    3da4:	str	w5, [sp, #184]
    3da8:	sub	w5, w2, w10
    3dac:	cmp	w5, w0
    3db0:	b.gt	3e80 <ferror@plt+0x26b0>
    3db4:	mov	w6, w4
    3db8:	mov	w24, w2
    3dbc:	mov	w5, w0
    3dc0:	mov	w2, w3
    3dc4:	mov	w4, w26
    3dc8:	mov	w9, w10
    3dcc:	ldr	w10, [sp, #184]
    3dd0:	str	w9, [sp, #184]
    3dd4:	cmp	w1, w5
    3dd8:	b.ge	3e00 <ferror@plt+0x2630>  // b.tcont
    3ddc:	mov	w3, w26
    3de0:	mov	w1, w8
    3de4:	mov	w0, w7
    3de8:	mov	w26, w4
    3dec:	mov	w8, w2
    3df0:	mov	w7, w10
    3df4:	mov	w4, w3
    3df8:	mov	w2, w1
    3dfc:	mov	w10, w0
    3e00:	ldrsw	x3, [sp, #212]
    3e04:	sxtw	x1, w19
    3e08:	ldr	x5, [sp, #240]
    3e0c:	add	w0, w19, #0x1
    3e10:	add	w19, w19, #0x2
    3e14:	sxtw	x0, w0
    3e18:	str	w7, [x5, x3, lsl #2]
    3e1c:	ldr	x7, [sp, #248]
    3e20:	str	w10, [x5, x1, lsl #2]
    3e24:	str	w8, [x7, x3, lsl #2]
    3e28:	sub	w8, w19, #0x1
    3e2c:	str	w8, [sp, #212]
    3e30:	ldr	x8, [sp, #216]
    3e34:	str	w2, [x7, x1, lsl #2]
    3e38:	str	w24, [x7, x0, lsl #2]
    3e3c:	str	w26, [x8, x3, lsl #2]
    3e40:	mov	w26, w6
    3e44:	str	w4, [x8, x1, lsl #2]
    3e48:	ldr	w1, [sp, #184]
    3e4c:	str	w6, [x8, x0, lsl #2]
    3e50:	str	w1, [x5, x0, lsl #2]
    3e54:	b	3a8c <ferror@plt+0x22bc>
    3e58:	mov	w0, #0x0                   	// #0
    3e5c:	b	2a60 <ferror@plt+0x1290>
    3e60:	mov	w0, #0x1                   	// #1
    3e64:	b	2a60 <ferror@plt+0x1290>
    3e68:	mov	w0, #0x2                   	// #2
    3e6c:	b	2a60 <ferror@plt+0x1290>
    3e70:	mov	w0, #0x3                   	// #3
    3e74:	b	2a60 <ferror@plt+0x1290>
    3e78:	mov	w0, #0x4                   	// #4
    3e7c:	b	2a60 <ferror@plt+0x1290>
    3e80:	mov	w24, w3
    3e84:	mov	w6, w26
    3e88:	b	3dd4 <ferror@plt+0x2604>
    3e8c:	mov	w0, #0x5                   	// #5
    3e90:	b	2a60 <ferror@plt+0x1290>
    3e94:	mov	w0, #0x6                   	// #6
    3e98:	b	2a60 <ferror@plt+0x1290>
    3e9c:	mov	w0, #0x7                   	// #7
    3ea0:	b	2a60 <ferror@plt+0x1290>
    3ea4:	mov	w0, #0x8                   	// #8
    3ea8:	b	2a60 <ferror@plt+0x1290>
    3eac:	mov	w0, #0x9                   	// #9
    3eb0:	b	2a60 <ferror@plt+0x1290>
    3eb4:	mov	w0, #0xa                   	// #10
    3eb8:	b	2a60 <ferror@plt+0x1290>
    3ebc:	sxtw	x3, w5
    3ec0:	add	x4, x9, w7, uxtw
    3ec4:	ldr	x5, [sp, #168]
    3ec8:	sub	x3, x3, x9
    3ecc:	add	x1, x5, #0x4
    3ed0:	add	x0, x5, x0
    3ed4:	add	x4, x1, x4, lsl #2
    3ed8:	mov	x1, x0
    3edc:	ldr	w5, [x1], #4
    3ee0:	cmp	x4, x1
    3ee4:	ldr	w6, [x1, x3, lsl #2]
    3ee8:	str	w6, [x0]
    3eec:	mov	x0, x1
    3ef0:	str	w5, [x1, x3, lsl #2]
    3ef4:	b.ne	3ed8 <ferror@plt+0x2708>  // b.any
    3ef8:	b	3d58 <ferror@plt+0x2588>
    3efc:	ldr	x1, [sp, #168]
    3f00:	add	x0, x9, w0, uxtw
    3f04:	sub	x9, x7, x9
    3f08:	add	x1, x1, #0x4
    3f0c:	add	x0, x1, x0, lsl #2
    3f10:	ldr	w3, [x12, x9, lsl #2]
    3f14:	ldr	w1, [x12]
    3f18:	str	w3, [x12]
    3f1c:	str	w1, [x12, x9, lsl #2]
    3f20:	add	x12, x12, #0x4
    3f24:	cmp	x0, x12
    3f28:	b.ne	3f10 <ferror@plt+0x2740>  // b.any
    3f2c:	b	3c4c <ferror@plt+0x247c>
    3f30:	adrp	x3, 22000 <BZ2_bzerror@@Base+0x11200>
    3f34:	adrp	x0, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    3f38:	mov	x2, #0x1b                  	// #27
    3f3c:	mov	x1, #0x1                   	// #1
    3f40:	ldr	x3, [x3, #4008]
    3f44:	add	x0, x0, #0xe40
    3f48:	ldr	x3, [x3]
    3f4c:	bl	1760 <fwrite@plt>
    3f50:	b	2680 <ferror@plt+0xeb0>
    3f54:	adrp	x3, 22000 <BZ2_bzerror@@Base+0x11200>
    3f58:	adrp	x0, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    3f5c:	mov	x2, #0x21                  	// #33
    3f60:	mov	x1, #0x1                   	// #1
    3f64:	ldr	x3, [x3, #4008]
    3f68:	add	x0, x0, #0xeb8
    3f6c:	ldr	x3, [x3]
    3f70:	bl	1760 <fwrite@plt>
    3f74:	b	2450 <ferror@plt+0xc80>
    3f78:	mov	w0, #0x3ee                 	// #1006
    3f7c:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    3f80:	b	3684 <ferror@plt+0x1eb4>
    3f84:	tbnz	w6, #31, 38c0 <ferror@plt+0x20f0>
    3f88:	mov	w1, #0x0                   	// #0
    3f8c:	b	386c <ferror@plt+0x209c>
    3f90:	mov	x0, #0x0                   	// #0
    3f94:	ldrb	w1, [x25, x0]
    3f98:	strb	w1, [x3, x0]
    3f9c:	strh	wzr, [x2, x0, lsl #1]
    3fa0:	add	x0, x0, #0x1
    3fa4:	cmp	x0, #0x22
    3fa8:	b.ne	3f94 <ferror@plt+0x27c4>  // b.any
    3fac:	b	2674 <ferror@plt+0xea4>
    3fb0:	ldr	w5, [sp, #312]
    3fb4:	b	254c <ferror@plt+0xd7c>
    3fb8:	ldr	w1, [sp, #312]
    3fbc:	b	2774 <ferror@plt+0xfa4>
    3fc0:	mov	w19, w0
    3fc4:	sub	w0, w0, #0x1
    3fc8:	str	w0, [sp, #212]
    3fcc:	b	3a6c <ferror@plt+0x229c>

0000000000003fd0 <BZ2_blockSort@@Base>:
    3fd0:	stp	x29, x30, [sp, #-96]!
    3fd4:	mov	w1, #0x270f                	// #9999
    3fd8:	mov	x29, sp
    3fdc:	stp	x19, x20, [sp, #16]
    3fe0:	mov	x20, x0
    3fe4:	stp	x21, x22, [sp, #32]
    3fe8:	ldr	w22, [x0, #108]
    3fec:	stp	x23, x24, [sp, #48]
    3ff0:	cmp	w22, w1
    3ff4:	ldr	w23, [x0, #656]
    3ff8:	ldr	x24, [x0, #40]
    3ffc:	ldr	x21, [x0, #56]
    4000:	b.le	407c <BZ2_blockSort@@Base+0xac>
    4004:	ldr	w1, [x20, #88]
    4008:	mov	w3, #0x64                  	// #100
    400c:	mov	w0, #0xaaab                	// #43691
    4010:	and	w2, w22, #0x1
    4014:	cmp	w1, w3
    4018:	movk	w0, #0xaaaa, lsl #16
    401c:	csel	w1, w1, w3, le
    4020:	add	w2, w2, w22
    4024:	cmp	w1, #0x0
    4028:	add	w2, w2, #0x22
    402c:	csinc	w19, w1, wzr, gt
    4030:	add	x6, sp, #0x5c
    4034:	sub	w19, w19, #0x1
    4038:	mov	w5, w23
    403c:	ldr	x1, [x20, #64]
    4040:	mov	w4, w22
    4044:	umull	x19, w19, w0
    4048:	mov	x3, x24
    404c:	mov	x0, x21
    4050:	add	x2, x1, w2, sxtw
    4054:	lsr	x19, x19, #33
    4058:	mul	w19, w19, w22
    405c:	str	w19, [sp, #92]
    4060:	bl	2408 <ferror@plt+0xc38>
    4064:	cmp	w23, #0x2
    4068:	b.gt	40d8 <BZ2_blockSort@@Base+0x108>
    406c:	ldr	w0, [sp, #92]
    4070:	tbz	w0, #31, 4090 <BZ2_blockSort@@Base+0xc0>
    4074:	cmp	w23, #0x2
    4078:	b.eq	413c <BZ2_blockSort@@Base+0x16c>  // b.none
    407c:	ldp	x0, x1, [x20, #24]
    4080:	mov	w4, w23
    4084:	mov	w3, w22
    4088:	mov	x2, x24
    408c:	bl	18b8 <ferror@plt+0xe8>
    4090:	mov	w0, #0xffffffff            	// #-1
    4094:	str	w0, [x20, #48]
    4098:	ldr	w0, [x20, #108]
    409c:	cmp	w0, #0x0
    40a0:	b.le	4120 <BZ2_blockSort@@Base+0x150>
    40a4:	mov	x1, #0x0                   	// #0
    40a8:	b	40b8 <BZ2_blockSort@@Base+0xe8>
    40ac:	add	x1, x1, #0x1
    40b0:	cmp	w0, w1
    40b4:	b.le	4120 <BZ2_blockSort@@Base+0x150>
    40b8:	ldr	w2, [x21, x1, lsl #2]
    40bc:	cbnz	w2, 40ac <BZ2_blockSort@@Base+0xdc>
    40c0:	str	w1, [x20, #48]
    40c4:	ldp	x19, x20, [sp, #16]
    40c8:	ldp	x21, x22, [sp, #32]
    40cc:	ldp	x23, x24, [sp, #48]
    40d0:	ldp	x29, x30, [sp], #96
    40d4:	ret
    40d8:	ldr	w2, [sp, #92]
    40dc:	scvtf	s1, w22
    40e0:	str	x25, [sp, #64]
    40e4:	adrp	x25, 22000 <BZ2_bzerror@@Base+0x11200>
    40e8:	sub	w2, w19, w2
    40ec:	mov	w3, w22
    40f0:	ldr	x0, [x25, #4008]
    40f4:	scvtf	s0, w2
    40f8:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    40fc:	add	x1, x1, #0xf40
    4100:	ldr	x0, [x0]
    4104:	fdiv	s0, s0, s1
    4108:	fcvt	d0, s0
    410c:	bl	17c0 <fprintf@plt>
    4110:	ldr	w0, [sp, #92]
    4114:	tbnz	w0, #31, 4144 <BZ2_blockSort@@Base+0x174>
    4118:	ldr	x25, [sp, #64]
    411c:	b	4090 <BZ2_blockSort@@Base+0xc0>
    4120:	mov	w0, #0x3eb                 	// #1003
    4124:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    4128:	ldp	x19, x20, [sp, #16]
    412c:	ldp	x21, x22, [sp, #32]
    4130:	ldp	x23, x24, [sp, #48]
    4134:	ldp	x29, x30, [sp], #96
    4138:	ret
    413c:	str	x25, [sp, #64]
    4140:	adrp	x25, 22000 <BZ2_bzerror@@Base+0x11200>
    4144:	ldr	x25, [x25, #4008]
    4148:	adrp	x0, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    414c:	mov	x2, #0x35                  	// #53
    4150:	add	x0, x0, #0xf68
    4154:	mov	x1, #0x1                   	// #1
    4158:	ldr	x3, [x25]
    415c:	bl	1760 <fwrite@plt>
    4160:	ldr	x25, [sp, #64]
    4164:	b	407c <BZ2_blockSort@@Base+0xac>

0000000000004168 <BZ2_hbMakeCodeLengths@@Base>:
    4168:	mov	x12, #0x14b0                	// #5296
    416c:	sub	sp, sp, x12
    4170:	sub	w4, w2, #0x1
    4174:	cmp	w2, #0x0
    4178:	stp	x29, x30, [sp]
    417c:	mov	x29, sp
    4180:	stp	x19, x20, [sp, #16]
    4184:	stp	x21, x22, [sp, #32]
    4188:	mov	w22, w2
    418c:	stp	x23, x24, [sp, #48]
    4190:	mov	x23, x0
    4194:	mov	w24, w3
    4198:	stp	x25, x26, [sp, #64]
    419c:	stp	x27, x28, [sp, #80]
    41a0:	b.le	46b8 <BZ2_hbMakeCodeLengths@@Base+0x550>
    41a4:	cmp	w4, #0x2
    41a8:	b.ls	46c8 <BZ2_hbMakeCodeLengths@@Base+0x560>  // b.plast
    41ac:	lsr	w3, w2, #2
    41b0:	lsr	w5, w2, #2
    41b4:	movi	v2.4s, #0x1, lsl #8
    41b8:	add	x20, sp, #0x490
    41bc:	lsl	x3, x3, #4
    41c0:	mov	x0, #0x0                   	// #0
    41c4:	ldr	q0, [x1, x0]
    41c8:	add	x2, x20, x0
    41cc:	add	x0, x0, #0x10
    41d0:	cmp	x0, x3
    41d4:	shl	v1.4s, v0.4s, #8
    41d8:	cmeq	v0.4s, v0.4s, #0
    41dc:	bsl	v0.16b, v2.16b, v1.16b
    41e0:	stur	q0, [x2, #4]
    41e4:	b.ne	41c4 <BZ2_hbMakeCodeLengths@@Base+0x5c>  // b.any
    41e8:	and	w28, w22, #0xfffffffc
    41ec:	cmp	w22, w28
    41f0:	mov	w0, w28
    41f4:	b.eq	425c <BZ2_hbMakeCodeLengths@@Base+0xf4>  // b.none
    41f8:	ldr	w2, [x1, w0, sxtw #2]
    41fc:	add	w6, w0, #0x1
    4200:	mov	w3, #0x100                 	// #256
    4204:	sbfiz	x7, x0, #2, #32
    4208:	cmp	w2, #0x0
    420c:	lsl	w2, w2, #8
    4210:	csel	w2, w2, w3, ne  // ne = any
    4214:	str	w2, [x20, w6, sxtw #2]
    4218:	cmp	w22, w6
    421c:	b.le	425c <BZ2_hbMakeCodeLengths@@Base+0xf4>
    4220:	add	x1, x1, x7
    4224:	add	w6, w0, #0x2
    4228:	ldr	w2, [x1, #4]
    422c:	cmp	w2, #0x0
    4230:	lsl	w2, w2, #8
    4234:	csel	w2, w2, w3, ne  // ne = any
    4238:	str	w2, [x20, w6, sxtw #2]
    423c:	cmp	w22, w6
    4240:	b.le	425c <BZ2_hbMakeCodeLengths@@Base+0xf4>
    4244:	ldr	w1, [x1, #8]
    4248:	add	w0, w0, #0x3
    424c:	cmp	w1, #0x0
    4250:	lsl	w1, w1, #8
    4254:	csel	w1, w1, w3, ne  // ne = any
    4258:	str	w1, [x20, w0, sxtw #2]
    425c:	ubfiz	x5, x5, #4, #30
    4260:	add	x19, sp, #0x80
    4264:	lsl	w27, w22, #1
    4268:	add	x26, x20, x5
    426c:	add	x6, x19, w22, sxtw #2
    4270:	sub	w27, w27, #0x1
    4274:	sxtw	x5, w22
    4278:	add	w7, w28, #0x1
    427c:	add	x21, sp, #0xca0
    4280:	mov	w25, #0x1                   	// #1
    4284:	mov	w0, #0xfffffffe            	// #-2
    4288:	str	wzr, [sp, #128]
    428c:	str	wzr, [sp, #1168]
    4290:	cmp	w22, #0x0
    4294:	str	w0, [sp, #3232]
    4298:	b.le	4638 <BZ2_hbMakeCodeLengths@@Base+0x4d0>
    429c:	add	w13, w22, #0x1
    42a0:	mov	x11, #0x0                   	// #0
    42a4:	mov	w10, #0x1                   	// #1
    42a8:	mov	w12, #0xffffffff            	// #-1
    42ac:	nop
    42b0:	add	x3, x19, x11
    42b4:	add	x1, x21, x11
    42b8:	asr	w0, w10, #1
    42bc:	add	x2, x20, x11
    42c0:	str	w10, [x3, #4]
    42c4:	str	w12, [x1, #4]
    42c8:	ldr	w1, [x19, w0, sxtw #2]
    42cc:	ldr	w9, [x2, #4]
    42d0:	ldr	w2, [x20, w1, sxtw #2]
    42d4:	cmp	w9, w2
    42d8:	b.ge	4684 <BZ2_hbMakeCodeLengths@@Base+0x51c>  // b.tcont
    42dc:	mov	w3, w10
    42e0:	b	42e8 <BZ2_hbMakeCodeLengths@@Base+0x180>
    42e4:	mov	w0, w2
    42e8:	asr	w2, w0, #1
    42ec:	str	w1, [x19, w3, sxtw #2]
    42f0:	mov	w3, w0
    42f4:	ldr	w1, [x19, w2, sxtw #2]
    42f8:	ldr	w8, [x20, w1, sxtw #2]
    42fc:	cmp	w8, w9
    4300:	b.gt	42e4 <BZ2_hbMakeCodeLengths@@Base+0x17c>
    4304:	str	w10, [x19, w0, sxtw #2]
    4308:	add	w10, w10, #0x1
    430c:	cmp	w10, w13
    4310:	add	x11, x11, #0x4
    4314:	b.ne	42b0 <BZ2_hbMakeCodeLengths@@Base+0x148>  // b.any
    4318:	cmp	w22, #0x1
    431c:	b.eq	4518 <BZ2_hbMakeCodeLengths@@Base+0x3b0>  // b.none
    4320:	sub	w9, w22, #0x2
    4324:	mov	x10, x6
    4328:	mov	x11, x5
    432c:	mov	w8, w22
    4330:	mov	w12, #0xffffffff            	// #-1
    4334:	nop
    4338:	ldr	w18, [x10]
    433c:	sub	w8, w8, #0x1
    4340:	ldr	w14, [sp, #132]
    4344:	cmp	w8, #0x1
    4348:	str	w18, [sp, #132]
    434c:	b.eq	46a8 <BZ2_hbMakeCodeLengths@@Base+0x540>  // b.none
    4350:	ldr	w17, [x20, w18, sxtw #2]
    4354:	mov	w1, #0x2                   	// #2
    4358:	mov	w13, #0x1                   	// #1
    435c:	b	4380 <BZ2_hbMakeCodeLengths@@Base+0x218>
    4360:	mov	w0, w1
    4364:	lsl	w1, w0, #1
    4368:	cmp	w17, w3
    436c:	b.lt	43c0 <BZ2_hbMakeCodeLengths@@Base+0x258>  // b.tstop
    4370:	str	w2, [x19, w13, sxtw #2]
    4374:	cmp	w8, w0, lsl #1
    4378:	mov	w13, w0
    437c:	b.lt	43c0 <BZ2_hbMakeCodeLengths@@Base+0x258>  // b.tstop
    4380:	ldr	w2, [x19, w1, sxtw #2]
    4384:	mov	w0, w1
    4388:	cmp	w8, w1
    438c:	ldr	w3, [x20, w2, sxtw #2]
    4390:	b.le	4364 <BZ2_hbMakeCodeLengths@@Base+0x1fc>
    4394:	add	w0, w1, #0x1
    4398:	ldr	w15, [x19, w0, sxtw #2]
    439c:	ldr	w16, [x20, w15, sxtw #2]
    43a0:	cmp	w16, w3
    43a4:	b.ge	4360 <BZ2_hbMakeCodeLengths@@Base+0x1f8>  // b.tcont
    43a8:	mov	w3, w16
    43ac:	mov	w2, w15
    43b0:	lsl	w1, w0, #1
    43b4:	cmp	w17, w3
    43b8:	b.ge	4370 <BZ2_hbMakeCodeLengths@@Base+0x208>  // b.tcont
    43bc:	nop
    43c0:	str	w18, [x19, w13, sxtw #2]
    43c4:	cmp	w9, #0x1
    43c8:	ldur	w18, [x10, #-4]
    43cc:	ldr	w30, [sp, #132]
    43d0:	str	w18, [sp, #132]
    43d4:	b.le	46a0 <BZ2_hbMakeCodeLengths@@Base+0x538>
    43d8:	ldr	w17, [x20, w18, sxtw #2]
    43dc:	mov	w1, #0x2                   	// #2
    43e0:	mov	w13, #0x1                   	// #1
    43e4:	b	4408 <BZ2_hbMakeCodeLengths@@Base+0x2a0>
    43e8:	mov	w0, w1
    43ec:	lsl	w1, w0, #1
    43f0:	cmp	w17, w3
    43f4:	b.lt	4448 <BZ2_hbMakeCodeLengths@@Base+0x2e0>  // b.tstop
    43f8:	str	w2, [x19, w13, sxtw #2]
    43fc:	cmp	w9, w0, lsl #1
    4400:	mov	w13, w0
    4404:	b.lt	4448 <BZ2_hbMakeCodeLengths@@Base+0x2e0>  // b.tstop
    4408:	ldr	w2, [x19, w1, sxtw #2]
    440c:	mov	w0, w1
    4410:	cmp	w1, w9
    4414:	ldr	w3, [x20, w2, sxtw #2]
    4418:	b.ge	43ec <BZ2_hbMakeCodeLengths@@Base+0x284>  // b.tcont
    441c:	add	w0, w1, #0x1
    4420:	ldr	w15, [x19, w0, sxtw #2]
    4424:	ldr	w16, [x20, w15, sxtw #2]
    4428:	cmp	w16, w3
    442c:	b.ge	43e8 <BZ2_hbMakeCodeLengths@@Base+0x280>  // b.tcont
    4430:	mov	w3, w16
    4434:	mov	w2, w15
    4438:	lsl	w1, w0, #1
    443c:	cmp	w17, w3
    4440:	b.ge	43f8 <BZ2_hbMakeCodeLengths@@Base+0x290>  // b.tcont
    4444:	nop
    4448:	sxtw	x14, w14
    444c:	sxtw	x30, w30
    4450:	str	w18, [x19, w13, sxtw #2]
    4454:	asr	w0, w8, #1
    4458:	add	w15, w11, #0x1
    445c:	lsl	x2, x11, #2
    4460:	ldr	w17, [x20, x30, lsl #2]
    4464:	add	x16, x20, x2
    4468:	ldr	w13, [x20, x14, lsl #2]
    446c:	add	x2, x21, x2
    4470:	stur	w15, [x10, #-4]
    4474:	and	w3, w17, #0xff
    4478:	and	w1, w13, #0xff
    447c:	and	w13, w13, #0xffffff00
    4480:	cmp	w1, w17, uxtb
    4484:	and	w17, w17, #0xffffff00
    4488:	csel	w3, w3, w1, le
    448c:	ldr	w1, [x19, w0, sxtw #2]
    4490:	add	w3, w3, #0x1
    4494:	add	w13, w13, w17
    4498:	orr	w3, w3, w13
    449c:	str	w15, [x21, x30, lsl #2]
    44a0:	str	w3, [x16, #4]
    44a4:	str	w15, [x21, x14, lsl #2]
    44a8:	str	w12, [x2, #4]
    44ac:	ldr	w2, [x20, w1, sxtw #2]
    44b0:	cmp	w3, w2
    44b4:	b.ge	4664 <BZ2_hbMakeCodeLengths@@Base+0x4fc>  // b.tcont
    44b8:	mov	w13, w8
    44bc:	b	44c4 <BZ2_hbMakeCodeLengths@@Base+0x35c>
    44c0:	mov	w0, w2
    44c4:	asr	w2, w0, #1
    44c8:	str	w1, [x19, w13, sxtw #2]
    44cc:	mov	w13, w0
    44d0:	ldr	w1, [x19, w2, sxtw #2]
    44d4:	ldr	w14, [x20, w1, sxtw #2]
    44d8:	cmp	w3, w14
    44dc:	b.lt	44c0 <BZ2_hbMakeCodeLengths@@Base+0x358>  // b.tstop
    44e0:	str	w15, [x19, w0, sxtw #2]
    44e4:	add	x11, x11, #0x1
    44e8:	sub	x10, x10, #0x4
    44ec:	sub	w9, w9, #0x1
    44f0:	cmp	w8, #0x1
    44f4:	b.ne	4338 <BZ2_hbMakeCodeLengths@@Base+0x1d0>  // b.any
    44f8:	cmp	w27, #0x203
    44fc:	b.le	4518 <BZ2_hbMakeCodeLengths@@Base+0x3b0>
    4500:	mov	w0, #0x7d2                 	// #2002
    4504:	stp	x6, x5, [sp, #104]
    4508:	stp	w7, w4, [sp, #120]
    450c:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    4510:	ldp	x6, x5, [sp, #104]
    4514:	ldp	w7, w4, [sp, #120]
    4518:	mov	x2, #0x0                   	// #0
    451c:	mov	w3, #0x0                   	// #0
    4520:	add	x0, x21, x2, lsl #2
    4524:	mov	w1, #0x0                   	// #0
    4528:	ldr	w0, [x0, #4]
    452c:	tbnz	w0, #31, 465c <BZ2_hbMakeCodeLengths@@Base+0x4f4>
    4530:	ldr	w0, [x21, w0, sxtw #2]
    4534:	add	w1, w1, #0x1
    4538:	tbz	w0, #31, 4530 <BZ2_hbMakeCodeLengths@@Base+0x3c8>
    453c:	and	w0, w1, #0xff
    4540:	strb	w0, [x23, x2]
    4544:	add	x2, x2, #0x1
    4548:	cmp	w24, w1
    454c:	add	w0, w2, #0x1
    4550:	csel	w3, w3, w25, ge  // ge = tcont
    4554:	cmp	w22, w0
    4558:	b.ge	4520 <BZ2_hbMakeCodeLengths@@Base+0x3b8>  // b.tcont
    455c:	cbz	w3, 4638 <BZ2_hbMakeCodeLengths@@Base+0x4d0>
    4560:	cmp	w4, #0x2
    4564:	b.ls	46b0 <BZ2_hbMakeCodeLengths@@Base+0x548>  // b.plast
    4568:	movi	v2.4s, #0x1
    456c:	mov	x0, x20
    4570:	ldur	q0, [x0, #4]
    4574:	add	x0, x0, #0x10
    4578:	sshr	v0.4s, v0.4s, #8
    457c:	cmlt	v1.4s, v0.4s, #0
    4580:	sub	v0.4s, v0.4s, v1.4s
    4584:	sshr	v0.4s, v0.4s, #1
    4588:	add	v0.4s, v0.4s, v2.4s
    458c:	shl	v0.4s, v0.4s, #8
    4590:	stur	q0, [x0, #-12]
    4594:	cmp	x26, x0
    4598:	b.ne	4570 <BZ2_hbMakeCodeLengths@@Base+0x408>  // b.any
    459c:	mov	w1, w7
    45a0:	cmp	w28, w22
    45a4:	b.eq	4284 <BZ2_hbMakeCodeLengths@@Base+0x11c>  // b.none
    45a8:	sxtw	x3, w1
    45ac:	add	w2, w1, #0x1
    45b0:	cmp	w2, w22
    45b4:	ldr	w0, [x20, x3, lsl #2]
    45b8:	lsr	w8, w0, #31
    45bc:	add	w0, w8, w0, asr #8
    45c0:	asr	w0, w0, #1
    45c4:	add	w0, w0, #0x1
    45c8:	lsl	w0, w0, #8
    45cc:	str	w0, [x20, x3, lsl #2]
    45d0:	b.gt	4284 <BZ2_hbMakeCodeLengths@@Base+0x11c>
    45d4:	sxtw	x2, w2
    45d8:	add	w1, w1, #0x2
    45dc:	cmp	w1, w22
    45e0:	ldr	w0, [x20, x2, lsl #2]
    45e4:	lsr	w3, w0, #31
    45e8:	add	w0, w3, w0, asr #8
    45ec:	asr	w0, w0, #1
    45f0:	add	w0, w0, #0x1
    45f4:	lsl	w0, w0, #8
    45f8:	str	w0, [x20, x2, lsl #2]
    45fc:	b.gt	4284 <BZ2_hbMakeCodeLengths@@Base+0x11c>
    4600:	sxtw	x1, w1
    4604:	str	wzr, [sp, #128]
    4608:	cmp	w22, #0x0
    460c:	ldr	w0, [x20, x1, lsl #2]
    4610:	lsr	w2, w0, #31
    4614:	add	w0, w2, w0, asr #8
    4618:	asr	w0, w0, #1
    461c:	add	w0, w0, #0x1
    4620:	lsl	w0, w0, #8
    4624:	str	w0, [x20, x1, lsl #2]
    4628:	mov	w0, #0xfffffffe            	// #-2
    462c:	str	wzr, [sp, #1168]
    4630:	str	w0, [sp, #3232]
    4634:	b.gt	429c <BZ2_hbMakeCodeLengths@@Base+0x134>
    4638:	mov	x12, #0x14b0                	// #5296
    463c:	ldp	x29, x30, [sp]
    4640:	ldp	x19, x20, [sp, #16]
    4644:	ldp	x21, x22, [sp, #32]
    4648:	ldp	x23, x24, [sp, #48]
    464c:	ldp	x25, x26, [sp, #64]
    4650:	ldp	x27, x28, [sp, #80]
    4654:	add	sp, sp, x12
    4658:	ret
    465c:	mov	w0, #0x0                   	// #0
    4660:	b	4540 <BZ2_hbMakeCodeLengths@@Base+0x3d8>
    4664:	mov	w0, w8
    4668:	add	x11, x11, #0x1
    466c:	sub	x10, x10, #0x4
    4670:	sub	w9, w9, #0x1
    4674:	cmp	w8, #0x1
    4678:	str	w15, [x19, w0, sxtw #2]
    467c:	b.ne	4338 <BZ2_hbMakeCodeLengths@@Base+0x1d0>  // b.any
    4680:	b	44f8 <BZ2_hbMakeCodeLengths@@Base+0x390>
    4684:	mov	w0, w10
    4688:	add	x11, x11, #0x4
    468c:	str	w10, [x19, w0, sxtw #2]
    4690:	add	w10, w10, #0x1
    4694:	cmp	w10, w13
    4698:	b.ne	42b0 <BZ2_hbMakeCodeLengths@@Base+0x148>  // b.any
    469c:	b	4318 <BZ2_hbMakeCodeLengths@@Base+0x1b0>
    46a0:	mov	w13, #0x1                   	// #1
    46a4:	b	4448 <BZ2_hbMakeCodeLengths@@Base+0x2e0>
    46a8:	mov	w13, w8
    46ac:	b	43c0 <BZ2_hbMakeCodeLengths@@Base+0x258>
    46b0:	mov	w1, #0x1                   	// #1
    46b4:	b	45a8 <BZ2_hbMakeCodeLengths@@Base+0x440>
    46b8:	add	x20, sp, #0x490
    46bc:	lsr	w5, w2, #2
    46c0:	and	w28, w2, #0xfffffffc
    46c4:	b	425c <BZ2_hbMakeCodeLengths@@Base+0xf4>
    46c8:	add	x20, sp, #0x490
    46cc:	lsr	w5, w2, #2
    46d0:	and	w28, w2, #0xfffffffc
    46d4:	mov	w0, #0x0                   	// #0
    46d8:	b	41f8 <BZ2_hbMakeCodeLengths@@Base+0x90>
    46dc:	nop

00000000000046e0 <BZ2_hbAssignCodes@@Base>:
    46e0:	cmp	w2, w3
    46e4:	b.gt	4730 <BZ2_hbAssignCodes@@Base+0x50>
    46e8:	cmp	w4, #0x0
    46ec:	b.le	4730 <BZ2_hbAssignCodes@@Base+0x50>
    46f0:	add	w7, w3, #0x1
    46f4:	mov	w6, #0x0                   	// #0
    46f8:	mov	x3, #0x0                   	// #0
    46fc:	nop
    4700:	ldrb	w5, [x1, x3]
    4704:	cmp	w5, w2
    4708:	b.ne	4714 <BZ2_hbAssignCodes@@Base+0x34>  // b.any
    470c:	str	w6, [x0, x3, lsl #2]
    4710:	add	w6, w6, #0x1
    4714:	add	x3, x3, #0x1
    4718:	cmp	w4, w3
    471c:	b.gt	4700 <BZ2_hbAssignCodes@@Base+0x20>
    4720:	add	w2, w2, #0x1
    4724:	lsl	w6, w6, #1
    4728:	cmp	w2, w7
    472c:	b.ne	46f8 <BZ2_hbAssignCodes@@Base+0x18>  // b.any
    4730:	ret
    4734:	nop

0000000000004738 <BZ2_hbCreateDecodeTables@@Base>:
    4738:	cmp	w4, w5
    473c:	b.gt	4988 <BZ2_hbCreateDecodeTables@@Base+0x250>
    4740:	cmp	w6, #0x0
    4744:	b.le	49b0 <BZ2_hbCreateDecodeTables@@Base+0x278>
    4748:	add	w11, w5, #0x1
    474c:	mov	w9, w4
    4750:	mov	w10, #0x0                   	// #0
    4754:	nop
    4758:	mov	x7, #0x0                   	// #0
    475c:	nop
    4760:	ldrb	w8, [x3, x7]
    4764:	cmp	w8, w9
    4768:	b.ne	4774 <BZ2_hbCreateDecodeTables@@Base+0x3c>  // b.any
    476c:	str	w7, [x2, w10, sxtw #2]
    4770:	add	w10, w10, #0x1
    4774:	add	x7, x7, #0x1
    4778:	cmp	w6, w7
    477c:	b.gt	4760 <BZ2_hbCreateDecodeTables@@Base+0x28>
    4780:	add	w9, w9, #0x1
    4784:	cmp	w9, w11
    4788:	b.ne	4758 <BZ2_hbCreateDecodeTables@@Base+0x20>  // b.any
    478c:	stp	xzr, xzr, [x1]
    4790:	stp	xzr, xzr, [x1, #16]
    4794:	stp	xzr, xzr, [x1, #32]
    4798:	stp	xzr, xzr, [x1, #48]
    479c:	stp	xzr, xzr, [x1, #64]
    47a0:	str	xzr, [x1, #80]
    47a4:	str	wzr, [x1, #88]
    47a8:	sub	w6, w6, #0x1
    47ac:	add	x7, x3, #0x1
    47b0:	add	x7, x7, x6
    47b4:	nop
    47b8:	ldrb	w2, [x3], #1
    47bc:	add	x2, x2, #0x1
    47c0:	cmp	x3, x7
    47c4:	ldr	w6, [x1, x2, lsl #2]
    47c8:	add	w6, w6, #0x1
    47cc:	str	w6, [x1, x2, lsl #2]
    47d0:	b.ne	47b8 <BZ2_hbCreateDecodeTables@@Base+0x80>  // b.any
    47d4:	mov	x8, x1
    47d8:	add	x7, x1, #0x5c
    47dc:	ldr	w3, [x8], #4
    47e0:	mov	x2, x8
    47e4:	nop
    47e8:	ldr	w6, [x2]
    47ec:	add	w3, w3, w6
    47f0:	str	w3, [x2], #4
    47f4:	cmp	x7, x2
    47f8:	b.ne	47e8 <BZ2_hbCreateDecodeTables@@Base+0xb0>  // b.any
    47fc:	stp	xzr, xzr, [x0]
    4800:	cmp	w4, w5
    4804:	stp	xzr, xzr, [x0, #16]
    4808:	stp	xzr, xzr, [x0, #32]
    480c:	stp	xzr, xzr, [x0, #48]
    4810:	stp	xzr, xzr, [x0, #64]
    4814:	str	xzr, [x0, #80]
    4818:	str	wzr, [x0, #88]
    481c:	b.gt	4850 <BZ2_hbCreateDecodeTables@@Base+0x118>
    4820:	sxtw	x2, w4
    4824:	mov	w3, #0x0                   	// #0
    4828:	ldr	w6, [x8, x2, lsl #2]
    482c:	ldr	w7, [x1, x2, lsl #2]
    4830:	sub	w6, w6, w7
    4834:	add	w3, w6, w3
    4838:	sub	w6, w3, #0x1
    483c:	str	w6, [x0, x2, lsl #2]
    4840:	add	x2, x2, #0x1
    4844:	lsl	w3, w3, #1
    4848:	cmp	w5, w2
    484c:	b.ge	4828 <BZ2_hbCreateDecodeTables@@Base+0xf0>  // b.tcont
    4850:	add	w8, w4, #0x1
    4854:	cmp	w5, w8
    4858:	b.lt	4958 <BZ2_hbCreateDecodeTables@@Base+0x220>  // b.tstop
    485c:	sxtw	x6, w8
    4860:	sub	w9, w5, #0x1
    4864:	add	x2, x6, #0x3
    4868:	sub	w9, w9, w4
    486c:	lsl	x2, x2, #2
    4870:	sub	x7, x2, #0x10
    4874:	add	x10, x2, #0x4
    4878:	sub	x3, x2, #0xc
    487c:	add	x7, x0, x7
    4880:	add	x10, x1, x10
    4884:	add	x3, x1, x3
    4888:	cmp	x7, x10
    488c:	add	x2, x0, x2
    4890:	ccmp	x3, x2, #0x2, cc  // cc = lo, ul, last
    4894:	ccmp	w9, #0x3, #0x0, cs  // cs = hs, nlast
    4898:	b.ls	495c <BZ2_hbCreateDecodeTables@@Base+0x224>  // b.plast
    489c:	sub	w4, w5, w4
    48a0:	mov	x2, #0x0                   	// #0
    48a4:	movi	v2.4s, #0x1
    48a8:	lsr	w6, w4, #2
    48ac:	lsl	x6, x6, #4
    48b0:	ldr	q0, [x7, x2]
    48b4:	ldr	q1, [x3, x2]
    48b8:	add	v0.4s, v0.4s, v2.4s
    48bc:	shl	v0.4s, v0.4s, #1
    48c0:	sub	v0.4s, v0.4s, v1.4s
    48c4:	str	q0, [x3, x2]
    48c8:	add	x2, x2, #0x10
    48cc:	cmp	x6, x2
    48d0:	b.ne	48b0 <BZ2_hbCreateDecodeTables@@Base+0x178>  // b.any
    48d4:	and	w2, w4, #0xfffffffc
    48d8:	add	w8, w2, w8
    48dc:	cmp	w2, w4
    48e0:	b.eq	4958 <BZ2_hbCreateDecodeTables@@Base+0x220>  // b.none
    48e4:	sbfiz	x3, x8, #2, #32
    48e8:	add	w2, w8, #0x1
    48ec:	add	x6, x0, x3
    48f0:	sxtw	x4, w8
    48f4:	cmp	w2, w5
    48f8:	ldur	w2, [x6, #-4]
    48fc:	ldr	w7, [x1, x4, lsl #2]
    4900:	add	w2, w2, #0x1
    4904:	lsl	w2, w2, #1
    4908:	sub	w2, w2, w7
    490c:	str	w2, [x1, x4, lsl #2]
    4910:	b.gt	4958 <BZ2_hbCreateDecodeTables@@Base+0x220>
    4914:	ldr	w0, [x0, x4, lsl #2]
    4918:	add	x2, x3, #0x4
    491c:	add	w8, w8, #0x2
    4920:	add	w0, w0, #0x1
    4924:	cmp	w8, w5
    4928:	ldr	w4, [x1, x2]
    492c:	lsl	w0, w0, #1
    4930:	sub	w0, w0, w4
    4934:	str	w0, [x1, x2]
    4938:	b.gt	4958 <BZ2_hbCreateDecodeTables@@Base+0x220>
    493c:	ldr	w0, [x6, #4]
    4940:	add	x3, x3, #0x8
    4944:	add	w0, w0, #0x1
    4948:	ldr	w2, [x1, x3]
    494c:	lsl	w0, w0, #1
    4950:	sub	w0, w0, w2
    4954:	str	w0, [x1, x3]
    4958:	ret
    495c:	sub	x0, x0, #0x4
    4960:	ldr	w2, [x0, x6, lsl #2]
    4964:	ldr	w3, [x1, x6, lsl #2]
    4968:	add	w2, w2, #0x1
    496c:	lsl	w2, w2, #1
    4970:	sub	w2, w2, w3
    4974:	str	w2, [x1, x6, lsl #2]
    4978:	add	x6, x6, #0x1
    497c:	cmp	w5, w6
    4980:	b.ge	4960 <BZ2_hbCreateDecodeTables@@Base+0x228>  // b.tcont
    4984:	ret
    4988:	stp	xzr, xzr, [x1]
    498c:	cmp	w6, #0x0
    4990:	stp	xzr, xzr, [x1, #16]
    4994:	stp	xzr, xzr, [x1, #32]
    4998:	stp	xzr, xzr, [x1, #48]
    499c:	stp	xzr, xzr, [x1, #64]
    49a0:	str	xzr, [x1, #80]
    49a4:	str	wzr, [x1, #88]
    49a8:	b.gt	47a8 <BZ2_hbCreateDecodeTables@@Base+0x70>
    49ac:	b	47d4 <BZ2_hbCreateDecodeTables@@Base+0x9c>
    49b0:	stp	xzr, xzr, [x1]
    49b4:	stp	xzr, xzr, [x1, #16]
    49b8:	stp	xzr, xzr, [x1, #32]
    49bc:	stp	xzr, xzr, [x1, #48]
    49c0:	stp	xzr, xzr, [x1, #64]
    49c4:	str	xzr, [x1, #80]
    49c8:	str	wzr, [x1, #88]
    49cc:	b	47d4 <BZ2_hbCreateDecodeTables@@Base+0x9c>
    49d0:	ldr	w3, [x0, #644]
    49d4:	lsr	w4, w1, #24
    49d8:	ldr	w2, [x0, #640]
    49dc:	cmp	w3, #0x7
    49e0:	b.le	4b5c <BZ2_hbCreateDecodeTables@@Base+0x424>
    49e4:	ldr	w5, [x0, #116]
    49e8:	ldr	x6, [x0, #80]
    49ec:	lsr	w3, w2, #24
    49f0:	strb	w3, [x6, w5, sxtw]
    49f4:	ldr	w3, [x0, #640]
    49f8:	ldr	w5, [x0, #116]
    49fc:	ldr	w6, [x0, #644]
    4a00:	lsl	w2, w3, #8
    4a04:	add	w5, w5, #0x1
    4a08:	sub	w3, w6, #0x8
    4a0c:	str	w5, [x0, #116]
    4a10:	str	w2, [x0, #640]
    4a14:	cmp	w3, #0x7
    4a18:	str	w3, [x0, #644]
    4a1c:	b.gt	49e8 <BZ2_hbCreateDecodeTables@@Base+0x2b0>
    4a20:	mov	w5, #0x18                  	// #24
    4a24:	sub	w3, w5, w3
    4a28:	str	w6, [x0, #644]
    4a2c:	cmp	w6, #0x7
    4a30:	lsl	w3, w4, w3
    4a34:	orr	w3, w3, w2
    4a38:	str	w3, [x0, #640]
    4a3c:	ubfx	x4, x1, #16, #8
    4a40:	b.le	4b64 <BZ2_hbCreateDecodeTables@@Base+0x42c>
    4a44:	ldr	w2, [x0, #116]
    4a48:	ldr	x5, [x0, #80]
    4a4c:	lsr	w3, w3, #24
    4a50:	strb	w3, [x5, w2, sxtw]
    4a54:	ldr	w3, [x0, #640]
    4a58:	ldr	w2, [x0, #116]
    4a5c:	ldr	w5, [x0, #644]
    4a60:	lsl	w3, w3, #8
    4a64:	add	w2, w2, #0x1
    4a68:	sub	w6, w5, #0x8
    4a6c:	str	w2, [x0, #116]
    4a70:	str	w3, [x0, #640]
    4a74:	cmp	w6, #0x7
    4a78:	str	w6, [x0, #644]
    4a7c:	b.gt	4a48 <BZ2_hbCreateDecodeTables@@Base+0x310>
    4a80:	mov	w2, #0x18                  	// #24
    4a84:	sub	w2, w2, w6
    4a88:	str	w5, [x0, #644]
    4a8c:	cmp	w5, #0x7
    4a90:	lsl	w2, w4, w2
    4a94:	orr	w3, w2, w3
    4a98:	str	w3, [x0, #640]
    4a9c:	ubfx	x2, x1, #8, #8
    4aa0:	b.le	4b6c <BZ2_hbCreateDecodeTables@@Base+0x434>
    4aa4:	ldr	w6, [x0, #116]
    4aa8:	ldr	x4, [x0, #80]
    4aac:	lsr	w3, w3, #24
    4ab0:	strb	w3, [x4, w6, sxtw]
    4ab4:	ldr	w3, [x0, #640]
    4ab8:	ldr	w6, [x0, #116]
    4abc:	ldr	w4, [x0, #644]
    4ac0:	lsl	w3, w3, #8
    4ac4:	add	w6, w6, #0x1
    4ac8:	sub	w5, w4, #0x8
    4acc:	str	w6, [x0, #116]
    4ad0:	str	w3, [x0, #640]
    4ad4:	cmp	w5, #0x7
    4ad8:	str	w5, [x0, #644]
    4adc:	b.gt	4aa8 <BZ2_hbCreateDecodeTables@@Base+0x370>
    4ae0:	mov	w6, #0x18                  	// #24
    4ae4:	sub	w5, w6, w5
    4ae8:	str	w4, [x0, #644]
    4aec:	and	w1, w1, #0xff
    4af0:	lsl	w2, w2, w5
    4af4:	orr	w2, w2, w3
    4af8:	str	w2, [x0, #640]
    4afc:	cmp	w4, #0x7
    4b00:	b.le	4b74 <BZ2_hbCreateDecodeTables@@Base+0x43c>
    4b04:	ldr	w3, [x0, #116]
    4b08:	ldr	x4, [x0, #80]
    4b0c:	lsr	w2, w2, #24
    4b10:	strb	w2, [x4, w3, sxtw]
    4b14:	ldr	w2, [x0, #640]
    4b18:	ldr	w3, [x0, #116]
    4b1c:	ldr	w5, [x0, #644]
    4b20:	lsl	w2, w2, #8
    4b24:	add	w3, w3, #0x1
    4b28:	sub	w4, w5, #0x8
    4b2c:	str	w3, [x0, #116]
    4b30:	str	w2, [x0, #640]
    4b34:	cmp	w4, #0x7
    4b38:	str	w4, [x0, #644]
    4b3c:	b.gt	4b08 <BZ2_hbCreateDecodeTables@@Base+0x3d0>
    4b40:	mov	w3, #0x18                  	// #24
    4b44:	sub	w4, w3, w4
    4b48:	str	w5, [x0, #644]
    4b4c:	lsl	w1, w1, w4
    4b50:	orr	w2, w1, w2
    4b54:	str	w2, [x0, #640]
    4b58:	ret
    4b5c:	add	w6, w3, #0x8
    4b60:	b	4a20 <BZ2_hbCreateDecodeTables@@Base+0x2e8>
    4b64:	add	w5, w6, #0x8
    4b68:	b	4a80 <BZ2_hbCreateDecodeTables@@Base+0x348>
    4b6c:	add	w4, w5, #0x8
    4b70:	b	4ae0 <BZ2_hbCreateDecodeTables@@Base+0x3a8>
    4b74:	add	w5, w4, #0x8
    4b78:	mov	w3, #0x18                  	// #24
    4b7c:	sub	w4, w3, w4
    4b80:	str	w5, [x0, #644]
    4b84:	lsl	w1, w1, w4
    4b88:	orr	w2, w1, w2
    4b8c:	str	w2, [x0, #640]
    4b90:	ret
    4b94:	nop

0000000000004b98 <BZ2_bsInitWrite@@Base>:
    4b98:	str	xzr, [x0, #640]
    4b9c:	ret

0000000000004ba0 <BZ2_compressBlock@@Base>:
    4ba0:	sub	sp, sp, #0x3e0
    4ba4:	and	w1, w1, #0xff
    4ba8:	stp	x29, x30, [sp]
    4bac:	mov	x29, sp
    4bb0:	ldr	w5, [x0, #108]
    4bb4:	stp	x23, x24, [sp, #48]
    4bb8:	mov	x24, x0
    4bbc:	ldr	w2, [x0, #660]
    4bc0:	str	w1, [sp, #628]
    4bc4:	cmp	w5, #0x0
    4bc8:	b.le	5468 <BZ2_compressBlock@@Base+0x8c8>
    4bcc:	ldr	w3, [x0, #648]
    4bd0:	cmp	w2, #0x1
    4bd4:	ldr	w4, [x0, #652]
    4bd8:	mvn	w3, w3
    4bdc:	str	w3, [x0, #648]
    4be0:	eor	w4, w3, w4, ror #31
    4be4:	str	w4, [x0, #652]
    4be8:	b.le	4bf0 <BZ2_compressBlock@@Base+0x50>
    4bec:	str	wzr, [x0, #116]
    4bf0:	ldr	w0, [x24, #656]
    4bf4:	cmp	w0, #0x1
    4bf8:	b.gt	544c <BZ2_compressBlock@@Base+0x8ac>
    4bfc:	mov	x0, x24
    4c00:	bl	1720 <BZ2_blockSort@plt>
    4c04:	ldr	x0, [x24, #32]
    4c08:	ldr	w1, [x24, #108]
    4c0c:	ldr	w2, [x24, #660]
    4c10:	add	x0, x0, w1, sxtw
    4c14:	str	x0, [x24, #80]
    4c18:	cmp	w2, #0x1
    4c1c:	b.eq	547c <BZ2_compressBlock@@Base+0x8dc>  // b.none
    4c20:	cmp	w1, #0x0
    4c24:	b.le	5434 <BZ2_compressBlock@@Base+0x894>
    4c28:	ldr	w0, [x24, #644]
    4c2c:	stp	x19, x20, [sp, #16]
    4c30:	ldr	w1, [x24, #640]
    4c34:	stp	x21, x22, [sp, #32]
    4c38:	cmp	w0, #0x7
    4c3c:	stp	x25, x26, [sp, #64]
    4c40:	stp	x27, x28, [sp, #80]
    4c44:	str	d8, [sp, #96]
    4c48:	b.le	a6c8 <BZ2_compressBlock@@Base+0x5b28>
    4c4c:	ldr	w3, [x24, #116]
    4c50:	ldr	x0, [x24, #80]
    4c54:	lsr	w1, w1, #24
    4c58:	strb	w1, [x0, w3, sxtw]
    4c5c:	ldr	w1, [x24, #640]
    4c60:	ldr	w3, [x24, #116]
    4c64:	ldr	w2, [x24, #644]
    4c68:	lsl	w1, w1, #8
    4c6c:	add	w3, w3, #0x1
    4c70:	sub	w0, w2, #0x8
    4c74:	str	w3, [x24, #116]
    4c78:	str	w1, [x24, #640]
    4c7c:	cmp	w0, #0x7
    4c80:	str	w0, [x24, #644]
    4c84:	b.gt	4c50 <BZ2_compressBlock@@Base+0xb0>
    4c88:	mov	w3, #0x18                  	// #24
    4c8c:	sub	w3, w3, w0
    4c90:	mov	w0, #0x31                  	// #49
    4c94:	str	w2, [x24, #644]
    4c98:	lsl	w0, w0, w3
    4c9c:	orr	w0, w0, w1
    4ca0:	str	w0, [x24, #640]
    4ca4:	cmp	w2, #0x7
    4ca8:	b.le	a6dc <BZ2_compressBlock@@Base+0x5b3c>
    4cac:	ldr	w1, [x24, #116]
    4cb0:	ldr	x2, [x24, #80]
    4cb4:	lsr	w0, w0, #24
    4cb8:	strb	w0, [x2, w1, sxtw]
    4cbc:	ldr	w0, [x24, #640]
    4cc0:	ldr	w1, [x24, #116]
    4cc4:	ldr	w3, [x24, #644]
    4cc8:	lsl	w0, w0, #8
    4ccc:	add	w1, w1, #0x1
    4cd0:	sub	w2, w3, #0x8
    4cd4:	str	w1, [x24, #116]
    4cd8:	str	w0, [x24, #640]
    4cdc:	cmp	w2, #0x7
    4ce0:	str	w2, [x24, #644]
    4ce4:	b.gt	4cb0 <BZ2_compressBlock@@Base+0x110>
    4ce8:	mov	w1, #0x18                  	// #24
    4cec:	sub	w2, w1, w2
    4cf0:	mov	w1, #0x41                  	// #65
    4cf4:	str	w3, [x24, #644]
    4cf8:	lsl	w1, w1, w2
    4cfc:	orr	w0, w1, w0
    4d00:	str	w0, [x24, #640]
    4d04:	cmp	w3, #0x7
    4d08:	b.le	a6e4 <BZ2_compressBlock@@Base+0x5b44>
    4d0c:	ldr	w4, [x24, #116]
    4d10:	ldr	x1, [x24, #80]
    4d14:	lsr	w0, w0, #24
    4d18:	strb	w0, [x1, w4, sxtw]
    4d1c:	ldr	w0, [x24, #640]
    4d20:	ldr	w4, [x24, #116]
    4d24:	ldr	w2, [x24, #644]
    4d28:	lsl	w0, w0, #8
    4d2c:	add	w4, w4, #0x1
    4d30:	sub	w3, w2, #0x8
    4d34:	str	w4, [x24, #116]
    4d38:	str	w0, [x24, #640]
    4d3c:	cmp	w3, #0x7
    4d40:	str	w3, [x24, #644]
    4d44:	b.gt	4d10 <BZ2_compressBlock@@Base+0x170>
    4d48:	mov	w1, #0x18                  	// #24
    4d4c:	sub	w3, w1, w3
    4d50:	mov	w1, #0x59                  	// #89
    4d54:	str	w2, [x24, #644]
    4d58:	lsl	w1, w1, w3
    4d5c:	orr	w1, w1, w0
    4d60:	str	w1, [x24, #640]
    4d64:	cmp	w2, #0x7
    4d68:	b.le	a6ec <BZ2_compressBlock@@Base+0x5b4c>
    4d6c:	ldr	w0, [x24, #116]
    4d70:	ldr	x2, [x24, #80]
    4d74:	lsr	w1, w1, #24
    4d78:	strb	w1, [x2, w0, sxtw]
    4d7c:	ldr	w1, [x24, #640]
    4d80:	ldr	w0, [x24, #116]
    4d84:	ldr	w3, [x24, #644]
    4d88:	lsl	w1, w1, #8
    4d8c:	add	w0, w0, #0x1
    4d90:	sub	w2, w3, #0x8
    4d94:	str	w0, [x24, #116]
    4d98:	str	w1, [x24, #640]
    4d9c:	cmp	w2, #0x7
    4da0:	str	w2, [x24, #644]
    4da4:	b.gt	4d70 <BZ2_compressBlock@@Base+0x1d0>
    4da8:	mov	w0, #0x18                  	// #24
    4dac:	sub	w2, w0, w2
    4db0:	mov	w0, #0x26                  	// #38
    4db4:	str	w3, [x24, #644]
    4db8:	lsl	w0, w0, w2
    4dbc:	orr	w1, w0, w1
    4dc0:	str	w1, [x24, #640]
    4dc4:	cmp	w3, #0x7
    4dc8:	b.le	a6f4 <BZ2_compressBlock@@Base+0x5b54>
    4dcc:	ldr	w4, [x24, #116]
    4dd0:	ldr	x0, [x24, #80]
    4dd4:	lsr	w1, w1, #24
    4dd8:	strb	w1, [x0, w4, sxtw]
    4ddc:	ldr	w1, [x24, #640]
    4de0:	ldr	w4, [x24, #116]
    4de4:	ldr	w2, [x24, #644]
    4de8:	lsl	w1, w1, #8
    4dec:	add	w4, w4, #0x1
    4df0:	sub	w3, w2, #0x8
    4df4:	str	w4, [x24, #116]
    4df8:	str	w1, [x24, #640]
    4dfc:	cmp	w3, #0x7
    4e00:	str	w3, [x24, #644]
    4e04:	b.gt	4dd0 <BZ2_compressBlock@@Base+0x230>
    4e08:	mov	w0, #0x18                  	// #24
    4e0c:	sub	w3, w0, w3
    4e10:	mov	w0, #0x53                  	// #83
    4e14:	str	w2, [x24, #644]
    4e18:	lsl	w0, w0, w3
    4e1c:	orr	w0, w0, w1
    4e20:	str	w0, [x24, #640]
    4e24:	cmp	w2, #0x7
    4e28:	b.le	a6fc <BZ2_compressBlock@@Base+0x5b5c>
    4e2c:	ldr	w1, [x24, #116]
    4e30:	ldr	x2, [x24, #80]
    4e34:	lsr	w0, w0, #24
    4e38:	strb	w0, [x2, w1, sxtw]
    4e3c:	ldr	w0, [x24, #640]
    4e40:	ldr	w1, [x24, #116]
    4e44:	ldr	w3, [x24, #644]
    4e48:	lsl	w0, w0, #8
    4e4c:	add	w1, w1, #0x1
    4e50:	sub	w2, w3, #0x8
    4e54:	str	w1, [x24, #116]
    4e58:	str	w0, [x24, #640]
    4e5c:	cmp	w2, #0x7
    4e60:	str	w2, [x24, #644]
    4e64:	b.gt	4e30 <BZ2_compressBlock@@Base+0x290>
    4e68:	ldr	w1, [x24, #648]
    4e6c:	mov	w4, #0x18                  	// #24
    4e70:	sub	w4, w4, w2
    4e74:	mov	w2, #0x59                  	// #89
    4e78:	str	w3, [x24, #644]
    4e7c:	lsl	w2, w2, w4
    4e80:	orr	w0, w2, w0
    4e84:	str	w0, [x24, #640]
    4e88:	mov	x0, x24
    4e8c:	bl	49d0 <BZ2_hbCreateDecodeTables@@Base+0x298>
    4e90:	ldr	w1, [x24, #644]
    4e94:	cmp	w1, #0x7
    4e98:	b.le	a704 <BZ2_compressBlock@@Base+0x5b64>
    4e9c:	ldr	w2, [x24, #116]
    4ea0:	ldr	w0, [x24, #640]
    4ea4:	nop
    4ea8:	ldr	x1, [x24, #80]
    4eac:	lsr	w0, w0, #24
    4eb0:	strb	w0, [x1, w2, sxtw]
    4eb4:	ldr	w0, [x24, #640]
    4eb8:	ldr	w2, [x24, #116]
    4ebc:	ldr	w1, [x24, #644]
    4ec0:	lsl	w0, w0, #8
    4ec4:	add	w2, w2, #0x1
    4ec8:	sub	w1, w1, #0x8
    4ecc:	str	w2, [x24, #116]
    4ed0:	str	w0, [x24, #640]
    4ed4:	cmp	w1, #0x7
    4ed8:	str	w1, [x24, #644]
    4edc:	b.gt	4ea8 <BZ2_compressBlock@@Base+0x308>
    4ee0:	add	w1, w1, #0x1
    4ee4:	str	w1, [x24, #644]
    4ee8:	ldr	w4, [x24, #48]
    4eec:	cmp	w1, #0x8
    4ef0:	b.ne	4f30 <BZ2_compressBlock@@Base+0x390>  // b.any
    4ef4:	ldr	w2, [x24, #116]
    4ef8:	ldr	x1, [x24, #80]
    4efc:	lsr	w0, w0, #24
    4f00:	strb	w0, [x1, w2, sxtw]
    4f04:	ldr	w0, [x24, #640]
    4f08:	ldr	w2, [x24, #116]
    4f0c:	ldr	w1, [x24, #644]
    4f10:	lsl	w0, w0, #8
    4f14:	add	w2, w2, #0x1
    4f18:	sub	w1, w1, #0x8
    4f1c:	str	w2, [x24, #116]
    4f20:	str	w0, [x24, #640]
    4f24:	cmp	w1, #0x7
    4f28:	str	w1, [x24, #644]
    4f2c:	b.gt	4ef8 <BZ2_compressBlock@@Base+0x358>
    4f30:	mov	w5, #0x8                   	// #8
    4f34:	sub	w5, w5, w1
    4f38:	ldp	x23, x25, [x24, #56]
    4f3c:	lsl	w4, w4, w5
    4f40:	orr	w0, w4, w0
    4f44:	add	x3, x24, #0x180
    4f48:	mov	w4, #0x1                   	// #1
    4f4c:	str	w0, [x24, #640]
    4f50:	mov	w0, w4
    4f54:	add	x2, x24, #0x80
    4f58:	ldr	x5, [x24, #72]
    4f5c:	add	w1, w1, #0x18
    4f60:	mov	w20, #0x0                   	// #0
    4f64:	str	wzr, [x24, #124]
    4f68:	str	x5, [sp, #128]
    4f6c:	str	w1, [x24, #644]
    4f70:	str	x2, [sp, #664]
    4f74:	nop
    4f78:	ldrb	w4, [x2]
    4f7c:	add	w1, w20, #0x2
    4f80:	mov	w21, w0
    4f84:	cbz	w4, 4f9c <BZ2_compressBlock@@Base+0x3fc>
    4f88:	strb	w20, [x2, #256]
    4f8c:	mov	w21, w1
    4f90:	mov	w20, w0
    4f94:	str	w0, [x24, #124]
    4f98:	add	w0, w0, #0x1
    4f9c:	add	x2, x2, #0x1
    4fa0:	cmp	x2, x3
    4fa4:	b.ne	4f78 <BZ2_compressBlock@@Base+0x3d8>  // b.any
    4fa8:	sxtw	x2, w0
    4fac:	cmn	w20, #0x1
    4fb0:	add	x2, x2, #0x1
    4fb4:	mov	x3, #0x4                   	// #4
    4fb8:	add	x19, x24, #0x2a0
    4fbc:	mov	w1, #0x0                   	// #0
    4fc0:	lsl	x2, x2, #2
    4fc4:	str	w0, [sp, #564]
    4fc8:	csel	x2, x2, x3, ge  // ge = tcont
    4fcc:	mov	x0, x19
    4fd0:	bl	1600 <memset@plt>
    4fd4:	cbz	w20, a690 <BZ2_compressBlock@@Base+0x5af0>
    4fd8:	sub	w0, w20, #0x1
    4fdc:	cmp	w0, #0xe
    4fe0:	b.ls	a70c <BZ2_compressBlock@@Base+0x5b6c>  // b.plast
    4fe4:	adrp	x0, 11000 <BZ2_bzerror@@Base+0x200>
    4fe8:	ldr	q0, [x0, #352]
    4fec:	lsr	w0, w20, #4
    4ff0:	cmp	w0, #0x1
    4ff4:	str	q0, [sp, #736]
    4ff8:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    4ffc:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5000:	cmp	w0, #0x2
    5004:	ldr	q0, [x1, #368]
    5008:	str	q0, [sp, #752]
    500c:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5010:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5014:	cmp	w0, #0x3
    5018:	ldr	q0, [x1, #384]
    501c:	str	q0, [sp, #768]
    5020:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5024:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5028:	cmp	w0, #0x4
    502c:	ldr	q0, [x1, #400]
    5030:	str	q0, [sp, #784]
    5034:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5038:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    503c:	cmp	w0, #0x5
    5040:	ldr	q0, [x1, #416]
    5044:	str	q0, [sp, #800]
    5048:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    504c:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5050:	cmp	w0, #0x6
    5054:	ldr	q0, [x1, #432]
    5058:	str	q0, [sp, #816]
    505c:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5060:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5064:	cmp	w0, #0x7
    5068:	ldr	q0, [x1, #448]
    506c:	str	q0, [sp, #832]
    5070:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5074:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5078:	cmp	w0, #0x8
    507c:	ldr	q0, [x1, #464]
    5080:	str	q0, [sp, #848]
    5084:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5088:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    508c:	cmp	w0, #0x9
    5090:	ldr	q0, [x1, #480]
    5094:	str	q0, [sp, #864]
    5098:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    509c:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    50a0:	cmp	w0, #0xa
    50a4:	ldr	q0, [x1, #496]
    50a8:	str	q0, [sp, #880]
    50ac:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    50b0:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    50b4:	cmp	w0, #0xb
    50b8:	ldr	q0, [x1, #512]
    50bc:	str	q0, [sp, #896]
    50c0:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    50c4:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    50c8:	cmp	w0, #0xc
    50cc:	ldr	q0, [x1, #528]
    50d0:	str	q0, [sp, #912]
    50d4:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    50d8:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    50dc:	cmp	w0, #0xd
    50e0:	ldr	q0, [x1, #544]
    50e4:	str	q0, [sp, #928]
    50e8:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    50ec:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    50f0:	cmp	w0, #0xe
    50f4:	ldr	q0, [x1, #560]
    50f8:	str	q0, [sp, #944]
    50fc:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5100:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    5104:	cmp	w0, #0xf
    5108:	ldr	q0, [x1, #576]
    510c:	str	q0, [sp, #960]
    5110:	b.eq	5120 <BZ2_compressBlock@@Base+0x580>  // b.none
    5114:	adrp	x0, 11000 <BZ2_bzerror@@Base+0x200>
    5118:	ldr	q0, [x0, #592]
    511c:	str	q0, [sp, #976]
    5120:	tst	x20, #0xf
    5124:	and	w0, w20, #0xfffffff0
    5128:	b.eq	a690 <BZ2_compressBlock@@Base+0x5af0>  // b.none
    512c:	add	x2, sp, #0x2e0
    5130:	str	x2, [sp, #168]
    5134:	add	w1, w0, #0x1
    5138:	cmp	w1, w20
    513c:	strb	w0, [x2, w0, sxtw]
    5140:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5144:	strb	w1, [x2, w1, sxtw]
    5148:	add	w1, w0, #0x2
    514c:	cmp	w1, w20
    5150:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5154:	strb	w1, [x2, w1, sxtw]
    5158:	add	w1, w0, #0x3
    515c:	cmp	w1, w20
    5160:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5164:	strb	w1, [x2, w1, sxtw]
    5168:	add	w1, w0, #0x4
    516c:	cmp	w1, w20
    5170:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5174:	strb	w1, [x2, w1, sxtw]
    5178:	add	w1, w0, #0x5
    517c:	cmp	w1, w20
    5180:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5184:	strb	w1, [x2, w1, sxtw]
    5188:	add	w1, w0, #0x6
    518c:	cmp	w1, w20
    5190:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5194:	strb	w1, [x2, w1, sxtw]
    5198:	add	w1, w0, #0x7
    519c:	cmp	w1, w20
    51a0:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    51a4:	strb	w1, [x2, w1, sxtw]
    51a8:	add	w1, w0, #0x8
    51ac:	cmp	w1, w20
    51b0:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    51b4:	strb	w1, [x2, w1, sxtw]
    51b8:	add	w1, w0, #0x9
    51bc:	cmp	w1, w20
    51c0:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    51c4:	strb	w1, [x2, w1, sxtw]
    51c8:	add	w1, w0, #0xa
    51cc:	cmp	w1, w20
    51d0:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    51d4:	strb	w1, [x2, w1, sxtw]
    51d8:	add	w1, w0, #0xb
    51dc:	cmp	w1, w20
    51e0:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    51e4:	strb	w1, [x2, w1, sxtw]
    51e8:	add	w1, w0, #0xc
    51ec:	cmp	w1, w20
    51f0:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    51f4:	strb	w1, [x2, w1, sxtw]
    51f8:	add	w1, w0, #0xd
    51fc:	cmp	w1, w20
    5200:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5204:	strb	w1, [x2, w1, sxtw]
    5208:	add	w0, w0, #0xe
    520c:	cmp	w0, w20
    5210:	b.ge	5218 <BZ2_compressBlock@@Base+0x678>  // b.tcont
    5214:	strb	w0, [x2, w0, sxtw]
    5218:	ldr	w2, [x24, #108]
    521c:	mov	x4, #0x0                   	// #0
    5220:	mov	w22, #0x0                   	// #0
    5224:	mov	w0, #0x0                   	// #0
    5228:	cmp	w2, #0x0
    522c:	mov	w6, #0x1                   	// #1
    5230:	b.le	a6d0 <BZ2_compressBlock@@Base+0x5b30>
    5234:	ldr	x7, [sp, #128]
    5238:	ldr	x8, [sp, #168]
    523c:	b	5250 <BZ2_compressBlock@@Base+0x6b0>
    5240:	add	x4, x4, #0x1
    5244:	add	w0, w0, #0x1
    5248:	cmp	w2, w4
    524c:	b.le	52dc <BZ2_compressBlock@@Base+0x73c>
    5250:	ldr	w1, [x23, x4, lsl #2]
    5254:	ldrb	w9, [sp, #736]
    5258:	subs	w1, w1, #0x1
    525c:	add	w3, w1, w2
    5260:	csel	w1, w3, w1, mi  // mi = first
    5264:	ldrb	w1, [x25, w1, sxtw]
    5268:	add	x1, x24, x1
    526c:	ldrb	w5, [x1, #384]
    5270:	cmp	w5, w9
    5274:	b.eq	5240 <BZ2_compressBlock@@Base+0x6a0>  // b.none
    5278:	cbnz	w0, 5628 <BZ2_compressBlock@@Base+0xa88>
    527c:	ldrb	w3, [sp, #737]
    5280:	strb	w9, [sp, #737]
    5284:	cmp	w5, w3
    5288:	b.eq	5694 <BZ2_compressBlock@@Base+0xaf4>  // b.none
    528c:	add	x0, x8, #0x1
    5290:	mov	w1, w3
    5294:	ldrb	w3, [x0, #1]!
    5298:	strb	w1, [x0]
    529c:	cmp	w5, w3
    52a0:	b.ne	5290 <BZ2_compressBlock@@Base+0x6f0>  // b.any
    52a4:	sub	x1, x0, x8
    52a8:	add	w1, w1, #0x1
    52ac:	and	w0, w1, #0xffff
    52b0:	add	x1, x24, w1, sxtw #2
    52b4:	strb	w3, [sp, #736]
    52b8:	strh	w0, [x7, w22, sxtw #1]
    52bc:	add	x4, x4, #0x1
    52c0:	add	w22, w22, #0x1
    52c4:	cmp	w2, w4
    52c8:	ldr	w3, [x1, #672]
    52cc:	mov	w0, #0x0                   	// #0
    52d0:	add	w3, w3, #0x1
    52d4:	str	w3, [x1, #672]
    52d8:	b.gt	5250 <BZ2_compressBlock@@Base+0x6b0>
    52dc:	cbz	w0, a670 <BZ2_compressBlock@@Base+0x5ad0>
    52e0:	sub	w0, w0, #0x1
    52e4:	sxtw	x1, w22
    52e8:	mov	w5, #0x1                   	// #1
    52ec:	ldr	x6, [sp, #128]
    52f0:	b	5318 <BZ2_compressBlock@@Base+0x778>
    52f4:	ldr	w3, [x24, #676]
    52f8:	cmp	w0, #0x1
    52fc:	strh	w5, [x6, x1, lsl #1]
    5300:	add	x1, x1, #0x1
    5304:	add	w3, w3, #0x1
    5308:	str	w3, [x24, #676]
    530c:	sub	w3, w0, #0x2
    5310:	b.le	5344 <BZ2_compressBlock@@Base+0x7a4>
    5314:	asr	w0, w3, #1
    5318:	mov	w22, w1
    531c:	add	w4, w1, #0x1
    5320:	tbnz	w0, #0, 52f4 <BZ2_compressBlock@@Base+0x754>
    5324:	ldr	w3, [x24, #672]
    5328:	cmp	w0, #0x1
    532c:	strh	wzr, [x6, x1, lsl #1]
    5330:	add	x1, x1, #0x1
    5334:	add	w3, w3, #0x1
    5338:	str	w3, [x24, #672]
    533c:	sub	w3, w0, #0x2
    5340:	b.gt	5314 <BZ2_compressBlock@@Base+0x774>
    5344:	ldr	x0, [sp, #128]
    5348:	add	w27, w22, #0x2
    534c:	add	x4, x0, w4, sxtw #1
    5350:	add	x1, x24, w21, sxtw #2
    5354:	strh	w21, [x4]
    5358:	add	w22, w20, #0x2
    535c:	ldr	w0, [x1, #672]
    5360:	add	w0, w0, #0x1
    5364:	str	w0, [x1, #672]
    5368:	str	w27, [x24, #668]
    536c:	ldr	w0, [x24, #656]
    5370:	cmp	w0, #0x2
    5374:	b.gt	a618 <BZ2_compressBlock@@Base+0x5a78>
    5378:	ldr	w21, [sp, #564]
    537c:	mov	x23, #0x934c                	// #37708
    5380:	add	x0, x24, x23
    5384:	mov	x25, #0x9958                	// #39256
    5388:	mov	x20, x0
    538c:	add	x21, x21, #0x1
    5390:	add	x23, x24, x25
    5394:	str	x0, [sp, #600]
    5398:	str	x23, [sp, #688]
    539c:	nop
    53a0:	mov	x0, x20
    53a4:	mov	x2, x21
    53a8:	add	x20, x20, #0x102
    53ac:	mov	w1, #0xf                   	// #15
    53b0:	bl	1600 <memset@plt>
    53b4:	cmp	x23, x20
    53b8:	b.ne	53a0 <BZ2_compressBlock@@Base+0x800>  // b.any
    53bc:	cmp	w27, #0x0
    53c0:	b.le	a680 <BZ2_compressBlock@@Base+0x5ae0>
    53c4:	cmp	w27, #0xc7
    53c8:	b.le	5960 <BZ2_compressBlock@@Base+0xdc0>
    53cc:	cmp	w27, #0x257
    53d0:	b.le	a568 <BZ2_compressBlock@@Base+0x59c8>
    53d4:	cmp	w27, #0x4af
    53d8:	b.le	a69c <BZ2_compressBlock@@Base+0x5afc>
    53dc:	cmp	w27, #0x95f
    53e0:	b.gt	a6ac <BZ2_compressBlock@@Base+0x5b0c>
    53e4:	mov	w0, #0x5                   	// #5
    53e8:	str	w0, [sp, #624]
    53ec:	str	w0, [sp, #684]
    53f0:	b	596c <BZ2_compressBlock@@Base+0xdcc>
    53f4:	ldr	w28, [sp, #112]
    53f8:	ldr	w23, [sp, #120]
    53fc:	str	w21, [sp, #648]
    5400:	ldr	w0, [sp, #648]
    5404:	cmp	w0, w28
    5408:	b.eq	5414 <BZ2_compressBlock@@Base+0x874>  // b.none
    540c:	mov	w0, #0xbbf                 	// #3007
    5410:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    5414:	ldr	w0, [x24, #656]
    5418:	cmp	w0, #0x2
    541c:	b.gt	a5a8 <BZ2_compressBlock@@Base+0x5a08>
    5420:	ldp	x19, x20, [sp, #16]
    5424:	ldp	x21, x22, [sp, #32]
    5428:	ldp	x25, x26, [sp, #64]
    542c:	ldp	x27, x28, [sp, #80]
    5430:	ldr	d8, [sp, #96]
    5434:	ldr	w0, [sp, #628]
    5438:	cbnz	w0, 56a0 <BZ2_compressBlock@@Base+0xb00>
    543c:	ldp	x29, x30, [sp]
    5440:	ldp	x23, x24, [sp, #48]
    5444:	add	sp, sp, #0x3e0
    5448:	ret
    544c:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    5450:	adrp	x1, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    5454:	add	x1, x1, #0xfe8
    5458:	ldr	x0, [x0, #4008]
    545c:	ldr	x0, [x0]
    5460:	bl	17c0 <fprintf@plt>
    5464:	b	4bfc <BZ2_compressBlock@@Base+0x5c>
    5468:	ldr	x0, [x0, #32]
    546c:	cmp	w2, #0x1
    5470:	add	x5, x0, w5, sxtw
    5474:	str	x5, [x24, #80]
    5478:	b.ne	5434 <BZ2_compressBlock@@Base+0x894>  // b.any
    547c:	mov	x0, x24
    5480:	bl	16e0 <BZ2_bsInitWrite@plt>
    5484:	ldr	w1, [x24, #644]
    5488:	cmp	w1, #0x7
    548c:	b.le	a6bc <BZ2_compressBlock@@Base+0x5b1c>
    5490:	ldr	w3, [x24, #116]
    5494:	ldr	w0, [x24, #640]
    5498:	ldr	x1, [x24, #80]
    549c:	lsr	w0, w0, #24
    54a0:	strb	w0, [x1, w3, sxtw]
    54a4:	ldr	w0, [x24, #640]
    54a8:	ldr	w3, [x24, #116]
    54ac:	ldr	w2, [x24, #644]
    54b0:	lsl	w0, w0, #8
    54b4:	add	w3, w3, #0x1
    54b8:	sub	w1, w2, #0x8
    54bc:	str	w3, [x24, #116]
    54c0:	str	w0, [x24, #640]
    54c4:	cmp	w1, #0x7
    54c8:	str	w1, [x24, #644]
    54cc:	b.gt	5498 <BZ2_compressBlock@@Base+0x8f8>
    54d0:	mov	w3, #0x18                  	// #24
    54d4:	sub	w3, w3, w1
    54d8:	mov	w1, #0x42                  	// #66
    54dc:	str	w2, [x24, #644]
    54e0:	lsl	w1, w1, w3
    54e4:	orr	w1, w1, w0
    54e8:	str	w1, [x24, #640]
    54ec:	cmp	w2, #0x7
    54f0:	b.le	a74c <BZ2_compressBlock@@Base+0x5bac>
    54f4:	ldr	w0, [x24, #116]
    54f8:	ldr	x2, [x24, #80]
    54fc:	lsr	w1, w1, #24
    5500:	strb	w1, [x2, w0, sxtw]
    5504:	ldr	w1, [x24, #640]
    5508:	ldr	w0, [x24, #116]
    550c:	ldr	w3, [x24, #644]
    5510:	lsl	w1, w1, #8
    5514:	add	w0, w0, #0x1
    5518:	sub	w2, w3, #0x8
    551c:	str	w0, [x24, #116]
    5520:	str	w1, [x24, #640]
    5524:	cmp	w2, #0x7
    5528:	str	w2, [x24, #644]
    552c:	b.gt	54f8 <BZ2_compressBlock@@Base+0x958>
    5530:	mov	w0, #0x18                  	// #24
    5534:	sub	w2, w0, w2
    5538:	mov	w0, #0x5a                  	// #90
    553c:	str	w3, [x24, #644]
    5540:	lsl	w0, w0, w2
    5544:	orr	w1, w0, w1
    5548:	str	w1, [x24, #640]
    554c:	cmp	w3, #0x7
    5550:	b.le	a75c <BZ2_compressBlock@@Base+0x5bbc>
    5554:	ldr	w4, [x24, #116]
    5558:	ldr	x0, [x24, #80]
    555c:	lsr	w1, w1, #24
    5560:	strb	w1, [x0, w4, sxtw]
    5564:	ldr	w1, [x24, #640]
    5568:	ldr	w4, [x24, #116]
    556c:	ldr	w2, [x24, #644]
    5570:	lsl	w1, w1, #8
    5574:	add	w4, w4, #0x1
    5578:	sub	w3, w2, #0x8
    557c:	str	w4, [x24, #116]
    5580:	str	w1, [x24, #640]
    5584:	cmp	w3, #0x7
    5588:	str	w3, [x24, #644]
    558c:	b.gt	5558 <BZ2_compressBlock@@Base+0x9b8>
    5590:	mov	w0, #0x18                  	// #24
    5594:	sub	w3, w0, w3
    5598:	ldr	w4, [x24, #664]
    559c:	mov	w0, #0x68                  	// #104
    55a0:	lsl	w0, w0, w3
    55a4:	orr	w0, w0, w1
    55a8:	str	w0, [x24, #640]
    55ac:	add	w4, w4, #0x30
    55b0:	str	w2, [x24, #644]
    55b4:	cmp	w2, #0x7
    55b8:	and	w4, w4, #0xff
    55bc:	b.le	a754 <BZ2_compressBlock@@Base+0x5bb4>
    55c0:	ldr	w1, [x24, #116]
    55c4:	nop
    55c8:	ldr	x2, [x24, #80]
    55cc:	lsr	w0, w0, #24
    55d0:	strb	w0, [x2, w1, sxtw]
    55d4:	ldr	w0, [x24, #640]
    55d8:	ldr	w1, [x24, #116]
    55dc:	ldr	w3, [x24, #644]
    55e0:	lsl	w0, w0, #8
    55e4:	add	w1, w1, #0x1
    55e8:	sub	w2, w3, #0x8
    55ec:	str	w1, [x24, #116]
    55f0:	str	w0, [x24, #640]
    55f4:	cmp	w2, #0x7
    55f8:	str	w2, [x24, #644]
    55fc:	b.gt	55c8 <BZ2_compressBlock@@Base+0xa28>
    5600:	mov	w1, #0x18                  	// #24
    5604:	sub	w2, w1, w2
    5608:	ldr	w1, [x24, #108]
    560c:	lsl	w2, w4, w2
    5610:	orr	w0, w2, w0
    5614:	str	w0, [x24, #640]
    5618:	cmp	w1, #0x0
    561c:	str	w3, [x24, #644]
    5620:	b.gt	4c28 <BZ2_compressBlock@@Base+0x88>
    5624:	b	5434 <BZ2_compressBlock@@Base+0x894>
    5628:	sub	w0, w0, #0x1
    562c:	sxtw	x1, w22
    5630:	b	5658 <BZ2_compressBlock@@Base+0xab8>
    5634:	ldr	w3, [x24, #676]
    5638:	cmp	w0, #0x1
    563c:	strh	w6, [x7, x1, lsl #1]
    5640:	add	x1, x1, #0x1
    5644:	add	w3, w3, #0x1
    5648:	str	w3, [x24, #676]
    564c:	sub	w3, w0, #0x2
    5650:	b.le	5680 <BZ2_compressBlock@@Base+0xae0>
    5654:	asr	w0, w3, #1
    5658:	add	w22, w1, #0x1
    565c:	tbnz	w0, #0, 5634 <BZ2_compressBlock@@Base+0xa94>
    5660:	ldr	w3, [x24, #672]
    5664:	cmp	w0, #0x1
    5668:	strh	wzr, [x7, x1, lsl #1]
    566c:	add	x1, x1, #0x1
    5670:	add	w3, w3, #0x1
    5674:	str	w3, [x24, #672]
    5678:	sub	w3, w0, #0x2
    567c:	b.gt	5654 <BZ2_compressBlock@@Base+0xab4>
    5680:	ldrb	w9, [sp, #736]
    5684:	ldrb	w3, [sp, #737]
    5688:	strb	w9, [sp, #737]
    568c:	cmp	w5, w3
    5690:	b.ne	528c <BZ2_compressBlock@@Base+0x6ec>  // b.any
    5694:	mov	w1, #0x2                   	// #2
    5698:	mov	w0, w1
    569c:	b	52b0 <BZ2_compressBlock@@Base+0x710>
    56a0:	ldr	w0, [x24, #644]
    56a4:	ldr	w1, [x24, #640]
    56a8:	cmp	w0, #0x7
    56ac:	b.le	a724 <BZ2_compressBlock@@Base+0x5b84>
    56b0:	ldr	w3, [x24, #116]
    56b4:	nop
    56b8:	ldr	x0, [x24, #80]
    56bc:	lsr	w1, w1, #24
    56c0:	strb	w1, [x0, w3, sxtw]
    56c4:	ldr	w1, [x24, #640]
    56c8:	ldr	w3, [x24, #116]
    56cc:	ldr	w2, [x24, #644]
    56d0:	lsl	w1, w1, #8
    56d4:	add	w3, w3, #0x1
    56d8:	sub	w0, w2, #0x8
    56dc:	str	w3, [x24, #116]
    56e0:	str	w1, [x24, #640]
    56e4:	cmp	w0, #0x7
    56e8:	str	w0, [x24, #644]
    56ec:	b.gt	56b8 <BZ2_compressBlock@@Base+0xb18>
    56f0:	mov	w3, #0x18                  	// #24
    56f4:	sub	w3, w3, w0
    56f8:	mov	w0, #0x17                  	// #23
    56fc:	str	w2, [x24, #644]
    5700:	lsl	w0, w0, w3
    5704:	orr	w0, w0, w1
    5708:	str	w0, [x24, #640]
    570c:	cmp	w2, #0x7
    5710:	b.le	a72c <BZ2_compressBlock@@Base+0x5b8c>
    5714:	ldr	w1, [x24, #116]
    5718:	ldr	x2, [x24, #80]
    571c:	lsr	w0, w0, #24
    5720:	strb	w0, [x2, w1, sxtw]
    5724:	ldr	w0, [x24, #640]
    5728:	ldr	w1, [x24, #116]
    572c:	ldr	w3, [x24, #644]
    5730:	lsl	w0, w0, #8
    5734:	add	w1, w1, #0x1
    5738:	sub	w2, w3, #0x8
    573c:	str	w1, [x24, #116]
    5740:	str	w0, [x24, #640]
    5744:	cmp	w2, #0x7
    5748:	str	w2, [x24, #644]
    574c:	b.gt	5718 <BZ2_compressBlock@@Base+0xb78>
    5750:	mov	w1, #0x18                  	// #24
    5754:	sub	w2, w1, w2
    5758:	mov	w1, #0x72                  	// #114
    575c:	str	w3, [x24, #644]
    5760:	lsl	w1, w1, w2
    5764:	orr	w0, w1, w0
    5768:	str	w0, [x24, #640]
    576c:	cmp	w3, #0x7
    5770:	b.le	a734 <BZ2_compressBlock@@Base+0x5b94>
    5774:	ldr	w4, [x24, #116]
    5778:	ldr	x1, [x24, #80]
    577c:	lsr	w0, w0, #24
    5780:	strb	w0, [x1, w4, sxtw]
    5784:	ldr	w0, [x24, #640]
    5788:	ldr	w4, [x24, #116]
    578c:	ldr	w2, [x24, #644]
    5790:	lsl	w0, w0, #8
    5794:	add	w4, w4, #0x1
    5798:	sub	w3, w2, #0x8
    579c:	str	w4, [x24, #116]
    57a0:	str	w0, [x24, #640]
    57a4:	cmp	w3, #0x7
    57a8:	str	w3, [x24, #644]
    57ac:	b.gt	5778 <BZ2_compressBlock@@Base+0xbd8>
    57b0:	mov	w1, #0x18                  	// #24
    57b4:	sub	w3, w1, w3
    57b8:	mov	w1, #0x45                  	// #69
    57bc:	str	w2, [x24, #644]
    57c0:	lsl	w1, w1, w3
    57c4:	orr	w1, w1, w0
    57c8:	str	w1, [x24, #640]
    57cc:	cmp	w2, #0x7
    57d0:	b.le	a73c <BZ2_compressBlock@@Base+0x5b9c>
    57d4:	ldr	w0, [x24, #116]
    57d8:	ldr	x2, [x24, #80]
    57dc:	lsr	w1, w1, #24
    57e0:	strb	w1, [x2, w0, sxtw]
    57e4:	ldr	w1, [x24, #640]
    57e8:	ldr	w0, [x24, #116]
    57ec:	ldr	w3, [x24, #644]
    57f0:	lsl	w1, w1, #8
    57f4:	add	w0, w0, #0x1
    57f8:	sub	w2, w3, #0x8
    57fc:	str	w0, [x24, #116]
    5800:	str	w1, [x24, #640]
    5804:	cmp	w2, #0x7
    5808:	str	w2, [x24, #644]
    580c:	b.gt	57d8 <BZ2_compressBlock@@Base+0xc38>
    5810:	mov	w0, #0x18                  	// #24
    5814:	sub	w2, w0, w2
    5818:	mov	w0, #0x38                  	// #56
    581c:	str	w3, [x24, #644]
    5820:	lsl	w0, w0, w2
    5824:	orr	w1, w0, w1
    5828:	str	w1, [x24, #640]
    582c:	cmp	w3, #0x7
    5830:	b.le	a71c <BZ2_compressBlock@@Base+0x5b7c>
    5834:	ldr	w4, [x24, #116]
    5838:	ldr	x0, [x24, #80]
    583c:	lsr	w1, w1, #24
    5840:	strb	w1, [x0, w4, sxtw]
    5844:	ldr	w1, [x24, #640]
    5848:	ldr	w4, [x24, #116]
    584c:	ldr	w2, [x24, #644]
    5850:	lsl	w1, w1, #8
    5854:	add	w4, w4, #0x1
    5858:	sub	w3, w2, #0x8
    585c:	str	w4, [x24, #116]
    5860:	str	w1, [x24, #640]
    5864:	cmp	w3, #0x7
    5868:	str	w3, [x24, #644]
    586c:	b.gt	5838 <BZ2_compressBlock@@Base+0xc98>
    5870:	mov	w0, #0x18                  	// #24
    5874:	sub	w3, w0, w3
    5878:	mov	w0, #0x50                  	// #80
    587c:	str	w2, [x24, #644]
    5880:	lsl	w0, w0, w3
    5884:	orr	w0, w0, w1
    5888:	str	w0, [x24, #640]
    588c:	cmp	w2, #0x7
    5890:	b.le	a714 <BZ2_compressBlock@@Base+0x5b74>
    5894:	ldr	w1, [x24, #116]
    5898:	ldr	x2, [x24, #80]
    589c:	lsr	w0, w0, #24
    58a0:	strb	w0, [x2, w1, sxtw]
    58a4:	ldr	w0, [x24, #640]
    58a8:	ldr	w1, [x24, #116]
    58ac:	ldr	w3, [x24, #644]
    58b0:	lsl	w0, w0, #8
    58b4:	add	w1, w1, #0x1
    58b8:	sub	w2, w3, #0x8
    58bc:	str	w1, [x24, #116]
    58c0:	str	w0, [x24, #640]
    58c4:	cmp	w2, #0x7
    58c8:	str	w2, [x24, #644]
    58cc:	b.gt	5898 <BZ2_compressBlock@@Base+0xcf8>
    58d0:	ldr	w1, [x24, #652]
    58d4:	mov	w4, #0x18                  	// #24
    58d8:	sub	w4, w4, w2
    58dc:	mov	w2, #0x90                  	// #144
    58e0:	str	w3, [x24, #644]
    58e4:	lsl	w2, w2, w4
    58e8:	orr	w0, w2, w0
    58ec:	str	w0, [x24, #640]
    58f0:	mov	x0, x24
    58f4:	bl	49d0 <BZ2_hbCreateDecodeTables@@Base+0x298>
    58f8:	ldr	w0, [x24, #656]
    58fc:	cmp	w0, #0x1
    5900:	b.gt	a548 <BZ2_compressBlock@@Base+0x59a8>
    5904:	ldr	w0, [x24, #644]
    5908:	cmp	w0, #0x0
    590c:	b.le	543c <BZ2_compressBlock@@Base+0x89c>
    5910:	ldr	w1, [x24, #116]
    5914:	ldr	w0, [x24, #640]
    5918:	ldr	x2, [x24, #80]
    591c:	lsr	w0, w0, #24
    5920:	strb	w0, [x2, w1, sxtw]
    5924:	ldr	w0, [x24, #640]
    5928:	ldr	w1, [x24, #116]
    592c:	ldr	w2, [x24, #644]
    5930:	lsl	w0, w0, #8
    5934:	add	w1, w1, #0x1
    5938:	sub	w2, w2, #0x8
    593c:	str	w1, [x24, #116]
    5940:	str	w0, [x24, #640]
    5944:	cmp	w2, #0x0
    5948:	str	w2, [x24, #644]
    594c:	b.gt	5918 <BZ2_compressBlock@@Base+0xd78>
    5950:	ldp	x29, x30, [sp]
    5954:	ldp	x23, x24, [sp, #48]
    5958:	add	sp, sp, #0x3e0
    595c:	ret
    5960:	mov	w0, #0x2                   	// #2
    5964:	str	w0, [sp, #624]
    5968:	str	w0, [sp, #684]
    596c:	ldr	w3, [sp, #624]
    5970:	mov	w2, #0x102                 	// #258
    5974:	mov	x0, #0x4059000000000000    	// #4636737291354636288
    5978:	adrp	x20, 22000 <BZ2_bzerror@@Base+0x11200>
    597c:	mov	w26, w3
    5980:	mov	w25, w3
    5984:	fmov	d8, x0
    5988:	lsr	w0, w22, #4
    598c:	smaddl	x2, w3, w2, x24
    5990:	str	w0, [sp, #680]
    5994:	sdiv	w3, w27, w26
    5998:	and	x0, x22, #0xfffffff0
    599c:	ldr	x20, [x20, #4008]
    59a0:	cmp	w25, w26
    59a4:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    59a8:	add	x6, x1, #0x68
    59ac:	str	x20, [sp, #152]
    59b0:	mov	x21, #0x924a                	// #37450
    59b4:	str	x0, [sp, #608]
    59b8:	and	w0, w22, #0xfffffff0
    59bc:	str	w0, [sp, #652]
    59c0:	mov	x1, x6
    59c4:	cset	w6, ne  // ne = any
    59c8:	cmp	w26, #0x1
    59cc:	add	x28, x2, x21
    59d0:	cset	w5, ne  // ne = any
    59d4:	mov	w23, #0x0                   	// #0
    59d8:	ldr	w7, [sp, #564]
    59dc:	mov	x11, x19
    59e0:	mov	w20, w0
    59e4:	sub	w21, w23, #0x1
    59e8:	cmp	w3, #0x0
    59ec:	b.le	5de0 <BZ2_compressBlock@@Base+0x1240>
    59f0:	cmp	w21, w7
    59f4:	b.ge	5de0 <BZ2_compressBlock@@Base+0x1240>  // b.tcont
    59f8:	sxtw	x0, w23
    59fc:	sub	w2, w7, w23
    5a00:	add	x4, x0, #0x1
    5a04:	mov	w19, #0x0                   	// #0
    5a08:	add	x2, x2, x4
    5a0c:	b	5a18 <BZ2_compressBlock@@Base+0xe78>
    5a10:	cmp	x2, x0
    5a14:	b.eq	5a30 <BZ2_compressBlock@@Base+0xe90>  // b.none
    5a18:	ldr	w4, [x11, x0, lsl #2]
    5a1c:	mov	w21, w0
    5a20:	add	x0, x0, #0x1
    5a24:	add	w19, w19, w4
    5a28:	cmp	w3, w19
    5a2c:	b.gt	5a10 <BZ2_compressBlock@@Base+0xe70>
    5a30:	cmp	w6, #0x0
    5a34:	ccmp	w5, #0x0, #0x4, ne  // ne = any
    5a38:	cset	w0, ne  // ne = any
    5a3c:	cmp	w21, w23
    5a40:	cset	w2, gt
    5a44:	and	w0, w0, w2
    5a48:	cbnz	w0, 5de8 <BZ2_compressBlock@@Base+0x1248>
    5a4c:	ldr	w0, [x24, #656]
    5a50:	add	w8, w21, #0x1
    5a54:	cmp	w0, #0x2
    5a58:	b.gt	5e10 <BZ2_compressBlock@@Base+0x1270>
    5a5c:	sub	w26, w26, #0x1
    5a60:	cmp	w22, #0x0
    5a64:	b.le	5db0 <BZ2_compressBlock@@Base+0x1210>
    5a68:	cmp	w7, #0xe
    5a6c:	b.ls	a52c <BZ2_compressBlock@@Base+0x598c>  // b.plast
    5a70:	adrp	x3, 10000 <BZ2_bzWriteClose64@@Base+0x48>
    5a74:	dup	v5.4s, w23
    5a78:	ldr	x0, [sp, #608]
    5a7c:	dup	v4.4s, w21
    5a80:	ldr	q18, [x3, #4000]
    5a84:	add	x2, x28, x0
    5a88:	movi	v23.4s, #0x10
    5a8c:	mov	x0, x28
    5a90:	movi	v22.4s, #0x4
    5a94:	movi	v21.4s, #0x8
    5a98:	movi	v20.4s, #0xc
    5a9c:	movi	v19.16b, #0xf
    5aa0:	mov	v0.16b, v18.16b
    5aa4:	add	v18.4s, v18.4s, v23.4s
    5aa8:	add	v3.4s, v0.4s, v22.4s
    5aac:	add	v2.4s, v0.4s, v21.4s
    5ab0:	add	v1.4s, v0.4s, v20.4s
    5ab4:	cmge	v17.4s, v4.4s, v0.4s
    5ab8:	cmge	v16.4s, v4.4s, v3.4s
    5abc:	cmge	v7.4s, v4.4s, v2.4s
    5ac0:	cmge	v6.4s, v4.4s, v1.4s
    5ac4:	cmge	v3.4s, v3.4s, v5.4s
    5ac8:	cmge	v0.4s, v0.4s, v5.4s
    5acc:	cmge	v2.4s, v2.4s, v5.4s
    5ad0:	cmge	v1.4s, v1.4s, v5.4s
    5ad4:	and	v3.16b, v16.16b, v3.16b
    5ad8:	and	v0.16b, v17.16b, v0.16b
    5adc:	and	v2.16b, v7.16b, v2.16b
    5ae0:	and	v1.16b, v6.16b, v1.16b
    5ae4:	xtn	v6.4h, v0.4s
    5ae8:	xtn2	v6.8h, v3.4s
    5aec:	xtn	v3.4h, v2.4s
    5af0:	xtn2	v3.8h, v1.4s
    5af4:	xtn	v0.8b, v6.8h
    5af8:	xtn2	v0.16b, v3.8h
    5afc:	bic	v0.16b, v19.16b, v0.16b
    5b00:	str	q0, [x0], #16
    5b04:	cmp	x2, x0
    5b08:	b.ne	5aa0 <BZ2_compressBlock@@Base+0xf00>  // b.any
    5b0c:	cmp	w20, w22
    5b10:	b.eq	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.none
    5b14:	mov	w3, w20
    5b18:	cmp	w21, w3
    5b1c:	sxtw	x0, w26
    5b20:	sbfiz	x2, x26, #7, #32
    5b24:	ccmp	w23, w3, #0x0, ge  // ge = tcont
    5b28:	add	x2, x2, x0
    5b2c:	b.gt	5e6c <BZ2_compressBlock@@Base+0x12cc>
    5b30:	add	x2, x24, x2, lsl #1
    5b34:	add	x2, x2, w3, sxtw
    5b38:	add	x2, x2, #0x9, lsl #12
    5b3c:	strb	wzr, [x2, #844]
    5b40:	add	w2, w3, #0x1
    5b44:	cmp	w2, w22
    5b48:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5b4c:	cmp	w21, w2
    5b50:	add	x4, x0, x0, lsl #7
    5b54:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5b58:	b.gt	5e84 <BZ2_compressBlock@@Base+0x12e4>
    5b5c:	add	x4, x24, x4, lsl #1
    5b60:	add	x2, x4, w2, sxtw
    5b64:	add	x2, x2, #0x9, lsl #12
    5b68:	strb	wzr, [x2, #844]
    5b6c:	add	w2, w3, #0x2
    5b70:	cmp	w2, w22
    5b74:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5b78:	cmp	w21, w2
    5b7c:	add	x4, x0, x0, lsl #7
    5b80:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5b84:	b.gt	5e9c <BZ2_compressBlock@@Base+0x12fc>
    5b88:	add	x4, x24, x4, lsl #1
    5b8c:	add	x2, x4, w2, sxtw
    5b90:	add	x2, x2, #0x9, lsl #12
    5b94:	strb	wzr, [x2, #844]
    5b98:	add	w2, w3, #0x3
    5b9c:	cmp	w2, w22
    5ba0:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5ba4:	cmp	w21, w2
    5ba8:	add	x4, x0, x0, lsl #7
    5bac:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5bb0:	b.gt	5eb4 <BZ2_compressBlock@@Base+0x1314>
    5bb4:	add	x4, x24, x4, lsl #1
    5bb8:	add	x2, x4, w2, sxtw
    5bbc:	add	x2, x2, #0x9, lsl #12
    5bc0:	strb	wzr, [x2, #844]
    5bc4:	add	w2, w3, #0x4
    5bc8:	cmp	w2, w22
    5bcc:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5bd0:	cmp	w21, w2
    5bd4:	add	x4, x0, x0, lsl #7
    5bd8:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5bdc:	b.gt	5ecc <BZ2_compressBlock@@Base+0x132c>
    5be0:	add	x4, x24, x4, lsl #1
    5be4:	add	x2, x4, w2, sxtw
    5be8:	add	x2, x2, #0x9, lsl #12
    5bec:	strb	wzr, [x2, #844]
    5bf0:	add	w2, w3, #0x5
    5bf4:	cmp	w2, w22
    5bf8:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5bfc:	cmp	w21, w2
    5c00:	add	x4, x0, x0, lsl #7
    5c04:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5c08:	b.gt	5ee4 <BZ2_compressBlock@@Base+0x1344>
    5c0c:	add	x4, x24, x4, lsl #1
    5c10:	add	x2, x4, w2, sxtw
    5c14:	add	x2, x2, #0x9, lsl #12
    5c18:	strb	wzr, [x2, #844]
    5c1c:	add	w2, w3, #0x6
    5c20:	cmp	w2, w22
    5c24:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5c28:	cmp	w21, w2
    5c2c:	add	x4, x0, x0, lsl #7
    5c30:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5c34:	b.gt	5efc <BZ2_compressBlock@@Base+0x135c>
    5c38:	add	x4, x24, x4, lsl #1
    5c3c:	add	x2, x4, w2, sxtw
    5c40:	add	x2, x2, #0x9, lsl #12
    5c44:	strb	wzr, [x2, #844]
    5c48:	add	w2, w3, #0x7
    5c4c:	cmp	w2, w22
    5c50:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5c54:	cmp	w21, w2
    5c58:	add	x4, x0, x0, lsl #7
    5c5c:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5c60:	b.gt	5f14 <BZ2_compressBlock@@Base+0x1374>
    5c64:	add	x4, x24, x4, lsl #1
    5c68:	add	x2, x4, w2, sxtw
    5c6c:	add	x2, x2, #0x9, lsl #12
    5c70:	strb	wzr, [x2, #844]
    5c74:	add	w2, w3, #0x8
    5c78:	cmp	w2, w22
    5c7c:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5c80:	cmp	w21, w2
    5c84:	add	x4, x0, x0, lsl #7
    5c88:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5c8c:	b.gt	9c78 <BZ2_compressBlock@@Base+0x50d8>
    5c90:	add	x4, x24, x4, lsl #1
    5c94:	add	x2, x4, w2, sxtw
    5c98:	add	x2, x2, #0x9, lsl #12
    5c9c:	strb	wzr, [x2, #844]
    5ca0:	add	w2, w3, #0x9
    5ca4:	cmp	w2, w22
    5ca8:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5cac:	cmp	w21, w2
    5cb0:	add	x4, x0, x0, lsl #7
    5cb4:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5cb8:	b.gt	9ca8 <BZ2_compressBlock@@Base+0x5108>
    5cbc:	add	x4, x24, x4, lsl #1
    5cc0:	add	x2, x4, w2, sxtw
    5cc4:	add	x2, x2, #0x9, lsl #12
    5cc8:	strb	wzr, [x2, #844]
    5ccc:	add	w2, w3, #0xa
    5cd0:	cmp	w2, w22
    5cd4:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5cd8:	cmp	w21, w2
    5cdc:	add	x4, x0, x0, lsl #7
    5ce0:	ccmp	w23, w2, #0x0, ge  // ge = tcont
    5ce4:	b.gt	9cc0 <BZ2_compressBlock@@Base+0x5120>
    5ce8:	add	x4, x24, x4, lsl #1
    5cec:	add	x2, x4, w2, sxtw
    5cf0:	add	x2, x2, #0x9, lsl #12
    5cf4:	strb	wzr, [x2, #844]
    5cf8:	add	w2, w3, #0xb
    5cfc:	cmp	w2, w22
    5d00:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5d04:	cmp	w21, w2
    5d08:	add	x4, x0, x0, lsl #7
    5d0c:	ccmp	w2, w23, #0x1, ge  // ge = tcont
    5d10:	b.lt	9cec <BZ2_compressBlock@@Base+0x514c>  // b.tstop
    5d14:	add	x4, x24, x4, lsl #1
    5d18:	add	x2, x4, w2, sxtw
    5d1c:	add	x2, x2, #0x9, lsl #12
    5d20:	strb	wzr, [x2, #844]
    5d24:	add	w2, w3, #0xc
    5d28:	cmp	w2, w22
    5d2c:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5d30:	cmp	w21, w2
    5d34:	add	x4, x0, x0, lsl #7
    5d38:	ccmp	w2, w23, #0x1, ge  // ge = tcont
    5d3c:	b.lt	9d0c <BZ2_compressBlock@@Base+0x516c>  // b.tstop
    5d40:	add	x4, x24, x4, lsl #1
    5d44:	add	x2, x4, w2, sxtw
    5d48:	add	x2, x2, #0x9, lsl #12
    5d4c:	strb	wzr, [x2, #844]
    5d50:	add	w2, w3, #0xd
    5d54:	cmp	w2, w22
    5d58:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5d5c:	cmp	w21, w2
    5d60:	add	x4, x0, x0, lsl #7
    5d64:	ccmp	w2, w23, #0x1, ge  // ge = tcont
    5d68:	b.lt	a504 <BZ2_compressBlock@@Base+0x5964>  // b.tstop
    5d6c:	add	x4, x24, x4, lsl #1
    5d70:	add	x2, x4, w2, sxtw
    5d74:	add	x2, x2, #0x9, lsl #12
    5d78:	strb	wzr, [x2, #844]
    5d7c:	add	w3, w3, #0xe
    5d80:	cmp	w3, w22
    5d84:	b.ge	5db0 <BZ2_compressBlock@@Base+0x1210>  // b.tcont
    5d88:	cmp	w21, w3
    5d8c:	add	x0, x0, x0, lsl #7
    5d90:	ccmp	w3, w23, #0x1, ge  // ge = tcont
    5d94:	b.ge	a534 <BZ2_compressBlock@@Base+0x5994>  // b.tcont
    5d98:	add	x0, x24, x0, lsl #1
    5d9c:	mov	w2, #0xf                   	// #15
    5da0:	add	x3, x0, w3, sxtw
    5da4:	add	x3, x3, #0x9, lsl #12
    5da8:	strb	w2, [x3, #844]
    5dac:	nop
    5db0:	sub	w27, w27, w19
    5db4:	sub	x28, x28, #0x102
    5db8:	cbz	w26, 5f2c <BZ2_compressBlock@@Base+0x138c>
    5dbc:	sdiv	w3, w27, w26
    5dc0:	cmp	w25, w26
    5dc4:	mov	w23, w8
    5dc8:	cset	w6, ne  // ne = any
    5dcc:	cmp	w26, #0x1
    5dd0:	sub	w21, w23, #0x1
    5dd4:	cset	w5, ne  // ne = any
    5dd8:	cmp	w3, #0x0
    5ddc:	b.gt	59f0 <BZ2_compressBlock@@Base+0xe50>
    5de0:	mov	w19, #0x0                   	// #0
    5de4:	b	5a4c <BZ2_compressBlock@@Base+0xeac>
    5de8:	sub	w0, w25, w26
    5dec:	tbz	w0, #0, 5a4c <BZ2_compressBlock@@Base+0xeac>
    5df0:	add	x0, x24, w21, sxtw #2
    5df4:	mov	w8, w21
    5df8:	sub	w21, w21, #0x1
    5dfc:	ldr	w0, [x0, #672]
    5e00:	sub	w19, w19, w0
    5e04:	ldr	w0, [x24, #656]
    5e08:	cmp	w0, #0x2
    5e0c:	b.le	5a5c <BZ2_compressBlock@@Base+0xebc>
    5e10:	scvtf	s1, w19
    5e14:	ldr	s0, [x24, #668]
    5e18:	ldr	x0, [sp, #152]
    5e1c:	mov	w5, w19
    5e20:	scvtf	s0, s0
    5e24:	mov	w4, w21
    5e28:	fcvt	d1, s1
    5e2c:	mov	w3, w23
    5e30:	ldr	x0, [x0]
    5e34:	mov	w2, w26
    5e38:	fcvt	d0, s0
    5e3c:	str	x1, [sp, #112]
    5e40:	fmul	d1, d1, d8
    5e44:	str	w8, [sp, #120]
    5e48:	str	x11, [sp, #136]
    5e4c:	str	w7, [sp, #144]
    5e50:	fdiv	d0, d1, d0
    5e54:	bl	17c0 <fprintf@plt>
    5e58:	ldr	w8, [sp, #120]
    5e5c:	ldr	w7, [sp, #144]
    5e60:	ldr	x1, [sp, #112]
    5e64:	ldr	x11, [sp, #136]
    5e68:	b	5a5c <BZ2_compressBlock@@Base+0xebc>
    5e6c:	add	x2, x24, x2, lsl #1
    5e70:	mov	w4, #0xf                   	// #15
    5e74:	add	x2, x2, w3, sxtw
    5e78:	add	x2, x2, #0x9, lsl #12
    5e7c:	strb	w4, [x2, #844]
    5e80:	b	5b40 <BZ2_compressBlock@@Base+0xfa0>
    5e84:	add	x4, x24, x4, lsl #1
    5e88:	mov	w5, #0xf                   	// #15
    5e8c:	add	x2, x4, w2, sxtw
    5e90:	add	x2, x2, #0x9, lsl #12
    5e94:	strb	w5, [x2, #844]
    5e98:	b	5b6c <BZ2_compressBlock@@Base+0xfcc>
    5e9c:	add	x4, x24, x4, lsl #1
    5ea0:	mov	w5, #0xf                   	// #15
    5ea4:	add	x2, x4, w2, sxtw
    5ea8:	add	x2, x2, #0x9, lsl #12
    5eac:	strb	w5, [x2, #844]
    5eb0:	b	5b98 <BZ2_compressBlock@@Base+0xff8>
    5eb4:	add	x4, x24, x4, lsl #1
    5eb8:	mov	w5, #0xf                   	// #15
    5ebc:	add	x2, x4, w2, sxtw
    5ec0:	add	x2, x2, #0x9, lsl #12
    5ec4:	strb	w5, [x2, #844]
    5ec8:	b	5bc4 <BZ2_compressBlock@@Base+0x1024>
    5ecc:	add	x4, x24, x4, lsl #1
    5ed0:	mov	w5, #0xf                   	// #15
    5ed4:	add	x2, x4, w2, sxtw
    5ed8:	add	x2, x2, #0x9, lsl #12
    5edc:	strb	w5, [x2, #844]
    5ee0:	b	5bf0 <BZ2_compressBlock@@Base+0x1050>
    5ee4:	add	x4, x24, x4, lsl #1
    5ee8:	mov	w5, #0xf                   	// #15
    5eec:	add	x2, x4, w2, sxtw
    5ef0:	add	x2, x2, #0x9, lsl #12
    5ef4:	strb	w5, [x2, #844]
    5ef8:	b	5c1c <BZ2_compressBlock@@Base+0x107c>
    5efc:	add	x4, x24, x4, lsl #1
    5f00:	mov	w5, #0xf                   	// #15
    5f04:	add	x2, x4, w2, sxtw
    5f08:	add	x2, x2, #0x9, lsl #12
    5f0c:	strb	w5, [x2, #844]
    5f10:	b	5c48 <BZ2_compressBlock@@Base+0x10a8>
    5f14:	add	x4, x24, x4, lsl #1
    5f18:	mov	w5, #0xf                   	// #15
    5f1c:	add	x2, x4, w2, sxtw
    5f20:	add	x2, x2, #0x9, lsl #12
    5f24:	strb	w5, [x2, #844]
    5f28:	b	5c74 <BZ2_compressBlock@@Base+0x10d4>
    5f2c:	ldr	w25, [sp, #624]
    5f30:	mov	x18, #0xb590                	// #46480
    5f34:	mov	x19, #0x944e                	// #37966
    5f38:	add	x4, x24, x18
    5f3c:	sub	w2, w25, #0x1
    5f40:	add	x6, x24, x19
    5f44:	mov	w5, #0x408                 	// #1032
    5f48:	mov	w3, #0x102                 	// #258
    5f4c:	ldr	w1, [sp, #564]
    5f50:	mov	x20, #0xb188                	// #45448
    5f54:	umaddl	x0, w2, w3, x6
    5f58:	str	x2, [sp, #696]
    5f5c:	umaddl	x4, w2, w5, x4
    5f60:	add	x2, x2, #0x1
    5f64:	add	x1, x1, #0x1
    5f68:	str	x0, [sp, #576]
    5f6c:	lsl	x0, x2, #2
    5f70:	str	x0, [sp, #616]
    5f74:	lsl	x0, x2, #1
    5f78:	str	x0, [sp, #584]
    5f7c:	lsl	x0, x1, #2
    5f80:	str	x0, [sp, #640]
    5f84:	add	x0, x24, x20
    5f88:	str	w26, [sp, #648]
    5f8c:	mov	x26, x24
    5f90:	str	wzr, [sp, #552]
    5f94:	str	w22, [sp, #556]
    5f98:	str	x0, [sp, #568]
    5f9c:	add	x0, sp, #0x2c0
    5fa0:	str	x0, [sp, #592]
    5fa4:	str	x4, [sp, #632]
    5fa8:	str	x6, [sp, #656]
    5fac:	str	x1, [sp, #672]
    5fb0:	ldr	x0, [sp, #168]
    5fb4:	mov	w1, #0x0                   	// #0
    5fb8:	ldr	x2, [sp, #616]
    5fbc:	bl	1600 <memset@plt>
    5fc0:	ldr	w0, [sp, #556]
    5fc4:	ldr	x19, [sp, #568]
    5fc8:	cmp	w0, #0x0
    5fcc:	b.le	5ffc <BZ2_compressBlock@@Base+0x145c>
    5fd0:	ldr	x20, [sp, #632]
    5fd4:	ldr	x21, [sp, #640]
    5fd8:	mov	x0, x19
    5fdc:	mov	x2, x21
    5fe0:	add	x19, x19, #0x408
    5fe4:	mov	w1, #0x0                   	// #0
    5fe8:	bl	1600 <memset@plt>
    5fec:	cmp	x20, x19
    5ff0:	b.ne	5fd8 <BZ2_compressBlock@@Base+0x1438>  // b.any
    5ff4:	cmp	w25, #0x6
    5ff8:	b.eq	9d98 <BZ2_compressBlock@@Base+0x51f8>  // b.none
    5ffc:	ldr	w0, [x26, #668]
    6000:	str	w0, [sp, #164]
    6004:	cmp	w0, #0x0
    6008:	b.le	a578 <BZ2_compressBlock@@Base+0x59d8>
    600c:	mov	x1, #0x1                   	// #1
    6010:	sub	w0, w0, #0x1
    6014:	mov	w19, #0x0                   	// #0
    6018:	mov	w28, w19
    601c:	str	w25, [sp, #112]
    6020:	str	wzr, [sp, #136]
    6024:	str	x1, [sp, #144]
    6028:	add	x1, x26, #0x6a7
    602c:	str	x1, [sp, #176]
    6030:	str	w0, [sp, #560]
    6034:	b	7228 <BZ2_compressBlock@@Base+0x2688>
    6038:	add	w0, w28, #0x32
    603c:	str	w0, [sp, #152]
    6040:	ldr	x2, [sp, #584]
    6044:	mov	w1, #0x0                   	// #0
    6048:	ldr	x0, [sp, #592]
    604c:	bl	1600 <memset@plt>
    6050:	ldr	w0, [sp, #112]
    6054:	cmp	w0, #0x6
    6058:	b.ne	7268 <BZ2_compressBlock@@Base+0x26c8>  // b.any
    605c:	ldr	w0, [sp, #120]
    6060:	sub	w0, w0, w28
    6064:	cmp	w0, #0x31
    6068:	b.ne	7268 <BZ2_compressBlock@@Base+0x26c8>  // b.any
    606c:	ldr	x2, [sp, #128]
    6070:	sbfiz	x0, x28, #1, #32
    6074:	str	x0, [sp, #416]
    6078:	add	x0, x2, x0
    607c:	ldrh	w3, [x0, #4]
    6080:	ldrh	w2, [x0, #6]
    6084:	ldrh	w1, [x0, #8]
    6088:	add	x15, x3, #0xc9b
    608c:	ldrh	w30, [x0, #2]
    6090:	add	x18, x2, #0xc9b
    6094:	ldrh	w6, [x0, #26]
    6098:	add	x17, x1, #0xc9b
    609c:	ldrh	w5, [x0, #14]
    60a0:	add	x16, x30, #0xc9b
    60a4:	ldrh	w4, [x0, #28]
    60a8:	add	x18, x26, x18, lsl #4
    60ac:	stp	x6, x4, [sp, #200]
    60b0:	add	x6, x6, #0xc9b
    60b4:	add	x12, x5, #0xc9b
    60b8:	add	x17, x26, x17, lsl #4
    60bc:	add	x16, x26, x16, lsl #4
    60c0:	add	x15, x26, x15, lsl #4
    60c4:	ldrh	w27, [x0, #10]
    60c8:	ldrh	w25, [x0, #12]
    60cc:	add	x6, x26, x6, lsl #4
    60d0:	ldrh	w19, [x0, #24]
    60d4:	add	x12, x26, x12, lsl #4
    60d8:	ldrh	w23, [x0, #16]
    60dc:	add	x14, x27, #0xc9b
    60e0:	ldrh	w22, [x0, #18]
    60e4:	add	x13, x25, #0xc9b
    60e8:	ldrh	w21, [x0, #20]
    60ec:	add	x11, x23, #0xc9b
    60f0:	ldrh	w20, [x0, #22]
    60f4:	add	x10, x22, #0xc9b
    60f8:	stp	x3, x5, [sp, #184]
    60fc:	add	x9, x21, #0xc9b
    6100:	ldrh	w5, [x0, #32]
    6104:	ldrh	w3, [x0, #30]
    6108:	add	x8, x20, #0xc9b
    610c:	ldr	w16, [x16, #8]
    6110:	mov	x24, x5
    6114:	ldr	w17, [x17, #8]
    6118:	add	x7, x19, #0xc9b
    611c:	ldr	w18, [x18, #8]
    6120:	add	x30, x26, x30, lsl #4
    6124:	ldr	w15, [x15, #8]
    6128:	add	x5, x4, #0xc9b
    612c:	str	x3, [sp, #216]
    6130:	add	x14, x26, x14, lsl #4
    6134:	str	x30, [sp, #224]
    6138:	add	x13, x26, x13, lsl #4
    613c:	str	w18, [sp, #360]
    6140:	add	x11, x26, x11, lsl #4
    6144:	str	w17, [sp, #368]
    6148:	add	x9, x26, x9, lsl #4
    614c:	str	w16, [sp, #376]
    6150:	add	x8, x26, x8, lsl #4
    6154:	str	w15, [sp, #384]
    6158:	add	x5, x26, x5, lsl #4
    615c:	ldr	x15, [sp, #184]
    6160:	add	x10, x26, x10, lsl #4
    6164:	ldr	w17, [x6, #8]
    6168:	add	x7, x26, x7, lsl #4
    616c:	ldr	x6, [sp, #200]
    6170:	add	x27, x26, x27, lsl #4
    6174:	ldr	w12, [x12, #8]
    6178:	add	x25, x26, x25, lsl #4
    617c:	str	w12, [sp, #408]
    6180:	add	x23, x26, x23, lsl #4
    6184:	ldr	x12, [sp, #192]
    6188:	add	x6, x26, x6, lsl #4
    618c:	ldr	w13, [x13, #8]
    6190:	add	x22, x26, x22, lsl #4
    6194:	ldr	w14, [x14, #8]
    6198:	add	x21, x26, x21, lsl #4
    619c:	ldr	w16, [x8, #8]
    61a0:	add	x15, x26, x15, lsl #4
    61a4:	ldr	w7, [x7, #8]
    61a8:	add	x12, x26, x12, lsl #4
    61ac:	ldr	w10, [x10, #8]
    61b0:	add	x4, x3, #0xc9b
    61b4:	str	x6, [sp, #280]
    61b8:	add	x3, x24, #0xc9b
    61bc:	ldr	w6, [x5, #8]
    61c0:	add	x2, x26, x2, lsl #4
    61c4:	str	w14, [sp, #392]
    61c8:	add	x1, x26, x1, lsl #4
    61cc:	ldr	w14, [x9, #8]
    61d0:	add	x3, x26, x3, lsl #4
    61d4:	str	w13, [sp, #400]
    61d8:	add	x4, x26, x4, lsl #4
    61dc:	ldr	w13, [x11, #8]
    61e0:	add	x20, x26, x20, lsl #4
    61e4:	str	x15, [sp, #184]
    61e8:	add	x20, x20, #0xc, lsl #12
    61ec:	str	x12, [sp, #192]
    61f0:	stp	x27, x25, [sp, #232]
    61f4:	stp	x23, x22, [sp, #248]
    61f8:	str	x21, [sp, #264]
    61fc:	str	w13, [sp, #424]
    6200:	str	w10, [sp, #432]
    6204:	str	w14, [sp, #436]
    6208:	str	w16, [sp, #440]
    620c:	str	w7, [sp, #444]
    6210:	add	x7, x26, x19, lsl #4
    6214:	str	x7, [sp, #272]
    6218:	str	w17, [sp, #448]
    621c:	add	x17, x2, #0xc, lsl #12
    6220:	str	w6, [sp, #452]
    6224:	ldr	x5, [sp, #208]
    6228:	str	x17, [sp, #488]
    622c:	ldrh	w14, [x0, #38]
    6230:	ldrh	w16, [x0, #34]
    6234:	add	x18, x26, x5, lsl #4
    6238:	ldrh	w15, [x0, #36]
    623c:	ldr	x5, [sp, #216]
    6240:	add	x2, x14, #0xc9b
    6244:	ldrh	w13, [x0, #40]
    6248:	add	x30, x15, #0xc9b
    624c:	ldrh	w8, [x0, #50]
    6250:	add	x2, x26, x2, lsl #4
    6254:	add	x21, x26, x5, lsl #4
    6258:	stp	x18, x21, [sp, #288]
    625c:	add	x18, x1, #0xc, lsl #12
    6260:	add	x1, x16, #0xc9b
    6264:	add	x27, x13, #0xc9b
    6268:	add	x19, x8, #0xc9b
    626c:	ldr	w22, [x3, #8]
    6270:	add	x1, x26, x1, lsl #4
    6274:	add	x3, x26, x24, lsl #4
    6278:	mov	x24, x2
    627c:	add	x19, x26, x19, lsl #4
    6280:	add	x30, x26, x30, lsl #4
    6284:	add	x27, x26, x27, lsl #4
    6288:	ldrh	w7, [x0, #52]
    628c:	add	x8, x26, x8, lsl #4
    6290:	ldr	w4, [x4, #8]
    6294:	add	x8, x8, #0xc, lsl #12
    6298:	ldr	w24, [x24, #8]
    629c:	add	x14, x26, x14, lsl #4
    62a0:	ldr	w1, [x1, #8]
    62a4:	add	x14, x14, #0xc, lsl #12
    62a8:	ldrh	w12, [x0, #42]
    62ac:	add	x16, x26, x16, lsl #4
    62b0:	ldrh	w11, [x0, #44]
    62b4:	add	x13, x26, x13, lsl #4
    62b8:	ldrh	w10, [x0, #46]
    62bc:	add	x25, x12, #0xc9b
    62c0:	ldrh	w9, [x0, #48]
    62c4:	add	x23, x11, #0xc9b
    62c8:	ldrh	w6, [x0, #54]
    62cc:	add	x25, x26, x25, lsl #4
    62d0:	ldrh	w2, [x0, #62]
    62d4:	add	x21, x9, #0xc9b
    62d8:	ldrh	w5, [x0, #56]
    62dc:	add	x17, x6, #0xc9b
    62e0:	ldr	w30, [x30, #8]
    62e4:	add	x23, x26, x23, lsl #4
    62e8:	str	x3, [sp, #304]
    62ec:	add	x17, x26, x17, lsl #4
    62f0:	ldrh	w3, [x0, #60]
    62f4:	add	x21, x26, x21, lsl #4
    62f8:	str	w4, [sp, #456]
    62fc:	add	x6, x26, x6, lsl #4
    6300:	ldrh	w4, [x0, #58]
    6304:	add	x9, x26, x9, lsl #4
    6308:	str	w22, [sp, #460]
    630c:	add	x22, x10, #0xc9b
    6310:	str	w1, [sp, #464]
    6314:	add	x9, x9, #0xc, lsl #12
    6318:	ldrh	w1, [x0, #64]
    631c:	add	x22, x26, x22, lsl #4
    6320:	str	w24, [sp, #468]
    6324:	add	x16, x16, #0xc, lsl #12
    6328:	str	x18, [sp, #496]
    632c:	add	x18, x7, #0xc9b
    6330:	ldr	w27, [x27, #8]
    6334:	add	x7, x26, x7, lsl #4
    6338:	ldr	w24, [x19, #8]
    633c:	add	x18, x26, x18, lsl #4
    6340:	ldr	x19, [sp, #224]
    6344:	str	x20, [sp, #208]
    6348:	ldr	w18, [x18, #8]
    634c:	add	x7, x7, #0xc, lsl #12
    6350:	add	x19, x19, #0xc, lsl #12
    6354:	str	x19, [sp, #504]
    6358:	ldr	x19, [sp, #184]
    635c:	str	w18, [sp, #476]
    6360:	ldr	x20, [sp, #272]
    6364:	add	x18, x19, #0xc, lsl #12
    6368:	ldr	x19, [sp, #232]
    636c:	str	x18, [sp, #512]
    6370:	ldr	w17, [x17, #8]
    6374:	add	x20, x20, #0xc, lsl #12
    6378:	add	x19, x19, #0xc, lsl #12
    637c:	str	x19, [sp, #520]
    6380:	ldr	x19, [sp, #240]
    6384:	str	w17, [sp, #480]
    6388:	add	x17, x5, #0xc9b
    638c:	str	x20, [sp, #216]
    6390:	add	x18, x19, #0xc, lsl #12
    6394:	str	w24, [sp, #472]
    6398:	ldr	x19, [sp, #192]
    639c:	add	x17, x26, x17, lsl #4
    63a0:	ldr	x20, [sp, #280]
    63a4:	add	x19, x19, #0xc, lsl #12
    63a8:	str	x19, [sp, #184]
    63ac:	add	x5, x26, x5, lsl #4
    63b0:	ldr	x19, [sp, #248]
    63b4:	add	x20, x20, #0xc, lsl #12
    63b8:	str	x18, [sp, #528]
    63bc:	add	x5, x5, #0xc, lsl #12
    63c0:	add	x19, x19, #0xc, lsl #12
    63c4:	str	x19, [sp, #192]
    63c8:	ldr	x19, [sp, #256]
    63cc:	add	x15, x26, x15, lsl #4
    63d0:	ldr	w21, [x21, #8]
    63d4:	add	x12, x26, x12, lsl #4
    63d8:	add	x19, x19, #0xc, lsl #12
    63dc:	str	x19, [sp, #200]
    63e0:	ldr	x19, [sp, #264]
    63e4:	add	x11, x26, x11, lsl #4
    63e8:	ldr	w25, [x25, #8]
    63ec:	add	x10, x26, x10, lsl #4
    63f0:	add	x19, x19, #0xc, lsl #12
    63f4:	str	x19, [sp, #536]
    63f8:	ldr	w18, [x17, #8]
    63fc:	add	x17, x4, #0xc9b
    6400:	ldr	w22, [x22, #8]
    6404:	add	x4, x26, x4, lsl #4
    6408:	ldr	w23, [x23, #8]
    640c:	add	x17, x26, x17, lsl #4
    6410:	str	x20, [sp, #224]
    6414:	add	x15, x15, #0xc, lsl #12
    6418:	ldr	x20, [sp, #288]
    641c:	str	x7, [sp, #328]
    6420:	add	x7, x6, #0xc, lsl #12
    6424:	str	x7, [sp, #336]
    6428:	add	x20, x20, #0xc, lsl #12
    642c:	str	x20, [sp, #232]
    6430:	ldr	x20, [sp, #296]
    6434:	add	x7, x1, #0xc9b
    6438:	stp	x9, x8, [sp, #312]
    643c:	add	x12, x12, #0xc, lsl #12
    6440:	ldr	w8, [sp, #360]
    6444:	ldr	w9, [sp, #368]
    6448:	add	x20, x20, #0xc, lsl #12
    644c:	ldr	w19, [x17, #8]
    6450:	add	x17, x3, #0xc9b
    6454:	str	x14, [sp, #272]
    6458:	add	x14, x2, #0xc9b
    645c:	str	x5, [sp, #344]
    6460:	add	x5, x4, #0xc, lsl #12
    6464:	add	x4, x26, x7, lsl #4
    6468:	add	w7, w8, w9
    646c:	ldr	w8, [sp, #376]
    6470:	add	x14, x26, x14, lsl #4
    6474:	ldr	w9, [sp, #384]
    6478:	add	x17, x26, x17, lsl #4
    647c:	str	x20, [sp, #240]
    6480:	add	x2, x26, x2, lsl #4
    6484:	ldr	x20, [sp, #304]
    6488:	add	x2, x2, #0xc, lsl #12
    648c:	add	x3, x26, x3, lsl #4
    6490:	stp	x5, x2, [sp, #352]
    6494:	add	x5, x26, x1, lsl #4
    6498:	add	w1, w8, w9
    649c:	ldr	w8, [x4, #8]
    64a0:	add	x11, x11, #0xc, lsl #12
    64a4:	add	x10, x10, #0xc, lsl #12
    64a8:	add	x3, x3, #0xc, lsl #12
    64ac:	add	x20, x20, #0xc, lsl #12
    64b0:	str	x20, [sp, #248]
    64b4:	add	w1, w7, w1
    64b8:	stp	x16, x15, [sp, #256]
    64bc:	add	x16, x13, #0xc, lsl #12
    64c0:	ldrh	w2, [x0, #68]
    64c4:	stp	x16, x12, [sp, #280]
    64c8:	add	w23, w25, w23
    64cc:	ldr	w13, [x17, #8]
    64d0:	str	x11, [sp, #296]
    64d4:	add	w22, w22, w21
    64d8:	str	x10, [sp, #304]
    64dc:	add	w19, w19, w13
    64e0:	str	w8, [sp, #484]
    64e4:	str	x3, [sp, #544]
    64e8:	add	x3, x5, #0xc, lsl #12
    64ec:	ldrh	w4, [x0, #66]
    64f0:	ldr	w6, [x14, #8]
    64f4:	str	x3, [sp, #368]
    64f8:	add	x3, x4, #0xc9b
    64fc:	ldr	w10, [sp, #392]
    6500:	add	x4, x26, x4, lsl #4
    6504:	ldr	w11, [sp, #400]
    6508:	add	x3, x26, x3, lsl #4
    650c:	ldrh	w9, [x0, #70]
    6510:	add	w5, w10, w11
    6514:	ldr	w11, [sp, #408]
    6518:	add	w1, w1, w5
    651c:	ldr	w5, [sp, #424]
    6520:	add	x10, x4, #0xc, lsl #12
    6524:	str	x10, [sp, #376]
    6528:	add	w4, w11, w5
    652c:	ldr	w11, [sp, #432]
    6530:	ldr	w5, [sp, #436]
    6534:	add	w1, w1, w4
    6538:	ldr	w10, [sp, #444]
    653c:	add	w5, w11, w5
    6540:	ldr	w11, [sp, #440]
    6544:	ldr	w12, [x3, #8]
    6548:	add	x3, x2, #0xc9b
    654c:	add	x2, x26, x2, lsl #4
    6550:	add	w4, w11, w10
    6554:	ldr	w10, [sp, #452]
    6558:	add	x11, x2, #0xc, lsl #12
    655c:	ldr	w2, [sp, #448]
    6560:	add	w1, w1, w5
    6564:	str	x11, [sp, #384]
    6568:	add	w1, w1, w4
    656c:	add	w2, w2, w10
    6570:	ldr	w11, [sp, #460]
    6574:	ldr	w10, [sp, #456]
    6578:	add	x3, x26, x3, lsl #4
    657c:	ldrh	w8, [x0, #72]
    6580:	add	w1, w1, w2
    6584:	add	w11, w10, w11
    6588:	add	x10, x9, #0xc9b
    658c:	add	x9, x26, x9, lsl #4
    6590:	ldrh	w7, [x0, #74]
    6594:	add	x9, x9, #0xc, lsl #12
    6598:	ldr	w24, [sp, #464]
    659c:	str	x9, [sp, #392]
    65a0:	add	x9, x8, #0xc9b
    65a4:	add	x8, x26, x8, lsl #4
    65a8:	add	w30, w24, w30
    65ac:	add	x16, x26, x9, lsl #4
    65b0:	ldr	w24, [sp, #468]
    65b4:	add	x10, x26, x10, lsl #4
    65b8:	add	x8, x8, #0xc, lsl #12
    65bc:	add	w1, w1, w11
    65c0:	str	x8, [sp, #400]
    65c4:	add	x8, x7, #0xc9b
    65c8:	add	x7, x26, x7, lsl #4
    65cc:	add	w27, w24, w27
    65d0:	add	x25, x7, #0xc, lsl #12
    65d4:	add	w30, w1, w30
    65d8:	ldrh	w5, [x0, #76]
    65dc:	ldrh	w2, [x0, #80]
    65e0:	add	w30, w30, w27
    65e4:	ldrh	w9, [x0, #84]
    65e8:	add	x20, x26, x8, lsl #4
    65ec:	ldr	w17, [x16, #8]
    65f0:	add	w30, w30, w23
    65f4:	ldrh	w16, [x0, #86]
    65f8:	add	w30, w30, w22
    65fc:	ldrh	w8, [x0, #88]
    6600:	add	x7, x5, #0xc9b
    6604:	ldr	w4, [x3, #8]
    6608:	add	x5, x26, x5, lsl #4
    660c:	ldrh	w3, [x0, #78]
    6610:	add	x1, x26, x7, lsl #4
    6614:	ldr	w15, [x10, #8]
    6618:	add	w4, w12, w4
    661c:	ldrh	w10, [x0, #82]
    6620:	add	x27, x5, #0xc, lsl #12
    6624:	str	x25, [sp, #408]
    6628:	add	x5, x3, #0xc9b
    662c:	ldr	w24, [sp, #472]
    6630:	add	w15, w15, w17
    6634:	ldr	w25, [sp, #476]
    6638:	add	x21, x26, x5, lsl #4
    663c:	ldrh	w11, [x0, #90]
    6640:	add	x3, x26, x3, lsl #4
    6644:	add	w22, w24, w25
    6648:	ldr	w24, [sp, #480]
    664c:	add	w30, w30, w22
    6650:	add	x25, x10, #0xc9b
    6654:	add	w18, w24, w18
    6658:	ldr	w24, [sp, #484]
    665c:	add	w30, w30, w18
    6660:	add	x25, x26, x25, lsl #4
    6664:	add	w6, w6, w24
    6668:	add	w30, w30, w19
    666c:	add	w30, w30, w6
    6670:	ldrh	w14, [x0, #94]
    6674:	add	w30, w30, w4
    6678:	add	x4, x16, #0xc9b
    667c:	ldr	w22, [x25, #8]
    6680:	add	x25, x9, #0xc9b
    6684:	add	x4, x26, x4, lsl #4
    6688:	ldr	w1, [x1, #8]
    668c:	add	x25, x26, x25, lsl #4
    6690:	ldr	w20, [x20, #8]
    6694:	ldrh	w5, [x0, #96]
    6698:	add	w30, w30, w15
    669c:	ldr	w18, [x4, #8]
    66a0:	add	x4, x11, #0xc9b
    66a4:	ldr	w13, [x25, #8]
    66a8:	add	w20, w20, w1
    66ac:	add	x4, x26, x4, lsl #4
    66b0:	add	x1, x14, #0xc9b
    66b4:	add	x25, x8, #0xc9b
    66b8:	ldr	w23, [x21, #8]
    66bc:	add	x21, x2, #0xc9b
    66c0:	ldrh	w7, [x0, #92]
    66c4:	ldr	w6, [x4, #8]
    66c8:	add	x25, x26, x25, lsl #4
    66cc:	add	x4, x26, x14, lsl #4
    66d0:	add	x14, x26, x1, lsl #4
    66d4:	add	x1, x5, #0xc9b
    66d8:	add	x21, x26, x21, lsl #4
    66dc:	ldr	w12, [x25, #8]
    66e0:	add	x25, x4, #0xc, lsl #12
    66e4:	add	x1, x26, x1, lsl #4
    66e8:	str	x27, [sp, #424]
    66ec:	add	x27, x7, #0xc9b
    66f0:	ldr	w21, [x21, #8]
    66f4:	add	w18, w18, w12
    66f8:	add	w30, w30, w20
    66fc:	ldr	w12, [x1, #8]
    6700:	add	x27, x26, x27, lsl #4
    6704:	ldr	x4, [sp, #128]
    6708:	add	w23, w23, w21
    670c:	ldr	x1, [sp, #416]
    6710:	add	w22, w22, w13
    6714:	add	w30, w30, w23
    6718:	ldr	w19, [x27, #8]
    671c:	ldrh	w0, [x0, #98]
    6720:	add	w30, w30, w22
    6724:	ldrh	w27, [x4, x1]
    6728:	add	w30, w30, w18
    672c:	ldp	x17, x18, [sp, #488]
    6730:	add	x1, x27, #0xc9b
    6734:	add	x4, x0, #0xc9b
    6738:	ldr	w14, [x14, #8]
    673c:	add	x1, x26, x1, lsl #4
    6740:	add	w6, w6, w19
    6744:	add	x4, x26, x4, lsl #4
    6748:	add	w14, w14, w12
    674c:	add	w30, w30, w6
    6750:	add	x2, x26, x2, lsl #4
    6754:	ldr	w6, [x17, #2492]
    6758:	add	w30, w30, w14
    675c:	ldr	w12, [x18, #2492]
    6760:	add	x3, x3, #0xc, lsl #12
    6764:	ldr	w4, [x4, #8]
    6768:	add	x2, x2, #0xc, lsl #12
    676c:	ldr	w1, [x1, #8]
    6770:	add	x10, x26, x10, lsl #4
    6774:	ldr	x19, [sp, #504]
    6778:	add	w1, w1, w4
    677c:	add	w4, w6, w12
    6780:	add	x12, sp, #0x200
    6784:	add	w30, w30, w1
    6788:	add	x9, x26, x9, lsl #4
    678c:	ldr	w13, [x19, #2492]
    6790:	add	x9, x9, #0xc, lsl #12
    6794:	ldp	x20, x21, [x12]
    6798:	add	x10, x10, #0xc, lsl #12
    679c:	ldp	x23, x24, [x12, #16]
    67a0:	add	x8, x26, x8, lsl #4
    67a4:	ldp	x15, x22, [sp, #224]
    67a8:	add	x16, x26, x16, lsl #4
    67ac:	ldr	w1, [x20, #2492]
    67b0:	add	x8, x8, #0xc, lsl #12
    67b4:	ldr	w6, [x21, #2492]
    67b8:	add	x16, x16, #0xc, lsl #12
    67bc:	add	w1, w13, w1
    67c0:	ldr	w12, [x23, #2492]
    67c4:	add	w1, w4, w1
    67c8:	add	x7, x26, x7, lsl #4
    67cc:	ldp	x13, x4, [sp, #184]
    67d0:	add	x11, x26, x11, lsl #4
    67d4:	add	x7, x7, #0xc, lsl #12
    67d8:	add	x11, x11, #0xc, lsl #12
    67dc:	add	x5, x26, x5, lsl #4
    67e0:	add	x27, x26, x27, lsl #4
    67e4:	add	x5, x5, #0xc, lsl #12
    67e8:	add	x0, x26, x0, lsl #4
    67ec:	add	x0, x0, #0xc, lsl #12
    67f0:	add	x27, x27, #0xc, lsl #12
    67f4:	ldr	w14, [x4, #2492]
    67f8:	add	w4, w6, w12
    67fc:	ldr	w13, [x13, #2492]
    6800:	add	w1, w1, w4
    6804:	ldr	w12, [x24, #2492]
    6808:	add	w4, w13, w14
    680c:	ldp	x6, x14, [sp, #200]
    6810:	add	w4, w1, w4
    6814:	ldr	x1, [sp, #216]
    6818:	ldr	w6, [x6, #2492]
    681c:	ldr	w13, [x14, #2492]
    6820:	ldr	w14, [x1, #2492]
    6824:	add	w1, w6, w12
    6828:	add	w4, w4, w1
    682c:	ldr	w6, [x15, #2492]
    6830:	add	w1, w13, w14
    6834:	ldr	w12, [x22, #2492]
    6838:	add	w1, w4, w1
    683c:	ldp	x13, x4, [sp, #240]
    6840:	ldr	x15, [sp, #264]
    6844:	ldr	w14, [x4, #2492]
    6848:	add	w4, w6, w12
    684c:	ldr	w13, [x13, #2492]
    6850:	add	w1, w1, w4
    6854:	ldr	x12, [sp, #256]
    6858:	add	w4, w13, w14
    685c:	ldr	x14, [sp, #272]
    6860:	add	w4, w1, w4
    6864:	ldr	w6, [x12, #2492]
    6868:	ldr	w12, [x15, #2492]
    686c:	ldr	w13, [x14, #2492]
    6870:	ldp	x1, x22, [sp, #280]
    6874:	ldr	x15, [sp, #304]
    6878:	ldr	w14, [x1, #2492]
    687c:	add	w1, w6, w12
    6880:	add	w4, w4, w1
    6884:	ldr	w6, [x22, #2492]
    6888:	ldr	x1, [sp, #296]
    688c:	ldr	x22, [sp, #320]
    6890:	ldr	w12, [x1, #2492]
    6894:	add	w1, w13, w14
    6898:	add	w1, w4, w1
    689c:	ldr	w13, [x15, #2492]
    68a0:	ldr	x4, [sp, #312]
    68a4:	ldr	w14, [x4, #2492]
    68a8:	add	w4, w6, w12
    68ac:	add	w1, w1, w4
    68b0:	ldr	w6, [x22, #2492]
    68b4:	ldr	x4, [sp, #328]
    68b8:	ldr	w12, [x4, #2492]
    68bc:	add	w4, w13, w14
    68c0:	add	w4, w1, w4
    68c4:	ldp	x13, x1, [sp, #336]
    68c8:	ldr	w15, [x1, #2492]
    68cc:	add	w1, w6, w12
    68d0:	ldr	x12, [sp, #352]
    68d4:	add	w4, w4, w1
    68d8:	ldr	w14, [x13, #2492]
    68dc:	ldr	w6, [x18, #2496]
    68e0:	ldr	w13, [x19, #2496]
    68e4:	add	w1, w14, w15
    68e8:	ldr	w22, [x12, #2492]
    68ec:	add	w4, w4, w1
    68f0:	ldr	w14, [x17, #2496]
    68f4:	and	w1, w30, #0xffff
    68f8:	ldr	w12, [x20, #2496]
    68fc:	add	w6, w14, w6
    6900:	ldr	w17, [x23, #2496]
    6904:	add	w12, w13, w12
    6908:	ldr	w15, [x21, #2496]
    690c:	ldr	x13, [sp, #184]
    6910:	add	w12, w12, w6
    6914:	ldr	x19, [sp, #192]
    6918:	add	w15, w15, w17
    691c:	ldr	x6, [sp, #200]
    6920:	add	w12, w12, w15
    6924:	ldr	w19, [x19, #2496]
    6928:	ldr	w18, [x13, #2496]
    692c:	ldr	w20, [x6, #2496]
    6930:	ldr	w21, [x24, #2496]
    6934:	add	w18, w18, w19
    6938:	add	w12, w12, w18
    693c:	add	w20, w20, w21
    6940:	ldp	x17, x18, [sp, #360]
    6944:	add	w12, w12, w20
    6948:	ldp	x19, x21, [sp, #376]
    694c:	ldr	x23, [sp, #544]
    6950:	ldr	w14, [x18, #2492]
    6954:	ldr	w13, [x17, #2492]
    6958:	ldr	w15, [x19, #2492]
    695c:	ldp	x18, x19, [sp, #392]
    6960:	ldr	w17, [x21, #2492]
    6964:	ldr	w6, [x23, #2492]
    6968:	ldr	x21, [sp, #408]
    696c:	add	w6, w22, w6
    6970:	ldr	x24, [sp, #424]
    6974:	add	w4, w4, w6
    6978:	ldr	w18, [x18, #2492]
    697c:	add	w6, w13, w14
    6980:	ldr	w13, [x19, #2492]
    6984:	add	w6, w4, w6
    6988:	ldr	w14, [x21, #2492]
    698c:	add	w4, w15, w17
    6990:	ldr	w15, [x24, #2492]
    6994:	add	w6, w6, w4
    6998:	ldr	w17, [x3, #2492]
    699c:	add	w4, w18, w13
    69a0:	ldr	w13, [x2, #2492]
    69a4:	add	w4, w6, w4
    69a8:	ldr	w18, [x10, #2492]
    69ac:	add	w6, w14, w15
    69b0:	ldr	w14, [x9, #2492]
    69b4:	add	w4, w4, w6
    69b8:	ldr	w15, [x16, #2492]
    69bc:	add	w6, w17, w13
    69c0:	ldr	w13, [x8, #2492]
    69c4:	add	w6, w4, w6
    69c8:	ldr	w17, [x11, #2492]
    69cc:	add	w4, w18, w14
    69d0:	ldr	w14, [x7, #2492]
    69d4:	add	w6, w6, w4
    69d8:	ldr	w18, [x25, #2492]
    69dc:	add	w4, w15, w13
    69e0:	ldr	w15, [x5, #2492]
    69e4:	add	w4, w6, w4
    69e8:	add	w6, w17, w14
    69ec:	ldr	w19, [x0, #2492]
    69f0:	ldr	w17, [x27, #2492]
    69f4:	add	w4, w4, w6
    69f8:	add	w6, w18, w15
    69fc:	ldp	x14, x20, [sp, #208]
    6a00:	add	w4, w4, w6
    6a04:	ldp	x15, x22, [sp, #224]
    6a08:	add	w17, w17, w19
    6a0c:	add	w4, w4, w17
    6a10:	ldr	w13, [x14, #2496]
    6a14:	ldr	w20, [x20, #2496]
    6a18:	ldr	w6, [x22, #2496]
    6a1c:	ldr	w14, [x15, #2496]
    6a20:	add	w20, w13, w20
    6a24:	add	w20, w12, w20
    6a28:	add	w14, w14, w6
    6a2c:	ldr	x6, [sp, #256]
    6a30:	add	w20, w20, w14
    6a34:	ldp	x13, x12, [sp, #240]
    6a38:	ldr	w15, [x6, #2496]
    6a3c:	ldr	x6, [sp, #264]
    6a40:	ldr	x22, [sp, #288]
    6a44:	ldr	w18, [x6, #2496]
    6a48:	ldr	x6, [sp, #280]
    6a4c:	add	w15, w15, w18
    6a50:	ldr	w22, [x22, #2496]
    6a54:	ldr	w12, [x12, #2496]
    6a58:	ldr	w21, [x6, #2496]
    6a5c:	ldr	x6, [sp, #296]
    6a60:	ldr	w13, [x13, #2496]
    6a64:	ldr	x14, [sp, #272]
    6a68:	add	w13, w13, w12
    6a6c:	ldr	w6, [x6, #2496]
    6a70:	add	w20, w20, w13
    6a74:	add	w20, w20, w15
    6a78:	add	w22, w22, w6
    6a7c:	ldr	w19, [x14, #2496]
    6a80:	ldr	x6, [sp, #320]
    6a84:	add	w19, w19, w21
    6a88:	ldr	x15, [sp, #304]
    6a8c:	add	w20, w20, w19
    6a90:	ldr	w13, [x6, #2496]
    6a94:	add	w20, w20, w22
    6a98:	ldr	x12, [sp, #312]
    6a9c:	ldr	x6, [sp, #328]
    6aa0:	ldr	w12, [x12, #2496]
    6aa4:	ldr	w14, [x15, #2496]
    6aa8:	ldr	w15, [x6, #2496]
    6aac:	ldr	x6, [sp, #336]
    6ab0:	add	w14, w14, w12
    6ab4:	ldr	x12, [sp, #352]
    6ab8:	add	w13, w13, w15
    6abc:	ldr	w18, [x6, #2496]
    6ac0:	add	w20, w20, w14
    6ac4:	ldr	x6, [sp, #344]
    6ac8:	add	w20, w20, w13
    6acc:	ldr	w21, [x12, #2496]
    6ad0:	ldr	w23, [x23, #2496]
    6ad4:	ldr	w19, [x6, #2496]
    6ad8:	add	w21, w21, w23
    6adc:	ldr	w2, [x2, #2496]
    6ae0:	add	w18, w18, w19
    6ae4:	ldr	w3, [x3, #2496]
    6ae8:	add	w20, w20, w18
    6aec:	ldr	w10, [x10, #2496]
    6af0:	add	w20, w20, w21
    6af4:	add	w3, w3, w2
    6af8:	ldp	x6, x18, [sp, #360]
    6afc:	ldp	x19, x21, [sp, #376]
    6b00:	ldr	w8, [x8, #2496]
    6b04:	ldr	w2, [x7, #2496]
    6b08:	ldr	w22, [x6, #2496]
    6b0c:	ldr	w6, [x18, #2496]
    6b10:	ldr	w12, [x19, #2496]
    6b14:	ldp	x18, x19, [sp, #392]
    6b18:	add	w6, w22, w6
    6b1c:	ldr	w13, [x21, #2496]
    6b20:	add	w20, w20, w6
    6b24:	ldr	x21, [sp, #408]
    6b28:	add	w12, w12, w13
    6b2c:	add	w20, w20, w12
    6b30:	ldr	w6, [x9, #2496]
    6b34:	ldr	w14, [x18, #2496]
    6b38:	ldr	w15, [x19, #2496]
    6b3c:	add	w10, w10, w6
    6b40:	ldr	w19, [x24, #2496]
    6b44:	ldr	w18, [x21, #2496]
    6b48:	add	w14, w14, w15
    6b4c:	add	w20, w20, w14
    6b50:	ldr	w9, [x16, #2496]
    6b54:	add	w18, w18, w19
    6b58:	ldr	w6, [x11, #2496]
    6b5c:	add	w20, w20, w18
    6b60:	ldr	w7, [x5, #2496]
    6b64:	add	w20, w20, w3
    6b68:	add	w9, w9, w8
    6b6c:	ldr	w3, [x25, #2496]
    6b70:	add	w20, w20, w10
    6b74:	ldr	w5, [x0, #2496]
    6b78:	add	w6, w6, w2
    6b7c:	add	w20, w20, w9
    6b80:	ldr	w2, [x27, #2496]
    6b84:	add	w3, w3, w7
    6b88:	add	w0, w20, w6
    6b8c:	add	w0, w0, w3
    6b90:	add	w2, w2, w5
    6b94:	add	w0, w0, w2
    6b98:	str	w30, [sp, #704]
    6b9c:	str	w4, [sp, #708]
    6ba0:	str	w0, [sp, #712]
    6ba4:	ldrh	w2, [sp, #706]
    6ba8:	mov	w0, #0x0                   	// #0
    6bac:	cmp	w1, w2
    6bb0:	b.le	6bbc <BZ2_compressBlock@@Base+0x201c>
    6bb4:	mov	w1, w2
    6bb8:	mov	w0, #0x1                   	// #1
    6bbc:	ldr	w2, [sp, #112]
    6bc0:	cmp	w2, #0x2
    6bc4:	b.eq	7498 <BZ2_compressBlock@@Base+0x28f8>  // b.none
    6bc8:	ldrh	w2, [sp, #708]
    6bcc:	cmp	w2, w1
    6bd0:	b.ge	6bdc <BZ2_compressBlock@@Base+0x203c>  // b.tcont
    6bd4:	mov	w1, w2
    6bd8:	mov	w0, #0x2                   	// #2
    6bdc:	ldr	w2, [sp, #112]
    6be0:	cmp	w2, #0x3
    6be4:	b.eq	7de8 <BZ2_compressBlock@@Base+0x3248>  // b.none
    6be8:	ldrh	w2, [sp, #710]
    6bec:	cmp	w2, w1
    6bf0:	b.ge	6bfc <BZ2_compressBlock@@Base+0x205c>  // b.tcont
    6bf4:	mov	w1, w2
    6bf8:	mov	w0, #0x3                   	// #3
    6bfc:	ldr	w2, [sp, #112]
    6c00:	cmp	w2, #0x4
    6c04:	b.eq	7de8 <BZ2_compressBlock@@Base+0x3248>  // b.none
    6c08:	ldrh	w2, [sp, #712]
    6c0c:	cmp	w2, w1
    6c10:	b.ge	6c1c <BZ2_compressBlock@@Base+0x207c>  // b.tcont
    6c14:	mov	w1, w2
    6c18:	mov	w0, #0x4                   	// #4
    6c1c:	ldr	w2, [sp, #112]
    6c20:	cmp	w2, #0x6
    6c24:	b.ne	7de8 <BZ2_compressBlock@@Base+0x3248>  // b.any
    6c28:	ldrh	w2, [sp, #714]
    6c2c:	cmp	w2, w1
    6c30:	b.ge	6c3c <BZ2_compressBlock@@Base+0x209c>  // b.tcont
    6c34:	mov	w1, w2
    6c38:	mov	w0, #0x5                   	// #5
    6c3c:	ldr	w3, [sp, #136]
    6c40:	sxtw	x2, w0
    6c44:	add	w1, w3, w1
    6c48:	str	w1, [sp, #136]
    6c4c:	ldr	x1, [sp, #144]
    6c50:	ldr	x3, [sp, #176]
    6c54:	mov	w6, w1
    6c58:	strb	w0, [x3, x1]
    6c5c:	ldr	x3, [sp, #168]
    6c60:	ldr	w1, [x3, x2, lsl #2]
    6c64:	add	w1, w1, #0x1
    6c68:	str	w1, [x3, x2, lsl #2]
    6c6c:	ldr	w1, [sp, #120]
    6c70:	sub	w1, w1, w28
    6c74:	cmp	w1, #0x31
    6c78:	b.ne	74c8 <BZ2_compressBlock@@Base+0x2928>  // b.any
    6c7c:	ldr	x4, [sp, #128]
    6c80:	sbfiz	x2, x28, #1, #32
    6c84:	mov	w3, #0x102                 	// #258
    6c88:	add	x1, x4, x2
    6c8c:	smull	x0, w0, w3
    6c90:	ldrh	w3, [x4, x2]
    6c94:	add	x3, x3, x0
    6c98:	ldrh	w2, [x1, #2]
    6c9c:	ldrh	w4, [x1, #4]
    6ca0:	add	x3, x26, x3, lsl #2
    6ca4:	add	x2, x2, x0
    6ca8:	add	x3, x3, #0x8, lsl #12
    6cac:	add	x4, x4, x0
    6cb0:	add	x2, x26, x2, lsl #2
    6cb4:	add	x2, x2, #0x8, lsl #12
    6cb8:	add	x4, x26, x4, lsl #2
    6cbc:	ldr	w5, [x3, #12680]
    6cc0:	add	x4, x4, #0x8, lsl #12
    6cc4:	add	w5, w5, #0x1
    6cc8:	str	w5, [x3, #12680]
    6ccc:	ldrh	w3, [x1, #6]
    6cd0:	ldr	w5, [x2, #12680]
    6cd4:	add	x3, x3, x0
    6cd8:	add	w5, w5, #0x1
    6cdc:	str	w5, [x2, #12680]
    6ce0:	add	x3, x26, x3, lsl #2
    6ce4:	ldrh	w2, [x1, #8]
    6ce8:	ldr	w5, [x4, #12680]
    6cec:	add	x3, x3, #0x8, lsl #12
    6cf0:	add	x2, x2, x0
    6cf4:	add	w5, w5, #0x1
    6cf8:	str	w5, [x4, #12680]
    6cfc:	add	x2, x26, x2, lsl #2
    6d00:	ldrh	w4, [x1, #10]
    6d04:	ldr	w5, [x3, #12680]
    6d08:	add	x2, x2, #0x8, lsl #12
    6d0c:	add	x4, x4, x0
    6d10:	add	w5, w5, #0x1
    6d14:	str	w5, [x3, #12680]
    6d18:	add	x4, x26, x4, lsl #2
    6d1c:	ldrh	w3, [x1, #12]
    6d20:	ldr	w5, [x2, #12680]
    6d24:	add	x4, x4, #0x8, lsl #12
    6d28:	add	x3, x3, x0
    6d2c:	add	w5, w5, #0x1
    6d30:	str	w5, [x2, #12680]
    6d34:	add	x3, x26, x3, lsl #2
    6d38:	ldrh	w2, [x1, #14]
    6d3c:	ldr	w5, [x4, #12680]
    6d40:	add	x3, x3, #0x8, lsl #12
    6d44:	add	x2, x2, x0
    6d48:	add	w5, w5, #0x1
    6d4c:	str	w5, [x4, #12680]
    6d50:	add	x2, x26, x2, lsl #2
    6d54:	ldrh	w4, [x1, #16]
    6d58:	ldr	w5, [x3, #12680]
    6d5c:	add	x2, x2, #0x8, lsl #12
    6d60:	add	x4, x4, x0
    6d64:	add	w5, w5, #0x1
    6d68:	str	w5, [x3, #12680]
    6d6c:	add	x4, x26, x4, lsl #2
    6d70:	ldrh	w3, [x1, #18]
    6d74:	ldr	w5, [x2, #12680]
    6d78:	add	x4, x4, #0x8, lsl #12
    6d7c:	add	x3, x3, x0
    6d80:	add	w5, w5, #0x1
    6d84:	str	w5, [x2, #12680]
    6d88:	add	x3, x26, x3, lsl #2
    6d8c:	ldrh	w2, [x1, #20]
    6d90:	ldr	w5, [x4, #12680]
    6d94:	add	x3, x3, #0x8, lsl #12
    6d98:	add	x2, x2, x0
    6d9c:	add	w5, w5, #0x1
    6da0:	str	w5, [x4, #12680]
    6da4:	add	x2, x26, x2, lsl #2
    6da8:	ldr	w4, [x3, #12680]
    6dac:	add	x2, x2, #0x8, lsl #12
    6db0:	add	w4, w4, #0x1
    6db4:	str	w4, [x3, #12680]
    6db8:	ldr	w3, [x2, #12680]
    6dbc:	ldrh	w4, [x1, #26]
    6dc0:	add	w3, w3, #0x1
    6dc4:	str	w3, [x2, #12680]
    6dc8:	ldrh	w3, [x1, #22]
    6dcc:	add	x4, x4, x0
    6dd0:	ldrh	w2, [x1, #24]
    6dd4:	add	x3, x3, x0
    6dd8:	add	x4, x26, x4, lsl #2
    6ddc:	add	x2, x2, x0
    6de0:	add	x4, x4, #0x8, lsl #12
    6de4:	add	x3, x26, x3, lsl #2
    6de8:	add	x3, x3, #0x8, lsl #12
    6dec:	add	x2, x26, x2, lsl #2
    6df0:	add	x2, x2, #0x8, lsl #12
    6df4:	ldr	w5, [x3, #12680]
    6df8:	add	w5, w5, #0x1
    6dfc:	str	w5, [x3, #12680]
    6e00:	ldrh	w3, [x1, #28]
    6e04:	ldr	w5, [x2, #12680]
    6e08:	add	x3, x3, x0
    6e0c:	add	w5, w5, #0x1
    6e10:	str	w5, [x2, #12680]
    6e14:	add	x3, x26, x3, lsl #2
    6e18:	ldrh	w2, [x1, #30]
    6e1c:	ldr	w5, [x4, #12680]
    6e20:	add	x3, x3, #0x8, lsl #12
    6e24:	add	x2, x2, x0
    6e28:	add	w5, w5, #0x1
    6e2c:	str	w5, [x4, #12680]
    6e30:	add	x2, x26, x2, lsl #2
    6e34:	ldrh	w4, [x1, #32]
    6e38:	ldr	w5, [x3, #12680]
    6e3c:	add	x2, x2, #0x8, lsl #12
    6e40:	add	x4, x4, x0
    6e44:	add	w5, w5, #0x1
    6e48:	str	w5, [x3, #12680]
    6e4c:	add	x4, x26, x4, lsl #2
    6e50:	ldrh	w3, [x1, #34]
    6e54:	ldr	w5, [x2, #12680]
    6e58:	add	x4, x4, #0x8, lsl #12
    6e5c:	add	x3, x3, x0
    6e60:	add	w5, w5, #0x1
    6e64:	str	w5, [x2, #12680]
    6e68:	add	x3, x26, x3, lsl #2
    6e6c:	ldrh	w2, [x1, #36]
    6e70:	ldr	w5, [x4, #12680]
    6e74:	add	x3, x3, #0x8, lsl #12
    6e78:	add	x2, x2, x0
    6e7c:	add	w5, w5, #0x1
    6e80:	str	w5, [x4, #12680]
    6e84:	add	x2, x26, x2, lsl #2
    6e88:	ldrh	w4, [x1, #38]
    6e8c:	ldr	w5, [x3, #12680]
    6e90:	add	x2, x2, #0x8, lsl #12
    6e94:	add	x4, x4, x0
    6e98:	add	w5, w5, #0x1
    6e9c:	str	w5, [x3, #12680]
    6ea0:	add	x4, x26, x4, lsl #2
    6ea4:	ldrh	w3, [x1, #40]
    6ea8:	ldr	w5, [x2, #12680]
    6eac:	add	x4, x4, #0x8, lsl #12
    6eb0:	add	x3, x3, x0
    6eb4:	add	w5, w5, #0x1
    6eb8:	str	w5, [x2, #12680]
    6ebc:	ldrh	w2, [x1, #42]
    6ec0:	add	x3, x26, x3, lsl #2
    6ec4:	ldr	w5, [x4, #12680]
    6ec8:	add	x3, x3, #0x8, lsl #12
    6ecc:	add	x2, x2, x0
    6ed0:	add	w5, w5, #0x1
    6ed4:	str	w5, [x4, #12680]
    6ed8:	add	x2, x26, x2, lsl #2
    6edc:	add	x2, x2, #0x8, lsl #12
    6ee0:	ldr	w4, [x3, #12680]
    6ee4:	add	w4, w4, #0x1
    6ee8:	str	w4, [x3, #12680]
    6eec:	ldr	w3, [x2, #12680]
    6ef0:	ldrh	w4, [x1, #48]
    6ef4:	add	w3, w3, #0x1
    6ef8:	str	w3, [x2, #12680]
    6efc:	ldrh	w3, [x1, #44]
    6f00:	add	x4, x4, x0
    6f04:	ldrh	w2, [x1, #46]
    6f08:	add	x3, x3, x0
    6f0c:	add	x4, x26, x4, lsl #2
    6f10:	add	x2, x2, x0
    6f14:	add	x4, x4, #0x8, lsl #12
    6f18:	add	x3, x26, x3, lsl #2
    6f1c:	add	x3, x3, #0x8, lsl #12
    6f20:	add	x2, x26, x2, lsl #2
    6f24:	add	x2, x2, #0x8, lsl #12
    6f28:	ldr	w5, [x3, #12680]
    6f2c:	add	w5, w5, #0x1
    6f30:	str	w5, [x3, #12680]
    6f34:	ldrh	w3, [x1, #50]
    6f38:	ldr	w5, [x2, #12680]
    6f3c:	add	x3, x3, x0
    6f40:	add	w5, w5, #0x1
    6f44:	str	w5, [x2, #12680]
    6f48:	add	x3, x26, x3, lsl #2
    6f4c:	ldrh	w2, [x1, #52]
    6f50:	ldr	w5, [x4, #12680]
    6f54:	add	x3, x3, #0x8, lsl #12
    6f58:	add	x2, x2, x0
    6f5c:	add	w5, w5, #0x1
    6f60:	str	w5, [x4, #12680]
    6f64:	add	x2, x26, x2, lsl #2
    6f68:	ldrh	w4, [x1, #54]
    6f6c:	ldr	w5, [x3, #12680]
    6f70:	add	x2, x2, #0x8, lsl #12
    6f74:	add	x4, x4, x0
    6f78:	add	w5, w5, #0x1
    6f7c:	str	w5, [x3, #12680]
    6f80:	add	x4, x26, x4, lsl #2
    6f84:	ldrh	w3, [x1, #56]
    6f88:	ldr	w5, [x2, #12680]
    6f8c:	add	x4, x4, #0x8, lsl #12
    6f90:	add	x3, x3, x0
    6f94:	add	w5, w5, #0x1
    6f98:	str	w5, [x2, #12680]
    6f9c:	add	x3, x26, x3, lsl #2
    6fa0:	ldrh	w2, [x1, #58]
    6fa4:	ldr	w5, [x4, #12680]
    6fa8:	add	x3, x3, #0x8, lsl #12
    6fac:	add	x2, x2, x0
    6fb0:	add	w5, w5, #0x1
    6fb4:	str	w5, [x4, #12680]
    6fb8:	add	x2, x26, x2, lsl #2
    6fbc:	ldrh	w4, [x1, #60]
    6fc0:	ldr	w5, [x3, #12680]
    6fc4:	add	x2, x2, #0x8, lsl #12
    6fc8:	add	x4, x4, x0
    6fcc:	add	w5, w5, #0x1
    6fd0:	str	w5, [x3, #12680]
    6fd4:	add	x4, x26, x4, lsl #2
    6fd8:	ldrh	w3, [x1, #62]
    6fdc:	ldr	w5, [x2, #12680]
    6fe0:	add	x4, x4, #0x8, lsl #12
    6fe4:	add	x3, x3, x0
    6fe8:	add	w5, w5, #0x1
    6fec:	str	w5, [x2, #12680]
    6ff0:	ldrh	w2, [x1, #64]
    6ff4:	add	x3, x26, x3, lsl #2
    6ff8:	ldr	w5, [x4, #12680]
    6ffc:	add	x3, x3, #0x8, lsl #12
    7000:	add	x2, x2, x0
    7004:	add	w5, w5, #0x1
    7008:	str	w5, [x4, #12680]
    700c:	add	x2, x26, x2, lsl #2
    7010:	add	x2, x2, #0x8, lsl #12
    7014:	ldr	w4, [x3, #12680]
    7018:	add	w4, w4, #0x1
    701c:	str	w4, [x3, #12680]
    7020:	ldr	w3, [x2, #12680]
    7024:	ldrh	w4, [x1, #70]
    7028:	add	w3, w3, #0x1
    702c:	str	w3, [x2, #12680]
    7030:	ldrh	w3, [x1, #66]
    7034:	add	x4, x4, x0
    7038:	ldrh	w2, [x1, #68]
    703c:	add	x3, x3, x0
    7040:	add	x4, x26, x4, lsl #2
    7044:	add	x2, x2, x0
    7048:	add	x4, x4, #0x8, lsl #12
    704c:	add	x3, x26, x3, lsl #2
    7050:	add	x3, x3, #0x8, lsl #12
    7054:	add	x2, x26, x2, lsl #2
    7058:	add	x2, x2, #0x8, lsl #12
    705c:	ldr	w5, [x3, #12680]
    7060:	add	w5, w5, #0x1
    7064:	str	w5, [x3, #12680]
    7068:	ldrh	w3, [x1, #72]
    706c:	ldr	w5, [x2, #12680]
    7070:	add	x3, x3, x0
    7074:	add	w5, w5, #0x1
    7078:	str	w5, [x2, #12680]
    707c:	add	x3, x26, x3, lsl #2
    7080:	ldrh	w2, [x1, #74]
    7084:	ldr	w5, [x4, #12680]
    7088:	add	x3, x3, #0x8, lsl #12
    708c:	add	x2, x2, x0
    7090:	add	w5, w5, #0x1
    7094:	str	w5, [x4, #12680]
    7098:	add	x2, x26, x2, lsl #2
    709c:	ldrh	w4, [x1, #76]
    70a0:	ldr	w5, [x3, #12680]
    70a4:	add	x2, x2, #0x8, lsl #12
    70a8:	add	x4, x4, x0
    70ac:	add	w5, w5, #0x1
    70b0:	str	w5, [x3, #12680]
    70b4:	add	x4, x26, x4, lsl #2
    70b8:	ldrh	w3, [x1, #78]
    70bc:	ldr	w5, [x2, #12680]
    70c0:	add	x4, x4, #0x8, lsl #12
    70c4:	add	x3, x3, x0
    70c8:	add	w5, w5, #0x1
    70cc:	str	w5, [x2, #12680]
    70d0:	add	x3, x26, x3, lsl #2
    70d4:	ldrh	w2, [x1, #80]
    70d8:	ldr	w5, [x4, #12680]
    70dc:	add	x3, x3, #0x8, lsl #12
    70e0:	add	x2, x2, x0
    70e4:	add	w5, w5, #0x1
    70e8:	str	w5, [x4, #12680]
    70ec:	add	x2, x26, x2, lsl #2
    70f0:	ldrh	w4, [x1, #82]
    70f4:	ldr	w5, [x3, #12680]
    70f8:	add	x2, x2, #0x8, lsl #12
    70fc:	add	x4, x4, x0
    7100:	add	w5, w5, #0x1
    7104:	str	w5, [x3, #12680]
    7108:	add	x4, x26, x4, lsl #2
    710c:	ldrh	w3, [x1, #84]
    7110:	ldr	w5, [x2, #12680]
    7114:	add	x4, x4, #0x8, lsl #12
    7118:	add	x3, x3, x0
    711c:	add	w5, w5, #0x1
    7120:	str	w5, [x2, #12680]
    7124:	ldrh	w2, [x1, #86]
    7128:	add	x3, x26, x3, lsl #2
    712c:	ldr	w5, [x4, #12680]
    7130:	add	x3, x3, #0x8, lsl #12
    7134:	add	x2, x2, x0
    7138:	add	w5, w5, #0x1
    713c:	str	w5, [x4, #12680]
    7140:	add	x2, x26, x2, lsl #2
    7144:	add	x2, x2, #0x8, lsl #12
    7148:	ldr	w4, [x3, #12680]
    714c:	add	w4, w4, #0x1
    7150:	str	w4, [x3, #12680]
    7154:	ldr	w3, [x2, #12680]
    7158:	ldrh	w4, [x1, #92]
    715c:	add	w3, w3, #0x1
    7160:	str	w3, [x2, #12680]
    7164:	ldrh	w3, [x1, #88]
    7168:	add	x4, x4, x0
    716c:	ldrh	w2, [x1, #90]
    7170:	add	x3, x3, x0
    7174:	add	x4, x26, x4, lsl #2
    7178:	add	x2, x2, x0
    717c:	add	x4, x4, #0x8, lsl #12
    7180:	add	x3, x26, x3, lsl #2
    7184:	add	x3, x3, #0x8, lsl #12
    7188:	add	x2, x26, x2, lsl #2
    718c:	add	x2, x2, #0x8, lsl #12
    7190:	ldr	w5, [x3, #12680]
    7194:	add	w5, w5, #0x1
    7198:	str	w5, [x3, #12680]
    719c:	ldrh	w3, [x1, #94]
    71a0:	ldr	w5, [x2, #12680]
    71a4:	add	x3, x3, x0
    71a8:	add	w5, w5, #0x1
    71ac:	str	w5, [x2, #12680]
    71b0:	add	x3, x26, x3, lsl #2
    71b4:	ldrh	w2, [x1, #96]
    71b8:	ldr	w5, [x4, #12680]
    71bc:	add	x3, x3, #0x8, lsl #12
    71c0:	ldrh	w1, [x1, #98]
    71c4:	add	x2, x2, x0
    71c8:	add	w5, w5, #0x1
    71cc:	str	w5, [x4, #12680]
    71d0:	add	x2, x26, x2, lsl #2
    71d4:	add	x0, x1, x0
    71d8:	ldr	w4, [x3, #12680]
    71dc:	add	x1, x2, #0x8, lsl #12
    71e0:	add	x0, x26, x0, lsl #2
    71e4:	add	w2, w4, #0x1
    71e8:	str	w2, [x3, #12680]
    71ec:	add	x0, x0, #0x8, lsl #12
    71f0:	ldr	w2, [x1, #12680]
    71f4:	add	w2, w2, #0x1
    71f8:	str	w2, [x1, #12680]
    71fc:	ldr	w1, [x0, #12680]
    7200:	add	w1, w1, #0x1
    7204:	str	w1, [x0, #12680]
    7208:	ldr	x0, [sp, #144]
    720c:	ldr	w1, [sp, #152]
    7210:	add	x0, x0, #0x1
    7214:	str	x0, [sp, #144]
    7218:	ldr	w0, [sp, #164]
    721c:	cmp	w0, w1
    7220:	b.le	7530 <BZ2_compressBlock@@Base+0x2990>
    7224:	ldr	w28, [sp, #152]
    7228:	add	w0, w28, #0x31
    722c:	ldr	w1, [sp, #164]
    7230:	str	w0, [sp, #120]
    7234:	cmp	w0, w1
    7238:	b.lt	6038 <BZ2_compressBlock@@Base+0x1498>  // b.tstop
    723c:	ldr	w0, [sp, #560]
    7240:	mov	w1, #0x0                   	// #0
    7244:	str	w0, [sp, #120]
    7248:	ldr	w0, [sp, #164]
    724c:	str	w0, [sp, #152]
    7250:	ldr	x2, [sp, #584]
    7254:	ldr	x0, [sp, #592]
    7258:	bl	1600 <memset@plt>
    725c:	ldr	w0, [sp, #112]
    7260:	cmp	w0, #0x6
    7264:	b.eq	605c <BZ2_compressBlock@@Base+0x14bc>  // b.none
    7268:	ldr	w0, [sp, #120]
    726c:	cmp	w0, w28
    7270:	b.lt	7e44 <BZ2_compressBlock@@Base+0x32a4>  // b.tstop
    7274:	ldr	w1, [sp, #120]
    7278:	add	w0, w28, #0x1
    727c:	cmp	w1, w0
    7280:	b.le	7e4c <BZ2_compressBlock@@Base+0x32ac>
    7284:	sub	w0, w1, w28
    7288:	add	w2, w28, #0x2
    728c:	ldr	x1, [sp, #128]
    7290:	sub	w0, w0, #0x2
    7294:	and	w0, w0, #0xfffffffe
    7298:	ldr	w24, [sp, #112]
    729c:	add	w2, w0, w2
    72a0:	mov	w3, w28
    72a4:	add	x4, x1, w28, sxtw #1
    72a8:	add	x4, x4, #0x2
    72ac:	ldurh	w6, [x4, #-2]
    72b0:	add	w3, w3, #0x2
    72b4:	ldrh	w0, [x4]
    72b8:	cmp	w24, #0x2
    72bc:	add	x6, x26, x6
    72c0:	ldrh	w8, [sp, #704]
    72c4:	add	x6, x6, #0x9, lsl #12
    72c8:	add	x0, x26, x0
    72cc:	add	x0, x0, #0x9, lsl #12
    72d0:	ldrh	w7, [sp, #706]
    72d4:	add	x4, x4, #0x4
    72d8:	ldrb	w5, [x6, #844]
    72dc:	ldrb	w1, [x6, #1102]
    72e0:	add	w5, w5, w8
    72e4:	ldrb	w8, [x0, #844]
    72e8:	add	w1, w1, w7
    72ec:	ldrb	w7, [x0, #1102]
    72f0:	add	w5, w5, w8
    72f4:	strh	w5, [sp, #704]
    72f8:	add	w1, w1, w7
    72fc:	strh	w1, [sp, #706]
    7300:	b.eq	737c <BZ2_compressBlock@@Base+0x27dc>  // b.none
    7304:	ldrh	w7, [sp, #708]
    7308:	cmp	w24, #0x3
    730c:	ldrb	w1, [x6, #1360]
    7310:	ldrb	w5, [x0, #1360]
    7314:	add	w1, w1, w7
    7318:	add	w1, w1, w5
    731c:	strh	w1, [sp, #708]
    7320:	b.eq	737c <BZ2_compressBlock@@Base+0x27dc>  // b.none
    7324:	ldrh	w7, [sp, #710]
    7328:	cmp	w24, #0x4
    732c:	ldrb	w1, [x6, #1618]
    7330:	ldrb	w5, [x0, #1618]
    7334:	add	w1, w1, w7
    7338:	add	w1, w1, w5
    733c:	strh	w1, [sp, #710]
    7340:	b.eq	737c <BZ2_compressBlock@@Base+0x27dc>  // b.none
    7344:	ldrh	w7, [sp, #712]
    7348:	cmp	w24, #0x6
    734c:	ldrb	w1, [x6, #1876]
    7350:	ldrb	w5, [x0, #1876]
    7354:	add	w1, w1, w7
    7358:	add	w1, w1, w5
    735c:	strh	w1, [sp, #712]
    7360:	b.ne	737c <BZ2_compressBlock@@Base+0x27dc>  // b.any
    7364:	ldrh	w1, [sp, #714]
    7368:	ldrb	w6, [x6, #2134]
    736c:	ldrb	w5, [x0, #2134]
    7370:	add	w0, w1, w6
    7374:	add	w0, w0, w5
    7378:	strh	w0, [sp, #714]
    737c:	cmp	w2, w3
    7380:	b.ne	72ac <BZ2_compressBlock@@Base+0x270c>  // b.any
    7384:	str	w24, [sp, #112]
    7388:	ldrh	w1, [sp, #704]
    738c:	sxtw	x3, w3
    7390:	ldrh	w4, [sp, #706]
    7394:	mov	w2, #0x0                   	// #0
    7398:	ldrh	w10, [sp, #708]
    739c:	mov	w9, #0x0                   	// #0
    73a0:	ldrh	w6, [sp, #710]
    73a4:	mov	w8, #0x0                   	// #0
    73a8:	ldrh	w7, [sp, #712]
    73ac:	mov	w11, #0x0                   	// #0
    73b0:	ldrh	w5, [sp, #714]
    73b4:	ldr	w24, [sp, #112]
    73b8:	b	7410 <BZ2_compressBlock@@Base+0x2870>
    73bc:	ldrb	w8, [x0, #1618]
    73c0:	cmp	w24, #0x4
    73c4:	add	w6, w6, w8
    73c8:	and	w6, w6, #0xffff
    73cc:	b.eq	7e38 <BZ2_compressBlock@@Base+0x3298>  // b.none
    73d0:	ldrb	w8, [x0, #1876]
    73d4:	mov	w2, #0x1                   	// #1
    73d8:	cmp	w24, #0x6
    73dc:	mov	w9, w2
    73e0:	add	w7, w7, w8
    73e4:	mov	w8, w2
    73e8:	and	w7, w7, #0xffff
    73ec:	b.ne	7e28 <BZ2_compressBlock@@Base+0x3288>  // b.any
    73f0:	ldrb	w0, [x0, #2134]
    73f4:	mov	w11, w2
    73f8:	add	w5, w5, w0
    73fc:	and	w5, w5, #0xffff
    7400:	ldr	w0, [sp, #120]
    7404:	add	x3, x3, #0x1
    7408:	cmp	w0, w3
    740c:	b.lt	7468 <BZ2_compressBlock@@Base+0x28c8>  // b.tstop
    7410:	ldr	x0, [sp, #128]
    7414:	cmp	w24, #0x2
    7418:	ldrh	w0, [x0, x3, lsl #1]
    741c:	add	x0, x26, x0
    7420:	add	x0, x0, #0x9, lsl #12
    7424:	ldrb	w13, [x0, #844]
    7428:	ldrb	w12, [x0, #1102]
    742c:	add	w1, w1, w13
    7430:	add	w4, w4, w12
    7434:	and	w1, w1, #0xffff
    7438:	and	w4, w4, #0xffff
    743c:	b.eq	7400 <BZ2_compressBlock@@Base+0x2860>  // b.none
    7440:	ldrb	w8, [x0, #1360]
    7444:	cmp	w24, #0x3
    7448:	add	w10, w10, w8
    744c:	and	w10, w10, #0xffff
    7450:	b.ne	73bc <BZ2_compressBlock@@Base+0x281c>  // b.any
    7454:	ldr	w0, [sp, #120]
    7458:	add	x3, x3, #0x1
    745c:	mov	w8, #0x1                   	// #1
    7460:	cmp	w0, w3
    7464:	b.ge	7410 <BZ2_compressBlock@@Base+0x2870>  // b.tcont
    7468:	str	w24, [sp, #112]
    746c:	strh	w1, [sp, #704]
    7470:	cbz	w11, 7478 <BZ2_compressBlock@@Base+0x28d8>
    7474:	strh	w5, [sp, #714]
    7478:	strh	w4, [sp, #706]
    747c:	cbz	w8, 7484 <BZ2_compressBlock@@Base+0x28e4>
    7480:	strh	w10, [sp, #708]
    7484:	cbz	w9, 748c <BZ2_compressBlock@@Base+0x28ec>
    7488:	strh	w6, [sp, #710]
    748c:	cbz	w2, 6ba4 <BZ2_compressBlock@@Base+0x2004>
    7490:	strh	w7, [sp, #712]
    7494:	b	6ba4 <BZ2_compressBlock@@Base+0x2004>
    7498:	ldr	w3, [sp, #136]
    749c:	sxtw	x2, w0
    74a0:	add	w1, w3, w1
    74a4:	str	w1, [sp, #136]
    74a8:	ldr	x1, [sp, #144]
    74ac:	ldr	x3, [sp, #176]
    74b0:	mov	w6, w1
    74b4:	strb	w0, [x3, x1]
    74b8:	ldr	x3, [sp, #168]
    74bc:	ldr	w1, [x3, x2, lsl #2]
    74c0:	add	w1, w1, #0x1
    74c4:	str	w1, [x3, x2, lsl #2]
    74c8:	ldr	w1, [sp, #120]
    74cc:	sxtw	x2, w28
    74d0:	mov	w4, #0x102                 	// #258
    74d4:	cmp	w1, w28
    74d8:	b.lt	7208 <BZ2_compressBlock@@Base+0x2668>  // b.tstop
    74dc:	ldr	w24, [sp, #112]
    74e0:	ldr	x1, [sp, #128]
    74e4:	ldr	w3, [sp, #120]
    74e8:	ldrh	w1, [x1, x2, lsl #1]
    74ec:	add	x2, x2, #0x1
    74f0:	cmp	w3, w2
    74f4:	smaddl	x1, w0, w4, x1
    74f8:	add	x1, x26, x1, lsl #2
    74fc:	add	x1, x1, #0x8, lsl #12
    7500:	ldr	w3, [x1, #12680]
    7504:	add	w3, w3, #0x1
    7508:	str	w3, [x1, #12680]
    750c:	b.ge	74e0 <BZ2_compressBlock@@Base+0x2940>  // b.tcont
    7510:	ldr	x0, [sp, #144]
    7514:	str	w24, [sp, #112]
    7518:	ldr	w1, [sp, #152]
    751c:	add	x0, x0, #0x1
    7520:	str	x0, [sp, #144]
    7524:	ldr	w0, [sp, #164]
    7528:	cmp	w0, w1
    752c:	b.gt	7224 <BZ2_compressBlock@@Base+0x2684>
    7530:	ldr	w25, [sp, #112]
    7534:	mov	w28, w6
    7538:	ldr	w1, [sp, #552]
    753c:	ldr	w0, [x26, #656]
    7540:	add	w1, w1, #0x1
    7544:	str	w1, [sp, #552]
    7548:	cmp	w0, #0x2
    754c:	b.gt	9d24 <BZ2_compressBlock@@Base+0x5184>
    7550:	ldr	x19, [sp, #600]
    7554:	ldr	w22, [sp, #556]
    7558:	ldr	x20, [sp, #568]
    755c:	mov	x21, x19
    7560:	mov	x0, x19
    7564:	mov	x1, x20
    7568:	mov	w2, w22
    756c:	mov	w3, #0x11                  	// #17
    7570:	bl	1550 <BZ2_hbMakeCodeLengths@plt>
    7574:	add	x19, x19, #0x102
    7578:	ldr	x0, [sp, #576]
    757c:	add	x20, x20, #0x408
    7580:	cmp	x19, x0
    7584:	b.ne	7560 <BZ2_compressBlock@@Base+0x29c0>  // b.any
    7588:	ldr	w0, [sp, #552]
    758c:	cmp	w0, #0x4
    7590:	b.ne	5fb0 <BZ2_compressBlock@@Base+0x1410>  // b.any
    7594:	ldr	w1, [sp, #624]
    7598:	mov	w0, #0x1                   	// #1
    759c:	strb	w0, [sp, #721]
    75a0:	mov	x24, x26
    75a4:	ldr	w22, [sp, #556]
    75a8:	cmp	w1, #0x2
    75ac:	b.eq	75ec <BZ2_compressBlock@@Base+0x2a4c>  // b.none
    75b0:	mov	w0, #0x2                   	// #2
    75b4:	strb	w0, [sp, #722]
    75b8:	cmp	w1, #0x3
    75bc:	b.eq	75ec <BZ2_compressBlock@@Base+0x2a4c>  // b.none
    75c0:	mov	w0, #0x3                   	// #3
    75c4:	strb	w0, [sp, #723]
    75c8:	cmp	w1, #0x4
    75cc:	mov	w0, w1
    75d0:	b.eq	75ec <BZ2_compressBlock@@Base+0x2a4c>  // b.none
    75d4:	ldrb	w1, [sp, #552]
    75d8:	cmp	w0, #0x6
    75dc:	strb	w1, [sp, #724]
    75e0:	b.ne	75ec <BZ2_compressBlock@@Base+0x2a4c>  // b.any
    75e4:	mov	w0, #0x5                   	// #5
    75e8:	strb	w0, [sp, #725]
    75ec:	cbz	w28, 7698 <BZ2_compressBlock@@Base+0x2af8>
    75f0:	mov	x6, #0x4cfa                	// #19706
    75f4:	ldrb	w5, [sp, #721]
    75f8:	add	x8, x24, x6
    75fc:	ldrb	w4, [sp, #722]
    7600:	ldrb	w3, [sp, #723]
    7604:	add	x9, x24, #0x6a8
    7608:	ldrb	w2, [sp, #724]
    760c:	mov	x0, #0x0                   	// #0
    7610:	ldrb	w10, [sp, #725]
    7614:	mov	w6, #0x0                   	// #0
    7618:	b	7678 <BZ2_compressBlock@@Base+0x2ad8>
    761c:	cmp	w1, w5
    7620:	b.eq	7e54 <BZ2_compressBlock@@Base+0x32b4>  // b.none
    7624:	cmp	w1, w4
    7628:	b.eq	9c90 <BZ2_compressBlock@@Base+0x50f0>  // b.none
    762c:	cmp	w1, w3
    7630:	b.eq	9cd8 <BZ2_compressBlock@@Base+0x5138>  // b.none
    7634:	cmp	w1, w2
    7638:	b.eq	9d04 <BZ2_compressBlock@@Base+0x5164>  // b.none
    763c:	mov	w1, w2
    7640:	mov	w2, w10
    7644:	mov	w10, w1
    7648:	mov	w1, #0x5                   	// #5
    764c:	and	w1, w1, #0xff
    7650:	strb	w1, [x8, x0]
    7654:	mov	w7, w6
    7658:	add	x0, x0, #0x1
    765c:	mov	w6, w2
    7660:	cmp	w28, w0
    7664:	mov	w2, w3
    7668:	mov	w3, w4
    766c:	mov	w4, w5
    7670:	mov	w5, w7
    7674:	b.le	7698 <BZ2_compressBlock@@Base+0x2af8>
    7678:	ldrb	w1, [x9, x0]
    767c:	cmp	w6, w1
    7680:	b.ne	761c <BZ2_compressBlock@@Base+0x2a7c>  // b.any
    7684:	mov	w1, #0x0                   	// #0
    7688:	strb	w1, [x8, x0]
    768c:	add	x0, x0, #0x1
    7690:	cmp	w28, w0
    7694:	b.gt	7678 <BZ2_compressBlock@@Base+0x2ad8>
    7698:	ldr	x25, [sp, #600]
    769c:	mov	w26, #0x0                   	// #0
    76a0:	ldr	x23, [sp, #688]
    76a4:	str	w28, [sp, #112]
    76a8:	ldr	w27, [sp, #652]
    76ac:	mov	x28, x23
    76b0:	ldr	w23, [sp, #624]
    76b4:	str	x21, [sp, #120]
    76b8:	mov	w21, w26
    76bc:	mov	x26, x25
    76c0:	ldr	w25, [sp, #680]
    76c4:	nop
    76c8:	cmp	w22, #0x0
    76cc:	mov	w20, #0x0                   	// #0
    76d0:	mov	w19, #0x20                  	// #32
    76d4:	b.le	7db4 <BZ2_compressBlock@@Base+0x3214>
    76d8:	ldr	w0, [sp, #564]
    76dc:	cmp	w0, #0xe
    76e0:	b.ls	a51c <BZ2_compressBlock@@Base+0x597c>  // b.plast
    76e4:	ldr	q3, [x26]
    76e8:	cmp	w25, #0x1
    76ec:	uxtl	v2.8h, v3.8b
    76f0:	uxtl2	v3.8h, v3.16b
    76f4:	uxtl	v4.4s, v2.4h
    76f8:	uxtl2	v2.4s, v2.8h
    76fc:	uxtl	v0.4s, v3.4h
    7700:	uxtl2	v3.4s, v3.8h
    7704:	smax	v1.4s, v2.4s, v4.4s
    7708:	smin	v2.4s, v2.4s, v4.4s
    770c:	movi	v4.4s, #0x0
    7710:	smax	v1.4s, v1.4s, v4.4s
    7714:	movi	v4.4s, #0x20
    7718:	smax	v1.4s, v1.4s, v0.4s
    771c:	smin	v2.4s, v2.4s, v4.4s
    7720:	smax	v1.4s, v1.4s, v3.4s
    7724:	smin	v0.4s, v2.4s, v0.4s
    7728:	smin	v0.4s, v0.4s, v3.4s
    772c:	b.ls	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.plast
    7730:	ldr	q3, [x26, #16]
    7734:	cmp	w25, #0x2
    7738:	uxtl	v2.8h, v3.8b
    773c:	uxtl2	v3.8h, v3.16b
    7740:	uxtl	v6.4s, v2.4h
    7744:	uxtl2	v2.4s, v2.8h
    7748:	uxtl	v5.4s, v3.4h
    774c:	uxtl2	v3.4s, v3.8h
    7750:	smax	v4.4s, v2.4s, v6.4s
    7754:	smin	v2.4s, v2.4s, v6.4s
    7758:	smax	v4.4s, v4.4s, v5.4s
    775c:	smin	v2.4s, v2.4s, v5.4s
    7760:	smax	v4.4s, v4.4s, v3.4s
    7764:	smin	v2.4s, v2.4s, v3.4s
    7768:	smax	v1.4s, v1.4s, v4.4s
    776c:	smin	v0.4s, v0.4s, v2.4s
    7770:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7774:	ldr	q3, [x26, #32]
    7778:	cmp	w25, #0x3
    777c:	uxtl	v2.8h, v3.8b
    7780:	uxtl2	v3.8h, v3.16b
    7784:	uxtl	v6.4s, v2.4h
    7788:	uxtl2	v2.4s, v2.8h
    778c:	uxtl	v5.4s, v3.4h
    7790:	uxtl2	v3.4s, v3.8h
    7794:	smax	v4.4s, v2.4s, v6.4s
    7798:	smin	v2.4s, v2.4s, v6.4s
    779c:	smax	v4.4s, v4.4s, v5.4s
    77a0:	smin	v2.4s, v2.4s, v5.4s
    77a4:	smax	v4.4s, v4.4s, v3.4s
    77a8:	smin	v2.4s, v2.4s, v3.4s
    77ac:	smax	v1.4s, v1.4s, v4.4s
    77b0:	smin	v0.4s, v0.4s, v2.4s
    77b4:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    77b8:	ldr	q3, [x26, #48]
    77bc:	cmp	w25, #0x4
    77c0:	uxtl	v2.8h, v3.8b
    77c4:	uxtl2	v3.8h, v3.16b
    77c8:	uxtl	v6.4s, v2.4h
    77cc:	uxtl2	v2.4s, v2.8h
    77d0:	uxtl	v5.4s, v3.4h
    77d4:	uxtl2	v3.4s, v3.8h
    77d8:	smax	v4.4s, v2.4s, v6.4s
    77dc:	smin	v2.4s, v2.4s, v6.4s
    77e0:	smax	v4.4s, v4.4s, v5.4s
    77e4:	smin	v2.4s, v2.4s, v5.4s
    77e8:	smax	v4.4s, v4.4s, v3.4s
    77ec:	smin	v2.4s, v2.4s, v3.4s
    77f0:	smax	v1.4s, v1.4s, v4.4s
    77f4:	smin	v0.4s, v0.4s, v2.4s
    77f8:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    77fc:	ldr	q3, [x26, #64]
    7800:	cmp	w25, #0x5
    7804:	uxtl	v2.8h, v3.8b
    7808:	uxtl2	v3.8h, v3.16b
    780c:	uxtl	v6.4s, v2.4h
    7810:	uxtl2	v2.4s, v2.8h
    7814:	uxtl	v5.4s, v3.4h
    7818:	uxtl2	v3.4s, v3.8h
    781c:	smax	v4.4s, v2.4s, v6.4s
    7820:	smin	v2.4s, v2.4s, v6.4s
    7824:	smax	v4.4s, v4.4s, v5.4s
    7828:	smin	v2.4s, v2.4s, v5.4s
    782c:	smax	v4.4s, v4.4s, v3.4s
    7830:	smin	v2.4s, v2.4s, v3.4s
    7834:	smax	v1.4s, v1.4s, v4.4s
    7838:	smin	v0.4s, v0.4s, v2.4s
    783c:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7840:	ldr	q3, [x26, #80]
    7844:	cmp	w25, #0x6
    7848:	uxtl	v2.8h, v3.8b
    784c:	uxtl2	v3.8h, v3.16b
    7850:	uxtl	v6.4s, v2.4h
    7854:	uxtl2	v2.4s, v2.8h
    7858:	uxtl	v5.4s, v3.4h
    785c:	uxtl2	v3.4s, v3.8h
    7860:	smax	v4.4s, v2.4s, v6.4s
    7864:	smin	v2.4s, v2.4s, v6.4s
    7868:	smax	v4.4s, v4.4s, v5.4s
    786c:	smin	v2.4s, v2.4s, v5.4s
    7870:	smax	v4.4s, v4.4s, v3.4s
    7874:	smin	v2.4s, v2.4s, v3.4s
    7878:	smax	v1.4s, v1.4s, v4.4s
    787c:	smin	v0.4s, v0.4s, v2.4s
    7880:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7884:	ldr	q3, [x26, #96]
    7888:	cmp	w25, #0x7
    788c:	uxtl	v2.8h, v3.8b
    7890:	uxtl2	v3.8h, v3.16b
    7894:	uxtl	v6.4s, v2.4h
    7898:	uxtl2	v2.4s, v2.8h
    789c:	uxtl	v5.4s, v3.4h
    78a0:	uxtl2	v3.4s, v3.8h
    78a4:	smax	v4.4s, v2.4s, v6.4s
    78a8:	smin	v2.4s, v2.4s, v6.4s
    78ac:	smax	v4.4s, v4.4s, v5.4s
    78b0:	smin	v2.4s, v2.4s, v5.4s
    78b4:	smax	v4.4s, v4.4s, v3.4s
    78b8:	smin	v2.4s, v2.4s, v3.4s
    78bc:	smax	v1.4s, v1.4s, v4.4s
    78c0:	smin	v0.4s, v0.4s, v2.4s
    78c4:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    78c8:	ldr	q3, [x26, #112]
    78cc:	cmp	w25, #0x8
    78d0:	uxtl	v2.8h, v3.8b
    78d4:	uxtl2	v3.8h, v3.16b
    78d8:	uxtl	v6.4s, v2.4h
    78dc:	uxtl2	v2.4s, v2.8h
    78e0:	uxtl	v5.4s, v3.4h
    78e4:	uxtl2	v3.4s, v3.8h
    78e8:	smax	v4.4s, v2.4s, v6.4s
    78ec:	smin	v2.4s, v2.4s, v6.4s
    78f0:	smax	v4.4s, v4.4s, v5.4s
    78f4:	smin	v2.4s, v2.4s, v5.4s
    78f8:	smax	v4.4s, v4.4s, v3.4s
    78fc:	smin	v2.4s, v2.4s, v3.4s
    7900:	smax	v1.4s, v1.4s, v4.4s
    7904:	smin	v0.4s, v0.4s, v2.4s
    7908:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    790c:	ldr	q3, [x26, #128]
    7910:	cmp	w25, #0x9
    7914:	uxtl	v2.8h, v3.8b
    7918:	uxtl2	v3.8h, v3.16b
    791c:	uxtl	v6.4s, v2.4h
    7920:	uxtl2	v2.4s, v2.8h
    7924:	uxtl	v5.4s, v3.4h
    7928:	uxtl2	v3.4s, v3.8h
    792c:	smax	v4.4s, v2.4s, v6.4s
    7930:	smin	v2.4s, v2.4s, v6.4s
    7934:	smax	v4.4s, v4.4s, v5.4s
    7938:	smin	v2.4s, v2.4s, v5.4s
    793c:	smax	v4.4s, v4.4s, v3.4s
    7940:	smin	v2.4s, v2.4s, v3.4s
    7944:	smax	v1.4s, v1.4s, v4.4s
    7948:	smin	v0.4s, v0.4s, v2.4s
    794c:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7950:	ldr	q3, [x26, #144]
    7954:	cmp	w25, #0xa
    7958:	uxtl	v2.8h, v3.8b
    795c:	uxtl2	v3.8h, v3.16b
    7960:	uxtl	v6.4s, v2.4h
    7964:	uxtl2	v2.4s, v2.8h
    7968:	uxtl	v5.4s, v3.4h
    796c:	uxtl2	v3.4s, v3.8h
    7970:	smax	v4.4s, v2.4s, v6.4s
    7974:	smin	v2.4s, v2.4s, v6.4s
    7978:	smax	v4.4s, v4.4s, v5.4s
    797c:	smin	v2.4s, v2.4s, v5.4s
    7980:	smax	v4.4s, v4.4s, v3.4s
    7984:	smin	v2.4s, v2.4s, v3.4s
    7988:	smax	v1.4s, v1.4s, v4.4s
    798c:	smin	v0.4s, v0.4s, v2.4s
    7990:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7994:	ldr	q3, [x26, #160]
    7998:	cmp	w25, #0xb
    799c:	uxtl	v2.8h, v3.8b
    79a0:	uxtl2	v3.8h, v3.16b
    79a4:	uxtl	v6.4s, v2.4h
    79a8:	uxtl2	v2.4s, v2.8h
    79ac:	uxtl	v5.4s, v3.4h
    79b0:	uxtl2	v3.4s, v3.8h
    79b4:	smax	v4.4s, v2.4s, v6.4s
    79b8:	smin	v2.4s, v2.4s, v6.4s
    79bc:	smax	v4.4s, v4.4s, v5.4s
    79c0:	smin	v2.4s, v2.4s, v5.4s
    79c4:	smax	v4.4s, v4.4s, v3.4s
    79c8:	smin	v2.4s, v2.4s, v3.4s
    79cc:	smax	v1.4s, v1.4s, v4.4s
    79d0:	smin	v0.4s, v0.4s, v2.4s
    79d4:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    79d8:	ldr	q3, [x26, #176]
    79dc:	cmp	w25, #0xc
    79e0:	uxtl	v2.8h, v3.8b
    79e4:	uxtl2	v3.8h, v3.16b
    79e8:	uxtl	v6.4s, v2.4h
    79ec:	uxtl2	v2.4s, v2.8h
    79f0:	uxtl	v5.4s, v3.4h
    79f4:	uxtl2	v3.4s, v3.8h
    79f8:	smax	v4.4s, v2.4s, v6.4s
    79fc:	smin	v2.4s, v2.4s, v6.4s
    7a00:	smax	v4.4s, v4.4s, v5.4s
    7a04:	smin	v2.4s, v2.4s, v5.4s
    7a08:	smax	v4.4s, v4.4s, v3.4s
    7a0c:	smin	v2.4s, v2.4s, v3.4s
    7a10:	smax	v1.4s, v1.4s, v4.4s
    7a14:	smin	v0.4s, v0.4s, v2.4s
    7a18:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7a1c:	ldr	q3, [x26, #192]
    7a20:	cmp	w25, #0xd
    7a24:	uxtl	v2.8h, v3.8b
    7a28:	uxtl2	v3.8h, v3.16b
    7a2c:	uxtl	v6.4s, v2.4h
    7a30:	uxtl2	v2.4s, v2.8h
    7a34:	uxtl	v5.4s, v3.4h
    7a38:	uxtl2	v3.4s, v3.8h
    7a3c:	smax	v4.4s, v2.4s, v6.4s
    7a40:	smin	v2.4s, v2.4s, v6.4s
    7a44:	smax	v4.4s, v4.4s, v5.4s
    7a48:	smin	v2.4s, v2.4s, v5.4s
    7a4c:	smax	v4.4s, v4.4s, v3.4s
    7a50:	smin	v2.4s, v2.4s, v3.4s
    7a54:	smax	v1.4s, v1.4s, v4.4s
    7a58:	smin	v0.4s, v0.4s, v2.4s
    7a5c:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7a60:	ldr	q3, [x26, #208]
    7a64:	cmp	w25, #0xe
    7a68:	uxtl	v2.8h, v3.8b
    7a6c:	uxtl2	v3.8h, v3.16b
    7a70:	uxtl	v6.4s, v2.4h
    7a74:	uxtl2	v2.4s, v2.8h
    7a78:	uxtl	v5.4s, v3.4h
    7a7c:	uxtl2	v3.4s, v3.8h
    7a80:	smax	v4.4s, v2.4s, v6.4s
    7a84:	smin	v2.4s, v2.4s, v6.4s
    7a88:	smax	v4.4s, v4.4s, v5.4s
    7a8c:	smin	v2.4s, v2.4s, v5.4s
    7a90:	smax	v4.4s, v4.4s, v3.4s
    7a94:	smin	v2.4s, v2.4s, v3.4s
    7a98:	smax	v1.4s, v1.4s, v4.4s
    7a9c:	smin	v0.4s, v0.4s, v2.4s
    7aa0:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7aa4:	ldr	q3, [x26, #224]
    7aa8:	cmp	w25, #0xf
    7aac:	uxtl	v2.8h, v3.8b
    7ab0:	uxtl2	v3.8h, v3.16b
    7ab4:	uxtl	v6.4s, v2.4h
    7ab8:	uxtl2	v2.4s, v2.8h
    7abc:	uxtl	v5.4s, v3.4h
    7ac0:	uxtl2	v3.4s, v3.8h
    7ac4:	smax	v4.4s, v2.4s, v6.4s
    7ac8:	smin	v2.4s, v2.4s, v6.4s
    7acc:	smax	v4.4s, v4.4s, v5.4s
    7ad0:	smin	v2.4s, v2.4s, v5.4s
    7ad4:	smax	v4.4s, v4.4s, v3.4s
    7ad8:	smin	v2.4s, v2.4s, v3.4s
    7adc:	smax	v1.4s, v1.4s, v4.4s
    7ae0:	smin	v0.4s, v0.4s, v2.4s
    7ae4:	b.eq	7b28 <BZ2_compressBlock@@Base+0x2f88>  // b.none
    7ae8:	ldr	q3, [x26, #240]
    7aec:	uxtl	v2.8h, v3.8b
    7af0:	uxtl2	v3.8h, v3.16b
    7af4:	uxtl	v6.4s, v2.4h
    7af8:	uxtl2	v2.4s, v2.8h
    7afc:	uxtl	v5.4s, v3.4h
    7b00:	uxtl2	v3.4s, v3.8h
    7b04:	smax	v4.4s, v2.4s, v6.4s
    7b08:	smin	v2.4s, v2.4s, v6.4s
    7b0c:	smax	v4.4s, v4.4s, v5.4s
    7b10:	smin	v2.4s, v2.4s, v5.4s
    7b14:	smax	v4.4s, v4.4s, v3.4s
    7b18:	smin	v2.4s, v2.4s, v3.4s
    7b1c:	smax	v1.4s, v1.4s, v4.4s
    7b20:	smin	v0.4s, v0.4s, v2.4s
    7b24:	nop
    7b28:	sminv	s0, v0.4s
    7b2c:	cmp	w27, w22
    7b30:	smaxv	s1, v1.4s
    7b34:	mov	w19, v0.s[0]
    7b38:	mov	w20, v1.s[0]
    7b3c:	b.eq	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.none
    7b40:	mov	w2, w27
    7b44:	sxtw	x4, w21
    7b48:	sbfiz	x0, x21, #7, #32
    7b4c:	add	x0, x0, x4
    7b50:	add	w1, w2, #0x1
    7b54:	add	x0, x24, x0, lsl #1
    7b58:	add	x3, x0, w2, sxtw
    7b5c:	add	x3, x3, #0x9, lsl #12
    7b60:	ldrb	w3, [x3, #844]
    7b64:	cmp	w20, w3
    7b68:	csel	w20, w20, w3, ge  // ge = tcont
    7b6c:	cmp	w19, w3
    7b70:	csel	w19, w19, w3, le
    7b74:	cmp	w1, w22
    7b78:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7b7c:	add	x1, x0, w1, sxtw
    7b80:	add	w3, w2, #0x2
    7b84:	add	x1, x1, #0x9, lsl #12
    7b88:	ldrb	w1, [x1, #844]
    7b8c:	cmp	w20, w1
    7b90:	csel	w20, w20, w1, ge  // ge = tcont
    7b94:	cmp	w19, w1
    7b98:	csel	w19, w19, w1, le
    7b9c:	cmp	w3, w22
    7ba0:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7ba4:	add	x3, x0, w3, sxtw
    7ba8:	add	w1, w2, #0x3
    7bac:	add	x3, x3, #0x9, lsl #12
    7bb0:	ldrb	w3, [x3, #844]
    7bb4:	cmp	w20, w3
    7bb8:	csel	w20, w20, w3, ge  // ge = tcont
    7bbc:	cmp	w19, w3
    7bc0:	csel	w19, w19, w3, le
    7bc4:	cmp	w1, w22
    7bc8:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7bcc:	add	x1, x0, w1, sxtw
    7bd0:	add	w3, w2, #0x4
    7bd4:	add	x1, x1, #0x9, lsl #12
    7bd8:	ldrb	w1, [x1, #844]
    7bdc:	cmp	w20, w1
    7be0:	csel	w20, w20, w1, ge  // ge = tcont
    7be4:	cmp	w19, w1
    7be8:	csel	w19, w19, w1, le
    7bec:	cmp	w3, w22
    7bf0:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7bf4:	add	x3, x0, w3, sxtw
    7bf8:	add	w1, w2, #0x5
    7bfc:	add	x3, x3, #0x9, lsl #12
    7c00:	ldrb	w3, [x3, #844]
    7c04:	cmp	w20, w3
    7c08:	csel	w20, w20, w3, ge  // ge = tcont
    7c0c:	cmp	w19, w3
    7c10:	csel	w19, w19, w3, le
    7c14:	cmp	w1, w22
    7c18:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7c1c:	add	x1, x0, w1, sxtw
    7c20:	add	w3, w2, #0x6
    7c24:	add	x1, x1, #0x9, lsl #12
    7c28:	ldrb	w1, [x1, #844]
    7c2c:	cmp	w20, w1
    7c30:	csel	w20, w20, w1, ge  // ge = tcont
    7c34:	cmp	w19, w1
    7c38:	csel	w19, w19, w1, le
    7c3c:	cmp	w3, w22
    7c40:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7c44:	add	x3, x0, w3, sxtw
    7c48:	add	w1, w2, #0x7
    7c4c:	add	x3, x3, #0x9, lsl #12
    7c50:	ldrb	w3, [x3, #844]
    7c54:	cmp	w20, w3
    7c58:	csel	w20, w20, w3, ge  // ge = tcont
    7c5c:	cmp	w19, w3
    7c60:	csel	w19, w19, w3, le
    7c64:	cmp	w1, w22
    7c68:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7c6c:	add	x1, x0, w1, sxtw
    7c70:	add	w3, w2, #0x8
    7c74:	add	x1, x1, #0x9, lsl #12
    7c78:	ldrb	w1, [x1, #844]
    7c7c:	cmp	w20, w1
    7c80:	csel	w20, w20, w1, ge  // ge = tcont
    7c84:	cmp	w19, w1
    7c88:	csel	w19, w19, w1, le
    7c8c:	cmp	w3, w22
    7c90:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7c94:	add	x3, x0, w3, sxtw
    7c98:	add	w1, w2, #0x9
    7c9c:	add	x3, x3, #0x9, lsl #12
    7ca0:	ldrb	w3, [x3, #844]
    7ca4:	cmp	w20, w3
    7ca8:	csel	w20, w20, w3, ge  // ge = tcont
    7cac:	cmp	w19, w3
    7cb0:	csel	w19, w19, w3, le
    7cb4:	cmp	w1, w22
    7cb8:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7cbc:	add	x0, x0, w1, sxtw
    7cc0:	add	w1, w2, #0xa
    7cc4:	add	x0, x0, #0x9, lsl #12
    7cc8:	ldrb	w0, [x0, #844]
    7ccc:	cmp	w20, w0
    7cd0:	csel	w20, w20, w0, ge  // ge = tcont
    7cd4:	cmp	w19, w0
    7cd8:	csel	w19, w19, w0, le
    7cdc:	cmp	w1, w22
    7ce0:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7ce4:	add	x4, x4, x4, lsl #7
    7ce8:	add	w0, w2, #0xb
    7cec:	add	x4, x24, x4, lsl #1
    7cf0:	add	x1, x4, w1, sxtw
    7cf4:	add	x1, x1, #0x9, lsl #12
    7cf8:	ldrb	w1, [x1, #844]
    7cfc:	cmp	w20, w1
    7d00:	csel	w20, w20, w1, ge  // ge = tcont
    7d04:	cmp	w19, w1
    7d08:	csel	w19, w19, w1, le
    7d0c:	cmp	w0, w22
    7d10:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7d14:	add	x0, x4, w0, sxtw
    7d18:	add	w1, w2, #0xc
    7d1c:	add	x0, x0, #0x9, lsl #12
    7d20:	ldrb	w0, [x0, #844]
    7d24:	cmp	w20, w0
    7d28:	csel	w20, w20, w0, ge  // ge = tcont
    7d2c:	cmp	w19, w0
    7d30:	csel	w19, w19, w0, le
    7d34:	cmp	w1, w22
    7d38:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7d3c:	add	x1, x4, w1, sxtw
    7d40:	add	w0, w2, #0xd
    7d44:	add	x1, x1, #0x9, lsl #12
    7d48:	ldrb	w1, [x1, #844]
    7d4c:	cmp	w20, w1
    7d50:	csel	w20, w20, w1, ge  // ge = tcont
    7d54:	cmp	w19, w1
    7d58:	csel	w19, w19, w1, le
    7d5c:	cmp	w0, w22
    7d60:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7d64:	add	x0, x4, w0, sxtw
    7d68:	add	w2, w2, #0xe
    7d6c:	add	x0, x0, #0x9, lsl #12
    7d70:	ldrb	w0, [x0, #844]
    7d74:	cmp	w20, w0
    7d78:	csel	w20, w20, w0, ge  // ge = tcont
    7d7c:	cmp	w19, w0
    7d80:	csel	w19, w19, w0, le
    7d84:	cmp	w2, w22
    7d88:	b.ge	7da8 <BZ2_compressBlock@@Base+0x3208>  // b.tcont
    7d8c:	add	x2, x4, w2, sxtw
    7d90:	add	x2, x2, #0x9, lsl #12
    7d94:	ldrb	w0, [x2, #844]
    7d98:	cmp	w20, w0
    7d9c:	csel	w20, w20, w0, ge  // ge = tcont
    7da0:	cmp	w19, w0
    7da4:	csel	w19, w19, w0, le
    7da8:	cmp	w20, #0x11
    7dac:	b.gt	7e70 <BZ2_compressBlock@@Base+0x32d0>
    7db0:	cbz	w19, 7e7c <BZ2_compressBlock@@Base+0x32dc>
    7db4:	mov	w2, w19
    7db8:	mov	x1, x26
    7dbc:	mov	x0, x28
    7dc0:	mov	w3, w20
    7dc4:	mov	w4, w22
    7dc8:	add	w19, w21, #0x1
    7dcc:	bl	1750 <BZ2_hbAssignCodes@plt>
    7dd0:	add	x26, x26, #0x102
    7dd4:	add	x28, x28, #0x408
    7dd8:	cmp	w23, w19
    7ddc:	b.eq	7e88 <BZ2_compressBlock@@Base+0x32e8>  // b.none
    7de0:	mov	w21, w19
    7de4:	b	76c8 <BZ2_compressBlock@@Base+0x2b28>
    7de8:	ldr	x3, [sp, #144]
    7dec:	sxtw	x2, w0
    7df0:	ldr	x4, [sp, #176]
    7df4:	mov	w6, w3
    7df8:	strb	w0, [x4, x3]
    7dfc:	ldr	w4, [sp, #136]
    7e00:	ldr	x3, [sp, #168]
    7e04:	add	w1, w4, w1
    7e08:	str	w1, [sp, #136]
    7e0c:	ldr	w1, [sp, #112]
    7e10:	cmp	w1, #0x6
    7e14:	ldr	w1, [x3, x2, lsl #2]
    7e18:	add	w1, w1, #0x1
    7e1c:	str	w1, [x3, x2, lsl #2]
    7e20:	b.ne	74c8 <BZ2_compressBlock@@Base+0x2928>  // b.any
    7e24:	b	6c6c <BZ2_compressBlock@@Base+0x20cc>
    7e28:	mov	w2, #0x1                   	// #1
    7e2c:	mov	w9, w2
    7e30:	mov	w8, w2
    7e34:	b	7400 <BZ2_compressBlock@@Base+0x2860>
    7e38:	mov	w9, #0x1                   	// #1
    7e3c:	mov	w8, w9
    7e40:	b	7400 <BZ2_compressBlock@@Base+0x2860>
    7e44:	ldrh	w1, [sp, #704]
    7e48:	b	6ba4 <BZ2_compressBlock@@Base+0x2004>
    7e4c:	mov	w3, w28
    7e50:	b	7388 <BZ2_compressBlock@@Base+0x27e8>
    7e54:	mov	w7, w2
    7e58:	mov	w1, #0x1                   	// #1
    7e5c:	mov	w2, w5
    7e60:	mov	w5, w4
    7e64:	mov	w4, w3
    7e68:	mov	w3, w7
    7e6c:	b	764c <BZ2_compressBlock@@Base+0x2aac>
    7e70:	mov	w0, #0xbbc                 	// #3004
    7e74:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    7e78:	cbnz	w19, 7db4 <BZ2_compressBlock@@Base+0x3214>
    7e7c:	mov	w0, #0xbbd                 	// #3005
    7e80:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    7e84:	b	7db4 <BZ2_compressBlock@@Base+0x3214>
    7e88:	add	x2, sp, #0x200
    7e8c:	add	x4, sp, #0x2d0
    7e90:	mov	w26, w21
    7e94:	ldr	w28, [sp, #112]
    7e98:	ldr	x21, [sp, #120]
    7e9c:	stp	xzr, xzr, [x2, #208]
    7ea0:	mov	x6, x4
    7ea4:	ldr	x2, [sp, #664]
    7ea8:	add	x7, x4, #0x10
    7eac:	mov	x0, x4
    7eb0:	mov	w1, #0x1                   	// #1
    7eb4:	nop
    7eb8:	ldrb	w3, [x2]
    7ebc:	cbz	w3, 7ec4 <BZ2_compressBlock@@Base+0x3324>
    7ec0:	strb	w1, [x0]
    7ec4:	ldrb	w3, [x2, #1]
    7ec8:	cbz	w3, 7ed0 <BZ2_compressBlock@@Base+0x3330>
    7ecc:	strb	w1, [x0]
    7ed0:	ldrb	w3, [x2, #2]
    7ed4:	cbz	w3, 7edc <BZ2_compressBlock@@Base+0x333c>
    7ed8:	strb	w1, [x0]
    7edc:	ldrb	w3, [x2, #3]
    7ee0:	cbz	w3, 7ee8 <BZ2_compressBlock@@Base+0x3348>
    7ee4:	strb	w1, [x0]
    7ee8:	ldrb	w3, [x2, #4]
    7eec:	cbz	w3, 7ef4 <BZ2_compressBlock@@Base+0x3354>
    7ef0:	strb	w1, [x0]
    7ef4:	ldrb	w3, [x2, #5]
    7ef8:	cbz	w3, 7f00 <BZ2_compressBlock@@Base+0x3360>
    7efc:	strb	w1, [x0]
    7f00:	ldrb	w3, [x2, #6]
    7f04:	cbz	w3, 7f0c <BZ2_compressBlock@@Base+0x336c>
    7f08:	strb	w1, [x0]
    7f0c:	ldrb	w3, [x2, #7]
    7f10:	cbz	w3, 7f18 <BZ2_compressBlock@@Base+0x3378>
    7f14:	strb	w1, [x0]
    7f18:	ldrb	w3, [x2, #8]
    7f1c:	cbz	w3, 7f24 <BZ2_compressBlock@@Base+0x3384>
    7f20:	strb	w1, [x0]
    7f24:	ldrb	w3, [x2, #9]
    7f28:	cbz	w3, 7f30 <BZ2_compressBlock@@Base+0x3390>
    7f2c:	strb	w1, [x0]
    7f30:	ldrb	w3, [x2, #10]
    7f34:	cbz	w3, 7f3c <BZ2_compressBlock@@Base+0x339c>
    7f38:	strb	w1, [x0]
    7f3c:	ldrb	w3, [x2, #11]
    7f40:	cbz	w3, 7f48 <BZ2_compressBlock@@Base+0x33a8>
    7f44:	strb	w1, [x0]
    7f48:	ldrb	w3, [x2, #12]
    7f4c:	cbz	w3, 7f54 <BZ2_compressBlock@@Base+0x33b4>
    7f50:	strb	w1, [x0]
    7f54:	ldrb	w3, [x2, #13]
    7f58:	cbz	w3, 7f60 <BZ2_compressBlock@@Base+0x33c0>
    7f5c:	strb	w1, [x0]
    7f60:	ldrb	w3, [x2, #14]
    7f64:	cbz	w3, 7f6c <BZ2_compressBlock@@Base+0x33cc>
    7f68:	strb	w1, [x0]
    7f6c:	ldrb	w3, [x2, #15]
    7f70:	cbz	w3, 7f78 <BZ2_compressBlock@@Base+0x33d8>
    7f74:	strb	w1, [x0]
    7f78:	add	x0, x0, #0x1
    7f7c:	add	x2, x2, #0x10
    7f80:	cmp	x7, x0
    7f84:	b.ne	7eb8 <BZ2_compressBlock@@Base+0x3318>  // b.any
    7f88:	ldr	w5, [x24, #116]
    7f8c:	mov	w8, #0x80000000            	// #-2147483648
    7f90:	ldr	w0, [x24, #644]
    7f94:	mov	w1, w5
    7f98:	ldrb	w2, [x6]
    7f9c:	cmp	w0, #0x7
    7fa0:	cbnz	w2, 80f8 <BZ2_compressBlock@@Base+0x3558>
    7fa4:	b.le	7fe8 <BZ2_compressBlock@@Base+0x3448>
    7fa8:	ldr	w2, [x24, #640]
    7fac:	nop
    7fb0:	ldr	x0, [x24, #80]
    7fb4:	lsr	w2, w2, #24
    7fb8:	strb	w2, [x0, w1, sxtw]
    7fbc:	ldr	w2, [x24, #640]
    7fc0:	ldr	w1, [x24, #116]
    7fc4:	ldr	w0, [x24, #644]
    7fc8:	lsl	w2, w2, #8
    7fcc:	add	w1, w1, #0x1
    7fd0:	sub	w0, w0, #0x8
    7fd4:	str	w1, [x24, #116]
    7fd8:	str	w2, [x24, #640]
    7fdc:	cmp	w0, #0x7
    7fe0:	str	w0, [x24, #644]
    7fe4:	b.gt	7fb0 <BZ2_compressBlock@@Base+0x3410>
    7fe8:	add	w0, w0, #0x1
    7fec:	str	w0, [x24, #644]
    7ff0:	add	x6, x6, #0x1
    7ff4:	cmp	x7, x6
    7ff8:	b.ne	7f98 <BZ2_compressBlock@@Base+0x33f8>  // b.any
    7ffc:	add	x8, x24, #0x90
    8000:	mov	x7, #0x1                   	// #1
    8004:	mov	w9, #0x80000000            	// #-2147483648
    8008:	b	801c <BZ2_compressBlock@@Base+0x347c>
    800c:	add	x7, x7, #0x1
    8010:	add	x8, x8, #0x10
    8014:	cmp	x7, #0x11
    8018:	b.eq	8150 <BZ2_compressBlock@@Base+0x35b0>  // b.none
    801c:	add	x0, x4, x7
    8020:	ldurb	w0, [x0, #-1]
    8024:	cbz	w0, 800c <BZ2_compressBlock@@Base+0x346c>
    8028:	ldurb	w2, [x8, #-16]
    802c:	sub	x3, x8, #0x10
    8030:	ldr	w0, [x24, #644]
    8034:	cmp	w0, #0x7
    8038:	cbnz	w2, 80a0 <BZ2_compressBlock@@Base+0x3500>
    803c:	nop
    8040:	b.le	8080 <BZ2_compressBlock@@Base+0x34e0>
    8044:	ldr	w2, [x24, #640]
    8048:	ldr	x0, [x24, #80]
    804c:	lsr	w2, w2, #24
    8050:	strb	w2, [x0, w1, sxtw]
    8054:	ldr	w2, [x24, #640]
    8058:	ldr	w1, [x24, #116]
    805c:	ldr	w0, [x24, #644]
    8060:	lsl	w2, w2, #8
    8064:	add	w1, w1, #0x1
    8068:	sub	w0, w0, #0x8
    806c:	str	w1, [x24, #116]
    8070:	str	w2, [x24, #640]
    8074:	cmp	w0, #0x7
    8078:	str	w0, [x24, #644]
    807c:	b.gt	8048 <BZ2_compressBlock@@Base+0x34a8>
    8080:	add	w0, w0, #0x1
    8084:	str	w0, [x24, #644]
    8088:	add	x3, x3, #0x1
    808c:	cmp	x8, x3
    8090:	b.eq	800c <BZ2_compressBlock@@Base+0x346c>  // b.none
    8094:	ldrb	w2, [x3]
    8098:	cmp	w0, #0x7
    809c:	cbz	w2, 8040 <BZ2_compressBlock@@Base+0x34a0>
    80a0:	ldr	w2, [x24, #640]
    80a4:	b.le	80e0 <BZ2_compressBlock@@Base+0x3540>
    80a8:	ldr	x0, [x24, #80]
    80ac:	lsr	w2, w2, #24
    80b0:	strb	w2, [x0, w1, sxtw]
    80b4:	ldr	w2, [x24, #640]
    80b8:	ldr	w1, [x24, #116]
    80bc:	ldr	w0, [x24, #644]
    80c0:	lsl	w2, w2, #8
    80c4:	add	w1, w1, #0x1
    80c8:	sub	w0, w0, #0x8
    80cc:	str	w1, [x24, #116]
    80d0:	str	w2, [x24, #640]
    80d4:	cmp	w0, #0x7
    80d8:	str	w0, [x24, #644]
    80dc:	b.gt	80a8 <BZ2_compressBlock@@Base+0x3508>
    80e0:	lsr	w6, w9, w0
    80e4:	add	w0, w0, #0x1
    80e8:	orr	w2, w6, w2
    80ec:	str	w2, [x24, #640]
    80f0:	str	w0, [x24, #644]
    80f4:	b	8088 <BZ2_compressBlock@@Base+0x34e8>
    80f8:	ldr	w2, [x24, #640]
    80fc:	b.le	8138 <BZ2_compressBlock@@Base+0x3598>
    8100:	ldr	x0, [x24, #80]
    8104:	lsr	w2, w2, #24
    8108:	strb	w2, [x0, w1, sxtw]
    810c:	ldr	w2, [x24, #640]
    8110:	ldr	w1, [x24, #116]
    8114:	ldr	w0, [x24, #644]
    8118:	lsl	w2, w2, #8
    811c:	add	w1, w1, #0x1
    8120:	sub	w0, w0, #0x8
    8124:	str	w1, [x24, #116]
    8128:	str	w2, [x24, #640]
    812c:	cmp	w0, #0x7
    8130:	str	w0, [x24, #644]
    8134:	b.gt	8100 <BZ2_compressBlock@@Base+0x3560>
    8138:	lsr	w3, w8, w0
    813c:	add	w0, w0, #0x1
    8140:	orr	w2, w3, w2
    8144:	str	w2, [x24, #640]
    8148:	str	w0, [x24, #644]
    814c:	b	7ff0 <BZ2_compressBlock@@Base+0x3450>
    8150:	ldr	w0, [x24, #656]
    8154:	cmp	w0, #0x2
    8158:	b.gt	a584 <BZ2_compressBlock@@Base+0x59e4>
    815c:	ldr	w0, [x24, #644]
    8160:	mov	w4, w1
    8164:	ldr	w5, [x24, #640]
    8168:	cmp	w0, #0x7
    816c:	b.le	81a8 <BZ2_compressBlock@@Base+0x3608>
    8170:	ldr	x0, [x24, #80]
    8174:	lsr	w5, w5, #24
    8178:	strb	w5, [x0, w4, sxtw]
    817c:	ldr	w5, [x24, #640]
    8180:	ldr	w4, [x24, #116]
    8184:	ldr	w0, [x24, #644]
    8188:	lsl	w5, w5, #8
    818c:	add	w4, w4, #0x1
    8190:	sub	w0, w0, #0x8
    8194:	str	w4, [x24, #116]
    8198:	str	w5, [x24, #640]
    819c:	cmp	w0, #0x7
    81a0:	str	w0, [x24, #644]
    81a4:	b.gt	8170 <BZ2_compressBlock@@Base+0x35d0>
    81a8:	ldr	w2, [sp, #684]
    81ac:	mov	w3, #0x1d                  	// #29
    81b0:	sub	w3, w3, w0
    81b4:	add	w0, w0, #0x3
    81b8:	str	w0, [x24, #644]
    81bc:	cmp	w0, #0x7
    81c0:	lsl	w3, w2, w3
    81c4:	orr	w3, w3, w5
    81c8:	str	w3, [x24, #640]
    81cc:	b.le	8208 <BZ2_compressBlock@@Base+0x3668>
    81d0:	ldr	x0, [x24, #80]
    81d4:	lsr	w3, w3, #24
    81d8:	strb	w3, [x0, w4, sxtw]
    81dc:	ldr	w3, [x24, #640]
    81e0:	ldr	w4, [x24, #116]
    81e4:	ldr	w0, [x24, #644]
    81e8:	lsl	w3, w3, #8
    81ec:	add	w4, w4, #0x1
    81f0:	sub	w0, w0, #0x8
    81f4:	str	w4, [x24, #116]
    81f8:	str	w3, [x24, #640]
    81fc:	cmp	w0, #0x7
    8200:	str	w0, [x24, #644]
    8204:	b.gt	81d0 <BZ2_compressBlock@@Base+0x3630>
    8208:	mov	w2, #0x11                  	// #17
    820c:	sub	w2, w2, w0
    8210:	add	w0, w0, #0xf
    8214:	str	w0, [x24, #644]
    8218:	lsl	w2, w28, w2
    821c:	orr	w3, w2, w3
    8220:	str	w3, [x24, #640]
    8224:	cbz	w28, 8314 <BZ2_compressBlock@@Base+0x3774>
    8228:	sub	w8, w28, #0x1
    822c:	mov	x2, #0x4cfb                	// #19707
    8230:	add	x2, x24, x2
    8234:	mov	x3, #0x4cfa                	// #19706
    8238:	add	x8, x8, x2
    823c:	add	x6, x24, x3
    8240:	mov	w9, #0x80000000            	// #-2147483648
    8244:	nop
    8248:	ldrb	w3, [x6]
    824c:	cbz	w3, 82bc <BZ2_compressBlock@@Base+0x371c>
    8250:	ldr	w2, [x24, #640]
    8254:	mov	w5, #0x0                   	// #0
    8258:	cmp	w0, #0x7
    825c:	b.le	829c <BZ2_compressBlock@@Base+0x36fc>
    8260:	ldr	x0, [x24, #80]
    8264:	lsr	w2, w2, #24
    8268:	strb	w2, [x0, w4, sxtw]
    826c:	ldr	w2, [x24, #640]
    8270:	ldr	w4, [x24, #116]
    8274:	ldr	w0, [x24, #644]
    8278:	lsl	w2, w2, #8
    827c:	add	w4, w4, #0x1
    8280:	sub	w0, w0, #0x8
    8284:	str	w4, [x24, #116]
    8288:	str	w2, [x24, #640]
    828c:	cmp	w0, #0x7
    8290:	str	w0, [x24, #644]
    8294:	b.gt	8260 <BZ2_compressBlock@@Base+0x36c0>
    8298:	ldrb	w3, [x6]
    829c:	lsr	w7, w9, w0
    82a0:	add	w0, w0, #0x1
    82a4:	orr	w2, w2, w7
    82a8:	str	w2, [x24, #640]
    82ac:	str	w0, [x24, #644]
    82b0:	add	w5, w5, #0x1
    82b4:	cmp	w5, w3
    82b8:	b.lt	8258 <BZ2_compressBlock@@Base+0x36b8>  // b.tstop
    82bc:	cmp	w0, #0x7
    82c0:	b.le	8300 <BZ2_compressBlock@@Base+0x3760>
    82c4:	ldr	w2, [x24, #640]
    82c8:	ldr	x0, [x24, #80]
    82cc:	lsr	w2, w2, #24
    82d0:	strb	w2, [x0, w4, sxtw]
    82d4:	ldr	w2, [x24, #640]
    82d8:	ldr	w4, [x24, #116]
    82dc:	ldr	w0, [x24, #644]
    82e0:	lsl	w2, w2, #8
    82e4:	add	w4, w4, #0x1
    82e8:	sub	w0, w0, #0x8
    82ec:	str	w4, [x24, #116]
    82f0:	str	w2, [x24, #640]
    82f4:	cmp	w0, #0x7
    82f8:	str	w0, [x24, #644]
    82fc:	b.gt	82c8 <BZ2_compressBlock@@Base+0x3728>
    8300:	add	w0, w0, #0x1
    8304:	str	w0, [x24, #644]
    8308:	add	x6, x6, #0x1
    830c:	cmp	x6, x8
    8310:	b.ne	8248 <BZ2_compressBlock@@Base+0x36a8>  // b.any
    8314:	ldr	w2, [x24, #656]
    8318:	cmp	w2, #0x2
    831c:	b.gt	a5f0 <BZ2_compressBlock@@Base+0x5a50>
    8320:	ldr	x2, [sp, #656]
    8324:	mov	w1, #0x102                 	// #258
    8328:	ldr	x3, [sp, #672]
    832c:	mov	w23, w4
    8330:	umaddl	x12, w26, w1, x2
    8334:	mov	w6, #0x1b                  	// #27
    8338:	mov	w5, #0x1e                  	// #30
    833c:	mov	w8, #0x2                   	// #2
    8340:	mov	w7, #0x3                   	// #3
    8344:	nop
    8348:	ldrb	w2, [x21]
    834c:	cmp	w0, #0x7
    8350:	ldr	w1, [x24, #640]
    8354:	b.le	8390 <BZ2_compressBlock@@Base+0x37f0>
    8358:	ldr	x0, [x24, #80]
    835c:	lsr	w1, w1, #24
    8360:	strb	w1, [x0, w23, sxtw]
    8364:	ldr	w1, [x24, #640]
    8368:	ldr	w23, [x24, #116]
    836c:	ldr	w0, [x24, #644]
    8370:	lsl	w1, w1, #8
    8374:	add	w23, w23, #0x1
    8378:	sub	w0, w0, #0x8
    837c:	str	w23, [x24, #116]
    8380:	str	w1, [x24, #640]
    8384:	cmp	w0, #0x7
    8388:	str	w0, [x24, #644]
    838c:	b.gt	8358 <BZ2_compressBlock@@Base+0x37b8>
    8390:	sub	w9, w6, w0
    8394:	add	w0, w0, #0x5
    8398:	str	w0, [x24, #644]
    839c:	cmp	w22, #0x0
    83a0:	lsl	w9, w2, w9
    83a4:	orr	w1, w9, w1
    83a8:	str	w1, [x24, #640]
    83ac:	mov	x10, x21
    83b0:	add	x11, x21, x3
    83b4:	b.le	8504 <BZ2_compressBlock@@Base+0x3964>
    83b8:	ldrb	w9, [x10]
    83bc:	cmp	w9, w2
    83c0:	b.le	8430 <BZ2_compressBlock@@Base+0x3890>
    83c4:	ldr	w1, [x24, #640]
    83c8:	cmp	w0, #0x7
    83cc:	b.le	840c <BZ2_compressBlock@@Base+0x386c>
    83d0:	ldr	x0, [x24, #80]
    83d4:	lsr	w1, w1, #24
    83d8:	strb	w1, [x0, w23, sxtw]
    83dc:	ldr	w1, [x24, #640]
    83e0:	ldr	w23, [x24, #116]
    83e4:	ldr	w0, [x24, #644]
    83e8:	lsl	w1, w1, #8
    83ec:	add	w23, w23, #0x1
    83f0:	sub	w0, w0, #0x8
    83f4:	str	w23, [x24, #116]
    83f8:	str	w1, [x24, #640]
    83fc:	cmp	w0, #0x7
    8400:	str	w0, [x24, #644]
    8404:	b.gt	83d0 <BZ2_compressBlock@@Base+0x3830>
    8408:	ldrb	w9, [x10]
    840c:	sub	w13, w5, w0
    8410:	add	w0, w0, #0x2
    8414:	str	w0, [x24, #644]
    8418:	add	w2, w2, #0x1
    841c:	lsl	w13, w8, w13
    8420:	orr	w1, w1, w13
    8424:	str	w1, [x24, #640]
    8428:	cmp	w2, w9
    842c:	b.lt	83c8 <BZ2_compressBlock@@Base+0x3828>  // b.tstop
    8430:	cmp	w2, w9
    8434:	b.le	84a8 <BZ2_compressBlock@@Base+0x3908>
    8438:	ldr	w1, [x24, #640]
    843c:	nop
    8440:	cmp	w0, #0x7
    8444:	b.le	8484 <BZ2_compressBlock@@Base+0x38e4>
    8448:	ldr	x0, [x24, #80]
    844c:	lsr	w1, w1, #24
    8450:	strb	w1, [x0, w23, sxtw]
    8454:	ldr	w1, [x24, #640]
    8458:	ldr	w23, [x24, #116]
    845c:	ldr	w0, [x24, #644]
    8460:	lsl	w1, w1, #8
    8464:	add	w23, w23, #0x1
    8468:	sub	w0, w0, #0x8
    846c:	str	w23, [x24, #116]
    8470:	str	w1, [x24, #640]
    8474:	cmp	w0, #0x7
    8478:	str	w0, [x24, #644]
    847c:	b.gt	8448 <BZ2_compressBlock@@Base+0x38a8>
    8480:	ldrb	w9, [x10]
    8484:	sub	w13, w5, w0
    8488:	add	w0, w0, #0x2
    848c:	str	w0, [x24, #644]
    8490:	sub	w2, w2, #0x1
    8494:	lsl	w13, w7, w13
    8498:	orr	w1, w1, w13
    849c:	str	w1, [x24, #640]
    84a0:	cmp	w2, w9
    84a4:	b.gt	8440 <BZ2_compressBlock@@Base+0x38a0>
    84a8:	cmp	w0, #0x7
    84ac:	b.le	84f0 <BZ2_compressBlock@@Base+0x3950>
    84b0:	ldr	w1, [x24, #640]
    84b4:	nop
    84b8:	ldr	x0, [x24, #80]
    84bc:	lsr	w1, w1, #24
    84c0:	strb	w1, [x0, w23, sxtw]
    84c4:	ldr	w1, [x24, #640]
    84c8:	ldr	w23, [x24, #116]
    84cc:	ldr	w0, [x24, #644]
    84d0:	lsl	w1, w1, #8
    84d4:	add	w23, w23, #0x1
    84d8:	sub	w0, w0, #0x8
    84dc:	str	w23, [x24, #116]
    84e0:	str	w1, [x24, #640]
    84e4:	cmp	w0, #0x7
    84e8:	str	w0, [x24, #644]
    84ec:	b.gt	84b8 <BZ2_compressBlock@@Base+0x3918>
    84f0:	add	w0, w0, #0x1
    84f4:	str	w0, [x24, #644]
    84f8:	add	x10, x10, #0x1
    84fc:	cmp	x11, x10
    8500:	b.ne	83b8 <BZ2_compressBlock@@Base+0x3818>  // b.any
    8504:	add	x21, x21, #0x102
    8508:	cmp	x21, x12
    850c:	b.ne	8348 <BZ2_compressBlock@@Base+0x37a8>  // b.any
    8510:	ldr	w0, [x24, #656]
    8514:	cmp	w0, #0x2
    8518:	b.gt	a5cc <BZ2_compressBlock@@Base+0x5a2c>
    851c:	ldr	w0, [x24, #668]
    8520:	cmp	w0, #0x0
    8524:	b.le	5400 <BZ2_compressBlock@@Base+0x860>
    8528:	ldr	w21, [sp, #648]
    852c:	add	x27, x24, #0x6a7
    8530:	str	w23, [sp, #120]
    8534:	mov	x25, #0x1                   	// #1
    8538:	ldr	x23, [sp, #128]
    853c:	mov	x20, #0x2654                	// #9812
    8540:	mov	w22, #0x20                  	// #32
    8544:	str	w28, [sp, #112]
    8548:	add	w28, w21, #0x31
    854c:	add	w26, w21, #0x32
    8550:	cmp	w28, w0
    8554:	b.lt	8560 <BZ2_compressBlock@@Base+0x39c0>  // b.tstop
    8558:	sub	w28, w0, #0x1
    855c:	mov	w26, w0
    8560:	ldrb	w0, [x27, x25]
    8564:	cmp	w19, w0
    8568:	b.le	8654 <BZ2_compressBlock@@Base+0x3ab4>
    856c:	cmp	w19, #0x6
    8570:	b.ne	8580 <BZ2_compressBlock@@Base+0x39e0>  // b.any
    8574:	sub	w0, w28, w21
    8578:	cmp	w0, #0x31
    857c:	b.eq	8660 <BZ2_compressBlock@@Base+0x3ac0>  // b.none
    8580:	cmp	w28, w21
    8584:	b.lt	8638 <BZ2_compressBlock@@Base+0x3a98>  // b.tstop
    8588:	ldr	w2, [x24, #640]
    858c:	sxtw	x21, w21
    8590:	ldr	w0, [x24, #644]
    8594:	nop
    8598:	ldrb	w1, [x27, x25]
    859c:	cmp	w0, #0x7
    85a0:	ldrh	w6, [x23, x21, lsl #1]
    85a4:	add	x1, x1, x1, lsl #7
    85a8:	lsl	x1, x1, #1
    85ac:	add	x4, x1, x6
    85b0:	add	x1, x24, x1
    85b4:	add	x4, x4, x20
    85b8:	add	x1, x1, x6
    85bc:	add	x1, x1, #0x9, lsl #12
    85c0:	add	x4, x24, x4, lsl #2
    85c4:	ldrb	w6, [x1, #844]
    85c8:	ldr	w4, [x4, #8]
    85cc:	b.le	8610 <BZ2_compressBlock@@Base+0x3a70>
    85d0:	ldr	w1, [x24, #116]
    85d4:	nop
    85d8:	ldr	x0, [x24, #80]
    85dc:	lsr	w2, w2, #24
    85e0:	strb	w2, [x0, w1, sxtw]
    85e4:	ldr	w2, [x24, #640]
    85e8:	ldr	w1, [x24, #116]
    85ec:	ldr	w0, [x24, #644]
    85f0:	lsl	w2, w2, #8
    85f4:	add	w1, w1, #0x1
    85f8:	sub	w0, w0, #0x8
    85fc:	str	w1, [x24, #116]
    8600:	str	w2, [x24, #640]
    8604:	cmp	w0, #0x7
    8608:	str	w0, [x24, #644]
    860c:	b.gt	85d8 <BZ2_compressBlock@@Base+0x3a38>
    8610:	sub	w1, w22, w0
    8614:	add	w0, w0, w6
    8618:	sub	w1, w1, w6
    861c:	str	w0, [x24, #644]
    8620:	add	x21, x21, #0x1
    8624:	lsl	w1, w4, w1
    8628:	orr	w2, w2, w1
    862c:	str	w2, [x24, #640]
    8630:	cmp	w28, w21
    8634:	b.ge	8598 <BZ2_compressBlock@@Base+0x39f8>  // b.tcont
    8638:	ldr	w0, [x24, #668]
    863c:	mov	w21, w25
    8640:	add	x25, x25, #0x1
    8644:	cmp	w0, w26
    8648:	b.le	53f4 <BZ2_compressBlock@@Base+0x854>
    864c:	mov	w21, w26
    8650:	b	8548 <BZ2_compressBlock@@Base+0x39a8>
    8654:	mov	w0, #0xbbe                 	// #3006
    8658:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    865c:	b	856c <BZ2_compressBlock@@Base+0x39cc>
    8660:	ldrb	w1, [x27, x25]
    8664:	sbfiz	x0, x21, #1, #32
    8668:	mov	x2, #0x934c                	// #37708
    866c:	mov	x3, #0x9958                	// #39256
    8670:	ldr	w8, [x24, #644]
    8674:	add	x1, x1, x1, lsl #7
    8678:	ldrh	w7, [x23, x0]
    867c:	ldr	w6, [x24, #640]
    8680:	cmp	w8, #0x7
    8684:	add	x2, x2, x1, lsl #1
    8688:	add	x1, x3, x1, lsl #3
    868c:	add	x2, x24, x2
    8690:	add	x1, x24, x1
    8694:	and	x5, x7, #0xffff
    8698:	ldr	w9, [x1, x7, lsl #2]
    869c:	ldrb	w4, [x2, x5]
    86a0:	b.le	86e0 <BZ2_compressBlock@@Base+0x3b40>
    86a4:	ldr	w7, [x24, #116]
    86a8:	ldr	x8, [x24, #80]
    86ac:	lsr	w6, w6, #24
    86b0:	strb	w6, [x8, w7, sxtw]
    86b4:	ldr	w6, [x24, #640]
    86b8:	ldr	w7, [x24, #116]
    86bc:	ldr	w8, [x24, #644]
    86c0:	lsl	w6, w6, #8
    86c4:	add	w7, w7, #0x1
    86c8:	sub	w8, w8, #0x8
    86cc:	str	w7, [x24, #116]
    86d0:	str	w6, [x24, #640]
    86d4:	cmp	w8, #0x7
    86d8:	str	w8, [x24, #644]
    86dc:	b.gt	86a8 <BZ2_compressBlock@@Base+0x3b08>
    86e0:	add	x0, x23, x0
    86e4:	sub	w5, w22, w8
    86e8:	sub	w5, w5, w4
    86ec:	add	w8, w4, w8
    86f0:	cmp	w8, #0x7
    86f4:	ldrh	w4, [x0, #2]
    86f8:	lsl	w7, w9, w5
    86fc:	orr	w5, w7, w6
    8700:	str	w5, [x24, #640]
    8704:	and	x6, x4, #0xffff
    8708:	str	w8, [x24, #644]
    870c:	ldr	w4, [x1, x4, lsl #2]
    8710:	ldrb	w7, [x2, x6]
    8714:	b.le	8758 <BZ2_compressBlock@@Base+0x3bb8>
    8718:	ldr	w9, [x24, #116]
    871c:	nop
    8720:	ldr	x8, [x24, #80]
    8724:	lsr	w6, w5, #24
    8728:	strb	w6, [x8, w9, sxtw]
    872c:	ldr	w6, [x24, #640]
    8730:	ldr	w9, [x24, #116]
    8734:	ldr	w8, [x24, #644]
    8738:	lsl	w5, w6, #8
    873c:	add	w9, w9, #0x1
    8740:	sub	w8, w8, #0x8
    8744:	str	w9, [x24, #116]
    8748:	str	w5, [x24, #640]
    874c:	cmp	w8, #0x7
    8750:	str	w8, [x24, #644]
    8754:	b.gt	8720 <BZ2_compressBlock@@Base+0x3b80>
    8758:	ldrh	w9, [x0, #4]
    875c:	sub	w6, w22, w8
    8760:	sub	w6, w6, w7
    8764:	add	w8, w7, w8
    8768:	and	x7, x9, #0xffff
    876c:	str	w8, [x24, #644]
    8770:	lsl	w6, w4, w6
    8774:	orr	w6, w6, w5
    8778:	str	w6, [x24, #640]
    877c:	cmp	w8, #0x7
    8780:	ldrb	w7, [x2, x7]
    8784:	ldr	w4, [x1, x9, lsl #2]
    8788:	b.le	87c8 <BZ2_compressBlock@@Base+0x3c28>
    878c:	ldr	w5, [x24, #116]
    8790:	ldr	x8, [x24, #80]
    8794:	lsr	w6, w6, #24
    8798:	strb	w6, [x8, w5, sxtw]
    879c:	ldr	w6, [x24, #640]
    87a0:	ldr	w5, [x24, #116]
    87a4:	ldr	w8, [x24, #644]
    87a8:	lsl	w6, w6, #8
    87ac:	add	w5, w5, #0x1
    87b0:	sub	w8, w8, #0x8
    87b4:	str	w5, [x24, #116]
    87b8:	str	w6, [x24, #640]
    87bc:	cmp	w8, #0x7
    87c0:	str	w8, [x24, #644]
    87c4:	b.gt	8790 <BZ2_compressBlock@@Base+0x3bf0>
    87c8:	ldrh	w9, [x0, #6]
    87cc:	sub	w5, w22, w8
    87d0:	sub	w5, w5, w7
    87d4:	add	w8, w7, w8
    87d8:	and	x7, x9, #0xffff
    87dc:	str	w8, [x24, #644]
    87e0:	lsl	w5, w4, w5
    87e4:	orr	w6, w5, w6
    87e8:	str	w6, [x24, #640]
    87ec:	cmp	w8, #0x7
    87f0:	ldrb	w7, [x2, x7]
    87f4:	ldr	w4, [x1, x9, lsl #2]
    87f8:	b.le	8838 <BZ2_compressBlock@@Base+0x3c98>
    87fc:	ldr	w9, [x24, #116]
    8800:	ldr	x8, [x24, #80]
    8804:	lsr	w5, w6, #24
    8808:	strb	w5, [x8, w9, sxtw]
    880c:	ldr	w5, [x24, #640]
    8810:	ldr	w9, [x24, #116]
    8814:	ldr	w8, [x24, #644]
    8818:	lsl	w6, w5, #8
    881c:	add	w9, w9, #0x1
    8820:	sub	w8, w8, #0x8
    8824:	str	w9, [x24, #116]
    8828:	str	w6, [x24, #640]
    882c:	cmp	w8, #0x7
    8830:	str	w8, [x24, #644]
    8834:	b.gt	8800 <BZ2_compressBlock@@Base+0x3c60>
    8838:	ldrh	w9, [x0, #8]
    883c:	sub	w5, w22, w8
    8840:	sub	w5, w5, w7
    8844:	add	w8, w7, w8
    8848:	and	x7, x9, #0xffff
    884c:	str	w8, [x24, #644]
    8850:	lsl	w5, w4, w5
    8854:	orr	w5, w5, w6
    8858:	str	w5, [x24, #640]
    885c:	cmp	w8, #0x7
    8860:	ldrb	w7, [x2, x7]
    8864:	ldr	w4, [x1, x9, lsl #2]
    8868:	b.le	88a8 <BZ2_compressBlock@@Base+0x3d08>
    886c:	ldr	w6, [x24, #116]
    8870:	ldr	x8, [x24, #80]
    8874:	lsr	w5, w5, #24
    8878:	strb	w5, [x8, w6, sxtw]
    887c:	ldr	w5, [x24, #640]
    8880:	ldr	w6, [x24, #116]
    8884:	ldr	w8, [x24, #644]
    8888:	lsl	w5, w5, #8
    888c:	add	w6, w6, #0x1
    8890:	sub	w8, w8, #0x8
    8894:	str	w6, [x24, #116]
    8898:	str	w5, [x24, #640]
    889c:	cmp	w8, #0x7
    88a0:	str	w8, [x24, #644]
    88a4:	b.gt	8870 <BZ2_compressBlock@@Base+0x3cd0>
    88a8:	ldrh	w9, [x0, #10]
    88ac:	sub	w6, w22, w8
    88b0:	sub	w6, w6, w7
    88b4:	add	w8, w7, w8
    88b8:	and	x7, x9, #0xffff
    88bc:	str	w8, [x24, #644]
    88c0:	lsl	w6, w4, w6
    88c4:	orr	w5, w6, w5
    88c8:	str	w5, [x24, #640]
    88cc:	cmp	w8, #0x7
    88d0:	ldrb	w7, [x2, x7]
    88d4:	ldr	w4, [x1, x9, lsl #2]
    88d8:	b.le	8918 <BZ2_compressBlock@@Base+0x3d78>
    88dc:	ldr	w9, [x24, #116]
    88e0:	ldr	x8, [x24, #80]
    88e4:	lsr	w6, w5, #24
    88e8:	strb	w6, [x8, w9, sxtw]
    88ec:	ldr	w6, [x24, #640]
    88f0:	ldr	w9, [x24, #116]
    88f4:	ldr	w8, [x24, #644]
    88f8:	lsl	w5, w6, #8
    88fc:	add	w9, w9, #0x1
    8900:	sub	w8, w8, #0x8
    8904:	str	w9, [x24, #116]
    8908:	str	w5, [x24, #640]
    890c:	cmp	w8, #0x7
    8910:	str	w8, [x24, #644]
    8914:	b.gt	88e0 <BZ2_compressBlock@@Base+0x3d40>
    8918:	ldrh	w9, [x0, #12]
    891c:	sub	w6, w22, w8
    8920:	sub	w6, w6, w7
    8924:	add	w8, w7, w8
    8928:	and	x7, x9, #0xffff
    892c:	str	w8, [x24, #644]
    8930:	lsl	w6, w4, w6
    8934:	orr	w6, w6, w5
    8938:	str	w6, [x24, #640]
    893c:	cmp	w8, #0x7
    8940:	ldrb	w7, [x2, x7]
    8944:	ldr	w4, [x1, x9, lsl #2]
    8948:	b.le	8988 <BZ2_compressBlock@@Base+0x3de8>
    894c:	ldr	w5, [x24, #116]
    8950:	ldr	x8, [x24, #80]
    8954:	lsr	w6, w6, #24
    8958:	strb	w6, [x8, w5, sxtw]
    895c:	ldr	w6, [x24, #640]
    8960:	ldr	w5, [x24, #116]
    8964:	ldr	w8, [x24, #644]
    8968:	lsl	w6, w6, #8
    896c:	add	w5, w5, #0x1
    8970:	sub	w8, w8, #0x8
    8974:	str	w5, [x24, #116]
    8978:	str	w6, [x24, #640]
    897c:	cmp	w8, #0x7
    8980:	str	w8, [x24, #644]
    8984:	b.gt	8950 <BZ2_compressBlock@@Base+0x3db0>
    8988:	ldrh	w9, [x0, #14]
    898c:	sub	w5, w22, w8
    8990:	sub	w5, w5, w7
    8994:	add	w8, w7, w8
    8998:	and	x7, x9, #0xffff
    899c:	str	w8, [x24, #644]
    89a0:	lsl	w5, w4, w5
    89a4:	orr	w6, w5, w6
    89a8:	str	w6, [x24, #640]
    89ac:	cmp	w8, #0x7
    89b0:	ldrb	w7, [x2, x7]
    89b4:	ldr	w4, [x1, x9, lsl #2]
    89b8:	b.le	89f8 <BZ2_compressBlock@@Base+0x3e58>
    89bc:	ldr	w9, [x24, #116]
    89c0:	ldr	x8, [x24, #80]
    89c4:	lsr	w5, w6, #24
    89c8:	strb	w5, [x8, w9, sxtw]
    89cc:	ldr	w5, [x24, #640]
    89d0:	ldr	w9, [x24, #116]
    89d4:	ldr	w8, [x24, #644]
    89d8:	lsl	w6, w5, #8
    89dc:	add	w9, w9, #0x1
    89e0:	sub	w8, w8, #0x8
    89e4:	str	w9, [x24, #116]
    89e8:	str	w6, [x24, #640]
    89ec:	cmp	w8, #0x7
    89f0:	str	w8, [x24, #644]
    89f4:	b.gt	89c0 <BZ2_compressBlock@@Base+0x3e20>
    89f8:	ldrh	w9, [x0, #16]
    89fc:	sub	w5, w22, w8
    8a00:	sub	w5, w5, w7
    8a04:	add	w8, w7, w8
    8a08:	and	x7, x9, #0xffff
    8a0c:	str	w8, [x24, #644]
    8a10:	lsl	w5, w4, w5
    8a14:	orr	w5, w5, w6
    8a18:	str	w5, [x24, #640]
    8a1c:	cmp	w8, #0x7
    8a20:	ldrb	w7, [x2, x7]
    8a24:	ldr	w4, [x1, x9, lsl #2]
    8a28:	b.le	8a68 <BZ2_compressBlock@@Base+0x3ec8>
    8a2c:	ldr	w6, [x24, #116]
    8a30:	ldr	x8, [x24, #80]
    8a34:	lsr	w5, w5, #24
    8a38:	strb	w5, [x8, w6, sxtw]
    8a3c:	ldr	w5, [x24, #640]
    8a40:	ldr	w6, [x24, #116]
    8a44:	ldr	w8, [x24, #644]
    8a48:	lsl	w5, w5, #8
    8a4c:	add	w6, w6, #0x1
    8a50:	sub	w8, w8, #0x8
    8a54:	str	w6, [x24, #116]
    8a58:	str	w5, [x24, #640]
    8a5c:	cmp	w8, #0x7
    8a60:	str	w8, [x24, #644]
    8a64:	b.gt	8a30 <BZ2_compressBlock@@Base+0x3e90>
    8a68:	ldrh	w9, [x0, #18]
    8a6c:	sub	w6, w22, w8
    8a70:	sub	w6, w6, w7
    8a74:	add	w8, w7, w8
    8a78:	and	x7, x9, #0xffff
    8a7c:	str	w8, [x24, #644]
    8a80:	lsl	w6, w4, w6
    8a84:	orr	w5, w6, w5
    8a88:	str	w5, [x24, #640]
    8a8c:	cmp	w8, #0x7
    8a90:	ldrb	w7, [x2, x7]
    8a94:	ldr	w4, [x1, x9, lsl #2]
    8a98:	b.le	8ad8 <BZ2_compressBlock@@Base+0x3f38>
    8a9c:	ldr	w9, [x24, #116]
    8aa0:	ldr	x8, [x24, #80]
    8aa4:	lsr	w6, w5, #24
    8aa8:	strb	w6, [x8, w9, sxtw]
    8aac:	ldr	w6, [x24, #640]
    8ab0:	ldr	w9, [x24, #116]
    8ab4:	ldr	w8, [x24, #644]
    8ab8:	lsl	w5, w6, #8
    8abc:	add	w9, w9, #0x1
    8ac0:	sub	w8, w8, #0x8
    8ac4:	str	w9, [x24, #116]
    8ac8:	str	w5, [x24, #640]
    8acc:	cmp	w8, #0x7
    8ad0:	str	w8, [x24, #644]
    8ad4:	b.gt	8aa0 <BZ2_compressBlock@@Base+0x3f00>
    8ad8:	ldrh	w9, [x0, #20]
    8adc:	sub	w6, w22, w8
    8ae0:	sub	w6, w6, w7
    8ae4:	add	w8, w7, w8
    8ae8:	and	x7, x9, #0xffff
    8aec:	str	w8, [x24, #644]
    8af0:	lsl	w6, w4, w6
    8af4:	orr	w6, w6, w5
    8af8:	str	w6, [x24, #640]
    8afc:	cmp	w8, #0x7
    8b00:	ldrb	w7, [x2, x7]
    8b04:	ldr	w4, [x1, x9, lsl #2]
    8b08:	b.le	8b48 <BZ2_compressBlock@@Base+0x3fa8>
    8b0c:	ldr	w5, [x24, #116]
    8b10:	ldr	x8, [x24, #80]
    8b14:	lsr	w6, w6, #24
    8b18:	strb	w6, [x8, w5, sxtw]
    8b1c:	ldr	w6, [x24, #640]
    8b20:	ldr	w5, [x24, #116]
    8b24:	ldr	w8, [x24, #644]
    8b28:	lsl	w6, w6, #8
    8b2c:	add	w5, w5, #0x1
    8b30:	sub	w8, w8, #0x8
    8b34:	str	w5, [x24, #116]
    8b38:	str	w6, [x24, #640]
    8b3c:	cmp	w8, #0x7
    8b40:	str	w8, [x24, #644]
    8b44:	b.gt	8b10 <BZ2_compressBlock@@Base+0x3f70>
    8b48:	ldrh	w9, [x0, #22]
    8b4c:	sub	w5, w22, w8
    8b50:	sub	w5, w5, w7
    8b54:	add	w8, w7, w8
    8b58:	and	x7, x9, #0xffff
    8b5c:	str	w8, [x24, #644]
    8b60:	lsl	w5, w4, w5
    8b64:	orr	w6, w5, w6
    8b68:	str	w6, [x24, #640]
    8b6c:	cmp	w8, #0x7
    8b70:	ldrb	w7, [x2, x7]
    8b74:	ldr	w4, [x1, x9, lsl #2]
    8b78:	b.le	8bb8 <BZ2_compressBlock@@Base+0x4018>
    8b7c:	ldr	w9, [x24, #116]
    8b80:	ldr	x8, [x24, #80]
    8b84:	lsr	w5, w6, #24
    8b88:	strb	w5, [x8, w9, sxtw]
    8b8c:	ldr	w5, [x24, #640]
    8b90:	ldr	w9, [x24, #116]
    8b94:	ldr	w8, [x24, #644]
    8b98:	lsl	w6, w5, #8
    8b9c:	add	w9, w9, #0x1
    8ba0:	sub	w8, w8, #0x8
    8ba4:	str	w9, [x24, #116]
    8ba8:	str	w6, [x24, #640]
    8bac:	cmp	w8, #0x7
    8bb0:	str	w8, [x24, #644]
    8bb4:	b.gt	8b80 <BZ2_compressBlock@@Base+0x3fe0>
    8bb8:	ldrh	w9, [x0, #24]
    8bbc:	sub	w5, w22, w8
    8bc0:	sub	w5, w5, w7
    8bc4:	add	w8, w7, w8
    8bc8:	and	x7, x9, #0xffff
    8bcc:	str	w8, [x24, #644]
    8bd0:	lsl	w5, w4, w5
    8bd4:	orr	w5, w5, w6
    8bd8:	str	w5, [x24, #640]
    8bdc:	cmp	w8, #0x7
    8be0:	ldrb	w7, [x2, x7]
    8be4:	ldr	w4, [x1, x9, lsl #2]
    8be8:	b.le	8c28 <BZ2_compressBlock@@Base+0x4088>
    8bec:	ldr	w6, [x24, #116]
    8bf0:	ldr	x8, [x24, #80]
    8bf4:	lsr	w5, w5, #24
    8bf8:	strb	w5, [x8, w6, sxtw]
    8bfc:	ldr	w5, [x24, #640]
    8c00:	ldr	w6, [x24, #116]
    8c04:	ldr	w8, [x24, #644]
    8c08:	lsl	w5, w5, #8
    8c0c:	add	w6, w6, #0x1
    8c10:	sub	w8, w8, #0x8
    8c14:	str	w6, [x24, #116]
    8c18:	str	w5, [x24, #640]
    8c1c:	cmp	w8, #0x7
    8c20:	str	w8, [x24, #644]
    8c24:	b.gt	8bf0 <BZ2_compressBlock@@Base+0x4050>
    8c28:	ldrh	w9, [x0, #26]
    8c2c:	sub	w6, w22, w8
    8c30:	sub	w6, w6, w7
    8c34:	add	w8, w7, w8
    8c38:	and	x7, x9, #0xffff
    8c3c:	str	w8, [x24, #644]
    8c40:	lsl	w6, w4, w6
    8c44:	orr	w5, w6, w5
    8c48:	str	w5, [x24, #640]
    8c4c:	cmp	w8, #0x7
    8c50:	ldrb	w7, [x2, x7]
    8c54:	ldr	w4, [x1, x9, lsl #2]
    8c58:	b.le	8c98 <BZ2_compressBlock@@Base+0x40f8>
    8c5c:	ldr	w9, [x24, #116]
    8c60:	ldr	x8, [x24, #80]
    8c64:	lsr	w6, w5, #24
    8c68:	strb	w6, [x8, w9, sxtw]
    8c6c:	ldr	w6, [x24, #640]
    8c70:	ldr	w9, [x24, #116]
    8c74:	ldr	w8, [x24, #644]
    8c78:	lsl	w5, w6, #8
    8c7c:	add	w9, w9, #0x1
    8c80:	sub	w8, w8, #0x8
    8c84:	str	w9, [x24, #116]
    8c88:	str	w5, [x24, #640]
    8c8c:	cmp	w8, #0x7
    8c90:	str	w8, [x24, #644]
    8c94:	b.gt	8c60 <BZ2_compressBlock@@Base+0x40c0>
    8c98:	ldrh	w9, [x0, #28]
    8c9c:	sub	w6, w22, w8
    8ca0:	sub	w6, w6, w7
    8ca4:	add	w8, w7, w8
    8ca8:	and	x7, x9, #0xffff
    8cac:	str	w8, [x24, #644]
    8cb0:	lsl	w6, w4, w6
    8cb4:	orr	w6, w6, w5
    8cb8:	str	w6, [x24, #640]
    8cbc:	cmp	w8, #0x7
    8cc0:	ldrb	w7, [x2, x7]
    8cc4:	ldr	w4, [x1, x9, lsl #2]
    8cc8:	b.le	8d08 <BZ2_compressBlock@@Base+0x4168>
    8ccc:	ldr	w5, [x24, #116]
    8cd0:	ldr	x8, [x24, #80]
    8cd4:	lsr	w6, w6, #24
    8cd8:	strb	w6, [x8, w5, sxtw]
    8cdc:	ldr	w6, [x24, #640]
    8ce0:	ldr	w5, [x24, #116]
    8ce4:	ldr	w8, [x24, #644]
    8ce8:	lsl	w6, w6, #8
    8cec:	add	w5, w5, #0x1
    8cf0:	sub	w8, w8, #0x8
    8cf4:	str	w5, [x24, #116]
    8cf8:	str	w6, [x24, #640]
    8cfc:	cmp	w8, #0x7
    8d00:	str	w8, [x24, #644]
    8d04:	b.gt	8cd0 <BZ2_compressBlock@@Base+0x4130>
    8d08:	ldrh	w9, [x0, #30]
    8d0c:	sub	w5, w22, w8
    8d10:	sub	w5, w5, w7
    8d14:	add	w8, w7, w8
    8d18:	and	x7, x9, #0xffff
    8d1c:	str	w8, [x24, #644]
    8d20:	lsl	w5, w4, w5
    8d24:	orr	w6, w5, w6
    8d28:	str	w6, [x24, #640]
    8d2c:	cmp	w8, #0x7
    8d30:	ldrb	w7, [x2, x7]
    8d34:	ldr	w4, [x1, x9, lsl #2]
    8d38:	b.le	8d78 <BZ2_compressBlock@@Base+0x41d8>
    8d3c:	ldr	w9, [x24, #116]
    8d40:	ldr	x8, [x24, #80]
    8d44:	lsr	w5, w6, #24
    8d48:	strb	w5, [x8, w9, sxtw]
    8d4c:	ldr	w5, [x24, #640]
    8d50:	ldr	w9, [x24, #116]
    8d54:	ldr	w8, [x24, #644]
    8d58:	lsl	w6, w5, #8
    8d5c:	add	w9, w9, #0x1
    8d60:	sub	w8, w8, #0x8
    8d64:	str	w9, [x24, #116]
    8d68:	str	w6, [x24, #640]
    8d6c:	cmp	w8, #0x7
    8d70:	str	w8, [x24, #644]
    8d74:	b.gt	8d40 <BZ2_compressBlock@@Base+0x41a0>
    8d78:	ldrh	w9, [x0, #32]
    8d7c:	sub	w5, w22, w8
    8d80:	sub	w5, w5, w7
    8d84:	add	w8, w7, w8
    8d88:	and	x7, x9, #0xffff
    8d8c:	str	w8, [x24, #644]
    8d90:	lsl	w5, w4, w5
    8d94:	orr	w5, w5, w6
    8d98:	str	w5, [x24, #640]
    8d9c:	cmp	w8, #0x7
    8da0:	ldrb	w7, [x2, x7]
    8da4:	ldr	w4, [x1, x9, lsl #2]
    8da8:	b.le	8de8 <BZ2_compressBlock@@Base+0x4248>
    8dac:	ldr	w6, [x24, #116]
    8db0:	ldr	x8, [x24, #80]
    8db4:	lsr	w5, w5, #24
    8db8:	strb	w5, [x8, w6, sxtw]
    8dbc:	ldr	w5, [x24, #640]
    8dc0:	ldr	w6, [x24, #116]
    8dc4:	ldr	w8, [x24, #644]
    8dc8:	lsl	w5, w5, #8
    8dcc:	add	w6, w6, #0x1
    8dd0:	sub	w8, w8, #0x8
    8dd4:	str	w6, [x24, #116]
    8dd8:	str	w5, [x24, #640]
    8ddc:	cmp	w8, #0x7
    8de0:	str	w8, [x24, #644]
    8de4:	b.gt	8db0 <BZ2_compressBlock@@Base+0x4210>
    8de8:	ldrh	w9, [x0, #34]
    8dec:	sub	w6, w22, w8
    8df0:	sub	w6, w6, w7
    8df4:	add	w8, w7, w8
    8df8:	and	x7, x9, #0xffff
    8dfc:	str	w8, [x24, #644]
    8e00:	lsl	w6, w4, w6
    8e04:	orr	w5, w6, w5
    8e08:	str	w5, [x24, #640]
    8e0c:	cmp	w8, #0x7
    8e10:	ldrb	w7, [x2, x7]
    8e14:	ldr	w4, [x1, x9, lsl #2]
    8e18:	b.le	8e58 <BZ2_compressBlock@@Base+0x42b8>
    8e1c:	ldr	w9, [x24, #116]
    8e20:	ldr	x8, [x24, #80]
    8e24:	lsr	w6, w5, #24
    8e28:	strb	w6, [x8, w9, sxtw]
    8e2c:	ldr	w6, [x24, #640]
    8e30:	ldr	w9, [x24, #116]
    8e34:	ldr	w8, [x24, #644]
    8e38:	lsl	w5, w6, #8
    8e3c:	add	w9, w9, #0x1
    8e40:	sub	w8, w8, #0x8
    8e44:	str	w9, [x24, #116]
    8e48:	str	w5, [x24, #640]
    8e4c:	cmp	w8, #0x7
    8e50:	str	w8, [x24, #644]
    8e54:	b.gt	8e20 <BZ2_compressBlock@@Base+0x4280>
    8e58:	ldrh	w9, [x0, #36]
    8e5c:	sub	w6, w22, w8
    8e60:	sub	w6, w6, w7
    8e64:	add	w8, w7, w8
    8e68:	and	x7, x9, #0xffff
    8e6c:	str	w8, [x24, #644]
    8e70:	lsl	w6, w4, w6
    8e74:	orr	w6, w6, w5
    8e78:	str	w6, [x24, #640]
    8e7c:	cmp	w8, #0x7
    8e80:	ldrb	w7, [x2, x7]
    8e84:	ldr	w4, [x1, x9, lsl #2]
    8e88:	b.le	8ec8 <BZ2_compressBlock@@Base+0x4328>
    8e8c:	ldr	w5, [x24, #116]
    8e90:	ldr	x8, [x24, #80]
    8e94:	lsr	w6, w6, #24
    8e98:	strb	w6, [x8, w5, sxtw]
    8e9c:	ldr	w6, [x24, #640]
    8ea0:	ldr	w5, [x24, #116]
    8ea4:	ldr	w8, [x24, #644]
    8ea8:	lsl	w6, w6, #8
    8eac:	add	w5, w5, #0x1
    8eb0:	sub	w8, w8, #0x8
    8eb4:	str	w5, [x24, #116]
    8eb8:	str	w6, [x24, #640]
    8ebc:	cmp	w8, #0x7
    8ec0:	str	w8, [x24, #644]
    8ec4:	b.gt	8e90 <BZ2_compressBlock@@Base+0x42f0>
    8ec8:	ldrh	w9, [x0, #38]
    8ecc:	sub	w5, w22, w8
    8ed0:	sub	w5, w5, w7
    8ed4:	add	w8, w7, w8
    8ed8:	and	x7, x9, #0xffff
    8edc:	str	w8, [x24, #644]
    8ee0:	lsl	w5, w4, w5
    8ee4:	orr	w6, w5, w6
    8ee8:	str	w6, [x24, #640]
    8eec:	cmp	w8, #0x7
    8ef0:	ldrb	w7, [x2, x7]
    8ef4:	ldr	w4, [x1, x9, lsl #2]
    8ef8:	b.le	8f38 <BZ2_compressBlock@@Base+0x4398>
    8efc:	ldr	w9, [x24, #116]
    8f00:	ldr	x8, [x24, #80]
    8f04:	lsr	w5, w6, #24
    8f08:	strb	w5, [x8, w9, sxtw]
    8f0c:	ldr	w5, [x24, #640]
    8f10:	ldr	w9, [x24, #116]
    8f14:	ldr	w8, [x24, #644]
    8f18:	lsl	w6, w5, #8
    8f1c:	add	w9, w9, #0x1
    8f20:	sub	w8, w8, #0x8
    8f24:	str	w9, [x24, #116]
    8f28:	str	w6, [x24, #640]
    8f2c:	cmp	w8, #0x7
    8f30:	str	w8, [x24, #644]
    8f34:	b.gt	8f00 <BZ2_compressBlock@@Base+0x4360>
    8f38:	ldrh	w9, [x0, #40]
    8f3c:	sub	w5, w22, w8
    8f40:	sub	w5, w5, w7
    8f44:	add	w8, w7, w8
    8f48:	and	x7, x9, #0xffff
    8f4c:	str	w8, [x24, #644]
    8f50:	lsl	w5, w4, w5
    8f54:	orr	w5, w5, w6
    8f58:	str	w5, [x24, #640]
    8f5c:	cmp	w8, #0x7
    8f60:	ldrb	w7, [x2, x7]
    8f64:	ldr	w4, [x1, x9, lsl #2]
    8f68:	b.le	8fa8 <BZ2_compressBlock@@Base+0x4408>
    8f6c:	ldr	w6, [x24, #116]
    8f70:	ldr	x8, [x24, #80]
    8f74:	lsr	w5, w5, #24
    8f78:	strb	w5, [x8, w6, sxtw]
    8f7c:	ldr	w5, [x24, #640]
    8f80:	ldr	w6, [x24, #116]
    8f84:	ldr	w8, [x24, #644]
    8f88:	lsl	w5, w5, #8
    8f8c:	add	w6, w6, #0x1
    8f90:	sub	w8, w8, #0x8
    8f94:	str	w6, [x24, #116]
    8f98:	str	w5, [x24, #640]
    8f9c:	cmp	w8, #0x7
    8fa0:	str	w8, [x24, #644]
    8fa4:	b.gt	8f70 <BZ2_compressBlock@@Base+0x43d0>
    8fa8:	ldrh	w9, [x0, #42]
    8fac:	sub	w6, w22, w8
    8fb0:	sub	w6, w6, w7
    8fb4:	add	w8, w7, w8
    8fb8:	and	x7, x9, #0xffff
    8fbc:	str	w8, [x24, #644]
    8fc0:	lsl	w6, w4, w6
    8fc4:	orr	w5, w6, w5
    8fc8:	str	w5, [x24, #640]
    8fcc:	cmp	w8, #0x7
    8fd0:	ldrb	w7, [x2, x7]
    8fd4:	ldr	w4, [x1, x9, lsl #2]
    8fd8:	b.le	9018 <BZ2_compressBlock@@Base+0x4478>
    8fdc:	ldr	w9, [x24, #116]
    8fe0:	ldr	x8, [x24, #80]
    8fe4:	lsr	w6, w5, #24
    8fe8:	strb	w6, [x8, w9, sxtw]
    8fec:	ldr	w6, [x24, #640]
    8ff0:	ldr	w9, [x24, #116]
    8ff4:	ldr	w8, [x24, #644]
    8ff8:	lsl	w5, w6, #8
    8ffc:	add	w9, w9, #0x1
    9000:	sub	w8, w8, #0x8
    9004:	str	w9, [x24, #116]
    9008:	str	w5, [x24, #640]
    900c:	cmp	w8, #0x7
    9010:	str	w8, [x24, #644]
    9014:	b.gt	8fe0 <BZ2_compressBlock@@Base+0x4440>
    9018:	ldrh	w9, [x0, #44]
    901c:	sub	w6, w22, w8
    9020:	sub	w6, w6, w7
    9024:	add	w8, w7, w8
    9028:	and	x7, x9, #0xffff
    902c:	str	w8, [x24, #644]
    9030:	lsl	w6, w4, w6
    9034:	orr	w6, w6, w5
    9038:	str	w6, [x24, #640]
    903c:	cmp	w8, #0x7
    9040:	ldrb	w7, [x2, x7]
    9044:	ldr	w4, [x1, x9, lsl #2]
    9048:	b.le	9088 <BZ2_compressBlock@@Base+0x44e8>
    904c:	ldr	w5, [x24, #116]
    9050:	ldr	x8, [x24, #80]
    9054:	lsr	w6, w6, #24
    9058:	strb	w6, [x8, w5, sxtw]
    905c:	ldr	w6, [x24, #640]
    9060:	ldr	w5, [x24, #116]
    9064:	ldr	w8, [x24, #644]
    9068:	lsl	w6, w6, #8
    906c:	add	w5, w5, #0x1
    9070:	sub	w8, w8, #0x8
    9074:	str	w5, [x24, #116]
    9078:	str	w6, [x24, #640]
    907c:	cmp	w8, #0x7
    9080:	str	w8, [x24, #644]
    9084:	b.gt	9050 <BZ2_compressBlock@@Base+0x44b0>
    9088:	ldrh	w9, [x0, #46]
    908c:	sub	w5, w22, w8
    9090:	sub	w5, w5, w7
    9094:	add	w8, w7, w8
    9098:	and	x7, x9, #0xffff
    909c:	str	w8, [x24, #644]
    90a0:	lsl	w5, w4, w5
    90a4:	orr	w6, w5, w6
    90a8:	str	w6, [x24, #640]
    90ac:	cmp	w8, #0x7
    90b0:	ldrb	w7, [x2, x7]
    90b4:	ldr	w4, [x1, x9, lsl #2]
    90b8:	b.le	90f8 <BZ2_compressBlock@@Base+0x4558>
    90bc:	ldr	w9, [x24, #116]
    90c0:	ldr	x8, [x24, #80]
    90c4:	lsr	w5, w6, #24
    90c8:	strb	w5, [x8, w9, sxtw]
    90cc:	ldr	w5, [x24, #640]
    90d0:	ldr	w9, [x24, #116]
    90d4:	ldr	w8, [x24, #644]
    90d8:	lsl	w6, w5, #8
    90dc:	add	w9, w9, #0x1
    90e0:	sub	w8, w8, #0x8
    90e4:	str	w9, [x24, #116]
    90e8:	str	w6, [x24, #640]
    90ec:	cmp	w8, #0x7
    90f0:	str	w8, [x24, #644]
    90f4:	b.gt	90c0 <BZ2_compressBlock@@Base+0x4520>
    90f8:	ldrh	w9, [x0, #48]
    90fc:	sub	w5, w22, w8
    9100:	sub	w5, w5, w7
    9104:	add	w8, w7, w8
    9108:	and	x7, x9, #0xffff
    910c:	str	w8, [x24, #644]
    9110:	lsl	w5, w4, w5
    9114:	orr	w5, w5, w6
    9118:	str	w5, [x24, #640]
    911c:	cmp	w8, #0x7
    9120:	ldrb	w7, [x2, x7]
    9124:	ldr	w4, [x1, x9, lsl #2]
    9128:	b.le	9168 <BZ2_compressBlock@@Base+0x45c8>
    912c:	ldr	w6, [x24, #116]
    9130:	ldr	x8, [x24, #80]
    9134:	lsr	w5, w5, #24
    9138:	strb	w5, [x8, w6, sxtw]
    913c:	ldr	w5, [x24, #640]
    9140:	ldr	w6, [x24, #116]
    9144:	ldr	w8, [x24, #644]
    9148:	lsl	w5, w5, #8
    914c:	add	w6, w6, #0x1
    9150:	sub	w8, w8, #0x8
    9154:	str	w6, [x24, #116]
    9158:	str	w5, [x24, #640]
    915c:	cmp	w8, #0x7
    9160:	str	w8, [x24, #644]
    9164:	b.gt	9130 <BZ2_compressBlock@@Base+0x4590>
    9168:	ldrh	w9, [x0, #50]
    916c:	sub	w6, w22, w8
    9170:	sub	w6, w6, w7
    9174:	add	w8, w7, w8
    9178:	and	x7, x9, #0xffff
    917c:	str	w8, [x24, #644]
    9180:	lsl	w6, w4, w6
    9184:	orr	w5, w6, w5
    9188:	str	w5, [x24, #640]
    918c:	cmp	w8, #0x7
    9190:	ldrb	w7, [x2, x7]
    9194:	ldr	w4, [x1, x9, lsl #2]
    9198:	b.le	91d8 <BZ2_compressBlock@@Base+0x4638>
    919c:	ldr	w9, [x24, #116]
    91a0:	ldr	x8, [x24, #80]
    91a4:	lsr	w6, w5, #24
    91a8:	strb	w6, [x8, w9, sxtw]
    91ac:	ldr	w6, [x24, #640]
    91b0:	ldr	w9, [x24, #116]
    91b4:	ldr	w8, [x24, #644]
    91b8:	lsl	w5, w6, #8
    91bc:	add	w9, w9, #0x1
    91c0:	sub	w8, w8, #0x8
    91c4:	str	w9, [x24, #116]
    91c8:	str	w5, [x24, #640]
    91cc:	cmp	w8, #0x7
    91d0:	str	w8, [x24, #644]
    91d4:	b.gt	91a0 <BZ2_compressBlock@@Base+0x4600>
    91d8:	ldrh	w9, [x0, #52]
    91dc:	sub	w6, w22, w8
    91e0:	sub	w6, w6, w7
    91e4:	add	w8, w7, w8
    91e8:	and	x7, x9, #0xffff
    91ec:	str	w8, [x24, #644]
    91f0:	lsl	w6, w4, w6
    91f4:	orr	w6, w6, w5
    91f8:	str	w6, [x24, #640]
    91fc:	cmp	w8, #0x7
    9200:	ldrb	w7, [x2, x7]
    9204:	ldr	w4, [x1, x9, lsl #2]
    9208:	b.le	9248 <BZ2_compressBlock@@Base+0x46a8>
    920c:	ldr	w5, [x24, #116]
    9210:	ldr	x8, [x24, #80]
    9214:	lsr	w6, w6, #24
    9218:	strb	w6, [x8, w5, sxtw]
    921c:	ldr	w6, [x24, #640]
    9220:	ldr	w5, [x24, #116]
    9224:	ldr	w8, [x24, #644]
    9228:	lsl	w6, w6, #8
    922c:	add	w5, w5, #0x1
    9230:	sub	w8, w8, #0x8
    9234:	str	w5, [x24, #116]
    9238:	str	w6, [x24, #640]
    923c:	cmp	w8, #0x7
    9240:	str	w8, [x24, #644]
    9244:	b.gt	9210 <BZ2_compressBlock@@Base+0x4670>
    9248:	ldrh	w9, [x0, #54]
    924c:	sub	w5, w22, w8
    9250:	sub	w5, w5, w7
    9254:	add	w8, w7, w8
    9258:	and	x7, x9, #0xffff
    925c:	str	w8, [x24, #644]
    9260:	lsl	w5, w4, w5
    9264:	orr	w6, w5, w6
    9268:	str	w6, [x24, #640]
    926c:	cmp	w8, #0x7
    9270:	ldrb	w7, [x2, x7]
    9274:	ldr	w4, [x1, x9, lsl #2]
    9278:	b.le	92b8 <BZ2_compressBlock@@Base+0x4718>
    927c:	ldr	w9, [x24, #116]
    9280:	ldr	x8, [x24, #80]
    9284:	lsr	w5, w6, #24
    9288:	strb	w5, [x8, w9, sxtw]
    928c:	ldr	w5, [x24, #640]
    9290:	ldr	w9, [x24, #116]
    9294:	ldr	w8, [x24, #644]
    9298:	lsl	w6, w5, #8
    929c:	add	w9, w9, #0x1
    92a0:	sub	w8, w8, #0x8
    92a4:	str	w9, [x24, #116]
    92a8:	str	w6, [x24, #640]
    92ac:	cmp	w8, #0x7
    92b0:	str	w8, [x24, #644]
    92b4:	b.gt	9280 <BZ2_compressBlock@@Base+0x46e0>
    92b8:	ldrh	w9, [x0, #56]
    92bc:	sub	w5, w22, w8
    92c0:	sub	w5, w5, w7
    92c4:	add	w8, w7, w8
    92c8:	and	x7, x9, #0xffff
    92cc:	str	w8, [x24, #644]
    92d0:	lsl	w5, w4, w5
    92d4:	orr	w5, w5, w6
    92d8:	str	w5, [x24, #640]
    92dc:	cmp	w8, #0x7
    92e0:	ldrb	w7, [x2, x7]
    92e4:	ldr	w4, [x1, x9, lsl #2]
    92e8:	b.le	9328 <BZ2_compressBlock@@Base+0x4788>
    92ec:	ldr	w6, [x24, #116]
    92f0:	ldr	x8, [x24, #80]
    92f4:	lsr	w5, w5, #24
    92f8:	strb	w5, [x8, w6, sxtw]
    92fc:	ldr	w5, [x24, #640]
    9300:	ldr	w6, [x24, #116]
    9304:	ldr	w8, [x24, #644]
    9308:	lsl	w5, w5, #8
    930c:	add	w6, w6, #0x1
    9310:	sub	w8, w8, #0x8
    9314:	str	w6, [x24, #116]
    9318:	str	w5, [x24, #640]
    931c:	cmp	w8, #0x7
    9320:	str	w8, [x24, #644]
    9324:	b.gt	92f0 <BZ2_compressBlock@@Base+0x4750>
    9328:	ldrh	w9, [x0, #58]
    932c:	sub	w6, w22, w8
    9330:	sub	w6, w6, w7
    9334:	add	w8, w7, w8
    9338:	and	x7, x9, #0xffff
    933c:	str	w8, [x24, #644]
    9340:	lsl	w6, w4, w6
    9344:	orr	w5, w6, w5
    9348:	str	w5, [x24, #640]
    934c:	cmp	w8, #0x7
    9350:	ldrb	w7, [x2, x7]
    9354:	ldr	w4, [x1, x9, lsl #2]
    9358:	b.le	9398 <BZ2_compressBlock@@Base+0x47f8>
    935c:	ldr	w9, [x24, #116]
    9360:	ldr	x8, [x24, #80]
    9364:	lsr	w6, w5, #24
    9368:	strb	w6, [x8, w9, sxtw]
    936c:	ldr	w6, [x24, #640]
    9370:	ldr	w9, [x24, #116]
    9374:	ldr	w8, [x24, #644]
    9378:	lsl	w5, w6, #8
    937c:	add	w9, w9, #0x1
    9380:	sub	w8, w8, #0x8
    9384:	str	w9, [x24, #116]
    9388:	str	w5, [x24, #640]
    938c:	cmp	w8, #0x7
    9390:	str	w8, [x24, #644]
    9394:	b.gt	9360 <BZ2_compressBlock@@Base+0x47c0>
    9398:	ldrh	w9, [x0, #60]
    939c:	sub	w6, w22, w8
    93a0:	sub	w6, w6, w7
    93a4:	add	w8, w7, w8
    93a8:	and	x7, x9, #0xffff
    93ac:	str	w8, [x24, #644]
    93b0:	lsl	w6, w4, w6
    93b4:	orr	w6, w6, w5
    93b8:	str	w6, [x24, #640]
    93bc:	cmp	w8, #0x7
    93c0:	ldrb	w7, [x2, x7]
    93c4:	ldr	w4, [x1, x9, lsl #2]
    93c8:	b.le	9408 <BZ2_compressBlock@@Base+0x4868>
    93cc:	ldr	w5, [x24, #116]
    93d0:	ldr	x8, [x24, #80]
    93d4:	lsr	w6, w6, #24
    93d8:	strb	w6, [x8, w5, sxtw]
    93dc:	ldr	w6, [x24, #640]
    93e0:	ldr	w5, [x24, #116]
    93e4:	ldr	w8, [x24, #644]
    93e8:	lsl	w6, w6, #8
    93ec:	add	w5, w5, #0x1
    93f0:	sub	w8, w8, #0x8
    93f4:	str	w5, [x24, #116]
    93f8:	str	w6, [x24, #640]
    93fc:	cmp	w8, #0x7
    9400:	str	w8, [x24, #644]
    9404:	b.gt	93d0 <BZ2_compressBlock@@Base+0x4830>
    9408:	ldrh	w9, [x0, #62]
    940c:	sub	w5, w22, w8
    9410:	sub	w5, w5, w7
    9414:	add	w8, w7, w8
    9418:	and	x7, x9, #0xffff
    941c:	str	w8, [x24, #644]
    9420:	lsl	w5, w4, w5
    9424:	orr	w6, w5, w6
    9428:	str	w6, [x24, #640]
    942c:	cmp	w8, #0x7
    9430:	ldrb	w7, [x2, x7]
    9434:	ldr	w4, [x1, x9, lsl #2]
    9438:	b.le	9478 <BZ2_compressBlock@@Base+0x48d8>
    943c:	ldr	w9, [x24, #116]
    9440:	ldr	x8, [x24, #80]
    9444:	lsr	w5, w6, #24
    9448:	strb	w5, [x8, w9, sxtw]
    944c:	ldr	w5, [x24, #640]
    9450:	ldr	w9, [x24, #116]
    9454:	ldr	w8, [x24, #644]
    9458:	lsl	w6, w5, #8
    945c:	add	w9, w9, #0x1
    9460:	sub	w8, w8, #0x8
    9464:	str	w9, [x24, #116]
    9468:	str	w6, [x24, #640]
    946c:	cmp	w8, #0x7
    9470:	str	w8, [x24, #644]
    9474:	b.gt	9440 <BZ2_compressBlock@@Base+0x48a0>
    9478:	ldrh	w9, [x0, #64]
    947c:	sub	w5, w22, w8
    9480:	sub	w5, w5, w7
    9484:	add	w8, w7, w8
    9488:	and	x7, x9, #0xffff
    948c:	str	w8, [x24, #644]
    9490:	lsl	w5, w4, w5
    9494:	orr	w5, w5, w6
    9498:	str	w5, [x24, #640]
    949c:	cmp	w8, #0x7
    94a0:	ldrb	w7, [x2, x7]
    94a4:	ldr	w4, [x1, x9, lsl #2]
    94a8:	b.le	94e8 <BZ2_compressBlock@@Base+0x4948>
    94ac:	ldr	w6, [x24, #116]
    94b0:	ldr	x8, [x24, #80]
    94b4:	lsr	w5, w5, #24
    94b8:	strb	w5, [x8, w6, sxtw]
    94bc:	ldr	w5, [x24, #640]
    94c0:	ldr	w6, [x24, #116]
    94c4:	ldr	w8, [x24, #644]
    94c8:	lsl	w5, w5, #8
    94cc:	add	w6, w6, #0x1
    94d0:	sub	w8, w8, #0x8
    94d4:	str	w6, [x24, #116]
    94d8:	str	w5, [x24, #640]
    94dc:	cmp	w8, #0x7
    94e0:	str	w8, [x24, #644]
    94e4:	b.gt	94b0 <BZ2_compressBlock@@Base+0x4910>
    94e8:	ldrh	w9, [x0, #66]
    94ec:	sub	w6, w22, w8
    94f0:	sub	w6, w6, w7
    94f4:	add	w8, w7, w8
    94f8:	and	x7, x9, #0xffff
    94fc:	str	w8, [x24, #644]
    9500:	lsl	w6, w4, w6
    9504:	orr	w5, w6, w5
    9508:	str	w5, [x24, #640]
    950c:	cmp	w8, #0x7
    9510:	ldrb	w7, [x2, x7]
    9514:	ldr	w4, [x1, x9, lsl #2]
    9518:	b.le	9558 <BZ2_compressBlock@@Base+0x49b8>
    951c:	ldr	w9, [x24, #116]
    9520:	ldr	x8, [x24, #80]
    9524:	lsr	w6, w5, #24
    9528:	strb	w6, [x8, w9, sxtw]
    952c:	ldr	w6, [x24, #640]
    9530:	ldr	w9, [x24, #116]
    9534:	ldr	w8, [x24, #644]
    9538:	lsl	w5, w6, #8
    953c:	add	w9, w9, #0x1
    9540:	sub	w8, w8, #0x8
    9544:	str	w9, [x24, #116]
    9548:	str	w5, [x24, #640]
    954c:	cmp	w8, #0x7
    9550:	str	w8, [x24, #644]
    9554:	b.gt	9520 <BZ2_compressBlock@@Base+0x4980>
    9558:	ldrh	w9, [x0, #68]
    955c:	sub	w6, w22, w8
    9560:	sub	w6, w6, w7
    9564:	add	w8, w7, w8
    9568:	and	x7, x9, #0xffff
    956c:	str	w8, [x24, #644]
    9570:	lsl	w6, w4, w6
    9574:	orr	w6, w6, w5
    9578:	str	w6, [x24, #640]
    957c:	cmp	w8, #0x7
    9580:	ldrb	w7, [x2, x7]
    9584:	ldr	w4, [x1, x9, lsl #2]
    9588:	b.le	95c8 <BZ2_compressBlock@@Base+0x4a28>
    958c:	ldr	w5, [x24, #116]
    9590:	ldr	x8, [x24, #80]
    9594:	lsr	w6, w6, #24
    9598:	strb	w6, [x8, w5, sxtw]
    959c:	ldr	w6, [x24, #640]
    95a0:	ldr	w5, [x24, #116]
    95a4:	ldr	w8, [x24, #644]
    95a8:	lsl	w6, w6, #8
    95ac:	add	w5, w5, #0x1
    95b0:	sub	w8, w8, #0x8
    95b4:	str	w5, [x24, #116]
    95b8:	str	w6, [x24, #640]
    95bc:	cmp	w8, #0x7
    95c0:	str	w8, [x24, #644]
    95c4:	b.gt	9590 <BZ2_compressBlock@@Base+0x49f0>
    95c8:	ldrh	w9, [x0, #70]
    95cc:	sub	w5, w22, w8
    95d0:	sub	w5, w5, w7
    95d4:	add	w8, w7, w8
    95d8:	and	x7, x9, #0xffff
    95dc:	str	w8, [x24, #644]
    95e0:	lsl	w5, w4, w5
    95e4:	orr	w6, w5, w6
    95e8:	str	w6, [x24, #640]
    95ec:	cmp	w8, #0x7
    95f0:	ldrb	w7, [x2, x7]
    95f4:	ldr	w4, [x1, x9, lsl #2]
    95f8:	b.le	9638 <BZ2_compressBlock@@Base+0x4a98>
    95fc:	ldr	w9, [x24, #116]
    9600:	ldr	x8, [x24, #80]
    9604:	lsr	w5, w6, #24
    9608:	strb	w5, [x8, w9, sxtw]
    960c:	ldr	w5, [x24, #640]
    9610:	ldr	w9, [x24, #116]
    9614:	ldr	w8, [x24, #644]
    9618:	lsl	w6, w5, #8
    961c:	add	w9, w9, #0x1
    9620:	sub	w8, w8, #0x8
    9624:	str	w9, [x24, #116]
    9628:	str	w6, [x24, #640]
    962c:	cmp	w8, #0x7
    9630:	str	w8, [x24, #644]
    9634:	b.gt	9600 <BZ2_compressBlock@@Base+0x4a60>
    9638:	ldrh	w9, [x0, #72]
    963c:	sub	w5, w22, w8
    9640:	sub	w5, w5, w7
    9644:	add	w8, w7, w8
    9648:	and	x7, x9, #0xffff
    964c:	str	w8, [x24, #644]
    9650:	lsl	w5, w4, w5
    9654:	orr	w5, w5, w6
    9658:	str	w5, [x24, #640]
    965c:	cmp	w8, #0x7
    9660:	ldrb	w7, [x2, x7]
    9664:	ldr	w4, [x1, x9, lsl #2]
    9668:	b.le	96a8 <BZ2_compressBlock@@Base+0x4b08>
    966c:	ldr	w6, [x24, #116]
    9670:	ldr	x8, [x24, #80]
    9674:	lsr	w5, w5, #24
    9678:	strb	w5, [x8, w6, sxtw]
    967c:	ldr	w5, [x24, #640]
    9680:	ldr	w6, [x24, #116]
    9684:	ldr	w8, [x24, #644]
    9688:	lsl	w5, w5, #8
    968c:	add	w6, w6, #0x1
    9690:	sub	w8, w8, #0x8
    9694:	str	w6, [x24, #116]
    9698:	str	w5, [x24, #640]
    969c:	cmp	w8, #0x7
    96a0:	str	w8, [x24, #644]
    96a4:	b.gt	9670 <BZ2_compressBlock@@Base+0x4ad0>
    96a8:	ldrh	w9, [x0, #74]
    96ac:	sub	w6, w22, w8
    96b0:	sub	w6, w6, w7
    96b4:	add	w8, w7, w8
    96b8:	and	x7, x9, #0xffff
    96bc:	str	w8, [x24, #644]
    96c0:	lsl	w6, w4, w6
    96c4:	orr	w5, w6, w5
    96c8:	str	w5, [x24, #640]
    96cc:	cmp	w8, #0x7
    96d0:	ldrb	w7, [x2, x7]
    96d4:	ldr	w4, [x1, x9, lsl #2]
    96d8:	b.le	9718 <BZ2_compressBlock@@Base+0x4b78>
    96dc:	ldr	w9, [x24, #116]
    96e0:	ldr	x8, [x24, #80]
    96e4:	lsr	w6, w5, #24
    96e8:	strb	w6, [x8, w9, sxtw]
    96ec:	ldr	w6, [x24, #640]
    96f0:	ldr	w9, [x24, #116]
    96f4:	ldr	w8, [x24, #644]
    96f8:	lsl	w5, w6, #8
    96fc:	add	w9, w9, #0x1
    9700:	sub	w8, w8, #0x8
    9704:	str	w9, [x24, #116]
    9708:	str	w5, [x24, #640]
    970c:	cmp	w8, #0x7
    9710:	str	w8, [x24, #644]
    9714:	b.gt	96e0 <BZ2_compressBlock@@Base+0x4b40>
    9718:	ldrh	w9, [x0, #76]
    971c:	sub	w6, w22, w8
    9720:	sub	w6, w6, w7
    9724:	add	w8, w7, w8
    9728:	and	x7, x9, #0xffff
    972c:	str	w8, [x24, #644]
    9730:	lsl	w6, w4, w6
    9734:	orr	w6, w6, w5
    9738:	str	w6, [x24, #640]
    973c:	cmp	w8, #0x7
    9740:	ldrb	w7, [x2, x7]
    9744:	ldr	w4, [x1, x9, lsl #2]
    9748:	b.le	9788 <BZ2_compressBlock@@Base+0x4be8>
    974c:	ldr	w5, [x24, #116]
    9750:	ldr	x8, [x24, #80]
    9754:	lsr	w6, w6, #24
    9758:	strb	w6, [x8, w5, sxtw]
    975c:	ldr	w6, [x24, #640]
    9760:	ldr	w5, [x24, #116]
    9764:	ldr	w8, [x24, #644]
    9768:	lsl	w6, w6, #8
    976c:	add	w5, w5, #0x1
    9770:	sub	w8, w8, #0x8
    9774:	str	w5, [x24, #116]
    9778:	str	w6, [x24, #640]
    977c:	cmp	w8, #0x7
    9780:	str	w8, [x24, #644]
    9784:	b.gt	9750 <BZ2_compressBlock@@Base+0x4bb0>
    9788:	ldrh	w9, [x0, #78]
    978c:	sub	w5, w22, w8
    9790:	sub	w5, w5, w7
    9794:	add	w8, w7, w8
    9798:	and	x7, x9, #0xffff
    979c:	str	w8, [x24, #644]
    97a0:	lsl	w5, w4, w5
    97a4:	orr	w6, w5, w6
    97a8:	str	w6, [x24, #640]
    97ac:	cmp	w8, #0x7
    97b0:	ldrb	w7, [x2, x7]
    97b4:	ldr	w4, [x1, x9, lsl #2]
    97b8:	b.le	97f8 <BZ2_compressBlock@@Base+0x4c58>
    97bc:	ldr	w9, [x24, #116]
    97c0:	ldr	x8, [x24, #80]
    97c4:	lsr	w5, w6, #24
    97c8:	strb	w5, [x8, w9, sxtw]
    97cc:	ldr	w5, [x24, #640]
    97d0:	ldr	w9, [x24, #116]
    97d4:	ldr	w8, [x24, #644]
    97d8:	lsl	w6, w5, #8
    97dc:	add	w9, w9, #0x1
    97e0:	sub	w8, w8, #0x8
    97e4:	str	w9, [x24, #116]
    97e8:	str	w6, [x24, #640]
    97ec:	cmp	w8, #0x7
    97f0:	str	w8, [x24, #644]
    97f4:	b.gt	97c0 <BZ2_compressBlock@@Base+0x4c20>
    97f8:	ldrh	w9, [x0, #80]
    97fc:	sub	w5, w22, w8
    9800:	sub	w5, w5, w7
    9804:	add	w8, w7, w8
    9808:	and	x7, x9, #0xffff
    980c:	str	w8, [x24, #644]
    9810:	lsl	w5, w4, w5
    9814:	orr	w5, w5, w6
    9818:	str	w5, [x24, #640]
    981c:	cmp	w8, #0x7
    9820:	ldrb	w7, [x2, x7]
    9824:	ldr	w4, [x1, x9, lsl #2]
    9828:	b.le	9868 <BZ2_compressBlock@@Base+0x4cc8>
    982c:	ldr	w6, [x24, #116]
    9830:	ldr	x8, [x24, #80]
    9834:	lsr	w5, w5, #24
    9838:	strb	w5, [x8, w6, sxtw]
    983c:	ldr	w5, [x24, #640]
    9840:	ldr	w6, [x24, #116]
    9844:	ldr	w8, [x24, #644]
    9848:	lsl	w5, w5, #8
    984c:	add	w6, w6, #0x1
    9850:	sub	w8, w8, #0x8
    9854:	str	w6, [x24, #116]
    9858:	str	w5, [x24, #640]
    985c:	cmp	w8, #0x7
    9860:	str	w8, [x24, #644]
    9864:	b.gt	9830 <BZ2_compressBlock@@Base+0x4c90>
    9868:	ldrh	w9, [x0, #82]
    986c:	sub	w6, w22, w8
    9870:	sub	w6, w6, w7
    9874:	add	w8, w7, w8
    9878:	and	x7, x9, #0xffff
    987c:	str	w8, [x24, #644]
    9880:	lsl	w6, w4, w6
    9884:	orr	w5, w6, w5
    9888:	str	w5, [x24, #640]
    988c:	cmp	w8, #0x7
    9890:	ldrb	w7, [x2, x7]
    9894:	ldr	w4, [x1, x9, lsl #2]
    9898:	b.le	98d8 <BZ2_compressBlock@@Base+0x4d38>
    989c:	ldr	w9, [x24, #116]
    98a0:	ldr	x8, [x24, #80]
    98a4:	lsr	w6, w5, #24
    98a8:	strb	w6, [x8, w9, sxtw]
    98ac:	ldr	w6, [x24, #640]
    98b0:	ldr	w9, [x24, #116]
    98b4:	ldr	w8, [x24, #644]
    98b8:	lsl	w5, w6, #8
    98bc:	add	w9, w9, #0x1
    98c0:	sub	w8, w8, #0x8
    98c4:	str	w9, [x24, #116]
    98c8:	str	w5, [x24, #640]
    98cc:	cmp	w8, #0x7
    98d0:	str	w8, [x24, #644]
    98d4:	b.gt	98a0 <BZ2_compressBlock@@Base+0x4d00>
    98d8:	ldrh	w9, [x0, #84]
    98dc:	sub	w6, w22, w8
    98e0:	sub	w6, w6, w7
    98e4:	add	w8, w7, w8
    98e8:	and	x7, x9, #0xffff
    98ec:	str	w8, [x24, #644]
    98f0:	lsl	w6, w4, w6
    98f4:	orr	w6, w6, w5
    98f8:	str	w6, [x24, #640]
    98fc:	cmp	w8, #0x7
    9900:	ldrb	w7, [x2, x7]
    9904:	ldr	w4, [x1, x9, lsl #2]
    9908:	b.le	9948 <BZ2_compressBlock@@Base+0x4da8>
    990c:	ldr	w5, [x24, #116]
    9910:	ldr	x8, [x24, #80]
    9914:	lsr	w6, w6, #24
    9918:	strb	w6, [x8, w5, sxtw]
    991c:	ldr	w6, [x24, #640]
    9920:	ldr	w5, [x24, #116]
    9924:	ldr	w8, [x24, #644]
    9928:	lsl	w6, w6, #8
    992c:	add	w5, w5, #0x1
    9930:	sub	w8, w8, #0x8
    9934:	str	w5, [x24, #116]
    9938:	str	w6, [x24, #640]
    993c:	cmp	w8, #0x7
    9940:	str	w8, [x24, #644]
    9944:	b.gt	9910 <BZ2_compressBlock@@Base+0x4d70>
    9948:	ldrh	w9, [x0, #86]
    994c:	sub	w5, w22, w8
    9950:	sub	w5, w5, w7
    9954:	add	w8, w7, w8
    9958:	and	x7, x9, #0xffff
    995c:	str	w8, [x24, #644]
    9960:	lsl	w5, w4, w5
    9964:	orr	w6, w5, w6
    9968:	str	w6, [x24, #640]
    996c:	cmp	w8, #0x7
    9970:	ldrb	w7, [x2, x7]
    9974:	ldr	w4, [x1, x9, lsl #2]
    9978:	b.le	99b8 <BZ2_compressBlock@@Base+0x4e18>
    997c:	ldr	w9, [x24, #116]
    9980:	ldr	x8, [x24, #80]
    9984:	lsr	w5, w6, #24
    9988:	strb	w5, [x8, w9, sxtw]
    998c:	ldr	w5, [x24, #640]
    9990:	ldr	w9, [x24, #116]
    9994:	ldr	w8, [x24, #644]
    9998:	lsl	w6, w5, #8
    999c:	add	w9, w9, #0x1
    99a0:	sub	w8, w8, #0x8
    99a4:	str	w9, [x24, #116]
    99a8:	str	w6, [x24, #640]
    99ac:	cmp	w8, #0x7
    99b0:	str	w8, [x24, #644]
    99b4:	b.gt	9980 <BZ2_compressBlock@@Base+0x4de0>
    99b8:	ldrh	w9, [x0, #88]
    99bc:	sub	w5, w22, w8
    99c0:	sub	w5, w5, w7
    99c4:	add	w8, w7, w8
    99c8:	and	x7, x9, #0xffff
    99cc:	str	w8, [x24, #644]
    99d0:	lsl	w5, w4, w5
    99d4:	orr	w5, w5, w6
    99d8:	str	w5, [x24, #640]
    99dc:	cmp	w8, #0x7
    99e0:	ldrb	w7, [x2, x7]
    99e4:	ldr	w4, [x1, x9, lsl #2]
    99e8:	b.le	9a28 <BZ2_compressBlock@@Base+0x4e88>
    99ec:	ldr	w6, [x24, #116]
    99f0:	ldr	x8, [x24, #80]
    99f4:	lsr	w5, w5, #24
    99f8:	strb	w5, [x8, w6, sxtw]
    99fc:	ldr	w5, [x24, #640]
    9a00:	ldr	w6, [x24, #116]
    9a04:	ldr	w8, [x24, #644]
    9a08:	lsl	w5, w5, #8
    9a0c:	add	w6, w6, #0x1
    9a10:	sub	w8, w8, #0x8
    9a14:	str	w6, [x24, #116]
    9a18:	str	w5, [x24, #640]
    9a1c:	cmp	w8, #0x7
    9a20:	str	w8, [x24, #644]
    9a24:	b.gt	99f0 <BZ2_compressBlock@@Base+0x4e50>
    9a28:	ldrh	w9, [x0, #90]
    9a2c:	sub	w6, w22, w8
    9a30:	sub	w6, w6, w7
    9a34:	add	w8, w7, w8
    9a38:	and	x7, x9, #0xffff
    9a3c:	str	w8, [x24, #644]
    9a40:	lsl	w6, w4, w6
    9a44:	orr	w5, w6, w5
    9a48:	str	w5, [x24, #640]
    9a4c:	cmp	w8, #0x7
    9a50:	ldrb	w7, [x2, x7]
    9a54:	ldr	w4, [x1, x9, lsl #2]
    9a58:	b.le	9a98 <BZ2_compressBlock@@Base+0x4ef8>
    9a5c:	ldr	w9, [x24, #116]
    9a60:	ldr	x8, [x24, #80]
    9a64:	lsr	w6, w5, #24
    9a68:	strb	w6, [x8, w9, sxtw]
    9a6c:	ldr	w6, [x24, #640]
    9a70:	ldr	w9, [x24, #116]
    9a74:	ldr	w8, [x24, #644]
    9a78:	lsl	w5, w6, #8
    9a7c:	add	w9, w9, #0x1
    9a80:	sub	w8, w8, #0x8
    9a84:	str	w9, [x24, #116]
    9a88:	str	w5, [x24, #640]
    9a8c:	cmp	w8, #0x7
    9a90:	str	w8, [x24, #644]
    9a94:	b.gt	9a60 <BZ2_compressBlock@@Base+0x4ec0>
    9a98:	ldrh	w9, [x0, #92]
    9a9c:	sub	w6, w22, w8
    9aa0:	sub	w6, w6, w7
    9aa4:	add	w8, w7, w8
    9aa8:	and	x7, x9, #0xffff
    9aac:	str	w8, [x24, #644]
    9ab0:	lsl	w6, w4, w6
    9ab4:	orr	w6, w6, w5
    9ab8:	str	w6, [x24, #640]
    9abc:	cmp	w8, #0x7
    9ac0:	ldrb	w7, [x2, x7]
    9ac4:	ldr	w4, [x1, x9, lsl #2]
    9ac8:	b.le	9b08 <BZ2_compressBlock@@Base+0x4f68>
    9acc:	ldr	w5, [x24, #116]
    9ad0:	ldr	x8, [x24, #80]
    9ad4:	lsr	w6, w6, #24
    9ad8:	strb	w6, [x8, w5, sxtw]
    9adc:	ldr	w6, [x24, #640]
    9ae0:	ldr	w5, [x24, #116]
    9ae4:	ldr	w8, [x24, #644]
    9ae8:	lsl	w6, w6, #8
    9aec:	add	w5, w5, #0x1
    9af0:	sub	w8, w8, #0x8
    9af4:	str	w5, [x24, #116]
    9af8:	str	w6, [x24, #640]
    9afc:	cmp	w8, #0x7
    9b00:	str	w8, [x24, #644]
    9b04:	b.gt	9ad0 <BZ2_compressBlock@@Base+0x4f30>
    9b08:	ldrh	w9, [x0, #94]
    9b0c:	sub	w5, w22, w8
    9b10:	sub	w5, w5, w7
    9b14:	add	w8, w7, w8
    9b18:	and	x7, x9, #0xffff
    9b1c:	str	w8, [x24, #644]
    9b20:	lsl	w5, w4, w5
    9b24:	orr	w6, w5, w6
    9b28:	str	w6, [x24, #640]
    9b2c:	cmp	w8, #0x7
    9b30:	ldrb	w7, [x2, x7]
    9b34:	ldr	w4, [x1, x9, lsl #2]
    9b38:	b.le	9b78 <BZ2_compressBlock@@Base+0x4fd8>
    9b3c:	ldr	w9, [x24, #116]
    9b40:	ldr	x8, [x24, #80]
    9b44:	lsr	w5, w6, #24
    9b48:	strb	w5, [x8, w9, sxtw]
    9b4c:	ldr	w5, [x24, #640]
    9b50:	ldr	w9, [x24, #116]
    9b54:	ldr	w8, [x24, #644]
    9b58:	lsl	w6, w5, #8
    9b5c:	add	w9, w9, #0x1
    9b60:	sub	w8, w8, #0x8
    9b64:	str	w9, [x24, #116]
    9b68:	str	w6, [x24, #640]
    9b6c:	cmp	w8, #0x7
    9b70:	str	w8, [x24, #644]
    9b74:	b.gt	9b40 <BZ2_compressBlock@@Base+0x4fa0>
    9b78:	ldrh	w9, [x0, #96]
    9b7c:	sub	w5, w22, w8
    9b80:	sub	w5, w5, w7
    9b84:	add	w8, w7, w8
    9b88:	and	x7, x9, #0xffff
    9b8c:	str	w8, [x24, #644]
    9b90:	lsl	w5, w4, w5
    9b94:	orr	w5, w5, w6
    9b98:	str	w5, [x24, #640]
    9b9c:	cmp	w8, #0x7
    9ba0:	ldrb	w7, [x2, x7]
    9ba4:	ldr	w4, [x1, x9, lsl #2]
    9ba8:	b.le	9be8 <BZ2_compressBlock@@Base+0x5048>
    9bac:	ldr	w9, [x24, #116]
    9bb0:	ldr	x6, [x24, #80]
    9bb4:	lsr	w5, w5, #24
    9bb8:	strb	w5, [x6, w9, sxtw]
    9bbc:	ldr	w5, [x24, #640]
    9bc0:	ldr	w9, [x24, #116]
    9bc4:	ldr	w6, [x24, #644]
    9bc8:	lsl	w5, w5, #8
    9bcc:	add	w9, w9, #0x1
    9bd0:	sub	w8, w6, #0x8
    9bd4:	str	w9, [x24, #116]
    9bd8:	str	w5, [x24, #640]
    9bdc:	cmp	w8, #0x7
    9be0:	str	w8, [x24, #644]
    9be4:	b.gt	9bb0 <BZ2_compressBlock@@Base+0x5010>
    9be8:	ldrh	w9, [x0, #98]
    9bec:	sub	w0, w22, w8
    9bf0:	sub	w0, w0, w7
    9bf4:	add	w6, w7, w8
    9bf8:	and	x7, x9, #0xffff
    9bfc:	str	w6, [x24, #644]
    9c00:	lsl	w0, w4, w0
    9c04:	orr	w0, w0, w5
    9c08:	str	w0, [x24, #640]
    9c0c:	cmp	w6, #0x7
    9c10:	ldrb	w5, [x2, x7]
    9c14:	ldr	w4, [x1, x9, lsl #2]
    9c18:	b.le	9c58 <BZ2_compressBlock@@Base+0x50b8>
    9c1c:	ldr	w1, [x24, #116]
    9c20:	ldr	x2, [x24, #80]
    9c24:	lsr	w0, w0, #24
    9c28:	strb	w0, [x2, w1, sxtw]
    9c2c:	ldr	w0, [x24, #640]
    9c30:	ldr	w1, [x24, #116]
    9c34:	ldr	w6, [x24, #644]
    9c38:	lsl	w0, w0, #8
    9c3c:	add	w1, w1, #0x1
    9c40:	sub	w6, w6, #0x8
    9c44:	str	w1, [x24, #116]
    9c48:	str	w0, [x24, #640]
    9c4c:	cmp	w6, #0x7
    9c50:	str	w6, [x24, #644]
    9c54:	b.gt	9c20 <BZ2_compressBlock@@Base+0x5080>
    9c58:	sub	w1, w22, w6
    9c5c:	add	w6, w5, w6
    9c60:	sub	w1, w1, w5
    9c64:	str	w6, [x24, #644]
    9c68:	lsl	w1, w4, w1
    9c6c:	orr	w0, w1, w0
    9c70:	str	w0, [x24, #640]
    9c74:	b	8638 <BZ2_compressBlock@@Base+0x3a98>
    9c78:	add	x4, x24, x4, lsl #1
    9c7c:	mov	w5, #0xf                   	// #15
    9c80:	add	x2, x4, w2, sxtw
    9c84:	add	x2, x2, #0x9, lsl #12
    9c88:	strb	w5, [x2, #844]
    9c8c:	b	5ca0 <BZ2_compressBlock@@Base+0x1100>
    9c90:	mov	w7, w2
    9c94:	mov	w1, #0x2                   	// #2
    9c98:	mov	w2, w4
    9c9c:	mov	w4, w3
    9ca0:	mov	w3, w7
    9ca4:	b	764c <BZ2_compressBlock@@Base+0x2aac>
    9ca8:	add	x4, x24, x4, lsl #1
    9cac:	mov	w5, #0xf                   	// #15
    9cb0:	add	x2, x4, w2, sxtw
    9cb4:	add	x2, x2, #0x9, lsl #12
    9cb8:	strb	w5, [x2, #844]
    9cbc:	b	5ccc <BZ2_compressBlock@@Base+0x112c>
    9cc0:	add	x4, x24, x4, lsl #1
    9cc4:	mov	w5, #0xf                   	// #15
    9cc8:	add	x2, x4, w2, sxtw
    9ccc:	add	x2, x2, #0x9, lsl #12
    9cd0:	strb	w5, [x2, #844]
    9cd4:	b	5cf8 <BZ2_compressBlock@@Base+0x1158>
    9cd8:	mov	w7, w2
    9cdc:	mov	w1, #0x3                   	// #3
    9ce0:	mov	w2, w3
    9ce4:	mov	w3, w7
    9ce8:	b	764c <BZ2_compressBlock@@Base+0x2aac>
    9cec:	add	x4, x24, x4, lsl #1
    9cf0:	mov	w5, #0xf                   	// #15
    9cf4:	add	x2, x4, w2, sxtw
    9cf8:	add	x2, x2, #0x9, lsl #12
    9cfc:	strb	w5, [x2, #844]
    9d00:	b	5d24 <BZ2_compressBlock@@Base+0x1184>
    9d04:	mov	w1, #0x4                   	// #4
    9d08:	b	764c <BZ2_compressBlock@@Base+0x2aac>
    9d0c:	add	x4, x24, x4, lsl #1
    9d10:	mov	w5, #0xf                   	// #15
    9d14:	add	x2, x4, w2, sxtw
    9d18:	add	x2, x2, #0x9, lsl #12
    9d1c:	strb	w5, [x2, #844]
    9d20:	b	5d50 <BZ2_compressBlock@@Base+0x11b0>
    9d24:	ldr	w0, [sp, #136]
    9d28:	adrp	x21, 22000 <BZ2_bzerror@@Base+0x11200>
    9d2c:	ldr	w2, [sp, #552]
    9d30:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    9d34:	ldr	x21, [x21, #4008]
    9d38:	asr	w3, w0, #3
    9d3c:	ldr	x0, [sp, #696]
    9d40:	add	x1, x1, #0xa8
    9d44:	adrp	x23, 11000 <BZ2_bzerror@@Base+0x200>
    9d48:	mov	x19, x21
    9d4c:	add	x20, x0, #0x2
    9d50:	add	x23, x23, #0xd8
    9d54:	ldr	x0, [x21]
    9d58:	mov	x22, #0x1                   	// #1
    9d5c:	bl	17c0 <fprintf@plt>
    9d60:	ldr	x24, [sp, #168]
    9d64:	nop
    9d68:	add	x2, x24, x22, lsl #2
    9d6c:	ldr	x0, [x19]
    9d70:	mov	x1, x23
    9d74:	ldur	w2, [x2, #-4]
    9d78:	add	x22, x22, #0x1
    9d7c:	bl	17c0 <fprintf@plt>
    9d80:	cmp	x20, x22
    9d84:	b.ne	9d68 <BZ2_compressBlock@@Base+0x51c8>  // b.any
    9d88:	ldr	x1, [x21]
    9d8c:	mov	w0, #0xa                   	// #10
    9d90:	bl	1590 <fputc@plt>
    9d94:	b	7550 <BZ2_compressBlock@@Base+0x29b0>
    9d98:	ldr	w0, [sp, #564]
    9d9c:	cmp	w0, #0xe
    9da0:	b.ls	a744 <BZ2_compressBlock@@Base+0x5ba4>  // b.plast
    9da4:	ldr	x10, [sp, #600]
    9da8:	mov	x13, #0x9652                	// #38482
    9dac:	ldr	x9, [sp, #608]
    9db0:	mov	x14, #0x9550                	// #38224
    9db4:	ldr	x11, [sp, #656]
    9db8:	mov	x15, #0x9856                	// #38998
    9dbc:	mov	x16, #0x9754                	// #38740
    9dc0:	mov	x17, #0xc9b8                	// #51640
    9dc4:	add	x8, x26, x13
    9dc8:	add	x7, x26, x14
    9dcc:	add	x6, x26, x15
    9dd0:	add	x5, x26, x16
    9dd4:	add	x0, x26, x17
    9dd8:	mov	x1, #0x0                   	// #0
    9ddc:	nop
    9de0:	ldr	q0, [x11, x1]
    9de4:	mov	x2, x0
    9de8:	ldr	q16, [x10, x1]
    9dec:	add	x4, x0, #0x20
    9df0:	uxtl	v1.8h, v0.8b
    9df4:	add	x3, x0, #0x30
    9df8:	uxtl2	v0.8h, v0.16b
    9dfc:	uxtl	v2.8h, v16.8b
    9e00:	uxtl2	v16.8h, v16.16b
    9e04:	uxtl	v7.4s, v1.4h
    9e08:	uxtl2	v6.4s, v1.8h
    9e0c:	uxtl	v1.4s, v2.4h
    9e10:	uxtl2	v2.4s, v2.8h
    9e14:	shl	v7.4s, v7.4s, #16
    9e18:	shl	v6.4s, v6.4s, #16
    9e1c:	uxtl	v8.4s, v0.4h
    9e20:	ldr	q3, [x8, x1]
    9e24:	orr	v7.16b, v7.16b, v1.16b
    9e28:	orr	v6.16b, v6.16b, v2.16b
    9e2c:	uxtl2	v4.4s, v0.8h
    9e30:	ldr	q2, [x7, x1]
    9e34:	ldr	q0, [x5, x1]
    9e38:	ldr	q1, [x6, x1]
    9e3c:	str	s7, [x2], #16
    9e40:	add	x1, x1, #0x10
    9e44:	st1	{v7.s}[1], [x2]
    9e48:	add	x2, x0, #0x70
    9e4c:	st1	{v7.s}[2], [x4]
    9e50:	add	x4, x0, #0x50
    9e54:	uxtl	v5.8h, v3.8b
    9e58:	st1	{v7.s}[3], [x3]
    9e5c:	uxtl	v17.4s, v16.4h
    9e60:	add	x3, x0, #0x60
    9e64:	shl	v8.4s, v8.4s, #16
    9e68:	str	s6, [x0, #64]
    9e6c:	cmp	x9, x1
    9e70:	uxtl2	v16.4s, v16.8h
    9e74:	st1	{v6.s}[1], [x4]
    9e78:	st1	{v6.s}[2], [x3]
    9e7c:	add	x4, x0, #0x90
    9e80:	orr	v8.16b, v8.16b, v17.16b
    9e84:	st1	{v6.s}[3], [x2]
    9e88:	uxtl	v7.4s, v5.4h
    9e8c:	add	x3, x0, #0xa0
    9e90:	uxtl	v6.8h, v2.8b
    9e94:	add	x2, x0, #0xb0
    9e98:	shl	v4.4s, v4.4s, #16
    9e9c:	uxtl2	v5.4s, v5.8h
    9ea0:	str	s8, [x0, #128]
    9ea4:	shl	v7.4s, v7.4s, #16
    9ea8:	st1	{v8.s}[1], [x4]
    9eac:	orr	v4.16b, v4.16b, v16.16b
    9eb0:	add	x4, x0, #0xd0
    9eb4:	uxtl	v16.4s, v6.4h
    9eb8:	st1	{v8.s}[2], [x3]
    9ebc:	uxtl2	v3.8h, v3.16b
    9ec0:	add	x3, x0, #0xe0
    9ec4:	shl	v5.4s, v5.4s, #16
    9ec8:	st1	{v8.s}[3], [x2]
    9ecc:	add	x2, x0, #0xf0
    9ed0:	str	s4, [x0, #192]
    9ed4:	orr	v7.16b, v7.16b, v16.16b
    9ed8:	st1	{v4.s}[1], [x4]
    9edc:	uxtl2	v16.4s, v6.8h
    9ee0:	add	x4, x0, #0x14
    9ee4:	uxtl2	v8.8h, v2.16b
    9ee8:	st1	{v4.s}[2], [x3]
    9eec:	uxtl	v6.4s, v3.4h
    9ef0:	st1	{v4.s}[3], [x2]
    9ef4:	add	x2, x0, #0x24
    9ef8:	add	x3, x0, #0x34
    9efc:	orr	v4.16b, v5.16b, v16.16b
    9f00:	str	s7, [x0, #4]
    9f04:	uxtl2	v2.4s, v3.8h
    9f08:	st1	{v7.s}[1], [x4]
    9f0c:	uxtl	v16.4s, v8.4h
    9f10:	st1	{v7.s}[2], [x2]
    9f14:	shl	v6.4s, v6.4s, #16
    9f18:	add	x2, x0, #0x54
    9f1c:	uxtl	v3.8h, v1.8b
    9f20:	st1	{v7.s}[3], [x3]
    9f24:	uxtl2	v8.4s, v8.8h
    9f28:	add	x3, x0, #0x64
    9f2c:	shl	v2.4s, v2.4s, #16
    9f30:	str	s4, [x0, #68]
    9f34:	add	x4, x0, #0x94
    9f38:	orr	v6.16b, v6.16b, v16.16b
    9f3c:	st1	{v4.s}[1], [x2]
    9f40:	add	x2, x0, #0x74
    9f44:	st1	{v4.s}[2], [x3]
    9f48:	uxtl	v5.4s, v3.4h
    9f4c:	add	x3, x0, #0xa4
    9f50:	uxtl	v7.8h, v0.8b
    9f54:	orr	v2.16b, v2.16b, v8.16b
    9f58:	st1	{v4.s}[3], [x2]
    9f5c:	add	x2, x0, #0xb4
    9f60:	str	s6, [x0, #132]
    9f64:	uxtl2	v1.8h, v1.16b
    9f68:	st1	{v6.s}[1], [x4]
    9f6c:	add	x4, x0, #0xd4
    9f70:	st1	{v6.s}[2], [x3]
    9f74:	shl	v4.4s, v5.4s, #16
    9f78:	add	x3, x0, #0xe4
    9f7c:	uxtl	v8.4s, v7.4h
    9f80:	st1	{v6.s}[3], [x2]
    9f84:	uxtl2	v3.4s, v3.8h
    9f88:	add	x2, x0, #0xf4
    9f8c:	uxtl2	v5.8h, v0.16b
    9f90:	str	s2, [x0, #196]
    9f94:	orr	v4.16b, v4.16b, v8.16b
    9f98:	st1	{v2.s}[1], [x4]
    9f9c:	st1	{v2.s}[2], [x3]
    9fa0:	add	x4, x0, #0x18
    9fa4:	shl	v3.4s, v3.4s, #16
    9fa8:	st1	{v2.s}[3], [x2]
    9fac:	uxtl2	v7.4s, v7.8h
    9fb0:	add	x3, x0, #0x28
    9fb4:	uxtl	v2.4s, v1.4h
    9fb8:	add	x2, x0, #0x38
    9fbc:	uxtl2	v0.4s, v1.8h
    9fc0:	str	s4, [x0, #8]
    9fc4:	orr	v1.16b, v3.16b, v7.16b
    9fc8:	st1	{v4.s}[1], [x4]
    9fcc:	uxtl	v3.4s, v5.4h
    9fd0:	add	x4, x0, #0x58
    9fd4:	shl	v2.4s, v2.4s, #16
    9fd8:	st1	{v4.s}[2], [x3]
    9fdc:	add	x3, x0, #0x68
    9fe0:	st1	{v4.s}[3], [x2]
    9fe4:	shl	v0.4s, v0.4s, #16
    9fe8:	add	x2, x0, #0x78
    9fec:	uxtl2	v5.4s, v5.8h
    9ff0:	str	s1, [x0, #72]
    9ff4:	orr	v2.16b, v2.16b, v3.16b
    9ff8:	st1	{v1.s}[1], [x4]
    9ffc:	add	x4, x0, #0x98
    a000:	st1	{v1.s}[2], [x3]
    a004:	add	x3, x0, #0xa8
    a008:	st1	{v1.s}[3], [x2]
    a00c:	orr	v0.16b, v0.16b, v5.16b
    a010:	add	x2, x0, #0xb8
    a014:	str	s2, [x0, #136]
    a018:	st1	{v2.s}[1], [x4]
    a01c:	add	x4, x0, #0xd8
    a020:	st1	{v2.s}[2], [x3]
    a024:	add	x3, x0, #0xe8
    a028:	st1	{v2.s}[3], [x2]
    a02c:	add	x2, x0, #0xf8
    a030:	str	s0, [x0, #200]
    a034:	add	x0, x0, #0x100
    a038:	st1	{v0.s}[1], [x4]
    a03c:	st1	{v0.s}[2], [x3]
    a040:	st1	{v0.s}[3], [x2]
    a044:	b.ne	9de0 <BZ2_compressBlock@@Base+0x5240>  // b.any
    a048:	ldr	w1, [sp, #556]
    a04c:	ldr	w0, [sp, #652]
    a050:	cmp	w0, w1
    a054:	b.eq	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.none
    a058:	mov	w1, w0
    a05c:	add	x2, x26, w1, sxtw
    a060:	add	x0, x26, w1, sxtw #4
    a064:	add	x2, x2, #0x9, lsl #12
    a068:	add	x0, x0, #0xc, lsl #12
    a06c:	ldr	w7, [sp, #556]
    a070:	add	w3, w1, #0x1
    a074:	ldrb	w5, [x2, #844]
    a078:	cmp	w3, w7
    a07c:	ldrb	w4, [x2, #1102]
    a080:	orr	w4, w5, w4, lsl #16
    a084:	str	w4, [x0, #2488]
    a088:	ldrb	w4, [x2, #1618]
    a08c:	ldrb	w5, [x2, #1360]
    a090:	orr	w4, w5, w4, lsl #16
    a094:	str	w4, [x0, #2492]
    a098:	ldrb	w4, [x2, #2134]
    a09c:	ldrb	w2, [x2, #1876]
    a0a0:	orr	w2, w2, w4, lsl #16
    a0a4:	str	w2, [x0, #2496]
    a0a8:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a0ac:	sxtw	x3, w3
    a0b0:	add	w4, w1, #0x2
    a0b4:	add	x5, x26, x3
    a0b8:	cmp	w4, w7
    a0bc:	add	x5, x5, #0x9, lsl #12
    a0c0:	add	x3, x26, x3, lsl #4
    a0c4:	add	x2, x3, #0xc, lsl #12
    a0c8:	ldrb	w6, [x5, #844]
    a0cc:	ldrb	w3, [x5, #1102]
    a0d0:	orr	w3, w6, w3, lsl #16
    a0d4:	str	w3, [x0, #2504]
    a0d8:	ldrb	w3, [x5, #1618]
    a0dc:	ldrb	w6, [x5, #1360]
    a0e0:	orr	w3, w6, w3, lsl #16
    a0e4:	str	w3, [x2, #2492]
    a0e8:	ldrb	w3, [x5, #2134]
    a0ec:	ldrb	w5, [x5, #1876]
    a0f0:	orr	w3, w5, w3, lsl #16
    a0f4:	str	w3, [x2, #2496]
    a0f8:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a0fc:	sxtw	x4, w4
    a100:	add	w3, w1, #0x3
    a104:	add	x5, x26, x4
    a108:	cmp	w3, w7
    a10c:	add	x5, x5, #0x9, lsl #12
    a110:	add	x4, x26, x4, lsl #4
    a114:	add	x2, x4, #0xc, lsl #12
    a118:	ldrb	w6, [x5, #844]
    a11c:	ldrb	w4, [x5, #1102]
    a120:	orr	w4, w6, w4, lsl #16
    a124:	str	w4, [x0, #2520]
    a128:	ldrb	w4, [x5, #1618]
    a12c:	ldrb	w6, [x5, #1360]
    a130:	orr	w4, w6, w4, lsl #16
    a134:	str	w4, [x2, #2492]
    a138:	ldrb	w4, [x5, #2134]
    a13c:	ldrb	w5, [x5, #1876]
    a140:	orr	w4, w5, w4, lsl #16
    a144:	str	w4, [x2, #2496]
    a148:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a14c:	sxtw	x3, w3
    a150:	add	w4, w1, #0x4
    a154:	add	x5, x26, x3
    a158:	cmp	w4, w7
    a15c:	add	x5, x5, #0x9, lsl #12
    a160:	add	x3, x26, x3, lsl #4
    a164:	add	x2, x3, #0xc, lsl #12
    a168:	ldrb	w6, [x5, #844]
    a16c:	ldrb	w3, [x5, #1102]
    a170:	orr	w3, w6, w3, lsl #16
    a174:	str	w3, [x0, #2536]
    a178:	ldrb	w3, [x5, #1618]
    a17c:	ldrb	w6, [x5, #1360]
    a180:	orr	w3, w6, w3, lsl #16
    a184:	str	w3, [x2, #2492]
    a188:	ldrb	w3, [x5, #2134]
    a18c:	ldrb	w5, [x5, #1876]
    a190:	orr	w3, w5, w3, lsl #16
    a194:	str	w3, [x2, #2496]
    a198:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a19c:	sxtw	x4, w4
    a1a0:	add	w3, w1, #0x5
    a1a4:	add	x5, x26, x4
    a1a8:	cmp	w3, w7
    a1ac:	add	x5, x5, #0x9, lsl #12
    a1b0:	add	x4, x26, x4, lsl #4
    a1b4:	add	x2, x4, #0xc, lsl #12
    a1b8:	ldrb	w6, [x5, #844]
    a1bc:	ldrb	w4, [x5, #1102]
    a1c0:	orr	w4, w6, w4, lsl #16
    a1c4:	str	w4, [x0, #2552]
    a1c8:	ldrb	w4, [x5, #1618]
    a1cc:	ldrb	w6, [x5, #1360]
    a1d0:	orr	w4, w6, w4, lsl #16
    a1d4:	str	w4, [x2, #2492]
    a1d8:	ldrb	w4, [x5, #2134]
    a1dc:	ldrb	w5, [x5, #1876]
    a1e0:	orr	w4, w5, w4, lsl #16
    a1e4:	str	w4, [x2, #2496]
    a1e8:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a1ec:	sxtw	x3, w3
    a1f0:	add	w4, w1, #0x6
    a1f4:	add	x5, x26, x3
    a1f8:	cmp	w4, w7
    a1fc:	add	x5, x5, #0x9, lsl #12
    a200:	add	x3, x26, x3, lsl #4
    a204:	add	x2, x3, #0xc, lsl #12
    a208:	ldrb	w6, [x5, #844]
    a20c:	ldrb	w3, [x5, #1102]
    a210:	orr	w3, w6, w3, lsl #16
    a214:	str	w3, [x0, #2568]
    a218:	ldrb	w3, [x5, #1618]
    a21c:	ldrb	w6, [x5, #1360]
    a220:	orr	w3, w6, w3, lsl #16
    a224:	str	w3, [x2, #2492]
    a228:	ldrb	w3, [x5, #2134]
    a22c:	ldrb	w5, [x5, #1876]
    a230:	orr	w3, w5, w3, lsl #16
    a234:	str	w3, [x2, #2496]
    a238:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a23c:	sxtw	x4, w4
    a240:	add	w3, w1, #0x7
    a244:	add	x5, x26, x4
    a248:	cmp	w3, w7
    a24c:	add	x5, x5, #0x9, lsl #12
    a250:	add	x4, x26, x4, lsl #4
    a254:	add	x2, x4, #0xc, lsl #12
    a258:	ldrb	w6, [x5, #844]
    a25c:	ldrb	w4, [x5, #1102]
    a260:	orr	w4, w6, w4, lsl #16
    a264:	str	w4, [x0, #2584]
    a268:	ldrb	w4, [x5, #1618]
    a26c:	ldrb	w6, [x5, #1360]
    a270:	orr	w4, w6, w4, lsl #16
    a274:	str	w4, [x2, #2492]
    a278:	ldrb	w4, [x5, #2134]
    a27c:	ldrb	w5, [x5, #1876]
    a280:	orr	w4, w5, w4, lsl #16
    a284:	str	w4, [x2, #2496]
    a288:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a28c:	sxtw	x3, w3
    a290:	add	w4, w1, #0x8
    a294:	add	x5, x26, x3
    a298:	cmp	w4, w7
    a29c:	add	x5, x5, #0x9, lsl #12
    a2a0:	add	x3, x26, x3, lsl #4
    a2a4:	add	x2, x3, #0xc, lsl #12
    a2a8:	ldrb	w6, [x5, #844]
    a2ac:	ldrb	w3, [x5, #1102]
    a2b0:	orr	w3, w6, w3, lsl #16
    a2b4:	str	w3, [x0, #2600]
    a2b8:	ldrb	w3, [x5, #1618]
    a2bc:	ldrb	w6, [x5, #1360]
    a2c0:	orr	w3, w6, w3, lsl #16
    a2c4:	str	w3, [x2, #2492]
    a2c8:	ldrb	w3, [x5, #2134]
    a2cc:	ldrb	w5, [x5, #1876]
    a2d0:	orr	w3, w5, w3, lsl #16
    a2d4:	str	w3, [x2, #2496]
    a2d8:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a2dc:	sxtw	x4, w4
    a2e0:	add	w3, w1, #0x9
    a2e4:	add	x5, x26, x4
    a2e8:	cmp	w3, w7
    a2ec:	add	x5, x5, #0x9, lsl #12
    a2f0:	add	x4, x26, x4, lsl #4
    a2f4:	add	x2, x4, #0xc, lsl #12
    a2f8:	ldrb	w6, [x5, #844]
    a2fc:	ldrb	w4, [x5, #1102]
    a300:	orr	w4, w6, w4, lsl #16
    a304:	str	w4, [x0, #2616]
    a308:	ldrb	w4, [x5, #1618]
    a30c:	ldrb	w6, [x5, #1360]
    a310:	orr	w4, w6, w4, lsl #16
    a314:	str	w4, [x2, #2492]
    a318:	ldrb	w4, [x5, #2134]
    a31c:	ldrb	w5, [x5, #1876]
    a320:	orr	w4, w5, w4, lsl #16
    a324:	str	w4, [x2, #2496]
    a328:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a32c:	sxtw	x3, w3
    a330:	add	w4, w1, #0xa
    a334:	add	x5, x26, x3
    a338:	cmp	w4, w7
    a33c:	add	x5, x5, #0x9, lsl #12
    a340:	add	x3, x26, x3, lsl #4
    a344:	add	x2, x3, #0xc, lsl #12
    a348:	ldrb	w6, [x5, #844]
    a34c:	ldrb	w3, [x5, #1102]
    a350:	orr	w3, w6, w3, lsl #16
    a354:	str	w3, [x0, #2632]
    a358:	ldrb	w3, [x5, #1618]
    a35c:	ldrb	w6, [x5, #1360]
    a360:	orr	w3, w6, w3, lsl #16
    a364:	str	w3, [x2, #2492]
    a368:	ldrb	w3, [x5, #2134]
    a36c:	ldrb	w5, [x5, #1876]
    a370:	orr	w3, w5, w3, lsl #16
    a374:	str	w3, [x2, #2496]
    a378:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a37c:	sxtw	x4, w4
    a380:	add	w3, w1, #0xb
    a384:	add	x5, x26, x4
    a388:	cmp	w3, w7
    a38c:	add	x5, x5, #0x9, lsl #12
    a390:	add	x4, x26, x4, lsl #4
    a394:	add	x2, x4, #0xc, lsl #12
    a398:	ldrb	w6, [x5, #844]
    a39c:	ldrb	w4, [x5, #1102]
    a3a0:	orr	w4, w6, w4, lsl #16
    a3a4:	str	w4, [x0, #2648]
    a3a8:	ldrb	w4, [x5, #1618]
    a3ac:	ldrb	w6, [x5, #1360]
    a3b0:	orr	w4, w6, w4, lsl #16
    a3b4:	str	w4, [x2, #2492]
    a3b8:	ldrb	w4, [x5, #2134]
    a3bc:	ldrb	w5, [x5, #1876]
    a3c0:	orr	w4, w5, w4, lsl #16
    a3c4:	str	w4, [x2, #2496]
    a3c8:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a3cc:	sxtw	x3, w3
    a3d0:	add	w4, w1, #0xc
    a3d4:	add	x5, x26, x3
    a3d8:	cmp	w4, w7
    a3dc:	add	x5, x5, #0x9, lsl #12
    a3e0:	add	x3, x26, x3, lsl #4
    a3e4:	add	x2, x3, #0xc, lsl #12
    a3e8:	ldrb	w6, [x5, #844]
    a3ec:	ldrb	w3, [x5, #1102]
    a3f0:	orr	w3, w6, w3, lsl #16
    a3f4:	str	w3, [x0, #2664]
    a3f8:	ldrb	w3, [x5, #1618]
    a3fc:	ldrb	w6, [x5, #1360]
    a400:	orr	w3, w6, w3, lsl #16
    a404:	str	w3, [x2, #2492]
    a408:	ldrb	w3, [x5, #2134]
    a40c:	ldrb	w5, [x5, #1876]
    a410:	orr	w3, w5, w3, lsl #16
    a414:	str	w3, [x2, #2496]
    a418:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a41c:	sxtw	x4, w4
    a420:	add	w3, w1, #0xd
    a424:	add	x5, x26, x4
    a428:	cmp	w3, w7
    a42c:	add	x5, x5, #0x9, lsl #12
    a430:	add	x4, x26, x4, lsl #4
    a434:	add	x2, x4, #0xc, lsl #12
    a438:	ldrb	w6, [x5, #844]
    a43c:	ldrb	w4, [x5, #1102]
    a440:	orr	w4, w6, w4, lsl #16
    a444:	str	w4, [x0, #2680]
    a448:	ldrb	w4, [x5, #1618]
    a44c:	ldrb	w6, [x5, #1360]
    a450:	orr	w4, w6, w4, lsl #16
    a454:	str	w4, [x2, #2492]
    a458:	ldrb	w4, [x5, #2134]
    a45c:	ldrb	w5, [x5, #1876]
    a460:	orr	w4, w5, w4, lsl #16
    a464:	str	w4, [x2, #2496]
    a468:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a46c:	sxtw	x3, w3
    a470:	add	w1, w1, #0xe
    a474:	add	x4, x26, x3
    a478:	cmp	w1, w7
    a47c:	add	x4, x4, #0x9, lsl #12
    a480:	add	x3, x26, x3, lsl #4
    a484:	add	x2, x3, #0xc, lsl #12
    a488:	ldrb	w5, [x4, #844]
    a48c:	ldrb	w3, [x4, #1102]
    a490:	orr	w3, w5, w3, lsl #16
    a494:	str	w3, [x0, #2696]
    a498:	ldrb	w3, [x4, #1618]
    a49c:	ldrb	w5, [x4, #1360]
    a4a0:	orr	w3, w5, w3, lsl #16
    a4a4:	str	w3, [x2, #2492]
    a4a8:	ldrb	w3, [x4, #2134]
    a4ac:	ldrb	w4, [x4, #1876]
    a4b0:	orr	w3, w4, w3, lsl #16
    a4b4:	str	w3, [x2, #2496]
    a4b8:	b.ge	5ffc <BZ2_compressBlock@@Base+0x145c>  // b.tcont
    a4bc:	sxtw	x1, w1
    a4c0:	add	x2, x26, x1
    a4c4:	add	x2, x2, #0x9, lsl #12
    a4c8:	add	x1, x26, x1, lsl #4
    a4cc:	add	x1, x1, #0xc, lsl #12
    a4d0:	ldrb	w3, [x2, #1102]
    a4d4:	ldrb	w4, [x2, #844]
    a4d8:	orr	w3, w4, w3, lsl #16
    a4dc:	str	w3, [x0, #2712]
    a4e0:	ldrb	w0, [x2, #1618]
    a4e4:	ldrb	w3, [x2, #1360]
    a4e8:	orr	w0, w3, w0, lsl #16
    a4ec:	str	w0, [x1, #2492]
    a4f0:	ldrb	w0, [x2, #2134]
    a4f4:	ldrb	w2, [x2, #1876]
    a4f8:	orr	w0, w2, w0, lsl #16
    a4fc:	str	w0, [x1, #2496]
    a500:	b	5ffc <BZ2_compressBlock@@Base+0x145c>
    a504:	add	x4, x24, x4, lsl #1
    a508:	mov	w5, #0xf                   	// #15
    a50c:	add	x2, x4, w2, sxtw
    a510:	add	x2, x2, #0x9, lsl #12
    a514:	strb	w5, [x2, #844]
    a518:	b	5d7c <BZ2_compressBlock@@Base+0x11dc>
    a51c:	mov	w20, #0x0                   	// #0
    a520:	mov	w2, #0x0                   	// #0
    a524:	mov	w19, #0x20                  	// #32
    a528:	b	7b44 <BZ2_compressBlock@@Base+0x2fa4>
    a52c:	mov	w3, #0x0                   	// #0
    a530:	b	5b18 <BZ2_compressBlock@@Base+0xf78>
    a534:	add	x0, x24, x0, lsl #1
    a538:	add	x3, x0, w3, sxtw
    a53c:	add	x3, x3, #0x9, lsl #12
    a540:	strb	wzr, [x3, #844]
    a544:	b	5db0 <BZ2_compressBlock@@Base+0x1210>
    a548:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    a54c:	ldr	w2, [x24, #652]
    a550:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a554:	add	x1, x1, #0x138
    a558:	ldr	x0, [x0, #4008]
    a55c:	ldr	x0, [x0]
    a560:	bl	17c0 <fprintf@plt>
    a564:	b	5904 <BZ2_compressBlock@@Base+0xd64>
    a568:	mov	w0, #0x3                   	// #3
    a56c:	str	w0, [sp, #624]
    a570:	str	w0, [sp, #684]
    a574:	b	596c <BZ2_compressBlock@@Base+0xdcc>
    a578:	mov	w28, #0x0                   	// #0
    a57c:	str	wzr, [sp, #136]
    a580:	b	7538 <BZ2_compressBlock@@Base+0x2998>
    a584:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    a588:	sub	w2, w1, w5
    a58c:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a590:	add	x1, x1, #0xe0
    a594:	ldr	x0, [x0, #4008]
    a598:	ldr	x0, [x0]
    a59c:	bl	17c0 <fprintf@plt>
    a5a0:	ldr	w1, [x24, #116]
    a5a4:	b	815c <BZ2_compressBlock@@Base+0x35bc>
    a5a8:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    a5ac:	ldr	w2, [x24, #116]
    a5b0:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a5b4:	add	x1, x1, #0x128
    a5b8:	ldr	x0, [x0, #4008]
    a5bc:	sub	w2, w2, w23
    a5c0:	ldr	x0, [x0]
    a5c4:	bl	17c0 <fprintf@plt>
    a5c8:	b	5420 <BZ2_compressBlock@@Base+0x880>
    a5cc:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    a5d0:	sub	w2, w23, w4
    a5d4:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a5d8:	add	x1, x1, #0x110
    a5dc:	ldr	x0, [x0, #4008]
    a5e0:	ldr	x0, [x0]
    a5e4:	bl	17c0 <fprintf@plt>
    a5e8:	ldr	w23, [x24, #116]
    a5ec:	b	851c <BZ2_compressBlock@@Base+0x397c>
    a5f0:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    a5f4:	sub	w2, w4, w1
    a5f8:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a5fc:	add	x1, x1, #0x100
    a600:	ldr	x0, [x0, #4008]
    a604:	ldr	x0, [x0]
    a608:	bl	17c0 <fprintf@plt>
    a60c:	ldr	w4, [x24, #116]
    a610:	ldr	w0, [x24, #644]
    a614:	b	8320 <BZ2_compressBlock@@Base+0x3780>
    a618:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    a61c:	mov	w4, w20
    a620:	mov	w3, w27
    a624:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a628:	ldr	x0, [x0, #4008]
    a62c:	add	x1, x1, #0x28
    a630:	ldr	x0, [x0]
    a634:	bl	17c0 <fprintf@plt>
    a638:	ldr	w20, [x24, #124]
    a63c:	ldr	w27, [x24, #668]
    a640:	add	w0, w20, #0x1
    a644:	str	w0, [sp, #564]
    a648:	add	w22, w20, #0x2
    a64c:	cmp	w22, #0x0
    a650:	b.gt	5378 <BZ2_compressBlock@@Base+0x7d8>
    a654:	mov	x26, #0x934c                	// #37708
    a658:	add	x0, x24, x26
    a65c:	mov	x28, #0x9958                	// #39256
    a660:	str	x0, [sp, #600]
    a664:	add	x0, x24, x28
    a668:	str	x0, [sp, #688]
    a66c:	b	53bc <BZ2_compressBlock@@Base+0x81c>
    a670:	ldr	x0, [sp, #128]
    a674:	add	w27, w22, #0x1
    a678:	add	x4, x0, w22, sxtw #1
    a67c:	b	5350 <BZ2_compressBlock@@Base+0x7b0>
    a680:	mov	w0, #0xbb9                 	// #3001
    a684:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    a688:	ldr	w27, [x24, #668]
    a68c:	b	53c4 <BZ2_compressBlock@@Base+0x824>
    a690:	add	x0, sp, #0x2e0
    a694:	str	x0, [sp, #168]
    a698:	b	5218 <BZ2_compressBlock@@Base+0x678>
    a69c:	mov	w0, #0x4                   	// #4
    a6a0:	str	w0, [sp, #624]
    a6a4:	str	w0, [sp, #684]
    a6a8:	b	596c <BZ2_compressBlock@@Base+0xdcc>
    a6ac:	mov	w0, #0x6                   	// #6
    a6b0:	str	w0, [sp, #624]
    a6b4:	str	w0, [sp, #684]
    a6b8:	b	596c <BZ2_compressBlock@@Base+0xdcc>
    a6bc:	ldr	w0, [x24, #640]
    a6c0:	add	w2, w1, #0x8
    a6c4:	b	54d0 <BZ2_compressBlock@@Base+0x930>
    a6c8:	add	w2, w0, #0x8
    a6cc:	b	4c88 <BZ2_compressBlock@@Base+0xe8>
    a6d0:	mov	w27, #0x1                   	// #1
    a6d4:	ldr	x4, [sp, #128]
    a6d8:	b	5350 <BZ2_compressBlock@@Base+0x7b0>
    a6dc:	add	w3, w2, #0x8
    a6e0:	b	4ce8 <BZ2_compressBlock@@Base+0x148>
    a6e4:	add	w2, w3, #0x8
    a6e8:	b	4d48 <BZ2_compressBlock@@Base+0x1a8>
    a6ec:	add	w3, w2, #0x8
    a6f0:	b	4da8 <BZ2_compressBlock@@Base+0x208>
    a6f4:	add	w2, w3, #0x8
    a6f8:	b	4e08 <BZ2_compressBlock@@Base+0x268>
    a6fc:	add	w3, w2, #0x8
    a700:	b	4e68 <BZ2_compressBlock@@Base+0x2c8>
    a704:	ldr	w0, [x24, #640]
    a708:	b	4ee0 <BZ2_compressBlock@@Base+0x340>
    a70c:	mov	w0, #0x0                   	// #0
    a710:	b	512c <BZ2_compressBlock@@Base+0x58c>
    a714:	add	w3, w2, #0x8
    a718:	b	58d0 <BZ2_compressBlock@@Base+0xd30>
    a71c:	add	w2, w3, #0x8
    a720:	b	5870 <BZ2_compressBlock@@Base+0xcd0>
    a724:	add	w2, w0, #0x8
    a728:	b	56f0 <BZ2_compressBlock@@Base+0xb50>
    a72c:	add	w3, w2, #0x8
    a730:	b	5750 <BZ2_compressBlock@@Base+0xbb0>
    a734:	add	w2, w3, #0x8
    a738:	b	57b0 <BZ2_compressBlock@@Base+0xc10>
    a73c:	add	w3, w2, #0x8
    a740:	b	5810 <BZ2_compressBlock@@Base+0xc70>
    a744:	mov	w1, #0x0                   	// #0
    a748:	b	a05c <BZ2_compressBlock@@Base+0x54bc>
    a74c:	add	w3, w2, #0x8
    a750:	b	5530 <BZ2_compressBlock@@Base+0x990>
    a754:	add	w3, w2, #0x8
    a758:	b	5600 <BZ2_compressBlock@@Base+0xa60>
    a75c:	add	w2, w3, #0x8
    a760:	b	5590 <BZ2_compressBlock@@Base+0x9f0>
    a764:	nop

000000000000a768 <BZ2_decompress@@Base>:
    a768:	stp	x29, x30, [sp, #-256]!
    a76c:	mov	x29, sp
    a770:	stp	x19, x20, [sp, #16]
    a774:	mov	x19, x0
    a778:	ldr	w0, [x0, #8]
    a77c:	stp	x21, x22, [sp, #32]
    a780:	cmp	w0, #0xa
    a784:	stp	x23, x24, [sp, #48]
    a788:	stp	x25, x26, [sp, #64]
    a78c:	stp	x27, x28, [sp, #80]
    a790:	ldr	x14, [x19]
    a794:	b.eq	a930 <BZ2_decompress@@Base+0x1c8>  // b.none
    a798:	add	x20, x19, #0xc, lsl #12
    a79c:	add	x21, x19, #0x8, lsl #12
    a7a0:	sub	w0, w0, #0xb
    a7a4:	cmp	w0, #0x27
    a7a8:	ldr	w1, [x20, #14936]
    a7ac:	str	w1, [sp, #116]
    a7b0:	ldr	w1, [x20, #14944]
    a7b4:	str	w1, [sp, #124]
    a7b8:	ldr	w1, [x20, #14960]
    a7bc:	str	w1, [sp, #120]
    a7c0:	ldr	w1, [x20, #14964]
    a7c4:	str	w1, [sp, #112]
    a7c8:	ldr	x1, [x21, #31368]
    a7cc:	str	x1, [sp, #104]
    a7d0:	ldr	w3, [x20, #14884]
    a7d4:	ldr	w25, [x20, #14888]
    a7d8:	ldr	w13, [x20, #14892]
    a7dc:	ldr	w27, [x20, #14896]
    a7e0:	ldr	w26, [x20, #14900]
    a7e4:	ldr	w28, [x20, #14904]
    a7e8:	ldr	w18, [x20, #14908]
    a7ec:	ldr	w6, [x20, #14912]
    a7f0:	ldr	w5, [x20, #14916]
    a7f4:	ldr	w11, [x20, #14920]
    a7f8:	ldr	w12, [x20, #14924]
    a7fc:	ldr	w4, [x20, #14928]
    a800:	ldr	w10, [x20, #14932]
    a804:	ldr	w7, [x20, #14940]
    a808:	ldr	w22, [x20, #14948]
    a80c:	ldr	w23, [x20, #14952]
    a810:	ldr	w24, [x20, #14956]
    a814:	ldr	x9, [x21, #31352]
    a818:	ldr	x8, [x21, #31360]
    a81c:	b.ls	a918 <BZ2_decompress@@Base+0x1b0>  // b.plast
    a820:	mov	w0, #0xfa1                 	// #4001
    a824:	str	w3, [sp, #128]
    a828:	str	w13, [sp, #136]
    a82c:	str	w18, [sp, #144]
    a830:	stp	w6, w5, [sp, #152]
    a834:	str	w12, [sp, #160]
    a838:	str	w4, [sp, #168]
    a83c:	str	w10, [sp, #176]
    a840:	str	w7, [sp, #184]
    a844:	stp	x9, x8, [sp, #192]
    a848:	str	w11, [sp, #232]
    a84c:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    a850:	mov	w0, #0xfa2                 	// #4002
    a854:	bl	17b0 <BZ2_bz__AssertH__fail@plt>
    a858:	mov	w0, #0x0                   	// #0
    a85c:	ldp	x9, x8, [sp, #192]
    a860:	ldr	w3, [sp, #128]
    a864:	ldr	w13, [sp, #136]
    a868:	ldr	w18, [sp, #144]
    a86c:	ldp	w6, w5, [sp, #152]
    a870:	ldr	w12, [sp, #160]
    a874:	ldr	w4, [sp, #168]
    a878:	ldr	w10, [sp, #176]
    a87c:	ldr	w7, [sp, #184]
    a880:	ldr	w11, [sp, #232]
    a884:	nop
    a888:	ldr	w1, [sp, #116]
    a88c:	str	w1, [x20, #14936]
    a890:	ldr	w1, [sp, #124]
    a894:	str	w1, [x20, #14944]
    a898:	ldr	w1, [sp, #120]
    a89c:	str	w1, [x20, #14960]
    a8a0:	ldr	w1, [sp, #112]
    a8a4:	str	w3, [x20, #14884]
    a8a8:	str	w25, [x20, #14888]
    a8ac:	str	w13, [x20, #14892]
    a8b0:	str	w27, [x20, #14896]
    a8b4:	str	w26, [x20, #14900]
    a8b8:	str	w28, [x20, #14904]
    a8bc:	str	w18, [x20, #14908]
    a8c0:	str	w6, [x20, #14912]
    a8c4:	str	w5, [x20, #14916]
    a8c8:	str	w11, [x20, #14920]
    a8cc:	str	w12, [x20, #14924]
    a8d0:	str	w4, [x20, #14928]
    a8d4:	str	w10, [x20, #14932]
    a8d8:	str	w7, [x20, #14940]
    a8dc:	str	w22, [x20, #14948]
    a8e0:	str	w23, [x20, #14952]
    a8e4:	str	w24, [x20, #14956]
    a8e8:	str	w1, [x20, #14964]
    a8ec:	ldr	x1, [sp, #104]
    a8f0:	str	x9, [x21, #31352]
    a8f4:	str	x8, [x21, #31360]
    a8f8:	str	x1, [x21, #31368]
    a8fc:	ldp	x19, x20, [sp, #16]
    a900:	ldp	x21, x22, [sp, #32]
    a904:	ldp	x23, x24, [sp, #48]
    a908:	ldp	x25, x26, [sp, #64]
    a90c:	ldp	x27, x28, [sp, #80]
    a910:	ldp	x29, x30, [sp], #256
    a914:	ret
    a918:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    a91c:	add	x1, x1, #0x280
    a920:	ldrh	w0, [x1, w0, uxtw #1]
    a924:	adr	x1, a930 <BZ2_decompress@@Base+0x1c8>
    a928:	add	x0, x1, w0, sxth #2
    a92c:	br	x0
    a930:	movi	v0.4s, #0x0
    a934:	mov	x2, #0xfa00                	// #64000
    a938:	add	x1, x19, x2
    a93c:	add	x20, x19, #0xc, lsl #12
    a940:	add	x21, x19, #0x8, lsl #12
    a944:	stur	q0, [x1, #36]
    a948:	stur	q0, [x1, #52]
    a94c:	stur	q0, [x1, #68]
    a950:	stur	q0, [x1, #84]
    a954:	stur	q0, [x1, #100]
    a958:	ldr	w2, [x19, #36]
    a95c:	str	wzr, [x20, #14964]
    a960:	stp	xzr, xzr, [x1, #120]
    a964:	str	xzr, [x21, #31368]
    a968:	str	w0, [x19, #8]
    a96c:	b	a9a8 <BZ2_decompress@@Base+0x240>
    a970:	ldr	w0, [x14, #8]
    a974:	cbz	w0, d0c8 <BZ2_decompress@@Base+0x2960>
    a978:	ldr	x3, [x14]
    a97c:	add	w2, w2, #0x8
    a980:	ldr	w4, [x19, #32]
    a984:	sub	w0, w0, #0x1
    a988:	ldr	w1, [x14, #12]
    a98c:	ldrb	w5, [x3], #1
    a990:	add	w1, w1, #0x1
    a994:	orr	w4, w5, w4, lsl #8
    a998:	stp	w4, w2, [x19, #32]
    a99c:	str	x3, [x14]
    a9a0:	stp	w0, w1, [x14, #8]
    a9a4:	cbz	w1, d158 <BZ2_decompress@@Base+0x29f0>
    a9a8:	cmp	w2, #0x7
    a9ac:	b.le	a970 <BZ2_decompress@@Base+0x208>
    a9b0:	ldr	w1, [x19, #32]
    a9b4:	sub	w0, w2, #0x8
    a9b8:	str	w0, [x19, #36]
    a9bc:	lsr	w1, w1, w0
    a9c0:	and	w1, w1, #0xff
    a9c4:	cmp	w1, #0x42
    a9c8:	b.ne	d168 <BZ2_decompress@@Base+0x2a00>  // b.any
    a9cc:	mov	x8, #0x0                   	// #0
    a9d0:	mov	x9, #0x0                   	// #0
    a9d4:	mov	w24, #0x0                   	// #0
    a9d8:	mov	w23, #0x0                   	// #0
    a9dc:	mov	w22, #0x0                   	// #0
    a9e0:	mov	w7, #0x0                   	// #0
    a9e4:	mov	w10, #0x0                   	// #0
    a9e8:	mov	w4, #0x0                   	// #0
    a9ec:	mov	w12, #0x0                   	// #0
    a9f0:	mov	w11, #0x0                   	// #0
    a9f4:	mov	w5, #0x0                   	// #0
    a9f8:	mov	w6, #0x0                   	// #0
    a9fc:	mov	w18, #0x0                   	// #0
    aa00:	mov	w28, #0x0                   	// #0
    aa04:	mov	w26, #0x0                   	// #0
    aa08:	mov	w27, #0x0                   	// #0
    aa0c:	mov	w13, #0x0                   	// #0
    aa10:	mov	w25, #0x0                   	// #0
    aa14:	mov	w3, #0x0                   	// #0
    aa18:	str	xzr, [sp, #104]
    aa1c:	stp	wzr, wzr, [sp, #112]
    aa20:	stp	wzr, wzr, [sp, #120]
    aa24:	b	cc4c <BZ2_decompress@@Base+0x24e4>
    aa28:	lsl	w1, w1, #2
    aa2c:	mov	w2, #0x1                   	// #1
    aa30:	str	w3, [sp, #128]
    aa34:	str	w13, [sp, #136]
    aa38:	str	w18, [sp, #144]
    aa3c:	stp	w6, w5, [sp, #152]
    aa40:	str	w12, [sp, #160]
    aa44:	str	w4, [sp, #168]
    aa48:	str	w10, [sp, #176]
    aa4c:	str	w7, [sp, #184]
    aa50:	stp	x9, x8, [sp, #192]
    aa54:	str	w11, [sp, #232]
    aa58:	blr	x15
    aa5c:	str	x0, [x19, #3152]
    aa60:	ldr	w3, [sp, #128]
    aa64:	ldr	w13, [sp, #136]
    aa68:	ldr	w18, [sp, #144]
    aa6c:	ldp	w6, w5, [sp, #152]
    aa70:	ldr	w12, [sp, #160]
    aa74:	ldr	w4, [sp, #168]
    aa78:	ldr	w10, [sp, #176]
    aa7c:	ldr	w7, [sp, #184]
    aa80:	ldr	w11, [sp, #232]
    aa84:	ldp	x9, x8, [sp, #192]
    aa88:	cbz	x0, cbbc <BZ2_decompress@@Base+0x2454>
    aa8c:	mov	w1, #0xe                   	// #14
    aa90:	ldr	w0, [x19, #36]
    aa94:	str	w1, [x19, #8]
    aa98:	b	aad8 <BZ2_decompress@@Base+0x370>
    aa9c:	ldr	x1, [x19]
    aaa0:	ldr	w2, [x1, #8]
    aaa4:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    aaa8:	ldr	x16, [x1]
    aaac:	sub	w15, w2, #0x1
    aab0:	ldr	w14, [x19, #32]
    aab4:	add	w0, w0, #0x8
    aab8:	ldr	w2, [x1, #12]
    aabc:	ldrb	w17, [x16], #1
    aac0:	add	w2, w2, #0x1
    aac4:	orr	w14, w17, w14, lsl #8
    aac8:	stp	w14, w0, [x19, #32]
    aacc:	str	x16, [x1]
    aad0:	stp	w15, w2, [x1, #8]
    aad4:	cbz	w2, cfd8 <BZ2_decompress@@Base+0x2870>
    aad8:	cmp	w0, #0x7
    aadc:	b.le	aa9c <BZ2_decompress@@Base+0x334>
    aae0:	ldr	w1, [x19, #32]
    aae4:	sub	w0, w0, #0x8
    aae8:	str	w0, [x19, #36]
    aaec:	lsr	w1, w1, w0
    aaf0:	and	w1, w1, #0xff
    aaf4:	cmp	w1, #0x17
    aaf8:	b.eq	c7e4 <BZ2_decompress@@Base+0x207c>  // b.none
    aafc:	cmp	w1, #0x31
    ab00:	b.ne	c500 <BZ2_decompress@@Base+0x1d98>  // b.any
    ab04:	mov	w1, #0xf                   	// #15
    ab08:	str	w1, [x19, #8]
    ab0c:	b	ab4c <BZ2_decompress@@Base+0x3e4>
    ab10:	ldr	x1, [x19]
    ab14:	ldr	w2, [x1, #8]
    ab18:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    ab1c:	ldr	x16, [x1]
    ab20:	sub	w15, w2, #0x1
    ab24:	ldr	w14, [x19, #32]
    ab28:	add	w0, w0, #0x8
    ab2c:	ldr	w2, [x1, #12]
    ab30:	ldrb	w17, [x16], #1
    ab34:	add	w2, w2, #0x1
    ab38:	orr	w14, w17, w14, lsl #8
    ab3c:	stp	w14, w0, [x19, #32]
    ab40:	str	x16, [x1]
    ab44:	stp	w15, w2, [x1, #8]
    ab48:	cbz	w2, d038 <BZ2_decompress@@Base+0x28d0>
    ab4c:	cmp	w0, #0x7
    ab50:	b.le	ab10 <BZ2_decompress@@Base+0x3a8>
    ab54:	ldr	w1, [x19, #32]
    ab58:	sub	w0, w0, #0x8
    ab5c:	str	w0, [x19, #36]
    ab60:	lsr	w1, w1, w0
    ab64:	and	w1, w1, #0xff
    ab68:	cmp	w1, #0x41
    ab6c:	b.ne	c500 <BZ2_decompress@@Base+0x1d98>  // b.any
    ab70:	mov	w1, #0x10                  	// #16
    ab74:	str	w1, [x19, #8]
    ab78:	b	abb8 <BZ2_decompress@@Base+0x450>
    ab7c:	ldr	x1, [x19]
    ab80:	ldr	w2, [x1, #8]
    ab84:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    ab88:	ldr	x16, [x1]
    ab8c:	sub	w15, w2, #0x1
    ab90:	ldr	w14, [x19, #32]
    ab94:	add	w0, w0, #0x8
    ab98:	ldr	w2, [x1, #12]
    ab9c:	ldrb	w17, [x16], #1
    aba0:	add	w2, w2, #0x1
    aba4:	orr	w14, w17, w14, lsl #8
    aba8:	stp	w14, w0, [x19, #32]
    abac:	str	x16, [x1]
    abb0:	stp	w15, w2, [x1, #8]
    abb4:	cbz	w2, cff8 <BZ2_decompress@@Base+0x2890>
    abb8:	cmp	w0, #0x7
    abbc:	b.le	ab7c <BZ2_decompress@@Base+0x414>
    abc0:	ldr	w1, [x19, #32]
    abc4:	sub	w0, w0, #0x8
    abc8:	str	w0, [x19, #36]
    abcc:	lsr	w1, w1, w0
    abd0:	and	w1, w1, #0xff
    abd4:	cmp	w1, #0x59
    abd8:	b.ne	c500 <BZ2_decompress@@Base+0x1d98>  // b.any
    abdc:	mov	w1, #0x11                  	// #17
    abe0:	str	w1, [x19, #8]
    abe4:	b	ac24 <BZ2_decompress@@Base+0x4bc>
    abe8:	ldr	x1, [x19]
    abec:	ldr	w2, [x1, #8]
    abf0:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    abf4:	ldr	x16, [x1]
    abf8:	sub	w15, w2, #0x1
    abfc:	ldr	w14, [x19, #32]
    ac00:	add	w0, w0, #0x8
    ac04:	ldr	w2, [x1, #12]
    ac08:	ldrb	w17, [x16], #1
    ac0c:	add	w2, w2, #0x1
    ac10:	orr	w14, w17, w14, lsl #8
    ac14:	stp	w14, w0, [x19, #32]
    ac18:	str	x16, [x1]
    ac1c:	stp	w15, w2, [x1, #8]
    ac20:	cbz	w2, cfc8 <BZ2_decompress@@Base+0x2860>
    ac24:	cmp	w0, #0x7
    ac28:	b.le	abe8 <BZ2_decompress@@Base+0x480>
    ac2c:	ldr	w1, [x19, #32]
    ac30:	sub	w0, w0, #0x8
    ac34:	str	w0, [x19, #36]
    ac38:	lsr	w1, w1, w0
    ac3c:	and	w1, w1, #0xff
    ac40:	cmp	w1, #0x26
    ac44:	b.ne	c500 <BZ2_decompress@@Base+0x1d98>  // b.any
    ac48:	mov	w1, #0x12                  	// #18
    ac4c:	str	w1, [x19, #8]
    ac50:	b	ac90 <BZ2_decompress@@Base+0x528>
    ac54:	ldr	x1, [x19]
    ac58:	ldr	w2, [x1, #8]
    ac5c:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    ac60:	ldr	x16, [x1]
    ac64:	sub	w15, w2, #0x1
    ac68:	ldr	w14, [x19, #32]
    ac6c:	add	w0, w0, #0x8
    ac70:	ldr	w2, [x1, #12]
    ac74:	ldrb	w17, [x16], #1
    ac78:	add	w2, w2, #0x1
    ac7c:	orr	w14, w17, w14, lsl #8
    ac80:	stp	w14, w0, [x19, #32]
    ac84:	str	x16, [x1]
    ac88:	stp	w15, w2, [x1, #8]
    ac8c:	cbz	w2, cf48 <BZ2_decompress@@Base+0x27e0>
    ac90:	cmp	w0, #0x7
    ac94:	b.le	ac54 <BZ2_decompress@@Base+0x4ec>
    ac98:	ldr	w1, [x19, #32]
    ac9c:	sub	w0, w0, #0x8
    aca0:	str	w0, [x19, #36]
    aca4:	lsr	w1, w1, w0
    aca8:	and	w1, w1, #0xff
    acac:	cmp	w1, #0x53
    acb0:	b.ne	c500 <BZ2_decompress@@Base+0x1d98>  // b.any
    acb4:	mov	w1, #0x13                  	// #19
    acb8:	str	w1, [x19, #8]
    acbc:	b	acfc <BZ2_decompress@@Base+0x594>
    acc0:	ldr	x1, [x19]
    acc4:	ldr	w2, [x1, #8]
    acc8:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    accc:	ldr	x16, [x1]
    acd0:	sub	w15, w2, #0x1
    acd4:	ldr	w14, [x19, #32]
    acd8:	add	w0, w0, #0x8
    acdc:	ldr	w2, [x1, #12]
    ace0:	ldrb	w17, [x16], #1
    ace4:	add	w2, w2, #0x1
    ace8:	orr	w14, w17, w14, lsl #8
    acec:	stp	w14, w0, [x19, #32]
    acf0:	str	x16, [x1]
    acf4:	stp	w15, w2, [x1, #8]
    acf8:	cbz	w2, cf58 <BZ2_decompress@@Base+0x27f0>
    acfc:	cmp	w0, #0x7
    ad00:	b.le	acc0 <BZ2_decompress@@Base+0x558>
    ad04:	ldr	w1, [x19, #32]
    ad08:	sub	w0, w0, #0x8
    ad0c:	str	w0, [x19, #36]
    ad10:	lsr	w1, w1, w0
    ad14:	and	w1, w1, #0xff
    ad18:	cmp	w1, #0x59
    ad1c:	b.ne	c500 <BZ2_decompress@@Base+0x1d98>  // b.any
    ad20:	ldp	w2, w1, [x19, #48]
    ad24:	add	w2, w2, #0x1
    ad28:	str	w2, [x19, #48]
    ad2c:	cmp	w1, #0x1
    ad30:	b.gt	cdfc <BZ2_decompress@@Base+0x2694>
    ad34:	str	wzr, [x19, #3176]
    ad38:	b	cbd8 <BZ2_decompress@@Base+0x2470>
    ad3c:	ldr	w0, [x19, #36]
    ad40:	mov	w1, #0x23                  	// #35
    ad44:	str	w1, [x19, #8]
    ad48:	b	ad88 <BZ2_decompress@@Base+0x620>
    ad4c:	ldr	x1, [x19]
    ad50:	ldr	w2, [x1, #8]
    ad54:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    ad58:	ldr	x16, [x1]
    ad5c:	sub	w15, w2, #0x1
    ad60:	ldr	w14, [x19, #32]
    ad64:	add	w0, w0, #0x8
    ad68:	ldr	w2, [x1, #12]
    ad6c:	ldrb	w17, [x16], #1
    ad70:	add	w2, w2, #0x1
    ad74:	orr	w14, w17, w14, lsl #8
    ad78:	stp	w14, w0, [x19, #32]
    ad7c:	str	x16, [x1]
    ad80:	stp	w15, w2, [x1, #8]
    ad84:	cbz	w2, d018 <BZ2_decompress@@Base+0x28b0>
    ad88:	cmp	w0, #0x0
    ad8c:	b.le	ad4c <BZ2_decompress@@Base+0x5e4>
    ad90:	ldr	w1, [x19, #32]
    ad94:	sub	w0, w0, #0x1
    ad98:	str	w0, [x19, #36]
    ad9c:	sub	w2, w7, #0x1
    ada0:	lsr	w0, w1, w0
    ada4:	tst	x0, #0x1
    ada8:	csinc	w7, w2, w7, ne  // ne = any
    adac:	sub	w0, w7, #0x1
    adb0:	cmp	w0, #0x13
    adb4:	b.hi	c500 <BZ2_decompress@@Base+0x1d98>  // b.pmore
    adb8:	mov	w1, #0x22                  	// #34
    adbc:	ldr	w0, [x19, #36]
    adc0:	str	w1, [x19, #8]
    adc4:	b	ae04 <BZ2_decompress@@Base+0x69c>
    adc8:	ldr	x1, [x19]
    adcc:	ldr	w2, [x1, #8]
    add0:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    add4:	ldr	x16, [x1]
    add8:	sub	w15, w2, #0x1
    addc:	ldr	w14, [x19, #32]
    ade0:	add	w0, w0, #0x8
    ade4:	ldr	w2, [x1, #12]
    ade8:	ldrb	w17, [x16], #1
    adec:	add	w2, w2, #0x1
    adf0:	orr	w14, w17, w14, lsl #8
    adf4:	stp	w14, w0, [x19, #32]
    adf8:	str	x16, [x1]
    adfc:	stp	w15, w2, [x1, #8]
    ae00:	cbz	w2, d058 <BZ2_decompress@@Base+0x28f0>
    ae04:	cmp	w0, #0x0
    ae08:	b.le	adc8 <BZ2_decompress@@Base+0x660>
    ae0c:	ldr	w1, [x19, #32]
    ae10:	sub	w0, w0, #0x1
    ae14:	str	w0, [x19, #36]
    ae18:	lsr	w1, w1, w0
    ae1c:	tbnz	w1, #0, ad40 <BZ2_decompress@@Base+0x5d8>
    ae20:	sbfiz	x0, x13, #7, #32
    ae24:	add	x0, x0, w13, sxtw
    ae28:	add	x0, x19, x0, lsl #1
    ae2c:	add	x0, x0, w3, sxtw
    ae30:	add	w3, w3, #0x1
    ae34:	add	x0, x0, #0xa, lsl #12
    ae38:	strb	w7, [x0, #2928]
    ae3c:	cmp	w3, w27
    ae40:	b.lt	adac <BZ2_decompress@@Base+0x644>  // b.tstop
    ae44:	add	w13, w13, #0x1
    ae48:	cmp	w13, w26
    ae4c:	b.lt	bac4 <BZ2_decompress@@Base+0x135c>  // b.tstop
    ae50:	cmp	w26, #0x0
    ae54:	b.le	d4e0 <BZ2_decompress@@Base+0x2d78>
    ae58:	sub	w1, w27, #0x1
    ae5c:	mov	x13, #0xab70                	// #43888
    ae60:	lsr	w14, w27, #4
    ae64:	add	x3, x19, x13
    ae68:	mov	x12, #0xb17c                	// #45436
    ae6c:	mov	x15, #0xfa0c                	// #64012
    ae70:	add	x0, x19, x12
    ae74:	add	x2, x19, x15
    ae78:	str	w1, [sp, #128]
    ae7c:	and	w1, w27, #0xfffffff0
    ae80:	mov	x13, #0x0                   	// #0
    ae84:	str	w25, [sp, #136]
    ae88:	mov	w25, w1
    ae8c:	str	w28, [sp, #144]
    ae90:	mov	x28, x2
    ae94:	str	w22, [sp, #160]
    ae98:	mov	x22, x3
    ae9c:	str	w23, [sp, #168]
    aea0:	mov	x23, x0
    aea4:	str	w24, [sp, #176]
    aea8:	mov	x24, x13
    aeac:	stp	x20, x21, [sp, #200]
    aeb0:	mov	w21, w27
    aeb4:	mov	w27, w14
    aeb8:	stp	w11, w10, [sp, #152]
    aebc:	stp	x9, x8, [sp, #184]
    aec0:	str	w7, [sp, #232]
    aec4:	nop
    aec8:	cmp	w21, #0x0
    aecc:	mov	w2, w24
    aed0:	mov	w5, #0x0                   	// #0
    aed4:	mov	w20, #0x20                  	// #32
    aed8:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    aedc:	ldr	w0, [sp, #128]
    aee0:	cmp	w0, #0xe
    aee4:	b.ls	d2a8 <BZ2_decompress@@Base+0x2b40>  // b.plast
    aee8:	ldr	q2, [x22]
    aeec:	cmp	w27, #0x1
    aef0:	uxtl	v0.8h, v2.8b
    aef4:	uxtl2	v2.8h, v2.16b
    aef8:	uxtl	v4.4s, v0.4h
    aefc:	uxtl2	v0.4s, v0.8h
    af00:	uxtl	v3.4s, v2.4h
    af04:	uxtl2	v2.4s, v2.8h
    af08:	smax	v1.4s, v0.4s, v4.4s
    af0c:	smin	v0.4s, v0.4s, v4.4s
    af10:	movi	v4.4s, #0x0
    af14:	smax	v1.4s, v1.4s, v4.4s
    af18:	movi	v4.4s, #0x20
    af1c:	smax	v1.4s, v1.4s, v3.4s
    af20:	smin	v0.4s, v0.4s, v4.4s
    af24:	smax	v1.4s, v1.4s, v2.4s
    af28:	smin	v0.4s, v0.4s, v3.4s
    af2c:	smin	v0.4s, v0.4s, v2.4s
    af30:	b.ls	b328 <BZ2_decompress@@Base+0xbc0>  // b.plast
    af34:	ldr	q3, [x22, #16]
    af38:	cmp	w27, #0x2
    af3c:	uxtl	v2.8h, v3.8b
    af40:	uxtl2	v3.8h, v3.16b
    af44:	uxtl	v6.4s, v2.4h
    af48:	uxtl2	v2.4s, v2.8h
    af4c:	uxtl	v5.4s, v3.4h
    af50:	uxtl2	v3.4s, v3.8h
    af54:	smax	v4.4s, v2.4s, v6.4s
    af58:	smin	v2.4s, v2.4s, v6.4s
    af5c:	smax	v4.4s, v4.4s, v5.4s
    af60:	smin	v2.4s, v2.4s, v5.4s
    af64:	smax	v4.4s, v4.4s, v3.4s
    af68:	smin	v2.4s, v2.4s, v3.4s
    af6c:	smax	v1.4s, v1.4s, v4.4s
    af70:	smin	v0.4s, v0.4s, v2.4s
    af74:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    af78:	ldr	q3, [x22, #32]
    af7c:	cmp	w27, #0x3
    af80:	uxtl	v2.8h, v3.8b
    af84:	uxtl2	v3.8h, v3.16b
    af88:	uxtl	v6.4s, v2.4h
    af8c:	uxtl2	v2.4s, v2.8h
    af90:	uxtl	v5.4s, v3.4h
    af94:	uxtl2	v3.4s, v3.8h
    af98:	smax	v4.4s, v2.4s, v6.4s
    af9c:	smin	v2.4s, v2.4s, v6.4s
    afa0:	smax	v4.4s, v4.4s, v5.4s
    afa4:	smin	v2.4s, v2.4s, v5.4s
    afa8:	smax	v4.4s, v4.4s, v3.4s
    afac:	smin	v2.4s, v2.4s, v3.4s
    afb0:	smax	v1.4s, v1.4s, v4.4s
    afb4:	smin	v0.4s, v0.4s, v2.4s
    afb8:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    afbc:	ldr	q3, [x22, #48]
    afc0:	cmp	w27, #0x4
    afc4:	uxtl	v2.8h, v3.8b
    afc8:	uxtl2	v3.8h, v3.16b
    afcc:	uxtl	v6.4s, v2.4h
    afd0:	uxtl2	v2.4s, v2.8h
    afd4:	uxtl	v5.4s, v3.4h
    afd8:	uxtl2	v3.4s, v3.8h
    afdc:	smax	v4.4s, v2.4s, v6.4s
    afe0:	smin	v2.4s, v2.4s, v6.4s
    afe4:	smax	v4.4s, v4.4s, v5.4s
    afe8:	smin	v2.4s, v2.4s, v5.4s
    afec:	smax	v4.4s, v4.4s, v3.4s
    aff0:	smin	v2.4s, v2.4s, v3.4s
    aff4:	smax	v1.4s, v1.4s, v4.4s
    aff8:	smin	v0.4s, v0.4s, v2.4s
    affc:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b000:	ldr	q3, [x22, #64]
    b004:	cmp	w27, #0x5
    b008:	uxtl	v2.8h, v3.8b
    b00c:	uxtl2	v3.8h, v3.16b
    b010:	uxtl	v6.4s, v2.4h
    b014:	uxtl2	v2.4s, v2.8h
    b018:	uxtl	v5.4s, v3.4h
    b01c:	uxtl2	v3.4s, v3.8h
    b020:	smax	v4.4s, v2.4s, v6.4s
    b024:	smin	v2.4s, v2.4s, v6.4s
    b028:	smax	v4.4s, v4.4s, v5.4s
    b02c:	smin	v2.4s, v2.4s, v5.4s
    b030:	smax	v4.4s, v4.4s, v3.4s
    b034:	smin	v2.4s, v2.4s, v3.4s
    b038:	smax	v1.4s, v1.4s, v4.4s
    b03c:	smin	v0.4s, v0.4s, v2.4s
    b040:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b044:	ldr	q3, [x22, #80]
    b048:	cmp	w27, #0x6
    b04c:	uxtl	v2.8h, v3.8b
    b050:	uxtl2	v3.8h, v3.16b
    b054:	uxtl	v6.4s, v2.4h
    b058:	uxtl2	v2.4s, v2.8h
    b05c:	uxtl	v5.4s, v3.4h
    b060:	uxtl2	v3.4s, v3.8h
    b064:	smax	v4.4s, v2.4s, v6.4s
    b068:	smin	v2.4s, v2.4s, v6.4s
    b06c:	smax	v4.4s, v4.4s, v5.4s
    b070:	smin	v2.4s, v2.4s, v5.4s
    b074:	smax	v4.4s, v4.4s, v3.4s
    b078:	smin	v2.4s, v2.4s, v3.4s
    b07c:	smax	v1.4s, v1.4s, v4.4s
    b080:	smin	v0.4s, v0.4s, v2.4s
    b084:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b088:	ldr	q3, [x22, #96]
    b08c:	cmp	w27, #0x7
    b090:	uxtl	v2.8h, v3.8b
    b094:	uxtl2	v3.8h, v3.16b
    b098:	uxtl	v6.4s, v2.4h
    b09c:	uxtl2	v2.4s, v2.8h
    b0a0:	uxtl	v5.4s, v3.4h
    b0a4:	uxtl2	v3.4s, v3.8h
    b0a8:	smax	v4.4s, v2.4s, v6.4s
    b0ac:	smin	v2.4s, v2.4s, v6.4s
    b0b0:	smax	v4.4s, v4.4s, v5.4s
    b0b4:	smin	v2.4s, v2.4s, v5.4s
    b0b8:	smax	v4.4s, v4.4s, v3.4s
    b0bc:	smin	v2.4s, v2.4s, v3.4s
    b0c0:	smax	v1.4s, v1.4s, v4.4s
    b0c4:	smin	v0.4s, v0.4s, v2.4s
    b0c8:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b0cc:	ldr	q3, [x22, #112]
    b0d0:	cmp	w27, #0x8
    b0d4:	uxtl	v2.8h, v3.8b
    b0d8:	uxtl2	v3.8h, v3.16b
    b0dc:	uxtl	v6.4s, v2.4h
    b0e0:	uxtl2	v2.4s, v2.8h
    b0e4:	uxtl	v5.4s, v3.4h
    b0e8:	uxtl2	v3.4s, v3.8h
    b0ec:	smax	v4.4s, v2.4s, v6.4s
    b0f0:	smin	v2.4s, v2.4s, v6.4s
    b0f4:	smax	v4.4s, v4.4s, v5.4s
    b0f8:	smin	v2.4s, v2.4s, v5.4s
    b0fc:	smax	v4.4s, v4.4s, v3.4s
    b100:	smin	v2.4s, v2.4s, v3.4s
    b104:	smax	v1.4s, v1.4s, v4.4s
    b108:	smin	v0.4s, v0.4s, v2.4s
    b10c:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b110:	ldr	q3, [x22, #128]
    b114:	cmp	w27, #0x9
    b118:	uxtl	v2.8h, v3.8b
    b11c:	uxtl2	v3.8h, v3.16b
    b120:	uxtl	v6.4s, v2.4h
    b124:	uxtl2	v2.4s, v2.8h
    b128:	uxtl	v5.4s, v3.4h
    b12c:	uxtl2	v3.4s, v3.8h
    b130:	smax	v4.4s, v2.4s, v6.4s
    b134:	smin	v2.4s, v2.4s, v6.4s
    b138:	smax	v4.4s, v4.4s, v5.4s
    b13c:	smin	v2.4s, v2.4s, v5.4s
    b140:	smax	v4.4s, v4.4s, v3.4s
    b144:	smin	v2.4s, v2.4s, v3.4s
    b148:	smax	v1.4s, v1.4s, v4.4s
    b14c:	smin	v0.4s, v0.4s, v2.4s
    b150:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b154:	ldr	q3, [x22, #144]
    b158:	cmp	w27, #0xa
    b15c:	uxtl	v2.8h, v3.8b
    b160:	uxtl2	v3.8h, v3.16b
    b164:	uxtl	v6.4s, v2.4h
    b168:	uxtl2	v2.4s, v2.8h
    b16c:	uxtl	v5.4s, v3.4h
    b170:	uxtl2	v3.4s, v3.8h
    b174:	smax	v4.4s, v2.4s, v6.4s
    b178:	smin	v2.4s, v2.4s, v6.4s
    b17c:	smax	v4.4s, v4.4s, v5.4s
    b180:	smin	v2.4s, v2.4s, v5.4s
    b184:	smax	v4.4s, v4.4s, v3.4s
    b188:	smin	v2.4s, v2.4s, v3.4s
    b18c:	smax	v1.4s, v1.4s, v4.4s
    b190:	smin	v0.4s, v0.4s, v2.4s
    b194:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b198:	ldr	q3, [x22, #160]
    b19c:	cmp	w27, #0xb
    b1a0:	uxtl	v2.8h, v3.8b
    b1a4:	uxtl2	v3.8h, v3.16b
    b1a8:	uxtl	v6.4s, v2.4h
    b1ac:	uxtl2	v2.4s, v2.8h
    b1b0:	uxtl	v5.4s, v3.4h
    b1b4:	uxtl2	v3.4s, v3.8h
    b1b8:	smax	v4.4s, v2.4s, v6.4s
    b1bc:	smin	v2.4s, v2.4s, v6.4s
    b1c0:	smax	v4.4s, v4.4s, v5.4s
    b1c4:	smin	v2.4s, v2.4s, v5.4s
    b1c8:	smax	v4.4s, v4.4s, v3.4s
    b1cc:	smin	v2.4s, v2.4s, v3.4s
    b1d0:	smax	v1.4s, v1.4s, v4.4s
    b1d4:	smin	v0.4s, v0.4s, v2.4s
    b1d8:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b1dc:	ldr	q3, [x22, #176]
    b1e0:	cmp	w27, #0xc
    b1e4:	uxtl	v2.8h, v3.8b
    b1e8:	uxtl2	v3.8h, v3.16b
    b1ec:	uxtl	v6.4s, v2.4h
    b1f0:	uxtl2	v2.4s, v2.8h
    b1f4:	uxtl	v5.4s, v3.4h
    b1f8:	uxtl2	v3.4s, v3.8h
    b1fc:	smax	v4.4s, v2.4s, v6.4s
    b200:	smin	v2.4s, v2.4s, v6.4s
    b204:	smax	v4.4s, v4.4s, v5.4s
    b208:	smin	v2.4s, v2.4s, v5.4s
    b20c:	smax	v4.4s, v4.4s, v3.4s
    b210:	smin	v2.4s, v2.4s, v3.4s
    b214:	smax	v1.4s, v1.4s, v4.4s
    b218:	smin	v0.4s, v0.4s, v2.4s
    b21c:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b220:	ldr	q3, [x22, #192]
    b224:	cmp	w27, #0xd
    b228:	uxtl	v2.8h, v3.8b
    b22c:	uxtl2	v3.8h, v3.16b
    b230:	uxtl	v6.4s, v2.4h
    b234:	uxtl2	v2.4s, v2.8h
    b238:	uxtl	v5.4s, v3.4h
    b23c:	uxtl2	v3.4s, v3.8h
    b240:	smax	v4.4s, v2.4s, v6.4s
    b244:	smin	v2.4s, v2.4s, v6.4s
    b248:	smax	v4.4s, v4.4s, v5.4s
    b24c:	smin	v2.4s, v2.4s, v5.4s
    b250:	smax	v4.4s, v4.4s, v3.4s
    b254:	smin	v2.4s, v2.4s, v3.4s
    b258:	smax	v1.4s, v1.4s, v4.4s
    b25c:	smin	v0.4s, v0.4s, v2.4s
    b260:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b264:	ldr	q3, [x22, #208]
    b268:	cmp	w27, #0xe
    b26c:	uxtl	v2.8h, v3.8b
    b270:	uxtl2	v3.8h, v3.16b
    b274:	uxtl	v6.4s, v2.4h
    b278:	uxtl2	v2.4s, v2.8h
    b27c:	uxtl	v5.4s, v3.4h
    b280:	uxtl2	v3.4s, v3.8h
    b284:	smax	v4.4s, v2.4s, v6.4s
    b288:	smin	v2.4s, v2.4s, v6.4s
    b28c:	smax	v4.4s, v4.4s, v5.4s
    b290:	smin	v2.4s, v2.4s, v5.4s
    b294:	smax	v4.4s, v4.4s, v3.4s
    b298:	smin	v2.4s, v2.4s, v3.4s
    b29c:	smax	v1.4s, v1.4s, v4.4s
    b2a0:	smin	v0.4s, v0.4s, v2.4s
    b2a4:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b2a8:	ldr	q3, [x22, #224]
    b2ac:	cmp	w27, #0xf
    b2b0:	uxtl	v2.8h, v3.8b
    b2b4:	uxtl2	v3.8h, v3.16b
    b2b8:	uxtl	v6.4s, v2.4h
    b2bc:	uxtl2	v2.4s, v2.8h
    b2c0:	uxtl	v5.4s, v3.4h
    b2c4:	uxtl2	v3.4s, v3.8h
    b2c8:	smax	v4.4s, v2.4s, v6.4s
    b2cc:	smin	v2.4s, v2.4s, v6.4s
    b2d0:	smax	v4.4s, v4.4s, v5.4s
    b2d4:	smin	v2.4s, v2.4s, v5.4s
    b2d8:	smax	v4.4s, v4.4s, v3.4s
    b2dc:	smin	v2.4s, v2.4s, v3.4s
    b2e0:	smax	v1.4s, v1.4s, v4.4s
    b2e4:	smin	v0.4s, v0.4s, v2.4s
    b2e8:	b.eq	b328 <BZ2_decompress@@Base+0xbc0>  // b.none
    b2ec:	ldr	q3, [x22, #240]
    b2f0:	uxtl	v2.8h, v3.8b
    b2f4:	uxtl2	v3.8h, v3.16b
    b2f8:	uxtl	v6.4s, v2.4h
    b2fc:	uxtl2	v2.4s, v2.8h
    b300:	uxtl	v5.4s, v3.4h
    b304:	uxtl2	v3.4s, v3.8h
    b308:	smax	v4.4s, v2.4s, v6.4s
    b30c:	smin	v2.4s, v2.4s, v6.4s
    b310:	smax	v4.4s, v4.4s, v5.4s
    b314:	smin	v2.4s, v2.4s, v5.4s
    b318:	smax	v4.4s, v4.4s, v3.4s
    b31c:	smin	v2.4s, v2.4s, v3.4s
    b320:	smax	v1.4s, v1.4s, v4.4s
    b324:	smin	v0.4s, v0.4s, v2.4s
    b328:	sminv	s0, v0.4s
    b32c:	cmp	w21, w25
    b330:	smaxv	s1, v1.4s
    b334:	mov	w20, v0.s[0]
    b338:	mov	w5, v1.s[0]
    b33c:	b.eq	b5a8 <BZ2_decompress@@Base+0xe40>  // b.none
    b340:	mov	w7, w25
    b344:	sxtw	x9, w2
    b348:	sbfiz	x1, x2, #7, #32
    b34c:	add	x1, x1, x9
    b350:	add	w2, w7, #0x1
    b354:	add	x1, x19, x1, lsl #1
    b358:	add	x8, x1, w7, sxtw
    b35c:	add	x8, x8, #0xa, lsl #12
    b360:	ldrb	w8, [x8, #2928]
    b364:	cmp	w5, w8
    b368:	csel	w5, w5, w8, ge  // ge = tcont
    b36c:	cmp	w20, w8
    b370:	csel	w20, w20, w8, le
    b374:	cmp	w21, w2
    b378:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b37c:	add	x2, x1, w2, sxtw
    b380:	add	w8, w7, #0x2
    b384:	add	x2, x2, #0xa, lsl #12
    b388:	ldrb	w2, [x2, #2928]
    b38c:	cmp	w5, w2
    b390:	csel	w5, w5, w2, ge  // ge = tcont
    b394:	cmp	w20, w2
    b398:	csel	w20, w20, w2, le
    b39c:	cmp	w21, w8
    b3a0:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b3a4:	add	x2, x1, w8, sxtw
    b3a8:	add	w8, w7, #0x3
    b3ac:	add	x2, x2, #0xa, lsl #12
    b3b0:	ldrb	w2, [x2, #2928]
    b3b4:	cmp	w5, w2
    b3b8:	csel	w5, w5, w2, ge  // ge = tcont
    b3bc:	cmp	w20, w2
    b3c0:	csel	w20, w20, w2, le
    b3c4:	cmp	w21, w8
    b3c8:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b3cc:	add	x2, x1, w8, sxtw
    b3d0:	add	w8, w7, #0x4
    b3d4:	add	x2, x2, #0xa, lsl #12
    b3d8:	ldrb	w2, [x2, #2928]
    b3dc:	cmp	w5, w2
    b3e0:	csel	w5, w5, w2, ge  // ge = tcont
    b3e4:	cmp	w20, w2
    b3e8:	csel	w20, w20, w2, le
    b3ec:	cmp	w21, w8
    b3f0:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b3f4:	add	x2, x1, w8, sxtw
    b3f8:	add	w8, w7, #0x5
    b3fc:	add	x2, x2, #0xa, lsl #12
    b400:	ldrb	w2, [x2, #2928]
    b404:	cmp	w5, w2
    b408:	csel	w5, w5, w2, ge  // ge = tcont
    b40c:	cmp	w20, w2
    b410:	csel	w20, w20, w2, le
    b414:	cmp	w21, w8
    b418:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b41c:	add	x2, x1, w8, sxtw
    b420:	add	w8, w7, #0x6
    b424:	add	x2, x2, #0xa, lsl #12
    b428:	ldrb	w2, [x2, #2928]
    b42c:	cmp	w5, w2
    b430:	csel	w5, w5, w2, ge  // ge = tcont
    b434:	cmp	w20, w2
    b438:	csel	w20, w20, w2, le
    b43c:	cmp	w21, w8
    b440:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b444:	add	x2, x1, w8, sxtw
    b448:	add	w8, w7, #0x7
    b44c:	add	x2, x2, #0xa, lsl #12
    b450:	ldrb	w2, [x2, #2928]
    b454:	cmp	w5, w2
    b458:	csel	w5, w5, w2, ge  // ge = tcont
    b45c:	cmp	w20, w2
    b460:	csel	w20, w20, w2, le
    b464:	cmp	w21, w8
    b468:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b46c:	add	x2, x1, w8, sxtw
    b470:	add	w8, w7, #0x8
    b474:	add	x2, x2, #0xa, lsl #12
    b478:	ldrb	w2, [x2, #2928]
    b47c:	cmp	w5, w2
    b480:	csel	w5, w5, w2, ge  // ge = tcont
    b484:	cmp	w20, w2
    b488:	csel	w20, w20, w2, le
    b48c:	cmp	w21, w8
    b490:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b494:	add	x2, x1, w8, sxtw
    b498:	add	w8, w7, #0x9
    b49c:	add	x2, x2, #0xa, lsl #12
    b4a0:	ldrb	w2, [x2, #2928]
    b4a4:	cmp	w5, w2
    b4a8:	csel	w5, w5, w2, ge  // ge = tcont
    b4ac:	cmp	w20, w2
    b4b0:	csel	w20, w20, w2, le
    b4b4:	cmp	w21, w8
    b4b8:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b4bc:	add	x1, x1, w8, sxtw
    b4c0:	add	w8, w7, #0xa
    b4c4:	add	x1, x1, #0xa, lsl #12
    b4c8:	ldrb	w1, [x1, #2928]
    b4cc:	cmp	w5, w1
    b4d0:	csel	w5, w5, w1, ge  // ge = tcont
    b4d4:	cmp	w20, w1
    b4d8:	csel	w20, w20, w1, le
    b4dc:	cmp	w21, w8
    b4e0:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b4e4:	add	x9, x9, x9, lsl #7
    b4e8:	add	w10, w7, #0xb
    b4ec:	add	x2, x19, x9, lsl #1
    b4f0:	add	x1, x2, w8, sxtw
    b4f4:	add	x1, x1, #0xa, lsl #12
    b4f8:	ldrb	w1, [x1, #2928]
    b4fc:	cmp	w5, w1
    b500:	csel	w5, w5, w1, ge  // ge = tcont
    b504:	cmp	w20, w1
    b508:	csel	w20, w20, w1, le
    b50c:	cmp	w21, w10
    b510:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b514:	add	x1, x2, w10, sxtw
    b518:	add	w8, w7, #0xc
    b51c:	add	x1, x1, #0xa, lsl #12
    b520:	ldrb	w1, [x1, #2928]
    b524:	cmp	w5, w1
    b528:	csel	w5, w5, w1, ge  // ge = tcont
    b52c:	cmp	w20, w1
    b530:	csel	w20, w20, w1, le
    b534:	cmp	w21, w8
    b538:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b53c:	add	x8, x2, w8, sxtw
    b540:	add	w1, w7, #0xd
    b544:	add	x8, x8, #0xa, lsl #12
    b548:	ldrb	w8, [x8, #2928]
    b54c:	cmp	w5, w8
    b550:	csel	w5, w5, w8, ge  // ge = tcont
    b554:	cmp	w20, w8
    b558:	csel	w20, w20, w8, le
    b55c:	cmp	w21, w1
    b560:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b564:	add	x8, x2, w1, sxtw
    b568:	add	w1, w7, #0xe
    b56c:	add	x7, x8, #0xa, lsl #12
    b570:	ldrb	w7, [x7, #2928]
    b574:	cmp	w5, w7
    b578:	csel	w5, w5, w7, ge  // ge = tcont
    b57c:	cmp	w20, w7
    b580:	csel	w20, w20, w7, le
    b584:	cmp	w21, w1
    b588:	b.le	b5a8 <BZ2_decompress@@Base+0xe40>
    b58c:	add	x1, x2, w1, sxtw
    b590:	add	x1, x1, #0xa, lsl #12
    b594:	ldrb	w1, [x1, #2928]
    b598:	cmp	w5, w1
    b59c:	csel	w5, w5, w1, ge  // ge = tcont
    b5a0:	cmp	w20, w1
    b5a4:	csel	w20, w20, w1, le
    b5a8:	mov	x10, #0x3060                	// #12384
    b5ac:	mov	x11, #0x1830                	// #6192
    b5b0:	mov	x3, x22
    b5b4:	add	x2, x23, x10
    b5b8:	add	x1, x23, x11
    b5bc:	mov	x0, x23
    b5c0:	mov	w6, w21
    b5c4:	mov	w4, w20
    b5c8:	bl	1650 <BZ2_hbCreateDecodeTables@plt>
    b5cc:	str	w20, [x28, x24, lsl #2]
    b5d0:	add	x24, x24, #0x1
    b5d4:	add	x22, x22, #0x102
    b5d8:	cmp	w26, w24
    b5dc:	add	x23, x23, #0x408
    b5e0:	b.gt	aec8 <BZ2_decompress@@Base+0x760>
    b5e4:	mov	w27, w21
    b5e8:	ldr	w25, [sp, #136]
    b5ec:	ldp	x9, x8, [sp, #184]
    b5f0:	mov	w13, w26
    b5f4:	ldp	x20, x21, [sp, #200]
    b5f8:	ldr	w28, [sp, #144]
    b5fc:	ldp	w11, w10, [sp, #152]
    b600:	ldr	w22, [sp, #160]
    b604:	ldr	w23, [sp, #168]
    b608:	ldr	w24, [sp, #176]
    b60c:	ldr	w7, [sp, #232]
    b610:	ldr	w4, [x19, #40]
    b614:	mov	w3, #0x86a0                	// #34464
    b618:	movk	w3, #0x1, lsl #16
    b61c:	ldr	w5, [x19, #3192]
    b620:	mov	x2, #0x400                 	// #1024
    b624:	mov	w1, #0x0                   	// #0
    b628:	add	w18, w5, #0x1
    b62c:	add	x0, x19, #0x44
    b630:	mul	w12, w4, w3
    b634:	str	w18, [sp, #136]
    b638:	str	w12, [sp, #128]
    b63c:	str	w13, [sp, #144]
    b640:	stp	w11, w10, [sp, #152]
    b644:	stp	x9, x8, [sp, #160]
    b648:	str	w7, [sp, #232]
    b64c:	bl	1600 <memset@plt>
    b650:	mov	w1, #0xff0                 	// #4080
    b654:	mov	x2, #0xfd0                 	// #4048
    b658:	str	w1, [x19, #7880]
    b65c:	mov	x1, #0x9190                	// #37264
    b660:	mov	x9, #0x1e00                	// #7680
    b664:	movk	x2, #0xfe0, lsl #32
    b668:	add	x0, x19, x9
    b66c:	movk	x1, #0x9392, lsl #16
    b670:	movk	x1, #0x9594, lsl #32
    b674:	str	x2, [x19, #7872]
    b678:	mov	x2, #0x9998                	// #39320
    b67c:	movk	x1, #0x9796, lsl #48
    b680:	movk	x2, #0x9b9a, lsl #16
    b684:	stur	x1, [x0, #28]
    b688:	movk	x2, #0x9d9c, lsl #32
    b68c:	mov	x1, #0xa1a0                	// #41376
    b690:	movk	x2, #0x9f9e, lsl #48
    b694:	movk	x1, #0xa3a2, lsl #16
    b698:	movk	x1, #0xa5a4, lsl #32
    b69c:	stur	x2, [x0, #36]
    b6a0:	mov	x2, #0xa9a8                	// #43432
    b6a4:	movk	x1, #0xa7a6, lsl #48
    b6a8:	movk	x2, #0xabaa, lsl #16
    b6ac:	stur	x1, [x0, #44]
    b6b0:	movk	x2, #0xadac, lsl #32
    b6b4:	mov	x1, #0xb1b0                	// #45488
    b6b8:	movk	x2, #0xafae, lsl #48
    b6bc:	movk	x1, #0xb3b2, lsl #16
    b6c0:	movk	x1, #0xb5b4, lsl #32
    b6c4:	stur	x2, [x0, #52]
    b6c8:	mov	x2, #0xb9b8                	// #47544
    b6cc:	movk	x1, #0xb7b6, lsl #48
    b6d0:	movk	x2, #0xbbba, lsl #16
    b6d4:	stur	x1, [x0, #60]
    b6d8:	movk	x2, #0xbdbc, lsl #32
    b6dc:	mov	x1, #0xc1c0                	// #49600
    b6e0:	movk	x2, #0xbfbe, lsl #48
    b6e4:	movk	x1, #0xc3c2, lsl #16
    b6e8:	movk	x1, #0xc5c4, lsl #32
    b6ec:	stur	x2, [x0, #68]
    b6f0:	mov	x2, #0xc9c8                	// #51656
    b6f4:	movk	x1, #0xc7c6, lsl #48
    b6f8:	movk	x2, #0xcbca, lsl #16
    b6fc:	stur	x1, [x0, #76]
    b700:	movk	x2, #0xcdcc, lsl #32
    b704:	mov	x1, #0xd1d0                	// #53712
    b708:	movk	x2, #0xcfce, lsl #48
    b70c:	movk	x1, #0xd3d2, lsl #16
    b710:	movk	x1, #0xd5d4, lsl #32
    b714:	stur	x2, [x0, #84]
    b718:	mov	x2, #0xd9d8                	// #55768
    b71c:	movk	x1, #0xd7d6, lsl #48
    b720:	movk	x2, #0xdbda, lsl #16
    b724:	stur	x1, [x0, #92]
    b728:	movk	x2, #0xdddc, lsl #32
    b72c:	mov	x1, #0xe1e0                	// #57824
    b730:	movk	x2, #0xdfde, lsl #48
    b734:	movk	x1, #0xe3e2, lsl #16
    b738:	movk	x1, #0xe5e4, lsl #32
    b73c:	stur	x2, [x0, #100]
    b740:	mov	x2, #0xe9e8                	// #59880
    b744:	movk	x1, #0xe7e6, lsl #48
    b748:	movk	x2, #0xebea, lsl #16
    b74c:	stur	x1, [x0, #108]
    b750:	movk	x2, #0xedec, lsl #32
    b754:	mov	x1, #0xf1f0                	// #61936
    b758:	movk	x2, #0xefee, lsl #48
    b75c:	movk	x1, #0xf3f2, lsl #16
    b760:	movk	x1, #0xf5f4, lsl #32
    b764:	stur	x2, [x0, #116]
    b768:	mov	x2, #0xf9f8                	// #63992
    b76c:	movk	x1, #0xf7f6, lsl #48
    b770:	movk	x2, #0xfbfa, lsl #16
    b774:	stur	x1, [x0, #124]
    b778:	movk	x2, #0xfdfc, lsl #32
    b77c:	mov	x1, #0xf60                 	// #3936
    b780:	movk	x2, #0xfffe, lsl #48
    b784:	movk	x1, #0xf70, lsl #32
    b788:	stur	x2, [x0, #132]
    b78c:	mov	x2, #0xf80                 	// #3968
    b790:	stur	x1, [x0, #164]
    b794:	mov	x1, #0xfa0                 	// #4000
    b798:	movk	x2, #0xf90, lsl #32
    b79c:	movk	x1, #0xfb0, lsl #32
    b7a0:	stur	x2, [x0, #172]
    b7a4:	mov	x2, #0xf30                 	// #3888
    b7a8:	stur	x1, [x0, #180]
    b7ac:	mov	w1, #0xfc0                 	// #4032
    b7b0:	movk	x2, #0xf40, lsl #32
    b7b4:	str	w1, [x19, #7868]
    b7b8:	mov	x1, #0x908                 	// #2312
    b7bc:	str	x2, [x19, #7832]
    b7c0:	movk	x1, #0xb0a, lsl #16
    b7c4:	mov	w2, #0xf50                 	// #3920
    b7c8:	movk	x1, #0xd0c, lsl #32
    b7cc:	str	w2, [x19, #7840]
    b7d0:	mov	x2, #0x100                 	// #256
    b7d4:	movk	x1, #0xf0e, lsl #48
    b7d8:	movk	x2, #0x302, lsl #16
    b7dc:	stur	x1, [x0, #-108]
    b7e0:	movk	x2, #0x504, lsl #32
    b7e4:	mov	x1, #0x1918                	// #6424
    b7e8:	movk	x2, #0x706, lsl #48
    b7ec:	movk	x1, #0x1b1a, lsl #16
    b7f0:	movk	x1, #0x1d1c, lsl #32
    b7f4:	stur	x2, [x0, #-116]
    b7f8:	mov	x2, #0x1110                	// #4368
    b7fc:	movk	x1, #0x1f1e, lsl #48
    b800:	movk	x2, #0x1312, lsl #16
    b804:	stur	x1, [x0, #-92]
    b808:	movk	x2, #0x1514, lsl #32
    b80c:	mov	x1, #0x2928                	// #10536
    b810:	movk	x2, #0x1716, lsl #48
    b814:	movk	x1, #0x2b2a, lsl #16
    b818:	movk	x1, #0x2d2c, lsl #32
    b81c:	stur	x2, [x0, #-100]
    b820:	mov	x2, #0x2120                	// #8480
    b824:	movk	x1, #0x2f2e, lsl #48
    b828:	movk	x2, #0x2322, lsl #16
    b82c:	stur	x1, [x0, #-76]
    b830:	movk	x2, #0x2524, lsl #32
    b834:	mov	x1, #0x3938                	// #14648
    b838:	movk	x2, #0x2726, lsl #48
    b83c:	movk	x1, #0x3b3a, lsl #16
    b840:	movk	x1, #0x3d3c, lsl #32
    b844:	stur	x2, [x0, #-84]
    b848:	mov	x2, #0x3130                	// #12592
    b84c:	movk	x1, #0x3f3e, lsl #48
    b850:	movk	x2, #0x3332, lsl #16
    b854:	stur	x1, [x0, #-60]
    b858:	movk	x2, #0x3534, lsl #32
    b85c:	mov	x1, #0x4948                	// #18760
    b860:	movk	x2, #0x3736, lsl #48
    b864:	movk	x1, #0x4b4a, lsl #16
    b868:	movk	x1, #0x4d4c, lsl #32
    b86c:	stur	x2, [x0, #-68]
    b870:	mov	x2, #0x4140                	// #16704
    b874:	movk	x1, #0x4f4e, lsl #48
    b878:	movk	x2, #0x4342, lsl #16
    b87c:	stur	x1, [x0, #-44]
    b880:	movk	x2, #0x4544, lsl #32
    b884:	mov	x1, #0x5150                	// #20816
    b888:	movk	x2, #0x4746, lsl #48
    b88c:	movk	x1, #0x5352, lsl #16
    b890:	movk	x1, #0x5554, lsl #32
    b894:	stur	x2, [x0, #-52]
    b898:	mov	x2, #0x5958                	// #22872
    b89c:	movk	x1, #0x5756, lsl #48
    b8a0:	movk	x2, #0x5b5a, lsl #16
    b8a4:	stur	x1, [x0, #-36]
    b8a8:	movk	x2, #0x5d5c, lsl #32
    b8ac:	mov	x1, #0x6160                	// #24928
    b8b0:	movk	x2, #0x5f5e, lsl #48
    b8b4:	movk	x1, #0x6362, lsl #16
    b8b8:	movk	x1, #0x6564, lsl #32
    b8bc:	stur	x2, [x0, #-28]
    b8c0:	mov	x2, #0x6968                	// #26984
    b8c4:	movk	x1, #0x6766, lsl #48
    b8c8:	movk	x2, #0x6b6a, lsl #16
    b8cc:	stur	x1, [x0, #-20]
    b8d0:	movk	x2, #0x6d6c, lsl #32
    b8d4:	mov	x1, #0x7170                	// #29040
    b8d8:	movk	x2, #0x6f6e, lsl #48
    b8dc:	movk	x1, #0x7372, lsl #16
    b8e0:	movk	x1, #0x7574, lsl #32
    b8e4:	stur	x2, [x0, #-12]
    b8e8:	mov	x2, #0x7978                	// #31096
    b8ec:	movk	x1, #0x7776, lsl #48
    b8f0:	movk	x2, #0x7b7a, lsl #16
    b8f4:	stur	x1, [x0, #-4]
    b8f8:	movk	x2, #0x7d7c, lsl #32
    b8fc:	mov	x1, #0x8180                	// #33152
    b900:	movk	x2, #0x7f7e, lsl #48
    b904:	movk	x1, #0x8382, lsl #16
    b908:	movk	x1, #0x8584, lsl #32
    b90c:	stur	x2, [x0, #4]
    b910:	mov	x2, #0x8988                	// #35208
    b914:	movk	x1, #0x8786, lsl #48
    b918:	movk	x2, #0x8b8a, lsl #16
    b91c:	stur	x1, [x0, #12]
    b920:	movk	x2, #0x8d8c, lsl #32
    b924:	mov	x1, #0xf00                 	// #3840
    b928:	movk	x2, #0x8f8e, lsl #48
    b92c:	movk	x1, #0xf10, lsl #32
    b930:	stur	x2, [x0, #20]
    b934:	cmp	w28, #0x0
    b938:	stur	x1, [x0, #140]
    b93c:	mov	w0, #0xf20                 	// #3872
    b940:	str	w0, [x19, #7828]
    b944:	ldr	w12, [sp, #128]
    b948:	ldr	w18, [sp, #136]
    b94c:	ldr	w13, [sp, #144]
    b950:	ldp	w11, w10, [sp, #152]
    b954:	ldr	w7, [sp, #232]
    b958:	ldp	x9, x8, [sp, #160]
    b95c:	b.le	d4c8 <BZ2_decompress@@Base+0x2d60>
    b960:	add	x0, x19, #0x1, lsl #12
    b964:	mov	x22, #0xfa00                	// #64000
    b968:	mov	x8, #0xc9ac                	// #51628
    b96c:	mov	x30, #0xb17c                	// #45436
    b970:	mov	w4, #0x0                   	// #0
    b974:	mov	w5, #0x31                  	// #49
    b978:	ldrb	w2, [x0, #3788]
    b97c:	mov	w6, #0x0                   	// #0
    b980:	mov	w3, #0x100                 	// #256
    b984:	str	w2, [sp, #120]
    b988:	mov	x0, x2
    b98c:	add	x1, x19, w2, sxtw #2
    b990:	ubfiz	x0, x0, #7, #8
    b994:	add	x1, x1, x22
    b998:	add	x0, x0, w2, uxtb
    b99c:	lsl	x0, x0, #3
    b9a0:	ldr	w22, [x1, #12]
    b9a4:	add	x9, x0, x30
    b9a8:	mov	x1, #0xe1dc                	// #57820
    b9ac:	add	x1, x0, x1
    b9b0:	add	x0, x0, x8
    b9b4:	add	x9, x19, x9
    b9b8:	add	x8, x19, x0
    b9bc:	add	x1, x19, x1
    b9c0:	str	x1, [sp, #104]
    b9c4:	str	w22, [sp, #112]
    b9c8:	mov	w1, #0x24                  	// #36
    b9cc:	ldr	w0, [x19, #36]
    b9d0:	str	w1, [x19, #8]
    b9d4:	b	ba14 <BZ2_decompress@@Base+0x12ac>
    b9d8:	ldr	x1, [x19]
    b9dc:	ldr	w2, [x1, #8]
    b9e0:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    b9e4:	ldr	x16, [x1]
    b9e8:	sub	w15, w2, #0x1
    b9ec:	ldr	w14, [x19, #32]
    b9f0:	add	w0, w0, #0x8
    b9f4:	ldr	w2, [x1, #12]
    b9f8:	ldrb	w17, [x16], #1
    b9fc:	add	w2, w2, #0x1
    ba00:	orr	w14, w17, w14, lsl #8
    ba04:	stp	w14, w0, [x19, #32]
    ba08:	str	x16, [x1]
    ba0c:	stp	w15, w2, [x1, #8]
    ba10:	cbz	w2, d0b8 <BZ2_decompress@@Base+0x2950>
    ba14:	cmp	w22, w0
    ba18:	b.gt	b9d8 <BZ2_decompress@@Base+0x1270>
    ba1c:	ldr	w23, [x19, #32]
    ba20:	sub	w0, w0, w22
    ba24:	mov	w1, #0x1                   	// #1
    ba28:	str	w0, [x19, #36]
    ba2c:	lsl	w1, w1, w22
    ba30:	sub	w1, w1, #0x1
    ba34:	lsr	w23, w23, w0
    ba38:	and	w23, w23, w1
    ba3c:	cmp	w22, #0x14
    ba40:	b.gt	c500 <BZ2_decompress@@Base+0x1d98>
    ba44:	sxtw	x1, w22
    ba48:	ldr	w2, [x9, x1, lsl #2]
    ba4c:	cmp	w2, w23
    ba50:	b.ge	bb34 <BZ2_decompress@@Base+0x13cc>  // b.tcont
    ba54:	add	w22, w22, #0x1
    ba58:	mov	w1, #0x25                  	// #37
    ba5c:	str	w1, [x19, #8]
    ba60:	b	baa0 <BZ2_decompress@@Base+0x1338>
    ba64:	ldr	x1, [x19]
    ba68:	ldr	w2, [x1, #8]
    ba6c:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    ba70:	ldr	x16, [x1]
    ba74:	sub	w15, w2, #0x1
    ba78:	ldr	w14, [x19, #32]
    ba7c:	add	w0, w0, #0x8
    ba80:	ldr	w2, [x1, #12]
    ba84:	ldrb	w17, [x16], #1
    ba88:	add	w2, w2, #0x1
    ba8c:	orr	w14, w17, w14, lsl #8
    ba90:	stp	w14, w0, [x19, #32]
    ba94:	str	x16, [x1]
    ba98:	stp	w15, w2, [x1, #8]
    ba9c:	cbz	w2, d068 <BZ2_decompress@@Base+0x2900>
    baa0:	cmp	w0, #0x0
    baa4:	b.le	ba64 <BZ2_decompress@@Base+0x12fc>
    baa8:	ldr	w24, [x19, #32]
    baac:	sub	w0, w0, #0x1
    bab0:	str	w0, [x19, #36]
    bab4:	lsr	w24, w24, w0
    bab8:	and	w24, w24, #0x1
    babc:	orr	w23, w24, w23, lsl #1
    bac0:	b	ba3c <BZ2_decompress@@Base+0x12d4>
    bac4:	mov	w0, #0x21                  	// #33
    bac8:	ldr	w14, [x19, #36]
    bacc:	str	w0, [x19, #8]
    bad0:	b	bb10 <BZ2_decompress@@Base+0x13a8>
    bad4:	ldr	x0, [x19]
    bad8:	ldr	w1, [x0, #8]
    badc:	cbz	w1, ce70 <BZ2_decompress@@Base+0x2708>
    bae0:	ldr	x16, [x0]
    bae4:	sub	w15, w1, #0x1
    bae8:	ldr	w2, [x19, #32]
    baec:	add	w14, w14, #0x8
    baf0:	ldr	w1, [x0, #12]
    baf4:	ldrb	w17, [x16], #1
    baf8:	add	w1, w1, #0x1
    bafc:	orr	w2, w17, w2, lsl #8
    bb00:	stp	w2, w14, [x19, #32]
    bb04:	str	x16, [x0]
    bb08:	stp	w15, w1, [x0, #8]
    bb0c:	cbz	w1, d0a8 <BZ2_decompress@@Base+0x2940>
    bb10:	cmp	w14, #0x4
    bb14:	b.le	bad4 <BZ2_decompress@@Base+0x136c>
    bb18:	ldr	w7, [x19, #32]
    bb1c:	sub	w14, w14, #0x5
    bb20:	mov	w3, #0x0                   	// #0
    bb24:	str	w14, [x19, #36]
    bb28:	lsr	w14, w7, w14
    bb2c:	and	w7, w14, #0x1f
    bb30:	b	ae3c <BZ2_decompress@@Base+0x6d4>
    bb34:	ldr	w0, [x8, x1, lsl #2]
    bb38:	sub	w0, w23, w0
    bb3c:	cmp	w0, #0x101
    bb40:	b.hi	c500 <BZ2_decompress@@Base+0x1d98>  // b.pmore
    bb44:	ldr	x1, [sp, #104]
    bb48:	ldr	w11, [x1, w0, sxtw #2]
    bb4c:	cmp	w18, w11
    bb50:	b.eq	d2b8 <BZ2_decompress@@Base+0x2b50>  // b.none
    bb54:	cmp	w11, #0x1
    bb58:	b.ls	c508 <BZ2_decompress@@Base+0x1da0>  // b.plast
    bb5c:	cmp	w12, w4
    bb60:	b.le	c500 <BZ2_decompress@@Base+0x1d98>
    bb64:	sub	w14, w11, #0x1
    bb68:	cmp	w14, #0xf
    bb6c:	mov	w2, w14
    bb70:	b.hi	d4f4 <BZ2_decompress@@Base+0x2d8c>  // b.pmore
    bb74:	ldr	w0, [x19, #7820]
    bb78:	cmp	w14, #0x3
    bb7c:	add	w1, w0, w14
    bb80:	add	w17, w0, w14
    bb84:	add	x1, x19, x1
    bb88:	ldrb	w1, [x1, #3724]
    bb8c:	str	w1, [sp, #128]
    bb90:	b.ls	bc8c <BZ2_decompress@@Base+0x1524>  // b.plast
    bb94:	sub	w2, w17, #0x1
    bb98:	add	x15, x19, w17, sxtw
    bb9c:	sub	w14, w17, #0x2
    bba0:	sub	w1, w17, #0x3
    bba4:	add	x2, x19, w2, sxtw
    bba8:	sub	w17, w17, #0x4
    bbac:	add	x14, x19, w14, sxtw
    bbb0:	add	x1, x19, w1, sxtw
    bbb4:	add	x17, x19, w17, sxtw
    bbb8:	ldrb	w16, [x2, #3724]
    bbbc:	strb	w16, [x15, #3724]
    bbc0:	ldrb	w15, [x14, #3724]
    bbc4:	strb	w15, [x2, #3724]
    bbc8:	sub	w2, w11, #0x5
    bbcc:	cmp	w2, #0x3
    bbd0:	ldrb	w15, [x1, #3724]
    bbd4:	strb	w15, [x14, #3724]
    bbd8:	ldrb	w14, [x17, #3724]
    bbdc:	strb	w14, [x1, #3724]
    bbe0:	b.ls	bc80 <BZ2_decompress@@Base+0x1518>  // b.plast
    bbe4:	add	w1, w0, w2
    bbe8:	sub	w17, w11, #0x9
    bbec:	sub	w16, w1, #0x1
    bbf0:	sub	w15, w1, #0x2
    bbf4:	add	x30, x19, w1, sxtw
    bbf8:	cmp	w17, #0x3
    bbfc:	add	x16, x19, w16, sxtw
    bc00:	add	x15, x19, w15, sxtw
    bc04:	ldrb	w14, [x16, #3724]
    bc08:	strb	w14, [x30, #3724]
    bc0c:	sub	w14, w1, #0x3
    bc10:	sub	w30, w1, #0x4
    bc14:	add	x14, x19, w14, sxtw
    bc18:	ldrb	w1, [x15, #3724]
    bc1c:	strb	w1, [x16, #3724]
    bc20:	add	x1, x19, w30, sxtw
    bc24:	ldrb	w16, [x14, #3724]
    bc28:	strb	w16, [x15, #3724]
    bc2c:	ldrb	w1, [x1, #3724]
    bc30:	strb	w1, [x14, #3724]
    bc34:	b.ls	bc80 <BZ2_decompress@@Base+0x1518>  // b.plast
    bc38:	add	w17, w0, w17
    bc3c:	sub	w15, w17, #0x1
    bc40:	sub	w14, w17, #0x2
    bc44:	add	x30, x19, w17, sxtw
    bc48:	sub	w1, w17, #0x3
    bc4c:	add	x15, x19, w15, sxtw
    bc50:	add	x14, x19, w14, sxtw
    bc54:	add	x1, x19, w1, sxtw
    bc58:	sub	w17, w17, #0x4
    bc5c:	ldrb	w16, [x15, #3724]
    bc60:	add	x17, x19, w17, sxtw
    bc64:	strb	w16, [x30, #3724]
    bc68:	ldrb	w16, [x14, #3724]
    bc6c:	strb	w16, [x15, #3724]
    bc70:	ldrb	w15, [x1, #3724]
    bc74:	strb	w15, [x14, #3724]
    bc78:	ldrb	w14, [x17, #3724]
    bc7c:	strb	w14, [x1, #3724]
    bc80:	lsr	w14, w2, #2
    bc84:	mov	w1, #0xfffffffc            	// #-4
    bc88:	madd	w2, w14, w1, w2
    bc8c:	cbz	w2, bce4 <BZ2_decompress@@Base+0x157c>
    bc90:	add	w1, w0, w2
    bc94:	subs	w2, w2, #0x1
    bc98:	sub	w14, w1, #0x1
    bc9c:	add	x14, x19, x14
    bca0:	add	x1, x19, w1, uxtw
    bca4:	ldrb	w14, [x14, #3724]
    bca8:	strb	w14, [x1, #3724]
    bcac:	b.eq	bce4 <BZ2_decompress@@Base+0x157c>  // b.none
    bcb0:	add	w1, w0, w2
    bcb4:	cmp	w2, #0x1
    bcb8:	sub	w2, w1, #0x1
    bcbc:	add	x2, x19, x2
    bcc0:	add	x1, x19, w1, uxtw
    bcc4:	ldrb	w2, [x2, #3724]
    bcc8:	strb	w2, [x1, #3724]
    bccc:	b.eq	bce4 <BZ2_decompress@@Base+0x157c>  // b.none
    bcd0:	add	x2, x19, w0, uxtw
    bcd4:	add	w1, w0, #0x1
    bcd8:	add	x1, x19, x1
    bcdc:	ldrb	w2, [x2, #3724]
    bce0:	strb	w2, [x1, #3724]
    bce4:	add	x0, x19, w0, sxtw
    bce8:	ldrb	w1, [sp, #128]
    bcec:	strb	w1, [x0, #3724]
    bcf0:	ldr	w0, [sp, #128]
    bcf4:	add	x1, x19, w0, sxtw
    bcf8:	ldrb	w0, [x1, #3468]
    bcfc:	ldrb	w2, [x1, #3468]
    bd00:	add	x0, x19, x0, lsl #2
    bd04:	ldr	w1, [x0, #68]
    bd08:	add	w1, w1, #0x1
    bd0c:	str	w1, [x0, #68]
    bd10:	ldrb	w0, [x19, #44]
    bd14:	cbz	w0, d4e8 <BZ2_decompress@@Base+0x2d80>
    bd18:	ldr	x0, [x19, #3160]
    bd1c:	strh	w2, [x0, w4, sxtw #1]
    bd20:	add	w4, w4, #0x1
    bd24:	cbnz	w5, bd94 <BZ2_decompress@@Base+0x162c>
    bd28:	add	w6, w6, #0x1
    bd2c:	cmp	w28, w6
    bd30:	b.le	c500 <BZ2_decompress@@Base+0x1d98>
    bd34:	add	x1, x19, w6, sxtw
    bd38:	mov	x8, #0x408                 	// #1032
    bd3c:	add	x1, x1, #0x1, lsl #12
    bd40:	mov	x9, #0x3e80                	// #16000
    bd44:	mov	x14, #0xb17c                	// #45436
    bd48:	mov	x15, #0xe1dc                	// #57820
    bd4c:	mov	x16, #0xc9ac                	// #51628
    bd50:	mov	w5, #0x32                  	// #50
    bd54:	ldrb	w2, [x1, #3788]
    bd58:	ldrb	w1, [x1, #3788]
    bd5c:	mov	x0, x2
    bd60:	add	x2, x2, x9
    bd64:	str	w1, [sp, #120]
    bd68:	add	x1, x19, x2, lsl #2
    bd6c:	mul	x0, x0, x8
    bd70:	add	x9, x0, x14
    bd74:	add	x2, x0, x15
    bd78:	add	x0, x0, x16
    bd7c:	ldr	w1, [x1, #12]
    bd80:	add	x9, x19, x9
    bd84:	add	x8, x19, x0
    bd88:	str	w1, [sp, #112]
    bd8c:	add	x1, x19, x2
    bd90:	str	x1, [sp, #104]
    bd94:	ldr	w22, [sp, #112]
    bd98:	sub	w5, w5, #0x1
    bd9c:	nop
    bda0:	mov	w1, #0x28                  	// #40
    bda4:	ldr	w0, [x19, #36]
    bda8:	str	w1, [x19, #8]
    bdac:	b	bdec <BZ2_decompress@@Base+0x1684>
    bdb0:	ldr	x1, [x19]
    bdb4:	ldr	w2, [x1, #8]
    bdb8:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    bdbc:	ldr	x16, [x1]
    bdc0:	sub	w15, w2, #0x1
    bdc4:	ldr	w14, [x19, #32]
    bdc8:	add	w0, w0, #0x8
    bdcc:	ldr	w2, [x1, #12]
    bdd0:	ldrb	w17, [x16], #1
    bdd4:	add	w2, w2, #0x1
    bdd8:	orr	w14, w17, w14, lsl #8
    bddc:	stp	w14, w0, [x19, #32]
    bde0:	str	x16, [x1]
    bde4:	stp	w15, w2, [x1, #8]
    bde8:	cbz	w2, d148 <BZ2_decompress@@Base+0x29e0>
    bdec:	cmp	w22, w0
    bdf0:	b.gt	bdb0 <BZ2_decompress@@Base+0x1648>
    bdf4:	ldr	w23, [x19, #32]
    bdf8:	sub	w0, w0, w22
    bdfc:	mov	w1, #0x1                   	// #1
    be00:	str	w0, [x19, #36]
    be04:	lsl	w1, w1, w22
    be08:	sub	w1, w1, #0x1
    be0c:	lsr	w23, w23, w0
    be10:	and	w23, w23, w1
    be14:	cmp	w22, #0x14
    be18:	b.gt	c500 <BZ2_decompress@@Base+0x1d98>
    be1c:	sxtw	x1, w22
    be20:	ldr	w2, [x9, x1, lsl #2]
    be24:	cmp	w2, w23
    be28:	b.ge	d288 <BZ2_decompress@@Base+0x2b20>  // b.tcont
    be2c:	add	w22, w22, #0x1
    be30:	mov	w1, #0x29                  	// #41
    be34:	str	w1, [x19, #8]
    be38:	b	be78 <BZ2_decompress@@Base+0x1710>
    be3c:	ldr	x1, [x19]
    be40:	ldr	w2, [x1, #8]
    be44:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    be48:	ldr	x16, [x1]
    be4c:	sub	w15, w2, #0x1
    be50:	ldr	w14, [x19, #32]
    be54:	add	w0, w0, #0x8
    be58:	ldr	w2, [x1, #12]
    be5c:	ldrb	w17, [x16], #1
    be60:	add	w2, w2, #0x1
    be64:	orr	w14, w17, w14, lsl #8
    be68:	stp	w14, w0, [x19, #32]
    be6c:	str	x16, [x1]
    be70:	stp	w15, w2, [x1, #8]
    be74:	cbz	w2, d078 <BZ2_decompress@@Base+0x2910>
    be78:	cmp	w0, #0x0
    be7c:	b.le	be3c <BZ2_decompress@@Base+0x16d4>
    be80:	ldr	w24, [x19, #32]
    be84:	sub	w0, w0, #0x1
    be88:	str	w0, [x19, #36]
    be8c:	lsr	w24, w24, w0
    be90:	and	w24, w24, #0x1
    be94:	orr	w23, w24, w23, lsl #1
    be98:	b	be14 <BZ2_decompress@@Base+0x16ac>
    be9c:	ldr	w0, [x19, #36]
    bea0:	mov	w1, #0x15                  	// #21
    bea4:	str	w1, [x19, #8]
    bea8:	b	bee8 <BZ2_decompress@@Base+0x1780>
    beac:	ldr	x1, [x19]
    beb0:	ldr	w2, [x1, #8]
    beb4:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    beb8:	ldr	x16, [x1]
    bebc:	sub	w15, w2, #0x1
    bec0:	ldr	w14, [x19, #32]
    bec4:	add	w0, w0, #0x8
    bec8:	ldr	w2, [x1, #12]
    becc:	ldrb	w17, [x16], #1
    bed0:	add	w2, w2, #0x1
    bed4:	orr	w14, w17, w14, lsl #8
    bed8:	stp	w14, w0, [x19, #32]
    bedc:	str	x16, [x1]
    bee0:	stp	w15, w2, [x1, #8]
    bee4:	cbz	w2, cf38 <BZ2_decompress@@Base+0x27d0>
    bee8:	cmp	w0, #0x7
    beec:	b.le	beac <BZ2_decompress@@Base+0x1744>
    bef0:	ldr	w1, [x19, #32]
    bef4:	sub	w0, w0, #0x8
    bef8:	ldr	w2, [x19, #3176]
    befc:	str	w0, [x19, #36]
    bf00:	lsr	w1, w1, w0
    bf04:	bfi	w1, w2, #8, #24
    bf08:	str	w1, [x19, #3176]
    bf0c:	mov	w1, #0x16                  	// #22
    bf10:	str	w1, [x19, #8]
    bf14:	b	bf54 <BZ2_decompress@@Base+0x17ec>
    bf18:	ldr	x1, [x19]
    bf1c:	ldr	w2, [x1, #8]
    bf20:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    bf24:	ldr	x16, [x1]
    bf28:	sub	w15, w2, #0x1
    bf2c:	ldr	w14, [x19, #32]
    bf30:	add	w0, w0, #0x8
    bf34:	ldr	w2, [x1, #12]
    bf38:	ldrb	w17, [x16], #1
    bf3c:	add	w2, w2, #0x1
    bf40:	orr	w14, w17, w14, lsl #8
    bf44:	stp	w14, w0, [x19, #32]
    bf48:	str	x16, [x1]
    bf4c:	stp	w15, w2, [x1, #8]
    bf50:	cbz	w2, cf08 <BZ2_decompress@@Base+0x27a0>
    bf54:	cmp	w0, #0x7
    bf58:	b.le	bf18 <BZ2_decompress@@Base+0x17b0>
    bf5c:	ldr	w1, [x19, #32]
    bf60:	sub	w0, w0, #0x8
    bf64:	ldr	w2, [x19, #3176]
    bf68:	str	w0, [x19, #36]
    bf6c:	lsr	w1, w1, w0
    bf70:	bfi	w1, w2, #8, #24
    bf74:	str	w1, [x19, #3176]
    bf78:	mov	w1, #0x17                  	// #23
    bf7c:	str	w1, [x19, #8]
    bf80:	b	bfc0 <BZ2_decompress@@Base+0x1858>
    bf84:	ldr	x1, [x19]
    bf88:	ldr	w2, [x1, #8]
    bf8c:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    bf90:	ldr	x16, [x1]
    bf94:	sub	w15, w2, #0x1
    bf98:	ldr	w14, [x19, #32]
    bf9c:	add	w0, w0, #0x8
    bfa0:	ldr	w2, [x1, #12]
    bfa4:	ldrb	w17, [x16], #1
    bfa8:	add	w2, w2, #0x1
    bfac:	orr	w14, w17, w14, lsl #8
    bfb0:	stp	w14, w0, [x19, #32]
    bfb4:	str	x16, [x1]
    bfb8:	stp	w15, w2, [x1, #8]
    bfbc:	cbz	w2, cee8 <BZ2_decompress@@Base+0x2780>
    bfc0:	cmp	w0, #0x7
    bfc4:	b.le	bf84 <BZ2_decompress@@Base+0x181c>
    bfc8:	ldr	w1, [x19, #32]
    bfcc:	sub	w0, w0, #0x8
    bfd0:	ldr	w2, [x19, #3176]
    bfd4:	str	w0, [x19, #36]
    bfd8:	lsr	w1, w1, w0
    bfdc:	bfi	w1, w2, #8, #24
    bfe0:	str	w1, [x19, #3176]
    bfe4:	mov	w1, #0x18                  	// #24
    bfe8:	str	w1, [x19, #8]
    bfec:	b	c02c <BZ2_decompress@@Base+0x18c4>
    bff0:	ldr	x1, [x19]
    bff4:	ldr	w2, [x1, #8]
    bff8:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    bffc:	ldr	x16, [x1]
    c000:	sub	w15, w2, #0x1
    c004:	ldr	w14, [x19, #32]
    c008:	add	w0, w0, #0x8
    c00c:	ldr	w2, [x1, #12]
    c010:	ldrb	w17, [x16], #1
    c014:	add	w2, w2, #0x1
    c018:	orr	w14, w17, w14, lsl #8
    c01c:	stp	w14, w0, [x19, #32]
    c020:	str	x16, [x1]
    c024:	stp	w15, w2, [x1, #8]
    c028:	cbz	w2, cec8 <BZ2_decompress@@Base+0x2760>
    c02c:	cmp	w0, #0x0
    c030:	b.le	bff0 <BZ2_decompress@@Base+0x1888>
    c034:	ldr	w1, [x19, #32]
    c038:	sub	w0, w0, #0x1
    c03c:	str	w0, [x19, #36]
    c040:	str	wzr, [x19, #56]
    c044:	lsr	w1, w1, w0
    c048:	and	w1, w1, #0x1
    c04c:	strb	w1, [x19, #20]
    c050:	mov	w1, #0x19                  	// #25
    c054:	str	w1, [x19, #8]
    c058:	b	c098 <BZ2_decompress@@Base+0x1930>
    c05c:	ldr	x1, [x19]
    c060:	ldr	w2, [x1, #8]
    c064:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c068:	ldr	x16, [x1]
    c06c:	sub	w15, w2, #0x1
    c070:	ldr	w14, [x19, #32]
    c074:	add	w0, w0, #0x8
    c078:	ldr	w2, [x1, #12]
    c07c:	ldrb	w17, [x16], #1
    c080:	add	w2, w2, #0x1
    c084:	orr	w14, w17, w14, lsl #8
    c088:	stp	w14, w0, [x19, #32]
    c08c:	str	x16, [x1]
    c090:	stp	w15, w2, [x1, #8]
    c094:	cbz	w2, ceb8 <BZ2_decompress@@Base+0x2750>
    c098:	cmp	w0, #0x7
    c09c:	b.le	c05c <BZ2_decompress@@Base+0x18f4>
    c0a0:	ldr	w1, [x19, #32]
    c0a4:	sub	w0, w0, #0x8
    c0a8:	ldr	w2, [x19, #56]
    c0ac:	str	w0, [x19, #36]
    c0b0:	lsr	w1, w1, w0
    c0b4:	bfi	w1, w2, #8, #24
    c0b8:	str	w1, [x19, #56]
    c0bc:	mov	w1, #0x1a                  	// #26
    c0c0:	str	w1, [x19, #8]
    c0c4:	b	c104 <BZ2_decompress@@Base+0x199c>
    c0c8:	ldr	x1, [x19]
    c0cc:	ldr	w2, [x1, #8]
    c0d0:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c0d4:	ldr	x16, [x1]
    c0d8:	sub	w15, w2, #0x1
    c0dc:	ldr	w14, [x19, #32]
    c0e0:	add	w0, w0, #0x8
    c0e4:	ldr	w2, [x1, #12]
    c0e8:	ldrb	w17, [x16], #1
    c0ec:	add	w2, w2, #0x1
    c0f0:	orr	w14, w17, w14, lsl #8
    c0f4:	stp	w14, w0, [x19, #32]
    c0f8:	str	x16, [x1]
    c0fc:	stp	w15, w2, [x1, #8]
    c100:	cbz	w2, cea8 <BZ2_decompress@@Base+0x2740>
    c104:	cmp	w0, #0x7
    c108:	b.le	c0c8 <BZ2_decompress@@Base+0x1960>
    c10c:	ldr	w1, [x19, #32]
    c110:	sub	w0, w0, #0x8
    c114:	ldr	w2, [x19, #56]
    c118:	str	w0, [x19, #36]
    c11c:	lsr	w1, w1, w0
    c120:	bfi	w1, w2, #8, #24
    c124:	str	w1, [x19, #56]
    c128:	mov	w1, #0x1b                  	// #27
    c12c:	str	w1, [x19, #8]
    c130:	b	c170 <BZ2_decompress@@Base+0x1a08>
    c134:	ldr	x1, [x19]
    c138:	ldr	w2, [x1, #8]
    c13c:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c140:	ldr	x16, [x1]
    c144:	sub	w15, w2, #0x1
    c148:	ldr	w14, [x19, #32]
    c14c:	add	w0, w0, #0x8
    c150:	ldr	w2, [x1, #12]
    c154:	ldrb	w17, [x16], #1
    c158:	add	w2, w2, #0x1
    c15c:	orr	w14, w17, w14, lsl #8
    c160:	stp	w14, w0, [x19, #32]
    c164:	str	x16, [x1]
    c168:	stp	w15, w2, [x1, #8]
    c16c:	cbz	w2, ce98 <BZ2_decompress@@Base+0x2730>
    c170:	cmp	w0, #0x7
    c174:	b.le	c134 <BZ2_decompress@@Base+0x19cc>
    c178:	ldr	w1, [x19, #32]
    c17c:	sub	w0, w0, #0x8
    c180:	ldr	w2, [x19, #56]
    c184:	str	w0, [x19, #36]
    c188:	lsr	w1, w1, w0
    c18c:	bfi	w1, w2, #8, #24
    c190:	str	w1, [x19, #56]
    c194:	tbnz	w1, #31, c500 <BZ2_decompress@@Base+0x1d98>
    c198:	ldr	w2, [x19, #40]
    c19c:	mov	w14, #0x86a0                	// #34464
    c1a0:	movk	w14, #0x1, lsl #16
    c1a4:	mul	w2, w2, w14
    c1a8:	add	w2, w2, #0xa
    c1ac:	cmp	w1, w2
    c1b0:	b.gt	c500 <BZ2_decompress@@Base+0x1d98>
    c1b4:	mov	w3, #0x0                   	// #0
    c1b8:	sxtw	x17, w3
    c1bc:	add	x1, x19, #0xd7c
    c1c0:	str	x1, [sp, #128]
    c1c4:	mov	w1, #0x1c                  	// #28
    c1c8:	mov	w3, w17
    c1cc:	str	w1, [x19, #8]
    c1d0:	b	c210 <BZ2_decompress@@Base+0x1aa8>
    c1d4:	ldr	x1, [x19]
    c1d8:	ldr	w2, [x1, #8]
    c1dc:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c1e0:	ldr	x15, [x1]
    c1e4:	add	w0, w0, #0x8
    c1e8:	ldr	w30, [x19, #32]
    c1ec:	sub	w2, w2, #0x1
    c1f0:	ldr	w14, [x1, #12]
    c1f4:	ldrb	w16, [x15], #1
    c1f8:	add	w14, w14, #0x1
    c1fc:	orr	w16, w16, w30, lsl #8
    c200:	stp	w16, w0, [x19, #32]
    c204:	str	x15, [x1]
    c208:	stp	w2, w14, [x1, #8]
    c20c:	cbz	w14, ce78 <BZ2_decompress@@Base+0x2710>
    c210:	cmp	w0, #0x0
    c214:	b.le	c1d4 <BZ2_decompress@@Base+0x1a6c>
    c218:	ldr	x2, [sp, #128]
    c21c:	sub	w0, w0, #0x1
    c220:	ldr	w1, [x19, #32]
    c224:	str	w0, [x19, #36]
    c228:	lsr	w1, w1, w0
    c22c:	and	w1, w1, #0x1
    c230:	strb	w1, [x2, x17]
    c234:	add	x17, x17, #0x1
    c238:	cmp	w17, #0xf
    c23c:	b.le	c1c4 <BZ2_decompress@@Base+0x1a5c>
    c240:	mov	w3, #0x0                   	// #0
    c244:	add	x0, x19, #0xc7c
    c248:	mov	x2, #0x100                 	// #256
    c24c:	mov	w1, #0x0                   	// #0
    c250:	str	w3, [sp, #128]
    c254:	str	w13, [sp, #136]
    c258:	str	w18, [sp, #144]
    c25c:	stp	w6, w5, [sp, #152]
    c260:	str	w12, [sp, #160]
    c264:	str	w4, [sp, #168]
    c268:	str	w10, [sp, #176]
    c26c:	str	w7, [sp, #184]
    c270:	stp	x9, x8, [sp, #192]
    c274:	str	w11, [sp, #232]
    c278:	bl	1600 <memset@plt>
    c27c:	ldp	x9, x8, [sp, #192]
    c280:	ldr	w3, [sp, #128]
    c284:	ldr	w13, [sp, #136]
    c288:	ldr	w18, [sp, #144]
    c28c:	ldp	w6, w5, [sp, #152]
    c290:	ldr	w12, [sp, #160]
    c294:	ldr	w4, [sp, #168]
    c298:	ldr	w10, [sp, #176]
    c29c:	ldr	w7, [sp, #184]
    c2a0:	ldr	w11, [sp, #232]
    c2a4:	add	x0, x19, w3, sxtw
    c2a8:	ldrb	w0, [x0, #3452]
    c2ac:	cbz	w0, c348 <BZ2_decompress@@Base+0x1be0>
    c2b0:	mov	w25, #0x0                   	// #0
    c2b4:	nop
    c2b8:	ldr	w14, [x19, #36]
    c2bc:	lsl	w0, w3, #4
    c2c0:	mov	w17, #0x1d                  	// #29
    c2c4:	str	w0, [sp, #128]
    c2c8:	str	w17, [x19, #8]
    c2cc:	b	c30c <BZ2_decompress@@Base+0x1ba4>
    c2d0:	ldr	x0, [x19]
    c2d4:	ldr	w1, [x0, #8]
    c2d8:	cbz	w1, ce70 <BZ2_decompress@@Base+0x2708>
    c2dc:	ldr	x15, [x0]
    c2e0:	add	w14, w14, #0x8
    c2e4:	ldr	w30, [x19, #32]
    c2e8:	sub	w1, w1, #0x1
    c2ec:	ldr	w2, [x0, #12]
    c2f0:	ldrb	w16, [x15], #1
    c2f4:	add	w2, w2, #0x1
    c2f8:	orr	w16, w16, w30, lsl #8
    c2fc:	stp	w16, w14, [x19, #32]
    c300:	str	x15, [x0]
    c304:	stp	w1, w2, [x0, #8]
    c308:	cbz	w2, ced8 <BZ2_decompress@@Base+0x2770>
    c30c:	cmp	w14, #0x0
    c310:	b.le	c2d0 <BZ2_decompress@@Base+0x1b68>
    c314:	ldr	w0, [x19, #32]
    c318:	sub	w14, w14, #0x1
    c31c:	str	w14, [x19, #36]
    c320:	lsr	w0, w0, w14
    c324:	tbz	w0, #0, c33c <BZ2_decompress@@Base+0x1bd4>
    c328:	ldr	w0, [sp, #128]
    c32c:	mov	w1, #0x1                   	// #1
    c330:	add	w0, w25, w0
    c334:	add	x0, x19, w0, sxtw
    c338:	strb	w1, [x0, #3196]
    c33c:	add	w25, w25, #0x1
    c340:	cmp	w25, #0xf
    c344:	b.le	c2c8 <BZ2_decompress@@Base+0x1b60>
    c348:	add	w3, w3, #0x1
    c34c:	cmp	w3, #0xf
    c350:	b.le	c2a4 <BZ2_decompress@@Base+0x1b3c>
    c354:	add	x14, x19, #0xc7c
    c358:	mov	x0, #0x0                   	// #0
    c35c:	mov	w1, #0x0                   	// #0
    c360:	str	wzr, [x19, #3192]
    c364:	nop
    c368:	ldrb	w2, [x14, x0]
    c36c:	cbz	w2, c380 <BZ2_decompress@@Base+0x1c18>
    c370:	add	x2, x19, w1, sxtw
    c374:	add	w1, w1, #0x1
    c378:	strb	w0, [x2, #3468]
    c37c:	str	w1, [x19, #3192]
    c380:	add	x0, x0, #0x1
    c384:	cmp	x0, #0x100
    c388:	b.ne	c368 <BZ2_decompress@@Base+0x1c00>  // b.any
    c38c:	cbz	w1, c500 <BZ2_decompress@@Base+0x1d98>
    c390:	add	w27, w1, #0x2
    c394:	nop
    c398:	mov	w1, #0x1e                  	// #30
    c39c:	ldr	w0, [x19, #36]
    c3a0:	str	w1, [x19, #8]
    c3a4:	b	c3e4 <BZ2_decompress@@Base+0x1c7c>
    c3a8:	ldr	x1, [x19]
    c3ac:	ldr	w2, [x1, #8]
    c3b0:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c3b4:	ldr	x16, [x1]
    c3b8:	sub	w15, w2, #0x1
    c3bc:	ldr	w14, [x19, #32]
    c3c0:	add	w0, w0, #0x8
    c3c4:	ldr	w2, [x1, #12]
    c3c8:	ldrb	w17, [x16], #1
    c3cc:	add	w2, w2, #0x1
    c3d0:	orr	w14, w17, w14, lsl #8
    c3d4:	stp	w14, w0, [x19, #32]
    c3d8:	str	x16, [x1]
    c3dc:	stp	w15, w2, [x1, #8]
    c3e0:	cbz	w2, d128 <BZ2_decompress@@Base+0x29c0>
    c3e4:	cmp	w0, #0x2
    c3e8:	b.le	c3a8 <BZ2_decompress@@Base+0x1c40>
    c3ec:	ldr	w26, [x19, #32]
    c3f0:	sub	w0, w0, #0x3
    c3f4:	str	w0, [x19, #36]
    c3f8:	lsr	w26, w26, w0
    c3fc:	and	w26, w26, #0x7
    c400:	sub	w1, w26, #0x2
    c404:	cmp	w1, #0x4
    c408:	b.hi	c500 <BZ2_decompress@@Base+0x1d98>  // b.pmore
    c40c:	mov	w1, #0x1f                  	// #31
    c410:	str	w1, [x19, #8]
    c414:	b	c454 <BZ2_decompress@@Base+0x1cec>
    c418:	ldr	x1, [x19]
    c41c:	ldr	w2, [x1, #8]
    c420:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c424:	ldr	x16, [x1]
    c428:	sub	w15, w2, #0x1
    c42c:	ldr	w14, [x19, #32]
    c430:	add	w0, w0, #0x8
    c434:	ldr	w2, [x1, #12]
    c438:	ldrb	w17, [x16], #1
    c43c:	add	w2, w2, #0x1
    c440:	orr	w14, w17, w14, lsl #8
    c444:	stp	w14, w0, [x19, #32]
    c448:	str	x16, [x1]
    c44c:	stp	w15, w2, [x1, #8]
    c450:	cbz	w2, cf68 <BZ2_decompress@@Base+0x2800>
    c454:	cmp	w0, #0xe
    c458:	b.le	c418 <BZ2_decompress@@Base+0x1cb0>
    c45c:	ldr	w1, [x19, #32]
    c460:	sub	w0, w0, #0xf
    c464:	str	w0, [x19, #36]
    c468:	lsr	w1, w1, w0
    c46c:	ands	w28, w1, #0x7fff
    c470:	b.eq	d1c8 <BZ2_decompress@@Base+0x2a60>  // b.none
    c474:	mov	w25, #0x0                   	// #0
    c478:	mov	w3, #0x0                   	// #0
    c47c:	sxtw	x30, w3
    c480:	mov	x1, #0x651e                	// #25886
    c484:	add	x1, x19, x1
    c488:	str	x1, [sp, #128]
    c48c:	mov	w3, w30
    c490:	mov	w1, #0x20                  	// #32
    c494:	str	w1, [x19, #8]
    c498:	b	c4d8 <BZ2_decompress@@Base+0x1d70>
    c49c:	ldr	x1, [x19]
    c4a0:	ldr	w2, [x1, #8]
    c4a4:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c4a8:	ldr	x15, [x1]
    c4ac:	add	w0, w0, #0x8
    c4b0:	ldr	w17, [x19, #32]
    c4b4:	sub	w2, w2, #0x1
    c4b8:	ldr	w14, [x1, #12]
    c4bc:	ldrb	w16, [x15], #1
    c4c0:	add	w14, w14, #0x1
    c4c4:	orr	w16, w16, w17, lsl #8
    c4c8:	stp	w16, w0, [x19, #32]
    c4cc:	str	x15, [x1]
    c4d0:	stp	w2, w14, [x1, #8]
    c4d4:	cbz	w14, ce88 <BZ2_decompress@@Base+0x2720>
    c4d8:	cmp	w0, #0x0
    c4dc:	b.le	c49c <BZ2_decompress@@Base+0x1d34>
    c4e0:	ldr	w1, [x19, #32]
    c4e4:	sub	w0, w0, #0x1
    c4e8:	str	w0, [x19, #36]
    c4ec:	lsr	w1, w1, w0
    c4f0:	tbz	w1, #0, d2fc <BZ2_decompress@@Base+0x2b94>
    c4f4:	add	w25, w25, #0x1
    c4f8:	cmp	w25, w26
    c4fc:	b.lt	c490 <BZ2_decompress@@Base+0x1d28>  // b.tstop
    c500:	mov	w0, #0xfffffffc            	// #-4
    c504:	b	a888 <BZ2_decompress@@Base+0x120>
    c508:	mov	w0, #0x1                   	// #1
    c50c:	mov	w10, #0xffffffff            	// #-1
    c510:	str	w0, [sp, #116]
    c514:	ldr	w1, [sp, #116]
    c518:	cmp	w11, #0x0
    c51c:	add	w0, w10, w1
    c520:	add	w10, w10, w1, lsl #1
    c524:	lsl	w2, w1, #1
    c528:	csel	w10, w10, w0, ne  // ne = any
    c52c:	cbnz	w5, c59c <BZ2_decompress@@Base+0x1e34>
    c530:	add	w6, w6, #0x1
    c534:	cmp	w6, w28
    c538:	b.ge	da1c <BZ2_decompress@@Base+0x32b4>  // b.tcont
    c53c:	add	x1, x19, w6, sxtw
    c540:	mov	x14, #0x3e80                	// #16000
    c544:	add	x1, x1, #0x1, lsl #12
    c548:	mov	x9, #0x408                 	// #1032
    c54c:	mov	x15, #0xb17c                	// #45436
    c550:	mov	x16, #0xe1dc                	// #57820
    c554:	mov	x17, #0xc9ac                	// #51628
    c558:	mov	w5, #0x32                  	// #50
    c55c:	ldrb	w8, [x1, #3788]
    c560:	ldrb	w1, [x1, #3788]
    c564:	mov	x0, x8
    c568:	add	x8, x8, x14
    c56c:	str	w1, [sp, #120]
    c570:	add	x1, x19, x8, lsl #2
    c574:	mul	x0, x0, x9
    c578:	ldr	w1, [x1, #12]
    c57c:	add	x8, x0, x16
    c580:	add	x9, x0, x15
    c584:	add	x0, x0, x17
    c588:	add	x9, x19, x9
    c58c:	str	w1, [sp, #112]
    c590:	add	x1, x19, x8
    c594:	add	x8, x19, x0
    c598:	str	x1, [sp, #104]
    c59c:	ldr	w22, [sp, #112]
    c5a0:	sub	w5, w5, #0x1
    c5a4:	str	w2, [sp, #116]
    c5a8:	mov	w1, #0x26                  	// #38
    c5ac:	ldr	w0, [x19, #36]
    c5b0:	str	w1, [x19, #8]
    c5b4:	b	c5f4 <BZ2_decompress@@Base+0x1e8c>
    c5b8:	ldr	x1, [x19]
    c5bc:	ldr	w2, [x1, #8]
    c5c0:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c5c4:	ldr	x16, [x1]
    c5c8:	sub	w15, w2, #0x1
    c5cc:	ldr	w14, [x19, #32]
    c5d0:	add	w0, w0, #0x8
    c5d4:	ldr	w2, [x1, #12]
    c5d8:	ldrb	w17, [x16], #1
    c5dc:	add	w2, w2, #0x1
    c5e0:	orr	w14, w17, w14, lsl #8
    c5e4:	stp	w14, w0, [x19, #32]
    c5e8:	str	x16, [x1]
    c5ec:	stp	w15, w2, [x1, #8]
    c5f0:	cbz	w2, d138 <BZ2_decompress@@Base+0x29d0>
    c5f4:	cmp	w22, w0
    c5f8:	b.gt	c5b8 <BZ2_decompress@@Base+0x1e50>
    c5fc:	ldr	w23, [x19, #32]
    c600:	sub	w0, w0, w22
    c604:	mov	w1, #0x1                   	// #1
    c608:	str	w0, [x19, #36]
    c60c:	lsl	w1, w1, w22
    c610:	sub	w1, w1, #0x1
    c614:	lsr	w23, w23, w0
    c618:	and	w23, w23, w1
    c61c:	b	cdcc <BZ2_decompress@@Base+0x2664>
    c620:	ldr	w1, [x19, #36]
    c624:	mov	w0, #0x31                  	// #49
    c628:	str	w0, [x19, #8]
    c62c:	b	c66c <BZ2_decompress@@Base+0x1f04>
    c630:	ldr	x0, [x19]
    c634:	ldr	w2, [x0, #8]
    c638:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c63c:	ldr	x16, [x0]
    c640:	sub	w15, w2, #0x1
    c644:	ldr	w14, [x19, #32]
    c648:	add	w1, w1, #0x8
    c64c:	ldr	w2, [x0, #12]
    c650:	ldrb	w17, [x16], #1
    c654:	add	w2, w2, #0x1
    c658:	orr	w14, w17, w14, lsl #8
    c65c:	stp	w14, w1, [x19, #32]
    c660:	str	x16, [x0]
    c664:	stp	w15, w2, [x0, #8]
    c668:	cbz	w2, cf18 <BZ2_decompress@@Base+0x27b0>
    c66c:	cmp	w1, #0x7
    c670:	b.le	c630 <BZ2_decompress@@Base+0x1ec8>
    c674:	ldr	w0, [x19, #32]
    c678:	sub	w1, w1, #0x8
    c67c:	ldr	w2, [x19, #3180]
    c680:	str	w1, [x19, #36]
    c684:	lsr	w0, w0, w1
    c688:	bfi	w0, w2, #8, #24
    c68c:	str	w0, [x19, #3180]
    c690:	mov	w0, #0x32                  	// #50
    c694:	str	w0, [x19, #8]
    c698:	b	c6d8 <BZ2_decompress@@Base+0x1f70>
    c69c:	ldr	x0, [x19]
    c6a0:	ldr	w2, [x0, #8]
    c6a4:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c6a8:	ldr	x16, [x0]
    c6ac:	sub	w15, w2, #0x1
    c6b0:	ldr	w14, [x19, #32]
    c6b4:	add	w1, w1, #0x8
    c6b8:	ldr	w2, [x0, #12]
    c6bc:	ldrb	w17, [x16], #1
    c6c0:	add	w2, w2, #0x1
    c6c4:	orr	w14, w17, w14, lsl #8
    c6c8:	stp	w14, w1, [x19, #32]
    c6cc:	str	x16, [x0]
    c6d0:	stp	w15, w2, [x0, #8]
    c6d4:	cbz	w2, cef8 <BZ2_decompress@@Base+0x2790>
    c6d8:	cmp	w1, #0x7
    c6dc:	b.le	c69c <BZ2_decompress@@Base+0x1f34>
    c6e0:	ldr	w0, [x19, #32]
    c6e4:	sub	w1, w1, #0x8
    c6e8:	ldr	w2, [x19, #3180]
    c6ec:	str	w1, [x19, #36]
    c6f0:	lsr	w1, w0, w1
    c6f4:	mov	w0, #0x1                   	// #1
    c6f8:	bfi	w1, w2, #8, #24
    c6fc:	str	w0, [x19, #8]
    c700:	mov	w0, #0x4                   	// #4
    c704:	str	w1, [x19, #3180]
    c708:	b	a888 <BZ2_decompress@@Base+0x120>
    c70c:	ldr	w1, [x19, #36]
    c710:	b	c690 <BZ2_decompress@@Base+0x1f28>
    c714:	ldr	w0, [x19, #36]
    c718:	b	abdc <BZ2_decompress@@Base+0x474>
    c71c:	ldr	w0, [x19, #36]
    c720:	b	ab04 <BZ2_decompress@@Base+0x39c>
    c724:	ldr	w0, [x19, #36]
    c728:	b	ab70 <BZ2_decompress@@Base+0x408>
    c72c:	ldr	w1, [x19, #36]
    c730:	mov	w0, #0x30                  	// #48
    c734:	str	w0, [x19, #8]
    c738:	b	c778 <BZ2_decompress@@Base+0x2010>
    c73c:	ldr	x0, [x19]
    c740:	ldr	w2, [x0, #8]
    c744:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c748:	ldr	x16, [x0]
    c74c:	sub	w15, w2, #0x1
    c750:	ldr	w14, [x19, #32]
    c754:	add	w1, w1, #0x8
    c758:	ldr	w2, [x0, #12]
    c75c:	ldrb	w17, [x16], #1
    c760:	add	w2, w2, #0x1
    c764:	orr	w14, w17, w14, lsl #8
    c768:	stp	w14, w1, [x19, #32]
    c76c:	str	x16, [x0]
    c770:	stp	w15, w2, [x0, #8]
    c774:	cbz	w2, cf28 <BZ2_decompress@@Base+0x27c0>
    c778:	cmp	w1, #0x7
    c77c:	b.le	c73c <BZ2_decompress@@Base+0x1fd4>
    c780:	ldr	w0, [x19, #32]
    c784:	sub	w1, w1, #0x8
    c788:	ldr	w2, [x19, #3180]
    c78c:	str	w1, [x19, #36]
    c790:	lsr	w0, w0, w1
    c794:	bfi	w0, w2, #8, #24
    c798:	str	w0, [x19, #3180]
    c79c:	b	c624 <BZ2_decompress@@Base+0x1ebc>
    c7a0:	ldr	w0, [x19, #36]
    c7a4:	b	bf0c <BZ2_decompress@@Base+0x17a4>
    c7a8:	ldr	w0, [x19, #36]
    c7ac:	b	bf78 <BZ2_decompress@@Base+0x1810>
    c7b0:	ldr	w0, [x19, #36]
    c7b4:	b	bfe4 <BZ2_decompress@@Base+0x187c>
    c7b8:	ldr	w0, [x19, #36]
    c7bc:	b	c050 <BZ2_decompress@@Base+0x18e8>
    c7c0:	ldr	w0, [x19, #36]
    c7c4:	b	c0bc <BZ2_decompress@@Base+0x1954>
    c7c8:	ldr	w0, [x19, #36]
    c7cc:	b	c128 <BZ2_decompress@@Base+0x19c0>
    c7d0:	ldr	w0, [x19, #36]
    c7d4:	b	c1b8 <BZ2_decompress@@Base+0x1a50>
    c7d8:	ldr	w0, [x19, #36]
    c7dc:	b	be30 <BZ2_decompress@@Base+0x16c8>
    c7e0:	ldr	w0, [x19, #36]
    c7e4:	mov	w1, #0x2a                  	// #42
    c7e8:	str	w1, [x19, #8]
    c7ec:	b	c82c <BZ2_decompress@@Base+0x20c4>
    c7f0:	ldr	x1, [x19]
    c7f4:	ldr	w2, [x1, #8]
    c7f8:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c7fc:	ldr	x16, [x1]
    c800:	sub	w15, w2, #0x1
    c804:	ldr	w14, [x19, #32]
    c808:	add	w0, w0, #0x8
    c80c:	ldr	w2, [x1, #12]
    c810:	ldrb	w17, [x16], #1
    c814:	add	w2, w2, #0x1
    c818:	orr	w14, w17, w14, lsl #8
    c81c:	stp	w14, w0, [x19, #32]
    c820:	str	x16, [x1]
    c824:	stp	w15, w2, [x1, #8]
    c828:	cbz	w2, d098 <BZ2_decompress@@Base+0x2930>
    c82c:	cmp	w0, #0x7
    c830:	b.le	c7f0 <BZ2_decompress@@Base+0x2088>
    c834:	ldr	w2, [x19, #32]
    c838:	sub	w1, w0, #0x8
    c83c:	str	w1, [x19, #36]
    c840:	mov	w0, #0xfffffffc            	// #-4
    c844:	lsr	w2, w2, w1
    c848:	and	w2, w2, #0xff
    c84c:	cmp	w2, #0x72
    c850:	b.ne	a888 <BZ2_decompress@@Base+0x120>  // b.any
    c854:	mov	w0, #0x2b                  	// #43
    c858:	str	w0, [x19, #8]
    c85c:	b	c89c <BZ2_decompress@@Base+0x2134>
    c860:	ldr	x0, [x19]
    c864:	ldr	w2, [x0, #8]
    c868:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c86c:	ldr	x16, [x0]
    c870:	sub	w15, w2, #0x1
    c874:	ldr	w14, [x19, #32]
    c878:	add	w1, w1, #0x8
    c87c:	ldr	w2, [x0, #12]
    c880:	ldrb	w17, [x16], #1
    c884:	add	w2, w2, #0x1
    c888:	orr	w14, w17, w14, lsl #8
    c88c:	stp	w14, w1, [x19, #32]
    c890:	str	x16, [x0]
    c894:	stp	w15, w2, [x0, #8]
    c898:	cbz	w2, d028 <BZ2_decompress@@Base+0x28c0>
    c89c:	cmp	w1, #0x7
    c8a0:	b.le	c860 <BZ2_decompress@@Base+0x20f8>
    c8a4:	ldr	w2, [x19, #32]
    c8a8:	sub	w1, w1, #0x8
    c8ac:	str	w1, [x19, #36]
    c8b0:	mov	w0, #0xfffffffc            	// #-4
    c8b4:	lsr	w2, w2, w1
    c8b8:	and	w2, w2, #0xff
    c8bc:	cmp	w2, #0x45
    c8c0:	b.ne	a888 <BZ2_decompress@@Base+0x120>  // b.any
    c8c4:	mov	w0, #0x2c                  	// #44
    c8c8:	str	w0, [x19, #8]
    c8cc:	b	c90c <BZ2_decompress@@Base+0x21a4>
    c8d0:	ldr	x0, [x19]
    c8d4:	ldr	w2, [x0, #8]
    c8d8:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c8dc:	ldr	x16, [x0]
    c8e0:	sub	w15, w2, #0x1
    c8e4:	ldr	w14, [x19, #32]
    c8e8:	add	w1, w1, #0x8
    c8ec:	ldr	w2, [x0, #12]
    c8f0:	ldrb	w17, [x16], #1
    c8f4:	add	w2, w2, #0x1
    c8f8:	orr	w14, w17, w14, lsl #8
    c8fc:	stp	w14, w1, [x19, #32]
    c900:	str	x16, [x0]
    c904:	stp	w15, w2, [x0, #8]
    c908:	cbz	w2, cfe8 <BZ2_decompress@@Base+0x2880>
    c90c:	cmp	w1, #0x7
    c910:	b.le	c8d0 <BZ2_decompress@@Base+0x2168>
    c914:	ldr	w2, [x19, #32]
    c918:	sub	w1, w1, #0x8
    c91c:	str	w1, [x19, #36]
    c920:	mov	w0, #0xfffffffc            	// #-4
    c924:	lsr	w2, w2, w1
    c928:	and	w2, w2, #0xff
    c92c:	cmp	w2, #0x38
    c930:	b.ne	a888 <BZ2_decompress@@Base+0x120>  // b.any
    c934:	mov	w0, #0x2d                  	// #45
    c938:	str	w0, [x19, #8]
    c93c:	b	c97c <BZ2_decompress@@Base+0x2214>
    c940:	ldr	x0, [x19]
    c944:	ldr	w2, [x0, #8]
    c948:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c94c:	ldr	x16, [x0]
    c950:	sub	w15, w2, #0x1
    c954:	ldr	w14, [x19, #32]
    c958:	add	w1, w1, #0x8
    c95c:	ldr	w2, [x0, #12]
    c960:	ldrb	w17, [x16], #1
    c964:	add	w2, w2, #0x1
    c968:	orr	w14, w17, w14, lsl #8
    c96c:	stp	w14, w1, [x19, #32]
    c970:	str	x16, [x0]
    c974:	stp	w15, w2, [x0, #8]
    c978:	cbz	w2, cf78 <BZ2_decompress@@Base+0x2810>
    c97c:	cmp	w1, #0x7
    c980:	b.le	c940 <BZ2_decompress@@Base+0x21d8>
    c984:	ldr	w2, [x19, #32]
    c988:	sub	w1, w1, #0x8
    c98c:	str	w1, [x19, #36]
    c990:	mov	w0, #0xfffffffc            	// #-4
    c994:	lsr	w2, w2, w1
    c998:	and	w2, w2, #0xff
    c99c:	cmp	w2, #0x50
    c9a0:	b.ne	a888 <BZ2_decompress@@Base+0x120>  // b.any
    c9a4:	mov	w0, #0x2e                  	// #46
    c9a8:	str	w0, [x19, #8]
    c9ac:	b	c9ec <BZ2_decompress@@Base+0x2284>
    c9b0:	ldr	x0, [x19]
    c9b4:	ldr	w2, [x0, #8]
    c9b8:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    c9bc:	ldr	x16, [x0]
    c9c0:	sub	w15, w2, #0x1
    c9c4:	ldr	w14, [x19, #32]
    c9c8:	add	w1, w1, #0x8
    c9cc:	ldr	w2, [x0, #12]
    c9d0:	ldrb	w17, [x16], #1
    c9d4:	add	w2, w2, #0x1
    c9d8:	orr	w14, w17, w14, lsl #8
    c9dc:	stp	w14, w1, [x19, #32]
    c9e0:	str	x16, [x0]
    c9e4:	stp	w15, w2, [x0, #8]
    c9e8:	cbz	w2, cf88 <BZ2_decompress@@Base+0x2820>
    c9ec:	cmp	w1, #0x7
    c9f0:	b.le	c9b0 <BZ2_decompress@@Base+0x2248>
    c9f4:	ldr	w2, [x19, #32]
    c9f8:	sub	w1, w1, #0x8
    c9fc:	str	w1, [x19, #36]
    ca00:	mov	w0, #0xfffffffc            	// #-4
    ca04:	lsr	w2, w2, w1
    ca08:	and	w2, w2, #0xff
    ca0c:	cmp	w2, #0x90
    ca10:	b.ne	a888 <BZ2_decompress@@Base+0x120>  // b.any
    ca14:	str	wzr, [x19, #3180]
    ca18:	mov	w0, #0x2f                  	// #47
    ca1c:	str	w0, [x19, #8]
    ca20:	b	ca60 <BZ2_decompress@@Base+0x22f8>
    ca24:	ldr	x0, [x19]
    ca28:	ldr	w2, [x0, #8]
    ca2c:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    ca30:	ldr	x16, [x0]
    ca34:	sub	w15, w2, #0x1
    ca38:	ldr	w14, [x19, #32]
    ca3c:	add	w1, w1, #0x8
    ca40:	ldr	w2, [x0, #12]
    ca44:	ldrb	w17, [x16], #1
    ca48:	add	w2, w2, #0x1
    ca4c:	orr	w14, w17, w14, lsl #8
    ca50:	stp	w14, w1, [x19, #32]
    ca54:	str	x16, [x0]
    ca58:	stp	w15, w2, [x0, #8]
    ca5c:	cbz	w2, cf98 <BZ2_decompress@@Base+0x2830>
    ca60:	cmp	w1, #0x7
    ca64:	b.le	ca24 <BZ2_decompress@@Base+0x22bc>
    ca68:	ldr	w0, [x19, #32]
    ca6c:	sub	w1, w1, #0x8
    ca70:	ldr	w2, [x19, #3180]
    ca74:	str	w1, [x19, #36]
    ca78:	lsr	w0, w0, w1
    ca7c:	bfi	w0, w2, #8, #24
    ca80:	str	w0, [x19, #3180]
    ca84:	b	c730 <BZ2_decompress@@Base+0x1fc8>
    ca88:	ldr	w0, [x19, #36]
    ca8c:	mov	w1, #0xd                   	// #13
    ca90:	str	w1, [x19, #8]
    ca94:	b	cad0 <BZ2_decompress@@Base+0x2368>
    ca98:	ldr	w1, [x14, #8]
    ca9c:	cbz	w1, ce70 <BZ2_decompress@@Base+0x2708>
    caa0:	ldr	x16, [x14]
    caa4:	sub	w15, w1, #0x1
    caa8:	ldr	w2, [x19, #32]
    caac:	add	w0, w0, #0x8
    cab0:	ldr	w1, [x14, #12]
    cab4:	ldrb	w17, [x16], #1
    cab8:	add	w1, w1, #0x1
    cabc:	orr	w2, w17, w2, lsl #8
    cac0:	stp	w2, w0, [x19, #32]
    cac4:	str	x16, [x14]
    cac8:	stp	w15, w1, [x14, #8]
    cacc:	cbz	w1, cfb8 <BZ2_decompress@@Base+0x2850>
    cad0:	cmp	w0, #0x7
    cad4:	b.le	ca98 <BZ2_decompress@@Base+0x2330>
    cad8:	ldr	w1, [x19, #32]
    cadc:	sub	w0, w0, #0x8
    cae0:	str	w0, [x19, #36]
    cae4:	lsr	w0, w1, w0
    cae8:	and	w0, w0, #0xff
    caec:	sub	w1, w0, #0x31
    caf0:	cmp	w1, #0x8
    caf4:	b.hi	d1d4 <BZ2_decompress@@Base+0x2a6c>  // b.pmore
    caf8:	ldrb	w2, [x19, #44]
    cafc:	sub	w0, w0, #0x30
    cb00:	mov	w1, #0x86a0                	// #34464
    cb04:	str	x14, [sp, #128]
    cb08:	movk	w1, #0x1, lsl #16
    cb0c:	ldr	x15, [x14, #56]
    cb10:	str	w0, [x19, #40]
    cb14:	mul	w1, w0, w1
    cb18:	ldr	x0, [x14, #72]
    cb1c:	cbz	w2, aa28 <BZ2_decompress@@Base+0x2c0>
    cb20:	lsl	w1, w1, #1
    cb24:	mov	w2, #0x1                   	// #1
    cb28:	str	w3, [sp, #136]
    cb2c:	str	w13, [sp, #144]
    cb30:	stp	w18, w6, [sp, #152]
    cb34:	str	w11, [sp, #160]
    cb38:	str	w12, [sp, #168]
    cb3c:	str	w4, [sp, #176]
    cb40:	str	w10, [sp, #184]
    cb44:	str	w7, [sp, #192]
    cb48:	stp	x9, x8, [sp, #200]
    cb4c:	str	w5, [sp, #232]
    cb50:	blr	x15
    cb54:	ldr	x14, [sp, #128]
    cb58:	mov	w2, #0x86a0                	// #34464
    cb5c:	ldr	w1, [x19, #40]
    cb60:	movk	w2, #0x1, lsl #16
    cb64:	ldr	x15, [x14, #56]
    cb68:	str	x0, [x19, #3160]
    cb6c:	ldr	x0, [x14, #72]
    cb70:	mul	w1, w1, w2
    cb74:	mov	w2, #0x1                   	// #1
    cb78:	asr	w1, w1, #1
    cb7c:	blr	x15
    cb80:	ldr	x1, [x19, #3160]
    cb84:	str	x0, [x19, #3168]
    cb88:	ldr	w3, [sp, #136]
    cb8c:	cmp	x1, #0x0
    cb90:	ldr	w13, [sp, #144]
    cb94:	ldp	w18, w6, [sp, #152]
    cb98:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    cb9c:	ldr	w11, [sp, #160]
    cba0:	ldr	w12, [sp, #168]
    cba4:	ldr	w4, [sp, #176]
    cba8:	ldr	w10, [sp, #184]
    cbac:	ldr	w7, [sp, #192]
    cbb0:	ldr	w5, [sp, #232]
    cbb4:	ldp	x9, x8, [sp, #200]
    cbb8:	b.ne	aa8c <BZ2_decompress@@Base+0x324>  // b.any
    cbbc:	mov	w0, #0xfffffffd            	// #-3
    cbc0:	b	a888 <BZ2_decompress@@Base+0x120>
    cbc4:	ldr	w0, [x19, #36]
    cbc8:	b	acb4 <BZ2_decompress@@Base+0x54c>
    cbcc:	ldr	w0, [x19, #36]
    cbd0:	b	ac48 <BZ2_decompress@@Base+0x4e0>
    cbd4:	ldr	w0, [x19, #36]
    cbd8:	mov	w1, #0x14                  	// #20
    cbdc:	str	w1, [x19, #8]
    cbe0:	b	cc20 <BZ2_decompress@@Base+0x24b8>
    cbe4:	ldr	x1, [x19]
    cbe8:	ldr	w2, [x1, #8]
    cbec:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    cbf0:	ldr	x16, [x1]
    cbf4:	sub	w15, w2, #0x1
    cbf8:	ldr	w14, [x19, #32]
    cbfc:	add	w0, w0, #0x8
    cc00:	ldr	w2, [x1, #12]
    cc04:	ldrb	w17, [x16], #1
    cc08:	add	w2, w2, #0x1
    cc0c:	orr	w14, w17, w14, lsl #8
    cc10:	stp	w14, w0, [x19, #32]
    cc14:	str	x16, [x1]
    cc18:	stp	w15, w2, [x1, #8]
    cc1c:	cbz	w2, cfa8 <BZ2_decompress@@Base+0x2840>
    cc20:	cmp	w0, #0x7
    cc24:	b.le	cbe4 <BZ2_decompress@@Base+0x247c>
    cc28:	ldr	w1, [x19, #32]
    cc2c:	sub	w0, w0, #0x8
    cc30:	ldr	w2, [x19, #3176]
    cc34:	str	w0, [x19, #36]
    cc38:	lsr	w1, w1, w0
    cc3c:	bfi	w1, w2, #8, #24
    cc40:	str	w1, [x19, #3176]
    cc44:	b	bea0 <BZ2_decompress@@Base+0x1738>
    cc48:	ldr	w0, [x19, #36]
    cc4c:	mov	w1, #0xb                   	// #11
    cc50:	str	w1, [x19, #8]
    cc54:	b	cc90 <BZ2_decompress@@Base+0x2528>
    cc58:	ldr	w1, [x14, #8]
    cc5c:	cbz	w1, ce70 <BZ2_decompress@@Base+0x2708>
    cc60:	ldr	x16, [x14]
    cc64:	sub	w15, w1, #0x1
    cc68:	ldr	w2, [x19, #32]
    cc6c:	add	w0, w0, #0x8
    cc70:	ldr	w1, [x14, #12]
    cc74:	ldrb	w17, [x16], #1
    cc78:	add	w1, w1, #0x1
    cc7c:	orr	w2, w17, w2, lsl #8
    cc80:	stp	w2, w0, [x19, #32]
    cc84:	str	x16, [x14]
    cc88:	stp	w15, w1, [x14, #8]
    cc8c:	cbz	w1, d048 <BZ2_decompress@@Base+0x28e0>
    cc90:	cmp	w0, #0x7
    cc94:	b.le	cc58 <BZ2_decompress@@Base+0x24f0>
    cc98:	ldr	w1, [x19, #32]
    cc9c:	sub	w0, w0, #0x8
    cca0:	str	w0, [x19, #36]
    cca4:	lsr	w1, w1, w0
    cca8:	and	w1, w1, #0xff
    ccac:	cmp	w1, #0x5a
    ccb0:	b.eq	ccc0 <BZ2_decompress@@Base+0x2558>  // b.none
    ccb4:	mov	w0, #0xfffffffb            	// #-5
    ccb8:	b	a888 <BZ2_decompress@@Base+0x120>
    ccbc:	ldr	w0, [x19, #36]
    ccc0:	mov	w1, #0xc                   	// #12
    ccc4:	str	w1, [x19, #8]
    ccc8:	b	cd04 <BZ2_decompress@@Base+0x259c>
    cccc:	ldr	w1, [x14, #8]
    ccd0:	cbz	w1, ce70 <BZ2_decompress@@Base+0x2708>
    ccd4:	ldr	x16, [x14]
    ccd8:	sub	w15, w1, #0x1
    ccdc:	ldr	w2, [x19, #32]
    cce0:	add	w0, w0, #0x8
    cce4:	ldr	w1, [x14, #12]
    cce8:	ldrb	w17, [x16], #1
    ccec:	add	w1, w1, #0x1
    ccf0:	orr	w2, w17, w2, lsl #8
    ccf4:	stp	w2, w0, [x19, #32]
    ccf8:	str	x16, [x14]
    ccfc:	stp	w15, w1, [x14, #8]
    cd00:	cbz	w1, d008 <BZ2_decompress@@Base+0x28a0>
    cd04:	cmp	w0, #0x7
    cd08:	b.le	cccc <BZ2_decompress@@Base+0x2564>
    cd0c:	ldr	w1, [x19, #32]
    cd10:	sub	w0, w0, #0x8
    cd14:	str	w0, [x19, #36]
    cd18:	lsr	w1, w1, w0
    cd1c:	and	w1, w1, #0xff
    cd20:	cmp	w1, #0x68
    cd24:	b.eq	ca8c <BZ2_decompress@@Base+0x2324>  // b.none
    cd28:	mov	w0, #0xfffffffb            	// #-5
    cd2c:	b	a888 <BZ2_decompress@@Base+0x120>
    cd30:	ldr	w1, [x19, #36]
    cd34:	b	c934 <BZ2_decompress@@Base+0x21cc>
    cd38:	ldr	w0, [x19, #36]
    cd3c:	b	c47c <BZ2_decompress@@Base+0x1d14>
    cd40:	ldr	w0, [x19, #36]
    cd44:	b	c40c <BZ2_decompress@@Base+0x1ca4>
    cd48:	ldr	w0, [x19, #36]
    cd4c:	b	ba58 <BZ2_decompress@@Base+0x12f0>
    cd50:	ldr	w1, [x19, #36]
    cd54:	b	c9a4 <BZ2_decompress@@Base+0x223c>
    cd58:	ldr	w1, [x19, #36]
    cd5c:	b	ca18 <BZ2_decompress@@Base+0x22b0>
    cd60:	ldr	w0, [x19, #36]
    cd64:	mov	w1, #0x27                  	// #39
    cd68:	str	w1, [x19, #8]
    cd6c:	b	cdac <BZ2_decompress@@Base+0x2644>
    cd70:	ldr	x1, [x19]
    cd74:	ldr	w2, [x1, #8]
    cd78:	cbz	w2, ce70 <BZ2_decompress@@Base+0x2708>
    cd7c:	ldr	x16, [x1]
    cd80:	sub	w15, w2, #0x1
    cd84:	ldr	w14, [x19, #32]
    cd88:	add	w0, w0, #0x8
    cd8c:	ldr	w2, [x1, #12]
    cd90:	ldrb	w17, [x16], #1
    cd94:	add	w2, w2, #0x1
    cd98:	orr	w14, w17, w14, lsl #8
    cd9c:	stp	w14, w0, [x19, #32]
    cda0:	str	x16, [x1]
    cda4:	stp	w15, w2, [x1, #8]
    cda8:	cbz	w2, d088 <BZ2_decompress@@Base+0x2920>
    cdac:	cmp	w0, #0x0
    cdb0:	b.le	cd70 <BZ2_decompress@@Base+0x2608>
    cdb4:	ldr	w24, [x19, #32]
    cdb8:	sub	w0, w0, #0x1
    cdbc:	str	w0, [x19, #36]
    cdc0:	lsr	w24, w24, w0
    cdc4:	and	w24, w24, #0x1
    cdc8:	orr	w23, w24, w23, lsl #1
    cdcc:	cmp	w22, #0x14
    cdd0:	b.gt	c500 <BZ2_decompress@@Base+0x1d98>
    cdd4:	sxtw	x1, w22
    cdd8:	ldr	w2, [x9, x1, lsl #2]
    cddc:	cmp	w2, w23
    cde0:	b.ge	d1e0 <BZ2_decompress@@Base+0x2a78>  // b.tcont
    cde4:	add	w22, w22, #0x1
    cde8:	b	cd64 <BZ2_decompress@@Base+0x25fc>
    cdec:	ldr	w1, [x19, #36]
    cdf0:	b	c854 <BZ2_decompress@@Base+0x20ec>
    cdf4:	ldr	w1, [x19, #36]
    cdf8:	b	c8c4 <BZ2_decompress@@Base+0x215c>
    cdfc:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    ce00:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    ce04:	add	x1, x1, #0x260
    ce08:	str	w3, [sp, #128]
    ce0c:	ldr	x0, [x0, #4008]
    ce10:	str	w13, [sp, #136]
    ce14:	str	w18, [sp, #144]
    ce18:	stp	w6, w5, [sp, #152]
    ce1c:	ldr	x0, [x0]
    ce20:	str	w12, [sp, #160]
    ce24:	str	w4, [sp, #168]
    ce28:	str	w10, [sp, #176]
    ce2c:	str	w7, [sp, #184]
    ce30:	stp	x9, x8, [sp, #192]
    ce34:	str	w11, [sp, #232]
    ce38:	bl	17c0 <fprintf@plt>
    ce3c:	ldr	w0, [x19, #36]
    ce40:	ldr	w3, [sp, #128]
    ce44:	ldr	w13, [sp, #136]
    ce48:	ldr	w18, [sp, #144]
    ce4c:	ldp	w6, w5, [sp, #152]
    ce50:	str	wzr, [x19, #3176]
    ce54:	ldr	w12, [sp, #160]
    ce58:	ldr	w4, [sp, #168]
    ce5c:	ldr	w10, [sp, #176]
    ce60:	ldr	w7, [sp, #184]
    ce64:	ldr	w11, [sp, #232]
    ce68:	ldp	x9, x8, [sp, #192]
    ce6c:	b	cbd8 <BZ2_decompress@@Base+0x2470>
    ce70:	mov	w0, #0x0                   	// #0
    ce74:	b	a888 <BZ2_decompress@@Base+0x120>
    ce78:	ldr	w2, [x1, #16]
    ce7c:	add	w2, w2, #0x1
    ce80:	str	w2, [x1, #16]
    ce84:	b	c210 <BZ2_decompress@@Base+0x1aa8>
    ce88:	ldr	w2, [x1, #16]
    ce8c:	add	w2, w2, #0x1
    ce90:	str	w2, [x1, #16]
    ce94:	b	c4d8 <BZ2_decompress@@Base+0x1d70>
    ce98:	ldr	w2, [x1, #16]
    ce9c:	add	w2, w2, #0x1
    cea0:	str	w2, [x1, #16]
    cea4:	b	c170 <BZ2_decompress@@Base+0x1a08>
    cea8:	ldr	w2, [x1, #16]
    ceac:	add	w2, w2, #0x1
    ceb0:	str	w2, [x1, #16]
    ceb4:	b	c104 <BZ2_decompress@@Base+0x199c>
    ceb8:	ldr	w2, [x1, #16]
    cebc:	add	w2, w2, #0x1
    cec0:	str	w2, [x1, #16]
    cec4:	b	c098 <BZ2_decompress@@Base+0x1930>
    cec8:	ldr	w2, [x1, #16]
    cecc:	add	w2, w2, #0x1
    ced0:	str	w2, [x1, #16]
    ced4:	b	c02c <BZ2_decompress@@Base+0x18c4>
    ced8:	ldr	w1, [x0, #16]
    cedc:	add	w1, w1, #0x1
    cee0:	str	w1, [x0, #16]
    cee4:	b	c30c <BZ2_decompress@@Base+0x1ba4>
    cee8:	ldr	w2, [x1, #16]
    ceec:	add	w2, w2, #0x1
    cef0:	str	w2, [x1, #16]
    cef4:	b	bfc0 <BZ2_decompress@@Base+0x1858>
    cef8:	ldr	w2, [x0, #16]
    cefc:	add	w2, w2, #0x1
    cf00:	str	w2, [x0, #16]
    cf04:	b	c6d8 <BZ2_decompress@@Base+0x1f70>
    cf08:	ldr	w2, [x1, #16]
    cf0c:	add	w2, w2, #0x1
    cf10:	str	w2, [x1, #16]
    cf14:	b	bf54 <BZ2_decompress@@Base+0x17ec>
    cf18:	ldr	w2, [x0, #16]
    cf1c:	add	w2, w2, #0x1
    cf20:	str	w2, [x0, #16]
    cf24:	b	c66c <BZ2_decompress@@Base+0x1f04>
    cf28:	ldr	w2, [x0, #16]
    cf2c:	add	w2, w2, #0x1
    cf30:	str	w2, [x0, #16]
    cf34:	b	c778 <BZ2_decompress@@Base+0x2010>
    cf38:	ldr	w2, [x1, #16]
    cf3c:	add	w2, w2, #0x1
    cf40:	str	w2, [x1, #16]
    cf44:	b	bee8 <BZ2_decompress@@Base+0x1780>
    cf48:	ldr	w2, [x1, #16]
    cf4c:	add	w2, w2, #0x1
    cf50:	str	w2, [x1, #16]
    cf54:	b	ac90 <BZ2_decompress@@Base+0x528>
    cf58:	ldr	w2, [x1, #16]
    cf5c:	add	w2, w2, #0x1
    cf60:	str	w2, [x1, #16]
    cf64:	b	acfc <BZ2_decompress@@Base+0x594>
    cf68:	ldr	w2, [x1, #16]
    cf6c:	add	w2, w2, #0x1
    cf70:	str	w2, [x1, #16]
    cf74:	b	c454 <BZ2_decompress@@Base+0x1cec>
    cf78:	ldr	w2, [x0, #16]
    cf7c:	add	w2, w2, #0x1
    cf80:	str	w2, [x0, #16]
    cf84:	b	c97c <BZ2_decompress@@Base+0x2214>
    cf88:	ldr	w2, [x0, #16]
    cf8c:	add	w2, w2, #0x1
    cf90:	str	w2, [x0, #16]
    cf94:	b	c9ec <BZ2_decompress@@Base+0x2284>
    cf98:	ldr	w2, [x0, #16]
    cf9c:	add	w2, w2, #0x1
    cfa0:	str	w2, [x0, #16]
    cfa4:	b	ca60 <BZ2_decompress@@Base+0x22f8>
    cfa8:	ldr	w2, [x1, #16]
    cfac:	add	w2, w2, #0x1
    cfb0:	str	w2, [x1, #16]
    cfb4:	b	cc20 <BZ2_decompress@@Base+0x24b8>
    cfb8:	ldr	w1, [x14, #16]
    cfbc:	add	w1, w1, #0x1
    cfc0:	str	w1, [x14, #16]
    cfc4:	b	cad0 <BZ2_decompress@@Base+0x2368>
    cfc8:	ldr	w2, [x1, #16]
    cfcc:	add	w2, w2, #0x1
    cfd0:	str	w2, [x1, #16]
    cfd4:	b	ac24 <BZ2_decompress@@Base+0x4bc>
    cfd8:	ldr	w2, [x1, #16]
    cfdc:	add	w2, w2, #0x1
    cfe0:	str	w2, [x1, #16]
    cfe4:	b	aad8 <BZ2_decompress@@Base+0x370>
    cfe8:	ldr	w2, [x0, #16]
    cfec:	add	w2, w2, #0x1
    cff0:	str	w2, [x0, #16]
    cff4:	b	c90c <BZ2_decompress@@Base+0x21a4>
    cff8:	ldr	w2, [x1, #16]
    cffc:	add	w2, w2, #0x1
    d000:	str	w2, [x1, #16]
    d004:	b	abb8 <BZ2_decompress@@Base+0x450>
    d008:	ldr	w1, [x14, #16]
    d00c:	add	w1, w1, #0x1
    d010:	str	w1, [x14, #16]
    d014:	b	cd04 <BZ2_decompress@@Base+0x259c>
    d018:	ldr	w2, [x1, #16]
    d01c:	add	w2, w2, #0x1
    d020:	str	w2, [x1, #16]
    d024:	b	ad88 <BZ2_decompress@@Base+0x620>
    d028:	ldr	w2, [x0, #16]
    d02c:	add	w2, w2, #0x1
    d030:	str	w2, [x0, #16]
    d034:	b	c89c <BZ2_decompress@@Base+0x2134>
    d038:	ldr	w2, [x1, #16]
    d03c:	add	w2, w2, #0x1
    d040:	str	w2, [x1, #16]
    d044:	b	ab4c <BZ2_decompress@@Base+0x3e4>
    d048:	ldr	w1, [x14, #16]
    d04c:	add	w1, w1, #0x1
    d050:	str	w1, [x14, #16]
    d054:	b	cc90 <BZ2_decompress@@Base+0x2528>
    d058:	ldr	w2, [x1, #16]
    d05c:	add	w2, w2, #0x1
    d060:	str	w2, [x1, #16]
    d064:	b	ae04 <BZ2_decompress@@Base+0x69c>
    d068:	ldr	w2, [x1, #16]
    d06c:	add	w2, w2, #0x1
    d070:	str	w2, [x1, #16]
    d074:	b	baa0 <BZ2_decompress@@Base+0x1338>
    d078:	ldr	w2, [x1, #16]
    d07c:	add	w2, w2, #0x1
    d080:	str	w2, [x1, #16]
    d084:	b	be78 <BZ2_decompress@@Base+0x1710>
    d088:	ldr	w2, [x1, #16]
    d08c:	add	w2, w2, #0x1
    d090:	str	w2, [x1, #16]
    d094:	b	cdac <BZ2_decompress@@Base+0x2644>
    d098:	ldr	w2, [x1, #16]
    d09c:	add	w2, w2, #0x1
    d0a0:	str	w2, [x1, #16]
    d0a4:	b	c82c <BZ2_decompress@@Base+0x20c4>
    d0a8:	ldr	w1, [x0, #16]
    d0ac:	add	w1, w1, #0x1
    d0b0:	str	w1, [x0, #16]
    d0b4:	b	bb10 <BZ2_decompress@@Base+0x13a8>
    d0b8:	ldr	w2, [x1, #16]
    d0bc:	add	w2, w2, #0x1
    d0c0:	str	w2, [x1, #16]
    d0c4:	b	ba14 <BZ2_decompress@@Base+0x12ac>
    d0c8:	mov	x8, #0x0                   	// #0
    d0cc:	mov	x9, #0x0                   	// #0
    d0d0:	mov	w24, #0x0                   	// #0
    d0d4:	mov	w23, #0x0                   	// #0
    d0d8:	mov	w22, #0x0                   	// #0
    d0dc:	mov	w7, #0x0                   	// #0
    d0e0:	mov	w10, #0x0                   	// #0
    d0e4:	mov	w4, #0x0                   	// #0
    d0e8:	mov	w12, #0x0                   	// #0
    d0ec:	mov	w11, #0x0                   	// #0
    d0f0:	mov	w5, #0x0                   	// #0
    d0f4:	mov	w6, #0x0                   	// #0
    d0f8:	mov	w18, #0x0                   	// #0
    d0fc:	mov	w28, #0x0                   	// #0
    d100:	mov	w26, #0x0                   	// #0
    d104:	mov	w27, #0x0                   	// #0
    d108:	mov	w13, #0x0                   	// #0
    d10c:	mov	w25, #0x0                   	// #0
    d110:	mov	w3, #0x0                   	// #0
    d114:	mov	w0, #0x0                   	// #0
    d118:	str	xzr, [sp, #104]
    d11c:	stp	wzr, wzr, [sp, #112]
    d120:	stp	wzr, wzr, [sp, #120]
    d124:	b	a888 <BZ2_decompress@@Base+0x120>
    d128:	ldr	w2, [x1, #16]
    d12c:	add	w2, w2, #0x1
    d130:	str	w2, [x1, #16]
    d134:	b	c3e4 <BZ2_decompress@@Base+0x1c7c>
    d138:	ldr	w2, [x1, #16]
    d13c:	add	w2, w2, #0x1
    d140:	str	w2, [x1, #16]
    d144:	b	c5f4 <BZ2_decompress@@Base+0x1e8c>
    d148:	ldr	w2, [x1, #16]
    d14c:	add	w2, w2, #0x1
    d150:	str	w2, [x1, #16]
    d154:	b	bdec <BZ2_decompress@@Base+0x1684>
    d158:	ldr	w0, [x14, #16]
    d15c:	add	w0, w0, #0x1
    d160:	str	w0, [x14, #16]
    d164:	b	a9a8 <BZ2_decompress@@Base+0x240>
    d168:	mov	x8, #0x0                   	// #0
    d16c:	mov	x9, #0x0                   	// #0
    d170:	mov	w24, #0x0                   	// #0
    d174:	mov	w23, #0x0                   	// #0
    d178:	mov	w22, #0x0                   	// #0
    d17c:	mov	w7, #0x0                   	// #0
    d180:	mov	w10, #0x0                   	// #0
    d184:	mov	w4, #0x0                   	// #0
    d188:	mov	w12, #0x0                   	// #0
    d18c:	mov	w11, #0x0                   	// #0
    d190:	mov	w5, #0x0                   	// #0
    d194:	mov	w6, #0x0                   	// #0
    d198:	mov	w18, #0x0                   	// #0
    d19c:	mov	w28, #0x0                   	// #0
    d1a0:	mov	w26, #0x0                   	// #0
    d1a4:	mov	w27, #0x0                   	// #0
    d1a8:	mov	w13, #0x0                   	// #0
    d1ac:	mov	w25, #0x0                   	// #0
    d1b0:	mov	w3, #0x0                   	// #0
    d1b4:	mov	w0, #0xfffffffb            	// #-5
    d1b8:	str	xzr, [sp, #104]
    d1bc:	stp	wzr, wzr, [sp, #112]
    d1c0:	stp	wzr, wzr, [sp, #120]
    d1c4:	b	a888 <BZ2_decompress@@Base+0x120>
    d1c8:	mov	w28, #0x0                   	// #0
    d1cc:	mov	w0, #0xfffffffc            	// #-4
    d1d0:	b	a888 <BZ2_decompress@@Base+0x120>
    d1d4:	str	w0, [x19, #40]
    d1d8:	mov	w0, #0xfffffffb            	// #-5
    d1dc:	b	a888 <BZ2_decompress@@Base+0x120>
    d1e0:	ldr	w0, [x8, x1, lsl #2]
    d1e4:	sub	w0, w23, w0
    d1e8:	cmp	w0, #0x101
    d1ec:	b.hi	c500 <BZ2_decompress@@Base+0x1d98>  // b.pmore
    d1f0:	ldr	x1, [sp, #104]
    d1f4:	ldr	w11, [x1, w0, sxtw #2]
    d1f8:	cmp	w11, #0x1
    d1fc:	b.ls	d9f8 <BZ2_decompress@@Base+0x3290>  // b.plast
    d200:	ldrsw	x1, [x19, #7820]
    d204:	add	w0, w10, #0x1
    d208:	cmp	w0, #0x0
    d20c:	add	x1, x19, x1
    d210:	ldrb	w1, [x1, #3724]
    d214:	add	x1, x19, x1
    d218:	ldrb	w14, [x1, #3468]
    d21c:	add	x2, x19, w14, uxtb #2
    d220:	ldr	w1, [x2, #68]
    d224:	add	w1, w1, w0
    d228:	str	w1, [x2, #68]
    d22c:	ldrb	w1, [x19, #44]
    d230:	cbnz	w1, d470 <BZ2_decompress@@Base+0x2d08>
    d234:	b.le	d9f0 <BZ2_decompress@@Base+0x3288>
    d238:	cmp	w12, w4
    d23c:	b.le	da10 <BZ2_decompress@@Base+0x32a8>
    d240:	ldr	x15, [x19, #3152]
    d244:	add	w1, w4, #0x1
    d248:	mov	w2, #0x1                   	// #1
    d24c:	add	w4, w10, w4
    d250:	sub	w2, w2, w12
    d254:	mov	w10, w0
    d258:	sxtw	x1, w1
    d25c:	add	w2, w2, w4
    d260:	sub	x0, x15, #0x4
    d264:	str	w14, [x0, x1, lsl #2]
    d268:	subs	w10, w10, #0x1
    d26c:	mov	w4, w1
    d270:	b.eq	bb4c <BZ2_decompress@@Base+0x13e4>  // b.none
    d274:	add	x1, x1, #0x1
    d278:	cmp	w10, w2
    d27c:	b.ne	d264 <BZ2_decompress@@Base+0x2afc>  // b.any
    d280:	mov	w0, #0xfffffffc            	// #-4
    d284:	b	a888 <BZ2_decompress@@Base+0x120>
    d288:	ldr	w1, [x8, x1, lsl #2]
    d28c:	mov	w0, #0xfffffffc            	// #-4
    d290:	sub	w1, w23, w1
    d294:	cmp	w1, #0x101
    d298:	b.hi	a888 <BZ2_decompress@@Base+0x120>  // b.pmore
    d29c:	ldr	x0, [sp, #104]
    d2a0:	ldr	w11, [x0, w1, sxtw #2]
    d2a4:	b	bb4c <BZ2_decompress@@Base+0x13e4>
    d2a8:	mov	w7, #0x0                   	// #0
    d2ac:	mov	w5, #0x0                   	// #0
    d2b0:	mov	w20, #0x20                  	// #32
    d2b4:	b	b344 <BZ2_decompress@@Base+0xbdc>
    d2b8:	ldr	w0, [x19, #56]
    d2bc:	cmp	w0, #0x0
    d2c0:	ccmp	w0, w4, #0x0, ge  // ge = tcont
    d2c4:	b.ge	c500 <BZ2_decompress@@Base+0x1d98>  // b.tcont
    d2c8:	add	x1, x19, #0x44
    d2cc:	mov	x0, #0x0                   	// #0
    d2d0:	b	d2e0 <BZ2_decompress@@Base+0x2b78>
    d2d4:	add	x0, x0, #0x1
    d2d8:	cmp	x0, #0x100
    d2dc:	b.eq	da28 <BZ2_decompress@@Base+0x32c0>  // b.none
    d2e0:	ldr	w2, [x1, x0, lsl #2]
    d2e4:	mov	w3, w0
    d2e8:	cmp	w2, #0x0
    d2ec:	ccmp	w2, w4, #0x0, ge  // ge = tcont
    d2f0:	b.le	d2d4 <BZ2_decompress@@Base+0x2b6c>
    d2f4:	mov	w0, #0xfffffffc            	// #-4
    d2f8:	b	a888 <BZ2_decompress@@Base+0x120>
    d2fc:	mov	w1, #0x4651                	// #18001
    d300:	cmp	w30, w1
    d304:	b.gt	d310 <BZ2_decompress@@Base+0x2ba8>
    d308:	ldr	x1, [sp, #128]
    d30c:	strb	w25, [x1, x30]
    d310:	add	x30, x30, #0x1
    d314:	cmp	w28, w30
    d318:	b.gt	dad4 <BZ2_decompress@@Base+0x336c>
    d31c:	mov	w14, #0x4652                	// #18002
    d320:	cmp	w28, w14
    d324:	csel	w14, w28, w14, le
    d328:	add	x15, sp, #0xf8
    d32c:	cmp	w26, #0x0
    d330:	mov	w0, #0x0                   	// #0
    d334:	mov	w1, #0x0                   	// #0
    d338:	b.le	d358 <BZ2_decompress@@Base+0x2bf0>
    d33c:	nop
    d340:	strb	w0, [x15, w1, sxtw]
    d344:	add	w0, w0, #0x1
    d348:	and	w0, w0, #0xff
    d34c:	cmp	w0, w26
    d350:	mov	w1, w0
    d354:	b.lt	d340 <BZ2_decompress@@Base+0x2bd8>  // b.tstop
    d358:	cmp	w28, #0x0
    d35c:	mov	w3, #0x0                   	// #0
    d360:	b.le	d44c <BZ2_decompress@@Base+0x2ce4>
    d364:	add	x15, sp, #0xf8
    d368:	mov	x17, #0x1ecc                	// #7884
    d36c:	add	x3, x19, x17
    d370:	str	w22, [sp, #184]
    d374:	mov	x22, x3
    d378:	str	w23, [sp, #192]
    d37c:	mov	w23, w18
    d380:	str	w24, [sp, #200]
    d384:	mov	w24, w6
    d388:	stp	x19, x20, [sp, #208]
    d38c:	mov	x20, x15
    d390:	str	x21, [sp, #224]
    d394:	mov	w21, w14
    d398:	mov	x16, #0x651e                	// #25886
    d39c:	mov	x28, #0x0                   	// #0
    d3a0:	add	x0, x19, x16
    d3a4:	str	x0, [sp, #176]
    d3a8:	ldr	x0, [sp, #176]
    d3ac:	ldrb	w0, [x0, x28]
    d3b0:	ldrb	w19, [x20, w0, sxtw]
    d3b4:	cbz	w0, d458 <BZ2_decompress@@Base+0x2cf0>
    d3b8:	and	x16, x0, #0xff
    d3bc:	sub	w0, w0, #0x1
    d3c0:	sub	x1, x16, #0x1
    d3c4:	and	x2, x0, #0xff
    d3c8:	sub	x1, x1, w0, uxtb
    d3cc:	sub	x0, x16, w0, uxtb
    d3d0:	add	x1, x20, x1
    d3d4:	add	x0, x20, x0
    d3d8:	add	x2, x2, #0x1
    d3dc:	str	w5, [sp, #128]
    d3e0:	str	w11, [sp, #136]
    d3e4:	str	w12, [sp, #144]
    d3e8:	stp	w4, w10, [sp, #152]
    d3ec:	stp	x9, x8, [sp, #160]
    d3f0:	str	w7, [sp, #232]
    d3f4:	bl	1530 <memmove@plt>
    d3f8:	strb	w19, [x22, x28]
    d3fc:	add	x28, x28, #0x1
    d400:	strb	w19, [sp, #248]
    d404:	cmp	w21, w28
    d408:	ldr	w5, [sp, #128]
    d40c:	ldr	w11, [sp, #136]
    d410:	ldr	w12, [sp, #144]
    d414:	ldp	w4, w10, [sp, #152]
    d418:	ldr	w7, [sp, #232]
    d41c:	ldp	x9, x8, [sp, #160]
    d420:	b.gt	d3a8 <BZ2_decompress@@Base+0x2c40>
    d424:	ldp	x19, x20, [sp, #208]
    d428:	cmp	w21, #0x0
    d42c:	mov	w18, w23
    d430:	mov	w6, w24
    d434:	mov	w14, w21
    d438:	csinc	w3, w21, wzr, gt
    d43c:	ldr	w22, [sp, #184]
    d440:	ldr	w23, [sp, #192]
    d444:	ldr	w24, [sp, #200]
    d448:	ldr	x21, [sp, #224]
    d44c:	mov	w28, w14
    d450:	mov	w13, #0x0                   	// #0
    d454:	b	ae48 <BZ2_decompress@@Base+0x6e0>
    d458:	strb	w19, [x22, x28]
    d45c:	add	x28, x28, #0x1
    d460:	strb	w19, [sp, #248]
    d464:	cmp	w21, w28
    d468:	b.gt	d3a8 <BZ2_decompress@@Base+0x2c40>
    d46c:	b	d424 <BZ2_decompress@@Base+0x2cbc>
    d470:	b.le	d9f0 <BZ2_decompress@@Base+0x3288>
    d474:	cmp	w12, w4
    d478:	b.le	da10 <BZ2_decompress@@Base+0x32a8>
    d47c:	ldr	x15, [x19, #3160]
    d480:	add	w1, w4, #0x1
    d484:	mov	w2, #0x1                   	// #1
    d488:	add	w4, w4, w10
    d48c:	sub	w2, w2, w12
    d490:	sxtw	x1, w1
    d494:	and	w14, w14, #0xffff
    d498:	mov	w10, w0
    d49c:	add	w2, w2, w4
    d4a0:	sub	x15, x15, #0x2
    d4a4:	strh	w14, [x15, x1, lsl #1]
    d4a8:	subs	w10, w10, #0x1
    d4ac:	mov	w4, w1
    d4b0:	b.eq	bb4c <BZ2_decompress@@Base+0x13e4>  // b.none
    d4b4:	add	x1, x1, #0x1
    d4b8:	cmp	w2, w10
    d4bc:	b.ne	d4a4 <BZ2_decompress@@Base+0x2d3c>  // b.any
    d4c0:	mov	w0, #0xfffffffc            	// #-4
    d4c4:	b	a888 <BZ2_decompress@@Base+0x120>
    d4c8:	mov	w4, #0x0                   	// #0
    d4cc:	mov	w5, #0x0                   	// #0
    d4d0:	mov	w6, #0x0                   	// #0
    d4d4:	mov	w3, #0x100                 	// #256
    d4d8:	mov	w0, #0xfffffffc            	// #-4
    d4dc:	b	a888 <BZ2_decompress@@Base+0x120>
    d4e0:	mov	w13, #0x0                   	// #0
    d4e4:	b	b610 <BZ2_decompress@@Base+0xea8>
    d4e8:	ldr	x0, [x19, #3152]
    d4ec:	str	w2, [x0, w4, sxtw #2]
    d4f0:	b	bd20 <BZ2_decompress@@Base+0x15b8>
    d4f4:	lsr	w0, w14, #4
    d4f8:	and	w2, w14, #0xf
    d4fc:	lsr	w14, w14, #4
    d500:	add	x0, x19, x0, lsl #2
    d504:	str	x0, [sp, #136]
    d508:	ldr	w15, [x0, #7820]
    d50c:	add	w0, w15, w2
    d510:	cmp	w15, w0
    d514:	add	x1, x19, w0, sxtw
    d518:	sxtw	x0, w0
    d51c:	ldrb	w1, [x1, #3724]
    d520:	str	w1, [sp, #128]
    d524:	b.ge	d5a4 <BZ2_decompress@@Base+0x2e3c>  // b.tcont
    d528:	sub	w2, w2, #0x1
    d52c:	add	x1, x0, #0xe8b
    d530:	add	x0, x0, #0xe8c
    d534:	sub	x1, x1, x2
    d538:	sub	x0, x0, x2
    d53c:	add	x1, x19, x1
    d540:	add	x0, x19, x0
    d544:	add	x2, x2, #0x1
    d548:	str	w15, [sp, #144]
    d54c:	stp	w3, w13, [sp, #152]
    d550:	str	w6, [sp, #160]
    d554:	str	w5, [sp, #168]
    d558:	str	w11, [sp, #176]
    d55c:	str	w12, [sp, #184]
    d560:	str	w4, [sp, #192]
    d564:	str	w10, [sp, #200]
    d568:	str	w7, [sp, #208]
    d56c:	stp	x9, x8, [sp, #216]
    d570:	stp	w18, w14, [sp, #232]
    d574:	bl	1530 <memmove@plt>
    d578:	ldp	x9, x8, [sp, #216]
    d57c:	ldr	w15, [sp, #144]
    d580:	ldp	w3, w13, [sp, #152]
    d584:	ldr	w6, [sp, #160]
    d588:	ldr	w5, [sp, #168]
    d58c:	ldr	w11, [sp, #176]
    d590:	ldr	w12, [sp, #184]
    d594:	ldr	w4, [sp, #192]
    d598:	ldr	w10, [sp, #200]
    d59c:	ldr	w7, [sp, #208]
    d5a0:	ldp	w18, w14, [sp, #232]
    d5a4:	subs	w2, w14, #0x1
    d5a8:	ldr	x1, [sp, #136]
    d5ac:	ldr	w0, [x1, #7816]
    d5b0:	str	w15, [x1, #7820]
    d5b4:	add	x15, x19, w15, sxtw
    d5b8:	add	w0, w0, #0xf
    d5bc:	add	x0, x19, w0, sxtw
    d5c0:	ldrb	w0, [x0, #3724]
    d5c4:	strb	w0, [x15, #3724]
    d5c8:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d5cc:	add	x2, x19, w2, sxtw #2
    d5d0:	subs	w15, w14, #0x2
    d5d4:	ldr	w1, [x2, #7816]
    d5d8:	ldr	w0, [x2, #7820]
    d5dc:	add	w1, w1, #0xf
    d5e0:	sub	w0, w0, #0x1
    d5e4:	str	w0, [x2, #7820]
    d5e8:	add	x1, x19, w1, sxtw
    d5ec:	add	x0, x19, w0, sxtw
    d5f0:	ldrb	w1, [x1, #3724]
    d5f4:	strb	w1, [x0, #3724]
    d5f8:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d5fc:	add	x15, x19, w15, sxtw #2
    d600:	subs	w2, w14, #0x3
    d604:	ldr	w1, [x15, #7816]
    d608:	ldr	w0, [x15, #7820]
    d60c:	add	w1, w1, #0xf
    d610:	sub	w0, w0, #0x1
    d614:	str	w0, [x15, #7820]
    d618:	add	x1, x19, w1, sxtw
    d61c:	add	x0, x19, w0, sxtw
    d620:	ldrb	w1, [x1, #3724]
    d624:	strb	w1, [x0, #3724]
    d628:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d62c:	add	x2, x19, w2, sxtw #2
    d630:	subs	w15, w14, #0x4
    d634:	ldr	w1, [x2, #7816]
    d638:	ldr	w0, [x2, #7820]
    d63c:	add	w1, w1, #0xf
    d640:	sub	w0, w0, #0x1
    d644:	str	w0, [x2, #7820]
    d648:	add	x1, x19, w1, sxtw
    d64c:	add	x0, x19, w0, sxtw
    d650:	ldrb	w1, [x1, #3724]
    d654:	strb	w1, [x0, #3724]
    d658:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d65c:	add	x15, x19, w15, sxtw #2
    d660:	subs	w2, w14, #0x5
    d664:	ldr	w1, [x15, #7816]
    d668:	ldr	w0, [x15, #7820]
    d66c:	add	w1, w1, #0xf
    d670:	sub	w0, w0, #0x1
    d674:	str	w0, [x15, #7820]
    d678:	add	x1, x19, w1, sxtw
    d67c:	add	x0, x19, w0, sxtw
    d680:	ldrb	w1, [x1, #3724]
    d684:	strb	w1, [x0, #3724]
    d688:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d68c:	add	x2, x19, w2, sxtw #2
    d690:	subs	w15, w14, #0x6
    d694:	ldr	w1, [x2, #7816]
    d698:	ldr	w0, [x2, #7820]
    d69c:	add	w1, w1, #0xf
    d6a0:	sub	w0, w0, #0x1
    d6a4:	str	w0, [x2, #7820]
    d6a8:	add	x1, x19, w1, sxtw
    d6ac:	add	x0, x19, w0, sxtw
    d6b0:	ldrb	w1, [x1, #3724]
    d6b4:	strb	w1, [x0, #3724]
    d6b8:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d6bc:	add	x15, x19, w15, sxtw #2
    d6c0:	subs	w2, w14, #0x7
    d6c4:	ldr	w1, [x15, #7816]
    d6c8:	ldr	w0, [x15, #7820]
    d6cc:	add	w1, w1, #0xf
    d6d0:	sub	w0, w0, #0x1
    d6d4:	str	w0, [x15, #7820]
    d6d8:	add	x1, x19, w1, sxtw
    d6dc:	add	x0, x19, w0, sxtw
    d6e0:	ldrb	w1, [x1, #3724]
    d6e4:	strb	w1, [x0, #3724]
    d6e8:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d6ec:	add	x2, x19, w2, sxtw #2
    d6f0:	subs	w15, w14, #0x8
    d6f4:	ldr	w1, [x2, #7816]
    d6f8:	ldr	w0, [x2, #7820]
    d6fc:	add	w1, w1, #0xf
    d700:	sub	w0, w0, #0x1
    d704:	str	w0, [x2, #7820]
    d708:	add	x1, x19, w1, sxtw
    d70c:	add	x0, x19, w0, sxtw
    d710:	ldrb	w1, [x1, #3724]
    d714:	strb	w1, [x0, #3724]
    d718:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d71c:	add	x15, x19, w15, sxtw #2
    d720:	subs	w2, w14, #0x9
    d724:	ldr	w1, [x15, #7816]
    d728:	ldr	w0, [x15, #7820]
    d72c:	add	w1, w1, #0xf
    d730:	sub	w0, w0, #0x1
    d734:	str	w0, [x15, #7820]
    d738:	add	x1, x19, w1, sxtw
    d73c:	add	x0, x19, w0, sxtw
    d740:	ldrb	w1, [x1, #3724]
    d744:	strb	w1, [x0, #3724]
    d748:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d74c:	add	x2, x19, w2, sxtw #2
    d750:	subs	w15, w14, #0xa
    d754:	ldr	w1, [x2, #7816]
    d758:	ldr	w0, [x2, #7820]
    d75c:	add	w1, w1, #0xf
    d760:	sub	w0, w0, #0x1
    d764:	str	w0, [x2, #7820]
    d768:	add	x1, x19, w1, sxtw
    d76c:	add	x0, x19, w0, sxtw
    d770:	ldrb	w1, [x1, #3724]
    d774:	strb	w1, [x0, #3724]
    d778:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d77c:	add	x15, x19, w15, sxtw #2
    d780:	subs	w2, w14, #0xb
    d784:	ldr	w1, [x15, #7816]
    d788:	ldr	w0, [x15, #7820]
    d78c:	add	w1, w1, #0xf
    d790:	sub	w0, w0, #0x1
    d794:	str	w0, [x15, #7820]
    d798:	add	x1, x19, w1, sxtw
    d79c:	add	x0, x19, w0, sxtw
    d7a0:	ldrb	w1, [x1, #3724]
    d7a4:	strb	w1, [x0, #3724]
    d7a8:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d7ac:	add	x2, x19, w2, sxtw #2
    d7b0:	subs	w15, w14, #0xc
    d7b4:	ldr	w1, [x2, #7816]
    d7b8:	ldr	w0, [x2, #7820]
    d7bc:	add	w1, w1, #0xf
    d7c0:	sub	w0, w0, #0x1
    d7c4:	str	w0, [x2, #7820]
    d7c8:	add	x1, x19, w1, sxtw
    d7cc:	add	x0, x19, w0, sxtw
    d7d0:	ldrb	w1, [x1, #3724]
    d7d4:	strb	w1, [x0, #3724]
    d7d8:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d7dc:	add	x15, x19, w15, sxtw #2
    d7e0:	subs	w2, w14, #0xd
    d7e4:	ldr	w1, [x15, #7816]
    d7e8:	ldr	w0, [x15, #7820]
    d7ec:	add	w1, w1, #0xf
    d7f0:	sub	w0, w0, #0x1
    d7f4:	str	w0, [x15, #7820]
    d7f8:	add	x1, x19, w1, sxtw
    d7fc:	add	x0, x19, w0, sxtw
    d800:	ldrb	w1, [x1, #3724]
    d804:	strb	w1, [x0, #3724]
    d808:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d80c:	add	x2, x19, w2, sxtw #2
    d810:	subs	w15, w14, #0xe
    d814:	ldr	w1, [x2, #7816]
    d818:	ldr	w0, [x2, #7820]
    d81c:	add	w1, w1, #0xf
    d820:	sub	w0, w0, #0x1
    d824:	str	w0, [x2, #7820]
    d828:	add	x1, x19, w1, sxtw
    d82c:	add	x0, x19, w0, sxtw
    d830:	ldrb	w1, [x1, #3724]
    d834:	strb	w1, [x0, #3724]
    d838:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d83c:	add	x15, x19, w15, sxtw #2
    d840:	subs	w2, w14, #0xf
    d844:	ldr	w1, [x15, #7816]
    d848:	ldr	w0, [x15, #7820]
    d84c:	add	w1, w1, #0xf
    d850:	sub	w0, w0, #0x1
    d854:	str	w0, [x15, #7820]
    d858:	add	x1, x19, w1, sxtw
    d85c:	add	x0, x19, w0, sxtw
    d860:	ldrb	w1, [x1, #3724]
    d864:	strb	w1, [x0, #3724]
    d868:	b.eq	d894 <BZ2_decompress@@Base+0x312c>  // b.none
    d86c:	add	x2, x19, w2, sxtw #2
    d870:	ldr	w1, [x2, #7816]
    d874:	ldr	w0, [x2, #7820]
    d878:	add	w1, w1, #0xf
    d87c:	sub	w0, w0, #0x1
    d880:	str	w0, [x2, #7820]
    d884:	add	x1, x19, w1, sxtw
    d888:	add	x0, x19, w0, sxtw
    d88c:	ldrb	w1, [x1, #3724]
    d890:	strb	w1, [x0, #3724]
    d894:	ldr	w0, [x19, #7820]
    d898:	ldrb	w2, [sp, #128]
    d89c:	sub	w0, w0, #0x1
    d8a0:	str	w0, [x19, #7820]
    d8a4:	add	x1, x19, w0, sxtw
    d8a8:	strb	w2, [x1, #3724]
    d8ac:	cbnz	w0, bcf0 <BZ2_decompress@@Base+0x1588>
    d8b0:	mov	x17, #0x1e7c                	// #7804
    d8b4:	add	x0, x19, x17
    d8b8:	mov	x1, #0x1ec8                	// #7880
    d8bc:	mov	w30, #0xff0                 	// #4080
    d8c0:	sub	w30, w30, w0
    d8c4:	add	x17, x19, x1
    d8c8:	mov	x2, #0x1e88                	// #7816
    d8cc:	add	x1, x19, x2
    d8d0:	str	x1, [sp, #136]
    d8d4:	ldr	w1, [x17]
    d8d8:	add	w2, w30, w0
    d8dc:	sub	x0, x0, #0x10
    d8e0:	add	w16, w1, #0xf
    d8e4:	add	w15, w1, #0xe
    d8e8:	add	w14, w1, #0xd
    d8ec:	add	x16, x19, w16, sxtw
    d8f0:	add	x15, x19, w15, sxtw
    d8f4:	add	x14, x19, w14, sxtw
    d8f8:	ldrb	w16, [x16, #3724]
    d8fc:	strb	w16, [x0, #31]
    d900:	add	w16, w1, #0xc
    d904:	ldrb	w15, [x15, #3724]
    d908:	add	x16, x19, w16, sxtw
    d90c:	strb	w15, [x0, #30]
    d910:	add	w15, w1, #0xb
    d914:	ldrb	w14, [x14, #3724]
    d918:	add	x15, x19, w15, sxtw
    d91c:	strb	w14, [x0, #29]
    d920:	add	w14, w1, #0xa
    d924:	ldrb	w16, [x16, #3724]
    d928:	add	x14, x19, w14, sxtw
    d92c:	strb	w16, [x0, #28]
    d930:	add	w16, w1, #0x9
    d934:	ldrb	w15, [x15, #3724]
    d938:	add	x16, x19, w16, sxtw
    d93c:	strb	w15, [x0, #27]
    d940:	add	w15, w1, #0x8
    d944:	ldrb	w14, [x14, #3724]
    d948:	add	x15, x19, w15, sxtw
    d94c:	strb	w14, [x0, #26]
    d950:	add	w14, w1, #0x7
    d954:	ldrb	w16, [x16, #3724]
    d958:	add	x14, x19, w14, sxtw
    d95c:	strb	w16, [x0, #25]
    d960:	add	w16, w1, #0x6
    d964:	ldrb	w15, [x15, #3724]
    d968:	add	x16, x19, w16, sxtw
    d96c:	strb	w15, [x0, #24]
    d970:	add	w15, w1, #0x5
    d974:	ldrb	w14, [x14, #3724]
    d978:	add	x15, x19, w15, sxtw
    d97c:	strb	w14, [x0, #23]
    d980:	add	w14, w1, #0x4
    d984:	ldrb	w16, [x16, #3724]
    d988:	add	x14, x19, w14, sxtw
    d98c:	strb	w16, [x0, #22]
    d990:	add	w16, w1, #0x3
    d994:	ldrb	w15, [x15, #3724]
    d998:	add	x16, x19, w16, sxtw
    d99c:	strb	w15, [x0, #21]
    d9a0:	add	w15, w1, #0x2
    d9a4:	ldrb	w14, [x14, #3724]
    d9a8:	add	x15, x19, w15, sxtw
    d9ac:	strb	w14, [x0, #20]
    d9b0:	add	w14, w1, #0x1
    d9b4:	add	x1, x19, w1, sxtw
    d9b8:	ldrb	w16, [x16, #3724]
    d9bc:	add	x14, x19, w14, sxtw
    d9c0:	strb	w16, [x0, #19]
    d9c4:	ldrb	w15, [x15, #3724]
    d9c8:	strb	w15, [x0, #18]
    d9cc:	ldrb	w14, [x14, #3724]
    d9d0:	strb	w14, [x0, #17]
    d9d4:	ldrb	w1, [x1, #3724]
    d9d8:	strb	w1, [x0, #16]
    d9dc:	ldr	x1, [sp, #136]
    d9e0:	str	w2, [x17], #-4
    d9e4:	cmp	x1, x17
    d9e8:	b.ne	d8d4 <BZ2_decompress@@Base+0x316c>  // b.any
    d9ec:	b	bcf0 <BZ2_decompress@@Base+0x1588>
    d9f0:	mov	w10, w0
    d9f4:	b	bb4c <BZ2_decompress@@Base+0x13e4>
    d9f8:	ldr	w1, [sp, #116]
    d9fc:	mov	w0, #0x1fffff              	// #2097151
    da00:	cmp	w1, w0
    da04:	mov	w0, #0xfffffffc            	// #-4
    da08:	b.gt	a888 <BZ2_decompress@@Base+0x120>
    da0c:	b	c514 <BZ2_decompress@@Base+0x1dac>
    da10:	mov	w10, w0
    da14:	mov	w0, #0xfffffffc            	// #-4
    da18:	b	a888 <BZ2_decompress@@Base+0x120>
    da1c:	mov	w0, #0xfffffffc            	// #-4
    da20:	str	w2, [sp, #116]
    da24:	b	a888 <BZ2_decompress@@Base+0x120>
    da28:	str	wzr, [x19, #1096]
    da2c:	add	x0, x19, #0x44c
    da30:	mov	x2, #0x400                 	// #1024
    da34:	stp	x8, x9, [sp, #136]
    da38:	stp	w7, w10, [sp, #152]
    da3c:	str	w12, [sp, #160]
    da40:	str	w11, [sp, #168]
    da44:	str	w5, [sp, #176]
    da48:	str	w6, [sp, #184]
    da4c:	str	w18, [sp, #192]
    da50:	str	w13, [sp, #200]
    da54:	str	w4, [sp, #232]
    da58:	bl	1520 <memcpy@plt>
    da5c:	ldp	x8, x9, [sp, #136]
    da60:	add	x3, x19, #0x84c
    da64:	ldr	w1, [x19, #1096]
    da68:	ldp	w7, w10, [sp, #152]
    da6c:	str	x3, [sp, #128]
    da70:	ldr	w12, [sp, #160]
    da74:	ldr	w11, [sp, #168]
    da78:	ldr	w5, [sp, #176]
    da7c:	ldr	w6, [sp, #184]
    da80:	ldr	w18, [sp, #192]
    da84:	ldr	w13, [sp, #200]
    da88:	ldr	w4, [sp, #232]
    da8c:	ldr	w2, [x0]
    da90:	add	w1, w1, w2
    da94:	str	w1, [x0], #4
    da98:	cmp	x3, x0
    da9c:	b.ne	da8c <BZ2_decompress@@Base+0x3324>  // b.any
    daa0:	add	x14, x19, #0x448
    daa4:	mov	x0, #0x0                   	// #0
    daa8:	b	dab8 <BZ2_decompress@@Base+0x3350>
    daac:	add	x0, x0, #0x1
    dab0:	cmp	x0, #0x101
    dab4:	b.eq	dadc <BZ2_decompress@@Base+0x3374>  // b.none
    dab8:	ldr	w1, [x14, x0, lsl #2]
    dabc:	mov	w3, w0
    dac0:	cmp	w1, #0x0
    dac4:	ccmp	w1, w4, #0x0, ge  // ge = tcont
    dac8:	b.le	daac <BZ2_decompress@@Base+0x3344>
    dacc:	mov	w0, #0xfffffffc            	// #-4
    dad0:	b	a888 <BZ2_decompress@@Base+0x120>
    dad4:	mov	w25, #0x0                   	// #0
    dad8:	b	c48c <BZ2_decompress@@Base+0x1d24>
    dadc:	mov	x15, x14
    dae0:	mov	x0, x14
    dae4:	mov	w3, #0x1                   	// #1
    dae8:	b	dafc <BZ2_decompress@@Base+0x3394>
    daec:	add	w3, w3, #0x1
    daf0:	add	x0, x0, #0x4
    daf4:	cmp	w3, #0x101
    daf8:	b.eq	db10 <BZ2_decompress@@Base+0x33a8>  // b.none
    dafc:	ldp	w2, w1, [x0]
    db00:	cmp	w2, w1
    db04:	b.le	daec <BZ2_decompress@@Base+0x3384>
    db08:	mov	w0, #0xfffffffc            	// #-4
    db0c:	b	a888 <BZ2_decompress@@Base+0x120>
    db10:	mov	w0, #0xffffffff            	// #-1
    db14:	mov	w1, #0x2                   	// #2
    db18:	str	w1, [x19, #8]
    db1c:	strb	wzr, [x19, #12]
    db20:	str	wzr, [x19, #16]
    db24:	str	w0, [x19, #3184]
    db28:	ldr	w0, [x19, #52]
    db2c:	cmp	w0, #0x1
    db30:	b.le	dba4 <BZ2_decompress@@Base+0x343c>
    db34:	adrp	x3, 22000 <BZ2_bzerror@@Base+0x11200>
    db38:	adrp	x0, 11000 <BZ2_bzerror@@Base+0x200>
    db3c:	mov	x2, #0x6                   	// #6
    db40:	add	x0, x0, #0x278
    db44:	ldr	x3, [x3, #4008]
    db48:	mov	x1, #0x1                   	// #1
    db4c:	str	w13, [sp, #136]
    db50:	str	w18, [sp, #144]
    db54:	ldr	x3, [x3]
    db58:	stp	w6, w5, [sp, #152]
    db5c:	str	w12, [sp, #160]
    db60:	str	w4, [sp, #168]
    db64:	str	w10, [sp, #176]
    db68:	str	w7, [sp, #184]
    db6c:	stp	x9, x8, [sp, #192]
    db70:	stp	x15, x14, [sp, #208]
    db74:	str	w11, [sp, #232]
    db78:	bl	1760 <fwrite@plt>
    db7c:	ldp	x9, x8, [sp, #192]
    db80:	ldp	x15, x14, [sp, #208]
    db84:	ldr	w13, [sp, #136]
    db88:	ldr	w18, [sp, #144]
    db8c:	ldp	w6, w5, [sp, #152]
    db90:	ldr	w12, [sp, #160]
    db94:	ldr	w4, [sp, #168]
    db98:	ldr	w10, [sp, #176]
    db9c:	ldr	w7, [sp, #184]
    dba0:	ldr	w11, [sp, #232]
    dba4:	ldrb	w0, [x19, #44]
    dba8:	cbnz	w0, dc70 <BZ2_decompress@@Base+0x3508>
    dbac:	ldr	x2, [x19, #3152]
    dbb0:	mov	x0, #0x0                   	// #0
    dbb4:	ldr	w1, [x2, x0, lsl #2]
    dbb8:	add	x1, x19, w1, uxtb #2
    dbbc:	ldrsw	x3, [x1, #1096]
    dbc0:	lsl	x3, x3, #2
    dbc4:	ldr	w14, [x2, x3]
    dbc8:	orr	w14, w14, w0, lsl #8
    dbcc:	str	w14, [x2, x3]
    dbd0:	add	x0, x0, #0x1
    dbd4:	ldr	w3, [x1, #1096]
    dbd8:	cmp	w4, w0
    dbdc:	add	w3, w3, #0x1
    dbe0:	str	w3, [x1, #1096]
    dbe4:	b.gt	dbb4 <BZ2_decompress@@Base+0x344c>
    dbe8:	ldrsw	x0, [x19, #56]
    dbec:	mov	w16, #0x86a0                	// #34464
    dbf0:	ldr	w1, [x19, #40]
    dbf4:	movk	w16, #0x1, lsl #16
    dbf8:	ldrb	w15, [x19, #20]
    dbfc:	cmp	w4, #0x0
    dc00:	mov	w14, #0x1                   	// #1
    dc04:	csel	w3, w4, w14, gt
    dc08:	ldr	w0, [x2, x0, lsl #2]
    dc0c:	str	wzr, [x19, #1092]
    dc10:	mul	w1, w1, w16
    dc14:	lsr	w0, w0, #8
    dc18:	str	w0, [x19, #60]
    dc1c:	cbz	w15, dd00 <BZ2_decompress@@Base+0x3598>
    dc20:	str	xzr, [x19, #24]
    dc24:	cmp	w0, w1
    dc28:	b.cs	dcf8 <BZ2_decompress@@Base+0x3590>  // b.hs, b.nlast
    dc2c:	adrp	x15, 22000 <BZ2_bzerror@@Base+0x11200>
    dc30:	ubfiz	x0, x0, #2, #24
    dc34:	ldr	x15, [x15, #4040]
    dc38:	ldr	w1, [x2, x0]
    dc3c:	mov	w0, #0x0                   	// #0
    dc40:	ldr	w2, [x15]
    dc44:	str	w14, [x19, #1092]
    dc48:	sub	w2, w2, #0x1
    dc4c:	stp	w2, w14, [x19, #24]
    dc50:	cmp	w2, #0x1
    dc54:	and	w14, w1, #0xff
    dc58:	cset	w2, eq  // eq = none
    dc5c:	lsr	w1, w1, #8
    dc60:	str	w1, [x19, #60]
    dc64:	eor	w1, w14, w2
    dc68:	str	w1, [x19, #64]
    dc6c:	b	a888 <BZ2_decompress@@Base+0x120>
    dc70:	ldr	w0, [x15]
    dc74:	add	x15, x15, #0x4
    dc78:	str	w0, [x15, #1024]
    dc7c:	ldr	x0, [sp, #128]
    dc80:	cmp	x0, x15
    dc84:	b.ne	dc70 <BZ2_decompress@@Base+0x3508>  // b.any
    dc88:	mov	x2, #0x0                   	// #0
    dc8c:	b	dcb8 <BZ2_decompress@@Base+0x3550>
    dc90:	ldrb	w15, [x16, x0]
    dc94:	and	w15, w15, #0xfffffff0
    dc98:	orr	w1, w15, w1, asr #16
    dc9c:	strb	w1, [x16, x0]
    dca0:	ldr	w0, [x3, #2124]
    dca4:	add	x2, x2, #0x1
    dca8:	cmp	w4, w2
    dcac:	add	w0, w0, #0x1
    dcb0:	str	w0, [x3, #2124]
    dcb4:	b.le	dd28 <BZ2_decompress@@Base+0x35c0>
    dcb8:	ldr	x16, [x19, #3160]
    dcbc:	lsl	x15, x2, #1
    dcc0:	asr	w0, w2, #1
    dcc4:	ldrb	w3, [x16, x15]
    dcc8:	sxtw	x0, w0
    dccc:	add	x3, x19, x3, lsl #2
    dcd0:	ldr	w1, [x3, #2124]
    dcd4:	strh	w1, [x16, x15]
    dcd8:	ldr	x16, [x19, #3168]
    dcdc:	tbz	w2, #0, dc90 <BZ2_decompress@@Base+0x3528>
    dce0:	ldrb	w15, [x16, x0]
    dce4:	asr	w1, w1, #16
    dce8:	and	w15, w15, #0xf
    dcec:	orr	w1, w15, w1, lsl #4
    dcf0:	strb	w1, [x16, x0]
    dcf4:	b	dca0 <BZ2_decompress@@Base+0x3538>
    dcf8:	mov	w0, #0x1                   	// #1
    dcfc:	b	a8fc <BZ2_decompress@@Base+0x194>
    dd00:	cmp	w0, w1
    dd04:	b.cs	dcf8 <BZ2_decompress@@Base+0x3590>  // b.hs, b.nlast
    dd08:	ubfiz	x1, x0, #2, #24
    dd0c:	mov	w0, #0x0                   	// #0
    dd10:	ldr	w1, [x2, x1]
    dd14:	str	w14, [x19, #1092]
    dd18:	and	w2, w1, #0xff
    dd1c:	lsr	w1, w1, #8
    dd20:	stp	w1, w2, [x19, #60]
    dd24:	b	a888 <BZ2_decompress@@Base+0x120>
    dd28:	ldr	w0, [x19, #56]
    dd2c:	ldr	x15, [x19, #3168]
    dd30:	asr	w1, w0, #1
    dd34:	ubfiz	w2, w0, #2, #1
    dd38:	ldr	x30, [x19, #3160]
    dd3c:	ldrb	w25, [x15, w1, sxtw]
    dd40:	ldrh	w1, [x30, w0, sxtw #1]
    dd44:	lsr	w25, w25, w2
    dd48:	ubfiz	w25, w25, #16, #4
    dd4c:	orr	w25, w25, w1
    dd50:	b	dd7c <BZ2_decompress@@Base+0x3614>
    dd54:	and	w2, w2, #0xfffffff0
    dd58:	orr	w0, w2, w0
    dd5c:	and	w0, w0, #0xff
    dd60:	strb	w0, [x1]
    dd64:	mov	w0, w3
    dd68:	ldr	w1, [x19, #56]
    dd6c:	cmp	w3, w1
    dd70:	b.eq	ddc8 <BZ2_decompress@@Base+0x3660>  // b.none
    dd74:	ldr	x30, [x19, #3160]
    dd78:	ldr	x15, [x19, #3168]
    dd7c:	asr	w1, w25, #1
    dd80:	sbfiz	x17, x25, #1, #32
    dd84:	ldrh	w2, [x30, w25, sxtw #1]
    dd88:	ubfiz	w16, w25, #2, #1
    dd8c:	mov	w3, w25
    dd90:	ldrb	w25, [x15, w1, sxtw]
    dd94:	strh	w0, [x30, x17]
    dd98:	sxtw	x17, w1
    dd9c:	asr	w0, w0, #16
    dda0:	add	x1, x15, w1, sxtw
    dda4:	lsr	w25, w25, w16
    dda8:	ubfiz	w25, w25, #16, #4
    ddac:	orr	w25, w25, w2
    ddb0:	ldrb	w2, [x15, x17]
    ddb4:	tbz	w3, #0, dd54 <BZ2_decompress@@Base+0x35ec>
    ddb8:	and	w2, w2, #0xf
    ddbc:	orr	w0, w2, w0, lsl #4
    ddc0:	and	w0, w0, #0xff
    ddc4:	b	dd60 <BZ2_decompress@@Base+0x35f8>
    ddc8:	ldr	w0, [x19, #40]
    ddcc:	mov	w2, #0x86a0                	// #34464
    ddd0:	ldrb	w1, [x19, #20]
    ddd4:	movk	w2, #0x1, lsl #16
    ddd8:	str	w3, [x19, #60]
    dddc:	str	wzr, [x19, #1092]
    dde0:	mul	w0, w0, w2
    dde4:	cbz	w1, dedc <BZ2_decompress@@Base+0x3774>
    dde8:	str	xzr, [x19, #24]
    ddec:	cmp	w3, w0
    ddf0:	b.cs	dcf8 <BZ2_decompress@@Base+0x3590>  // b.hs, b.nlast
    ddf4:	mov	x1, x14
    ddf8:	mov	w0, w3
    ddfc:	str	w3, [sp, #128]
    de00:	str	w13, [sp, #136]
    de04:	str	w18, [sp, #144]
    de08:	stp	w6, w5, [sp, #152]
    de0c:	str	w12, [sp, #160]
    de10:	str	w4, [sp, #168]
    de14:	str	w10, [sp, #176]
    de18:	str	w7, [sp, #184]
    de1c:	stp	x9, x8, [sp, #192]
    de20:	str	w11, [sp, #232]
    de24:	bl	1740 <BZ2_indexIntoF@plt>
    de28:	ldr	w14, [x19, #60]
    de2c:	mov	w2, w0
    de30:	ldr	x15, [x19, #3160]
    de34:	ldr	x16, [x19, #3168]
    de38:	lsr	w1, w14, #1
    de3c:	ldrh	w15, [x15, w14, uxtw #1]
    de40:	ubfiz	w0, w14, #2, #1
    de44:	str	w2, [x19, #64]
    de48:	ldr	w14, [x19, #1092]
    de4c:	ldrb	w1, [x16, x1]
    de50:	add	w14, w14, #0x1
    de54:	str	w14, [x19, #1092]
    de58:	ldr	w3, [sp, #128]
    de5c:	lsr	w1, w1, w0
    de60:	ldr	w0, [x19, #24]
    de64:	ubfiz	w1, w1, #16, #4
    de68:	ldr	w13, [sp, #136]
    de6c:	orr	w1, w1, w15
    de70:	str	w1, [x19, #60]
    de74:	ldr	w18, [sp, #144]
    de78:	ldp	w6, w5, [sp, #152]
    de7c:	ldr	w12, [sp, #160]
    de80:	ldr	w4, [sp, #168]
    de84:	ldr	w10, [sp, #176]
    de88:	ldr	w7, [sp, #184]
    de8c:	ldr	w11, [sp, #232]
    de90:	ldp	x9, x8, [sp, #192]
    de94:	cbnz	w0, debc <BZ2_decompress@@Base+0x3754>
    de98:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    de9c:	ldr	w1, [x19, #28]
    dea0:	ldr	x0, [x0, #4040]
    dea4:	cmp	w1, #0x1ff
    dea8:	add	w14, w1, #0x1
    deac:	ldr	w0, [x0, w1, sxtw #2]
    deb0:	str	w0, [x19, #24]
    deb4:	b.eq	df60 <BZ2_decompress@@Base+0x37f8>  // b.none
    deb8:	str	w14, [x19, #28]
    debc:	sub	w0, w0, #0x1
    dec0:	str	w0, [x19, #24]
    dec4:	cmp	w0, #0x1
    dec8:	mov	w0, #0x0                   	// #0
    decc:	cset	w1, eq  // eq = none
    ded0:	eor	w2, w1, w2
    ded4:	str	w2, [x19, #64]
    ded8:	b	a888 <BZ2_decompress@@Base+0x120>
    dedc:	cmp	w3, w0
    dee0:	b.cs	dcf8 <BZ2_decompress@@Base+0x3590>  // b.hs, b.nlast
    dee4:	mov	x1, x14
    dee8:	mov	w0, w3
    deec:	str	w3, [sp, #128]
    def0:	str	w13, [sp, #136]
    def4:	str	w18, [sp, #144]
    def8:	stp	w6, w5, [sp, #152]
    defc:	str	w12, [sp, #160]
    df00:	str	w4, [sp, #168]
    df04:	str	w10, [sp, #176]
    df08:	str	w7, [sp, #184]
    df0c:	stp	x9, x8, [sp, #192]
    df10:	str	w11, [sp, #232]
    df14:	bl	1740 <BZ2_indexIntoF@plt>
    df18:	ldr	w2, [x19, #60]
    df1c:	mov	w1, w0
    df20:	ldr	x14, [x19, #3160]
    df24:	mov	w0, #0x0                   	// #0
    df28:	ldr	x16, [x19, #3168]
    df2c:	ubfiz	w15, w2, #2, #1
    df30:	ldrh	w14, [x14, w2, uxtw #1]
    df34:	str	w1, [x19, #64]
    df38:	lsr	w1, w2, #1
    df3c:	ldr	w2, [x19, #1092]
    df40:	ldrb	w1, [x16, x1]
    df44:	add	w2, w2, #0x1
    df48:	str	w2, [x19, #1092]
    df4c:	lsr	w1, w1, w15
    df50:	ubfiz	w1, w1, #16, #4
    df54:	orr	w1, w1, w14
    df58:	str	w1, [x19, #60]
    df5c:	b	a85c <BZ2_decompress@@Base+0xf4>
    df60:	str	wzr, [x19, #28]
    df64:	b	debc <BZ2_decompress@@Base+0x3754>
    df68:	ldp	w7, w4, [x0, #92]
    df6c:	and	w8, w7, #0xff
    df70:	cmp	w4, #0x0
    df74:	b.le	e0b0 <BZ2_decompress@@Base+0x3948>
    df78:	adrp	x5, 22000 <BZ2_bzerror@@Base+0x11200>
    df7c:	ldr	w3, [x0, #648]
    df80:	and	w6, w7, #0xff
    df84:	mov	w2, #0x0                   	// #0
    df88:	ldr	x5, [x5, #4016]
    df8c:	nop
    df90:	eor	w1, w6, w3, lsr #24
    df94:	add	w2, w2, #0x1
    df98:	cmp	w2, w4
    df9c:	ldr	w1, [x5, x1, lsl #2]
    dfa0:	eor	w3, w1, w3, lsl #8
    dfa4:	b.ne	df90 <BZ2_decompress@@Base+0x3828>  // b.any
    dfa8:	add	x7, x0, w7, uxtw
    dfac:	str	w3, [x0, #648]
    dfb0:	mov	w1, #0x1                   	// #1
    dfb4:	cmp	w2, #0x2
    dfb8:	strb	w1, [x7, #128]
    dfbc:	ldr	x2, [x0, #64]
    dfc0:	ldrsw	x1, [x0, #108]
    dfc4:	add	x3, x2, x1
    dfc8:	b.eq	e058 <BZ2_decompress@@Base+0x38f0>  // b.none
    dfcc:	cmp	w4, #0x3
    dfd0:	b.eq	e094 <BZ2_decompress@@Base+0x392c>  // b.none
    dfd4:	cmp	w4, #0x1
    dfd8:	b.eq	e080 <BZ2_decompress@@Base+0x3918>  // b.none
    dfdc:	sub	w1, w4, #0x4
    dfe0:	mov	w2, #0x1                   	// #1
    dfe4:	add	x1, x0, w1, sxtw
    dfe8:	strb	w2, [x1, #128]
    dfec:	strb	w8, [x3]
    dff0:	ldr	w1, [x0, #108]
    dff4:	ldr	x2, [x0, #64]
    dff8:	add	w1, w1, #0x1
    dffc:	str	w1, [x0, #108]
    e000:	strb	w8, [x2, w1, sxtw]
    e004:	ldr	w1, [x0, #108]
    e008:	ldr	x2, [x0, #64]
    e00c:	add	w1, w1, #0x1
    e010:	str	w1, [x0, #108]
    e014:	strb	w8, [x2, w1, sxtw]
    e018:	ldr	w1, [x0, #108]
    e01c:	ldr	x2, [x0, #64]
    e020:	add	w1, w1, #0x1
    e024:	str	w1, [x0, #108]
    e028:	strb	w8, [x2, w1, sxtw]
    e02c:	ldr	w1, [x0, #108]
    e030:	ldr	x3, [x0, #64]
    e034:	add	w1, w1, #0x1
    e038:	ldr	w2, [x0, #96]
    e03c:	str	w1, [x0, #108]
    e040:	sub	w2, w2, #0x4
    e044:	strb	w2, [x3, w1, sxtw]
    e048:	ldr	w1, [x0, #108]
    e04c:	add	w1, w1, #0x1
    e050:	str	w1, [x0, #108]
    e054:	ret
    e058:	strb	w8, [x2, x1]
    e05c:	ldr	w1, [x0, #108]
    e060:	ldr	x2, [x0, #64]
    e064:	add	w1, w1, #0x1
    e068:	str	w1, [x0, #108]
    e06c:	strb	w8, [x2, w1, sxtw]
    e070:	ldr	w1, [x0, #108]
    e074:	add	w1, w1, #0x1
    e078:	str	w1, [x0, #108]
    e07c:	ret
    e080:	strb	w8, [x3]
    e084:	ldr	w1, [x0, #108]
    e088:	add	w1, w1, #0x1
    e08c:	str	w1, [x0, #108]
    e090:	ret
    e094:	strb	w8, [x3]
    e098:	ldr	w1, [x0, #108]
    e09c:	ldr	x2, [x0, #64]
    e0a0:	add	w1, w1, #0x1
    e0a4:	str	w1, [x0, #108]
    e0a8:	strb	w8, [x2, w1, sxtw]
    e0ac:	b	e05c <BZ2_decompress@@Base+0x38f4>
    e0b0:	add	x7, x0, w7, uxtw
    e0b4:	mov	w1, #0x1                   	// #1
    e0b8:	strb	w1, [x7, #128]
    e0bc:	ldr	x3, [x0, #64]
    e0c0:	ldrsw	x1, [x0, #108]
    e0c4:	add	x3, x3, x1
    e0c8:	b	dfcc <BZ2_decompress@@Base+0x3864>
    e0cc:	nop
    e0d0:	mov	x0, x1
    e0d4:	cbz	x1, e0dc <BZ2_decompress@@Base+0x3974>
    e0d8:	b	16f0 <free@plt>
    e0dc:	ret
    e0e0:	mul	w0, w1, w2
    e0e4:	sxtw	x0, w0
    e0e8:	b	15b0 <malloc@plt>
    e0ec:	nop
    e0f0:	stp	x29, x30, [sp, #-80]!
    e0f4:	mov	x29, sp
    e0f8:	stp	x23, x24, [sp, #48]
    e0fc:	adrp	x23, 22000 <BZ2_bzerror@@Base+0x11200>
    e100:	mov	w24, #0x1                   	// #1
    e104:	stp	x19, x20, [sp, #16]
    e108:	mov	x19, x0
    e10c:	mov	w20, #0x0                   	// #0
    e110:	ldr	w0, [x0, #12]
    e114:	stp	x21, x22, [sp, #32]
    e118:	mov	w21, #0x0                   	// #0
    e11c:	ldr	x22, [x23, #4016]
    e120:	str	x25, [sp, #64]
    e124:	b	e130 <BZ2_decompress@@Base+0x39c8>
    e128:	cmp	w0, #0x2
    e12c:	b.eq	e45c <BZ2_decompress@@Base+0x3cf4>  // b.none
    e130:	cmp	w0, #0x1
    e134:	b.ne	e128 <BZ2_decompress@@Base+0x39c0>  // b.any
    e138:	ldr	x0, [x19]
    e13c:	mov	w5, #0x0                   	// #0
    e140:	ldr	w1, [x19, #120]
    e144:	ldr	w2, [x0, #32]
    e148:	b	e198 <BZ2_decompress@@Base+0x3a30>
    e14c:	cmp	w1, w3
    e150:	b.ge	e438 <BZ2_decompress@@Base+0x3cd0>  // b.tcont
    e154:	ldr	x2, [x19, #80]
    e158:	mov	w5, #0x1                   	// #1
    e15c:	ldr	x0, [x0, #24]
    e160:	ldrb	w1, [x2, w1, sxtw]
    e164:	strb	w1, [x0]
    e168:	ldr	x0, [x19]
    e16c:	ldr	w1, [x19, #120]
    e170:	ldp	w2, w3, [x0, #32]
    e174:	add	w1, w1, w5
    e178:	ldr	x4, [x0, #24]
    e17c:	str	w1, [x19, #120]
    e180:	sub	w2, w2, #0x1
    e184:	add	w3, w3, w5
    e188:	add	x4, x4, #0x1
    e18c:	str	x4, [x0, #24]
    e190:	stp	w2, w3, [x0, #32]
    e194:	cbz	w3, e440 <BZ2_decompress@@Base+0x3cd8>
    e198:	ldr	w3, [x19, #116]
    e19c:	cbnz	w2, e14c <BZ2_decompress@@Base+0x39e4>
    e1a0:	orr	w20, w5, w20
    e1a4:	cmp	w1, w3
    e1a8:	b.lt	e3b4 <BZ2_decompress@@Base+0x3c4c>  // b.tstop
    e1ac:	ldr	w25, [x19, #8]
    e1b0:	cmp	w25, #0x4
    e1b4:	b.ne	e358 <BZ2_decompress@@Base+0x3bf0>  // b.any
    e1b8:	ldr	w0, [x19, #16]
    e1bc:	cbnz	w0, e1d8 <BZ2_decompress@@Base+0x3a70>
    e1c0:	ldr	w0, [x19, #92]
    e1c4:	cmp	w0, #0xff
    e1c8:	b.hi	e3b4 <BZ2_decompress@@Base+0x3c4c>  // b.pmore
    e1cc:	ldr	w0, [x19, #96]
    e1d0:	cmp	w0, #0x0
    e1d4:	b.le	e3b4 <BZ2_decompress@@Base+0x3c4c>
    e1d8:	mov	w0, #0xffffffff            	// #-1
    e1dc:	str	wzr, [x19, #108]
    e1e0:	stur	xzr, [x19, #116]
    e1e4:	mov	w1, #0x0                   	// #0
    e1e8:	str	w0, [x19, #648]
    e1ec:	mov	x2, #0x100                 	// #256
    e1f0:	add	x0, x19, #0x80
    e1f4:	bl	1600 <memset@plt>
    e1f8:	ldr	w0, [x19, #660]
    e1fc:	mov	w1, #0x2                   	// #2
    e200:	ldr	w6, [x19, #112]
    e204:	mov	w5, #0x0                   	// #0
    e208:	add	w0, w0, #0x1
    e20c:	str	w1, [x19, #12]
    e210:	str	w0, [x19, #660]
    e214:	cmp	w6, w5
    e218:	b.le	e330 <BZ2_decompress@@Base+0x3bc8>
    e21c:	ldr	x0, [x19]
    e220:	mov	w2, #0x0                   	// #0
    e224:	ldr	x9, [x23, #4016]
    e228:	ldr	w4, [x0, #8]
    e22c:	cbz	w4, e2a4 <BZ2_decompress@@Base+0x3b3c>
    e230:	ldr	w1, [x19, #16]
    e234:	cbz	w1, e574 <BZ2_decompress@@Base+0x3e0c>
    e238:	ldr	x2, [x0]
    e23c:	ldp	w3, w7, [x19, #92]
    e240:	ldrb	w10, [x2]
    e244:	cmp	w10, w3
    e248:	b.eq	e3d8 <BZ2_decompress@@Base+0x3c70>  // b.none
    e24c:	cmp	w7, #0x1
    e250:	b.eq	e3ec <BZ2_decompress@@Base+0x3c84>  // b.none
    e254:	cmp	w3, #0xff
    e258:	b.ls	e2ec <BZ2_decompress@@Base+0x3b84>  // b.plast
    e25c:	stp	w10, w24, [x19, #92]
    e260:	ldr	w3, [x0, #12]
    e264:	add	x2, x2, #0x1
    e268:	sub	w4, w4, #0x1
    e26c:	str	x2, [x0]
    e270:	add	w2, w3, #0x1
    e274:	str	w4, [x0, #8]
    e278:	str	w2, [x0, #12]
    e27c:	cbnz	w2, e30c <BZ2_decompress@@Base+0x3ba4>
    e280:	ldr	w2, [x0, #16]
    e284:	sub	w1, w1, #0x1
    e288:	cmp	w5, w6
    e28c:	add	w2, w2, #0x1
    e290:	str	w2, [x0, #16]
    e294:	str	w1, [x19, #16]
    e298:	b.ge	e31c <BZ2_decompress@@Base+0x3bb4>  // b.tcont
    e29c:	mov	w2, #0x1                   	// #1
    e2a0:	cbnz	w4, e230 <BZ2_decompress@@Base+0x3ac8>
    e2a4:	ldr	w0, [x19, #8]
    e2a8:	orr	w21, w2, w21
    e2ac:	cmp	w0, #0x2
    e2b0:	b.eq	e33c <BZ2_decompress@@Base+0x3bd4>  // b.none
    e2b4:	ldr	w0, [x19, #16]
    e2b8:	cbnz	w0, e338 <BZ2_decompress@@Base+0x3bd0>
    e2bc:	ldr	w0, [x19, #92]
    e2c0:	cmp	w0, #0xff
    e2c4:	b.ls	e590 <BZ2_decompress@@Base+0x3e28>  // b.plast
    e2c8:	ldr	w1, [x19, #8]
    e2cc:	mov	x0, #0x100                 	// #256
    e2d0:	stur	x0, [x19, #92]
    e2d4:	mov	x0, x19
    e2d8:	cmp	w1, #0x4
    e2dc:	cset	w1, eq  // eq = none
    e2e0:	bl	16c0 <BZ2_compressBlock@plt>
    e2e4:	str	w24, [x19, #12]
    e2e8:	b	e138 <BZ2_decompress@@Base+0x39d0>
    e2ec:	mov	x0, x19
    e2f0:	bl	df68 <BZ2_decompress@@Base+0x3800>
    e2f4:	ldr	x0, [x19]
    e2f8:	ldr	w1, [x19, #16]
    e2fc:	ldp	w5, w6, [x19, #108]
    e300:	ldr	w4, [x0, #8]
    e304:	ldr	x2, [x0]
    e308:	b	e25c <BZ2_decompress@@Base+0x3af4>
    e30c:	sub	w1, w1, #0x1
    e310:	str	w1, [x19, #16]
    e314:	cmp	w5, w6
    e318:	b.lt	e29c <BZ2_decompress@@Base+0x3b34>  // b.tstop
    e31c:	mov	w3, #0x1                   	// #1
    e320:	ldr	w0, [x19, #8]
    e324:	orr	w21, w3, w21
    e328:	cmp	w0, #0x2
    e32c:	b.eq	e560 <BZ2_decompress@@Base+0x3df8>  // b.none
    e330:	ldr	w0, [x19, #16]
    e334:	cbz	w0, e2bc <BZ2_decompress@@Base+0x3b54>
    e338:	ldr	w5, [x19, #108]
    e33c:	cmp	w5, w6
    e340:	b.ge	e560 <BZ2_decompress@@Base+0x3df8>  // b.tcont
    e344:	ldr	x0, [x19]
    e348:	ldr	w0, [x0, #8]
    e34c:	cbz	w0, e3b4 <BZ2_decompress@@Base+0x3c4c>
    e350:	ldr	w0, [x19, #12]
    e354:	b	e130 <BZ2_decompress@@Base+0x39c8>
    e358:	mov	w0, #0xffffffff            	// #-1
    e35c:	str	wzr, [x19, #108]
    e360:	stur	xzr, [x19, #116]
    e364:	mov	w1, #0x0                   	// #0
    e368:	str	w0, [x19, #648]
    e36c:	mov	x2, #0x100                 	// #256
    e370:	add	x0, x19, #0x80
    e374:	bl	1600 <memset@plt>
    e378:	ldr	w0, [x19, #660]
    e37c:	mov	w1, #0x2                   	// #2
    e380:	str	w1, [x19, #12]
    e384:	cmp	w25, #0x3
    e388:	add	w0, w0, #0x1
    e38c:	str	w0, [x19, #660]
    e390:	b.ne	e5b0 <BZ2_decompress@@Base+0x3e48>  // b.any
    e394:	ldr	w0, [x19, #16]
    e398:	cbnz	w0, e450 <BZ2_decompress@@Base+0x3ce8>
    e39c:	ldr	w0, [x19, #92]
    e3a0:	cmp	w0, #0xff
    e3a4:	b.hi	e3b4 <BZ2_decompress@@Base+0x3c4c>  // b.pmore
    e3a8:	ldr	w0, [x19, #96]
    e3ac:	cmp	w0, #0x0
    e3b0:	b.gt	e450 <BZ2_decompress@@Base+0x3ce8>
    e3b4:	orr	w20, w21, w20
    e3b8:	cmp	w20, #0x0
    e3bc:	cset	w0, ne  // ne = any
    e3c0:	ldp	x19, x20, [sp, #16]
    e3c4:	ldp	x21, x22, [sp, #32]
    e3c8:	ldp	x23, x24, [sp, #48]
    e3cc:	ldr	x25, [sp, #64]
    e3d0:	ldp	x29, x30, [sp], #80
    e3d4:	ret
    e3d8:	cmp	w7, #0xff
    e3dc:	b.eq	e2ec <BZ2_decompress@@Base+0x3b84>  // b.none
    e3e0:	add	w7, w7, #0x1
    e3e4:	str	w7, [x19, #96]
    e3e8:	b	e260 <BZ2_decompress@@Base+0x3af8>
    e3ec:	ldr	w1, [x19, #648]
    e3f0:	and	w0, w3, #0xff
    e3f4:	add	x2, x19, w3, uxtw
    e3f8:	eor	w0, w0, w1, lsr #24
    e3fc:	ldr	w0, [x9, x0, lsl #2]
    e400:	eor	w1, w0, w1, lsl #8
    e404:	str	w1, [x19, #648]
    e408:	strb	w7, [x2, #128]
    e40c:	ldr	x0, [x19, #64]
    e410:	strb	w3, [x0, w5, sxtw]
    e414:	ldr	x0, [x19]
    e418:	ldp	w5, w6, [x19, #108]
    e41c:	ldr	w4, [x0, #8]
    e420:	add	w5, w5, #0x1
    e424:	ldr	w1, [x19, #16]
    e428:	ldr	x2, [x0]
    e42c:	str	w10, [x19, #92]
    e430:	str	w5, [x19, #108]
    e434:	b	e260 <BZ2_decompress@@Base+0x3af8>
    e438:	orr	w20, w5, w20
    e43c:	b	e1ac <BZ2_decompress@@Base+0x3a44>
    e440:	ldr	w3, [x0, #40]
    e444:	add	w3, w3, w5
    e448:	str	w3, [x0, #40]
    e44c:	b	e198 <BZ2_decompress@@Base+0x3a30>
    e450:	ldr	w6, [x19, #112]
    e454:	mov	w5, #0x0                   	// #0
    e458:	b	e214 <BZ2_decompress@@Base+0x3aac>
    e45c:	ldr	w25, [x19, #8]
    e460:	ldr	w5, [x19, #108]
    e464:	ldr	w6, [x19, #112]
    e468:	cmp	w25, #0x2
    e46c:	b.ne	e214 <BZ2_decompress@@Base+0x3aac>  // b.any
    e470:	mov	w3, #0x0                   	// #0
    e474:	nop
    e478:	cmp	w5, w6
    e47c:	b.ge	e320 <BZ2_decompress@@Base+0x3bb8>  // b.tcont
    e480:	ldr	x0, [x19]
    e484:	ldr	w1, [x0, #8]
    e488:	cbz	w1, e59c <BZ2_decompress@@Base+0x3e34>
    e48c:	ldr	x2, [x0]
    e490:	ldp	w3, w4, [x19, #92]
    e494:	ldrb	w9, [x2]
    e498:	cmp	w9, w3
    e49c:	b.eq	e504 <BZ2_decompress@@Base+0x3d9c>  // b.none
    e4a0:	cmp	w4, #0x1
    e4a4:	b.eq	e518 <BZ2_decompress@@Base+0x3db0>  // b.none
    e4a8:	cmp	w3, #0xff
    e4ac:	b.ls	e4e8 <BZ2_decompress@@Base+0x3d80>  // b.plast
    e4b0:	stp	w9, w24, [x19, #92]
    e4b4:	ldr	w3, [x0, #12]
    e4b8:	add	x2, x2, #0x1
    e4bc:	sub	w1, w1, #0x1
    e4c0:	str	x2, [x0]
    e4c4:	add	w2, w3, #0x1
    e4c8:	str	w1, [x0, #8]
    e4cc:	str	w2, [x0, #12]
    e4d0:	mov	w3, #0x1                   	// #1
    e4d4:	cbnz	w2, e478 <BZ2_decompress@@Base+0x3d10>
    e4d8:	ldr	w1, [x0, #16]
    e4dc:	add	w1, w1, w3
    e4e0:	str	w1, [x0, #16]
    e4e4:	b	e478 <BZ2_decompress@@Base+0x3d10>
    e4e8:	mov	x0, x19
    e4ec:	bl	df68 <BZ2_decompress@@Base+0x3800>
    e4f0:	ldr	x0, [x19]
    e4f4:	ldp	w5, w6, [x19, #108]
    e4f8:	ldr	w1, [x0, #8]
    e4fc:	ldr	x2, [x0]
    e500:	b	e4b0 <BZ2_decompress@@Base+0x3d48>
    e504:	cmp	w4, #0xff
    e508:	b.eq	e4e8 <BZ2_decompress@@Base+0x3d80>  // b.none
    e50c:	add	w4, w4, #0x1
    e510:	str	w4, [x19, #96]
    e514:	b	e4b4 <BZ2_decompress@@Base+0x3d4c>
    e518:	ldr	w1, [x19, #648]
    e51c:	and	w0, w3, #0xff
    e520:	add	x2, x19, w3, uxtw
    e524:	eor	w0, w0, w1, lsr #24
    e528:	ldr	w0, [x22, x0, lsl #2]
    e52c:	eor	w1, w0, w1, lsl #8
    e530:	str	w1, [x19, #648]
    e534:	strb	w4, [x2, #128]
    e538:	ldr	x0, [x19, #64]
    e53c:	strb	w3, [x0, w5, sxtw]
    e540:	ldr	x0, [x19]
    e544:	ldp	w5, w6, [x19, #108]
    e548:	ldr	w1, [x0, #8]
    e54c:	add	w5, w5, #0x1
    e550:	ldr	x2, [x0]
    e554:	str	w9, [x19, #92]
    e558:	str	w5, [x19, #108]
    e55c:	b	e4b4 <BZ2_decompress@@Base+0x3d4c>
    e560:	mov	x0, x19
    e564:	mov	w1, #0x0                   	// #0
    e568:	bl	16c0 <BZ2_compressBlock@plt>
    e56c:	str	w24, [x19, #12]
    e570:	b	e138 <BZ2_decompress@@Base+0x39d0>
    e574:	ldr	w0, [x19, #8]
    e578:	orr	w21, w2, w21
    e57c:	cmp	w0, #0x2
    e580:	b.eq	e33c <BZ2_decompress@@Base+0x3bd4>  // b.none
    e584:	ldr	w0, [x19, #92]
    e588:	cmp	w0, #0xff
    e58c:	b.hi	e2c8 <BZ2_decompress@@Base+0x3b60>  // b.pmore
    e590:	mov	x0, x19
    e594:	bl	df68 <BZ2_decompress@@Base+0x3800>
    e598:	b	e2c8 <BZ2_decompress@@Base+0x3b60>
    e59c:	ldr	w0, [x19, #8]
    e5a0:	orr	w21, w3, w21
    e5a4:	cmp	w0, #0x2
    e5a8:	b.ne	e330 <BZ2_decompress@@Base+0x3bc8>  // b.any
    e5ac:	b	e3b4 <BZ2_decompress@@Base+0x3c4c>
    e5b0:	mov	w5, #0x0                   	// #0
    e5b4:	b	e464 <BZ2_decompress@@Base+0x3cfc>

000000000000e5b8 <BZ2_bzCompressInit@@Base>:
    e5b8:	stp	x29, x30, [sp, #-64]!
    e5bc:	cmp	x0, #0x0
    e5c0:	mov	x29, sp
    e5c4:	stp	x21, x22, [sp, #32]
    e5c8:	mov	x22, x0
    e5cc:	sub	w0, w1, #0x1
    e5d0:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    e5d4:	b.hi	e750 <BZ2_bzCompressInit@@Base+0x198>  // b.pmore
    e5d8:	stp	x23, x24, [sp, #48]
    e5dc:	cmp	w3, #0xfa
    e5e0:	b.hi	e744 <BZ2_bzCompressInit@@Base+0x18c>  // b.pmore
    e5e4:	ldr	x4, [x22, #56]
    e5e8:	stp	x19, x20, [sp, #16]
    e5ec:	cmp	w3, #0x0
    e5f0:	mov	w0, #0x1e                  	// #30
    e5f4:	mov	w24, w1
    e5f8:	mov	w21, w2
    e5fc:	csel	w23, w3, w0, ne  // ne = any
    e600:	cbz	x4, e71c <BZ2_bzCompressInit@@Base+0x164>
    e604:	ldr	x0, [x22, #64]
    e608:	cbz	x0, e734 <BZ2_bzCompressInit@@Base+0x17c>
    e60c:	ldr	x0, [x22, #72]
    e610:	mov	w2, #0x1                   	// #1
    e614:	mov	w1, #0xd9d8                	// #55768
    e618:	blr	x4
    e61c:	mov	x19, x0
    e620:	cbz	x0, e79c <BZ2_bzCompressInit@@Base+0x1e4>
    e624:	mov	w20, #0x86a0                	// #34464
    e628:	stp	xzr, xzr, [x0, #24]
    e62c:	movk	w20, #0x1, lsl #16
    e630:	ldr	x4, [x22, #56]
    e634:	mul	w20, w24, w20
    e638:	ldr	x0, [x22, #72]
    e63c:	str	x22, [x19]
    e640:	str	xzr, [x19, #40]
    e644:	lsl	w1, w20, #2
    e648:	mov	w2, #0x1                   	// #1
    e64c:	blr	x4
    e650:	mov	x5, x0
    e654:	ldr	x4, [x22, #56]
    e658:	add	w1, w20, #0x22
    e65c:	ldr	x0, [x22, #72]
    e660:	str	x5, [x19, #24]
    e664:	lsl	w1, w1, #2
    e668:	mov	w2, #0x1                   	// #1
    e66c:	blr	x4
    e670:	ldr	x4, [x22, #56]
    e674:	str	x0, [x19, #32]
    e678:	ldr	x0, [x22, #72]
    e67c:	mov	w1, #0x40004               	// #262148
    e680:	mov	w2, #0x1                   	// #1
    e684:	blr	x4
    e688:	str	x0, [x19, #40]
    e68c:	ldr	x1, [x19, #24]
    e690:	cbz	x1, e760 <BZ2_bzCompressInit@@Base+0x1a8>
    e694:	ldr	x4, [x19, #32]
    e698:	cmp	x4, #0x0
    e69c:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    e6a0:	b.eq	e758 <BZ2_bzCompressInit@@Base+0x1a0>  // b.none
    e6a4:	sub	w20, w20, #0x13
    e6a8:	mov	x2, #0x200000002           	// #8589934594
    e6ac:	str	x2, [x19, #8]
    e6b0:	mov	w5, #0xffffffff            	// #-1
    e6b4:	stp	x1, x4, [x19, #56]
    e6b8:	mov	x2, #0x100                 	// #256
    e6bc:	add	x0, x19, #0x80
    e6c0:	stp	x1, xzr, [x19, #72]
    e6c4:	mov	w1, #0x0                   	// #0
    e6c8:	str	w23, [x19, #88]
    e6cc:	str	w20, [x19, #112]
    e6d0:	str	wzr, [x19, #652]
    e6d4:	str	w21, [x19, #656]
    e6d8:	str	w24, [x19, #664]
    e6dc:	stur	xzr, [x22, #12]
    e6e0:	stur	xzr, [x22, #36]
    e6e4:	str	x19, [x22, #48]
    e6e8:	stur	x2, [x19, #92]
    e6ec:	str	wzr, [x19, #108]
    e6f0:	stur	xzr, [x19, #116]
    e6f4:	str	w5, [x19, #648]
    e6f8:	bl	1600 <memset@plt>
    e6fc:	mov	w1, #0x1                   	// #1
    e700:	mov	w0, #0x0                   	// #0
    e704:	ldp	x23, x24, [sp, #48]
    e708:	str	w1, [x19, #660]
    e70c:	ldp	x19, x20, [sp, #16]
    e710:	ldp	x21, x22, [sp, #32]
    e714:	ldp	x29, x30, [sp], #64
    e718:	ret
    e71c:	adrp	x0, e000 <BZ2_decompress@@Base+0x3898>
    e720:	add	x0, x0, #0xe0
    e724:	mov	x4, x0
    e728:	str	x0, [x22, #56]
    e72c:	ldr	x0, [x22, #64]
    e730:	cbnz	x0, e60c <BZ2_bzCompressInit@@Base+0x54>
    e734:	adrp	x0, e000 <BZ2_decompress@@Base+0x3898>
    e738:	add	x0, x0, #0xd0
    e73c:	str	x0, [x22, #64]
    e740:	b	e60c <BZ2_bzCompressInit@@Base+0x54>
    e744:	mov	w0, #0xfffffffe            	// #-2
    e748:	ldp	x23, x24, [sp, #48]
    e74c:	b	e710 <BZ2_bzCompressInit@@Base+0x158>
    e750:	mov	w0, #0xfffffffe            	// #-2
    e754:	b	e710 <BZ2_bzCompressInit@@Base+0x158>
    e758:	ldp	x2, x0, [x22, #64]
    e75c:	blr	x2
    e760:	ldr	x1, [x19, #32]
    e764:	ldp	x2, x0, [x22, #64]
    e768:	cbz	x1, e774 <BZ2_bzCompressInit@@Base+0x1bc>
    e76c:	blr	x2
    e770:	ldp	x2, x0, [x22, #64]
    e774:	ldr	x1, [x19, #40]
    e778:	cbz	x1, e784 <BZ2_bzCompressInit@@Base+0x1cc>
    e77c:	blr	x2
    e780:	ldp	x2, x0, [x22, #64]
    e784:	mov	x1, x19
    e788:	blr	x2
    e78c:	mov	w0, #0xfffffffd            	// #-3
    e790:	ldp	x19, x20, [sp, #16]
    e794:	ldp	x23, x24, [sp, #48]
    e798:	b	e710 <BZ2_bzCompressInit@@Base+0x158>
    e79c:	mov	w0, #0xfffffffd            	// #-3
    e7a0:	ldp	x19, x20, [sp, #16]
    e7a4:	ldp	x23, x24, [sp, #48]
    e7a8:	b	e710 <BZ2_bzCompressInit@@Base+0x158>
    e7ac:	nop

000000000000e7b0 <BZ2_bzCompress@@Base>:
    e7b0:	cbz	x0, e99c <BZ2_bzCompress@@Base+0x1ec>
    e7b4:	stp	x29, x30, [sp, #-32]!
    e7b8:	mov	x29, sp
    e7bc:	str	x19, [sp, #16]
    e7c0:	ldr	x19, [x0, #48]
    e7c4:	cbz	x19, e950 <BZ2_bzCompress@@Base+0x1a0>
    e7c8:	ldr	x3, [x19]
    e7cc:	cmp	x3, x0
    e7d0:	b.ne	e950 <BZ2_bzCompress@@Base+0x1a0>  // b.any
    e7d4:	ldr	w2, [x19, #8]
    e7d8:	cmp	w1, #0x2
    e7dc:	b.ne	e924 <BZ2_bzCompress@@Base+0x174>  // b.any
    e7e0:	cmp	w2, #0x3
    e7e4:	b.eq	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    e7e8:	b.gt	e8a0 <BZ2_bzCompress@@Base+0xf0>
    e7ec:	cmp	w2, #0x1
    e7f0:	mov	w0, #0xffffffff            	// #-1
    e7f4:	b.eq	e894 <BZ2_bzCompress@@Base+0xe4>  // b.none
    e7f8:	cmp	w2, #0x2
    e7fc:	b.ne	e914 <BZ2_bzCompress@@Base+0x164>  // b.any
    e800:	ldr	w0, [x3, #8]
    e804:	mov	w1, #0x4                   	// #4
    e808:	str	w1, [x19, #8]
    e80c:	str	w0, [x19, #16]
    e810:	b	e8ac <BZ2_bzCompress@@Base+0xfc>
    e814:	cmp	w2, #0x3
    e818:	b.eq	e994 <BZ2_bzCompress@@Base+0x1e4>  // b.none
    e81c:	b.gt	e90c <BZ2_bzCompress@@Base+0x15c>
    e820:	cmp	w2, #0x1
    e824:	mov	w0, #0xffffffff            	// #-1
    e828:	b.eq	e894 <BZ2_bzCompress@@Base+0xe4>  // b.none
    e82c:	cmp	w2, #0x2
    e830:	b.ne	e914 <BZ2_bzCompress@@Base+0x164>  // b.any
    e834:	ldr	w0, [x3, #8]
    e838:	mov	w1, #0x3                   	// #3
    e83c:	str	w1, [x19, #8]
    e840:	str	w0, [x19, #16]
    e844:	ldr	w1, [x19, #16]
    e848:	cmp	w1, w0
    e84c:	b.ne	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.any
    e850:	mov	x0, x19
    e854:	bl	e0f0 <BZ2_decompress@@Base+0x3988>
    e858:	ldr	w1, [x19, #16]
    e85c:	mov	w0, #0x2                   	// #2
    e860:	cbnz	w1, e894 <BZ2_bzCompress@@Base+0xe4>
    e864:	ldr	w1, [x19, #92]
    e868:	cmp	w1, #0xff
    e86c:	b.hi	e87c <BZ2_bzCompress@@Base+0xcc>  // b.pmore
    e870:	ldr	w1, [x19, #96]
    e874:	cmp	w1, #0x0
    e878:	b.gt	e894 <BZ2_bzCompress@@Base+0xe4>
    e87c:	ldp	w1, w2, [x19, #116]
    e880:	mov	w0, #0x2                   	// #2
    e884:	cmp	w2, w1
    e888:	b.lt	e894 <BZ2_bzCompress@@Base+0xe4>  // b.tstop
    e88c:	str	w0, [x19, #8]
    e890:	mov	w0, #0x1                   	// #1
    e894:	ldr	x19, [sp, #16]
    e898:	ldp	x29, x30, [sp], #32
    e89c:	ret
    e8a0:	cmp	w2, #0x4
    e8a4:	b.ne	e914 <BZ2_bzCompress@@Base+0x164>  // b.any
    e8a8:	ldr	w0, [x3, #8]
    e8ac:	ldr	w1, [x19, #16]
    e8b0:	cmp	w1, w0
    e8b4:	b.ne	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.any
    e8b8:	mov	x0, x19
    e8bc:	bl	e0f0 <BZ2_decompress@@Base+0x3988>
    e8c0:	tst	w0, #0xff
    e8c4:	b.eq	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    e8c8:	ldr	w1, [x19, #16]
    e8cc:	mov	w0, #0x3                   	// #3
    e8d0:	cbnz	w1, e894 <BZ2_bzCompress@@Base+0xe4>
    e8d4:	ldr	w1, [x19, #92]
    e8d8:	cmp	w1, #0xff
    e8dc:	b.hi	e8ec <BZ2_bzCompress@@Base+0x13c>  // b.pmore
    e8e0:	ldr	w1, [x19, #96]
    e8e4:	cmp	w1, #0x0
    e8e8:	b.gt	e894 <BZ2_bzCompress@@Base+0xe4>
    e8ec:	ldp	w1, w2, [x19, #116]
    e8f0:	mov	w0, #0x3                   	// #3
    e8f4:	cmp	w2, w1
    e8f8:	b.lt	e894 <BZ2_bzCompress@@Base+0xe4>  // b.tstop
    e8fc:	mov	w1, #0x1                   	// #1
    e900:	mov	w0, #0x4                   	// #4
    e904:	str	w1, [x19, #8]
    e908:	b	e894 <BZ2_bzCompress@@Base+0xe4>
    e90c:	cmp	w2, #0x4
    e910:	b.eq	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    e914:	mov	w0, #0x0                   	// #0
    e918:	ldr	x19, [sp, #16]
    e91c:	ldp	x29, x30, [sp], #32
    e920:	ret
    e924:	cmp	w1, #0x1
    e928:	b.eq	e814 <BZ2_bzCompress@@Base+0x64>  // b.none
    e92c:	cmp	w2, #0x3
    e930:	cbz	w1, e960 <BZ2_bzCompress@@Base+0x1b0>
    e934:	b.eq	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    e938:	b.gt	e90c <BZ2_bzCompress@@Base+0x15c>
    e93c:	cmp	w2, #0x1
    e940:	mov	w0, #0xffffffff            	// #-1
    e944:	b.eq	e894 <BZ2_bzCompress@@Base+0xe4>  // b.none
    e948:	cmp	w2, #0x2
    e94c:	b.ne	e914 <BZ2_bzCompress@@Base+0x164>  // b.any
    e950:	mov	w0, #0xfffffffe            	// #-2
    e954:	b	e894 <BZ2_bzCompress@@Base+0xe4>
    e958:	mov	w0, #0xffffffff            	// #-1
    e95c:	b	e894 <BZ2_bzCompress@@Base+0xe4>
    e960:	b.eq	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    e964:	b.gt	e90c <BZ2_bzCompress@@Base+0x15c>
    e968:	cmp	w2, #0x1
    e96c:	b.eq	e958 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    e970:	cmp	w2, #0x2
    e974:	b.ne	e914 <BZ2_bzCompress@@Base+0x164>  // b.any
    e978:	mov	x0, x19
    e97c:	bl	e0f0 <BZ2_decompress@@Base+0x3988>
    e980:	mov	w1, w0
    e984:	mov	w0, #0x1                   	// #1
    e988:	tst	w1, #0xff
    e98c:	b.ne	e894 <BZ2_bzCompress@@Base+0xe4>  // b.any
    e990:	b	e950 <BZ2_bzCompress@@Base+0x1a0>
    e994:	ldr	w0, [x3, #8]
    e998:	b	e844 <BZ2_bzCompress@@Base+0x94>
    e99c:	mov	w0, #0xfffffffe            	// #-2
    e9a0:	ret
    e9a4:	nop

000000000000e9a8 <BZ2_bzCompressEnd@@Base>:
    e9a8:	cbz	x0, ea28 <BZ2_bzCompressEnd@@Base+0x80>
    e9ac:	stp	x29, x30, [sp, #-32]!
    e9b0:	mov	x29, sp
    e9b4:	stp	x19, x20, [sp, #16]
    e9b8:	mov	x19, x0
    e9bc:	ldr	x20, [x0, #48]
    e9c0:	cbz	x20, ea20 <BZ2_bzCompressEnd@@Base+0x78>
    e9c4:	ldr	x0, [x20]
    e9c8:	cmp	x0, x19
    e9cc:	b.ne	ea20 <BZ2_bzCompressEnd@@Base+0x78>  // b.any
    e9d0:	ldr	x1, [x20, #24]
    e9d4:	ldp	x2, x0, [x19, #64]
    e9d8:	cbz	x1, e9e4 <BZ2_bzCompressEnd@@Base+0x3c>
    e9dc:	blr	x2
    e9e0:	ldp	x2, x0, [x19, #64]
    e9e4:	ldr	x1, [x20, #32]
    e9e8:	cbz	x1, e9f4 <BZ2_bzCompressEnd@@Base+0x4c>
    e9ec:	blr	x2
    e9f0:	ldp	x2, x0, [x19, #64]
    e9f4:	ldr	x1, [x20, #40]
    e9f8:	cbz	x1, ea04 <BZ2_bzCompressEnd@@Base+0x5c>
    e9fc:	blr	x2
    ea00:	ldp	x2, x0, [x19, #64]
    ea04:	ldr	x1, [x19, #48]
    ea08:	blr	x2
    ea0c:	str	xzr, [x19, #48]
    ea10:	mov	w0, #0x0                   	// #0
    ea14:	ldp	x19, x20, [sp, #16]
    ea18:	ldp	x29, x30, [sp], #32
    ea1c:	ret
    ea20:	mov	w0, #0xfffffffe            	// #-2
    ea24:	b	ea14 <BZ2_bzCompressEnd@@Base+0x6c>
    ea28:	mov	w0, #0xfffffffe            	// #-2
    ea2c:	ret

000000000000ea30 <BZ2_bzDecompressInit@@Base>:
    ea30:	cbz	x0, eb0c <BZ2_bzDecompressInit@@Base+0xdc>
    ea34:	stp	x29, x30, [sp, #-48]!
    ea38:	cmp	w2, #0x1
    ea3c:	mov	x29, sp
    ea40:	stp	x19, x20, [sp, #16]
    ea44:	mov	w20, w2
    ea48:	b.hi	eaf8 <BZ2_bzDecompressInit@@Base+0xc8>  // b.pmore
    ea4c:	str	x21, [sp, #32]
    ea50:	cmp	w1, #0x4
    ea54:	mov	w21, w1
    ea58:	b.hi	eb00 <BZ2_bzDecompressInit@@Base+0xd0>  // b.pmore
    ea5c:	ldr	x3, [x0, #56]
    ea60:	mov	x19, x0
    ea64:	cbz	x3, ead0 <BZ2_bzDecompressInit@@Base+0xa0>
    ea68:	ldr	x0, [x19, #64]
    ea6c:	cbz	x0, eae8 <BZ2_bzDecompressInit@@Base+0xb8>
    ea70:	ldr	x0, [x19, #72]
    ea74:	mov	w2, #0x1                   	// #1
    ea78:	mov	w1, #0xfa90                	// #64144
    ea7c:	blr	x3
    ea80:	mov	x3, x0
    ea84:	cbz	x0, eb14 <BZ2_bzDecompressInit@@Base+0xe4>
    ea88:	str	x19, [x3]
    ea8c:	mov	w1, #0xa                   	// #10
    ea90:	str	x3, [x19, #48]
    ea94:	mov	w0, #0x0                   	// #0
    ea98:	str	w1, [x3, #8]
    ea9c:	add	x1, x3, #0xc50
    eaa0:	str	xzr, [x3, #32]
    eaa4:	str	wzr, [x3, #3188]
    eaa8:	stur	xzr, [x19, #12]
    eaac:	stur	xzr, [x19, #36]
    eab0:	strb	w20, [x3, #44]
    eab4:	stp	wzr, w21, [x3, #48]
    eab8:	stp	xzr, xzr, [x1]
    eabc:	ldr	x21, [sp, #32]
    eac0:	str	xzr, [x3, #3168]
    eac4:	ldp	x19, x20, [sp, #16]
    eac8:	ldp	x29, x30, [sp], #48
    eacc:	ret
    ead0:	adrp	x0, e000 <BZ2_decompress@@Base+0x3898>
    ead4:	add	x0, x0, #0xe0
    ead8:	mov	x3, x0
    eadc:	str	x0, [x19, #56]
    eae0:	ldr	x0, [x19, #64]
    eae4:	cbnz	x0, ea70 <BZ2_bzDecompressInit@@Base+0x40>
    eae8:	adrp	x0, e000 <BZ2_decompress@@Base+0x3898>
    eaec:	add	x0, x0, #0xd0
    eaf0:	str	x0, [x19, #64]
    eaf4:	b	ea70 <BZ2_bzDecompressInit@@Base+0x40>
    eaf8:	mov	w0, #0xfffffffe            	// #-2
    eafc:	b	eac4 <BZ2_bzDecompressInit@@Base+0x94>
    eb00:	mov	w0, #0xfffffffe            	// #-2
    eb04:	ldr	x21, [sp, #32]
    eb08:	b	eac4 <BZ2_bzDecompressInit@@Base+0x94>
    eb0c:	mov	w0, #0xfffffffe            	// #-2
    eb10:	ret
    eb14:	mov	w0, #0xfffffffd            	// #-3
    eb18:	ldr	x21, [sp, #32]
    eb1c:	b	eac4 <BZ2_bzDecompressInit@@Base+0x94>

000000000000eb20 <BZ2_indexIntoF@@Base>:
    eb20:	mov	w7, w0
    eb24:	mov	w3, #0x100                 	// #256
    eb28:	mov	w0, #0x0                   	// #0
    eb2c:	nop
    eb30:	add	w2, w3, w0
    eb34:	asr	w2, w2, #1
    eb38:	sub	w6, w2, w0
    eb3c:	sub	w5, w3, w2
    eb40:	ldr	w4, [x1, w2, sxtw #2]
    eb44:	cmp	w7, w4
    eb48:	b.ge	eb74 <BZ2_indexIntoF@@Base+0x54>  // b.tcont
    eb4c:	cmp	w6, #0x1
    eb50:	b.eq	eb80 <BZ2_indexIntoF@@Base+0x60>  // b.none
    eb54:	mov	w3, w2
    eb58:	add	w2, w3, w0
    eb5c:	asr	w2, w2, #1
    eb60:	sub	w6, w2, w0
    eb64:	sub	w5, w3, w2
    eb68:	ldr	w4, [x1, w2, sxtw #2]
    eb6c:	cmp	w7, w4
    eb70:	b.lt	eb4c <BZ2_indexIntoF@@Base+0x2c>  // b.tstop
    eb74:	mov	w0, w2
    eb78:	cmp	w5, #0x1
    eb7c:	b.ne	eb30 <BZ2_indexIntoF@@Base+0x10>  // b.any
    eb80:	ret
    eb84:	nop

000000000000eb88 <BZ2_bzDecompress@@Base>:
    eb88:	stp	x29, x30, [sp, #-112]!
    eb8c:	mov	x29, sp
    eb90:	stp	x23, x24, [sp, #48]
    eb94:	cbz	x0, fb9c <BZ2_bzDecompress@@Base+0x1014>
    eb98:	stp	x19, x20, [sp, #16]
    eb9c:	ldr	x19, [x0, #48]
    eba0:	cbz	x19, fb70 <BZ2_bzDecompress@@Base+0xfe8>
    eba4:	ldr	x1, [x19]
    eba8:	cmp	x1, x0
    ebac:	b.ne	fb70 <BZ2_bzDecompress@@Base+0xfe8>  // b.any
    ebb0:	ldr	w1, [x19, #8]
    ebb4:	cmp	w1, #0x1
    ebb8:	b.eq	fb84 <BZ2_bzDecompress@@Base+0xffc>  // b.none
    ebbc:	stp	x21, x22, [sp, #32]
    ebc0:	adrp	x21, 22000 <BZ2_bzerror@@Base+0x11200>
    ebc4:	mov	w20, #0x86a0                	// #34464
    ebc8:	ldr	x22, [x21, #4016]
    ebcc:	movk	w20, #0x1, lsl #16
    ebd0:	stp	x25, x26, [sp, #64]
    ebd4:	b	ebe0 <BZ2_bzDecompress@@Base+0x58>
    ebd8:	cmp	w1, #0x9
    ebdc:	b.gt	ecf8 <BZ2_bzDecompress@@Base+0x170>
    ebe0:	cmp	w1, #0x2
    ebe4:	b.ne	ebd8 <BZ2_bzDecompress@@Base+0x50>  // b.any
    ebe8:	ldrb	w2, [x19, #44]
    ebec:	ldr	x0, [x19]
    ebf0:	ldrb	w3, [x19, #20]
    ebf4:	ldr	w11, [x0, #32]
    ebf8:	cbz	w2, ee14 <BZ2_bzDecompress@@Base+0x28c>
    ebfc:	cbnz	w3, f3a4 <BZ2_bzDecompress@@Base+0x81c>
    ec00:	add	x9, x19, #0xc, lsl #12
    ec04:	cbz	w11, ec84 <BZ2_bzDecompress@@Base+0xfc>
    ec08:	ldr	x7, [x21, #4016]
    ec0c:	add	x6, x19, #0x448
    ec10:	ldr	w2, [x19, #16]
    ec14:	mov	w8, #0x1                   	// #1
    ec18:	mov	w10, #0x2                   	// #2
    ec1c:	mov	w11, #0x3                   	// #3
    ec20:	cbz	w2, ed28 <BZ2_bzDecompress@@Base+0x1a0>
    ec24:	ldr	x0, [x0, #24]
    ec28:	ldrb	w1, [x19, #12]
    ec2c:	strb	w1, [x0]
    ec30:	ldr	w4, [x19, #3184]
    ec34:	ldr	x0, [x19]
    ec38:	eor	w1, w1, w4, lsr #24
    ec3c:	ldr	w2, [x19, #16]
    ec40:	ldr	x5, [x0, #24]
    ec44:	sub	w2, w2, #0x1
    ec48:	ldr	w12, [x7, x1, lsl #2]
    ec4c:	ldp	w1, w3, [x0, #32]
    ec50:	str	w2, [x19, #16]
    ec54:	eor	w4, w12, w4, lsl #8
    ec58:	str	w4, [x19, #3184]
    ec5c:	sub	w1, w1, #0x1
    ec60:	add	w3, w3, #0x1
    ec64:	add	x5, x5, #0x1
    ec68:	str	x5, [x0, #24]
    ec6c:	stp	w1, w3, [x0, #32]
    ec70:	cbnz	w3, ec80 <BZ2_bzDecompress@@Base+0xf8>
    ec74:	ldr	w3, [x0, #40]
    ec78:	add	w3, w3, #0x1
    ec7c:	str	w3, [x0, #40]
    ec80:	cbnz	w1, ec20 <BZ2_bzDecompress@@Base+0x98>
    ec84:	ldr	w12, [x19, #1092]
    ec88:	ldr	w0, [x9, #14928]
    ec8c:	add	w0, w0, #0x1
    ec90:	cmp	w0, w12
    ec94:	b.ne	f0d4 <BZ2_bzDecompress@@Base+0x54c>  // b.any
    ec98:	ldr	w0, [x19, #16]
    ec9c:	cbnz	w0, f0d4 <BZ2_bzDecompress@@Base+0x54c>
    eca0:	ldr	w3, [x19, #3184]
    eca4:	ldr	w0, [x19, #52]
    eca8:	mvn	w3, w3
    ecac:	str	w3, [x19, #3184]
    ecb0:	cmp	w0, #0x2
    ecb4:	b.gt	f1ec <BZ2_bzDecompress@@Base+0x664>
    ecb8:	cmp	w0, #0x1
    ecbc:	b.le	ecd4 <BZ2_bzDecompress@@Base+0x14c>
    ecc0:	adrp	x1, 22000 <BZ2_bzerror@@Base+0x11200>
    ecc4:	mov	w0, #0x5d                  	// #93
    ecc8:	ldr	x1, [x1, #4008]
    eccc:	ldr	x1, [x1]
    ecd0:	bl	1590 <fputc@plt>
    ecd4:	ldr	w0, [x19, #3176]
    ecd8:	ldr	w1, [x19, #3184]
    ecdc:	cmp	w1, w0
    ece0:	b.ne	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.any
    ece4:	ldr	w0, [x19, #3188]
    ece8:	mov	w2, #0xe                   	// #14
    ecec:	str	w2, [x19, #8]
    ecf0:	eor	w0, w1, w0, ror #31
    ecf4:	str	w0, [x19, #3188]
    ecf8:	mov	x0, x19
    ecfc:	bl	1670 <BZ2_decompress@plt>
    ed00:	mov	w23, w0
    ed04:	cmp	w0, #0x4
    ed08:	b.eq	fb48 <BZ2_bzDecompress@@Base+0xfc0>  // b.none
    ed0c:	ldr	w1, [x19, #8]
    ed10:	cmp	w1, #0x2
    ed14:	b.eq	ebe8 <BZ2_bzDecompress@@Base+0x60>  // b.none
    ed18:	ldp	x19, x20, [sp, #16]
    ed1c:	ldp	x21, x22, [sp, #32]
    ed20:	ldp	x25, x26, [sp, #64]
    ed24:	b	f1dc <BZ2_bzDecompress@@Base+0x654>
    ed28:	ldr	w23, [x9, #14928]
    ed2c:	ldr	w14, [x19, #1092]
    ed30:	add	w17, w23, #0x1
    ed34:	cmp	w14, w17
    ed38:	b.eq	eca0 <BZ2_bzDecompress@@Base+0x118>  // b.none
    ed3c:	b.gt	f1cc <BZ2_bzDecompress@@Base+0x644>
    ed40:	ldr	w15, [x19, #40]
    ed44:	ldp	w18, w16, [x19, #60]
    ed48:	strb	w16, [x19, #12]
    ed4c:	str	w8, [x19, #16]
    ed50:	mul	w15, w15, w20
    ed54:	cmp	w18, w15
    ed58:	b.cs	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.hs, b.nlast
    ed5c:	mov	w3, #0x0                   	// #0
    ed60:	mov	w4, #0x100                 	// #256
    ed64:	nop
    ed68:	add	w1, w4, w3
    ed6c:	asr	w1, w1, #1
    ed70:	sub	w12, w4, w1
    ed74:	sub	w5, w1, w3
    ed78:	ldr	w13, [x6, w1, sxtw #2]
    ed7c:	cmp	w18, w13
    ed80:	b.lt	edac <BZ2_bzDecompress@@Base+0x224>  // b.tstop
    ed84:	cmp	w12, #0x1
    ed88:	b.eq	edc0 <BZ2_bzDecompress@@Base+0x238>  // b.none
    ed8c:	mov	w3, w1
    ed90:	add	w1, w4, w3
    ed94:	asr	w1, w1, #1
    ed98:	sub	w12, w4, w1
    ed9c:	sub	w5, w1, w3
    eda0:	ldr	w13, [x6, w1, sxtw #2]
    eda4:	cmp	w18, w13
    eda8:	b.ge	ed84 <BZ2_bzDecompress@@Base+0x1fc>  // b.tcont
    edac:	cmp	w5, #0x1
    edb0:	b.eq	edbc <BZ2_bzDecompress@@Base+0x234>  // b.none
    edb4:	mov	w4, w1
    edb8:	b	ed68 <BZ2_bzDecompress@@Base+0x1e0>
    edbc:	mov	w1, w3
    edc0:	ldr	x13, [x19, #3168]
    edc4:	lsr	w3, w18, #1
    edc8:	ldr	x12, [x19, #3160]
    edcc:	ubfiz	w24, w18, #2, #1
    edd0:	ldrb	w3, [x13, w3, uxtw]
    edd4:	add	w4, w14, #0x1
    edd8:	cmp	w14, w23
    eddc:	ldrh	w5, [x12, w18, uxtw #1]
    ede0:	lsr	w3, w3, w24
    ede4:	str	w4, [x19, #1092]
    ede8:	ubfiz	w3, w3, #16, #4
    edec:	orr	w3, w3, w5
    edf0:	str	w3, [x19, #60]
    edf4:	b.eq	f100 <BZ2_bzDecompress@@Base+0x578>  // b.none
    edf8:	cmp	w16, w1, uxtb
    edfc:	and	w1, w1, #0xff
    ee00:	b.eq	f10c <BZ2_bzDecompress@@Base+0x584>  // b.none
    ee04:	ldr	w2, [x0, #32]
    ee08:	str	w1, [x19, #64]
    ee0c:	cbnz	w2, ec24 <BZ2_bzDecompress@@Base+0x9c>
    ee10:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    ee14:	cbz	w3, f210 <BZ2_bzDecompress@@Base+0x688>
    ee18:	cbz	w11, fb68 <BZ2_bzDecompress@@Base+0xfe0>
    ee1c:	adrp	x7, 22000 <BZ2_bzerror@@Base+0x11200>
    ee20:	ldr	w15, [x19, #16]
    ee24:	ldr	x5, [x21, #4016]
    ee28:	add	x9, x19, #0xc, lsl #12
    ee2c:	ldr	x7, [x7, #4040]
    ee30:	mov	w6, #0x1                   	// #1
    ee34:	mov	w10, #0x2                   	// #2
    ee38:	mov	w12, #0x3                   	// #3
    ee3c:	mov	x14, x7
    ee40:	mov	x13, x7
    ee44:	mov	x11, x7
    ee48:	mov	x8, x7
    ee4c:	nop
    ee50:	cbnz	w15, eef0 <BZ2_bzDecompress@@Base+0x368>
    ee54:	ldr	w17, [x9, #14928]
    ee58:	ldr	w16, [x19, #1092]
    ee5c:	add	w23, w17, #0x1
    ee60:	cmp	w16, w23
    ee64:	b.eq	eca0 <BZ2_bzDecompress@@Base+0x118>  // b.none
    ee68:	b.gt	f1cc <BZ2_bzDecompress@@Base+0x644>
    ee6c:	ldr	w15, [x19, #40]
    ee70:	ldp	w2, w24, [x19, #60]
    ee74:	strb	w24, [x19, #12]
    ee78:	str	w6, [x19, #16]
    ee7c:	mul	w15, w15, w20
    ee80:	cmp	w2, w15
    ee84:	b.cs	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.hs, b.nlast
    ee88:	ldr	x18, [x19, #3152]
    ee8c:	ldr	w1, [x19, #24]
    ee90:	ldr	w4, [x18, w2, uxtw #2]
    ee94:	lsr	w3, w4, #8
    ee98:	str	w3, [x19, #60]
    ee9c:	cbnz	w1, eeb4 <BZ2_bzDecompress@@Base+0x32c>
    eea0:	ldr	w1, [x19, #28]
    eea4:	cmp	w1, #0x1ff
    eea8:	csinc	w2, wzr, w1, eq  // eq = none
    eeac:	ldr	w1, [x8, w1, sxtw #2]
    eeb0:	stp	w1, w2, [x19, #24]
    eeb4:	sub	w1, w1, #0x1
    eeb8:	add	w25, w16, #0x1
    eebc:	cmp	w1, #0x1
    eec0:	str	w1, [x19, #24]
    eec4:	cset	w2, eq  // eq = none
    eec8:	str	w25, [x19, #1092]
    eecc:	eor	w2, w2, w4
    eed0:	cmp	w16, w17
    eed4:	and	w2, w2, #0xff
    eed8:	b.eq	f0f4 <BZ2_bzDecompress@@Base+0x56c>  // b.none
    eedc:	cmp	w24, w2
    eee0:	b.eq	ef58 <BZ2_bzDecompress@@Base+0x3d0>  // b.none
    eee4:	ldr	w1, [x0, #32]
    eee8:	str	w2, [x19, #64]
    eeec:	cbz	w1, ec84 <BZ2_bzDecompress@@Base+0xfc>
    eef0:	ldr	x0, [x0, #24]
    eef4:	ldrb	w1, [x19, #12]
    eef8:	strb	w1, [x0]
    eefc:	ldr	w3, [x19, #3184]
    ef00:	ldrb	w1, [x19, #12]
    ef04:	ldr	x0, [x19]
    ef08:	eor	w1, w1, w3, lsr #24
    ef0c:	ldr	w15, [x19, #16]
    ef10:	ldr	x4, [x0, #24]
    ef14:	sub	w15, w15, #0x1
    ef18:	ldr	w16, [x5, x1, lsl #2]
    ef1c:	ldp	w1, w2, [x0, #32]
    ef20:	str	w15, [x19, #16]
    ef24:	eor	w3, w16, w3, lsl #8
    ef28:	str	w3, [x19, #3184]
    ef2c:	sub	w1, w1, #0x1
    ef30:	add	w2, w2, #0x1
    ef34:	add	x4, x4, #0x1
    ef38:	str	x4, [x0, #24]
    ef3c:	stp	w1, w2, [x0, #32]
    ef40:	cbnz	w2, ef50 <BZ2_bzDecompress@@Base+0x3c8>
    ef44:	ldr	w2, [x0, #40]
    ef48:	add	w2, w2, #0x1
    ef4c:	str	w2, [x0, #40]
    ef50:	cbnz	w1, ee50 <BZ2_bzDecompress@@Base+0x2c8>
    ef54:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    ef58:	str	w10, [x19, #16]
    ef5c:	cmp	w15, w3
    ef60:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    ef64:	ldr	w24, [x18, x3, lsl #2]
    ef68:	lsr	w17, w24, #8
    ef6c:	str	w17, [x19, #60]
    ef70:	cbnz	w1, ef88 <BZ2_bzDecompress@@Base+0x400>
    ef74:	ldr	w1, [x19, #28]
    ef78:	cmp	w1, #0x1ff
    ef7c:	csinc	w3, wzr, w1, eq  // eq = none
    ef80:	ldr	w1, [x11, w1, sxtw #2]
    ef84:	stp	w1, w3, [x19, #24]
    ef88:	sub	w1, w1, #0x1
    ef8c:	add	w4, w16, #0x2
    ef90:	cmp	w1, #0x1
    ef94:	str	w1, [x19, #24]
    ef98:	cset	w3, eq  // eq = none
    ef9c:	str	w4, [x19, #1092]
    efa0:	eor	w3, w3, w24
    efa4:	cmp	w23, w4
    efa8:	and	w3, w3, #0xff
    efac:	b.eq	f0f4 <BZ2_bzDecompress@@Base+0x56c>  // b.none
    efb0:	cmp	w2, w3
    efb4:	b.ne	f0c8 <BZ2_bzDecompress@@Base+0x540>  // b.any
    efb8:	str	w12, [x19, #16]
    efbc:	cmp	w15, w17
    efc0:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    efc4:	ldr	w24, [x18, x17, lsl #2]
    efc8:	lsr	w17, w24, #8
    efcc:	str	w17, [x19, #60]
    efd0:	cbnz	w1, efe8 <BZ2_bzDecompress@@Base+0x460>
    efd4:	ldr	w1, [x19, #28]
    efd8:	cmp	w1, #0x1ff
    efdc:	csinc	w3, wzr, w1, eq  // eq = none
    efe0:	ldr	w1, [x13, w1, sxtw #2]
    efe4:	stp	w1, w3, [x19, #24]
    efe8:	sub	w1, w1, #0x1
    efec:	add	w4, w16, #0x3
    eff0:	cmp	w1, #0x1
    eff4:	str	w1, [x19, #24]
    eff8:	cset	w3, eq  // eq = none
    effc:	str	w4, [x19, #1092]
    f000:	eor	w3, w3, w24
    f004:	cmp	w23, w4
    f008:	and	w3, w3, #0xff
    f00c:	b.eq	f0f4 <BZ2_bzDecompress@@Base+0x56c>  // b.none
    f010:	cmp	w2, w3
    f014:	b.ne	f0c8 <BZ2_bzDecompress@@Base+0x540>  // b.any
    f018:	cmp	w15, w17
    f01c:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f020:	ldr	w4, [x18, x17, lsl #2]
    f024:	lsr	w3, w4, #8
    f028:	str	w3, [x19, #60]
    f02c:	cbnz	w1, f044 <BZ2_bzDecompress@@Base+0x4bc>
    f030:	ldr	w1, [x19, #28]
    f034:	cmp	w1, #0x1ff
    f038:	csinc	w2, wzr, w1, eq  // eq = none
    f03c:	ldr	w1, [x14, w1, sxtw #2]
    f040:	stp	w1, w2, [x19, #24]
    f044:	sub	w1, w1, #0x1
    f048:	add	w17, w16, #0x4
    f04c:	cmp	w1, #0x1
    f050:	str	w1, [x19, #24]
    f054:	cset	w2, eq  // eq = none
    f058:	cmp	w15, w3
    f05c:	eor	w2, w2, w4
    f060:	str	w17, [x19, #1092]
    f064:	and	w15, w2, #0xff
    f068:	add	w15, w15, #0x4
    f06c:	str	w15, [x19, #16]
    f070:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f074:	ldr	w2, [x18, x3, lsl #2]
    f078:	and	w3, w2, #0xff
    f07c:	lsr	w2, w2, #8
    f080:	stp	w2, w3, [x19, #60]
    f084:	cbnz	w1, f09c <BZ2_bzDecompress@@Base+0x514>
    f088:	ldr	w1, [x19, #28]
    f08c:	cmp	w1, #0x1ff
    f090:	csinc	w2, wzr, w1, eq  // eq = none
    f094:	ldr	w1, [x7, w1, sxtw #2]
    f098:	stp	w1, w2, [x19, #24]
    f09c:	sub	w2, w1, #0x1
    f0a0:	add	w1, w16, #0x5
    f0a4:	cmp	w2, #0x1
    f0a8:	str	w2, [x19, #24]
    f0ac:	cset	w2, eq  // eq = none
    f0b0:	str	w1, [x19, #1092]
    f0b4:	eor	w1, w2, w3
    f0b8:	str	w1, [x19, #64]
    f0bc:	ldr	w1, [x0, #32]
    f0c0:	cbnz	w1, ee50 <BZ2_bzDecompress@@Base+0x2c8>
    f0c4:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    f0c8:	ldr	w1, [x0, #32]
    f0cc:	str	w3, [x19, #64]
    f0d0:	cbnz	w1, eef0 <BZ2_bzDecompress@@Base+0x368>
    f0d4:	mov	w23, #0x0                   	// #0
    f0d8:	mov	w0, w23
    f0dc:	ldp	x19, x20, [sp, #16]
    f0e0:	ldp	x21, x22, [sp, #32]
    f0e4:	ldp	x23, x24, [sp, #48]
    f0e8:	ldp	x25, x26, [sp, #64]
    f0ec:	ldp	x29, x30, [sp], #112
    f0f0:	ret
    f0f4:	ldr	w1, [x0, #32]
    f0f8:	cbnz	w1, eef0 <BZ2_bzDecompress@@Base+0x368>
    f0fc:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    f100:	ldr	w1, [x0, #32]
    f104:	cbnz	w1, ec24 <BZ2_bzDecompress@@Base+0x9c>
    f108:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    f10c:	str	w10, [x19, #16]
    f110:	cmp	w15, w3
    f114:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f118:	mov	w4, #0x0                   	// #0
    f11c:	mov	w5, #0x100                 	// #256
    f120:	add	w1, w5, w4
    f124:	asr	w1, w1, #1
    f128:	sub	w24, w5, w1
    f12c:	sub	w23, w1, w4
    f130:	ldr	w18, [x6, w1, sxtw #2]
    f134:	cmp	w3, w18
    f138:	b.lt	f164 <BZ2_bzDecompress@@Base+0x5dc>  // b.tstop
    f13c:	cmp	w24, #0x1
    f140:	b.eq	f178 <BZ2_bzDecompress@@Base+0x5f0>  // b.none
    f144:	mov	w4, w1
    f148:	add	w1, w5, w4
    f14c:	asr	w1, w1, #1
    f150:	sub	w24, w5, w1
    f154:	sub	w23, w1, w4
    f158:	ldr	w18, [x6, w1, sxtw #2]
    f15c:	cmp	w3, w18
    f160:	b.ge	f13c <BZ2_bzDecompress@@Base+0x5b4>  // b.tcont
    f164:	cmp	w23, #0x1
    f168:	b.eq	f174 <BZ2_bzDecompress@@Base+0x5ec>  // b.none
    f16c:	mov	w5, w1
    f170:	b	f120 <BZ2_bzDecompress@@Base+0x598>
    f174:	mov	w1, w4
    f178:	lsr	w4, w3, #1
    f17c:	ubfiz	x18, x3, #1, #20
    f180:	ubfiz	w3, w3, #2, #1
    f184:	add	w5, w14, #0x2
    f188:	cmp	w17, w5
    f18c:	ldrb	w4, [x13, w4, uxtw]
    f190:	ldrh	w18, [x12, x18]
    f194:	str	w5, [x19, #1092]
    f198:	lsr	w3, w4, w3
    f19c:	ubfiz	w3, w3, #16, #4
    f1a0:	orr	w3, w3, w18
    f1a4:	str	w3, [x19, #60]
    f1a8:	b.eq	f100 <BZ2_bzDecompress@@Base+0x578>  // b.none
    f1ac:	cmp	w16, w1, uxtb
    f1b0:	and	w1, w1, #0xff
    f1b4:	b.eq	f668 <BZ2_bzDecompress@@Base+0xae0>  // b.none
    f1b8:	ldr	w2, [x0, #32]
    f1bc:	str	w1, [x19, #64]
    f1c0:	cbnz	w2, ec24 <BZ2_bzDecompress@@Base+0x9c>
    f1c4:	b	f0d4 <BZ2_bzDecompress@@Base+0x54c>
    f1c8:	ldp	x27, x28, [sp, #80]
    f1cc:	mov	w23, #0xfffffffc            	// #-4
    f1d0:	ldp	x19, x20, [sp, #16]
    f1d4:	ldp	x21, x22, [sp, #32]
    f1d8:	ldp	x25, x26, [sp, #64]
    f1dc:	mov	w0, w23
    f1e0:	ldp	x23, x24, [sp, #48]
    f1e4:	ldp	x29, x30, [sp], #112
    f1e8:	ret
    f1ec:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    f1f0:	ldr	w2, [x19, #3176]
    f1f4:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    f1f8:	add	x1, x1, #0x2d0
    f1fc:	ldr	x0, [x0, #4008]
    f200:	ldr	x0, [x0]
    f204:	bl	17c0 <fprintf@plt>
    f208:	ldr	w0, [x19, #52]
    f20c:	b	ecb8 <BZ2_bzDecompress@@Base+0x130>
    f210:	add	x9, x19, #0xc, lsl #12
    f214:	ldr	w2, [x19, #40]
    f218:	ldr	w18, [x19, #16]
    f21c:	mov	w5, w11
    f220:	ldrb	w8, [x19, #12]
    f224:	ldr	w16, [x9, #14928]
    f228:	cmp	w18, #0x0
    f22c:	ldp	w7, w13, [x19, #60]
    f230:	mul	w14, w2, w20
    f234:	ldr	w12, [x19, #1092]
    f238:	add	w17, w16, #0x1
    f23c:	ldr	w6, [x19, #3184]
    f240:	ldr	x10, [x0, #24]
    f244:	ldr	x15, [x19, #3152]
    f248:	b.gt	f310 <BZ2_bzDecompress@@Base+0x788>
    f24c:	cmp	w17, w12
    f250:	b.lt	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.tstop
    f254:	b.eq	fb90 <BZ2_bzDecompress@@Base+0x1008>  // b.none
    f258:	cmp	w14, w7
    f25c:	and	w8, w13, #0xff
    f260:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f264:	ldr	w7, [x15, w7, uxtw #2]
    f268:	and	w3, w7, #0xff
    f26c:	cmp	w13, w7, uxtb
    f270:	lsr	w7, w7, #8
    f274:	b.ne	f8f8 <BZ2_bzDecompress@@Base+0xd70>  // b.any
    f278:	cmp	w16, w12
    f27c:	b.eq	f8f4 <BZ2_bzDecompress@@Base+0xd6c>  // b.none
    f280:	cmp	w14, w7
    f284:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f288:	ldr	w0, [x15, x7, lsl #2]
    f28c:	add	w1, w12, #0x2
    f290:	cmp	w17, w1
    f294:	lsr	w7, w0, #8
    f298:	b.eq	f8a8 <BZ2_bzDecompress@@Base+0xd20>  // b.none
    f29c:	cmp	w13, w0, uxtb
    f2a0:	and	w0, w0, #0xff
    f2a4:	b.ne	f8a4 <BZ2_bzDecompress@@Base+0xd1c>  // b.any
    f2a8:	cmp	w14, w7
    f2ac:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f2b0:	ldr	w0, [x15, x7, lsl #2]
    f2b4:	add	w1, w12, #0x3
    f2b8:	cmp	w17, w1
    f2bc:	lsr	w7, w0, #8
    f2c0:	b.eq	f910 <BZ2_bzDecompress@@Base+0xd88>  // b.none
    f2c4:	cmp	w13, w0, uxtb
    f2c8:	and	w13, w0, #0xff
    f2cc:	b.ne	f910 <BZ2_bzDecompress@@Base+0xd88>  // b.any
    f2d0:	cmp	w14, w7
    f2d4:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f2d8:	ldr	w0, [x15, x7, lsl #2]
    f2dc:	and	w18, w0, #0xff
    f2e0:	cmp	w14, w0, lsr #8
    f2e4:	add	w18, w18, #0x4
    f2e8:	lsr	w0, w0, #8
    f2ec:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f2f0:	ldr	w7, [x15, x0, lsl #2]
    f2f4:	add	w1, w12, #0x5
    f2f8:	mov	w12, w1
    f2fc:	and	w13, w7, #0xff
    f300:	lsr	w7, w7, #8
    f304:	nop
    f308:	cmp	w18, #0x0
    f30c:	b.le	f24c <BZ2_bzDecompress@@Base+0x6c4>
    f310:	cbz	w5, fb7c <BZ2_bzDecompress@@Base+0xff4>
    f314:	cmp	w18, #0x1
    f318:	mov	w4, w8
    f31c:	b.eq	f8cc <BZ2_bzDecompress@@Base+0xd44>  // b.none
    f320:	add	w2, w5, #0x1
    f324:	mov	w0, w5
    f328:	sub	w2, w2, w18
    f32c:	sub	w3, w18, w5
    f330:	b	f338 <BZ2_bzDecompress@@Base+0x7b0>
    f334:	b.eq	f8d0 <BZ2_bzDecompress@@Base+0xd48>  // b.none
    f338:	eor	w1, w8, w6, lsr #24
    f33c:	strb	w8, [x10], #1
    f340:	sub	w0, w0, #0x1
    f344:	add	w18, w3, w0
    f348:	cmp	w0, w2
    f34c:	ldr	w1, [x22, x1, lsl #2]
    f350:	eor	w6, w1, w6, lsl #8
    f354:	cbnz	w0, f334 <BZ2_bzDecompress@@Base+0x7ac>
    f358:	ldr	x3, [x19]
    f35c:	ldr	w2, [x3, #36]
    f360:	add	w1, w2, w11
    f364:	sub	w1, w1, w0
    f368:	str	w1, [x3, #36]
    f36c:	cmp	w2, w1
    f370:	b.ls	f380 <BZ2_bzDecompress@@Base+0x7f8>  // b.plast
    f374:	ldr	w1, [x3, #40]
    f378:	add	w1, w1, #0x1
    f37c:	str	w1, [x3, #40]
    f380:	strb	w8, [x19, #12]
    f384:	str	w18, [x19, #16]
    f388:	stp	w7, w13, [x19, #60]
    f38c:	str	w12, [x19, #1092]
    f390:	str	x15, [x19, #3152]
    f394:	str	w6, [x19, #3184]
    f398:	str	x10, [x3, #24]
    f39c:	str	w0, [x3, #32]
    f3a0:	b	ec88 <BZ2_bzDecompress@@Base+0x100>
    f3a4:	cbz	w11, fb68 <BZ2_bzDecompress@@Base+0xfe0>
    f3a8:	adrp	x30, 22000 <BZ2_bzerror@@Base+0x11200>
    f3ac:	ldr	w1, [x19, #16]
    f3b0:	ldr	x13, [x21, #4016]
    f3b4:	add	x9, x19, #0xc, lsl #12
    f3b8:	ldr	x30, [x30, #4040]
    f3bc:	add	x6, x19, #0x448
    f3c0:	stp	x27, x28, [sp, #80]
    f3c4:	mov	w18, #0x1                   	// #1
    f3c8:	mov	x27, x30
    f3cc:	mov	x25, x30
    f3d0:	mov	x23, x30
    f3d4:	mov	w24, #0x2                   	// #2
    f3d8:	mov	w26, #0x3                   	// #3
    f3dc:	str	x30, [sp, #104]
    f3e0:	cbz	w1, f450 <BZ2_bzDecompress@@Base+0x8c8>
    f3e4:	ldr	x0, [x0, #24]
    f3e8:	ldrb	w1, [x19, #12]
    f3ec:	strb	w1, [x0]
    f3f0:	ldr	w4, [x19, #3184]
    f3f4:	ldr	x0, [x19]
    f3f8:	eor	w2, w1, w4, lsr #24
    f3fc:	ldr	w3, [x19, #16]
    f400:	sub	w1, w3, #0x1
    f404:	ldr	w7, [x13, x2, lsl #2]
    f408:	ldp	w2, w3, [x0, #32]
    f40c:	ldr	x5, [x0, #24]
    f410:	eor	w4, w7, w4, lsl #8
    f414:	str	w1, [x19, #16]
    f418:	sub	w2, w2, #0x1
    f41c:	str	w4, [x19, #3184]
    f420:	add	w3, w3, #0x1
    f424:	add	x5, x5, #0x1
    f428:	str	x5, [x0, #24]
    f42c:	stp	w2, w3, [x0, #32]
    f430:	cbnz	w3, f440 <BZ2_bzDecompress@@Base+0x8b8>
    f434:	ldr	w3, [x0, #40]
    f438:	add	w3, w3, #0x1
    f43c:	str	w3, [x0, #40]
    f440:	cbnz	w2, f3e0 <BZ2_bzDecompress@@Base+0x858>
    f444:	ldr	w12, [x19, #1092]
    f448:	ldp	x27, x28, [sp, #80]
    f44c:	b	ec88 <BZ2_bzDecompress@@Base+0x100>
    f450:	ldr	w15, [x9, #14928]
    f454:	ldr	w10, [x19, #1092]
    f458:	add	w12, w15, #0x1
    f45c:	cmp	w10, w12
    f460:	b.eq	f8ec <BZ2_bzDecompress@@Base+0xd64>  // b.none
    f464:	b.gt	f1c8 <BZ2_bzDecompress@@Base+0x640>
    f468:	ldr	w11, [x19, #40]
    f46c:	ldp	w16, w14, [x19, #60]
    f470:	strb	w14, [x19, #12]
    f474:	str	w18, [x19, #16]
    f478:	mul	w11, w11, w20
    f47c:	cmp	w16, w11
    f480:	b.cs	f1c8 <BZ2_bzDecompress@@Base+0x640>  // b.hs, b.nlast
    f484:	mov	w3, #0x0                   	// #0
    f488:	mov	w4, #0x100                 	// #256
    f48c:	nop
    f490:	add	w2, w4, w3
    f494:	asr	w2, w2, #1
    f498:	sub	w7, w4, w2
    f49c:	sub	w5, w2, w3
    f4a0:	ldr	w8, [x6, w2, sxtw #2]
    f4a4:	cmp	w16, w8
    f4a8:	b.lt	f4d4 <BZ2_bzDecompress@@Base+0x94c>  // b.tstop
    f4ac:	cmp	w7, #0x1
    f4b0:	b.eq	f4e8 <BZ2_bzDecompress@@Base+0x960>  // b.none
    f4b4:	mov	w3, w2
    f4b8:	add	w2, w4, w3
    f4bc:	asr	w2, w2, #1
    f4c0:	sub	w7, w4, w2
    f4c4:	sub	w5, w2, w3
    f4c8:	ldr	w8, [x6, w2, sxtw #2]
    f4cc:	cmp	w16, w8
    f4d0:	b.ge	f4ac <BZ2_bzDecompress@@Base+0x924>  // b.tcont
    f4d4:	cmp	w5, #0x1
    f4d8:	b.eq	f4e4 <BZ2_bzDecompress@@Base+0x95c>  // b.none
    f4dc:	mov	w4, w2
    f4e0:	b	f490 <BZ2_bzDecompress@@Base+0x908>
    f4e4:	mov	w2, w3
    f4e8:	ldr	x7, [x19, #3168]
    f4ec:	lsr	w3, w16, #1
    f4f0:	ldr	x5, [x19, #3160]
    f4f4:	ubfiz	w17, w16, #2, #1
    f4f8:	ldrb	w4, [x7, w3, uxtw]
    f4fc:	ldr	w8, [x19, #24]
    f500:	ldrh	w3, [x5, w16, uxtw #1]
    f504:	lsr	w4, w4, w17
    f508:	ubfiz	w4, w4, #16, #4
    f50c:	orr	w4, w4, w3
    f510:	str	w4, [x19, #60]
    f514:	cbnz	w8, f52c <BZ2_bzDecompress@@Base+0x9a4>
    f518:	ldr	w3, [x19, #28]
    f51c:	cmp	w3, #0x1ff
    f520:	csinc	w16, wzr, w3, eq  // eq = none
    f524:	ldr	w8, [x23, w3, sxtw #2]
    f528:	stp	w8, w16, [x19, #24]
    f52c:	sub	w8, w8, #0x1
    f530:	add	w16, w10, #0x1
    f534:	cmp	w8, #0x1
    f538:	str	w8, [x19, #24]
    f53c:	cset	w3, eq  // eq = none
    f540:	str	w16, [x19, #1092]
    f544:	eor	w2, w3, w2
    f548:	cmp	w10, w15
    f54c:	and	w2, w2, #0xff
    f550:	b.eq	f56c <BZ2_bzDecompress@@Base+0x9e4>  // b.none
    f554:	cmp	w14, w2
    f558:	b.eq	f578 <BZ2_bzDecompress@@Base+0x9f0>  // b.none
    f55c:	ldr	w1, [x0, #32]
    f560:	str	w2, [x19, #64]
    f564:	cbnz	w1, f3e4 <BZ2_bzDecompress@@Base+0x85c>
    f568:	b	f444 <BZ2_bzDecompress@@Base+0x8bc>
    f56c:	ldr	w1, [x0, #32]
    f570:	cbnz	w1, f3e4 <BZ2_bzDecompress@@Base+0x85c>
    f574:	b	f444 <BZ2_bzDecompress@@Base+0x8bc>
    f578:	str	w24, [x19, #16]
    f57c:	cmp	w11, w4
    f580:	b.ls	f1c8 <BZ2_bzDecompress@@Base+0x640>  // b.plast
    f584:	mov	w14, #0x0                   	// #0
    f588:	mov	w15, #0x100                 	// #256
    f58c:	nop
    f590:	add	w3, w15, w14
    f594:	asr	w3, w3, #1
    f598:	sub	w28, w15, w3
    f59c:	sub	w17, w3, w14
    f5a0:	ldr	w16, [x6, w3, sxtw #2]
    f5a4:	cmp	w4, w16
    f5a8:	b.lt	f5d4 <BZ2_bzDecompress@@Base+0xa4c>  // b.tstop
    f5ac:	cmp	w28, #0x1
    f5b0:	b.eq	f5e8 <BZ2_bzDecompress@@Base+0xa60>  // b.none
    f5b4:	mov	w14, w3
    f5b8:	add	w3, w15, w14
    f5bc:	asr	w3, w3, #1
    f5c0:	sub	w28, w15, w3
    f5c4:	sub	w17, w3, w14
    f5c8:	ldr	w16, [x6, w3, sxtw #2]
    f5cc:	cmp	w4, w16
    f5d0:	b.ge	f5ac <BZ2_bzDecompress@@Base+0xa24>  // b.tcont
    f5d4:	cmp	w17, #0x1
    f5d8:	b.eq	f5e4 <BZ2_bzDecompress@@Base+0xa5c>  // b.none
    f5dc:	mov	w15, w3
    f5e0:	b	f590 <BZ2_bzDecompress@@Base+0xa08>
    f5e4:	mov	w3, w14
    f5e8:	lsr	w14, w4, #1
    f5ec:	ubfiz	x15, x4, #1, #20
    f5f0:	ubfiz	w4, w4, #2, #1
    f5f4:	ldrb	w14, [x7, w14, uxtw]
    f5f8:	ldrh	w15, [x5, x15]
    f5fc:	lsr	w4, w14, w4
    f600:	ubfiz	w4, w4, #16, #4
    f604:	orr	w4, w4, w15
    f608:	str	w4, [x19, #60]
    f60c:	cbnz	w8, f624 <BZ2_bzDecompress@@Base+0xa9c>
    f610:	ldr	w8, [x19, #28]
    f614:	cmp	w8, #0x1ff
    f618:	csinc	w14, wzr, w8, eq  // eq = none
    f61c:	ldr	w8, [x25, w8, sxtw #2]
    f620:	stp	w8, w14, [x19, #24]
    f624:	sub	w8, w8, #0x1
    f628:	add	w15, w10, #0x2
    f62c:	cmp	w8, #0x1
    f630:	str	w8, [x19, #24]
    f634:	cset	w14, eq  // eq = none
    f638:	str	w15, [x19, #1092]
    f63c:	eor	w3, w14, w3
    f640:	cmp	w12, w15
    f644:	and	w3, w3, #0xff
    f648:	b.eq	f56c <BZ2_bzDecompress@@Base+0x9e4>  // b.none
    f64c:	cmp	w2, w3
    f650:	b.eq	f6d4 <BZ2_bzDecompress@@Base+0xb4c>  // b.none
    f654:	ldr	w1, [x0, #32]
    f658:	str	w3, [x19, #64]
    f65c:	cbnz	w1, f3e4 <BZ2_bzDecompress@@Base+0x85c>
    f660:	ldp	x27, x28, [sp, #80]
    f664:	b	f0d4 <BZ2_bzDecompress@@Base+0x54c>
    f668:	str	w11, [x19, #16]
    f66c:	cmp	w15, w3
    f670:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f674:	mov	w4, #0x0                   	// #0
    f678:	mov	w5, #0x100                 	// #256
    f67c:	nop
    f680:	add	w1, w5, w4
    f684:	asr	w1, w1, #1
    f688:	sub	w24, w5, w1
    f68c:	sub	w23, w1, w4
    f690:	ldr	w18, [x6, w1, sxtw #2]
    f694:	cmp	w3, w18
    f698:	b.lt	f6c4 <BZ2_bzDecompress@@Base+0xb3c>  // b.tstop
    f69c:	cmp	w24, #0x1
    f6a0:	b.eq	f800 <BZ2_bzDecompress@@Base+0xc78>  // b.none
    f6a4:	mov	w4, w1
    f6a8:	add	w1, w5, w4
    f6ac:	asr	w1, w1, #1
    f6b0:	sub	w24, w5, w1
    f6b4:	sub	w23, w1, w4
    f6b8:	ldr	w18, [x6, w1, sxtw #2]
    f6bc:	cmp	w3, w18
    f6c0:	b.ge	f69c <BZ2_bzDecompress@@Base+0xb14>  // b.tcont
    f6c4:	cmp	w23, #0x1
    f6c8:	b.eq	f7fc <BZ2_bzDecompress@@Base+0xc74>  // b.none
    f6cc:	mov	w5, w1
    f6d0:	b	f680 <BZ2_bzDecompress@@Base+0xaf8>
    f6d4:	str	w26, [x19, #16]
    f6d8:	cmp	w11, w4
    f6dc:	b.ls	f1c8 <BZ2_bzDecompress@@Base+0x640>  // b.plast
    f6e0:	mov	w14, #0x0                   	// #0
    f6e4:	mov	w15, #0x100                 	// #256
    f6e8:	add	w3, w15, w14
    f6ec:	asr	w3, w3, #1
    f6f0:	sub	w28, w15, w3
    f6f4:	sub	w17, w3, w14
    f6f8:	ldr	w16, [x6, w3, sxtw #2]
    f6fc:	cmp	w4, w16
    f700:	b.lt	f72c <BZ2_bzDecompress@@Base+0xba4>  // b.tstop
    f704:	cmp	w28, #0x1
    f708:	b.eq	f740 <BZ2_bzDecompress@@Base+0xbb8>  // b.none
    f70c:	mov	w14, w3
    f710:	add	w3, w15, w14
    f714:	asr	w3, w3, #1
    f718:	sub	w28, w15, w3
    f71c:	sub	w17, w3, w14
    f720:	ldr	w16, [x6, w3, sxtw #2]
    f724:	cmp	w4, w16
    f728:	b.ge	f704 <BZ2_bzDecompress@@Base+0xb7c>  // b.tcont
    f72c:	cmp	w17, #0x1
    f730:	b.eq	f73c <BZ2_bzDecompress@@Base+0xbb4>  // b.none
    f734:	mov	w15, w3
    f738:	b	f6e8 <BZ2_bzDecompress@@Base+0xb60>
    f73c:	mov	w3, w14
    f740:	lsr	w14, w4, #1
    f744:	ubfiz	x15, x4, #1, #20
    f748:	ubfiz	w4, w4, #2, #1
    f74c:	ldrb	w14, [x7, w14, uxtw]
    f750:	ldrh	w15, [x5, x15]
    f754:	lsr	w4, w14, w4
    f758:	ubfiz	w4, w4, #16, #4
    f75c:	orr	w4, w4, w15
    f760:	str	w4, [x19, #60]
    f764:	cbz	w8, f8b4 <BZ2_bzDecompress@@Base+0xd2c>
    f768:	sub	w8, w8, #0x1
    f76c:	add	w15, w10, #0x3
    f770:	cmp	w8, #0x1
    f774:	str	w8, [x19, #24]
    f778:	cset	w14, eq  // eq = none
    f77c:	str	w15, [x19, #1092]
    f780:	eor	w3, w14, w3
    f784:	cmp	w12, w15
    f788:	and	w3, w3, #0xff
    f78c:	b.eq	f56c <BZ2_bzDecompress@@Base+0x9e4>  // b.none
    f790:	cmp	w2, w3
    f794:	b.ne	f654 <BZ2_bzDecompress@@Base+0xacc>  // b.any
    f798:	cmp	w11, w4
    f79c:	b.ls	f1c8 <BZ2_bzDecompress@@Base+0x640>  // b.plast
    f7a0:	mov	w3, #0x0                   	// #0
    f7a4:	mov	w12, #0x100                 	// #256
    f7a8:	add	w2, w12, w3
    f7ac:	asr	w2, w2, #1
    f7b0:	sub	w16, w12, w2
    f7b4:	sub	w15, w2, w3
    f7b8:	ldr	w14, [x6, w2, sxtw #2]
    f7bc:	cmp	w4, w14
    f7c0:	b.lt	f7ec <BZ2_bzDecompress@@Base+0xc64>  // b.tstop
    f7c4:	cmp	w16, #0x1
    f7c8:	b.eq	f920 <BZ2_bzDecompress@@Base+0xd98>  // b.none
    f7cc:	mov	w3, w2
    f7d0:	add	w2, w12, w3
    f7d4:	asr	w2, w2, #1
    f7d8:	sub	w16, w12, w2
    f7dc:	sub	w15, w2, w3
    f7e0:	ldr	w14, [x6, w2, sxtw #2]
    f7e4:	cmp	w4, w14
    f7e8:	b.ge	f7c4 <BZ2_bzDecompress@@Base+0xc3c>  // b.tcont
    f7ec:	cmp	w15, #0x1
    f7f0:	b.eq	f91c <BZ2_bzDecompress@@Base+0xd94>  // b.none
    f7f4:	mov	w12, w2
    f7f8:	b	f7a8 <BZ2_bzDecompress@@Base+0xc20>
    f7fc:	mov	w1, w4
    f800:	lsr	w4, w3, #1
    f804:	ubfiz	x18, x3, #1, #20
    f808:	ubfiz	w3, w3, #2, #1
    f80c:	add	w5, w14, #0x3
    f810:	cmp	w17, w5
    f814:	ldrb	w4, [x13, w4, uxtw]
    f818:	ldrh	w17, [x12, x18]
    f81c:	str	w5, [x19, #1092]
    f820:	lsr	w3, w4, w3
    f824:	ubfiz	w3, w3, #16, #4
    f828:	orr	w3, w3, w17
    f82c:	str	w3, [x19, #60]
    f830:	b.eq	f100 <BZ2_bzDecompress@@Base+0x578>  // b.none
    f834:	cmp	w16, w1, uxtb
    f838:	and	w1, w1, #0xff
    f83c:	b.ne	f1b8 <BZ2_bzDecompress@@Base+0x630>  // b.any
    f840:	cmp	w15, w3
    f844:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    f848:	mov	w4, #0x0                   	// #0
    f84c:	mov	w5, #0x100                 	// #256
    f850:	add	w1, w5, w4
    f854:	asr	w1, w1, #1
    f858:	sub	w18, w5, w1
    f85c:	sub	w17, w1, w4
    f860:	ldr	w16, [x6, w1, sxtw #2]
    f864:	cmp	w3, w16
    f868:	b.lt	f894 <BZ2_bzDecompress@@Base+0xd0c>  // b.tstop
    f86c:	cmp	w18, #0x1
    f870:	b.eq	f9d8 <BZ2_bzDecompress@@Base+0xe50>  // b.none
    f874:	mov	w4, w1
    f878:	add	w1, w5, w4
    f87c:	asr	w1, w1, #1
    f880:	sub	w18, w5, w1
    f884:	sub	w17, w1, w4
    f888:	ldr	w16, [x6, w1, sxtw #2]
    f88c:	cmp	w3, w16
    f890:	b.ge	f86c <BZ2_bzDecompress@@Base+0xce4>  // b.tcont
    f894:	cmp	w17, #0x1
    f898:	b.eq	f9d4 <BZ2_bzDecompress@@Base+0xe4c>  // b.none
    f89c:	mov	w5, w1
    f8a0:	b	f850 <BZ2_bzDecompress@@Base+0xcc8>
    f8a4:	mov	w13, w0
    f8a8:	mov	w12, w1
    f8ac:	mov	w18, #0x2                   	// #2
    f8b0:	b	f308 <BZ2_bzDecompress@@Base+0x780>
    f8b4:	ldr	w8, [x19, #28]
    f8b8:	cmp	w8, #0x1ff
    f8bc:	csinc	w14, wzr, w8, eq  // eq = none
    f8c0:	ldr	w8, [x27, w8, sxtw #2]
    f8c4:	stp	w8, w14, [x19, #24]
    f8c8:	b	f768 <BZ2_bzDecompress@@Base+0xbe0>
    f8cc:	mov	w0, w5
    f8d0:	ldr	x1, [x21, #4016]
    f8d4:	eor	w4, w4, w6, lsr #24
    f8d8:	strb	w8, [x10], #1
    f8dc:	sub	w5, w0, #0x1
    f8e0:	ldr	w0, [x1, x4, lsl #2]
    f8e4:	eor	w6, w0, w6, lsl #8
    f8e8:	b	f24c <BZ2_bzDecompress@@Base+0x6c4>
    f8ec:	ldp	x27, x28, [sp, #80]
    f8f0:	b	eca0 <BZ2_bzDecompress@@Base+0x118>
    f8f4:	mov	w3, w13
    f8f8:	add	w12, w12, #0x1
    f8fc:	cbnz	w5, fbc8 <BZ2_bzDecompress@@Base+0x1040>
    f900:	mov	w13, w3
    f904:	mov	w0, #0x0                   	// #0
    f908:	mov	w18, #0x1                   	// #1
    f90c:	b	f358 <BZ2_bzDecompress@@Base+0x7d0>
    f910:	mov	w12, w1
    f914:	mov	w18, #0x3                   	// #3
    f918:	b	f308 <BZ2_bzDecompress@@Base+0x780>
    f91c:	mov	w2, w3
    f920:	lsr	w12, w4, #1
    f924:	ubfiz	x3, x4, #1, #20
    f928:	ubfiz	w4, w4, #2, #1
    f92c:	ldrb	w12, [x7, w12, uxtw]
    f930:	ldrh	w3, [x5, x3]
    f934:	lsr	w4, w12, w4
    f938:	ubfiz	w12, w4, #16, #4
    f93c:	orr	w12, w12, w3
    f940:	str	w12, [x19, #60]
    f944:	cbz	w8, fb2c <BZ2_bzDecompress@@Base+0xfa4>
    f948:	sub	w8, w8, #0x1
    f94c:	add	w3, w10, #0x4
    f950:	cmp	w8, #0x1
    f954:	str	w8, [x19, #24]
    f958:	cset	w15, eq  // eq = none
    f95c:	str	w3, [x19, #1092]
    f960:	eor	w15, w15, w2
    f964:	cmp	w11, w12
    f968:	and	w15, w15, #0xff
    f96c:	add	w15, w15, #0x4
    f970:	str	w15, [x19, #16]
    f974:	b.ls	f1c8 <BZ2_bzDecompress@@Base+0x640>  // b.plast
    f978:	mov	w3, #0x100                 	// #256
    f97c:	nop
    f980:	add	w2, w3, w1
    f984:	asr	w2, w2, #1
    f988:	sub	w14, w3, w2
    f98c:	sub	w11, w2, w1
    f990:	ldr	w4, [x6, w2, sxtw #2]
    f994:	cmp	w12, w4
    f998:	b.lt	f9c4 <BZ2_bzDecompress@@Base+0xe3c>  // b.tstop
    f99c:	cmp	w14, #0x1
    f9a0:	b.eq	fabc <BZ2_bzDecompress@@Base+0xf34>  // b.none
    f9a4:	mov	w1, w2
    f9a8:	add	w2, w3, w1
    f9ac:	asr	w2, w2, #1
    f9b0:	sub	w14, w3, w2
    f9b4:	sub	w11, w2, w1
    f9b8:	ldr	w4, [x6, w2, sxtw #2]
    f9bc:	cmp	w12, w4
    f9c0:	b.ge	f99c <BZ2_bzDecompress@@Base+0xe14>  // b.tcont
    f9c4:	cmp	w11, #0x1
    f9c8:	b.eq	fab8 <BZ2_bzDecompress@@Base+0xf30>  // b.none
    f9cc:	mov	w3, w2
    f9d0:	b	f980 <BZ2_bzDecompress@@Base+0xdf8>
    f9d4:	mov	w1, w4
    f9d8:	lsr	w5, w3, #1
    f9dc:	ubfiz	x16, x3, #1, #20
    f9e0:	ubfiz	w3, w3, #2, #1
    f9e4:	and	w1, w1, #0xff
    f9e8:	add	w1, w1, #0x4
    f9ec:	add	w4, w14, #0x4
    f9f0:	ldrb	w5, [x13, w5, uxtw]
    f9f4:	ldrh	w16, [x12, x16]
    f9f8:	str	w1, [x19, #16]
    f9fc:	lsr	w3, w5, w3
    fa00:	str	w4, [x19, #1092]
    fa04:	ubfiz	w5, w3, #16, #4
    fa08:	orr	w5, w5, w16
    fa0c:	str	w5, [x19, #60]
    fa10:	cmp	w15, w5
    fa14:	b.ls	f1cc <BZ2_bzDecompress@@Base+0x644>  // b.plast
    fa18:	mov	w4, #0x100                 	// #256
    fa1c:	nop
    fa20:	add	w3, w4, w2
    fa24:	asr	w3, w3, #1
    fa28:	sub	w17, w4, w3
    fa2c:	sub	w16, w3, w2
    fa30:	ldr	w15, [x6, w3, sxtw #2]
    fa34:	cmp	w5, w15
    fa38:	b.lt	fa64 <BZ2_bzDecompress@@Base+0xedc>  // b.tstop
    fa3c:	cmp	w17, #0x1
    fa40:	b.eq	fa78 <BZ2_bzDecompress@@Base+0xef0>  // b.none
    fa44:	mov	w2, w3
    fa48:	add	w3, w4, w2
    fa4c:	asr	w3, w3, #1
    fa50:	sub	w17, w4, w3
    fa54:	sub	w16, w3, w2
    fa58:	ldr	w15, [x6, w3, sxtw #2]
    fa5c:	cmp	w5, w15
    fa60:	b.ge	fa3c <BZ2_bzDecompress@@Base+0xeb4>  // b.tcont
    fa64:	cmp	w16, #0x1
    fa68:	b.eq	fa74 <BZ2_bzDecompress@@Base+0xeec>  // b.none
    fa6c:	mov	w4, w3
    fa70:	b	fa20 <BZ2_bzDecompress@@Base+0xe98>
    fa74:	mov	w3, w2
    fa78:	ubfiz	x4, x5, #1, #20
    fa7c:	lsr	w15, w5, #1
    fa80:	mov	w2, w1
    fa84:	ldr	w1, [x0, #32]
    fa88:	ubfiz	w5, w5, #2, #1
    fa8c:	add	w14, w14, #0x5
    fa90:	ldrh	w4, [x12, x4]
    fa94:	str	w3, [x19, #64]
    fa98:	ldrb	w3, [x13, w15, uxtw]
    fa9c:	str	w14, [x19, #1092]
    faa0:	lsr	w3, w3, w5
    faa4:	ubfiz	w3, w3, #16, #4
    faa8:	orr	w3, w3, w4
    faac:	str	w3, [x19, #60]
    fab0:	cbnz	w1, ec20 <BZ2_bzDecompress@@Base+0x98>
    fab4:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    fab8:	mov	w2, w1
    fabc:	ubfiz	x3, x12, #1, #20
    fac0:	lsr	w1, w12, #1
    fac4:	ubfiz	w12, w12, #2, #1
    fac8:	ldrh	w3, [x5, x3]
    facc:	str	w2, [x19, #64]
    fad0:	ldrb	w1, [x7, w1, uxtw]
    fad4:	lsr	w1, w1, w12
    fad8:	ubfiz	w1, w1, #16, #4
    fadc:	orr	w1, w1, w3
    fae0:	str	w1, [x19, #60]
    fae4:	cbnz	w8, fafc <BZ2_bzDecompress@@Base+0xf74>
    fae8:	ldr	w1, [x19, #28]
    faec:	cmp	w1, #0x1ff
    faf0:	csinc	w3, wzr, w1, eq  // eq = none
    faf4:	ldr	w8, [x30, w1, sxtw #2]
    faf8:	stp	w8, w3, [x19, #24]
    fafc:	sub	w8, w8, #0x1
    fb00:	add	w10, w10, #0x5
    fb04:	cmp	w8, #0x1
    fb08:	str	w8, [x19, #24]
    fb0c:	cset	w3, eq  // eq = none
    fb10:	str	w10, [x19, #1092]
    fb14:	eor	w2, w3, w2
    fb18:	str	w2, [x19, #64]
    fb1c:	ldr	w2, [x0, #32]
    fb20:	mov	w1, w15
    fb24:	cbnz	w2, f3e0 <BZ2_bzDecompress@@Base+0x858>
    fb28:	b	f444 <BZ2_bzDecompress@@Base+0x8bc>
    fb2c:	ldr	w3, [x19, #28]
    fb30:	ldr	x8, [sp, #104]
    fb34:	cmp	w3, #0x1ff
    fb38:	csinc	w4, wzr, w3, eq  // eq = none
    fb3c:	ldr	w8, [x8, w3, sxtw #2]
    fb40:	stp	w8, w4, [x19, #24]
    fb44:	b	f948 <BZ2_bzDecompress@@Base+0xdc0>
    fb48:	ldr	w0, [x19, #52]
    fb4c:	ldr	w2, [x19, #3180]
    fb50:	ldr	w3, [x19, #3188]
    fb54:	cmp	w0, #0x2
    fb58:	b.gt	fba4 <BZ2_bzDecompress@@Base+0x101c>
    fb5c:	cmp	w3, w2
    fb60:	b.eq	ed18 <BZ2_bzDecompress@@Base+0x190>  // b.none
    fb64:	b	f1cc <BZ2_bzDecompress@@Base+0x644>
    fb68:	add	x9, x19, #0xc, lsl #12
    fb6c:	b	ec84 <BZ2_bzDecompress@@Base+0xfc>
    fb70:	mov	w23, #0xfffffffe            	// #-2
    fb74:	ldp	x19, x20, [sp, #16]
    fb78:	b	f1dc <BZ2_bzDecompress@@Base+0x654>
    fb7c:	mov	w0, #0x0                   	// #0
    fb80:	b	f358 <BZ2_bzDecompress@@Base+0x7d0>
    fb84:	mov	w23, #0xffffffff            	// #-1
    fb88:	ldp	x19, x20, [sp, #16]
    fb8c:	b	f1dc <BZ2_bzDecompress@@Base+0x654>
    fb90:	mov	w0, w5
    fb94:	mov	w18, #0x0                   	// #0
    fb98:	b	f358 <BZ2_bzDecompress@@Base+0x7d0>
    fb9c:	mov	w23, #0xfffffffe            	// #-2
    fba0:	b	f1dc <BZ2_bzDecompress@@Base+0x654>
    fba4:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
    fba8:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
    fbac:	add	x1, x1, #0x2e8
    fbb0:	ldr	x0, [x0, #4008]
    fbb4:	ldr	x0, [x0]
    fbb8:	bl	17c0 <fprintf@plt>
    fbbc:	ldr	w2, [x19, #3180]
    fbc0:	ldr	w3, [x19, #3188]
    fbc4:	b	fb5c <BZ2_bzDecompress@@Base+0xfd4>
    fbc8:	and	w4, w13, #0xff
    fbcc:	mov	w0, w5
    fbd0:	mov	w13, w3
    fbd4:	b	f8d0 <BZ2_bzDecompress@@Base+0xd48>

000000000000fbd8 <BZ2_bzDecompressEnd@@Base>:
    fbd8:	cbz	x0, fc58 <BZ2_bzDecompressEnd@@Base+0x80>
    fbdc:	stp	x29, x30, [sp, #-32]!
    fbe0:	mov	x29, sp
    fbe4:	stp	x19, x20, [sp, #16]
    fbe8:	mov	x19, x0
    fbec:	ldr	x20, [x0, #48]
    fbf0:	cbz	x20, fc50 <BZ2_bzDecompressEnd@@Base+0x78>
    fbf4:	ldr	x0, [x20]
    fbf8:	cmp	x0, x19
    fbfc:	b.ne	fc50 <BZ2_bzDecompressEnd@@Base+0x78>  // b.any
    fc00:	ldr	x1, [x20, #3152]
    fc04:	ldp	x2, x0, [x19, #64]
    fc08:	cbz	x1, fc14 <BZ2_bzDecompressEnd@@Base+0x3c>
    fc0c:	blr	x2
    fc10:	ldp	x2, x0, [x19, #64]
    fc14:	ldr	x1, [x20, #3160]
    fc18:	cbz	x1, fc24 <BZ2_bzDecompressEnd@@Base+0x4c>
    fc1c:	blr	x2
    fc20:	ldp	x2, x0, [x19, #64]
    fc24:	ldr	x1, [x20, #3168]
    fc28:	cbz	x1, fc34 <BZ2_bzDecompressEnd@@Base+0x5c>
    fc2c:	blr	x2
    fc30:	ldp	x2, x0, [x19, #64]
    fc34:	ldr	x1, [x19, #48]
    fc38:	blr	x2
    fc3c:	str	xzr, [x19, #48]
    fc40:	mov	w0, #0x0                   	// #0
    fc44:	ldp	x19, x20, [sp, #16]
    fc48:	ldp	x29, x30, [sp], #32
    fc4c:	ret
    fc50:	mov	w0, #0xfffffffe            	// #-2
    fc54:	b	fc44 <BZ2_bzDecompressEnd@@Base+0x6c>
    fc58:	mov	w0, #0xfffffffe            	// #-2
    fc5c:	ret

000000000000fc60 <BZ2_bzWriteOpen@@Base>:
    fc60:	stp	x29, x30, [sp, #-80]!
    fc64:	mov	x29, sp
    fc68:	stp	x19, x20, [sp, #16]
    fc6c:	mov	x20, x0
    fc70:	stp	x21, x22, [sp, #32]
    fc74:	mov	x21, x1
    fc78:	mov	w22, w4
    fc7c:	stp	x23, x24, [sp, #48]
    fc80:	mov	w23, w2
    fc84:	mov	w24, w3
    fc88:	cbz	x0, fd6c <BZ2_bzWriteOpen@@Base+0x10c>
    fc8c:	str	wzr, [x0]
    fc90:	cbz	x1, fd48 <BZ2_bzWriteOpen@@Base+0xe8>
    fc94:	sub	w0, w2, #0x1
    fc98:	cmp	w0, #0x8
    fc9c:	b.hi	fd48 <BZ2_bzWriteOpen@@Base+0xe8>  // b.pmore
    fca0:	cmp	w4, #0xfa
    fca4:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    fca8:	b.hi	fd48 <BZ2_bzWriteOpen@@Base+0xe8>  // b.pmore
    fcac:	mov	x0, x1
    fcb0:	bl	17d0 <ferror@plt>
    fcb4:	cbnz	w0, fdb0 <BZ2_bzWriteOpen@@Base+0x150>
    fcb8:	mov	x0, #0x13f0                	// #5104
    fcbc:	bl	15b0 <malloc@plt>
    fcc0:	mov	x19, x0
    fcc4:	cbz	x0, fdf0 <BZ2_bzWriteOpen@@Base+0x190>
    fcc8:	stp	x25, x26, [sp, #64]
    fccc:	cbz	x20, fcd4 <BZ2_bzWriteOpen@@Base+0x74>
    fcd0:	str	wzr, [x20]
    fcd4:	add	x25, x19, #0x1, lsl #12
    fcd8:	str	wzr, [x19, #5096]
    fcdc:	mov	x4, #0x13d0                	// #5072
    fce0:	add	x4, x19, x4
    fce4:	mov	w26, #0x1                   	// #1
    fce8:	cmp	w22, #0x0
    fcec:	strb	wzr, [x25, #1004]
    fcf0:	mov	w3, #0x1e                  	// #30
    fcf4:	str	x21, [x19]
    fcf8:	mov	x0, #0x1398                	// #5016
    fcfc:	str	wzr, [x19, #5008]
    fd00:	mov	w2, w24
    fd04:	strb	w26, [x25, #916]
    fd08:	mov	w1, w23
    fd0c:	stp	xzr, xzr, [x4]
    fd10:	csel	w3, w22, w3, ne  // ne = any
    fd14:	add	x0, x19, x0
    fd18:	str	xzr, [x19, #5088]
    fd1c:	bl	1630 <BZ2_bzCompressInit@plt>
    fd20:	cbnz	w0, fdd4 <BZ2_bzWriteOpen@@Base+0x174>
    fd24:	str	wzr, [x19, #5024]
    fd28:	strb	w26, [x25, #1004]
    fd2c:	ldp	x25, x26, [sp, #64]
    fd30:	mov	x0, x19
    fd34:	ldp	x19, x20, [sp, #16]
    fd38:	ldp	x21, x22, [sp, #32]
    fd3c:	ldp	x23, x24, [sp, #48]
    fd40:	ldp	x29, x30, [sp], #80
    fd44:	ret
    fd48:	mov	w0, #0xfffffffe            	// #-2
    fd4c:	str	w0, [x20]
    fd50:	mov	x19, #0x0                   	// #0
    fd54:	mov	x0, x19
    fd58:	ldp	x19, x20, [sp, #16]
    fd5c:	ldp	x21, x22, [sp, #32]
    fd60:	ldp	x23, x24, [sp, #48]
    fd64:	ldp	x29, x30, [sp], #80
    fd68:	ret
    fd6c:	cbz	x1, fd94 <BZ2_bzWriteOpen@@Base+0x134>
    fd70:	sub	w0, w2, #0x1
    fd74:	cmp	w0, #0x8
    fd78:	b.hi	fd94 <BZ2_bzWriteOpen@@Base+0x134>  // b.pmore
    fd7c:	cmp	w4, #0xfa
    fd80:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    fd84:	b.hi	fd94 <BZ2_bzWriteOpen@@Base+0x134>  // b.pmore
    fd88:	mov	x0, x1
    fd8c:	bl	17d0 <ferror@plt>
    fd90:	cbz	w0, fcb8 <BZ2_bzWriteOpen@@Base+0x58>
    fd94:	mov	x19, #0x0                   	// #0
    fd98:	mov	x0, x19
    fd9c:	ldp	x19, x20, [sp, #16]
    fda0:	ldp	x21, x22, [sp, #32]
    fda4:	ldp	x23, x24, [sp, #48]
    fda8:	ldp	x29, x30, [sp], #80
    fdac:	ret
    fdb0:	mov	w0, #0xfffffffa            	// #-6
    fdb4:	str	w0, [x20]
    fdb8:	mov	x19, #0x0                   	// #0
    fdbc:	mov	x0, x19
    fdc0:	ldp	x19, x20, [sp, #16]
    fdc4:	ldp	x21, x22, [sp, #32]
    fdc8:	ldp	x23, x24, [sp, #48]
    fdcc:	ldp	x29, x30, [sp], #80
    fdd0:	ret
    fdd4:	cbz	x20, fddc <BZ2_bzWriteOpen@@Base+0x17c>
    fdd8:	str	w0, [x20]
    fddc:	mov	x0, x19
    fde0:	mov	x19, #0x0                   	// #0
    fde4:	bl	16f0 <free@plt>
    fde8:	ldp	x25, x26, [sp, #64]
    fdec:	b	fd30 <BZ2_bzWriteOpen@@Base+0xd0>
    fdf0:	cbz	x20, fd94 <BZ2_bzWriteOpen@@Base+0x134>
    fdf4:	mov	w0, #0xfffffffd            	// #-3
    fdf8:	str	w0, [x20]
    fdfc:	b	fd30 <BZ2_bzWriteOpen@@Base+0xd0>

000000000000fe00 <BZ2_bzWrite@@Base>:
    fe00:	stp	x29, x30, [sp, #-80]!
    fe04:	mov	x29, sp
    fe08:	stp	x19, x20, [sp, #16]
    fe0c:	mov	x20, x0
    fe10:	mov	x19, x1
    fe14:	stp	x21, x22, [sp, #32]
    fe18:	mov	x22, x2
    fe1c:	mov	w21, w3
    fe20:	cbz	x0, fe68 <BZ2_bzWrite@@Base+0x68>
    fe24:	str	wzr, [x0]
    fe28:	cbz	x1, ff34 <BZ2_bzWrite@@Base+0x134>
    fe2c:	str	wzr, [x1, #5096]
    fe30:	cbz	x2, ff68 <BZ2_bzWrite@@Base+0x168>
    fe34:	tbnz	w21, #31, ff64 <BZ2_bzWrite@@Base+0x164>
    fe38:	add	x0, x19, #0x1, lsl #12
    fe3c:	ldrb	w0, [x0, #916]
    fe40:	cbnz	w0, fe90 <BZ2_bzWrite@@Base+0x90>
    fe44:	cbz	x20, fe50 <BZ2_bzWrite@@Base+0x50>
    fe48:	mov	w0, #0xffffffff            	// #-1
    fe4c:	str	w0, [x20]
    fe50:	mov	w0, #0xffffffff            	// #-1
    fe54:	str	w0, [x19, #5096]
    fe58:	ldp	x19, x20, [sp, #16]
    fe5c:	ldp	x21, x22, [sp, #32]
    fe60:	ldp	x29, x30, [sp], #80
    fe64:	ret
    fe68:	cbz	x1, fe58 <BZ2_bzWrite@@Base+0x58>
    fe6c:	str	wzr, [x1, #5096]
    fe70:	cbnz	x2, fe34 <BZ2_bzWrite@@Base+0x34>
    fe74:	nop
    fe78:	mov	w0, #0xfffffffe            	// #-2
    fe7c:	str	w0, [x19, #5096]
    fe80:	ldp	x19, x20, [sp, #16]
    fe84:	ldp	x21, x22, [sp, #32]
    fe88:	ldp	x29, x30, [sp], #80
    fe8c:	ret
    fe90:	ldr	x0, [x19]
    fe94:	bl	17d0 <ferror@plt>
    fe98:	cbnz	w0, ff40 <BZ2_bzWrite@@Base+0x140>
    fe9c:	cbz	w21, ff7c <BZ2_bzWrite@@Base+0x17c>
    fea0:	stp	x23, x24, [sp, #48]
    fea4:	mov	x0, #0x1398                	// #5016
    fea8:	add	x24, x19, #0x8
    feac:	stp	x25, x26, [sp, #64]
    feb0:	mov	w23, #0x1388                	// #5000
    feb4:	add	x25, x19, x0
    feb8:	mov	w26, #0x1387                	// #4999
    febc:	str	x22, [x19, #5016]
    fec0:	str	w21, [x19, #5024]
    fec4:	b	fed0 <BZ2_bzWrite@@Base+0xd0>
    fec8:	ldr	w0, [x19, #5024]
    fecc:	cbz	w0, ffa4 <BZ2_bzWrite@@Base+0x1a4>
    fed0:	str	x24, [x19, #5040]
    fed4:	mov	x0, x25
    fed8:	str	w23, [x19, #5048]
    fedc:	mov	w1, #0x0                   	// #0
    fee0:	bl	1690 <BZ2_bzCompress@plt>
    fee4:	cmp	w0, #0x1
    fee8:	b.ne	ff8c <BZ2_bzWrite@@Base+0x18c>  // b.any
    feec:	ldr	w2, [x19, #5048]
    fef0:	cmp	w2, w26
    fef4:	b.hi	fec8 <BZ2_bzWrite@@Base+0xc8>  // b.pmore
    fef8:	ldr	x3, [x19]
    fefc:	sub	w21, w23, w2
    ff00:	mov	x0, x24
    ff04:	sub	w2, w23, w2
    ff08:	mov	x1, #0x1                   	// #1
    ff0c:	bl	1760 <fwrite@plt>
    ff10:	cmp	w21, w0
    ff14:	b.ne	ff24 <BZ2_bzWrite@@Base+0x124>  // b.any
    ff18:	ldr	x0, [x19]
    ff1c:	bl	17d0 <ferror@plt>
    ff20:	cbz	w0, fec8 <BZ2_bzWrite@@Base+0xc8>
    ff24:	ldp	x23, x24, [sp, #48]
    ff28:	ldp	x25, x26, [sp, #64]
    ff2c:	cbnz	x20, ff44 <BZ2_bzWrite@@Base+0x144>
    ff30:	b	ff4c <BZ2_bzWrite@@Base+0x14c>
    ff34:	mov	w0, #0xfffffffe            	// #-2
    ff38:	str	w0, [x20]
    ff3c:	b	fe58 <BZ2_bzWrite@@Base+0x58>
    ff40:	cbz	x20, ff4c <BZ2_bzWrite@@Base+0x14c>
    ff44:	mov	w0, #0xfffffffa            	// #-6
    ff48:	str	w0, [x20]
    ff4c:	mov	w0, #0xfffffffa            	// #-6
    ff50:	str	w0, [x19, #5096]
    ff54:	ldp	x19, x20, [sp, #16]
    ff58:	ldp	x21, x22, [sp, #32]
    ff5c:	ldp	x29, x30, [sp], #80
    ff60:	ret
    ff64:	cbz	x20, fe78 <BZ2_bzWrite@@Base+0x78>
    ff68:	mov	w0, #0xfffffffe            	// #-2
    ff6c:	str	w0, [x20]
    ff70:	mov	w0, #0xfffffffe            	// #-2
    ff74:	str	w0, [x19, #5096]
    ff78:	b	fe80 <BZ2_bzWrite@@Base+0x80>
    ff7c:	cbz	x20, ff84 <BZ2_bzWrite@@Base+0x184>
    ff80:	str	wzr, [x20]
    ff84:	str	wzr, [x19, #5096]
    ff88:	b	fe58 <BZ2_bzWrite@@Base+0x58>
    ff8c:	cbz	x20, ff94 <BZ2_bzWrite@@Base+0x194>
    ff90:	str	w0, [x20]
    ff94:	ldp	x23, x24, [sp, #48]
    ff98:	ldp	x25, x26, [sp, #64]
    ff9c:	str	w0, [x19, #5096]
    ffa0:	b	fe58 <BZ2_bzWrite@@Base+0x58>
    ffa4:	ldp	x23, x24, [sp, #48]
    ffa8:	ldp	x25, x26, [sp, #64]
    ffac:	cbz	x20, ff84 <BZ2_bzWrite@@Base+0x184>
    ffb0:	str	wzr, [x20]
    ffb4:	b	ff84 <BZ2_bzWrite@@Base+0x184>

000000000000ffb8 <BZ2_bzWriteClose64@@Base>:
    ffb8:	stp	x29, x30, [sp, #-112]!
    ffbc:	mov	x29, sp
    ffc0:	stp	x19, x20, [sp, #16]
    ffc4:	mov	x20, x0
    ffc8:	cbz	x1, 1015c <BZ2_bzWriteClose64@@Base+0x1a4>
    ffcc:	add	x0, x1, #0x1, lsl #12
    ffd0:	mov	x19, x1
    ffd4:	ldrb	w0, [x0, #916]
    ffd8:	cbnz	w0, fffc <BZ2_bzWriteClose64@@Base+0x44>
    ffdc:	cbz	x20, ffe8 <BZ2_bzWriteClose64@@Base+0x30>
    ffe0:	mov	w0, #0xffffffff            	// #-1
    ffe4:	str	w0, [x20]
    ffe8:	mov	w0, #0xffffffff            	// #-1
    ffec:	str	w0, [x19, #5096]
    fff0:	ldp	x19, x20, [sp, #16]
    fff4:	ldp	x29, x30, [sp], #112
    fff8:	ret
    fffc:	ldr	x0, [x1]
   10000:	stp	x21, x22, [sp, #32]
   10004:	mov	x21, x3
   10008:	mov	x22, x4
   1000c:	stp	x23, x24, [sp, #48]
   10010:	mov	x23, x5
   10014:	mov	x24, x6
   10018:	stp	x25, x26, [sp, #64]
   1001c:	mov	w25, w2
   10020:	bl	17d0 <ferror@plt>
   10024:	cbnz	w0, 10188 <BZ2_bzWriteClose64@@Base+0x1d0>
   10028:	cbz	x21, 10030 <BZ2_bzWriteClose64@@Base+0x78>
   1002c:	str	wzr, [x21]
   10030:	cbz	x22, 10038 <BZ2_bzWriteClose64@@Base+0x80>
   10034:	str	wzr, [x22]
   10038:	cbz	x23, 10040 <BZ2_bzWriteClose64@@Base+0x88>
   1003c:	str	wzr, [x23]
   10040:	cbz	x24, 10048 <BZ2_bzWriteClose64@@Base+0x90>
   10044:	str	wzr, [x24]
   10048:	cbnz	w25, 100f8 <BZ2_bzWriteClose64@@Base+0x140>
   1004c:	ldr	w0, [x19, #5096]
   10050:	cbnz	w0, 100ec <BZ2_bzWriteClose64@@Base+0x134>
   10054:	mov	x1, #0x1398                	// #5016
   10058:	add	x26, x19, #0x8
   1005c:	mov	w25, #0x1388                	// #5000
   10060:	stp	x27, x28, [sp, #80]
   10064:	add	x27, x19, x1
   10068:	b	10074 <BZ2_bzWriteClose64@@Base+0xbc>
   1006c:	cmp	w28, #0x4
   10070:	b.eq	100e8 <BZ2_bzWriteClose64@@Base+0x130>  // b.none
   10074:	str	x26, [x19, #5040]
   10078:	mov	x0, x27
   1007c:	str	w25, [x19, #5048]
   10080:	mov	w1, #0x2                   	// #2
   10084:	bl	1690 <BZ2_bzCompress@plt>
   10088:	mov	w28, w0
   1008c:	sub	w0, w0, #0x3
   10090:	cmp	w0, #0x1
   10094:	b.hi	101b4 <BZ2_bzWriteClose64@@Base+0x1fc>  // b.pmore
   10098:	ldr	w2, [x19, #5048]
   1009c:	mov	w0, #0x1387                	// #4999
   100a0:	cmp	w2, w0
   100a4:	b.hi	1006c <BZ2_bzWriteClose64@@Base+0xb4>  // b.pmore
   100a8:	ldr	x3, [x19]
   100ac:	sub	w5, w25, w2
   100b0:	mov	x0, x26
   100b4:	sub	w2, w25, w2
   100b8:	mov	x1, #0x1                   	// #1
   100bc:	str	w5, [sp, #108]
   100c0:	bl	1760 <fwrite@plt>
   100c4:	ldr	w5, [sp, #108]
   100c8:	cmp	w5, w0
   100cc:	b.ne	100dc <BZ2_bzWriteClose64@@Base+0x124>  // b.any
   100d0:	ldr	x0, [x19]
   100d4:	bl	17d0 <ferror@plt>
   100d8:	cbz	w0, 1006c <BZ2_bzWriteClose64@@Base+0xb4>
   100dc:	ldp	x27, x28, [sp, #80]
   100e0:	cbnz	x20, 1018c <BZ2_bzWriteClose64@@Base+0x1d4>
   100e4:	b	10194 <BZ2_bzWriteClose64@@Base+0x1dc>
   100e8:	ldp	x27, x28, [sp, #80]
   100ec:	ldr	x0, [x19]
   100f0:	bl	17d0 <ferror@plt>
   100f4:	cbz	w0, 10170 <BZ2_bzWriteClose64@@Base+0x1b8>
   100f8:	cbz	x21, 10104 <BZ2_bzWriteClose64@@Base+0x14c>
   100fc:	ldr	w0, [x19, #5028]
   10100:	str	w0, [x21]
   10104:	cbz	x22, 10110 <BZ2_bzWriteClose64@@Base+0x158>
   10108:	ldr	w0, [x19, #5032]
   1010c:	str	w0, [x22]
   10110:	cbz	x23, 1011c <BZ2_bzWriteClose64@@Base+0x164>
   10114:	ldr	w0, [x19, #5052]
   10118:	str	w0, [x23]
   1011c:	cbz	x24, 10128 <BZ2_bzWriteClose64@@Base+0x170>
   10120:	ldr	w0, [x19, #5056]
   10124:	str	w0, [x24]
   10128:	cbz	x20, 10130 <BZ2_bzWriteClose64@@Base+0x178>
   1012c:	str	wzr, [x20]
   10130:	str	wzr, [x19, #5096]
   10134:	mov	x0, #0x1398                	// #5016
   10138:	add	x0, x19, x0
   1013c:	bl	1640 <BZ2_bzCompressEnd@plt>
   10140:	mov	x0, x19
   10144:	ldp	x19, x20, [sp, #16]
   10148:	ldp	x21, x22, [sp, #32]
   1014c:	ldp	x23, x24, [sp, #48]
   10150:	ldp	x25, x26, [sp, #64]
   10154:	ldp	x29, x30, [sp], #112
   10158:	b	16f0 <free@plt>
   1015c:	cbz	x0, fff0 <BZ2_bzWriteClose64@@Base+0x38>
   10160:	str	wzr, [x0]
   10164:	ldp	x19, x20, [sp, #16]
   10168:	ldp	x29, x30, [sp], #112
   1016c:	ret
   10170:	ldr	x0, [x19]
   10174:	bl	1770 <fflush@plt>
   10178:	ldr	x0, [x19]
   1017c:	bl	17d0 <ferror@plt>
   10180:	cbz	w0, 100f8 <BZ2_bzWriteClose64@@Base+0x140>
   10184:	nop
   10188:	cbz	x20, 10194 <BZ2_bzWriteClose64@@Base+0x1dc>
   1018c:	mov	w0, #0xfffffffa            	// #-6
   10190:	str	w0, [x20]
   10194:	mov	w0, #0xfffffffa            	// #-6
   10198:	ldp	x21, x22, [sp, #32]
   1019c:	ldp	x23, x24, [sp, #48]
   101a0:	ldp	x25, x26, [sp, #64]
   101a4:	str	w0, [x19, #5096]
   101a8:	ldp	x19, x20, [sp, #16]
   101ac:	ldp	x29, x30, [sp], #112
   101b0:	ret
   101b4:	cbz	x20, 101bc <BZ2_bzWriteClose64@@Base+0x204>
   101b8:	str	w28, [x20]
   101bc:	ldp	x21, x22, [sp, #32]
   101c0:	ldp	x23, x24, [sp, #48]
   101c4:	ldp	x25, x26, [sp, #64]
   101c8:	str	w28, [x19, #5096]
   101cc:	ldp	x27, x28, [sp, #80]
   101d0:	b	fff0 <BZ2_bzWriteClose64@@Base+0x38>
   101d4:	nop

00000000000101d8 <BZ2_bzWriteClose@@Base>:
   101d8:	mov	x5, x4
   101dc:	mov	x6, #0x0                   	// #0
   101e0:	mov	x4, #0x0                   	// #0
   101e4:	b	1730 <BZ2_bzWriteClose64@plt>

00000000000101e8 <BZ2_bzReadOpen@@Base>:
   101e8:	stp	x29, x30, [sp, #-80]!
   101ec:	cmp	w3, #0x1
   101f0:	mov	x29, sp
   101f4:	stp	x19, x20, [sp, #16]
   101f8:	mov	x20, x0
   101fc:	stp	x21, x22, [sp, #32]
   10200:	mov	x22, x1
   10204:	cset	w1, hi  // hi = pmore
   10208:	stp	x23, x24, [sp, #48]
   1020c:	cmp	x22, #0x0
   10210:	mov	w24, w3
   10214:	stp	x25, x26, [sp, #64]
   10218:	mov	x23, x4
   1021c:	mov	w25, w2
   10220:	mov	w21, w5
   10224:	csinc	w1, w1, wzr, ne  // ne = any
   10228:	cbz	x0, 1033c <BZ2_bzReadOpen@@Base+0x154>
   1022c:	str	wzr, [x0]
   10230:	cbnz	w1, 10314 <BZ2_bzReadOpen@@Base+0x12c>
   10234:	cmp	w2, #0x4
   10238:	b.hi	10314 <BZ2_bzReadOpen@@Base+0x12c>  // b.pmore
   1023c:	cmp	w5, #0x0
   10240:	ccmp	x4, #0x0, #0x0, ne  // ne = any
   10244:	b.eq	10314 <BZ2_bzReadOpen@@Base+0x12c>  // b.none
   10248:	cmp	x4, #0x0
   1024c:	mov	w0, #0x1388                	// #5000
   10250:	ccmp	w5, w0, #0x0, ne  // ne = any
   10254:	b.hi	10314 <BZ2_bzReadOpen@@Base+0x12c>  // b.pmore
   10258:	mov	x0, x22
   1025c:	bl	17d0 <ferror@plt>
   10260:	cbnz	w0, 10384 <BZ2_bzReadOpen@@Base+0x19c>
   10264:	mov	x0, #0x13f0                	// #5104
   10268:	bl	15b0 <malloc@plt>
   1026c:	mov	x19, x0
   10270:	cbz	x0, 103b0 <BZ2_bzReadOpen@@Base+0x1c8>
   10274:	cbz	x20, 1027c <BZ2_bzReadOpen@@Base+0x94>
   10278:	str	wzr, [x20]
   1027c:	add	x26, x19, #0x1, lsl #12
   10280:	str	wzr, [x19, #5096]
   10284:	mov	x1, #0x13d0                	// #5072
   10288:	add	x0, x19, x1
   1028c:	cmp	w21, #0x0
   10290:	strb	wzr, [x26, #1004]
   10294:	str	x22, [x19]
   10298:	str	wzr, [x19, #5008]
   1029c:	strb	wzr, [x26, #916]
   102a0:	stp	xzr, xzr, [x0]
   102a4:	str	xzr, [x19, #5088]
   102a8:	b.le	102c8 <BZ2_bzReadOpen@@Base+0xe0>
   102ac:	sub	w2, w21, #0x1
   102b0:	mov	x1, x23
   102b4:	add	x0, x19, #0x8
   102b8:	sxtw	x2, w2
   102bc:	add	x2, x2, #0x1
   102c0:	bl	1520 <memcpy@plt>
   102c4:	str	w21, [x19, #5008]
   102c8:	mov	x0, #0x1398                	// #5016
   102cc:	mov	w2, w24
   102d0:	mov	w1, w25
   102d4:	add	x0, x19, x0
   102d8:	bl	15c0 <BZ2_bzDecompressInit@plt>
   102dc:	cbnz	w0, 10398 <BZ2_bzReadOpen@@Base+0x1b0>
   102e0:	ldr	w1, [x19, #5008]
   102e4:	add	x0, x19, #0x8
   102e8:	str	x0, [x19, #5016]
   102ec:	mov	w0, #0x1                   	// #1
   102f0:	str	w1, [x19, #5024]
   102f4:	strb	w0, [x26, #1004]
   102f8:	mov	x0, x19
   102fc:	ldp	x19, x20, [sp, #16]
   10300:	ldp	x21, x22, [sp, #32]
   10304:	ldp	x23, x24, [sp, #48]
   10308:	ldp	x25, x26, [sp, #64]
   1030c:	ldp	x29, x30, [sp], #80
   10310:	ret
   10314:	mov	w0, #0xfffffffe            	// #-2
   10318:	mov	x19, #0x0                   	// #0
   1031c:	str	w0, [x20]
   10320:	mov	x0, x19
   10324:	ldp	x19, x20, [sp, #16]
   10328:	ldp	x21, x22, [sp, #32]
   1032c:	ldp	x23, x24, [sp, #48]
   10330:	ldp	x25, x26, [sp, #64]
   10334:	ldp	x29, x30, [sp], #80
   10338:	ret
   1033c:	cbnz	w1, 10364 <BZ2_bzReadOpen@@Base+0x17c>
   10340:	cmp	w2, #0x4
   10344:	b.hi	10364 <BZ2_bzReadOpen@@Base+0x17c>  // b.pmore
   10348:	cmp	w5, #0x0
   1034c:	ccmp	x4, #0x0, #0x0, ne  // ne = any
   10350:	b.eq	10364 <BZ2_bzReadOpen@@Base+0x17c>  // b.none
   10354:	cmp	x4, #0x0
   10358:	mov	w0, #0x1388                	// #5000
   1035c:	ccmp	w5, w0, #0x0, ne  // ne = any
   10360:	b.ls	10258 <BZ2_bzReadOpen@@Base+0x70>  // b.plast
   10364:	mov	x19, #0x0                   	// #0
   10368:	mov	x0, x19
   1036c:	ldp	x19, x20, [sp, #16]
   10370:	ldp	x21, x22, [sp, #32]
   10374:	ldp	x23, x24, [sp, #48]
   10378:	ldp	x25, x26, [sp, #64]
   1037c:	ldp	x29, x30, [sp], #80
   10380:	ret
   10384:	cbz	x20, 10364 <BZ2_bzReadOpen@@Base+0x17c>
   10388:	mov	w0, #0xfffffffa            	// #-6
   1038c:	mov	x19, #0x0                   	// #0
   10390:	str	w0, [x20]
   10394:	b	10320 <BZ2_bzReadOpen@@Base+0x138>
   10398:	cbz	x20, 103a0 <BZ2_bzReadOpen@@Base+0x1b8>
   1039c:	str	w0, [x20]
   103a0:	mov	x0, x19
   103a4:	mov	x19, #0x0                   	// #0
   103a8:	bl	16f0 <free@plt>
   103ac:	b	10320 <BZ2_bzReadOpen@@Base+0x138>
   103b0:	cbz	x20, 10364 <BZ2_bzReadOpen@@Base+0x17c>
   103b4:	mov	w0, #0xfffffffd            	// #-3
   103b8:	str	w0, [x20]
   103bc:	b	10320 <BZ2_bzReadOpen@@Base+0x138>
   103c0:	mov	x12, #0x13f0                	// #5104
   103c4:	sub	sp, sp, x12
   103c8:	adrp	x4, 11000 <BZ2_bzerror@@Base+0x200>
   103cc:	stp	x29, x30, [sp]
   103d0:	mov	x29, sp
   103d4:	ldrb	w4, [x4, #2472]
   103d8:	stp	x19, x20, [sp, #16]
   103dc:	strb	w4, [sp, #88]
   103e0:	stur	xzr, [sp, #89]
   103e4:	strb	wzr, [sp, #97]
   103e8:	cbz	x2, 10594 <BZ2_bzReadOpen@@Base+0x3ac>
   103ec:	stp	x21, x22, [sp, #32]
   103f0:	mov	x20, x2
   103f4:	stp	x23, x24, [sp, #48]
   103f8:	mov	x23, x0
   103fc:	mov	w24, w3
   10400:	stp	x25, x26, [sp, #64]
   10404:	mov	w25, w1
   10408:	ldrb	w19, [x2]
   1040c:	cbz	w19, 10510 <BZ2_bzReadOpen@@Base+0x328>
   10410:	mov	w26, #0x0                   	// #0
   10414:	mov	w21, #0x0                   	// #0
   10418:	mov	w22, #0x9                   	// #9
   1041c:	b	1044c <BZ2_bzReadOpen@@Base+0x264>
   10420:	cmp	w19, #0x72
   10424:	b.eq	10500 <BZ2_bzReadOpen@@Base+0x318>  // b.none
   10428:	bl	16b0 <__ctype_b_loc@plt>
   1042c:	ldr	x0, [x0]
   10430:	ubfiz	x1, x19, #1, #8
   10434:	sub	w19, w19, #0x30
   10438:	ldrh	w0, [x0, x1]
   1043c:	tst	x0, #0x800
   10440:	csel	w22, w19, w22, ne  // ne = any
   10444:	ldrb	w19, [x20, #1]!
   10448:	cbz	w19, 10468 <BZ2_bzReadOpen@@Base+0x280>
   1044c:	cmp	w19, #0x73
   10450:	b.eq	10508 <BZ2_bzReadOpen@@Base+0x320>  // b.none
   10454:	cmp	w19, #0x77
   10458:	b.ne	10420 <BZ2_bzReadOpen@@Base+0x238>  // b.any
   1045c:	ldrb	w19, [x20, #1]!
   10460:	mov	w21, #0x1                   	// #1
   10464:	cbnz	w19, 1044c <BZ2_bzReadOpen@@Base+0x264>
   10468:	mov	w0, #0x77                  	// #119
   1046c:	cbz	w21, 10518 <BZ2_bzReadOpen@@Base+0x330>
   10470:	add	x19, sp, #0x58
   10474:	strh	w0, [sp, #88]
   10478:	mov	x0, x19
   1047c:	bl	1540 <strlen@plt>
   10480:	mov	w1, #0x62                  	// #98
   10484:	strh	w1, [x19, x0]
   10488:	cbnz	w24, 1053c <BZ2_bzReadOpen@@Base+0x354>
   1048c:	cbz	x23, 10498 <BZ2_bzReadOpen@@Base+0x2b0>
   10490:	ldrb	w0, [x23]
   10494:	cbnz	w0, 105b0 <BZ2_bzReadOpen@@Base+0x3c8>
   10498:	cbz	w21, 10578 <BZ2_bzReadOpen@@Base+0x390>
   1049c:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
   104a0:	ldr	x0, [x0, #4024]
   104a4:	ldr	x20, [x0]
   104a8:	cbz	x20, 10588 <BZ2_bzReadOpen@@Base+0x3a0>
   104ac:	cmp	w22, #0x9
   104b0:	mov	w2, #0x9                   	// #9
   104b4:	csel	w2, w22, w2, le
   104b8:	mov	x1, x20
   104bc:	cmp	w2, #0x0
   104c0:	add	x0, sp, #0x54
   104c4:	csinc	w2, w2, wzr, gt
   104c8:	mov	w4, #0x1e                  	// #30
   104cc:	mov	w3, #0x0                   	// #0
   104d0:	bl	1620 <BZ2_bzWriteOpen@plt>
   104d4:	mov	x19, x0
   104d8:	cbz	x19, 105c4 <BZ2_bzReadOpen@@Base+0x3dc>
   104dc:	ldp	x21, x22, [sp, #32]
   104e0:	ldp	x23, x24, [sp, #48]
   104e4:	ldp	x25, x26, [sp, #64]
   104e8:	mov	x0, x19
   104ec:	mov	x12, #0x13f0                	// #5104
   104f0:	ldp	x29, x30, [sp]
   104f4:	ldp	x19, x20, [sp, #16]
   104f8:	add	sp, sp, x12
   104fc:	ret
   10500:	mov	w21, #0x0                   	// #0
   10504:	b	10444 <BZ2_bzReadOpen@@Base+0x25c>
   10508:	mov	w26, #0x1                   	// #1
   1050c:	b	10444 <BZ2_bzReadOpen@@Base+0x25c>
   10510:	mov	w22, #0x9                   	// #9
   10514:	mov	w26, #0x0                   	// #0
   10518:	add	x19, sp, #0x58
   1051c:	mov	w0, #0x72                  	// #114
   10520:	strh	w0, [sp, #88]
   10524:	mov	x0, x19
   10528:	bl	1540 <strlen@plt>
   1052c:	mov	w21, #0x0                   	// #0
   10530:	mov	w1, #0x62                  	// #98
   10534:	strh	w1, [x19, x0]
   10538:	cbz	w24, 1048c <BZ2_bzReadOpen@@Base+0x2a4>
   1053c:	mov	x1, x19
   10540:	mov	w0, w25
   10544:	bl	1610 <fdopen@plt>
   10548:	mov	x20, x0
   1054c:	cbz	x20, 10588 <BZ2_bzReadOpen@@Base+0x3a0>
   10550:	cbnz	w21, 104ac <BZ2_bzReadOpen@@Base+0x2c4>
   10554:	mov	w3, w26
   10558:	add	x4, sp, #0x68
   1055c:	mov	x1, x20
   10560:	add	x0, sp, #0x54
   10564:	mov	w5, #0x0                   	// #0
   10568:	mov	w2, #0x0                   	// #0
   1056c:	bl	1790 <BZ2_bzReadOpen@plt>
   10570:	mov	x19, x0
   10574:	b	104d8 <BZ2_bzReadOpen@@Base+0x2f0>
   10578:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
   1057c:	ldr	x0, [x0, #4032]
   10580:	ldr	x20, [x0]
   10584:	cbnz	x20, 10554 <BZ2_bzReadOpen@@Base+0x36c>
   10588:	ldp	x21, x22, [sp, #32]
   1058c:	ldp	x23, x24, [sp, #48]
   10590:	ldp	x25, x26, [sp, #64]
   10594:	mov	x19, #0x0                   	// #0
   10598:	mov	x12, #0x13f0                	// #5104
   1059c:	mov	x0, x19
   105a0:	ldp	x29, x30, [sp]
   105a4:	ldp	x19, x20, [sp, #16]
   105a8:	add	sp, sp, x12
   105ac:	ret
   105b0:	mov	x1, x19
   105b4:	mov	x0, x23
   105b8:	bl	1780 <fopen64@plt>
   105bc:	mov	x20, x0
   105c0:	b	1054c <BZ2_bzReadOpen@@Base+0x364>
   105c4:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
   105c8:	ldr	x0, [x0, #4032]
   105cc:	ldr	x0, [x0]
   105d0:	cmp	x0, x20
   105d4:	b.eq	10588 <BZ2_bzReadOpen@@Base+0x3a0>  // b.none
   105d8:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
   105dc:	ldr	x0, [x0, #4024]
   105e0:	ldr	x0, [x0]
   105e4:	cmp	x0, x20
   105e8:	b.eq	10588 <BZ2_bzReadOpen@@Base+0x3a0>  // b.none
   105ec:	mov	x0, x20
   105f0:	bl	15a0 <fclose@plt>
   105f4:	ldp	x21, x22, [sp, #32]
   105f8:	ldp	x23, x24, [sp, #48]
   105fc:	ldp	x25, x26, [sp, #64]
   10600:	b	104e8 <BZ2_bzReadOpen@@Base+0x300>
   10604:	nop

0000000000010608 <BZ2_bzReadClose@@Base>:
   10608:	stp	x29, x30, [sp, #-32]!
   1060c:	mov	x29, sp
   10610:	str	x19, [sp, #16]
   10614:	mov	x19, x1
   10618:	cbz	x0, 10668 <BZ2_bzReadClose@@Base+0x60>
   1061c:	str	wzr, [x0]
   10620:	cbz	x1, 1065c <BZ2_bzReadClose@@Base+0x54>
   10624:	add	x1, x1, #0x1, lsl #12
   10628:	str	wzr, [x19, #5096]
   1062c:	ldrb	w2, [x1, #916]
   10630:	cbnz	w2, 1064c <BZ2_bzReadClose@@Base+0x44>
   10634:	ldrb	w0, [x1, #1004]
   10638:	cbnz	w0, 10684 <BZ2_bzReadClose@@Base+0x7c>
   1063c:	mov	x0, x19
   10640:	ldr	x19, [sp, #16]
   10644:	ldp	x29, x30, [sp], #32
   10648:	b	16f0 <free@plt>
   1064c:	mov	w1, #0xffffffff            	// #-1
   10650:	str	w1, [x0]
   10654:	mov	w0, #0xffffffff            	// #-1
   10658:	str	w0, [x19, #5096]
   1065c:	ldr	x19, [sp, #16]
   10660:	ldp	x29, x30, [sp], #32
   10664:	ret
   10668:	cbz	x1, 1065c <BZ2_bzReadClose@@Base+0x54>
   1066c:	add	x1, x1, #0x1, lsl #12
   10670:	str	wzr, [x19, #5096]
   10674:	ldrb	w0, [x1, #916]
   10678:	cbnz	w0, 10654 <BZ2_bzReadClose@@Base+0x4c>
   1067c:	ldrb	w0, [x1, #1004]
   10680:	cbz	w0, 1063c <BZ2_bzReadClose@@Base+0x34>
   10684:	mov	x0, #0x1398                	// #5016
   10688:	add	x0, x19, x0
   1068c:	bl	15d0 <BZ2_bzDecompressEnd@plt>
   10690:	mov	x0, x19
   10694:	ldr	x19, [sp, #16]
   10698:	ldp	x29, x30, [sp], #32
   1069c:	b	16f0 <free@plt>

00000000000106a0 <BZ2_bzRead@@Base>:
   106a0:	stp	x29, x30, [sp, #-80]!
   106a4:	mov	x29, sp
   106a8:	stp	x19, x20, [sp, #16]
   106ac:	mov	x19, x1
   106b0:	stp	x21, x22, [sp, #32]
   106b4:	mov	x21, x0
   106b8:	mov	w22, w3
   106bc:	cbz	x0, 107d8 <BZ2_bzRead@@Base+0x138>
   106c0:	str	wzr, [x0]
   106c4:	cbz	x1, 10808 <BZ2_bzRead@@Base+0x168>
   106c8:	str	wzr, [x1, #5096]
   106cc:	cbz	x2, 1082c <BZ2_bzRead@@Base+0x18c>
   106d0:	tbnz	w22, #31, 10828 <BZ2_bzRead@@Base+0x188>
   106d4:	add	x0, x19, #0x1, lsl #12
   106d8:	ldrb	w0, [x0, #916]
   106dc:	cbnz	w0, 10838 <BZ2_bzRead@@Base+0x198>
   106e0:	cbz	w22, 10864 <BZ2_bzRead@@Base+0x1c4>
   106e4:	stp	x23, x24, [sp, #48]
   106e8:	mov	x0, #0x1398                	// #5016
   106ec:	add	x24, x19, #0x8
   106f0:	str	x25, [sp, #64]
   106f4:	add	x23, x19, x0
   106f8:	str	x2, [x19, #5040]
   106fc:	str	w22, [x19, #5048]
   10700:	b	10714 <BZ2_bzRead@@Base+0x74>
   10704:	cmp	w0, #0x4
   10708:	b.eq	108dc <BZ2_bzRead@@Base+0x23c>  // b.none
   1070c:	ldr	w0, [x19, #5048]
   10710:	cbz	w0, 107bc <BZ2_bzRead@@Base+0x11c>
   10714:	ldr	x0, [x19]
   10718:	bl	17d0 <ferror@plt>
   1071c:	mov	w20, w0
   10720:	cbnz	w0, 10888 <BZ2_bzRead@@Base+0x1e8>
   10724:	ldr	w0, [x19, #5024]
   10728:	cbnz	w0, 10778 <BZ2_bzRead@@Base+0xd8>
   1072c:	ldr	x25, [x19]
   10730:	mov	x0, x25
   10734:	bl	15f0 <fgetc@plt>
   10738:	cmn	w0, #0x1
   1073c:	b.eq	10778 <BZ2_bzRead@@Base+0xd8>  // b.none
   10740:	mov	x1, x25
   10744:	bl	1700 <ungetc@plt>
   10748:	ldr	x3, [x19]
   1074c:	mov	x0, x24
   10750:	mov	x2, #0x1388                	// #5000
   10754:	mov	x1, #0x1                   	// #1
   10758:	bl	16d0 <fread@plt>
   1075c:	mov	x25, x0
   10760:	ldr	x0, [x19]
   10764:	bl	17d0 <ferror@plt>
   10768:	cbnz	w0, 10888 <BZ2_bzRead@@Base+0x1e8>
   1076c:	str	w25, [x19, #5008]
   10770:	str	x24, [x19, #5016]
   10774:	str	w25, [x19, #5024]
   10778:	mov	x0, x23
   1077c:	bl	1710 <BZ2_bzDecompress@plt>
   10780:	tst	w0, #0xfffffffb
   10784:	b.ne	108ac <BZ2_bzRead@@Base+0x20c>  // b.any
   10788:	cbnz	w0, 10704 <BZ2_bzRead@@Base+0x64>
   1078c:	ldr	x20, [x19]
   10790:	mov	x0, x20
   10794:	bl	15f0 <fgetc@plt>
   10798:	cmn	w0, #0x1
   1079c:	b.eq	107ac <BZ2_bzRead@@Base+0x10c>  // b.none
   107a0:	mov	x1, x20
   107a4:	bl	1700 <ungetc@plt>
   107a8:	b	1070c <BZ2_bzRead@@Base+0x6c>
   107ac:	ldr	w0, [x19, #5024]
   107b0:	cbnz	w0, 1070c <BZ2_bzRead@@Base+0x6c>
   107b4:	ldr	w0, [x19, #5048]
   107b8:	cbnz	w0, 108c4 <BZ2_bzRead@@Base+0x224>
   107bc:	cbz	x21, 107c4 <BZ2_bzRead@@Base+0x124>
   107c0:	str	wzr, [x21]
   107c4:	mov	w20, w22
   107c8:	ldp	x23, x24, [sp, #48]
   107cc:	ldr	x25, [sp, #64]
   107d0:	str	wzr, [x19, #5096]
   107d4:	b	107f4 <BZ2_bzRead@@Base+0x154>
   107d8:	cbz	x1, 10810 <BZ2_bzRead@@Base+0x170>
   107dc:	str	wzr, [x1, #5096]
   107e0:	cbnz	x2, 106d0 <BZ2_bzRead@@Base+0x30>
   107e4:	nop
   107e8:	mov	w0, #0xfffffffe            	// #-2
   107ec:	mov	w20, #0x0                   	// #0
   107f0:	str	w0, [x19, #5096]
   107f4:	mov	w0, w20
   107f8:	ldp	x19, x20, [sp, #16]
   107fc:	ldp	x21, x22, [sp, #32]
   10800:	ldp	x29, x30, [sp], #80
   10804:	ret
   10808:	mov	w0, #0xfffffffe            	// #-2
   1080c:	str	w0, [x21]
   10810:	mov	w20, #0x0                   	// #0
   10814:	mov	w0, w20
   10818:	ldp	x19, x20, [sp, #16]
   1081c:	ldp	x21, x22, [sp, #32]
   10820:	ldp	x29, x30, [sp], #80
   10824:	ret
   10828:	cbz	x21, 107e8 <BZ2_bzRead@@Base+0x148>
   1082c:	mov	w0, #0xfffffffe            	// #-2
   10830:	str	w0, [x21]
   10834:	b	107e8 <BZ2_bzRead@@Base+0x148>
   10838:	cbz	x21, 10844 <BZ2_bzRead@@Base+0x1a4>
   1083c:	mov	w0, #0xffffffff            	// #-1
   10840:	str	w0, [x21]
   10844:	mov	w0, #0xffffffff            	// #-1
   10848:	str	w0, [x19, #5096]
   1084c:	mov	w20, #0x0                   	// #0
   10850:	mov	w0, w20
   10854:	ldp	x19, x20, [sp, #16]
   10858:	ldp	x21, x22, [sp, #32]
   1085c:	ldp	x29, x30, [sp], #80
   10860:	ret
   10864:	cbz	x21, 1086c <BZ2_bzRead@@Base+0x1cc>
   10868:	str	wzr, [x21]
   1086c:	str	wzr, [x19, #5096]
   10870:	mov	w20, #0x0                   	// #0
   10874:	mov	w0, w20
   10878:	ldp	x19, x20, [sp, #16]
   1087c:	ldp	x21, x22, [sp, #32]
   10880:	ldp	x29, x30, [sp], #80
   10884:	ret
   10888:	cbz	x21, 10894 <BZ2_bzRead@@Base+0x1f4>
   1088c:	mov	w0, #0xfffffffa            	// #-6
   10890:	str	w0, [x21]
   10894:	mov	w0, #0xfffffffa            	// #-6
   10898:	mov	w20, #0x0                   	// #0
   1089c:	ldp	x23, x24, [sp, #48]
   108a0:	ldr	x25, [sp, #64]
   108a4:	str	w0, [x19, #5096]
   108a8:	b	107f4 <BZ2_bzRead@@Base+0x154>
   108ac:	cbz	x21, 108b4 <BZ2_bzRead@@Base+0x214>
   108b0:	str	w0, [x21]
   108b4:	ldp	x23, x24, [sp, #48]
   108b8:	ldr	x25, [sp, #64]
   108bc:	str	w0, [x19, #5096]
   108c0:	b	107f4 <BZ2_bzRead@@Base+0x154>
   108c4:	cbz	x21, 108d0 <BZ2_bzRead@@Base+0x230>
   108c8:	mov	w0, #0xfffffff9            	// #-7
   108cc:	str	w0, [x21]
   108d0:	mov	w0, #0xfffffff9            	// #-7
   108d4:	mov	w20, #0x0                   	// #0
   108d8:	b	108b4 <BZ2_bzRead@@Base+0x214>
   108dc:	cbz	x21, 108e4 <BZ2_bzRead@@Base+0x244>
   108e0:	str	w0, [x21]
   108e4:	ldr	w20, [x19, #5048]
   108e8:	mov	w0, #0x4                   	// #4
   108ec:	ldp	x23, x24, [sp, #48]
   108f0:	sub	w20, w22, w20
   108f4:	ldr	x25, [sp, #64]
   108f8:	str	w0, [x19, #5096]
   108fc:	b	107f4 <BZ2_bzRead@@Base+0x154>

0000000000010900 <BZ2_bzReadGetUnused@@Base>:
   10900:	cbz	x1, 10954 <BZ2_bzReadGetUnused@@Base+0x54>
   10904:	ldr	w4, [x1, #5096]
   10908:	cmp	w4, #0x4
   1090c:	b.eq	10928 <BZ2_bzReadGetUnused@@Base+0x28>  // b.none
   10910:	cbz	x0, 1091c <BZ2_bzReadGetUnused@@Base+0x1c>
   10914:	mov	w2, #0xffffffff            	// #-1
   10918:	str	w2, [x0]
   1091c:	mov	w0, #0xffffffff            	// #-1
   10920:	str	w0, [x1, #5096]
   10924:	ret
   10928:	cmp	x2, #0x0
   1092c:	ccmp	x3, #0x0, #0x4, ne  // ne = any
   10930:	b.eq	10964 <BZ2_bzReadGetUnused@@Base+0x64>  // b.none
   10934:	cbz	x0, 1093c <BZ2_bzReadGetUnused@@Base+0x3c>
   10938:	str	wzr, [x0]
   1093c:	ldr	w0, [x1, #5024]
   10940:	str	wzr, [x1, #5096]
   10944:	str	w0, [x3]
   10948:	ldr	x0, [x1, #5016]
   1094c:	str	x0, [x2]
   10950:	ret
   10954:	cbz	x0, 10924 <BZ2_bzReadGetUnused@@Base+0x24>
   10958:	mov	w1, #0xfffffffe            	// #-2
   1095c:	str	w1, [x0]
   10960:	ret
   10964:	cbz	x0, 10970 <BZ2_bzReadGetUnused@@Base+0x70>
   10968:	mov	w2, #0xfffffffe            	// #-2
   1096c:	str	w2, [x0]
   10970:	mov	w0, #0xfffffffe            	// #-2
   10974:	str	w0, [x1, #5096]
   10978:	ret
   1097c:	nop

0000000000010980 <BZ2_bzBuffToBuffCompress@@Base>:
   10980:	stp	x29, x30, [sp, #-144]!
   10984:	cmp	x0, #0x0
   10988:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   1098c:	mov	x29, sp
   10990:	stp	x19, x20, [sp, #16]
   10994:	b.eq	10aac <BZ2_bzBuffToBuffCompress@@Base+0x12c>  // b.none
   10998:	stp	x21, x22, [sp, #32]
   1099c:	cmp	x2, #0x0
   109a0:	mov	x22, x0
   109a4:	stp	x23, x24, [sp, #48]
   109a8:	sub	w0, w4, #0x1
   109ac:	mov	x20, x1
   109b0:	mov	x23, x2
   109b4:	mov	w1, w4
   109b8:	ccmp	w0, #0x8, #0x2, ne  // ne = any
   109bc:	b.hi	10a9c <BZ2_bzBuffToBuffCompress@@Base+0x11c>  // b.pmore
   109c0:	cmp	w6, #0xfa
   109c4:	mov	w2, w5
   109c8:	ccmp	w5, #0x4, #0x2, ls  // ls = plast
   109cc:	b.hi	10a9c <BZ2_bzBuffToBuffCompress@@Base+0x11c>  // b.pmore
   109d0:	cmp	w6, #0x0
   109d4:	add	x24, sp, #0x40
   109d8:	mov	w21, w3
   109dc:	mov	x0, x24
   109e0:	mov	w3, #0x1e                  	// #30
   109e4:	csel	w3, w6, w3, ne  // ne = any
   109e8:	stp	xzr, xzr, [sp, #120]
   109ec:	str	xzr, [sp, #136]
   109f0:	bl	1630 <BZ2_bzCompressInit@plt>
   109f4:	mov	w19, w0
   109f8:	cbz	w0, 10a14 <BZ2_bzBuffToBuffCompress@@Base+0x94>
   109fc:	ldp	x21, x22, [sp, #32]
   10a00:	ldp	x23, x24, [sp, #48]
   10a04:	mov	w0, w19
   10a08:	ldp	x19, x20, [sp, #16]
   10a0c:	ldp	x29, x30, [sp], #144
   10a10:	ret
   10a14:	ldr	w2, [x20]
   10a18:	mov	w1, #0x2                   	// #2
   10a1c:	mov	x0, x24
   10a20:	str	x23, [sp, #64]
   10a24:	str	w21, [sp, #72]
   10a28:	str	x22, [sp, #88]
   10a2c:	str	w2, [sp, #96]
   10a30:	bl	1690 <BZ2_bzCompress@plt>
   10a34:	mov	w1, w0
   10a38:	cmp	w0, #0x3
   10a3c:	b.eq	10ab4 <BZ2_bzBuffToBuffCompress@@Base+0x134>  // b.none
   10a40:	cmp	w0, #0x4
   10a44:	b.eq	10a6c <BZ2_bzBuffToBuffCompress@@Base+0xec>  // b.none
   10a48:	mov	w19, w1
   10a4c:	mov	x0, x24
   10a50:	bl	1640 <BZ2_bzCompressEnd@plt>
   10a54:	mov	w0, w19
   10a58:	ldp	x19, x20, [sp, #16]
   10a5c:	ldp	x21, x22, [sp, #32]
   10a60:	ldp	x23, x24, [sp, #48]
   10a64:	ldp	x29, x30, [sp], #144
   10a68:	ret
   10a6c:	ldr	w1, [x20]
   10a70:	mov	x0, x24
   10a74:	ldr	w2, [sp, #96]
   10a78:	sub	w1, w1, w2
   10a7c:	str	w1, [x20]
   10a80:	bl	1640 <BZ2_bzCompressEnd@plt>
   10a84:	mov	w0, w19
   10a88:	ldp	x19, x20, [sp, #16]
   10a8c:	ldp	x21, x22, [sp, #32]
   10a90:	ldp	x23, x24, [sp, #48]
   10a94:	ldp	x29, x30, [sp], #144
   10a98:	ret
   10a9c:	mov	w19, #0xfffffffe            	// #-2
   10aa0:	ldp	x21, x22, [sp, #32]
   10aa4:	ldp	x23, x24, [sp, #48]
   10aa8:	b	10a04 <BZ2_bzBuffToBuffCompress@@Base+0x84>
   10aac:	mov	w19, #0xfffffffe            	// #-2
   10ab0:	b	10a04 <BZ2_bzBuffToBuffCompress@@Base+0x84>
   10ab4:	mov	x0, x24
   10ab8:	mov	w19, #0xfffffff8            	// #-8
   10abc:	bl	1640 <BZ2_bzCompressEnd@plt>
   10ac0:	ldp	x21, x22, [sp, #32]
   10ac4:	ldp	x23, x24, [sp, #48]
   10ac8:	b	10a04 <BZ2_bzBuffToBuffCompress@@Base+0x84>
   10acc:	nop

0000000000010ad0 <BZ2_bzBuffToBuffDecompress@@Base>:
   10ad0:	stp	x29, x30, [sp, #-144]!
   10ad4:	cmp	x0, #0x0
   10ad8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   10adc:	mov	x29, sp
   10ae0:	stp	x19, x20, [sp, #16]
   10ae4:	b.eq	10c14 <BZ2_bzBuffToBuffDecompress@@Base+0x144>  // b.none
   10ae8:	stp	x21, x22, [sp, #32]
   10aec:	mov	x22, x2
   10af0:	cmp	x22, #0x0
   10af4:	mov	w2, w4
   10af8:	ccmp	w4, #0x1, #0x2, ne  // ne = any
   10afc:	b.hi	10c08 <BZ2_bzBuffToBuffDecompress@@Base+0x138>  // b.pmore
   10b00:	mov	x20, x1
   10b04:	cmp	w5, #0x4
   10b08:	mov	w1, w5
   10b0c:	b.hi	10c08 <BZ2_bzBuffToBuffDecompress@@Base+0x138>  // b.pmore
   10b10:	stp	x23, x24, [sp, #48]
   10b14:	add	x24, sp, #0x40
   10b18:	mov	x21, x0
   10b1c:	mov	w23, w3
   10b20:	mov	x0, x24
   10b24:	stp	xzr, xzr, [sp, #120]
   10b28:	str	xzr, [sp, #136]
   10b2c:	bl	15c0 <BZ2_bzDecompressInit@plt>
   10b30:	mov	w19, w0
   10b34:	cbz	w0, 10b50 <BZ2_bzBuffToBuffDecompress@@Base+0x80>
   10b38:	ldp	x21, x22, [sp, #32]
   10b3c:	ldp	x23, x24, [sp, #48]
   10b40:	mov	w0, w19
   10b44:	ldp	x19, x20, [sp, #16]
   10b48:	ldp	x29, x30, [sp], #144
   10b4c:	ret
   10b50:	ldr	w1, [x20]
   10b54:	mov	x0, x24
   10b58:	str	x22, [sp, #64]
   10b5c:	str	w23, [sp, #72]
   10b60:	str	x21, [sp, #88]
   10b64:	str	w1, [sp, #96]
   10b68:	bl	1710 <BZ2_bzDecompress@plt>
   10b6c:	mov	w1, w0
   10b70:	cbz	w0, 10bd0 <BZ2_bzBuffToBuffDecompress@@Base+0x100>
   10b74:	cmp	w0, #0x4
   10b78:	b.eq	10ba0 <BZ2_bzBuffToBuffDecompress@@Base+0xd0>  // b.none
   10b7c:	mov	w19, w1
   10b80:	mov	x0, x24
   10b84:	bl	15d0 <BZ2_bzDecompressEnd@plt>
   10b88:	mov	w0, w19
   10b8c:	ldp	x19, x20, [sp, #16]
   10b90:	ldp	x21, x22, [sp, #32]
   10b94:	ldp	x23, x24, [sp, #48]
   10b98:	ldp	x29, x30, [sp], #144
   10b9c:	ret
   10ba0:	ldr	w1, [x20]
   10ba4:	mov	x0, x24
   10ba8:	ldr	w2, [sp, #96]
   10bac:	sub	w1, w1, w2
   10bb0:	str	w1, [x20]
   10bb4:	bl	15d0 <BZ2_bzDecompressEnd@plt>
   10bb8:	mov	w0, w19
   10bbc:	ldp	x19, x20, [sp, #16]
   10bc0:	ldp	x21, x22, [sp, #32]
   10bc4:	ldp	x23, x24, [sp, #48]
   10bc8:	ldp	x29, x30, [sp], #144
   10bcc:	ret
   10bd0:	ldr	w0, [sp, #96]
   10bd4:	cbz	w0, 10bf0 <BZ2_bzBuffToBuffDecompress@@Base+0x120>
   10bd8:	mov	x0, x24
   10bdc:	mov	w19, #0xfffffff9            	// #-7
   10be0:	bl	15d0 <BZ2_bzDecompressEnd@plt>
   10be4:	ldp	x21, x22, [sp, #32]
   10be8:	ldp	x23, x24, [sp, #48]
   10bec:	b	10b40 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
   10bf0:	mov	x0, x24
   10bf4:	mov	w19, #0xfffffff8            	// #-8
   10bf8:	bl	15d0 <BZ2_bzDecompressEnd@plt>
   10bfc:	ldp	x21, x22, [sp, #32]
   10c00:	ldp	x23, x24, [sp, #48]
   10c04:	b	10b40 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
   10c08:	mov	w19, #0xfffffffe            	// #-2
   10c0c:	ldp	x21, x22, [sp, #32]
   10c10:	b	10b40 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
   10c14:	mov	w19, #0xfffffffe            	// #-2
   10c18:	b	10b40 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
   10c1c:	nop

0000000000010c20 <BZ2_bzlibVersion@@Base>:
   10c20:	adrp	x0, 11000 <BZ2_bzerror@@Base+0x200>
   10c24:	add	x0, x0, #0x320
   10c28:	ret
   10c2c:	nop

0000000000010c30 <BZ2_bz__AssertH__fail@@Base>:
   10c30:	stp	x29, x30, [sp, #-48]!
   10c34:	mov	x29, sp
   10c38:	stp	x19, x20, [sp, #16]
   10c3c:	adrp	x20, 22000 <BZ2_bzerror@@Base+0x11200>
   10c40:	mov	w19, w0
   10c44:	ldr	x20, [x20, #4008]
   10c48:	str	x21, [sp, #32]
   10c4c:	ldr	x21, [x20]
   10c50:	bl	1580 <BZ2_bzlibVersion@plt>
   10c54:	mov	w2, w19
   10c58:	mov	x3, x0
   10c5c:	adrp	x1, 11000 <BZ2_bzerror@@Base+0x200>
   10c60:	mov	x0, x21
   10c64:	add	x1, x1, #0x338
   10c68:	bl	17c0 <fprintf@plt>
   10c6c:	cmp	w19, #0x3ef
   10c70:	b.eq	10c7c <BZ2_bz__AssertH__fail@@Base+0x4c>  // b.none
   10c74:	mov	w0, #0x3                   	// #3
   10c78:	bl	1560 <exit@plt>
   10c7c:	ldr	x3, [x20]
   10c80:	adrp	x0, 11000 <BZ2_bzerror@@Base+0x200>
   10c84:	mov	x2, #0x420                 	// #1056
   10c88:	mov	x1, #0x1                   	// #1
   10c8c:	add	x0, x0, #0x4d8
   10c90:	bl	1760 <fwrite@plt>
   10c94:	b	10c74 <BZ2_bz__AssertH__fail@@Base+0x44>

0000000000010c98 <BZ2_bzopen@@Base>:
   10c98:	mov	x2, x1
   10c9c:	mov	w3, #0x0                   	// #0
   10ca0:	mov	w1, #0xffffffff            	// #-1
   10ca4:	b	103c0 <BZ2_bzReadOpen@@Base+0x1d8>

0000000000010ca8 <BZ2_bzdopen@@Base>:
   10ca8:	mov	x2, x1
   10cac:	mov	w3, #0x1                   	// #1
   10cb0:	mov	w1, w0
   10cb4:	mov	x0, #0x0                   	// #0
   10cb8:	b	103c0 <BZ2_bzReadOpen@@Base+0x1d8>
   10cbc:	nop

0000000000010cc0 <BZ2_bzread@@Base>:
   10cc0:	mov	w3, w2
   10cc4:	ldr	w2, [x0, #5096]
   10cc8:	cmp	w2, #0x4
   10ccc:	b.eq	10cfc <BZ2_bzread@@Base+0x3c>  // b.none
   10cd0:	stp	x29, x30, [sp, #-32]!
   10cd4:	mov	x2, x1
   10cd8:	mov	x1, x0
   10cdc:	mov	x29, sp
   10ce0:	add	x0, sp, #0x1c
   10ce4:	bl	17a0 <BZ2_bzRead@plt>
   10ce8:	ldr	w1, [sp, #28]
   10cec:	ldp	x29, x30, [sp], #32
   10cf0:	tst	w1, #0xfffffffb
   10cf4:	csinv	w0, w0, wzr, eq  // eq = none
   10cf8:	ret
   10cfc:	mov	w0, #0x0                   	// #0
   10d00:	ret
   10d04:	nop

0000000000010d08 <BZ2_bzwrite@@Base>:
   10d08:	stp	x29, x30, [sp, #-48]!
   10d0c:	mov	x29, sp
   10d10:	str	x19, [sp, #16]
   10d14:	mov	w19, w2
   10d18:	mov	w3, w19
   10d1c:	mov	x2, x1
   10d20:	mov	x1, x0
   10d24:	add	x0, sp, #0x2c
   10d28:	bl	16a0 <BZ2_bzWrite@plt>
   10d2c:	ldr	w0, [sp, #44]
   10d30:	cmp	w0, #0x0
   10d34:	csinv	w0, w19, wzr, eq  // eq = none
   10d38:	ldr	x19, [sp, #16]
   10d3c:	ldp	x29, x30, [sp], #48
   10d40:	ret
   10d44:	nop

0000000000010d48 <BZ2_bzflush@@Base>:
   10d48:	mov	w0, #0x0                   	// #0
   10d4c:	ret

0000000000010d50 <BZ2_bzclose@@Base>:
   10d50:	cbz	x0, 10df8 <BZ2_bzclose@@Base+0xa8>
   10d54:	stp	x29, x30, [sp, #-48]!
   10d58:	mov	x29, sp
   10d5c:	stp	x19, x20, [sp, #16]
   10d60:	mov	x19, x0
   10d64:	add	x0, x0, #0x1, lsl #12
   10d68:	ldr	x20, [x19]
   10d6c:	ldrb	w0, [x0, #916]
   10d70:	cbnz	w0, 10dbc <BZ2_bzclose@@Base+0x6c>
   10d74:	mov	x1, x19
   10d78:	add	x0, sp, #0x2c
   10d7c:	bl	15e0 <BZ2_bzReadClose@plt>
   10d80:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
   10d84:	ldr	x0, [x0, #4032]
   10d88:	ldr	x0, [x0]
   10d8c:	cmp	x0, x20
   10d90:	b.eq	10db0 <BZ2_bzclose@@Base+0x60>  // b.none
   10d94:	adrp	x0, 22000 <BZ2_bzerror@@Base+0x11200>
   10d98:	ldr	x0, [x0, #4024]
   10d9c:	ldr	x0, [x0]
   10da0:	cmp	x0, x20
   10da4:	b.eq	10db0 <BZ2_bzclose@@Base+0x60>  // b.none
   10da8:	mov	x0, x20
   10dac:	bl	15a0 <fclose@plt>
   10db0:	ldp	x19, x20, [sp, #16]
   10db4:	ldp	x29, x30, [sp], #48
   10db8:	ret
   10dbc:	add	x0, sp, #0x2c
   10dc0:	mov	x1, x19
   10dc4:	mov	x4, #0x0                   	// #0
   10dc8:	mov	x3, #0x0                   	// #0
   10dcc:	mov	w2, #0x0                   	// #0
   10dd0:	bl	1680 <BZ2_bzWriteClose@plt>
   10dd4:	ldr	w0, [sp, #44]
   10dd8:	cbz	w0, 10d80 <BZ2_bzclose@@Base+0x30>
   10ddc:	mov	x1, x19
   10de0:	mov	x4, #0x0                   	// #0
   10de4:	mov	x3, #0x0                   	// #0
   10de8:	mov	w2, #0x1                   	// #1
   10dec:	mov	x0, #0x0                   	// #0
   10df0:	bl	1680 <BZ2_bzWriteClose@plt>
   10df4:	b	10d80 <BZ2_bzclose@@Base+0x30>
   10df8:	ret
   10dfc:	nop

0000000000010e00 <BZ2_bzerror@@Base>:
   10e00:	ldr	w0, [x0, #5096]
   10e04:	adrp	x2, 22000 <BZ2_bzerror@@Base+0x11200>
   10e08:	add	x2, x2, #0xd30
   10e0c:	cmp	w0, #0x0
   10e10:	csel	w0, w0, wzr, le
   10e14:	str	w0, [x1]
   10e18:	neg	w0, w0
   10e1c:	ldr	x0, [x2, w0, sxtw #3]
   10e20:	ret

Disassembly of section .fini:

0000000000010e24 <.fini>:
   10e24:	stp	x29, x30, [sp, #-16]!
   10e28:	mov	x29, sp
   10e2c:	ldp	x29, x30, [sp], #16
   10e30:	ret
