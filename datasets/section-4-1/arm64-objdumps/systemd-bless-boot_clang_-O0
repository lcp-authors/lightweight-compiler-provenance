
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-bless-boot_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004014b0 <_init>:
  4014b0:	stp	x29, x30, [sp, #-16]!
  4014b4:	mov	x29, sp
  4014b8:	bl	401898 <call_weak_fn>
  4014bc:	ldp	x29, x30, [sp], #16
  4014c0:	ret

Disassembly of section .plt:

00000000004014c8 <__libc_start_main@plt-0x20>:
  4014c8:	stp	x16, x30, [sp, #-16]!
  4014cc:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4014d0:	ldr	x17, [x16, #3656]
  4014d4:	add	x16, x16, #0xe48
  4014d8:	br	x17
  4014dc:	nop
  4014e0:	nop
  4014e4:	nop

00000000004014e8 <__libc_start_main@plt>:
  4014e8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4014ec:	ldr	x17, [x16, #3664]
  4014f0:	add	x16, x16, #0xe50
  4014f4:	br	x17

00000000004014f8 <abort@plt>:
  4014f8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4014fc:	ldr	x17, [x16, #3672]
  401500:	add	x16, x16, #0xe58
  401504:	br	x17

0000000000401508 <__gmon_start__@plt>:
  401508:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40150c:	ldr	x17, [x16, #3680]
  401510:	add	x16, x16, #0xe60
  401514:	br	x17

0000000000401518 <ask_password_agent_close@plt>:
  401518:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40151c:	ldr	x17, [x16, #3688]
  401520:	add	x16, x16, #0xe68
  401524:	br	x17

0000000000401528 <polkit_agent_close@plt>:
  401528:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40152c:	ldr	x17, [x16, #3696]
  401530:	add	x16, x16, #0xe70
  401534:	br	x17

0000000000401538 <pager_close@plt>:
  401538:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40153c:	ldr	x17, [x16, #3704]
  401540:	add	x16, x16, #0xe78
  401544:	br	x17

0000000000401548 <mac_selinux_finish@plt>:
  401548:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40154c:	ldr	x17, [x16, #3712]
  401550:	add	x16, x16, #0xe80
  401554:	br	x17

0000000000401558 <log_parse_environment_realm@plt>:
  401558:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40155c:	ldr	x17, [x16, #3720]
  401560:	add	x16, x16, #0xe88
  401564:	br	x17

0000000000401568 <log_open@plt>:
  401568:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40156c:	ldr	x17, [x16, #3728]
  401570:	add	x16, x16, #0xe90
  401574:	br	x17

0000000000401578 <detect_container@plt>:
  401578:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40157c:	ldr	x17, [x16, #3736]
  401580:	add	x16, x16, #0xe98
  401584:	br	x17

0000000000401588 <log_get_max_level_realm@plt>:
  401588:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40158c:	ldr	x17, [x16, #3744]
  401590:	add	x16, x16, #0xea0
  401594:	br	x17

0000000000401598 <log_internal_realm@plt>:
  401598:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40159c:	ldr	x17, [x16, #3752]
  4015a0:	add	x16, x16, #0xea8
  4015a4:	br	x17

00000000004015a8 <abs@plt>:
  4015a8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4015ac:	ldr	x17, [x16, #3760]
  4015b0:	add	x16, x16, #0xeb0
  4015b4:	br	x17

00000000004015b8 <is_efi_boot@plt>:
  4015b8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4015bc:	ldr	x17, [x16, #3768]
  4015c0:	add	x16, x16, #0xeb8
  4015c4:	br	x17

00000000004015c8 <dispatch_verb@plt>:
  4015c8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4015cc:	ldr	x17, [x16, #3776]
  4015d0:	add	x16, x16, #0xec0
  4015d4:	br	x17

00000000004015d8 <strv_free@plt>:
  4015d8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4015dc:	ldr	x17, [x16, #3784]
  4015e0:	add	x16, x16, #0xec8
  4015e4:	br	x17

00000000004015e8 <terminal_urlify_man@plt>:
  4015e8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4015ec:	ldr	x17, [x16, #3792]
  4015f0:	add	x16, x16, #0xed0
  4015f4:	br	x17

00000000004015f8 <log_oom_internal@plt>:
  4015f8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4015fc:	ldr	x17, [x16, #3800]
  401600:	add	x16, x16, #0xed8
  401604:	br	x17

0000000000401608 <printf@plt>:
  401608:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40160c:	ldr	x17, [x16, #3808]
  401610:	add	x16, x16, #0xee0
  401614:	br	x17

0000000000401618 <puts@plt>:
  401618:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40161c:	ldr	x17, [x16, #3816]
  401620:	add	x16, x16, #0xee8
  401624:	br	x17

0000000000401628 <open64@plt>:
  401628:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40162c:	ldr	x17, [x16, #3824]
  401630:	add	x16, x16, #0xef0
  401634:	br	x17

0000000000401638 <__errno_location@plt>:
  401638:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40163c:	ldr	x17, [x16, #3832]
  401640:	add	x16, x16, #0xef8
  401644:	br	x17

0000000000401648 <faccessat@plt>:
  401648:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40164c:	ldr	x17, [x16, #3840]
  401650:	add	x16, x16, #0xf00
  401654:	br	x17

0000000000401658 <strcmp@plt>:
  401658:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40165c:	ldr	x17, [x16, #3848]
  401660:	add	x16, x16, #0xf08
  401664:	br	x17

0000000000401668 <log_assert_failed_realm@plt>:
  401668:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40166c:	ldr	x17, [x16, #3856]
  401670:	add	x16, x16, #0xf10
  401674:	br	x17

0000000000401678 <rename_noreplace@plt>:
  401678:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40167c:	ldr	x17, [x16, #3864]
  401680:	add	x16, x16, #0xf18
  401684:	br	x17

0000000000401688 <dirname_malloc@plt>:
  401688:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40168c:	ldr	x17, [x16, #3872]
  401690:	add	x16, x16, #0xf20
  401694:	br	x17

0000000000401698 <fsync_path_at@plt>:
  401698:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40169c:	ldr	x17, [x16, #3880]
  4016a0:	add	x16, x16, #0xf28
  4016a4:	br	x17

00000000004016a8 <syncfs@plt>:
  4016a8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4016ac:	ldr	x17, [x16, #3888]
  4016b0:	add	x16, x16, #0xf30
  4016b4:	br	x17

00000000004016b8 <getopt_long@plt>:
  4016b8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4016bc:	ldr	x17, [x16, #3896]
  4016c0:	add	x16, x16, #0xf38
  4016c4:	br	x17

00000000004016c8 <version@plt>:
  4016c8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4016cc:	ldr	x17, [x16, #3904]
  4016d0:	add	x16, x16, #0xf40
  4016d4:	br	x17

00000000004016d8 <strv_extend@plt>:
  4016d8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4016dc:	ldr	x17, [x16, #3912]
  4016e0:	add	x16, x16, #0xf48
  4016e4:	br	x17

00000000004016e8 <log_assert_failed_unreachable_realm@plt>:
  4016e8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4016ec:	ldr	x17, [x16, #3920]
  4016f0:	add	x16, x16, #0xf50
  4016f4:	br	x17

00000000004016f8 <free@plt>:
  4016f8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4016fc:	ldr	x17, [x16, #3928]
  401700:	add	x16, x16, #0xf58
  401704:	br	x17

0000000000401708 <colors_enabled@plt>:
  401708:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40170c:	ldr	x17, [x16, #3936]
  401710:	add	x16, x16, #0xf60
  401714:	br	x17

0000000000401718 <efi_get_variable_string@plt>:
  401718:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40171c:	ldr	x17, [x16, #3944]
  401720:	add	x16, x16, #0xf68
  401724:	br	x17

0000000000401728 <efi_tilt_backslashes@plt>:
  401728:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40172c:	ldr	x17, [x16, #3952]
  401730:	add	x16, x16, #0xf70
  401734:	br	x17

0000000000401738 <path_is_normalized@plt>:
  401738:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40173c:	ldr	x17, [x16, #3960]
  401740:	add	x16, x16, #0xf78
  401744:	br	x17

0000000000401748 <path_is_absolute@plt>:
  401748:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40174c:	ldr	x17, [x16, #3968]
  401750:	add	x16, x16, #0xf80
  401754:	br	x17

0000000000401758 <last_path_component@plt>:
  401758:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40175c:	ldr	x17, [x16, #3976]
  401760:	add	x16, x16, #0xf88
  401764:	br	x17

0000000000401768 <strrchr@plt>:
  401768:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40176c:	ldr	x17, [x16, #3984]
  401770:	add	x16, x16, #0xf90
  401774:	br	x17

0000000000401778 <strndup@plt>:
  401778:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40177c:	ldr	x17, [x16, #3992]
  401780:	add	x16, x16, #0xf98
  401784:	br	x17

0000000000401788 <strdup@plt>:
  401788:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40178c:	ldr	x17, [x16, #4000]
  401790:	add	x16, x16, #0xfa0
  401794:	br	x17

0000000000401798 <find_esp_and_warn@plt>:
  401798:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40179c:	ldr	x17, [x16, #4008]
  4017a0:	add	x16, x16, #0xfa8
  4017a4:	br	x17

00000000004017a8 <find_xbootldr_and_warn@plt>:
  4017a8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4017ac:	ldr	x17, [x16, #4016]
  4017b0:	add	x16, x16, #0xfb0
  4017b4:	br	x17

00000000004017b8 <strv_new_internal@plt>:
  4017b8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4017bc:	ldr	x17, [x16, #4024]
  4017c0:	add	x16, x16, #0xfb8
  4017c4:	br	x17

00000000004017c8 <strjoin_real@plt>:
  4017c8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4017cc:	ldr	x17, [x16, #4032]
  4017d0:	add	x16, x16, #0xfc0
  4017d4:	br	x17

00000000004017d8 <asprintf@plt>:
  4017d8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4017dc:	ldr	x17, [x16, #4040]
  4017e0:	add	x16, x16, #0xfc8
  4017e4:	br	x17

00000000004017e8 <safe_close@plt>:
  4017e8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4017ec:	ldr	x17, [x16, #4048]
  4017f0:	add	x16, x16, #0xfd0
  4017f4:	br	x17

00000000004017f8 <strspn@plt>:
  4017f8:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  4017fc:	ldr	x17, [x16, #4056]
  401800:	add	x16, x16, #0xfd8
  401804:	br	x17

0000000000401808 <strnlen@plt>:
  401808:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40180c:	ldr	x17, [x16, #4064]
  401810:	add	x16, x16, #0xfe0
  401814:	br	x17

0000000000401818 <memcpy@plt>:
  401818:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40181c:	ldr	x17, [x16, #4072]
  401820:	add	x16, x16, #0xfe8
  401824:	br	x17

0000000000401828 <safe_atollu@plt>:
  401828:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40182c:	ldr	x17, [x16, #4080]
  401830:	add	x16, x16, #0xff0
  401834:	br	x17

0000000000401838 <strv_join_prefix@plt>:
  401838:	adrp	x16, 41f000 <__FRAME_END__+0x198c8>
  40183c:	ldr	x17, [x16, #4088]
  401840:	add	x16, x16, #0xff8
  401844:	br	x17

Disassembly of section .text:

0000000000401848 <_start>:
  401848:	mov	x29, #0x0                   	// #0
  40184c:	mov	x30, #0x0                   	// #0
  401850:	mov	x5, x0
  401854:	ldr	x1, [sp]
  401858:	add	x2, sp, #0x8
  40185c:	mov	x6, sp
  401860:	movz	x0, #0x0, lsl #48
  401864:	movk	x0, #0x0, lsl #32
  401868:	movk	x0, #0x40, lsl #16
  40186c:	movk	x0, #0x1a3c
  401870:	movz	x3, #0x0, lsl #48
  401874:	movk	x3, #0x0, lsl #32
  401878:	movk	x3, #0x40, lsl #16
  40187c:	movk	x3, #0x49f0
  401880:	movz	x4, #0x0, lsl #48
  401884:	movk	x4, #0x0, lsl #32
  401888:	movk	x4, #0x40, lsl #16
  40188c:	movk	x4, #0x4a70
  401890:	bl	4014e8 <__libc_start_main@plt>
  401894:	bl	4014f8 <abort@plt>

0000000000401898 <call_weak_fn>:
  401898:	adrp	x0, 41f000 <__FRAME_END__+0x198c8>
  40189c:	ldr	x0, [x0, #3616]
  4018a0:	cbz	x0, 4018a8 <call_weak_fn+0x10>
  4018a4:	b	401508 <__gmon_start__@plt>
  4018a8:	ret

00000000004018ac <deregister_tm_clones>:
  4018ac:	stp	x29, x30, [sp, #-32]!
  4018b0:	mov	x29, sp
  4018b4:	adrp	x0, 420000 <completed.8445>
  4018b8:	add	x0, x0, #0x0
  4018bc:	str	x0, [sp, #24]
  4018c0:	ldr	x0, [sp, #24]
  4018c4:	str	x0, [sp, #24]
  4018c8:	ldr	x1, [sp, #24]
  4018cc:	adrp	x0, 420000 <completed.8445>
  4018d0:	add	x0, x0, #0x0
  4018d4:	cmp	x1, x0
  4018d8:	b.eq	401914 <deregister_tm_clones+0x68>  // b.none
  4018dc:	adrp	x0, 404000 <make_bad+0x54>
  4018e0:	add	x0, x0, #0xa88
  4018e4:	ldr	x0, [x0]
  4018e8:	str	x0, [sp, #16]
  4018ec:	ldr	x0, [sp, #16]
  4018f0:	str	x0, [sp, #16]
  4018f4:	ldr	x0, [sp, #16]
  4018f8:	cmp	x0, #0x0
  4018fc:	b.eq	401918 <deregister_tm_clones+0x6c>  // b.none
  401900:	ldr	x1, [sp, #16]
  401904:	adrp	x0, 420000 <completed.8445>
  401908:	add	x0, x0, #0x0
  40190c:	blr	x1
  401910:	b	401918 <deregister_tm_clones+0x6c>
  401914:	nop
  401918:	ldp	x29, x30, [sp], #32
  40191c:	ret

0000000000401920 <register_tm_clones>:
  401920:	stp	x29, x30, [sp, #-48]!
  401924:	mov	x29, sp
  401928:	adrp	x0, 420000 <completed.8445>
  40192c:	add	x0, x0, #0x0
  401930:	str	x0, [sp, #40]
  401934:	ldr	x0, [sp, #40]
  401938:	str	x0, [sp, #40]
  40193c:	ldr	x1, [sp, #40]
  401940:	adrp	x0, 420000 <completed.8445>
  401944:	add	x0, x0, #0x0
  401948:	sub	x0, x1, x0
  40194c:	asr	x0, x0, #3
  401950:	lsr	x1, x0, #63
  401954:	add	x0, x1, x0
  401958:	asr	x0, x0, #1
  40195c:	str	x0, [sp, #32]
  401960:	ldr	x0, [sp, #32]
  401964:	cmp	x0, #0x0
  401968:	b.eq	4019a8 <register_tm_clones+0x88>  // b.none
  40196c:	adrp	x0, 404000 <make_bad+0x54>
  401970:	add	x0, x0, #0xa90
  401974:	ldr	x0, [x0]
  401978:	str	x0, [sp, #24]
  40197c:	ldr	x0, [sp, #24]
  401980:	str	x0, [sp, #24]
  401984:	ldr	x0, [sp, #24]
  401988:	cmp	x0, #0x0
  40198c:	b.eq	4019ac <register_tm_clones+0x8c>  // b.none
  401990:	ldr	x2, [sp, #24]
  401994:	ldr	x1, [sp, #32]
  401998:	adrp	x0, 420000 <completed.8445>
  40199c:	add	x0, x0, #0x0
  4019a0:	blr	x2
  4019a4:	b	4019ac <register_tm_clones+0x8c>
  4019a8:	nop
  4019ac:	ldp	x29, x30, [sp], #48
  4019b0:	ret

00000000004019b4 <__do_global_dtors_aux>:
  4019b4:	stp	x29, x30, [sp, #-16]!
  4019b8:	mov	x29, sp
  4019bc:	adrp	x0, 420000 <completed.8445>
  4019c0:	add	x0, x0, #0x0
  4019c4:	ldrb	w0, [x0]
  4019c8:	and	x0, x0, #0xff
  4019cc:	cmp	x0, #0x0
  4019d0:	b.ne	4019ec <__do_global_dtors_aux+0x38>  // b.any
  4019d4:	bl	4018ac <deregister_tm_clones>
  4019d8:	adrp	x0, 420000 <completed.8445>
  4019dc:	add	x0, x0, #0x0
  4019e0:	mov	w1, #0x1                   	// #1
  4019e4:	strb	w1, [x0]
  4019e8:	b	4019f0 <__do_global_dtors_aux+0x3c>
  4019ec:	nop
  4019f0:	ldp	x29, x30, [sp], #16
  4019f4:	ret

00000000004019f8 <frame_dummy>:
  4019f8:	stp	x29, x30, [sp, #-16]!
  4019fc:	mov	x29, sp
  401a00:	bl	401920 <register_tm_clones>
  401a04:	nop
  401a08:	ldp	x29, x30, [sp], #16
  401a0c:	ret

0000000000401a10 <__unique_prefix_static_destructor_wrapper0>:
  401a10:	sub	sp, sp, #0x20
  401a14:	stp	x29, x30, [sp, #16]
  401a18:	add	x29, sp, #0x10
  401a1c:	str	x0, [sp, #8]
  401a20:	ldr	x8, [sp, #8]
  401a24:	str	x8, [sp]
  401a28:	ldr	x0, [sp]
  401a2c:	bl	401d2c <strv_freep>
  401a30:	ldp	x29, x30, [sp, #16]
  401a34:	add	sp, sp, #0x20
  401a38:	ret

0000000000401a3c <main>:
  401a3c:	sub	sp, sp, #0x30
  401a40:	stp	x29, x30, [sp, #32]
  401a44:	add	x29, sp, #0x20
  401a48:	mov	w8, wzr
  401a4c:	mov	w9, #0x1                   	// #1
  401a50:	stur	wzr, [x29, #-4]
  401a54:	stur	w0, [x29, #-8]
  401a58:	str	x1, [sp, #16]
  401a5c:	ldur	w0, [x29, #-8]
  401a60:	ldr	x1, [sp, #16]
  401a64:	str	w8, [sp, #8]
  401a68:	str	w9, [sp, #4]
  401a6c:	bl	401ab4 <save_argc_argv>
  401a70:	ldur	w0, [x29, #-8]
  401a74:	ldr	x1, [sp, #16]
  401a78:	bl	401ae8 <run>
  401a7c:	str	w0, [sp, #12]
  401a80:	bl	401518 <ask_password_agent_close@plt>
  401a84:	bl	401528 <polkit_agent_close@plt>
  401a88:	bl	401538 <pager_close@plt>
  401a8c:	bl	401548 <mac_selinux_finish@plt>
  401a90:	bl	401cac <static_destruct>
  401a94:	ldr	w8, [sp, #12]
  401a98:	cmp	w8, #0x0
  401a9c:	ldr	w8, [sp, #4]
  401aa0:	ldr	w9, [sp, #8]
  401aa4:	csel	w0, w8, w9, lt  // lt = tstop
  401aa8:	ldp	x29, x30, [sp, #32]
  401aac:	add	sp, sp, #0x30
  401ab0:	ret

0000000000401ab4 <save_argc_argv>:
  401ab4:	sub	sp, sp, #0x10
  401ab8:	adrp	x8, 420000 <completed.8445>
  401abc:	add	x8, x8, #0x10
  401ac0:	adrp	x9, 420000 <completed.8445>
  401ac4:	add	x9, x9, #0x18
  401ac8:	str	w0, [sp, #12]
  401acc:	str	x1, [sp]
  401ad0:	ldr	w10, [sp, #12]
  401ad4:	str	w10, [x8]
  401ad8:	ldr	x8, [sp]
  401adc:	str	x8, [x9]
  401ae0:	add	sp, sp, #0x10
  401ae4:	ret

0000000000401ae8 <run>:
  401ae8:	sub	sp, sp, #0x60
  401aec:	stp	x29, x30, [sp, #80]
  401af0:	add	x29, sp, #0x50
  401af4:	mov	w8, wzr
  401af8:	adrp	x9, 404000 <make_bad+0x54>
  401afc:	add	x9, x9, #0xbfb
  401b00:	add	x9, x9, #0x3
  401b04:	stur	w0, [x29, #-8]
  401b08:	stur	x1, [x29, #-16]
  401b0c:	mov	w0, w8
  401b10:	str	x9, [sp, #16]
  401b14:	bl	401558 <log_parse_environment_realm@plt>
  401b18:	bl	401568 <log_open@plt>
  401b1c:	ldur	w8, [x29, #-8]
  401b20:	ldur	x1, [x29, #-16]
  401b24:	mov	w0, w8
  401b28:	bl	403294 <parse_argv>
  401b2c:	stur	w0, [x29, #-20]
  401b30:	ldur	w8, [x29, #-20]
  401b34:	cmp	w8, #0x0
  401b38:	cset	w8, gt
  401b3c:	tbnz	w8, #0, 401b4c <run+0x64>
  401b40:	ldur	w8, [x29, #-20]
  401b44:	stur	w8, [x29, #-4]
  401b48:	b	401c9c <run+0x1b4>
  401b4c:	bl	401578 <detect_container@plt>
  401b50:	cmp	w0, #0x0
  401b54:	cset	w8, le
  401b58:	tbnz	w8, #0, 401be8 <run+0x100>
  401b5c:	mov	w8, #0x3                   	// #3
  401b60:	stur	w8, [x29, #-24]
  401b64:	mov	w8, #0x5f                  	// #95
  401b68:	movk	w8, #0x4000, lsl #16
  401b6c:	stur	w8, [x29, #-28]
  401b70:	stur	wzr, [x29, #-32]
  401b74:	ldur	w0, [x29, #-32]
  401b78:	bl	401588 <log_get_max_level_realm@plt>
  401b7c:	ldur	w8, [x29, #-24]
  401b80:	and	w8, w8, #0x7
  401b84:	cmp	w0, w8
  401b88:	b.lt	401bc0 <run+0xd8>  // b.tstop
  401b8c:	ldur	w8, [x29, #-32]
  401b90:	ldur	w9, [x29, #-24]
  401b94:	orr	w0, w9, w8, lsl #10
  401b98:	ldur	w1, [x29, #-28]
  401b9c:	ldr	x2, [sp, #16]
  401ba0:	mov	w3, #0x204                 	// #516
  401ba4:	adrp	x4, 404000 <make_bad+0x54>
  401ba8:	add	x4, x4, #0xc14
  401bac:	adrp	x5, 404000 <make_bad+0x54>
  401bb0:	add	x5, x5, #0xc18
  401bb4:	bl	401598 <log_internal_realm@plt>
  401bb8:	str	w0, [sp, #12]
  401bbc:	b	401bd4 <run+0xec>
  401bc0:	ldur	w0, [x29, #-28]
  401bc4:	bl	4015a8 <abs@plt>
  401bc8:	mov	w8, wzr
  401bcc:	subs	w8, w8, w0, uxtb
  401bd0:	str	w8, [sp, #12]
  401bd4:	ldr	w8, [sp, #12]
  401bd8:	stur	w8, [x29, #-36]
  401bdc:	ldur	w8, [x29, #-36]
  401be0:	stur	w8, [x29, #-4]
  401be4:	b	401c9c <run+0x1b4>
  401be8:	bl	4015b8 <is_efi_boot@plt>
  401bec:	tbnz	w0, #0, 401c7c <run+0x194>
  401bf0:	mov	w8, #0x3                   	// #3
  401bf4:	str	w8, [sp, #40]
  401bf8:	mov	w8, #0x5f                  	// #95
  401bfc:	movk	w8, #0x4000, lsl #16
  401c00:	str	w8, [sp, #36]
  401c04:	str	wzr, [sp, #32]
  401c08:	ldr	w0, [sp, #32]
  401c0c:	bl	401588 <log_get_max_level_realm@plt>
  401c10:	ldr	w8, [sp, #40]
  401c14:	and	w8, w8, #0x7
  401c18:	cmp	w0, w8
  401c1c:	b.lt	401c54 <run+0x16c>  // b.tstop
  401c20:	ldr	w8, [sp, #32]
  401c24:	ldr	w9, [sp, #40]
  401c28:	orr	w0, w9, w8, lsl #10
  401c2c:	ldr	w1, [sp, #36]
  401c30:	ldr	x2, [sp, #16]
  401c34:	mov	w3, #0x208                 	// #520
  401c38:	adrp	x4, 404000 <make_bad+0x54>
  401c3c:	add	x4, x4, #0xc14
  401c40:	adrp	x5, 404000 <make_bad+0x54>
  401c44:	add	x5, x5, #0xc47
  401c48:	bl	401598 <log_internal_realm@plt>
  401c4c:	str	w0, [sp, #8]
  401c50:	b	401c68 <run+0x180>
  401c54:	ldr	w0, [sp, #36]
  401c58:	bl	4015a8 <abs@plt>
  401c5c:	mov	w8, wzr
  401c60:	subs	w8, w8, w0, uxtb
  401c64:	str	w8, [sp, #8]
  401c68:	ldr	w8, [sp, #8]
  401c6c:	str	w8, [sp, #28]
  401c70:	ldr	w8, [sp, #28]
  401c74:	stur	w8, [x29, #-4]
  401c78:	b	401c9c <run+0x1b4>
  401c7c:	ldur	w0, [x29, #-8]
  401c80:	ldur	x1, [x29, #-16]
  401c84:	adrp	x2, 404000 <make_bad+0x54>
  401c88:	add	x2, x2, #0xa98
  401c8c:	mov	x8, xzr
  401c90:	mov	x3, x8
  401c94:	bl	4015c8 <dispatch_verb@plt>
  401c98:	stur	w0, [x29, #-4]
  401c9c:	ldur	w0, [x29, #-4]
  401ca0:	ldp	x29, x30, [sp, #80]
  401ca4:	add	sp, sp, #0x60
  401ca8:	ret

0000000000401cac <static_destruct>:
  401cac:	sub	sp, sp, #0x20
  401cb0:	stp	x29, x30, [sp, #16]
  401cb4:	add	x29, sp, #0x10
  401cb8:	adrp	x8, 41f000 <__FRAME_END__+0x198c8>
  401cbc:	ldr	x8, [x8, #3624]
  401cc0:	str	x8, [sp]
  401cc4:	cbnz	x8, 401ccc <static_destruct+0x20>
  401cc8:	b	401d20 <static_destruct+0x74>
  401ccc:	ldr	x0, [sp]
  401cd0:	mov	x1, #0x8                   	// #8
  401cd4:	bl	4049c0 <ALIGN_TO>
  401cd8:	str	x0, [sp, #8]
  401cdc:	ldr	x8, [sp, #8]
  401ce0:	adrp	x9, 41f000 <__FRAME_END__+0x198c8>
  401ce4:	ldr	x9, [x9, #3632]
  401ce8:	cmp	x8, x9
  401cec:	b.cs	401d20 <static_destruct+0x74>  // b.hs, b.nlast
  401cf0:	ldr	x8, [sp, #8]
  401cf4:	ldr	x8, [x8, #8]
  401cf8:	ldr	x9, [sp, #8]
  401cfc:	ldr	x0, [x9]
  401d00:	blr	x8
  401d04:	ldr	x8, [sp, #8]
  401d08:	add	x8, x8, #0x10
  401d0c:	mov	x0, x8
  401d10:	mov	x1, #0x8                   	// #8
  401d14:	bl	4049c0 <ALIGN_TO>
  401d18:	str	x0, [sp, #8]
  401d1c:	b	401cdc <static_destruct+0x30>
  401d20:	ldp	x29, x30, [sp, #16]
  401d24:	add	sp, sp, #0x20
  401d28:	ret

0000000000401d2c <strv_freep>:
  401d2c:	sub	sp, sp, #0x20
  401d30:	stp	x29, x30, [sp, #16]
  401d34:	add	x29, sp, #0x10
  401d38:	str	x0, [sp, #8]
  401d3c:	ldr	x8, [sp, #8]
  401d40:	ldr	x8, [x8]
  401d44:	cbz	x8, 401d54 <strv_freep+0x28>
  401d48:	ldr	x8, [sp, #8]
  401d4c:	ldr	x0, [x8]
  401d50:	bl	4015d8 <strv_free@plt>
  401d54:	ldp	x29, x30, [sp, #16]
  401d58:	add	sp, sp, #0x20
  401d5c:	ret

0000000000401d60 <help>:
  401d60:	sub	sp, sp, #0x60
  401d64:	stp	x29, x30, [sp, #80]
  401d68:	add	x29, sp, #0x50
  401d6c:	mov	x8, xzr
  401d70:	adrp	x9, 404000 <make_bad+0x54>
  401d74:	add	x9, x9, #0xc78
  401d78:	adrp	x10, 404000 <make_bad+0x54>
  401d7c:	add	x10, x10, #0xc93
  401d80:	adrp	x11, 404000 <make_bad+0x54>
  401d84:	add	x11, x11, #0xbfb
  401d88:	add	x11, x11, #0x3
  401d8c:	sub	x12, x29, #0x20
  401d90:	stur	w0, [x29, #-8]
  401d94:	stur	x1, [x29, #-16]
  401d98:	stur	x2, [x29, #-24]
  401d9c:	stur	x8, [x29, #-32]
  401da0:	mov	x0, x9
  401da4:	mov	x1, x10
  401da8:	mov	x2, x12
  401dac:	str	x11, [sp, #32]
  401db0:	bl	4015e8 <terminal_urlify_man@plt>
  401db4:	stur	w0, [x29, #-36]
  401db8:	ldur	w13, [x29, #-36]
  401dbc:	cmp	w13, #0x0
  401dc0:	cset	w13, ge  // ge = tcont
  401dc4:	tbnz	w13, #0, 401df4 <help+0x94>
  401dc8:	mov	w8, wzr
  401dcc:	mov	w0, w8
  401dd0:	ldr	x1, [sp, #32]
  401dd4:	mov	w2, #0x20                  	// #32
  401dd8:	adrp	x3, 404000 <make_bad+0x54>
  401ddc:	add	x3, x3, #0xbd8
  401de0:	bl	4015f8 <log_oom_internal@plt>
  401de4:	stur	w0, [x29, #-4]
  401de8:	mov	w8, #0x1                   	// #1
  401dec:	str	w8, [sp, #40]
  401df0:	b	401e40 <help+0xe0>
  401df4:	adrp	x8, 420000 <completed.8445>
  401df8:	add	x8, x8, #0x20
  401dfc:	ldr	x1, [x8]
  401e00:	str	x1, [sp, #24]
  401e04:	bl	4034c4 <ansi_highlight>
  401e08:	str	x0, [sp, #16]
  401e0c:	bl	403508 <ansi_normal>
  401e10:	ldur	x4, [x29, #-32]
  401e14:	adrp	x8, 404000 <make_bad+0x54>
  401e18:	add	x8, x8, #0xc95
  401e1c:	str	x0, [sp, #8]
  401e20:	mov	x0, x8
  401e24:	ldr	x1, [sp, #24]
  401e28:	ldr	x2, [sp, #16]
  401e2c:	ldr	x3, [sp, #8]
  401e30:	bl	401608 <printf@plt>
  401e34:	stur	wzr, [x29, #-4]
  401e38:	mov	w9, #0x1                   	// #1
  401e3c:	str	w9, [sp, #40]
  401e40:	sub	x0, x29, #0x20
  401e44:	bl	40349c <freep>
  401e48:	ldur	w0, [x29, #-4]
  401e4c:	ldp	x29, x30, [sp, #80]
  401e50:	add	sp, sp, #0x60
  401e54:	ret

0000000000401e58 <verb_status>:
  401e58:	sub	sp, sp, #0x180
  401e5c:	stp	x29, x30, [sp, #352]
  401e60:	str	x28, [sp, #368]
  401e64:	add	x29, sp, #0x160
  401e68:	sub	x8, x29, #0x50
  401e6c:	mov	x9, xzr
  401e70:	mov	w10, #0xffffffcf            	// #-49
  401e74:	adrp	x11, 404000 <make_bad+0x54>
  401e78:	add	x11, x11, #0xbfb
  401e7c:	add	x11, x11, #0x3
  401e80:	adrp	x12, 404000 <make_bad+0x54>
  401e84:	add	x12, x12, #0xe3e
  401e88:	adrp	x13, 404000 <make_bad+0x54>
  401e8c:	add	x13, x13, #0xee6
  401e90:	sub	x14, x29, #0x20
  401e94:	sub	x15, x29, #0x28
  401e98:	sub	x4, x29, #0x30
  401e9c:	sub	x16, x29, #0x48
  401ea0:	sub	x3, x29, #0x50
  401ea4:	stur	w0, [x29, #-8]
  401ea8:	str	x1, [x8, #64]
  401eac:	str	x2, [x8, #56]
  401eb0:	str	x9, [x8, #48]
  401eb4:	str	x9, [x8, #40]
  401eb8:	str	x9, [x8, #32]
  401ebc:	str	x9, [x8, #24]
  401ec0:	str	x9, [x8, #16]
  401ec4:	mov	x0, x14
  401ec8:	mov	x1, x15
  401ecc:	mov	x2, x16
  401ed0:	str	x8, [sp, #128]
  401ed4:	str	w10, [sp, #124]
  401ed8:	str	x11, [sp, #112]
  401edc:	str	x12, [sp, #104]
  401ee0:	str	x13, [sp, #96]
  401ee4:	bl	40354c <acquire_boot_count_path>
  401ee8:	stur	w0, [x29, #-92]
  401eec:	ldur	w10, [x29, #-92]
  401ef0:	ldr	w17, [sp, #124]
  401ef4:	cmp	w10, w17
  401ef8:	b.ne	401f18 <verb_status+0xc0>  // b.any
  401efc:	adrp	x0, 404000 <make_bad+0x54>
  401f00:	add	x0, x0, #0xe38
  401f04:	bl	401618 <puts@plt>
  401f08:	stur	wzr, [x29, #-4]
  401f0c:	mov	w8, #0x1                   	// #1
  401f10:	stur	w8, [x29, #-96]
  401f14:	b	402610 <verb_status+0x7b8>
  401f18:	ldur	w8, [x29, #-92]
  401f1c:	cmp	w8, #0x0
  401f20:	cset	w8, ge  // ge = tcont
  401f24:	tbnz	w8, #0, 401f3c <verb_status+0xe4>
  401f28:	ldur	w8, [x29, #-92]
  401f2c:	stur	w8, [x29, #-4]
  401f30:	mov	w8, #0x1                   	// #1
  401f34:	stur	w8, [x29, #-96]
  401f38:	b	402610 <verb_status+0x7b8>
  401f3c:	bl	403adc <acquire_path>
  401f40:	stur	w0, [x29, #-92]
  401f44:	ldur	w8, [x29, #-92]
  401f48:	cmp	w8, #0x0
  401f4c:	cset	w8, ge  // ge = tcont
  401f50:	tbnz	w8, #0, 401f68 <verb_status+0x110>
  401f54:	ldur	w8, [x29, #-92]
  401f58:	stur	w8, [x29, #-4]
  401f5c:	mov	w8, #0x1                   	// #1
  401f60:	stur	w8, [x29, #-96]
  401f64:	b	402610 <verb_status+0x7b8>
  401f68:	ldr	x8, [sp, #128]
  401f6c:	ldr	x0, [x8, #40]
  401f70:	ldr	x1, [x8, #32]
  401f74:	sub	x2, x29, #0x38
  401f78:	bl	403e10 <make_good>
  401f7c:	stur	w0, [x29, #-92]
  401f80:	ldur	w9, [x29, #-92]
  401f84:	cmp	w9, #0x0
  401f88:	cset	w9, ge  // ge = tcont
  401f8c:	tbnz	w9, #0, 401fb8 <verb_status+0x160>
  401f90:	mov	w8, wzr
  401f94:	mov	w0, w8
  401f98:	ldr	x1, [sp, #112]
  401f9c:	mov	w2, #0x153                 	// #339
  401fa0:	ldr	x3, [sp, #104]
  401fa4:	bl	4015f8 <log_oom_internal@plt>
  401fa8:	stur	w0, [x29, #-4]
  401fac:	mov	w8, #0x1                   	// #1
  401fb0:	stur	w8, [x29, #-96]
  401fb4:	b	402610 <verb_status+0x7b8>
  401fb8:	ldr	x8, [sp, #128]
  401fbc:	ldr	x0, [x8, #40]
  401fc0:	ldr	x1, [x8]
  401fc4:	ldr	x2, [x8, #32]
  401fc8:	sub	x3, x29, #0x40
  401fcc:	bl	403fac <make_bad>
  401fd0:	stur	w0, [x29, #-92]
  401fd4:	ldur	w9, [x29, #-92]
  401fd8:	cmp	w9, #0x0
  401fdc:	cset	w9, ge  // ge = tcont
  401fe0:	tbnz	w9, #0, 40200c <verb_status+0x1b4>
  401fe4:	mov	w8, wzr
  401fe8:	mov	w0, w8
  401fec:	ldr	x1, [sp, #112]
  401ff0:	mov	w2, #0x157                 	// #343
  401ff4:	ldr	x3, [sp, #104]
  401ff8:	bl	4015f8 <log_oom_internal@plt>
  401ffc:	stur	w0, [x29, #-4]
  402000:	mov	w8, #0x1                   	// #1
  402004:	stur	w8, [x29, #-96]
  402008:	b	402610 <verb_status+0x7b8>
  40200c:	mov	w8, #0x7                   	// #7
  402010:	stur	w8, [x29, #-100]
  402014:	stur	wzr, [x29, #-104]
  402018:	stur	wzr, [x29, #-108]
  40201c:	ldur	w0, [x29, #-108]
  402020:	bl	401588 <log_get_max_level_realm@plt>
  402024:	ldur	w8, [x29, #-100]
  402028:	and	w8, w8, #0x7
  40202c:	cmp	w0, w8
  402030:	b.lt	40207c <verb_status+0x224>  // b.tstop
  402034:	ldur	w8, [x29, #-108]
  402038:	ldur	w9, [x29, #-100]
  40203c:	orr	w0, w9, w8, lsl #10
  402040:	ldur	w1, [x29, #-104]
  402044:	ldr	x10, [sp, #128]
  402048:	ldr	x6, [x10, #48]
  40204c:	ldr	x7, [x10, #24]
  402050:	ldr	x11, [x10, #16]
  402054:	ldr	x2, [sp, #112]
  402058:	mov	w3, #0x15e                 	// #350
  40205c:	ldr	x4, [sp, #104]
  402060:	adrp	x5, 404000 <make_bad+0x54>
  402064:	add	x5, x5, #0xe4a
  402068:	mov	x12, sp
  40206c:	str	x11, [x12]
  402070:	bl	401598 <log_internal_realm@plt>
  402074:	str	w0, [sp, #92]
  402078:	b	402090 <verb_status+0x238>
  40207c:	ldur	w0, [x29, #-104]
  402080:	bl	4015a8 <abs@plt>
  402084:	mov	w8, wzr
  402088:	subs	w8, w8, w0, uxtb
  40208c:	str	w8, [sp, #92]
  402090:	ldr	w8, [sp, #92]
  402094:	stur	w8, [x29, #-112]
  402098:	mov	w8, #0x7                   	// #7
  40209c:	stur	w8, [x29, #-116]
  4020a0:	stur	wzr, [x29, #-120]
  4020a4:	stur	wzr, [x29, #-124]
  4020a8:	ldur	w0, [x29, #-124]
  4020ac:	bl	401588 <log_get_max_level_realm@plt>
  4020b0:	ldur	w8, [x29, #-116]
  4020b4:	and	w8, w8, #0x7
  4020b8:	cmp	w0, w8
  4020bc:	b.lt	4020fc <verb_status+0x2a4>  // b.tstop
  4020c0:	ldur	w8, [x29, #-124]
  4020c4:	ldur	w9, [x29, #-116]
  4020c8:	orr	w0, w9, w8, lsl #10
  4020cc:	ldur	w1, [x29, #-120]
  4020d0:	ldr	x10, [sp, #128]
  4020d4:	ldr	x6, [x10, #8]
  4020d8:	ldr	x7, [x10]
  4020dc:	ldr	x2, [sp, #112]
  4020e0:	mov	w3, #0x162                 	// #354
  4020e4:	ldr	x4, [sp, #104]
  4020e8:	adrp	x5, 404000 <make_bad+0x54>
  4020ec:	add	x5, x5, #0xe9d
  4020f0:	bl	401598 <log_internal_realm@plt>
  4020f4:	str	w0, [sp, #88]
  4020f8:	b	402110 <verb_status+0x2b8>
  4020fc:	ldur	w0, [x29, #-120]
  402100:	bl	4015a8 <abs@plt>
  402104:	mov	w8, wzr
  402108:	subs	w8, w8, w0, uxtb
  40210c:	str	w8, [sp, #88]
  402110:	ldr	w8, [sp, #88]
  402114:	stur	w8, [x29, #-128]
  402118:	adrp	x9, 420000 <completed.8445>
  40211c:	add	x9, x9, #0x8
  402120:	ldr	x9, [x9]
  402124:	stur	x9, [x29, #-88]
  402128:	ldur	x8, [x29, #-88]
  40212c:	mov	w9, #0x0                   	// #0
  402130:	str	w9, [sp, #84]
  402134:	cbz	x8, 40214c <verb_status+0x2f4>
  402138:	ldur	x8, [x29, #-88]
  40213c:	ldr	x8, [x8]
  402140:	cmp	x8, #0x0
  402144:	cset	w9, ne  // ne = any
  402148:	str	w9, [sp, #84]
  40214c:	ldr	w8, [sp, #84]
  402150:	tbnz	w8, #0, 402158 <verb_status+0x300>
  402154:	b	402584 <verb_status+0x72c>
  402158:	mov	w8, #0xffffffff            	// #-1
  40215c:	stur	w8, [x29, #-132]
  402160:	ldur	x9, [x29, #-88]
  402164:	ldr	x0, [x9]
  402168:	mov	w1, #0x4000                	// #16384
  40216c:	movk	w1, #0x8, lsl #16
  402170:	bl	401628 <open64@plt>
  402174:	stur	w0, [x29, #-132]
  402178:	ldur	w8, [x29, #-132]
  40217c:	cmp	w8, #0x0
  402180:	cset	w8, ge  // ge = tcont
  402184:	tbnz	w8, #0, 40223c <verb_status+0x3e4>
  402188:	bl	401638 <__errno_location@plt>
  40218c:	ldr	w8, [x0]
  402190:	cmp	w8, #0x2
  402194:	b.ne	4021a4 <verb_status+0x34c>  // b.any
  402198:	mov	w8, #0x4                   	// #4
  40219c:	stur	w8, [x29, #-96]
  4021a0:	b	40254c <verb_status+0x6f4>
  4021a4:	mov	w8, #0x3                   	// #3
  4021a8:	stur	w8, [x29, #-136]
  4021ac:	bl	401638 <__errno_location@plt>
  4021b0:	ldr	w8, [x0]
  4021b4:	stur	w8, [x29, #-140]
  4021b8:	stur	wzr, [x29, #-144]
  4021bc:	ldur	w0, [x29, #-144]
  4021c0:	bl	401588 <log_get_max_level_realm@plt>
  4021c4:	ldur	w8, [x29, #-136]
  4021c8:	and	w8, w8, #0x7
  4021cc:	cmp	w0, w8
  4021d0:	b.lt	40220c <verb_status+0x3b4>  // b.tstop
  4021d4:	ldur	w8, [x29, #-144]
  4021d8:	ldur	w9, [x29, #-136]
  4021dc:	orr	w0, w9, w8, lsl #10
  4021e0:	ldur	w1, [x29, #-140]
  4021e4:	ldur	x10, [x29, #-88]
  4021e8:	ldr	x6, [x10]
  4021ec:	ldr	x2, [sp, #112]
  4021f0:	mov	w3, #0x16c                 	// #364
  4021f4:	ldr	x4, [sp, #104]
  4021f8:	adrp	x5, 404000 <make_bad+0x54>
  4021fc:	add	x5, x5, #0xebe
  402200:	bl	401598 <log_internal_realm@plt>
  402204:	str	w0, [sp, #80]
  402208:	b	402220 <verb_status+0x3c8>
  40220c:	ldur	w0, [x29, #-140]
  402210:	bl	4015a8 <abs@plt>
  402214:	mov	w8, wzr
  402218:	subs	w8, w8, w0, uxtb
  40221c:	str	w8, [sp, #80]
  402220:	ldr	w8, [sp, #80]
  402224:	stur	w8, [x29, #-148]
  402228:	ldur	w8, [x29, #-148]
  40222c:	stur	w8, [x29, #-4]
  402230:	mov	w8, #0x1                   	// #1
  402234:	stur	w8, [x29, #-96]
  402238:	b	40254c <verb_status+0x6f4>
  40223c:	ldur	w0, [x29, #-132]
  402240:	ldr	x8, [sp, #128]
  402244:	ldr	x9, [x8, #48]
  402248:	str	w0, [sp, #76]
  40224c:	mov	x0, x9
  402250:	bl	4041c4 <skip_slash>
  402254:	ldr	w10, [sp, #76]
  402258:	str	x0, [sp, #64]
  40225c:	mov	w0, w10
  402260:	ldr	x1, [sp, #64]
  402264:	mov	w11, wzr
  402268:	mov	w2, w11
  40226c:	mov	w3, w11
  402270:	bl	401648 <faccessat@plt>
  402274:	cmp	w0, #0x0
  402278:	cset	w10, lt  // lt = tstop
  40227c:	tbnz	w10, #0, 40229c <verb_status+0x444>
  402280:	adrp	x0, 404000 <make_bad+0x54>
  402284:	add	x0, x0, #0xbed
  402288:	bl	401618 <puts@plt>
  40228c:	stur	wzr, [x29, #-4]
  402290:	mov	w8, #0x1                   	// #1
  402294:	stur	w8, [x29, #-96]
  402298:	b	40254c <verb_status+0x6f4>
  40229c:	bl	401638 <__errno_location@plt>
  4022a0:	ldr	w8, [x0]
  4022a4:	cmp	w8, #0x2
  4022a8:	b.eq	402340 <verb_status+0x4e8>  // b.none
  4022ac:	mov	w8, #0x3                   	// #3
  4022b0:	stur	w8, [x29, #-152]
  4022b4:	bl	401638 <__errno_location@plt>
  4022b8:	ldr	w8, [x0]
  4022bc:	stur	w8, [x29, #-156]
  4022c0:	stur	wzr, [x29, #-160]
  4022c4:	ldur	w0, [x29, #-160]
  4022c8:	bl	401588 <log_get_max_level_realm@plt>
  4022cc:	ldur	w8, [x29, #-152]
  4022d0:	and	w8, w8, #0x7
  4022d4:	cmp	w0, w8
  4022d8:	b.lt	402310 <verb_status+0x4b8>  // b.tstop
  4022dc:	ldur	w8, [x29, #-160]
  4022e0:	ldur	w9, [x29, #-152]
  4022e4:	orr	w0, w9, w8, lsl #10
  4022e8:	ldur	w1, [x29, #-156]
  4022ec:	ldr	x10, [sp, #128]
  4022f0:	ldr	x6, [x10, #48]
  4022f4:	ldr	x2, [sp, #112]
  4022f8:	mov	w3, #0x174                 	// #372
  4022fc:	ldr	x4, [sp, #104]
  402300:	ldr	x5, [sp, #96]
  402304:	bl	401598 <log_internal_realm@plt>
  402308:	str	w0, [sp, #60]
  40230c:	b	402324 <verb_status+0x4cc>
  402310:	ldur	w0, [x29, #-156]
  402314:	bl	4015a8 <abs@plt>
  402318:	mov	w8, wzr
  40231c:	subs	w8, w8, w0, uxtb
  402320:	str	w8, [sp, #60]
  402324:	ldr	w8, [sp, #60]
  402328:	stur	w8, [x29, #-164]
  40232c:	ldur	w8, [x29, #-164]
  402330:	stur	w8, [x29, #-4]
  402334:	mov	w8, #0x1                   	// #1
  402338:	stur	w8, [x29, #-96]
  40233c:	b	40254c <verb_status+0x6f4>
  402340:	ldur	w0, [x29, #-132]
  402344:	ldr	x8, [sp, #128]
  402348:	ldr	x9, [x8, #24]
  40234c:	str	w0, [sp, #56]
  402350:	mov	x0, x9
  402354:	bl	4041c4 <skip_slash>
  402358:	ldr	w10, [sp, #56]
  40235c:	str	x0, [sp, #48]
  402360:	mov	w0, w10
  402364:	ldr	x1, [sp, #48]
  402368:	mov	w11, wzr
  40236c:	mov	w2, w11
  402370:	mov	w3, w11
  402374:	bl	401648 <faccessat@plt>
  402378:	cmp	w0, #0x0
  40237c:	cset	w10, lt  // lt = tstop
  402380:	tbnz	w10, #0, 4023a0 <verb_status+0x548>
  402384:	adrp	x0, 404000 <make_bad+0x54>
  402388:	add	x0, x0, #0xbe4
  40238c:	bl	401618 <puts@plt>
  402390:	stur	wzr, [x29, #-4]
  402394:	mov	w8, #0x1                   	// #1
  402398:	stur	w8, [x29, #-96]
  40239c:	b	40254c <verb_status+0x6f4>
  4023a0:	bl	401638 <__errno_location@plt>
  4023a4:	ldr	w8, [x0]
  4023a8:	cmp	w8, #0x2
  4023ac:	b.eq	402444 <verb_status+0x5ec>  // b.none
  4023b0:	mov	w8, #0x3                   	// #3
  4023b4:	stur	w8, [x29, #-168]
  4023b8:	bl	401638 <__errno_location@plt>
  4023bc:	ldr	w8, [x0]
  4023c0:	stur	w8, [x29, #-172]
  4023c4:	str	wzr, [sp, #176]
  4023c8:	ldr	w0, [sp, #176]
  4023cc:	bl	401588 <log_get_max_level_realm@plt>
  4023d0:	ldur	w8, [x29, #-168]
  4023d4:	and	w8, w8, #0x7
  4023d8:	cmp	w0, w8
  4023dc:	b.lt	402414 <verb_status+0x5bc>  // b.tstop
  4023e0:	ldr	w8, [sp, #176]
  4023e4:	ldur	w9, [x29, #-168]
  4023e8:	orr	w0, w9, w8, lsl #10
  4023ec:	ldur	w1, [x29, #-172]
  4023f0:	ldr	x10, [sp, #128]
  4023f4:	ldr	x6, [x10, #24]
  4023f8:	ldr	x2, [sp, #112]
  4023fc:	mov	w3, #0x17c                 	// #380
  402400:	ldr	x4, [sp, #104]
  402404:	ldr	x5, [sp, #96]
  402408:	bl	401598 <log_internal_realm@plt>
  40240c:	str	w0, [sp, #44]
  402410:	b	402428 <verb_status+0x5d0>
  402414:	ldur	w0, [x29, #-172]
  402418:	bl	4015a8 <abs@plt>
  40241c:	mov	w8, wzr
  402420:	subs	w8, w8, w0, uxtb
  402424:	str	w8, [sp, #44]
  402428:	ldr	w8, [sp, #44]
  40242c:	str	w8, [sp, #172]
  402430:	ldr	w8, [sp, #172]
  402434:	stur	w8, [x29, #-4]
  402438:	mov	w8, #0x1                   	// #1
  40243c:	stur	w8, [x29, #-96]
  402440:	b	40254c <verb_status+0x6f4>
  402444:	ldur	w0, [x29, #-132]
  402448:	ldr	x8, [sp, #128]
  40244c:	ldr	x9, [x8, #16]
  402450:	str	w0, [sp, #40]
  402454:	mov	x0, x9
  402458:	bl	4041c4 <skip_slash>
  40245c:	ldr	w10, [sp, #40]
  402460:	str	x0, [sp, #32]
  402464:	mov	w0, w10
  402468:	ldr	x1, [sp, #32]
  40246c:	mov	w11, wzr
  402470:	mov	w2, w11
  402474:	mov	w3, w11
  402478:	bl	401648 <faccessat@plt>
  40247c:	cmp	w0, #0x0
  402480:	cset	w10, lt  // lt = tstop
  402484:	tbnz	w10, #0, 4024a4 <verb_status+0x64c>
  402488:	adrp	x0, 404000 <make_bad+0x54>
  40248c:	add	x0, x0, #0xbe9
  402490:	bl	401618 <puts@plt>
  402494:	stur	wzr, [x29, #-4]
  402498:	mov	w8, #0x1                   	// #1
  40249c:	stur	w8, [x29, #-96]
  4024a0:	b	40254c <verb_status+0x6f4>
  4024a4:	bl	401638 <__errno_location@plt>
  4024a8:	ldr	w8, [x0]
  4024ac:	cmp	w8, #0x2
  4024b0:	b.eq	402548 <verb_status+0x6f0>  // b.none
  4024b4:	mov	w8, #0x3                   	// #3
  4024b8:	str	w8, [sp, #168]
  4024bc:	bl	401638 <__errno_location@plt>
  4024c0:	ldr	w8, [x0]
  4024c4:	str	w8, [sp, #164]
  4024c8:	str	wzr, [sp, #160]
  4024cc:	ldr	w0, [sp, #160]
  4024d0:	bl	401588 <log_get_max_level_realm@plt>
  4024d4:	ldr	w8, [sp, #168]
  4024d8:	and	w8, w8, #0x7
  4024dc:	cmp	w0, w8
  4024e0:	b.lt	402518 <verb_status+0x6c0>  // b.tstop
  4024e4:	ldr	w8, [sp, #160]
  4024e8:	ldr	w9, [sp, #168]
  4024ec:	orr	w0, w9, w8, lsl #10
  4024f0:	ldr	w1, [sp, #164]
  4024f4:	ldr	x10, [sp, #128]
  4024f8:	ldr	x6, [x10, #16]
  4024fc:	ldr	x2, [sp, #112]
  402500:	mov	w3, #0x183                 	// #387
  402504:	ldr	x4, [sp, #104]
  402508:	ldr	x5, [sp, #96]
  40250c:	bl	401598 <log_internal_realm@plt>
  402510:	str	w0, [sp, #28]
  402514:	b	40252c <verb_status+0x6d4>
  402518:	ldr	w0, [sp, #164]
  40251c:	bl	4015a8 <abs@plt>
  402520:	mov	w8, wzr
  402524:	subs	w8, w8, w0, uxtb
  402528:	str	w8, [sp, #28]
  40252c:	ldr	w8, [sp, #28]
  402530:	str	w8, [sp, #156]
  402534:	ldr	w8, [sp, #156]
  402538:	stur	w8, [x29, #-4]
  40253c:	mov	w8, #0x1                   	// #1
  402540:	stur	w8, [x29, #-96]
  402544:	b	40254c <verb_status+0x6f4>
  402548:	stur	wzr, [x29, #-96]
  40254c:	sub	x0, x29, #0x84
  402550:	bl	40419c <closep>
  402554:	ldur	w8, [x29, #-96]
  402558:	str	w8, [sp, #24]
  40255c:	cbz	w8, 402574 <verb_status+0x71c>
  402560:	b	402564 <verb_status+0x70c>
  402564:	ldr	w8, [sp, #24]
  402568:	cmp	w8, #0x4
  40256c:	b.eq	402574 <verb_status+0x71c>  // b.none
  402570:	b	402610 <verb_status+0x7b8>
  402574:	ldur	x8, [x29, #-88]
  402578:	add	x8, x8, #0x8
  40257c:	stur	x8, [x29, #-88]
  402580:	b	402128 <verb_status+0x2d0>
  402584:	mov	w8, #0x3                   	// #3
  402588:	str	w8, [sp, #152]
  40258c:	mov	w8, #0x10                  	// #16
  402590:	movk	w8, #0x4000, lsl #16
  402594:	str	w8, [sp, #148]
  402598:	str	wzr, [sp, #144]
  40259c:	ldr	w0, [sp, #144]
  4025a0:	bl	401588 <log_get_max_level_realm@plt>
  4025a4:	ldr	w8, [sp, #152]
  4025a8:	and	w8, w8, #0x7
  4025ac:	cmp	w0, w8
  4025b0:	b.lt	4025e4 <verb_status+0x78c>  // b.tstop
  4025b4:	ldr	w8, [sp, #144]
  4025b8:	ldr	w9, [sp, #152]
  4025bc:	orr	w0, w9, w8, lsl #10
  4025c0:	ldr	w1, [sp, #148]
  4025c4:	ldr	x2, [sp, #112]
  4025c8:	mov	w3, #0x188                 	// #392
  4025cc:	ldr	x4, [sp, #104]
  4025d0:	adrp	x5, 404000 <make_bad+0x54>
  4025d4:	add	x5, x5, #0xf09
  4025d8:	bl	401598 <log_internal_realm@plt>
  4025dc:	str	w0, [sp, #20]
  4025e0:	b	4025f8 <verb_status+0x7a0>
  4025e4:	ldr	w0, [sp, #148]
  4025e8:	bl	4015a8 <abs@plt>
  4025ec:	mov	w8, wzr
  4025f0:	subs	w8, w8, w0, uxtb
  4025f4:	str	w8, [sp, #20]
  4025f8:	ldr	w8, [sp, #20]
  4025fc:	str	w8, [sp, #140]
  402600:	ldr	w8, [sp, #140]
  402604:	stur	w8, [x29, #-4]
  402608:	mov	w8, #0x1                   	// #1
  40260c:	stur	w8, [x29, #-96]
  402610:	sub	x0, x29, #0x40
  402614:	bl	40349c <freep>
  402618:	sub	x0, x29, #0x38
  40261c:	bl	40349c <freep>
  402620:	sub	x0, x29, #0x30
  402624:	bl	40349c <freep>
  402628:	sub	x0, x29, #0x28
  40262c:	bl	40349c <freep>
  402630:	sub	x0, x29, #0x20
  402634:	bl	40349c <freep>
  402638:	ldur	w0, [x29, #-4]
  40263c:	ldr	x28, [sp, #368]
  402640:	ldp	x29, x30, [sp, #352]
  402644:	add	sp, sp, #0x180
  402648:	ret

000000000040264c <verb_set>:
  40264c:	stp	x29, x30, [sp, #-32]!
  402650:	str	x28, [sp, #16]
  402654:	mov	x29, sp
  402658:	sub	sp, sp, #0x1f0
  40265c:	sub	x8, x29, #0x70
  402660:	mov	x9, xzr
  402664:	mov	x3, x9
  402668:	mov	w10, #0xffffffcf            	// #-49
  40266c:	adrp	x11, 404000 <make_bad+0x54>
  402670:	add	x11, x11, #0xbfb
  402674:	add	x11, x11, #0x3
  402678:	adrp	x12, 405000 <parse_argv.options+0x4a8>
  40267c:	add	x12, x12, #0x3f4
  402680:	sub	x13, x29, #0x20
  402684:	sub	x14, x29, #0x28
  402688:	sub	x4, x29, #0x30
  40268c:	sub	x15, x29, #0x68
  402690:	stur	w0, [x29, #-8]
  402694:	str	x1, [x8, #96]
  402698:	str	x2, [x8, #88]
  40269c:	str	x9, [x8, #80]
  4026a0:	str	x9, [x8, #72]
  4026a4:	str	x9, [x8, #64]
  4026a8:	str	x9, [x8, #56]
  4026ac:	str	x9, [x8, #48]
  4026b0:	str	x9, [x8, #40]
  4026b4:	mov	x0, x13
  4026b8:	mov	x1, x14
  4026bc:	mov	x2, x3
  4026c0:	mov	x3, x15
  4026c4:	str	x8, [sp, #168]
  4026c8:	str	w10, [sp, #164]
  4026cc:	str	x11, [sp, #152]
  4026d0:	str	x12, [sp, #144]
  4026d4:	bl	40354c <acquire_boot_count_path>
  4026d8:	stur	w0, [x29, #-116]
  4026dc:	ldur	w10, [x29, #-116]
  4026e0:	ldr	w16, [sp, #164]
  4026e4:	cmp	w10, w16
  4026e8:	b.ne	402778 <verb_set+0x12c>  // b.any
  4026ec:	mov	w8, #0x3                   	// #3
  4026f0:	stur	w8, [x29, #-120]
  4026f4:	ldur	w8, [x29, #-116]
  4026f8:	stur	w8, [x29, #-124]
  4026fc:	stur	wzr, [x29, #-128]
  402700:	ldur	w0, [x29, #-128]
  402704:	bl	401588 <log_get_max_level_realm@plt>
  402708:	ldur	w8, [x29, #-120]
  40270c:	and	w8, w8, #0x7
  402710:	cmp	w0, w8
  402714:	b.lt	402748 <verb_set+0xfc>  // b.tstop
  402718:	ldur	w8, [x29, #-128]
  40271c:	ldur	w9, [x29, #-120]
  402720:	orr	w0, w9, w8, lsl #10
  402724:	ldur	w1, [x29, #-124]
  402728:	ldr	x2, [sp, #152]
  40272c:	mov	w3, #0x194                 	// #404
  402730:	ldr	x4, [sp, #144]
  402734:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402738:	add	x5, x5, #0x3fd
  40273c:	bl	401598 <log_internal_realm@plt>
  402740:	str	w0, [sp, #140]
  402744:	b	40275c <verb_set+0x110>
  402748:	ldur	w0, [x29, #-124]
  40274c:	bl	4015a8 <abs@plt>
  402750:	mov	w8, wzr
  402754:	subs	w8, w8, w0, uxtb
  402758:	str	w8, [sp, #140]
  40275c:	ldr	w8, [sp, #140]
  402760:	stur	w8, [x29, #-132]
  402764:	ldur	w8, [x29, #-132]
  402768:	stur	w8, [x29, #-4]
  40276c:	mov	w8, #0x1                   	// #1
  402770:	stur	w8, [x29, #-136]
  402774:	b	403250 <verb_set+0xc04>
  402778:	ldur	w8, [x29, #-116]
  40277c:	cmp	w8, #0x0
  402780:	cset	w8, ge  // ge = tcont
  402784:	tbnz	w8, #0, 40279c <verb_set+0x150>
  402788:	ldur	w8, [x29, #-116]
  40278c:	stur	w8, [x29, #-4]
  402790:	mov	w8, #0x1                   	// #1
  402794:	stur	w8, [x29, #-136]
  402798:	b	403250 <verb_set+0xc04>
  40279c:	bl	403adc <acquire_path>
  4027a0:	stur	w0, [x29, #-116]
  4027a4:	ldur	w8, [x29, #-116]
  4027a8:	cmp	w8, #0x0
  4027ac:	cset	w8, ge  // ge = tcont
  4027b0:	tbnz	w8, #0, 4027c8 <verb_set+0x17c>
  4027b4:	ldur	w8, [x29, #-116]
  4027b8:	stur	w8, [x29, #-4]
  4027bc:	mov	w8, #0x1                   	// #1
  4027c0:	stur	w8, [x29, #-136]
  4027c4:	b	403250 <verb_set+0xc04>
  4027c8:	ldr	x8, [sp, #168]
  4027cc:	ldr	x0, [x8, #72]
  4027d0:	ldr	x1, [x8, #64]
  4027d4:	sub	x2, x29, #0x38
  4027d8:	bl	403e10 <make_good>
  4027dc:	stur	w0, [x29, #-116]
  4027e0:	ldur	w9, [x29, #-116]
  4027e4:	cmp	w9, #0x0
  4027e8:	cset	w9, ge  // ge = tcont
  4027ec:	tbnz	w9, #0, 402818 <verb_set+0x1cc>
  4027f0:	mov	w8, wzr
  4027f4:	mov	w0, w8
  4027f8:	ldr	x1, [sp, #152]
  4027fc:	mov	w2, #0x19e                 	// #414
  402800:	ldr	x3, [sp, #144]
  402804:	bl	4015f8 <log_oom_internal@plt>
  402808:	stur	w0, [x29, #-4]
  40280c:	mov	w8, #0x1                   	// #1
  402810:	stur	w8, [x29, #-136]
  402814:	b	403250 <verb_set+0xc04>
  402818:	ldr	x8, [sp, #168]
  40281c:	ldr	x0, [x8, #72]
  402820:	ldr	x1, [x8, #8]
  402824:	ldr	x2, [x8, #64]
  402828:	sub	x3, x29, #0x40
  40282c:	bl	403fac <make_bad>
  402830:	stur	w0, [x29, #-116]
  402834:	ldur	w9, [x29, #-116]
  402838:	cmp	w9, #0x0
  40283c:	cset	w9, ge  // ge = tcont
  402840:	tbnz	w9, #0, 40286c <verb_set+0x220>
  402844:	mov	w8, wzr
  402848:	mov	w0, w8
  40284c:	ldr	x1, [sp, #152]
  402850:	mov	w2, #0x1a2                 	// #418
  402854:	ldr	x3, [sp, #144]
  402858:	bl	4015f8 <log_oom_internal@plt>
  40285c:	stur	w0, [x29, #-4]
  402860:	mov	w8, #0x1                   	// #1
  402864:	stur	w8, [x29, #-136]
  402868:	b	403250 <verb_set+0xc04>
  40286c:	ldr	x8, [sp, #168]
  402870:	ldr	x9, [x8, #96]
  402874:	ldr	x0, [x9]
  402878:	adrp	x1, 404000 <make_bad+0x54>
  40287c:	add	x1, x1, #0xbe4
  402880:	bl	401658 <strcmp@plt>
  402884:	cbnz	w0, 4028a8 <verb_set+0x25c>
  402888:	ldr	x8, [sp, #168]
  40288c:	ldr	x9, [x8, #56]
  402890:	str	x9, [x8, #32]
  402894:	ldr	x9, [x8, #80]
  402898:	str	x9, [x8, #24]
  40289c:	ldr	x9, [x8, #48]
  4028a0:	str	x9, [x8, #16]
  4028a4:	b	402964 <verb_set+0x318>
  4028a8:	ldr	x8, [sp, #168]
  4028ac:	ldr	x9, [x8, #96]
  4028b0:	ldr	x0, [x9]
  4028b4:	adrp	x1, 404000 <make_bad+0x54>
  4028b8:	add	x1, x1, #0xbe9
  4028bc:	bl	401658 <strcmp@plt>
  4028c0:	cbnz	w0, 4028e4 <verb_set+0x298>
  4028c4:	ldr	x8, [sp, #168]
  4028c8:	ldr	x9, [x8, #48]
  4028cc:	str	x9, [x8, #32]
  4028d0:	ldr	x9, [x8, #80]
  4028d4:	str	x9, [x8, #24]
  4028d8:	ldr	x9, [x8, #56]
  4028dc:	str	x9, [x8, #16]
  4028e0:	b	402964 <verb_set+0x318>
  4028e4:	ldr	x8, [sp, #168]
  4028e8:	ldr	x9, [x8, #96]
  4028ec:	ldr	x0, [x9]
  4028f0:	adrp	x1, 404000 <make_bad+0x54>
  4028f4:	add	x1, x1, #0xbed
  4028f8:	bl	401658 <strcmp@plt>
  4028fc:	cmp	w0, #0x0
  402900:	cset	w10, eq  // eq = none
  402904:	mov	w11, #0x1                   	// #1
  402908:	eor	w10, w10, #0x1
  40290c:	eor	w10, w10, w11
  402910:	eor	w10, w10, w11
  402914:	and	w10, w10, #0x1
  402918:	mov	w1, w10
  40291c:	sxtw	x8, w1
  402920:	cbz	x8, 402948 <verb_set+0x2fc>
  402924:	mov	w8, wzr
  402928:	mov	w0, w8
  40292c:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  402930:	add	x1, x1, #0x426
  402934:	ldr	x2, [sp, #152]
  402938:	mov	w3, #0x1ae                 	// #430
  40293c:	adrp	x4, 405000 <parse_argv.options+0x4a8>
  402940:	add	x4, x4, #0x446
  402944:	bl	401668 <log_assert_failed_realm@plt>
  402948:	ldr	x8, [sp, #168]
  40294c:	ldr	x9, [x8, #80]
  402950:	str	x9, [x8, #32]
  402954:	ldr	x9, [x8, #56]
  402958:	str	x9, [x8, #24]
  40295c:	ldr	x9, [x8, #48]
  402960:	str	x9, [x8, #16]
  402964:	adrp	x8, 420000 <completed.8445>
  402968:	add	x8, x8, #0x8
  40296c:	ldr	x8, [x8]
  402970:	ldr	x9, [sp, #168]
  402974:	str	x8, [x9]
  402978:	ldr	x8, [sp, #168]
  40297c:	ldr	x9, [x8]
  402980:	mov	w10, #0x0                   	// #0
  402984:	str	w10, [sp, #136]
  402988:	cbz	x9, 4029a4 <verb_set+0x358>
  40298c:	ldr	x8, [sp, #168]
  402990:	ldr	x9, [x8]
  402994:	ldr	x9, [x9]
  402998:	cmp	x9, #0x0
  40299c:	cset	w10, ne  // ne = any
  4029a0:	str	w10, [sp, #136]
  4029a4:	ldr	w8, [sp, #136]
  4029a8:	tbnz	w8, #0, 4029b0 <verb_set+0x364>
  4029ac:	b	40313c <verb_set+0xaf0>
  4029b0:	mov	w8, #0xffffffff            	// #-1
  4029b4:	stur	w8, [x29, #-140]
  4029b8:	ldr	x9, [sp, #168]
  4029bc:	ldr	x10, [x9]
  4029c0:	ldr	x0, [x10]
  4029c4:	mov	w1, #0x4000                	// #16384
  4029c8:	movk	w1, #0x8, lsl #16
  4029cc:	bl	401628 <open64@plt>
  4029d0:	stur	w0, [x29, #-140]
  4029d4:	ldur	w8, [x29, #-140]
  4029d8:	cmp	w8, #0x0
  4029dc:	cset	w8, ge  // ge = tcont
  4029e0:	tbnz	w8, #0, 402a80 <verb_set+0x434>
  4029e4:	mov	w8, #0x3                   	// #3
  4029e8:	stur	w8, [x29, #-144]
  4029ec:	bl	401638 <__errno_location@plt>
  4029f0:	ldr	w8, [x0]
  4029f4:	stur	w8, [x29, #-148]
  4029f8:	stur	wzr, [x29, #-152]
  4029fc:	ldur	w0, [x29, #-152]
  402a00:	bl	401588 <log_get_max_level_realm@plt>
  402a04:	ldur	w8, [x29, #-144]
  402a08:	and	w8, w8, #0x7
  402a0c:	cmp	w0, w8
  402a10:	b.lt	402a50 <verb_set+0x404>  // b.tstop
  402a14:	ldur	w8, [x29, #-152]
  402a18:	ldur	w9, [x29, #-144]
  402a1c:	orr	w0, w9, w8, lsl #10
  402a20:	ldur	w1, [x29, #-148]
  402a24:	ldr	x10, [sp, #168]
  402a28:	ldr	x11, [x10]
  402a2c:	ldr	x6, [x11]
  402a30:	ldr	x2, [sp, #152]
  402a34:	mov	w3, #0x1b9                 	// #441
  402a38:	ldr	x4, [sp, #144]
  402a3c:	adrp	x5, 404000 <make_bad+0x54>
  402a40:	add	x5, x5, #0xebe
  402a44:	bl	401598 <log_internal_realm@plt>
  402a48:	str	w0, [sp, #132]
  402a4c:	b	402a64 <verb_set+0x418>
  402a50:	ldur	w0, [x29, #-148]
  402a54:	bl	4015a8 <abs@plt>
  402a58:	mov	w8, wzr
  402a5c:	subs	w8, w8, w0, uxtb
  402a60:	str	w8, [sp, #132]
  402a64:	ldr	w8, [sp, #132]
  402a68:	stur	w8, [x29, #-156]
  402a6c:	ldur	w8, [x29, #-156]
  402a70:	stur	w8, [x29, #-4]
  402a74:	mov	w8, #0x1                   	// #1
  402a78:	stur	w8, [x29, #-136]
  402a7c:	b	4030f0 <verb_set+0xaa4>
  402a80:	ldur	w0, [x29, #-140]
  402a84:	ldr	x8, [sp, #168]
  402a88:	ldr	x9, [x8, #24]
  402a8c:	str	w0, [sp, #128]
  402a90:	mov	x0, x9
  402a94:	bl	4041c4 <skip_slash>
  402a98:	ldur	w2, [x29, #-140]
  402a9c:	ldr	x8, [sp, #168]
  402aa0:	ldr	x9, [x8, #32]
  402aa4:	str	x0, [sp, #120]
  402aa8:	mov	x0, x9
  402aac:	str	w2, [sp, #116]
  402ab0:	bl	4041c4 <skip_slash>
  402ab4:	ldr	w10, [sp, #128]
  402ab8:	str	x0, [sp, #104]
  402abc:	mov	w0, w10
  402ac0:	ldr	x1, [sp, #120]
  402ac4:	ldr	w2, [sp, #116]
  402ac8:	ldr	x3, [sp, #104]
  402acc:	bl	401678 <rename_noreplace@plt>
  402ad0:	stur	w0, [x29, #-116]
  402ad4:	ldur	w10, [x29, #-116]
  402ad8:	mov	w11, #0xffffffef            	// #-17
  402adc:	cmp	w10, w11
  402ae0:	b.ne	402af0 <verb_set+0x4a4>  // b.any
  402ae4:	mov	w8, #0x7                   	// #7
  402ae8:	stur	w8, [x29, #-136]
  402aec:	b	4030f0 <verb_set+0xaa4>
  402af0:	ldur	w8, [x29, #-116]
  402af4:	mov	w9, #0xfffffffe            	// #-2
  402af8:	cmp	w8, w9
  402afc:	b.ne	402db0 <verb_set+0x764>  // b.any
  402b00:	ldur	w0, [x29, #-140]
  402b04:	ldr	x8, [sp, #168]
  402b08:	ldr	x9, [x8, #16]
  402b0c:	str	w0, [sp, #100]
  402b10:	mov	x0, x9
  402b14:	bl	4041c4 <skip_slash>
  402b18:	ldur	w2, [x29, #-140]
  402b1c:	ldr	x8, [sp, #168]
  402b20:	ldr	x9, [x8, #32]
  402b24:	str	x0, [sp, #88]
  402b28:	mov	x0, x9
  402b2c:	str	w2, [sp, #84]
  402b30:	bl	4041c4 <skip_slash>
  402b34:	ldr	w10, [sp, #100]
  402b38:	str	x0, [sp, #72]
  402b3c:	mov	w0, w10
  402b40:	ldr	x1, [sp, #88]
  402b44:	ldr	w2, [sp, #84]
  402b48:	ldr	x3, [sp, #72]
  402b4c:	bl	401678 <rename_noreplace@plt>
  402b50:	stur	w0, [x29, #-116]
  402b54:	ldur	w10, [x29, #-116]
  402b58:	mov	w11, #0xffffffef            	// #-17
  402b5c:	cmp	w10, w11
  402b60:	b.ne	402b70 <verb_set+0x524>  // b.any
  402b64:	mov	w8, #0x7                   	// #7
  402b68:	stur	w8, [x29, #-136]
  402b6c:	b	4030f0 <verb_set+0xaa4>
  402b70:	ldur	w8, [x29, #-116]
  402b74:	mov	w9, #0xfffffffe            	// #-2
  402b78:	cmp	w8, w9
  402b7c:	b.ne	402c84 <verb_set+0x638>  // b.any
  402b80:	ldur	w0, [x29, #-140]
  402b84:	ldr	x8, [sp, #168]
  402b88:	ldr	x9, [x8, #32]
  402b8c:	str	w0, [sp, #68]
  402b90:	mov	x0, x9
  402b94:	bl	4041c4 <skip_slash>
  402b98:	ldr	w10, [sp, #68]
  402b9c:	str	x0, [sp, #56]
  402ba0:	mov	w0, w10
  402ba4:	ldr	x1, [sp, #56]
  402ba8:	mov	w11, wzr
  402bac:	mov	w2, w11
  402bb0:	mov	w3, w11
  402bb4:	bl	401648 <faccessat@plt>
  402bb8:	cmp	w0, #0x0
  402bbc:	cset	w10, lt  // lt = tstop
  402bc0:	tbnz	w10, #0, 402bd0 <verb_set+0x584>
  402bc4:	mov	w8, #0x7                   	// #7
  402bc8:	stur	w8, [x29, #-136]
  402bcc:	b	4030f0 <verb_set+0xaa4>
  402bd0:	bl	401638 <__errno_location@plt>
  402bd4:	ldr	w8, [x0]
  402bd8:	cmp	w8, #0x2
  402bdc:	b.eq	402c78 <verb_set+0x62c>  // b.none
  402be0:	mov	w8, #0x3                   	// #3
  402be4:	stur	w8, [x29, #-160]
  402be8:	bl	401638 <__errno_location@plt>
  402bec:	ldr	w8, [x0]
  402bf0:	stur	w8, [x29, #-164]
  402bf4:	stur	wzr, [x29, #-168]
  402bf8:	ldur	w0, [x29, #-168]
  402bfc:	bl	401588 <log_get_max_level_realm@plt>
  402c00:	ldur	w8, [x29, #-160]
  402c04:	and	w8, w8, #0x7
  402c08:	cmp	w0, w8
  402c0c:	b.lt	402c48 <verb_set+0x5fc>  // b.tstop
  402c10:	ldur	w8, [x29, #-168]
  402c14:	ldur	w9, [x29, #-160]
  402c18:	orr	w0, w9, w8, lsl #10
  402c1c:	ldur	w1, [x29, #-164]
  402c20:	ldr	x10, [sp, #168]
  402c24:	ldr	x6, [x10, #32]
  402c28:	ldr	x2, [sp, #152]
  402c2c:	mov	w3, #0x1c9                 	// #457
  402c30:	ldr	x4, [sp, #144]
  402c34:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402c38:	add	x5, x5, #0x469
  402c3c:	bl	401598 <log_internal_realm@plt>
  402c40:	str	w0, [sp, #52]
  402c44:	b	402c5c <verb_set+0x610>
  402c48:	ldur	w0, [x29, #-164]
  402c4c:	bl	4015a8 <abs@plt>
  402c50:	mov	w8, wzr
  402c54:	subs	w8, w8, w0, uxtb
  402c58:	str	w8, [sp, #52]
  402c5c:	ldr	w8, [sp, #52]
  402c60:	stur	w8, [x29, #-172]
  402c64:	ldur	w8, [x29, #-172]
  402c68:	stur	w8, [x29, #-4]
  402c6c:	mov	w8, #0x1                   	// #1
  402c70:	stur	w8, [x29, #-136]
  402c74:	b	4030f0 <verb_set+0xaa4>
  402c78:	mov	w8, #0x6                   	// #6
  402c7c:	stur	w8, [x29, #-136]
  402c80:	b	4030f0 <verb_set+0xaa4>
  402c84:	ldur	w8, [x29, #-116]
  402c88:	cmp	w8, #0x0
  402c8c:	cset	w8, ge  // ge = tcont
  402c90:	tbnz	w8, #0, 402d2c <verb_set+0x6e0>
  402c94:	mov	w8, #0x3                   	// #3
  402c98:	stur	w8, [x29, #-176]
  402c9c:	ldur	w8, [x29, #-116]
  402ca0:	stur	w8, [x29, #-180]
  402ca4:	stur	wzr, [x29, #-184]
  402ca8:	ldur	w0, [x29, #-184]
  402cac:	bl	401588 <log_get_max_level_realm@plt>
  402cb0:	ldur	w8, [x29, #-176]
  402cb4:	and	w8, w8, #0x7
  402cb8:	cmp	w0, w8
  402cbc:	b.lt	402cfc <verb_set+0x6b0>  // b.tstop
  402cc0:	ldur	w8, [x29, #-184]
  402cc4:	ldur	w9, [x29, #-176]
  402cc8:	orr	w0, w9, w8, lsl #10
  402ccc:	ldur	w1, [x29, #-180]
  402cd0:	ldr	x10, [sp, #168]
  402cd4:	ldr	x6, [x10, #16]
  402cd8:	ldr	x7, [x10, #32]
  402cdc:	ldr	x2, [sp, #152]
  402ce0:	mov	w3, #0x1ce                 	// #462
  402ce4:	ldr	x4, [sp, #144]
  402ce8:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402cec:	add	x5, x5, #0x496
  402cf0:	bl	401598 <log_internal_realm@plt>
  402cf4:	str	w0, [sp, #48]
  402cf8:	b	402d10 <verb_set+0x6c4>
  402cfc:	ldur	w0, [x29, #-180]
  402d00:	bl	4015a8 <abs@plt>
  402d04:	mov	w8, wzr
  402d08:	subs	w8, w8, w0, uxtb
  402d0c:	str	w8, [sp, #48]
  402d10:	ldr	w8, [sp, #48]
  402d14:	stur	w8, [x29, #-188]
  402d18:	ldur	w8, [x29, #-188]
  402d1c:	stur	w8, [x29, #-4]
  402d20:	mov	w8, #0x1                   	// #1
  402d24:	stur	w8, [x29, #-136]
  402d28:	b	4030f0 <verb_set+0xaa4>
  402d2c:	mov	w8, #0x7                   	// #7
  402d30:	stur	w8, [x29, #-192]
  402d34:	stur	wzr, [x29, #-196]
  402d38:	stur	wzr, [x29, #-200]
  402d3c:	ldur	w0, [x29, #-200]
  402d40:	bl	401588 <log_get_max_level_realm@plt>
  402d44:	ldur	w8, [x29, #-192]
  402d48:	and	w8, w8, #0x7
  402d4c:	cmp	w0, w8
  402d50:	b.lt	402d90 <verb_set+0x744>  // b.tstop
  402d54:	ldur	w8, [x29, #-200]
  402d58:	ldur	w9, [x29, #-192]
  402d5c:	orr	w0, w9, w8, lsl #10
  402d60:	ldur	w1, [x29, #-196]
  402d64:	ldr	x10, [sp, #168]
  402d68:	ldr	x6, [x10, #16]
  402d6c:	ldr	x7, [x10, #32]
  402d70:	ldr	x2, [sp, #152]
  402d74:	mov	w3, #0x1d0                 	// #464
  402d78:	ldr	x4, [sp, #144]
  402d7c:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402d80:	add	x5, x5, #0x4b8
  402d84:	bl	401598 <log_internal_realm@plt>
  402d88:	str	w0, [sp, #44]
  402d8c:	b	402da4 <verb_set+0x758>
  402d90:	ldur	w0, [x29, #-196]
  402d94:	bl	4015a8 <abs@plt>
  402d98:	mov	w8, wzr
  402d9c:	subs	w8, w8, w0, uxtb
  402da0:	str	w8, [sp, #44]
  402da4:	ldr	w8, [sp, #44]
  402da8:	stur	w8, [x29, #-204]
  402dac:	b	402ed8 <verb_set+0x88c>
  402db0:	ldur	w8, [x29, #-116]
  402db4:	cmp	w8, #0x0
  402db8:	cset	w8, ge  // ge = tcont
  402dbc:	tbnz	w8, #0, 402e58 <verb_set+0x80c>
  402dc0:	mov	w8, #0x3                   	// #3
  402dc4:	stur	w8, [x29, #-208]
  402dc8:	ldur	w8, [x29, #-116]
  402dcc:	stur	w8, [x29, #-212]
  402dd0:	stur	wzr, [x29, #-216]
  402dd4:	ldur	w0, [x29, #-216]
  402dd8:	bl	401588 <log_get_max_level_realm@plt>
  402ddc:	ldur	w8, [x29, #-208]
  402de0:	and	w8, w8, #0x7
  402de4:	cmp	w0, w8
  402de8:	b.lt	402e28 <verb_set+0x7dc>  // b.tstop
  402dec:	ldur	w8, [x29, #-216]
  402df0:	ldur	w9, [x29, #-208]
  402df4:	orr	w0, w9, w8, lsl #10
  402df8:	ldur	w1, [x29, #-212]
  402dfc:	ldr	x10, [sp, #168]
  402e00:	ldr	x6, [x10, #24]
  402e04:	ldr	x7, [x10, #32]
  402e08:	ldr	x2, [sp, #152]
  402e0c:	mov	w3, #0x1d3                 	// #467
  402e10:	ldr	x4, [sp, #144]
  402e14:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402e18:	add	x5, x5, #0x496
  402e1c:	bl	401598 <log_internal_realm@plt>
  402e20:	str	w0, [sp, #40]
  402e24:	b	402e3c <verb_set+0x7f0>
  402e28:	ldur	w0, [x29, #-212]
  402e2c:	bl	4015a8 <abs@plt>
  402e30:	mov	w8, wzr
  402e34:	subs	w8, w8, w0, uxtb
  402e38:	str	w8, [sp, #40]
  402e3c:	ldr	w8, [sp, #40]
  402e40:	stur	w8, [x29, #-220]
  402e44:	ldur	w8, [x29, #-220]
  402e48:	stur	w8, [x29, #-4]
  402e4c:	mov	w8, #0x1                   	// #1
  402e50:	stur	w8, [x29, #-136]
  402e54:	b	4030f0 <verb_set+0xaa4>
  402e58:	mov	w8, #0x7                   	// #7
  402e5c:	stur	w8, [x29, #-224]
  402e60:	stur	wzr, [x29, #-228]
  402e64:	stur	wzr, [x29, #-232]
  402e68:	ldur	w0, [x29, #-232]
  402e6c:	bl	401588 <log_get_max_level_realm@plt>
  402e70:	ldur	w8, [x29, #-224]
  402e74:	and	w8, w8, #0x7
  402e78:	cmp	w0, w8
  402e7c:	b.lt	402ebc <verb_set+0x870>  // b.tstop
  402e80:	ldur	w8, [x29, #-232]
  402e84:	ldur	w9, [x29, #-224]
  402e88:	orr	w0, w9, w8, lsl #10
  402e8c:	ldur	w1, [x29, #-228]
  402e90:	ldr	x10, [sp, #168]
  402e94:	ldr	x6, [x10, #24]
  402e98:	ldr	x7, [x10, #32]
  402e9c:	ldr	x2, [sp, #152]
  402ea0:	mov	w3, #0x1d5                 	// #469
  402ea4:	ldr	x4, [sp, #144]
  402ea8:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402eac:	add	x5, x5, #0x4b8
  402eb0:	bl	401598 <log_internal_realm@plt>
  402eb4:	str	w0, [sp, #36]
  402eb8:	b	402ed0 <verb_set+0x884>
  402ebc:	ldur	w0, [x29, #-228]
  402ec0:	bl	4015a8 <abs@plt>
  402ec4:	mov	w8, wzr
  402ec8:	subs	w8, w8, w0, uxtb
  402ecc:	str	w8, [sp, #36]
  402ed0:	ldr	w8, [sp, #36]
  402ed4:	stur	w8, [x29, #-236]
  402ed8:	ldr	x8, [sp, #168]
  402edc:	ldr	x0, [x8, #32]
  402ee0:	bl	401688 <dirname_malloc@plt>
  402ee4:	ldr	x8, [sp, #168]
  402ee8:	str	x0, [x8, #40]
  402eec:	ldr	x9, [x8, #40]
  402ef0:	cbnz	x9, 402f1c <verb_set+0x8d0>
  402ef4:	mov	w8, wzr
  402ef8:	mov	w0, w8
  402efc:	ldr	x1, [sp, #152]
  402f00:	mov	w2, #0x1da                 	// #474
  402f04:	ldr	x3, [sp, #144]
  402f08:	bl	4015f8 <log_oom_internal@plt>
  402f0c:	stur	w0, [x29, #-4]
  402f10:	mov	w8, #0x1                   	// #1
  402f14:	stur	w8, [x29, #-136]
  402f18:	b	4030f0 <verb_set+0xaa4>
  402f1c:	ldur	w0, [x29, #-140]
  402f20:	ldr	x8, [sp, #168]
  402f24:	ldr	x9, [x8, #40]
  402f28:	str	w0, [sp, #32]
  402f2c:	mov	x0, x9
  402f30:	bl	4041c4 <skip_slash>
  402f34:	ldr	w10, [sp, #32]
  402f38:	str	x0, [sp, #24]
  402f3c:	mov	w0, w10
  402f40:	ldr	x1, [sp, #24]
  402f44:	bl	401698 <fsync_path_at@plt>
  402f48:	stur	w0, [x29, #-116]
  402f4c:	ldur	w10, [x29, #-116]
  402f50:	cmp	w10, #0x0
  402f54:	cset	w10, ge  // ge = tcont
  402f58:	tbnz	w10, #0, 402fd8 <verb_set+0x98c>
  402f5c:	mov	w8, #0x7                   	// #7
  402f60:	stur	w8, [x29, #-240]
  402f64:	bl	401638 <__errno_location@plt>
  402f68:	ldr	w8, [x0]
  402f6c:	stur	w8, [x29, #-244]
  402f70:	str	wzr, [sp, #248]
  402f74:	ldr	w0, [sp, #248]
  402f78:	bl	401588 <log_get_max_level_realm@plt>
  402f7c:	ldur	w8, [x29, #-240]
  402f80:	and	w8, w8, #0x7
  402f84:	cmp	w0, w8
  402f88:	b.lt	402fbc <verb_set+0x970>  // b.tstop
  402f8c:	ldr	w8, [sp, #248]
  402f90:	ldur	w9, [x29, #-240]
  402f94:	orr	w0, w9, w8, lsl #10
  402f98:	ldur	w1, [x29, #-244]
  402f9c:	ldr	x2, [sp, #152]
  402fa0:	mov	w3, #0x1de                 	// #478
  402fa4:	ldr	x4, [sp, #144]
  402fa8:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  402fac:	add	x5, x5, #0x4db
  402fb0:	bl	401598 <log_internal_realm@plt>
  402fb4:	str	w0, [sp, #20]
  402fb8:	b	402fd0 <verb_set+0x984>
  402fbc:	ldur	w0, [x29, #-244]
  402fc0:	bl	4015a8 <abs@plt>
  402fc4:	mov	w8, wzr
  402fc8:	subs	w8, w8, w0, uxtb
  402fcc:	str	w8, [sp, #20]
  402fd0:	ldr	w8, [sp, #20]
  402fd4:	str	w8, [sp, #244]
  402fd8:	ldur	w0, [x29, #-140]
  402fdc:	bl	4016a8 <syncfs@plt>
  402fe0:	cmp	w0, #0x0
  402fe4:	cset	w8, ge  // ge = tcont
  402fe8:	tbnz	w8, #0, 403068 <verb_set+0xa1c>
  402fec:	mov	w8, #0x7                   	// #7
  402ff0:	str	w8, [sp, #240]
  402ff4:	bl	401638 <__errno_location@plt>
  402ff8:	ldr	w8, [x0]
  402ffc:	str	w8, [sp, #236]
  403000:	str	wzr, [sp, #232]
  403004:	ldr	w0, [sp, #232]
  403008:	bl	401588 <log_get_max_level_realm@plt>
  40300c:	ldr	w8, [sp, #240]
  403010:	and	w8, w8, #0x7
  403014:	cmp	w0, w8
  403018:	b.lt	40304c <verb_set+0xa00>  // b.tstop
  40301c:	ldr	w8, [sp, #232]
  403020:	ldr	w9, [sp, #240]
  403024:	orr	w0, w9, w8, lsl #10
  403028:	ldr	w1, [sp, #236]
  40302c:	ldr	x2, [sp, #152]
  403030:	mov	w3, #0x1e2                 	// #482
  403034:	ldr	x4, [sp, #144]
  403038:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  40303c:	add	x5, x5, #0x50f
  403040:	bl	401598 <log_internal_realm@plt>
  403044:	str	w0, [sp, #16]
  403048:	b	403060 <verb_set+0xa14>
  40304c:	ldr	w0, [sp, #236]
  403050:	bl	4015a8 <abs@plt>
  403054:	mov	w8, wzr
  403058:	subs	w8, w8, w0, uxtb
  40305c:	str	w8, [sp, #16]
  403060:	ldr	w8, [sp, #16]
  403064:	str	w8, [sp, #228]
  403068:	mov	w8, #0x6                   	// #6
  40306c:	str	w8, [sp, #224]
  403070:	str	wzr, [sp, #220]
  403074:	str	wzr, [sp, #216]
  403078:	ldr	w0, [sp, #216]
  40307c:	bl	401588 <log_get_max_level_realm@plt>
  403080:	ldr	w8, [sp, #224]
  403084:	and	w8, w8, #0x7
  403088:	cmp	w0, w8
  40308c:	b.lt	4030d0 <verb_set+0xa84>  // b.tstop
  403090:	ldr	w8, [sp, #216]
  403094:	ldr	w9, [sp, #224]
  403098:	orr	w0, w9, w8, lsl #10
  40309c:	ldr	w1, [sp, #220]
  4030a0:	ldr	x10, [sp, #168]
  4030a4:	ldr	x11, [x10, #96]
  4030a8:	ldr	x6, [x11]
  4030ac:	ldr	x7, [x10, #8]
  4030b0:	ldr	x2, [sp, #152]
  4030b4:	mov	w3, #0x1e4                 	// #484
  4030b8:	ldr	x4, [sp, #144]
  4030bc:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  4030c0:	add	x5, x5, #0x543
  4030c4:	bl	401598 <log_internal_realm@plt>
  4030c8:	str	w0, [sp, #12]
  4030cc:	b	4030e4 <verb_set+0xa98>
  4030d0:	ldr	w0, [sp, #220]
  4030d4:	bl	4015a8 <abs@plt>
  4030d8:	mov	w8, wzr
  4030dc:	subs	w8, w8, w0, uxtb
  4030e0:	str	w8, [sp, #12]
  4030e4:	ldr	w8, [sp, #12]
  4030e8:	str	w8, [sp, #212]
  4030ec:	stur	wzr, [x29, #-136]
  4030f0:	sub	x0, x29, #0x8c
  4030f4:	bl	40419c <closep>
  4030f8:	ldur	w8, [x29, #-136]
  4030fc:	str	w8, [sp, #8]
  403100:	cbz	w8, 403128 <verb_set+0xadc>
  403104:	b	403108 <verb_set+0xabc>
  403108:	ldr	w8, [sp, #8]
  40310c:	cmp	w8, #0x6
  403110:	b.eq	403128 <verb_set+0xadc>  // b.none
  403114:	b	403118 <verb_set+0xacc>
  403118:	ldr	w8, [sp, #8]
  40311c:	cmp	w8, #0x7
  403120:	b.eq	4031d0 <verb_set+0xb84>  // b.none
  403124:	b	403250 <verb_set+0xc04>
  403128:	ldr	x8, [sp, #168]
  40312c:	ldr	x9, [x8]
  403130:	add	x9, x9, #0x8
  403134:	str	x9, [x8]
  403138:	b	402978 <verb_set+0x32c>
  40313c:	mov	w8, #0x3                   	// #3
  403140:	str	w8, [sp, #208]
  403144:	mov	w8, #0x10                  	// #16
  403148:	movk	w8, #0x4000, lsl #16
  40314c:	str	w8, [sp, #204]
  403150:	str	wzr, [sp, #200]
  403154:	ldr	w0, [sp, #200]
  403158:	bl	401588 <log_get_max_level_realm@plt>
  40315c:	ldr	w8, [sp, #208]
  403160:	and	w8, w8, #0x7
  403164:	cmp	w0, w8
  403168:	b.lt	4031a4 <verb_set+0xb58>  // b.tstop
  40316c:	ldr	w8, [sp, #200]
  403170:	ldr	w9, [sp, #208]
  403174:	orr	w0, w9, w8, lsl #10
  403178:	ldr	w1, [sp, #204]
  40317c:	ldr	x10, [sp, #168]
  403180:	ldr	x6, [x10, #32]
  403184:	ldr	x2, [sp, #152]
  403188:	mov	w3, #0x1e7                 	// #487
  40318c:	ldr	x4, [sp, #144]
  403190:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  403194:	add	x5, x5, #0x57a
  403198:	bl	401598 <log_internal_realm@plt>
  40319c:	str	w0, [sp, #4]
  4031a0:	b	4031b8 <verb_set+0xb6c>
  4031a4:	ldr	w0, [sp, #204]
  4031a8:	bl	4015a8 <abs@plt>
  4031ac:	mov	w8, wzr
  4031b0:	subs	w8, w8, w0, uxtb
  4031b4:	str	w8, [sp, #4]
  4031b8:	ldr	w8, [sp, #4]
  4031bc:	str	w8, [sp, #196]
  4031c0:	mov	w8, #0x1                   	// #1
  4031c4:	stur	w8, [x29, #-4]
  4031c8:	stur	w8, [x29, #-136]
  4031cc:	b	403250 <verb_set+0xc04>
  4031d0:	mov	w8, #0x7                   	// #7
  4031d4:	str	w8, [sp, #192]
  4031d8:	str	wzr, [sp, #188]
  4031dc:	str	wzr, [sp, #184]
  4031e0:	ldr	w0, [sp, #184]
  4031e4:	bl	401588 <log_get_max_level_realm@plt>
  4031e8:	ldr	w8, [sp, #192]
  4031ec:	and	w8, w8, #0x7
  4031f0:	cmp	w0, w8
  4031f4:	b.lt	403228 <verb_set+0xbdc>  // b.tstop
  4031f8:	ldr	w8, [sp, #184]
  4031fc:	ldr	w9, [sp, #192]
  403200:	orr	w0, w9, w8, lsl #10
  403204:	ldr	w1, [sp, #188]
  403208:	ldr	x2, [sp, #152]
  40320c:	mov	w3, #0x1eb                 	// #491
  403210:	ldr	x4, [sp, #144]
  403214:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  403218:	add	x5, x5, #0x5ab
  40321c:	bl	401598 <log_internal_realm@plt>
  403220:	str	w0, [sp]
  403224:	b	40323c <verb_set+0xbf0>
  403228:	ldr	w0, [sp, #188]
  40322c:	bl	4015a8 <abs@plt>
  403230:	mov	w8, wzr
  403234:	subs	w8, w8, w0, uxtb
  403238:	str	w8, [sp]
  40323c:	ldr	w8, [sp]
  403240:	str	w8, [sp, #180]
  403244:	stur	wzr, [x29, #-4]
  403248:	mov	w8, #0x1                   	// #1
  40324c:	stur	w8, [x29, #-136]
  403250:	sub	x0, x29, #0x48
  403254:	bl	40349c <freep>
  403258:	sub	x0, x29, #0x40
  40325c:	bl	40349c <freep>
  403260:	sub	x0, x29, #0x38
  403264:	bl	40349c <freep>
  403268:	sub	x0, x29, #0x30
  40326c:	bl	40349c <freep>
  403270:	sub	x0, x29, #0x28
  403274:	bl	40349c <freep>
  403278:	sub	x0, x29, #0x20
  40327c:	bl	40349c <freep>
  403280:	ldur	w0, [x29, #-4]
  403284:	add	sp, sp, #0x1f0
  403288:	ldr	x28, [sp, #16]
  40328c:	ldp	x29, x30, [sp], #32
  403290:	ret

0000000000403294 <parse_argv>:
  403294:	sub	sp, sp, #0x40
  403298:	stp	x29, x30, [sp, #48]
  40329c:	add	x29, sp, #0x30
  4032a0:	adrp	x8, 404000 <make_bad+0x54>
  4032a4:	add	x8, x8, #0xbfb
  4032a8:	add	x8, x8, #0x3
  4032ac:	adrp	x9, 405000 <parse_argv.options+0x4a8>
  4032b0:	add	x9, x9, #0x5f4
  4032b4:	stur	w0, [x29, #-8]
  4032b8:	stur	x1, [x29, #-16]
  4032bc:	str	x8, [sp, #16]
  4032c0:	str	x9, [sp, #8]
  4032c4:	ldur	w8, [x29, #-8]
  4032c8:	cmp	w8, #0x0
  4032cc:	cset	w8, ge  // ge = tcont
  4032d0:	mov	w9, #0x1                   	// #1
  4032d4:	eor	w8, w8, #0x1
  4032d8:	eor	w8, w8, w9
  4032dc:	eor	w8, w8, w9
  4032e0:	and	w8, w8, #0x1
  4032e4:	mov	w0, w8
  4032e8:	sxtw	x10, w0
  4032ec:	cbz	x10, 403310 <parse_argv+0x7c>
  4032f0:	mov	w8, wzr
  4032f4:	mov	w0, w8
  4032f8:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  4032fc:	add	x1, x1, #0x5ea
  403300:	ldr	x2, [sp, #16]
  403304:	mov	w3, #0x45                  	// #69
  403308:	ldr	x4, [sp, #8]
  40330c:	bl	401668 <log_assert_failed_realm@plt>
  403310:	ldur	x8, [x29, #-16]
  403314:	cmp	x8, #0x0
  403318:	cset	w9, ne  // ne = any
  40331c:	mov	w10, #0x1                   	// #1
  403320:	eor	w9, w9, #0x1
  403324:	eor	w9, w9, w10
  403328:	eor	w9, w9, w10
  40332c:	and	w9, w9, #0x1
  403330:	mov	w0, w9
  403334:	sxtw	x8, w0
  403338:	cbz	x8, 40335c <parse_argv+0xc8>
  40333c:	mov	w8, wzr
  403340:	mov	w0, w8
  403344:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  403348:	add	x1, x1, #0x611
  40334c:	ldr	x2, [sp, #16]
  403350:	mov	w3, #0x46                  	// #70
  403354:	ldr	x4, [sp, #8]
  403358:	bl	401668 <log_assert_failed_realm@plt>
  40335c:	ldur	w0, [x29, #-8]
  403360:	ldur	x1, [x29, #-16]
  403364:	adrp	x2, 405000 <parse_argv.options+0x4a8>
  403368:	add	x2, x2, #0x616
  40336c:	adrp	x3, 404000 <make_bad+0x54>
  403370:	add	x3, x3, #0xb58
  403374:	mov	x8, xzr
  403378:	mov	x4, x8
  40337c:	bl	4016b8 <getopt_long@plt>
  403380:	stur	w0, [x29, #-20]
  403384:	cmp	w0, #0x0
  403388:	cset	w9, lt  // lt = tstop
  40338c:	tbnz	w9, #0, 403484 <parse_argv+0x1f0>
  403390:	ldur	w8, [x29, #-20]
  403394:	cmp	w8, #0x3f
  403398:	str	w8, [sp, #4]
  40339c:	b.eq	403454 <parse_argv+0x1c0>  // b.none
  4033a0:	b	4033a4 <parse_argv+0x110>
  4033a4:	ldr	w8, [sp, #4]
  4033a8:	cmp	w8, #0x68
  4033ac:	b.eq	4033d4 <parse_argv+0x140>  // b.none
  4033b0:	b	4033b4 <parse_argv+0x120>
  4033b4:	ldr	w8, [sp, #4]
  4033b8:	cmp	w8, #0x100
  4033bc:	b.eq	403400 <parse_argv+0x16c>  // b.none
  4033c0:	b	4033c4 <parse_argv+0x130>
  4033c4:	ldr	w8, [sp, #4]
  4033c8:	cmp	w8, #0x101
  4033cc:	b.eq	4033f4 <parse_argv+0x160>  // b.none
  4033d0:	b	403460 <parse_argv+0x1cc>
  4033d4:	mov	w8, wzr
  4033d8:	mov	w0, w8
  4033dc:	mov	x9, xzr
  4033e0:	mov	x1, x9
  4033e4:	mov	x2, x9
  4033e8:	bl	401d60 <help>
  4033ec:	stur	wzr, [x29, #-4]
  4033f0:	b	40348c <parse_argv+0x1f8>
  4033f4:	bl	4016c8 <version@plt>
  4033f8:	stur	w0, [x29, #-4]
  4033fc:	b	40348c <parse_argv+0x1f8>
  403400:	adrp	x8, 420000 <completed.8445>
  403404:	add	x8, x8, #0x28
  403408:	ldr	x1, [x8]
  40340c:	adrp	x0, 420000 <completed.8445>
  403410:	add	x0, x0, #0x8
  403414:	bl	4016d8 <strv_extend@plt>
  403418:	str	w0, [sp, #24]
  40341c:	ldr	w9, [sp, #24]
  403420:	cmp	w9, #0x0
  403424:	cset	w9, ge  // ge = tcont
  403428:	tbnz	w9, #0, 403450 <parse_argv+0x1bc>
  40342c:	mov	w8, wzr
  403430:	mov	w0, w8
  403434:	ldr	x1, [sp, #16]
  403438:	mov	w2, #0x55                  	// #85
  40343c:	adrp	x3, 405000 <parse_argv.options+0x4a8>
  403440:	add	x3, x3, #0x618
  403444:	bl	4015f8 <log_oom_internal@plt>
  403448:	stur	w0, [x29, #-4]
  40344c:	b	40348c <parse_argv+0x1f8>
  403450:	b	403480 <parse_argv+0x1ec>
  403454:	mov	w8, #0xffffffea            	// #-22
  403458:	stur	w8, [x29, #-4]
  40345c:	b	40348c <parse_argv+0x1f8>
  403460:	mov	w8, wzr
  403464:	mov	w0, w8
  403468:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  40346c:	add	x1, x1, #0x623
  403470:	ldr	x2, [sp, #16]
  403474:	mov	w3, #0x5c                  	// #92
  403478:	ldr	x4, [sp, #8]
  40347c:	bl	4016e8 <log_assert_failed_unreachable_realm@plt>
  403480:	b	40335c <parse_argv+0xc8>
  403484:	mov	w8, #0x1                   	// #1
  403488:	stur	w8, [x29, #-4]
  40348c:	ldur	w0, [x29, #-4]
  403490:	ldp	x29, x30, [sp, #48]
  403494:	add	sp, sp, #0x40
  403498:	ret

000000000040349c <freep>:
  40349c:	sub	sp, sp, #0x20
  4034a0:	stp	x29, x30, [sp, #16]
  4034a4:	add	x29, sp, #0x10
  4034a8:	str	x0, [sp, #8]
  4034ac:	ldr	x8, [sp, #8]
  4034b0:	ldr	x0, [x8]
  4034b4:	bl	4016f8 <free@plt>
  4034b8:	ldp	x29, x30, [sp, #16]
  4034bc:	add	sp, sp, #0x20
  4034c0:	ret

00000000004034c4 <ansi_highlight>:
  4034c4:	sub	sp, sp, #0x20
  4034c8:	stp	x29, x30, [sp, #16]
  4034cc:	add	x29, sp, #0x10
  4034d0:	adrp	x8, 404000 <make_bad+0x54>
  4034d4:	add	x8, x8, #0xe28
  4034d8:	adrp	x9, 404000 <make_bad+0x54>
  4034dc:	add	x9, x9, #0xe32
  4034e0:	str	x8, [sp, #8]
  4034e4:	str	x9, [sp]
  4034e8:	bl	401708 <colors_enabled@plt>
  4034ec:	tst	w0, #0x1
  4034f0:	ldr	x8, [sp, #8]
  4034f4:	ldr	x9, [sp]
  4034f8:	csel	x0, x8, x9, ne  // ne = any
  4034fc:	ldp	x29, x30, [sp, #16]
  403500:	add	sp, sp, #0x20
  403504:	ret

0000000000403508 <ansi_normal>:
  403508:	sub	sp, sp, #0x20
  40350c:	stp	x29, x30, [sp, #16]
  403510:	add	x29, sp, #0x10
  403514:	adrp	x8, 404000 <make_bad+0x54>
  403518:	add	x8, x8, #0xe33
  40351c:	adrp	x9, 404000 <make_bad+0x54>
  403520:	add	x9, x9, #0xe32
  403524:	str	x8, [sp, #8]
  403528:	str	x9, [sp]
  40352c:	bl	401708 <colors_enabled@plt>
  403530:	tst	w0, #0x1
  403534:	ldr	x8, [sp, #8]
  403538:	ldr	x9, [sp]
  40353c:	csel	x0, x8, x9, ne  // ne = any
  403540:	ldp	x29, x30, [sp, #16]
  403544:	add	sp, sp, #0x20
  403548:	ret

000000000040354c <acquire_boot_count_path>:
  40354c:	sub	sp, sp, #0x180
  403550:	stp	x29, x30, [sp, #288]
  403554:	stp	x28, x27, [sp, #304]
  403558:	stp	x26, x25, [sp, #320]
  40355c:	stp	x24, x23, [sp, #336]
  403560:	stp	x22, x21, [sp, #352]
  403564:	stp	x20, x19, [sp, #368]
  403568:	add	x29, sp, #0x120
  40356c:	mov	x8, xzr
  403570:	mov	w9, #0x4a                  	// #74
  403574:	mov	w10, #0x67                  	// #103
  403578:	mov	w11, #0xb0                  	// #176
  40357c:	mov	w12, #0x82                  	// #130
  403580:	mov	w13, #0xa                   	// #10
  403584:	mov	w14, #0x4c                  	// #76
  403588:	mov	w15, #0x41                  	// #65
  40358c:	mov	w16, #0xcf                  	// #207
  403590:	mov	w17, #0xb6                  	// #182
  403594:	mov	w18, #0xc7                  	// #199
  403598:	mov	w5, #0x44                  	// #68
  40359c:	mov	w6, #0xb                   	// #11
  4035a0:	mov	w7, #0x29                  	// #41
  4035a4:	mov	w19, #0xbb                  	// #187
  4035a8:	mov	w20, #0x8c                  	// #140
  4035ac:	mov	w21, #0x4f                  	// #79
  4035b0:	adrp	x22, 404000 <make_bad+0x54>
  4035b4:	add	x22, x22, #0xf2b
  4035b8:	mov	w23, #0xfffffffe            	// #-2
  4035bc:	adrp	x24, 404000 <make_bad+0x54>
  4035c0:	add	x24, x24, #0xbfb
  4035c4:	add	x24, x24, #0x3
  4035c8:	adrp	x25, 404000 <make_bad+0x54>
  4035cc:	add	x25, x25, #0xf3f
  4035d0:	sub	x26, x29, #0x38
  4035d4:	sub	x27, x29, #0x80
  4035d8:	stur	x0, [x29, #-16]
  4035dc:	stur	x1, [x29, #-24]
  4035e0:	stur	x2, [x29, #-32]
  4035e4:	stur	x3, [x29, #-40]
  4035e8:	stur	x4, [x29, #-48]
  4035ec:	stur	x8, [x29, #-56]
  4035f0:	stur	x8, [x29, #-64]
  4035f4:	stur	x8, [x29, #-72]
  4035f8:	sturb	w9, [x29, #-128]
  4035fc:	strb	w10, [x27, #1]
  403600:	strb	w11, [x27, #2]
  403604:	strb	w12, [x27, #3]
  403608:	strb	w13, [x27, #4]
  40360c:	strb	w14, [x27, #5]
  403610:	strb	w15, [x27, #6]
  403614:	strb	w16, [x27, #7]
  403618:	strb	w17, [x27, #8]
  40361c:	strb	w18, [x27, #9]
  403620:	strb	w5, [x27, #10]
  403624:	strb	w6, [x27, #11]
  403628:	strb	w7, [x27, #12]
  40362c:	strb	w19, [x27, #13]
  403630:	strb	w20, [x27, #14]
  403634:	strb	w21, [x27, #15]
  403638:	ldur	x0, [x29, #-128]
  40363c:	ldur	x1, [x29, #-120]
  403640:	mov	x2, x22
  403644:	mov	x3, x26
  403648:	str	w23, [sp, #36]
  40364c:	str	x24, [sp, #24]
  403650:	str	x25, [sp, #16]
  403654:	bl	401718 <efi_get_variable_string@plt>
  403658:	stur	w0, [x29, #-108]
  40365c:	ldur	w9, [x29, #-108]
  403660:	ldr	w10, [sp, #36]
  403664:	cmp	w9, w10
  403668:	b.ne	403680 <acquire_boot_count_path+0x134>  // b.any
  40366c:	mov	w8, #0xffffffcf            	// #-49
  403670:	stur	w8, [x29, #-4]
  403674:	mov	w8, #0x1                   	// #1
  403678:	stur	w8, [x29, #-132]
  40367c:	b	403aa0 <acquire_boot_count_path+0x554>
  403680:	ldur	w8, [x29, #-108]
  403684:	cmp	w8, #0x0
  403688:	cset	w8, ge  // ge = tcont
  40368c:	tbnz	w8, #0, 40371c <acquire_boot_count_path+0x1d0>
  403690:	mov	w8, #0x3                   	// #3
  403694:	stur	w8, [x29, #-136]
  403698:	ldur	w8, [x29, #-108]
  40369c:	stur	w8, [x29, #-140]
  4036a0:	str	wzr, [sp, #144]
  4036a4:	ldr	w0, [sp, #144]
  4036a8:	bl	401588 <log_get_max_level_realm@plt>
  4036ac:	ldur	w8, [x29, #-136]
  4036b0:	and	w8, w8, #0x7
  4036b4:	cmp	w0, w8
  4036b8:	b.lt	4036ec <acquire_boot_count_path+0x1a0>  // b.tstop
  4036bc:	ldr	w8, [sp, #144]
  4036c0:	ldur	w9, [x29, #-136]
  4036c4:	orr	w0, w9, w8, lsl #10
  4036c8:	ldur	w1, [x29, #-140]
  4036cc:	ldr	x2, [sp, #24]
  4036d0:	mov	w3, #0xdb                  	// #219
  4036d4:	ldr	x4, [sp, #16]
  4036d8:	adrp	x5, 404000 <make_bad+0x54>
  4036dc:	add	x5, x5, #0xf57
  4036e0:	bl	401598 <log_internal_realm@plt>
  4036e4:	str	w0, [sp, #12]
  4036e8:	b	403700 <acquire_boot_count_path+0x1b4>
  4036ec:	ldur	w0, [x29, #-140]
  4036f0:	bl	4015a8 <abs@plt>
  4036f4:	mov	w8, wzr
  4036f8:	subs	w8, w8, w0, uxtb
  4036fc:	str	w8, [sp, #12]
  403700:	ldr	w8, [sp, #12]
  403704:	str	w8, [sp, #140]
  403708:	ldr	w8, [sp, #140]
  40370c:	stur	w8, [x29, #-4]
  403710:	mov	w8, #0x1                   	// #1
  403714:	stur	w8, [x29, #-132]
  403718:	b	403aa0 <acquire_boot_count_path+0x554>
  40371c:	ldur	x0, [x29, #-56]
  403720:	bl	401728 <efi_tilt_backslashes@plt>
  403724:	ldur	x8, [x29, #-56]
  403728:	mov	x0, x8
  40372c:	bl	401738 <path_is_normalized@plt>
  403730:	tbnz	w0, #0, 4037c8 <acquire_boot_count_path+0x27c>
  403734:	mov	w8, #0x3                   	// #3
  403738:	str	w8, [sp, #136]
  40373c:	mov	w8, #0x16                  	// #22
  403740:	movk	w8, #0x4000, lsl #16
  403744:	str	w8, [sp, #132]
  403748:	str	wzr, [sp, #128]
  40374c:	ldr	w0, [sp, #128]
  403750:	bl	401588 <log_get_max_level_realm@plt>
  403754:	ldr	w8, [sp, #136]
  403758:	and	w8, w8, #0x7
  40375c:	cmp	w0, w8
  403760:	b.lt	403798 <acquire_boot_count_path+0x24c>  // b.tstop
  403764:	ldr	w8, [sp, #128]
  403768:	ldr	w9, [sp, #136]
  40376c:	orr	w0, w9, w8, lsl #10
  403770:	ldr	w1, [sp, #132]
  403774:	ldur	x6, [x29, #-56]
  403778:	ldr	x2, [sp, #24]
  40377c:	mov	w3, #0xe2                  	// #226
  403780:	ldr	x4, [sp, #16]
  403784:	adrp	x5, 404000 <make_bad+0x54>
  403788:	add	x5, x5, #0xf8b
  40378c:	bl	401598 <log_internal_realm@plt>
  403790:	str	w0, [sp, #8]
  403794:	b	4037ac <acquire_boot_count_path+0x260>
  403798:	ldr	w0, [sp, #132]
  40379c:	bl	4015a8 <abs@plt>
  4037a0:	mov	w8, wzr
  4037a4:	subs	w8, w8, w0, uxtb
  4037a8:	str	w8, [sp, #8]
  4037ac:	ldr	w8, [sp, #8]
  4037b0:	str	w8, [sp, #124]
  4037b4:	ldr	w8, [sp, #124]
  4037b8:	stur	w8, [x29, #-4]
  4037bc:	mov	w8, #0x1                   	// #1
  4037c0:	stur	w8, [x29, #-132]
  4037c4:	b	403aa0 <acquire_boot_count_path+0x554>
  4037c8:	ldur	x0, [x29, #-56]
  4037cc:	bl	401748 <path_is_absolute@plt>
  4037d0:	tbnz	w0, #0, 403868 <acquire_boot_count_path+0x31c>
  4037d4:	mov	w8, #0x3                   	// #3
  4037d8:	str	w8, [sp, #120]
  4037dc:	mov	w8, #0x16                  	// #22
  4037e0:	movk	w8, #0x4000, lsl #16
  4037e4:	str	w8, [sp, #116]
  4037e8:	str	wzr, [sp, #112]
  4037ec:	ldr	w0, [sp, #112]
  4037f0:	bl	401588 <log_get_max_level_realm@plt>
  4037f4:	ldr	w8, [sp, #120]
  4037f8:	and	w8, w8, #0x7
  4037fc:	cmp	w0, w8
  403800:	b.lt	403838 <acquire_boot_count_path+0x2ec>  // b.tstop
  403804:	ldr	w8, [sp, #112]
  403808:	ldr	w9, [sp, #120]
  40380c:	orr	w0, w9, w8, lsl #10
  403810:	ldr	w1, [sp, #116]
  403814:	ldur	x6, [x29, #-56]
  403818:	ldr	x2, [sp, #24]
  40381c:	mov	w3, #0xe7                  	// #231
  403820:	ldr	x4, [sp, #16]
  403824:	adrp	x5, 404000 <make_bad+0x54>
  403828:	add	x5, x5, #0xfce
  40382c:	bl	401598 <log_internal_realm@plt>
  403830:	str	w0, [sp, #4]
  403834:	b	40384c <acquire_boot_count_path+0x300>
  403838:	ldr	w0, [sp, #116]
  40383c:	bl	4015a8 <abs@plt>
  403840:	mov	w8, wzr
  403844:	subs	w8, w8, w0, uxtb
  403848:	str	w8, [sp, #4]
  40384c:	ldr	w8, [sp, #4]
  403850:	str	w8, [sp, #108]
  403854:	ldr	w8, [sp, #108]
  403858:	stur	w8, [x29, #-4]
  40385c:	mov	w8, #0x1                   	// #1
  403860:	stur	w8, [x29, #-132]
  403864:	b	403aa0 <acquire_boot_count_path+0x554>
  403868:	ldur	x0, [x29, #-56]
  40386c:	bl	401758 <last_path_component@plt>
  403870:	stur	x0, [x29, #-80]
  403874:	ldur	x0, [x29, #-80]
  403878:	mov	w1, #0x2b                  	// #43
  40387c:	bl	401768 <strrchr@plt>
  403880:	stur	x0, [x29, #-88]
  403884:	ldur	x8, [x29, #-88]
  403888:	cbnz	x8, 403920 <acquire_boot_count_path+0x3d4>
  40388c:	mov	w8, #0x3                   	// #3
  403890:	str	w8, [sp, #104]
  403894:	mov	w8, #0x16                  	// #22
  403898:	movk	w8, #0x4000, lsl #16
  40389c:	str	w8, [sp, #100]
  4038a0:	str	wzr, [sp, #96]
  4038a4:	ldr	w0, [sp, #96]
  4038a8:	bl	401588 <log_get_max_level_realm@plt>
  4038ac:	ldr	w8, [sp, #104]
  4038b0:	and	w8, w8, #0x7
  4038b4:	cmp	w0, w8
  4038b8:	b.lt	4038f0 <acquire_boot_count_path+0x3a4>  // b.tstop
  4038bc:	ldr	w8, [sp, #96]
  4038c0:	ldr	w9, [sp, #104]
  4038c4:	orr	w0, w9, w8, lsl #10
  4038c8:	ldr	w1, [sp, #100]
  4038cc:	ldur	x6, [x29, #-56]
  4038d0:	ldr	x2, [sp, #24]
  4038d4:	mov	w3, #0xee                  	// #238
  4038d8:	ldr	x4, [sp, #16]
  4038dc:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  4038e0:	add	x5, x5, #0xf
  4038e4:	bl	401598 <log_internal_realm@plt>
  4038e8:	str	w0, [sp]
  4038ec:	b	403904 <acquire_boot_count_path+0x3b8>
  4038f0:	ldr	w0, [sp, #100]
  4038f4:	bl	4015a8 <abs@plt>
  4038f8:	mov	w8, wzr
  4038fc:	subs	w8, w8, w0, uxtb
  403900:	str	w8, [sp]
  403904:	ldr	w8, [sp]
  403908:	str	w8, [sp, #92]
  40390c:	ldr	w8, [sp, #92]
  403910:	stur	w8, [x29, #-4]
  403914:	mov	w8, #0x1                   	// #1
  403918:	stur	w8, [x29, #-132]
  40391c:	b	403aa0 <acquire_boot_count_path+0x554>
  403920:	ldur	x8, [x29, #-24]
  403924:	cbz	x8, 403970 <acquire_boot_count_path+0x424>
  403928:	ldur	x0, [x29, #-56]
  40392c:	ldur	x8, [x29, #-88]
  403930:	ldur	x9, [x29, #-56]
  403934:	subs	x1, x8, x9
  403938:	bl	401778 <strndup@plt>
  40393c:	stur	x0, [x29, #-64]
  403940:	ldur	x8, [x29, #-64]
  403944:	cbnz	x8, 403970 <acquire_boot_count_path+0x424>
  403948:	mov	w8, wzr
  40394c:	mov	w0, w8
  403950:	ldr	x1, [sp, #24]
  403954:	mov	w2, #0xf3                  	// #243
  403958:	ldr	x3, [sp, #16]
  40395c:	bl	4015f8 <log_oom_internal@plt>
  403960:	stur	w0, [x29, #-4]
  403964:	mov	w8, #0x1                   	// #1
  403968:	stur	w8, [x29, #-132]
  40396c:	b	403aa0 <acquire_boot_count_path+0x554>
  403970:	ldur	x0, [x29, #-56]
  403974:	sub	x1, x29, #0x58
  403978:	sub	x2, x29, #0x60
  40397c:	sub	x3, x29, #0x68
  403980:	bl	40429c <parse_counter>
  403984:	stur	w0, [x29, #-108]
  403988:	ldur	w8, [x29, #-108]
  40398c:	cmp	w8, #0x0
  403990:	cset	w8, ge  // ge = tcont
  403994:	tbnz	w8, #0, 4039ac <acquire_boot_count_path+0x460>
  403998:	ldur	w8, [x29, #-108]
  40399c:	stur	w8, [x29, #-4]
  4039a0:	mov	w8, #0x1                   	// #1
  4039a4:	stur	w8, [x29, #-132]
  4039a8:	b	403aa0 <acquire_boot_count_path+0x554>
  4039ac:	ldur	x8, [x29, #-48]
  4039b0:	cbz	x8, 403a14 <acquire_boot_count_path+0x4c8>
  4039b4:	ldur	x0, [x29, #-88]
  4039b8:	bl	401788 <strdup@plt>
  4039bc:	stur	x0, [x29, #-72]
  4039c0:	ldur	x8, [x29, #-72]
  4039c4:	cbnz	x8, 4039f0 <acquire_boot_count_path+0x4a4>
  4039c8:	mov	w8, wzr
  4039cc:	mov	w0, w8
  4039d0:	ldr	x1, [sp, #24]
  4039d4:	mov	w2, #0xfd                  	// #253
  4039d8:	ldr	x3, [sp, #16]
  4039dc:	bl	4015f8 <log_oom_internal@plt>
  4039e0:	stur	w0, [x29, #-4]
  4039e4:	mov	w8, #0x1                   	// #1
  4039e8:	stur	w8, [x29, #-132]
  4039ec:	b	403aa0 <acquire_boot_count_path+0x554>
  4039f0:	ldur	x8, [x29, #-72]
  4039f4:	str	x8, [sp, #80]
  4039f8:	mov	x8, xzr
  4039fc:	stur	x8, [x29, #-72]
  403a00:	ldr	x8, [sp, #80]
  403a04:	str	x8, [sp, #72]
  403a08:	ldr	x8, [sp, #72]
  403a0c:	ldur	x9, [x29, #-48]
  403a10:	str	x8, [x9]
  403a14:	ldur	x8, [x29, #-16]
  403a18:	cbz	x8, 403a40 <acquire_boot_count_path+0x4f4>
  403a1c:	ldur	x8, [x29, #-56]
  403a20:	str	x8, [sp, #64]
  403a24:	mov	x8, xzr
  403a28:	stur	x8, [x29, #-56]
  403a2c:	ldr	x8, [sp, #64]
  403a30:	str	x8, [sp, #56]
  403a34:	ldr	x8, [sp, #56]
  403a38:	ldur	x9, [x29, #-16]
  403a3c:	str	x8, [x9]
  403a40:	ldur	x8, [x29, #-24]
  403a44:	cbz	x8, 403a6c <acquire_boot_count_path+0x520>
  403a48:	ldur	x8, [x29, #-64]
  403a4c:	str	x8, [sp, #48]
  403a50:	mov	x8, xzr
  403a54:	stur	x8, [x29, #-64]
  403a58:	ldr	x8, [sp, #48]
  403a5c:	str	x8, [sp, #40]
  403a60:	ldr	x8, [sp, #40]
  403a64:	ldur	x9, [x29, #-24]
  403a68:	str	x8, [x9]
  403a6c:	ldur	x8, [x29, #-32]
  403a70:	cbz	x8, 403a80 <acquire_boot_count_path+0x534>
  403a74:	ldur	x8, [x29, #-96]
  403a78:	ldur	x9, [x29, #-32]
  403a7c:	str	x8, [x9]
  403a80:	ldur	x8, [x29, #-40]
  403a84:	cbz	x8, 403a94 <acquire_boot_count_path+0x548>
  403a88:	ldur	x8, [x29, #-104]
  403a8c:	ldur	x9, [x29, #-40]
  403a90:	str	x8, [x9]
  403a94:	stur	wzr, [x29, #-4]
  403a98:	mov	w8, #0x1                   	// #1
  403a9c:	stur	w8, [x29, #-132]
  403aa0:	sub	x0, x29, #0x48
  403aa4:	bl	40349c <freep>
  403aa8:	sub	x0, x29, #0x40
  403aac:	bl	40349c <freep>
  403ab0:	sub	x0, x29, #0x38
  403ab4:	bl	40349c <freep>
  403ab8:	ldur	w0, [x29, #-4]
  403abc:	ldp	x20, x19, [sp, #368]
  403ac0:	ldp	x22, x21, [sp, #352]
  403ac4:	ldp	x24, x23, [sp, #336]
  403ac8:	ldp	x26, x25, [sp, #320]
  403acc:	ldp	x28, x27, [sp, #304]
  403ad0:	ldp	x29, x30, [sp, #288]
  403ad4:	add	sp, sp, #0x180
  403ad8:	ret

0000000000403adc <acquire_path>:
  403adc:	sub	sp, sp, #0x90
  403ae0:	stp	x29, x30, [sp, #128]
  403ae4:	add	x29, sp, #0x80
  403ae8:	mov	x8, xzr
  403aec:	adrp	x9, 420000 <completed.8445>
  403af0:	add	x9, x9, #0x8
  403af4:	adrp	x10, 404000 <make_bad+0x54>
  403af8:	add	x10, x10, #0xbfb
  403afc:	add	x10, x10, #0x3
  403b00:	adrp	x11, 405000 <parse_argv.options+0x4a8>
  403b04:	add	x11, x11, #0x273
  403b08:	stur	x8, [x29, #-16]
  403b0c:	stur	x8, [x29, #-24]
  403b10:	ldr	x0, [x9]
  403b14:	str	x9, [sp, #32]
  403b18:	str	x10, [sp, #24]
  403b1c:	str	x11, [sp, #16]
  403b20:	bl	40494c <strv_isempty>
  403b24:	tbnz	w0, #0, 403b38 <acquire_path+0x5c>
  403b28:	stur	wzr, [x29, #-4]
  403b2c:	mov	w8, #0x1                   	// #1
  403b30:	stur	w8, [x29, #-40]
  403b34:	b	403df0 <acquire_path+0x314>
  403b38:	mov	x8, xzr
  403b3c:	mov	x0, x8
  403b40:	mov	w9, wzr
  403b44:	and	w1, w9, #0x1
  403b48:	sub	x2, x29, #0x10
  403b4c:	mov	x3, x8
  403b50:	mov	x4, x8
  403b54:	str	x4, [sp, #8]
  403b58:	ldr	x5, [sp, #8]
  403b5c:	mov	x6, x8
  403b60:	bl	401798 <find_esp_and_warn@plt>
  403b64:	stur	w0, [x29, #-36]
  403b68:	ldur	w9, [x29, #-36]
  403b6c:	cmp	w9, #0x0
  403b70:	cset	w9, ge  // ge = tcont
  403b74:	tbnz	w9, #0, 403b9c <acquire_path+0xc0>
  403b78:	ldur	w8, [x29, #-36]
  403b7c:	mov	w9, #0xffffff82            	// #-126
  403b80:	cmp	w8, w9
  403b84:	b.eq	403b9c <acquire_path+0xc0>  // b.none
  403b88:	ldur	w8, [x29, #-36]
  403b8c:	stur	w8, [x29, #-4]
  403b90:	mov	w8, #0x1                   	// #1
  403b94:	stur	w8, [x29, #-40]
  403b98:	b	403df0 <acquire_path+0x314>
  403b9c:	mov	x8, xzr
  403ba0:	mov	x0, x8
  403ba4:	mov	w9, wzr
  403ba8:	and	w1, w9, #0x1
  403bac:	sub	x2, x29, #0x18
  403bb0:	mov	x3, x8
  403bb4:	bl	4017a8 <find_xbootldr_and_warn@plt>
  403bb8:	stur	w0, [x29, #-36]
  403bbc:	ldur	w9, [x29, #-36]
  403bc0:	cmp	w9, #0x0
  403bc4:	cset	w9, ge  // ge = tcont
  403bc8:	tbnz	w9, #0, 403bf0 <acquire_path+0x114>
  403bcc:	ldur	w8, [x29, #-36]
  403bd0:	mov	w9, #0xffffff82            	// #-126
  403bd4:	cmp	w8, w9
  403bd8:	b.eq	403bf0 <acquire_path+0x114>  // b.none
  403bdc:	ldur	w8, [x29, #-36]
  403be0:	stur	w8, [x29, #-4]
  403be4:	mov	w8, #0x1                   	// #1
  403be8:	stur	w8, [x29, #-40]
  403bec:	b	403df0 <acquire_path+0x314>
  403bf0:	ldur	x8, [x29, #-16]
  403bf4:	cbnz	x8, 403c90 <acquire_path+0x1b4>
  403bf8:	ldur	x8, [x29, #-24]
  403bfc:	cbnz	x8, 403c90 <acquire_path+0x1b4>
  403c00:	mov	w8, #0x3                   	// #3
  403c04:	stur	w8, [x29, #-44]
  403c08:	mov	w8, #0x2                   	// #2
  403c0c:	movk	w8, #0x4000, lsl #16
  403c10:	stur	w8, [x29, #-48]
  403c14:	stur	wzr, [x29, #-52]
  403c18:	ldur	w0, [x29, #-52]
  403c1c:	bl	401588 <log_get_max_level_realm@plt>
  403c20:	ldur	w8, [x29, #-44]
  403c24:	and	w8, w8, #0x7
  403c28:	cmp	w0, w8
  403c2c:	b.lt	403c60 <acquire_path+0x184>  // b.tstop
  403c30:	ldur	w8, [x29, #-52]
  403c34:	ldur	w9, [x29, #-44]
  403c38:	orr	w0, w9, w8, lsl #10
  403c3c:	ldur	w1, [x29, #-48]
  403c40:	ldr	x2, [sp, #24]
  403c44:	mov	w3, #0x75                  	// #117
  403c48:	ldr	x4, [sp, #16]
  403c4c:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  403c50:	add	x5, x5, #0x280
  403c54:	bl	401598 <log_internal_realm@plt>
  403c58:	str	w0, [sp, #4]
  403c5c:	b	403c74 <acquire_path+0x198>
  403c60:	ldur	w0, [x29, #-48]
  403c64:	bl	4015a8 <abs@plt>
  403c68:	mov	w8, wzr
  403c6c:	subs	w8, w8, w0, uxtb
  403c70:	str	w8, [sp, #4]
  403c74:	ldr	w8, [sp, #4]
  403c78:	stur	w8, [x29, #-56]
  403c7c:	ldur	w8, [x29, #-56]
  403c80:	stur	w8, [x29, #-4]
  403c84:	mov	w8, #0x1                   	// #1
  403c88:	stur	w8, [x29, #-40]
  403c8c:	b	403df0 <acquire_path+0x314>
  403c90:	ldur	x8, [x29, #-16]
  403c94:	cbz	x8, 403cb4 <acquire_path+0x1d8>
  403c98:	ldur	x0, [x29, #-16]
  403c9c:	ldur	x1, [x29, #-24]
  403ca0:	mov	x8, xzr
  403ca4:	mov	x2, x8
  403ca8:	bl	4017b8 <strv_new_internal@plt>
  403cac:	stur	x0, [x29, #-32]
  403cb0:	b	403cc8 <acquire_path+0x1ec>
  403cb4:	ldur	x0, [x29, #-24]
  403cb8:	mov	x8, xzr
  403cbc:	mov	x1, x8
  403cc0:	bl	4017b8 <strv_new_internal@plt>
  403cc4:	stur	x0, [x29, #-32]
  403cc8:	ldur	x8, [x29, #-32]
  403ccc:	cbnz	x8, 403cf8 <acquire_path+0x21c>
  403cd0:	mov	w8, wzr
  403cd4:	mov	w0, w8
  403cd8:	ldr	x1, [sp, #24]
  403cdc:	mov	w2, #0x7c                  	// #124
  403ce0:	ldr	x3, [sp, #16]
  403ce4:	bl	4015f8 <log_oom_internal@plt>
  403ce8:	stur	w0, [x29, #-4]
  403cec:	mov	w8, #0x1                   	// #1
  403cf0:	stur	w8, [x29, #-40]
  403cf4:	b	403df0 <acquire_path+0x314>
  403cf8:	ldr	x8, [sp, #32]
  403cfc:	ldr	x0, [x8]
  403d00:	bl	4015d8 <strv_free@plt>
  403d04:	ldur	x8, [x29, #-32]
  403d08:	ldr	x9, [sp, #32]
  403d0c:	str	x8, [x9]
  403d10:	mov	x8, xzr
  403d14:	stur	x8, [x29, #-32]
  403d18:	mov	w10, wzr
  403d1c:	stur	wzr, [x29, #-60]
  403d20:	mov	w0, w10
  403d24:	bl	401588 <log_get_max_level_realm@plt>
  403d28:	cmp	w0, #0x7
  403d2c:	cset	w10, ge  // ge = tcont
  403d30:	mov	w11, #0x1                   	// #1
  403d34:	eor	w10, w10, #0x1
  403d38:	eor	w10, w10, w11
  403d3c:	and	w10, w10, #0x1
  403d40:	mov	w1, w10
  403d44:	sxtw	x8, w1
  403d48:	cbz	x8, 403de4 <acquire_path+0x308>
  403d4c:	ldr	x8, [sp, #32]
  403d50:	ldr	x0, [x8]
  403d54:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  403d58:	add	x1, x1, #0x302
  403d5c:	bl	40498c <strv_join>
  403d60:	str	x0, [sp, #56]
  403d64:	mov	w9, #0x7                   	// #7
  403d68:	str	w9, [sp, #52]
  403d6c:	str	wzr, [sp, #48]
  403d70:	str	wzr, [sp, #44]
  403d74:	ldr	w0, [sp, #44]
  403d78:	bl	401588 <log_get_max_level_realm@plt>
  403d7c:	ldr	w9, [sp, #52]
  403d80:	and	w9, w9, #0x7
  403d84:	cmp	w0, w9
  403d88:	b.lt	403dc0 <acquire_path+0x2e4>  // b.tstop
  403d8c:	ldr	w8, [sp, #44]
  403d90:	ldr	w9, [sp, #52]
  403d94:	orr	w0, w9, w8, lsl #10
  403d98:	ldr	w1, [sp, #48]
  403d9c:	ldr	x6, [sp, #56]
  403da0:	ldr	x2, [sp, #24]
  403da4:	mov	w3, #0x84                  	// #132
  403da8:	ldr	x4, [sp, #16]
  403dac:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  403db0:	add	x5, x5, #0x304
  403db4:	bl	401598 <log_internal_realm@plt>
  403db8:	str	w0, [sp]
  403dbc:	b	403dd4 <acquire_path+0x2f8>
  403dc0:	ldr	w0, [sp, #48]
  403dc4:	bl	4015a8 <abs@plt>
  403dc8:	mov	w8, wzr
  403dcc:	subs	w8, w8, w0, uxtb
  403dd0:	str	w8, [sp]
  403dd4:	ldr	w8, [sp]
  403dd8:	str	w8, [sp, #40]
  403ddc:	add	x0, sp, #0x38
  403de0:	bl	40349c <freep>
  403de4:	stur	wzr, [x29, #-4]
  403de8:	mov	w8, #0x1                   	// #1
  403dec:	stur	w8, [x29, #-40]
  403df0:	sub	x0, x29, #0x18
  403df4:	bl	40349c <freep>
  403df8:	sub	x0, x29, #0x10
  403dfc:	bl	40349c <freep>
  403e00:	ldur	w0, [x29, #-4]
  403e04:	ldp	x29, x30, [sp, #128]
  403e08:	add	sp, sp, #0x90
  403e0c:	ret

0000000000403e10 <make_good>:
  403e10:	sub	sp, sp, #0x60
  403e14:	stp	x29, x30, [sp, #80]
  403e18:	add	x29, sp, #0x50
  403e1c:	mov	x8, xzr
  403e20:	adrp	x9, 404000 <make_bad+0x54>
  403e24:	add	x9, x9, #0xbfb
  403e28:	add	x9, x9, #0x3
  403e2c:	adrp	x10, 405000 <parse_argv.options+0x4a8>
  403e30:	add	x10, x10, #0x338
  403e34:	stur	x0, [x29, #-16]
  403e38:	stur	x1, [x29, #-24]
  403e3c:	stur	x2, [x29, #-32]
  403e40:	str	x8, [sp, #40]
  403e44:	str	x9, [sp, #8]
  403e48:	str	x10, [sp]
  403e4c:	ldur	x8, [x29, #-16]
  403e50:	cmp	x8, #0x0
  403e54:	cset	w9, ne  // ne = any
  403e58:	mov	w10, #0x1                   	// #1
  403e5c:	eor	w9, w9, #0x1
  403e60:	eor	w9, w9, w10
  403e64:	eor	w9, w9, w10
  403e68:	and	w9, w9, #0x1
  403e6c:	mov	w0, w9
  403e70:	sxtw	x8, w0
  403e74:	cbz	x8, 403e98 <make_good+0x88>
  403e78:	mov	w8, wzr
  403e7c:	mov	w0, w8
  403e80:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  403e84:	add	x1, x1, #0x331
  403e88:	ldr	x2, [sp, #8]
  403e8c:	mov	w3, #0x111                 	// #273
  403e90:	ldr	x4, [sp]
  403e94:	bl	401668 <log_assert_failed_realm@plt>
  403e98:	ldur	x8, [x29, #-24]
  403e9c:	cmp	x8, #0x0
  403ea0:	cset	w9, ne  // ne = any
  403ea4:	mov	w10, #0x1                   	// #1
  403ea8:	eor	w9, w9, #0x1
  403eac:	eor	w9, w9, w10
  403eb0:	eor	w9, w9, w10
  403eb4:	and	w9, w9, #0x1
  403eb8:	mov	w0, w9
  403ebc:	sxtw	x8, w0
  403ec0:	cbz	x8, 403ee4 <make_good+0xd4>
  403ec4:	mov	w8, wzr
  403ec8:	mov	w0, w8
  403ecc:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  403ed0:	add	x1, x1, #0x36b
  403ed4:	ldr	x2, [sp, #8]
  403ed8:	mov	w3, #0x112                 	// #274
  403edc:	ldr	x4, [sp]
  403ee0:	bl	401668 <log_assert_failed_realm@plt>
  403ee4:	ldur	x8, [x29, #-32]
  403ee8:	cmp	x8, #0x0
  403eec:	cset	w9, ne  // ne = any
  403ef0:	mov	w10, #0x1                   	// #1
  403ef4:	eor	w9, w9, #0x1
  403ef8:	eor	w9, w9, w10
  403efc:	eor	w9, w9, w10
  403f00:	and	w9, w9, #0x1
  403f04:	mov	w0, w9
  403f08:	sxtw	x8, w0
  403f0c:	cbz	x8, 403f30 <make_good+0x120>
  403f10:	mov	w8, wzr
  403f14:	mov	w0, w8
  403f18:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  403f1c:	add	x1, x1, #0x372
  403f20:	ldr	x2, [sp, #8]
  403f24:	mov	w3, #0x113                 	// #275
  403f28:	ldr	x4, [sp]
  403f2c:	bl	401668 <log_assert_failed_realm@plt>
  403f30:	ldur	x0, [x29, #-16]
  403f34:	ldur	x1, [x29, #-24]
  403f38:	mov	x8, xzr
  403f3c:	mov	x2, x8
  403f40:	bl	4017c8 <strjoin_real@plt>
  403f44:	str	x0, [sp, #40]
  403f48:	ldr	x8, [sp, #40]
  403f4c:	cbnz	x8, 403f64 <make_good+0x154>
  403f50:	mov	w8, #0xfffffff4            	// #-12
  403f54:	stur	w8, [x29, #-4]
  403f58:	mov	w8, #0x1                   	// #1
  403f5c:	str	w8, [sp, #36]
  403f60:	b	403f94 <make_good+0x184>
  403f64:	ldr	x8, [sp, #40]
  403f68:	str	x8, [sp, #24]
  403f6c:	mov	x8, xzr
  403f70:	str	x8, [sp, #40]
  403f74:	ldr	x8, [sp, #24]
  403f78:	str	x8, [sp, #16]
  403f7c:	ldr	x8, [sp, #16]
  403f80:	ldur	x9, [x29, #-32]
  403f84:	str	x8, [x9]
  403f88:	stur	wzr, [x29, #-4]
  403f8c:	mov	w10, #0x1                   	// #1
  403f90:	str	w10, [sp, #36]
  403f94:	add	x0, sp, #0x28
  403f98:	bl	40349c <freep>
  403f9c:	ldur	w0, [x29, #-4]
  403fa0:	ldp	x29, x30, [sp, #80]
  403fa4:	add	sp, sp, #0x60
  403fa8:	ret

0000000000403fac <make_bad>:
  403fac:	sub	sp, sp, #0x70
  403fb0:	stp	x29, x30, [sp, #96]
  403fb4:	add	x29, sp, #0x60
  403fb8:	mov	x8, xzr
  403fbc:	adrp	x9, 404000 <make_bad+0x54>
  403fc0:	add	x9, x9, #0xbfb
  403fc4:	add	x9, x9, #0x3
  403fc8:	adrp	x10, 405000 <parse_argv.options+0x4a8>
  403fcc:	add	x10, x10, #0x376
  403fd0:	stur	x0, [x29, #-16]
  403fd4:	stur	x1, [x29, #-24]
  403fd8:	stur	x2, [x29, #-32]
  403fdc:	stur	x3, [x29, #-40]
  403fe0:	str	x8, [sp, #48]
  403fe4:	str	x9, [sp, #16]
  403fe8:	str	x10, [sp, #8]
  403fec:	ldur	x8, [x29, #-16]
  403ff0:	cmp	x8, #0x0
  403ff4:	cset	w9, ne  // ne = any
  403ff8:	mov	w10, #0x1                   	// #1
  403ffc:	eor	w9, w9, #0x1
  404000:	eor	w9, w9, w10
  404004:	eor	w9, w9, w10
  404008:	and	w9, w9, #0x1
  40400c:	mov	w0, w9
  404010:	sxtw	x8, w0
  404014:	cbz	x8, 404038 <make_bad+0x8c>
  404018:	mov	w8, wzr
  40401c:	mov	w0, w8
  404020:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404024:	add	x1, x1, #0x331
  404028:	ldr	x2, [sp, #16]
  40402c:	mov	w3, #0x124                 	// #292
  404030:	ldr	x4, [sp, #8]
  404034:	bl	401668 <log_assert_failed_realm@plt>
  404038:	ldur	x8, [x29, #-32]
  40403c:	cmp	x8, #0x0
  404040:	cset	w9, ne  // ne = any
  404044:	mov	w10, #0x1                   	// #1
  404048:	eor	w9, w9, #0x1
  40404c:	eor	w9, w9, w10
  404050:	eor	w9, w9, w10
  404054:	and	w9, w9, #0x1
  404058:	mov	w0, w9
  40405c:	sxtw	x8, w0
  404060:	cbz	x8, 404084 <make_bad+0xd8>
  404064:	mov	w8, wzr
  404068:	mov	w0, w8
  40406c:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404070:	add	x1, x1, #0x36b
  404074:	ldr	x2, [sp, #16]
  404078:	mov	w3, #0x125                 	// #293
  40407c:	ldr	x4, [sp, #8]
  404080:	bl	401668 <log_assert_failed_realm@plt>
  404084:	ldur	x8, [x29, #-40]
  404088:	cmp	x8, #0x0
  40408c:	cset	w9, ne  // ne = any
  404090:	mov	w10, #0x1                   	// #1
  404094:	eor	w9, w9, #0x1
  404098:	eor	w9, w9, w10
  40409c:	eor	w9, w9, w10
  4040a0:	and	w9, w9, #0x1
  4040a4:	mov	w0, w9
  4040a8:	sxtw	x8, w0
  4040ac:	cbz	x8, 4040d0 <make_bad+0x124>
  4040b0:	mov	w8, wzr
  4040b4:	mov	w0, w8
  4040b8:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  4040bc:	add	x1, x1, #0x372
  4040c0:	ldr	x2, [sp, #16]
  4040c4:	mov	w3, #0x126                 	// #294
  4040c8:	ldr	x4, [sp, #8]
  4040cc:	bl	401668 <log_assert_failed_realm@plt>
  4040d0:	ldur	x8, [x29, #-24]
  4040d4:	cbnz	x8, 404118 <make_bad+0x16c>
  4040d8:	ldur	x0, [x29, #-16]
  4040dc:	ldur	x2, [x29, #-32]
  4040e0:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  4040e4:	add	x1, x1, #0x3b2
  4040e8:	mov	x8, xzr
  4040ec:	mov	x3, x8
  4040f0:	bl	4017c8 <strjoin_real@plt>
  4040f4:	str	x0, [sp, #48]
  4040f8:	ldr	x8, [sp, #48]
  4040fc:	cbnz	x8, 404114 <make_bad+0x168>
  404100:	mov	w8, #0xfffffff4            	// #-12
  404104:	stur	w8, [x29, #-4]
  404108:	mov	w8, #0x1                   	// #1
  40410c:	str	w8, [sp, #44]
  404110:	b	404184 <make_bad+0x1d8>
  404114:	b	404154 <make_bad+0x1a8>
  404118:	ldur	x2, [x29, #-16]
  40411c:	ldur	x3, [x29, #-24]
  404120:	ldur	x4, [x29, #-32]
  404124:	add	x0, sp, #0x30
  404128:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  40412c:	add	x1, x1, #0x3b5
  404130:	bl	4017d8 <asprintf@plt>
  404134:	cmp	w0, #0x0
  404138:	cset	w8, ge  // ge = tcont
  40413c:	tbnz	w8, #0, 404154 <make_bad+0x1a8>
  404140:	mov	w8, #0xfffffff4            	// #-12
  404144:	stur	w8, [x29, #-4]
  404148:	mov	w8, #0x1                   	// #1
  40414c:	str	w8, [sp, #44]
  404150:	b	404184 <make_bad+0x1d8>
  404154:	ldr	x8, [sp, #48]
  404158:	str	x8, [sp, #32]
  40415c:	mov	x8, xzr
  404160:	str	x8, [sp, #48]
  404164:	ldr	x8, [sp, #32]
  404168:	str	x8, [sp, #24]
  40416c:	ldr	x8, [sp, #24]
  404170:	ldur	x9, [x29, #-40]
  404174:	str	x8, [x9]
  404178:	stur	wzr, [x29, #-4]
  40417c:	mov	w10, #0x1                   	// #1
  404180:	str	w10, [sp, #44]
  404184:	add	x0, sp, #0x30
  404188:	bl	40349c <freep>
  40418c:	ldur	w0, [x29, #-4]
  404190:	ldp	x29, x30, [sp, #96]
  404194:	add	sp, sp, #0x70
  404198:	ret

000000000040419c <closep>:
  40419c:	sub	sp, sp, #0x20
  4041a0:	stp	x29, x30, [sp, #16]
  4041a4:	add	x29, sp, #0x10
  4041a8:	str	x0, [sp, #8]
  4041ac:	ldr	x8, [sp, #8]
  4041b0:	ldr	w0, [x8]
  4041b4:	bl	4017e8 <safe_close@plt>
  4041b8:	ldp	x29, x30, [sp, #16]
  4041bc:	add	sp, sp, #0x20
  4041c0:	ret

00000000004041c4 <skip_slash>:
  4041c4:	sub	sp, sp, #0x20
  4041c8:	stp	x29, x30, [sp, #16]
  4041cc:	add	x29, sp, #0x10
  4041d0:	adrp	x8, 404000 <make_bad+0x54>
  4041d4:	add	x8, x8, #0xbfb
  4041d8:	add	x8, x8, #0x3
  4041dc:	str	x0, [sp, #8]
  4041e0:	str	x8, [sp]
  4041e4:	ldr	x8, [sp, #8]
  4041e8:	cmp	x8, #0x0
  4041ec:	cset	w9, ne  // ne = any
  4041f0:	mov	w10, #0x1                   	// #1
  4041f4:	eor	w9, w9, #0x1
  4041f8:	eor	w9, w9, w10
  4041fc:	eor	w9, w9, w10
  404200:	and	w9, w9, #0x1
  404204:	mov	w0, w9
  404208:	sxtw	x8, w0
  40420c:	cbz	x8, 404234 <skip_slash+0x70>
  404210:	mov	w8, wzr
  404214:	mov	w0, w8
  404218:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  40421c:	add	x1, x1, #0x5b
  404220:	ldr	x2, [sp]
  404224:	mov	w3, #0x139                 	// #313
  404228:	adrp	x4, 405000 <parse_argv.options+0x4a8>
  40422c:	add	x4, x4, #0x3c0
  404230:	bl	401668 <log_assert_failed_realm@plt>
  404234:	ldr	x8, [sp, #8]
  404238:	ldrb	w9, [x8]
  40423c:	cmp	w9, #0x2f
  404240:	cset	w9, eq  // eq = none
  404244:	mov	w10, #0x1                   	// #1
  404248:	eor	w9, w9, #0x1
  40424c:	eor	w9, w9, w10
  404250:	eor	w9, w9, w10
  404254:	and	w9, w9, #0x1
  404258:	mov	w0, w9
  40425c:	sxtw	x8, w0
  404260:	cbz	x8, 404288 <skip_slash+0xc4>
  404264:	mov	w8, wzr
  404268:	mov	w0, w8
  40426c:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404270:	add	x1, x1, #0x3e5
  404274:	ldr	x2, [sp]
  404278:	mov	w3, #0x13a                 	// #314
  40427c:	adrp	x4, 405000 <parse_argv.options+0x4a8>
  404280:	add	x4, x4, #0x3c0
  404284:	bl	401668 <log_assert_failed_realm@plt>
  404288:	ldr	x8, [sp, #8]
  40428c:	add	x0, x8, #0x1
  404290:	ldp	x29, x30, [sp, #16]
  404294:	add	sp, sp, #0x20
  404298:	ret

000000000040429c <parse_counter>:
  40429c:	stp	x29, x30, [sp, #-32]!
  4042a0:	str	x28, [sp, #16]
  4042a4:	mov	x29, sp
  4042a8:	sub	sp, sp, #0x130
  4042ac:	adrp	x8, 404000 <make_bad+0x54>
  4042b0:	add	x8, x8, #0xbfb
  4042b4:	add	x8, x8, #0x3
  4042b8:	adrp	x9, 405000 <parse_argv.options+0x4a8>
  4042bc:	add	x9, x9, #0xc0
  4042c0:	adrp	x10, 405000 <parse_argv.options+0x4a8>
  4042c4:	add	x10, x10, #0x60
  4042c8:	stur	x0, [x29, #-16]
  4042cc:	stur	x1, [x29, #-24]
  4042d0:	stur	x2, [x29, #-32]
  4042d4:	stur	x3, [x29, #-40]
  4042d8:	stur	x8, [x29, #-240]
  4042dc:	stur	x9, [x29, #-248]
  4042e0:	stur	x10, [x29, #-256]
  4042e4:	ldur	x8, [x29, #-16]
  4042e8:	cmp	x8, #0x0
  4042ec:	cset	w9, ne  // ne = any
  4042f0:	mov	w10, #0x1                   	// #1
  4042f4:	eor	w9, w9, #0x1
  4042f8:	eor	w9, w9, w10
  4042fc:	eor	w9, w9, w10
  404300:	and	w9, w9, #0x1
  404304:	mov	w0, w9
  404308:	sxtw	x8, w0
  40430c:	cbz	x8, 404330 <parse_counter+0x94>
  404310:	mov	w8, wzr
  404314:	mov	w0, w8
  404318:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  40431c:	add	x1, x1, #0x5b
  404320:	ldur	x2, [x29, #-240]
  404324:	mov	w3, #0x95                  	// #149
  404328:	ldur	x4, [x29, #-256]
  40432c:	bl	401668 <log_assert_failed_realm@plt>
  404330:	ldur	x8, [x29, #-24]
  404334:	cmp	x8, #0x0
  404338:	cset	w9, ne  // ne = any
  40433c:	mov	w10, #0x1                   	// #1
  404340:	eor	w9, w9, #0x1
  404344:	eor	w9, w9, w10
  404348:	eor	w9, w9, w10
  40434c:	and	w9, w9, #0x1
  404350:	mov	w0, w9
  404354:	sxtw	x8, w0
  404358:	cbz	x8, 40437c <parse_counter+0xe0>
  40435c:	mov	w8, wzr
  404360:	mov	w0, w8
  404364:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404368:	add	x1, x1, #0xa7
  40436c:	ldur	x2, [x29, #-240]
  404370:	mov	w3, #0x96                  	// #150
  404374:	ldur	x4, [x29, #-256]
  404378:	bl	401668 <log_assert_failed_realm@plt>
  40437c:	ldur	x8, [x29, #-24]
  404380:	ldr	x8, [x8]
  404384:	stur	x8, [x29, #-72]
  404388:	ldur	x8, [x29, #-72]
  40438c:	cmp	x8, #0x0
  404390:	cset	w9, ne  // ne = any
  404394:	mov	w10, #0x1                   	// #1
  404398:	eor	w9, w9, #0x1
  40439c:	eor	w9, w9, w10
  4043a0:	eor	w9, w9, w10
  4043a4:	and	w9, w9, #0x1
  4043a8:	mov	w0, w9
  4043ac:	sxtw	x8, w0
  4043b0:	cbz	x8, 4043d4 <parse_counter+0x138>
  4043b4:	mov	w8, wzr
  4043b8:	mov	w0, w8
  4043bc:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  4043c0:	add	x1, x1, #0xa9
  4043c4:	ldur	x2, [x29, #-240]
  4043c8:	mov	w3, #0x99                  	// #153
  4043cc:	ldur	x4, [x29, #-256]
  4043d0:	bl	401668 <log_assert_failed_realm@plt>
  4043d4:	ldur	x8, [x29, #-72]
  4043d8:	ldrb	w9, [x8]
  4043dc:	cmp	w9, #0x2b
  4043e0:	cset	w9, eq  // eq = none
  4043e4:	mov	w10, #0x1                   	// #1
  4043e8:	eor	w9, w9, #0x1
  4043ec:	eor	w9, w9, w10
  4043f0:	eor	w9, w9, w10
  4043f4:	and	w9, w9, #0x1
  4043f8:	mov	w0, w9
  4043fc:	sxtw	x8, w0
  404400:	cbz	x8, 404424 <parse_counter+0x188>
  404404:	mov	w8, wzr
  404408:	mov	w0, w8
  40440c:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404410:	add	x1, x1, #0xab
  404414:	ldur	x2, [x29, #-240]
  404418:	mov	w3, #0x9a                  	// #154
  40441c:	ldur	x4, [x29, #-256]
  404420:	bl	401668 <log_assert_failed_realm@plt>
  404424:	ldur	x8, [x29, #-72]
  404428:	add	x8, x8, #0x1
  40442c:	stur	x8, [x29, #-72]
  404430:	ldur	x0, [x29, #-72]
  404434:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404438:	add	x1, x1, #0xb5
  40443c:	bl	4017f8 <strspn@plt>
  404440:	stur	x0, [x29, #-80]
  404444:	ldur	x8, [x29, #-80]
  404448:	cbnz	x8, 4044e4 <parse_counter+0x248>
  40444c:	mov	w8, #0x3                   	// #3
  404450:	stur	w8, [x29, #-88]
  404454:	mov	w8, #0x16                  	// #22
  404458:	movk	w8, #0x4000, lsl #16
  40445c:	stur	w8, [x29, #-92]
  404460:	stur	wzr, [x29, #-96]
  404464:	ldur	w0, [x29, #-96]
  404468:	bl	401588 <log_get_max_level_realm@plt>
  40446c:	ldur	w8, [x29, #-88]
  404470:	and	w8, w8, #0x7
  404474:	cmp	w0, w8
  404478:	b.lt	4044b4 <parse_counter+0x218>  // b.tstop
  40447c:	ldur	w8, [x29, #-96]
  404480:	ldur	w9, [x29, #-88]
  404484:	orr	w0, w9, w8, lsl #10
  404488:	ldur	w1, [x29, #-92]
  40448c:	ldur	x6, [x29, #-16]
  404490:	ldur	x2, [x29, #-240]
  404494:	mov	w3, #0xa2                  	// #162
  404498:	ldur	x4, [x29, #-248]
  40449c:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  4044a0:	add	x5, x5, #0xce
  4044a4:	bl	401598 <log_internal_realm@plt>
  4044a8:	sub	x8, x29, #0x4
  4044ac:	stur	w0, [x8, #-256]
  4044b0:	b	4044cc <parse_counter+0x230>
  4044b4:	ldur	w0, [x29, #-92]
  4044b8:	bl	4015a8 <abs@plt>
  4044bc:	mov	w8, wzr
  4044c0:	subs	w8, w8, w0, uxtb
  4044c4:	sub	x9, x29, #0x4
  4044c8:	stur	w8, [x9, #-256]
  4044cc:	sub	x8, x29, #0x4
  4044d0:	ldur	w8, [x8, #-256]
  4044d4:	stur	w8, [x29, #-100]
  4044d8:	ldur	w8, [x29, #-100]
  4044dc:	stur	w8, [x29, #-4]
  4044e0:	b	40490c <parse_counter+0x670>
  4044e4:	ldur	x8, [x29, #-72]
  4044e8:	stur	x8, [x29, #-112]
  4044ec:	ldur	x0, [x29, #-112]
  4044f0:	ldur	x1, [x29, #-80]
  4044f4:	bl	401808 <strnlen@plt>
  4044f8:	stur	x0, [x29, #-120]
  4044fc:	ldur	x8, [x29, #-120]
  404500:	mov	x9, #0x1                   	// #1
  404504:	add	x8, x8, #0x1
  404508:	mul	x8, x8, x9
  40450c:	add	x8, x8, #0xf
  404510:	and	x8, x8, #0xfffffffffffffff0
  404514:	mov	x9, sp
  404518:	subs	x8, x9, x8
  40451c:	mov	sp, x8
  404520:	stur	x8, [x29, #-128]
  404524:	ldur	x8, [x29, #-128]
  404528:	ldur	x9, [x29, #-120]
  40452c:	add	x8, x8, x9
  404530:	mov	w10, #0x0                   	// #0
  404534:	strb	w10, [x8]
  404538:	ldur	x8, [x29, #-128]
  40453c:	ldur	x1, [x29, #-112]
  404540:	ldur	x2, [x29, #-120]
  404544:	mov	x0, x8
  404548:	sub	x9, x29, #0x10
  40454c:	stur	x8, [x9, #-256]
  404550:	bl	401818 <memcpy@plt>
  404554:	sub	x8, x29, #0x10
  404558:	ldur	x8, [x8, #-256]
  40455c:	stur	x8, [x29, #-136]
  404560:	ldur	x9, [x29, #-136]
  404564:	stur	x9, [x29, #-64]
  404568:	ldur	x0, [x29, #-64]
  40456c:	sub	x1, x29, #0x30
  404570:	bl	404920 <safe_atou64>
  404574:	stur	w0, [x29, #-84]
  404578:	ldur	w10, [x29, #-84]
  40457c:	cmp	w10, #0x0
  404580:	cset	w10, ge  // ge = tcont
  404584:	tbnz	w10, #0, 40461c <parse_counter+0x380>
  404588:	mov	w8, #0x3                   	// #3
  40458c:	stur	w8, [x29, #-140]
  404590:	ldur	w8, [x29, #-84]
  404594:	stur	w8, [x29, #-144]
  404598:	stur	wzr, [x29, #-148]
  40459c:	ldur	w0, [x29, #-148]
  4045a0:	bl	401588 <log_get_max_level_realm@plt>
  4045a4:	ldur	w8, [x29, #-140]
  4045a8:	and	w8, w8, #0x7
  4045ac:	cmp	w0, w8
  4045b0:	b.lt	4045ec <parse_counter+0x350>  // b.tstop
  4045b4:	ldur	w8, [x29, #-148]
  4045b8:	ldur	w9, [x29, #-140]
  4045bc:	orr	w0, w9, w8, lsl #10
  4045c0:	ldur	w1, [x29, #-144]
  4045c4:	ldur	x6, [x29, #-16]
  4045c8:	ldur	x2, [x29, #-240]
  4045cc:	mov	w3, #0xa7                  	// #167
  4045d0:	ldur	x4, [x29, #-248]
  4045d4:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  4045d8:	add	x5, x5, #0x112
  4045dc:	bl	401598 <log_internal_realm@plt>
  4045e0:	sub	x8, x29, #0x14
  4045e4:	stur	w0, [x8, #-256]
  4045e8:	b	404604 <parse_counter+0x368>
  4045ec:	ldur	w0, [x29, #-144]
  4045f0:	bl	4015a8 <abs@plt>
  4045f4:	mov	w8, wzr
  4045f8:	subs	w8, w8, w0, uxtb
  4045fc:	sub	x9, x29, #0x14
  404600:	stur	w8, [x9, #-256]
  404604:	sub	x8, x29, #0x14
  404608:	ldur	w8, [x8, #-256]
  40460c:	stur	w8, [x29, #-152]
  404610:	ldur	w8, [x29, #-152]
  404614:	stur	w8, [x29, #-4]
  404618:	b	40490c <parse_counter+0x670>
  40461c:	ldur	x8, [x29, #-80]
  404620:	ldur	x9, [x29, #-72]
  404624:	add	x8, x9, x8
  404628:	stur	x8, [x29, #-72]
  40462c:	ldur	x8, [x29, #-72]
  404630:	ldrb	w10, [x8]
  404634:	cmp	w10, #0x2d
  404638:	b.ne	404848 <parse_counter+0x5ac>  // b.any
  40463c:	ldur	x8, [x29, #-72]
  404640:	add	x8, x8, #0x1
  404644:	stur	x8, [x29, #-72]
  404648:	ldur	x0, [x29, #-72]
  40464c:	adrp	x1, 405000 <parse_argv.options+0x4a8>
  404650:	add	x1, x1, #0xb5
  404654:	bl	4017f8 <strspn@plt>
  404658:	stur	x0, [x29, #-80]
  40465c:	ldur	x8, [x29, #-80]
  404660:	cbnz	x8, 4046fc <parse_counter+0x460>
  404664:	mov	w8, #0x3                   	// #3
  404668:	stur	w8, [x29, #-156]
  40466c:	mov	w8, #0x16                  	// #22
  404670:	movk	w8, #0x4000, lsl #16
  404674:	stur	w8, [x29, #-160]
  404678:	stur	wzr, [x29, #-164]
  40467c:	ldur	w0, [x29, #-164]
  404680:	bl	401588 <log_get_max_level_realm@plt>
  404684:	ldur	w8, [x29, #-156]
  404688:	and	w8, w8, #0x7
  40468c:	cmp	w0, w8
  404690:	b.lt	4046cc <parse_counter+0x430>  // b.tstop
  404694:	ldur	w8, [x29, #-164]
  404698:	ldur	w9, [x29, #-156]
  40469c:	orr	w0, w9, w8, lsl #10
  4046a0:	ldur	w1, [x29, #-160]
  4046a4:	ldur	x6, [x29, #-16]
  4046a8:	ldur	x2, [x29, #-240]
  4046ac:	mov	w3, #0xb2                  	// #178
  4046b0:	ldur	x4, [x29, #-248]
  4046b4:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  4046b8:	add	x5, x5, #0x154
  4046bc:	bl	401598 <log_internal_realm@plt>
  4046c0:	sub	x8, x29, #0x18
  4046c4:	stur	w0, [x8, #-256]
  4046c8:	b	4046e4 <parse_counter+0x448>
  4046cc:	ldur	w0, [x29, #-160]
  4046d0:	bl	4015a8 <abs@plt>
  4046d4:	mov	w8, wzr
  4046d8:	subs	w8, w8, w0, uxtb
  4046dc:	sub	x9, x29, #0x18
  4046e0:	stur	w8, [x9, #-256]
  4046e4:	sub	x8, x29, #0x18
  4046e8:	ldur	w8, [x8, #-256]
  4046ec:	stur	w8, [x29, #-168]
  4046f0:	ldur	w8, [x29, #-168]
  4046f4:	stur	w8, [x29, #-4]
  4046f8:	b	40490c <parse_counter+0x670>
  4046fc:	ldur	x8, [x29, #-72]
  404700:	stur	x8, [x29, #-176]
  404704:	ldur	x0, [x29, #-176]
  404708:	ldur	x1, [x29, #-80]
  40470c:	bl	401808 <strnlen@plt>
  404710:	stur	x0, [x29, #-184]
  404714:	ldur	x8, [x29, #-184]
  404718:	mov	x9, #0x1                   	// #1
  40471c:	add	x8, x8, #0x1
  404720:	mul	x8, x8, x9
  404724:	add	x8, x8, #0xf
  404728:	and	x8, x8, #0xfffffffffffffff0
  40472c:	mov	x9, sp
  404730:	subs	x8, x9, x8
  404734:	mov	sp, x8
  404738:	stur	x8, [x29, #-192]
  40473c:	ldur	x8, [x29, #-192]
  404740:	ldur	x9, [x29, #-184]
  404744:	add	x8, x8, x9
  404748:	mov	w10, #0x0                   	// #0
  40474c:	strb	w10, [x8]
  404750:	ldur	x8, [x29, #-192]
  404754:	ldur	x1, [x29, #-176]
  404758:	ldur	x2, [x29, #-184]
  40475c:	mov	x0, x8
  404760:	sub	x9, x29, #0x20
  404764:	stur	x8, [x9, #-256]
  404768:	bl	401818 <memcpy@plt>
  40476c:	sub	x8, x29, #0x20
  404770:	ldur	x8, [x8, #-256]
  404774:	stur	x8, [x29, #-200]
  404778:	ldur	x9, [x29, #-200]
  40477c:	stur	x9, [x29, #-64]
  404780:	ldur	x0, [x29, #-64]
  404784:	sub	x1, x29, #0x38
  404788:	bl	404920 <safe_atou64>
  40478c:	stur	w0, [x29, #-84]
  404790:	ldur	w10, [x29, #-84]
  404794:	cmp	w10, #0x0
  404798:	cset	w10, ge  // ge = tcont
  40479c:	tbnz	w10, #0, 404834 <parse_counter+0x598>
  4047a0:	mov	w8, #0x3                   	// #3
  4047a4:	stur	w8, [x29, #-204]
  4047a8:	ldur	w8, [x29, #-84]
  4047ac:	stur	w8, [x29, #-208]
  4047b0:	stur	wzr, [x29, #-212]
  4047b4:	ldur	w0, [x29, #-212]
  4047b8:	bl	401588 <log_get_max_level_realm@plt>
  4047bc:	ldur	w8, [x29, #-204]
  4047c0:	and	w8, w8, #0x7
  4047c4:	cmp	w0, w8
  4047c8:	b.lt	404804 <parse_counter+0x568>  // b.tstop
  4047cc:	ldur	w8, [x29, #-212]
  4047d0:	ldur	w9, [x29, #-204]
  4047d4:	orr	w0, w9, w8, lsl #10
  4047d8:	ldur	w1, [x29, #-208]
  4047dc:	ldur	x6, [x29, #-16]
  4047e0:	ldur	x2, [x29, #-240]
  4047e4:	mov	w3, #0xb7                  	// #183
  4047e8:	ldur	x4, [x29, #-248]
  4047ec:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  4047f0:	add	x5, x5, #0x198
  4047f4:	bl	401598 <log_internal_realm@plt>
  4047f8:	sub	x8, x29, #0x24
  4047fc:	stur	w0, [x8, #-256]
  404800:	b	40481c <parse_counter+0x580>
  404804:	ldur	w0, [x29, #-208]
  404808:	bl	4015a8 <abs@plt>
  40480c:	mov	w8, wzr
  404810:	subs	w8, w8, w0, uxtb
  404814:	sub	x9, x29, #0x24
  404818:	stur	w8, [x9, #-256]
  40481c:	sub	x8, x29, #0x24
  404820:	ldur	w8, [x8, #-256]
  404824:	stur	w8, [x29, #-216]
  404828:	ldur	w8, [x29, #-216]
  40482c:	stur	w8, [x29, #-4]
  404830:	b	40490c <parse_counter+0x670>
  404834:	ldur	x8, [x29, #-80]
  404838:	ldur	x9, [x29, #-72]
  40483c:	add	x8, x9, x8
  404840:	stur	x8, [x29, #-72]
  404844:	b	40484c <parse_counter+0x5b0>
  404848:	stur	xzr, [x29, #-56]
  40484c:	ldur	x8, [x29, #-56]
  404850:	cbnz	x8, 4048d4 <parse_counter+0x638>
  404854:	mov	w8, #0x4                   	// #4
  404858:	stur	w8, [x29, #-220]
  40485c:	stur	wzr, [x29, #-224]
  404860:	stur	wzr, [x29, #-228]
  404864:	ldur	w0, [x29, #-228]
  404868:	bl	401588 <log_get_max_level_realm@plt>
  40486c:	ldur	w8, [x29, #-220]
  404870:	and	w8, w8, #0x7
  404874:	cmp	w0, w8
  404878:	b.lt	4048b0 <parse_counter+0x614>  // b.tstop
  40487c:	ldur	w8, [x29, #-228]
  404880:	ldur	w9, [x29, #-220]
  404884:	orr	w0, w9, w8, lsl #10
  404888:	ldur	w1, [x29, #-224]
  40488c:	ldur	x2, [x29, #-240]
  404890:	mov	w3, #0xbe                  	// #190
  404894:	ldur	x4, [x29, #-248]
  404898:	adrp	x5, 405000 <parse_argv.options+0x4a8>
  40489c:	add	x5, x5, #0x1da
  4048a0:	bl	401598 <log_internal_realm@plt>
  4048a4:	sub	x8, x29, #0x28
  4048a8:	stur	w0, [x8, #-256]
  4048ac:	b	4048c8 <parse_counter+0x62c>
  4048b0:	ldur	w0, [x29, #-224]
  4048b4:	bl	4015a8 <abs@plt>
  4048b8:	mov	w8, wzr
  4048bc:	subs	w8, w8, w0, uxtb
  4048c0:	sub	x9, x29, #0x28
  4048c4:	stur	w8, [x9, #-256]
  4048c8:	sub	x8, x29, #0x28
  4048cc:	ldur	w8, [x8, #-256]
  4048d0:	stur	w8, [x29, #-232]
  4048d4:	ldur	x8, [x29, #-72]
  4048d8:	ldur	x9, [x29, #-24]
  4048dc:	str	x8, [x9]
  4048e0:	ldur	x8, [x29, #-32]
  4048e4:	cbz	x8, 4048f4 <parse_counter+0x658>
  4048e8:	ldur	x8, [x29, #-48]
  4048ec:	ldur	x9, [x29, #-32]
  4048f0:	str	x8, [x9]
  4048f4:	ldur	x8, [x29, #-40]
  4048f8:	cbz	x8, 404908 <parse_counter+0x66c>
  4048fc:	ldur	x8, [x29, #-56]
  404900:	ldur	x9, [x29, #-40]
  404904:	str	x8, [x9]
  404908:	stur	wzr, [x29, #-4]
  40490c:	ldur	w0, [x29, #-4]
  404910:	mov	sp, x29
  404914:	ldr	x28, [sp, #16]
  404918:	ldp	x29, x30, [sp], #32
  40491c:	ret

0000000000404920 <safe_atou64>:
  404920:	sub	sp, sp, #0x20
  404924:	stp	x29, x30, [sp, #16]
  404928:	add	x29, sp, #0x10
  40492c:	str	x0, [sp, #8]
  404930:	str	x1, [sp]
  404934:	ldr	x0, [sp, #8]
  404938:	ldr	x1, [sp]
  40493c:	bl	401828 <safe_atollu@plt>
  404940:	ldp	x29, x30, [sp, #16]
  404944:	add	sp, sp, #0x20
  404948:	ret

000000000040494c <strv_isempty>:
  40494c:	sub	sp, sp, #0x10
  404950:	str	x0, [sp, #8]
  404954:	ldr	x8, [sp, #8]
  404958:	mov	w9, #0x1                   	// #1
  40495c:	str	w9, [sp, #4]
  404960:	cbz	x8, 40497c <strv_isempty+0x30>
  404964:	ldr	x8, [sp, #8]
  404968:	ldr	x8, [x8]
  40496c:	cmp	x8, #0x0
  404970:	cset	w9, ne  // ne = any
  404974:	eor	w9, w9, #0x1
  404978:	str	w9, [sp, #4]
  40497c:	ldr	w8, [sp, #4]
  404980:	and	w0, w8, #0x1
  404984:	add	sp, sp, #0x10
  404988:	ret

000000000040498c <strv_join>:
  40498c:	sub	sp, sp, #0x20
  404990:	stp	x29, x30, [sp, #16]
  404994:	add	x29, sp, #0x10
  404998:	mov	x8, xzr
  40499c:	str	x0, [sp, #8]
  4049a0:	str	x1, [sp]
  4049a4:	ldr	x0, [sp, #8]
  4049a8:	ldr	x1, [sp]
  4049ac:	mov	x2, x8
  4049b0:	bl	401838 <strv_join_prefix@plt>
  4049b4:	ldp	x29, x30, [sp, #16]
  4049b8:	add	sp, sp, #0x20
  4049bc:	ret

00000000004049c0 <ALIGN_TO>:
  4049c0:	sub	sp, sp, #0x10
  4049c4:	str	x0, [sp, #8]
  4049c8:	str	x1, [sp]
  4049cc:	ldr	x8, [sp, #8]
  4049d0:	ldr	x9, [sp]
  4049d4:	add	x8, x8, x9
  4049d8:	subs	x8, x8, #0x1
  4049dc:	ldr	x9, [sp]
  4049e0:	subs	x9, x9, #0x1
  4049e4:	bic	x0, x8, x9
  4049e8:	add	sp, sp, #0x10
  4049ec:	ret

00000000004049f0 <__libc_csu_init>:
  4049f0:	stp	x29, x30, [sp, #-64]!
  4049f4:	mov	x29, sp
  4049f8:	stp	x19, x20, [sp, #16]
  4049fc:	adrp	x20, 41f000 <__FRAME_END__+0x198c8>
  404a00:	add	x20, x20, #0xbf8
  404a04:	stp	x21, x22, [sp, #32]
  404a08:	adrp	x21, 41f000 <__FRAME_END__+0x198c8>
  404a0c:	add	x21, x21, #0xbf0
  404a10:	sub	x20, x20, x21
  404a14:	mov	w22, w0
  404a18:	stp	x23, x24, [sp, #48]
  404a1c:	mov	x23, x1
  404a20:	mov	x24, x2
  404a24:	bl	4014b0 <_init>
  404a28:	cmp	xzr, x20, asr #3
  404a2c:	b.eq	404a58 <__libc_csu_init+0x68>  // b.none
  404a30:	asr	x20, x20, #3
  404a34:	mov	x19, #0x0                   	// #0
  404a38:	ldr	x3, [x21, x19, lsl #3]
  404a3c:	mov	x2, x24
  404a40:	add	x19, x19, #0x1
  404a44:	mov	x1, x23
  404a48:	mov	w0, w22
  404a4c:	blr	x3
  404a50:	cmp	x20, x19
  404a54:	b.ne	404a38 <__libc_csu_init+0x48>  // b.any
  404a58:	ldp	x19, x20, [sp, #16]
  404a5c:	ldp	x21, x22, [sp, #32]
  404a60:	ldp	x23, x24, [sp, #48]
  404a64:	ldp	x29, x30, [sp], #64
  404a68:	ret
  404a6c:	nop

0000000000404a70 <__libc_csu_fini>:
  404a70:	ret

Disassembly of section .fini:

0000000000404a74 <_fini>:
  404a74:	stp	x29, x30, [sp, #-16]!
  404a78:	mov	x29, sp
  404a7c:	ldp	x29, x30, [sp], #16
  404a80:	ret
